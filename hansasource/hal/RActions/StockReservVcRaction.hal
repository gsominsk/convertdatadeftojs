external updating function LongInt StockReservMakeStockMov(record StockReservVc);
external procedure GetCurUser(var record UserVc);

global
function LongInt StockReservVcRecordDefaults(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;

  StockReservr.SerNr = -1;
  StockReservr.TransDate = CurrentDate;
  StockReservr.TransTime = CurrentTime;
  StockReservr.PrioLevel = 100;
  if (SingleUserMode) then begin
    StockReservr.SerNr = NextSerNr("StockReservVc",StockReservr.TransDate,-1,false,"");
  end;
  if (nonblank(CurrentUser)) then begin
    GetCurUser(Userr);
    StockReservr.ShortSign = Userr.Code;
  end;
  StockReservVcRecordDefaults = res;
  RETURN;
END;

global
function LongInt StockReservVcRecordDuplicate(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;

  StockReservr.SerNr = -1;
  StockReservr.TransDate = CurrentDate;
  StockReservr.TransTime = CurrentTime;
  StockReservr.PrioLevel = 100;
  StockReservr.Donef = 0;
  StockReservr.QuantDone = BlankVal;
  if (SingleUserMode) then begin
    StockReservr.SerNr = NextSerNr("StockReservVc",StockReservr.TransDate,-1,false,"");
  end;
  if (nonblank(CurrentUser)) then begin
    GetCurUser(Userr);
    StockReservr.ShortSign = Userr.Code;
  end;
  StockReservVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt StockReservVcRecordSave(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Date blankd;

  if (StockReservr.SerNr==-1) then begin
    StockReservr.SerNr = NextSerNr("StockReservVc",StockReservr.TransDate,-1,false,"");
  end;
  if (StockReservr.ToFileName==kResTypeStock) then begin
    if (StockReservr.ToSerNr==-1) then begin
      StockReservr.ToSerNr = StockReservMakeStockMov(StockReservr);
    end;
  end;
  StockReservVcRecordSave = res; 
  RETURN;
END;

// Add support for variety
global
updating procedure SetStockReserveQty(string artcode,string serialnr,string location,val qty,Boolean addf)
begin
  record ItemStatusVc ISr;
  record ItemStatusVc oldISr;
  
  ISr.Code = artcode;
  ISr.Location = location;
  if (ReadFirstMain(ISr,2,true)) begin
    RecordCopy(oldISr,ISr);
    if (addf) then begin
      ISr.StockRsrvQty = ISr.StockRsrvQty + qty;
    end else begin
      ISr.StockRsrvQty = ISr.StockRsrvQty - qty;
    end;
    if (RecordUpdate(oldISr,ISr,true)==0) then begin
    end;
  end else begin
    RecordNew(ISr);
    ISr.Code = artcode;
    ISr.Location = location;
    if (addf) then begin
      ISr.StockRsrvQty = qty;
    end else begin
      ISr.StockRsrvQty = -qty;
    end;
    if (RecordStore(ISr,true)) then begin
    end;
  end;
  return;
end;

global
updating function LongInt StockReservVcRecordSaveAfter(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetStockReserveQty(StockReservr.ArtCode,StockReservr.SerialNr,StockReservr.FromLocation,StockReservr.Quant-StockReservr.QuantDone,true);
  StockReservVcRecordSaveAfter = res; 
  RETURN;
END;

global
updating function LongInt StockReservVcRecordUpdateAfter(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetStockReserveQty(StockReserv2r.ArtCode,StockReserv2r.SerialNr,StockReserv2r.FromLocation,StockReserv2r.Quant-StockReserv2r.QuantDone,false);
  SetStockReserveQty(StockReservr.ArtCode,StockReservr.SerialNr,StockReservr.FromLocation,StockReservr.Quant-StockReservr.QuantDone,true);
  StockReservVcRecordUpdateAfter = res; 
  RETURN;
END;

global
updating function LongInt StockReservVcRecordRemove(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  SetStockReserveQty(StockReservr.ArtCode,StockReservr.SerialNr,StockReservr.FromLocation,StockReservr.Quant-StockReservr.QuantDone,false);
  StockReservVcRecordRemove = res; 
  RETURN;
END;

global
function Integer StockReservVcCheck(record StockReservVc StockReservr,var string errfld)
begin
  record StockReservBlock SRb;
  Integer res;
  
  res = 0;
  BlockLoad(SRb);
  if (SRb.RequireLocation!=0 and SRb.ReservationType==0) then begin
    if (blank(StockReservr.IntoLocation)) then begin
      res = 1058;
      errfld = "IntoLocation";
      goto LStockReservVcCheck;
    end;
  end;
  if (StockReservr.ToFileName==kResTypeStock) then begin
    if (SRb.ReservationType==0) then begin
      if (CountRecords("LocationVc")<=1) then begin
        res = 20543;
        errfld = "FromLocation";
        goto LStockReservVcCheck;
      end;
    end;
    if (blank(StockReservr.FromLocation)) then begin
      res = 1058;
      errfld = "FromLocation";
      goto LStockReservVcCheck;
    end;
    if (SRb.ReservationType==0) then begin
      if (blank(StockReservr.IntoLocation)) then begin
        res = 1058;
        errfld = "IntoLocation";
        goto LStockReservVcCheck;
      end;
      if (StockReservr.FromLocation==StockReservr.IntoLocation) then begin
        res = 1769;
        errfld = "FromLocation";
        goto LStockReservVcCheck;
      end;
    end;
  end;
LStockReservVcCheck:;
  StockReservVcCheck = res;
  return;
end;

global
updating function LongInt StockReservVcRecordCheck(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer errno;
  string 200 errfld;

  res = 0;
  if (StockReservr.SerNr<=0) then begin
    StockReservr.SerNr = NextSerNr("StockReservVc",StockReservr.TransDate,0,false,"");
  end;
  errno = StockReservVcCheck(StockReservr,errfld);
  if (errno>0) then begin
    RecordCheckError(errno,"",-1,errfld);      
    res = -1;
    goto LStockReservVcRecordCheckEnd;
  end;
LStockReservVcRecordCheckEnd:;
  StockReservVcRecordCheck = res;
  RETURN;
END;

global
function LongInt StockReservVcRecordRemoveTest(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
LStockReservVcRecordRemoveTest:;
  StockReservVcRecordRemoveTest = res;
  RETURN;
END;

global
function LongInt StockReservVcRecordImport(var record StockReservVc StockReservr,record StockReservVc StockReserv2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (StockReservr.PrioLevel<=0) then begin
    StockReservr.PrioLevel = 100;
  end;
  StockReservVcRecordImport = res;
  return;
end;

