external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetPRName(string, var string);
external function val FindVAT(string,val,Integer,Integer);
external procedure CalcSum(val,val,val,val,var val,Integer);
external updating procedure SHRowCreateBuyBack(record SHVc,Integer,record PLDefVc,record ORVc,record AccBlock);
external procedure CalcInCurtoTBIV(var record TBIVVc);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SHSumUp(var record SHVc);
external function string 60 AddObjectToObjectList(string,string);

global
procedure GetPRInvSep(string prcode,var Integer invseptb,var Integer invseppb)
BEGIN
  record PRVc PRr;
 
  invseptb = 0;
  invseppb = 0;
  PRr.Code = prcode;
  if (ReadFirstMain(PRr,1,true)) then begin
    invseptb = PRr.InvSepTB;
    invseppb = PRr.InvSepPB;
  end;  
  RETURN;
END;

global 
function Integer GetItemTypeGroup(string item,var string group)
BEGIN
  record INVc INr;
  Integer res;
  
  res = -1;
  group = "";
  INr.Code = item;
  if (ReadFirstMain(INr,1,true)) then begin
    group = INr.Group;
    res = INr.ItemType;
    if (res==2) then begin res = 1; end;
  end;
  GetItemTypeGroup = res;
  RETURN;
END;

updating procedure SHCreateTBIV(record SHVc SHp,Integer rownr,Boolean setinvd,Integer UseDiscount)
BEGIN
  row SHVc SHrw;
  record ORVc ORr;
  row ORVc ORrw;
  record TBIVVc TBIVr;
  record INVc INr;
  val t;
  string 255 tstr;
  Integer costmodel;
  Integer invseptb,invseppb;
  record PRVc PRr;
  Integer typeofcur,oldstyle;
  Boolean basecurf;

  MatRowGet(SHp,rownr,SHrw);
  if (SHrw.Ship!=0) then begin
    ORr.SerNr = SHp.OrderNr;
    if (ReadFirstMain(ORr,1,true)==false) then begin goto LSHCreateTBIV; end;
    if (blank(ORr.PRCode)) then begin goto LSHCreateTBIV; end;
    ClearRow(ORr,ORrw,1);
    if ((MatRowCnt(ORr)>=SHrw.OrdRow) and (SHrw.OrdRow>-1)) then begin
      MatRowGet(ORr,SHrw.OrdRow,ORrw);
    end;  
    RecordNew(TBIVr);
    
    TBIVr.oVc = 4;
    TBIVr.SerNr = SHp.SerNr;
    TBIVr.Row = rownr;
    TBIVr.TransDate = SHp.ShipDate;
    TBIVr.Discount = ORrw.vRebate;
    TBIVr.EMCode = "";
    TBIVr.PRCode = ORr.PRCode;
    PRr.Code = TBIVr.PRCode;
    ReadFirstMain(PRr,1,true);
    TBIVr.PRName = PRr.Name;
    TBIVr.ArtCode = SHrw.ArtCode;
    INr.Code = TBIVr.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin end;    
    TBIVr.ItemType = INr.ItemType;
    TBIVr.INGroup = INr.Group;
    if (TBIVr.ItemType==0) and (INr.ItemMaterial!=0) then begin 
      TBIVr.ItemType = 5;
    end;  
    tstr = ORr.Objects;
    tstr = AddObjectToObjectList(tstr,SHp.Objects);
    tstr = AddObjectToObjectList(tstr,SHrw.Objects);
    TBIVr.Objects = tstr;
    TBIVr.Qty = SHrw.Ship;
    TBIVr.Comment = SHp.Comment;
    GetPRInvSep(ORr.PRCode,invseptb,invseppb);
    TBIVr.InvSeparately = invseptb;
    TBIVr.InvQty = SHrw.Ship;
    TBIVr.Invoice = -1;
    if (setinvd) then begin
      TBIVr.Invoice = -2;
    end;  

    TBIVr.CostPrice = SHrw.FIFO;
    TBIVr.CurncyCode = ORr.CurncyCode;  
    TBIVr.FrRate = ORr.FrRate;
    TBIVr.ToRateB1 = ORr.ToRateB1;
    TBIVr.ToRateB2 = ORr.ToRateB2;
    TBIVr.BaseRate1 = ORr.BaseRate1;
    TBIVr.BaseRate2 = ORr.BaseRate2;
    if (ORr.InclVAT>0) then begin
      t = FindVAT(ORrw.VATCode,SHrw.BasePrice,ORr.InclVAT,ORr.NoTAXonVAT);
      t = SHrw.BasePrice - t;
    end else begin
      t = SHrw.BasePrice;
    end;
    basecurf = false;
    TBIVr.Price = t;
    typeofcur = TypeOfCurncy(ORr.CurncyCode,oldstyle);   
    if (nonblank(PRr.CurncyCode)) then begin
      if (ORr.CurncyCode==PRr.CurncyCode) then begin //EUR USD
        switch (typeofcur) begin
          case 0://Foreign
            TBIVr.PriceInCur = t;
            if (ORrw.PriceFactor!=0) then begin
              TBIVr.PriceInCur = TBIVr.PriceInCur/ORrw.PriceFactor;
            end;
            CalcSum(TBIVr.InvQty,TBIVr.PriceInCur,0,TBIVr.Discount,t,UseDiscount);
            TBIVr.SumInCur = t;
            Base1ToOther(TBIVr.CurncyCode,TBIVr.CostPrice,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,TBIVr.CostPriceInCur,DefaultCurRoundOff);
            TBIVr.GPInCur = TBIVr.CostPriceInCur*TBIVr.Qty;
            TBIVr.GPInCur = TBIVr.SumInCur - TBIVr.GPInCur;

            TBIVr.GP = MulRateToBase1(TBIVr.CurncyCode,TBIVr.GPInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
            TBIVr.Sum = MulRateToBase1(TBIVr.CurncyCode,TBIVr.SumInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
            TBIVr.Price = MulRateToBase1(TBIVr.CurncyCode,TBIVr.PriceInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
          case 1://Base Curncy 1 
            basecurf = true;
          case 2://Base Curncy 2
            TBIVr.PriceInCur = t;
            if (ORrw.PriceFactor!=0) then begin
              TBIVr.PriceInCur = TBIVr.PriceInCur/ORrw.PriceFactor;
            end;
            CalcSum(TBIVr.InvQty,TBIVr.PriceInCur,0,TBIVr.Discount,t,UseDiscount);
            TBIVr.SumInCur = t;
            Base1ToOther(TBIVr.CurncyCode,TBIVr.CostPrice,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,TBIVr.CostPriceInCur,DefaultCurRoundOff);
            TBIVr.GPInCur = TBIVr.CostPriceInCur*TBIVr.Qty;
            TBIVr.GPInCur = TBIVr.SumInCur - TBIVr.GPInCur;

            TBIVr.GP = MulRateToBase1(TBIVr.CurncyCode,TBIVr.GPInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
            TBIVr.Sum = MulRateToBase1(TBIVr.CurncyCode,TBIVr.SumInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
            TBIVr.Price = MulRateToBase1(TBIVr.CurncyCode,TBIVr.PriceInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
          case 3://Blank Currency, old style 
            basecurf = true;
        end;
      end else begin
        switch (typeofcur) begin
          case 0://Foreign
            TBIVr.Price = MulRateToBase1(TBIVr.CurncyCode,t,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
            basecurf = true;
          case 1://Base Curncy 1 
            basecurf = true;
          case 2://Base Curncy 2
            TBIVr.Price = MulRateToBase1(TBIVr.CurncyCode,t,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);    
            basecurf = true;
          case 3://Blank Currency, old style 
            basecurf = true;
        end;    
      end;
    end else begin
      basecurf = true;
    end;
    if (basecurf) then begin
      if (ORrw.PriceFactor!=0) then begin
        TBIVr.Price = TBIVr.Price/ORrw.PriceFactor;
      end;
      CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,UseDiscount);
      TBIVr.Sum = t;
      TBIVr.GP = blankval;
      TBIVr.GP = TBIVr.CostPrice*TBIVr.Qty;
      TBIVr.GP = TBIVr.Sum - TBIVr.GP;
      CalcInCurtoTBIV(TBIVr);
    end;
    
    if (RecordInsert(TBIVr,false)) then begin
    end;
  end;
LSHCreateTBIV:;
  RETURN;
END;

global
updating procedure SHOK(record SHVc SHp)
BEGIN
  Integer i,rwcnt;
  record GeneralOptionBlock GenOptr;
  record ORVc ORr;
  record PLDefVc PLDefr;
  record AccBlock ARAccb;
  record TRGenBlock TRGb;

  ORr.SerNr = SHp.OrderNr;
  if (ReadFirstMain(ORr,1,true)) then begin
    if (nonblank(ORr.PriceList)) then begin
      PLDefr.Code = ORr.PriceList;
      if (ReadFirstMain(PLDefr,1,true)) then begin
      end;
    end;
  end;

  if (SHp.OKFlag!=0) then begin
    BlockLoad(GenOptr);
    BlockLoad(ARAccb);
    BlockLoad(TRGb);
    rwcnt = MatRowCnt(SHp);
    for (i=0;i<rwcnt;i=i+1) begin
      SHCreateTBIV(SHp,i,false,GenOptr.UseDiscount);
      if (PLDefr.DepPrice==2) then begin
        if (TRGb.SHGenTrans!=0) then begin
          SHRowCreateBuyBack(SHp,i,PLDefr,ORr,ARAccb);
        end;
      end;
    end;
  end;  
  RETURN;
END;

procedure SHVcConvertB1ToB2Date(record SHVc SHp,Date datp)
BEGIN
  val fr,to1,to2,br1,br2,t;
  string 20 curncy;
  Integer i,rwcnt;
  row SHVc SHrw;
  
  GetFullCurncyRate(curncy,datp,fr,to1,to2,br1,br2);
  
  rwcnt = MatRowCnt(SHp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    B1ToB2ValRM(SHrw.FIFO,br1,br2,t,GetCostRoundModeRB);
    SHrw.FIFO = t;
    B1ToB2ValRM(SHrw.FIFORowVal,br1,br2,t,GetCostRoundModeRB);
    SHrw.FIFORowVal = t;
    B1ToB2Val(SHrw.BasePrice,br1,br2,t);
    SHrw.BasePrice = t;
    B1ToB2Val(SHrw.BBCostPrice,br1,br2,t);
    SHrw.BBCostPrice = t;
    MatRowPut(SHp,i,SHrw);
  end;
  SHSumUp(SHp);  
  RETURN;
END;

global
updating function LongInt SHVcRecordImport(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  row LegalInvNrBlock LINrbrw;

  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (SHr.TotQty==0) then begin
    SHSumUp(SHr);
  end;
  if (gBase1ToBase2) then begin
    SHVcConvertB1ToB2Date(SHr,SHr.ShipDate);
  end;
  if (blank(SHr.OfficialSerNrSerie)) then begin
    GetLegalInvNrRow(SHr.OfficialSerNr,LINrbrw);
    SHr.OfficialSerNrSerie = GetLegalInvoiceNrSerie(LINrbrw,SHr.OfficialSerNr);
  end;
  SHVcRecordImport = res; 
  RETURN;
END;

global
function LongInt SHVcRecordReset(var record SHVc SHr,record SHVc SH2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  SHr.OKFlag = 0;
  SHVcRecordReset = res;
  RETURN;
END;

global
function LongInt SHVcRecordProtectFields(var record SHVc SHr,var record SHVc SH2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer rwcnt,rwcnt2,i;
  row SHVc SHrw;
  row SHVc SH2rw;
  
  SH2r.Prntdf = SHr.Prntdf;
  SH2r.InvoiceNr = SHr.InvoiceNr;
  rwcnt = MatRowCnt(SHr);
  rwcnt2 = MatRowCnt(SH2r);
  for (i=0;i<rwcnt2;i=i+1) begin
    if (i<rwcnt) then begin
      MatRowGet(SHr,i,SHrw);
      MatRowGet(SH2r,i,SH2rw);
      SH2rw.Invd = SHrw.Invd;
      MatRowPut(SH2r,i,SH2rw);
    end;
  end;
  SHVcRecordProtectFields = res;
  return;
end;

global
updating function LongInt SHPackagesVcRecordCheck(var record SHPackagesVc SHPr,record SHPackagesVc SHP2r,LongInt stat,LongInt check)
begin
  LongInt res;
  integer i,rwcnt;
  row SHPackagesVc SHPrw;
  record PackTypeVc PTr;
  
  res = 0;
  rwcnt = MatRowCnt(SHPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHPr,i,SHPrw);
    if (SHPrw.Quant<=0) then begin
      res = -1;
      RecordCheckError(1008,"",i,"Quant");
      goto LSHPackagesVcRecordCheck;
    end;
    if (nonblank(SHPrw.PackType)) then begin
      PTr.Code = SHPrw.PackType;
      if (ReadFirstMain(PTr,1,true)==false) then begin
        res = -1;
        RecordCheckError(1120,SHPrw.PackType,i,"PackType");
        goto LSHPackagesVcRecordCheck;
      end;
    end;
    if (SHPrw.MeasurementSystem!=kMeasurementSystemMetric and SHPrw.MeasurementSystem!=kMeasurementSystemImperial) then begin
      res = -1;
      RecordCheckError(1008,"",i,"MeasurementSystem");
      goto LSHPackagesVcRecordCheck;
    end;
    if (SHPrw.Weight<=0) then begin
      res = -1;
      RecordCheckError(1008,"",i,"Weight");
      goto LSHPackagesVcRecordCheck;
    end;
  end;
  
LSHPackagesVcRecordCheck:;
  SHPackagesVcRecordCheck = res;
  return;
end;
