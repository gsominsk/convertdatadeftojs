external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function LongInt DateDiff(Date,Date);
external function string 5 FindRentalPriceList(string,string,string,string,string,Date,Integer,LongInt,record RentControlBlock);
external function Boolean CustIsAuth(string,string,Date,Date);
external function Boolean FoundProperAuthCust(var record AuthCustVc,string,Date,Date);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
function LongInt RentQTVcRecordDefaults(var record RentQTVc RentQTr,record RentQTVc RentQT2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc USr;
  Time blankt;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  Date blankd;
  
  RentQTr.SerNr = -1;
  RentQTr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    RentQTr.SerNr = NextSerNr("RentQTVc",RentQTr.TransDate,-1,false,"");
  end;
  GetCurUser(USr);
  RentQTr.OurContact = USr.CurOurContact;
  RentQTr.Location = USr.Location;
  RentQTr.Objects = USr.PersObjx;
  RentQTr.SalesMan = USr.Code;
  RentQTr.SalesGroup = USr.SalesGroup;  
  curcode = "";
  GetFullCurncyRate(curcode,RentQTr.TransDate,fr,to1,to2,br1,br2);
  RentQTr.CurncyCode = curcode;
  RentQTr.FrRate = fr;
  RentQTr.ToRateB1 = to1; 
  RentQTr.ToRateB2 = to2;
  RentQTr.BaseRate1 = br1;
  RentQTr.BaseRate2 = br2;
  RentQTr.StartTime = blankt;
  RentQTr.EndTime = blankt;
  RentQTr.Status = 0;
  RentQTr.Rejected = 0;
  RentQTr.RejectDate = blankd;
//  RentQTr.Sum0 = BlankVal;
//  RentQTr.Sum1 = BlankVal;
//  RentQTr.Sum2 = BlankVal;
//  RentQTr.Sum3 = BlankVal;
//  RentQTr.Sum4 = BlankVal;
  RentQTVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt RentQTVcRecordDuplicate(var record RentQTVc RentQTr,record RentQTVc RentQT2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  Date blankd;

  curcode = RentQTr.CurncyCode;
  GetFullCurncyRate(curcode,RentQTr.TransDate,fr,to1,to2,br1,br2);
  RentQTr.CurncyCode = curcode;
  RentQTr.FrRate = fr;
  RentQTr.ToRateB1 = to1; 
  RentQTr.ToRateB2 = to2;
  RentQTr.BaseRate1 = br1;
  RentQTr.BaseRate2 = br2;
  RentQTr.SerNr = -1;
  RentQTr.TransDate = CurrentDate;
  RentQTr.Status = 0;
  RentQTr.Rejected = 0;
  RentQTr.RejectDate = blankd;
  RentQTr.AgreementNr = -1;
  if (SingleUserMode) then begin
    RentQTr.SerNr = NextSerNr("RentQTVc",RentQTr.TransDate,-1,false,"");
  end;
  RentQTVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt RentQTVcRecordCheck(var record RentQTVc RentQTp,record RentQTVc RentQT2p,LongInt stat,LongInt check)
BEGIN
  LongInt res,sernr;
  record RentINVc RentINr;
  record AgreeTypeVc AgreeTyper;
  record RentControlBlock RCb;
  record CUVc CUr;
  record INVc INr;
  Integer insertmode,updatemode;
  LongInt oldnr;
  row RentQTVc RentQTrw;
  Integer rwcnt,i;

  BlockLoad(RCb);
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = RentQTp.SerNr; 
  if (stat==updatemode) then begin
    if (RentQTp.SerNr<=0) then begin
      RentQTp.SerNr = RentQT2p.SerNr;
    end;
  end;    
  if (RentQTp.SerNr<=0) then begin
    RentQTp.SerNr = NextSerNr("RentQTVc",RentQTp.TransDate,-1,false,"");
  end;
  if (blankdate(RentQTp.startDate)) then begin
    RecordCheckError(1058,"",-1,"startDate");
    res = -1;
    goto LRentQTVcRecordCheck;
  end;
  if (nonblankdate(RentQTp.endDate)) then begin
    if (RentQTp.startDate>RentQTp.endDate) then begin
      RecordCheckError(20851,"",-1,"endDate");
      res = -1;
      goto LRentQTVcRecordCheck;
    end;
  end else begin
    if (RCb.RentQTMustHaveEndDate!=0) then begin
      RecordCheckError(1058,"",-1,"endDate");
      res = -1;
      goto LRentQTVcRecordCheck;
    end;
  end;
  if (nonblank(RentQTp.CustCode)) then begin
    CUr.Code = RentQTp.CustCode;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"CustCode");
      res = -1;
      goto LRentQTVcRecordCheck;
    end;
  end;
  if (CustIsAuth(RentQTp.CustCode,RentQTp.ClientContact,RentQTp.startDate,RentQTp.TransDate)==false) then begin
    RecordCheckError(2045,"",-1,"CustCode");
    res = -1;
    goto LRentQTVcRecordCheck;
  end;
  if (blank(RentQTp.AgreeType)) then begin
    RecordCheckError(1058,"",-1,"AgreeType");
    res = -1;
    goto LRentQTVcRecordCheck;
  end else begin
    AgreeTyper.Code = RentQTp.AgreeType;
    if (ReadFirstMain(AgreeTyper,1,true)==false) then begin
      RecordCheckError(1120,RentQTp.AgreeType,-1,"AgreeType");
      res = -1;
      goto LRentQTVcRecordCheck;
    end;
  end;
  if (RentQTp.Rejected!=0) then begin
    if ((stat==insertmode) or (RentQTp.Rejected!=RentQT2p.Rejected)) then begin
      if (blankdate(RentQTp.RejectDate)) then begin
        RentQTp.RejectDate = CurrentDate;
      end;
    end;
  end;
  rwcnt = MatRowCnt(RentQTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTp,i,RentQTrw);
    if (nonblank(RentQTrw.ArtCode)) then begin
      RentINr.Code = RentQTrw.ArtCode;
//      RentINr.SerialNr = RentQTrw.SerialNr;
      if (ReadFirstMain(RentINr,1,true)==false) then begin
        if (i==0) then begin
          RecordCheckError(2048,"",i,"SerialNr");
          res = -1;
          goto LRentQTVcRecordCheck;
        end else begin
          INr.Code = RentQTrw.ArtCode;
          if (ReadFirstMain(INr,1,true)==false) then begin
            RecordCheckError(1233,"",i,"ArtCode");
            res = -1;
            goto LRentQTVcRecordCheck;
          end;
        end;
        if (nonblank(RentQTrw.AgreeType)) then begin
          AgreeTyper.Code = RentQTrw.AgreeType;
          if (ReadFirstMain(AgreeTyper,1,true)==false) then begin
            RecordCheckError(1120,RentQTrw.AgreeType,i,"AgreeType");
            res = -1;
            goto LRentQTVcRecordCheck;
          end;
        end;
      end;
    end;
  end;
LRentQTVcRecordCheck:;
  if (res!=0) then begin
    RentQTp.SerNr = oldnr;
  end;
  RentQTVcRecordCheck = res;
  RETURN;
END;

global
function LongInt RentQTVcRecordRemoveTest(var record RentQTVc RentQTr,record RentQTVc RentQT2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (RentQTr.Rejected==2) then begin
    res = 0;
  end;
  RentQTVcRecordRemoveTest = res;
  RETURN;
END;

global
function Boolean CreateRentQTAdvPriceRow(record RentQTVc RentQTr,row RentQTVc RentQTrw,var record AdvPriceRecVc AdrPricer,Integer rowno)
begin
  record AgreeTypeVc AgreeTyper;
  row AgreeTypeVc AgreeTyperw;
  record AdvPriceRecVc oldAdrPricer;
  record RentControlBlock RCb;
  row AdvPriceRecVc AdvPricerw;
  Date thedat;
  Integer i,rwcnt,addto;
  record INVc INr;
  record CUVc CUr;
  string 20 curitemcode;
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,tax2prc;
  Boolean calcprice,dummyf;
  LongInt dlen;
  Boolean res;
  Time blankt;
  
  res = false;
  BlockLoad(RCb);
  if (RCb.ChargeForFirstDay!=0) then begin
    addto = 1;
  end else begin
    addto = 0;
  end;
  AgreeTyper.Code = RentQTr.AgreeType;
  if (nonblank(RentQTrw.AgreeType)) then begin
    AgreeTyper.Code = RentQTrw.AgreeType;
  end;
  if (ReadFirstMain(AgreeTyper,1,true)) then begin
    rwcnt = MatRowCnt(AgreeTyper);
    if (rwcnt>0) then begin
      thedat = RentQTr.startDate;
      AdrPricer.SerNr = RentQTr.SerNr;
      AdrPricer.FileName = "RentQTVc";
      AdrPricer.RowNr = rowno;
      AdrPricer.ItemCode = RentQTrw.ArtCode;
      AdrPricer.ItemName = RentQTrw.Spec;
      AdrPricer.InvItemCode = RentQTrw.InvItem;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(AgreeTyper,i,AgreeTyperw);
        ClearRow(AdrPricer,AdvPricerw,1);
        AdvPricerw.PeriodType = AgreeTyperw.PeriodType;
        AdvPricerw.InvBeforeDays = AgreeTyperw.InvBeforeDays;
        AdvPricerw.PeriodUnit = AgreeTyperw.PeriodUnit;
        AdvPricerw.Length = AgreeTyperw.Length;
        AdvPricerw.StartDate = thedat;
        AdvPricerw.PLCode = AgreeTyperw.PLCode;
        AdvPricerw.Comment = AgreeTyperw.Comment;
        CUr.Code = RentQTr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
        end;
        if (RCb.AdvUseInvItemPrice==0) then begin
          curitemcode = AdrPricer.InvItemCode;
        end else begin
          curitemcode = AdrPricer.ItemCode;
        end;
        if (blank(AdvPricerw.PLCode)) then begin
          AdvPricerw.PLCode = FindRentalPriceList(RentQTr.CustCode,RentQTr.DealerCode,RentQTr.PriceList,RentQTr.Site,curitemcode,thedat,AdvPricerw.PeriodUnit,AdvPricerw.Length,RCb);
        end;
        if (AgreeTyperw.PeriodUnit==0) then begin
          if (AgreeTyperw.Length>0) then begin
            thedat = AddDay(thedat,AgreeTyperw.Length - addto);
            AdvPricerw.EndDate = thedat;
          end;
        end else begin
          if (AgreeTyperw.Length>0) then begin
            thedat = AddDay(AddMonth(thedat,AgreeTyperw.Length),-addto);
            AdvPricerw.EndDate = thedat;
          end;
        end;
        dlen = DateDiff(AdvPricerw.EndDate,AdvPricerw.StartDate) + addto;
        thedat = AddDay(thedat,1);

        INr.Code = curitemcode;
        if (GetItemPriceDiscount3(INr.Code,AdvPricerw.Length,INr,RentQTr.CurncyCode,0,0,0,0,0,
              RentQTr.LangCode,RentQTr.CustCat,AdvPricerw.PLCode,RentQTr.RebCode,
              price,curitemname,reb,vatcode,cost,salesacc,
              RentQTr.ExportFlag,calcprice,CurrentDate,blankt,RentQTr.CustCode,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
          AdvPricerw.Price = price;
        end;
        if (AdvPricerw.PeriodType==0) then begin
          AdvPricerw.Price = AdvPricerw.Price * dlen;
        end;
        MatRowPut(AdrPricer,MatRowCnt(AdrPricer),AdvPricerw);
        addto = 1;
      end;
      res = true;
    end;
  end;
  CreateRentQTAdvPriceRow = res;
  return;
end;

updating procedure DeleteRentQTAdvPriceRow(record RentQTVc RentQTr,Integer rowno)
begin
  record AdvPriceRecVc AdrPricer;
  
  AdrPricer.SerNr = RentQTr.SerNr;
  AdrPricer.FileName = "RentQTVc";
  AdrPricer.RowNr = rowno;
  if (ReadFirstMain(AdrPricer,3,true)) then begin
    RecordDelete(AdrPricer);
  end;
  return;
end;

updating procedure DeleteRentQTAdvPrice(record RentQTVc RentQTr)
begin
  record AdvPriceRecVc AdrPricer;
  Boolean foundf;
  
  foundf = true;
  AdrPricer.SerNr = RentQTr.SerNr;
  AdrPricer.FileName = "RentQTVc";
  while (LoopMain(AdrPricer,2,foundf)) begin
    if (AdrPricer.SerNr!=RentQTr.SerNr) then begin
      foundf = false;
    end;
    if (AdrPricer.FileName!="RentQTVc") then begin
      foundf = false;
    end;
    if (foundf) then begin
      DeleteRentQTAdvPriceRow(RentQTr,AdrPricer.RowNr);
      StepBack(RentQTr);
    end;
  end;
  return;
end;

global
updating procedure CreateRentQTAdvPrice(record RentQTVc RentQTr)
begin
  row RentQTVc RentQTrw;
  row RentQTVc RentQT2rw;
  record AdvPriceRecVc AdrPricer;
  record AdvPriceRecVc oldAdrPricer;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    if (CreateRentQTAdvPriceRow(RentQTr,RentQTrw,AdrPricer,i)) then begin
      RecordCopy(oldAdrPricer,AdrPricer);
      if (ReadFirstMain(oldAdrPricer,3,true)) then begin
        if (nonblank(AdrPricer.ItemCode)) then begin
          if (RecordUpdate(oldAdrPricer,AdrPricer,true)==0) then begin end;
        end else begin
          RecordDelete(oldAdrPricer);
        end;
      end else begin
        if (nonblank(AdrPricer.ItemCode)) then begin
          if (RecordInsert(AdrPricer,true)) then begin end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure UpdateRentAdvPrice(record RentQTVc RentQTr,record RentQTVc RentQT2r)
begin
  row RentQTVc RentQTrw;
  row RentQTVc RentQT2rw;
  record AdvPriceRecVc AdrPricer;
  record AdvPriceRecVc oldAdrPricer;
  Integer rwcnt,rwcnt2,i;
  
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    MatRowGet(RentQT2r,i,RentQT2rw);
    if ((RentQTrw.ArtCode!=RentQT2rw.ArtCode) or
        (RentQTrw.AgreeType!=RentQT2rw.AgreeType)) then begin
      if (CreateRentQTAdvPriceRow(RentQTr,RentQTrw,AdrPricer,i)) then begin
        RecordCopy(oldAdrPricer,AdrPricer);
        if (ReadFirstMain(oldAdrPricer,3,true)) then begin
          if (nonblank(AdrPricer.ItemCode)) then begin
            if (RecordUpdate(oldAdrPricer,AdrPricer,true)==0) then begin end;
          end else begin
            RecordDelete(oldAdrPricer);
          end;
        end else begin
          if (nonblank(AdrPricer.ItemCode)) then begin
            if (RecordInsert(AdrPricer,true)) then begin end;
          end;
        end;
      end;
    end;
  end;
  rwcnt2 = MatRowCnt(RentQT2r);
  for (i=rwcnt;i<rwcnt2;i=i+1) begin
    MatRowGet(RentQT2r,i,RentQT2rw);
    DeleteRentQTAdvPriceRow(RentQT2r,i);
  end;
  return;
end;

global
updating function LongInt RentQTVcRecordSaveAfter(var record RentQTVc RentQTr,record RentQTVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  CreateRentQTAdvPrice(RentQTr);
  RentQTVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt RentQTVcRecordUpdateAfter(var record RentQTVc RentQTr,record RentQTVc RentQT2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  UpdateRentAdvPrice(RentQTr,RentQT2r);
  RentQTVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt RentQTVcRecordRemove(var record RentQTVc RentQTr,record RentQTVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  DeleteRentQTAdvPrice(RentQTr);
  RentQTVcRecordRemove = res;
  return;
end;

procedure RentQTVcConvertB1ToB2(record RentQTVc RentQTr,var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN    
  val t;
  
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  return;
end;

global
function LongInt RentQTVcRecordImport(var record RentQTVc RentQTr,record RentQTVc RentQT2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;
  record UserVc Userr;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    curncy = RentQTr.CurncyCode;
    fr = RentQTr.FrRate;
    to1 = RentQTr.ToRateB1;
    to2 = RentQTr.ToRateB2;
    br1 = RentQTr.BaseRate1;
    br2 = RentQTr.BaseRate2;
    ConvertToDualBase(curncy,RentQTr.TransDate,fr,to1,to2,br1,br2,t,true);
    RentQTr.CurncyCode = curncy;
    RentQTr.FrRate = fr;
    RentQTr.ToRateB1 = to1;
    RentQTr.ToRateB2 = to2;
    RentQTr.BaseRate1 = br1;
    RentQTr.BaseRate2 = br2;
  end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    curncy = RentQTr.CurncyCode;
    to1 = RentQTr.ToRateB1;
    to2 = RentQTr.ToRateB2;
    br1 = RentQTr.BaseRate1;
    br2 = RentQTr.BaseRate2;
    RentQTVcConvertB1ToB2(RentQTr,to1,to2,br1,br2);
    RentQTr.ToRateB1 = to1;
    RentQTr.ToRateB2 = to2;
    RentQTr.BaseRate1 = br1;
    RentQTr.BaseRate2 = br2;
    RentQTr.BaseSum4 = MulRateToBase1(RentQTr.CurncyCode,RentQTr.Sum4,RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,DefaultCurRoundOff);
  end;
  if (blank(RentQTr.SalesGroup)) then begin
    Userr.Code = RentQTr.SalesMan;
    ReadFirstMain(Userr,1,true);
    Userr.SalesGroup = Userr.SalesGroup;
  end; 
  RentQTVcRecordImport = res;
  RETURN;
END;