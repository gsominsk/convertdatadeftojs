external procedure ExtractObj(string,var Integer,var string);

global
function LongInt ArtUpdStockVcRecordCheck(var record ArtUpdStockVc ArtUpdStockr,record ArtUpdStockVc ArtUpdStock2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row ArtUpdStockVc ArtUpdStockrw;
  record ITVc ITr;
  record INVc INr;
  string 255 item;
  Integer pos;
  
  res = 0;
  if blank(ArtUpdStockr.Location) then begin
    res = -1;
    RecordCheckError(1959,"",-1,"Location");      
    goto LArtUpdStockVcRecordCheck;     
  end; 
  rwcnt = MatRowCnt(ArtUpdStockr); 
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ArtUpdStockr,i,ArtUpdStockrw);
    switch (ArtUpdStockrw.CodeType) begin
      case 0:
        ITr.Code = ArtUpdStockrw.ItemGroup;
        if (ReadFirstMain(ITr,1,true))==false then begin
          RecordCheckError(1120,"",i,"ItemGroup");      
          res = -1; 
          goto LArtUpdStockVcRecordCheck;
        end;
      case 1:
        pos = 0;
        ExtractObj(ArtUpdStockrw.ItemGroup,pos,item);
        while (nonblank(item)) begin
          INr.Code =item;
          if (ReadFirstMain(INr,1,true))==false then begin
            RecordCheckError(1233," " & INr.Code,i,"ItemGroup");      
            res = -1; 
            goto LArtUpdStockVcRecordCheck;
          end;
          ExtractObj(ArtUpdStockrw.ItemGroup,pos,item);
        end;  
    end;
  end;
LArtUpdStockVcRecordCheck:;  
  ArtUpdStockVcRecordCheck = res;
  return;
end;

global 
function Boolean ArtUpdStockVcRecordShouldBeSynchronised(record ArtUpdStockVc ArtUpdStockr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ArtUpdStockVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean ArtUpdStockVcRecordSync(record ArtUpdStockVc ArtUpdStockr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ArtUpdStockVcRecordSync = res;
  return;
end;
