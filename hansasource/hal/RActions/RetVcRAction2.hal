external procedure GetCurUser(var record UserVc);
external procedure WarnFutureDate(Boolean,Date);
external procedure RetSumUp(var record RetVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function LongInt RetVcRecordReset(var record RetVc Retr,record RetVc Ret2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  Retr.OKFlag = 0;
  RetVcRecordReset = res;
  RETURN;
END;

global
function LongInt RetVcRecordDefaults(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  record UserVc USr;
  
  Retr.SerNr = -1;
  Retr.RegDate = CurrentDate;
  Retr.TransDate = CurrentDate;
  Retr.UpdStockFlag = 1;
  if (SingleUserMode) then begin
    Retr.SerNr = NextSerNr("RetVc",Retr.TransDate,-1,false,"");
  end;
  Retr.OrdNr = -1;
  Retr.SHNr = -1;
  curcode = "";
  GetFullCurncyRate(curcode,Retr.TransDate,fr,to1,to2,br1,br2);
  Retr.EMCode = CurrentUser;
  Retr.CurncyCode = curcode;
  Retr.FrRate = fr;
  Retr.ToRateB1 = to1; 
  Retr.ToRateB2 = to2;
  Retr.BaseRate1 = br1;
  Retr.BaseRate2 = br2;
  Retr.TerminalID = CurTerminalID;
  Retr.BranchID = CurBranchID;
  Retr.LocalMachineCode = CurMachineName;
  Retr.OfficialSerNr = "";
  GetCurUser(USr);
  Retr.Location = USr.Location;
  Retr.OfficialSerNrSerie = "";

  RetVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt RetVcRecordDuplicate(var record RetVc Retr,record RetVc Ret2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  Integer i,rwcnt;
  row RetVc Retrw;
  Date bd;
  Time bt;
  
  Retr.SerNr = -1;
  Retr.RegDate = CurrentDate;
  Retr.TransDate = CurrentDate;
  Retr.EMCode = CurrentUser;
  Retr.OKFlag = 0;
  Retr.Closed = 0;
  rwcnt = MatRowCnt(Retr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Retr,i,Retrw);
    Retrw.OrdRow = -1;
    Retrw.SHRow = -1;
    Retrw.WSRow = -1;
    Retrw.SVORow = -1;
    Retrw.WSNr = -1;
    Retrw.Invd = blankval;
    MatRowPut(Retr,i,Retrw);
  end;  
  if (SingleUserMode) then begin
    Retr.SerNr = NextSerNr("RetVc",Retr.TransDate,-1,false,"");
  end;
  Retr.OrdNr = -1;
  Retr.SHNr = -1;
  Retr.WSNr = -1;
  Retr.SVONr = -1;
  curcode = "";
  GetFullCurncyRate(curcode,Retr.TransDate,fr,to1,to2,br1,br2);
  Retr.CurncyCode = curcode;
  Retr.FrRate = fr;
  Retr.ToRateB1 = to1; 
  Retr.ToRateB2 = to2;
  Retr.BaseRate1 = br1;
  Retr.BaseRate2 = br2;
  Retr.LocOKNr = blankval;
  RetSumUp(Retr);
  Retr.RegDate = bd;
  Retr.RegTime = bt;
  WarnFutureDate(true,Retr.TransDate);
  Retr.TerminalID = CurTerminalID;
  Retr.BranchID = CurBranchID;
  Retr.LocalMachineCode = CurMachineName;
  Retr.Hash = "";
  Retr.HashKeyVersion = 0;
  Retr.OfficialSerNrSerie = "";
  RetVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt RetVcRecordProtectFields(var record RetVc Retr,record RetVc Ret2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row RetVc Retrw;
  row RetVc Ret2rw;
  Integer rwcnt2;
  
  rwcnt = MatRowCnt(Retr);
  rwcnt2 = MatRowCnt(Ret2r);
  for (i=0;i<rwcnt2;i=i+1) begin
    if (i<rwcnt) then begin
      MatRowGet(Retr,i,Retrw);
      MatRowGet(Ret2r,i,Ret2rw);
      Ret2rw.Invd = Retrw.Invd;
      MatRowPut(Ret2r,i,Ret2rw);
    end;
  end;
  RetVcRecordProtectFields = res;
  return;
end;
