external procedure FEVISumup(record FEVIVc,var val);
external procedure GetSalesGroup(string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external function Integer IsUnOKAllowed_FEVIVc(record FEVIVc);

global
updating function LongInt FEVIVcRecordCheck(record FEVIVc FEVIp,record FEVIVc FEVI2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row FEVIVc FEVIrw;
  record FEVIVc locFEVIr;
  record CUVc CUr;
  record INVc INr;
  Boolean check,unokf;
  Integer errstr;
  Integer i,rwcnt;
  Integer insertmode,updatemode;
  Integer curcomp;
  LongInt oldnr;
  
  res = 0;
  curcomp = CurrentCompany;    
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (FEVIp.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (FEVI2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errstr = IsUnOKAllowed_FEVIVc(FEVIp);
    if (errstr!=0) then begin
      RecordCheckError(errstr,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LFEVIVcRecordCheck;
  end;
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  if (FEVIp.OKFlag!=0) then begin
    if (blank(FEVIp.VEEventNr)) then begin
      RecordCheckError(1058,"",-1,"VEEventNr");      
      res = -1; 
      goto LFEVIVcRecordCheck;
    end;
    if (blankdate(FEVIp.VEEventDate)) then begin
      RecordCheckError(1058,"",-1,"VEEventDate");      
      res = -1; 
      goto LFEVIVcRecordCheck;
    end;
  end;
  if (res!=0) then begin FEVIp.SerNr = oldnr; end;
LFEVIVcRecordCheck:;
  FEVIVcRecordCheck = res;
  RETURN;
END;

global
function LongInt FEVIVcRecordDefaults(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  val fr,to1,to2,br1,br2;
  string 255 tstr;
 
  FEVIr.SerNr = -1;
  FEVIr.InvType = kInvoiceTypeNormal;
  FEVIr.VIInvDate = CurrentDate;
  FEVIr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    FEVIr.SerNr = NextSerNr("FEVIVc",FEVIr.TransDate,-1,false,"");
  end;
  FEVIr.OrderNr = -1;
  FEVIr.VINr = -1;
  FEVIr.PrepaymentNr = -1;      
  FEVIr.CredInv = -1;
  FEVIr.CredMark = "";
  FEVIr.SalesMan = CurrentUser;
  GetSalesGroup(FEVIr.SalesMan,tstr);
  FEVIr.SalesGroup = tstr;
  FEVIr.LangCode = "";
  FEVIr.InvoiceNr = "";
  FEVIr.OKFlag = 0;
  FEVIr.PayDeal = "";
  tstr = "";
  GetFullCurncyRate(tstr,FEVIr.TransDate,fr,to1,to2,br1,br2);
  FEVIr.CurncyCode = tstr;
  FEVIr.FrRate = fr;
  FEVIr.ToRateB1 = to1; 
  FEVIr.ToRateB2 = to2;
  FEVIr.BaseRate1 = br1;
  FEVIr.BaseRate2 = br2;
  FEVIr.CalcVATVal = blankval;
  FEVIr.VATVal = blankval;
  FEVIr.HoldSum = blankval;
  FEVIVcRecordDefaults = res;  
  RETURN;
END;

global
function LongInt FEVIVcRecordDuplicate(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  val fr,to1,to2,br1,br2;
  Integer i,rwcnt;
  row FEVIVc FEVIrw;

  FEVIr.SerNr = -1;
  FEVIr.CredInv = -1;
  FEVIr.OrderNr = -1;
  FEVIr.VINr = -1;
  FEVIr.PrepaymentNr = -1;      
  if (SingleUserMode) then begin
    FEVIr.SerNr = NextSerNr("FEVIVc",FEVIr.TransDate,-1,false,FEVIr.LangCode);
  end;
  GetFullCurncyRate(FEVIr.CurncyCode,FEVIr.TransDate,fr,to1,to2,br1,br2);
  FEVIr.FrRate = fr;
  FEVIr.ToRateB1 = to1; 
  FEVIr.ToRateB2 = to2;
  FEVIr.BaseRate1 = br1;
  FEVIr.BaseRate2 = br2;
  FEVIr.InvoiceNr = "";
  FEVIr.OKFlag = 0;
  FEVIr.CredMark = "";
  rwcnt = MatRowCnt(FEVIr);
  for (i=rwcnt-1;i>= 0;i=i-1) begin
    MatRowGet(FEVIr,i,FEVIrw);
    FEVIrw.PrepayAmount = blankval;
    FEVIrw.VATVal = blankval;
    FEVIrw.PrepayNr = -1;
    FEVIrw.OrdRow = -1;
    MatRowPut(FEVIr,i,FEVIrw);
  end;
  FEVIVcRecordDuplicate = res;
  RETURN;
END;

global
function LongInt FEVIVcRecordReset(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  FEVIr.OKFlag = 0;
  FEVIVcRecordReset = res;
  RETURN;
END;

global
function LongInt FEVIVcRecordImportTest(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  res = 1;
  if (FEVIr.SerNr==-1) then begin res = 0; end;
  FEVIVcRecordImportTest = res;
  RETURN;
END;

global
updating function LongInt FEVIVcRecordRemove(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

LFEVIVcRecordRemove:;
  FEVIVcRecordRemove = res; 
  RETURN;
END;

global
function LongInt FEVIVcRecordRemoveTest(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  if (FEVIr.OKFlag!=0) then begin
    BlockLoad(DBLockRec);
    if (FEVIr.TransDate>DBLockRec.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LFEVIVcRecordRemoveTest;
    end;
  end;  
LFEVIVcRecordRemoveTest:;  
  FEVIVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt FEVIVcRecordSave(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

//  FEVISumup(FEVIr,t);
LFEVIVcRecordSave:;
  FEVIVcRecordSave = res; 
  RETURN;
END;

global
updating function LongInt FEVIVcRecordSaveAfter(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

LFEVIVcRecordSaveAfter:;
  FEVIVcRecordSaveAfter = res; 
  RETURN;
END;

global
updating function LongInt FEVIVcRecordUpdate(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  val t;
    
  if ((FEVIr.OKFlag!=0) and (FEVI2r.OKFlag==0)) then begin
    FEVISumup(FEVIr,t);
  end;
LFEVIVcRecordUpdate:;
  FEVIVcRecordUpdate = res; 
  RETURN;
END;

global
updating function LongInt FEVIVcRecordUpdateAfter(var record FEVIVc FEVIr,record FEVIVc FEVI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
LFEVIVcRecordUpdateAfter:;
  FEVIVcRecordUpdateAfter = res; 
  RETURN;
END;
