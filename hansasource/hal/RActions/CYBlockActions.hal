external function Boolean CheckEmailStr(string);
external procedure MkplUpdateCustomerData(record CYBlock);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external procedure GetNumberOfUsers(var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,var LongInt,var LongInt);
external function LongInt CountConferences();

global
updating function LongInt CYBlockCheck(var record CYBlock CYb,record CYBlock CY2b,LongInt stat,LongInt long4)
begin
  LongInt res;
  record SetupStatusBlock StSb;
  record CYBlock curCYb;

  res = 0;  
  if (nonblank(CYb.emailAddr)) then begin
    if (CheckEmailStr(CYb.emailAddr)==false) then begin
      RecordCheckError(31337,"",-1,"emailAddr");
      res = -1;
      goto LCYBlockCheck;
    end;
  end;
  BlockLoad(curCYb);
  BlockLoad(StSb);
  if (StSb.CompanySetup==0) then begin
//    if (CYb.CompName!=curCYb.CompName and nonblank(CYb.CompName) and nonblank(curCYb.CompName)) then begin
    if (CYb.CompName!=curCYb.CompName and nonblank(CYb.CompName)) then begin
      CYb.DefaultCompany = 0;

      StSb.CompanySetup = 1;
      StSb.LicensingSrvContactUpdated = 0;
      BlockStore(StSb);
    end;
  end;
  MkplUpdateCustomerData(CYb);
LCYBlockCheck:;  
  CYBlockCheck = res;
  return;
end;

global
updating function LongInt CYBlockImporting(var record CYBlock CYb,record CYBlock oldCYb,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = 0;
//  if (IsStandardProduct) then begin
    if (CYb.VATLaw==28) then begin
      CYb.VATLaw = vatLatvian;
    end;
//  end;
  CYBlockImporting = res;
  return;
end;

/*
global
updating function LongInt CYBlockCheck(var record CYBlock CYr,record CYBlock CY2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 255 tstr;

  res = 0;     
  res = CheckVATNrMask(CYr.VATNr,CYr.CountryCode,0,tstr);
  if (res!=0) then begin
    RecordCheckError(res,tstr,-1,"VATNr");      
    res = -1;
    goto LCYBlockCheck;
  end;
LCYBlockCheck:;
  CYBlockCheck = res;
  RETURN;
END;
*/

/*
global
updating function LongInt ModuleBlockCheck(var record ModuleBlock Moduler,record ModuleBlock Module2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  LongInt nrofconf;
  LongInt mlboxes,cfrences,nrofusers;
  LongInt level1user,level2user,level3user,concurrent,singlefunc,singlefuncusers,bpusers;

  res = 0;
  GetNumberOfUsers(level1user,level2user,level3user,concurrent,singlefunc,singlefuncusers,bpusers);
  if (((Moduler.NumberOfUsers==-1) and (level3user>0+singlefuncusers)) or 
      ((Moduler.NumberOfUsers!=-1) and (level3user>Moduler.NumberOfUsers+singlefuncusers))) then begin
    RecordCheckError(1492,level3user,-1,"NumberOfUsers");
    res = -1;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.NamedBPUsers==-1) and (bpusers>0)) or ((Moduler.NamedBPUsers!=-1) and (bpusers>Moduler.NamedBPUsers))) then begin
    RecordCheckError(2296,bpusers,-1,"NamedBPUsers");
    res = -1;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.Level1==-1) and (level1user>0)) or ((Moduler.Level1!=-1) and (level1user>Moduler.Level1))) then begin
    RecordCheckError(1492,level1user,-1,"Level1");
    res = -1;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.Level2==-1) and (level2user>0)) or ((Moduler.Level2!=-1) and (level2user>Moduler.Level2))) then begin
    RecordCheckError(1492,level2user,-1,"Level2");
    res = -1;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.Mailboxes==-1) and (concurrent>0)) or ((Moduler.Mailboxes!=-1) and (concurrent>Moduler.Mailboxes))) then begin
    RecordCheckError(1490,concurrent,-1,"NumberOfUsers");
    res = -1;
    goto LModuleBlockCheck;
  end;
  if (((Moduler.ThinClients==-1) and (singlefunc>0)) or ((Moduler.ThinClients!=-1) and (singlefunc>Moduler.ThinClients))) then begin
    RecordCheckError(1493,singlefunc,-1,"ThinClients");
    res = -1;
    goto LModuleBlockCheck;
  end;
  cfrences = Moduler.Conferences;
  if (cfrences==-1) then begin cfrences = 0; end;
  nrofconf = CountConferences;
  if (nrofconf>cfrences) then begin
    RecordCheckError(1491,nrofconf,-1,"Conferences");      
    res = -1;
    goto LModuleBlockCheck;
  end;
  if ((Moduler.OperatingSystem==0) or (Moduler.OperatingSystem>31)) then begin
    RecordCheckError(1771,"",-1,"OperatingSystem");      
    res = -1;
    goto LModuleBlockCheck;
  end;
  if ((Moduler.Hardware==0) or (Moduler.Hardware>31)) then begin
    RecordCheckError(1771,"",-1,"Hardware");      
    res = -1;
    goto LModuleBlockCheck;
  end;
LModuleBlockCheck:;
  ModuleBlockCheck = res;
  RETURN;
END;

*/

global
updating function LongInt CustContModuleVcRecordCheck(record CustContModuleVc CustContModuler,record CustContModuleVc CustContModule2r,LongInt stat,LongInt check)
begin
  LongInt res;
  Integer insertmode,updatemode;
  Date dat;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (stat==insertmode) then begin
    if (CustContModuler.Over2GbEnabler==1) then begin
      if ((CurrentUser!="KH") and (CurrentUser!="ERIK") and (CurrentUser!="KARL") and (CurrentUser!="WEB")) then begin
        CustContModuler.Over2GbEnabler = 0;
      end;
    end;
  end;
  if (stat==updatemode) then begin
    if ((CustContModuler.Over2GbEnabler!=0) and (CustContModule2r.Over2GbEnabler==0)) then begin
      if (CustContModuler.Over2GbEnabler==1) then begin
        if ((CurrentUser!="KH") and (CurrentUser!="ERIK") and (CurrentUser!="KARL") and (CurrentUser!="WEB")) then begin
          CustContModuler.Over2GbEnabler = 0;
        end;
      end;
    end;
  end;
  if (nonblankdate(CustContModuler.NoEnablersOlderThan)) then begin
    dat = AddMonth(CurrentDate,3);
    if (CustContModuler.NoEnablersOlderThan>dat) then begin
      RecordCheckError(20851,"",-1,"NoEnablersOlderThan");      
      res = -1;
      goto LCustContModuleVcRecordCheck;
    end;
  end;
LCustContModuleVcRecordCheck:;  
  CustContModuleVcRecordCheck = res;
  return;
end;
