external function string 60 AddStringToStringList(string,string);
external procedure AutomatedSales(string,Integer);
external function Boolean IsOffice1(Boolean);
external function Boolean FindUserInMailbox(string,var string,var LongInt);
external function Integer CheckUsers(string,string,var string,Boolean);

global
function LongInt ConfVcRecordInIndex(record ConfVc Confr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (Confr.Closed!=0) then begin 
    if (indexname=="ActAddrName")  then begin res = 0; end;
  end;
  switch (Confr.Class) begin
    case kConfClassFolder:
      if (indexname=="ActAddrName")  then begin res = 0; end;
    case kConfClassArchive:
      if (indexname=="ActAddrName")  then begin res = 0; end;
  end;
  ConfVcRecordInIndex = res;
  return;
end;

function Boolean MailboxIsEmpty(record ConfVc Confr)
begin
  Boolean res;
  string 255 ckey;

  res = false;
  ckey = "UserSer:" & Confr.SerNr;
  if (RecordsInIndex("MailVc",ckey)==0) then begin
    res = true;
  end;
  MailboxIsEmpty = res;
  return;
end;

function Boolean ConfFolderIsEmpty(record ConfVc Confr)
begin
  Boolean res;
  string 255 ckey;

  res = false;
  ckey = "SubConfAddrName:" & Confr.SerNr;
  if (RecordsInIndex("ConfVc",ckey)==0) then begin
    res = true;
  end;
  ConfFolderIsEmpty = res;
  return;
end;

function Boolean ConfArchiveIsEmpty(record ConfVc Confr)
begin
  Boolean res;
  record Attach2Vc Attachr;
  record RLinkVc RLr;
  
  res = ReadRecordLink(Confr,1,Attachr,RLr);
  ConfArchiveIsEmpty = res;
end;

global
function LongInt ConfVcRecordRemoveTest(var record ConfVc Confr,record ConfVc Conf2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = 0;
  if (Confr.Class!=kConfClassFolder and Confr.Class!=kConfClassArchive) then begin
    if (MailboxIsEmpty(Confr)) then begin
      res = 1;
    end;
  end;
  if (Confr.Class==kConfClassFolder) then begin
    if (ConfFolderIsEmpty(Confr)) then begin
      res = 1;
    end;
  end;
  if (Confr.Class==kConfClassArchive) then begin
    if (ConfArchiveIsEmpty(Confr)) then begin
      res = 1;
    end;
  end;
  if (res==0) then begin
    MessageBox(1560,"");
  end;
  ConfVcRecordRemoveTest = res; 
  return;
end;

global
function LongInt ConfVcRecordDefaults(var record ConfVc Confr,record ConfVc Conf2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  Confr.MaxMail = -1;
  Confr.MaxReadDays = -1;
  Confr.MaxUnreadDays = -1;
  if (IsOffice1(true)) and (ProgramType!=typBooksJobCost) then begin
    Confr.Class = kConfClassMailbox;
    Confr.MotherConf = -1;
    Confr.UserType = 3;
  end;
  switch (Confr.Class) begin
    case kConfClassConference:
      Confr.MotherConf = 0;
  end;
  ConfVcRecordDefaults = res; 
  return;
end;

global
function LongInt ConfVcRecordDuplicate(var record ConfVc Confr,record ConfVc Conf2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  Confr.SerNr = -1;
  Confr.MaxMail = -1;
  Confr.MaxReadDays = -1;
  Confr.MaxUnreadDays = -1;
  if (IsOffice1(true)) then begin
    Confr.Class = kConfClassMailbox;
    Confr.MotherConf = -1;
    Confr.UserType = 3;
  end;
  ConfVcRecordDuplicate = res; 
  return;
end;

global
function LongInt ConfVcRecordImport(var record ConfVc Confr,record ConfVc Conf2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (Confr.Class==kConfClassMailbox) then begin
    if ((Confr.UserType<1) or (Confr.UserType>3)) then begin
      Confr.UserType = 3;
    end;
  end;
  ConfVcRecordImport = res;
  return;
end;

global
function LongInt ConfVcRecordSave(var record ConfVc Confr,record ConfVc Conf2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Date blankd;

  if (Confr.AddrName<>"Mailboxes") then begin
    Confr.SerNr = NextSerNr("ConfVc",CurrentDate,-1,false,"");
  end else begin
    Confr.SerNr = -1;
  end;
  ConfVcRecordSave = res; 
  return;
end;

global
procedure GetNumberOfUsers(var LongInt level1user,var LongInt level2user,var LongInt level3user,var LongInt concurrent,var LongInt singlefunc,var LongInt singlefuncusers,var LongInt bpusers)
begin
  record UserVc Userr;
  record ConfVc Confr;
  record OneFunctionVc OFr;
  Boolean foundf;
  record ModuleBlock mt;
  Boolean usingnamed;
  Boolean isnothw;
  Integer usertyp;

  level1user = 0;
  level2user = 0;
  level3user = 0;
  concurrent = 0;
  singlefunc = 0;
  singlefuncusers = 0;
  bpusers = 0;
  isnothw = !HansaWorld and ProgramType!=typBusinessPhone;
  foundf = true;
  BlockLoad(mt);
  usingnamed = mt.AllConcurrent==0;
  if (HansaWorld or ProgramType!=typBusinessPhone) then begin
    usingnamed = true;
  end;
  Userr.Code = "";
  while (LoopMain(Userr,1,foundf)) begin
    if (Userr.Closed==0) then begin
      usertyp = Userr.TypeOfUser;
      if (isnothw) then begin usertyp = mt.AllConcurrent; end;
      switch (usertyp) begin
        case 0:
          if (blank(Userr.OneFunction)) then begin //mt.AllConcurrent!=0) then begin
            Confr.AddrCode = Userr.Code;
            if (ReadFirstKey("AddrCode",Confr,1,true)) then begin
              if (usingnamed==false) then begin
                concurrent = concurrent + 1;
              end else begin
                switch (Confr.UserType) begin
                  case 1: level1user = level1user + 1;
                  case 2: level2user = level2user + 1;
                  case 3: level3user = level3user + 1;
                end;
              end;
            end;
          end else begin
            OFr.Code = Userr.OneFunction;
            if (ReadFirstMain(OFr,1,true)) then begin
              singlefunc = singlefunc + MatRowCnt(OFr);
            end;
            singlefuncusers = singlefuncusers + 1;
          end;
        case 1:
          Confr.AddrCode = Userr.Code;
          if (ReadFirstKey("AddrCode",Confr,1,true)) then begin
            concurrent = concurrent + 1;
          end;
        case 2:
          Confr.AddrCode = Userr.Code;
          if (ReadFirstKey("AddrCode",Confr,1,true)) then begin
            bpusers = bpusers + 1;
          end;
      end;
    end;
  end;
  return;
end;

global
function LongInt CountConferences()
begin
  record ConfVc Confr;
  LongInt res;
  Boolean foundf;

  res = 0;
  Confr.SerNr = -1;
  foundf = true;
  while (LoopMain(Confr,1,foundf)) begin
    if (Confr.Closed==0) then begin
      if ((Confr.Class!=kConfClassMailbox) and (Confr.Class!=kConfClassFolder)) then begin
        res = res + 1;
      end;
    end;
  end;
  CountConferences = res;
  return;
end;

global
function LongInt ConfVcRecordCheck(var record ConfVc Confr,record ConfVc Conf2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ModuleBlock mt;
  string 200 tstr;
  LongInt l;
  LongInt level1user,level2user,level3user,concurrent,singlefunc,singlefuncusers,bpusers;
  Integer insertmode,updatemode;
  Integer errstr;
  record ConfVc locConfr;
  record UserVc Userr;
  Boolean usingnamed;
  Boolean isnothw;
  Integer usertyp;
  Integer conf1class,conf2class;
  string 255 autmsgfunciontags;
  
  res = 0;
  
  if (AutoSyncing and ClientMode) then begin
    goto LConfVcRecordCheck;
  end;
  
  insertmode = 1;
  updatemode = 2;
  BlockLoad(mt);
  if (Confr.Class==kConfClassMailbox) then begin
    if ((Confr.UserType<1) or (Confr.UserType>3)) then begin
      Confr.UserType = 3;
    end;
  end;
  if (stat==insertmode) then begin
    if (FindUserInMailbox(Confr.AddrName,tstr,l)) then begin
      RecordCheckError(1547,"",-1,"AddrName");      
      res = -1; 
      goto LConfVcRecordCheck;
    end;
  end;
/*  
  locConfr.AddrName = Confr.AddrName;
  if (ReadFirstKey("AddrName",locConfr,1,true)) then begin
    RecordCheckError(1547,"",-1,"AddrName");      
    res = -1; 
    goto LConfVcRecordCheck;
  end;
*/  
  if (stat==updatemode) then begin
    if (Confr.AddrName<>Conf2r.AddrName) then begin
      if (MailboxIsEmpty(Confr)==false) then begin
        RecordCheckError(1067,"",-1,"AddrName");
        res = -1; 
        goto LConfVcRecordCheck;
      end;
      if (FindUserInMailbox(Confr.AddrName,tstr,l)) then begin
        RecordCheckError(1547,"",-1,"AddrName");      
        res = -1; 
        goto LConfVcRecordCheck;
      end;
    end;
    
    conf1class = kConfClassConference;
    if (Confr.Class==kConfClassFolder) then begin
      conf1class = kConfClassFolder;
    end;
    if (Confr.Class==kConfClassArchive) then begin
      conf1class = kConfClassArchive;
    end;
    
    conf2class = kConfClassConference;
    if (Conf2r.Class==kConfClassFolder) then begin
      conf2class = kConfClassFolder;
    end;
    if (Conf2r.Class==kConfClassArchive) then begin
      conf2class = kConfClassArchive;
    end;
    
    if (conf1class!=conf2class) then begin
      switch (conf2class) begin
        case kConfClassConference:
          if (MailboxIsEmpty(Confr)==false) then begin
            res = -1;
          end;
        case kConfClassFolder:
          if (ConfFolderIsEmpty(Confr)==false) then begin
            res = -1;
          end;
        case kConfClassArchive:
          if (ConfArchiveIsEmpty(Confr)==false) then begin
            res = -1;
          end;
      end;
      
      if (res==-1) then begin
        RecordCheckError(1067,". " & USetStr(34460),-1,"Class");
        goto LConfVcRecordCheck;
      end;
    end;
  end;
  tstr = "";
  errstr = CheckUsers(Confr.AddrCode,"",tstr,false);  
  if (errstr!=0) then begin
    RecordCheckError(errstr,tstr,-1,"AddrCode");      
    res = -1;
    goto LConfVcRecordCheck;
  end;
  if ((Confr.Class==kConfClassMailbox) and (Confr.MotherConf!=-1)) then begin
    RecordCheckError(1249,"",-1,"MotherConf");      
    res = -1; 
    goto LConfVcRecordCheck;
  end;
  if (Confr.Class!=kConfClassMailbox) then begin
    if (nonblank(Confr.AddrCode)) then begin
      RecordCheckError(2010,"",-1,"AddrCode");      
      res = -1;
      goto LConfVcRecordCheck;
    end;
  end;
  if (stat==insertmode) or (stat==updatemode) then begin
    if (Confr.Class==kConfClassMailbox) then begin
      GetNumberOfUsers(level1user,level2user,level3user,concurrent,singlefunc,singlefuncusers,bpusers);
      Userr.Code = Confr.AddrCode;
      if (ReadFirstMain(Userr,1,true)) then begin
        isnothw = !HansaWorld;
        usingnamed = mt.AllConcurrent==0;
        if (HansaWorld) then begin
          usingnamed = true;
        end;
        usertyp = Userr.TypeOfUser;
        if (isnothw) then begin usertyp = mt.AllConcurrent; end;
        switch (usertyp) begin
          case 0:
            if (blank(Userr.OneFunction)) then begin
              if (usingnamed) then begin
                switch (Confr.UserType) begin
                  case 1: level1user = level1user + 1;
                  case 2: level2user = level2user + 1;
                  case 3: level3user = level3user + 1;
                end;
              end;
            end;
          case 1:
            if (stat==insertmode) then begin
              concurrent = concurrent + 1;
            end else begin
              if (Conf2r.Class!=kConfClassMailbox) then begin
                concurrent = concurrent + 1;
              end;
            end;
          case 2:
            bpusers = bpusers + 1;
        end;
      end;
      if (((mt.NumberOfUsers==-1) and (level3user>0+singlefuncusers)) or 
          ((mt.NumberOfUsers!=-1) and (level3user>mt.NumberOfUsers+singlefuncusers))) then begin
        if (HansaWorld) then begin
          RecordCheckError(1475,"",-1,"AddrCode");
        end else begin
          RecordCheckError(1485,"",-1,"AddrCode");
        end;
        res = -1;
        goto LConfVcRecordCheck;
      end;
      if (((mt.NamedBPUsers==-1) and (bpusers>0)) or ((mt.NamedBPUsers!=-1) and (bpusers>mt.NamedBPUsers))) then begin
        RecordCheckError(2296,"",-1,"AddrCode");      
        res = -1;
        goto LConfVcRecordCheck;
      end;
      if (((mt.Level1==-1) and (level1user>0)) or ((mt.Level1!=-1) and (level1user>mt.Level1))) then begin
        RecordCheckError(1476,"",-1,"AddrCode");      
        res = -1;
        goto LConfVcRecordCheck;
      end;
      if (((mt.Level2==-1) and (level2user>0)) or ((mt.Level2!=-1) and (level2user>mt.Level2))) then begin
        RecordCheckError(1477,"",-1,"AddrCode");      
        res = -1;
        goto LConfVcRecordCheck;
      end;
      if (((mt.ThinClients==-1) and (singlefunc>0)) or ((mt.ThinClients!=-1) and (singlefunc>mt.ThinClients))) then begin
        RecordCheckError(1483,"",-1,"AddrCode");      
        res = -1;
        goto LConfVcRecordCheck;
      end;
      if (((mt.Mailboxes==-1) and (concurrent>0)) or ((mt.Mailboxes!=-1) and ((concurrent>mt.Mailboxes) and ((concurrent>=mt.Mailboxes) or (stat==insertmode))))) then begin
        if (AutoSyncing==false or ServerMode) then begin
          if ((ProgramType!=typFirstOffice) and
              (ProgramType!=typFirstOfficeSmall) and 
              (ProgramType!=typFirstOfficePro) and 
              (IsBooks==false)) then begin
            RecordCheckError(1269,"",-1,"AddrCode");
            res = -1;
            goto LConfVcRecordCheck;
          end;
        end;
      end;
      if (stat==insertmode) then begin
        if (blank(Confr.AddrCode)) then begin
          RecordCheckError(1058,tstr,-1,"AddrCode");      
          res = -1;
          goto LConfVcRecordCheck;
        end;
      end;
    end else begin
      if (stat!=insertmode) then begin 
        goto LConfVcRecordCheck; 
      end;
      if (Confr.Class!=kConfClassFolder) then begin
        if (AutoSyncing==false or ServerMode) then begin
          if (mt.Conferences>0) then begin
            if (CountConferences>=mt.Conferences) then begin
              RecordCheckError(1268,"",-1,"AddrName");      
              res = -1;
              autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasConferences+OK_ConfVc");
              goto LConfVcRecordCheck;
            end;
          end else begin
            autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasConferences+OK_ConfVc");
            RecordCheckError(1268,"",-1,"AddrName");      
            res = -1;
            goto LConfVcRecordCheck;
          end;
        end;
      end;
    end;
    if (blank(Confr.AddrName)) then begin
      RecordCheckError(1058,tstr,-1,"AddrName");      
      res = -1;
      goto LConfVcRecordCheck;
    end;
  end;
LConfVcRecordCheck:;
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);              
  ConfVcRecordCheck = res;
  return;
end;

function LongInt NextChatID()
begin
  record ExtChatUsersVc ExtChatUserr;
  LongInt res;
  
  ExtChatUserr.IDNr = 2147483647;
  res = 1;
  if (ReadLastKey("IDNr",ExtChatUserr,1,false)) begin
    res = ExtChatUserr.IDNr + 1;
  end;
  NextChatID = res;
  return;
end;

global
function LongInt ExtChatUsersVcRecordDefaults(var record ExtChatUsersVc ExtChatUserr,record ExtChatUsersVc ExtChatUsers2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Time blankt;
  
  ExtChatUserr.IDNr = -1;
  if (SingleUserMode) then begin
    ExtChatUserr.IDNr = NextChatID;
  end;
  ExtChatUsersVcRecordDefaults = res; 
  return;
end;

global
function LongInt ExtChatUsersVcRecordDuplicate(var record ExtChatUsersVc ExtChatUserr,record ExtChatUsersVc ExtChatUsers2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  ExtChatUserr.IDNr = -1;
  if (SingleUserMode) then begin
    ExtChatUserr.IDNr = NextChatID;
  end;
  ExtChatUsersVcRecordDuplicate = res; 
  return;
end;

global
updating function LongInt ExtChatUsersVcRecordCheck(var record ExtChatUsersVc ExtChatUserr,record ExtChatUsersVc ExtChatUsers2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer insertmode,updatemode;

  res = 0;
  insertmode = 1;
  updatemode = 2;
  if (ExtChatUserr.IDNr==-1) then begin
    ExtChatUserr.IDNr = NextChatID;
  end;
  if (blank(ExtChatUserr.UserMailboxName)) then begin
    RecordCheckError(1058,"",-1,"UserMailboxName");      
    res = -1;
    goto LExtChatUsersVcRecordCheck;
  end;
LExtChatUsersVcRecordCheck:;
  ExtChatUsersVcRecordCheck = res;
  return;
end;

