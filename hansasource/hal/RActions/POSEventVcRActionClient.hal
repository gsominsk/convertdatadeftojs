external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external procedure PMsg_CloseShift(record LSerialPortDeviceVc);
external procedure PMsg_OpenShift(record LSerialPortDeviceVc);

global
procedure POSEventVc_PrintToFiscalPrinter(var record POSEventVc POSEventp,Boolean forceprintf)
BEGIN
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;
    
  BlockLoad(LMb);  
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalPrinter,-1,LMb.LocalMachineCode,LSPDr)==false) then begin  
    goto LPOSEventVc_PrintToFiscalPrinter;
  end;

  switch (LSPDr.Printer) begin
    case kSerialPortDeviceModelFiscPrinterFPRINT02K:
      switch(POSEventp.Event) begin
        case 1: // open
          PMsg_OpenShift(LSPDr); 
        case 2: // close    
          PMsg_CloseShift(LSPDr);
      end;
  end;
LPOSEventVc_PrintToFiscalPrinter:;  
  return;
end;

global
procedure POSEventVc_SendToSerialPortDevices(Integer type,LongInt stat,record POSEventVc POSEventp,record POSEventVc POSEvent2p)
begin
  switch (type) begin
    case kSerialPortDeviceClassReceiptPrinter:
    case kSerialPortDeviceClassFiscalPrinter:
      POSEventVc_PrintToFiscalPrinter(POSEventp,false);
    case kSerialPortDeviceClassFiscalControlUnit:
  end;
  return;
end;

global
function LongInt POSEventVcRecordSaveClient(LongInt wn,var record POSEventVc POSEventp,record POSEventVc POSEvent2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer mwn;
  record IVCashVc IVCashr;

  POSEventVc_SendToSerialPortDevices(kSerialPortDeviceClassFiscalPrinter,Rs_insert,POSEventp,POSEvent2p);
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      Sleep(1); // get to next second...
      GetWindowRecord(mwn,IVCashr);
      IVCashr.TransDate = CurrentDate;
      IVCashr.TransTime = CurrentTime;
      IVCashr.DrawerCode = POSEventp.Drawer;
      PutWindowRecord(mwn,IVCashr);
      ReRunWindowDef(mwn);
      //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
      WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
  end;
  POSEventVcRecordSaveClient = res;
  return;
end;

global
function LongInt POSEventVcRecordUpdateClient(LongInt wn,var record POSEventVc POSEventp,record POSEventVc POSEvent2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer mwn;
  record IVCashVc IVCashr;

  POSEventVc_SendToSerialPortDevices(kSerialPortDeviceClassFiscalPrinter,Rs_insert,POSEventp,POSEvent2p);
  mwn = MotherWindow(mwn);
  switch (GetWindowClass(wn)) begin
    case "NPTSIVCashDClass":
      Sleep(1); // get to next second...
      GetWindowRecord(mwn,IVCashr);
      IVCashr.TransDate = CurrentDate;
      IVCashr.TransTime = CurrentTime;
      IVCashr.DrawerCode = POSEventp.Drawer;
      PutWindowRecord(mwn,IVCashr);
      ReRunWindowDef(mwn);
      //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",false);
      WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
  end;
  POSEventVcRecordUpdateClient = res;
  return;
end;
