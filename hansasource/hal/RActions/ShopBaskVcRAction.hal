external procedure B1ToB2Val(val,val,val,var val);
external procedure SwapM4Val(var val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);

global
function LongInt ShopBaskVcRecordRemoveTest(var record ShopBaskVc ShopBaskr,record ShopBaskVc ShopBask2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
  res = 1;
  if (UserCanAction("DeleteAnyRecord",false)==false) then begin
    if (ShopBaskr.Owner==kShopBaskOwnerReservation) then begin
      MessageBox(1274,StringFromStringSet(3,"DeleteAnyRecord"));
      res = 0;
    end;
  end;
  ShopBaskVcRecordRemoveTest = res;
  RETURN;
END;

global
function LongInt ShopBaskVcRecordDefaults(var record ShopBaskVc ShopBaskr,record ShopBaskVc ShopBask2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  ShopBaskr.SerNr = -1;
  ShopBaskr.DestinationNr = -1;
  ShopBaskr.OwnerSerNr = -1;
  ShopBaskr.BaskNo = -1;
  ShopBaskr.Qty = blankval;
  ShopBaskr.Discount = blankval;
  ShopBaskr.Price = blankval;
  ShopBaskr.PriceInCur = blankval;
  ShopBaskr.BasePriceInCur = blankval;
  ShopBaskr.ExtraValInCur = blankval;
  ShopBaskr.CCPayPReNo = -1;
  ShopBaskVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt ShopBaskVcRecordDuplicate(var record ShopBaskVc ShopBaskr,record ShopBaskVc ShopBask2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  ShopBaskr.SerNr = -1;
  ShopBaskr.DestinationNr = -1;
  ShopBaskr.CCPayPReNo = -1;
  ShopBaskVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt ShopBaskVcRecordSave(var record ShopBaskVc ShopBaskr,record ShopBaskVc ShopBask2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  ShopBaskr.SerNr = NextSerNr("ShopBaskVc",CurrentDate,-1,false,"");
  ShopBaskVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt ShopBaskVcRecordUpdate(var record ShopBaskVc ShopBaskr,record ShopBaskVc ShopBask2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if ((ShopBaskr.Qty!=ShopBask2r.Qty) or (ShopBaskr.Discount!=ShopBask2r.Discount)) then begin
    ShopBaskr.Person = CurrentUser;
  end;
  ShopBaskVcRecordUpdate = res;
  RETURN;
END;

global
function Boolean IsReservationNoChangeAllowed(LongInt OwnerSerNr)
BEGIN
  record HotelBlock HotelSetttings;
  record JobVc Jobr;
  Boolean res;

  Blockload(HotelSetttings);
  Jobr.SerNr = OwnerSerNr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    if (Jobr.ResStatus==HotelSetttings.ChInSt) then begin
      res = true;
    end;
  end;
  IsReservationNoChangeAllowed = res;
  RETURN;
END;

procedure ShopBaskVcConvertB1ToB2Date(record ShopBaskVc ShopBaskp,string curp,Date datp)
begin
  val fr,to1,to2,br1,br2,t;
  Integer rwcnt,i;
  string 20 curncy;
  
  curncy = curp;
  GetFullCurncyRate(curncy,datp,fr,to1,to2,br1,br2);
  B1ToB2Val(ShopBaskp.Price,br1,br2,t);
  ShopBaskp.Price = t;
  B1ToB2Val(ShopBaskp.BasePrice,br1,br2,t);
  ShopBaskp.BasePrice = t;
  B1ToB2Val(ShopBaskp.ExtraVal,br1,br2,t);
  ShopBaskp.ExtraVal = t;
  return;
end;

procedure ShopBaskVcConvertB1ToB2(record ShopBaskVc ShopBaskp,string curncy,val fr,var val to1,var val to2,var val br1,var val br2)
begin
  Integer rwcnt,i;
  string 20 tstr;
  val t;
  
  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);

  B1ToB2Val(ShopBaskp.Price,br1,br2,t);
  ShopBaskp.Price = t;
  B1ToB2Val(ShopBaskp.BasePrice,br1,br2,t);
  ShopBaskp.BasePrice = t;
  B1ToB2Val(ShopBaskp.ExtraVal,br1,br2,t);
  ShopBaskp.ExtraVal = t;
  return;
end;

global
updating function LongInt ShopBaskVcRecordImport(record ShopBaskVc ShopBaskr,record ShopBaskVc ShopBask2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ConvMasterBlock cvm;
  Boolean gBase1ToBase2,gToDualBase;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    fr = ShopBaskr.FrRate;
    to1 = ShopBaskr.ToRateB1;
    to2 = ShopBaskr.ToRateB2;
    br1 = ShopBaskr.BaseRate1;
    br2 = ShopBaskr.BaseRate2;
    curncy = ShopBaskr.CurncyCode;
    ConvertToDualBase(curncy,ShopBaskr.TransDate,fr,to1,to2,br1,br2,t,true);
    ShopBaskr.CurncyCode = curncy;
    ShopBaskr.FrRate = fr;
    ShopBaskr.ToRateB1 = to1;
    ShopBaskr.ToRateB2 = to2;
    ShopBaskr.BaseRate1 = br1;
    ShopBaskr.BaseRate2 = br2;
  end;
  if (gBase1ToBase2) then begin
    if (blank(ShopBaskr.CurncyCode)) then begin
      ShopBaskVcConvertB1ToB2Date(ShopBaskr,"",ShopBaskr.TransDate);
    end else begin  
      to1 = ShopBaskr.ToRateB1;
      to2 = ShopBaskr.ToRateB2;
      br1 = ShopBaskr.BaseRate1;
      br2 = ShopBaskr.BaseRate2;
      ShopBaskVcConvertB1ToB2(ShopBaskr,ShopBaskr.CurncyCode,ShopBaskr.FrRate,to1,to2,br1,br2);
      ShopBaskr.ToRateB1 = to1;
      ShopBaskr.ToRateB2 = to2;
      ShopBaskr.BaseRate1 = br1;
      ShopBaskr.BaseRate2 = br2;
    end;
  end;
LShopBaskVcRecordImport:;
  ShopBaskVcRecordImport = res;
  return;
end;
