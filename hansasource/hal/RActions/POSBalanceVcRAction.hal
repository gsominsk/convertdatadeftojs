external function Boolean SerNrTestPOSBalanceVc(LongInt,Date,var Boolean);
external updating procedure DeleteTransaction(LongInt,Integer);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external function Boolean IsUnOKAllowed(string,Date);
external function Boolean IsSessionOpen(string,string,Date,Time);
external function Boolean POSBalanceExistsAfterThis(Date,Time,string,string);
external function Integer MakeTransFromPOSBalance(var record TRVc,record POSBalanceVc,Boolean);
external updating procedure SaveTrans(record TRVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);

global
function LongInt POSBalanceVcRecordDefaults(var record POSBalanceVc POSBalancer,record POSBalanceVc POSBalance2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
      
  POSBalancer.TransDate = CurrentDate;
  POSBalancer.TransTime = CurrentTime;
  POSBalancer.MachineName = CurMachineName;
  POSBalancer.NLTransDone = 0;
  if (SingleUserMode) then begin
    POSBalancer.SerNr = NextSerNr("POSBalanceVc",POSBalancer.TransDate,-1,true,"");
  end;
  POSBalanceVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt POSBalanceVcRecordDuplicate(var record POSBalanceVc POSBalancer,record POSBalanceVc POSBalance2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
      
  POSBalancer.TransDate = CurrentDate;
  POSBalancer.TransTime = CurrentTime;
  POSBalancer.MachineName = CurMachineName;
  POSBalancer.NLTransDone = 0;
  if (SingleUserMode) then begin
    POSBalancer.SerNr = NextSerNr("POSBalanceVc",POSBalancer.TransDate,-1,true,"");
  end;
  POSBalanceVcRecordDuplicate = res; 
  RETURN;
END;

function Boolean ThisIsFirstRecord(Date dfr,Time tfr,string machine,string drawer)
begin
  record POSBalanceVc POSBalancer;
  record POSEventVc POSEventr;
  record IVCashVc IVCashr;
  record IVVc IVr;
  record IPVc IPr;
  record RestAccVc RestAccr;
  record CashierBalVc CashierBalr;
  record CashVc Cashr;
  Boolean res;
  
  res = false;
  POSBalancer.MachineName = machine;
  POSBalancer.Drawer = drawer;
  if (ReadFirstKey("MachineName",POSBalancer,2,true)) then begin
    if ((POSBalancer.TransDate<dfr) or ((POSBalancer.TransDate==dfr) and (POSBalancer.TransTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  CashierBalr.MachineName = machine;
  CashierBalr.Drawer = drawer;
  if (ReadFirstKey("Cashup",CashierBalr,2,true)) then begin
    if ((CashierBalr.TransDate<dfr) or ((CashierBalr.TransDate==dfr) and (CashierBalr.TransTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  POSEventr.MachineName = machine;
  POSEventr.Drawer = drawer;
  if (ReadFirstKey("MachineName",POSEventr,2,true)) then begin
    if ((POSEventr.TransDate<dfr) or ((POSEventr.TransDate==dfr) and (POSEventr.TransTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  Cashr.MachineName = machine;
  Cashr.Drawer = drawer;
  if (ReadFirstKey("MachineName",Cashr,2,true)) then begin
    if ((Cashr.TransDate<dfr) or ((Cashr.TransDate==dfr) and (Cashr.TransTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  IVCashr.LocalMachineCode = machine;
  IVCashr.DrawerCode = drawer;
  if (ReadFirstKey("Cashup",IVCashr,2,true)) then begin
    if ((IVCashr.TransDate<dfr) or ((IVCashr.TransDate==dfr) and (IVCashr.TransTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  IVr.MachineName = machine;
  IVr.DrawerCode = drawer;
  if (ReadFirstKey("Cashup",IVr,2,true)) then begin
    if ((IVr.TransDate<dfr) or ((IVr.TransDate==dfr) and (IVr.TransTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  RestAccr.MachineName = machine;
  RestAccr.DrawerCode = drawer;
  if (ReadFirstKey("Cashup",RestAccr,2,true)) then begin
    if ((RestAccr.TransDate<dfr) or ((RestAccr.TransDate==dfr) and (RestAccr.TransTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  IPr.MachineName = machine;
  IPr.DrawerCode = drawer;
  if (ReadFirstKey("Cashup",IPr,2,true)) then begin
    if ((IPr.TransDate<dfr) or ((IPr.TransDate==dfr) and (IPr.RegTime<tfr))) then begin
      goto LThisIsFirstRecord;
    end;
  end;
  res = true;
LThisIsFirstRecord:;
  ThisIsFirstRecord = res;
  return;
end;

global
updating function LongInt POSBalanceVcRecordCheck(var record POSBalanceVc POSBalancer,record POSBalanceVc POSBalance2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record TRVc gTRp;
  record POSBalanceVc locPOSBalancer;
  record DrawerVc Drawer;
  Boolean transf,gentrans,unokf;
  Integer errcode;
  string 200 errstr;
  Date dfr;
  Time tfr;
  val bal;

  gentrans = true;
  res = 0;
  if (POSBalancer.NLTransDone==0) then begin
    if (stat==Rs_update) then begin
      if (POSBalance2r.NLTransDone==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    if (IsUnOKAllowed("POSBalanceVc",POSBalancer.TransDate)==false) then begin
      RecordCheckError(1046,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LPOSBalanceVcRecordCheck;
  end;
//  POSBalancer.TransDate = CurrentDate;
//  POSBalancer.TransTime = CurrentTime;
  if (blank(POSBalancer.Drawer)) then begin
    RecordCheckError(1058,"",-1,"Drawer");   
    res = -1; 
    goto LPOSBalanceVcRecordCheck;  
  end;  
  if (blank(POSBalancer.MachineName)) then begin
    RecordCheckError(1058,"",-1,"MachineName");   
    res = -1; 
    goto LPOSBalanceVcRecordCheck;  
  end;  
  if (POSBalancer.SerNr==-1) then begin
    POSBalancer.SerNr = NextSerNr("POSBalanceVc",POSBalancer.TransDate,-1,true,"");
  end;
  if (SerNrTestPOSBalanceVc(POSBalancer.SerNr,POSBalancer.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LPOSBalanceVcRecordCheck;
  end;
  if (stat==Rs_insert) then begin
    RecordCopy(locPOSBalancer,POSBalancer);
    if (ReadFirstMain(locPOSBalancer,1,true)) then begin    
      RecordCheckError(1547,"",-1,"SerNr");   
      res = -1; 
      goto LPOSBalanceVcRecordCheck;  
    end;
    RecordCopy(locPOSBalancer,POSBalancer);
    if (ReadFirstKey("MachineName",locPOSBalancer,3,true)) then begin    
      RecordCheckError(1547,"",-1,"SerNr");   
      res = -1; 
      goto LPOSBalanceVcRecordCheck;  
    end;
  end;
  Drawer.Code = POSBalancer.Drawer;
  if (ReadFirstMain(Drawer,1,true)==false) then begin    
    RecordCheckError(1290,"",-1,"Drawer");   
    res = -1; 
    goto LPOSBalanceVcRecordCheck;  
  end;  
  if (IsSessionOpen(POSBalancer.MachineName,POSBalancer.Drawer,POSBalancer.TransDate,POSBalancer.TransTime)) then begin
    RecordCheckError(2199,"",-1,"SerNr");      
    res = -1;
    goto LPOSBalanceVcRecordCheck;
  end;
  if (POSBalanceExistsAfterThis(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer)) then begin
    if (ThisIsFirstRecord(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer)==false) then begin
      RecordCheckError(2194,"",-1,"TransDate");      
      res = -1;
      goto LPOSBalanceVcRecordCheck;
    end;
  end;
  transf = false;
  if (POSBalancer.NLTransDone==1) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (POSBalance2r.NLTransDone==0) then begin transf = true; end;
    end;
  end;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    POSBalancer.NLTransDone = 0;
    errcode = MakeTransFromPOSBalance(gTRp,POSBalancer,false);
    POSBalancer.NLTransDone = 1;
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1; 
      goto LPOSBalanceVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==RestAccYc)) then begin
      errstr = CheckTrans(gTRp,2,true);
      if (nonblank(errstr)) then begin
        RecordCheckError(1085,errstr,-1,"SerNr");      
        res = -1;
        goto LPOSBalanceVcRecordCheck;
      end;
      SaveTrans(gTRp);
    end;    
  end;
LPOSBalanceVcRecordCheck:;
  POSBalanceVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt POSBalanceVcRecordUpdate(var record POSBalanceVc POSBalancer,record POSBalanceVc POSBalance2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if ((POSBalancer.NLTransDone==0) and (POSBalance2r.NLTransDone==1)) then begin//unok
    DeleteTransaction(POSBalancer.SerNr,RestAccYc);
    StoreUnOKHistory("POSBalanceVc",POSBalancer.SerNr,CurrentDate,CurrentTime,CurrentUser);
  end;
  POSBalanceVcRecordUpdate = res;
  RETURN;
END;

global
function LongInt POSBalanceVcRecordRemoveTest(var record POSBalanceVc POSBalancer,record POSBalanceVc POSBalance2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 0;
  if (POSBalancer.NLTransDone==0) then begin
    res = 1;
  end;
  POSBalanceVcRecordRemoveTest = res; 
  RETURN;
END;

