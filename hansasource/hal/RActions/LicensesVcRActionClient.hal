/*in common.hal*/

external function Integer InString2(string,string);
external procedure AutomatedSales(string,Integer);
external procedure SetLicenseFunction(var record LicensesVc);
//external function Boolean LicenseShouldBeMovedToServer(record LicensesVc);


updating procedure PrepareEInvoicingSettings()
begin
  record EInvoiceBlock EIb;
  record DBERecordsBlock DBERb;
  Time t,startt;
  Date td;
  record ServiceCacheVc SCr;
  
  BlockLoad(EIb);
  if (EIb.OutEInvoices!=1 or EIb.RcvInvoicePref!=kEInvoiceRcvPreferenceElectronic or EIb.Postage!=1) then begin
    EIb.OutEInvoices = 1;
    EIb.RcvInvoicePref = kEInvoiceRcvPreferenceElectronic;
    EIb.Postage = 1;
    BlockStore(EIb);
  end;
  BlockLoad(DBERb);
  if (DBERb.DBStatus!=1 or DBERb.AutoDBStatus!=1) then begin
    DBERb.DBStatus = 1;
    DBERb.AutoDBStatus = 1;
    BlockStore(DBERb);
  end;
  SCr.Code = "SENDEINVOICE2";
  if (ReadFirstMain(SCr,1,true)) then begin
    RecordDelete(SCr);
  end;
  SCr.Code = "SENDEINVOICE";
  if (ReadFirstMain(SCr,1,true)) then begin
    RecordDelete(SCr);
  end;

  if (HasLocalization("ARG")==false) then begin
    if (TaskExists("SendEInvoice")==false) then begin
      startt = CurrentTime;
      t = AddMinutes(startt,2);
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("SendEInvoice","Send E-Invoices","HTSCSSendEInvoiceIdleTask","",td,t,"","");
    end;
    if (TaskExists("GetEInvoiceStatuses")==false) then begin
      t = AddMinutes(startt,8);
      td = CurrentDate;
      if (t<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("GetEInvoiceStatuses","Getting E-Invoice Statuses","HTSCSGetEInvoiceStatusIdleTask","",td,t,"","");
    end;
  end;
  return;
end;

updating procedure SkypeConnection(Boolean onf)
begin
  record ClIntegrationBlock ClIb;
  record LocalMachineBlock LMb;
  
  BlockLoad(ClIb);
  BlockLoad(LMb);
  if (onf) then begin
    ClIb.Skypef = 1;
    LMb.SkypeInt = 1;
  end else begin
    ClIb.Skypef = 0;
    LMb.SkypeInt = 0;
  end;
  BlockStore(ClIb);
  BlockStore(LMb);
  return;
end;

global
function LongInt LicensesVcRecordInIndex(record LicensesVc Lr,string indexname)
begin
  LongInt res;
  
  res = 1;
  
  if (Lr.Active==0) then begin 
    if (indexname=="ActiveFunction") then begin res = 0; end;
    if (indexname=="ActiveStoreSKU") then begin res = 0; end;
  end;
  
  if (Lr.Status<>kLicItemUnused) then begin
    if (indexname=="Unused") then begin res = 0; end;  
  end;
  
  LicensesVcRecordInIndex = res;
  return;
end;

global
function LongInt LicensesVcRecordSave(var record LicensesVc Lr,var record LicensesVc L2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (Lr.SerNr==-1) then begin
    Lr.SerNr = NextSerNr("LicensesVc",Lr.StartDate,-1,false,"");
  end;

  if (Lr.OrigStoreTransId=="") then begin
    Lr.OrigStoreTransId = Lr.StoreTransId;
  end;
  
  /*
  if (ClientMode) then begin
    if (LicenseShouldBeMovedToServer(Lr)==false) then begin
      Lr.Active = 1; //## need better logic
    end;
  end else begin
    Lr.Active = 1; //## need better logic
  end;
  */
  
  SetLicenseFunction(Lr);
  if (ClientMode or SingleUserMode) then begin
    switch (Lr.Function) begin
      case "HasModIN": AutomatedSales("HasModPO,HasModSO",kAutomatedSalesTagRandom);
    end;
  end;
  LicensesVcRecordSave = res;
  return;
end;

global
updating procedure PackageSetLicenseFunction(LongInt sernr)
begin
  LongInt pos;
  record LicensesVc oldLr,newLr,Lr,theLr;
  Boolean firsttaggf,updatef;
  string 255 functiontag;

  Lr.SerNr = sernr;
  if (ReadFirstMain(Lr,1,true)) then begin
    if (InString2(Lr.Function,"|")>=0) then begin
      firsttaggf = true;
      RecordCopy(theLr,Lr);
      pos = 0;
      GetNextSubstring(theLr.Function,pos,"|",functiontag);
      while (nonblank(functiontag)) begin      
        if (firsttaggf) then begin
          RecordCopy(oldLr,Lr);
          Lr.Function = functiontag;
          RecordUpdate(oldLr,Lr,false);
          firsttaggf = false;
        end else begin
          RecordCopy(newLr,theLr);  
          newLr.Function = functiontag;
          newLr.SerNr = NextSerNr("LicensesVc",newLr.StartDate,-1,false,"");
          RecordStore(newLr,false);
        end;
        GetNextSubstring(theLr.Function,pos,"|",functiontag);
      end;
    end;
  end;
  return;
end;

global
updating function LongInt LicensesVcRecordSaveAfter(var record LicensesVc Lr,var record LicensesVc L2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (InString2(Lr.Function,"|")>=0) then begin
    PackageSetLicenseFunction(Lr.SerNr);
  end;
  
  switch (Lr.Function) begin
    case "HasEInvoicing":
      PrepareEInvoicingSettings;
    case "HasSkypeConnection":
      SkypeConnection(true);
  end;
  
  LicensesVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt LicensesVcRecordUpdateAfter(var record LicensesVc Lr,var record LicensesVc L2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  switch (Lr.Function) begin
    case "HasSkypeConnection":
      if (Lr.Active==0) and (L2r.Active!=0) then begin
        SkypeConnection(false);
      end;
  end;
  
  LicensesVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt LicensesVcRecordRemoveAfter(var record LicensesVc Lr,var record LicensesVc L2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  switch (Lr.Function) begin
    case "HasSkypeConnection": SkypeConnection(false);
  end;
  
  LicensesVcRecordRemoveAfter = res;
  return;
end;
