external function boolean HasFiscalRows();
external procedure InitOTCheckArray(record OTCheckBlock,Array string,Array string,var Integer);
external function Integer CheckObjsNew(string,string,Array string,Array string,Integer,var string);
external procedure TRSumup(var record TRVc,var val);
external function Integer CheckObjs(string,string,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure MulVATIVExecute(string,val,var val,var val,Integer,Integer,roundmode);
external function Boolean FindLocationAccRow(string,row LocationAccBlock);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external function Integer ItemPrimaryCostModel(record INVc,var Integer);
external procedure Base1ToBase2(var val,Date,var val);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 20 FindItemPriceVarianceAcc(string,string,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure AddEuroCurncyTrRowType(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string,Integer);
external procedure AddEuroTrRowType(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer);
external procedure PUCalcPerc(val,string,var val);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Boolean TransInFiscal(Date);
external function string 255 AddStr(string,string,string);

global
procedure GetITVarianceAcc(string itcode,var string varianceacc)
begin
  record ITVc ITr;
 
  varianceacc = "";
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    varianceacc = ITr.PriceVarianceAcc;
  end;  
  RETURN;
END;

global
procedure GetITStockAcc(string itcode,var string stockacc)
begin
  record ITVc ITr;
 
  stockacc = "";
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    stockacc = ITr.InvAcc;
  end;  
  RETURN;
END;

global
procedure GetITWIPAccAcc(string itcode,var string workinprog)
begin
  record ITVc ITr;
 
  workinprog = "";
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    workinprog = ITr.WIPAcc;
  end;  
  return;
end;

global
procedure GetITPurchAcc(string itcode,var string puracc,Integer ctype)
BEGIN
  record ITVc ITr;
 
  puracc = "";
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    puracc = ITr.PurchAcc;
    if (ctype==1) then begin
      puracc = ITr.EUPurchAcc;
    end;  
    if (ctype==2) then begin
      puracc = ITr.ExpPurchAcc;
    end;  
  end;  
  RETURN;
END;

global
function Integer GetPUPControlAcc(string location,string vecode,Integer ItemGroupAccounts,string purowacc,string itgroup,record AccBlock ARAccRec,Integer stocktype,var string purchacc,var string purchaccname,Boolean findnewf)
BEGIN
  Integer res;
  record CUVc VEp;
  integer ctype;
  row LocationAccBlock LAbrw;
  
  purchacc = "";
  purchaccname = "";
  switch (stocktype) begin
    case kStockTypePurchased:
      if (findnewf==false) then begin
        purchacc = purowacc;
        if (nonblank(purchacc)) then begin
          goto LGetPUPControlAcc;
        end;
      end;
      VEp.Code = vecode;
      ReadFirstMain(VEp,1,true);
      FindLocationAccRow(location,LAbrw);
      switch (VEp.ExportFlag) begin
        case 0: purchacc = LAbrw.PurchAcc;
        case 1: purchacc = LAbrw.EUPurchAcc;
        case 2: purchacc = LAbrw.ExpPurchAcc;
        case 3: purchacc = LAbrw.EUPurchAcc;
        case 4: purchacc = LAbrw.ExpPurchAcc;
      end;
      if (nonblank(purchacc)) then begin
        goto LGetPUPControlAcc;
      end;
      VEp.Code = vecode;
      if (ReadFirstMain(VEp,1,true)) then begin
        if (VEp.ExportFlag == 0) then begin
          ctype = 0;
        end;
        if ((VEp.ExportFlag == 1) or (VEp.ExportFlag == 3)) then begin
          ctype = 1;
        end;
        if (VEp.ExportFlag == 2) or (VEp.ExportFlag == 4) then begin
          ctype = 2;
        end;  
      end;
      if (ItemGroupAccounts!=0) then begin
        GetITPurchAcc(itgroup,purchacc,ctype);
        if (nonblank(purchacc)) then begin
          goto LGetPUPControlAcc;
        end;
      end;
      if (ctype<=0) then begin
        purchacc = ARAccRec.PurchAcc;
      end;
      if (ctype==1) then begin
        purchacc = ARAccRec.EUPurchAcc;
      end;
      if (ctype==2) then begin
        purchacc = ARAccRec.ExpPurchAcc;
      end;  
    case kStockTypeConsignment:
      purchacc = ARAccRec.ConsigPurchAcc;
  end;
LGetPUPControlAcc:;  
  if (GetAccName(purchacc,purchaccname,60)==false) then begin 
    switch (ctype) begin
      case 1: res = 2178;
      case 2: res = 2179;
      otherwise res = 2129;  
    end;
  end;
  GetPUPControlAcc = res;
  RETURN;
END;

global
function Integer GetPUStockAcc(Integer ItemGroupAccounts,string purowacc,string locacc,string itgroup,record AccBlock ARAccb,Integer stocktype,var string stockacc,var string stockaccname,Boolean findnewf)
BEGIN
  Integer res;
  
  res = 0;
  stockacc = "";
  stockaccname  = "";
  switch (stocktype) begin
    case kStockTypePurchased:
      if (findnewf==false) then begin
        stockacc = purowacc;
      end;
      if (nonblank(stockacc)) then begin
        goto LGetPUStockAcc;
      end;
      stockacc = locacc;
      if (nonblank(stockacc)) then begin
        goto LGetPUStockAcc;
      end;
      if (ItemGroupAccounts!=0) then begin
        GetITStockAcc(itgroup,stockacc);
        if (nonblank(stockacc)) then begin
          goto LGetPUStockAcc;
        end;
      end;
      stockacc = ARAccb.StockAcc;
      if (nonblank(stockacc)) then begin
        goto LGetPUStockAcc;
      end;
    case kStockTypeConsignment:
      stockacc = ARAccb.ConsigStockAcc;
  end;
LGetPUStockAcc:;
  if (GetAccName(stockacc,stockaccname,60)==false) then begin 
    res = 2120;  
  end;
  GetPUStockAcc = res;
  RETURN;
END;

function
Integer GetPUVarianceAcc(Integer ItemGroupAccounts,string itgroup,string accusageacc,var string varianceacc,var string varianceaccname)
BEGIN
  Integer res;
  
  res = 0;
  varianceacc = "";
  varianceaccname  = "";
  if (ItemGroupAccounts!=0) then begin
    GetITVarianceAcc(itgroup,varianceacc);
    if (nonblank(varianceacc)) then begin
      goto LGetPUVarianceAcc;
    end;
  end;
  varianceacc = accusageacc;
  if (nonblank(varianceacc)) then begin
    goto LGetPUVarianceAcc;
  end;
LGetPUVarianceAcc:;
  if (GetAccName(varianceacc,varianceaccname,60)==false) then begin 
    res = 2139;  
  end;
  GetPUVarianceAcc = res;
  RETURN;
END;

function Integer MakeTransFromPU_Rows(Boolean ovstf,Integer rownr,var record TRVc gTRp,record PUVc PUp,record LocationVc Locp,
                                      var val PurSum,var val TotSum)
begin
  LongInt res;
  Integer i,rwcnt;
  row PUVc PUrw;
  string 10 stockacc,purchacc,rwobj;
  record INVc INr;
  Boolean sumupf;
  record CostAccBlock CAb;
  val rs,rs2,vat,t1,t,extra,customsbase;
  val frrate,to1,to2,br1,br2;
  string 255 lvatcode,thelocacc,tstr,errstr;
  string 20 varianceacc,taccnumber,location,locobjstr,stockobjstr;
  record LocationVc Locr;
  Integer primarycostmodel,queuecostmodel;
  Boolean dc1,dc2;
  record AccBlock ARb;
  record APAccBlock APAccRec;
  record BaseCurBlock BaseCurRec;
  roundmode rm;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  record OTCheckBlock OTCheckr;
  Boolean initotcheckf;      
  
  res = 0;
  if (ovstf) then begin
    dc1 = false;
    dc2 = true;
  end else begin
    dc1 = true;
    dc2 = false;
  end;
  BlockLoad(CAb);
  BlockLoad(ARb);
  BlockLoad(APAccRec);
  BlockLoad(BaseCurRec);
  sumupf = true;
  if (CAb.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  frrate = PUp.FrRate;
  to1 = PUp.ToRateB1;
  to2 = PUp.ToRateB2;
  br1 = PUp.BaseRate1;
  br2 = PUp.BaseRate2;

  rwcnt = MatRowCnt(PUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    if (rownr>=0) then begin
      if (i!=rownr) then begin goto LSKIPROW; end;
    end;
    stockacc = "";
    if (ovstf) then begin
      if ((PUrw.stp==3) or (PUrw.ovst==0)) then begin
        goto LSKIPROW;
      end;
    end else begin
      if ((PUrw.stp==3) or (PUrw.ovst!=0)) then begin
        goto LSKIPROW;
      end;
    end;
    INr.Code = PUrw.ArtCode;
    if (ReadFirstItem(PUrw.ArtCode,INr,true,true)==false) then begin
      INr.Objects = "";
      INr.ItemType = 0;
    end;
    if ((INr.ItemType==1) or ((CAb.CostAccForNonStocked!=0) and (INr.ItemType==0 or INr.ItemType==3))) then begin
      rs2 = MulRateToBase1(PUp.CurncyCode,PUrw.UPrice,frrate,to1,to2,br1,br2,SetRoundModeD(5));//HAS TO BE 5
      if (PUp.InclVAT==1) then begin
        if (nonblank(PUrw.VATCode)) then begin
          lvatcode = PUrw.VATCode;
        end else begin
          GetItemVATCode(PUrw.ArtCode,PUp.ExportFlag,lvatcode,false); // To support old Purchase Orders
        end;
        rm = DefaultRoundMode;
        rm.decimals = 5;
        MulVATIVExecute(lvatcode,rs2,vat,t1,PUp.InclVAT,0,rm);
//        MulVATIV(lvatcode,rs2,vat,t1,PUp.InclVAT,0);
        rs2 = rs2 - vat - t1;
        rs2 = Round(rs2,SetRoundModeD(5));
      end;              
      rs = Round(PUrw.Quant*rs2,SetRoundModeD(5));
      rs2 = PUrw.UPrice*PUrw.Quant;
      if (PUp.InclVAT==1) then begin
        if (nonblank(PUrw.VATCode)) then begin
          lvatcode = PUrw.VATCode;
        end else begin
          GetItemVATCode(PUrw.ArtCode,PUp.ExportFlag,lvatcode,false); // To support old Purchase Orders
        end;
        rm = DefaultRoundMode;
        rm.decimals = 5;
        MulVATIVExecute(lvatcode,rs2,vat,t1,PUp.InclVAT,0,rm);
//        MulVATIV(lvatcode,rs2,vat,t1,PUp.InclVAT,0);
        rs2 = rs2 - vat - t1;
        rs2 = Round(rs2,SetRoundModeD(5));
      end;
      extra = blankval;
      t = PUrw.ShipCost*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost1*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost2*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost3*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost4*PUrw.Quant;
      extra = extra + t;
      t = PUrw.RowCost5*PUrw.Quant;
      extra = extra + t;
      PUCalcPerc(rs,PUrw.Extra,t);
      if (Right(PUrw.Extra,1)=="%") then begin
        t = t;
      end else begin
        t = t*PUrw.Quant;
      end;
      extra = extra + t;
      customsbase = rs;
      if (HasLocalization("POL")) then begin
        customsbase = customsbase + PUrw.ShipCost;
        customsbase = Round(customsbase,SetRoundModeD(0));
      end;      
      PUCalcPerc(customsbase,PUrw.CustomsCost,t);
      if (Right(PUrw.CustomsCost,1)=="%") then begin
        t = t;
      end else begin
        t = t*PUrw.Quant;
      end;
      extra = extra + t;
      location = PUrw.Location;
      if (blank(location)) then begin
        location = PUp.Location;
      end;
      Locr.Code = location;
      if (ReadFirstMain(Locr,1,true)) then begin
        thelocacc = Locr.StockAcc;
        locobjstr = Locr.Objects;
      end else begin
        thelocacc = Locp.StockAcc;
        locobjstr = Locp.Objects;
      end;
      res = GetPUStockAcc(CAb.ItemGroupAccounts,PUrw.CostAcc,thelocacc,INr.Group,ARb,PUrw.StockType,stockacc,tstr,false);
      if (res!=0) then begin
        goto LMakeTransFromPU_Rows;
      end;
      rwobj = "";
      if (nonblank(PUrw.Objects)) then begin
        rwobj = PUrw.Objects;
      end else begin
//        rwobj = INr.Objects;, I don't think it should be here, it is pasted with item  FindINObjects(INr.Objects,INr.Group);
      end;
      if ((APAccRec.VEObjonPurchAcc!=0) and (nonblank(PUp.Objects))) then begin
        if (APAccRec.SkipObjectsOnVIFromHeader==0) then begin
          rwobj = AddObjectToObjectList(rwobj,PUp.Objects);
        end;
      end;      
      if (initotcheckf==false) then begin
        InitOTCheckArray(OTCheckr,otcheckaccs,otcheckobjtyps,otcheckcnt);
        initotcheckf = true;
      end;
      stockobjstr = AddObjectToObjectList(rwobj,locobjstr);
      res = CheckObjsNew(stockacc,stockobjstr,otcheckaccs,otcheckobjtyps,otcheckcnt,errstr);    
      if (res!=0) then begin
        goto LMakeTransFromPU_Rows;
      end;
      primarycostmodel = ItemPrimaryCostModel(INr,queuecostmodel);
      if (CAb.BookInPriceVariance!=0) and (primarycostmodel==1) and (queuecostmodel!=20) then begin
        if (CheckTTRPerRow("PUVc",stockacc,stockobjstr,dc1,taccnumber,1)) then begin end;      
        t = Round(PUrw.Quant*PUrw.InPrice,SetRoundModeD(2));
        AddEuroCurncyTrRowType(gTRp,stockacc,stockobjstr,"",tstr,t,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,blankval,PUrw.Quant,-1,false,taccnumber,kTransactionRowTypeStock);

        if (GetAccName(ARb.InPriceVarAcc,tstr,60)==false) then begin
          res = 22048;
          goto LMakeTransFromPU_Rows;
        end;        
        if (CheckTTRPerRow("PUVc",ARb.InPriceVarAcc,rwobj,dc1,taccnumber,1)) then begin end;      
        t = Round(rs+extra,SetRoundModeD(2));
        t = t - Round(PUrw.Quant*PUrw.InPrice,SetRoundModeD(2));
        t = Round(t,SetRoundModeD(2));
        AddEuroCurncyTrRowType(gTRp,ARb.InPriceVarAcc,rwobj,"",tstr,t,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,blankval,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
      end else begin
        if (CheckTTRPerRow("PUVc",stockacc,stockobjstr,dc1,taccnumber,1)) then begin end;      
        t = Round(rs+extra,SetRoundModeD(2));
        AddEuroCurncyTrRowType(gTRp,stockacc,stockobjstr,"",tstr,t,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,blankval,PUrw.Quant,-1,false,taccnumber,kTransactionRowTypeStock);
/*
cause of rounding diferences between GR an TR 
        if (extra!=0) then begin
          t = blankval;
          if (CheckTTRPerRow("PUVc",stockacc,stockobjstr,dc1,taccnumber,1)) then begin end;      
          AddEuroCurncyTrRowType(gTRp,stockacc,stockobjstr,"",tstr,extra,true,dc1,TotSum,BaseCurRec.BaseCur1,frrate,to1,to2,br1,br2,t,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
        end;
*/
      end;
      res = GetPUPControlAcc(location,PUp.VECode,CAb.ItemGroupAccounts,PUrw.CredAcc,INr.Group,ARb,PUrw.StockType,purchacc,tstr,false);
      if (res!=0) then begin
        goto LMakeTransFromPU_Rows;
      end;
      if (APAccRec.SkipObjectsOnVIFromHeader==0) then begin
        rwobj = AddObjectToObjectList(PUp.Objects,PUrw.Objects);
      end;
      if (ARb.BookPriceVar!=0) then begin
        if (PUrw.VarianceAmount!=0) then begin
          rs = rs + PUrw.VarianceAmount;
        end;
      end;
      if (CheckTTRPerRow("PUVc",purchacc,rwobj,dc2,taccnumber,1)) then begin end;
      t = Round(rs,SetRoundModeD(2));//rs should be rounded here 
      AddEuroCurncyTrRowType(gTRp,purchacc,rwobj,"",tstr,t,sumupf,dc2,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,rs2,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
      if (ARb.BookPriceVar!=0) then begin
        if (PUrw.VarianceAmount!=0) then begin              
          varianceacc = FindItemPriceVarianceAcc(ARb.ItemPriceVar,INr.Group,CAb.ItemGroupAccounts);
          if (GetAccName(varianceacc,tstr,60)==false) then begin
            res = 23172;      
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",varianceacc,rwobj,dc1,taccnumber,1)) then begin end;      
          AddEuroTrRowType(gTRp,varianceacc,rwobj,"",tstr,PUrw.VarianceAmount,br1,br2,true,dc1,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
        end;
      end;      
////new costacc      
      PurSum = PurSum + rs;
      PurSum = PurSum + extra;
      if (ARb.BookExtraCostPerRow!=0) then begin
        rs2 = MulRateToBase1(PUp.CurncyCode,PUrw.UPrice,PUp.FrRate,PUp.ToRateB1,PUp.ToRateB2,PUp.BaseRate1,PUp.BaseRate2,SetROundModeD(5));
        PUCalcPerc(rs2,PUrw.Extra,rs);//should be in base 1 shouldn't it, PUrw.UPrice
        rs = PUrw.Quant*rs;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUExtraAcc,tstr,60)==false) then begin
            res = 2121;
            goto LMakeTransFromPU_Rows;
          end;
  // The Cost, Freight and Custom are in LOCAL currency
          if (CheckTTRPerRow("PUVc",ARb.PUExtraAcc,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUExtraAcc,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;

        rs = PUrw.Quant*PUrw.ShipCost;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUFreightAcc,tstr,60)==false) then begin
            res = 2122;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUFreightAcc,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUFreightAcc,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;

        rs = PUrw.Quant*PUrw.RowCost1;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost1,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost1,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost1,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost2;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost2,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost2,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost2,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost3;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost3,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost3,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost3,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost4;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost4,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost4,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost4,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        rs = PUrw.Quant*PUrw.RowCost5;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCost5,tstr,60)==false) then begin
            res = 2123;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCost5,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCost5,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
        PUCalcPerc(customsbase,PUrw.CustomsCost,rs);
        if (Right(PUrw.CustomsCost,1)=="%") then begin
          rs = PUrw.Quant*rs;
        end else begin
          rs = rs*PUrw.Quant;
        end;
        if (rs!=0) then begin
          if (GetAccName(ARb.PUCustomsAcc,tstr,60)==false) then begin
            res = 2128;
            goto LMakeTransFromPU_Rows;
          end;
          if (CheckTTRPerRow("PUVc",ARb.PUCustomsAcc,rwobj,dc2,taccnumber,0)) then begin end;      
          AddEuroTrRowType(gTRp,ARb.PUCustomsAcc,rwobj,"",tstr,rs,br1,br2,true,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
          PurSum = PurSum - rs;
        end;
      end;
    end;
LSKIPROW:;    
  end;
LMakeTransFromPU_Rows:;  
  MakeTransFromPU_Rows = res;
  return;
end;

global
function Integer MakeTransFromPU(record TRVc gTRp,record PUVc PUp,record LocationVc Locp,Boolean rpt)
BEGIN
  Integer res;
  Integer rwcnt;
  Integer i;
  string 255 ftxt,tstr,firstVAT;
  val VATSum;
  val t,rs;
  val frrate,to1,to2,br1,br2;
  row PUVc PUrw;
  Boolean dc1,dc2,sumupf;
  val TotSum,PurSum;
  val rs2,extra;
  string 10 stockacc,purchacc,taccnumber;
  record TRGenBlock TRGenRec;
  record AccBlock ARb;
  val PurSum2;  
  record TRVc lTRr;
  record CostAccBlock CAb;
  record APAccBlock APAccRec;
  record BaseCurBlock BaseCurRec;
  string 60 rwobj;
  transaction string 255 gRuniningMaint;

  res = 0;
  if (PUp.Invalid!=0) then begin
    goto LMakeTransFromPU;
  end;
  BlockLoad(ARb);
  BlockLoad(TRGenRec);
  BlockLoad(CAb);
  BlockLoad(APAccRec);
  BlockLoad(BaseCurRec);
  sumupf = true;
  if (CAb.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  frrate = PUp.FrRate;
  to1 = PUp.ToRateB1;
  to2 = PUp.ToRateB2;
  br1 = PUp.BaseRate1;
  br2 = PUp.BaseRate2;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.PUGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromPU;
    end;
  end;
  if (rpt==false) then begin
    if (nonblankdate(TRGenRec.PUStartDate) and
        (PUp.TransDate<TRGenRec.PUStartDate)) then begin
      res = 0;
      goto LMakeTransFromPU;
    end;
  end;  
  if (true) then begin
    gTRp.IntYc = PUYc;
    gTRp.Number = PUp.SerNr;
    gTRp.RefStr = "";
  end;  
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":  ;
        otherwise
          res = 1032;
          goto LMakeTransFromPU;
      end;
    end;
  end;  
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = PUp.TransDate;  
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false and HasFiscalRows) then begin
      res = 1075;
      goto LMakeTransFromPU;
    end;  
  end;
  ftxt = PUp.VECode;
  ftxt = ftxt & " ";
  ftxt = ftxt & PUp.VEName;
  if (blank(PUp.VECode)) then begin
    ftxt = PUp.Comment;
  end;
  if (nonblank(PUp.CurncyCode)) then begin
    ftxt = AddStr(ftxt,PUp.CurncyCode,", ");
    GetFullCurncyRateText(true,tstr,PUp.FrRate,PUp.ToRateB1,PUp.ToRateB2,PUp.BaseRate1,PUp.BaseRate2);
    ftxt = AddStr(ftxt,tstr," ");
  end;
  gTRp.Comment = ftxt;
  TotSum = 0;
  VATSum = 0;
  firstVAT = "";
  dc1 = true;
  dc2 = false;
  extra = 0;
  PurSum = 0;
  PurSum2 = 0;
/* Code not used...
  stockacc = ARb.StockAcc;
  if (nonblank(Locp.Code)) then begin
    if (nonblank(Locp.StockAcc)) then begin
      stockacc = Locp.StockAcc;
    end;
  end;
*/
/*not needed here, we might use another stock acc  
  if (GetAccName(stockacc,tstr,60)==false) then begin
    res = 2120;
    goto LMakeTransFromPU;
  end;
*/ 
  res = MakeTransFromPU_Rows(false,-1,gTRp,PUp,Locp,PurSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromPU;
  end;
  if (ARb.BookExtraCostPerRow==0) then begin
    rs = PUp.ExtraCost;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUExtraAcc,tstr,60)==false) then begin
        res = 2121;
        goto LMakeTransFromPU;
      end;
  // The Cost, Freight and Custom are in LOCAL currency
      if (CheckTTRPerRow("PUVc",ARb.PUExtraAcc,"",dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUExtraAcc,"","",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.ShipCost;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUFreightAcc,tstr,60)==false) then begin
        res = 2122;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUFreightAcc,PUp.Objects,dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUFreightAcc,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost1;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost1,tstr,60)==false) then begin
        res = 2123;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost1,PUp.Objects,dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUCost1,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost2;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost2,tstr,60)==false) then begin
        res = 2124;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost2,PUp.Objects,dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUCost2,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost3;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost3,tstr,60)==false) then begin
        res = 2125;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost3,PUp.Objects,dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUCost3,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost4;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost4,tstr,60)==false) then begin
        res = 2126;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost4,PUp.Objects,dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUCost4,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.Cost5;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCost5,tstr,60)==false) then begin
        res = 2127;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCost5,PUp.Objects,dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUCost5,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
    rs = PUp.CustomsCost;
    if (rs!=0) then begin
      if (GetAccName(ARb.PUCustomsAcc,tstr,60)==false) then begin
        res = 2128;
        goto LMakeTransFromPU;
      end;
      if (CheckTTRPerRow("PUVc",ARb.PUCustomsAcc,PUp.Objects,dc2,taccnumber,0)) then begin end;      
      AddEuroTrRowType(gTRp,ARb.PUCustomsAcc,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
      PurSum = PurSum - rs;
    end;
  end;

  rs = PUp.ShipCostRound + PUp.CustomsCostRound + PUp.Cost1Round + PUp.Cost2Round + PUp.Cost3Round + PUp.Cost4Round + PUp.Cost5Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    rs2 = MulRateToBase1(PUp.CurncyCode,rs,frrate,to1,to2,br1,br2,SetRoundModeD(5));
    res = GetPUStockAcc(0,"",Locp.StockAcc,"",ARb,0,stockacc,tstr,false);
    if (res!=0) then begin
      goto LMakeTransFromPU;
    end;
    rwobj = "";
    if ((APAccRec.VEObjonPurchAcc!=0) and (nonblank(PUp.Objects))) then begin
      rwobj = PUp.Objects;
    end;      
    if (CheckTTRPerRow("PUVc",stockacc,rwobj,dc1,taccnumber,0)) then begin end;      
    AddEuroCurncyTrRowType(gTRp,stockacc,rwobj,"",tstr,rs,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,rs2,PUrw.Quant,-1,false,taccnumber,kTransactionRowTypeStock);
  end;
  rs = PUp.ShipCostRound;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.FreightPriceVar,tstr,60)==false) then begin
      res = 20930;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.FreightPriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.FreightPriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.CustomsCostRound;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.CustomsPriceVar,tstr,60)==false) then begin
      res = 20931;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.CustomsPriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.CustomsPriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost1Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost1PriceVar,tstr,60)==false) then begin
      res = 20932;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost1PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost1PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost2Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost2PriceVar,tstr,60)==false) then begin
      res = 20933;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost2PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost2PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost3Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost3PriceVar,tstr,60)==false) then begin
      res = 20934;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost3PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost3PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost4Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost4PriceVar,tstr,60)==false) then begin
      res = 20935;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost4PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost4PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;
  rs = PUp.Cost5Round;
  rs = Round(rs,DefaultRoundMode);
  if (rs!=0) then begin
    if (GetAccName(ARb.Cost5PriceVar,tstr,60)==false) then begin
      res = 20936;
      goto LMakeTransFromPU;
    end;
    if (CheckTTRPerRow("PUVc",ARb.Cost5PriceVar,PUp.Objects,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRowType(gTRp,ARb.Cost5PriceVar,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
  end;

  /*//new costacc
  PurSum = PurSum - PurSum2;
  rs = PurSum;
  if (rs!=0) then begin
    if (GetAccName(ARb.PurchAcc,tstr,60)==false) then begin
      res = 2129;
      goto LMakeTransFromPU;
    end;
// The PurSum is in Local Currency therefore there is no correct way to make a correct currency booking 
    AddEuroTrRowType(gTRp,ARb.PurchAcc,PUp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","",kTransactionRowTypeStock);
  end;
  *///new costacc
  res = TRVc_AddRoundOffRow(gTRp,br1,br2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromPU;
  end;
  res = 0;
LMakeTransFromPU:;
  MakeTransFromPU = res;
  RETURN; 
END;

global
updating procedure PUOvstUpdateNLTransaction(Date td,LongInt SerNr,val CostPrice,var Boolean updmarkf)
begin
  record TRVc TRr;
  record TRVc oldTRr;
  row TRVc TRrw;
  
  TRr.Number = SerNr;
  TRr.IntYc = PUYc;
  if (ReadFirstMain(TRr,2,true)) then begin
    RecordCopy(oldTRr,TRr);
    if (updmarkf) then begin
      ClearRow(TRr,TRrw,2);
      TRrw.UpdDate = CurrentDate;
      TRrw.Sign = CurrentUser;
      TRrw.OldTransDate = TRr.TransDate;
      MatRowPut(TRr,MatRowCnt(TRr),TRrw);
      TRr.TransDate = td;
      updmarkf = false;
    end;
//    AddEuroCurncyTrRowType(gTRp,stockacc,rwobj,"",tstr,rs,sumupf,dc1,TotSum,PUp.CurncyCode,frrate,to1,to2,br1,br2,rs2,blankval,-1,false,taccnumber,kTransactionRowTypeStock);
    if (RecordUpdate(oldTRr,TRr,true)) then begin 
    end;
  end;
  return;
end;

global
updating procedure PUVc_UpdateTR(record PUVc PUr,record PUVc PU2r)
begin
  Integer i,rwcnt,res;
  row PUVc PUrw;
  vector Boolean aoverstruck;
  record TRVc TRr;
  record TRVc oldTRr;
  row TRVc TRrw;
  Boolean updatedf;
  val PurSum,TotSum,t;
  string 255 loc;
  record LocationVc LocRec;
  record MainStockBlock MSb;
  
  rwcnt = MatRowCnt(PUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    if (PUrw.ovst!=0) then begin
      aoverstruck[i] = true;
    end;
  end;
  rwcnt = MatRowCnt(PU2r);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PU2r,i,PUrw);
    if (PUrw.ovst!=0) then begin
      aoverstruck[i] = false;
    end;
  end;
  TRr.IntYc = PUYc;
  TRr.Number = PUr.SerNr;
  if (ReadFirstMain(TRr,2,true)) then begin
    RecordCopy(oldTRr,TRr);
  end;
  BlockLoad(MSb);

  rwcnt = MatRowCnt(PUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    if (PUrw.ovst!=0) and (aoverstruck[i]) then begin
      if (updatedf==false) then begin
        TRrw.ovst = 0;
        TRrw.stp = 2;
        TRrw.Sign = CurrentUser;
        TRrw.OldTransDate = TRr.TransDate;
        TRrw.UpdDate = CurrentDate;
        MatRowPut(TRr,MatRowCnt(TRr),TRrw);
        updatedf = true;        
      end;
      loc = PUr.Location;
      if (blank(loc)) then begin
        loc = MSb.MainStock;
      end;  
      if (nonblank(loc)) then begin
        LocRec.Code = loc;
        if (ReadFirstMain(LocRec,1,true)==false) then begin
        end;
      end;
      res = MakeTransFromPU_Rows(true,i,TRr,PUr,LocRec,PurSum,TotSum);
      if (res!=0) then begin
        MessageBox(res,"");
      end;
    end;
  end;
  if (updatedf) then begin
    TRSumup(TRr,t);
    RecordUpdate(oldTRr,TRr,true);
  end;
  return;
end;
