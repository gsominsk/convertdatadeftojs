external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external function Boolean IsDigit(string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function roundmode GetCostRoundMode(record RoundBlock);
external updating procedure StockTakeRemoveItemHist(record StockTakeVc);
external updating procedure StockTakeUpdateInstock(record StockTakeVc);
external procedure GetCurUser(var record UserVc);
external procedure Base1ToBase2(var val,Date,var val);
external procedure UpdateStockTakeFIFO(var record StockTakeVc,Boolean);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external updating procedure StockTakeUpdateItemHist(record StockTakeVc);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestStockTakeVc(LongInt,Date,var Boolean);

function Boolean FindNewestItemHist(string artcode,date transdat,var date dat)
begin
  record ItemHistVc IHr;
  Boolean res;
  
  IHr.ArtCode = artcode;
  if (ReadLastKey("ArtCode",IHr,1,false)) then begin
    dat = IHr.TransDate;
    res = true;
  end;
  FindNewestItemHist = res;
  return;
end;

function Integer ValidateBulkSerialNoRow(record SerNrTrackBlock SNrb,record StockTakeVc STr,row StockTakeVc STrw,Integer currow,var string gotofield,var Integer gotorow)
begin
  Integer res;
  Integer j,rwcnt;
  row StockTakeVc ST2rw;
  Boolean testf;
  string 255 serialnr;
  string 255 serialnr2;
  val qty,qty2;

  gotorow = -1;
  gotofield = "";  
  if (STrw.Qty>1) then begin
    rwcnt = len(STrw.SerialNr);
    for (j=0;j<rwcnt;j=j+1) begin
      if ((IsDigit(Mid(STrw.SerialNr,j,1))==false) and (Mid(STrw.SerialNr,j,1)!=":")) then begin
        res = 20434;
        gotorow = currow;
        gotofield = "SerialNr";
        goto LValidateBulkSerialNoRow;
      end;
    end;
  end;
  rwcnt = MatRowCnt(STr);
  serialnr = FirstInRange(STrw.SerialNr,60);
  while (nonblank(serialnr)) begin
    for (j=0;j<currow;j=j+1) begin  
      MatRowGet(STr,j,ST2rw);
      if (ST2rw.Qty!=0) then begin
        if (STrw.ArtCode==ST2rw.ArtCode) then begin
          qty2 = blankval;
          serialnr2 = FirstInRange(ST2rw.SerialNr,60);
          while (nonblank(serialnr2)) begin
            if (serialnr==serialnr2) then begin
              res = 1241;
              gotorow = currow;
              gotofield = "SerialNr";
              goto LValidateBulkSerialNoRow;
            end;
            qty2 = qty2 + 1;
            serialnr2 = NextSerialNumber(ST2rw.ArtCode,serialnr2,SNrb);
            if (qty2>=ST2rw.Qty) then begin serialnr2 = ""; end;
          end;
        end;
      end;
    end;
    qty = qty + 1;
    serialnr = NextSerialNumber(STrw.ArtCode,serialnr,SNrb);
    if (qty>=STrw.Qty) then begin serialnr = ""; end;
  end;
LValidateBulkSerialNoRow:;  
  ValidateBulkSerialNoRow = res;
  return;
end;

global
updating function LongInt StockTakeVcRecordCheck(var record StockTakeVc StockTakep,record StockTakeVc StockTake2p,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  record StockTakeVc lStockTaker;
  row StockTakeVc StockTakerw,StockTake2rw;
  record INVc INr;
  Integer i,rwcnt,cnt;
  LongInt oldnr;
  Boolean transf,gentrans,updatefifof;
  val t;
  record LocationVc LocRec;
  string 10 location;
  string 10 loc2;
  record MainStockBlock MSb;
  record SRBlock SRRec;
  Integer insertmode,updatemode;
  record PISVc PISr;
  Date dat;
  record PosVc Posr;
  Integer errcode,errorrow;
  string 255 errorfield;
  record SerNrTrackBlock SNrb;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  transf = false;
  updatefifof = true;
  BlockLoad(MSb);
  BlockLoad(SNrb);
  BlockLoad(SRRec);
  if (stat==updatemode) then begin
    if (StockTakep.SerNr<=0) and (StockTake2p.OKFlag==0) then begin
      StockTakep.SerNr = StockTake2p.SerNr;
    end;
  end;      
  oldnr = StockTakep.SerNr;
  transf = false;
  if (StockTakep.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (StockTake2p.OKFlag==0) then begin transf = true; end;
    end;
  end;  
  if (StockTakep.SetStockValue==0) then begin
    updatefifof = false;
  end;
  if (StockTakep.SerNr<=0) then begin
    StockTakep.SerNr = NextSerNr("StockTakeVc",StockTakep.TransDate,-1,false,"");
  end;
  if (SerNrTestStockTakeVc(StockTakep.SerNr,StockTakep.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LStockTakeVcRecordCheck;
  end;   
  if (Date2Test("StockTakeVc",StockTakep.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LStockTakeVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,StockTakep.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LStockTakeVcRecordCheck;
  end;
  if ((stat==insertmode) or (StockTakep.SerNr!=StockTake2p.SerNr)) then begin
    lStockTaker.SerNr = StockTakep.SerNr;
    if (ReadFirstMain(lStockTaker,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1; 
      goto LStockTakeVcRecordCheck;
    end;
  end;
  location = StockTakep.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  if (nonblank(location)) then begin
    LocRec.Code = location;
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      RecordCheckError(1120,location,-1,"Location");      
      res = -1; 
      goto LStockTakeVcRecordCheck;
    end;
  end;
  rwcnt = MatRowCnt(StockTakep);
  if (transf) then begin
    if (rwcnt==0) then begin
      RecordCheckError(1030,"",0,"ArtCode");      
      res = -1;
      goto LStockTakeVcRecordCheck;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockTakep,i,StockTakerw);
    if (transf) then begin
      if (blank(StockTakerw.ArtCode)) and (nonblank(StockTakerw.Qty)) then begin
        RecordCheckError(1130,"",i,"ArtCode");      
        res = -1; 
        goto LStockTakeVcRecordCheck;
      end;
    end;
    if (nonblank(StockTakerw.Location)) then begin
      loc2 = StockTakerw.Location;
    end else begin
      loc2 = location;
    end;
    if (MSb.requireLocation!=0) then begin
      if (nonblank(StockTakerw.Location)) then begin
        loc2 = StockTakerw.Location;
      end else begin
        loc2 = StockTakep.Location;
      end;
      if (blank(loc2)) then begin
        RecordCheckError(1058,loc2,-1,"Location");      
        res = -1; 
        goto LStockTakeVcRecordCheck;
      end;
    end;
    if (nonblank(loc2)) then begin
      LocRec.Code = loc2;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
        RecordCheckError(1120,loc2,i,"Location");      
        res = -1; 
        goto LStockTakeVcRecordCheck;
      end;
    end;
    if (nonblank(StockTakerw.ArtCode)) then begin
      if (ReadFirstItem(StockTakerw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
        res = -1; 
        goto LStockTakeVcRecordCheck;
      end;
      if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
        if (SNrb.BulkSerialNos==0) then begin
          if (IsSerialNrCorrect(StockTakerw.SerialNr)==false) then begin
            RecordCheckError(24154,StockTakerw.SerialNr,i,"SerialNr");      
            res = -1; 
            goto LStockTakeVcRecordCheck;
          end;        
        end;
        if ((check!=0) and (transf)) then begin
          if (blank(StockTakerw.SerialNr)) then begin
            if (StockTakerw.Qty!=0) then begin
              RecordCheckError(1239,"",i,"SerialNr");      
              res = -1; 
              goto LStockTakeVcRecordCheck;
            end;
          end;
        end;
        if (INr.SerNrf==1) then begin
          if ((check!=0) and (transf)) then begin
            if (SNrb.BulkSerialNos!=0) then begin
              errcode = ValidateBulkSerialNoRow(SNrb,StockTakep,StockTakerw,i,errorfield,errorrow);
              if (errcode) then begin
                RecordCheckError(errcode,"",errorrow,errorfield);      
                res = -1;
                goto LStockTakeVcRecordCheck;
              end;
            end else begin
              if (StockTakerw.InStock!=1) then begin
                RecordCheckError(1242,"",i,"SerialNr");      
                res = -1; 
                goto LStockTakeVcRecordCheck;
              end;
            end;
            if (blank(StockTakerw.SerialNr)) then begin
              if (StockTakerw.Qty!=0) then begin
                RecordCheckError(1239,"",i,"SerialNr");      
                res = -1; 
                goto LStockTakeVcRecordCheck;
              end;
            end;
          end;
          for (cnt=0;cnt<i;cnt=cnt+1) begin
            MatRowGet(StockTakep,cnt,StockTake2rw);
            if ((StockTake2rw.ArtCode==StockTakerw.ArtCode) and (StockTake2rw.SerialNr==StockTakerw.SerialNr)) then begin
              RecordCheckError(1242,"",i,"SerialNr");      
              res = -1; 
              goto LStockTakeVcRecordCheck;
            end;
          end;          
        end;
      end;
    /*  WE SHOULD NEVER TEST FOR QTY IN STOCK DURING STOCK TAKING
      if (LocRec.RequirePos!=0) then begin
        FindStockValueAtPosition(StockTakerw.ArtCode,loc2,StockTakerw.Position,PISr);
        if (StockTakerw.Qty>PISr.LeftQty) then begin
          RecordCheckError(1397,"",i,"PosCode");      
          res = -1; 
          goto LStockTakeVcRecordCheck;
        end;
      end; */
      if (LocRec.RequirePos!=0) then begin
        if (blank(StockTakerw.Position)) then begin
          RecordCheckError(1854,"",i,"Position");      
          res = -1;
          goto LStockTakeVcRecordCheck;
        end;
      end;
      if (nonblank(StockTakerw.Position)) then begin
        Posr.Code = StockTakerw.Position;
        Posr.Location = location;
        if (ReadFirstKey("Location",Posr,2,true)==false) then begin
          RecordCheckError(1120,StockTakerw.Position,i,"Position");      
          res = -1;
          goto LStockTakeVcRecordCheck;
        end;
      end;
      if (StockTakep.SetStockValue!=0) then begin
        if (StockTakep.OverrideBackdated==0) then begin
          if (FindNewestItemHist(StockTakerw.ArtCode,StockTakep.TransDate,dat)) then begin
            if (dat>=StockTakep.TransDate) then begin
              RecordCheckError(1710,"",i,"ArtCode");      
              res = -1; 
              goto LStockTakeVcRecordCheck;
            end;
          end;
        end;
        if (INr.ItemType==2) then begin
          RecordCheckError(1826,"",i,"ArtCode");      
          res = -1; 
          goto LStockTakeVcRecordCheck;
        end;
      end;
    end;
  end;  
  if (check!=0) then begin 
    if (updatefifof) then begin
      UpdateStockTakeFIFO(StockTakep,false);
    end;
  end;
LStockTakeVcRecordCheck:;
  if (res!=0) then begin StockTakep.SerNr = oldnr; end;
  StockTakeVcRecordCheck = res;
  RETURN;
END;

updating procedure StockTakeUpdateCostPrice(record StockTakeVc StockTakep)
BEGIN
  record INVc oldINr;
  record INVc INr;
  record ItemStatusVc ISr;
  row StockTakeVc StockTakerw;
  Boolean found;
  Integer i,rwcnt,outrows;
  val q,t,t2,rs,rsb2;
  record RoundBlock RoundRec;
  
  BlockLoad(RoundRec);
  outrows = 0;
  i = -1;
  rwcnt = MatRowCnt(StockTakep);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockTakep,i,StockTakerw);
    if (StockTakerw.Qty!=0) then begin
      INr.Code = StockTakerw.ArtCode;
      found = ReadFirstMain(INr,1,true);
      RecordCopy(oldINr,INr);
      if ((found) and (StockTakerw.FIFO!=0)) then begin
        switch (INr.UpdateCost) begin
          case 2:
            rs = StockTakerw.FIFO;
            Base1ToBase2(rs,StockTakep.TransDate,rsb2);
            FindStockValue(StockTakerw.ArtCode,"",ISr);
            q = ISr.Instock - StockTakerw.Qty;
            t = q*INr.WeighedAvPrice;
            if (INr.PriceFactor!=0) then begin
              rs = rs*INr.PriceFactor;
            end;
            t2 = StockTakerw.Qty*rs;
            t = t + t2;
            q = q + StockTakerw.Qty;
            rs = t/q;
            if (q>=0) then begin
              INr.WeighedAvPrice = rs;
            end;

            t = q*INr.InPriceB2;
            if (INr.PriceFactor!=0) then begin
              rsb2 = rsb2*INr.PriceFactor;
            end;
            t2 = StockTakerw.Qty*rsb2;
            t = t + t2;
            q = q + StockTakerw.Qty;
            rsb2 = t/q;
            if (q>=0) then begin
              INr.WeighedAvPriceB2 = rsb2;
            end;
      //?      UpdateLocationWeightedAv(INr.Code
            if ((INr.InPrice!=INr.WeighedAvPrice) and (rs!=0)) then begin  //? inprice has changed 
              INr.InPrice = INr.WeighedAvPrice;
              INr.LastPriceChange = CurrentDate;
            end else begin
              found = false;
            end;
            if ((INr.InPriceB2!=INr.WeighedAvPriceB2) and (rsb2!=0)) then begin  //? inprice has changed 
              INr.InPriceB2 = INr.WeighedAvPriceB2;
            end;
          otherwise 
            found = false;
         end;
        if (found) then begin
          INr.WeighedAvPrice = Round(INr.WeighedAvPrice,GetCostRoundMode(RoundRec));
          INr.WeighedAvPriceB2 = Round(INr.WeighedAvPriceB2,GetCostRoundMode(RoundRec));
          switch(INr.UpdateCost) begin
            case 0:;
            otherwise
              INr.InPrice = Round(INr.InPrice,GetCostRoundMode(RoundRec));
              INr.InPriceB2 = Round(INr.InPriceB2,GetCostRoundMode(RoundRec));
              INr.LastPriceChange = CurrentDate;
          end;
          if (RecordUpdate(oldINr,INr,false)==0) then begin end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating function LongInt StockTakeVcRecordUpdateAfter(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val LocOKNr;

  if ((StockTaker.OKFlag!=0) and (StockTake2r.OKFlag==0)) then begin
    StockTakeUpdateInstock(StockTaker);
    StockTakeUpdateCostPrice(StockTaker);
    StockTakeUpdateItemHist(StockTaker);
  end;
  if ((StockTaker.OKFlag==0) and (StockTake2r.OKFlag!=0)) then begin
    StockTakeRemoveItemHist(StockTaker);
  end;
  StockTakeVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt StockTakeVcRecordRemoveTest(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (StockTaker.TransDate<=DBLockRec.DeleteBeforeDate) then begin        
    res = 1;
    goto LStockTakeVcRecordRemoveTest;
  end;  
  if (StockTaker.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;
LStockTakeVcRecordRemoveTest:;
  StockTakeVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt StockTakeVcRecordReset(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  StockTaker.OKFlag = 0;
  StockTakeVcRecordReset = res;
  RETURN;
END;

procedure StockTakeVcConvertB1ToB2Date(record StockTakeVc StockTakep,string curp,Date datp)
BEGIN
  row StockTakeVc StockTakerw;
  val fr,to1,to2,br1,br2,t;
  Integer rwcnt,i;
  string 20 curncy;
  
  curncy = curp;
  GetFullCurncyRate(curncy,datp,fr,to1,to2,br1,br2);
  rwcnt = MatRowCnt(StockTakep);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockTakep,i,StockTakerw);
    B1ToB2ValRM(StockTakerw.FIFO,br1,br2,t,GetCostRoundModeRB);
    StockTakerw.FIFO = t;
    B1ToB2ValRM(StockTakerw.FIFORowVal,br1,br2,t,GetCostRoundModeRB);
    StockTakerw.FIFORowVal = t;
    MatRowPut(StockTakep,i,StockTakerw);
  end;
//  StockTakeSumUp(StockTakep);
  RETURN;
END;

global
updating function LongInt StockTakeVcRecordImport(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ConvMasterBlock cvm;
  Boolean gBase1ToBase2;

  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    StockTakeVcConvertB1ToB2Date(StockTaker,"",StockTaker.TransDate);
  end;
  StockTakeVcRecordImport = res;
  RETURN;
END;

global
updating function LongInt StockTakeVcRecordImportAfter(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ConvMasterBlock cvm;
  Boolean gBase1ToBase2;

  if (StockTaker.OKFlag!=0) then begin
    if (StockTaker.SetStockValue!=0) then begin
      StockTakeUpdateInstock(StockTaker);
    end;
  end;
  StockTakeVcRecordImportAfter = res;
  RETURN;
END;

global
function LongInt StockTakeVcRecordDefaults(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc USr;
  
  StockTaker.SerNr = -1;
  StockTaker.TransDate = CurrentDate;
  StockTaker.OKFlag = 0;
  if (SingleUserMode) then begin
    StockTaker.SerNr = NextSerNr("StockTakeVc",StockTaker.TransDate,-1,false,"");
  end;
  GetCurUser(USr);
  StockTaker.Location = USr.Location;
  StockTakeVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt StockTakeVcRecordDuplicate(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rwcnt;
  row StockTakeVc StockTakerw;

  StockTaker.SerNr = -1;
  StockTaker.OKFlag = 0;
  if (SingleUserMode) then begin
    StockTaker.SerNr = NextSerNr("StockTakeVc",StockTaker.TransDate,-1,false,"");
  end;
  rwcnt = MatRowCnt(StockTaker);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockTaker,i,StockTakerw);
    StockTakerw.FIFO = blankval;
    StockTakerw.FIFORowVal  = blankval;
    MatRowPut(StockTaker,i,StockTakerw);
  end;
  WarnFutureDate(true,StockTaker.TransDate);
  StockTakeVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt StockTakeVcRecordSaveAfter(var record StockTakeVc StockTaker,record StockTakeVc StockTake2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (StockTaker.OKFlag!=0) then begin
    StockTakeUpdateInstock(StockTaker);
    StockTakeUpdateCostPrice(StockTaker);
    StockTakeUpdateItemHist(StockTaker);
  end;
  StockTakeVcRecordSaveAfter = res;
  RETURN;
END;
