external function Boolean IsEnterprise();
external procedure AutomatedSales(string,Integer);
external function Integer EInvoiceForCustomer3(Integer,string,record CUVc);
external function Integer EInvoiceingEnabled(Integer,string,record CUVc);
remote procedure OpenInternetEnablers();
external function Boolean ValidEInvoiceData_Standard(record IVVc,record CUVc,var LongInt,var string);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external function string 255 ArgIVTypeLetter(string);
external function string 255 FindTaxAuthIDControlCode(string,record IVVc);
external procedure ReplacePerceptionTaxesRows_IVVc(var record IVVc);
external procedure FindNextIVVcOfficialSerialNr(var record IVVc);
external function Boolean HasModIN();
external function Boolean IsPostcodeFormatCorrect(string);
external procedure NextM4Number(string,var string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function boolean ValidateIBAN(string);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external function Boolean AnyHistoryAfterInvoice(record IVVc);
external function Boolean AcceptanceRulesExists(Integer,string);
external procedure IVVc_PasteLoyaltyCardNr(var record IVVc,record LocalMachineBlock);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean GetPurchaseItem(string,string,var record PIVc);
external procedure IVSumup(var record IVVc,Boolean);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external procedure IVOpenPrepExists(string);
external function val GetINCostPrice(string,string,Boolean);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external function string 255 GetObjectFromRestIT(string);
external function string 255 CurDrawerCode(string);
external procedure GetSalesGroup(string,var string);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external function string 255 FindReservationCancellationTerms(string,Date,string);
external function LongInt DateDiff(Date,Date);
external updating function LongInt PUCheckIfSaveAllowed(var record PUVc,record PUVc,LongInt,LongInt);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);
external procedure PUCalcPerc(val,string,var val);
external procedure PUSumUp(var record PUVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function string 255 FindINObjects(string,string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean CheckInternetEnabler();
external procedure StripSpace(var string,string);
external function Boolean IsDigit(string);
external procedure ReverseString(string,var string);
external function Boolean CurencyCodeIsISO(string);
external function Boolean CustomerCountryCodeIsISO(string);
external function Boolean EInvoiceForCustomer(Integer,string,record CUVc);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
remote function boolean ArgEInvoiceBeingSentRemote(longint,string,Boolean);
external function Boolean DateLocked(Date,string);
external function Boolean DateWarned(Date,string);

global
function string 10 GetItemCostAcc(record INVc INr,string vecode)
begin
  string 10 CostAcc;
  record AccBlock ARb;
  record CostAccBlock CAb;
  record ITVc ITr;
  record VEVc VEr;

  BlockLoad(ARb);
  BlockLoad(CAb);
  VEr.Code = vecode;
  ReadFirstMain(VEr,1,true);
  switch (VEr.ExportFlag) begin
    case 0: CostAcc = INr.CostAcc;
    case 1: CostAcc = INr.EUCostAcc;
    case 2: CostAcc = INr.ExpCostAcc;
    case 3: CostAcc = INr.EUCostAcc;
    case 4: CostAcc = INr.ExpCostAcc;
  end;
  if (nonblank(CostAcc)) then begin
    goto LGetItemCostAcc;
  end;

  if (CAb.ItemGroupAccounts!=0 and nonblank(INr.Group)) then begin
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
      switch (VEr.ExportFlag) begin
        case 0: CostAcc = ITr.CostAcc;
        case 1: CostAcc = ITr.EUCostAcc;
        case 2: CostAcc = ITr.ExpCostAcc;
        case 3: CostAcc = ITr.EUCostAcc;
        case 4: CostAcc = ITr.ExpCostAcc;
      end;
      if (nonblank(CostAcc)) then begin
        goto LGetItemCostAcc;
      end;
    end;
  end;  
  if (nonblank(ARb.StockCostAcc)) then begin
    CostAcc = ARb.StockCostAcc;
    goto LGetItemCostAcc;
  end;   
  switch (VEr.ExportFlag) begin
    case 0: CostAcc = ARb.StockCostAcc;
    case 1: CostAcc = ARb.EUStockCostAcc;
    case 2: CostAcc = ARb.ExpStockCostAcc;
    case 3: CostAcc = ARb.EUStockCostAcc;
    case 4: CostAcc = ARb.ExpStockCostAcc;
  end;
  if (nonblank(CostAcc)) then begin
    goto LGetItemCostAcc;
  end;    

LGetItemCostAcc:;  
  GetItemCostAcc = CostAcc;
  return;
end;

global
function Boolean CheckAddr3CorrectforEInvoicing(string addr3)
begin
  Boolean res,addedf;
  string 255 tstr,c;
  Integer i;
  string 255 postcode,city;
  
  res = true;
  StripSpace(tstr,addr3);
  if (len(tstr)==len(addr3)) then begin
    res = false;
    goto LCheckAddr3CorrectforEInvoicing;
  end;  

  for (i=0;i<len(tstr);i=i+1) begin
    addedf = false;
    c = Mid(tstr,i,1);
    if (IsDigit(c)) then begin
      postcode = postcode & c;      
      addedf = true;
    end;
    if (c=="-") then begin
      postcode = postcode & c;      
      addedf = true;
    end;
    if (addedf==false) then begin
      i = len(tstr);
    end;
  end;  
  city = Right(addr3,len(addr3)-len(postcode));
  if (blank(postcode)) then begin
    res = false;
    goto LCheckAddr3CorrectforEInvoicing;
  end;  
  if (len(postcode)>9) then begin
    res = false;
    goto LCheckAddr3CorrectforEInvoicing;
  end;  
  for (i=0;i<len(postcode);i=i+1) begin
    c = Mid(postcode,i,1);
    if (IsDigit(c)==false) then begin
      res = false;
      goto LCheckAddr3CorrectforEInvoicing;
    end;
  end;
LCheckAddr3CorrectforEInvoicing:;  
  CheckAddr3CorrectforEInvoicing = res;
  return;
end;

global
function Boolean CheckCYBank1CorrectForEInvoicing(string bank1)
begin
  Boolean res,addedf;
  string 255 bankname,bankacc,c,tstr;
  Integer i;
  
  res = true;
  if (ValidateIBAN(bank1)) then begin
    goto LCheckCYBank1CorrectForEInvoicing;
  end;
  ReverseString(bank1,tstr);
  for (i=0;i<len(tstr);i=i+1) begin
    addedf = false;
    c = Mid(tstr,i,1);
    if (IsDigit(c)) then begin
      bankacc = bankacc & c;      
      addedf = true;
    end;
    if (c=="-") then begin
      bankacc = bankacc & c;      
      addedf = true;
    end;
    if (addedf==false) then begin
      i = len(tstr);
    end;
  end;  
  ReverseString(bankacc,bankacc);  
  bankname = Left(bank1,len(bank1)-len(bankacc));
  if (blank(bankname)) then begin
    res = false;
    goto LCheckCYBank1CorrectForEInvoicing;
  end;
  if (len(bank1)<=10) then begin
    res = false;
    goto LCheckCYBank1CorrectForEInvoicing;
  end;
  for (i=0;i<6;i=i+1) begin
    c = Mid(bankacc,i,1);
    if (IsDigit(c)==false) then begin
      res = false;
      goto LCheckCYBank1CorrectForEInvoicing;
    end;
  end;
  if (Mid(bankacc,6,1)!="-") then begin
    res = false;
    goto LCheckCYBank1CorrectForEInvoicing;
  end;
  for (i=7;i<len(bankacc);i=i+1) begin
    c = Mid(bankacc,i,1);
    if (IsDigit(c)==false) then begin
      res = false;
      goto LCheckCYBank1CorrectForEInvoicing;
    end;
  end;
LCheckCYBank1CorrectForEInvoicing:;  
  CheckCYBank1CorrectForEInvoicing = res;
  return;
end;

function Boolean ValidEInvoiceData_Sweden(record IVVc IVr,record CYBlock CYb,record CUVc CUr,record BaseCurBlock BCb,var LongInt errcode,var string errstr,var string gotofield)
begin
  Boolean res;
  Boolean testf;
  record EInvoiceBlock EIb;
  
  res = true;
  errstr = "";
  if (CUr.eInvRcvPref!=kEInvoiceRcvPreferenceElectronic) then begin
    goto LValidEInvoiceData_Sweden;
  end;
  if (CUr.eInvRcvPref==kEInvoiceRcvPreferenceElectronic and CUr.eInvAttachPDF) then begin
    if (blank(CUr.eMail) and blank (CUr.eMail)) then begin
      errcode = 20475;
      gotofield = "CustCode";
      res = false;
    end;
    goto LValidEInvoiceData_Sweden;
  end;
  
  if (CustomerCountryCodeIsISO(IVr.CustCode)==false) then begin
    errcode = 20590;
    gotofield = "CustCode";
    res = false;
    goto LValidEInvoiceData_Sweden;
  end;
/*  
  if (blank(IVr.CurncyCode)) then begin
    errcode = 1058;
    errstr = " " & UsetStr(1185);
    gotofield = "CurncyCode";
    res = false;
    goto LValidEInvoiceData_Sweden;
  end;
*/  
  if (CurencyCodeIsISO(IVr.CurncyCode)==false) then begin
    errcode = 20591;
    gotofield = "CurncyCode";
    res = false;
    goto LValidEInvoiceData_Sweden;
  end;
  if (BCb.BaseCur1!="SEK" and BCb.BaseCur1!="EUR") then begin
    errcode = 20670;
    gotofield = "SerNr";
    res = false;
    goto LValidEInvoiceData_Sweden;
  end;
  if (CUr.eInvRcvPref==kEInvoiceRcvPreferenceDefault) then begin 
    BlockLoad(EIb);
    if (EIb.RcvInvoicePref!=kEInvoiceRcvPreferencePaper) then begin 
      testf = true;
    end;
  end else begin
    if (CUr.eInvRcvPref!=kEInvoiceRcvPreferencePaper) then begin
      testf = true;
    end;
  end;
  if (testf) then begin
    if (blank(IVr.VATNr) and blank(CUr.RegNr1) and blank(CUr.RegNr2)) then begin
      errcode = 20592;
      gotofield = "VATNr";
      res = false;
      goto LValidEInvoiceData_Sweden;
    end;
  end;
  if (blank(CYb.VATNr)) and (blank(CYb.OrgNr)) and (blank(CYb.OrgNr2)) then begin
    errcode = 20593;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Sweden;
  end;
  if (CUr.FTax!=0 and (blank(CUr.RegNr1) and blank(CUr.RegNr2))) then begin
    errcode = 20671;
    gotofield = "VATNr"; //Customer Code field???
    res = false;
    goto LValidEInvoiceData_Sweden;
  end;
LValidEInvoiceData_Sweden:;  
  ValidEInvoiceData_Sweden = res;
  return;
end;

function Boolean ValidFiscalizationData_Slovenia(record IVVc IVr,var LongInt errcode,var string gotofield)
begin
  Boolean res;
  record CYABlock CYAb;
  record UserVc Userr;
  record CUVc ContactCUr;
  
  res = true;
  if (IVr.InvType!=kInvoiceTypeCash) then begin
    errcode = 21476;
    res = false;
    gotofield = "LocalMachineCode";
    goto LValidFiscalizationData_Slovenia;
  end;
  BlockLoad(CYAb);    
  if (blank(CYAb.MainPremiseCode)) then begin
    errcode = 21479;
    res = false;
    gotofield = "LocalMachineCode";
    goto LValidFiscalizationData_Slovenia;
  end;
  if (blank(IVr.MachineName)) then begin
    errcode = 21478;
    res = false;
    gotofield = "MachineName";
    goto LValidFiscalizationData_Slovenia;
  end;
  Userr.Code = IVr.SalesMan;
  ReadFirstMain(Userr,1,true);
  ContactCUr.Code = Userr.CustCode;
  ReadFirstMain(ContactCUr,1,true);
  if (blank(ContactCUr.VATNr)) then begin
    errcode = 21477;
    res = false;
    gotofield = "SalesMan";
    goto LValidFiscalizationData_Slovenia;
  end;
LValidFiscalizationData_Slovenia:;  
  ValidFiscalizationData_Slovenia = res;
  return;
end;

function Boolean ValidEInvoiceData_Slovenia(record IVVc IVr,record CYBlock CYb,record CUVc CUr,record BackupBlock Bkpb,
                                           record BaseCurBlock BCb,
                                           var LongInt errcode,var string gotofield)
begin
  Boolean res;
  record BankVc Bankr;
  record LocationVc Locr;
  record CountryVc Countryr;
  string 255 tstr;
  
  if (IVr.InvType==kInvoiceTypeCash) then begin
    res = ValidFiscalizationData_Slovenia(IVr,errcode,gotofield);
    goto LValidEInvoiceData_Slovenia;
  end;
  res = true;
  errcode = EInvoiceForCustomer3(0,IVr.CurncyCode,CUr);
  if (errcode!=0) then begin
    switch (errcode) begin
      case 5:
        if (IsStandardProduct==false) then begin
          if (IVr.OKFlag!=0) then begin
            errcode = 14681;
            gotofield = "SerNr";
            res = false;
            ClientRemoteAsync.OpenInternetEnablers;
            goto LValidEInvoiceData_Slovenia;
            res = false;
          end;
        end;
    end;
  end;
  if (blank(IVr.Addr1)) begin
    errcode = 35009;
    gotofield = "Addr1";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(IVr.Addr3)) begin
    errcode = 35009;
    gotofield = "Addr3";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;

  tstr = IVr.VATNr;
  if (blank(tstr)) begin
    tstr = CUr.VATNr;
  end;
  if (blank(tstr)) begin
    errcode = 35015;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  tstr = IVr.InvCountry;
  if (blank(tstr)) begin
    tstr = CUr.CountryCode;
  end;
  if (blank(tstr)) begin
    errcode = 35010;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  Countryr.Code = tstr;
  if (ReadFirstMain(Countryr,1,true)==false) begin
    errcode = 35010;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (nonblank(IVr.Location)) then begin
    Locr.Code = IVr.Location;
    if (ReadFirstMain(Locr,1,true)==false) begin
      errcode = 35017;
      gotofield = "VATNr";
      res = false;
      goto LValidEInvoiceData_Slovenia;
    end;
    if (blank(Locr.Addr2)) then begin
      errcode = 35017;
      gotofield = "VATNr";
      res = false;
      goto LValidEInvoiceData_Slovenia;
    end;
  end;
  if (blank(CYb.CompName)) then begin
    errcode = 35001;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CYb.Addr0)) then begin
    errcode = 35002;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CYb.Addr2)) then begin
    errcode = 35003;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CYb.CountryCode)) then begin
    errcode = 35004;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  Countryr.Code = CYb.CountryCode;
  if (ReadFirstMain(Countryr,1,true)==false) begin
    errcode = 35005;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CYb.VATNr)) then begin
    errcode = 20586;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CYb.OrgNr)) then begin
    errcode = 20586;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CUr.IBANCode))  begin
    errcode = 35012;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CUr.AccOperator)) begin
    errcode = 35013;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  if (blank(CUr.RegNr1)) begin
    errcode = 35016;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  Bankr.Code = CUr.AccOperator;
  if (ReadFirstMain(Bankr,1,true)==false) begin
    errcode = 35014;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Slovenia;
  end;
  
LValidEInvoiceData_Slovenia:;  
  ValidEInvoiceData_Slovenia = res;
  return;
end;

function Boolean ValidEInvoiceData_Finland(record IVVc IVr,record CYBlock CYb,record CUVc CUr,record BackupBlock Bkpb,
                                           record BaseCurBlock BCb,
                                           var LongInt errcode,var string gotofield)
begin
  Boolean res;
  Integer RcvInvoicePref;
  record EInvoiceBlock EIb;
  string 255 curncycode,einvoiceaccount;
  
  res = true;
  RcvInvoicePref = CUr.eInvRcvPref;
  if (RcvInvoicePref==kEInvoiceRcvPreferenceDefault) then begin
    BlockLoad(EIb);
    RcvInvoicePref = EIb.RcvInvoicePref;
  end;
  if (CUr.CustType==1) then begin
    RcvInvoicePref = kEInvoiceRcvPreferencePaper;
  end;
  errcode = EInvoiceForCustomer3(0,IVr.CurncyCode,CUr);
  if (errcode!=0) then begin
    switch (errcode) begin
      case 5:
        if (IsStandardProduct==false) then begin
          if (IVr.OKFlag!=0) then begin
            errcode = 14681;
            gotofield = "SerNr";
            res = false;
            ClientRemoteAsync.OpenInternetEnablers;
            goto LValidEInvoiceData_Finland;
            res = false;
          end;
        end;
    end;
  end;
  if (len(IVr.ClientContact)>35) then begin
    errcode = 20793;
    gotofield = "ClientContact";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  if (len(IVr.CustOrdNr)>35) then begin
    errcode = 20793;
    gotofield = "CustOrdNr";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  if (CheckCYBank1CorrectForEInvoicing(CYb.Bank1)==false) then begin
    errcode = 20584;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  einvoiceaccount = CUr.ANACode;
  switch (RcvInvoicePref) begin
    case kEInvoiceRcvPreferencePaper:
      if (blank(einvoiceaccount) and (CUr.CustType==0)) then begin
        errcode = 20587;
        gotofield = "VATNr";
        res = false;
        goto LValidEInvoiceData_Finland;
      end;    
    case kEInvoiceRcvPreferenceEMail:
      if (blank(CUr.eMail) and (CUr.CustType==0)) then begin
        errcode = 20587;
        gotofield = "VATNr";
        res = false;
        goto LValidEInvoiceData_Finland;
      end;    
    otherwise
      if (blank(einvoiceaccount)) then begin
        errcode = 20587;
        gotofield = "VATNr";
        res = false;
        goto LValidEInvoiceData_Finland;
      end;
  end;
  if (blank(CYb.VATNr)) then begin
    errcode = 20586;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  if (blank(CYb.OrgNr)) then begin
    errcode = 20586;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  if (RcvInvoicePref!=kEInvoiceRcvPreferencePaper and RcvInvoicePref!=kEInvoiceRcvPreferenceEMail) then begin
    if (blank(CYb.ANACode)) then begin
      errcode = 20585;
      gotofield = "VATNr";
      res = false;
     goto LValidEInvoiceData_Finland;
    end;
  end;
/*
not needed for APIX  
  if (blank(CYb.EInvoiceAccount)) then begin
    errcode = 20583;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
*/  
  if (blank(CYb.Bank1)) then begin
    errcode = 20598;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  if (blank(CYb.Addr0)) then begin
    errcode = 36120;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
//  if (blank(Bkpb.HTSConnectionTime)) then begin
//    errcode = 20599;
//    gotofield = "SerNr";
//    res = false;
//    goto LValidEInvoiceData_Finland;
//  end;
//  if (Bkpb.HTSBackgroundTimer<=0) then begin
//    errcode = 20599;
//    gotofield = "SerNr";
//    res = false;
//    goto LValidEInvoiceData_Finland;
//  end;
  if (CheckAddr3CorrectforEInvoicing(IVr.Addr3)==false) then begin
    errcode = 20582;
    gotofield = "Addr3";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  curncycode = IVr.CurncyCode;
  if (blank(curncycode)) then begin
    curncycode = BCb.BaseCur1;
  end;
/*  JJCUR
  if (blank(IVr.CurncyCode)) then begin
    errcode = 1582;
    gotofield = "CurncyCode";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
*/  
/*  
  if (IVr.CurncyCode!=BCb.BaseCur1) then begin
    errcode = 1582;
    gotofield = "CurncyCode";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
*/  
  if (CurencyCodeIsISO(curncycode)==false) then begin
    errcode = 20591;
    gotofield = "CurncyCode";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
  if (IVr.OKFlag!=0) then begin
    if (CheckInternetEnabler==false) then begin
      errcode = 14681;
      gotofield = "SerNr";
      res = false;
      goto LValidEInvoiceData_Finland;
    end;
  end;
  if (RcvInvoicePref!=kEInvoiceRcvPreferencePaper) or (CUr.CustType==0) then begin
    if (blank(IVr.VATNr)) then begin
      errcode = 20592;
      gotofield = "VATNr";
      res = false;
      goto LValidEInvoiceData_Finland;
    end;
    if (blank(CUr.ANACode)) then begin
      errcode = 20588;
      gotofield = "VATNr";
      res = false;
      goto LValidEInvoiceData_Finland;
    end;
  end;
  if (blank(IVr.Addr2)) or (blank(IVr.Addr3)) then begin
    errcode = 1058;
    gotofield = "Addr2";
    res = false;
    goto LValidEInvoiceData_Finland;
  end;
//  Not needed with new provider
//   if (nonblank(IVr.LangCode)) then begin
//     if (IVr.LangCode!="EN") and (IVr.LangCode!="FI") and (IVr.LangCode!="SE") then begin
//       errcode = 2246;
//       gotofield = "LangCode";
//       res = false;
//       goto LValidEInvoiceData_Finland;
//     end;
//   end;
LValidEInvoiceData_Finland:;  
  ValidEInvoiceData_Finland = res;
  return;
end;

function Boolean ValidEInvoiceData_Norway(record IVVc IVr,record CYBlock CYb,record CUVc CUr,record BaseCurBlock BCb,var LongInt errcode,var string errstr,var string gotofield)
begin
  Boolean res;
  
  res = true;
  errstr = "";
  if (CUr.eInvRcvPref!=kEInvoiceRcvPreferenceElectronic) then begin
    goto LValidEInvoiceData_Norway;
  end;
  if (CustomerCountryCodeIsISO(IVr.CustCode)==false) then begin
    errcode = 20590;
    gotofield = "CustCode";
    res = false;
    goto LValidEInvoiceData_Norway;
  end;
/*    
  if (blank(IVr.CurncyCode)) then begin
    errcode = 1058;
    errstr = " " & UsetStr(1185);
    gotofield = "CurncyCode";
    res = false;
    goto LValidEInvoiceData_Norway;
  end;
*/  
  if (CurencyCodeIsISO(IVr.CurncyCode)==false) then begin
    errcode = 20591;
    gotofield = "CurncyCode";
    res = false;
    goto LValidEInvoiceData_Norway;
  end;
  if (blank(IVr.VATNr)) and (blank(CUr.RegNr1)) and (blank(CUr.RegNr2)) then begin
    errcode = 20592;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Norway;
  end;
  if (blank(CYb.VATNr)) and (blank(CYb.OrgNr)) and (blank(CYb.OrgNr2)) then begin
    errcode = 20593;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Norway;
  end;
LValidEInvoiceData_Norway:;  
  ValidEInvoiceData_Norway = res;
  return;
end;

function Boolean ValidEInvoiceData_Latvia(record IVVc IVr,record CYBlock CYb,record CUVc CUr,record BaseCurBlock BCb,var LongInt errcode,var string gotofield)
begin
  Boolean res;
  
  res = true;
  errcode = -1;
  if (CUr.eInvRcvPref==kEInvoiceRcvPreferenceInternetBank) then begin
    if (blank(CUr.IBANCode)) then begin
      errcode = 40550;
      gotofield = "CustCode";
      res = false;
      goto LValidEInvoiceData_Latvia;
    end;
  end;
  if (blank(IVr.VATNr)) and (blank(CUr.RegNr1)) and (blank(CUr.RegNr2)) then begin
    errcode = 20592;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Latvia;
  end;
  if (blank(CYb.VATNr)) and (blank(CYb.OrgNr)) and (blank(CYb.OrgNr2)) then begin
    errcode = 20593;
    gotofield = "VATNr";
    res = false;
    goto LValidEInvoiceData_Latvia;
  end;
LValidEInvoiceData_Latvia:;
  ValidEInvoiceData_Latvia = res;
  return;
end;


global
function Boolean ValidEInvoiceData3(record IVVc IVr,record CUVc CUr,var LongInt errcode,var string errstr,var string gotofield)
begin
  Boolean res;
  record InternetEnablerBlock IEb;
  record CYBlock CYb;
  record BaseCurBlock BCb;
  record BackupBlock Bkpb;
  
  res = true;
  errcode = 0;
  if (IVr.NoEInvoice==0) then begin
    BlockLoad(IEb);
    errcode = EInvoiceingEnabled(0,IVr.CurncyCode,CUr);
    if (errcode==0) then begin
      BlockLoad(CYb);
      BlockLoad(BCb);
      BlockLoad(Bkpb);
      switch (IEb.RegInCountry) begin
        case 2:
          res = ValidEInvoiceData_Norway(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
        case 3:
          res = ValidEInvoiceData_Sweden(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
        case 4:
          res = ValidEInvoiceData_Finland(IVr,CYb,CUr,Bkpb,BCb,errcode,gotofield);
        case 26:
          res = ValidEInvoiceData_Norway(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
        case 99://HansaMail
          if (CUr.eInvRcvPref==kEInvoiceRcvPreferenceInternal) then begin
            goto LValidEInvoiceData;
          end;
          switch (CurrentCompany) begin
            case 24:
              res = ValidEInvoiceData_Norway(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
            case 39:
              res = ValidEInvoiceData_Sweden(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
            case 40:
              res = ValidEInvoiceData_Finland(IVr,CYb,CUr,Bkpb,BCb,errcode,gotofield);
            case 82:
              res = ValidEInvoiceData_Norway(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
          end;
        otherwise
          if (HasLocalization("FIN")) then begin
            res = ValidEInvoiceData_Finland(IVr,CYb,CUr,Bkpb,BCb,errcode,gotofield);
          end;
          if (HasLocalization("SWE")) then begin
            res = ValidEInvoiceData_Sweden(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
          end;
          if (HasLocalization("NOR")) then begin
            res = ValidEInvoiceData_Norway(IVr,CYb,CUr,BCb,errcode,errstr,gotofield);
          end;
          if (HasLocalization("SVN")) then begin
            res = ValidEInvoiceData_Slovenia(IVr,CYb,CUr,Bkpb,BCb,errcode,gotofield);
          end;
          if (HasLocalization("LVA")) then begin
            res = ValidEInvoiceData_Latvia(IVr,CYb,CUr,BCb,errcode,gotofield);
          end;
      end;
    end;
  end;
  if (res) then begin
    if (IsStandardProduct) then begin
//      res = ValidEInvoiceData_Standard(IVr,CUr,errcode,gotofield);
    end;
  end;
LValidEInvoiceData:;  
  ValidEInvoiceData3 = res;
  return;
end;

global
function Boolean ValidEInvoiceData2(record IVVc IVr,record CUVc CUr,var LongInt errcode,var string gotofield)
begin
  string 255 errstr;
  
  ValidEInvoiceData2 = ValidEInvoiceData3(IVr,CUr,errcode,errstr,gotofield);
  return;
end;

global
function Boolean ValidEInvoiceData(record IVVc IVr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  LongInt errcode2;
  string 255 errstr;
  
  res = ValidEInvoiceData3(IVr,CUr,errcode2,errstr,gotofield);
  errcode = errcode2;
  ValidEInvoiceData = res;
end;

function Boolean ValidInvoiceDataForVATLaw_Portuguese(record IVVc IVr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  val rval,rvalb1;
  Boolean testf;
  record CountryVc Countryr;

  res = true;
  if (blank(IVr.VATNr)) then begin
    errcode = 20275;
    gotofield = "VATNr";
    res = false;
    goto LValidInvoiceDataForVATLaw_Portuguese;
  end;
//  if (IVr.InvType!=kInvoiceTypeCash) and (IVr.InvType!=kInvoiceTypeCredit) and (IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
/*
do not put it back please
  if (IVr.InvType==kInvoiceTypeCash) then begin
//what is this code for ? 
    rval = IVr.Sum4;
    rvalb1 = IVr.BaseSum4;
    SubCashRows_IVVc(IVr,true,rval,rvalb1);
    SubPrePayments(IVr,rval,rvalb1);
    if (rval!=0) then begin
      errcode = 1958;
      gotofield = "PayDeal";
      res = false;
      goto LValidInvoiceDataForVATLaw_Portuguese;
    end;
  end;
*/
  testf = true;
  if (IVr.VATNr=="999999990") then begin testf = false; end;
  if (CUr.CustType==1) then begin
    if (IVr.Sum1<=1000) then begin
      if (blank(IVr.Addr1) and blank(IVr.Addr2) and blank(IVr.Addr3) and blank(IVr.InvAddr3) and blank(IVr.InvAddr4)) then begin
        testf = false;
      end;
    end;
  end else begin
    if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = false; end;
  end;
  if (testf) then begin
    testf = false;
    if (blank(IVr.Addr1) and blank(IVr.Addr2)) then begin
      gotofield = "Addr1";
      testf = true;
    end;
    if (blank(IVr.Addr3)) then begin
      gotofield = "Addr3";
      testf = true;
    end;
    if (blank(IVr.InvAddr3)) then begin
      gotofield = "InvAddr3";
      testf = true;
    end;
    if (blank(IVr.InvAddr4)) then begin
      gotofield = "InvAddr4";
      testf = true;
    end;
    if (testf) then begin
      errcode = 20276;
      res = false;
      goto LValidInvoiceDataForVATLaw_Portuguese;
    end;
  end;
  if (nonblank(IVr.InvAddr4)) then begin
    Countryr.Comment = IVr.InvAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "InvAddr4";
      goto LValidInvoiceDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(IVr.InvAddr4)) or (IVr.InvAddr4=="Portugal") then begin
    if (nonblank(IVr.Addr3)) then begin
      if (IsPostcodeFormatCorrect(IVr.Addr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "Addr3";
        goto LValidInvoiceDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (IVr.VATNr!="999999990") then begin
    if (nonblank(IVr.ShipAddr1) or nonblank(IVr.ShipAddr2) or nonblank(IVr.DelAddr3) or nonblank(IVr.DelAddr4)) then begin
      testf = false;
      if (blank(IVr.ShipAddr1) and blank(IVr.ShipAddr2)) then begin
        gotofield = "ShipAddr1";
        testf = true;
      end;
      if (blank(IVr.ShipAddr3)) then begin
        gotofield = "ShipAddr3";
        testf = true;
      end;
      if (blank(IVr.DelAddr3)) then begin
        gotofield = "DelAddr3";
        testf = true;
      end;
      if (blank(IVr.DelAddr4)) then begin
        gotofield = "DelAddr4";
        testf = true;
      end;
      if (testf) then begin
        errcode = 20276;
        res = false;
        goto LValidInvoiceDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (nonblank(IVr.DelAddr4)) then begin
    Countryr.Comment = IVr.DelAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "DelAddr4";
      goto LValidInvoiceDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(IVr.DelAddr4)) or (IVr.DelAddr4=="Portugal") then begin
    if (nonblank(IVr.ShipAddr3)) then begin
      if (IsPostcodeFormatCorrect(IVr.ShipAddr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "ShipAddr3";
        goto LValidInvoiceDataForVATLaw_Portuguese;
      end;
    end;
  end;

LValidInvoiceDataForVATLaw_Portuguese:;
  ValidInvoiceDataForVATLaw_Portuguese = res;
  return;
end;

function Boolean ValidInvoiceDataForVATLaw_Argentinean(record IVVc IVr,record CUVc CUr,var Integer errcode,var string errstr,var string gotofield)
begin
  Boolean res;
  record BaseCurBlock BCb;
  record MachineCashVc MCr;
  row MachineCashVc MCrw;
  Integer i,rwcnt;
  
  res = true;
  if (IVr.FiscalFlag!=0) then begin
    BlockLoad(BCb);
    if (blank(IVr.VATNr)) then begin
      errcode = 20275;
      gotofield = "VATNr";
      res = false;
      goto LValidInvoiceDataForVATLaw_Argentinean;
    end;
    if (blank(IVr.Addr0)) then begin
      errcode = 1058;
      gotofield = "Addr0";
      res = false;
      goto LValidInvoiceDataForVATLaw_Argentinean;
    end;
    if (blank(IVr.Addr1)) then begin
      errcode = 1058;
      gotofield = "Addr1";
      res = false;
      goto LValidInvoiceDataForVATLaw_Argentinean;
    end;
//    switch (ArgIVTypeLetter(IVr.OfficialSerNr)) begin
//      case "B":
//        if (IVr.BaseSum4>1000) then begin
//          errcode = 2697;
//          errstr = " 1000.00 " & BCb.BaseCur1;
//          gotofield = "BaseSum4";
//          res = false;
//          goto LValidInvoiceDataForVATLaw_Argentinean;
//        end;
//    end;
    if (blank(CUr.RegNr2)) then begin
      errcode = 20278;
      gotofield = "CustCode";
      res = false;
      goto LValidInvoiceDataForVATLaw_Argentinean;
    end;
    MCr.Code = IVr.MachineName;
    if (ReadFirstMain(MCr,1,true)) then begin
      rwcnt = MatRowCnt(MCr);
      if (rwcnt==0) then begin
        goto LValidInvoiceDataForVATLaw_Argentinean;
      end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(MCr,i,MCrw);
        if (CUr.RegNr2==MCrw.RegDef) then begin
          goto LValidInvoiceDataForVATLaw_Argentinean;
        end;
      end;
      errcode = 21582;
      gotofield = "CustCode";
      res = false;
      goto LValidInvoiceDataForVATLaw_Argentinean;
    end;
  end;
LValidInvoiceDataForVATLaw_Argentinean:;
  ValidInvoiceDataForVATLaw_Argentinean = res;
  return;
end;

global
function Boolean ValidInvoiceDataForVATLaw2(record IVVc IVr,record CUVc CUr,var Integer errcode,var string errstr,var string gotofield)
begin
  Boolean res;
  
  errstr = "";
  gotofield = "";
  errcode = 0;
  res = true;
  if (HasLocalization("ARG")) then begin
    res = ValidInvoiceDataForVATLaw_Argentinean(IVr,CUr,errcode,errstr,gotofield);
  end;
  if (HasLocalization("PRT")) then begin
    res = ValidInvoiceDataForVATLaw_Portuguese(IVr,CUr,errcode,gotofield);
  end;
LValidInvoiceDataForVATLaw2:;  
  ValidInvoiceDataForVATLaw2 = res;
  return;
end;

global
function Boolean ValidInvoiceDataForVATLaw(record IVVc IVr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  string 255 tstr;
  
  ValidInvoiceDataForVATLaw = ValidInvoiceDataForVATLaw2(IVr,CUr,errcode,tstr,gotofield);
  return;
end;

procedure DeductIVPrePay(record IVVc IVp,var val tp)
BEGIN
  Integer rwcnt,i;
  row IVVc IVrw;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==6) then begin
      tp = tp - IVrw.Sum;
    end;
  end;
  RETURN;
END;

function Boolean IVVcRecordInvalidateTest_Check(record IVVc IVr,var Integer errcode,LongInt check)
begin
  Boolean res;
  row IVVc IVrw;
  Integer i,rwcnt,primary;
  record CostAccBlock CAb;
  record MainStockBlock MSb;
  string 255 errstr;
  record INVc INr;
  Boolean testihf;
  
  res = true;
  BlockLoad(CAb);
  if (CAb.RetFIFOQue!=0) then begin
    res = false;
    errcode = 20558;
    goto LIVVcRecordInvalidateTest_Check;
  end;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin//could be better
    res = false;
    errcode = 20569;
    goto LIVVcRecordInvalidateTest_Check;
  end;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      if (nonblank(IVrw.ArtCode)) then begin
        if (ReadFirstItem(IVrw.ArtCode,INr,false,false)) then begin
          if (INr.ItemType==kItemTypeStocked) or (INr.ItemType==kItemTypeStructured) then begin
            testihf = true;
            i = rwcnt;
          end;
        end;
/*
        primary = ArtCodePrimaryCostModel(IVrw.ArtCode);
        switch (primary) begin
          case 0: ;
          case 9: ;
          otherwise
            res = 0;
            goto LIVVcRecordInvalidateTest_Check;
        end;
*/
      end;
    end;
  end;
  if (testihf) then begin
    BlockLoad(MSb);
    if (MSb.Chronology!=0) then begin
      if (ExistStockTrans(IVr.Location,CurrentDate,errcode,errstr,"IVVc",IVr.SerNr,MSb)) then begin
        errcode = 21300;
        res = false;
        goto LIVVcRecordInvalidateTest_Check;
      end;
    end;
    if (AnyHistoryAfterInvoice(IVr)) then begin
      errcode = 21301;
      res = false;
      goto LIVVcRecordInvalidateTest_Check;
    end;
  end;
LIVVcRecordInvalidateTest_Check:;  
  IVVcRecordInvalidateTest_Check = res;
  return;
end;

function Boolean UserCanInvalidateIV()
begin
  Boolean res,HasInvInvalid,HasIVInvalid;
  
  res = true;
  
  HasInvInvalid = UserCanAction("InvInvalid",true)==UserCanAction("InvInvalid",false);
  HasIVInvalid = UserCanAction("IVInvalid",true)==UserCanAction("IVInvalid",false);
  
  if (HasInvInvalid) then begin
    res = UserCanAction("InvInvalid",true);
  end;
  
  if (HasIVInvalid) then begin
    res = UserCanAction("IVInvalid",true);
  end;
  
  UserCanInvalidateIV = res;
end;

global
function LongInt IVVcRecordInvalidateTest(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record ARVc ARr;
  record DBLockBlock DBLb;
  val t;
  Integer errcode;
  
  res = 1;
  if (UserCanInvalidateIV==false) then begin
    res = 0;
    MessageBox(34500,"");
    goto LIVVcRecordInvalidateTest;
  end;
  if (IVr.Invalid!=0) then begin
    res = 0;
    goto LIVVcRecordInvalidateTest;
  end;
  if (IVr.OKFlag==0) then begin
    res = 0;
    MessageBox(34500,"");
    goto LIVVcRecordInvalidateTest;
  end;
  if (nonblank(IVr.CAE)) then begin
    res = 0;
    MessageBox(2911,"");
    goto LIVVcRecordInvalidateTest;
  end;
  if (HasLocalization("ARG")) then begin
    if (ArgEInvoiceBeingSentRemote(IVr.SerNr,IVr.OfficialSerNr,false)) then begin
      res = 0;
      MessageBox(2914,"");
      goto LIVVcRecordInvalidateTest;
    end;
  end;
  if (IVr.UpdStockFlag!=0) then begin
    if (IVVcRecordInvalidateTest_Check(IVr,errcode,long4)==false) then begin
      if (errcode>0) then begin
        MessageBox(errcode,"");
      end else begin
        MessageBox(34500,"");
      end;
      res = 0;
      goto LIVVcRecordInvalidateTest;
    end;
  end;
  BlockLoad(DBLb);
  if (IVr.OKFlag!=0) then begin
    if (IVr.TransDate<=DBLb.SLLock) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end else begin
        MessageBox(34500,"");
      end;
      res = 0;
      goto LIVVcRecordInvalidateTest;
    end;
    if (IVr.TransDate<=DBLb.SLWarn) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
    end;
  end;
  switch (IVr.InvType) begin
    case kInvoiceTypeNormalSpecialSales: 
      goto LkInvoiceTypeNormal;
    case kInvoiceTypeNormal:
LkInvoiceTypeNormal:;
      ARr.InvoiceNr = IVr.SerNr;
      t = IVr.Sum4;
      DeductIVPrePay(IVr,t);
      if (ReadFirstMain(ARr,1,true)) then begin
        if (ARr.RVal==t) then begin    
          IVr.Invalid = 1;
        end;  
      end else begin
        if (t==0) then begin    
          IVr.Invalid = 1;
        end else begin
          IVr.Invalid = 0;
          res = 0;
          MessageBox(34500,"");
        end;  
      end;
//      if (IVr.CredInv>0) then begin
//          res = 0;
//          MessageBox(34500,"");
//      end;
    case kInvoiceTypeCashInvoiceReceiptPRT:
      IVr.Invalid = 1;
    case kInvoiceTypeCash:
      IVr.Invalid = 1;
    case kInvoiceTypeCreditSpecialSales: 
      goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      if (IVr.UpdStockFlag==0) then begin
        IVr.Invalid = 1;
      end;
    case kInvoiceTypeInterest:
      ARr.InvoiceNr = IVr.SerNr;
      t = IVr.Sum4;
      if (ReadFirstMain(ARr,1,true)) then begin
        if (ARr.RVal==t) then begin    
          IVr.Invalid = 1;
        end;  
      end else begin
        if (t==0) then begin    
          IVr.Invalid = 1;
        end else begin
          IVr.Invalid = 0;
          res = 0;
          MessageBox(34500,"");
        end;  
      end;
    case kInvoiceTypeDownpayment:
      ARr.InvoiceNr = IVr.SerNr;
      t = IVr.Sum4;
      DeductIVPrePay(IVr,t);
      if (ReadFirstMain(ARr,1,true)) then begin
        if (ARr.RVal==t) then begin    
          IVr.Invalid = 1;
        end;  
      end else begin
        if (t==0) then begin    
          IVr.Invalid = 1;
        end else begin
          IVr.Invalid = 0;
          res = 0;
          MessageBox(34500,"");
        end;  
      end;
  end;
LIVVcRecordInvalidateTest:;
  if (res!=0 and IVr.Invalid==0) then begin
    res = 0;
    MessageBox(34500,"");
  end;
  if (res==1) then begin
    IVr.Status = kRecordStatusNone;
  end;
  IVVcRecordInvalidateTest = res;  
  RETURN;
END;

function Boolean PasteArtCodeToPU(var record PUVc PUr,Integer rownr,row IVVc IVrw)
BEGIN
  Boolean res;
  record CostAccBlock CostAccRec;
  record PIVc PIr;
  record INVc INr;
  row PUVc PUrw;
  Boolean chsum,chrsum;
  string 60 sz,msk,mskrep,pcstr,tstr,location;
  val t,p,s,t2;
  record SysFormatBlock SysFormatRec;
  string 200 varsubset;
  
  PUrw.ArtCode = IVrw.ArtCode;
  PUrw.Quant = IVrw.Quant;
  if (ReadFirstItem(PUrw.ArtCode,INr,true,true)) then begin
    BlockLoad(SysFormatRec);
    if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin INr.Code = PUrw.ArtCode; end;
    BlockLoad(CostAccRec);    
    pcstr = "";

    PUrw.SerialNr = IVrw.SerialNr;
    PUrw.Location = IVrw.Location;
    PUrw.Spec = IVrw.Spec;
    PUrw.UPrice = IVrw.FIFO;
    p = IVrw.FIFO;
    if (INr.PriceFactor!=0) then begin
      p = p/INr.PriceFactor;
    end;
    p = DivRateToBase1(PUr.CurncyCode,p,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);

    GetItemVATCode(PUrw.ArtCode,PUr.ExportFlag,tstr,false);
    PUrw.VATCode = tstr;
    PUrw.Coefficient = INr.UnitCoefficient;
    PUrw.ArtCode = INr.Code;
    PUrw.Spec = INr.Name;
    PUrw.Objects = FindINObjects(INr.Objects,INr.Group);
    PUrw.UPrice = p;
    PUrw.UnitXval = INr.Width;
    PUrw.UnitYval = INr.Height;
    PUrw.UnitZval = INr.Depth;
    PUrw.VATCode = INr.VATCode;
    t2 = MulRateToBase1(PUr.CurncyCode,p,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
    PUCalcPerc(t2,PUrw.CustomsCost,t2);
    pcstr = ValToString(t2,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    PUrw.CustomsCost = pcstr;
    PUrw.BasePrice = INr.UPrice1;
    tstr = "0";
    PUrw.Extra = tstr;
    location = PUrw.Location;
    if (blank(location)) then begin
      location = PUr.Location;
    end;
    GetPurchaseItem(PUrw.ArtCode,location,PIr);
    if (PIr.PIFactor!=0) then begin
      PUrw.UPrice = PUrw.UPrice/PIr.PIFactor;
      PUrw.BasePrice = PUrw.BasePrice/PIr.PIFactor;
      PUrw.PIFactor = PIr.PIFactor;
    end;
    PUrw.CredAcc = GetItemCostAcc(INr,PUr.VECode);
    MatRowPut(PUr,rownr,PUrw);
    chrsum = true;
    res = true;
  end;
  if (chrsum) then begin
    PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                    PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                    PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                    PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
    PUrw.CostPrice = p;
    PUrw.Sum = s;
    chsum = true;
  end;
  MatRowPut(PUr,rownr,PUrw);    
  if (chsum) then begin
    PUSumUp(PUr);
  end;
  PasteArtCodeToPU = res;
  RETURN;
END;

function Boolean OrgIVFromOrder(LongInt credinv)
BEGIN
  Boolean res;
  record IVVc IVr;
  
  IVr.SerNr = credinv;
  if (ReadFirstMain(IVr,1,true)) then begin
    if (IVr.OrderNr!=-1) then begin
      res = true;
    end;
  end;
  OrgIVFromOrder = res;
  RETURN;
END;

global
updating function LongInt PUFromCreditNote(var record IVVc IVr,Boolean savef)
BEGIN
  LongInt res;
  record PUVc PU2r;
  record PUVc PUr;
  row PUVc PUrw;
  row IVVc IVrw;
  Integer i,rwcnt; 
  Integer purwcnt; 
  record INVc INr;
  string 255 warning,inwarn;
  record ModuleBlock ModuleRec;
  
  res = 0;
  BlockLoad(ModuleRec);
  if (ModuleRec.PUFromCredUpdStock==0) then begin goto LPUFromCreditNote; end; 
  if (OrgIVFromOrder(IVr.CredInv)) then begin goto LPUFromCreditNote; end; 
  if (true) then begin
    IVr.UpdStockFlag = 0;
    RecordNew(PUr);
    PUr.Location = IVr.Location;
    PUr.CurncyCode = IVr.CurncyCode;
    PUr.FrRate = IVr.FrRate;
    PUr.ToRateB1 = IVr.ToRateB1;
    PUr.ToRateB2 = IVr.ToRateB2;
    PUr.BaseRate1 = IVr.BaseRate1;
    PUr.BaseRate2 = IVr.BaseRate2;
    PUr.Objects = IVr.Objects;
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;I=I+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.FIFO!=0) and (IVrw.Quant!=0) and ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent)) then begin
        if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
          if (INr.ItemType==1) then begin
            ClearRow(PUr,PUrw,1);
            if (PasteArtCodeToPU(PUr,purwcnt,IVrw)) then begin
              purwcnt = purwcnt + 1;
            end;
          end;
        end;
      end;
    end;
    if (MatRowCnt(PUr)==0) then begin goto LPUFromCreditNote; end;
    if (PUr.SerNr==-1) then begin
      PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
    end;
    if (PUr.SerNr!=-1) then begin
      PUr.OKFlag = 1;
      if (savef) then begin
        if (RecordStore(PUr,false)) then begin end;
      end else begin
        res = PUCheckIfSaveAllowed(PUr,PU2r,1,0);
      end;
    end;
  end;
LPUFromCreditNote:;
  PUFromCreditNote = res;
  RETURN;
END;

global
function Integer TestCreditNoteTerms(record IVVc CreditIVp,var string errstr)
begin
  Integer res;
  record IVVc orgIVr;
  record IVVc IVr;
  Boolean found;
  record CNDVc CNDr;
  row CNDVc CNDrw;
  record CUVc CUr;
  Integer i,rwcnt;
  string 255 cnterm;
  val cntermprc,totcredit,totcreditallowed;
  record JobVc Jobr;
  
  errstr = "";
  res = 0;
  if (CreditIVp.JobNr>0) then begin
    Jobr.SerNr = CreditIVp.JobNr;
    if (ReadFirstMain(Jobr,1,true)) then begin
      cnterm = FindReservationCancellationTerms(Jobr.CUCode,Jobr.TransDate,Jobr.ResStatus);
      if (blank(cnterm)) then begin
        goto LTestCreditNoteTerms;
      end;
      CNDr.Code = cnterm;
      if (ReadFirstMain(CNDr,1,true)) then begin
        rwcnt = MatRowCnt(CNDr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CNDr,i,CNDrw);
          if (DateDiff(Jobr.TransDate,CurrentDate)<=CNDrw.Days) then begin
            cntermprc = CNDrw.Percentage;
            i = rwcnt;
          end;
        end;
        if (cntermprc!=0) then begin  
          totcredit = CreditIVp.Sum4;
          orgIVr.SerNr = CreditIVp.CredInv;
          ReadFirstMain(orgIVr,1,true);
          found = true;
          IVr.CredInv = CreditIVp.CredInv;
          while (LoopKey("CredInv",IVr,1,found)) begin
            if (IVr.CredInv!=CreditIVp.CredInv) then begin found = false; end;
            if (found) then begin
              if (IVr.SerNr!=CreditIVp.SerNr) then begin
                if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                  totcredit = totcredit + IVr.Sum4;
                end;
              end;
            end;
          end;
          if (cntermprc>0) then begin
            totcreditallowed = (orgIVr.Sum4*cntermprc)/100;
          end else begin
            totcreditallowed = orgIVr.Sum4 + (orgIVr.Sum4*cntermprc)/100;
          end;
          if (totcredit>totcreditallowed) then begin
            res = 1726;
            errstr = " " & totcreditallowed & ". ";
            errstr = errstr & USetStr(1727)  & " " & totcredit - CreditIVp.Sum4;
          end;
        end;
      end;
    end;
  end;
LTestCreditNoteTerms:;  
  TestCreditNoteTerms = res;
  return;
end;

global
function LongInt IVVcRecordDefaults(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  val fr,to1,to2,br1,br2;
  string 255 tstr,tstr1,tstr2;
  record IIBlock IIRec;
  record AccBlock ARAccRec;
  record UserVc USr;
  record CUVc CUr;
  Date blankd,td,td1;
  record IVVc lIVr;
  record CYBlock CYb;
 
  BlockLoad(ARAccRec);      
  BlockLoad(IIRec);
  BlockLoad(CYb);
  IVr.SerNr = -1;
  IVr.InvType = kInvoiceTypeNormal;
  IVr.ARonTR = ARAccRec.ARonTR;
  IVr.InvDate = CurrentDate;
  IVr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");
  end;
  IVr.PayDate = blankd;
  IVr.CustCat = "";
  IVr.Prntdf = 0;
  IVr.QTNr = -1;
  IVr.SVONr = -1;
  IVr.OrderNr = -1;
  IVr.RetNr = -1;
  IVr.CredInv = -1;
  IVr.CredMark = "";
  IVr.ExportFlag = 0;
  IVr.OKFlag = 0;
  IVr.InstallmentInv = 0;
  IVr.IntCode = IIRec.IntRate;
  IVr.InclVAT = ARAccRec.BasePriceInclVAT;
  IVr.NoTAXonVAT = ARAccRec.NoTAXonVAT;
  IVr.TotalwoTAX = ARAccRec.TotalwoTAX;
  IVr.ThirdPartyBillMark = CYb.OutsourcedtoAccBureaux;
//  IVr.ARAcc = ARAccRec.ARAcc; this should be taken either from customer category or settings
  IVr.PriceList = "";
  IVr.PayDeal = "";
  IVr.Objects = "";
  GetCurUser(USr);
  IVr.Objects = USr.PersObjx;
  IVr.InvComment = "";
  tstr = IVr.CurncyCode;
  GetFullCurncyRate(tstr,IVr.TransDate,fr,to1,to2,br1,br2);
  IVr.CurncyCode = tstr;
  IVr.FrRate = fr;
  IVr.ToRateB1 = to1; 
  IVr.ToRateB2 = to2;
  IVr.BaseRate1 = br1;
  IVr.BaseRate2 = br2;    
  IVr.CalcFinRef = "";
  IVr.LastRemndr = -1;
  IVr.LastRemDate = blankd;
  IVr.OurContact = USr.CurOurContact;
  IVr.Location = USr.Location;
  IVr.SalesMan = USr.Code;
  GetSalesGroup(IVr.SalesMan,tstr);
  IVr.SalesGroup = tstr;
  IVr.Sum0 = blankval;
  IVr.Sum1 = blankval;
  IVr.Sum2 = blankval;
  IVr.Sum3 = blankval;
  IVr.Sum4 = blankval;
  IVr.DiscSum = blankval;
  IVr.DiscPerc = blankval;
  IVr.TotGP = blankval;
  IVr.RecValue = blankval;
  IVr.RetValue = blankval;
  IVr.RetnValue = blankval;  
  IVr.UpdStockFlag = ARAccRec.InvUpdStock;
  if (IsStandardProduct and HasModIN==false) then begin
    IVr.UpdStockFlag = 0;
  end;
  IVr.FrItem = "";
  IVr.OrgCust = "";
  IVr.FrObjects = "";
  IVr.FrBase = blankval;
  IVr.FrPrice = blankval;
  IVr.FrGP = blankval;
  IVr.FrGPPercent = blankval;
  IVr.BaseSum4 = blankval;
  IVr.TotQty = blankval;
  IVr.TotWeight = blankval;
  IVr.TotVolume = blankval;            
  IVr.Commision = blankval;      
  IVr.AuthorizationCode = "";
  IVr.OfficialSerNrSerie = "";
  IVr.Invalid = 0;
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.IntRate!=0) then begin IVr.IntCode = CUr.IntRate; end;
  end;
  if (HasLocalization("POL")) then begin
    switch (CUr.IPBookVAT) begin
      case 1:
        IVr.IPBookVAT = CUr.IPBookVAT;
      case 2:
        IVr.IPBookVAT = 0;
      otherwise
        IVr.IPBookVAT = ARAccRec.IPBookVAT;
    end;
  end else begin
    IVr.IPBookVAT = ARAccRec.IPBookVAT;  
  end;
  IVr.TerminalID = CurTerminalID;
  IVr.BranchID = CurBranchID;
  IVr.MachineName = CurMachineName;
  IVr.DrawerCode = CurDrawerCode(IVr.MachineName);
  tstr = GetObjectFromRestIT(IVr.MachineName);
  if ((nonblank(IVr.Objects)) and (nonblank(tstr))) then begin
    if (SetInSet(tstr,IVr.Objects)==false) then begin
      IVr.Objects = IVr.Objects & "," & tstr;
    end;
  end else begin
    if (blank(IVr.Objects) and nonblank(tstr)) then begin 
      IVr.Objects = tstr;
    end; 
  end;
  IVr.FiscalDeviceSeqNr = -1;
  if (SingleUserMode) then begin
    if (IsStandardProduct) then begin
      if (HasLocalization("POL")) then begin
        lIVr.OfficialSerNr = "ZZZZZZZZZZZZZZZZZZZ";
        if (ReadLastKey("OfficialSerNr",lIVr,1,false)) then begin
          FindNextIVVcOfficialSerialNr(IVr);
          if (blank(IVr.OfficialSerNr)) then begin
            NextM4Number(lIVr.OfficialSerNr,IVr.OfficialSerNr);
          end;
        end;
        if (blank(IVr.OfficialSerNr)) then begin
          IVr.OfficialSerNr = "1";
        end;
      end;
    end;
  end;    
  IVr.Status = kRecordStatusNone;
  IVVcRecordDefaults = res;  
  RETURN;
END;

global
procedure IVVcRecordDuplicateDo(var record IVVc IVr,Boolean refreshloyaltydata,Boolean warningf)
BEGIN
  string 255 tstr;
  record UserVc USr;
  Date blankd;
  val fr,to1,to2,br1,br2;
  Integer i,rwcnt;
  row IVVc IVrw;
  val fiforowval,fifo;
  record ModuleBlock OptFeatRec;
  record CUVc CUr;
  record INVc INr;
  record CreditLimitBlock CLb;
  Boolean limitdaysf,testf;
  val bal,limit;
  record IVVc lIVr;
  record AccBlock ARAccRec;
  record CYBlock CYb;
 
  BlockLoad(CYb); 
  BlockLoad(ARAccRec);
  BlockLoad(OptFeatRec);
  IVr.SerNr = -1;
  IVr.InvDate = CurrentDate;
  IVr.TransDate = CurrentDate;
  IVr.ThirdPartyBillMark = CYb.OutsourcedtoAccBureaux;
  if (SingleUserMode) then begin
    IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,IVr.LangCode);
  end;  
  IVr.ServiceDelDate = blankd;
  IVr.QTNr = -1;
  IVr.Prntdf = 0;
  IVr.SVONr = -1;
  IVr.OrderNr = -1;
  IVr.RetNr = -1;
//  IVr.CredInv = -1; // why ? 
//  IVr.CredMark = "";
  IVr.TaxAuthID = "";
  if (HasLocalization("BOL")) then begin
    IVr.TaxAuthIDCC = FindTaxAuthIDControlCode("",IVr);
  end else begin 
    IVr.TaxAuthIDCC = "";
  end;
  IVr.OKFlag = 0;
  IVr.DisputedFlag = 0;
  GetCurUser(USr);
  IVr.OurContact = USr.CurOurContact;
  IVr.CalcFinRef = "";
  PastePDInInv(IVr,"",false);
  IVr.LastRemndr = -1;
  IVr.LastRemDate = blankd;
  tstr = IVr.CurncyCode;
  GetFullCurncyRate(tstr,IVr.TransDate,fr,to1,to2,br1,br2);
  IVr.CurncyCode = tstr;
  IVr.FrRate = fr;
  IVr.ToRateB1 = to1; 
  IVr.ToRateB2 = to2;
  IVr.BaseRate1 = br1;
  IVr.BaseRate2 = br2;  
  IVr.DiscSum = blankval;
  IVr.DiscPerc = blankval;
  IVr.RecValue = blankval;
  IVr.RetValue = blankval;
  IVr.LocOKNr = blankval;
  IVr.RetnValue = blankval;      
  IVr.Invalid = 0;
  IVr.CredManNr = -1;
  IVr.VINr = -1;  
  IVr.Invalid = 0;
  IVr.PrintDate = "";
  IVr.InvalidDate = "";
  IVr.InvalidTime = "";
  IVr.InvalidBy = "";
  IVr.PlanSendDate = blankd;
  IVr.PlanArrDate = blankd;
  IVr.PlanSendTime = "";
  IVr.PlanArrTime = "";
  IVr.TaxAdminServSignatureTimeStamp = "";      
  IVr.TaxAdminServCertificateNr = "";      
  IVr.TaxAdminServSeal = "";      
  IVr.TaxAdminReceiptNr = "";      
  IVr.TaxAuthReceiptDate = "";      
  IVr.TaxAuthReceiptTime = "";      
  IVr.OfficialSerNrSerie = "";
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
/*
no way of making credit notes ? 
      case kInvoiceRowTypeDownpayment:    
        MatRowDelete(IVr,i);
        i = i-1;
        if (IVrw.VoidedRowNr>=0) then begin
          MatRowDelete(IVr,IVrw.VoidedRowNr);     
          i = i-1;
        end;
*/
      case kInvoiceRowTypeVoid:    
        MatRowDelete(IVr,i);
        i = i-1;
        if (IVrw.VoidedRowNr>=0) then begin
          MatRowDelete(IVr,IVrw.VoidedRowNr);
          i = i-1;
        end;
      case kInvoiceRowTypeLoyaltyPointsPayment:    
        MatRowDelete(IVr,i);
        i = i-1;
      case kInvoiceRowTypeGiftVoucherPayment:    
        MatRowDelete(IVr,i);
        i = i-1;
      case kInvoiceRowTypeCashPayment:    
        MatRowDelete(IVr,i);
        i = i-1;
      case kInvoiceRowTypeCreditCardPayment:    
        MatRowDelete(IVr,i);
        i = i-1;
      otherwise
        testf = false;
        fifo = IVrw.FIFO;
        fiforowval = IVrw.FIFORowVal;
        IVrw.FIFO = blankval;
        IVrw.FIFORowVal = blankval;
        IVrw.OrdNr = -1;
        IVrw.RetRow = -1;
        if (OptFeatRec.PUFromCredUpdStock!=0) then begin//special feature for Lith
          IVrw.FIFO = fifo;
          IVrw.FIFORowVal = fiforowval;
        end;
        IVrw.AuthorizationCode = "";
        if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (IVrw.CreditedRow<0) then begin
            IVrw.CreditedRow = i;//cleared on save, update
          end;
        end;
        if (IVr.InvType!=kInvoiceTypeCredit) and (IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
          if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) then begin
            IVrw.BasePrice = GetINCostPrice(IVr.PriceList,IVrw.ArtCode,true);
            testf = true;
          end;
        end;
        MatRowPut(IVr,i,IVrw);
        if (testf) then begin
          IVDchsum(IVr,i);
        end;
        if (warningf) then begin
          if (ReadFirstItem(IVrw.ArtCode,INr,true,false)) then begin
          end;
          if (INr.Terminated!=0) then begin
            MessageBox(1266,INr.Code);
          end;
        end;
    end;
  end;

  IVr.AuthorizationCode = "";
  IVSumup(IVr,true);            
  IVOpenPrepExists(IVr.CustCode);
  IVr.MachineName = CurMachineName;
  IVr.TerminalID = CurTerminalID;
  IVr.BranchID = CurBranchID;
  IVr.DrawerCode = CurDrawerCode(IVr.MachineName);
  tstr = GetObjectFromRestIT(IVr.MachineName);
  if ((nonblank(IVr.Objects)) and (nonblank(tstr))) then begin
    if (SetInSet(tstr,IVr.Objects)==false) then begin
      IVr.Objects = IVr.Objects & ",";
    end;
  end;
  if (SetInSet(tstr,IVr.Objects)==false) then begin
    IVr.Objects = IVr.Objects & tstr;
  end;
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  if (HasLocalization("POL")) then begin
    switch (CUr.IPBookVAT) begin
      case 1:
        IVr.IPBookVAT = CUr.IPBookVAT;
      case 2:
        IVr.IPBookVAT = 0;
      otherwise
        IVr.IPBookVAT = ARAccRec.IPBookVAT;
    end;
  end else begin
    IVr.IPBookVAT = ARAccRec.IPBookVAT;  
  end;
  if (warningf) then begin
    BlockLoad(CLb);
    if (nonblank(CUr.WarnText1)) then begin
      MessageBox(0,CUr.WarnText1);
    end;
    if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
      if (CLb.IVPaste==1) then begin
        if (limitdaysf) then begin
          MessageBox(0,USetStr(22260));
        end;
        if (limit>0) then begin
          if (bal>limit) then begin
            MessageBox(0,USetStr(1164));
          end;
        end;
      end;
    end;
  end;
  IVr.OfficialSerNr = "";
  IVr.OfficialSerNr2 = "";
  if (SingleUserMode) then begin
    if (IsStandardProduct) then begin
      if (HasLocalization("POL")) then begin
        lIVr.OfficialSerNr = "ZZZZZZZZZZZZZZZZZZZ";
        if (ReadLastKey("OfficialSerNr",lIVr,1,false)) then begin
          FindNextIVVcOfficialSerialNr(IVr);
//          NextM4Number(lIVr.OfficialSerNr,IVr.OfficialSerNr);
        end;
      end;
    end;
  end;
  IVr.CAE = "";
  IVr.CAEAFlag = 0;
  IVr.CAEExpiry = blankd;
  IVr.CAEAStartDate = blankd;
  IVr.CAEAExpiryDate = blankd;
  IVr.Hash = "";
  IVr.HashKeyVersion = 0;
  ReplacePerceptionTaxesRows_IVVc(IVr);
  IVSumup(IVr,true);  
  if (Importing==false) then begin
    if (DateLocked(IVr.TransDate,"IVVc")) then begin
      MessageBox(1046,"");
    end else begin
      if (DateWarned(IVr.TransDate,"IVVc")) then begin
        MessageBox(1045,"");
      end;
    end;  
  end;
  WarnFutureDate(true,IVr.TransDate);
  WarnFutureDate(true,IVr.InvDate);
  if (TouchScreenInterface) then begin
    IVr.FiscalFlag = 0;
  end;
  IVr.FiscalDeviceSeqNr = -1;
  if (refreshloyaltydata) then begin 
    IVr.LoyaltyCardNr = "";
    IVr.LCMLevel = "";
    IVr.Points = 0;
  end;
  IVr.Status = kRecordStatusNone;
  IVr.FInvExpFlag = 0;
  RETURN;
END;
  
global
function LongInt IVVcRecordDuplicate(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  IVVcRecordDuplicateDo(IVr,false,true);
  if (IsEnterprise) then begin
    AutomatedSales("HasModCO+Copy_IVVc",kAutomatedSalesTagRandom);
  end;
  IVVcRecordDuplicate = res;
  RETURN;
END;

global
function LongInt IVVcRecordInIndex(record IVVc IVr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (IVr.OKFlag!=0) or (IVr.Invalid!=0) then begin 
    if (indexname=="OpenSerNr")  then begin res = 0; end;
    if (indexname=="OpenInvDate")  then begin res = 0; end;
    if (indexname=="OpenCustCode")  then begin res = 0; end;
    if (indexname=="OpenName")  then begin res = 0; end;
  end;
  if (IVr.OKFlag==0) or (IVr.Invalid!=0) or (IVr.InvType!=kInvoiceTypeCash) then begin 
    if (indexname=="TaxAdminServSeal")  then begin res = 0; end;
  end;
  if (IVr.Invalid!=0) then begin 
    if (indexname=="OpenOfficialSerNr2")  then begin res = 0; end;
  end;
  IVVcRecordInIndex = res;
  return;
end;

global
updating procedure IVVc_LinkRecords(record IVVc IVr,string rlinkfilename,string rlink)
begin
  Integer compnr;
  record CheckVc Checkr;
  
  switch (rlinkfilename) begin
    case "CheckVc":
      compnr = UnpackRecordLink(rlink,Checkr);
      CreateRecordLink(Checkr,CurrentCompany,IVr,CurrentCompany);  
      CreateRecordLink(IVr,CurrentCompany,Checkr,CurrentCompany);  
  end;
  return;
end;
