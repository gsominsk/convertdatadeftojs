external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external procedure GetCostModel(record INVc,record CostAccBlock,var record ITVc,var Integer,var Integer,Boolean);
external function Integer WAPerLocation(record INVc,record ITVc,record CostAccBlock);
external function Integer GetFIFOPerSerialNr(record INVc,record ITVc,record CostAccBlock);
external function Integer FIFOPerLocation(record INVc,record ITVc,record CostAccBlock);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function LongInt ItemHistVcRecordInIndex(record ItemHistVc ItemHistr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (ItemHistr.RemQty==0) then begin 
    if (indexname=="ActiveQty")  then begin res = 0; end;
    if (indexname=="ActiveLocQty")  then begin res = 0; end;
    if (indexname=="ActiveSerialNr")  then begin res = 0; end;
  end;
  if (ItemHistr.Invalid!=0) then begin
    if (indexname=="ActiveQty")  then begin res = 0; end;
    if (indexname=="ActiveLocQty")  then begin res = 0; end;
    if (indexname=="ActiveSerialNr")  then begin res = 0; end;
  end;
  if (indexname=="FutArtFile") then begin
    if (ItemHistr.StockAffectf==1 or Left(ItemHistr.FileName,3)!="Fut") then begin
      res = 0;
    end;
  end;
  if (indexname=="SerialNr") then begin
    if (blank(ItemHistr.SerialNr)) then begin res = 0; end;
  end;
  if (indexname=="ArtCodeSerialNr") then begin
    if (blank(ItemHistr.SerialNr)) then begin res = 0; end;
  end;
  if (indexname=="ActiveSerialNr") then begin
    if (blank(ItemHistr.SerialNr)) then begin res = 0; end;
  end;
  ItemHistVcRecordInIndex = res;
  RETURN;
END;

global
function LongInt ItemHistVcRecordImport(var record ItemHistVc IHr,record ItemHistVc IH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  string 10 curcode;
  val t,fr,to1,to2,br1,br2;
  record INVc INr;
  record ITVc ITr;
  record CostAccBlock CAb;
  Integer primary,queuecostmodel;
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    GetFullCurncyRate(curcode,IHr.TransDate,fr,to1,to2,br1,br2);
    B1ToB2ValRM(IHr.TotCostPrice,br1,br2,t,GetCostRoundModeRB);
    IHr.TotCostPrice = t;
    B1ToB2ValRM(IHr.RemCostPrice,br1,br2,t,GetCostRoundModeRB);
    IHr.RemCostPrice = t;
    B1ToB2ValRM(IHr.WATotCost,br1,br2,t,GetCostRoundModeRB);
    IHr.WATotCost = t;
    B1ToB2ValRM(IHr.CPTotCost,br1,br2,t,GetCostRoundModeRB);
    IHr.CPTotCost = t;
    B1ToB2ValRM(IHr.BPTotCost,br1,br2,t,GetCostRoundModeRB);
    IHr.BPTotCost = t;
    B1ToB2ValRM(IHr.WATotCostPerLoc,br1,br2,t,GetCostRoundModeRB);
    IHr.WATotCostPerLoc = t;
    B1ToB2ValRM(IHr.CPTotCostPerLoc,br1,br2,t,GetCostRoundModeRB);
    IHr.CPTotCostPerLoc = t;
    B1ToB2ValRM(IHr.BPTotCostPerLoc,br1,br2,t,GetCostRoundModeRB);
    IHr.BPTotCostPerLoc = t;
  end;
  switch (ImportingRegisterTag) begin
    case "ItemHistVc":
      BlockLoad(CAb);
      INr.Code = IHr.ArtCode;
      ReadFirstMain(INr,1,true);
      ITr.Code = INr.Group;
      ReadFirstMain(ITr,1,true);
      GetCostModel(INr,CAb,ITr,primary,queuecostmodel,false);

      IHr.PrimaryCostModel = primary;
      IHr.QueuedCostModel = queuecostmodel;
      IHr.FIFOPerLocation = FIFOPerLocation(INr,ITr,CAb);
      IHr.ItemType = INr.ItemType;
      IHr.FIFOPerSerialNr = GetFIFOPerSerialNr(INr,ITr,CAb);
      IHr.NoNLCostOnShip = CAb.NoNLCostOnShip;
      IHr.WAPerLocation = WAPerLocation(INr,ITr,CAb);
      IHr.WABase2 = CAb.WABase2;
      IHr.UpdWeightAvFromRetPU = CAb.UpdWeightAvFromRet;
      IHr.UpdWeightAvFromRet = CAb.UpdWeightAvFromRetPU;

  end;
  ItemHistVcRecordImport = res;
  return;
end;

function val LastItemHisSerNrPerLoc(string location)
begin
  val res;
  record ItemHistVc IHr;
  
  res = 0;
  IHr.Location = location;
  if (ReadLastKey("SerNrPerLoc",IHr,1,false)) then begin
    if (IHr.Location==location) then begin
      res = IHr.SerNrPerLoc;
    end;
  end;
  LastItemHisSerNrPerLoc = res;
  return;
end;

global
function LongInt ItemHistVcRecordSave(var record ItemHistVc IHr,record ItemHistVc IH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  IHr.SerNrPerLoc = LastItemHisSerNrPerLoc(IHr.Location) + 1;
  ItemHistVcRecordSave = res;
  return;
end;

global
function LongInt SerBalVcRecordInIndex(record SerBalVc SerBalr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (SerBalr.Quant==0) then begin 
    if (indexname=="ActiveSerial")  then begin res = 0; end;
  end;
  SerBalVcRecordInIndex = res;
  return;
end;
