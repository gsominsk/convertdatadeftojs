external procedure QTDchsum(record QTVc,Integer);
external updating procedure DeletePlannedPayment(string,LongInt,LongInt);
external updating procedure QTCreatePlannedPayment(record QTVc);
external procedure ReplacePerceptionTaxesRows_QTVc(var record QTVc);
remote updating function Boolean BA_QTMinMarkupWarning(record QTVc,var Integer);
external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function Boolean IsPostcodeFormatCorrect(string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean CheckPDExists(string);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external function Boolean TestNextOfficialSerialNr_ProformaQTVc(row LegalInvNrBlock,string,record QTVc,Boolean);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external procedure FindNextProformaQTVcOfficialSerialNr(var record QTVc);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function string 60 AddObjectToObjectList(string,string);
external function Integer VerifyTaxTemplateCode(string,var string);
external function Integer VerifySalesmen(string,var string);
external function Boolean AcceptanceRulesExists(Integer,string);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure TaxMatrixConvertB1ToB2(record TaxMatrixVc,var val,var val,var val,var val);
external function Integer CheckUsers(string,string,var string,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean AllowedToTakeFromLocation(string);
external function Boolean QTTestCredMan(record QTVc,var Integer);
external function Boolean IsVATCodeDefined(string);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function val GetINCostPrice(string,string,Boolean);
external updating procedure SMSWhenQT(record QTVc,Integer);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external updating procedure UpdateVARItemsQT(record QTVc);
external function Boolean IsRecipeClosed(string);
external function Date ConvertPlanShipString(string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean CorrectM4ValProc(val);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external function Integer CheckObjs(string,string,var string);

external function Integer PayTermType(string);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestQTVc(LongInt,Date,var Boolean);
external procedure QTSumup(var record QTVc);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean INVc_AllowSales(record INVc,var LongInt);

function Boolean QTCheckForSalesmanPrice(record QTVc QTr, Integer i, string pricelist, var string errstr)
begin 
  record INVc INr;
  val t,s,price,vreb;
  val baseprice,calcprice;
  val temp,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean dummyf,calcpricef,res;
  row QTVc QTrw;
  Time blankt;
  
  res = true;
  if nonblank(pricelist) then begin
    MatRowGet(QTr,i,QTrw);
    if (GetItemPriceDiscount3(QTrw.ArtCode,QTrw.Quant,INr,QTr.CurncyCode,
                                QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,
                                QTr.LangCode,QTr.CustCat,pricelist,QTr.RebCode,
                                price,curitemname,vreb,vatcode,baseprice,salesacc,
                                QTr.ExportFlag,calcpricef,QTr.QTDate,blankt,QTr.CustCode,true,dummyf,QTr.PayDeal,tax2code,tax2prc,QTr.Region,QTr.Location,taxtemplatecode)) then begin
      calcprice = QTrw.Sum/QTrw.Quant;
      if (price>calcprice) then begin
        errstr = calcprice;
        errstr = errstr & USetStr(20111) & price;
        res = false;
      end;  
    end;              
  end;
  QTCheckForSalesmanPrice = res;        
  return;
end;  

global
function LongInt QTVcRecordDefaults(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
begin
  record QTSettBlock QTSb;
  LongInt res;
  LongInt newnr;
  Date blankd;
  record UserVc Userr;
  record AccBlock Accb;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  record ProjectBlock ProjectRec;

  BlockLoad(QTSb);
  BlockLoad(Accb);
  BlockLoad(ProjectRec);
  QTr.SerNr = -1;
  QTr.OrderNr = -1;
  QTr.QTDate = CurrentDate;
  if (QTSb.DefaultValidDays>0) then begin
    QTr.ValidUntilDate = AddDay(QTr.QTDate,QTSb.DefaultValidDays);
  end;
  QTr.DisallowInvoicemorethanQuoted = QTSb.DisallowInvoicemorethanQuoted;  
  QTr.CustCat = "";
  QTr.ExportFlag = 0;
  QTr.Rejected = 0;
  QTr.RejectDate = blankd;
  QTr.DiscSum = blankval;
  QTr.DiscPerc = blankval;
  QTr.TotGP = blankval;
  QTr.Probability = blankval;
  QTr.TotQty = blankval;
  QTr.TotWeight = blankval;
  QTr.TotVolume = blankval;      
  QTr.SumTime = blankval;
  QTr.SumOther = blankval;      
  QTr.SumStocked = blankval;      
  QTr.SumMaterial = blankval;      
  QTr.InclVAT = Accb.BasePriceInclVAT;
  QTr.NoTAXonVAT = Accb.NoTAXonVAT;
  QTr.TotalwoTAX = Accb.TotalwoTAX;
  QTr.DaysToDelivery = -1;
  if (SingleUserMode) then begin
    QTr.SerNr = NextSerNr("QTVc",QTr.QTDate,-1,false,"");
  end;
  GetCurUser(Userr);
  QTr.Objects = Userr.PersObjx;
  QTr.OurContact = Userr.CurOurContact;
  QTr.Location = Userr.Location;
  QTr.SalesMan = Userr.Code;
  QTr.SalesGroup = Userr.SalesGroup;
  QTr.PayDeal = "";
  curcode = QTr.CurncyCode;
  GetFullCurncyRate(curcode,QTr.QTDate,fr,to1,to2,br1,br2);
  QTr.CurncyCode = curcode;
  QTr.FrRate = fr;
  QTr.ToRateB1 = to1; 
  QTr.ToRateB2 = to2;
  QTr.BaseRate1 = br1;
  QTr.BaseRate2 = br2;
  QTr.BudTime = ProjectRec.BudTime;
  QTr.BudOther = ProjectRec.BudOther;
  QTr.BudStocked = ProjectRec.BudStocked;
  QTr.BudMaterial = ProjectRec.BudMaterial;
  QTr.BranchID = CurBranchID;
  QTr.LocalMachineCode = CurMachineName;
  QTr.ProformaOfficialSerNrSerie = "";
  QTVcRecordDefaults = res;  
  RETURN;
END;

global
procedure RecalculateWeightQTVc(var record QTVc QTp,Boolean readf)
BEGIN
  row QTVc QTrw;
  Integer rwcnt,i;
  record INVc INr;
  
  if (readf) then begin
    if (ReadFirstMain(QTp,0,true)) then begin end;
  end;
  QTp.TotQty = blankval;
  QTp.TotVolume = blankval;
  QTp.TotWeight = blankval;
  rwcnt = MatRowCnt(QTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    QTp.TotQty = QTp.TotQty + QTrw.Quant;
    if (ReadFirstItem(QTrw.ArtCode,INr,true,true)) then begin
      QTp.TotVolume = QTp.TotVolume + QTrw.Quant*INr.Volume;
      QTp.TotWeight = QTp.TotWeight + QTrw.Quant*INr.Weight;
    end;          
  end;
  if (QTp.TotVolume==0) then begin QTp.TotVolume = blankval; end;
  if (QTp.TotWeight==0) then begin QTp.TotWeight = blankval; end;
  RETURN;
END;

global
function LongInt QTVcRecordUpdate(var record QTVc QTr,record QTVc QT2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  RecalculateWeightQTVc(QTr,false);  
  QTVcRecordUpdate = res; 
  RETURN;
END;

global
updating function LongInt QTVcRecordUpdateAfter(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  val bc1v;

  UpdateVARItemsQT(QTr);
  if (QTr.Rejected==2) and (QT2r.Rejected!=2) then begin
    SMSWhenQT(QTr,1);  
  end;
  if (QT2r.Rejected!=2 and QTr.Rejected==2) then begin
    QTCreatePlannedPayment(QTr);
  end;  
  if (QT2r.Rejected!=1 and QTr.Rejected==1) then begin
    DeletePlannedPayment("QTVc",QTr.SerNr,-1);
  end;  

  QTVcRecordUpdateAfter = res; 
  RETURN;
END;

procedure AutDelZeroQtyRows(record QTVc QTr)
begin
  row QTVc QTrw;
  Integer i,rwcnt;
  Boolean updf;

  rwcnt = MatRowCnt(QTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTr,i,QTrw);
    if (QTrw.Quant==0 and nonblank(QTrw.ArtCode)) then begin
      MatRowDelete(QTr,i);
      rwcnt = MatRowCnt(QTr);
      i = -1;
      updf = true;
    end;
  end;
  return;
end;

global
function LongInt QTVcRecordSave(var record QTVc QTr,record QTVc QT2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  RecalculateWeightQTVc(QTr,false);
  AutDelZeroQtyRows(QTr);
  QTVcRecordSave = res; 
  RETURN;
END;

global
updating function LongInt QTVcRecordSaveAfter(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  UpdateVARItemsQT(QTr);
  if (QTr.Rejected==2) then begin
    SMSWhenQT(QTr,1);  
  end;
  if (QTr.Rejected==2) then begin
    QTCreatePlannedPayment(QTr);
  end;  
  QTVcRecordSaveAfter = res; 
  RETURN;
END;

global
function LongInt QTVcRecordDuplicate(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
begin
  record QTSettBlock QTSb;
  LongInt res;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  Date blankd;
  Integer i,rwcnt;
  row QTVc QTrw;
  Date bd;
  Time bt;
  record CreditLimitBlock CLb;
  record CUVc CUr;
  val bal,limit;
  Boolean limitdaysf;

  BlockLoad(QTSb);
  QTr.SerNr = -1;
  QTr.DiscSum = blankval;
  QTr.DiscPerc = blankval;
  QTr.Probability = blankval;
  QTr.OrderNr = -1;
  QTr.Rejected = 0;
  QTr.Closed = 0;
  QTr.RejectDate = blankd;
  QTr.PRCode = "";
  curcode = QTr.CurncyCode;
  GetFullCurncyRate(curcode,QTr.QTDate,fr,to1,to2,br1,br2);
  QTr.CurncyCode = curcode;
  QTr.FrRate = fr;
  QTr.ToRateB1 = to1; 
  QTr.ToRateB2 = to2;
  QTr.BaseRate1 = br1;
  QTr.BaseRate2 = br2;
  QTr.QTDate = CurrentDate;
  if (QTSb.DefaultValidDays>0) then begin
    QTr.ValidUntilDate = AddDay(QTr.QTDate,QTSb.DefaultValidDays);
  end;
  rwcnt = MatRowCnt(QTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTr,i,QTrw);
    QTrw.Invoiced = -1;
    QTrw.Invd = blankval;
    QTrw.InvDate = blankd;
    QTrw.BasePrice = GetINCostPrice("",QTrw.ArtCode,false);
    MatRowPut(QTr,i,QTrw);
    QTDchsum(QTr,i);
  end;
  if (SingleUserMode) then begin
    QTr.SerNr = NextSerNr("QTVc",QTr.QTDate,-1,false,"");
  end;
  QTr.BranchID = CurBranchID;
  QTr.LocalMachineCode = CurMachineName;
  QTr.RegDate = bd;
  QTr.RegTime = bt;
  QTr.ProformaOfficialSerNr = "";
  QTr.ProformaOfficialSerNrSerie = "";
  QTr.AcceptanceBy = "";
  QTr.AcceptanceFYI = "";
  QTr.Hash = "";
  QTr.HashKeyVersion = 0;
  ReplacePerceptionTaxesRows_QTVc(QTr);
  QTSumup(QTr); 
  BlockLoad(CLb);
  CUr.Code = QTr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  if (nonblank(CUr.WarnText1)) then begin
    MessageBox(0,CUr.WarnText1);
  end;
  if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
    if (CLb.IVPaste==1) then begin
      if (limitdaysf) then begin
        MessageBox(0,USetStr(22260));
      end;
      if (limit>0) then begin
        if (bal>limit) then begin
          MessageBox(0,USetStr(1164));
        end;
      end;
    end;
  end;
  
  QTVcRecordDuplicate = res;  
  RETURN;
END;

procedure QTVcConvertB1ToB2(record QTVc QTp,val fr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  row QTVc QTrw;
  Integer i,rwcnt;
  val t;
  record TaxMatrixVc TMr;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2); 
  rwcnt = MatRowCnt(QTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    B1ToB2Val(QTrw.rowGP,br1,br2,t);
    QTrw.rowGP = t;
    B1ToB2Val(QTrw.BasePrice,br1,br2,t);
    QTrw.BasePrice = t;    
    MatRowPut(QTp,i,QTrw);
  end;
  RETURN;
END;

global
updating function LongInt QTVcRecordImport(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;  
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  val fr,to1,to2,br1,br2,t;
  string 10 curncy;
  Integer rwcnt,i;
  row QTVc QTrw;
  record AccBlock Accb;
  row LegalInvNrBlock LINrbrw;

  BlockLoad(cvm);  
  BlockLoad(Accb);  
  if (QTr.SerNr==-99) then begin
    QTr.SerNr = NextSerNr("QTVc",QTr.QTDate,-1,false,"");
  end;
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    fr = QTr.FrRate;
    to1 = QTr.ToRateB1;
    to2 = QTr.ToRateB2;
    br1 = QTr.BaseRate1;
    br2 = QTr.BaseRate2;
    t = QTr.Sum4;
    curncy = QTr.CurncyCode;
    ConvertToDualBase(curncy,QTr.QTDate,fr,to1,to2,br1,br2,t,true);
    QTr.CurncyCode = curncy;
    QTr.FrRate = fr;
    QTr.ToRateB1 = to1;
    QTr.ToRateB2 = to2;
    QTr.BaseRate1 = br1;
    QTr.BaseRate2 = br2;
    QTr.Sum4 = t;  
  end;
  if (gBase1ToBase2) then begin
    to1 = QTr.ToRateB1;
    to2 = QTr.ToRateB2;
    br1 = QTr.BaseRate1;
    br2 = QTr.BaseRate2;  
    QTVcConvertB1ToB2(QTr,QTr.FrRate,to1,to2,br1,br2);
    QTr.ToRateB1 = to1;
    QTr.ToRateB2 = to2;
    QTr.BaseRate1 = br1;
    QTr.BaseRate2 = br2;
    QTr.BaseSum4 = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
  end;
  if (QTr.TotGP==0) then begin      
    rwcnt = MatRowCnt(QTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QTrw);
      if (nonblank(QTrw.ArtCode)) then begin
        QTr.TotGP = QTr.TotGP + QTrw.rowGP;
      end;
    end;
  end;
  if (blankdate(QTr.PlanShipDate)) then begin
    QTr.PlanShipDate = ConvertPlanShipString(QTr.PlanShip);
  end;  
  if (QTr.NoTAXonVAT==-1) then begin
    QTr.NoTAXonVAT = Accb.NoTAXonVAT;
  end;
  if (blank(QTr.ProformaOfficialSerNrSerie)) then begin
    GetLegalInvNrRow(QTr.ProformaOfficialSerNr,LINrbrw);
    QTr.ProformaOfficialSerNrSerie = GetLegalInvoiceNrSerie(LINrbrw,QTr.ProformaOfficialSerNr);
  end;
  QTVcRecordImport = res;  
  RETURN;
END;

function Boolean CheckCurncyRates(string crncy,val from,val to1,val to2,val base1,val base2)
BEGIN
  Boolean res;
  record BaseCurBlock bascur;

  res = true;
  BlockLoad(bascur);
  if ((nonblank(crncy)) and (bascur.BaseCur1!=crncy) and (bascur.BaseCur2!=crncy)) then begin
    if ((to1==0) and (to2==0)) then begin
      res = false;
    end;
  end;
  CheckCurncyRates = res;
  RETURN;
END;

function Boolean ValidQuotationDataForVATLaw_Portuguese(record QTVc QTr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  val rval,rvalb1;
  Boolean testf;
  record CountryVc Countryr;
  
  res = true;
  if (blank(QTr.VATNr)) then begin
    errcode = 20275;
    gotofield = "VATNr";
    res = false;
    goto LValidQuotationDataForVATLaw_Portuguese;
  end;
  testf = true;
  if (QTr.VATNr=="999999990") then begin testf = false; end;
  if (CUr.CustType==1) then begin
    if (QTr.Sum1<=1000) then begin
      if (blank(QTr.Addr1) and blank(QTr.Addr2) and blank(QTr.Addr3) and blank(QTr.InvAddr3) and blank(QTr.InvAddr4)) then begin
        testf = false;
      end;
    end;
  end;
  if (testf) then begin
    testf = false;
    if (blank(QTr.Addr1) and blank(QTr.Addr2)) then begin
      gotofield = "Addr1";
      testf = true;
    end;
    if (blank(QTr.Addr3)) then begin
      gotofield = "Addr3";
      testf = true;
    end;
    if (blank(QTr.InvAddr3)) then begin
      gotofield = "InvAddr3";
      testf = true;
    end;
    if (blank(QTr.InvAddr4)) then begin
      gotofield = "InvAddr4";
      testf = true;
    end;
    if (testf) then begin
      errcode = 20276;
      res = false;
      goto LValidQuotationDataForVATLaw_Portuguese;
    end;
  end;
  if (nonblank(QTr.InvAddr4)) then begin
    Countryr.Comment = QTr.InvAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "InvAddr4";
      goto LValidQuotationDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(QTr.InvAddr4)) or (QTr.InvAddr4=="Portugal") then begin
    if (nonblank(QTr.Addr3)) then begin
      if (IsPostcodeFormatCorrect(QTr.Addr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "Addr3";
        goto LValidQuotationDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (QTr.VATNr!="999999990") then begin
    if (nonblank(QTr.ShipAddr1) or nonblank(QTr.ShipAddr2) or nonblank(QTr.DelAddr3) or nonblank(QTr.DelAddr4)) then begin
      testf = false;
      if (blank(QTr.ShipAddr1) and blank(QTr.ShipAddr2)) then begin
        gotofield = "ShipAddr1";
        testf = true;
      end;
      if (blank(QTr.ShipAddr3)) then begin
        gotofield = "ShipAddr3";
        testf = true;
      end;
      if (blank(QTr.DelAddr3)) then begin
        gotofield = "DelAddr3";
        testf = true;
      end;
      if (blank(QTr.DelAddr4)) then begin
        gotofield = "DelAddr4";
        testf = true;
      end;
      if (testf) then begin
        errcode = 20276;
        res = false;
        goto LValidQuotationDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (nonblank(QTr.DelAddr4)) then begin
    Countryr.Comment = QTr.DelAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "DelAddr4";
      goto LValidQuotationDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(QTr.DelAddr4)) or (QTr.DelAddr4=="Portugal") then begin
    if (nonblank(QTr.ShipAddr3)) then begin
      if (IsPostcodeFormatCorrect(QTr.ShipAddr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "ShipAddr3";
        goto LValidQuotationDataForVATLaw_Portuguese;
      end;
    end;
  end;
  
LValidQuotationDataForVATLaw_Portuguese:;  
  ValidQuotationDataForVATLaw_Portuguese = res;
  return;
end;

function Boolean ValidQuotationDataForVATLaw(record QTVc QTr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  
  res = true;
  if (HasLocalization("PRT")) then begin
    res = ValidQuotationDataForVATLaw_Portuguese(QTr,CUr,errcode,gotofield);
  end;
LValidQuotationDataForVATLaw:;  
  ValidQuotationDataForVATLaw = res;
  return;
end;

function Boolean ValidateQuoteClass(string quoteclass)
begin
  Boolean res;
  record QuoteClassBlock QCb;
  row QuoteClassBlock QCbrw;
  Integer i,rwcnt;
  
  BlockLoad(QCb);
  rwcnt = MatRowCnt(QCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QCb,i,QCbrw);
    if (quoteclass==QCbrw.Code) then begin
      res = true;
      i = rwcnt;
    end;
  end;
  ValidateQuoteClass = res;
  return;
end;

global
function LongInt QTVcRecordCheck(record QTVc QTp,record QTVc QT2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ProjectBlock PRRec;
  record SRBlock SRRec;
  record QTVc locQTr;
  record CUVc CUr;
  record CUVc CU2r;
  record INVc INr;
  record PRVc PRr;
  record AccVc Accr;
  row QTVc QTrw;
  Integer i,rwcnt,errcode;
  LongInt oldnr,ErrorCode,l;
  Boolean gentrans,transf,testf,test2f;
  string 255 tstr,errstr;
  record QTSettBlock QTSetb;
  record UserVc User,User2;
  record TaxTemplateVc TTr;
  record AccBlock ARAccb;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Date td;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  record OTCheckBlock OTCheckr;
  Boolean initotcheckf,rejecting;
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;

  res = 0;
  BlockLoad(SRRec);
  BlockLoad(PRRec);
  BlockLoad(QTSetb);
  BlockLoad(ARAccb);
  if (stat==Rs_update) then begin
    if (QTp.SerNr<=0) then begin
      QTp.SerNr = QT2p.SerNr;
    end;
  end;  
  oldnr = QTp.SerNr;
  if (QTp.SerNr<=0) then begin
    QTp.SerNr = NextSerNr("QTVc",QTp.QTDate,SRRec.LastQTNr,false,"");
  end;
  if ((stat==Rs_insert) or (QTp.SerNr!=QT2p.SerNr)) then begin
    locQTr.SerNr = QTp.SerNr;
    if (ReadFirstMain(locQTr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1; 
      goto LQTVcRecordCheck;
    end;
  end;
  switch (stat) begin
    case Rs_update:
      rejecting = (QT2p.Closed==0 and QTp.Closed!=0) or (QT2p.Rejected==0 and QTp.Rejected==1);
  end;

  if (SerNrTestQTVc(QTp.SerNr,QTp.QTDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LQTVcRecordCheck;
  end;
  if (Date2Test("QTVc",QTp.QTDate,"QTDate",-1)==false) then begin
    res = -1;
    goto LQTVcRecordCheck;
  end;
  if (QTSetb.ReqQTClass!=0) then begin
    if (blank(QTp.QuoteClass)) then begin
      RecordCheckError(20109,"",-1,"QuoteClass");
      res = -1;
      goto LQTVcRecordCheck;  
    end;
  end;  
  if (nonblank(QTp.QuoteClass)) then begin
    if (ValidateQuoteClass(QTp.QuoteClass)==false) then begin
      RecordCheckError(1290,"",-1,"QuoteClass");
      res = -1;
      goto LQTVcRecordCheck;  
    end;
  end;
  CUr.Code = QTp.CustCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,QTp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LQTVcRecordCheck;
  end;
  if (CUr.CUType==0) then begin
    RecordCheckError(1120,QTp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LQTVcRecordCheck;
  end;
  switch (stat) begin
    case Rs_update:
      if (QTp.Rejected!=2) and (QT2p.Rejected<2) then begin
        QTp.RegDate = CurrentDate;
        QTp.RegTime = CurrentTime;
      end;
    otherwise
      if (QTp.Rejected!=2) then begin
        QTp.RegDate = CurrentDate;
        QTp.RegTime = CurrentTime;
      end;
  end;
  if ((stat==Rs_insert) or ((stat==Rs_update) and (QT2p.Closed==0))) then begin
    if (QTp.Rejected!=1) then begin  //if not Rejected
      if (qupdating.BA_QTMinMarkupWarning(QTp,i)) then begin
        if (UserCanAction("DisallowSaleBelowGP",false)) then begin
          RecordCheckError(22088,"",i,"Sum");      
          res = -1;
          goto LQTVcRecordCheck;
        end;
      end;
    end;
  end;  
/*
  BlockLoad(LINrb);  
  if (nonblank(QTp.ProformaOfficialSerNr)) then begin
    GetLegalInvNrRow(QTp.ProformaOfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          QTp.ProformaOfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        if (transf) then begin
          QTp.ProformaOfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          QTp.ProformaOfficialSerNr = "";
        end;
    end;
  end;
  if (blank(QTp.ProformaOfficialSerNr)) then begin
    FindNextProformaQTVcOfficialSerialNr(QTp);
  end;
  if (ValidateOfficialSerialNrChronology("ORVc",QTp.ProformaOfficialSerNr,QTp.SerNr,QTp.QTDate,td)==false) then begin
    RecordCheckError(26201," " & td,-1,"QTDate");  
    res = -1;
    goto LQTVcRecordCheck;
  end;  
  if (nonblank(QTp.ProformaOfficialSerNr)) and (MatRowCnt(LINrb)>0) then begin    
    errcode = 0;
    rwcnt = MatRowCnt(LINrb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      test2f = true;
      if (Left(QTp.ProformaOfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
      if (test2f) then begin
        testf = true;
        test2f = TestNextOfficialSerialNr_ProformaQTVc(LINrbrw,CUr.Classification,QTp,false);
        if (test2f==false) then begin
          errcode = 1557;
          testf = false;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
    if (testf==false) then begin
      RecordCheckError(errcode," " & QTp.ProformaOfficialSerNr,-1,"OfficialSerNr");      
      res = -1;
      goto LQTVcRecordCheck;
    end;
  end;
*/

  errcode = CheckVATNrMask(QTp.VATNr,CUr.CountryCode,CUr.CustType,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,tstr,-1,"VATNr");      
    res = -1; 
    goto LQTVcRecordCheck;
  end;
  if (CUr.blockedFlag!=0) then begin
    RecordCheckError(1265,QTp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LQTVcRecordCheck;
  end;
  if (HasLocalization("PRT")) then begin
    BlockLoad(CUUerLb);  
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = QTp.Addr0; errstr = "Addr0";
      case kCountryAddrLineUserAddr1: tstr = QTp.Addr1; errstr = "Addr1";
      case kCountryAddrLineUserAddr2: tstr = QTp.Addr2; errstr = "Addr2";
      case kCountryAddrLineUserAddr3: tstr = QTp.InvAddr3; errstr = "InvAddr3";
      case kCountryAddrLineUserAddr4: tstr = QTp.InvAddr4; errstr = "InvAddr4";
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        RecordCheckError(20277,tstr,-1,errstr);      
        res = -1;
        goto LQTVcRecordCheck;
      end;
    end;
    if (blank(tstr)) or (tstr=="Portugal") then begin
      if (nonblank(QTp.Addr3)) then begin
        if (IsPostcodeFormatCorrect(QTp.Addr3)==false) then begin
          RecordCheckError(24620,tstr,-1,"Addr3");      
          res = -1;
          goto LQTVcRecordCheck;
        end;
      end;
    end;
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = QTp.ShipAddr0; errstr = "ShipAddr0";
      case kCountryAddrLineUserAddr1: tstr = QTp.ShipAddr1; errstr = "ShipAddr1";
      case kCountryAddrLineUserAddr2: tstr = QTp.ShipAddr2; errstr = "ShipAddr2";
      case kCountryAddrLineUserAddr3: tstr = QTp.DelAddr3; errstr = "DelAddr3";
      case kCountryAddrLineUserAddr4: tstr = QTp.DelAddr4; errstr = "DelAddr4";
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        RecordCheckError(20277,tstr,-1,errstr);      
        res = -1;
        goto LQTVcRecordCheck;
      end;
    end;
    if (blank(tstr)) or (tstr=="Portugal") then begin
      if (nonblank(QTp.ShipAddr3)) then begin
        if (IsPostcodeFormatCorrect(QTp.ShipAddr3)==false) then begin
          RecordCheckError(24620,tstr,-1,"ShipAddr3");      
          res = -1;
          goto LQTVcRecordCheck;
        end;
      end;
    end;
  end;
  if (CheckPDExists(QTp.PayDeal)==false) then begin
    RecordCheckError(1256,"",-1,"PayDeal");
    res = -1;
    goto LQTVcRecordCheck;
  end;    
  switch (PayTermType(QTp.PayDeal)) begin
    case kInvoiceTypeCredit:
      RecordCheckError(1227,QTp.PayDeal,-1,"PayDeal");      
      res = -1;
      goto LQTVcRecordCheck;
    case kInvoiceTypeEmployee:
      RecordCheckError(1958,"",-1,"PayDeal");      
      res = -1;
      goto LQTVcRecordCheck;
  end;
  
//  if (nonblank(QTp.Objects)) then begin
    errcode = CheckObjs("",QTp.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1; 
      goto LQTVcRecordCheck;
    end;
//  end;
  if (QTp.ExportFlag!=0) then begin
    if (UserCanAction("DisallowExpSales",false)) then begin
      RecordCheckError(20049,"",-1,"CustCode");   
      res = -1; 
      goto LQTVcRecordCheck;
    end; 
  end;
  if (QTp.ExportFlag==0) then begin
    if (UserCanAction("DisallowDomSales",false)) then begin
      RecordCheckError(20056,"",-1,"CustCode");   
      res = -1; 
      goto LQTVcRecordCheck;
    end; 
  end;
  if (nonblank(QTp.PRCode)) then begin
    PRr.Code = QTp.PRCode;
    if (ReadFirstMain(PRr,1,true)) then begin
      if ((QTp.CustCode!=PRr.CustCode) and (nonblank(PRr.CustCode))) then begin
        RecordCheckError(1218,"",-1,"PRCode");      
        res = -1; 
        goto LQTVcRecordCheck;
      end;
      if (nonblank(PRr.CurncyCode)) then begin
        if (QTp.CurncyCode!=PRr.CurncyCode) then begin
          RecordCheckError(20573,"",-1,"PRCode");      
          res = -1;
          goto LQTVcRecordCheck;
        end;
      end;
    end else begin
      RecordCheckError(1232,"",-1,"PRCode");      
      res = -1; 
      goto LQTVcRecordCheck;
    end;    
    if (PRr.Terminated!=0) then begin
      RecordCheckError(2086,"" & PRr.Code,-1,"PRCode");      
      res = -1; 
      goto LQTVcRecordCheck;
    end;        
    if (PRRec.AllowSingleQuote!=0) then begin
      locQTr.PRCode = QTp.PRCode;
      if (ReadFirstKey("PRCode",locQTr,1,true)) then begin
        if (locQTr.SerNr!=QTp.SerNr) then begin
          RecordCheckError(2080,"",-1,"PRCode");      
          res = -1; 
          goto LQTVcRecordCheck;
        end;
      end;
    end;
  end;
  if (nonblank(CUr.CurncyCode)) then begin
    if (CUr.CurncyCode!=QTp.CurncyCode) then begin
      RecordCheckError(1217,"",-1,"CurncyCode");      
      res = -1; 
      goto LQTVcRecordCheck;
    end;
  end;      
  if (nonblank(QTp.SalesMan)) then begin    
    errcode = VerifySalesmen(QTp.SalesMan,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,": " & tstr,-1,"SalesMan");
      res = -1; 
      goto LQTVcRecordCheck;
    end;
  end;
  if (nonblank(QTp.OrgCust)) then begin
    CU2r.Code = QTp.OrgCust;
    if (ReadFirstMain(CU2r,1,true)) then begin
      if ((nonblank(CUr.CurncyCode) or nonblank(CU2r.CurncyCode)) and CUr.CurncyCode!=CU2r.CurncyCode) then begin
        RecordCheckError(1217,"",-1,"OrgCust");      
        res = -1; 
        goto LQTVcRecordCheck;
      end;
    end;
  end;
  if (AllowedToTakeFromLocation(QTp.Location)==false) then begin
    RecordCheckError(1768,"",-1,"Location");      
    res = -1;
    goto LQTVcRecordCheck;
  end;
/*  
  if (CheckCurncyRates(QTp.CurncyCode,QTp.FrRate,QTp.ToRateB1,QTp.ToRateB2,QTp.BaseRate1,QTp.BaseRate2)==false) then begin
    RecordCheckError(1582,"",-1,"ToRateB1");      
    res = -1; 
    goto LQTVcRecordCheck;
  end;  
*/  
  if (ARAccb.DisallowNegativeTotalsonSales!=0) then begin
    if (QTp.Sum4<0) then begin
        RecordCheckError(22047,"",0,"Sum");      
      res = -1; 
      goto LQTVcRecordCheck;
    end;
  end;

  errcode = CheckRates(QTp.CurncyCode,QTp.FrRate,QTp.ToRateB1,QTp.ToRateB2,QTp.BaseRate1,QTp.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LQTVcRecordCheck;
  end;      
  if (ValidQuotationDataForVATLaw(QTp,CUr,errcode,tstr)==false) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LQTVcRecordCheck;
  end;   
  if (QTp.Rejected!=0) then begin
    if ((stat==Rs_insert) or (QTp.Rejected!=QT2p.Rejected)) then begin
      if (blankdate(QTp.RejectDate)) then begin
        QTp.RejectDate = CurrentDate;
      end;
    end;
  end;
  if (QTSetb.ReqRejectDate!=0) then begin
    if (blankdate(QTp.RejectDate)) then begin
      RecordCheckError(20109,"",-1,"RejectDate");
      res = -1;
      goto LQTVcRecordCheck;  
    end;
  end;  
  if (QTTestCredMan(QTp,errcode)==false) then begin
    MessageBox(errcode,"");
  end;    
  if (nonblank(QTp.SalesMan)) then begin
    errcode = CheckUsers(QTp.SalesMan,"",tstr,true);  
    if (errcode!=0) then begin
      RecordCheckError(errcode,tstr,-1,"SalesMan");      
      res = -1;
      goto LQTVcRecordCheck;
    end;      
  end;
  User.Code = CurrentUser;
  if ReadFirstMain(User,1,true) then begin 
  end;
  rwcnt = MatRowCnt(QTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    if (IsStandardProduct) then begin
      if (HasLocalization("POL")) then begin
        if (len(QTrw.Spec)>35) then begin
          RecordCheckError(22139,"",i,"Spec");      
          res = -1;
          goto LQTVcRecordCheck;
        end;
      end;
    end;
    switch (QTrw.stp) begin
      case 1:
        if (VATAccIsClosed(QTrw.VATCode,tstr,1)) then begin
          RecordCheckError(1258,tstr,i,"VATCode");      
          res = -1; 
          goto LQTVcRecordCheck;
        end;          
        if ((nonblank(QTrw.VATCode)) and (IsVATCodeDefined(QTrw.VATCode)==false)) then begin
          RecordCheckError(1120,QTrw.VATCode,i,"VATCode");      
          res = -1; 
          goto LQTVcRecordCheck;
        end;
        if (true) then begin
          if (ARAccb.DisallowNegativeRowSumsonSales!=0) then begin
            if (QTrw.Sum<0) then begin
              RecordCheckError(22047,"",i,"Sum");      
              res = -1; 
              goto LQTVcRecordCheck;
            end;
          end;
        end;
        if (nonblank(QTrw.Salesmen)) then begin    
          errcode = VerifySalesmen(QTrw.Salesmen,tstr);
          if (errcode!=0) then begin
            RecordCheckError(errcode,": " & tstr,i,"Salesmen");
            res = -1; 
            goto LQTVcRecordCheck;
          end;
        end;
        if (nonblank(QTrw.RvrsVATCode)) then begin
          if (blank(QTp.VATNr)) then begin
            RecordCheckError(1058,"",-1,"VATNr");
            res = -1; 
            goto LQTVcRecordCheck;
          end;
        end;
        if (nonblank(QTrw.ArtCode)) then begin
          if (HasLocalization("PRT")) then begin
            if (QTrw.vRebate<0) then begin
              RecordCheckError(22034,"",i,"vRebate");      
              res = -1; 
              goto LQTVcRecordCheck;
            end;
          end;
          if (rejecting==false) then begin
            if (ReadFirstItem(QTrw.ArtCode,INr,true,false)==false) then begin
              RecordCheckError(1120,QTrw.ArtCode,i,"ArtCode");      
              res = -1; 
              goto LQTVcRecordCheck;
            end;
          end;
          if (!INVc_AllowSales(INr,ErrorCode)) then begin
            RecordCheckError(ErrorCode,"",i,"ArtCode");      
            res = -1; 
            goto LQTVcRecordCheck;
          end;
          if (INr.Terminated!=0) then begin
            RecordCheckError(1120,QTrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto LQTVcRecordCheck;
          end;
          if (INr.SerNrf==1) then begin
            l = QTrw.Quant;//ulong64? 
            if (QTrw.Quant-l>0) then begin
              RecordCheckError(20797,"",i,"Quant");
              res = -1;
              goto LQTVcRecordCheck;
            end;
          end;
          if (long4!=0) then begin
            if (IsRecipeClosed(INr.Recepy)) then begin
              RecordCheckError(2088,"",i,"ArtCode");      
              res = -1; 
              goto LQTVcRecordCheck;
            end;
          end;
          if (CheckAllowedSize(INr,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval)==false) then begin
            RecordCheckError(1480,QTrw.ArtCode,i,"UnitXval");      
            res = -1; 
            goto LQTVcRecordCheck;
          end;
        end;
        if (nonblank(QTrw.SalesAcc)) then begin
          Accr.AccNumber = QTrw.SalesAcc;
          if (ReadFirstMain(Accr,1,true)==false) then begin
            RecordCheckError(1931,"",i,"SalesAcc");      
            res = -1;
            goto LQTVcRecordCheck;
          end;
        end;
        VerifyRowObjects("SL",QTp.Objects,QTrw.Objects,QTrw.SalesAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);        
        if (errcode!=0) then begin
          RecordCheckError(errcode,errstr,i,"Objects");      
          res = -1; 
          goto LQTVcRecordCheck;
        end;
        if (QTrw.Sum!=0) then begin
          if (nonblank(QTrw.ArtCode)) then begin
            if (UseTaxTemplatesforTaxCalc) then begin
              if (blank(QTrw.TaxTemplateCode)) then begin
                RecordCheckError(24201,"",i,"TaxTemplateCode");      
                res = -1;
                goto LQTVcRecordCheck;
              end;
              errcode = VerifyTaxTemplateCode(QTrw.TaxTemplateCode,tstr);
              if (errcode!=0) then begin
                RecordCheckError(errcode,tstr,i,"TaxTemplateCode");                
                res = -1; 
                goto LQTVcRecordCheck;
              end;
            end else begin
              if (nonblank(QTrw.RvrsVATCode)) then begin
                if (IsVATCodeDefined(QTrw.RvrsVATCode)==false) then begin
                  RecordCheckError(1120,"",i,"RvrsVATCode");      
                  res = -1; 
                  goto LQTVcRecordCheck;
                end;
              end;
              if (blank(QTrw.VATCode)) then begin
                RecordCheckError(1134,"",i,"VATCode");      
                res = -1;
                goto LQTVcRecordCheck;
              end;
            end;
          end; 
          if (CorrectM4ValProc(QTrw.vRebate)==false) then begin
            RecordCheckError(1019,"",i,"vRebate");      
            res = -1; 
            goto LQTVcRecordCheck;
          end;
        end;
        tstr = User.MinPLCode;
        if (nonblank(QTrw.DiscApprovedBy)) then begin
          User2.Code = QTrw.DiscApprovedBy;
          if (ReadFirstMain(User2,1,true)) then begin
            tstr = User2.MinPLCode;
          end;
        end;
        if (QTCheckForSalesmanPrice(QTp,i,tstr,errstr)==false) then begin 
          RecordCheckError(20115,errstr,i,"Price");      
          res = -1; 
          goto LQTVcRecordCheck;
        end;  
    end;
  end;
LQTVcRecordCheck:;
  if (res!=0) then begin QTp.SerNr = oldnr; end;
  QTVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt QTVcRecordRemove(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record ORVc ORr;
  record ORVc oldORr;

  ORr.QuoteNr = QTr.SerNr;
  if (ReadFirstKey("QuoteNr",ORr,1,true)) then begin
    RecordCopy(oldORr,ORr);
    ORr.QuoteNr = -1;
    RecordUpdate(oldORr,ORr,true);
  end;
  if (QTr.Rejected==2) then begin
    DeletePlannedPayment("QTVc",QTr.SerNr,-1);
  end;
  QTVcRecordRemove = res; 
  return;
end;

global
function LongInt QTVcRecordRemoveTest(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;

  res = 1;
  BlockLoad(DBLockRec);
  if (QTr.QTDate<=DBLockRec.DeleteBeforeDate) then begin
    goto LQTVcRecordRemoveTest;
  end;
  actnr = 1;
  while (ReadRecordLink(QTr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (long3>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LQTVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;  
LQTVcRecordRemoveTest:;
  QTVcRecordRemoveTest = res; 
  return;
end;

global
function LongInt QTVcRecordProtectFields(var record QTVc QTr,record QTVc QT2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row QTVc QTrw;
  row QTVc QT2rw;
  Integer rwcnt2;
  
  QTr.RegTime = QT2r.RegTime;
  rwcnt = MatRowCnt(QTr);
  rwcnt2 = MatRowCnt(QT2r);
  for (i=0;i<rwcnt2;i=i+1) begin
    if (i<rwcnt) then begin
      MatRowGet(QTr,i,QTrw);
      MatRowGet(QT2r,i,QT2rw);
      QT2rw.Invd = QTrw.Invd;
      QT2rw.Invoiced = QTrw.Invoiced;
      QT2rw.InvDate = QTrw.InvDate;
      MatRowPut(QT2r,i,QT2rw);
    end;
  end;
  QTVcRecordProtectFields = res;
  return;
end;

global
function LongInt QTVcRecordInIndex(record QTVc QTr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (QTr.Rejected!=0) then begin 
    if (indexname=="OpenQuoteClass")  then begin res = 0; end;
  end;
  if (QTr.Closed!=0) then begin 
    if (indexname=="OpenQuoteClass")  then begin res = 0; end;
  end;
  QTVcRecordInIndex = res;
  return;
end;
