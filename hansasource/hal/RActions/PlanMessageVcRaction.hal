// CUST - changes not tagged

global
function Boolean IsAnyPlanMessageTextSent(longint queuesernr)
begin
  record PlanMessageTextVc PlanMessageTextr;
  Boolean foundf,res;
  res = false;
  
  foundf = true;
  PlanMessageTextr.SerNr = queuesernr;
  while (LoopMain(PlanMessageTextr,1,foundf)) begin
    if (PlanMessageTextr.SerNr!=queuesernr) then begin foundf = false; end;
    if (foundf) then begin
      if (PlanMessageTextr.SentFlag!=kPlannedMsgStatusNone and PlanMessageTextr.SentFlag!=kPlannedMsgStatusPending) then begin
        res = true;
        foundf = false;
      end;
    end;
  end;
  IsAnyPlanMessageTextSent = res;
  return;
end;

global
function Boolean IsPlanMessageOKd(longint queuesernr)
begin
  record PlanMessageQueueVc PlanMessageQueuer;
  Boolean res;
  
  res = false;
  PlanMessageQueuer.SerNr = queuesernr;
  if (ReadFirstMain(PlanMessageQueuer,1,true)) then begin
    if (PlanMessageQueuer.OKFlag!=0) then begin
      res = true;
    end;
  end;
  IsPlanMessageOKd = res;
  return;
end;


function Boolean AllPlanMessageTextOKd(longint queuesernr)
begin
  record PlanMessageTextVc PlanMessageTextr;
  Boolean foundf,firstfoundf,res;
  
  res = true;
  firstfoundf = false;
  
  foundf = true;
  PlanMessageTextr.SerNr = queuesernr;
  while (LoopMain(PlanMessageTextr,1,foundf)) begin
    if (PlanMessageTextr.SerNr!=queuesernr) then begin foundf = false; end;
    if (foundf) then begin
      firstfoundf = true;
      if (PlanMessageTextr.OKFlag==0) then begin
        res = false;
        foundf = false;
      end;
    end;
  end;
  if (firstfoundf==false) then begin
    res = false;
  end;
  AllPlanMessageTextOKd = res;
  return;
end;

global
function LongInt PlanMessageQueueVcRecordDefaults(var record PlanMessageQueueVc PlanMessageQueuer,record PlanMessageQueueVc PlanMessageQueue2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  PlanMessageQueuer.TransDate = CurrentDate;
  PlanMessageQueuer.AsMessage = kPlannedMsgSendAsLetter;
  if (SingleUserMode) then begin
    PlanMessageQueuer.SerNr = NextSerNr("PlanMessageQueueVc",CurrentDate,-1,false,"");
  end;
  PlanMessageQueueVcRecordDefaults = res;
  return;
end;

global
function LongInt PlanMessageQueueVcRecordDuplicate(var record PlanMessageQueueVc PlanMessageQueuer,record PlanMessageQueueVc PlanMessageQueue2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  PlanMessageQueuer.SerNr = -1;
  PlanMessageQueuer.TransDate = CurrentDate;
  PlanMessageQueuer.OKFlag = 0;
  PlanMessageQueuer.AllSentFlag = 0;
  if (SingleUserMode) then begin
    PlanMessageQueuer.SerNr = NextSerNr("PlanMessageQueueVc",CurrentDate,-1,false,"");
  end;
  PlanMessageQueueVcRecordDuplicate = res;
  return;
end;

updating procedure StartSendingPlanMessageTexts(longint queuesernr)
begin
  record PlanMessageTextVc oldPlanMessageTextr,PlanMessageTextr;
  Boolean foundf;
  
  foundf = true;
  PlanMessageTextr.SerNr = queuesernr;
  while (LoopMain(PlanMessageTextr,1,foundf)) begin
    if (PlanMessageTextr.SerNr!=queuesernr) then begin foundf = false; end;
    if (foundf) then begin
      if (PlanMessageTextr.SentFlag==kPlannedMsgStatusNone) then begin
        RecordCopy(oldPlanMessageTextr,PlanMessageTextr);
        PlanMessageTextr.SentFlag = kPlannedMsgStatusPending;
        if (RecordUpdate(oldPlanMessageTextr,PlanMessageTextr,false)==0) then begin end;
      end;
    end;
  end;
  return;
end;

updating procedure StopSendingPlanMessageTexts(longint queuesernr)
begin
  record PlanMessageTextVc oldPlanMessageTextr,PlanMessageTextr;
  Boolean foundf;
  
  foundf = true;
  PlanMessageTextr.SerNr = queuesernr;
  while (LoopMain(PlanMessageTextr,1,foundf)) begin
    if (PlanMessageTextr.SerNr!=queuesernr) then begin foundf = false; end;
    if (foundf) then begin
      if (PlanMessageTextr.SentFlag==kPlannedMsgStatusPending) then begin
        RecordCopy(oldPlanMessageTextr,PlanMessageTextr);
        PlanMessageTextr.SentFlag = kPlannedMsgStatusNone;
        if (RecordUpdate(oldPlanMessageTextr,PlanMessageTextr,false)==0) then begin end;
      end;
    end;
  end;
  return;
end;

global
updating function LongInt PlanMessageQueueVcRecordSaveAfter(var record PlanMessageQueueVc PlanMessageQueuer,record PlanMessageQueueVc PlanMessageQueue2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (PlanMessageQueuer.OKFlag!=0) then begin
    StartSendingPlanMessageTexts(PlanMessageQueuer.SerNr);
  end;
  PlanMessageQueueVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt PlanMessageQueueVcRecordUpdateAfter(var record PlanMessageQueueVc PlanMessageQueuer,record PlanMessageQueueVc PlanMessageQueue2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (PlanMessageQueue2r.OKFlag==0 and PlanMessageQueuer.OKFlag!=0) then begin
    StartSendingPlanMessageTexts(PlanMessageQueuer.SerNr);
  end;
  if (PlanMessageQueue2r.OKFlag!=0 and PlanMessageQueuer.OKFlag==0) then begin
    StopSendingPlanMessageTexts(PlanMessageQueuer.SerNr);
  end;
  PlanMessageQueueVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt PlanMessageQueueVcRecordCheck(var record PlanMessageQueueVc PlanMessageQueuer,record PlanMessageQueueVc PlanMessageQueue2r,LongInt stat,LongInt long4)
begin
  record PlanMessageTextVc PlanMessageTextr;
  LongInt res;
  Boolean foundf;
  string 200 ckey;
  boolean messagef,letterf,teststartdatef;

  res = 0;
  if (stat==Rs_update) then begin
    if (PlanMessageQueuer.SerNr>0 and PlanMessageQueuer.OKFlag==0 and PlanMessageQueue2r.OKFlag!=0) then begin
      if (IsAnyPlanMessageTextSent(PlanMessageQueuer.SerNr)) then begin
        RecordCheckError(50004,"",-1,"SerNr");
        res = -1;
        goto LPlanMessageQueueVcRecordCheck;
      end;
    end;
  end;

  letterf = false;
  if (nonblank(PlanMessageQueuer.CustCode)) then begin letterf = true; end;
  if (nonblank(PlanMessageQueuer.Classification)) then begin letterf = true; end;
  if (nonblank(PlanMessageQueuer.JobDesc)) then begin letterf = true; end;
  if (nonblank(PlanMessageQueuer.CustCat)) then begin letterf = true; end;
  if (nonblank(PlanMessageQueuer.ContClass)) then begin letterf = true; end;
  if (nonblank(PlanMessageQueuer.ReplyToAddr)) then begin letterf = true; end;

  messagef = false;
  if (nonblank(PlanMessageQueuer.Product) or nonblank(PlanMessageQueuer.ProductCode)) then begin messagef = true; end;
  
  switch (PlanMessageQueuer.AsMessage) begin
    case kPlannedMsgSendAsLetter:
      if (messagef) then begin
        RecordCheckError(50001,"",-1,"Product");
        res = -1;
        goto LPlanMessageQueueVcRecordCheck;
      end;
      if (blank(PlanMessageQueuer.CustCode)) then begin // If you want all, put *
        RecordCheckError(1058,"! If you want to send to multiple customers, please put a * in the customer code field",-1,"CustCode");
        res = -1; 
        goto LPlanMessageQueueVcRecordCheck;
      end;
    case kPlannedMsgSendAsMessage:
      if (letterf) then begin
        RecordCheckError(50002,"",-1,"CustCode");
        res = -1;
        goto LPlanMessageQueueVcRecordCheck;
      end;
      if (blank(PlanMessageQueuer.Product) and blank(PlanMessageQueuer.ProductCode)) then begin
        RecordCheckError(1058,"",-1,"Product");
        res = -1; 
        goto LPlanMessageQueueVcRecordCheck;
      end;
    otherwise
      RecordCheckError(50003,"",-1,"Product");
      res = -1;
      goto LPlanMessageQueueVcRecordCheck;
  end;
  if (PlanMessageQueuer.OKFlag!=0) then begin
    if (blank(PlanMessageQueuer.StartDate)) then begin
      RecordCheckError(1058,"",-1,"StartDate");
      res = -1; 
      goto LPlanMessageQueueVcRecordCheck;
    end;
    if (blank(PlanMessageQueuer.StartDate)) then begin
      RecordCheckError(1058,"",-1,"StartDate");
      res = -1; 
      goto LPlanMessageQueueVcRecordCheck;
    end;
    if (blank(PlanMessageQueuer.EndDate)) then begin
      RecordCheckError(1058,"",-1,"EndDate");
      res = -1; 
      goto LPlanMessageQueueVcRecordCheck;
    end;
    teststartdatef = true;
    if (stat==Rs_update) then begin
      if (PlanMessageQueuer.OKFlag!=0 and PlanMessageQueue2r.OKFlag!=0) then begin
        teststartdatef = false;
      end;
    end;
    if (teststartdatef) then begin
      if (PlanMessageQueuer.StartDate<CurrentDate) then begin
        RecordCheckError(20851,"",-1,"StartDate");
        res = -1; 
        goto LPlanMessageQueueVcRecordCheck;
      end;
    end;
    if (PlanMessageQueuer.EndDate<=PlanMessageQueuer.StartDate) then begin
      RecordCheckError(20851,"",-1,"EndDate");
      res = -1; 
      goto LPlanMessageQueueVcRecordCheck;
    end;
    if (PlanMessageQueuer.EndDate<=CurrentDate) then begin
      RecordCheckError(20851,"",-1,"EndDate");
      res = -1; 
      goto LPlanMessageQueueVcRecordCheck;
    end;
  end;
  
  if (PlanMessageQueuer.OKFlag!=0) then begin
    if (AllPlanMessageTextOKd(PlanMessageQueuer.SerNr)==false) then begin
      RecordCheckError(50005,"",-1,"Comment");
      res = -1; 
      goto LPlanMessageQueueVcRecordCheck;
    end;
  end;

  if (PlanMessageQueuer.SerNr<=0) then begin
    PlanMessageQueuer.SerNr = NextSerNr("PlanMessageQueueVc",CurrentDate,-1,false,"");
  end;
LPlanMessageQueueVcRecordCheck:;
  PlanMessageQueueVcRecordCheck = res;
  return;
end;

global
function LongInt PlanMessageTextVcRecordDefaults(var record PlanMessageTextVc PlanMessageTextr,record PlanMessageTextVc PlanMessageText2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  PlanMessageTextr.LastChanged = CurrentDate;
  PlanMessageTextr.LetterNr = -1;
  PlanMessageTextr.NewPresenceNr = -1;
  PlanMessageTextr.OldPresenceNr = -1;
  PlanMessageTextr.BackupPresenceNr = -1;
  PlanMessageTextVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt PlanMessageTextVcRecordDuplicate(var record PlanMessageTextVc PlanMessageTextr,record PlanMessageTextVc PlanMessageText2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  PlanMessageTextr.LastChanged = CurrentDate;
  PlanMessageTextr.LetterNr = -1;
  PlanMessageTextr.NewPresenceNr = -1;
  PlanMessageTextr.OldPresenceNr = -1;
  PlanMessageTextr.BackupPresenceNr = -1;
  PlanMessageTextr.OKFlag = 0;
  PlanMessageTextr.SentFlag = kPlannedMsgStatusNone;
  PlanMessageTextr.DeletedFlag = 0;
  PlanMessageTextr.Comment = "";
  PlanMessageTextVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt PlanMessageTextVcRecordSave(var record PlanMessageTextVc PlanMessageTextr,record PlanMessageTextVc PlanMessageText2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  PlanMessageTextr.LastChanged = CurrentDate;
  PlanMessageTextVcRecordSave = res;
  RETURN;
END;

global
function LongInt PlanMessageTextVcRecordUpdate(var record PlanMessageTextVc PlanMessageTextr,record PlanMessageTextVc PlanMessageText2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  PlanMessageTextr.LastChanged = CurrentDate;
  PlanMessageTextVcRecordUpdate = res;
  RETURN;
END;

global
function LongInt PlanMessageTextVcRecordCheck(var record PlanMessageTextVc PlanMessageTextr,record PlanMessageTextVc PlanMessageText2r,LongInt stat,LongInt long4)
begin
  record PlanMessageQueueVc PlanMessageQueuer;
  LongInt res;
  boolean letterf,messagef;

  res = 0;
  if (PlanMessageTextr.RegInCountry<=0 or PlanMessageTextr.RegInCountry>=99) then begin
    RecordCheckError(1008,"",-1,"RegInCountry");
    res = -1;
    goto LPlanMessageTextVcRecordCheck;
  end;
  PlanMessageQueuer.SerNr = PlanMessageTextr.SerNr;
  if (ReadFirstMain(PlanMessageQueuer,1,true)==false) then begin
    RecordCheckError(1008,"",-1,"SerNr");
    res = -1;
    goto LPlanMessageTextVcRecordCheck;
  end;
  
  if (PlanMessageQueuer.OKFlag!=0) then begin
    if (stat==Rs_insert) then begin
      RecordCheckError(50007,"",-1,"Comment");
      res = -1;
      goto LPlanMessageTextVcRecordCheck;
    end else begin
      if (PlanMessageText2r.OKFlag!=0 and PlanMessageTextr.OKFlag==0 and PlanMessageQueuer.OKFlag!=0) then begin
        RecordCheckError(50006,"",-1,"SerNr");
        res = -1;
        goto LPlanMessageTextVcRecordCheck;
      end;
    end;
  end;

  letterf = false;
  if (nonblank(PlanMessageTextr.CustCode)) then begin letterf = true; end;
  if (nonblank(PlanMessageTextr.Classification)) then begin letterf = true; end;
  if (nonblank(PlanMessageTextr.JobDesc)) then begin letterf = true; end;
  if (nonblank(PlanMessageTextr.CustCat)) then begin letterf = true; end;
  if (nonblank(PlanMessageTextr.ContClass)) then begin letterf = true; end;
  if (nonblank(PlanMessageTextr.ReplyToAddr)) then begin letterf = true; end;
  if (nonblank(PlanMessageTextr.Greet)) then begin letterf = true; end;
  if (nonblank(PlanMessageTextr.Signature)) then begin letterf = true; end;

  messagef = false;
  if (nonblank(PlanMessageTextr.Product) or nonblank(PlanMessageQueuer.ProductCode)) then begin messagef = true; end;

  switch (PlanMessageQueuer.AsMessage) begin
    case kPlannedMsgSendAsLetter:
      if (messagef) then begin
        RecordCheckError(50001,"",-1,"Product");
        res = -1;
        goto LPlanMessageTextVcRecordCheck;
      end;
      if (blank(PlanMessageTextr.CustCode)) then begin // If you want all, put *
        RecordCheckError(1058,"! If you want to send to multiple customers, please put a * in the customer code field",-1,"CustCode");
        res = -1; 
        goto LPlanMessageTextVcRecordCheck;
      end;
    case kPlannedMsgSendAsMessage:
      if (letterf) then begin
        RecordCheckError(50002,"",-1,"CustCode");
        res = -1;
        goto LPlanMessageTextVcRecordCheck;
      end;
      if (blank(PlanMessageTextr.Product) and blank(PlanMessageQueuer.ProductCode)) then begin
        RecordCheckError(1058,"",-1,"Product");
        res = -1; 
        goto LPlanMessageTextVcRecordCheck;
      end;
    otherwise
      RecordCheckError(50003,"",-1,"Product");
      res = -1;
      goto LPlanMessageTextVcRecordCheck;
  end;
  if (blank(PlanMessageTextr.LangCode)) then begin
    RecordCheckError(1058,"",-1,"LangCode");
    res = -1; 
    goto LPlanMessageTextVcRecordCheck;
  end;
  
  if (PlanMessageTextr.SerNr<=0) then begin
    PlanMessageTextr.SerNr = NextSerNr("PlanMessageTextVc",CurrentDate,-1,false,"");
  end;
LPlanMessageTextVcRecordCheck:;
  PlanMessageTextVcRecordCheck = res;
  return;
end;

global
updating function Boolean FlagMessageTextForDeletion(longint queuesernr,integer regincountry,string langcode)
begin
  boolean res;
  record PlanMessageTextVc oldPlanMessageTextr,PlanMessageTextr;
  
  PlanMessageTextr.SerNr = queuesernr;
  PlanMessageTextr.RegInCountry = regincountry;
  PlanMessageTextr.LangCode = langcode;
  if (ReadFirstMain(PlanMessageTextr,3,true)) then begin
    if (PlanMessageTextr.SentFlag==kPlannedMsgStatusPartiallySent or PlanMessageTextr.SentFlag==kPlannedMsgStatusSent) then begin
      RecordCopy(oldPlanMessageTextr,PlanMessageTextr);
      PlanMessageTextr.SentFlag = kPlannedMsgStatusWithdrawalPending;
      if (RecordUpdate(oldPlanMessageTextr,PlanMessageTextr,false)==0) then begin
        res = true;
      end;
    end else begin
      if (PlanMessageTextr.SentFlag==kPlannedMsgStatusPending) then begin
        RecordCopy(oldPlanMessageTextr,PlanMessageTextr);
        PlanMessageTextr.SentFlag = kPlannedMsgStatusWithdrawn;
        if (RecordUpdate(oldPlanMessageTextr,PlanMessageTextr,false)==0) then begin
          res = true;
        end;
      end;
    end;
  end;
  
  FlagMessageTextForDeletion = res;
  return;
end;

global
updating function integer FlagMessageQueueForDeletion(longint queuesernr)
begin
  boolean foundf,firstf;
  integer res;
  record PlanMessageTextVc oldPlanMessageTextr,PlanMessageTextr;
  
  firstf = true;
  foundf = true;
  PlanMessageTextr.SerNr = queuesernr;
  while (LoopMain(PlanMessageTextr,1,foundf)) begin
    if (PlanMessageTextr.SerNr!=queuesernr) then begin foundf = false; end;
    if (foundf) then begin
      if (PlanMessageTextr.SentFlag==kPlannedMsgStatusPartiallySent or PlanMessageTextr.SentFlag==kPlannedMsgStatusSent) then begin
        firstf = false;
        RecordCopy(oldPlanMessageTextr,PlanMessageTextr);
        PlanMessageTextr.SentFlag = kPlannedMsgStatusWithdrawalPending;
        if (RecordUpdate(oldPlanMessageTextr,PlanMessageTextr,false)!=0) then begin
          res = res+1;
        end;
      end else begin
        if (PlanMessageTextr.SentFlag==kPlannedMsgStatusPending) then begin
          firstf = false;
          RecordCopy(oldPlanMessageTextr,PlanMessageTextr);
          PlanMessageTextr.SentFlag = kPlannedMsgStatusWithdrawn;
          if (RecordUpdate(oldPlanMessageTextr,PlanMessageTextr,false)!=0) then begin
            res = res+1;
          end;
        end;
      end;
    end;
  end;
  
  if (firstf) then begin
    res = -1;
  end;
  
  FlagMessageQueueForDeletion = res;
  return;
end;
