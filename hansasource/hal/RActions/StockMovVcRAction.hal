external function Boolean Date2Test2(string,Date,string,Integer,Boolean);
external function Boolean HasIntegratedNL();
external function string 255 StripCharacter(string,string);
external function Boolean IsCapitalLetter(string); 
external function Integer InString2(string,string);
external function string 255 UpdateOfficialSerNrSerie(Integer,Integer,Integer,string,boolean);
external function Time AddTime2(Time,LongInt);
external function Boolean IsPostcodeFormatCorrect(string);
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external function Integer CheckSerialatPositionInItemHist(string,string,string,string,val);
external function Boolean IsDigit(string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external function Boolean TestNextOfficialSerialNr_StockMovVc(row LegalInvNrBlock,string,record StockMovVc,Boolean,Integer);
external procedure FindNextStockMovVcOfficialSerialNr(var record StockMovVc,Integer);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure FindStockValueInclStockReserv(LongInt,string,string,string,var record ItemStatusVc,var val);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external updating procedure UpdateTrans_Stock(record TRVc);
external function Integer IsUnOKAllowed_StockMovVc(record StockMovVc);
external function Boolean AllowedToTakeFromThisLoc(record LocationVc);
external function Integer CheckStockMovRowFromPosition(record StockMovVc,row StockMovVc,record LocationVc,record INVc,
                                              Integer,Boolean,var LongInt,var string,var integer,var string,boolean);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure UpdateStockResFromStockMov(record StockMovVc);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function Integer MakeTransFromStockMov(record TRVc,record StockMovVc,record LocationVc,record LocationVc,Boolean,Integer);
external updating procedure StockMovUpdateReserved(record StockMovVc,Boolean,Boolean);
external function Boolean StockMovVc_PasteQuant(var record StockMovVc,Integer);
external procedure StockMovSumUp(var record StockMovVc);
external function Boolean StockMovVc_PasteArtCode(var record StockMovVc,Integer,Integer,var array string);
external function string 20 FindFreePositionInLocArea(record INVc,string,record LocationVc,string,string);
external updating procedure UpdatePosition(string,string,string,val,val,val);
external updating function Boolean UpdateForkLiftQueue(record StockMovVc,Boolean);
external updating procedure SetPositionStatus(string,Integer);
external function Integer CheckPosition(string,string,Integer,val,val,val);
external function Integer CheckObjs(string,string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external updating procedure StockMovUpdateCostPrice(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateItemHist(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateStock(record StockMovVc,record StockMovVc,Boolean,Boolean,Boolean);
external procedure StockMovSumUp(var record StockMovVc);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure B1ToB2StrVal(string,val,val,var string);
external updating function Boolean UpdateIntOrderFromStockMov(record StockMovVc,record StockMovVc,Boolean);
external procedure UpdateStockMovFIFO(var record StockMovVc,record StockMovVc,Integer);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external function Boolean SerialNrAvail(string,string,string,val);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestStockMovVc(LongInt,Date,var Boolean);

function Integer CheckStockMovRowToPosition(record StockMovVc SMp,row StockMovVc StockMovrw,record LocationVc LocToRec,record INVc INr,
                                            Integer rownr,var LongInt error,var string errorstr,var integer errorrownr,var string fieldstr,boolean UnOKedCheckSerialf)
begin
  Integer res;
  string 20 topos,topos2;
  record PISVc PISr;
  val w,h,d,m;
  record INVc IN2r;
  row StockMovVc StockMov2rw;
  Integer j,errcode;
  
  topos = StockMovrw.ToPosCode;
  if (blank(topos)) then begin
    topos = SMp.ToPos;
  end;
  if (LocToRec.RequirePos!=0) then begin
    if (blank(topos)) then begin
      error = 1854;
      errorstr = topos;
      errorrownr = -1;
      fieldstr = "ToPos";        
      res = 1854; 
      goto LCheckStockMovRowToPosition;
    end;  
    w = 0;
    h = 0;
    d = 0;
    m = StockMovrw.Quant/INr.QtyonPallet;
    if (INr.PalletWidth!=0) then begin w = w + INr.PalletWidth*m; end;
    if (INr.PalletHeight!=0) then begin h = h + INr.PalletHeight*m; end;
    if (INr.PalletDepth!=0) then begin d = d + INr.PalletDepth*m; end;
    for (j=0;j<rownr;j=j+1) begin
      MatRowGet(SMp,j,StockMov2rw);
      topos2 = StockMov2rw.ToPosCode;
      if (blank(topos2)) then begin
        topos2 = SMp.ToPos;
      end;
      if (topos==topos2) then begin
        if (ReadFirstItem(StockMov2rw.ArtCode,IN2r,true,true)) then begin
          m = 0;
          if (IN2r.QtyonPallet>0) then begin
            m = StockMov2rw.Quant/IN2r.QtyonPallet;
          end;              
          if (IN2r.PalletWidth!=0) then begin
            w = w + IN2r.PalletWidth*m;
          end;
          if (IN2r.PalletHeight!=0) then begin
            h = h + IN2r.PalletHeight*m;
          end;
          if (IN2r.PalletDepth!=0) then begin
            d = d + IN2r.PalletDepth*m;
          end;
        end;
      end;
    end;    
    errcode = CheckPosition(topos,LocToRec.Code,LocToRec.RequirePos,w,h,d);      
    if (errcode!=0) then begin
      if (nonblank(StockMovrw.ToPosCode)) then begin
        error = errcode;
        errorstr = topos;
        errorrownr = rownr;
        fieldstr = "ToPosCode";               
      end else begin
        error = errcode;
        errorstr = topos;
        errorrownr = -1;
        fieldstr = "ToPos";              
      end;
      res = errcode; 
      goto LCheckStockMovRowToPosition;
    end;    
  end;
LCheckStockMovRowToPosition:;
  CheckStockMovRowToPosition = res;
  return;
end;

function val GetTotOrdQtyForAllMatLines(val CurRowOrdQuant,string CurRowArtCode,integer currow,record StockMovVc SMp)
begin
  val res;
  row StockMovVc StockMovrw;
  boolean testf;
  integer rwcnt,i;

  res = CurRowOrdQuant;
  rwcnt = MatRowCnt(SMp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(SMp,i,StockMovrw);
    testf = true;
    if (blank(StockMovrw.ArtCode) or StockMovrw.OrdQuant==blankval) then begin testf = false; end;
    if (testf) then begin 
      if (i==currow) then begin testf = false; end; 
    end;   
    if (testf) then begin 
      if (CurRowArtCode!=StockMovrw.ArtCode) then begin testf = false; end; 
    end;       
    if (testf) then begin 
      res = res + StockMovrw.OrdQuant;
    end;     
  end;
  GetTotOrdQtyForAllMatLines = res;
  return;
end;

function Integer ValidateBulkSerialNoRow(record SerNrTrackBlock SNrb,record StockMovVc SMr,row StockMovVc StockMovrw,Integer currow,Boolean sentquantf,var string gotofield,var Integer gotorow)
begin
  Integer res;
  Integer j,rwcnt;
  row StockMovVc StockMov2rw;
  Boolean testf;
  string 255 serialnr;
  string 255 serialnr2;
  val qty,qty2,quant,quant2;

  gotorow = -1;
  gotofield = "";  
  if (sentquantf) then begin
    quant = StockMovrw.SentQuant;
  end else begin
    quant = StockMovrw.Quant;
  end;
  if (quant>1) then begin
    rwcnt = len(StockMovrw.SerialNr);
    for (j=0;j<rwcnt;j=j+1) begin
      if ((IsDigit(Mid(StockMovrw.SerialNr,j,1))==false) and (Mid(StockMovrw.SerialNr,j,1)!=":")) then begin
        res = 20434;
        gotorow = currow;
        gotofield = "SerialNr";
        goto LValidateBulkSerialNoRow;
      end;
    end;
  end;
  rwcnt = MatRowCnt(SMr);
  serialnr = FirstInRange(StockMovrw.SerialNr,60);
  while (nonblank(serialnr)) begin
    for (j=0;j<currow;j=j+1) begin  
      MatRowGet(SMr,j,StockMov2rw);
      if (sentquantf) then begin
        quant2 = StockMov2rw.SentQuant;
      end else begin
        quant2 = StockMov2rw.Quant;
      end;
      if (quant2!=0) then begin
        if (StockMovrw.ArtCode==StockMov2rw.ArtCode) then begin
          qty2 = blankval;
          serialnr2 = FirstInRange(StockMov2rw.SerialNr,60);
          while (nonblank(serialnr2)) begin
            if (serialnr==serialnr2) then begin
              res = 1241;
              gotorow = currow;
              gotofield = "SerialNr";
              goto LValidateBulkSerialNoRow;
            end;
            qty2 = qty2 + 1;
            serialnr2 = NextSerialNumber(StockMov2rw.ArtCode,serialnr2,SNrb);
            if (qty2>=quant2) then begin serialnr2 = ""; end;
          end;
        end;
      end;
    end;
    qty = qty + 1;
    serialnr = NextSerialNumber(StockMovrw.ArtCode,serialnr,SNrb);
    if (qty>=quant) then begin serialnr = ""; end;
  end;
LValidateBulkSerialNoRow:;  
  ValidateBulkSerialNoRow = res;
  return;
end;

function Integer CheckStockMovRowSerial(record StockMovVc SMp,row StockMovVc StockMovrw,record INVc INr,                                  
                                        record MainStockBlock MSb,record SerNrTrackBlock SNrb,Integer rownr,
                                        string frlocation,string tolocation,Boolean sentquantf,LongInt check,
                                        var LongInt error,var string errorstr,var integer errorrownr,var string fieldstr,
                                        boolean UnOKedCheckSerialf)
begin
  integer res;
  
  if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
    if (StockMovrw.OrdQuant!=0) then begin
      if (SNrb.BulkSerialNos==0) then begin
        if (IsSerialNrCorrect(StockMovrw.SerialNr)==false) then begin
          error = 24154;
          errorstr = StockMovrw.SerialNr;
          errorrownr = rownr;
          fieldstr = "SerialNr";                
          res = 1209; 
          goto LCheckStockMovRowSerial;
        end;        
      end;        
      if (blank(StockMovrw.SerialNr)) then begin
        error = 1239;
        errorstr = "";
        errorrownr = rownr;
        fieldstr = "SerialNr";                 
        res = 1239; 
        goto LCheckStockMovRowSerial;
      end;
    end;    
  end;
  if (((INr.SerNrf>0) and (INr.SerNrf<3))) then begin
    if (StockMovrw.Quant!=0) then begin
      if (StockMovrw.Quant!=1) then begin 
        if (SerialNrAvail(StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,StockMovrw.Quant)==false) then begin
          error = 1242;  //"Only allowed one unit of the same Serial Number"
          errorstr = "";
          errorrownr = rownr;
          fieldstr = "Quant";              
          res = 1240; 
          goto LCheckStockMovRowSerial;
        end;      
      end; 
      if (nonblank(StockMovrw.SerialNr)) then begin 
        if (SerialNrAvail(StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,1)==false) then begin
          error = 1240;   //"Serial Number not registered in this Location"
          errorstr = "";
          errorrownr = rownr;
          fieldstr = "SerialNr";              
          res = 1240; 
          goto LCheckStockMovRowSerial;
        end;      
      end else begin
//        error = 1239;  //"Enter serial number"
//        errorstr = "";
//        errorrownr = rownr;
//        fieldstr = "SerialNr";                 
//        res = 1239; 
//        goto LCheckStockMovRowSerial;        
      end;
    end;
  end;
LCheckStockMovRowSerial:;  
  CheckStockMovRowSerial = res;
end;

function Integer CheckStockMovRow(record StockMovVc SMp,row StockMovVc StockMovrw,record INVc INr,                                  
                                  record MainStockBlock MSb,record SerNrTrackBlock SNrb,Integer rownr,
                                  string frlocation,string tolocation,Boolean sentquantf,LongInt check,
                                  var LongInt error,var string errorstr,var integer errorrownr,var string fieldstr,boolean UnOKedCheckSerialf)
begin
  Integer res;
  record INVc IN2r;
  record ItemStatusVc ISr;
  record PISVc PISr;
  val w,h,d,m;
  val prev,stockreservq;
  row StockMovVc StockMov2rw;
  Integer errcode;
  string 255 objstr,errstr;
  Integer j;
  val quant;
  record LocationVc ToLocr;
  val serqty;
  string 255 serialnr,errofield;
  
  ToLocr.Code = tolocation;
  if (ReadFirstMain(ToLocr,1,true)) then begin
  end;
  if (sentquantf) then begin
    quant = StockMovrw.SentQuant;
  end else begin
    quant = StockMovrw.Quant;
  end;
  if (quant<0) then begin
    if (sentquantf) then begin
      error = 1574;
      errorstr = "";
      errorrownr = rownr;
      fieldstr = "SentQuant";            
    end else begin
      error = 1574;
      errorstr = errstr;
      errorrownr = rownr;
      fieldstr = "Quant";              
    end;
    res = 1574; 
    goto LCheckStockMovRow;
  end;
  if (blank(quant)) then begin
    if (sentquantf) then begin
      error = 1058;
      errorstr = "";
      errorrownr = rownr;
      fieldstr = "SentQuant";            
    end else begin
      error = 1058;
      errorstr = "";
      errorrownr = rownr;
      fieldstr = "Quant";              
    end;
    res = 1058;
    goto LCheckStockMovRow;
  end;    
  if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
    if (ToLocr.Type==1) then begin
      if (CheckSerialStatus(StockMovrw.ArtCode,StockMovrw.SerialNr,errstr)==2) then begin
        error = 2210;
        errorstr = " " & errstr;
        errorrownr = rownr;
        fieldstr = "SerialNr";          
        res = -1;
        goto LCheckStockMovRow;
      end;
    end;
  end;
  if (StockRecordForLocationAllowed("FromStockMovVc",frlocation,StockMovrw.ArtCode,SMp.SentTransDate,SMp.SentOKFlag,errcode,errstr)==false) then begin
    error = errcode;
    errorstr = errstr;
    errorrownr = rownr;
    fieldstr = "ArtCode";          
    res = -1;
    goto LCheckStockMovRow;
  end;
  if (StockRecordForLocationAllowed("ToStockMovVc",tolocation,StockMovrw.ArtCode,SMp.TransDate,SMp.OKFlag,errcode,errstr)==false) then begin
    error = errcode;
    errorstr = errstr;
    errorrownr = rownr;
    fieldstr = "ArtCode";         
    res = -1;
    goto LCheckStockMovRow;
  end;
  if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
    if (quant!=0) then begin
      if (SNrb.BulkSerialNos==0) then begin
        if (IsSerialNrCorrect(StockMovrw.SerialNr)==false) then begin
          error = 24154;
          errorstr = StockMovrw.SerialNr;
          errorrownr = rownr;
          fieldstr = "SerialNr";                
          res = 1209; 
          goto LCheckStockMovRow;
        end;        
      end;        
      if (blank(StockMovrw.SerialNr)) then begin
        error = 1239;
        errorstr = "";
        errorrownr = rownr;
        fieldstr = "SerialNr";                 
        res = 1239; 
        goto LCheckStockMovRow;
      end;
    end;    
    if (INr.SerNrf==1) then begin
      if (SNrb.BulkSerialNos!=0) then begin
        errcode = ValidateBulkSerialNoRow(SNrb,SMp,StockMovrw,rownr,sentquantf,errofield,j);
        if (errcode) then begin
          error = errcode;
          errorstr = "";
          errorrownr = j;
          fieldstr = errofield;               
          res = -1;
          goto LCheckStockMovRow;
        end;
      end else begin
        if (StockMovrw.Quant>1 or StockMovrw.Quant<0) then begin
          error = 1242;
          errorstr = "";
          errorrownr = rownr;
          fieldstr = "SerialNr";             
          res = 1242; 
          goto LCheckStockMovRow;
        end;
        if (StockMovrw.SentQuant>1) then begin
          error = 1242;
          errorstr = "";
          errorrownr = rownr;
          fieldstr = "SerialNr";                
          res = 1242; 
          goto LCheckStockMovRow;
        end;
      end;
      if (SNrb.BulkSerialNos!=0) then begin
        serqty = blankval;
        serialnr = FirstInRange(StockMovrw.SerialNr,60);
        while (nonblank(serialnr)) begin
          if (SerialNrAvail(StockMovrw.ArtCode,serialnr,frlocation,1.00)==false) then begin
            error = 1240;
            errorstr = "";
            errorrownr = rownr;
            fieldstr = "SerialNr";               
            res = 1240; 
            goto LCheckStockMovRow;
          end;
          serqty = serqty + 1;
          serialnr = NextSerialNumber(StockMovrw.ArtCode,serialnr,SNrb);
          if (serqty>=StockMovrw.Quant) then begin serialnr = ""; end;
        end;
      end else begin
        if (quant!=0) then begin
          if (SerialNrAvail(StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,quant)==false) then begin
            error = 1240;
            errorstr = "";
            errorrownr = rownr;
            fieldstr = "SerialNr";              
            res = 1240; 
            goto LCheckStockMovRow;
          end;
        end;
      end;
      for (j=0;j<rownr;j=j+1) begin
        MatRowGet(SMp,j,StockMov2rw);
        if ((StockMovrw.ArtCode==StockMov2rw.ArtCode) and (StockMovrw.SerialNr==StockMov2rw.SerialNr)) then begin
          error = 1240;
          errorstr = "";
          errorrownr = rownr;
          fieldstr = "SerialNr";                 
          res = 1240; 
          goto LCheckStockMovRow;
        end;
      end;      
    end else begin
      prev = 0;
      for (j=0;j<rownr;j=j+1) begin
        MatRowGet(SMp,j,StockMov2rw);
        if ((StockMovrw.ArtCode==StockMov2rw.ArtCode) and (StockMovrw.SerialNr==StockMov2rw.SerialNr)) then begin
          if (sentquantf) then begin
            prev = prev + StockMov2rw.SentQuant;
          end else begin
            prev = prev + StockMov2rw.Quant;
          end;
        end;
      end;
      prev = prev + quant;
      if (SerialNrAvail(StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,prev)==false) then begin
        error = 1240;
        errorstr = "";
        errorrownr = rownr;
        fieldstr = "SerialNr";          
        res = 1240; 
        goto LCheckStockMovRow;
      end;
    end;
    if (nonblank(StockMovrw.FrPosCode) and nonblank(StockMovrw.SerialNr)) then begin           
      errcode = CheckSerialatPositionInItemHist(StockMovrw.ArtCode,frlocation,StockMovrw.FrPosCode,StockMovrw.SerialNr,prev);
      if (errcode!=0) then begin 
        error = 15057;
        errorstr = " : " & USetStr(12872) & " " & USetStr(16148);
        errorrownr = rownr;
        fieldstr = "FrPosCode";          
        res = 15057;
        goto LCheckStockMovRow;
      end; 
    end;
  end;    
  if (check!=0) then begin
    if (MSb.dontAllowOvership==1) then begin
      if (SMp.OKFlag==1) or (SMp.SentOKFlag==1) then begin
        if (INr.ItemType==1) then begin        
          prev = 0;
          for (j=0;j<rownr;j=j+1) begin           
            MatRowGet(SMp,j,StockMov2rw);
            if ((StockMovrw.ArtCode==StockMov2rw.ArtCode) and ((StockMovrw.SerialNr==StockMov2rw.SerialNr) and (SNrb.BulkSerialNos==0))) then begin
              if (sentquantf) then begin
                prev = prev + StockMov2rw.SentQuant;
              end else begin
                prev = prev + StockMov2rw.Quant;
              end;
            end;
          end;
//          FindStockValue(StockMovrw.ArtCode,frlocation,ISr);            
          if (SNrb.BulkSerialNos!=0) then begin
            FindStockValueInclStockReserv(-1,StockMovrw.ArtCode,"",frlocation,ISr,stockreservq);
          end else begin
            FindStockValueInclStockReserv(-1,StockMovrw.ArtCode,StockMovrw.SerialNr,frlocation,ISr,stockreservq);
          end;
          prev = prev + quant;
          if (ISr.Instock<(prev+stockreservq)) then begin
            if (sentquantf) then begin
              error = 1247;
              errorstr = "";
              errorrownr = rownr;
              fieldstr = "SentQuant";                  
            end else begin
              error = 1247;
              errorstr = "";
              errorrownr = rownr;
              fieldstr = "Quant";                      
            end;
            res = 1247;
            goto LCheckStockMovRow;
          end;
        end;
      end;
    end;
  end;  
LCheckStockMovRow:;  
  CheckStockMovRow = res;
  return;
end;

global
updating function Integer CheckStockMovRecord(var record StockMovVc SMp,record StockMovVc SM2p,LongInt stat,LongInt check,Boolean disperrf,
                                              var LongInt error,var string errorstr,var integer rownr,var string fieldstr,boolean UnOKedCheckSerialf)
begin  
  record MainStockBlock MSb;
  record LocationVc LocFrRec;
  record LocationVc LocToRec;
  record LocationVc LocThrouRec;
  record ItemStatusVc ISr;
  record INVc INr;
  row StockMovVc StockMovrw;
  row StockMovVc StockMov2rw;
  record StockMovVc locSMr;
  record TRVc gTRp;
  Integer res;
  LongInt oldnr,newnr;
  Integer i,rwcnt,j,orwcnt;
  Integer insertmode,updatemode;
  Boolean transreceivef,gentrans,transsendf,testf,test2f,checksendf,checkreceivef,confirmedf;
  val prev,orsrv;
  Integer errcode;
  LongInt sernr;
  string 20 frlocation,tolocation;
  string 255 frpos,topos;
  record POSVc POSr;
  string 255 objstr,errstr,oldOfficialSerNr,tstr,tstr2,c;
  record OrdSettBlock OrdSettRec;
  Boolean unokf,intorf,shf;
  transaction string 255 gRuniningMaint;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Date td;
  record SerNrTrackBlock SNrb;
  record IntORVc IntORr;
  row IntORVc IntORrw;
  record SHVc SHr;
  row SHVc SHrw;
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;
  LongInt dummyl;
  record IVOfficialSerBlock IOSTr;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = SMp.SerNr;
  oldOfficialSerNr = SMp.OfficialSerNr;
  BlockLoad(MSb);
  BlockLoad(SNrb);
  BlockLoad(OrdSettRec);
  if (stat==updatemode) then begin
    if (SMp.SerNr<=0) and (SM2p.OKFlag==0) then begin
      SMp.SerNr = SM2p.SerNr;
    end;
  end;      

  if (SMp.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (SM2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_StockMovVc(SMp);
    if (errcode!=0) then begin
      error = errcode;
      errorstr = "";
      rownr = -1;
      fieldstr = "TransDate";            
      res = -1; 
    end;
    goto LCheckStockMovRecord;
  end;  
  if (stat==Rs_update) then begin
    if (SM2p.OKFlag!=0) then begin
      goto LCheckStockMovRecord;
    end;
  end;
  
  transreceivef = false;
  if (SMp.OKFlag!=0) then begin
    if (stat==insertmode) then begin transreceivef = true; end;
    if (stat==updatemode) then begin
      if (SM2p.OKFlag==0) then begin
        transreceivef = true;
        if (MSb.SetDelDateToCurrent!=0) then begin
          SMp.TransDate = CurrentDate;
        end;
      end;
    end;
  end;
  if (SMp.OrdFlag!=0) then begin
    if (stat==insertmode) then begin confirmedf = true; end;
    if (stat==updatemode) then begin
      if ((SM2p.OrdFlag==0) and (SMp.OrdFlag!=0)) then begin confirmedf = true; end;
    end;
  end;
  if (stat==updatemode) then begin
    if ((SM2p.OrdFlag==0) and (SMp.OrdFlag!=0)) then begin
      if (MSb.SetDelDateToCurrent!=0) then begin
        SMp.OrdTransDate = CurrentDate;
      end;
    end;
  end;    
  transsendf = false;
  if (SMp.SentOKFlag!=0) then begin
    if (stat==insertmode) then begin transsendf = true; end;
    if (stat==updatemode) then begin
      if (SM2p.SentOKFlag==0) then begin
        transsendf = true;
        if (MSb.SetDelDateToCurrent!=0) then begin
          SMp.SentTransDate = CurrentDate;
        end;
      end;
    end;
  end;

  if (SMp.SentOKFlag!=0) then begin
    if (stat==insertmode) then begin 
      if (nonblank(SMp.ThrouLocation)) then begin
        checksendf = true;
      end else begin
        checkreceivef = true;
      end;
    end;
    if (stat==updatemode) then begin
      if (SM2p.SentOKFlag==0) then begin
        if (nonblank(SMp.ThrouLocation)) then begin
          checksendf = true;
        end else begin
          checkreceivef = true;
        end;
      end;
    end;
  end;
  if (UnOKedCheckSerialf) then begin
    if (stat==Rs_normal) then begin 
      if (nonblank(SMp.ThrouLocation)) then begin
        checksendf = true;
      end else begin
        checkreceivef = true;
      end;
    end;
  end;  

  switch (stat) begin
    case Rs_update:
      if (SMp.OKFlag!=0) and (SM2p.OKFlag==0) and (SM2p.SentOKFlag==0) then begin
        SMp.RegDate = CurrentDate;
        SMp.RegTime = CurrentTime;
      end;
    otherwise
      if (SMp.OKFlag!=0) then begin
        SMp.RegDate = CurrentDate;
        SMp.RegTime = CurrentTime;
      end;
  end;
  if (SMp.IntORNo>0) then begin
    IntORr.SerNr = SMp.IntORNo;
    intorf = ReadFirstMain(IntORr,1,true);
  end;
  if (SMp.TransNr>0) then begin
    switch (SMp.FileName) begin
      case "SHVc":
        SHr.SerNr = SMp.TransNr;
        shf = ReadFirstMain(SHr,1,true);
    end;
  end;
  if (nonblank(SMp.SentTransDate)) then begin
    if (SMp.OrdTransDate>SMp.SentTransDate) then begin
      error = 20094;
      errorstr = "";
      rownr = -1;
      fieldstr = "SentTransDate";         
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;
  if (nonblank(SMp.TransDate)) then begin
    if (SMp.SentTransDate>SMp.TransDate) then begin
      error = 20095;
      errorstr = "";
      rownr = -1;
      fieldstr = "TransDate";       
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;
  if (blankdate(SMp.OrdTransDate)) then begin
    error = 1058;
    errorstr = "";
    rownr = -1;
    fieldstr = "OrdTransDate";        
    res = -1;
    goto LCheckStockMovRecord;
  end;

  if (SMp.StockMovType==kStockMovTypeConsigment) or (SMp.StockMovType==kStockMovTypeThirdEntGoodsTransport) or (SMp.StockMovType==kStockMovTypeGlobalTransport) then begin
    if (SMp.OrderNr<=0) then begin
      error = 23302;
      errorstr = "";
      rownr = -1;
      fieldstr = "StockMovType";         
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;
  if (SMp.StockMovType==kStockMovTypeOwnGoodsTransport) then begin
    if (SMp.OrderNr>0) then begin
      error = 23302;
      errorstr = "";
      rownr = -1;
      fieldstr = "StockMovType";            
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;

  if (transsendf) then begin
    if (disperrf) then begin
      if (Date2Test2("StockMovVc",SMp.SentTransDate,"SentTransDate",-1,false)==false) then begin
        error = 1024;
        errorstr = "";
        rownr = -1;
        fieldstr = "SentTransDate";        
        res = 1024;
        goto LCheckStockMovRecord;
      end;  
      if (DisallowFutureDateCheck(disperrf,SMp.SentTransDate,"SentTransDate",-1)) then begin
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
  end;
  if (transreceivef==false) and nonblankdate(SMp.SentTransDate) then begin
    if (SMp.SerNr==-1) then begin
      SMp.SerNr = NextSerNr("StockMovVc",SMp.SentTransDate,-1,false,"");
    end;
    if (SerNrTestStockMovVc(SMp.SerNr,SMp.SentTransDate,gentrans)==false) then begin
      if (check>0) then begin
        error = 1557;
        errorstr = "";
        rownr = -1;
        fieldstr = "SerNr";        
        res = 1557; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (disperrf) then begin
      if (Date2Test("StockMovVc",SMp.SentTransDate,"SentTransDate",-1)==false) then begin
        res = -1;
        goto LCheckStockMovRecord;
      end;  
      if (DisallowFutureDateCheck(disperrf,SMp.SentTransDate,"SentTransDate",-1)) then begin
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
  end else begin
    if (SMp.SerNr<=0) then begin
      SMp.SerNr = NextSerNr("StockMovVc",SMp.OrdTransDate,-1,false,"");
    end;
    if (SerNrTestStockMovVc(SMp.SerNr,SMp.OrdTransDate,gentrans)==false) then begin
      if (check>0) then begin
        error = 1557;
        errorstr = "";
        rownr = -1;
        fieldstr = "SerNr";       
        res = 1557; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (disperrf) then begin
      if (SMp.OKFlag==1) then begin
        if (Date2Test("StockMovVc",SMp.TransDate,"TransDate",-1)==false) then begin
          error = 0;
          rownr = -1;
          fieldstr = "TransDate";       
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (DisallowFutureDateCheck(disperrf,SMp.TransDate,"TransDate",-1)) then begin
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;    
    end;
  end;
  if (nonblank(SMp.SentTransDate)) then begin
    if (HasLocalization("PRT")) then begin
      if (SMp.TransDate!=SMp.SentTransDate) then begin
        error = 1142;
        errorstr = "";
        rownr = -1;
        fieldstr = "TransDate";            
        res = -1; 
        goto LCheckStockMovRecord;
      end;
    end;
  end;
  if (nonblankdate(SMp.PlanSendDate)) then begin
    if (HasLocalization("PRT")) then begin
      if (SM2p.SentOKFlag==0 and SM2p.OKFlag==0) then begin
        if (SMp.PlanSendDate<SMp.TransDate) then begin
          error = 1142;
          errorstr = "";
          rownr = -1;
          fieldstr = "PlanSendDate";            
          res = -1; 
          goto LCheckStockMovRecord;
        end;
      end;
      if (SM2p.SentOKFlag==0 and SM2p.OKFlag==0) then begin
        if (SMp.PlanSendDate==SMp.TransDate) then begin
          if (SMp.PlanSendTime<AddTime2(CurrentTime,1)) and (nonblanktime(SMp.PlanSendTime)) then begin
            error = 20866;
            errorstr = "";
            rownr = -1;
            fieldstr = "PlanSendTime";              
            res = -1; 
            goto LCheckStockMovRecord;
          end;
        end;
      end;
    end;
  end;

  if (HasLocalization("PRT")) then begin
    BlockLoad(CUUerLb);  
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = SMp.FrAddr0; errstr = "FrAddr0";
      case kCountryAddrLineUserAddr1: tstr = SMp.FrAddr1; errstr = "FrAddr1";
      case kCountryAddrLineUserAddr2: tstr = SMp.FrAddr2; errstr = "FrAddr2";
      case kCountryAddrLineUserAddr3: tstr = SMp.FrAddr3; errstr = "FrAddr3";
      case kCountryAddrLineUserAddr4: tstr = SMp.FrAddr4; errstr = "FrAddr4";
    end;
    if ((nonblank(SMp.FrAddr2)) and (tstr=="Portugal")) then begin
      if (IsPostcodeFormatCorrect(SMp.FrAddr2)==false) then begin
        error = 24620;
        errorstr = tstr;
        rownr = -1;
        fieldstr = "FrAddr2";            
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        error = 20277;
        errorstr = tstr;
        rownr = -1;
        fieldstr = errstr;          
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = SMp.ThrouAddr0; errstr = "ThrouAddr0";
      case kCountryAddrLineUserAddr1: tstr = SMp.ThrouAddr1; errstr = "ThrouAddr1";
      case kCountryAddrLineUserAddr2: tstr = SMp.ThrouAddr2; errstr = "ThrouAddr2";
      case kCountryAddrLineUserAddr3: tstr = SMp.ThrouAddr3; errstr = "ThrouAddr3";
      case kCountryAddrLineUserAddr4: tstr = SMp.ThrouAddr4; errstr = "ThrouAddr4";
    end;
    if ((nonblank(SMp.ThrouAddr2)) and (tstr=="Portugal")) then begin
      if (IsPostcodeFormatCorrect(SMp.ThrouAddr2)==false) then begin
        error = 24620;
        errorstr = tstr;
        rownr = -1;
        fieldstr = "ThrouAddr2";            
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        error = 20277;
        errorstr = tstr;
        rownr = -1;
        fieldstr = errstr;            
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = SMp.ToAddr0; errstr = "ToAddr0";
      case kCountryAddrLineUserAddr1: tstr = SMp.ToAddr1; errstr = "ToAddr1";
      case kCountryAddrLineUserAddr2: tstr = SMp.ToAddr2; errstr = "ToAddr2";
      case kCountryAddrLineUserAddr3: tstr = SMp.ToAddr3; errstr = "ToAddr3";
      case kCountryAddrLineUserAddr4: tstr = SMp.ToAddr4; errstr = "ToAddr4";
    end;
    if ((nonblank(SMp.ToAddr2)) and (tstr=="Portugal")) then begin
      if (IsPostcodeFormatCorrect(SMp.ToAddr2)==false) then begin
        error = 24620;
        errorstr = tstr;
        rownr = -1;
        fieldstr = "ToAddr2";           
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        error = 20277;
        errorstr = tstr;
        rownr = -1;
        fieldstr = errstr;           
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    if (blank(SMp.FrAddr0) and blank(SMp.FrAddr1)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "FrAddr0";        
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (blank(SMp.FrAddr2)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "FrAddr2";           
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (blank(SMp.FrAddr3)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "FrAddr3";        
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (blank(SMp.FrAddr4)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "FrAddr4";         
      res = -1;
      goto LCheckStockMovRecord;
    end;

    if (nonblank(SMp.ThrouLocation)) then begin
      if (blank(SMp.ThrouAddr0) and blank(SMp.ThrouAddr1)) then begin
        error = 20276;
        errorstr = "";
        rownr = -1;
        fieldstr = "ThrouAddr0";             
        res = -1;
        goto LCheckStockMovRecord;
      end;
      if (blank(SMp.ThrouAddr2)) then begin
        error = 20276;
        errorstr = "";
        rownr = -1;
        fieldstr = "ThrouAddr2";            
        res = -1;
        goto LCheckStockMovRecord;
      end;
      if (blank(SMp.ThrouAddr3)) then begin
        error = 20276;
        errorstr = "";
        rownr = -1;
        fieldstr = "ThrouAddr3";             
        res = -1;
        goto LCheckStockMovRecord;
      end;
      if (blank(SMp.ThrouAddr4)) then begin
        error = 20276;
        errorstr = "";
        rownr = -1;
        fieldstr = "ThrouAddr4";         
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
    if (blank(SMp.ToAddr0) and blank(SMp.ToAddr1)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "ToAddr0";           
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (blank(SMp.ToAddr2)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "ToAddr2";           
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (blank(SMp.ToAddr3)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "ToAddr3";          
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (blank(SMp.ToAddr4)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "ToAddr4";        
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (nonblank(SMp.OfficialSerNr)) then begin
      if (HasLocalization("PRT")) then begin 
        switch (LINrbrw.RegType) begin
          case kOfficialNumTypeManualStockMovVc:
            if (SMp.Status!=kRecordStatusManual) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeRecoverdStockMovVc:
            if (SMp.Status!=kRecordStatusRecovered) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeManualOwnGoodsTransStockMovVc:
            if (SMp.Status!=kRecordStatusManual) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc:
            if (SMp.Status!=kRecordStatusRecovered) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeManualConsigmentStockMovVc:
            if (SMp.Status!=kRecordStatusManual) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeRecoverdConsigmentStockMovVc:
            if (SMp.Status!=kRecordStatusRecovered) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeManualThirdEntGoodsTransStockMovVc:
            if (SMp.Status!=kRecordStatusManual) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc:
            if (SMp.Status!=kRecordStatusRecovered) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeManualGlobalTransStockMovVc:
            if (SMp.Status!=kRecordStatusManual) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
          case kOfficialNumTypeRecoverdGlobalTransStockMovVc:
            if (SMp.Status!=kRecordStatusRecovered) then begin
              error = 2246;
              errorstr = "";
              rownr = -1;
              fieldstr = "OfficialSerNr";        
              res = -1; 
              goto LCheckStockMovRecord;
            end;
        end;
      end;
    end;
    if (SMp.Status==kRecordStatusInvalidated or SMp.Status==kRecordStatusLost or SMp.Status==kRecordStatusNotUsed) then begin
      error = 34430;
      errorstr = "";
      rownr = -1;
      fieldstr = "Status";        
      res = -1; 
      goto LCheckStockMovRecord;
    end;
    if (SMp.Status==kRecordStatusManual or SMp.Status==kRecordStatusRecovered) then begin
      if (HasLocalization("PRT")) then begin
        if (blank(SMp.OfficialSerNr)) then begin
          error = 2210;
          errorstr = "";
          rownr = -1;
          fieldstr = "OfficialSerNr";        
          res = -1; 
          goto LCheckStockMovRecord;
        end;
      end;
      if (blank(SMp.OfficialSerNr2)) then begin   
        error = 2210;
        errorstr = "";
        rownr = -1;
        fieldstr = "OfficialSerNr2";        
        res = -1; 
        goto LCheckStockMovRecord;
      end;
      if (nonblank(SMp.OfficialSerNr2)) then begin   
//        SMp.OfficialSerNr2Serie = UpdateOfficialSerNrSerie(stat,SMp.OKFlag,IP2p.OKFlag,SMp.OfficialSerNr2,true);
        if (InString2(SMp.OfficialSerNr2,"/")<=0) then begin
          error = 1059;
          errorstr = " " & SMp.OfficialSerNr2;
          rownr = -1;
          fieldstr = "OfficialSerNr2";        
          res = -1; 
          goto LCheckStockMovRecord;
        end;
        locSMr.OfficialSerNr2 = SMp.OfficialSerNr2;
        if (ReadFirstKey("OpenOfficialSerNr2",locSMr,1,true)) then begin
          if (locSMr.SerNr!=SMp.SerNr) then begin
            error = 1391;
            errorstr = " " & SMp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";        
            res = -1; 
            goto LCheckStockMovRecord;
          end;
        end;
        locSMr.OfficialSerNr = StripCharacter(SMp.OfficialSerNr2,"/");
        if (ReadFirstKey("OfficialSerNr",locSMr,1,true)) then begin
          if (locSMr.SerNr!=SMp.SerNr) then begin
            error = 1391;
            errorstr = " " & SMp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";        
            res = -1; 
            goto LCheckStockMovRecord;
          end;
        end;
        dummyl = 0;
        GetNextSubstring(SMp.OfficialSerNr2,dummyl,"/",tstr);
        GetNextSubstring(SMp.OfficialSerNr2,dummyl,"/",tstr2);
        for (i=0;i<len(tstr);i=i+1) begin
          c = Mid(tstr,i,1);
          if (IsDigit(c)==false and (IsCapitalLetter(c)==false)) then begin
            error = 1059;
            errorstr = " " & SMp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";        
            res = -1; 
            goto LCheckStockMovRecord;
          end;
        end;
        for (i=0;i<len(tstr2);i=i+1) begin
          c = Mid(tstr2,i,1);
          if (IsDigit(c)==false) then begin
            error = 1059;
            errorstr = " " & SMp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";        
            res = -1; 
            goto LCheckStockMovRecord;
          end;
        end;
        GetLegalInvNrRow(SMp.OfficialSerNr2,LINrbrw);
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
          error = 2246;
          errorstr = "";
          rownr = -1;
          fieldstr = "Status";        
          res = -1; 
          goto LCheckStockMovRecord;
        end;
      end;
    end;
  end;

  if (check==0) then begin
    goto LStockMovVcRecordCheck_GenTrans;
  end;
  frlocation = SMp.FrLocation;
  LocFrRec.Code = frlocation;
  if (ReadFirstMain(LocFrRec,1,true)==false) then begin
    error = 1120;
    errorstr = SMp.FrLocation;
    rownr = -1;
    fieldstr = "FrLocation";      
    res = 1120; 
    goto LCheckStockMovRecord;    
  end;
  if (AllowedToTakeFromThisLoc(LocFrRec)==false) then begin
    error = 1768;
    errorstr = "";
    rownr = -1;
    fieldstr = "FrLocation";          
    res = -1;
    goto LCheckStockMovRecord;
  end;
  tolocation = SMp.ToLocation;
  LocToRec.Code = tolocation;
  if (ReadFirstMain(LocToRec,1,true)==false) then begin
    error = 1120;
    errorstr = SMp.ToLocation;
    rownr = -1;
    fieldstr = "ToLocation";      
    res = 1120; 
    goto LCheckStockMovRecord;
  end;

  if (nonblank(SMp.ThrouLocation)) then begin
    if (SMp.FrLocation==SMp.ThrouLocation) then begin
      error = 20081;
      errorstr = SMp.ThrouLocation;
      rownr = -1;
      fieldstr = "ThrouLocation";          
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
    if (SMp.ThrouLocation==SMp.ToLocation) then begin
      error = 20082;
      errorstr = SMp.ThrouLocation;
      rownr = -1;
      fieldstr = "ThrouLocation";         
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
    if (nonblank(LocToRec.ThrouLocation)) then begin
      if (SMp.ThrouLocation!=LocToRec.ThrouLocation) then begin
        error = 22036;
        errorstr = SMp.ThrouLocation;
        rownr = -1;
        fieldstr = "ThrouLocation";        
        res = 22036; 
        goto LCheckStockMovRecord;
      end;
    end;
    LocThrouRec.Code = SMp.ThrouLocation;
    if (ReadFirstMain(LocThrouRec,1,true)==false) then begin
      error = 1120;
      errorstr = SMp.ThrouLocation;
      rownr = -1;
      fieldstr = "ThrouLocation";        
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
    if (LocThrouRec.RequirePos!=0) then begin
      error = 22037;
      errorstr = SMp.ThrouLocation;
      rownr = -1;
      fieldstr = "ThrouLocation";         
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
  end;
  if (SMp.SentOKFlag==0) and (SMp.OKFlag!=0) then begin
    if (nonblank(SMp.ThrouLocation)) then begin
      error = 1084;
      errorstr = SMp.ThrouLocation;
      rownr = -1;
      fieldstr = "ThrouLocation";          
      res = 1120; 
      goto LCheckStockMovRecord;
    end;
  end;
  errcode = CheckRates(SMp.CurncyCode,SMp.FrRate,SMp.ToRateB1,SMp.ToRateB2,SMp.BaseRate1,SMp.BaseRate2,errstr);
  if (errcode!=0) then begin
    error = errcode;
    errorstr = "";
    rownr = -1;
    fieldstr = errstr;     
    res = -1; 
    goto LCheckStockMovRecord;
  end;          

  BlockLoad(LINrb);  
  if (nonblank(SMp.OfficialSerNr)) then begin
    GetLegalInvNrRow(SMp.OfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          SMp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        if (blank(SMp.ThrouLocation)) then begin
          SMp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          SMp.OfficialSerNr = "";
        end;
    end;
  end;
  if (blank(SMp.OfficialSerNr)) then begin
    if (HasLocalization("PRT") and SMp.Status!=kRecordStatusManual and SMp.Status!=kRecordStatusRecovered) then begin
      FindNextStockMovVcOfficialSerialNr(SMp,-1);
    end;
  end;
  if (transsendf) or (transreceivef) then begin
    if (HasLocalization("PRT")) then begin
      if (blank(SMp.OfficialSerNr)) then begin
        error = 1058;
        errorstr = "";
        rownr = -1;
        fieldstr = "OfficialSerNr";          
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
  end;
  if (nonblank(SMp.ThrouLocation)) then begin
    if (ValidateOfficialSerialNrChronology("StockMovVc",SMp.OfficialSerNr,SMp.SerNr,SMp.SentTransDate,td)==false) then begin
      error = 26201;
      errorstr = " " & td;
      rownr = -1;
      fieldstr = "SentTransDate";          
      res = -1;
      goto LCheckStockMovRecord;
    end;  
  end else begin
    if (ValidateOfficialSerialNrChronology("StockMovVc",SMp.OfficialSerNr,SMp.SerNr,SMp.TransDate,td)==false) then begin
      error = 26201;
      errorstr = " " & td;
      rownr = -1;
      fieldstr = "TransDate";    
      res = -1;
      goto LCheckStockMovRecord;
    end;  
  end;
  if (nonblank(SMp.OfficialSerNr)) and (MatRowCnt(LINrb)>0) then begin    
    errcode = 0;
    rwcnt = MatRowCnt(LINrb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      test2f = true;
      if (Left(SMp.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
      if (test2f) then begin
        testf = true;
        test2f = TestNextOfficialSerialNr_StockMovVc(LINrbrw,"",SMp,false,-2);
        if (test2f==false) then begin
          errcode = 1557;
          testf = false;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
    if (testf==false) then begin
      error = errcode;
      errorstr = " " & SMp.OfficialSerNr;
      rownr = -1;
      fieldstr = "OfficialSerNr";               
      res = -1;
      goto LCheckStockMovRecord;
    end;
  end;
  if (HasLocalization("PRT")) then begin 
    if (blank(SMp.OfficialSerNrSerie)) then begin 
      SMp.OfficialSerNrSerie = UpdateOfficialSerNrSerie(stat,SMp.SentOKFlag,SM2p.SentOKFlag,SMp.OfficialSerNr,true);
    end;
    if (blank(SMp.OfficialSerNrSerie)) then begin 
      SMp.OfficialSerNrSerie = UpdateOfficialSerNrSerie(stat,SMp.OKFlag,SM2p.OKFlag,SMp.OfficialSerNr,true);
    end;    
  end;
  
  rwcnt = MatRowCnt(SMp);
  if (HasLocalization("PRT")) then begin
    if (rwcnt==0) then begin
      error = 2210;
      errorstr = "";
      rownr = 0;
      fieldstr = "ArtCode";            
      res = 2210; 
      goto LCheckStockMovRecord;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMp,i,StockMovrw);    
    if (StockMovrw.OrdQuant!=0) then begin
      if (StockMovrw.OrdQuant < StockMovrw.SentQuant) then begin
        error = 20083;
        errorstr = "";
        rownr = 0;
        fieldstr = "SentQuant";            
        res = 20083; 
        goto LCheckStockMovRecord;
      end;
      if blank(StockMovrw.SentQuant) then begin
        if (StockMovrw.OrdQuant < StockMovrw.Quant) then begin
          error = 20085;
          errorstr = "";
          rownr = 0;
          fieldstr = "Quant";                 
          res = 20085; 
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (StockMovrw.SentQuant!=0) then begin
      if (StockMovrw.SentQuant < StockMovrw.Quant) then begin
        error = 20084;
        errorstr = "";
        rownr = 0;
        fieldstr = "Quant";            
        res = 20084; 
        goto LCheckStockMovRecord;
      end;
    end;  
    
    if (StockMovrw.SentQuant!=0) then begin
      if (SMp.SentOKFlag==0) and (SMp.OKFlag!=0) then begin
        error = 20084;
        errorstr = "";
        rownr = i;
        fieldstr = "SentQuant";           
        res = 1084;
        goto LCheckStockMovRecord;
      end;
    end;
    if (StockMovrw.NewPrice<0) then begin
      error = 1058;
      errorstr = "";
      rownr = i;
      fieldstr = "NewPrice";            
      res = 1058;
      goto LCheckStockMovRecord;
    end;
    if (StockMovrw.SentNewPrice<0) then begin
      error = 1058;
      errorstr = "";
      rownr = i;
      fieldstr = "SentNewPrice";          
      res = 1058;
      goto LCheckStockMovRecord;
    end;
    if (intorf) then begin
      if (StockMovrw.IntORRow>=0) then begin
        prev = blankval;
        if (stat==Rs_update) then begin
          orwcnt = MatRowCnt(SM2p);
          for (j=0;j<orwcnt;j=j+1) begin
            MatRowGet(SM2p,j,StockMov2rw);
            if (StockMov2rw.IntORRow>=0) and (StockMov2rw.IntORRow==StockMovrw.IntORRow) then begin
              if (StockMovrw.SentQuant!=0) then begin
                prev = prev + StockMov2rw.SentQuant;
              end else begin
                prev = prev + StockMov2rw.Quant;
              end;
            end;
          end;
        end;
        MatRowGet(IntORr,StockMovrw.IntORRow,IntORrw);
        if (StockMovrw.SentQuant!=0) then begin
          if ((IntORrw.Shipd1+StockMovrw.SentQuant-prev)>IntORrw.Quant) then begin
            error = 1733;
            errorstr = "";
            rownr = i;
            fieldstr = "SentQuant";                  
            res = 1733; 
            goto LCheckStockMovRecord;
          end;
        end else begin
          if ((IntORrw.Shipd1+StockMovrw.Quant-prev)>IntORrw.Quant) then begin
            error = 1733;
            errorstr = "";
            rownr = i;
            fieldstr = "Quant";               
            res = 1733; 
            goto LCheckStockMovRecord;
          end;
        end;
      end;
    end;

    if (shf) then begin
      if (StockMovrw.SHRow>=0) then begin
        MatRowGet(SHr,StockMovrw.SHRow,SHrw);
        if (StockMovrw.Quant!=SHrw.Ship) then begin
          error = 1302;
          errorstr = "";
          rownr = i;
          fieldstr = "Quant";             
          res = 1733; 
          goto LCheckStockMovRecord;
        end;
      end;
    end;    
    if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)==false) then begin
      error = 1233;
      errorstr = "";
      rownr = i;
      fieldstr = "ArtCode";           
      res = 1233; 
      goto LCheckStockMovRecord;
    end;
    objstr = SMp.Objects;
    if (nonblank(objstr)) then begin
      objstr = objstr & ",";
    end;
    objstr = objstr & StockMovrw.Objects;
    errcode = CheckObjs("",objstr,errstr);
    if (errcode!=0) then begin
      error = errcode;
      errorstr = errstr;
      rownr = i;
      fieldstr = "Objects";        
      res = errcode;
      goto LCheckStockMovRecord;
    end;
    if (INr.ItemType==2) then begin
      error = 1826;
      errorstr = "";
      rownr = i;
      fieldstr = "ArtCode";           
      res = 1826; 
      goto LCheckStockMovRecord;
    end;
    if (SMp.Reserved!=0) then begin
      if (OrdSettRec.dontAllowOverreserving!=0) then begin
        FindStockValue(StockMovrw.ArtCode,SMp.FrLocation,ISr);
        orsrv = 0;
        if (stat==updatemode) then begin        
          if (RecordValid(SM2p)) then begin
            if (SM2p.Reserved!=0) then begin
              for (j=0;j<MatRowCnt(SM2p);j=j+1) begin
                MatRowGet(SM2p,j,StockMov2rw);
                if (StockMov2rw.ArtCode==StockMovrw.ArtCode) then begin
                  orsrv = orsrv + StockMov2rw.OrdQuant;
                end;
              end;
            end;
          end;
        end;
        if ((GetTotOrdQtyForAllMatLines(StockMovrw.OrdQuant,StockMovrw.ArtCode,i,SMp))>(ISr.Instock-ISr.RsrvQty+orsrv)) then begin // StockRsrvQty ?
          error = 20011;
          errorstr = "";
          rownr = i;
          fieldstr = "OrdQuant";            
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (SMp.SentOKFlag!=0) then begin
      if (blank(StockMovrw.SentQuant)) then begin
        error = 1058;
        errorstr = "";
        rownr = i;
        fieldstr = "SentQuant";           
        res = 1826; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (blank(SMp.ThrouLocation)) then begin
      if (StockMovrw.SentQuant>0) then begin
        error = 1058;
        errorstr = "";
        rownr = i;
        fieldstr = "ThrouLocation";            
        res = 1058;
        goto LCheckStockMovRecord;
      end;
    end;
    if (confirmedf) then begin 
      errcode = CheckStockMovRowSerial(SMp,StockMovrw,INr,MSb,SNrb,i,frlocation,tolocation,false,check,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
      if (errcode!=0) then begin 
        res = -1;
        goto LCheckStockMovRecord;
      end;        
    end; 
    if (transsendf or checksendf) then begin
      errcode = CheckStockMovRow(SMp,StockMovrw,INr,MSb,SNrb,i,SMp.FrLocation,SMp.ThrouLocation,true,check,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
      if (errcode!=0) then begin 
        res = -1;
        goto LCheckStockMovRecord;
      end;        
    end else begin
      if (transreceivef or checkreceivef) then begin
        if (blank(SMp.ThrouLocation)) then begin
          errcode = CheckStockMovRow(SMp,StockMovrw,INr,MSb,SNrb,i,SMp.FrLocation,SMp.ToLocation,false,check,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
        end else begin
          errcode = CheckStockMovRow(SMp,StockMovrw,INr,MSb,SNrb,i,SMp.ThrouLocation,SMp.ToLocation,false,check,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
        end;
        if (errcode!=0) then begin 
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    frpos = StockMovrw.FrPosCode;
    if (blank(frpos)) then begin
      frpos = SMp.FrPos;
    end;
    if (nonblank(frpos)) then begin
      Posr.Code = frpos;
      if (ReadFirstMain(Posr,1,true)==false) then begin
        error = 1734;
        errorstr = " " & frpos;
        rownr = -1;
        fieldstr = "FrPos";           
        res = 1734; 
        goto LCheckStockMovRecord;
      end;
      Posr.Code = frpos;
      Posr.Location = LocFrRec.Code;
      if (ReadFirstKey("Location",Posr,2,true)==false) then begin
        error = 1748;
        errorstr = " " & frpos;
        rownr = -1;
        fieldstr = "FrPos";                  
        res = 1748; 
        goto LCheckStockMovRecord;
      end;
    end;
    topos = StockMovrw.ToPosCode;
    if (blank(topos)) then begin
      topos = SMp.ToPos;
    end;
    if (frpos==topos) and ((nonblank(frpos)) or (nonblank(topos))) then begin
      if (frlocation==tolocation) then begin
        if (blank(frpos)) then begin
          error = 1769;
          errorstr = "";
          rownr = -1;
          fieldstr = "FrLocation";              
        end else begin
          error = 1797;
          errorstr = " " & topos;
          rownr = -1;
          fieldstr = "ToPos";                 
        end;
        res = 1734; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (nonblank(topos)) then begin
      Posr.Code = topos;
      if (ReadFirstMain(Posr,1,true)==false) then begin
        error = 1734;
        errorstr = " " & topos;
        rownr = -1;
        fieldstr = "ToPos";          
        res = 1734; 
        goto LCheckStockMovRecord;
      end;
      Posr.Code = topos;
      Posr.Location = LocToRec.Code;
      if (ReadFirstKey("Location",Posr,2,true)==false) then begin
        error = 1748;
        errorstr = " " & topos;
        rownr = -1;
        fieldstr = "ToPos";          
        res = 1748; 
        goto LCheckStockMovRecord;
      end;
    end;
    if (transsendf or (transsendf and UnOKedCheckSerialf)) then begin
      errcode = CheckStockMovRowFromPosition(SMp,StockMovrw,LocFrRec,INr,i,true,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);  
      if (errcode!=0) then begin 
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end else begin
      if (transreceivef or (transreceivef and UnOKedCheckSerialf)) then begin
        errcode = CheckStockMovRowFromPosition(SMp,StockMovrw,LocFrRec,INr,i,false,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
        if (errcode!=0) then begin 
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (transreceivef) then begin
/*
already checked few lines above
      if (nonblank(SMp.ThrouLocation)) then begin
        errcode = CheckStockMovRow(SMp,StockMovrw,INr,MainWHMRec,MSb,i,SMp.ThrouLocation,SMp.ToLocation,true,disperrf,check);
        if (errcode!=0) then begin 
          res = -1;
          goto LCheckStockMovRecord;
        end;
      end;
*/      
      errcode = CheckStockMovRowToPosition(SMp,StockMovrw,LocToRec,INr,i,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
      if (errcode!=0) then begin 
        res = -1;
        goto LCheckStockMovRecord;
      end;
    end;
  end;
  
  if (check!=0) then begin
    UpdateStockMovFIFO(SMp,SM2p,stat);
  end;  
  if (transsendf) then begin
    if (UserCanAction("SentStockMovOK",true)==false) then begin
      error = 1274;
      errorstr = StringFromStringSet(3,"SentStockMovOK");
      rownr = -1;
      fieldstr = "SerNr";          
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (check>0) then begin
      if (MSb.Chronology!=0) then begin
        if (ExistStockTrans(frlocation,SMp.SentTransDate,errcode,errstr,"StockMovVc",sernr,MSb)) then begin
          error = errcode;
          errorstr = errstr;
          rownr = -1;
          fieldstr = "SentTransDate";               
          res = errcode; 
          goto LCheckStockMovRecord;
        end;
      end;
    end;
    if (CanOKStockRecord(errcode)==false) then begin
      error = errcode;
      errorstr = "";
      rownr = -1;
      fieldstr = "SerNr";           
      res = -1; 
      goto LCheckStockMovRecord;
    end;
  end;
  if (transreceivef) then begin
    if (UserCanAction("StockMovOK",true)==false) then begin
      error = 1274;
      errorstr = StringFromStringSet(3,"StockMovOK");
      rownr = -1;
      fieldstr = "SerNr";       
      res = -1;
      goto LCheckStockMovRecord;
    end;
    if (stat==updatemode) then begin sernr = SM2p.SerNr; end;
    if (check>0) then begin
    if (MSb.Chronology!=0) then begin
      if (blank(SMp.ThrouLocation)) then begin
        if (ExistStockTrans(frlocation,SMp.TransDate,errcode,errstr,"StockMovVc",sernr,MSb)) then begin
          error = errcode;
          errorstr = errstr;
          rownr = -1;
          fieldstr = "TransDate";             
          res = errcode; 
          goto LCheckStockMovRecord;
        end;
      end;
      if (nonblank(SMp.ThrouLocation)) then begin
        if (ExistStockTrans(SMp.ThrouLocation,SMp.TransDate,errcode,errstr,"StockMovVc",sernr,MSb)) then begin
          error = errcode;
          errorstr = errstr;
          rownr = -1;
          fieldstr = "TransDate";                 
          res = errcode; 
          goto LCheckStockMovRecord;
        end;      
      end;
      if (ExistStockTrans(tolocation,SMp.TransDate,errcode,errstr,"StockMovVc", sernr,MSb)) then begin
        error = errcode;
        errorstr = errstr;
        rownr = -1;
        fieldstr = "TransDate";            
        res = errcode; 
        goto LCheckStockMovRecord;
      end;
    end;
    end;
  end;
LStockMovVcRecordCheck_GenTrans:;
  if (gentrans==false) then begin transsendf = false; end;
  if (gentrans==false) then begin transreceivef = false; end;
  if (IsStandardProduct) then begin
    transsendf = HasIntegratedNL and transsendf;
  end;
  if (transsendf) then begin
    errcode = MakeTransFromStockMov(gTRp,SMp,LocFrRec,LocThrouRec,false,SentSTMovYc);
    if (errcode!=0) then begin
      error = errcode;
      errorstr = "";
      rownr = -1;
      fieldstr = "SerNr";          
      res = errcode; 
      goto LCheckStockMovRecord;
    end;
    if (disperrf) then begin
      if ((gTRp.Number>0) and (gTRp.IntYc==SentSTMovYc)) then begin
        errstr = CheckTrans(gTRp,2,true);
        if (nonblank(errstr)) then begin
          error = 1085;
          errorstr = errstr;
          rownr = -1;
          fieldstr = "SerNr";               
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (MatRowCnt(gTRp)>0) then begin
          switch (gRuniningMaint) begin    
            case "RecalcStockMn":
              UpdateTrans_Stock(gTRp);          
            otherwise
              SaveTrans(gTRp);
          end;
        end;
      end;
    end;
  end;
  if (IsStandardProduct) then begin
    transreceivef = HasIntegratedNL and transreceivef;
  end;
  if (transreceivef) then begin
    if (blank(SMp.ThrouLocation)) then begin
      if (SMp.SentOKFlag!=0) then begin
        errcode = MakeTransFromStockMov(gTRp,SMp,LocThrouRec,LocToRec,false,STMovYc);
      end else begin
        errcode = MakeTransFromStockMov(gTRp,SMp,LocFrRec,LocToRec,false,STMovYc);
      end;
    end else begin
      errcode = MakeTransFromStockMov(gTRp,SMp,LocThrouRec,LocToRec,false,STMovYc);
    end;
    if (errcode!=0) then begin
      error = errcode;
      errorstr = "";
      rownr = -1;
      fieldstr = "SerNr";       
      res = errcode; 
      goto LCheckStockMovRecord;
    end;

    if (disperrf) then begin
      if ((gTRp.Number>0) and (gTRp.IntYc==STMovYc)) then begin
        errstr = CheckTrans(gTRp,2,true);
        if (nonblank(errstr)) then begin
          error = 1085;
          errorstr = errstr;
          rownr = -1;
          fieldstr = "SerNr";               
          res = -1;
          goto LCheckStockMovRecord;
        end;
        if (MatRowCnt(gTRp)>0) then begin
          switch (gRuniningMaint) begin    
            case "RecalcStockMn":
              UpdateTrans_Stock(gTRp);          
            otherwise
              SaveTrans(gTRp);
          end;
        end;

      end;
    end;
  end;
LCheckStockMovRecord:;
  if (res!=0) then begin 
    SMp.OfficialSerNrSerie = "";
  end;  
  CheckStockMovRecord = res;
  return;
end;
  
global
updating function LongInt StockMovVcRecordCheck(var record StockMovVc SMp,record StockMovVc SM2p,LongInt stat,LongInt check)
begin
  LongInt res;
  LongInt oldnr,newnr;
  string 255 oldOfficialSerNr;
  LongInt error;
  string 255 errorstr,fieldstr;
  Integer rownr;
  Boolean UnOKedCheckSerialf;

  res = 0;
  oldnr = SMp.SerNr;
  oldOfficialSerNr = SMp.OfficialSerNr;
  UnOKedCheckSerialf = false;
  if (CheckStockMovRecord(SMp,SM2p,stat,check,true,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf)!=0) then begin
    res = -1;
    RecordCheckError(error,errorstr,rownr,fieldstr);
    goto LStockMovVcRecordCheck;
  end;
LStockMovVcRecordCheck:;
  if (res!=0) then begin 
    SMp.SerNr = oldnr; 
    SMp.OfficialSerNr = oldOfficialSerNr;
  end;
  StockMovVcRecordCheck = res;
  return;
end;

procedure AddToStockMovRow(row StockMovVc StockMovrw,row StockMovVc fromprodStockMovrw)
begin    
  StockMovrw.ArtCode = fromprodStockMovrw.ArtCode;
  StockMovrw.Quant = fromprodStockMovrw.Quant;
  StockMovrw.Spec = fromprodStockMovrw.Spec;
  StockMovrw.SerialNr = fromprodStockMovrw.SerialNr;
  StockMovrw.OldPrice = fromprodStockMovrw.OldPrice;
  StockMovrw.ExtraSCost = blankval;
  StockMovrw.NewPrice = fromprodStockMovrw.OldPrice;
  StockMovrw.BasePrice = fromprodStockMovrw.BasePrice;
  StockMovrw.Coefficient = fromprodStockMovrw.Coefficient;
  StockMovrw.UnitXval = fromprodStockMovrw.UnitXval;
  StockMovrw.UnitYval = fromprodStockMovrw.UnitYval;
  StockMovrw.UnitZval = fromprodStockMovrw.UnitZval;
  StockMovrw.FrPosCode = fromprodStockMovrw.ToPosCode;
  return;
end;

procedure AddPalletItemToStockMov(record StockMovVc StockMovr,string palletitem,var Integer smrwcnt,
                                  string frposcode,string toposcode)
begin
  row StockMovVc palletsmrw;
  array string 255 aWarning;
  
  if (nonblank(palletitem)) then begin
    ClearRow(StockMovr,palletsmrw,1);
    palletsmrw.ArtCode = palletitem;
    palletsmrw.Quant = 1;
    palletsmrw.FrPosCode = frposcode;
    palletsmrw.ToPosCode = toposcode;
    MatRowPut(StockMovr,smrwcnt,palletsmrw);
    if (StockMovVc_PasteArtCode(StockMovr,smrwcnt,1,aWarning)) then begin
      smrwcnt = smrwcnt + 1;
    end;
  end;
  return;
end;

procedure NewStockMovement(var record StockMovVc StockMovr,record StockMovVc fromprodStockMovr)
begin
  RecordNew(StockMovr);
  StockMovr.FrLocation = fromprodStockMovr.ToLocation;
  StockMovr.ToLocation = fromprodStockMovr.ToLocation;
  StockMovr.ToForkLiftQue = 0;
  StockMovr.TransNr = fromprodStockMovr.SerNr;
  StockMovr.FileName = "StockMovVc";
  StockMovr.TransDate = CurrentDate;
  StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.TransDate,-1,false,"");
  return;
end;

function Boolean IsItemOutOnProd(record ProdVc Prodr,string ArtCode)
begin
  Boolean res;
  row ProdVc Prodrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(Prodr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodr,i,Prodrw);
    if (Prodrw.Item==ArtCode) then begin
      if (Prodrw.OutQty!=0) then begin
        res = true;
        i = rwcnt;
      end;
    end;
  end;
  IsItemOutOnProd = res;
  return;
end;

global
updating procedure StockMovCreateStockMovement(record StockMovVc fromprodStockMovr)
begin
  record StockMovVc lfromprodStockMovr;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  row StockMovVc fromprodStockMovrw;
  row StockMovVc newStockMovrw;
  Integer i,rwcnt,smrwcnt,oldrwcnt,orgrwcnt,lasti,j;
  record MainStockBlock MainRec;
  string 20 frposcode,toposcode,lastpalletitem;
  record INVc INr;
  record LocationVc LocRec;
  Boolean storesmf;  
  record ProdVc Prodr;
  
  if (fromprodStockMovr.ProdSerNr<=0) then begin goto LStockMovCreateStockMovement; end;
  if (fromprodStockMovr.OKFlag==0) then begin goto LStockMovCreateStockMovement; end;
  
  BlockLoad(MainRec);  
  LocRec.Code = fromprodStockMovr.ToLocation;
  if (ReadFirstMain(LocRec,1,true)==false) then begin goto LStockMovCreateStockMovement; end;  
  if (LocRec.RequirePos==0) then begin goto LStockMovCreateStockMovement; end;  
  
  Prodr.SerNr = fromprodStockMovr.ProdSerNr;
  if (ReadFirstMain(Prodr,1,true)) then begin end; 
  
  RecordCopy(lfromprodStockMovr,fromprodStockMovr);
  rwcnt = MatRowCnt(lfromprodStockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(lfromprodStockMovr,i,fromprodStockMovrw);
    if (IsItemOutOnProd(Prodr,fromprodStockMovrw.ArtCode)==false) then begin
      MatRowDelete(lfromprodStockMovr,i);
      rwcnt = rwcnt - 1;
      i = i - 1; 
    end;
  end;  
  
  lfromprodStockMovr.FrLocation = fromprodStockMovr.ToLocation;
  
  orgrwcnt = MatRowCnt(lfromprodStockMovr);
  if (orgrwcnt>0) then begin//only one item out on prod
    if (StockMovVc_PasteQuant(lfromprodStockMovr,0)) then begin    
    end;
  end;
  
//  rwcnt = orgrwcnt;
//  for (i=0;i<rwcnt;i=i+1) begin
//    if (StockMovVc_PasteQuant(lfromprodStockMovr,i)) then begin    
//      rwcnt = MatRowCnt(lfromprodStockMovr);
//      if (oldrwcnt!=rwcnt) then begin
//        i = rwcnt - orgrwcnt + 1;
//        oldrwcnt = rwcnt;
//      end else begin
//        i = rwcnt;
//      end;
//    end;
//  end;
  
  NewStockMovement(StockMovr,lfromprodStockMovr);
  if (StockMovr.SerNr<=0) then begin goto LStockMovCreateStockMovement; end;

  rwcnt = MatRowCnt(lfromprodStockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(lfromprodStockMovr,i,fromprodStockMovrw);
    storesmf = false;
    ClearRow(StockMovr,StockMovrw,1);
    AddToStockMovRow(StockMovrw,fromprodStockMovrw);
    if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin end;
    if (blank(INr.DefPalletItem)) and (INr.Code!=lastpalletitem) then begin
      storesmf = true;
      StockMovr.ToForkLiftQue = 100;//items without pallet don't goto automatic delivery que
    end;
    frposcode = lfromprodStockMovr.ToPos;
    if (blank(frposcode)) then begin
      frposcode = fromprodStockMovrw.ToPosCode;
    end;
    StockMovrw.FrPosCode = frposcode;
    if (INr.Code!=lastpalletitem) then begin
      if (blank(toposcode)) then begin
        toposcode = FindFreePositionInLocArea(INr,INr.LocArea,LocRec,StockMovrw.FrPosCode,LocRec.WHMDefPUPosCode);
      end;
    end;
    StockMovrw.ToPosCode = toposcode;
    MatRowPut(StockMovr,smrwcnt,StockMovrw);
    SetPositionStatus(toposcode,2);    
    
    lastpalletitem = INr.DefPalletItem;
    smrwcnt = smrwcnt + 1;

    if (nonblank(INr.DefPalletItem)) then begin
//      AddPalletItemToStockMov(StockMovr,INr.DefPalletItem,smrwcnt,StockMovrw.FrPosCode,StockMovrw.ToPosCode);
    end;    
    if ((Mod(smrwcnt,2)==0) or (storesmf)) then begin
      if (MatRowCnt(StockMovr)>0) then begin
        StockMovSumUp(StockMovr);    
        if (RecordStore(StockMovr,false)) then begin
        end;
      end;
      NewStockMovement(StockMovr,lfromprodStockMovr);
      if (StockMovr.SerNr<=0) then begin goto LStockMovCreateStockMovement; end;
      smrwcnt = 0;
      toposcode = "";
      lastpalletitem = "";
    end;
LSkipRowStockMovCreateStockMovement:;    
  end;
  if (MatRowCnt(StockMovr)>0) then begin
    StockMovSumUp(StockMovr);    
    if (RecordStore(StockMovr,false)) then begin
    end;
  end;  
  
//  smrwcnt = MatRowCnt(fromprodStockMovr);
//  rwcnt = MatRowCnt(lfromprodStockMovr);
//  for (i=0;i<rwcnt;i=i+1) begin
//    MatRowGet(lfromprodStockMovr,i,fromprodStockMovrw);
//    if (ReadFirstItem(fromprodStockMovrw.ArtCode,INr,true,true)) then begin
//      if (nonblank(INr.DefPalletItem)) then begin
//        for (j=lasti;j<rwcnt;j=j+1) begin
//          MatRowGet(lfromprodStockMovr,j,StockMovrw);
//          if (StockMovrw.ArtCode==INr.DefPalletItem) then begin
//            MatRowPut(fromprodStockMovr,smrwcnt,StockMovrw);
//            smrwcnt = smrwcnt + 1;
//            j = rwcnt;
//            lasti = i;
//          end;
//        end;
//      end;
//    end;    
//  end;  
LStockMovCreateStockMovement:;  
  return;
end;

global
updating procedure StockMovSetPositionStatus(record StockMovVc StockMovr,Integer status)
begin
  Integer i,rwcnt;
  row StockMovVc StockMovrw;
  string 60 toposcode;
  Boolean testf;
  record LocationVc Locr;

  Locr.Code = StockMovr.ToLocation;
  ReadFirstMain(Locr,1,true);

  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrw);
    testf = true;
    toposcode = StockMovrw.ToPosCode;
    if (blank(toposcode)) then begin
      toposcode = StockMovr.ToPos;
    end;
    if (blank(toposcode)) then begin testf = false; end;
    if (toposcode==Locr.WHMDefPUPosCode) then begin testf = false; end;
    if (toposcode==Locr.WHMDefProdPosCode) then begin testf = false; end;
    if (toposcode==Locr.WHMDeliveryPosCode) then begin testf = false; end;
    if (toposcode==Locr.WHMWraperPosCode) then begin testf = false; end;
    if (testf) then begin
      SetPositionStatus(toposcode,status);
    end;
  end;
  return;
end;

global
updating procedure UpdateInStockMovFromStockMov(record StockMovVc StockMovr,Boolean negf)
begin
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  string 50 frpos,topos;
  val blv,t;
  Boolean testf;
  record LocationVc Locr;

  Locr.Code = StockMovr.ToLocation;
  ReadFirstMain(Locr,1,true);
  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,StockMovrw);
    frpos = StockMovrw.FrPosCode;
    if (blank(frpos)) then begin
      frpos = StockMovr.FrPos;
    end;
    topos = StockMovrw.ToPosCode;
    if (blank(topos)) then begin
      topos = StockMovr.ToPos;
    end;
    testf = true;
    if (frpos==Locr.WHMDefPUPosCode) then begin testf = false; end;
    if (frpos==Locr.WHMDefProdPosCode) then begin testf = false; end;
    if (frpos==Locr.WHMWraperPosCode) then begin testf = false; end;
    if (frpos==Locr.WHMDeliveryPosCode) then begin testf = false; end;
    if (frpos==topos) then begin testf = false; end;
    if (testf) then begin
      if (nonblank(StockMovr.ThrouLocation)) then begin
        if (negf) then begin
          t = -StockMovrw.SentQuant;
        end else begin
          t = StockMovrw.SentQuant;
        end;
      end else begin
        if (negf) then begin
          t = -StockMovrw.Quant;
        end else begin
          t = StockMovrw.Quant;
        end;
      end;
      UpdatePosition(StockMovrw.ArtCode,StockMovr.FrLocation,frpos,blv,blv,t);
    end;
  end;
LUpdateInStockMovFromStockMov:;  
  return;
end;

global
function LongInt StockMovVcRecordProtectFields(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  StockMov2r.Prntdf = StockMovr.Prntdf;
  StockMovVcRecordProtectFields = res;
  return;
end;
