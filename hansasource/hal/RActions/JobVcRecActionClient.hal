remote function string 255 AddBranchObjectToObjectList(string,string);
external function string 60 AddObjectToObjectList(string,string);
remote function LongInt SimilarResExists(record JobVc);
remote updating procedure SMSWhenJob(record JobVc,Integer);

global
updating function LongInt JobVcRecordSaveClient(LongInt wn,var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res,JobNr;
  
  JobNr = SimilarResExists(Jobr);
  if (JobNr<>-1) then begin
     MessageBox(2147,JobNr);
  end;
  SMSWhenJob(Jobr,2); 
  JobVcRecordSaveClient = res;  
  return;
end;

global
updating function LongInt JobVcRecordUpdateClient(LongInt wn,var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  if (Jobr.ResStatus!=Job2r.ResStatus) then begin 
    SMSWhenJob(Jobr,2); 
  end;  
  JobVcRecordUpdateClient = res;  
  return;
end;

global
procedure SetJobVcRecordDefaults(integer ReservationType,var record JobVc Jobr)
begin
  LongInt res;
  record LocalMachineBlock LMb;
  record CUVc CUr;

  BlockLoad(LMb);  
  Jobr.BranchID = LMb.BranchID;
  Jobr.Objects = AddBranchObjectToObjectList(LMb.BranchID,Jobr.Objects);
  if (blank(Jobr.PriceList)) then begin
    Jobr.PriceList = LMb.PLCode;
  end;
  switch (ReservationType) begin
    case kReservationTypeNormal: 
      if (nonblank(LMb.BranchID)) then begin
        CUr.Code = LMb.BranchID;
        if (ReadFIrstMain(CUr,1,true)) then begin
          Jobr.Objects = AddObjectToObjectList(Jobr.Objects,CUr.Objects);        
        end;
      end;
    case kReservationTypeGroup: ;
  end;
  Jobr.ReservationType = ReservationType;
  return;
end;

global
function LongInt JobVcRecordDefaultsClient(LongInt wn,var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  integer ResType;

  switch (GetWindowClass(wn)) begin
    case "JobDClass": ResType = kReservationTypeNormal;
    case "GroupJobDClass": ResType = kReservationTypeGroup;
  end;
  SetJobVcRecordDefaults(ResType,Jobr);
  JobVcRecordDefaultsClient = res;
  return;
end;

global
function LongInt JobVcRecordDuplicateClient(LongInt wn,var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);  
  Jobr.BranchID = LMb.BranchID;
  Jobr.Objects = AddBranchObjectToObjectList(LMb.BranchID,Jobr.Objects);
  JobVcRecordDuplicateClient = res;
  return;
end;
