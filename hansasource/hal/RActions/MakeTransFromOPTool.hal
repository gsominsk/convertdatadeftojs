external function Boolean FindWHVETax(string,Date,var record WHVEVc);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external function Integer AddWithHoldingTaxEntries(record TRVc,record VIVc,record APAccBlock,string,Boolean,val,val,val,val,val,var val);
external function string 5 AddVATCodeToVATAccRows(string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function Boolean GetAccName(string,var string,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure Base1ToBase2(var val,Date,var val);
external function val MulWithRateToBase1(var string,Date,val,roundmode);

global
function string 20 GetPayPurchVATAcc(string VATCode,record VATCodeBlock VATCodeRec)
BEGIN
  string 20 res;
  Integer i,rwcnt;
  row VATCodeBlock VATCoderw;
  record APAccBlock APb;
  
  BlockLoad(APb);
  rwcnt = MatRowCnt(VATCodeRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATCodeRec,i,VATCoderw);
    if (VATCode==VATCoderw.VATCode) then begin
      res = VATCoderw.PayPurchVATAcc;
      if (APb.PostVIVATonVATCorr!=0) then begin
        res = VATCoderw.CorPurchVATAcc;
      end;
      goto LGetPayPurchVATAcc;
    end;
  end;
LGetPayPurchVATAcc:;  
  GetPayPurchVATAcc = res;
  RETURN;
END;

global
function string 255 GetSupplierOnAccountAC(string vecode)
begin
  string 255 res;
  record APAccBlock APAccb;
  record CUVc VEr;
  record CCatVc CCatr;  
  record VGVc VGr;

  BlockLoad(APAccb);
  VEr.Code = vecode;
  if (ReadFirstMain(VEr,1,true)) then begin
    res = VEr.OnAccAccAP;
    if (blank(res)) then begin
      if (blank(VEr.VECat)) then begin
        CCatr.Code = VEr.CustCat;
        if (ReadFirstMain(CCatr,1,true)) then begin
          res = CCatr.OnAccAccAP;
        end;
      end else begin
        VGr.Code = VEr.VECat;
        if (ReadFirstMain(VGr,1,true)) then begin
          res = VGr.OnAccAcc;
        end;
      end;    
    end;
  end;
  if (blank(res)) then begin
    res = APAccb.OnAccAcc;
  end;
  GetSupplierOnAccountAC = res;
  return;
end;

global
function val GetAPPayBoolRVal(LongInt vepnr,Date td)
begin
  val res;
  record APPayHistVc APPayHistr;
  
  APPayHistr.VEPNr = vepnr;  
  APPayHistr.FileName = "OPVc";  
  if (ReadFirstMain(APPayHistr,2,true)) then begin
    res = APPayHistr.BookVal;
    if (res==0) then begin
      res = MulWithRateToBase1(APPayHistr.CurncyCode,td,APPayHistr.Val,DefaultCurRoundOff);
    end;
  end;  
  GetAPPayBoolRVal = res;
  return;
end;

global
function Boolean GetAPPayRate(LongInt vepnr,var val frrate,var val torate1,var val torate2,var val baserate1,var val baserate2,
                       string curncy,Date td)
BEGIN
  record APPayHistVc APPayHistr;
  Boolean foundprepf;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Boolean found;
  Boolean res;
  
  APPayHistr.VEPNr = vepnr;  
  APPayHistr.FileName = "OPVc";  
  if (ReadFirstMain(APPayHistr,2,true)) then begin
    OPr.SerNr = APPayHistr.SerNr;
    found = ReadFirstMain(OPr,1,true);
//    if (OPr.SerNr==skipopnr) then begin found = false; end;
    if (found) then begin
      found = false;
      rwcnt = MatRowCnt(OPr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if (OPrw.PrepayNr==vepnr) and (blank(OPrw.B1BankVal)==false) then begin
          if (OPrw.FrRateBankVal!=0) then begin frrate = OPrw.FrRateBankVal; end;
          if (OPrw.BaseRate1BankVal!=0) then begin baserate1 = OPrw.BaseRate1BankVal; end;
          if (OPrw.BaseRate2BankVal!=0) then begin baserate2 = OPrw.BaseRate2BankVal; end;
          if (OPrw.ToRateB1BankVal!=0) then begin torate1 = OPrw.ToRateB1BankVal; end;
          if (OPrw.ToRateB2BankVal!=0) then begin torate2 = OPrw.ToRateB2BankVal; end;      
//          if (frrate!=0) or (torate1!=0) or (torate2!=0) or (baserate1!=0) or (baserate2!=0) then begin
          if (frrate!=0) or (torate1!=0) or (torate2!=0) then begin
            if (frrate==0) then begin frrate = 1.00; end;
            found = true;
            res = true;
          end;
          i = rwcnt;
        end;
      end;
    end;   
    if (found==false) then begin
      GetFullCurncyRate(APPayHistr.CurncyCode,APPayHistr.TransDate,frrate,torate1,torate2,baserate1,baserate2);
    end;
    foundprepf = true;
  end;
  if (foundprepf==false) then begin
    APPayHistr.VEPNr = vepnr;  
    APPayHistr.FileName = "CLOutVc";  
    if (ReadFirstMain(APPayHistr,2,true)) then begin
      GetFullCurncyRate(APPayHistr.CurncyCode,APPayHistr.TransDate,frrate,torate1,torate2,baserate1,baserate2);
      foundprepf = true;
    end;
  end;
  if (foundprepf==false) then begin
    GetFullCurncyRate(curncy,td,frrate,torate1,torate2,baserate1,baserate2);
  end;  
  GetAPPayRate = res;
  RETURN;
END;
/*
global
procedure GetAPPayRate(LongInt vepnr,var val frrate,var val torate1,var val torate2,var val baserate1,var val baserate2,
                       string curncy,Date td)
BEGIN
  record APPayHistVc APPayHistr;
  Boolean found,ratefoundf;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  val fr,to1,to2,br1,br2;
  record CLOutVc CLOutr;
  
  APPayHistr.VEPNr = vepnr;  
  APPayHistr.FileName = "OPVc";  
  found = ReadFirstMain(APPayHistr,2,true);  
  if (found) then begin
    OPr.SerNr = APPayHistr.SerNr;
    if (ReadFirstMain(OPr,1,true)) then begin
      rwcnt = MatRowCnt(OPr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if (OPrw.PrepayNr==vepnr) then begin
          frrate = OPrw.FrRateBankVal;
          torate1 = OPrw.ToRateB1BankVal;
          torate2 = OPrw.ToRateB2BankVal;
          baserate1 = OPrw.BaseRate1BankVal;
          baserate2 = OPrw.BaseRate2BankVal;
          if (baserate1==0) then begin
            baserate1 = OPrw.B1BankVal;
          end;
          if (baserate2==0) then begin
            baserate2 = OPrw.B2BankVal;
          end;
          GetFullCurncyRate(APPayHistr.CurncyCode,APPayHistr.TransDate,fr,to1,to2,br1,br2);
          if (frrate==0) then begin
            frrate = fr;
          end;
          if (to1==0) then begin
            torate1 = to1;
          end;
          if (to2==0) then begin
            torate2 = to2;
          end;
          if (baserate1==0) then begin
            baserate1 = br1;
          end;
          if (baserate2==0) then begin
            baserate2 = br2;
          end;
          ratefoundf = true;
        end;
      end;
    end;
  end;
  if (found==false) then begin
    APPayHistr.VEPNr = vepnr;  
    APPayHistr.FileName = "OPVc";  
    found = ReadFirstMain(APPayHistr,2,true);  
    if (found) then begin
      CLOutr.SerNr = APPayHistr.SerNr;
      if (ReadFirstMain(CLOutr,1,true)) then begin
        frrate = CLOutr.FrRate;
        torate1 = CLOutr.ToRateB1;
        torate2 = CLOutr.ToRateB2;
        baserate1 = CLOutr.BaseRate1;
        baserate2 = CLOutr.BaseRate2;
        ratefoundf = true;
      end;
    end;
  end;

  if (ratefoundf==false) then begin
    GetFullCurncyRate(APPayHistr.CurncyCode,APPayHistr.TransDate,frrate,torate1,torate2,baserate1,baserate2);
  end;
  if (ratefoundf==false) then begin
    GetFullCurncyRate(curncy,td,frrate,torate1,torate2,baserate1,baserate2);
  end;  
  RETURN;
END;
*/

global
procedure GetPrepaymentBaseAmounts(LongInt vepnr,var val b1,var val b2)
begin
  record APPayHistVc APPayHistr;
  record OPVc OPr;
  row OPVc OPrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer i,rwcnt;
  record BaseCurBlock BCb;
  Boolean found;
  
  b1 = blankval;
  b2 = blankval;
  BlockLoad(BCb);
  APPayHistr.VEPNr = vepnr;  
  APPayHistr.FileName = "OPVc";  
  found = ReadFirstMain(APPayHistr,2,true);
  if (found) then begin
    OPr.SerNr = APPayHistr.SerNr;
    if (ReadFirstMain(OPr,1,true)) then begin
      rwcnt = MatRowCnt(OPr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if (OPrw.PrepayNr==vepnr) then begin
          b1 = OPrw.B1BankVal;
          b2 = OPrw.B2BankVal;
          if (blank(b2)) then begin
            if (OPrw.RecCurncy==BCb.BaseCur2) then begin
              b2 = OPrw.RecVal;
            end;
            if (OPrw.BankCurncy==BCb.BaseCur2) then begin
              b2 = OPrw.BankVal;
            end;
          end;
          goto LGetPrepaymentBaseAmounts;
        end;
      end;
    end;
  end;  
  if (!found) then begin
    APPayHistr.VEPNr = vepnr;  
    APPayHistr.FileName = "CLOutVc";  
    found = ReadFirstMain(APPayHistr,2,true);
    if (found) then begin
      CLOutr.SerNr = APPayHistr.SerNr;
      if (ReadFirstMain(CLOutr,1,true)) then begin
        rwcnt = MatRowCnt(CLOutr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CLOutr,i,CLOutrw);
          if (CLOutrw.Type==4) then begin
            if (CLOutrw.TransNr==vepnr) then begin
              b1 = MulRateToBase1(CLOutr.CurncyCode,CLOutrw.Sum,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
              b2 = MulRateToBase2(CLOutr.CurncyCode,CLOutrw.Sum,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
              goto LGetPrepaymentBaseAmounts;
            end;
          end;
        end;
      end;
    end;  
  
  end;
LGetPrepaymentBaseAmounts:;  
    if (blank(b1)) then begin
      b1 = APPayHistr.BookVal;
    end;
    if (blank(b2)) then begin
      Base1ToBase2(b1,APPayHistr.TransDate,b2);
    end;
  return;
end;

global
procedure OPGetVATCodeTAX1AccNumbers(record VATCodeBlock VATRec,string vatcode,var string tax1acc,var string ppvatacc)
begin
  row VATCodeBlock vatrw;
  Integer i,rwcnt;

  BlockLoad(VATRec);
  tax1acc = "";  
  ppvatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      tax1acc = vatrw.Tax1Acc;
      ppvatacc = vatrw.PayPurchVATAcc;
      i = rwcnt;
    end;  
  end;  
  return;
end;

global
function Integer DoBookOPOnAccVAT(record TRVc gTRp,record OPVc OPp,row OPVc OPrwp,record APAccBlock APAccRec,record VATCodeBlock VATCodeRec,
                                  Boolean dc1,Boolean dc2,var val totsump)
BEGIN
  Integer res;
  string 255 tstr,vatobjstr,taccnumber;
  Integer i,rwcnt;
  val frrate,torate1,torate2,baserate1,baserate2;
  val rd;
  row VATCodeBlock VATCoderw;
  record CUVc VEr;
  Integer OPBookVAT;
  
  res = 0;
//  if (OPrwp.ChequeNr<=0) then begin //vat posted when check cleared
  VEr.Code = OPrwp.VECode;
  ReadFirstMain(VEr,1,true);
  switch (VEr.OPBookVAT) begin
    case 1:
      OPBookVAT = 1;
    case 2:
      OPBookVAT = 0;
    otherwise
      OPBookVAT = APAccRec.OPBookVAT;
  end;
  if (OPBookVAT!=0) then begin
    vatobjstr = ""; 
    if (APAccRec.VATUseObj!=0) then begin
      vatobjstr = OPrwp.Objects;
    end;
    if (OPrwp.VATVal!=0) then begin
      rwcnt = MatRowCnt(VATCodeRec);
      if (rwcnt==0) then begin
        res = 1902;
        goto LDoBookOPOnAccVAT;
      end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VATCodeRec,i,VATCoderw);
        if (OPrwp.VATCode==VATCoderw.VATCode) then begin
          goto L22OnAccVAT;
        end;
      end;
      MatRowGet(VATCodeRec,0,VATCoderw);
L22OnAccVAT:;
      GetFullCurncyRate(OPrwp.PInvCurncy,OPp.TransDate,frrate,torate1,torate2,baserate1,baserate2);      
      rd = MulRateToBase1(OPrwp.PInvCurncy,OPrwp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (GetAccName(VATCoderw.PayPurchVATAcc,tstr,60)==false) then begin
        res = 2172;
        goto LDoBookOPOnAccVAT;
      end;
      if (CheckTTRPerRow("OPVc",VATCoderw.PayPurchVATAcc,vatobjstr,dc1,taccnumber,1)) then begin end;      
      AddEuroTrRow(gTRp,VATCoderw.PayPurchVATAcc,vatobjstr,AddVATCodeToVATAccRows(OPrwp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsump,false,taccnumber,"","");
      if (GetAccName(VATCoderw.PurchVATAcc,tstr,60)==false) then begin
        res = 2171;
        goto LDoBookOPOnAccVAT;
      end;
      if (CheckTTRPerRow("OPVc",VATCoderw.PurchVATAcc,vatobjstr,dc2,taccnumber,1)) then begin end;      
      AddEuroTrRow(gTRp,VATCoderw.PurchVATAcc,vatobjstr,AddVATCodeToVATAccRows(VATCoderw.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsump,false,taccnumber,"","");
    end;
  end;
//  end;
LDoBookOPOnAccVAT:;  
  DoBookOPOnAccVAT = res;
  RETURN;
END;

function val PaidWHTAxAmount(LongInt visernr)
begin
  val res;
  record OPrsVc OPrsr;
  Boolean found;
  record VIVc VIr;
  
  found = true;
  OPrsr.VINr = visernr;
  while (LoopKey("VIKey",OPrsr,1,found)) begin
    if (OPrsr.VINr!=visernr) then begin found = false; end;
    if (found) then begin
      switch (OPrsr.TransType) begin
        case kOPrsTransTypeInvoice:
          if (OPrsr.TransNr!=visernr) then begin
            VIr.SerNr = OPrsr.TransNr;
            if (ReadFirstMain(VIr,1,true)) then begin
              if (VIr.Invalid==0) and (VIr.OKFlag!=0) then begin
                if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                  res = res + VIr.WithHoldingTax;
                end;
              end;
            end;;
          end;          
        case kOPrsTransTypePayment:
//          OPr.SerNr = OPrsr.TransNr;
        case kOPrsTransTypeNLTransaction:
//          TRr.Number = OPrsr.TransNr;
        case kOPrsTransTypeCashOut:
//          CLOutr.SerNr = OPrsr.TransNr;
      end;
    end;
  end;
  PaidWHTAxAmount = res;
  return;
end;

global
function Integer DoBookOPWHTAXforMexico(record TRVc gTRp,record OPVc OPp,row OPVc OPrwp,record VIVc VIr,record APAccBlock APAccRec,
                                        val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,
                                        string fromfilename, 
                                        var val totsum)
begin
  Integer res;
  record WHVEVc WHVEr;
  row WHVEVc WHVErw;
  Integer i,rwcnt;
  row WHTaxBlock WHTbrw;
  string 255 tstr,taccnumber,otxt;
  val rs,wtaxpaidv,WithHoldingTaxToBook;
  Boolean testf,rowwithhf;
  row VIVc VIrw;
	row WHTaxBlock WHTaxrw;
  
  testf = true;
  switch (fromfilename) begin
    case "OPVc":
      if (OPrwp.ChequeNr>0) then begin
        testf = false;
      end;
    case "OwnCheckVc":
      if (OPrwp.ChequeNr<0) then begin
        testf = false;
      end;    
  end;

  if (VIr.WithHoldingTax<=0) then begin testf = false; end;
  if (testf) then begin
    WithHoldingTaxToBook = (OPrwp.PInvVal)*VIr.WithHoldingTax/(VIr.PayVal-VIr.WithHoldingTax);
    wtaxpaidv = PaidWHTAxAmount(VIr.SerNr);
    if ((VIr.WithHoldingTax-wtaxpaidv)<WithHoldingTaxToBook) then begin
      WithHoldingTaxToBook = VIr.WithHoldingTax-wtaxpaidv;
    end;
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      switch (VIrw.stp) begin
        case kInvoiceRowTypeWithholdingTax: 
          rowwithhf = true;
          i = rwcnt;
      end;
    end;
    if (rowwithhf==false) then begin
      if (FindWHVETax(VIr.VECode,VIr.TransDate,WHVEr)) then begin
        rwcnt = MatRowCnt(WHVEr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(WHVEr,i,WHVErw);
          GetWHTaxRow(WHVErw.WHTax,WHTbrw);
          if (WHTbrw.PostOPWHTax!=0) then begin
            if (GetAccName(APAccRec.WHTaxAcc,tstr,60)==false) then begin
              res = 20051;
              goto LDoBookOPWHTAXforMexico;
            end; 
            rs = MulRateToBase1(VIr.CurncyCode,WithHoldingTaxToBook,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            if (CheckTTRPerRow("VIVc",APAccRec.WHTaxAcc,"",dc1,taccnumber,0)) then begin end;
            if (OPp.APonTR!=0) then begin
              AddEuroCurncyNomARTrRow(gTRp,APAccRec.WHTaxAcc,"","",tstr,rs,blankval,false,dc1,totsum,
                     VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,
                     VIr.VECode,VIr.SerNr,2,blankval,VIr.DueDate,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
            end else begin
              AddEuroCurncyTrRow(gTRp,APAccRec.WHTaxAcc,"","",tstr,rs,false,dc1,totsum,
                       VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
            end;
            
            if (GetAccName(WHTbrw.AccNumber,tstr,60)==false) then begin
              res = 20051;
              goto LDoBookOPWHTAXforMexico;
            end; 
            rs = MulRateToBase1(VIr.CurncyCode,WithHoldingTaxToBook,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

            if (CheckTTRPerRow("VIVc",WHTbrw.AccNumber,"",dc2,taccnumber,0)) then begin end;
            if (VIr.APonTR!=0) then begin
              AddEuroCurncyNomARTrRow(gTRp,WHTbrw.AccNumber,"","",tstr,rs,blankval,false,dc2,totsum,
                     VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,
                     VIr.VECode,VIr.SerNr,2,blankval,VIr.DueDate,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
            end else begin
              AddEuroCurncyTrRow(gTRp,WHTbrw.AccNumber,"","",tstr,rs,false,dc2,totsum,
                       VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
            end;
                      
          end;
        end;
      end;
    end else begin
      otxt = VIr.Objects;
      if (APAccRec.APUseObj==0) then begin
        otxt = "";
      end;
      rwcnt = MatRowCnt(VIr);
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(VIr,i,VIrw);
        if (VIrw.ovst==0) then begin
          switch (VIrw.stp) begin
            case kInvoiceRowTypeWithholdingTax:
              if (GetAccName(VIrw.AccNumber,tstr,60)==false) then begin
                res = 20051;
                goto LDoBookOPWHTAXforMexico;
              end; 
              WithHoldingTaxToBook = (OPrwp.PInvVal)*VIrw.Sum/(VIr.PayVal-VIr.WithHoldingTax);

              rs = MulRateToBase1(VIr.CurncyCode,WithHoldingTaxToBook,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              if (CheckTTRPerRow("VIVc",VIrw.AccNumber,otxt,dc2,taccnumber,0)) then begin end;
              if (VIr.APonTR!=0) then begin
                AddEuroCurncyNomARTrRow(gTRp,VIrw.AccNumber,otxt,"",tstr,rs,blankval,false,dc1,totsum,
                       VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,
                       VIr.VECode,VIr.SerNr,2,blankval,VIr.DueDate,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
              end else begin
                AddEuroCurncyTrRow(gTRp,VIrw.AccNumber,otxt,"",tstr,rs,false,dc1,totsum,
                         VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
              end;
              GetWHTaxRow(VIrw.WHTax,WHTaxrw);

              if (GetAccName(WHTaxrw.AccNumber,tstr,60)==false) then begin
                res = 2157;
                goto LDoBookOPWHTAXforMexico;
              end; 
              rs = MulRateToBase1(VIr.CurncyCode,WithHoldingTaxToBook,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              if (CheckTTRPerRow("VIVc",WHTaxrw.AccNumber,otxt,dc2,taccnumber,0)) then begin end;
              if (VIr.APonTR!=0) then begin
                AddEuroCurncyNomARTrRow(gTRp,WHTaxrw.AccNumber,otxt,"",tstr,rs,blankval,false,dc2,totsum,
                       VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,
                       VIr.VECode,VIr.SerNr,2,blankval,VIr.DueDate,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
              end else begin
                AddEuroCurncyTrRow(gTRp,WHTaxrw.AccNumber,otxt,"",tstr,rs,false,dc2,totsum,
                         VIr.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,WithHoldingTaxToBook,blankval,-1,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
              end;

          end;
        end;
      end;
    end;
//    AddWithHoldingTaxEntries(gTRp,VIr,APAccRec,"",dc1,frrate,torate1,torate2,baserate1,baserate2,totsum);
  end;
LDoBookOPWHTAXforMexico:;  
  DoBookOPWHTAXforMexico = res;
  RETURN;
END;
