external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function roundmode DefaultRoundMode();
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean TransInFiscal(Date);

global
function Integer MakeTransFromDropSH(record TRVc gTRp,record DropSHVc DropSHp,Boolean rpt)
begin
  Integer res;
  record TRGenBlock TRGenb;
  record AccBlock Accb;
  string 255 objstr;
  string 255 curncy,ftxt,taccnumber,tstr;
  val baserate1,baserate2,temp;
  Boolean dc1,dc2;
  Integer i,rwcnt;
  row DropSHVc DropSHrw;
  val TotSum,rs;

  res = 1085;
  BlockLoad(Accb);
  BlockLoad(TRGenb);
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenb.DropSHGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromDropSH;
    end;
  end;
  if (rpt==false) then begin
    if ((nonblankdate(TRGenb.DropSHStartDate)) and
        (DropSHp.ShipDate<TRGenb.DropSHStartDate)) then begin
      res = 0;
      goto LMakeTransFromDropSH;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = DropSHYc;
    gTRp.Number = DropSHp.SerNr;
    gTRp.RefStr = "";
  end;
  objstr = DropSHp.Objects;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = DropSHp.ShipDate;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromDropSH;
  end;
  curncy = "";
  GetFullCurncyRate(curncy,gTRp.TransDate,temp,temp,temp,baserate1,baserate2);
  ftxt = DropSHp.CustCode;
  ftxt = ftxt & " ";
  ftxt = ftxt & DropSHp.Addr0;
  gTRp.Comment = ftxt;
  dc1 = true;
  dc2 = false;
  rwcnt = MatRowCnt(DropSHp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DropSHp,i,DropSHrw);
    if (GetAccName(DropSHrw.COSAcc,tstr,60)==false) then begin 
      res = 2138;
      goto LMakeTransFromDropSH;
    end;

    if (CheckTTRPerRow("DropSHVc",DropSHrw.COSAcc,objstr,dc1,taccnumber,1)) then begin end;      
    rs = MulRateToBase1(DropSHp.CurncyCode,DropSHrw.Ship*DropSHrw.CostPrice,DropSHp.FrRate,DropSHp.ToRateB1,DropSHp.ToRateB2,DropSHp.BaseRate1,DropSHp.BaseRate2,DefaultCurRoundOff);    
    AddEuroCurncyTrRow(gTRp,DropSHrw.COSAcc,objstr,"",tstr,rs,false,dc1,totsum,
                       DropSHp.CurncyCode,DropSHp.FrRate,DropSHp.ToRateB1,DropSHp.ToRateB2,DropSHp.BaseRate1,DropSHp.BaseRate2,DropSHrw.Ship*DropSHrw.CostPrice,blankval,-1,false,taccnumber);


    if (GetAccName(DropSHrw.PurAccrualsAcc,tstr,60)==false) then begin 
      res = 22044;
      goto LMakeTransFromDropSH;
    end;
    if (CheckTTRPerRow("DropSHVc",DropSHrw.PurAccrualsAcc,objstr,dc2,taccnumber,1)) then begin end;      
    AddEuroCurncyTrRow(gTRp,DropSHrw.PurAccrualsAcc,objstr,"",tstr,rs,false,dc2,totsum,
                       DropSHp.CurncyCode,DropSHp.FrRate,DropSHp.ToRateB1,DropSHp.ToRateB2,DropSHp.BaseRate1,DropSHp.BaseRate2,DropSHrw.Ship*DropSHrw.CostPrice,blankval,-1,false,taccnumber);
  end;
  res = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromDropSH;
  end;
  res = 0;
LMakeTransFromDropSH:;
  MakeTransFromDropSH = res;
  return;
end;
