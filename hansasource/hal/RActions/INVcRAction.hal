external procedure SugarCRM_DELETE_INVc(record INVc);
external procedure SugarCRM_PUT_INVc(record INVc);
external procedure SugarCRM_POST_INVc(record INVc);
external function string 60 AddStringToStringList(string,string);
external procedure AutomatedSales(string,Integer);
external function boolean INInvRecepyExists(string);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function Boolean IsVATCodeDefined(string);
external procedure SplitAlphaDigit(string,var string,var LongInt);
external procedure NextM4Number(string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function string 255 RegisterInSharedSetting(string);
external function Boolean CheckMultipleIndexField(string,Integer,Integer);
external function Integer CheckObjs(string,string,var string);
external function LongInt CheckVarietyGroups(string,var string);
external procedure AddCharsToString(var string,string,Integer);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Integer CountObjects(string);
external procedure ExtractElemFromSet(string,integer,var string);

global
function Boolean GetNextItemNr(var string itemnr)
begin
  Boolean res;
  record INVc INr;
  record SRBlock SRb;

  BlockLoad(SRb);
  NextM4Number(SRb.LastArtCode,itemnr);
  if (nonblank(itemnr)) then begin
    INr.Code = itemnr;
    if (ReadFirstMain(INr,1,true)==false) then begin
      SRb.LastArtCode = itemnr;
    end else begin
      INr.Code = "ZZZZZZZZZZZZZZZZZZZ";
      if (ReadLastMain(INr,1,false)) then begin
        NextM4Number(INr.Code,itemnr);
        if (nonblank(itemnr)) then begin
          SRb.LastArtCode = itemnr; 
        end else begin
          itemnr = "1";
        end;
      end;
    end;
  end;
  GetNextItemNr = res;
  return;
end;

function boolean CheckDispGroupsInINVc(record INVc INr,var string wctype)
begin
  boolean res,found;
  record ITVc ITr;
  record DIVc DIr;
  integer typeam,i,clam,j;
  string 5 ctype,cclass;
  
  res = true;
  wctype = "";
  ITr.Code=INr.Group; 
  if (ReadFirstMain(ITr,1,true)) then begin
    if (nonblank(ITr.ClassType)) then begin
      typeam=CountObjects(ITr.ClassType); 
      clam=CountObjects(INr.DispGroups); 
      for (i=1;i<=typeam;i=i+1) begin
        ExtractElemFromSet(ITr.ClassType,i,ctype);
        found=false;
        for (j=1;j<=clam;j=j+1) begin
          ExtractElemFromSet(INr.DispGroups,j,cclass);
          ResetLoop(DIr);
          DIr.Code=cclass;
          if (ReadFirstMain(DIr,1,true)) then begin
            if (DIr.CType==ctype) then begin
              found=true;
              j=clam+1;
            end;
          end;
        end;
        if (not (found)) then begin
          res=false;
          wctype=ctype;
          i=typeam+1;
        end;
      end;
    end;
  end;
  CheckDispGroupsInINVc = res;
  return;
end;

global
function LongInt INVcRecordInIndex(record INVc INr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (INr.Terminated!=0) then begin 
    if (indexname=="ActCode") then begin res = 0; end;
    if (indexname=="ActName") then begin res = 0; end;
    if (indexname=="ActGroup") then begin res = 0; end;
    if (indexname=="ActAlternativeCode") then begin res = 0; end;
    if (indexname=="DICode") then begin res = 0; end;
    if (indexname=="DIName") then begin res = 0; end;
    if (indexname=="DIGroup") then begin res = 0; end;
    if (indexname=="DISortCode") then begin res = 0; end;
  end;
  if (INr.Terminated!=0) or (INr.NotForSales!=0) then begin 
    if (indexname=="ActCodeForSale") then begin res = 0; end;
    if (indexname=="ActNameForSale") then begin res = 0; end;
    if (indexname=="ActGroupForSale") then begin res = 0; end;
    if (indexname=="ActAlternativeCodeForSale") then begin res = 0; end;
    if (indexname=="ActDICodeForSale") then begin res = 0; end;
    if (indexname=="ActDIGroupForSale") then begin res = 0; end;
    if (indexname=="ActDINameForSale") then begin res = 0; end;
    if (indexname=="DISortCode") then begin res = 0; end;
  end;
  INVcRecordInIndex = res;
  return;
end;

function Boolean ResVcExists(string artcode)
begin
  record ResVc Resr;  

  Resr.Code = artcode;
  ResVcExists = ReadFirstMain(Resr,1,true);
end;

function Boolean TestSTVcExists(string artcode)
begin
  Boolean res;
  record STVc STr;  
  record ItemStatusVc ISr;
  record ItemHistVc IHr;
  record TBIVVc TBIVr;

  STr.ArtCode = artcode;
  res = ReadFirstMain(STr,1,true);
  if (res==false) then begin
    ISr.Code = artcode;
    if (ReadFirstMain(ISr,1,true)) then begin
      res = (ISr.Instock!=0) or (ISr.OrddOut!=0) or (ISr.POQty!=0) or (ISr.POUnOKQty!=0) or (ISr.InShipment!=0) or (ISr.RsrvQty!=0) or (ISr.StockRsrvQty!=0);
    end;
  end;
  if (res==false) then begin
    IHr.ArtCode = artcode;
    res = ReadFirstKey("ArtCode",IHr,1,true);
  end;
  if (res==false) then begin
    TBIVr.ArtCode = artcode;
    res = ReadFirstKey("ArtCode",TBIVr,1,true);
  end;
  TestSTVcExists = res; 
  return;
end;

function Boolean STVcExists(string artcode)
begin
  Boolean res;
  string 255 sharedincomp,comp;
  Integer curcomp;
  Integer pos;

  if (RegisterIsShared("INVc")) then begin
    sharedincomp = RegisterInSharedSetting("INVc");
    if (nonblank(sharedincomp)) then begin
      curcomp = CurrentCompany;
      pos = 0;
      ExtractObj(sharedincomp,pos,comp);
      while (nonblank(comp)) begin
        if (SetCompany(StringToInt(comp),false)) then begin
//       if (SetCompanyCode(comp,false)) then begin
          res = TestSTVcExists(artcode);
          if (res) then begin
            goto LSTVcExists;
          end;
        end;
        ExtractObj(sharedincomp,pos,comp);
      end;
      ResetCompany(curcomp);
    end;
  end;
  res = TestSTVcExists(artcode);
LSTVcExists:;  
  STVcExists = res; 
  return;
end;

global
function LongInt INVcRecordRemoveTest(var record INVc INr,record INVc IN2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Boolean testf;

  res = 1;
  testf = STVcExists(INr.Code);
  if (testf) then begin
    if (long3>0) then begin MessageBox(1122,""); end;
    res = 0;
  end;
  if (BuildProductCode=="StandardHotel") then begin
    testf = ResVcExists(INr.Code);
    if (testf) then begin
      MessageBox(32016,INr.Code);
      res = 0;
    end;
  end;
LINVcRecordRemoveTest:;
  INVcRecordRemoveTest = res; 
  return;
end;

global
function LongInt INVcRecordRemove(var record INVc INr,record INVc IN2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  threadasync.SugarCRM_DELETE_INVc(INr);
  INVcRecordRemove = res; 
  return;
end;

global
function LongInt INVcRecordDefaults(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ItemSettingBlock ISb;
  Boolean lightFlag;
  
  BlockLoad(ISb);
  if (SingleUserMode) then begin
    if (GetNextItemNr(INr.Code)) then begin end;
  end else begin
    INr.Code = "";
  end;
  INr.Group = ISb.DefIGroup;
  INr.WarrantyLength = ISb.WarrantyLength;
  INr.Unittext = ISb.Unittext;
  INr.SerNrf = ISb.SerNrf;
  INr.UPrice1 = blankval;
  INr.MinLevel = blankval;
  INr.Bonus = blankval;
  INr.InPrice = blankval;
  INr.ExtraCost = blankval;
  INr.PriceFactor = blankval;
  INr.UnitCoefficient = blankval;
  INr.Width = blankval;
  INr.Height = blankval;
  INr.Depth = blankval;
  INr.AlcPrc = blankval;
  INr.LastPriceChange = CurrentDate;
  INr.LastBasePriceChange = CurrentDate;
  INr.Terminated = 0;
  INr.ItemMaterial = 0;
  INr.Perceptions = ISb.Perceptions;
  if ((ProgramType==typFirstOffice) or 
      (ProgramType==typFirstOfficeSmall) or 
      (IsBooks and IsStandardProduct==false)) then begin
    lightFlag = true;
  end;    
  if (lightFlag==false) then begin // Why do we limit this, I know the setting is not in FO, but why disconnect the code?
    INr.ItemType = ISb.DefItemType;
    INr.UpdateCost = ISb.UpdateCost;
    INr.SRUpdateCost = ISb.SRUpdateCost;
  end;  
  if (BuildProductCode=="StandardProjects") then begin
    INr.ItemType = kItemTypeService;
  end;
  INr.colnr = 20;
  INVcRecordDefaults = res; 
  return;
end;

global
function LongInt INVcRecordDuplicate(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (SingleUserMode) then begin
    if (GetNextItemNr(INr.Code)) then begin end;
  end else begin
    INr.Code = "";
  end;  
  INr.WeighedAvPrice = blankval;
  INr.WeighedAvPriceB2 = blankval;
  INr.LastPurchPrice = blankval;
  INr.LastPurchPrice2 = blankval;
  INr.LastPurchCurncyCode = "";
  INr.LastPriceChange = CurrentDate;
  INr.LastBasePriceChange = CurrentDate;
  INr.Terminated = 0;
  INVcRecordDuplicate = res; 
  return;
end;

global
updating function LongInt INVcRecordSave(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record SRBlock SRb;
  string 255 lastitemnr,curitemnr;
  LongInt lastinnr,curinnr;

  BlockLoad(SRb);
  SplitAlphaDigit(SRb.LastArtCode,lastitemnr,lastinnr);
  SplitAlphaDigit(INr.Code,curitemnr,curinnr);
  if (curitemnr==lastitemnr) then begin
    if (curinnr!=lastinnr) then begin
      SRb.LastArtCode = INr.Code;
      BlockStore(SRb);
    end;
  end else begin
    SRb.LastArtCode = INr.Code;
    BlockStore(SRb);
  end;

  INr.LastPriceChange = CurrentDate;
  INr.LastBasePriceChange = CurrentDate;
  if (INr.colnr==0) then begin 
    INr.colnr = 20;
  end;
  INVcRecordSave = res; 
  return;
end;

global
function LongInt INVcRecordSaveAfter(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  string 255 autmsgfunciontags;

//  AutomatedSalesOrderly("HasItemGroups");
  if (IsStandardProduct) then begin
    autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasItemGroups");
  end;
  if (INr.ItemType==kItemTypeService or nonblank(INr.WarrantyLength)) then begin
    if (INr.ItemType==kItemTypeService) then begin
      autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModTS+OK_INVc");
    end;
  end;
  if (INr.SerNrf!=0 or nonblank(INr.WarrantyLength)) then begin
    autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModSVO+OK_INVc");
  end;
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  if (Importing==false) then begin//this was causing a crash while importing items
    threadasync.SugarCRM_POST_INVc(INr);
  end else begin
    SugarCRM_POST_INVc(INr);
  end;
  INVcRecordSaveAfter = res; 
  return;
end;

global
function LongInt INVcRecordUpdate(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (IN2r.InPrice!=INr.InPrice) then begin
    INr.LastPriceChange = CurrentDate;
  end;
  if (IN2r.UPrice1!=INr.UPrice1) then begin
    INr.LastBasePriceChange = CurrentDate;
  end;
  INVcRecordUpdate = res; 
  return;
end;

function Boolean ItemWasStockedandReceived(LongInt ordnr,Integer ordrow)
begin
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  Boolean found;
  record ItemHistVc IHr;
  Integer i,rwcnt;
  
  res = false;
  found = true;
  PUr.PONr = ordnr;
  while (LoopKey("PONr",PUr,1,found)) begin
    if (PUr.PONr!=ordnr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (PUrw.OrdRow==ordrow) then begin
          IHr.FileName = "PUVc";
          IHr.TransNr = PUr.SerNr;
          IHr.Row = i;
          if (ReadFirstKey("FNTransNr",IHr,3,true)) then begin
            if (IHr.StockAffectf!=0 and IHr.ItemType==kItemTypeStocked) then begin res = true; end;
            i = rwcnt;
            found = false;
          end;
        end;
      end;
    end;
  end;
  ItemWasStockedandReceived = res;
  return;
end;

function Boolean ItemWasFullyStockedandReceived(LongInt ordnr,Integer ordrow,val fullqty,var val recqty)
begin
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  Boolean found;
  record ItemHistVc IHr;
  Integer i,rwcnt;
  
  recqty = 0;
  res = false;
  found = true;
  PUr.PONr = ordnr;
  while (LoopKey("PONr",PUr,1,found)) begin
    if (PUr.PONr!=ordnr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (PUrw.OrdRow==ordrow) then begin
          IHr.FileName = "PUVc";
          IHr.TransNr = PUr.SerNr;
          IHr.Row = i;
          if (ReadFirstKey("FNTransNr",IHr,3,true)) then begin
            if (IHr.StockAffectf!=0 and IHr.ItemType==kItemTypeStocked) then begin
              recqty = recqty + IHr.Qty;
            end;
            if (recqty>=fullqty) then begin
              res = true;
              i = rwcnt;
              found = false;
            end;
          end;
        end;
      end;
    end;
  end;
  ItemWasFullyStockedandReceived = res;
  return;
end;

updating procedure ItemTypeChange_RecalculatePOs(record INVc INr,Boolean blankf)
begin
  record POVc POr;
  record POVc oldPOr;
  row POVc POrw;
  Boolean found,updf,ractiontrigersf,testf;
  string 255 index;
  Integer i,rwcnt;
  record MainStockBlock MSb;
  val recqty;
  
  BlockLoad(MSb);
  if (MSb.RecevPlainItems!=0) then begin
    found = true;
    index = "ActArtCodeOSFlag:" & INr.Code;
    while (LoopKey(index,POr,1,found)) begin
      if (found) then begin
        RecordCopy(oldPOr,POr);
        updf = false;
        ractiontrigersf = false;
        rwcnt = MatRowCnt(POr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(POr,i,POrw);
          testf = true;
          if (blank(POrw.ArtCode)) then begin testf = false; end;
          if (POrw.stp!=kInvoiceRowTypeNormal) then begin testf = false; end;          
          if (Left(POrw.ArtCode,len(INr.Code))!=INr.Code) then begin testf = false; end;
          if (testf) then begin
            if (ItemWasFullyStockedandReceived(POr.SerNr,i,POrw.Quant,recqty)) then begin testf = false; end;
          end;
          if (testf) then begin
            if (blankf) then begin
              if (INr.ItemType==kItemTypeStocked) then begin
                POrw.Shipd1 = recqty;
                POrw.Shipd2 = recqty;
              end else begin
                POrw.Shipd1 = blankval;
                POrw.Shipd2 = blankval;
              end;
              ractiontrigersf = false;
            end else begin
              if (INr.ItemType==kItemTypeStocked) then begin
                POrw.Shipd1 = recqty;
                POrw.Shipd2 = recqty;
              end else begin
                POrw.Shipd1 = POrw.Quant;
                POrw.Shipd2 = POrw.Quant;
              end;
              ractiontrigersf = true;
            end;
            MatRowPut(POr,i,POrw);
            updf = true;
          end;
        end;
        if (updf) then begin
          RecordUpdate(oldPOr,POr,ractiontrigersf);
        end;
      end;
    end;
  end;
  return;
end;

function Boolean ItemWasStockedandDelivered(LongInt ordnr,Integer ordrow)
begin
  Boolean res;
  record SHVc SHr;
  row SHVc SHrw;
  Boolean found;
  record ItemHistVc IHr;
  Integer i,rwcnt;
  
  res = false;
  found = true;
  SHr.OrderNr = ordnr;
  while (LoopKey("OrderKey",SHr,1,found)) begin
    if (SHr.OrderNr!=ordnr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(SHr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SHr,i,SHrw);
        if (SHrw.OrdRow==ordrow) then begin
          IHr.FileName = "SHVc";
          IHr.TransNr = SHr.SerNr;
          IHr.Row = i;
          if (ReadFirstKey("FNTransNr",IHr,3,true)) then begin
            if (IHr.StockAffectf!=0 and IHr.ItemType==kItemTypeStocked) then begin res = true; end;
            i = rwcnt;
            found = false;
          end;
        end;
      end;
    end;
  end;
  ItemWasStockedandDelivered = res;
  return;
end;

updating procedure ItemTypeChange_RecalculateORs(record INVc INr,Boolean blankf)
begin
  record ORVc ORr;
  record ORVc oldORr;
  row ORVc ORrw;
  Boolean found,updf,ractiontrigersf;
  string 255 index;
  Integer i,rwcnt;
  record MainStockBlock MSb;
  Boolean testf;
  
  BlockLoad(MSb);
  if (MSb.DelivPlainItems!=0) then begin
    found = true;
    index = "ActArtCodeOSFlag:" & INr.Code;
    ORr.OSFlag = 1;
    while (LoopKey(index,ORr,1,found)) begin
      if (ORr.OSFlag!=1) then begin found = false; end;
      if (found) then begin
        RecordCopy(oldORr,ORr);
        updf = false;
        ractiontrigersf = false;
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          testf = true;
          if (blank(ORrw.ArtCode)) then begin testf = false; end;
          if (ORrw.stp!=kInvoiceRowTypeNormal and ORrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin testf = false; end;          
          if (Left(ORrw.ArtCode,len(INr.Code))!=INr.Code) then begin testf = false; end;
          if (testf) then begin
            if (ItemWasStockedandDelivered(ORr.SerNr,i)) then begin testf = false; end;
          end;
          if (testf) then begin
            if (blankf) then begin
              ORrw.Shipd1 = blankval;
              ORrw.Shipd2 = blankval;
              ractiontrigersf = false;
            end else begin
              ORrw.Shipd1 = ORrw.Quant;
              ORrw.Shipd2 = ORrw.Quant;
              ractiontrigersf = true;
            end;
            MatRowPut(ORr,i,ORrw);
            updf = true;
          end;
        end;
        if (updf) then begin
          RecordUpdate(oldORr,ORr,ractiontrigersf);
        end;
      end;
    end;
  end;
  return;
end;

global
updating function LongInt INVcRecordUpdateAfter(record INVc curINr,record INVc prevINr,LongInt stat,LongInt long4)
begin
  LongInt res;
  string 255 autmsgfunciontags;

  if (prevINr.ItemType!=curINr.ItemType) then begin
    switch (prevINr.ItemType) begin
      case kItemTypeStocked:
        switch (curINr.ItemType) begin
          case kItemTypeService:
            ItemTypeChange_RecalculatePOs(curINr,false);
            ItemTypeChange_RecalculateORs(curINr,false);
          case kItemTypePlain:
            ItemTypeChange_RecalculatePOs(curINr,false);
            ItemTypeChange_RecalculateORs(curINr,false);
        end;
      case kItemTypeService:
        switch (curINr.ItemType) begin
          case kItemTypeStocked:
            ItemTypeChange_RecalculatePOs(curINr,true);
            ItemTypeChange_RecalculateORs(curINr,true);
        end;
      case kItemTypePlain:
        switch (curINr.ItemType) begin
          case kItemTypeStocked:
            ItemTypeChange_RecalculatePOs(curINr,true);
            ItemTypeChange_RecalculateORs(curINr,true);
        end;
    end;
    
  end;
  if (curINr.ItemType==kItemTypeService and prevINr.ItemType!=curINr.ItemType) or
    (nonblank(curINr.WarrantyLength) and prevINr.WarrantyLength!=curINr.WarrantyLength) then begin
    autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModTS+OK_INVc");
  end;
  if (curINr.SerNrf!=0 and prevINr.SerNrf!=curINr.SerNrf) or
    (nonblank(curINr.WarrantyLength) and prevINr.WarrantyLength!=curINr.WarrantyLength) then begin
    autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModSVO+OK_INVc");
  end;
  
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  threadasync.SugarCRM_PUT_INVc(curINr);
  INVcRecordUpdateAfter = res; 
  return;
end;

global
function LongInt INVcRecordImport(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock CMb;
  string 10 curcode;
  val t,fr,to1,to2,br1,br2;
      
  BlockLoad(CMb);
  if (CMb.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    GetFullCurncyRate(curcode,CurrentDate,fr,to1,to2,br1,br2);
    B1ToB2Val(INr.UPrice1,br1,br2,t);
    INr.UPrice1 = t;
    B1ToB2Val(INr.InPrice,br1,br2,t);
    INr.InPrice = t;
    B1ToB2Val(INr.ExtraCost,br1,br2,t);
    INr.ExtraCost = t;
    B1ToB2Val(INr.WeighedAvPrice,br1,br2,t);
    INr.WeighedAvPrice = t;
    B1ToB2Val(INr.LastPurchPrice,br1,br2,t);
    INr.LastPurchPrice = t;
    B1ToB2Val(INr.LastPurchPrice2,br1,br2,t);

//those ones are not same as above
    INr.LastPurchPrice2 = t;
    B1ToB2Val(INr.InPriceB2,br2,br1,t);
    INr.InPriceB2 = t;
    B1ToB2Val(INr.WeighedAvPriceB2,br2,br1,t);
    INr.WeighedAvPriceB2 = t;
  end;
  INVcRecordImport = res;
  return;
end;

function Integer IsRecepyCorrect(Integer ExplodeRec,Integer itemtype,record RecVc mainRecr,var string warning)
begin
  Integer res;
  row RecVc mainRecrwIn;
  row RecVc mainRecrwOut;
  row RecVc Recrw;
  record RecVc Recr;
  Integer ii,io,rwcnt;
  Integer i2,rwcnt2;
  record INVc INr;
  
  rwcnt = MatRowCnt(mainRecr);
  for (io=0;io<rwcnt;io=io+1) begin
    MatRowGet(mainRecr,io,mainRecrwOut);
    if (mainRecrwOut.OutQty!=0) then begin
      for (ii=0;ii<rwcnt;ii=ii+1) begin
        MatRowGet(mainRecr,ii,mainRecrwIn);
        if (mainRecrwIn.InQty!=0) and (mainRecrwIn.Item!=mainRecrwOut.Item) then begin
          INr.Code = mainRecrwIn.Item;
          if (ReadFirstItem(mainRecrwIn.Item,INr,true,false)) then begin
            if (nonblank(INr.Recepy)) then begin
              Recr.Code = INr.Recepy;
              if (ReadFirstMain(Recr,1,true)) then begin
                rwcnt2 = MatRowCnt(Recr);
                for (i2=0;i2<rwcnt2;i2=i2+1) begin
                  MatRowGet(Recr,i2,Recrw);
                  if (Recrw.Item==mainRecrwOut.Item) then begin
                    if (Recrw.OutQty!=0) then begin
                      res = 2089;
                      warning = Recr.Code;
                      goto LIsRecepyCorrect;
                    end;
                  end;
                end;
              end;
            end;
            /*
            why we cannot use SerialNumber items ? 
            if (INr.SerNrf>0) then begin
              res = 2210;
              warning = mainRecrwIn.Item;
              goto LIsRecepyCorrect;
            end;
            */
          end else begin
            res = 1290;
            warning = mainRecrwIn.Item;
            goto LIsRecepyCorrect;
          end;      
        end;
      end;
    end;
    if (mainRecrwOut.InQty!=0) then begin
      INr.Code = mainRecrwOut.Item;
      if (ReadFirstItem(mainRecrwOut.Item,INr,true,false)) then begin
        switch (itemtype) begin        
          case 2:
            if (INr.SerNrf>0) and (ExplodeRec==0) then begin
              res = 2210;
              warning = mainRecrwIn.Item;
              goto LIsRecepyCorrect;
          end;
        end;
      end else begin
        res = 1290;
        warning = mainRecrwOut.Item;
        goto LIsRecepyCorrect;
      end;      
    end;
  end;
LIsRecepyCorrect:;  
  IsRecepyCorrect = res;  
  return;
end;

procedure SplitVarietyGrups(string oldVARSubsets,Array string avars,var Integer acnt)
begin
  string 255 varietygroup;
  Integer pos;
  
  pos = 0;
  ExtractObjWithSeparator(";",oldVARSubsets,true,pos,varietygroup);
  while (nonblank(varietygroup)) begin    
    avars[acnt] = varietygroup;
    acnt = acnt + 1;
    ExtractObjWithSeparator(";",oldVARSubsets,true,pos,varietygroup);
  end;
  return;
end;

function Boolean VarietyCanbeDeleted(string artcode,string VARSubsets,string oldVARSubsets,var string missingvariety)
begin
  Boolean res;
  record ItemStatusVc ISr;
  record VARVc VARr;
  Boolean found,varfound;
  string 255 varietyinstock,varietiessubset;
  Integer posused,possubset;
  
  missingvariety = "";
  res = true;
  found = true;
  ISr.Code = artcode;
  ISr.Location = ";;;";
  while (LoopMain(ISr,2,found)) begin
    if (ISr.Code!=artcode) then begin found = false; end;
    if (ISr.Location!=";;;") then begin found = false; end;
    if (found) then begin
      if (ISr.Instock!=0) then begin
        posused = 0;
        ExtractObjWithSeparator(".",ISr.Variety,true,posused,varietyinstock);
        while (nonblank(varietyinstock)) begin        
          varfound = false;
          possubset = 0;
          ExtractObjWithSeparator(";",VARSubsets,true,possubset,varietiessubset);
          while (nonblank(varietiessubset)) begin        
            if (varietiessubset=="*") then begin 
              VARr.Code = varietyinstock;
              if ReadFirstMain(VARr,1,true) then begin 
                if (CheckVARSubsets(VARr,varietiessubset,varietyinstock)==false) then begin
                  goto LVarietyfoundinoldVARSubsets;
                end;
              end else begin
                varfound = false;
                res = false;
                missingvariety = varietyinstock;
                goto LVarietyCanbeDeleted;  
              end;
            end else begin
              varfound = SetInSet(varietyinstock,varietiessubset);
              if (varfound) then begin
                goto LVarietyfoundinoldVARSubsets;
              end;
            end;
            ExtractObjWithSeparator(";",VARSubsets,true,possubset,varietiessubset);
          end;
          if (varfound==false) then begin
            res = false;
            missingvariety = varietyinstock;
            goto LVarietyCanbeDeleted;        
          end;
LVarietyfoundinoldVARSubsets:;   
          ExtractObjWithSeparator(".",ISr.Variety,true,posused,varietyinstock);
        end;
      end;
    end;
  end;
LVarietyCanbeDeleted:;  
  VarietyCanbeDeleted = res;
  return;
end;

function Integer VerifyClassification(string classifications,var string classification)
begin
  Integer res;
  Integer pos;
  record DIVc DIr;
  
  res = 0;
  ExtractObj(classifications,pos,classification);
  while (nonblank(classification)) begin
    DIr.Code = classification;
    if (ReadFirstMain(DIr,1,true)==false) then begin
      res = 2214;
      goto LVerifyClassification;
    end;
    ExtractObj(classifications,pos,classification);
  end;
LVerifyClassification:;  
  VerifyClassification = res;  
  return; 
end;

function LongInt ValidINDataForVATLaw_Portuguese(Integer stat,record INVc INr,record INVc IN2r,var string errstr,var string gotofield)
begin
  LongInt res;
  string 255 tstr;

  res = 0;
  errstr = "";
  gotofield = "";
  if (stat==Rs_update) then begin    
    if (INr.Name!=IN2r.Name) then begin
      if (STVcExists(INr.Code)) then begin
        gotofield = "Name";
        res = 1067; 
        goto LValidINDataForVATLaw_Portuguese;
      end;
    end;
  end;
  if (INr.ItemType==kItemTypeStocked) then begin
    if (INr.StockItemType==kStockItemTypeNotDefined) then begin
      gotofield = "StockItemType";
      res = 2246; 
      goto LValidINDataForVATLaw_Portuguese;
    end;
  end;
LValidINDataForVATLaw_Portuguese:;  
  ValidINDataForVATLaw_Portuguese = res;
  return;
end;

function LongInt ValidINDataForVATLaw(Integer stat,record INVc INr,record INVc IN2r,var string errstr,var string gotofield)
begin
  LongInt res;
  
  res = 0;
  errstr = "";
  gotofield = "";
  if (HasLocalization("PRT")) then begin
    res = ValidINDataForVATLaw_Portuguese(stat,INr,IN2r,errstr,gotofield);
  end;
  ValidINDataForVATLaw = res;
  return;
end;

function LongInt ValidateItemDescriptionRows_Polish(record INVc INr,var string tstr,var Integer rownr,var string gotofield)
begin
  LongInt res;
  row INVc INrw;
  Integer i,rwcnt;
  
  res = 0;
  tstr = "";
  rownr = -1;
  gotofield = "";
  if (len(INr.Name)>50) then begin
    gotofield = "Name";
    res = 22139;
    goto LValidateItemDescriptionRows_Polish;
  end;
  rwcnt = MatRowCnt(INr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INr,i,INrw);
    if (len(INrw.Text)>50) then begin
      gotofield = "Text";
      rownr = i;
      res = 22139;
      goto LValidateItemDescriptionRows_Polish;
    end;
  end;
LValidateItemDescriptionRows_Polish:;  
  ValidateItemDescriptionRows_Polish = res;
  return;
end;

global
function LongInt INVcRecordCheck(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record INVc lINr;
  record ITVc ITr;
  Boolean checkf,check;
  record ItemSettingBlock ISb;
  string 255 tstr,gotofield;
  record RecVc Recr;
  record UnitVc Unitr;
  Integer errcode;
  Boolean lightFlag,found,testf;
  record MainStockBlock MSb;
  record AccVc Accr;
  record ItemHistVc IHr;  
  record STVc STr;    
  record TaxTemplateVc TTr;
  record ItemStatusVc ISr;
  Integer rownr;
  
  res = 0;
  if ((ProgramType==typFirstOffice) or 
      (ProgramType==typFirstOfficeSmall) or 
      (ProgramType==typFirstOfficePro) or 
      (IsBooks)) then begin
    lightFlag = true;
  end;  
  BlockLoad(ISb);
  BlockLoad(MSb);
  if (blank(INr.Code)) then begin
    if (GetNextItemNr(INr.Code)) then begin end;
    lINr.Code = INr.Code;
    if (ReadFirstMain(lINr,1,true)) then begin
      RecordCheckError(1547,INr.Code,-1,"Code");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  if (len(INr.Code)<=0) then begin
    RecordCheckError(1130,"",-1,"Code");      
    res = -1; 
    goto LINVcRecordCheck;
  end;
  if (blank(INr.Name)) then begin
    RecordCheckError(1058,INr.Name,-1,"Name");      
    res = -1; 
    goto LINVcRecordCheck;
  end;
  if (ISb.BarCodeLength>0) then begin
    if (nonblank(INr.BarCode)) then begin
      if (len(INr.BarCode)<ISb.BarCodeLength ) then begin
        tstr = INr.BarCode;
        AddCharsToString(tstr,"0",ISb.BarCodeLength-len(INr.BarCode));
        INr.BarCode = tstr;
      end;
    end;
  end;
  if (INr.ItemType==kItemTypeStructured) then begin
    if (blank(INr.Recepy)) then begin
      RecordCheckError(1058,"",-1,"Recepy");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (INr.ItemType!=kItemTypeStocked) then begin
    if (INr.SerNrf!=0) then begin
      RecordCheckError(20105,"",-1,"Department");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  res = ValidINDataForVATLaw(stat,INr,IN2r,tstr,gotofield);
  if (res!=0) then begin
    RecordCheckError(res,tstr,-1,gotofield);      
    res = -1; 
    goto LINVcRecordCheck;
  end;
  if (INr.DonotRequireBatchNrOnIVCash!=0) then begin
    if (INr.SerNrf!=2) then begin
      RecordCheckError(20106,"",-1,"MinLevel");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (lightFlag==false) then begin
    if (nonblank(INr.Unittext)) and (IsSyncing==false) then begin
      Unitr.Code = INr.Unittext;
      if (ReadFIrstMain(Unitr,1,true)==false) then begin
        RecordCheckError(1120,"",-1,"Unittext");      
        res = -1; 
        goto LINVcRecordCheck;
      end;
    end;
  end;
  if (IsSyncing==false) then begin
    if (nonblank(INr.VARMask)) then begin
      if (blank(MSb.MainStock)) then begin
        if (CountRecords("LocationVc")>0) then begin
          RecordCheckError(1743,"",-1,"VARMask");      
          res = -1;
          goto LINVcRecordCheck;
        end;
      end;
    end;
  end;
  
  if (CheckAllowedSize(INr,INr.Width,INr.Height,INr.Depth)==false) then begin
    RecordCheckError(1480,"",-1,"Width");      
    res = -1; 
    goto LINVcRecordCheck;
  end;
  if (ISb.DemandItemGroup!=0) then begin
    if (blank(INr.Group)) then begin
      RecordCheckError(1058,"",-1,"Group");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.Group)) then begin
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)==false) then begin
      RecordCheckError(1120,INr.Group,-1,"Group");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (ISb.UniqueBarCode!=0) then begin
    if (nonblank(INr.BarCode)) then begin
      if (stat==Rs_insert) then begin checkf = true; end;
      if (stat==Rs_update) then begin
        if (blank(IN2r.BarCode)) then begin checkf = true; end;
        if (INr.BarCode!=IN2r.BarCode) then begin checkf = true; end;
      end;
      if (checkf) then begin
        lINr.BarCode = INr.BarCode;
        if (ReadFirstKey("BarCode",lINr,1,true)) then begin
          RecordCheckError(1547,"",-1,"BarCode");      
          res = -1; 
          goto LINVcRecordCheck;
        end;
      end;
    end;
  end;
  if (INr.DefPosHeight>0) then begin
    if (INr.PalletHeight>0) then begin
      if (INr.DefPosHeight<INr.PalletHeight) then begin
        RecordCheckError(20400,"",-1,"DefPosHeight");      
        res = -1; 
        goto LINVcRecordCheck;
      end;
    end;
  end;
  if (INr.DefPosDepth>0) then begin
    if (INr.PalletDepth>0) then begin
      if (INr.DefPosDepth<INr.PalletDepth) then begin
        RecordCheckError(20401,"",-1,"DefPosDepth");      
        res = -1; 
        goto LINVcRecordCheck;
      end;
    end;
  end;
  if (INr.DefPosWidth>0) then begin
    if (INr.PalletWidth>0) then begin
      if (INr.DefPosWidth<INr.PalletWidth) then begin
        RecordCheckError(20402,"",-1,"DefPosWidth");      
        res = -1; 
        goto LINVcRecordCheck;
      end;
    end;
  end;
  if (nonblank(INr.Objects)) then begin
    errcode = CheckObjs("",INr.Objects,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,tstr,-1,"Objects");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.VARMask)) then begin
    res = CheckVarietyGroups(INr.VARMask,tstr);
    if (res!=0) then begin
      RecordCheckError(res," " & tstr,-1,"VARMask");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.VARRepOrder)) then begin
    res = CheckVarietyGroups(INr.VARRepOrder,tstr);
    if (res!=0) then begin
      RecordCheckError(res," " & tstr,-1,"VARRepOrder");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.Recepy) and (IsSyncing==false)) then begin
    Recr.Code = INr.Recepy;
    if (ReadFirstMain(Recr,1,true)) then begin
      if (Recr.Closed!=0) then begin
        RecordCheckError(2088,"",-1,"Recepy");      
        res = -1; 
        goto LINVcRecordCheck;
      end;
      errcode = IsRecepyCorrect(INr.ExplodeRec,INr.ItemType,Recr,tstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,": " & tstr,-1,"Recepy");      
        res = -1; 
        goto LINVcRecordCheck;      
      end;
    end else begin
      RecordCheckError(1290,"",-1,"Recepy");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.Group)) then begin
    if (CheckDispGroupsInINVc(INr,tstr)==false) then begin
      RecordCheckError(1707," " & tstr,-1,"DispGroups");//change type     
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.DispGroups)) then begin
    errcode = VerifyClassification(INr.DispGroups,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode," " & tstr,-1,"DispGroups");//change type     
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (CheckMultipleIndexField(INr.DispGroups,10,10)==false) then begin
    RecordCheckError(2246,"",-1,"DispGroups");      
    res = -1; 
    goto LINVcRecordCheck;
  end;
  if (nonblank(INr.SalesAcc)) then begin
    Accr.AccNumber = INr.SalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.EUSalesAcc)) then begin
    Accr.AccNumber = INr.EUSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"EUSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.ExpSalesAcc)) then begin
    Accr.AccNumber = INr.ExpSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"ExpSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.CostAcc)) then begin
    Accr.AccNumber = INr.CostAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"CostAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.CredSalesAcc)) then begin
    Accr.AccNumber = INr.CredSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"CredSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.CredEUSalesAcc)) then begin
    Accr.AccNumber = INr.CredEUSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"CredEUSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.CredExpSalesAcc)) then begin
    Accr.AccNumber = INr.CredExpSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"CredExpSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.CompUsage)) then begin
    Accr.AccNumber = INr.CompUsage;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"CompUsage");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.HotelWIPAcc)) then begin
    Accr.AccNumber = INr.HotelWIPAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"HotelWIPAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.EUCostAcc)) then begin
    Accr.AccNumber = INr.EUCostAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"EUCostAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.ExpCostAcc)) then begin
    Accr.AccNumber = INr.ExpCostAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"ExpCostAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOInvbleSalesAcc)) then begin
    Accr.AccNumber = INr.SVOInvbleSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOInvbleSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOWarrantySalesAcc)) then begin
    Accr.AccNumber = INr.SVOWarrantySalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOWarrantySalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOContractSalesAcc)) then begin
    Accr.AccNumber = INr.SVOContractSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOContractSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOGoodwillSalesAcc)) then begin
    Accr.AccNumber = INr.SVOGoodwillSalesAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOGoodwillSalesAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOInvbleCostAcc)) then begin
    Accr.AccNumber = INr.SVOInvbleCostAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOInvbleCostAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOWarrantyCostAcc)) then begin
    Accr.AccNumber = INr.SVOWarrantyCostAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOWarrantyCostAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOContractCostAcc)) then begin
    Accr.AccNumber = INr.SVOContractCostAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOContractCostAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.SVOGoodwillCostAcc)) then begin
    Accr.AccNumber = INr.SVOGoodwillCostAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",-1,"SVOGoodwillCostAcc");      
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;

  if (nonblank(INr.VATCode)) then begin
    if (IsVATCodeDefined(INr.VATCode)==false) then begin
      RecordCheckError(1951,"",-1,"VATCode");      
      res = -1;
      goto LINVcRecordCheck;
    end;
    if (VATAccIsClosed(INr.VATCode,tstr,1)) then begin
      RecordCheckError(1258,tstr,-1,"VATCode");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.VATCodeEU)) then begin
    if (IsVATCodeDefined(INr.VATCodeEU)==false) then begin
      RecordCheckError(1951,"",-1,"VATCodeEU");      
      res = -1;
      goto LINVcRecordCheck;
    end;
    if (VATAccIsClosed(INr.VATCodeEU,tstr,1)) then begin
      RecordCheckError(1258,tstr,-1,"VATCodeEU");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.VATCodeExp)) then begin
    if (IsVATCodeDefined(INr.VATCodeExp)==false) then begin
      RecordCheckError(1951,"",-1,"VATCodeExp");      
      res = -1;
      goto LINVcRecordCheck;
    end;
    if (VATAccIsClosed(INr.VATCodeExp,tstr,1)) then begin
      RecordCheckError(1258,tstr,-1,"VATCodeExp");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.CredVATCodeEU)) then begin
    if (IsVATCodeDefined(INr.CredVATCodeEU)==false) then begin
      RecordCheckError(1951,"",-1,"CredVATCodeEU");      
      res = -1;
      goto LINVcRecordCheck;
    end;
    if (VATAccIsClosed(INr.CredVATCodeEU,tstr,1)) then begin
      RecordCheckError(1258,tstr,-1,"CredVATCodeEU");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.CredVATCodeExp)) then begin
    if (IsVATCodeDefined(INr.CredVATCodeExp)==false) then begin
      RecordCheckError(1951,"",-1,"CredVATCodeExp");      
      res = -1;
      goto LINVcRecordCheck;
    end;
    if (VATAccIsClosed(INr.CredVATCodeExp,tstr,1)) then begin
      RecordCheckError(1258,tstr,-1,"CredVATCodeExp");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  
  if (stat==Rs_update) then begin
    if (check) then begin
      if (INr.ItemType!=IN2r.ItemType) then begin 
        switch (IN2r.ItemType) begin
          case kItemTypePlain:
            switch (INr.ItemType) begin
              case kItemTypeStocked:
/*              
                STr.ArtCode = INr.Code;
                if (ReadFirstMain(STr,1,true)) then begin
                  RecordCheckError(27352,"",-1,"Code");      
                  res = -1; 
                  goto LINVcRecordCheck;
                end;
*/                
              case kItemTypeStructured:
                STr.ArtCode = INr.Code;
                if (ReadFirstMain(STr,1,true)) then begin
                  RecordCheckError(27352,"",-1,"Code");      
                  res = -1; 
                  goto LINVcRecordCheck;
                end;
            end;
          case kItemTypeStocked:
            FindStockValue(INr.Code,"",ISr);
            if (ISr.Instock!=0) then begin
              RecordCheckError(21440,"",-1,"Code");      
              res = -1; 
              goto LINVcRecordCheck;
            end;      
/* 
allow             
            found = true;
            IHr.ArtCode = INr.Code;
            while (LoopKey("ArtCode",IHr,1,found)) begin
              if (IHr.ArtCode!=INr.Code) then begin
                found = false;
              end;
              if (found) then begin
                testf = true;
                if (IHr.StockAffectf==0) then begin testf = false; end;
                if (testf) then begin
                  RecordCheckError(27352,"",-1,"Code");      
                  res = -1; 
                  goto LINVcRecordCheck;
                end;
              end;
            end;  
*/                  
          case kItemTypeStructured:
            STr.ArtCode = INr.Code;
            if (ReadFirstMain(STr,1,true)) then begin
              RecordCheckError(27352,"",-1,"Code");      
              res = -1; 
              goto LINVcRecordCheck;
            end;
          case kItemTypeService:
            switch (INr.ItemType) begin
              case kItemTypeStocked:
/*              
                STr.ArtCode = INr.Code;
                if (ReadFirstMain(STr,1,true)) then begin
                  RecordCheckError(27352,"",-1,"Code");      
                  res = -1; 
                  goto LINVcRecordCheck;
                end;
*/                
              case kItemTypeStructured:
                STr.ArtCode = INr.Code;
                if (ReadFirstMain(STr,1,true)) then begin
                  RecordCheckError(27352,"",-1,"Code");      
                  res = -1; 
                  goto LINVcRecordCheck;
                end;
            end;
        end;
      end;
      if (INr.SerNrf!=IN2r.SerNrf) then begin 
        found = true;
        IHr.ArtCode = INr.Code;
        while (LoopKey("ArtCode",IHr,1,found)) begin
          if (IHr.ArtCode!=INr.Code) then begin
            found = false;
          end;
          if (found) then begin
            testf = true;
            if (IHr.StockAffectf==0) then begin testf = false; end;
            if (testf) then begin
              RecordCheckError(1391," " & INr.Code,-1,"Code");      
              res = -1; 
              goto LINVcRecordCheck;
            end;
          end;
        end;        
      end;
      if (nonblank(IN2r.VARSubsets)) then begin
        if (IN2r.VARSubsets!=INr.VARSubsets) then begin
          if (VarietyCanbeDeleted(INr.Code,INr.VARSubsets,IN2r.VARSubsets,tstr)==false) then begin
            RecordCheckError(1391," " & tstr,-1,"VARSubsets");      
            res = -1; 
            goto LINVcRecordCheck;
          end;
        end;
      end;      
    end;
  end;
  if (nonblank(INr.TaxTemplateCode)) then begin
    TTr.Code = INr.TaxTemplateCode;
    if (ReadFirstMain(TTr,1,true)==false) then begin
      RecordCheckError(1120,INr.TaxTemplateCode,-1,"TaxTemplateCode");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.TaxTemplateCodeEU)) then begin
    TTr.Code = INr.TaxTemplateCodeEU;
    if (ReadFirstMain(TTr,1,true)==false) then begin
      RecordCheckError(1120,INr.TaxTemplateCodeEU,-1,"TaxTemplateCodeEU");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.TaxTemplateCodeExp)) then begin
    TTr.Code = INr.TaxTemplateCodeExp;
    if (ReadFirstMain(TTr,1,true)==false) then begin
      RecordCheckError(1120,INr.TaxTemplateCodeExp,-1,"TaxTemplateCodeExp");      
      res = -1; 
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.InvRecepy)) then begin
    if (INInvRecepyExists(INr.InvRecepy)==false) then begin
      RecordCheckError(1290,": " & INr.InvRecepy,-1,"InvRecepy");
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.ContractItem)) then begin
    lINr.Code = INr.ContractItem;
    if (ReadFirstMain(lINr,1,true)==false) then begin
      RecordCheckError(1290,": " & INr.ContractItem,-1,"ContractItem");
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;
  if (nonblank(INr.RentalItem)) then begin
    lINr.Code = INr.RentalItem;
    if (ReadFirstMain(lINr,1,true)==false) then begin
      RecordCheckError(1290,": " & INr.RentalItem,-1,"RentalItem");
      res = -1;
      goto LINVcRecordCheck;
    end;
  end;  
  if (IsStandardProduct) then begin
    if (HasLocalization("POL")) then begin
      res = ValidateItemDescriptionRows_Polish(INr,tstr,rownr,gotofield);
      if (res!=0) then begin
        RecordCheckError(res,tstr,rownr,gotofield);
        res = -1;
        goto LINVcRecordCheck;
      end;
    end;
  end;

LINVcRecordCheck:;
  INVcRecordCheck = res;
  return;
end;

global
function LongInt INVcRecordImportTest(var record INVc INr,record INVc IN2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 255 class;
  Integer pos;
  
  res = 1;
  if (CheckMultipleIndexField(INr.DispGroups,10,10)==false) then begin
    INr.DispGroups = "";
  end;
  INVcRecordImportTest = res;
  return;
end;

global 
function Boolean INVcRecordShouldBeSynchronised(record INVc INr,string tagstr)
begin
  Boolean res;

  res = INr.Terminated==0;
  INVcrecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean INVcRecordSync(record INVc INr,string tagstr)
begin
  Boolean res;
  
  res = true;
  INVcRecordSync = res;
  return;
end;

global 
function Boolean INVcRecordShouldBeSynchronisedInitialy(record INVc INr,string tagstr)
begin
  Boolean res;
  
  res = INr.Terminated==0;
  INVcRecordShouldBeSynchronisedInitialy = res;
  return;
end;
