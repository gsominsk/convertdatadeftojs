external procedure B1ToB2StrValRM(string,val,val,var string,roundmode);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external procedure WarnFutureDate(Boolean,Date);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external procedure B1ToB2StrVal(string,val,val,var string);
external procedure PUSumUp(var record PUVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external function Boolean SerNrTestLateCostVc(LongInt,Date,var Boolean);
external updating procedure LateCostUpdateCostPrice(record LateCostVc);
external procedure LateCostSumUp(var record LateCostVc);
external function Boolean DateWarned(Date,string);
external function Boolean IsSerialNrCorrect(string);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Integer MakeTransFromLateCost(record TRVc,record LateCostVc,record LocationVc,Boolean);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function Boolean IsOffice(Boolean);
external function Integer CheckObjs(string,string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function LongInt GetCurUserLastNr(string);
external procedure GetCurUser(var record UserVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure SwapM4Val(var val,var val);

procedure LateCostVcConvertB1ToB2(var record LateCostVc LateCostp,string curp,val frp,var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN
  row LateCostVc LateCostrw;
  Integer rwcnt,i;
  val fr,to1,to2,br1,br2;
  string 20 curncy;
  Boolean base2inv;
  Boolean treated;
  Date curdate;
  val t;
  string 255 tstr;

  curdate = CurrentDate;
  curncy = curp;
  GetFullCurncyRate(curncy,curdate,fr,to1,to2,br1,br2);
  if (curncy==curp) then begin base2inv = true; end;
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  rwcnt = MatRowCnt(LateCostp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCostp,i,LateCostrw);
    B1ToB2StrValRM(LateCostrw.Extra,br1p,br2p,tstr,GetCostRoundModeRB);
    LateCostrw.Extra = tstr;
    B1ToB2ValRM(LateCostrw.CostPrice,br1p,br2p,t,GetCostRoundModeRB);
    LateCostrw.CostPrice = t;
    B1ToB2ValRM(LateCostrw.ShipCost,br1p,br2p,t,GetCostRoundModeRB);
    LateCostrw.ShipCost = t;
    B1ToB2ValRM(LateCostrw.RowCost1,br1p,br2p,t,GetCostRoundModeRB);
    LateCostrw.RowCost1 = t;
    B1ToB2ValRM(LateCostrw.RowCost2,br1p,br2p,t,GetCostRoundModeRB);
    LateCostrw.RowCost2 = t;
    B1ToB2ValRM(LateCostrw.RowCost3,br1p,br2p,t,GetCostRoundModeRB);
    LateCostrw.RowCost3 = t;
    B1ToB2ValRM(LateCostrw.RowCost4,br1p,br2p,t,GetCostRoundModeRB);
    LateCostrw.RowCost4 = t;
    B1ToB2ValRM(LateCostrw.RowCost5,br1p,br2p,t,GetCostRoundModeRB);
    LateCostrw.RowCost5 = t;
    B1ToB2StrValRM(LateCostrw.CustomsCost,br1p,br2p,tstr,GetCostRoundModeRB);
    LateCostrw.CustomsCost = tstr;
    MatRowPut(LateCostp,i,LateCostrw);
  end;
  LateCostSumUp(LateCostp);
  RETURN;
END;

global
function LongInt LateCostVcRecordDefaults(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;
    
  LateCostr.SerNr = -1;  
  LateCostr.RegDate = CurrentDate;
  LateCostr.TransDate = CurrentDate;
  LateCostr.Invalid = 0;
  if (SingleUserMode) then begin
    LateCostr.SerNr = NextSerNr("LateCostVc",LateCostr.TransDate,-1,false,"");
  end;
  LateCostr.PUNr = -1;
  LateCostr.PONr = -1;
  LateCostr.POCOSerNr = -1;
  LateCostr.Cost1 = blankval;
  LateCostr.Cost2 = blankval;
  LateCostr.Cost3 = blankval;
  LateCostr.Cost4 = blankval;
  LateCostr.Cost5 = blankval;
  LateCostr.SumQuant = blankval;
  LateCostr.ShipCost = blankval;
  LateCostr.CustomsCost = blankval;
  LateCostr.SumCostPrice = blankval;
  LateCostr.SubTotal = blankval;
  LateCostr.VATVal = blankval;
  LateCostr.PayVal = blankval;
  LateCostr.FrRate = blankval;
  LateCostr.ToRateB1 = blankval;
  LateCostr.ToRateB2 = blankval;
  LateCostr.BaseRate1 = blankval;
  LateCostr.BaseRate2 = blankval;
  GetCurUser(Userr);
  LateCostr.Location = Userr.Location;
  LateCostVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt LateCostVcRecordDuplicate(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row LateCostVc LateCostrw;   
  Integer rwcnt,i;
      
  LateCostr.SerNr = -1;
  LateCostr.PONr = -1;
  LateCostr.PUNr = -1;
  LateCostr.OKFlag = 0;
  LateCostr.Invalid = 0;
  rwcnt = MatRowCnt(LateCostr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowDelete(LateCostr,i);
    rwcnt = MatRowCnt(LateCostr);
    i = i - 1;
  end;
  if (SingleUserMode) then begin
    LateCostr.SerNr = NextSerNr("LateCostVc",LateCostr.TransDate,-1,false,"");
  end;
  LateCostSumUp(LateCostr); 
  WarnFutureDate(true,LateCostr.TransDate);
  LateCostVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt LateCostVcRecordRemoveTest(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (LateCostr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LLateCostVcRecordRemoveTest;
  end;
  if (LateCostr.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LLateCostVcRecordRemoveTest:;
  LateCostVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt LateCostVcRecordReset(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
  LateCostr.OKFlag = 0;
  LateCostVcRecordReset = res; 
  RETURN;
END;

global
updating function LongInt LateCostVcRecordSave(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (LateCostr.OKFlag!=0) then begin
  end;
  LateCostVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt LateCostVcRecordSaveAfter(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (LateCostr.OKFlag!=0) then begin
    LateCostUpdateCostPrice(LateCostr);  // this should never be called during import!!! 
  end;
  LateCostVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt LateCostVcRecordUpdate(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((LateCostr.OKFlag!=0) and (LateCost2r.OKFlag==0)) then begin
    LateCostUpdateCostPrice(LateCostr);  // this should never be called during import!!! 
  end;
  LateCostVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt LateCostVcRecordRemove(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  LateCostVcRecordRemove = res;
  RETURN;
END;

function Integer SerialNrOnThisLateCost(record LateCostVc LateCostp,string ArtCode,string SerialNr)
BEGIN
  row LateCostVc LateCostrw;
  Integer rwcnt,i;
  val qty;

  qty = 0;
  rwcnt = MatRowCnt(LateCostp);
  for (i = 0 ; i<rwcnt;i=i+1) begin
    MatRowGet(LateCostp,i,LateCostrw);
    if (LateCostrw.ArtCode==ArtCode) and (LateCostrw.SerialNr==SerialNr) then begin
      qty = qty + LateCostrw.Quant;
    end;  
  end;
  SerialNrOnThisLateCost = qty;//ValToInt(qty)
  RETURN;
END;

global
updating function LongInt LateCostVcRecordCheck(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record LateCostVc localLateCostr;
  record INVc INr;
  record LocationVc LocRec;
  record MainStockBlock MainStockRec;
  record SRBlock SRRec;
  row LateCostVc LateCostrw;
  row LateCostVc LateCost2rw;
  Integer rwcnt;
  Integer i,j;
  LongInt oldnr;
  LongInt newnr;
  Boolean transf,gentrans;
  val t;
  Integer insertmode,updatemode;
  Integer errcode;
  LongInt sernr;
  record TRVc gTRp;
  string 255 errstr;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  transf = false;
  if (LateCostr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (LateCost2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  BlockLoad(SRRec);
  BlockLoad(MainStockRec);
  oldnr = LateCostr.SerNr;
  if (LateCostr.SerNr<=0) then begin
    LateCostr.SerNr = NextSerNr("LateCostVc",LateCostr.TransDate,-1,false,"");
  end;
  
  if ((stat==insertmode) or (LateCostr.SerNr!=LateCost2r.SerNr)) then begin
    localLateCostr.SerNr = LateCostr.SerNr;
    if (ReadFirstMAin(localLateCostr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
  end;
  localLateCostr.PUNr = LateCostr.PUNr;
  if (ReadFirstKey("PUNr",localLateCostr,1,true)) then begin
    if (localLateCostr.SerNr!=LateCostr.SerNr) then begin
      RecordCheckError(1547,"",-1,"PUNr");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
  end;
  if (SerNrTestLateCostVc(LateCostr.SerNr,LateCostr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto L99LateCostVcRecordCheck;
  end;
  if (Date2Test("LateCostVc",LateCostr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto L99LateCostVcRecordCheck;
  end; 
  if (DisallowFutureDateCheck(true,LateCostr.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto L99LateCostVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("LateCostOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"LateCostOK"),-1,"SerNr");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
  end;  
  LocRec.Code = LateCostr.Location;
  if (nonblank(LateCostr.Location)) then begin
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      RecordCheckError(1120,LateCostr.Location,-1,"Location");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
  end else begin
    if (MainStockRec.requireLocation==0) then begin
      LocRec.Code = MainStockRec.MainStock;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
      end;
    end else begin
      RecordCheckError(1058,LateCostr.Location,-1,"Location");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
  end;
  if (nonblank(LateCostr.Objects)) then begin     
    errcode = CheckObjs("",LateCostr.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
  end;    
  rwcnt = MatRowCnt(LateCostr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCostr,i,LateCostrw);
  if (LateCostrw.stp==1) then begin
      if (LateCostrw.Quant<0) then begin
        RecordCheckError(1574,"",i,"Quant");      
        res = -1;
        goto L99LateCostVcRecordCheck;
      end;
    if (blank(LateCostrw.ArtCode)) then begin
      RecordCheckError(1130,"",i,"ArtCode");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
    if (ReadFirstItem(LateCostrw.ArtCode,INr,true,true)==false) then begin
      RecordCheckError(1120,"",i,"ArtCode");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
    if (INr.SerNrf==0) then begin
      RecordCheckError(1132,"",i,"ArtCode");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;    
    if (CheckAllowedSize(INr,LateCostrw.UnitXval,LateCostrw.UnitYval,LateCostrw.UnitZval)==false) then begin
      RecordCheckError(1480,"",i,"UnitXval");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
    if (nonblank(LateCostrw.Objects)) then begin 
      errcode = CheckObjs("",LateCostrw.Objects,errstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,i,"Objects");      
        res = -1;
        goto L99LateCostVcRecordCheck;
      end;
    end;
    if (LateCostrw.Quant==blankval) then begin
      RecordCheckError(1058,"",i,"Quant");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
    if (INr.ItemType==2) then begin
      RecordCheckError(1826,"",i,"ArtCode");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
    if (transf) then begin
      if (((INr.SerNrf>0) and (INr.SerNrf<3))) then begin
        if (LateCostrw.Quant!=0) then begin
          if (blank(LateCostrw.SerialNr)) then begin
            RecordCheckError(1239,"",i,"SerialNr");      
            res = -1;
            goto L99LateCostVcRecordCheck;
          end;
        end;
        if (Mid(LateCostrw.SerialNr,len(LateCostrw.SerialNr),1)==" ") then begin
          RecordCheckError(1239,"",i,"SerialNr");      
          res = -1;
          goto L99LateCostVcRecordCheck;
        end;
        if (IsSerialNrCorrect(LateCostrw.SerialNr)==false) then begin
          RecordCheckError(24154,LateCostrw.SerialNr,i,"SerialNr");      
          res = -1; 
          goto L99LateCostVcRecordCheck;
        end;        
        switch (INr.SerNrf) begin
          case 1:  // serial nr. 
            // is the serial number available at any location 
            for (j=0;j<i;j=j+1) begin              
              MatRowGet(LateCostr,j,LateCost2rw);
              if ((LateCostrw.ArtCode==LateCost2rw.ArtCode) and
                  (LateCostrw.SerialNr==LateCost2rw.SerialNr)) then begin
                RecordCheckError(1241,"",i,"SerialNr");      
                res = -1;
                goto L99LateCostVcRecordCheck;
              end;
            end;
            if (LateCostrw.Quant>1) then begin
              RecordCheckError(1242,"",i,"Quant");      
              res = -1;
              goto L99LateCostVcRecordCheck;
            end;
            if (SerialNrOnThisLateCost(LateCostr,LateCostrw.ArtCode,LateCostrw.SerialNr)>1) then begin
              RecordCheckError(1242,"",i,"Quant");      
              res = -1;
              goto L99LateCostVcRecordCheck;
            end;
          case 2:  ;// batch nr. 
        end;
      end;
    end;
  end;
  end;
  if (DateWarned(LateCostr.TransDate,"LateCostVc")) then begin
    MessageBox(1045,"");
  end;      
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromLateCost(gTRp,LateCostr,LocRec,false);
    if (errcode>0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1;
      goto L99LateCostVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==LateCostYc)) then begin
      errstr = CheckTrans(gTRp,2,true);
      if (nonblank(errstr)) then begin
        RecordCheckError(1085,errstr,-1,"SerNr");      
        res = -1;
        goto L99LateCostVcRecordCheck;
      end;
      SaveTrans(gTRp);
    end;    
  end;  
L99LateCostVcRecordCheck:;
  if (res!=0) then begin LateCostr.SerNr = oldnr; end;
  LateCostVcRecordCheck = res;
  RETURN;
END;
  
global
function LongInt LateCostVcRecordImport(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ConvMasterBlock cvm;
  Boolean gToDualBase,gBase1ToBase2;
  val fr,to1,to2,br1,br2,t;
  string 10 curncy;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    curncy = LateCostr.CurncyCode;
    fr = LateCostr.FrRate;
    to1 = LateCostr.ToRateB1;
    to2 = LateCostr.ToRateB2;
    br1 = LateCostr.BaseRate1;
    br2 = LateCostr.BaseRate2;
    ConvertToDualBase(curncy,LateCostr.TransDate,fr,to1,to2,br1,br2,t,false);
    LateCostr.CurncyCode = curncy;
    LateCostr.FrRate = fr;
    LateCostr.ToRateB1 = to1;
    LateCostr.ToRateB2 = to2;
    LateCostr.BaseRate1 = br1;
    LateCostr.BaseRate2 = br2;
  end;
  if (gBase1ToBase2) then begin
    to1 = LateCostr.ToRateB1;
    to2 = LateCostr.ToRateB2;
    br1 = LateCostr.BaseRate1;
    br2 = LateCostr.BaseRate2;
    LateCostVcConvertB1ToB2(LateCostr,LateCostr.CurncyCode,LateCostr.FrRate,to1,to2,br1,br2);
    LateCostr.ToRateB1 = to1;
    LateCostr.ToRateB2 = to2;
    LateCostr.BaseRate1 = br1;
    LateCostr.BaseRate2 = br2;
  end;
  LateCostVcRecordImport = res;
  RETURN;
END;

global
updating function LongInt LateCostVcRecordImportAfter(var record LateCostVc LateCostr,record LateCostVc LateCost2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
    
  if (LateCostr.OKFlag!=0) then begin
  end;
  LateCostVcRecordImportAfter = res; 
  RETURN;
END;

