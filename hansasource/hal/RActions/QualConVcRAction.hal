external updating procedure UpdateBatchBestBefore(string,string,string,Date,Date,val,val,val,Integer,Integer,Boolean,
                                                  string,string,string,string,string,string,string,string,
                                                  string,string,string,string,string,string,string,string, string,string);
external updating procedure UpdateSerStockBestBefore(string,string,Date);
external function Boolean PasteCUInSVO(var record SVOVc,string,var string);
external function Boolean PasteItemInSVO(var record SVOVc,Integer);
external updating procedure StoreItemHistory_In(record MainStockBlock,string,string,string,string,Date,Date,val,val,val,LongInt,Integer,Integer,string,string,record TempStockVc,Boolean);

global
function LongInt QualConVcRecordDefaults(var record QualConVc QualConr,record QualConVc QualCon2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  QualConr.SerNr = -1;
  if (SingleUserMode) then begin  
    QualConr.SerNr = NextSerNr("QualConVc",QualConr.AnalyseDate,-1,false,"");
  end;
  QualConr.TestedBy = CurrentUser;
  QualConr.AgreementNr = -1;
  QualConr.RentResSerNo = -1;
  QualConVcRecordDefaults = res; //QualConView
  return;
end;

global
function LongInt QualConVcRecordDuplicate(var record QualConVc QualConr,record QualConVc QualCon2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  QualConr.SerNr = -1;
  if (SingleUserMode) then begin  
    QualConr.SerNr = NextSerNr("QualConVc",QualConr.AnalyseDate,-1,false,"");
  end;
  QualConr.OKFlag = 0;
  QualConr.TestedBy = CurrentUser;
  QualConr.AgreementNr = -1;
  QualConr.RentResSerNo = -1;
  QualConVcRecordDuplicate = res; 
  return;
end;

global
function LongInt QualConVcRecordSave(var record QualConVc QualConr,record QualConVc QualCon2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (SingleUserMode) then begin  
    QualConr.SerNr = NextSerNr("QualConVc",QualConr.AnalyseDate,-1,false,"");
  end;
  QualConVcRecordSave = res;
  return;
end;

global
updating procedure QualConUpdateINrs2(record QualConVc QualConr,record TempStockVc TSr,Boolean usetmpstkf)
begin
  record RentINVc RentINr;
  record RentResVc RentResr;
  record MainStockBlock MainStockRec;
  string 50 location;

  BlockLoad(MainStockRec);
  location = MainStockRec.MainStock;
  RentINr.Code = QualConr.ArtCode;
  RentINr.SerialNr = QualConr.SerialNr;
  if (ReadFirstMain(RentINr,2,true)) then begin
    if (nonblank(RentINr.OrgLocation)) then begin
      location = RentINr.OrgLocation;
    end;
  end;
  RentResr.SerNr = QualConr.RentResSerNo;
  if (ReadFirstMain(RentResr,1,true)) then begin
    if (nonblank(RentResr.Location)) then begin
      location = RentResr.Location;
    end;
  end;
  StoreItemHistory_In(MainStockRec,QualConr.ArtCode,QualConr.SerialNr,location,"QualConVc",QualConr.AnalyseDate,QualConr.AnalyseDate,0,1,0,QualConr.SerNr,-1,0,"","",TSr,usetmpstkf);
  return;
end;

global
updating procedure QualConUpdateINrs(record QualConVc QualConr)
begin
  record TempStockVc TSr;
  
  QualConUpdateINrs2(QualConr,TSr,false);
  return;
end;

updating procedure QualConOK(record QualConVc QualConr,Boolean importf)
begin
  record RentINVc RentINr;
  record RentINVc oldRentINr;
  record AgreementVc Agreementr;
  record RentResVc RentResr;
  record BatchStatusVc BatchStatusr;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  string 200 warn;
  string 20 custcode;
  record MainStockBlock MainStockRec;
  Date bd;
  
  BatchStatusr.Code = QualConr.StatusCode;
  if (importf==false) then begin
    if (ReadFirstMain(BatchStatusr,1,true)) then begin
      BlockLoad(MainStockRec);
      custcode = "";
      if (BatchStatusr.CreateSVO<>0) then begin
        RecordNew(SVOr);
        Agreementr.SerNr = QualConr.AgreementNr;
        if (ReadFirstMain(Agreementr,1,true)) then begin
          custcode = Agreementr.CustCode;
          SVOr.CustCode = Agreementr.CustCode;
          if (PasteCUInSVO(SVOr,"",warn)) then begin
          end;
        end;
        SVOr.Comment1 = QualConr.Comment;
        SVOr.QualConSerNr = QualConr.SerNr;
        ClearRow(SVOr,SVOrw,1);
        SVOrw.ArtCode = QualConr.ArtCode;
        SVOrw.SerialNr = QualConr.SerialNr;
        SVOrw.stp = 1;
        MatRowPut(SVOr,0,SVOrw);
        if (PasteItemInSVO(SVOr,0)) then begin
          if (RecordInsert(SVOr,true)) then begin end;
        end;
      end;
      RentINr.Code = QualConr.ArtCode;
      RentINr.SerialNr = QualConr.SerialNr;
      if (ReadFirstMain(RentINr,2,true)) then begin
        if (RentINr.RentINStatus<>BatchStatusr.RentINStatus) then begin
          RecordCopy(oldRentINr,RentINr);
          RentINr.RentINStatus = BatchStatusr.RentINStatus;
          if (RecordUpdate(oldRentINr,RentINr,false)==0) then begin end;
        end;
      end;
    end;
    QualConUpdateINrs(QualConr);
  end;
  UpdateSerStockBestBefore(QualConr.ArtCode,QualConr.SerialNr,QualConr.NewBestBefore);
  UpdateBatchBestBefore(QualConr.ArtCode,"",QualConr.SerialNr,bd,QualConr.NewBestBefore,0,0,0,0,0,false,"","","","","","","","","","","","","","","","","","");
  return;
end;

global
updating function LongInt QualConVcRecordSaveAfter(var record QualConVc QualConr,record QualConVc QualCon2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (QualConr.OKFlag!=0) then begin
    QualConOK(QualConr,false);
  end;
  QualConVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt QualConVcRecordUpdateAfter(var record QualConVc QualConr,record QualConVc QualCon2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (QualConr.OKFlag!=0) then begin
    QualConOK(QualConr,false);
  end;
  QualConVcRecordUpdateAfter = res;
  return;
end;

function Boolean TestVcRecordExists(record QualConVc QCr)
begin
  Boolean res;
  record ProdVc Prodr;
  record ProdOperationVc ProdOpr;
  record SDVc SDr;
  record PUVc PUr;
  record RetVc Retr;
  record RetPUVc RetPUr;
  
  switch (QCr.Vc) begin
    case kQCProdVc:
      Prodr.SerNr = QCr.VcSerNr;
      res = ReadFirstMain(Prodr,1,true);
    case kQCProdOperationVc:
      ProdOpr.SerNr = QCr.VcSerNr;
      res = ReadFirstMain(ProdOpr,1,true);
    case kQCSDVc:
      SDr.SerNr = QCr.VcSerNr;
      res = ReadFirstMain(SDr,1,true);
    case kQCPUVc:
      PUr.SerNr = QCr.VcSerNr;
      res = ReadFirstMain(PUr,1,true);
    case kQCRetVc:
      Retr.SerNr = QCr.VcSerNr;
      res = ReadFirstMain(Retr,1,true);
    case kQCRetPUVc:
      RetPUr.SerNr = QCr.VcSerNr;
      res = ReadFirstMain(RetPUr,1,true);
    otherwise
      res = true;
  end;
  TestVcRecordExists = res;
  return;
end;

global
function LongInt QualConVcRecordCheck(var record QualConVc QualConr,record QualConVc QualCon2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record QualConVc locQualConr;
  Integer insertmode,updatemode;

  res = 0;
  insertmode = 1;//Rs_insert
  if (QualConr.SerNr<=0) then begin
    QualConr.SerNr = NextSerNr("QualConVc",QualConr.AnalyseDate,-1,false,"");
  end;
  if ((stat==insertmode) or (QualConr.SerNr!=QualCon2r.SerNr)) then begin
    locQualConr.SerNr = QualConr.SerNr;
    if (ReadFirstMain(locQualConr,1,true)) then begin
      RecordCheckError(1115,"",-1,"SerNr");      
      res = -1;
      goto LQualConVcRecordCheck;
    end;
  end;  
  if (QualConr.SerNr==-1) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto LQualConVcRecordCheck;
  end;
   if (blank(QualConr.ArtCode)) then begin
    RecordCheckError(1058,"",-1,"ArtCode");      
    res = -1;
    goto LQualConVcRecordCheck;
  end;
  if (blank(QualConr.SerialNr)) then begin
    RecordCheckError(1058,"",-1,"SerialNr");      
    res = -1;
    goto LQualConVcRecordCheck;
  end;
  if (TestVcRecordExists(QualConr)==false) then begin
    RecordCheckError(1290,"",-1,"VcSerNr");      
    res = -1;
    goto LQualConVcRecordCheck;
  end;
LQualConVcRecordCheck:;  
  QualConVcRecordCheck = res;
  return;
end;

global
function LongInt QualConVcRecordRemoveTest(var record QualConVc QualConr,record QualConVc QualCon2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = 1;
  if (QualConr.OKFlag<>0) then begin
    res = 0;
  end;
  QualConVcRecordRemoveTest = res;
  return;
end;

