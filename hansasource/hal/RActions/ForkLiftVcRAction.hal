external function LongInt CheckVarietyGroups(string,var string);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function LongInt ForkLiftVcRecordInIndex(record ForkLiftVc ForkLiftr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (ForkLiftr.Closed!=0) then begin 
    if (indexname=="ActCode")  then begin res = 0; end;
    if (indexname=="ActComment")  then begin res = 0; end;
    if (indexname=="ActMode")  then begin res = 0; end;
  end;
  if (ForkLiftr.Mode!=0) then begin
    if (indexname=="ActMode")  then begin res = 0; end;
  end;
  ForkLiftVcRecordInIndex = res;
  RETURN;
END;

global
function LongInt ForkLiftVcRecordRemoveTest(var record ForkLiftVc ForkLiftr,record ForkLiftVc ForkLift2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record STVc STr;
  Boolean testf;

  res = 1;

  if (testf) then begin
    if (long3>0) then begin MessageBox(1122,""); end;
    res = 0;
  end;
LForkLiftVcRecordRemoveTest:;
  ForkLiftVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt ForkLiftVcRecordDefaults(var record ForkLiftVc ForkLiftr,record ForkLiftVc ForkLift2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  ForkLiftVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt ForkLiftVcRecordDuplicate(var record ForkLiftVc ForkLiftr,record ForkLiftVc ForkLift2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  ForkLiftr.Closed = 0;
  ForkLiftr.Mode = 0;
  ForkLiftVcRecordDuplicate = res; 
  RETURN;
END;

/*
global
function LongInt ForkLiftVcRecordSave(var record ForkLiftVc ForkLiftr,record ForkLiftVc ForkLift2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  ForkLiftVcRecordSave = res; 
  RETURN;
END;

global
function LongInt INVcRecordUpdate(var record ForkLiftVc ForkLiftr,record ForkLiftVc ForkLift2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  INVcRecordUpdate = res; 
  RETURN;
END;

global
function LongInt ForkLiftVcRecordImport(var record ForkLiftVc ForkLiftr,record ForkLiftVc ForkLift2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  ForkLiftVcRecordImport = res;
  RETURN;
END;
*/
global
function LongInt ForkLiftVcRecordCheck(var record ForkLiftVc ForkLiftr,record ForkLiftVc ForkLift2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ForkLiftVc lINr;
  Integer insertmode,updatemode;
  
  res = 0;
  insertmode = 1;
  updatemode = 2;
  if (blank(ForkLiftr.Code)) then begin
    RecordCheckError(1058,"",-1,"Code");      
    res = -1; 
    goto LForkLiftVcRecordCheck;
  end;
LForkLiftVcRecordCheck:;
  ForkLiftVcRecordCheck = res;
  RETURN;
END;
