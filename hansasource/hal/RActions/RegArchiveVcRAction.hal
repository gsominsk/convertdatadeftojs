procedure AddAffectedReg(var record RegArchiveVc RegArchiver,string filename,string description,string belongto)
begin
  row RegArchiveVc RegArchiverw;
  
  RegArchiverw.FileName = filename;
  RegArchiverw.Text = description;
  RegArchiverw.TransDate = RegArchiver.TransDate;
  RegArchiverw.ConnectTo = belongto;
  MatRowPut(RegArchiver,MatRowCnt(RegArchiver),RegArchiverw);
  return;
end;

global
procedure ReFillAffectedRegs(var record RegArchiveVc RegArchiver)
begin
  AddAffectedReg(RegArchiver,"TRVc","Transactions","");
  AddAffectedReg(RegArchiver,"ItemHistVc","Item History","");
//  AddAffectedReg(RegArchiver,"SDVc","Stock Depreciations","");
//  AddAffectedReg(RegArchiver,"ObjBalVc","Account/Object Balance","TRVc");
//  AddAffectedReg(RegArchiver,"MainVc","Account History","TRVc");
  return;
end;

procedure FillAffectedRegs(var record RegArchiveVc RegArchiver)
begin
  if (MatRowCnt(RegArchiver)<=0) then begin
    ReFillAffectedRegs(RegArchiver);
  end;
  return;
end;

global
function LongInt RegArchiveVcRecordDefaults(var record RegArchiveVc RegArchiver,record RegArchiveVc RegArchive2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  RegArchiver.RegDate = CurrentDate;
  RegArchiveVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt RegArchiveVcRecordDuplicate(var record RegArchiveVc RegArchiver,record RegArchiveVc RegArchive2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Date bldat;
  
  while (MatRowCnt(RegArchiver)>0) begin
    MatRowDelete(RegArchiver,0);
  end;
  RegArchiver.TransDate = bldat;
  RegArchiver.RegDate = CurrentDate;
  RegArchiveVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt RegArchiveVcRecordSave(var record RegArchiveVc RegArchiver,record RegArchiveVc RegArchive2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  FillAffectedRegs(RegArchiver);
  RegArchiveVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt RegArchiveVcRecordSaveAfter(var record RegArchiveVc RegArchiver,record RegArchiveVc RegArchive2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  RegArchiveVcRecordSaveAfter = res;
  RETURN;
END;

global
function LongInt RegArchiveVcRecordUpdate(var record RegArchiveVc RegArchiver,record RegArchiveVc RegArchive2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  FillAffectedRegs(RegArchiver);
  RegArchiveVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt RegArchiveVcRecordUpdateAfter(var record RegArchiveVc RegArchiver,record RegArchiveVc RegArchive2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  RegArchiveVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt RegArchiveVcRecordCheck(var record RegArchiveVc RegArchiver,record RegArchiveVc RegArchive2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode;
  record RegArchiveVc locRegArchiver;
  
  res = 0;
  insertmode = 1;
  if blank(RegArchiver.Code) then begin
    res = -1;
    RecordCheckError(1959,"",-1,"Code");      
    goto LRegArchiveVcRecordCheck;     
  end;  
LRegArchiveVcRecordCheck:;  
  RegArchiveVcRecordCheck = res;
  RETURN;
END;

