external function Boolean GetAPPayRate(LongInt,var val,var val,var val,var val,var val,string,Date);
external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external procedure GetVATRow(string,var row VATCodeBlock);
external function Boolean FindWHVETax(string,Date,var record WHVEVc);
external function roundmode DefaultRoundMode();
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure SumupTRVATCode(record TRVc,string,var val,var string);

external function Boolean NegativeAmountsOnIVTrans(Integer,val);
external function Integer GetAccNamCurVAT(string,var string,var string,Integer,string);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure RoundRowSum(string,string,string,var val);
external procedure MulM4ProcVal(val,val,var val);
external function string 20 GetPayPurchVATAcc(string,record VATCodeBlock);
external function string 5 AddVATCodeToVATAccRows(string);
external procedure FindPurchVATAcc(string,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncySmRow(var record SMVc,Date,string,string,string,string,val,Boolean,Boolean,var val,string,
                                      val,val,val,val,val,val,val);
external function val CalculateVIWithholdingTax(var record VIVc,string,val);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);

function Integer PostVIWithholdingTaxes(record TRVc gTRp,record VIVc VIp,record WHVEVc WHVEr,record APAccBlock APAccRec,string otxt,Boolean dc2,
                                        val frrate,val torate1,val torate2,val baserate1,val baserate2,
                                        var val totsum)
begin
  Integer errstrno;
  row VIVc VIrw;
  row WHVEVc WHVErw;
  Integer i,rwcnt;
  val whtax,totwhtax,dsc,net;
  val rs;
  row WHTaxBlock WHTbrw;
  string 255 whtaxacc;
  string 255 tstr,taccnumber;
  
  if (true) then begin
    rwcnt = MatRowCnt(VIp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIp,i,VIrw);
      net = net + VIrw.Sum; 
    end;

    rwcnt = MatRowCnt(WHVEr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WHVEr,i,WHVErw);
      if (VIp.TransDate>=WHVErw.StartDate) or (blankdate(WHVErw.StartDate)) then begin
        GetWHTaxRow(WHVErw.WHTax,WHTbrw);
        whtax = CalculateVIWithholdingTax(VIp,WHTbrw.WHCalcForm,net);
        if (WHVErw.Discount!=0) then begin
          dsc = whtax*WHVErw.Discount;
          dsc = dsc/100;
          whtax = whtax - dsc;
        end;
        whtaxacc = WHTbrw.AccNumber;
        if (blank(whtaxacc)) then begin
          whtaxacc = APAccRec.WHTaxAcc;
        end;
        if (GetAccName(whtaxacc,tstr,60)==false) then begin
          errstrno = 20051;
          goto LPostVIWithholdingTaxes;
        end; 
        rs = MulRateToBase1(VIp.CurncyCode,whtax,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        if (CheckTTRPerRow("VIVc",whtax,otxt,dc2,taccnumber,0)) then begin end;
        if (VIp.APonTR!=0) then begin
          AddEuroCurncyNomARTrRow(gTRp,whtaxacc,otxt,"",tstr,rs,blankval,true,dc2,totsum,
                 VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,whtax,blankval,
                 VIp.VECode,VIp.SerNr,2,blankval,VIp.DueDate,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
        end else begin
          AddEuroCurncyTrRow(gTRp,whtaxacc,otxt,"",tstr,rs,true,dc2,totsum,
                   VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,whtax,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
        end;
      end;
    end;
  end;
LPostVIWithholdingTaxes:; 
  PostVIWithholdingTaxes = errstrno;
  return;
end;

global
function Integer AddWithHoldingTaxEntries(record TRVc gTRp,record VIVc VIp,record APAccBlock APAccRec,string otxt,Boolean dc2,
                                          val frrate,val torate1,val torate2,val baserate1,val baserate2,
                                          var val totsum)
begin
  Integer errstrno;
  record VITBlock VITb;
  val rs;
  string 255 tstr,taccnumber;
  Boolean treatedf,rowwithhf;
  record WHVEVc WHVEr;
  row VIVc VIrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    switch (VIrw.stp) begin
      case kInvoiceRowTypeWithholdingTax: 
        rowwithhf = true;
        i = rwcnt;        
    end;
  end;
  if (rowwithhf==false) then begin
    BlockLoad(VITb);   
    if (VITb.CalcWithholdingTax!=0) then begin
      if (FindWHVETax(WHVEr.VECode,VIp.TransDate,WHVEr)) then begin
        errstrno = PostVIWithholdingTaxes(gTRp,VIp,WHVEr,APAccRec,otxt,dc2,frrate,torate1,torate2,baserate1,baserate2,totsum);
        treatedf = true;
      end;
    end;
    if (treatedf==false) then begin
      if (GetAccName(APAccRec.WHTaxAcc,tstr,60)==false) then begin
        errstrno = 20051;
        goto LAddWithHoldingTaxEntries;
      end; 
      rs = MulRateToBase1(VIp.CurncyCode,VIp.WithHoldingTax,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (CheckTTRPerRow("VIVc",APAccRec.WHTaxAcc,otxt,dc2,taccnumber,0)) then begin end;
      if (VIp.APonTR!=0) then begin
        AddEuroCurncyNomARTrRow(gTRp,APAccRec.WHTaxAcc,otxt,"",tstr,rs,blankval,false,dc2,totsum,
               VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,VIp.WithHoldingTax,blankval,
               VIp.VECode,VIp.SerNr,2,blankval,VIp.DueDate,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end else begin
        AddEuroCurncyTrRow(gTRp,APAccRec.WHTaxAcc,otxt,"",tstr,rs,false,dc2,totsum,
                 VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,VIp.WithHoldingTax,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
      end;
    end;
  end else begin
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(VIp,i,VIrw);
      if (VIrw.ovst==0) then begin
        switch (VIrw.stp) begin
          case kInvoiceRowTypeWithholdingTax:
            if (GetAccName(VIrw.AccNumber,tstr,60)==false) then begin
              errstrno = 20051;
              goto LAddWithHoldingTaxEntries;
            end; 
            rs = MulRateToBase1(VIp.CurncyCode,VIrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            if (CheckTTRPerRow("VIVc",VIrw.AccNumber,otxt,dc2,taccnumber,0)) then begin end;
            if (VIp.APonTR!=0) then begin
              AddEuroCurncyNomARTrRow(gTRp,VIrw.AccNumber,otxt,"",tstr,rs,blankval,false,dc2,totsum,
                     VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,VIrw.Sum,blankval,
                     VIp.VECode,VIp.SerNr,2,blankval,VIp.DueDate,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
            end else begin
              AddEuroCurncyTrRow(gTRp,VIrw.AccNumber,otxt,"",tstr,rs,false,dc2,totsum,
                       VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,VIrw.Sum,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
            end;
        end;
      end;
    end;
  end;
LAddWithHoldingTaxEntries:;
  AddWithHoldingTaxEntries = errstrno;
  return;
end;

global
function Integer AddVIPrePayRow(record TRVc gTRp,record VIVc VIp,record CUVc VEr,Integer rownr,string object,val frrate,val torate1,val torate2,
                       val baserate1,val baserate2,Boolean dc1,Boolean dc2,val totsum,record APAccBlock APAccb,record VATCodeBlock VATCodeRec)
begin
  record OPPVc OPPr;
  record CCatVc CCatr;
  record VGVc VGr;
  row VIVc VIrw;
  Integer res;
  Boolean foundopp;
  val pfr,pto1,pto2,pbr1,pbr2,baseprep,baseprep2;
  val diff,tprepay,prepayval,vatval;
  val rs,bookrs,coff;
  string 255 apacc,tstr,objstr,onaccacc,vatobjstr,vatacc;
  record BaseCurBlock BCb;
  Date bd;
  row VATCodeBlock VATCbrw;
  Integer OPBookVAT;
    
  res = 0;       
  objstr = object;
  MatRowGet(VIp,rownr,VIrw);
  if (VIrw.stp!=kInvoiceRowTypePrepayment) then begin
    goto LAddVIPrePayRow;
  end;
  if (VIrw.PrepayNr==-1) then begin
    goto LAddVIPrePayRow;
  end;
  BlockLoad(BCb);
  
  if (HasLocalization("POL")) then begin
    OPBookVAT = VIp.OPBookVAT;
  end else begin
    switch (VEr.OPBookVAT) begin
      case 1:
        OPBookVAT = 1;
      case 2:
        OPBookVAT = 0;
      otherwise
        OPBookVAT = APAccb.OPBookVAT;
    end;
  end;
  OPPr.SerNr = VIrw.PrepayNr;
  foundopp = ReadFirstMain(OPPr,1,true);  
  if (GetAPPayRate(VIrw.PrepayNr,pfr,pto1,pto2,pbr1,pbr2,OPPr.CurncyCode,OPPr.PayDate)==false) then begin
    GetFullCurncyRate(OPPr.CurncyCode,OPPr.PayDate,pfr,pto1,pto2,pbr1,pbr2);  
  end;

  prepayval = VIrw.PrepayAmount;
  baseprep = VIrw.Sum;
  if (baseprep<=0) then begin
    baseprep = MulRateToBase1(OPPr.CurncyCode,prepayval,pfr,pto1,pto2,pbr1,pbr2,DefaultCurRoundOff);
  end;
  tprepay = MulRateToBase1(VIp.CurncyCode,prepayval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  vatval = MulRateToBase1(VIp.CurncyCode,VIrw.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  diff = tprepay - baseprep;

  if (nonblank(VIp.APAcc)) then begin
    apacc = VIp.APAcc;
  end else begin
    apacc = APAccb.APAcc;
  end;
  if (GetAccName(apacc,tstr,60)==false) then begin
    res = 1915;
    goto LAddVIPrePayRow;
  end;  
  onaccacc = VIrw.AccNumber;
  if (blank(onaccacc)) then begin
    if (true) then begin
      onaccacc = VEr.OnAccAccAP;
      if (blank(onaccacc)) then begin
        if (blank(VEr.VECat)) then begin
          CCatr.Code = VEr.CustCat;
          if (ReadFirstMain(CCatr,1,true)) then begin
            onaccacc = CCatr.OnAccAccAP;
          end;
        end else begin
          VGr.Code = VEr.VECat;
          if (ReadFirstMain(VGr,1,true)) then begin
            onaccacc = VGr.OnAccAcc;
          end;
        end;
      end;
    end;
  end;
  if (blank(onaccacc)) then begin
    onaccacc = APAccb.OnAccAcc;
  end;
  if (true) then begin  //if (onaccacc!=apacc) then begin  //what the hell ?
    if (APAccb.APUseObj==0) then begin
      objstr = "";
    end;

    if (VIp.APonTR!=0) then begin
       AddEuroCurncyNomARTrRow(gTRp,VIp.APAcc,objstr,"",tstr,tprepay,blankval,false,dc2,totsum,
          VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,prepayval,blankval,
          VIp.VECode,VIp.SerNr,2,blankval,VIp.DueDate,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
    end else begin
       AddEuroCurncyTrRow(gTRp,VIp.APAcc,objstr,"",tstr,tprepay,false,dc2,totsum,
          VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,prepayval,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"");
    end;        
    if (GetAccName(onaccacc,tstr,60)==false) then begin
      res = 1916;
      goto LAddVIPrePayRow;
    end;
    tprepay = Round(baseprep,DefaultRoundMode);
    if (APAccb.PrepExclVAT!=0 and APAccb.PreOPBookVAT!=kPreOPBookVATTypeNotVAT) then begin
      tprepay = tprepay - vatval;
    end;
    CurValToOtherCur(VIp.TransDate,VIp.CurncyCode,tprepay,OPPr.CurncyCode,prepayval,DefaultCurRoundOff);
    if (VIp.APonTR!=0) then begin
       AddEuroCurncyNomARTrRow(gTRp,onaccacc,object,AddVATCodeToVATAccRows(VIrw.VATCode),tstr,tprepay,blankval,false,dc1,totsum,
            OPPr.CurncyCode,pfr,pto1,pto2,pbr1,pbr2,prepayval,blankval,
            VIp.VECode,VIp.SerNr,2,blankval,VIp.DueDate,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
    end else begin
       AddEuroCurncyTrRow(gTRp,onaccacc,object,AddVATCodeToVATAccRows(VIrw.VATCode),tstr,tprepay,false,dc1,totsum,
            OPPr.CurncyCode,pfr,pto1,pto2,pbr1,pbr2,prepayval,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"");
    end;
  end;
  if (GetAccName(VIp.APAcc,tstr,60)==false) then begin
    res = 1915;
    goto LAddVIPrePayRow;
  end;

//Trace("diff " & diff," APAccb.RateGainAcc " & APAccb.RateGainAcc & " APAccb.RateLossAcc " & APAccb.RateLossAcc);//really?

  if (diff>0) then begin
    if (GetAccName(APAccb.RateGainAcc,tstr,60)==false) then begin
      res = 1917;
      goto LAddVIPrePayRow;
    end;
    if (VIp.CurncyCode==BCb.BaseCur2) then begin
       AddEuroCurncyNomARTrRow(gTRp,APAccb.RateGainAcc,"","",tstr,diff,0,true,dc1,totsum,
            "",blankval,blankval,blankval,baserate1,baserate2,blankval,blankval,
            "",-1,0,blankval,bd,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
    end else begin
      AddEuroTrRow(gTRp,APAccb.RateGainAcc,"","",tstr,diff,baserate1,baserate2,true,dc1,totsum,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
    end;
  end;
  if (diff<0) then begin
     if (GetAccName(APAccb.RateLossAcc,tstr,60)==false) then begin
        res = 1918;
        goto LAddVIPrePayRow;
     end;
    if (VIp.CurncyCode==BCb.BaseCur2) then begin
       AddEuroCurncyNomARTrRow(gTRp,APAccb.RateLossAcc,"","",tstr,diff,0,true,dc1,totsum,
            "",blankval,blankval,blankval,baserate1,baserate2,blankval,blankval,
            "",-1,0,blankval,bd,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
    end else begin
      AddEuroTrRow(gTRp,APAccb.RateLossAcc,"","",tstr,diff,baserate1,baserate2,true,dc1,totsum,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
    end;
  end;
  if (OPPr.VATVal!=0) then begin
//PREPVIPL
    vatobjstr = ""; 
    if (APAccb.VATUseObj!=0) then begin
      vatobjstr = VIp.Objects;
    end;
/*    
    rs = OPPr.VATVal;
    bookrs = OPPr.VATBookVal;
    if (VIp.PayVal<OPPr.PPVal) then begin
      coff = VIp.PayVal/OPPr.PPVal;
      rs = OPPr.VATVal*coff;
      bookrs = OPPr.VATBookVal*coff;
    end else begin
      if (VIrw.PrepayAmount<OPPr.PPVal) then begin
        coff = VIrw.PrepayAmount/OPPr.PPVal;
        rs = OPPr.VATVal*coff;
        bookrs = OPPr.VATBookVal*coff;
      end;
    end;
    */
    rs = VIrw.VATVal;
    bookrs = MulRateToBase1(VIp.CurncyCode,VIrw.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
   
    if ((OPBookVAT==0) and (APAccb.PreOPBookVAT!=0)) or
       ((OPBookVAT!=0) and (APAccb.PreOPBookVAT!=0)) then begin
       if (APAccb.PrepExclVAT!=0 and APAccb.PreOPBookVAT!=kPreOPBookVATTypeNotVAT) then begin
         vatacc = GetPayPurchVATAcc(VIrw.VATCode,VATCodeRec);
         if (blank(vatacc)) then begin        
           vatacc = APAccb.VATAcc;
         end;
         if (GetAccName(vatacc,tstr,60)==false) then begin
           res = 20025;
           goto LAddVIPrePayRow;
         end;
//         if (CheckTTRPerRow("OPVc",vatacc,vatobjstr,dc1,taccnumber,1)) then begin end;            
         AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(VIrw.VATCode),tstr,bookrs,false,dc1,totsum,VIp.CurncyCode,
                            pfr,pto1,pto2,pbr1,pbr2,rs,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"");
         
       end else begin

        vatacc = APAccb.OnAccVAT;
        if (GetAccName(vatacc,tstr,60)==false) then begin
          res = 1912;
          goto LAddVIPrePayRow;
        end;
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(VIrw.VATCode),tstr,bookrs,false,dc2,totsum,VIp.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,rs,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"");
        FindPurchVATAcc(VIrw.VATCode,vatacc);
        GetVATRow(VIrw.VATCode,VATCbrw);
        if (APAccb.PostVIVATonVATCorr!=0) then begin
          vatacc = VATCbrw.CorPurchVATAcc;
        end;
        if (blank(vatacc)) then begin        
          vatacc = APAccb.VATAcc;
        end;
        if (GetAccName(vatacc,tstr,60)==false) then begin
          res = 1912;
          goto LAddVIPrePayRow;
        end;
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(VIrw.VATCode),tstr,bookrs,APAccb.PreOPBookVAT!=0,dc1,totsum,VIp.CurncyCode,//GetVATLaw==45, 
                           pfr,pto1,pto2,pbr1,pbr2,rs,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"");
      end;
    end;
    if ((OPBookVAT!=0) and (APAccb.PreOPBookVAT==0)) then begin
      vatacc = GetPayPurchVATAcc(VIrw.VATCode,VATCodeRec);
      if (blank(vatacc)) then begin        
        vatacc = APAccb.VATAcc;
      end;
      if (GetAccName(vatacc,tstr,60)==false) then begin
        res = 1912;
        goto LAddVIPrePayRow;
      end;
      AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(VIrw.VATCode),tstr,bookrs,HasLocalization("UKR"),dc1,totsum,VIp.CurncyCode,
                         pfr,pto1,pto2,pbr1,pbr2,rs,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"");
      
      FindPurchVATAcc(VIrw.VATCode,vatacc);
      if (GetAccName(vatacc,tstr,60)==false) then begin 
        res = 1903;
        goto LAddVIPrePayRow; 
      end;
      AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(VIrw.VATCode),tstr,bookrs,HasLocalization("UKR"),dc2,totsum,VIp.CurncyCode,
                         pfr,pto1,pto2,pbr1,pbr2,rs,blankval,-1,VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales,"");
    end;                     
  end;
LAddVIPrePayRow:;
  AddVIPrePayRow = res;
  RETURN;
END;

global
procedure AddVIPeriodSMRow(record SMVc gSMp,record VIVc VIp,string viraccno,string accno,record AutSimPerVc ASPp,string rwotxt,string vatcod,
                           val frrate,val torate1,val torate2,val baserate1,val baserate2,val base1valp,val virwsump,
                           Boolean accflag,Boolean dc1,Boolean dc2)
BEGIN
  record BaseCurBlock bcur;
  row AutSimPerVc ASPrw;
  Integer rwcnt,i;
  date pdat;
  LongInt months,days;
  val totsum,totsum2,t,tcur,totsumcur;
  string 255 tstr;
  string 5 locvatcod;
    
  BlockLoad(bcur);
  rwcnt = MatRowCnt(ASPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ASPp,i,ASPrw);
    locvatcod = vatcod;
    if (blank(ASPrw.Months)) then begin
      months = 0;
    end else begin
      months = FirstInRange(ASPrw.Months,10);
    end;
    if (blank(ASPrw.Days)) then begin
      days = 0;
    end else begin
      days = FirstInRange(ASPrw.Days,10);
    end;
    pdat = VIp.TransDate;
    if (days!=0) then begin
      pdat = AddDay(pdat,-GetDay(pdat) + 1);
    end;  
    pdat = AddMonth(pdat,months);
    if (days>0) then begin
      pdat = AddDay(pdat,days-1);
    end;  
    if (days<0) then begin
      pdat = AddDay(pdat,days);
    end;  
    if (blankdate(pdat)) then begin pdat = VIp.TransDate; end;
    tstr = "";
    if (ASPrw.calc=="=") then begin
      if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
        t = base1valp + totsum;
        tcur = virwsump + totsumcur;
      end else begin
        t = base1valp - totsum;
        tcur = virwsump - totsumcur;
      end;
    end else begin
      tstr = ASPrw.calc;
      if (Mid(tstr,len(tstr)-1,1)=="%") then begin
        tstr = Left(tstr,len(tstr)-1);
      end;
      MulM4ProcVal(StringToVal(tstr,M45Val),base1valp,t);
      MulM4ProcVal(StringToVal(tstr,M45Val),virwsump,tcur);
      RoundRowSum(bcur.BaseCur1,VIp.PayDeal,"VIVc",tcur); 
      if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
        totsumcur = totsumcur - tcur;
      end else begin
        totsumcur = totsumcur + tcur;
      end;
    end;
    if (nonblank(ASPrw.VATCode)) then begin
      locvatcod = ASPrw.VATCode;
      RoundRowSum(bcur.BaseCur1,VIp.PayDeal,"VIVc",t);
    end;
    if (GetAccName(accno,tstr,60)==false) then begin end;
    AddEuroCurncySmRow(gSMp,pdat,accno,rwotxt,locvatcod,tstr,t,accflag,dc1,totsum,VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,tcur,blankval);
    if (GetAccName(viraccno,tstr,60)==false) then begin end;
    AddEuroCurncySmRow(gSMp,pdat,viraccno,rwotxt,locvatcod,tstr,t,accflag,dc2,totsum2,VIp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,tcur,blankval);
  end;
  RETURN;
END;

global
function Integer PostTaxMatrix_VIVc(var record TRVc gTRp,record APAccBlock APb,record VATCodeBlock VATCodeb,record VIVc VIp,string objstr,
                             val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
begin
  Integer errstrno;
  record TaxMatrixVc TMr;
  row TaxMatrixVc TMrw;
  Integer i,rwcnt;
  string 255 tstr,taccnumber,PurchVATAcc;
  row VATCodeBlock VATCbrw;
  
  UnpackFieldMatrix(VIp,"TaxMatrix",TMr);
  rwcnt = MatRowCnt(TMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TMr,i,TMrw);
    GetVATRowFromBlock(TMrw.VATCode,VATCodeb,VATCbrw);
    PurchVATAcc = VATCbrw.PurchVATAcc;
    if (GetAccName(PurchVATAcc,tstr,60)==false) then begin 
      if (APb.PostVIVATonVATCorr!=0) then begin
        errstrno = 1921;
      end else begin
        errstrno = 1902;
      end;
      goto LPostTaxMatrix_VIVc;
    end;
    if (CheckTTRPerRow("VIVc",PurchVATAcc,objstr,dc2,taccnumber,0)) then begin end;
    TMrw.VATSum = MulRateToBase1(VIp.CurncyCode,TMrw.VATSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

    AddEuroTrRow(gTRp,PurchVATAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,false,dc1,TotSum,false,
                 taccnumber,"","");
    switch (VATCbrw.InclinTotal) begin
/*                 
      case kTaxTransInclinTotalNo:
        if (GetAccName(VATCbrw.TaxMatrixVariance,tstr,60)==false) then begin 
          errstrno = 22046;
          goto LPostTaxMatrix_VIVc;
        end;
        if (CheckTTRPerRow("VIVc",VATCbrw.TaxMatrixVariance,objstr,dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,VATCbrw.TaxMatrixVariance,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,false,dc2,TotSum,false,
                     taccnumber,"","");
      case kTaxTransInclinTotalYes:
        if (GetAccName(VATCbrw.SalesVATAcc,tstr,60)==false) then begin
          errstrno = 1912;
          goto LPostTaxMatrix_VIVc;
        end;
        if (CheckTTRPerRow("VIVc",VATCbrw.SalesVATAcc,objstr,dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,VATCbrw.SalesVATAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,false,dc2,TotSum,false,
                     taccnumber,"","");
*/    
    end;
  end;
LPostTaxMatrix_VIVc:;  
  PostTaxMatrix_VIVc = errstrno;
  return;
end;
