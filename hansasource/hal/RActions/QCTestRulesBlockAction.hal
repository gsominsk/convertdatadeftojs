external function Integer SerBlockCheckOverlap(LongInt,LongInt,LongInt,LongInt);

global
updating function LongInt QCTestRulesBlockCheck(var record QCTestRulesBlock QCTRr,record QCTestRulesBlock QCTR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rwcnt;
  row QCTestRulesBlock QCTRrw;
  record ITVc ITr;
  record INVc INr;
  record QCTemplateVc QCTr;
  record StandProblemVc SPr;
  record LocationVc Locr;
  
  res = 0;
  rwcnt = MatRowCnt(QCTRr);
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(QCTRr,i,QCTRrw);
    if (nonblank(QCTRrw.ITCode)) then begin
      switch (QCTRrw.CodeType) begin
        case 0:
          ITr.Code = QCTRrw.ITCode;
          if (ReadFirstMain(ITr,1,true)==false) then begin
            RecordCheckError(1290," " & QCTRrw.ITCode,i,"ITCode");      
            res = -1;
            goto LQCTestRulesBlockCheck;        
          end;
        case 1:
          INr.Code = QCTRrw.ITCode;
          if (ReadFirstMain(INr,1,true)==false) then begin
            RecordCheckError(1290," " & QCTRrw.ITCode,i,"ITCode");      
            res = -1;
            goto LQCTestRulesBlockCheck;        
          end;
      end;
    end;    
    if (nonblank(QCTRrw.QCTemplate)) then begin
      QCTr.Code = QCTRrw.QCTemplate;
      if (ReadFirstMain(QCTr,1,true)==false) then begin
        RecordCheckError(1290," " & QCTRrw.QCTemplate,i,"QCTemplate");      
        res = -1;
        goto LQCTestRulesBlockCheck;        
      end;
    end;    
    if (nonblank(QCTRrw.Reason)) then begin
      SPr.Code = QCTRrw.Reason;
      if (ReadFirstMain(SPr,1,true)==false) then begin
        RecordCheckError(1290," " & QCTRrw.Reason,i,"Reason");      
        res = -1;
        goto LQCTestRulesBlockCheck;        
      end;
    end;    
    if (nonblank(QCTRrw.Location)) then begin
      Locr.Code = QCTRrw.Location;
      if (ReadFirstMain(Locr,1,true)==false) then begin
        RecordCheckError(1290," " & QCTRrw.Location,i,"Location");      
        res = -1;
        goto LQCTestRulesBlockCheck;        
      end;
    end;    
  end;  
LQCTestRulesBlockCheck:;  
  QCTestRulesBlockCheck = res;
  return;
end;
