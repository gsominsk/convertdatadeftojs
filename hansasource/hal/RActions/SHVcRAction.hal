external procedure AutomatedSalesOrderly(string);
external function Boolean HasIntegratedNL();
external function string 255 StripCharacter(string,string);
external function Boolean IsCapitalLetter(string); 
external function Integer InString2(string,string);
external function string 255 UpdateOfficialSerNrSerie(Integer,Integer,Integer,string,boolean);
external function integer CheckAddressForLocalisation(string,string,string,string,string,string,string,string,string,string,string,var string);
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external function Boolean IsPostcodeFormatCorrect(string);
external function Integer CheckSerialatPositionInItemHist(string,string,string,string,val);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external updating function Integer RecordAction_raPasteOrdInInv(var record IVVc,LongInt,Boolean,var Integer);
external function Boolean IsDigit(string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external procedure AddPortugueseSAFTHashToSH(var record SHVc);
external function Boolean TestNextOfficialSerialNr_SHVc(row LegalInvNrBlock,string,record SHVc,Boolean,Integer);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external procedure FindNextSHVcOfficialSerialNr(var record SHVc,Integer);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function Boolean TBIVItemsUsage(record PRVc,record INVc,val);
external function Boolean CheckProjectMember(record PRVc);
external function Boolean IsPRPhaseLocked(string,Date,var string);
external updating procedure UpdateTrans_Stock(record TRVc);
external function Integer IsUnOKAllowed_SHVc(record SHVc);
external updating procedure UpdateRecalcStockNeeded(Integer);
external function Boolean ItemHistExists(string,LongInt);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure DeleteTransaction(LongInt,Integer);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external function Integer MakeTransFromSH(record TRVc,record SHVc,Boolean,record RcVc);
external updating procedure SMSWhenSHOK(LongInt,string,Integer);
external updating procedure UpdateProjFromShip(record SHVc);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure SHUpdateSerialNr(record SHVc,Boolean,Boolean);
external updating procedure SHUpdateItemHist(record SHVc);
external updating procedure AddTTrans_SHVc(record TRVc,record SHVc);
external updating procedure UpdateStockResFromSH(record SHVc);
external function boolean GetCOSAcc(string,string,string,record AccBlock,record INVc,integer,Boolean,Integer,var string,var string);
external updating procedure UpdateSerStock(string,string,string,val,val);
external updating function Boolean RecordAction_rlStockMovLOK(var record StockMovVc,Boolean);
external function Integer CheckObjs(string,string,var string);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external updating procedure SHUpdateInShipment(record SHVc,Boolean,record SHVc,Boolean,Boolean);
external updating function Boolean UpdateOrderFromShip(record SHVc,Boolean,record SHVc,Boolean,Boolean);
external updating procedure SHUpdateStock(record SHVc,Boolean,Boolean);
external updating procedure SHOK(record SHVc);
external procedure CalcSHWeight(var record SHVc,Boolean);
external updating function val NextLocOKNr(string);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external procedure UpdateSHFIFO(record SHVc);
external function LongInt GetCurUserLastNr(string);
external function Boolean SerialNrAvail(string,string,string,val);
//external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure FindStockValueInclStockReserv(LongInt,string,string,string,var record ItemStatusVc,var val);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestSHVc(LongInt,Date,var Boolean);
external function val FindPUBaseRate2forSerialNr(string,string);

function Boolean StockMovOKedForSH(LongInt shnr,var LongInt stmovnr)
begin
  Boolean res;
  record StockMovVc StockMovr;
  Boolean TrHs;
  Integer flushcnt;
  
  res = true;
  TrHs = true;  
  StockMovr.FileName = "SHVc";
  StockMovr.TransNr = shnr;
  while (LoopKey("FileName",StockMovr,2,TrHs)) begin
    if (StockMovr.FileName!="SHVc") then begin TrHs = false; end;
    if (StockMovr.TransNr!=shnr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (StockMovr.OKFlag==0) then begin
        res = false;
        stmovnr = StockMovr.SerNr;
        TrHs = false;
      end;
    end;
  end;
  StockMovOKedForSH = res;
  return;
end;

function Boolean DeliveredQtyMatchesStockMovement(LongInt shnr,LongInt shrownr,string artcode,val ship)
begin
  Boolean res;
  record StockMovVc SMr;
  row StockMovVc SMrw;
  Integer i,rwcnt;
  Boolean TrHs;
  val qty;
  
  res = true;
  TrHs = true;
  SMr.FileName = "SHVc";
  SMr.TransNr = shnr;
  while (LoopKey("FileName",SMr,2,TrHs)) begin
    if (SMr.FileName!="SHVc") then begin TrHs = false; end;
    if (SMr.TransNr!=shnr) then begin TrHs = false; end;

    if (TrHs) then begin
//      if (SMr.OKFlag!=0) then begin
        rwcnt = MatRowCnt(SMr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMr,i,SMrw);
          if (SMrw.SHRow==shrownr and SMrw.ArtCode==artcode) then begin
            qty = qty + SMrw.Quant;
          end;
        end;
//      end;
    end;
  end;
  if (qty>ship) then begin
    res = false;
  end;
  DeliveredQtyMatchesStockMovement = res;
  return;
end;

function Integer ValidateBulkSerialNoRow(record SerNrTrackBlock SNrb,record SHVc SHr,row SHVc SHrw,Integer currow,var string gotofield,var Integer gotorow)
begin
  Integer res;
  Integer j,rwcnt;
  row SHVc SH2rw;
  Boolean testf;
  string 255 serialnr;
  string 255 serialnr2;
  val qty,qty2;

  gotorow = -1;
  gotofield = "";  
  if (SHrw.Ship>1) then begin
    rwcnt = len(SHrw.SerialNr);
    for (j=0;j<rwcnt;j=j+1) begin
      if ((IsDigit(Mid(SHrw.SerialNr,j,1))==false) and (Mid(SHrw.SerialNr,j,1)!=":")) then begin
        res = 20434;
        gotorow = currow;
        gotofield = "SerialNr";
        goto LValidateBulkSerialNoRow;
      end;
    end;
  end;
  rwcnt = MatRowCnt(SHr);
  serialnr = FirstInRange(SHrw.SerialNr,60);
  while (nonblank(serialnr)) begin
    for (j=0;j<currow;j=j+1) begin  
      MatRowGet(SHr,j,SH2rw);
      if (SH2rw.Ship!=0) then begin
        if (SHrw.ArtCode==SH2rw.ArtCode) then begin
          qty2 = blankval;
          serialnr2 = FirstInRange(SH2rw.SerialNr,60);
          while (nonblank(serialnr2)) begin
            if (serialnr==serialnr2) then begin
              res = 1241;
              gotorow = currow;
              gotofield = "SerialNr";
              goto LValidateBulkSerialNoRow;
            end;
            qty2 = qty2 + 1;
            serialnr2 = NextSerialNumber(SH2rw.ArtCode,serialnr2,SNrb);
            if (qty2>=SH2rw.Ship) then begin serialnr2 = ""; end;
          end;
        end;
      end;
    end;
    qty = qty + 1;
    serialnr = NextSerialNumber(SHrw.ArtCode,serialnr,SNrb);
    if (qty>=SHrw.Ship) then begin serialnr = ""; end;
  end;
LValidateBulkSerialNoRow:;  
  ValidateBulkSerialNoRow = res;
  return;
end;

global
updating function LongInt DoSHVcRecordCheck(var record SHVc SHp,record SHVc SH2p,LongInt stat,LongInt check,var LongInt error,
                                            var string errorstr,var integer rownr,var string fieldstr,Boolean UnOKedCheckSerialf)
begin
  LongInt res;
  record INVc INr;
  record INVc IN2r;
  record MainStockBlock MSb;
  record LocationVc LocRec;
  record SRBlock SRRec;
  record PRVc PRr;
  record ORVc ORr;
  row ORVc ORrw;
  row SHVc SHrw;
  record TRVc gTRp;
  record SHVc locSHr;
  record ItemStatusVc ISr;
  record RcVc RepSpec;
  string 10 location,loc2,loc3,tstr;
  LongInt oldnr,newnr;
  Integer i,rwcnt;
  Boolean blankf,testf,test2f;
  Boolean transf;
  Boolean orfound,gentrans;
  val t,prev,stockreservq;
  record SHVc recSHr;
  row SHVc recSHrw;
  record SHVc rec2SHr;
  row SHVc rec2SHrw;
  row SHVc SHrw2;
  row SHVc SHrw3;
  Integer rwcntrec,reci,j;
  Integer rwcntrec2,reci2;
  Boolean isstruct;
  Integer cnt;
  Integer errcode;
  LongInt sernr,stmovnr,dummyl,l;
  record PISVc PISr;
  string 255 objstr,errstr,accnr,oldOfficialSerNr,tstr2,c;
  record CostAccBlock CAb;
  record AccBlock ARAccRec;
  Boolean unokf;
  transaction string 255 gRuniningMaint;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Date td;
  record CUVc CUr;
  record PosVc Posr;
  record SerNrTrackBlock SNrb;
  val serqty;
  string 255 serialnr;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  Boolean initotcheckf;   
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;
  record AccVc Accr;
  
  res = 0;
  BlockLoad(SRRec);
  BlockLoad(MSb);
  BlockLoad(CAb);
  BlockLoad(SNrb);
  if (stat==Rs_update) then begin
    if (SHp.SerNr<=0) and (SH2p.OKFlag==0) then begin
      SHp.SerNr = SH2p.SerNr;
    end;
  end;        
  oldnr = SHp.SerNr;
  oldOfficialSerNr = SHp.OfficialSerNr;
  transf = false;
  if (SHp.OKFlag==1) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (SH2p.OKFlag==0) then begin
        transf = true;
        if (MSb.SetDelDateToCurrent!=0) then begin
          SHp.ShipDate = CurrentDate;
        end;
      end;
    end;
  end;
  if (SHp.OKFlag==0) then begin
    if (stat==Rs_update) then begin
      if (SH2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_SHVc(SHp);
    if (errcode!=0) then begin
      error = errcode;
      errorstr = "";
      rownr = -1;
      fieldstr = "ShipDate";
      res = -1; 
    end;
    goto LSHVcRecordCheck;
  end;  
// Only TransportNumber can be changed after OK 

  if (stat==Rs_update) then begin
    if (SH2p.OKFlag!=0) then begin
      goto LSHVcRecordCheck;
    end;
  end;
  if ((stat==Rs_insert) or (SHp.SerNr!=SH2p.SerNr)) then begin
    locSHr.SerNr = SHp.SerNr;
    if (ReadFirstMain(locSHr,1,true)) then begin
      error = 1547;
      errorstr = "";
      rownr = -1;
      fieldstr = "SerNr";
      res = -1;
      goto LSHVcRecordCheck;
    end;
  end;

  if (SerNrTestSHVc(SHp.SerNr,SHp.ShipDate,gentrans)==false) then begin
    if (check>0) then begin
      error = 1557;
      errorstr = "";
      rownr = -1;
      fieldstr = "SerNr";        
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;
  if (check==0) then begin
    goto LSHVcRecordCheck_GenTrans;
  end;

  if (Date2Test("SHVc",SHp.ShipDate,"ShipDate",-1)==false) then begin
    res = -1;
    goto LSHVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,SHp.ShipDate,"ShipDate",-1)) then begin
    res = -1;
    goto LSHVcRecordCheck;
  end;
  switch (stat) begin
    case Rs_update:
      if (SHp.OKFlag!=0) and (SH2p.OKFlag==0) then begin
        SHp.RegDate = CurrentDate;
        SHp.RegTime = CurrentTime;
      end;
    otherwise
      if (SHp.OKFlag!=0) then begin
        SHp.RegDate = CurrentDate;
        SHp.RegTime = CurrentTime;
      end;
  end;

  if (transf) then begin
    if (UserCanAction("SHOK",true)==false) then begin
      error = 1274;
      errorstr = StringFromStringSet(3,"SHOK");
      rownr = -1;
      fieldstr = "SerNr";        
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;  
  location = SHp.Location;
  if (check!=0) then begin
    if (MSb.requireLocation!=0) then begin
      if (blank(SHp.Location)) then begin
        rwcnt = MatRowCnt(SHp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SHp,i,SHrw);
          if (blank(SHrw.Location)) then begin
            blankf = true;
            i = rwcnt;
          end;
        end;
        if (blankf) then begin
          error = 1058;
          errorstr = SHp.Location;
          rownr = -1;
          fieldstr = "Location";             
          res = -1; 
          goto LSHVcRecordCheck;
        end;
      end;
    end;
  end;
  if (nonblankdate(SHp.PlanSendDate)) then begin
    if (HasLocalization("PRT")) then begin
      if (SHp.PlanSendDate<SHp.ShipDate) then begin
        error = 1142;
        errorstr = "";
        rownr = -1;
        fieldstr = "PlanSendDate";            
        res = -1; 
        goto LSHVcRecordCheck;
      end;
      if (SHp.PlanSendDate==SHp.ShipDate) then begin
        if (SHp.PlanSendTime<CurrentTime) then begin
          error = 20866;
          errorstr = "";
          rownr = -1;
          fieldstr = "PlanSendTime";                  
          res = -1; 
          goto LSHVcRecordCheck;
        end;
      end;
      if (blanktime(SHp.PlanSendTime)) then begin
        error = 20866;
        errorstr = "";
        rownr = -1;
        fieldstr = "PlanSendDate";                  
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
  end else begin
    if (HasLocalization("PRT")) then begin
      if (nonblanktime(SHp.PlanSendTime)) then begin
        error = 1142;
        errorstr = "";
        rownr = -1;
        fieldstr = "PlanSendDate";           
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (nonblankdate(SHp.PlanArrDate)) then begin
      if (SHp.PlanArrDate<SHp.ShipDate) then begin
        error = 1142;
        errorstr = "";
        rownr = -1;
        fieldstr = "PlanArrDate";            
        res = -1; 
        goto LSHVcRecordCheck;
      end;
      if (SHp.PlanArrDate==SHp.ShipDate) then begin
        if (SHp.PlanArrTime<CurrentTime) then begin
          error = 20866;
          errorstr = "";
          rownr = -1;
          fieldstr = "PlanArrTime";                  
          res = -1; 
          goto LSHVcRecordCheck;
        end;
        if (nonblanktime(SHp.PlanArrTime)) then begin
          if (SHp.PlanArrTime<SHp.PlanSendTime) then begin
            error = 1142;
            errorstr = "";
            rownr = -1;
            fieldstr = "PlanArrDate";
            res = -1; 
           goto LSHVcRecordCheck;
          end;
        end;
      end;
      if (blanktime(SHp.PlanArrTime)) then begin
        error = 20866;
        errorstr = "";
        rownr = -1;
        fieldstr = "PlanArrTime";                  
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end else begin
      if (nonblanktime(SHp.PlanArrTime)) then begin
        error = 1142;
        errorstr = "";
        rownr = -1;
        fieldstr = "PlanArrDate";           
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (blanktime(SHp.PlanSendTime)) then begin
      error = 20866;
      errorstr = "";
      rownr = -1;
      fieldstr = "PlanSendTime";           
      res = -1; 
      goto LSHVcRecordCheck;
    end;
    if (blank(SHp.Addr1) and blank(SHp.Addr2)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "Addr1";        
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if (blank(SHp.Addr3)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "Addr3";         
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if (blank(SHp.DelAddr3)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "DelAddr3";       
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if (blank(SHp.DelAddr4)) then begin
      error = 20276;
      errorstr = "";
      rownr = -1;
      fieldstr = "DelAddr4";            
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if (SHp.Status==kRecordStatusManual or SHp.Status==kRecordStatusRecovered) then begin
      if (HasLocalization("PRT")) then begin
        if (SHp.Status==kRecordStatusInvalidated or SHp.Status==kRecordStatusLost or SHp.Status==kRecordStatusNotUsed) then begin
          error = 34430;
          errorstr = "";
          rownr = -1;
          fieldstr = "Status";        
          res = -1; 
          goto LSHVcRecordCheck;
        end;
        if (blank(SHp.OfficialSerNr)) then begin
          error = 2210;
          errorstr = "";
          rownr = -1;
          fieldstr = "OfficialSerNr";        
          res = -1; 
          goto LSHVcRecordCheck;
        end;
      end;
      if (blank(SHp.OfficialSerNr2)) then begin   
        error = 2210;
        errorstr = "";
        rownr = -1;
        fieldstr = "OfficialSerNr2";            
        res = -1;
        goto LSHVcRecordCheck;
      end;
      if (nonblank(SHp.OfficialSerNr2)) then begin   
//        SHp.OfficialSerNr2Serie = UpdateOfficialSerNrSerie(stat,SHp.OKFlag,IP2p.OKFlag,SHp.OfficialSerNr2,true);
        if (InString2(SHp.OfficialSerNr2,"/")<=0) then begin
          error = 1059;
          errorstr = " " & SHp.OfficialSerNr2;
          rownr = -1;
          fieldstr = "OfficialSerNr2";            
          res = -1;
          goto LSHVcRecordCheck;
        end;
        locSHr.OfficialSerNr2 = SHp.OfficialSerNr2;
        if (ReadFirstKey("OpenOfficialSerNr2",locSHr,1,true)) then begin
          if (locSHr.SerNr!=SHp.SerNr) then begin
            error = 1391;
            errorstr = " " & SHp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";            
            res = -1;
            goto LSHVcRecordCheck;
          end;
        end;
        locSHr.OfficialSerNr = StripCharacter(SHp.OfficialSerNr2,"/");
        if (ReadFirstKey("OfficialSerNr",locSHr,1,true)) then begin
          if (locSHr.SerNr!=SHp.SerNr) then begin
            RecordCheckError(1391,SHp.OfficialSerNr2,-1,"OfficialSerNr2");   
            error = 1391;
            errorstr = " " & SHp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";            
            res = -1;
            goto LSHVcRecordCheck;
          end;
        end;
        dummyl = 0;
        GetNextSubstring(SHp.OfficialSerNr2,dummyl,"/",tstr);
        GetNextSubstring(SHp.OfficialSerNr2,dummyl,"/",tstr2);
        for (i=0;i<len(tstr);i=i+1) begin
          c = Mid(tstr,i,1);
          if (IsDigit(c)==false and (IsCapitalLetter(c)==false)) then begin
            error = 1059;
            errorstr = " " & SHp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";            
            res = -1;
            goto LSHVcRecordCheck;
          end;
        end;
        for (i=0;i<len(tstr2);i=i+1) begin
          c = Mid(tstr2,i,1);
          if (IsDigit(c)==false) then begin
            error = 1059;
            errorstr = " " & SHp.OfficialSerNr2;
            rownr = -1;
            fieldstr = "OfficialSerNr2";            
            res = -1;
            goto LSHVcRecordCheck;
          end;
        end;
        GetLegalInvNrRow(SHp.OfficialSerNr2,LINrbrw);
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
          error = 2246;
          errorstr = "";
          rownr = -1;
          fieldstr = "Status";            
          res = -1;
          goto LSHVcRecordCheck;
        end;
      end;
    end;    
  end;

  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  if (nonblank(location)) then begin
    LocRec.Code = location;
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      error = 1120;
      errorstr = location;
      rownr = -1;
      fieldstr = "Location";                
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;
  if (SHp.OKFlag!=0) then begin
    if (StockMovOKedForSH(SHp.SerNr,stmovnr)==false) then begin
      error = 1827;
      errorstr = " " & stmovnr & " " & USetStr(20576);
      rownr = -1;
      fieldstr = "SerNr";            
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;
  if (HasLocalization("PRT")) then begin
    BlockLoad(CUUerLb);  
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = SHp.Addr0; errstr = "Addr0";
      case kCountryAddrLineUserAddr1: tstr = SHp.Addr1; errstr = "Addr1";
      case kCountryAddrLineUserAddr2: tstr = SHp.Addr2; errstr = "Addr2";
      case kCountryAddrLineUserAddr3: tstr = SHp.DelAddr3; errstr = "DelAddr3";
      case kCountryAddrLineUserAddr4: tstr = SHp.DelAddr4; errstr = "DelAddr4";
    end;
    if ((nonblank(SHp.Addr3)) and (tstr=="Portugal")) then begin
      if (IsPostcodeFormatCorrect(SHp.Addr3)==false) then begin
        error = 24620;
        errorstr = tstr;
        rownr = -1;
        fieldstr = "Addr3";              
        res = -1;
        goto LSHVcRecordCheck;
      end;
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        error = 20277;
        errorstr = tstr;
        rownr = -1;
        fieldstr = errstr;          
        res = -1;
        goto LSHVcRecordCheck;
      end;
    end;
  end;
  
  CUr.Code = SHp.CustCode;
  ReadFirstMain(CUr,1,true);
  if (CUr.blockedFlag) then begin
    error = 1265;
    errorstr = SHp.CustCode;
    rownr = -1;
    fieldstr = "CustCode";         
    res = -1;
    goto LSHVcRecordCheck;
  end;
  if (CUr.OnHoldFlag!=0) then begin
    error = 1300;
    errorstr = SHp.CustCode;
    rownr = -1;
    fieldstr = "CustCode";           
    res = -1;
    goto LSHVcRecordCheck;
  end;
  BlockLoad(LINrb);  
  if (nonblank(SHp.OfficialSerNr)) then begin
    GetLegalInvNrRow(SHp.OfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          SHp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        if (transf) then begin
          SHp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          SHp.OfficialSerNr = "";
        end;
    end;
  end;
  if (HasLocalization("BRA")) then begin
    if ((CUr.CUType!=0 or CUr.VEType!=0) and (SHp.DelCountry=="1058" or blank(SHp.DelCountry))) then begin 
      errcode = CheckAddressForLocalisation("BRA",SHp.Addr1,"Addr1",SHp.Addr2,"Addr2",SHp.Addr3,"Addr3",SHp.DelAddr3,"DelAddr3",SHp.DelAddr4,"DelAddr4",tstr);
      if (errcode!=0) then begin 
        error = errcode;
        errorstr = "";
        rownr = -1;
        fieldstr = tstr;           
        res = -1;
        goto LSHVcRecordCheck;      
      end;
    end;
  end;  
  if (blank(SHp.OfficialSerNr)) then begin
    if (HasLocalization("PRT") and SHp.Status!=kRecordStatusManual and SHp.Status!=kRecordStatusRecovered) then begin
      FindNextSHVcOfficialSerialNr(SHp,-1);
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (transf) then begin
      if (blank(SHp.OfficialSerNr)) then begin
        error = 1058;
        errorstr = "";
        rownr = -1;
        fieldstr = "OfficialSerNr";            
        res = -1;
        goto LSHVcRecordCheck;
      end;
    end;
  end;
  if (ValidateOfficialSerialNrChronology("SHVc",SHp.OfficialSerNr,SHp.SerNr,SHp.ShipDate,td)==false) then begin
    error = 26201;
    errorstr = " " & td;
    rownr = -1;
    fieldstr = "ShipDate";         
    res = -1;
    goto LSHVcRecordCheck;
  end;  
  if (nonblank(SHp.OfficialSerNr)) and (MatRowCnt(LINrb)>0) then begin    
    errcode = 0;
    rwcnt = MatRowCnt(LINrb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      test2f = true;
      if (Left(SHp.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
      if (test2f) then begin
        testf = true;
        test2f = TestNextOfficialSerialNr_SHVc(LINrbrw,CUr.Classification,SHp,false,-2);
        if (test2f==false) then begin
          errcode = 1557;
          testf = false;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
    if (testf==false) then begin
      error = errcode;
      errorstr = " " & SHp.OfficialSerNr;
      rownr = -1;
      fieldstr = "OfficialSerNr";        
      res = -1;
      goto LSHVcRecordCheck;
    end;
  end;
  if (HasLocalization("PRT")) then begin 
    if (blank(SHp.OfficialSerNrSerie)) then begin 
      SHp.OfficialSerNrSerie = UpdateOfficialSerNrSerie(stat,SHp.OKFlag,SH2p.OKFlag,SHp.OfficialSerNr,true);
    end;
  end;

  ORr.SerNr = SHp.OrderNr;
  orfound = ReadFirstMain(ORr,1,true);
  if (nonblank(ORr.PRCode)) then begin
    PRr.Code = ORr.PRCode;
    if (ReadFirstMain(PRr,1,true)==false) then begin
      error = 1232;
      errorstr = "";
      rownr = -1;
      fieldstr = "OrderNr";          
      res = -1; 
      goto LSHVcRecordCheck;
    end;
    if (PRr.Terminated!=0) then begin
      error = 1232;
      errorstr = "";
      rownr = -1;
      fieldstr = "OrderNr";             
      res = -1; 
      goto LSHVcRecordCheck;
    end;        
    if (IsPRPhaseLocked(ORr.PRCode,SHp.ShipDate,tstr)) then begin
      error = 20408;
      errorstr = " " & tstr;
      rownr = -1;
      fieldstr = "PRCode";         
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if (UserCanAction("DisallowPostPRActualsfornonPRMan",false)) then begin
      if (CheckProjectMember(PRr)==false) then begin 
        error = 1274;
        errorstr = StringFromStringSet(3,"DisallowPostPRActualsfornonPRMan");
        rownr = -1;
        fieldstr = "PRCode";            
        res = -1;
        goto LSHVcRecordCheck;
      end;  
    end;
  end;    

  rwcnt = MatRowCnt(SHp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    if (nonblank(SHrw.Location)) then begin
      loc2 = SHrw.Location;
      if (MSb.Chronology==1) then begin//Chronology per Location
        if (SHrw.Location!=location) then begin
          error = 20857;
          errorstr = "";
          rownr = i;
          fieldstr = "Location";                
          res = -1;
          goto LSHVcRecordCheck;
        end;
      end;
    end else begin
      loc2 = location;
    end;
    if (nonblank(loc2)) then begin
      LocRec.Code = loc2;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
        error = 1120;
        errorstr = loc2;
        rownr = i;
        fieldstr = "Location";           
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
    if (nonblank(SHrw.ArtCode)) then begin
      if (ReadFirstItem(SHrw.ArtCode,INr,true,true)==false) then begin
        error = 1233;
        errorstr = "";
        rownr = i;
        fieldstr = "ArtCode";               
        res = -1; 
        goto LSHVcRecordCheck;
      end;
      if (INr.SerNrf==1) then begin
        l = SHrw.Ship;//ulong64? 
        if (SHrw.Ship-l>0) then begin
          error = 20797;
          errorstr = "";
          rownr = i;
          fieldstr = "Quant";                  
          res = -1;
          goto LSHVcRecordCheck;
        end;
      end;
      if (nonblank(SHrw.PosCode)) then begin
        Posr.Code = SHrw.PosCode;
        if (ReadFirstMain(Posr,1,true)==false) then begin
          error = 1120;
          errorstr = "";
          rownr = i;
          fieldstr = "PosCode";                  
          res = -1;
          goto LSHVcRecordCheck;
        end;
      end;
    end;
    if (StockRecordForLocationAllowed("SHVc",loc2,SHrw.ArtCode,SHp.ShipDate,SHp.OKFlag,errcode,errstr)==false) then begin
      error = errcode;
      errorstr = errstr;
      rownr = i;
      fieldstr = "ArtCode";               
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if (DeliveredQtyMatchesStockMovement(SHp.SerNr,i,SHrw.ArtCode,SHrw.Ship)==false) then begin
      error = 1302;
      errorstr = "";
      rownr = i;
      fieldstr = "ArtCode";               
      res = -1; 
      goto LSHVcRecordCheck;
    end;
    if (nonblank(ORr.PRCode)) then begin
      switch (PRr.TBIVItemsUsage) begin
        case 0:
        case 1:
          if (TBIVItemsUsage(PRr,INr,SHrw.Ship)) then begin
           MessageBox(20409,"");
          end;
        case 2:
          if (TBIVItemsUsage(PRr,INr,SHrw.Ship)) then begin
            error = 20409;
            errorstr = "";
            rownr = i;
            fieldstr = "ArtCode";                      
            res = -1;
            goto LSHVcRecordCheck;
          end;
      end;
    end;
    if (LocRec.RequirePos!=0) then begin
      if (nonblank(SHrw.ArtCode)) then begin
        if (INr.ItemType==1) then begin
          if (blank(SHrw.PosCode)) then begin
            error = 1854;
            errorstr = "";
            rownr = i;
            fieldstr = "PosCode";                    
            res = -1; 
            goto LSHVcRecordCheck;
          end;
        end;
      end;
    end;  
    if (MSb.DelOrdQty==0) then begin
      if (SHrw.Ship>SHrw.Ordered) then begin
        error = 1303;
        errorstr = "";
        rownr = i;
        fieldstr = "Ship";              
        res = -1; 
        goto LSHVcRecordCheck;
      end;
    end;
    if (check!=0) then begin
      if (orfound) then begin
        if (SHrw.OrdRow>-1) then begin
          MatRowGet(ORr,SHrw.OrdRow,ORrw);      
          t = ORrw.Shipd2 + SHrw.Ship;
          for (j=0;j<i;j=j+1) begin
            MatRowGet(SHp,j,SHrw2);
            if ((SHrw2.OrdRow==SHrw.OrdRow)) then begin
              t = t + SHrw2.Ship;
            end;
          end;
          if (MSb.DelOrdQty==0) then begin
            if (t>ORrw.Quant) then begin
              error = 1303;
              errorstr = "";
              rownr = i;
              fieldstr = "Ship";                      
              res = -1; 
              goto LSHVcRecordCheck;
            end;
          end;
        end;
      end;
      if (nonblank(SHrw.SalesAcc)) then begin
        if (GetAccName(SHrw.SalesAcc,tstr,60)==false) then begin
          error = 1947;
          errorstr = "";
          rownr = i;
          fieldstr = "SalesAcc";                
          res = -1; 
          goto LSHVcRecordCheck;
        end;
        Accr.AccNumber = SHrw.SalesAcc;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          error = 1007;
          errorstr = SHrw.SalesAcc;
          rownr = i;
          fieldstr = "SalesAcc";                
          res = -1; 
          goto LSHVcRecordCheck;
        end else begin
          if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
            error = 1084;
            errorstr = SHrw.SalesAcc;
            rownr = i;
            fieldstr = "SalesAcc";                
            res = -1;
            goto LSHVcRecordCheck;
          end;
        end;
      end;
      if (nonblank(SHrw.CostAcc)) then begin
        if (GetAccName(SHrw.CostAcc,tstr,60)==false) then begin
          error = 1947;
          errorstr = "";
          rownr = i;
          fieldstr = "CostAcc";                
          res = -1; 
          goto LSHVcRecordCheck;
        end;
        Accr.AccNumber = SHrw.CostAcc;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          error = 1007;
          errorstr = SHrw.CostAcc;
          rownr = i;
          fieldstr = "CostAcc";                
          res = -1;
          goto LSHVcRecordCheck;
        end else begin
          if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
            error = 1084;
            errorstr = SHrw.CostAcc;
            rownr = i;
            fieldstr = "CostAcc";                
            res = -1;
            goto LSHVcRecordCheck;
          end;
        end;
      end;      
    end;
    if (nonblank(SHrw.ArtCode)) then begin
      if (CheckSerialStatus(SHrw.ArtCode,SHrw.SerialNr,tstr)==2) then begin
        error = 16167;
        errorstr = ", " & tstr & ": " & SHrw.SerialNr;
        rownr = i;
        fieldstr = "SerialNr";            
        res = -1; 
//        Error1(0,tstr);
        goto LSHVcRecordCheck;
      end;
      if (blank(SHrw.CostAcc)) then begin
        if (CAb.NoNLCostOnShip==2) then begin
          accnr = ARAccRec.COSAccrualAcc;
        end else begin
          if (GetCOSAcc(SHrw.CostAcc,SHp.CustCode,loc2,ARAccRec,INr,CAb.ItemGroupAccounts,false,0,accnr,tstr)==false) then begin
          end;
        end;
      end;
      VerifyRowObjects("SL",SHp.Objects,SHrw.Objects,accnr,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);              
      if (errcode!=0) then begin
        error = errcode;
        errorstr = errstr;
        rownr = i;
        fieldstr = "Objects";             
        res = -1;
        goto LSHVcRecordCheck;
      end;      
      if (check!=0) then begin
      if (MSb.dontAllowOvership==1) then begin
      if ((INr.ItemType==kItemTypeStocked) or (nonblank(SHrw.Recepy))) then begin
        if (nonblank(SHrw.Recepy)) then begin
          isstruct = false;
          if (SHrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
            isstruct = ExpandStructItem(SHrw.ArtCode,SHrw.Recepy,SHrw.Ship,recSHr);
          end;
          if (isstruct) then begin
            rwcntrec = MatRowCnt(recSHr);
            for (cnt=0;cnt<i;cnt=cnt+1) begin
              MatRowGet(SHp,cnt,SHrw3);
              isstruct = ExpandStructItem(SHrw3.ArtCode,SHrw3.Recepy,SHrw3.Ship,rec2SHr);
              if (isstruct) then begin
                rwcntrec2 = MatRowCnt(rec2SHr);
                for (reci2=0;reci2<rwcntrec;reci2=reci2+1) begin
                  MatRowGet(rec2SHr,reci2,rec2SHrw);
                  prev = rec2SHrw.Ship;              
                  for (reci=0;reci<rwcntrec;reci=reci+1) begin
                    MatRowGet(recSHr,reci,recSHrw);
                    if (recSHrw.ArtCode==rec2SHrw.ArtCode) then begin
                      prev = prev + recSHrw.Ship;
                    end;
                  end;
                  IN2r.Code = rec2SHrw.ArtCode;
                  if (ReadFirstItem(rec2SHrw.ArtCode,IN2r,false,false)) then begin
                    if (IN2r.ItemType==kItemTypeStocked) then begin
                      FindStockValueInclStockReserv(SHp.OrderNr,rec2SHrw.ArtCode,rec2SHrw.SerialNr,loc2,ISr,stockreservq);
                      if ((ISr.Instock-stockreservq<prev) and (prev>0)) then begin
                        error = 1247;
                        errorstr = "";
                        rownr = i;
                        fieldstr = "Ship";                          
                        res = -1; 
                        goto LSHVcRecordCheck;
                      end;
                    end;
                  end;
                end;
              end else begin
                prev = SHrw3.Ship;
                for (reci=0;reci<rwcntrec;reci=reci+1) begin
                  MatRowGet(recSHr,reci,recSHrw);
                  if (SHrw3.ArtCode==recSHrw.ArtCode) then begin
                    prev = prev + recSHrw.Ship;
                  end;
                end;
                IN2r.Code = SHrw3.ArtCode;
                if (ReadFirstItem(SHrw3.ArtCode,IN2r,false,false)) then begin
                  if (IN2r.ItemType==kItemTypeStocked) then begin
                    FindStockValueInclStockReserv(SHp.OrderNr,SHrw3.ArtCode,SHrw3.SerialNr,loc2,ISr,stockreservq);
                    if ((ISr.Instock-stockreservq<prev) and (prev>0)) then begin
                      error = 1247;
                      errorstr = "";
                      rownr = i;
                      fieldstr = "Ship";                          
                      res = -1; 
                      goto LSHVcRecordCheck;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end else begin
          prev = blankval;
          for (cnt=0;cnt<i;cnt=cnt+1) begin
            MatRowGet(SHp,cnt,SHrw3);
            if (nonblank(SHrw3.Location)) then begin
              loc3 = SHrw3.Location;
            end else begin
              loc3 = location;
            end;
            isstruct = ExpandStructItem(SHrw3.ArtCode,SHrw3.Recepy,SHrw3.Ship,rec2SHr);
            if (isstruct) then begin
              rwcntrec = MatRowCnt(recSHr);
              for (reci=0;reci<rwcntrec;reci=reci+1) begin
                MatRowGet(recSHr,reci,recSHrw);
                if (SHrw.ArtCode==recSHrw.ArtCode) then begin
                  prev = prev + recSHrw.Ship;
                end;
              end;
            end else begin
              if (MSb.NoSerOnPU==0) then begin
                if ((SHrw3.ArtCode==SHrw.ArtCode) and ((SHrw3.SerialNr==SHrw.SerialNr) and (SNrb.BulkSerialNos==0)) and (loc2==loc3)) then begin
                  prev = prev + SHrw3.Ship;
                end;
              end else begin
                if ((SHrw3.ArtCode==SHrw.ArtCode) and (loc2==loc3)) then begin
                  prev = prev + SHrw3.Ship;
                end;
              end;
            end;
          end;
          prev = prev + SHrw.Ship;
          if (SNrb.BulkSerialNos!=0) then begin
            FindStockValueInclStockReserv(SHp.OrderNr,SHrw.ArtCode,"",loc2,ISr,stockreservq);
          end else begin
            if (MSb.NoSerOnPU==0) then begin
              FindStockValueInclStockReserv(SHp.OrderNr,SHrw.ArtCode,SHrw.SerialNr,loc2,ISr,stockreservq);
            end else begin
              FindStockValueInclStockReserv(SHp.OrderNr,SHrw.ArtCode,"",loc2,ISr,stockreservq);
            end;
          end;
          if ((ISr.Instock-stockreservq<prev) and (prev>0)) then begin
            error = 1247;
            errorstr = "";
            rownr = i;
            fieldstr = "Ship";                      
            res = -1; 
            goto LSHVcRecordCheck;
          end;
          if (nonblank(SHrw.PosCode) and nonblank(SHrw.SerialNr)) then begin           
            errcode = CheckSerialatPositionInItemHist(SHrw.ArtCode,loc2,SHrw.PosCode,SHrw.SerialNr,prev);
            if (errcode!=0) then begin 
              error = 15057;
              errorstr = " : " & USetStr(12872) & " " & USetStr(16148);
              rownr = i;
              fieldstr = "PosCode";                   
              res = -1;
              goto LSHVcRecordCheck;
            end;  
          end;            
          if (SHp.OKFlag!=0 or UnOKedCheckSerialf) then begin
            if (LocRec.RequirePos!=0) then begin
              FindStockValueAtPosition(SHrw.ArtCode,loc2,SHrw.PosCode,PISr);
              if (SHrw.Ship>PISr.LeftQty) then begin
                error = 1397;
                errorstr = "";
                rownr = i;
                fieldstr = "PosCode";                         
                res = -1; 
                goto LSHVcRecordCheck;
              end;
            end;
          end;
        end;
      end;
      end;
      end;
      if ((check!=0) and (transf or UnOKedCheckSerialf)) then begin
      if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
        if (SNrb.BulkSerialNos==0) then begin
          if (IsSerialNrCorrect(SHrw.SerialNr)==false) then begin
            error = 24154;
            errorstr = SHrw.SerialNr;
            rownr = i;
            fieldstr = "SerialNr";                   
            res = -1; 
            goto LSHVcRecordCheck;
          end;        
        end;        
        if (blank(SHrw.SerialNr)) then begin
          if (SHrw.Ship!=0) then begin
            error = 1239;
            errorstr = "";
            rownr = i;
            fieldstr = "SerialNr";              
            res = -1; 
            goto LSHVcRecordCheck;
          end;
        end;
        // is the serial number available at given location 
        if (MSb.NoSerOnPU==0) then begin
        if (SHrw.Ship>0) then begin
          if (INr.SerNrf==1) then begin
            if (SNrb.BulkSerialNos!=0) then begin
              serqty = blankval;
              serialnr = FirstInRange(SHrw.SerialNr,60);
              while (nonblank(serialnr)) begin
                if (SerialNrAvail(SHrw.ArtCode,serialnr,loc2,1.00)==false) then begin
                  error = 1240;
                  errorstr = "";
                  rownr = i;
                  fieldstr = "SerialNr";                       
                  res = -1; 
                  goto LSHVcRecordCheck;
                end;
                serqty = serqty + 1;
                serialnr = NextSerialNumber(SHrw.ArtCode,serialnr,SNrb);
                if (serqty>=SHrw.Ship) then begin serialnr = ""; end;
              end;
            end else begin
              if (SerialNrAvail(SHrw.ArtCode,SHrw.SerialNr,loc2,SHrw.Ship)==false) then begin
                error = 1240;
                errorstr = "";
                rownr = i;
                fieldstr = "SerialNr";                        
                res = -1; 
                goto LSHVcRecordCheck;
              end;
            end;
          end else begin
            prev = blankval;
            for (cnt=0;cnt<i;cnt=cnt+1) begin
              MatRowGet(SHp,cnt,SHrw2);
              if ((SHrw2.ArtCode==SHrw.ArtCode) and (SHrw2.SerialNr==SHrw.SerialNr)) then begin
                prev = prev + SHrw2.Ship;
              end;
           end;
           prev = prev + SHrw.Ship;
            if (SerialNrAvail(SHrw.ArtCode,SHrw.SerialNr,loc2,prev)==false) then begin
              //1240 real fix isto change SerialNrAvail to return difrent results, 4.2 I guess
              error = 2211;
              errorstr = "";
              rownr = i;
              fieldstr = "SerialNr";                
              res = -1; 
              goto LSHVcRecordCheck;
            end;
          end;
        end;
        end;
        if (INr.SerNrf==1) then begin          
          if (SNrb.BulkSerialNos!=0) then begin
            errcode = ValidateBulkSerialNoRow(SNrb,SHp,SHrw,i,errstr,j);
            if (errcode) then begin
              error = errcode;
              errorstr = "";
              rownr = j;
              fieldstr = errstr;                      
              res = -1;
              goto LSHVcRecordCheck;
            end;
          end else begin
            if (SHrw.Ship>0) then begin
              if (SHrw.Ship!=1) then begin
                error = 1242;
                errorstr = "";
                rownr = i;
                fieldstr = "SerialNr";                  
                res = -1; 
                goto LSHVcRecordCheck;
              end;
              for (j=0;j<i;j=j+1) begin
                MatRowGet(SHp,j,SHrw2);
                if ((SHrw.ArtCode==SHrw2.ArtCode) and (SHrw.SerialNr==SHrw2.SerialNr)) then begin
                  error = 1242;
                  errorstr = "";
                  rownr = i;
                  fieldstr = "SerialNr";                       
                  res = -1; 
                  goto LSHVcRecordCheck;
                end;
              end;
            end;
          end;
        end;
      end;
      end;
    end;
  end;
  if (SHp.SerNr<=0) then begin
    newnr = GetCurUserLastNr("SHVc");
    if (newnr!=-1) then begin
       newnr = SRRec.LastShipNr;
    end;
    SHp.SerNr = NextSerNr("SHVc",SHp.ShipDate,newnr,false,"");
  end;
  if (SerNrTestSHVc(SHp.SerNr,SHp.ShipDate,gentrans)==false) then begin
    error = 1557;
    errorstr = "";
    rownr = -1;
    fieldstr = "SerNr";       
    res = -1; 
    goto LSHVcRecordCheck;
  end;
  if (check!=0) then begin
    UpdateSHFIFO(SHp);
  end;
  if (transf) then begin
    if (stat==Rs_update) then begin
      sernr = SH2p.SerNr;
    end;
    if (check>0) then begin
      if (MSb.Chronology!=0) then begin 
        if (ExistStockTrans(SHp.Location,SHp.ShipDate,errcode,errstr,"SHVc",sernr,MSb)) then begin
          error = errcode;
          errorstr = errstr;
          rownr = -1;
          fieldstr = "ShipDate";                
          res = -1;
          goto LSHVcRecordCheck;
        end;
      end;
    end;
    if (CanOKStockRecord(errcode)==false) then begin
      error = errcode;
      errorstr = "";
      rownr = -1;
      fieldstr = "SerNr";        
      res = -1; 
      goto LSHVcRecordCheck;
    end;
  end;
LSHVcRecordCheck_GenTrans:;
  if (gentrans==false) then begin transf = false; end;
  if (IsStandardProduct) then begin
    transf = HasIntegratedNL and transf;
  end;
  if (transf) then begin
    errcode = MakeTransFromSH(gTRp,SHp,false,RepSpec);
    if (errcode!=0) then begin
      error = errcode;
      errorstr = "";
      rownr = -1;
      fieldstr = "SerNr";           
      res = -1;
      goto LSHVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==SHYc)) then begin
      if (MatRowCnt(gTRp)>0) then begin
        errstr = CheckTrans(gTRp,2,true);
        if (nonblank(errstr)) then begin
          error = 1085;
          errorstr = errstr;
          rownr = -1;
          fieldstr = "SerNr";             
          res = -1;
          goto LSHVcRecordCheck;
        end;
        switch (gRuniningMaint) begin    
          case "RecalcStockMn":
            UpdateTrans_Stock(gTRp);          
          otherwise
            SaveTrans(gTRp);
            AddTTrans_SHVc(gTRp,SHp);
        end;
      end;
    end;    
  end;
  
LSHVcRecordCheck:;
  if (res!=0) then begin
    SHp.SerNr = oldnr;
    SHp.OfficialSerNr = oldOfficialSerNr;
    SHp.OfficialSerNrSerie = "";
  end;
  DoSHVcRecordCheck = res;
  return;
end;

global
updating function LongInt SHVcRecordCheck(var record SHVc SHp,record SHVc SH2p,LongInt stat,LongInt check)
begin
  LongInt res,error;
  Boolean UnOKedCheckSerialf;
  string 255 errorstr,fieldstr;
  integer rownr;
  
  UnOKedCheckSerialf = false;
  res = DoSHVcRecordCheck(SHp,SH2p,stat,check,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);

  if (res!=0) then begin
    RecordCheckError(error,errorstr,rownr,fieldstr);   
  end;
  SHVcRecordCheck = res;
  return;
end;

global
function LongInt SHVcRecordDefaults(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
      
  SHr.SerNr = -1;
  SHr.OrderNr = -1;
  SHr.ShipDate = CurrentDate;
  SHr.PlanSendDate = SHr.ShipDate;
  SHr.Prntdf = 0;
  SHr.OKFlag = 0;
  SHr.ShipMode = "";  
  SHr.TerminalID = CurTerminalID;
  SHr.BranchID = CurBranchID;
  SHr.LocalMachineCode = CurMachineName;
  SHr.OfficialSerNr = "";
  SHr.OfficialSerNrSerie = "";

  SHVcRecordDefaults = res; 
  return;
end;

global
function LongInt SHVcRecordDuplicate(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Date bd;
  Time bt;

  SHr.SerNr = -1;
  SHr.OKFlag = 0;
  SHr.LocOKNr = blankval;
  SHr.TerminalID = CurTerminalID;
  SHr.BranchID = CurBranchID;
  SHr.LocalMachineCode = CurMachineName;
  SHr.RegDate = bd;
  SHr.RegTime = bt;
  SHr.Hash = "";
  SHr.HashKeyVersion = 0;
  SHr.TaxAdminServSeal = "";   
  SHr.OfficialSerNrSerie = "";   
  SHVcRecordDuplicate = res; 
  return;
end;

global
updating function LongInt SHVcRecordSave(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (blankdate(SHr.RegDate)) then begin
    SHr.RegDate = CurrentDate;
  end;
  if (blanktime(SHr.RegTime)) then begin
    SHr.RegTime = CurrentTime;
  end;
  if (SHr.OKFlag!=0) then begin
    SHr.LocOKNr = NextLocOKNr(SHr.Location);
  end;
  CalcSHWeight(SHr,false);
  SHOK(SHr);
  if (blank(SHr.OfficialSerNr)) then begin
    FindNextSHVcOfficialSerialNr(SHr,-1);
  end;
  AddPortugueseSAFTHashToSH(SHr);
  SHVcRecordSave = res; 
  return;
end;

updating procedure SHOKStockMovemnts(LongInt shnr)
begin
  record StockMovVc StockMovr;
  Boolean TrHs;
  Integer flushcnt;
  record LocationVc Locr;
  
/*at  the moment Pierre wants deliveries not to be OKED when there is any not OKed stockmov*/  
/*not sure it is necessry I think stock mov will be oked when info from AGV received*/  
  TrHs = true;  
  StockMovr.FileName = "SHVc";
  StockMovr.TransNr = shnr;
  while (LoopKey("FileName",StockMovr,2,TrHs)) begin
    if (StockMovr.FileName!="SHVc") then begin TrHs = false; end;
    if (StockMovr.TransNr!=shnr) then begin TrHs = false; end;
    if (TrHs) then begin
      Locr.Code = StockMovr.ToLocation;
      ReadFirstMain(Locr,1,true);
      if (Locr.WHMAutOKStockMovements!=0) then begin
        if (RecordAction_rlStockMovLOK(StockMovr,false)) then begin      
        end;
      end;
    end;
  end;
LSHOKStockMovemnts:;  
  return;
end;

updating procedure UpdateSerialNumberQuantity(record SHVc SHr,Boolean negf)
begin
  record MainStockBlock MSb;
  Integer i,rwcnt;
  row SHVc SHrw;
  string 10 location,loc2;
  val t4,costp;

  goto LUpdateSerialNumberQuantity;
  BlockLoad(MSb);
  if (MSb.UpdateAvailable==0) then begin goto LUpdateSerialNumberQuantity; end;
  
  location = SHr.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);  
    if (nonblank(SHrw.Location)) then begin  
      loc2 = SHrw.Location;
    end else begin
      loc2 = location;
    end;
    if (negf) then begin
      t4 = -SHrw.Ship;
    end else begin
      t4 = SHrw.Ship;
    end;
    costp = blankval;
    UpdateSerStock(SHrw.ArtCode,loc2,SHrw.SerialNr,t4,costp);    
  end;
LUpdateSerialNumberQuantity:;  
  return;
end;

global
updating function LongInt SHVcRecordSaveAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;

  Userr.Code = SHr.Sign;
  ReadFirstMain(Userr,1,true);
  SHr.SalesGroup = Userr.SalesGroup;  
  if (SHr.OKFlag!=0) then begin
    SHUpdateItemHist(SHr);
    SHUpdateSerialNr(SHr,false,true);
    SHUpdateStock(SHr,false,false);
    UpdateProjFromShip(SHr);
//    SHOKStockMovemnts(SHr.SerNr);
    AutomatedSalesOrderly("HasIntegratedNL");
  end;
  if (SHr.OrderNr!=-1) then begin
    if (UpdateOrderFromShip(SHr,true,SH2r,false,false)) then begin end;
  end;
  if (SHr.OKFlag==0) then begin
    SHUpdateInShipment(SHr,true,SH2r,false,false);
  end;
  UpdateSerialNumberQuantity(SHr,true);
  if (nonblank(SHr.OfficialSerNr)) then begin
    UpdateOffSerNr(SHr.SerNr,"SHVc",0,SHr.OfficialSerNr,false);
  end;
  SHVcRecordSaveAfter = res; 
  return;
end;

global
updating function LongInt SHVcRecordRemoveAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  UpdateSerialNumberQuantity(SHr,false);
  if (nonblank(SHr.OfficialSerNr)) then begin 
    DeleteOffSerNr(SHr.SerNr,"SHVc");
  end;
  SHVcRecordRemoveAfter = res; 
  return;
end;

global
updating function LongInt SHVcRecordImportAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer err;

  if (SHr.OKFlag!=0) then begin
    SHUpdateSerialNr(SHr,false,true);
    UpdateProjFromShip(SHr);
    if (ImportingTextBackup==false and CanOKStockRecord(err)==true) then begin
      SHUpdateItemHist(SHr);
      SHUpdateStock(SHr,false,false);
    end;
  end;
  SHVcRecordImportAfter = res; 
  return;
end;

global
updating function LongInt SHVcRecordUpdate(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if ((SHr.OrderNr!=-1) and (SH2r.OKFlag==0)) then begin
    if (UpdateOrderFromShip(SHr,true,SH2r,true,false)) then begin end;
  end;
  if ((SH2r.OKFlag==0) and (SHr.OKFlag==0)) then begin
    SHUpdateInShipment(SHr,true,SH2r,true,false);
  end;
  if ((SHr.OKFlag!=0) and (SH2r.OKFlag==0)) then begin
    if (ItemHistExists("SHVc",SHr.SerNr)==false) then begin
      SHr.LocOKNr = NextLocOKNr(SHr.Location);
    end;
    UpdateStockResFromSH(SHr);
    SHr.Prntdf = 0;
  end;
  AddPortugueseSAFTHashToSH(SHr);
  SHVcRecordUpdate = res; 
  return;
end;

global
updating procedure UnOKDelivery(record SHVc SHr,record SHVc SH2r,Boolean deltrf)
begin

//  UpdateStockResFromSH(SHr);//JJRECALCSTOCK
  SHUpdateSerialNr(SHr,true,true);
  SHUpdateInShipment(SH2r,true,SHr,false,true); // What does this function do??
  SHUpdateStock(SHr,false,true);
  if (SHr.OrderNr!=-1) then begin
    if (UpdateOrderFromShip(SHr,false,SH2r,true,false)) then begin end;
  end;
//    UpdateProjFromShip(SHr);//JJRECALCSTOCK
//    SHOK(SHr,flushcnt);//JJRECALCSTOCK

//    UpdateSerialNumberQuantity(SH2r,false);//NOT used
  UpdateRecalcStockNeeded(1);
  StoreUnOKHistory("SHVc",SHr.SerNr,CurrentDate,CurrentTime,CurrentUser);    
  if (deltrf) then begin
    DeleteTransaction(SHr.SerNr,SHYc);
  end;
  return;
end;

global
updating function LongInt SHVcRecordUpdateAfter(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Boolean ihef;
  record IVVc IVr;
  record IVVc oldIVr;
  Integer errcode;
  record OrdSettBlock OSb;
  record AutoActionBlock AAb;

  
  ihef = ItemHistExists("SHVc",SHr.SerNr);
  if ((SHr.OKFlag!=0) and (SH2r.OKFlag==0)) then begin
    BlockLoad(OSb);
//    SHOKStockMovemnts(SHr.SerNr);
    if (ihef==false) then begin
      SHUpdateItemHist(SHr);
    end;
    SHUpdateSerialNr(SHr,false,true);
    SHUpdateInShipment(SH2r,true,SHr,false,true); // What does this function do??
    SHUpdateStock(SHr,false,false);
    AutomatedSalesOrderly("HasIntegratedNL");
    if (ihef==false) then begin
      UpdateProjFromShip(SHr);
      SHOK(SHr);
      SMSWhenSHOK(SHr.OrderNr,SHr.CustCode,1);
      if (OSb.CreateIVonSHOK!=0) then begin
        if (RecordAction_raPasteOrdInInv(IVr,SHr.OrderNr,true,errcode)==0) then begin
          RecordCopy(oldIVr,IVr);
          IVr.OKFlag = 1;
          RecordUpdate(oldIVr,IVr,true);
          BlockLoad(AAb);
          if (AAb.InvoicePrinting!=0) then begin
            PrintDocument(IVr,"InvForm",false);
          end;  
        end;
      end;
    end;
  end;
  if ((SH2r.OKFlag==0) and (SHr.OKFlag==0)) then begin
//    UpdateSerialNumberQuantity(SH2r,false);//Not Used
//    UpdateSerialNumberQuantity(SHr,true);//Not Used
  end;
//  if ((IVr.Invalid==0) and (IV2r.Invalid==0)) then begin
  if ((SHr.OKFlag==0) and (SH2r.OKFlag!=0)) then begin//unok
    UnOKDelivery(SHr,SH2r,true);
  end;
  if (nonblank(SHr.OfficialSerNr)) then begin
    if (SHr.OfficialSerNr!=SH2r.OfficialSerNr) then begin
      UpdateOffSerNr(SHr.SerNr,"SHVc",0,SHr.OfficialSerNr,true);
    end;
  end else begin
    if (nonblank(SH2r.OfficialSerNr)) then begin
      DeleteOffSerNr(SH2r.SerNr,"SHVc");
    end;
  end;
  SHVcRecordUpdateAfter = res; 
  return;
end;

global
function LongInt SHVcRecordRemoveTest(var record SHVc SHr,record SHVc SH2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  record ORVc ORr;

  res = 0;
  if (SHr.OKFlag==0) then begin
    res = 1;
    goto LSHVcRecordRemoveTest;
  end;
  BlockLoad(DBLockRec);
  if (SHr.ShipDate<=DBLockRec.DeleteBeforeDate) then begin        
    res = 1;
//    ORr.SerNr = SHr.OrderNr; there is test in deleting orders , do not delete if SH exists
//    if (ReadFirstMain(ORr,1,true)) then begin res = 0; end;
  end;
  if (res==0) then begin
    if (long3>0) then begin MessageBox(1544,""); end;
  end;  
LSHVcRecordRemoveTest:;
  SHVcRecordRemoveTest = res; 
  return;
end;

updating procedure SHDeleteStockMovemnts(LongInt shnr)
begin
  record StockMovVc StockMovr;
  Boolean TrHs;
  
  TrHs = true;  
  StockMovr.FileName = "SHVc";
  StockMovr.TransNr = shnr;
  while (LoopKey("FileName",StockMovr,2,TrHs)) begin
    if (StockMovr.FileName!="SHVc") then begin TrHs = false; end;
    if (StockMovr.TransNr!=shnr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (StockMovr.OKFlag==0) then begin
        RecordRemove(StockMovr);
        StepBack(StockMovr);
      end;
    end;
  end;
LSHDeleteStockMovemnts:;  
  return;
end;

global
updating function LongInt SHVcRecordRemove(var record SHVc SHr,record SHVc SH2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (SHr.OrderNr!=-1) then begin
    if (UpdateOrderFromShip(SH2r,false,SHr,true,false)) then begin end;
  end;
  if (SHr.OKFlag==0) then begin
    SHUpdateInShipment(SHr,true,SH2r,false,true);
  end;
  if (SHr.OKFlag==0) then begin
    SHDeleteStockMovemnts(SHr.SerNr);
  end;
  SHVcRecordRemove = res; 
  return;
end;

