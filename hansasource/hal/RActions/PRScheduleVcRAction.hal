
function Integer PRScheduleVersionNr(string prcode,Integer versionnr)
begin
  record PRScheduleVc prevPRScheduler;
  Integer res;
  
  res = 1;
  prevPRScheduler.PRCode = prcode;
  if (ReadLastKey("PRCode",prevPRScheduler,1,true)) then begin
    res = prevPRScheduler.VersionNr + 1;
  end;
  PRScheduleVersionNr = res;
  return;
end;

global
function LongInt PRScheduleVcRecordDefaults(var record PRScheduleVc PRScheduler,record PRScheduleVc PRSchedule2r, longint stat, longint long4)
begin
  LongInt res;
  
  PRScheduler.TransDate = CurrentDate;
  PRScheduler.VersionNr = 1;
  PRScheduleVcRecordDefaults = res; 
  return;
end;

global
function LongInt PRScheduleVcRecordDuplicate(var record PRScheduleVc PRScheduler,record PRScheduleVc PRSchedule2r, longint stat, longint long4)
begin
  LongInt res;
  
  PRScheduler.TransDate = CurrentDate;
  PRScheduler.VersionNr = PRScheduleVersionNr(PRScheduler.PRCode,PRScheduler.VersionNr);
  PRScheduler.Closed = 0;
  PRScheduleVcRecordDuplicate = res; 
  return;
end;

updating procedure ClosePRSchedulePreviousVersion(string prcode,Integer versionnr)
begin
  record PRScheduleVc prevPRScheduler;
  
  prevPRScheduler.PRCode = prcode;
  prevPRScheduler.VersionNr = versionnr - 1;
  if (ReadLastKey("PRCode", prevPRScheduler, 2, true)) then begin
    prevPRScheduler.Closed = 1;
    if (RecordStore(prevPRScheduler, true)) then begin end;
  end;
  return;
end;

global 
updating function LongInt PRScheduleVcRecordSave(var record PRScheduleVc PRScheduler,record PRScheduleVc PRSchedule2r, longint stat, longint long4)
begin
  LongInt res;

  PRScheduler.VersionNr = PRScheduleVersionNr(PRScheduler.PRCode,PRScheduler.VersionNr);
  PRScheduleVcRecordSave = res; 
  return;
end;

global 
updating function LongInt PRScheduleVcRecordSaveAfter(var record PRScheduleVc PRScheduler,record PRScheduleVc PRSchedule2r, longint stat, longint long4)
begin
  LongInt res;

  ClosePRSchedulePreviousVersion(PRScheduler.PRCode,PRScheduler.VersionNr);    
  PRScheduleVcRecordSaveAfter = res; 
  return;
end;

global
function LongInt PRScheduleVcRecordCheck(var record PRScheduleVc PRScheduler,record PRScheduleVc PRSchedule2r, longint stat, longint long4)
begin
  LongInt res;
  string 255 tstr;
  record PRVc PRr;
  row PRScheduleVc PRSchedulerw;
  Integer i,rwcnt;
  record UserVc Userr;
  
  res = 0;
  if (Blank(PRScheduler.PRCode)) then begin     
    RecordCheckError(1270, tstr, -1, "PRCode");
    res = -1; 
    goto LPRScheduleVcRecordCheck;
  end else begin
    PRr.Code = PRScheduler.PRCode;    
    if (ReadFirstMain(PRr, 1, true)==false) then begin
      RecordCheckError(1232, tstr, -1, "PRCode");   
      res = -1; 
      goto LPRScheduleVcRecordCheck;
    end;    
  end; 
  rwcnt = MatRowCnt(PRScheduler);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRScheduler,i,PRSchedulerw);
    if (PRSchedulerw.stp==1) then begin
      if (nonblank(PRSchedulerw.PRStageSign)) then begin
        Userr.Code = PRSchedulerw.PRStageSign;
        if (ReadFirstMain(Userr,1,true)==false) then begin
          RecordCheckError(20170," " & PRSchedulerw.PRStageSign, i, "PRStageSign");   
          res = -1; 
          goto LPRScheduleVcRecordCheck;
        end;
      end;
    end;
  end;
LPRScheduleVcRecordCheck:;
  PRScheduleVcRecordCheck = res;  
  return;
end; 

global
function LongInt PRScheduleVcRecordRemoveTest(var record PRScheduleVc PRScheduler,record PRScheduleVc PRSchedule2r, longint stat, longint long4)
begin
  LongInt res;
  
  res = 1;
  if (PRScheduler.Closed!=0) then begin
    MessageBox(0, "Closed Schedules can not be deleted");
    res = 0;
  end;
  PRScheduleVcRecordRemoveTest = res;
  return;
end;

global
function LongInt PRScheduleVcRecordInIndex(record PRScheduleVc PRScheduler,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (PRScheduler.Closed!=0) then begin 
    if (indexname=="ActPRCode")  then begin res = 0; end;
  end;
  PRScheduleVcRecordInIndex = res;
  return;
end;

global
function LongInt PRScheduleVcRecordImport(var record PRScheduleVc PRScheduler,record PRScheduleVc PRSchedule2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record PRVc PRr;
 
  PRr.Code = PRScheduler.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    PRScheduler.Members = PRr.Members;
  end;  

  PRScheduleVcRecordImport = res;
  return;
end;

