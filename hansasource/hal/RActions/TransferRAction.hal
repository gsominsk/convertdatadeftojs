external function Boolean ValidStateChange(Integer,Integer);
external procedure PasteInTransferTimes(var record TransferVc);

/*
procedure GetVehResCode(String Vehicle,var string res)
begin
  Record VehicleVc Vehicler;
  Vehicler.Code = Vehicle;
  if readfirstmain(Vehicler,1,true) then begin
    res  = Vehicler.ResCode;
  end;
  return;
end;
*/

updating procedure TransferCreateAct(Record TransferVc Transfer)
begin
  Record ActVc Actr;
  Boolean Res;
  Integer curcomp; 

  curcomp = CurrentCompany;
  Recordnew(Actr);  // Generates new sernr automatically
  Actr.MainPersons   = Transfer.MainPersons;
  Actr.Comment       = Transfer.Comment;
  Actr.ActType       = Transfer.ExcurType;
  Actr.StartTime     = Transfer.StartTime;
  Actr.EndTime       = Transfer.EndTime;
  Actr.TransDate     = Transfer.TransDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
//  Actr.TodoFlag      = 1;
  Actr.PrivateFlag   = 0;
  Actr.CalTimeFlag   = 1;
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,Transfer,curcomp);  
  end;
  return;
end;

updating procedure TransferCreateJob(record TransferVc Transfer)
begin
  Record JobVc Jobr;
  Boolean Res;
  record HotelBlock htr;
  Integer curcomp;

  BlockLoad(htr);
  curcomp = CurrentCompany;
  Recordnew(Jobr);  // Generates new sernr automatically
  Jobr.ResCode       = Transfer.ResCode;
  Jobr.CUName        = Transfer.Comment;
  Jobr.ResStatus     = htr.DefSt;
  Jobr.StartTime     = Transfer.StartTime;
  Jobr.EndTime       = Transfer.EndTime;
  Jobr.TransDate     = Transfer.TransDate;
  Jobr.EndDate       = Transfer.TransDate;
  Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,"");
  if (RecordStore(Jobr,false)) then begin
    CreateRecordLink(Jobr,curcomp,Transfer,curcomp);
  end;
  return;
end;

updating procedure LinkTransferToAct(record TransferVc Transfer)
begin
  record ActVc Actr;
  record RLinkVc RLinkr;

  if (ReadRecordToLink(Transfer,1,Actr,RLinkr)) then begin
    Actr.MainPersons   = Transfer.MainPersons;
    if (RecordStore(Actr,true)) then begin end;
  end else begin
    TransferCreateAct(Transfer);
  end;
  return;
end;

updating procedure LinkTransferToJob(record TransferVc Transfer)
begin
  record JobVc Jobr;
  record RLinkVc RLinkr;

  if (ReadRecordToLink(Transfer,1,Jobr,RLinkr)) then begin
    Jobr.ResCode   = Transfer.ResCode;
    if (RecordStore(Jobr,true)) then begin end;
  end else begin
    TransferCreateJob(Transfer);
  end;
  return;
end;

function Boolean JobInTransfer(record TransferVc Transfer,LongInt JobNr,Integer fromrow)
begin
  Integer i,rwcnt;
  Row TransferVc Transferw;
  Boolean res;
  
  res = false;
  rwcnt = MatRowCnt(Transfer);
  for (i=fromrow;i<rwcnt;i=i+1) begin
    MatRowGet(Transfer,i,Transferw);
    if (Transferw.JobNr==JobNr) then begin
      res = true;
      goto LJobInTransfer;
    end;
  end;
LJobInTransfer:;
  JobInTransfer = res;
  return;
end;  

updating procedure TUpdateExcursionrsVc(record TransferVc r1,record TransferVc r2,Integer insmode)
begin
  record ExcursionrsVc Excurrsr;
  Integer i,rwcnt;
  Row TransferVc Transferw;
  Boolean err;
  
  rwcnt = MatRowCnt(r1);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(r1,i,Transferw);
    RecordNew(Excurrsr);
    Excurrsr.JobNr     = Transferw.JobNr;
    Excurrsr.EventNr   = r1.SerNr;
    Excurrsr.Comment   = r1.Comment;
    Excurrsr.TransDate = r1.TransDate;
    Excurrsr.StartTime = r1.StartTime;
    Excurrsr.FileName  = "TransferVc";
     
    if (insmode==0) then begin   //Save
      if (JobInTransfer(r1,Transferw.JobNr,i+1)==false) then begin
        err = RecordStore(Excurrsr,true);
      end;
    end;
    if (insmode==1) then begin  // update 1
      if (JobInTransfer(r2,Transferw.JobNr,0)==false) then begin
        if (JobInTransfer(r1,Transferw.JobNr,i+1)==false) then begin 
          RecordDelete(Excurrsr);
        end;
      end;
    end;
    if (insmode==2) then begin  // update 2
      if (JobInTransfer(r2,Transferw.JobNr,0)==false) then begin
        if (JobInTransfer(r1,Transferw.JobNr,i+1)==false) then begin
          err = RecordStore(Excurrsr,true);
        end;
      end;
    end;
  end;
  return;
end;


global
function LongInt TransferVcRecordDefaults(var record TransferVc r1,record TransferVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  Time BTime;
  
  if (SingleUserMode) then begin
    r1.SerNr     = NextSerNr("TransferVc",CurrentDate,-1,false,"");
  end;
  r1.TransDate = CurrentDate;
  r1.Status    = 0;
  r1.StartTime = BTime;
  r1.EndTime   = BTime;
  r1.Direction = 1;
  TransferVcRecordDefaults = res;  
  return;
end;

global
function LongInt TransferVcRecordDuplicate(var record TransferVc r1,record TransferVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  String 20 tmp;
  Record RouteVc Router;
  Record ExcursionVc Excur;
  Time bTime;
  
  Router.Code = r1.Route;
  if readfirstmain(Router,1,true) then begin
     r1.Route = Router.ToPlace & "-" & Router.FromPlace;
  end;
  Excur.SerNr = r1.NrEvent;
  if readfirstmain(Excur,1,true) then begin
    r1.StartTime = Excur.EndTime;
    r1.EndTime   = bTime;
  end;
  r1.Status = 0;
  r1.SerNr = -1;
  if (SingleUserMode) then begin
    r1.SerNr     = NextSerNr("TransferVc",CurrentDate,-1,false,"");
  end;
  PasteInTransferTimes(r1);
  TransferVcRecordDuplicate = res;  
  return;
end;

global
function LongInt TransferVcRecordCheck(var record TransferVc r1,record TransferVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  Record VehicleVc Vehicle;
  Boolean cond;
  
  if (r1.SerNr==-1) then begin
    r1.SerNr     = NextSerNr("TransferVc",CurrentDate,-1,false,"");
  end;
  cond = true;
  Vehicle.Code = r1.VehicleNr;
  if ReadFirstMain(Vehicle,1,true) then begin
    if (Vehicle.Sits < MatRowCnt(r1)) then begin
      RecordCheckError(20155,"",-1,"VehicleNr");      
      cond = false;
      goto LTransferVcRecordCheck;
    end;
  end;
  if blank(r1.VehicleNr) then begin
    if ((r1.Status==2) or (r1.Status==3)) then begin  
      cond = false;
      RecordCheckError(20156,"",-1,"VehicleNr");      
      goto LTransferVcRecordCheck;
    end;
  end;
  if not ValidStateChange(r1.Status,r2.Status) then begin
    RecordCheckError(20152,"",-1,"Status");      
    cond = false;
    goto LTransferVcRecordCheck;
  end;  

LTransferVcRecordCheck:;  
  res = 0;
  if not (cond) then begin 
    res = -1;
    Beep;
  end;
  TransferVcRecordCheck = res;  
  RETURN;
END;

global
updating function LongInt TransferVcRecordSave(var record TransferVc r1,record TransferVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  Record ResortBlock ResBlock;
  
  TUpdateExcursionrsVc(r1,r1,0);
  BlockLoad(ResBlock);
  if (ResBlock.ActLink2==1) then begin
   if nonblank(r1.MainPersons) then begin LinkTransferToAct(r1); end;
  end;  
  if (ResBlock.JobLink2==1) then begin
    if nonblank(r1.ResCode) then begin LinkTransferToJob(r1); end;
  end;
  TransferVcRecordSave = res;  
  return;
end;

global
updating function LongInt TransferVcRecordUpdate(var record TransferVc r1,record TransferVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  Record ResortBlock ResBlock;

  TUpdateExcursionrsVc(r2,r1,1);
  TUpdateExcursionrsVc(r1,r2,2);
  
  if (r1.Status>=2) then begin
    BlockLoad(ResBlock);
    if (ResBlock.ActLink2<>0) then begin
      if (r1.MainPersons<>r2.MainPersons) then begin LinkTransferToAct(r1); end;
    end;  
    if (ResBlock.JobLink2<>0) then begin
      if (r1.ResCode<>r2.ResCode) then begin LinkTransferToJob(r1); end;
    end;
  end;

  TransferVcRecordUpdate = res;  
  return;
end;

global
updating function LongInt TransferVcRecordRemove(var record TransferVc r1,record TransferVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  TUpdateExcursionrsVc(r1,r1,1);
  TransferVcRecordRemove = res;  
  return;
end;

global
function LongInt TransferVcRecordUpdateAfter(var record TransferVc r1,record TransferVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
    
  TransferVcRecordUpdateAfter = res;  
  return;
end;

global
function LongInt TransferVcRecordRemoveTest(var record ExcursionVc r1,record ExcursionVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = -1;
  TransferVcRecordRemoveTest = res;  
  return;
end;
