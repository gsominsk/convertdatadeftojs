external procedure GetNextToken(string,var Integer,var string);
external procedure GetNext2Sep(string,var Integer,var string);
external function Boolean GetNextTokenReturn(string,var Integer,var string);
external procedure GetNext2Sep(string,var Integer,var string);

global
function LongInt UserDefRepVcRecordDuplicate(var record UserDefRepVc UserDefRepr,record UserDefRepVc UserDefRep2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Date blankd;

  UserDefRepr.prevshortname = UserDefRepr.shortname;
  UserDefRepr.shortname = "";
  UserDefRepVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt UserDefRepVcRecordSaveAfter(var record UserDefRepVc UserDefRepr,record UserDefRepVc UserDefRep2r,LongInt stat,LongInt long4)
BEGIN
  record UserDefRepVc prevUserDefRepr;
  record UserDefRepLinesVc UserDefRepLinesr;
  record UserDefRepLinesVc newUserDefRepLinesr;
  record UserDefRepColumnsVc UserDefRepColumnsr;
  record RepDefBlock RepDefb;
  row RepDefBlock RepDefbrw;
  Integer i,rwcnt;
  string 255 ckey;
  Boolean foundf,errf;
  LongInt res;
  
  if (nonblank(UserDefRepr.prevshortname)) then begin
    prevUserDefRepr.shortname = UserDefRepr.prevshortname;
    if (ReadFirstMain(prevUserDefRepr,1,true)) then begin
      foundf = true;
      ckey = "ShortIDKey:" & prevUserDefRepr.shortname;
      UserDefRepLinesr.IdKey = 0;
      while (LoopKey(ckey,UserDefRepLinesr,1,foundf)) begin
        RecordCopy(newUserDefRepLinesr,UserDefRepLinesr);
        newUserDefRepLinesr.shortname = UserDefRepr.shortname;
        if (RecordStore(newUserDefRepLinesr,true)) then begin
        end;
      end;
      UserDefRepColumnsr.shortname = prevUserDefRepr.shortname;
      if (ReadFirstMain(UserDefRepColumnsr,1,true)) then begin
        UserDefRepColumnsr.shortname = UserDefRepr.shortname;
        if (RecordStore(UserDefRepColumnsr,true)) then begin
        end;
      end;
      foundf = false;
      BlockLoad(RepDefb);
      rwcnt = MatRowCnt(RepDefb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RepDefb,i,RepDefbrw);
        if (RepDefbrw.shortname==UserDefRepr.prevshortname) then begin
          foundf = true;
          i = rwcnt;
        end;
      end;
      if (foundf) then begin
        RepDefbrw.shortname = UserDefRepr.shortname;
      end else begin
        RepDefbrw.repname = UserDefRepr.repname;
        RepDefbrw.shortname = UserDefRepr.shortname;
        RepDefbrw.header = "";
      end;
      MatRowPut(RepDefb,rwcnt,RepDefbrw);
      BlockStore(RepDefb);
    end;
  end;
  UserDefRepVcRecordSaveAfter = res;
  RETURN;
END;

function Boolean TestInfiniteLoop(string shortname,LongInt IdKey,LongInt TestIdKey) 
begin
  Boolean res;
  record UserDefRepLinesVc locUDRLr;
  string 255 Nitem;
  string 255 NRu;
  string 5 nsep;
  Integer np;

  locUDRLr.shortname = shortname;
  locUDRLr.IdKey = IdKey;
  if (ReadFirstMain(locUDRLr,2,true)) then begin
    switch (locUDRLr.RsType) begin
      case kRsTypeSum:
        GetNext2Sep(locUDRLr.Desc,np,nsep);
        while (GetNextTokenReturn(locUDRLr.Desc,np,Nitem)) begin
          GetNext2Sep(locUDRLr.Desc,np,nsep);
          if (nsep==".") then begin
            GetNextToken(locUDRLr.Desc,np,NRu);
            GetNext2Sep(locUDRLr.Desc,np,nsep);
          end else begin
            NRu = "";
          end;        
          if (StringToLongInt(Nitem)==TestIdKey) then begin
            res = true;
            goto LTestInfiniteLoop;
          end;
        end;        
        GetNext2Sep(locUDRLr.Desc2,np,nsep);
        while (GetNextTokenReturn(locUDRLr.Desc2,np,Nitem)) begin
          GetNext2Sep(locUDRLr.Desc2,np,nsep);
          if (nsep==".") then begin
            GetNextToken(locUDRLr.Desc2,np,NRu);
            GetNext2Sep(locUDRLr.Desc2,np,nsep);
          end else begin
            NRu = "";
          end;        
          if (StringToLongInt(Nitem)==TestIdKey) then begin
            res = true;
            goto LTestInfiniteLoop;
          end;
        end;        
        GetNext2Sep(locUDRLr.Desc3,np,nsep);
        while (GetNextTokenReturn(locUDRLr.Desc3,np,Nitem)) begin
          GetNext2Sep(locUDRLr.Desc3,np,nsep);
          if (nsep==".") then begin
            GetNextToken(locUDRLr.Desc3,np,NRu);
            GetNext2Sep(locUDRLr.Desc3,np,nsep);
          end else begin
            NRu = "";
          end;        
          if (StringToLongInt(Nitem)==TestIdKey) then begin
            res = true;
            goto LTestInfiniteLoop;
          end;
        end;        
    end;
  end;
LTestInfiniteLoop:;  
  TestInfiniteLoop = res;
  return;
end;

global
function LongInt UserDefRepLinesVcRecordCheck(var record UserDefRepLinesVc UserDefRepLinesr,record UserDefRepLinesVc UserDefRepLines2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  string 255 Nitem;
  string 255 NRu;
  string 5 nsep;
  Integer np;

  res = 0;
  switch (UserDefRepLinesr.RsType) begin
    case kRsTypeSum:
      GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
      while (GetNextTokenReturn(UserDefRepLinesr.Desc,np,Nitem)) begin
        GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
        if (nsep==".") then begin
          GetNextToken(UserDefRepLinesr.Desc,np,NRu);
          GetNext2Sep(UserDefRepLinesr.Desc,np,nsep);
        end else begin
          NRu = "";
        end;        
        if (TestInfiniteLoop(UserDefRepLinesr.shortname,StringToLongInt(Nitem),UserDefRepLinesr.IdKey)) then begin
          RecordCheckError(2246," " & Nitem,-1,"Desc");      
          res = -1;
          goto LUserDefRepLinesVcRecordCheck;
        end;
        if (StringToLongInt(Nitem)==UserDefRepLinesr.IdKey) then begin
          RecordCheckError(2246," " & Nitem,-1,"Desc");      
          res = -1;
          goto LUserDefRepLinesVcRecordCheck;
        end;
      end;
      GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
      while (GetNextTokenReturn(UserDefRepLinesr.Desc2,np,Nitem)) begin
        GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
        if (nsep==".") then begin
          GetNextToken(UserDefRepLinesr.Desc2,np,NRu);
          GetNext2Sep(UserDefRepLinesr.Desc2,np,nsep);
        end else begin
          NRu = "";
        end;        
        if (TestInfiniteLoop(UserDefRepLinesr.shortname,StringToLongInt(Nitem),UserDefRepLinesr.IdKey)) then begin
          RecordCheckError(2246," " & Nitem,-1,"Desc2");      
          res = -1;
          goto LUserDefRepLinesVcRecordCheck;
        end;
        if (StringToLongInt(Nitem)==UserDefRepLinesr.IdKey) then begin
          RecordCheckError(2246," " & Nitem,-1,"Desc");      
          res = -1;
          goto LUserDefRepLinesVcRecordCheck;
        end;
      end;
      GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
      while (GetNextTokenReturn(UserDefRepLinesr.Desc3,np,Nitem)) begin
        GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
        if (nsep==".") then begin
          GetNextToken(UserDefRepLinesr.Desc3,np,NRu);
          GetNext2Sep(UserDefRepLinesr.Desc3,np,nsep);
        end else begin
          NRu = "";
        end;        
        if (TestInfiniteLoop(UserDefRepLinesr.shortname,StringToLongInt(Nitem),UserDefRepLinesr.IdKey)) then begin
          RecordCheckError(2246," " & Nitem,-1,"Desc3");      
          res = -1;
          goto LUserDefRepLinesVcRecordCheck;
        end;
        if (StringToLongInt(Nitem)==UserDefRepLinesr.IdKey) then begin
          RecordCheckError(2246," " & Nitem,-1,"Desc");      
          res = -1;
          goto LUserDefRepLinesVcRecordCheck;
        end;
      end;      
  end;
LUserDefRepLinesVcRecordCheck:;
  UserDefRepLinesVcRecordCheck = res;
  return;
end;

global
function LongInt UserDefRepColumnsVcRecordCheck(record UserDefRepColumnsVc UDRCr,record UserDefRepColumnsVc UDRC2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row UserDefRepColumnsVc UDRCrw;

  res = 0;
  rwcnt = MatRowCnt(UDRCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(UDRCr,i,UDRCrw);
    switch (UDRCrw.ColType) begin
      case kUserDefRepColumnTypeColumnsSumup:
        if (blank(UDRCrw.AddInfo)) then begin
          RecordCheckError(1058,"",i,"AddInfo");      
          res = -1;
          goto LUserDefRepColumnsVcRecordCheck;
        end;
    end;
  end;
LUserDefRepColumnsVcRecordCheck:;
  UserDefRepColumnsVcRecordCheck = res;
  return
end;
