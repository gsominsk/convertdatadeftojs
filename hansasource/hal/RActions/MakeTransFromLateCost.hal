external function roundmode DefaultRoundMode();
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external function string 255 FindINObjects(string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure PUCalcPerc(val,string,var val);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Boolean TransInFiscal(Date);
external procedure GetITStockAcc(string,var string);
external procedure GetITPurchAcc(string,var string,Integer);


function
Integer GetLateCostPurchControlAcc(Integer ItemGroupAccounts,string purowacc,string itgroup,string accusageacc,var string purchacc,var string purchaccname,string vecode)
BEGIN
  Integer res;
  integer ctype;
  record CUVc VEp;
  
  purchacc = "";
  purchaccname = "";
  purchacc = purowacc;
  if (nonblank(purchacc)) then begin
    goto LGetLateCostPControlAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    VEp.Code = vecode;
    if ReadFirstMain(VEp,1,true) then begin
      if (VEp.ExportFlag==0) then begin
        ctype = 0;
      end;
      if ((VEp.ExportFlag==1) or (VEp.ExportFlag==3)) then begin
        ctype = 1;
      end;
      if (VEp.ExportFlag==2) or (VEp.ExportFlag==4) then begin
        ctype = 2;
      end;  
    end;
    GetITPurchAcc(itgroup,purchacc,ctype);
    if (nonblank(purchacc)) then begin
      goto LGetLateCostPControlAcc;
    end;
  end;
  purchacc = accusageacc;
  if (nonblank(purchacc)) then begin
    goto LGetLateCostPControlAcc;
  end;
LGetLateCostPControlAcc:;  
  if (GetAccName(purchacc,purchaccname,60)==false) then begin 
    res = 2129;  
  end;
  GetLateCostPurchControlAcc = res;
  RETURN;
END;

function
Integer GetLateCostStockAcc(Integer ItemGroupAccounts,string purowacc,string locacc,string itgroup,string accusageacc,var string stockacc,var string stockaccname)
BEGIN
  Integer res;
  
  stockacc = "";
  stockaccname  = "";
  stockacc = purowacc;
  if (nonblank(stockacc)) then begin
    goto LGetLateCostStockAcc;
  end;
  stockacc = locacc;
  if (nonblank(stockacc)) then begin
    goto LGetLateCostStockAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITStockAcc(itgroup,stockacc);
    if (nonblank(stockacc)) then begin
      goto LGetLateCostStockAcc;
    end;
  end;
  stockacc = accusageacc;
  if (nonblank(stockacc)) then begin
    goto LGetLateCostStockAcc;
  end;
LGetLateCostStockAcc:;
  if (GetAccName(stockacc,stockaccname,60)==false) then begin 
    res = 2120;  
  end;
  GetLateCostStockAcc = res;
  RETURN;
END;

global
function Integer MakeTransFromLateCost(record TRVc gTRp,record LateCostVc LateCostp,record LocationVc Locp,Boolean rpt)
BEGIN
  Integer res;
  Integer rwcnt;
  Integer i;
  string 255 ftxt,tstr,firstVAT;
  val VATSum;
  val t,rs;
  val frrate,to1,to2,br1,br2;
  row LateCostVc LateCostrw;
  Boolean dc1,dc2;
  val TotSum,PurSum;
  record INVc INr;
  val rs2,extra;
  string 10 stockacc,purchacc;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  val PurSum2;  
  record TRVc lTRr;
  record CostAccBlock CostAccRec;
  record APAccBlock APAccRec;
  record BaseCurBlock BaseCurRec;
  string 60 rwobj;

  res = 0;
  if (LateCostp.Invalid!=0) then begin
    goto LMakeTransFromLateCost;
  end;
  BlockLoad(ARAccRec);
  BlockLoad(TRGenRec);
  BlockLoad(CostAccRec);
  BlockLoad(APAccRec);
  BlockLoad(BaseCurRec);
  frrate = LateCostp.FrRate;
  to1 = LateCostp.ToRateB1;
  to2 = LateCostp.ToRateB2;
  br1 = LateCostp.BaseRate1;
  br2 = LateCostp.BaseRate2;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.PUGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromLateCost;
    end;
  end;
  if (rpt==false) then begin
    if (nonblankdate(TRGenRec.PUStartDate) and
        (LateCostp.TransDate<TRGenRec.PUStartDate)) then begin
      res = 0;
      goto LMakeTransFromLateCost;
    end;
  end;  
  if (true) then begin
    gTRp.IntYc = LateCostYc;
    gTRp.Number = LateCostp.SerNr;
    gTRp.RefStr = "";
  end;  
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromLateCost;
    end;
  end;  
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = LateCostp.TransDate;  
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromLateCost;
  end;  
  ftxt = LateCostp.VECode;
  ftxt = ftxt & " ";
  ftxt = ftxt & LateCostp.VEName;
  if (nonblank(LateCostp.CurncyCode)) then begin
    ftxt = ftxt & ", ";
    ftxt = ftxt & LateCostp.CurncyCode;
    ftxt = ftxt & " ";
    GetFullCurncyRateText(true,tstr,LateCostp.FrRate,LateCostp.ToRateB1,LateCostp.ToRateB2,LateCostp.BaseRate1,LateCostp.BaseRate2);
    ftxt = ftxt & tstr;
  end;
  gTRp.Comment = ftxt;
  TotSum = 0;
  VATSum = 0;
  firstVAT = "";
  dc1 = true;
  dc2 = false;
  extra = 0;
  PurSum = 0;
  PurSum2 = 0;
  stockacc = ARAccRec.StockAcc;
  if (nonblank(Locp.Code)) then begin
    if (nonblank(Locp.StockAcc)) then begin
      stockacc = Locp.StockAcc;
    end;
  end;
  if (GetAccName(stockacc,tstr,60)==false) then begin
    res = 2120;
    goto LMakeTransFromLateCost;
  end;
  rwcnt = MatRowCnt(LateCostp);
  for (i=0;i<rwcnt;i=i+1) begin
//###???    strpblank(stockacc); 
    MatRowGet(LateCostp,i,LateCostrw);
    if ((LateCostrw.stp==3) or (LateCostrw.ovst!=0)) then begin
      goto LSKIPROW;
    end;
    t = LateCostrw.UPrice; // Foreign Currency 
    rs2 = LateCostrw.Quant*t;
    rs2 = Round(rs2,DefaultRoundMode);
    INr.Code = LateCostrw.ArtCode;
    if (ReadFirstItem(LateCostrw.ArtCode,INr,true,true)==false) then begin
      INr.Objects = "";
      INr.ItemType = 0;
    end;
    if (INr.ItemType==1) then begin
      rs = MulRateToBase1(LateCostp.CurncyCode,rs2,frrate,to1,to2,br1,br2,DefaultCurRoundOff);
      extra = blankval;
      t = LateCostrw.ShipCost*LateCostrw.Quant;
      extra = extra + t;
      t = LateCostrw.RowCost1*LateCostrw.Quant;
      extra = extra + t;
      t = LateCostrw.RowCost2*LateCostrw.Quant;
      extra = extra + t;
      t = LateCostrw.RowCost3*LateCostrw.Quant;
      extra = extra + t;
      t = LateCostrw.RowCost4*LateCostrw.Quant;
      extra = extra + t;
      t = LateCostrw.RowCost5*LateCostrw.Quant;
      extra = extra + t;
      PUCalcPerc(rs,LateCostrw.Extra,t);
      t = t*LateCostrw.Quant;
      extra = extra + t;
      PUCalcPerc(rs,LateCostrw.CustomsCost,t);
      t = t*LateCostrw.Quant;
      extra = extra + t;
      res = GetLateCostStockAcc(CostAccRec.ItemGroupAccounts,LateCostrw.CostAcc,Locp.StockAcc,INr.Group,ARAccRec.StockAcc,stockacc,tstr);
      if (res!=0) then begin
        goto LMakeTransFromLateCost;
      end;
      if (nonblank(LateCostrw.Objects)) then begin
        rwobj = LateCostrw.Objects;
      end else begin
        rwobj = FindINObjects(INr.Objects,INr.Group);
      end;
      if ((APAccRec.VEObjonPurchAcc!=0) and (nonblank(LateCostp.Objects))) then begin
        if (nonblank(rwobj)) then begin
          rwobj = rwobj & ",";
        end;
        rwobj = rwobj & LateCostp.Objects;
      end;      
      AddEuroCurncyTrRow(gTRp,stockacc,rwobj,"",tstr,rs,true,dc1,TotSum,LateCostp.CurncyCode,frrate,to1,to2,br1,br2,rs2,blankval,-1,false,"");
      if (extra!=0) then begin
        t = blankval;
        AddEuroCurncyTrRow(gTRp,stockacc,rwobj,"",tstr,extra,true,dc1,TotSum,BaseCurRec.BaseCur1,frrate,to1,to2,br1,br2,t,blankval,-1,false,"");
      end;
      res = GetLateCostPurchControlAcc(CostAccRec.ItemGroupAccounts,LateCostrw.CredAcc,INr.Group,ARAccRec.PurchAcc,purchacc,tstr,LateCostp.VECode);
      if (res!=0) then begin
        goto LMakeTransFromLateCost;
      end;
      AddEuroCurncyTrRow(gTRp,purchacc,rwobj,"",tstr,rs,true,dc2,TotSum,LateCostp.CurncyCode,frrate,to1,to2,br1,br2,rs2,blankval,-1,false,"");
////new costacc      
      PurSum = PurSum + rs;
      PurSum = PurSum + extra;
    end;
LSKIPROW:;    
  end;
  rs = LateCostp.ExtraCost;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUExtraAcc,tstr,60)==false) then begin
      res = 2121;
      goto LMakeTransFromLateCost;
    end;
// The Cost, Freight and Custom are in LOCAL currency
    AddEuroTrRow(gTRp,ARAccRec.PUExtraAcc,"","",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  rs = LateCostp.ShipCost;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUFreightAcc,tstr,60)==false) then begin
      res = 2122;
      goto LMakeTransFromLateCost;
    end;
    AddEuroTrRow(gTRp,ARAccRec.PUFreightAcc,LateCostp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  rs = LateCostp.Cost1;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUCost1,tstr,60)==false) then begin
      res = 2123;
      goto LMakeTransFromLateCost;
    end;
    AddEuroTrRow(gTRp,ARAccRec.PUCost1,LateCostp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  rs = LateCostp.Cost2;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUCost2,tstr,60)==false) then begin
      res = 2124;
      goto LMakeTransFromLateCost;
    end;
    AddEuroTrRow(gTRp,ARAccRec.PUCost2,LateCostp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  rs = LateCostp.Cost3;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUCost3,tstr,60)==false) then begin
      res = 2125;
      goto LMakeTransFromLateCost;
    end;
    AddEuroTrRow(gTRp,ARAccRec.PUCost3,LateCostp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  rs = LateCostp.Cost4;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUCost4,tstr,60)==false) then begin
      res = 2126;
      goto LMakeTransFromLateCost;
    end;
    AddEuroTrRow(gTRp,ARAccRec.PUCost4,LateCostp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  rs = LateCostp.Cost5;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUCost5,tstr,60)==false) then begin
      res = 2127;
      goto LMakeTransFromLateCost;
    end;
    AddEuroTrRow(gTRp,ARAccRec.PUCost5,LateCostp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  rs = LateCostp.CustomsCost;
  if (rs!=0) then begin
    if (GetAccName(ARAccRec.PUCustomsAcc,tstr,60)==false) then begin
      res = 2128;
      goto LMakeTransFromLateCost;
    end;
    AddEuroTrRow(gTRp,ARAccRec.PUCustomsAcc,LateCostp.Objects,"",tstr,rs,br1,br2,false,dc2,TotSum,false,"","","");
    PurSum = PurSum - rs;
  end;
  res = TRVc_AddRoundOffRow(gTRp,br1,br2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromLateCost;
  end;
  res = 0;
LMakeTransFromLateCost:;
  MakeTransFromLateCost = res;
  RETURN; 
END;
