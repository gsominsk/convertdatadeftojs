external function Boolean DateTimeInsideDateTime(Date,Time,Date,Time,Date,Time,Date,Time);
external function string 20 FindJobCustomerCode(record JobVc);
external function Boolean SkipResTest(record ReservationStatusVc,Boolean);
external function Boolean CheckDblReserved(record JobVc);
external function val NumberOfStayDays(Date,Date,Time,Time,Integer);
external function Boolean IsCancelState(String);
external function LongInt DateDiff(Date,Date);

procedure AddToStayArray(LongInt sernr,string resstatus,Date frdat,Date todat,LongInt maxdays,string rescode,record ResTypeVc ResTyper,var Array Integer staying)
begin
  record JobVc Jobr;
  Date dt;
  Boolean foundf,testf;
  Integer i;
  Integer lenclass;
  Date blankd;
  Time startofday,endofday;
  record HotelBlock htr;
  Date fra,toa;
  LongInt DaysStay;
  record ReservationStatusVc RSr;
  Integer InvoiceBy;

  if (IsStandardProduct) then begin
    InvoiceBy = 1;
  end;
  if (nonblank(ResTyper.Code)) then begin
    InvoiceBy = ResTyper.InvoiceBy;
  end;
  BlockLoad(htr);  
  endofday = htr.CheckOut;
//  if (nonblanktime(htr.EndOfDay)) then begin
//    endofday = htr.EndOfDay;
//  end;
  startofday = htr.CheckIn;
//  if (nonblanktime(htr.StartNewDay)) then begin
//    startofday = htr.StartNewDay;
//  end;
  lenclass = 4;
LAddToCleanArray:;
  ResetLoop(Jobr);
  Jobr.ResCode = rescode;
  Jobr.LengthClass = lenclass;
  Jobr.TransDate = frdat;
  switch (lenclass) begin
    case 4: Jobr.TransDate = blankd;
    case 3: Jobr.TransDate = AddDay(Jobr.TransDate,-366);
    case 2: Jobr.TransDate = AddDay(Jobr.TransDate,-31);
    case 1: Jobr.TransDate = AddDay(Jobr.TransDate,-7);
    case 0: ;
  end;
  foundf = true;
  while (LoopKey("CalResStartTime",Jobr,3,foundf)) begin
    if (Jobr.TransDate>todat) then begin foundf = false; end;
    if (Jobr.ResCode!=rescode) then begin foundf = false; end;
    if (Jobr.LengthClass!=lenclass) then begin foundf = false; end;
    testf = true;
    if (foundf==false) then begin
      testf = false;
    end;
    if (Jobr.Type!=ResTyper.Code) then begin testf = false; end;
    if (IsCancelState(Jobr.ResStatus)) then begin
      testf = false;
    end;
    if (Jobr.SerNr==sernr) then begin
      testf = false;
    end;
    if (testf) then begin
      RSr.Code = Jobr.ResStatus;
      if (ReadFirstMain(RSr,1,true)) then begin
        if (SkipResTest(RSr,false)) then begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      DaysStay = NumberOfStayDays(Jobr.TransDate,Jobr.EndDate,Jobr.StartTime,Jobr.EndTime,InvoiceBy);
      fra = Jobr.TransDate;
      toa = AddDay(Jobr.TransDate,DaysStay);

/*      
      if (Jobr.StartTime<=startofday) then begin fra = AddDay(fra,-1); end;
      if (Jobr.EndTime<=endofday) then begin toa = AddDay(toa,-1); end;
      dt = frdat;
      for (i=1;i<=maxdays;i=i+1) begin
        if ((dt>=fra) and (dt<=toa)) then begin
          staying[i] = staying[i] + 1;
        end;
        dt = AddDay(dt,1);
      end;
*/      

      dt = frdat;
      for (i=1;i<=1;i=i+1) begin
        if (DateTimeInsideDateTime(fra,Jobr.StartTime,toa,Jobr.EndTime,
                                 dt,startofday,AddDAy(dt,1),endofday)) then begin
          staying[i] = staying[i] + 1;
        end;
        dt = AddDay(dt,1);
      end;

    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto LAddToCleanArray;end;
  return;
end;

global
function Boolean CheckOverbookings(record JobVc Jobr)
begin
  Boolean res;
  record ResVc Resr;
  record ResTypeVc ResTyper;
  Boolean foundf;
  LongInt maxdays,i;
  val occup,nrofres,prc;
  Array Integer staying;
  record HotelBlock htr;
  Date fra,toa,dt;
  LongInt DaysStay;
  Time startofday,endofday;
  record ReservationStatusVc RSr;
  Boolean testforob;
  Integer InvoiceBy;

  res = false;
  if (IsStandardProduct) then begin
    InvoiceBy = 1;
  end;
  testforob = true;
  RSr.Code = Jobr.ResStatus;
  if (ReadFirstMain(RSr,1,true)) then begin
    if (SkipResTest(RSr,false)) then begin
      testforob = false;
    end;
  end;
  if (testforob) then begin
  BlockLoad(htr);  
  endofday = htr.CheckOut;
//  if (nonblanktime(htr.EndOfDay)) then begin
//    endofday = htr.EndOfDay;
//  end;
  startofday = htr.CheckIn;
//  if (nonblanktime(htr.StartNewDay)) then begin
//    startofday = htr.StartNewDay;
//  end;
  maxdays = DateDiff(Jobr.EndDate,Jobr.TransDate) + 1;
  for (i=1;i<=maxdays;i=i+1) begin
    staying[i] = 0;
  end;
  nrofres = 0;
  ResTyper.Code = Jobr.Type;
  if (ReadFirstMain(ResTyper,1,true) or blank(Jobr.Type)) then begin
    if (nonblank(ResTyper.Code)) then begin
      InvoiceBy = ResTyper.InvoiceBy;
    end;
    if (blank(Jobr.ResCode)) then begin
      AddToStayArray(Jobr.SerNr,Jobr.ResStatus,Jobr.TransDate,Jobr.EndDate,maxdays,"",ResTyper,staying);
      foundf = true;
      Resr.Type = ResTyper.Code;
      while (LoopKey("Type",Resr,1,foundf)) begin
        if (Resr.Type!=ResTyper.Code) then begin foundf = false; end;
        if (foundf) then begin
          AddToStayArray(Jobr.SerNr,Jobr.ResStatus,Jobr.TransDate,Jobr.EndDate,maxdays,Resr.Code,ResTyper,staying);
          nrofres = nrofres + 1;
        end;
      end;
// Add this record as well
      DaysStay = NumberOfStayDays(Jobr.TransDate,Jobr.EndDate,Jobr.StartTime,Jobr.EndTime,InvoiceBy);
      fra = Jobr.TransDate;
      toa = AddDay(Jobr.TransDate,DaysStay);
      if (Jobr.StartTime<=startofday) then begin fra = AddDay(fra,-1); end;
      if (Jobr.EndTime<=endofday) then begin toa = AddDay(toa,-1); end;
      dt = Jobr.TransDate;
      for (i=1;i<=maxdays;i=i+1) begin
        if ((dt>=fra) and (dt<=toa)) then begin
          staying[i] = staying[i] + 1;
        end;
        dt = AddDay(dt,1);
      end;

      for (i=1;i<=maxdays;i=i+1) begin
        occup = staying[i];
/*
        if (i>1) then begin
          occup = occup + 1; // To include this reservation
        end;
*/
        prc = (100 * occup)/nrofres;

        if (prc>(ResTyper.OverbookPrc+100)) then begin
          res = true;
          i = maxdays;
        end;
      end;
    end;
  end;
  end;

  CheckOverbookings = res;
  return;
end;

global
function boolean CheckOnAgentRoomCollision(Record JobVc Jobr)
begin
  Record AgentRoomVc AgentRoomr;
  Boolean res;
  Date DueDate;
  
  res = false;
  AgentRoomr.ResCode = Jobr.ResCode;
  if readfirstmain(AgentRoomr,1,true) then begin
    if (AgentRoomr.CUCode <> Jobr.Source) then begin
      DueDate = AddDay(CurrentDate,AgentRoomr.DueDays);
      if (DueDate < Jobr.EndDate) then begin
        res = true;
      end;
    end;
  end;
  CheckOnAgentRoomCollision = res;
  return;
end;


global
procedure PasteDefaultRoomForAgent(var Record JobVc Jobr)
begin
  Record AgentRoomVc AgentRoomr;
  Record ResVc Resr;
  Boolean Cont;
  Record JobVc DestJobr;
  
  Cont = true;
  if blank(Jobr.ResCode) then begin
    if nonblank(Jobr.Source) then begin
      AgentRoomr.CUCode = Jobr.Source;
      while LoopKey("CUCode",AgentRoomr,1,Cont) begin
        if (AgentRoomr.CUCode <> Jobr.Source) then begin
          Cont = false;
        end else begin
          Resr.Code = AgentRoomr.ResCode;
          if readfirstmain(Resr,1,true) then begin
            if (Jobr.Type==Resr.Type) then begin
              RecordCopy(DestJobr,Jobr);
              DestJobr.ResCode = AgentRoomr.ResCode;
              if not CheckDblReserved(DestJobr) then begin
                Jobr.ResCode = AgentRoomr.ResCode;
                Jobr.LTxtCode = Resr.LTxtCode;
                Cont = false;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
function LongInt SimilarResExists(record JobVc r1)
begin
  LongInt res;
  Boolean Cond;
  record JobVc Jobr;
  record HotelBlock HBr;
  
  BlockLoad(HBr);
  if (HBr.SimilarResWarn!=0) then begin
    res = -1;
    Cond = true;
    Jobr.TransDate = r1.TransDate;
    while (LoopKey("TransDate",Jobr,1,Cond)) begin
      if (Jobr.TransDate <> r1.TransDate) then begin
        Cond = false;
      end else begin
        if (Jobr.Type == r1.Type) and (Jobr.SerNr!=r1.SerNr) then begin
          if (Jobr.Mother==-1) then begin
              if (FindJobCustomerCode(Jobr)==FindJobCustomerCode(r1)) then begin
                res = Jobr.SerNr;
                Cond = false;
              end;        
          end;
        end;
      end;
    end;
  end;
  SimilarResExists = res;
  return;
end;

global
function LongInt JobVcRecordInIndex(record JobVc Jobr,string indexname)
begin
  LongInt res;
  
  res = 1;
  switch (Jobr.ReservationType) begin 
    case kReservationTypeNormal:
      if (indexname=="GroupSerNr") then begin res = 0; end;
      if (indexname=="GroupResStatus") then begin res = 0; end;
      if (indexname=="GroupCUCode") then begin res = 0; end;
      if (indexname=="GroupCUName") then begin res = 0; end;
      if (indexname=="GroupMotherKey") then begin res = 0; end;
      if (indexname=="GroupRefStr") then begin res = 0; end;
/*      
what ? 
      if (Jobr.Mother>0) then begin
        if (indexname=="NormalCUCode") then begin res = 0; end;
        if (indexname=="NormalCUName") then begin res = 0; end;
        if (indexname=="NormalSerNr") then begin res = 0; end;
        if (indexname=="NormalMotherKey") then begin res = 0; end;
        if (indexname=="NormalTransDate") then begin res = 0; end;
        if (indexname=="NormalResStatus") then begin res = 0; end;
        if (indexname=="NormalRefStr") then begin res = 0; end;
      end;
*/      
    case kReservationTypeGroup:
      if (indexname=="ResCode") then begin res = 0; end;
      if (indexname=="ResStatus") then begin res = 0; end;

      if (indexname=="NormalCUCode") then begin res = 0; end;
      if (indexname=="NormalCUName") then begin res = 0; end;
      if (indexname=="NormalSerNr") then begin res = 0; end;
      if (indexname=="NormalMotherKey") then begin res = 0; end;
      if (indexname=="NormalTransDate") then begin res = 0; end;
      if (indexname=="NormalResStatus") then begin res = 0; end;
      if (indexname=="NormalRefStr") then begin res = 0; end;
  end;
  JobVcRecordInIndex = res;
  return;
end;
