external function Boolean FindTheUser(var record UserVc);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Boolean AcceptanceRulesExists(Integer,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure TBBUSumup(var record TBBUVc);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetSalesGroup(string,var string);

global
function LongInt TBBUVcRecordDefaults(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ProjectBlock PRRec;
  val fr,to1,to2,br1,br2;
  string 255 tstr;
      
  BlockLoad(PRRec);
  TBBUr.SalesMan = CurrentUser;
  GetSalesGroup(TBBUr.SalesMan,tstr);
  TBBUr.SalesGroup = tstr;
  TBBUr.BudMaterial = PRRec.BudMaterial;
  TBBUr.BudStocked = PRRec.BudStocked;
  TBBUr.BudTime = PRRec.BudTime;
  TBBUr.BudOther = PRRec.BudOther;
  tstr = TBBUr.CurncyCode;
  GetFullCurncyRate(tstr,TBBUr.TransDate,fr,to1,to2,br1,br2);
  TBBUr.CurncyCode = tstr;
  TBBUr.FrRate = fr;
  TBBUr.ToRateB1 = to1; 
  TBBUr.ToRateB2 = to2;
  TBBUr.BaseRate1 = br1;
  TBBUr.BaseRate2 = br2;    
  TBBUVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt TBBUVcRecordDuplicate(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ProjectBlock PRRec;
  Integer rwcnt,i;
  row TBBUVc TBBUrw;
  string 255 tstr;
      
  TBBUr.SalesMan = CurrentUser;
  GetSalesGroup(TBBUr.SalesMan,tstr);
  TBBUr.SalesGroup = tstr;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    TBBUrw.Invoiced = -1;
    MatRowPut(TBBUr,i,TBBUrw);
  end;
  TBBUr.AcceptanceBy = "";
  TBBUr.AcceptanceFYI = "";
  TBBUVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt TBBUVcRecordCheck(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res,errcode;
  record INVc INr;
  record PRVc PRr;
  record UserVc Userr;
  record CUVc CUr;
  record SalesGroupVc SalesGroupr;
  row TBBUVc TBBUrw;
  Integer insertmode,updatemode;
  Integer i,rwcnt,orwcnt;
  string 255 tstr;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  PRr.Code = TBBUr.PRCode;
  if (ReadFirstMain(PRr,1,true)==false) then begin
    RecordCheckError(1232,"",-1,"PRCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;  
  if (PRr.Terminated!=0) then begin
    RecordCheckError(1236,"",-1,"PRCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;
  if (TBBUr.CustCode!=PRr.CustCode) then begin
    RecordCheckError(20172,"",-1,"CustCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;
  if (TBBUr.CurncyCode!=PRr.CurncyCode) then begin
    RecordCheckError(20573,"",-1,"PRCode");      
    res = -1;
    goto LTBBUVcRecordCheck;
  end;
  if (nonblank(TBBUr.PRLeader)) then begin
    Userr.Code = TBBUr.PRLeader;
    if (FindTheUser(Userr)==false) then begin
      RecordCheckError(20170,"",-1,"PRLeader");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.SalesMan)) then begin
    Userr.Code = TBBUr.SalesMan;
    if (FindTheUser(Userr)==false) then begin
      RecordCheckError(20170,"",-1,"SalesMan");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.SalesGroup)) then begin
    SalesGroupr.SGroupCode = TBBUr.SalesGroup;
    if (ReadFirstMain(SalesGroupr,1,true)==false) then begin
      RecordCheckError(20171,"",-1,"SalesGroup");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.CustCode)) then begin
    CUr.Code = TBBUr.CustCode;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"CustCode");      
      res = -1;
      goto LTBBUVcRecordCheck;
    end;
  end;
  if (nonblank(TBBUr.CurncyCode)) then begin
    errcode = CheckRates(TBBUr.CurncyCode,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,tstr);      
      res = -1; 
      goto LTBBUVcRecordCheck;
    end;      
  end;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
     switch (TBBUrw.stp) begin
       case 1:
         if (nonblank(TBBUrw.ArtCode)) then begin
           INr.Code = TBBUrw.ArtCode;
           if (ReadFirstMain(INr,1,true)==false) then begin
             RecordCheckError(1233,"",i,"ArtCode");      
             res = -1;
             goto LTBBUVcRecordCheck;
           end;
         end else begin
           if (TBBUrw.Qty!=0) then begin
             if (blank(TBBUrw.TimeClass)) then begin
               RecordCheckError(1233,"",i,"ArtCode");      
               res = -1;
               goto LTBBUVcRecordCheck;
             end;
           end;
        end;
        if (nonblank(TBBUrw.PRStageSign)) then begin
          Userr.Code = TBBUrw.PRStageSign;
          if (ReadFirstMain(Userr,1,true)==false) then begin
            RecordCheckError(20170," " & TBBUrw.PRStageSign, i, "PRStageSign");   
            res = -1; 
            goto LTBBUVcRecordCheck;
          end;
        end;        
     end;
  end;
LTBBUVcRecordCheck:;
  TBBUVcRecordCheck = res;
  RETURN;
END;

procedure TBBUVcConvertB1ToB2Date(var record TBBUVc TBBUr)
BEGIN
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;

  GetFullCurncyRate(curncy,TBBUr.TransDate,fr,to1,to2,br1,br2);
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    B1ToB2Val(TBBUrw.Price,br1,br2,t);
    TBBUrw.Price = t;
    B1ToB2Val(TBBUrw.Sum,br1,br2,t);
    TBBUrw.Sum = t;
    B1ToB2Val(TBBUrw.Cost,br1,br2,t);
    TBBUrw.Cost = t;
    B1ToB2Val(TBBUrw.GP,br1,br2,t);
    TBBUrw.GP = t;
    MatRowPut(TBBUr,i,TBBUrw);
  end;
  TBBUSumup(TBBUr);
  RETURN;
END;

procedure TBBUVcConvertB1ToB2(var record TBBUVc TBBUr,string curncy,val fr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  val t;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);

  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    B1ToB2Val(TBBUrw.Price,br1,br2,t);
    TBBUrw.Price = t;
    B1ToB2Val(TBBUrw.Sum,br1,br2,t);
    TBBUrw.Sum = t;
    B1ToB2Val(TBBUrw.Cost,br1,br2,t);
    TBBUrw.Cost = t;
    B1ToB2Val(TBBUrw.GP,br1,br2,t);
    TBBUrw.GP = t;
    MatRowPut(TBBUr,i,TBBUrw);
  end;
  RETURN;
END;

global
function LongInt TBBUVcRecordImport(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ConvMasterBlock cvm;
  record PRVc PRr;
  Boolean gBase1ToBase2,gToDualBase;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;
  record BaseCurBlock BCb;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    fr = TBBUr.FrRate;
    to1 = TBBUr.ToRateB1;
    to2 = TBBUr.ToRateB2;
    br1 = TBBUr.BaseRate1;
    br2 = TBBUr.BaseRate2;
    t = TBBUr.TotSum;
    curncy = TBBUr.CurncyCode;
    ConvertToDualBase(curncy,TBBUr.TransDate,fr,to1,to2,br1,br2,t,true);
    TBBUr.CurncyCode = curncy;
    TBBUr.FrRate = fr;
    TBBUr.ToRateB1 = to1;
    TBBUr.ToRateB2 = to2;
    TBBUr.BaseRate1 = br1;
    TBBUr.BaseRate2 = br2;
    TBBUr.TotSum = t;
  end;
  if (gBase1ToBase2) then begin
    BlockLoad(BCb);
    if (blank(TBBUr.CurncyCode)) then begin
      TBBUr.CurncyCode = BCb.BaseCur2;
    end;
    if (blank(TBBUr.CurncyCode)) then begin
      TBBUVcConvertB1ToB2Date(TBBUr);
    end else begin  
      if (TBBUr.CurncyCode==BCb.BaseCur2) then begin
        to1 = TBBUr.ToRateB1;
        to2 = TBBUr.ToRateB2;
        br1 = TBBUr.BaseRate1;
        br2 = TBBUr.BaseRate2;
        TBBUVcConvertB1ToB2(TBBUr,TBBUr.CurncyCode,TBBUr.FrRate,to1,to2,br1,br2);
        TBBUr.ToRateB1 = to1;
        TBBUr.ToRateB2 = to2;
        TBBUr.BaseRate1 = br1;
        TBBUr.BaseRate2 = br2;
      end;
    end;
  end;
   PRr.Code = TBBUr.PRCode;
   if (ReadFirstMain(PRr,1,true)) then begin
     TBBUr.Members = PRr.Members;
   end;  

  TBBUVcRecordImport = res;
  RETURN;
END;

global
updating function LongInt TBBUVcRecordSave(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  TBBUVcRecordSave = res; 
  return;
end;

global
updating function LongInt TBBUVcRecordUpdate(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  TBBUVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt TBBUVcRecordUpdateAfter(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  TBBUVcRecordUpdateAfter = res; 
  return;
end;

global
function LongInt TBBUVcRecordRemoveTest(var record TBBUVc TBBUr,record TBBUVc TBBU2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;

  res = 1;
  BlockLoad(DBLockRec);
  if (TBBUr.TransDate<DBLockRec.DeleteBeforeDate) then begin
    goto LTBBUVcRecordRemoveTest;
  end;
  actnr = 1;
  while (ReadRecordLink(TBBUr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (long3>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LTBBUVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;
LTBBUVcRecordRemoveTest:;
  TBBUVcRecordRemoveTest = res; 
  return;
end;
