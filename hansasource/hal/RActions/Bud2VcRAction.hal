external function Integer CheckObjs(string,string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure B1ToB2StrVal(string,val,val,var string);

global
function LongInt Bud2VcRecordDefaults(var record Bud2Vc Bud2r,record Bud2Vc Bud22r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Date blankd;
  Integer i;
  row Bud2Vc Bud2rw;

//  Bud2r.Bud1Proc = blankval;
//  for (i=0;i<18;i=i+1) begin
//    ClearRow(Bud2r,Bud2rw,1);
//    Bud2rw.BudDate = blankd;
//    Bud2rw.DefStr = "";
//    Bud2rw.sval = blankval;
//    MatRowPut(Bud2r,i,Bud2rw);
//  end;  
  Bud2VcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt Bud2VcRecordDuplicate(var record Bud2Vc Bud2r,record Bud2Vc Bud22r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;

  res = 0;
  Bud2r.OKFlag = 0;
  Bud2VcRecordDuplicate = res;      
  RETURN;
END;

global
function LongInt Bud2VcRecordImport(var record Bud2Vc Bud2r,record Bud2Vc Bud22r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  val t,fr,to1,to2,br1,br2;
  string 255 tstr;
  string 5 crncycode;
  Integer i,rwcnt;
  row Bud2Vc Bud2rw;
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    GetFullCurncyRate(crncycode,CurrentDate,fr,to1,to2,br1,br2);
    B1ToB2Val(Bud2r.BudSum,br1,br2,t);
    Bud2r.BudSum = t;
    rwcnt = MatRowCnt(Bud2r);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Bud2r,i,Bud2rw);
      B1ToB2Val(Bud2rw.sval,br1,br2,t);
      Bud2rw.sval = t;
      B1ToB2StrVal(Bud2rw.DefStr,br1,br2,tstr);
      Bud2rw.DefStr = tstr;      
      MatRowPut(Bud2r,i,Bud2rw);
    end;
  end;
  Bud2VcRecordImport = res;
  RETURN;
END;

global
updating function LongInt Bud2VcRecordCheck(var record Bud2Vc Bud2r,record Bud2Vc Bud22r,LongInt stat,LongInt long4)
BEGIN
  row Bud2Vc Bud2rw;
  LongInt res;
  Integer i,rwcnt;
  Integer errcode;
  string 255 errstr;
  record AccVc Accr;

  res = 0;
  Accr.AccNumber = Bud2r.AccNumber;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    RecordCheckError(1007,"",i,"AccNumber");      
    res = -1; 
    goto LBud2VcRecordCheck;
  end;
  rwcnt = MatRowCnt(Bud2r);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Bud2r,i,Bud2rw);
    if (DateInRange(Bud2rw.BudDate,Bud2r.StartDate,Bud2r.EndDate)==false) then begin
      RecordCheckError(20851,"",i,"BudDate");      
      res = -1; 
      goto LBud2VcRecordCheck;
    end;
  end;
  if (Bud2r.OKFlag==1) and (Bud22r.OKFlag==0) then begin
    if (UserCanAction("RevBudOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"RevBudOK"),-1,"AccNumber");      
      res = -1;
      goto LBud2VcRecordCheck;
    end;
  end;
  if (nonblank(Bud2r.Objects)) then begin
    errcode = CheckObjs("",Bud2r.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1; 
      goto LBud2VcRecordCheck;
    end;
  end;
  
LBud2VcRecordCheck:;
  Bud2VcRecordCheck = res;
  RETURN;
END;

global
function LongInt Bud2VcRecordRemoveTest(var record Bud2Vc Bud2r,record Bud2Vc Bud22r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (Bud2r.StartDate<=DBLockRec.DeleteBeforeDate) then begin
    if ((blankdate(DBLockRec.TRLock)) or (Bud2r.StartDate>DBLockRec.TRLock)) then begin
      res = 1;
      goto LBud2VcRecordRemoveTest;
    end;
  end;
  if (Bud2r.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LBud2VcRecordRemoveTest:;
  Bud2VcRecordRemoveTest = res; 
  RETURN;
END;
