external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external function string 5 AddVATCodeToVATAccRows(string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetVATCodeAccounts(string,var string,var string,var string,var string);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure SetupVATBase(var record SMVc,var Integer);
external function Boolean TransInFiscal(Date);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure ExtractObj(string,var Integer,var string);
external procedure NormalizeObjstr(var string);
external procedure NoDupObjs(string,var string);
external procedure AutoObj(var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

procedure AddEuroCurncyNomARTrRowSpec(record TRVc TRp,string acc,string objs,string vatcod,string comm,val valv,Boolean accf,
             Boolean dcflag,var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,
             val curval,val nomval,string CompCode,LongInt SerNr,Integer Typ,val qp,Date duep,LongInt insertrownr,Boolean negamf)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt,typeofcur;
  Integer oldstyle;
  Boolean found,curflag,rowfoundf;
  string 255 objects,comment,tstr;
  string 20 localcurncy;
  val b1sv,b2sv,csv;
  val temp,base2val;
  val localcurval,blankv;
  record CYBlock TrTRec;

  BlockLoad(TrTRec);
  curflag = false;
  if (curncy<>"") then begin
    localcurncy = curncy;
  end else begin
  end;  
  if (curval<>-1) then begin//NIL
    localcurval = curval;
  end else begin
  end;  
  typeofcur = TypeOfCurncy(localcurncy,oldstyle);   
  if (typeofcur==0) then begin// Foreign Curncy 
    if (curncy<>"") then begin curflag = true; end;
    base2val = MulRateToBase2(localcurncy,localcurval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
  end;
  if (typeofcur==1) then begin// Base Curncy 1 
    if (valv==0) then begin
      base2val = localcurval;
    end else begin
      base2val = MulRateToBase2(localcurncy,valv,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    end;  
  end;
  if (typeofcur==2) then begin// Base Curncy 2 
      base2val = localcurval;
  end;
  if (typeofcur==2) then begin// Blank Currency, old style 
  end;
//  if ((valv==0) and (base2val==0) and (localcurval==0)) then begin goto LAddEuroCurncyNomARTrRowSpec; end; // zeros are needed as well as well
  if (blank(acc)) then begin goto LAddEuroCurncyNomARTrRowSpec; end;
  if (oldstyle>0) then begin base2val = blankv; end;
  if (objs<>"") then begin
    NoDupObjs(objs,objects);
    AutoObj(objects);
  end;
  if (comm<>"") then begin
    comment = comm;
  end;
  found = false;
  rwcnt = MatRowCnt(TRp);
  if (CompCode<>"") then begin 
    i = rwcnt;
    goto L15;
  end;
  if (accf) then begin
    for (i=rwcnt-1; i>=0;i=i-1) begin
      MatRowGet(TRp,i,TRrw);
      if (curflag) then begin
        if (TRrw.Curncy<>localcurncy) then begin goto L11; end;
        if (frrate<>-1) then begin //NIL
          if (TRrw.FrRate<>frrate) then begin goto L11; end;
        end;  
        if (torate1<>-1) then begin //NIL
          if (TRrw.ToRateB1<>torate1) then begin goto L11; end;
        end;  
        if (torate2<>-1) then begin //NIL
          if (TRrw.ToRateB2<>torate2) then begin goto L11; end;
        end;  
      end;
      if ((acc==TRrw.AccNumber) and
          ((objects==TRrw.Objects) or (objs=="NIL")) and
          ((comment==TRrw.Comment) or (comm=="NIL")) and
          (vatcod==TRrw.VATCode) and (TRrw.ovst==0)) then begin 
        rowfoundf = true;
        goto L22TR; 
      end;
L11:;
    end;
    i = rwcnt;
  end else begin
    i = rwcnt;
  end;  
L15:;
  ClearRow(TRp,TRrw,1);
  TRrw.stp = 1;
  TRrw.ovst = 0;
  TRrw.AccNumber = acc;
  TRrw.Objects = objects;
  TRrw.Comment = comment;
  TRrw.VATCode = vatcod;
  if (curncy<>"") then begin
    TRrw.Curncy = localcurncy;
  end else begin
  end;  
  if ((baserate1==-1) or (baserate2==-1)) then begin//NIL
    tstr = TRrw.Curncy;
    GetFullCurncyRate(tstr,TRp.TransDate,temp,temp,temp,TRrw.BaseRate1,TRrw.BaseRate2);
    TRrw.Curncy = tstr;
  end else begin
    TRrw.BaseRate1 = baserate1;
    TRrw.BaseRate2 = baserate2;
  end;
  if (curflag) then begin
    if (frrate<>-1) then begin TRrw.FrRate = frrate; end;//NIL
    if (torate1<>-1) then begin TRrw.ToRateB1 = torate1; end;//NIL
    if (torate2<>-1) then begin TRrw.ToRateB2 = torate2; end;//NIL
  end;
  if (CompCode<>"") then begin
    TRrw.Typ = Typ;
    TRrw.CompCode = CompCode;
    TRrw.SerNr = SerNr;
    if (nonblankdate(duep)) then begin TRrw.DueDate = duep; end;
  end else begin
    TRrw.Typ = 0;
    TRrw.CompCode = "";
    TRrw.SerNr = -1;
  end;
L22TR:;
  if (qp<>-1) then begin
    TRrw.Qty = TRrw.Qty + qp;
  end;
  b1sv = TRrw.DebVal - TRrw.CredVal;
  b2sv = TRrw.DebVal2 - TRrw.CredVal2;
  csv = TRrw.CurDebVal - TRrw.CurCredVal;
  if (dcflag) then begin
    totsump = totsump + valv;
    b1sv = b1sv + valv;
    b2sv = b2sv + base2val;
    csv = csv + localcurval;
  end else begin
    totsump = totsump - valv;
    b1sv = b1sv - valv;
    b2sv = b2sv - base2val;
    csv = csv - localcurval;
  end;  
  if (b1sv<>0) then begin
    if (TrTRec.NegativeAmounts!=0) and (negamf) then begin
      if (b1sv>0) then begin
        TRrw.CredVal = -b1sv;
        TRrw.CredVal2 = -b2sv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
      end else begin
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
        TRrw.DebVal = b1sv;
        TRrw.DebVal2 = b2sv;
      end;
    end else begin
      if (b1sv>0) then begin
        TRrw.DebVal = b1sv;
        TRrw.DebVal2 = b2sv;
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
      end else begin
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
        TRrw.CredVal = -b1sv;
        TRrw.CredVal2 = -b2sv;
      end;
    end;  
  end else begin // A Base2 trans only 

    if (TrTRec.NegativeAmounts!=0) and (negamf) then begin
      if (b2sv>=0) then begin
        TRrw.CredVal = -b1sv;
        TRrw.CredVal2 = -b2sv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
      end else begin
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
        TRrw.DebVal = b1sv;
        TRrw.DebVal2 = b2sv;
      end;
    end else begin
      if (b2sv>=0) then begin
        TRrw.DebVal = b1sv;
        TRrw.DebVal2 = b2sv;
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
      end else begin
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
        TRrw.CredVal = -b1sv;
        TRrw.CredVal2 = -b2sv;
      end;
    end;      
  end;
  if (curflag) then begin
  
    if (TrTRec.NegativeAmounts!=0) and (negamf) then begin
      if (csv>=0) then begin
        TRrw.CurCredVal = -csv;
        TRrw.CurDebVal = blankv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
// Special rounding when a Currency value is there, NONE of the basecurrencies CAN be zero 
        if (oldstyle==0) then begin
          if (TRrw.CredVal==0) then begin TRrw.CredVal = -0.01; end;;
          if (TRrw.CredVal==0) then begin TRrw.CredVal2 = -0.01; end;
        end;
      end else begin
        TRrw.CurCredVal = blankv;
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
        TRrw.CurDebVal = csv;
        if (oldstyle==0) then begin
          if (TRrw.DebVal==0) then begin TRrw.DebVal = -0.01; end;
          if (TRrw.DebVal2==0) then begin TRrw.DebVal2 = -0.01; end;
        end;
      end;
    end else begin
      if (csv>=0) then begin
        TRrw.CurDebVal = csv;
        TRrw.CurCredVal = blankv;
        TRrw.CredVal = blankv;
        TRrw.CredVal2 = blankv;
// Special rounding when a Currency value is there, NONE of the basecurrencies CAN be zero 
        if (oldstyle==0) then begin
          if (TRrw.DebVal==0) then begin TRrw.DebVal = 0.01; end;;
          if (TRrw.DebVal2==0) then begin TRrw.DebVal2 = 0.01; end;
        end;
      end else begin
        TRrw.CurDebVal = blankv;
        TRrw.DebVal = blankv;
        TRrw.DebVal2 = blankv;
        TRrw.CurCredVal = -csv;
        if (oldstyle==0) then begin
          if (TRrw.CredVal==0) then begin TRrw.CredVal = 0.01; end;
          if (TRrw.CredVal2==0) then begin TRrw.CredVal2 = 0.01; end;
        end;
      end;
    end;      
  end;
  if (oldstyle>0) then begin
    if (TRrw.DebVal2==0)  then begin TRrw.DebVal2 = blankv; end;
    if (TRrw.CredVal2==0) then begin TRrw.CredVal2 = blankv; end;
  end;
  if (nomval<>-1) then begin//NIL
    if (dcflag) then begin
      TRrw.NomVal = TRrw.NomVal + nomval;
    end else begin
      TRrw.NomVal = TRrw.NomVal - nomval;
    end;
  end;
  if (insertrownr!=-1) then begin    
    if (rowfoundf) then begin
      MatRowPut(TRp,i,TRrw);
    end else begin
      MatRowInsert(TRp,insertrownr,TRrw);
    end;
  end else begin
    MatRowPut(TRp,i,TRrw);
  end;
LAddEuroCurncyNomARTrRowSpec:;
  RETURN;
END;

procedure AddEuroCurncyNomTrRowSpec(record TRVc TRp,string acc,string objs,string vatcod,string comm,val valv,Boolean accf,
           Boolean dcflag,var val totsump,string curncy,val frrate,val torate1,val torate2,val baserate1,val baserate2,
           val curval,val nomval,val qp,LongInt insertrownr,Boolean negamf)
BEGIN
  Date nild;
  
  AddEuroCurncyNomARTrRowSpec(TRp,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curncy,frrate,torate1,torate2,baserate1,baserate2,
                          curval,nomval,"",-1,0,qp,nild,insertrownr,negamf);
  RETURN;                        
END;

procedure AddEuroTrRowSpec(record TRVc TRr,string acc,string objs,string vatcod,string comm,val valv,
                       val baserate1,val baserate2,Boolean accf,Boolean dcflag,var val totsump,Boolean negamf)
BEGIN  
  string 255 curncy;
  val nilv;
  
  nilv = -1;
  AddEuroCurncyNomTrRowSpec(TRr,acc,objs,vatcod,comm,valv,accf,dcflag,totsump,curncy,nilv,nilv,nilv,baserate1,baserate2,nilv,nilv,nilv,-1,negamf);
  return;
end;

global
function Integer MakeTransFromVATIV(record TRVc gTRp,record VATIVVc VATIVp,Boolean rpt)
 begin
  Integer res;
  record TRGenBlock TRGenRec;
  record AccBlock ARb;
  record TRVc lTRr;
  record SMVc VATr;
  row SMVc VATrw;
  row VATIVVc VATIVrw;
  val TotSum,VATSum;
  val vatv,tax1val,vatbase,v;
  Integer i,rwcnt,vcrwcnt;
  string 10 svatacc,pvatacc,corsvatacc,corpvatacc;
  string 255 tstr,objstr;
    
  res = 1085;
  BlockLoad(ARb);
  BlockLoad(TRGenRec);
  RecordNew(gTRp); 
  if (rpt==false) then begin
    if (TRGenRec.IVGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromVATIV;
    end;
  end;
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.IVStartDate)) and
       (VATIVp.TransDate<TRGenRec.IVStartDate)) then begin //## only if old not done 
       res = 0;
       goto LMakeTransFromVATIV;
    end;
  end;  
  if (true) then begin
    gTRp.IntYc = VATIVYc;
    gTRp.Number = VATIVp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromVATIV;
    end;  
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = VATIVp.TransDate;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromVATIV;
  end;
  gTRp.Comment = VATIVp.InvComment;
  if (VATIVp.IVNr>0) then begin
    gTRp.RefStr = USetStr(1150) & "." & VATIVp.IVNr;
  end;
  if (VATIVp.IPNr>0) then begin
    gTRp.RefStr = USetStr(1151) & "." & VATIVp.IPNr;
  end;
  SetupVATBase(VATr,vcrwcnt);  
  rwcnt = MatRowCnt(VATIVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATIVp,i,VATIVrw);
/*    
roundoff problems with negative values
    if (VATIVp.InvType!=kInvoiceTypeCredit and VATIVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
      v = VATIVrw.Sum;
    end else begin
      v = -VATIVrw.Sum;
    end;
*/
    v = VATIVrw.Sum;
    if (VATIVrw.stp==kInvoiceRowTypeCorrection) then begin
      v = -v;
    end;    
    if (blank(VATIVrw.RvrsVATCode)) then begin
      AddVATBase(VATr,VATIVrw.VATCode,v,blankval,vcrwcnt,VATIVp.InclVAT,VATIVp.NoTAXonVAT);      
    end;
  end;
  if (ARb.VATUseObj!=0) then begin
    objstr = VATIVp.Objects;
  end;
  for (i=0;i<vcrwcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (VATrw.DebVal!=0) then begin
      GetVATCodeAccounts(VATrw.VATCode,svatacc,pvatacc,corsvatacc,corpvatacc);
      if ((nonblank(svatacc)) and (nonblank(corsvatacc))) then begin
        MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,tax1val,VATIVp.InclVAT,VATIVp.NoTAXonVAT);
        if (vatv!=0) then begin
          vatbase = VATrw.DebVal;
          vatv = MulRateToBase1(VATIVp.CurncyCode,vatv,VATIVp.FrRate,VATIVp.ToRateB1,VATIVp.ToRateB2,VATIVp.BaseRate1,VATIVp.BaseRate2,DefaultCurRoundOff);
          tax1val = MulRateToBase1(VATIVp.CurncyCode,tax1val,VATIVp.FrRate,VATIVp.ToRateB1,VATIVp.ToRateB2,VATIVp.BaseRate1,VATIVp.BaseRate2,DefaultCurRoundOff);
          vatbase = MulRateToBase1(VATIVp.CurncyCode,vatbase,VATIVp.FrRate,VATIVp.ToRateB1,VATIVp.ToRateB2,VATIVp.BaseRate1,VATIVp.BaseRate2,DefaultCurRoundOff);
          if (VATIVp.InvType==kInvoiceTypeCredit or VATIVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
            vatbase = -vatbase;
            vatv = -vatv;
            tax1val = -tax1val;
            vatbase = -vatbase;
          end;
          if (VATIVp.InclVAT!=0) then begin
            vatbase = vatbase - vatv;
            vatbase = vatbase - tax1val;
          end;
          if (GetAccName(corsvatacc,tstr,60)==false) then begin 
            res = 1902;
            goto LMakeTransFromVATIV;
          end;
          AddEuroTrRowSpec(gTRp,corsvatacc,objstr,AddVATCodeToVATAccRows(VATrw.VATCode),tstr,vatv,VATIVp.BaseRate1,VATIVp.BaseRate2,true,true,TotSum,VATIVp.InvType==kInvoiceTypeCredit or VATIVp.InvType==kInvoiceTypeCreditSpecialSales);    
          if (GetAccName(svatacc,tstr,60)==false) then begin 
            res = 1902;
            goto LMakeTransFromVATIV;
          end;
          AddEuroTrRowSpec(gTRp,svatacc,objstr,AddVATCodeToVATAccRows(VATrw.VATCode),tstr,vatv,VATIVp.BaseRate1,VATIVp.BaseRate2,true,false,TotSum,VATIVp.InvType==kInvoiceTypeCredit or VATIVp.InvType==kInvoiceTypeCreditSpecialSales);
        end;
      end;
    end;
  end;
  if (TotSum!=0) then begin
    res = TRVc_AddRoundOffRow(gTRp,VATIVp.BaseRate1,VATIVp.BaseRate2,"",false,false,false,TotSum,TotSum);
    if (res!=0) then begin
      goto LMakeTransFromVATIV;
    end;
  end;  
  CalcVATBaseVAT(VATr,VATIVp.InclVAT,VATIVp.NoTAXonVAT,vcrwcnt,VATSum,tax1val);
  res = 0;
LMakeTransFromVATIV:;
  MakeTransFromVATIV = res;
  return;
end;

global
function Integer MakeTransFromVATVI(record TRVc gTRp,record VATVIVc VATVIp,Boolean rpt)
BEGIN
  Integer res;
  record TRGenBlock TRGenRec;
  record AccBlock ARb;
  record APAccBlock APb;
  record TRVc lTRr;
  record SMVc VATr;
  row SMVc VATrw;
  row VATVIVc VATVIrw;
  val TotSum,VATSum;
  val vatv,tax1val,vatbase;
  val svatval;
  Integer i,rwcnt,vcrwcnt;
  string 10 svatacc,pvatacc,corsvatacc,corpvatacc;
  string 255 tstr,firstpvatacc,firstcorpvatacc,firstpvatcode,objstr;
  Boolean dc1,dc2;
    
  res = 1085;
  BlockLoad(APb);
  BlockLoad(ARb);
  BlockLoad(TRGenRec);
  RecordNew(gTRp); 
  if (rpt==false) then begin
    if (TRGenRec.VIGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromVATVI;
    end;
  end;
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.VIStartDate)) and
       (VATVIp.TransDate<TRGenRec.VIStartDate)) then begin //## only if old not done 
       res = 0;
       goto LMakeTransFromVATVI;
    end;
  end;  
  if (true) then begin
    gTRp.IntYc = VATVIYc;
    gTRp.Number = VATVIp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromVATVI;
    end;  
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = VATVIp.TransDate;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromVATVI;
  end;
  dc1 = false;
  dc2 = true;
  if (VATVIp.InvType==kInvoiceTypeCredit or VATVIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    dc1 = true;
    dc2 = false;
  end;
  gTRp.Comment = VATVIp.Comment;
  if (VATVIp.VINr>0) then begin
    gTRp.RefStr = USetStr(1152) & "." & VATVIp.VINr;
  end;
  if (VATVIp.OPNr>0) then begin
    gTRp.RefStr = USetStr(1153) & "." & VATVIp.OPNr;
  end;
  SetupVATBase(VATr,vcrwcnt);  
  rwcnt = MatRowCnt(VATVIp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(VATVIp,i,VATVIrw);
    AddVATBase(VATr,VATVIrw.VATCode,VATVIrw.Sum,blankval,vcrwcnt,0,VATVIp.NoTAXonVAT);      
  end;
  if (APb.VATUseObj!=0) then begin
    objstr = VATVIp.Objects;
  end;
  for (i=0;i<vcrwcnt;i=i+1) begin
    MatRowGet(VATr,i,VATrw);
    if (VATrw.DebVal!=0) then begin
      GetVATCodeAccounts(VATrw.VATCode,svatacc,pvatacc,corsvatacc,corpvatacc);
      if ((nonblank(pvatacc)) and (nonblank(corpvatacc))) then begin
        MulVATIV(VATrw.VATCode,VATrw.DebVal,vatv,tax1val,0,0);
        vatbase = VATrw.DebVal;
        vatv = MulRateToBase1(VATVIp.CurncyCode,vatv,VATVIp.FrRate,VATVIp.ToRateB1,VATVIp.ToRateB2,VATVIp.BaseRate1,VATVIp.BaseRate2,DefaultCurRoundOff);
//          tax1val = MulRateToBase1(VATVIp.CurncyCode,tax1val,VATVIp.FrRate,VATVIp.ToRateB1,VATVIp.ToRateB2,VATVIp.BaseRate1,VATVIp.BaseRate2,DefaultCurRoundOff);
        vatbase = MulRateToBase1(VATVIp.CurncyCode,vatbase,VATVIp.FrRate,VATVIp.ToRateB1,VATVIp.ToRateB2,VATVIp.BaseRate1,VATVIp.BaseRate2,DefaultCurRoundOff);
        if (false) then begin//VATVIp.InclVAT!=0
          vatbase = vatbase - vatv;
//            vatbase = vatbase - tax1val;
        end;
        if (GetAccName(corpvatacc,tstr,60)==false) then begin 
          res = 1902;
          goto LMakeTransFromVATVI;
        end;
        AddEuroTrRowSpec(gTRp,corpvatacc,objstr,AddVATCodeToVATAccRows(VATrw.VATCode),tstr,vatv,VATVIp.BaseRate1,VATVIp.BaseRate2,true,dc1,TotSum,VATVIp.InvType==kInvoiceTypeCredit or VATVIp.InvType==kInvoiceTypeCreditSpecialSales);    
        if (GetAccName(pvatacc,tstr,60)==false) then begin 
          res = 1902;
          goto LMakeTransFromVATVI;
        end;
        AddEuroTrRowSpec(gTRp,pvatacc,objstr,AddVATCodeToVATAccRows(VATrw.VATCode),tstr,vatv,VATVIp.BaseRate1,VATVIp.BaseRate2,true,dc2,TotSum,VATVIp.InvType==kInvoiceTypeCredit or VATVIp.InvType==kInvoiceTypeCreditSpecialSales);    
        svatval = svatval + vatv;
        if (blank(firstpvatacc)) then begin
          firstpvatacc = pvatacc;
          firstpvatcode = VATrw.VATCode;
        end;
        if (blank(firstcorpvatacc)) then begin
          firstcorpvatacc = corpvatacc;
        end;
      end;
    end;
  end;
  if (VATVIp.VATVal!=blankval) then begin
    vatv = MulRateToBase1(VATVIp.CurncyCode,VATVIp.VATVal,VATVIp.FrRate,VATVIp.ToRateB1,VATVIp.ToRateB2,VATVIp.BaseRate1,VATVIp.BaseRate2,DefaultCurRoundOff);
    vatv = vatv - svatval;
    if (GetAccName(firstcorpvatacc,tstr,60)==false) then begin 
      res = 1902;          
      goto LMakeTransFromVATVI;
    end;
    AddEuroTrRow(gTRp,firstcorpvatacc,"","",tstr,vatv,VATVIp.BaseRate1,VATVIp.BaseRate2,true,false,TotSum,false,"","","");
    if (GetAccName(firstpvatacc,tstr,60)==false) then begin 
      res = 1902;          
      goto LMakeTransFromVATVI;
    end;  
    AddEuroTrRow(gTRp,firstpvatacc,"",AddVATCodeToVATAccRows(firstpvatcode),tstr,vatv,VATVIp.BaseRate1,VATVIp.BaseRate2,true,true,TotSum,false,"","","");
  end;
  if (TotSum!=0) then begin
    res = TRVc_AddRoundOffRow(gTRp,VATVIp.BaseRate1,VATVIp.BaseRate2,"",false,false,false,TotSum,TotSum);
    if (res!=0) then begin
      goto LMakeTransFromVATVI;
    end;
  end;  
  CalcVATBaseVAT(VATr,1,VATVIp.NoTAXonVAT,vcrwcnt,VATSum,tax1val);
  res = 0;
LMakeTransFromVATVI:;
  MakeTransFromVATVI = res;
  RETURN;
END;
