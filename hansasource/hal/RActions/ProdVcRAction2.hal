external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external procedure WarnFutureDate(Boolean,Date);
external function roundmode SetRoundModeD(Integer);
external procedure ProdFillFIFO(record ProdVc,Boolean);
external updating procedure UpdateProdOut(record ProdVc,Boolean,Boolean);
external function LongInt DateDiff(Date,Date);
external procedure GetCurUser(var record UserVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external function LongInt TimeToMinutes(Time);

procedure ProdVcConvertB1ToB2Date(record ProdVc Prodp)
BEGIN
  val fr,to1,to2,br1,br2,t;
  string 20 curncy;
  Integer i,rwcnt;
  row ProdVc Prodrw;

  GetFullCurncyRate(curncy,Prodp.ProdDate,fr,to1,to2,br1,br2);
  rwcnt = MatRowCnt(Prodp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodp,i,Prodrw);
    B1ToB2ValRM(Prodrw.ItemCost,br1,br2,t,GetCostRoundModeRB);
    Prodrw.ItemCost = t;
    B1ToB2ValRM(Prodrw.ExtraCost,br1,br2,t,GetCostRoundModeRB);
    Prodrw.ExtraCost = t;
    MatRowPut(Prodp,i,Prodrw);
  end;
  RETURN;
END;

global
updating function LongInt ProdVcRecordImport(var record ProdVc Prodr,record ProdVc Prod2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 5 crncycode;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;

  if (Prodr.DoneFlag==1) then begin
    Prodr.PRStatusFlag = 3;
  end;
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
     ProdVcConvertB1ToB2Date(Prodr);
  end;
  ProdVcRecordImport = res;
  RETURN;
END;

global
function LongInt ProdVcRecordRemoveTest(var record ProdVc Prodr,record ProdVc Prod2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (Prodr.PRStatusFlag!=0) then begin
    if (Prodr.ProdDate>DBLockRec.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LProdVcRecordRemoveTest;
    end;
  end;
  if (((Prodr.PRStatusFlag>1) and (Prodr.PRStatusFlag<4)) or (Prodr.PRStatusFlag==5)) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end; 
LProdVcRecordRemoveTest:;
  ProdVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt ProdVcRecordDefaults(var record ProdVc Prodr,record ProdVc Prod2r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;
  Time blankt;
  record UserVc USr;
  record ProdSettingsBlock PSb;
  
  BlockLoad(PSb);
  res = 0;
  Prodr.SerNr = -1;
  Prodr.ProdDate = CurrentDate;
  if (SingleUserMode) then begin
    Prodr.SerNr = NextSerNr("ProdVc",Prodr.ProdDate,-1,false,"");
  end;
  Prodr.DoneFlag = 0;
  Prodr.PRStatusFlag = 0;
  Prodr.FinnishedFlag = 0;
  Prodr.Qty = 1;
  GetCurUser(USr);  
  Prodr.Location = USr.Location;
  Prodr.StartTime = blankt;
  Prodr.EndTime = blankt;
  Prodr.BreakTime = blankt;
  Prodr.ProdOrder = -1;
  Prodr.OrderNr = -1;
  Prodr.TotalProdOrdQty = BlankVal;
  Prodr.RowsHoldActualQty = PSb.ProdRowsHoldActualQty;
  ProdVcRecordDefaults = res;
  RETURN;
END;

global
function LongInt ProdVcRecordDuplicate(var record ProdVc Prodr,record ProdVc Prod2r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;
  Time bt;
  record ProdSettingsBlock PSb;
  row ProdVc Prodrw;
  Integer i,rwcnt;

  BlockLoad(PSb);
  res = 0;
  Prodr.SerNr = -1;
  Prodr.DoneFlag = 0;
  Prodr.PRStatusFlag = 0;
  Prodr.FinnishedFlag = 0;
  Prodr.LocOKNr = blankval;
  Prodr.ProdOrder = -1;
  Prodr.OrderNr = -1;
  Prodr.StartTime = bt;
  Prodr.EndTime = bt;
  if (SingleUserMode) then begin
    Prodr.SerNr = NextSerNr("ProdVc",Prodr.ProdDate,-1,false,"");
  end;  
  Prodr.RowsHoldActualQty = PSb.ProdRowsHoldActualQty;
  rwcnt = MatRowCnt(Prodr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodr,i,Prodrw);
    Prodrw.OrgProdRow = -1;
    Prodrw.OrgProdFIFORowVal = blankval;
    MatRowPut(Prodr,i,Prodrw);
  end;
  WarnFutureDate(true,Prodr.ProdDate);
  ProdVcRecordDuplicate = res;      
  RETURN;
END;

global
updating procedure ProdCalcItemCost(var record ProdVc Prodr,record ProdVc Prod2r,Boolean updatef)
begin
  Integer mchrow,outrow,rwcnt,i;
  row ProdVc Prodrr;
  val sum,cost,sixty;
  record ProdSettingsBlock psb;
  record AT2UnitVc AT2Unitr;
  record INVc INr;
  val idlemin,runmin;
  Boolean updatecost;
  
  BlockLoad(psb);
  
  updatecost = false;
  if (psb.AutoCalcCostf!=0) and (nonblank(psb.MachineCostItem)) then begin
    updatecost = true;
    if (updatef) then begin
      updatecost = false;
      if ((Prodr.StartTime!=Prod2r.StartTime) or 
          (Prodr.EndTime!=Prod2r.EndTime) or 
          (Prodr.StartDate!=Prod2r.StartDate) or 
          (Prodr.ProdDate!=Prod2r.ProdDate) or 
          (Prodr.Qty!=Prod2r.Qty) or
          (Prodr.FixAssCode!=Prod2r.FixAssCode)) then begin
        updatecost = true;
      end;
    end;
  end;
  if (updatecost) then begin
    rwcnt = MatRowCnt(Prodr);
    outrow = -1;
    mchrow = rwcnt;
    sum = 0.0;
  
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(Prodr,i,Prodrr);
      if (Prodrr.InQty>0) then begin
        if (Prodrr.Item==psb.MachineCostItem) then begin
          mchrow = i;
        end else begin
          sum = sum + Prodrr.InQty * (Prodrr.ItemCost + Prodrr.ExtraCost);
        end;
      end else begin
        outrow = i;
      end;
      if (Prodrr.OutQty>0) then begin
        sum = sum + Prodrr.OutQty * Prodrr.ExtraCost;
      end;
    end;
    ClearRow(Prodr,Prodrr,1);
    AT2Unitr.InventoryNr = Prodr.FixAssCode;
    if (ReadFirstMain(AT2Unitr,1,true)) then begin
      sixty = 60;
      idlemin = TimeToMinutes(Prodr.TotalIdleTime);
      runmin = TimeToMinutes(Prodr.EndTime) - TimeToMinutes(Prodr.StartTime);
    
      if (NonBlankDate(Prodr.StartDate) and NonBlankDate(Prodr.ProdDate)) then begin
        runmin = runmin + 60 * 24 * DateDiff(Prodr.ProdDate,Prodr.StartDate);
      end;
    
      cost = 0;
      if (AT2Unitr.IdleCost>0) then begin
        cost = cost + (Round(AT2Unitr.IdleCost / sixty,SetRoundModeD(2))) * (idlemin/Prodr.TotalProdOrdQty);
      end;
      if (runmin>0) then begin
        if (AT2Unitr.RunCost>0) then begin
          cost = cost + ((AT2Unitr.RunCost * runmin)/sixty);
        end;
      end;
      if (cost>0) then begin
			  switch (Prodr.RowsHoldActualQty) begin
			    case 1: ;
			    otherwise cost = cost / Prodr.Qty;
			  end;              
      end;
      INr.Code = psb.MachineCostItem;
      if (ReadFirstMain(INr,1,true)) then begin end;
      Prodrr.Item = psb.MachineCostItem;
      Prodrr.Comment = INr.Name;
      Prodrr.InQty = 1;
      Prodrr.ItemCost = cost;
      sum = sum + cost;
      MatRowPut(Prodr,mchrow,Prodrr);
    end;
    
    if (outrow>-1) then begin
      MatRowGet(Prodr,outrow,Prodrr);
      sum = sum / Prodrr.OutQty;
      Prodrr.ItemCost = sum;
      MatRowPut(Prodr,outrow,Prodrr);
      ProdFillFIFO(Prodr,true);
    end;
  end;
  return;
end;

procedure GetITProdAccs(string itcode,var string compusageacc,var string prodcontrol)
BEGIN
  record ITVc ITr;
 
  compusageacc = "";
  prodcontrol = "";
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    compusageacc = ITr.CompUsage;
    prodcontrol = ITr.ProdControl;
  end;  
  RETURN;
END;

global
procedure GetProductionAccounts(Integer ItemGroupAccounts,string incompusage,string itcode,string ProdCompUsage,string ProdControl,var string compusage,var string prodcont)
BEGIN
  compusage = "";
  if (ItemGroupAccounts!=0) then begin
    GetITProdAccs(itcode,compusage,prodcont);
  end;

  if (blank(compusage)) then begin
    compusage = incompusage;
  end;
  if (blank(compusage)) then begin
    compusage = ProdCompUsage;
  end;
  if (blank(prodcont)) then begin
    prodcont = ProdControl;
  end;
  RETURN;
END;

global
updating function LongInt ProdVcRecordRemove(var record ProdVc Prodr,record ProdVc Prod2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  UpdateProdOut(Prodr,false,true);
//  UpdateProdPlan(Prodr); ? 
  ProdVcRecordRemove = res;
  RETURN;
END;

global
updating function LongInt AutoProdVcRecordCheck(var record AutoProdVc AutoProdr,record AutoProdVc AutoProd2r,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  record AutoProdVc locAutoProdr;

  res = 0;
  if (AutoProdr.Default==1) then begin
    RecordCopy(locAutoProdr,AutoProdr);
    if (ReadFirstKey("Default",locAutoProdr,2,true)) then begin
      if ((locAutoProdr.FromItemCode!=AutoProd2r.FromItemCode) and (locAutoProdr.ToItemCode==AutoProd2r.ToItemCode)) then begin
        RecordCheckError(20266,"",-1,"ToItemCode");      
        res = -1;
        goto LAutoProdVcRecordCheck;
      end;
    end;
  end;
LAutoProdVcRecordCheck:;
  AutoProdVcRecordCheck = res;
  RETURN;
END;

global
function LongInt AutoProdVcRecordDuplicate(var record AutoProdVc AutoProdr,record AutoProdVc AutoProd2r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;

  AutoProdr.Default = 0;
  AutoProdVcRecordDuplicate = res;      
  RETURN;
END;

