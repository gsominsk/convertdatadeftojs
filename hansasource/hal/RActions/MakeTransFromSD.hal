external function Integer CheckObjs(string,string,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure GetProjectWIPAcc(record PRAccBlock,string,var string,var string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function roundmode DefaultRoundMode();
external procedure GetConsigmentStockAcc(string,string,var string);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external procedure CombineStructure(var record SHVc);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 255 FindINObjects(string,string);
external procedure AddTransAutoTransRows(record TRVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetITStockAcc(string,var string);
external procedure GetITCostAcc(string,var string);
external procedure AddEuroTrRowType(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer);
external procedure AddEuroTrRowTypeQty(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer,val);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean TransInFiscal(Date);

function Integer SDVc_PostWIP(record TRVc gTRp,record PRAccBlock PRAb,record SDVc SDp,row SDVc SDrw,Boolean dc1,
                       Boolean dc2,val frrate,val torate1,val torate2,val baserate1,val baserate2,
                       var val totsum)
begin
  Integer res;
  record PRVc PRr;
  string 255 wipacc,balacc;
  string 255 tstr,taccnumber,prcode;
  Boolean accf;
  val rs;

  prcode = SDrw.PRCodeRow;
  if (blank(prcode)) then begin prcode = SDp.PRCode; end;
  if (blank(prcode)) then begin goto LSDVc_PostWIP; end;
  PRr.Code = prcode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (PRr.UseWIP==1) then begin
      GetProjectWIPAcc(PRAb,SDrw.ArtCode,wipacc,balacc);      
      rs = SDrw.FIFORowVal;
      if (GetAccName(wipacc,tstr,60)==false) then  begin
        res = 1909;      
        goto LSDVc_PostWIP;
      end;
      accf = CheckTTRPerRow("SDVc",wipacc,"",dc2,taccnumber,0);
      AddEuroTrRow(gTRp,wipacc,"","",tstr,rs,baserate1,baserate2,accf,dc1,totsum,false,taccnumber,"","");

      if (GetAccName(balacc,tstr,60)==false) then  begin
        res = 1910;      
        goto LSDVc_PostWIP;
      end;
      accf = CheckTTRPerRow("SDVc",balacc,"",dc2,taccnumber,0);
      AddEuroTrRow(gTRp,balacc,"","",tstr,rs,baserate1,baserate2,accf,dc2,totsum,false,taccnumber,"","");
    end;
  end;
LSDVc_PostWIP:;  
  SDVc_PostWIP = res;
  return;
end;

global
procedure GetSDStockAcc(Integer ItemGroupAccounts,string rowlocation,string location,string MainStock,string itgroup,string arstockacc,var string res,var string locobjstr)
BEGIN
  record LocationVc LocRec;

  res = "";
  locobjstr = "";
  if (nonblank(rowlocation)) then begin
    LocRec.Code = rowlocation;
  end else begin
    LocRec.Code = location;
  end;
  if (blank(LocRec.Code)) then begin
    LocRec.Code = MainStock;
  end;
  if (ReadFirstMain(LocRec,1,true)) then begin
    if (nonblank(LocRec.StockAcc)) then begin
      res = LocRec.StockAcc;
    end;    
  end;
  locobjstr = LocRec.Objects;
  if (nonblank(res)) then begin
    goto LGetSDStockAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITStockAcc(itgroup,res);
    if (nonblank(res)) then begin
      goto LGetSDStockAcc;
    end;
  end;
  res = arstockacc;
  if (nonblank(res)) then begin
    goto LGetSDStockAcc;
  end;
LGetSDStockAcc:;  
  RETURN;
END;

procedure GetSDCostAcc(Integer ItemGroupAccounts,string sdcostacc,string sdrowcostacc,string incostacc,string itgroup,var string res)
BEGIN
  res = "";
  res = sdrowcostacc;
  if (nonblank(res)) then begin
    goto LGetSDCostAcc;
  end;
  res = sdcostacc;
  if (nonblank(res)) then begin
    goto LGetSDCostAcc;
  end;
  res = incostacc;
  if (nonblank(res)) then begin
    goto LGetSDCostAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITCostAcc(itgroup,res);
    if (nonblank(res)) then begin
      goto LGetSDCostAcc;
    end;
  end;
LGetSDCostAcc:;
  RETURN;
END;

global
function Integer AddSDCostRow(record TRVc gTRp,record MainStockBlock MainStockRec,record CostAccBlock CAb,record AccBlock ARAccRec,record INVc INr,
                              val baserate1,val baserate2,
                              record SDVc SDp,row SDVc SDrw,Boolean dc1,Boolean dc2,Boolean sumupf,var val TotSum,
                              var string errorfield)
BEGIN
  Integer res;
  val t1,rs;
  string 255 objstr,tstr,errstr;
  string 10 sdcostacc,stockacc,taccnumber,locobjstr;
  
  t1 = SDrw.Qty*SDrw.FIFO;
  t1 = Round(t1,DefaultRoundMode);
  rs = rs + t1;
  objstr = "";
  if (INr.ItemType!=1) then begin 
    if (CAb.CostAccForNonStocked==0) then begin
      goto LAddSDCostRow;
    end;
  end;
  tstr = INr.Name;
  if (nonblank(SDp.Objects)) then begin
    objstr = AddObjectToObjectList(objstr,SDp.Objects);
  end;
  if (nonblank(SDrw.Objects)) then begin
    objstr = AddObjectToObjectList(objstr,SDrw.Objects);
  end;
  GetSDCostAcc(CAb.ItemGroupAccounts,SDp.CostAcc,SDrw.CostAcc,INr.CostAcc,INr.Group,sdcostacc);
  if (GetAccName(sdcostacc,tstr,60)==false) then begin
    res = 1947;
    errorfield = "CostAcc";
    goto LAddSDCostRow;
  end;
  if (CheckTTRPerRow("SDVc",sdcostacc,objstr,dc1,taccnumber,1)) then begin end;      
  AddEuroTrRowType(gTRp,sdcostacc,objstr,"",tstr,t1,baserate1,baserate2,sumupf,dc1,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);

  GetSDStockAcc(CAb.ItemGroupAccounts,SDrw.Location,SDp.Location,MainStockRec.MainStock,INr.Group,ARAccRec.StockAcc,stockacc,locobjstr);
  GetConsigmentStockAcc(SDrw.ArtCode,SDrw.SerialNr,stockacc);
  if (GetAccName(stockacc,tstr,60)==false) then begin
    res = 2120;
    goto LAddSDCostRow;
  end;
  if (CAb.ObjOnStock==0) then begin objstr = ""; end;
  objstr = AddObjectToObjectList(objstr,locobjstr);
  res = CheckObjs(stockacc,objstr,errstr);
  if (res!=0) then begin
    goto LAddSDCostRow;
  end;
  if (CheckTTRPerRow("SDVc",stockacc,objstr,dc2,taccnumber,1)) then begin end;      
  AddEuroTrRowTypeQty(gTRp,stockacc,objstr,"",tstr,t1,baserate1,baserate2,sumupf,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock,SDrw.Qty);
LAddSDCostRow:;      
  AddSDCostRow = res;      
  RETURN;
END;

global
function Integer MakeTransFromSD(record TRVc gTRp,record SDVc SDp,Boolean rpt,var string errorfield,var Integer errorrow)
BEGIN
  Integer res;
  record MainStockBlock MainStockRec;
  record CostAccBlock CAb;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  record LocationVc LocRec;
  record INVc INr;
  record ITVc ITr;
  record SHVc recSHr;
  record TRVc locTRr;
  row SDVc SDrw;
  row SHVc SH2rw;
  Integer rwcnt,rwcnt2;
  Integer i,j,error;
  string 255 ftxt,tstr;
  string 255 firstVAT;
  val t1,VATSum,TotSum;
  val t,rs,structrs;
  val baserate1,baserate2,temp;
  Boolean dc1,dc2;
  Boolean isstruct,infound,sumupf;
  string 10 shstockacc,itshstockacc,sdcostacc,stockacc,locobjstr;
  string 5 orobjstr;
  string 255 objstr,taccnumber;
  string 10 location;
  string 20 curncy;
  transaction string 255 gRuniningMaint; 
  record PRAccBlock PRAb;
  
  BlockLoad(MainStockRec);
  BlockLoad(CAb);
  BlockLoad(ARAccRec);
  BlockLoad(TRGenRec);
  BlockLoad(PRAb);  
  sumupf = true;
  errorfield = "SerNr";
  errorrow = -1;
  if (CAb.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  location = SDp.Location;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.SDGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromSD;
    end;
  end;  
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.SDStartDate)) and
        (SDp.TransDate<TRGenRec.SDStartDate)) then begin
      res = 0;
      goto LMakeTransFromSD;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = SDYc;
    gTRp.Number = SDp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    locTRr.IntYc = gTRp.IntYc;
    locTRr.Number = gTRp.Number;
    if (ReadFirstMain(locTRr,0,true)) then begin
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":  ;
        otherwise
          res = 1032;
          goto LMakeTransFromSD;
      end;
    end; 
  end;
  objstr = "";
  orobjstr = "";  
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = SDp.TransDate;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      res = 1075;
      goto LMakeTransFromSD;
    end;
  end;
  curncy = "";
  GetFullCurncyRate(curncy,gTRp.TransDate,temp,temp,temp,baserate1,baserate2);
  ftxt = SDp.Comment;
  gTRp.Comment = ftxt;
  TotSum = 0;
  VATSum = 0;
  firstVAT = "";
  dc1 = true;
  dc2 = false;
  rwcnt = MatRowCnt(SDp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDp,i,SDrw);
    sdcostacc = SDp.CostAcc;
    if (nonblank(SDrw.CostAcc)) then begin
      sdcostacc = SDrw.CostAcc;
    end;
    INr.Code = SDrw.ArtCode;
    if (ReadFirstItem(SDrw.ArtCode,INr,true,true)==false) then begin
      INr.Objects = "";
      tstr = "";
    end;  
    isstruct = false;
    if (INr.ItemType==kItemTypeStructured) then begin
      isstruct = ExpandStructItem(SDrw.ArtCode,SDrw.Recepy,SDrw.Qty,recSHr);
    end;
    if (isstruct==false) then begin
      error = AddSDCostRow(gTRp,MainStockRec,CAb,ARAccRec,INr,baserate1,baserate2,SDp,SDrw,dc1,dc2,sumupf,TotSum,errorfield);
      if (error!=0) then begin
        errorrow = i;
        res = error;
        goto LMakeTransFromSD;
      end;
    end else begin
      CombineStructure(recSHr);
      recSHr.Location = SDp.Location;
      rwcnt2 = MatRowCnt(recSHr);
      for (j=0;j<rwcnt2;j=j+1) begin
        MatRowGet(recSHr,j,SH2rw);
        SH2rw.Location = SDrw.Location;
        MatRowPut(recSHr,j,SH2rw);
      end;
      for (j=0;j<rwcnt2;j=j+1) begin
        MatRowGet(recSHr,j,SH2rw);    
        t1 = FindCostPrice(SH2rw.ArtCode,location,SH2rw.SerialNr,SH2rw.Ship,0,false);
        structrs = structrs + t1;
        INr.Code = SH2rw.ArtCode;
        if (ReadFirstMain(INr,1,true)==false) then begin
          INr.Objects = "";
        end;
        objstr = FindINObjects(INr.Objects,INr.Group);
        if (nonblank(SDp.Objects)) then begin
          objstr = AddObjectToObjectList(objstr,SDp.Objects);
        end;
        if (nonblank(SDrw.Objects)) then begin
          objstr = AddObjectToObjectList(objstr,SDrw.Objects);
        end;
        if (GetAccName(sdcostacc,tstr,60)==false) then begin
          res = 2120;
          goto LMakeTransFromSD;
        end;
        if (CheckTTRPerRow("SDVc",sdcostacc,objstr,dc1,taccnumber,1)) then begin end;      
        AddEuroTrRowType(gTRp,sdcostacc,objstr,"",tstr,t1,baserate1,baserate2,sumupf,dc1,TotSum,false,taccnumber,"","",kTransactionRowTypeStock);
        GetSDStockAcc(CAb.ItemGroupAccounts,SH2rw.Location,SDp.Location,MainStockRec.MainStock,INr.Group,ARAccRec.StockAcc,stockacc,locobjstr);
        GetConsigmentStockAcc(SDrw.ArtCode,SDrw.SerialNr,stockacc);
        if (GetAccName(stockacc,tstr,60)==false) then begin
          res = 2120;
          goto LMakeTransFromSD;
        end;
        objstr = AddObjectToObjectList(objstr,locobjstr);
        res = CheckObjs(stockacc,objstr,tstr);
        if (res!=0) then begin
          goto LMakeTransFromSD;
        end;

        if (CAb.ObjOnStock==0) then begin objstr = ""; end;
        if (CheckTTRPerRow("SDVc",stockacc,objstr,dc2,taccnumber,1)) then begin end;      
        AddEuroTrRowTypeQty(gTRp,stockacc,objstr,"",tstr,t1,baserate1,baserate2,sumupf,dc2,TotSum,false,taccnumber,"","",kTransactionRowTypeStock,SDrw.Qty);
        structrs = structrs - t1;        
      end;
    end;
  end;
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(SDp,i,SDrw);
    res = SDVc_PostWIP(gTRp,PRAb,SDp,SDrw,dc1,dc2,blankval,blankval,blankval,baserate1,baserate2,totsum);
    if (res!=0) then begin
      goto LMakeTransFromSD;
    end;
  end;
  res = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromSD;
  end;
  AddTransAutoTransRows(gTRp);
LMakeTransFromSD:;
  MakeTransFromSD = res;
  RETURN;
END;
