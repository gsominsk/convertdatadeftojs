external function Boolean HasEInvoicing();

global
updating function LongInt EInvoiceQueVcRecordCheck(record EInvoiceQueVc EInvoiceQuep,record EInvoiceQueVc EInvoiceQue2p,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (EInvoiceQuep.SerNr<=0) then begin
    EInvoiceQuep.SerNr = NextSerNr("EInvoiceQueVc",EInvoiceQuep.CreationDate,-1,false,"");
  end;
LEInvoiceQueVcRecordCheck:;
  EInvoiceQueVcRecordCheck = res;
  return;
end;

global
function LongInt EInvoiceQueVcRecordRemoveTest(var record EInvoiceQueVc EInvoiceQuer,record EInvoiceQueVc EInvoiceQue2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  res = 0;
  EInvoiceQueVcRecordRemoveTest = res;
  return;
end;

global
procedure SetEInvoiceQueFlags(var record EInvoiceQueVc EInvoiceQuer)
begin
 //18; //checkMarkChar
 //asc("+"); 
 //asc("-"); 
  return;
end;

global
updating function LongInt EInvoiceQueVcRecordSaveAfter(var record EInvoiceQueVc EIQr,var record EInvoiceQueVc EIQ2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (IsStandardProduct) then begin
    if (HasEInvoicing and EIQr.RecVersionNr==0) then begin
      record LicensesVc Lr;
      record LicensesVc oldLr;
      
      Lr.Function = "HasEInvoicing";
      if (ReadFirstKey("ActiveFunction",Lr,1,true)) then begin
        RecordCopy(oldLr,Lr);
        Lr.UsedQty = Lr.UsedQty + 1;
        RecordUpdate(oldLr,Lr,true);
      end;
    end;
  end;
  EInvoiceQueVcRecordSaveAfter = res;
  return;
end;