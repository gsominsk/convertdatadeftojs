external function LongInt ValidIPDataForVATLaw(Integer,record IPVc,Integer,var LongInt,var string,var LongInt,var string);
external function string 255 FindNextIPVcOfficialSerialNrFromCurrentSerie(var record IPVc);
external function string 255 UpdateOfficialSerNrSerie(Integer,Integer,Integer,string,boolean);
external function Boolean IsDigit(string);
external function string 255 StripCharacter(string,string);
external function Boolean IsCapitalLetter(string); 
external function Integer InString2(string,string);
external procedure FindNextIPVcOfficialSerialNr(var record IPVc);
external function Boolean OfficialSerialNrCanBeBlank(string,string,Integer,string,string,string,Date,Integer,Integer);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function Boolean CheckIPVatCodeAcc(var LongInt,var string,string);
external function Boolean HasIntegratedNL();
external function Boolean HasSLIntegratedWithNL();
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function Boolean POSBalanceExistsAfterThis(Date,Time,string,string);
external function Boolean IsSessionOpen(string,string,Date,Time);
external function Boolean RequireOpenSession(string);
external function Boolean IPTestCredMan(record IPVc,Integer,var Integer);
external updating procedure AddTTrans_IPVc(record TRVc,record IPVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Integer MakeTransFromIP(var record TRVc,var record IPVc,Boolean,var Integer,var string);
external function Integer IsUnOKAllowed_IPVc(record IPVc);
external procedure AddIPRoundOffToRows(var record IPVc,record AccBlock);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Integer GetCheck(string,string,LongInt,var string,var string,var string,var val,var Date,var Date);
external function Integer CheckObjs(string,string,var string);
external function Boolean GetPMRow(string,var row PMBlock);
external function Boolean CheckCurncy(string,string);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean CurncyCodeRegistered(string);
external function Boolean GetPMgentrans(string);
external function Integer PMCheckType(string,var string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestIPVc(LongInt,Date,var Boolean);
external function Integer CashSerNumberTest(string,val,string,LongInt,var Boolean);

function Boolean CheckIfPrepaymentError(record ARPayVc ARPayr,row IPVc IPrw,Date td)
BEGIN
  Boolean res;
  record BaseCurBlock BCb;
  val ipfr,ipto1,ipto2,ipbr1,ipbr2;
  val ppfr,ppto1,ppto2,ppbr1,ppbr2;
  val preprate,iprate;
 
  if (ARPayr.CurncyCode!=IPrw.InvCurncy) then begin
    res = true;
  end;
  if (!res) then begin
    BlockLoad(BCb);
    if (IPrw.BankCurncy==BCb.BaseCur1) then begin
      preprate = ARPayr.RVal/ARPayr.BookRVal;
      iprate = IPrw.InvVal/IPrw.BankVal;
      if (iprate!=preprate) then begin
        res = true;
      end;
    end else begin
/*    
      GetFullCurncyRate(IPrw.InvCurncy,td,ipfr,ipto1,ipto2,ipbr1,ipbr2);
      GetFullCurncyRate(ARPayr.CurncyCode,ARPayr.PayDate,ppfr,ppto1,ppto2,ppbr1,ppbr2);
      if (ipto1!=ppto1) or (ipto2!=ppto2) then begin
        res = true;
      end;
*/
      preprate = ARPayr.BookRVal/ARPayr.RVal;
      iprate = IPrw.ToRateB1BankVal;
      if (iprate==0) then begin
        GetFullCurncyRate(IPrw.InvCurncy,td,ipfr,ipto1,ipto2,ipbr1,ipbr2);
        iprate = ipto1/ipfr;
      end;
      if (iprate!=preprate) then begin
        res = true;
      end;
    end;
  end;
  CheckIfPrepaymentError = res;
  RETURN;
END;

global
updating function LongInt IPVcRecordCheck(var record IPVc IPp,record IPVc IP2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;  
  record DownPayBlock DownPayRec;
  record MainCLBlock MainCLRec;
  record AccBlock ARb;
  record SRBlock SRRec;
  record ARPayHistVc ARHistr;
  record IPrsVc IPrsr;
  record ARPayVc ARPayr;
  record ARVc ARr;
  record IVVc IVr;
  record CUVc CUr;
  record ORVc ORp;
  record IPVc lIPr;
  record CheckVc Checkr;  
  row IPVc IPrw,IP2rw;
  LongInt oldnr,dummyl,error,errorrow;
  Integer i,j,rwcnt,cashres;
  val amount,temp;
  Boolean testf,gentrans,transf,check,unokf,ivfound;
  Integer cht,gchk;
  string 255 tstr,pmobjstr,errstr,wrofacc;
  Integer nrofprepay;
  string 2 pmmode;
  string 10 pmacc;
  Integer insertmode,updatemode,errcode;
  Boolean iprsf,tmpf,TestOfficialSerialf;
  Date td,regdate;
  record TRVc gTRp;
  row PMBlock PMrw;
  Record CouponVc Couponr;
  Integer koef;
  record ORVc ORr;
  Integer errrownr;
  string 255 errfield,oldOfficialSerNr,tstr2,c;
  record BaseCurBlock BCb;
  record IVOfficialSerBlock IOSTr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  
  res = 0;
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update    
  oldnr = IPp.SerNr;
  oldOfficialSerNr = IPp.OfficialSerNr;
  if (IPp.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (IP2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_IPVc(IPp);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LIPVcRecordCheck;
  end;
  BlockLoad(SRRec);
  BlockLoad(ARb);
  BlockLoad(MainCLRec);
  BlockLoad(DownPayRec);
  BlockLoad(BCb);
  nrofprepay = 0;
  gentrans = true;
  if (IPp.SerNr<=0) then begin
    IPp.SerNr = NextSerNr("IPVc",IPp.TransDate,SRRec.LastPayNr,false,"");
  end;
  if (stat==updatemode) then begin
    if (IPp.SerNr<=0) and (IP2p.OKFlag==0) then begin
      IPp.SerNr = IP2p.SerNr;
    end;
  end;  
  if (stat==insertmode) then begin
    lIPr.SerNr = IPp.SerNr;
    if (ReadFirstMain(lIPr,1,true)) then begin
      RecordCheckError(1103,"",-1,"SerNr");      
      res = -1; 
      goto LIPVcRecordCheck;    
    end;
  end;
  cashres = CashSerNumberTest(IPp.PayMode,IPp.CurPayVal,"IPVc",IPp.SerNr,gentrans);
  if (cashres==99) then begin 
    res = -1; 
    goto LIPVcRecordCheck; 
  end;
  if (cashres==12) then begin 
    goto L12;
  end;
  if (SerNrTestIPVc(IPp.SerNr,IPp.TransDate,gentrans)==false) then begin
    if (check) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
      res = -1; 
      goto LIPVcRecordCheck;
    end;
  end;
L12:;
  if (check==false) then begin
    goto LIPVcRecordCheck_GenTrans;
  end;
  if (Date2Test("IPVc",IPp.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LIPVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,IPp.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LIPVcRecordCheck;
  end;
  if (blank(IPp.PayMode)) then begin
    RecordCheckError(1101,"",-1,"PayMode");      
    res = -1; 
    goto LIPVcRecordCheck;
  end;
  if (blank(IPp.TerminalID))  then begin
    IPp.TerminalID = CurTerminalID;
  end;
  if (blank(IPp.BranchID))  then begin
    IPp.BranchID = CurBranchID;
  end;  
  if (MainCLRec.CashCollection!=0) then begin
    if (MainCLRec.PMControl!=0) then begin
      if (PMCheckType(IPp.PayMode,tstr,tstr)==5) then begin
        if (GetPMgentrans(IPp.PayMode)) then begin
          RecordCheckError(1277,"",-1,"PayMode");      
          res = -1; 
          goto LIPVcRecordCheck;        
        end;
      end;
    end;
  end;    
  testf = false;
  if (IPp.ReceivedFlag==1) then begin
    if (stat!=updatemode) then begin
      testf = true;
    end else begin
      if (IP2p.ReceivedFlag==0) then begin
        testf = true;
      end;
    end;
    if (testf) then begin
      if (blank(IPp.RecNumber)) then begin
        RecordCheckError(1058,"",-1,"RecNumber");      
        res = -1; 
        goto LIPVcRecordCheck;
      end;
    end;
  end;
  IPp.RegTime = CurrentTime;
  if (RequireOpenSession(IPp.MachineName)) then begin
    IPp.TransDate = CurrentDate;
    if (IsSessionOpen(IPp.MachineName,IPp.DrawerCode,IPp.TransDate,IPp.RegTime)==false) then begin
      RecordCheckError(2195,"",-1,"SerNr");      
      res = -1;
      goto LIPVcRecordCheck;
    end;
  end;
  if (POSBalanceExistsAfterThis(IPp.TransDate,IPp.RegTime,IPp.MachineName,IPp.DrawerCode)) then begin
    RecordCheckError(2194,"",-1,"TransDate");      
    res = -1;
    goto LIPVcRecordCheck;
  end;
  if (UserCanAction("AllowNegIP",true)==false) then begin
    if (IPp.CurPayVal<0) then begin
      RecordCheckError(20113,"",-1,"CurPayVal");      
      res = -1;
      goto LIPVcRecordCheck;
    end;
  end;
    
  AddIPRoundOffToRows(IPp,ARb);
  rwcnt = MatRowCnt(IPp);
  if ((IPp.OKFlag!=0) and (rwcnt==0)) then begin
    if (HasLocalization("POL,RUS")) then begin
      if (IsStandardProduct) then begin
        RecordCheckError(1030,"",0,"InvoiceOfficialSerNr");      
        res = -1;
        goto LIPVcRecordCheck;
      end else begin
        RecordCheckError(1030,"",0,"InvoiceNr");      
        res = -1;
        goto LIPVcRecordCheck;
      end;
    end else begin
      RecordCheckError(1030,"",0,"InvoiceNr");      
      res = -1;
      goto LIPVcRecordCheck;
    end;
  end;
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(IPp,i,IPrw);
    if ((IPrw.stp==1) or (IPrw.stp==5) or (IPrw.stp==6) or (IPrw.stp==7)) begin
        if (IPrw.ovst==0) then begin
          if (blank(IPrw.RecVal)) then begin
            RecordCheckError(1854,"",i,"RecVal");      
            res = -1; 
            goto LIPVcRecordCheck;
          end;
          if (UserCanAction("AllowNegIP",true)==false) then begin
            if (IPrw.RecVal<0) then begin
              RecordCheckError(20113,"",i,"RecVal");      
              res = -1;
              goto LIPVcRecordCheck;
            end;
          end;
          res = ValidIPDataForVATLaw(stat,IPp,i,error,errstr,errorrow,tstr);
          if (res!=0) then begin
            RecordCheckError(error,"",errorrow,tstr);
            res = -1;
            goto LIPVcRecordCheck;
          end;
          if (IPrw.CUPNr>0) then begin
            if (ARb.PreIPBookVAT!=0) then begin
              if (blank(IPrw.VATVal)) then begin
                RecordCheckError(1058,"",i,"VATVal");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
/*
some mistery code, what if customer has Sales Currency Defined?
          end else begin
            if (IPrw.InvoiceNr<0) then begin
              if (IPrw.RecCurncy!=BCb.BaseCur1) then begin
                RecordCheckError(1582,"",i,"RecCurncy");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
*/            
          end;
          if (ARb.PreIPBookVAT!=0) and (IPrw.CUPNr>0) then begin
            if (blank(IPrw.VATVal)) then begin
              RecordCheckError(1058,"",i,"VATVal");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          if (ARb.IPBookVAT!=0 and nonblank(IPrw.VATCode) and HasIntegratedNL) then begin
            if (HasLocalization("POL")==false) then begin
              if (checkIPVatCodeAcc(res,tstr,IPrw.VATCode)) then begin
                RecordCheckError(res,tstr,i,"VATCode");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
          end;
          if (HasLocalization("PRT")) then begin             
            if ((IPp.IPBookVAT!=0) and (ARb.IPBookVAT!=0) and (IPrw.InvoiceNr==-1)) then begin
              RecordCheckError(1131,"",i,"InvoiceNr");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;                    
          if (CurncyCodeRegistered(IPrw.InvCurncy)==false) then begin
            RecordCheckError(1582,"",i,"InvCurncy");      
            res = -1; 
            goto LIPVcRecordCheck;
          end;
          if (CurncyCodeRegistered(IPrw.RecCurncy)==false) then begin
            RecordCheckError(1582,"",i,"RecCurncy");      
            res = -1; 
            goto LIPVcRecordCheck;
          end;
          if (CurncyCodeRegistered(IPrw.BankCurncy)==false) then begin
            RecordCheckError(1582,"",i,"BankCurncy");      
            res = -1; 
            goto LIPVcRecordCheck;
          end;
          if (nonblank(IPrw.RoundOffAcc)) then begin
            if (GetAccName(IPrw.RoundOffAcc,tstr,60)==false) then begin
              RecordCheckError(1010,"",i,"RoundOffAcc");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          if (nonblank(IPrw.PayMode)) then begin
            if (CheckCurncy(IPrw.PayMode,IPrw.BankCurncy)==false) then begin
              RecordCheckError(1425,"",i,"PayMode");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          if (blank(IPrw.PayMode)) then begin
            if (CheckCurncy(IPp.PayMode,IPrw.BankCurncy)==false) then begin
              RecordCheckError(1425,"",i,"PayMode");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          IPrsr.IVNr = IPrw.InvoiceNr;
          if (ReadFirstKey("IVKey",IPrsr,1,true)) then begin
            iprsf = true;
          end;
          testf = true;
          if (blank(IPrw.CustCode)) then begin
            if (IsStandardProduct) then begin
              if (IPp.OKFlag!=0) then begin
                if (HasLocalization("PRT")==false) then begin
                  testf = false;
                end;
              end else begin
                testf = false;
              end;
            end;
          end;
          if (testf) then begin
            CUr.Code = IPrw.CustCode;
            if (ReadFirstMain(CUr,1,true)==false) then begin
              RecordCheckError(1120,"",i,"CustCode");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
            if (CUr.CUType==0) then begin
              RecordCheckError(1120,IPrw.CustCode,i,"CustCode");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;          
          end;
          if (IPTestCredMan(IPp,i,errcode)==false) then begin
            RecordCheckError(errcode,"",i,"CredManNr");      
            res = -1; 
            goto LIPVcRecordCheck;
          end;
          RecordClear(IVr);
          if (nonblank(IPrw.InvoiceOfficialSerNr)) then begin
            IVr.OfficialSerNr = IPrw.InvoiceOfficialSerNr;
            if (ReadFirstKey("OfficialSerNr",IVr,1,true)==false) then begin
              RecordCheckError(1290," " & IPrw.InvoiceOfficialSerNr,i,"OfficialSerNr");      
              res = -1; 
              goto LIPVcRecordCheck;  
            end;
          end;
          RecordClear(IVr);
          if (IPrw.InvoiceNr>0) then begin
            IVr.SerNr = IPrw.InvoiceNr;
            ivfound = ReadFirstMain(IVr,1,true);
          end;
          if (IPrw.InvoiceNr>0) and (ARb.NoOverPayIV==1) then begin
            switch (IPrw.stp) begin
              case kReceiptRowTypeBankFee:
              otherwise
                amount = IPrw.InvVal;
            end;
            for (j=0;j<rwcnt;j=j+1) begin
              MatRowGet(IPp,j,IP2rw);
              if (j!=i) then begin          
                if (IP2rw.InvoiceNr==IPrw.InvoiceNr) then begin
                  switch (IP2rw.stp) begin
                    case kReceiptRowTypeBankFee:
                     otherwise
                      amount = amount + IP2rw.InvVal;
                  end;
                end;
              end;
            end;
            koef = 1; 
            ARr.InvoiceNr = IPrw.InvoiceNr;
            if (ReadFirstMain(ARr,1,true)) then begin
              if ((ARr.RVal<0) and (amount<0)) then begin
                koef = -1;
              end;
            end;
            if ((ARr.RVal*koef)<(amount*koef)) then begin
              tstr = " " & amount & USetStr(20061);
              tstr = tstr & " " & ARr.RVal;
              tstr = tstr & USetStr(20062) & (amount-ARr.RVal) & USetStr(20063);
              RecordCheckError(20060,tstr,i,"InvVal");      
              res = -1; 
              goto LIPVcRecordCheck;  
            end;      
            if (ivfound) then begin
              if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
                tstr = " " & IVr.Sum4 & USetStr(20061);
                tstr = tstr & " " & 0.00;
                tstr = tstr & USetStr(20062) & (IVr.Sum4-ARr.RVal) & USetStr(20063);
                RecordCheckError(20060,tstr,i,"InvVal");      
                res = -1; 
                goto LIPVcRecordCheck;  
              end;
            end;
          end;
          if (ivfound) then begin
            if (IVr.Invalid!=0) then begin
              RecordCheckError(1282,"",i,"InvoiceNr");      
              res = 1282; 
              goto LIPVcRecordCheck;
            end;
          end;
          if ((IPrw.CUPNr!=-1) and (IPrw.InvoiceNr!=-1)) then begin
            RecordCheckError(20059,"",i,"CUPNr");      
            res = -1; 
            goto LIPVcRecordCheck;
          end;
          if (IPrw.OrderNr!=-1) then begin
            ORr.SerNr = IPrw.OrderNr;
            if (ReadFirstMain(ORr,1,true)==false) then begin
              RecordCheckError(1252,"",i,"OrderNr");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          if ((IPrw.CUPNr!=-1) and (IPrw.InvoiceNr==-1)) then begin
            if (UserCanAction("DisallowPrepToNotOKOR",false)) then begin
              if (IPrw.OrderNr>0) then begin
                ORr.SerNr = IPrw.OrderNr;
                if (ReadFirstMain(ORr,1,true)) then begin
                  if (ORr.OKFlag==0) then begin
                    RecordCheckError(20072,"",i,"OrderNr");      
                    res = -1;
                    goto LIPVcRecordCheck;
                  end;
                end;
              end;
            end;
            nrofprepay = nrofprepay + 1;
            ARHistr.CUPNr = IPrw.CUPNr;
            ARHistr.FileName = "IPVc";
            if (ReadFirstMain(ARHistr,2,true)) then begin
              if (ARb.ForceUniquePP!=0) then begin
                temp = blankval;
                ARPayr.CUPNr = ARHistr.CUPNr;
                if (ReadFirstMain(ARPayr,1,true)==true) then begin
                  temp = ARPayr.RVal;
                end;
                temp = temp + IPrw.RecVal;
                if (temp!=0) and (IPrw.RecVal>0) then begin
                  RecordCheckError(20057,"",i,"CUPNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
                if (IPrw.InvVal>0) then begin
                  if (ARPayr.PayDate!=IPp.TransDate) then begin
                    RecordCheckError(20853,"",i,"CUPNr");      
                    res = -1; 
                    goto LIPVcRecordCheck;
                  end;
               end;
              end;
              if (ARHistr.CustCode!=IPrw.CustCode) then begin
                RecordCheckError(1218,"",i,"CUPNr");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
              if (ARHistr.CurncyCode!=IPrw.RecCurncy) then begin
                RecordCheckError(1217,"",i,"CUPNr");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
            ARPayr.CUPNr = IPrw.CUPNr;
            if (ReadFirstMain(ARPayr,1,true)) then begin
              if (IPrw.InvVal>0) then begin
/*
moved to ForceUniquePP part above
                if (ARPayr.PayDate!=IPp.TransDate) then begin
                  RecordCheckError(20853,"",i,"CUPNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
*/
              end else begin
                if (-IPrw.InvVal>ARPayr.RVal) then begin
                  RecordCheckError(1254,"",i,"CUPNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
              if (CheckIfPrepaymentError(ARPayr,IPrw,IPp.TransDate)) then begin
                if (IPrw.BankVal>0) then begin
                  RecordCheckError(20405,"",i,"CUPNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
/*              
              if (ARPayr.CurncyCode!=IPrw.InvCurncy) then begin
                if (ARPayr.PayDate!=IPp.TransDate) and (IPrw.BankVal>0) then begin
                  RecordCheckError(1142,"",i,"CUPNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
*/              
            end else begin
              if (IPrw.RecVal<0) then begin
                RecordCheckError(20403,"",i,"CUPNr");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
            if ((IPrw.CUPNr!=-1) and (IPrw.InvoiceNr==-1)) then begin
              for (j=0;j<i;j=j+1) begin
                MatRowGet(IPp,j,IP2rw);
                if ((IP2rw.CUPNr!=-1) and (IP2rw.InvoiceNr==-1) and (IP2rw.CUPNr==IPrw.CUPNr)) then begin
                  if (IP2rw.CustCode!=IPrw.CustCode) then begin
                    RecordCheckError(1218,"",i,"CUPNr");      
                    res = -1; 
                    goto LIPVcRecordCheck;
                  end;                
                  if (ARb.ForceUniquePP!=0) then begin
                    RecordCheckError(20057,"",i,"CUPNr");      
                    res = -1; 
                    goto LIPVcRecordCheck;
                  end;
                end;
              end;
            end;

            ARPayr.CUPNr = IPrw.CUPNr;
            if (ReadFirstMain(ARPayr,1,true)) then begin
              if (ARPayr.VATCode!=IPrw.VATCode) then begin
                RecordCheckError(1286,"",i,"VATCode");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
              if (IPrw.RecVal<0) then begin
                amount = IPrw.RecVal;
                for (j=0;j<i;j=j+1) begin
                  MatRowGet(IPp,j,IP2rw);
                  if (IP2rw.CUPNr==IPrw.CUPNr) then begin
                    amount = amount + IP2rw.RecVal;
                  end;
                end;
                if (-amount>ARPayr.RVal) then begin
                  RecordCheckError(1254,"",i,"CUPNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
              if (nrofprepay>1 and ARb.IPBookVAT!=0) then begin
                if (ARPayr.VATVal!=0) then begin
                  RecordCheckError(1287,"",i,"CUPNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
            end;  
            if (DownPayRec.ConnPrePayAndSalesOrder!=0) then begin
              ORp.SerNr = IPrw.CUPNr;
              if (ReadFirstMain(ORp,1,true)==false) then begin
                RecordCheckError(1252,"",i,"CUPNr");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
          end;
          pmmode = IPrw.PayMode;
          if (blank(pmmode)) then begin
            pmmode = IPp.PayMode;
          end;  
          if (GetPMRow(pmmode,PMrw)) then begin           
            pmacc = PMrw.AccNr;
/*                 
we don't have to check pmobject since it goes to diffrent account then OPrw.Object
            pmobjstr = PMrw.Objects;
            tstr = pmobjstr;
            if (nonblank(tstr)) then begin
              tstr = tstr & ",";
            end;
            tstr = tstr & IPrw.Objects;          
*/            
            cashres = CheckObjs(pmacc,IPrw.Objects,errstr);
            if (cashres!=0) then begin
              RecordCheckError(cashres,errstr,i,"Objects");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;  
            if (IPrw.B1BankVal==0) then begin
              if (PMrw.ForceBankVals>0) then begin
                RecordCheckError(1058,"",i,"B1BankVal");      
                res = -1; 
                goto LIPVcRecordCheck;                
              end;
            end;
            if (IPrw.B2BankVal==0) then begin
              if (PMrw.ForceBankVals==2) then begin
                RecordCheckError(1058,"",i,"B2BankVal");      
                res = -1; 
                goto LIPVcRecordCheck;                
              end;
            end;
          end;
          if ((IPrw.InvoiceNr!=-1) or (IPrw.stp!=1)) then begin
            if (IPrw.InvoiceNr!=-1) then begin
              errcode = CheckObjs(IPrw.ARAcc,IPrw.Objects,errstr);
              if (errcode!=0) then begin
                if ((errcode==1083) and (ARb.ARUseObj==0)) then begin
                  errcode = 2275;
                end;
                RecordCheckError(errcode,errstr,-1,"Objects");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
              if (ivfound==false) then begin
                if (iprsf==false) then begin
                  RecordCheckError(1133,"",i,"InvoiceNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;            
              if (iprsf==false) then begin
                if (IVr.Invalid!=0) then begin
                  RecordCheckError(1282,"",i,"InvoiceNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
                if (IVr.OKFlag==0) then begin
                  RecordCheckError(1224,"",i,"InvoiceNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
            end;
            if (iprsf==true) then begin
              if (IPrw.stp==1) and (IPrw.InvoiceNr!=-1) then begin 
                if (ARb.IPbeforeIVDate==0) then begin
                  if (IPp.TransDate<IVr.InvDate) then begin
                    RecordCheckError(20852,"",i,"InvoiceNr");      
                    res = -1; 
                    goto LIPVcRecordCheck;
                  end;
                  if (IPrw.PayDate<IVr.InvDate) then begin 
                    RecordCheckError(20852,"",i,"PayDate");      
                    res = -1; 
                    goto LIPVcRecordCheck;
                  end;
                end;
              end;
            end;
            if (IPrw.InvoiceNr!=-1) then begin
              if (IVr.CustCode!=CUr.Code) then begin              
                if (iprsf==true) then begin
                  if (IPrsr.CustCode==CUr.Code)  then begin tmpf = true; end;
                end;  
                if (tmpf==false) then begin
                  RecordCheckError(1218,"",i,"InvoiceNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;  
              end;
            end;
            if ((IPrw.stp==1) and (blankdate(IPrw.PayDate))) then begin
              RecordCheckError(1053,"",i,"PayDate");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end else begin
            if (CUr.OnAccount==0) then begin
              RecordCheckError(1131,"",I,"InvoiceNr");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
            if ((IPrw.CUPNr==-1) and (ARb.DemandPPNo==1)) then begin
              RecordCheckError(1289,"",i,"CUPNr");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;
            if (nonblank(CUr.CurncyCode)) then begin
              if (CUr.CurncyCode!=IPrw.InvCurncy) then begin
                RecordCheckError(1217,"",i,"CustCode");      
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
          end;
          if (nonblank(IPrw.PayMode)) then begin
            cht = PMCheckType(IPrw.PayMode,tstr,tstr);
          end else begin
            cht = PMCheckType(IPp.PayMode,tstr,tstr);
          end;
          switch (cht) begin
            case kPayModeTypeCheque:
              if (IPrw.ChequeNr!=-1) then begin
                Checkr.SerNr = IPrw.ChequeNr;
                if (ReadFirstMain(Checkr,1,true)==false) then begin
                  RecordCheckError(1279,": " & IPrw.ChequeNr,i,"ChequeNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end else begin
                  if not (((Checkr.Openf==0) and (IPrw.RecVal>0)) or
                          ((Checkr.Openf==1) and (IPrw.RecVal<0))) then begin
                    RecordCheckError(1292,"",i,"ChequeNr");      
                    res = -1; 
                    goto LIPVcRecordCheck;
                  end;
                end;
              end else begin
                if (transf) then begin
                  RecordCheckError(1854,"",i,"ChequeNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
            case kPayModeTypeCreditCard:
              if (IPrw.ChequeNr!=-1) then begin
                Couponr.SerNr = IPrw.ChequeNr;
                if (ReadFirstMain(Couponr,1,true)) then begin
                  if not (((Couponr.Status==0) and (IPrw.RecVal>0)) or
                          ((Couponr.Status==1) and (IPrw.RecVal<0))) then begin
                    res = -1;
                    RecordCheckError(1292,": " & IPrw.ChequeNr,i,"ChequeNr");  
                    goto LIPVcRecordCheck;
                  end;
                end else begin
                  res = -1;
                  RecordCheckError(38850,": " & IPrw.ChequeNr,i,"ChequeNr");  
                  goto LIPVcRecordCheck;
                end;
              end else begin
                if (HasLocalization("ARG")) then begin
                  RecordCheckError(1854,"",i,"ChequeNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
            otherwise
              if (HasLocalization("ARG")) then begin
                if (IPrw.ChequeNr!=-1) then begin
                  RecordCheckError(1277,"",i,"PayMode");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end;
          end;
          gchk = GetCheck(IPp.PayMode,IPrw.PayMode,IPrw.ChequeNr,tstr,tstr,tstr,amount,td,regdate);
          if (HasLocalization("ARG")) then begin
            switch (gchk) begin
              case kPayModeTypeCheque:
                if (IPrw.ChequeNr<0) then begin
                  RecordCheckError(1854,"",i,"ChequeNr");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
            end;
          end;
          if (gchk==kPayModeTypeCheque or gchk==kPayModeTypeOwnCheque or gchk==kPayModeTypeCreditCard or gchk==kPayModeTypeDebitCard) then begin
            temp = blankval;
            for (j=0; j<rwcnt; j=j+1) begin
              MatRowGet(IPp,j,IP2rw);
              if (IP2rw.ChequeNr==IPrw.ChequeNr) then begin
                temp = temp + IP2rw.BankVal;
              end;
            end;
            if (IPrw.ChequeNr>0) then begin
              if (temp<0) then begin temp = -1*temp; end;
              if (temp!=amount) then begin
                if ((gchk==kPayModeTypeCreditCard) or (gchk==kPayModeTypeDebitCard)) then begin
                  RecordCheckError(20715,"",I,"ChequeNr");      
                end else begin
                  RecordCheckError(1280,"",I,"ChequeNr");      
                end;
                res = -1; 
                goto LIPVcRecordCheck;
              end;
            end;
          end;
          if ((IPrw.stp==5) or (IPrw.stp==6) or (IPrw.stp==7)) then begin
            IPrw.PayDate = IPp.TransDate;
          end;
          if (IPrw.stp==6) then begin
            if (IPrw.BankVal>0) then begin
              wrofacc = ARb.CredAcc;
            end else begin
              wrofacc = ARb.WriteOffLossAcc;
            end;
            if (blank(wrofacc)) then begin
              wrofacc = ARb.CredAcc;
            end;            
            cashres = CheckObjs(wrofacc,IPrw.Objects,errstr);
            if (cashres!=0) then begin
              RecordCheckError(cashres,errstr,i,"Objects");      
              res = -1; 
              goto LIPVcRecordCheck;
            end;  
          end;
          
        end;
    end;
  end;
LIPVcRecordCheck_GenTrans:;
  transf = false;
  if (IPp.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (IP2p.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (IPp.ReceivedFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (IP2p.ReceivedFlag==0) then begin transf = true; end;
    end;
  end;
  if (IPp.RejectedFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (IP2p.RejectedFlag==0) then begin transf = true; end;
    end;
  end;
  if (check) then begin
    if (transf) then begin
      if (UserCanAction("IPOK",true)==false) then begin
        RecordCheckError(1274,StringFromStringSet(3,"IPOK"),-1,"SerNr");      
        res = -1; 
        goto LIPVcRecordCheck;
      end;
    end;
    if (transf) then begin
      if (UserCanAction("IPOK",true)==false) then begin
        RecordCheckError(1274,StringFromStringSet(3,"IPOK"),-1,"SerNr");      
        res = -1; 
        goto LIPVcRecordCheck;
      end;
    end;
  end;
  if (HasLocalization("PRT")) then begin 
   TestOfficialSerialf = true;
  end;
  if (TestOfficialSerialf and check) then begin 
    BlockLoad(LINrb);  
    if (nonblank(IPp.OfficialSerNr)) and ((MatRowCnt(LINrb)>0) or (HasLocalization("ARG,HRV,PRT"))) then begin
      GetLegalInvNrRow(IPp.OfficialSerNr,LINrbrw);
      switch (LINrbrw.SelectionType) begin
        case kLegalInvNrSelectionTypeManual:
          if (blank(LINrbrw.Serie)) then begin
            IPp.OfficialSerNr = "";
          end;
        case kLegalInvNrSelectionTypeAtOK:
          IPp.OfficialSerNr = "";
        case kLegalInvNrSelectionTypeAtInsert:
          if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
            IPp.OfficialSerNr = "";
          end;
      end;
    end;
    if (blank(IPp.OfficialSerNr)) then begin
      if (HasLocalization("BRA")) then begin
        RecordCheckError(2210,"",-1,"OfficialSerNr");
        res = -1;
        goto LIPVcRecordCheck;
      end;
      if (HasLocalization("PRT")) then begin
        if (IPp.Status==kRecordStatusInvalidated or IPp.Status==kRecordStatusLost or IPp.Status==kRecordStatusNotUsed) then begin
          RecordCheckError(34430,"",-1,"Status");
          goto LIPVcRecordCheck;
        end;
        if (IPp.Status==kRecordStatusManual or IPp.Status==kRecordStatusRecovered) then begin
          if (transf) then begin
            if (blank(IPp.OfficialSerNr)) then begin
              RecordCheckError(2210,"",-1,"OfficialSerNr");
              res = -1;
              goto LIPVcRecordCheck;
            end;
          end;
        end else begin
          FindNextIPVcOfficialSerialNr(IPp);
          if (blank(IPp.OfficialSerNr)) then begin
            if (MatRowCnt(IPp)>=0) then begin 
              MatRowGet(IPp,0,IPrw);
              if (nonblank(IPrw.CustCode)) then begin 
                CUr.Code = IPrw.CustCode;
                if (ReadFirstMain(CUr,1,true)==false) then begin
                  RecordCheckError(1120,"",0,"CustCode");      
                  res = -1; 
                  goto LIPVcRecordCheck;
                end;
              end else begin
                RecordCheckError(1058,"",0,"CustCode");      
                res = -1; 
                goto LIPVcRecordCheck;                
              end;
            end;
            if (OfficialSerialNrCanBeBlank("IPVc",CUr.Classification,IPp.OKFlag,IPp.OfficialSerNr,IPp.BranchID,IPp.MachineName,IPp.TransDate,17,IPp.Status)==false) then begin
              RecordCheckError(2210,"",-1,"OfficialSerNr");
              res = -1;
              goto LIPVcRecordCheck;
            end;
          end;
        end;
      end;
      if (HasLocalization("HRV")) then begin
        FindNextIPVcOfficialSerialNr(IPp);
      end;
    end else begin
      if (HasLocalization("PRT")) then begin
        tstr = FindNextIPVcOfficialSerialNrFromCurrentSerie(IPp);
        if (IPp.OfficialSerNr!=tstr) then begin
          RecordCheckError(25715," " & IPp.OfficialSerNr,-1,"OfficialSerNr");  
          res = -1;
          goto LIPVcRecordCheck;
        end;
      end;
    end;
    if (ValidateOfficialSerialNrChronology("IPVc",IPp.OfficialSerNr,IPp.SerNr,IPp.TransDate,td)==false) then begin
      RecordCheckError(26201," " & td,-1,"TransDate");  
      res = -1;
      goto LIPVcRecordCheck;
    end;  
    if (nonblank(IPp.OfficialSerNr)) then begin
      BlockLoad(IOSTr);
      if (nonblank(IOSTr.From)) then begin
        if (IPp.OfficialSerNr<IOSTr.From) then begin
          RecordCheckError(1557,"",-1,"OfficialSerNr");      
          res = -1;
          goto LIPVcRecordCheck;
        end;
      end;
      if (nonblank(IOSTr.To)) then begin
        if (IPp.OfficialSerNr>IOSTr.To) then begin
          RecordCheckError(1557,"",-1,"OfficialSerNr");      
          res = -1;
          goto LIPVcRecordCheck;
        end;
      end;
      if (HasLocalization("PRT")) then begin 
        GetLegalInvNrRow(IPp.OfficialSerNr,LINrbrw);
/*        
        if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin
          if (IPp.Status!=kRecordStatusManual and IPp.Status!=kRecordStatusRecovered) then begin
            RecordCheckError(2246,"",-1,"Status");   
            res = -1; 
            goto LIPVcRecordCheck;
          end;
        end;
*/        
        if (LINrbrw.RegType==kOfficialNumTypeManualIPVc) then begin
          if (IPp.Status!=kRecordStatusManual) then begin
            RecordCheckError(2246,"",-1,"OfficialSerNr");   
            res = -1; 
            goto LIPVcRecordCheck;
          end;
        end;
        if (LINrbrw.RegType==kOfficialNumTypeRecoveredIPVc) then begin
          if (IPp.Status!=kRecordStatusRecovered) then begin
            RecordCheckError(2246,"",-1,"OfficialSerNr");   
            res = -1; 
            goto LIPVcRecordCheck;
          end;
        end;
      end;
    end;
    if (HasLocalization("PRT")) then begin 
      if (IPp.Status==kRecordStatusManual or IPp.Status==kRecordStatusRecovered) then begin
        if (blank(IPp.OfficialSerNr2)) then begin   
          RecordCheckError(2210,"",-1,"OfficialSerNr2");   
          res = -1; 
          goto LIPVcRecordCheck;
        end;
        if (nonblank(IPp.OfficialSerNr2)) then begin   
          if (InString2(IPp.OfficialSerNr2,"/")<=0) then begin
            RecordCheckError(1059," " & IPp.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto LIPVcRecordCheck;
          end;
          lIPr.OfficialSerNr2 = IPp.OfficialSerNr2;
          if (ReadFirstKey("OpenOfficialSerNr2",lIPr,1,true)) then begin
            if (lIPr.SerNr!=IPp.SerNr) then begin
              RecordCheckError(1391,IPp.OfficialSerNr2,-1,"OfficialSerNr2");   
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          lIPr.OfficialSerNr = StripCharacter(IPp.OfficialSerNr2,"/");
          if (ReadFirstKey("OfficialSerNr",lIPr,1,true)) then begin
            if (lIPr.SerNr!=IPp.SerNr) then begin
              RecordCheckError(1391,IPp.OfficialSerNr2,-1,"OfficialSerNr2");   
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          dummyl = 0;
          GetNextSubstring(IPp.OfficialSerNr2,dummyl,"/",tstr);
          GetNextSubstring(IPp.OfficialSerNr2,dummyl,"/",tstr2);
          for (i=0;i<len(tstr);i=i+1) begin
            c = Mid(tstr,i,1);
            if (IsDigit(c)==false and (IsCapitalLetter(c)==false)) then begin
              RecordCheckError(1059," " & IPp.OfficialSerNr2,-1,"OfficialSerNr2");   
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          for (i=0;i<len(tstr2);i=i+1) begin
            c = Mid(tstr2,i,1);
            if (IsDigit(c)==false) then begin
              RecordCheckError(1059," " & IPp.OfficialSerNr2,-1,"OfficialSerNr2");   
              res = -1; 
              goto LIPVcRecordCheck;
            end;
          end;
          GetLegalInvNrRow(IPp.OfficialSerNr2,LINrbrw);
          if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
            RecordCheckError(2246,"",-1,"Status");   
            res = -1; 
            goto LIPVcRecordCheck;
          end;
        end;
      end;    
    end;    
    if (HasLocalization("PRT")) then begin 
      if (blank(IPp.OfficialSerNrSerie)) then begin 
        IPp.OfficialSerNrSerie = UpdateOfficialSerNrSerie(stat,IPp.OKFlag,IP2p.OKFlag,IPp.OfficialSerNr,true);
      end;
    end;  
    if (nonblank(IPp.OfficialSerNr)) then begin
      if (InString2(IPp.OfficialSerNr,",")>0) then begin
        if (InString2(IPp.OfficialSerNr,":")>0) then begin
          RecordCheckError(1059," " & IPp.OfficialSerNr,-1,"OfficialSerNr");      
          res = -1;
          goto LIPVcRecordCheck;
        end;
      end;
    end;
    if (nonblank(IPp.OfficialSerNr)) then begin
      lIPr.OfficialSerNr = IPp.OfficialSerNr;
      if (ReadFirstKey("OfficialSerNr",lIPr,1,true)) then begin
        if (lIPr.SerNr!=IPp.SerNr) then begin
          MessageBox(1547," " & lIPr.SerNr);
          res = -1;
          goto LIPVcRecordCheck;          
        end; 
      end;
    end;      
  end;
  if (gentrans==false) then begin transf = false; end;
  if (IsStandardProduct) then begin
    transf = HasIntegratedNL and transf;
  end;
  if (transf) then begin
    if (stat==insertmode) then begin
      errcode = MakeTransFromIP(gTRp,IPp,false,errrownr,errfield);
    end else begin
      errcode = MakeTransFromIP(gTRp,IPp,false,errrownr,errfield);
    end;
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",errrownr,errfield);      
      res = -1; 
      goto LIPVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==IPYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        RecordCheckError(1085,tstr,-1,"SerNr");      
        res = -1;
        goto LIPVcRecordCheck;
      end;
      SaveTrans(gTRp);
      AddTTrans_IPVc(gTRp,IPp);
    end;
  end;
LIPVcRecordCheck:;
  if (res!=0) then begin
    IPp.SerNr = oldnr;
    IPp.OfficialSerNr = oldOfficialSerNr;    
    IPp.OfficialSerNrSerie = "";
  end;
  IPVcRecordCheck = res;
  RETURN;
END;

global
function LongInt IPVcRecordProtectFields(var record IPVc IPr,record IPVc IP2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  IP2r.Prntdf = IPr.Prntdf;
  IPVcRecordProtectFields = res;
  return;
end;
