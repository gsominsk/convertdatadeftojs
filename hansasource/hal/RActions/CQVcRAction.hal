external function Integer VerifyTaxTemplateCode(string,var string);
external function Boolean UseTaxTemplatesforTaxCalc();
external function Boolean Date2Test(string,Date,string,Integer);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function LongInt CQVcRecordDefaults(var record CQVc CQr,record CQVc CQ2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;

  CQr.SerNr = -1;
  CQr.CONr = -1;
  CQr.COChildNr = -1;
  CQr.Version = -1;
  CQr.CQDate = CurrentDate;
  CQr.invTimes = 0;
  if (SingleUserMode) then begin
    CQr.SerNr = NextSerNr("CQVc",CQr.CQDate,-1,false,"");
  end;
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    CQr.OurContact = Userr.CurOurContact;
  end;
  CQVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt CQVcRecordDuplicate(var record CQVc CQr,record CQVc CQ2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  CQr.SerNr = -1;
  CQr.CONr = -1;
  CQr.COChildNr = -1;
  CQr.Version = -1;
  CQr.CQDate = CurrentDate;
  if (SingleUserMode) then begin
    CQr.SerNr = NextSerNr("CQVc",CQr.CQDate,-1,false,"");
  end;
  CQVcRecordDuplicate = res; 
  RETURN;
END;

updating procedure CQSetStatus(record CQVc CQp,record CQVc CQ2p)
BEGIN
  record COCQStatVc oldCOCQr;
  record COCQStatVc COCQr;
      
  if ((RecordValid(CQp)) and (RecordValid(CQ2p)==false)) then begin
    COCQr.SerNr = NextSerNr("COCQStatVc",CurrentDate,-1,false,"");
    COCQr.COSerNr = -1;
    COCQr.COChildNr = -1;
    COCQr.CQSerNr = CQp.SerNr;
    COCQr.CQVersion = CQp.Version;
    COCQr.CustCode = CQp.CustCode;
    COCQr.Name = CQp.Name;
    if (RecordStore(COCQr,false)) then begin end;
  end;
  if ((RecordValid(CQp)==false) and (RecordValid(CQ2p))) then begin
    COCQr.CQSerNr = CQ2p.SerNr;
    COCQr.CQVersion = CQ2p.Version;
    if (ReadFirstKey("CQSerNr",COCQr,2,true)) then begin
      RecordDelete(COCQr);
    end;
  end;
  if ((RecordValid(CQp)) and (RecordValid(CQ2p))) then begin
    COCQr.CQSerNr = CQp.SerNr;
    COCQr.CQVersion = CQp.Version;
    if (ReadFirstKey("CQSerNr",COCQr,2,true)) then begin
      RecordCopy(oldCOCQr,COCQr);
      if (COCQr.COSerNr==-1) then begin
        if ((COCQr.CustCode!=CQp.CustCode) or (COCQr.Name!=CQp.Name)) then begin
          COCQr.CustCode = CQp.CustCode;
          COCQr.Name = CQp.Name;
        end;
        COCQr.COSerNr = CQp.CONr;
        if (RecordUpdate(oldCOCQr,COCQr,false)==0) then begin end;
      end;
    end else begin
      COCQr.SerNr = NextSerNr("COCQStatVc",CurrentDate,-1,false,"");
      COCQr.COSerNr = CQp.CONr;
      COCQr.COChildNr = -1;
      COCQr.CQSerNr = CQp.SerNr;
      COCQr.CQVersion = CQp.Version;
      COCQr.CustCode = CQp.CustCode;
      COCQr.Name = CQp.Name;
      if (RecordStore(COCQr,false)) then begin end;
    end;
  end;
  RETURN;
END;

global
updating function LongInt CQVcRecordUpdateAfter(var record CQVc CQr,record CQVc CQ2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  CQSetStatus(CQr,CQ2r);
  CQVcRecordUpdateAfter = res; 
  RETURN;
END;

global
updating function LongInt CQVcRecordSaveAfter(var record CQVc CQr,record CQVc CQ2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  CQSetStatus(CQr,CQ2r);
  CQVcRecordSaveAfter = res; 
  RETURN;
END;

global
updating function LongInt CQVcRecordRemove(var record CQVc CQr,record CQVc CQ2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  CQSetStatus(CQ2r,CQr);
  CQVcRecordRemove = res; 
  RETURN;
END;

global
function LongInt CQVcRecordRemoveTest(var record CQVc CQr,record CQVc CQ2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (CQr.CONr!=-1) then begin
    res = 0;
  end;
LCQVcRecordRemoveTest:;
  CQVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt CQVcRecordImport(var record CQVc CQr,record CQVc CQ2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  row CQVc CQrw;
  Integer i,rwcnt;
  string 10 crncycode;
  val fr,to1,to2,br1,br2,t;
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    GetFullCurncyRate(crncycode,CQr.CQDate,fr,to1,to2,br1,br2);     
    B1ToB2Val(CQr.CustPrice,br1,br2,t);
    CQr.CustPrice = t;
    B1ToB2Val(CQr.OurCost,br1,br2,t);
    CQr.OurCost = t;
    B1ToB2Val(CQr.NewINPrice,br1,br2,t);
    CQr.NewINPrice = t;
    B1ToB2Val(CQr.OldINPrice,br1,br2,t);
    CQr.OldINPrice = t;
    B1ToB2Val(CQr.Redemtion,br1,br2,t);
    CQr.Redemtion = t;
    rwcnt = MatRowCnt(CQr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CQr,i,CQrw);
      B1ToB2Val(CQrw.Price,br1,br2,t);
      CQrw.Price = t;
      B1ToB2Val(CQrw.PurPrice,br1,br2,t);
      CQrw.PurPrice = t;
      B1ToB2Val(CQrw.PurOption,br1,br2,t);
      CQrw.PurOption = t;
      B1ToB2Val(CQrw.ExtRate,br1,br2,t);
      CQrw.ExtRate = t;
      B1ToB2Val(CQrw.PeriodSum,br1,br2,t);
      CQrw.PeriodSum = t;
      MatRowPut(CQr,i,CQrw);
    end;
  end;
  CQVcRecordImport = res; 
  RETURN;
END;

global
updating function LongInt CQVcRecordCheck(var record CQVc CQr,record CQVc CQ2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record CUVc CUr;
  row CQVc CQrw;
  Integer i,rwcnt;
  record INVc INr;
  LongInt oldnr;
  record AccVc Accr;
  string 255 tstr;
  record AccBlock ARAccRec;
  Boolean gentrans;
  Integer insertmode,updatemode,errcode;
  record CQVc lCQr;

  res = 0;     
  insertmode = 1;
  updatemode = 2;
  oldnr = CQr.SerNr;
  if (CQr.SerNr<=0) then begin
    CQr.SerNr = NextSerNr("CQVc",CQr.CQDate,-1,false,"");
  end;
  if ((stat==insertmode) or (CQr.SerNr!=CQ2r.SerNr)) then begin
    lCQr.SerNr = CQr.SerNr;
    lCQr.Version = CQr.Version;
    if (ReadFirstMain(lCQr,2,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1; 
      goto LCQVcRecordCheck;
    end;
  end;
  if (Date2Test("CQVc",CQr.CQDate,"CQDate",-1)==false) then begin
    res = -1;
    goto LCQVcRecordCheck;
  end;
  if (blank(CQr.CustCode)) then begin
    RecordCheckError(1125,"",-1,"CustCode");      
    res = -1; 
    goto LCQVcRecordCheck;
  end;
  CUr.Code = CQr.CustCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,CQr.CustCode,-1,"CustCode");      
    res = -1; 
    goto LCQVcRecordCheck;
  end;
  rwcnt = MatRowCnt(CQr);
  for (i = 0 ; i<rwcnt;i=i+1) begin
    MatRowGet(CQr,i,CQrw);
    if (nonblank(CQrw.ArtCode)) then begin
      INr.Code = CQrw.ArtCode;
      if (ReadFirstMain(INr,1,true)==false) then begin
        RecordCheckError(1120,CQrw.ArtCode,-1,"ArtCode");      
        res = -1; 
        goto LCQVcRecordCheck;
      end;
/*        
      if (CQrw.Price!=0) then begin
        if (UseTaxTemplatesforTaxCalc) then begin
          if (blank(CQrw.TaxTemplateCode)) then begin
            RecordCheckError(24201,"",i,"TaxTemplateCode");      
            res = -1;
            goto LCQVcRecordCheck;
          end;
          errcode = VerifyTaxTemplateCode(CQrw.TaxTemplateCode,tstr);
          if (errcode!=0) then begin
            RecordCheckError(errcode,tstr,i,"TaxTemplateCode");                
            res = -1; 
            goto LCQVcRecordCheck;
          end;
        end else begin
          if (blank(COrw.VATCode)) then begin
            RecordCheckError(1134,"",i,"VATCode");      
            res = -1; 
            goto LCOVcRecordCheck;
          end;
        end;
      end;
*/          
    end;
  end;
LCQVcRecordCheck:;
  if (res!=0) then begin CQr.SerNr = oldnr; end;
  CQVcRecordCheck = res;
  RETURN;
END;
