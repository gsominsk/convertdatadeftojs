external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function Date ConvertPlanShipString(string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean CorrectM4ValProc(val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetSalesGroup(string,var string);
external function Integer CheckObjs(string,string,var string);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function Boolean IsVATCodeDefined(string);

global
function LongInt POCOVcRecordDefaults(var record POCOVc POCOr,record POCOVc POCO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;
  string 255 tstr;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  record AccBlock ARAccb;
  
  BlockLoad(ARAccb);
  POCOr.SerNr = -1;
  POCOr.TransDate = CurrentDate;
  POCOr.OKFlag = 0;
  POCOr.ExportFlag = 0;
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    POCOr.OurContact = Userr.CurOurContact;
    POCOr.SalesMan = Userr.Code;
    GetSalesGroup(POCOr.SalesMan,tstr);
    POCOr.SalesGroup = tstr;    
  end;
  POCOr.PayDeal = "";
  POCOr.CurncyCode = "";
  curcode = POCOr.CurncyCode;
  GetFullCurncyRate(curcode,POCOr.TransDate,fr,to1,to2,br1,br2);
  POCOr.CurncyCode = curcode;
  POCOr.FrRate = fr;
  POCOr.ToRateB1 = to1; 
  POCOr.ToRateB2 = to2;
  POCOr.BaseRate1 = br1;
  POCOr.BaseRate2 = br2;  
  if (SingleUserMode) then begin
    POCOr.SerNr = NextSerNr("POCOVc",POCOr.TransDate,-1,false,"");
  end;  
  POCOr.NoTAXonVAT = ARAccb.NoTAXonVAT;
  POCOVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt POCOVcRecordDuplicate(var record POCOVc POCOr,record POCOVc POCO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rwcnt;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  row POCOVc POCOrw;

  POCOr.SerNr = -1;
  POCOr.OKFlag = 0;
  rwcnt = MatRowCnt(POCOr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POCOr,i,POCOrw);
    POCOrw.Ordered = blankval;
    POCOrw.VINr = -1;
    MatRowPut(POCOr,i,POCOrw);
  end;
  if (SingleUserMode) then begin
    POCOr.SerNr = NextSerNr("POCOVc",POCOr.TransDate,-1,false,"");
  end;
  curcode = POCOr.CurncyCode;
  GetFullCurncyRate(curcode,POCOr.TransDate,fr,to1,to2,br1,br2);
  POCOr.CurncyCode = curcode;
  POCOr.FrRate = fr;
  POCOr.ToRateB1 = to1; 
  POCOr.ToRateB2 = to2;
  POCOr.BaseRate1 = br1;
  POCOr.BaseRate2 = br2;  
  POCOVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt POCOVcRecordRemoveTest(var record POCOVc POCOr,record POCOVc POCO2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;
  record PUVc PUr;

  res = 1;
  BlockLoad(DBLockRec);
  if (POCOr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LPOCOVcRecordRemoveTest;
  end;
  if (POCOr.OKFlag!=0) then begin
    if (long3>0) then begin MessageBox(1560,""); end;
    res = 0;
  end;    
LPOCOVcRecordRemoveTest:;
  POCOVcRecordRemoveTest = res; 
  RETURN;
END;

procedure POCOVcConvertB1ToB2(var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN    
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  RETURN;
END;

global
function LongInt POCOVcRecordImport(var record POCOVc POCOr,record POCOVc POCO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    curncy = POCOr.CurncyCode;
    fr = POCOr.FrRate;
    to1 = POCOr.ToRateB1;
    to2 = POCOr.ToRateB2;
    br1 = POCOr.BaseRate1;
    br2 = POCOr.BaseRate2;
    t = POCOr.Sum4;
    ConvertToDualBase(curncy,POCOr.TransDate,fr,to1,to2,br1,br2,t,true);
    POCOr.CurncyCode = curncy;
    POCOr.FrRate = fr;
    POCOr.ToRateB1 = to1;
    POCOr.ToRateB2 = to2;
    POCOr.BaseRate1 = br1;
    POCOr.BaseRate2 = br2;
    POCOr.Sum4 = t;                      
  end;
  if (blankdate(POCOr.PlanShipDate)) then begin
    POCOr.PlanShipDate = ConvertPlanShipString(POCOr.PlanShip);
  end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    curncy = POCOr.CurncyCode;
    to1 = POCOr.ToRateB1;
    to2 = POCOr.ToRateB2;
    br1 = POCOr.BaseRate1;
    br2 = POCOr.BaseRate2;
    POCOVcConvertB1ToB2(to1,to2,br1,br2);
    POCOr.ToRateB1 = to1;
    POCOr.ToRateB2 = to2;
    POCOr.BaseRate1 = br1;
    POCOr.BaseRate2 = br2;
  end;
  if (POCOr.NoTAXonVAT==-1) then begin
    POCOr.NoTAXonVAT = 0;
  end;
  POCOVcRecordImport = res;
  RETURN;
END;

global
function LongInt POCOVcRecordCheck(var record POCOVc POCOr,record POCOVc POCO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode,updatemode;
  Integer i,rwcnt,errcode;
  LongInt oldnr;
  Boolean gentrans,found;
  row POCOVc POCOrw;
  record INVc INr;
  string 255 tstr,errstr;
  record AccVc Accr;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  Boolean initotcheckf;
  
  res = 0;
  insertmode = 1;
  updatemode = 2;

  rwcnt = MatRowCnt(POCOr);
  oldnr = POCOr.SerNr;
  if (POCOr.SerNr<=0) then begin
    POCOr.SerNr = NextSerNr("POCOVc",POCOr.TransDate,-1,false,"");
  end;
  errcode = CheckRates(POCOr.CurncyCode,POCOr.FrRate,POCOr.ToRateB1,POCOr.ToRateB2,POCOr.BaseRate1,POCOr.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LPOCOVcRecordCheck;
  end;
  if (nonblank(POCOr.Objects)) then begin
    errcode = CheckObjs("",POCOr.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");
      res = errcode;
      goto LPOCOVcRecordCheck;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POCOr,i,POCOrw);
    switch (POCOrw.stp) begin
      case 1:
        if (nonblank(POCOrw.ArtCode)) then begin
          found = ReadFirstItem(POCOrw.ArtCode,INr,true,false);
          if (found==false) then begin
            RecordCheckError(1120,POCOrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto LPOCOVcRecordCheck;
          end;
          if (INr.Terminated!=0) then begin
            RecordCheckError(1266,POCOrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto LPOCOVcRecordCheck;
          end;
          if (INr.ItemType==2) then begin
            RecordCheckError(1826,POCOrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto LPOCOVcRecordCheck;
          end;
        end;
        if (blank(POCOrw.VATCode) and (POCOrw.Sum!=0)) then begin
          RecordCheckError(1134,"",i,"VATCode");      
          res = -1; 
          goto LPOCOVcRecordCheck;
        end;
        if (CorrectM4ValProc(POCOrw.vRebate)==false) then begin
          RecordCheckError(1019,"",i,"vRebate");      
          res = -1; 
          goto LPOCOVcRecordCheck;
        end;
        if (nonblank(POCOrw.CostAcc)) then begin
          Accr.AccNumber = POCOrw.CostAcc;
          if (ReadFirstMain(Accr,1,true)==false) then begin
            RecordCheckError(1007,POCOrw.CostAcc,i,"CostAcc");
            res = -1;
            goto LPOCOVcRecordCheck;
          end else begin
            if (Accr.blockedFlag!=0) then begin
              RecordCheckError(1258,POCOrw.CostAcc,i,"CostAcc");
              res = -1;
              goto LPOCOVcRecordCheck;
            end;
            if (Accr.GroupAcc!=0) then begin
              RecordCheckError(1084,POCOrw.CostAcc,i,"CostAcc");
              res = -1;
              goto LPOCOVcRecordCheck;
            end;
          end;
        end;
        VerifyRowObjects("PL",POCOr.Objects,POCOrw.Objects,POCOrw.CostAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);
        if (errcode!=0) then begin
          RecordCheckError(errcode,errstr,i,"Objects");
          res = errcode;
          goto LPOCOVcRecordCheck;
        end;
        if (nonblank(POCOrw.VATCode)) then begin
          if (VATAccIsClosed(POCOrw.VATCode,tstr,1)) then begin
            RecordCheckError(1258,tstr,i,"VATCode");
            res = 1258;
            goto LPOCOVcRecordCheck;
          end;
          if (IsVATCodeDefined(POCOrw.VATCode)==false) then begin
            RecordCheckError(1120,POCOrw.VATCode,i,"VATCode");
            res = 1120;
            goto LPOCOVcRecordCheck;
          end;
        end;
    end;
  end;
LPOCOVcRecordCheck:;
  if (res!=0) then begin POCOr.SerNr = oldnr; end;
  POCOVcRecordCheck = res;
  RETURN;
END;
