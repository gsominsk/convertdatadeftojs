external function Integer GetIntYc(Date);

global 
updating procedure ChangeCouponStates(LongInt NrLiq)
begin
  Record CouponVc Couponr;
  Record CoupLoteVc CoupLoter;
  Boolean cond,cond1;
  Integer j,rows;

  cond1 = true;
  CoupLoter.NrLiq = NrLiq;
  while loopkey("NrLiq",CoupLoter,1,cond1) begin
    if (CoupLoter.NrLiq <> NrLiq) then begin
      cond1 = false;
    end else begin
      cond = true;
      Couponr.MachineName = CoupLoter.MachineName;
      Couponr.CardType    = CoupLoter.CardType;
      Couponr.BatchNr     = CoupLoter.BatchNr;
      Resetloop(Couponr);
      while loopkey("MachineName",Couponr,3,cond) begin
        if ((Couponr.MachineName <> CoupLoter.MachineName) or
            (Couponr.CardType <> CoupLoter.CardType) or
            (Couponr.BatchNr <> CoupLoter.BatchNr)) then begin
          cond = false;
        end else begin
          Couponr.ConsNr = NrLiq;
          if RecordStore(Couponr,true) then begin end;
        end;  
      end;
    end;
  end;
  return;
end;

global
updating
procedure GenCouponDepTrans(record CouponConVc CouponConr)
begin
/*
  Record TRVc As;
  Row TRVc Asrw;          
  Record CouponVc Couponr;
  Row ChqdepVc TBrw;          
  Boolean Res;
  String 60 tstr,cur,obj,cta;
  LongInt Num;
  Integer LineNr,intdummy;
  Integer rows,j,curcomp,rndtotal;
  val Cheques,dsum,csum,nilv,ValMonBase,TotalAs;

  // Setup Record
  LineNr  = 0;  TotalAs = 0;
  RecordNew(As);

  GetCurncyRoundoff(TBr.CurncyCode,"XX",rndtotal); //Fix when finishing code
  // first line cash
  GetPMObjCta(TBr.PayModeCash,obj,cta,intdummy);
  if (TBr.Cash<>0) then begin 
    GetAccountName(cta,tstr);
    ValMonBase = MulRateToBase1(TBr.CurncyCode,TBr.Cash,TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.BaseRate1,TBr.BaseRate2,rndtotal);  
    AddEuroCurncyTrRow(As,cta,obj,"",tstr,ValMonBase,false,false,TotalAs,TBr.CurncyCode,TBr.FrRate,TBr.ToRate1,TBr.ToRate2, TBr.BaseRate1,TBr.BaseRate2,TBr.Cash,nilv,false,"");
    LineNr = LineNr +1;
  end;

  rows = MatRowCnt(TBr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(TBr,j,TBrw);
    Chq.SerNr = TBrw.ChqNr;
    if ReadfirstMain(Chq,1,true) then begin
      obj = Chq.TempObjects;
    end;
    GetAccountName(TBr.TempAccNr,tstr);
    ValMonBase = MulRateToBase1(TBr.CurncyCode,TBrw.Amount,TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.BaseRate1,TBr.BaseRate2,rndtotal);  
    AddEuroCurncyTrRow(As,TBr.TempAccNr,obj,"",tstr,ValMonBase,false,false,TotalAs,TBr.CurncyCode,TBr.FrRate,TBr.ToRate1,TBr.ToRate2, TBr.BaseRate1,TBr.BaseRate2,TBrw.Amount,nilv,false,"");
    LineNr = LineNr +1;
  end;

  GetPMObjCta(TBr.PayMode,obj,cta,intdummy);
  GetAccountName(TBr.DepAccNr,tstr);

  ValMonBase = MulRateToBase1(TBr.Sum,(TBrw.Amount+TBr.Cash),TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.BaseRate1,TBr.BaseRate2,rndtotal);  
  AddEuroCurncyTrRow(As,TBr.DepAccNr,obj,"",tstr,ValMonBase,false,true,TotalAs,TBr.CurncyCode,TBr.FrRate,TBr.ToRate1,TBr.ToRate2, TBr.BaseRate1,TBr.BaseRate2,TBr.Sum,nilv,false,"");

  //addTRLine(Asrw,TBr.MoneyCode,TBr.Sum,TBr.DepAccNr,true,obj,"",TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.TransDate);
  LineNr = LineNr +1;  
  curcomp = CurrentCompany;
  As.TransDate = TBr.TransDate;
  As.IntYc     = GetIntYc(As.TransDate);    
  As.Comment   = "Deposito Grupo de Cheques ";
  TRSumup(As,nilv);
  Num =  NextSerNr("TRVc",As.TransDate ,-1,false,"");  
  if (Recordinsert(As,true)) then begin end;
  */  
  return;
end;

global
function LongInt CouponConVcRecordRemoveTest(var record CouponConVc r1,record CouponConVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = -1;
  if (r1.OKFlag==0) then begin
    res = 0; 
  end;
  CouponConVcRecordRemoveTest = res;  
  return;
end;

global
function LongInt CouponConVcRecordDefaults(var record CouponConVc r1,record CouponConVc r2,LongInt long3,LongInt long4)
begin
  r1.SerNr     = -1;
  r1.OKFlag    = 0;
  r1.TransDate = CurrentDate;
  return;
end;


global
function LongInt CouponConVcRecordCheck(record CouponConVc r1,record CouponConVc r2,LongInt long3,LongInt long4)
begin
  boolean conds;
  LongInt res;
  Record CouponConVc CouponConr;
  String 50 tstr;

  res = 1;
  if blank(r1.CardType) then begin
    RecordCheckError(1058,r1.CardType,-1,"CardType");
    goto LCouponConVcRecordCheck;
  end;
  res = 0;

LCouponConVcRecordCheck:;  
  CouponConVcRecordCheck = res;
  return;
end;

global
updating
function LongInt CouponConVcRecordUpdateAfter(var record CouponConVc r1,record CouponConVc r2,LongInt long3,LongInt long4)
begin
 
  if ((r1.OKFlag!=0) and (r2.OKFlag==0)) then begin
    // Done by PL Invoice ! GenCouponDepTrans(r1);
    ChangeCouponStates(r1.NrLiq);
  end;
  CouponConVcRecordUpdateAfter = -1;
  return;
end;

global
updating
function LongInt CouponConVcRecordSave(var record CouponConVc r1,record CouponConVc r2,LongInt long3,LongInt long4)
begin
  if (r1.SerNr==-1) then begin
    r1.SerNr = NextSerNr("CouponConVc",r1.TransDate,-1,false,"");
  end;
  if (r1.OKFlag!=0)  then begin
    // Done by PL Invoice ! GenCouponDepTrans(r1);
    ChangeCouponStates(r1.NrLiq);
  end;
  CouponConVcRecordSave = -1;
  return;
end;

// THESE ARE WINDOW ACTIONS, Needs to be moved to Client files...
global
function Boolean CouponConDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record CouponConVc CouponConr;
  Integer normalmode,updatemode;
  
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CouponConr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CouponConr);
  end;  
  if (CouponConr.OKFlag!=0) then begin
    res = false;
  end;
  CouponConDClassOKFlagButtonAction = res;
  return;
End;

global
function Boolean CoupLoteDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CoupLoteVc CoupLoter;
  
  res = true;
  GetWindowRecord(wn,CoupLoter);
  switch (fieldname) begin
    case "Batch": if (CoupLoter.Closed>0) then begin res = false; end;
    case "BatchNr": if (CoupLoter.Closed>0) then begin res = false; end;
    case "MachineName": if (CoupLoter.Closed>0) then begin res = false; end;
    case "NrLiq": if (CoupLoter.Closed==0) then begin res = false; end;
  end;
  CoupLoteDClassActiveEditField = res;
  RETURN;
END;
 
global
function LongInt CoupLoteVcRecordDefaults(var record CoupLoteVc r1,record CoupLoteVc r2,LongInt long3,LongInt long4)
begin

  r1.SerNr       = -1;
  r1.Closed      = 0;
  r1.BatchNr     = 0;  // Integer
  r1.NrLiq = -1;
  r1.MachineName = CurMachineName;
  CoupLoteVcRecordDefaults = -1;
  return;
end;


global
function LongInt CoupLoteVcRecordDuplicate(var record CoupLoteVc r1,record CoupLoteVc r2,LongInt long3,LongInt long4)
begin
  r1.SerNr = -1;
  r1.NrLiq = -1;
  r1.Closed    = 0;
  r1.BatchNr   = 0;  // Integer
  return;
end;


function integer NrOfCouponsInLote(Integer BatchNr,String CardType,String MachineName)
begin
  Record CouponVc Couponr;
  Boolean cond,first;
  Integer res;
  
  res = 0;
  cond = true;
  Couponr.MachineName = MachineName;
  Couponr.CardType    = CardType;
  Couponr.BatchNr     = BatchNr;
  while Loopkey("MachineName",Couponr,3,cond) begin
    if ((Couponr.MachineName <> MachineName) or
        (Couponr.CardType <> CardType) or
        (Couponr.BatchNr <> BatchNr)) then begin
          cond = false;
    end else begin
      res = res + 1;
    end;
  end;
  NrOfCouponsInLote = res;
  return;
end;

global
function LongInt CoupLoteVcRecordCheck(record CoupLoteVc r1,record CoupLoteVc r2,LongInt long3,LongInt long4)
begin
  boolean conds;
  LongInt res;
  Record CouponConVc CouponConr;
  String 50 tstr;

  res = 1;
  if ((r1.Closed<>0) and (r2.Closed==0)) then begin
    if (0==NrOfCouponsInLote(r1.BatchNr,r1.CardType,r1.MachineName)) then begin
      RecordCheckError(0,"Lote no tiene cupones",-1,"BatchNr");
    end;  
  end;
  if blank(r1.CardType) then begin
    RecordCheckError(1058,r1.CardType,-1,"CardType");
    goto LCoupLoteVcRecordCheck;
  end;
  if (r1.NrLiq<>-1) then begin
    CouponConr.NrLiq = r1.NrLiq;
    if not readfirstkey("NrLiq",CouponConr,1,true) then begin
      RecordCheckError(1290,r1.NrLiq,-1,"NrLiq");
      goto LCoupLoteVcRecordCheck;
    end;
  end;  
  res = 0;

LCoupLoteVcRecordCheck:;  
  CoupLoteVcRecordCheck = res;
  return;
end;

global
function LongInt CoupLoteVcRecordSave(var record CoupLoteVc r1,record CoupLoteVc r2,LongInt long3,LongInt long4)
begin
  Record CouponVc Couponr;
  record CoupLoteVc CoupLoter;

  if (r1.BatchNr==0) then begin
    CoupLoter.MachineName = r1.MachineName;
    CoupLoter.CardType    = r1.CardType;
    if readlastkey("MachineName",CoupLoter,2,true) then begin
      r1.BatchNr = CoupLoter.BatchNr + 1;
    end else begin
      r1.BatchNr = 1;
    end;
  end;
  if (r1.SerNr==-1) then begin
    r1.SerNr = NextSerNr("CoupLoteVc",CurrentDate,-1,false,"");
  end;  
  CoupLoteVcRecordSave = -1;
  return;
end;

// We know already that they are all from the same type
global
updating
function LongInt CoupLoteVcRecordUpdateAfter(record CoupLoteVc r1,record CoupLoteVc r2,LongInt long3,LongInt long4)
begin
  record CouponVc Couponr;
  record CoupLoteVc r3;
  boolean res,cond;

  cond= true;
  if ((r1.Closed<>0) and (r2.Closed==0)) then begin
    Couponr.MachineName = r1.MachineName;
    Couponr.CardType    = r1.CardType;
    Couponr.BatchNr     = r1.BatchNr;
    Resetloop(Couponr);
    while loopkey("MachineName",Couponr,3,cond) begin
      if ((Couponr.MachineName<>r1.MachineName) or
          (Couponr.CardType<>r1.CardType) or
          (Couponr.BatchNr<>r1.BatchNr)) then begin
          cond = false;
      end else begin
        if ((Couponr.Status==1) or (Couponr.Status==2)) then begin
          Couponr.Status= 3;
          if BlankDate(Couponr.AuthDate) then begin
            Couponr.AuthDate= CurrentDate;
          end;
          Couponr.DepDate = CurrentDate;
          res = RecordStore(Couponr,true);
        end;
      end;  
    end;
    RecordCopy(r3,r1);
    r3.SerNr = -1;
    r3.BatchNr= r1.BatchNr+1;
    r3.Closed = 0;
    if (RecordInsert(r3,false)) then begin end;
  end;
  CoupLoteVcRecordUpdateAfter = -1;
  return;
end;

global
function LongInt CoupLoteVcRecordRemoveTest(var record CoupLoteVc r1,record CoupLoteVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = -1;
  if (r1.Closed<>0) then begin
    res = 0; 
  end;
  CoupLoteVcRecordRemoveTest = res;  
  return;
end;

global
function Boolean CoupLoteDClassClosedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record CoupLoteVc CoupLoter;
  Integer normalmode,updatemode;
  
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CoupLoter);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CoupLoter);
  end;  
  if (CoupLoter.Closed!=0) then begin
    res = false;
  end;
  CoupLoteDClassClosedButtonAction = res;
  return;
End;

global
updating
procedure MarkCouponLiqsm()
begin
  record RcVc RepSpec;
  record CoupLoteVc CoupLoter;
  record CouponConVc CouponConr;
  LongInt Liq;
  
  CouponConr.NrLiq = 999999;
  if readlastkey("NrLiq",CouponConr,1,false) then begin
    Liq = CouponConr.NrLiq;
  end;  
  if (ReadMarkedRecord(CurWindow,CoupLoter)) then begin
    if ((CoupLoter.NrLiq==-1) and (CoupLoter.Closed<>0)) then begin
      CoupLoter.NrLiq = Liq;
      if recordstore(CoupLoter,true) then begin end;
    end;
  end;
  return;
end;




