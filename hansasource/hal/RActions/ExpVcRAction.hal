external procedure AutomatedSalesOrderly(string);
external procedure GetACShortAccount(string,var string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer VATType(string);
external function Boolean ValidSuppInvNo_Argentina(string);
external function string 255 TaxTemplateVATCodeOnTRRows(record TaxMatrixVc,string);
external function Boolean HasIntegratedNL();
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Boolean AcceptanceRulesExists(Integer,string);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external procedure TBIVGetRate(var record TBIVVc);
external function Integer VIWithTheSupplierInvoiceNo(LongInt,string,string);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external procedure CalcInCurtoTBIV(var record TBIVVc);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external function Boolean TBIVItemsUsage(record PRVc,record INVc,val);
external function Boolean CheckProjectMember(record PRVc);
external function Boolean IsPRPhaseLocked(string,Date,var string);
external procedure GetProjectWIPAcc(record PRAccBlock,string,var string,var string);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external procedure ExpSumup(record ExpVc,var val);
external procedure GetPRName(string, var string);
external procedure CalcExtra(val,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetPRInvSep(string,var Integer,var Integer);
external function Integer GetItemTypeGroup(string,var string);
external function Integer PlainItemPricing(string,string);
external procedure GetProjectPrice(string,string,string,string,string,val,var val,var val,var string,var val,var string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external updating procedure AddTTrans_ExpVc(record TRVc,record ExpVc);
external function Boolean DateWarned(Date,string);
external function Boolean DateLocked(Date,string);
external function string 5 AddVATCodeToVATAccRows(string);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function Integer CheckUsers(string,string,var string,Boolean);
external function Boolean TRAutoTrans(var record TRVc,Integer,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure InvalidateTR(Integer,LongInt);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure SwapM4Val(var val,var val);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Boolean IsUnOKAllowed(string,Date);
external updating procedure ExprsStats(record ExpVc,Boolean);
external updating function LongInt UpdatePPOKNr(LongInt);
external procedure GetUserName(string,var string);
external procedure GetSalesGroup(string,var string);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Boolean GetAccNamVAT(string,var string,var string,Integer);
external procedure GetVATCodeAccNumbers(string,var string,var string);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Boolean TransInFiscal(Date);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean IsVATCodeDefined(string);
external function Integer ProjectAccount(string,string);
external function Integer CheckObjs(string,string,var string);
external function Boolean DidYouAuthorize(string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestExpVc(LongInt,Date,var Boolean);

updating procedure ExpDeleteTBIV(record ExpVc Expp,Integer rownr,row ExpVc exprp)
BEGIN
  record TBIVVc TBIVr;

  TBIVr.oVc = 3;
  TBIVr.SerNr = Expp.SerNr;
  TBIVr.Row = rownr;
  TBIVr.ArtCode = exprp.Item;
  TBIVr.PRCode = exprp.PRCode;
  TBIVr.EMCode = Expp.Person;
  if (ReadFirstMain(TBIVr,0,true)) then begin
    RecordDelete(TBIVr);
  end;
  RETURN;
END;

updating procedure ExpCreateTBIV(record ExpVc Expp,Integer rownr,row ExpVc exprp,Integer UseDiscount)
BEGIN
  record ProjectBlock PRRec;
  record TBIVVc TBIVr;
  record INVc INr;
  val t,basesum;
  Integer intype,i1,i2;
  string 255 tstr;
  val price,reb,costprice;
  string 10 markup,markupinb1,markupinprcur;
  Integer oldstyle,typofcur;  
  record PRVc PRr;
  val priceinprcur,costpriceinprcur;
  val priceinb1,costpriceinb1;
  record GeneralOptionBlock GOb;

  RecordNew(TBIVr);
  BlockLoad(PRRec);
  BlockLoad(GOb);
  intype = 1;
  INr.Code = exprp.Item;
  if (ReadFirstMain(INr,1,true)) then begin
    markup = INr.Markup;
    markup = markup & "%";
    markupinb1 = markup;
    intype = INr.ItemType;
  end;
  TBIVr.oVc = 3;
  TBIVr.SerNr = Expp.SerNr;
  TBIVr.Row = rownr;
  TBIVr.TransDate = Expp.TransDate;
  TBIVr.EMCode = Expp.Person;
  TBIVr.PRCode = exprp.PRCode;
  PRr.Code = TBIVr.PRCode;
  ReadFirstMain(PRr,1,true);
  TBIVr.PRName = PRr.Name;
  TBIVr.ArtCode = exprp.Item;
  TBIVr.ItemType = GetItemTypeGroup(TBIVr.ArtCode,tstr);
  TBIVr.INGroup = tstr;
  TBIVr.Objects = exprp.Objects;
  TBIVr.Qty = exprp.qty;
  TBIVr.InvQty = exprp.qty;
  TBIVr.Invoice = -1;
  TBIVr.Comment = exprp.Comment;
//  TBIVr.Comment = INr.Name;
  if (intype!=0) then begin
    TBIVr.ItemType = intype;
  end else begin
    if (INr.ItemMaterial!=0) then begin
      TBIVr.ItemType = 5;
    end else begin
      TBIVr.ItemType = 0;
    end;
  end;
  GetPRInvSep(exprp.PRCode,i1,i2);
  TBIVr.InvSeparately = i2;
  basesum = exprp.Sum - exprp.VATSum;
  
  priceinprcur = blankval;
  markupinprcur = "";
  costpriceinprcur = blankval;
  priceinb1 = blankval;
  costpriceinb1 = blankval;

  switch (PlainItemPricing(TBIVr.PRCode,TBIVr.ArtCode)) begin
    case 0: price = basesum/exprp.qty;//Cur
    case 1: 
      GetProjectPrice(TBIVr.PRCode,TBIVr.ArtCode,"","","",1,priceinb1,reb,markupinb1,price,markup);
  end;      
  
  if (PRRec.UseItemCostPrice!=0) then begin
    costprice = basesum/exprp.qty;//cur
  end else begin
    costprice = INr.InPrice;//base1
  end;
  
  typofcur = TypeOfCurncy(Expp.CurncyCode,oldstyle);
  TBIVr.CurncyCode = Expp.CurncyCode;
  if (nonblank(PRr.CurncyCode)) then begin
    if (Expp.CurncyCode==PRr.CurncyCode) then begin //USD SEK    
      switch (typofcur) begin
        case 0://Foreign
          priceinprcur = price;
          if (nonblank(priceinprcur)) then begin
            priceinb1 = MulRateToBase1(Expp.CurncyCode,priceinprcur,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);            
          end else begin
            Base1ToOther(Expp.CurncyCode,priceinb1,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,priceinprcur,DefaultCurRoundOff);
          end;
          if (PRRec.UseItemCostPrice!=0) then begin
            costpriceinprcur = costprice;
            costpriceinb1 = MulRateToBase1(Expp.CurncyCode,costprice,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
          end else begin
            costpriceinprcur = DivRateToBase1(Expp.CurncyCode,costprice,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
            costpriceinb1 = costprice;
          end;
        case 1://Base Curncy 1 
          if (nonblank(price)) then begin      
            priceinb1 = price;
          end;
          costpriceinb1 = costprice;
          priceinprcur = price;
          costpriceinprcur = costprice;
        case 2://Base Curncy 2
          priceinprcur = price;
          priceinb1 = MulRateToBase1(Expp.CurncyCode,price,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
          if (PRRec.UseItemCostPrice!=0) then begin
            costpriceinprcur = costprice;
            costpriceinb1 = MulRateToBase1(Expp.CurncyCode,costprice,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
          end else begin
            costpriceinprcur = DivRateToBase1(Expp.CurncyCode,costprice,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
            costpriceinb1 = costprice;
          end;
        case 3://Blank Currency, old style 
          priceinb1 = price;
          costpriceinb1 = costprice;
      end;
    end else begin
      if (nonblank(price)) then begin      
        priceinb1 = MulRateToBase1(Expp.CurncyCode,price,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
      end;
      if (PRRec.UseItemCostPrice!=0) then begin
        costpriceinb1 = MulRateToBase1(Expp.CurncyCode,costprice,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
      end else  begin
        costpriceinb1 = costprice;
      end;
    end;
  end else begin
    priceinb1 = MulRateToBase1(Expp.CurncyCode,price,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
    if (PRRec.UseItemCostPrice!=0) then begin
      costpriceinb1 = MulRateToBase1(Expp.CurncyCode,costprice,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
    end else  begin
      costpriceinb1 = costprice;
    end;
  end;
  markupinprcur = markup; 

  TBIVr.Price = priceinb1;
  TBIVr.Discount = reb;
  TBIVr.Markup = markupinb1;
  CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,UseDiscount);
  TBIVr.Sum = t;
  CalcExtra(TBIVr.Sum,TBIVr.Markup,t);
  TBIVr.Sum = TBIVr.Sum + t;
  TBIVr.CostPrice = costpriceinb1;    
  t = TBIVr.CostPrice*TBIVr.Qty;
  TBIVr.GP = TBIVr.Sum - t;
  if (nonblank(PRr.CurncyCode)) then begin
    if (Expp.CurncyCode==PRr.CurncyCode) then begin
      switch (typofcur) begin
        case 0://Foreign
          TBIVGetRate(TBIVr);    
          TBIVr.PriceInCur = priceinprcur;
          TBIVr.CostPriceInCur = costpriceinprcur;
          TBIVr.MarkupInCur = markupinprcur;
          CalcSum(TBIVr.InvQty,TBIVr.PriceInCur,0,TBIVr.Discount,t,GOb.UseDiscount);
          TBIVr.SumInCur = t;
          CalcExtra(TBIVr.SumInCur,TBIVr.MarkupInCur,t);
          TBIVr.SumInCur = TBIVr.SumInCur + t;
          TBIVr.GPInCur = TBIVr.SumInCur - TBIVr.CostPriceInCur*TBIVr.Qty;
        case 1://Base Curncy 1 
          TBIVGetRate(TBIVr);    
          TBIVr.PriceInCur = priceinprcur;
          TBIVr.CostPriceInCur = costpriceinprcur;
          TBIVr.MarkupInCur = markupinprcur;
          CalcSum(TBIVr.InvQty,TBIVr.PriceInCur,0,TBIVr.Discount,t,GOb.UseDiscount);
          TBIVr.SumInCur = t;
          CalcExtra(TBIVr.SumInCur,TBIVr.MarkupInCur,t);
          TBIVr.SumInCur = TBIVr.SumInCur + t;
          TBIVr.GPInCur = TBIVr.SumInCur - TBIVr.CostPriceInCur*TBIVr.Qty;
        case 2://Base Curncy 2
          TBIVGetRate(TBIVr);    
          TBIVr.PriceInCur = priceinprcur;
          TBIVr.CostPriceInCur = costpriceinprcur;
          TBIVr.MarkupInCur = markupinprcur;
          CalcSum(TBIVr.InvQty,TBIVr.PriceInCur,0,TBIVr.Discount,t,GOb.UseDiscount);
          TBIVr.SumInCur = t;
          CalcExtra(TBIVr.SumInCur,TBIVr.MarkupInCur,t);
          TBIVr.SumInCur = TBIVr.SumInCur + t;
          TBIVr.GPInCur = TBIVr.SumInCur - TBIVr.CostPriceInCur*TBIVr.Qty;
        case 3://Blank Currency, old style 
          CalcInCurtoTBIV(TBIVr);
      end;
    end else begin
      CalcInCurtoTBIV(TBIVr);
    end;
  end else begin
    CalcInCurtoTBIV(TBIVr);
  end;  
  if (RecordStore(TBIVr,false)) then begin
  end;
  RETURN;
END;

updating procedure ExpUpdatePR(record ExpVc Expp,record ExpVc Exp2p,Boolean updatef)
BEGIN
  row ExpVc Exprw;
  Integer i,rwcnt;
  record GeneralOptionBlock GenOptr;
  
  if (Expp.OKFlag==0) then begin
    goto LExpUpdatePR;
  end;
  BlockLoad(GenOptr);
  if (updatef) then begin
    if (Exp2p.SerNr!=-1) then begin
      rwcnt = MatRowCnt(Exp2p);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Exp2p,i,Exprw);
        if (nonblank(Exprw.PRCode)) then begin
          ExpDeleteTBIV(Exp2p,i,Exprw);
        end;
      end;
    end;
  end;
  if (Expp.SerNr!=-1) then begin
    rwcnt = MatRowCnt(Expp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Expp,i,Exprw);
      if (nonblank(Exprw.PRCode)) then begin
        ExpCreateTBIV(Expp,i,Exprw,GenOptr.UseDiscount);
      end;
    end;
  end;
LExpUpdatePR:;
  RETURN;
END;

updating procedure ExpDeletePR(record ExpVc Expp)
BEGIN
  row ExpVc Exprw;
  Integer i,rwcnt;

  if (Expp.SerNr!=-1) then begin
    rwcnt = MatRowCnt(Expp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Expp,i,Exprw);
      if (nonblank(Exprw.PRCode)) then begin
        ExpDeleteTBIV(Expp,i,Exprw);
      end;
    end;
  end;
  RETURN;
END;

global
function LongInt ExpVcRecordDefaults(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 255 tstr;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  
  Expr.SerNr = -1;
  Expr.DocDate = CurrentDate;
  Expr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    Expr.SerNr = NextSerNr("ExpVc",Expr.TransDate,-1,false,"");
  end;
  Expr.OKFlag = 0;
  Expr.StatFlag = 0;
  Expr.Person = CurrentUser;
  GetUserName(Expr.Person,tstr);
  Expr.Name = tstr;
  GetSalesGroup(Expr.Person,tstr);
  Expr.SalesGroup = tstr;
  curcode = "";
  GetFullCurncyRate(curcode,Expr.TransDate,fr,to1,to2,br1,br2);
  Expr.CurncyCode = curcode;
  Expr.FrRate = fr;
  Expr.ToRateB1 = to1; 
  Expr.ToRateB2 = to2;
  Expr.BaseRate1 = br1;
  Expr.BaseRate2 = br2;
  Expr.CalcVATVal = blankval;
  Expr.NrofRecs = blankval;
  if (Importing==false) then begin
    if (DateLocked(Expr.TransDate,"ExpVc")) then begin
      MessageBox(1046,"");
    end else begin
      if (DateWarned(Expr.TransDate,"ExpVc")) then begin
        MessageBox(1045,"");
      end;
    end;  
  end;
  ExpVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt ExpVcRecordDuplicate(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row ExpVc Exprw;
  Integer i,rwcnt;

  Expr.SerNr = -1;
  if (SingleUserMode) then begin
    Expr.SerNr = NextSerNr("ExpVc",Expr.TransDate,-1,false,"");
  end;
  Expr.PPOKNr = -1;
  Expr.OKFlag = 0;
  Expr.StatFlag = 0;
  Expr.Invalid = 0;
  Expr.OKSign = "";
  Expr.NrofRecs = blankval;
  if (Importing==false) then begin
    if (DateLocked(Expr.TransDate,"ExpVc")) then begin
      MessageBox(1046,"");
    end else begin
      if (DateWarned(Expr.TransDate,"ExpVc")) then begin
        MessageBox(1045,"");
      end;
    end;  
  end;

  rwcnt = MatRowCnt(Expr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Expr,i,Exprw);
    switch (Exprw.stp) begin
      case kExpenseRowTypePersonnelPayment:    
        MatRowDelete(Expr,i);
        i = i - 1;
    end;
  end;
  Expr.AcceptanceBy = "";
  Expr.AcceptanceFYI = "";
  WarnFutureDate(true,Expr.TransDate);
  WarnFutureDate(true,Expr.DocDate);  
  ExpVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt ExpVcRecordRemoveTest(var record ExpVc Expr,record ExpVc Exp2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;

  res = 1;
  BlockLoad(DBLockRec);
  if (Expr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LExpVcRecordRemoveTest;
  end;
  if (Expr.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
  actnr = 1;
  while (ReadRecordLink(Expr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (long3>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LExpVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;
LExpVcRecordRemoveTest:;
  ExpVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt ExpVcRecordSave(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (Expr.OKFlag!=0) then begin
    Expr.PPOKNr = UpdatePPOKNr(Expr.PPOKNr);
    ExpUpdatePR(Expr,Exp2r,false);
  end;
  ExpVcRecordSave = res;
  RETURN;
END;

updating procedure InvalidateExp(record ExpVc Expp)
BEGIN
  ExpDeletePR(Expp);
  ExprsStats(Expp,true);    
  RETURN;
END;

updating procedure ExpUpdatePP(record ExpVc Expr,Boolean unokf)
begin
  row ExpVc Exprw;
  record PPVc PPr;
  record PPVc oldPPr;
  row PPVc PPrw;
  Integer ei,erwcnt;
  Integer pi,prwcnt;
  
  erwcnt = MatRowCnt(Expr);
  for (ei=0;ei<erwcnt;ei=ei+1) begin
    MatRowGet(Expr,ei,Exprw);
    if (Exprw.stp==kExpenseRowTypePersonnelPayment) and (Exprw.Sum>0) then begin
      PPr.SerNr = Exprw.PPNr;
      if (ReadFirstMain(PPr,1,true)) then begin
        if (Exprw.PPRow<MatRowCnt(PPr)) then begin
          RecordCopy(oldPPr,PPr);
          MatRowGet(PPr,Exprw.PPRow,PPrw);
          if (unokf==false) then begin
            PPrw.ExpUsedPayVal = PPrw.ExpUsedPayVal + Exprw.Sum;
          end else begin
            PPrw.ExpUsedPayVal = PPrw.ExpUsedPayVal - Exprw.Sum;
            PPrw.B1ExpUsedPayVal = PPrw.B1ExpUsedPayVal - MulRateToBase1(Expr.CurncyCode,Exprw.Sum,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
          end;
          MatRowPut(PPr,Exprw.PPRow,PPrw);
          RecordUpdate(oldPPr,PPr,true);
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating function LongInt ExpVcRecordSaveAfter(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (Expr.OKFlag!=0) then begin
    ExprsStats(Expr,false);
    ExpUpdatePP(Expr,false);
    AutomatedSalesOrderly("HasIntegratedNL");
  end;
  ExpVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt ExpVcRecordImportAfter(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (Expr.OKFlag!=0) then begin
    ExprsStats(Expr,false);
  end;
  ExpVcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt ExpVcRecordUpdate(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((Expr.OKFlag!=0) and (Exp2r.OKFlag==0)) then begin
    Expr.PPOKNr = UpdatePPOKNr(Expr.PPOKNr);
    ExpUpdatePR(Expr,Exp2r,false);
  end;
  if ((Expr.OKFlag!=0) and (Exp2r.OKFlag!=0)) then begin
    ExpUpdatePR(Expr,Exp2r,true);
  end;
  if ((Expr.OKFlag==0) and (Exp2r.OKFlag==1)) then begin//unok
    ExpDeletePR(Expr);
    DeleteTransaction(Expr.SerNr,ExpYc);
  end;
  ExpVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt ExpVcRecordUpdateAfter(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val bc1v;

  if ((Expr.OKFlag!=0) and (Exp2r.OKFlag==0)) then begin
    ExprsStats(Expr,false);
    ExpUpdatePP(Expr,false);
    AutomatedSalesOrderly("HasIntegratedNL");
  end;
  if ((Expr.Invalid!=0) and (Exp2r.Invalid==0)) then begin
    if (Exp2r.OKFlag!=0) then begin
      InvalidateExp(Expr);
      InvalidateTR(ExpYc,Expr.SerNr);
      ExpUpdatePP(Expr,true);
    end;
  end;  
  if ((Expr.OKFlag==0) and (Exp2r.OKFlag==1)) then begin//unok
    ExprsStats(Expr,true);    
    ExpUpdatePP(Expr,true);
    StoreUnOKHistory("ExpVc",Expr.SerNr,CurrentDate,CurrentTime,CurrentUser);
  end;
  ExpVcRecordUpdateAfter = res;
  RETURN;
END;

global
procedure AddTransAutoTransRows(record TRVc gTRp)
BEGIN
  Integer i,rwcnt;
  Integer oi,orwcnt;
  row TRVc TRrw;
  row TRVc newTRrw;
  record AccVc Accr;
  record TRVc oldgTRp;
  record AutVc Autr;
  row AutVc Autrw;
  
  RecordCopy(oldgTRp,gTRp);
  orwcnt = MatRowCnt(oldgTRp);
  i = 0;
  for (oi=0;oi<orwcnt;oi=oi+1) begin
    MatRowGet(oldgTRp,oi,TRrw);
    ClearRow(gTRp,newTRrw,1);
    Accr.AccNumber = TRrw.AccNumber;
    ReadFirstMain(Accr,1,true);
    if (nonblank(Accr.TransAutCode)) then begin
      newTRrw.AccNumber =  Accr.TransAutCode;
      newTRrw.Typ = TRrw.Typ;
      MatRowInsert(gTRp,oi+1,newTRrw);
      TRAutoTrans(gTRp,oi+1,true,true);
      MatRowDelete(gTRp,oi+1);
      Autr.Code = Accr.TransAutCode;
      if (ReadFirstMain(Autr,1,true)) then begin
        if (MatRowCnt(Autr)>0) then begin
          MatRowGet(Autr,0,Autrw);
          if (Autrw.AccNumber=="!") then begin
            MatRowDelete(gTRp,i);
            i = i - 1;
          end;
        end;
      end;
    end;
    i = i + 1;
  end;  
  RETURN;
END;

function Integer ExpVc_PostWIP(record TRVc gTRp,record PRAccBlock PRAb,record ExpVc Expp,row ExpVc Exprw,Boolean dc1,
                       Boolean dc2,val frrate,val torate1,val torate2,val baserate1,val baserate2,
                       var val totsum)
begin
  Integer res;
  record PRVc PRr;
  string 255 wipacc,balacc;
  string 255 tstr,taccnumber;
  Boolean accf;
  val rs;
  
  PRr.Code = Exprw.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (PRr.UseWIP==1) then begin

      GetProjectWIPAcc(PRAb,Exprw.Item,wipacc,balacc);
      rs = MulRateToBase1(Expp.CurncyCode,Exprw.Sum-Exprw.VATSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      
      if (GetAccName(wipacc,tstr,60)==false) then  begin
        res = 1909;      
        goto LExpVc_PostWIP;
      end;
      accf = CheckTTRPerRow("ExpVc",wipacc,"",dc2,taccnumber,0);
      AddEuroTrRow(gTRp,wipacc,"","",tstr,rs,baserate1,baserate2,accf,dc1,totsum,false,taccnumber,"","");

      if (GetAccName(balacc,tstr,60)==false) then  begin
        res = 1910;      
        goto LExpVc_PostWIP;
      end;
      accf = CheckTTRPerRow("ExpVc",balacc,"",dc2,taccnumber,0);
      AddEuroTrRow(gTRp,balacc,"","",tstr,rs,baserate1,baserate2,accf,dc2,totsum,false,taccnumber,"","");

    end;
  end;
LExpVc_PostWIP:;  
  ExpVc_PostWIP = res;
  return;
end;

global
function Integer MakeTransFromExp(record TRVc gTRp,record ExpVc Expp,Boolean rpt)
BEGIN
  Integer res;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  record UserVc Userr;
  record PRVc PRr;
  record TRVc lTRr;
  row ExpVc Exprw;
  Integer i,rwcnt;
  string 255 ftxt,otxt;
  string 255 tstr,perstr;
  val rs,curval;
  val frrate,torate1,torate2,baserate1,baserate2;
  Boolean dc1,dc2;
  string 255 vatcod,vatcod2;
  val svatval,rvatval,totsum;
  val t;
  string 10 persacc;
  Date td;
  val fr,to1,to2,br1,br2;
  Boolean rowcurf,rateroundof,currencyperrowf;
  string 10 svatacc, pvatacc,taccnumber;
  record ExpTBlock ETb;
  record APAccBlock APb;
  record PRAccBlock PRAb;
  record ExpAccBlock EAb;
  
  res = 1085;
  BlockLoad(APb);
  BlockLoad(TRGenRec);
  BlockLoad(ARAccRec);
  BlockLoad(ETb);
  BlockLoad(PRAb);  
  BlockLoad(EAb);  

  frrate = Expp.FrRate;
  torate1 = Expp.ToRateB1;
  torate2 = Expp.ToRateB2;
  baserate1 = Expp.BaseRate1;
  baserate2 = Expp.BaseRate2;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.ExpGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromExp;
    end;
    if ((nonblankdate(TRGenRec.ExpStartDate)) and
        (Expp.TransDate<TRGenRec.ExpStartDate)) then begin
      res = 0;
      goto LMakeTransFromExp;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = ExpYc;
    gTRp.Number = Expp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromExp;
    end;
  end;  
  Userr.Code = Expp.Person;
  if (ReadFirstMain(Userr,1,true)) then begin
    persacc = Userr.PersAcc;
    otxt = Userr.PersObjx;
  end;
  if (blank(persacc)) then begin
    persacc = EAb.ExpAcc;
  end;
  if (GetAccName(persacc,perstr,60)==false) then begin
    res = 2130;
    goto LMakeTransFromExp;
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = Expp.TransDate;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      res = 1075;
      goto LMakeTransFromExp;
    end;
  end;
  ftxt = Expp.Person;
  ftxt = ftxt & " ";
  ftxt = ftxt & Expp.Name;
  if (nonblank(Expp.CurncyCode)) then begin
    ftxt = ftxt & ", ";
    ftxt = ftxt & Expp.CurncyCode;
    ftxt = ftxt & " ";
    GetFullCurncyRateText(true,tstr,frrate,torate1,torate2,baserate1,baserate2);
    ftxt = ftxt & tstr;
  end;
  gTRp.Comment = ftxt;
  dc1 = true;
  dc2 = false;
  rwcnt = MatRowCnt(Expp);
  for (i=0;i<rwcnt;i=i+1) begin   
    MatRowGet(Expp,i,Exprw);
    if (Exprw.stp==1) then begin
      currencyperrowf = nonblank(Exprw.BankCurncy);
      if (currencyperrowf) then begin
        i = rwcnt;
      end;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin   
    MatRowGet(Expp,i,Exprw);
    if (Exprw.stp==1) then begin
/* The object from Project is pasted onto the matrix, and even if it didn't, it can't add all objects from all projects on the expense to one loong object string.
      if (nonblank(Exprw.PRCode)) then begin
        PRr.Code = Exprw.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          if (nonblank(otxt)) then begin
            otxt = otxt & ",";
          end;          
          otxt = otxt & PRr.Objects;
        end;        
      end;
*/
      if (nonblankdate(Exprw.ExpDate)) then begin
        td = Exprw.ExpDate;
      end else begin
        td = Expp.TransDate;
      end;    
      rowcurf = false;
      rs = blankval;
      if (nonblank(Exprw.BankCurncy)) then begin
        rs = Exprw.BaseSum;
      end;
      if (rs==0) then begin
        if ((ETb.ExpRateCostAcc!=0) and ((nonblankdate(Exprw.ExpDate)) and (nonblank(Expp.CurncyCode)) and (Exprw.ExpDate!=Expp.TransDate))) then begin
          rateroundof = true;
          GetFullCurncyRate(Expp.CurncyCode,Exprw.ExpDate,fr,to1,to2,br1,br2);
          rs = MulRateToBase1(Expp.CurncyCode,Exprw.Sum,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          rowcurf = true;
        end else begin
          rs = MulRateToBase1(Expp.CurncyCode,Exprw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        end;  
      end;
      vatcod = Exprw.VATCode;
      GetVATCodeAccNumbers(vatcod,svatacc,pvatacc);
//      vatcod = TaxTemplateVATCodeOnTRRows(Exprw.TaxTemplateCode,vatcod);
      rvatval = blankval;
      if (nonblank(Exprw.BankCurncy)) then begin
        rvatval = Exprw.BaseVATSum;
      end;
      if (rvatval==0) then begin
        if ((ETb.ExpRateCostAcc!=0) and ((nonblankdate(Exprw.ExpDate)) and (nonblank(Expp.CurncyCode)) and (Exprw.ExpDate!=Expp.TransDate))) then begin
          rvatval = MulRateToBase1(Expp.CurncyCode,Exprw.VATSum,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        end else begin
          rvatval = MulRateToBase1(Expp.CurncyCode,Exprw.VATSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        end;  
      end;
      rs = rs - rvatval;
      curval = Exprw.Sum - Exprw.VATSum;
      if (GetAccNamVAT(Exprw.AccNumber,tstr,vatcod2,20)) then begin
      end;

      if (CheckTTRPerRow("ExpVc",Exprw.AccNumber,Exprw.Objects,dc1,taccnumber,1)) then begin end;      
      if (blank(Exprw.BankCurncy)) then begin
        if ((ETb.ExpRateCostAcc!=0) and ((nonblankdate(Exprw.ExpDate)) and (nonblank(Expp.CurncyCode)) and (Exprw.ExpDate!=Expp.TransDate))) then begin
          AddEuroCurncyTrRow(gTRp,Exprw.AccNumber,Exprw.Objects,vatcod,Exprw.Comment,rs,false,dc1,totsum,Expp.CurncyCode,fr,to1,to2,br1,br2,curval,blankval,-1,false,taccnumber);
        end else begin
          AddEuroCurncyTrRow(gTRp,Exprw.AccNumber,Exprw.Objects,vatcod,Exprw.Comment,rs,false,dc1,totsum,Expp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,curval,blankval,-1,false,taccnumber);
        end;
      end else begin
        AddEuroCurncyTrRow(gTRp,Exprw.AccNumber,Exprw.Objects,vatcod,Exprw.Comment,rs,false,dc1,totsum,Exprw.BankCurncy,Exprw.FrRateBankVal,Exprw.ToRateB1BankVal,Exprw.ToRateB2BankVal,Exprw.BaseRate1BankVal,Exprw.BaseRate2BankVal,curval,blankval,-1,false,taccnumber);
      end;
      if (rvatval!=0) then begin
        if (GetAccName(pvatacc,tstr,60)==false) then begin
          res = 1912;
          goto LMakeTransFromExp;
        end;
        svatval = svatval + rvatval;
        if (CheckTTRPerRow("ExpVc",pvatacc,"",dc1,taccnumber,1)) then begin end;      
        if (blank(Exprw.BankCurncy)) then begin
          if ((ETb.ExpRateCostAcc!=0) and ((nonblankdate(Exprw.ExpDate)) and (nonblank(Expp.CurncyCode)) and (Exprw.ExpDate!=Expp.TransDate))) then begin
            AddEuroCurncyTrRow(gTRp,pvatacc,"",AddVATCodeToVATAccRows(vatcod),tstr,rvatval,true,dc1,totsum,Expp.CurncyCode,fr,to1,to2,br1,br2,Exprw.VATSum,blankval,-1,false,taccnumber);
          end else begin
            AddEuroCurncyTrRow(gTRp,pvatacc,"",AddVATCodeToVATAccRows(vatcod),tstr,rvatval,true,dc1,totsum,Expp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Exprw.VATSum,blankval,-1,false,taccnumber);
          end;        
        end else begin
          AddEuroCurncyTrRow(gTRp,pvatacc,"",AddVATCodeToVATAccRows(vatcod),tstr,Exprw.BaseVATSum,true,dc1,totsum,Exprw.BankCurncy,Exprw.FrRateBankVal,Exprw.ToRateB1BankVal,Exprw.ToRateB2BankVal,Exprw.BaseRate1BankVal,Exprw.BaseRate2BankVal,Exprw.VATSum,blankval,-1,false,taccnumber);
        end;
      end;    
      if (currencyperrowf) then begin
        if (blank(Exprw.BankCurncy)) then begin
          fr = Expp.FrRate;
          to1 = Expp.ToRateB1;
          to2 = Expp.ToRateB2;
          br1 = Expp.BaseRate1;
          br2 = Expp.BaseRate2;
        end else begin
          fr = Exprw.FrRateBankVal;
          to1 = Exprw.ToRateB1BankVal;
          to2 = Exprw.ToRateB2BankVal;
          br1 = Exprw.BaseRate1BankVal;
          br2 = Exprw.BaseRate2BankVal;
        end;

        res = CheckObjs(persacc,otxt,tstr);
        if (res!=0) then begin
          if (res==1083) then begin res = 20019; end;
           goto LMakeTransFromExp;
        end;
        if (CheckTTRPerRow("ExpVc",persacc,otxt,dc2,taccnumber,0)) then begin end;      
        AddEuroCurncyTrRow(gTRp,persacc,otxt,"",perstr,Exprw.BaseSum,true,dc2,totsum,Exprw.BankCurncy,fr,to1,to2,br1,br2,Exprw.Sum,blankval,-1,false,taccnumber);
      end;
/*      moved down, current rate for user account always, Latvia Estonia
      if ((nonblankdate(Exprw.ExpDate)) and (nonblank(Expp.CurncyCode)) and (Exprw.ExpDate!=Expp.TransDate)) then begin
        rs = MulRateToBase1(Expp.CurncyCode,Exprw.Sum,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        AddEuroCurncyTrRow(gTRp,persacc,otxt,"",perstr,rs,false,dc2,totsum,Expp.CurncyCode,fr,to1,to2,br1,br2,Exprw.Sum,blankval,-1,false,"");
      end else begin
        rs = MulRateToBase1(Expp.CurncyCode,Exprw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        AddEuroCurncyTrRow(gTRp,persacc,otxt,"",perstr,rs,true,dc2,totsum,Expp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Exprw.Sum,blankval,-1,false,"");
      end;                   
*/      
    end;
  end;

  if (currencyperrowf==false) then begin
    rs = MulRateToBase1(Expp.CurncyCode,Expp.PayVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    res = CheckObjs(persacc,otxt,tstr);
    if (res!=0) then begin
      if (res==1083) then begin res = 20019; end;
       goto LMakeTransFromExp;
    end;
    if (CheckTTRPerRow("ExpVc",persacc,otxt,dc2,taccnumber,0)) then begin end;      
    AddEuroCurncyTrRow(gTRp,persacc,otxt,"",perstr,rs,true,dc2,totsum,Expp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Expp.PayVal,blankval,-1,false,taccnumber);
  end;

  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(Expp,i,Exprw);
    switch (Exprw.stp) begin
      case 1:
        if (nonblank(Exprw.PRCode)) then begin
          res = ExpVc_PostWIP(gTRp,PRAb,Expp,Exprw,dc1,dc2,frrate,torate1,torate2,baserate1,baserate2,totsum);
          if (res!=0) then begin
             goto LMakeTransFromExp;
          end;
        end;
    end;
  end;

  if ((ETb.ExpRateCostAcc!=0) and (rateroundof)) then begin
    if (totsum!=0) then begin
      if (totsum>0) then begin
        if (GetAccName(APb.RateGainAcc,tstr,60)==false) then begin
          res = 1917;
          goto LMakeTransFromExp;
        end;
        t = totsum;
        if (CheckTTRPerRow("ExpVc",APb.RateGainAcc,"",dc2,taccnumber,0)) then begin end;      
        AddEuroTrRow(gTRp,APb.RateGainAcc,"","",tstr,t,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
      end else begin
        if (GetAccName(APb.RateLossAcc,tstr,60)==false) then begin
          res = 1917;
          goto LMakeTransFromExp;
        end;
        t = totsum;
        if (CheckTTRPerRow("ExpVc",APb.RateLossAcc,"",dc2,taccnumber,0)) then begin end;      
        AddEuroTrRow(gTRp,APb.RateLossAcc,"","",tstr,t,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
      end;
/*      
      if (GetAccName(ARAccRec.RateRndOffAcc,tstr,60)==false) then begin
        res = 1904;
        goto LMakeTransFromExp;
      end;
      t = totsum;
      if (CheckTTRPerRow("ExpVc",ARAccRec.RateRndOffAcc,"",dc2,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,ARAccRec.RateRndOffAcc,"","",tstr,t,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
*/      
    end;
  end;
  if (totsum!=0) then begin
    res = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"ExpVc",dc2,true,false,totsum,totsum);
    if (res!=0) then begin
      goto LMakeTransFromExp;
    end;
  end;
  AddTransAutoTransRows(gTRp);
  res = 0;
LMakeTransFromExp:;
  MakeTransFromExp = res;
  RETURN;
END;

global
updating function LongInt ExpVcRecordCheck(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ExpTBlock ETb;
  record AccVc Accr;
  record PRVc PRr;
  record INVc INr;
  record TRVc gTRp;
  row ExpVc Exprw;  
  row ExpVc Exp2rw;
  Integer i,rwcnt,prstat,errcode;
  Integer j,jrwcnt;
  LongInt oldnr,newnr;
  Boolean transf,gentrans,check,unokf,found;
  Integer insertmode,updatemode;
  string 255 errstr;
  string 255 tstr,ckey,obj;
  Integer theerrno;
  record ExpVc oldExpr;
  record APAccBlock APAccb;
  record PPVc PPr;
  row PPVc PPrw;
  val sum;
  Integer curvt;
  record CUVc VEr;
  record UserVc Userr;
  Integer err;
        
  res = 0;     
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = Expr.SerNr;
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  if (Expr.OKFlag==0) then begin//unok
    if (stat==updatemode) then begin
      if (Exp2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    if (IsUnOKAllowed("ExpVc",Expr.TransDate)==false) then begin
      RecordCheckError(1046,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LExpVcRecordCheck;
  end;
  if (stat==updatemode) then begin
    if (Expr.SerNr<=0) and (Exp2r.OKFlag==0) then begin
      Expr.SerNr = Exp2r.SerNr;
    end;
  end;  
  
  if ((Exp2r.OKFlag==1) and (stat==updatemode)) then begin goto LExpVcRecordCheck; end;//?
  transf = false;
  if (Expr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (Exp2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  BlockLoad(ETb);
  BlockLoad(APAccb);
  rwcnt = MatRowCnt(Expr);
  if (Expr.SerNr<=0) then begin
    Expr.SerNr = NextSerNr("ExpVc",Expr.TransDate,newnr,false,"");
  end;
  if (SerNrTestExpVc(Expr.SerNr,Expr.TransDate,gentrans)==false) then begin
    if (check) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
      res = -1; 
      goto LExpVcRecordCheck;
    end;
  end;
  if (check==false) then begin
    goto LExpVcRecordCheck_GenTrans;
  end;
  if (Date2Test("ExpVc",Expr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LExpVcRecordCheck;
  end;
  if (Date2Test("ExpVc",Expr.DocDate,"DocDate",-1)==false) then begin
    res = -1;
    goto LExpVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,Expr.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LExpVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,Expr.DocDate,"DocDate",-1)) then begin
    res = -1;
    goto LExpVcRecordCheck;
  end;
  if (blank(Expr.Person)) then begin
    RecordCheckError(1028,"",-1,"Person");      
    res = -1; 
    goto LExpVcRecordCheck;
  end;
  if ((check) and (transf)) then begin//newapprovals
    if (Expr.PayVal==0) and (Expr.BasePayVal==0) then begin
      RecordCheckError(1210,"",0,"Sum");      
      res = -1; 
      goto LExpVcRecordCheck;
    end;
  end;
  theerrno = CheckUsers(Expr.Person,"",tstr,false);  
  if (theerrno!=0) then begin
    RecordCheckError(theerrno,tstr,-1,"Person");      
    res = -1;
    goto LExpVcRecordCheck;
  end;
  Userr.Code = Expr.Person;
  if (ReadFirstMain(Userr,1,true)) then begin
    err = CheckObjs("",Userr.PersObjx,tstr);
    if (nonblank(tstr)) then begin
      RecordCheckError(err," " & tstr,-1,"Person");      
      res = -1;
      goto LExpVcRecordCheck;
    end; 
  end;
  errcode = CheckRates(Expr.CurncyCode,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LExpVcRecordCheck;
  end;          
  if (ETb.expDemandSign!=0) then begin
    if (Expr.OKFlag==1) then begin
      if (DidYouAuthorize(Expr.OKSign)==false) then begin
        RecordCheckError(1293," " & Expr.Person,-1,"OKSign");      
        res = -1; 
        goto LExpVcRecordCheck;
      end;
    end;
  end;  
  for (i = 0 ; i<rwcnt;i=i+1) begin
    MatRowGet(Expr,i,Exprw);
    switch (Exprw.stp) begin
      case kExpenseRowTypePersonnelPayment:
        PPr.SerNr = Exprw.PPNr;
        if (ReadFirstMain(PPr,1,true)) then begin
          if (Exprw.PPRow<MatRowCnt(PPr)) then begin
            MatRowGet(PPr,Exprw.PPRow,PPrw);

            sum = Exprw.Sum;
            for (j=0;j<i;j=j+1) begin
              MatRowGet(Expr,j,Exp2rw);
              switch (Exp2rw.stp) begin
                case kExpenseRowTypePersonnelPayment:
                  if (Exprw.PPNr==Exp2rw.PPNr) and (Exprw.PPRow==Exp2rw.PPRow) then begin
                    sum = sum + Exp2rw.Sum; 
                  end;
              end;
            end;
            if (sum>(PPrw.PayVal-PPrw.ExpUsedPayVal)) then begin
              RecordCheckError(20878,"",i,"Sum");      
              res = -1; 
              goto LExpVcRecordCheck;
            end;
          end;
        end;
      case kExpenseRowTypeNormal:
        if (nonblank(Exprw.ACShort)) then begin
          tstr = "";
          GetACShortAccount(Exprw.ACShort,tstr,obj);
          if (blank(tstr)) then begin
            RecordCheckError(1010,"",i,"ACShort");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;
        end;
        if (blank(Exprw.AccNumber)) then begin
          RecordCheckError(1010,"",i,"AccNumber");      
          res = -1; 
          goto LExpVcRecordCheck;
        end;
        if (nonblank(Exprw.AccNumber)) then begin
          Accr.AccNumber = Exprw.AccNumber;
          if (ReadFirstMain(Accr,1,true)==false) then begin
            RecordCheckError(1007,Exprw.AccNumber,i,"AccNumber");      
            res = -1; 
            goto LExpVcRecordCheck;
          end else begin
            if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
              RecordCheckError(1084,Exprw.AccNumber,i,"AccNumber");      
              res = -1; 
              goto LExpVcRecordCheck;
            end;          
          end;
          errcode = CheckObjs(Exprw.AccNumber,Exprw.Objects,errstr);
          if (errcode!=0) then begin
            RecordCheckError(errcode,errstr,i,"Objects");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;
        end;
        if (nonblank(Exprw.DocNr)) then begin
          errcode = VIWithTheSupplierInvoiceNo(Expr.SerNr,Exprw.VECode,Exprw.DocNr);
          if (errcode>0) then begin
            if (APAccb.NoInvoiceWithSameInvoiceNr!=0) then begin
              RecordCheckError(1547," ",i,"DocNr");      
              res = -1;
              goto LExpVcRecordCheck;
            end else begin
              switch (errcode) begin
                case 1: MessageBox(22045," " & Exprw.DocNr);
                case 2: MessageBox(22033," " & Exprw.DocNr);
              end;
            end;
          end;   
        end;
        if (nonblank(Exprw.Item)) then begin
          if (Exprw.qty<=0) then begin
            RecordCheckError(1058,"",i,"qty");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;
          INr.Code = Exprw.Item;
          if (ReadFirstMain(INr,1,true)==false) then begin
            RecordCheckError(1233,"",i,"Item");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;
          if (INr.Terminated>0) then begin
            RecordCheckError(1266,"",i,"Item");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;
        end;
        if (nonblank(Exprw.PRCode)) then begin
          if (blank(Exprw.Item)) then begin
            RecordCheckError(1058,"",i,"Item");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;  
          if (Exprw.qty<=0) then begin
            RecordCheckError(1058,"",i,"Item");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;                
          PRr.Code = Exprw.PRCode;
          if (ReadFirstMain(PRr,1,true)==false) then begin
            RecordCheckError(1120,Exprw.PRCode,i,"PRCode");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;
          if (PRr.Terminated>0) then begin
            RecordCheckError(1236,"",i,"PRCode");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;          
          if (IsPRPhaseLocked(Exprw.PRCode,Expr.TransDate,tstr)) then begin
            RecordCheckError(20408," " & tstr,i,"PRCode");      
            res = -1;
            goto LExpVcRecordCheck;
          end;          
          switch (PRr.TBIVItemsUsage) begin
            case 0:
            case 1:
              if (TBIVItemsUsage(PRr,INr,Exprw.qty)) then begin
                MessageBox(20409,"");
              end;
            case 2:
              if (TBIVItemsUsage(PRr,INr,Exprw.qty)) then begin
                RecordCheckError(20409,"",i,"PRCode");      
                res = -1;
                goto LExpVcRecordCheck;
              end;
          end;
          if (UserCanAction("DisallowPostPRActualsfornonPRMan",false)) then begin
            if (CheckProjectMember(PRr)==false) then begin 
               RecordCheckError(1274,StringFromStringSet(3,"DisallowPostPRActualsfornonPRMan"),i,"PRCode");            
               res = -1;
               goto LExpVcRecordCheck;
            end;   
          end;
        end;
        prstat = ProjectAccount(Exprw.AccNumber,Exprw.PRCode);
        switch (prstat) begin
          case 1:
            RecordCheckError(1283,"",i,"AccNumber");      
            res = -1; 
            goto LExpVcRecordCheck;
          case 2:
            RecordCheckError(1284,"",i,"PRCode");      
            res = -1; 
            goto LExpVcRecordCheck;
        end;                    
        if ((nonblank(Exprw.VATCode)) and (IsVATCodeDefined(Exprw.VATCode)==false)) then begin
          RecordCheckError(1120,Exprw.VATCode,i,"VATCode");      
          res = -1; 
          goto LExpVcRecordCheck;
        end;
//        if (blank(Exprw.VATCode) and (Exprw.Sum!=0)) then begin
//          RecordCheckError(1134,"",i,"VATCode");      
//          res = -1; 
//          goto LExpVcRecordCheck;
//        end;
        if (nonblankdate(Exprw.ExpDate)) then begin
          if (Exprw.ExpDate>Expr.TransDate) then begin
            RecordCheckError(1142,"",i,"ExpDate");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;
        end;  
        if (nonblank(Exprw.DocNr)) then begin 
          found = true;
          ckey = "DocNr:" & Exprw.DocNr;          
          while (LoopKey(ckey,oldExpr,1,found)) begin
            if (oldExpr.SerNr!=Expr.SerNr) then begin
              MessageBox(20024,"." & chr(13) & USetStr(1847) & " " & oldExpr.SerNr);
              found = false;
            end;
          end;
        end;
    end;
    if (HasLocalization("ARG")) then begin
      if (nonblank(Exprw.VATCode)) then begin
        if (ValidSuppInvNo_Argentina(Exprw.DocNr)==false) then begin
          RecordCheckError(20858,"",i,"DocNr");      
          res = -1;
          goto LExpVcRecordCheck;
        end;
        curvt = VATType(Exprw.VATCode);
        if (curvt==kVATTypeNormal) then begin
          if (blank(Exprw.Identifier) ) then begin 
            RecordCheckError(1711,"",i,"Identifier");      
            res = -1; 
            goto LExpVcRecordCheck;
          end;  
        end;  
        if (blankdate(Exprw.ExpDate)) then begin 
          RecordCheckError(1058,"",i,"ExpDate");      
          res = -1; 
          goto LExpVcRecordCheck;
        end;  
      end;   
LExpVcRecordCheck_vatArgentinean:;            
    end;    
  end;
  if (IsStandardProduct) then begin
    transf = HasIntegratedNL and transf;
  end;
  if (transf) then begin
    if (UserCanAction("ExpenseOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"ExpenseOK"),-1,"SerNr");      
      res = -1; 
      goto LExpVcRecordCheck;
    end;
  end;
LExpVcRecordCheck_GenTrans:;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromExp(gTRp,Expr,false);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1; 
      goto LExpVcRecordCheck;
    end;
  end;
  if (transf) then begin
    if ((gTRp.Number>0) and (gTRp.IntYc==ExpYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        RecordCheckError(1085,tstr,-1,"SerNr");      
        res = -1;
        goto LExpVcRecordCheck;
      end;
      SaveTrans(gTRp);
      AddTTrans_ExpVc(gTRp,Expr);
    end;    
  end;
LExpVcRecordCheck:;
  if (res!=0) then begin Expr.SerNr = oldnr; end;
  ExpVcRecordCheck = res;
  RETURN;
END;

global
function LongInt ExpVcRecordReset(var record ExpVc Expr,record ExpVc Exp2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  Expr.OKFlag = 0;
  ExpVcRecordReset = res;
  RETURN;
END;

procedure CleanExpDocNr(record ExpVc Expp)
BEGIN
  row ExpVc Exprw;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(Expp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Expp,i,Exprw);
    if (Exprw.DocNr=="-1") then begin Exprw.DocNr = ""; end;
    MatRowPut(Expp,i,Exprw);
  end;
  RETURN;
END;

global
function LongInt ExpVcRecordImport(var record ExpVc Expr,record ExpVc Exp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
      
  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    curncy = Expr.CurncyCode;
    fr = Expr.FrRate;
    to1 = Expr.ToRateB1;
    to2 = Expr.ToRateB2;
    br1 = Expr.BaseRate1;
    br2 = Expr.BaseRate2;
    t = Expr.PayVal;
    ConvertToDualBase(curncy,Expr.TransDate,fr,to1,to2,br1,br2,t,true);
    Expr.CurncyCode = curncy;
    Expr.FrRate = fr;
    Expr.ToRateB1 = to1;
    Expr.ToRateB2 = to2;
    Expr.BaseRate1 = br1;
    Expr.BaseRate2 = br2;
    Expr.PayVal = t;
  end;  
  if (gBase1ToBase2) then begin
    br1 = Expr.BaseRate1;
    br2 = Expr.BaseRate2;
    to1 = Expr.ToRateB1;
    to2 = Expr.ToRateB2;
    SwapM4Val(br1,br2);
    SwapM4Val(to1,to2);
    Expr.BaseRate1 = br1;
    Expr.BaseRate2 = br2;
    Expr.ToRateB1 = to1;
    Expr.ToRateB2 = to2;    
    ExpSumup(Expr,t);    
  end;
  Expr.StatFlag = 0;
  CleanExpDocNr(Expr);  
  ExpVcRecordImport = res;
  RETURN;
END;

global
function LongInt ExpVcRecordInvalidateTest(var record ExpVc Expr,record ExpVc Exp2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (UserCanAction("ExpInvalid",true)==false) then begin
    res = 0;
    MessageBox(34500,"");
    goto LExpVcRecordInvalidateTest;
  end;
  if (Expr.Invalid!=0) then begin
    res = 0;
    goto LExpVcRecordInvalidateTest;
  end;
  if (Expr.OKFlag==0) then begin
    res = 0;
    MessageBox(34500,"");
    goto LExpVcRecordInvalidateTest;
  end;
  if (Expr.OKFlag!=0) then begin
    if (DateLocked(Expr.TransDate,"ExpVc")) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end else begin
        MessageBox(34500,"");
      end;
      res = 0;
      goto LExpVcRecordInvalidateTest;
    end;
    if (DateWarned(Expr.TransDate,"ExpVc")) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
    end;
  end;
  Expr.Invalid = 1;  
LExpVcRecordInvalidateTest:;
  ExpVcRecordInvalidateTest = res;  
  RETURN;
END;
