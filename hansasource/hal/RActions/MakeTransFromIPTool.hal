external function val AbsoluteVal(val);
external procedure Base1ToBase2(var val,Date,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function Boolean GetARPayRate(LongInt skipipnr,LongInt cupnr,var val frrate,var val torate1,var val torate2,var val baserate1,var val baserate2,
                       string curncy,Date td)
BEGIN
  record ARPayHistVc ARPayHistr;
  record IPVc IPr;
  row IPVc IPrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  Integer i,rwcnt;
  Boolean found,foundprep,res;
  
  frrate = blankval;
  baserate1 = blankval;
  baserate2 = blankval;
  torate1 = blankval;
  torate2 = blankval;
  ARPayHistr.CUPNr = cupnr;  
  ARPayHistr.FileName = "IPVc";  
  foundprep = ReadFirstMain(ARPayHistr,2,true);
  if (foundprep==false) then begin
    ARPayHistr.CUPNr = cupnr;  
    ARPayHistr.FileName = "CLInVc";  
    foundprep = ReadFirstMain(ARPayHistr,2,true);
  end;
  if (foundprep) then begin
    switch (ARPayHistr.FileName) begin
      case "IPVc":
        IPr.SerNr = ARPayHistr.SerNr;
        found = ReadFirstMain(IPr,1,true);
    //    if (IPr.SerNr==skipipnr) then begin found = false; end;
        if (found) then begin
          found = false;
          rwcnt = MatRowCnt(IPr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IPr,i,IPrw);
            if (IPrw.CUPNr==cupnr) and (blank(IPrw.B1BankVal)==false) then begin
              if (IPrw.FrRateBankVal!=0) then begin frrate = IPrw.FrRateBankVal; end;
              if (IPrw.BaseRate1BankVal!=0) then begin baserate1 = IPrw.BaseRate1BankVal; end;
              if (IPrw.BaseRate2BankVal!=0) then begin baserate2 = IPrw.BaseRate2BankVal; end;
              if (IPrw.ToRateB1BankVal!=0) then begin torate1 = IPrw.ToRateB1BankVal; end;
              if (IPrw.ToRateB2BankVal!=0) then begin torate2 = IPrw.ToRateB2BankVal; end;      
    //          if (frrate!=0) or (torate1!=0) or (torate2!=0) or (baserate1!=0) or (baserate2!=0) then begin
              if (frrate!=0) or (torate1!=0) or (torate2!=0) then begin
                if (frrate==0) then begin frrate = 1.00; end;
                found = true;
                res = true;
              end;
              i = rwcnt;
            end;
          end;
        end; 
      case "CLInVc":
        CLInr.SerNr = ARPayHistr.SerNr;
        found = ReadFirstMain(CLInr,1,true);
    //    if (CLInr.SerNr==skipipnr) then begin found = false; end;
        if (found) then begin
          found = false;
          rwcnt = MatRowCnt(CLInr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CLInr,i,CLInrw);
            if (CLInrw.TransNr==cupnr) and (CLInrw.Type==4) then begin
              frrate = CLInr.FrRate;
              baserate1 = CLInr.BaseRate1;
              baserate2 = CLInr.BaseRate2;
              torate1 = CLInr.ToRateB1;
              torate2 = CLInr.ToRateB2;      
    //          if (frrate!=0) or (torate1!=0) or (torate2!=0) or (baserate1!=0) or (baserate2!=0) then begin
              if (frrate!=0) or (torate1!=0) or (torate2!=0) then begin
                if (frrate==0) then begin frrate = 1.00; end;
                found = true;
                res = true;
              end;
              i = rwcnt;
            end;
          end;
        end; 
    end;  
    if (found==false) then begin
//we need rate on 1st Prepayment date    
      GetFullCurncyRate(curncy,ARPayHistr.TransDate,frrate,torate1,torate2,baserate1,baserate2);
    end;
  end else begin
    GetFullCurncyRate(curncy,td,frrate,torate1,torate2,baserate1,baserate2);
  end;
  GetARPayRate = res;
  RETURN;
END;

global
procedure IPGetPrepaymentBaseAmounts(LongInt cupnr,val invval,var val b1,var val b2)
begin
  record ARPayHistVc ARPayHistr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  record BaseCurBlock BCb;
  val linvval;
  
  linvval = AbsoluteVal(invval);
  b1 = blankval;
  b2 = blankval;
  ARPayHistr.CUPNr = cupnr;  
  ARPayHistr.FileName = "IPVc";  
  if (ReadFirstMain(ARPayHistr,2,true)) then begin
    BlockLoad(BCb);
    IPr.SerNr = ARPayHistr.SerNr;
    if (ReadFirstMain(IPr,1,true)) then begin
      rwcnt = MatRowCnt(IPr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IPr,i,IPrw);
        if (IPrw.CUPNr==cupnr) then begin
          b1 = (IPrw.B1BankVal*linvval)/IPrw.InvVal;
          b2 = (IPrw.B2BankVal*linvval)/IPrw.InvVal;
          if (b2==0) then begin
            if (IPrw.RecCurncy==BCb.BaseCur2) then begin
              b2 = (IPrw.RecVal*linvval)/IPrw.InvVal;
            end;
            if (IPrw.BankCurncy==BCb.BaseCur2) then begin
              b2 = (IPrw.BankVal*linvval)/IPrw.InvVal;
            end;
          end;
          goto LIPGetPrepaymentBaseAmounts;
        end;
      end;
    end;
LIPGetPrepaymentBaseAmounts:;  
    if (b1==0) then begin
      b1 = (ARPayHistr.BookVal*linvval)/ARPayHistr.Val;
    end;
    if (b2==0) then begin
      Base1ToBase2(b1,ARPayHistr.TransDate,b2);
    end;
  end;  
  return;
end;

global
procedure IPGetVATCodeTAX1AccNumbers(record VATCodeBlock VATRec,string vatcode,var string tax1acc,var string psvatacc)
begin
  row VATCodeBlock vatrw;
  Integer i,rwcnt;

  BlockLoad(VATRec);
  tax1acc = "";  
  psvatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      tax1acc = vatrw.Tax1Acc;
      psvatacc = vatrw.PaySalesVATAcc;
      i = rwcnt;
    end;  
  end;  
  return;
end;

global
procedure IPGetVATCodeAccNumbers(record VATCodeBlock VATRec,string vatcode,var string svatacc,var string psvatacc)
begin
  row VATCodeBlock vatrw;
  Integer i,rwcnt;

  BlockLoad(VATRec);
  svatacc = "";  
  psvatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      svatacc = vatrw.SalesVATAcc;
      psvatacc = vatrw.PaySalesVATAcc;
      i = rwcnt;
    end;  
  end;  
  return;
end;

global
function string 255 GetCustomerOnAccountAC(string custcode)
begin
  string 255 res;
  record AccBlock ARAccb;
  record CUVc CUr;
  record CCatVc CCatr;  

  BlockLoad(ARAccb);
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CCatr.Code = CUr.CustCat; 
    if (ReadFirstMain(CCatr,1,true)) then begin
      res = CCatr.OnAccAcc;
    end;
  end;
  if (blank(res)) then begin
    res = ARAccb.OnAccAcc;
  end;
  GetCustomerOnAccountAC = res;
  RETURN;
END;
