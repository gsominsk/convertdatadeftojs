external updating procedure SaveResEventTypers( var record ResEventTypeVc);

global
function LongInt ResEventTypeVcRecordDefaults(var record ResEventTypeVc r1,record ResEventTypeVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  r1.SerNr = NextSerNr("ResEventTypeVc",CurrentDate,-1,false,"");
  
  ResEventTypeVcRecordDefaults = res;  
  return;
end;

global
function LongInt ResEventTypeVcRecordDuplicate(var record ResEventTypeVc r1,record ResEventTypeVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  r1.SerNr = NextSerNr("ResEventTypeVc",CurrentDate,-1,false,"");
  
  ResEventTypeVcRecordDuplicate = res;  
  return;
end;

global
updating function LongInt ResEventTypeVcRecordSave(var record ResEventTypeVc r1,record ResEventTypeVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  SaveResEventTypers( r1 );
  ResEventTypeVcRecordSave= res;
  return;
end;

global
updating function LongInt ResEventTypeVcRecordUpdate(var record ResEventTypeVc r1,record ResEventTypeVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  SaveResEventTypers( r1 );
  ResEventTypeVcRecordUpdate = res;  
  return;
end;

global
updating function LongInt ResEventTypeVcRecordImport(var record ResEventTypeVc r1,record ResEventTypeVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  SaveResEventTypers( r1 );
  ResEventTypeVcRecordImport = res;
  return;
end;

global
updating function LongInt ResEventTypeVcRecordRemove(var record ResEventTypeVc r1,record ResEventTypeVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  SaveResEventTypers( r1 );
  ResEventTypeVcRecordRemove = res;
  return;
end;

global
function LongInt ResEventTypeVcRecordCheck(var record ResEventTypeVc r1,record ResEventTypeVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt,cerror;
  Row ResEventTypeVc ResEventrw;
  Boolean errflg;
  Record ExcurTypeVc ExcurType;
  
  errflg = true; res= 0;
  rwcnt= MatRowCnt(r1);
  for(i=0;i<rwcnt;i=i+1) begin
    MatRowGet(r1,i,ResEventrw);
    if NonBlank(ResEventrw.EventType) then begin
      // cerror= SearchExcurType( ResEventrw.EventType, ResEventrw.TransDate ); HORRIBLE
      ExcurType.Code = ResEventrw.EventType;
      if readfirstmain(ExcurType,1,true) then begin
        if ((ExcurType.FromDate <= ResEventrw.TransDate) and (ExcurType.ToDate >= ResEventrw.TransDate)) then begin
          errflg = false;
        end;
      end;
    end;
  end;   
  if (errflg) then begin 
    MessageBox(0,USetStr(2140)); 
    res= -1;
  end;
  ResEventTypeVcRecordCheck = res; 
   
  return;
end;
