external function Boolean FindTheUser(var record UserVc);
external procedure VerifyRowObjects(string,string,string,string,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external function Boolean IsEnterprise();
external function Boolean ValidInternationalCreditorReference(string);
external function Integer VerifyTaxTemplateCode(string,var string);
external function Boolean UseTaxTemplatesforTaxCalc();
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function Boolean TBIVItemsUsage(record PRVc,record INVc,val);
external function Boolean CheckProjectMember(record PRVc);
external function Boolean IsPRPhaseLocked(string,Date,var string);
external function LongInt VIVc_PrepaymentAlreadyUsed(LongInt,LongInt,val);
external function Integer GetCreditedVInvoiceType(record VIVc);
external function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Integer VATType(string);
external function Boolean ValidSuppInvNo_Argentina(string);
external function Boolean check_ref(string);
external updating procedure AddTTrans_VIVc(record TRVc,record VIVc);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external procedure FillAmForVarianceVI(record VIVc);
external function Integer MakeTransFromVI(record TRVc,record SMVc,record VIVc,Boolean,Boolean);
external function Boolean CheckPOCQStatVECode(LongInt, string,var Integer);
external function Integer ProjectAccount(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Integer IsUnOKAllowed_VIVc(record VIVc);
external updating function Boolean SaveSim(record SMVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Integer CheckCLOutAmount(LongInt,val,string);
external function Boolean CLOutforVIRecordExists(LongInt,string,var LongInt);
external function Boolean GetPMgentrans(string);
external function Integer PMCheckType(string,var string,var string);
external function Boolean CheckPDExists(string);
external procedure VISumup(record VIVc,var val);
external function Boolean IsControlAccount(string,Boolean,Boolean);
external function Boolean VATCodeExists(string);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function Boolean CurncyCodeRegistered(string);
external function Integer CheckObjs(string,string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestVIVc(LongInt,Date,var Boolean);
external function Integer CashSerNumberTest(string,val,string,LongInt,var Boolean);
external function Boolean RecordSupportExists(string,string,LongInt);
external function LongInt GetCurUserLastNr(string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean HasPLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean HasModNL();
external function Boolean HasModTS();
       
function Boolean CheckPrepaymentAmount(record VIVc VIp,Integer rwcnt)
begin
  Integer i;
  row VIVc VIrw;
  Boolean res;
  val t;
  
  res = true;
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if (VIrw.PrepayNr!=-1) then begin
      t = VIrw.PrepayAmount + t;
    end;
  end;
  if (t>VIp.PayVal) then begin
    res = false;
  end;
  CheckPrepaymentAmount = res;
  return;
end;

function Boolean PersTest(string argtxt)
begin
  record UserVc Userr;
  Boolean res;
  string 255 tstr;
  Integer pos;
  
  if (nonblank(argtxt)) then begin
    pos = 0;
    ExtractObj(argtxt,pos,tstr);
    while (nonblank(tstr)) begin
      Userr.Code = tstr;
      res = FindTheUser(Userr);
//      res = ReadFirstMain(Userr,1,true);
      if (res==false) then begin
        goto LPersTest;
      end;
      ExtractObj(argtxt,pos,tstr);
    end;  
  end;
LPersTest:;  
  PersTest = res;
  return;
end;

procedure CheckForAccrual(record VIVc VIp)
begin
  row VIVc VIrw;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if (nonblank(VIrw.PeriodCode)) then begin
      MessageBox(1497,"");
    end;
  end;
  return;
end;

updating function Integer ConnectCreditNotetoIV(var record VIVc VIr)
begin
  Integer res;
  record IVVc IVr;
  record APAccBlock APb;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  record LocalMachineBlock LMb;

  if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) and (VIr.CredInv>0) then begin
    BlockLoad(APb);
    if (APb.ConnectCreditNotetoIV!=0) then begin
      res = 1086;
      RecordNew(IVr);
      IVr.CustCode = VIr.VECode;
      PasteCust2InInv(IVr,LMb,"",true,warning,errstr,prepstr,invdatewarn,transdatewarn);
      IVr.Addr0 = VIr.VEName;
      IVr.CurncyCode = VIr.CurncyCode;
      IVr.FrRate = VIr.FrRate;
      IVr.BaseRate1 = VIr.BaseRate1;
      IVr.BaseRate2 = VIr.BaseRate2;
      IVr.ToRateB1 = VIr.ToRateB1;
      IVr.ToRateB2 = VIr.ToRateB2;  
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");            
      IVr.OKFlag = 1;
      if (RecordStore(IVr,false)) then begin
        VIr.IVNr = IVr.SerNr;
        res = 0;
      end;
    end;
  end;
  ConnectCreditNotetoIV = res;
  return; 
end;

global
function Integer VIWithTheSupplierInvoiceNo(LongInt skipinv,string vecode,string invoicenr)
begin
  Integer res;
  record VIVc VIr;
  Boolean found,testf;
  record ExpVc Expr;
  row ExpVc Exprw;
  Integer i,rwcnt;
  
  res = 0;
  VIr.InvoiceNr = invoicenr;
  VIr.VECode = vecode;    
  found = true;
  while (LoopKey("InvoiceNr",VIr,2,found)) begin
    if (VIr.InvoiceNr!=invoicenr) then begin found = false; end;
    if (VIr.VECode!=vecode) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (skipinv>0) then begin
        if (VIr.SerNr==skipinv) then begin testf = false; end;
      end;
//      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin testf = false; end;
      if (testf) then begin
        res = 1;
        goto LVIWithTheSupplierInvoiceNo;
      end;
    end;
  end;
  found = true;
  while (LoopKey("DocNr:" & invoicenr,Expr,1,found)) begin
    if (found) then begin
      testf = true;
      if (skipinv>0) then begin
        if (Expr.SerNr==skipinv) then begin testf = false; end;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(Expr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Expr,i,Exprw);
          if (Exprw.DocNr==invoicenr) then begin
            if (Exprw.VECode==vecode) then begin
              res = 2;
              goto LVIWithTheSupplierInvoiceNo;
            end;
          end;
        end;
      end;
    end;
  end;
LVIWithTheSupplierInvoiceNo:;  
  VIWithTheSupplierInvoiceNo = res;
  return; 
end;

function Boolean RequiredAssetMissing(string accnumber,string inventorynr)
begin
  Boolean res;
  record AT2AccBlock ATAb;
  record AC2Block ACb;
  row AC2Block ACbrw;
  Integer i,rwcnt;
  
  BlockLoad(ATAb);
  if (ATAb.RequireAssetNumberonVI!=0) then begin
    BlockLoad(ACb);
    rwcnt = MatRowCnt(ACb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ACb,i,ACbrw);
      if (accnumber==ACbrw.Asset1Acc) or (accnumber==ACbrw.Asset2Acc) then begin
        if (blank(inventorynr)) then begin
          res = true;
          goto LRequiredAssetMissing;
        end;
      end;
    end;
  end;
LRequiredAssetMissing:;  
  RequiredAssetMissing = res;
  return;
end;

global
updating function LongInt VIVcRecordCheck(record VIVc VIp,record VIVc VI2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record MainCLBlock MainCLRec;
  record VITBlock VITb;
  record SRBlock SRRec;
  record AutSimPerVc ASPr;
  record VIVc VI2r;
  record AccVc Accr;
  record CUVc VEr;
  record INVc INr;
  record OPPVc OPPr;
  record PRVc PRr;
  record TRVc gTRp;
  record SMVc gSMp;
  record OPPVc APPayr;
  record OPPVc APPay2r;
  row VIVc VIrw;
  row VIVc VI2rw;
  Integer cashres,prstat,errcode;
  Integer i,j,rwcnt;
  LongInt oldnr,ivnr;
  LongInt newnr;
  Boolean transf,gentrans,check,unokf,acceptgrf;
  Boolean ptrnsf,nousersernr,found,testf;
  Integer error;
  string 255 tstr,objstr,errstr;
  val temp,prepaysum,prepayb1sum;
  LongInt clout;
  Integer insertmode,updatemode;
  Integer curcomp;
  record APAccBlock APAccb;
  record AcceptSetBlock ASr;
  string 20 viitgroup,viitgroup2;
  record AcceptGroupVc AcceptGroupr;
  record BankVc Bankr;
  record APVc APr;
  Boolean morethanonevat,somelinesmisvat,controlaccf;
  string 10 vatc;
  Integer firstlinewithblankvat,creditedinvtype;
  Integer prevvt,curvt;
  record VEPRRetentionVc VEPRRr;
  record TaxTemplateVc TTr;
  record AT2UnitVc AT2Unitr;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  Boolean initotcheckf;    

  res = 0;
  curcomp = CurrentCompany;    
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = VIp.SerNr;
  gentrans = true;
  morethanonevat = false;
  somelinesmisvat = false;
  firstlinewithblankvat = -1;
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  if (stat==updatemode) then begin
    if (VIp.SerNr<=0) and (VI2p.OKFlag==0) then begin
      VIp.SerNr = VI2p.SerNr;
    end;
  end;        
  if (VIp.Invalid==0) then begin
  if (VIp.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (VI2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  end;
  if (unokf) then begin
    error = IsUnOKAllowed_VIVc(VIp);
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LVIVcRecordCheck;
  end;
  BlockLoad(ASr);
  BlockLoad(SRRec);
  BlockLoad(MainCLRec);
  BlockLoad(VITb);
  BlockLoad(APAccb);
/*
why here ?   
  if (VIp.DueDate<VIp.InvDate) then begin
    RecordCheckError(20852,"",-1,"DueDate");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
*/  
  if ((VI2p.OKFlag==1) and (stat==updatemode)) then begin
    goto LVIVcRecordCheck;
  end;

  ptrnsf = false;
  if (VIp.PrelBook==1) then begin
    if (stat==insertmode) then begin ptrnsf = true; end;
    if (stat==updatemode) then begin
      if (VI2p.PrelBook==0) then begin ptrnsf = true; end;
    end;
  end;
  transf = false;
  if (VIp.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (VI2p.OKFlag==0) then begin transf = true; end;
    end;
  end;

  if (VIp.SerNr!=VI2p.SerNr) then begin
    gTRp.Number = VI2p.SerNr;
    gTRp.IntYc = PVYc;
    if (ReadFirstMain(gTRp,2,true)) then begin
      oldnr = VI2p.SerNr;
      RecordCheckError(1032,"",-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;        
    end;
  end;
  if (blank(VIp.PayDeal)) then begin
    RecordCheckError(1256,"",-1,"PayDeal");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  if (check) then begin
  if (VIp.DueDate<VIp.InvDate) then begin
    RecordCheckError(20852,"",-1,"DueDate");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  if (MainCLRec.CashCollection!=0) then begin
    if (CLOutforVIRecordExists(VIp.SerNr,"VIVc",clout)) then begin
      error = CheckCLOutAmount(clout,VIp.PayVal,VIp.CurncyCode);
      if (error!=0) then begin
        RecordCheckError(error,"",-1,"PayVal");      
        res = -1;
        goto L99VIVcRecordCheck;        
      end;
    end;  
    if (VIp.InvType==kInvoiceTypeEmployee or VIp.InvType==kInvoiceTypeCash or VIp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
      if (MainCLRec.PMControl!=0) then begin
        if (CheckPDExists(VIp.PayDeal)) then begin
          RecordCheckError(1277,"",-1,"PayDeal");      
          res = -1;
          goto L99VIVcRecordCheck;        
        end; 
        if (PMCheckType(VIp.PayDeal,tstr,tstr)==5) then begin
          if (GetPMgentrans(VIp.PayDeal)) then begin
            RecordCheckError(1277,"",-1,"PayDeal");      
            res = -1;
            goto L99VIVcRecordCheck;        
          end;
        end;
      end;
    end;
  end;  
  end;  
  if (VIp.SerNr<=0) then begin
    nousersernr = false;

    if ((VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) and (SRRec.LastCredVINr!=-1))  then begin
      newnr = SRRec.LastCredVINr;
      nousersernr = true;
      if (newnr==-1) then begin
        newnr = GetCurUserLastNr("VIVc");
      end;      
    end else begin
      newnr = GetCurUserLastNr("VIVc");
      if (newnr==-1) then begin
        newnr = SRRec.LastVINr;
      end;
    end;
    VIp.SerNr = NextSerNr("VIVc",VIp.TransDate,newnr,nousersernr,VIp.LangCode);
  end;
  if (check) then begin
    if (RecordSupportExists("APVc","VIVc",VIp.SerNr)) then begin
      RecordCheckError(1115,"",-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
    if (VIp.CredInv!=-1) then begin
      if (VIp.OKFlag!=0) then begin
        if (RecordSupportExists("APVc","VIVc",VIp.SerNr)) then begin
          RecordCheckError(1133,"",-1,"SerNr");      
          res = -1;
          goto L99VIVcRecordCheck;
        end;
      end;  
    end;    
  end;
  cashres = CashSerNumberTest(VIp.PayDeal,VIp.PayVal,"VIVc",VIp.SerNr,gentrans);
  if (cashres==99) then begin 
    res = -1; 
    goto L99VIVcRecordCheck; 
  end;
  if (cashres==12) then begin
    goto L12;
  end;
  if (SerNrTestVIVc(VIp.SerNr,VIp.TransDate,gentrans)==false) then begin
    if (check) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
L12:;
  if (check==false) then begin
    goto LVIVcRecordCheck_GenTrans;
  end;   
  if (Date2Test("VIVc",VIp.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto L99VIVcRecordCheck;
  end;
/*
Invoice may hapen in locked period they say  
  if (Date2Test("VIVc",VIp.InvDate,"InvDate",-1)==false) then begin
    res = -1;
    goto L99VIVcRecordCheck;
  end;
*/  
/*
  if (DisallowFutureDateCheck(true,VIp.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto L99VIVcRecordCheck;
  end;
*/  
  if (DisallowFutureDateCheck(true,VIp.InvDate,"InvDate",-1)) then begin
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  
  if (blank(VIp.VECode)) then begin
    RecordCheckError(1205,"",-1,"VECode");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  VEr.Code = VIp.VECode;
  if (ReadFirstMain(VEr,1,true)==false) then begin
    RecordCheckError(1120,VIp.VECode,-1,"VECode");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  errcode = CheckVATNrMask(VIp.VATNr,VEr.CountryCode,VEr.CustType,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,tstr,-1,"VATNr");      
    res = -1; 
    goto L99VIVcRecordCheck;
  end;
  if (HasLocalization("PRT")) then begin
    if (blank(VIp.VATNr)) then begin
      RecordCheckError(20275,VIp.VATNr,-1,"VATNr");      
      res = -1; 
      goto L99VIVcRecordCheck;
    end;
  end;
  if (VEr.blockedFlag!=0) then begin
    RecordCheckError(20872,VIp.VECode,-1,"VECode");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  if (VEr.OnHoldFlag!=0) then begin
    RecordCheckError(20869,VIp.VECode,-1,"VECode");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  if (VEr.VEType==0) then begin
    RecordCheckError(1120,VIp.VECode,-1,"VECode");      
    res = -1; 
    goto L99VIVcRecordCheck;
  end;
  if (nonblank(VEr.VECurncyCode)) then begin
    if (VEr.VECurncyCode!=VIp.CurncyCode) then begin
      RecordCheckError(1217,"",-1,"CurncyCode");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
  if (blank(VIp.CurncyCode)) then begin
    if ((VIp.FrRate!=0) or (VIp.ToRateB1!=0) or
        (VIp.ToRateB2!=0) 
//JJCUR        or (VIp.BaseRate1!=0) or (VIp.BaseRate2!=0)
        ) then begin
      RecordCheckError(1582,"",-1,"BaseRate1");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
/*most people dont want it
  if (nonblank(VIp.BankCode)) then begin
    Bankr.Code = VIp.BankCode;
    if (ReadFirstMain(Bankr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"BankCode");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
*/
  controlaccf = true;
  if (VIp.InvType==kInvoiceTypeEmployee or VIp.InvType==kInvoiceTypeCash or VIp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    controlaccf = false;
  end;
  if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    creditedinvtype = GetCreditedVInvoiceType(VIp);
    if (creditedinvtype==2) then begin
      controlaccf = false;
    end;
  end;
  if (nonblank(VIp.APAcc)) then begin
    Accr.AccNumber = VIp.APAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,VIp.APAcc,-1,"APAcc");      
      res = -1; 
      goto L99VIVcRecordCheck;
    end;    
  end;
  if (controlaccf) then begin
    if (IsControlAccount(VIp.APAcc,false,true)==false) then begin
      RecordCheckError(1082,"",-1,"APAcc");      
      res = -1; 
      goto L99VIVcRecordCheck;
    end;
  end;
  if (VITb.RequireRcvDate!=0) then begin
    if (blankdate(VIp.RcvDate)) then begin
      RecordCheckError(1058,"",-1,"RcvDate");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
    if (VIp.RcvDate<VIp.InvDate) then begin
      RecordCheckError(1053,"",-1,"RcvDate");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
  if (VITb.DisallowInvDateAfterTransDate!=0) then begin
    if (VIp.TransDate<VIp.InvDate) then begin
      RecordCheckError(20867,"",-1,"InvDate");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
  errcode = CheckRates(VIp.CurncyCode,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto L99VIVcRecordCheck;
  end;        
  errcode = CheckObjs(VIp.APAcc,VIp.Objects,errstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,errstr,-1,"Objects");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  if (CurncyCodeRegistered(VIp.CurncyCode)==false) then begin
    RecordCheckError(1582,"",-1,"CurncyCode");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  if (HasLocalization("FIN")) then begin
    if (ValidInternationalCreditorReference(VIp.RefStr)==false) then begin
      if (check_ref(VIp.RefStr)==false) then begin
        RecordCheckError(1201,"",-1,"RefStr");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
    end;
  end;
  if (HasLocalization("ARG")) then begin
    if (VIp.ExportFlag==kExportFlagDomestic) then begin
      if (ValidSuppInvNo_Argentina(VIp.InvoiceNr)==false) then begin
        RecordCheckError(20858,"",-1,"InvoiceNr");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
    end;
  end;
  if (stat==updatemode) then begin
    if ((VI2p.Invalid==0) and (VIp.Invalid!=0)) then begin
      if (VI2p.OKFlag!=0) then begin
        CheckForAccrual(VIp);
      end;
    end;
  end;
  if (VIp.OKFlag!=0) then begin
    if (VITb.trDemandSign2!=0) then begin
      if (PersTest(VIp.OKPersons)==false) then begin
        RecordCheckError(1203,"",-1,"OKPersons");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
    end;
  end;
  if (VIp.CredInv!=-1) then begin
    if (VIp.InvType!=kInvoiceTypeCredit and VIp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
      RecordCheckError(1958,"",-1,"PayDeal");      
      res = -1;
      goto L99VIVcRecordCheck;        
    end;
    VI2r.SerNr = VIp.CredInv;
    if (ReadFirstMain(VI2r,1,true)) then begin
      if (VI2r.Invalid!=0) then begin
        RecordCheckError(1282,"",-1,"CredInv");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;    
      if (VI2r.OKFlag==0) then begin
        RecordCheckError(2072,"",-1,"CredInv");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;    
      if (VI2r.InvType==kInvoiceTypeCredit or VI2r.InvType==kInvoiceTypeCreditSpecialSales) then begin
        RecordCheckError(1214,"",-1,"CredInv");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
      if (VIp.VECode!=VI2r.VECode) then begin
        RecordCheckError(1215,"",-1,"CredInv");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
      if (VIp.InvDate<VI2r.InvDate) then begin
        RecordCheckError(1142,"",-1,"InvDate");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
      if (VIp.CurncyCode!=VI2r.CurncyCode) then begin
        RecordCheckError(1217,"",-1,"CredInv");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
      if (APAccb.NoOverPayVI!=0) then begin
        if (VI2r.InvType!=kInvoiceTypeEmployee or VI2r.InvType!=kInvoiceTypeCash and VI2r.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
          APr.SerNr = VIp.CredInv;
          if (ReadFirstMain(APr,1,true)) then begin
            if (APr.RVal<(VIp.PayVal-VIp.WithHoldingTax)) then begin
              tstr = " " & VIp.PayVal & USetStr(20061);
              tstr = tstr & " " & APr.RVal;
              RecordCheckError(20060,tstr,-1,"PayVal");
              res = -1;
              goto L99VIVcRecordCheck;
            end;
          end else begin
            if (VIp.InvType==kInvoiceTypeCredit) then begin
              tstr = " " & VIp.PayVal & USetStr(20061);
              tstr = tstr & " " & "0.00";
              RecordCheckError(20060,tstr,-1,"PayVal");
              res = -1;
              goto L99VIVcRecordCheck;
            end;
          end;
        end;
      end;
    end else begin
      RecordCheckError(1290,"",-1,"CredInv");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
  if (CheckPOCQStatVECode(VIp.POCQStatNr,VIp.VECode,i)==false) then begin
    RecordCheckError(i,"",-1,"POCQStatNr");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  if (VIp.WithHoldingTax<>0) then begin
    if (VIp.WithHoldingTax > VIp.PayVal) then begin
      RecordCheckError(20050,"",-1,"WithHoldingTax");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
    errcode = CheckObjs(APAccb.WHTaxAcc,VIp.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
//  if (nonblank(VIp.InvoiceNr)) and (VIp.InvType!=kInvoiceTypeCredit and VIp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
  if (nonblank(VIp.InvoiceNr)) then begin
    errcode = VIWithTheSupplierInvoiceNo(VI2p.SerNr,VIp.VECode,VIp.InvoiceNr);
    if (errcode>0) then begin
      if (APAccb.NoInvoiceWithSameInvoiceNr!=0) then begin
        RecordCheckError(1547,"",-1,"InvoiceNr");      
        res = -1;
        goto L99VIVcRecordCheck;
      end else begin
        switch (errcode) begin
          case 1: MessageBox(22045,"");
          case 2: MessageBox(22033,"");
        end;
      end;
    end;
  end;

  prevvt = -1;
  rwcnt = MatRowCnt(VIp); 
  if ((VIp.OKFlag!=0) and (blank(VIp.PayVal))) then begin
    RecordCheckError(1030,"",-1,"PayVal");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    switch (VIrw.stp) begin
      case kInvoiceRowTypeEmployee:
        if (blank(VIrw.UserCode)) then begin
          RecordCheckError(1058,"",i,"UserCode");      
          res = -1;
          goto L99VIVcRecordCheck;
        end;
      case kInvoiceRowTypeWithholdingTax:
        if (blank(VIrw.WHTax)) then begin
          RecordCheckError(22032,"",i,"WHTax");      
          res = -1;
          goto L99VIVcRecordCheck;
        end;
        if (HasIntegratedNL and blank(VIrw.AccNumber)) then begin
          RecordCheckError(1010,"",i,"AccNumber");      
          res = -1;
          goto L99VIVcRecordCheck;
        end;
      case kInvoiceRowTypeRetention:
        if (HasIntegratedNL and blank(VIrw.AccNumber)) then begin
          RecordCheckError(1010,"",i,"AccNumber");      
          res = -1;
          goto L99VIVcRecordCheck;
        end;
        if (VIrw.Sum>=0) then begin
          if (nonblank(VIrw.PRCode)) then begin
            PRr.Code = VIrw.PRCode;
            if (ReadFirstMain(PRr,1,true)) then begin
              if (PRr.Terminated>0) then begin
                RecordCheckError(1236,"",i,"PRCode");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
            end else begin
              RecordCheckError(1232,"",i,"PRCode");      
              res = -1;
              goto L99VIVcRecordCheck;
            end;
            VEPRRr.VECode = VIp.VECode;
            VEPRRr.PRCode = VIrw.PRCode;
            if (ReadFirstMain(VEPRRr,2,true)) then begin
              if ((VEPRRr.RetSum - VEPRRr.RetInvd)<VIrw.Sum) then begin
                RecordCheckError(20411," " & VEPRRr.RetSum - VEPRRr.RetInvd,i,"Sum");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
            end;
          end else begin
            RecordCheckError(1232,"",i,"PRCode");      
            res = -1;
            goto L99VIVcRecordCheck;
          end;
        end;        
     case kInvoiceRowTypePrepayment:
          if (VIrw.PrepayNr>=0) then begin
            if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
              RecordCheckError(2131,"",i,"PrepayNr");      
              res = -1; 
              goto L99VIVcRecordCheck;
            end;
            prepaysum = VIrw.PrepayAmount;
//what if old verison with nothing in Sum ?             
            prepayb1sum = VIrw.Sum;
            for (j=0;j<i;j=j+1) begin
              MatRowGet(VIp,j,VI2rw);
              if (VI2rw.PrepayNr==VIrw.PrepayNr) then begin
                prepaysum = prepaysum + VI2rw.PrepayAmount;
                prepayb1sum = prepayb1sum + VI2rw.Sum;
//what if old verison with nothing in Sum ?             
//                prepaysum = prepaysum + MulRateToBase1(VIp.CurncyCode,VI2rw.PrepayAmount,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
              end;
            end;
            if (prepaysum>(VIp.PayVal - VIp.WithHoldingTax)) then begin
              RecordCheckError(20878,"",i,"PrepayAmount");      
              res = -1; 
              goto L99VIVcRecordCheck;
            end;
            APPayr.SerNr = VIrw.PrepayNr; 
            if (ReadFirstMain(APPayr,1,true)) then begin
              if (APPayr.PayDate>VIp.TransDate) then begin
                RecordCheckError(1129,APPayr.PayDate,i,"TransDate");      
                res = -1; 
                goto L99VIVcRecordCheck;
              end;
//              prepaysum = MulRateToBase1(VIp.CurncyCode,VIrw.PrepayAmount,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
              if (prepayb1sum>APPayr.BookRVal) then begin
                RecordCheckError(1254,"",i,"PrepayNr");      
                res = -1; 
                goto L99VIVcRecordCheck;
              end;              
            end else begin
              RecordCheckError(1253,"",i,"PrepayNr");      
              res = -1; 
              goto L99VIVcRecordCheck;
            end;
            ivnr = VIVc_PrepaymentAlreadyUsed(VIp.SerNr,VIrw.PrepayNr,VIrw.Sum);
            if (ivnr>0) then begin
              RecordCheckError(20068," " & ivnr,i,"PrepayNr");      
              res = -1; 
              goto L99VIVcRecordCheck;
            end;
          end else begin
            if (ptrnsf or transf) then begin
              RecordCheckError(1058,"",i,"PrepayNr");      
              res = -1; 
              goto L99VIVcRecordCheck;
            end;
          end;      
      otherwise     
        if (UseTaxTemplatesforTaxCalc) then begin
          if (blank(VIrw.TaxTemplateCode)) then begin
            RecordCheckError(24201,"",i,"TaxTemplateCode");      
            res = 24201;
            goto L99VIVcRecordCheck;
          end;
          errcode = VerifyTaxTemplateCode(VIrw.TaxTemplateCode,tstr);
          if (errcode!=0) then begin
            RecordCheckError(errcode,tstr,i,"TaxTemplateCode");                
            res = 1120; 
            goto L99VIVcRecordCheck;
          end;
        end else begin
          if (blank(vatc)) then begin
            vatc = VIrw.VATCode;
          end;
//TaxTemplateCode   
          if (HasLocalization("LTU,LVA")==false) then begin
            curvt = VATType(VIrw.VATCode);
            if (curvt==kVATTypeReversed) or (prevvt==kVATTypeReversed) then begin
              if (curvt!=prevvt) and (prevvt!=-1) then begin
                RecordCheckError(20270,"",i,"VATCode");      
                res = -1; 
                goto L99VIVcRecordCheck;
              end;
            end;
          end;
          if (blank(VIrw.VATCode)) then begin
            if (VIrw.OrdRow>=0) then begin
              RecordCheckError(1120,VIrw.VATCode,i,"VATCode");      
              res = 1120; 
              goto L99VIVcRecordCheck;
            end;
          end;
          
          prevvt = curvt;
          if (vatc!=VIrw.VATCode) then begin
            morethanonevat = true;
          end;
        end;
        if (VIrw.VATVal==0) then begin
          somelinesmisvat = true;
          if (firstlinewithblankvat<0) then begin
            firstlinewithblankvat = i;
          end;
        end;
        switch (VIrw.stp) begin
           case kInvoiceRowTypeNormal:
            if ((nonblank(VIrw.PRCode)) and (nonblank(VIrw.Item))) then begin
              if (VIrw.qty<=0) then begin
                RecordCheckError(1058,"",i,"qty");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;  
            end;
            if (VATAccIsClosed(VIrw.VATCode,tstr,1)) then begin
              RecordCheckError(1258,tstr,i,"VATCode");      
              res = -1;
              goto L99VIVcRecordCheck;
            end;      
            if (VIrw.PrepayNr!=-1) then begin           
               OPPr.VECode = VIp.VECode;
               OPPr.SerNr = VIrw.PrepayNr;
               if (ReadLastMain(OPPr,2,true)) then begin
                 if (OPPr.CurncyCode!=VIp.CurncyCode) then begin             
                   RecordCheckError(1217,"",i,"PrepayNr");      
                   res = -1;
                   goto L99VIVcRecordCheck;             
                 end;
               end;
               if (CheckPrepaymentAmount(VIp,rwcnt)==false) then begin
                 RecordCheckError(1254,"",i,"PrepayAmount");      
                 res = -1;
                 goto L99VIVcRecordCheck;                        
               end;               
            end;      
            if (nonblank(VIrw.PRCode)) then begin
              PRr.Code = VIrw.PRCode;
              if (ReadFirstMain(PRr,1,true)) then begin
                if (PRr.Terminated>0) then begin
                  RecordCheckError(1236,"",i,"PRCode");      
                  res = -1;
                  goto L99VIVcRecordCheck;
                end;
              end else begin
                RecordCheckError(1232,"",i,"PRCode");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
              if (IsPRPhaseLocked(VIrw.PRCode,VIp.TransDate,tstr)) then begin
                RecordCheckError(20408," " & tstr,i,"PRCode");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
              if (UserCanAction("DisallowPostPRActualsfornonPRMan",false)) then begin
                if (CheckProjectMember(PRr)==false) then begin 
                  RecordCheckError(1274,StringFromStringSet(3,"DisallowPostPRActualsfornonPRMan"),i,"PRCode");                
                  res = -1;
                  goto L99VIVcRecordCheck;
                end;  
              end;
            end;
            prstat = ProjectAccount(VIrw.AccNumber,VIrw.PRCode);
            switch (prstat) begin
              case 1:
                RecordCheckError(1283,"",i,"AccNumber");      
                res = -1;
                goto L99VIVcRecordCheck;
              case 2:
                RecordCheckError(1284,"",i,"PRCode");      
                res = -1;
                goto L99VIVcRecordCheck;
            end;
            if (HasIntegratedNL and blank(VIrw.AccNumber)) then begin
              RecordCheckError(1010,"",i,"AccNumber");      
              res = -1;
              goto L99VIVcRecordCheck;
            end;
            if (nonblank(VIrw.PRCode)) then begin
              if (blank(VIrw.Item)) then begin
                RecordCheckError(1130,"",i,"Item");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;        
            end;
            if (nonblank(VIrw.AccNumber)) then begin
              Accr.AccNumber = VIrw.AccNumber;
              if (ReadFirstMain(Accr,1,true)==false) then begin
                RecordCheckError(1007,VIrw.AccNumber,i,"AccNumber");      
                res = -1; 
                goto L99VIVcRecordCheck;
              end else begin
                if (Accr.blockedFlag!=0) then begin
                  RecordCheckError(1258,VIrw.AccNumber,i,"AccNumber");      
                  res = -1; 
                  goto L99VIVcRecordCheck;
                end;
                if (Accr.GroupAcc!=0) then begin
                  RecordCheckError(1084,VIrw.AccNumber,i,"AccNumber");      
                  res = -1; 
                  goto L99VIVcRecordCheck;
                end;
              end;
              if (nonblank(VIrw.PeriodCode)) then begin
                ASPr.Code = VIrw.PeriodCode;
                if (ReadFirstMain(ASPr,1,true)==false) then begin
                  RecordCheckError(1120,VIrw.PeriodCode,i,"PeriodCode");      
                  res = -1; 
                  goto L99VIVcRecordCheck;
                end;
              end;
              objstr = VIrw.Objects;
              if (APAccb.SkipObjectsOnVIFromHeader==0) then begin
                if (nonblank(VIp.Objects)) then begin
                   if (nonblank(objstr)) then begin
                    objstr = objstr & ",";
                  end;
                  objstr = objstr & VIp.Objects;
                end;  
              end;
              VerifyRowObjects("PL",VIp.Objects,VIrw.Objects,VIrw.AccNumber,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);                        
/*              
              errcode = CheckObjs(VIrw.AccNumber,objstr,errstr);
*/              
              if (errcode!=0) then begin
                RecordCheckError(errcode,errstr,i,"Objects");      
                res = -1; 
                goto L99VIVcRecordCheck;
              end;
    /*some people use Creditors account here          
              if (IsControlAccount(VIrw.AccNumber,false,false)) then begin
                RecordCheckError(1082,"",i,"AccNumber");      
                res = -1; 
                goto L99VIVcRecordCheck;
              end;
    */          
            end;
            if (nonblank(VIrw.VATCode)) then begin
              if (VATCodeExists(VIrw.VATCode)==false) then begin
                RecordCheckError(1120,VIrw.VATCode,i,"VATCode");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
            end;
            if (nonblank(VIrw.Item)) then begin
              if (ReadFirstItem(VIrw.Item,INr,true,false)==false) then begin
                RecordCheckError(1233,"",i,"Item");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
              if (blank(viitgroup)) then begin
                viitgroup = INr.Group;
              end;
              if (INr.Terminated>0) then begin
                RecordCheckError(1266,"",i,"Item");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
              switch (PRr.TBIVItemsUsage) begin
                case 0:
                case 1:
                  if (TBIVItemsUsage(PRr,INr,VIrw.qty)) then begin
                    MessageBox(20409,"");
                  end;
                case 2:
                  if (TBIVItemsUsage(PRr,INr,VIrw.qty)) then begin
                    RecordCheckError(20409,"",-1,"PRCode");      
                    res = -1;
                    goto L99VIVcRecordCheck;
                  end;
              end;              
            end;
            if (VIrw.AssetTransType!=kAssetTransTypeNone) then begin
              if (blank(VIrw.InventoryNr)) then begin
                RecordCheckError(1058,"",i,"InventoryNr");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
              switch (VIrw.AssetTransType) begin
                case kAssetTransTypeNewAsset:
                  AT2Unitr.InventoryNr = VIrw.InventoryNr;
                  if (ReadFirstMain(AT2Unitr,1,true)) then begin
                    RecordCheckError(1547,"",i,"InventoryNr");      
                    res = -1;
                    goto L99VIVcRecordCheck;
                  end;
                  for (j=0;j<i;j=j+1) begin
                    MatRowGet(VIp,j,VI2rw);
                    switch (VI2rw.AssetTransType) begin
                      case kAssetTransTypeNewAsset:
                        if (VI2rw.InventoryNr==VIrw.InventoryNr) then begin
                          RecordCheckError(1547,"",i,"InventoryNr");      
                          res = -1;
                          goto L99VIVcRecordCheck;
                        end;
                    end;
                  end;
                case kAssetTransTypeUpdateAsset:
                  AT2Unitr.InventoryNr = VIrw.InventoryNr;
                  if (ReadFirstMain(AT2Unitr,1,true)==false) then begin
                    RecordCheckError(1932,"",i,"InventoryNr");      
                    res = -1;
                    goto L99VIVcRecordCheck;
                  end;
                  if (nonblankdate(AT2Unitr.UsedFromDate)) then begin
                    RecordCheckError(21120,"",i,"InventoryNr");      
                    res = -1;
                    goto L99VIVcRecordCheck;
                  end;
                case kAssetTransTypeRevaluateAsset:
                  AT2Unitr.InventoryNr = VIrw.InventoryNr;
                  if (ReadFirstMain(AT2Unitr,1,true)==false) then begin
                    RecordCheckError(1932,"",i,"InventoryNr");      
                    res = -1;
                    goto L99VIVcRecordCheck;
                  end;
              end;            
            end else begin
              if (nonblank(VIrw.InventoryNr)) then begin
                RecordCheckError(1058,"",i,"AssetTransType");      
                res = -1;
                goto L99VIVcRecordCheck;
              end;
            end;
            if (RequiredAssetMissing(VIrw.AccNumber,VIrw.InventoryNr)) then begin
              RecordCheckError(1058,"",i,"InventoryNr");      
              res = -1;
              goto L99VIVcRecordCheck;
            end;
            
        end;
    end;
  end;
  if (morethanonevat and somelinesmisvat and APAccb.ForceRowVatIfDiff!=0 and firstlinewithblankvat>-1) then begin
    if (VIp.VATVal!=VIp.CalcVATVal) then begin
      RecordCheckError(1058,"",firstlinewithblankvat,"VATVal");
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
/*  
  if ((stat==insertmode) or ((stat==updatemode) and (VI2p.OKFlag==0))) then begin
    VISumup(VIp,temp);
  end;
*/  
//  if (HasIntegratedNL or IsEnterprise) then begin
  if (HasModNL or HasModTS) then begin  //same condition as the one for showing matrix
    VISumup(VIp,temp);
    if ((temp!=0) and (temp!=-0)) then begin
      if (rwcnt==0) then begin rwcnt = 1; end;
      RecordCheckError(1011,"",rwcnt-1,"Sum");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
  if (ptrnsf or transf) then begin
    if (UserCanAction("VIOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"VIOK"),-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
    if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (UserCanAction("CredVIOK",true)==false) then begin
        RecordCheckError(1274,StringFromStringSet(3,"CredVIOK"),-1,"SerNr");      
        res = -1;
        goto L99VIVcRecordCheck;
      end;
    end;
  end;
  if (ptrnsf and transf) then begin
    RecordCheckError(1248,"",-1,"SerNr");      
    res = -1;
    goto L99VIVcRecordCheck;
  end;
  FillAmForVarianceVI(VIp);
  if (transf) then begin
    error = ConnectCreditNotetoIV(VIp);
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
LVIVcRecordCheck_GenTrans:;
  if (HasIntegratedNL==false) then begin
    goto L99VIVcRecordCheck;
  end;
  if (gentrans==false) then begin ptrnsf = false; end;
  if (ptrnsf) then begin
    error = MakeTransFromVI(gTRp,gSMp,VIp,true,false);
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    error = MakeTransFromVI(gTRp,gSMp,VIp,false,false);  
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
  end;
  if ((gTRp.Number>0) and ((gTRp.IntYc==VIYc) or (gTRp.IntYc==PVYc))) then begin
    tstr = CheckTrans(gTRp,2,true);
    if (nonblank(tstr)) then begin
      RecordCheckError(1085,tstr,-1,"SerNr");      
      res = -1;
      goto L99VIVcRecordCheck;
    end;
    SaveTrans(gTRp);
    AddTTrans_VIVc(gTRp,VIp);
  end;
  if (MatRowCnt(gSMp)>0) then begin
    gSMp.FileName = "VIVc";
    gSMp.TransNr = VIp.SerNr;
    if (SaveSim(gSMp)) then begin 
      CreateRecordLink(VIp,curcomp,gSMp,curcomp);  
    end;
  end;    
  acceptgrf = false;  
  if (RecordValid(VI2p)) then begin
    if (VIp.PayVal!=VI2p.PayVal) then begin acceptgrf = true; end;
  end;
  if ((acceptgrf==false) and (stat==updatemode)) then begin
    rwcnt = MatRowCnt(VI2p);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VI2p,i,VIrw);
      if nonblank(VIrw.Item) then begin
        if ReadFirstItem(VIrw.Item,INr,true,false) then begin
          if (blank(viitgroup2)) then begin
            viitgroup2 = INr.Group;
            if (viitgroup2<>viitgroup) then begin
              acceptgrf = true;
              i = rwcnt;
            end; 
          end;   
        end;  
      end;  
    end;
  end;
L99VIVcRecordCheck:;
  if (res!=0) then begin
    VIp.SerNr = oldnr;
  end;
LVIVcRecordCheck:;
  VIVcRecordCheck = res;
  RETURN;
END;

/*
global
function LongInt VIVcRecordProtectFields(var record VIVc VIr,record VIVc VI2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer rwcnt,rwcnt2,i;
  row VIVc VIrw;
  row VIVc VI2rw;
  
  VI2r.PPOKNr = VIr.PPOKNr;
  VI2r.POSerNr = VIr.POSerNr;
  VI2r.POCOSerNr = VIr.POCOSerNr;
  VI2r.IVNr = VIr.IVNr;
  VIVcRecordProtectFields = res;
  return;
end;
*/
