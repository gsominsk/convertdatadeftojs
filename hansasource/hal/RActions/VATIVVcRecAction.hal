external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function Integer DateGetIntMonth(Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external updating procedure InvalidateTR(Integer,LongInt);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function Boolean SerNrTestVATIVVc(LongInt,Date,var Boolean);
external procedure VATIVSumup(record VATIVVc);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Integer IsUnOKAllowed_VATIVVc(record VATIVVc);
external function Integer MakeTransFromVATIV(record TRVc,record VATIVVc,Boolean);
external updating function Integer UpdateTRVATIV(record IVVc,var record VATIVVc,Integer);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean UserCanInvalidateVI();

updating procedure TRVATIV(record VATIVVc VATIVr)
begin
  record IVVc IVr;
  record AccBlock ARb; 
  record VATIVTBlock VATIVb; 
  
  IVr.SerNr = VATIVr.IVNr;
  if (ReadFirstMain(IVr,1,true)) then begin
    BlockLoad(ARb);
    BlockLoad(VATIVb);
    if (ARb.PostIVVATonVATCorr==0) then begin
      if (VATIVr.TransDate>=IVr.TransDate) or (VATIVb.TRforVATCorrwithDateinPast!=0) then begin
        if (UpdateTRVATIV(IVr,VATIVr,1)==0) then begin end;
      end;
    end else begin
    end;
  end;
  return;
end;

updating function LongInt VATIVVc_AssignMonthSeqNr(Date transdate)
begin
  LongInt res,err;
  record VATIVMonthSeqVc VATIVMSr;
  record VATIVMonthSeqVc oldVATIVMSr;
  Boolean found;
  
  VATIVMSr.IntMonth = DateGetIntMonth(transdate);
  found = ReadFirstMain(VATIVMSr,1,true);
  res = VATIVMSr.LastUsedNr + 1;
  if (res<=0) then begin
    res = 1;
  end;
  if (found) then begin
    RecordCopy(oldVATIVMSr,VATIVMSr);
    VATIVMSr.LastUsedNr = res;
    err = RecordUpdate(oldVATIVMSr,VATIVMSr,true);
  end else begin
    VATIVMSr.IntMonth = DateGetIntMonth(transdate);
    VATIVMSr.LastUsedNr = res;
    RecordStore(VATIVMSr,false);
  end;
  VATIVVc_AssignMonthSeqNr = res;
  return;
end;

global
updating function LongInt VATIVVcRecordSave(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
    
  if (VATIVr.SerNr<=0) then begin
    VATIVr.SerNr = NextSerNr("VATIVVc",VATIVr.TransDate,-1,false,VATIVr.LangCode);
  end;  
  if (VATIVr.OKFlag!=0) then begin
    VATIVr.MonthSeqNr = VATIVVc_AssignMonthSeqNr(VATIVr.TransDate);
  end;
  VATIVSumup(VATIVr);
  VATIVVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt VATIVVcRecordSaveAfter(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record IVVc IVr;
  record IPVc IPr;
  
  if (VATIVr.OKFlag!=0) then begin
    TRVATIV(VATIVr);
  end;
  IVr.SerNr = VATIVr.IVNr;
  if (ReadFirstMain(IVr,1,true)) then begin
    CreateRecordLink(VATIVr,CurrentCompany,IVr,CurrentCompany);  
    CreateRecordLink(IVr,CurrentCompany,VATIVr,CurrentCompany);  
  end;
  IPr.SerNr = VATIVr.IPNr;
  if (ReadFirstMain(IPr,1,true)) then begin
    CreateRecordLink(VATIVr,CurrentCompany,IPr,CurrentCompany);  
    CreateRecordLink(IPr,CurrentCompany,VATIVr,CurrentCompany);  
  end;
  VATIVVcRecordSaveAfter = res;
  RETURN;
END;

updating procedure TRVATIVUpdateMark(record VATIVVc VATIVr)
BEGIN
  record TRVc TRr;
  record TRVc oldTRr;
  row TRVc TRrw;
  
  TRr.IntYc = VATIVYc;
  TRr.Number = VATIVr.SerNr;
  if (ReadFirstMain(TRr,0,true)) then begin
    RecordCopy(oldTRr,TRr);
    ClearRow(TRr,TRrw,2);
    TRrw.UpdDate = CurrentDate;
    TRrw.Sign = CurrentUser;
    TRrw.OldTransDate = TRr.TransDate;
    MatRowPut(TRr,MatRowCnt(TRr),TRrw);
    TRr.TransDate = VATIVr.TransDate;
    if (RecordUpdate(oldTRr,TRr,true)) then begin 
    end;
  end;
  RETURN;
END;

global
updating function LongInt VATIVVcRecordUpdate(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((VATIVr.OKFlag!=0) and (VATIV2r.OKFlag==0)) then begin
    VATIVr.MonthSeqNr = VATIVVc_AssignMonthSeqNr(VATIVr.TransDate);
  end;
  VATIVVcRecordUpdate = res;
  RETURN;
END;
 
global
updating function LongInt VATIVVcRecordUpdateAfter(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((VATIVr.OKFlag!=0) and (VATIV2r.OKFlag==0)) then begin
    TRVATIV(VATIVr);
  end;
  if ((VATIVr.OKFlag!=0) and (VATIV2r.OKFlag!=0)) then begin//update date
    if (VATIV2r.TransDate!=VATIVr.TransDate) then begin
      TRVATIVUpdateMark(VATIVr);
    end;
  end;  
  if ((VATIVr.OKFlag==0) and (VATIV2r.OKFlag==1)) then begin//unok
    DeleteTransaction(VATIVr.SerNr,VATIVYc);
    StoreUnOKHistory("VATIVVc",VATIVr.SerNr,CurrentDate,CurrentTime,CurrentUser);
  end;    
  if ((VATIV2r.Invalid==0) and (VATIVr.Invalid!=0)) then begin
    if (VATIV2r.OKFlag!=0) then begin
      InvalidateTR(VATIVYc,VATIVr.SerNr);
    end;      
  end;
  VATIVVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt VATIVVcRecordDefaults(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record AccBlock Accb;
  Date bd;
  Time bt;
    
  BlockLoad(Accb);
  VATIVr.SerNr = -1;
  VATIVr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    VATIVr.SerNr = NextSerNr("VATIVVc",VATIVr.TransDate,-1,false,VATIVr.LangCode);
  end;
  VATIVr.IVNr = -1;
  VATIVr.CredInv = -1;
  VATIVr.FrPrice = blankval;
  VATIVr.FrBase = blankval;
  VATIVr.FrGP = blankval;
  VATIVr.FrGPPercent = blankval;
  VATIVr.Sum0 = blankval;
  VATIVr.Sum1 = blankval;
  VATIVr.Sum2 = blankval;
  VATIVr.Sum3 = blankval;
  VATIVr.Sum4 = blankval;
  VATIVr.BaseSum4 = blankval;
  VATIVr.DiscPerc = blankval;
  VATIVr.DiscSum = blankval;
  VATIVr.TAX1Sum = blankval;
  VATIVr.Commision = blankval;
  VATIVr.SumIncCom = blankval;
  VATIVr.FrRate = blankval;
  VATIVr.ToRateB1 = blankval;
  VATIVr.ToRateB2 = blankval;
  VATIVr.BaseRate1 = blankval;
  VATIVr.BaseRate2 = blankval;
  VATIVr.NoTAXonVAT = Accb.NoTAXonVAT;
  VATIVr.TotalwoTAX = Accb.TotalwoTAX;
  VATIVr.InclVAT = Accb.BasePriceInclVAT;
  VATIVr.Invalid = 0;
  VATIVr.InvalidDate = bd;
  VATIVr.InvalidTime = bt;
  VATIVr.MonthSeqNr = -1;
  VATIVVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt VATIVVcRecordDuplicate(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rwcnt;
  Date bd;
  Time bt;
    
  VATIVr.SerNr = -1;
  VATIVr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    VATIVr.SerNr = NextSerNr("VATIVVc",VATIVr.TransDate,-1,false,VATIVr.LangCode);
  end;
  VATIVr.OKFlag = 0;
  VATIVr.IVNr = -1;
  VATIVr.CredInv = -1;
  VATIVr.FrPrice = blankval;
  VATIVr.FrBase = blankval;
  VATIVr.FrGP = blankval;
  VATIVr.FrGPPercent = blankval;
  VATIVr.Sum0 = blankval;
  VATIVr.Sum1 = blankval;
  VATIVr.Sum2 = blankval;
  VATIVr.Sum3 = blankval;
  VATIVr.Sum4 = blankval;
  VATIVr.BaseSum4 = blankval;
  VATIVr.DiscPerc = blankval;
  VATIVr.DiscSum = blankval;
  VATIVr.TAX1Sum = blankval;
  VATIVr.Commision = blankval;
  VATIVr.SumIncCom = blankval;
  VATIVr.FrRate = blankval;
  VATIVr.ToRateB1 = blankval;
  VATIVr.ToRateB2 = blankval;
  VATIVr.BaseRate1 = blankval;
  VATIVr.BaseRate2 = blankval;
  VATIVr.FiscalFlag = 0;
  VATIVr.Invalid = 0;
  VATIVr.InvalidDate = bd;
  VATIVr.InvalidTime = bt;
  VATIVr.MonthSeqNr = -1;
  rwcnt = MatRowCnt(VATIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(VATIVr,i);
    rwcnt = MatRowCnt(VATIVr);
    i = i -1;
  end;
  VATIVVcRecordDuplicate = res; 
  RETURN;
END;

function Boolean AllowOKingOKedVATIV(record VATIVVc VATIVp,record VATIVVc VATIV2p)
BEGIN
  Boolean res,umf;
  Integer rwcnt,oldrwcnt;
  row VATIVVc VATIVrw;
  
  oldrwcnt = MatRowCnt(VATIV2p);
  rwcnt = MatRowCnt(VATIVp);
  if (oldrwcnt<rwcnt) then begin
    MatRowGet(VATIVp,oldrwcnt,VATIVrw);
    if (VATIVrw.stp==2) then begin umf = true; end;
  end;
  if (umf) then begin
    res = true;
  end;
  AllowOKingOKedVATIV = res;
  RETURN;
END;

function Boolean TestVATIVTypeExists(string vativtype)
begin
  Boolean res;
  record VATIVTypeBlock VATIVTb;
  row VATIVTypeBlock VATIVTbrw;
  Integer i,rwcnt;
  
  BlockLoad(VATIVTb);
  rwcnt = MatRowCnt(VATIVTb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATIVTb,i,VATIVTbrw);
    if (vativtype==VATIVTbrw.Code) then begin
      res = true;
      goto LTestVATIVTypeExists;
    end;
  end;
LTestVATIVTypeExists:;  
  TestVATIVTypeExists = res;
  return; 
end;
 
global
updating function LongInt VATIVVcRecordCheck(var record VATIVVc VATIVp,record VATIVVc VATIV2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record IVVc IVr;
  record VATIVVc locVATIVr;
  LongInt oldnr;
  Boolean transf,unokf;
  record TRVc gTRp;
  Integer err;
  Boolean gentrans;
  string 255 tstr;
  record VATIVReasonVc VATIVReasonr;
  record VATIVTBlock VATIVb; 
  
  res = 0;
  BlockLoad(VATIVb);
  if (VATIVp.Invalid==0) then begin
    oldnr = VATIVp.SerNr;
    if (VATIVp.OKFlag==0) then begin
      if (stat==Rs_update) then begin
        if (VATIV2p.OKFlag==1) then begin unokf = true; end;
      end;
    end;  
  end;  
  if (unokf) then begin
    err = IsUnOKAllowed_VATIVVc(VATIVp);
    if (err!=0) then begin
      RecordCheckError(err,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LVATIVVcRecordCheck;
  end;    
  if (VATIVp.Invalid==0) then begin
    if ((VATIV2p.OKFlag!=0) and (stat==Rs_update)) then begin
      if (AllowOKingOKedVATIV(VATIVp,VATIV2p)) then begin
        res = 0;
        goto LVATIVVcRecordCheck;
      end;
      RecordCheckError(24092,"",-1,"SerNr");      
      res = -1;
      goto LVATIVVcRecordCheck;
    end;  
  end;  
  transf = false;
  if (VATIVp.OKFlag==1) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (VATIV2p.OKFlag==0) then begin transf = true; end;
    end;  
  end;
  if (VATIVp.SerNr<=0) then begin
    VATIVp.SerNr = NextSerNr("VATIVVc",VATIVp.TransDate,-1,false,VATIVp.LangCode);
  end;
  if ((stat==Rs_insert) or (VATIVp.SerNr!=VATIV2p.SerNr)) then begin
    locVATIVr.SerNr = VATIVp.SerNr;
    if (ReadFirstMain(locVATIVr,1,true)) then begin
      RecordCheckError(1115,"",-1,"SerNr");      
      res = -1;
      goto L99VATIVVcRecordCheck;
    end;
  end;
  if (SerNrTestVATIVVc(VATIVp.SerNr,VATIVp.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto L99VATIVVcRecordCheck;
  end;
  if (Date2Test("VATIVVc",VATIVp.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto L99VATIVVcRecordCheck;
  end;
  if (blankdate(VATIVp.TransDate)) then begin
    RecordCheckError(1126,"",-1,"TransDate");      
    res = -1;
    goto L99VATIVVcRecordCheck;
  end;
  if (VATIVp.IVNr<=0) then begin
    if (VATIVp.IPNr<=0) then begin
      RecordCheckError(1131,"",-1,"IVNr");      
      res = -1;
      goto L99VATIVVcRecordCheck;
    end;
  end;
  if (VATIVp.IPNr<=0) then begin
    if (VATIVp.IVNr<=0) then begin
      RecordCheckError(1058,"",-1,"IVNr");      
      res = -1;
      goto L99VATIVVcRecordCheck;
    end;
  end;
  if (VATIVp.IVNr>0) then begin
    IVr.SerNr = VATIVp.IVNr;
    if (ReadFirstMain(IVr,1,true)==false) then begin
      RecordCheckError(1131,"",-1,"IVNr");      
      res = -1;
      goto L99VATIVVcRecordCheck;
    end;
    if (VATIVp.TransDate>=IVr.TransDate) then begin
      res = UpdateTRVATIV(IVr,VATIVp,2);
      if (res!=0) then begin
        RecordCheckError(res,"",-1,"IVNr");      
        res = -1;
        goto L99VATIVVcRecordCheck;
      end;
    end;
  end;
  if (nonblank(VATIVp.VATIVType)) then begin
    if (TestVATIVTypeExists(VATIVp.VATIVType)==false) then begin
      RecordCheckError(24091," " & VATIVp.VATIVType,-1,"VATIVType");      
      res = -1;
      goto L99VATIVVcRecordCheck;
    end;
  end;
  if (nonblank(VATIVp.OriginalAtOurCompany)) then begin
    VATIVReasonr.Code = VATIVp.OriginalAtOurCompany;
    if (ReadFirstMain(VATIVReasonr,1,true)==false) then begin
      RecordCheckError(1290," " & VATIVp.VATIVType,-1,"OriginalAtOurCompany");      
      res = -1;
      goto L99VATIVVcRecordCheck;
    end;
  end;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    err = 0;
    if (VATIVp.TransDate>=IVr.TransDate) or (VATIVb.TRforVATCorrwithDateinPast!=0) then begin
      err = MakeTransFromVATIV(gTRp,VATIVp,false);
    end;
    if (err!=0) then begin
      RecordCheckError(err,"",-1,"SerNr");
      res = -1;
      goto L99VATIVVcRecordCheck;
    end else begin    
      if ((gTRp.Number>0) and (gTRp.IntYc==VATIVYc)) then begin
        tstr = CheckTrans(gTRp,2,true);
        if (nonblank(tstr)) then begin
          RecordCheckError(1085,tstr,-1,"SerNr");      
          res = -1;
          goto L99VATIVVcRecordCheck;
        end;
        SaveTrans(gTRp);
      end;
    end;
  end;    
L99VATIVVcRecordCheck:;
  if (res!=0) then begin
    VATIVp.SerNr = oldnr;
  end;    
LVATIVVcRecordCheck:; 
  VATIVVcRecordCheck = res;
  RETURN;
END;

global
function LongInt VATIVVcRecordRemoveTest(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (VATIVr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LVATIVVcRecordRemoveTest;
  end;
  if (VATIVr.OKFlag!=0) then begin
    if (long3>0) then begin MessageBox(1560,""); end;
    res = 0;
  end;    
LVATIVVcRecordRemoveTest:;
  VATIVVcRecordRemoveTest = res; 
  RETURN;
END;

procedure VATIVVcConvertB1ToB2(record VATIVVc VATIVr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  row VATIVVc VATIVrw;
  val t;
  Integer i,rwcnt;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);
  rwcnt = MatRowCnt(VATIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATIVr,i,VATIVrw);
    B1ToB2Val(VATIVrw.BasePrice,br1,br2,t);
    VATIVrw.BasePrice = t;
    B1ToB2Val(VATIVrw.FIFORowVal,br1,br2,t);
    VATIVrw.FIFORowVal = t;
    MatRowPut(VATIVr,i,VATIVrw);
  end;
  RETURN;
END;

global
function LongInt VATIVVcRecordImport(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;
  record AccBlock Accb;
  row LegalInvNrBlock LINrbrw;
      
  BlockLoad(cvm);
  BlockLoad(Accb);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    curncy = VATIVr.CurncyCode;
    fr = VATIVr.FrRate;
    to1 = VATIVr.ToRateB1;
    to2 = VATIVr.ToRateB2;
    br1 = VATIVr.BaseRate1;
    br2 = VATIVr.BaseRate2;
    t = VATIVr.Sum4;
    ConvertToDualBase(curncy,VATIVr.TransDate,fr,to1,to2,br1,br2,t,true);
    VATIVr.CurncyCode = curncy;
    VATIVr.FrRate = fr;
    VATIVr.ToRateB1 = to1;
    VATIVr.ToRateB2 = to2;
    VATIVr.BaseRate1 = br1;
    VATIVr.BaseRate2 = br2;
    VATIVr.Sum4 = t;                      
    VATIVr.BaseSum4 = MulRateToBase1(VATIVr.CurncyCode,VATIVr.Sum4,VATIVr.FrRate,VATIVr.ToRateB1,VATIVr.ToRateB2,VATIVr.BaseRate1,VATIVr.BaseRate2,DefaultCurRoundOff);
  end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    curncy = VATIVr.CurncyCode;
    to1 = VATIVr.ToRateB1;
    to2 = VATIVr.ToRateB2;
    br1 = VATIVr.BaseRate1;
    br2 = VATIVr.BaseRate2;
    VATIVVcConvertB1ToB2(VATIVr,to1,to2,br1,br2);
    VATIVr.ToRateB1 = to1;
    VATIVr.ToRateB2 = to2;
    VATIVr.BaseRate1 = br1;
    VATIVr.BaseRate2 = br2;
  end;
  if (VATIVr.NoTAXonVAT==-1) then begin
    VATIVr.NoTAXonVAT = Accb.NoTAXonVAT;
  end;
  if (blank(VATIVr.OfficialSerNrSerie)) then begin
    GetLegalInvNrRow(VATIVr.OfficialSerNr,LINrbrw);
    VATIVr.OfficialSerNrSerie = GetLegalInvoiceNrSerie(LINrbrw,VATIVr.OfficialSerNr);
  end;
  VATIVVcRecordImport = res;
  RETURN;
END;

global
function LongInt VATIVVcRecordInvalidateTest(var record VATIVVc VATIVr,record VATIVVc VATIV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLb;

  res = 0;
  BlockLoad(DBLb);
  if (VATIVr.Invalid==0) then begin
    if (VATIVr.TransDate>DBLb.SLLock) then begin
      if (UserCanInvalidateVI) then begin      
        VATIVr.Invalid = 1;
        VATIVr.InvalidDate = CurrentDate;
        VATIVr.InvalidTime = CurrentTime;
        res = 1;
      end;
    end;
    if (res==0) then begin
      MessageBox(34500,"");
    end;
  end;
LVATIVVcRecordInvalidateTest:;
  VATIVVcRecordInvalidateTest = res;  
  return;
end;
