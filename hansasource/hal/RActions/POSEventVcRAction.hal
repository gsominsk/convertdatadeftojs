external updating procedure POSEventUpdateCashupHist(record POSEventVc);
external function Boolean SerNrTestPOSEventVc(LongInt,Date,var Boolean);
external function Integer CheckUsers(string,string,var string,Boolean);
external function Boolean CheckMultipleIndexField(string,Integer,Integer);

global
function Boolean IsSessionOpen(string machinename,string drawer,Date td,Time tt)
begin
  record POSEventVc POSEventr;
  Boolean TrHs,res;

  POSEventr.MachineName = machinename;
  POSEventr.Drawer = drawer;
  POSEventr.TransDate = td;
  POSEventr.TransTime = tt;
  TrHs = true;
  while (LoopBackKey("MachineName",POSEventr,4,TrHs)) begin
    if ((POSEventr.TransDate<td) or ((POSEventr.TransDate==td) and (POSEventr.TransTime<tt))) then begin
      if ((POSEventr.Event==1) and (POSEventr.MachineName==machinename) and (POSEventr.Drawer==drawer))  then begin
        res = true;
        goto LIsSessionOpen;
      end;
      if ((POSEventr.Event!=1) and (POSEventr.MachineName==machinename) and (POSEventr.Drawer==drawer))  then begin
        goto LIsSessionOpen;
      end;
    end else begin
      goto LIsSessionOpen;
    end;
  end;
LIsSessionOpen:;  
  IsSessionOpen = res;      
  return;
end;

global
function Boolean OpenedPOSSession(string machinename,string drawer,Date td,Time tt,var record POSEventVc POSEventr)
begin
  Boolean TrHs,res;

  RecordClear(POSEventr);
  POSEventr.MachineName = machinename;
  POSEventr.Drawer = drawer;
  POSEventr.TransDate = td;
  POSEventr.TransTime = tt;
  TrHs = true;
  while (LoopBackKey("MachineName",POSEventr,4,TrHs)) begin
    if ((POSEventr.TransDate<td) or ((POSEventr.TransDate==td) and (POSEventr.TransTime<tt))) then begin
      if ((POSEventr.Event==1) and (POSEventr.MachineName==machinename) and (POSEventr.Drawer==drawer))  then begin
        res = true;
        goto LOpenedPOSSession;
      end;
      if ((POSEventr.Event!=1) and (POSEventr.MachineName==machinename) and (POSEventr.Drawer==drawer))  then begin
        goto LOpenedPOSSession;
      end;
    end else begin
      goto LOpenedPOSSession;
    end;
  end;
LOpenedPOSSession:;  
  if (res==false) then begin
    RecordClear(POSEventr);
  end;
  OpenedPOSSession = res;      
  return;
end;

global
function LongInt POSEventVcRecordDefaults(var record POSEventVc POSEventr,record POSEventVc POSEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
      
  POSEventr.TransDate = CurrentDate;
  POSEventr.TransTime = CurrentTime;
  POSEventr.MachineName = CurMachineName;
  if (SingleUserMode) then begin
    POSEventr.SerNr = NextSerNr("POSEventVc",POSEventr.TransDate,-1,true,"");
  end;
  POSEventVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt POSEventVcRecordDuplicate(var record POSEventVc POSEventr,record POSEventVc POSEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
      
  POSEventr.TransDate = CurrentDate;
  POSEventr.TransTime = CurrentTime;
  POSEventr.MachineName = CurMachineName;
  if (SingleUserMode) then begin
    POSEventr.SerNr = NextSerNr("POSEventVc",POSEventr.TransDate,-1,true,"");
  end;
  POSEventVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt POSEventVcRecordSaveAfter(var record POSEventVc POSEr,record POSEventVc POSE2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  POSEventUpdateCashupHist(POSEr);
  POSEventVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt POSEventVcRecordUpdateAfter(var record POSEventVc POSEr,record POSEventVc POSE2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  POSEventUpdateCashupHist(POSEr);
  POSEventVcRecordUpdateAfter = res;
  return;
end;

function Boolean FindLastPOSEvent(string machine,string drawer,string members,Integer posevent,var Integer errno,var string errstr,var string focusfield,var record POSEventVc locPOSEventr)
begin
  Boolean res;
  
  errno = 0;
  errstr = "";
  focusfield = "";
  locPOSEventr.Drawer = drawer;
  if (ReadLastKey("Drawer",locPOSEventr,1,true)) then begin
    if (locPOSEventr.Drawer==drawer) then begin
      if (locPOSEventr.Event==posevent) then begin
        errno = 1547;
        errstr = "";
        focusfield = "Drawer";
      end;
      if (locPOSEventr.Event==1) then begin
        if (locPOSEventr.MachineName!=machine) then begin
          errno = 1547;
          errstr = " " & locPOSEventr.MachineName;        
          focusfield = "MachineName";
        end;
      end;
      if (nonblank(members)) then begin
        if (SetInSet(locPOSEventr.Members,members)) then begin
        end;
      end;
    end;
    res = true;
  end;
  FindLastPOSEvent = res;
  return;
end;

function Boolean MembersBelongToOtherSession(record POSEventVc curPOSEventr)
begin
  Boolean res;
  record POSEventVc POSEventr;
  Boolean found;
  
  found = true;
//  POSEventr.MachineName = curPOSEventr.MachineName;
  POSEventr.TransDate = curPOSEventr.TransDate;
  POSEventr.TransTime = curPOSEventr.TransTime;
  while (LoopBackKey("TransDate",POSEventr,2,found)) begin
/*  
    if (POSEventr.MachineName!=curPOSEventr.MachineName) then begin
      found = false;
    end;
*/    
    if (found) then begin
      if ((POSEventr.TransDate<curPOSEventr.TransDate) or ((POSEventr.TransDate==curPOSEventr.TransDate) and (POSEventr.TransTime<curPOSEventr.TransTime))) then begin
        if (IsSessionOpen(POSEventr.MachineName,POSEventr.Drawer,curPOSEventr.TransDate,curPOSEventr.TransTime)) then begin
          if (SetInSet(curPOSEventr.Members,POSEventr.Members)) then begin
            res = true;
            goto LMembersBelongToOtherSession;
          end;
        end;
      end;
    end;
  end;
LMembersBelongToOtherSession:;  
  MembersBelongToOtherSession = res;  
  return;
end;

global
function LongInt POSEventVcRecordCheck(var record POSEventVc POSEventr,record POSEventVc POSEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record POSEventVc locPOSEventr;
  record DrawerVc Drawer;
  string 255 tstr,focusfield;
  Integer errno;
  record CashierDefBlock Cashierb;
  Boolean gentrans;

  res = 0;
  BlockLoad(Cashierb);
  if (POSEventr.Event==0) then begin
    RecordCheckError(1058,"",-1,"Event");   
    res = -1; 
    goto LPOSEventVcRecordCheck;  
  end;  
  if (blank(POSEventr.Drawer)) then begin
    RecordCheckError(1058,"",-1,"Drawer");   
    res = -1; 
    goto LPOSEventVcRecordCheck;  
  end;  
  if (blank(CurMachineName)) then begin
    RecordCheckError(1757,"",-1,"MachineName");   
    res = -1; 
    goto LPOSEventVcRecordCheck;  
  end;  
  if (blank(POSEventr.MachineName)) then begin
    RecordCheckError(1058,"",-1,"MachineName");   
    res = -1; 
    goto LPOSEventVcRecordCheck;  
  end;  
  if (POSEventr.SerNr==-1) then begin
    POSEventr.SerNr = NextSerNr("POSEventVc",POSEventr.TransDate,-1,true,"");
  end;
  if (SerNrTestPOSEventVc(POSEventr.SerNr,POSEventr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LPOSEventVcRecordCheck;
  end;
  locPOSEventr.SerNr = POSEventr.SerNr;
  if (ReadFirstMain(locPOSEventr,1,true)) then begin    
    RecordCheckError(1547,"",-1,"SerNr");   
    res = -1; 
    goto LPOSEventVcRecordCheck;  
  end;
  POSEventr.TransDate = CurrentDate;
  POSEventr.TransTime = CurrentTime;

  if (Cashierb.MultipleSessionsPerLocalMachine!=0) then begin
    if (blank(POSEventr.Members)) then begin
      RecordCheckError(1058,"",-1,"Members");      
      res = -1; 
      goto LPOSEventVcRecordCheck;
    end;
  end;
  if (nonblank(POSEventr.Members)) then begin
    if (POSEventr.Event==1) then begin
      if (MembersBelongToOtherSession(POSEventr)) then begin
        RecordCheckError(24170,"",-1,"Members");      
        res = -1; 
        goto LPOSEventVcRecordCheck;
      end;
    end;
    if (CheckMultipleIndexField(POSEventr.Members,10,10)==false) then begin
      RecordCheckError(2246,"",-1,"Members");      
      res = -1; 
      goto LPOSEventVcRecordCheck;
    end;
    errno = CheckUsers(POSEventr.Members,"",tstr,true);  
    if (errno!=0) then begin
      RecordCheckError(errno,tstr,-1,"Members");      
      res = -1;
      goto LPOSEventVcRecordCheck;
    end;
  end;
  if (Cashierb.MultipleSessionsPerLocalMachine!=0) then begin
    if (FindLastPOSEvent(POSEventr.MachineName,POSEventr.Drawer,POSEventr.Members,POSEventr.Event,errno,tstr,focusfield,locPOSEventr)) then begin
      if (errno!=0) then begin
        RecordCheckError(errno,tstr,-1,focusfield);   
        res = -1; 
        goto LPOSEventVcRecordCheck;  
      end;
    end else begin
      if (POSEventr.Event==2) then begin
        RecordCheckError(2195,"",-1,"Drawer");   
        res = -1; 
        goto LPOSEventVcRecordCheck;  
      end;
    end;
  end else begin
    locPOSEventr.Drawer = POSEventr.Drawer;
//    if (ReadLastKey("Drawer",locPOSEventr,1,true)) then begin
    if (ReadLastKey("DrawerDate",locPOSEventr,1,true)) then begin
      if (locPOSEventr.Drawer==POSEventr.Drawer) then begin
        if (locPOSEventr.Event==POSEventr.Event) then begin
          if (POSEventr.Event==1) then begin
            RecordCheckError(2200,"",-1,"Drawer");   
            res = -1; 
            goto LPOSEventVcRecordCheck;  
          end else begin
            RecordCheckError(24198,"",-1,"Drawer");   
            res = -1; 
            goto LPOSEventVcRecordCheck;  
          end;
        end;
        if (locPOSEventr.MachineName!=POSEventr.MachineName) and (locPOSEventr.Event!=2) then begin
          RecordCheckError(1547," " & locPOSEventr.MachineName,-1,"MachineName");   
          res = -1; 
          goto LPOSEventVcRecordCheck;  
        end;
      end;
    end else begin
      if (POSEventr.Event==2) then begin
        RecordCheckError(2195,"",-1,"Drawer");   
        res = -1; 
        goto LPOSEventVcRecordCheck;  
      end;
    end;
  end;  
  Drawer.Code = POSEventr.Drawer;
  if (ReadFirstMain(Drawer,1,true)==false) then begin    
    RecordCheckError(1290,"",-1,"Drawer");   
    res = -1; 
    goto LPOSEventVcRecordCheck;  
  end;  
LPOSEventVcRecordCheck:;
  POSEventVcRecordCheck = res;
  return;
end;

global
function LongInt POSEventVcRecordRemoveTest(var record POSEventVc POSEventr,record POSEventVc POSEvent2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 0;
  POSEventVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt POSEventVcRecordSaveAfter(var record POSEventVc POSEventr,record POSEventVc POSEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;
  
  Userr.Code = POSEventr.Sign;
  if (ReadFirstMain(Userr,1,true)) then begin end;
  POSEventr.SalesGroup = Userr.SalesGroup;//On save after cause on save Sign is blank
  POSEventVcRecordSaveAfter = res;
  return;
end;

global
function LongInt POSEventVcRecordImport(var record POSEventVc POSEventr,record POSEventVc POSEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;
  
  if (nonblank(POSEventr.Sign)) then begin
  if (blank(POSEventr.SalesGroup)) then begin
    Userr.Code = POSEventr.Sign;
    if (ReadFirstMain(Userr,1,true)) then begin end;
    POSEventr.SalesGroup = Userr.SalesGroup;
  end;
  end;
  POSEventVcRecordImport = res;
  return;
end;

global 
function Boolean DrawerVcRecordShouldBeSynchronised(record DrawerVc Drawerr,string tagstr)
begin
  Boolean res;
  
  res = true;
  DrawerVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean DrawerVcRecordSync(record DrawerVc Drawerr,string tagstr)
begin
  Boolean res;
  
  res = true;
  DrawerVcRecordSync = res;
  return;
end;
