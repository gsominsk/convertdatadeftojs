external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure SwapM4Val(var val,var val);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);

global
function LongInt AgreementVcRecordDefaults(var record AgreementVc Agreementr,record AgreementVc Agreement2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc USr;
  Time blankt;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  record RentInvoiceBlock RIr;
  
  BlockLoad(RIr);
  Agreementr.SerNr = -1;
  Agreementr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    Agreementr.SerNr = NextSerNr("AgreementVc",Agreementr.TransDate,-1,false,"");
  end;
  GetCurUser(USr);
  Agreementr.OurContact = USr.CurOurContact;
  Agreementr.Location = USr.Location;
  Agreementr.Objects = USr.PersObjx;
  Agreementr.SalesMan = USr.Code;
  Agreementr.Department = USr.Department;          
  curcode = "";
  GetFullCurncyRate(curcode,Agreementr.TransDate,fr,to1,to2,br1,br2);
  Agreementr.CurncyCode = curcode;
  Agreementr.FrRate = fr;
  Agreementr.ToRateB1 = to1; 
  Agreementr.ToRateB2 = to2;
  Agreementr.BaseRate1 = br1;
  Agreementr.BaseRate2 = br2;
//  Agreementr.Sum0 = BlankVal;
//  Agreementr.Sum1 = BlankVal;
//  Agreementr.Sum2 = BlankVal;
//  Agreementr.Sum3 = BlankVal;
//  Agreementr.Sum4 = BlankVal;
  Agreementr.AgreeStatus = 0;
  Agreementr.InvoiceBase = RIr.InvoiceBase;
  Agreementr.IncludeOriginalItem = RIr.IncludeOriginalItem;
  Agreementr.IncludePeriod = RIr.IncludePeriod;
  Agreementr.AddEmptyLine = RIr.AddEmptyLine;
  Agreementr.UseAsQty = RIr.UseAsQty;
  Agreementr.GroupInvoice = RIr.GroupInvoice;
  Agreementr.IncludeSite = RIr.IncludeSite;
  Agreementr.InclRentResNo = RIr.InclRentResNo;
  Agreementr.InclCustOrdNr = RIr.InclCustOrdNr;
  AgreementVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt AgreementVcRecordDuplicate(var record AgreementVc Agreementr,record AgreementVc Agreement2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val fr,to1,to2,br1,br2;
  string 10 curcode;

  curcode = Agreementr.CurncyCode;
  GetFullCurncyRate(curcode,Agreementr.TransDate,fr,to1,to2,br1,br2);
  Agreementr.CurncyCode = curcode;
  Agreementr.FrRate = fr;
  Agreementr.ToRateB1 = to1; 
  Agreementr.ToRateB2 = to2;
  Agreementr.BaseRate1 = br1;
  Agreementr.BaseRate2 = br2;
  Agreementr.SerNr = -1;
  Agreementr.TransDate = CurrentDate;
  Agreementr.OKFlag = 0;
  Agreementr.Prntdf = 0;
  if (SingleUserMode) then begin
    Agreementr.SerNr = NextSerNr("AgreementVc",Agreementr.TransDate,-1,false,"");
  end;
  Agreementr.AgreeStatus = 0;
  AgreementVcRecordDuplicate = res; 
  RETURN;
END;

Function Integer CheckAgreementStatus(record AgreementVc Agreementp)
begin
  record RentResVc RentResr;
  row RentResVc RentResrw;
  record RentChrgVc RentChrgr;
  Integer i,rwcnt;
  Boolean foundf,testf;
  Integer res;
  
  res = 0;
  foundf = true;
  RentResr.AgreementNr = Agreementp.SerNr;
  while (LoopKey("AgreementNr",RentResr,1,foundf)) begin
    if (RentResr.AgreementNr<>Agreementp.SerNr) then begin
      foundf = false;
    end;
    testf = true;
    if (foundf) then begin
      if (RentResr.Done<>0) then begin
        testf = false;
      end else begin
        if (Agreementp.AgreeStatus==2) then begin
          res = 2163;
          foundf = false;
        end;
      end;
    end;
    if (foundf==false) then begin
      testf = false;
    end;
    if (testf) then begin
      if (RentResr.RentQuant>0) then begin
        if (RentResr.RentResDel<>RentResr.RentQuant) then begin
          res = 2163;
          foundf = false;
        end;
      end;
      rwcnt = MatRowCnt(RentResr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RentResr,i,RentResrw);
        if (RentResrw.Type==0) then begin
          if (RentResrw.Quant>0) then begin
            if (RentResrw.Del<>RentResrw.Quant) then begin
              res = 2163;
              foundf = false;
            end;
          end;
        end;
      end;
    end;
  end;
  if (Agreementp.AgreeStatus==2) then begin
    RentChrgr.AgreementNr = Agreementp.SerNr;
    RentChrgr.InvNr = -1;
    if (ReadFirstKey("AgrInv",RentChrgr,2,true)) begin
      res = 20472;
    end;
  end;
  CheckAgreementStatus = res;
  return;
end;

global
function Boolean FoundProperAuthCust(var record AuthCustVc Authr,string custcode,Date startDate,Date TransDate)
begin
  Boolean foundf;
  Boolean res;

  res = false;
  Authr.OKFlag = 1;
  Authr.CustCode = custcode;
  foundf = true;
  while (LoopKey("OKFlag",Authr,2,foundf)) begin
    if (Authr.OKFlag==0) then begin
      foundf = false;
    end;
    if (Authr.CustCode!=custcode) then begin
      foundf = false;
    end;
    if (foundf) then begin
      if (DateInRange(startDate,Authr.startDate,Authr.endDate)) then begin
        res = true;
        foundf = false;
      end;
    end;
  end;
  FoundProperAuthCust = res;
  return;
end;

// Just checking startDate, not TransDate...
global
function Boolean CustIsAuth(string custcode,string contact,Date startDate,Date TransDate)
begin
  record AuthCustVc Authr;
  row AuthCustVc Authrw;
  record RentControlBlock RCr;
  Integer rwcnt,i;
  Boolean res;
  
  BlockLoad(RCr);
  res = true;
  if (RCr.AuthCustf!=0) then begin
    res = false;
    if (FoundProperAuthCust(Authr,custcode,startDate,TransDate)) then begin
      rwcnt = MatRowCnt(Authr);
      if (rwcnt==0) then begin
        res = true;
      end else begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Authr,i,Authrw);
          if (Authrw.AuthorisedContact==contact) then begin
            res = true;
          end;
        end;
      end;
    end;
  end;
  CustIsAuth = res;
  return;
end;

// Should probably read customers price....
procedure FindProperRentSums(string custcode,string artcode,string serialno,val qty,var val cost,var val sales)
begin
  record RentINVc RentINr;
  record INVc INr;
  Boolean rentinexistf;

  cost = 0;
  sales = 0;
  INr.Code = artcode;
  if (ReadFirstMain(INr,1,true)) then begin
    RentINr.Code = artcode;
    RentINr.SerialNr = serialno;
    rentinexistf = ReadFirstMain(RentINr,2,true);
    sales = INr.UPrice1;
    if (rentinexistf) then begin
      cost = RentINr.Value;
    end else begin
      cost = INr.InPrice;
    end;
  end;
  return;
end;

global
updating procedure UpdateCustRentStat(LongInt agreeno,string itemcode,string serialno,val qty)
begin
  record CustRentStatVc CustRentStatr;
  record CustRentStatVc oldCustRentStatr;
  record AgreementVc Agreementr;
  Integer ires;
  Boolean res;
  val cost,sales;
  
  Agreementr.SerNr = agreeno;
  if (ReadFirstMain(Agreementr,1,true)==false) then begin
    goto LUpdateCustRentStat;
  end;
  FindProperRentSums(Agreementr.CustCode,itemcode,serialno,qty,cost,sales);
  CustRentStatr.CustCode = Agreementr.CustCode;
  if (ReadFirstMain(CustRentStatr,1,true)) then begin
    RecordCopy(oldCustRentStatr,CustRentStatr);
    CustRentStatr.RentStockSum = CustRentStatr.RentStockSum + (sales * qty);
    CustRentStatr.RentStockCost = CustRentStatr.RentStockCost + (cost * qty);
    CustRentStatr.RentalUnits = CustRentStatr.RentalUnits + qty;
    if (CustRentStatr.RentalUnits==0) then begin
      CustRentStatr.RentStockCost = 0;
      CustRentStatr.RentStockSum = 0;
    end;
    ires = RecordUpdate(oldCustRentStatr,CustRentStatr,false);
  end else begin
    CustRentStatr.CustCode = Agreementr.CustCode;
    CustRentStatr.RentStockSum = CustRentStatr.RentStockSum + (sales * qty);
    CustRentStatr.RentStockCost = CustRentStatr.RentStockCost + (cost * qty);
    CustRentStatr.RentalUnits = CustRentStatr.RentalUnits + qty;
    if (CustRentStatr.RentalUnits==0) then begin
      CustRentStatr.RentStockCost = 0;
      CustRentStatr.RentStockSum = 0;
    end;
    res = RecordStore(CustRentStatr,false);
  end;
LUpdateCustRentStat:;
  return;
end;

global
function Boolean CheckRentCustCreditLimit(string custcode,string artcode,string serialno,val qty,Date startDate,Date TransDate)
begin
  Boolean res;
  record CUVc CUr;
  record CustRentStatVc CustRentStatr;
  record AuthCustVc Authr;
  row AuthCustVc Authrw;
  val bal,limit,cost,sales;
  Integer rwcnt,i;
  Boolean limitdaysf;
  
  res = true;
  if (qty<=0) then begin
    goto LCheckRentCustCreditLimit;
  end;
  CUr.Code = custcode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0,limitdaysf)==false) then begin
    goto LCheckRentCustCreditLimit;
  end;
  if (limitdaysf) then begin
    res = false;
    goto LCheckRentCustCreditLimit;
  end;
  if (blank(limit)==false) then begin 
    if (bal>limit) then begin
      res = false;
      goto LCheckRentCustCreditLimit;
    end;
  end;
  if (FoundProperAuthCust(Authr,custcode,startDate,TransDate)) then begin
    FindProperRentSums(custcode,artcode,serialno,qty,cost,sales);
    if ((Authr.MaxUnits!=0) or (Authr.MaxSales!=0) or (Authr.MaxCost!=0)) then begin
      CustRentStatr.CustCode = custcode;
      if (ReadFirstMain(CustRentStatr,1,true)) then begin
        if (Authr.MaxUnits>0) then begin
          if (Authr.MaxUnits<(CustRentStatr.RentalUnits+qty)) then begin
            res = false;
          end;
        end;
        if (Authr.MaxSales>0) then begin
          if (Authr.MaxSales<(CustRentStatr.RentStockSum+(sales * qty))) then begin
            res = false;
          end;
        end;
        if (Authr.MaxCost>0) then begin
          if (Authr.MaxCost<(CustRentStatr.RentStockCost+(cost * qty))) then begin
            res = false;
          end;
        end;
      end;
    end;
  end;
LCheckRentCustCreditLimit:;
  CheckRentCustCreditLimit = res;
  return;
end;

global
updating function LongInt AgreementVcRecordCheck(var record AgreementVc Agreementp,record AgreementVc Agreement2p,LongInt stat,LongInt check)
BEGIN
  LongInt res,sernr;
  record RentControlBlock RCr;
  record INVc INr;
  Integer insertmode,updatemode;
  LongInt oldnr;
  Integer err;
 
  BlockLoad(RCr);
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (stat==updatemode) then begin
    if (Agreementp.SerNr<=0) and (Agreement2p.OKFlag==0) then begin
      Agreementp.SerNr = Agreement2p.SerNr;
    end;
  end;
  oldnr = Agreementp.SerNr; 
  if (Agreementp.SerNr<=0) then begin
    Agreementp.SerNr = NextSerNr("AgreementVc",Agreementp.TransDate,-1,false,"");
  end;
  if (blankdate(Agreementp.startDate)) then begin
    RecordCheckError(1058,"",-1,"startDate");
    res = -1;
    goto LAgreementVcRecordCheck;
  end;
  if (nonblankdate(Agreementp.endDate)) then begin
    if (Agreementp.startDate>Agreementp.endDate) then begin
      RecordCheckError(20851,"",-1,"endDate");
      res = -1;
      goto LAgreementVcRecordCheck;
    end;
  end;
  if (CustIsAuth(Agreementp.CustCode,Agreementp.ClientContact,Agreementp.startDate,Agreementp.TransDate)==false) then begin
    RecordCheckError(2045,"",-1,"CustCode");
    res = -1;
    goto LAgreementVcRecordCheck;
  end;
  if ((Agreementp.OKFlag<>0) and (Agreement2p.OKFlag==0)) then begin
    if (blank(Agreementp.AgreeType)) then begin
      RecordCheckError(1058,"",-1,"AgreeType");
      res = -1;
      goto LAgreementVcRecordCheck;
    end;
  end;
  if (Agreementp.AgreeStatus>0) then begin
    if (Agreementp.AgreeStatus<>Agreement2p.AgreeStatus) then begin
      err = CheckAgreementStatus(Agreementp);
      if (err!=0) then begin
        RecordCheckError(err,"",-1,"startDate");
        res = -1;
        goto LAgreementVcRecordCheck;
      end;
    end;
  end;
  if (RCr.CheckLanguage == 1) then begin
    if (blank(Agreementp.LangCode)) then begin
       MessageBox(2285,"");
    end;
  end;
LAgreementVcRecordCheck:;
  if (res!=0) then begin
    Agreementp.SerNr = oldnr;
  end;
  AgreementVcRecordCheck = res;
  RETURN;
END;

global
function LongInt AgreementVcRecordRemoveTest(var record AgreementVc Agreementr,record AgreementVc Agreement2r,LongInt stat,LongInt long4)
BEGIN
  record RentResVc RentResr;
  LongInt res;

  res = 1;
  if (Agreementr.OKFlag<>0) then begin
    res = 0;
  end;
  RentResr.AgreementNr = Agreementr.SerNr;
  if (ReadFirstKey("AgreementNr",RentResr,1,true)) then begin
    res = 0;
  end;
  AgreementVcRecordRemoveTest = res;
  RETURN;
END;

procedure AgreementVcConvertB1ToB2(record AgreementVc Agreementr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  val t;
  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);
  RETURN;
END;

global
function LongInt AgreementVcRecordImport(var record AgreementVc Agreementr,record AgreementVc Agreement2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;
  record UserVc Userr;
      
  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    curncy = Agreementr.CurncyCode;
    fr = Agreementr.FrRate;
    to1 = Agreementr.ToRateB1;
    to2 = Agreementr.ToRateB2;
    br1 = Agreementr.BaseRate1;
    br2 = Agreementr.BaseRate2;
    ConvertToDualBase(curncy,Agreementr.TransDate,fr,to1,to2,br1,br2,t,true);
    Agreementr.CurncyCode = curncy;
    Agreementr.FrRate = fr;
    Agreementr.ToRateB1 = to1;
    Agreementr.ToRateB2 = to2;
    Agreementr.BaseRate1 = br1;
    Agreementr.BaseRate2 = br2;
  end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    curncy = Agreementr.CurncyCode;
    to1 = Agreementr.ToRateB1;
    to2 = Agreementr.ToRateB2;
    br1 = Agreementr.BaseRate1;
    br2 = Agreementr.BaseRate2;
    AgreementVcConvertB1ToB2(Agreementr,to1,to2,br1,br2);
    Agreementr.ToRateB1 = to1;
    Agreementr.ToRateB2 = to2;
    Agreementr.BaseRate1 = br1;
    Agreementr.BaseRate2 = br2;
  end;
  if (blank(Agreementr.SalesGroup)) then begin
    Userr.Code = Agreementr.SalesMan;
    ReadFirstMain(Userr,1,true);
    Userr.SalesGroup = Userr.SalesGroup;
  end;
  AgreementVcRecordImport = res;
  RETURN;
END;

global
function LongInt AgreementVcRecordProtectFields(var record AgreementVc Agreementr,record AgreementVc Agreement2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  Agreement2r.Prntdf = Agreementr.Prntdf;
  AgreementVcRecordProtectFields = res;
  return;
end;
