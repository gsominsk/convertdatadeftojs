
global
function LongInt TAccVcRecordInIndex(record TAccVc TAccr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (TAccr.Closed!=0) then begin 
    if (indexname=="ActTAccNumber")  then begin res = 0; end;
    if (indexname=="ActComment")  then begin res = 0; end;
    if (indexname=="ActAccType")  then begin res = 0; end;
    if (indexname=="ActGroup")  then begin res = 0; end;
  end;
  TAccVcRecordInIndex = res;
  RETURN;
END;

global
function LongInt TAccVcRecordDefaults(var record TAccVc TAccr,record TAccVc TAcc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  TAccr.Closed = 0;
  TAccVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt TAccVcRecordDuplicate(var record TAccVc TAccr,record TAccVc TAcc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  TAccVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt TAccVcRecordRemoveTest(var record TAccVc TAccr,record TAccVc TAcc2r,LongInt long3,LongInt globalf)
BEGIN
  LongInt res;
  record TTRVc TTRr;

  res = 1;
  if (globalf==1) then begin
    if (UserCanAction("DeleteSharedRecord",false)==false) then begin
      MessageBox(1274,StringFromStringSet(3,"DeleteSharedRecord"));
      res = 0;
      goto LTAccVcRecordRemoveTest;
    end;
  end;
  TTRr.AccNumber = TAccr.AccNumber;
  if (ReadFirstKey("AccNumber",TTRr,1,true)) then begin
    if (long3>0) then begin
      MessageBox(1039,"");
    end;
    res = 0;
  end;
LTAccVcRecordRemoveTest:;
  TAccVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt TAccVcRecordCheck(var record TAccVc TAccr,record TAccVc TAcc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record TAccGroupVc TAccGroupr;

  res = 0;
  if (blank(TAccr.TAccNumber)) then begin
    RecordCheckError(1120,"",-1,"TAccNumber");      
    res = -1; 
    goto LTAccVcRecordCheck;
  end;  
  TAccGroupr.Code = TAccr.Group; 
  if (ReadFirstMain(TAccGroupr,1,true)==false) then begin
    RecordCheckError(1290,"",-1,"Group");      
    res = -1; 
    goto LTAccVcRecordCheck;
  end;
LTAccVcRecordCheck:; 
  TAccVcRecordCheck = res;
  RETURN;
END;

global 
function Boolean TAccVcRecordShouldBeSynchronised(record TAccVc TAccr,string tagstr)
begin
  Boolean res;
  
  res = true;
  TAccVcrecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean TAccVcRecordSync(record TAccVc TAccr,string tagstr)
begin
  Boolean res;
  
  res = true;
  TAccVcRecordSync = res;
  return;
end;
