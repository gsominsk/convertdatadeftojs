external function string 255 RegisterSharedInCompanies(string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean CheckMultipleIndexField(string,Integer,Integer);

global
function LongInt ObjVcRecordInIndex(record ObjVc Objr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (Objr.TerminateFlag!=0) then begin 
    if (indexname=="ActCode")  then begin res = 0; end;
    if (indexname=="ActOTCode")  then begin res = 0; end;
    if (indexname=="ActComment")  then begin res = 0; end;
    if (indexname=="ActSbstOTCode")  then begin res = 0; end;
    if (indexname=="ActSbstComment")  then begin res = 0; end;
  end;
  ObjVcRecordInIndex = res;
  RETURN;
END;

global
function Boolean CodeTest(string tstr)
BEGIN
  Boolean res;
  Integer i;
  string 1 c;

  res = true;
  for (i=0;i<len(tstr);i=i+1) begin
    c = Mid(tstr,i,1);
    if ((c==",") or (c==".")) then begin
      res = false;
      goto LCodeTest;
    end;
  end;
 LCodeTest:; 
  CodeTest = res;
  RETURN;
END;

global
function LongInt ObjVcRecordCheck(var record ObjVc Objr,record ObjVc Obj2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record OTVc OTr;
  Integer olen,i,pos;
  string 20 autoobject;
  record ObjVc AutoObjr;

  res = 0;
  if (blank(Objr.Code)) then begin
    RecordCheckError(1058,"",-1,"Code");      
    res = -1;
    goto LObjVcRecordCheck;
  end;
  if (CodeTest(Objr.Code)==false) then begin
    RecordCheckError(1059,"",-1,"Code");      
    res = -1;
    goto LObjVcRecordCheck;
  end;
  if (nonblank(Objr.OTCode)) then begin
    OTr.Code = Objr.OTCode;
    if (ReadFirstMain(OTr,1,true)) then begin
      if (nonblank(OTr.Start)) then begin      
        olen = len(OTr.Start);
        for (i=0;i<olen;i=i+1) begin
          if (Mid(Objr.Code,i,1)!=Mid(OTr.Start,i,1)) then begin
            RecordCheckError(20415,": " & OTr.Start,-1,"Code");      
            res = -1;
            goto LObjVcRecordCheck;
          end;
        end;
      end;
      if (OTr.Length>0) then begin
        if (len(Objr.Code)!=OTr.Length) then begin
          RecordCheckError(20414,"",-1,"Code");      
          res = -1;
          goto LObjVcRecordCheck;
        end;
      end;
    end else begin
      RecordCheckError(1290,"",-1,"OTCode");      
      res = -1;
      goto LObjVcRecordCheck;
    end;
  end;
  if (nonblank(Objr.AutoObjects)) then begin
    pos = 0;
    ExtractObj(Objr.AutoObjects,pos,autoobject);
    while (nonblank(autoobject)) begin
      AutoObjr.Code = autoobject;
      if (ReadFirstMain(AutoObjr,1,true)) then begin
        if (nonblank(Objr.OTCode)) then begin
          if (AutoObjr.OTCode==Objr.OTCode) then begin
            RecordCheckError(1071,AutoObjr.Code,-1,"AutoObjects");      
            res = -1;
            goto LObjVcRecordCheck;
          end;
        end;
      end;
      ExtractObj(Objr.AutoObjects,pos,autoobject);
    end;  
  end;
LObjVcRecordCheck:;  
  ObjVcRecordCheck = res;
  RETURN;
END;

global
function LongInt ObjVcRecordRemoveTest(var record ObjVc Objr,record ObjVc Obj2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record ObjBalVc ObjBalr;
  string 255 sharedincomp,comp;
  Integer curcomp;
  Integer pos;

  res = 1;
  if (RegisterIsShared("ObjVc")) then begin
    sharedincomp = RegisterSharedInCompanies("ObjVc");
    if (nonblank(sharedincomp)) then begin
      curcomp = CurrentCompany;
      pos = 0;
      ExtractObj(sharedincomp,pos,comp);
      while (nonblank(comp)) begin
        if (SetCompany(StringToInt(comp),false)) then begin
          ObjBalr.Object = Objr.Code;
          if (ReadFirstKey("ObjAccKey",ObjBalr,1,true)) then begin
            if (long3>0) then begin
              MessageBox(1040,"");
            end;
            res = 0;
          end;
          if (res==0) then begin
            goto LObjVcRecordRemoveTest;
          end;
        end;
        ExtractObj(sharedincomp,pos,comp);
      end;
      ResetCompany(curcomp);
    end;
  end else begin
  end;
  ObjBalr.Object = Objr.Code;
  if (ReadFirstKey("ObjAccKey",ObjBalr,1,true)) then begin
    if (long3>0) then begin
      MessageBox(1040,"");
    end;
    res = 0;
  end;
LObjVcRecordRemoveTest:;  
  ObjVcRecordRemoveTest = res;
  RETURN;
END;

global 
function boolean ObjVcRecordShouldBeSynchronised(record ObjVc Objr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ObjVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function boolean ObjVcRecordSync(record ObjVc Objr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ObjVcRecordSync = res;
  return;
end;

global
function LongInt ObjVcRecordImportTest(var record ObjVc Objr,record ObjVc Obj2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 255 class;
  Integer pos;
  
  res = 1;
  if (CheckMultipleIndexField(Objr.AutoObjects,20,20)==false) then begin
    Objr.AutoObjects = "";
  end;
LObjVcRecordImportTest:;
  ObjVcRecordImportTest = res;
  RETURN;
END;

