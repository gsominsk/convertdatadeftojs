external function Integer IsUnOKAllowed_ResultUserVc(record ResultUserVc);

global
function LongInt ResultUserVcRecordDefaults(var record ResultUserVc ResultUserr,record ResultUserVc ResultUser2r,LongInt long3,LongInt long4)
begin
  record UserVc Userr;
  
  ResultUserr.Person = CurrentUser;
  Userr.Code = ResultUserr.Person;
  if (ReadFirstMain(Userr,1,true)) then begin
    ResultUserr.PersonName = Userr.Name;
    ResultUserr.PersonObjects = Userr.PersObjx;
  end;
  ResultUserr.TransDate = CurrentDate;
  ResultUserr.Month = GetMonth(ResultUserr.TransDate);
  ResultUserr.OKFlag = 0;
  ResultUserVcRecordDefaults = -1;
  return;
end;

global
function LongInt ResultUserVcRecordDuplicate(var record ResultUserVc ResultUserr,record ResultUserVc ResultUser2r,LongInt long3,LongInt long4)
begin
  ResultUserr.TransDate = CurrentDate;
  ResultUserr.Month = GetMonth(ResultUserr.TransDate);
  ResultUserr.OKFlag = 0;
  ResultUserr.SerNr = -1;
  ResultUserVcRecordDuplicate = -1;
  return;
end;

global
function LongInt ResultUserVcRecordCheck(var record ResultUserVc ResultUserr,record ResultUserVc ResultUser2r,LongInt stat,LongInt check)
begin
  LongInt res;
  record UserVc Userr;
  record ResultUserVc lResultUserr;
  Boolean transf,unokf,checkf;
  Integer insertmode,updatemode,error;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (check>0) then begin
    checkf = true;
  end else begin
    checkf = false;
  end;
  transf = false;
  if (ResultUserr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (ResultUser2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (ResultUserr.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (ResultUser2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    error = IsUnOKAllowed_ResultUserVc(ResultUserr);
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LResultUserVcRecordCheck;
  end;
  if (ResultUserr.SerNr<=0) then begin
    ResultUserr.SerNr = NextSerNr("ResultUserVc",ResultUserr.TransDate,-1,true,"");
  end;
  if (ResultUserr.SerNr==-1) then begin
    RecordCheckError(1033,"",-1,"Person");
    res = -1;
    goto LResultUserVcRecordCheck;
  end;
  if (blankdate(ResultUserr.TransDate)) then begin
    RecordCheckError(1058,"",-1,"TransDate");      
    res = -1;
    goto LResultUserVcRecordCheck;
  end;
  Userr.Code = ResultUserr.Person;
  if (ReadFirstMain(Userr,1,true)==false) then begin
    RecordCheckError(1290,"",-1,"Person");      
    res = -1;
    goto LResultUserVcRecordCheck;
  end;
  lResultUserr.Person = ResultUserr.Person;
  lResultUserr.Month = ResultUserr.Month;
  if (ReadFirstKey("PersonMonth",lResultUserr,2,true)) then begin
    if (ResultUserr.SerNr!=lResultUserr.SerNr) then begin
      if (GetYear(ResultUserr.TransDate)==GetYear(lResultUserr.TransDate)) then begin
        RecordCheckError(20010,"",-1,"TransDate");      
        res = -1;
        goto LResultUserVcRecordCheck;
      end;
    end;
  end;
  if (transf) then begin
    if (ResultUserr.AvailExclSupp==0) then begin
      RecordCheckError(1058,"",-1,"AvailExclSupp");      
      res = -1;
      goto LResultUserVcRecordCheck;
    end;
    if (ResultUserr.AvailInclSupp==0) then begin
      RecordCheckError(1058,"",-1,"AvailInclSupp");      
      res = -1;
      goto LResultUserVcRecordCheck;
    end;
  end;
LResultUserVcRecordCheck:;  
  ResultUserVcRecordCheck = res;
  return;
end;

global
function LongInt ResultUserVcRecordUpdate(var record ResultUserVc ResultUserr,record ResultUserVc ResultUser2r,LongInt long3,LongInt long4)
begin
  ResultUserr.Month = GetMonth(ResultUserr.TransDate);
  ResultUserVcRecordUpdate = -1;
  return;
end;

global
function LongInt ResultUserVcRecordSave(var record ResultUserVc ResultUserr,record ResultUserVc ResultUser2r,LongInt long3,LongInt long4)
begin
  ResultUserr.Month = GetMonth(ResultUserr.TransDate);
  ResultUserVcRecordSave = -1;
  return;
end;

global
function LongInt ResultUserVcRecordRemoveTest(var record ResultUserVc ResultUserr,record ResultUserVc ResultUser2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 0;
  if (ResultUserr.OKFlag==0) then begin
    res = 1;
    goto LResultUserVcRecordRemoveTest;
  end;
  BlockLoad(DBLockRec);
  if (ResultUserr.TransDate<=DBLockRec.DeleteBeforeDate) then begin        
    res = 1;
  end;
  if (res==0) then begin
    if (long3>0) then begin MessageBox(1544,""); end;
  end;  
LResultUserVcRecordRemoveTest:;
  ResultUserVcRecordRemoveTest = res; 
  RETURN;
END;
