external updating procedure FindAcptRulesAndCreateAcceptanceAlert(Integer,Integer,string,string,string,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Boolean AcceptanceRulesExists(Integer,string);
external function Boolean SerNrTestLeaveTransferVc(LongInt,Date,var Boolean);
external function Boolean Date2Test(string,Date,string,Integer);
external function Integer IsUnOKAllowed_LeaveTransferVc(record LeaveTransferVc);

global
function LongInt LeaveTransferVcRecordDefaults(var record LeaveTransferVc LTr,record LeaveTransferVc LT2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  LTr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    LTr.SerNr = NextSerNr("LeaveTransferVc",LTr.TransDate,-1,false,"");
  end;
  LeaveTransferVcRecordDefaults = res;
  return;
end;

global
function LongInt LeaveTransferVcRecordDuplicate(var record LeaveTransferVc LTr,record LeaveTransferVc LT2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  LTr.OKFlag = 0;
  if (SingleUserMode) then begin
    LTr.SerNr = NextSerNr("LeaveTransferVc",LTr.TransDate,-1,false,"");
  end;
  LTr.AcceptanceBy = "";
  LTr.AcceptanceFYI = "";
  LeaveTransferVcRecordDuplicate = res;
  return;
end;

global
function LongInt LeaveTransferVcRecordCheck(var record LeaveTransferVc LTr,record LeaveTransferVc LT2r,LongInt stat,LongInt long4)
begin
  LongInt res,error;
  LongInt oldnr;
  record CUVc CUr;
  Boolean transf,unokf,gentrans;

  res = 0;
  oldnr = LTr.SerNr;  
  transf = false;
  if (LTr.OKFlag!=0) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (LT2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (LTr.SerNr<=0) then begin
    LTr.SerNr = NextSerNr("LeaveTransferVc",LTr.TransDate,-1,false,"");
  end;
  if (LTr.OKFlag==0) then begin
    if (stat==Rs_update) then begin
      if (LT2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    error = IsUnOKAllowed_LeaveTransferVc(LTr);
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LLeaveTransferVcRecordCheck;
  end;
  if (SerNrTestLeaveTransferVc(LTr.SerNr,LTr.TransDate,gentrans)==false) then begin
    RecordCheckError(1034,"",-1,"SerNr");      
    res = -1; 
    goto LLeaveTransferVcRecordCheck;
  end;
  if (Date2Test("LeaveTransferVc",LTr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LLeaveTransferVcRecordCheck;
  end;

  if (blank(LTr.Employee)) then begin
    RecordCheckError(1120,"",-1,"Employee");    
    res = -1;
    goto LLeaveTransferVcRecordCheck;
  end;  
  CUr.Code = LTr.Employee;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,LTr.Employee,-1,"Employee");      
    res = -1;
    goto LLeaveTransferVcRecordCheck;
  end;
  if (CUr.EmployeeType==0) then begin
    RecordCheckError(1120,LTr.Employee,-1,"Employee");      
    res = -1; 
    goto LLeaveTransferVcRecordCheck;
  end;
  if (CUr.blockedFlag!=0) then begin
    RecordCheckError(1265,LTr.Employee,-1,"Employee");      
    res = -1;
    goto LLeaveTransferVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("LeaveTransferOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"LeaveTransferOK"),-1,"SerNr");      
      res = -1;
      goto LLeaveTransferVcRecordCheck;
    end;
  end;  
LLeaveTransferVcRecordCheck:;
  if (res!=0) then begin LTr.SerNr = oldnr; end;
  LeaveTransferVcRecordCheck = res;
  return;
end;

global
function LongInt LeaveTransferVcRecordSave(var record LeaveTransferVc LTr,record LeaveTransferVc LT2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  LeaveTransferVcRecordSave = res;
  return;
end;

global
function LongInt LeaveTransferVcRecordUpdate(var record LeaveTransferVc LTr,record LeaveTransferVc LT2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  LeaveTransferVcRecordUpdate = res;
  return;
end;

global
updating function LongInt LeaveTransferVcRecordUpdateAfter(var record LeaveTransferVc LTr,record LeaveTransferVc LT2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;

  LeaveTransferVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt LeaveTransferVcRecordRemoveTest(var record LeaveTransferVc LTr,record LeaveTransferVc LT2r,LongInt errm,LongInt long4)
begin
  LongInt res;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  
  res = 1;
  if (LTr.OKFlag!=0) then begin res = 0; end;

  actnr = 1;
  while (ReadRecordLink(LTr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (errm>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LLeaveTransferVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;
  if (res!=1) then begin
    if (errm>0) then begin MessageBox(1544,""); end;
  end;
LLeaveTransferVcRecordRemoveTest:;
  LeaveTransferVcRecordRemoveTest = res;
  return;
end;
