external function string 60 AddObjectToObjectList(string,string);
external function string 255 TaxTemplateVATCodeOnTRRows(record TaxMatrixVc,string);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external function Integer PostTaxMatrix_IVVc(var record TRVc,record AccBlock,record VATCodeBlock,record IVVc,string,val,val,val,val,val,Boolean,Boolean,Integer,var val);
external function Boolean UseTaxTemplatesforTaxCalc();
external function Integer AddIVWithholdingTaxesRow(record TRVc,record IVVc,Integer,string,val,val,val,val,val,Boolean,Boolean,var val);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function Integer AddTAX2Row(var record TRVc,record IVVc,Integer,string,val,val,val,val,val,Boolean,Boolean,var val,Boolean);
external function string 5 AddVATCodeToVATAccRows(string);
external procedure AddTransAutoTransRows(record TRVc);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external function Integer IVVc_Change(record TRVc,Integer,string,string,record IVVc,val,val,Boolean,Boolean,var val);
external function Integer IVVc_AddPaymentRows(record TRVc,record AccBlock,record IVVc,Integer,string,val,val,Boolean,Boolean,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindVAT(string,val,Integer,Integer);
external procedure ConvertSalesAcc(var string,Integer);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure RoundVATSum(string,string,string,var val);
external function Integer AddIVCostRow(var record TRVc,record IVVc,Integer,Integer,string,val,val,val,val,val,
                                       Boolean,Boolean,Boolean,var string,var val);
external function Integer PrepareAddIVTransRowNew2(record IVVc,Integer,string,
                                      var array string,var array string,var array val,var array val,var array val,
                                      var array string,var array string,var array string,var array string,var array Integer,var array val,var array val,
                                      Array record TaxMatrixVc,
                                      var Integer);
external function Integer AddIVTransRowsNew2(var record TRVc,var record SMVc,record IVVc,
                               val,val,val,val,val,
                               Boolean,Boolean,var val,record SMVc,record SMVc,var Integer,
                               Boolean,record VATCodeBlock,
                               array string,array string,array val,array val,array val,
                               array string,array string,array string,array string,array Integer,array val,array val,
                               Array record TaxMatrixVc,
                               Integer);
                                       
//have a look in comment in IVTransTool.hal
external function Integer AddIVTransRow(var record TRVc,var record SMVc,record IVVc,Integer,string,
                                        val,val,val,val,val,
                                        Boolean,Boolean,var string,var val,record SMVc,
                                        var Integer,Boolean,record VATCodeBlock);

external function Integer AddPRToIVTR(record IVVc,Integer,val,val,val);
external function Boolean GetCuAccUseRow2(string,var row CuAccBlock);
external procedure SetInvARAcc(var record IVVc);
external procedure SumupTRVATCode(record TRVc,string,var val,var string);
external function Integer GetAccNamCurVAT(string,var string,var string,Integer,string);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean TransInFiscal(Date);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Integer AddIVPrePayRow(var record TRVc,record IVVc,Integer,string,val,val,val,val,val,
                                         Boolean,Boolean,var string,var val,record SMVc,Integer,record TRGenBlock,record AccBlock);

global
function Boolean NegativeAmountsOnIVTrans(Integer InvType,val v)
begin
  Boolean res;
  
  res = false;
  if (InvType==kInvoiceTypeCredit or InvType==kInvoiceTypeCreditSpecialSales) then begin
    if (v>0) then begin
      res = true;
    end;
  end else begin
    if (v<0) then begin
      res = true;
    end;
  end;
  NegativeAmountsOnIVTrans = res;
  return;
end;          

function
Boolean AddLoansTrRows(var record TRVc gTRp,record IVVc IVp,Boolean dc1,Boolean dc2,var val instalsump,
                       val frrate,val torate1,val torate2,val baserate1,val baserate2,var val interestsump,
                       var val TotSump,var Integer errstrno)
BEGIN
  Integer i,rwcnt;
  row CuAccBlock cuaccrw;
  row IVVc IVrw;
  val rs;
  string 255 tstr,objstr,tstr2;
  Boolean  res;
  Boolean foundf;
  LongInt sernr;
  val nilv;

  nilv = -1;
  res = true;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    sernr = IVp.CredInv;
    if (sernr==-1) then begin sernr = IVp.SerNr; end;
  end else begin
    sernr = IVp.SerNr;
  end;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    foundf = GetCuAccUseRow2(IVrw.CuAccCode,cuaccrw);
    objstr = IVrw.Objects;
    if (nonblank(IVp.Objects)) then begin
      if (nonblank(objstr)) then begin 
        objstr = AddObjectToObjectList(objstr,IVp.Objects);
      end;
    end;
    if (len(objstr)>60) then begin objstr = Left(objstr,60); end;
    if (IVrw.stp==7) then begin
      errstrno = GetAccNamCurVAT(cuaccrw.ARInstallmentAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        errstrno = 1901;
        res = false;
        goto LAddLoansTrRows;
      end;
      rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (IVp.ARonTR!=0) then begin
        AddEuroCurncyNomARTrRow(gTRp,cuaccrw.ARInstallmentAcc,objstr,"",tstr,rs,blankval,false,dc1,TotSump,
                         IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVrw.Sum,nilv,
                         IVp.CustCode,sernr,1,nilv,IVp.PayDate,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end else begin
        AddEuroCurncyTrRow(gTRp,cuaccrw.ARInstallmentAcc,objstr,"",tstr,rs,false,dc1,TotSump,
                           IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVrw.Sum,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"");
      end;
      instalsump = instalsump + IVrw.Sum;
    end;
    if (IVrw.stp==8) then begin//interest
      errstrno = GetAccNamCurVAT(cuaccrw.ARInterestAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        errstrno = 1901;
        res = false;
        goto LAddLoansTrRows;
      end;
      rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (IVp.ARonTR!=0) then begin
        AddEuroCurncyNomARTrRow(gTRp,cuaccrw.ARInterestAcc,objstr,"",tstr,rs,blankval,false,dc1,TotSump,
                         IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVrw.Sum,nilv,
                         IVp.CustCode,sernr,1,nilv,IVp.PayDate,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end else begin
        AddEuroCurncyTrRow(gTRp,cuaccrw.ARInstallmentAcc,objstr,"",tstr,rs,false,dc1,TotSump,
                         IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVrw.Sum,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"");
      end;
      interestsump = interestsump + IVrw.Sum;
    end;
  end;
LAddLoansTrRows:;
  AddLoansTrRows = res;
  RETURN;
END;

function Integer AddIVRetentionRows(var record TRVc gTRp,record IVVc IVp,string cuobj,val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
begin
  Integer errstrno;
  row IVVc IVrw;
  Integer i,rwcnt;
  val rs,nilv;
  string 255 tstr,tstr2,taccnumber;
  Boolean negamf;

  nilv = -1;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeRetention:
        rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

        if (rs!=0) then begin
          negamf = NegativeAmountsOnIVTrans(IVp.InvType,rs);

          errstrno = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,60,IVp.CurncyCode);
          if (errstrno!=0) then begin
            if (errstrno==2) then begin
              errstrno = 20075;
            end else begin
              errstrno = 1908;
            end;
            goto LAddIVRetentionRows;
          end;

          if (CheckTTRPerRow("IVVc",IVp.ARAcc,cuobj,dc1,taccnumber,0)) then begin end;
          if (IVp.ARonTR!=0) then begin
            AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,blankval,false,dc1,TotSum,
                               IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVrw.Sum,nilv,
                               IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,negamf,taccnumber,"","");
          end else begin
            AddEuroCurncyTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,false,dc1,TotSum,
                               IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVrw.Sum,nilv,-1,negamf,taccnumber);
          end;

          errstrno = GetAccNamCurVAT(IVrw.SalesAcc,tstr,tstr2,60,IVp.CurncyCode);
          if (errstrno!=0) then begin
            errstrno = 1901;
            goto LAddIVRetentionRows;
          end;
          if (CheckTTRPerRow("IVVc",IVrw.SalesAcc,"",dc2,taccnumber,0)) then begin end;
          AddEuroCurncyTrRow(gTRp,IVrw.SalesAcc,"","",tstr,rs,true,dc2,TotSum,IVp.CurncyCode,
                             frrate,torate1,torate2,baserate1,baserate2,IVrw.Sum,nilv,-1,negamf ,taccnumber);
        end;
        if (errstrno!=0) then begin
          goto LAddIVRetentionRows;
        end;
    end;
  end;
LAddIVRetentionRows:;  
  AddIVRetentionRows = errstrno;
  return;
end;

function Integer AddIVWIPRows(var record TRVc gTRp,record IVVc IVp,val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
begin
  Integer res;
  record PRIVWIPVc PRIVWIPr;
  Boolean found,negamf;
  string 10 taccnumber;
  string 255 tstr;
  
  found = true;
  PRIVWIPr.InvNr = IVp.SerNr;
  while (LoopKey("InvNr",PRIVWIPr,1,found)) begin
    if (PRIVWIPr.InvNr!=IVp.SerNr) then begin found = false; end;
    if (found) then begin
      negamf = NegativeAmountsOnIVTrans(IVp.InvType,PRIVWIPr.Sum);                
      if (GetAccName(PRIVWIPr.WIPAcc,tstr,60)==false) then begin
        res = 1;
      end; 
      if (CheckTTRPerRow("IVVc",PRIVWIPr.WIPAcc,"",dc1,taccnumber,1)) then begin end;      
      AddEuroTrRow(gTRp,PRIVWIPr.WIPAcc,"","",tstr,PRIVWIPr.Sum,baserate1,baserate2,true,dc2,TotSum,negamf,taccnumber,"","");

      if (GetAccName(PRIVWIPr.WIPBalAcc,tstr,60)==false) then begin
        res = 1;
      end; 
      if (CheckTTRPerRow("IVVc",PRIVWIPr.WIPBalAcc,"",dc1,taccnumber,1)) then begin end;      
      AddEuroTrRow(gTRp,PRIVWIPr.WIPBalAcc,"","",tstr,PRIVWIPr.Sum,baserate1,baserate2,true,dc1,TotSum,negamf,taccnumber,"","");
    end;
  end;
  AddIVWIPRows = res;
  return;
end;

function string 10 GetDiscountAcc(string incode)
begin
  record INVc INr;
  record AccBlock Accr;
  record ITVc ITr;
  string 10 res;
  
  BlockLoad(Accr);
  res = Accr.DiscountAcc;
  INr.Code = incode;
  if ReadFirstMain(INr,1,true) then begin
    if nonblank(INr.Group) then begin
      ITr.Code = INr.Group;
      if ReadFirstMain(ITr,1,true) then begin
        if nonblank(ITr.DiscountAcc) then begin
          res = ITr.DiscountAcc;
        end;
      end;
    end;
  end;
  GetDiscountAcc = res;
  return;
end;

global
function Integer MakeTransFromIV(var record TRVc gTRp,var record SMVc gSMp,record IVVc IVp,Boolean rpt,Boolean inclqty)
BEGIN
  record TRGenBlock TRGenRec;
  record AccBlock ARb;
  record VATCodeBlock VATCb;
  record RoundBlock RoundRec;
  row VATCodeBlock VATCbrw;
  record TRVc lTRr;
  record IVVc IV2r;
  record SMVc VATr;
  record SMVc DTVATr;
  record CUVc CUr;
  record UserVc USr;
  record RebVc Rebr;
  row IVVc IVrw;
  row SMVc VATrw;
  Integer errstrno;
  Integer i,rwcnt,vcrwcnt;
  string 255 cuobj;
  string 255 ftxt,tstr,tstr2;
  string 10 firstVATAC,firstVATCode;
  val VATSum,TotSum,TAXSum,DTVATSum;
  val t1,rs,t;
  val frrate,torate1,torate2,baserate1,baserate2;
  Boolean dc1,dc2;
  val sum4,instalsum,interestsum;
  val tvat,srev,nilv;
  val tax1val,tax1curval,vatbase,vatcurval;
  string 10 firstrev,salesacc,vataccstr;
  string 60 objstr,SalesVATAcc;
  LongInt sernr;
  Array string 2 asalesvatcode;
  Array string 2 asalesrvrsvatcode;
  Array string 10 asalestaxtemplatecode;
  Array record TaxMatrixVc aTMr;
  Array string 10 asalesacc;
  Array string 10 asalesperiodcode;
  Array string 255 asalesobj;
  Array val asalessum;
  Array val asalesrowsum;
  Array val asalesqty;
  Array Integer asalesstp;  
  Array val asalestax2;
  Array val asalestax2reb;
  Integer asalescnt;
  val totalreb; 
  string 10 taccnumber,discacc;
  transaction string 255 gRuniningMaint;
  Boolean calcperceppercuf;
  record ORVc ORr;
  Boolean UseTaxTemplatesforTaxCalcf,SLdiscountf;
  record HotelBlock Hotelb;
  record TaxMatrixVc TMr;
  Integer IPBookVAT,PostIVVATonVATCorr;
  record CYBlock CYb;
                                          
  nilv = -1;
  errstrno = 1085;// Transactions could not be generated, please check settings 
  BlockLoad(ARb);
  BlockLoad(CYb);
  BlockLoad(TRGenRec);
  BlockLoad(VATCb);
  BlockLoad(Hotelb);
  SetupVATBase(VATr,vcrwcnt);  
  SetupVATBase(DTVATr,vcrwcnt);  
  UseTaxTemplatesforTaxCalcf = UseTaxTemplatesforTaxCalc;
  
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin    
    if (IVp.CredInv==-1) then begin
      frrate = IVp.FrRate;
      torate1 = IVp.ToRateB1;
      torate2 = IVp.ToRateB2;
      baserate1 = IVp.BaseRate1;
      baserate2 = IVp.BaseRate2;
    end else begin 
      IV2r.SerNr = IVp.CredInv;
      if (ReadFirstMain(IV2r,1,true)) then begin end;
      frrate = IV2r.FrRate;
      torate1 = IV2r.ToRateB1;
      torate2 = IV2r.ToRateB2;
      baserate1 = IV2r.BaseRate1;
      baserate2 = IV2r.BaseRate2;
    end;  
  end else begin
    frrate = IVp.FrRate;
    torate1 = IVp.ToRateB1;
    torate2 = IVp.ToRateB2;
    baserate1 = IVp.BaseRate1;
    baserate2 = IVp.BaseRate2;
  end;   
  RecordNew(gTRp);
  RecordNew(gSMp);
  if (rpt==false) then begin
    if (TRGenRec.IVGenTrans==0) then begin
      errstrno = 0;
      goto LMakeTransFromIV;
    end;
  end;  
  if (rpt==false) then begin
    if (nonblankdate(TRGenRec.IVStartDate) and
        (IVp.TransDate<TRGenRec.IVStartDate)) then begin
      errstrno = 0;
      goto LMakeTransFromIV;
    end;
  end;  
  if (true) then begin
    gTRp.IntYc = IVYc;
    gTRp.Number = IVp.SerNr;
    gTRp.RefStr = IVp.RefStr;
  end;
  if (HasLocalization("POL")) and (IsStandardProduct) then begin
    gTRp.RefStr = IVp.OfficialSerNr;
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":  ;
        otherwise
          errstrno = 1032;
          goto LMakeTransFromIV;
      end;
    end;
  end;  
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = IVp.TransDate;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      errstrno = 1075;
      goto LMakeTransFromIV;
    end;
  end;
  ftxt = IVp.CustCode;
  ftxt = ftxt & " ";
  ftxt = ftxt & IVp.Addr0;
  if (nonblank(IVp.CurncyCode)) then begin
    ftxt = ftxt & ", ";
    ftxt = ftxt & IVp.CurncyCode;
    ftxt = ftxt & " ";
    GetFullCurncyRateText(true,tstr,frrate,torate1,torate2,baserate1,baserate2);
    ftxt = ftxt & tstr;
  end;
  if (nonblank(IVp.CreditCard)) then begin
    ftxt = ftxt & ", ";
    ftxt = ftxt & IVp.CreditCard;
  end;
  if (nonblank(IVp.AuthorizationCode)) then begin
    ftxt = ftxt & ", ";
    ftxt = ftxt & IVp.AuthorizationCode;
  end;
  gTRp.Comment = ftxt;
  gSMp.RefStr = "";
  gSMp.Comment = gTRp.Comment;
  gSMp.TransDate = gTRp.TransDate;
  gSMp.SerNr = NextSerNr("SMVc",gSMp.TransDate,-1,false,"");
  if (IVp.OrderNr>0) then begin
    ORr.SerNr = IVp.OrderNr;
    ReadFirstMain(ORr,1,true);
  end;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (nonblank(IVrw.PeriodCode)) then begin
      ftxt = gSMp.Comment;
      ftxt = ftxt & " ";
      cuobj = USetStr(1150);
      cuobj = cuobj & ".";
      cuobj = cuobj & IVp.SerNr;
      ftxt = ftxt & cuobj;
      gSMp.Comment = ftxt;
      i = rwcnt;
    end;
    if (IVrw.vRebate <> 0) then begin
      totalreb = totalreb + (IVrw.Quant*IVrw.Price - IVrw.Sum);
    end; 
  end;
  TotSum = 0;
  VATSum = 0;
  firstVATAC = "";
  firstVATCode = "";
  cuobj = "";
  CUr.Code = IVp.CustCode;
  ReadFirstMain(CUr,1,true);
  if (HasLocalization("POL")) then begin
    IPBookVAT = IVp.IPBookVAT;
    if (IPBookVAT!=0) then begin
      PostIVVATonVATCorr = 1;
    end;
  end else begin
    switch (CUr.IPBookVAT) begin
      case 1:
        IPBookVAT = 1;
      case 2:
        IPBookVAT = 0;
      otherwise
        IPBookVAT = ARb.IPBookVAT;
    end;
    PostIVVATonVATCorr = ARb.PostIVVATonVATCorr;
  end;
  if (ARb.ARUseObj!=0) then begin
    if (nonblank(IVp.Objects)) then begin
      cuobj = AddObjectToObjectList(cuobj,IVp.Objects);
      if (CYb.ContactCodeAsObjectOnTR!=0) then begin
        if (SetInSet(IVp.CustCode,cuobj)==false) then begin
          cuobj = AddObjectToObjectList(cuobj,IVp.CustCode);
        end;
      end;
    end;
  end;
  switch (IVp.InvType) begin
    case kInvoiceTypeCredit:
      dc1 = false;
      dc2 = true;
    case kInvoiceTypeCreditSpecialSales:
      dc1 = false;
      dc2 = true;
    otherwise
      dc1 = true;
      dc2 = false;
  end;
  switch (gRuniningMaint) begin    
    case "RecalcStockMn":
      rwcnt = MatRowCnt(IVp);
      for (i=0; i<rwcnt; i=i+1) begin
        errstrno = AddIVCostRow(gTRp,IVp,ORr.OrderType,i,cuobj,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,true,tstr,TotSum);
        if (errstrno!=0) then begin goto LMakeTransFromIV; end;
      end;
      goto LMakeTransFromIV;
    otherwise
      ;      
  end;
  SetInvARAcc(IVp);
  instalsum = blankval;
  interestsum = blankval;
  if (AddLoansTrRows(gTRp,IVp,dc1,dc2,instalsum,interestsum,frrate,torate1,torate2,baserate1,baserate2,TotSum,errstrno)==false) then begin
    goto LMakeTransFromIV;
  end;  
  sum4 = IVp.Sum4;
  sum4 = sum4 - instalsum;
  sum4 = sum4 - interestsum;
  sum4 = sum4 + IVp.Commision;
/*
retention change  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeRetention:
        sum4 = sum4 - IVrw.Sum;
    end;
  end;
*/  
  if (ARb.BookVATOnlyFromDownpayment!=0) and (IVp.InvType==kInvoiceTypeDownpayment) then begin
  end else begin
  switch (IVp.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      goto LkInvoiceTypeCash;
    case kInvoiceTypeCash:
LkInvoiceTypeCash:;    
      if (IVp.DiscSum!=0) then begin
        Rebr.Code = IVp.RebCode;
        if (ReadFirstMain(Rebr,1,true)) then begin        
          if (nonblank(Rebr.DiscAcc)) then begin          
            errstrno = GetAccNamCurVAT(Rebr.DiscAcc,tstr,tstr2,60,IVp.CurncyCode);
            if (errstrno!=0) then begin
              errstrno = 1901;
              goto LMakeTransFromIV;
            end;
            rs = MulRateToBase1(IVp.CurncyCode,IVp.DiscSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            tstr = IVp.SerNr;
            AddEuroCurncyTrRow(gTRp,Rebr.DiscAcc,cuobj,"",tstr,rs,false,dc1,TotSum,
                               IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVp.DiscSum,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"");
            sum4 = sum4 - IVp.DiscSum;
          end;
        end;
      end;
      ftxt = IVp.ARAcc;
      errstrno = GetAccNamCurVAT(ftxt,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        if (errstrno==2) then begin
          errstrno = 20075;
        end else begin
          errstrno = 1908;
        end;
        goto LMakeTransFromIV;
      end;
      rs = MulRateToBase1(IVp.CurncyCode,sum4,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (CheckTTRPerRow("IVVc",ftxt,"",dc1,taccnumber,0)) then begin end;
      AddEuroCurncyTrRow(gTRp,ftxt,cuobj,"",tstr,rs,false,dc1,TotSum,
                         IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,sum4,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),taccnumber);
    case kInvoiceTypeCreditSpecialSales: 
      goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:      
      LkInvoiceTypeCredit:;
      sernr = IVp.CredInv;
      if (sernr==-1) then begin sernr = IVp.SerNr; end;
      if (IVp.DiscSum!=0) then begin
        Rebr.Code = IVp.RebCode;
        if (ReadFirstMain(Rebr,1,true)) then begin        
          if (nonblank(Rebr.DiscAcc)) then begin          
            errstrno = GetAccNamCurVAT(Rebr.DiscAcc,tstr,tstr2,60,IVp.CurncyCode);
            if (errstrno!=0) then begin
              errstrno = 1901;
              goto LMakeTransFromIV;
            end;
            tstr = IVp.SerNr;
            rs = MulRateToBase1(IVp.CurncyCode,IVp.DiscSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            if (IVp.ARonTR!=0) then begin
              AddEuroCurncyNomARTrRow(gTRp,Rebr.DiscAcc,cuobj,"",tstr,rs,blankval,false,dc1,TotSum,
                                 IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVp.DiscSum,nilv,
                                 IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"","","");
            end else begin
              AddEuroCurncyTrRow(gTRp,Rebr.DiscAcc,cuobj,"",tstr,rs,false,dc1,TotSum,
                                 IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVp.DiscSum,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"");
            end;
            sum4 = sum4 - IVp.DiscSum;
          end;
        end;
      end;
      errstrno = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        if (errstrno==2) then begin
          errstrno = 20075;
        end else begin
          errstrno = 1908;
        end;
        goto LMakeTransFromIV;
      end;
      rs = MulRateToBase1(IVp.CurncyCode,sum4,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,cuobj,dc1,taccnumber,0)) then begin end;
      if (IVp.ARonTR!=0) then begin
        AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,blankval,false,dc1,TotSum,
                           IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,sum4,nilv,
                           IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),taccnumber,"","");
      end else begin
        AddEuroCurncyTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,false,dc1,TotSum,
                           IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,sum4,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),taccnumber);
      end;
    otherwise
      if (IVp.DiscSum!=0) then begin                
        Rebr.Code = IVp.RebCode;
        if (ReadFirstMain(Rebr,1,true)) then begin        
          if (nonblank(Rebr.DiscAcc)) then begin          
            errstrno = GetAccNamCurVAT(Rebr.DiscAcc,tstr,tstr2,60,IVp.CurncyCode);
            if (errstrno!=0) then begin
              errstrno = 1901;
              goto LMakeTransFromIV;
            end;
            tstr = IVp.SerNr;
            rs = MulRateToBase1(IVp.CurncyCode,IVp.DiscSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            if (IVp.ARonTR!=0) then begin
              AddEuroCurncyNomARTrRow(gTRp,Rebr.DiscAcc,cuobj,"",tstr,rs,blankval,false,dc1,TotSum,
                                 IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVp.DiscSum,nilv,
                                 IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"","","");
            end else begin
              AddEuroCurncyTrRow(gTRp,Rebr.DiscAcc,cuobj,"",tstr,rs,false,dc1,TotSum,
                                 IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVp.DiscSum,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"");
            end;
            sum4 = sum4 - IVp.DiscSum;
          end;
        end;
      end;
      errstrno = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        if (errstrno==2) then begin
          errstrno = 20075;
        end else begin
          errstrno = 1908;
        end;
        goto LMakeTransFromIV;
      end;
      rs = MulRateToBase1(IVp.CurncyCode,sum4,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,cuobj,dc1,taccnumber,0)) then begin end;
      if (IVp.ARonTR!=0) then begin
        AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,blankval,false,dc1,TotSum,
                           IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,sum4,nilv,
                           IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),taccnumber,"","");
      end else begin
        AddEuroCurncyTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,false,dc1,TotSum,
                           IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,sum4,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),taccnumber);
      end;
  end;
  end;
  for (i=0; i<rwcnt; i=i+1) begin
    errstrno = IVVc_AddPaymentRows(gTRp,ARb,IVp,i,cuobj,baserate1,baserate2,dc1,dc2,TotSum);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
  
  cuobj = IVp.Objects;
  if (CYb.ContactCodeAsObjectOnTR!=0) then begin
    if (SetInSet(IVp.CustCode,cuobj)==false) then begin
      cuobj = AddObjectToObjectList(cuobj,IVp.CustCode);
    end;
  end;
/*  it is done on paste

  if (nonblank(IVp.SalesMan)) then begin
    USr.Code = IVp.SalesMan;
    if (ReadFirstMain(USr,1,true)) then begin
      if (nonblank(USr.PersObjx)) then begin
        if (nonblank(cuobj)) then begin
          cuobj = cuobj & ",";
        end;  
        cuobj = cuobj & USr.PersObjx;//what? isn't it on paste saleman
      end;
    end;
  end;
*/  
  rwcnt = MatRowCnt(IVp);
  
  for (i=0; i<rwcnt; i=i+1) begin
    errstrno = PrepareAddIVTransRowNew2(IVp,i,cuobj,asalesacc,asalesobj,asalessum,asalesrowsum,asalesqty,asalesvatcode,asalesrvrsvatcode,asalestaxtemplatecode,asalesperiodcode,asalesstp,asalestax2,asalestax2reb,aTMr,asalescnt);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
  
  errstrno = AddIVTransRowsNew2(gTRp,gSMp,IVp,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum,VATr,DTVATr,vcrwcnt,inclqty,VATCb,
                               asalesacc,asalesobj,asalessum,asalesrowsum,asalesqty,asalesvatcode,asalesrvrsvatcode,asalestaxtemplatecode,asalesperiodcode,asalesstp,asalestax2,asalestax2reb,aTMr,asalescnt);

  if (errstrno!=0) then begin goto LMakeTransFromIV; end;

  SLdiscountf = true;
  if (IVp.JobNr>0) then begin
    if (Hotelb.PostDiscount!=0) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) then begin
          if (UseTaxTemplatesforTaxCalc) then begin
            UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
            tvat = CalculateTotalVATFromTaxMatrix(TMr,IVp.InclVAT);
          end else begin
            MulVATIV(IVrw.VATCode,IVrw.Quant*IVrw.BasePrice,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);            
          end;
          t = IVrw.Quant*IVrw.BasePrice - tvat - t1;
          if (UseTaxTemplatesforTaxCalc) then begin
            UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
            tvat = CalculateTotalVATFromTaxMatrix(TMr,IVp.InclVAT);
          end else begin
            MulVATIV(IVrw.VATCode,IVrw.Sum,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);            
          end;
          t = t - (IVrw.Sum - tvat - t1);
          if (t!=0) then begin
            discacc = GetDiscountAcc(IVrw.ArtCode);
            if (GetAccName(discacc,tstr,60)==false) then begin
              errstrno = 20052;
              goto LMakeTransFromIV;
            end; 
            rs = MulRateToBase1(IVp.CurncyCode,t,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            objstr = cuobj;
            if (nonblank(IVrw.Objects)) then begin
              objstr = AddObjectToObjectList(objstr,IVrw.Objects);
            end;        
            UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
            AddEuroCurncyTrRow(gTRp,discacc,objstr,TaxTemplateVATCodeOnTRRows(TMr,IVrw.VATCode),tstr,rs,true,dc1,TotSum,
                     IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,t,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"");            
          end;
        end;
      end;
      SLdiscountf = false;                
    end;
  end;  
  if (SLdiscountf) then begin
    if (ARb.BookedDiscount!=0) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) then begin
          if (UseTaxTemplatesforTaxCalc) then begin
            UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
            tvat = CalculateTotalVATFromTaxMatrix(TMr,IVp.InclVAT);
          end else begin
            MulVATIV(IVrw.VATCode,IVrw.Quant*IVrw.Price,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);            
          end;
          switch (IVp.InclVAT) begin
            case 0:
              t = IVrw.Quant*IVrw.Price;
            case 1:
              t = IVrw.Quant*IVrw.Price - tvat - t1;
            case 2:
              t = IVrw.Quant*IVrw.Price - tvat;
          end;
          
          if (UseTaxTemplatesforTaxCalc) then begin
            UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
            tvat = CalculateTotalVATFromTaxMatrix(TMr,IVp.InclVAT);
          end else begin
            MulVATIV(IVrw.VATCode,IVrw.Sum,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);            
          end;
          switch (IVp.InclVAT) begin
            case 0:
              t = t - IVrw.Sum;
            case 1:
              t = t - (IVrw.Sum - tvat - t1);
            case 2:
              t = t - (IVrw.Sum - tvat);
          end;
          if (t!=0) then begin
            discacc = GetDiscountAcc(IVrw.ArtCode);
            if (GetAccName(discacc,tstr,60)==false) then begin
              errstrno = 20052;
              goto LMakeTransFromIV;
            end; 
            rs = MulRateToBase1(IVp.CurncyCode,t,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            objstr = cuobj;
            if (nonblank(IVrw.Objects)) then begin
              objstr = AddObjectToObjectList(objstr,IVrw.Objects);
            end;        
            UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
            AddEuroCurncyTrRow(gTRp,discacc,objstr,TaxTemplateVATCodeOnTRRows(TMr,IVrw.VATCode),tstr,rs,true,dc1,TotSum,
                     IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,t,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"");            
          end;
        end;
      end;
    end;
  end;

  for (i=0; i<rwcnt; i=i+1) begin    
    if ((IVp.InclVAT==0) and (ARb.RevInclVAT!=0)) then begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp!=kInvoiceRowTypePrepayment) and (IVrw.stp!=kInvoiceRowTypeGiftVoucherPayment) and (IVrw.stp!=kInvoiceRowTypeRetention) then begin
      
      t1 = FindVAT(IVrw.VATCode,IVrw.Sum,0,0);
      t1 = MulRateToBase1(IVp.CurncyCode,t1,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (t1!=0) then begin
        salesacc = ARb.SalesVAT;
        if (blank(salesacc)) then begin
          salesacc = IVrw.SalesAcc;
        end;
        if (blank(salesacc)) then begin
          GetItemSalesAcc(IVrw.ArtCode,IVp.ExportFlag,salesacc);
        end;
        if (blank(salesacc)) then begin
          salesacc = ARb.DomSalesAcc;
        end;        
        ConvertSalesAcc(salesacc,IVp.ExportFlag);      
        if (GetAccName(salesacc,tstr,60)==false) then begin
          errstrno = 1901;
          goto LMakeTransFromIV;
        end;
        objstr = cuobj;
        if (IVrw.stp==kInvoiceRowTypeNormal or IVrw.stp==7 or IVrw.stp==8) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==11) then begin
          if (nonblank(IVrw.Objects)) then begin
            objstr = AddObjectToObjectList(objstr,IVrw.Objects);
          end;
        end;  
        if (CheckTTRPerRow("IVVc",salesacc,objstr,dc1,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,salesacc,objstr,IVrw.VATCode,tstr,t1,baserate1,baserate2,false,dc1,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,t1),taccnumber,"","");
      end;
      
      end;
    end;      
  end;
/*  
  if (ARb.BookedDiscount==1) and (totalreb<>0) then begin
    if (GetAccName(ARb.DiscountAcc,tstr,60)==false) then begin
      errstrno = 20052;
      goto LMakeTransFromIV;
    end; 
    rs = MulRateToBase1(IVp.CurncyCode,totalreb,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    AddEuroCurncyTrRow(gTRp,ARb.DiscountAcc,cuobj,"",tstr,rs,false,dc1,TotSum,
             IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,totalreb,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,rs),"");
  end;
*/  

  if (IVp.FrPrice!=0) then begin
    RecordCopy(IV2r,IVp);
    ClearRow(IV2r,IVrw,1);
    IVrw.ArtCode = IVp.FrItem;
    IVrw.stp = kInvoiceRowTypeNormal;
    IVrw.Quant = 1;
    IVrw.Spec = "";
    IVrw.Price = IVp.FrPrice;
    IVrw.Sum = IVp.FrPrice;
    IVrw.vRebate = blankval;
    IVrw.SalesAcc = IVp.FrSalesAcc;
    IVrw.VATCode = IVp.FrVATCode;
    IVrw.Objects = "";
    IVrw.OrdRow = -1;
    IVrw.BasePrice = IVp.FrBase;
    IVrw.rowGP = IVp.FrGP;
    MatRowPut(IV2r,0,IVrw);
    errstrno = AddIVTransRow(gTRp,gSMp,IV2r,0,IVp.Objects,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,tstr,TotSum,VATr,vcrwcnt,false,VATCb);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
  CalcVATBaseVAT(VATr,IVp.InclVAT,IVp.NoTAXonVAT,vcrwcnt,VATSum,TAXSum);
  CalcVATBaseVAT(DTVATr,IVp.InclVAT,IVp.NoTAXonVAT,vcrwcnt,DTVATSum,TAXSum);
  RoundVATSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",VATSum);
  VATSum = MulRateToBase1(IVp.CurncyCode,VATSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

  if (ARb.BookVATOnlyFromDownpayment!=0) and (IVp.InvType==kInvoiceTypeDownpayment) then begin
    objstr = ""; 
    if (ARb.VATUseObj!=0) then begin
      objstr = IVp.Objects;
    end;
      if (GetAccName(ARb.VATBAcc,tstr,60)==false) then begin
        errstrno = 1903;
        goto LMakeTransFromIV;
      end;
      BlockLoad(RoundRec);  
      vcrwcnt = MatRowCnt(VATCb);
      for (i=0;i<vcrwcnt;i=i+1) begin
        MatRowGet(VATCb,i,VATCbrw);
        MatRowGet(VATr,i,VATrw);
        if (VATrw.DebVal!=0) then begin 
        if (nonblank(VATCbrw.VATCode)) then begin
          switch (RoundRec.VATCalcWay) begin
            case 0:    
              MulVATIV(VATCbrw.VATCode,VATrw.DebVal,tvat,tax1val,IVp.InclVAT,IVp.NoTAXonVAT);
            case 1:
              tvat = VATrw.CredVal2;
              tax1val = VATrw.CurCredVal;
          end;       
          tax1curval = tax1val;
          if (tvat!=0) then begin
            RoundVATSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",tvat);
            if (((IVp.InclVAT==0) and (ARb.RevInclVAT==0)) and ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4))) then begin
              if (GetAccName(VATCbrw.SalesVATAcc,tstr2,60)==false) then begin 
                errstrno = 1902;
                goto LMakeTransFromIV;
              end;
              if (CheckTTRPerRow("IVVc",VATCbrw.SalesVATAcc,objstr,dc2,taccnumber,1)) then begin end;
              AddEuroTrRow(gTRp,VATCbrw.SalesVATAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr2,tvat,baserate1,baserate2,false,dc2,TotSum,false,taccnumber,"","");
              if (CheckTTRPerRow("IVVc",ARb.VATBAcc,objstr,dc1,taccnumber,0)) then begin end;
              AddEuroTrRow(gTRp,ARb.VATBAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,tvat,baserate1,baserate2,false,dc1,TotSum,false,taccnumber,"","");
            end;
          end;
        end;
        end;
      end;    
  end else begin
    objstr = ""; 
    if (ARb.VATUseObj!=0) then begin
      objstr = IVp.Objects;
      if (CYb.ContactCodeAsObjectOnTR!=0) then begin
        if (SetInSet(IVp.CustCode,objstr)==false) then begin
          objstr = AddObjectToObjectList(objstr,IVp.CustCode);
        end;
      end;
    end;
    BlockLoad(RoundRec);  
    if (UseTaxTemplatesforTaxCalcf) then begin
      errstrno = PostTaxMatrix_IVVc(gTRp,ARb,VATCb,IVp,objstr,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,0,totsum);
      if (errstrno!=0) then begin
        goto LMakeTransFromIV;
      end;    
    end else begin  
    vcrwcnt = MatRowCnt(VATCb);
    for (i=0;i<vcrwcnt;i=i+1) begin
      MatRowGet(VATCb,i,VATCbrw);
      MatRowGet(VATr,i,VATrw);
      if (VATrw.DebVal!=0) then begin 
      if (nonblank(VATCbrw.VATCode)) then begin
        SumupTRVATCode(gTRp,VATCbrw.VATCode,srev,firstrev);
/*
        if (blank(firstrev)) then begin
          firstrev = VATCbrw.
        end;
*/
        if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
          srev = -srev;
        end;  
        switch (RoundRec.VATCalcWay) begin
          case 0:    
            MulVATIV(VATCbrw.VATCode,VATrw.DebVal,tvat,tax1val,IVp.InclVAT,IVp.NoTAXonVAT);
          case 1:
            tvat = VATrw.CredVal2;
            tax1val = VATrw.CurCredVal;
        end;       
        if (IVp.NoTax1!=0) then begin
          tax1val = blankval;
        end;
        vatcurval = tvat;
        tax1curval = tax1val;
        vatbase = VATrw.DebVal;
        RoundVATSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",tvat);
        tvat = MulRateToBase1(IVp.CurncyCode,tvat,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        tax1val = MulRateToBase1(IVp.CurncyCode,tax1val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        vatbase = MulRateToBase1(IVp.CurncyCode,vatbase,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        if (IVp.InclVAT>0) then begin
          vatbase = vatbase - tvat;
          vatbase = vatbase - tax1val;
        end;
        t = srev - vatbase;
        if (tvat!=0) then begin
          if (ARb.BookVATOnlyFromDownpayment==0) then begin
/*            
this code has no effect at all unless reverse vat used (and then NL trans is really crappy)
what is it for ? 
            if (((IVp.InclVAT==0) and (ARb.RevInclVAT==0)) and ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4))) then begin
              if (GetAccName(firstrev,tstr,60)==false) then begin 
                errstrno = 1902;
                goto LMakeTransFromIV;
              end;
              if (CheckTTRPerRow("IVVc",firstrev,objstr,dc1,taccnumber,0)) then begin end;
              AddEuroTrRow(gTRp,firstrev,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,t,baserate1,baserate2,false,dc1,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,t),taccnumber,"","");
            end;
*/            
          end;
          if ((ARb.BookCreditOnPurchAcc!=0) and (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales)) then begin
            vataccstr = VATCbrw.PurchVATAcc;
            if (IVp.IPBookVAT!=0 and HasLocalization("POL")) then begin
              vataccstr = VATCbrw.CorPurchVATAcc;
              if (blank(firstVATAC)) then begin
                if (nonblank(VATCbrw.CorPurchVATAcc)) then begin
                  firstVATAC = VATCbrw.CorPurchVATAcc;
                  firstVATCode = VATCbrw.VATCode;
                end;  
              end;
            end;
            if (blank(firstVATAC)) then begin
              if (nonblank(VATCbrw.PurchVATAcc)) then begin
                firstVATAC = VATCbrw.PurchVATAcc;
                firstVATCode = VATCbrw.VATCode;
              end;  
            end;
            if (GetAccName(vataccstr,tstr,60)==false) then begin 
              errstrno = 1902;
              goto LMakeTransFromIV;
            end;
            if (CheckTTRPerRow("IVVc",vataccstr,objstr,dc2,taccnumber,0)) then begin end;
            AddEuroTrRow(gTRp,vataccstr,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,tvat,baserate1,baserate2,true,dc2,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,tvat),taccnumber,"","");
          end else begin
            vataccstr = VATCbrw.SalesVATAcc;
            if (IVp.IPBookVAT!=0 and HasLocalization("POL")) then begin
              if (blank(firstVATAC)) then begin
                firstVATAC = VATCbrw.CorSalesVATAcc;
                firstVATCode = VATCbrw.VATCode;
              end;
            end;
            
            if (blank(firstVATAC)) then begin
              if (nonblank(VATCbrw.SalesVATAcc)) then begin
                if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
                  firstVATAC = VATCbrw.CredSalesVATAcc;
                end;
                if (blank(firstVATAC)) then begin firstVATAC = VATCbrw.SalesVATAcc; end;
                firstVATCode = VATCbrw.VATCode;
              end;  
            end;
            switch (IVp.InvType) begin
              case kInvoiceTypeCreditSpecialSales: 
                goto LkInvoiceTypeCredit;
              case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
                SalesVATAcc = VATCbrw.CredSalesVATAcc;
                if (blank(SalesVATAcc)) then begin SalesVATAcc = VATCbrw.SalesVATAcc; end;
              otherwise
                SalesVATAcc = VATCbrw.SalesVATAcc;
            end;
            if (PostIVVATonVATCorr!=0) then begin
              SalesVATAcc = VATCbrw.CorSalesVATAcc;
            end;
            if (GetAccName(SalesVATAcc,tstr,60)==false) then begin 
              if (PostIVVATonVATCorr!=0) then begin
                errstrno = 1921;
              end else begin
                errstrno = 1902;
              end;
              goto LMakeTransFromIV;
            end;
            if (CheckTTRPerRow("IVVc",SalesVATAcc,objstr,dc2,taccnumber,0)) then begin end;
            AddEuroCurncyTrRow(gTRp,SalesVATAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,tvat,true,dc2,TotSum,IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,vatcurval,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,tvat),taccnumber);
          end;
        end;
        if (tax1val!=0) then begin
          if (GetAccName(VATCbrw.Tax1Acc,tstr,60)==false) then begin 
            errstrno = 20078;
            goto LMakeTransFromIV;
          end;
          if (CheckTTRPerRow("IVVc",VATCbrw.Tax1Acc,objstr,dc2,taccnumber,0)) then begin end;
//          AddEuroTrRow(gTRp,VATCbrw.Tax1Acc,"","",tstr,tax1val,baserate1,baserate2,true,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales and tax1val>0,taccnumber,"","");
          if (IVp.NoTAXonVAT==2) then begin
            AddEuroCurncyTrRow(gTRp,VATCbrw.Tax1Acc,"",VATCbrw.VATCode,tstr,tax1val,true,dc2,TotSum,
                               IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,tax1curval,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,tax1val),"");
          end else begin
            AddEuroCurncyTrRow(gTRp,VATCbrw.Tax1Acc,"","",tstr,tax1val,true,dc2,TotSum,
                               IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,tax1curval,nilv,-1,NegativeAmountsOnIVTrans(IVp.InvType,tax1val),"");
          end;
        end;
      end;
      end;
    end;
    end;
    if (IVp.InvType==kInvoiceTypeCash) then begin     
      if (IPBookVAT!=0) then begin
        for (i=0;i<vcrwcnt;i=i+1) begin
          MatRowGet(VATCb,i,VATCbrw);
          MatRowGet(VATr,i,VATrw);
          if (VATrw.DebVal!=0) then begin 
            if (nonblank(VATCbrw.VATCode)) then begin
              SumupTRVATCode(gTRp,VATCbrw.VATCode,srev,firstrev);
              switch (RoundRec.VATCalcWay) begin
                case 0:    
                  MulVATIV(VATCbrw.VATCode,VATrw.DebVal,tvat,tax1val,IVp.InclVAT,IVp.NoTAXonVAT);
                case 1:
                  tvat = VATrw.CredVal2;
                  tax1val = VATrw.CurCredVal;
              end;        
              vatbase = VATrw.DebVal;
              RoundVATSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",tvat);
              tvat = MulRateToBase1(IVp.CurncyCode,tvat,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              tax1val = MulRateToBase1(IVp.CurncyCode,tax1val,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              vatbase = MulRateToBase1(IVp.CurncyCode,vatbase,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              if (IVp.InclVAT>0) then begin
                vatbase = vatbase - tvat;
                vatbase = vatbase - tax1val;
              end;
              t = srev - vatbase;
              if (tvat!=0) then begin
/*              
                if (ARb.BookVATOnlyFromDownpayment==0) then begin
                  if (((IVp.InclVAT==0) and (ARb.RevInclVAT==0)) and ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4))) then begin
                    if (GetAccName(firstrev,tstr,60)==false) then begin 
                      errstrno = 1902;
                      goto LMakeTransFromIV;
                    end;
                    if (CheckTTRPerRow("IVVc",firstrev,objstr,dc1,taccnumber,0)) then begin end;
                    AddEuroTrRow(gTRp,firstrev,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,t,baserate1,baserate2,false,dc1,TotSum,false,taccnumber,"","");
                  end;
                end;
*/                
                if (IPBookVAT and HasLocalization("POL")) then begin
                  vataccstr = VATCbrw.SalesVATAcc;
                end else begin
                  vataccstr = VATCbrw.PaySalesVATAcc;
                end;
                if (GetAccName(vataccstr,tstr,60)==false) then begin 
                  errstrno = 1902;
                  goto LMakeTransFromIV;
                end;
                if (CheckTTRPerRow("IVVc",vataccstr,objstr,dc2,taccnumber,0)) then begin end;
                AddEuroTrRow(gTRp,vataccstr,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,tvat,baserate1,baserate2,true,dc2,TotSum,false,
                taccnumber,"","");
                if (IPBookVAT and HasLocalization("POL")) then begin
                  vataccstr = VATCbrw.CorSalesVATAcc;
                end else begin
                  vataccstr = VATCbrw.SalesVATAcc;
                end;
                if (blank(firstVATAC)) then begin
                  if (nonblank(vataccstr)) then begin
                    firstVATAC = vataccstr;
                    firstVATCode = VATCbrw.VATCode;
                  end;  
                end;
                if (GetAccName(vataccstr,tstr,60)==false) then begin 
                  errstrno = 1902;
                  goto LMakeTransFromIV;
                end;
                if (CheckTTRPerRow("IVVc",vataccstr,objstr,dc1,taccnumber,0)) then begin end;
                AddEuroTrRow(gTRp,vataccstr,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,tvat,baserate1,baserate2,true,dc1,TotSum,false,
                taccnumber,"","");
              end;
            end;
          end;
        end;
      end;
    end;
  end;  
  if (UseTaxTemplatesforTaxCalcf) then begin
  end else begin
    t = MulRateToBase1(IVp.CurncyCode,IVp.Sum3,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    t1 = VATSum + DTVATSum - t;  
    if (t1!=0) then begin
      if (GetAccName(firstVATAC,tstr,60)==false) then begin
        errstrno = 1903;
        goto LMakeTransFromIV;
      end;
      if (CheckTTRPerRow("IVVc",firstVATAC,objstr,dc1,taccnumber,0)) then begin end;
      RoundVATSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",t1);
      AddEuroTrRow(gTRp,firstVATAC,objstr,AddVATCodeToVATAccRows(firstVATCode),tstr,t1,baserate1,baserate2,false,dc1,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,t1),taccnumber,"","");
      if ((IVp.InclVAT!=0) and (ARb.RevInclVAT!=0)) then begin 
        if (GetAccName(ARb.VATBAcc,tstr,60)==false) then begin
          errstrno = 1903;
          goto LMakeTransFromIV;
        end;
        if (CheckTTRPerRow("IVVc",ARb.VATBAcc,"",dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,ARb.VATBAcc,"",AddVATCodeToVATAccRows(firstVATCode),tstr,t1,baserate1,baserate2,false,dc2,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,t1),taccnumber,"","");
      end;
    end;
  end;
  if (IVp.Commision!=0) then begin
    if (GetAccName(ARb.CommisionAcc,tstr,60)==false) then begin
      errstrno = 1904;
      goto LMakeTransFromIV;
    end;
    AddEuroTrRow(gTRp,ARb.CommisionAcc,IVp.Objects,"",tstr,IVp.Commision,baserate1,baserate2,true,false,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,IVp.Commision),"","","");
  end;
  for (i=0; i<rwcnt; i=i+1) begin
    errstrno = AddIVWithholdingTaxesRow(gTRp,IVp,i,cuobj,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
  if (IVp.TAX2Sum!=0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypePerceptionTax: 
          calcperceppercuf = true;
          i = rwcnt;
      end;
    end;
    for (i=0; i<rwcnt; i=i+1) begin
      errstrno = AddTAX2Row(gTRp,IVp,i,cuobj,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum,calcperceppercuf);
      if (errstrno!=0) then begin goto LMakeTransFromIV; end;
    end;
  end;
  if (ARb.TotalwoTAX!=0) then begin
    if (IVp.TAX1Sum!=0) then begin
      if (GetAccName(ARb.SalesTAX,tstr2,60)==false) then begin 
        errstrno = 20018;
        goto LMakeTransFromIV;
      end;            
      rs = MulRateToBase1(IVp.CurncyCode,IVp.TAX1Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (CheckTTRPerRow("IVVc",ARb.SalesTAX,"",dc1,taccnumber,0)) then begin end;
      AddEuroCurncyTrRow(gTRp,ARb.SalesTAX,"","",tstr2,rs,true,dc1,TotSum,
                         IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,IVp.TAX1Sum,nilv,-1,false,taccnumber);
    end;
  end;
  if (TotSum!=0) then begin
    errstrno = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",false,false,NegativeAmountsOnIVTrans(IVp.InvType,TotSum),TotSum,TotSum);
    if (errstrno!=0) then begin
      goto LMakeTransFromIV;
    end;    
  end;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    errstrno = AddIVCostRow(gTRp,IVp,ORr.OrderType,i,cuobj,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,true,tstr,TotSum);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
  for (i=0; i<rwcnt; i=i+1) begin
    errstrno = AddIVPrePayRow(gTRp,IVp,i,cuobj,frrate,torate1,torate2,baserate1,baserate2,dc2,dc1,tstr,TotSum,VATr,vcrwcnt,TRGenRec,ARb);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
  for (i=0; i<rwcnt; i=i+1) begin
    errstrno = AddPRToIVTR(IVp,i,baserate1,baserate2,TotSum);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
/*  
moved up to follow corsp acc 
  for (i=0; i<rwcnt; i=i+1) begin
    errstrno = IVVc_AddPaymentRows(gTRp,ARb,IVp,i,cuobj,baserate1,baserate2,dc1,dc2,TotSum);
    if (errstrno!=0) then begin goto LMakeTransFromIV; end;
  end;
*/  
  errstrno = IVVc_Change(gTRp,ARb.ARUseObj,ARb.CashBackAcc,cuobj,IVp,baserate1,baserate2,dc1,dc2,TotSum);
  if (ARb.BookVATOnlyFromDownpayment!=0) and ((IVp.InvType!=kInvoiceTypeDownpayment) and (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) and (IVp.InvType!=kInvoiceTypeCash)) then begin
    cuobj = "";
    if (ARb.ARUseObj!=0) then begin
      if (nonblank(IVp.Objects)) then begin
        cuobj = AddObjectToObjectList(cuobj,IVp.Objects);
      end;
    end;
    errstrno = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,60,IVp.CurncyCode);
    if (errstrno!=0) then begin
      if (errstrno==2) then begin
        errstrno = 20075;
      end else begin
        errstrno = 1908;
      end;
      goto LMakeTransFromIV;
    end;
    SetupVATBase(VATr,vcrwcnt);  
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==5) then begin
        rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vcrwcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        
        IVrw.Sum = -IVrw.Sum;
        rs = -rs;
        if (CheckTTRPerRow("IVVc",IVp.ARAcc,cuobj,dc1,taccnumber,0)) then begin end;
        if (IVp.ARonTR!=0) then begin
          AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,blankval,true,dc1,TotSum,
                             IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,sum4,nilv,
                             IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,false,taccnumber,"","");
        end else begin
          AddEuroCurncyTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr,rs,true,dc1,TotSum,
                             IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,sum4,nilv,-1,false,taccnumber);
        end;        
        
      end;
    end;
    if (GetAccName(ARb.VATBAcc,tstr,60)==false) then begin
      errstrno = 1903;
      goto LMakeTransFromIV;
    end;
    
    objstr = ""; 
    if (ARb.VATUseObj!=0) then begin
      objstr = IVp.Objects;
    end;
    for (i=0;i<vcrwcnt;i=i+1) begin
      MatRowGet(VATCb,i,VATCbrw);
      MatRowGet(VATr,i,VATrw);
      if (VATrw.DebVal!=0) then begin 
      if (nonblank(VATCbrw.VATCode)) then begin
        switch (RoundRec.VATCalcWay) begin
          case 0:    
            MulVATIV(VATCbrw.VATCode,VATrw.DebVal,tvat,tax1val,IVp.InclVAT,IVp.NoTAXonVAT);
          case 1:
            tvat = VATrw.CredVal2;
            tax1val = VATrw.CurCredVal;
        end;    
        if (tvat!=0) then begin
          if (((IVp.InclVAT==0) and (ARb.RevInclVAT==0)) and ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4))) then begin
            rs = MulRateToBase1(IVp.CurncyCode,tvat,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

            if (GetAccName(IVp.ARAcc,tstr2,60)==false) then begin 
              errstrno = 1902;
              goto LMakeTransFromIV;
            end;            
            if (CheckTTRPerRow("IVVc",IVp.ARAcc,cuobj,dc2,taccnumber,0)) then begin end;
            if (IVp.ARonTR!=0) then begin
              AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr2,rs,blankval,true,dc2,TotSum,
                                 IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,tvat,nilv,
                                 IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,false,taccnumber,"","");
            end else begin
              AddEuroCurncyTrRow(gTRp,IVp.ARAcc,cuobj,"",tstr2,rs,true,dc2,TotSum,
                                 IVp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,tvat,nilv,-1,false,taccnumber);
            end;        
            
            if (GetAccName(VATCbrw.SalesVATAcc,tstr2,60)==false) then begin 
              errstrno = 1902;
              goto LMakeTransFromIV;
            end;            
            if (CheckTTRPerRow("IVVc",VATCbrw.SalesVATAcc,objstr,dc2,taccnumber,0)) then begin end;
            AddEuroTrRow(gTRp,VATCbrw.SalesVATAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr2,-tvat,baserate1,baserate2,true,dc2,TotSum,false,taccnumber,"","");
            
            if (CheckTTRPerRow("IVVc",VATCbrw.SalesVATAcc,objstr,dc2,taccnumber,0)) then begin end;
            AddEuroTrRow(gTRp,VATCbrw.SalesVATAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr2 & " ",tvat,baserate1,baserate2,false,dc2,TotSum,true,taccnumber,"","");

            if (CheckTTRPerRow("IVVc",ARb.VATBAcc,objstr,dc1,taccnumber,0)) then begin end;
            AddEuroTrRow(gTRp,ARb.VATBAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,tvat,baserate1,baserate2,false,dc1,TotSum,true,taccnumber,"","");
          end;
        end;
      end;
      end;
    end;        
  end;
  if (errstrno!=0) then begin goto LMakeTransFromIV; end;
/*
retention change  
  errstrno = AddIVRetentionRows(gTRp,IVp,cuobj,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum);
  if (errstrno!=0) then begin
    goto LMakeTransFromIV;
  end;  
*/  
  AddIVWIPRows(gTRp,IVp,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum);
  errstrno = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",false,false,NegativeAmountsOnIVTrans(IVp.InvType,TotSum),TotSum,TotSum);
  if (errstrno!=0) then begin
    goto LMakeTransFromIV;
  end;  
  if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) or ((IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) and (ARb.NoAutAutoTransOnCredIV==0)) then begin
    AddTransAutoTransRows(gTRp);
  end;
  errstrno = 0;
LMakeTransFromIV:;
  MakeTransFromIV = errstrno;
  RETURN;
END;
