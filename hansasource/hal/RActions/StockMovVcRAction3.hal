external procedure AutomatedSalesOrderly(string);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external function Boolean ItemHistExistsThrou(string,LongInt,string);
external updating procedure StockMovUpdateStock_UnOK_FromFrLocation_Quant(record StockMovVc,Boolean);
external updating procedure StockMovUpdateStock_UnOK_ToThrouLocation(record StockMovVc,Boolean);
external updating procedure StockMovUpdateStock_UnOK_FromFrLocation_SentQuant(record StockMovVc,Boolean);
external updating procedure StockMovUpdateStock_UnOK_FromThrouLocation(record StockMovVc,Boolean);
external updating procedure StockMovUpdateStock_UnOK_ToLocation(record StockMovVc,Boolean);
external updating procedure DeleteTransaction(LongInt,Integer);
external procedure ProdSumup(var record ProdVc);
external procedure ProdVc_PasteItem(var record ProdVc,Integer);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external updating procedure UpdateRecalcStockNeeded(Integer);
external updating procedure UpdateStockResFromStockMov(record StockMovVc);
external function Boolean ItemHistExists(string,LongInt);
external function roundmode DefaultRoundMode();
external updating procedure CreateAutoProduction(record StockMovVc);
external updating procedure StockMovCreateStockMovement(record StockMovVc);
external updating function Boolean UpdateForkLiftQueue(record StockMovVc,Boolean);
external updating procedure StockMovUpdateReserved(record StockMovVc,Boolean,Boolean);
external updating function Boolean UpdateIntOrderFromStockMov(record StockMovVc,record StockMovVc,Boolean);
external updating procedure StockMovSetPositionStatus(record StockMovVc,Integer);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2StrVal(string,val,val,var string);
external procedure B1ToB2Val(val,val,val,var val);
external procedure StockMovSumUp(var record StockMovVc);
external updating procedure UpdateInStockMovFromStockMov(record StockMovVc,Boolean);
external updating procedure StockMovUpdateStock(record StockMovVc,record StockMovVc,Boolean,Boolean,Boolean);
external updating procedure StockMovUpdateItemHist(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateCostPrice(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateSerialNr(record StockMovVc,record StockMovVc,Boolean);
external procedure GetConsigmentStockAcc(string,string,var string);
external function Boolean ConsigmentStock(string,string,Date);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external function Boolean TransInFiscal(Date);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PUCalcPerc(val,string,var val);
external procedure GetITStockAcc(string,var string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
updating procedure UnOKStockMovement(record StockMovVc SMr,record StockMovVc SM2r,Boolean deltrf)
begin
  if ((SMr.OKFlag==0) and (SM2r.OKFlag!=0)) then begin
    StockMovUpdateStock_UnOK_ToLocation(SMr,true);
    if (nonblank(SMr.ThrouLocation)) then begin
      StockMovUpdateStock_UnOK_FromThrouLocation(SMr,true);
    end else begin
      StockMovUpdateStock_UnOK_FromFrLocation_Quant(SMr,true);
    end;
  end;
  if ((SMr.SentOKFlag==0) and (SM2r.SentOKFlag!=0)) then begin
    if (nonblank(SMr.ThrouLocation)) then begin
      StockMovUpdateStock_UnOK_ToThrouLocation(SMr,true);
      StockMovUpdateStock_UnOK_FromFrLocation_SentQuant(SMr,true);
    end;
  end;
  StockMovUpdateSerialNr(SMr,SM2r,true);


//  StockMovUpdateCostPrice(StockMovr,StockMov2r);//JJRECALCSTOCK
/*
//JJRECALCSTOCK
  if ((StockMovr.OKFlag!=0) and (StockMov2r.OKFlag==0)) then begin
    if (UpdateForkLiftQueue(StockMovr,true)) then begin end;
    UpdateStockResFromStockMov(StockMovr);
    CreateAutoProduction(StockMovr);
    UpdateRecordsFromStockMov(StockMovr);
  end;
*/
//  UpdateForkLiftQueue(StockMovr,false);//JJRECALCSTOCK
//  UpdateInStockMovFromStockMov(StockMov2r,true);//JJRECALCSTOCK
//  UpdateInStockMovFromStockMov(StockMovr,false);//JJRECALCSTOCK


  UpdateRecalcStockNeeded(1);
  StoreUnOKHistory("StockMovVc",SMr.SerNr,CurrentDate,CurrentTime,CurrentUser);    
  if (deltrf) then begin
    if ((SMr.OKFlag==0) and (SM2r.OKFlag!=0)) then begin
      DeleteTransaction(SMr.SerNr,STMovYc);
    end;
    if ((SMr.SentOKFlag==0) and (SM2r.SentOKFlag!=0)) then begin
      DeleteTransaction(SMr.SerNr,SentSTMovYc);
    end;
  end;
  return;
end;

updating procedure UpdateProductionFromStockMov(record StockMovVc StockMovr)
begin
  record ProdVc Prodr;
  record ProdVc oldProdr;
  row ProdVc Prodrw;
  row ProdVc newProdrw;
  Integer pi,prwcnt;
  row StockMovVc SMrw;
  Integer smi,smrwcnt;
  record INVc INr;
  Boolean updf,infound;
  record ProdSettingsBlock PSb;  
  
  if (StockMovr.ProdSerNr>0) then begin
    BlockLoad(PSb);
    if (PSb.UpdProdInQtyFromStockMov!=0) then begin
      Prodr.SerNr = StockMovr.ProdSerNr;
      if (ReadFirstMain(Prodr,1,true)) then begin
        if (Prodr.PRStatusFlag==0) then begin
          if (StockMovr.ToLocation==Prodr.Location) then begin
            RecordCopy(oldProdr,Prodr);
            smrwcnt = MatRowCnt(StockMovr);
            for (smi=0;smi<smrwcnt;smi=smi+1) begin
              MatRowGet(StockMovr,smi,SMrw);
              infound = false;
              prwcnt = MatRowCnt(Prodr);
              for (pi=0;pi<prwcnt;pi=pi+1) begin
                MatRowGet(Prodr,pi,Prodrw);
                if (Prodrw.Item==SMrw.ArtCode) then begin
                  if (Prodrw.OutQty<=0) then begin
                    if (ReadFirstItem(Prodrw.Item,INr,false,true)) then begin
                      switch (INr.SerNrf) begin
                        case 1:
                          ClearRow(Prodr,newProdrw,1);
                          CopyRow(Prodr,Prodrw,newProdrw);
                          newProdrw.SerialNr = SMrw.SerialNr;
                          newProdrw.InQty = SMrw.Quant;
                          MatRowPut(Prodr,prwcnt,newProdrw);
                          pi = prwcnt;;
                          infound = true;
                        case 2:
                          ClearRow(Prodr,newProdrw,1);
                          CopyRow(Prodr,Prodrw,newProdrw);
                          newProdrw.SerialNr = SMrw.SerialNr;
                          newProdrw.InQty = SMrw.Quant;
                          MatRowPut(Prodr,prwcnt,newProdrw);
                          pi = prwcnt;;
                          infound = true;
                        otherwise
                          Prodrw.InQty = Prodrw.InQty + SMrw.Quant;
                          Prodrw.SerialNr = SMrw.SerialNr;
                          MatRowPut(Prodr,pi,Prodrw);
                          pi = prwcnt;;
                          infound = true;
                      end;
                      updf = true;
                    end;
                  end;
                end;
              end;
              if (infound==false) then begin
                ClearRow(Prodr,newProdrw,1);
                newProdrw.Item = SMrw.ArtCode;
                MatRowPut(Prodr,prwcnt,newProdrw);
                ProdVc_PasteItem(Prodr,prwcnt);
                MatRowGet(Prodr,prwcnt,newProdrw);
                newProdrw.SerialNr = SMrw.SerialNr;
                newProdrw.InQty = SMrw.Quant;
                MatRowPut(Prodr,prwcnt,newProdrw);
              end; 
            end;
            prwcnt = MatRowCnt(Prodr);
            for (pi=0;pi<prwcnt;pi=pi+1) begin
              MatRowGet(Prodr,pi,Prodrw);
              if (Prodrw.InQty==0) and (Prodrw.OutQty==0) then begin
                MatRowDelete(Prodr,pi);
                prwcnt = MatRowCnt(Prodr);
              end;
            end;
            if (updf) then begin
              ProdSumup(Prodr);
              RecordUpdate(oldProdr,Prodr,true);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure UpdateRecordsFromStockMov(record StockMovVc StockMovr)
begin
  UpdateProductionFromStockMov(StockMovr);
  return;
end;

global
updating function LongInt StockMovVcRecordUpdateAfter(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean ihef;

  if (nonblank(StockMovr.ThrouLocation)) then begin
    if (StockMovr.SentOKFlag!=0) then begin
      ihef = ItemHistExistsThrou("StockMovVc",StockMovr.SerNr,StockMovr.ToLocation);
    end else begin
      ihef = ItemHistExists("StockMovVc",StockMovr.SerNr);
    end;
  end else begin
    ihef = ItemHistExists("StockMovVc",StockMovr.SerNr);
  end;

  StockMovUpdateStock(StockMovr,StockMov2r,true,false,false);
  StockMovUpdateCostPrice(StockMovr,StockMov2r);                  
  if (ihef==false) then begin
    StockMovUpdateItemHist(StockMovr,StockMov2r);
  end;
  StockMovUpdateSerialNr(StockMovr,StockMov2r,false);
  if ((StockMovr.OKFlag!=0) and (StockMov2r.OKFlag==0)) then begin
    AutomatedSalesOrderly("HasIntegratedNL");
    if (ihef==false) then begin
      if (UpdateForkLiftQueue(StockMovr,true)) then begin end;
      UpdateStockResFromStockMov(StockMovr);
      CreateAutoProduction(StockMovr);
      UpdateRecordsFromStockMov(StockMovr);
      StockMovSetPositionStatus(StockMovr,1);
    end;
  end;    
  if ((StockMovr.OKFlag==0) and (StockMov2r.OKFlag==0)) then begin
    if (ihef==false) then begin
      if ((StockMovr.ToForkLiftQue!=0) and (StockMov2r.ToForkLiftQue==0)) then begin
        if (UpdateForkLiftQueue(StockMovr,false)) then begin end;
      end;
    end;
//only if not sent already    
//    if ((StockMovr.ToForkLiftQue==0) and (StockMov2r.ToForkLiftQue!=0)) then begin
//      if (UpdateForkLiftQueue(StockMovr,true)) then begin end;
//    end;
  end;
  
  UpdateInStockMovFromStockMov(StockMov2r,true);
  UpdateInStockMovFromStockMov(StockMovr,false);
//  if ((IVr.Invalid==0) and (IV2r.Invalid==0)) then begin
  if ((StockMovr.OKFlag==0) and (StockMov2r.OKFlag!=0)) or
     ((StockMovr.SentOKFlag==0) and (StockMov2r.SentOKFlag!=0)) then begin//unok
    UnOKStockMovement(StockMovr,StockMov2r,true);
  end;
  if (ihef==false) then begin
    if (nonblank(StockMovr.OfficialSerNr)) then begin
      if (StockMovr.OfficialSerNr!=StockMov2r.OfficialSerNr) then begin
        UpdateOffSerNr(StockMovr.SerNr,"StockMovVc",StockMovr.StockMovType,StockMovr.OfficialSerNr,true);
      end;
    end else begin
      if (nonblank(StockMov2r.OfficialSerNr)) then begin
        DeleteOffSerNr(StockMov2r.SerNr,"StockMovVc");
      end;
    end;
  end;
  StockMovVcRecordUpdateAfter = res;
  RETURN;
END;
