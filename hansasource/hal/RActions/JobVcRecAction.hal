external procedure ClientRemoteMessage(longint,string);
external function Boolean IsEnterprise();
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external updating procedure AddToResTypeSupport(record JobVc,Boolean);
external function Boolean IsCancelState(String);
external function Boolean CheckedAllowedStatus(string,string);
external updating procedure SMSWhenJob(record JobVc,Integer);
external function string 20 FindJobCustomerCode(record JobVc);
external procedure JobSumup(var record JobVc);
external function Boolean SkipResTest(record ReservationStatusVc,Boolean);
external procedure AddObj(String, var string);
external function boolean CheckOnAgentRoomCollision(Record JobVc);
external procedure PasteDefaultRoomForAgent(var Record JobVc);
external function Boolean CheckOverbookings(record JobVc);
external function LongInt DateDiff(Date,Date);
external procedure GetSalesGroup(string,var string);
external updating procedure UpdateJobChilds(Record JobVc,Record JobVc);
external function LongInt DateM42Days(Date);
external function Integer CheckObjs(string,string,var string);
external updating procedure UpdateJobPrices(record JobVc,record JobVc,Boolean);
external updating procedure DeleteJobPrices(record JobVc);
external function Boolean DateTimeInsideDateTime(Date,Time,Date,Time,Date,Time,Date,Time);

//These functions became unused when I wrote a working comparison called DateTimeInsideDateTime
/*
global
function Boolean DateRangeInsideRes(Date sp,Date ep,record JobVc Jobp)
BEGIN
  Boolean res;
  LongInt fr,to,i;
  LongInt compfr,compto;
  
  fr = DateM42Days(sp);
  to = DateM42Days(ep);
  compfr = DateM42Days(Jobp.TransDate);
  compto = DateM42Days(Jobp.EndDate);
  for (i=fr+1;i<to;i=i+1) begin
    if ((i>=compfr) and (i<=compto)) then begin
      res = true;
      goto LDateRangeInsideRes;
    end;
  end;
LDateRangeInsideRes:;
  DateRangeInsideRes = res;
  RETURN;
END;

global
function Boolean TestInsideReservation(Date dp,Time tp,record JobVc Jobp)
BEGIN
  Boolean res;
  
  if (dp<Jobp.TransDate) then begin
    goto LTestInsideReservation;
  end;  
  if (dp>Jobp.EndDate) then begin
    goto LTestInsideReservation;
  end;
  if (dp==Jobp.TransDate) then begin
  if (tp<Jobp.StartTime) then begin//perfect match is not allowed, otherwise bookin the same room twice
    goto LTestInsideReservation;
  end;  
  end;  
  if (dp==Jobp.EndDate) then begin
  if (tp>Jobp.EndTime) then begin
    goto LTestInsideReservation;
  end;  
  end;  
  res = true;
LTestInsideReservation:;
  TestInsideReservation = res;
  RETURN;
END;
*/

function LongInt ExtraBedsUsed(LongInt sernr,Date frdat,Date todat,string restype)
begin
  LongInt res;
  record JobVc Jobr;
  Date blankd;
  Date dt;
  Boolean foundf,testf;
  Integer i;
  Integer lenclass;
  record ReservationStatusVc rsr;
  
  res = 0;
  lenclass = 4;
  while (lenclass>=0) begin
    ResetLoop(Jobr);
    Jobr.Type = restype;
    Jobr.LengthClass = lenclass;
    Jobr.TransDate = frdat;
    switch (lenclass) begin
      case 4: Jobr.TransDate = blankd;
      case 3: Jobr.TransDate = AddDay(Jobr.TransDate,-366);
      case 2: Jobr.TransDate = AddDay(Jobr.TransDate,-31);
      case 1: Jobr.TransDate = AddDay(Jobr.TransDate,-7);
      case 0: ;
    end;
    foundf = true;
    while (LoopKey("CalTypeStartTime",Jobr,3,foundf)) begin
      if (Jobr.Type!=restype) then begin foundf = false; end;
      if (Jobr.LengthClass!=lenclass) then begin foundf = false; end;
      if (Jobr.TransDate>todat) then begin foundf = false; end;
      testf = true;
      if (foundf==false) then begin
        testf = false;
      end;
      if (IsCancelState(Jobr.ResStatus)) then begin
        testf = false;
      end;
/*      
      if (Jobr.SerNr==sernr) then begin
        testf = false;
      end;
      if (testf) then begin
        rsr.Code = Jobr.ResStatus;
        if (ReadFirstMain(rsr,1,true)) then begin
          if (SkipResTest(rsr,false)) then begin
            testf = false;
          end;
        end;
      end;
*/      
      if (Jobr.ExtraBeds<=0) then begin testf = false; end;
      if (testf) then begin      
        res = res + Jobr.ExtraBeds;
      end;
    end;
    lenclass = lenclass - 1;
  end;
  ExtraBedsUsed = res;
  return;
end;

global
function Boolean CheckDblReserved(record JobVc Jobp)
begin
  Boolean res;
  record JobVc locJobr;
  record ReservationStatusVc JobStatr;
  Boolean TrHs;
  string 255 ckey,rescode;
  Boolean testf;
  LongInt ddif,daycnt,pos;
  Integer lenclass,maxdays;
  Date blankd;
  record HotelBlock Hotelb;
  
  BlockLoad(Hotelb);
  daycnt = 0;  
  maxdays = DateDiff(Jobp.EndDate,Jobp.TransDate);  
  if (blank(Jobp.ResCode)) then begin
    goto LCheckDblReserved;
  end;  
//    ckey = "CalResStartTime";

  pos = 0;
  GetNextSubstring(Jobp.Resources,pos,",",rescode);
  while (nonblank(rescode)) begin
    ckey = "AllResources:" & rescode;
    lenclass = 4;
    while (lenclass>=0) begin
      locJobr.ResCode = rescode;
      locJobr.LengthClass = lenclass;
      locJobr.TransDate = Jobp.TransDate;
      if (lenclass==4) then begin
        locJobr.TransDate = blankd;
      end;  
      if (lenclass==3) then begin
        locJobr.TransDate = AddDay(locJobr.TransDate,-366);
      end;  
      if (lenclass==2) then begin
        locJobr.TransDate = AddDay(locJobr.TransDate,-31);
      end;  
      if (lenclass==1) then begin
        locJobr.TransDate = AddDay(locJobr.TransDate,-7);
      end;  
      TrHs = true;
      ResetLoop(locJobr);
      while (LoopKey(ckey,locJobr,3,TrHs)) begin
        ddif = DateDiff(locJobr.TransDate,locJobr.TransDate);
        if (ddif>maxdays) then begin 
          TrHs = false; 
        end;
        if (locJobr.LengthClass!=lenclass) then begin TrHs = false; end;
//        if (locJobr.ResCode!=Jobp.ResCode) then begin TrHs = false; end;
        if (TrHs) then begin
          testf = true;
          if (Jobp.SerNr==locJobr.SerNr) then begin testf = false; end;
          JobStatr.Code = locJobr.ResStatus;
          if (ReadFirstMain(JobStatr,1,true)) then begin
  /*        
            switch (JobStatr.StatType) begin
              case 0: testf = false;
              case 1: testf = false;
              case 2: testf = false;
            end;
  */        
            if (SkipResTest(JobStatr,Hotelb.OverBook==0)) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            if (DateTimeInsideDateTime(locJobr.TransDate,locJobr.StartTime,locJobr.EndDate,locJobr.EndTime,
                                     Jobp.TransDate,Jobp.StartTime,Jobp.EndDate,Jobp.EndTime)) then begin
              res = true;
              goto LCheckDblReserved;
            end;
          end;
        end;
      end;
      lenclass = lenclass - 1;
    end;
    GetNextSubstring(Jobp.Resources,pos,",",rescode);
  end;
LCheckDblReserved:;
  CheckDblReserved = res;
  return;
end;

function Boolean SerNrTestJobVc(LongInt sernr,Date tdp,var Boolean gentrans)
begin
  Boolean res;
  record JobSerBlock JobSerRec;
  row JobSerBlock JobSerrw;
  Integer i,rwcnt;

  gentrans = true;
  if (sernr==-1) then begin
    res = false;
    goto LSerNrTestJobVc;
  end;
  BlockLoad(JobSerRec);
  rwcnt = MatRowCnt(JobSerRec);
  if (rwcnt==0) then begin
    res = true;
    goto LSerNrTestJobVc;
  end;
  for (i=0; i<rwcnt ;i=i+1) begin
    MatRowGet(JobSerRec,i,JobSerrw);
    if ((sernr<JobSerrw.TSerStart) or (sernr>JobSerrw.TSerEnd)) then begin
      goto LFORJobVc;
    end;  
    if (nonblankdate(JobSerrw.StartDate)) then begin
      if (tdp<JobSerrw.StartDate) then begin goto LFORJobVc; end;
    end;  
    if (nonblankdate(JobSerrw.EndDate)) then begin
      if (tdp>JobSerrw.EndDate) then begin goto LFORJobVc; end;
    end;  
    if (JobSerrw.DonotGenTrans==1) then begin gentrans = false; end;
    res = true;
    goto LSerNrTestJobVc;
LFORJobVc:;
  end;
LSerNrTestJobVc:;
  SerNrTestJobVc = res;
  RETURN;
END;

function Boolean StateChangeOK(record JobVc Jobr,record JobVc Job2r)
begin
  Boolean res;
  
  // Check on Status changes
  res = true;
  if (Jobr.ResStatus<>Job2r.ResStatus) then begin
    res = false;
    if (CountRecords("ReserSeqVc")==0) then begin
      if (blank(Jobr.ResStatus)) then begin
        res = true;
        goto LStateChangeOK;
      end;
    end;
    if (blank(Job2r.ResStatus)) and (nonblank(Jobr.ResStatus)) then begin
      res = true;
      goto LStateChangeOK;
    end;
    if (CheckedAllowedStatus(Job2r.ResStatus,Jobr.ResStatus)) then begin
      res = true;
      goto LStateChangeOK;
    end;
  end;
LStateChangeOK:;
  StateChangeOK = res;
  return;
end;

function Integer JobVcRecordCheck3Row(record JobVc Jobr,record HotelBlock Hotelb,var string guestcode,var Integer rownr,var string thefield)
begin
  record CClassVc CCr;
  row JobVc Jobrw;
  record CUVc Guestr;
  Integer i,rwcnt;
  Integer res;
  Integer cclasscnt,cclasschildcnt,cclassblankrownr;
  LongInt totpers;
  string 255 ctype;
  
  res = 0;
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    switch (Hotelb.RequestGuestClass) begin
      case 1:
        if (blank(Jobrw.CClass)) then begin
          res = 1058;
          guestcode = "";
          thefield = "CClass";
          rownr = i;
          goto LJobVcRecordCheck3Row;
        end;
    end;
    if (nonblank(Jobrw.CClass)) then begin
      ctype = "";
      CCr.Code = Jobrw.CClass;
      if (ReadFirstMain(CCr,1,true)) then begin
        ctype = CCr.CType;
      end; 
      if (ctype==Hotelb.CClassDCTypeChild) begin
        cclasschildcnt = cclasschildcnt + 1;
      end else begin
        cclasscnt = cclasscnt + 1;
      end;
    end else begin
      cclasscnt = cclasscnt + 1;
      cclassblankrownr = i;
    end;
    if (nonblank(Jobrw.GuestCode)) then begin    
      Guestr.Code = Jobrw.GuestCode;
      if (ReadFirstMain(Guestr,1,true)) then begin
        if (Guestr.Blacklist!=0) then begin
          res = 1943;
          guestcode = Guestr.Code;
          thefield = "GuestCode";
          rownr = i;
          goto LJobVcRecordCheck3Row;
        end;
      end;
    end;
  end;
  if (cclasscnt>0 and cclasscnt>Jobr.Persons) then begin
    res = 2216;
    guestcode = "";
    thefield = "CClass";
    rownr = 0;
    goto LJobVcRecordCheck3Row;
  end;
  if (cclasschildcnt>0 and cclasschildcnt>Jobr.Children) then begin
    res = 2217;
    guestcode = "";
    thefield = "CClass";
    rownr = 0;
    goto LJobVcRecordCheck3Row;
  end;
  switch (Hotelb.RequestGuestClass) begin
    case 1:
      totpers = Jobr.Persons;
      if (IsEnterprise) then begin
        if (Jobr.Children>0) then begin
          totpers = totpers + Jobr.Children;
        end;
      end;
      if (cclasscnt+cclasschildcnt<totpers) then begin
        res = 2218;
        guestcode = "";
        thefield = "CClass";
        rownr = cclassblankrownr;
        goto LJobVcRecordCheck3Row;
      end;
    case 2:
      totpers = 0;
      if (Jobr.Children>0) then begin
        totpers = Jobr.Children;
      end;
      if (cclasschildcnt<totpers) then begin
        res = 2219;
        guestcode = "";
        thefield = "CClass";
        rownr = cclassblankrownr;
        goto LJobVcRecordCheck3Row;
      end;
  end;
LJobVcRecordCheck3Row:;  
  JobVcRecordCheck3Row = res;
  return;
end;  

global
function LongInt JobVcRecordCheck3(record JobVc Jobr,record JobVc Job2r,LongInt stat,var Integer errmsg,var string strerr,var Integer therow,var string thefield)
begin
  LongInt res;
  Integer insertmode,updatemode;
  record JobVc locJobr;
  record ResVc Resr;
  record UserVc USr;
  record ReservationStatusVc JobStatr;
  record ResTypeVc RTr;
  record CUVc CUr;  
  Boolean gentrans;
  LongInt newnr,l;
  record SRBlock SRRec;
  string 20 guest;
  record HotelBlock Hotelb;
  Integer rownr,errcode;
  string 255 errstr;
  record ShopBaskVc SBr;
  string 20 cucode;
  LongInt extrabeds;
  record ResLocVc RLr;
  Record ResUsageVc ResUsager;
  record ModuleBlock Modb;

  BlockLoad(SRRec);  
  BlockLoad(Hotelb);  
  BlockLoad(Modb);  
  res = 0;
  insertmode = 1;  
  updatemode = 2;
  if (Jobr.SerNr<=0) then begin
    Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,Jobr.LangCode);
    if (Jobr.Mother>0) then begin
      RTr.Code = Jobr.Type;
      if (ReadFirstMain(RTr,1,true)) then begin
        newnr = RTr.LastDaughterJobNr;
      end;
      if (newnr==-1) then begin
        newnr = SRRec.LastDaughterJobNr;
      end;  
      Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,newnr,false,Jobr.LangCode);    
    end;  
  end;
  if (blank(Jobr.ResCode)) then begin
    Jobr.Resources = "";
  end;
  if ((stat==insertmode) or (Jobr.SerNr!=Job2r.SerNr)) then begin
    locJobr.SerNr = Jobr.SerNr;
    if (ReadFirstMain(locJobr,1,true)) then begin
      errmsg = 1115;
      strerr = ": " & Jobr.SerNr;
      therow = -1;
      thefield = "SerNr";
      res = -1;
      goto LJobVcRecordCheck;
    end;
  end;
  if (SerNrTestJobVc(Jobr.SerNr,Jobr.TransDate,gentrans)==false) then begin
    errmsg = 1557;
    strerr = ": " & Jobr.SerNr;
    therow = -1;
    thefield = "SerNr";
    res = -1;
    goto LJobVcRecordCheck;
  end;
  if (stat==updatemode) then begin
    if (Jobr.CUCode!=Job2r.CUCode) then begin
      SBr.CUCode = Jobr.CUCode;
      SBr.OwnerSerNr = Jobr.SerNr;
      SBr.Owner = kShopBaskOwnerReservation;
      if (ReadFirstKey("CUOwner",SBr,3,true)) then begin
        errmsg = 1067;
        strerr = ": " & Jobr.CUCode;
        therow = -1;
        thefield = "CUCode";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
  end;  
  if (nonblank(Jobr.Objects)) then begin     
    errcode = CheckObjs("",Jobr.Objects,errstr);
    if (errcode!=0) then begin
      errmsg = errcode;
      strerr = " " & errstr;
      therow = -1;
      thefield = "Objects";
      res = -1; 
      goto LJobVcRecordCheck;
    end;
  end;
  if (blankdate(Jobr.TransDate)) then begin
    errmsg = 1058;
    strerr = ": " & Jobr.TransDate;
    therow = -1;
    thefield = "TransDate";
    res = -1;
    goto LJobVcRecordCheck;
  end;
  if (blankdate(Jobr.EndDate)) then begin
    errmsg = 1058;
    strerr = ": " & Jobr.EndDate;
    therow = -1;
    thefield = "EndDate";
    res = -1;
    goto LJobVcRecordCheck;
  end;
  if (Jobr.TransDate>Jobr.EndDate) then begin
    errmsg = 20851;
    strerr = ": " & Jobr.EndDate;
    therow = -1;
    thefield = "EndDate";
    res = -1;
    goto LJobVcRecordCheck;
  end;
  if (Jobr.TransDate==Jobr.EndDate) then begin
    if (Jobr.StartTime>Jobr.EndTime) then begin
      errmsg = 20854;
      strerr = Jobr.EndTime;
      therow = -1;
      thefield = "EndTime";
      res = -1;
      goto LJobVcRecordCheck;
    end;
  end;
  if (Jobr.SerNr==Jobr.Mother) then begin
     errmsg = 1008;
     strerr = ": " & Jobr.Mother;
     therow = -1;
     thefield = "Mother";
     res = -1;
     goto LJobVcRecordCheck;
  end;
  if (IsEnterprise) then begin 
    if (blank(Jobr.Type)) then begin
      errmsg = 1058;
      strerr = ": " & Jobr.Type;
      therow = -1;
      thefield = "Type";
      res = -1;
      goto LJobVcRecordCheck;
    end else begin    
      RTr.Code = Jobr.Type;
      if (ReadFirstMain(RTr,1,true)==false) then begin
        errmsg = 1120;
        strerr = ": " & Jobr.Type;
        therow = -1;
        thefield = "Type";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
  end;  
  
  if (nonblank(Jobr.ResCode)) then begin  
    Resr.Code = Jobr.ResCode;        
    if (ReadFirstMain(Resr,1,true)==false) then begin
       USr.Code = Jobr.ResCode;
       if (ReadFirstMain(USr,1,true)==false) then begin       
         errmsg = 1120;
         strerr = ": " & Jobr.ResCode;
         therow = -1;
         thefield = "ResCode";
         res = -1;
         goto LJobVcRecordCheck;
       end;  
    end;
  end;  
  if (Jobr.Mother>0) then begin
    locJobr.SerNr = Jobr.Mother;
    if (ReadFirstMain(locJobr,1,true)) then begin
      if (locJobr.Mother==Jobr.SerNr) then begin
        errmsg = 20881;
        strerr = ": " & Jobr.Mother;
        therow = -1;
        thefield = "Mother";
        res = -1;
        goto LJobVcRecordCheck;
      end;
      switch (locJobr.ReservationType) begin
        case kReservationTypeGroup:
          if nonblank(locJobr.ResLoc) then begin
            if (nonblank(Jobr.ResCode)) then begin
              if (Resr.ResLoc!=locJobr.ResLoc) then begin
                errmsg = 22206;
                strerr = ": " & Jobr.ResCode;
                therow = -1;
                thefield = "ResCode";
                res = -1;
                goto LJobVcRecordCheck;
              end;
            end else begin
              if (RTr.ResLoc!=locJobr.ResLoc) then begin
                errmsg = 22206;
                strerr = ": " & RTr.ResLoc;
                therow = -1;
                thefield = "Type";
                res = -1;
                goto LJobVcRecordCheck;
              end;
            end;
          end;
      end;
    end;
  end;    
  
  if (nonblank(Jobr.ResUsage)) then begin  
    ResUsager.Code = Jobr.ResUsage;        
    if (ReadFirstMain(ResUsager,1,true)==false) then begin
       errmsg = 1120;
       strerr = ": " & Jobr.ResUsage;
       therow = -1;
       thefield = "ResUsage";
       res = -1;
       goto LJobVcRecordCheck;
    end;
  end;  
  if (Hotelb.RequestPrice!=0) then begin
    if (Jobr.PLPrice==0) and (Jobr.AgreedPrice==0) then begin
      errmsg = 1058;
      strerr = "";
      therow = -1;
      thefield = "PLPrice";
      res = -1;
      goto LJobVcRecordCheck;
    end;
  end;
  if (Hotelb.RequestNrOfGuests!=0) then begin
    if (Jobr.Persons<=0) then begin
      errmsg = 1058;
      strerr = "";
      therow = -1;
      thefield = "Persons";
      res = -1;
      goto LJobVcRecordCheck;
    end;
  end;
  if (nonblank(Hotelb.ChInSt)) then begin
    if (Jobr.ResStatus==Hotelb.ChInSt) then begin
      if (blank(Jobr.ResCode)) then begin
        errmsg = 2153;
        strerr = ": " & guest;
        therow = -1;
        thefield = "ResCode";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
    if (IsEnterprise) then begin
      if ((Jobr.ResStatus==Hotelb.ChInSt) and (Job2r.ResStatus<>Hotelb.ChInSt)) then begin 
        if (Resr.ResStatus==Hotelb.ToResStatus) then begin
          errmsg = 1939;
          strerr = "";
          therow = -1;
          thefield = "ResCode";
          res = -1;
          goto LJobVcRecordCheck;    
        end;      
        if (Resr.ResStatus==Hotelb.ClosedResStatus) then begin
          errmsg = 22208;
          strerr = "";
          therow = -1;
          thefield = "ResCode";
          res = -1;
          goto LJobVcRecordCheck;    
        end;      
      end;
    end;
  end;  
  if (Hotelb.DemandGuestOnRes==1) then begin//Hotel Interface
    If (MatrowCnt(Jobr) <= 0) then begin
      errmsg = 2143;
      strerr = "";
      therow = 0;
      thefield = "GuestCode";
      res = -1;
      goto LJobVcRecordCheck;
    end;
  end;  
  if (blank(Jobr.ResStatus)) then begin
//done for Hatton and goes to master  
//    RecordCheckError(1058,Jobr.ResStatus,-1,"ResStatus");
//    res = -1;
//    goto LJobVcRecordCheck;
  end else begin    
    JobStatr.Code = Jobr.ResStatus;
    if (ReadFirstMain(JobStatr,1,true)==false) then begin
      errmsg = 1008;
      strerr = ": " & Jobr.ResStatus;
      therow = -1;
      thefield = "ResStatus";
      res = -1;
      goto LJobVcRecordCheck;
    end;
    if (JobStatr.StatType==2) then begin
      if (nonblank(Jobr.ResCode)) then begin
        errmsg = 2209;
        strerr = ": " & Jobr.ResCode;
        therow = -1;
        thefield = "ResCode";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
  end;
  if (Jobr.ExtraBeds>0) then begin
    RLr.Code = Resr.ResLoc;
    if (ReadFirstMain(RLr,1,true)) then begin
      extrabeds = ExtraBedsUsed(Jobr.SerNr,Jobr.TransDate,Jobr.EndDate,Jobr.Type);
      if (extrabeds>RLr.MaxExtraBeds) then begin
        errmsg = 2212;
        strerr = " " & RLr.MaxExtraBeds - (extrabeds - Jobr.ExtraBeds);
        therow = -1;
        thefield = "ExtraBeds";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
  end;

  if (CheckDblReserved(Jobr)) then begin
    errmsg = 1924;
    strerr = ": " & Jobr.TransDate;
    therow = -1;
    thefield = "TransDate";
    res = -1;
    goto LJobVcRecordCheck;
  end;
  if (/*(stat==insertmode) and */(Hotelb.OverBook!=0)) then begin
    if (CheckOverbookings(Jobr)) then begin
      errmsg = 1924;
      strerr = "  ";
      strerr = strerr & Jobr.TransDate;
      therow = -1;
      thefield = "TransDate";
      res = -1;
      goto LJobVcRecordCheck;
    end;
  end;
  cucode = FindJobCustomerCode(Jobr);
  if (blank(cucode)) then begin
     errmsg = 1058;
     strerr = ": " & Jobr.CUCode;
     therow = -1;
     thefield = "CUCode";
     res = -1;
     goto LJobVcRecordCheck;
  end;
  CUr.Code = cucode;
  if not readfirstmain(CUr,1,true) then begin
    errmsg = 1290;
    strerr = ": " & cucode;
    therow = -1;
    thefield = "CUCode";
    res = -1;
    goto LJobVcRecordCheck;      
  end;
  if nonblank(Jobr.Source) then begin
    CUr.Code = Jobr.Source;
    if not readfirstmain(CUr,1,true) then begin
      errmsg = 1290;
      strerr = ": " & Jobr.Source;
      therow = -1;
      thefield = "Source";
      res = -1;
      goto LJobVcRecordCheck;      
    end;
  end;
  if (CheckOnAgentRoomCollision(Jobr)) then begin
    errmsg = 2148;
    strerr = "";
    therow = -1;
    thefield = "ResCode";
    RecordCheckError(2148,"",-1,"ResCode");
    res = -1;
    goto LJobVcRecordCheck;
  end;
  if (stat!=insertmode) then begin
    if (StateChangeOK(Jobr,Job2r)==false) then begin
      errmsg = 1942;
      strerr = ": " & Jobr.ResStatus;
      therow = -1;
      thefield = "ResStatus";
      res = -1;
      goto LJobVcRecordCheck;
    end;
  end;
  if (IsEnterprise) then begin
    if (Hotelb.ForceBookOrigin!=0) then begin
      if (blank(Jobr.BookOrigin)) then begin
         errmsg = 1058;
         strerr = ": " & Jobr.BookOrigin;
         therow = -1;
         thefield = "BookOrigin";
         res = -1;
         goto LJobVcRecordCheck;
       end;
    end;
    if (Hotelb.ForceVisitPurpose!=0) then begin
      if (blank(Jobr.VisitPurpose)) then begin
         errmsg = 20474;
         strerr = "";
         therow = -1;
         thefield = "VisitPurpose";
         res = -1;
         goto LJobVcRecordCheck;
       end;
    end;
    if (HasLocalization("HRV")) then begin
      if (blank(Jobr.BorderCheckPoint)) then begin
         errmsg = 20473;
         strerr = "";
         therow = -1;
         thefield = "BorderCheckPoint";
         res = -1;
         goto LJobVcRecordCheck;
      end;
/*      
      if (blank(Jobr.TourOperator)) then begin
         errmsg = 1058;
         strerr = Jobr.TourOperator;
         therow = -1;
         thefield = "TourOperator";
         res = -1;
         goto LJobVcRecordCheck;
      end;
*/      
    end;
    if (Jobr.MaxPersons!=-1) then begin
      if ((Jobr.MaxPersons<Jobr.Persons)) then begin
        errmsg = 1946;
        strerr = "";
        therow = -1;
        thefield = "Persons";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
    if (Jobr.MaxChildren!=-1) then begin
      if ((Jobr.MaxChildren<Jobr.Children)) then begin
        errmsg = 1946;
        strerr = "";
        therow = -1;
        thefield = "Children";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
    if (Jobr.MaxPax!=-1) then begin
      if ((Jobr.MaxPax<Jobr.Pax)) then begin
        errmsg = 1946;
        strerr = "";
        therow = -1;
        thefield = "Persons";
        res = -1;
        goto LJobVcRecordCheck;
      end;
    end;
  end;    
  if (Jobr.ExtraBeds!=-1) then begin
  end;
  errmsg = JobVcRecordCheck3Row(Jobr,Hotelb,guest,rownr,thefield);
  if (errmsg!=0) then begin
    strerr = guest;
    therow = rownr;
    res = -1;
    goto LJobVcRecordCheck;
  end;
  if ((Jobr.MaxPersons<Jobr.Persons) and (Jobr.MaxPersons<>-1) and JobStatr.StatType!=2) then begin
    ClientRemoteAsync.ClientRemoteMessage(1946,"");
  end;  
LJobVcRecordCheck:;
  JobVcRecordCheck3 = res;
  return;
end;

global
function LongInt JobVcRecordCheckGroup(record JobVc Jobr,record JobVc Job2r,LongInt stat,var Integer errmsg,var string strerr,var Integer therow,var string thefield)
begin
  LongInt res;
  Integer insertmode,updatemode;
  record JobVc locJobr;
  record ReservationStatusVc JobStatr;
  record ResTypeVc RTr;
  record CUVc CUr;  
  Boolean gentrans;
  LongInt newnr,l;
  record SRBlock SRRec;
  string 20 guest;
  record HotelBlock Hotelb;
  Integer rownr,errcode;
  string 255 errstr;
  record ShopBaskVc SBr;
  string 20 cucode;
  LongInt extrabeds;
  record ResLocVc RLr;
  Record ResUsageVc ResUsager;
  record ModuleBlock Modb;

  BlockLoad(SRRec);  
  BlockLoad(Hotelb);  
  res = 0;
  insertmode = 1;  
  updatemode = 2;
  if (Jobr.SerNr<=0) then begin
    Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,Jobr.LangCode);
    if (Jobr.Mother>0) then begin
      RTr.Code = Jobr.Type;
      if (ReadFirstMain(RTr,1,true)) then begin
        newnr = RTr.LastDaughterJobNr;
      end;
      if (newnr==-1) then begin
        newnr = SRRec.LastDaughterJobNr;
      end;  
      Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,newnr,false,Jobr.LangCode);    
    end;  
  end;    
  if ((stat==insertmode) or (Jobr.SerNr!=Job2r.SerNr)) then begin
    locJobr.SerNr = Jobr.SerNr;
    if (ReadFirstMain(locJobr,1,true)) then begin
      errmsg = 1115;
      strerr = Jobr.SerNr;
      therow = -1;
      thefield = "SerNr";
      res = -1;
      goto LJobVcRecordCheckGroup;
    end;
  end;
  if (SerNrTestJobVc(Jobr.SerNr,Jobr.TransDate,gentrans)==false) then begin
    errmsg = 1557;
    strerr = Jobr.SerNr;
    therow = -1;
    thefield = "SerNr";
    res = -1;
    goto LJobVcRecordCheckGroup;
  end;
  if (Jobr.Mother>0) then begin
    locJobr.SerNr = Jobr.Mother;
    if (ReadFirstMain(locJobr,1,true)) then begin
      if (locJobr.Mother==Jobr.SerNr) then begin
        errmsg = 20881;
        strerr = ": " & Jobr.Mother;
        therow = -1;
        thefield = "Mother";
        res = -1;
        goto LJobVcRecordCheckGroup;
      end;
      if (locJobr.ReservationType!=kReservationTypeGroup) then begin
        errmsg = 22203;
        strerr = ": " & Jobr.Mother;
        therow = -1;
        thefield = "Mother";
        res = -1;
        goto LJobVcRecordCheckGroup;
      end;
      if (locJobr.ResLoc!=Jobr.ResLoc) then begin
        errmsg = 22206;
        strerr = ": " & Jobr.ResLoc;
        therow = -1;
        thefield = "ResLoc";
        res = -1;
        goto LJobVcRecordCheckGroup;
      end;
    end else begin
      errmsg = 22204;
      strerr = ": " & Jobr.Mother;
      therow = -1;
      thefield = "Mother";
      res = -1;
      goto LJobVcRecordCheckGroup;
    end;
  end;
  if (stat==updatemode) then begin
    if (Jobr.CUCode!=Job2r.CUCode) then begin
      SBr.CUCode = Jobr.CUCode;
      SBr.OwnerSerNr = Jobr.SerNr;
      SBr.Owner = kShopBaskOwnerReservation;
      if (ReadFirstKey("CUOwner",SBr,3,true)) then begin
        errmsg = 1067;
        strerr = ": " & Jobr.CUCode;
        therow = -1;
        thefield = "CUCode";
        res = -1;
        goto LJobVcRecordCheckGroup;
      end;
    end;
  end;  

  if (Jobr.SerNr==Jobr.Mother) then begin
     errmsg = 1008;
     strerr = ": " & Jobr.Mother;
     therow = -1;
     thefield = "Mother";
     res = -1;
     goto LJobVcRecordCheckGroup;
  end;
  if (blank(Jobr.CUCode)) then begin
    errmsg = 1058;
    strerr = "";
    therow = -1;
    thefield = "CUCode";
    res = -1;
    goto LJobVcRecordCheckGroup;      
  end else begin
    CUr.Code = Jobr.CUCode;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      errmsg = 1290;
      strerr = cucode;
      therow = -1;
      thefield = "CUCode";
      res = -1;
      goto LJobVcRecordCheckGroup;      
    end;
  end;
  if nonblank(Jobr.Source) then begin
    CUr.Code = Jobr.Source;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      errmsg = 1290;
      strerr = Jobr.Source;
      therow = -1;
      thefield = "Source";
      res = -1;
      goto LJobVcRecordCheckGroup;      
    end;
  end;
  if (CheckOnAgentRoomCollision(Jobr)) then begin
    errmsg = 2148;
    strerr = "";
    therow = -1;
    thefield = "ResCode";
    RecordCheckError(2148,"",-1,"ResCode");
    res = -1;
    goto LJobVcRecordCheckGroup;
  end;

  if (Hotelb.ForceBookOrigin!=0) then begin
    if (blank(Jobr.BookOrigin)) then begin
       errmsg = 1058;
       strerr = Jobr.BookOrigin;
       therow = -1;
       thefield = "BookOrigin";
       res = -1;
       goto LJobVcRecordCheckGroup;
     end;
  end;
  if (Hotelb.ForceVisitPurpose!=0) then begin
    if (blank(Jobr.VisitPurpose)) then begin
       errmsg = 1058;
       strerr = Jobr.VisitPurpose;
       therow = -1;
       thefield = "VisitPurpose";
       res = -1;
       goto LJobVcRecordCheckGroup;
     end;
  end;
LJobVcRecordCheckGroup:;
  JobVcRecordCheckGroup = res;
  return;
end;

global
function LongInt JobVcRecordCheck2(record JobVc Jobr,record JobVc Job2r,Integer stat)
BEGIN
  LongInt res;
  Integer errmsg,therow;
  string 255 strerr;
  string 255 thefield;
  
  res = JobVcRecordCheck3(Jobr,Job2r,stat,errmsg,strerr,therow,thefield);
  if (res==-1) then begin
    res = errmsg;
  end;
  JobVcRecordCheck2 = res;
  RETURN;
END;

global
function LongInt JobVcRecordCheck(record JobVc Jobr,record JobVc Job2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer errmsg,therow;
  string 255 strerr;
  string 255 thefield;
  
  switch (Jobr.ReservationType) begin
    case kReservationTypeNormal: res = JobVcRecordCheck3(Jobr,Job2r,stat,errmsg,strerr,therow,thefield);
    case kReservationTypeGroup: res = JobVcRecordCheckGroup(Jobr,Job2r,stat,errmsg,strerr,therow,thefield);
  end;
  if (res==-1) then begin
    RecordCheckError(errmsg,strerr,therow,thefield);
  end;
  JobVcRecordCheck = res;
  RETURN;
END;

function Boolean GuestInJob(record JobVc Jobr,string GuestCode,Integer fromrow)
begin
  Integer i,rwcnt;
  Row JobVc Jobrw;
  Boolean res;
  
  res = false;
  rwcnt = MatRowCnt(Jobr);
  for (i=fromrow;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    if (Jobrw.GuestCode==GuestCode) then begin
      res = true;
      goto LGuestInJob;
    end;
  end;
LGuestInJob:;
  GuestInJob = res;
  return;
end;  

updating procedure UpdateGuestrsVc(record JobVc Jobr,record JobVc Job2r,Integer insmode)
begin
  record GuestrsVc Guestrsr;
  Integer i,rwcnt;
  Row JobVc Jobrw;
  Boolean err;
  record CUVc CUr;
  record CountryVc Countryr;
  
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    RecordNew(Guestrsr);
    Guestrsr.TransDate = Jobr.TransDate;
    Guestrsr.GuestCode = Jobrw.GuestCode;
    Guestrsr.JobSerNr = Jobr.SerNr;
    Guestrsr.Comment = Jobrw.CUName;
    
    if (insmode==0) then begin
      if (GuestInJob(Jobr,Jobrw.GuestCode,i+1)==false) then begin
        CUr.Code = Jobrw.GuestCode;
        ReadFirstMain(CUr,1,true);

        Countryr.Code = CUr.Nationality;
        if (ReadFirstMain(Countryr,1,true)==false) then begin
          Countryr.Nationality = CUr.Nationality;
          if (ReadFIrstKey("Nationality",Countryr,1,true)) then begin
          end;
        end;
        Guestrsr.CountryCode = Countryr.Code;
        err = RecordStore(Guestrsr,true);
      end;
    end;
    if (insmode==1) then begin
      if (GuestInJob(Job2r,Jobrw.GuestCode,0)==false) then begin
        if (GuestInJob(Jobr,Jobrw.GuestCode,i+1)==false) then begin
          RecordDelete(Guestrsr);
        end;
      end;
    end;
    if (insmode==2) then begin
      if (GuestInJob(Job2r,Jobrw.GuestCode,0)==false) then begin
        if (GuestInJob(Jobr,Jobrw.GuestCode,i+1)==false) then begin
          CUr.Code = Jobrw.GuestCode;
          ReadFirstMain(CUr,1,true);

          Countryr.Code = CUr.Nationality;
          if (ReadFIrstMain(Countryr,1,true)==false) then begin
            Countryr.Nationality = CUr.Nationality;
            if (ReadFIrstKey("Nationality",Countryr,1,true)) then begin
            end;
          end;
          Guestrsr.CountryCode = Countryr.Code;
          err = RecordStore(Guestrsr,true);
        end;
      end;
    end;
  end;
  return;
end;

updating procedure UpdateJobResTypeMtrxVc(record JobVc Jobr,record JobVc Job2r,Integer insmode)
begin
  record JobResTypeMtrxVc JobResTypeMtrxr;
  Integer i,rwcnt;
  Boolean err;
  Date cd;
  Record ResTypeVc ResTyper;
  Record ResVc Roomr;
  Integer dailyf;
  
  if (blank(Jobr.Type)) then begin
    goto LUpdateJobResTypeMtrxVc;
  end;
  
  if (IsStandardProduct) then begin
    dailyf = 1;
  end else begin
    dailyf = 0;
  end;
  ResTyper.Code = Jobr.Type;
  if (ReadFirstMain(ResTyper,1,true)) begin
    dailyf = ResTyper.InvoiceBy;
  end;
  Roomr.Code = Jobr.ResCode;
  ReadFirstMain(Roomr,1,true);
  
  cd = Jobr.TransDate;
  
  if (BlankDate(cd)) then begin
    goto LUpdateJobResTypeMtrxVc;
  end;
  
  while (cd<=Jobr.EndDate) begin
    RecordNew(JobResTypeMtrxr);
    JobResTypeMtrxr.JobSerNr = Jobr.SerNr;
    JobResTypeMtrxr.ResType = Jobr.Type;
    JobResTypeMtrxr.ResLoc = Roomr.ResLoc;
    JobResTypeMtrxr.MtrxDate = cd;
    JobResTypeMtrxr.StartDate = Jobr.TransDate;
    JobResTypeMtrxr.EndDate = Jobr.EndDate;
    JobResTypeMtrxr.StartTime = Jobr.StartTime;
    JobResTypeMtrxr.EndTime = Jobr.EndTime;   
    if (insmode==0) then begin
      err = RecordStore(JobResTypeMtrxr,true);
    end;
    if (insmode==1) then begin
      if (DateInRange(cd,Job2r.TransDate,Job2r.EndDate)==false) then begin
        RecordDelete(JobResTypeMtrxr); 
      end;
    end;
    if (insmode==2) then begin
      if (DateInRange(cd,Job2r.TransDate,Job2r.EndDate)==false) then begin
        err = RecordStore(JobResTypeMtrxr,true);
      end;
    end;
    cd = AddDay(cd,1);
  end;
LUpdateJobResTypeMtrxVc:;
  return;
end;

global
function Integer ActLenClass(Date sdp,Date edp)
BEGIN
  Integer res;
  LongInt ddif;
  
  if (blankdate(edp)) then begin 
    res = 0; 
    goto LActLenClass; 
  end;
  ddif = DateDiff(edp,sdp);
  if (ddif<0) then begin 
    res = -1; 
    goto LActLenClass; 
  end;
  if (ddif==0) then begin 
    res = 0; 
    goto LActLenClass; 
  end;
  if (ddif<7) then begin 
    res = 1; 
    goto LActLenClass; 
  end;
  if (ddif<31) then begin 
    res = 2; 
    goto LActLenClass; 
  end;
  if (ddif<365) then begin 
    res = 3; 
    goto LActLenClass; 
  end;
  res = 4;
LActLenClass:;
  ActLenClass = res;
  RETURN;
END;

global
updating function LongInt JobVcRecordSave(var record JobVc Jobr,record JobVc r2,LongInt long3,LongInt long4)
begin
  record HotelBlock HotelRec;
  LongInt res;
  Date blankd;
  string 20 custcode;
  record BookingComBlock BCb;
  
  BlockLoad(HotelRec);
  if (HotelRec.ConfDays>0) then begin
//    Jobr.ConfDate = AddDay(Jobr.TransDate,-HotelRec.ConfDays); // could be x days before checkin
    Jobr.ConfDate = AddDay(Jobr.RegDate,HotelRec.ConfDays); // Now it is two days after prel booking
  end;
  if (Jobr.ConfDate<CurrentDate) then begin
    Jobr.ConfDate = blankd;
  end;
  Jobr.RegDate = CurrentDate;
  switch (Jobr.ReservationType) begin
    case kReservationTypeNormal:
      BlockLoad(BCb);
      if (BCb.Enable==0) then begin
        PasteDefaultRoomForAgent(Jobr);
      end;
      UpdateGuestrsVc(Jobr,Jobr,0);
      UpdateJobResTypeMtrxVc(Jobr,Jobr,0);
      Jobr.LengthClass = ActLenClass(Jobr.TransDate,Jobr.EndDate);
      if (nonblank(Jobr.Source)) then begin
        custcode = Jobr.Source;
      end else begin
        custcode = FindJobCustomerCode(Jobr);
      end;
      JobSumup(Jobr);
  end;
//  Jobr.TotalSum4 = Jobr.Sum4 + CalcTotalSum4(Jobr.ResUsage,custcode,Jobr.PriceList,Jobr.TransDate,Jobr.EndDate,Jobr.Persons);
  JobVcRecordSave = res;
  return;
end;

updating procedure SetComponentRoomStatus(string rescode)
begin
  record ResVc Resr;
  record ResVc oldResr;
  record HotelBlock Hotelb;
  
  BlockLoad(Hotelb);
  if (nonblank(Hotelb.ClosedResStatus)) then begin
    Resr.Code = rescode;
    if (ReadFirstMain(Resr,1,true)) then begin
      RecordCopy(oldResr,Resr);
      Resr.ResStatus = Hotelb.ClosedResStatus;
      RecordUpdate(oldResr,Resr,true);
    end;  
  end;
  return;
end;

updating procedure SetComponentRoomsStatus(record JobVc Jobr)
begin
  record ResVc Resr;
  LongInt pos;
  string 255 res;
  
  if (nonblank(Jobr.ResCode)) then begin
    Resr.Code = Jobr.ResCode;
    if (ReadFirstMain(Resr,1,true)) then begin
      if (nonblank(Resr.Resources)) then begin  
        pos = 0;
        GetNextSubstring(Resr.Resources,pos,",",res);
        while (nonblank(res)) begin
          SetComponentRoomStatus(res);
          GetNextSubstring(Resr.Resources,pos,",",res);
        end;
      end;
    end;
  end;
  return;
end;

global
updating function LongInt JobVcRecordSaveAfter(var record JobVc Jobr,record JobVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  switch (Jobr.ReservationType) begin
    case kReservationTypeNormal:
      UpdateJobPrices(Jobr,r2,false);
      AddToResTypeSupport(Jobr,false);
      SetComponentRoomsStatus(Jobr);
  end;
  JobVcRecordSaveAfter = res;
  return;
end;

global
procedure JobVcNumberOfDays(var record JobVc Jobr)
begin
  Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
  if (Jobr.NrOfDays<1) then begin
    Jobr.NrOfDays = -1;
  end;
  return;
end;

global
updating function LongInt JobVcRecordImport(var record JobVc Jobr,record JobVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  if (blank(Jobr.Resources)) then begin
    Jobr.Resources = Jobr.ResCode;
  end;
  UpdateGuestrsVc(Jobr,Jobr,0);
  UpdateJobResTypeMtrxVc(Jobr,Jobr,0);
  JobVcNumberOfDays(Jobr);
  AddToResTypeSupport(Jobr,false);
  Jobr.LengthClass = ActLenClass(Jobr.TransDate,Jobr.EndDate);
  JobVcRecordImport = res;
  return;
end;

global
updating function LongInt JobVcRecordUpdate(var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 20 custcode;
  
  switch (Jobr.ReservationType) begin
    case kReservationTypeNormal:
      UpdateGuestrsVc(Job2r,Jobr,1);
      UpdateGuestrsVc(Jobr,Job2r,2);
      UpdateJobResTypeMtrxVc(Job2r,Jobr,1);
      UpdateJobResTypeMtrxVc(Jobr,Job2r,2);
      if (Jobr.Mother!=-1) then begin UpdateJobChilds(Jobr,Job2r); end;
      Jobr.LengthClass = ActLenClass(Jobr.TransDate,Jobr.EndDate);
      if (nonblank(Jobr.Source)) then begin
        custcode = Jobr.Source;
      end else begin
        custcode = FindJobCustomerCode(Jobr);
      end;
      JobSumup(Jobr);
  end;
//  Jobr.TotalSum4 = Jobr.Sum4 + CalcTotalSum4(Jobr.ResUsage,custcode,Jobr.PriceList,Jobr.TransDate,Jobr.EndDate,Jobr.Persons);
  JobVcRecordUpdate = res;
  return;
end;

global
updating function LongInt JobVcRecordUpdateAfter(var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  switch (Jobr.ReservationType) begin
    case kReservationTypeNormal:
      UpdateJobPrices(Jobr,Job2r,true);
      AddToResTypeSupport(Job2r,true);
      AddToResTypeSupport(Jobr,false);
      SMSWhenJob(Jobr,1);  
      SetComponentRoomsStatus(Jobr);
  end;
  JobVcRecordUpdateAfter = res;
  return;
end;

global
function LongInt JobVcRecordRemoveTest(var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  record ReservationStatusVc Resr;
  LongInt res;
  record JobVc lJobr;
  record ShopBaskVc ShopBaskr;
      
  res = 1;
  switch (Jobr.ReservationType) begin 
    case kReservationTypeGroup:
      lJobr.Mother = Jobr.SerNr;
      if (ReadFirstKey("MotherKey",lJobr,1,true)) then begin
        if (long3!=0) then begin
          MessageBox(22205,"");
        end;  
        res = 0;
      end;
    case kReservationTypeNormal:
      Resr.Code = Jobr.ResStatus;
      if (ReadFirstMain(Resr,1,true)) then begin//ReservationStatusVc not used ? 
        if (Resr.StatType!=1) then begin
          if (long3!=0) then begin
            MessageBox(22054,"");
          end;  
          res = 0;
        end;  
      end;
  end;
  if (res==1) then begin
    ShopBaskr.OwnerSerNr = Jobr.SerNr;
    ShopBaskr.Owner = kShopBaskOwnerReservation;
    if ReadFirstKey("OwnerSerNr",ShopBaskr,2,True) then begin
      MessageBox(22207,"");
      res = 0;
    end;
  end;
  JobVcRecordRemoveTest = res;  
  return;
end;

global
updating function LongInt JobVcRecordRemove(var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  UpdateGuestrsVc(Jobr,Jobr,1); /* Job2r is NIL */
  UpdateJobResTypeMtrxVc(Jobr,Jobr,1);
  DeleteJobPrices(Jobr);
  AddToResTypeSupport(Jobr,true);
  JobVcRecordRemove = res;  
  return;
end;

global
function LongInt JobVcRecordDefaults(var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record HotelBlock Hotelb;
  record AccBlock ARAccb;
  string 255 tstr;
  Date blankd;
  Time blankt;
  Record CUVc CUr;
  Record ResUsageVc ResUsager;
  string 60 objs;
  string 10 curcode;

  BlockLoad(Hotelb);
  Jobr.SerNr = -1;
  Jobr.SalesMan = CurrentUser;
  GetSalesGroup(Jobr.SalesMan,tstr);
  Jobr.SalesGroup = tstr;
  Jobr.TransDate = CurrentDate;
  Jobr.LastTransferDate = blankd;
  Jobr.LastTransferTime = blankt;
  Jobr.ResUsage = "";
  Jobr.InclVAT = Hotelb.BasePriceInclVAT;
  if (Jobr.InclVAT==kBasePriceSystemDefault) then begin
    BlockLoad(ARAccb);
    Jobr.InclVAT = ARAccb.BasePriceInclVAT;
  end;
  if (SingleUserMode) then begin
    Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,Jobr.LangCode);
  end;

  Jobr.ResStatus = Hotelb.DefSt;
  switch (Jobr.ReservationType) begin
    case kReservationTypeNormal:
      Jobr.StartTime = Hotelb.CheckIn;
      Jobr.EndTime = Hotelb.CheckOut;
      if (IsEnterprise) then begin
        Jobr.ResUsage = Hotelb.DefResUsage;
      end;
      ResUsager.Code = Jobr.ResUsage;
      if (ReadFirstMain(ResUsager,1,true)) then begin
        objs = Jobr.Objects;
        AddObj(ResUsager.Objects,objs);
        Jobr.Objects = objs;
      end;
      if nonblank(Hotelb.DefCUCode) then begin
        Jobr.CUCode    = Hotelb.DefCUCode;      
        CUr.Code = Jobr.CUCode;
        if (ReadFirstMain(CUr,1,true)) then begin
          Jobr.PriceList = CUr.PLCode;
          Jobr.CUName = CUr.Name;
          objs = Jobr.Objects;
          AddObj(CUr.Objects,objs);
          Jobr.Objects = objs;
        end;
      end;
      Jobr.MaxPersons = 1;
    case kReservationTypeGroup:
      ;
  end;
  Jobr.VisitPurpose = Hotelb.DefVisitPurpose;
  Jobr.Mother      = -1;
  Jobr.Persons     = -1;
  if (BuildProductCode=="StandardHotel") then begin
    Jobr.Persons     = 1;
  end;
  Jobr.NrOfDays = -1;
  Jobr.AgreedPrice = BlankVal;
  GetFullCurncyRate(Jobr.CurncyCode,Jobr.TransDate,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
  JobVcRecordDefaults = res;  
  return;
end;

global
function LongInt JobVcRecordDuplicate(var record JobVc Jobr,record JobVc Job2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record HotelBlock Hotelb;
  record AccBlock ARAccb;
  string 255 tstr;
  Date blankd;
  Time blankt;

  BlockLoad(Hotelb);
  Jobr.SerNr = -1;
  Jobr.SalesMan = CurrentUser;
  GetSalesGroup(Jobr.SalesMan,tstr);
  Jobr.SalesGroup = tstr;
//  Jobr.TransDate = CurrentDate; cannot be current, if You do several bookings on the same date you will be anoyed very much
  Jobr.LastTransferDate = blankd;
  Jobr.LastTransferTime = blankt;
  if (SingleUserMode) then begin
    Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,Jobr.LangCode);
  end;
  Jobr.ResStatus = Hotelb.DefSt;
  switch (Jobr.ReservationType) begin
    case kReservationTypeNormal:
      Jobr.StartTime = Hotelb.CheckIn;
      Jobr.EndTime = Hotelb.CheckOut;
  end;
//assuming in Hotel they might copy very often ..
  Jobr.InclVAT = Hotelb.BasePriceInclVAT;
  if (Jobr.InclVAT==kBasePriceSystemDefault) then begin
    BlockLoad(ARAccb);
    Jobr.InclVAT = ARAccb.BasePriceInclVAT;
  end;
//  
  Jobr.Mother = -1;
  GetFullCurncyRate(Jobr.CurncyCode,Jobr.TransDate,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
  JobSumup(Jobr);
  JobVcRecordDuplicate = res;  
  return;
end;
