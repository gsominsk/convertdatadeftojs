external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Boolean SerNrTestWOVc(LongInt,Date,var Boolean);
external procedure SetWOFlags(record WOVc);

global
function LongInt WOVcRecordRemoveTest(var record WOVc WOr,record WOVc WO2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record WSVc WSr;

  res = 1;
  WSr.WONr = WOr.SerNr;
  WSr.SerNr = -1;
  if (ReadFirstKey("WONr",WSr,1,true)) then begin
    if (WSr.WONr==WOr.SerNr) then begin
      res = 0;
    end;
  end;
LWOVcRecordRemoveTest:;
  WOVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt WOVcRecordDefaults(var record WOVc WOr,record WOVc WO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;
      
  WOr.SerNr = -1;
  WOr.Closed = 0;  
  WOr.TransDate = CurrentDate;  
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin end;
  WOr.OurContact = Userr.CurOurContact;
  if (SingleUserMode) then begin
    WOr.SerNr = NextSerNr("WOVc",WOr.TransDate,-1,false,"");
  end;
  WOVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt WOVcRecordDuplicate(var record WOVc WOr,record WOVc WO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;
      
  WOr.SerNr = -1;
  WOr.Closed = 0;  
  WOr.TransDate = CurrentDate;  
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin end;
  WOr.OurContact = Userr.CurOurContact;
  if (SingleUserMode) then begin
    WOr.SerNr = NextSerNr("WOVc",WOr.TransDate,-1,false,"");
  end;
  WOVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt WOVcRecordSave(var record WOVc WOr,record WOVc WO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetWOFlags(WOr);
  if (blankdate(WOr.RegDate)) then begin
    WOr.RegDate = CurrentDate;
  end;
  if (blanktime(WOr.RegTime)) then begin
    WOr.RegTime = CurrentTime;
  end;
  WOVcRecordSave = res; 
  RETURN;
END;

global
function LongInt WOVcRecordUpdate(var record WOVc WOr,record WOVc WO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  SetWOFlags(WOr);
  WOVcRecordUpdate = res; 
  RETURN;
END;

global
function Integer CheckCUVATNrMask(string cust,string vatnr,var string tstr)
BEGIN
  record CUVc CUr;
  Integer res;

  res = 0;
  CUr.Code = cust;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = CheckVATNrMask(vatnr,CUr.CountryCode,CUr.CustType,tstr);
  end;
  CheckCUVATNrMask = res;
  RETURN;
END;

function Boolean IsWORowsDone(record WOVc WOp)
BEGIN
  record WSVc WSr;
  Boolean foundf;
  Boolean res;

  res = true;
  foundf = true;
  WSr.WONr = WOp.SerNr;
  while (LoopKey("WONr",WSr,1,foundf)) begin
    if (WSr.WONr!=WOp.SerNr) then begin foundf = false; end;
    if (foundf) then begin
      if (WSr.OKFlag==0) then begin
        res = false;
        goto LIsWORowsDone;
      end;
    end;
  end;
LIsWORowsDone:;
  IsWORowsDone = res;
  RETURN;
END;

global
function LongInt WOVcRecordCheck(var record WOVc WOr,record WOVc WO2r,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  row WOVc WOrw;
  record INVc INr;
  Integer rwcnt,i,errcode;
  LongInt oldnr;
  Boolean found,gentrans;
  record SVOVc SVOr;  
  string 255 tstr;
  
  res = 0;
  oldnr = WOr.SerNr;
  if ((WO2r.Closed>1) and (WOr.Closed<=1)) then begin
    RecordCheckError(1970,"",-1,"Closed");      
    res = -1;
    goto LWOVcRecordCheck;
  end;  
  if ((WO2r.Closed==3) and (WOr.Closed==2)) then begin
    RecordCheckError(1971,"",-1,"Closed");      
    res = -1;
    goto LWOVcRecordCheck;
  end;  
  if (WOr.SerNr<=0) then begin
    WOr.SerNr = NextSerNr("WOVc",WOr.TransDate,-1,false,"");
  end;
  if (SerNrTestWOVc(WOr.SerNr,WOr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto LWOVcRecordCheck;
  end;
  errcode = CheckRates(WOr.CurncyCode,WOr.FrRate,WOr.ToRateB1,WOr.ToRateB2,WOr.BaseRate1,WOr.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LWOVcRecordCheck;
  end;          
  SVOr.SerNr = WOr.SVOSerNr;
  if (ReadFirstMain(SVOr,1,true)==false) then begin
    RecordCheckError(1252,"",-1,"SVOSerNr");      
    res = -1;
    goto LWOVcRecordCheck;  
  end;
  if (WOr.CustCode!=SVOr.CustCode) then begin
    RecordCheckError(1250,SVOr.CustCode,-1,"CustCode");      
    res = -1;
    goto LWOVcRecordCheck;
  end;
  res = CheckCUVATNrMask(WOr.CustCode,WOr.VATNr,tstr);
  if (res!=0) then begin
    RecordCheckError(res,tstr,-1,"VATNr");      
    res = -1;
    goto LWOVcRecordCheck;
  end;
  if ((WOr.Closed==1) or (WOr.Closed==3)) then begin
    if (IsWORowsDone(WOr)==false) then begin
      RecordCheckError(1038,"",-1,"SerNr");      
      res = -1;
      goto LWOVcRecordCheck;
    end;
  end;
  rwcnt = MatRowCnt(WOr);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WOr,i,WOrw);
    if (nonblank(WOrw.ArtCode)) then begin
      INr.Code = WOrw.ArtCode;
      found = ReadFirstMain(INr,1,true);
      if (found==false) then begin
        RecordCheckError(1120,WOrw.ArtCode,i,"ArtCode");      
        res = -1;
        goto LWOVcRecordCheck;
      end;
      if (INr.ItemType==2) then begin
        RecordCheckError(1826,WOrw.ArtCode,i,"ArtCode");      
        res = -1;
        goto LWOVcRecordCheck;
      end;
      if (WOrw.ItemType==3) then begin
        if (WOrw.ContractNr==-1) then begin
          RecordCheckError(1168,"",i,"ContractNr");      
          res = -1;
          goto LWOVcRecordCheck;
        end;
      end;
    end;
  end;
LWOVcRecordCheck:;
  if (res!=0) then begin WOr.SerNr = oldnr; end;
  WOVcRecordCheck = res;
  RETURN;
END;

procedure WOVcConvertB1ToB2(record WOVc WOr,var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN    
  val t;
  
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  RETURN;
END;

global
function LongInt WOVcRecordImport(var record WOVc WOr,record WOVc WO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    curncy = WOr.CurncyCode;
    fr = WOr.FrRate;
    to1 = WOr.ToRateB1;
    to2 = WOr.ToRateB2;
    br1 = WOr.BaseRate1;
    br2 = WOr.BaseRate2;
    ConvertToDualBase(curncy,WOr.TransDate,fr,to1,to2,br1,br2,t,true);
    WOr.CurncyCode = curncy;
    WOr.FrRate = fr;
    WOr.ToRateB1 = to1;
    WOr.ToRateB2 = to2;
    WOr.BaseRate1 = br1;
    WOr.BaseRate2 = br2;
  end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    curncy = WOr.CurncyCode;
    to1 = WOr.ToRateB1;
    to2 = WOr.ToRateB2;
    br1 = WOr.BaseRate1;
    br2 = WOr.BaseRate2;
    WOVcConvertB1ToB2(WOr,to1,to2,br1,br2);
    WOr.ToRateB1 = to1;
    WOr.ToRateB2 = to2;
    WOr.BaseRate1 = br1;
    WOr.BaseRate2 = br2;
  end;
 
  WOVcRecordImport = res;
  RETURN;
END;