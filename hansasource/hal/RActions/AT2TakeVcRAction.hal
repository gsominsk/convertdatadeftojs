external function Integer VerifySalesmen(string,var string);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external function Boolean CheckifAT2UnitSold(string,Date);
external function Boolean SerNrTestAT2TakeVc(LongInt,Date,var Boolean);
external updating procedure AT2TakeOK(record AT2TakeVc);
external updating procedure AT2TakeUnOK(record AT2TakeVc);
external function Boolean IsUnOKAllowed(string,Date);

global
function LongInt AT2TakeVcRecordDefaults(var record AT2TakeVc ATTaker,record AT2TakeVc ATTake2r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;
  
  res = 0;
  ATTaker.SerNr = -1;
  ATTaker.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    ATTaker.SerNr = NextSerNr("AT2TakeVc",ATTaker.TransDate,-1,false,"");
  end;
  AT2TakeVcRecordDefaults = res;
  RETURN;
END;

global
function LongInt AT2TakeVcRecordDuplicate(var record AT2TakeVc ATTaker,record AT2TakeVc AT2Take2r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;

  res = 0;
  ATTaker.SerNr = -1;
  ATTaker.TransDate = CurrentDate;
  ATTaker.OKFlag = 0;
  if (SingleUserMode) then begin
    ATTaker.SerNr = NextSerNr("AT2TakeVc",ATTaker.TransDate,-1,false,"");
  end;
  AT2TakeVcRecordDuplicate = res;      
  RETURN;
END;

global
updating function LongInt AT2TakeVcRecordSave(var record AT2TakeVc AT2Taker,record AT2TakeVc AT2Take2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  AT2TakeVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt AT2TakeVcRecordSaveAfter(var record AT2TakeVc AT2Taker,record AT2TakeVc AT2Take2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (AT2Taker.OKFlag!=0) then begin  
    AT2TakeOK(AT2Taker);    
  end;      
  AT2TakeVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt AT2TakeVcRecordImportAfter(var record AT2TakeVc AT2Taker,record AT2TakeVc AT2Take2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (AT2Taker.OKFlag!=0) then begin  
    AT2TakeOK(AT2Taker);    
  end;      
  AT2TakeVcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt AT2TakeVcRecordUpdate(var record AT2TakeVc AT2Taker,record AT2TakeVc AT2Take2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((AT2Taker.OKFlag==0) and (AT2Take2r.OKFlag==1)) then begin//unok
  end;
  AT2TakeVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt AT2TakeVcRecordUpdateAfter(var record AT2TakeVc AT2Taker,record AT2TakeVc AT2Take2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((AT2Taker.OKFlag!=0) and (AT2Take2r.OKFlag==0)) then begin
    AT2TakeOK(AT2Taker);    
  end;      
  if ((AT2Taker.OKFlag==0) and (AT2Take2r.OKFlag==1)) then begin//unok
    AT2TakeUnOK(AT2Taker);
    StoreUnOKHistory("AT2TakeVc",AT2Taker.SerNr,CurrentDate,CurrentTime,CurrentUser);
  end;
  AT2TakeVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt AT2TakeVcRecordRemoveTest(var record AT2TakeVc AT2Taker,record AT2TakeVc AT2Take2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (AT2Taker.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LAT2TakeVcRecordRemoveTest;
  end;
  if (AT2Taker.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LAT2TakeVcRecordRemoveTest:;
  AT2TakeVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt AT2TakeVcRecordCheck(record AT2TakeVc AT2Taker,record AT2TakeVc AT2Take2r,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  Integer i,rwcnt,errcode;
  record AT2TakeVc locAT2Taker;
  record AT2UnitVc ATUnitr;
  row AT2TakeVc ATTakerw;
  Boolean testf,gentrans,unokf;
  record DepVc Depr;
  string 255 tstr;
  
  res = 0;
  if (AT2Taker.OKFlag==0) then begin//unok
    if (stat==Rs_update) then begin
      if (AT2Take2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (stat==Rs_update) then begin
    if (AT2Taker.SerNr<=0) and (AT2Taker.OKFlag==0) then begin
      AT2Taker.SerNr = AT2Taker.SerNr;
    end;
  end;  
  if (unokf) then begin
    if (IsUnOKAllowed("AT2TakeVc",AT2Taker.TransDate)==false) then begin
      RecordCheckError(1046,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LAT2TakeVcRecordCheck;
  end;
  testf = true;
  if ((AT2Take2r.OKFlag==0) and (AT2Taker.OKFlag==0)) then begin
    testf = false;      
  end;
  testf = true;
  if (AT2Taker.SerNr<=0) then begin
    AT2Taker.SerNr = NextSerNr("AT2TakeVc",AT2Taker.TransDate,-1,false,"");
  end;
  if ((stat==Rs_insert) or (AT2Taker.SerNr!=AT2Take2r.SerNr)) then begin
    locAT2Taker.SerNr = AT2Taker.SerNr;
    if (ReadFirstMain(locAT2Taker,1,true)) then begin
      RecordCheckError(1115,"",-1,"SerNr");      
      res = -1;
      goto LAT2TakeVcRecordCheck;
    end;  
  end;
  if (blankdate(AT2Taker.TransDate)) then begin
    RecordCheckError(1058,"",-1,"TransDate");      
    res = -1;
    goto LAT2TakeVcRecordCheck;
  end;
  if (SerNrTestAT2TakeVc(AT2Taker.SerNr,AT2Taker.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto LAT2TakeVcRecordCheck;
  end;
  switch (AT2Taker.PhysCheckf) begin
    case 0:
      if (blank(AT2Taker.DepCode)) then begin
        RecordCheckError(1030,"",-1,"DepCode");      
        res = -1;
        goto LAT2TakeVcRecordCheck;
      end;
      Depr.Code = AT2Taker.DepCode;
      if (ReadFirstMain(Depr,1,true)==false) then begin
        RecordCheckError(1231,"",i,"DepCode");      
        res = -1;
        goto LAT2TakeVcRecordCheck;
      end;
    case 1:
      if (blank(AT2Taker.RespPerson)) then begin
        RecordCheckError(1030,"",-1,"RespPerson");      
        res = -1;
        goto LAT2TakeVcRecordCheck;
      end;
      errcode = VerifySalesmen(AT2Taker.RespPerson,tstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode & ": " & tstr,"",-1,"RespPerson");
        res = -1;
        goto LAT2TakeVcRecordCheck;
      end;
  end;    
  if (testf) then begin      
    rwcnt = MatRowCnt(AT2Taker);  
    if ((AT2Taker.OKFlag==1) and (rwcnt==0)) then begin
      RecordCheckError(1030,"",0,"InventoryNr");      
      res = -1;
      goto LAT2TakeVcRecordCheck;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(AT2Taker,i,ATTakerw);
      if (blank(ATTakerw.InventoryNr)) then begin
        RecordCheckError(1058,"",i,"InventoryNr");      
        res = -1;
        goto LAT2TakeVcRecordCheck;
      end;
      ATUnitr.InventoryNr = ATTakerw.InventoryNr;
      if (ReadFirstMain(ATUnitr,1,true)==false) then begin
        RecordCheckError(1290,"",i,"InventoryNr");      
        res = -1;
        goto LAT2TakeVcRecordCheck;
      end;
      if (CheckifAT2UnitSold(ATTakerw.InventoryNr,AT2Taker.TransDate)) then begin
        RecordCheckError(1932,"",i,"InventoryNr");      
        res = -1;
        goto LAT2TakeVcRecordCheck;
      end;      
    end;  
  end;   
LAT2TakeVcRecordCheck:;  
  AT2TakeVcRecordCheck = res;
  RETURN;
END;
