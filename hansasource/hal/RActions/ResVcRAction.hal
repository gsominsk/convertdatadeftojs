external function string 60 AddStringToStringList(string,string);
external procedure AutomatedSales(string,Integer);
external function Boolean IsEnterprise();
external function Boolean HasRoomTypes();
external procedure NormalizeObjstr(var string);
external function Integer CheckResClass(string,var string);

updating function longint CreateBasicRoomTypeAndItem(var record ResVc Resr,var integer errcode,var string errstr,LongInt stat)
begin
  record ResArtCodeVc ResArtCoder,ResArtCode2r,ResArtCoderOld;
  record ResTypeVc ResTyper,ResType2r;
  record INVc INr,IN2r;
  record ResUsageVc ResUsager;
  longint res,wn;
  val BasicRoomPrice;
  string 255 RoomTypeCode;

  res = 0;
  errstr = "";
  // check of an item/room package/ exists with the same code
  if (stat==Rs_insert) then begin    
    //Room Type : This to setup a basic room type.
/*    
    RoomTypeCode = Left(UpperCase(USetStr(32017)),5);
    ResTyper.Code = RoomTypeCode;
    if (ReadFirstMain(ResTyper,1,true)==false) then begin
      RecordNew(ResTyper);
      ResTyper.Code = RoomTypeCode;
      ResTyper.Comment = USetStr(32012);   
      ResTyper.InvoiceBy = 1;             //  by Day
      ResTyper.MaxPersons = 10;           //  Max Adults
      ResTyper.ChargeMethod = 0;          //  charge : Automatic
      ResTyper.Sort = 0;                  //  Sort : Hotel
      ResTyper.MaxChildren = 1;           //  Max Children
      RecordStore(ResTyper,true);
    end;
    Resr.Type = ResTyper.Code;
*/    
  end;

  BasicRoomPrice = Resr.Price;
    
  //Item
  if (stat==Rs_insert or stat==Rs_update) then begin  
    INr.Code = Resr.Code;
    if (ReadFirstMain(INr,1,true)==false) then begin
      RecordNew(INr);
      INr.Code = Resr.Code;
      INr.UPrice1 = BasicRoomPrice;
      INr.ItemType = kItemTypePlain;
      INr.Name = Resr.Name;
//      INr.VATCode = "1";
      RecordStore(INr,false);
    end else begin
      RecordCopy(IN2r,INr);
      INr.UPrice1 = BasicRoomPrice;
      INr.Name = Resr.Name;
      if (RecordUpdate(IN2r,INr,true)==0) then begin
        UpdateBrowses("INLClass");
      end;
    end;
  end;
  
  //Invoice Item
  if (stat==Rs_insert) then begin  
    ResArtCoder.ResType = ResTyper.Code;
    ResArtCoder.ResUsageCode = Resr.Code;
    if (ReadFirstKey("ArtCode",ResArtCoder,2,true)) then begin
      RecordCopy(ResArtCoderOld,ResArtCoder);
      ResArtCoder.ArtCode = INr.Code;
      if (RecordUpdate(ResArtCoderOld,ResArtCoder,true)==0) then begin
      end;
    end else begin
      ResUsager.Code = Resr.Code;
      if (ReadFirstMain(ResUsager,1,true)==false) then begin
        RecordNew(ResUsager);
        ResUsager.Code = Resr.Code;
        ResUsager.Comment = Resr.Name;
        RecordInsert(ResUsager,true);
      end;
      RecordNew(ResArtCode2r);
      ResArtCode2r.ResType = ResTyper.Code;
      ResArtCode2r.ResUsageCode = ResUsager.Code;
      ResArtCode2r.ArtCode = INr.Code;
      ResArtCode2r.NoOfGuests = 1;
      ResArtCode2r.WeekPart = 0;
      ResArtCode2r.Comment = INr.Name;
      RecordInsert(ResArtCode2r,true); 
    end;  
  end;
LCreateBasicRoomTypeAndItem:;
  CreateBasicRoomTypeAndItem = res;
end;

global
function LongInt ResVcRecordInIndex(record ResVc Resr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (Resr.Terminated!=0) then begin 
    if (indexname=="ActCode")  then begin res = 0; end;
    if (indexname=="ActName")  then begin res = 0; end;
    if (indexname=="ActContact")  then begin res = 0; end;
    if (indexname=="ActNumber")  then begin res = 0; end;
//    if (indexname=="ActKey")  then begin res = 0; end;
//    if (indexname=="ActClass")  then begin res = 0; end;
    if (indexname=="ActType")  then begin res = 0; end;
    if (indexname=="ActSpec")  then begin res = 0; end;
    if (indexname=="ActJobGroup")  then begin res = 0; end;
    if (indexname=="ActCategory")  then begin res = 0; end;
//    if (indexname=="ActMode")  then begin res = 0; end;
//    if (indexname=="ActDescription")  then begin res = 0; end;
    if (indexname=="ActDateCreation")  then begin res = 0; end;
    if (indexname=="ActResLoc")  then begin res = 0; end;
    if (indexname=="ActLTxtCode")  then begin res = 0; end;

    if (indexname=="RLCode")  then begin res = 0; end;
    if (indexname=="RLType")  then begin res = 0; end;
    if (indexname=="RLResStatus")  then begin res = 0; end;
    if (indexname=="RLName")  then begin res = 0; end;
    if (indexname=="RLNumber")  then begin res = 0; end;

    if (indexname=="SortHotCode")  then begin res = 0; end;
    if (indexname=="SortHotResLoc")  then begin res = 0; end;
    if (indexname=="SortHotType")  then begin res = 0; end;
    if (indexname=="SortHotName")  then begin res = 0; end;
    if (indexname=="SortHotResStatus")  then begin res = 0; end;
    if (indexname=="SortHotNumber")  then begin res = 0; end;
  end;
  switch (Resr.Sort) begin 
    case 0:
      if (indexname=="SortRsrtCode")  then begin res = 0; end;
      if (indexname=="SortRsrtResLoc")  then begin res = 0; end;
      if (indexname=="SortRsrtType")  then begin res = 0; end;
      if (indexname=="SortRsrtName")  then begin res = 0; end;
    case 1:
      if (indexname=="SortHotCode")  then begin res = 0; end;
      if (indexname=="SortHotResLoc")  then begin res = 0; end;
      if (indexname=="SortHotType")  then begin res = 0; end;
      if (indexname=="SortHotName")  then begin res = 0; end;
      if (indexname=="SortHotResStatus")  then begin res = 0; end;
      if (indexname=="SortHotNumber")  then begin res = 0; end;
  end;
  ResVcRecordInIndex = res;
  RETURN;
END;

procedure NextResCode(record ResVc Resp)
BEGIN
  LongInt t;
  record PlanTimeBlock PTRec;

  BlockLoad(PTRec);
  t = StringToLongInt(PTRec.LastResCode);
  if (t!=-1) then begin
    t = t + 1;
    Resp.Code = t;
  end;
  RETURN;
END;

global
function LongInt ResVcRecordDefaults(var record ResVc Resr,record ResVc Res2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ResSettingBlock ResSetb;
      
  BlockLoad(ResSetb);
  Resr.Terminated = 0;
  Resr.InvoiceBy = ResSetb.InvoiceBy;
  NextResCode(Resr);
  if (BuildProductCode=="StandardHotel") then begin
    Resr.MaxPersons = 10;
    Resr.MaxChildren = 0;
    Resr.MaxPax = 0;
    Resr.ResStatus = "";
  end;
  ResVcRecordDefaults = res; 
  return;
end;

global
function LongInt ResVcRecordDuplicate(var record ResVc Resr,record ResVc Res2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  Resr.Terminated = 0;
  Resr.BankAcc = "";
  Resr.BankName = "";
  Resr.Number = "";
//  Resr.Comment0 = "";
  ResVcRecordDuplicate = res; 
  return;
end;

global
updating function LongInt ResVcRecordSave(var record ResVc Resr,record ResVc Res2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record PlanTimeBlock PTRec;

  BlockLoad(PTRec);
  PTRec.LastResCode = Resr.Code;
  BlockStore(PTRec);
  NormalizeObjstr(Resr.Resources);
  ResVcRecordSave = res; 
  return;
end;

global
updating function LongInt ResVcRecordUpdate(var record ResVc Resr,record ResVc Res2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  NormalizeObjstr(Resr.Resources);
  ResVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt ResVcRecordCheck(var record ResVc Resr,record ResVc Res2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer insertmode,updatemode;
  Boolean checkf;
  record ResTypeVc RTr;
  record EGVc EGr;
  record BankVc BKr;
  record UserVc USr;
  Integer errcode;
  string 255 errstr,autmsgfunciontags;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (blank(Resr.Code)) then begin
    RecordCheckError(1959,"",-1,"Code");      
    res = -1;
    goto LResVcRecordCheck;
  end;  
  if (ProgramType==typStdHotel) then begin
    if (CountRecords("ResVc")>=4) then begin
      RecordCheckError(1426,"",-1,"Code");      
      res = -1;
      goto LResVcRecordCheck;
    end;
  end;
  if (BuildProductCode=="StandardHotel") then begin
    res = CreateBasicRoomTypeAndItem(Resr,errcode,errstr,stat);
    if (res == -1) then begin 
      RecordCheckError(errcode,errstr,-1,"Code");
      goto LResVcRecordCheck;
    end;
  end;
  USr.Code = Resr.Code;
  if (ReadFirstMain(USr,1,true)) then begin       
    RecordCheckError(2019,"",-1,"Code");      
    res = -1;
    goto LResVcRecordCheck;
  end;    
  if (nonblank(Resr.BankName)) then begin
    BKr.Code = Resr.BankName;
    if (ReadFirstMain(BKr,1,true)==false) then begin
      RecordCheckError(1120,"",-1,"BankName");      
      res = -1;
      goto LResVcRecordCheck;
    end;
  end;  
  if (nonblank(Resr.Class)) then begin
    errcode = CheckResClass(Resr.Class,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Class");      
      res = -1; 
      goto LResVcRecordCheck;
    end;
  end;
  if (IsEnterprise) then begin
    if (blank(Resr.Type)) then begin
      RecordCheckError(1058,"",-1,"Type");      
      res = -1;
      goto LResVcRecordCheck;
    end;
  end else begin
    if (nonblank(Resr.Type)) then begin
      if (HasRoomTypes==false) then begin
        autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasRoomTypes+Store_ResVc");
//        RecordCheckError(37403,"",-1,"Type");      
//        res = -1;
//        goto LResVcRecordCheck;
      end;
    end;
  end;
  if (nonblank(Resr.Type)) then begin
    RTr.Code = Resr.Type;
    if (ReadFirstMain(RTr,1,true)==false) then begin
      RecordCheckError(1120,"",-1,"Type");      
      res = -1;
      goto LResVcRecordCheck;
    end;
  end;  
  if (nonblank(Resr.JobGroup)) then begin
    EGr.Code = Resr.JobGroup;
    if (ReadFirstMain(EGr,1,true)==false) then begin
      RecordCheckError(1120,"",-1,"JobGroup");      
      res = -1;
      goto LResVcRecordCheck;
    end;
  end;
LResVcRecordCheck:;
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  ResVcRecordCheck = res;
  RETURN;
END;

global
function LongInt ResVcRecordRemoveTest(var record ResVc Resr,record ResVc Res2r,LongInt long3,LongInt long4)
BEGIN
  record JobVc Jobr;
  LongInt res;

  res = 1;
  Jobr.ResCode = Resr.Code;
  if (ReadFirstKey("ResCode",Jobr,1,true)) then begin
    if (long3>0) then begin
      MessageBox(1560,"");
    end;
    res = 0;
  end;
LResVcRecordRemoveTest:;
  ResVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt AgentRoomVcRecordInIndex(record AgentRoomVc ARr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (ARr.Closed!=0) then begin 
    if (indexname=="ActResCode") then begin res = 0; end;
    if (indexname=="ActCUCode") then begin res = 0; end;
    if (indexname=="ActCUName") then begin res = 0; end;
  end;
  AgentRoomVcRecordInIndex = res;
  return;
end;
