external procedure Mul2VAT(string,val,var val,var val,Integer);
external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external function Boolean UseTaxTemplatesforTaxCalc();
external function Boolean PayModeAccIsClosed(string);
external function Boolean ConvertPurgeNLTrans_IVVc(record PurgeTRVc,record IPrsVc,record CUVc,Boolean,var record IVVc);
external function Boolean ConvertNLTrans_IVVc(record TRVc,record IPrsVc,record CUVc,Boolean,var record IVVc);
external function Integer GetAccNamCurVAT(string,var string,var string,Integer,string);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure IPGetVATCodeAccNumbers(record VATCodeBlock,string,var string,var string);
external procedure IPGetVATCodeTAX1AccNumbers(record VATCodeBlock,string,var string,var string);
external function Boolean GetARPayRate(LongInt,LongInt,var val,var val,var val,var val,var val,string,Date);
external procedure IPGetPrepaymentBaseAmounts(LongInt,val,var val,var val);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function val MulWithRateToBase2(var string,Date,val,roundmode);
external procedure Base1ToBase2(var val,Date,var val);
external function val FindVAT(string,val,Integer,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function Integer TypeOfCurncy(var string,var Integer);
external function Integer GetIntYc(Date);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 5 AddVATCodeToVATAccRows(string);
external procedure AddTransAutoTransRows(record TRVc);
external function Integer BookVATonRateGainIP(record TRVc,record IVVc,var val,var val,val,val,Boolean,var val);
external procedure IVVATPart(LongInt,val,var val);
external procedure GetVATCodePrelVATAcc(string,var string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer AddLoanIPTrRows(record TRVc,record AccBlock,record IVVc,var record IPVc,Integer,var val,var val,var val,Boolean,Boolean,var Boolean,var val);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function Boolean CheckVATLaws();
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean TransInFiscal(Date);
external function Boolean GetAccName(string,var string,Integer);


procedure ARFindPaydAmount(record IPrsVc IPrsp,Integer noordered,var val ar,var val arbase)
BEGIN
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean testf;
  
  ar = 0;
  IPr.SerNr = IPrsp.TransNr;
  if (ReadFirstMain(IPr,1,true)) then begin
    testf = false;
     if (IPr.OKFlag==0) then begin
       testf = false;
    end;
    if (testf) then begin
      if (IPr.TransDate==IPrsp.TransDate) then begin
        rwcnt = MatRowCnt(IPr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IPr,i,IPrw);
          if ((IPrw.ovst==0)) then begin
            if (IPrw.InvoiceNr==IPrsp.IVNr) then begin
              if ((IPrw.stp==1) or (IPrw.stp==5)) then begin
                ar = ar + IPrw.InvVal;
              end;  
            end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

function val IVPaidAmount(record IVVc OrgIVr,LongInt ipnrskip)
BEGIN
  val res,basevalp;
  record IVVc IVr;
  record PurgeTRVc PurgeTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  record IPrsVc IPrsr;
  Boolean found;
  val amnt,t,t2,basp;
  Integer i,rwcnt,oldstyle;

  IPrsr.IVNr = OrgIVr.SerNr;
  found = true;
  while (LoopKey("IVKey",IPrsr,1,found)) begin
    if (found) then begin
      if (IPrsr.IVNr!=OrgIVr.SerNr) then begin found = false; end;
    end;  
    if (found) then begin
      if (IPrsr.TransType==kIPrsTransTypeInvoice) then begin
        if (IPrsr.TransNr!=OrgIVr.SerNr) then begin
          IVr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            if (IVr.Invalid==0) then begin
              if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
                t = -IVr.Sum4;
                res = res + t;
                basevalp = basevalp + MulRateToBase1(IVr.CurncyCode,t,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
              end;
            end;
          end;  
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeReceipt) then begin      
        if (IPrsr.TransNr!=ipnrskip) then begin
          ARFindPaydAmount(IPrsr,0,amnt,basp);
          t = -amnt;
          t2 = -basp;
          res = res + t;
          basevalp = basevalp - MulRateToBase1(OrgIVr.CurncyCode,amnt,OrgIVr.FrRate,OrgIVr.ToRateB1,OrgIVr.ToRateB2,OrgIVr.BaseRate1,OrgIVr.BaseRate2,DefaultCurRoundOff);
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypePurgeNLTransaction) then begin
        PurgeTRr.Number = IPrsr.TransNr;
        PurgeTRr.IntYc = GetIntYc(IPrsr.TransDate);                
        PurgeTRr.TransRow = IPrsr.TransRow;
        if (ReadFirstMain(PurgeTRr,3,true)) then begin
          if (PurgeTRr.TransDate==IPrsr.TransDate) then begin
            t = 0;
            if (PurgeTRr.Typ==2) then begin
              if (PurgeTRr.SerNr==OrgIVr.SerNr) then begin
                if ((PurgeTRr.CurDebVal<>0) or (PurgeTRr.CurCredVal<>0)) then begin              
                  t = PurgeTRr.CurDebVal - PurgeTRr.CurCredVal;
                  basevalp = basevalp + (PurgeTRr.DebVal - PurgeTRr.CredVal);
                end else begin
                  t = PurgeTRr.DebVal - PurgeTRr.CredVal;
                  basevalp = basevalp + t;
                end;                        
                if (TypeOfCurncy(PurgeTRr.Curncy,oldstyle)==2) then begin
                  t = PurgeTRr.DebVal2 - PurgeTRr.CredVal2;
                end;
                res = res + t;
              end;  
            end;    
          end;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeNLTransaction) then begin
        TRr.Number = IPrsr.TransNr;
        TRr.IntYc = GetIntYc(IPrsr.TransDate);                
        if (ReadFirstMain(TRr,2,true)) then begin
          if (TRr.TransDate==IPrsr.TransDate) then begin
            t = 0;

            rwcnt = MatRowCnt(TRr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if (TRrw.ovst==0) then begin
                if (TRrw.stp==1) and (TRrw.Typ==2) then begin
                  if (TRrw.SerNr==OrgIVr.SerNr) then begin
                    if ((TRrw.CurDebVal<>0) or (TRrw.CurCredVal<>0)) then begin              
                      t = TRrw.CurDebVal - TRrw.CurCredVal;
                      basevalp = basevalp + (TRrw.DebVal - TRrw.CredVal);
                    end else begin
                      t = TRrw.DebVal - TRrw.CredVal;
                      basevalp = basevalp + t;
                    end;                        
                    if (TypeOfCurncy(TRrw.Curncy,oldstyle)==2) then begin
                      t = TRrw.DebVal2 - TRrw.CredVal2;
                    end;
                    res = res + t;
                  end;  
                end;    
              end;
            end;

          end;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeCashIn) then begin
        CLInr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(CLInr,1,true)) then begin
          if (CLInr.TransDate==IPrsr.TransDate) then begin
            t = 0;
            rwcnt = MatRowCnt(CLInr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(CLInr,i,CLInrw);
              if (CLInrw.Type==1) then begin
                if (CLInrw.TransNr==OrgIVr.SerNr) then begin
                  t = CLInrw.Sum;
                  res = res - t;
                  basevalp = basevalp - MulRateToBase1(CLInr.CurncyCode,t,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                end;  
              end;    
            end;
          end;
        end;
      end;
      if (IPrsr.TransType==kIPrsTransTypeCashOut) then begin
        CLOutr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(CLOutr,1,true)) then begin
          if (CLOutr.TransDate==IPrsr.TransDate) then begin
            t = 0;
            rwcnt = MatRowCnt(CLOutr);
            for (i=0; i<rwcnt; i=i+1) begin
              MatRowGet(CLOutr,i,CLOutrw);
              if (CLOutrw.Type==1) then begin
                if (CLOutrw.TransNr==OrgIVr.SerNr) then begin
                  t = CLOutrw.Sum;
                  res = res + t;
                  basevalp = basevalp - MulRateToBase1(CLOutr.CurncyCode,t,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
                end;  
              end;    
            end;

          end;
        end;
      end;
                  
    end;
  end;

  IVPaidAmount = -res;
  RETURN;
END;

function
Integer AddIPRowPayMode(var record TRVc gTRp,var record IPVc IPp,record IVVc IVp,record PMBlock PMRec,Integer pmrow,Integer currow,
                        var val rowsum,var val currowsum,var val TotSum,record AccBlock ARAccb,Boolean dc1,Boolean dc2,Boolean accf,Integer transtocreate,LongInt insrow,Boolean custinfof,Integer objectonbankacc,
                        record BaseCurBlock bcur,val prepbook,val prepbook2,Boolean NegativeAmountsf)
BEGIN
  record CheckVc Checkr;
  row PMBlock pmrw;
  row IPVc IPrw;
  string 255 otxt,accstr,tstr,taccnumber;
  val booked,booked2,curbooked;
  Integer res,oldstyle;
  val fr,to1,to2,br1,br2;
  val t,v;
  Date bd;
  val brd,brd2;
  val bookedwithcurrate,bookedwithcurrate2;
  Boolean rgdc1,rgdc2;

  MatRowGet(PMRec,pmrow,pmrw);
  MatRowGet(IPp,currow,IPrw);
  if (IPrw.BankVal!=0) then begin
    otxt = "";
    switch (transtocreate) begin
      case 1:
        accstr = pmrw.AccNr;
        if (GetAccName(accstr,tstr,60)==false) then begin
          res = 2191;
          goto LAddIPRowPayMode;
        end;
        tstr = pmrw.Comment;
        otxt = pmrw.Objects;
        if (IPrw.ChequeNr>0) then begin
          Checkr.SerNr = IPrw.ChequeNr;
          tstr = tstr & ", ";
          if (ReadFirstMain(Checkr,1,true)) then begin
            tstr = tstr & Checkr.CheckNr;
          end else begin
            tstr = tstr & IPrw.ChequeNr;
          end;
        end;
      case 3:
        accstr = pmrw.AccNr;
        if (GetAccName(accstr,tstr,60)==false) then begin
          res = 2191;
          goto LAddIPRowPayMode;
        end;
        tstr = pmrw.Comment;
        otxt = pmrw.Objects;
        if (IPrw.ChequeNr>0) then begin
          Checkr.SerNr = IPrw.ChequeNr;
          tstr = tstr & ", ";
          if (ReadFirstMain(Checkr,1,true)) then begin
            tstr = tstr & Checkr.CheckNr;
          end else begin
            tstr = tstr & IPrw.ChequeNr;
          end;
        end;
      case 2:
        accstr = pmrw.PrelAccIn;
        otxt = pmrw.Objects;
        if (GetAccName(accstr,tstr,60)==false) then begin
          res = 2192;
          goto LAddIPRowPayMode;
        end;
      case 4:
        tstr = "";
        IVp.ARAcc = IPrw.ARAcc;
        if (blank(IVp.ARAcc)) then begin
          IVp.ARAcc = ARAccb.ARAcc;
        end;
        accstr = IVp.ARAcc;
        if (GetAccName(accstr,tstr,60)==false) then begin
          res = 1908;
          goto LAddIPRowPayMode;
        end;
        if (IPrw.InvoiceNr!=-1) then begin
          if (IsStandardProduct) and (HasLocalization("POL")) then begin
          end else begin          
            tstr = IPrw.InvoiceNr;
          end;
        end else begin
          tstr = IPrw.CustCode;
        end;
        if (nonblank(tstr)) then begin
          tstr = tstr & " ";
        end;
        tstr = tstr & IPrw.CustName;
        
    end;
    if (objectonbankacc!=0) then begin
      if ((nonblank(otxt)) and (nonblank(IPrw.Objects))) then begin
        otxt = otxt & ",";
      end;
      otxt = otxt & IPrw.Objects;
    end;    
    GetFullCurncyRate(IPrw.BankCurncy,IPp.TransDate,fr,to1,to2,br1,br2);
    if (nonblank(IPrw.ToRateB1BankVal)) then begin
      br1 = IPrw.ToRateB1BankVal;
    end;
    if (IPrw.Coef!=0) then begin
      br2 = IPrw.Coef;
    end else begin
      if (IPrw.OrderNr!=-1) then begin//CUPNr
//        if (GetORRate(IPrw.OrderNr,fr,to1,to2,br1,br2)) then begin end;// they say it is wrong; Vitalij and Evelina
      end;
    end;
    curbooked = IPrw.BankVal;
    booked2 = blankval;

    if (IPrw.BankCurncy!=IPrw.RecCurncy) then begin
      switch (TypeOfCurncy(IPrw.RecCurncy,oldstyle)) begin
        case 1: 
          booked = MulRateToBase1(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          booked2 = MulRateToBase2(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        case 2: 
          booked = MulRateToBase1(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          booked2 = MulRateToBase2(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        otherwise
          if (IPrw.InvoiceNr>0) then begin          
            booked = MulRateToBase1(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
            booked2 = MulRateToBase2(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          end else begin
            booked = MulRateToBase1(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
            booked2 = MulRateToBase2(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
//            GetFullCurncyRate(IPrw.RecCurncy,IPp.TransDate,fr,to1,to2,br1,br2);
//            booked = MulRateToBase1(IPrw.RecCurncy,IPrw.RecVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
          end;
      end;
    end else begin
      booked = MulRateToBase1(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      booked2 = MulRateToBase2(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    end;
    if (IPrw.RecCurncy==bcur.BaseCur2) then begin
      booked2 = IPrw.RecVal;
    end;
    if (IPrw.BankCurncy==bcur.BaseCur2) then begin
      booked2 = IPrw.BankVal;
    end;
    if ((IPrw.BankCurncy==bcur.BaseCur1) or (blank(IPrw.BankCurncy))) then begin
      if (nonblank(IPrw.B1BankVal)) then begin
        booked = IPrw.B1BankVal;
        if (nonblank(IPrw.ToRateB1BankVal)) then begin
          to1 = IPrw.ToRateB1BankVal;
        end else begin
//?
        end;
      end;
      if (nonblank(IPrw.B2BankVal)) then begin
        booked2 = IPrw.B2BankVal;
      end else begin
        Base1ToBase2(booked,IPp.TransDate,booked2);
      end;
    end else begin
      if (nonblank(IPrw.B1BankVal)) then begin
        booked = IPrw.B1BankVal;
        if (nonblank(IPrw.ToRateB1BankVal)) then begin
          to1 = IPrw.ToRateB1BankVal;
        end else begin
//?
        end;
        if (nonblank(IPrw.B2BankVal)) then begin
          booked2 = IPrw.B2BankVal;
          br2 = booked2/booked;
        end else begin
          booked2 = MulRateToBase2(IPrw.InvCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        end;
      end;
    end;

/*    
    if (IPrw.B1BankVal==0) then begin
      booked = MulRateToBase1(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    end else begin
      booked = IPrw.B1BankVal;
    end;
*/
    
    if (IPrw.stp==7) then begin
      if (CheckTTRPerRow("IPVc",accstr,otxt,dc1,taccnumber,1)) then begin end;      
      AddEuroCurncyTrRow(gTRp,accstr,otxt,"",tstr,booked,accf,dc1,TotSum,
                         IPrw.BankCurncy,fr,to1,to2,br1,br2,curbooked,blankval,-1,false,taccnumber);
    end else begin
      if (custinfof) then begin
        tstr = tstr & " ";
        if (IPrw.InvoiceNr!=-1) then begin
          if (IsStandardProduct) and (HasLocalization("POL")) then begin
          end else begin
            tstr = tstr & IPrw.InvoiceNr;        
          end;
        end else begin
          tstr = tstr & IPrw.CustCode;
        end;
        tstr = tstr & " ";
        tstr = tstr & IPrw.CustName;
      end;
      if (CheckTTRPerRow("IPVc",accstr,otxt,dc2,taccnumber,1)) then begin end;      
      AddEuroCurncyNomARTrRow(gTRp,accstr,otxt,"",tstr,booked,booked2,accf,dc2,TotSum,
                              IPrw.BankCurncy,fr,to1,to2,br1,br2,
                              curbooked,blankval,"",-1,0,blankval,bd,insrow,NegativeAmountsf,taccnumber,"","");
//      AddEuroCurncyTrRow(gTRp,accstr,otxt,"",tstr,booked,accf,dc2,TotSum,
//                         IPrw.BankCurncy,fr,to1,to2,br1,br2,curbooked,blankval,insrow,false,"");
    end;
    rowsum = rowsum + booked;
    currowsum = currowsum + curbooked;

    if (IPrw.InvoiceNr==-1) and (IPrw.RecCurncy!=bcur.BaseCur1) then begin
      switch (IPrw.stp) begin
        case 1:
          bookedwithcurrate = MulWithRateToBase1(IPrw.InvCurncy,IPp.TransDate,IPrw.InvVal,DefaultCurRoundOff);
          bookedwithcurrate2 = MulWithRateToBase2(IPrw.InvCurncy,IPp.TransDate,IPrw.InvVal,DefaultCurRoundOff);
          if (nonblank(IPrw.B1BankVal)) then begin
            bookedwithcurrate = IPrw.B1BankVal;
          end;
          if (nonblank(IPrw.B2BankVal)) then begin
            bookedwithcurrate2 = IPrw.B2BankVal;
          end;
          rgdc1 = true;
          rgdc2 = false;
          
          brd = bookedwithcurrate - prepbook;
          brd2 = bookedwithcurrate2 - prepbook2; 
          if (bookedwithcurrate<0) then begin
            brd = -brd;
            brd2 = -brd2;
            rgdc2 = true;
          end;
          if (brd!=0) then begin
            if (brd<0) then begin
              if (GetAccName(ARAccb.RateGainAcc,tstr,60)==false) then begin
                res = 1917;
                goto LAddIPRowPayMode;
              end;
              AddEuroCurncyNomARTrRow(gTRp,ARAccb.RateGainAcc,"","",tstr,brd,brd2,true,rgdc1,totsum,
                                      "",blankval,blankval,blankval,blankval,blankval,
                                      blankval,blankval,"",-1,0,blankval,bd,-1,false,"","","");
            end else begin
              if (GetAccName(ARAccb.RateLossAcc,tstr,60)==false) then begin
                res = 1918;
                goto LAddIPRowPayMode;
              end;
              AddEuroCurncyNomARTrRow(gTRp,ARAccb.RateLossAcc,"","",tstr,brd,brd2,true,rgdc2,totsum,
                                      "",blankval,blankval,blankval,blankval,blankval,
                                      blankval,blankval,"",-1,0,blankval,bd,-1,false,"","","");
            end;
          end;
          rgdc1 = true;
          rgdc2 = true;
          brd = bookedwithcurrate - booked;
          brd2 = bookedwithcurrate2 - booked2; 
/*
strango          
          if (bookedwithcurrate<0) then begin
            brd = -brd;
            brd2 = -brd2;
            rgdc1 = true;
          end;
*/

          if (brd!=0) then begin
            if (brd<0) then begin
              accstr = ARAccb.BankRateGainAcc;
              if (blank(accstr) and IsStandardProduct) then begin
                accstr = ARAccb.RateGainAcc;
              end;
              if (GetAccName(accstr,tstr,60)==false) then begin
                res = 24221;
                goto LAddIPRowPayMode;
              end;
              AddEuroCurncyNomARTrRow(gTRp,accstr,"","",tstr,brd,brd2,true,rgdc1,totsum,
                                      "",blankval,blankval,blankval,blankval,blankval,
                                      blankval,blankval,"",-1,0,blankval,bd,-1,false,"","","");
            end else begin
              accstr = ARAccb.BankRateLossAcc;
              if (blank(accstr) and IsStandardProduct) then begin
                accstr = ARAccb.RateLossAcc;
              end;
              if (GetAccName(accstr,tstr,60)==false) then begin
                res = 24221;
                goto LAddIPRowPayMode;
              end;

              AddEuroCurncyNomARTrRow(gTRp,accstr,"","",tstr,brd,brd2,true,rgdc2,totsum,
                                      "",blankval,blankval,blankval,blankval,blankval,
                                      blankval,blankval,"",-1,0,blankval,bd,-1,false,"","","");
            end;
          end;
      end;    
    end;
    
    if (IPrw.BankFeeVal!=0) then begin
      if (GetAccName(ARAccb.ExtraCostAcc,tstr,60)==false) then begin
        res = 2136;
        goto LAddIPRowPayMode;
      end;
      otxt = "";
      curbooked = IPrw.BankFeeVal;
      booked = MulRateToBase1(IPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      if (CheckTTRPerRow("IPVc",ARAccb.ExtraCostAcc,otxt,true,taccnumber,1)) then begin end;      
      AddEuroCurncyTrRow(gTRp,ARAccb.ExtraCostAcc,otxt,"",tstr,booked,true,true,TotSum,
                         IPrw.BankCurncy,fr,to1,to2,br1,br2,curbooked,blankval,-1,false,taccnumber);
      rowsum = rowsum + booked;
      currowsum = currowsum + curbooked;
    end;
    if (IPrw.stp==1) then begin
      if (pmrw.TAX!=0) then begin        
        accstr = pmrw.TAXAccIn;
        if (GetAccName(accstr,tstr,60)==false) then begin
          res = 2191;
          goto LAddIPRowPayMode;
        end;
        t = IPrw.RecVal*pmrw.TAX;
        t = t/100;
        t = Round(t,DefaultRoundMode);
        v = MulRateToBase1(IPrw.BankCurncy,t,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        if (CheckTTRPerRow("IPVc",accstr,"",dc2,taccnumber,1)) then begin end;      
        AddEuroCurncyTrRow(gTRp,accstr,"","",tstr,v,true,dc2,TotSum,
                           IPrw.BankCurncy,fr,to1,to2,br1,br2,t,blankval,-1,false,taccnumber);
        accstr = pmrw.TAXAccOut;
        if (GetAccName(accstr,tstr,60)==false) then begin
          res = 2193;
          goto LAddIPRowPayMode;
        end;
        v = MulRateToBase1(IPrw.BankCurncy,t,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        if (CheckTTRPerRow("IPVc",accstr,"",dc1,taccnumber,1)) then begin end;      
        AddEuroCurncyTrRow(gTRp,accstr,"","",tstr,v,true,dc1,TotSum,
                           IPrw.BankCurncy,fr,to1,to2,br1,br2,t,blankval,-1,false,taccnumber);
      end;
    end;
    if (IPrw.BankFeeVal!=0) then begin
      booked = MulRateToBase1(IPrw.BankCurncy,IPrw.BankFeeVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      if (CheckTTRPerRow("IPVc",accstr,otxt,dc2,taccnumber,1)) then begin end;      
      if (IPrw.stp==7) then begin
        AddEuroCurncyTrRow(gTRp,accstr,otxt,"",tstr,booked,accf,dc2,TotSum,
                           IPrw.BankCurncy,fr,to1,to2,br1,br2,IPrw.BankFeeVal,blankval,-1,false,taccnumber);
      end else begin
        AddEuroCurncyTrRow(gTRp,accstr,otxt,"",tstr,booked,accf,dc1,TotSum,
                           IPrw.BankCurncy,fr,to1,to2,br1,br2,IPrw.BankFeeVal,blankval,insrow,false,taccnumber);
      end;    
    end;
  end;
LAddIPRowPayMode:;
  AddIPRowPayMode = res;
  RETURN;
END;

function Integer PostTaxMatrix_IPVc(var record TRVc gTRp,record AccBlock ARAccb,record VATCodeBlock VATCodeb,record IPVc IPp,row IPVc IPrw,string objstr,Boolean dc1,Boolean dc2,
                                    val frrate,val torate1,val torate2,val baserate1,val baserate2,var val TotSum)
begin
  Integer errstrno;
  record TaxMatrixVc TMr;
  row TaxMatrixVc TMrw;
  Integer i,rwcnt;
  string 255 tstr,taccnumber,vatacc;
  row VATCodeBlock VATCbrw;
  
  UnpackRowFieldMatrix(IPrw,"TaxMatrix",TMr);
  rwcnt = MatRowCnt(TMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TMr,i,TMrw);
    GetVATRowFromBlock(TMrw.VATCode,VATCodeb,VATCbrw);
    vatacc = VATCbrw.SalesVATAcc;
    if (GetAccName(vatacc,tstr,60)==false) then begin 
      errstrno = 1902;
      goto LPostTaxMatrix_IPVc;
    end;
    TMrw.VATSum = MulRateToBase1(IPrw.InvCurncy,TMrw.VATSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

    if (CheckTTRPerRow("IPVc",vatacc,objstr,dc2,taccnumber,0)) then begin end;
    AddEuroTrRow(gTRp,vatacc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,true,dc2,TotSum,false,
                 taccnumber,"","");
    switch (IPrw.stp) begin
      case kReceiptRowTypeWriteOff:
      otherwise
        vatacc = VATCbrw.PaySalesVATAcc;
        if (blank(vatacc)) then begin
          vatacc = ARAccb.VATBAcc;
        end;
         if (GetAccName(vatacc,tstr,60)==false) then begin
          errstrno = 2170;
          goto LPostTaxMatrix_IPVc;
        end;
        if (CheckTTRPerRow("IPVc",vatacc,objstr,dc1,taccnumber,1)) then begin end;
        AddEuroTrRow(gTRp,vatacc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,true,dc1,TotSum,false,taccnumber,"","");
    end;
    switch (VATCbrw.InclinTotal) begin
      case kTaxTransInclinTotalNo:
        if (GetAccName(VATCbrw.TaxMatrixVariance,tstr,60)==false) then begin 
          errstrno = 22046;
          goto LPostTaxMatrix_IPVc;
        end;
        if (CheckTTRPerRow("IPVc",VATCbrw.TaxMatrixVariance,objstr,dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,VATCbrw.TaxMatrixVariance,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,true,dc1,TotSum,false,
                     taccnumber,"","");
    end;
  end;
LPostTaxMatrix_IPVc:;  
  PostTaxMatrix_IPVc = errstrno;
  return;
end;

function
Integer DoBookIPVAT(var record TRVc gTRp,var record IPVc IPp,Integer iprow,record AccBlock ARAccb,record VATCodeBlock VATCodeb,
                   record IVVc IVr,val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val totsump)
BEGIN
  row IPVc IPrwp;
  Integer res;
  Integer i,rwcnt;
  row VATCodeBlock VATCoderw;
  string 255 tstr,objstr,vatacc,taccnumber,svatacc;
  val rd,nv,paidv,t1;
  Boolean testf;
  Integer j,ivrwcnt,vcrwcnt;
  record SMVc VATr;
  row SMVc VATrw;
  row IVVc IVrw;
  record CUVc CUr;
  Integer IPBookVAT;
    
  MatRowGet(IPp,iprow,IPrwp);
  CUr.Code = IPrwp.CustCode;
  ReadFirstMain(CUr,1,true);
  if (HasLocalization("POL")) then begin
    IPBookVAT = IVr.IPBookVAT;
  end else begin
    switch (CUr.IPBookVAT) begin
      case 1:
        IPBookVAT = 1;
      case 2:
        IPBookVAT = 0;
      otherwise
        IPBookVAT = ARAccb.IPBookVAT;
    end;
  end;
  testf = true;
  if (IPrwp.CUPNr>0) then begin 
//    if (ARAccb.PreIPBookVAT==0) then begin//prepayment VAT is booked in line 1564
      testf = false; 
//    end;
  end else begin
    if (IPBookVAT==0) and (ARAccb.PostWriteOffVAT==0) then begin
      testf = false; 
    end else begin
      if (IPrwp.ChequeNr>0) then begin //vat posted when check cleared
        testf = false; 
      end;
    end;
  end;
  if (testf) then begin
    objstr = ""; 
    if (ARAccb.VATUseObj!=0) then begin
      objstr = IPrwp.Objects;
    end;
    if (IPrwp.InvoiceNr<0) or (IPrwp.VATVal!=0) or ((IPrwp.VATVal==0) and (ARAccb.IPBookVAT==1)) then begin
      rwcnt = MatRowCnt(VATCodeb);
      if (rwcnt==0) then begin
        res = 1902;
        goto LDoBookIPVAT;
      end;
      if (UseTaxTemplatesforTaxCalc) then begin
        res = PostTaxMatrix_IPVc(gTRp,ARAccb,VATCodeb,IPp,IPrwp,objstr,dc1,dc2,frrate,torate1,torate2,baserate1,baserate2,totsump);
        if (res!=0) then begin
          goto LDoBookIPVAT;
        end;
      end else begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VATCodeb,i,VATCoderw);
          if (IPrwp.VATCode==VATCoderw.VATCode) then begin
            goto L22;
          end;
        end;
        MatRowGet(VATCodeb,0,VATCoderw);
L22:;
        rd = MulRateToBase1(IPrwp.InvCurncy,IPrwp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        switch (IPrwp.stp) begin
          case kReceiptRowTypeWriteOff:
            if (ARAccb.PostWriteOffVAT==0) then begin
              goto L23;
            end;
            vatacc = VATCoderw.SalesVATAcc;
            if (GetAccName(vatacc,tstr,60)==false) then begin
              res = 1902;
              goto LDoBookIPVAT;
            end;
            if (CheckTTRPerRow("IPVc",vatacc,objstr,dc2,taccnumber,1)) then begin end;
            AddEuroTrRow(gTRp,vatacc,objstr,AddVATCodeToVATAccRows(IPrwp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsump,false,taccnumber,"","");
          case kReceiptRowTypeSettlementDiscount:
            if (ARAccb.DiscCashVAT==0) then begin
              goto L23;
            end;
          otherwise
L23:;        
            nv = MulRateToBase1(IPrwp.InvCurncy,IPrwp.InvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            nv = nv - rd;
            if (IPBookVAT and HasLocalization("POL")) then begin
              vatacc = VATCoderw.SalesVATAcc;
            end else begin
              vatacc = VATCoderw.PaySalesVATAcc;
            end;
            if (blank(vatacc)) then begin
              vatacc = ARAccb.VATBAcc;
            end;
            if (GetAccName(vatacc,tstr,60)==false) then begin
              res = 2170;
              goto LDoBookIPVAT;
            end;
            if (CheckTTRPerRow("IPVc",vatacc,objstr,dc1,taccnumber,1)) then begin end;
            AddEuroTrRow(gTRp,vatacc,objstr,AddVATCodeToVATAccRows(IPrwp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsump,false,taccnumber,"","");
            if (IPBookVAT and HasLocalization("POL")) then begin
              vatacc = VATCoderw.CorSalesVATAcc;
            end else begin
              vatacc = VATCoderw.SalesVATAcc;
            end;

            if (GetAccName(vatacc,tstr,60)==false) then begin
              res = 2171;
              goto LDoBookIPVAT;
            end;
            if (CheckTTRPerRow("IPVc",vatacc,objstr,dc2,taccnumber,1)) then begin end;      
            AddEuroTrRow(gTRp,vatacc,objstr,AddVATCodeToVATAccRows(IPrwp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsump,false,taccnumber,"","");           
        end;
      end;
    end else begin
      switch (IPrwp.stp) begin
        case kReceiptRowTypeWriteOff:
        otherwise
          if (ARAccb.PostWriteOffVAT!=0) then begin
            if (IPBookVAT==0) then begin
              goto LDoBookIPVAT;
            end;
          end;
      end;
      paidv = IVPaidAmount(IVr,IVr.SerNr);
      ivrwcnt = MatRowCnt(IVr);
      
      SetupVATBase(VATr,vcrwcnt);  
      for (j=0;j<ivrwcnt;j=j+1) begin
        MatRowGet(IVr,j,IVrw);
        if (IVrw.stp==kInvoiceRowTypeNormal) then begin
//**        AddVATBase(VATr,IVrw.VATCode,IVrw.Sum*(IPrwp.InvVal/IVr.Sum1),blankval,vcrwcnt,IVr.InclVAT,IVr.NoTAXonVAT);
          AddVATBase(VATr,IVrw.VATCode,IVrw.Sum*(IPrwp.InvVal/IVr.Sum4),blankval,vcrwcnt,IVr.InclVAT,IVr.NoTAXonVAT);
        end;
      end;      
      for (j=0;j<vcrwcnt;j=j+1) begin
        MatRowGet(VATr,j,VATrw);
        IPGetVATCodeAccNumbers(VATCodeb,VATrw.VATCode,svatacc,vatacc);
        if (blank(vatacc)) then begin
          vatacc = ARAccb.VATBAcc;
        end;
        if (nonblank(svatacc)) and (nonblank(vatacc)) then begin
//**          rd = FindVAT(VATrw.VATCode,VATrw.DebVal,IVr.InclVAT,IVr.NoTAXonVAT);
          Mul2VAT(VATrw.VATCode,VATrw.DebVal,rd,t1,IVr.InclVAT);
          if (rd!=0) then begin
            rd = MulRateToBase1(IPrwp.InvCurncy,rd,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            if (GetAccName(vatacc,tstr,60)==false) then begin
              res = 2170;
              goto LDoBookIPVAT;
            end;
            if (CheckTTRPerRow("IPVc",vatacc,objstr,dc1,taccnumber,1)) then begin end;      
            AddEuroTrRow(gTRp,vatacc,objstr,AddVATCodeToVATAccRows(IPrwp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsump,false,taccnumber,"","");
            if (GetAccName(svatacc,tstr,60)==false) then begin
              res = 2171;
              goto LDoBookIPVAT;
            end;
            if (CheckTTRPerRow("IPVc",svatacc,objstr,dc2,taccnumber,1)) then begin end;      
            AddEuroTrRow(gTRp,svatacc,objstr,AddVATCodeToVATAccRows(IPrwp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsump,false,taccnumber,"","");
          end;
        end;
      end;
    end;
  end;
LDoBookIPVAT:;
  DoBookIPVAT = res;
  RETURN;
END;

function Integer PostWithholdingTaxes(var record TRVc gTRp,record IVVc IVr,row IPVc IPrw,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
begin
  Integer res;
  record ItemSettingBlock ISb;
  Boolean testf;
  row WHTaxBlock WHTaxrw;
  string 255 tstr,taccnumber;
  row IVVc IVrw;
  Integer i,rwcnt;
  val v;
  
  BlockLoad(ISb);
  testf = true;
  if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
  if (ISb.Withholdings==0) then begin testf = false; end;
  if (IPrw.InvoiceNr<=0) then begin testf = false; end;
  if (IPrw.ChequeNr>0) then begin testf = false; end;
  
  if (testf) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.ovst==0) and (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin
        v = (IVrw.Sum*IPrw.InvVal)/IVr.Sum4;
        
        GetWHTaxRow(IVrw.WHTax,WHTaxrw);
        if (GetAccName(IVrw.SalesAcc,tstr,60)==false) then begin
          res = 1903;
          goto LPostWithholdingTaxes;
        end;
        if (CheckTTRPerRow("IPVc",IVrw.SalesAcc,"",dc1,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,IVrw.SalesAcc,"","",tstr,v,baserate1,baserate2,false,dc1,TotSum,false,taccnumber,"","");         
        if (GetAccName(WHTaxrw.AccNumber,tstr,60)==false) then begin
          res = 1903;
          goto LPostWithholdingTaxes;
        end;
        if (CheckTTRPerRow("IPVc",WHTaxrw.AccNumber,"",dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,WHTaxrw.AccNumber,"","",tstr,v,baserate1,baserate2,false,dc2,TotSum,false,taccnumber,"","");         
      end;
    end;    
  end;
LPostWithholdingTaxes:;  
  PostWithholdingTaxes = res;
  return;
end;

procedure FindIPChequeNumber(LongInt chequenr,var string res)
BEGIN
  record CheckVc Checkr;
  
  res = chequenr;
  Checkr.SerNr = chequenr;
  if (ReadFirstMain(Checkr,1,true)) then begin
    res = Checkr.CheckNr;
  end;  
  RETURN;
END;

function
Integer MakeTransFromIP2(var record TRVc gTRp,var record IPVc IPp,Boolean rpt,Integer transtocreate,var Integer errrownr,var string errfield)
BEGIN
  Integer res;
  record VATCodeBlock VATCodeRec;
  record TRGenBlock TRGenRec;
  record BaseCurBlock bascur;
  record AccBlock ARAccb;
  record PMBlock PMRec;
  record CCatVc CCatr;
  record IVVc IVr;
  record CUVc CUr;  
  record PurgeTRVc lPurgeTRr;
  record TRVc lTRr;
  record IPrsVc IPrsr;
  row PMBlock pmrw;
  row IPVc IPrw;
  Integer rwcnt,pmrwcnt,trrwcnt;
  Integer PMn;
  Integer i,j;
  string 255 ftxt,otxt,accstr,vatacc,taccnumber,psvatacc,tax1acc;
  string 255 tstr,orgacc,orgobj,vatobjstr,vatcode;
  val v,t,bv;
  Boolean dc1,dc2;
  Boolean onaccdc1,onaccdc2;
  val frrate,torate1,torate2,baserate1,baserate2;
  val rs,rs2,vsum;
  val ors,ors2,rd,rd2,brd,brd2;
  val TotSum,nloanv;
  val rategain,rategain2,rateloss,rateloss2;
  val booked,curbooked;
  Boolean accf,loanf,prepvatflag,custinfof,dcf;
  LongInt insrow;
  val prepbook,prepbook2;
  record CYBlock TRSetb;
  Boolean NegativeAmountsf,invfound;
  record AccVc Accr;
  val ro,ro2;

  res = 1085;
  errfield = "SerNr";
  errrownr = -1;
  BlockLoad(bascur);
  BlockLoad(ARAccb);
  BlockLoad(TRGenRec);
  BlockLoad(PMRec);
  BlockLoad(VATCodeRec);
  BlockLoad(TRSetb);
  if (rpt==false) then begin
    if (TRGenRec.IPGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromIP2;
    end;
  end;  
  if (rpt==false) then begin
    if (nonblankdate(TRGenRec.IPStartDate) and
        (IPp.TransDate<TRGenRec.IPStartDate)) then begin
      res = 0;
      goto LMakeTransFromIP2;
    end;
  end;    
  
  RecordNew(gTRp);
  switch (transtocreate) begin
    case 1: gTRp.IntYc = IPYc;
    case 2: gTRp.IntYc = IPOYc;
    case 3: gTRp.IntYc = IPYc;
    case 4: gTRp.IntYc = IPBYc;
  end;
  gTRp.Number = IPp.SerNr;
  gTRp.RefStr = IPp.RecNumber;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromIP2;
    end;
  end;    
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = IPp.TransDate;  
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      res = 1075;
      goto LMakeTransFromIP2;
    end;
  end;
  ftxt = IPp.Comment;
  gTRp.Comment = ftxt;
  PMn = 0;
  pmrwcnt = MatRowCnt(PMRec);
  if (len(IPp.PayMode)>0) then begin
    for (j = 0; j<pmrwcnt; j=j+1) begin
      MatRowGet(PMRec,j,pmrw);
      if (pmrw.Code==IPp.PayMode) then begin
        PMn = j;
        j = pmrwcnt;
      end;
    end;
  end;
  dc1 = false;
  dc2 = true;
  if (PayModeAccIsClosed(IPp.PayMode)) then begin
    res = 1258;
    errfield = "PayMode"; 
    goto LMakeTransFromIP2;
  end;  
  rwcnt = MatRowCnt(IPp);
  for (i=0;i<rwcnt;i=i+1) begin
    prepvatflag = false;
    MatRowGet(IPp,i,IPrw);
    if ((IPrw.stp==kReceiptRowTypeNormal) or (IPrw.stp==kReceiptRowTypeSettlementDiscount) or (IPrw.stp==kReceiptRowTypeWriteoff) or (IPrw.stp==kReceiptRowTypeBankFee)) then begin
    if (PayModeAccIsClosed(IPrw.PayMode)) then begin
      res = 1258;
      errrownr = i;
      errfield = "PayMode"; 
      goto LMakeTransFromIP2;
    end;
    if (IPrw.CUPNr==-1) then begin
      GetFullCurncyRate(IPrw.InvCurncy,IPp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
    end else begin
      GetARPayRate(IPp.SerNr,IPrw.CUPNr,frrate,torate1,torate2,baserate1,baserate2,IPrw.InvCurncy,IPp.TransDate);
    end;
    if ((transtocreate==2) and (i==0)) then begin
      gTRp.TransDate = IPrw.PayDate;
    end;
    if (IPrw.ovst==0) then begin
      if (IPrw.InvoiceNr!=-1) then begin
        if (IPrw.ChequeNr!=-1) then begin
          FindIPChequeNumber(IPrw.ChequeNr,ftxt);    
        end else begin
          if (IsStandardProduct and HasLocalization("POL"))  then begin
            ftxt = IPrw.InvoiceOfficialSerNr;
          end else begin
            ftxt = IPrw.InvoiceNr;
          end;
        end;
      end else begin
        ftxt = IPrw.CustCode;
      end;
      ftxt = ftxt & " ";
      ftxt = ftxt & IPrw.CustName;
      v = IPrw.InvVal;
      if (IPrw.InvoiceNr==-1) then begin

        otxt = "";
        if (IPrw.CUPNr==-1) then begin
          GetFullCurncyRate(IPrw.InvCurncy,IPp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
          rs = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        end else begin
          GetARPayRate(IPp.SerNr,IPrw.CUPNr,frrate,torate1,torate2,baserate1,baserate2,IPrw.InvCurncy,IPp.TransDate);
//          IPGetPrepaymentBaseAmounts(IPrw.CUPNr,IPrw.InvVal,rs,rs2);// rs = FindAPPrepaidBase1Amount(IPrw.CUPNr,IPrw.InvCurncy,IPrw.InvVal); 
          rs = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          rs2 = MulRateToBase2(IPrw.InvCurncy,IPrw.InvVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        end;
        rs2 = blankval;            
        onaccdc1 = dc1;
        onaccdc2 = dc2;
        if (IPrw.InvVal<0) then begin
//          rs = -rs;
//          rs2 = -rs2;
//          v = -v;
          if (IPrw.CUPNr<0) then begin
            if (nonblank(IPrw.B1BankVal)) then begin
              rs = IPrw.B1BankVal;
              if (nonblank(IPrw.ToRateB1BankVal)) then begin
                torate1 = IPrw.ToRateB1BankVal;
              end else begin
//?
              end;
            end;
          end;
        end else begin
          if (nonblank(IPrw.B2BankVal)) then begin
            rs2 = IPrw.B2BankVal;
          end;
          if (nonblank(IPrw.B1BankVal)) then begin
            rs = IPrw.B1BankVal;
            if (nonblank(IPrw.ToRateB1BankVal)) then begin
              frrate = IPrw.FrRateBankVal;
              torate1 = IPrw.ToRateB1BankVal;
            end else begin
//?
            end;
            if (blank(rs2)) then begin
              Base1ToBase2(rs,IPp.TransDate,rs2);
            end;
          end;
        end;  
        MatRowGet(PMRec,PMn,pmrw);
        switch (transtocreate) begin
          case 3:
            accstr = pmrw.PrelAccIn;
            otxt = pmrw.Objects;
          otherwise
            accstr = IPrw.ARAcc;
            CUr.Code = IPrw.CustCode;
            if (ReadFirstMain(CUr,1,true)) then begin
              otxt = IPrw.Objects;
              if (blank(accstr)) then begin
                CCatr.Code = CUr.CustCat; 
                if (ReadFirstMain(CCatr,1,true)) then begin
                  accstr = CCatr.OnAccAcc;
                end;
              end;
            end;
            if (blank(accstr)) then begin
              accstr = ARAccb.OnAccAcc;
            end;
        end;
        if (IPrw.stp!=kReceiptRowTypeBankFee) then begin
          if (GetAccName(accstr,tstr,60)==false) then begin
            res = 1916;
            goto LMakeTransFromIP2;
          end;
          if (CheckTTRPerRow("IPVc",accstr,otxt,onaccdc1,taccnumber,1)) then begin end;      
          prepbook = rs;
          prepbook2 = rs2;

          if (IPrw.RecCurncy==bascur.BaseCur2) then begin
            prepbook2 = IPrw.RecVal;
          end;
          if (IPrw.BankCurncy==bascur.BaseCur2) then begin
            prepbook2 = IPrw.BankVal;
          end;
          if (prepbook2==0) then begin
            if (blank(prepbook2)) and (nonblank(bascur.BaseCur2)) then begin
              Base1ToBase2(prepbook,IPp.TransDate,prepbook2);
            end;
          end;
          if (IPp.ARonTR!=0) then begin
            AddEuroCurncyNomARTrRow(gTRp,accstr,otxt,"",tstr,rs,rs2,true,onaccdc1,TotSum,
                              IPrw.InvCurncy,frrate,torate1,torate2,baserate1,baserate2,v,blankval,
                              IPrw.CustCode,IPrw.InvoiceNr,1,blankval,IPrw.PayDate,-1,false,taccnumber,"","");
          end else begin
            AddEuroCurncyTrRow(gTRp,accstr,otxt,"",tstr,rs,true,onaccdc1,TotSum,
                               IPrw.InvCurncy,frrate,torate1,torate2,baserate1,baserate2,v,rs2,-1,false,taccnumber);
          end;        
          if (nonblank(IPrw.VATCode)) then begin
            if (IPrw.CUPNr>0) then begin
              if (ARAccb.PreIPBookVAT!=0) then begin
                prepvatflag = true;
              end;
            end;
          end;
        end;
        if (IPrw.stp==kReceiptRowTypeBankFee) then begin
          if (IPrw.BankVal!=0) then begin
            GetFullCurncyRate(IPrw.BankCurncy,IPp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
            rs = MulRateToBase1(IPrw.BankCurncy,IPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            if (GetAccName(ARAccb.ExtraCostAcc,tstr,60)==false) then begin
              res = 2136;
              goto LMakeTransFromIP2;
            end;
            if (CheckTTRPerRow("IPVc",ARAccb.ExtraCostAcc,"",dc2,taccnumber,0)) then begin end;      
            AddEuroCurncyTrRow(gTRp,ARAccb.ExtraCostAcc,"","",tstr,rs,false,dc2,
                               TotSum,IPrw.BankCurncy,frrate,torate1,torate2,baserate1,baserate2,IPrw.BankVal,blankval,-1,false,taccnumber);
          end;
        end;       
        goto L80;
      end;
      IVr.SerNr = IPrw.InvoiceNr;
      invfound = ReadFirstMain(IVr,1,true);
      if (invfound==false) then begin
        IPrsr.IVNr = IPrw.InvoiceNr;
        IPrsr.TransType = kIPrsTransTypeNLTransaction;
        if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
          CUr.Code = IPrsr.CustCode;
          ReadFirstMain(CUr,1,true);
          lTRr.IntYc = IPrsr.IntYc;
          lTRr.Number = IPrsr.TransNr;
          if (ReadFirstMain(lTRr,2,true)) then begin
            ConvertNLTrans_IVVc(lTRr,IPrsr,CUr,true,IVr);
            invfound = true;
          end;
        end else begin
        /*
          IPrsr.IVNr = IPrw.InvoiceNr;
          IPrsr.TransType = kIPrsTransTypePurgeNLTransaction;
          if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
            CUr.Code = IPrsr.CustCode;
            ReadFirstMain(CUr,1,true);
            lPurgeTRr.IntYc = IPrsr.IntYc;
            lPurgeTRr.Number = IPrsr.TransNr;
            if (ReadFirstMain(lPurgeTRr,2,true)) then begin
              ConvertPurgeNLTrans_IVVc(lPurgeTRr,IPrsr,CUr,true,IVr);
              invfound = true;
            end;
          end;
          */
        end;
      end;
      if (invfound) then begin
        if (IVr.Invalid!=0) then begin
          goto L80;
        end;
          NegativeAmountsf = (TRSetb.NegativeAmounts!=0) and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales);
          if (IPrw.stp==1 and transtocreate==1) then begin 
            res = AddLoanIPTrRows(gTRp,ARAccb,IVr,IPp,i,rateloss,rategain,TotSum,dc1,dc2,loanf,nloanv);
            if (res!=0) then begin
              if (loanf) then begin
                goto LMakeTransFromIP2;
              end;
            end;
            if (nloanv<0) then begin
              v = 0;
            end else begin
              v = v - nloanv;
            end;
          end;
          otxt = "";
          otxt = IPrw.Objects;
          rs = MulRateToBase1(IPrw.InvCurncy,v,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          rs2 = MulRateToBase2(IPrw.InvCurncy,v,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          ors = MulRateToBase1(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          ors2 = MulRateToBase2(IVr.CurncyCode,v,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
          ro = MulRateToBase1(IPrw.InvCurncy,IPrw.RoundOff,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          ro2 = MulRateToBase2(IPrw.InvCurncy,IPrw.RoundOff,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          if (nonblank(IPrw.B1BankVal)) then begin
            rs = IPrw.B1BankVal;
          end;        
          if (nonblank(IPrw.B2BankVal)) then begin
            rs2 = IPrw.B2BankVal;
          end else begin
            Base1ToBase2(rs,IPp.TransDate,rs2);
          end;
          if (nonblank(IPrw.B1BankVal)) then begin
            rd = ors - rs - ro;
          end else begin
            rd = ors - rs;
          end;
          if (nonblank(IPrw.B1BankVal) or nonblank(IPrw.B2BankVal)) then begin
            rd2 = ors2 - rs2 - ro2;
          end else begin
            rd2 = ors2 - rs2;
          end;

          rd = Round(rd,DefaultRoundMode);
          rd2 = Round(rd2,DefaultRoundMode);

          rs = IPrw.B1BankVal;
          rs2 = IPrw.B2BankVal;
          if (blank(rs)) then begin
            if ((IPrw.BankCurncy==bascur.BaseCur1) or (blank(IPrw.BankCurncy))) then begin
              rs = IPrw.BankVal;
              if (blank(rs2)) then begin
                Base1ToBase2(rs,IPp.TransDate,rs2);
              end;
            end else begin
              rs = MulRateToBase1(IPrw.InvCurncy,v,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              if (blank(rs2)) then begin
                rs2 = MulRateToBase2(IPrw.InvCurncy,v,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              end;
            end;
          end;
          brd = ors - rs - ro;
          brd2 = ors2 - rs2 - ro2;          
          brd = Round(brd,DefaultRoundMode);
          brd2 = Round(brd2,DefaultRoundMode);
          brd = brd - rd;
          brd2 = brd2 - rd2;
          if (nonblank(IPrw.ARAcc)) then begin
            IVr.ARAcc = IPrw.ARAcc;
          end;
          if (blank(IVr.ARAcc)) then begin
            IVr.ARAcc = ARAccb.ARAcc;
          end;
          if (GetAccName(IVr.ARAcc,tstr,60)==false) then begin
            res = 1908;
            goto LMakeTransFromIP2;
          end;
          switch (IPrw.stp) begin
            case kReceiptRowTypeNormal: accf = false; 
            otherwise accf = true;
          end;
        if (IPrw.stp!=kReceiptRowTypeBankFee) then begin
          MatRowGet(PMRec,PMn,pmrw);
          switch (transtocreate) begin
            case 1:
              accstr = IVr.ARAcc;
              if (loanf) then begin
                otxt = IVr.Objects;
              end;
            case 2:
              accstr = IVr.ARAcc;
              if (loanf) then begin
                otxt = IVr.Objects;
              end;
            case 3:
              accstr = pmrw.PrelAccIn;
              if (GetAccName(pmrw.PrelAccIn,ftxt,60)==false) then begin
                res = 2192;
                goto LMakeTransFromIP2;
              end;
              otxt = pmrw.Objects;
            case 4:
              if (ARAccb.IPTransBankRowPerCU!=0) then begin
                accf = true;
              end;
              accstr = pmrw.AccNr;
              ftxt = pmrw.Comment;
              otxt = pmrw.Objects;
          end;          
          if (CheckTTRPerRow("IPVc",accstr,otxt,dc1,taccnumber,1)) then begin end;      
          if (IPp.ARonTR!=0) then begin
            AddEuroCurncyNomARTrRow(gTRp,accstr,otxt,"",ftxt,ors,blankval,accf,dc1,TotSum,
                                IVr.CurncyCode,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,v,blankval,
                                IPrw.CustCode,IPrw.InvoiceNr,1,blankval,IPrw.PayDate,-1,NegativeAmountsf,taccnumber,"","");//0
          end else begin
            AddEuroCurncyTrRow(gTRp,accstr,otxt,"",ftxt,ors,accf,dc1,TotSum,
                           IVr.CurncyCode,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,v,blankval,-1,NegativeAmountsf,taccnumber);//0
          end;
          orgacc = accstr;
          orgobj = otxt;
          if (ARAccb.BookVATonRateGain!=0) then begin
            res = BookVATonRateGainIP(gTRp,IVr,rd,rd2,baserate1,baserate2,dc2,TotSum);
            if (res!=0) then begin
              goto LMakeTransFromIP2;
            end;
          end;

          if (rd<0) then begin
            rategain = rategain + rd;
            rategain2 = rategain2 + rd2;
          end;
          if (rd>0) then begin
            rateloss = rateloss + rd;
            rateloss2 = rateloss2 + rd2;
          end;

          if (rd<0) then begin
            if (GetAccName(ARAccb.RateGainAcc,tstr,60)==false) then begin
              res = 1917;
              goto LMakeTransFromIP2;
            end;
            if (ARAccb.BookRateGainPerIPRow!=0) then begin
              if (IsStandardProduct) and (HasLocalization("POL")) then begin
              end else begin
                if (nonblank(tstr)) then begin
                  tstr = tstr & ", ";
                end;
                tstr = tstr & IPrw.InvoiceNr;
              end;
            end;
            AddEuroCurncyTrRow(gTRp,ARAccb.RateGainAcc,IPrw.Objects,"",tstr,rd,ARAccb.BookRateGainPerIPRow==0,dc2,TotSum,
                               bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rd2,blankval,-1,false,""); //trrwcnt-2);
          end;
          if (rd>0) then begin
            if (GetAccName(ARAccb.RateLossAcc,tstr,60)==false) then begin
              res = 1918;
              goto LMakeTransFromIP2;
            end;
            if (ARAccb.BookRateGainPerIPRow!=0) then begin
              if (IsStandardProduct) and (HasLocalization("POL")) then begin
              end else begin
                if (nonblank(tstr)) then begin
                  tstr = tstr & ", ";
                end;
                tstr = tstr & IPrw.InvoiceNr;
              end;
            end;
            AddEuroCurncyTrRow(gTRp,ARAccb.RateLossAcc,IPrw.Objects,"",tstr,rd,ARAccb.BookRateGainPerIPRow==0,dc2,TotSum,
                               bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rd2,blankval,-1,false,""); //trrwcnt-2);
          end;          

          if (brd<0) then begin
            accstr = ARAccb.BankRateGainAcc;
            if (blank(accstr) and IsStandardProduct) then begin
              accstr = ARAccb.RateGainAcc;
            end;
            if (GetAccName(accstr,tstr,60)==false) then begin
              res = 24220;
              goto LMakeTransFromIP2;
            end;
            if (ARAccb.BookRateGainPerIPRow!=0) then begin
              if (IsStandardProduct) and (HasLocalization("POL")) then begin
              end else begin
                if (nonblank(tstr)) then begin
                  tstr = tstr & ", ";
                end;
                tstr = tstr & IPrw.InvoiceNr;
              end;
            end;
            AddEuroCurncyTrRow(gTRp,accstr,IPrw.Objects,"",tstr,brd,ARAccb.BookRateGainPerIPRow==0,dc2,TotSum,
                               bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,brd2,blankval,-1,false,""); //trrwcnt-2);
          end;
          if (brd>0) then begin
            accstr = ARAccb.BankRateLossAcc;
            if (blank(accstr) and IsStandardProduct) then begin
              accstr = ARAccb.RateLossAcc;
            end;
            if (GetAccName(accstr,tstr,60)==false) then begin
              res = 24221;
              goto LMakeTransFromIP2;
            end;
            if (ARAccb.BookRateGainPerIPRow!=0) then begin
              if (IsStandardProduct) and (HasLocalization("POL")) then begin
              end else begin
                if (nonblank(tstr)) then begin
                  tstr = tstr & ", ";
                end;
                tstr = tstr & IPrw.InvoiceNr;
              end;
            end;
            AddEuroCurncyTrRow(gTRp,accstr,IPrw.Objects,"",tstr,brd,ARAccb.BookRateGainPerIPRow==0,dc2,TotSum,
                               bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,brd2,blankval,-1,false,""); //trrwcnt-2);
          end;          
        end;
        if (IPrw.stp==kReceiptRowTypeSettlementDiscount) then begin
        if (IPrw.BankVal!=0) then begin
          rs = MulRateToBase1(IPrw.BankCurncy,IPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          if (transtocreate!=3) then begin
            switch (IVr.ExportFlag) begin
              case 0:
                accstr = ARAccb.ERebAcc;
              case 1:
                accstr = ARAccb.EUERebAcc;
              case 2:
                accstr = ARAccb.ExpERebAcc;
              case 4:
                accstr = ARAccb.EUERebAcc;
              case 5:
                accstr = ARAccb.ExpERebAcc;
            end;
            res = GetAccNamCurVAT(accstr,tstr,vatcode,60,ftxt);

            if (res!=0) then begin
              res = 2132;
              goto LMakeTransFromIP2;
            end;
            if (CheckTTRPerRow("IPVc",accstr,IPrw.Objects,dc2,taccnumber,0)) then begin end;
            AddEuroCurncyTrRow(gTRp,accstr,IPrw.Objects,vatcode,tstr,rs,false,dc2,TotSum,
                           IPrw.BankCurncy,frrate,torate1,torate2,baserate1,baserate2,IPrw.BankVal,blankval,-1,false,taccnumber);
            if (nonblank(ARAccb.VATERAcc)) then begin            
              IVVATPart(IPrw.InvoiceNr,IPrw.RecVal,vsum);//rs otherwise if rate is diffrent there is a problem
              Accr.AccNumber = ARAccb.VATERAcc;
              if (ReadFirstMain(Accr,1,true)==false) then begin
                res = 2134;
                goto LMakeTransFromIP2;
              end;
              tstr = Accr.Comment;
/*              
              if (GetAccName(ARAccb.VATERAcc,tstr,60)==false) then begin
                res = 2134;
                goto LMakeTransFromIP2;
              end;
*/              
              if (CheckTTRPerRow("IPVc",ARAccb.VATERAcc,"",dc2,taccnumber,0)) then begin end;      
              AddEuroTrRow(gTRp,ARAccb.VATERAcc,"",AddVATCodeToVATAccRows(Accr.VATCode),tstr,vsum,baserate1,baserate2,true,dc2,TotSum,false,taccnumber,"","");
              if (nonblank(ARAccb.VATBAcc)) then begin
                res = GetAccNamCurVAT(ARAccb.VATBAcc,tstr,vatcode,60,ftxt);
                if (res!=0) then begin
                  res = 1903;
                  goto LMakeTransFromIP2;
                end;
                if (CheckTTRPerRow("IPVc",ARAccb.VATBAcc,"",dc1,taccnumber,0)) then begin end;      
                AddEuroTrRow(gTRp,ARAccb.VATBAcc,"","",tstr,vsum,baserate1,baserate2,true,dc1,TotSum,false,taccnumber,"","");
              end else begin
                res = GetAccNamCurVAT(accstr,tstr,vatcode,60,ftxt);
                if (res!=0) then begin
                  res = 2132;
                  goto LMakeTransFromIP2;
                end;
                if (CheckTTRPerRow("IPVc",accstr,"",dc1,taccnumber,0)) then begin end;      
                AddEuroTrRow(gTRp,accstr,"",vatcode,tstr,vsum,baserate1,baserate2,true,dc1,TotSum,false,taccnumber,"","");
              end;
            end;
          end else begin
            if (nonblank(orgacc)) then begin
              if (GetAccName(orgacc,ftxt,60)==false) then begin
                res = 2191;
                goto LMakeTransFromIP2;
              end;
              if (CheckTTRPerRow("IPVc",orgacc,orgobj,dc2,taccnumber,0)) then begin end;      
              if (IPp.ARonTR!=0) then begin
                AddEuroCurncyNomARTrRow(gTRp,orgacc,orgobj,"",ftxt,rs,blankval,true,dc2,TotSum,
                                IPrw.InvCurncy,frrate,torate1,torate2,baserate1,baserate2,v,blankval,
                                IPrw.CustCode,IPrw.InvoiceNr,1,blankval,IPrw.PayDate,-1,false,taccnumber,"","");
              end else begin
                AddEuroCurncyTrRow(gTRp,orgacc,orgobj,"",ftxt,rs,true,dc2,TotSum,
                                   IPrw.InvCurncy,frrate,torate1,torate2,baserate1,baserate2,v,blankval,-1,false,taccnumber);
              end;
            end;
          end;
       end;
       end;
       if (IPrw.stp==kReceiptRowTypeWriteOff) then begin
         if (IPrw.BankVal!=0) then begin
            bv = IPrw.BankVal;
            if (ARAccb.PostWriteOffVAT!=0) then begin
              bv = bv - IPrw.VATVal;
            end;
            GetFullCurncyRate(IPrw.BankCurncy,IPp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
            rs = MulRateToBase1(IPrw.BankCurncy,bv,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            rs2 = MulRateToBase2(IPrw.BankCurncy,bv,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            ors = MulRateToBase1(IVr.CurncyCode,bv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            ors2 = MulRateToBase2(IVr.CurncyCode,bv,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
            rd = ors - rs;
            rd2 = ors2 - rs2;
            rd = Round(rd,DefaultRoundMode);
            rd2 = Round(rd2,DefaultRoundMode);

            accstr = IPrw.WriteOffAcc;            
            if (rs<0) then begin
              if (blank(accstr)) then begin
                accstr = ARAccb.CredAcc;
              end;
              dcf = dc2;
            end else begin
              if (blank(accstr)) then begin
                accstr = ARAccb.WriteOffLossAcc;
              end;
              dcf = dc2;
            end;
            if (blank(accstr)) then begin
              accstr = ARAccb.CredAcc;
              dcf = dc2;
            end;
            if (GetAccName(accstr,tstr,60)==false) then begin
              res = 2135;
              goto LMakeTransFromIP2;
            end;
            if (CheckTTRPerRow("IPVc",accstr,IPrw.Objects,dcf,taccnumber,0)) then begin end;
            vatcode = "";      
            if (ARAccb.PostWriteOffVAT!=0) then begin
              vatcode = IPrw.VATCode;      
            end;
//        vatcode = TaxTemplateVATCodeOnTRRows(IPrw.TaxTemplateCode,vatcode);
            AddEuroCurncyTrRow(gTRp,accstr,IPrw.Objects,vatcode,tstr,rs,false,dcf,
                               TotSum,IPrw.BankCurncy,frrate,torate1,torate2,baserate1,baserate2,bv,blankval,-1,false,taccnumber);
          end;
       end;
       if (IPrw.stp==kReceiptRowTypeBankFee) then begin
         if (IPrw.BankVal!=0) then begin
            GetFullCurncyRate(IPrw.BankCurncy,IPp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
            rs = MulRateToBase1(IPrw.BankCurncy,IPrw.BankVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
            if (GetAccName(ARAccb.ExtraCostAcc,tstr,60)==false) then begin
              res = 2136;
              goto LMakeTransFromIP2;
            end;
            if (CheckTTRPerRow("IPVc",ARAccb.ExtraCostAcc,"",dc2,taccnumber,0)) then begin end;      
            AddEuroCurncyTrRow(gTRp,ARAccb.ExtraCostAcc,"","",tstr,rs,false,dc2,
                               TotSum,IPrw.BankCurncy,frrate,torate1,torate2,baserate1,baserate2,IPrw.BankVal,blankval,-1,false,taccnumber);
         end;
       end;
      end;
    end;
    end; //switch
L80:;
    if (nonblank(IPrw.PayMode)) then begin
      custinfof = false;
      if (ARAccb.IPTransBankRowPerCU!=0) then begin
        accf = false;
        custinfof = true;
      end;    
      for (j = 0; j<pmrwcnt; j=j+1) begin
        MatRowGet(PMRec,j,pmrw);
        if (pmrw.Code==IPrw.PayMode) then begin
          res = AddIPRowPayMode(gTRp,IPp,IVr,PMRec,j,i,booked,curbooked,TotSum,ARAccb,
                                dc1,dc2,accf,transtocreate,-1,custinfof,ARAccb.ObjectonBankAcc,
                                bascur,prepbook,prepbook2,NegativeAmountsf);
          if (res!=0) then begin
            goto LMakeTransFromIP2;
          end;
        end;
      end;
    end else begin
      custinfof = false;
      accf = true;
      insrow = 0;
      if (ARAccb.IPTransBankRowPerCU!=0) then begin
        accf = false;
        insrow = -1;
        custinfof = true;
      end;    
      if (IPrw.stp==7) then begin accf = false; end;
      if ((IPrw.stp==1) or (IPrw.stp==7)) then begin
        for (j = 0; j<pmrwcnt;j=j+1) begin
          MatRowGet(PMRec,j,pmrw);
          if (pmrw.Code==IPp.PayMode) then begin
            res = AddIPRowPayMode(gTRp,IPp,IVr,PMRec,j,i,booked,curbooked,TotSum,ARAccb,
                                  dc1,dc2,accf,transtocreate,insrow,custinfof,ARAccb.ObjectonBankAcc,
                                  bascur,prepbook,prepbook2,NegativeAmountsf);
            if (res!=0) then begin
              goto LMakeTransFromIP2;
            end;
          end;
        end;
      end;
    end;
    if (IPrw.RoundOff!=0) then begin
      GetFullCurncyRate(IPrw.InvCurncy,IPp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
      rs = MulRateToBase1(IPrw.InvCurncy,IPrw.RoundOff,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (GetAccName(IPrw.RoundOffAcc,tstr,60)==false) then begin
        res = 1904;
        goto LMakeTransFromIP2;
      end;
      AddEuroCurncyTrRow(gTRp,IPrw.RoundOffAcc,"",IPrw.VATCode,tstr,rs,false,dc2,
                         TotSum,IPrw.InvCurncy,frrate,torate1,torate2,baserate1,baserate2,IPrw.RoundOff,blankval,-1,false,"");
    end;
    if (prepvatflag) then begin    
      vatobjstr = ""; 
      if (ARAccb.VATUseObj!=0) then begin
        vatobjstr = IPrw.Objects;
      end;    
      v = IPrw.VATVal;
      rs = MulRateToBase1(IPrw.InvCurncy,v,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      accstr = ARAccb.OnAccVATAcc;
      if (GetAccName(accstr,tstr,60)==false) then begin
        res = 2137;
        goto LMakeTransFromIP2;
      end;
      if (CheckTTRPerRow("IPVc",accstr,vatobjstr,dc2,taccnumber,0)) then begin end;      
      AddEuroCurncyTrRow(gTRp,accstr,vatobjstr,AddVATCodeToVATAccRows(IPrw.VATCode),tstr,rs,false,dc2,TotSum,
                        IPrw.InvCurncy,frrate,torate1,torate2,baserate1,baserate2,v,blankval,-1,false,taccnumber);
      if (IPrw.CUPNr>0) then begin
        if (ARAccb.PreIPBookVAT!=0) then begin
          GetVATCodePrelVATAcc(IPrw.VATCode,vatacc);          
          if (blank(vatacc)) then begin
            vatacc = ARAccb.VATBAcc;
          end;
        end;
      end;    
      if (GetAccName(vatacc,tstr,60)==false) then begin
        res = 1903;
        goto LMakeTransFromIP2;
      end;
      if (CheckTTRPerRow("IPVc",vatacc,vatobjstr,dc1,taccnumber,0)) then begin end;      
      AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(IPrw.VATCode),tstr,rs,true,dc1,TotSum,
                      IPrw.InvCurncy,frrate,torate1,torate2,baserate1,baserate2,v,blankval,-1,false,taccnumber);
      if (IPrw.TAX1Sum!=0) then begin
        IPGetVATCodeTAX1AccNumbers(VATCodeRec,IPrw.VATCode,tax1acc,psvatacc);
        if (GetAccName(ARAccb.Tax1TmpAcc,tstr,60)==false) then begin 
          res = 32050;
          goto LMakeTransFromIP2;
        end;
        if (CheckTTRPerRow("IPVc",ARAccb.Tax1TmpAcc,"",dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,ARAccb.Tax1TmpAcc,"","",tstr,IPrw.TAX1Sum,baserate1,baserate2,false,dc2,TotSum,false,taccnumber,"","");         

        if (GetAccName(tax1acc,tstr,60)==false) then begin 
          res = 20078;
          goto LMakeTransFromIP2;
        end;
        if (CheckTTRPerRow("IPVc",tax1acc,"",dc1,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,tax1acc,"","",tstr,IPrw.TAX1Sum,baserate1,baserate2,false,dc1,TotSum,false,taccnumber,"","");         
      end;      
    end;
    if (IPrw.stp==kReceiptRowTypeNormal) then begin
      res = PostWithholdingTaxes(gTRp,IVr,IPrw,baserate1,baserate2,dc1,dc2,TotSum);
      if (res!=0) then begin
        goto LMakeTransFromIP2;
      end;      
    end;
  end;
  trrwcnt = MatRowCnt(gTRp);
/*  now it is per row to get objects working
  if (rategain<0) then begin
    if (GetAccName(ARAccb.RateGainAcc,tstr,60)==false) then begin
      res = 1917;
      goto LMakeTransFromIP2;
    end;
    AddEuroCurncyTrRow(gTRp,ARAccb.RateGainAcc,"","",tstr,rategain,true,dc2,TotSum,
                         bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rategain2,blankval,-1,false,""); //trrwcnt-2);
  end;
  if (rateloss>0) then begin
    if (GetAccName(ARAccb.RateLossAcc,tstr,60)==false) then begin
      res = 1917;
      goto LMakeTransFromIP2;
    end;
    AddEuroCurncyTrRow(gTRp,ARAccb.RateLossAcc,"","",tstr,rateloss,true,dc2,TotSum,
                         bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rateloss2,blankval,-1,false,""); //trrwcnt-2);
  end;
*/  
  if (prepvatflag==false) then begin
//  if (booked!=0) and (GetVATLaw!=32) then begin
  if (HasLocalization("RUS")==false) then begin
    if (transtocreate==1) then begin
      BlockLoad(VATCodeRec);
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(IPp,i,IPrw);
        if (IPrw.ovst==0) then begin
          res = DoBookIPVAT(gTRp,IPp,i,ARAccb,VATCodeRec,IVr,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,dc1,dc2,TotSum);
          if (res!=0) then begin
            goto LMakeTransFromIP2;
          end;
        end;
      end;
    end;
  end;
  end;
  if (TotSum!=0) then begin
    rs = TotSum;
/*
gain calculated in difrent place
    if (TotSum>0) then begin
      if (GetAccName(ARAccb.BankRateGainAcc,tstr,60)) then begin
        AddEuroTrRow(gTRp,ARAccb.BankRateGainAcc,"","",tstr,rs,baserate1,baserate2,true,false,TotSum,false,"","","");
      end;
    end else begin
      if (GetAccName(ARAccb.BankRateLossAcc,tstr,60)) then begin
        AddEuroTrRow(gTRp,ARAccb.BankRateLossAcc,"","",tstr,rs,baserate1,baserate2,true,false,TotSum,false,"","","");
      end;
    end;
*/    
    TotSum = Round(gTRp.DiffVal,SetRoundModeD(2));
    if (TotSum!=0) then begin
      if (GetAccName(ARAccb.RateRndOffAcc,tstr,60)==false) then begin
        res = 1904;
        goto LMakeTransFromIP2;
      end;
      AddEuroTrRow(gTRp,ARAccb.RateRndOffAcc,"","",tstr,rs,baserate1,baserate2,true,dc1,TotSum,false,"","","");
    end;  
  end;
  AddTransAutoTransRows(gTRp);
  res = 0;
LMakeTransFromIP2:;
  MakeTransFromIP2 = res;
  RETURN;
END;

global
function Integer MakeTransFromIP(var record TRVc gTRp,var record IPVc IPp,Boolean rpt,var Integer errrownr,var string errfield)
BEGIN
  Integer transtocreate;
  Integer res;

  transtocreate = 1;
  res = MakeTransFromIP2(gTRp,IPp,rpt,transtocreate,errrownr,errfield);
  MakeTransFromIP = res;
  RETURN;
END;

