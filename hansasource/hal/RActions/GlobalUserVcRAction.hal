remote function Integer GetGlobalUserRow(string,string,var string,var string);
external updating procedure CheckUserAdminStatus(Integer,Integer,string);
external function Boolean CheckEmailStr(string);

global
function LongInt GlobalUserVcRecordInIndex(record GlobalUserVc Userr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (Userr.Closed!=0) then begin 
    if (indexname=="ActCode")  then begin res = 0; end;
    if (indexname=="ActName")  then begin res = 0; end;
    if (indexname=="OneFunction")  then begin res = 0; end;
  end;
  GlobalUserVcRecordInIndex = res;
  RETURN;
END;

global
function LongInt GlobalUserVcRecordDefaults(var record GlobalUserVc Userr,record GlobalUserVc User2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record GlobalCRMBlock GCRMb;
  
  BlockLoad(GCRMb);
  Userr.NewPassWord = 0;
  Userr.MainCRMCompany = GCRMb.MainCRMCompany;
  Userr.ExtraCRMCompanies = GCRMb.ExtraCRMCompanies;
  GlobalUserVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt GlobalUserVcRecordDuplicate(var record GlobalUserVc Userr,record GlobalUserVc User2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  Userr.NewPassWord = 0;
  Userr.Newf = 0;
  Userr.RegistrationNumber = -1;

  GlobalUserVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt GlobalUserVcRecordCheck(record GlobalUserVc Userr,record GlobalUserVc User2r,LongInt stat,LongInt long4)
BEGIN
  row GlobalUserVc Userrw;
  row GlobalUserVc User2rw;
  record ModuleBlock mt;
  Integer i,j,rwcnt;
  LongInt res;
  string 60 compname,accessgroup;

  BlockLoad(mt);
  res = 0;
  if (len(Userr.Code)<1) then begin
    RecordCheckError(1058,"",-1,"Code");      
    res = -1;
    goto LGlobalUserVcRecordCheck;
  end;
  if ((Userr.TypeOfUser==1) or (mt.AllConcurrent!=0)) then begin
    if (nonblank(Userr.OneFunction)) then begin
      RecordCheckError(1484,"",-1,"OneFunction");      
      res = -1;
      goto LGlobalUserVcRecordCheck;
    end;
  end;
  if (nonblank(Userr.LoginEmailAddr)) then begin
    if (CheckEmailStr(Userr.LoginEmailAddr)==false) then begin
      RecordCheckError(31342,"",-1,"LoginEmailAddr");
      res = -1;
      goto LGlobalUserVcRecordCheck;
    end;
  end;
  rwcnt = MatRowCnt(Userr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Userr,i,Userrw);
    if (GetGlobalUserRow(Userr.Code,Userrw.CompCode,compname,accessgroup)<0) then begin
      RecordCheckError(1465,"",i,"CompCode");      
      res = -1;
      goto LGlobalUserVcRecordCheck;
    end;
    for (j=i+1;j<rwcnt;j=j+1) begin
      MatRowGet(Userr,j,User2rw);
      if (Userrw.CompCode==User2rw.CompCode) then begin
        RecordCheckError(1545,"",j,"CompCode");      
        res = -1;
        goto LGlobalUserVcRecordCheck;
      end;
    end;
  end;
LGlobalUserVcRecordCheck:;
  GlobalUserVcRecordCheck = res;
  RETURN;
END;

global
function LongInt GlobalUserVcRecordSave(var record GlobalUserVc Userr,record GlobalUserVc User2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  Userr.DateCreated = CurrentDate;
  Userr.Newf = 1;
  GlobalUserVcRecordSave = res;  
  RETURN;
END;

updating procedure CloseUsers(string user)
begin
  record UserVc Userr;
  record UserVc oUserr;
  Integer curcomp;
  Integer i,rwcnt;
  record CompaniesBlock Compb;
  row CompaniesBlock comprw;
  
  BlockLoad(Compb);
  curcomp = CurrentCompany;
  rwcnt = MatRowCnt(Compb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Compb,i,comprw);
    if (SetCompanyCode(comprw.CompCode,false)) then begin
      Userr.Code = user;
      if (ReadFirstMain(Userr,1,true)) then begin
        RecordCopy(oUserr,Userr);
        Userr.Closed = 1;
        RecordUpdate(oUserr,Userr,true);
      end;
    end;
  end;
  ResetCompany(curcomp);
  return;
end;

global
updating function LongInt GlobalUserVcRecordSaveAfter(var record GlobalUserVc GUserr,record GlobalUserVc GUser2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  if (GUserr.Closed!=0) then begin
    CloseUsers(GUserr.Code);
  end;
  CheckUserAdminStatus(GUserr.AdminFlag,0,GUserr.Code);

  GlobalUserVcRecordSaveAfter = res;
  return;
end;
      
global
updating function LongInt GlobalUserVcRecordUpdateAfter(var record GlobalUserVc GUserr,record GlobalUserVc GUser2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  if (GUserr.Closed!=0) and (GUser2r.Closed==0) then begin
    CloseUsers(GUserr.Code);
  end;
  CheckUserAdminStatus(GUserr.AdminFlag,GUser2r.AdminFlag,GUserr.Code);

  GlobalUserVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt GlobalUserVcRecordImport(var record GlobalUserVc GlobalUserr,record GlobalUserVc GlobalUser2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  if (IsStandardProduct) then begin
    if (GlobalUserr.TypeOfUser==kTypeOfUserNamed) then begin
      GlobalUserr.TypeOfUser = kTypeOfUserConcurrent;
    end;
  end;

  GlobalUserVcRecordImport = res;
  return;
end;
      
global 
function Boolean GlobalUserVcRecordShouldBeSynchronised(record GlobalUserVc Userr,string tagstr)
begin
  Boolean res;
  
  res = true;
  GlobalUserVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean GlobalUserVcRecordSync(record GlobalUserVc Userr,string tagstr)
begin
  Boolean res;
  
  res = true;
  GlobalUserVcRecordSync = res;
  return;
end;

