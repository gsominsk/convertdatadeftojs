external procedure B1ToB2StrValRM(string,val,val,var string,roundmode);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external procedure B1ToB2StrVal(string,val,val,var string);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function Integer SerialNrOnThisPrelPU(record PrelPUVc,string,string);
external function Boolean SerialNrAvail2(string,string,val);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external function Integer CheckPosition(string,string,Integer,val,val,val);
external function Boolean IsOffice(Boolean);
external function Integer CheckObjs(string,string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestPrelPUVc(LongInt,Date,var Boolean);
external function LongInt GetCurUserLastNr(string);
external procedure PrelPUSumUp(var record PrelPUVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);

procedure PrelPUVcConvertB1ToB2(var record PrelPUVc PrelPUp,string curp,val frp,var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN
  row PrelPUVc PrelPUrw;
  Integer rwcnt,i;
  val fr,to1,to2,br1,br2;
  string 20 curncy;
  Boolean base2inv;
  Boolean treated;
  Date curdate;
  val t;
  string 255 tstr;

  curdate = CurrentDate;
  curncy = curp;
  GetFullCurncyRate(curncy,curdate,fr,to1,to2,br1,br2);
  if (curncy==curp) then begin base2inv = true; end;
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  rwcnt = MatRowCnt(PrelPUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPUp,i,PrelPUrw);
    B1ToB2StrValRM(PrelPUrw.Extra,br1p,br2p,tstr,GetCostRoundModeRB);
    PrelPUrw.Extra = tstr;
    B1ToB2ValRM(PrelPUrw.CostPrice,br1p,br2p,t,GetCostRoundModeRB);
    PrelPUrw.CostPrice = t;
    B1ToB2ValRM(PrelPUrw.ShipCost,br1p,br2p,t,GetCostRoundModeRB);
    PrelPUrw.ShipCost = t;
    B1ToB2ValRM(PrelPUrw.RowCost1,br1p,br2p,t,GetCostRoundModeRB);
    PrelPUrw.RowCost1 = t;
    B1ToB2ValRM(PrelPUrw.RowCost2,br1p,br2p,t,GetCostRoundModeRB);
    PrelPUrw.RowCost2 = t;
    B1ToB2ValRM(PrelPUrw.RowCost3,br1p,br2p,t,GetCostRoundModeRB);
    PrelPUrw.RowCost3 = t;
    B1ToB2ValRM(PrelPUrw.RowCost4,br1p,br2p,t,GetCostRoundModeRB);
    PrelPUrw.RowCost4 = t;
    B1ToB2ValRM(PrelPUrw.RowCost5,br1p,br2p,t,GetCostRoundModeRB);
    PrelPUrw.RowCost5 = t;
    B1ToB2StrValRM(PrelPUrw.CustomsCost,br1p,br2p,tstr,GetCostRoundModeRB);
    PrelPUrw.CustomsCost = tstr;
    MatRowPut(PrelPUp,i,PrelPUrw);
  end;
  RETURN;
END;

global
function LongInt PrelPUVcRecordDefaults(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
    
  PrelPUr.RegDate = CurrentDate;
  PrelPUr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    PrelPUr.SerNr = NextSerNr("PrelPUVc",PrelPUr.TransDate,-1,false,"");
  end;
  PrelPUr.PONr = -1;
  PrelPUr.POCOSerNr = -1;
  curcode = PrelPUr.CurncyCode;
  GetFullCurncyRate(curcode,PrelPUr.TransDate,fr,to1,to2,br1,br2);
  PrelPUr.CurncyCode = curcode;
  PrelPUr.FrRate = fr;
  PrelPUr.ToRateB1 = to1; 
  PrelPUr.ToRateB2 = to2;
  PrelPUr.BaseRate1 = br1;
  PrelPUr.BaseRate2 = br2;
  GetCurUser(Userr);
  PrelPUr.Location = Userr.Location;
  PrelPUVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt PrelPUVcRecordDuplicate(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row PrelPUVc PrelPUrw;   
  Integer rwcnt,i;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
      
  PrelPUr.PONr = -1;
  PrelPUr.OKFlag = 0;
  rwcnt = MatRowCnt(PrelPUr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(PrelPUr,i,PrelPUrw);
    PrelPUrw.OrdRow = -1;
    PrelPUrw.RowPONr = -1;
    MatRowPut(PrelPUr,i,PrelPUrw);
  end;
  if (SingleUserMode) then begin
    PrelPUr.SerNr = NextSerNr("PrelPUVc",PrelPUr.TransDate,-1,false,"");
  end;
  curcode = PrelPUr.CurncyCode;
  GetFullCurncyRate(curcode,PrelPUr.TransDate,fr,to1,to2,br1,br2);
  PrelPUr.CurncyCode = curcode;
  PrelPUr.FrRate = fr;
  PrelPUr.ToRateB1 = to1; 
  PrelPUr.ToRateB2 = to2;
  PrelPUr.BaseRate1 = br1;
  PrelPUr.BaseRate2 = br2;
  PrelPUSumUp(PrelPUr); 
  PrelPUVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt PrelPUVcRecordRemoveTest(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (PrelPUr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 0;
    goto LPrelPUVcRecordRemoveTest;
  end;
  if (PrelPUr.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LPrelPUVcRecordRemoveTest:;
  PrelPUVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt PrelPUVcRecordReset(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
  PrelPUr.OKFlag = 0;
  PrelPUVcRecordReset = res; 
  RETURN;
END;

global
function LongInt PrelPUVcRecordSave(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (PrelPUr.OKFlag!=0) then begin
  end;
  PrelPUVcRecordSave = res;
  RETURN;
END;

global
function LongInt PrelPUVcRecordSaveAfter(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  PrelPUVcRecordSaveAfter = res;
  RETURN;
END;

global
function LongInt PrelPUVcRecordUpdate(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  PrelPUVcRecordUpdate = res;
  RETURN;
END;

global
function LongInt PrelPUVcRecordRemove(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  PrelPUVcRecordRemove = res;
  RETURN;
END;

global
function LongInt PrelPUVcRecordCheck(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record PrelPUVc localPrelPUr;
  record INVc INr;
  record LocationVc LocRec;
  record MainStockBlock MainStockRec;
  record SRBlock SRRec;
  row PrelPUVc PrelPUrw;
  row PrelPUVc PrelPU2rw;
  Integer rwcnt;
  Integer i,j;
  LongInt oldnr;
  LongInt newnr;
  Boolean transf,gentrans;
  val t;
  Integer insertmode,updatemode;
  Integer errcode;
  LongInt sernr;
  string 255 errstr;
  string 20 location;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  transf = false;
  if (PrelPUr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (PrelPU2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  BlockLoad(SRRec);
  BlockLoad(MainStockRec);
  oldnr = PrelPUr.SerNr;
  if (PrelPUr.SerNr<=0) then begin
    newnr = GetCurUserLastNr("PrelPUVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastPurNr;
    end;
    PrelPUr.SerNr = NextSerNr("PrelPUVc",PrelPUr.TransDate,newnr,false,"");
  end;
  
  if ((stat==insertmode) or (PrelPUr.SerNr!=PrelPU2r.SerNr)) then begin
    localPrelPUr.SerNr = PrelPUr.SerNr;
    if (ReadFirstMAin(localPrelPUr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
  end;
  if (SerNrTestPrelPUVc(PrelPUr.SerNr,PrelPUr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto L99PrelPUVcRecordCheck;
  end;
  if (Date2Test("PUVc",PrelPUr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto L99PrelPUVcRecordCheck;
  end; 
  if (DisallowFutureDateCheck(true,PrelPUr.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto L99PrelPUVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("PrelPUOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"PrelPUOK"),-1,"SerNr");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
  end;  
  LocRec.Code = PrelPUr.Location;
  if (nonblank(PrelPUr.Location)) then begin
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      RecordCheckError(1120,PrelPUr.Location,-1,"Location");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
  end else begin
    if (MainStockRec.requireLocation==0) then begin
      LocRec.Code = MainStockRec.MainStock;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
      end;
    end else begin
      RecordCheckError(1058,PrelPUr.Location,-1,"Location");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
  end;
  if (nonblank(PrelPUr.Objects)) then begin     
    errcode = CheckObjs("",PrelPUr.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
  end;    
  rwcnt = MatRowCnt(PrelPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPUr,i,PrelPUrw);
    if (blank(PrelPUrw.ArtCode)) then begin
      RecordCheckError(1130,"",i,"ArtCode");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
    if (ReadFirstItem(PrelPUrw.ArtCode,INr,true,true)==false) then begin
      RecordCheckError(1120,"",i,"ArtCode");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
    if ((HasLocalization("EST")) or (HasLocalization("POL"))) then begin//vatEstonian,vatPolish
      if (INr.ItemType!=1) then begin
        RecordCheckError(1301,"",i,"ArtCode");      
        res = -1;
        goto L99PrelPUVcRecordCheck;
      end;
    end;
    if (CheckAllowedSize(INr,PrelPUrw.UnitXval,PrelPUrw.UnitYval,PrelPUrw.UnitZval)==false) then begin
      RecordCheckError(1480,"",i,"UnitXval");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
    if (nonblank(PrelPUrw.Objects)) then begin 
      errcode = CheckObjs("",PrelPUrw.Objects,errstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,i,"Objects");      
        res = -1;
        goto L99PrelPUVcRecordCheck;
      end;
    end;
    if (PrelPUrw.Quant==blankval) then begin
      RecordCheckError(1058,"",i,"Quant");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
    if (INr.ItemType==2) then begin
      RecordCheckError(1826,"",i,"ArtCode");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;
    errcode = CheckPosition(PrelPUrw.PosCode,location,LocRec.RequirePos,INr.Width*PrelPUrw.Quant,INr.Height*PrelPUrw.Quant,INr.Depth*PrelPUrw.Quant);
    if (errcode!=0) then begin
      RecordCheckError(errcode,PrelPUrw.PosCode,i,"PosCode");      
      res = -1;
      goto L99PrelPUVcRecordCheck;
    end;    
    if (nonblank(LocRec.Code)) then begin
      if (LocRec.RequirePos!=0) then begin
        if (blank(PrelPUrw.PosCode)) then begin
          RecordCheckError(1854,"",i,"PosCode");      
          res = -1;
          goto L99PrelPUVcRecordCheck;
        end;  
      end;  
    end;          
    if (transf) then begin    
      if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
        if (IsSerialNrCorrect(PrelPUrw.SerialNr)==false) then begin
          RecordCheckError(24154,PrelPUrw.SerialNr,i,"SerialNr");      
          res = -1; 
          goto L99PrelPUVcRecordCheck;
        end;
        if (PrelPUrw.Quant==0) then begin
          if (blank(PrelPUrw.SerialNr)) then begin
            RecordCheckError(1239,"",i,"SerialNr");      
            res = -1;
            goto L99PrelPUVcRecordCheck;
          end;
        end;
        if (Mid(PrelPUrw.SerialNr,len(PrelPUrw.SerialNr),1)==" ") then begin
          RecordCheckError(1239,"",i,"SerialNr");      
          res = -1;
          goto L99PrelPUVcRecordCheck;
        end;
        switch (INr.SerNrf) begin
          case 1:  // serial nr. 
            // is the serial number available at any location 
            for (j=0;j<i;j=j+1) begin              
              MatRowGet(PrelPUr,j,PrelPU2rw);
              if ((PrelPUrw.ArtCode==PrelPU2rw.ArtCode) and
                  (PrelPUrw.SerialNr==PrelPU2rw.SerialNr)) then begin
                RecordCheckError(1241,"",i,"SerialNr");      
                res = -1;
                goto L99PrelPUVcRecordCheck;
              end;
            end;
            if (SerialNrAvail2(PrelPUrw.ArtCode,PrelPUrw.SerialNr,PrelPUrw.Quant)==true) then begin
              RecordCheckError(1241,"",i,"SerialNr");      
              res = -1;
              goto L99PrelPUVcRecordCheck;
            end;
            if (PrelPUrw.Quant>1) then begin
              RecordCheckError(1242,"",i,"Quant");      
              res = -1;
              goto L99PrelPUVcRecordCheck;
            end;
            if (SerialNrOnThisPrelPU(PrelPUr,PrelPUrw.ArtCode,PrelPUrw.SerialNr)>1) then begin
              RecordCheckError(1242,"",i,"Quant");      
              res = -1;
              goto L99PrelPUVcRecordCheck;
            end;
          case 2:  ;// batch nr. 
        end;
      end;
    end;
  end;  
L99PrelPUVcRecordCheck:;
  if (res!=0) then begin PrelPUr.SerNr = oldnr; end;
  PrelPUVcRecordCheck = res;
  RETURN;
END;

global
function LongInt PrelPUVcRecordImport(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ConvMasterBlock cvm;
  Boolean gToDualBase,gBase1ToBase2;
  val fr,to1,to2,br1,br2,t;
  string 10 curncy;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    curncy = PrelPUr.CurncyCode;
    fr = PrelPUr.FrRate;
    to1 = PrelPUr.ToRateB1;
    to2 = PrelPUr.ToRateB2;
    br1 = PrelPUr.BaseRate1;
    br2 = PrelPUr.BaseRate2;
    ConvertToDualBase(curncy,PrelPUr.TransDate,fr,to1,
                      to2,br1,br2,t,false);
    PrelPUr.CurncyCode = curncy;
    PrelPUr.FrRate = fr;
    PrelPUr.ToRateB1 = to1;
    PrelPUr.ToRateB2 = to2;
    PrelPUr.BaseRate1 = br1;
    PrelPUr.BaseRate2 = br2;
  end;
  if (gBase1ToBase2) then begin
    to1 = PrelPUr.ToRateB1;
    to2 = PrelPUr.ToRateB2;
    br1 = PrelPUr.BaseRate1;
    br2 = PrelPUr.BaseRate2;
    PrelPUVcConvertB1ToB2(PrelPUr,PrelPUr.CurncyCode,PrelPUr.FrRate,to1,to2,br1,br2);    
    PrelPUr.ToRateB1 = to1;
    PrelPUr.ToRateB2 = to2;
    PrelPUr.BaseRate1 = br1;
    PrelPUr.BaseRate2 = br2;
    PrelPUSumUp(PrelPUr);
  end;
  PrelPUVcRecordImport = res;
  RETURN;
END;

/* not possible
global
function LongInt PrelPUVcRecordTransDateOff(var record PrelPUVc PrelPUr,record PrelPUVc PrelPU2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
  PrelPUVcRecordTransDateOff = res; 
  RETURN;
END;
*/
