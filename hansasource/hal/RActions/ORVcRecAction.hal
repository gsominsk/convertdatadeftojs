external procedure AutomatedSales(string,Integer);
external function string 60 AddStringToStringList(string,string);
external function Boolean FindTheUser(var record UserVc);
external updating procedure DeletePlannedPayment(string,LongInt,LongInt);
external updating procedure ORCreatePlannedPayment(record ORVc);
external procedure ReplacePerceptionTaxesRows_ORVc(var record ORVc);
external function string 255 UpdateOfficialSerNrSerie(Integer,Integer,Integer,string,boolean);
external function integer CheckAddressForLocalisation(string,string,string,string,string,string,string,string,string,string,string,var string);
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external function Boolean IsPostcodeFormatCorrect(string);
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Integer CheckSerialatPositionInItemHist(string,string,string,string,val);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external procedure GetBaseCurncy(Integer,var string);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Integer VerifyTaxTemplateCode(string,var string);
external function Boolean TestNextOfficialSerialNr_ORVc(row LegalInvNrBlock,string,record ORVc,Boolean);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function Integer IsUnOKAllowed_ORVc(record ORVc);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external procedure FindNextORVcOfficialSerialNr(var record ORVc);
external function Integer VerifySalesmen(string,var string);
external function Boolean AcceptanceRulesExists(Integer,string);
external function Boolean UseTaxTemplatesforTaxCalc();
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external updating function Boolean BA_ORMinMarkupWarning(record ORVc,var Integer);
external function Boolean ReadFirstItemInclClosed(string,var record INVc,Boolean,Boolean);
external function Boolean ValidEInvoiceData_OR(record ORVc,record CUVc,var Integer,var string);
external procedure CalcPrice(val,val,val,var val,Integer);
external function Boolean AllowedToTakeFromThisLoc(record LocationVc);
external function Boolean IsVATCodeDefined(string);
external function Boolean VATAccIsClosed(string,var string,Integer);
external updating procedure SMSWhenOR(record ORVc,Integer);
external function val GetORRowReserv(LongInt,string,string,var val,var string,var string,Boolean);
external updating procedure UpdateStockResFromOR(record ORVc);
external function string 255 FindINObjects(string,string);
external procedure ORDchsum(var record ORVc,Integer);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external updating procedure UpdateVARItemsOR(record ORVc);
external function Boolean CheckPDExists(string);
external function Boolean IsRecipeClosed(string);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure RecalculateWeightORVc(var record ORVc,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean GetFirstItem(var string,var record INVc);
external updating procedure CreateActFromOR(record ORVc);
external procedure ORSumup(var record ORVc);
external updating procedure MakeActFromSubSys_ORVc(var record ORVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external procedure ExtractObj(string,var Integer,var string);
external procedure SetORFlags(record ORVc);
external updating procedure UpdateORPlanned(record ORVc,string,Boolean);
external updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external function Boolean CorrectM4ValProc(val);
external function Boolean AllowThisItem(string,string,string,Integer);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external procedure ConvertSalesAcc(var string,Integer);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Boolean GetPD(var record PDVc);
external function Integer CheckObjs(string,string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestORVc(LongInt,Date,var Boolean);
external function LongInt GetCurUserLastNr(string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean ORCheckForSalesmanPrice(record ORVc,Integer,string,string,var string);
external function Boolean INVc_AllowSales(record INVc,var LongInt);

procedure SetORAcceptanceFlag(var record ORVc ORr,record ORVc prevORr,LongInt stat)
begin
  val bc1v;
  Boolean testf;
  
  testf = true;
  switch (stat) begin
    case Rs_update:
      if (prevORr.OKFlag!=0) then begin
        testf = false;
      end;
    otherwise
      ;
  end;
  return;
end;

function Boolean CheckOrderQtys(row ORVc ORrwp,Integer rownr,record ORVc oldORp)
begin
  Boolean res;
  row ORVc oldORrw;
    
  res = true;
  if (rownr<=MatRowCnt(oldORp)) then begin
    MatRowGet(oldORp,rownr,oldORrw);
    if (oldORrw.Quant>=oldORrw.Shipd1) then begin
      if (ORrwp.Quant<oldORrw.Shipd1) then begin
        res = false;
      end;
    end;
  end;  
  CheckOrderQtys = res;
  return;
end;

global
function Integer PayTermType(string paydeal)
begin
  Integer res;
  record PDVc PDr;
  Integer i,mrwcnt;
  record PMBlock PMRec;
  row PMBlock pmrw;
  
  res = 1;
  PDr.Code = paydeal;
  if (blank(paydeal)) then begin
    if (GetPD(PDr)) then begin end;
    res = PDr.PDType;
    goto LPayTermType;
  end;
  if (GetPD(PDr)) then begin
    res = PDr.PDType;
    goto LPayTermType;
  end;

  BlockLoad(PMRec);
  mrwcnt = MatRowCnt(PMRec);
  for (i=0;i<mrwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==paydeal) then begin 
      res = 2;
      goto LPayTermType;
    end;
  end;
LPayTermType:;
  PayTermType = res;
  return;
end;

function Boolean ValidOrderDataForVATLaw_Portuguese(record ORVc ORr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  val rval,rvalb1;
  Boolean testf;
  record CountryVc Countryr;
  
  res = true;
  if (blank(ORr.VATNr)) then begin
    errcode = 20275;
    gotofield = "VATNr";
    res = false;
    goto LValidOrderDataForVATLaw_Portuguese;
  end;
  
  testf = true;
  if (ORr.VATNr=="999999990") then begin testf = false; end;
  if (CUr.CustType==1) then begin
    if (ORr.Sum1<=1000) then begin
      if (blank(ORr.Addr1) and blank(ORr.Addr2) and blank(ORr.Addr3) and blank(ORr.InvAddr3) and blank(ORr.InvAddr4)) then begin
        testf = false;
      end;
    end;
  end;
  if (testf) then begin
    testf = false;
    if (blank(ORr.Addr1) and blank(ORr.Addr2)) then begin
      gotofield = "Addr1";
      testf = true;
    end;
    if (blank(ORr.Addr3)) then begin
      gotofield = "Addr3";
      testf = true;
    end;
    if (blank(ORr.InvAddr3)) then begin
      gotofield = "InvAddr3";
      testf = true;
    end;
    if (blank(ORr.InvAddr4)) then begin
      gotofield = "InvAddr4";
      testf = true;
    end;
    if (testf) then begin
      errcode = 20276;
      res = false;
      goto LValidOrderDataForVATLaw_Portuguese;
    end;
  end;
  if (nonblank(ORr.InvAddr4)) then begin
    Countryr.Comment = ORr.InvAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "InvAddr4";
      goto LValidOrderDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(ORr.InvAddr4)) or (ORr.InvAddr4=="Portugal") then begin
    if (nonblank(ORr.Addr3)) then begin
      if (IsPostcodeFormatCorrect(ORr.Addr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "Addr3";
        goto LValidOrderDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (ORr.VATNr!="999999990") then begin
    if (nonblank(ORr.ShipAddr1) or nonblank(ORr.ShipAddr2) or nonblank(ORr.DelAddr3) or nonblank(ORr.DelAddr4)) then begin
      testf = false;
      if (blank(ORr.ShipAddr1) and blank(ORr.ShipAddr2)) then begin
        gotofield = "ShipAddr1";
        testf = true;
      end;
      if (blank(ORr.ShipAddr3)) then begin
        gotofield = "ShipAddr3";
        testf = true;
      end;
      if (blank(ORr.DelAddr3)) then begin
        gotofield = "DelAddr3";
        testf = true;
      end;
      if (blank(ORr.DelAddr4)) then begin
        gotofield = "DelAddr4";
        testf = true;
      end;
      if (testf) then begin
        errcode = 20276;
        res = false;
        goto LValidOrderDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (nonblank(ORr.DelAddr4)) then begin
    Countryr.Comment = ORr.DelAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "DelAddr4";
      goto LValidOrderDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(ORr.DelAddr4)) or (ORr.DelAddr4=="Portugal") then begin
    if (nonblank(ORr.ShipAddr3)) then begin
      if (IsPostcodeFormatCorrect(ORr.ShipAddr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "ShipAddr3";
        goto LValidOrderDataForVATLaw_Portuguese;
      end;
    end;
  end;
  
LValidOrderDataForVATLaw_Portuguese:;  
  ValidOrderDataForVATLaw_Portuguese = res;
  return;
end;

global
function Boolean ValidOrderDataForVATLaw(record ORVc ORr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  
  res = true;
  if (HasLocalization("PRT")) then begin
    res = ValidOrderDataForVATLaw_Portuguese(ORr,CUr,errcode,gotofield);
  end;
LValidOrderDataForVATLaw:;  
  ValidOrderDataForVATLaw = res;
  return;
end;

function Boolean SOHasOpenDwnPayInvoices(record ORVc ORp,var val TotDownPaymentval)
begin
  record ARVc ARr;
  record IVVc IVr;
  record CUVc CUr;
  Boolean TrHs;
  val fr,to1,to2,br1,br2;
  val rval,rval2;
  string 10 basecur1;  
  Boolean res;
  
  res = false;
  GetBaseCurncy(1,basecur1);
  TotDownPaymentval = blankval;
  ARr.InvoiceNr = 0;
  ARr.CustCode = ORp.CustCode;
  TrHs = true;
  while (LoopKey("CustCode",ARr,2,TrHs)) begin
    IVr.SerNr = ARr.InvoiceNr;
    if (ReadFirstMain(IVr,1,true)) then begin end;
    if ((IVr.InvType==kInvoiceTypeDownpayment) and (IVr.OrderNr==ORp.SerNr)) then begin
      CUr.Code = IVr.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
      end; 
      res = true;
      GetFullCurncyRate(CUr.CurncyCode,CurrentDate,fr,to1,to2,br1,br2);
      if (IVr.CurncyCode==CUr.CurncyCode) then begin
        rval = ARr.RVal;
      end else begin
        if (blank(CUr.CurncyCode)) or (CUr.CurncyCode==basecur1) then begin
          rval = ARr.RVal;
        end else begin
          rval = DivRateToBase1(CUr.CurncyCode,ARr.BookRVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
        end;
      end;      
      TotDownPaymentval = TotDownPaymentval + rval;
    end;
  end;
SOHasOpenDwnPayInvoices = res;
  return;
end;

global
updating function LongInt ORVcRecordCheck(record ORVc ORr,record ORVc OR2r,LongInt stat,LongInt check)
begin
  LongInt res;
  Integer insertmode,updatemode;
  record CreditLimitBlock CLb;
  record AccBlock ARAccRec;
  record SRBlock SRRec;
  record AccVc Accr;
  record ORVc lORr;
  record CUVc CUr;
  record INVc INr;
  record PRVc PRr;
  record ItemStatusVc ISr;
  record MainStockBlock MSb;  
  row ORVc ORrw;
  row ORVc OR2rw;
  Integer i,j,rwcnt,errcode,pt;
  LongInt oldnr,ErrorCode;
  LongInt newnr,l;
  val bal;
  val limit,rsrvd;
  string 255 tstr,errstr;
  Boolean gentrans,transf,unokf,testf,test2f;
  record OrdSettBlock OSb;
  string 20 location,oldOfficialSerNr;
  val orsrv,orsrved;
  record OrderClassVc OCr;
  record DMVc DMr;
  record ShipDealVc ShipDealr;
  record LocationVc Locationr;
  record ModuleBlock OptRec;
  record PlanDeliveryBlock PDb;
  val ordqty;
  string 60 comment;
  record UserVc User,User2;
  Boolean closingf;
  record TaxTemplateVc TTr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Date td;
  Boolean limitdaysf;
  record POVc POr;
  val TotDownPaymentval;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  record OTCheckBlock OTCheckr;
  Boolean initotcheckf;  
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (ORr.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (OR2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_ORVc(ORr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"OrdDate");      
      res = -1; 
    end;
    goto LORVcRecordCheck;
  end;

  if (stat==updatemode) then begin
    if (ORr.SerNr<=0) then begin
      ORr.SerNr = OR2r.SerNr;
    end;
  end; 
  if (ORr.Closed!=0) then begin
    if (stat==updatemode) then begin
      if (OR2r.Closed==0) then begin 
        if (SOHasOpenDwnPayInvoices(ORr,TotDownPaymentval)) then begin 
          RecordCheckError(34502," " & TotDownPaymentval,-1,"CustCode");      
          res = -1;
          goto LORVcRecordCheck;            
        end else begin
          closingf = true;
        end;
      end;
    end;
  end;
  User.Code = CurrentUser;
  FindTheUser(User);
  BlockLoad(ARAccRec);
  BlockLoad(SRRec);
  BlockLoad(MSb);
  BlockLoad(OSb);
  BlockLoad(OptRec);
  BlockLoad(PDb);
  oldnr = ORr.SerNr;
  oldOfficialSerNr = ORr.OfficialSerNr;
  BlockLoad(CLb);
  if ((CLb.ORSave==1) or (CLb.ORSaveWarn==1)) then begin
    CUr.Code = ORr.CustCode;
    if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
      if (limitdaysf) then begin
        if (CLb.ORSave==1) then begin    
          RecordCheckError(22260,"",-1,"CustCode");      
          res = -1;
          goto LORVcRecordCheck;
        end;
      end;
      if (blank(limit)==false) then begin 
        if (stat==updatemode) then begin
          switch (CLb.Base) begin
            case 0: bal = bal - OR2r.Sum4;
            case 1: ;//nothing
            case 2: bal = bal - OR2r.Sum4;
          end;
        end;
        switch (CLb.Base) begin
          case 0: bal = bal + ORr.Sum4;
          case 1: ;//nothing
          case 2: bal = bal + ORr.Sum4;
        end;
        if (bal>limit) then begin
          if (CLb.ORSave==1) then begin
            if (limit==0.001 and CLb.Base==kCreditLimitBasedOnOpenInvSuspendOnOverdue) then begin
              RecordCheckError(39600,"",-1,"CustCode");
              res = -1;
              goto LORVcRecordCheck;
            end else begin
              RecordCheckError(1164,"",-1,"CustCode");      
              res = -1;
              goto LORVcRecordCheck;
            end;
          end;
          if (CLb.ORSaveWarn==1) then begin
            MessageBox(1164,"");
          end;
        end;
      end;
    end;
  end;
  if (RecordValid(OR2r)) then begin
    if (ORr.OKFlag==1) and (OR2r.OKFlag<>1) then begin
      if (UserCanAction("OROK",true)==false) then begin
        RecordCheckError(1274,StringFromStringSet(3,"OROK"),-1,"SerNr");      
        res = -1;
        goto LORVcRecordCheck;
      end;  
    end;
    if (OR2r.OKFlag!=0) and (ORr.OKFlag==0)  then begin
      if (UserCanAction("UnOKOR",true)==false) and (UserCanAction("UnOKAll",true)==false) then begin
        RecordCheckError(1274,StringFromStringSet(3,"UnOKOR"),-1,"SerNr");      
        res = -1;
        goto LORVcRecordCheck;
      end;
    end;  
  end;
  if (blank(ORr.CustCode)) then begin
    RecordCheckError(1058,"",-1,"CustCode");      
    res = -1;
    goto LORVcRecordCheck;
  end;
  CUr.Code = ORr.CustCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,ORr.CustCode,-1,"CustCode");      
    res = -1;
    goto LORVcRecordCheck;
  end;
  if (CUr.CUType==0) then begin
    RecordCheckError(1120,ORr.CustCode,-1,"CustCode");      
    res = -1; 
    goto LORVcRecordCheck;
  end;
  if (CUr.blockedFlag!=0) then begin
    RecordCheckError(1265,ORr.CustCode,-1,"CustCode");      
    res = -1;
    goto LORVcRecordCheck;
  end;
  if (CheckPDExists(ORr.PayDeal)==false) then begin
    RecordCheckError(1256,"",-1,"PayDeal");      
    res = -1;
    goto LORVcRecordCheck;        
  end;
  switch (stat) begin
    case Rs_update:
      if (ORr.OKFlag!=0) and (OR2r.OKFlag==0) then begin
        ORr.RegDate = CurrentDate;
        ORr.RegTime = CurrentTime;
      end;
    otherwise
      if (ORr.OKFlag!=0) then begin
        ORr.RegDate = CurrentDate;
        ORr.RegTime = CurrentTime;
      end;
  end;

  BlockLoad(LINrb);  
  if (nonblank(ORr.OfficialSerNr)) then begin
    GetLegalInvNrRow(ORr.OfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          ORr.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        if (transf) then begin
          ORr.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          ORr.OfficialSerNr = "";
        end;
    end;
  end;
  if (blank(ORr.OfficialSerNr)) then begin
    FindNextORVcOfficialSerialNr(ORr);
  end;
  if (ValidateOfficialSerialNrChronology("ORVc",ORr.OfficialSerNr,ORr.SerNr,ORr.OrdDate,td)==false) then begin
    RecordCheckError(26201," " & td,-1,"OrdDate");  
    res = -1;
    goto LORVcRecordCheck;
  end;  
  if (nonblank(ORr.OfficialSerNr)) and (MatRowCnt(LINrb)>0) then begin    
    errcode = 0;
    rwcnt = MatRowCnt(LINrb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      test2f = true;
      if (Left(ORr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
      if (test2f) then begin
        testf = true;
        test2f = TestNextOfficialSerialNr_ORVc(LINrbrw,CUr.Classification,ORr,false);
        if (test2f==false) then begin
          errcode = 1557;
          testf = false;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
    if (testf==false) then begin
      RecordCheckError(errcode," " & ORr.OfficialSerNr,-1,"OfficialSerNr");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;

   
  if (nonblank(ORr.PRCode)) then begin
    PRr.Code = ORr.PRCode;
    if (ReadFirstMain(PRr,1,true)) then begin
      if (ORr.CustCode!=PRr.CustCode) then begin
        RecordCheckError(1218,"",-1,"PRCode");      
        res = -1;
        goto LORVcRecordCheck;
      end;
      if (nonblank(PRr.CurncyCode)) then begin
        if (ORr.CurncyCode!=PRr.CurncyCode) then begin
          RecordCheckError(20573,"",-1,"PRCode");      
          res = -1;
          goto LORVcRecordCheck;
        end;
      end;
    end else begin
      RecordCheckError(1232,"",-1,"PRCode");      
      res = -1;
      goto LORVcRecordCheck;
    end;    
    if (PRr.Terminated!=0) then begin
      RecordCheckError(1232,"",-1,"PRCode");      
      res = -1;
      goto LORVcRecordCheck;
    end;        
  end;   
  if (ORr.SerNr<=0) then begin
    newnr = GetCurUserLastNr("ORVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastOrdNr;
    end;
    ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,newnr,false,"");
  end;
  if ((stat==insertmode) or (ORr.SerNr!=OR2r.SerNr)) then begin
    lORr.SerNr = ORr.SerNr;
    if (ReadFirstMain(lORr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LORVcRecordCheck;
    end;
    if (SerNrTestORVc(ORr.SerNr,ORr.OrdDate,gentrans)==false) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;
  if (Date2Test("ORVc",ORr.OrdDate,"OrdDate",-1)==false) then begin
    res = -1;
    goto LORVcRecordCheck;
  end;
  if ((stat==insertmode) or ((stat==updatemode) and (OR2r.OKFlag==0))) then begin
//    if (ORr.OKFlag==1) then begin
      if (BA_ORMinMarkupWarning(ORr,i)) then begin
        if (UserCanAction("DisallowSaleBelowGP",false)) then begin
          RecordCheckError(22050,"",i,"Sum");      
          res = -1;
          goto LORVcRecordCheck;
        end;
      end;
//    end;
  end;
  if (OSb.ReqORClass==1) then begin
    if (blank(ORr.OrderClass)) then begin
      RecordCheckError(20101,"",-1,"OrderClass");
      res = -1;
      goto LORVcRecordCheck;  
    end;
  end;  
  if (OSb.RequireCustOrdNo!=0) then begin
    if (blank(ORr.CustOrdNr)) then begin
      RecordCheckError(2281,"",-1,"CustOrdNr");
      res = -1;
      goto LORVcRecordCheck;  
    end;
  end;  
  if (OSb.RequireDeliveryAddress!=0) then begin
    if (blank(ORr.ShipAddr0)) then begin
      RecordCheckError(1058,"",-1,"ShipAddr0");
      res = -1;
      goto LORVcRecordCheck;  
    end;
  end;  
  if (nonblank(ORr.OrderClass)) then begin
    OCr.Code = ORr.OrderClass;
    if (ReadFirstMain(OCr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"OrderClass");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;
  if (OCr.TREOFlag!=0) then begin
    if (ORr.TREONr<=0) then begin
      RecordCheckError(27370,"",-1,"TREONr");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;
  if (nonblank(ORr.ShipMode)) then begin
    DMr.Code = ORr.ShipMode;
    if (ReadFirstMain(DMr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"ShipMode");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;
  if (nonblank(ORr.ShipDeal)) then begin
    ShipDealr.Code = ORr.ShipDeal;
    if (ReadFirstMain(ShipDealr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"ShipDeal");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;
  if (nonblank(ORr.Location)) then begin
    Locationr.Code = ORr.Location;
    if (ReadFirstMain(Locationr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"Location");      
      res = -1;
      goto LORVcRecordCheck;
    end;
    if (AllowedToTakeFromThisLoc(Locationr)==false) then begin
      RecordCheckError(1768,"",-1,"Location");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;
  switch (stat) begin
    case Rs_update:
      if (UserCanAction("ChangeDropShipOrders",false)==false) then begin
        if (OR2r.OrderType==kOrderTypeDropShip) then begin
          POr.OrdNr = ORr.SerNr;
          if (ReadFirstKey("OrdNr",POr,1,true)) then begin
            RecordCheckError(20848,"",-1,"OrderType");      
            res = -1;
            goto LORVcRecordCheck;
          end;
        end;
      end;
  end;
  errcode = CheckObjs("",ORr.Objects,errstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,errstr,-1,"Objects");      
    res = -1;
    goto LORVcRecordCheck;
  end;
  switch (PayTermType(ORr.PayDeal)) begin
    case kInvoiceTypeCredit:
      RecordCheckError(1227,ORr.PayDeal,-1,"PayDeal");      
      res = -1;
      goto LORVcRecordCheck;
    case kInvoiceTypeEmployee:
      RecordCheckError(1958,"",-1,"PayDeal");      
      res = -1;
      goto LORVcRecordCheck;
  end;
  errcode = CheckVATNrMask(ORr.VATNr,CUr.CountryCode,CUr.CustType,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,tstr,-1,"VATNr");      
    res = -1;
    goto LORVcRecordCheck;
  end;
  if (nonblank(CUr.CurncyCode)) then begin
    if (CUr.CurncyCode!=ORr.CurncyCode) then begin
      RecordCheckError(1217,"",-1,"CurncyCode");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;      
  if (nonblank(ORr.SalesMan)) then begin    
    errcode = VerifySalesmen(ORr.SalesMan,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,": " & tstr,-1,"SalesMan");   
      res = -1; 
      goto LORVcRecordCheck;
    end;
  end;
  errcode = CheckRates(ORr.CurncyCode,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LORVcRecordCheck;
  end;    
  if (HasLocalization("PRT")) then begin
    BlockLoad(CUUerLb);  
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = ORr.Addr0; errstr = "Addr0";
      case kCountryAddrLineUserAddr1: tstr = ORr.Addr1; errstr = "Addr1";
      case kCountryAddrLineUserAddr2: tstr = ORr.Addr2; errstr = "Addr2";
      case kCountryAddrLineUserAddr3: tstr = ORr.InvAddr3; errstr = "InvAddr3";
      case kCountryAddrLineUserAddr4: tstr = ORr.InvAddr4; errstr = "InvAddr4";
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        RecordCheckError(20277,tstr,-1,errstr);      
        res = -1;
        goto LORVcRecordCheck;
      end;
    end;
    if (blank(tstr)) or (tstr=="Portugal") then begin
      if (nonblank(ORr.Addr3)) then begin
        if (IsPostcodeFormatCorrect(ORr.Addr3)==false) then begin
          RecordCheckError(24620,tstr,-1,"Addr3");      
          res = -1;
          goto LORVcRecordCheck;
        end;
      end;
    end;
    
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = ORr.ShipAddr0; errstr = "ShipAddr0";
      case kCountryAddrLineUserAddr1: tstr = ORr.ShipAddr1; errstr = "ShipAddr1";
      case kCountryAddrLineUserAddr2: tstr = ORr.ShipAddr2; errstr = "ShipAddr2";
      case kCountryAddrLineUserAddr3: tstr = ORr.DelAddr3; errstr = "DelAddr3";
      case kCountryAddrLineUserAddr4: tstr = ORr.DelAddr4; errstr = "DelAddr4";
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        RecordCheckError(20277,tstr,-1,errstr);      
        res = -1;
        goto LORVcRecordCheck;
      end;
    end;
    if (blank(tstr)) or (tstr=="Portugal") then begin
      if (nonblank(ORr.ShipAddr3)) then begin
        if (IsPostcodeFormatCorrect(ORr.ShipAddr3)==false) then begin
          RecordCheckError(24620,tstr,-1,"ShipAddr3");      
          res = -1;
          goto LORVcRecordCheck;
        end;
      end;
    end;
  end;
  if (HasLocalization("BRA")) then begin
    if ((CUr.CUType!=0 or CUr.VEType!=0) and (ORr.InvCountry=="1058" or blank(ORr.InvCountry))) then begin 
      errcode = CheckAddressForLocalisation("BRA",ORr.Addr1,"Addr1",ORr.Addr2,"Addr2",ORr.Addr3,"Addr3",ORr.InvAddr3,"InvAddr3",ORr.InvAddr4,"InvAddr4",tstr);
      if (errcode!=0) then begin 
        RecordCheckError(errcode,"",-1,tstr);
        res = -1;
        goto LORVcRecordCheck;      
      end;
    end;
  end;    
  if (ORr.OKFlag!=0 and OR2r.OKFlag==0) then begin
    if (ValidOrderDataForVATLaw(ORr,CUr,errcode,tstr)==false) then begin
      RecordCheckError(errcode,"",-1,tstr);      
      res = -1; 
      goto LORVcRecordCheck;
    end;   
  end;
  if (HasLocalization("PRT")) then begin 
    if (blank(ORr.OfficialSerNrSerie)) then begin 
      ORr.OfficialSerNrSerie = UpdateOfficialSerNrSerie(stat,ORr.OKFlag,OR2r.OKFlag,ORr.OfficialSerNr,true);
    end;
  end;
  transf = false;
  if (ORr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (OR2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (transf) then begin
    if (HasLocalization("PRT")) then begin
      if (blank(ORr.OfficialSerNr)) then begin
        RecordCheckError(1058,"",-1,"OfficialSerNr");  
        res = -1;
        goto LORVcRecordCheck;
      end;
    end;
  end;
  if (ORr.ExportFlag==0) then begin
    if (UserCanAction("DisallowDomSales",false)) then begin
      RecordCheckError(20056,"",-1,"CustCode");   
      res = -1; 
      goto LORVcRecordCheck;
    end; 
  end;
  if (ORr.ExportFlag!=0) then begin
    if (UserCanAction("DisallowExpSales",false)) then begin
      RecordCheckError(20049,"",-1,"CustCode");   
      res = -1; 
      goto LORVcRecordCheck;
    end; 
  end;
  if (transf) then begin
    if (UserCanAction("OROK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"OROK"),-1,"SerNr");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;  
  if (ValidEInvoiceData_OR(ORr,CUr,errcode,tstr)==false) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LORVcRecordCheck;
  end;
  if (transf) then begin
    if (ARAccRec.DisallowNegativeTotalsonSales!=0) then begin
      if (ORr.Sum4<0) then begin
        RecordCheckError(22047,"",0,"Sum");      
        res = -1; 
        goto LORVcRecordCheck;
      end;
    end;
  end;

  rwcnt = MatRowCnt(ORr);
  if (transf) then begin
    if (rwcnt==0) then begin
      RecordCheckError(1030,"",0,"ArtCode");      
      res = -1;
      goto LORVcRecordCheck;
    end;
  end;

  if (stat==Rs_update) then begin
    rwcnt = MatRowCnt(OR2r);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OR2r,i,OR2rw);
      if (OR2rw.Shipd1!=0) then begin
        if (i<MatRowCnt(ORr)) then begin
          MatRowGet(ORr,i,ORrw);
//          if (ORrw.ArtCode!=OR2rw.ArtCode or ORrw.Location!=OR2rw.Location or ORrw.OrderType!=OR2rw.OrderType or ORrw.Quant<ORrw.Shipd1) then begin
//what about allow overdelivery ? 
          if (ORrw.ArtCode!=OR2rw.ArtCode or ORrw.Location!=OR2rw.Location or ORrw.OrderType!=OR2rw.OrderType) then begin
//          if (CompareRows(ORr,OR2rw,ORrw)==false) then begin
            RecordCheckError(1304,"",i,"ArtCode");      
            res = -1;
            goto LORVcRecordCheck;
          end;
        end;
      end;
    end;
  end;

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (IsStandardProduct) then begin
      if (HasLocalization("POL")) then begin
        if (len(ORrw.Spec)>35) then begin
          RecordCheckError(22139,"",i,"Spec");      
          res = -1;
          goto LORVcRecordCheck;
        end;
      end;
    end;
    switch (ORrw.stp) begin
      case 1:
        if (nonblank(ORrw.Spec) and blank(ORrw.ArtCode) and blank(ORrw.Quant)) then begin
          goto LORVcRecordRowCheck;
        end;
        if (HasIntegratedNL) then begin
          if (ARAccRec.VATCodeCtrl==1) then begin
            Accr.AccNumber = ORrw.SalesAcc;
            if (blank(Accr.AccNumber)) then begin
              //Get Account from setting ? 
            end;
            if (ReadFirstMain(Accr,1,true)) then begin
              if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=ORrw.VATCode)) then begin
                RecordCheckError(1245,"",i,"VATCode");      
                res = -1;
                goto LORVcRecordCheck;
              end;
            end else begin
              tstr = ORrw.SalesAcc;
              ConvertSalesAcc(tstr,ORr.ExportFlag);
              Accr.AccNumber = tstr;
              if (ReadFirstMain(Accr,1,true)) then begin
                if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=ORrw.VATCode)) then begin
                  RecordCheckError(1245,"",i,"VATCode");      
                  res = -1;
                  goto LORVcRecordCheck;
                end;
              end;
            end;
          end else begin
            if (nonblank(ORrw.SalesAcc)) then begin
              Accr.AccNumber = ORrw.SalesAcc;
              if (ReadFirstMain(Accr,1,true)==false) then begin
                RecordCheckError(1931,"",i,"SalesAcc");      
                res = -1;
                goto LORVcRecordCheck;
              end;
            end;
          end;
        end;
        if (VATAccIsClosed(ORrw.VATCode,tstr,1)) then begin
          RecordCheckError(1258,tstr,i,"VATCode");      
          res = -1; 
          goto LORVcRecordCheck;
        end;          
        if ((nonblank(ORrw.VATCode)) and (IsVATCodeDefined(ORrw.VATCode)==false)) then begin
          RecordCheckError(1120,ORrw.VATCode,i,"VATCode");      
          res = -1; 
          goto LORVcRecordCheck;
        end;
        if (transf) then begin
          if (ARAccRec.DisallowNegativeRowSumsonSales!=0) then begin
            if (ORrw.Sum<0) then begin
              RecordCheckError(22047,"",i,"Sum");      
              res = -1; 
              goto LORVcRecordCheck;
            end;
          end;
        end;
        if (nonblank(ORrw.Location)) then begin
          Locationr.Code = ORrw.Location;
          if (ReadFirstMain(Locationr,1,true)==false) then begin
            RecordCheckError(1290,"",i,"Location");      
            res = -1;
            goto LORVcRecordCheck;
          end;
          if (AllowedToTakeFromThisLoc(Locationr)==false) then begin
            RecordCheckError(1768,"",i,"Location");      
            res = -1;
            goto LORVcRecordCheck;
          end;
        end;
        if (nonblank(ORrw.Salesmen)) then begin    
          errcode = VerifySalesmen(ORrw.Salesmen,tstr);
          if (errcode!=0) then begin
            RecordCheckError(errcode,": " & tstr,i,"Salesmen");
            res = -1; 
            goto LORVcRecordCheck;
          end;
        end;
        if (nonblank(ORrw.RvrsVATCode)) then begin
          if (blank(ORr.VATNr)) then begin
            RecordCheckError(1058,"",-1,"VATNr");
            res = -1; 
            goto LORVcRecordCheck;
          end;
        end;
        if (nonblank(ORrw.ArtCode)) then begin
          if (HasLocalization("PRT")) then begin
            if (ORrw.vRebate<0) then begin
              RecordCheckError(22034,"",i,"vRebate");      
              res = -1; 
              goto LORVcRecordCheck;
            end;
          end;
          if (ReadFirstItemInclClosed(ORrw.ArtCode,INr,true,true)==false) then begin
            RecordCheckError(1120,ORrw.ArtCode,i,"ArtCode");      
            res = -1;
            goto LORVcRecordCheck;
          end;
          if (!INVc_AllowSales(INr,ErrorCode)) then begin
            RecordCheckError(ErrorCode,"",i,"ArtCode");      
            res = -1; 
            goto LORVcRecordCheck;
          end;
          if (closingf==false) then begin
            if (INr.Terminated!=0) then begin
              RecordCheckError(1266,ORrw.ArtCode,i,"ArtCode");      
              res = -1;
              goto LORVcRecordCheck;
            end;
          end;
          if (check!=0) then begin
            if (IsRecipeClosed(INr.Recepy)) then begin
              RecordCheckError(2088,"",i,"ArtCode");      
              res = -1; 
              goto LORVcRecordCheck;
            end;
          end;          
          if (CheckAllowedSize(INr,ORrw.UnitXval,ORrw.UnitYval,ORrw.UnitZval)==false) then begin
            RecordCheckError(1480,ORrw.ArtCode,i,"UnitXval");      
            res = -1;
            goto LORVcRecordCheck;
          end;
          if (IsSerialNrCorrect(ORrw.SerialNr)==false) then begin
            RecordCheckError(24154,ORrw.SerialNr,i,"SerialNr");      
            res = -1; 
            goto LORVcRecordCheck;
          end;
          if (CheckSerialStatus(ORrw.ArtCode,ORrw.SerialNr,tstr)==2) then begin
            RecordCheckError(2210," " & tstr,i,"SerialNr");      
            res = -1;
//            MessageBox(0,tstr);
            goto LORVcRecordCheck;
          end;
          if (AllowThisItem("ORVc",ORr.PRCode,ORrw.ArtCode,INr.ItemType)==false) then begin
            RecordCheckError(1285,ORrw.ArtCode,i,"ArtCode");      
            res = -1;
            goto LORVcRecordCheck;
          end;
          location = ORrw.Location;
          if (blank(location)) then begin
            location = ORr.Location;
          end;          
          if (blank(location)) then begin
            location = MSb.MainStock;
          end;            
          if (StockRecordForLocationAllowed("ORVc",location,ORrw.ArtCode,ORr.OrdDate,ORr.OKFlag,errcode,errstr)==false) then begin
            RecordCheckError(errcode,errstr,i,"ArtCode");      
            res = -1;
            goto LORVcRecordCheck;
          end;
          if (nonblank(ORrw.Position) and nonblank(ORrw.SerialNr)) then begin 
            errcode = CheckSerialatPositionInItemHist(ORrw.ArtCode,location,ORrw.Position,ORrw.SerialNr,ORrw.Quant);
            if (errcode!=0) then begin 
              RecordCheckError(15057," : " & USetStr(12872) & " " & USetStr(16148) ,i,"Position");
              res = -1;
              goto LORVcRecordCheck;
            end;  
          end;   
          if (INr.SerNrf==1) then begin
            l = ORrw.Quant;//ulong64? 
            if (ORrw.Quant-l>0) then begin
              RecordCheckError(20797,"",i,"Quant");
              res = -1;
              goto LORVcRecordCheck;
            end;
          end;
          if (ORr.Reserved!=0) then begin
            if (OSb.dontAllowOverreserving!=0) then begin
              switch (INr.ItemType) begin
                case 1:
                  location = ORrw.Location;
                  if (blank(location)) then begin
                    location = ORr.Location;
                  end;  
                  if (blank(location)) then begin
                    location = MSb.MainStock;
                  end;  
                  orsrv = ORrw.Quant;
                  FindStockValue(ORrw.ArtCode,location,ISr);
                  for (j=0;j<i;j=j+1) begin
                    MatRowGet(ORr,j,OR2rw);
                    if (OR2rw.ArtCode==ORrw.ArtCode) then begin
                      orsrv = orsrv + OR2rw.Quant;
                    end;
                  end;
                  orsrved = 0;
                  if (stat==updatemode) then begin
                    if (RecordValid(OR2r)) then begin
                      if (OR2r.Reserved!=0) then begin
                        for (j=0;j<MatRowCnt(OR2r);j=j+1) begin
                          MatRowGet(OR2r,j,OR2rw);
                          if (OR2rw.ArtCode==ORrw.ArtCode) then begin
                            orsrved = orsrved + OR2rw.Quant;
                          end;
                        end;
                      end;
                    end;
                  end;
                  if ((orsrv)>(ISr.Instock-ISr.RsrvQty+orsrved)) then begin // StockRsrvQty ?
                    RecordCheckError(20011,"",i,"Quant");      
                    res = -1;
                    goto LORVcRecordCheck;
                  end;
                case 2:
//                  checkit
              end;
            end;
          end;
        end else begin
          if (nonblank(ORrw.SerialNr)) then begin
            RecordCheckError(1209,ORrw.SerialNr,i,"SerialNr");      
            res = -1; 
            goto LORVcRecordCheck;
          end;
          if (ORrw.Quant!=0) then begin
            RecordCheckError(1130,ORrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto LORVcRecordCheck;
          end;
        end;
        if (ORrw.Sum!=0) then begin
          if (blank(ORrw.ArtCode)) then begin
            RecordCheckError(1130,ORrw.ArtCode,i,"ArtCode");      
            res = -1;
            goto LORVcRecordCheck;
          end;
//          if (nonblank(ORrw.Objects)) then begin//this check must run even if this field is blank
          VerifyRowObjects("SL",ORr.Objects,ORrw.Objects,ORrw.SalesAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);
          if (errcode!=0) then begin
            RecordCheckError(errcode,errstr,i,"Objects");      
            res = -1;
            goto LORVcRecordCheck;
          end;
//          end;
          if (UseTaxTemplatesforTaxCalc) then begin
            if (blank(ORrw.TaxTemplateCode)) then begin
              RecordCheckError(24201,"",i,"TaxTemplateCode");      
              res = -1;
              goto LORVcRecordCheck;
            end;
            errcode = VerifyTaxTemplateCode(ORrw.TaxTemplateCode,tstr);
            if (errcode!=0) then begin
              RecordCheckError(errcode,tstr,i,"TaxTemplateCode");      
              res = -1; 
              goto LORVcRecordCheck;
            end;
          end else begin
            if (nonblank(ORrw.RvrsVATCode)) then begin
              if (IsVATCodeDefined(ORrw.RvrsVATCode)==false) then begin
                RecordCheckError(1120,"",i,"RvrsVATCode");      
                res = -1; 
                goto LORVcRecordCheck;
              end;
            end;
            if (blank(ORrw.VATCode)) then begin
              RecordCheckError(1134,"",i,"VATCode");      
              res = -1;
              goto LORVcRecordCheck;
            end;
          end;
        end;
        if (ORrw.Shipd1>0) then begin                      
          if ((MSb.DelOrdQty!=0) and (OR2r.Closed==0)) then begin
            if (CheckOrderQtys(ORrw,i,OR2r)==false) then begin
              RecordCheckError(1302,"",i,"Quant");      
              res = -1;
              goto LORVcRecordCheck;
            end;
          end else begin     
            if ((INr.ItemType!=kItemTypePlain) and (INr.ItemType!=kItemTypeService)) then begin
              if (ORrw.Quant<ORrw.Shipd1) then begin
                RecordCheckError(1302,"",i,"Quant");      
                res = -1;
                goto LORVcRecordCheck;
              end;
            end;
          end;
        end;
        if ((OptRec.NegQtyOnIV==0) or (INr.ItemType==1) or (INr.ItemType==2)) then begin
          if (ORrw.Quant<0) then begin
            RecordCheckError(1574,"",i,"Quant");      
            res = -1;
            goto LORVcRecordCheck;          
          end;
        end;
        if (CorrectM4ValProc(ORrw.vRebate)==false) then begin
          RecordCheckError(1019,"",i,"vRebate");      
          res = -1;
          goto LORVcRecordCheck;
        end;
        if (blank(ORr.PlanShip)) then begin
          if (blank(ORrw.PlanShipRow) and nonblank(ORrw.ArtCode)) then begin
            if (PDb.ForcePlanDelDate!=0) then begin
              RecordCheckError(1058,"",i,"PlanShipRow"); 
              res = -1; 
              goto LORVcRecordCheck;
            end;
          end;
        end;
        tstr = User.MinPLCode;
        if (nonblank(ORrw.DiscApprovedBy)) then begin
          User2.Code = ORrw.DiscApprovedBy;
          if (ReadFirstMain(User2,1,true)) then begin
            tstr = User2.MinPLCode;
          end;
        end;
        if (ORCheckForSalesmanPrice(ORr,i,location,tstr,errstr)==false) then begin 
          RecordCheckError(20116,errstr,i,"Price");      
          res = -1; 
          goto LORVcRecordCheck;
        end;                     
        if (i<MatRowCnt(OR2r)) then begin
          MatRowGet(OR2r,i,OR2rw);
          rsrvd = GetORRowReserv(ORr.SerNr,OR2rw.ArtCode,OR2rw.SerialNr,ordqty,comment,tstr,true);
          if (OR2rw.ArtCode!=ORrw.ArtCode) then begin
            if (rsrvd>0) then begin
              RecordCheckError(20564,"",i,"ArtCode"); 
              res = -1; 
              goto LORVcRecordCheck;
            end;
          end;
          if (ORrw.Quant-ORrw.Shipd1>0) then begin
            if (rsrvd>ORrw.Quant-ORrw.Shipd1) then begin
              RecordCheckError(22067,"",i,"ArtCode"); 
              res = -1; 
              goto LORVcRecordCheck;
            end;
          end;
        end;
    end;
LORVcRecordRowCheck:;
  end;
LORVcRecordCheck:;
  if (res!=0) then begin 
    ORr.SerNr = oldnr; 
    ORr.OfficialSerNr = oldOfficialSerNr;
    ORr.OfficialSerNrSerie = "";
  end;
  ORVcRecordCheck = res;
  return;
end;

function LongInt ORRemoveTest(record ORVc ORp,LongInt errmf)
begin
  record DBLockBlock DBLockRec;
  record SHVc SHr;
  record RetVc Retr;
  row ORVc ORrw;
  LongInt res;
  Boolean shipf;
  Boolean notfullyshpf;
  Integer i,rwcnt;
  record ARPayHistVc ARPayHr;
  record OPPVc OPPr;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  
  res = 1;
  if ((ORp.DownPaySent-ORp.DownPayRedcd)>0) then begin
    if (errmf!=0) then begin MessageBox(20416,""); end;
    res = 0;
    goto LORRemoveTest;
  end;
  SHr.OrderNr = ORp.SerNr;
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.Shipd1>0) then begin
      shipf = true;
      if ((ORrw.Shipd2!=ORrw.Quant) or
          (ORrw.Invd!=ORrw.Quant)) then begin
        notfullyshpf = true;
      end;
    end;
    if (ORrw.Invd>0) then begin
      shipf = true;
      if ((ORrw.Shipd2!=ORrw.Quant) or
          (ORrw.Invd!=ORrw.Quant)) then begin
        notfullyshpf = true;
      end;
    end;
  end;
  Retr.OrdNr = ORp.SerNr;
  if (ReadFirstKey("OrdNr",Retr,1,true)) then begin
    if (errmf!=0) then begin MessageBox(1560,""); end;
    res = 0;
    goto LORRemoveTest;
  end;
  ARPayHr.OrderNr = ORp.SerNr;
  if (ReadFirstKey("OrderNr",ARPayHr,1,true)) then begin
    if (errmf!=0) then begin MessageBox(1876," " & ORp.SerNr); end;
    res = 0;
    goto LORRemoveTest;
  end;
  if (ORp.OKFlag!=0) then begin
    BlockLoad(DBLockRec);
    if (ORp.OrdDate>DBLockRec.DeleteBeforeDate) then begin
      if (errmf!=0) then begin MessageBox(1560,""); end;
      res = 0;
      goto LORRemoveTest;
    end;
  end;
  if (shipf==false) then begin
    goto LORRemoveTest;
  end;
  if (notfullyshpf or shipf) then begin
    if (errmf!=0) then begin MessageBox(1560,""); end;
    res = 0;
    goto LORRemoveTest;
  end;
  actnr = 1;
  while (ReadRecordLink(ORp,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (errmf>0) then begin MessageBox(1560,""); end;
      res = 0;
      goto LORRemoveTest;
    end;
    actnr = actnr + 1;
  end;  
  if (ORp.Closed!=0) then begin
    res = 1;
  end;
LORRemoveTest:;
  ORRemoveTest = res;
  return;
end;

global
function LongInt ORVcRecordRemoveTest(var record ORVc ORr,record ORVc OR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record ORVc locORr;

  locORr.SerNr = ORr.SerNr;
  if (ReadFirstMain(locORr,1,true)) then begin
    res = ORRemoveTest(locORr,long3);
  end else begin
    res = ORRemoveTest(ORr,long3);
  end;
  ORVcRecordRemoveTest = res; 
  return;
end;

global
updating procedure UpdateOrdOut(record ORVc ORp,Boolean addf,Boolean futorf)
begin
  record MainStockBlock MSb;
  record SHVc SHr;
  row SHVc SHrw;
  row ORVc ORrw;
  Integer i,rwcnt;
  val t,theqty;
  val t2,t3;
  Integer j,shrwcnt;
  Boolean isstruct;
  string 255 location,theloc;
  record DropSHVc DropSHr;
  
  switch (ORp.OrderType) begin
    case kOrderTypeDropShip:
      goto LUpdateOrdOut;
  end;
  BlockLoad(MSb);
  location = ORp.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.OrderType!=kOrderTypeDropShip) then begin
    if (ORrw.stp==kInvoiceRowTypeNormal) or (ORrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      if (nonblank(ORrw.Location)) then begin
        theloc = ORrw.Location;
      end else begin
        theloc = location;
      end;
      theqty = ORrw.Quant;
      isstruct = false;
      if (ORrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
        isstruct = ExpandStructItem(ORrw.ArtCode,ORrw.Recepy,theqty,SHr);
      end;
      if (isstruct==false) then begin
        t2 = theqty;
        t3 = blankval;
        if (ORp.Reserved!=0) then begin
          t3 = ORrw.Quant - ORrw.Shipd2;
        end;
        if (addf==false) then begin
          t2 = -t2;
          t3 = -t3;
        end else begin
          if (ORp.Closed!=0) then begin  // if ord is closed then nothing left to deliver
//            if (MSb.UpdateAvailable==1) then begin
//              t2 = theqty;
//            end else begin
              if (ORrw.Shipd2<ORrw.Quant) then begin
                t2 = ORrw.Shipd2;
              end;
//            end;            
            if (ORp.Reserved!=0) then begin
//              t3 = t2;
              t3 = blankval;
            end else begin
              t3 = blankval;
            end;
            DropSHr.OrderNr = ORp.SerNr;
            if (ReadFirstKey("OrderNr",DropSHr,1,true)) then begin //this means someone changed Drop Ship type to Normal
              t2 = blankval;
            end;
          end;
        end;
        if ((t2!=0) or (t3!=0)) then begin
          UpdateInstock("ORVc",ORp.SerNr,ORrw.ArtCode,theloc,ORp.OrdDate,t,t2,t3,t,t,t,t,t,t);
        end;
      end else begin
        // We save the original item as well as the components! 
        if (nonblank(ORrw.Location)) then begin
          theloc = ORrw.Location;
        end else begin
          theloc = location;
        end;
        t2 = theqty;
        if (ORp.Reserved!=0) then begin
          t3 = theqty;
        end else begin
          t3 = blankval;
        end;
        if (addf==false) then begin
          t2 = -t2;
          t3 = -t3;
        end else begin
          if (ORp.Closed!=0) then begin  //
            t2 = ORrw.Shipd2;
            if (ORp.Reserved!=0) then begin
              t3 = theqty;
              t3 = blankval;
            end else begin
              t3 = blankval;
            end;
          end;
        end;
        if ((t2!=0) or (t3!=0)) then begin
          UpdateInstock("ORVc",ORp.SerNr,ORrw.ArtCode,theloc,ORp.OrdDate,t,t2,t3,t,t,t,t,t,t);
        end;
        shrwcnt = MatRowCnt(SHr);
        for (j=0;j<shrwcnt;j=j+1) begin
          MatRowGet(SHr,j,SHrw);
          t2 = SHrw.Ship;
          if (ORp.Reserved!=0) then begin
            t3 = SHrw.Ship;
          end else begin
            t3 = blankval;
          end;
          if (addf==false) then begin
            t2 = -t2;
            t3 = -t3;
          end else begin
            if (ORp.Closed!=0) then begin  // if ord is closed then nothing left to deliver
              t2 = (SHrw.Ship/theqty)*ORrw.Shipd2;
              if (ORp.Reserved!=0) then begin
                t3 = ORrw.Shipd2;
              //former code was wrong
                t3 = SHrw.Ship;
                t3 = blankval;
              end else begin
                t3 = blankval;
              end;
            end;
          end;
          if ((t2!=0) or (t3!=0)) then begin
            UpdateInstock("ORVc",ORp.SerNr,SHrw.ArtCode,theloc,ORp.OrdDate,t,t2,t3,t,t,t,t,t,t);
          end;
        end;
      end;
    end;
    end;
  end;
  if (futorf) then begin
    UpdateORPlanned(ORp,location,addf);
  end;
LUpdateOrdOut:;  
  return;
end;

updating procedure PRSOINStatUp(LongInt posernr,Date td,string project,string artcode,val quantp,val sump,Boolean addf)
begin
  record PRSOINVc PRSOr;
  record PRSOINVc oldPRSOr;
  Boolean found;
  Boolean delf;
  val qty,sum;
  
  if (blank(artcode)) then begin goto LPRSOINStatUp; end;
  if (blank(project)) then begin goto LPRSOINStatUp; end;
  if ((quantp!=0) or (sump!=0)) then begin
    delf = false;
    PRSOr.SOSerNr = posernr;
    PRSOr.Project = project;
    PRSOr.Item = artcode;
    found = ReadFirstMain(PRSOr,3,true);
    RecordCopy(oldPRSOr,PRSOr);
    if (found) then begin
    end else begin
      PRSOr.SOSerNr = posernr;
      PRSOr.Project = project;
      PRSOr.Item = artcode;
      PRSOr.TransDate = td;
      PRSOr.SOQty = 0;
      PRSOr.SOVal = 0;
    end;
    qty = quantp;
    sum = sump;
    if (addf==false) then begin
      qty = -quantp;
      sum = -sump;
    end;
    PRSOr.SOQty = PRSOr.SOQty + qty;
    PRSOr.SOVal = PRSOr.SOVal + sum;
    if (PRSOr.SOVal<=0) then begin delf = true; end;
    if (PRSOr.SOQty<=0) then begin delf = true; end;
    if (delf==false) then begin
      if (found) then begin
        if (RecordUpdate(oldPRSOr,PRSOr,false)==0) then begin end;
      end else begin
        if (RecordStore(PRSOr,false)) then begin end;
      end;
    end else begin
      if (found==true) then begin
        RecordDelete(oldPRSOr);
      end;
    end;
  end;
LPRSOINStatUp:;
  return;
end;

global
updating procedure UpdatePRSO(record ORVc ORp,Boolean addf)
begin
  row ORVc ORrw;
  Integer i,rwcnt;
  val valinbase1;

  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.stp==1) then begin
      if (nonblank(ORp.PRCode) or nonblank(ORp.PRCode)) then begin
        valinbase1 = MulRateToBase1(ORp.CurncyCode,ORrw.Sum,ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,DefaultCurRoundOff);
        PRSOINStatUp(ORp.SerNr,ORp.OrdDate,ORp.PRCode,ORrw.ArtCode,ORrw.Quant,valinbase1,addf);
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateEDIOR(record ORVc ORp)
begin
  record EDIORVc oldEDIORr;
  record EDIORVc EDIORr;
  
  EDIORr.ORSerNr = ORp.SerNr;
  EDIORr.VersionNr = 1;
  if (ReadFirstKey("ORSerNr",EDIORr,1,true)) then begin
    RecordCopy(oldEDIORr,EDIORr);
    EDIORr.ORSerNr = -1;
    if (RecordUpdate(oldEDIORr,EDIORr,true)) then begin end;
  end;
  return;
end;

updating procedure ORVcRecordRemove_UpdateQT(LongInt ordnr)
begin
  record QTVc QTr;
  record QTVc oldQTr;
  Boolean found;
  
  found = true;
  QTr.OrderNr = ordnr;
  while (LoopKey("OrderNr",QTr,1,found)) begin
    if (QTr.OrderNr!=ordnr) then begin found = false;  end;
    if (found) then begin
      RecordCopy(oldQTr,QTr);
      QTr.OrderNr = -1;
      RecordUpdate(oldQTr,QTr,false);
      StepBack(QTr);
    end;
  end;
  return;
end;

global
updating function LongInt ORVcRecordRemove(var record ORVc ORr,record ORVc OR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer tmp;
  string 20 location;
  record MainStockBlock MSb;

  if (ORr.Closed==0) then begin
    UpdateOrdOut(ORr,false,true);
    UpdatePRSO(ORr,false);
    UpdateEDIOR(ORr);
    ORVcRecordRemove_UpdateQT(ORr.SerNr);
  end else begin
    BlockLoad(MSb);
    location = ORr.Location;
    if (blank(location)) then begin
      location = MSb.MainStock;
    end;
    UpdateORPlanned(ORr,location,false);
  end;
  tmp = ORr.Closed;
  ORr.Closed = 1;
  UpdateStockResFromOR(ORr);
  ORr.Closed = tmp;
  if (nonblank(ORr.OfficialSerNr)) then begin 
    DeleteOffSerNr(ORr.SerNr,"ORVc");
  end;
  ORVcRecordRemove = res; 
  return;
end;

global
procedure AutDelNonStockItem(record ORVc ORp)
begin
  row ORVc ORrw;
  Integer i,rwcnt;
  record MainStockBlock MSb;
  record INVc INr;
  Boolean updf;

  BlockLoad(MSb);
  if (MSb.DelivPlainItems==0) then begin goto LAutDelNonStockItem; end;
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    INr.Code = ORrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if ((INr.ItemType==kItemTypePlain) or (INr.ItemType==kItemTypeService)) then begin 
        if (ORrw.Quant!=ORrw.Shipd1) then begin
          ORrw.Shipd1 = ORrw.Quant;
          updf = true;
        end;
        if (ORrw.Quant!=ORrw.Shipd2) then begin
          ORrw.Shipd2 = ORrw.Quant;
          updf = true;
        end;
        if (updf) then begin
          MatRowPut(ORp,i,ORrw);
        end;
      end;
    end;
  end;
  if (updf) then begin SetORFlags(ORp); end;
LAutDelNonStockItem:;
  return;
end;

procedure AutDelZeroQtyRows(record ORVc ORr)
begin
  row ORVc ORrw;
  Integer i,rwcnt;
  Boolean updf;

  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.Quant==0 and nonblank(ORrw.ArtCode)) then begin
      MatRowDelete(ORr,i);
      rwcnt = MatRowCnt(ORr);
      i = 0;
      updf = true;
    end;
  end;
  if (updf) then begin SetORFlags(ORr); end;
  return;
end;

function Boolean ObjStatSameOR(record ORVc OR1p,record ORVc OR2p)
begin
  Boolean res;
  
  if (OR1p.Objects==OR2p.Objects) then begin
    if (OR1p.OrdDate==OR2p.OrdDate) then begin
      res = true;
    end;
  end;
  ObjStatSameOR = res;
  return;
end;

updating procedure ORObjectStats(record ORVc OR1p,record ORVc OR2p)
begin
  record ObjStatVc OSr;
  Integer pos;
  string 255 ostr;
  
  if (RecordValid(OR2p)) then begin  /* delete the OR2 objects */
    if (ObjStatSameOR(OR1p,OR2p)==false) then begin
      pos = 0;
      ExtractObj(OR2p.Objects,pos,ostr);
      while (nonblank(ostr)) begin
        OSr.SerNr = OR2p.SerNr;
        OSr.Date = OR2p.OrdDate;
        OSr.FileName = "ORVc";
        OSr.Object = ostr;
        if (ReadFirstMain(OSr,4,true)) then begin
          RecordDelete(OSr);
        end;
        ExtractObj(OR2p.Objects,pos,ostr);
      end;
    end;
  end;
  pos = 0;
  ExtractObj(OR1p.Objects,pos,ostr);
  while (nonblank(ostr)) begin
    OSr.SerNr = OR1p.SerNr;
    OSr.Date = OR1p.OrdDate;
    OSr.FileName = "ORVc";
    OSr.Object = ostr;
    if (RecordInsert(OSr,false)) then begin end;
    ExtractObj(OR1p.Objects,pos,ostr);
  end;
  return;
end;

global
updating function LongInt ORVcRecordUpdate(var record ORVc ORr,record ORVc OR2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  ORr.Prntdf = 0;
  AutDelNonStockItem(ORr);
  UpdateOrdOut(OR2r,false,true);
  UpdateOrdOut(ORr,true,true);
  UpdatePRSO(OR2r,false);
  UpdatePRSO(ORr,true);
  SetORFlags(ORr);
  SetORAcceptanceFlag(ORr,OR2r,stat);
  RecalculateWeightORVc(ORr,false);  
  ORVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt ORVcRecordUpdateAfter(var record ORVc ORr,record ORVc OR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  val bc1v;

//  ORObjectStats(ORr,OR2r); it is stored only and not used ever
  UpdateVARItemsOR(ORr);
  UpdateStockResFromOR(ORr);
  if (nonblank(ORr.OfficialSerNr)) then begin
    if (ORr.OfficialSerNr!=OR2r.OfficialSerNr) then begin
      UpdateOffSerNr(ORr.SerNr,"ORVc",0,ORr.OfficialSerNr,true);
    end;
  end else begin
    if (nonblank(OR2r.OfficialSerNr)) then begin
      DeleteOffSerNr(OR2r.SerNr,"ORVc");
    end;
  end;
  if (OR2r.Sum4!=ORr.Sum4) then begin
    DeletePlannedPayment("ORVc",ORr.SerNr,-1);
    ORCreatePlannedPayment(ORr);
  end;
  ORVcRecordUpdateAfter = res; 
  return;
end;

global
procedure ORRowInsertValues(record ORVc ORp,row ORVc orrp,Integer UseDiscount)
begin
  record INVc INr;
  Boolean calcpricef;
  val t,s,price,tax2prc,p;
  string 255 curitemname,salesacc,tax2code,location,taxtemplatecode;
  Boolean dummyf;
  record TaxMatrixVc TMr;
  Time blankt;
  
  if (GetFirstItem(orrp.ArtCode,INr)) then begin
    orrp.ArtCode = INr.Code;
    location = orrp.Location;
    if (blank(location)) then begin
      location = ORp.Location;
    end;
    if (GetItemPriceDiscount3(orrp.ArtCode,orrp.Quant,INr,ORp.CurncyCode,
                ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,
                ORp.LangCode,ORp.CustCat,ORp.PriceList,ORp.RebCode,
                price,curitemname,s,
                orrp.VATCode,t,salesacc,ORp.ExportFlag,calcpricef,ORp.OrdDate,blankt,ORp.CustCode,true,dummyf,ORp.PayDeal,tax2code,tax2prc,ORp.Region,location,taxtemplatecode)) then begin
                
      orrp.TaxTemplateCode = FillupTaxMatrix(0,ORp.BranchID,ORp.CustCode,ORp.CustCat,ORp.DelAddrCode,taxtemplatecode,TMr);
      if (blank(orrp.Price)) then begin
        orrp.Price = price;
      end;
      if (blank(orrp.vRebate)) then begin
        orrp.vRebate = s;
      end;
      if (blank(orrp.BasePrice)) then begin
        orrp.BasePrice = t;
      end;
      if (blank(orrp.Spec)) then begin
        orrp.Spec = curitemname;
      end;
      if (blank(orrp.SalesAcc)) then begin
        orrp.SalesAcc = salesacc;
      end;
      if (nonblank(ORp.CustVATCode)) then begin
        orrp.VATCode = ORp.CustVATCode;
      end;
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        orrp.Recepy = INr.Recepy;
      end else begin
        orrp.Recepy = "";
      end;
      orrp.Objects = FindINObjects(INr.Objects,INr.Group);
      p = orrp.Price; 
      CalcPrice(orrp.BasePrice,orrp.PriceFactor,orrp.vRebate,p,UseDiscount);
      orrp.Price = p;  
      CalcSum(orrp.Quant,orrp.Price,orrp.PriceFactor,orrp.vRebate,s,UseDiscount);
      orrp.Sum = s;
      orrp.PriceFactor = INr.PriceFactor;
      t = orrp.Quant*orrp.BasePrice;   
      if (orrp.PriceFactor!=0) then begin
        t = t/orrp.PriceFactor;
      end;
      s = MulRateToBase1(ORp.CurncyCode,orrp.Sum,ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,DefaultCurRoundOff);
      UnpackRowFieldMatrix(orrp,"TaxMatrix",TMr);
      FindSalesExVat(TMr,orrp.VATCode,s,ORp.InclVAT,ORp.NoTAXonVAT,s);
      orrp.rowGP = s - t;          
    end;
  end;
  return;
end;

procedure ReadORFunctions(var record ORVc ORp)
begin
  Integer i,rwcnt;
  row ORVc ORrw;
  
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    switch (ORrw.stp) begin
      case 1:
        if (ORrw.Recepy=="_") then begin
          ORrw.Recepy = "";
        end;
        if ((nonblank(ORrw.ArtCode)) and (blank(ORrw.Spec))) then begin
          ORRowInsertValues(ORp,ORrw,0);//GenOptr.UseDiscount KH??
          MatRowPut(ORp,i,ORrw);
        end;
    end;
  end;
  return;
end;

global
updating function LongInt ORVcRecordSave(var record ORVc ORr,record ORVc OR2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (blankdate(ORr.RegDate)) then begin
    ORr.RegDate = CurrentDate;
  end;
  if (blanktime(ORr.RegTime)) then begin
    ORr.RegTime = CurrentTime;
  end;
  AutDelNonStockItem(ORr);
  AutDelZeroQtyRows(ORr);
  UpdateOrdOut(ORr,true,true);
  UpdatePRSO(ORr,true);
  SetORFlags(ORr);
  SetORAcceptanceFlag(ORr,OR2r,stat);
  RecalculateWeightORVc(ORr,false);
//  MakeActFromSubSys_ORVc(ORr,false,false);  done below in CreateActFromOR
  if (blank(ORr.OfficialSerNr)) then begin
    FindNextORVcOfficialSerialNr(ORr);
  end;
  ORVcRecordSave = res; 
  return;
end;

global
updating function LongInt ORVcRecordSaveAfter(var record ORVc ORr,record ORVc OR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 255 autmsgfunciontags;
  record PDVc PDr;

//  ORObjectStats(ORr,OR2r);it is stored only and not used ever
  CreateActFromOR(ORr);
  UpdateVARItemsOR(ORr);
  SMSWhenOR(ORr,1);  
  if (nonblank(ORr.OfficialSerNr)) then begin
    UpdateOffSerNr(ORr.SerNr,"ORVc",0,ORr.OfficialSerNr,false);
  end;
  ORCreatePlannedPayment(ORr);
  if (IsStandardProduct) then begin 
    PDr.Code = ORr.PayDeal;
    ReadFirstMain(PDr,1,true);
    if (PDr.PDType==kInvoiceTypeCash) then begin
      autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModCL+SAVE_ORVc");
    end;
  end;
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  ORVcRecordSaveAfter = res; 
  return;
end;

global
function LongInt ORVcRecordDefaults(var record ORVc ORr,record ORVc OR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record OrdSettBlock OSb;
  record AccBlock ARAccRec;
  record UserVc USr;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  record MainStockBlock MSb;

  BlockLoad(OSb);
  BlockLoad(ARAccRec);
  BlockLoad(MSb);
  ORr.SerNr = -1;
  ORr.OrdDate = CurrentDate;
  ORr.CustCat = "";
  ORr.Prntdf = 0;
  ORr.ExportFlag = 0;
  ORr.InvFlag = 0;
  ORr.Closed = 0;
  ORr.ShipFlag = 0;
  ORr.QuoteNr = -1;
  ORr.DiscSum = blankval;
  ORr.DiscPerc = blankval;
  ORr.TotGP = blankval;
  ORr.Probability = blankval;
  ORr.TotQty = blankval;
  ORr.TotWeight = blankval;
  ORr.TotVolume = blankval;
  ORr.Commision = blankval;
  ORr.DownPaySent = blankval;
  ORr.DownPayRedcd = blankval;
  ORr.TAX1Sum = blankval;
  ORr.InclVAT = ARAccRec.BasePriceInclVAT;
  ORr.NoTAXonVAT = ARAccRec.NoTAXonVAT;
  ORr.TotalwoTAX = ARAccRec.TotalwoTAX;
  GetCurUser(USr);
  ORr.Objects = USr.PersObjx;
  ORr.OurContact = USr.CurOurContact;
  ORr.Location = USr.Location;
  ORr.SalesMan = USr.Code;
  ORr.SalesGroup = USr.SalesGroup;  
  if (SingleUserMode) then begin
    ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
  end;
  ORr.PayDeal = "";
  ORr.CurncyCode = "";
  curcode = ORr.CurncyCode;
  GetFullCurncyRate(curcode,ORr.OrdDate,fr,to1,to2,br1,br2);
  ORr.CurncyCode = curcode;
  ORr.FrRate = fr;
  ORr.ToRateB1 = to1; 
  ORr.ToRateB2 = to2;
  ORr.BaseRate1 = br1;
  ORr.BaseRate2 = br2;  
  if (OSb.OrdToDespDate!=0) then begin
    ORr.DespatchDate = ORr.OrdDate;
  end;
  ORr.InvBeforeShip = MSb.AllowInvBeforeShip;
  ORr.SHShipSetToZero = OSb.SHShipSetToZero;
  ORr.TerminalID = CurTerminalID;
  ORr.BranchID = CurBranchID;
  ORr.LocalMachineCode = CurMachineName;
  ORr.OfficialSerNr = "";
  ORr.OfficialSerNrSerie = "";
  ORVcRecordDefaults = res;  
  return;
end;

global
function val GetINCostPrice2(string pricelist,string artcode,string custcode,Boolean bbf)
begin
  val res;
  record INVc INr;
  record PLDefVc PLDr;
  record PLVc PLr;
  boolean foundf;
  
  res = blankval;
  if (ReadFirstItem(artcode,INr,true,false)) then begin
    if (INr.ExplodeRec==0) then begin
      if (INr.InPrice!=0) then begin
        res = INr.InPrice;
        res = res + INr.ExtraCost;  
      end;
      if (bbf) then begin
        PLDr.Code = pricelist;
        if (ReadFIrstMain(PLDr,1,true)) then begin
          PLr.PLCode = pricelist;
          PLr.ArtCode = artcode;
          PLr.CustCode = custcode;
          if (ReadFirstMain(PLr,3,true)) then begin
            foundf = true;
          end;     
          if (foundf==false) then begin
            PLr.PLCode = pricelist;
            PLr.ArtCode = artcode;
            if (ReadFirstMain(PLr,2,true)) then begin
              foundf = true;
            end;
          end;           
          if (foundf) then begin
            switch (PLDr.DepPrice) begin
              case 2:
                if (nonblank(PLr.CostPrice)) then begin
                  res = PLr.CostPrice;
                end;
            end;
          end;
        end;
      end;
    end;
  end;
  GetINCostPrice2 = res;
  return;
end;

global
function val GetINCostPrice(string pricelist,string artcode,Boolean bbf)
begin
  GetINCostPrice = GetINCostPrice2(pricelist,artcode,"",bbf);
  return;
end;

global
function LongInt ORVcRecordDuplicate(var record ORVc ORr,record ORVc OR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record OrdSettBlock OSb;
  row ORVc ORrw;
  Integer i,rwcnt;
  val fr,to1,to2,br1,br2,t;
  string 10 curcode;
  record UserVc USr;
  record MainStockBlock MSb;
  Date bd;
  Time bt;
  record CreditLimitBlock CLb;
  record CUVc CUr;
  val bal,limit;
  Boolean limitdaysf;

  BlockLoad(MSb);
  BlockLoad(OSb);
  ORr.SerNr = -1;
  ORr.Prntdf = 0;
  ORr.Closed = 0;
  ORr.OKFlag = 0;
  ORr.QuoteNr = -1;
  ORr.DiscSum = blankval;
  ORr.DiscPerc = blankval;
  ORr.Probability = blankval;
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    ORrw.Shipd1 = blankval;
    ORrw.Shipd2 = blankval;
    ORrw.Invd = blankval;
    ORrw.SerialNr = "";
    ORrw.BasePrice = GetINCostPrice(ORr.PriceList,ORrw.ArtCode,true);
    MatRowPut(ORr,i,ORrw);
    ORDchsum(ORr,i);
  end;
  ORSumup(ORr);
  GetCurUser(USr);
  ORr.OurContact = USr.CurOurContact;
  ORr.PlanShip = "";
  ORr.CustOrdNr = "";
  ORr.AcceptanceBy = "";
  ORr.AcceptanceFYI = "";
  ORr.OrdDate = CurrentDate;
  ORr.DownPaySent = blankval;
  ORr.DownPayRedcd = blankval;
  ORr.PrepaidAmount = blankval;
  curcode = ORr.CurncyCode;
  GetFullCurncyRate(curcode,ORr.OrdDate,fr,to1,to2,br1,br2);
  ORr.CurncyCode = curcode;
  ORr.FrRate = fr;
  ORr.ToRateB1 = to1; 
  ORr.ToRateB2 = to2;
  ORr.BaseRate1 = br1;
  ORr.BaseRate2 = br2;    
  ORr.OfficialSerNr = "";
  ORr.OfficialSerNrSerie = "";
  if (OSb.OrdToDespDate!=0) then begin
    if (blankdate(ORr.DespatchDate)) then begin
      ORr.DespatchDate = ORr.OrdDate;
    end;
  end;
  SetORFlags(ORr);
  if (SingleUserMode) then begin
    ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
  end;
//  ORr.InvBeforeShip = MSb.AllowInvBeforeShip;//they want this to be copied
  ORr.TerminalID = CurTerminalID;
  ORr.BranchID = CurBranchID;
  ORr.LocalMachineCode = CurMachineName;
  ORr.RegDate = bd;
  ORr.RegTime = bt;
  ORr.Hash = "";
  ORr.HashKeyVersion = 0;
  ReplacePerceptionTaxesRows_ORVc(ORr);
  ORSumup(ORr); 
  BlockLoad(CLb);
  CUr.Code = ORr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  if (nonblank(CUr.WarnText1)) then begin
    MessageBox(0,CUr.WarnText1);
  end;
  if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
    if (CLb.IVPaste==1) then begin
      if (limitdaysf) then begin
        MessageBox(0,USetStr(22260));
      end;
      if (limit>0) then begin
        if (bal>limit) then begin
          MessageBox(0,USetStr(1164));
        end;
      end;
    end;
  end;
  
  ORVcRecordDuplicate = res;  
  return;
end;

procedure RetainORStatus(record ORVc ORp,record ORVc OR2p)
begin
  Integer i,rwcnt;
  row ORVc ORrw;
  row ORVc OR2rw;
  Integer rwcnt2;
  
  ORp.Prntdf = OR2p.Prntdf;
  ORp.InvFlag = OR2p.InvFlag;
  ORp.InvMark = OR2p.InvMark;
  ORp.ShipFlag = OR2p.ShipFlag;
  ORp.ShipMark = OR2p.ShipMark;
  ORp.OSFlag = OR2p.OSFlag;
  ORp.DownPaySent = OR2p.DownPaySent;
  ORp.DownPayRedcd = OR2p.DownPayRedcd;
  rwcnt = MatRowCnt(ORp);
  rwcnt2 = MatRowCnt(OR2p);
  for (i=0;i<rwcnt;i=i+1) begin
    if (i<rwcnt2) then begin
      MatRowGet(ORp,i,ORrw);
      MatRowGet(OR2p,i,OR2rw);
      ORrw.Invd = OR2rw.Invd;
      ORrw.Shipd1 = OR2rw.Shipd1;
      ORrw.Shipd2 = OR2rw.Shipd2;
      MatRowPut(ORp,i,ORrw);
    end;
  end;
  return;
end;

global
function LongInt ORVcRecordProtectFields(var record ORVc ORr,record ORVc OR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  RetainORStatus(OR2r,ORr);
  ORVcRecordProtectFields = res;
  return;
end;

global
function LongInt ORVcRecordInIndex(record ORVc ORr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if ((ORr.OSFlag==0) or (ORr.Sum4<=ORr.PrepaidAmount)) then begin 
    if (indexname=="ActSerNr")  then begin res = 0; end;
    if (indexname=="ActOrdDate")  then begin res = 0; end;
    if (indexname=="ActCustCode")  then begin res = 0; end;
    if (indexname=="ActName")  then begin res = 0; end;
  end;
  if (ORr.OSFlag==0) then begin 
    if (indexname=="ActArtCodeOSFlag")  then begin res = 0; end;
  end;
  ORVcRecordInIndex = res;
  return;
end;
