external function LongInt TimeToMinutes(Time);

global
function Boolean ReadRestOpenHours(string machinename,var record RestOpenHoursVc ROHb)
begin
  Boolean res;
  
  ROHb.MachineName = machinename;
  res = ReadFIrstMain(ROHb,1,true);
  if (res==false) then begin
    if (nonblank(machinename)) then begin
      ROHb.MachineName = "";
      if (ReadFIrstMain(ROHb,1,true)) then begin
        res = true;
      end;    
    end;
  end;
  ReadRestOpenHours = res;
  return;
end;

global
procedure GetRestBookTime(record RestOpenHoursVc ROHr,Date dat,var Time frtim,var Time totim)
begin
  switch (GetDateID(dat)) begin
    case 1:
      frtim = ROHr.MonStart;
      totim = ROHr.MonEnd;
    case 2:
      frtim = ROHr.TueStart;
      totim = ROHr.TueEnd;
    case 3:
      frtim = ROHr.WedStart;
      totim = ROHr.WedEnd;
    case 4:
      frtim = ROHr.ThuStart;
      totim = ROHr.ThuEnd;
    case 5:
      frtim = ROHr.FriStart;
      totim = ROHr.FriEnd;
    case 6:
      frtim = ROHr.SatStart;
      totim = ROHr.SatEnd;
    case 7:
      frtim = ROHr.SunStart;
      totim = ROHr.SunEnd;
  end;
  return;
end;

procedure GetRestBookOccupation(record RestOpenHoursVc ROHr,LongInt serno,Date dat,Time frtim,Time totim,var LongInt qty)
begin
  record RestBookingVc RestBookingr;
  Boolean found;
  LongInt frmin,tomin,mins,i;
  LongInt frmin2,tomin2,t;
  Array LongInt persarr;
  
  qty = 0;
  frmin = TimeToMinutes(frtim)/60;
  tomin = TimeToMinutes(totim)/60;
  if (tomin<frmin) then begin
    tomin = tomin + 24;
  end;
  mins = tomin - frmin;
  for (i=0;i<=mins;i=i+1) begin
    persarr[i] = 0;
  end;
  RestBookingr.BookDate = dat;
  found = true;
  while (LoopKey("BookTime",RestBookingr,1,found)) begin
    if (RestBookingr.BookDate!=dat) then begin
      found = false;
    end;
    if ((found) and (RestBookingr.SerNr!=serno)) then begin
      frmin2 = TimeToMinutes(RestBookingr.BookStart)/60;
      tomin2 = TimeToMinutes(RestBookingr.BookEnd)/60;
      if (tomin2<frmin2) then begin
        tomin2 = tomin2 + 24;
      end;
      for (i=0;i<=mins;i=i+1) begin
        if ((i+frmin>=frmin2) and (i+frmin<tomin2)) then begin
          persarr[i] = persarr[i] + RestBookingr.Persons;
        end;
      end;
    end;
  end;
  for (i=0;i<=mins;i=i+1) begin
    if (qty<persarr[i]) then begin
      qty = persarr[i];
    end;
  end;
  return;
end;

global
function LongInt RestBookingVcRecordSave(var record RestBookingVc RestBookingr,record RestBookingVc RestBooking2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  RestBookingr.SerNr = NextSerNr("RestBookingVc",CurrentDate,-1,false,"");
  RestBookingVcRecordSave = res; 
  RETURN;
END;

global
function LongInt RestBookingVcRecordDefaults(var record RestBookingVc RestBookingr,record RestBookingVc RestBooking2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  RestBookingr.SerNr = -1;
  RestBookingr.Persons = -1;
  RestBookingr.BookDate = CurrentDate;
  RestBookingVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt RestBookingVcRecordDuplicate(var record RestBookingVc RestBookingr,record RestBookingVc RestBooking2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  RestBookingr.SerNr = -1;
  RestBookingr.Persons = -1;
  RestBookingr.BookDate = CurrentDate;
  RestBookingVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt RestBookingVcRecordCheck(var record RestBookingVc RestBookingr,record RestBookingVc RestBooking2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RestOpenHoursVc ROHr;
  LongInt qty;
  Time frtim,totim;

  res = 0;
  ReadRestOpenHours(RestBookingr.MachineName,ROHr);
  if (blanktime(RestBookingr.BookStart)) then begin
    RecordCheckError(1058,"",-1,"BookStart");      
    res = -1; 
    goto LRestBookingVcRecordCheck;
  end;
  if (blanktime(RestBookingr.BookEnd)) then begin
    RecordCheckError(1058,"",-1,"BookEnd");      
    res = -1; 
    goto LRestBookingVcRecordCheck;
  end;
  GetRestBookTime(ROHr,RestBookingr.BookDate,frtim,totim);
  if (RestBookingr.BookStart<frtim) then begin
    MessageBox(2149,"");
    goto LRestBookingVcWarning;
  end;
  if (RestBookingr.BookEnd>totim) then begin
    MessageBox(2149,"");
    goto LRestBookingVcWarning;
  end;
  if (ROHr.GiveWarn!=0) then begin
    GetRestBookOccupation(ROHr,RestBookingr.SerNr,RestBookingr.BookDate,RestBookingr.BookStart,RestBookingr.BookEnd,qty);
    if (qty+RestBookingr.Persons>ROHr.Seats) then begin
      MessageBox(2150,"");
      goto LRestBookingVcWarning;
    end;
LRestBookingVcWarning:;
  end;
  
LRestBookingVcRecordCheck:; 
  RestBookingVcRecordCheck = res;
  RETURN;
END;

global
function LongInt BarMenuTypeVcRecordCheck(var record BarMenuTypeVc BarMenuTyper,record BarMenuTypeVc BarMenuType2r,LongInt a,LongInt b)
begin
  LongInt res;

  res = 0;
  if (BarMenuTyper.Code=="") then begin
    RecordCheckError(1058,BarMenuTyper.Code,-1,"Code");      
    res = -1;
    goto LBarMenuTypeCheck;
  end;
LBarMenuTypeCheck:;
  BarMenuTypeVcRecordCheck = res;
  return;
end;

global
function LongInt BarMenuVcRecordCheck(var record BarMenuVc BarMenur,record BarMenuVc BarMenu2r,LongInt a,LongInt b)
begin
  LongInt res;
  Integer i,rwcnt;
  row BarMenuVc BMrw;
  record INVc INr;

  res = 0;
  if (blank(BarMenur.Code)) then begin
    RecordCheckError(1058,BarMenur.Code,-1,"Code");      
    res = -1;
    goto LBarMenuCheck;
  end;
  rwcnt = MatRowCnt(BarMenur);
  for (i=0;i<rwcnt;i=i+1) begin    
    MatRowGet(BarMenur,i,BMrw);
    if (nonblank(BMrw.ArtCode)) then begin
      INr.Code = BMrw.ArtCode;
      if (ReadFirstMain(INr,1,true)==false) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
        res = -1; 
        goto LBarMenuCheck;
      end;
    end;
  end;  
LBarMenuCheck:;
  BarMenuVcRecordCheck = res;
  return;
end;


global
function LongInt ServiceChargeVcRecordCheck(var record ServiceChargeVc ServiceCharger,record ServiceChargeVc ServiceCharge2r,LongInt a,LongInt b)
begin
  LongInt res;

  res = 0;
  if (ServiceCharger.MachineCode=="") then begin
    RecordCheckError(1058,ServiceCharger.MachineCode,-1,"MachineCode");      
    res = -1;
    goto LServiceChargeRecordCheck;
  end;
LServiceChargeRecordCheck:;
  ServiceChargeVcRecordCheck = res;
  return;
end;


global
function LongInt ModifiersVcRecordCheck(var record ModifiersVc Modifiersr,record ModifiersVc Modifiers2r,LongInt a,LongInt b)
begin
  LongInt res;

  res = 0;
  if (Modifiersr.Code=="") then begin
    RecordCheckError(1058,Modifiersr.Code,-1,"Code");      
    res = -1;
    goto LModifiersRecordCheck;
  end;
LModifiersRecordCheck:;
  ModifiersVcRecordCheck = res;
  return;
end;

global 
function Boolean ModifiersVcRecordShouldBeSynchronised(record ModifiersVc Modifiersr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ModifiersVcrecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean ModifiersVcRecordSync(record ModifiersVc Modifiersr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ModifiersVcRecordSync = res;
  return;
end;
