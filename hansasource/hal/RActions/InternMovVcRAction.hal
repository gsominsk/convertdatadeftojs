external procedure WarnFutureDate(Boolean,Date);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure InternMovSumUp(var record InternMovVc);
external updating procedure UpdateInternalInstock(string,string,val);
external updating procedure UpdateInternalSerStock(string,string,string,val,val);
external function Boolean ShouldItemUpdateStock(string);
external function Boolean IntSerialNrAvail(string,string,string,val);
external function val HALGetIntStockQty(string,string,Date);
external function Boolean Date2Test(string,Date,string,Integer);
external updating procedure StoreItemHistory_In(record MainStockBlock,string,string,string,string,Date,Date,val,val,val,LongInt,Integer,Integer,string,string,record TempStockVc,Boolean);
external updating procedure StoreItemHistory_Out(record MainStockBlock,string,string,string,string,Date,val,val,val,LongInt,Integer,Integer,string,record TempStockVc,Boolean);

global
function LongInt InternMovVcRecordDefaults(var record InternMovVc Intmovr,record InternMovVc Disp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  Intmovr.SerNr = -1;
  Intmovr.RegDate = CurrentDate;
  Intmovr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    Intmovr.SerNr = NextSerNr("InternMovVc",Intmovr.TransDate,-1,false,"");
  end;
  Intmovr.AgreementNr = -1;
  Intmovr.SVONr = -1;
  Intmovr.Comment = "";
  Intmovr.OKFlag = 0;
  Intmovr.SumQuant = BlankVal;
  InternMovVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt InternMovVcRecordDuplicate(var record InternMovVc Intmovr,record InternMovVc Disp2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  Intmovr.SerNr = -1;
  Intmovr.RegDate = CurrentDate;
  Intmovr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    Intmovr.SerNr = NextSerNr("InternMovVc",Intmovr.TransDate,-1,false,"");
  end;
  Intmovr.OKFlag = 0;
  WarnFutureDate(true,Intmovr.TransDate);
  InternMovVcRecordDuplicate = res; 
  RETURN;
END;

updating procedure InternMovUpdateStock(record InternMovVc IMp)
BEGIN
  Integer rwcnt;
  row InternMovVc InternMovrw;
  val t,t2,t4,q2;
  Integer i;
  Date blankd;
  
  rwcnt = MatRowCnt(IMp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IMp,i,InternMovrw);
    if (InternMovrw.Quant!=0) then begin
      t2 = -InternMovrw.Quant;
      if (ShouldItemUpdateStock(InternMovrw.ArtCode)) then begin
        UpdateInternalInstock(InternMovrw.ArtCode,IMp.FrLocation,t2);
        t4 = InternMovrw.Quant;
        UpdateInternalInstock(InternMovrw.ArtCode,IMp.ToLocation,t4);
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure InternMovUpdateINrs(record InternMovVc InternMovp,Boolean importf,Boolean rebuildf)
BEGIN
  record IntINrsVc IntINrsr;
  row InternMovVc InternMovrw;
  row InternMovVc InternMov2rw;
  Integer rwcnt,i,j;
  record MainStockBlock MainStockRec;
  string 255 frlocation,tolocation;
  val t,costp;
  val qty;
  record INVc INr;
  record TempStockVc TSr;
  Boolean usetmpstkf;

  BlockLoad(MainStockRec);
  tolocation = InternMovp.ToLocation;
  if (blank(tolocation)) then begin
    tolocation = MainStockRec.MainStock;
  end;
  frlocation = InternMovp.FrLocation;
  if (blank(frlocation)) then begin
    frlocation = MainStockRec.MainStock;
  end;
  rwcnt = MatRowCnt(InternMovp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(InternMovp,i,InternMovrw);
    if (rebuildf==false) then begin
      if (InternMovrw.Quant!=0) then begin
        t = InternMovrw.Quant;
        costp = blankval;
        UpdateInternalSerStock(InternMovrw.ArtCode,tolocation,InternMovrw.SerialNr,t,costp);
        t = -InternMovrw.Quant;
        costp = blankval;
        UpdateInternalSerStock(InternMovrw.ArtCode,frlocation,InternMovrw.SerialNr,t,costp);
        for (j=0;j<i;j=j+1) begin
          MatRowGet(InternMovp,j,InternMov2rw);
          if (InternMovrw.ArtCode==InternMov2rw.ArtCode and InternMovrw.SerialNr==InternMov2rw.SerialNr) then begin goto LInternMovUpdateINrs; end;
        end;
        qty = blankval;
        for (j=i;j<rwcnt;j=j+1) begin
          MatRowGet(InternMovp,j,InternMov2rw);
          if (InternMovrw.ArtCode==InternMov2rw.ArtCode and InternMovrw.SerialNr==InternMov2rw.SerialNr) then begin
            qty = qty + InternMov2rw.Quant;
          end;
        end;
        IntINrsr.ItemCode = InternMovrw.ArtCode;
        IntINrsr.Variety = "";
        if (ReadFirstItem(InternMovrw.ArtCode,INr,false,false)) then begin
          if (InternMovrw.ArtCode!=INr.Code) then begin
            IntINrsr.Variety = right(InternMovrw.ArtCode,len(InternMovrw.ArtCode)-len(INr.Code));
            IntINrsr.ItemCode = INr.Code;
          end;
        end;
        IntINrsr.Location = frlocation;
        IntINrsr.FileName = "InternMovAVc";
        IntINrsr.FIFO = 0;
        IntINrsr.Row = i;
        IntINrsr.TransNr = InternMovp.SerNr;
        IntINrsr.TransDate = InternMovp.TransDate;
        IntINrsr.StockAffectf = 1;
        IntINrsr.Qty = -qty;
        if (RecordStore(IntINrsr,false)) then begin end;    
        IntINrsr.ItemCode = InternMovrw.ArtCode;
        IntINrsr.Location = tolocation;
        IntINrsr.FileName = "InternMovVc";
        IntINrsr.FIFO = 1;
        IntINrsr.Row = i;
        IntINrsr.TransNr = InternMovp.SerNr;
        IntINrsr.TransDate = InternMovp.TransDate;
        IntINrsr.StockAffectf = 1;
        IntINrsr.Qty = qty;
        if (RecordStore(IntINrsr,false)) then begin end;
      end;
    end;
    if (importf==false) then begin
      costp = blankval;
      StoreItemHistory_Out(MainStockRec,InternMovrw.ArtCode,InternMovrw.SerialNr,frlocation,"InternMovAVc",InternMovp.TransDate,InternMovrw.Quant,1,t*costp,InternMovp.SerNr,i,0,"",TSr,usetmpstkf);
      StoreItemHistory_In(MainStockRec,InternMovrw.ArtCode,InternMovrw.SerialNr,tolocation,"InternMovVc",InternMovp.TransDate,InternMovp.TransDate,InternMovrw.Quant,1,t*costp,InternMovp.SerNr,i,0,"","",TSr,usetmpstkf);
    end;
LInternMovUpdateINrs:;
  end;
  RETURN;
END;

updating procedure InternMovUpdateRentIN(record InternMovVc InternMovp)
BEGIN
  record RentINVc RentINr;
  record RentINVc oldRentINr;
  row InternMovVc InternMovrw;
  Integer rwcnt,i,j;
  record MainStockBlock MainStockRec;
  string 255 tolocation;

  BlockLoad(MainStockRec);
  tolocation = InternMovp.ToLocation;
  if (blank(tolocation)) then begin
    tolocation = MainStockRec.MainStock;
  end;
  rwcnt = MatRowCnt(InternMovp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(InternMovp,i,InternMovrw);
    if ((InternMovrw.Quant!=0) and (nonblank(InternMovrw.SerialNr))) then begin
      RentINr.Code = InternMovrw.ArtCode;
      RentINr.SerialNr = InternMovrw.SerialNr;
      if (ReadFirstMain(RentINr,2,true)) then begin
        RecordCopy(oldRentINr,RentINr);
        RentINr.OrgLocation = tolocation;
        if (RecordUpdate(oldRentINr,RentINr,false)==0) then begin end;
      end;
    end;
  end;
  RETURN;
END;

global
updating function LongInt InternMovVcRecordSaveAfter(var record InternMovVc InternMovr,record InternMovVc InternMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (InternMovr.OKFlag!=0) then begin
    InternMovUpdateINrs(InternMovr,false,false);
    InternMovUpdateStock(InternMovr);
    InternMovUpdateRentIN(InternMovr);
  end;
  InternMovVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt InternMovVcRecordUpdateAfter(var record InternMovVc InternMovr,record InternMovVc InternMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (InternMovr.OKFlag!=0) then begin
    InternMovUpdateINrs(InternMovr,false,false);
    InternMovUpdateStock(InternMovr);
    InternMovUpdateRentIN(InternMovr);
  end;
  InternMovVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt InternMovVcRecordImport(var record InternMovVc InternMovr,record InternMovVc InternMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if (InternMovr.OKFlag!=0) then begin
    InternMovUpdateINrs(InternMovr,true,false);
    InternMovUpdateStock(InternMovr);
  end;
  if (InternMovr.SumQuant==0) then begin
    InternMovSumUp(InternMovr);
  end;  
  InternMovVcRecordImport = res;
  RETURN;
END;

global
updating function LongInt InternMovVcRecordCheck(var record InternMovVc InternMovp,record InternMovVc InternMov2p,LongInt stat,LongInt check)
BEGIN
  LongInt res,sernr;
  row InternMovVc InternMovrw;
  record INVc INr;
  record LocationVc LocRec;
  record MainStockBlock MainStockRec;
  record SRBlock SRRec;
  record InternMovVc locInternMovr;
  row InternMovVc InternMov2rw;            
  Integer i,rwcnt,j,cnt,errcode;
  Integer insertmode,updatemode;
  LongInt oldnr,newnr;
  Boolean transf,gentrans;
  val t,prev;
  string 10 location;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  BlockLoad(SRRec);
  BlockLoad(MainStockRec);
  oldnr = InternMovp.SerNr; 
  transf = false;
  if (InternMovp.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (InternMov2p.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (InternMovp.OKFlag==0) then begin
    if (InternMov2p.OKFlag!=0) then begin
      RecordCheckError(22053,"",-1,"SerNr");      
      res = -1;
      goto LInternMovVcRecordCheck;
    end;
  end;
  if (stat==updatemode) then begin
    if (InternMovp.SerNr<=0) and (InternMov2p.OKFlag==0) then begin
      InternMovp.SerNr = InternMov2p.SerNr;
    end;
  end;      
  if (InternMovp.SerNr<=0) then begin
    InternMovp.SerNr = NextSerNr("InternMovVc",InternMovp.TransDate,-1,false,"");
  end;
  if ((stat==insertmode) or (InternMovp.SerNr!=InternMov2p.SerNr)) then begin
    locInternMovr.SerNr = InternMovp.SerNr;
    if (ReadFirstMain(locInternMovr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LInternMovVcRecordCheck;
    end;
  end;
  if (Date2Test("InternMovVc",InternMovp.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LInternMovVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,InternMovp.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LInternMovVcRecordCheck;
  end;
  if (MainStockRec.requireLocation!=0) then begin
    if (blank(InternMovp.FrLocation)) then begin
      RecordCheckError(1058,"",-1,"FrLocation");      
      res = -1;
      goto LInternMovVcRecordCheck;
    end;
    if (blank(InternMovp.ToLocation)) then begin
      RecordCheckError(1058,"",-1,"ToLocation");      
      res = -1;
      goto LInternMovVcRecordCheck;
    end else begin
      LocRec.Code = InternMovp.ToLocation;
      if (ReadFirstMain(LocRec,1,true)==false) then begin
        RecordCheckError(1120,InternMovp.ToLocation,-1,"ToLocation");      
        res = -1;
        goto LInternMovVcRecordCheck;
      end;
    end;
  end;
  location = InternMovp.FrLocation;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  LocRec.Code = location;
  if (nonblank(location)) then begin
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      RecordCheckError(1120,location,-1,"FrLocation");      
      res = -1;
      goto LInternMovVcRecordCheck;
    end;
  end;
  rwcnt = MatRowCnt(InternMovp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(InternMovp,i,InternMovrw);
    if (nonblank(InternMovrw.ArtCode)) then begin
      if (ReadFirstItem(InternMovrw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
        res = -1;
        goto LInternMovVcRecordCheck;
      end;
      if (INr.ItemType==2) then begin
         RecordCheckError(1247,"",i,"Quant");      
         res = -1; 
         goto LInternMovVcRecordCheck;
      end;
      if ((check!=0) and (transf)) then begin
        if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
          if (blank(InternMovrw.SerialNr)) then begin
            if (InternMovrw.Quant!=0) then begin
              RecordCheckError(1239,"",i,"SerialNr");      
              res = -1; 
              goto LInternMovVcRecordCheck;
            end;
          end;
          if (InternMovrw.Quant>0) then begin
            if (INr.SerNrf==1) then begin
              if (IntSerialNrAvail(InternMovrw.ArtCode,InternMovrw.SerialNr,location,InternMovrw.Quant)==false) then begin
                RecordCheckError(1240,"",i,"SerialNr");      
                res = -1; 
                goto LInternMovVcRecordCheck;
              end;
            end else begin
              prev = 0;
              for (cnt=0;cnt<i;cnt=cnt+1) begin
                MatRowGet(InternMovp,cnt,InternMov2rw);
                if (((InternMov2rw.ArtCode==InternMovrw.ArtCode) and (InternMov2rw.SerialNr==InternMovrw.SerialNr))) then begin
                  prev = prev + InternMov2rw.Quant;
                end;
              end;
              prev = prev + InternMovrw.Quant;
              if (IntSerialNrAvail(InternMovrw.ArtCode,InternMovrw.SerialNr,location,prev)==false) then begin
                RecordCheckError(1240,"",i,"SerialNr");      
                res = -1; 
                goto LInternMovVcRecordCheck;
              end;
            end;
          end;
          if (INr.SerNrf==1) then begin
            if (InternMovrw.Quant>1) then begin
              RecordCheckError(1242,"",i,"SerialNr");      
              res = -1; 
              goto LInternMovVcRecordCheck;
            end;
            if (InternMovrw.Quant>0) then begin
              for (j=0;j<i;j=j+1) begin
                MatRowGet(InternMovp,j,InternMov2rw);
                if ((InternMovrw.ArtCode==InternMov2rw.ArtCode) and (InternMovrw.SerialNr==InternMov2rw.SerialNr)) then begin
                  RecordCheckError(1242,"",i,"SerialNr");      
                  res = -1; 
                  goto LInternMovVcRecordCheck;
                end;
              end;
            end;
          end;
        end else begin
          prev = 0;
          for (cnt=0;cnt<i;cnt=cnt+1) begin
            MatRowGet(InternMovp,cnt,InternMov2rw);
            if (InternMov2rw.ArtCode==InternMovrw.ArtCode and InternMovrw.SerialNr==InternMov2rw.SerialNr) then begin
              prev = prev + InternMov2rw.Quant;
            end;
          end;
          if (INr.ItemType==1) then begin
            prev = prev + InternMovrw.Quant;
            if (HALGetIntStockQty(InternMovrw.ArtCode,location,InternMovp.TransDate)<prev) then begin
              RecordCheckError(1247,"",i,"ArtCode");      
              res = -1; 
              goto LInternMovVcRecordCheck;
            end;
          end;
        end;
      end;
    end;
  end;
LInternMovVcRecordCheck:;
  if (res!=0) then begin
    InternMovp.SerNr = oldnr;
  end;
  InternMovVcRecordCheck = res;
  RETURN;
END;

global
function LongInt InternMovVcRecordRemoveTest(var record InternMovVc InternMovr,record InternMovVc InternMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (InternMovr.OKFlag<>0) then begin
    res = 0;
  end;
  InternMovVcRecordRemoveTest = res;
  RETURN;
END;

