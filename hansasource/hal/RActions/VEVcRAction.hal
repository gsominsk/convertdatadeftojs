external procedure SplitEclass(string,var Array string);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external procedure GetSalesGroup(string,var string);

global
function LongInt VEVcRecordInIndex(record VEVc VEr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (VEr.BlockedFlag!=0) then begin 
    if (indexname=="ActCode")  then begin res = 0; end;
    if (indexname=="ActName")  then begin res = 0; end;
    if (indexname=="ActGroup")  then begin res = 0; end;
    if (indexname=="ActSearchKey")  then begin res = 0; end;
  end;
  VEVcRecordInIndex = res;
  RETURN;
END;

procedure NextVECode(record VEVc VEp)
BEGIN
  LongInt t;
  record SRBlock SRRec;

  BlockLoad(SRRec);
  t = FirstInRange(SRRec.LastVECode,10);
  if (t!=-1) then begin
    t = t + 1;
    VEp.Code = t;
  end;
  RETURN;
END;

global
function LongInt VEVcRecordDefaults(var record VEVc VEr,record VEVc VE2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 255 tstr;
  
  if (SingleUserMode) then begin
    NextVECode(VEr);
  end;
  VEr.SalesMan = CurrentUser;
  GetSalesGroup(VEr.SalesMan,tstr);
  VEr.SalesGroup = tstr; 
  VEVcRecordDefaults = res; 
  RETURN;
END;

global
updating function LongInt VEVcRecordDuplicate(var record VEVc VEr,record VEVc VE2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (SingleUserMode) then begin
    NextVECode(VEr);
  end else begin
    VEr.Code = "";
  end;
  VEVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt VEVcRecordSaveAfter(var record VEVc VEr,record VEVc VE2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record SRBlock SRRec;

  BlockLoad(SRRec);
  SRRec.LastVECode = VEr.Code;
  BlockStore(SRRec);
  VEVcRecordSaveAfter = res;
  RETURN;
END;

function Boolean GetWithHoldPayMode(string paymode,var string calcform)
BEGIN
  record PMBlock PMRec;
  row PMBlock pmrw;  
  Integer i,j,rwcnt;
  Boolean res;
  Array string 20 whpmodes;

  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  SplitEclass(paymode,whpmodes);  
  while (nonblank(whpmodes[j])) begin
    res = false;
    calcform = "";
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.CheckType==4) then begin
        if (whpmodes[j]==pmrw.Code) then begin
          if (nonblank(pmrw.CalcForm)) then begin
            calcform = pmrw.CalcForm;
            res = true;
          end;
        end;
      end;
    end;
    j = j + 1;
  end;  
  GetWithHoldPayMode = res;
  RETURN;
END;

global
updating function LongInt VEVcRecordCheck(record VEVc VEr,record VEVc VE2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 20 calcform;
  record VEVc lVEr;
  Integer insertmode,updatemode;
  string 255 tstr;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (blank(VEr.Code)) then begin
    NextVECode(VEr);
    lVEr.Code = VEr.Code;
    if (ReadFirstMain(lVEr,1,true)) then begin
      RecordCheckError(1547,"",-1,"Code");      
      res = -1;
      goto LVEVcRecordCheck;
    end;
  end;  
  if (stat==insertmode) then begin
    lVEr.Code = VEr.Code;
    if (ReadFirstMain(lVEr,1,true)) then begin
      RecordCheckError(1547,VEr.Code,-1,"Code");      
      res = -1;
      goto LVEVcRecordCheck;
    end;
  end;
  if (len(VEr.Code)<=0) then begin
    RecordCheckError(1205,"",-1,"Code");      
    res = -1;
    goto LVEVcRecordCheck;
  end;
  res = CheckVATNrMask(VEr.VATNr,VEr.CountryCode,0,tstr);
  if (res) then begin
    RecordCheckError(res,tstr,-1,"VATNr");      
    res = -1;
    goto LVEVcRecordCheck;
  end;
  if (nonblank(VEr.VATNr)) then begin
    lVEr.VATNr = VEr.VATNr;
    if (ReadFirstKey("VATNr",lVEr,1,true)) then begin
      if (VEr.Code!=lVEr.Code) then begin
        MessageBox(1706,": " & lVEr.Code);
//        RecordCheckError(1706,VEr.Code,-1,"Code");      
      end;
    end;
  end;
  if (nonblank(VEr.WithPayMode)) then begin
    if (GetWithHoldPayMode(VEr.WithPayMode,calcform)==false) then begin
      RecordCheckError(1277,"",-1,"Code");      
      res = -1;
      goto LVEVcRecordCheck;
    end;
  end;
LVEVcRecordCheck:;
  VEVcRecordCheck = res;
  RETURN;
END;

global
function LongInt VEVcRecordRemoveTest(var record VEVc VEr,record VEVc VE2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record VSVc VSr;

  res = 1;
  VSr.VECode = VEr.Code;
  if (ReadFirstMain(VSr,1,true)) then begin
    MessageBox(2175,"");
    res = 0;
  end;
  
LVEVcRecordRemoveTest:;
  VEVcRecordRemoveTest = res;  
  RETURN;
END;
