
global
function LongInt EnabExceptionVcRecordDefaults(var record EnabExceptionVc EnabExceptionr,record EnabExceptionVc EnabException2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  EnabExceptionr.SerNr = -1;  
  EnabExceptionr.TransDate = CurrentDate;
  EnabExceptionr.TransTime = CurrentTime;
  EnabExceptionr.Closed = 0;
  if (SingleUserMode) then begin
    EnabExceptionr.SerNr = NextSerNr("EnabExceptionVc",EnabExceptionr.TransDate,-1,false,"");
  end;
  EnabExceptionVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt EnabExceptionVcRecordDuplicate(var record EnabExceptionVc EnabExceptionr,record EnabExceptionVc EnabException2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  EnabExceptionr.SerNr = -1;
  EnabExceptionr.TransDate = CurrentDate;
  EnabExceptionr.TransTime = CurrentTime;
  EnabExceptionr.Closed = 0;
  if (SingleUserMode) then begin
    EnabExceptionr.SerNr = NextSerNr("EnabExceptionVc",EnabExceptionr.TransDate,-1,false,"");
  end;
  EnabExceptionVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt EnabExceptionVcRecordRemoveTest(var record EnabExceptionVc EnabExceptionr,record EnabExceptionVc EnabException2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (true) then begin
    res = 1;
  end;
  EnabExceptionVcRecordRemoveTest = res;
  RETURN;
END;

global
function LongInt EnabExceptionVcRecordSave(var record EnabExceptionVc EnabExceptionr,record EnabExceptionVc EnabException2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  EnabExceptionr.TransDate = CurrentDate;
  EnabExceptionr.TransTime = CurrentTime;
  EnabExceptionVcRecordSave = res;
  RETURN;
END;

global
function LongInt EnabExceptionVcRecordCheck(var record EnabExceptionVc EnabExceptionr,record EnabExceptionVc EnabException2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (EnabExceptionr.SerNr==-1) then begin
    EnabExceptionr.SerNr = NextSerNr("EnabExceptionVc",EnabExceptionr.TransDate,-1,false,"");
  end;
  res = 0;
LEnabExceptionVcRecordCheck:;  
  EnabExceptionVcRecordCheck = res;
  RETURN;
END;

global
function Boolean EnabExceptionDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record EnabExceptionVc EnabExceptionr;
  
  res = true;
  GetWindowRecord(wn,EnabExceptionr);
  if (EnabExceptionr.Closed>0) then begin
    res = false;
  end;
  EnabExceptionDClassUpdateTest = res;
  RETURN;
END;

