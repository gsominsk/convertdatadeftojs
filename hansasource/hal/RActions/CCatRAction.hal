external function Boolean HasCategories();
external procedure AutomatedSalesOrderly(string);
external function Boolean IsControlAccount(string,Boolean,Boolean);

global
function LongInt CCatVcRecordCheck(var record CCatVc CCatr,record CCatVc CCat2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record AccVc Accr;

  res = 0;
  if (nonblank(CCatr.ARAcc)) then begin
    Accr.AccNumber = CCatr.ARAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,CCatr.ARAcc,-1,"ARAcc");      
      res = -1;
      goto LCCatVcRecordCheck;
    end;
    if (IsControlAccount(CCatr.ARAcc,true,true)==false) then begin
      RecordCheckError(1099,"",-1,"ARAcc");      
      res = -1; 
      goto LCCatVcRecordCheck;
    end;  
  end;  
  if (nonblank(CCatr.AccAP)) then begin
    Accr.AccNumber = CCatr.AccAP;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,CCatr.AccAP,-1,"AccAP");      
      res = -1;
      goto LCCatVcRecordCheck;
    end;
  end;
  if (IsControlAccount(CCatr.AccAP,false,true)==false) then begin
    RecordCheckError(1099,"",-1,"AccAP");      
    res = -1;
    goto LCCatVcRecordCheck;
  end;    
LCCatVcRecordCheck:;  
  CCatVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt CCatVcRecordSave(var record CCatVc CCatr,record CCatVc CCat2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (HasCategories) then begin
    AutomatedSalesOrderly("HasPriceLists+OK_CCatVc");
  end;
  CCatVcRecordSave = res; 
  return;
end;

global 
function Boolean CCatVcRecordShouldBeSynchronised(record CCatVc CCatr,string tagstr)
begin
  Boolean res;
  
  res = true;
  CCatVcrecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean CCatVcRecordSync(record CCatVc CCatr,string tagstr)
begin
  Boolean res;
  
  res = true;
  CCatVcRecordSync = res;
  return;
end;
