external procedure AutomatedSalesOrderly(string);
external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure B1ToB2StrValRM(string,val,val,var string,roundmode);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external function Integer CheckObjs(string,string,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure AddPortugueseSAFTHashToStockMov(var record StockMovVc);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external procedure FindNextStockMovVcOfficialSerialNr(var record StockMovVc,Integer);

external procedure WarnFutureDate(Boolean,Date);
external updating procedure UpdateStockResFromStockMov(record StockMovVc);
external function Boolean ItemHistExists(string,LongInt);
external function roundmode DefaultRoundMode();
external updating procedure CreateAutoProduction(record StockMovVc);
external updating procedure StockMovCreateStockMovement(record StockMovVc);
external updating function val NextLocOKNr(string);
external updating function Boolean UpdateForkLiftQueue(record StockMovVc,Boolean);
external updating procedure StockMovUpdateReserved(record StockMovVc,Boolean,Boolean);
external updating function Boolean UpdateIntOrderFromStockMov(record StockMovVc,record StockMovVc,Boolean);
external updating procedure StockMovSetPositionStatus(record StockMovVc,Integer);
external function Boolean CanOKStockRecord(var Integer);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2StrVal(string,val,val,var string);
external procedure B1ToB2Val(val,val,val,var val);
external procedure StockMovSumUp(var record StockMovVc);
external updating procedure UpdateInStockMovFromStockMov(record StockMovVc,Boolean);
external updating procedure StockMovUpdateStock(record StockMovVc,record StockMovVc,Boolean,Boolean,Boolean);
external updating procedure StockMovUpdateItemHist(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateCostPrice(record StockMovVc,record StockMovVc);
external updating procedure StockMovUpdateSerialNr(record StockMovVc,record StockMovVc,Boolean);
external procedure GetConsigmentStockAcc(string,string,var string);
external function Boolean ConsigmentStock(string,string,Date);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external function Boolean TransInFiscal(Date);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PUCalcPerc(val,string,var val);
external procedure GetITStockAcc(string,var string);
external procedure AddEuroTrRowType(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer);
external procedure AddEuroTrRowTypeQty(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer,val);
external function Boolean GetAccName(string,var string,Integer);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function LongInt StockMovVcRecordDefaults(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  
  StockMovr.SerNr = -1;
  StockMovr.OrdTransDate = CurrentDate;
  if (SingleUserMode) then begin
    StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.OrdTransDate,-1,false,"");
  end;
  curcode = "";
  GetFullCurncyRate(curcode,StockMovr.OrdTransDate,fr,to1,to2,br1,br2);
  StockMovr.CurncyCode = curcode;
  StockMovr.FrRate = fr;
  StockMovr.ToRateB1 = to1; 
  StockMovr.ToRateB2 = to2;
  StockMovr.BaseRate1 = br1;
  StockMovr.BaseRate2 = br2;
  StockMovr.TotQty = blankval;
  StockMovr.TotWeight = blankval;
  StockMovr.TotVolume = blankval;
  StockMovr.ProdSerNr = -1;
  StockMovr.IntORNo = -1;
  StockMovr.FileName = "";
  StockMovr.TransNr = -1;
  if (HasLocalization("PRT")) then begin
    StockMovr.PlanSendTime = "";
    StockMovr.PlanSendDate = "";
  end;
  StockMovr.TerminalID = CurTerminalID;;
  StockMovr.BranchID = CurBranchID;
  StockMovr.LocalMachineCode = CurMachineName;
  StockMovr.OfficialSerNr = "";
  StockMovr.OfficialSerNrSerie = "";

  StockMovVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt StockMovVcRecordDuplicate(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  Date bd;
  Time bt;

  StockMovr.SerNr = -1;
  StockMovr.OKFlag = 0;
  if (SingleUserMode) then begin
    StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.TransDate,-1,false,"");
  end;
  curcode = StockMovr.CurncyCode;
  GetFullCurncyRate(curcode,StockMovr.TransDate,fr,to1,to2,br1,br2);
  StockMovr.IntORNo = -1;
  StockMovr.ProdSerNr = -1;
  StockMovr.OrderNr = -1;
  StockMovr.FileName = "";
  StockMovr.SHNr = -1;
  StockMovr.TransNr = -1;
  StockMovr.TreatedFlag = 0;
  StockMovr.CurncyCode = curcode;
  StockMovr.FrRate = fr;
  StockMovr.ToRateB1 = to1; 
  StockMovr.ToRateB2 = to2;
  StockMovr.BaseRate1 = br1;
  StockMovr.BaseRate2 = br2;
  StockMovr.FrLocOKNr = blankval;
  StockMovr.ToLocOKNr = blankval;
  StockMovr.FrThrouLocOKNr = blankval;
  StockMovr.ToThrouLocOKNr = blankval;
  StockMovr.SentOKFlag = 0;
  StockMovr.Reserved = 0;
  StockMovr.OrdFlag = 0;
  StockMovr.RegDate = bd;
  StockMovr.RegTime = bt;
  WarnFutureDate(true,StockMovr.SentTransDate);
  WarnFutureDate(true,StockMovr.TransDate);
  StockMovr.OfficialSerNr = "";
  StockMovr.TerminalID = CurTerminalID;;
  StockMovr.BranchID = CurBranchID;
  StockMovr.LocalMachineCode = CurMachineName;
  StockMovr.Hash = "";
  StockMovr.HashKeyVersion = 0;
  StockMovr.TaxAdminServSeal = "";    
  StockMovr.OfficialSerNrSerie = "";
  StockMovr.InvoiceNr = -1;
  if (HasLocalization("PRT")) then begin
    StockMovr.PlanSendTime = "";
    StockMovr.PlanSendDate = "";
    StockMovr.InvDate = "";
    StockMovr.InvoiceOfficialSerNr = "";
    StockMovr.InvRegTime = "";
    StockMovr.InvOfficialSerNrSerie = "";
    StockMovr.InvOfficialSerNr2 = "";
    StockMovr.InvOfficialSerNr2Serie = "";
  end;  
  StockMovVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt StockMovVcRecordReset(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  StockMovr.OKFlag = 0;
  StockMovVcRecordReset = res;
  RETURN;
END;

procedure GetStockMovStockAcc(Integer ItemGroupAccounts,record LocationVc Locp,string itcode,string accusageacc,var string stockfracc)
BEGIN
  stockfracc = "";  
  stockfracc = Locp.StockAcc;
  if (nonblank(stockfracc)) then begin
    goto LGetStockMovFromStockAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITStockAcc(itcode,stockfracc);
    if (nonblank(stockfracc)) then begin
      goto LGetStockMovFromStockAcc;
    end;
  end;
  stockfracc = accusageacc;
  if (nonblank(stockfracc)) then begin
    goto LGetStockMovFromStockAcc;
  end;
LGetStockMovFromStockAcc:;  
  RETURN;
END;

global
function Integer AddStockMovCostRows(record TRVc gTRp,record LocationVc LocFrp,record LocationVc LocTop,record CostAccBlock CostAccRec,record AccBlock ARAccRec,
                                    record StockMovVc StockMovp,row StockMovVc StockMovrw,
                                    Boolean dc1,Boolean dc2,Boolean sumupf,val br1,val br2,var val TotSum,Integer IntYc)
BEGIN
  Integer res;
  Boolean lsumupf;
  string 255 frobjstr,toobjstr,locobjstr;
  val rs2,rs,t;
  record INVc INr;
  string 10 stockfracc,stocktoacc;
  string 255 stockfrtxt,stocktotxt,errstr;
  Date blankd;
  
  lsumupf = sumupf;
  frobjstr = StockMovp.Objects;
  if (CostAccRec.ObjOnStock!=0) then begin
    if (nonblank(frobjstr)) and (nonblank(LocFrp.Objects)) then begin
      frobjstr = frobjstr & ",";
    end;
    frobjstr = frobjstr & LocFrp.Objects;
  end;
  if (nonblank(frobjstr)) and (nonblank(StockMovrw.Objects)) then begin
    frobjstr = frobjstr & ",";
  end;
  frobjstr = frobjstr & StockMovrw.Objects;

  toobjstr = StockMovp.Objects;
  if (CostAccRec.ObjOnStock!=0) then begin
    if (nonblank(toobjstr)) and (nonblank(LocTop.Objects)) then begin
      toobjstr = toobjstr & ",";
    end;
    toobjstr = toobjstr & LocTop.Objects;
  end;
  if (nonblank(toobjstr)) and (nonblank(StockMovrw.Objects)) then begin
    toobjstr = toobjstr & ",";
  end;
  toobjstr = toobjstr & StockMovrw.Objects;

  if (IntYc==SentSTMovYc) then begin
    rs2 = StockMovrw.SentOldPrice*StockMovrw.SentQuant;
    if (blank(rs2)) then begin
      rs2 = FindCostPrice(StockMovrw.ArtCode,StockMovp.FrLocation,StockMovrw.SerialNr,StockMovrw.SentQuant,0,false);
    end;
  end else begin
    rs2 = StockMovrw.OldPrice*StockMovrw.Quant;
    if (blank(rs2)) then begin
      rs2 = FindCostPrice(StockMovrw.ArtCode,StockMovp.FrLocation,StockMovrw.SerialNr,StockMovrw.Quant,0,false);
    end;
  end;
  if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin
  end;
  GetStockMovStockAcc(CostAccRec.ItemGroupAccounts,LocFrp,INr.Group,ARAccRec.StockAcc,stockfracc);
  locobjstr = LocFrp.Objects;
  GetConsigmentStockAcc(INr.Code,StockMovrw.SerialNr,stockfracc);
  if (ConsigmentStock(INr.Code,StockMovrw.SerialNr,blankd)) then begin
    lsumupf = true;
  end;
  if (GetAccName(stockfracc,stockfrtxt,60)==false) then begin
    res = 2120;
    goto LAddStockMovCostRows;
  end;
  rs2 = Round(rs2,DefaultRoundMode);
  locobjstr = AddObjectToObjectList(frobjstr,locobjstr);
  res = CheckObjs(stockfracc,locobjstr,errstr);
  if (res!=0) then begin
    goto LAddStockMovCostRows;
  end;

  AddEuroTrRowTypeQty(gTRp,stockfracc,locobjstr,"",stockfrtxt,rs2,br1,br2,lsumupf,dc2,TotSum,false,"","","",kTransactionRowTypeStock,StockMovrw.Quant);
  if (IntYc==SentSTMovYc) then begin
    if (nonblank(StockMovrw.SentExtraSCost)) then begin
      PUCalcPerc(rs2,StockMovrw.SentExtraSCost,t);
      t = t*StockMovrw.Quant;
      if (GetAccName(ARAccRec.StockGainAcc,stockfrtxt,60)==false) then begin
        res = 2119;
        goto LAddStockMovCostRows;
      end;
      AddEuroTrRowType(gTRp,ARAccRec.StockGainAcc,toobjstr,"",stockfrtxt,t,br1,br2,lsumupf,dc2,TotSum,false,"","","",kTransactionRowTypeStock);
    end;
    t = StockMovrw.SentQuant*StockMovrw.SentNewPrice;
  end else begin
    if (nonblank(StockMovrw.ExtraSCost)) then begin
      PUCalcPerc(rs2,StockMovrw.ExtraSCost,t);
      t = t*StockMovrw.Quant;
      if (GetAccName(ARAccRec.StockGainAcc,stockfrtxt,60)==false) then begin
        res = 2119;
        goto LAddStockMovCostRows;
      end;
      AddEuroTrRowType(gTRp,ARAccRec.StockGainAcc,toobjstr,"",stockfrtxt,t,br1,br2,lsumupf,dc2,TotSum,false,"","","",kTransactionRowTypeStock);
    end;
    t = StockMovrw.Quant*StockMovrw.NewPrice;
  end;
  rs2 = MulRateToBase1(StockMovp.CurncyCode,t,StockMovp.FrRate,StockMovp.ToRateB1,StockMovp.ToRateB2,StockMovp.BaseRate1,StockMovp.BaseRate2,DefaultCurRoundOff);
  GetStockMovStockAcc(CostAccRec.ItemGroupAccounts,LocTop,INr.Group,ARAccRec.StockAcc,stocktoacc);
  locobjstr = LocTop.Objects;
  GetConsigmentStockAcc(INr.Code,StockMovrw.SerialNr,stocktoacc);
  locobjstr = AddObjectToObjectList(toobjstr,locobjstr);
  res = CheckObjs(stocktoacc,locobjstr,errstr);
  if (res!=0) then begin
    goto LAddStockMovCostRows;
  end;
  if (GetAccName(stocktoacc,stocktotxt,60)==false) then begin
    res = 2120;
    goto LAddStockMovCostRows;
  end;
  rs2 = Round(rs2,DefaultRoundMode);
  AddEuroTrRowTypeQty(gTRp,stocktoacc,locobjstr,"",stocktotxt,rs2,br1,br2,lsumupf,dc1,TotSum,false,"","","",kTransactionRowTypeStock,StockMovrw.Quant);
LAddStockMovCostRows:;
  AddStockMovCostRows = res;
  RETURN;
END;

global
function Integer MakeTransFromStockMov(record TRVc gTRp,record StockMovVc StockMovp,record LocationVc LocFrp,record LocationVc LocTop,Boolean rpt,Integer IntYc)
BEGIN
  Integer res;
  record CostAccBlock CostAccRec;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  record TRVc locTRr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  string 255 ftxt;
  string 255 tstr,objstr;
  val t,frrate,to1,to2,br1,br2;
  val rs2,TotSum;
  Boolean dc1,dc2,sumupf,testf;
  Integer oldstyle;
  transaction string 255 gRuniningMaint;

  BlockLoad(ARAccRec);
  BlockLoad(TRGenRec);
  BlockLoad(CostAccRec);
  sumupf = true;
  if (CostAccRec.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  dc1 = true;
  dc2 = false;
  rwcnt = MatRowCnt(StockMovp);
  frrate = StockMovp.FrRate;
  to1 = StockMovp.ToRateB1;
  to2 = StockMovp.ToRateB2;
  br1 = StockMovp.BaseRate1;
  br2 = StockMovp.BaseRate2;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.StockMovGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromStockMov;
    end;
    if (IntYc==SentSTMovYc) then begin
      if ((nonblankdate(TRGenRec.StockMovStartDate)) and
        (StockMovp.SentTransDate<TRGenRec.StockMovStartDate)) then begin 
        testf = true;
      end;
    end else begin
      if ((nonblankdate(TRGenRec.StockMovStartDate)) and
        (StockMovp.TransDate<TRGenRec.StockMovStartDate)) then begin 
        testf = true;
      end;
    end;
    if (testf) then begin
      res = 0;
      goto LMakeTransFromStockMov;
    end;
  end;
  gTRp.IntYc = IntYc;
  gTRp.Number = StockMovp.SerNr;
  if (rpt==false) then begin
    locTRr.Number = gTRp.Number;
    locTRr.IntYc = gTRp.IntYc;
    if (ReadFirstMain(locTRr,0,true)) then begin
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":  ;
        otherwise
          res = 0;
          goto LMakeTransFromStockMov;
      end;
    end;
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  if (IntYc==SentSTMovYc) then begin
    gTRp.TransDate = StockMovp.SentTransDate;
  end else begin
    gTRp.TransDate = StockMovp.TransDate;
  end;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromStockMov;
  end;
  if (ProgramType!=typHansaRaama) then begin
    if (nonblank(StockMovp.CurncyCode)) then begin
      ftxt = ftxt & StockMovp.CurncyCode;
      ftxt = ftxt & " ";
      GetFullCurncyRateText(true,tstr,StockMovp.FrRate,StockMovp.ToRateB1,StockMovp.ToRateB2,StockMovp.BaseRate1,StockMovp.BaseRate2);
      ftxt = ftxt & tstr;
    end else begin
      ftxt = StockMovp.Comment;
    end;
  end else begin
    if (TypeOfCurncy(StockMovp.CurncyCode,oldstyle)==0) then begin
      ftxt = ftxt & StockMovp.CurncyCode;
      ftxt = ftxt & " ";
      GetFullCurncyRateText(true,tstr,StockMovp.FrRate,StockMovp.ToRateB1,StockMovp.ToRateB2,StockMovp.BaseRate1,StockMovp.BaseRate2);
      ftxt = ftxt & tstr;
      ftxt = ftxt & " ";
    end;
    ftxt = ftxt & StockMovp.Comment;
  end;
  gTRp.Comment = ftxt;
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(StockMovp,i,StockMovrw);
    res = AddStockMovCostRows(gTRp,LocFrp,LocTop,CostAccRec,ARAccRec,StockMovp,StockMovrw,dc1,dc2,sumupf,br1,br2,TotSum,IntYc);
    if (res!=0) then begin
      goto LMakeTransFromStockMov;
    end;                                 
  end;
  if (TotSum!=0) then begin
    if (GetAccName(ARAccRec.StockGainAcc,tstr,60)==false) then begin
      res = 2119;
      goto LMakeTransFromStockMov;
    end;
    t = TotSum;
    AddEuroTrRowType(gTRp,ARAccRec.StockGainAcc,"","",tstr,t,br1,br2,true,false,TotSum,false,"","","",kTransactionRowTypeStock);
  end;
  res = 0;
LMakeTransFromStockMov:;
  MakeTransFromStockMov = res;
  RETURN;
END;

global
function Integer CheckStockMovRowFromPosition(record StockMovVc SMp,row StockMovVc StockMovrw,record LocationVc LocFrRec,record INVc INr,
                                              Integer rownr,Boolean sentquantf,var LongInt error,var string errorstr,var integer errorrownr,
                                              var string fieldstr,boolean UnOKedCheckSerialf)
BEGIN
  Integer res;
  string 20 frpos;
  record PISVc PISr;
  val quant;

  frpos = StockMovrw.FrPosCode;
  if (blank(frpos)) then begin
    frpos = SMp.FrPos;
  end;
  if (sentquantf) then begin
    quant = StockMovrw.SentQuant;
  end else begin
    quant = StockMovrw.Quant;
  end;
  if (LocFrRec.RequirePos!=0) then begin
    if (blank(frpos)) then begin
      error = 1854;
      errorstr = frpos;
      errorrownr = -1;
      fieldstr = "FrPos";                 
      res = 1854; 
      goto LCheckStockMovRowFromPosition;
    end;      
    if (INr.ItemType==1) then begin
      if (frpos==LocFrRec.WHMDefPUPosCode) or (frpos==LocFrRec.WHMDefProdPosCode) then begin
      end else begin
        if (nonblank(SMp.ThrouLocation)) then begin
//missing funcionality        
        end else begin
          FindStockValueAtPosition(StockMovrw.ArtCode,LocFrRec.Code,frpos,PISr);
          if (quant>PISr.Instock) and (quant!=0) then begin
            error = 1397;
            errorstr = " " & PISr.Position;
            errorrownr = rownr;
            fieldstr = "Quant";                
            res = 1397; 
            goto LCheckStockMovRowFromPosition;
          end;
        end;
      end;
    end;  
  end;    
LCheckStockMovRowFromPosition:;
  CheckStockMovRowFromPosition = res;
  RETURN;
END;

global
updating function LongInt StockMovVcRecordImport(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  string 255 tstr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  row LegalInvNrBlock LINrbrw;
      
  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    curncy = StockMovr.CurncyCode;
    fr = StockMovr.FrRate;
    to1 = StockMovr.ToRateB1;
    to2 = StockMovr.ToRateB2;
    br1 = StockMovr.BaseRate1;
    br2 = StockMovr.BaseRate2;
    ConvertToDualBase(curncy,StockMovr.TransDate,fr,to1,to2,br1,br2,t,false);
    StockMovr.CurncyCode = curncy;
    StockMovr.FrRate = fr;
    StockMovr.ToRateB1 = to1;
    StockMovr.ToRateB2 = to2;
    StockMovr.BaseRate1 = br1;
    StockMovr.BaseRate2 = br2;
  end;
  if (gBase1ToBase2) then begin
    curncy = StockMovr.CurncyCode;
    fr = StockMovr.FrRate;
    to1 = StockMovr.ToRateB1;
    to2 = StockMovr.ToRateB2;
    br1 = StockMovr.BaseRate1;
    br2 = StockMovr.BaseRate2;
    SwapM4Val(br1,br2);
    SwapM4Val(to1,to2);
    rwcnt = MatRowCnt(StockMovr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      B1ToB2ValRM(StockMovrw.OldPrice,br1,br2,t,GetCostRoundModeRB);
      StockMovrw.OldPrice = t;
      B1ToB2StrValRM(StockMovrw.ExtraSCost,br1,br2,tstr,GetCostRoundModeRB);
      StockMovrw.ExtraSCost = tstr;
      B1ToB2ValRM(StockMovrw.NewPrice,br1,br2,t,GetCostRoundModeRB);
      StockMovrw.NewPrice = t;
      B1ToB2ValRM(StockMovrw.FIFORowVal,br1,br2,t,GetCostRoundModeRB);
      StockMovrw.FIFORowVal = t;
      B1ToB2Val(StockMovrw.BasePrice,br1,br2,t);
      StockMovrw.BasePrice = t;
      B1ToB2ValRM(StockMovrw.SentNewPrice,br1,br2,t,GetCostRoundModeRB);
      StockMovrw.SentNewPrice = t;
      B1ToB2StrValRM(StockMovrw.SentExtraSCost,br1,br2,tstr,GetCostRoundModeRB);
      StockMovrw.SentExtraSCost = tstr;
      B1ToB2ValRM(StockMovrw.SentOldPrice,br1,br2,t,GetCostRoundModeRB);
      StockMovrw.SentOldPrice = t;
      B1ToB2ValRM(StockMovrw.SentFIFORowVal,br1,br2,t,GetCostRoundModeRB);
      StockMovrw.SentFIFORowVal = t;
      MatRowPut(StockMovr,i,StockMovrw);
    end;    
    StockMovr.CurncyCode = curncy;
    StockMovr.FrRate = fr;
    StockMovr.ToRateB1 = to1;
    StockMovr.ToRateB2 = to2;
    StockMovr.BaseRate1 = br1;
    StockMovr.BaseRate2 = br2;
    StockMovSumUp(StockMovr);
  end;    
  if (StockMovr.TotQty==0) then begin
    StockMovSumUp(StockMovr);
  end;  
  if (blank(StockMovr.OfficialSerNrSerie)) then begin
    GetLegalInvNrRow(StockMovr.OfficialSerNr,LINrbrw);
    StockMovr.OfficialSerNrSerie = GetLegalInvoiceNrSerie(LINrbrw,StockMovr.OfficialSerNr);
  end;
  StockMovVcRecordImport = res;
  RETURN;
END;

global
updating function LongInt StockMovVcRecordImportAfter(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer err;
      
  StockMovUpdateSerialNr(StockMovr,StockMov2r,false);
  UpdateInStockMovFromStockMov(StockMovr,false);
  if (StockMovr.OKFlag==0) then begin
    StockMovUpdateStock(StockMovr,StockMov2r,false,false,false);  
  end else begin
    if (ImportingTextBackup==false and CanOKStockRecord(err)==true) then begin
      StockMovUpdateStock(StockMovr,StockMov2r,true,false,false);
      StockMovUpdateCostPrice(StockMovr,StockMov2r);
      StockMovUpdateItemHist(StockMovr,StockMov2r);
    end else begin
      StockMovUpdateStock(StockMovr,StockMov2r,false,false,false);  
    end;
  end;
  
  StockMovVcRecordImportAfter = res;
  RETURN;
END;

global
function LongInt StockMovVcRecordRemoveTest(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (StockMovr.OKFlag!=0) then begin
    if (StockMovr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
      goto LStockMovVcRecordRemoveTest;
    end;
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;
  if (StockMovr.SentOKFlag!=0) then begin
    if (StockMovr.SentTransDate<=DBLockRec.DeleteBeforeDate) then begin
      goto LStockMovVcRecordRemoveTest;
    end;
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;
  if (StockMovr.OrdFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;
LStockMovVcRecordRemoveTest:;
  StockMovVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt StockMovVcRecordRemove(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (StockMovr.IntORNo!=-1) then begin
    if (UpdateIntOrderFromStockMov(StockMov2r,StockMovr,false)) then begin end;
  end;
  if (StockMovr.OKFlag==0) then begin
    StockMovSetPositionStatus(StockMovr,0);
  end;
  UpdateInStockMovFromStockMov(StockMovr,true);
  if (UpdateForkLiftQueue(StockMovr,true)) then begin end;
  
  if (nonblank(StockMovr.OfficialSerNr)) then begin 
    DeleteOffSerNr(StockMovr.SerNr,"StockMovVc");
  end;
  
  StockMovVcRecordRemove = res;
  RETURN;
END;

global
updating function LongInt StockMovVcRecordRemoveAfter(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (StockMovr.Reserved!=0) then begin
    StockMovUpdateReserved(StockMovr,true,true);
  end;
  StockMovVcRecordRemoveAfter = res;
  RETURN;
END;

global
updating function LongInt StockMovVcRecordUpdate(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean ihef;

  ihef = ItemHistExists("StockMovVc",StockMovr.SerNr);
  if ((StockMovr.SentOKFlag==0)) then begin
    if ((StockMovr.OKFlag!=0) and (StockMov2r.OKFlag==0)) then begin
      if (ihef==false) then begin
        StockMovr.FrLocOKNr = NextLocOKNr(StockMovr.FrLocation);
      end;
    end;
  end else begin
    if ((StockMovr.SentOKFlag!=0) and (StockMov2r.SentOKFlag==0)) then begin
      if (ihef==false) then begin
        StockMovr.FrLocOKNr = NextLocOKNr(StockMovr.FrLocation);
        StockMovr.ToThrouLocOKNr = NextLocOKNr(StockMovr.ThrouLocation);
      end;
    end;
  end;
  if ((StockMovr.OKFlag!=0) and (StockMov2r.OKFlag==0)) then begin
    if ((StockMovr.SentOKFlag!=0)) then begin
      if (ihef==false) then begin
        StockMovr.FrThrouLocOKNr = NextLocOKNr(StockMovr.ThrouLocation);
      end;
    end;
    if (ihef==false) then begin
      StockMovr.ToLocOKNr = NextLocOKNr(StockMovr.ToLocation);
    end;
    if (ihef==false) then begin
      StockMovCreateStockMovement(StockMovr);
      StockMovSetPositionStatus(StockMovr,1);
    end;
  end;
  if ((StockMovr.IntORNo!=-1) and (StockMov2r.OKFlag==0)) then begin
    if (UpdateIntOrderFromStockMov(StockMovr,StockMov2r,false)) then begin end;
  end;  
  if (StockMovr.SentOKFlag!=0 and StockMov2r.SentOKFlag==0) then begin
    AddPortugueseSAFTHashToStockMov(StockMovr);
  end else begin
    if (StockMovr.OKFlag!=0) and (StockMov2r.OKFlag==0) and (StockMov2r.SentOKFlag==0) then begin
      AddPortugueseSAFTHashToStockMov(StockMovr);
    end;
  end;
  StockMovVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt StockMovVcRecordSaveAfter(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc Userr;

  Userr.Code = StockMovr.Sign;
  ReadFirstMain(Userr,1,true);
  StockMovr.SalesGroup = Userr.SalesGroup;  
  StockMovUpdateStock(StockMovr,StockMov2r,true,false,false);
  StockMovUpdateCostPrice(StockMovr,StockMov2r);//Cost Price before history
  StockMovUpdateItemHist(StockMovr,StockMov2r);
  StockMovUpdateSerialNr(StockMovr,StockMov2r,false);
  
  if (StockMovr.OKFlag!=0) then begin
    StockMovSetPositionStatus(StockMovr,1);
    CreateAutoProduction(StockMovr);
    AutomatedSalesOrderly("HasIntegratedNL");
  end else begin
    StockMovSetPositionStatus(StockMovr,2);
  end;
  if (StockMovr.IntORNo!=-1) then begin
    if (UpdateIntOrderFromStockMov(StockMovr,StockMov2r,false)) then begin end;
  end;
  UpdateInStockMovFromStockMov(StockMovr,false);
  if (StockMovr.OKFlag!=0) then begin
    if (UpdateForkLiftQueue(StockMovr,true)) then begin end;
  end else begin
    if (UpdateForkLiftQueue(StockMovr,false)) then begin end;
  end;
  if (nonblank(StockMovr.OfficialSerNr)) then begin
    UpdateOffSerNr(StockMovr.SerNr,"StockMovVc",StockMovr.StockMovType,StockMovr.OfficialSerNr,false);
  end;
  StockMovVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt StockMovVcRecordSave(var record StockMovVc StockMovr,record StockMovVc StockMov2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if (blankdate(StockMovr.RegDate)) then begin
    StockMovr.RegDate = CurrentDate;
  end;
  if (blanktime(StockMovr.RegTime)) then begin
    StockMovr.RegTime = CurrentTime;
  end;
  if ((StockMovr.SentOKFlag==0)) then begin
    if (StockMovr.OKFlag!=0) then begin
      StockMovr.FrLocOKNr = NextLocOKNr(StockMovr.FrLocation);
    end;  
  end else begin
    StockMovr.FrLocOKNr = NextLocOKNr(StockMovr.FrLocation);
    StockMovr.ToThrouLocOKNr = NextLocOKNr(StockMovr.ThrouLocation);
  end;
  if (StockMovr.OKFlag!=0) then begin
    if (StockMovr.SentOKFlag!=0) then begin
      StockMovr.FrThrouLocOKNr = NextLocOKNr(StockMovr.ThrouLocation);
    end;
    StockMovr.ToLocOKNr = NextLocOKNr(StockMovr.ToLocation);
    StockMovCreateStockMovement(StockMovr);
  end;
  if (blank(StockMovr.OfficialSerNr)) then begin
    FindNextStockMovVcOfficialSerialNr(StockMovr,-1);
  end;
  if (StockMovr.OKFlag!=0) or (StockMovr.SentOKFlag!=0) then begin
    AddPortugueseSAFTHashToStockMov(StockMovr);
  end;
  StockMovVcRecordSave = res;
  RETURN;
END;

global
function LongInt StockMovVcRecordInIndex(record StockMovVc StockMovr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (StockMovr.InvoiceNr==-1) then begin 
    if (indexname=="InvDate") then begin res = 0; end;
    if (indexname=="InvoiceOfficialSerNr") then begin res = 0; end;
    if (indexname=="InvoiceNr") then begin res = 0; end;
  end;
  StockMovVcRecordInIndex = res;
  return;
end;
