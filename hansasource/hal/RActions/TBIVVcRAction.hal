external procedure AddStageToTBIV(var record TBIVVc);
external procedure GetProjectWIPAcc(record PRAccBlock,string,var string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure B1ToB2StrVal(string,val,val,var string);
external procedure B1ToB2Val(val,val,val,var val);

procedure TBIVVcConvertB1ToB2Date(record TBIVVc TBIVp,string curp,Date datp)
BEGIN
  val fr,to1,to2,br1,br2,t;
  Integer rwcnt,i;
  string 20 curncy,tstr;
  
  curncy = curp;
  GetFullCurncyRate(curncy,datp,fr,to1,to2,br1,br2);
  B1ToB2Val(TBIVp.Price,br1,br2,t);
  TBIVp.Price = t;
  B1ToB2StrVal(TBIVp.Markup,br1,br2,tstr);
  TBIVp.Markup = tstr;
  B1ToB2Val(TBIVp.Sum,br1,br2,t);
  TBIVp.Sum = t;
  B1ToB2Val(TBIVp.CostPrice,br1,br2,t);
  TBIVp.CostPrice = t;
  B1ToB2Val(TBIVp.GP,br1,br2,TBIVp.GP);
  TBIVp.GP = t;
  RETURN;
END;

procedure TBIVVcConvertB1ToB2(record TBIVVc TBIVp,string curncy,val fr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  Integer rwcnt,i;
  string 20 tstr;
  val t;
  
  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);

  B1ToB2Val(TBIVp.Price,br1,br2,t);
  TBIVp.Price = t;
  B1ToB2StrVal(TBIVp.Markup,br1,br2,tstr);
  TBIVp.Markup = tstr;
  B1ToB2Val(TBIVp.Sum,br1,br2,t);
  TBIVp.Sum = t;
  B1ToB2Val(TBIVp.CostPrice,br1,br2,t);
  TBIVp.CostPrice = t;
  B1ToB2Val(TBIVp.GP,br1,br2,t);
  TBIVp.GP = t;
  RETURN;
END;

global
updating function LongInt TBIVVcRecordImport(record TBIVVc TBIVr,record TBIVVc TBIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ConvMasterBlock cvm;
  Boolean gBase1ToBase2,gToDualBase;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    fr = TBIVr.FrRate;
    to1 = TBIVr.ToRateB1;
    to2 = TBIVr.ToRateB2;
    br1 = TBIVr.BaseRate1;
    br2 = TBIVr.BaseRate2;
    t = TBIVr.Sum;
    curncy = TBIVr.CurncyCode;
    ConvertToDualBase(curncy,TBIVr.TransDate,fr,to1,to2,br1,br2,t,true);
    TBIVr.CurncyCode = curncy;
    TBIVr.FrRate = fr;
    TBIVr.ToRateB1 = to1;
    TBIVr.ToRateB2 = to2;
    TBIVr.BaseRate1 = br1;
    TBIVr.BaseRate2 = br2;
    TBIVr.Sum = t;
  end;
  if (gBase1ToBase2) then begin
    if (blank(TBIVr.CurncyCode)) then begin
      TBIVVcConvertB1ToB2Date(TBIVr,"",TBIVr.TransDate);
    end else begin  
      to1 = TBIVr.ToRateB1;
      to2 = TBIVr.ToRateB2;
      br1 = TBIVr.BaseRate1;
      br2 = TBIVr.BaseRate2;
      TBIVVcConvertB1ToB2(TBIVr,TBIVr.CurncyCode,TBIVr.FrRate,to1,to2,br1,br2);
      TBIVr.ToRateB1 = to1;
      TBIVr.ToRateB2 = to2;
      TBIVr.BaseRate1 = br1;
      TBIVr.BaseRate2 = br2;
    end;
  end;
LTBIVVcRecordImport:;
  TBIVVcRecordImport = res;
  RETURN;
END;

global
function LongInt TBIVVcRecordRemoveTest(var record TBIVVc TBIVr,record TBIVVc TBIV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 0;  
  TBIVVcRecordRemoveTest = res;  
  RETURN;
END;

global
function LongInt TBIVVcRecordCheck(var record TBIVVc TBIVr,record TBIVVc TBIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;  

  res = 0;
  if (TBIVr.InvQty>TBIVr.Qty) then begin
//    RecordCheckError(1733,"",-1,"InvQty");      
//    res = -1;
//    goto LTBIVVcRecordCheck;
  end;
LTBIVVcRecordCheck:;
  TBIVVcRecordCheck = res;
  RETURN;
END;

global
function LongInt TBIVVcRecordSave(var record TBIVVc TBIVr,record TBIVVc TBIV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record PRAccBlock PRAb;
  Integer Yc;
  record TRVc TRr;
  record ActVc Actr;
  LongInt trnr;
  record PRVc PRr;
  
  PRr.Code = TBIVr.PRCode;
  ReadFirstMain(PRr,1,true);
  AddStageToTBIV(TBIVr);
  
  switch (TBIVr.oVc) begin
    case 1:
    case 2: Yc = VIYc; trnr = TBIVr.SerNr;
    case 3: Yc = ExpYc; trnr = TBIVr.SerNr;
    case 4: Yc = SHYc; trnr = TBIVr.SerNr;
    case 5: 
      Yc = ActYc; 
      Actr.SerNr = TBIVr.SerNr;
      if (ReadFirstMain(Actr,1,true)) then begin
        trnr = Actr.TRSerNr;
      end;
    case 6: Yc = RetYc; trnr = TBIVr.SerNr;
    case 7: Yc = SDYc; trnr = TBIVr.SerNr;
  end;
  if (PRr.UseWIP!=0) then begin
    TRr.IntYc = Yc;
    TRr.Number = trnr;
    if (ReadFirstMain(TRr,2,true)) then begin
      BlockLoad(PRAb);   
      GetProjectWIPAcc(PRAb,TBIVr.ArtCode,TBIVr.WIPAcc,TBIVr.WIPBalAcc);
    end;
  end;
  TBIVVcRecordSave = res; 
  return;
end;
