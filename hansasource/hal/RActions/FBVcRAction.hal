external procedure FBSumup(var record FBVc);
external function Integer CheckObjs(string,string,var string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function Integer CountObjects(string);
external function Boolean SLAccTest(string,Integer);
external procedure MockObjFromVATCode(string,var string);
external updating procedure UpdateObjBal(string,string,Date,val,val,string,Boolean);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure SwapM4Val(var val,var val);
external procedure SplitRiigiObjsNoCut(string,var string,var string,var string,var string);

updating
procedure RemoveFromSuppFB(record FBVc FB2r)
begin
  row FBVc FB2rw;
  record ROHisVc RHr,oldRHr; 
  integer i,rwcnt;
  string 20 obj1,obj2,obj3,obj4;
  boolean testf;
  val saldo;

  SplitRiigiObjsNoCut(FB2r.Objects,obj1,obj2,obj3,obj4);
  rwcnt = MatRowCnt(FB2r);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FB2r,i,FB2rw);
    RHr.AccNumber = FB2rw.AccNumber;
    RHr.Object1 = obj1;
    RHr.Object2 = obj2;
    RHr.Object3 = obj3;
    RHr.Object4 = obj4;
    RHr.Year = GetYear(FB2r.TransDate);
    RHr.Month = GetMonth(FB2r.TransDate);
    if ReadFirstMain(RHr,7,true) then begin
      RecordCopy(oldRHr,RHr);
      RHr.Deb = RHr.Deb - FB2rw.DebVal;
      RHr.Cred = RHr.Cred - FB2rw.CredVal;
      RHr.Deb2 = RHr.Deb2 - FB2rw.Deb2Val;
      RHr.Cred2 = RHr.Cred2 - FB2rw.Cred2Val;
      if (RecordUpdate(oldRHr,RHr,false)==0) then begin
      end;
    end else begin
      RecordNew(RHr);
      RHr.AccNumber = FB2rw.AccNumber;
      RHr.Object1 = obj1;
      RHr.Object2 = obj2;
      RHr.Object3 = obj3;
      RHr.Object4 = obj4;
      RHr.Year = GetYear(FB2r.TransDate);
      RHr.Month = GetMonth(FB2r.TransDate);
      RHr.Deb = - FB2rw.DebVal;
      RHr.Cred = - FB2rw.CredVal;
      RHr.Deb2 = - FB2rw.Deb2Val;
      RHr.Cred2 = - FB2rw.Cred2Val;
      testf = RecordStore(RHr,true);   
    end;
  end;
  return;
end;            


updating procedure UpdateROHisFB(record FBVc FBr,record FBVc FB2r,integer uptype)
begin
  row FBVc FBrw;
  record ROHisVc RHr,oldRHr;
  integer i,rwcnt;
  string 20 obj1,obj2,obj3,obj4;
  boolean testf;
  
  if (uptype == 1) then begin
    RemoveFromSuppFB(FB2r);
  end;
  if (uptype == 2) then begin
    RemoveFromSuppFB(FBr);
  end;
  SplitRiigiObjsNoCut(FBr.Objects,obj1,obj2,obj3,obj4);
  if (uptype == 0) or (uptype == 1) then begin 
    rwcnt = MatRowCnt(FBr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(FBr,i,FBrw);
      RHr.AccNumber = FBrw.AccNumber;
      RHr.Object1  = obj1;
      RHr.Object2  = obj2;
      RHr.Object3  = obj3;
      RHr.Object4  = obj4;
      RHr.Year  = GetYear(FBr.TransDate);
      RHr.Month = GetMonth(FBr.TransDate);
      if ReadFirstMain(RHr,7,true) then begin
        RecordCopy(oldRHr,RHr);
        RHr.Deb = RHr.Deb + FBrw.DebVal;
        RHr.Cred = RHr.Cred + FBrw.CredVal;
        RHr.Deb2 = RHr.Deb2 + FBrw.Deb2Val;
        RHr.Cred2 = RHr.Cred2 + FBrw.Cred2Val;
        if (RecordUpdate(oldRHr,RHr,false)==0) then begin
        end;
      end else begin
        RecordNew(RHr);
        RHr.AccNumber = FBrw.AccNumber;
        RHr.Object1 = obj1;
        RHr.Object2 = obj2;
        RHr.Object3 = obj3;
        RHr.Object4 = obj4;
        RHr.Year = GetYear(FBr.TransDate);
        RHr.Month = GetMonth(FBr.TransDate);
        RHr.Deb = FBrw.DebVal;
        RHr.Cred = FBrw.CredVal;
        RHr.Deb2 = FBrw.Deb2Val;
        RHr.Cred2 = FBrw.Cred2Val;
        testf = RecordStore(RHr,true);   
      end;
    end;
  end;        
  return;
end;

updating procedure BatchFBMain(record FBVc FBp)
BEGIN
  Integer i,rwcnt;
  row FBVc FBrw;
  record MainVc mainr;
  
  rwcnt = MatRowCnt(FBp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FBp,i,FBrw);
    mainr.AccNumber = FBrw.AccNumber;
    mainr.TransDate = FBp.TransDate;
    mainr.TransNr = FBp.SerNr;
    mainr.FileName = "FBVc";
    mainr.IntYc = 0;
    if (RecordStore(mainr,false)) then begin
    end;
  end;
  RETURN;
END;

updating procedure UpdateFBBal(Date PerDate,string accnumber,string objstr,val dvp,val cvp,string colname)
begin
  Integer ocnt;
 
  ocnt = CountObjects(objstr);
  if (ocnt>1) then begin goto LUpdateFBBal; end;
  if (blankdate(PerDate)) then begin goto LUpdateFBBal; end;
  if (nonblank(accnumber)) then begin
    UpdateObjBal(accnumber,objstr,PerDate,dvp,cvp,colname,false);
  end;
LUpdateFBBal:;
  return;
end;

updating procedure AddFB(record FBVc FBp,Boolean negf)
BEGIN
  Integer i,rwcnt;
  row FBVc FBrw;
  val dv,cv,dv2,cv2,dvc,cvc;
  string 255 balostr,colname;

  colname = "transdebit"; 
  if (FBp.SimFlag!=0) then begin colname = "simdebit"; end;
  rwcnt = MatRowCnt(FBp);
  for (i=0;i<rwcnt;i=i+1)  begin
    MatRowGet(FBp,i,FBrw);
    if (negf) then begin
      dv = -FBrw.DebVal;
      cv = -FBrw.CredVal;
      dv2 = -FBrw.Deb2Val;
      cv2 = -FBrw.Cred2Val;
      dvc = -FBrw.CurDebVal;
      cvc = -FBrw.CurCredVal;
    end else begin
      dv = FBrw.DebVal;
      cv = FBrw.CredVal;
      dv2 = FBrw.Deb2Val;
      cv2 = FBrw.Cred2Val;
      dvc = FBrw.CurDebVal;
      cvc = FBrw.CurCredVal;
    end;
    UpdateFBBal(FBp.TransDate,FBrw.AccNumber,FBp.Objects,dv,cv,colname);
    if (FBp.SimFlag==0) then begin
      UpdateFBBal(FBp.TransDate,FBrw.AccNumber,FBp.Objects,dv2,cv2,"transdebit2");
    end;
    if (nonblank(FBrw.CurncyCode)) and (blank(FBp.Objects)) then begin//FB per object has record wo object 
      MockObjFromVATCode(FBrw.CurncyCode,balostr);
      UpdateFBBal(FBp.TransDate,FBrw.AccNumber,balostr,dvc,cvc,colname);
    end;      
  end;
  RETURN;
END;

global
function LongInt FBVcRecordDuplicate(var record FBVc FBr,record FBVc FB2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
  FBr.SerNr = -1;
  FBr.Balf = 0;
  FBVcRecordDuplicate = res;  
  RETURN;
END;

global
function LongInt FBVcRecordDefaults(var record FBVc FBr,record FBVc FB2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
  FBr.SerNr = -1;
  FBr.Balf = 0;
  if (SingleUserMode) then begin
    FBr.SerNr = NextSerNr("FBVc",FBr.TransDate,-1,false,"");
  end;
  FBVcRecordDefaults = res;  
  RETURN;
END;

global
function LongInt FBVcRecordRemoveTest(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  FBVcRecordRemoveTest = res;
  RETURN;
END;

global
updating function LongInt FBVcRecordRemove(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RTViiteNumBlock RTr;

  AddFB(FBr,true);
  BlockLoad(RTr);
  if (RTr.RT==1) then begin
    UpdateROHisFB(FBr,FB2r,2);
  end;    
  FBVcRecordRemove = res;
  RETURN;
END;

global
updating function LongInt FBVcRecordImportAfter(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  AddFB(FBr,false);
  BatchFBMain(FBr);
  FBVcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt FBVcRecordSaveAfter(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RTViiteNumBlock RTr;

  AddFB(FBr,false);
  BatchFBMain(FBr);
  BlockLoad(RTr);
  if (RTr.RT==1) then begin
    UpdateROHisFB(FBr,FB2r,0);
  end;    
  FBVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt FBVcRecordUpdate(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  AddFB(FB2r,true);
  AddFB(FBr,false);
  FBVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt FBVcRecordUpdateAfter(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RTViiteNumBlock RTr;

  BatchFBMain(FBr);
  BlockLoad(RTr);
  if (RTr.RT==1) then begin
    UpdateROHisFB(FBr,FB2r,1);
  end;    
  FBVcRecordUpdateAfter = res;
  RETURN;
END;

procedure FBVcConvertB1ToB2Date(var record FBVc FBr)
BEGIN
  row FBVc FBrw;
  Integer i,rwcnt;
  val dv,d2v;
  
  rwcnt = MatRowCnt(FBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FBr,i,FBrw);
    dv = FBrw.DebVal;
    d2v = FBrw.Deb2Val;
    SwapM4Val(dv,d2v);
    FBrw.DebVal = dv;
    FBrw.Deb2Val = d2v;
    dv = FBrw.CredVal;
    d2v = FBrw.Cred2Val;
    SwapM4Val(dv,d2v);
    FBrw.CredVal = dv;
    FBrw.Cred2Val = d2v;
    MatRowPut(FBr,i,FBrw);
  end;
  FBSumup(FBr);
  RETURN;
END;

procedure ConvertFBtoDualBase(var record FBVc FBp)
BEGIN
  row FBVc FBrw;
  Integer i,rwcnt;
  string 20 curncy;
  val fr,to1,to2,br1,br2;

  rwcnt = MatRowCnt(FBp);
  GetFullCurncyRate(curncy,FBp.TransDate,fr,to1,to2,br1,br2);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FBp,i,FBrw);
    FBrw.Deb2Val = MulRateToBase2(curncy,FBrw.DebVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    FBrw.Cred2Val = MulRateToBase2(curncy,FBrw.CredVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    MatRowPut(FBp,i,FBrw);
  end;
  FBSumup(FBp);
  RETURN;
END;

global
updating function LongInt FBVcRecordImport(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  val fr,to1,to2,br1,br2;
  string 5 crncycode;
  record RTViiteNumBlock RTr;

  BlockLoad(cvm);
  FBr.Balf = 0;  
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    ConvertFBtoDualBase(FBr);
  end;
  if (gBase1ToBase2) then begin
    FBVcConvertB1ToB2Date(FBr);
  end;
  BlockLoad(RTr);
  if (RTr.RT==1) then begin
    UpdateROHisFB(FBr,FB2r,0);
  end;      
  FBSumup(FBr);
  FBVcRecordImport = res;
  RETURN;
END;

global
function LongInt FBVcRecordCheck(var record FBVc FBr,record FBVc FB2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res,oldnr;
  record SRBlock SRRec;
  record AccVc Accr;
  row FBVc FBrw;
  Integer insertmode,updatemode;
  Integer i,rwcnt,orwcnt,errcode;
  string 255 errstr;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = FBr.SerNr;
  BlockLoad(SRRec);
  if (FBr.SerNr<=0) then begin
    FBr.SerNr = NextSerNr("FBVc",FBr.TransDate,-1,false,"");
  end;
  if ((stat==insertmode) or (FBr.SerNr!=FB2r.SerNr)) then begin
  end;
  if (blankdate(FBr.TransDate)) then begin
    RecordCheckError(1024,"",-1,"TransDate");      
    res = -1;
    goto LFBVcRecordCheck;
  end;
  rwcnt = MatRowCnt(FBr);
  if (stat==updatemode) then begin
    orwcnt = MatRowCnt(FB2r);
  end;
  if (MatRowCnt(FBr)==0) then begin
    RecordCheckError(1030,"",0,"AccNumber");      
    res = -1;
    goto LFBVcRecordCheck;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FBr,i,FBrw);
    if (nonblank(FBrw.AccNumber)) then begin
      Accr.AccNumber = FBrw.AccNumber;
      if (ReadFirstMain(Accr,1,true)==false) then begin
        RecordCheckError(1007,FBrw.AccNumber,i,"AccNumber");      
        res = -1;
        goto LFBVcRecordCheck;
      end;
      if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
        RecordCheckError(1084,FBrw.AccNumber,i,"AccNumber");      
        res = -1;
        goto LFBVcRecordCheck;
      end;
      errcode = CheckObjs(FBrw.AccNumber,FBr.Objects,errstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,i,"Objects");      
        res = -1; 
        goto LFBVcRecordCheck;
      end;
      if (SLAccTest(FBrw.AccNumber,0)) then begin
        if (stat==insertmode) then begin
          RecordCheckError(1082,FBrw.AccNumber,i,"AccNumber");      
          res = -1;
          goto LFBVcRecordCheck;
        end else begin
          if (i>=orwcnt ) then begin
            RecordCheckError(1082,FBrw.AccNumber,i,"AccNumber");      
            res = -1;
            goto LFBVcRecordCheck;
          end;
        end;
      end;
      if ((blank(FBrw.DebVal)) and (blank(FBrw.CredVal))) then begin
        RecordCheckError(1009,"",i,"DebVal");      
        res = -1;
        goto LFBVcRecordCheck;
      end;
    end else begin
      if ((FBrw.DebVal!=0) or (FBrw.CredVal!=0)) then begin
        RecordCheckError(1010,"",i,"AccNumber");      
        res = -1;
        goto LFBVcRecordCheck;
      end;
    end;
  end;
LFBVcRecordCheck:;
  if (res!=0) then begin
    FBr.SerNr = oldnr;
  end;
  FBVcRecordCheck = res;
  RETURN;
END;

global
function LongInt FBVcRecordProtectFields(var record FBVc FBr,record FBVc FB2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  FB2r.Balf = FBr.Balf;
  FBVcRecordProtectFields = res;
  RETURN;
END;
