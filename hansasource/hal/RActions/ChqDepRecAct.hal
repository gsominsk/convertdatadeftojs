external updating procedure UpdateChequeStatusHistory(record CheckVc,string,LongInt,Boolean);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external procedure GetPMObjCta(String,var String,var String,Var Integer );
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean GetFullCurncyRateDate(var string,Date,var val,var val,var val,var val,var val,var Date);
external function Boolean IsUnOKAllowed(string,Date);
external function integer MakeTransFromChqDep(var Record TRVc,Record ChqDepVc,boolean);
external function LongInt GetCurUserLastNr(string);
external procedure ChqdepSumUp(var record ChqdepVc);
external updating procedure DeleteTransaction(LongInt,Integer);
external updating procedure SaveChequeLink3(record ChqDepVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);

global
function Boolean SerNrTestChqDepVc(LongInt sernr,Date tdp,var Boolean gentrans)
BEGIN
  Boolean res;
  record ChqDepSerBlock ChqDepSerRec;
  row ChqDepSerBlock ChqDepSerrw;
  Integer i,rwcnt;

  gentrans = true;
  if (sernr==-1) then begin
    res = false;
    goto LSerNrTestChqDepVc;
  end;
  BlockLoad(ChqDepSerRec);
  rwcnt = MatRowCnt(ChqDepSerRec);
  if (rwcnt==0) then begin
    res = true;
    goto LSerNrTestChqDepVc;
  end;
  for (i=0; i<rwcnt ;i=i+1) begin
    MatRowGet(ChqDepSerRec,i,ChqDepSerrw);
    if ((sernr<ChqDepSerrw.TSerStart) or (sernr>ChqDepSerrw.TSerEnd)) then begin
      goto LFORChqDepVc;
    end;  
    if (nonblankdate(ChqDepSerrw.StartDate)) then begin
      if (tdp<ChqDepSerrw.StartDate) then begin goto LFORChqDepVc; end;
    end;  
    if (nonblankdate(ChqDepSerrw.EndDate)) then begin
      if (tdp>ChqDepSerrw.EndDate) then begin goto LFORChqDepVc; end;
    end;  
    if (ChqDepSerrw.DonotGenTrans==1) then begin gentrans = false; end;
    res = true;
    goto LSerNrTestChqDepVc;
LFORChqDepVc:;
  end;
LSerNrTestChqDepVc:;
  SerNrTestChqDepVc = res;
  RETURN;
END;

updating procedure ChangeStatesFromChqDepVc(record ChqDepVc CDr,Boolean unokf)
begin
  record CheckVc Chq;
  row ChqDepVc TBrw;
  Integer j,rows;

  rows = MatRowCnt(CDr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(CDr,j,TBrw);
    Chq.SerNr = TBrw.ChqNr;
    if (ReadFirstMain(Chq,1,true)) then begin
      if (Chq.Openf==kCheckTypeAccepted) then begin
        Chq.Openf = kCheckTypeDeposited;
        Chq.ClearingDate   = CDr.TransDate;  
        Chq.TargetAccNr    = CDr.DepAccNr;
        Chq.ClearedAmount  = Chq.Amount;
      end;
      if (unokf) then begin
        Chq.Openf = kCheckTypeAccepted;
        Chq.TargetAccNr    = "";
        Chq.ClearedAmount  = Chq.ClearedAmount - Chq.Amount;
      end;
      UpdateChequeStatusHistory(Chq,"ChqDepVc",CDr.SerNr,unokf);
      if (RecordStore(Chq,true)) then begin end;
    end; 
  end;
  return;
end;

global
function LongInt ChqDepVcRecordDefaults(var record ChqDepVc CDr,record ChqDepVc CD2r,LongInt long3,LongInt long4)
begin
  Record BaseCurBlock bcur;
  Val to1,to2,fr,br1,br2;
  Date ed;
  Boolean bool;

  Blockload(bcur);   
  CDr.SerNr = -1;
  CDr.TransDate = CurrentDate;
  if nonblank(bcur.BaseCur1) then begin
    CDr.CurncyCode = bcur.BaseCur1;
  end; 
  bool = GetFullCurncyRateDate(bcur.BaseCur1,CDr.TransDate,fr,to1,to2,br1,br2,ed);
  CDr.FrRate = fr;
  CDr.ToRate1 = to1; 
  CDr.ToRate2 = to2;
  CDr.BaseRate1 = br1;
  CDr.BaseRate2 = br2;
  ChqDepVcRecordDefaults = 0;
  return;
end;

global
function LongInt ChqDepVcRecordDuplicate(var record ChqDepVc CDr,record ChqDepVc CD2r,LongInt long3,LongInt long4)
begin
  Integer rows,j;
  row ChqDepVc TBrw;

  CDr.SerNr = -1;
  CDr.OKFlag= 0;
  rows = MatRowCnt(CDr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(CDr,j,TBrw);
    TBrw.ChqNr = -1;
    MatRowPut(CDr,j,TBrw);
  end;  
  ChqdepSumUp(CDr);
  return;
end;

global
updating function LongInt ChqDepVcRecordSave(var record ChqDepVc CDr,record ChqDepVc TBr2,LongInt long3,LongInt long4)
begin
  if (CDr.OKFlag==0) then begin
    ChqdepSumUp(CDr);
  end;
  return;
end;

global
updating function LongInt ChqDepVcRecordSaveAfter(var record ChqDepVc CDr,record ChqDepVc TBr2,LongInt long3,LongInt long4)
begin
  if (CDr.OKFlag!=0)  then begin
    ChangeStatesFromChqDepVc(CDr,false);
    SaveChequeLink3(CDr);
  end;
  return;
end;

global
updating function longint ChqDepVcRecordUpdate(var record ChqDepVc CDr, record ChqDepVc CD2r, longint long1, longint long2)
begin
  longint res;

  res = 0;
  if (CDr.OKFlag==0) then begin
    ChqdepSumUp(CDr);
  end;
  if ((CDr.OKFlag==0) and (CD2r.OKFlag!=0)) then begin//unok
    DeleteTransaction(CDr.SerNr,ChqDepYc);
    StoreUnOKHistory("ChqDepVc",CDr.SerNr,CurrentDate,CurrentTime,CurrentUser);    
    ChangeStatesFromChqDepVc(CDr,true);
  end;
  ChqDepVcRecordUpdate = res;
  return;
end;

global updating
function LongInt ChqDepVcRecordUpdateAfter(var record ChqDepVc CDr,record ChqDepVc CD2r,LongInt long3,LongInt long4)
begin
  if ((CDr.OKFlag!=0) and (CD2r.OKFlag==0)) then begin
    ChangeStatesFromChqDepVc(CDr,false);
    SaveChequeLink3(CDr);
  end;
  ChqDepVcRecordUpdateAfter = -1;
  return;
end;

global updating 
function LongInt ChqDepVcRecordImport(var record ChqDepVc CDr,record ChqDepVc CD2r,LongInt long3,LongInt long4)
begin
  if (CDr.OKFlag==1) then begin
    SaveChequeLink3(CDr);
  end;
  return;
end;

global
function LongInt ChqDepVcRecordRemoveTest(record ChqDepVc CDr,record ChqDepVc CD2r,LongInt long3,LongInt long4)
begin
  Boolean bool;
  LongInt res;

  if (CDr.OKFlag!=0) then begin  
     res = 0;
     Beep;  
  end else begin
    res = 1;
  end;
  ChqDepVcRecordRemoveTest = res;
  return;
end;

global
updating function LongInt ChqDepVcRecordCheck(record ChqDepVc CDr,record ChqDepVc CD2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  String 20 cta,obj;
  Row ChqDepVc ChqDeprw,Extrarw;
  integer i,rows,PayType,j;
  Record CheckVc Checkr;
  val temp,ChqAmount;
  Boolean transf,gentrans,unokf;
  string 255 tstr;
  LongInt oldnr,newnr;
  record TRVc gTRp;
  record SRBlock SRb;
  Integer cashres;
  record ChqDepVc locChqDepr;

  res = 0;
  oldnr = CDr.SerNr;
  if (CDr.OKFlag==0) then begin//unok
    if (stat==Rs_update) then begin
      if (CD2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    if (IsUnOKAllowed("ChqDepVc",CDr.TransDate)==false) then begin
      RecordCheckError(1046,"",-1,"TransDate");      
      res = -1;
    end;
    goto LChqDepVcRecordCheck;
  end;
  BlockLoad(SRb);
  gentrans = true;
  transf = false;
  if (CDr.OKFlag==1) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (CD2r.OKFlag==0) then begin transf = true; end;
    end;  
  end;
  // SerNr handling should be here not in RecordSave
  if (CDr.SerNr<=0) then begin
    newnr = GetCurUserLastNr("ChqDepVc");
    if (newnr==-1) then begin
      newnr = SRb.LastCLOutNr;
    end;
    CDr.SerNr = NextSerNr("ChqDepVc",CDr.TransDate,newnr,false,"");
  end;
  if ((stat==Rs_insert) or (CDr.SerNr!=CD2r.SerNr)) then begin
    locChqDepr.SerNr = CDr.SerNr;
    if (ReadFirstMain(locChqDepr,1,true)) then begin
      RecordCheckError(1115,"",-1,"SerNr");      
      res = -1;
      goto L99ChqDepVcRecordCheck;
    end;
  end;
  if (SerNrTestChqDepVc(CDr.SerNr,CDr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto L99ChqDepVcRecordCheck;
  end;
  if (Date2Test("ChqDepVc",CDr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto L99ChqDepVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,CDr.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto L99ChqDepVcRecordCheck;
  end;
  if (blankdate(CDr.TransDate)) then begin
    RecordCheckError(1058,CDr.TransDate,-1,"TransDate");  
    goto L99ChqDepVcRecordCheck;
  end;
  if blank(CDr.PayMode) then begin
    RecordCheckError(1058,CDr.PayMode,-1,"PayMode");  
    res = -1;
    goto L99ChqDepVcRecordCheck;
  end;
  if ((CDr.Cash > 0) and blank(CDr.PayModeCash)) then begin
    RecordCheckError(1058,CDr.PayModeCash,-1,"PayModeCash");  
    res = -1;
    goto L99ChqDepVcRecordCheck;
  end;
  if nonblank(CDr.PayModeCash) then begin
    GetPMObjCta(CDr.PayModeCash,obj,cta,PayType);
    if blank(cta) then begin
      RecordCheckError(9588,CDr.PayModeCash,-1,"PayModeCash");  
      res = -1;
      goto L99ChqDepVcRecordCheck;
    end;
    if (PayType!=kPayModeTypeFree) then begin
      RecordCheckError(1277,"",-1,"PayModeCash");      
      res = -1; 
      goto L99ChqDepVcRecordCheck;        
    end;
  end;
  if nonblank(CDr.PayMode) then begin
    GetPMObjCta(CDr.PayMode,obj,cta,PayType);
    if blank(cta) then begin
      RecordCheckError(9588,CDr.PayMode,-1,"PayMode");  
      res = -1;
      goto L99ChqDepVcRecordCheck;
    end;  
    if (PayType!=kPayModeTypeFree) then begin
      RecordCheckError(1277,"",-1,"PayMode");      
      res = -1; 
      goto L99ChqDepVcRecordCheck;        
    end;
  end;
  
  if (CDr.OKFlag!=0) then begin
    rows = MatRowCnt(CDr);
    for (i = 0; i<rows; i = i + 1) begin
      MatRowGet(CDr,i,ChqDeprw);
      if (ChqDeprw.ChqNr!=-1) then begin
        Checkr.SerNr = ChqDeprw.ChqNr;
        if (ReadFirstMain(Checkr,1,true)==false) then begin
          RecordCheckError(1279,"",i,"ChqNr");      
          res = -1; 
          goto L99ChqDepVcRecordCheck;
        end else begin
          if (Checkr.Openf!=kCheckTypeRegistered and Checkr.Openf!=kCheckTypeAccepted) then begin
            RecordCheckError(1292,"",i,"ChqNr");      
            res = -1; 
            goto L99ChqDepVcRecordCheck;
          end;
        end;
      end else begin
        if (transf) then begin
          RecordCheckError(1854,"",i,"ChqNr");      
          res = -1; 
          goto L99ChqDepVcRecordCheck;
        end;
      end;
    end;
  end;

  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    res = MakeTransFromChqDep(gTRp,CDr,false);
    if (res<>0) then begin
      RecordCheckError(res,"",-1,"SerNr");      
      res = -1;
      goto L99ChqDepVcRecordCheck;
    end else begin
      if ((gTRp.Number>0) and (gTRp.IntYc==ChqDepYc)) then begin
        tstr = CheckTrans(gTRp,2,true);
        if (nonblank(tstr)) then begin
          RecordCheckError(1085,tstr,-1,"SerNr");      
          res = -1;
          goto L99ChqDepVcRecordCheck;
        end;
        SaveTrans(gTRp);
      end;
    end;
  end;
    
L99ChqDepVcRecordCheck:;
  if (res!=0) then begin
    CDr.SerNr = oldnr;
  end;  
  
LChqDepVcRecordCheck:;  
  ChqDepVcRecordCheck = res;
  return;
end;
