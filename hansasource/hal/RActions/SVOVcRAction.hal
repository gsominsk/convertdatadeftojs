external function Integer PayTermType(string);
external function Integer VerifyTaxTemplateCode(string,var string);
external function Integer CheckObjs(string,string,var string);
external procedure B1ToB2Val(val,val,val,var val);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external function Boolean CheckPDExists(string);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function Date ConvertPlanShipString(string);
external function Integer CheckCUVATNrMask(string,string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SetSVOFlags(record SVOVc);
external function Boolean SerNrTestSVOVc(LongInt,Date,var Boolean);
external updating procedure CreateInspection(string,string,Date,LongInt,LongInt);

global
function LongInt SVOVcRecordDefaults(var record SVOVc SVOr,record SVOVc SVO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record AccBlock ARAccRec;
  record UserVc Userr;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
      
  BlockLoad(ARAccRec);
  SVOr.SerNr = -1;
  SVOr.TransDate = CurrentDate;  
  SVOr.CustCat = "";
  SVOr.DoneMark = 0;
  SVOr.WOMark = 0;
  SVOr.WSMark = 0;
  SVOr.InvMark = 0;
  SVOr.InvFlag = 0;
  SVOr.InclVAT = ARAccRec.BasePriceInclVAT;
//  SVOr.NoTAXonVAT = ARAccRec.NoTAXonVAT;
//  SVOr.TotalwoTAX = ARAccRec.TotalwoTAX;
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin end;
  SVOr.SalesMan = Userr.Code;
  SVOr.Objects = Userr.PersObjx;
  SVOr.OurContact = Userr.CurOurContact;
  SVOr.ServLocation = Userr.ServLocation;
  curcode = SVOr.CurncyCode;
  GetFullCurncyRate(curcode,SVOr.TransDate,fr,to1,to2,br1,br2);
  SVOr.CurncyCode = curcode;
  SVOr.FrRate = fr;
  SVOr.ToRateB1 = to1; 
  SVOr.ToRateB2 = to2;
  SVOr.BaseRate1 = br1;
  SVOr.BaseRate2 = br2;
  SVOr.PayDeal = "";
  if (SingleUserMode) then begin
    SVOr.SerNr = NextSerNr("SVOVc",SVOr.TransDate,-1,false,"");
  end;  
  SVOVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt SVOVcRecordDuplicate(var record SVOVc SVOr,record SVOVc SVO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  Date blankd;
  Time blankt;
      
  SVOr.SerNr = -1;
  SVOr.TransDate = CurrentDate;  
  SVOr.RegDate = blankd;
  SVOr.RegTime = blankt;
  if (SingleUserMode) then begin
    SVOr.SerNr = NextSerNr("SVOVc",SVOr.TransDate,-1,false,"");
  end;
  rwcnt = MatRowCnt(SVOr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SVOr,i,SVOrw);
    SVOrw.WOMade = blankval;
    SVOrw.Invd = blankval;
    SVOrw.Cost = blankval;
    SVOrw.WOSerNr = -1;
    MatRowPut(SVOr,i,SVOrw);
  end;  
  SVOr.DoneMark = 0;
  SVOr.WOMark = 0;
  SVOr.WSMark = 0;
  SVOr.InvMark = 0;
  SVOr.InvFlag = 0;
  curcode = SVOr.CurncyCode;
  GetFullCurncyRate(curcode,SVOr.TransDate,fr,to1,to2,br1,br2);
  SVOr.CurncyCode = curcode;
  SVOr.FrRate = fr;
  SVOr.ToRateB1 = to1; 
  SVOr.ToRateB2 = to2;
  SVOr.BaseRate1 = br1;
  SVOr.BaseRate2 = br2;
  SVOVcRecordDuplicate = res; 
  RETURN;
END;



global
updating function LongInt SVOVcRecordSave(var record SVOVc SVOr,record SVOVc SVO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetSVOFlags(SVOr);
  if (blankdate(SVOr.RegDate)) then begin
    SVOr.RegDate = CurrentDate;
  end;
  if (blanktime(SVOr.RegTime)) then begin
    SVOr.RegTime = CurrentTime;
  end;
  SVOVcRecordSave = res; 
  RETURN;
END;

global
updating function LongInt SVOVcRecordUpdate(var record SVOVc SVOr,record SVOVc SVO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  SetSVOFlags(SVOr);
  SVOVcRecordUpdate = res; 
  RETURN;
END;

updating procedure SVOInspection(record SVOVc SVOr)
begin
  record QualConVc QualConr;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  
  if (SVOr.QualConSerNr>0) then begin
    rwcnt = MatRowCnt(SVOr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SVOr,i,SVOrw);
      if (nonblank(SVOrw.ArtCode)) then begin
        QualConr.SerNr = SVOr.QualConSerNr;
        if (ReadFirstMain(QualConr,1,true)==false) then begin
          QualConr.AgreementNr = -1;
          QualConr.RentResSerNo = -1;
        end;
        CreateInspection(SVOrw.ArtCode,SVOrw.SerialNr,SVOr.TransDate,QualConr.AgreementNr,QualConr.RentResSerNo);
      end;
    end;
  end;
  return;
end;

global
updating function LongInt SVOVcRecordUpdateAfter(var record SVOVc SVOr,record SVOVc SVO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((SVOr.DoneMark!=0) and (SVO2r.DoneMark==0)) then begin
    SVOInspection(SVOr);
  end;
  SVOVcRecordUpdateAfter = res;
  RETURN;
END;

function Boolean IsSVORowsDone(record SVOVc SVOp)
BEGIN
  row SVOVc SVOrw;
  record WOVc WOr;
  Integer i,rwcnt;
  Boolean res;

  res = true;
  rwcnt = MatRowCnt(SVOp);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SVOp,i,SVOrw);
    if (SVOrw.WOSerNr!=-1) then begin
      WOr.SerNr = SVOrw.WOSerNr;
      if (ReadFirstMain(WOr,1,true)) then begin
        if ((WOr.Closed==0) or (WOr.Closed==2)) then begin
          res = false;
        end;
      end;
    end;
  end;  
  IsSVORowsDone = res;
  RETURN;
END;

function Boolean FindOpenWSTrans(longint svonr)
begin
  Boolean res;
  record WSVc WSr;
  boolean TrHs, testf;
  
  res = false;
  WSr.SVONr = svonr;
  TrHs = true;
  while (LoopKey("SVONr",WSr,1,TrHs)) begin
    if (TrHs) then begin
      if (WSr.SVONr!=svonr) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if (WSr.OKFlag==0) then begin
        res = true;
        goto LFindOpenWSTrans;
      end;
    end;
  end;
LFindOpenWSTrans:;
  FindOpenWSTrans = res;
  return;
end;

function Boolean FindOpenActTrans(longint svonr)
begin
  Boolean  res;
  record ActVc Actr;
  boolean TrHs, testf;
  
  res = false;
  Actr.SVOSerNr = svonr;
  TrHs = true;
  while (LoopKey("SVOSerNr",Actr,1,TrHs)) begin
    if (TrHs) then begin
      if (Actr.SVOSerNr!=svonr) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if (Actr.OKFlag==0) then begin
        res = true;
        goto LFindOpenActTrans;
      end;
    end;
  end;
LFindOpenActTrans:;
  FindOpenActTrans = res;
  return;
end;

global
function LongInt SVOVcRecordCheck(var record SVOVc SVOr,record SVOVc SVO2r,LongInt stat,LongInt check)
BEGIN
  row SVOVc SVOrw;
  record INVc INr;
  LongInt res;
  Integer rwcnt,i,errcode;
  LongInt oldnr;
  Boolean found,gentrans,MainItemFound,transf;
  record COVc COr;
  string 255 tstr,errstr;
  record CUVc CUr;
  record LocationVc Locr;
  record SVOAccBlock SVOAccRec;

  res = 0;
  BlockLoad(SVOAccRec);
  oldnr = SVOr.SerNr;
  if (SVOr.DoneMark!=0) and (SVO2r.DoneMark==0) then begin
    if (FindOpenWSTrans(SVOr.SerNr)) then begin
      RecordCheckError(20268,"",-1,"CustCode");
      res = -1;
      goto LSVOVcRecordCheck;
    end;
    if (FindOpenActTrans(SVOr.SerNr)) then begin
      RecordCheckError(20269,"",-1,"CustCode");
      res = -1;
      goto LSVOVcRecordCheck;
    end;   
  end;  
  if (stat==2) then begin
    if (SVOr.SerNr<=0) then begin
      SVOr.SerNr = SVO2r.SerNr;
    end;
  end;      
  transf = false;
  if (SVOr.DoneMark==1) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (SVO2r.DoneMark==0) then begin transf = true; end;
    end;  
  end;
  if (transf) then begin
    if (UserCanAction("CompletingServiceOrders",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"CompletingServiceOrders"),-1,"SerNr");      
      res = -1;
      goto LSVOVcRecordCheck;
    end;  
  end;
  if (SVOr.SerNr<=0) then begin
    SVOr.SerNr = NextSerNr("SVOVc",SVOr.TransDate,-1,false,"");
  end;
  if (SerNrTestSVOVc(SVOr.SerNr,SVOr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1;
    goto LSVOVcRecordCheck;
  end;
  if (nonblank(SVOr.ServLocation)) then begin
    Locr.Code = SVOr.ServLocation;
    if (ReadFirstMain(Locr,1,true)==false) then begin
      RecordCheckError(1120,SVOr.ServLocation,-1,"ServLocation");      
      res = -1;
      goto LSVOVcRecordCheck;
    end;
  end;
  CUr.Code = SVOr.CustCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,SVOr.CustCode,-1,"CustCode");      
    res = -1; 
    goto LSVOVcRecordCheck;
  end;
  res = CheckCUVATNrMask(SVOr.CustCode,SVOr.VATNr,tstr);
  if (res!=0) then begin
    RecordCheckError(res,tstr,-1,"VATNr");      
    res = -1;
    goto LSVOVcRecordCheck;
  end;
  if (CheckPDExists(SVOr.PayDeal)==false) then begin
    RecordCheckError(1256,"",-1,"PayDeal");      
    res = -1;
    goto LSVOVcRecordCheck;        
  end;   
  switch (PayTermType(SVOr.PayDeal)) begin
    case kInvoiceTypeCredit:
      RecordCheckError(1227,SVOr.PayDeal,-1,"PayDeal");      
      res = -1;
      goto LSVOVcRecordCheck;
    case kInvoiceTypeEmployee:
      RecordCheckError(1958,"",-1,"PayDeal");      
      res = -1;
      goto LSVOVcRecordCheck;
  end;
  
  errcode = CheckObjs("",SVOr.Objects,errstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,errstr,-1,"Objects");      
    res = -1;
    goto LSVOVcRecordCheck;
  end;
  if (SVOr.DoneMark!=0) then begin
    if (IsSVORowsDone(SVOr)==false) then begin
      RecordCheckError(1038,"",-1,"SerNr");      
      res = -1;
      goto LSVOVcRecordCheck;
    end;
  end;
  errcode = CheckRates(SVOr.CurncyCode,SVOr.FrRate,SVOr.ToRateB1,SVOr.ToRateB2,SVOr.BaseRate1,SVOr.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LSVOVcRecordCheck;
  end;          
  rwcnt = MatRowCnt(SVOr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SVOr,i,SVOrw);
    COr.SerNr = SVOrw.ContractNr;
    if (ReadFirstMain(COr,1,true)) then begin
      if (COr.CustCode!=SVOr.CustCode) then begin
        RecordCheckError(1218,SVOrw.ContractNr,i,"ContractNr");      
        res = -1;
        goto LSVOVcRecordCheck;
      end;  
    end else begin
      if (SVOrw.ContractNr!=-1) then begin
        RecordCheckError(1290,SVOrw.ContractNr,i,"ContractNr");      
        res = -1;
        goto LSVOVcRecordCheck;
      end;  
    end;    
    if (nonblank(SVOrw.ArtCode)) then begin
      INr.Code = SVOrw.ArtCode;
      found = ReadFirstMain(INr,1,true);
      if (found==false) then begin
        RecordCheckError(1120,SVOrw.ArtCode,i,"ArtCode");      
        res = -1;
        goto LSVOVcRecordCheck;
      end;
      if (INr.ItemType==2) then begin
        RecordCheckError(1826,SVOrw.ArtCode,i,"ArtCode");      
        res = -1;
        goto LSVOVcRecordCheck;
      end;
    end;      
    if (nonblank(SVOrw.TaxTemplateCode)) then begin
      errcode = VerifyTaxTemplateCode(SVOrw.TaxTemplateCode,tstr);
      if (errcode!=0) then begin
        RecordCheckError(1120,tstr,i,"TaxTemplateCode");      
        res = -1; 
        goto LSVOVcRecordCheck;
      end;
    end;
    if (Mid(SVOrw.SerialNr,len(SVOrw.SerialNr),1)==" ")  then begin
      RecordCheckError(1239,"",i,"SerialNr");      
      res = -1;
      goto LSVOVcRecordCheck;
    end;
    if (SVOrw.ItemType==3) then begin
      if (SVOrw.ContractNr==-1) then begin
        RecordCheckError(1168,"",i,"ContractNr");      
        res = -1;
        goto LSVOVcRecordCheck;
      end;
    end;
    if (nonblank(SVOrw.ArtCode)) then begin
      if (blank(SVOrw.SerialNr) and SVOrw.ItemKind==0) then begin
        RecordCheckError(1132,"",i,"SerialNr");      
        res = -1;
        goto LSVOVcRecordCheck;
      end;  
    end;
    if (SVOAccRec.AllowOneMainItem!=0) then begin
      if (SVOrw.ItemKind==0) then begin
        if (MainItemFound) then begin
          RecordCheckError(20272,"",i,"ItemKind");      
          res = -1;
          goto LSVOVcRecordCheck;
        end;
        MainItemFound = true;
      end;
    end;
  end;
LSVOVcRecordCheck:;
  if (res!=0) then begin SVOr.SerNr = oldnr; end;
  SVOVcRecordCheck = res;
  RETURN;
END;

function Boolean SVORemoveTest(record SVOVc SVOp,Integer long3)
BEGIN
  row SVOVc svorw;
  Integer rwcnt,i;
  Boolean res;
  
  res = true;
  rwcnt = MatRowCnt(SVOp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SVOp,i,svorw);
    if (svorw.WOSerNr!=-1) then begin
      if (long3!=0) then begin MessageBox(1369,""); end;
      res = false;
      goto LSVORemoveTest;
    end;
  end;
LSVORemoveTest:;
  SVORemoveTest = res;
  RETURN;
END;

global
function LongInt SVOVcRecordRemoveTest(var record SVOVc SVOr,record SVOVc SVO2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record SVOVc locSVOr;
  record WOVc WOr;
  record WSVc WSr;
  record WSIVVc WSIVr;
  record ActVc Actr;
  res = 1;

  Actr.SVOSerNr = SVOr.SerNr;
  if (ReadFirstKey("SVOSerNr",Actr,1,true)) then begin
    res = 0;
    goto LSVOVcRecordRemoveTest;
  end;
  WOr.SVOSerNr = SVOr.SerNr;
  if (ReadFirstKey("SVOSerNr",WOr,1,true)) then begin
    res = 0;
    goto LSVOVcRecordRemoveTest;
  end;
  WSr.SVONr = SVOr.SerNr;
  if (ReadFirstKey("SVONr",WSr,1,true)) then begin
    res = 0;
    goto LSVOVcRecordRemoveTest;
  end;
  WSIVr.SVONr = SVOr.SerNr;
  if (ReadFirstKey("SVONr",WSIVr,1,true)) then begin
    res = 0;
    goto LSVOVcRecordRemoveTest;
  end;
  locSVOr.SerNr = SVOr.SerNr;
  if (ReadFirstMain(locSVOr,1,true)) then begin
    if (SVORemoveTest(locSVOr,long3)==false) then begin
      res = 0;
    end;
  end else begin
    if (SVORemoveTest(SVOr,long3)==false) then begin
      res = 0;
    end;
  end;
LSVOVcRecordRemoveTest:;  
  SVOVcRecordRemoveTest = res; 
  RETURN;
END;

procedure SVOVcConvertB1ToB2(record SVOVc SVOr,var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN    
  val t;
  
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  B1ToB2Val(SVOr.TotCost,br1p,br2p,t);
  SVOr.TotCost = t;
  B1ToB2Val(SVOr.TotPrice,br1p,br2p,t);
  SVOr.TotPrice = t;
  RETURN;
END;

global
function LongInt SVOVcRecordImport(var record SVOVc SVOr,record SVOVc SVO2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;

  if (blankdate(SVOr.PlanShipDate)) then begin
    SVOr.PlanShipDate = ConvertPlanShipString(SVOr.PlanShip);
  end;
  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    curncy = SVOr.CurncyCode;
    fr = SVOr.FrRate;
    to1 = SVOr.ToRateB1;
    to2 = SVOr.ToRateB2;
    br1 = SVOr.BaseRate1;
    br2 = SVOr.BaseRate2;
    t = SVOr.TotCost;
    ConvertToDualBase(curncy,SVOr.TransDate,fr,to1,to2,br1,br2,t,true);
    SVOr.CurncyCode = curncy;
    SVOr.FrRate = fr;
    SVOr.ToRateB1 = to1;
    SVOr.ToRateB2 = to2;
    SVOr.BaseRate1 = br1;
    SVOr.BaseRate2 = br2;
    SVOr.TotCost = t;       
  end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    curncy = SVOr.CurncyCode;
    to1 = SVOr.ToRateB1;
    to2 = SVOr.ToRateB2;
    br1 = SVOr.BaseRate1;
    br2 = SVOr.BaseRate2;
    SVOVcConvertB1ToB2(SVOr,to1,to2,br1,br2);
    SVOr.ToRateB1 = to1;
    SVOr.ToRateB2 = to2;
    SVOr.BaseRate1 = br1;
    SVOr.BaseRate2 = br2;
  end;
 
  SVOVcRecordImport = res;
  RETURN;
END;

global
function LongInt GSXQueueVcRecordInIndex(record GSXQueueVc GSXAEr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (GSXAEr.OKFlag!=0) then begin 
    if (indexname=="ActOKFlag") then begin res = 0; end;
  end;
  GSXQueueVcRecordInIndex = res;
  return;
end;

global
function LongInt GSXQueueVcRecordDefaults(var record GSXQueueVc GSXAEr,record GSXQueueVc GSXAE2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  GSXAEr.TransDate = CurrentDate;
  GSXAEr.TransTime = CurrentTime;
  GSXQueueVcRecordDefaults = res;
  return;
end;

global
function LongInt SVOVcRecordProtectFields(var record SVOVc SVOr,record SVOVc SVO2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row SVOVc SVOrw;
  row SVOVc SVO2rw;
  Integer rwcnt2;
  
  SVO2r.InvFlag = SVOr.InvFlag;
  SVO2r.InvMark = SVOr.InvMark;
  SVO2r.WOMark = SVOr.WOMark;
  SVO2r.WSMark = SVOr.WSMark;
  rwcnt = MatRowCnt(SVOr);
  rwcnt2 = MatRowCnt(SVO2r);
  for (i=0;i<rwcnt2;i=i+1) begin
    if (i<rwcnt) then begin
      MatRowGet(SVOr,i,SVOrw);
      MatRowGet(SVO2r,i,SVO2rw);
      SVO2rw.Invd = SVOrw.Invd;
      SVO2rw.WOSerNr = SVOrw.WOSerNr;
      SVO2rw.WOEnum = SVOrw.WOEnum;
      SVO2rw.WOMade = SVOrw.WOMade;
      MatRowPut(SVO2r,i,SVO2rw);
    end;
  end;
  SVOVcRecordProtectFields = res;
  return;
end;
