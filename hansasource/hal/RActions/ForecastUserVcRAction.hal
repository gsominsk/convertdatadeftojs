external function Integer IsUnOKAllowed_ForecastUserVc(record ForecastUserVc);

global
function LongInt ForecastUserVcRecordDefaults(var record ForecastUserVc ForecastUserr,record ForecastUserVc ForecastUser2r,LongInt long3,LongInt long4)
begin
  record UserVc Userr;
  
  ForecastUserr.Person = CurrentUser;
  Userr.Code = ForecastUserr.Person;
  if (ReadFirstMain(Userr,1,true)) then begin
    ForecastUserr.PersonName = Userr.Name;
    ForecastUserr.PersonObjects = Userr.PersObjx;
  end;
  ForecastUserr.TransDate = CurrentDate;
  ForecastUserr.Month = GetMonth(ForecastUserr.TransDate);
  ForecastUserr.OKFlag = 0;
  ForecastUserVcRecordDefaults = -1;
  return;
end;

global
function LongInt ForecastUserVcRecordDuplicate(var record ForecastUserVc ForecastUserr,record ForecastUserVc ForecastUser2r,LongInt long3,LongInt long4)
begin
  ForecastUserr.TransDate = CurrentDate;
  ForecastUserr.Month = GetMonth(ForecastUserr.TransDate);
  ForecastUserr.OKFlag = 0;
  ForecastUserr.SerNr = -1;
  ForecastUserVcRecordDuplicate = -1;
  return;
end;

global
function LongInt ForecastUserVcRecordCheck(var record ForecastUserVc ForecastUserr,record ForecastUserVc ForecastUser2r,LongInt stat,LongInt check)
begin
  LongInt res;
  record UserVc Userr;
  record ForecastUserVc lForecastUserr;
  Boolean transf,unokf,checkf;
  Integer insertmode,updatemode,error;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (check>0) then begin
    checkf = true;
  end else begin
    checkf = false;
  end;
  transf = false;
  if (ForecastUserr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (ForecastUser2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (ForecastUserr.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (ForecastUser2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    error = IsUnOKAllowed_ForecastUserVc(ForecastUserr);
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LForecastUserVcRecordCheck;
  end;
  if (stat==updatemode) then begin
    if (ForecastUserr.SerNr<=0) and (ForecastUser2r.OKFlag==0) then begin
      ForecastUserr.SerNr = ForecastUser2r.SerNr;
    end;
  end;        
  if (ForecastUserr.SerNr<=0) then begin
    ForecastUserr.SerNr = NextSerNr("ForecastUserVc",ForecastUserr.TransDate,-1,true,"");
  end;
  if (ForecastUserr.SerNr==-1) then begin
    RecordCheckError(1033,"",-1,"Person");
    res = -1;
    goto LForecastUserVcRecordCheck;
  end;
  if (blankdate(ForecastUserr.TransDate)) then begin
    RecordCheckError(1058,"",-1,"TransDate");      
    res = -1;
    goto LForecastUserVcRecordCheck;
  end;
  Userr.Code = ForecastUserr.Person;
  if (ReadFirstMain(Userr,1,true)==false) then begin
    RecordCheckError(1290,"",-1,"Person");      
    res = -1;
    goto LForecastUserVcRecordCheck;
  end;
  lForecastUserr.Person = ForecastUserr.Person;
  lForecastUserr.Month = ForecastUserr.Month;
  if (ReadFirstKey("PersonMonth",lForecastUserr,2,true)) then begin
    if (ForecastUserr.SerNr!=lForecastUserr.SerNr) then begin
      if (GetYear(ForecastUserr.TransDate)==GetYear(lForecastUserr.TransDate)) then begin
        RecordCheckError(20010,"",-1,"TransDate");      
        res = -1;
        goto LForecastUserVcRecordCheck;
      end;
    end;
  end;
  if (transf) then begin
    if (ForecastUserr.AvailExclSupp==0) then begin
      RecordCheckError(1058,"",-1,"AvailExclSupp");      
      res = -1;
      goto LForecastUserVcRecordCheck;
    end;
    if (ForecastUserr.AvailInclSupp==0) then begin
      RecordCheckError(1058,"",-1,"AvailInclSupp");      
      res = -1;
      goto LForecastUserVcRecordCheck;
    end;
  end;
LForecastUserVcRecordCheck:;  
  ForecastUserVcRecordCheck = res;
  return;
end;

global
function LongInt ForecastUserVcRecordUpdate(var record ForecastUserVc ForecastUserr,record ForecastUserVc ForecastUser2r,LongInt long3,LongInt long4)
begin
  ForecastUserr.Month = GetMonth(ForecastUserr.TransDate);
  ForecastUserVcRecordUpdate = -1;
  return;
end;

global
function LongInt ForecastUserVcRecordSave(var record ForecastUserVc ForecastUserr,record ForecastUserVc ForecastUser2r,LongInt long3,LongInt long4)
begin
  ForecastUserr.Month = GetMonth(ForecastUserr.TransDate);
  ForecastUserVcRecordSave = -1;
  return;
end;

global
function LongInt ForecastUserVcRecordRemoveTest(var record ForecastUserVc ForecastUserr,record ForecastUserVc ForecastUser2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 0;
  if (ForecastUserr.OKFlag==0) then begin
    res = 1;
    goto LForecastUserVcRecordRemoveTest;
  end;
  BlockLoad(DBLockRec);
  if (ForecastUserr.TransDate<=DBLockRec.DeleteBeforeDate) then begin        
    res = 1;
  end;
  if (res==0) then begin
    if (long3>0) then begin MessageBox(1544,""); end;
  end;  
LForecastUserVcRecordRemoveTest:;
  ForecastUserVcRecordRemoveTest = res; 
  RETURN;
END;
