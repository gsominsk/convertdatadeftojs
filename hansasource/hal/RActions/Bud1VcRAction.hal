external function Integer CheckObjs(string,string,var string);
external updating procedure UpdateObjBal(string,string,Date,val,val,string,Boolean);
external procedure ExtractObj(string,var Integer,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure B1ToB2StrVal(string,val,val,var string);

global
function LongInt Bud1VcRecordDefaults(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Date blankd;
  Integer i;
  row Bud1Vc Bud1rw;

//  for (i=0;i<18;i=i+1) begin
//    ClearRow(Bud1r,Bud1rw,1);
//    Bud1rw.BudDate = blankd;
//    Bud1rw.DefStr = "";
//    Bud1rw.sval = blankval;
//    MatRowPut(Bud1r,i,Bud1rw);
//  end;  
  Bud1VcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt Bud1VcRecordDuplicate(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;

  res = 0;
  Bud1r.OKFlag = 0;
  Bud1VcRecordDuplicate = res;      
  RETURN;
END;

global
function LongInt Bud1VcRecordImport(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  val t,fr,to1,to2,br1,br2;
  string 255 tstr;
  string 5 crncycode;
  Integer i,rwcnt;
  row Bud1Vc Bud1rw; 
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    GetFullCurncyRate(crncycode,CurrentDate,fr,to1,to2,br1,br2);
    B1ToB2Val(Bud1r.BudSum,br1,br2,t);
    Bud1r.BudSum = t;
    rwcnt = MatRowCnt(Bud1r);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Bud1r,i,Bud1rw);
      B1ToB2Val(Bud1rw.sval,br1,br2,t);
      Bud1rw.sval = t;
      B1ToB2StrVal(Bud1rw.DefStr,br1,br2,tstr);
      Bud1rw.DefStr = tstr;
      MatRowPut(Bud1r,i,Bud1rw);
    end;
  end;
  Bud1VcRecordImport = res;
  RETURN;
END;

updating procedure AddBud1(record Bud1Vc Bud1p)
begin
  row Bud1Vc Bud1rw;
  Integer i,rwcnt;
  string 255 balostr;
  Integer pos;
  val t;
  
  rwcnt = MatRowCnt(Bud1p);
  for (i=0;i<rwcnt;i=i+1)  begin
    MatRowGet(Bud1p,i,Bud1rw);
    pos = 0;
    ExtractObj(Bud1p.Objects,pos,balostr);
    while (nonblank(balostr)) begin
      UpdateObjBal(Bud1p.AccNumber,balostr,Bud1rw.BudDate,t,t,"transdebit",false);
      UpdateObjBal(Bud1p.AccNumber,balostr,Bud1rw.BudDate,t,t,"transdebit2",false);
      ExtractObj(Bud1p.Objects,pos,balostr);
    end;        
  end;
  return;
end;

global
updating function LongInt Bud1VcRecordSaveAfter(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  AddBud1(Bud1r);
  Bud1VcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt Bud1VcRecordImportAfter(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  AddBud1(Bud1r);
  Bud1VcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt Bud1VcRecordUpdateAfter(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  AddBud1(Bud1r);
  Bud1VcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt Bud1VcRecordCheck(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt stat,LongInt long4)
BEGIN
  row Bud1Vc Bud1rw;
  LongInt res;
  Integer i,rwcnt;
  Integer errcode;
  string 255 errstr;
  record AccVc Accr;

  res = 0;
  Accr.AccNumber = Bud1r.AccNumber;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    RecordCheckError(1007,"",i,"AccNumber");      
    res = -1; 
    goto LBud1VcRecordCheck;
  end;
  rwcnt = MatRowCnt(Bud1r);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Bud1r,i,Bud1rw);
    if (DateInRange(Bud1rw.BudDate,Bud1r.StartDate,Bud1r.EndDate)==false) then begin
      RecordCheckError(20851,"",i,"BudDate");      
      res = -1; 
      goto LBud1VcRecordCheck;
    end;
  end;
  if (Bud1r.OKFlag==1) and (Bud12r.OKFlag==0) then begin
    if (UserCanAction("BudOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"BudOK"),-1,"AccNumber");      
      res = -1;
      goto LBud1VcRecordCheck;
    end;
  end;
  if (nonblank(Bud1r.Objects)) then begin
    errcode = CheckObjs("",Bud1r.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1; 
      goto LBud1VcRecordCheck;
    end;
  end;
  
LBud1VcRecordCheck:;
  Bud1VcRecordCheck = res;
  RETURN;
END;

global
function LongInt Bud1VcRecordRemoveTest(var record Bud1Vc Bud1r,record Bud1Vc Bud12r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (Bud1r.StartDate<=DBLockRec.DeleteBeforeDate) then begin
    if ((blankdate(DBLockRec.TRLock)) or (Bud1r.StartDate>DBLockRec.TRLock)) then begin
      res = 1;
      goto LBud1VcRecordRemoveTest;
    end;
  end;
  if (Bud1r.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LBud1VcRecordRemoveTest:;
  Bud1VcRecordRemoveTest = res; 
  RETURN;
END;
