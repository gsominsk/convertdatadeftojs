external function Boolean CanOKStockRecord(var Integer);
external updating procedure SaveTrans(record TRVc);
external procedure SetPOFlags(record POVc,Boolean);
external procedure SetORFlags(record ORVc);
external updating procedure DeleteTransaction(LongInt,Integer);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function LongInt GetCurUserLastNr(string);
external function Integer MakeTransFromDropSH(record TRVc,record DropSHVc,Boolean);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestDropSHVc(LongInt,Date,var Boolean);
external function Integer IsUnOKAllowed_DropSHVc(record DropSHVc);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function Boolean SerialNrAvail(string,string,string,val);

global
updating function LongInt DropSHVcRecordCheck(var record DropSHVc DropSHp,record DropSHVc DropSH2p,LongInt stat,LongInt check)
begin
  LongInt res;
  LongInt oldnr,newnr;
  Boolean transf,unokf,gentrans;
  Integer errcode;
  Integer i,rwcnt;
  row DropSHVc DropSHrw;
  record SRBlock SRb;
  record TRVc gTRp;
  string 255 errstr,tstr;
  record INVc INr;
  record MainStockBlock MSb;
  
  res = 0;
  BlockLoad(SRb);
  BlockLoad(MSb);
  oldnr = DropSHp.SerNr;
  if (stat==Rs_update) then begin
    if (DropSHp.SerNr<=0) and (DropSH2p.OKFlag==0) then begin
      DropSHp.SerNr = DropSH2p.SerNr;
    end;
  end;        
  oldnr = DropSHp.SerNr;
  transf = false;
  if (DropSHp.OKFlag!=0) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (DropSH2p.OKFlag==0) then begin
        transf = true;
      end;
    end;
  end;
  if (DropSHp.OKFlag==0) then begin
    if (stat==Rs_update) then begin
      if (DropSH2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_DropSHVc(DropSHp);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"ShipDate");      
      res = -1; 
    end;
    goto LDropSHVcRecordCheck;
  end;
  if (DropSHp.SerNr<=0) then begin
    newnr = GetCurUserLastNr("DropSHVc");
    if (newnr!=-1) then begin
       newnr = SRb.LastDropSHNr;
    end;
    DropSHp.SerNr = NextSerNr("DropSHVc",DropSHp.ShipDate,newnr,false,"");
  end;
  if (SerNrTestDropSHVc(DropSHp.SerNr,DropSHp.ShipDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LDropSHVcRecordCheck;
  end;
  if (Date2Test("DropSHVc",DropSHp.ShipDate,"ShipDate",-1)==false) then begin
    res = -1;
    goto LDropSHVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,DropSHp.ShipDate,"ShipDate",-1)) then begin
    res = -1;
    goto LDropSHVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("DropSHOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"DropSHOK"),-1,"SerNr");      
      res = -1; 
      goto LDropSHVcRecordCheck;
    end;
  end;  
  rwcnt = MatRowCnt(DropSHp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DropSHp,i,DropSHrw);
    if (nonblank(DropSHrw.ArtCode)) then begin
      if (ReadFirstItem(DropSHrw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
        res = -1; 
        goto LDropSHVcRecordCheck;
      end else begin
        if (INr.SerNrf==1) then begin
          if (blank(DropSHrw.SerialNr)) then begin
            RecordCheckError(1132,"",i,"SerialNr");      
            res = -1; 
            goto LDropSHVcRecordCheck;
          end else begin
/*
not in our stock
            if (SerialNrAvail(DropSHrw.ArtCode,DropSHrw.SerialNr,MSb.MainStock,DropSHrw.Ship)==false) then begin
              RecordCheckError(1240,"",i,"SerialNr");      
              res = -1; 
              goto LDropSHVcRecordCheck;
            end;
*/
          end;
        end;
      end;
    end;
    if (nonblank(DropSHrw.COSAcc)) then begin
      if (GetAccName(DropSHrw.COSAcc,tstr,60)==false) then begin
        RecordCheckError(1947,"",i,"COSAcc");      
        res = -1; 
        goto LDropSHVcRecordCheck;
      end;
    end;
    if (nonblank(DropSHrw.PurAccrualsAcc)) then begin
      if (GetAccName(DropSHrw.PurAccrualsAcc,tstr,60)==false) then begin
        RecordCheckError(1947,"",i,"PurAccrualsAcc");      
        res = -1; 
        goto LDropSHVcRecordCheck;
      end;
    end;
  end;
  
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromDropSH(gTRp,DropSHp,false);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1;
      goto LDropSHVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==DropSHYc)) then begin
      if (MatRowCnt(gTRp)>0) then begin
        errstr = CheckTrans(gTRp,2,true);
        if (nonblank(errstr)) then begin
          RecordCheckError(1085,errstr,-1,"SerNr");      
          res = -1;
          goto LDropSHVcRecordCheck;
        end;
        SaveTrans(gTRp);
      end;
    end;    
  end;
LDropSHVcRecordCheck:;
  if (res!=0) then begin
    DropSHp.SerNr = oldnr;
  end;
  DropSHVcRecordCheck = res;
  return;
end;

global
function LongInt DropSHVcRecordDefaults(var record DropSHVc DropSHr,record DropSHVc DropSH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
      
  DropSHr.SerNr = -1;
  DropSHr.OrderNr = -1;
  DropSHr.POOrderNr = -1;
  DropSHr.ShipDate = CurrentDate;
  DropSHr.Prntdf = 0;
  DropSHr.OKFlag = 0;
  DropSHr.ShipMode = "";  
  DropSHVcRecordDefaults = res; 
  return;
end;

global
function LongInt DropSHVcRecordDuplicate(var record DropSHVc DropSHr,record DropSHVc DropSH2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  DropSHr.SerNr = -1;
  DropSHr.Prntdf = 0;
  DropSHr.OKFlag = 0;
  DropSHVcRecordDuplicate = res; 
  return;
end;

global
updating function Boolean UpdateOrderFromDropShip(record DropSHVc DropSHp,Boolean dropshf,record DropSHVc DropSH2p,Boolean dropsh2f)
begin
  record ORVc oldORr;
  record ORVc ORr;
  row DropSHVc DropSHrw;
  row ORVc ORrw;
  Integer i,rwcnt;
  Integer orw,orcnt;

  if (dropshf) then begin
    ORr.SerNr = DropSHp.OrderNr;
  end else begin
    ORr.SerNr = DropSH2p.OrderNr;
  end;
  if (ReadFirstMain(ORr,1,true)) then begin
    RecordCopy(oldORr,ORr);
    orcnt = MatRowCnt(ORr);
    if (dropsh2f) then begin
      rwcnt = MatRowCnt(DropSH2p);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(DropSH2p,i,DropSHrw);
        if (DropSHrw.OrdRow!=-1) then begin
          orw = DropSHrw.OrdRow;
          if ((orw<orcnt) and (orw>-1)) then begin
            MatRowGet(ORr,orw,ORrw);
            ORrw.Shipd1 = ORrw.Shipd1 - DropSHrw.Ship;
            if (DropSH2p.OKFlag!=0) then begin
              ORrw.Shipd2 = ORrw.Shipd2 - DropSHrw.Ship;
            end;
            if (ORrw.Shipd1==0) then begin
              ORrw.Shipd1 = blankval;
            end;
            if (ORrw.Shipd2==0) then begin
              ORrw.Shipd2 = blankval;
            end;
            MatRowPut(ORr,orw,ORrw);
          end;
        end;
      end;
    end;
    if (dropshf) then begin
      rwcnt = MatRowCnt(DropSHp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(DropSHp,i,DropSHrw);
        if (DropSHrw.OrdRow!=-1) then begin
          orw = DropSHrw.OrdRow;
          if ((orw<orcnt) and (orw>-1)) then begin
            MatRowGet(ORr,orw,ORrw);
            ORrw.Shipd1 = ORrw.Shipd1 + DropSHrw.Ship;
            if (DropSHp.OKFlag!=0) then begin
              ORrw.Shipd2 = ORrw.Shipd2 + DropSHrw.Ship;
            end;
            if (ORrw.Shipd2==0) then begin
              ORrw.Shipd2 = blankval;
            end;
            if (ORrw.Shipd1==0) then begin
              ORrw.Shipd1 = blankval;
            end;
            MatRowPut(ORr,orw,ORrw);
          end;
        end;
      end;
    end;
    SetORFlags(ORr);
    if (RecordUpdate(oldORr,ORr,false)==0) then begin end;
  end;
  UpdateOrderFromDropShip = true;
  return;
end;

global
updating function Boolean UpdatePOFromDropShip(record DropSHVc DropSHp,Boolean dropshf,record DropSHVc DropSH2p,Boolean dropsh2f)
begin
  Boolean res;
  record POVc oldPOr;
  record POVc POr;
  row DropSHVc DropSHrw;
  row POVc POrw;
  Integer i,rwcnt;
  Integer orw,orcnt;
  Boolean testf;
  record INVc INr;
  string 255 tstr;
  
  if (dropshf) then begin
    POr.SerNr = DropSHp.POOrderNr;
  end else begin
    POr.SerNr = DropSH2p.POOrderNr;
  end;
  if (ReadFirstMain(POr,1,true)) then begin
    RecordCopy(oldPOr,POr);
    orcnt = MatRowCnt(POr);
    if (dropsh2f) then begin
      rwcnt = MatRowCnt(DropSH2p);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(DropSH2p,i,DropSHrw);
        if (DropSHrw.POOrdRow!=-1) then begin
          orw = DropSHrw.POOrdRow;
          if (orw<orcnt) then begin
            MatRowGet(POr,orw,POrw);
            POrw.Shipd1 = POrw.Shipd1 - DropSHrw.Ship;
            if (DropSH2p.OKFlag!=0) then begin
              POrw.Shipd2 = POrw.Shipd2 - DropSHrw.Ship;
            end;
            if (POrw.Shipd1==0) then begin
              POrw.Shipd1 = blankval;
            end;
            if (POrw.Shipd2==0) then begin
              POrw.Shipd2 = blankval;
            end;
            MatRowPut(POr,orw,POrw);
          end;
        end;
      end;
    end;
    if (dropshf) then begin
      if (DropSHp.Invalid==0) then begin
        rwcnt = MatRowCnt(DropSHp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(DropSHp,i,DropSHrw);
          if (DropSHrw.POOrdRow!=-1) then begin
            orw = DropSHrw.POOrdRow;
            if (orw<orcnt) then begin
              MatRowGet(POr,orw,POrw);
              POrw.Shipd1 = POrw.Shipd1 + DropSHrw.Ship;
              if (DropSHp.OKFlag!=0) then begin
                POrw.Shipd2 = POrw.Shipd2 + DropSHrw.Ship;
              end;
              if (POrw.Shipd1==0) then begin
                POrw.Shipd1 = blankval;
              end;
              if (POrw.Shipd2==0) then begin
                POrw.Shipd2 = blankval;
              end;
              MatRowPut(POr,orw,POrw);
            end;
          end;
        end;
      end;
    end;
    SetPOFlags(POr,false);
    if (RecordUpdate(oldPOr,POr,false)==0) then begin
    end;
    res = true;
  end;
LUpdatePOFromDropShip:;  
  UpdatePOFromDropShip = res;
  return;
end;

global
updating function LongInt DropSHVcRecordSaveAfter(var record DropSHVc DropSHr,record DropSHVc DropSH2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (DropSHr.OKFlag!=0) then begin
  end;

  if (DropSHr.OrderNr!=-1) then begin
    if (UpdateOrderFromDropShip(DropSHr,true,DropSH2r,false)) then begin end;
  end;
  if (DropSHr.POOrderNr!=-1) then begin
    if (UpdatePOFromDropShip(DropSHr,true,DropSH2r,false)) then begin end;
  end;

  DropSHVcRecordSaveAfter = res; 
  return;
end;

global
updating function LongInt DropSHVcRecordImportAfter(var record DropSHVc DropSHr,record DropSHVc DropSH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer err;

  if (DropSHr.OKFlag!=0) then begin
  end;

  if (ImportingTextBackup==false and CanOKStockRecord(err)==true) then begin
    if (DropSHr.OrderNr!=-1) then begin
      if (UpdateOrderFromDropShip(DropSHr,true,DropSH2r,false)) then begin end;
    end;
    if (DropSHr.POOrderNr!=-1) then begin
      if (UpdatePOFromDropShip(DropSHr,true,DropSH2r,false)) then begin end;
    end;
  end;
  DropSHVcRecordImportAfter = res; 
  return;
end;

global
updating function LongInt DropSHVcRecordUpdateAfter(var record DropSHVc DropSHr,record DropSHVc DropSH2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (DropSHr.OrderNr!=-1) then begin
    if (UpdateOrderFromDropShip(DropSHr,true,DropSH2r,true)) then begin end;
  end;
  if (DropSHr.POOrderNr!=-1) then begin
    if (UpdatePOFromDropShip(DropSHr,true,DropSH2r,true)) then begin end;
  end;
  
  if ((DropSHr.OKFlag==0) and (DropSH2r.OKFlag!=0)) then begin//unok
    StoreUnOKHistory("DropSHVc",DropSHr.SerNr,CurrentDate,CurrentTime,CurrentUser);    
    DeleteTransaction(DropSHr.SerNr,DropSHYc);
  end;
  DropSHVcRecordUpdateAfter = res; 
  return;
end;

global
function LongInt DropSHVcRecordRemoveTest(var record DropSHVc DropSHr,record DropSHVc DropSH2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockb;
  record ORVc ORr;
  record POVc POr;

  res = 0;
  if (DropSHr.OKFlag==0) then begin
    res = 1;
    goto LDropSHVcRecordRemoveTest;
  end;
  BlockLoad(DBLockb);
  if (DropSHr.ShipDate<=DBLockb.DeleteBeforeDate) then begin        
    res = 1;
    ORr.SerNr = DropSHr.OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin res = 0; end;
    POr.SerNr = DropSHr.POOrderNr;
    if (ReadFirstMain(POr,1,true)) then begin res = 0; end;
  end;
  if (res==0) then begin
    if (long3>0) then begin MessageBox(1544,""); end;
  end;  
LDropSHVcRecordRemoveTest:;
  DropSHVcRecordRemoveTest = res; 
  return;
end;

global
updating function LongInt DropSHVcRecordRemoveAfter(var record DropSHVc DropSHr,record DropSHVc DropSH2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (DropSHr.OrderNr!=-1) then begin
    if (UpdateOrderFromDropShip(DropSHr,false,DropSHr,true)) then begin end;
  end;
  if (DropSHr.POOrderNr!=-1) then begin
    if (UpdatePOFromDropShip(DropSHr,false,DropSHr,true)) then begin end;
  end;
  DropSHVcRecordRemoveAfter = res; 
  return;
end;
