external procedure RsrtEventSumup(record RsrtEventVc);
external updating procedure AddRsrtEventRowPackageToEventShopBask(record HotelBlock,LongInt,record RsrtEventVc,row RsrtEventVc);

global
procedure SetRsrtEventFlags(record RsrtEventVc REventr)
begin
  row RsrtEventVc REventrw;
  Integer i,rwcnt;
  Integer inv;

  inv = 2;
  rwcnt = MatRowCnt(REventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(REventr,i,REventrw);
    if (REventrw.IVNr<=0) then begin
      if (REventr.StatusFlag!=kRsrtEventStatusDone) then begin
        inv = 0;
      end else begin
        inv = 1;
      end;
    end;
  end;

  REventr.InvFlag = inv;
  switch (REventr.InvFlag) begin
    case 0: REventr.InvMark = 0;
    case 1: REventr.InvMark = asc("+");
    case 2: REventr.InvMark = 18;
  end;
  switch (REventr.StatusFlag) begin
    case kRsrtEventStatusRequested: REventr.StatusMark = 0;
    case kRsrtEventStatusPlanned: REventr.StatusMark = 0;
    case kRsrtEventStatusConfirmed: REventr.StatusMark = asc("+");
    case kRsrtEventStatusDone: REventr.StatusMark = 18;
    case kRsrtEventStatusCancelled: REventr.StatusMark = asc("-");
  end;
  return;
end;

global
function LongInt RsrtEventVcRecordDefaults(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
      
  res = 0;
  RsrtEventr.IgnoreInEventsAvail = 0;
  RsrtEventr.StatusFlag = kRsrtEventStatusRequested;
  if (SingleUserMode) then begin
    RsrtEventr.SerNr = NextSerNr("RsrtEventVc",RsrtEventr.StartDate,-1,false,"");
  end;
  RsrtEventVcRecordDefaults = res;
  return;
end;  

global
function LongInt RsrtEventVcRecordDuplicate(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
      
  res = 0;
  RsrtEventr.StatusFlag = kRsrtEventStatusRequested;
  if (SingleUserMode) then begin
    RsrtEventr.SerNr = NextSerNr("RsrtEventVc",RsrtEventr.StartDate,-1,false,"");
  end;
  RsrtEventVcRecordDuplicate = res;
  return;
end;  

global
function LongInt RsrtEventVcRecordCheck(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ResLocVc RLr;
  record RsrtEventTypeVc RETr;
  record ResVc Resr;
  record CUVc CUr;
  record JobVc Jobr;
  row JobVc Jobrw;
  row RsrtEventVc RsrtEventrw;
  row RsrtEventVc RsrtEvent2rw;
  Integer i,rwcnt;
  Integer j,guestcnt;
  Integer k,krwcnt;
  Boolean testf;
  record HotelBlock Hotelb;
      
  res = 0;
  BlockLoad(Hotelb);
  if (RsrtEventr.SerNr<=0) then begin
    RsrtEventr.SerNr = NextSerNr("RsrtEventVc",RsrtEventr.StartDate,-1,false,"");
  end;
  if (nonblank(RsrtEventr.ResLoc)) then begin
    RLr.Code = RsrtEventr.ResLoc;
    if (ReadFirstMain(RLr,1,true)==false) then begin
      RecordCheckError(1120,"",-1,"ResLoc");      
      res = -1; 
      goto LRsrtEventVcRecordCheck;
    end;
  end;
  if (nonblank(RsrtEventr.EventType)) then begin
    RETr.Code = RsrtEventr.EventType;
    if (ReadFirstMain(RETr,1,true)==false) then begin
      RecordCheckError(1120,"",-1,"EventType");      
      res = -1; 
      goto LRsrtEventVcRecordCheck;
    end;
  end;
  if (nonblank(RsrtEventr.ResCode)) then begin
    Resr.Code = RsrtEventr.ResCode;
    if (ReadFirstMain(Resr,1,true)==false) then begin
      RecordCheckError(1120,"",-1,"ResCode");      
      res = -1; 
      goto LRsrtEventVcRecordCheck;
    end;
  end;
  RsrtEventSumup(RsrtEventr);
  rwcnt = MatRowCnt(RsrtEventr);
   if (rwcnt>0) then begin
    if (RsrtEventr.TotQty>RsrtEventr.MaxPersons) then begin
      RecordCheckError(1946,"",rwcnt-1,"CustCode");      
      res = -1; 
      goto LRsrtEventVcRecordCheck;
    end;
  end;
  if (rwcnt==0) then begin//do not allow it , it has dramatic consequqnces if u do 
    RecordCheckError(1030,"",0,"GuestCode");      
    res = -1;
    goto LRsrtEventVcRecordCheck;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RsrtEventr,i,RsrtEventrw);
    if (nonblank(RsrtEventrw.CustCode)) then begin
      CUr.Code = RsrtEventrw.CustCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        RecordCheckError(1120,"",i,"CustCode");      
        res = -1; 
        goto LRsrtEventVcRecordCheck;
      end;
    end;
    if (nonblank(RsrtEventrw.GuestCode)) then begin
      CUr.Code = RsrtEventrw.GuestCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        RecordCheckError(1120,"",i,"GuestCode");      
        res = -1; 
        goto LRsrtEventVcRecordCheck;
      end;
    end;
    if (RsrtEventrw.JobNr>0) then begin
      guestcnt = 0;
      Jobr.SerNr = RsrtEventrw.JobNr;
      if (ReadFirstMain(Jobr,1,true)==false) then begin
        RecordCheckError(1120,"",i,"JobNr");      
        res = -1; 
        goto LRsrtEventVcRecordCheck;
      end;
      if (RsrtEventr.StatusFlag==kRsrtEventStatusDone) then begin
        if (Jobr.ResStatus!=Hotelb.ChInSt) then begin        
          RecordCheckError(1935,"",i,"JobNr");      
          res = -1; 
          goto LRsrtEventVcRecordCheck;
        end;
      end;
      for (j=0;j<rwcnt;j=j+1) begin
        MatRowGet(RsrtEventr,j,RsrtEvent2rw);
        if (RsrtEvent2rw.JobNr==RsrtEventrw.JobNr) then begin
          guestcnt = guestcnt + 1;
        end;
      end;
      if (guestcnt>Jobr.Pax) then begin
        RecordCheckError(20470," " & RsrtEventrw.JobNr,i,"JobNr");      
        res = -1; 
        goto LRsrtEventVcRecordCheck;
      end;
      testf = true;
      krwcnt = MatRowCnt(Jobr);
      if (krwcnt>0) then begin
        testf = false;
      end;
      for (k=0;k<krwcnt;k=k+1) begin
        MatRowGet(Jobr,k,Jobrw);
        if (Jobrw.GuestCode==RsrtEventrw.GuestCode) then begin
          testf = true;
          k = krwcnt;
        end;
      end;
      if (testf==false) then begin
        RecordCheckError(20471," " & RsrtEventrw.GuestCode,i,"GuestCode");      
        res = -1; 
        goto LRsrtEventVcRecordCheck;
      end;
    end else begin
      if (RsrtEventrw.Invoicing==kResortEventOnReservation) then begin
        RecordCheckError(2246,"",i,"Invoicing");      
        res = -1; 
        goto LRsrtEventVcRecordCheck;
      end;
    end;
  end;
LRsrtEventVcRecordCheck:;  
  RsrtEventVcRecordCheck = res;
  return;
end;  

updating procedure AddRsrtEventRowToReservationShopBask(record HotelBlock Hotelb,record RsrtEventVc RsrtEventr,row RsrtEventVc RsrtEventrw)
begin
  record ShopBaskVc ShopBaskr;
  record JobVc Jobr;
  record RsrtEventTypeVc RETr;  
  record INVc INr;
  
  Jobr.SerNr = RsrtEventrw.JobNr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    if (Jobr.ResStatus==Hotelb.ChInSt) then begin        
      RecordClear(ShopBaskr);
      RETr.Code = RsrtEventr.EventType;
      ReadFirstMain(RETr,1,true);
      ShopBaskr.DestinationNr = -1;
      ShopBaskr.Destination = kShopBaskDestinationInvoice;
      ShopBaskr.TransDate = CurrentDate;
      ShopBaskr.TransTime = CurrentTime;
      ShopBaskr.CUCode = RsrtEventrw.CustCode;
      ShopBaskr.ItemCode = RETr.ArtCode;
      ShopBaskr.Qty = 1.00;
      ShopBaskr.Price = RsrtEventrw.Price;
//      ShopBaskr.PriceInCur = RsrtEventrw.Price;
      ShopBaskr.Discount = blankval;
      ShopBaskr.OwnerSerNr = RsrtEventrw.JobNr;
      ShopBaskr.Owner = kShopBaskOwnerReservation;
      INr.Code = RETr.ArtCode;
      ReadFirstMain(INr,1,true);
      ShopBaskr.Objects = INr.Objects;
      ShopBaskr.Comment = RsrtEventrw.GuestCode & " " & RsrtEventrw.GuestName & " " & INr.Name;
      ShopBaskr.FromFileName = "RsrtEventVc";
      ShopBaskr.FromSerNr = RsrtEventr.SerNr;
      ShopBaskr.InclVAT = 0;
      ShopBaskr.SortingAtTop = 0;
      ShopBaskr.SerNr = NextSerNr("ShopBaskVc",CurrentDate,-1,false,"");
      if (ShopBaskr.SerNr>0) then begin
        RecordStore(ShopBaskr,false);
      end;
    end;
  end;
  return;
end;  

global
updating procedure AddRsrtEventRowToEventShopBask(record HotelBlock Hotelb,LongInt mothershopbasknr,record RsrtEventVc RsrtEventr,row RsrtEventVc RsrtEventrw)
begin
  record ShopBaskVc ShopBaskr;
  record RsrtEventTypeVc RETr;  
  record RsrtEventTypePackVc RETPr;  
  record INVc INr;
  
  RecordClear(ShopBaskr);
  ShopBaskr.DestinationNr = RsrtEventrw.IVNr;
  ShopBaskr.Destination = kShopBaskDestinationInvoice;
  ShopBaskr.TransDate = CurrentDate;
  ShopBaskr.TransTime = CurrentTime;
  ShopBaskr.CUCode = RsrtEventrw.CustCode;
  if (nonblank(RsrtEventrw.RsrtEventTypePack)) then begin
    RETPr.Code = RsrtEventrw.RsrtEventTypePack;
    ReadFirstMain(RETPr,1,true);
    ShopBaskr.ItemCode = RETPr.ArtCode;
  end else begin
    RETr.Code = RsrtEventr.EventType;
    ReadFirstMain(RETr,1,true);
    ShopBaskr.ItemCode = RETr.ArtCode;
  end;  
  ShopBaskr.Qty = 1.00;
  ShopBaskr.Discount = blankval;
  ShopBaskr.OwnerSerNr = RsrtEventr.SerNr;
  ShopBaskr.Owner = kShopBaskOwnerRsrtEvent;
  INr.Code = RETr.ArtCode;
  ReadFirstMain(INr,1,true);
  ShopBaskr.Price = RsrtEventrw.Price;
//      ShopBaskr.PriceInCur = RsrtEventrw.Price;
  if (ShopBaskr.Price==0) then begin
    ShopBaskr.Price = INr.UPrice1;
//      ShopBaskr.PriceInCur = RsrtEventrw.Price;
  end;
  ShopBaskr.Objects = INr.Objects;
  ShopBaskr.Comment = RsrtEventrw.GuestCode & " " & RsrtEventrw.GuestName & " " & INr.Name;
  ShopBaskr.FromFileName = "RsrtEventVc";
  ShopBaskr.FromSerNr = RsrtEventr.SerNr;
  ShopBaskr.InclVAT = 0;
  ShopBaskr.SortingAtTop = 0;
  ShopBaskr.SerNr = NextSerNr("ShopBaskVc",CurrentDate,-1,false,"");
  if (ShopBaskr.SerNr>0) then begin
    if (RecordStore(ShopBaskr,false)) then begin
      AddRsrtEventRowPackageToEventShopBask(Hotelb,ShopBaskr.SerNr,RsrtEventr,RsrtEventrw);
    end;
  end;
  return;
end;  

updating procedure AddRsrtEventToShopBask(record HotelBlock Hotelb,record RsrtEventVc RsrtEventr)
begin
  row RsrtEventVc RsrtEventrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(RsrtEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RsrtEventr,i,RsrtEventrw);
    if (RsrtEventrw.Status<=3) or (RsrtEventrw.Status==6) or (RsrtEventrw.Status==7) then begin
      switch (RsrtEventrw.Invoicing) begin
        case kResortEventInvoiceable:
          AddRsrtEventRowToEventShopBask(Hotelb,-1,RsrtEventr,RsrtEventrw);
        case kResortEventOnReservation:
          AddRsrtEventRowToReservationShopBask(Hotelb,RsrtEventr,RsrtEventrw);
      end;
    end;
  end;
  return;
end;

updating procedure StoreRsrtEventHistory(LongInt SerNr,Date TransDate,string EventType,Integer rownr,row RsrtEventVc RsrtEventrw)
begin
  record RsrtEventHistVc REHr;
  
  RecordNew(REHr);
  REHr.EventNr = SerNr;
  REHr.TransDate = TransDate;
  REHr.EventType = EventType;
  REHr.EventRow = rownr;

  REHr.SequenceNr = RsrtEventrw.SequenceNr;
    
  REHr.RsrtEventTypePack = RsrtEventrw.RsrtEventTypePack;
  REHr.FromFileName = RsrtEventrw.FromFileName;
  REHr.FromTransNr = RsrtEventrw.FromTransNr;

  REHr.SerNr = NextSerNr("RsrtEventHistVc",REHr.TransDate,-1,false,"");
  RecordStore(REHr,false);
  return;
end;

updating procedure SaveRsrtEventHistory(record RsrtEventVc RsrtEventr)
begin
  row RsrtEventVc RsrtEventrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(RsrtEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RsrtEventr,i,RsrtEventrw);
    StoreRsrtEventHistory(RsrtEventr.SerNr,RsrtEventr.StartDate,RsrtEventr.EventType,i,RsrtEventrw);
  end;
  return;
end;

updating procedure RemoveRsrtEventHistory(record RsrtEventVc RsrtEventr)
begin
  record RsrtEventHistVc REHr;
  Boolean found;
  
  found = true;
  REHr.EventNr = RsrtEventr.SerNr;
  while (LoopKey("EventNr",REHr,1,found)) begin
    if (REHr.EventNr!=RsrtEventr.SerNr) then begin found = false; end;
    if (found) then begin
      RecordDelete(REHr);
      StepBack(REHr);
    end;
  end;
  return;
end;

updating procedure UpdateRsrtEventHistory(record RsrtEventVc RsrtEventr)
begin
  row RsrtEventVc RsrtEventrw;
  Integer i,rwcnt;
  
  RemoveRsrtEventHistory(RsrtEventr);

  rwcnt = MatRowCnt(RsrtEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RsrtEventr,i,RsrtEventrw);
    StoreRsrtEventHistory(RsrtEventr.SerNr,RsrtEventr.StartDate,RsrtEventr.EventType,i,RsrtEventrw);
  end;
  return;
end;

global
function LongInt RsrtEventVcRecordSave(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record RsrtEventHistVc REHr;
  row RsrtEventVc RsrtEventrw;
  Integer i,rwcnt;

  SetRsrtEventFlags(RsrtEventr);
  rwcnt = MatRowCnt(RsrtEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RsrtEventr,i,RsrtEventrw);
    if (RsrtEventrw.SequenceNr<=0) then begin
      REHr.SequenceNr = 1 000 000 000 000;
      ReadLastKey("SequenceNr",REHr,1,true);
      RsrtEventrw.SequenceNr = REHr.SequenceNr;
      if (RsrtEventrw.SequenceNr<=0) then begin
        RsrtEventrw.SequenceNr = 1;
      end;
      MatRowPut(RsrtEventr,i,RsrtEventrw);
    end;
  end;
  RsrtEventVcRecordSave = res;
  return;
end;

global
updating function LongInt RsrtEventVcRecordSaveAfter(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record HotelBlock Hotelb;
      
  res = 0;
  switch (RsrtEventr.StatusFlag) begin
    case kRsrtEventStatusDone:
      BlockLoad(Hotelb);
      AddRsrtEventToShopBask(Hotelb,RsrtEventr);
  end;
  SaveRsrtEventHistory(RsrtEventr);
  RsrtEventVcRecordSaveAfter = res;
  return;
end;  

global
function LongInt RsrtEventVcRecordUpdate(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record RsrtEventHistVc REHr;
  row RsrtEventVc RsrtEventrw;
  Integer i,rwcnt;

  SetRsrtEventFlags(RsrtEventr);
  rwcnt = MatRowCnt(RsrtEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RsrtEventr,i,RsrtEventrw);
    if (RsrtEventrw.SequenceNr<=0) then begin
      REHr.SequenceNr = 1 000 000 000 000;
      ReadLastKey("SequenceNr",REHr,1,false);
      RsrtEventrw.SequenceNr = REHr.SequenceNr + 1;
      if (RsrtEventrw.SequenceNr<=0) then begin
        RsrtEventrw.SequenceNr = 1;
      end;
      MatRowPut(RsrtEventr,i,RsrtEventrw);
    end;
  end;
  RsrtEventVcRecordUpdate = res;
  return;
end;

global
updating function LongInt RsrtEventVcRecordUpdateAfter(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record HotelBlock Hotelb;
      
  res = 0;
  switch (RsrtEventr.StatusFlag) begin
    case kRsrtEventStatusDone:
      if (RsrtEvent2r.StatusFlag!=kRsrtEventStatusDone) then begin
        BlockLoad(Hotelb);
        AddRsrtEventToShopBask(Hotelb,RsrtEventr);
      end;
  end;
  UpdateRsrtEventHistory(RsrtEventr);
  RsrtEventVcRecordUpdateAfter = res;
  return;
end;  

global
updating function LongInt RsrtEventVcRecordRemove(record RsrtEventVc RsrtEventr,record RsrtEventVc RsrtEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  RemoveRsrtEventHistory(RsrtEventr);
  RsrtEventVcRecordRemove = res;
  return;
end;

global
function LongInt RsrtEventVcRecordRemoveTest(var record RsrtEventVc REr,record RsrtEventVc RE2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLb;
  row RsrtEventVc RErw;
  Integer i,rwcnt;

  res = 1;
  if (REr.StatusFlag>=2) then begin
    BlockLoad(DBLb);
    if (REr.EndDate>DBLb.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LRsrtEventVcRecordRemoveTest;
    end;
  end;
  rwcnt = MatRowCnt(REr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(REr,i,RErw);
    if (RErw.IVNr>0) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LRsrtEventVcRecordRemoveTest;      
    end;
  end;
LRsrtEventVcRecordRemoveTest:;
  RsrtEventVcRecordRemoveTest = res;  
  return;
end;
