external function Integer PayTermType(string);
external updating procedure POCreateInterCompanyOR(record POVc);
external function Integer POApprovalStatus(record POVc,var record AcceptanceRulesVc);
external updating procedure CreateActFromPO(record POVc);
external updating procedure DeletePlannedPayment(string,LongInt,LongInt);
external updating procedure POCreatePlannedPayment(record POVc);
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external function LongInt GetCurUserLastNr(string);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Integer VerifyTaxTemplateCode(string,var string);
external function Boolean AcceptanceRulesExists(Integer,string);
external function Boolean UseTaxTemplatesforTaxCalc();
external function Integer SetAcceptanceStatus(Integer,string,val);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function Boolean WillPOQtyCoverReservations(record POVc);
external function Boolean DoesPOHaveReservations(record POVc);
external updating procedure PORemoveUpdateDfncyStock(record POVc);
external function Integer VATType(string);
external function Boolean IsVATCodeDefined(string);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function Boolean CanOKStockRecord(var Integer);
external procedure SwapM4Val(var val,var val);
external updating procedure AssignStockResFromPO(record POVc);
//external updating procedure UpdateAcceptRec(LongInt,string,Integer);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external updating procedure UpdateVARItemsPO(record POVc);
external function Boolean CheckPDExists(string);
//external updating procedure GenerateAcceptRec(string,LongInt,string,string,val);
remote function Boolean POVc_PasteLocation(var record POVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean AllowThisItem(string,string,string,Integer);
external function Boolean CorrectM4ValProc(val);
external function Integer CheckObjs(string,string,var string);
external function Boolean CheckPOCQStatVECode(LongInt, string,var Integer);
external function Boolean SerNrTestPOVc(LongInt,Date,var Boolean);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external updating procedure UpdatePOOut(record POVc,Boolean,Boolean);
external procedure SetPOFlags(record POVc,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetSalesGroup(string,var string);
external updating procedure UpdateStockResFromPO(record POVc,boolean);

global
function LongInt POVcRecordInIndex(record POVc POr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if ((POr.OSFlag==0) or (POr.Sum4<=POr.PrepaidAmount)) then begin 
    if (indexname=="ActSerNr")  then begin res = 0; end;
    if (indexname=="ActTransDate")  then begin res = 0; end;
    if (indexname=="ActVECode")  then begin res = 0; end;
    if (indexname=="ActName")  then begin res = 0; end;
  end;
  if (POr.PUFlag==0) and (POr.PIFlag==0) then begin 
    if (indexname=="ActArtCodeOSFlag")  then begin res = 0; end;
  end;
  if ((POr.PUFlag!=0) or (POr.PIFlag!=0) or (POr.OKFlag!=0)) then begin 
    if (indexname=="VECodeOpen")  then begin res = 0; end;
  end;
  POVcRecordInIndex = res;
  return;
end;

global
function LongInt POVcRecordRemoveTest(var record POVc POr,record POVc PO2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  record PUVc PUr;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;

  res = 1;
  BlockLoad(DBLockRec);
  if (blankdate(DBLockRec.DeleteBeforeDate) or POr.TransDate>DBLockRec.DeleteBeforeDate) then begin
    PUr.PONr = POr.SerNr;
    if (ReadFirstKey("PONr",PUr,1,true)) then begin
      if (long3>0) then begin MessageBox(1560,""); end;
      res = 0;
      goto LPOVcRecordRemoveTest;
    end;    
    if (POr.OKFlag!=0) then begin
      if (long3>0) then begin MessageBox(1560,""); end;
      res = 0;
      goto LPOVcRecordRemoveTest;
    end;
    if (DoesPOHaveReservations(POr)) then begin
      if (long3>0) then begin MessageBox(22065,""); end;
      res = 0;
      goto LPOVcRecordRemoveTest;
    end;
    actnr = 1;
    while (ReadRecordLink(POr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval) then begin
        if (long3>0) then begin MessageBox(22408,""); end;
        res = 0;
        goto LPOVcRecordRemoveTest;
      end;
      actnr = actnr + 1;
    end;
  end;
LPOVcRecordRemoveTest:;
  POVcRecordRemoveTest = res; 
  return;
end;

procedure PasteLocationToPO(string location,record POVc POp)
begin
  record LocationVc Locr;
  
  Locr.Code = location;
  if (ReadFirstMain(Locr,1,true)) then begin
    POp.Location = Locr.Code;
    POp.ShipAddr0 = Locr.Name;
    POp.ShipAddr1 = Locr.Addr0;
    POp.ShipAddr2 = Locr.Addr1;
    POp.ShipAddr3 = Locr.Addr2;
    POp.DelAddr3 = Locr.Addr3;
    POp.DelAddr4 = Locr.Addr4;    
  end;
  return;
end;

global
function LongInt POVcRecordDefaults(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;
  string 255 tstr;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  record MainStockBlock MSb;
  record AccBlock ARAccb;
  record POSettingBlock POSetb;
  
  BlockLoad(ARAccb);
  BlockLoad(MSb);
  BlockLoad(POSetb);
  if (POSetb.PUQuant!=0) then begin 
    POr.SetZeroPUQuant = 1;
  end;
  POr.SerNr = -1;
  POr.TransDate = CurrentDate;
  POr.OKFlag = 0;
  POr.ExportFlag = 0;
  POr.OSFlag = 0;
  POr.InvFlag = 0;
  POr.PIFlag = 0;
  POr.POCOSerNr = -1;
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    POr.OurContact = Userr.CurOurContact;
    PasteLocationToPO(Userr.Location,POr);
    POr.SalesMan = Userr.Code;
    GetSalesGroup(POr.SalesMan,tstr);
    POr.SalesGroup = tstr;    
  end;
  POr.PayDeal = "";
  POr.CurncyCode = "";
  POr.OrdNr = -1;
  POr.WONr = -1;
  POr.POCQStatNr = -1;  
  curcode = POr.CurncyCode;
  GetFullCurncyRate(curcode,POr.TransDate,fr,to1,to2,br1,br2);
  POr.CurncyCode = curcode;
  POr.FrRate = fr;
  POr.ToRateB1 = to1; 
  POr.ToRateB2 = to2;
  POr.BaseRate1 = br1;
  POr.BaseRate2 = br2;  
  POr.OKPersons = "";
  POr.InvBeforePU = MSb.AllowInvBeforePU;
  POr.ExtraCostsCalculation = MSb.ExtraCostsCalculation;
  if (SingleUserMode) then begin
    POr.SerNr = NextSerNr("POVc",POr.TransDate,-1,false,"");
  end;
  POr.NoTAXonVAT = ARAccb.NoTAXonVAT;
  POVcRecordDefaults = res; 
  return;
end;

global
function LongInt POVcRecordDuplicate(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  row POVc POrw;
  record MainStockBlock MainStockRec;

  BlockLoad(MainStockRec);
  POr.SerNr = -1;
  POr.OrdNr = -1;
  POr.WONr = -1;
  POr.POCQStatNr = -1;  
  POr.OKFlag = 0;
  POr.Closed = 0;
  POr.IntORNo = -1;
  rwcnt = MatRowCnt(POr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    POrw.Shipd1 = blankval;
    POrw.Shipd2 = blankval;
    POrw.Invd = blankval;
    POrw.WSNr = -1;
    POrw.IntORRow = -1;
//    POrw.PRCode = "";
    MatRowPut(POr,i,POrw);
  end;
  if (SingleUserMode) then begin
    POr.SerNr = NextSerNr("POVc",POr.TransDate,-1,false,"");
  end;
  curcode = POr.CurncyCode;
  GetFullCurncyRate(curcode,POr.TransDate,fr,to1,to2,br1,br2);
  POr.CurncyCode = curcode;
  POr.FrRate = fr;
  POr.ToRateB1 = to1; 
  POr.ToRateB2 = to2;
  POr.BaseRate1 = br1;
  POr.BaseRate2 = br2;  
  POr.OKPersons = "";
  POr.AcceptanceBy = "";
  POr.AcceptanceFYI = "";
  POr.DownPaySent = blankval;  
  POr.DownPayRedcd = blankval;  
//  POr.InvBeforePU = MainStockRec.AllowInvBeforePU;//they want this to be copied
  SetPOFlags(POr,false);
  WarnFutureDate(true,POr.TransDate);
  POr.OrderType = kOrderTypeNormal;
  POVcRecordDuplicate = res; 
  return;
end;

procedure AutRecNonStockItem(record POVc POp)
begin
  row POVc POrw;
  Integer i,rwcnt;
  record MainStockBlock MainStockRec;
  record INVc INr;
  Boolean updf;

  BlockLoad(MainStockRec);
  if (MainStockRec.RecevPlainItems==1) then begin
    rwcnt = MatRowCnt(POp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POp,i,POrw);
      INr.Code = POrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        if ((INr.ItemType==0) or (INr.ItemType==3)) then begin
          if (POrw.Quant>POrw.Shipd1) then begin
            POrw.Shipd1 = POrw.Quant;
            updf = true;
          end;
          if (POrw.Quant>POrw.Shipd2) then begin
            POrw.Shipd2 = POrw.Quant;
            updf = true;
          end;
          if (updf) then begin MatRowPut(POp,i,POrw); end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure PRPOINStatUp(LongInt posernr,Date td,string project,string artcode,val quantp,val sump,Boolean addf)
begin
  record PRPOINVc PRPOr;
  record PRPOINVc oldPRPOr;
  Boolean found;
  Boolean delf;
  val q,s;
  
  if (blank(artcode)) then begin goto LPRPOINStatUp; end;
  if (blank(project)) then begin goto LPRPOINStatUp; end;
  q = quantp;
  s = sump;
  if ((q!=0) or (s!=0)) then begin
    delf = false;
    PRPOr.POSerNr = posernr;
    PRPOr.Project = project;
    PRPOr.Item = artcode;
    found = ReadFirstMain(PRPOr,3,true);
    RecordCopy(oldPRPOr,PRPOr);
    if (found) then begin
    end else begin
      PRPOr.POSerNr = posernr;
      PRPOr.Project = project;
      PRPOr.Item = artcode;
      PRPOr.TransDate = td;
      PRPOr.POQty = 0;
      PRPOr.POVal = 0;
    end;
    if (addf==false) then begin
      q = -q;
      s = -s;
    end;
    PRPOr.POQty = PRPOr.POQty + q;
    PRPOr.POVal = PRPOr.POVal + s;
    if (PRPOr.POVal==0) then begin delf = true; end;
    if (PRPOr.POQty==0) then begin delf = true; end;
    if (delf==false) then begin
      if (found) then begin
        if (RecordUpdate(oldPRPOr,PRPOr,true)==0) then begin end;
      end else begin
        if (RecordStore(PRPOr,false)) then begin end;
      end;
    end else begin
      if (found==true) then begin
        RecordDelete(oldPRPOr);
      end;
    end;
  end;
LPRPOINStatUp:;
  return;
end;

global
updating procedure UpdatePRPO(record POVc POp,Boolean addf)
begin
  row POVc POrw;
  Integer i,rwcnt;
  string 255 project;
  val valinbase1;

  rwcnt = MatRowCnt(POp);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    if (POrw.stp==1) then begin
      if (nonblank(POrw.PRCode) or nonblank(POp.PRCode)) then begin
         if (nonblank(POrw.PRCode)) then begin
           project = POrw.PRCode;
         end else begin
           project = POp.PRCode;
         end;
         valinbase1 = MulRateToBase1(POp.CurncyCode,POrw.Sum,POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,DefaultCurRoundOff);
         PRPOINStatUp(POp.SerNr,POp.TransDate,project,POrw.ArtCode,POrw.Quant,valinbase1,addf);      
      end;
    end;
  end;
  return;
end;

global
updating procedure POUpdatePOCO(record POVc POp,Boolean negf)
begin
  record POCOVc oldPOCOr;
  record POCOVc POCOr;
  row POCOVc POCOrw;
  row POVc POrw;
  Integer i,rwcnt,pococnt;

  POCOr.SerNr = POp.POCOSerNr;
  if (ReadFirstMain(POCOr,1,true)) then begin
    RecordCopy(oldPOCOr,POCOr);
    pococnt = MatRowCnt(POCOr);
    rwcnt = MatRowCnt(POp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POp,i,POrw);
      if (POrw.POCORow!=-1) then begin
        if ((POrw.POCORow<pococnt) and (POrw.POCORow>-1)) then begin
          MatRowGet(POCOr,POrw.POCORow,POCOrw);
          if (negf) then begin
            POCOrw.Ordered = POCOrw.Ordered - POrw.Quant;
          end else begin
            POCOrw.Ordered = POCOrw.Ordered + POrw.Quant;
          end;
          MatRowPut(POCOr,POrw.POCORow,POCOrw);
        end;
      end;
    end;
    if (RecordUpdate(oldPOCOr,POCOr,false)==0) then begin end;
  end;
  return;
end;

/*
wierd stuff
updating procedure POUpdatePOCO(record POVc POr)
begin
  record POCOVc POCOr;
  row POCOVc POCOrw;
  Integer poi,porwcnt;
  Integer i,rwcnt,j;
  val rval;
  record POVc POr1;
  row POVc POrw1;
  array string 20 icode;
  array val ordqty;
  integer maxi;
  longint wPOCONr;
  boolean found,TrHs,testf;
    
  wPOCONr = POr.POCOSerNr;  
  if (wPOCONr>0) then begin
  RecordNew(POr1);
  POr1.POCOSerNr = wPOCONr;
  TrHs = true;
  maxi = 0;
  While (LoopKey("POCOSerNr",POr1,1,TrHs)) begin
    if (POr1.POCOSerNr==wPOCONr) then begin
      rwcnt = MatRowCnt(POr1);
      found = false;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POr1,i,POrw1);
        for (j=0;j<maxi;j=j+1) begin
          if (icode[j]==POrw1.ArtCode) then begin
            ordqty[j] = POrw1.Quant+ordqty[j];
            found = true;
            j = maxi;                       
          end;    
        end;
        if (found==false) then begin
          ordqty[maxi] = POrw1.Quant;
          icode[maxi] = POrw1.ArtCode;
          maxi = maxi+1;
        end;
      end;
    end else begin  
      TrHs = false;
    end;  
  end;
   
  POCOr.SerNr = wPOCONr;
  TrHs = true;
  if (ReadFirstMain(POCOr,1,true)) then begin
    rwcnt = MatRowCnt(POCOr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POCOr,i,POCOrw);
      for (j=0;j<maxi;j=j+1) begin
        if (icode[j]==POCOrw.ArtCode) then begin
          if (ordqty[j]<=POCOrw.Quant) then begin
            POCOrw.Ordered = ordqty[j];
            ordqty[j] = 0;
          end else begin
            POCOrw.Ordered = POCOrw.Quant;
            ordqty[j] = ordqty[j] - POCOrw.Ordered;
          end;
          j = maxi;     
        end;    
      end;
      MatRowPut(POCOr,i,POCOrw);   
    end;
    testf = RecordStore(POCOr,true);
  end;  
  end;
  return;
end;
*/

global
updating function LongInt POVcRecordSave(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  AutRecNonStockItem(POr);
  SetPOFlags(POr,false);
  UpdatePOOut(POr,true,false);
  UpdatePRPO(POr,true);
  if (POr.OKFlag==1) then begin 
    if (SetInSet(CurrentUser,POr.OKPersons)==false) then begin
      if (nonblank(POr.OKPersons)) then begin
        POr.OKPersons = POr.OKPersons & ",";
      end;
      POr.OKPersons = POr.OKPersons & CurrentUser;
    end;
  end;  
  POVcRecordSave = res; 
  return;
end;

global
updating function LongInt POVcRecordUpdate(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  AutRecNonStockItem(POr);
  SetPOFlags(POr,false);
  UpdatePOOut(PO2r,false,false);
  UpdatePOOut(POr,true,false);
  UpdatePRPO(PO2r,false);
  UpdatePRPO(POr,true);
  if (POr.OKFlag==1) and (PO2r.OKFlag==0) then begin 
    if (SetInSet(CurrentUser,POr.OKPersons)==false) then begin
      if (nonblank(POr.OKPersons)) then begin
        POr.OKPersons = POr.OKPersons & ",";
      end;
      POr.OKPersons = POr.OKPersons & CurrentUser;
    end;
  end;  
  POVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt POVcRecordRemove(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  UpdatePOOut(POr,false,false);
  UpdatePRPO(POr,false);
  UpdateStockResFromPO(POr,true);
  POVcRecordRemove = res; 
  return;
end;

updating procedure UpdateIntOrderFromPO(record POVc POp,record POVc PO2p)
begin
  Integer i,rwcnt;
  row POVc POrw;
  record IntORVc oldIntORr;
  record IntORVc IntORr;
  row IntORVc IntORrw;
  Integer orw,orcnt;
  Boolean testf;
  record AcceptanceRulesVc Acptr;

  if (RecordValid(POp)) then begin
    IntORr.SerNr = POp.IntORNo;
  end else begin
    IntORr.SerNr = PO2p.IntORNo;
  end;
  if (ReadFirstMain(IntORr,1,true)) then begin
    RecordCopy(oldIntORr,IntORr)
    orcnt = MatRowCnt(IntORr);    
    if (RecordValid(PO2p)) then begin
    if (PO2p.SerNr!=-1) then begin
      rwcnt = MatRowCnt(PO2p);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PO2p,i,POrw);
        if (POrw.IntORRow!=-1) then begin
          orw = POrw.IntORRow;
          if (orw<orcnt) then begin
            MatRowGet(IntORr,orw,IntORrw);
            IntORrw.POOrd = IntORrw.POOrd - POrw.Quant;
            if (IntORrw.POOrd==0) then begin IntORrw.POOrd = blankval; end;
            MatRowPut(IntORr,orw,IntORrw);
          end;
        end;
      end;
    end;
    end;
    if (RecordValid(POp)) then begin
      testf = true;
      i = POApprovalStatus(POp,Acptr);
      if (i!=kAcceptanceStateApproved) and (i!=kAcceptanceStateNotRequired) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(POp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(POp,i,POrw);
          if (POrw.IntORRow!=-1) then begin
            orw = POrw.IntORRow;
            if (orw<orcnt) then begin
              MatRowGet(IntORr,orw,IntORrw);
              IntORrw.POOrd = IntORrw.POOrd + POrw.Quant;
              if (IntORrw.POOrd==0) then begin IntORrw.POOrd = blankval; end;
              MatRowPut(IntORr,orw,IntORrw);
            end;
          end;
        end;
      end;
    end;
//    SetIntORFlags(IntORr);
    if (RecordUpdate(oldIntORr,IntORr,false)==0) then begin // When added IntORVcRecordProtectFields, had to change this to false
    end;
  end;
  return;
end;

global
updating function LongInt POVcRecordSaveAfter(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  CreateActFromPO(POr);
  POUpdatePOCO(POr,false);
  if (POr.IntORNo!=-1) then begin
    UpdateIntOrderFromPO(POr,PO2r);
  end;
  UpdateVARItemsPO(POr);
  if (POr.OKFlag!=0) then begin
    AssignStockResFromPO(POr);
  end;
  POCreatePlannedPayment(POr);
  if (POr.OKFlag!=0) then begin
    POCreateInterCompanyOR(POr);
  end;
  POVcRecordSaveAfter = res;
  return;
end;

global
updating  function LongInt POVcRecordUpdateAfter(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  val bc1v;
  
  POUpdatePOCO(PO2r,true);
  POUpdatePOCO(POr,false);
  if ((POr.IntORNo!=-1) and (PO2r.OKFlag==0)) then begin
    UpdateIntOrderFromPO(POr,PO2r);
  end;  
  UpdateVARItemsPO(POr);
  if ((POr.OKFlag!=0) and (PO2r.OKFlag==0)) then begin
    AssignStockResFromPO(POr);
    POCreateInterCompanyOR(POr);
  end;
  UpdateStockResFromPO(POr,POr.Closed);
  if (PO2r.Sum4!=POr.Sum4) then begin
    DeletePlannedPayment("POVc",POr.SerNr,-1);
    POCreatePlannedPayment(POr);
  end;
  POVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt POVcRecordRemoveAfter(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  POUpdatePOCO(POr,true);
  PORemoveUpdateDfncyStock(POr);
  if (POr.IntORNo!=-1) then begin
    UpdateIntOrderFromPO(PO2r,POr);
  end;
  POVcRecordRemoveAfter = res;
  return;
end;

global
function Date ConvertPlanShipString(string PlanShip)
begin
  Date res;
  record PlanDeliveryBlock PlanDelRec;

  BlockLoad(PlanDelRec);
  if (PlanDelRec.FieldType==1) then begin
    res = StringToDate(PlanShip);
  end;
  ConvertPlanShipString = res;
  return;
end;

procedure POVcConvertB1ToB2(var val to1p,var val to2p,var val br1p,var val br2p)
begin    
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  return;
end;

global
function LongInt POVcRecordImport(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gToDualBase,gBase1ToBase2;
  record ConvMasterBlock cvm;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    curncy = POr.CurncyCode;
    fr = POr.FrRate;
    to1 = POr.ToRateB1;
    to2 = POr.ToRateB2;
    br1 = POr.BaseRate1;
    br2 = POr.BaseRate2;
    t = POr.Sum4;
    ConvertToDualBase(curncy,POr.TransDate,fr,to1,to2,br1,br2,t,true);
    POr.CurncyCode = curncy;
    POr.FrRate = fr;
    POr.ToRateB1 = to1;
    POr.ToRateB2 = to2;
    POr.BaseRate1 = br1;
    POr.BaseRate2 = br2;
    POr.Sum4 = t;       
  end;
  if (blankdate(POr.PlanShipDate)) then begin
    POr.PlanShipDate = ConvertPlanShipString(POr.PlanShip);
  end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    curncy = POr.CurncyCode;
    to1 = POr.ToRateB1;
    to2 = POr.ToRateB2;
    br1 = POr.BaseRate1;
    br2 = POr.BaseRate2;
    POVcConvertB1ToB2(to1,to2,br1,br2);
    POr.ToRateB1 = to1;
    POr.ToRateB2 = to2;
    POr.BaseRate1 = br1;
    POr.BaseRate2 = br2;
  end;
  if (POr.NoTAXonVAT==-1) then begin
    POr.NoTAXonVAT = 0;
  end;
  POr.PrepaidAmount = blankval;
  SetPOFlags(POr,false);
  POVcRecordImport = res;
  return;
end;

global
updating function LongInt POVcRecordImportAfter(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer err;

  UpdatePRPO(POr,true);
  if (ImportingTextBackup==false and CanOKStockRecord(err)==true) then begin
    UpdatePOOut(POr,true,true);
  end;
  POVcRecordImportAfter = res; 
  return;
end;

function Boolean POReservationsExists(record POVc POr)
begin
  record StockReservVc StockReservr;
  Boolean foundf;
  Boolean res;
  
  res = false;
  StockReservr.Donef = 0;
  StockReservr.ToFileName = kResTypeExistingPO;
  StockReservr.ToSerNr = POr.SerNr;
  foundf = true;
  while (LoopKey("ToItem",StockReservr,3,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=kResTypeExistingPO) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=POr.SerNr) then begin foundf = false; end;
    if (foundf) then begin
      res = true;
      foundf = false;
    end;
  end;
  POReservationsExists = res;
  return;
end;

global
function Integer ValidatePORecord(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4,Boolean disperrf,var string errmsg)
begin
  LongInt res;
  record PRVc PRr;
  record POrderClassVc POCr;
  record POSettingBlock POSettingRec;
  Integer insertmode,updatemode;
  string 255 tstr,errstr,objstr;
  Integer i,rwcnt,errcode;
  LongInt oldnr,newnr;
  Boolean gentrans,found,transf;
  row POVc POrw;
  record INVc INr;
  record CUVc VEr;
  record PlanDeliveryBlock PDb;
  Integer prevvt,curvt;
  Boolean check;
  record LocationVc Locationr;
  record TaxTemplateVc TTr;
  record SRBlock SRb;
  record SerNrTrackBlock SNrb;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  Boolean initotcheckf;    
  transaction string 255 gRuniningMaint;
  record AccVc Accr;
  LongInt l;

  res = 0;
  insertmode = 1;
  updatemode = 2;
  BlockLoad(SRb);
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  BlockLoad(SNrb);
  BlockLoad(POSettingRec);
  rwcnt = MatRowCnt(POr);
  if (stat==Rs_update) then begin
    if (POr.SerNr<=0) and (PO2r.OKFlag==0) then begin
      POr.SerNr = PO2r.SerNr;
    end;
  end;  
  if (stat==Rs_update) then begin
    if (PO2r.OKFlag!=0) then begin
      goto LPOVcRecordCheck;
    end;
  end;
  oldnr = POr.SerNr;
  if (POr.SerNr<=0) then begin
    newnr = GetCurUserLastNr("POVc");
    if (newnr==-1) then begin newnr = SRb.LastPONr; end;
    POr.SerNr = NextSerNr("POVc",POr.TransDate,newnr,false,"");
  end;
  if (SerNrTestPOVc(POr.SerNr,POr.TransDate,gentrans)==false) then begin
    if (disperrf) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
    end;
    res = 1557; 
    goto LPOVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(disperrf,POr.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LPOVcRecordCheck;
  end;
  transf = false;
  if (POr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (PO2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (transf) then begin
    if (UserCanAction("POOK",true)==false) then begin
      if (disperrf) then begin
        RecordCheckError(1274,StringFromStringSet(3,"POOK"),-1,"SerNr");      
      end;
      res = 1274;
      goto LPOVcRecordCheck;
    end;
  end;  
  if (RecordValid(PO2r)) then begin
    if (PO2r.OKFlag!=0) and (POr.OKFlag!=1)  then begin
      if (UserCanAction("UnOKPO",true)==false) and (UserCanAction("UnOKAll",true)==false) then begin
        if (disperrf) then begin
          RecordCheckError(1274,StringFromStringSet(3,"UnOKPO"),-1,"SerNr");      
        end;
        res = 1274;
        goto LPOVcRecordCheck;
      end;
      if (POReservationsExists(POr)) then begin
        if (disperrf) then begin
          RecordCheckError(1274,"",-1,"SerNr");      
        end;
        res = 1274;
        goto LPOVcRecordCheck;
      end;
    end;  
  end;
  if (CheckPDExists(POr.PayDeal)==false) then begin
    if (disperrf) then begin
      RecordCheckError(1256,"",-1,"PayDeal");      
    end;
    res = 1256;
    goto LPOVcRecordCheck;        
  end; 
  switch (PayTermType(POr.PayDeal)) begin
    case kInvoiceTypeCredit:
      RecordCheckError(1227,POr.PayDeal,-1,"PayDeal");      
      res = -1;
      goto LPOVcRecordCheck;
    case kInvoiceTypeEmployee:
      RecordCheckError(1958,"",-1,"PayDeal");      
      res = -1;
      goto LPOVcRecordCheck;
  end;
  
  if (CheckPOCQStatVECode(POr.POCQStatNr,POr.VECode,i)==false) then begin
    if (disperrf) then begin
      RecordCheckError(i,"",-1,"POCQStatNr");      
    end;
    res = i; 
    goto LPOVcRecordCheck;
  end;  
  VEr.Code = POr.VECode;
  if (ReadFirstMain(VEr,1,true)==false) then begin
    if (disperrf) then begin
      RecordCheckError(1205,"",-1,"VECode");      
    end;
    res = 1205; 
    goto LPOVcRecordCheck;
  end;
  if (VEr.blockedFlag!=0) then begin
    if (disperrf) then begin
      RecordCheckError(20872,POr.VECode,-1,"VECode");      
    end;
    res = -1;
    goto LPOVcRecordCheck;
  end;
  if (nonblank(VEr.VECurncyCode)) then begin
    if (VEr.VECurncyCode!=POr.CurncyCode) then begin
      if (disperrf) then begin
        RecordCheckError(1217,"",-1,"CurncyCode");
      end;
      res = -1;
      goto LPOVcRecordCheck;
    end;
  end;      
  
  if (rwcnt==0) then begin
    if (disperrf) then begin
      RecordCheckError(1030,"",-1,"SerNr");      
    end;
    res = 1030; 
    goto LPOVcRecordCheck;
  end;
  if (nonblank(POr.PRCode)) then begin
    PRr.Code = POr.PRCode;
    if (ReadFirstMain(PRr,1,true)==false) then begin
      if (disperrf) then begin
        RecordCheckError(1232,"",-1,"PRCode");      
      end;
      res = 1232; 
      goto LPOVcRecordCheck;
    end;
    if (PRr.Terminated!=0) then begin
      if (disperrf) then begin
        RecordCheckError(1232,"",-1,"PRCode");      
      end;
      res = 1232; 
      goto LPOVcRecordCheck;
    end;        
  end;  
  if (nonblank(POr.Location)) then begin
    Locationr.Code = POr.Location;
    if (ReadFirstMain(Locationr,1,true)==false) then begin
      RecordCheckError(1290,"",-1,"Location");      
      res = -1;
      goto LPOVcRecordCheck;
    end;
  end;
  if (nonblank(POr.Objects)) then begin     
    errcode = CheckObjs("",POr.Objects,errstr);
    if (errcode!=0) then begin
      if (disperrf) then begin
        RecordCheckError(errcode,errstr,-1,"Objects");      
      end;
      res = errcode; 
      goto LPOVcRecordCheck;
    end;
  end;  
  if (check) then begin
  if (POSettingRec.ReqPOClass==1) then begin
    if (blank(POr.POClass)) then begin
      if (disperrf) then begin
        RecordCheckError(20096,"",-1,"POClass");
      end;
      res = 20096;
      goto LPOVcRecordCheck;  
    end;
  end;  
  end;
  if (nonblank(POr.POClass)) then begin
    POCr.Code = POr.POClass;
    if (ReadFirstMain(POCr,1,true)==false) then begin
      if (disperrf) then begin
        RecordCheckError(20097,"",-1,"POClass");
      end;
      res = 20097;
      goto LPOVcRecordCheck;
    end;
  end;
  if (WillPOQtyCoverReservations(POr)==false) then begin
    if (disperrf) then begin
      RecordCheckError(22066,"",-1,"SerNr");
    end;
    res = 22066;
    goto LPOVcRecordCheck;
  end;
  if (HasLocalization("PRT")) then begin
    VEr.Code = POr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
      if (blank(VEr.VATNr)) then begin
        RecordCheckError(20275,"",-1,"VECode");      
        res = -1;
        goto LPOVcRecordCheck;
      end;
    end;
  end;
  found = true; 
  if (stat==updatemode) then begin
    if (POr.Closed!=0) and (PO2r.Closed==0) then begin
      found = false; 
    end;
  end;
  if (found) then begin
    errcode = CheckRates(POr.CurncyCode,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,tstr);
    if (errcode!=0) then begin
      if (disperrf) then begin
        RecordCheckError(errcode,"",-1,tstr);      
      end;
      res = errcode; 
      goto LPOVcRecordCheck;
    end;        
  end;
  prevvt = -1;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    if (IsStandardProduct) then begin
      if (HasLocalization("POL")) then begin
        if (len(POrw.Spec)>35) then begin
          RecordCheckError(22139,"",i,"Spec");      
          res = -1;
          goto LPOVcRecordCheck;
        end;
      end;
    end;
    switch (POrw.stp) begin
      case 1:
        if (HasLocalization("LTU,LVA")==false and nonblank(POrw.VATCode)) then begin
          curvt = VATType(POrw.VATCode);
          if (curvt==kVATTypeReversed) or (prevvt==kVATTypeReversed) then begin
            if (curvt!=prevvt) and (prevvt!=-1) then begin
              if (disperrf) then begin
                RecordCheckError(20270,"",i,"VATCode");      
              end;
              res = 20270; 
              goto LPOVcRecordCheck;
            end;
          end;
        end;
        prevvt = curvt;
        
        if (nonblank(POrw.VATCode)) then begin
          if (VATAccIsClosed(POrw.VATCode,tstr,1)) then begin
            if (disperrf) then begin
              RecordCheckError(1258,tstr,i,"VATCode");      
            end;
            res = 1258; 
            goto LPOVcRecordCheck;
          end;          
          if (IsVATCodeDefined(POrw.VATCode)==false) then begin
            if (disperrf) then begin
              RecordCheckError(1120,POrw.VATCode,i,"VATCode");      
            end;
            res = 1120; 
            goto LPOVcRecordCheck;
          end;
        end;
        if (nonblank(POrw.ArtCode)) then begin
          if (POrw.Quant<0) then begin
            if (disperrf) then begin
              RecordCheckError(1574,"",i,"Quant");      
            end;
            res = 1574;
            goto LPOVcRecordCheck;
          end;
          if (StockRecordForLocationAllowed("POVc",POr.Location,POrw.ArtCode,POr.TransDate,POr.OKFlag,errcode,errstr)==false) then begin
            RecordCheckError(errcode,errstr,i,"ArtCode");      
            res = -1;
            goto LPOVcRecordCheck;
          end;
          found = ReadFirstItem(POrw.ArtCode,INr,true,false);
          if (found==false) then begin
            if (disperrf) then begin
              RecordCheckError(1120,POrw.ArtCode,i,"ArtCode");      
            end;
            errmsg = POrw.ArtCode;
            res = 1120; 
            goto LPOVcRecordCheck;
          end;
          if (INr.Terminated!=0) and (POrw.Shipd2==0) and (POrw.Invd==0) then begin
            if (disperrf) then begin
              RecordCheckError(21447,POrw.ArtCode,i,"ArtCode");      
            end;
            res = 21447; 
            goto LPOVcRecordCheck;
          end;
          if (long4!=10) then begin
            if (POrw.Quant<POrw.Shipd1) then begin
              if ((INr.ItemType!=kItemTypePlain) and (INr.ItemType!=kItemTypeService)) then begin
                if (disperrf) then begin
                  RecordCheckError(1302,"",i,"Quant");      
                end;
                res = 1302;
                goto LPOVcRecordCheck;
              end;
            end;
          end;
          switch (INr.SerNrf) begin
            case 1:
              if (SNrb.BulkSerialNos!=0) then begin
              end else begin
                l = POrw.Quant;
                if ((POrw.Quant - l)!=0) then begin
                  if (disperrf) then begin
                    RecordCheckError(1242,"",i,"SerialNr");
                  end;
                  res = 1242; 
                  goto LPOVcRecordCheck;
                end;
              end;
            case 2:
            otherwise
              if (INr.SerNrf<1) then begin
                if (POrw.StockType==kStockTypeConsigment) then begin
                  if (disperrf) then begin
                    RecordCheckError(1953,"",i,"StockType");      
                  end;
                  res = 1953;
                  goto LPOVcRecordCheck;
                end;
                if (POrw.TREO==kTREO) then begin
                  RecordCheckError(1953,"",i,"TREO");
                  res = -1;
                  goto LPOVcRecordCheck;
                end;
              end; 
          end;       
          if (INr.ItemType==2) then begin
            if (disperrf) then begin
              RecordCheckError(1826,POrw.ArtCode,i,"ArtCode");      
            end;
            res = 1826; 
            goto LPOVcRecordCheck;
          end;
          tstr = POr.PRCode;
          if (nonblank(POrw.PRCode)) then begin
            tstr = POrw.PRCode;
          end;
          if (AllowThisItem("POVc",tstr,POrw.ArtCode,INr.ItemType)==false) then begin
            if (disperrf) then begin
              RecordCheckError(1285,POrw.ArtCode,i,"ArtCode");      
            end;
            res = 1285; 
            goto LPOVcRecordCheck;
          end;
        end;
        if (UseTaxTemplatesforTaxCalc) then begin
          if (nonblank(POrw.ArtCode)) then begin
            if (blank(POrw.TaxTemplateCode)) then begin
              if (disperrf) then begin
                RecordCheckError(24201,"",i,"TaxTemplateCode");      
              end;
              res = 24201;
              goto LPOVcRecordCheck;
            end;
            errcode = VerifyTaxTemplateCode(POrw.TaxTemplateCode,tstr);
            if (errcode!=0) then begin
              if (disperrf) then begin
                RecordCheckError(errcode,tstr,i,"TaxTemplateCode");                
              end;
              res = 1120; 
              goto LPOVcRecordCheck;
            end;
          end;
        end else begin
          if (blank(POrw.VATCode) and (POrw.Sum!=0)) and (VEr.ExportFlag==0) then begin
            if (disperrf) then begin
              RecordCheckError(1134,"",i,"VATCode");      
            end;
            res = 1134; 
            goto LPOVcRecordCheck;
          end;
        end;
        if (CorrectM4ValProc(POrw.vRebate)==false) then begin
          if (disperrf) then begin
            RecordCheckError(1019,"",i,"vRebate");      
          end;
          res = 1019; 
          goto LPOVcRecordCheck;
        end;
        if (nonblank(POrw.PRCode)) then begin
          PRr.Code = POrw.PRCode;
          if (ReadFirstMain(PRr,1,true)==false) then begin
            if (disperrf) then begin
              RecordCheckError(1232,"",i,"PRCode");      
            end;
            res = 1232; 
            goto LPOVcRecordCheck;
          end;
          if (PRr.Terminated!=0) then begin
            if (disperrf) then begin
              RecordCheckError(1232,"",i,"PRCode");      
            end;
            res = 1232; 
            goto LPOVcRecordCheck;
          end;        
        end;  
//        if (nonblank(POrw.Objects)) then begin     
          VerifyRowObjects("PL",POr.Objects,POrw.Objects,POrw.CostAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);                        
          if (errcode!=0) then begin
            if (disperrf) then begin
              RecordCheckError(errcode,errstr,i,"Objects");      
            end;
            res = errcode; 
            goto LPOVcRecordCheck;
          end;
//        end;          
        if (nonblank(POrw.ArtCode)) and (gRuniningMaint!="GenPOFromORMn1") then begin     
          if (blank(POr.PlanShip)) then begin
            if (blank(POrw.PlanShipRow)) then begin
              if (check) then begin
                BlockLoad(PDb);
                if (PDb.ForcePlanDelDate!=0) then begin
                  if (disperrf) then begin
                    RecordCheckError(1058," " & USetStr(2040),i,"PlanShipRow"); 
                  end;
                  res = 1058; 
                  goto LPOVcRecordCheck;
                end;
              end;
            end;
          end;
        end;
        if (nonblank(POrw.CostAcc)) then begin
          Accr.AccNumber = POrw.CostAcc;
          if (ReadFirstMain(Accr,1,true)==false) then begin
            RecordCheckError(1007,POrw.CostAcc,i,"CostAcc");      
            res = -1; 
            goto LPOVcRecordCheck;
          end else begin
            if (Accr.blockedFlag!=0) then begin
              RecordCheckError(1258,POrw.CostAcc,i,"CostAcc");      
              res = -1; 
              goto LPOVcRecordCheck;
            end;
            if (Accr.GroupAcc!=0) then begin
              RecordCheckError(1084,POrw.CostAcc,i,"CostAcc");      
              res = -1; 
              goto LPOVcRecordCheck;
            end;
          end;
        end;
    end;
  end;
LPOVcRecordCheck:;
  if (res!=0) then begin POr.SerNr = oldnr; end;  
  ValidatePORecord = res;
  return;
end;

global
function LongInt POVcRecordCheck(var record POVc POr,record POVc PO2r,LongInt stat,LongInt along4)
begin
  LongInt res,long4;
  string 255 errmsg;
  transaction Boolean gMaintenance;
  
  res = 0;
  long4 = along4;
  if (gMaintenance) then begin
    long4 = 0;
  end;
  if (ValidatePORecord(POr,PO2r,stat,long4,true,errmsg)!=0) then begin
    res = -1;
  end;
  POVcRecordCheck = res;
  return;
end;
