external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPMRow(string,var row PMBlock);
external function Boolean CheckCurncy(string,string);
external function Boolean PayModeAccIsClosed(string);
external function Boolean PayModeRegistered(string);
external function string 255 CurDrawerCode(string);
external function Boolean IsSessionOpen(string,string,Date,Time);
external function Boolean RequireOpenSession(string);
external updating procedure SaveTrans(record TRVc);
external function Boolean SerNrTestForexTRVc(LongInt,Date,var Boolean);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external function Boolean TransInFiscal(Date);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external function Integer CheckObjs(string,string,var string);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2Val(val,val,val,var val);

global
function LongInt ForexTRVcRecordDefaults(var record ForexTRVc FTRr,record ForexTRVc FTR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  FTRr.TransDate = CurrentDate;
  FTRr.MachineName = CurMachineName;
  FTRr.Drawer = CurDrawerCode(FTRr.MachineName);
  ForexTRVcRecordDefaults = res; 
  return;
end;

global
function LongInt ForexTRVcRecordDuplicate(var record ForexTRVc FTRr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  FTRr.SerNr = -1;
  FTRr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    FTRr.SerNr = NextSerNr("ForexTRVc",FTRr.TransDate,-1,false,"");            
  end;  
  FTRr.OKFlag = 0;
  FTRr.MachineName = CurMachineName;
  FTRr.Drawer = CurDrawerCode(FTRr.MachineName);
  ForexTRVcRecordDuplicate = res; 
  return;
end;

procedure SetTypeMark(var record ForexTRVc FTRr)
begin
  if (FTRr.OKFlag==0) then begin
    switch (FTRr.Type) begin
      case kForexTRTypeSell:
        FTRr.TypeMark = asc("+");
      case kForexTRTypeBuy:
        FTRr.TypeMark = asc("-");
    end;
  end;
  return;
end;

global
function LongInt ForexTRVcRecordSave(var record ForexTRVc FTRr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  SetTypeMark(FTRr);
  ForexTRVcRecordSave = res; 
  return;
end;

global
function LongInt ForexTRVcRecordUpdate(var record ForexTRVc FTRr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  SetTypeMark(FTRr);
  ForexTRVcRecordUpdate = res; 
  return;
end;

global
function LongInt ForexTRVcRecordImport(var record ForexTRVc FTRr,record ForexTRVc FTR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  string 10 curcode;
  val t,fr,to1,to2,br1,br2;
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    B1ToB2Val(FTRr.BaseTotal,FTRr.BaseRate1,FTRr.BaseRate2,t);
    FTRr.BaseTotal = t;
  end;
  ForexTRVcRecordImport = res;
  return;
end;

global
function Integer MakeTransFromForexTR(var record TRVc gTRp,record ForexTRVc FTRr,Boolean rpt)
begin
  Integer errstrno;
  record TRGenBlock TRGenb;
  record TRVc lTRr;
  string 255 tstr;
  val rs,rategain;
  val TotSum;
  Boolean dc1,dc2;
  row PMBlock PMrw;
  val fr,to1,to2,base1,base2;
  record AccBlock ARAccb;
  
  errstrno = 1085;// Transactions could not be generated, please check settings 
  BlockLoad(TRGenb);
  BlockLoad(ARAccb);
  if (rpt==false) then begin
    if (TRGenb.ForexTRGenTrans==0) then begin
      errstrno = 0;
      goto LMakeTransFromForexTR;
    end;
  end;  
  if (rpt==false) then begin
    if (nonblankdate(TRGenb.ForexTRStartDate) and
        (FTRr.TransDate<TRGenb.ForexTRStartDate)) then begin
      errstrno = 0;
      goto LMakeTransFromForexTR;
    end;
  end;  
  if (true) then begin
    gTRp.IntYc = ForexTRYc;
    gTRp.Number = FTRr.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      errstrno = 1032;
      goto LMakeTransFromForexTR;
    end;
  end;  
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = FTRr.TransDate;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    errstrno = 1075;
    goto LMakeTransFromForexTR;
  end;
  switch (FTRr.Type) begin
    case kForexTRTypeSell:
      dc1 = false;
      dc2 = true;
    case kForexTRTypeBuy:
      dc1 = true;
      dc2 = false;
  end;
  gTRp.Comment = FTRr.CustCode;
  gTRp.Comment = gTRp.Comment & " ";
  gTRp.Comment = gTRp.Comment & FTRr.Addr0;
  if (nonblank(FTRr.CurncyCode)) then begin
    gTRp.Comment = gTRp.Comment & ", ";
    gTRp.Comment = gTRp.Comment & FTRr.CurncyCode;
    gTRp.Comment = gTRp.Comment & " ";
    GetFullCurncyRateText(true,tstr,FTRr.FrRate,FTRr.ToRateB1,FTRr.ToRateB2,FTRr.BaseRate1,FTRr.BaseRate2);
    gTRp.Comment = gTRp.Comment & tstr;
  end;
  GetPMRow(FTRr.PayMode,PMrw);
  if (GetAccName(pmrw.AccNr,tstr,60)==false) then begin
    errstrno = 2191;
    goto LMakeTransFromForexTR;
  end;
  GetFullCurncyRate(FTRr.CurncyCode,FTRr.TransDate,fr,to1,to2,base1,base2);
  rs = MulRateToBase1(FTRr.CurncyCode,FTRr.Total,fr,to1,to2,base1,base2,DefaultCurRoundOff);
  AddEuroCurncyTrRow(gTRp,pmrw.AccNr,FTRr.Objects,"",tstr,rs,false,dc1,TotSum,
                     FTRr.CurncyCode,fr,to1,to2,base1,base2,FTRr.Total,-1,-1,false,"");  //FTRr.FrRate,FTRr.ToRateB1,FTRr.ToRateB2,FTRr.BaseRate1,FTRr.BaseRate2

  if (GetAccName(ARAccb.ForexTRAcc,tstr,60)==false) then begin
    errstrno = 20017;
    goto LMakeTransFromForexTR;
  end;
  AddEuroCurncyTrRow(gTRp,ARAccb.ForexTRAcc,FTRr.Objects,"",tstr,FTRr.BaseTotal,false,dc2,TotSum,
                     FTRr.CurncyCode,FTRr.FrRate,FTRr.ToRateB1,FTRr.ToRateB2,FTRr.BaseRate1,FTRr.BaseRate2,FTRr.Total,-1,-1,false,"");
  rategain = FTRr.BaseTotal - rs;
  if (rategain>0) then begin
    if (GetAccName(ARAccb.RateGainAcc,tstr,60)==false) then begin
      errstrno = 1917;
      goto LMakeTransFromForexTR;
    end;
    AddEuroCurncyTrRow(gTRp,ARAccb.RateGainAcc,"","",tstr,rategain,true,dc1,TotSum,
                         "",blankval,blankval,blankval,base1,base2,blankval,blankval,-1,false,"");
  end else begin
    if (GetAccName(ARAccb.RateLossAcc,tstr,60)==false) then begin
      errstrno = 1918;
      goto LMakeTransFromForexTR;
    end;
    AddEuroCurncyTrRow(gTRp,ARAccb.RateLossAcc,"","",tstr,rategain,true,dc1,TotSum,
                         "",blankval,blankval,blankval,base1,base2,blankval,blankval,-1,false,"");
  end;
  errstrno = 0;
LMakeTransFromForexTR:;  
  MakeTransFromForexTR = errstrno;
  return;
end;

global
updating function LongInt ForexTRVcRecordCheck(var record ForexTRVc FTRr,record ForexTRVc FTR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer errcode;
  string 255 tstr;
  record CUVc CUr;
  record TRVc gTRp;
  Boolean transf,gentrans;
    
  res = 0;
  transf = false;
  switch (stat) begin
    case Rs_insert:
      if (FTRr.OKFlag!=0) then begin
        transf = true;
      end;
    case Rs_update:
      if (FTRr.OKFlag!=0) then begin
        transf = true;
      end;
  end;
  if (FTRr.SerNr<=0) then begin
    FTRr.SerNr = NextSerNr("ForexTRVc",FTRr.TransDate,-1,false,"");
  end;
  if (SerNrTestForexTRVc(FTRr.SerNr,FTRr.TransDate,gentrans)==false) then begin
    RecordCheckError(1034,"",-1,"SerNr");      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;
  if (FTRr.Total==0) then begin
    RecordCheckError(1058,"",-1,"Total");      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;    
  if (FTRr.BaseTotal==0) then begin
    RecordCheckError(1058,"",-1,"Total");      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;    
  if (blank(FTRr.PayMode)) then begin
    RecordCheckError(1207,"",-1,"PayMode");      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;
  if (PayModeRegistered(FTRr.PayMode)==false) then begin
    RecordCheckError(1120,FTRr.PayMode,-1,"PayMode");
    res = -1;
    goto LForexTRVcRecordCheck;
  end;
  if (CheckCurncy(FTRr.PayMode,FTRr.CurncyCode)==false) then begin
    RecordCheckError(1425,"",-1,"PayMode");      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;
  if (PayModeAccIsClosed(FTRr.PayMode)) then begin
    RecordCheckError(1258,FTRr.PayMode,-1,"PayMode");      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;  
  if (nonblank(FTRr.CustCode)) then begin
    CUr.Code = FTRr.CustCode;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      RecordCheckError(1120,FTRr.CustCode,-1,"CustCode");      
      res = -1; 
      goto LForexTRVcRecordCheck;
    end;
  end;
  errcode = CheckRates(FTRr.CurncyCode,FTRr.FrRate,FTRr.ToRateB1,FTRr.ToRateB2,FTRr.BaseRate1,FTRr.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;    
  errcode = CheckObjs(FTRr.Objects,"",tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,tstr,-1,"Objects");      
    res = -1; 
    goto LForexTRVcRecordCheck;
  end;
  FTRr.TransTime = CurrentTime;
  if (RequireOpenSession(FTRr.MachineName)) then begin
    if (IsSessionOpen(FTRr.MachineName,FTRr.Drawer,FTRr.TransDate,FTRr.TransTime)) then begin
      RecordCheckError(2199,"",-1,"SerNr");      
      res = -1;
      goto LForexTRVcRecordCheck;
    end;
  end;

  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromForexTR(gTRp,FTRr,false);
    if (errcode>0) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1;
      goto LForexTRVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==ForexTRYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        RecordCheckError(1085,tstr,-1,"SerNr");      
        res = -1;
        goto LForexTRVcRecordCheck;
      end;
      SaveTrans(gTRp);
    end;
  end;
LForexTRVcRecordCheck:;
  ForexTRVcRecordCheck = res;
  return;
end;
