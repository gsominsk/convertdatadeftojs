external function Integer LAApprovalStatus(record LeaveApplicationVc,var record AcceptanceRulesVc);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert(Integer,Integer,string,string,string,val,string,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external function Boolean AcceptanceRulesExists(Integer,string);
external updating procedure LeaveApplicationOKActivities(record LeaveApplicationVc);
external procedure CalcluateLeaveApplicationFwdBalDays(var record LeaveApplicationVc);
external function Boolean SerNrTestLeaveApplicationVc(LongInt,Date,var Boolean);
external function Boolean Date2Test(string,Date,string,Integer);
external function Integer IsUnOKAllowed_LeaveApplicationVc(record LeaveApplicationVc);

global
function LongInt LeaveApplicationVcRecordDefaults(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  LAr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    LAr.SerNr = NextSerNr("LeaveApplicationVc",LAr.TransDate,-1,false,"");
  end;
  LeaveApplicationVcRecordDefaults = res;
  return;
end;

global
function LongInt LeaveApplicationVcRecordDuplicate(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  LAr.OKFlag = 0;
  LAr.Invalid = 0;
  if (SingleUserMode) then begin
    LAr.SerNr = NextSerNr("LeaveApplicationVc",LAr.TransDate,-1,false,"");
  end;
  LAr.AcceptanceBy = "";
  LAr.AcceptanceFYI = "";
  LeaveApplicationVcRecordDuplicate = res;
  return;
end;

global
function LongInt LeaveApplicationVcRecordCheck(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt stat,LongInt long4)
begin
  LongInt res,error;
  LongInt oldnr;
  record CUVc CUr;
  record ActTypeVc ActTyper;
  Boolean transf,unokf,gentrans;

  res = 0;
  oldnr = LAr.SerNr;  
  transf = false;
  if (LAr.OKFlag!=0) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (LA2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (LAr.SerNr<=0) then begin
    LAr.SerNr = NextSerNr("LeaveApplicationVc",LAr.TransDate,-1,false,"");
  end;
  if (LAr.OKFlag==0) then begin
    if (stat==Rs_update) then begin
      if (LA2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    error = IsUnOKAllowed_LeaveApplicationVc(LAr);
    if (error!=0) then begin
      RecordCheckError(error,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LLeaveApplicationVcRecordCheck;
  end;
  if (SerNrTestLeaveApplicationVc(LAr.SerNr,LAr.TransDate,gentrans)==false) then begin
    RecordCheckError(1034,"",-1,"SerNr");      
    res = -1; 
    goto LLeaveApplicationVcRecordCheck;
  end;
  if (Date2Test("LeaveApplicationVc",LAr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LLeaveApplicationVcRecordCheck;
  end;

  if (blank(LAr.Employee)) then begin
    RecordCheckError(1120,"",-1,"Employee");    
    res = -1;
    goto LLeaveApplicationVcRecordCheck;
  end;  
  if (blank(LAr.LeaveActType)) then begin
    RecordCheckError(1120,"",-1,"LeaveActType");    
    res = -1;
    goto LLeaveApplicationVcRecordCheck;
  end;  
  if (LAr.StartDate>LAr.EndDate) then begin
    RecordCheckError(22118,"",-1,"EndDate");    
    res = -1;
    goto LLeaveApplicationVcRecordCheck;
  end;
  ActTyper.Code = LAr.LeaveActType;
  if (ReadFirstMain(ActTyper,1,true)==false) then begin
    RecordCheckError(1290,"",-1,"LeaveActType");      
    res = -1; 
    goto LLeaveApplicationVcRecordCheck;
  end;
  
  CUr.Code = LAr.Employee;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,LAr.Employee,-1,"Employee");      
    res = -1;
    goto LLeaveApplicationVcRecordCheck;
  end;
  if (CUr.EmployeeType==0) then begin
    RecordCheckError(1120,LAr.Employee,-1,"Employee");      
    res = -1; 
    goto LLeaveApplicationVcRecordCheck;
  end;
  if (CUr.blockedFlag!=0) then begin
    RecordCheckError(1265,LAr.Employee,-1,"Employee");      
    res = -1;
    goto LLeaveApplicationVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("LeaveApplicationOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"LeaveApplicationOK"),-1,"SerNr");      
      res = -1;
      goto LLeaveApplicationVcRecordCheck;
    end;
  end;  
LLeaveApplicationVcRecordCheck:;
  if (res!=0) then begin LAr.SerNr = oldnr; end;
  LeaveApplicationVcRecordCheck = res;
  return;
end;

global
function LongInt LeaveApplicationVcRecordSave(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  CalcluateLeaveApplicationFwdBalDays(LAr);
  LeaveApplicationVcRecordSave = res;
  return;
end;

global
function LongInt LeaveApplicationVcRecordUpdate(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if ((LA2r.Invalid==0) and (LAr.Invalid==0)) then begin
    CalcluateLeaveApplicationFwdBalDays(LAr);
  end;
  if ((LA2r.Invalid==0) and (LAr.Invalid!=0)) then begin
    //?
  end;  
  LeaveApplicationVcRecordUpdate = res;
  return;
end;

updating procedure InvalidateLeaveApplication(record LeaveApplicationVc LAr)
begin
  Boolean found,testf;
  record ActVc Actr;
  record ActVc oldActr;
  
  found = true;
  Actr.FromFileName = "LeaveApplicationVc";
  Actr.FromSerNr = LAr.SerNr;
  while (LoopKey("FromFileName",Actr,2,found)) begin
    if (Actr.FromFileName!="LeaveApplicationVc") then begin found = false; end;
    if (StringToLongInt(Actr.FromSerNr)!=LAr.SerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (testf) then begin
        RecordCopy(oldActr,Actr);
        Actr.Invalid = 1;
        RecordUpdate(oldActr,Actr,true);
      end;
    end;
  end;
  return;
end;

global
updating function LongInt LeaveApplicationVcRecordUpdateAfter(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;

  if (LAr.OKFlag!=0) and (LA2r.OKFlag==0) then begin
    LeaveApplicationOKActivities(LAr);
  end;
  if ((LA2r.Invalid==0) and (LAr.Invalid!=0)) then begin
    InvalidateLeaveApplication(LAr);
  end;
  LeaveApplicationVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt LeaveApplicationVcRecordRemoveTest(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt errm,LongInt long4)
begin
  LongInt res;
  Integer approvalstatus;
  record AcceptanceRulesVc Acptr;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  
  res = 1;
  if (LAr.OKFlag!=0) then begin res = 0; end;
  approvalstatus = LAApprovalStatus(LAr,Acptr);  
  if (approvalstatus==kAcceptanceStatePending) then begin res = 0; end;
  if (approvalstatus==kAcceptanceStateApproved) then begin res = 0; end;
  if (approvalstatus==kAcceptanceStateRejected) then begin res = 0; end;
  actnr = 1;
  while (ReadRecordLink(LAr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (errm>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LLeaveApplicationVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;
  if (res!=1) then begin
    if (errm>0) then begin MessageBox(1544,""); end;
  end;
LLeaveApplicationVcRecordRemoveTest:;  
  LeaveApplicationVcRecordRemoveTest = res;
  return;
end;

global
updating function LongInt LeaveApplicationVcRecordInvalidateTest(var record LeaveApplicationVc LAr,record LeaveApplicationVc LA2r,LongInt errm,LongInt long4)
begin
  LongInt res;
  
  res = 1;
  LAr.Invalid = 1;
LLeaveApplicationVcRecordInvalidateTest:;  
  LeaveApplicationVcRecordInvalidateTest = res;
  return;
end;
