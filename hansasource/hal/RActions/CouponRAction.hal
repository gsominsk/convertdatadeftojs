external function Boolean SerNrTestCouponVc(LongInt,Date,var Boolean);
external Procedure GetPayType(String,Var Integer);
external procedure GetBaseCurncy(Integer,var string);
external function Integer GetIntYc(Date);

procedure GetCredCardType(string CreditCard,var integer direct)
begin
  record CreditCardVc CCr;
  record CredCardTypeVc CCTr;

  direct = -1;
  CCr.CreditCardNr = CreditCard;
  if readfirstmain(CCr,1,true) then begin
    CCTr.Code = CCr.CredCardType;
    if readfirstmain(CCTr,1,true) then begin
      direct = CCTr.Direct;
    end;  
  end;
  return;
end;

procedure GenerateCouponBounceTrans(record CouponVc Couponr)
begin
/*
  Record TRVc As;
  Row TRVc Asrw;          
  Record CouponVc Couponr;
  Row ChqdepVc TBrw;
  Boolean Res;
  String 60 tstr,cur,obj,cta;
  LongInt Num;
  Integer LineNr,intdummy;
  Integer rows,j,curcomp,rndtotal;
  val Cheques,dsum,csum,nilv,ValMonBase,TotalAs;

  // Setup Record
  LineNr  = 0;  TotalAs = 0;
  RecordNew(As);

  GetCurncyRoundoff(TBr.CurncyCode,"XX",rndtotal); // Fix when finishing the code
  // first line cash
  GetPMObjCta(TBr.PayModeCash,obj,cta,intdummy);
  if (TBr.Cash<>0) then begin 
    GetAccountName(cta,tstr);
    ValMonBase = MulRateToBase1(TBr.CurncyCode,TBr.Cash,TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.BaseRate1,TBr.BaseRate2,rndtotal);  
    AddEuroCurncyTrRow(As,cta,obj,"",tstr,ValMonBase,false,false,TotalAs,TBr.CurncyCode,TBr.FrRate,TBr.ToRate1,TBr.ToRate2, TBr.BaseRate1,TBr.BaseRate2,TBr.Cash,nilv,false,"");
    LineNr = LineNr +1;
  end;

  rows = MatRowCnt(TBr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(TBr,j,TBrw);
    Chq.SerNr = TBrw.ChqNr;
    if ReadfirstMain(Chq,1,true) then begin
      obj = Chq.TempObjects;
    end;
    GetAccountName(TBr.TempAccNr,tstr);
    ValMonBase = MulRateToBase1(TBr.CurncyCode,TBrw.Amount,TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.BaseRate1,TBr.BaseRate2,rndtotal);  
    AddEuroCurncyTrRow(As,TBr.TempAccNr,obj,"",tstr,ValMonBase,false,false,TotalAs,TBr.CurncyCode,TBr.FrRate,TBr.ToRate1,TBr.ToRate2, TBr.BaseRate1,TBr.BaseRate2,TBrw.Amount,nilv,false,"");
    LineNr = LineNr +1;
  end;

  GetPMObjCta(TBr.PayMode,obj,cta,intdummy);
  GetAccountName(TBr.DepAccNr,tstr);

  ValMonBase = MulRateToBase1(TBr.Sum,(TBrw.Amount+TBr.Cash),TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.BaseRate1,TBr.BaseRate2,rndtotal);  
  AddEuroCurncyTrRow(As,TBr.DepAccNr,obj,"",tstr,ValMonBase,false,true,TotalAs,TBr.CurncyCode,TBr.FrRate,TBr.ToRate1,TBr.ToRate2, TBr.BaseRate1,TBr.BaseRate2,TBr.Sum,nilv,false,"");

  //addTRLine(Asrw,TBr.MoneyCode,TBr.Sum,TBr.DepAccNr,true,obj,"",TBr.FrRate,TBr.ToRate1,TBr.ToRate2,TBr.TransDate);
  LineNr = LineNr +1;  
  curcomp = CurrentCompany;
  As.TransDate = TBr.TransDate;
  As.IntYc     = GetIntYc(As.TransDate);    
  As.Comment   = "Deposito Grupo de Cheques ";
  TRSumup(As,nilv);
  Num =  NextSerNr("TRVc",As.TransDate ,-1,false,"");  
  if (Recordinsert(As,true)) then begin end;
  */  
  return;
end;

updating
procedure SetupCupon1(String CCard,String CustCode,String Authorization,LongInt DocNr,Val Amount,Integer Installment,
                      Date DueDate,Date TransDate,Integer NrInsts,string CurncyCode,Integer OriginType)
begin
  record CouponVc Coup,Coup2;
  record CUVc CUr;
  Integer Couponnr,Batchnr;
  LongInt nr;
  record CreditCardVc CCr;
  record CredCardTypeVc CCTr;
  
  RecordNew(Coup);
  CCr.CreditCardNr = CCard;
  if readfirstmain(CCr,1,true) then begin
    CCTr.Code = CCr.CredCardType;
    if readfirstmain(CCTr,1,true) then begin
      Coup.Direct     = CCTr.Direct;
      Coup.CardType   = CCr.CredCardType;
    end;
  end;
 
  CUr.Code = CustCode;
  if readfirstmain(CUr,1,true) then begin
    Coup.InstrNr      = Installment;
    Coup.Inst         = NrInsts;
    Coup.TransDate    = TransDate;
    Coup.AuthorizationCode    = Authorization;
    Coup.CUCode        = CustCode;
    Coup.CUName        = CUr.Name;
    Coup.CreditCardNr  = CCard;
    Coup.IVNr          = DocNr;
    Coup.FileName      = "IVVc";
    Coup.Amount        = Amount;
          
    if (Coup.Direct==2) then begin // Tarjeta de Debito
        Coup.Status        = 4;
        Coup.DepDate       = DueDate;
        Coup.AuthDate      = DueDate;
        Coup.CashDate      = DueDate;
    end else begin
      if Blank(Authorization) then begin
        Coup.Status        = 1;
      end else begin
        Coup.Status        = 2;
        Coup.AuthDate      = TransDate; // MEM
      end;
      Coup.DepDate = DueDate;
    end;
    //LO Fijate en OriginType Coup.Comment       = "Factura"; // MEM
    Coup.OriginType = OriginType;    // 0=IVVc, 1==Recibo 2 == IVCash 3 == IVCash2 4 == RestAccVc
    Coup.CurncyCode = CurncyCode;
    Coup.SerNr         = -1;           // leave it to the recordaction
    if Recordinsert(Coup,false) then begin  end;
  end;
  return;
end;

global
updating
procedure GeneratePossibleCoupons(record IVVc Inv1)
begin
  Integer i,instmnts,direct;
  Val Monto;
  Date vDate;
  
  if (Inv1.InvType!=kInvoiceTypeCash and Inv1.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
    goto LGeneratePossibleCoupons;
  end;
  if blank(Inv1.CreditCard) then begin
    goto LGeneratePossibleCoupons;
  end;
   
  GetCredCardType(Inv1.CreditCard,direct);  
  if (Inv1.LastRemndr==-1) then begin
    instmnts = 1;
  end else begin
    instmnts = Inv1.LastRemndr;
  end;
  
  if (direct<>-1) then begin
    vDate = CurrentDate;
    if ((instmnts==-1) or (direct==2))then begin
      SetupCupon1(Inv1.CreditCard,Inv1.CustCode,Inv1.AuthorizationCode,Inv1.SerNr,Inv1.Sum4,0,vDate,Inv1.TransDate,instmnts,Inv1.CurncyCode,0);
    end else begin
      if (direct==0) then begin
        SetupCupon1(Inv1.CreditCard,Inv1.CustCode,Inv1.AuthorizationCode,Inv1.SerNr,Inv1.Sum4,0,vDate,Inv1.TransDate,instmnts,Inv1.CurncyCode,0);
      end else begin
        for (i=1;i<=instmnts;i=i+1) begin
          Monto     = Inv1.Sum4/instmnts;
          SetupCupon1(Inv1.CreditCard,Inv1.CustCode,Inv1.AuthorizationCode,Inv1.SerNr,Monto,i,vDate,Inv1.TransDate,instmnts,Inv1.CurncyCode,0);
          vDate = AddMonth(vDate,1);   // Always in months
        end;
      end;
    end;
  end;
    
LGeneratePossibleCoupons:;
  return;
end;

global
updating
procedure IVCashGeneratePossibleCoupons(record IVCashVc Inv1)
begin
  Integer i,instmnts,direct;
  Val Monto;
  Date vDate;
  
  if nonblank(Inv1.CreditCard) then begin
    GetCredCardType(Inv1.CreditCard,direct);
    instmnts = 1;    //LO: Amount of cuotas is a no resolved issue: always taken directly
    if (direct<>-1) then begin
      vDate = CurrentDate;
      if ((instmnts==-1) or (direct==2))then begin
        SetupCupon1(Inv1.CreditCard,Inv1.CustCode,Inv1.AuthorizationCode,Inv1.SerNr,Inv1.RecValue,-1,vDate,Inv1.TransDate,instmnts,Inv1.POSCurncyCode,2);
      end else begin
        if (direct==0) then begin
          SetupCupon1(Inv1.CreditCard,Inv1.CustCode,Inv1.AuthorizationCode,Inv1.SerNr,Inv1.RecValue,-1,vDate,Inv1.TransDate,instmnts,Inv1.POSCurncyCode,2);
        end else begin
          for (i=1;i<=instmnts;i=i+1) begin
            Monto     = Inv1.RecValue/instmnts;
            SetupCupon1(Inv1.CreditCard,Inv1.CustCode,Inv1.AuthorizationCode,Inv1.SerNr,Monto,i,vDate,Inv1.TransDate,instmnts,Inv1.POSCurncyCode,2);
            vDate = AddMonth(vDate,1);   // Always in months
          end;
        end;
      end;
    end;
  end;
  if nonblank(Inv1.CreditCard2) then begin
    GetCredCardType(Inv1.CreditCard2,direct);
    instmnts = 1;    //LO: Amount of cuotas is a no resolved issue: always taken directly
    if (direct<>-1) then begin
      vDate = CurrentDate;
      if ((instmnts==-1) or (direct==2))then begin
        SetupCupon1(Inv1.CreditCard2,Inv1.CustCode,Inv1.AuthorizationCode2,Inv1.SerNr,Inv1.RecValue2,-1,vDate,Inv1.TransDate,instmnts,Inv1.POSCurncyCode,3);
      end else begin
        if (direct==0) then begin
          SetupCupon1(Inv1.CreditCard2,Inv1.CustCode,Inv1.AuthorizationCode2,Inv1.SerNr,Inv1.RecValue2,-1,vDate,Inv1.TransDate,instmnts,Inv1.POSCurncyCode,3);
        end else begin
          for (i=1;i<=instmnts;i=i+1) begin
            Monto     = Inv1.RecValue2/instmnts;
            SetupCupon1(Inv1.CreditCard2,Inv1.CustCode,Inv1.AuthorizationCode2,Inv1.SerNr,Monto,i,vDate,Inv1.TransDate,instmnts,Inv1.POSCurncyCode,3);
            vDate = AddMonth(vDate,1);   // Always in months
          end;
        end;
      end;
    end;
  end;
  return;
end;


global
updating
procedure RestAccGeneratePossibleCoupons(record RestAccVc RestAccr)
begin
  record CheckAccBlock CAr;
  Integer i,instmnts,direct;
  Val Monto;
  Date vDate;
  string 10 B1;

  BlockLoad(CAr);
  if (CAr.GenCoupons!=0) then begin
  GetBaseCurncy(1,B1);   // There is no currency all in base currency
  if nonblank(RestAccr.CreditCard) then begin
    GetCredCardType(RestAccr.CreditCard,direct);
    instmnts = 1;    //LO: Amount of cuotas is a no resolved issue: always taken directly
    if (direct<>-1) then begin
      vDate = CurrentDate;
      if ((instmnts==-1) or (direct==2))then begin
        SetupCupon1(RestAccr.CreditCard,RestAccr.CUCode,RestAccr.AuthorizationCode,RestAccr.SerNr,RestAccr.Paid,-1,vDate,RestAccr.TransDate,instmnts,B1,5);
      end else begin
        if (direct==0) then begin
          SetupCupon1(RestAccr.CreditCard,RestAccr.CUCode,RestAccr.AuthorizationCode,RestAccr.SerNr,RestAccr.Paid,-1,vDate,RestAccr.TransDate,instmnts,B1,5);
        end else begin
          for (i=1;i<=instmnts;i=i+1) begin
            Monto     = RestAccr.Paid/instmnts;
            SetupCupon1(RestAccr.CreditCard,RestAccr.CUCode,RestAccr.AuthorizationCode,RestAccr.SerNr,Monto,i,vDate,RestAccr.TransDate,instmnts,B1,5);
            vDate = AddMonth(vDate,1);   // Always in months
          end;
        end;
      end;
    end;
  end;
  end;
  return;
end;

global
function LongInt CouponVcRecordDefaults(var record CouponVc Couponr,record CouponVc r2,LongInt long3,LongInt long4)
begin
  Couponr.MachineName = CurMachineName;
  Couponr.SerNr = -1;
  Couponr.Status = 0;
  Couponr.Amount = 0;
  Couponr.Direct = 0;
  Couponr.IVNr = -1;
  Couponr.FileName = "";
  Couponr.Inst = 1;
  Couponr.ConsNr = -1;
  Couponr.BatchNr = 0;
  Couponr.Batch = "";
  Couponr.TransDate = CurrentDate;
  Couponr.DepDate = CurrentDate;
  if (SingleUserMode) then begin
    Couponr.SerNr = NextSerNr("CouponVc",Couponr.TransDate,-1,true,"");
  end;
  return;
end;

global
function LongInt CouponVcRecordDuplicate(var record CouponVc Couponr,record CouponVc r2,LongInt long3,LongInt long4)
begin
  Couponr.SerNr = -1;
  Couponr.Status = 0;
  Couponr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    Couponr.SerNr = NextSerNr("CouponVc",Couponr.TransDate,-1,true,"");
  end;
  return;
end;

global
function LongInt CouponVcRecordCheck(record CouponVc Coupr,record CouponVc Coup2r,LongInt long3,LongInt long4)
begin
  boolean conds;
  LongInt res;
  Record CoupLoteVc CoupLoter;
  Record CouponVc Couponr;
  Record CreditCardVc CreditCardr;
  String 50 tstr;
  Boolean gentrans;

  res = 1;
  
  if Blank(Coupr.MachineName) then begin
    Coupr.MachineName = CurMachineName;
  end;  
  if (Couponr.SerNr==-1) then begin
    Couponr.SerNr = NextSerNr("CouponVc",Couponr.TransDate,-1,false,"");
  end;
  if (SerNrTestCouponVc(Couponr.SerNr,Couponr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LCouponVcRecordCheck;
  end;
  if blank(Coupr.AuthorizationCode) then begin
    if (Coupr.Status==2) then begin
      RecordCheckError(1058,Coupr.AuthorizationCode,-1,"AuthorizationCode");
      goto LCouponVcRecordCheck;
    end;  
  end;
/*  
slips do not need to have credit card number and in some coutirs not allowed to store cred crard numbers
  if blank(Coupr.CreditCardNr) then begin 
    RecordCheckError(1058,Coupr.CreditCardNr,-1,"CreditCardNr");
    goto LCouponVcRecordCheck;
  end else begin
    CreditCardr.CreditCardNr = Coupr.CreditCardNr;
    if not readfirstmain(CreditCardr,1,true) then begin
      RecordCheckError(1290,Coupr.CreditCardNr,-1,"CreditCardNr");
    end;
  end;
*/  
  if blank(Coupr.CardType) then begin 
    RecordCheckError(1058,Coupr.CardType,-1,"CardType");
    goto LCouponVcRecordCheck;
  end;
  if (Coupr.Amount==0) then begin
    RecordCheckError(1058,Coupr.Amount,-1,"Amount");
    goto LCouponVcRecordCheck;
  end;
  if (Coupr.OriginType==1) and (Coupr.Inst==0) then begin
    RecordCheckError(1058,Coupr.Inst,-1,"Inst");
    goto LCouponVcRecordCheck;
  end;
  if (Coupr.CreditCardNr<>Coup2r.CreditCardNr) then begin
    if (Coupr.CUCode<>Coup2r.CUCode) then begin
      MessageBox(0,USetStr(2270));
      Coupr.CUCode = Coup2r.CUCode;
      Coupr.CUName = Coup2r.CUName;
    end;
  end;  
  res = 0;
  
LCouponVcRecordCheck:;  
  CouponVcRecordCheck = res;
  return;
end;

global
function LongInt CouponVcRecordSave(var record CouponVc Couponr,record CouponVc r2,LongInt long3,LongInt long4)
begin
  Integer Couponnr;
  LongInt IVNr,nr,res;
  record CouponVc Coup;
  Record CoupLoteVc CoupLoter;
  Boolean TrHs;

  if (Couponr.SerNr==-1) then begin
    Couponr.SerNr = NextSerNr("CouponVc",Couponr.TransDate,-1,false,"");
  end;

  // Batches restart numbering per POS per Cardtype
  Coup.MachineName = Couponr.MachineName;  // both cant be blank
  Coup.CardType = Couponr.CardType;
  if readlastkey("MachineName",Coup,2,true) then begin
    if (blank(Couponr.CouponNr)) then begin
      nr = StringToInt(Coup.CouponNr);
      if blank(Couponr.CouponNr) then begin
        Couponr.CouponNr = nr + 1;
      end;
    end;
    if (Couponr.IVNr==-1) then begin
      Couponr.IVNr = Coup.IVNr + 1;
    end;
    
    TrHs = true;
    CoupLoter.MachineName = Coup.MachineName;
    CoupLoter.CardType = Coup.CardType;
    while(LoopBackKey("MachineName",CoupLoter,2,TrHs)) begin
      if (CoupLoter.MachineName!=Coup.MachineName) then begin TrHs = false; end;
      if (CoupLoter.CardType!=Coup.CardType) then begin TrHs = false; end;
      if (TrHs) then begin
        if (CoupLoter.Closed==0) then begin
          Couponr.BatchNr = CoupLoter.BatchNr;
          if (blank(Couponr.CouponNr)) then begin
            Couponr.CouponNr = 1;
          end;
          TrHs = false;
        end;
      end;
    end;
    if (blank(Couponr.CouponNr)) then begin
      Coup.CardType = Couponr.CardType;  
      Coup.MachineName = Couponr.MachineName;
      Coup.BatchNr = Couponr.BatchNr;
      if readlastkey("MachineName",Coup,3,true) then begin
        Couponr.CouponNr = StringToInt(Coup.CouponNr)+1;
      end;
    end;
    if (Couponr.BatchNr==0) then begin
      Couponr.Inst = 0;
    end;
  end else begin
    if blank(Couponr.CouponNr) then begin
      Couponr.CouponNr = 1;
    end;
    if (Couponr.BatchNr==0) then begin //lgd
      TrHs= true;
      CoupLoter.MachineName = Coup.MachineName;
      CoupLoter.CardType = Coup.CardType;
      while(LoopKey("MachineName",CoupLoter,2,TrHs)) begin
        if (CoupLoter.CardType==Coup.CardType) and (CoupLoter.Closed==0) then begin
          Couponr.BatchNr = CoupLoter.BatchNr;
          if (blank(Couponr.CouponNr)) then begin
            Couponr.CouponNr = 1;
          end;
          TrHs= false;
        end;
      end;
      if (Couponr.BatchNr==0) then begin
//        MessageBox(0,USetStr(2271));
        Couponr.Inst = 0;
      end;
    end;
  end;  
  CouponVcRecordSave= res;
  return;
end;

global
function LongInt CouponVcRecordUpdate(var record CouponVc r1,record CouponVc r2,LongInt long3,LongInt long4)
begin
  if (r1.SerNr==-1) then begin
    r1.SerNr = NextSerNr("CouponVc",r1.TransDate,-1,false,"");
  end;
  if ((r1.Status==2) and (r2.Status<>2)) then begin
    r1.AuthDate = CurrentDate;
  end;
  CouponVcRecordUpdate = -1;
  return;
end;

global
function LongInt CouponVcRecordUpdateAfter(var record CouponVc r1,record CouponVc r2,LongInt long3,LongInt long4)
begin
  if ((r1.Status==5) and (r2.Status==1)) then begin
//    GenerateCouponBounceTrans(r1);
  end;
  CouponVcRecordUpdateAfter = -1;
  return;
end;

global
function LongInt CouponVcRecordRemoveTest(var record CouponVc r1,record CouponVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = -1;
  if (r1.Status<>0) then begin
    res = 0; 
  end;
  CouponVcRecordRemoveTest = res;  
  return;
end;

global
updating
procedure ChangeCouponStateSL(var record IPVc IPr)
Begin
  Record CouponVc Couponr; 
  Row IPVc IPrw;
  Integer j,rows,PayType;
  String 30 PMode;
  Record AccBlock AccBlockr;

  Blockload(AccBlockr);
  rows = MatRowCnt(IPr);
  for (j=0;j<rows;j=j+1) begin
    MatrowGet(IPr,j,IPrw);
    if (IPrw.ChequeNr<>-1) then begin
      PMode = IPrw.PayMode;
      if (PMode=="") then begin
        PMode = IPr.PayMode;
      end;
      GetPayType(PMode,PayType);
      if (PayType==3) then begin
        Couponr.SerNr = IPrw.ChequeNr;
        if ReadFirstMain(Couponr,1,true) then begin
          if (Couponr.Status==0) then begin
            if blank(Couponr.AuthorizationCode) then begin
              Couponr.Status = 1;
            end else begin
              Couponr.AuthDate = IPr.TransDate;
              Couponr.Status = 2;
            end;  
            Couponr.CUCode  = IPrw.CustCode;
            Couponr.CUName  = IPrw.CustName;
            Couponr.IVNr    = IPr.SerNr;
            Couponr.FileName = "IPVc";
            Couponr.Comment = "Receipt"; // MEM
            Couponr.CurncyCode = IPrw.RecCurncy;
            Couponr.OriginType = 1;
            if RecordStore(Couponr,true) then begin end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
function LongInt CouponVcRecordInIndex(record CouponVc Couponr,string indexname)
begin
  longint res;
  
  res = 1;
  switch (indexname) begin
    case "OpenSerNr": if (Couponr.Status!=0) then begin res = 0; end;
    case "OpenCouponNr": if (Couponr.Status!=0) then begin res = 0; end;
    case "OpenConsNr": if (Couponr.Status!=0) then begin res = 0; end;
    case "OpenTransDate": if (Couponr.Status!=0) then begin res = 0; end;
  end;
  CouponVcRecordInIndex = res;
  return;
end;

global
function LongInt CouponVcRecordImport(var record CouponVc Couponr,record CouponVc Coupon2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (blank(Couponr.FileName)) then begin
    switch(Couponr.OriginType) begin
      case 0: Couponr.FileName = "IVVc";
      case 2: Couponr.FileName = "IVCashVc";
      case 4: Couponr.FileName = "RestAccVc";
    end;
  end;
  CouponVcRecordImport = res;
  return;
end;
