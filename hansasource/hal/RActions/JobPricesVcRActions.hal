external function Boolean IsEnterprise();
external function roundmode SetRoundModeD(Integer);
external procedure ExtractObj(string,var Integer,var string);
external procedure JobPriceSumup(var record JobPriceVc);
external function string 20 FindJobCustomerCode(record JobVc);
external procedure JobSumup(var record JobVc);
external function val NumberOfStayDays(Date,Date,Time,Time,Integer);
external function LongInt FillFullJobPriceArray(Date,LongInt,val,var array string,var array string,var array string,var array LongInt,var array LongInt,LongInt,String,String,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external procedure GetJobClassifications(record JobVc,var string);

global
procedure SetPriceCalcStr(row JobPriceVc JPrw)
begin
  string 255 res;
  val calcprice,calcrebate;
  
  if (JPrw.AgreedPrice<>0) then begin
    calcprice = JPrw.AgreedPrice;
  end else begin
    calcprice = JPrw.Price;
  end;
  if (JPrw.AgreedRebate<>0) then begin
    calcrebate = JPrw.AgreedRebate;
  end else begin
    calcrebate = JPrw.vRebate;
  end;
  JPrw.PriceCalc = "(" & calcprice & " x " & JPrw.Qty & ")";
  if (calcrebate<>0) then begin
    JPrw.PriceCalc = JPrw.PriceCalc & " - " & calcrebate & "%";
  end;
  return;
end;

procedure SetChangedSignature(var record JobPriceVc JPr,record JobPriceVc oldJPr)
begin
  Integer i,rwcnt;
  row JobPriceVc JPrw;
  row JobPriceVc JP2rw;
  
  rwcnt = MatRowCnt(JPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(JPr,i,JPrw);
    MatRowGet(oldJPr,i,JP2rw);
    if ((JPrw.AgreedPrice!=JP2rw.AgreedPrice) or (JPrw.vRebate!=JP2rw.vRebate)) then begin
      JPrw.Person = CurrentUser;
      MatRowPut(JPr,i,JPrw);
    end;
  end;
  return;
end;

procedure ResetJP(var record JobPriceVc JPr,Date sd,Date ed,Time st,Time et,string type,string resusage,LongInt NoOfGuests,string pricelist,string Comment,
                  string curncy,val fr,val tob1,val tob2,val br1,val br2)
begin
  LongInt a;
  Integer b,c;

  a = JPr.SerNr;
  b = JPr.RecType;
  c = JPr.RowNr;
  RecordNew(JPr);
  JPr.SerNr = a;
  JPr.RecType = b;
  JPr.RowNr = c;
  JPr.TransDate = sd;
  JPr.EndDate = ed;
  JPr.StartTime = st;
  JPr.EndTime = et;
  JPr.NoOfGuests = NoOfGuests;
  JPr.Type = type;
  JPr.ResUsage = resusage;
  JPr.PriceList = pricelist;
  JPr.CurncyCode = curncy;
  JPr.FrRate = fr;
  JPr.ToRateB1 = tob1;
  JPr.ToRateB2 = tob2;
  JPr.BaseRate1 = br1;
  JPr.BaseRate2 = br2;
  return;
end;

procedure CalculateCClassPrice(string cclassdcode,string cclass,var val price)
begin
  record CClassDVc CClassDr;
  row CClassDVc CClassDrw;
  Integer i,rwcnt;
  val res;
  val Discperc;
  string 255 tstr;
  
  CClassDr.Code = cclassdcode;
  if (ReadFirstMain(CClassDr,1,true)) then begin
    rwcnt = MatRowCnt(CClassDr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CClassDr,i,CClassDrw);

      if (CClassDrw.CClass==cclass) then begin
        switch (CClassDrw.Type) begin
          case 0:      
            if (nonblank(CClassDrw.Percentage)) then begin
              if (Mid(CClassDrw.Percentage,len(CClassDrw.Percentage)-1,1)=="%") then begin
                tstr = Left(CClassDrw.Percentage,len(CClassDrw.Percentage)-1);
                Discperc = StringToVal(tstr,M4Qty);
                price = price * ((100.00 - Discperc)/100.00);
              end else begin
                Discperc = StringToVal(CClassDrw.Percentage,M4Qty);
                price = price - Discperc;
              end;
            end;
          case 1:
            if (nonblank(CClassDrw.Percentage)) then begin
              if (Mid(CClassDrw.Percentage,len(CClassDrw.Percentage)-1,1)=="%") then begin
                tstr = Left(CClassDrw.Percentage,len(CClassDrw.Percentage)-1);
                Discperc = StringToVal(tstr,M4Qty);
                price = price * ((100.00 + Discperc)/100.00);
              end else begin
                Discperc = StringToVal(CClassDrw.Percentage,M4Qty);
                price = price + Discperc;
              end;
            end;
        end;
      end;
    end;
  end;
  return;
end;

procedure AddToJobPrice(row JobPriceVc JPrw,Date dt,string artcode,string vatcode,string pricelist,
                        val Discperc,val price,val rackrateprice,val qty,string PriceRules,string calcstr)
begin
  JPrw.StayDay = dt;
  JPrw.ArtCode = artcode;
  JPrw.VATCode = vatcode;
  JPrw.PriceList = pricelist;
  JPrw.vRebate = Discperc;
  JPrw.Price = price;
  JPrw.RackRatePrice = rackrateprice;
  JPrw.Qty = qty;
  JPrw.PriceRules = PriceRules;
  JPrw.PriceCalc = JPrw.PriceCalc & calcstr;
  return;
end;

procedure FindJobPriceRow(date dt,string invitem,string cclass,string pricelist,record JobPriceVc JPr,row JobPriceVc JPrw,var integer y)
begin
  integer i,cnt;
  
  y = -1;
  cnt = MatRowCnt(JPr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(JPr,i,JPrw);
    if (JPrw.StayDay==dt and JPrw.ArtCode==invitem and JPrw.CClass==cclass and JPrw.PriceList==pricelist) then begin
      y = i;
      i = cnt;
    end;
  end;
  if (y==-1) then begin
    ClearRow(JPr,JPrw,1);
    JPrw.StayDay = dt;
    JPrw.ArtCode = invitem;
    JPrw.CClass = cclass;
    JPrw.Qty = 0;
    JPrw.PriceList = pricelist;
    y = cnt;
  end;
  return;
end;

procedure AddJobPriceRowFromPriceRules(record PriceRulesVc PriceRulesr,Integer curJProw,record CUVc CUr,string pricelist,
                                       Date transdate,string invitem,string artcode,val argqty,var record JobPriceVc JPr,
                                       boolean firstrulef, string calcstr)
begin
  record INVc INr;
  string 255 curitemname,tax2code;
  string 255 salesacc,vatcode,tstr,taxtemplatecode;
  Boolean calcprice,dummyf;
  val price,vreb,baseprice,tax2prc,rackrateprice;
  Integer jprwcnt;
  row JobPriceVc JPrw;
  record HotelBlock Hotelb;
  Time blankt;

  BlockLoad(Hotelb);
  if (argqty<=0) then begin
    goto LAddJobPriceRowFromPriceRules;
  end;
  //Calculate rack rate price
  GetItemPriceDiscount3(artcode,0,INr,JPr.CurncyCode,JPr.FrRate,JPr.ToRateB1,JPr.ToRateB2,JPr.BaseRate1,JPr.BaseRate2,
    CUr.LangCode,CUr.CustCat,Hotelb.RackRatePLCode,CUr.RebCode,
    rackrateprice,curitemname,vreb,vatcode,baseprice,salesacc,            
    CUr.ExportFlag,calcprice,transdate,blankt,"",true,dummyf,"",tax2code,
    tax2prc,"","",taxtemplatecode);
  //Calculate normal price
  GetItemPriceDiscount3(artcode,0,INr,JPr.CurncyCode,JPr.FrRate,JPr.ToRateB1,JPr.ToRateB2,JPr.BaseRate1,JPr.BaseRate2,
    CUr.LangCode,CUr.CustCat,pricelist,CUr.RebCode,
    price,curitemname,vreb,vatcode,baseprice,salesacc,            
    CUr.ExportFlag,calcprice,transdate,blankt,"",true,dummyf,"",tax2code,
    tax2prc,"","",taxtemplatecode);
  tstr = "(" & price & " " & calcstr & " x " & argqty & ")";
  if (firstrulef==false) then begin
    tstr = " + " & tstr;
  end;
  jprwcnt = MatRowCnt(JPr);
  if (curJProw<jprwcnt) then begin
    MatRowGet(JPr,curJProw,JPrw);
    price = (argqty*price) + (JPrw.Qty*JPrw.Price);
    rackrateprice = (argqty*rackrateprice) + (JPrw.Qty*JPrw.RackRatePrice);
  end else begin
    ClearRow(JPr,JPrw,1);
    price = (argqty*price);
    rackrateprice = (argqty*rackrateprice);
  end;
  AddToJobPrice(JPrw,transdate,invitem,vatcode,pricelist,vreb,price,rackrateprice,1,PriceRulesr.Code,tstr);
  MatRowPut(JPr,curJProw,JPrw);
LAddJobPriceRowFromPriceRules:;  
  return;
end;

function integer Max(integer a,integer b)
begin
  integer res;
  
  if (a>=b) then begin
    res = a;
  end else begin
    res = b;
  end;
  Max = res;
  return;
end;

function integer Min(integer a,integer b)
begin
  integer res;
  
  if (a<=b) then begin
    res = a;
  end else begin
    res = b;
  end;
  Min = res;
  return;
end;

function boolean PriceRuleRestrictionValid(row PriceRulesVc PRsrw,vector integer guestcnt)
begin
  boolean res;
  integer qty;
  
  //Get relevant occupant quantities
  switch (PRsrw.RestrictionType) begin
    case kRoomPriceRestictionTypeNone:
      res = true;
    case kRoomPriceRestictionTypeAdultsNo:
      if nonblank(PRsrw.RestrictionCustClass) then begin
        qty = guestcnt[PRsrw.RestrictionCustClass & "-ADULT"];
      end else begin
        qty = guestcnt["?ALL?-ADULT"];
      end;
    case kRoomPriceRestictionTypeChildrenNo:
      if nonblank(PRsrw.RestrictionCustClass) then begin
        qty = guestcnt[PRsrw.RestrictionCustClass & "-CHILD"];
      end else begin
        qty = guestcnt["?ALL?-CHILD"];
      end;
    case kRoomPriceRestictionTypeGuestsNo:
      if nonblank(PRsrw.RestrictionCustClass) then begin
        qty = guestcnt[PRsrw.RestrictionCustClass & "-GUEST"];
      end else begin
        qty = guestcnt["?ALL?-GUEST"];
      end;
  end;
  //Evaluate restriction parameters
  if (res==false) then begin
    switch (PRsrw.RestrictionOperator) begin
      case kCompOpLessThan: //Must be less than
        res = (qty<Max(0,PRsrw.RestrictionOperand1));
      case kCompOpGreaterThan: //Must be more than
        res = (qty>Max(0,PRsrw.RestrictionOperand1));
      case kCompOpRange: //Must be between
        res = (qty>Max(0,PRsrw.RestrictionOperand1)) and (qty<Max(0,PRsrw.RestrictionOperand2));
      case kCompOpNotEqual: //Must not equal
        res = (qty<>Max(PRsrw.RestrictionOperand1,0));
    otherwise
      res = false;
    end;
  end;
  PriceRuleRestrictionValid = res;
  return;
end;

procedure PriceRuleApplyCharge(record PriceRulesVc PriceRulesr,row PriceRulesVc PRsrw,Integer curJProw,record CUVc CUr,
                               string pricelist,Date transdate,string invitem,string artcode,vector integer guestcnt,
                               var record JobPriceVc JPr,boolean firstrulef)
begin
  integer chargeqty,totalqty;
  string 255 tstr;
  
  //Get relevant occupant quantities
  switch (PRsrw.ChargeType) begin
    case kChargeTypeFixedPrice:
      chargeqty = 1;
      tstr = "fixed";
    case kChargeTypePerAdult:
      tstr = "pa";
      if nonblank(PRsrw.ChargeCustClass) then begin
        totalqty = guestcnt[PRsrw.ChargeCustClass & "-ADULT"];
      end else begin
        totalqty = guestcnt["?ALL?-ADULT"];
      end;
    case kChargeTypePerChild:
      tstr = "pc";
      if nonblank(PRsrw.ChargeCustClass) then begin
        totalqty = guestcnt[PRsrw.ChargeCustClass & "-CHILD"];
      end else begin
        totalqty = guestcnt["?ALL?-CHILD"];
      end;
    case kChargeTypePerGuest:
      tstr = "pg";
      if nonblank(PRsrw.ChargeCustClass) then begin
        totalqty = guestcnt[PRsrw.ChargeCustClass & "-GUEST"];
      end else begin
        totalqty = guestcnt["?ALL?-GUEST"];
      end;
  end;
  if nonblank(PRsrw.ChargeCustClass) then begin
    tstr = tstr & " with class. " & PRsrw.ChargeCustClass;
  end;
  //Apply charge operator restrictions
  if (PRsrw.ChargeType<>kChargeTypeFixedPrice) then begin
    switch (PRsrw.ChargeOperator) begin
      case kCompOpTrue: //For All
        chargeqty = totalqty;
      case kCompOpGreaterThanOrEqualTo: //From Number
        chargeqty = Max(0,totalqty-Max(0,PRsrw.ChargeOperand1)+1);
      case kCompOpRange: //Between number
        chargeqty = Max(0,totalqty-Max(0,PRsrw.ChargeOperand1));
        chargeqty = Min(Max(0,PRsrw.ChargeOperand2)-Max(0,PRsrw.ChargeOperand1)-1,chargeqty);
      end;
  end;
  if (chargeqty>0) then begin
    AddJobPriceRowFromPriceRules(PriceRulesr,curJProw,CUr,pricelist,transdate,invitem,artcode,chargeqty,JPr,firstrulef,tstr);
  end;
  return;
end;

procedure IncrementVectorValue(var vector integer vValues,string Vectorix)
begin
  vValues[Vectorix] = vValues[Vectorix]+1;
  return;
end;

function Boolean CreateJobPricesFromPriceRules(record HotelBlock Hotelb,Integer curJProw,record CUVc CUr,string pricelist,
                                               Date transdate,string invitem,val qty,string pricerule,integer adults,
                                               integer children,string cclassifications,var record JobPriceVc JPr)
begin
  record PriceRulesVc PRsr;
  row PriceRulesVc PRsrw;
  Integer i,rwcnt;
  string 20 artcode;
  vector Integer vclasscnt;
  Integer pos;
  string 255 cclass;
  record CClassVc CClassr;
  Boolean cclasstreatedf,firstrulef;
  
  if (adults<=0) and (children<=0) then begin
    goto LCreateJobPricesFromPriceRules;
  end;
  //Set occupant totals
  vclasscnt["?ALL?-ADULT"] = adults;
  vclasscnt["?ALL?-CHILD"] = children;
  vclasscnt["?ALL?-GUEST"] = adults+children;
  //Set classification totals
  if (nonblank(cclassifications)) then begin
    pos = 0;
    ExtractObj(cclassifications,pos,cclass);
    while (nonblank(cclass)) begin
      cclasstreatedf = false;
      CClassr.Code = cclass;
      if (ReadFirstMain(CClassr,1,true)) then begin
        if (CClassr.CType==Hotelb.CClassDCType) then begin
          IncrementVectorValue(vclasscnt,cclass & "-ADULT");
          cclasstreatedf = true;
        end;
        if (CClassr.CType==Hotelb.CClassDCTypeChild) then begin
          IncrementVectorValue(vclasscnt,cclass & "-CHILD");
          cclasstreatedf = true;
        end;
      end;
      if (cclasstreatedf==false) then begin
        IncrementVectorValue(vclasscnt,cclass & "-ADULT");
      end;
      IncrementVectorValue(vclasscnt,cclass & "-GUEST");
      ExtractObj(cclassifications,pos,cclass);
    end;
  end;
  //Process price rule rows
  firstrulef = true;
  PRsr.Code = pricerule;
  if (ReadFirstMain(PRsr,1,true)) then begin
    rwcnt = MatRowCnt(PRsr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRsr,i,PRsrw);
      artcode = PRsrw.ChargeArtCode;
      if nonblank(artcode) then begin
        if PriceRuleRestrictionValid(PRsrw,vclasscnt) then begin
          PriceRuleApplyCharge(PRsr,PRsrw,curJProw,CUr,pricelist,transdate,invitem,artcode,vclasscnt,JPr,firstrulef);
          firstrulef = false;
        end;
      end;
    end;
  end;
LCreateJobPricesFromPriceRules:;
  return;
end;

function Boolean CreateJobPrices(string rescode,string restype,string resusage,string cucode,LongInt NoOfAdults,
                                 string pricelist,Date sd,Date ed,Time st,Time et,Integer calctype,LongInt childrennr,
                                 LongInt extrabedsnr,val agreedprice,string cclassifications,
                                 string curncy,val fr,val tob1,val tob2,val br1,val br2,
                                 var record JobPriceVc JPr)
begin
  record CClassVc CCr;
  row JobPriceVc JPrw,PrevJPrw;
  record ResTypeVc ResTyper;
  record HotelBlock Hotelb;
  record INVc INr;
  record CUVc CUr;
  record JobPriceVc PrevJPr;
  string 60 Comment,tax2code;
  string 10 salesacc,vatcode,tstr,taxtemplatecode;
  string 20 lpricelist;
  string 100 Spec,cclass;
  Date dt;
  Date StartPoint,EndPoint;
  Time StartTime,EndTime;
  Time startofday;
  val qtyofdays,price,rackrateprice,qty;
  val tax2prc;
  val baseprice,Discperc;
  val cost,factor;
  array string 40 ainvitems;
  array string 40 apricerules;
  array string 40 acuclass;
  array LongInt adummyqtya;
  array LongInt aqty;
  LongInt j,arwcnt,jprwcnt;
  LongInt nrofdays;
  Integer pos;
  Boolean calcprice;
  Boolean dummyf,calcf;
  Boolean res;
  val cprice,usedqty,sum;
  integer noofguests,y;
  integer cntadult,cntchild;
  integer prevrowcnt,prevrowix,newrowcnt,newrowix;
  longint lNoOfAdults,lNoOfChildren;
  array date aCalcDate;
  array string 255 aCalcStr;
  array val aCalcTot;
  val tprice,trebate;
  Time blankt;
  Integer InvoiceBy;

  res = false;
  if (IsStandardProduct) then begin
    InvoiceBy = 1;
  end;
  if (nonblank(restype)) then begin
    ResTyper.Code = restype;
    if (ReadFirstMain(ResTyper,1,true)==false) then begin
      goto LCreateJobPrices;
    end;
    InvoiceBy = ResTyper.InvoiceBy;    
  end;
  BlockLoad(Hotelb);
  startofday = Hotelb.CheckIn;
  if (nonblanktime(Hotelb.StartNewDay)) then begin
    startofday = Hotelb.StartNewDay;
  end;
  StartPoint = sd;
  EndPoint = ed;
  StartTime = st;
  EndTime = et;
  qtyofdays = NumberOfStayDays(StartPoint,EndPoint,StartTime,EndTime,InvoiceBy);
  dt = StartPoint;
  if ((calctype!=0) or (InvoiceBy==0)) then begin
    Comment = ValToString(qtyofdays,M40Val,"","",0) & " " & USetStr(10133) & " " & ResTyper.Comment;
    nrofdays = 1;
  end else begin
    Comment = USetStr(10153) & " " & rescode & ": " & sd & " - " & EndPoint;
    if (StartTime<=startofday) then begin dt = AddDay(dt,-1); end;
    nrofdays = qtyofdays;
    qtyofdays = 1;
  end;
  if (qtyofdays<0) then begin
    goto LCreateJobPrices;
  end;
  
  if (IsEnterprise) then begin
    lNoOfAdults = NoOfAdults;
    lNoOfChildren = childrennr; 
  end else begin
    lNoOfAdults = 1;
  end;  
  if (lNoOfAdults==-1) then begin
    lNoOfAdults = 0;
  end;
  if (lNoOfChildren==-1) then begin
    lNoOfChildren = 0;
  end;
  noofguests = lNoOfAdults + lNoOfChildren;
// adummyqtya is only set if hourly invoice, but then aqty is set anyway. So I don't use adummyqtya....
  arwcnt = FillFullJobPriceArray(StartPoint,nrofdays,qtyofdays,ainvitems,apricerules,acuclass,adummyqtya,aqty,noofguests,ResTyper.Code,resusage,false);

  if (arwcnt>0) then begin
    RecordCopy(PrevJPr,JPr);
    ResetJP(JPr,sd,ed,st,et,restype,resusage,noofguests,pricelist,Comment,curncy,fr,tob1,tob2,br1,br2);
    jprwcnt = MatRowCnt(JPr);
    lpricelist = pricelist;
    CUr.Code = cucode;
    if (ReadFirstMain(CUr,1,true)) then begin
/*
only reservation price list , no need to set this if blank on reservation    
      if blank(lpricelist) then begin
        lpricelist = CUr.PLCode;
      end;
*/      
    end;

    for (j=0;j<arwcnt;j=j+1) begin
      cntadult = 0;
      cntchild = 0;
      price = BlankVal;
      sum = BlankVal;
      if (nonblank(apricerules[j])) and (blank(agreedprice)) then begin //If 'agreedprice' specified, skip price rules. Fixed price per day.
        res =  CreateJobPricesFromPriceRules(Hotelb,j,CUr,lpricelist,dt,ainvitems[j],aqty[j],apricerules[j],
                                             lNoOfAdults,lNoOfChildren,cclassifications,JPr);
        dt = AddDay(dt,1);
      end else begin
        INr.Code = ainvitems[j];
        qty = aqty[j];
        if (ReadFirstMain(INr,1,true)) then begin
          //Calculate rack rate price
          GetItemPriceDiscount3(ainvitems[j],aqty[j],INr,curncy,fr,tob1,tob2,br1,br2,
            CUr.LangCode,CUr.CustCat,Hotelb.RackRatePLCode,"",
            rackrateprice,Spec,Discperc,vatcode,cost,salesacc,            
            CUr.ExportFlag,calcprice,dt,blankt,"",true,dummyf,"",tax2code,
            tax2prc,"","",taxtemplatecode);
          Spec = "";
          vatcode = "";
          salesacc = "";
          tax2code = "";
          taxtemplatecode = "";
          dummyf = false;
          calcprice = false;
          cost = blankval;
          tax2prc = blankval;
          Discperc = blankval;
          //Calculate normal price
          GetItemPriceDiscount3(ainvitems[j],aqty[j],INr,curncy,fr,tob1,tob2,br1,br2,
            CUr.LangCode,CUr.CustCat,lpricelist,CUr.RebCode,
            price,Spec,Discperc,vatcode,cost,salesacc,            
            CUr.ExportFlag,calcprice,dt,blankt,"",true,dummyf,"",tax2code,
            tax2prc,"","",taxtemplatecode);
          if (nonblank(agreedprice)) then begin
            price = agreedprice;
          end;
          if (nonblank(acuclass[j])) and (nonblank(cclassifications)) then begin
            usedqty = 0;
            pos = 0;
            ExtractObj(cclassifications,pos,cclass);
            while (nonblank(cclass)) begin
              calcf = false;
              CCr.Code = cclass;
              if (ReadFirstMain(CCr,1,true)) then begin
                if (CCr.CType==Hotelb.CClassDCTypeChild) then begin
                  cntchild = cntchild + 1;
                  if (cntchild<=lNoOfChildren) then begin
                    calcf = true;
                  end;
                end else begin
                  cntadult = cntadult + 1;
                  if (cntadult<=noofguests-lNoOfChildren) then begin
                    calcf = true;
                  end;
                end;
              end;
              if (calcf) then begin
                cprice = price;
                CalculateCClassPrice(acuclass[j],cclass,cprice);
                sum = sum + cprice;
                usedqty = usedqty + 1;
                Discperc = (price-cprice)/price*100;
                Discperc = Round(Discperc,SetRoundModeD(5));
                FindJobPriceRow(dt,ainvitems[j],cclass,lpricelist,JPr,JPrw,y);
                AddToJobPrice(JPrw,dt,ainvitems[j],vatcode,lpricelist,Discperc,price,rackrateprice,JPrw.Qty + 1,"","");
                SetPriceCalcStr(JPrw);
                MatRowPut(JPr,y,JPrw);
              end;
              ExtractObj(cclassifications,pos,cclass);
            end;
            if (usedqty<qty) then begin
              sum = sum + (qty-usedqty)*price;
              Discperc = 0;
              FindJobPriceRow(dt,ainvitems[j],"",lpricelist,JPr,JPrw,y);
              AddToJobPrice(JPrw,dt,ainvitems[j],vatcode,lpricelist,Discperc,price,rackrateprice,JPrw.Qty+(qty-usedqty),"","");
              SetPriceCalcStr(JPrw);
              MatRowPut(JPr,y,JPrw);
            end;
          end else begin
            if (j<jprwcnt) then begin
              MatRowGet(JPr,j,JPrw);
            end else begin
              ClearRow(JPr,JPrw,1);
            end;
            AddToJobPrice(JPrw,dt,ainvitems[j],vatcode,lpricelist,Discperc,price,rackrateprice,qty,"","");
            SetPriceCalcStr(JPrw);
            MatRowPut(JPr,j,JPrw);
          end;
          dt = AddDay(dt,1);
        end;
      end;
    end;
    //Make sure to keep any user changes made to fields 'AgreedPrice' and 'AgreedRebate'.
    prevrowcnt = MatRowCnt(PrevJPr);
    newrowcnt = MatRowCnt(JPr);
    for (prevrowix=0;prevrowix<prevrowcnt;prevrowix=prevrowix+1) begin
      MatRowGet(PrevJPr,prevrowix,PrevJPrw);
      if ((nonblank(PrevJPrw.AgreedPrice)) or (nonblank(PrevJPrw.AgreedRebate)) or (nonblank(PrevJPrw.Person))) then begin
        for (newrowix=0;newrowix<newrowcnt;newrowix=newrowix+1) begin
          MatRowGet(JPr,newrowix,JPrw);
          //The row must fully match the previous/old row.
          //If its a match, then set 'AgreedPrice' and 'AgreedRebate' to previous/old value.
          if ((JPrw.StayDay==PrevJPrw.StayDay)
          and (JPrw.PriceList==PrevJPrw.PriceList)
          and (JPrw.vRebate==PrevJPrw.vRebate)
          and (JPrw.Price==PrevJPrw.Price)
          and (JPrw.ArtCode==PrevJPrw.ArtCode)
          and (JPrw.VATCode==PrevJPrw.VATCode)
          and (JPrw.Qty==PrevJPrw.Qty)
          and (JPrw.CClass==PrevJPrw.CClass)
          and (JPrw.RackRatePrice==PrevJPrw.RackRatePrice)
          and (JPrw.PriceRules==PrevJPrw.PriceRules)) then begin
            JPrw.AgreedPrice = PrevJPrw.AgreedPrice;
            JPrw.AgreedRebate = PrevJPrw.AgreedRebate;
            JPrw.Person = PrevJPrw.Person;
            SetPriceCalcStr(JPrw);
            MatRowPut(JPr,newrowix,JPrw);
            newrowix = newrowcnt;
          end;
        end;
      end;
    end;
    res = true;
  end;
  JobPriceSumup(JPr);
LCreateJobPrices:;
  CreateJobPrices = res;
  return;
end;

global
function Boolean JobToJobPrices(record JobVc Jobr,string restype,var record JobPriceVc JPr)
begin
  Boolean res;
  string 255 cclassifications;
  
  GetJobClassifications(Jobr,cclassifications);
  res =  CreateJobPrices(Jobr.ResCode,restype,Jobr.ResUsage,FindJobCustomerCode(Jobr),Jobr.Persons,Jobr.PriceList,Jobr.TransDate,Jobr.EndDate,Jobr.StartTime,Jobr.EndTime,0,Jobr.Children,
                         Jobr.ExtraBeds,Jobr.AgreedPrice,cclassifications,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2,JPr);
  JobToJobPrices = res;
  return;
end;

global
function Boolean ResAvToJobPrices(record ResAvVc ResAvr,string pricelist,string customer,Integer rownr,var record JobPriceVc JPr)
begin
  Boolean res;
  row ResAvVc ResAvrw;
  Date startd,endd;
  
  MatRowGet(ResAvr,rownr,ResAvrw);
  startd = ResAvrw.TransDate;
  if (blankdate(startd)) then begin
    startd = ResAvr.TransDate;
  end;
  endd = ResAvrw.EndDate;
  if (blankdate(endd)) then begin
    endd = ResAvr.EndDate;  
  end;
  res =  CreateJobPrices("",ResAvrw.ResType,ResAvrw.Usage,customer,ResAvrw.NoOfGuests,pricelist,startd,endd,ResAvr.StartTime,ResAvr.EndTime,ResAvrw.CalcType,ResAvrw.Children
                         ,-1,blankval,ResAvrw.Classification,ResAvr.CurncyCode,ResAvr.FrRate,ResAvr.ToRateB1,ResAvr.ToRateB2,ResAvr.BaseRate1,ResAvr.BaseRate2,JPr);
  ResAvToJobPrices = res;
  return;
end;

global
updating procedure UpdateJobPrices(record JobVc Jobr,record JobVc oldJobr,Boolean updatef)
begin
  record JobPriceVc JPr;
  record JobPriceVc oldJPr;
  
  JPr.RecType = 0;
  JPr.SerNr = Jobr.SerNr;
  JPr.RowNr = 0;
  if (ReadFirstMain(JPr,3,true)==false) then begin
//    if (updatef==false) then begin
      RecordNew(JPr);
      JPr.RecType = 0;
      JPr.SerNr = Jobr.SerNr;
      JPr.RowNr = 0;
      JPr.CurncyCode = Jobr.CurncyCode;
      JPr.FrRate = Jobr.FrRate;
      JPr.ToRateB1 = Jobr.ToRateB1;
      JPr.ToRateB2 = Jobr.ToRateB2;
      JPr.BaseRate1 = Jobr.BaseRate1;
      JPr.BaseRate2 = Jobr.BaseRate2;
      if (RecordStore(JPr,false)) then begin end;
//    end else begin
//      goto LUpdateJobPrices;
//    end;
  end;
  RecordCopy(oldJPr,JPr);
  if (JobToJobPrices(Jobr,Jobr.Type,JPr)) then begin
    if RecordUpdate(oldJPr,JPr,false) then begin end;
  end;
LUpdateJobPrices:;
  return;
end;

global
updating procedure DeleteJobPrices(record JobVc Jobr)
begin
  record JobPriceVc JPr;

  JPr.RecType = 0;
  JPr.SerNr = Jobr.SerNr;
  JPr.RowNr = 0;
  if (ReadFirstMain(JPr,3,true)) then begin
    RecordDelete(JPr);
  end;
  return;
end;

global
updating procedure UpdateResAvPrices(record ResAvVc ResAvr,record ResAvVc oldResAvr,Boolean updatef)
begin
  record JobPriceVc JPr;
  record JobPriceVc oldJPr;
  Integer rwcnt,i;
  row ResAvVc ResAvrw;

  rwcnt = MatRowCnt(ResAvr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ResAvr,i,ResAvrw);
    JPr.RecType = 1;
    JPr.SerNr = ResAvr.SerNr;
    JPr.RowNr = i;
    if (ReadFirstMain(JPr,3,true)==false) then begin
//      if (updatef==false) then begin
        RecordNew(JPr);
        JPr.RecType = 1;
        JPr.SerNr = ResAvr.SerNr;
        JPr.RowNr = i;
        JPr.CurncyCode = ResAvr.CurncyCode;
        JPr.FrRate = ResAvr.FrRate;
        JPr.ToRateB1 = ResAvr.ToRateB1;
        JPr.ToRateB2 = ResAvr.ToRateB2;
        JPr.BaseRate1 = ResAvr.BaseRate1;
        JPr.BaseRate2 = ResAvr.BaseRate2;
        if (RecordStore(JPr,false)) then begin end;
//      end else begin
//        goto LUpdateResAvPrices;
//      end;
    end;
    RecordCopy(oldJPr,JPr);
    if (ResAvToJobPrices(ResAvr,ResAvrw.PubPriceList,ResAvr.CUCode,i,JPr)) then begin // There are two pricelists....
      if RecordUpdate(oldJPr,JPr,false) then begin end;
    end;
  end;
LUpdateResAvPrices:;
  return;
end;

global
updating procedure DeleteResAvPrices(record ResAvVc ResAvr)
begin
  record JobPriceVc JPr;
  Integer rwcnt,i;

  rwcnt = MatRowCnt(ResAvr);
  for (i=0;i<rwcnt;i=i+1) begin
    JPr.RecType = 1;
    JPr.SerNr = ResAvr.SerNr;
    JPr.RowNr = i;
    if (ReadFirstMain(JPr,3,true)) then begin
      RecordDelete(JPr);
    end;
  end;
  return;
end;

global
function LongInt JobPriceVcRecordSave(var record JobPriceVc JPr,record JobPriceVc JP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  JobPriceSumup(JPr);
  JobPriceVcRecordSave = res; 
  RETURN;
END;

global
function LongInt JobPriceVcRecordUpdate(var record JobPriceVc JPr,record JobPriceVc JP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  JobPriceSumup(JPr);
  SetChangedSignature(JPr,JP2r);
  JobPriceVcRecordUpdate = res; 
  RETURN;
END;

global
updating function LongInt JobPriceVcRecordUpdateAfter(var record JobPriceVc JPr,record JobPriceVc JP2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;  
  /*
  Jarek, please remove this record action... its not needed anymore.
  JobSumup() must NOT be called here, otherwise we might have 'Record has been modified...' problems on the JobDClass window...
  JobSumup() must be called seperately or later, after JobPriceVc has been updated. I have changed the code accordingly
  
  record JobVc Jobr;
  record JobVc oldJobr;

  if (JPr.RecType==0) then begin
    Jobr.SerNr = JPr.SerNr;
    if (ReadFirstMain(Jobr,1,true)) then begin
      RecordCopy(oldJobr,Jobr);
      JobSumup(Jobr);
      if (RecordUpdate(oldJobr,Jobr,false)) then begin
      end;
    end;
  end else begin
  end;
  */
  JobPriceVcRecordUpdateAfter = res;  
  RETURN;
END;

