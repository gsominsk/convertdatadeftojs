external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function LongInt PLQVcRecordImport(var record PLQVc PLQr,record PLQVc PLQ2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gBase1ToBase2,testf;
  record ConvMasterBlock cvm;
  record PLDefVc PLDefr;
  row PLQVc PLQrw;
  Integer i,rwcnt;
      
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    testf = true;
    PLDefr.Code = PLQr.PLCode;
    if (ReadFirstMain(PLDefr,1,true)) then begin
      if ((nonblank(PLDefr.CurncyCode))) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      GetFullCurncyRate(curncy,CurrentDate,fr,to1,to2,br1,br2);
      rwcnt = MatRowCnt(PLQr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PLQr,i,PLQrw);
        B1ToB2Val(PLQrw.ExVatPrice,br1,br2,t);
        PLQrw.ExVatPrice = t;
        MatRowPut(PLQr,i,PLQrw);
      end;
    end;
  end;
  PLQVcRecordImport = res;
  return;
end;

/*
global 
function Boolean PLQVcRecordShouldBeSynchronised(record PLQVc PLQr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLQVcrecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean PLQVcRecordSync(record PLQVc PLQr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLQVcRecordSync = res;
  return;
end;
*/