external function Boolean GetPMRow(string,var row PMBlock);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 20 GetPayPurchVATAcc(string,record VATCodeBlock);
external function string 5 AddVATCodeToVATAccRows(string);
external procedure IVVATPart(LongInt,val,var val);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure AddTransAutoTransRows(record TRVc);
external procedure VIVc_MakeAccountDescription(record VIVc,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure TRSumup(var record TRVc,var val);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean TransInFiscal(Date);

procedure FindPrepaymentRate(LongInt TransNr,var val ofrrate,var val otorate1,var val otorate2,var val obaserate1,var val obaserate2)
BEGIN
  record APPayHistVc APPayHistr;
  record CLOutVc CLOutr;
  record OPVc OPr;
  Boolean found;

  ofrrate = blankval;
  otorate1 = blankval;
  otorate2 = blankval;
  obaserate1 = blankval;
  obaserate2 = blankval;
  APPayHistr.VEPNr = TransNr;
  APPayHistr.FileName = "CLOutVc";
  found = ReadFirstMain(APPayHistr,2,true);
  if (found) then begin 
    CLOutr.SerNr = APPayHistr.SerNr;
    if (ReadFirstMain(CLOutr,1,true)) then begin 
      ofrrate = CLOutr.FrRate;
      otorate1 = CLOutr.ToRateB1;
      otorate2 = CLOutr.ToRateB2;
      obaserate1 = CLOutr.BaseRate1;
      obaserate2 = CLOutr.BaseRate2;
    end;
  end;
  if (!found) then begin 
    APPayHistr.VEPNr = TransNr;
    APPayHistr.FileName = "OPVc";
    found = ReadFirstMain(APPayHistr,2,true);
    if (found) then begin 
      OPr.SerNr = APPayHistr.SerNr;
      if (ReadFirstMain(OPr,1,true)) then begin 
        GetFullCurncyRate(APPayHistr.CurncyCode,OPr.TransDate,ofrrate,otorate1,otorate2,obaserate1,obaserate2);
      end;
    end;
  end;
  RETURN;
END;

global
procedure IVVc_MakeAccountDescription(record IVVc IVr,var string res)
BEGIN
  res = "";
  if (IVr.SerNr!=-1) then begin
    res = IVr.SerNr;
  end;
  if (nonblank(res)) then begin
    res = res & " ";
  end;
  res = res & IVr.CustCode;
  res = res & " ";
  res = res & IVr.Addr0;
  RETURN;
END;

function Integer AddTransRows(record TRVc gTRp,record MainCLBlock MainCLb,record VATCodeBlock VATCodeRec,record AccBlock ARb,
                              record CLInVc CLInp,string corspacc,string objects,
                              val total,val netval,val vatval,val frrate,val torate1,val torate2,val baserate1,val baserate2,
                              var val totsum,string CustCode,LongInt InvoiceNr,string accstr,Integer nlrwtype)
BEGIN
  val rs;
  Integer res;
  string 255 tstr,vatacc,tax1acc,taccnumber,objstr;
  val nilv,diff;
  Integer i,vcrwcnt;
  row VATCodeBlock VATCoderw;
  Boolean invf,rddc1,rddc2;
  record AccVc Accr; 
  
  nilv = -1;
  res = 1085;
  Accr.AccNumber = corspacc;    
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 20022;
    goto LAddTransRows;
  end else begin
    if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
      res = 1084; 
      goto LAddTransRows;
    end;        
    tstr = Accr.Comment;
  end;
  objstr = CLInp.Objects;
  if (nonblank(objstr)) then begin
    objstr = objstr & ",";
  end;
  objstr = objstr & objects;
//  if ((MainCLb.PostVAT==1) and (blank(CLInp.FileName)) and (MatRowCnt(CLInp)==0)) then begin
  if ((MainCLb.PostVAT==1) and (blank(CLInp.FileName)) and (vatval!=0)) then begin
    rs = netval;
    rs = MulRateToBase1(CLInp.CurncyCode,netval,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
/*
    if (GetAccName(corspacc,tstr,60)==false) then begin
      res = 20022;
      goto LAddTransRows;
    end;
*/    
    if (CheckTTRPerRow("CLInVc",corspacc,objstr,false,taccnumber,0)) then begin end;      
//        vatcodes = TaxTemplateVATCodeOnTRRows(VIrw.TaxTemplateCode,VIrw.VATCode);
    AddEuroCurncyTrRow(gTRp,corspacc,objstr,CLInp.VATCode,tstr,rs,false,false,totsum,
                       CLInp.CurncyCode,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,netval,nilv,-1,false,taccnumber);
    if (nonblank(CLInp.VATCode)) then begin
      vatacc = ""; 
      vcrwcnt = MatRowCnt(VATCodeRec);
      for (i=0;i<vcrwcnt;i=i+1) begin
        MatRowGet(VATCodeRec,i,VATCoderw);
        if (VATCoderw.VATCode==CLInp.VATCode) then begin 
          vatacc = VATCoderw.SalesVATAcc;
          tax1acc = VATCoderw.Tax1Acc;
          goto L12;
        end;
      end;
L12:;
      if (GetAccName(vatacc,tstr,60)==false) then begin
        res = 1902;
        goto LAddTransRows;
      end;
      rs = MulRateToBase1(CLInp.CurncyCode,vatval,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
      if (CheckTTRPerRow("CLInVc",vatacc,"",false,taccnumber,0)) then begin end;      
      AddEuroCurncyTrRow(gTRp,vatacc,"",AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rs,false,false,totsum,
                         CLInp.CurncyCode,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,vatval,nilv,-1,false,taccnumber);
      if (CLInp.TAX1Sum!=0) then begin
        if (GetAccName(tax1acc,tstr,60)==false) then begin
          res = 2193;
          goto LAddTransRows;
        end;
        rs = MulRateToBase1(CLInp.CurncyCode,CLInp.TAX1Sum,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
        if (CheckTTRPerRow("CLInVc",tax1acc,"",false,taccnumber,0)) then begin end;      
        AddEuroCurncyTrRow(gTRp,tax1acc,"","",tstr,rs,false,false,totsum,
                           CLInp.CurncyCode,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,CLInp.TAX1Sum,nilv,-1,false,taccnumber);
      end;
    end;
  end else begin
    if (InvoiceNr==-1) then begin
      rs = MulRateToBase1(CLInp.CurncyCode,total,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
/*      
      if (GetAccName(corspacc,tstr,60)==false) then begin
        res = 20022;
        goto LAddTransRows;
      end;
*/      
      if (nonblank(accstr)) then begin 
        tstr = tstr & ", " & accstr;
      end;
      if (CheckTTRPerRow("CLInVc",corspacc,objstr,false,taccnumber,0)) then begin end;      
      AddEuroCurncyTrRow(gTRp,corspacc,objstr,"",tstr,rs,false,false,totsum,
                         CLInp.CurncyCode,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,total,nilv,-1,false,taccnumber);
    end else begin
      rs = MulRateToBase1(CLInp.CurncyCode,total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      diff = MulRateToBase1(CLInp.CurncyCode,total,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
      diff = diff - rs;
/*
      if (GetAccName(corspacc,tstr,60)==false) then begin
        res = 20022;
        goto LAddTransRows;
      end;
*/      
      if (nonblank(accstr)) then begin
        tstr = accstr;
      end;      
      if (CheckTTRPerRow("CLInVc",corspacc,objstr,false,taccnumber,0)) then begin end;      
      if (CLInp.ARonTR!=0) then begin
        AddEuroCurncyNomARTrRow(gTRp,corspacc,objstr,"",tstr,rs,blankval,false,false,totsum,
                                CLInp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,total,blankval,
                                CustCode,InvoiceNr,nlrwtype,blankval,CLInp.TransDate,-1,false,taccnumber,"","");
      end else begin
        AddEuroCurncyTrRow(gTRp,corspacc,objstr,"",tstr,rs,false,false,totsum,
                           CLInp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,total,nilv,-1,false,taccnumber);
      end;
      invf = true;
    end;
    if (nonblank(diff)) then begin
      rddc1 = true; rddc2 = true;
      
      if (invf) then begin
        rddc1 = false; rddc2 = false;
      end;
      if (diff>0) then begin
        if (GetAccName(ARb.RateGainAcc,tstr,60)==false) then begin
          res = 1918;
          goto LAddTransRows;
        end;
        AddEuroTrRow(gTRp,ARb.RateGainAcc,"","",tstr,diff,baserate1,baserate2,false,rddc1,TotSum,false,"","","");
      end else begin
        if (GetAccName(ARb.RateLossAcc,tstr,60)==false) then begin
          res = 1917;
          goto LAddTransRows;
        end;
        AddEuroTrRow(gTRp,ARb.RateLossAcc,"","",tstr,diff,baserate1,baserate2,false,rddc2,TotSum,false,"","","");
      end;
    end;
  end;
  res = 0;
LAddTransRows:;
  AddTransRows = res;
  RETURN;
END;

global
function Integer MakeTransFromCLIn(var record TRVc gTRp,record CLInVc CLInp,Boolean rpt,var string errstr)
BEGIN
  Integer res;
  record IVVc IVr;
  record TRVc lTRr;
  record AccBlock ARb;
  record APAccBlock APAccRec;
  record TRGenBlock TRGenRec;
  record CLCorspVc CLCorspr;
  record MainCLBlock MainCLb;
  record PMBlock PMRec;
  row PMBlock pmrw;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATCoderw;
  record BaseCurBlock bcur;
  Integer i,rwcnt,PMn;
  string 255 ftxt;
  string 10 corspacc,headercorspacc;
  string 255 tstr,t2,accstr;
  string 255 vstr,objects;
  Boolean dc1,dc2,bookvativf,bookprepvativf,bookvatvif,bookprepvatvif;
  val rs,rs2,ors,ors2,rd,rd2,totsum,bsum,vatval;
  val frrate,torate1,torate2,baserate1,baserate2;  
  val ofrrate,otorate1,otorate2,obaserate1,obaserate2;  
  Integer vcrwcnt,vcnt;
  string 255 vatacc;
  val nilv,nv;
  row CLInVc CLInrw;
  record UserVc USr;
  string 10 persacc;
  string 255 persobj,persstr,onaccacc,vatobjstr;
  Boolean userreadf;
  record CUVc CUr;
  record CCatVc CCatr;
  record VIVc VIr;   
  record VGVc VGr;
  string 60 tobj;
  Boolean sumpmf;
  string 20 vatacc1,vatacc2,taccnumber;  
  record AccVc Accr;
  string 255 paymode;
  Integer OPBookVAT,IPBookVAT;
  
  res = 1085;
  errstr = "";
  nilv = -1;
  BlockLoad(TRGenRec);
  BlockLoad(APAccRec);
  BlockLoad(MainCLb);
  BlockLoad(ARb);
  BlockLoad(APAccRec);
  BlockLoad(bcur);
  totsum = blankval;
  vstr = "";
  frrate = CLInp.FrRate;
  torate1 = CLInp.ToRateB1;
  torate2 = CLInp.ToRateB2;
  baserate1 = CLInp.BaseRate1;
  baserate2 = CLInp.BaseRate2;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.CLInGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromCLIn;
    end;
  end;
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.CLInStartDate)) and
       (CLInp.TransDate<TRGenRec.CLInStartDate)) then begin //## only if old not done 
       res = 0;
       goto LMakeTransFromCLIn;
    end;
  end;  
  if (true) then begin
    gTRp.IntYc = CLInYc;
    gTRp.Number = CLInp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromCLIn;
    end;  
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = CLInp.TransDate;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      res = 1075;
      goto LMakeTransFromCLIn;
    end;
  end;
  ftxt = "";
  gTRp.Comment = CLInp.Comment;
  gTRp.RefStr = CLInp.RefStr;
  
  PMn = 0;
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  if (len(CLInp.PayMode)>0) then begin
    for (i = 0; i<rwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.Code==CLInp.PayMode) then begin
        PMn = i;
        goto LFOREND;
      end;  
    end;
  end;
LFOREND:;  
  dc1 = true;
  dc2 = false;
  t2 = "";

  CLCorspr.Code = CLInp.CorspCode;
  if (ReadFirstMain(CLCorspr,1,true)) then begin
    headercorspacc = CLCorspr.AccNumber;
  end;  
  BlockLoad(VATCodeRec);
  rwcnt = MatRowCnt(CLInp);
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLInp,i,CLInrw);
      paymode = CLInrw.PayMode;
      if (blank(paymode)) then begin paymode = CLInp.PayMode; end;
      GetPMRow(paymode,pmrw);

      if (GetAccName(pmrw.AccNr,tstr,60)==false) then begin
        res = 2191;
        goto LMakeTransFromCLIn;
      end;
      Accr.AccNumber = pmrw.AccNr;
      ReadFirstMain(Accr,1,true);  
      if (Accr.blockedFlag!=0) then begin
        res = 1258; 
        errstr = Accr.AccNumber;
        goto LMakeTransFromCLIn;
      end;
      if (Accr.GroupAcc!=0) then begin
        res = 1084; 
        errstr = Accr.AccNumber;
        goto LMakeTransFromCLIn;
      end;

      sumpmf = false;
      switch (CLInrw.stp) begin
        case 1:
          switch (CLInrw.Type) begin
            case 0:
              CLCorspr.Code = CLInrw.CorspCode;
              if (ReadFirstMain(CLCorspr,1,true)) then begin
                corspacc = CLCorspr.AccNumber;
              end;  
              if (blank(corspacc)) then begin corspacc = headercorspacc; end;
              res = AddTransRows(gTRp,MainCLb,VATCodeRec,ARb,CLInp,corspacc,CLInrw.Objects,CLInrw.Sum,(CLInrw.Sum/CLInp.Total)*CLInp.NetVal,(CLInrw.Sum/CLInp.Total)*CLInp.VATVal,
                                 frrate,torate1,torate2,baserate1,baserate2,totsum,"",-1,CLInrw.Comment,1);  
              if (res!=0) then begin
                if (res==1084) then begin
                   errstr = CLInrw.CorspCode;
                end;
                goto LMakeTransFromCLIn;
              end;
              sumpmf = true;
            case 1:
              IVr.SerNr = CLInrw.TransNr;
              if (ReadFirstMain(IVr,1,true)) then begin
                CUr.Code = IVr.CustCode;
                ReadFirstMain(CUr,1,true);
                if (HasLocalization("POL")) then begin
                  IPBookVAT = IVr.IPBookVAT;
                end else begin
                  switch (CUr.IPBookVAT) begin
                    case 1:
                      IPBookVAT = 1;
                    case 2:
                      IPBookVAT = 0;
                    otherwise
                      IPBookVAT = ARb.IPBookVAT;
                  end;
                end;
                if (blank(IVr.ARAcc)) then begin
                  IVr.ARAcc = ARb.ARAcc;
                end;
                if (GetAccName(IVr.ARAcc,tstr,60)==false) then begin
                  res = 1908;
                  goto LMakeTransFromCLIn;
                end;
                IVVc_MakeAccountDescription(IVr,tstr);
                if (ARb.ARUseObj!=0) then begin
                  objects = CLInrw.Objects;
                end;                
                res = AddTransRows(gTRp,MainCLb,VATCodeRec,ARb,CLInp,IVr.ARAcc,objects,CLInrw.Sum,0,0,
                                   IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                                   totsum,IVr.CustCode,IVr.SerNr,tstr,1);  
                if (res!=0) then begin
                  if (res==1084) then begin
                     errstr = IVr.ARAcc;
                  end;
                  goto LMakeTransFromCLIn;
                end;     
                if (IPBookVAT!=0) then begin bookvativf = true; end;
              end;
            case 2:
              VIr.SerNr = CLInrw.TransNr;
              if (ReadFirstMain(VIr,1,true)) then begin
                CUr.Code = VIr.VECode;
                ReadFirstMain(CUr,1,true);
                if (HasLocalization("POL")) then begin
                  OPBookVAT = VIr.OPBookVAT;
                end else begin
                  switch (CUr.OPBookVAT) begin
                    case 1:
                      OPBookVAT = 1;
                    case 2:
                      OPBookVAT = 0;
                    otherwise
                      OPBookVAT = APAccRec.OPBookVAT;
                  end;
                end;
                if (blank(VIr.APAcc)) then begin
                  VIr.APAcc = APAccRec.APAcc;
                end;
                if (GetAccName(VIr.APAcc,tstr,60)==false) then begin
                  res = 1908;
                  goto LMakeTransFromCLIn;
                end;
                VIVc_MakeAccountDescription(VIr,tstr);
                res = AddTransRows(gTRp,MainCLb,VATCodeRec,ARb,CLInp,VIr.APAcc,"",CLInrw.Sum,0,0,
                                   VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,
                                   totsum,VIr.VECode,VIr.SerNr,tstr,2);  
                if (res!=0) then begin
                  if (res==1084) then begin
                     errstr = VIr.APAcc;
                  end;
                  goto LMakeTransFromCLIn;
                end;     
                if (OPBookVAT!=0) then begin bookvatvif = true; end;
              end;
            case 3:
    /*        
    should be payment mode not coresponing accounts
              rs = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
              if (GetAccName(corspacc,tstr,60)==false) then begin
                res = 1085;
                goto LMakeTransFromCLIn;
              end;
              AddEuroCurncyTrRow(gTRp,corspacc,CLInp.Objects,"",tstr,rs,false,dc1,totsum,
                                 CLInp.CurncyCode,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,CLInrw.Sum,nilv,-1,false,"");
    */                             
              if (nonblank(CLInp.Person)) then begin
                if (userreadf==false) then begin
                  USr.Code = CLInp.Person;
                  if (ReadFirstMain(USr,1,true)) then begin              
                    persacc = USr.PersAcc;
                    persobj = USr.PersObjx;
                    if (GetAccName(persacc,persstr,60)==false) then begin
                      res = 2130;
                      goto LMakeTransFromCLIn;
                    end;  
                    userreadf = true;
                  end;
                end;         

                rs = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                if (CheckTTRPerRow("CLInVc",persacc,persobj,dc2,taccnumber,0)) then begin end;      
                AddEuroCurncyTrRow(gTRp,persacc,persobj,"",persstr,rs,true,dc2,totsum,CLInp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLInrw.Sum,blankval,-1,false,taccnumber);
              end;
            case 4:
              CUr.Code = CLInrw.Company;
              if (ReadFirstMain(CUr,1,true)) then begin
              end;
              onaccacc = "";
    //          onaccacc = CUr.OnAccAcc;
              if (blank(onaccacc)) then begin
                CCatr.Code = CUr.CustCat;
                if (ReadFirstMain(CCatr,1,true)) then begin
                  onaccacc = CCatr.OnAccAcc;
                end;
              end;
              if (blank(onaccacc)) then begin
                onaccacc = ARb.OnAccAcc;
              end;
              if (GetAccName(onaccacc,tstr,60)==false) then begin
                res = 1916;
                goto LMakeTransFromCLIn;
              end;
              rs = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              if (CheckTTRPerRow("CLInVc",onaccacc,"",dc2,taccnumber,0)) then begin end;      
              if (CLInp.ARonTR!=0) then begin
                AddEuroCurncyNomARTrRow(gTRp,onaccacc,CLInrw.Objects,"",tstr,rs,blankval,false,dc2,totsum,
                                        CLInp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLInrw.Sum,blankval,
                                        CLInrw.Company,-1,1,blankval,CLInp.TransDate,-1,false,taccnumber,"","");
              end else begin
                AddEuroCurncyTrRow(gTRp,onaccacc,"","",tstr,rs,false,dc2,totsum,
                                   CLInp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLInrw.Sum,blankval,-1,false,taccnumber);
              end;
              if (ARb.PreIPBookVAT!=0) then begin bookprepvativf = true; end;
            case 5:
              CUr.Code = CLInrw.Company;
              if (ReadFirstMain(CUr,1,true)) then begin
              end;
              onaccacc = CUr.OnAccAccAP;
              if (blank(onaccacc)) then begin
                if (blank(CUr.VECat)) then begin
                  CCatr.Code = CUr.CustCat;
                  if (ReadFirstMain(CCatr,1,true)) then begin
                    onaccacc = CCatr.OnAccAccAP;
                  end;
                end else begin
                  VGr.Code = CUr.VECat;
                  if (ReadFirstMain(VGr,1,true)) then begin
                    onaccacc = VGr.OnAccAcc;
                  end;
                end;
              end;
              if (blank(onaccacc)) then begin
                onaccacc = APAccRec.OnAccAcc;
              end;
              FindPrepaymentRate(CLInrw.TransNr,ofrrate,otorate1,otorate2,obaserate1,obaserate2);

              rs = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              ors = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,ofrrate,otorate1,otorate2,obaserate1,obaserate2,DefaultCurRoundOff);
              rs2 = MulRateToBase2(CLInp.CurncyCode,CLInrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
              ors2 = MulRateToBase2(CLInp.CurncyCode,CLInrw.Sum,ofrrate,otorate1,otorate2,obaserate1,obaserate2,DefaultCurRoundOff);
              rd = ors - rs;
              rd2 = ors2 - rs2;
              if (rd<0) then begin
                if (GetAccName(ARb.RateGainAcc,tstr,60)==false) then begin
                  res = 1917;
                  goto LMakeTransFromCLIn;
                end;
                AddEuroCurncyTrRow(gTRp,ARb.RateGainAcc,"","",tstr,rd,true,dc1,TotSum,
                                   bcur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rd2,blankval,-1,false,"");
              end;
              if (rd>0) then begin
                if (GetAccName(ARb.RateLossAcc,tstr,60)==false) then begin
                  res = 1918;
                  goto LMakeTransFromCLIn;
                end;
                AddEuroCurncyTrRow(gTRp,ARb.RateLossAcc,"","",tstr,rd,true,dc1,TotSum,
                                   bcur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rd2,blankval,-1,false,"");
              end;          

              if (GetAccName(onaccacc,tstr,60)==false) then begin
                res = 1916;
                goto LMakeTransFromCLIn;
              end;
              if (CheckTTRPerRow("CLInVc",onaccacc,"",dc2,taccnumber,1)) then begin end;      

              if (CLInp.ARonTR!=0) then begin
                AddEuroCurncyNomARTrRow(gTRp,onaccacc,CLInrw.Objects,"",tstr,ors,blankval,false,dc2,totsum,
                                        CLInp.CurncyCode,ofrrate,otorate1,otorate2,obaserate1,obaserate2,CLInrw.Sum,blankval,
                                        CLInp.CUCode,-1,2,blankval,CLInp.TransDate,-1,false,taccnumber,"","");
              end else begin
                AddEuroCurncyTrRow(gTRp,onaccacc,"","",tstr,ors,false,dc2,totsum,
                                   CLInp.CurncyCode,ofrrate,otorate1,otorate2,obaserate1,obaserate2,CLInrw.Sum,blankval,-1,false,taccnumber);
              end;                                       
              if (APAccRec.PreOPBookVAT!=0) then begin bookprepvatvif = true; end;
            case 6:
              CLCorspr.Code = CLInrw.CorspCode;
              if (ReadFirstMain(CLCorspr,1,true)) then begin
                corspacc = CLCorspr.AccNumber;
              end;  
              if (blank(corspacc)) then begin corspacc = headercorspacc; end;
              res = AddTransRows(gTRp,MainCLb,VATCodeRec,ARb,CLInp,corspacc,"",CLInrw.Sum,(CLInrw.Sum/CLInp.Total)*CLInp.NetVal,(CLInrw.Sum/CLInp.Total)*CLInp.VATVal,
                                 frrate,torate1,torate2,baserate1,baserate2,totsum,"",-1,CLInrw.Comment,1);  
              if (res!=0) then begin
                if (res==1084) then begin
                   errstr = CLInrw.CorspCode;
                end;
                goto LMakeTransFromCLIn;
              end;
              sumpmf = true;
          end;
          rs = CLInrw.Sum;
          rs = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);   
          tobj = CLInrw.Objects;
          if (nonblank(tobj)) then begin
            if (nonblank(pmrw.Objects)) then begin
              tobj = tobj & "," & pmrw.Objects;
            end;
          end else begin
            tobj = pmrw.Objects;
          end; 
          if (CheckTTRPerRow("CLInVc",pmrw.AccNr,tobj,dc1,taccnumber,0)) then begin end;      
          AddEuroCurncyTrRow(gTRp,pmrw.AccNr,tobj,"",pmrw.Comment,rs,false,dc1,totsum,
                             CLInp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLInrw.Sum,nilv,-1,false,taccnumber);
        case 2:
          switch (CLInrw.Type) begin
            case 1:
              IVr.SerNr = CLInrw.TransNr;
              if (ReadFirstMain(IVr,1,true)) then begin
                rs = MulRateToBase1(IVr.CurncyCode,CLInrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                if (CheckTTRPerRow("CLInVc",IVr.ARAcc,CLInp.Objects,dc2,taccnumber,0)) then begin end;      
                AddEuroCurncyTrRow(gTRp,IVr.ARAcc,CLInp.Objects,"",tstr,rs,true,dc2,totsum,
                                   IVr.CurncyCode,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,totsum,nilv,-1,false,taccnumber);

                rs = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
                switch (IVr.ExportFlag) begin
                  case 0:
                    accstr = ARb.ERebAcc;
                  case 1:
                    accstr = ARb.EUERebAcc;
                  case 2:
                    accstr = ARb.ExpERebAcc;
                  case 4:
                    accstr = ARb.EUERebAcc;
                  case 5:
                    accstr = ARb.ExpERebAcc;
                end;

                if (GetAccName(accstr,tstr,60)==false) then begin
                  res = 2132;
                  goto LMakeTransFromCLIn;
                end;
                if (CheckTTRPerRow("CLInVc",accstr,CLInrw.Objects,dc1,taccnumber,0)) then begin end;      
                AddEuroCurncyTrRow(gTRp,accstr,CLInrw.Objects,"",tstr,rs,false,dc1,TotSum,
                                   CLInp.CurncyCode,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,CLInrw.Sum,blankval,-1,false,taccnumber);
                if (nonblank(ARb.VATERAcc)) then begin            
                  IVVATPart(CLInrw.TransNr,CLInrw.Sum,vatval);
                  if (GetAccName(ARb.VATERAcc,tstr,60)==false) then begin
                    res = 2134;
                    goto LMakeTransFromCLIn;
                  end;
                  if (CheckTTRPerRow("CLInVc",ARb.VATERAcc,"",dc2,taccnumber,0)) then begin end;      
                  AddEuroTrRow(gTRp,ARb.VATERAcc,"","",tstr,vatval,CLInp.BaseRate1,CLInp.BaseRate2,true,dc2,TotSum,false,taccnumber,"","");
                  if (nonblank(ARb.VATBAcc)) then begin
                    if (GetAccName(ARb.VATBAcc,tstr,60)==false) then begin
                      res = 1903;
                      goto LMakeTransFromCLIn;
                    end;
                    if (CheckTTRPerRow("CLInVc",ARb.VATBAcc,"",dc1,taccnumber,0)) then begin end;      
                    AddEuroTrRow(gTRp,ARb.VATBAcc,"","",tstr,vatval,CLInp.BaseRate1,CLInp.BaseRate2,true,dc1,TotSum,false,taccnumber,"","");
                  end else begin
                    if (GetAccName(accstr,tstr,60)==false) then begin
                      res = 2132;
                      goto LMakeTransFromCLIn;
                    end;
                    if (CheckTTRPerRow("CLInVc",accstr,"",dc1,taccnumber,0)) then begin end;      
                    AddEuroTrRow(gTRp,accstr,"","",tstr,vatval,CLInp.BaseRate1,CLInp.BaseRate2,true,dc1,TotSum,false,taccnumber,"","");
                  end;
                end;
              end;
            case 2:
              IVr.SerNr = CLInrw.TransNr;
              if (ReadFirstMain(IVr,1,true)) then begin
                rs = MulRateToBase1(IVr.CurncyCode,CLInrw.Sum,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
                if (CheckTTRPerRow("CLInVc",IVr.ARAcc,CLInp.Objects,false,taccnumber,0)) then begin end;      
                AddEuroCurncyTrRow(gTRp,IVr.ARAcc,CLInp.Objects,"",tstr,rs,false,false,totsum,
                                   IVr.CurncyCode,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,totsum,nilv,-1,false,taccnumber);

                rs = MulRateToBase1(CLInp.CurncyCode,CLInrw.Sum,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,DefaultCurRoundOff);
                switch (IVr.ExportFlag) begin
                  case 0:
                    accstr = ARb.ERebAcc;
                  case 1:
                    accstr = ARb.EUERebAcc;
                  case 2:
                    accstr = ARb.ExpERebAcc;
                  case 4:
                    accstr = ARb.EUERebAcc;
                  case 5:
                    accstr = ARb.ExpERebAcc;
                end;

                if (GetAccName(accstr,tstr,60)==false) then begin
                  res = 2132;
                  goto LMakeTransFromCLIn;
                end;
                if (CheckTTRPerRow("CLInVc",accstr,CLInrw.Objects,dc2,taccnumber,1)) then begin end;      
                AddEuroCurncyTrRow(gTRp,accstr,CLInrw.Objects,"",tstr,rs,false,dc2,TotSum,
                                   CLInp.CurncyCode,CLInp.FrRate,CLInp.ToRateB1,CLInp.ToRateB2,CLInp.BaseRate1,CLInp.BaseRate2,CLInrw.Sum,blankval,-1,false,taccnumber);
                if (nonblank(ARb.VATERAcc)) then begin            
                  IVVATPart(CLInrw.TransNr,CLInrw.Sum,vatval);
                  if (GetAccName(ARb.VATERAcc,tstr,60)==false) then begin
                    res = 2134;
                    goto LMakeTransFromCLIn;
                  end;
                  if (CheckTTRPerRow("CLInVc",ARb.VATERAcc,"",dc2,taccnumber,0)) then begin end;      
                  AddEuroTrRow(gTRp,ARb.VATERAcc,"","",tstr,vatval,CLInp.BaseRate1,CLInp.BaseRate2,true,dc2,TotSum,false,taccnumber,"","");
                  if (nonblank(ARb.VATBAcc)) then begin
                    if (GetAccName(ARb.VATBAcc,tstr,60)==false) then begin
                      res = 1903;
                      goto LMakeTransFromCLIn;
                    end;
                    if (CheckTTRPerRow("CLInVc",ARb.VATBAcc,"",dc1,taccnumber,0)) then begin end;      
                    AddEuroTrRow(gTRp,ARb.VATBAcc,"","",tstr,vatval,CLInp.BaseRate1,CLInp.BaseRate2,true,dc1,TotSum,false,taccnumber,"","");
                  end else begin
                    if (GetAccName(accstr,tstr,60)==false) then begin
                      res = 2132;
                      goto LMakeTransFromCLIn;
                    end;
                    if (CheckTTRPerRow("CLInVc",accstr,"",dc1,taccnumber,0)) then begin end;      
                    AddEuroTrRow(gTRp,accstr,"","",tstr,vatval,CLInp.BaseRate1,CLInp.BaseRate2,true,dc1,TotSum,false,taccnumber,"","");
                  end;
                end;
              end;
          end;          
      end;
    end;
  end else begin
    res = AddTransRows(gTRp,MainCLb,VATCodeRec,ARb,CLInp,headercorspacc,"",CLInp.Total,CLInp.NetVal,CLInp.VATVal,
                       frrate,torate1,torate2,baserate1,baserate2,totsum,"",-1,"",1);  
    if (res!=0) then begin
      if (res==1084) then begin
         errstr = CLInp.CorspCode;
      end;
      goto LMakeTransFromCLIn;
    end;
    rs = CLInp.Total;
    rs = MulRateToBase1(CLInp.CurncyCode,CLInp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    if (CheckTTRPerRow("CLInVc",pmrw.AccNr,pmrw.Objects,dc1,taccnumber,0)) then begin end;      
    AddEuroCurncyTrRow(gTRp,pmrw.AccNr,pmrw.Objects,"",pmrw.Comment,rs,false,dc1,totsum,
                       CLInp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,CLInp.Total,nilv,-1,false,taccnumber);
  end;  
  
  if (bookvativf) then begin
    vcnt = MatRowCnt(VATCodeRec);
    if (vcnt==0) then begin
      res = 1902;
      goto LMakeTransFromCLIn;
    end;
    for (i=0;i<vcnt;i=i+1) begin
      MatRowGet(VATCodeRec,i,VATCoderw);
      if (CLInp.VATCode==VATCoderw.VATCode) then begin
        goto L221;
      end;
    end;
    MatRowGet(VATCodeRec,0,VATCoderw);
L221:;
    rd = MulRateToBase1(CLInp.CurncyCode,CLInp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = MulRateToBase1(CLInp.CurncyCode,CLInp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = nv - rd;
    vatacc = VATCoderw.PaySalesVATAcc;
    if (blank(vatacc)) then begin
      vatacc = ARb.VATBAcc;
    end;
    if (GetAccName(vatacc,tstr,60)==false) then begin
      res = 2170;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",vatacc,"",dc2,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,vatacc,"",AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
    if (GetAccName(VATCoderw.SalesVATAcc,tstr,60)==false) then begin
      res = 2171;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",VATCoderw.SalesVATAcc,"",dc1,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,VATCoderw.SalesVATAcc,"",AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsum,false,taccnumber,"","");
  end;
  if (bookprepvativf) then begin
    vatobjstr = ""; 
    if (ARb.VATUseObj!=0) then begin
      vatobjstr = CLInp.Objects;
    end;    
    rd = MulRateToBase1(CLInp.CurncyCode,CLInp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = MulRateToBase1(CLInp.CurncyCode,CLInp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = nv - rd;
    if (GetAccName(ARb.OnAccVATAcc,tstr,60)==false) then begin
      res = 2170;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",ARb.OnAccVATAcc,vatobjstr,dc1,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,ARb.OnAccVATAcc,vatobjstr,AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsum,false,taccnumber,"","");

    vcnt = MatRowCnt(VATCodeRec);
    if (vcnt==0) then begin
      res = 1902;
      goto LMakeTransFromCLIn;
    end;
    for (i=0;i<vcnt;i=i+1) begin
      MatRowGet(VATCodeRec,i,VATCoderw);
      if (CLInp.VATCode==VATCoderw.VATCode) then begin
        i = vcnt;
      end;
    end;
    vatacc = VATCoderw.PaySalesVATAcc;
    if (blank(vatacc)) then begin
      vatacc = ARb.VATBAcc;
    end;
    if (GetAccName(vatacc,tstr,60)==false) then begin
      res = 2170;
      goto LMakeTransFromCLIn;
    end;
    if (GetAccName(vatacc,tstr,60)==false) then begin
      res = 2171;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",vatacc,vatobjstr,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
  end;

  if (bookprepvatvif) then begin
    vatobjstr = ""; 
    if (APAccRec.VATUseObj!=0) then begin
      vatobjstr = CLInp.Objects;
    end;    
    rd = MulRateToBase1(CLInp.CurncyCode,CLInp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = MulRateToBase1(CLInp.CurncyCode,CLInp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = nv - rd;
    vatacc = GetPayPurchVATAcc(CLInp.VATCode,VATCodeRec);
    if (blank(vatacc)) then begin        
      vatacc = APAccRec.VATAcc;
    end;
    if (GetAccName(vatacc,tstr,60)==false) then begin
      res = 2171;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",vatacc,vatobjstr,dc2,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");

    if (GetAccName(APAccRec.OnAccVAT,tstr,60)==false) then begin
      res = 2170;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",APAccRec.OnAccVAT,vatobjstr,dc1,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,APAccRec.OnAccVAT,vatobjstr,AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsum,false,taccnumber,"","");
  end;
  if (bookvatvif) then begin
    vcnt = MatRowCnt(VATCodeRec);
    if (vcnt==0) then begin
      res = 1902;
      goto LMakeTransFromCLIn;
    end;
    for (i=0;i<vcnt;i=i+1) begin
      MatRowGet(VATCodeRec,i,VATCoderw);
      if (CLInp.VATCode==VATCoderw.VATCode) then begin
        goto L222;
      end;
    end;
    MatRowGet(VATCodeRec,0,VATCoderw);
L222:;
    rd = MulRateToBase1(CLInp.CurncyCode,CLInp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = MulRateToBase1(CLInp.CurncyCode,CLInp.Total,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    nv = nv - rd;
    vatacc = VATCoderw.PayPurchVATAcc;
    if (blank(vatacc)) then begin
      vatacc = APAccRec.VATAcc;
    end;
    if (GetAccName(vatacc,tstr,60)==false) then begin
      res = 2172;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",vatacc,"",dc2,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,vatacc,"",AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsum,false,taccnumber,"","");
    if (GetAccName(VATCoderw.PurchVATAcc,tstr,60)==false) then begin
      res = 2171;
      goto LMakeTransFromCLIn;
    end;
    if (CheckTTRPerRow("CLInVc",VATCoderw.PurchVATAcc,"",dc1,taccnumber,0)) then begin end;      
    AddEuroTrRow(gTRp,VATCoderw.PurchVATAcc,"",AddVATCodeToVATAccRows(CLInp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsum,false,taccnumber,"","");
  end;
    
  AddTransAutoTransRows(gTRp);
  TRSumup(gTRp,nilv);
  res = 0;
LMakeTransFromCLIn:;
  MakeTransFromCLIn = res;
  RETURN;
END;
