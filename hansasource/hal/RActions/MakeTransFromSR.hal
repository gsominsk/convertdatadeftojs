external function Integer CheckObjs(string,string,var string);
external function string 60 AddObjectToObjectList(string,string);
external function roundmode DefaultRoundMode();
external procedure GetConsigmentStockAcc(string,string,var string);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external procedure CombineStructure(var record SHVc);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 255 FindINObjects(string,string);
external procedure AddTransAutoTransRows(record TRVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetITStockAcc(string,var string);
external procedure GetITCostAcc(string,var string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean TransInFiscal(Date);

procedure GetSRVarAcc(Integer ItemGroupAccounts,string srvaracc,string rowsrvaracc,string itgroup,string arsrvaracc,var string res)
begin
  res = rowsrvaracc;
  if (blank(res)) then begin
    res = srvaracc;
  end;
  if (nonblank(res)) then begin
    goto LGetSRVarAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
//    GetITSRVarAcc(itgroup,res);
    if (nonblank(res)) then begin
      goto LGetSRVarAcc;
    end;
  end;
  res = arsrvaracc;
  if (nonblank(res)) then begin
    goto LGetSRVarAcc;
  end;
LGetSRVarAcc:;  
  return;
end;

procedure GetSRStockAcc(Integer ItemGroupAccounts,string rowlocation,string location,string MainStock,string itgroup,string arstockacc,var string res,var string locobjstr)
begin
  record LocationVc Locr;

  res = "";
  locobjstr = "";
  Locr.Code = rowlocation;
  if (blank(Locr.Code)) then begin
    Locr.Code = location;
  end;
  if (blank(Locr.Code)) then begin
    Locr.Code = MainStock;
  end;
  if (ReadFirstMain(Locr,1,true)) then begin
    if (nonblank(Locr.StockAcc)) then begin
      res = Locr.StockAcc;
    end;  
    locobjstr = Locr.Objects; 
  end;
  if (nonblank(res)) then begin
    goto LGetSRStockAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITStockAcc(itgroup,res);
    if (nonblank(res)) then begin
      goto LGetSRStockAcc;
    end;
  end;
  res = arstockacc;
  if (nonblank(res)) then begin
    goto LGetSRStockAcc;
  end;
LGetSRStockAcc:;  
  return;
end;

function Integer AddSRVarRow(record TRVc gTRp,record MainStockBlock MSb,record CostAccBlock CAb,record AccBlock ARAccb,record INVc INr,
                              val baserate1,val baserate2,
                              record SRVc SRp,row SRVc SRrw,Boolean dc1,Boolean dc2,Boolean sumupf,var val TotSum,
                              var string errorfield)
begin
  Integer res;
  val rs,newrs;
  string 255 objstr,stockobjstr,tstr,locobjstr,errstr;
  string 10 srvaracc,stockacc,taccnumber;
  record APAccBlock APAccb;
  
  BlockLoad(APAccb);
  rs = SRrw.Qty*SRrw.FIFO;
  rs = Round(rs,DefaultRoundMode);
  newrs = SRrw.Qty*SRrw.NewFIFO;
  newrs = Round(newrs,DefaultRoundMode);

  objstr = "";
  if (INr.ItemType!=1) then begin 
    if (CAb.CostAccForNonStocked==0) then begin
      goto LAddSRVarRow;
    end;
  end;
  tstr = INr.Name;
  if (APAccb.SkipObjectsOnVIFromHeader==0) then begin
    objstr = AddObjectToObjectList(objstr,SRp.Objects);
  end;
  objstr = AddObjectToObjectList(objstr,SRrw.Objects);
  GetSRStockAcc(CAb.ItemGroupAccounts,SRrw.Location,SRp.Location,MSb.MainStock,INr.Group,ARAccb.StockAcc,stockacc,locobjstr);
  GetConsigmentStockAcc(SRrw.ArtCode,SRrw.SerialNr,stockacc);
  
  if (GetAccName(stockacc,tstr,60)==false) then begin
    res = 2120;
    goto LAddSRVarRow;
  end;
  if (CAb.ObjOnStock==0) then begin objstr = ""; end;
  stockobjstr = AddObjectToObjectList(objstr,locobjstr);
  res = CheckObjs(stockacc,stockobjstr,errstr);
  if (res!=0) then begin
    goto LAddSRVarRow;
  end;
  if (CheckTTRPerRow("SRVc",stockacc,stockobjstr,dc2,taccnumber,1)) then begin end;      
  AddEuroTrRow(gTRp,stockacc,stockobjstr,"",tstr,rs,baserate1,baserate2,sumupf,dc2,TotSum,false,taccnumber,"","");

  if (CheckTTRPerRow("SRVc",stockacc,stockobjstr,dc1,taccnumber,1)) then begin end;      
  AddEuroTrRow(gTRp,stockacc,stockobjstr,"",tstr,newrs,baserate1,baserate2,sumupf,dc1,TotSum,false,taccnumber,"","");

  GetSRVarAcc(CAb.ItemGroupAccounts,SRp.SRVarAcc,SRrw.SRVarAcc,INr.Group,ARAccb.SRVarAcc,srvaracc);
  if (GetAccName(srvaracc,tstr,60)==false) then begin
    res = 20086;
    goto LAddSRVarRow;
  end;
  if ((newrs-rs)>0) then begin
    if (CheckTTRPerRow("SRVc",srvaracc,objstr,dc1,taccnumber,1)) then begin end;      
    AddEuroTrRow(gTRp,srvaracc,objstr,"",tstr,newrs-rs,baserate1,baserate2,sumupf,dc2,TotSum,false,taccnumber,"","");
  end else begin
    if (CheckTTRPerRow("SRVc",srvaracc,objstr,dc1,taccnumber,1)) then begin end;      
    AddEuroTrRow(gTRp,srvaracc,objstr,"",tstr,rs-newrs,baserate1,baserate2,sumupf,dc1,TotSum,false,taccnumber,"","");
  end;
LAddSRVarRow:;      
  AddSRVarRow = res;      
  return;
end;

global
function Integer MakeTransFromSR(record TRVc gTRp,record SRVc SRp,Boolean rpt,var string errorfield,var Integer errorrow)
begin
  Integer res;
  record MainStockBlock MSb;
  record CostAccBlock CAb;
  record TRGenBlock TRGb;
  record AccBlock ARAccb;
  record LocationVc Locr;
  record INVc INr;
  record TRVc locTRr;
  row SRVc SRrw;
  Integer i,rwcnt;
  Integer error;
  string 255 tstr;
  val t1,TotSum;
  val baserate1,baserate2,temp;
  Boolean dc1,dc2;
  Boolean sumupf;
  string 20 curncy;
  transaction string 255 gRuniningMaint;
          
  BlockLoad(MSb);
  BlockLoad(CAb);
  BlockLoad(ARAccb);
  BlockLoad(TRGb);
  sumupf = true;
  errorfield = "SerNr";
  errorrow = -1;
  sumupf = true;
  if (CAb.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGb.SRGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromSR;
    end;
  end;  
  if (rpt==false) then begin
    if ((nonblankdate(TRGb.SRStartDate)) and
        (SRp.TransDate<TRGb.SRStartDate)) then begin
      res = 0;
      goto LMakeTransFromSR;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = SRYc;
    gTRp.Number = SRp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    locTRr.IntYc = gTRp.IntYc;
    locTRr.Number = gTRp.Number;
    if (ReadFirstMain(locTRr,0,true)) then begin
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":  ;
        otherwise
          res = 1032;
          goto LMakeTransFromSR;
      end;
    end; 
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = SRp.TransDate;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromSR;
  end;
  curncy = "";
  GetFullCurncyRate(curncy,gTRp.TransDate,temp,temp,temp,baserate1,baserate2);
  gTRp.Comment = SRp.Comment;
  TotSum = 0;
  dc1 = true;
  dc2 = false;
  rwcnt = MatRowCnt(SRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRp,i,SRrw);
    if (ReadFirstItem(SRrw.ArtCode,INr,true,true)==false) then begin
      INr.Objects = "";
      tstr = "";
    end;  
    error = AddSRVarRow(gTRp,MSb,CAb,ARAccb,INr,baserate1,baserate2,SRp,SRrw,dc1,dc2,sumupf,TotSum,errorfield);
    if (error!=0) then begin
      errorrow = i;
      res = error;
      goto LMakeTransFromSR;
    end;    
  end;
  res = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromSR;
  end;
  AddTransAutoTransRows(gTRp);
LMakeTransFromSR:;
  MakeTransFromSR = res;
  return;
end;
