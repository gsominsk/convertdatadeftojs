external function Boolean HasSalesman();
external updating procedure CheckCreateSetDefaultCustomCode(var record IVVc);
external function Boolean IsEnterprise();
external updating function LongInt IVVcSVNFiscalization(Boolean,var record IVVc,var string);
external function Boolean AssignOfficialSerNr();
external function Boolean LegalRecordNumberInRange(string,string,string);
external function string 255 GetLegalInvoiceNrString(row LegalInvNrBlock,string);
external procedure NextM4Number(string,var string);
external function string 255 UpdateOfficialSerNrSerie(Integer,Integer,Integer,string,boolean);
external function Boolean CheckCreditInvTotOnOrigIV(record IVVc,var string,var LongInt);
external function Boolean OfficialSerialNrCanBeBlank(string,string,Integer,string,string,string,Date,Integer,Integer);
external function integer CheckAddressForLocalisation(string,string,string,string,string,string,string,string,string,string,string,var string);
external function string 255 FindTaxAuthIDDosageKey(string,record IVVc);
external function string 255 StripCharacter(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsDigit(string);
external function Boolean IsCapitalLetter(string); 
external function Boolean FindTheUser(var record UserVc);
external function Integer ERecordStatus(string,string,LongInt,string,var string);
external procedure SubCashRows_IVVc(record IVVc,Boolean,var val,var val);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external function Boolean TestNextOfficialSerialNr_IVVc(row LegalInvNrBlock,string,record IVVc,Boolean);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure FindNextIVVcOfficialSerialNr(var record IVVc);
external function Boolean ValidInvoiceDataForVATLaw2(record IVVc,record CUVc,var Integer,var string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function string 255 CurDrawerCode(string);
external updating procedure UpdateTrans_Stock(record TRVc);
external function Boolean VIVc_PasteVECode(var record VIVc,Integer,Boolean,Boolean,var string);
external function Integer TestCreditNoteTerms(record IVVc,var string);
external function Boolean IVTestCredMan(record IVVc,var Integer);
external updating function Boolean BA_IVMinMarkupWarning(record IVVc,var Integer);
external function string 50 NextLegalSerNr(string,LongInt,Date,string,string,string);
external procedure GetARAcc(string,var string);
external function Integer IVVcRecordCheckRows(record IVVc,record IVVc,record CUVc,record ORVc,record ModuleBlock,record MainStockBlock,record AccBlock,Boolean,Boolean,LongInt,var val);
external function Boolean CanOKStockRecord(var Integer);
external function Boolean DisallowPriceLowerCost_IVVc(record IVVc);
external function Boolean ValidEInvoiceData3(record IVVc,record CUVc,var LongInt,var string,var string);
external function Integer CheckCLInAmount(LongInt,val,val,string);
external updating procedure AddTTrans_IVVc(record TRVc,record IVVc);
external function Integer InString2(string,string);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external procedure GetSerRange(string,LongInt,var LongInt,var LongInt);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean RequireOpenSession(string);
external Procedure GetPayType(String,Var Integer);
external procedure IVSumup(var record IVVc,Boolean);
external updating function LongInt PUFromCreditNote(var record IVVc,Boolean);
external function Integer IsUnOKAllowed_IVVc(record IVVc);
external function Boolean CheckPDExists(string);
external function Boolean GetPMgentrans(string);
external function Integer PMCheckType(string,var string,var string);
external function LongInt GetCurUserLastNr(string);
external function Boolean CLInforIVRecordExists(LongInt,string,var LongInt);
external updating function Boolean SaveSim(record SMVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Integer MakeTransFromIV(var record TRVc,var record SMVc,record IVVc,Boolean,Boolean);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean SerNrTestIVVc(LongInt,Date,var Boolean);
external function Integer CheckObjs(string,string,var string);
external function Boolean RecordSupportExists(string,string,LongInt);
external function Boolean Date2Test(string,Date,string,Integer);
external function Integer GetPayDealType(string,var LongInt);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Boolean CurncyCodeRegistered(string);
external function Boolean IsControlAccount(string,Boolean,Boolean);
external function Integer CashSerNumberTest(string,val,string,LongInt,var Boolean);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external procedure IVUpdateFIFO(record IVVc,Boolean);
external function Integer GetCreditedInvoiceType(record IVVc);
external function Boolean IsSessionOpen(string,string,Date,Time);
external function boolean ShouldSendArgEinvoice(record IVVc);
external function boolean ArgEInvoiceBeingSentRemote(longint,string,Boolean);
external function boolean RoyaltyRecordExistsForCN(record IVVc);
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasIntegratedNL();
external updating function Boolean DoXMLExport_IVVc(var record IVVc);

function Boolean CheckIfNextLegalSerNr(LongInt curivnr,string OfficialSerNr,Date invdate,record CUVc CUr)
begin
  Boolean res;
  Boolean testf;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  string 255 tstr;
  record OffSerNrIVVc OffSNIVr;
  LongInt offnr;

  OffSNIVr.IVNr = curivnr;
  if (ReadFirstKey("MainKey",OffSNIVr,1,true)) then begin
    if (OffSNIVr.OfficialSerNr==OfficialSerNr) then begin
      res = true;
      goto LCheckIfNextLegalSerNr;
    end;
  end;
  res = false;
  BlockLoad(LINrb);
  rwcnt = MatRowCnt(LINrb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LINrb,i,LINrbrw);
    testf = true;
    if (invdate<LINrbrw.PurchDate) then begin testf = false; end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(CUr.Classification)) then begin
        if (SetInSet(LINrbrw.CClass,CUr.Classification)==false) then begin testf = false; end;
      end;
    end;
    if (testf) then begin
/*    
      tstr = NextLegalSerNr(curivnr,invdate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
      if (Left(OfficialSerNr,len(LINrbrw.Serie))==LINrbrw.Serie) then begin
        if (tstr==OfficialSerNr) then begin
          res = true;
          goto LCheckIfNextLegalSerNr;
        end;
      end;
*/      
      if (Left(OfficialSerNr,len(LINrbrw.Serie))==LINrbrw.Serie) then begin
        offnr = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr)-len(LINrbrw.Serie)));
        if (offnr>=StringToLongInt(LINrbrw.TSerStart)) and (offnr<=StringToLongInt(LINrbrw.TSerEnd)) then begin
          OffSNIVr.IVNr = OfficialSerNr;
          if (ReadFirstKey("MainKey",OffSNIVr,1,true)==false) then begin
            res = true;
            goto LCheckIfNextLegalSerNr;
          end;
        end;
      end;
    end;
  end;
LCheckIfNextLegalSerNr:;  
  CheckIfNextLegalSerNr = res;
  return;
end;

updating function Integer ConnectCreditNotetoVI(var record IVVc IVr)
begin
  Integer res;
  record VIVc VIr;
  record AccBlock ARb;
  string 255 vewarn;

  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.CredInv>0) then begin
    BlockLoad(ARb);
    if (ARb.ConnectCreditNotetoVI!=0) then begin
      res = 1086;
      RecordNew(VIr);
      VIr.VECode = IVr.CustCode;
      VIVc_PasteVECode(VIr,0,false,true,vewarn);
      VIr.VEName = IVr.Addr0;
      VIr.CurncyCode = IVr.CurncyCode;
      VIr.FrRate = IVr.FrRate;
      VIr.BaseRate1 = IVr.BaseRate1;
      VIr.BaseRate2 = IVr.BaseRate2;
      VIr.ToRateB1 = IVr.ToRateB1;
      VIr.ToRateB2 = IVr.ToRateB2;
      VIr.SerNr = NextSerNr("VIVc",VIr.TransDate,-1,false,"");            
      VIr.OKFlag = 1;
      if (RecordStore(VIr,false)) then begin
        IVr.VINr = VIr.SerNr;
        res = 0;
      end;
    end;
  end;
  ConnectCreditNotetoVI = res;
  return; 
end;

global
function Integer VerifySalesmen(string salesmen,var string salesman)
begin
  Integer res;
  Integer pos;
  record UserVc Userr;
  
  res = 0;
  if (HasSalesman==false) then begin
    goto LVerifySalesmen;
  end;
  ExtractObj(salesmen,pos,salesman);
  while (nonblank(salesman)) begin
    Userr.Code = salesman;
    if (FindTheUser(Userr)==false) then begin
      res = 20170;
      goto LVerifySalesmen;
    end;
    if (Userr.TerminatedFlag!=0) then begin
      res = 22070;
      goto LVerifySalesmen;
    end;
    if (Userr.Closed!=0) then begin
      res = 22070;
      goto LVerifySalesmen;
    end;
    ExtractObj(salesmen,pos,salesman);
  end;
LVerifySalesmen:;  
  VerifySalesmen = res;  
  return; 
end;

function Boolean CheckGlobalTransportNr(string GlobalTransportNr)
begin
  Boolean res;
  Array string 255 aGlobalTransportNr;
  Integer lencnt,i,arrcnt,slashcnt,spacecnt,charsafterslash;
  
  res = true;
  lencnt = len(GlobalTransportNr);
  arrcnt = 0;
  slashcnt = 0;
  spacecnt = 0;
  charsafterslash = 0;
  for (i=0;i<lencnt;i=i+1) begin
    aGlobalTransportNr[arrcnt] = Mid(GlobalTransportNr,i,1);
    if (slashcnt==1) then begin
      charsafterslash = 1;
    end;
    if (IsDigit(aGlobalTransportNr[arrcnt])==false and (IsCapitalLetter(aGlobalTransportNr[arrcnt])==false)) then begin
      if (aGlobalTransportNr[arrcnt]=="/") then begin
        slashcnt = slashcnt + 1;
        if (slashcnt>1) then begin
          res = false;
          goto LEnd;
        end;
      end;
      if (aGlobalTransportNr[arrcnt]==" ") then begin
        if (i==0) then begin 
          res = false;
          goto LEnd;
        end;
        if (slashcnt==1) then begin 
          res = false;
          goto LEnd;
        end;
        spacecnt = spacecnt + 1;
        if (spacecnt>1) then begin
          res = false;
          goto LEnd;
        end;
      end;
    end;
    arrcnt = arrcnt + 1;
  end;
  if (slashcnt==0 or charsafterslash==0) then begin
    res = false;
  end;
LEnd:;
  
  CheckGlobalTransportNr = res;
  return;
end;

global
updating function LongInt IVVcRecordCheck(record IVVc IVp,record IVVc IV2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  row IVVc IVrw;
  row IVVc IV2rw;
  record IVVc locIVr;
  record CUVc CUr;
  record CUVc BranchCUr;
  record AccVc Accr;
  record TRVc TRr;
  record CreditLimitBlock CLb;
  record SRBlock SRRec;
  record AccBlock ARAccb;
  record MainStockBlock MSb;
  record IVOfficialSerBlock IOSTr;
  record MainCLBlock MCLb;
  record ORVc ORr;
  Boolean testf,test2f,FiscalPrf,nousersernr;
  Boolean transf,gentrans,check,unokf,controlaccf;
  Boolean lightFlag;
  Integer errcode,j,cnt;
  Integer i,rwcnt,cashres,creditedinvtype;
  LongInt oldnr,newnr,sernr;
  val bal,limit,prev,quant,prevsn;
  val prepaysum,t;
  string 255 tstr,tstr2,location,errstr,oldOfficialSerNr,c;
  LongInt dummyl,errcode2;  
  record TRVc gTRp;
  record SMVc gSMp;
  LongInt clin,l;
  Integer curcomp;
  val cash;
  record CreditCardVc CreditCardr;
  LongInt serstart,serend;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  row LegalInvNrBlock LINrb2rw;
  record PDVc PDr;
  record ModuleBlock Ob;
  record ARVc ARr;
  Boolean norminv,credinv,cashinv;
  transaction string 255 gRuniningMaint;
  record LoyaltyCardVc LoyaltyCardr;
  Date td;
  val sum4,basesum4;
  Boolean limitdaysf;
  record InternetEnablerBlock IEb;
  record EInvoiceBlock EIb;
  record CashierDefBlock CDb;
  record INVc INr;
  transaction Boolean gDoNotTestIfRecordExists;
  record BrazilEInvTypeVc BEInvTyper;
  record CYBlock CYb;
  Boolean TouchScreenFinishButtonf;

  if (long4==3) then begin TouchScreenFinishButtonf = true; end;
  res = 0;
  curcomp = CurrentCompany;    
  oldnr = IVp.SerNr;
  oldOfficialSerNr = IVp.OfficialSerNr;
  if (IVp.OKFlag==0) then begin
    if (stat==Rs_update) then begin
      if (IV2p.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_IVVc(IVp);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"TransDate");      
      res = -1; 
    end;
    goto L99;
  end;
  if ((ProgramType==typFirstOffice) or 
      (ProgramType==typFirstOfficeSmall) 
/* we want all checks to be done for books
      (ProgramType==typBooks) or 
      (ProgramType==typBooksPro) or 
      (ProgramType==typBooksProAdv) or 
      (ProgramType==typBooksJobCost) or 
      (ProgramType==typBooksAcc) or 
      (ProgramType==typBooksPOS)*/) then begin //?? CHECKBOOKSFUNC
    lightFlag = true;
  end;  
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  if (stat==Rs_update) then begin
    if (IVp.SerNr<=0) and (IV2p.OKFlag==0) then begin
      IVp.SerNr = IV2p.SerNr;
    end;
  end;    
  gentrans = true;
  if ((IV2p.OKFlag==1) and (stat==Rs_update)) then begin goto L999; end;//?  
  transf = false;
  if ((IVp.OKFlag==1) or (IVp.OKFlag==6)) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (IV2p.OKFlag==0) then begin transf = true; end;
    end;  
  end;

  BlockLoad(ARAccb);
  BlockLoad(MSb);
  BlockLoad(SRRec);
  BlockLoad(CLb);
  BlockLoad(MCLb);
  BlockLoad(Ob);
  BlockLoad(CDb);
  BlockLoad(CYb);
  if (check) then begin  
    switch (stat) begin
      case Rs_update:
        if (IVp.OKFlag!=0) and (IV2p.OKFlag==0) then begin
          IVp.RegDate = CurrentDate;
          IVp.RegTime = CurrentTime;
        end;
      otherwise
        if (IVp.OKFlag!=0) then begin
          IVp.RegDate = CurrentDate;
          IVp.RegTime = CurrentTime;
        end;
    end;
  end;
  if (IsStandardProduct) then begin 
    if (blank(IVp.CustCode)) then begin
      CheckCreateSetDefaultCustomCode(IVp);  
    end; 
  end; 
  testf = true;
  if (blank(IVp.CustCode)) then begin
    if (IsStandardProduct) then begin
      if (IVp.OKFlag!=0) then begin
        if (HasLocalization("PRT")==false) then begin
          testf = false;
        end;
      end else begin
        testf = false;
      end;
    end;
  end else begin
    testf = false;
  end;
  if (testf) then begin
    RecordCheckError(1125,"",-1,"CustCode");      
    res = -1; 
    goto L99;
  end;
  if (check) then begin  
  if (CheckPDExists(IVp.PayDeal)==false) then begin
    RecordCheckError(1256,"",-1,"PayDeal");      
    res = -1;
    goto L99;        
  end; 
  if (IVp.PayDate<IVp.InvDate) then begin
    RecordCheckError(22118,": " & USetStr(7801),-1,"PayDate");      
    res = -1; 
    goto L99;
  end;  
  if (CDb.RequireReturnReason!=0) then begin
    if (IVp.OKFlag!=0) and (IVp.Sum4<0) then begin
      if (blank(IVp.InvComment)) then begin
        RecordCheckError(21350,"",-1,"InvComment");      
        res = -1;
        goto L99;
      end;
    end;
  end;
  if (IVp.InvType==kInvoiceTypeEmployee) then begin
    RecordCheckError(1958,"",-1,"PayDeal");      
    res = -1;
    goto L99;        
  end;
  if (MCLb.CashCollection!=0) then begin
    if (CLInforIVRecordExists(IVp.SerNr,"IVVc",clin)) then begin
      errcode = CheckCLInAmount(clin,IVp.Sum4,IVp.BaseSum4,IVp.CurncyCode);
      if (errcode!=0) then begin
        RecordCheckError(errcode,clin,-1,"Sum4");      
        res = -1;
        goto L99;        
      end;
    end;  
    if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
      if (MCLb.PMControl!=0) then begin
        if (CheckPDExists(IVp.PayDeal)) then begin
          RecordCheckError(1277,"",-1,"PayDeal");      
          res = -1;
          goto L99;        
        end; 
        if (PMCheckType(IVp.PayDeal,tstr,tstr)==5) then begin
          if (GetPMgentrans(IVp.PayDeal)) then begin
            RecordCheckError(1277,"",-1,"PayDeal");      
            res = -1;
            goto L99;        
          end;
        end;
      end;
    end;
/*        
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (GetCreditedInvoiceType(IVp)==2) then begin
        MessageBox(2076,"");
      end;
    end;    
*/    
  end;  
  end;  
  if (check) then begin  
  if (IVp.OrderNr>0) then begin
    ORr.SerNr = IVp.OrderNr;
    ReadFIrstMain(ORr,1,true);
  end;
  if (IVp.InvType==kInvoiceTypeDownpayment) then begin
    PDr.Code = IVp.PayDeal;
    if (ReadFirstMain(PDr,1,true)) then begin
      if (PDr.PDType==kInvoiceTypeCash or PDr.PDType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
        RecordCheckError(1958,"",-1,"PayDeal");      
        res = -1;
        goto L99;        
      end;  
    end;
    if (IVp.OrderNr>0) then begin
//        if (((ORr.DownPaySent-ORr.DownPayRedcd) + IVp.Sum4 - IV2p.Sum4)>ORr.Sum4) then begin
      if (ORr.Sum4-((ORr.DownPaySent-ORr.DownPayRedcd) - IV2p.Sum4)<0) then begin
        RecordCheckError(20406,ORr.Sum4-((ORr.DownPaySent-ORr.DownPayRedcd) - IV2p.Sum4),-1,"Sum4");  
        res = -1;
        goto L99;
      end;
    end;
  end;
  end;
  oldnr = IVp.SerNr;
  if (check) then begin  
    GetPayType(IVp.PayDeal,i);    
    if (i==3) then begin      
      if blank(IVp.CreditCard) then begin
        RecordCheckError(1058,IVp.CreditCard,-1,"CreditCard");  
        res = -1;
        goto L99;
      end else begin
        CreditCardr.CreditCardNr= IVp.CreditCard;
        if not ReadFirstMain(CreditCardr,1,true) then begin
          RecordCheckError(1058,IVp.CreditCard,-1,"CreditCard");  
          res = -1;
          goto L99;
        end;
      end;
    end;
  end;
  rwcnt = MatRowCnt(IVp);
  if ((IVp.OKFlag!=0 or TouchScreenFinishButtonf) and ((rwcnt==0) or (blank(IVp.Sum4)))) then begin
    RecordCheckError(1030,"",0,"ArtCode");      
    res = -1;
    goto L99;
  end;
  if (nonblank(IVp.CustCode)) then begin
    CUr.Code = IVp.CustCode;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      if (IVp.CustCode<>"") then begin
        RecordCheckError(25601,IVp.CustCode,-1,"CustCode");
      end else begin
        RecordCheckError(25600,IVp.CustCode,-1,"CustCode");
      end;
      res = -1; 
      goto L99;
    end;
  end;
  if (check) then begin  
  if ((stat==Rs_insert) or ((stat==Rs_update) and (IV2p.OKFlag==0))) then begin
    if (IVp.OKFlag==1 and blank(IVp.CAE)) then begin
      if (BA_IVMinMarkupWarning(IVp,i)) then begin
        if (UserCanAction("DisallowSaleBelowGP",false)) then begin
          RecordCheckError(22050,"",i,"Sum");      
          res = -1;
          goto L99;
        end;
      end;
    end;
  end;
  end;
  if (IVp.SerNr<=0) then begin
    nousersernr = false;
    
    if ((IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) and (SRRec.LastCredInvNr!=-1))  then begin
      newnr = SRRec.LastCredInvNr;
      nousersernr = true;
      if (newnr==-1) then begin
        newnr = GetCurUserLastNr("IVVc");
        nousersernr = false;
      end;
    end else begin
      if ((IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (SRRec.LastCashInvNr!=-1))  then begin
        newnr = SRRec.LastCashInvNr;
        nousersernr = true;
        if (newnr==-1) then begin
          newnr = GetCurUserLastNr("IVVc");
          nousersernr = false;
        end;
      end else begin
        newnr = GetCurUserLastNr("IVVc");
        if (newnr==-1) then begin
          newnr = SRRec.LastInvNr;
        end;
      end;
    end;
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,nousersernr,IVp.LangCode);
  end;
  
  if (IVp.SerNr<0) then begin
    RecordCheckError(1033,"",-1,"SerNr");
    res = -1;
    goto L99;
  end;
  if (check) then begin  
  if (HasLocalization("BOL")) and  (ARAccb.CheckDosageKey==1) then begin
    if blank(FindTaxAuthIDDosageKey(IVp.TaxAuthID,IVp)) then begin 
      RecordCheckError(26214,"",-1,"SerNr");  
      res = -1;
      goto L99;
    end;
  end;
  if ((ARAccb.ChronologyforInvNo!=0) and (stat==Rs_insert)) then begin
    GetSerRange("IVVc",IVp.SerNr,serstart,serend);
    if (serend!=-1) then begin    
      locIVr.SerNr = serend;
    end else begin
      locIVr.SerNr = IVp.SerNr;
    end;
    if (CountRecords("IVVc")>0) then begin
      ReadLastKey("SerNr",locIVr,1,false);
      if (true) then begin
        if ((locIVr.SerNr>0) and ((locIVr.SerNr>=serstart) or (serstart==-1))) then begin
          if ((locIVr.SerNr+1)!=IVp.SerNr) then begin
            oldnr = locIVr.SerNr+1;
            RecordCheckError(1034,"",-1,"SerNr");  
            res = -1;
            goto L99;
          end;
        end;
      end;    
    end;
  end;  
  if (blank(IVp.BranchID))  then begin
    IVp.BranchID = CurBranchID;
  end;
  if (nonblank(IVp.BranchID))  then begin
    BranchCUr.Code = IVp.BranchID;
    if (ReadFirstMain(BranchCUr,1,true)==false) then begin
      RecordCheckError(36132,IVp.BranchID,-1,"BranchID");
      res = -1; 
      goto L99;
    end;
  end;
  
  BlockLoad(LINrb);  
  if (nonblank(IVp.OfficialSerNr)) and ((MatRowCnt(LINrb)>0) or (HasLocalization("ARG,HRV,PRT,SVN"))) then begin
    GetLegalInvNrRow(IVp.OfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          IVp.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        IVp.OfficialSerNr = "";
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          if (HasLocalization("POL")==false) then begin
            IVp.OfficialSerNr = "";
          end;
        end;
      case kLegalInvNrSelectionTypeAtSendingERecord:
        if (HasLocalization("ARG")) then begin
          if (LINrbrw.OutArgEInvoices==kOutArgEInvoicesSend) then begin
            if (blank(IVp.CAEExpiry)) then begin
              IVp.OfficialSerNr = "";
            end;
          end;
        end;
    end;
  end;
  if (blank(IVp.OfficialSerNr)) then begin
    if (HasLocalization("BRA")) then begin
      RecordCheckError(2210,"",-1,"OfficialSerNr");
      res = -1;
      goto L99;
    end;
    if (HasLocalization("POL")) then begin
      if (IsStandardProduct) then begin
        FindNextIVVcOfficialSerialNr(IVp);
        if (blank(IVp.OfficialSerNr)) then begin
          locIVr.OfficialSerNr = "ZZZZZZZZZZZZZZZZZZZ";
          if (ReadLastKey("OfficialSerNr",locIVr,1,false)) then begin
            if (blank(IVp.OfficialSerNr)) then begin
              NextM4Number(locIVr.OfficialSerNr,IVp.OfficialSerNr);
            end;
          end;
        end;
        if (blank(IVp.OfficialSerNr)) then begin
          IVp.OfficialSerNr = "1";
        end;
      end;
    end;
    if (HasLocalization("PRT")) then begin
      if (IVp.Status==kRecordStatusInvalidated or IVp.Status==kRecordStatusLost or IVp.Status==kRecordStatusNotUsed) then begin
        RecordCheckError(34430,"",-1,"Status");
        res = -1;
        goto L99;
      end;
      if (IVp.Status==kRecordStatusManual or IVp.Status==kRecordStatusRecovered) then begin
        if (transf) then begin
          if (blank(IVp.OfficialSerNr)) then begin
            RecordCheckError(2210,"",-1,"OfficialSerNr");
            res = -1;
            goto L99;
          end;
        end;
      end else begin
        FindNextIVVcOfficialSerialNr(IVp);
        if (blank(IVp.OfficialSerNr)) then begin
          if (transf) then begin
            RecordCheckError(2210,"",-1,"OfficialSerNr");
            res = -1;
            goto L99;
          end else begin
            if (OfficialSerialNrCanBeBlank("IVVc",CUr.Classification,IVp.OKFlag,IVp.OfficialSerNr,IVp.BranchID,IVp.MachineName,IVp.InvDate,IVp.InvType,IVp.Status)==false) then begin
              RecordCheckError(2210,"",-1,"OfficialSerNr");
              res = -1;
              goto L99;
            end;
          end;
        end;
      end;
    end;
    if (HasLocalization("HRV,SVN")) then begin
//      if (IVp.FiscalFlag!=0) then begin // Have to have Official Serial numbers assigned for non-fiscal invoices as well.
        FindNextIVVcOfficialSerialNr(IVp);
//      end;
    end;
    if (HasLocalization("AGO")) then begin
      FindNextIVVcOfficialSerialNr(IVp);
      if (blank(IVp.OfficialSerNr)) then begin
        if (transf) then begin
          RecordCheckError(2210,"",-1,"OfficialSerNr");
          res = -1;
          goto L99;
        end else begin
          if (OfficialSerialNrCanBeBlank("IVVc",CUr.Classification,IVp.OKFlag,IVp.OfficialSerNr,IVp.BranchID,IVp.MachineName,IVp.InvDate,IVp.InvType,IVp.Status)==false) then begin
            RecordCheckError(2210,"",-1,"OfficialSerNr");
            res = -1;
            goto L99;
          end;
        end;
      end;
    end;
    if (HasLocalization("ARG")) then begin
      if (AssignOfficialSerNr==false) then begin
        FindNextIVVcOfficialSerialNr(IVp);
      end;
    end;
  end;
  if (ValidateOfficialSerialNrChronology("IVVc",IVp.OfficialSerNr,IVp.SerNr,IVp.InvDate,td)==false) then begin
    RecordCheckError(26201," " & td,-1,"InvDate");  
    res = -1;
    goto L99;
  end;  
  if (nonblank(IVp.OfficialSerNr)) then begin    
    BlockLoad(IOSTr);
    if (nonblank(IOSTr.From)) then begin
      if (IVp.OfficialSerNr<IOSTr.From) then begin
        RecordCheckError(1557,"",-1,"OfficialSerNr");      
        res = -1;
        goto L99;
      end;
    end;
    if (nonblank(IOSTr.To)) then begin
      if (IVp.OfficialSerNr>IOSTr.To) then begin
        RecordCheckError(1557,"",-1,"OfficialSerNr");      
        res = -1;
        goto L99;
      end;
    end;
    if (HasLocalization("ARG")) then begin
      if (AssignOfficialSerNr==false) then begin
        RecordCopy(locIVr,IVp);
        locIVr.SerNr = -1;
        locIVr.OfficialSerNr = "";
        FindNextIVVcOfficialSerialNr(locIVr);
        GetLegalInvNrRow(locIVr.OfficialSerNr,LINrb2rw);
        GetLegalInvNrRow(IVp.OfficialSerNr,LINrbrw);
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
          if (LINrb2rw.Serie!=LINrbrw.Serie) then begin
            RecordCheckError(1557,"",-1,"OfficialSerNr");      
            res = -1;
            goto L99;
          end;
          tstr = GetLegalInvoiceNrString(LINrbrw,IVp.OfficialSerNr);
          if (LegalRecordNumberInRange(tstr,LINrb2rw.TSerStart,LINrb2rw.TSerEnd)==false) then begin
            RecordCheckError(1557,"",-1,"OfficialSerNr");
            res = -1;
            goto L99;
          end;
        end;
        if (CheckIfNextLegalSerNr(IVp.SerNr,IVp.OfficialSerNr,IVp.TransDate,CUr)==false) then begin
          RecordCheckError(1557,"",-1,"OfficialSerNr");      
          res = -1;
          goto L99;
        end;
      end;
      switch (LINrbrw.OutArgEInvoices) begin
        case kOutArgEInvoicesSendWithCAEA:
          BlockLoad(EIb);
          if (EIb.ArgSelfBilling!=0) then begin
            if (nonblankdate(EIb.ScdLastFortnightCAEAStartDate)) and (nonblankdate(EIb.ScdLastFortnightCAEAExpiryDate)) then begin
              if (DateInRange(IVp.InvDate,EIb.ScdLastFortnightCAEAStartDate,EIb.ScdLastFortnightCAEAExpiryDate)) then begin
                IVp.CAEAStartDate = EIb.ScdLastFortnightCAEAStartDate;
                IVp.CAEAExpiryDate = EIb.ScdLastFortnightCAEAExpiryDate;
                IVp.CAE = EIb.ScdLastFortnightCAEA;
                IVp.CAEAFlag = 1;
              end;
            end;
            if (nonblankdate(EIb.LastFortnightCAEAStartDate)) and (nonblankdate(EIb.LastFortnightCAEAExpiryDate)) then begin
              if (DateInRange(IVp.InvDate,EIb.LastFortnightCAEAStartDate,EIb.LastFortnightCAEAExpiryDate)) then begin
                IVp.CAEAStartDate = EIb.LastFortnightCAEAStartDate;
                IVp.CAEAExpiryDate = EIb.LastFortnightCAEAExpiryDate;
                IVp.CAE = EIb.LastFortnightCAEA;
                IVp.CAEAFlag = 1;
              end;
            end;
            if (nonblankdate(EIb.CAEAStartDate)) and (nonblankdate(EIb.CAEAExpiryDate)) then begin
              if (DateInRange(IVp.InvDate,EIb.CAEAStartDate,EIb.CAEAExpiryDate)) then begin
                IVp.CAEAStartDate = EIb.CAEAStartDate;
                IVp.CAEAExpiryDate = EIb.CAEAExpiryDate;
                IVp.CAE = EIb.CAEA;
                IVp.CAEAFlag = 1;
              end;
            end;
          end;
      end;
    end;
    if (HasLocalization("PRT")) then begin
      GetLegalInvNrRow(IVp.OfficialSerNr,LINrbrw);
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin
        if (IVp.Status!=kRecordStatusManual and IVp.Status!=kRecordStatusRecovered) then begin
          RecordCheckError(2246,"",-1,"Status");   
          res = -1; 
          goto L99;
        end;
      end;
      if (LINrbrw.RegType==kOfficialNumTypeAllIVVc) then begin
        RecordCheckError(2246,"",-1,"OfficialSerNr");   
        res = -1; 
        goto L99;
      end;
      if (LINrbrw.RegType==kOfficialNumTypeManualIVVc) then begin
        if (IVp.Status!=kRecordStatusManual) then begin
          RecordCheckError(2246,"",-1,"OfficialSerNr");   
          res = -1; 
          goto L99;
        end;
      end;
      if (LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc) then begin
        if (IVp.Status!=kRecordStatusRecovered) then begin
          RecordCheckError(2246,"",-1,"OfficialSerNr");   
          res = -1; 
          goto L99;
        end;
      end;
    end;
    if (HasLocalization("AGO")) then begin
      GetLegalInvNrRow(IVp.OfficialSerNr,LINrbrw);
      if (LINrbrw.RegType==kOfficialNumTypeAllIVVc) then begin
        RecordCheckError(2246,"",-1,"OfficialSerNr");   
        res = -1; 
        goto L99;
      end;
    end;
  end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales or IVp.InvType==kInvoiceTypeDebit) then begin
    if (ARAccb.RequireCreditNoteReason!=0) then begin
      if (blank(IVp.Reason)) then begin
        RecordCheckError(1058,"",-1,"Reason");   
        res = -1; 
        goto L99;
      end;
    end;
    creditedinvtype = GetCreditedInvoiceType(IVp);
    if (creditedinvtype==kInvoiceTypeCash or creditedinvtype==kInvoiceTypeCashInvoiceReceiptPRT) then begin
      controlaccf = false;
    end;
    if (ARAccb.CreditIVTotNotExceedInvCheck!=0 and IVp.OKFlag!=0) then begin
      if (CheckCreditInvTotOnOrigIV(IVp,tstr,errcode2)) then begin
        RecordCheckError(errcode2,tstr,-1,"SerNr");      
        res = -1; 
        goto L99;
      end;
    end;      
  end;
  if (HasLocalization("PRT")) then begin
/*
    if (CUr.VATNr=="999999990") then begin
      if (IVp.InvType!=kInvoiceTypeCash) then begin
        if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
          RecordCheckError(2246,"",-1,"PayDeal");   
          res = -1; 
          goto L99;
        end;
      end;
    end;
*/  
    if (nonblank(IVp.GlobalTransportDate)) then begin
      if (blank(IVp.GlobalTransportNr)) then begin
        RecordCheckError(34380,"",-1,"GlobalTransportNr");   
        res = -1; 
        goto L99;
      end;
    end;
    if (nonblank(IVp.GlobalTransportNr)) then begin
      if (blank(IVp.GlobalTransportDate)) then begin
        RecordCheckError(22001,"",-1,"GlobalTransportDate");   
        res = -1; 
        goto L99;
      end;
      if (CheckGlobalTransportNr(IVp.GlobalTransportNr)==false) then begin
        RecordCheckError(34381,"",-1,"GlobalTransportNr");   
        res = -1; 
        goto L99;
      end;
    end;  
    if (IVp.InvType==kInvoiceTypeCash) then begin
      if (IVp.InclVAT>0) then begin
        bal = IVp.Sum4 - IVp.Sum3;
      end else begin
        bal = IVp.Sum1;
      end;
      switch (CYb.BusinessType) begin
        case kCYBusinessTypeRetail:
          testf = false;
          rwcnt = MatRowCnt(IVp);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVp,i,IVrw);
            if (nonblank(IVrw.ArtCode)) then begin
              if (ReadFirstItem(IVrw.ArtCode,INr,false,true)) then begin
                if (INr.ItemType!=kItemTypeStocked) then begin
                  testf = true;
                  i = rwcnt;
                end;
              end;
            end;
          end;
          if (testf) then begin
            if (bal>100) then begin
              RecordCheckError(2246,"",-1,"PayDeal");   
              res = -1; 
              goto L99;
            end;
          end else begin
            if (bal>1000) then begin
              RecordCheckError(2246,"",-1,"PayDeal");   
              res = -1; 
              goto L99;
            end;
          end;
        otherwise
          if (bal>100) then begin
            RecordCheckError(2246,"",-1,"PayDeal");   
            res = -1; 
            goto L99;
          end;
      end;
    end;
    if (IVp.Status==4 or IVp.Status==5) then begin
      if (blank(IVp.OfficialSerNr2)) then begin   
        RecordCheckError(2210,"",-1,"OfficialSerNr2");   
        res = -1; 
        goto L99;
      end;
      if (nonblank(IVp.OfficialSerNr2)) then begin   
        if (InString2(IVp.OfficialSerNr2,"/")<=0) then begin
          RecordCheckError(1059," " & IVp.OfficialSerNr2,-1,"OfficialSerNr2");   
          res = -1; 
          goto L99;
        end;
        locIVr.OfficialSerNr2 = IVp.OfficialSerNr2;
        if (ReadFirstKey("OpenOfficialSerNr2",locIVr,1,true)) then begin
          if (locIVr.SerNr!=IVp.SerNr) then begin
            RecordCheckError(1391,IVp.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto L99;
          end;
        end;
        locIVr.OfficialSerNr = StripCharacter(IVp.OfficialSerNr2,"/");
        if (ReadFirstKey("OfficialSerNr",locIVr,1,true)) then begin
          if (locIVr.SerNr!=IVp.SerNr) then begin
            RecordCheckError(1391,IVp.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto L99;
          end;
        end;
        dummyl = 0;
        GetNextSubstring(IVp.OfficialSerNr2,dummyl,"/",tstr);
        GetNextSubstring(IVp.OfficialSerNr2,dummyl,"/",tstr2);
        for (i=0;i<len(tstr);i=i+1) begin
          c = Mid(tstr,i,1);
          if (IsDigit(c)==false and (IsCapitalLetter(c)==false)) then begin
            RecordCheckError(1059," " & IVp.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto L99;
          end;
        end;
        for (i=0;i<len(tstr2);i=i+1) begin
          c = Mid(tstr2,i,1);
          if (IsDigit(c)==false) then begin
            RecordCheckError(1059," " & IVp.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto L99;
          end;
        end;
        GetLegalInvNrRow(IVp.OfficialSerNr2,LINrbrw);
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
          RecordCheckError(2246,"",-1,"Status");   
          res = -1; 
          goto L99;
        end;
      end;
    end;
  end;
LSkipOfficialSerNrCheck:;
  if (HasLocalization("BRA")) then begin
    if ((CUr.CUType!=0 or CUr.VEType!=0) and (IVp.InvCountry=="1058" or blank(IVp.InvCountry))) then begin 
      errcode = CheckAddressForLocalisation("BRA",IVp.Addr1,"Addr1",IVp.Addr2,"Addr2",IVp.Addr3,"Addr3",IVp.InvAddr3,"InvAddr3",IVp.InvAddr4,"InvAddr4",tstr);
      if (errcode!=0) then begin 
        RecordCheckError(errcode,"",-1,tstr);
        res = -1;
        goto L99;      
      end;
    end;  
    if ((CUr.CUType!=0 or CUr.VEType!=0) and (IVp.DelCountry=="1058" or blank(IVp.DelCountry))) then begin 
      if (nonblank(IVp.ShipAddr1) or nonblank(IVp.ShipAddr2) or nonblank(IVp.ShipAddr3) or nonblank(IVp.DelAddr3) or nonblank(IVp.DelAddr4)) then begin 
        errcode = CheckAddressForLocalisation("BRA",IVp.ShipAddr1,"ShipAddr1",IVp.ShipAddr2,"ShipAddr2",IVp.ShipAddr3,"ShipAddr3",IVp.DelAddr3,"DelAddr3",IVp.DelAddr4,"DelAddr4",tstr);
        if (errcode!=0) then begin 
          RecordCheckError(errcode,"",-1,tstr);
          res = -1;
          goto L99;      
        end;
      end;
    end;    
  end;    
  if (IVp.ExportFlag==0 and blank(IVp.CAE)) then begin
    if (UserCanAction("DisallowDomSales",false)) then begin
      RecordCheckError(20056,"",-1,"CustCode");   
      res = -1; 
      goto L99;
    end; 
  end;
  if (IVp.ExportFlag!=0 and blank(IVp.CAE)) then begin
    if (UserCanAction("DisallowExpSales",false)) then begin
      RecordCheckError(20049,"",-1,"CustCode");   
      res = -1; 
      goto L99;
    end; 
  end;
  if (nonblank(IVp.SalesMan)) then begin    
    errcode = VerifySalesmen(IVp.SalesMan,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,": " & tstr,-1,"SalesMan");   
      res = -1; 
      goto L99;
    end;
  end;
  BlockLoad(LINrb);  
  if ((nonblank(IVp.OfficialSerNr)) and (MatRowCnt(LINrb)>0)) or ((HasLocalization("POL")) and (IsStandardProduct)) then begin    
    locIVr.OfficialSerNr = IVp.OfficialSerNr;
    if (ReadFirstKey("OfficialSerNr",locIVr,1,true)) then begin
      testf = false;
//      if (IVp.InvType!=kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin//why ok to have Invoice and Credit note with same offical nr ? 
        if (locIVr.SerNr!=IVp.SerNr) then begin testf = true; end;
//      end;
      if (testf) then begin
        RecordCheckError(1115," " & IVp.OfficialSerNr,-1,"OfficialSerNr");      
        res = -1;
        goto L99;
      end;
    end;
  end;
  if (nonblank(IVp.OfficialSerNr)) and (MatRowCnt(LINrb)>0)  then begin    
    errcode = 0;
    if (HasLocalization("ARG")==false) then begin
      rwcnt = MatRowCnt(LINrb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        test2f = true;
        if (Left(IVp.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
        if (test2f) then begin
          testf = true;
          test2f = TestNextOfficialSerialNr_IVVc(LINrbrw,CUr.Classification,IVp,false);
          if (test2f==false) then begin
            errcode = 1557;
            testf = false;
          end else begin
            i = rwcnt;
          end;
        end;
      end;
      if (testf==false) then begin
        RecordCheckError(errcode," " & IVp.OfficialSerNr,-1,"OfficialSerNr");      
        res = -1;
        goto L99;
      end;
    end;
  end;
  if (nonblank(IVp.OfficialSerNr)) then begin
    if (InString2(IVp.OfficialSerNr,",")>0) then begin
      if (InString2(IVp.OfficialSerNr,":")>0) then begin
        RecordCheckError(1059," " & IVp.OfficialSerNr,-1,"OfficialSerNr");      
        res = -1;
        goto L99;
      end;
    end;
    locIVr.OfficialSerNr = IVp.OfficialSerNr;
    if (ReadFirstKey("OfficialSerNr",locIVr,1,true)) then begin
      if (locIVr.SerNr!=IVp.SerNr) then begin
        MessageBox(1547," " & locIVr.SerNr);
      end;
    end;
  end;  
  end;
  if ((stat==Rs_insert) or (IVp.SerNr!=IV2p.SerNr)) then begin
    if (gDoNotTestIfRecordExists==false) then begin
      locIVr.SerNr = IVp.SerNr;
      if (ReadFirstMain(locIVr,1,true)) then begin
        RecordCheckError(1115,"",-1,"SerNr");      
        res = -1;
        goto L99;
      end;
      if (RecordSupportExists("ARVc","IVVc",IVp.SerNr)) then begin
        RecordCheckError(1115,"",-1,"SerNr");      
        res = -1;
        goto L99;
      end;
    end;
  end;
  cashres = CashSerNumberTest(IVp.PayDeal,IVp.Sum4,"IVVc",IVp.SerNr,gentrans);
  if (cashres==99) then begin 
    res = -1; 
    goto L99; 
  end;
  if (cashres==12) then begin
    goto L12;
  end;  
  if (SerNrTestIVVc(IVp.SerNr,IVp.TransDate,gentrans)==false) then begin
    RecordCheckError(1034,"",-1,"SerNr");      
    res = -1; 
    goto L99;
  end;
L12:;
  if (check==false) then begin
    goto LIVVcRecordCheck_GenTrans;
  end;  
  if (Date2Test("IVVc",IVp.InvDate,"InvDate",-1)==false) then begin
    res = -1;
    goto L99;
  end;
  if (DisallowFutureDateCheck(true,IVp.InvDate,"InvDate",-1)) then begin
    res = -1;
    goto L99;
  end;
  if (Date2Test("IVVc",IVp.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto L99;
  end;
  if (DisallowFutureDateCheck(true,IVp.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto L99;
  end;
  if (nonblank(IVp.CustCode)) then begin
    if (CUr.CUType==0) then begin
      RecordCheckError(1120,IVp.CustCode,-1,"CustCode");      
      res = -1; 
      goto L99;
    end;
  end;
  errcode = CheckRates(IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto L99;
  end;    
  if ((IVp.InvType!=kInvoiceTypePrepayment) and (IVp.InvType!=kInvoiceTypeDownpayment)) then begin
    if (blank(IVp.PayDeal)) then begin
      RecordCheckError(1256,"",-1,"PayDeal");      
      res = -1; 
      goto L99;
    end else begin
      i = GetPayDealType(IVp.PayDeal,dummyl);
      if ((i!=kInvoiceTypeInterest) and (i!=kInvoiceTypeNormal) and (i!=kInvoiceTypeDebit) and (i!=kInvoiceTypeDownpayment)) then begin
        if (IVp.InvType!=i) then begin
          RecordCheckError(1214,"",-1,"PayDeal");      
          res = -1; 
          goto L99;
        end;
      end;  
    end;
  end else begin
  end;  
  if (nonblank(CUr.CurncyCode)) then begin
    if (CUr.CurncyCode!=IVp.CurncyCode) then begin
      RecordCheckError(1217,"",-1,"CurncyCode");      
      res = -1; 
      goto L99;
    end;
  end;      
  if (CUr.OnHoldFlag!=0) then begin
    if (transf) then begin    
      RecordCheckError(1300,IVp.CustCode,-1,"CustCode");      
      res = -1; 
      goto L99;
    end;  
  end;
  if (TouchScreenFinishButtonf) then begin
    transf = false;
  end;
  if (CUr.blockedFlag==1) then begin
    RecordCheckError(1265,IVp.CustCode,-1,"CustCode");      
    res = -1; 
    goto L99;
  end;
  if (nonblank(IVp.LoyaltyCardNr)) then begin
    LoyaltyCardr.SerNr = IVp.LoyaltyCardNr;
    if (ReadFirstMain(LoyaltyCardr,1,true)==false) then begin
      RecordCheckError(26435,"",-1,"LoyaltyCardNr");      
      res = -1; 
      goto L99;
    end;
    if (LoyaltyCardr.Closed!=0) then begin
      RecordCheckError(26435,"",-1,"LoyaltyCardNr");      
      res = -1; 
      goto L99;
    end;
  end;
  if (HasLocalization("ARG")==false) then begin
    errcode = CheckVATNrMask(IVp.VATNr,CUr.CountryCode,CUr.CustType,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,tstr,-1,"VATNr");      
      res = -1; 
      goto L99;
    end;
  end;
  if (blank(IVp.CurncyCode)) then begin
    if ((IVp.FrRate!=blankval) or
        (IVp.ToRateB1!=blankval) or
        (IVp.ToRateB2!=blankval) 
/*JJCUR        
        or
        (IVp.BaseRate1!=blankval) or
        (IVp.BaseRate2!=blankval)
*/        
        ) then begin
      RecordCheckError(1582,"",-1,"BaseRate1");      
      res = -1; 
      goto L99;
    end;
  end;
  if (CurncyCodeRegistered(IVp.CurncyCode)==false) then begin
    RecordCheckError(1582,"",-1,"CurncyCode");      
    res = -1; 
    goto L99;
  end;
  if (HasLocalization("BRA")) then begin
    if (blank(IVp.BrazilEInvType)) then begin
      RecordCheckError(1058,"",-1,"BrazilEInvType");      
      res = -1; 
      goto L99;
    end else begin
      BEInvTyper.Code = IVp.BrazilEInvType;
      if (ReadFirstMain(BEInvTyper,1,true)==false) then begin
        RecordCheckError(1008,"",-1,"BrazilEInvType");      
        res = -1; 
        goto L99;
      end;
    end;
  end;
  if (HasIntegratedNL) then begin
    if (nonblank(IVp.ARAcc)) then begin
      Accr.AccNumber = IVp.ARAcc;
      if (ReadFirstMain(Accr,1,true)==false) then begin
        RecordCheckError(1007,IVp.ARAcc,-1,"ARAcc");      
        res = -1; 
        goto L99;
      end;    
    end;
  end;
  controlaccf = true;
  if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) or (creditedinvtype==kInvoiceTypeCash or creditedinvtype==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    controlaccf = false;
  end;
  if (controlaccf) then begin
    if (IsControlAccount(IVp.ARAcc,true,true)==false) then begin
      RecordCheckError(22082,IVp.ARAcc,-1,"ARAcc");      
      res = -1; 
      goto L99;
    end;
  end;
  if (IVp.OKFlag!=0 or TouchScreenFinishButtonf) and (IV2p.OKFlag==0) then begin
    if (HasIntegratedNL) then begin
      if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (TouchScreenInterface==false) then begin
        PDr.Code = IVp.PayDeal;
        if (ReadFirstMain(PDr,1,true)) then begin
          if (blank(PDr.pdCashAcc) and blank(ARAccb.CashAcc)) then begin
            RecordCheckError(2191,"",-1,"SerNr");  
            res = -1; 
            goto L99;
          end;
        end;
      end;  
    end;
  end;
    tstr = IVp.ARAcc;
    if (blank(tstr)) then begin
      GetARAcc(IVp.CustCode,tstr);
    end;
    location = IVp.Objects;
    if (ARAccb.ARUseObj==0) then begin
//      location = "";//what the ? 
    end;
    errcode = CheckObjs(tstr,location,errstr);
    if (errcode!=0) then begin
      if ((errcode==1083) and (ARAccb.ARUseObj==0)) then begin
        errcode = 2275;
      end;
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1; 
      goto L99;
    end;
  if (blank(IVp.MachineName))  then begin
    IVp.MachineName = CurMachineName;
    IVp.DrawerCode = CurDrawerCode(IVp.MachineName);
  end;
  if (blank(IVp.DrawerCode))  then begin
    IVp.DrawerCode = CurDrawerCode(IVp.MachineName);
  end;
  if (blank(IVp.TerminalID))  then begin
    IVp.TerminalID = CurTerminalID;
  end;
  
  if (check) then begin
    if (stat==Rs_update) then begin
      if (IV2p.OKFlag==0) then begin
        if (IsDoingManagerOverride) then begin
//          IVp.SalesMan = OriginalLogin; //why would u want to store Manger overriding as salesman ? 
        end else begin
          if (blank(IVp.SalesMan)) then begin
            IVp.SalesMan = CurrentUser;
          end;
          IVp.MachineName = CurMachineName;
          IVp.DrawerCode = CurDrawerCode(IVp.MachineName);
          if (blank(IVp.BranchID))  then begin
            IVp.BranchID = CurBranchID;
          end;
          IVp.TerminalID = CurTerminalID;
        end;
      end;
    end;
    IVp.TransTime = CurrentTime;//cannot be on save nor on update
    if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) or (creditedinvtype==kInvoiceTypeCash or creditedinvtype==kInvoiceTypeCashInvoiceReceiptPRT) or (TouchScreenFinishButtonf and IVp.InvType==kInvoiceTypeDownpayment) then begin
      if (RequireOpenSession(IVp.MachineName)) then begin
        IVp.TransDate = CurrentDate;//cannot be on save nor on update
//        if (TouchScreenInterface) then begin
          if (IsSessionOpen(IVp.MachineName,IVp.DrawerCode,IVp.TransDate,IVp.TransTime)==false) then begin
            RecordCheckError(2195,"",-1,"SerNr");      
            res = -1;
            goto L99;
          end;
//      end;
      end;
    end;
  end;
  
  switch (stat) begin
    case Rs_insert:
      if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) or (IVp.CredInv<=0) then begin
        rwcnt = MatRowCnt(IVp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVp,i,IVrw);
          if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
            if (IVp.OrderNr<=0) and (IVrw.OrdNr<=0) and (IVrw.stp!=kInvoiceRowTypeDebit) then begin
              IVrw.OrdRow = -1;
            end;
            IVrw.CreditedRow = -1;
          end else begin
            if (IVp.CredInv<=0) then begin
              IVrw.CreditedRow = -1;
            end;
          end;
          if (IVp.OrderNr<0) and (IVp.SVONr<0) and (IVrw.OrdNr<0) and (IVrw.OrdRow==-1) then begin
            IVrw.NotUpdStockFlag = 0;
          end;
          MatRowPut(IVp,i,IVrw);
        end; 
      end;
    case Rs_update:
      if ((IVp.OKFlag!=0 or TouchScreenFinishButtonf) and (IV2p.OKFlag==0)) then begin
        if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) or (IVp.CredInv<=0) then begin
          rwcnt = MatRowCnt(IVp);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVp,i,IVrw);
            IVrw.CreditedRow = -1;
            if (IVp.OrderNr<0) and (IVp.SVONr<0) and (IVrw.OrdNr<0) and (IVrw.OrdRow==-1) then begin
              IVrw.NotUpdStockFlag = 0;
            end;
            MatRowPut(IVp,i,IVrw);
          end;
        end;
      end;
  end;  
  
  if (IVTestCredMan(IVp,errcode)==false) then begin
    MessageBox(errcode,"");
  end;
  if (HasLocalization("MEX") and IsEnterprise) then begin
    if (blank(IVp.PMCode)) then begin
      RecordCheckError(2210,"",-1,"PMCode");      
      res = -1; 
      goto L99;
    end;
  end;
  if (HasLocalization("PRT")) then begin
    if (blank(IVp.SalesMan)) then begin
      RecordCheckError(21455,"",-1,"SalesMan");   
      res = -1; 
      goto L99;
    end;
    if (nonblankdate(IVp.PlanSendDate) or nonblanktime(IVp.PlanSendTime)) then begin
      if (IVp.PlanSendDate<IVp.InvDate) then begin
        RecordCheckError(1142,"",-1,"PlanSendDate");      
        res = -1; 
        goto L99;
      end;
      if (blanktime(IVp.PlanSendTime)) then begin
        RecordCheckError(20866,"",-1,"PlanSendTime");      
        res = -1; 
        goto L99;
      end;
      if (IVp.PlanSendDate==IVp.InvDate) then begin
        if (IVp.PlanSendTime<CurrentTime) then begin
          RecordCheckError(20866,"",-1,"PlanSendTime");      
          res = -1; 
          goto L99;
        end;
      end;
    end;
  end;
  if (transf) then begin
    if (ValidInvoiceDataForVATLaw2(IVp,CUr,errcode,errstr,tstr)==false) then begin
      RecordCheckError(errcode,errstr,-1,tstr);      
      res = -1; 
      goto L99;
    end;   
    if (ARAccb.DisallowNegativeTotalsonSales!=0) then begin
      if (IVp.Sum4<0) then begin
        RecordCheckError(22047,"",0,"Sum");      
        res = -1; 
        goto L99;
      end;
    end;
  end;
  if (ValidEInvoiceData3(IVp,CUr,errcode2,errstr,tstr)==false) then begin
    RecordCheckError(errcode2,errstr,-1,tstr);      
    res = -1; 
    goto L99;
  end;
  if (HasLocalization("ARG")) then begin
    if (IVp.OKFlag!=0 and IV2p.OKFlag==0) then begin
      if (ShouldSendArgEinvoice(IVp)) then begin
        if (blank(IVp.CAE)) and (IVp.CAEAFlag==0) then begin
          RecordCheckError(2913,"",-1,"SerNr");
          res = -1;
          goto L99;
        end;
      end;
    end else begin
      if (Rs_insert==1 and (IV2p.OKFlag!=0)) then begin
        if (ShouldSendArgEinvoice(IVp)) then begin
          if (blank(IVp.CAE)) and (IVp.CAEAFlag==0) then begin
            RecordCheckError(2913,"",-1,"SerNr");
            res = -1;
            goto L99;
          end;
        end;
      end;
      testf = false;
      if (IVp.OKFlag==0 and nonblank(IVp.CAE) and UserCanAction("UnOKAll",false)==false) then begin
        testf = true;
        if (UserCanAction("EditingCAEandCAEExpiry",false)) then begin
          BlockLoad(IEb);
          if (ERecordStatus(IEb.CustomerCode,IVp.CustCode,IVp.SerNr,"IVVc",tstr)==6) then begin        
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        RecordCheckError(2910,"",-1,"CAE");
        res = -1;
        goto L99;
      end;
    end;
  end;
//  if (IVp.InvType!=kInvoiceTypeDebit) then begin
//    IVp.CredInv = -1;
//  end;
  if (rwcnt>0) then begin
  switch (IVp.InvType) begin
    case kInvoiceTypeDebit:
      goto LkInvoiceTypeCredit;
    case kInvoiceTypeCreditSpecialSales: 
      goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      MatRowGet(IVp,0,IVrw);
      if (IVrw.OrdRow!=-1) then begin
        if (nonblank(IVp.CredOfficialSerNr)) then begin
          locIVr.OfficialSerNr = IVp.CredOfficialSerNr;
          if (ReadFirstKey("OfficialSerNr",locIVr,1,true)==false) then begin
            RecordCheckError(1119,"",0,"CredOfficialSerNr");      
            res = -1; 
            goto L99;
          end;
        end;
        IVp.CredInv = IVrw.OrdRow;
        locIVr.SerNr = IVp.CredInv;
        if (ReadFirstMain(locIVr,1,true)==false) then begin
          RecordCheckError(1119,"",0,"OrdRow");      
          res = -1; 
          goto L99;
        end;
        if ((locIVr.InvType==kInvoiceTypeCredit or locIVr.InvType==kInvoiceTypeCreditSpecialSales)) then begin//(locIVr.InvType==kInvoiceTypeCash) or
          RecordCheckError(1222,"",0,"OrdRow");      
          res = -1; 
          goto L99;
        end;
        if (IVp.CustCode!=locIVr.CustCode) then begin
          RecordCheckError(1218,"",0,"OrdRow");      
          res = -1; 
          goto L99;
        end;
        if (locIVr.Invalid!=0) then begin
          RecordCheckError(1282,"",0,"OrdRow");      
          res = -1; 
          goto L99;
        end;
        if (locIVr.OKFlag==0) then begin
          RecordCheckError(2072,"",0,"OrdRow");      
          res = -1; 
          goto L99;
        end;
        if (IVp.CurncyCode!=locIVr.CurncyCode) then begin
          RecordCheckError(1217,"",0,"OrdRow");      
          res = -1;
          goto L99;
        end;
        if (IVp.TransDate<locIVr.TransDate) then begin
          RecordCheckError(20852,"",0,"OrdRow");
          res = -1;
          goto L99;
        end;
        if (blank(locIVr.RvrsVAT)==false) then begin
          if (locIVr.Sum4!=IVp.Sum4) then begin
            RecordCheckError(24191,"",0,"OrdRow");
            res = -1;
            goto L99;
          end;
        end;
        if (ARAccb.NoOverPayIV!=0 or blank(IVp.RvrsVAT)==false) then begin
        if (locIVr.InvType!=kInvoiceTypeCash and locIVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
          ARr.InvoiceNr = IVp.CredInv;
          if (ReadFirstMain(ARr,1,true)==true) then begin
            if ((ARr.RVal)<(IVp.Sum4)) then begin
              tstr = " " & IVp.Sum4 & USetStr(20061);
              tstr = tstr & " " & ARr.RVal;
              RecordCheckError(20060,tstr,-1,"Sum4");
              res = -1;
              goto L99;
            end;
          end else begin
            if (IVp.CredInv>0) then begin
              if (IVp.Sum4>0) then begin
                tstr = " " & IVp.Sum4 & USetStr(20061);
                tstr = tstr & " 0";
                RecordCheckError(20060,tstr,-1,"Sum4");
                res = -1;
                goto L99;
              end;
            end;
          end;
        end;
        end;
      end else begin
        if (ARAccb.CredInvWithNo!=0) then begin
          if (IVp.OKFlag!=0) then begin
            RecordCheckError(1119,"",0,"OrdRow");      
            res = -1; 
            goto L99;
          end;
        end;
      end;
  end;
  end;
  res = IVVcRecordCheckRows(IVp,IV2p,CUr,ORr,Ob,MSb,ARAccb,check,lightFlag,stat,cash);
  if (res!=0) then begin
    res = -1; 
    goto L99;
  end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    res = TestCreditNoteTerms(IVp,tstr);
    if (res!=0) then begin
       RecordCheckError(res,tstr,-1,"Sum4");
       res = -1; 
      goto L99;
    end;
  end;
//  if (check and transf) then begin
//checkbox is Save , not OK invoice
  if (check) then begin
    if (CLb.IVSave==1) then begin//or CLb.IVPaste==1
      if ((IVp.OrderNr==-1) and (IVp.InvType!=kInvoiceTypeCash and IVp.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) and (IVp.InvType!=kInvoiceTypeCredit) and (IVp.InvType!=kInvoiceTypeCreditSpecialSales) and (IVp.InvType!=kInvoiceTypeInterest)) then begin
      if (cash!=IVp.Sum4) then begin
        CUr.Code = IVp.CustCode;
        if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
          if (limitdaysf) then begin
            if (CLb.IVSave==1) then begin    
              RecordCheckError(22260,"",-1,"CustCode");      
              res = -1;
              goto L99;
            end;
          end;
          if (blank(limit)==false) then begin 
            basesum4 = IVp.BaseSum4;  
            SubCashRows_IVVc(IVp,false,sum4,basesum4);
            switch (CLb.Base) begin
              case kCreditLimitBasedOnAllOpenInv: bal = bal + basesum4;
              case kCreditLimitBasedOnOverDueInv: 
                if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin//cash only
                  bal = bal + basesum4;
                end;
              case kCreditLimitBasedOnOpenInvSuspendOnOverdue: 
                bal = bal + basesum4;
            end;
            if (bal>limit) then begin
              if (CLb.IVSave==1) then begin    
                if (limit==0.001 and CLb.Base==kCreditLimitBasedOnOpenInvSuspendOnOverdue) then begin
                  RecordCheckError(39600,"",-1,"CustCode");
                  res = -1;
                  goto L99;
                end else begin
                  RecordCheckError(1164,"",-1,"CustCode");      
                  res = -1;
                  goto L99;
                end;
              end;
  //            if (CLb.IVPaste==1) then begin    
  //               Error0(1164);
  //            end;
            end;
          end;
        end;
      end;
      end;
    end;
  end;

  RecordNew(TRr);

  if (transf) then begin
    if (IsStandardProduct) then begin
      if (HasLocalization("AGO,ARG,HRV,POL,PRT")) then begin
        if (blank(IVp.OfficialSerNr)) then begin
          RecordCheckError(1058,"",-1,"OfficialSerNr");  
          res = -1;
          goto L99;
        end;
      end;
    end;
    if (HasLocalization("AGO,ARG,HRV,PRT")) then begin
      if (blank(IVp.OfficialSerNr)) then begin
        RecordCheckError(1058,"",-1,"OfficialSerNr");  
        res = -1;
        goto L99;
      end;
    end;
    if (HasLocalization("HRV")) then begin
      if (IVp.FiscalFlag!=0) then begin
        testf = false;
        if (IVp.Sum4>=0) then begin
          if (cash<IVp.Sum4) then begin
            testf = true;
          end;
        end else begin
          if (cash>IVp.Sum4) then begin
            testf = true;
          end;
        end;
        if (testf) then begin
          RecordCheckError(24177,"",MatRowCnt(IVp),"Sum");      
          res = -1; 
          goto L99;
        end;    
      end;
    end;
    if (((IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) or (ARAccb.NoOverPayIV!=0)) and (TouchScreenInterface)) then begin//is POS client
      testf = false;
      if (IVp.Sum4>=0) then begin
        if (cash<IVp.Sum4) then begin
          testf = true;
        end;
        if (TouchScreenInterface==false) then begin
          if (ARAccb.NoOverPayIV!=0) then begin
            if (cash>IVp.Sum4) then begin
              testf = true;
            end;
          end;
        end;
      end else begin
        if (cash>IVp.Sum4) then begin
          testf = true;
        end;
        if (ARAccb.NoOverPayIV!=0) then begin
          if (cash<IVp.Sum4) then begin
            testf = true;
          end;
        end;
      end;
      if (testf) then begin
        RecordCheckError(24177,"",MatRowCnt(IVp),"Sum");      
        res = -1; 
        goto L99;
      end;
    end;
  end;
  if (HasLocalization("PRT")) then begin 
    IVp.OfficialSerNrSerie = UpdateOfficialSerNrSerie(stat,IVp.OKFlag,IV2p.OKFlag,IVp.OfficialSerNr,true);
  end;  
  if (IVp.InvType==kInvoiceTypePrepayment) then begin
    transf = false;
    check = false;
  end;
  if (transf) then begin
    cashinv = UserCanAction("CashInvOK",true);  
    norminv = UserCanAction("InvOK",true);
    credinv = UserCanAction("CredInvOK",true);
    switch (IVp.InvType) begin
      case kInvoiceTypeCashInvoiceReceiptPRT:
        goto LkInvoiceTypeCash;
      case kInvoiceTypeCash:
LkInvoiceTypeCash:;      
        if (cashinv==false)  then begin
          RecordCheckError(1274,StringFromStringSet(3,"CashInvOK"),-1,"SerNr");      
          res = -1;
          goto L99;
        end;
        if (cashinv==true) and (norminv==false) then begin
          RecordCheckError(1274,StringFromStringSet(3,"InvOK"),-1,"SerNr");      
          res = -1;
          goto L99;
        end; 
      case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
      case kInvoiceTypeCredit:
        LkInvoiceTypeCredit:;
        if (credinv==false)  then begin
          RecordCheckError(1274,StringFromStringSet(3,"CredInvOK"),-1,"SerNr");      
          res = -1;
          goto L99;
        end;
        if (credinv==true) and (norminv==false) then begin
          RecordCheckError(1274,StringFromStringSet(3,"InvOK"),-1,"SerNr");      
          res = -1;
          goto L99;
        end; 
      otherwise
        if (norminv==false) then begin
          RecordCheckError(1274,StringFromStringSet(3,"InvOK"),-1,"SerNr");      
          res = -1;
          goto L99;
        end;   
    end;
  end;
  
  if ((IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) and transf and (IVp.UpdStockFlag==0)) then begin
    res = PUFromCreditNote(IVp,false);
    SetRecordCheckVc("IVVc");
    if (res!=0) then begin
      RecordCheckError(1274,"",-1,"SerNr");      
      res = -1;
      goto L99;
    end;
  end;
  if ((transf) and (IVp.UpdStockFlag!=0)) then begin
    sernr = -1;
    if (stat==Rs_update) then begin
      sernr = IV2p.SerNr;
    end;  
    if (long4>0) then begin
      if (MSb.Chronology!=0) then begin
//locationperrow
        if (ExistStockTrans(IVp.Location,IVp.TransDate,errcode,errstr,"IVVc",sernr,MSb)) then begin
          RecordCheckError(errcode,errstr,-1,"TransDate");      
          res = -1;
          goto L99;
        end;
      end;
    end;
    if (CanOKStockRecord(errcode)==false) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1; 
      goto L99;
    end;
  end;
//here validation is passed  
  if (IVp.OrderNr<=0) then begin
    rwcnt = MatRowCnt(IVp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
        if (IVp.OrderNr<=0) and (IVrw.OrdNr<=0) then begin
          IVrw.OrdRow = -1;
        end;
        MatRowPut(IVp,i,IVrw);
      end;
    end;
  end;  
  if (check==true) then begin
    if (IVp.UpdStockFlag!=0) then begin
      IVUpdateFIFO(IVp,true);
      if (blank(IVp.CAE)) then begin
        if (DisallowPriceLowerCost_IVVc(IVp)) then begin
          RecordCheckError(20767,"",i,"Price");      
          res = -1;
          goto L99;
        end;
      end;
    end;
  end;  
LIVVcRecordCheck_GenTrans:;
//  if (HasSLIntegratedWithNL==false) then begin gentrans = false; end;
  if (gentrans==false) then begin transf = false; end;
  if (IsStandardProduct) then begin
    transf = HasIntegratedNL and transf;
  end;

  if (transf) then begin
    errcode = MakeTransFromIV(gTRp,gSMp,IVp,false,false);
    if (errcode==0) then begin
      if (MatRowCnt(gSMp)>0) then begin
        if (gSMp.SerNr<=0) then begin
          errcode = 2168;
        end;
      end;
    end;
    if (check) then begin
      if (errcode>0) then begin
        RecordCheckError(errcode,"",-1,"SerNr");      
        res = -1;
        goto L99;
      end;
      errcode = ConnectCreditNotetoVI(IVp);
      if (errcode!=0) then begin
        RecordCheckError(errcode,"",-1,"SerNr");      
        res = -1;
        goto L99;
      end;
    end;

    if ((gTRp.Number>0) and (gTRp.IntYc==IVYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        RecordCheckError(1085,tstr,-1,"SerNr");      
        res = -1;
        goto L99;
      end;
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":
          UpdateTrans_Stock(gTRp);
        otherwise
//must be after all other tests  
          if (HasLocalization("HRV")) then begin
            if (IVp.OKFlag!=0 and IVp.Invalid==0 and blank(IVp.TaxAdminServSeal) and blank(IVp.RefStr)) then begin
              if (DoXMLExport_IVVc(IVp)==false) then begin
                RecordCheckError(31412,"",-1,"RefStr");
                res = -1;
                goto L99;
              end;
            end;
          end;
          SaveTrans(gTRp);
          AddTTrans_IVVc(gTRp,IVp);
      end;
    end;
    if (check) then begin
      if (MatRowCnt(gSMp)>0) then begin
        gSMp.FileName = "IVVc";
        gSMp.TransNr = IVp.SerNr;
        if (SaveSim(gSMp)) then begin end;
        CreateRecordLink(IVp,curcomp,gSMp,curcomp);  
      end;    
    end;  
  end;  
  if (HasLocalization("SVN")) then begin
    if (IVp.InvType==kInvoiceTypeCash) then begin
      if (IVp.OKFlag!=0 and IVp.Invalid==0 and blank(IVp.TaxAdminServSeal)) then begin
        if (nonblank(IVp.RefStr)) then begin
          IVp.OfficialSerNr = "";
        end else begin        
/*        
          res = IVVcSVNFiscalization(false,IVp,errstr);
          if (res!=0) then begin
            IVp.OfficialSerNr = "";
            IVp.TaxAdminServSeal = "";
            if (blank(IVp.RefStr)) then begin
              RecordCheckError(res,errstr,-1,"RefStr");
              res = -1;
              goto L99;
            end;
          end;
*/          
        end;
      end;
    end;
  end;
L99:;
  if (res!=0) then begin 
    IVp.SerNr = oldnr; 
    IVp.OfficialSerNr = oldOfficialSerNr;
    IVp.OfficialSerNrSerie = "";
  end;
L999:;
  IVVcRecordCheck = res;
  RETURN;
END;

global
function Boolean CLInforIVExists(LongInt ivnr,string filename,var LongInt clinser)
BEGIN
  Boolean res;
  record CLInIVVc CLInIVr;
  
  CLInIVr.SerNr = ivnr;
  CLInIVr.FileName = filename;
  res = ReadFirstKey("FileName",CLInIVr,2,true);
  clinser = CLInIVr.CLInNr;
  CLInforIVExists = res;
  RETURN;
END;

procedure IVLastTransDate(LongInt ivnr,var date tdp)
BEGIN
  record IPrsVc mainr;
  Date blankd;
  
  tdp = blankd;
  mainr.IVNr = ivnr;
  if (ReadLastKey("IVKey",mainr,1,true)) then begin
    tdp = mainr.TransDate;
  end;  
  RETURN;
END;

global
function LongInt IVVcRecordRemoveTest(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record IVVc lIVr;
  record ARVc ARr;
  record DBLockBlock DBLb;
  record MainCLBlock MCLb;
  Date lasttrdate;
  Boolean found;
  LongInt clin;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  
  res = 1;
  BlockLoad(DBLb);
  BlockLoad(MCLb);
  if (IVr.OKFlag==0) then begin
    if (IVr.OrderNr!=-1) then begin      
      if (IVr.Sum4>0) then begin // Has to be allowed to delete Invoice connected to Downpayment, which is negative....
        if (long3>0) then begin
          MessageBox(1560,"");
        end;  
        res = 0;
        goto LIVVcRecordRemoveTest;
      end;  
    end;
  end;
  if (IVr.OKFlag!=0) then begin
    if (IVr.TransDate>DBLb.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LIVVcRecordRemoveTest;
    end;
    if ((IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.CredInv!=-1)) then begin
      lIVr.SerNr = IVr.CredInv;
      found = ReadFirstMain(lIVr,1,true);
      if (found) then begin
        if (long3>0) then begin
          MessageBox(1560,"");
        end;
        res = 0;
        goto LIVVcRecordRemoveTest;
      end;
    end else begin
      ARr.InvoiceNr = IVr.SerNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        if (long3>0) then begin
          MessageBox(1560,"");
        end;
        res = 0;
        goto LIVVcRecordRemoveTest;
      end;
    end;
    IVLastTransDate(IVr.SerNr,lasttrdate);
    if (lasttrdate>DBLb.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LIVVcRecordRemoveTest;
    end;
  end;
  if (MCLb.CashCollection!=0) then begin
    if (CLInforIVExists(IVr.SerNr,"IVVc",clin)) then begin
      if (long3>0) then begin
        MessageBox(2070,clin);
      end;
      res = 0;
      goto LIVVcRecordRemoveTest;      
    end;
  end;
  if (UserCanAction("DeleteNotOKedInvoiceWithCAE",false)==false) then begin
    if (nonblank(IVr.CAE)) then begin
      MessageBox(2912,"");
      res = 0;
      goto LIVVcRecordRemoveTest;
    end;
  end;
  if (HasLocalization("ARG")) then begin
    if (ArgEInvoiceBeingSentRemote(IVr.SerNr,IVr.OfficialSerNr,false)) then begin
      MessageBox(2914,"");
      res = 0;
      goto LIVVcRecordRemoveTest;
    end;
  end;
  if (IVr.RoyaltyIVFlag!=0) then begin
    if (RoyaltyRecordExistsForCN(IVr)) then begin
      MessageBox(1560,"");
      res = 0;
      goto LIVVcRecordRemoveTest;
    end;
  end;
  actnr = 1;
  while (ReadRecordLink(IVr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (long3>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LIVVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;
LIVVcRecordRemoveTest:;
  IVVcRecordRemoveTest = res;  
  RETURN;
end;

