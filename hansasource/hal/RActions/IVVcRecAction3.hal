external function Boolean IsEnterprise();
external function Boolean HasModIN();
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external function Boolean HasModSL();
external function val AbsoluteVal(val);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external function Integer VerifySalesmen(string,var string);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function Boolean ShouldInvoiceRowUpdateStock(record IVVc,row IVVc);
external function Boolean AllowedToTakeFromThisLoc(record LocationVc);
external procedure ExtractObj(string,var Integer,var string);
external function Integer CheckObjsNew(string,string,Array string,Array string,Integer,var string);
external function Boolean IsDigit(string);
external function Boolean CorrectM4ValProc(val);
external function Boolean IsVATCodeDefined(string);
external procedure ConvertSalesAcc(var string,Integer);
external function Integer SerialNrOnThisIV(record IVVc,string,string);
external function Boolean IsControlAccount(string,Boolean,Boolean);
external function Integer CheckObjs(string,string,var string);
external function Boolean SerialNrAvail(string,string,string,val);
external procedure FindStockValueInclStockReserv(LongInt,string,string,string,var record ItemStatusVc,var val);
external function Boolean CheckStructureItemsLevel(string,string,string,val);
external procedure GetInvoicedQty(LongInt,LongInt,Integer,var val,record MainStockBlock);
external function Boolean GetDeliveredQty(LongInt,LongInt,val,var val,record MainStockBlock);
external function Boolean IsRecipeClosed(string);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean IsSerialNrCorrect(string);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function Boolean EInvoiceForCustomer2(Integer,string,string,var record CUVc);
external function Boolean IVVcGiftCertificateCheck(record IVVc,Integer,row IVVc,Integer,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetCuAccUseRow(string,var row CuAccBlock);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean INVc_AllowSales(record INVc,var LongInt);

function Boolean CheckInvDatePerItemType(Date invdate,Integer daysrange, Integer OutArgEInvoices)
begin
  Boolean res;
  Date today;
  
  today = CurrentDate;
  res = true;
  if (OutArgEInvoices==1) then begin 
    if (invdate>AddDay(today,daysrange)) then begin
      res = false;
    end;
    if invdate<AddDay(today,-daysrange) then begin 
      res = false;
    end;
  end;  
  CheckInvDatePerItemType = res;
  return;
end;  
                                                
function Boolean CheckLoanInv(record IVVc IVp)/*check if this works*/
BEGIN
  Boolean res;
  Integer i,rwcnt;
  row IVVc IVrw;
  row CuAccBlock cuaccrw;
  record CuAccVc CuAccr;
  Integer errcode;
  string 255 errstr;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  record OTCheckBlock OTCheckr;
  Boolean initotcheckf;

  BlockLoad(OTCheckr);
  res = true;
  rwcnt = MatRowCnt(IVp);
  for (i = 0 ; i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if ((IVrw.stp!=7) and (IVrw.stp!=8)) then begin
      goto LCheckLoanInv88;
    end;
  if (IVp.OKFlag!=0) then begin
    if (blank(IVrw.CuAccCode)) then begin
      RecordCheckError(1058,IVrw.CuAccCode,i,"CuAccCode");      
      res = false; 
      goto LCheckLoanInv;
    end else begin
      CuAccr.Code = IVrw.CuAccCode;
      if (ReadFirstMain(CuAccr,1,true)==false) then begin
        RecordCheckError(1120,IVrw.CuAccCode,i,"CuAccCode");      
        res = false; 
        goto LCheckLoanInv;
      end;
      if (CuAccr.Closed!=0) then begin
        RecordCheckError(1981,IVrw.CuAccCode,i,"CuAccCode");      
        res = false; 
        goto LCheckLoanInv;
      end;
      if (GetCuAccUseRow(CuAccr.Objects,cuaccrw)) then begin
        if (cuaccrw.CheckObj!=0) then begin
           if (CuAccr.Objects!=IVrw.Objects) then begin
             RecordCheckError(1980,IVrw.Objects,i,"Objects");      
             res = false; 
             goto LCheckLoanInv;        
          end;
        end;
      end;
    end;
    if (blank(IVrw.SalesAcc)) then begin
      RecordCheckError(1058,IVrw.SalesAcc,i,"SalesAcc");      
      res = false; 
      goto LCheckLoanInv;
    end;
    VerifyRowObjects("NONE",IVp.Objects,IVrw.Objects,IVrw.SalesAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);
//    errcode = CheckObjs(IVrw.SalesAcc,IVrw.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,IVrw.Objects,i,"Objects");      
      res = false; 
      goto LCheckLoanInv;
    end;         
  end;
LCheckLoanInv88:;  
  end;
LCheckLoanInv:;
  CheckLoanInv = res;
  RETURN;
END;

global
function LongInt IVVcRecordProtectFields(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row IVVc IVrw;
  row IVVc IV2rw;
  Integer rwcnt2;
  
  IV2r.Prntdf = IVr.Prntdf;
  IV2r.TaxAdminServSeal = IVr.TaxAdminServSeal;
/*
  rwcnt = MatRowCnt(IVr);
  rwcnt2 = MatRowCnt(IV2r);
  for (i=0;i<rwcnt2;i=i+1) begin
    if (i<rwcnt) then begin
      MatRowGet(IVr,i,IVrw);
      MatRowGet(IV2r,i,IV2rw);
      IV2rw.OrdNr = IVrw.OrdNr;
      MatRowPut(IV2r,i,IV2rw);
    end;
  end;  
*/
  IVVcRecordProtectFields = res;
  RETURN;
END;

function LongInt IVVc_CheckRowType13(record IVVc IVr,row IVVc IVrw,Integer i)
begin
  LongInt res;
  Integer j;
  row IVVc IV2rw;
  val gcvals;
   
  res = 0;
  if (IVVcGiftCertificateCheck(IVr,i,IVrw,13,gcvals)==false) then begin
    res = -1;
    goto LIVVcGiftCertificateCheck;
  end;
  for (j=0;j<i;j=j+1) begin
    MatRowGet(IVr,j,IV2rw);
    if (IVrw.stp==IV2rw.stp) then begin
      if (IVrw.GCNr==IV2rw.GCNr) then begin
        RecordCheckError(2186,"",i,"GCNr");      
        res = -1;
        goto LIVVcGiftCertificateCheck;
      end;
    end;
  end;
LIVVcGiftCertificateCheck:;
  IVVc_CheckRowType13 = res;
  return;
end;

function LongInt IVVc_CheckRowType14(record IVVc IVr,row IVVc IVrw,Integer i)
begin
  LongInt res;
  row IVVc IV2rw;
  Integer j;
  val gcvalr;  

  res = 0;
  if (IVVcGiftCertificateCheck(IVr,i,IVrw,14,gcvalr)==false) then begin
    res = -1;
    goto LIVVc_CheckRowType14;
  end;
  for (j=0;j<i;j=j+1) begin
    MatRowGet(IVr,j,IV2rw);
    if (IVrw.stp==IV2rw.stp) then begin
      if (IVrw.GCNr==IV2rw.GCNr) then begin
        RecordCheckError(2188,"",i,"GCNr");      
        res = -1;
        goto LIVVc_CheckRowType14;
      end;
    end;
  end;
LIVVc_CheckRowType14:;  
  IVVc_CheckRowType14 = res;
  return;
end;

global
function Boolean DisallowPriceLowerCost_IVVc(record IVVc IVp)
begin
  Boolean res;
  Integer i,rwcnt;
  row IVVc IVrw;
  val v;
  record INVc INr;
  
  if (UserCanAction("DisallowPriceLowerCost",false)) then begin
    rwcnt = MatRowCnt(IVp);
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      v = IVrw.FIFO;
      if (v==0) then begin
        if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
          v = INr.InPrice;
        end;
      end;
      if (IVrw.Price<v) then begin
        res = true;
        goto LDisallowPriceLowerCost_IVVc;
      end;
    end;
  end;
LDisallowPriceLowerCost_IVVc:;  
  DisallowPriceLowerCost_IVVc = res;
  return;
end;

function Boolean CheckRegionalPercTax(string eucodex,record RPTaxVc RPTaxr)
begin
  row RPTaxVc RPTaxrw;
  Integer i,rwcnt;
  Boolean res;
  
  res = false;
  rwcnt = MatRowCnt(RPTaxr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RPTaxr,i,RPTaxrw);
    if (RPTaxrw.EUCodex==eucodex) then begin
      res = true;
      goto LCheckRegionalPercTax;
    end;
  end;
LCheckRegionalPercTax:;  
  CheckRegionalPercTax = res;
  return;
end;

function Boolean ValidEInvoiceData_Rows_Finland(record IVVc IVr,row IVVc IVrw,var Integer errcode,var string gotofield)
begin
  Boolean res;

  res = true;
  switch (IVrw.stp) begin 
    case kInvoiceRowTypeStructuredItemComponent:
      goto LkInvoiceRowTypeNormal1;
    case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
      if (nonblank(IVrw.ArtCode)) then begin
        if (IVrw.Quant<=0) then begin
          errcode = 1058;
          gotofield = "Quant";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (blank(IVrw.Quant)) then begin
          errcode = 1058;
          gotofield = "Quant";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (blank(IVrw.Price)) then begin
          errcode = 1058;
          gotofield = "Price";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (blank(IVrw.Sum)) then begin
          errcode = 1058;
          gotofield = "Sum";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (blank(IVrw.UnitCode)) then begin
          errcode = 1058;
          gotofield = "UnitCode";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (len(IVrw.UnitCode)>3) then begin
          errcode = 20581;
          gotofield = "UnitCode";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
      end else begin
        if (IVrw.Quant>0) then begin
          errcode = 1233;
          gotofield = "ArtCode";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
      end;
    case 11:
      if (nonblank(IVrw.ArtCode)) then begin
        if (IVrw.Quant<=0) then begin
          errcode = 1058;
          gotofield = "Quant";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (blank(IVrw.Quant)) then begin
          errcode = 1058;
          gotofield = "Quant";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (blank(IVrw.UnitCode)) then begin
          errcode = 1058;
          gotofield = "UnitCode";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
        if (len(IVrw.UnitCode)>3) then begin
          errcode = 1058;
          gotofield = "UnitCode";
          res = false;
          goto LValidEInvoiceData_Rows_Finland;
        end;
      end;
  end;
LValidEInvoiceData_Rows_Finland:;
  ValidEInvoiceData_Rows_Finland = res;
  return;
end;

global
function Boolean ValidEInvoiceData_Rows(record IVVc IVr,row IVVc IVrw,var Integer errcode,var string gotofield)
begin
  Boolean res;
  record InternetEnablerBlock IEb;
  record CUVc CUr;  

  res = true;
  if (IVr.NoEInvoice==0) then begin
  if (EInvoiceForCustomer2(0,IVr.CustCode,IVr.CurncyCode,CUr)) then begin
    BlockLoad(IEb);
    switch (IEb.RegInCountry) begin
      case 3://Sweden
      case 4:
        res = ValidEInvoiceData_Rows_Finland(IVr,IVrw,errcode,gotofield);
      case 99://HansaMail
        switch (CurrentCompany) begin
          case 40:
            res = ValidEInvoiceData_Rows_Finland(IVr,IVrw,errcode,gotofield);
        end;
    end;
  end;
  end;
LValidEInvoiceData_Rows:;  
  ValidEInvoiceData_Rows = res;
  return;
end;

global
function Integer VerifyTaxTemplateCode(string taxtemplatecodes,var string taxtemplatecode)
begin
  Integer res;
  Integer pos;
  record TaxTemplateVc TTr;
  
  res = 0;
  ExtractObj(taxtemplatecodes,pos,taxtemplatecode);
  while (nonblank(taxtemplatecode)) begin
    TTr.Code = taxtemplatecode;
    if (ReadFirstMain(TTr,1,true)==false) then begin
      res = 1120;
      goto LVerifyTaxTemplateCode;
    end;
    ExtractObj(taxtemplatecodes,pos,taxtemplatecode);
  end;
LVerifyTaxTemplateCode:;  
  VerifyTaxTemplateCode = res;  
  return; 
end;

function val LastCreditedRowSum(record IVVc CreditIVr,LongInt orgnr,LongInt CreditedRow)
begin
/*similar to CreateCreditNoteIV*/
  val res;
  record IVVc tmpIVr;
  row IVVc tmpIVrw;
  row IVVc creditIVrw;
  Integer i,rwcnt;
  Integer t,trwcnt;
  Boolean TrHs,testf;

  rwcnt = MatRowCnt(CreditIVr);
  tmpIVr.CredInv = orgnr;
  ResetLoop(tmpIVr);
  TrHs = true;
  while (LoopBackKey("CredInv",tmpIVr,1,TrHs)) begin
    if (tmpIVr.CredInv!=orgnr) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (tmpIVr.SerNr==CreditIVr.SerNr) then begin testf = false; end;
      if (testf) then begin
        trwcnt = MatRowCnt(tmpIVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CreditIVr,i,creditIVrw);
          if (creditIVrw.CreditedRow>=0) and (creditIVrw.CreditedRow==CreditedRow) then begin
          if (creditIVrw.stp==kInvoiceRowTypeNormal) or (creditIVrw.stp==kInvoiceRowTypeCorrection) then begin
            for (t=0;t<trwcnt;t=t+1) begin
              MatRowGet(tmpIVr,t,tmpIVrw);
              testf = true;
              if (tmpIVrw.stp!=kInvoiceRowTypeCorrection) then begin
                testf = false;
              end;
              if (tmpIVrw.CreditedRow!=creditIVrw.CreditedRow) then begin
                testf = false;
              end;
              if (testf) then begin
                res = tmpIVrw.Sum;
                goto LLastCreditedRowSum;
              end;
            end;
          end;
          end;
        end;
      end;
    end;
  end;
LLastCreditedRowSum:;
  LastCreditedRowSum = res;
  return; 
end;

function val LastCreditedRowQty(record IVVc CreditIVr,LongInt orgnr)
begin
  val res;
  record IVVc tmpIVr;
  row IVVc tmpIVrw;
  row IVVc IVrw;
  Integer i,rwcnt;
  Integer t,trwcnt;
  Boolean TrHs,testf;
  
  
  rwcnt = MatRowCnt(CreditIVr);
  tmpIVr.CredInv = orgnr;
  ResetLoop(tmpIVr);
  TrHs = true;
  while (LoopBackKey("CredInv",tmpIVr,1,TrHs)) begin
    if (tmpIVr.CredInv!=orgnr) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (tmpIVr.SerNr==CreditIVr.SerNr) then begin testf = false; end;
      if (testf) then begin
        trwcnt = MatRowCnt(tmpIVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CreditIVr,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeCorrection) then begin
            for (t=0;t<trwcnt;t=t+1) begin
              MatRowGet(tmpIVr,t,tmpIVrw);
              testf = true;
              if (tmpIVrw.stp!=kInvoiceRowTypeCorrection) then begin
                testf = false;
              end;
              if (tmpIVrw.ArtCode!=IVrw.ArtCode) then begin
                testf = false;
              end;
              if (testf) then begin
                res = tmpIVrw.Quant;
                goto LLastCreditedRowQty;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
LLastCreditedRowQty:;
  LastCreditedRowQty = res;
  return; 
end;

function Integer ValidateBulkSerialNoRow(record SerNrTrackBlock SNrb,record IVVc IVr,row IVVc IVrw,Integer currow,var string gotofield,var Integer gotorow)
begin
  Integer res;
  Integer j,rwcnt;
  row IVVc IV2rw;
  Boolean testf;
  string 255 serialnr;
  string 255 serialnr2;
  val qty,qty2;

  gotorow = -1;
  gotofield = "";  
  if (IVrw.Quant>1) then begin
    rwcnt = len(IVrw.SerialNr);
    for (j=0;j<rwcnt;j=j+1) begin
      if ((IsDigit(Mid(IVrw.SerialNr,j,1))==false) and (Mid(IVrw.SerialNr,j,1)!=":")) then begin
        res = 20434;
        gotorow = currow;
        gotofield = "SerialNr";
        goto LValidateBulkSerialNoRow;
      end;
    end;
  end;
  rwcnt = MatRowCnt(IVr);
  serialnr = FirstInRange(IVrw.SerialNr,60);
  while (nonblank(serialnr)) begin
    for (j=0;j<currow;j=j+1) begin  
      MatRowGet(IVr,j,IV2rw);
      if (IV2rw.Quant!=0) then begin
        if (IVrw.ArtCode==IV2rw.ArtCode) then begin
          qty2 = blankval;
          serialnr2 = FirstInRange(IV2rw.SerialNr,60);
          while (nonblank(serialnr2)) begin
            if (serialnr==serialnr2) then begin
              res = 1241;
              gotorow = currow;
              gotofield = "SerialNr";
              goto LValidateBulkSerialNoRow;
            end;
            qty2 = qty2 + 1;
            serialnr2 = NextSerialNumber(IV2rw.ArtCode,serialnr2,SNrb);
            if (qty2>=IV2rw.Quant) then begin serialnr2 = ""; end;
          end;
        end;
      end;
    end;
    qty = qty + 1;
    serialnr = NextSerialNumber(IVrw.ArtCode,serialnr,SNrb);
    if (qty>=IVrw.Quant) then begin serialnr = ""; end;
  end;
LValidateBulkSerialNoRow:;  
  ValidateBulkSerialNoRow = res;
  return;
end;

global
function Integer IVVcRecordCheckRows(record IVVc IVp,record IVVc IV2p,record CUVc CUr,record ORVc ORr,record ModuleBlock Ob,record MainStockBlock MSb,record AccBlock ARAccb,
                                     Boolean check,Boolean lightFlag,LongInt stat,
                                     var val cash)
begin
  Integer res;
  row IVVc IVrw;
  row IVVc IV2rw;
  Integer i,rwcnt,j,cnt,errcode,rwcnt2;
  Integer insertmode,updatemode;
  Boolean testf,regiontaxf;
  string 255 tstr,location,errstr,eucodex;
  val shquant,quant,prev,prevsn,prepaysum,stockreservq;
  record ARPayVc ARPayr;  
  record AutSimPerVc ASPr;
  record INVc INr;
  record ITVc ITr;
  record ItemStatusVc ISr;  
  record LocationVc Locationr;
  record AccVc Accr;
  record RPTaxVc RPTaxr;
  record IVVc orgIVr;
  row IVVc orgIVrw;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  record OTCheckBlock OTCheckr;
  record QTSettBlock QTb;
  Boolean initotcheckf;
  record UserVc User;
  val t,s,price,vreb,baseprice,calcprice,temp,tax2prc,discountprice;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean dummyf,calcpricef;
  record PISVc PISr;
  record PosVc Posr;
  LongInt ErrorCode;
  Boolean transf;
  record CYBlock CYb;
  record SerNrTrackBlock SNrb;
  string 255 serialnr;
  val serqty;
  string 255 gotofield;
  Integer gotorow;
  record ACPVc ACPr;
  record RetVc Retr;
  row RetVc Retrw;
  Boolean retf;
  record QTVc QTr;
  row QTVc QTrw;
  Boolean qtf;
  record BrazilEInvTypeVc BEInvTyper;
  record EInvoiceBlock EIb;
  record BaseCurBlock BCb;
  Integer daysrange;

  BlockLoad(OTCheckr);
  BlockLoad(QTb);
  BlockLoad(CYb);
  BlockLoad(SNrb);
  BlockLoad(EIb);
  BlockLoad(BCb);
  
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    orgIVr.SerNr = IVp.CredInv;
    if (ReadFirstMain(orgIVr,1,true)) then begin
    end;
  end;
  if (nonblank(CUr.Region)) then begin
    RPTaxr.Code = CUr.Region;
    regiontaxf = ReadFirstMain(RPTaxr,1,true);
  end;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  transf = false;
  if ((IVp.OKFlag==1) or (IVp.OKFlag==6)) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (IV2p.OKFlag==0) then begin transf = true; end;
    end;  
  end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    if (IVp.RetNr>0) then begin
      Retr.SerNr = IVp.RetNr;
      retf = ReadFirstMain(Retr,1,true);
    end;
  end;
  if (IVp.QTNr>0) then begin
    QTr.SerNr = IVp.QTNr;
    qtf = ReadFirstMain(QTr,1,true);
  end;
  if (HasLocalization("BRA")) then begin
    BEInvTyper.Code = IVp.BrazilEInvType;
    ReadFirstMain(BEInvTyper,1,true);
  end;
  rwcnt = MatRowCnt(IVp);
  if (RecordValid(IV2p)) then begin
    rwcnt2 = MatRowCnt(IV2p);
  end;
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    testf = true;    
    if (IsStandardProduct) then begin
      if (HasLocalization("POL")) then begin
        if (len(IVrw.Spec)>35) then begin
          RecordCheckError(22139,"",i,"Spec");      
          res = -1;
          goto L99;
        end;
      end;
    end;
    switch (IVrw.stp) begin
      case kInvoiceRowTypeGiftVoucherSold:
        res = IVVc_CheckRowType13(IVp,IVrw,i);
        if (res!=0) then begin
          goto L99;
        end;
      case kInvoiceRowTypeGiftVoucherPayment:
        cash = cash + IVrw.Sum;      
        res = IVVc_CheckRowType14(IVp,IVrw,i);
        if (res!=0) then begin
          goto L99;
        end;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        cash = cash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeCashPayment:
        cash = cash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeChequePayment:
        cash = cash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeCreditCardPayment:
        cash = cash + IVrw.Sum;      
      case kInvoiceRowTypeLoan:
        if (CheckLoanInv(IVp)==false) then begin
          res = -1;
          goto L99;
        end;
      case kInvoiceRowTypeLoanInterest:
        if (CheckLoanInv(IVp)==false) then begin
          res = -1;
          goto L99;
        end;
     case kInvoiceRowTypeCorrection:
        if (IVp.UpdStockFlag!=0 and IVp.OrderNr==-1 and IVp.SVONr==-1) then begin
          if (MSb.requireLocation!=0) then begin            
            if (blank(IVp.Location)) and (blank(IVrw.Location)) then begin
              RecordCheckError(26213," " & IVp.Location,-1,"Location");      
              res = -1; 
              goto L99;
            end;
          end;
        end;  
        if (nonblank(IVrw.SalesAcc)) then begin
          VerifyRowObjects("SL",IVp.Objects,IVrw.Objects,IVrw.SalesAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);
          if (errcode!=0) then begin
            RecordCheckError(errcode,errstr,i,"Objects");      
            res = -1; 
            goto L99;
          end;
        end;
     case kInvoiceRowTypeCredit:
        for (j=0;j<i;j=j+1) begin
          MatRowGet(IVp,j,IV2rw);
          if (IV2rw.stp==kInvoiceRowTypeCredit) then begin
            RecordCheckError(22049,"",i,"OrdRow");      
            res = -1; 
            goto L99;
          end;
        end;
     case kInvoiceRowTypePerceptionTax:
        if (blank(IVrw.SalesAcc)) then begin
          RecordCheckError(20074,"",i,"SalesAcc");      
          res = -1; 
          goto L99;
        end else begin
          Accr.AccNumber = IVrw.SalesAcc;
          if (ReadFirstMain(Accr,1,true)==false) then begin
            RecordCheckError(20074,"",i,"SalesAcc");      
            res = -1; 
            goto L99;
          end;
        end;
     case kInvoiceRowTypeStructuredItemComponent:
       goto LkInvoiceRowTypeNormal2;
     case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
       if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (IVp.UpdStockFlag!=0) then begin
            if (IVp.OrderNr>0) then begin
              if (IVrw.OrdRow>=0) then begin
//        MessageBox(20103,""); //people wanted error
                RecordCheckError(20103,"",i,"ArtCode");      
                res = -1; 
                goto L99;
              end;
            end;
            if (orgIVr.SVONr>0) then begin 
              RecordCheckError(20103,"",i,"ArtCode");      
              res = -1; 
              goto L99;
            end;
          end;
        end;

        if (IVp.UpdStockFlag!=0 and IVp.OrderNr==-1 and IVp.SVONr==-1) then begin
          if (MSb.requireLocation!=0) then begin            
            if (nonblank(IVrw.ArtCode)) then begin
              if (blank(IVp.Location)) and (blank(IVrw.Location)) then begin
                RecordCheckError(26213," " & IVp.Location,-1,"Location");      
                res = -1; 
                goto L99;
              end;
            end;
          end;
        end;  
        if (transf) then begin
          if (ARAccb.DisallowNegativeRowSumsonSales!=0) then begin
            if (IVrw.stp!=kInvoiceRowTypeDownpayment) then begin
              if (IVrw.Sum<0) then begin
                RecordCheckError(22047,"",i,"Sum");      
                res = -1; 
                goto L99;
              end;
            end;
          end;
        end;
        if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (IVp.CredInv>0) then begin
            if (IVrw.CreditedRow>=0) then begin
              MatRowGet(orgIVr,IVrw.CreditedRow,orgIVrw);
              if (orgIVrw.ArtCode!=IVrw.ArtCode) then begin
                RecordCheckError(20754,"",i,"ArtCode");      
                res = -1; 
                goto L99;
              end;  
              switch (stat) begin
                case Rs_insert:
                  s = LastCreditedRowSum(IVp,orgIVr.SerNr,IVrw.CreditedRow);
                case Rs_update:
                  s = LastCreditedRowSum(IV2p,orgIVr.SerNr,IVrw.CreditedRow);
              end;
              if (blank(s)) then begin s = orgIVrw.Sum; end;
              if (s<IVrw.Sum) then begin
                RecordCheckError(20878,"",i,"Sum");      
                res = -1; 
                goto L99;
              end;
              if (IVp.UpdStockFlag!=0) then begin
                if (IVrw.NotUpdStockFlag==0) then begin
                  if (orgIVrw.Quant<IVrw.Quant) then begin
                    RecordCheckError(1733,"",i,"Quant");      
                    res = -1; 
                    goto L99;
                  end;
                end;
              end;
            end else begin
              if (IVp.UpdStockFlag!=0) then begin
                if (IVrw.NotUpdStockFlag==0) then begin
                  s = LastCreditedRowQty(IVp,orgIVr.SerNr);
                  if (IVrw.Quant!=s) then begin
                    RecordCheckError(1733,"",i,"Quant");      
                    res = -1; 
                    goto L99;
                  end;
                end;
              end;
            end;
          end;
        end;
        if (nonblank(IVrw.Salesmen)) then begin    
          errcode = VerifySalesmen(IVrw.Salesmen,tstr);
          if (errcode!=0) then begin
            RecordCheckError(errcode,": " & tstr,i,"Salesmen");
            res = -1; 
            goto L99;
          end;
        end;
        if (nonblank(IVrw.RvrsVATCode)) then begin
          if (blank(IVp.VATNr)) then begin
            RecordCheckError(1058,"",-1,"VATNr");
            res = -1; 
            goto L99;
          end;
        end;
        location = IVrw.Location;
        if (blank(location)) then begin
          location = IVp.Location;
        end;
        if (blank(location)) then begin
          location = MSb.MainStock;
        end;
// Amazing that before this addition, it was possible to put ANY location on the invoice and it wouldn't complain....
        if (nonblank(location)) then begin
          Locationr.Code = location;
          if (ReadFirstMain(Locationr,1,true)==false) then begin
            RecordCheckError(1290,"",-1,"Location");      
            res = -1; 
            goto L99;
          end;                    
          if (StockRecordForLocationAllowed("IVVc",location,IVrw.ArtCode,IVp.TransDate,IVp.OKFlag,errcode,errstr)==false) then begin
            RecordCheckError(errcode,errstr,i,"ArtCode");      
            res = -1;
            goto L99;
          end;
          if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
            if (AllowedToTakeFromThisLoc(Locationr)==false) then begin
              RecordCheckError(1768,"",-1,"Location");      
              res = -1;
              goto L99;
            end;
          end;
        end;
        if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (IVp.RetNr>0) then begin
            if (IVrw.RetRow<MatRowCnt(Retr)) and (IVrw.RetRow>=0) then begin
              MatRowGet(Retr,IVrw.RetRow,Retrw);
              if (IVrw.Quant>Retrw.Quant) then begin
                RecordCheckError(1733,"",i,"Quant");      
                res = -1; 
                goto L99;
              end;
            end;
          end;
        end;
        if (IVp.QTNr>0) and (QTb.DisallowInvoicemorethanQuoted!=0) then begin
          if (IVrw.QTRow<MatRowCnt(QTr)) and (IVrw.QTRow>=0) then begin
            prev = blankval;
            if (stat==Rs_update) then begin
              for (j=0;j<rwcnt2;j=j+1) begin
                MatRowGet(IV2p,j,IV2rw);
                if (IVrw.QTRow==IV2rw.QTRow) then begin
                  prev = prev + IV2rw.Quant;
                end;
              end;
            end;

            MatRowGet(QTr,IVrw.QTRow,QTrw);
            if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
              switch (stat) begin
                case Rs_update:
                  quant = QTrw.Invd - IVrw.Quant + prev;
                  if (AbsoluteVal(quant)>AbsoluteVal(QTrw.Quant)) then begin
                    RecordCheckError(1733,"",i,"Quant");      
                    res = -1; 
                    goto L99;
                  end;
              end;
            end else begin
              switch (stat) begin
                case Rs_update:
                  quant = IVrw.Quant + QTrw.Invd - prev;
                  if (AbsoluteVal(quant)>AbsoluteVal(QTrw.Quant)) then begin
                    RecordCheckError(1733,"",i,"Quant");      
                    res = -1; 
                    goto L99;
                  end; 
               case Rs_insert:
                  quant = IVrw.Quant + QTrw.Invd;
                  if (AbsoluteVal(quant)>AbsoluteVal(QTrw.Quant)) then begin
                    RecordCheckError(1733,"",i,"Quant");      
                    res = -1; 
                    goto L99;
                  end; 
               case Rs_normal:
                  quant = QTrw.Invd;
                  if (AbsoluteVal(quant)>AbsoluteVal(QTrw.Quant)) then begin
                    RecordCheckError(1733,"",i,"Quant");      
                    res = -1; 
                    goto L99;
                  end; 
              end;
            end;
          end;
        end;
        if (ValidEInvoiceData_Rows(IVp,IVrw,errcode,tstr)==false) then begin
          RecordCheckError(errcode,"",i,tstr);      
          res = -1; 
          goto L99;
        end;
        if (nonblank(IVrw.VATCode)) then begin
          if (VATAccIsClosed(IVrw.VATCode,tstr,1)) then begin
            RecordCheckError(1258,tstr,i,"VATCode");      
            res = -1; 
            goto L99;
          end;  
          if (blank(IVrw.Sum)) then begin
            RecordCheckError(40308,"",i,"Sum");      
            res = -1; 
            goto L99;
          end;
        end;
        if (nonblank(IVrw.ArtCode)) then begin
          if (HasLocalization("ARG,PRT")) then begin
            if (IVrw.Quant==0) then begin
              RecordCheckError(2210,"",i,"Quant");      
              res = -1; 
              goto L99;
            end;
            /* nk must be removed for Anabela as well, she commented in Keyla's mail
            if (HasLocalization("PRT")) then begin
              if (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
                if (IVrw.Sum==0) and (IVrw.vRebate==0) then begin
                  RecordCheckError(2210,"",i,"Sum");      
                  res = -1; 
                  goto L99;
                end;
              end;
            end;
            */
          end;
          if (HasLocalization("PRT")) then begin
            if (IVrw.vRebate<0) then begin
              RecordCheckError(22034,"",i,"vRebate");      
              res = -1; 
              goto L99;
            end;
          end;
          if (IVrw.Quant!=0) and (IVrw.Price==0) and (IVrw.Sum!=0) then begin
            RecordCheckError(2210,"",i,"Price");      
            res = -1; 
            goto L99;
          end;
          if (ReadFirstItem(IVrw.ArtCode,INr,false,true)) then begin
            if (INr.Terminated!=0) then begin
              RecordCheckError(1266,IVrw.ArtCode,i,"ArtCode");      
              res = -1; 
              goto L99;
            end;
          end else begin
            RecordCheckError(1120,IVrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto L99;
          end;
          
          if (transf) then begin
            ACPr.ArtCode = IVrw.ArtCode;
            if (ReadFirstMain(ACPr,1,true)) then begin
              if ((blank(IVrw.MotherNr)) and (blank(IVrw.MotherSecondarySerialNr)) and (blank(IVrw.MotherAlternateDeviceID))) then begin
                RecordCheckError(23703,"",i,"MotherNr");      
                res = -1; 
                goto L99;
              end;
            end;
          end;
          if (UserCanAction("AllowNegativePriceonIV",true)==false) then begin
            if (IVrw.Price<0) then begin
              RecordCheckError(20825,"",i,"Price");      
              res = -1;
              goto L99;
            end;
          end;
          if (blank(IVp.CAE)) then begin
            if (!INVc_AllowSales(INr,ErrorCode)) then begin
              RecordCheckError(ErrorCode,"",i,"ArtCode");      
              res = -1; 
              goto L99;
            end;
          end;
          switch (INr.ItemType) begin
            case kItemTypeStocked:           
              if (ShouldInvoiceRowUpdateStock(IVp,IVrw)) then begin
                if (Locationr.RequirePos!=0) then begin
                  if (IVrw.Quant>0) and (blank(IVrw.PosCode)) then begin
                    RecordCheckError(1854,"",i,"PosCode"); 
                    res = -1;
                    goto L99;
                  end;                  
                end;           
              end;
              if (nonblank(IVrw.PosCode)) then begin
                Posr.Code = IVrw.PosCode;
                Posr.Location = location;
                if (ReadFirstKey("Location",Posr,2,true)==false) then begin
                  RecordCheckError(1120,IVrw.PosCode,i,"PosCode");      
                  res = -1;
                  goto L99;
                end;
              end;
              if (daysrange!=10) then begin 
                daysrange = 5;
              end;  
            case kItemTypeStructured:           
              if (daysrange!=10) then begin 
                daysrange = 5;
              end;              
            case kItemTypePlain:           
              daysrange = 10;
              if (EIb.SendExportIV==1) and (EIb.OutArgEInvoices==1) and (IVp.ExportFlag!=0) then begin 
                daysrange = 5;
              end;  
            case kItemTypeService:           
              daysrange = 10;
              if (EIb.SendExportIV==1) and (EIb.OutArgEInvoices==1) and (IVp.ExportFlag!=0) then begin 
                daysrange = 5;
              end;  
          end;
          if (HasLocalization("BRA")) then begin
            if (BEInvTyper.ServiceFlag and INr.ItemType!=kItemTypeService) then begin
              RecordCheckError(20119,IVrw.ArtCode,i,"ArtCode");      
              res = -1;
              goto L99;
            end;
          end;

          if (nonblank(IVrw.DiscApprovedBy)) then begin
            User.Code = IVrw.DiscApprovedBy;
          end else begin
            User.Code = CurrentUser;
          end;
          if (ReadFirstMain(User,1,true)) then begin 
          end;
          if (nonblank(User.MinPLCode)) or (blank(IVrw.SalesAcc)) then begin
//            if (blank(IVrw.DiscApprovedBy)) then begin
              if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVp.CurncyCode,
                                  IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,
                                  IVp.LangCode,IVp.CustCat,User.MinPLCode,IVp.RebCode,
                                  price,curitemname,vreb,vatcode,baseprice,salesacc,
                                  IVp.ExportFlag,calcpricef,IVp.TransDate,IVp.TransTime,IVp.CustCode,true,dummyf,IVp.PayDeal,tax2code,tax2prc,IVp.Region,location,taxtemplatecode)) then begin
                if (nonblank(User.MinPLCode)) then begin                         
                  discountprice = IVrw.Sum/IVrw.Quant;
                  if (price>discountprice) then begin 
                    errstr = discountprice;
                    errstr = errstr & USetStr(20111) & price;
                    RecordCheckError(20110,errstr,i,"Price");      
                    res = -1; 
                    goto L99;
                  end;
                end;
                if (blank(IVrw.SalesAcc)) then begin
                  IVrw.SalesAcc = salesacc;
                end;
              end;
//            end;
          end;
          if (Ob.NegQtyOnIV==0) then begin
//            if (IVp.UpdStockFlag!=0) or (GetVATLaw==vatPortuguese) then begin
//bug according to Elar
            if (true) then begin
              if (IVrw.Quant<0) then begin
                RecordCheckError(1574,"",i,"Quant");      
                res = -1; 
                goto L99;
              end;
            end;
          end else begin
/*          
not needed any more
            if (INr.SerNrf>0) then begin
              if (IVrw.Quant<0) then begin
                RecordCheckError(1574,"",i,"Quant");      
                res = -1; 
                goto L99;
              end;
            end;
*/            
          end;
/*          
          if (blank(IVrw.Quant)) then begin
            RecordCheckError(20773,"",i,"Quant");      
            res = -1; 
            goto L99;
          end;
*/          
          if (CheckAllowedSize(INr,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval)==false) then begin
            RecordCheckError(1480,IVrw.ArtCode,i,"UnitXval");      
            res = -1; 
            goto L99;
          end;
          if (SNrb.BulkSerialNos==0) then begin
            if (IsSerialNrCorrect(IVrw.SerialNr)==false) then begin
              RecordCheckError(24154,IVrw.SerialNr,i,"SerialNr");      
              res = -1; 
              goto L99;
            end;
          end;
          if (CheckSerialStatus(IVrw.ArtCode,IVrw.SerialNr,tstr)==2) then begin
            RecordCheckError(2210," " & tstr,i,"SerialNr");      
            res = -1; 
//            MessageBox(0,tstr);
            goto L99;
          end;
          if (regiontaxf) then begin
            eucodex = INr.EUCodex;
            if (blank(eucodex)) then begin
              ITr.Code = INr.Group; 
              if (ReadFirstMain(ITr,1,true)) then begin end;
              eucodex = ITr.EUCodex;
            end;
            if (ARAccb.AllowItemWOCommodity==0) then begin
              if (blank(eucodex)) then begin
                RecordCheckError(20076,"",i,"ArtCode");      
                res = -1; 
                goto L99;
              end;
            end;
            if (nonblank(eucodex)) then begin
              if (CheckRegionalPercTax(eucodex,RPTaxr)==false) then begin
                RecordCheckError(20077," " & IVrw.ArtCode,i,"ArtCode");      
                res = -1; 
                goto L99;
              end;
            end;
          end;
          if (check) then begin
            if (IVp.UpdStockFlag!=0) then begin
              if (IsRecipeClosed(INr.Recepy)) then begin
                RecordCheckError(2088,"",i,"ArtCode");      
                res = -1; 
                goto L99;
              end;
            end;
          end;    
          
        end else begin
          if (HasLocalization("ARG,MEX,PRT")) then begin
            if (blank(IVrw.ArtCode)) then begin
              if (nonblank(IVrw.Sum) or nonblank(IVrw.SalesAcc)) then begin
                RecordCheckError(2210,"",i,"ArtCode");
                res = -1;
                goto L99;
              end;
            end;
          end;
          testf = false;
        end;
        if (nonblank(IVrw.PeriodCode)) then begin
          ASPr.Code = IVrw.PeriodCode;
          if (ReadFirstMain(ASPr,1,true)==false) then begin
            RecordCheckError(1120,IVrw.PeriodCode,i,"PeriodCode");      
            res = -1; 
            goto L99;
          end;
        end;
        if (lightFlag==false) then begin
          if ((check==true) and (nonblank(IVrw.ArtCode))) then begin
            if (MSb.dontAllowOvership==1) then begin
              if (HasLocalization("RUS") and IsStandardProduct) then begin 
              end else begin   
                if ((IVrw.OrdRow!=-1) and (IVp.OrderNr!=-1) and (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales)) then begin
                  if (IsEnterprise or (IsStandardProduct and HasModIN)) then begin
                  if (ORr.InvBeforeShip==0) then begin
                    if (GetDeliveredQty(IVp.OrderNr,IVrw.OrdRow,IVrw.Quant,shquant,MSb)) then begin end;
                    if (IVrw.Quant>shquant) then begin
                      RecordCheckError(1235,"",i,"Quant");      
                      res = -1; 
                      goto L99;            
                    end;
                  end;
                  GetInvoicedQty(IVp.SerNr,IVp.OrderNr,IVrw.OrdRow,shquant,MSb);
                  shquant = shquant - IVrw.Quant;
                  if (shquant<0) then begin
                    RecordCheckError(1092,"",i,"Quant");      
                    res = -1;
                    goto L99;
                  end;                
                end;
                end;
              end;          
              if ((INr.ItemType!=0) and (INr.ItemType!=3)) then begin
                if ((IVp.UpdStockFlag!=0) and ((IVrw.OrdRow==-1) or (IVp.QTNr!=-1))) then begin
                  if (nonblank(IVrw.Recepy)) then begin
                    location = IVrw.Location;
                    if (blank(location)) then begin
                      location = IVp.Location;
                    end;
                    if (blank(location)) then begin
                      location = MSb.MainStock;
                    end;  
                    if (HasModSL) then begin
                      if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
                        if (CheckStructureItemsLevel(IVrw.ArtCode,IVrw.Recepy,location,IVrw.Quant)==false) then begin
                          RecordCheckError(1247,": " & IVrw.ArtCode,i,"Quant");     
                          res = -1; 
                          goto L99;
                        end;     
                      end;     
                    end;     
                  end else begin
                    if (INr.ItemType==1) then begin
                    if (ShouldInvoiceRowUpdateStock(IVp,IVrw)) then begin
// check if Recepy is blank on a Structure item. 
// Should it possible to create Invoice with structure item and OK invoice even if teher is no 
// this structrure item in the stock 
                      prev = blankval;
                      for (j=0;j<i;j=j+1) begin
                        MatRowGet(IVp,j,IV2rw);
                        testf = true;
                        if (IV2rw.ArtCode!=IVrw.ArtCode) then begin testf = false; end;
                        if (INr.SerNrf!=0) then begin
                          if ((IV2rw.SerialNr!=IVrw.SerialNr) or (SNrb.BulkSerialNos!=0)) then begin testf = false; end;
                        end;
                        if (testf) then begin
                          if (ShouldInvoiceRowUpdateStock(IVp,IV2rw)) then begin
                          if ((IV2rw.OrdRow==-1) or (IVp.QTNr!=-1)) then begin
                            if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
                              switch (IV2rw.stp) begin
                                case 11: prev = prev + IV2rw.Quant;
                                otherwise prev = prev - IV2rw.Quant;
                              end;
                            end else begin
                              prev = prev + IV2rw.Quant;
                            end;
                          end;  
                          end;  
                        end;  
                      end;
                      if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
                        switch (IVrw.stp) begin
                          case 11: prev = prev + IVrw.Quant;
                          otherwise prev = prev - IVrw.Quant;
                        end;
                      end else begin
                        prev = prev + IVrw.Quant;
                      end;                      
                      location = IVrw.Location;
                      if (blank(location)) then begin
                        location = IVp.Location;
                      end;
                      if (blank(location)) then begin
                        location = MSb.MainStock;
                      end;  
                      if (nonblank(IVrw.PosCode)) then begin
                        FindStockValueAtPosition(IVrw.ArtCode,location,IVrw.PosCode,PISr);
                        if (prev>PISr.LeftQty) then begin
                          RecordCheckError(1397,"",i,"PosCode");      
                          res = -1;
                          goto L99;
                        end;
                      end;
                      if (IVp.SVONr==-1) then begin
                        if (SNrb.BulkSerialNos!=0) then begin
                          FindStockValueInclStockReserv(IVp.OrderNr,IVrw.ArtCode,"",location,ISr,stockreservq);
                        end else begin
                          FindStockValueInclStockReserv(IVp.OrderNr,IVrw.ArtCode,IVrw.SerialNr,location,ISr,stockreservq);
                        end;
                        if ((ISr.Instock-stockreservq<prev) and (prev>0)) then begin
                          if (HasModSL) then begin
                            RecordCheckError(1247,": " & IVrw.ArtCode,i,"Quant");      
                            res = -1; 
                            goto L99;
                          end;
                        end;
                      end;
                    end;
                    end;
                  end;
                end;  
              end;  
            end else begin
              location = IVrw.Location;
              if (blank(location)) then begin
                location = IVp.Location;
              end;
              if (nonblank(location)) then begin
                Locationr.Code = location;
                if (ReadFirstMain(Locationr,1,true)==false) then begin
                  RecordCheckError(1290,"",-1,"Location");      
                  res = -1; 
                  goto L99;
                end;
              end;
            end;
          end;
        end;
        if ((check==true) and (nonblank(IVrw.ArtCode))) then begin
//        if ((IVp.UpdStockFlag!=0) and ((IVrw.OrdRow==-1) or (IVp.QTNr!=-1))) then begin
        if (IVrw.NotUpdStockFlag==0) then begin
          if (INr.SerNrf<3) then begin
            if (INr.SerNrf>0) then begin  
              if (blank(IVrw.SerialNr)) then begin
                if (IVrw.NotUpdStockFlag==0) then begin
                  if (IVrw.Quant!=0) then begin
                     RecordCheckError(1239,"",i,"SerialNr");      
                     res = -1; 
                     goto L99;
                   end;
                 end;
               end;
              // is the serial number available at given location 
              location = IVrw.Location;
              if (blank(location)) then begin
                location = IVp.Location;
              end;
              if (blank(location)) then begin          
                location = MSb.MainStock;
              end;
              if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
                switch (IVrw.stp) begin
                  case 11: quant = IVrw.Quant;
                  otherwise quant = -IVrw.Quant;
                end;
              end else begin
                quant = IVrw.Quant;
              end;                
              if (MSb.NoSerOnPU==0) then begin
              if (quant>0) then begin
                if (INr.SerNrf==1) then begin
                  if (IVrw.NotUpdStockFlag==0) then begin
                    if (SNrb.BulkSerialNos!=0) then begin
                      serqty = blankval;
                      serialnr = FirstInRange(IVrw.SerialNr,60);
                      while (nonblank(serialnr)) begin
                        if (SerialNrAvail(IVrw.ArtCode,serialnr,location,1.00)==false) then begin
                          RecordCheckError(1240,"",i,"SerialNr");      
                          res = -1; 
                          goto L99;
                        end;
                        serqty = serqty + 1;
                        serialnr = NextSerialNumber(IVrw.ArtCode,serialnr,SNrb);
                        if (serqty>=IVrw.Quant) then begin serialnr = ""; end;
                      end;
                    end else begin
                      if (quant>1) then begin
                        RecordCheckError(1242,"",i,"SerialNr");      
                        res = -1; 
                        goto L99;
                      end;
                      if (SerialNrAvail(IVrw.ArtCode,IVrw.SerialNr,location,quant)==false) then begin
                        RecordCheckError(1240,"",i,"SerialNr");      
                        res = -1; 
                        goto L99;
                      end;
                    end;                    
                  end;
                end else begin  
                  if (IVrw.NotUpdStockFlag==0) then begin
                    prevsn = blankval;
                    for (cnt=0;cnt<i;cnt=cnt+1) begin
                      MatRowGet(IVp,cnt,IV2rw);
                      testf = true;
                      if (IV2rw.ArtCode!=IVrw.ArtCode) then begin testf = false; end;
                      if (INr.SerNrf!=0) then begin
                        if (IV2rw.SerialNr!=IVrw.SerialNr) then begin testf = false; end;
                      end;
                      if (testf) then begin
                        prevsn = prevsn + IV2rw.Quant;
                      end;
                    end;
                    prevsn = prevsn + IVrw.Quant;
                    if (SerialNrAvail(IVrw.ArtCode,IVrw.SerialNr,location,prevsn)==false) then begin
                      RecordCheckError(1240,"",i,"SerialNr");      
                      res = -1; 
                      goto L99;
                    end;
                  end;
                end;
              end else begin
                quant = -quant;
                if (INr.SerNrf==1) then begin
                  if (SerialNrAvail(IVrw.ArtCode,IVrw.SerialNr,location,quant)==true) then begin
                    RecordCheckError(1241,"",i,"SerialNr");      
                    res = -1; 
                    goto L99;
                  end;
                end;  
              end;
              end;
              if (INr.SerNrf==1) then begin
                if (SNrb.BulkSerialNos!=0) then begin
                  errcode = ValidateBulkSerialNoRow(SNrb,IVp,IVrw,i,gotofield,gotorow);
                  if (errcode) then begin
                    RecordCheckError(errcode,"",gotorow,gotofield);      
                    res = -1;
                    goto L99;
                  end;
                end else begin
                  if (IVrw.Quant!=1.00) then begin
                    if (IVrw.Quant==-1 and (SerialNrAvail(IVrw.ArtCode,IVrw.SerialNr,location,quant)==false) and 
                      (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales)) then begin 
                      // allow
                    end else begin 
                      RecordCheckError(1242,"",i,"SerialNr");
                      res = -1; 
                      goto L99;
                    end;
                  end;
                  for (j=0;j<i;j=j+1) begin
                     MatRowGet(IVp,j,IV2rw);
                     testf = true;
                     if (IV2rw.ArtCode!=IVrw.ArtCode) then begin testf = false; end;
                     if (INr.SerNrf!=0) then begin
                       if (IV2rw.SerialNr!=IVrw.SerialNr) then begin testf = false; end;
                     end;
                     if (testf) then begin
                       RecordCheckError(1242,"",i,"SerialNr");
                       res = -1; 
                       goto L99;
                     end;
                  end;
                end;
              end;
            end;
          end else begin
            location = IVrw.Location;
            if (blank(location)) then begin
              location = IVp.Location;
            end;
            if (blank(location)) then begin
              location = MSb.MainStock;
            end;  
            if (blank(IVrw.SerialNr)) then begin
              if (IVrw.Quant!=0) then begin
                RecordCheckError(1239,"",i,"SerialNr");      
                res = -1; 
                goto L99;
              end;
            end;
            if (SerialNrOnThisIV(IVp,IVrw.ArtCode,IVrw.SerialNr)>1) then begin
              RecordCheckError(1242,"",i,"SerialNr");      
              res = -1; 
              goto L99;
            end;
            quant = -IVrw.Quant;          
            if (SerialNrAvail(IVrw.ArtCode,IVrw.SerialNr,location,quant)==true) then begin
              RecordCheckError(1241,"",i,"SerialNr");      
              res = -1; 
              goto L99;
            end;          
          end;
        end;
        end;
        if ((nonblank(IVrw.VATCode)) and (IsVATCodeDefined(IVrw.VATCode)==false)) then begin
          RecordCheckError(1120,IVrw.VATCode,i,"VATCode");      
          res = -1; 
          goto L99;
        end;
        if (nonblank(IVrw.TaxTemplateCode)) then begin
          errcode = VerifyTaxTemplateCode(IVrw.TaxTemplateCode,tstr);
          if (errcode!=0) then begin
            RecordCheckError(1120,tstr,i,"TaxTemplateCode");      
            res = -1; 
            goto L99;
          end;
        end;
        if (lightFlag==false) then begin
          if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
            if (nonblank(IVrw.RvrsVATCode)) then begin
              if (IsVATCodeDefined(IVrw.RvrsVATCode)==false) then begin
                RecordCheckError(1120,"",i,"RvrsVATCode");      
                res = -1; 
                goto L99;
              end;
            end else begin
              if ((blank(IVrw.VATCode) and (nonblank(IVrw.Sum)))) and (nonblank(IVrw.ArtCode)) then begin
                RecordCheckError(1120,"",i,"VATCode");      
                res = -1; 
                goto L99;
              end;
            end;
          end else begin
            if ((blank(IVrw.TaxTemplateCode) and (nonblank(IVrw.Sum)))) and (nonblank(IVrw.ArtCode)) then begin
              RecordCheckError(24201,"",i,"VATCode");      
              res = -1; 
              goto L99;
            end;
          end;
        end;
          if (CorrectM4ValProc(IVrw.vRebate)==false) then begin
            RecordCheckError(1019,"",i,"vRebate");      
            res = -1; 
            goto L99;
          end;
          if (nonblank(IVrw.SalesAcc)) then begin
            VerifyRowObjects("SL",IVp.Objects,IVrw.Objects,IVrw.SalesAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);
            if (errcode!=0) then begin
              RecordCheckError(errcode,errstr,i,"Objects");      
              res = -1; 
              goto L99;
            end;
          end;
          if (IsControlAccount(IVrw.SalesAcc,true,false)) then begin
            RecordCheckError(1082,"",i,"SalesAcc");      
            res = -1; 
            goto L99;
          end;
            Accr.AccNumber = IVrw.SalesAcc;
            if (ReadFirstMain(Accr,1,true)) then begin
              if (ARAccb.VATCodeCtrl==1) then begin
                if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVrw.VATCode)) then begin
                  RecordCheckError(1245,"",i,"VATCode");      
                  res = -1; 
                  goto L99;
                end;
              end;
              if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
                RecordCheckError(1084,IVrw.SalesAcc,i,"SalesAcc");      
                res = -1; 
                goto L99;
              end;                        
            end else begin
              tstr = IVrw.SalesAcc;
              ConvertSalesAcc(tstr,IVp.ExportFlag);
              Accr.AccNumber = tstr;
              if (ReadFirstMain(Accr,1,true)) then begin
                if (ARAccb.VATCodeCtrl==1) then begin
                  if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVrw.VATCode)) then begin
                    RecordCheckError(1245,"",i,"VATCode");      
                    res = -1; 
                    goto L99;
                  end;
                end;
                if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
                  RecordCheckError(1084,IVrw.SalesAcc,i,"SalesAcc");      
                  res = -1; 
                  goto L99;
                end;                                        
              end;
            end;
      case kInvoiceRowTypeDownpayment:
        if (lightFlag==false) then begin
          testf = false;
          if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
            if (blank(IVrw.VATCode) and (IVrw.Sum!=0)) then begin
              RecordCheckError(1134,"",i,"VATCode");      
              res = -1; 
              goto L99;
            end;
          end else begin
            if (blank(IVrw.TaxTemplateCode) and (IVrw.Sum!=0)) then begin
              RecordCheckError(24201,"",i,"VATCode");      
              res = -1;
              goto L99;
            end;
          end;
          if (ORr.SerNr>0) then begin
            if (IVp.InvType!=kInvoiceTypeDownpayment) then begin
              if (((ORr.DownPaySent-ORr.DownPayRedcd) + IVrw.Sum)>ORr.Sum4) then begin
                RecordCheckError(20406,ORr.Sum4-(ORr.DownPaySent-ORr.DownPayRedcd),i,"Sum");
                res = -1;
                goto L99;
              end;
            end else begin
              switch (stat) begin
                case Rs_update:
                  MatRowGet(IV2p,i,IV2rw);
                  if ((ORr.DownPaySent + IVrw.Sum - IV2rw.Sum)>ORr.Sum4) then begin
                    RecordCheckError(20406,ORr.Sum4-(ORr.DownPaySent + IVrw.Sum - IV2rw.Sum),i,"Sum");
                    res = -1;
                    goto L99;
                  end;
               case Rs_insert:
                  if ((ORr.DownPaySent + IVrw.Sum)>ORr.Sum4) then begin
                    RecordCheckError(20406,ORr.Sum4-(ORr.DownPaySent + IVrw.Sum),i,"Sum");
                    res = -1;
                    goto L99;
                  end;
               case Rs_normal:
                  if ((ORr.DownPaySent)>ORr.Sum4) then begin
                    RecordCheckError(20406,ORr.Sum4-ORr.DownPaySent,i,"Sum");
                    res = -1;
                    goto L99;
                  end;
              end;
            end;
          end;
          if ((nonblank(IVrw.VATCode)) and (IsVATCodeDefined(IVrw.VATCode)==false)) then begin
            RecordCheckError(1120,IVrw.VATCode,i,"VATCode");
            res = -1;
            goto L99;
          end;
          if (nonblank(IVrw.TaxTemplateCode)) then begin
            errcode = VerifyTaxTemplateCode(IVrw.TaxTemplateCode,tstr);
            if (errcode!=0) then begin
              RecordCheckError(1120,tstr,i,"TaxTemplateCode");      
              res = -1; 
              goto L99;
            end;
          end;
          if (check) then begin
            if (stat==updatemode) then begin
/*
              if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
                MatRowGet(IV2p,i,IV2rw);
                if (IVrw.Sum!=IV2rw.Sum) then begin
                  RecordCheckError(1067,"",i,"Sum");      
                  res = -1; 
                  goto L99;
                end;
              end;
*/
            end;
          end;
          if (ARAccb.VATCodeCtrl==1) then begin
            Accr.AccNumber = IVrw.SalesAcc;
            if (ReadFirstMain(Accr,1,true)) then begin
              if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVrw.VATCode)) then begin
                RecordCheckError(1245,IVrw.VATCode,i,"VATCode");      
                res = -1; 
                goto L99;
              end;
            end else begin
              tstr = IVrw.SalesAcc;
              ConvertSalesAcc(tstr,IVp.ExportFlag);
              Accr.AccNumber = tstr;
              if (ReadFirstMain(Accr,1,true)) then begin
                if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVrw.VATCode)) then begin
                  RecordCheckError(1245,"",i,"VATCode");      
                  res = -1; 
                  goto L99;
                end;
              end;
            end;
          end;
        end;
      case kInvoiceRowTypeInterest:
        if (ARAccb.VATCodeCtrl==1) then begin
          Accr.AccNumber = IVrw.SalesAcc;
          if (ReadFirstMain(Accr,1,true)) then begin
            if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVrw.VATCode)) then begin
              RecordCheckError(1245,"",i,"VATCode");      
              res = -1; 
              goto L99;
            end;
          end else begin
            tstr = IVrw.SalesAcc;
            ConvertSalesAcc(tstr,IVp.ExportFlag);
            if (ReadFirstMain(Accr,1,true)) then begin
              if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVrw.VATCode)) then begin
                RecordCheckError(1245,"",i,"VATCode");      
                res = -1; 
                goto L99;
              end;
            end;
          end;
        end;
      case kInvoiceRowTypePrepayment:
        cash = cash + IVrw.Sum;
        if (check) then begin
          if (IVrw.CUPNr>0) then begin
//            if (IsMaintenance==false) then begin OKing invoices make prepayment balance negative wo this when OKing invoices maint runs
            if (true) then begin
              for (j = 0; j<i; j = j + 1) begin
                MatRowGet(IVp,j,IV2rw);
                if (IVrw.CUPNr==IV2rw.CUPNr) then begin
                  RecordCheckError(1391,"",i,"CUPNr");
                  res = -1;
                  goto L99;
                end;
              end;
              if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
                RecordCheckError(2131,"",i,"CUPNr");      
                res = -1; 
                goto L99;
              end;
              ARPayr.CUPNr = IVrw.CUPNr;
              if (ReadFirstMain(ARPayr,1,true)) then begin
                if (IVp.CurncyCode==ARPayr.CurncyCode) or (blank(IVp.CurncyCode) and ARPayr.CurncyCode==BCb.BaseCur1) then begin 
                  if (IVp.CustCode==ARPayr.CustCode) then begin
                    if (IVrw.Sum>ARPayr.RVal) then begin
                      RecordCheckError(1254,"",i,"VATCode");      
                      res = -1; 
                      goto L99;
                    end;
                    prepaysum = prepaysum + IVrw.Sum;
                    if (prepaysum>IVp.Sum4) then begin
                      RecordCheckError(1255,"",i,"CUPNr");      
                      res = -1; 
                      goto L99;
                    end;
                  end else begin
                    RecordCheckError(1218,"",i,"CUPNr");      
                    res = -1; 
                    goto L99;
                  end;
                end else begin
                  RecordCheckError(1217,"",i,"CUPNr");      
                  res = -1; 
                  goto L99;
                end;
                if (ARPayr.PayDate>IVp.TransDate) then begin
                  RecordCheckError(1129,ARPayr.PayDate,i,"TransDate");      
                  res = -1; 
                  goto L99;
                end;
              end else begin
                RecordCheckError(1253,"",i,"CUPNr");      
                res = -1; 
                goto L99;
              end;
            end;                    
          end else begin
            if (transf) then begin
              RecordCheckError(1058,"",i,"CUPNr");      
              res = -1; 
              goto L99;
            end;
          end;
        end;  
    end;
  end;
  if (HasLocalization("ARG") and (daysrange>0)) then begin
    if (IVp.InvType!=kInvoiceTypeCredit) and (IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
      if (CheckInvDatePerItemType(IVp.InvDate,daysrange,EIb.OutArgEInvoices)==false) then begin 
        RecordCheckError(22263,"",-1,"InvDate");      
        res = -1;
        goto L99;
      end;  
    end;
  end;
L99:;  
  IVVcRecordCheckRows = res;
  return;
end;