external updating procedure AddToTheCustomerAccount(string,date,string,LongInt,val);

updating procedure UpdateCustomerAccount(record CUAccountEventVc CUAccountEventr,Boolean addf)
begin
  record CUAccountHistVc CUAccountHistr;
  val s;
  
  if (CUAccountEventr.OKFlag!=0) then begin
    if (addf) then begin
      if (CUAccountEventr.Type==0) then begin
        s = -CUAccountEventr.Sum;
      end else begin
        s = CUAccountEventr.Sum;
      end;
      AddToTheCustomerAccount(CUAccountEventr.CustCode,CUAccountEventr.TransDate,"CUAccountEventVc",CUAccountEventr.SerNr,s);
    end else begin
      CUAccountHistr.CustCode = CUAccountEventr.CustCode;
      CUAccountHistr.TransDate = CUAccountEventr.TransDate;
      CUAccountHistr.FileName = "CUAccountEventVc";
      CUAccountHistr.SerNr = CUAccountEventr.SerNr;
      if (ReadFirstMain(CUAccountHistr,4,true)) then begin
        RecordDelete(CUAccountHistr);
      end;
    end;
  end;
  return;
end;

global
function LongInt CUAccountEventVcRecordDefaults(var record CUAccountEventVc CUAccountEventr,record CUAccountEventVc CUAccountEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val blval;

  CUAccountEventr.SerNr = -1;  
  CUAccountEventr.TransDate = CurrentDate;
  CUAccountEventVcRecordDefaults = res; 
  if (SingleUserMode) then begin
    CUAccountEventr.SerNr = NextSerNr("CUAccountEventVc",CUAccountEventr.TransDate,-1,false,"");
  end;
  RETURN;
END;

global
function LongInt CUAccountEventVcRecordDuplicate(var record CUAccountEventVc CUAccountEventr,record CUAccountEventVc CUAccountEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Date bldat;

  CUAccountEventr.SerNr = -1;
  CUAccountEventr.TransDate = CurrentDate;
  CUAccountEventVcRecordDuplicate = res; 
  if (SingleUserMode) then begin
    CUAccountEventr.SerNr = NextSerNr("CUAccountEventVc",CUAccountEventr.TransDate,-1,false,"");
  end;
  RETURN;
END;

global
updating function LongInt CUAccountEventVcRecordSaveAfter(var record CUAccountEventVc CUAccountEventr,record CUAccountEventVc CUAccountEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  UpdateCustomerAccount(CUAccountEventr,true);
  CUAccountEventVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt CUAccountEventVcRecordUpdateAfter(var record CUAccountEventVc CUAccountEventr,record CUAccountEventVc CUAccountEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  UpdateCustomerAccount(CUAccountEvent2r,false);
  UpdateCustomerAccount(CUAccountEventr,true);
  CUAccountEventVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt CUAccountEventVcRecordRemoveAfter(var record CUAccountEventVc CUAccountEventr,record CUAccountEventVc CUAccountEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  UpdateCustomerAccount(CUAccountEventr,false);
  CUAccountEventVcRecordRemoveAfter = res;
  RETURN;
END;

global
updating function LongInt CUAccountEventVcRecordCheck(var record CUAccountEventVc CUAccountEventr,record CUAccountEventVc CUAccountEvent2r,LongInt stat,LongInt long4)
BEGIN
  record CUVc CUr;
  LongInt res;
  
  res = 0;     
  if (CUAccountEventr.SerNr==-1) then begin
    CUAccountEventr.SerNr = NextSerNr("CUAccountEventVc",CUAccountEventr.TransDate,-1,false,"");
  end;
  if (blank(CUAccountEventr.CustCode)) then begin
    RecordCheckError(1125,"",-1,"CustCode");      
    res = -1; 
    goto LCUAccountEventVcRecordCheck;
  end;
  CUr.Code = CUAccountEventr.CustCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,CUAccountEventr.CustCode,-1,"CustCode");      
    res = -1; 
    goto LCUAccountEventVcRecordCheck;
  end;
LCUAccountEventVcRecordCheck:;
  CUAccountEventVcRecordCheck = res;
  RETURN;
END;
