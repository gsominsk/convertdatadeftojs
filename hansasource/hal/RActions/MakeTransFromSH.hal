external procedure GetProjMaterialsUsageAcc(record AccBlock,record INVc,Integer,var string,var string);
external function Integer CheckObjs(string,string,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure GetProjectWIPAcc(record PRAccBlock,string,var string,var string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function roundmode DefaultRoundMode();
external procedure GetConsigmentStockAcc(string,string,var string);
external procedure GetStockedItemFromRecepy(record SHVc,var string,var val);
external procedure FindAdjstockvQtySHVc(string,record SHVc,string,Integer,var val);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external function Integer FIFOPerSerialNr(record INVc,record CostAccBlock);
external procedure CombineStructure(var record SHVc);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 255 FindINObjects(string,string);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function boolean GetCOSAcc(string,string,string,record AccBlock,record INVc,integer,Boolean,Integer,var string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetITStockAcc(string,var string);
external procedure AddEuroTrRowType(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer);
external procedure AddEuroTrRowTypeQty(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string,Integer,val);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean TransInFiscal(Date);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external function val FindPUBaseRate2forSerialNr(string,string);

function Integer SHVc_PostWIP(record TRVc gTRp,record PRAccBlock PRAb,record SHVc SHp,row SHVc SHrw,Boolean dc1,
                       Boolean dc2,val frrate,val torate1,val torate2,val baserate1,val baserate2,
                       var val totsum)
begin
  Integer res;
  record PRVc PRr;
  string 255 wipacc,balacc;
  string 255 tstr,taccnumber;
  Boolean accf;
  val rs;
  record ORVc ORr;

  ORr.SerNr = SHp.OrderNr;
  if (ReadFirstMain(ORr,1,true)==false) then begin goto LSHVc_PostWIP; end;
  if (blank(ORr.PRCode)) then begin goto LSHVc_PostWIP; end;
  PRr.Code = ORr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (PRr.UseWIP==1) then begin
      GetProjectWIPAcc(PRAb,SHrw.ArtCode,wipacc,balacc);      

      rs = SHrw.FIFORowVal;
      if (GetAccName(wipacc,tstr,60)==false) then  begin
        res = 1909;      
        goto LSHVc_PostWIP;
      end;
      accf = CheckTTRPerRow("SHVc",wipacc,"",dc2,taccnumber,0);
      AddEuroTrRow(gTRp,wipacc,"","",tstr,rs,baserate1,baserate2,accf,dc1,totsum,false,taccnumber,"","");

      if (GetAccName(balacc,tstr,60)==false) then  begin
        res = 1910;      
        goto LSHVc_PostWIP;
      end;
      accf = CheckTTRPerRow("SHVc",balacc,"",dc2,taccnumber,0);
      AddEuroTrRow(gTRp,balacc,"","",tstr,rs,baserate1,baserate2,accf,dc2,totsum,false,taccnumber,"","");

    end;
  end;
LSHVc_PostWIP:;  
  SHVc_PostWIP = res;
  return;
end;

global
procedure GetITCostAcc(string itcode,var string costacc)
BEGIN
  record ITVc ITr;

  costacc = "";
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    costacc = ITr.CostAcc;
  end;  
  RETURN;
END;

global
procedure GetLocationAcc(string loccode,var string stockacc,var string stockobjects)
BEGIN
  record LocationVc Locr;

  stockacc = "";
  stockobjects = "";
  Locr.Code = loccode;
  if (ReadFirstMain(Locr,1,true)) then begin
    stockacc = Locr.StockAcc;
    stockobjects = Locr.Objects;
  end;  
  RETURN;
END;

global
procedure GetSHCostAcc(Integer ItemGroupAccounts,string inacc,string itcode,string accusageacc,var string costacc)
BEGIN
  costacc = "";
  costacc = inacc;
  if (nonblank(costacc)) then begin
    goto LGetSHCostAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITCostAcc(itcode,costacc);
    if (nonblank(costacc)) then begin
      goto LGetSHCostAcc;
    end;
  end;
  costacc = accusageacc;
  if (nonblank(costacc)) then begin
    goto LGetSHCostAcc;
  end;
LGetSHCostAcc:;  
  RETURN;
END;

procedure GetSHStockAcc(Integer ItemGroupAccounts,string rowlocation,string location,string MainStock,string itcode,string accusageacc,var string stockacc,var string stockobjects)
BEGIN  
  string 10 loccode;
  
  stockacc = "";
  stockobjects = "";
  if (nonblank(rowlocation)) then begin
    loccode = rowlocation;
  end else begin
    loccode = location;
  end;
  if (blank(loccode)) then begin
    loccode = MainStock;    
  end;
  GetLocationAcc(loccode,stockacc,stockobjects);
  if (nonblank(stockacc)) then begin
    goto LGetSHStockAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITStockAcc(itcode,stockacc);
    if (nonblank(stockacc)) then begin
      goto LGetSHStockAcc;
    end;
  end;
  stockacc = accusageacc;
  if (nonblank(stockacc)) then begin
    goto LGetSHStockAcc;
  end;
LGetSHStockAcc:;  
  RETURN;
END;

function
Integer AddSHTransRow(record TRVc gTRp,record SHVc SHp,Integer rownr,string orobjstr,
                      record CostAccBlock CAb,record AccBlock ARAccRecp,
                      string MainStock,Boolean bbtrf,string pbbvaracc,
                      Boolean dc1,Boolean dc2,Boolean sumupf,
                      val rowcostp,val rowcost2p,val baserate1,val baserate2,var val totsump)
BEGIN
  Integer res;
  record LocationVc LocRec;
  record INVc INr;
  row SHVc SHrw;
  string 255 objstr;
  string 255 stockobjs;
  string 10 costacc,itacc,taccnumber;
  string 10 rowstockacc,bbvaracc,locobjstr;
  string 255 tstr,location,errstr;
  Boolean itemf;
  Date bd;
  val crowcostp,crowcost2p;
  
  crowcostp = rowcostp;
  crowcost2p = rowcost2p;
  bbvaracc = pbbvaracc;
  if (blank(bbvaracc)) then begin
    bbvaracc = ARAccRecp.BBVarAcc;
  end;
  MatRowGet(SHp,rownr,SHrw);
  if (rowcostp==0) then begin
    goto LAddSHTransRow;
  end;
  location = SHrw.Location;
  if (blank(location)) then begin
    location = SHp.Location;
  end;
//  INr.Code = SHrw.ArtCode;
//  itemf = ReadFirstMain(INr,1,true);
  itemf = ReadFirstItem(SHrw.ArtCode,INr,true,true);
  if (nonblank(SHrw.Objects)) then begin
    INr.Objects = SHrw.Objects;
  end else begin
    INr.Code = SHrw.ArtCode;
    if (itemf==false) then begin
      INr.Objects = "";
    end;
  end;
  objstr = INr.Objects;
  if (ARAccRecp.SkipObjectsOnIVFromHeader==0) then begin
    objstr = AddObjectToObjectList(objstr,orobjstr);
  end;
  if (CAb.ObjOnStock!=0) then begin
//    stockobjs = FindINObjects(INr.Objects,INr.Group); // Should only care about what is on Delivery....
    stockobjs = objstr;
  end else begin
    stockobjs = "";
  end;
  rowstockacc = "";
  costacc = SHrw.CostAcc;
  if (blank(costacc)) then begin   
  /*
    GetSHCostAcc(CAb.ItemGroupAccounts,INr.CostAcc,INr.Group,ARAccRecp.StockCostAcc,costacc);
    if (GetAccName(costacc,tstr,60)==false) then begin
      res = 1085;
      goto LAddSHTransRow;
    end;
*/
    costacc = "";
    if (CAb.NoNLCostOnShip==2) then begin
      costacc = ARAccRecp.COSAccrualAcc;
    end else begin
      if (nonblank(SHp.PRCode)) then begin
        GetProjMaterialsUsageAcc(ARAccRecp,INr,CAb.ItemGroupAccounts,costacc,tstr);
      end;
      if (blank(costacc)) then begin
        if (GetCOSAcc(SHrw.CostAcc,SHp.CustCode,location,ARAccRecp,INr,CAb.ItemGroupAccounts,false,0,costacc,tstr)==false) then begin
          res = 2138;
          goto LAddSHTransRow;
        end;
      end;
    end;
  end;
  if (GetAccName(costacc,tstr,60)==false) then begin
    res = 1947;
    goto LAddSHTransRow;
  end;
  if (bbtrf) then begin
    if (SHrw.BBCostPrice!=0) then begin
      crowcostp = SHrw.Ship*SHrw.BBCostPrice;
      crowcost2p = (SHrw.Ship*SHrw.BBCostPrice*rowcost2p)/rowcostp;
    end;
  end;

  if (CheckTTRPerRow("SHVc",costacc,objstr,dc1,taccnumber,1)) then begin end;      
  if (rowcost2p==0) then begin             
    AddEuroTrRowType(gTRp,costacc,objstr,"",tstr,crowcostp,baserate1,baserate2,sumupf,dc1,totsump,false,taccnumber,"","",kTransactionRowTypeStock);
  end else begin
    AddEuroCurncyNomARTrRow(gTRp,costacc,objstr,"",tstr,crowcostp,crowcost2p,sumupf,dc1,totsump,
                            "",blankval,blankval,blankval,baserate1,baserate2,
                            blankval,blankval,"",-1,kTransactionRowTypeStock,blankval,bd,-1,false,taccnumber,"","");
  end;
  
  if (bbtrf) then begin
    if (SHrw.BBCostPrice!=0) then begin
      crowcostp = rowcostp - SHrw.Ship*SHrw.BBCostPrice;
      crowcost2p = rowcost2p - crowcost2p;
      if (GetAccName(bbvaracc,tstr,60)==false) then begin
        res = 20104;
        goto LAddSHTransRow;
      end;
      if (CheckTTRPerRow("SHVc",bbvaracc,objstr,dc1,taccnumber,1)) then begin end;      
      if (rowcost2p==0) then begin             
        AddEuroTrRowType(gTRp,bbvaracc,objstr,"",tstr,crowcostp,baserate1,baserate2,sumupf,dc1,totsump,false,taccnumber,"","",kTransactionRowTypeStock);
      end else begin
        AddEuroCurncyNomARTrRow(gTRp,bbvaracc,objstr,"",tstr,crowcostp,crowcost2p,sumupf,dc1,totsump,
                                "",blankval,blankval,blankval,baserate1,baserate2,
                                blankval,blankval,"",-1,kTransactionRowTypeStock,blankval,bd,-1,false,taccnumber,"","");
      end;
    end;
  end;

  GetSHStockAcc(CAb.ItemGroupAccounts,SHrw.Location,SHp.Location,MainStock,INr.Group,ARAccRecp.StockAcc,rowstockacc,locobjstr);
  stockobjs = AddObjectToObjectList(stockobjs,locobjstr);
  GetConsigmentStockAcc(SHrw.ArtCode,SHrw.SerialNr,rowstockacc);
  if (GetAccName(rowstockacc,tstr,60)==false) then begin
    res = 2138;
    goto LAddSHTransRow;
  end;  
  res = CheckObjs(rowstockacc,stockobjs,errstr);
  if (res!=0) then begin
    goto LAddSHTransRow;
  end;
  if (CheckTTRPerRow("SHVc",rowstockacc,stockobjs,dc2,taccnumber,1)) then begin end;      
  if (rowcost2p==0) then begin             
    AddEuroTrRowTypeQty(gTRp,rowstockacc,stockobjs,"",tstr,rowcostp,baserate1,baserate2,sumupf,dc2,totsump,false,taccnumber,"","",kTransactionRowTypeStock,SHrw.Ship);
  end else begin
    AddEuroCurncyNomARTrRow(gTRp,rowstockacc,stockobjs,"",tstr,rowcostp,rowcost2p,sumupf,dc2,totsump,
                            "",blankval,blankval,blankval,baserate1,baserate2,
                            blankval,blankval,"",-1,kTransactionRowTypeStock,SHrw.Ship,bd,-1,false,taccnumber,"","");
  end;
LAddSHTransRow:;
  AddSHTransRow = res;
  RETURN;
END;

global
function Integer AddSHCostRow(record RcVc RepSpec,record TRVc gTRp,record SHVc SHp,Integer rownr,
                              record MainStockBlock MainStockRec,record CostAccBlock CAb,record AccBlock ARAccRec,Boolean bbtrf,string bbvaracc,
                              string orobjstr,Boolean dc1,Boolean dc2,Boolean sumupf,val baserate1,val baserate2,var val TotSum)
BEGIN
  Integer res;
  record INVc INr;
  row SHVc SHrw;
  val t1,t2,lbaserate2,lbaserate1;
  Integer CostModelSH;
  record ITVc ITr;

  lbaserate1 = baserate1;
  lbaserate2 = baserate2;
  MatRowGet(SHp,rownr,SHrw);  
  if (ReadFirstItem(SHrw.ArtCode,INr,true,true)) then begin
  end;
  if (INr.ItemType!=1) then begin 
    if (CAb.CostAccForNonStocked==0) then begin
      goto LAddSHCostRow;
    end;
  end;
  if (ISMAINTENANCE) then begin
    t1 = SHrw.Ship*SHrw.FIFO;
    t1 = Round(t1,DefaultRoundMode);
    t2 = SHrw.Ship*SHrw.WAB2;
  end else begin
    if (CAb.NoNLCostOnShip!=1) then begin
      t1 = Round(SHrw.FIFORowVal,DefaultRoundMode);      
      if (CAb.WABase2!=0) then begin
        t2 = SHrw.Ship*SHrw.WAB2;
        if ((FIFOPerSerialNr(INr,CAb)!=0) and ((INr.SerNrf==1) or (INr.SerNrf==2))) then begin
          lbaserate2 = FindPUBaseRate2forSerialNr(SHrw.ArtCode,SHrw.SerialNr);
        end else begin
          if (lbaserate2==0) then begin lbaserate2 = baserate2; end;
        end;
      end;
    end;    
  end;
  res = AddSHTransRow(gTRp,SHp,rownr,orobjstr,CAb,ARAccRec,MainStockRec.MainStock,bbtrf,bbvaracc,
                      dc1,dc2,sumupf,t1,t2,lbaserate1,lbaserate2,TotSum);
LAddSHCostRow:;                      
  AddSHCostRow = res;
  RETURN;
END;

global
function Integer MakeTransFromSH(record TRVc gTRp,record SHVc SHp,Boolean rpt,record RcVc RepSpec)
BEGIN
  Integer res;
  record MainStockBlock MainStockRec;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  record CostAccBlock CAb;
  record LocationVc LocRec;
  record ORVc ORr;
  record INVc INr;
  record SHVc recSHr;
  row SHVc SHrw;
  row SHVc SH2rw;
  row SHVc recSHrw;
  Integer rwcnt,rwcnt2;
  Integer i,j,l;
  string 255 ftxt;
  string 255 tstr;
  string 255 firstVAT;
  string 255 orobjstr;
  string 255 objstr;
  string 10 location,loc2;
  string 20 curncy,stockartcode,bbvaracc;
  val baserate1,baserate2,temp;
  val t1,t2,VATSum;
  val t,TotSum,adjstockv;
  Boolean dc1,dc2,sumupf;
  Boolean isstruct,testf,bbtrf,plf;
  record TRVc locTRr;
  Integer primary,queuecostmodel;
  record ITVc ITr;
  record PLDefVc PLDefr;
  record PLVc PLr;
  record TRVc lTRr;
  transaction string 255 gRuniningMaint;
  record PRAccBlock PRAb;
  
  res = 1085;
  BlockLoad(CAb);
  BlockLoad(ARAccRec);
  BlockLoad(TRGenRec);
  BlockLoad(MainStockRec);
  BlockLoad(PRAb);  

  sumupf = true;
  if (CAb.CorespondingAccounts!=0) then begin
    sumupf = false;
  end;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.SHGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromSH;
    end;
  end;
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.SHStartDate)) and
        (SHp.ShipDate<TRGenRec.SHStartDate)) then begin
      res = 0;
      goto LMakeTransFromSH;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = SHYc;
    gTRp.Number = SHp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    locTRr.Number = gTRp.Number;
    locTRr.IntYc = gTRp.IntYc;
    if (ReadFirstMain(locTRr,0,true)) then begin
      switch (gRuniningMaint) begin    
        case "RecalcStockMn":  ;
        otherwise
          res = 0;
          goto LMakeTransFromSH;
      end;
    end;
  end;
  ORr.SerNr = SHp.OrderNr;
  if (ReadFirstMain(ORr,1,true)) then begin
    if (nonblank(ORr.PriceList)) then begin
      PLDefr.Code = ORr.PriceList;
      if (ReadFirstMain(PLDefr,1,true)) then begin
        switch (PLDefr.DepPrice) begin
          case 2: 
            bbtrf = true;
        end;
      end;
    end;
  end;
  objstr = "";
  orobjstr = "";
  if (blank(SHp.Objects)) then begin
    if (nonblank(ORr.Objects)) then begin
      if (nonblank(orobjstr)) then begin
        orobjstr = orobjstr & ",";
      end;
      orobjstr = orobjstr & ORr.Objects;
    end;
  end else begin
    orobjstr = SHp.Objects;
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = SHp.ShipDate;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      res = 1075;
      goto LMakeTransFromSH;
    end;
  end;
  curncy = "";
  GetFullCurncyRate(curncy,gTRp.TransDate,temp,temp,temp,baserate1,baserate2);
  ftxt = SHp.CustCode;
  ftxt = ftxt & " ";
  ftxt = ftxt & SHp.Addr0;
  gTRp.Comment = ftxt;
  TotSum = 0;
  VATSum = 0;
  firstVAT = "";
  dc1 = true;
  dc2 = false;
  rwcnt = MatRowCnt(SHp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    isstruct = false;
    if (SHrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
      isstruct = ExpandStructItem(SHrw.ArtCode,SHrw.Recepy,SHrw.Ship,recSHr);
    end;
    t1 = blankval;
    if (isstruct==false) then begin
      switch (PLDefr.DepPrice) begin
        case 2: 
          PLr.PLCode = PLDefr.Code;
          PLr.ArtCode = SHrw.ArtCode;
          PLr.CustCode = SHp.CustCode;
          plf = ReadFirstMain(PLr,3,true);
          if (!plf) then begin
            PLr.PLCode = PLDefr.Code;
            PLr.ArtCode = SHrw.ArtCode;
            plf = ReadFirstMain(PLr,2,true);
          end;
          if (plf) then begin
            bbvaracc = PLr.BBVarAcc;
          end;
          if (blank(bbvaracc)) then begin
            bbvaracc = PLDefr.BBVarAcc;
          end;      
      end;
      res = AddSHCostRow(RepSpec,gTRp,SHp,i,MainStockRec,CAb,ARAccRec,bbtrf,bbvaracc,
                         orobjstr,dc1,dc2,sumupf,baserate1,baserate2,TotSum);
      if (res!=0) then begin
        goto LMakeTransFromSH;
      end;
    end else begin      
      CombineStructure(recSHr);
      recSHr.Location = SHp.Location;
      rwcnt2 = MatRowCnt(recSHr);
      for (j=0;j<rwcnt2;j=j+1) begin
        MatRowGet(recSHr,j,SH2rw);
        SH2rw.Location = SHrw.Location;
        MatRowPut(recSHr,j,SH2rw);
      end;
      for (j=0;j<rwcnt2;j=j+1) begin
        MatRowGet(recSHr,j,SH2rw);
        location = SH2rw.Location;
        if (blank(location)) then begin
          location = recSHr.Location;
        end;
        if (blank(location)) then begin
          location = MainStockRec.MainStock;
        end;
        GetStockedItemFromRecepy(recSHr,stockartcode,temp);
        FindAdjstockvQtySHVc("SHVc",SHp,stockartcode,i,adjstockv);
        t1 = FindCostPrice(SH2rw.ArtCode,location,SH2rw.SerialNr,SH2rw.Ship,adjstockv,false);
        t1 = Round(t1,DefaultRoundMode);
        res = AddSHTransRow(gTRp,recSHr,j,orobjstr,CAb,ARAccRec,MainStockRec.MainStock,bbtrf,bbvaracc,
                            dc1,dc2,sumupf,t1,t2,baserate1,baserate2,TotSum);
        if (res!=0) then begin
          goto LMakeTransFromSH;
        end;
      end;
    end;
  end;
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    res = SHVc_PostWIP(gTRp,PRAb,SHp,SHrw,dc1,dc2,blankval,blankval,blankval,baserate1,baserate2,totsum);
    if (res!=0) then begin
      goto LMakeTransFromSH;
    end;
  end;
  res = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromSH;
  end;
LMakeTransFromSH:;
  MakeTransFromSH = res;
  RETURN;
END;
