external updating procedure RestAccStorePOSHist(record RestAccVc);
external updating procedure RestAccDeletePOSHist(record RestAccVc);
external updating procedure RestAccUpdatePOSHist(record RestAccVc,record RestAccVc);
external updating procedure RestAccUpdateCashupHist(record RestAccVc);
external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external procedure GetCurUser(var record UserVc);
external procedure GetCurUser(var record UserVc);
external updating procedure DeleteShopBask(string,LongInt);
external updating procedure RestAccVc_LoyaltyCardPointsRedemption(record RestAccVc,Boolean);
external updating procedure CustStatUp(string,LongInt,string,string,string,string,string,Date,val,val,val,val,val,val,Boolean);
external updating procedure ArtStatUp(string,string,string,string,Date,val,val,val,val,Boolean,val,val,val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external updating procedure DeletePointsHist(LongInt,string);
external updating procedure AddPointsHist(LongInt,string,integer);
external procedure RestAccSumup(var record RestAccVc,string);
external function string 255 CurDrawerCode(string);
external procedure ConsolidateRestAccr(record RestAccVc,var record RestAccVc);
external function boolean GenCouponsf;
external updating procedure RestAccGeneratePossibleCoupons(record RestAccVc);
external function LongInt FindReservation(string,Date,Time);
external procedure PUCalcPerc(val,string,var val);
external procedure GetINName(string,var string);
external updating procedure StoreInShopBask(Integer,LongInt,String,String,Val,Val,Val,String,String,LongInt,String,Boolean,string,string,longint,string,val,val,val,val,val);

global
function Boolean CheckIfRoomPayType(string payt)
BEGIN
  Boolean res;
  record PMBlock PMBlockRec; 
  row PMBlock pmrw;
  Integer i,rows;

  res = false;
/*
  BlockLoad(PMBlockRec);
  rows = MatRowCnt(PMBlockRec);
  for (i=0;i<rows;i=i+1) begin
     MatRowGet(PMBlockRec,i,pmrw);
     if (pmrw.Code==payt) then begin
       if (pmrw.CheckType==6) then begin // Nice feature but not very easy to understand
         res = true;
      end;
      i = rows;
    end;
  end;
*/
  if (nonblank(payt)) then begin
    res = true;
  end;
  CheckIfRoomPayType = res;
  RETURN;
END;

function
Boolean GetRestAccReservation(record RestAccVc RestAccr,var record JobVc resJobr)
BEGIN
  record JobVc Jobr;
  row JobVc Jobrw;
  Integer i,rwcnt;
  Boolean res;
  record HotelBlock Hotelb;
  
  res = false;
//wrong, what if checout time is 12 and u go to pub 13.00 ?  
//  Jobr.SerNr = FindReservation(RestAccr.Resource,RestAccr.TransDate,RestAccr.TransTime);
//  if (ReadFirstMain(Jobr,1,true)) then begin

  BlockLoad(Hotelb);
  Jobr.ResStatus = Hotelb.ChInSt;
  Jobr.ResCode = RestAccr.Resource;
  if (ReadLastKey("ResCodeStatus",Jobr,2,true)) then begin   
    if (Jobr.CUCode==RestAccr.CUCode) then begin
      res = true;
    end else begin
      rwcnt = MatRowCnt(Jobr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Jobr,i,Jobrw);
        if (Jobrw.CUCode==RestAccr.CUCode) then begin
          res = true;
          goto LGetRestAccReservation;
        end;
      end;      
    end;
  end; 
LGetRestAccReservation:;
  RecordCopy(resJobr,Jobr);
  GetRestAccReservation = res;
  RETURN;
END;

updating procedure PutRestAccRowInShopBask(var record RestAccVc RestAccr,Integer restaccrow,string object,LongInt jobsernr)
BEGIN
  row RestAccVc RestAccrw;
  val Price;
  string 255 cucode;

  MatRowGet(RestAccr,restaccrow,RestAccrw);
  if (RestAccrw.ovst!=0) then begin
    goto LPutRestAccRowInShopBask;
  end;
  cucode = RestAccr.GuestCode;
  if (blank(cucode)) then begin cucode = RestAccr.CUCode; end;
  switch (RestAccrw.stp) begin
    case 1:
      Price = RestAccrw.Price;
      if (nonblank(RestAccr.Discount)) then begin
        PUCalcPerc(RestAccrw.Price,RestAccr.Discount,Price);
        Price = RestAccrw.Price - Price;
      end;  
      StoreInShopBask(2,jobsernr,RestAccrw.ArtCode,RestAccrw.Spec,RestAccrw.Quant,Price,blankval,cucode,object,-1,"",true,"","RestAccVc",RestAccr.SerNr,"",blankval,blankval,blankval,blankval,blankval);
      RestAccr.TendValue = RestAccr.TendValue + Price;
      RestAccr.RemValue = RestAccr.RemValue - Price;
    case kInvoiceRowTypeVoid:
      Price = RestAccrw.Price;
      if (nonblank(RestAccr.Discount)) then begin
        PUCalcPerc(RestAccrw.Price,RestAccr.Discount,Price);
        Price = RestAccrw.Price - Price;
      end;  
      StoreInShopBask(2,jobsernr,RestAccrw.ArtCode,RestAccrw.Spec,-RestAccrw.Quant,Price,blankval,cucode,object,-1,"",true,"","RestAccVc",RestAccr.SerNr,"",blankval,blankval,blankval,blankval,blankval);
      
      RestAccr.TendValue = RestAccr.TendValue - Price;
      RestAccr.RemValue = RestAccr.RemValue + Price;
    case kInvoiceRowTypeLoyaltyPointsPayment:
      RestAccr.TendValue = RestAccr.TendValue + RestAccrw.Sum;
      RestAccr.RemValue = RestAccr.RemValue - RestAccrw.Sum;
    case kInvoiceRowTypeGiftVoucherPayment:
      RestAccr.TendValue = RestAccr.TendValue + RestAccrw.Sum;
      RestAccr.RemValue = RestAccr.RemValue - RestAccrw.Sum;
    case kInvoiceRowTypeCashPayment:
      RestAccr.TendValue = RestAccr.TendValue + RestAccrw.Sum;
      RestAccr.RemValue = RestAccr.RemValue - RestAccrw.Sum;
    case kInvoiceRowTypeCreditCardPayment:
      RestAccr.TendValue = RestAccr.TendValue + RestAccrw.Sum;
      RestAccr.RemValue = RestAccr.RemValue - RestAccrw.Sum;
    case kInvoiceRowTypeChequePayment:
      RestAccr.TendValue = RestAccr.TendValue + RestAccrw.Sum;
      RestAccr.RemValue = RestAccr.RemValue - RestAccrw.Sum;
  end;
LPutRestAccRowInShopBask:;  
  RETURN;
END;

updating procedure PutRestAccInShopBask(var record RestAccVc RestAccr,string itemcode,string object,LongInt jobsernr)
BEGIN
  string 255 tstr;
  val sum4;

  // Discount is already taken into account in Sum4  
  GetINName(itemcode,tstr);
  sum4 = RestAccr.Sum4 - RestAccr.CashValue - RestAccr.Paid - RestAccr.Paid2 - RestAccr.Paid3;
  StoreInShopBask(1,jobsernr,itemcode,tstr,1,sum4,blankval,RestAccr.CUCode,object,-1,"",true,"","RestAccVc",RestAccr.SerNr,"",blankval,blankval,blankval,blankval,blankval); //RestAccr.Sum4
  RestAccr.TendValue = RestAccr.TendValue + sum4;
  RestAccr.RemValue = RestAccr.RemValue - sum4;
  RETURN;
END;

updating procedure PutRestAccTipInShopBask(record RestAccVc RestAccr,string object,LongInt jobsernr)
BEGIN
  string 255 tstr;

  if (RestAccr.TipValue>0) then begin
    StoreInShopBask(0,jobsernr,"","",1,RestAccr.TipValue,blankval,RestAccr.CUCode,object,-1,"",false,"","RestAccVc",RestAccr.SerNr,"",blankval,blankval,blankval,blankval,blankval);
  end;
  RETURN;
END;

global
updating procedure SaveRestAcc(var record RestAccVc RestAccr,Boolean unokf)
BEGIN
  record RestAccVc aRestAccr;
  record JobVc Jobr;
  Integer i,rwcnt;
  record RestITVc RestITr;
  Boolean detailf;
  Boolean restitfound;
  
  if (RestAccr.MergedToSerNr>0) then begin
    goto LSaveRestAcc;
  end;
  RestITr.Code = RestAccr.MachineName;
  restitfound = ReadFirstMain(RestITr,1,true);
  if (restitfound) then begin
    if (nonblank(RestAccr.Objects)) then begin
      if (nonblank(RestITr.Object)) then begin
        RestAccr.Objects = RestAccr.Objects & ",";
      end;
    end;
    RestAccr.Objects = RestAccr.Objects & RestITr.Object;
  end;
  if ((nonblank(RestAccr.Resource)) and (nonblank(RestAccr.CUCode))) then begin  // and (nonblank(RestAccr.GuestCode))
    if (CheckIfRoomPayType(RestAccr.PayDeal)) then begin
      if (GetRestAccReservation(RestAccr,Jobr)) then begin
        if (unokf) then begin
          DeleteShopBask("RestAccVc",RestAccr.SerNr);
        end else begin
          detailf = true;
          if (restitfound) then begin
            if (nonblank(RestITr.ArtCode)) then begin
              PutRestAccInShopBask(RestAccr,RestITr.ArtCode,RestITr.Object,Jobr.SerNr);
              detailf = false;
            end;
          end;
          if (detailf) then begin
            ConsolidateRestAccr(RestAccr,aRestAccr);
            rwcnt = MatRowCnt(aRestAccr);
            for (i=0;i<rwcnt;i=i+1) begin
              PutRestAccRowInShopBask(aRestAccr,i,RestITr.Object,Jobr.SerNr);
            end;
          end;  
          PutRestAccTipInShopBask(aRestAccr,RestITr.Object,Jobr.SerNr);
        end;
      end;  
    end;
  end;
LSaveRestAcc:;  
  RETURN;
END;

global
updating function LongInt RestAccVcRecordSave(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc USr;
    
  RestAccr.MachineName = CurMachineName;
  RestAccr.TransTime = CurrentTime;
  if (RestAccr.SerNr<=0) then begin
    RestAccr.SerNr = NextSerNr("RestAccVc",RestAccr.TransDate,-1,false,"");
  end;  
  if (blank(RestAccr.DrawerCode)) then begin
    RestAccr.DrawerCode = CurDrawerCode(RestAccr.MachineName);
  end;
  if (blank(RestAccr.TerminalID)) then begin
    RestAccr.TerminalID = CurTerminalID;
  end;
  RestAccSumup(RestAccr,"");
  if (RestAccr.Closed!=0) then begin
    SaveRestAcc(RestAccr,false);
  end;
  if (blank(RestAccr.Location)) then begin
    GetCurUser(USr);
    RestAccr.Location = USr.Location;
  end;    
  RestAccVcRecordSave = res;
  RETURN;
END;

global
updating procedure RestAccVcCreateSoldGiftCert(record RestAccVc RestAccp)
begin
  Integer i,rwcnt;
  row RestAccVc RestAccrw;
  record GCVc GCr;
  record GCVc oldGCr;
  record GCSVc GCSr;
  record GCSVc oldGCSr;
  record GCRVc GCRr;
  
  if (CompanyProgramMode==kProgramModeLiveSync) then begin
    goto LRestAccVcCreateSoldGiftCert;
  end;
  if (RestAccp.MergedToSerNr>0) then begin
    goto LRestAccVcCreateSoldGiftCert;
  end;
  rwcnt = MatRowCnt(RestAccp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccp,i,RestAccrw);
    if (RestAccrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
      GCr.SerNr = RestAccrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin
        RecordNew(GCSr);
//        GCSr.TransDate = GCr.TransDate;
        GCSr.TransDate = RestAccp.TransDate;
        GCSr.ExpiryDate = GCr.ExpiryDate;
        GCSr.Comment = GCr.Comment;
        GCSr.Amount = GCr.Amount;
        GCSr.Balance = GCr.Amount;
        GCSr.SerNr = GCr.SerNr;
        GCSr.BarCode = GCr.BarCode;
        GCSr.InvSerNr = RestAccp.SerNr;
        GCSr.FileName = "RestAccVc";
        if (RecordStore(GCSr,false)) then begin
          RecordCopy(oldGCr,GCr);
          GCr.Closed = 1;
          if (RecordUpdate(oldGCr,GCr,true)==0) then begin
          end;
        end;
      end;
    end;
    if (RestAccrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
      GCSr.SerNr = RestAccrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin
        RecordNew(GCRr);
//        GCRr.TransDate = GCSr.TransDate;
        GCRr.TransDate = RestAccp.TransDate;
        GCRr.ExpiryDate = GCRr.ExpiryDate;
        GCRr.Comment = GCSr.Comment;
        GCRr.Amount = RestAccrw.Sum;
        GCRr.SerNr = NextSerNr("GCRVc",GCRr.TransDate,-1,false,"");            
        GCRr.GCSSerNr = GCSr.SerNr;
        GCRr.BarCode = GCSr.BarCode;
        GCRr.InvSerNr = RestAccp.SerNr;
        GCRr.FileName = "RestAccVc";
        if (RecordStore(GCRr,false)) then begin
          RecordCopy(oldGCSr,GCSr);
          GCSr.Balance = GCSr.Balance - GCRr.Amount;
          if (GCSr.Balance<=0) then begin
            GCSr.Closed = 1;
          end;
          if (RecordUpdate(oldGCSr,GCSr,true)==0) then begin
          end;
        end;
      end;
    end;
  end;
LRestAccVcCreateSoldGiftCert:;  
  return;
end;

global
updating procedure RestAccArtStats(record RestAccVc RAr,Boolean negf)
begin
  Integer i,rwcnt;
  row RestAccVc RArw;
  val basesum;
  val sumprice,temp;
  val icsbasesum,icsgps,icsprice;
  record TaxMatrixVc TMr;
  val sum1,sum4,gps;
  record CUVc CUr;

  if (blankdate(RAr.ReportingDate)) then begin goto LRestAccArtStats; end;
  CUr.Code = RAr.CUCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  rwcnt = MatRowCnt(RAr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RAr,i,RArw);
    if ((RArw.stp==kInvoiceRowTypeNormal) or (RArw.stp==kInvoiceRowTypeStructuredItemComponent)) and (RArw.ovst==0) then begin
//      temp = MulRateToBase1(RAr.CurncyCode,RArw.Sum,RAr.FrRate,RAr.ToRateB1,RAr.ToRateB2,RAr.BaseRate1,RAr.BaseRate2,DefaultCurRoundOff);
      temp = RArw.Sum;
      UnpackRowFieldMatrix(RArw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,RArw.VATCode,temp,1,0,basesum);
      temp = RArw.Quant * RArw.Price;
      if (temp==0) then begin temp = RArw.Sum; end;
      FindSalesExVat(TMr,RArw.VATCode,temp,1,0,temp);
      sumprice = sumprice + temp;
      icsbasesum = basesum;
      icsgps = RArw.rowGP;
      icsprice = temp;
      ArtStatUp(RArw.ArtCode,RAr.CUCode,RAr.BranchID,RAr.Class,RAr.ReportingDate,RArw.Quant,basesum,RArw.rowGP,temp,negf,icsbasesum,icsgps,icsprice);
      gps = gps + RArw.rowGP;
    end;
  end;
  sum1 = RAr.Sum4;
  if (true) then begin//RAr.InclVAT>0
//    sum1 = RAr.Sum4 - RAr.Sum3 - RAr.TAX1Sum - RAr.TAX2Sum;
    sum1 = RAr.Sum4 - RAr.Sum3;
  end;
  basesum = sum1;
  sum4 = RAr.Sum4;
  CustStatUp("RestAccVc",RAr.SerNr,RAr.CUCode,RAr.CUCode,RAr.BranchID,RAr.Class,"",RAr.ReportingDate,basesum,sum4,sum4,gps,blankval,sumprice,negf);
LRestAccArtStats:;
  return;
end;

global
updating function LongInt RestAccVcRecordSaveAfter(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
    
  if (RestAccr.Closed!=0) then begin
    if (GenCouponsf) then begin
      RestAccGeneratePossibleCoupons(RestAccr);
    end;
    if (nonblank(RestAccr.LoyaltyCardNr) and (RestAccr.Points!=0)) then begin
      AddPointsHist(RestAccr.SerNr,"RestAccVc",1);
    end;   
    if (nonblank(RestAccr.LoyaltyCardNr)) then begin
      RestAccVc_LoyaltyCardPointsRedemption(RestAccr,false);
    end;
    RestAccArtStats(RestAccr,false);
    RestAccVcCreateSoldGiftCert(RestAccr);    
    RestAccUpdateCashupHist(RestAccr);
  end;
  if (nonblank(RestAccr.OfficialSerNr)) then begin
    UpdateOffSerNr(RestAccr.SerNr,"RestAccVc",0,RestAccr.OfficialSerNr,false);
  end;
  if (nonblank(RestAccr.OfficialSerNr2)) then begin
    UpdateOffSerNr(RestAccr.SerNr,"RestAccVc2",0,RestAccr.OfficialSerNr,false);
  end;
  RestAccStorePOSHist(RestAccr);
  RestAccVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt RestAccVcRecordUpdate(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  RestAccr.MachineName = CurMachineName;
  if (RestAccr.SerNr<=0) then begin
    RestAccr.SerNr = NextSerNr("RestAccVc",RestAccr.TransDate,-1,false,"");
  end;  
  if (RestAccr.Closed==0) or ((RestAccr.Closed!=0) and (RestAcc2r.Closed==0)) then begin
    RestAccr.TransTime = CurrentTime;
  end;  
  if (blank(RestAccr.DrawerCode)) then begin
    RestAccr.DrawerCode = CurDrawerCode(RestAccr.MachineName);
  end;
  if (blank(RestAccr.TerminalID)) then begin
    RestAccr.TerminalID = CurTerminalID;
  end;
  if ((RestAccr.Closed!=0) and (RestAcc2r.Closed==0)) then begin
    SaveRestAcc(RestAccr,false);
  end;
  RestAccVcRecordUpdate = res;
  RETURN;
END;

updating procedure InvalidateKitchenOrders(record RestAccVc RAr)
begin
  record KitchenOrderVc KOr;
  record KitchenOrderVc oldKOr;
  Boolean found; 

  found = true;
  KOr.RestAccSerNr = RAr.SerNr;
  while (LoopKey("RestAccSerNr",KOr,1,found)) begin
    if (KOr.RestAccSerNr!=RAr.SerNr) then begin found = false; end;
    if (found) then begin
      RecordCopy(oldKOr,KOr);
      KOr.Invalid = 1;
      RecordUpdate(oldKOr,KOr,true);
    end;
  end;
  return;
end;

global
updating function LongInt RestAccVcRecordUpdateAfter(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if ((RestAccr.Closed!=0) and (RestAcc2r.Closed==0)) then begin    
    if (GenCouponsf) then begin
      RestAccGeneratePossibleCoupons(RestAccr);
    end;
    RestAccVcCreateSoldGiftCert(RestAccr);    
    RestAccArtStats(RestAccr,false);
    RestAccUpdateCashupHist(RestAccr);
  end;
  if (RestAccr.MergedToSerNr<0) then begin
    if (nonblank(RestAccr.LoyaltyCardNr)) then begin
      if ((RestAccr.Closed!=0) and (RestAcc2r.Closed==0)) then begin
        if (RestAccr.Points!=0) then begin
          AddPointsHist(RestAccr.SerNr,"RestAccVc",1);
        end;
        RestAccVc_LoyaltyCardPointsRedemption(RestAccr,false);
      end;
      if ((RestAccr.Closed==0) and (RestAcc2r.Closed!=0)) then begin
        if (RestAccr.Points!=0) then begin
          DeletePointsHist(RestAccr.SerNr,"RestAccVc");
        end;
        RestAccVc_LoyaltyCardPointsRedemption(RestAccr,true);
      end; 
      if ((RestAccr.Invalid!=0) and (RestAcc2r.Invalid==0)) then begin
        if (RestAccr.Points!=0) then begin
          DeletePointsHist(RestAccr.SerNr,"RestAccVc");
        end;
        RestAccVc_LoyaltyCardPointsRedemption(RestAccr,true);
      end;   
    end;
  end;
  if ((RestAccr.Closed==0) and (RestAcc2r.Closed!=0)) then begin    //unok
    RestAccArtStats(RestAccr,true);
  end;
  if ((RestAccr.Invalid!=0) and (RestAcc2r.Invalid==0)) then begin
    RestAccArtStats(RestAccr,true);
    SaveRestAcc(RestAccr,true);
    InvalidateKitchenOrders(RestAccr);
  end;
  if (nonblank(RestAccr.OfficialSerNr)) then begin
    if (RestAccr.OfficialSerNr!=RestAcc2r.OfficialSerNr) then begin
      UpdateOffSerNr(RestAccr.SerNr,"RestAccVc",0,RestAccr.OfficialSerNr,true);
    end;
  end else begin
    if (nonblank(RestAcc2r.OfficialSerNr)) then begin
      DeleteOffSerNr(RestAcc2r.SerNr,"RestAccVc");
    end;
  end;
  if (nonblank(RestAccr.OfficialSerNr2)) then begin
    if (RestAccr.OfficialSerNr2!=RestAcc2r.OfficialSerNr2) then begin
      UpdateOffSerNr(RestAccr.SerNr,"RestAccVc2",0,RestAccr.OfficialSerNr2,true);
    end;
  end else begin
    if (nonblank(RestAcc2r.OfficialSerNr2)) then begin
      DeleteOffSerNr(RestAcc2r.SerNr,"RestAccVc2");
    end;
  end;
  RestAccUpdatePOSHist(RestAccr,RestAcc2r);
  RestAccVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt RestAccVcRecordRemoveTest(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  record KitchenOrderVc KOr;

  BlockLoad(DBLockRec);
  res = 1;
/*  why
  if (RestAccr.Cashier!=CurrentUser) then begin
    res = 0;
  end;
*/  
  KOr.RestAccSerNr = RestAccr.SerNr;
  if (ReadFirstKey("RestAccSerNr",KOr,1,true)) then begin
    MessageBox(1560,"");
    res = 0;
  end;
  if (RestAccr.Closed!=0) then begin
    if (RestAccr.TransDate>DBLockRec.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
    end;
  end;  
  RestAccVcRecordRemoveTest = res;  
  return;
end;

global
updating function LongInt RestAccVcRecordRemove(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  RestAccDeletePOSHist(RestAccr);
  RestAccVcRecordRemove = res;  
  return;
end;

global
function LongInt RestITVcRecordDefaults(var record RestITVc RestITr,record RestITVc r2,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record CashierDefBlock CDb;

  BlockLoad(CDb);
  RestITr.RequireOpenSession = CDb.RequireOpenSession;
  RestITVcRecordDefaults = res; 
  return;
END;

global
function LongInt RestAccVcRecordInvalidateTest(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  
  res = 1;
  if (UserCanAction("InvalidateInvoice",false)==false) then begin
    res = 0;
    MessageBox(34500,"");
    goto LRestAccVcRecordInvalidateTest;
  end;
  if (RestAccr.Invalid!=0) then begin
    res = 0;
    goto LRestAccVcRecordInvalidateTest;
  end;
  if (nonblank(RestAccr.Resource)) then begin
    res = 0;
    MessageBox(34500,"");
    goto LRestAccVcRecordInvalidateTest;
  end;

  BlockLoad(DBLockRec);
  if (RestAccr.Closed!=0) then begin
    if (RestAccr.TransDate<=DBLockRec.SLLock) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end else begin
        MessageBox(34500,"");
      end;
      res = 0;
      goto LRestAccVcRecordInvalidateTest;
    end;
    if (RestAccr.TransDate<=DBLockRec.SLWarn) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
    end;
  end;
  if (res) then begin
    RestAccr.Invalid = 1;
    RestAccr.TransTime = CurrentTime;
  end;
  
LRestAccVcRecordInvalidateTest:;
  RestAccVcRecordInvalidateTest = res;  
  return;
end;

global
function LongInt RestAccVcRecordImport(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  row LegalInvNrBlock LINrbrw;

  if (blankdate(RestAccr.ReportingDate)) then begin
    RestAccr.ReportingDate = RestAccr.TransDate;
  end;
  if (blank(RestAccr.OfficialSerNrSerie)) then begin
    GetLegalInvNrRow(RestAccr.OfficialSerNr,LINrbrw);
    RestAccr.OfficialSerNrSerie = GetLegalInvoiceNrSerie(LINrbrw,RestAccr.OfficialSerNr);
  end;
  RestAccVcRecordImport = res;
  return;
end;

global
updating function LongInt RestAccVcRecordImportAfter(var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  if (RestAccr.Invalid==0) then begin
    if (RestAccr.Closed!=0) then begin
      RestAccArtStats(RestAccr,false);
    end;
  end;
  RestAccVcRecordImportAfter = res;
  return;
end;
