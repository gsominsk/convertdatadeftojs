external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure Base1ToBase2(var val,Date,var val);
external function Boolean SLAccTest(string,Integer);
external function Boolean TransInFiscal(Date);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetAccountName(String,var String);
external function Boolean VATCodeExists(string);
external function Boolean PayModeExists(string);
external procedure NormalizeObjstr(var string);
external procedure GetVATCodeAccNumbers(string,var string,var string);
external procedure TRSumup(var record TRVc,var val);
external procedure UpdateAccBals(var record DanTRVc);
external procedure DanTRSumup(var record DanTRVc);
external function Integer GetIntYc(Date);
external function val FindVAT(string,val,Integer,Integer);

function
Boolean CheckIfAccountExists(string accnumber)
BEGIN
  record AccVc Accr;
  Boolean res;
  
  Accr.AccNumber = accnumber;
  res = ReadFirstMain(Accr,1,true);
  if (res) then begin
    if (Accr.blockedFlag!=0) then begin res = false; end;
  end;
  CheckIfAccountExists = res;
  RETURN;          
END;

function Integer CheckIfDanTRBalanced(record DanTRVc DanTRp,row DanTRVc DanTRrwp)
BEGIN
  Integer res;
  Integer i,rwcnt;
  row DanTRVc DanTRrw;
  val bal;

  res = 1;
  if (nonblank(DanTRrwp.AccNumber1)) and (nonblank(DanTRrwp.AccNumber2)) then begin
    res = 2;
    goto LCheckIfDanTRBalanced;
  end;
  rwcnt = MatRowCnt(DanTRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DanTRp,i,DanTRrw);    
    if (DanTRrw.TransNr==DanTRrwp.TransNr) then begin
      bal = bal + DanTRrw.DebVal;
      bal = bal - DanTRrw.CredVal;
    end else begin
      i = rwcnt;
      res = 2;
    end;
  end;
LCheckIfDanTRBalanced:;  
  if (bal==0) then begin res = 0; end;
  CheckIfDanTRBalanced = res;
  RETURN;          
END;

global
function LongInt DanTRVcRecordCheck(var record DanTRVc DanTRp,record DanTRVc DanTR2p,LongInt stat,LongInt long4)
BEGIN
  row DanTRVc DanTRrw;
  row DanTRVc DanTR2rw;
  record DanTRVc locDanTRr;
  LongInt res;
  Integer i,rwcnt,j;
  Integer insertmode,updatemode,error;
  
  res = 0;  
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (blankdate(DanTRp.TransDate)) then begin
    RecordCheckError(1854,"",-1,"TransDate");      
    res = -1;
    goto LDanTRVcRecordCheck;
  end;
  if (stat==updatemode) then begin
    if (DanTR2p.OKFlag!=0) then begin
      RecordCheckError(1274,"",-1,"TransDate");      
      res = -1;
      goto LDanTRVcRecordCheck;
    end;
  end;
  if (DanTRp.Number<=0) then begin
    DanTRp.Number = NextSerNr("DanTRVc",DanTRp.TransDate,-1,false,"");
  end;
  if (DanTRp.Number==-1) then begin
    RecordCheckError(1557,"",-1,"Number");      
    res = -1;
    goto LDanTRVcRecordCheck;
  end;
  if (TransInFiscal(DanTRp.TransDate)==false) then begin
    RecordCheckError(1075,"",-1,"TransDate");      
    res = -1;
    goto LDanTRVcRecordCheck;
  end;
  
  if ((stat==insertmode) or (DanTRp.Number!=DanTR2p.Number)) then begin
    locDanTRr.Number = DanTRp.Number;
    if (ReadFirstMain(locDanTRr,1,true)) then begin
      RecordCheckError(1115,"",-1,"Number");      
      res = -1;
      goto LDanTRVcRecordCheck;
    end;
  end;  
  
  rwcnt = MatRowCnt(DanTRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DanTRp,i,DanTRrw);
    if (nonblankdate(DanTRrw.RowTransDate)) then begin
      for (j=i;j<i;j=j+1) begin
        MatRowGet(DanTRp,j,DanTR2rw);
        if (nonblankdate(DanTR2rw.RowTransDate)) then begin
          if (DanTR2rw.RowTransDate!=DanTRrw.RowTransDate) then begin
            RecordCheckError(1142,"",i,"RowTransDate");      
            res = -1;
            goto LDanTRVcRecordCheck;
          end;
        end;
      end;
    end;
    if (DanTRp.OKFlag!=0) then begin
      if (DanTRrw.DebVal==0) and (DanTRrw.CredVal==0) then begin
        RecordCheckError(1011,"",i,"CredVal");      
        res = -1;
        goto LDanTRVcRecordCheck;
      end;
    end;
    if (SLAccTest(DanTRrw.AccNumber1,0)) then begin
      if (DanTRrw.Typ==0) then begin
        RecordCheckError(1082,DanTRrw.AccNumber1,i,"AccNumber1");      
        res = -1; 
        goto LDanTRVcRecordCheck;
      end;
    end;
    if (SLAccTest(DanTRrw.AccNumber2,0)) then begin
      if (DanTRrw.Typ==0) then begin
        RecordCheckError(1082,DanTRrw.AccNumber2,i,"AccNumber2");      
        res = -1; 
        goto LDanTRVcRecordCheck;
      end;
    end;
    error = CheckIfDanTRBalanced(DanTRp,DanTRrw);
    if (error==1) then begin
      RecordCheckError(1011,"",i,"CredVal");      
      res = -1;
      goto LDanTRVcRecordCheck;
    end;
    if (error==2) then begin
      if (blank(DanTRrw.AccNumber1)) then begin
        RecordCheckError(1854,"",i,"AccNumber1");      
        res = -1;
        goto LDanTRVcRecordCheck;
      end;
      if (blank(DanTRrw.AccNumber2)) then begin
        RecordCheckError(1854,"",i,"AccNumber2");      
        res = -1;
        goto LDanTRVcRecordCheck;
      end;
    end;
    if (nonblank(DanTRrw.AccNumber1)) then begin
      if (CheckIfAccountExists(DanTRrw.AccNumber1)==false) then begin
        RecordCheckError(1854," " & DanTRrw.AccNumber1,i,"AccNumber1");      
        res = -1;
        goto LDanTRVcRecordCheck;
      end;
    end;
    if (nonblank(DanTRrw.AccNumber2)) then begin
      if (CheckIfAccountExists(DanTRrw.AccNumber2)==false) then begin
        RecordCheckError(1007," " & DanTRrw.AccNumber2,i,"AccNumber2");      
        res = -1;
        goto LDanTRVcRecordCheck;
      end;
    end;
    if (nonblank(DanTRrw.VATCode)) then begin
      if (VATCodeExists(DanTRrw.VATCode)==false) then begin
        RecordCheckError(1134," " & DanTRrw.VATCode,i,"VATCode");      
        res = -1;
        goto LDanTRVcRecordCheck;
      end;
    end;  
    if (nonblank(DanTRrw.PayMode)) then begin
      if (PayModeExists(DanTRrw.PayMode)==false) then begin
        RecordCheckError(1250," " & DanTRrw.PayMode,i,"PayMode");      
        res = -1;
        goto LDanTRVcRecordCheck;
      end;
    end;  
  end;
LDanTRVcRecordCheck:;  
  DanTRVcRecordCheck = res;
  RETURN;
END;

global
procedure GetAccountSumDanTR(string accnumber,Date TransDate,var val resp)
BEGIN
  record ObjBalVc ObjBalr;
  val t;
  
  resp = blankval;
  ObjBalr.AccNumber = accnumber;
  if (ReadFirstMain(ObjBalr,1,true)) then begin  
    resp =  GetBalance(ObjBalr,"transdebit",TransDate);  
    t =  GetBalance(ObjBalr,"transcredit",TransDate);      
    resp = resp - t;
  end;    
  RETURN;
END;

procedure GetDanTRSet(var record DanTRVc DanTRp)
BEGIN
  record DanTRSetVc DanTRSetr;
  string 255 tstr;
  val tv;
  
  DanTRSetr.UserCode = CurrentUser;
  if (ReadFirstMain(DanTRSetr,1,true)) then begin
    GetAccName(DanTRSetr.AccNumber1,DanTRp.AccName1,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber1,DanTRp.TransDate,tv);
    DanTRp.AccBal1 = tv;
    GetAccName(DanTRSetr.AccNumber2,DanTRp.AccName2,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber2,DanTRp.TransDate,tv);
    DanTRp.AccBal2 = tv;
    GetAccName(DanTRSetr.AccNumber3,DanTRp.AccName3,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber3,DanTRp.TransDate,tv);
    DanTRp.AccBal3 = tv;
    GetAccName(DanTRSetr.AccNumber4,DanTRp.AccName4,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber4,DanTRp.TransDate,tv);
    DanTRp.AccBal4 = tv;
  end;  
  RETURN;
END;

global
function LongInt DanTRVcRecordDefaults(var record DanTRVc DanTRp,record DanTRVc DanTR2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  DanTRp.TransDate = CurrentDate;
  DanTRp.OKFlag = 0;
  if (SingleUserMode) then begin
    DanTRp.Number = NextSerNr("DanTRVc",DanTRp.TransDate,-1,false,"");
  end;
  DanTRVcRecordDefaults = res;
  RETURN;
END;

global
function LongInt DanTRVcRecordDuplicate(var record DanTRVc DanTRp,record DanTRVc DanTR2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row DanTRVc DanTRrw;
  Integer i,rwcnt;

  DanTRp.TransDate = CurrentDate;
  DanTRp.OKFlag = 0;
  if (SingleUserMode) then begin
    DanTRp.Number = NextSerNr("DanTRVc",DanTRp.TransDate,-1,false,"");
  end;
  GetDanTRSet(DanTRp);
  rwcnt = MatRowCnt(DanTRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DanTRp,i,DanTRrw);
    DanTRrw.TransNr = i+1;
    DanTRrw.RefStr = "";
    DanTRrw.Text = "";
    UpdateAccBals(DanTRp);
    MatRowPut(DanTRp,i,DanTRrw);
  end;
LDanTRVcRecordDuplicate:;
  DanTRSumup(DanTRp);
  DanTRVcRecordDuplicate = res;
  RETURN;
END;

function
Integer GetAccType(string accnumber)
BEGIN
  record AccVc Accr;
  Integer res;
  
  res = -1;
  Accr.AccNumber = accnumber;
  if (ReadFirstMain(Accr,1,true)) then begin
    res = Accr.AccType;
  end;
  GetAccType = res;
  RETURN;  
END;

updating procedure MakeTransFromDanTR(var record DanTRVc DanTRp)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;  
  row DanTRVc DanTRrw;
  Integer i,rwcnt,trrow;
  Integer j,lastj;
  Boolean vatf;
  val tv,vatv,nilv;
  val tv2,vatv2;
  val curtv,curvatv;
  string 255 tstr;
  string 10 svatacc,pvatacc,VATCode;
  LongInt lastnr;
  Array LongInt transnrarr;
  record IVVc IVr;
  record VIVc VIr;
  record AccBlock ARAccRec;
  record APAccBlock APAccRec;
  
  nilv = -1;
  RecordNew(TRr);
  TRr.Number = -1;
  TRr.TransDate = DanTRp.TransDate;
  TRr.IntYc = GetIntYc(TRr.TransDate);   
  trrow = 0;
  rwcnt = MatRowCnt(DanTRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DanTRp,i,DanTRrw);    
    if ((lastnr!=DanTRrw.TransNr) and (lastnr!=-1)) then begin    
      if (TRr.Number==-1) then begin
        TRr.Number = NextSerNr("TRVc",TRr.TransDate,-1,false,"");  
      end;
      TRSumup(TRr,nilv);
      /*
      TRr.DSum = dsum;
      TRr.CSum = -dsum;
      TRr.DiffVal = TRr.DSum + TRr.CSum;
      */
      if (RecordInsert(TRr,false)) then begin 
        for (j=lastj;j<i;j=j+1) begin
          transnrarr[j] = TRr.Number;
        end;
        lastj = i;     
      end;  
      RecordNew(TRr);    
      TRr.Number = -1;
      TRr.TransDate = DanTRp.TransDate;
      TRr.IntYc = GetIntYc(TRr.TransDate);              
      trrow = 0;      
    end;     
    if (nonblankdate(DanTRrw.RowTransDate)) then begin
      TRr.TransDate = DanTRrw.RowTransDate;
      TRr.IntYc = GetIntYc(TRr.TransDate);
    end;
    TRr.RefStr = DanTRrw.RefStr;
    TRr.Comment = DanTRrw.Text;
    if (blank(TRr.Comment)) then begin
      TRr.Comment = DanTRp.Comment; 
    end;
    tv = DanTRrw.DebVal;
    tv2 = DanTRrw.DebVal2;
    curtv = DanTRrw.CurDebVal;
    if (tv==blankval) then begin
      tv = DanTRrw.CredVal;
      tv2 = DanTRrw.CredVal2;
      curtv = DanTRrw.CurCredVal;
    end;
    if (nonblank(DanTRrw.VATCode)) then begin
      vatf = true;
      vatv = FindVAT(DanTRrw.VATCode,tv,1,0);
      VATCode = DanTRrw.VATCode;
      tv = tv - vatv;
      vatv2 = FindVAT(DanTRrw.VATCode,tv2,1,0);
      tv2 = tv2 - vatv2;
      curvatv = FindVAT(DanTRrw.VATCode,curtv,1,0);
      curtv = curtv - curvatv;
    end else begin
      vatf = false;
      vatv = blankval;
    end;
    if (nonblank(DanTRrw.AccNumber1)) then begin
      ClearRow(TRr,TRrw,1);
      TRrw.AccNumber = DanTRrw.AccNumber1;
      TRrw.Comment = DanTRrw.Text;
      if (blank(TRrw.Comment)) then begin
        GetAccName(TRrw.AccNumber,tstr,60);
        TRrw.Comment = tstr;
      end;  
      if (nonblank(DanTRrw.RefStr)) then begin
        TRrw.Comment = TRrw.Comment & ", ";
        TRrw.Comment = TRrw.Comment & DanTRrw.RefStr;
      end;
      if (DanTRrw.DebVal!=blankval) then begin
        TRrw.DebVal = tv;
        TRrw.DebVal2 = tv2;
        TRrw.CurDebVal = curtv;
      end;
      if (DanTRrw.CredVal!=blankval) then begin
        TRrw.CredVal = tv;
        TRrw.CredVal2 = tv2;
        TRrw.CurCredVal = curtv;
      end;
      TRrw.Curncy = DanTRrw.Curncy;
      TRrw.FrRate = DanTRrw.FrRate;
      TRrw.ToRateB1 = DanTRrw.ToRateB1;
      TRrw.ToRateB2 = DanTRrw.ToRateB2;
      TRrw.BaseRate1 = DanTRrw.BaseRate1;
      TRrw.BaseRate2 = DanTRrw.BaseRate2;
      if (vatf) then begin
        TRrw.VATCode = VATCode;
      end;
      TRrw.Typ = DanTRrw.Typ;
      TRrw.SerNr = DanTRrw.InvoiceNr;
      TRrw.CompCode = DanTRrw.CompCode;
      switch (DanTRrw.Typ) begin
        case 0: TRrw.Objects = DanTRrw.Objects;
        case 1: 
          if (DanTRrw.InvoiceNr>0) then begin
            IVr.SerNr = DanTRrw.InvoiceNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              if (TRrw.AccNumber==IVr.ARAcc) then begin
                BlockLoad(ARAccRec);
                if (ARAccRec.ARUseObj!=0) then begin
                  TRrw.Objects = DanTRrw.Objects;
                end;
              end;
            end;
          end;         
        case 2: 
          if (DanTRrw.InvoiceNr>0) then begin
            VIr.SerNr = DanTRrw.InvoiceNr;
            if (ReadFirstMain(VIr,1,true)) then begin
              if (TRrw.AccNumber==VIr.APAcc) then begin
                BlockLoad(APAccRec);
                if (APAccRec.APUseObj!=0) then begin
                  TRrw.Objects = DanTRrw.Objects;
                end;
              end;
            end;
          end;         
      end;
      if (TRrw.DebVal!=0) then begin
        TRrw.DebVal2 = MulRateToBase2(TRrw.Curncy,TRrw.DebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
      end;
      if (TRrw.CredVal!=0) then begin
        TRrw.CredVal2 = MulRateToBase2(TRrw.Curncy,TRrw.CredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
      end;
      MatRowPut(TRr,trrow,TRrw);
      trrow = trrow + 1;
      if (vatf) and (vatv!=0) then begin
        ClearRow(TRr,TRrw,1);
        GetVATCodeAccNumbers(VATCode,svatacc,pvatacc);
        if (GetAccType(DanTRrw.AccNumber1)==3) then begin
          TRrw.AccNumber = svatacc;
        end else begin
          TRrw.AccNumber = pvatacc;
        end;  
        GetAccName(TRrw.AccNumber,tstr,60);
        TRrw.Comment = tstr;
        if (DanTRrw.DebVal!=blankval) then begin
          TRrw.DebVal = vatv;
          TRrw.DebVal2 = vatv2;
          TRrw.CurDebVal = curvatv;
        end;
        if (DanTRrw.CredVal!=blankval) then begin
          TRrw.CredVal = vatv;
          TRrw.CredVal2 = vatv2;
          TRrw.CurCredVal = curvatv;
        end;
        TRrw.Curncy = DanTRrw.Curncy;
        TRrw.FrRate = DanTRrw.FrRate;
        TRrw.ToRateB1 = DanTRrw.ToRateB1;
        TRrw.ToRateB2 = DanTRrw.ToRateB2;
        TRrw.BaseRate1 = DanTRrw.BaseRate1;
        TRrw.BaseRate2 = DanTRrw.BaseRate2;        
        switch (DanTRrw.Typ) begin
          case 0: TRrw.Objects = DanTRrw.Objects;
        end;
        if (TRrw.DebVal!=0) then begin
          TRrw.DebVal2 = MulRateToBase2(TRrw.Curncy,TRrw.DebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
        end;
        if (TRrw.CredVal!=0) then begin
          TRrw.CredVal2 = MulRateToBase2(TRrw.Curncy,TRrw.CredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
        end;
        if (TRrw.DebVal!=0) or (DanTRrw.CredVal!=0) then begin
          MatRowPut(TRr,trrow,TRrw);
          trrow = trrow + 1;
        end;
      end;
    end;
    if (nonblank(DanTRrw.AccNumber2)) then begin
      ClearRow(TRr,TRrw,1);
      TRrw.AccNumber = DanTRrw.AccNumber2;
      GetAccName(TRrw.AccNumber,tstr,60);
      TRrw.Comment = tstr;
      if (nonblank(DanTRrw.DebVal)) then begin
        TRrw.CredVal = tv + vatv;
        TRrw.CredVal2 = tv2 + vatv2;
        TRrw.CurCredVal = curtv + curvatv;
        TRrw.DebVal = blankval;
        TRrw.DebVal2 = blankval;
        TRrw.CurDebVal = blankval;
      end;
      if (nonblank(DanTRrw.CredVal)) then begin
        TRrw.DebVal = tv + vatv;
        TRrw.DebVal2 = tv2 + vatv2;
        TRrw.CurDebVal = curtv + curvatv;
        TRrw.CredVal = blankval;
        TRrw.CredVal2 = blankval;
        TRrw.CurCredVal = blankval;
      end;
      TRrw.Curncy = DanTRrw.Curncy;
      TRrw.FrRate = DanTRrw.FrRate;
      TRrw.ToRateB1 = DanTRrw.ToRateB1;
      TRrw.ToRateB2 = DanTRrw.ToRateB2;
      TRrw.BaseRate1 = DanTRrw.BaseRate1;
      TRrw.BaseRate2 = DanTRrw.BaseRate2;
//      TRrw.DebVal2 = DanTRrw.DebVal2;
//      TRrw.CurDebVal = DanTRrw.CurDebVal;
//      TRrw.CredVal2 = DanTRrw.CredVal2;
      switch (DanTRrw.Typ) begin
        case 0: TRrw.Objects = DanTRrw.Objects;
        case 1: 
          if (DanTRrw.InvoiceNr>0) then begin
            IVr.SerNr = DanTRrw.InvoiceNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              if (TRrw.AccNumber==IVr.ARAcc) then begin
                BlockLoad(ARAccRec);
                if (ARAccRec.ARUseObj!=0) then begin
                  TRrw.Objects = DanTRrw.Objects;
                end;
              end;
            end;
          end;         
        case 2: 
          if (DanTRrw.InvoiceNr>0) then begin
            VIr.SerNr = DanTRrw.InvoiceNr;
            if (ReadFirstMain(VIr,1,true)) then begin
              if (TRrw.AccNumber==VIr.APAcc) then begin
                BlockLoad(APAccRec);
                if (APAccRec.APUseObj!=0) then begin
                  TRrw.Objects = DanTRrw.Objects;
                end;
              end;
            end;
          end;         
      end;
      if (TRrw.DebVal!=0) then begin
        TRrw.DebVal2 = MulRateToBase2(TRrw.Curncy,TRrw.DebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
      end;
      if (TRrw.CredVal!=0) then begin
        TRrw.CredVal2 = MulRateToBase2(TRrw.Curncy,TRrw.CredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
      end;
      MatRowPut(TRr,trrow,TRrw);
      trrow = trrow + 1;
    end;
    lastnr = DanTRrw.TransNr;
  end;  
  if (MatRowCnt(TRr)>0) then begin
    if (TRr.Number==-1) then begin
      TRr.Number = NextSerNr("TRVc",TRr.TransDate,-1,false,"");  
    end;
    TRSumup(TRr,nilv);
    /*
    TRr.DSum = dsum;
    TRr.CSum = -dsum;
    TRr.DiffVal = TRr.DSum + TRr.CSum;    
    */
    if (RecordInsert(TRr,false)) then begin 
      for (j=lastj;j<rwcnt;j=j+1) begin
        transnrarr[j] = TRr.Number;
      end;         
    end;      
  end;
  rwcnt = MatRowCnt(DanTRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DanTRp,i,DanTRrw);    
    DanTRrw.TransNr = transnrarr[i];
    MatRowPut(DanTRp,i,DanTRrw);
  end;  
  RETURN;
END;

global
updating function LongInt DanTRVcRecordSave(var record DanTRVc DanTRp,record DanTRVc DanTR2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row DanTRVc DanTRrw;
  Integer i,rwcnt;
  string 255 tstr;
  
  rwcnt = MatRowCnt(DanTRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(DanTRp,i,DanTRrw);
    tstr = DanTRrw.Objects;
    NormalizeObjstr(tstr);
    DanTRrw.Objects = tstr;
    MatRowPut(DanTRp,i,DanTRrw);
  end;  
  if (DanTRp.OKFlag!=0) then begin
    MakeTransFromDanTR(DanTRp);
  end;
LDanTRVcRecordSave:;  
  DanTRVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt DanTRVcRecordUpdate(var record DanTRVc DanTRp,record DanTRVc DanTR2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row DanTRVc DanTRrw;
  Integer i,rwcnt;
  string 255 tstr;

  if ((DanTR2p.OKFlag==0) and (DanTRp.OKFlag!=0)) then begin
    rwcnt = MatRowCnt(DanTRp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(DanTRp,i,DanTRrw);
      tstr = DanTRrw.Objects;
      NormalizeObjstr(tstr);
      DanTRrw.Objects = tstr;
      MatRowPut(DanTRp,i,DanTRrw);
    end;  
  end;  
  if ((DanTR2p.OKFlag==0) and (DanTRp.OKFlag!=0)) then begin
    MakeTransFromDanTR(DanTRp);
  end;  
LDanTRVcRecordUpdate:;  
  DanTRVcRecordUpdate = res;
  RETURN;
END;

global
function LongInt DanTRVcRecordRemoveTest(var record DanTRVc DanTRp,record DanTRVc DanTR2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
 
  res = 1;
  if (DanTRp.OKFlag!=0) then begin res = 0; end;
LDanTRVcRecordRemTest:;  
  DanTRVcRecordRemoveTest = res;
  RETURN;
END;
