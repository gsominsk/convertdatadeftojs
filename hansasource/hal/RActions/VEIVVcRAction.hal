external updating procedure SaveERecordStatus(string,string,string,string,Integer,string,string,string,LongInt,Integer,string,string);
external procedure GetUserName(string,var string);
external updating procedure SaveERecordStatus_WithRow(string,string,LongInt,string,string,Integer,string,string,string,LongInt,Integer,string,string);
external function string 100 CreateCompID();

global
function LongInt VEIVVcRecordDefaults(var record VEIVVc VEIVr,record VEIVVc VEIV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
    
  VEIVVcRecordDefaults = res;  
  return;
end;

global
function LongInt VEIVVcRecordDuplicate(var record VEIVVc VEIVr,record VEIVVc VEIV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
    
  VEIVVcRecordDuplicate = res;  
  return;
end;

procedure  SetVEIVFlags(record VEIVVc VEIVr)
begin
  switch (VEIVr.OKStatus) begin
    case 0: VEIVr.OKFlag = 0;
    case 1: VEIVr.OKFlag = 18;
    case 2: VEIVr.OKFlag = 45;
  end;
  return;
end;

global
function LongInt VEIVVcRecordSave(var record VEIVVc VEIVr,record VEIVVc VEIV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
    
  if (VEIVr.VISerNr>0) then begin
    if (VEIVr.OKStatus==0) then begin
      VEIVr.OKStatus = 1;
    end;
  end;
  SetVEIVFlags(VEIVr);
  VEIVVcRecordSave = res;  
  return;
end;

global
function LongInt VEIVVcRecordUpdate(var record VEIVVc VEIVr,record VEIVVc VEIV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 100 tstr; 
    
  if (VEIVr.VISerNr>0) then begin
    if (VEIVr.OKStatus==0) then begin
      VEIVr.OKStatus = 1;
    end;
  end;
  SetVEIVFlags(VEIVr);
  
  if (HasLocalization("EST")) then begin
    if (VEIVr.OKStatus!=VEIV2r.OKStatus) then begin
      if (VEIVr.OKStatus==2) then begin
        if (blank(VEIVr.OurContact)) then begin
          GetUserName(CUrrentUser,tstr);
          VEIVr.OurContact = tstr;
        end;
      end;
    end;
  end;
//cust - end
  VEIVVcRecordUpdate = res;  
  return;
end;

global
updating function LongInt VEIVVcRecordUpdateAfter(var record VEIVVc VEIVr,record VEIVVc VEIV2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record CUVc VEr;
  Integer oldcomp;
  Integer status;
  string 255 InvoiceNr;
  record CYBlock CYb;
  record InternetEnablerBlock IEb;
  string 100 CompID;
    
  if (VEIVr.OKStatus!=VEIV2r.OKStatus) then begin
    switch (VEIVr.OKStatus) begin
      case 1: status = 1;
      case 2: status = 0;
    end;
    InvoiceNr = VEIVr.InvoiceNr;
    if (blank(InvoiceNr)) then begin
      InvoiceNr = VEIVr.VESerNr;
    end;
    BlockLoad(CYb);
    BlockLoad(IEb);
    if (HasLocalization("EST")) then begin
      if (status==0) then begin
        CompID = CreateCompID;
        SaveERecordStatus_WithRow("VEIVVc",VEIVr.VISerNr,VEIVr.VESerNr,IEb.CustomerCode,"SuppInv",status,CompID,VEIVr.RejectReason & ";" & VEIVr.OurContact,"EARVEKESKUS2",VEIVr.VersionNr,2,CYb.VATNr,CYb.OrgNr);
      end;
    end else begin
      SaveERecordStatus("VEIVVc",InvoiceNr,VEIVr.CustID,"SuppInv",status,VEIVr.CompID,VEIVr.RejectReason,VEIVr.VECode,VEIVr.VersionNr,0,VEIVr.VEVATNr,VEIVr.VERegNr1);
    end;
    if (VEr.eInvRcvPref==kEInvoiceRcvPreferenceInternal) then begin 
      oldcomp = CurrentCompany;  
      if (SetCompany(StringToInt(VEr.eInvRcvToCompanyCode),false)) then begin
        SaveERecordStatus("VEIVVc",InvoiceNr,VEIVr.CustID,"SuppInv",status,VEIVr.CompID,VEIVr.RejectReason,VEIVr.VECode,VEIVr.VersionNr,0,VEIVr.VEVATNr,VEIVr.VERegNr1);
      end;          
      ResetCompany(oldcomp);
    end;
/*
    switch (VEIVr.OKStatus) begin
      case 1: SaveERecordStatus("VEIVVc",VEIVr.InvoiceNr,VEIVr.CustID,"SuppInv",1,VEIVr.CompID,VEIVr.RejectReason,VEIVr.VECode,VEIVr.VersionNr,0,VEIVr.VEVATNr,VEIVr.VERegNr1);
      case 2: SaveERecordStatus("VEIVVc",VEIVr.InvoiceNr,VEIVr.CustID,"SuppInv",0,VEIVr.CompID,VEIVr.RejectReason,VEIVr.VECode,VEIVr.VersionNr,0,VEIVr.VEVATNr,VEIVr.VERegNr1);
    end;
*/    
  end;
  VEIVVcRecordUpdateAfter = res;  
  return;
end;

global
updating function LongInt VEIVVcRecordCheck(record VEIVVc VEIVr,record VEIVVc VEIV2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 0;
  if (VEIVr.OKStatus==2) then begin
    if (blank(VEIVr.RejectReason)) then begin
      RecordCheckError(1058,"",-1,"RejectReason");      
      res = -1;
      goto LVEIVVcRecordCheck;
    end;
  end;
LVEIVVcRecordCheck:;
  VEIVVcRecordCheck = res;  
  return;
end;

global
updating function LongInt VEIVVcRecordRemoveAfter(var record VEIVVc VEIVr,record VEIVVc VEIV2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record VEIVVc tmpVEIVr;
  record EInvoiceBlock EIb;

  if (HasLocalization("EST")) then begin
    BlockLoad(EIb);
    if (EIb.LastInEstEInvStatusSerial==VEIVr.SerNr) then begin
      tmpVEIVr.SerNr = VEIVr.SerNr-1;
      if (ReadLastMain(tmpVEIVr,1,false)) then begin
        EIb.LastInEstEInvStatusSerial = tmpVEIVr.SerNr;//for pdf check
      end;
      BlockStore(EIb);
    end;
  end;
  VEIVVcRecordRemoveAfter = res;
  RETURN;
END;
