external function Boolean GetPD(var record PDVc);
external function roundmode DefaultRoundMode();
external function Integer PMCheckType(string,var string,var string);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function string 255 GetSupplierOnAccountAC(string);
external procedure ChangeOPInvVal(row OPVc,Date);
external function string 5 AddVATCodeToVATAccRows(string);
external function Boolean GetAccName(string,var string,Integer);
external procedure B1ToB2Val(val,val,val,var val);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure GetVATRow(string,var row VATCodeBlock);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean GetAPPayRate(LongInt,var val,var val,var val,var val,var val,string,Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FindRateOnTR(LongInt,string,var val,var val,var val,var val,var val,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external updating procedure VendStatUp(string,LongInt,string,string,Date,val,val,val,val,Boolean);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);

function Date GetInstallmentAPDueDate(record APVc APr,record InstallmentVc Instr,Integer InstNr)
begin
  Date res;
  record VIVc VIr;
  row InstallmentVc Instrw;
  Integer i,rwcnt;
  
  res = APr.DueDate;
  VIr.SerNr = APr.SerNr;
  
  if (ReadFirstMain(VIr,1,true)==false) then begin
    goto LGetInstallmentAPDueDate;
  end;
  if (InstNr<=0) then begin
    goto LGetInstallmentAPDueDate;
  end;
  
  res = VIr.InvDate;
  rwcnt = MatRowCnt(Instr);
  if (rwcnt>InstNr) then begin
    rwcnt = InstNr;
  end;
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(Instr,i,Instrw);
    if (Instrw.Months!=-1) then begin
      res = AddMonth(res,Instrw.Months);
    end;
    if (Instrw.Days!=-1) then begin
      res = AddDay(res,Instrw.Days);
    end;
  end;
  
LGetInstallmentAPDueDate:;
  GetInstallmentAPDueDate = res;
end;

function
Boolean CheckOPRoundoffSum(record VIVc VIp,record OPVc OPp,Integer oprow,var val roundof,var val emuroundof,var val writeof,var val emuwriteof)
BEGIN
  record APVc APr;
  row OPVc oprwp;
  record CurncyCodeVc invccr,recccr;
  val inv,rec,rnd,temp;
  Boolean invisemucur;
  Boolean recisemucur;
  Boolean res;

  MatRowGet(OPp,oprow,oprwp);
  roundof = blankval;
  emuroundof = blankval;
  writeof = blankval;
  emuwriteof = blankval;
  inv = VIp.PayVal;
  APr.SerNr = VIp.SerNr;
  if (ReadFirstMain(APr,1,true)) then begin
    inv = APr.RVal;
  end;
  oprwp.PInvOutstand = inv;
  if (inv<=0) then begin
    goto LCheckOPRoundoffSum;
  end;
  invccr.CurncyCode = VIp.CurncyCode;
  if (ReadFirstMain(invccr,1,true)==false) then begin
    goto LCheckOPRoundoffSum;
  end;
  if (invccr.EMUCurncy!=0) then begin
    if (OPp.TransDate>=invccr.EMUDate) then begin
      invisemucur = true;
    end;
  end;
  recccr.CurncyCode = oprwp.RecCurncy;
  if (ReadFirstMain(recccr,1,true)==false) then begin
    goto LCheckOPRoundoffSum;
  end;
  if (recccr.EMUCurncy!=0) then begin
    if (OPp.TransDate>=recccr.EMUDate) then begin
      recisemucur = true;
    end;
  end;
  ChangeOPInvVal(oprwp,OPp.TransDate);
/*
  if (oprwp.PInvCurncy==oprwp.RecCurncy) then begin
    oprwp.PInvVal = oprwp.RecVal;
  end else begin
    CurValToOtherCur(OPp.TransDate,oprwp.RecCurncy,oprwp.RecVal,oprwp.PInvCurncy,temp,DefaultCurRoundOff);
    oprwp.PInvVal = temp;
  end;
*/
  MatRowPut(OPp,oprow,oprwp);
  rec = oprwp.PInvVal;
  rnd = inv - rec;
  if (rnd<0) then begin
    temp = -rnd;
  end else begin
    temp = rnd;
  end;
  if (VIp.CurncyCode==oprwp.RecCurncy) then begin
    if (invisemucur) then begin
      if (temp<=invccr.AutoWriteof) then begin
        emuwriteof = Round(rnd,DefaultRoundMode);
        res = true;
      end;
    end else begin
      if (temp<=invccr.AutoWriteof) then begin
        writeof = Round(rnd,DefaultRoundMode);
        res = true;
      end;
    end;
  end else begin
    if (invisemucur and recisemucur) then begin
      if (temp<=invccr.AutoRoundof) then begin
        emuroundof = Round(rnd,DefaultRoundMode);
        res = true;
      end;
    end else begin
      if (temp<=invccr.AutoRoundof) then begin
        roundof = Round(rnd,DefaultRoundMode);
        res = true;
      end;
    end;
  end;
LCheckOPRoundoffSum:;
  CheckOPRoundoffSum = res;
  RETURN;
END;

global
procedure AddOPRoundOffToRows(record OPVc OPp,record APAccBlock APAccRec)
BEGIN
  record VIVc VIr;
  row OPVc OPrw;
  Integer rwcnt,i;
  val roundof,emuroundof,writeof,emuwriteof;

  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      if (CheckOPRoundoffSum(VIr,OPp,i,roundof,emuroundof,writeof,emuwriteof)) then begin
        MatRowGet(OPp,i,OPrw);
        if (roundof!=0) then begin
          OPrw.RoundOff = roundof;
          if (blank(OPrw.RoundOffAcc)) then begin
            OPrw.RoundOffAcc = APAccRec.RateRndOffAcc;
          end;
        end;
        if (emuroundof!=0) then begin
          OPrw.RoundOff = emuroundof;
          if (blank(OPrw.RoundOffAcc)) then begin
            OPrw.RoundOffAcc = APAccRec.EMURndOffAcc;
          end;
        end;
        if (writeof!=0) then begin
          OPrw.RoundOff = writeof;
          if (blank(OPrw.RoundOffAcc)) then begin
            OPrw.RoundOffAcc = APAccRec.PCredAcc;
          end;
        end;
        if (emuwriteof!=0) then begin
          OPrw.RoundOff = emuwriteof;
          if (blank(OPrw.RoundOffAcc)) then begin
            OPrw.RoundOffAcc = APAccRec.EMUWriteOffAcc;
          end;
        end;
      end else begin
        OPrw.RoundOffAcc = "";
        OPrw.RoundOff = blankval;
      end;
      OPrw.PInvVal = OPrw.PInvVal + OPrw.RoundOff;
      MatRowPut(OPp,i,OPrw);
    end;
  end;
  RETURN;
END;

global
updating procedure DeleteAPInstall(record VIVc VIr)
begin
  record APInstallVc APIr;
  Boolean TrHs;
  
  TrHs = true;
  APIr.VISerNr = VIr.SerNr;
  while (LoopKey("VISerNr",APIr,1,TrHs)) begin
    if (TrHs) then begin
      if (APIr.VISerNr!=VIr.SerNr) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      RecordDelete(APIr);
      StepBack(APIr);
    end;
  end;
  return;
end;

global
function Integer APIInstallNr(LongInt VISerNr,Date DueDate)
begin
  Integer res;
  record APInstallVc APIr;
  Boolean found;
  
  APIr.VISerNr = VISerNr;
  ReadLastMain(APIr,1,true);
  res = APIr.InstallNr + 1;
  if (res<=0) then begin res = 1; end;
  APIInstallNr = res;
  return;
end;

global
function Integer ARIInstallNr(LongInt IVSerNr,Date DueDate)
begin
  Integer res;
  record ARInstallVc ARIr;
  Boolean found;
  
  ARIr.InvoiceNr = IVSerNr;
  ReadLastMain(ARIr,1,true);
  res = ARIr.InstallNr + 1;
  if (res<=0) then begin res = 1; end;
  ARIInstallNr = res;
  return;
end;

global
updating procedure APInstallmentAdd2(record APVc APp,Integer InstNr,val rval,val baserval,Date td,Boolean invalidf,string paydeal,Boolean unokf)
begin
  record APInstallVc APIr;
  record APInstallVc oldAPIr;
  Boolean TrHs,treatedf,testf,found;
  val t,valincur,valinbase;
  record PDVc PDr;
  record InstallmentVc Instr;
  Integer keys;
  string 255 ckey;
  Date DueDate;
  
  if (unokf) then begin
    if (InstNr<0) then begin
      goto LAPInstallmentAdd2;
    end;
    PDr.Code = paydeal;
    if (GetPD(PDr)) then begin
      Instr.Code = PDr.Installment;
      if (ReadFirstMain(Instr,1,true)==false) then begin
        goto LAPInstallmentAdd2;
      end;
    end else begin
      goto LAPInstallmentAdd2;
    end;
  end;
  ckey = "VISerNr";
  keys = 1;
  if (InstNr>0) then begin
    ckey = "InstallNr";
    keys = 2;
  end;
  if (unokf) then begin
    APIr.VISerNr = APp.SerNr;
    APIr.InstallNr = InstNr;
    found = ReadFirstKey(ckey,APIr,keys,true);

    if (found) then begin
      RecordCopy(oldAPIr,APIr);
      APIr.RVal = APIr.RVal - rval;
      APIr.BookRVal = APIr.BookRVal - baserval;      
    end else begin
      APIr.VISerNr = APp.SerNr;
      DueDate = GetInstallmentAPDueDate(APp,Instr,InstNr);
      APIr.DueDate = DueDate;
      found = ReadFirstKey("VISerNr",APIr,2,true);
      if (found) then begin
        RecordCopy(oldAPIr,APIr);
        APIr.RVal = APIr.RVal - rval;
        APIr.BookRVal = APIr.BookRVal - baserval;      
      end else begin
        APIr.VISerNr = APp.SerNr;
        APIr.DueDate = DueDate;
        APIr.VECode = APp.VECode;
        APIr.CurncyCode = APp.CurncyCode;
        APIr.RVal = -rval;
        APIr.BookRVal = -baserval;
        APIr.InstallNr = InstNr;
      end;
      if (APIr.InstallNr<=0) then begin
        APIr.InstallNr = APIInstallNr(APIr.VISerNr,APIr.DueDate);
      end;
    end;
    if (found) then begin
      if (RecordUpdate(oldAPIr,APIr,false)==0) then begin
      end;
    end else begin
      if (RecordStore(APIr,false)) then begin
      end;
    end;
  end else begin
    valincur = rval;
    valinbase = baserval;
L22APInstallmentAdd2:;
    APIr.VISerNr = APp.SerNr;
    APIr.InstallNr = InstNr;
    TrHs = true;
    while (LoopKey(ckey,APIr,keys,TrHs)) begin
      if (TrHs) then begin
        if (APIr.VISerNr!=APp.SerNr) then begin TrHs = false; end;
        if (InstNr>0) then begin
          if (APIr.InstallNr!=InstNr) then begin TrHs = false; end;
        end;
        if (valincur<=0) then begin TrHs = false; end;
      end;
      if (TrHs) then begin
        testf = true;
        if (invalidf) then begin
          if (APIr.DueDate!=td) then begin testf = false; end;
        end;
        if (testf) then begin
          t = APIr.RVal - valincur;
          if (t<=0) then begin
            RecordDelete(APIr);
            StepBack(APIr);
            valincur = valincur - APIr.RVal;
            valinbase = valinbase - APIr.BookRVal;
            treatedf = true;
            if (valincur!=0) then begin
              goto L22APInstallmentAdd2;
            end;
          end else begin
            RecordCopy(oldAPIr,APIr);
            APIr.RVal = APIr.RVal - valincur;
            APIr.BookRVal = APIr.BookRVal - valinbase;
            valincur = blankval;
            treatedf = true;
            if (RecordUpdate(oldAPIr,APIr,true)==0) then begin end;
          end;
        end;
      end;
    end;
    if (treatedf==false) then begin
      if (nonblank(paydeal)) then begin
        PDr.Code = paydeal;
        if (ReadFirstMain(PDr,1,true)) then begin
          if (nonblank(PDr.Installment)) then begin
            Instr.Code = paydeal;
            if (ReadFirstMain(Instr,1,true)) then begin
              APIr.VISerNr = APp.SerNr;
              APIr.DueDate = td;
              APIr.VECode = APp.VECode;
              APIr.CurncyCode = APp.CurncyCode;
              if (invalidf) then begin
                APIr.RVal = -rval;
                APIr.BookRVal = -baserval;
                if (RecordStore(APIr,true)) then begin
                end;
              end else begin
                APIr.RVal = rval;
                APIr.BookRVal = baserval;
                if (RecordStore(APIr,true)) then begin
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
LAPInstallmentAdd2:;
  return;
end;

global
updating function Boolean APAdd2(LongInt SerNr,string vecode,Date td,val valp,val bankvalp,val b1bankvalp,string curncy,string bankcurncy,
                                 LongInt prepaynr,val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean credf,Boolean invalidf,Boolean importf,
                                 string paydeal,Integer InstNr,Boolean unokf)
BEGIN
  record BaseCurBlock bcur;
  record OPrsVc OPrsr;
  record APVc oldAPr;
  record APVc APr;
  record VIVc VIr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  val pp,basebal,t;
  Boolean delf,found,trf;
  string 255 vecc;
  val fr,to1,to2,br1,br2;
  Boolean res;
  record CUVc VEr;

  res = true;
  BlockLoad(bcur);
  if (valp!=0) then begin
    VEr.Code = vecode;
    if (ReadFirstMain(VEr,1,true)) then begin end;
    if (SerNr!=-1) then begin
      VIr.SerNr = SerNr;
      if (ReadFirstMain(VIr,1,true)==false) then begin
        OPrsr.VINr = SerNr;
        if (ReadFirstKey("VIKey",OPrsr,1,true)==false) then begin
          res = false;
          goto LAPAdd2;
        end else begin
          VIr.SerNr = OPrsr.VINr;
          VIr.DueDate = OPrsr.TransDate;
          VIr.RebDate = OPrsr.TransDate;
          VIr.InvoiceNr = "";
          VIr.CurncyCode = "";
          VIr.VECode = vecode;
          VIr.VEName = VEr.Name;
          trf = true;
          TRr.Number = OPrsr.TransNr;
          TRr.IntYc = OPrsr.IntYc;  
          if (ReadFirstMain(TRr,2,true)) then begin
            rwcnt = MatRowCnt(TRr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(TRr,i,TRrw);
              if (TRrw.CompCode==vecode) and (TRrw.SerNr==OPrsr.VINr) then begin
                VIr.VEName = TRrw.Comment;
                i = rwcnt;
              end;
            end;
          end;
        end;
      end else begin
        if (VIr.Invalid!=0) then begin goto LAPAdd2; end;
      end;
      delf = false;
      APr.SerNr = SerNr;
      found = ReadFirstMain(APr,1,true);
      RecordCopy(oldAPr,APr);
      if (found) then begin
      end else begin
        APr.SerNr = VIr.SerNr;
        APr.RVal = 0;
        APr.BookRVal = 0;
        if (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
          APr.DueDate = VIr.DueDate; 
        end;
        APr.CurncyCode = VIr.CurncyCode;
        if (nonblankdate(VIr.RebDate)) then begin
          APr.RebDate = VIr.RebDate;
        end else begin
          APr.RebDate = VIr.DueDate;
        end;
        APr.RebDate2 = VIr.RebDate2;
        APr.VECode = VIr.VECode;
        APr.VEName = VIr.VEName;
        APr.InvoiceNr = VIr.InvoiceNr;
      end;
      vecc = APr.VECode;
      APr.RVal = APr.RVal - valp;
      if (trf) then begin      
        FindRateOnTR(APr.SerNr,APr.CurncyCode,fr,to1,to2,br1,br2,false);
        basebal = MulRateToBase1(VIr.CurncyCode,valp,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      end else begin  
        basebal = MulRateToBase1(VIr.CurncyCode,valp,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
      end;  
      APr.BookRVal = APr.BookRVal - basebal;
      if (importf==false) then begin
        if (blank(paydeal)) then begin
          APInstallmentAdd2(APr,InstNr,valp,basebal,td,invalidf,VIr.PayDeal,unokf);
        end else begin
          APInstallmentAdd2(APr,InstNr,valp,basebal,td,invalidf,paydeal,unokf);
        end;
      end;
      if (APr.RVal==0) then begin delf = true; end;
      if (delf==false) then begin
        if (found) then begin
          if (RecordUpdate(oldAPr,APr,true)==0) then begin end;
        end else begin
          if (RecordStore(APr,false)) then begin end;        
        end;
      end else begin
        if (found==true) then begin
          RecordDelete(oldAPr);
        end;
      end;
    end;
      //add the code checking VEBalVc Date jj
    if (SerNr!=-1) then begin
      pp = blankval;
      if (credf==false) then begin
        t = valp;
        if ((blank(VEr.VECurncyCode)) or (VEr.VECurncyCode==bcur.BaseCur1)) then begin
          t = MulRateToBase1(VIr.CurncyCode,valp,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        end;
        VendStatUp("OPVc",SerNr,vecc,"",td,pp,pp,t,basebal,true);
      end;
    end else begin
      vecc = vecode;
      GetAPPayRate(prepaynr,frrate,torate1,torate2,baserate1,baserate2,curncy,td);//??
      basebal = MulRateToBase1(curncy,valp,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      if (prepaynr>0) then begin
        if (((bcur.BaseCur1==bankcurncy) or (blank(bankcurncy))) and (bankvalp!=0)) then begin
          basebal = bankvalp; //must be same as prepayment to supplier
        end;
      end;
      if (b1bankvalp!=0) then begin
        basebal = b1bankvalp;
      end;
      pp = blankval;
      t = valp;
      if (nonblank(VEr.VECurncyCode)) and (VEr.VECurncyCode!=bcur.BaseCur1) then begin
      end else begin          
        if ((blank(VEr.VECurncyCode)) or (VEr.VECurncyCode==bcur.BaseCur1)) then begin
          t = MulRateToBase1(curncy,valp,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
        end;
        if (b1bankvalp==0) then begin
          if (prepaynr>0) then begin
            if (bankcurncy==bcur.BaseCur1) or (blank(bankcurncy)) then begin
              t = bankvalp;
            end;
          end;
        end;
      end;
      VendStatUp("OPVc",SerNr,vecc,"",td,pp,pp,t,basebal,true);
    end;
  end;
LAPAdd2:;
  APAdd2 = res;
  RETURN;
END;

procedure APUPAddRow(Array Date aTransDate,Array LongInt aVISerNr,Array val adiffval,Array val abankval,Array val ab1bankval,
                     Array val afr,Array val ato1,Array val ato2,Array val abr1,Array val abr2,
                     Array string aPInvCurncy,Array string aBankCurncy,Array string aVECode,Array LongInt aPrepayNr,Array LongInt aInstNr,var Integer arrcnt,
                     Date tdp,LongInt sernr,val vp,val bankvp,val b1bankvp,string vecode,
                     string curncy,string bankcurncy,LongInt prepaynr,val fr,val to1,val to2,val br1,val br2,Integer InstNr)
BEGIN
  Integer i;

  for (i=0;i<arrcnt;i=i+1) begin
    if ((sernr==aVISerNr[i]) and (tdp==aTransDate[i]) and (vecode==aVECode[i]) and (InstNr==aInstNr[i])) then begin
      adiffval[i] = adiffval[i] + vp;
      abankval[i] = abankval[i] + bankvp;
      ab1bankval[i] = ab1bankval[i] + b1bankvp;
      goto LAPUPAddRow;
    end;
  end;
  if (vp!=0) then begin
    aTransDate[arrcnt] = tdp;
    aVISerNr[arrcnt] = sernr;
    adiffval[arrcnt] = vp;
    abankval[arrcnt] = bankvp;
    ab1bankval[arrcnt] = b1bankvp;
    aPInvCurncy[arrcnt] = curncy;
    aBankCurncy[arrcnt] = bankcurncy;
    aVECode[arrcnt] = vecode;
    afr[arrcnt] = fr;
    ato1[arrcnt] = to1;
    ato2[arrcnt] = to2;
    abr1[arrcnt] = br1;
    abr2[arrcnt] = br2;
    aPrepayNr[arrcnt] = prepaynr;
    aInstNr[arrcnt] = InstNr;
    arrcnt = arrcnt + 1;
  end;
LAPUPAddRow:;
  RETURN;
END;

global
updating procedure APUpdateOP(record OPVc OPp,record OPVc OP2p,Boolean op1f,Boolean op2f,Boolean invalidf,Boolean importf,Boolean unokf)
BEGIN
  Integer i,rwcnt;
  row OPVc OPrw;
  row OPVc OP2rw;
  val v,bankv,b1bankv;
  Date td;
  val fr,to1,to2,br1,br2;

  Array Date aTransDate;
  Array LongInt aVISerNr;
  Array val adiffval;
  Array val abankval;
  Array val ab1bankval;
  Array val afr;
  Array val ato1;
  Array val ato2;
  Array val abr1;
  Array val abr2;
  Array string 5 aPInvCurncy;
  Array string 5 aBankCurncy;
  Array string 20 aVECode;
  Array LongInt aPrepayNr;
  Array LongInt aInstNr;
  Integer arrcnt;  
  
  if (op2f) then begin        
    if (OP2p.SerNr!=-1) then begin
      td = OP2p.TransDate;
      rwcnt = MatRowCnt(OP2p);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OP2p,i,OP2rw);
        if (OP2rw.ovst==0) then begin
          if (OP2rw.stp!=7) then begin
            v = -OP2rw.PInvVal;
            bankv = -OP2rw.BankVal;
            b1bankv = -OP2rw.B1BankVal;
            GetFullCurncyRate(OPrw.PInvCurncy,OP2p.TransDate,fr,to1,to2,br1,br2);
            APUPAddRow(aTransDate,aVISerNr,adiffval,abankval,ab1bankval,afr,ato1,ato2,abr1,abr2,aPInvCurncy,aBankCurncy,aVECode,aPrepayNr,aInstNr,arrcnt,
                       td,OP2rw.VISerNr,v,bankv,b1bankv,OP2rw.VECode,OP2rw.PInvCurncy,OP2rw.BankCurncy,OP2rw.PrepayNr,fr,to1,to2,br1,br2,OP2rw.InstNr);
          end;
        end;
      end;
    end;
  end;
  if (op1f) then begin
    if (OPp.SerNr!=-1) then begin
      td = OPp.TransDate;
      rwcnt = MatRowCnt(OPp);
      for (i=0; i<rwcnt;i=i+1) begin
        MatRowGet(OPp,i,OPrw);
        if (OPrw.ovst==0) then begin
          if (OPrw.stp!=kPaymentRowTypeBankFee) then begin
            v = OPrw.PInvVal;
            bankv = OPrw.BankVal;
            b1bankv = OPrw.B1BankVal;
            GetFullCurncyRate(OPrw.PInvCurncy,OPp.TransDate,fr,to1,to2,br1,br2);
            APUPAddRow(aTransDate,aVISerNr,adiffval,abankval,ab1bankval,afr,ato1,ato2,abr1,abr2,aPInvCurncy,aBankCurncy,aVECode,aPrepayNr,aInstNr,arrcnt,
                       td,OPrw.VISerNr,v,bankv,b1bankv,OPrw.VECode,OPrw.PInvCurncy,OPrw.BankCurncy,OPrw.PrepayNr,fr,to1,to2,br1,br2,OPrw.InstNr);
          end;
        end;
      end;
    end;
  end;
  for (i=0;i<arrcnt;i=i+1) begin
    if (adiffval[i]!=0) then begin
      if (APAdd2(aVISerNr[i],aVECode[i],aTransDate[i],adiffval[i],abankval[i],ab1bankval[i],aPInvCurncy[i],aBankCurncy[i],aPrepayNr[i],afr[i],ato1[i],ato2[i],abr1[i],abr2[i],false,invalidf,importf,"",aInstNr[i],unokf)) then begin
      end;
    end;
  end;
  RETURN;
END;

updating procedure OPrsStats(record OPVc OPp)
BEGIN
  Integer i,rwcnt;
  row OPVc OPrw;
  record OPrsVc mainr;
  record OPrsVc OPrsr;
  record VIVc VIr;
  Boolean found;
  string 255 tstr;
  
  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    switch (OPrw.stp) begin
      case kPaymentRowTypeNormal:
        if (OPrw.ovst==0) then begin
          if (OPrw.VISerNr!=-1) then begin
            VIr.SerNr = OPrw.VISerNr;
            found = ReadFirstMain(VIr,1,true);
            if (found ==false) then begin
              OPrsr.VINr = OPrw.VISerNr;
              found = ReadFirstKey("VIKey",OPrsr,1,true);
            end;  
            if (found==false) then begin
              goto L88OPrsStats;
            end;
          end;
          mainr.AccNr = GetSupplierOnAccountAC(OPrw.VECode);
          mainr.VECode = OPrw.VECode;
          mainr.TransDate = OPp.TransDate;
          mainr.TransNr = OPp.SerNr;
          mainr.TransType = kOPrsTransTypePayment;
          mainr.VINr = OPrw.VISerNr;
          if (nonblank(OPrw.PayMode)) then begin
            mainr.CheckType = PMCheckType(OPrw.PayMode,tstr,tstr);
          end else begin
            mainr.CheckType = PMCheckType(OPp.PayMode,tstr,tstr);
          end;
          mainr.ChequeNr = OPrw.ChequeNr;
          if (RecordStore(mainr,false)) then begin end;
        end;
L88OPrsStats:;
    end;
  end;
  RETURN;
END;

global
updating procedure RecidAction_rlOPstat(record OPVc OPp)
BEGIN
  if (IsRecordLocked(OPp)==false) then begin
    OPrsStats(OPp);
    OPp.StatFlag = 1;
  end;
  RETURN;
END;

global
function Integer BookVATonRateGainOP(record TRVc gTRp,record VIVc VIr,var val rd,var val rd2,val baserate1,val baserate2,Boolean dc2,var val TotSum)
BEGIN
  Integer res;
  row VIVc VIrw;
  Integer i,rwcnt;
  val vat,tax,tot;
  val vat2,tax2,tot2;
  string 255 tstr;
  row VATCodeBlock VATCoderw;
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    MulVATIV(VIrw.VATCode,rd,vat,tax,1,VIr.NoTAXonVAT);
    if (vat!=0) or (tax!=0) then begin
      tot = tot + vat + tax;
      B1ToB2Val(vat,baserate2,baserate1,vat2);
      B1ToB2Val(tax,baserate2,baserate1,tax2);
      tot2 = tot2 + vat2 + tax2;
      GetVATRow(VIrw.VATCode,VATCoderw);
      if (GetAccName(VATCoderw.SalesVATAcc,tstr,60)==false) then begin 
        res = 1902;
        goto LBookVATonRateGainOP;
      end;
      AddEuroTrRow(gTRp,VATCoderw.SalesVATAcc,"",AddVATCodeToVATAccRows(VATCoderw.VATCode),tstr,vat,baserate1,baserate2,false,dc2,TotSum,false,"","","");
      if (GetAccName(VATCoderw.Tax1Acc,tstr,60)==false) then begin 
        res = 1902;
        goto LBookVATonRateGainOP;
      end;
      AddEuroTrRow(gTRp,VATCoderw.Tax1Acc,"","",tstr,tax,baserate1,baserate2,true,dc2,TotSum,false,"","","");
    end;
  end;
LBookVATonRateGainOP:;  
  rd = rd - tot;
  rd2 = rd2 - tot2;
  BookVATonRateGainOP = res;
  RETURN;
END;

global
procedure OPGetVATCodeAccNumbers2(record VATCodeBlock VATRec,string vatcode,Integer VIOPBookVAT,var string pvatacc,var string ppvatacc)
begin
  row VATCodeBlock vatrw;
  Integer i,rwcnt;

  BlockLoad(VATRec);
  pvatacc = "";  
  ppvatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      if (VIOPBookVAT!=0) then begin
        pvatacc = vatrw.CorPurchVATAcc;
        ppvatacc = vatrw.PurchVATAcc;
      end else begin
        pvatacc = vatrw.PurchVATAcc;
        ppvatacc = vatrw.PayPurchVATAcc;
      end;
      i = rwcnt;
    end;  
  end;  
  return;
end;

global
procedure OPGetVATCodeAccNumbers(record VATCodeBlock VATRec,string vatcode,var string pvatacc,var string ppvatacc)
begin
  OPGetVATCodeAccNumbers2(VATRec,vatcode,0,pvatacc,ppvatacc);
  return;
end;

global
procedure GetPORate(LongInt ordernr,var val fr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  record POVc POr;
  
  POr.SerNr = ordernr;
  if (ReadFirstMain(POr,1,true)) then begin
    fr = POr.FrRate;
    to1 = POr.ToRateB1;
    to2 = POr.ToRateB2;
    br1 = POr.BaseRate1;
    br2 = POr.BaseRate2;
  end;
  RETURN;
END;

global
function Integer AddOPRowWHTax(record TRVc gTRp,record OPVc OPp,record VIVc VIp,row WHTaxBlock WHTaxrw,Integer currow,
                        var val rowsum,var val currowsum,var val TotSum,
                        string apacc,string feeacc,Boolean dc1,Boolean dc2,Boolean aaccf,Integer transtocreate,
                        Boolean vendinfof,Integer objectonbankacc)
BEGIN
  row OPVc OPrw;
  string 255 accstr,tstr,otxt,tstr2,taccnumber;
  val booked,curbooked;
  Integer res;
  val fr,to1,to2,br1,br2;
  Boolean accf;
  Date bd;

  accf = aaccf;
  res = 0; 
  MatRowGet(OPp,currow,OPrw);
  if (OPrw.BankVal!=0) then begin
    switch(transtocreate) begin
      case 4:
        if (blank(VIp.APAcc)) then begin
          VIp.APAcc = apacc;
        end;
        VIp.APAcc = accstr;
        if (VIp.SerNr!=-1) then begin
          tstr = VIp.SerNr;
        end else begin
          tstr = VIp.VECode;
        end;
        tstr = tstr & " ";
        tstr = tstr & VIp.VEName;
//        otxt = pmrw.Objects;
      otherwise
        accstr = WHTaxrw.AccNumber;
        tstr = WHTaxrw.Comment;
    //    otxt = pmrw.Objects;
    end;
    if (GetAccName(accstr,tstr2,60)==false) then begin
      res = 2157;
      goto LAddOPRowWHTax;
    end;
    if (blank(tstr)) then begin
      tstr = tstr2;
    end;
    curbooked = OPrw.BankVal;
    curbooked = curbooked + OPrw.BankFeeVal;
    GetFullCurncyRate(OPrw.BankCurncy,OPp.TransDate,fr,to1,to2,br1,br2);
    if (OPrw.Coef!=0) then begin
      br2 = OPrw.Coef;
    end;
    if (OPrw.B1BankVal==0) then begin
      booked = MulRateToBase1(OPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    end else begin
      booked = OPrw.B1BankVal;
    end;
    if (vendinfof) then begin
      tstr = tstr & " ";
      if (OPrw.VISerNr!=-1) then begin
        tstr = tstr & OPrw.VISerNr;      
      end else begin
        tstr = tstr & OPrw.VECode;
      end;
      tstr = tstr & " ";
      tstr = tstr & OPrw.Comment;
    end;
    if (objectonbankacc!=0) then begin
      if ((nonblank(otxt)) and (nonblank(OPrw.Objects))) then begin
        otxt = otxt & ",";
      end;
      otxt = otxt & OPrw.Objects;
    end;
    if (CheckTTRPerRow("OPVc",accstr,otxt,false,taccnumber,1)) then begin end;      
    AddEuroCurncyNomARTrRow(gTRp,accstr,otxt,"",tstr,booked,OPrw.B2BankVal,accf,false,TotSum,
                            OPrw.BankCurncy,fr,to1,to2,br1,br2,
                            curbooked,blankval,"",-1,0,blankval,bd,-1,false,taccnumber,"","");
    
//    AddEuroCurncyTrRow(gTRp,accstr,otxt,"",tstr,booked,accf,false,TotSum,
//                       OPrw.BankCurncy,fr,to1,to2,br1,br2,curbooked,blankval,-1,false,"");
    rowsum = rowsum + booked;
    currowsum = rowsum + curbooked;
    if (OPrw.BankFeeVal!=0) then begin
      if (GetAccName(feeacc,tstr,60)==false) then begin
        res = 2136;
        goto LAddOPRowWHTax;
      end;
      curbooked = OPrw.BankFeeVal;
      booked = MulRateToBase1(OPrw.BankCurncy,curbooked,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      if (CheckTTRPerRow("OPVc",feeacc,"",true,taccnumber,1)) then begin end;      
      AddEuroCurncyTrRow(gTRp,feeacc,"","",tstr,booked,true,true,TotSum,
                         OPrw.BankCurncy,fr,to1,to2,br1,br2,curbooked,blankval,-1,false,taccnumber);
      rowsum = rowsum + booked;
      currowsum = currowsum + curbooked;
    end;
  end;
LAddOPRowWHTax:;
  AddOPRowWHTax = res;
  RETURN;
END;
