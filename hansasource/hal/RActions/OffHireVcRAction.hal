external procedure WarnFutureDate(Boolean,Date);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external updating function LongInt RentResVcRecordUpdateAfter(var record RentResVc,record RentResVc,LongInt,LongInt);
external procedure CalcSum(val,val,val,val,var val,Integer);
external updating procedure UpdateCustRentStat(LongInt,string,string,val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean SerialNrAvail(string,string,string,val);
external function Boolean IntSerialNrAvail2(string,string,string,val);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestOffHireVc(LongInt,Date,var Boolean);
external updating procedure OffHireUpdateIntINrs(record OffHireVc,Boolean,Boolean);
external function Boolean ShouldItemUpdateStock(string);
external updating procedure OffHireUpdateSVO(record OffHireVc);
external procedure SetRentResDone(var record RentResVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
function LongInt OffHireVcRecordDefaults(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  OffHirer.SerNr = -1;
  OffHirer.RegDate = CurrentDate;
  OffHirer.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    OffHirer.SerNr = NextSerNr("OffHireVc",OffHirer.TransDate,-1,false,"");
  end;
  OffHirer.AgreementNr = -1;
  OffHirer.CollectionNr = -1;
  OffHirer.SVONr = -1;
  OffHirer.Comment = "";
  OffHirer.OKFlag = 0;
  OffHirer.OKCheck = 0;
  OffHirer.SumQuant = BlankVal;
  OffHireVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt OffHireVcRecordDuplicate(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val fr,to1,to2,br1,br2;
  
  OffHirer.SerNr = -1;
  OffHirer.RegDate = CurrentDate;
  OffHirer.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    OffHirer.SerNr = NextSerNr("OffHireVc",OffHirer.TransDate,-1,false,"");
  end;
  OffHirer.OKFlag = 0;
  OffHirer.OKCheck = 0;
  WarnFutureDate(true,OffHirer.TransDate);
  OffHireVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt OffhireVcRecordSave(var record OffhireVc Offhirer,record OffhireVc Offhire2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  if (OffHirer.OKFlag==1) then begin
    Offhirer.OKCheck = 1;
  end else begin
    Offhirer.OKCheck = 0;
  end;
  OffhireVcRecordSave = res;
  return;
end;

global
updating function LongInt OffhireVcRecordUpdate(var record OffhireVc Offhirer,record OffhireVc Offhire2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (OffHirer.OKFlag==1) then begin
    Offhirer.OKCheck = 1;
  end else begin
    Offhirer.OKCheck = 0;
  end;
  OffhireVcRecordUpdate = res;
  return;
end;

global
updating function LongInt OffHireVcRecordCheck(var record OffHireVc OffHirep,record OffHireVc OffHire2p,LongInt stat,LongInt check)
BEGIN
  LongInt res,sernr;
  record AgreementVc Agreementr;
  row OffHireVc OffHirerw;
  record INVc INr;
  record AccVc Accr;
  record LocationVc LocRec;
  record MainStockBlock MainStockRec;
  record SRBlock SRRec;
  record OffHireVc locOffHirer;
  row OffHireVc OffHire2rw;            
  Integer i,rwcnt,j,cnt,errcode;
  Integer insertmode,updatemode;
  LongInt oldnr,newnr;
  Boolean transf,gentrans,thesamelocf;
  val t,prev;
  string 10 location,loc2;
  string 255 objstr;
  record RentResVc RentResr;
  row RentResVc RentResrw;
  record IntSerBalVc IntSBr;
  record RentINVc RentINr;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  BlockLoad(SRRec);
  BlockLoad(MainStockRec);
  oldnr = OffHirep.SerNr; 
  transf = false;
  if (OffHirep.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if ((OffHire2p.OKFlag==0) or (OffHire2p.OKFlag==2)) then begin transf = true; end;
    end;
  end;
  if (stat==updatemode) then begin
    if (OffHirep.SerNr<=0) and (OffHire2p.OKFlag==0) then begin
      OffHirep.SerNr = OffHire2p.SerNr;
    end;
  end;  
  if (OffHirep.OKFlag==1) then begin
    OffHirep.OKCheck = 1;
  end else begin
    OffHirep.OKCheck = 0;
  end;
  if (OffHirep.SerNr<=0) then begin
    OffHirep.SerNr = NextSerNr("OffHireVc",OffHirep.TransDate,-1,false,"");
  end;
  if ((stat==insertmode) or (OffHirep.SerNr!=OffHire2p.SerNr)) then begin
    locOffHirer.SerNr = OffHirep.SerNr;
    if (ReadFirstMain(locOffHirer,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LOffHireVcRecordCheck;
    end;
  end;
  if (SerNrTestOffHireVc(OffHirep.SerNr,OffHirep.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LOffHireVcRecordCheck;
  end;
  if (Date2Test("OffHireVc",OffHirep.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LOffHireVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,OffHirep.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LOffHireVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("OffHireOK",true)==false) then begin // OffHireOK new UserCanAction, need the new name...
      RecordCheckError(1274,StringFromStringSet(3,"OffHireOK"),-1,"SerNr");      
      res = -1; 
      goto LOffHireVcRecordCheck;
    end;
  end;
  if (OffHirep.AgreementNr>-1) then begin
    Agreementr.SerNr = OffHirep.AgreementNr;
    if (ReadFirstMain(Agreementr,1,true)) then begin
      if (Agreementr.OKFlag==0) then begin
        RecordCheckError(2161,"",-1,"SerNr");      
        res = -1; 
        goto LOffHireVcRecordCheck;
      end;
    end else begin
      RecordCheckError(1290,"",-1,"SerNr");      
      res = -1; 
      goto LOffHireVcRecordCheck;
    end;
  end;
  location = OffHirep.Location;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  LocRec.Code = location;
  if (nonblank(location)) then begin
    if (ReadFirstMain(LocRec,1,true)==false) then begin
      RecordCheckError(1120,location,-1,"Location");      
      res = -1;
      goto LOffHireVcRecordCheck;
    end;
  end;
  rwcnt = MatRowCnt(OffHirep);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OffHirep,i,OffHirerw);
    if (nonblank(OffHirerw.Location)) then begin
      loc2 = OffHirerw.Location;
    end else begin
      loc2 = OffHirep.Location;
      if (blank(loc2)) then begin
        loc2 = location;
      end;
    end;
    if (loc2==OffHirerw.Location) then begin
      thesamelocf = true;
    end;
    if (nonblank(OffHirerw.ArtCode)) then begin
      if (ReadFirstItem(OffHirerw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
        res = -1;
        goto LOffHireVcRecordCheck;
      end;
      if (INr.ItemType==2) then begin
         RecordCheckError(1247,"",i,"Quant");      
         res = -1; 
         goto LOffHireVcRecordCheck;
      end;
      if (OffHirerw.ReturnedQty<0) or (OffHirerw.ServiceQty<0) or (OffHirerw.SoldQty<0) or (OffHirerw.MissingQty<0) or (OffHirerw.ScrapedQty<0) then begin
        RecordCheckError(1574,"",i,"Quant");
        res = -1;
        goto LOffHireVcRecordCheck;
      end;
      if (OffHirerw.ReturnedQty==0) and (OffHirerw.ServiceQty==0) and (OffHirerw.SoldQty==0) and (OffHirerw.MissingQty==0) and (OffHirerw.ScrapedQty==0) then begin
        RecordCheckError(20882,"",i,"ReturnedQty");
        res = -1;
        goto LOffHireVcRecordCheck;
      end;
      if ((check!=0) and (transf)) then begin      
        if (INr.SerNrf!=0) then begin
          if (OffHirerw.Cost==0) then begin
            RecordCheckError(1058,"",i,"Cost");      
            res = -1; 
            goto LOffHireVcRecordCheck;
          end;
          if (OffHirep.SVONr<0) then begin
            RentINr.Code = OffHirerw.ArtCode;
            RentINr.SerialNr = OffHirerw.SerialNr;
            if (ReadFirstMain(RentINr,2,true)==false) then begin
              RecordCheckError(2047,"",i,"SerialNr");     
              res = -1; 
              goto LOffHireVcRecordCheck;
            end;
          end;
/*          
          IntSBr.Item = OffHirerw.ArtCode;
          IntSBr.Serial = OffHirerw.SerialNr;
          IntSBr.Location = OffHirep.Location;
          if (ReadFirstMain(IntSBr,3,true)==false) then begin
            RecordCheckError(1240,"",i,"SerialNr");      
            res = -1; 
            goto LOffHireVcRecordCheck;
          end;
*/          
        end;
//      end else begin // this can't be correct....
        if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
          if (blank(OffHirerw.SerialNr)) then begin
            if (OffHirerw.Quant!=0) then begin
              RecordCheckError(1239,"",i,"SerialNr");      
              res = -1; 
              goto LOffHireVcRecordCheck;
            end;
          end;
          if (OffHirerw.Quant>0) then begin
            if (IntSerialNrAvail2(OffHirerw.ArtCode,OffHirerw.SerialNr,loc2,OffHirerw.Quant)) then begin
              RecordCheckError(1241,"",i,"SerialNr");      
              res = -1; 
              goto LOffHireVcRecordCheck;
            end;
          end;
          if (OffHirerw.Quant>1) then begin
            RecordCheckError(1242,"",i,"SerialNr");      
            res = -1; 
            goto LOffHireVcRecordCheck;
          end;
          if (OffHirerw.Quant>0) then begin
            for (j=0;j<i;j=j+1) begin
              MatRowGet(OffHirep,j,OffHire2rw);
              if ((OffHirerw.ArtCode==OffHire2rw.ArtCode) and (OffHirerw.SerialNr==OffHire2rw.SerialNr)) then begin
                RecordCheckError(1242,"",i,"SerialNr");      
                res = -1; 
                goto LOffHireVcRecordCheck;
              end;
            end;
          end;
        end;
        RentResr.SerNr = OffHirerw.RentResSerNo;
        if (ReadFirstMain(RentResr,1,true)) then begin
          if (OffHirerw.RentResRow==-1) then begin
            if ((OffHirerw.ArtCode==RentResr.Code) and (OffHirerw.SerialNr==RentResr.SerialNr)) then begin
              if (OffHirerw.Quant>0) then begin
                if ((RentResr.RentResRet+OffHirerw.Quant)>RentResr.RentQuant) then begin
                  RecordCheckError(1733,"",i,"Quant");      
                  res = -1; 
                  goto LOffHireVcRecordCheck;
                end;
              end;
            end;
// Extra
            if ((RentResr.RentResDel-RentResr.RentResRet)<OffHirerw.Quant) then begin
              RecordCheckError(24022,"",i,"ReturnedQty");      
              res = -1;
              goto LOffHireVcRecordCheck;
            end;
          end else begin
            if (OffHirerw.Quant>0) then begin
              if (OffHirerw.RentResRow<MatRowCnt(RentResr)) then begin
                MatRowGet(RentResr,OffHirerw.RentResRow,RentResrw);
                if ((RentResrw.Ret+OffHirerw.Quant)>RentResrw.Quant) then begin
                  RecordCheckError(1733,"",i,"Quant");      
                  res = -1; 
                  goto LOffHireVcRecordCheck;
                end;
              end;
            end;
// Extra
            if ((nonblank(RentResrw.SerialNr)) and (nonblank(OffHirerw.SerialNr))) then begin
              if (RentResrw.SerialNr<>OffHirerw.SerialNr) then begin
                RecordCheckError(24023,"",i,"SerialNr");      
                res = -1;
                goto LOffHireVcRecordCheck;
              end;
            end;
            MatRowGet(RentResr,OffHirerw.RentResRow,RentResrw);
            if ((RentResrw.Del-RentResrw.Ret)<OffHirerw.Quant) then begin
              RecordCheckError(24022,"",i,"ReturnedQty");      
              res = -1;
              goto LOffHireVcRecordCheck;
            end;
          end;
        end;
      end;
    end;
  end;
LOffHireVcRecordCheck:;
  if (res!=0) then begin
    OffHirep.SerNr = oldnr;
  end;
  OffHireVcRecordCheck = res;
  RETURN;
END;

global 
function Boolean OffHireDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record OffHireVc OffHirer;
  row OffHireVc OffHirerw;
  Boolean res;

  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,OffHirer);
    if (OffHirer.OKFlag==0) then begin
      MatRowGet(OffHirer,rownr,OffHirerw);
    end else begin
      res = false;
    end;
  end;
  OffHireDClassDeleteRowTest = res;
  return;
end;

global
updating procedure UpdateInternalInstock(string ac,string location,val q)
BEGIN
  record IntISVc IntISr;
  record IntISVc oldIntISr;
  Boolean found,deltest;
  string 10 loc2;
  record INVc INr;
  Integer keys;
  
  keys = 2;
  loc2 = location;
  IntISr.Code = ac;
  if (ReadFirstItem(ac,INr,false,false)) then begin
    if (ac!=INr.Code) then begin
      IntISr.Variety = right(ac,len(ac)-len(INr.Code));
      IntISr.Code = INr.Code;
      keys = 3;
    end;
  end;
  IntISr.Location = loc2;
  found = ReadFirstMain(IntISr,keys,true);
  RecordCopy(oldIntISr,IntISr);
  if (found==false) then begin
    IntISr.Code = ac;
    if (nonblank(INr.Code)) then begin
      if (ac!=INr.Code) then begin
        IntISr.Variety = right(ac,len(ac)-len(INr.Code));
        IntISr.Code = INr.Code;
      end;
    end;
    IntISr.Location = loc2;
    IntISr.Instock = 0;
  end;
  IntISr.Instock = IntISr.Instock + q;
  if (IntISr.Instock==0) then begin deltest = true; end;
  if (deltest==false) then begin
    if (found==false) then begin
      if (RecordStore(IntISr,true)) then begin end;
    end else begin
      if (RecordUpdate(oldIntISr,IntISr,found)==0) then begin end;
    end;
  end else begin
    if (found) then begin
      if (RecordUpdate(oldIntISr,IntISr,found)==0) then begin end;
    end;
  end;
  RETURN;
END;

updating procedure OffHireUpdateStock(var record OffHireVc OffHirep,Boolean negf)
BEGIN
  record MainStockBlock MainStockRec;
  row OffHireVc OffHirerw;
  Integer i,rwcnt;
  val t,t2;
  string 10 location,loc2;
  
  BlockLoad(MainStockRec);
  location = OffHirep.Location;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  rwcnt = MatRowCnt(OffHirep);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OffHirep,i,OffHirerw);
    if (nonblank(OffHirerw.Location)) then begin
      loc2 = OffHirerw.Location;
    end else begin
      loc2 = location;
    end;
    if (nonblank(OffHirerw.ArtCode)) then begin
      if ((OffHirerw.Status==0) or (OffHirerw.Status==4) or (OffHirerw.Status==5)) then begin
        t2 = -OffHirerw.Quant;
        if (ShouldItemUpdateStock(OffHirerw.ArtCode)==false) then begin
          t2 = blankval;
        end;
        if (t2!=0) then begin
          t2 = OffHirerw.Quant;
          if (negf) then begin t2 = -t2; end;
          UpdateInternalInstock(OffHirerw.ArtCode,loc2,t2);
        end;
      end;
      if (OffHirerw.Status==7) then begin
        if (OffHirerw.ReturnedQty>0) then begin
          t2 = -OffHirerw.ReturnedQty;
          if (ShouldItemUpdateStock(OffHirerw.ArtCode)==false) then begin
            t2 = blankval;
          end;
          if (t2!=0) then begin
            t2 = OffHirerw.ReturnedQty;
            if (negf) then begin t2 = -t2; end;
            UpdateInternalInstock(OffHirerw.ArtCode,loc2,t2);
          end;
        end;
        if (OffHirerw.ServiceQty>0) then begin
          t2 = -OffHirerw.ServiceQty;
          if (ShouldItemUpdateStock(OffHirerw.ArtCode)==false) then begin
            t2 = blankval;
          end;
          if (t2!=0) then begin
            t2 = OffHirerw.ServiceQty;
            if (negf) then begin t2 = -t2; end;
            UpdateInternalInstock(OffHirerw.ArtCode,MainStockRec.DefServiceLoc,t2);
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure OffHireUpdateRentIN(var record OffHireVc OffHirep)
BEGIN
  record MainStockBlock MainStockRec;
  record RentINVc RentINr;
  record RentINVc oldRentINr;
  row OffHireVc OffHirerw;
  Integer i,rwcnt;
  string 10 location,loc2;
  
  BlockLoad(MainStockRec);
  location = OffHirep.Location;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  rwcnt = MatRowCnt(OffHirep);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OffHirep,i,OffHirerw);
    if (nonblank(OffHirerw.Location)) then begin
      loc2 = OffHirerw.Location;
    end else begin
      loc2 = location;
    end;
    if (nonblank(OffHirerw.SerialNr)) then begin
      RentINr.Code = OffHirerw.ArtCode;
      RentINr.SerialNr = OffHirerw.SerialNr;
      if (ReadFirstMain(RentINr,2,true)) then begin
        RecordCopy(OldRentINr,RentINr);
        RentINr.OrgLocation = loc2;
        if (RecordUpdate(OldRentINr,RentINr,false)==0) then begin
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure OffHireCreateCharges(record OffHireVc OffHirer)
begin
  record CUVc CUr;
  record INVc INr;
  record RentChrgVc RentChrgr;
  row OffHireVc OffHirerw;
  record RentResVc RentResr;
  record AgreementVc Agreementr;
  Integer i,rwcnt;
  val factor,s;
  Boolean testf;
  string 20 curitemno;
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,tax2prc;
  Boolean calcprice;
  Date bldat;
  Time blankt;
  Boolean dummyf;

  rwcnt = MatRowCnt(OffHirer);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OffHirer,i,OffHirerw);
    if (((OffHirerw.Status==1) or (OffHirerw.Status==2) or (OffHirerw.Status==6)) or ((OffHirerw.Status==7) and (OffHirerw.MissingQty>0))) then begin
      RecordNew(RentChrgr);
      RentChrgr.SerNr = -1;
      RentChrgr.FrDate = bldat;
      RentChrgr.ToDate = bldat;
      RentChrgr.TransDate = OffHirer.TransDate;
      RentChrgr.TransNr = OffHirer.SerNr;
      RentChrgr.AgreementNr = OffHirer.AgreementNr;
      RentChrgr.FileName = 5; // Chargeble Items
      RentChrgr.OrigItem = "";
      RentChrgr.OrigSerialNr = "";
      RentChrgr.Objects = "";
      RentChrgr.CustOrdNr = "";
      RentResr.SerNr = OffHirerw.RentResSerNo;
      if (ReadFirstMain(RentResr,1,true)) then begin
        RentChrgr.OrigItem = RentResr.Code;
        RentChrgr.OrigSerialNr = RentResr.SerialNr;
        RentChrgr.Objects = RentResr.Objects;
        RentChrgr.CustOrdNr = RentResr.CustOrdNr;
      end;
      Agreementr.SerNr = OffHirer.AgreementNr;
      if (ReadFirstMain(Agreementr,1,true)) then begin
      end;
      RentChrgr.Item = OffHirerw.ArtCode;
      RentChrgr.Spec = OffHirerw.Spec;
      RentChrgr.Quant = OffHirerw.Quant;
      RentChrgr.Site = OffHirer.Site;
      if (blank(RentChrgr.Site)) then begin
        RentChrgr.Site = Agreementr.Site;
      end;
      CUr.Code = OffHirer.CustCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
      end;
      INr.Code = OffHirerw.ArtCode;
      if (GetItemPriceDiscount3(INr.Code,RentChrgr.Quant,INr,Agreementr.CurncyCode,0,0,0,0,0,
            Agreementr.LangCode,Agreementr.CustCat,Agreementr.PriceList,Agreementr.RebCode,
            price,curitemname,reb,vatcode,cost,salesacc,
            Agreementr.ExportFlag,calcprice,CurrentDate,blankt,Agreementr.CustCode,true,dummyf,Agreementr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
        if (price==0) then begin price = BlankVal; end;
        if (reb==0) then begin reb = BlankVal; end;
        if (cost==0) then begin cost = BlankVal; end;
        RentChrgr.Price = price;
        RentChrgr.vRebate = reb;
      end;
      factor = BlankVal;
      CalcSum(RentChrgr.Quant,RentChrgr.Price,factor,RentChrgr.vRebate,s,0);
      RentChrgr.Sum = s;
      RentChrgr.InvNr = -1;
      RentChrgr.RowNr = -1;
      RentChrgr.CurncyCode = Agreementr.CurncyCode;
      testf = RecordInsert(RentChrgr,true);
    end;
  end;
  RETURN;
end;

updating procedure OffHireDisposeItems(record OffHireVc OffHirer)
begin
  record RentINVc RentINr;
  record RentINVc oldRentINr;
  row OffHireVc OffHirerw;
  Integer rwcnt,i;

  rwcnt = MatRowCnt(OffHirer);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OffHirer,i,OffHirerw);
    if (((OffHirerw.Status==1) or (OffHirerw.Status==2) or (OffHirerw.Status==6)) or ((OffHirerw.Status==7) and ((OffHirerw.MissingQty>0) or (OffHirerw.ScrapedQty>0)))) then begin
      if (nonblank(OffHirerw.SerialNr)) then begin
        RentINr.Code = OffHirerw.ArtCode;
        RentINr.SerialNr = OffHirerw.SerialNr;
        if (ReadFirstMain(RentINr,2,true)) then begin
          RecordCopy(oldRentINr,RentINr);
          RentINr.RentINStatus = 2;
          if (RecordUpdate(oldRentINr,RentINr,false)==0) then begin end;
        end;
      end;
    end;
  end;
  RETURN;
end;

updating procedure OffHireOK(record OffHireVc OffHirer,Boolean importf)
begin
  OffHireUpdateStock(OffHirer,false);
  OffHireUpdateIntINrs(OffHirer,importf,false);
  OffHireUpdateSVO(OffHirer);
  return;
end;

global
procedure SetRentResStatus(var record RentResVc RentResr,record RentControlBlock RCr)
begin
  if (RentResr.RentResDel==RentResr.RentResRet) then begin
    if (RentResr.RentResDel==RentResr.RentQuant) then begin
      RentResr.AgreeStatus = RCr.AgreeStatusReturned;
    end else begin
      RentResr.AgreeStatus = RCr.AgreeStatusCreated;
    end;
  end else begin
    RentResr.AgreeStatus = RCr.AgreeStatusDelivered;
  end;
  return;
end;

procedure SetRecepyOffRentResr(var record RentResVc RentResr,Date enddate)
begin
  record RentControlBlock RCr;
  row RentResVc RentResrw;
  Integer rwcnt,i;
  Boolean alldelf;
  
  BlockLoad(RCr);
  if (RentResr.RecepyItem!=0) then begin
    alldelf = true;
    rwcnt = MatRowCnt(RentResr);
    if (rwcnt==0) then begin alldelf = false; end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RentResr,i,RentResrw);
      if (RentResrw.Quant!=RentResrw.Ret) then begin alldelf = false; end;
    end;
    if (alldelf) then begin
      RentResr.RentResRet = RentResr.RentQuant;
//      RentResr.EndDate = enddate;
//      RentResr.AgreeStatus = RCr.AgreeStatusReturned;
    end;
  end;
  return;
end;

updating procedure UpdateOffHireRentRes(record OffHireVc OffHirer,Boolean negf)
begin
  record RentControlBlock RCr;
  row OffHireVc OffHirerw;
  record RentResVc RentResr;
  record RentResVc oldRentResr;
  row RentResVc RentResrw;
  Boolean changedf;
  Integer rwcnt,i;
  Integer res;
  val qty;
  
  BlockLoad(RCr);
  rwcnt = MatRowCnt(OffHirer);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OffHirer,i,OffHirerw);
    RentResr.SerNr = OffHirerw.RentResSerNo;
    if (ReadFirstMain(RentResr,1,true)) then begin
      RecordCopy(oldRentResr,RentResr);
      if (negf) then begin
        qty = -OffHirerw.Quant;
      end else begin
        qty = OffHirerw.Quant;
      end;
      if (OffHirerw.RentResRow==-1) then begin
        RentResr.RentResRet = RentResr.RentResRet + qty;
        SetRentResStatus(RentResr,RCr);
        if (blankdate(RentResr.EndDate)) then begin
          RentResr.EndDate = OffHirer.TransDate;
        end;
        if (qty>0) then begin
          if (RCr.EndDateFromOffHire<>0) then begin
            RentResr.EndDate = OffHirer.TransDate;
          end;
        end;
        if (RentResr.RentResRet==0) then begin
          RentResr.RentResRet = BlankVal;
        end;
        changedf = true;
      end else begin
        if (OffHirerw.RentResRow<MatRowCnt(RentResr)) then begin
          MatRowGet(RentResr,OffHirerw.RentResRow,RentResrw);
          RentResrw.Ret = RentResrw.Ret + qty;
          if (RentResrw.Ret==0) then begin
            RentResrw.Ret = BlankVal;
          end;
          MatRowPut(RentResr,OffHirerw.RentResRow,RentResrw);
          changedf = true;
        end;
      end;
      SetRecepyOffRentResr(RentResr,OffHirer.TransDate);
      if (changedf) then begin
        SetRentResDone(RentResr);
        res = RecordUpdate(oldRentResr,RentResr,false);
        if (RentResVcRecordUpdateAfter(RentResr,oldRentResr,0,0)==0) then begin end;
        if (OffHirerw.RentResRow==-1) then begin
          UpdateCustRentStat(RentResr.AgreementNr,OffHirerw.ArtCode,OffHirerw.SerialNr,-qty);
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure CreateInspection(string artcode,string serialnr,Date trdat,LongInt agreenr,LongInt rentresnr)
begin
  record QualConVc QualConr;
  record RentINVc RentINr;
  record RentITVc RTr;

  if ((agreenr>0) and (rentresnr>0)) then begin    
    RentINr.Code = artcode;
    RentINr.SerialNr = serialnr;
    if (ReadFirstMain(RentINr,2,true)) then begin
      RTr.Code = RentINr.Group;
      if (ReadFirstMain(RTr,1,true)) then begin
        if (RTr.CreateInspAfterf<>0) then begin
          RecordNew(QualConr);
          QualConr.ArtCode = artcode;
          QualConr.SerialNr = serialnr;
          QualConr.AnalyseDate = trdat;
          QualConr.AgreementNr = agreenr;
          QualConr.RentResSerNo = rentresnr;
          if (RecordInsert(QualConr,true)) then begin end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure OffHireInspection(record OffHireVc OffHirer)
begin
  row OffHireVc OffHirerw;
  Integer i,rwcnt;
  
  if (OffHirer.AgreementNr>0) then begin
    rwcnt = MatRowCnt(OffHirer);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OffHirer,i,OffHirerw);
      if (nonblank(OffHirerw.ArtCode)) then begin
        CreateInspection(OffHirerw.ArtCode,OffHirerw.SerialNr,OffHirer.TransDate,OffHirer.AgreementNr,OffHirerw.RentResSerNo);
      end;
    end;
  end;
  return;
end;

global
updating function LongInt OffHireVcRecordSaveAfter(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (OffHirer.OKFlag==1) then begin
    UpdateOffHireRentRes(OffHirer,false);
    OffHireInspection(OffHirer);
    OffHireOK(OffHirer,false);
    OffHireUpdateRentIN(OffHirer);
    OffHireCreateCharges(OffHirer);
    OffHireDisposeItems(OffHirer);
  end;
  OffHireVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt OffHireVcRecordUpdateAfter(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((OffHirer.OKFlag==1) and (OffHire2r.OKFlag!=1)) then begin
    UpdateOffHireRentRes(OffHirer,false);
    OffHireInspection(OffHirer);
    OffHireOK(OffHirer,false);
    OffHireUpdateRentIN(OffHirer);
    OffHireCreateCharges(OffHirer);
    OffHireDisposeItems(OffHirer);
  end;
  if ((OffHire2r.OKFlag!=0) and (OffHirer.OKFlag==0)) then begin//unok
//    OffHireUpdateStock(OffHirer,true);//not suported
//OffHireUpdateIntINrs
  end;
  OffHireVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt OffHireVcRecordRemove(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (OffHirer.OKFlag==1) then begin
    UpdateOffHireRentRes(OffHirer,true);
  end;
  OffHireVcRecordRemove = res;
  RETURN;
END;

global
function LongInt OffHireVcRecordRemoveTest(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = 1;
  if (OffHirer.OKFlag==1) or (OffHirer.OKFlag==2) then begin
    res = 0;
  end;
  OffHireVcRecordRemoveTest = res;  
  return;
end;

global
function LongInt OffHireVcRecordImport(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (OffHirer.OKFlag==1) then begin
    if (OffHirer.OKCheck!=1) then begin
      OffHirer.OKCheck = 1;
    end;
  end;
  OffHireVcRecordImport = res; 
  return;
end;

global
updating function LongInt OffHireVcRecordImportAfter(var record OffHireVc OffHirer,record OffHireVc OffHire2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
    
  if (OffHirer.OKFlag==1) then begin
    OffHireOK(OffHirer,true);
  end;
  OffHireVcRecordImportAfter = res; 
  RETURN;
END;

