external updating procedure InvalidateTR(Integer,LongInt);
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external updating procedure AddTTrans_AT2WrofVc(record TRVc,record AT2WrofVc);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external updating procedure UpdateWrofTransRec(record AT2WrofVc,record TrVc);
external function Boolean GetLastOfficialDprStartVal(Integer,string,val,var val,var val);
external function Boolean GetLastDprStartVal(Integer,string,val,var val,var val);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external function Boolean DateWarned(Date,string);
external procedure B1ToB2Val(val,val,val,var val);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Boolean IsUnOKAllowed(string,Date);
external updating procedure AT2WrofInvalidate(record AT2WrofVc);
external updating procedure AT2WrofOK(record AT2WrofVc);
external updating procedure AT2WrofUnOK(record AT2WrofVc);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean TransInFiscal(Date);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean CheckifAT2UnitSold(string,Date);
external function Boolean SerNrTestAT2WrofVc(LongInt,Date,var Boolean);

function
Integer AddWrofTransRow(record TRVc gTRp,string inventorynr,string salesacc,Date wrofdp,Integer writeoff,val salesvalp,val dprvalp,string objects,val qty,record AT2AccBlock AT2Ab,val baserate1p,val baserate2p,record AC2Block ACRec,val TotSump,var string gotofield)
BEGIN
  Integer res;
  record AccVc Accr;
  record AT2UnitVc ATUnitr;
  record AT2Vc ATr;
  record InvBalVc InvBalr;
  row AC2Block ACrw;
  Integer i,acrwcnt;
  val dprv,tdprv,bookval,t;
  string 255 tstr;
  string 10 assetacc,depracc,taccnumber;
  string 60 assetobjstr,deprobjstr,objstr,AT2Class;
  Boolean accf;
  
  gotofield = "InventoryNr";
  Accr.AccNumber = salesacc;
  if (ReadFirstMain(Accr,1,true)) then begin
    if (Accr.NVC==0) then begin
      accf = true;
    end;
  end;
  ATUnitr.InventoryNr = inventorynr;
  if (ReadFirstMain(ATUnitr,1,true)==false) then begin
    res = 1932;
    goto LAddWrofTransRow;
  end;
  ATr.Code = ATUnitr.AT2Code;
  if (ReadFirstMain(ATr,1,true)==false) then begin
    res = 1929;
    goto LAddWrofTransRow;
  end;
  AT2Class = ATUnitr.AT2Class;
  if (blank(AT2Class)) then begin
    AT2Class = ATr.AT2Class;
  end;
  assetobjstr = objects;
  deprobjstr = objects;
  objstr = objects;
  acrwcnt = MatRowCnt(ACRec);  
  for (i=0;i<acrwcnt;i=i+1) begin
    MatRowGet(ACRec,i,ACrw);
    if (ACrw.Code==AT2Class) then begin
      goto L22AddWrofTransRow;
    end;
  end;
  res = 1930;
  goto LAddWrofTransRow;
L22AddWrofTransRow:;
  switch (AT2Ab.Model) begin
     case 0: 
       assetacc = ACrw.Asset1Acc;
       depracc = ACrw.Depr1Acc;
       if ((nonblank(assetobjstr)) and (nonblank(ACrw.Asset1Objects))) then begin
         assetobjstr = assetobjstr & ",";
       end;
       assetobjstr = assetobjstr & ACrw.Asset1Objects;
       if ((nonblank(assetobjstr)) and (nonblank(ACrw.Objects))) then begin
         assetobjstr = assetobjstr & ",";
       end;
       assetobjstr = assetobjstr & ACrw.Objects;

       if ((nonblank(deprobjstr)) and (nonblank(ACrw.Depr1Objects))) then begin
         deprobjstr = deprobjstr & ",";
       end;
       deprobjstr = deprobjstr & ACrw.Depr1Objects;
       if ((nonblank(deprobjstr)) and (nonblank(ACrw.Objects))) then begin
         deprobjstr = deprobjstr & ",";
       end;
       deprobjstr = deprobjstr & ACrw.Objects;
     case 1: 
       assetacc = ACrw.Asset2Acc;
       depracc = ACrw.Depr2Acc;
       if ((nonblank(assetobjstr)) and (nonblank(ACrw.Asset2Objects))) then begin
         assetobjstr = assetobjstr & ",";
       end;
       assetobjstr = assetobjstr & ACrw.Asset2Objects;
       if ((nonblank(assetobjstr)) and (nonblank(ACrw.Objects))) then begin
         assetobjstr = assetobjstr & ",";
       end;
       assetobjstr = assetobjstr & ACrw.Objects;

       if ((nonblank(deprobjstr)) and (nonblank(ACrw.Depr2Objects))) then begin
         deprobjstr = deprobjstr & ",";
       end;
       deprobjstr = deprobjstr & ACrw.Depr2Objects;
       if ((nonblank(deprobjstr)) and (nonblank(ACrw.Objects))) then begin
         deprobjstr = deprobjstr & ",";
       end;
       deprobjstr = deprobjstr & ACrw.Objects;
  end;     
  if ((nonblank(objstr)) and (nonblank(ACrw.Objects))) then begin
    objstr = objstr & ",";
  end;
  objstr = objstr & ACrw.Objects;

  InvBalr.InventoryNr = inventorynr;
  if (ReadFirstMain(InvBalr,1,true)==false) then begin
    res = 1930;
    goto LAddWrofTransRow;
  end;  
  if (GetAccName(salesacc,tstr,60)==false) then begin
    switch (writeoff) begin
      case 0: res = 1931; 
      case 1: res = 1947; 
    end;
    gotofield = "Account";
    goto LAddWrofTransRow;
  end;    
  bookval = qty*ATUnitr.PurchVal;
    if (GetLastDprStartVal(0,ATUnitr.InventoryNr,ATUnitr.PurchVal,bookval,t)) then begin end;
  bookval = qty*bookval;
/*
  if (AT2Ab.Model==1) then begin
    if (GetLastDprStartVal(0,ATUnitr.InventoryNr,ATUnitr.PurchVal,bookval,t)) then begin end;
  end;
  if (AT2Ab.Model==2) then begin
    if (GetLastOfficialDprStartVal(0,ATUnitr.InventoryNr,ATUnitr.PurchVal,bookval,t)) then begin end;
  end;
*/  

  switch (AT2Ab.PostWrofTrans) begin
    case 1:
      if (blank(dprvalp)) then begin
        tdprv = dprvalp;
      end else begin
        tdprv = dprvalp;
      end;

      if (GetAccName(depracc,tstr,60)==false) then begin
        res = 1926;
        goto LAddWrofTransRow;
      end;   
      if (CheckTTRPerRow("AT2WrofVc",depracc,deprobjstr,true,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,depracc,deprobjstr,"",tstr,tdprv,baserate1p,baserate2p,false,true,TotSump,false,taccnumber,"","");

      if (GetAccName(assetacc,tstr,60)==false) then begin
        res = 1925;
        goto LAddWrofTransRow;
      end;   
      if (CheckTTRPerRow("AT2WrofVc",assetacc,assetobjstr,false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,assetacc,assetobjstr,"",tstr,tdprv,baserate1p,baserate2p,false,false,TotSump,false,taccnumber,"","");

      if (GetAccName(salesacc,tstr,60)==false) then begin
        res = 1925;
        goto LAddWrofTransRow;
      end;   
      if (CheckTTRPerRow("AT2WrofVc",salesacc,objstr,true,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,salesacc,objstr,"",tstr,bookval-tdprv,baserate1p,baserate2p,true,true,TotSump,false,taccnumber,"","");
      if (GetAccName(assetacc,tstr,60)==false) then begin
        res = 1925;
        goto LAddWrofTransRow;
      end;   
      if (CheckTTRPerRow("AT2WrofVc",assetacc,assetobjstr,false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,assetacc,assetobjstr,"",tstr,bookval-tdprv,baserate1p,baserate2p,false,false,TotSump,false,taccnumber,"","");
    case 2:
      if (CheckTTRPerRow("AT2WrofVc",salesacc,objstr,true,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,salesacc,objstr,"",tstr,bookval,baserate1p,baserate2p,true,true,TotSump,false,taccnumber,"","");
      if (GetAccName(assetacc,tstr,60)==false) then begin
        res = 1925;
        goto LAddWrofTransRow;
      end;   
      if (CheckTTRPerRow("AT2WrofVc",assetacc,assetobjstr,false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,assetacc,assetobjstr,"",tstr,bookval,baserate1p,baserate2p,true,false,TotSump,false,taccnumber,"","");
      if (dprvalp==blankval) then begin
        tdprv = dprvalp;
      end else begin
        tdprv = dprvalp;
      end;
      if (GetAccName(depracc,tstr,60)==false) then begin
        res = 1926;
        goto LAddWrofTransRow;
      end;    
      if (CheckTTRPerRow("AT2WrofVc",depracc,deprobjstr,true,taccnumber,0)) then begin end;      

      AddEuroTrRow(gTRp,depracc,deprobjstr,"",tstr,bookval,baserate1p,baserate2p,true,true,TotSump,false,taccnumber,"","");
      AddEuroTrRow(gTRp,depracc,deprobjstr,"",tstr,bookval-tdprv,baserate1p,baserate2p,true,false,TotSump,false,taccnumber,"","");

      if (GetAccName(salesacc,tstr,60)==false) then begin
        res = 1925;
        goto LAddWrofTransRow;
      end;    
      if (CheckTTRPerRow("AT2WrofVc",salesacc,objstr,false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,salesacc,objstr,"",tstr,tdprv,baserate1p,baserate2p,false,false,TotSump,false,taccnumber,"","");
    
    otherwise
      if (CheckTTRPerRow("AT2WrofVc",salesacc,objstr,true,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,salesacc,objstr,"",tstr,bookval,baserate1p,baserate2p,true,true,TotSump,false,taccnumber,"","");
      if (GetAccName(assetacc,tstr,60)==false) then begin
        res = 1925;
        goto LAddWrofTransRow;
      end;   
      if (CheckTTRPerRow("AT2WrofVc",assetacc,assetobjstr,false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,assetacc,assetobjstr,"",tstr,bookval,baserate1p,baserate2p,true,false,TotSump,false,taccnumber,"","");
      if (dprvalp==blankval) then begin
        tdprv = dprvalp;
      end else begin
        tdprv = dprvalp;
      end;
      if (GetAccName(depracc,tstr,60)==false) then begin
        res = 1926;
        goto LAddWrofTransRow;
      end;    
      if (CheckTTRPerRow("AT2WrofVc",depracc,deprobjstr,true,taccnumber,0)) then begin end;      

      AddEuroTrRow(gTRp,depracc,deprobjstr,"",tstr,bookval,baserate1p,baserate2p,false,true,TotSump,false,taccnumber,"","");
      AddEuroTrRow(gTRp,depracc,deprobjstr,"",tstr,bookval-tdprv,baserate1p,baserate2p,false,false,TotSump,false,taccnumber,"","");

    //  AddEuroTrRow(gTRp,depracc,deprobjstr,"",tstr,tdprv,baserate1p,baserate2p,false,true,TotSump,false,taccnumber,"","");
      if (GetAccName(salesacc,tstr,60)==false) then begin
        res = 1925;
        goto LAddWrofTransRow;
      end;    
      if (CheckTTRPerRow("AT2WrofVc",salesacc,objstr,false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,salesacc,objstr,"",tstr,tdprv,baserate1p,baserate2p,accf,false,TotSump,false,taccnumber,"","");
  end;

  if ((writeoff==0) and (nonblank(AT2Ab.SalesTransitAcc))) then begin
    if (salesvalp!=blankval) then begin
      if (GetAccName(AT2Ab.SalesTransitAcc,tstr,60)==false) then begin
        res = 1948;
        goto LAddWrofTransRow;
      end;    
      if (CheckTTRPerRow("AT2WrofVc",AT2Ab.SalesTransitAcc,"",false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,AT2Ab.SalesTransitAcc,"","",tstr,salesvalp,baserate1p,baserate2p,false,true,TotSump,false,taccnumber,"","");
      if (GetAccName(salesacc,tstr,60)==false) then begin
        res = 1931;
        goto LAddWrofTransRow;
      end;    
      if (CheckTTRPerRow("AT2WrofVc",salesacc,objstr,false,taccnumber,0)) then begin end;      
      AddEuroTrRow(gTRp,salesacc,objstr,"",tstr,salesvalp,baserate1p,baserate2p,false,false,TotSump,false,taccnumber,"","");
    end;
  end;
LAddWrofTransRow:;
  AddWrofTransRow = res;
  RETURN;
END;

global
function Integer MakeTransFromWrof(record TRVc gTRp,record AT2WrofVc ATWrofp,Boolean rpt,var string gotofield,var Integer gotorow)
BEGIN
  record AT2AccBlock AT2Ab; 
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec; 
  record AC2Block ACRec; 
  row AT2WrofVc ATWrofrw;
  record TRVc locTRr;
  Integer res;
  Integer i,rwcnt;
  val TotSum,t;
  string 255 tstr,curncy;
  val temp,baserate1,baserate2;
  string 10 account;
  
  gotofield = "SerNr";
  gotorow = -1;
  BlockLoad(ACRec);  
  BlockLoad(TRGenRec);
  BlockLoad(ARAccRec);
  BlockLoad(AT2Ab);
  RecordNew(gTRp);
  if (rpt==false) then begin
   if (TRGenRec.AT2WrofGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromWrof;    
    end;
  end;
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.AT2WrofStartDate)) and
        (ATWrofp.TransDate<TRGenRec.AT2WrofStartDate)) then begin
      res = 0;
      goto LMakeTransFromWrof;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = AT2WrofYc;
    gTRp.Number = ATWrofp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    locTRr.Number = gTRp.Number;
    locTRr.IntYc = gTRp.IntYc;
    if (ReadFirstMain(locTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromWrof;
    end;
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = ATWrofp.TransDate;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      res = 1075;
      goto LMakeTransFromWrof;
    end;
  end;
  curncy = "";
  GetFullCurncyRate(curncy,gTRp.TransDate,temp,temp,temp,baserate1,baserate2);
  gTRp.Comment = ATWrofp.Comment;
  gTRp.RefStr = ATWrofp.RefStr;
  rwcnt = MatRowCnt(ATWrofp);  
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(ATWrofp,i,ATWrofrw);    
    account = ATWrofrw.Account;
    if (blank(account)) then begin
      account = ATWrofp.Account;
    end;
    res = AddWrofTransRow(gTRp,ATWrofrw.InventoryNr,account,ATWrofp.TransDate,ATWrofp.Writeoff,ATWrofrw.SalesVal,ATWrofrw.DprVal,ATWrofrw.Objects,ATWrofrw.Qty,AT2Ab,baserate1,baserate2,ACRec,TotSum,gotofield);
    if (res!=0) then begin
      gotorow = i;
      goto LMakeTransFromWrof;
    end;
  end;      
  if (TotSum!=0) then begin
    res = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",true,false,false,TotSum,TotSum);
    if (res!=0) then begin
      goto LMakeTransFromWrof;
    end;
  end;  
LMakeTransFromWrof:;  
  MakeTransFromWrof = res;
  RETURN;
END;

procedure FindAT2InitDeprVal(string InventoryNr,Integer model,var val resp)
BEGIN
  record AT2UnitVc ATUnitr;
  
  resp = blankval;
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
    if (model==0) then begin
      resp = ATUnitr.InitDeprVal1;
    end else begin
      resp = ATUnitr.InitDeprVal2;
    end;
  end;
  RETURN;
END;

procedure GetAT2UnitStartingDate(string InventoryNr,Integer Model2,var date resp,var val startvp,var val resval,var Integer dprperiod)
BEGIN
  record AT2UnitVc ATUnitr;
  Date blankd;
  record DprModVc DprModr;
  string 50 dprmod;
      
  resp = blankd;
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
     switch (Model2) begin
       case 0: resp = ATUnitr.StartingDate1; dprmod = ATUnitr.Model1;
       case 1: resp = ATUnitr.StartingDate2; dprmod = ATUnitr.Model2;
     end;  
  end;    
  DprModr.Code = dprmod;
  if (ReadFirstMain(DprModr,1,true)) then begin
    dprperiod = DprModr.DeprPeriod;
  end;
  startvp = ATUnitr.PurchVal;
  resval = ATUnitr.ResVal + ATUnitr.LandVal;
  RETURN;
END;

procedure AT2WrofDprVal(record AT2WrofVc ATWrofp)
BEGIN
  Integer i,rwcnt;
  row AT2WrofVc ATWrofrw;
  val dprv,tdprv,startv;
  date sd,ed;
  record AT2AccBlock AT2Ab;
  val t,resval; 
  string 255 tstr;
  Integer dprperiod,LastOfficialRev;
 
  BlockLoad(AT2Ab);  
  rwcnt = MatRowCnt(ATWrofp);  
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(ATWrofp,i,ATWrofrw);      
    GetAT2UnitStartingDate(ATWrofrw.InventoryNr,AT2Ab.Model,sd,startv,resval,dprperiod);
    ed = ATWrofp.TransDate;    
    if (AT2Ab.LastMonthDispDprCalc!=0) then begin
      switch (dprperiod) begin
        case 0: ed = AddMonth(ed,-1);
        case 1:;
        case 2: 
          ed = AddYear(ed,-1);
          ed.month = 12;
          ed.day = 31;
      end;
    end else begin
      switch (dprperiod) begin
        case 0: ed = AddDay(ed,-GetDay(ed) + DaysInMonth(GetYear(ed),GetMonth(ed)));
        case 1:;
        case 2: 
          ed.month = 12;
          ed.day = 31;
      end;
    end;
    LastOfficialRev = 0;
    if (HasLocalization("PRT")) then begin LastOfficialRev = 1; end;
    OneAT2UnitDeprCalculation(dprperiod,LastOfficialRev,0,false,sd,ed,ATWrofrw.InventoryNr,dprv,tdprv,t,t,tstr,t,resval,true);    //AT2Ab.Model
    ATWrofrw.DprVal = tdprv + dprv;    
    ATWrofrw.DprVal = ATWrofrw.DprVal * ATWrofrw.Qty;
    MatRowPut(ATWrofp,i,ATWrofrw);
  end;
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordCheck(record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt stat,LongInt check)
BEGIN
  LongInt res;
  Integer i,rwcnt,errstr,gotorow;
  row AT2WrofVc ATWrofrw;
  record AT2UnitVc ATUnitr;
  record AT2WrofVc locAT2Wrofr;
  Boolean testf,gentrans,transf,unokf,invalidatingf;
  Integer insertmode,updatemode;
  Date blankd;
  record TRVc gTRp;
  record InvBalVc InvBalr;
  string 255 tstr,gotofield;
  record AT2AccBlock AT2Ab;
  
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (AT2Wrofr.OKFlag==0) then begin//unok
    if (stat==updatemode) then begin
      if (AT2Wrof2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (stat==updatemode) then begin
    if ((AT2Wrofr.Invalid!=0) and (AT2Wrof2r.Invalid==0)) then begin 
      invalidatingf = true;
    end;
  end;
  BlockLoad(AT2Ab);  
  if (unokf) then begin
    if (IsUnOKAllowed("AT2WrofVc",AT2Wrofr.TransDate)==false) then begin
      RecordCheckError(1046,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LAT2WrofVcRecordCheck;
  end;
  if (stat==updatemode) then begin
    if (AT2Wrofr.SerNr<=0) and (AT2Wrof2r.OKFlag==0) then begin
      AT2Wrofr.SerNr = AT2Wrof2r.SerNr;
    end;
  end;  
  testf = true;
  if ((AT2Wrof2r.OKFlag==0) and (AT2Wrofr.OKFlag==0)) then begin testf = false; end;
  if (AT2Wrofr.SerNr<=0) then begin
    AT2Wrofr.SerNr = NextSerNr("AT2WrofVc",AT2Wrofr.TransDate,-1,false,"");
  end;
  if ((stat==insertmode) or (AT2Wrofr.SerNr!=AT2Wrof2r.SerNr)) then begin
    locAT2Wrofr.SerNr = AT2Wrofr.SerNr;
    if (ReadFirstMain(locAT2Wrofr,1,true)) then begin
      RecordCheckError(1115,"",-1,"SerNr");      
      res = -1;
      goto LAT2WrofVcRecordCheck;
    end;  
  end;
  if (SerNrTestAT2WrofVc(AT2Wrofr.SerNr,AT2Wrofr.TransDate,gentrans)==false) then begin
    if (check>0) then begin
      RecordCheckError(1557,"",-1,"SerNr");      
      res = -1;
      goto LAT2WrofVcRecordCheck;
    end;    
  end; 
  if (check==0) then begin
    goto LAT2WrofVcRecordCheck_GenTrans;
  end;   
  rwcnt = MatRowCnt(AT2Wrofr);  
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(AT2Wrofr,i,ATWrofrw);
    if (blank(ATWrofrw.InventoryNr)) then begin
      RecordCheckError(1058,"",i,"InventoryNr");      
      res = -1;
      goto LAT2WrofVcRecordCheck;
    end;
    ATUnitr.InventoryNr = ATWrofrw.InventoryNr;
    if (ReadFirstMain(ATUnitr,1,true)==false) then begin
      RecordCheckError(1290,"",i,"InventoryNr");      
      res = -1;
      goto LAT2WrofVcRecordCheck;
    end;

    switch (AT2Ab.Model) begin
      case 0: 
        if (blankdate(ATUnitr.StartingDate1)) then begin
          RecordCheckError(2039,"",i,"StartingDate1");      
          res = -1;
          goto LAT2WrofVcRecordCheck;
        end;
      case 1:
        if (blankdate(ATUnitr.StartingDate2)) then begin
          RecordCheckError(2039,"",i,"StartingDate2");      
          res = -1;
          goto LAT2WrofVcRecordCheck;
        end;      
    end;  
    if (invalidatingf==false) then begin
      InvBalr.InventoryNr = ATWrofrw.InventoryNr;
      if (ReadFirstMain(InvBalr,1,true)==false) then begin end;
      if (ATWrofrw.Qty>InvBalr.CurQuant) then begin
        RecordCheckError(1733,"",i,"Qty");      
        res = -1;
        goto LAT2WrofVcRecordCheck;
      end;
    end;
    if (testf) and (check>0) then begin      
      if (CheckifAT2UnitSold(ATWrofrw.InventoryNr,blankd)) then begin
        RecordCheckError(1932,"",i,"InventoryNr");      
        res = -1;
        goto LAT2WrofVcRecordCheck;
      end;
    end;
  end;  
  if (DateWarned(AT2Wrofr.TransDate,"AT2WrofVc")) then begin
    MessageBox(1045,"");
  end;  
  if (check>0) then begin AT2WrofDprVal(AT2Wrofr); end;
  transf = false;  
  if (AT2Wrofr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (AT2Wrof2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
LAT2WrofVcRecordCheck_GenTrans:;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    if (UserCanAction("AT2WrofOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"AT2WrofOK"),-1,"SerNr");      
      res = -1;
      goto LAT2WrofVcRecordCheck;
    end;
  end;  
  if (transf) then begin
    errstr = MakeTransFromWrof(gTRp,AT2Wrofr,false,gotofield,gotorow);
  end;
  if (errstr>0) then begin
    RecordCheckError(errstr,"",gotorow,gotofield);      
    res = -1;
    goto LAT2WrofVcRecordCheck;
  end else begin
    if ((gTRp.Number>0) and (gTRp.IntYc==AT2WrofYc)) then begin
      tstr = CheckTrans(gTRp,2,true);
      if (nonblank(tstr)) then begin
        RecordCheckError(1085,tstr,-1,"SerNr");      
        res = -1;
        goto LAT2WrofVcRecordCheck;
      end;
      SaveTrans(gTRp);
      UpdateWrofTransRec(AT2Wrofr,gTrp);
    end;
  end; 
LAT2WrofVcRecordCheck:;  
  AT2WrofVcRecordCheck = res;
  RETURN;
END;

global
function LongInt AT2WrofVcRecordDefaults(var record AT2WrofVc ATWrofr,record AT2WrofVc AT2Wrof2r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;
  
  res = 0;
  ATWrofr.SerNr = -1;
  ATWrofr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    ATWrofr.SerNr = NextSerNr("AT2WrofVc",ATWrofr.TransDate,-1,false,"");
  end;
  AT2WrofVcRecordDefaults = res;
  RETURN;
END;

procedure SetATWrofFlags(record AT2WrofVc ATWrofp,record AT2WrofVc ATWrof2p,Boolean updatef)
BEGIN
  Integer wroff;
  
  if (updatef==false) then begin 
    wroff = 0;
  end else begin
   if ((ATWrof2p.OKFlag==0) and (ATWrofp.OKFlag!=0)) then begin
     if (ATWrofp.Writeoff==0) then begin
       wroff = 1;
     end else begin
       wroff = 2;
     end;
   end;
  end;
  switch (wroff) begin
    case 0: ATWrofp.WriteoffMark = 0;
    case 1: ATWrofp.WriteoffMark = 45;
    case 2: ATWrofp.WriteoffMark = 18;//checkMarkChar
  end;
  RETURN;
END;

global
function LongInt AT2WrofVcRecordDuplicate(var record AT2WrofVc ATWrofr,record AT2WrofVc AT2Wrof2r,LongInt long1,LongInt long2)
BEGIN
  LongInt res;

  res = 0;
  ATWrofr.SerNr = -1;
//  ATWrofr.TransDate = CurrentDate;
  ATWrofr.OKFlag = 0;
  ATWrofr.Invalid = 0;
  if (SingleUserMode) then begin
    ATWrofr.SerNr = NextSerNr("AT2WrofVc",ATWrofr.TransDate,-1,false,"");
  end;
  SetATWrofFlags(ATWrofr,AT2Wrof2r,false);
  AT2WrofVcRecordDuplicate = res;      
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordSave(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetATWrofFlags(AT2Wrofr,AT2Wrof2r,false);
  AT2WrofVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordSaveAfter(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (AT2Wrofr.OKFlag!=0) then begin  
    AT2WrofOK(AT2Wrofr);    
  end;      
  AT2WrofVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordImportAfter(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (AT2Wrofr.OKFlag!=0) then begin  
    AT2WrofOK(AT2Wrofr);    
  end;      
  AT2WrofVcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordUpdate(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetATWrofFlags(AT2Wrofr,AT2Wrof2r,true);
  if ((AT2Wrofr.OKFlag==0) and (AT2Wrof2r.OKFlag==1)) then begin//unok
    DeleteTransaction(AT2Wrofr.SerNr,AT2WrofYc);
  end;

  if ((AT2Wrof2r.Invalid==0) and (AT2Wrofr.Invalid!=0)) then begin
    if (AT2Wrof2r.OKFlag!=0) then begin
      AT2WrofInvalidate(AT2Wrofr);
      InvalidateTR(AT2WrofYc,AT2Wrofr.SerNr);
    end;
  end;
  AT2WrofVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordUpdateAfter(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((AT2Wrofr.OKFlag!=0) and (AT2Wrof2r.OKFlag==0)) then begin
    AT2WrofOK(AT2Wrofr);    
  end;      
  if ((AT2Wrofr.OKFlag==0) and (AT2Wrof2r.OKFlag==1)) then begin//unok
    AT2WrofUnOK(AT2Wrofr);    
    StoreUnOKHistory("AT2WrofVc",AT2Wrofr.SerNr,CurrentDate,CurrentTime,CurrentUser);
  end;
  if ((AT2Wrof2r.Invalid==0) and (AT2Wrofr.Invalid!=0)) then begin
    if (AT2Wrof2r.OKFlag!=0) then begin
      AT2WrofUnOK(AT2Wrofr);    
    end;
  end;  
  AT2WrofVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt AT2WrofVcRecordRemoveTest(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;

  res = 1;
  BlockLoad(DBLockRec);
  if (AT2Wrofr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    if ((blankdate(DBLockRec.OtherLock)) or (AT2Wrofr.TransDate>DBLockRec.OtherLock)) then begin
      res = 1;
      goto LAT2WrofVcRecordRemoveTest;
    end;
  end;
  if (AT2Wrofr.OKFlag!=0) then begin
    if (long3>0) then begin
      MessageBox(1544,"");
    end;
    res = 0;
  end;    
LAT2WrofVcRecordRemoveTest:;
  AT2WrofVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordRemove(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  
  AT2WrofInvalidate(AT2Wrofr);      
  AT2WrofVcRecordRemove = res; 
  RETURN;
END;

procedure AT2WrofVcConvertB1ToB2(record AT2WrofVc AT2Wrofp)
BEGIN
  val fr,to1,to2,br1,br2,t;
  string 5 crncycode;
  Integer i,rwcnt;
  row AT2WrofVc AT2Wrofrw;

  GetFullCurncyRate(crncycode,AT2Wrofp.TransDate,fr,to1,to2,br1,br2);
  rwcnt = MatRowCnt(AT2Wrofp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AT2Wrofp,i,AT2Wrofrw);
    B1ToB2Val(AT2Wrofrw.SalesVal,br1,br2,t);
    AT2Wrofrw.SalesVal = t;
    B1ToB2Val(AT2Wrofrw.DprVal,br1,br2,t);
    AT2Wrofrw.DprVal = t;
    MatRowPut(AT2Wrofp,i,AT2Wrofrw);
  end;
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordImport(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;  
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;      
  if (gBase1ToBase2) then begin
    AT2WrofVcConvertB1ToB2(AT2Wrofr);
  end;
  AT2WrofVcRecordImport = res; 
  RETURN;
END;

global
updating function LongInt AT2WrofVcRecordInvalidateTest(var record AT2WrofVc AT2Wrofr,record AT2WrofVc AT2Wrof2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 0;
  if (UserCanAction("AT2WrofInvalid",true)) then begin
    if (AT2Wrofr.Invalid==0) and (AT2Wrofr.OKFlag!=0) then begin
      if (true) then begin
        AT2Wrofr.Invalid = 1;
        res = 1;
      end;
    end;
  end;
LAT2WrofVcRecordInvalidateTest:;
  if (res==0 and AT2Wrofr.Invalid==0) then begin
    MessageBox(34500,"");
  end;
  AT2WrofVcRecordInvalidateTest = res;  
  RETURN;
END;
