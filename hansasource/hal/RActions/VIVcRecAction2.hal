external procedure AutomatedSales(string,Integer);
external function string 60 AddStringToStringList(string,string);
external updating function LongInt UpdatePPOKNr(LongInt);
external updating procedure DeletePlannedPayment(string,LongInt,LongInt);
external updating procedure InvalidatePlannedPayment(string,LongInt);
external updating procedure VICreatePlannedPayment(record VIVc);
external function LongInt GetCurUserLastNr(string);
external updating procedure SetKPIsStatus(string,Integer);
external updating procedure DeleteSimulation(LongInt,string);
external updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer,Integer,string,string,string,val,val,string,string,string,string);
external function Boolean AcceptanceActivityExists(Integer,string,string,string);
external updating procedure CancelApprovalRequestActivities(Integer,string,string,string);
external updating procedure VIrsPrelBookingStats(record VIVc,Boolean);
external procedure NextM4Number(string,var string);
external function val FindVAT(string,val,Integer,Integer);
external function Boolean AcceptanceRulesExists(Integer,string);
external procedure TaxMatrixConvertB1ToB2(record TaxMatrixVc,var val,var val,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure WarnFutureDate(Boolean,Date);
external updating procedure UpdateBatchTextFromVI(record VIVc,Integer);
external updating procedure DeleteAPInstall(record VIVc);
external updating procedure UpdateLiqInfoFromVI(LongInt,val,string,LongInt);
external updating procedure DeleteLiqInfoFromOrg(LongInt,Integer);
external updating procedure UpdateVarianceStatusVI(record VIVc,Boolean);
external function Boolean AccInRange(string,string);
//external updating procedure GenerateAcceptRec(string,LongInt,string,string,val);
external updating procedure UpdatePOFromVIRows(record VIVc,Boolean,record VIVc,Boolean,Boolean);
external procedure VIOpenPrepExists(string);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external procedure VISumup(record VIVc,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external updating procedure DeleteVIUpdatePR(record VIVc);
external updating procedure DeleteTransaction(LongInt,Integer);
external updating procedure DeleteActFromSubSys_VIVc(record VIVc);
external updating procedure InvalidateVI(record VIVc,record VIVc,Boolean);
external updating function Boolean UpdatePOFromVI(record VIVc,record VIVc,Boolean,Boolean,Boolean);
external updating procedure InvalidateTR(Integer,LongInt);
external updating procedure MakeActFromSubSys_VIVc(var record VIVc,Boolean,var record ActVc);
external updating function Boolean VendStats(record VIVc,Boolean);
external updating procedure VIUpdatePOCO(record VIVc,record VIVc,Boolean,Boolean);
external updating procedure VIUpdatePR(record VIVc,record VIVc,Boolean);
external updating procedure OPPUpdateVI(record VIVc,Boolean);
external updating procedure APAdd1(record VIVc,Boolean,Boolean);
external updating function Boolean APAdd2(LongInt,string,Date,val,val,val,string,string,LongInt,val,val,val,val,val,Boolean,Boolean,Boolean,string,Integer,Boolean);
external procedure VICalcEReb(var record VIVc);
external function Boolean PastePayRecVI(record VIVc,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetSalesGroup(string,var string);
external function Boolean UserCanInvalidateVI();
external function Boolean DateLocked(Date,string);
external function Boolean DateWarned(Date,string);
external updating procedure SaveERecordStatus_WithRow(string,string,LongInt,string,string,Integer,string,string,string,LongInt,Integer,string,string);
external function string 100 CreateCompID();

procedure VILastTransDate(LongInt vinr,var date tdp)
BEGIN
  record OPrsVc mainr;
  Date blankd;
  
  tdp = blankd;
  mainr.VINr = vinr;
  if (ReadLastKey("VIKey",mainr,1,true)) then begin
    tdp = mainr.TransDate;
  end;  
  RETURN;
END;

global
function Boolean CLOutforVIExists(LongInt vinr,string filename,var LongInt cloutser)
BEGIN
  Boolean res;
  record CLOutVIVc CLOutVIr;
  
  CLOutVIr.SerNr = vinr;
  CLOutVIr.FileName = filename;
  res = ReadFirstKey("FileName",CLOutVIr,2,true);
  cloutser = CLOutVIr.CLOutNr;
  CLOutforVIExists = res;
  RETURN;
END;

updating procedure UpdateVEIV(record VIVc VIr)
begin
  record VEIVVc VEIVr;
  record VEIVVc oldVEIVr;
  
  VEIVr.VISerNr = VIr.SerNr;
  if (ReadFirstKey("VISerNr",VEIVr,1,true)) then begin
    RecordCopy(oldVEIVr,VEIVr);
    VEIVr.VISerNr = -1;
    RecordUpdate(oldVEIVr,VEIVr,false);
    UpdateBrowses("VEIVVc");
  end;
  return;
end;

global
updating function LongInt VIVcRecordRemove(var record VIVc VIr,record VIVc VI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  VIUpdatePOCO(VI2r,VIr,false,true);
  if (VIr.POSerNr!=-1) then begin
    if (UpdatePOFromVI(VI2r,VIr,false,true,false)) then begin end;
  end else begin
    UpdatePOFromVIRows(VI2r,false,VIr,true,false)
  end;  
  UpdateVEIV(VIr);
  VIVcRecordRemove = res;
  RETURN;
END;

global
function LongInt VIVcRecordRemoveTest(var record VIVc VIr,record VIVc VI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record VIVc lVIr;
  record APVc APr;
  Date lasttrdate;
  record DBLockBlock DBLockRec;
  record MainCLBlock MainCLRec;
  LongInt clout;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;

  res = 1;
  BlockLoad(MainCLRec);
  if ((VIr.OKFlag!=0) or (VIr.PrelBook!=0)) then begin
    BlockLoad(DBLockRec);
    if (VIr.TransDate>DBLockRec.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LVIVcRecordRemoveTest;
    end;
    APr.SerNr = VIr.SerNr;
    if (ReadFirstMain(APr,1,true)) then begin
      if (APr.RVal!=0) then begin
        if (long3>0) then begin
          MessageBox(1560,"");
        end;
        res = 0;
        goto LVIVcRecordRemoveTest;
      end;
    end;
    VILastTransDate(VIr.SerNr,lasttrdate);
    if (lasttrdate>DBLockRec.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LVIVcRecordRemoveTest;
    end;
  end;
  if (MainCLRec.CashCollection!=0) then begin
    if (CLOutforVIExists(VIr.SerNr,"VIVc",clout)) then begin
      if (long3>0) then begin
        MessageBox(2073,clout);
      end;
      res = 0;
      goto LVIVcRecordRemoveTest;      
    end;
  end;
  actnr = 1;
  while (ReadRecordLink(VIr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (long3>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LVIVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;
LVIVcRecordRemoveTest:;
  VIVcRecordRemoveTest = res;  
  RETURN;
end;

global
updating procedure CheckVEBalDate(string vecode,Date TransDate)
BEGIN
  record VEBalVc VEBalr;
  
  VEBalr.VECode = vecode;
  if (ReadLastMain(VEBalr,1,true)) then begin
    if (VEBalr.TransDate<=TransDate) then begin
      RecordDelete(VEBalr);
    end;
  end;
  RETURN;
END;

updating procedure CredInvAP(LongInt origvinr)
BEGIN
  record VIVc VIr;
  record OPrsVc OPrsr;
  Boolean TrHs;
  
  OPrsr.VINr = origvinr;
  OPrsr.TransType = kOPrsTransTypeInvoice;
  TrHs = true;
  while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
    if (OPrsr.VINr!=origvinr) then begin
      TrHs = false;
    end;
    if (OPrsr.TransType!=kOPrsTransTypeInvoice) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      VIr.SerNr = OPrsr.TransNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        if (VIr.CredInv>VIr.SerNr) and (VIr.OKFlag!=0) then begin
          APAdd1(VIr,false,false);
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure VIUpdateAT2Unit(record VIVc VIr)
begin
  row VIVc VIrw;
  Integer i,rwcnt;
  record AT2UnitVc ATUnitr;
  record AT2UnitVc oldATUnitr;
  record AT2DprVc ATDprr;
  val vat,startval;
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    switch (VIrw.AssetTransType) begin
      case kAssetTransTypeNewAsset:
        RecordNew(ATUnitr);
        ATUnitr.VECode = VIr.VECode;
        ATUnitr.VEName = VIr.VEName;
        ATUnitr.PurchaseDate = VIr.TransDate;
        ATUnitr.VISerNr = VIr.SerNr;
        ATUnitr.VEInvoiceNr = VIr.InvoiceNr;

        ATUnitr.Description = VIrw.Comment;
        ATUnitr.Objects = VIrw.Objects;
        ATUnitr.SerialNr = VIrw.SerialNr;
        ATUnitr.Quantity = VIrw.qty;      
        if (ATUnitr.Quantity<=0) then begin
          ATUnitr.Quantity = 1.00;
        end;
        ATUnitr.PurchVal = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)/ATUnitr.Quantity;      
        ATUnitr.InsuranceVal = ATUnitr.PurchVal;
        ATUnitr.VATVal = FindVAT(VIrw.VATCode,VIrw.Sum,0,0)/ATUnitr.Quantity;      
        ATUnitr.VATVal = MulRateToBase1(VIr.CurncyCode,ATUnitr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        ATUnitr.InventoryNr = VIrw.InventoryNr;
/*        
        oldATUnitr.InventoryNr = "ZZZZZZZZZZZ";
        if (ReadLastMain(oldATUnitr,1,false)) then begin end;
        NextM4Number(oldATUnitr.InventoryNr,ATUnitr.InventoryNr);
*/        
        if (RecordStore(ATUnitr,false)) then begin
          CreateRecordLink(ATUnitr,CurrentCompany,VIr,CurrentCompany);  
          CreateRecordLink(VIr,CurrentCompany,ATUnitr,CurrentCompany);  
        end;
      case kAssetTransTypeUpdateAsset:
        ATUnitr.InventoryNr = VIrw.InventoryNr;
        if (ReadFirstMain(ATUnitr,1,true)) then begin
          RecordCopy(oldATUnitr,ATUnitr);
          ATUnitr.PurchVal = ATUnitr.PurchVal + MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)/ATUnitr.Quantity;      
          vat = FindVAT(VIrw.VATCode,VIrw.Sum,0,0)/ATUnitr.Quantity;      
          ATUnitr.VATVal = ATUnitr.VATVal + MulRateToBase1(VIr.CurncyCode,vat,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
          if (RecordUpdate(oldATUnitr,ATUnitr,true)==0) then begin
            CreateRecordLink(ATUnitr,CurrentCompany,VIr,CurrentCompany);  
            CreateRecordLink(VIr,CurrentCompany,ATUnitr,CurrentCompany);  
          end;
        end;
      case kAssetTransTypeRevaluateAsset:
        ATUnitr.InventoryNr = VIrw.InventoryNr;
        if (ReadFirstMain(ATUnitr,1,true)) then begin
          ATDprr.SerNr = 1000000000000;
          ATDprr.InventoryNr = ATUnitr.InventoryNr;
          if (ReadLastKey("InventoryNr",ATDprr,2,false)) then begin
            startval = ATDprr.StartVal;
          end;
          if (ATDprr.InventoryNr!=ATUnitr.InventoryNr) then begin
            RecordNew(ATDprr);
            startval = ATUnitr.PurchVal;
          end;
          ATDprr.TransDate = VIr.TransDate;
          ATDprr.InventoryNr = ATUnitr.InventoryNr;
          ATDprr.AT2Code = ATUnitr.AT2Code;
          ATDprr.Description = ATUnitr.Description;
          ATDprr.StartingDate1 = VIr.TransDate;
          ATDprr.Model1 = ATUnitr.Model1;
          ATDprr.StartVal = startval + MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)/VIrw.qty;               
          ATDprr.SerNr = NextSerNr("AT2DprVc",ATDprr.TransDate,-1,false,"");
          if (ATDprr.SerNr>0) then begin
            if (RecordStore(ATDprr,false)) then begin
              CreateRecordLink(ATDprr,CurrentCompany,VIr,CurrentCompany);  
              CreateRecordLink(VIr,CurrentCompany,ATDprr,CurrentCompany);  
            end;
          end;
        end;
    end;
  end;
  return;
end;

global
updating procedure VIOK(record VIVc VIp,Boolean trflg)
BEGIN
  record VIVc VI2r;
  record VIVc lVIr;
  Boolean updateapf;

  if (VIp.Invalid!=0) then begin
    goto LVIOK;
  end;
  switch (VIp.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:  
      OPPUpdateVI(VIp,false);
    case kInvoiceTypeCash:  
      OPPUpdateVI(VIp,false);
    case kInvoiceTypeEmployee:  
      OPPUpdateVI(VIp,false);
    case kInvoiceTypeCreditSpecialSales: 
      goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      if (VIp.CredInv!=-1) then begin
        updateapf = true;
        lVIr.SerNr = VIp.CredInv;
        if (ReadFirstMain(lVIr,1,true)) then begin
          if (lVIr.InvType==kInvoiceTypeEmployee or lVIr.InvType==kInvoiceTypeCash or lVIr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin updateapf = false; end;
        end;
        if (Importing) then begin
          if (VIp.CredInv>VIp.SerNr) then begin
            updateapf = false;//do nothing now, it will be updated when importing credited invoice
          end;
        end;
        if (updateapf) then begin
          if (APAdd2(VIp.CredInv,VIp.VECode,VIp.TransDate,VIp.PayVal-VIp.WithHoldingTax,blankval,blankval,VIp.CurncyCode,"",-1,VIp.FrRate,VIp.ToRateB2,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,true,false,false,VIp.PayDeal,-1,false)==false) then begin
            APAdd1(VIp,trflg,false);
          end;
        end;
        UpdateLiqInfoFromVI(VIp.CredInv,VIp.PayVal,VIp.CurncyCode,VIp.SerNr);
      end else begin
        APAdd1(VIp,trflg,false);
      end;
    otherwise
      APAdd1(VIp,trflg,false);
      OPPUpdateVI(VIp,false);
      if (Importing) then begin
        CredInvAP(VIp.SerNr);
      end;  
    end;
  if (trflg) then begin
    VIUpdatePR(VIp,VI2r,false);
    VIUpdateAT2Unit(VIp);
    if (VIp.InvType==kInvoiceTypeEmployee) then begin
      VIp.PPOKNr = UpdatePPOKNr(VIp.PPOKNr);
    end;
  end;
LVIOK:;  
  RETURN;
END;

global
updating function LongInt VIVcRecordSave(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record SRBlock SRRec;
  Integer i,rwcnt;
  row VIVc VIrw;
  record VIVc orgVIr;
  Boolean testf;

  if (VIr.Invalid==0) then begin
    BlockLoad(SRRec);
    SRRec.LastInvDate = VIr.InvDate;
    BlockStore(SRRec);
    testf = true;
    if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      orgVIr.SerNr = VIr.CredInv;
      if (ReadFirstMain(orgVIr,1,true)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VIr,i,VIrw);
        if (VIrw.stp==1) then begin
          VIrw.PURow = -1;
          VIrw.PUNr = -1;
          MatRowPut(VIr,i,VIrw);
        end;
      end;
    end;
    
    if (VIr.OKFlag!=0) then begin
      VIOK(VIr,true);
    end;
    if (VIr.POCOSerNr!=-1) then begin
      VIUpdatePOCO(VIr,VI2r,true,false);
    end;
  end;
  if (VIr.POSerNr<=0) and (VIr.OKFlag!=0) then begin
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      if (VIrw.stp==1) then begin
        if (VIrw.PUNr<=0) then begin
          VIrw.OrdRow = -1;
        end;
        VIrw.VarianceAmount = blankval;
//        if (Vir.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) or (VIr.CredInv<=0) then begin// when we have PUNr we blank it ????
//          VIrw.PUNr = -1;
//          VIrw.PURow = -1;
//        end;
        MatRowPut(VIr,i,VIrw);
      end;
    end;
  end;  
  VIVcRecordSave = res;
  RETURN;
END;

updating procedure BatchMainAccrual(record VIVc VIp,Boolean deletef)
BEGIN
  Integer i,j;
  Integer rwcnt;
  row VIVc VIrw;
  record MainAccrualVc mainr;
  Date otd;
  Boolean dof;
  
  rwcnt = MatRowCnt(VIp);
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if ((VIrw.stp==1) and nonblank(VIrw.PeriodCode)) then begin
      mainr.AccNumber = VIrw.AccNumber;
      mainr.TransDate = VIp.TransDate;
      mainr.TransNr = VIp.SerNr;
      mainr.FileName = "VIVc";
      mainr.RowNr = i;
      if (deletef) then begin
        if (ReadFirstMain(mainr,0,true)) then begin
          RecordDelete(mainr);
        end;
      end else begin
        if (RecordStore(mainr,false)) then begin end;
      end;
    end;
  end;
  if (deletef) then begin goto LBatchMainAccrual; end;
/*  
  otd = VIp.TransDate;
  for (j=rwcnt-1;j>=0;j=j-1) begin
    MatRowGet(VIp,j,VIrw);
    dof = false;
    if (VIrw.stp==2) then begin
      if (otd!=VIrw.OldTransDate) then begin
        dof = true;
      end;
    end;
    if (dof) then begin
        otd = VIrw.OldTransDate;
        for (i=0; i<j;i=i+1) begin
          MatRowGet(VIp,i,VIrw);
          if (VIrw.stp==1) then begin
            mainr.AccNumber = VIrw.AccNumber;
            mainr.TransDate = otd;
            mainr.TransNr = VIp.Number;
            mainr.FileName = "VIVc";
            mainr.IntYc = VIp.IntYc;
            if (RecordStore(mainr,false)) then begin end;
          end;
      end;
    end;
  end;
*/  
LBatchMainAccrual:;  
  RETURN;
END;

global
updating function LongInt VIVcRecordSaveAfter(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ActVc Actr;
  string 255 autmsgfunciontags;
  
  if ((VIr.OKFlag!=0) and (VIr.Invalid==0)) then begin
    CheckVEBalDate(VIr.VECode,VIr.TransDate);
    if (VendStats(VIr,false)) then begin end;
    MakeActFromSubSys_VIVc(VIr,false,Actr);
    
    BatchMainAccrual(VIr,false);
    UpdateVarianceStatusVI(VIr,false);
    VICreatePlannedPayment(VIr);
    if (IsStandardProduct) then begin 
      if (VIr.CalcVATVal==0) then begin
        if (CountRecords("VIVc")>=10) then begin
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasVATZone+OK_VIVc");
        end;
      end;
      autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasIntegratedNL");
    end;
    switch (VIr.InvType) begin
      case kInvoiceTypeCash:
        autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModCL+OK_VIVc");
      case kInvoiceTypeCredit:
        autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasRetGoodsToSupp+OK_VIVc");
    end;
    autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModPO+OK_VIVc");
  end;
  if ((VIr.PrelBook!=0) and (VIr.Invalid==0)) then begin
    VIrsPrelBookingStats(VIr,false);
  end;
  if (VIr.POSerNr!=-1) then begin
    if (UpdatePOFromVI(VIr,VI2r,true,false,false)) then begin end;
  end else begin
    UpdatePOFromVIRows(VIr,true,VI2r,false,false)
  end;
  if (VIr.OKFlag!=0) then begin
    if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      UpdateBatchTextFromVI(VIr,1);
    end else begin
      UpdateBatchTextFromVI(VIr,0);
    end;
    SetKPIsStatus("modPL",kKPIStatusInvalid);
  end;
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  VIVcRecordSaveAfter = res;
  RETURN;
END;

updating procedure VIChangeDueDate(record VIVc VIp)
BEGIN
  record APVc APr;
  Boolean found;
  LongInt recid;

  APr.SerNr = VIp.SerNr;
  found = ReadFirstMain(APr,1,true);
  if (found) then begin
    APr.DueDate = VIp.DueDate;
    APr.RebDate = VIp.RebDate;
    if (blankdate(APr.RebDate)) then begin
      APr.RebDate = VIp.DueDate;
    end;
    APr.RebDate2 = VIp.RebDate2;
    if (blankdate(APr.RebDate2)) then begin
      APr.RebDate2 = VIp.DueDate;
    end;
    if (RecordStore(APr,true)) then begin end;
  end;
  return;
end;

global
updating function LongInt VIVcRecordUpdate(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row VIVc VIrw;
  
  VIr.Sign = CurrentUser;
  if ((VIr.OKFlag!=0) and (VI2r.OKFlag==0)) then begin
    if (VIr.POSerNr<=0) then begin
      rwcnt = MatRowCnt(VIr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VIr,i,VIrw);
        if (VIrw.stp==1) then begin
          if (VIrw.PUNr<=0) then begin
            VIrw.OrdRow = -1;
          end;
          VIrw.VarianceAmount = blankval;
  //        if (Vir.InvType!=kInvoiceTypeCredit or VIr.InvType!=kInvoiceTypeCreditSpecialSales) or (VIr.CredInv<=0) then begin// when we have PUNr we blank it ????
  //          VIrw.PUNr = -1;
  //          VIrw.PURow = -1;
  //        end;
          MatRowPut(VIr,i,VIrw);
        end;
      end;
    end;  
  end;
  if ((VI2r.Invalid==0) and (VIr.Invalid==0)) then begin
    if (VIr.POSerNr!=-1) or (VI2r.POSerNr!=-1) then begin
      if (UpdatePOFromVI(VIr,VI2r,true,true,false)) then begin end;
    end else begin
      UpdatePOFromVIRows(VIr,true,VI2r,true,VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales)
    end;
    if ((VI2r.OKFlag==0) and (VIr.OKFlag!=0)) then begin
      VIOK(VIr,true);
    end;
    if ((VI2r.OKFlag!=0) and (VIr.OKFlag!=0)) then begin
      if ((VI2r.DueDate!=VIr.DueDate) or (VI2r.RebDate!=VIr.RebDate) or (VI2r.RebDate2!=VIr.RebDate2)) then begin
        VIChangeDueDate(VIr);
      end;
      VIUpdatePR(VIr,VI2r,true);
    end;
  end;
  if ((VI2r.Invalid==0) and (VIr.Invalid!=0)) then begin
    if (VI2r.OKFlag!=0) then begin
      InvalidateTR(VIYc,VIr.SerNr);
      InvalidateTR(PVYc,VIr.SerNr);
      InvalidateVI(VIr,VI2r,false);      
      DeleteAPInstall(VIr);
      DeleteVIUpdatePR(VIr);
      if (VIr.POSerNr!=-1) or (VI2r.POSerNr!=-1) then begin
        if (UpdatePOFromVI(VIr,VI2r,true,false,true)) then begin end;
      end else begin
        UpdatePOFromVIRows(VIr,true,VI2r,false,true)
      end;
      DeleteLiqInfoFromOrg(VIr.SerNr,VIYc);
    end;
  end;
  if ((VIr.Invalid==0) and (VI2r.Invalid==0)) then begin//unok
    if ((VIr.OKFlag==0) and (VI2r.OKFlag!=0)) then begin
      DeleteTransaction(VIr.SerNr,VIYc);
      DeleteSimulation(VIr.SerNr,"VIVc");
      InvalidateVI(VIr,VI2r,true);
      DeleteVIUpdatePR(VI2r);
      DeleteAPInstall(VIr);
    end;
    if ((VIr.PrelBook==0) and (VI2r.PrelBook!=0)) then begin
      DeleteTransaction(VIr.SerNr,PVYc);
    end;
  end;
  VIVcRecordUpdate = res;
  return;
end;

updating procedure UpdateVEIV2(record VIVc VIr,record VIVc VI2r)
begin
  record VEIVVc VEIVr;
  record VEIVVc oldVEIVr;
  record CYBlock CYb;
  record InternetEnablerBlock IEb;
  string 255 CompID;
  
  if (VIr.SerNr!=VI2r.SerNr) then begin
    VEIVr.VISerNr = VI2r.SerNr;
    if (ReadFirstKey("VISerNr",VEIVr,1,true)) then begin
      RecordCopy(oldVEIVr,VEIVr);
      VEIVr.VISerNr = VIr.SerNr;
      RecordUpdate(oldVEIVr,VEIVr,false);
      UpdateBrowses("VEIVVc");
    end;
  end;
  if (HasLocalization("EST")) then begin
    if ((VIr.OKFlag!=0) and (VI2r.OKFlag==0)) then begin
      BlockLoad(CYb);
      BlockLoad(IEb);
      CompID = CreateCompID;
      VEIVr.VISerNr = VIr.SerNr;
      if (ReadFirstKey("VISerNr",VEIVr,1,true)) then begin
        SaveERecordStatus_WithRow("VEIVVc",VEIVr.VISerNr,VEIVr.VESerNr,IEb.CustomerCode,"SuppInv",1,CompID,VEIVr.RejectReason & ";" & VEIVr.OurContact,"EARVEKESKUS2",VEIVr.VersionNr,2,CYb.VATNr,CYb.OrgNr);
      end;
    end;
  end;
end;

global
updating function LongInt VIVcRecordUpdateAfter(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ActVc Actr;
  record APVc APr;
  record APVc oldAPr;
  record TRVc TRr;
  record TRVc oldTRr;
  val bc1v;  
  string 255 autmsgfunciontags;
  
  if ((VIr.Invalid==0) and (VI2r.Invalid==0)) then begin
    if ((VIr.OKFlag!=0) and (VI2r.OKFlag==0)) then begin
      if (VI2r.PrelBook!=0) then begin
        VIrsPrelBookingStats(VI2r,true);
      end;
      if (VendStats(VIr,false)) then begin end;
      MakeActFromSubSys_VIVc(VIr,false,Actr);
      CheckVEBalDate(VIr.VECode,VIr.TransDate);
      UpdateVarianceStatusVI(VIr,false);
      VICreatePlannedPayment(VIr);
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        UpdateBatchTextFromVI(VIr,1);
      end else begin
        UpdateBatchTextFromVI(VIr,0);
      end;
      if (IsStandardProduct) then begin 
        if (VIr.CalcVATVal==0) then begin
          if (CountRecords("VIVc")>=10) then begin
            autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasVATZone+OK_VIVc");
          end;
        end;
        autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasIntegratedNL");
      end;
      switch (VIr.InvType) begin
        case kInvoiceTypeCash:
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModCL+OK_VIVc");
        case kInvoiceTypeCredit:
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasRetGoodsToSupp+OK_VIVc");
      end;
      autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModPO+OK_VIVc");
    end;  
    if ((VIr.OKFlag==0) and (VI2r.OKFlag!=0)) then begin//unok
      if (VendStats(VI2r,true)) then begin end;
      DeleteActFromSubSys_VIVc(VIr);
      StoreUnOKHistory("VIVc",VIr.SerNr,CurrentDate,CurrentTime,CurrentUser);
      DeleteLiqInfoFromOrg(VIr.SerNr,VIYc);
      DeletePlannedPayment("VIVc",VIr.SerNr,-1);
    end;
    if ((VIr.PrelBook!=0) and (VI2r.PrelBook==0)) then begin
      VIrsPrelBookingStats(VIr,false);
    end;
    if ((VIr.PrelBook==0) and (VI2r.PrelBook!=0)) then begin//unok
      VIrsPrelBookingStats(VI2r,true);
    end;
    SetKPIsStatus("modPL",kKPIStatusInvalid);
  end;  
  if ((VIr.OKFlag!=0) and (VI2r.OKFlag!=0)) then begin
    if (VIr.InvoiceNr!=VI2r.InvoiceNr) or (VIr.RefStr!=VI2r.RefStr) then begin
      APr.SerNr = VIr.SerNr;
      if (ReadFirstMain(APr,1,true)) then begin
        RecordCopy(oldAPr,APr);
        APr.InvoiceNr = VIr.InvoiceNr;
        APr.RefStr = VIr.RefStr;
        RecordUpdate(oldAPr,APr,false);
      end;
      if (VIr.RefStr!=VI2r.RefStr) then begin
        TRr.Number = VIr.SerNr;
        TRr.IntYc = VIYc;
        if (ReadFirstMain(TRr,2,true)) then begin
          RecordCopy(oldTRr,TRr);
          TRr.RefStr = VIr.RefStr;
          RecordUpdate(oldTRr,TRr,false);
        end;
      end;      
    end;
  end;    
  if ((VI2r.Invalid==0) and (VIr.Invalid!=0)) then begin
    if (VI2r.OKFlag!=0) then begin
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        UpdateBatchTextFromVI(VIr,0);
      end else begin
        UpdateBatchTextFromVI(VIr,1);
      end;
      UpdateVarianceStatusVI(VIr,true);
    end;
    UpdateVEIV(VIr);
    InvalidatePlannedPayment("VIVc",VIr.SerNr);
  end;
  if ((VIr.Invalid==0) and (VI2r.Invalid==0)) then begin//unok
    if ((VIr.OKFlag==0) and (VI2r.OKFlag!=0)) then begin
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        UpdateBatchTextFromVI(VIr,0);
      end else begin
        UpdateBatchTextFromVI(VIr,1);
      end;
      UpdateVarianceStatusVI(VIr,true);
    end;
  end;
  UpdateVEIV2(VIr,VI2r);
  AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  VIVcRecordUpdateAfter = res;
  return;
end;

global
function LongInt VIVcRecordDefaults(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record AccBlock ARAccb;
  record APAccBlock APAb;
  record SRBlock SRRec;
  string 255 tstr;
  val fr,to1,to2,br1,br2;
  record CUVc VEr;

  BlockLoad(SRRec);
  BlockLoad(APAb);
  BlockLoad(ARAccb);
  VIr.Invalid = 0;
  VIr.InvType = kInvoiceTypeNormal;
  VIr.SerNr = -1;
  VIr.CredInv = -1;
  VIr.POCQStatNr = -1;
  VIr.POSerNr = -1;
  VIr.CredMark = "";
  VIr.SalesMan = CurrentUser;
  GetSalesGroup(VIr.SalesMan,tstr);
  VIr.SalesGroup = tstr;
  if (blankdate(SRRec.LastInvDate)) then begin
    VIr.InvDate = CurrentDate;
    VIr.TransDate = CurrentDate;
  end else begin
    VIr.InvDate = SRRec.LastInvDate;
    VIr.TransDate = SRRec.LastInvDate;
  end;
  VIr.LangCode = "";
  if (SingleUserMode) then begin
    VIr.SerNr = NextSerNr("VIVc",VIr.TransDate,-1,false,VIr.LangCode);
  end;
  VIr.InvoiceNr = "";
  VIr.OKFlag = 0;
  VIr.PayDeal = "";
  VIr.APonTR = APAb.APonTR;
  VIr.APAcc = APAb.APAcc;
  VEr.Code = VIr.VECode;
  ReadFirstMain(VEr,1,true);
  switch (VEr.OPBookVAT) begin
    case 1:
      VIr.OPBookVAT = VEr.OPBookVAT;
    case 2:
      VIr.OPBookVAT = 0;  
    otherwise
      VIr.OPBookVAT = APAb.OPBookVAT;  
  end;
  tstr = "";
  GetFullCurncyRate(tstr,VIr.TransDate,fr,to1,to2,br1,br2);
  VIr.CurncyCode = tstr;
  VIr.FrRate = fr;
  VIr.ToRateB1 = to1; 
  VIr.ToRateB2 = to2;
  VIr.BaseRate1 = br1;
  VIr.BaseRate2 = br2;
  GetFullCurncyRate(tstr,VIr.TransDate,VIr.VATFrRate,VIr.VATToRateB1,VIr.VATToRateB2,VIr.VATBaseRate1,VIr.VATBaseRate2);
  VIr.CalcVATVal = blankval;
  VIr.VATVal = blankval;
  VIr.HoldSum = blankval;
  VIr.NoTAXonVAT = ARAccb.NoTAXonVAT;
  VIVcRecordDefaults = res; 
  RETURN;
END;

global
updating procedure VIVcRecordDuplicateDo(var record VIVc VIr)
BEGIN
  val fr,to1,to2,br1,br2;
  Integer i,rwcnt;
  row VIVc VIrw;
  record POSettingBlock POSettingRec;
  record SRBlock SRRec;
  LongInt newnr;
  Boolean nousersernr;
  record CUVc VEr;
      
  BlockLoad(POSettingRec);
  VIr.Invalid = 0;
  VIr.SerNr = -1;
  VIr.POCQStatNr = -1;  
  VIr.POSerNr = -1;
  VIr.CredInv = -1;
  VIr.IVNr = -1;  
  if (SingleUserMode) then begin
    if (VIr.SerNr<=0) then begin
      BlockLoad(SRRec);    
      nousersernr = false;
      if ((VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) and (SRRec.LastCredVINr!=-1))  then begin
        newnr = SRRec.LastCredVINr;
        nousersernr = true;
        if (newnr==-1) then begin
          newnr = GetCurUserLastNr("VIVc");
        end;      
      end else begin
        newnr = GetCurUserLastNr("VIVc");
        if (newnr==-1) then begin
          newnr = SRRec.LastVINr;
        end;
      end;
      VIr.SerNr = NextSerNr("VIVc",VIr.TransDate,newnr,nousersernr,VIr.LangCode);
    end;    
  end;
  GetFullCurncyRate(VIr.CurncyCode,VIr.TransDate,fr,to1,to2,br1,br2);
  VIr.FrRate = fr;
  VIr.ToRateB1 = to1; 
  VIr.ToRateB2 = to2;
  VIr.BaseRate1 = br1;
  VIr.BaseRate2 = br2;
  GetFullCurncyRate(VIr.CurncyCode,VIr.TransDate,VIr.VATFrRate,VIr.VATToRateB1,VIr.VATToRateB2,VIr.VATBaseRate1,VIr.VATBaseRate2);
  VIr.InvoiceNr = "";
  VIr.OKFlag = 0;
  VIr.CredMark = "";
  VIr.AcceptanceBy = "";
  VIr.AcceptanceFYI = "";
  rwcnt = MatRowCnt(VIr);
  for (i=rwcnt-1;i>= 0;i=i-1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp==6) then begin
      VIrw.PrepayAmount = blankval;
      VIrw.VATVal = blankval;
      VIrw.PrepayNr = -1;
    end;
    if (POSettingRec.CredVIUpdatePO==0) then begin
      VIrw.OrdRow = -1;
    end;
    MatRowPut(VIr,i,VIrw);
  end;
  if (PastePayRecVI(VIr,VIr.VECode)) then begin end;
  VICalcEReb(VIr);
  VIOpenPrepExists(VIr.VECode);
  WarnFutureDate(true,VIr.TransDate);
  WarnFutureDate(true,VIr.InvDate);
  if (Importing==false) then begin
    if (DateLocked(VIr.TransDate,"VIVc")) then begin
      MessageBox(1046,"");
    end else begin
      if (DateWarned(VIr.TransDate,"VIVc")) then begin
        MessageBox(1045,"");
      end;
    end;  
  end;
  
  RETURN;
END;

global
updating function LongInt VIVcRecordDuplicate(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  VIVcRecordDuplicateDo(VIr);
  VIVcRecordDuplicate = res; 
  RETURN;
END;

procedure VIVcConvertB1ToB2(record VIVc VIr,string curncy,val fr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  val t;
  row VIVc VIrw;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2);

  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp==6) then begin
      B1ToB2Val(VIrw.Sum,br1,br2,t);
      VIrw.Sum = t;
      MatRowPut(VIr,i,VIrw);
    end;
  end;
  RETURN;
END;

global
updating function LongInt VIVcRecordImport(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record VIVc lVIr;
  Integer i,rwcnt;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;

  if (VIr.SerNr==-99) then begin
    VIr.SerNr = NextSerNr("VIVc",VIr.TransDate,-1,false,VIr.LangCode);
  end;
  lVIr.SerNr = VIr.SerNr;
  if ((ReadFirstMain(lVIr,1,true)==false) or (Importing==false)) then begin//how the hell importing can be false on import
    BlockLoad(cvm);
    if (blank(VIr.VATFrRate)) then begin VIr.VATFrRate = VIr.FrRate; end;
    if (blank(VIr.VATToRateB1)) then begin VIr.VATToRateB1 = VIr.ToRateB1; end;
    if (blank(VIr.VATToRateB2)) then begin VIr.VATToRateB2 = VIr.ToRateB2; end;
    if (blank(VIr.VATBaseRate1)) then begin VIr.VATBaseRate1 = VIr.BaseRate1; end;
    if (blank(VIr.VATBaseRate2)) then begin VIr.VATBaseRate2 = VIr.BaseRate2; end;
    
    if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
    if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
    if (VIr.InvType==0) then begin VIr.InvType = kInvoiceTypeNormal; end;
    if (VIr.CredInv<=0) then begin VIr.CredInv = -1; end;
    if (VIr.FrRate==0) then begin VIr.FrRate = blankval; end;
    if (VIr.ToRateB1==0) then begin VIr.ToRateB1 = blankval; end;
    if (VIr.ToRateB2==0) then begin VIr.ToRateB2 = blankval; end;
    if (VIr.BaseRate1==0) then begin VIr.BaseRate1 = blankval; end;
    if (VIr.BaseRate2==0) then begin VIr.BaseRate2 = blankval; end;

    if (VIr.VATFrRate==0) then begin VIr.VATFrRate = blankval; end;
    if (VIr.VATToRateB1==0) then begin VIr.VATToRateB1 = blankval; end;
    if (VIr.VATToRateB2==0) then begin VIr.VATToRateB2 = blankval; end;
    if (VIr.VATBaseRate1==0) then begin VIr.VATBaseRate1 = blankval; end;
    if (VIr.VATBaseRate2==0) then begin VIr.VATBaseRate2 = blankval; end;
    if (gToDualBase) then begin
      fr = VIr.FrRate;
      to1 = VIr.ToRateB1;
      to2 = VIr.ToRateB2;
      br1 = VIr.BaseRate1;
      br2 = VIr.BaseRate2;
      t = VIr.PayVal;
      curncy = VIr.CurncyCode;
      ConvertToDualBase(curncy,VIr.TransDate,fr,to1,to2,br1,br2,t,true);
      VIr.CurncyCode = curncy;
      VIr.FrRate = fr;
      VIr.ToRateB1 = to1;
      VIr.ToRateB2 = to2;
      VIr.BaseRate1 = br1;
      VIr.BaseRate2 = br2;
      VIr.PayVal = t;
    end;
    if (gBase1ToBase2) then begin
      to1 = VIr.ToRateB1;
      to2 = VIr.ToRateB2;
      br1 = VIr.BaseRate1;
      br2 = VIr.BaseRate2;
      VIVcConvertB1ToB2(VIr,VIr.CurncyCode,VIr.FrRate,to1,to2,br1,br2);
      VIr.ToRateB1 = to1;
      VIr.ToRateB2 = to2;
      VIr.BaseRate1 = br1;
      VIr.BaseRate2 = br2;
      VISumup(VIr,t);
    end;
  end;
VI99:;
  if (VIr.NoTAXonVAT==-1) then begin
    VIr.NoTAXonVAT = 0;
  end;
  VIVcRecordImport = res; 
  RETURN;
END;

updating procedure CleanInstallments(record VIVc VIr)
begin
  record APInstallVc APIr;
  Boolean deletef;
  record PDVc PDr;
  record InstallmentVc Instr;

  deletef = true;
  PDr.Code = VIr.PayDeal;
  if (ReadFirstMain(PDr,1,true)) then begin
    if (nonblank(PDr.Installment)) then begin
      deletef = false;
    end;
  end;
  if (deletef) then begin
    DeleteAPInstall(VIr);
  end;
  return;
end;

global
updating function LongInt VIVcRecordImportAfter(var record VIVc VIr,record VIVc VI2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (VIr.Invalid==0) then begin
    if (VIr.OKFlag!=0) then begin
      if (VendStats(VIr,false)) then begin end;
      VIOK(VIr,false);//not sure if it is supposed to be false, on save it is true,
      CleanInstallments(VIr);
    end;
    if (VIr.PrelBook!=0) then begin
      VIrsPrelBookingStats(VIr,false);
    end;
  end;
  VIVcRecordImportAfter = res; 
  RETURN;
END;

global
function LongInt VIVcRecordReset(var record VIVc VIr,record VIVc VI2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  VIr.OKFlag = 0;
  VIVcRecordReset = res;
  RETURN;
END;

procedure SubtractVIPrePay(record VIVc VIp,var val tp)
BEGIN
  Integer rwcnt,i;
  row VIVc VIrw;
  
  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if (VIrw.stp==6) then begin
      tp = tp - VIrw.PrepayAmount;
    end;
  end;
  RETURN;
END;

function Boolean PRCanInvalidateVI(record VIVc VIp)
BEGIN
  row VIVc VIrw;
  Integer i,rwcnt;
  record TBIVVc TBIVr;
  Boolean res;

  res = true;
  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if (nonblank(VIrw.PRCode)) then begin
      TBIVr.oVc = 2;
      TBIVr.SerNr = VIp.SerNr;
      TBIVr.Row = i;
      TBIVr.PRCode = VIrw.PRCode;
      TBIVr.ArtCode = VIrw.Item;
      TBIVr.EMCode = "";
      if (ReadFirstMain(TBIVr,6,true)) then begin
        if (TBIVr.Invoice!=-1) then begin
          MessageBox(1365,"");
          res = false;
          i = rwcnt;
        end;
      end;
    end;
  end;
  PRCanInvalidateVI = res;
  RETURN;
END;

global
updating function LongInt VIVcRecordInvalidateTest(var record VIVc VIr,record VIVc VI2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record APVc APr;
  val t;

  res = 0;
  if (VIr.Invalid==0) then begin
    if (DateLocked(VIr.TransDate,"VIVc")==false) then begin
      if (PRCanInvalidateVI(VIr)) then begin
        if (UserCanInvalidateVI) then begin      
          switch (VIr.InvType) begin
            case kInvoiceTypeNormalSpecialSales: goto LkInvoiceTypeNormal;
            case kInvoiceTypeNormal:
              LkInvoiceTypeNormal:;
              APr.SerNr = VIr.SerNr;
              t = VIr.PayVal - VIr.WithHoldingTax;
              SubtractVIPrePay(VIr,t);
              if (ReadFirstMain(APr,1,true)) then begin
                if (APr.RVal==t) then begin    
                  VIr.Invalid = 1;
                  res = 1;
                end;  
              end else begin
                if (t==0) then begin    
                  VIr.Invalid = 1;
                  res = 1;
                end else begin
                  VIr.Invalid = 0;
                  res = 0;
                end;
              end;
            case kInvoiceTypeCashInvoiceReceiptPRT:
              VIr.Invalid = 1;
              res = 1;
            case kInvoiceTypeCash:
              VIr.Invalid = 1;
              res = 1;
            case kInvoiceTypeEmployee:
              VIr.Invalid = 1;
              res = 1;
            case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
            case kInvoiceTypeCredit:
              LkInvoiceTypeCredit:;
              /*
              APr.SerNr = VIr.SerNr;
              if (ReadFirstMain(APr,1,true)) then begin
                t = -VIr.PayVal;
                if (APr.RVal==t) then begin    
                  VIr.Invalid = 1;
                  res = 1;
                end;  
              end;
              */
              VIr.Invalid = 1;
              res = 1;
            case 4:
              VIr.Invalid = 1;
              res = 1;
            case kInvoiceTypePrepayment:
              VIr.Invalid = 1;
              res = 1;
          end;
        end;
        if (res==0) then begin
          MessageBox(34500,"");
        end;
      end;
    end else begin
      MessageBox(34500,"");
    end;
  end;
LVIVcRecordInvalidateTest:;
  VIVcRecordInvalidateTest = res;  
  RETURN;
END;

global
function Integer ProjectAccount(string accstr,string prcode)
BEGIN
  Integer res;
  Integer i,rwcnt;
  record WIPCheckBlock wipr;
  row WIPCheckBlock wiprw;
  
  BlockLoad(wipr);
  rwcnt = MatRowCnt(wipr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(wipr,i,wiprw);
    if (AccInRange(prcode,wiprw.Project)) then begin
      if (AccInRange(accstr,wiprw.Accs)==false) then begin
        res = 1;
      end else begin
        res = 0;
        goto LProjectAccount;
      end;
    end;
    if (blank(prcode)) then begin
      if (AccInRange(accstr,wiprw.Accs)) then begin      
        res = 2;
        goto LProjectAccount;
      end;
    end;
  end;
LProjectAccount:;
  ProjectAccount = res;
  RETURN;
END;

global
function Boolean CheckPOCQStatVECode(LongInt pocqstatnr, string vecode,var Integer errnrp)
BEGIN
  record POCQStatVc POCQStatr;
  Boolean res;
  
  res = true;
  errnrp = 0;
  if ((pocqstatnr==-1) or (pocqstatnr==0)) then begin
    goto LCheckPOCQStatVECode;
  end;
  POCQStatr.SerNr = pocqstatnr;
  if (ReadFirstMain(POCQStatr,1,true)==false) then begin
    errnrp = 1290;
    res = false;
  end else begin
    if (POCQStatr.VECode!=vecode) then begin
      errnrp = 1215;
      res = false;
    end;
  end;
LCheckPOCQStatVECode:;  
  CheckPOCQStatVECode = res;
  RETURN;
END;

global
function Integer GetCreditedVInvoiceType(record VIVc VIp)
begin
  record VIVc VIr;
  Integer res;
    
  res = -1;
  VIr.SerNr = VIp.CredInv;
  if (ReadFirstMain(VIr,1,true)) then begin
    res = VIr.InvType;
  end;
  GetCreditedVInvoiceType = res;
  return;
end;

global
function LongInt VIVc_PrepaymentAlreadyUsed(LongInt VISerNr,LongInt PrepayNr,val curvibookrval)
begin
  LongInt res;
  record VIVc VIr;
  row VIVc VIrw;
  Integer i,rwcnt;
  string 255 keystr;
  Boolean TrHs;
  val vibookrval,prepbookrval;
  record APPayHistVc APPayHistr;

  APPayHistr.VEPNr = PrepayNr;
  APPayHistr.FileName = "OPVc";
  TrHs = true;
  while (LoopMain(APPayHistr,2,TrHs)) begin
    if (APPayHistr.VEPNr!=PrepayNr) then begin TrHs = false; end;
    if (APPayHistr.FileName!="OPVc") then begin TrHs = false; end;
    if (TrHs) then begin
      prepbookrval = prepbookrval + APPayHistr.BookVal;
    end;
  end;
  APPayHistr.VEPNr = PrepayNr;
  APPayHistr.FileName = "CLOutVc";
  TrHs = true;
  ResetLoop(APPayHistr);
  while (LoopMain(APPayHistr,2,TrHs)) begin
    if (APPayHistr.VEPNr!=PrepayNr) then begin TrHs = false; end;
    if (APPayHistr.FileName!="CLOutVc") then begin TrHs = false; end;
    if (TrHs) then begin
      prepbookrval = prepbookrval + APPayHistr.BookVal;
    end;
  end;
  vibookrval = curvibookrval;
  keystr = "PrepayNr:" & PrepayNr;
  TrHs = true;
  while (LoopKey(keystr,VIr,1,TrHs)) begin
    if (VIr.SerNr!=VISerNr) then begin

        if (VIr.OKFlag!=0) and (VIr.Invalid==0) then begin
          rwcnt = MatRowCnt(VIr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VIr,i,VIrw);
            if (VIrw.PrepayNr==PrepayNr) then begin
              if (VIrw.stp==6) then begin
                vibookrval = vibookrval + VIrw.Sum;
              end;
            end;
          end;
          if (vibookrval>prepbookrval) then begin
            res = VIr.SerNr;
            goto LPrepaymentAlreadyUsed;
          end;
        end;
    end;
  end;
LPrepaymentAlreadyUsed:;
  VIVc_PrepaymentAlreadyUsed = res;
  return;
end;
