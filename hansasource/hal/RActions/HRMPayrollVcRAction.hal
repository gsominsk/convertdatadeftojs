external procedure B1ToB2Val(val,val,val,var val);
external procedure SwapM4Val(var val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

global
function LongInt HRMPayrollVcRecordDefaults(var record HRMPayrollVc HRMPr,record HRMPayrollVc HRMP2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  HRMPr.SerNr = -1;
  HRMPr.TransDate = CurrentDate;
  HRMPr.TotSum = blankval;
  if (SingleUserMode) then begin
    HRMPr.SerNr = NextSerNr("HRMPayrollVc",HRMPr.TransDate,-1,false,"");
  end;
  GetFullCurncyRate(HRMPr.CurncyCode,HRMPr.TransDate,HRMPr.FrRate,HRMPr.ToRateB1,HRMPr.ToRateB2,HRMPr.BaseRate1,HRMPr.BaseRate2);
  HRMPayrollVcRecordDefaults = res;  
  return;
end;

global
function LongInt HRMPayrollVcRecordDuplicate(var record HRMPayrollVc HRMPr,record HRMPayrollVc HRMP2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  HRMPr.SerNr = -1;
  HRMPr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    HRMPr.SerNr = NextSerNr("HRMPayrollVc",HRMPr.TransDate,-1,false,"");
  end;
  GetFullCurncyRate(HRMPr.CurncyCode,HRMPr.TransDate,HRMPr.FrRate,HRMPr.ToRateB1,HRMPr.ToRateB2,HRMPr.BaseRate1,HRMPr.BaseRate2);
  HRMPayrollVcRecordDuplicate = res;  
  return;
end;

procedure HRMPayrollVcConvertB1ToB2(var record HRMPayrollVc HRMPr,val fr,var val to1,var val to2,var val br1,var val br2)
BEGIN
  row HRMPayrollVc HRMPrw;
  Integer i,rwcnt;
  val t;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2); 
  rwcnt = MatRowCnt(HRMPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(HRMPr,i,HRMPrw);
    B1ToB2Val(HRMPrw.Sum,br1,br2,t);
    HRMPrw.Sum = t;    
    MatRowPut(HRMPr,i,HRMPrw);
  end;
  return;
end;

global
function LongInt HRMPayrollVcRecordCheck(record HRMPayrollVc HRMPr,record HRMPayrollVc HRMP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  LongInt oldnr;
  record UserVc Userr;
  record HRMPymtTypeVc HRMTr;
  row HRMPayrollVc HRMPrw;
  Integer i,rwcnt;
  
  res = 0;
  if (stat==Rs_update) then begin
    if (HRMPr.SerNr<=0) then begin
      HRMPr.SerNr = HRMP2r.SerNr;
    end;
  end;  
  oldnr = HRMPr.SerNr;
  if (HRMPr.SerNr<=0) then begin
    HRMPr.SerNr = NextSerNr("HRMPayrollVc",HRMPr.TransDate,-1,false,"");
  end;
/*  
  if (SerNrTestQTVc(QTp.SerNr,QTp.QTDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LQTVcRecordCheck;
  end;
  if (Date2Test("QTVc",QTp.QTDate,"QTDate",-1)==false) then begin
    res = -1;
    goto LQTVcRecordCheck;
  end;
*/
  Userr.Code = HRMPr.UserCode;
  if (ReadFirstMain(Userr,1,true)==false) then begin
    RecordCheckError(1120,HRMPr.UserCode,-1,"UserCode");      
    res = -1; 
    goto LHRMPayrollVcRecordCheck;
  end;
  if (Userr.Closed!=0) or (Userr.TerminatedFlag!=0) then begin
    RecordCheckError(1265,HRMPr.UserCode,-1,"UserCode");      
    res = -1; 
    goto LHRMPayrollVcRecordCheck;
  end;
  rwcnt = MatRowCnt(HRMPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(HRMPr,i,HRMPrw);
    HRMTr.Code = HRMPrw.HRMPymtType;
    if (ReadFirstMain(HRMTr,1,true)==false) then begin
      RecordCheckError(1265,HRMPrw.HRMPymtType,i,"HRMPymtType");      
      res = -1; 
      goto LHRMPayrollVcRecordCheck;
    end;
  end;
  
LHRMPayrollVcRecordCheck:;  
  if (res!=0) then begin HRMPr.SerNr = oldnr; end;
  HRMPayrollVcRecordCheck = res;
  return;
end;

global
function LongInt HRMPayrollVcRecordImport(var record HRMPayrollVc HRMPr,record HRMPayrollVc HRMP2r,LongInt long3,LongInt long4)
begin
  LongInt res;  
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  val fr,to1,to2,br1,br2,t;
  string 10 curncy;
  Integer rwcnt,i;
  row QTVc QTrw;
  record AccBlock Accb;
  row LegalInvNrBlock LINrbrw;

  BlockLoad(cvm);  
  if (HRMPr.SerNr==-99) then begin
    HRMPr.SerNr = NextSerNr("HRMPayrollVc",HRMPr.TransDate,-1,false,"");
  end;
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    fr = HRMPr.FrRate;
    to1 = HRMPr.ToRateB1;
    to2 = HRMPr.ToRateB2;
    br1 = HRMPr.BaseRate1;
    br2 = HRMPr.BaseRate2;
    t = HRMPr.TotSum;
    curncy = HRMPr.CurncyCode;
    ConvertToDualBase(curncy,HRMPr.TransDate,fr,to1,to2,br1,br2,t,true);
    HRMPr.CurncyCode = curncy;
    HRMPr.FrRate = fr;
    HRMPr.ToRateB1 = to1;
    HRMPr.ToRateB2 = to2;
    HRMPr.BaseRate1 = br1;
    HRMPr.BaseRate2 = br2;
    HRMPr.TotSum = t;  
  end;
  if (gBase1ToBase2) then begin
    to1 = HRMPr.ToRateB1;
    to2 = HRMPr.ToRateB2;
    br1 = HRMPr.BaseRate1;
    br2 = HRMPr.BaseRate2;  
    HRMPayrollVcConvertB1ToB2(HRMPr,HRMPr.FrRate,to1,to2,br1,br2);
    HRMPr.ToRateB1 = to1;
    HRMPr.ToRateB2 = to2;
    HRMPr.BaseRate1 = br1;
    HRMPr.BaseRate2 = br2;
//    HRMPr.BaseSum4 = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
  end;
  HRMPayrollVcRecordImport = res;  
  return;
end;
