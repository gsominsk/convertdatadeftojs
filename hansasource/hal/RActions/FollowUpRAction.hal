
global
function LongInt FollowUpVcRecordDefaults(var record FollowUpVc r1,record FollowUpVc r2,LongInt long3,LongInt long4)
begin
  r1.SerNr     = -1;
  r1.JobNr     = -1;
  r1.ActNr     = -1;
  r1.TransDate = CurrentDate;
  r1.Amount    = BlankVal;
  FollowUpVcRecordDefaults = -1;
  return;
end;

global
function LongInt FollowUpVcRecordDuplicate(var record FollowUpVc r1,record FollowUpVc r2,LongInt long3,LongInt long4)
begin
  r1.SerNr     = -1;
  r1.ActNr     = -1;
  FollowUpVcRecordDuplicate = -1;
  return;
end;

updating procedure OKActivity(LongInt ActNr)
begin
  Record ActVc Actr;
  
  Actr.SerNr = ActNr;
  if readfirstmain(Actr,1,true) then begin
    Actr.OKFlag = 1;
    if (RecordStore(Actr,true)) then begin end;
  end;
  return;
end;

updating procedure JobrChangeState(LongInt JobNr,String NextState)
begin
  Record JobVc Jobr;
  Record JobVc oldJobr;
  
  Jobr.SerNr = JobNr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    if nonblank(NextState) then begin
      RecordCopy(oldJobr,Jobr);
      Jobr.ResStatus = NextState;
      if (RecordUpdate(oldJobr,Jobr,false)==0) then begin end;
    end;  
  end;
  return;
end;

global
function LongInt FollowUpVcRecordSave(var record FollowUpVc r1,record FollowUpVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  if (r1.SerNr==-1) then begin
    r1.SerNr = NextSerNr("FollowUpVc",r1.TransDate,-1,false,"");
  end;
  return;
end;

global
updating function LongInt FollowUpVcRecordUpdate(var record FollowUpVc r1,record FollowUpVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  Record ActVc Actr;
  
  if (r1.SerNr==-1) then begin
    r1.SerNr = NextSerNr("FollowUpVc",r1.TransDate,-1,false,"");
  end;
  if ((r1.OKFlag==1) and (r2.OKFlag<>1)) then begin
    OKActivity(r1.ActNr);
    JobrChangeState(r1.JobNr,r1.NReservationStatus);
  end;
  if ((r1.TransDate<>r2.TransDate) or (r1.Amount<>r2.Amount)) then begin
    Actr.SerNr = r1.ActNr;
    if readfirstmain(Actr,1,true) then begin
      Actr.TransDate = r1.TransDate;
      Actr.EndDate   = r1.TransDate;
      Actr.Comment   = r1.Comment & " Rva. " & r1.JobNr & " ($" & r1.Amount &  ")";
      if recordStore(Actr,true) then begin end;
    end;
  end;
  return;
end;

global
function LongInt FollowUpVcRecordRemoveTest(var record FollowUpVc r1,record FollowUpVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = 1;
  FollowUpVcRecordRemoveTest = res;  
  return;
end;

global
updating function LongInt FollowUpVcRecordRemove(var record FollowUpVc r1,record FollowUpVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  record ActVc Actr;
  
  Actr.SerNr = r1.ActNr;
  if readfirstmain(Actr,1,true) then begin
    RecordDelete(Actr);
  end;
  return;
end;

global
function LongInt FollowUpVcRecordCheck(var record FollowUpVc r1,record FollowUpVc r2,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rows,s;
  Boolean Cond;
  
  res = -1;  
/*  
  if (blankdate(Excurr1.TransDate)) then begin
    RecordCheckError(1939,Excurr1.TransDate,-1,"TransDate");
    goto LExcursionVcRecordCheck;
  end;
  if (blankdate(Excurr1.ExcurType)) then begin
    RecordCheckError(1939,Excurr1.ExcurType,-1,"ExcurType");
    goto LExcursionVcRecordCheck;
  end;
*/  

  res = 0;
LFollowUpVcRecordCheck:;  
  if (res<>0) then begin Beep; end;
  FollowUpVcRecordCheck = res;
  RETURN;
END;

global
updating procedure OKFollowUp(Record ActVc Actr)
begin
  record RLinkVc RLinkr;
  record FollowUpVc FollowUpr;

  if (ReadRecordLink(Actr,1,FollowUpr,RLinkr)) then begin
    FollowUpr.OKFlag = 1;
    if RecordStore(FollowUpr,true) then begin
      //
    end;
  end;
  return;
end;

