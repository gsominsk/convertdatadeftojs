remote updating function Boolean BA_OYMinMarkupWarning(record OYVc,var Integer);
external procedure ReplacePerceptionTaxesRows_OYVc(var record OYVc);
external function Boolean IsPostcodeFormatCorrect(string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean CheckPDExists(string);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external function Integer VerifyTaxTemplateCode(string,var string);
external function Integer VerifySalesmen(string,var string);
external function Boolean UseTaxTemplatesforTaxCalc();
external function Integer CheckUsers(string,string,var string,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean AllowedToTakeFromLocation(string);
external function Boolean IsVATCodeDefined(string);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function val GetINCostPrice(string,string,Boolean);
external updating procedure SMSWhenOY(record OYVc,Integer);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external updating procedure UpdateVARItemsOY(record OYVc);
external function Boolean IsRecipeClosed(string);
external function Date ConvertPlanShipString(string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean CorrectM4ValProc(val);
external function Boolean CheckAllowedSize(record INVc,val,val,val);
external function Integer CheckObjs(string,string,var string);

external function Integer PayTermType(string);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestOYVc(LongInt,Date,var Boolean);
external procedure OYSumup(var record OYVc);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean INVc_AllowSales(record INVc,var LongInt);

function Boolean OYCheckForSalesmanPrice(record OYVc OYr,Integer i,string pricelist,var string errstr)
begin 
  record INVc INr;
  val t,s,price,vreb;
  val baseprice,calcprice;
  val temp,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean dummyf,calcpricef,res;
  row OYVc OYrw;
  Time blankt;
  
  res = true;
  if nonblank(pricelist) then begin
    MatRowGet(OYr,i,OYrw);
    if (GetItemPriceDiscount3(OYrw.ArtCode,OYrw.Quant,INr,OYr.CurncyCode,
                                OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,
                                OYr.LangCode,OYr.CustCat,pricelist,OYr.RebCode,
                                price,curitemname,vreb,vatcode,baseprice,salesacc,
                                OYr.ExportFlag,calcpricef,OYr.OYDate,blankt,OYr.CustCode,true,dummyf,OYr.PayDeal,tax2code,tax2prc,OYr.Region,OYr.Location,taxtemplatecode)) then begin
      calcprice = OYrw.Sum/OYrw.Quant;
      if (price>calcprice) then begin
        errstr = calcprice;
        errstr = errstr & USetStr(20111) & price;
        res = false;
      end;  
    end;              
  end;
  OYCheckForSalesmanPrice = res;        
  return;
end;  

global
function LongInt OYVcRecordDefaults(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  record QTSettBlock QTSb;
  LongInt res;
  LongInt newnr;
  Date blankd;
  record UserVc Userr;
  record AccBlock Accb;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  record ProjectBlock ProjectRec;

  BlockLoad(QTSb);
  BlockLoad(Accb);
  BlockLoad(ProjectRec);
  OYr.SerNr = -1;
  OYr.OrderNr = -1;
  OYr.OYDate = CurrentDate;
  if (QTSb.DefaultValidDays>0) then begin
    OYr.ValidUntilDate = AddDay(OYr.OYDate,QTSb.DefaultValidDays);
  end;
  OYr.CustCat = "";
  OYr.ExportFlag = 0;
  OYr.Rejected = 0;
  OYr.RejectDate = blankd;
  OYr.DiscSum = blankval;
  OYr.DiscPerc = blankval;
  OYr.TotGP = blankval;
  OYr.Probability = blankval;
  OYr.TotQty = blankval;
  OYr.TotWeight = blankval;
  OYr.TotVolume = blankval;      
  OYr.SumTime = blankval;
  OYr.SumOther = blankval;      
  OYr.SumStocked = blankval;      
  OYr.SumMaterial = blankval;      
  OYr.InclVAT = Accb.BasePriceInclVAT;
  OYr.NoTAXonVAT = Accb.NoTAXonVAT;
  OYr.TotalwoTAX = Accb.TotalwoTAX;
  OYr.DaysToDelivery = -1;
  if (SingleUserMode) then begin
    OYr.SerNr = NextSerNr("OYVc",OYr.OYDate,-1,false,"");
  end;
  GetCurUser(Userr);
  OYr.Objects = Userr.PersObjx;
  OYr.OurContact = Userr.CurOurContact;
  OYr.Location = Userr.Location;
  OYr.SalesMan = Userr.Code;
  OYr.SalesGroup = Userr.SalesGroup;
  OYr.PayDeal = "";
  curcode = OYr.CurncyCode;
  GetFullCurncyRate(curcode,OYr.OYDate,fr,to1,to2,br1,br2);
  OYr.CurncyCode = curcode;
  OYr.FrRate = fr;
  OYr.ToRateB1 = to1; 
  OYr.ToRateB2 = to2;
  OYr.BaseRate1 = br1;
  OYr.BaseRate2 = br2;
  OYr.BudTime = ProjectRec.BudTime;
  OYr.BudOther = ProjectRec.BudOther;
  OYr.BudStocked = ProjectRec.BudStocked;
  OYr.BudMaterial = ProjectRec.BudMaterial;
  OYr.BranchID = CurBranchID;
  OYr.LocalMachineCode = CurMachineName;
  OYr.ProformaOfficialSerNrSerie = "";
  OYVcRecordDefaults = res;  
  return;
end;

global
procedure RecalculateWeightOYVc(var record OYVc OYp,Boolean readf)
begin
  row OYVc OYrw;
  Integer rwcnt,i;
  record INVc INr;
  
  if (readf) then begin
    if (ReadFirstMain(OYp,0,true)) then begin end;
  end;
  OYp.TotQty = blankval;
  OYp.TotVolume = blankval;
  OYp.TotWeight = blankval;
  rwcnt = MatRowCnt(OYp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    OYp.TotQty = OYp.TotQty + OYrw.Quant;
    if (ReadFirstItem(OYrw.ArtCode,INr,true,true)) then begin
      OYp.TotVolume = OYp.TotVolume + OYrw.Quant*INr.Volume;
      OYp.TotWeight = OYp.TotWeight + OYrw.Quant*INr.Weight;
    end;          
  end;
  if (OYp.TotVolume==0) then begin OYp.TotVolume = blankval; end;
  if (OYp.TotWeight==0) then begin OYp.TotWeight = blankval; end;
  return;
end;

global
function LongInt OYVcRecordUpdate(var record OYVc OYr,record OYVc OY2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  RecalculateWeightOYVc(OYr,false);  
  OYVcRecordUpdate = res; 
  return;
end;

global
updating function LongInt OYVcRecordUpdateAfter(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  val bc1v;

  UpdateVARItemsOY(OYr);
  if (OYr.Rejected==2) and (OY2r.Rejected!=2) then begin
    SMSWhenOY(OYr,1);  
  end;
  OYVcRecordUpdateAfter = res; 
  return;
end;

global
function LongInt OYVcRecordSave(var record OYVc OYr,record OYVc OY2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  RecalculateWeightOYVc(OYr,false);
  OYVcRecordSave = res; 
  return;
end;

global
updating function LongInt OYVcRecordSaveAfter(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  UpdateVARItemsOY(OYr);
  if (OYr.Rejected==2) then begin
    SMSWhenOY(OYr,1);  
  end;
  OYVcRecordSaveAfter = res; 
  return;
end;

global
function LongInt OYVcRecordDuplicate(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  record QTSettBlock QTSb;
  LongInt res;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  Date blankd;
  Integer i,rwcnt;
  row OYVc OYrw;
  Date bd;
  Time bt;
  record CreditLimitBlock CLb;
  record CUVc CUr;
  val bal,limit;
  Boolean limitdaysf;

  BlockLoad(QTSb);
  OYr.SerNr = -1;
  OYr.DiscSum = blankval;
  OYr.DiscPerc = blankval;
  OYr.Probability = blankval;
  OYr.OrderNr = -1;
  OYr.Rejected = 0;
  OYr.Closed = 0;
  OYr.RejectDate = blankd;
  OYr.PRCode = "";
  curcode = OYr.CurncyCode;
  GetFullCurncyRate(curcode,OYr.OYDate,fr,to1,to2,br1,br2);
  OYr.CurncyCode = curcode;
  OYr.FrRate = fr;
  OYr.ToRateB1 = to1; 
  OYr.ToRateB2 = to2;
  OYr.BaseRate1 = br1;
  OYr.BaseRate2 = br2;
  OYr.OYDate = CurrentDate;
  if (QTSb.DefaultValidDays>0) then begin
    OYr.ValidUntilDate = AddDay(OYr.OYDate,QTSb.DefaultValidDays);
  end;
  rwcnt = MatRowCnt(OYr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYr,i,OYrw);
    OYrw.Invoiced = -1;
    OYrw.Invd = blankval;
    OYrw.InvDate = blankd;
    OYrw.BasePrice = GetINCostPrice("",OYrw.ArtCode,false);
    MatRowPut(OYr,i,OYrw);
  end;
  if (SingleUserMode) then begin
    OYr.SerNr = NextSerNr("OYVc",OYr.OYDate,-1,false,"");
  end;
  OYr.AcceptanceBy = "";
  OYr.AcceptanceFYI = "";
  OYr.BranchID = CurBranchID;
  OYr.LocalMachineCode = CurMachineName;
  OYr.RegDate = bd;
  OYr.RegTime = bt;
  ReplacePerceptionTaxesRows_OYVc(OYr);
  OYSumup(OYr); 
  BlockLoad(CLb);
  CUr.Code = OYr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  if (nonblank(CUr.WarnText1)) then begin
    MessageBox(0,CUr.WarnText1);
  end;
  if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
    if (CLb.IVPaste==1) then begin
      if (limitdaysf) then begin
        MessageBox(0,USetStr(22260));
      end;
      if (limit>0) then begin
        if (bal>limit) then begin
          MessageBox(0,USetStr(1164));
        end;
      end;
    end;
  end;
  
  OYVcRecordDuplicate = res;  
  return;
end;

procedure OYVcConvertB1ToB2(record OYVc OYp,val fr,var val to1,var val to2,var val br1,var val br2)
begin
  row OYVc OYrw;
  Integer i,rwcnt;
  val t;
  record TaxMatrixVc TMr;

  SwapM4Val(br1,br2);
  SwapM4Val(to1,to2); 
  rwcnt = MatRowCnt(OYp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    B1ToB2Val(OYrw.rowGP,br1,br2,t);
    OYrw.rowGP = t;
    B1ToB2Val(OYrw.BasePrice,br1,br2,t);
    OYrw.BasePrice = t;    
    MatRowPut(OYp,i,OYrw);
  end;
  return;
end;

global
updating function LongInt OYVcRecordImport(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  LongInt res;  
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  val fr,to1,to2,br1,br2,t;
  string 10 curncy;
  Integer rwcnt,i;
  row OYVc OYrw;
  record AccBlock Accb;
  row LegalInvNrBlock LINrbrw;

  BlockLoad(cvm);  
  BlockLoad(Accb);  
  if (OYr.SerNr==-99) then begin
    OYr.SerNr = NextSerNr("OYVc",OYr.OYDate,-1,false,"");
  end;
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    fr = OYr.FrRate;
    to1 = OYr.ToRateB1;
    to2 = OYr.ToRateB2;
    br1 = OYr.BaseRate1;
    br2 = OYr.BaseRate2;
    t = OYr.Sum4;
    curncy = OYr.CurncyCode;
    ConvertToDualBase(curncy,OYr.OYDate,fr,to1,to2,br1,br2,t,true);
    OYr.CurncyCode = curncy;
    OYr.FrRate = fr;
    OYr.ToRateB1 = to1;
    OYr.ToRateB2 = to2;
    OYr.BaseRate1 = br1;
    OYr.BaseRate2 = br2;
    OYr.Sum4 = t;  
  end;
  if (gBase1ToBase2) then begin
    to1 = OYr.ToRateB1;
    to2 = OYr.ToRateB2;
    br1 = OYr.BaseRate1;
    br2 = OYr.BaseRate2;  
    OYVcConvertB1ToB2(OYr,OYr.FrRate,to1,to2,br1,br2);
    OYr.ToRateB1 = to1;
    OYr.ToRateB2 = to2;
    OYr.BaseRate1 = br1;
    OYr.BaseRate2 = br2;
    OYr.BaseSum4 = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
  end;
  if (OYr.TotGP==0) then begin      
    rwcnt = MatRowCnt(OYr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OYr,i,OYrw);
      if (nonblank(OYrw.ArtCode)) then begin
        OYr.TotGP = OYr.TotGP + OYrw.rowGP;
      end;
    end;
  end;
  if (blankdate(OYr.PlanShipDate)) then begin
    OYr.PlanShipDate = ConvertPlanShipString(OYr.PlanShip);
  end;  
  if (OYr.NoTAXonVAT==-1) then begin
    OYr.NoTAXonVAT = Accb.NoTAXonVAT;
  end;
  OYVcRecordImport = res;  
  return;
end;

function Boolean CheckCurncyRates(string crncy,val from,val to1,val to2,val base1,val base2)
begin
  Boolean res;
  record BaseCurBlock bascur;

  res = true;
  BlockLoad(bascur);
  if ((nonblank(crncy)) and (bascur.BaseCur1!=crncy) and (bascur.BaseCur2!=crncy)) then begin
    if ((to1==0) and (to2==0)) then begin
      res = false;
    end;
  end;
  CheckCurncyRates = res;
  return;
end;

function Boolean ValidQuotationDataForVATLaw_Portuguese(record OYVc OYr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  val rval,rvalb1;
  Boolean testf;
  record CountryVc Countryr;
  
  res = true;
  if (blank(OYr.VATNr)) then begin
    errcode = 20275;
    gotofield = "VATNr";
    res = false;
    goto LValidQuotationDataForVATLaw_Portuguese;
  end;
  testf = true;
  if (OYr.VATNr=="999999990") then begin testf = false; end;
  if (CUr.CustType==1) then begin
    if (OYr.Sum1<=1000) then begin
      if (blank(OYr.Addr1) and blank(OYr.Addr2) and blank(OYr.Addr3) and blank(OYr.InvAddr3) and blank(OYr.InvAddr4)) then begin
        testf = false;
      end;
    end;
  end;
  if (testf) then begin
    testf = false;
    if (blank(OYr.Addr1) and blank(OYr.Addr2)) then begin
      gotofield = "Addr1";
      testf = true;
    end;
    if (blank(OYr.Addr3)) then begin
      gotofield = "Addr3";
      testf = true;
    end;
    if (blank(OYr.InvAddr3)) then begin
      gotofield = "InvAddr3";
      testf = true;
    end;
    if (blank(OYr.InvAddr4)) then begin
      gotofield = "InvAddr4";
      testf = true;
    end;
    if (testf) then begin
      errcode = 20276;
      res = false;
      goto LValidQuotationDataForVATLaw_Portuguese;
    end;
  end;
  if (nonblank(OYr.InvAddr4)) then begin
    Countryr.Comment = OYr.InvAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "InvAddr4";
      goto LValidQuotationDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(OYr.InvAddr4)) or (OYr.InvAddr4=="Portugal") then begin
    if (nonblank(OYr.Addr3)) then begin
      if (IsPostcodeFormatCorrect(OYr.Addr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "Addr3";
        goto LValidQuotationDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (OYr.VATNr!="999999990") then begin
    if (nonblank(OYr.ShipAddr1) or nonblank(OYr.ShipAddr2) or nonblank(OYr.DelAddr3) or nonblank(OYr.DelAddr4)) then begin
      testf = false;
      if (blank(OYr.ShipAddr1) and blank(OYr.ShipAddr2)) then begin
        gotofield = "ShipAddr1";
        testf = true;
      end;
      if (blank(OYr.ShipAddr3)) then begin
        gotofield = "ShipAddr3";
        testf = true;
      end;
      if (blank(OYr.DelAddr3)) then begin
        gotofield = "DelAddr3";
        testf = true;
      end;
      if (blank(OYr.DelAddr4)) then begin
        gotofield = "DelAddr4";
        testf = true;
      end;
      if (testf) then begin
        errcode = 20276;
        res = false;
        goto LValidQuotationDataForVATLaw_Portuguese;
      end;
    end;
  end;

  if (nonblank(OYr.DelAddr4)) then begin
    Countryr.Comment = OYr.DelAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "DelAddr4";
      goto LValidQuotationDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(OYr.DelAddr4)) or (OYr.DelAddr4=="Portugal") then begin
    if (nonblank(OYr.ShipAddr3)) then begin
      if (IsPostcodeFormatCorrect(OYr.ShipAddr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "ShipAddr3";
        goto LValidQuotationDataForVATLaw_Portuguese;
      end;
    end;
  end;
  
LValidQuotationDataForVATLaw_Portuguese:;  
  ValidQuotationDataForVATLaw_Portuguese = res;
  return;
end;

function Boolean ValidQuotationDataForVATLaw(record OYVc OYr,record CUVc CUr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  
  res = true;
  if (HasLocalization("PRT")) then begin
//    res = ValidQuotationDataForVATLaw_Portuguese(OYr,CUr,errcode,gotofield);
  end;
LValidQuotationDataForVATLaw:;  
  ValidQuotationDataForVATLaw = res;
  return;
end;

global
function LongInt OYVcRecordCheck(record OYVc OYp,record OYVc OY2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ProjectBlock PRRec;
  record SRBlock SRRec;
  record OYVc locOYr;
  record CUVc CUr;
  record CUVc CU2r;
  record INVc INr;
  record PRVc PRr;
  record AccVc Accr;
  row OYVc OYrw;
  Integer i,rwcnt,errcode;
  LongInt oldnr,ErrorCode,l;
  Boolean gentrans,transf,testf,test2f;
  string 255 tstr,errstr;
  Integer insertmode,updatemode;
  record QTSettBlock QTSetb;
  record UserVc User,User2;
  record TaxTemplateVc TTr;
  record AccBlock ARAccb;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Date td;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  record OTCheckBlock OTCheckr;
  Boolean initotcheckf;
  record CUUserLabelBlock CUUerLb;
  record CountryVc Countryr;

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  BlockLoad(SRRec);
  BlockLoad(PRRec);
  BlockLoad(QTSetb);
  BlockLoad(ARAccb);
  if (stat==updatemode) then begin
    if (OYp.SerNr<=0) then begin
      OYp.SerNr = OY2p.SerNr;
    end;
  end;  
  oldnr = OYp.SerNr;
  if (OYp.SerNr<=0) then begin
    OYp.SerNr = NextSerNr("OYVc",OYp.OYDate,SRRec.LastOYNr,false,"");
  end;
  if ((stat==insertmode) or (OYp.SerNr!=OY2p.SerNr)) then begin
    locOYr.SerNr = OYp.SerNr;
    if (ReadFirstMain(locOYr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1; 
      goto LOYVcRecordCheck;
    end;
  end;
  if (SerNrTestOYVc(OYp.SerNr,OYp.OYDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LOYVcRecordCheck;
  end;
  if (Date2Test("OYVc",OYp.OYDate,"OYDate",-1)==false) then begin
    res = -1;
    goto LOYVcRecordCheck;
  end;
/*  
  if (QTSetb.ReqQTClass!=0) then begin
    if (blank(OYp.QuoteClass)) then begin
      RecordCheckError(20109,"",-1,"QuoteClass");
      res = -1;
      goto LOYVcRecordCheck;  
    end;
  end;  
*/  
  CUr.Code = OYp.CustCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,OYp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LOYVcRecordCheck;
  end;
  if (CUr.LeadType==0) then begin
    RecordCheckError(1120,OYp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LOYVcRecordCheck;
  end;
  switch (stat) begin
    case Rs_update:
      if (OYp.Rejected!=2) and (OY2p.Rejected<2) then begin
        OYp.RegDate = CurrentDate;
        OYp.RegTime = CurrentTime;
      end;
    otherwise
      if (OYp.Rejected!=2) then begin
        OYp.RegDate = CurrentDate;
        OYp.RegTime = CurrentTime;
      end;
  end;
  if ((stat==Rs_insert) or ((stat==Rs_update) and (OY2p.Closed==0))) then begin
    if (OYp.Rejected!=1) then begin  //if not Rejected
      if (qupdating.BA_OYMinMarkupWarning(OYp,i)) then begin
        if (UserCanAction("DisallowSaleBelowGP",false)) then begin
          RecordCheckError(22088,"",i,"Sum");      
          res = -1;
          goto LOYVcRecordCheck;
        end;
      end;
    end;
  end;  
  
  errcode = CheckVATNrMask(OYp.VATNr,CUr.CountryCode,CUr.CustType,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,tstr,-1,"VATNr");      
    res = -1; 
    goto LOYVcRecordCheck;
  end;
  if (CUr.blockedFlag!=0) then begin
    RecordCheckError(1265,OYp.CustCode,-1,"CustCode");      
    res = -1; 
    goto LOYVcRecordCheck;
  end;
  if (HasLocalization("PRT")) then begin
    BlockLoad(CUUerLb);  
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = OYp.Addr0; errstr = "Addr0";
      case kCountryAddrLineUserAddr1: tstr = OYp.Addr1; errstr = "Addr1";
      case kCountryAddrLineUserAddr2: tstr = OYp.Addr2; errstr = "Addr2";
      case kCountryAddrLineUserAddr3: tstr = OYp.InvAddr3; errstr = "InvAddr3";
      case kCountryAddrLineUserAddr4: tstr = OYp.InvAddr4; errstr = "InvAddr4";
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        RecordCheckError(20277,tstr,-1,errstr);      
        res = -1;
        goto LOYVcRecordCheck;
      end;
    end;
    if (blank(tstr)) or (tstr=="Portugal") then begin
      if (nonblank(OYp.Addr3)) then begin
        if (IsPostcodeFormatCorrect(OYp.Addr3)==false) then begin
          RecordCheckError(24620,tstr,-1,"Addr3");      
          res = -1;
          goto LOYVcRecordCheck;
        end;
      end;
    end;
    tstr = "";
    switch (CUUerLb.CountryAddrLine) begin
      case kCountryAddrLineUserAddr0: tstr = OYp.ShipAddr0; errstr = "ShipAddr0";
      case kCountryAddrLineUserAddr1: tstr = OYp.ShipAddr1; errstr = "ShipAddr1";
      case kCountryAddrLineUserAddr2: tstr = OYp.ShipAddr2; errstr = "ShipAddr2";
      case kCountryAddrLineUserAddr3: tstr = OYp.DelAddr3; errstr = "DelAddr3";
      case kCountryAddrLineUserAddr4: tstr = OYp.DelAddr4; errstr = "DelAddr4";
    end;
    if (nonblank(tstr)) then begin
      Countryr.Comment = tstr;
      if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
        RecordCheckError(20277,tstr,-1,errstr);      
        res = -1;
        goto LOYVcRecordCheck;
      end;
    end;
    if (blank(tstr)) or (tstr=="Portugal") then begin
      if (nonblank(OYp.ShipAddr3)) then begin
        if (IsPostcodeFormatCorrect(OYp.ShipAddr3)==false) then begin
          RecordCheckError(24620,tstr,-1,"ShipAddr3");      
          res = -1;
          goto LOYVcRecordCheck;
        end;
      end;
    end;
  end;
  
  if (CheckPDExists(OYp.PayDeal)==false) then begin
    RecordCheckError(1256,"",-1,"PayDeal");
    res = -1;
    goto LOYVcRecordCheck;
  end;  
  switch (PayTermType(OYp.PayDeal)) begin
    case kInvoiceTypeCredit:
      RecordCheckError(1227,OYp.PayDeal,-1,"PayDeal");      
      res = -1;
      goto LOYVcRecordCheck;
    case kInvoiceTypeEmployee:
      RecordCheckError(1958,"",-1,"PayDeal");      
      res = -1;
      goto LOYVcRecordCheck;
  end;

//  if (nonblank(OYp.Objects)) then begin
    errcode = CheckObjs("",OYp.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1; 
      goto LOYVcRecordCheck;
    end;
//  end;
  if (OYp.ExportFlag!=0) then begin
    if (UserCanAction("DisallowExpSales",false)) then begin
      RecordCheckError(20049,"",-1,"CustCode");   
      res = -1; 
      goto LOYVcRecordCheck;
    end; 
  end;
  if (OYp.ExportFlag==0) then begin
    if (UserCanAction("DisallowDomSales",false)) then begin
      RecordCheckError(20056,"",-1,"CustCode");   
      res = -1; 
      goto LOYVcRecordCheck;
    end; 
  end;
  if (nonblank(OYp.PRCode)) then begin
    PRr.Code = OYp.PRCode;
    if (ReadFirstMain(PRr,1,true)) then begin
      if ((OYp.CustCode!=PRr.CustCode) and (nonblank(PRr.CustCode))) then begin
        RecordCheckError(1218,"",-1,"PRCode");      
        res = -1; 
        goto LOYVcRecordCheck;
      end;
      if (nonblank(PRr.CurncyCode)) then begin
        if (OYp.CurncyCode!=PRr.CurncyCode) then begin
          RecordCheckError(20573,"",-1,"PRCode");      
          res = -1;
          goto LOYVcRecordCheck;
        end;
      end;
    end else begin
      RecordCheckError(1232,"",-1,"PRCode");      
      res = -1; 
      goto LOYVcRecordCheck;
    end;    
    if (PRr.Terminated!=0) then begin
      RecordCheckError(2086,"" & PRr.Code,-1,"PRCode");      
      res = -1; 
      goto LOYVcRecordCheck;
    end;        
    if (PRRec.AllowSingleQuote!=0) then begin
      locOYr.PRCode = OYp.PRCode;
      if (ReadFirstKey("PRCode",locOYr,1,true)) then begin
        if (locOYr.SerNr!=OYp.SerNr) then begin
          RecordCheckError(2080,"",-1,"PRCode");      
          res = -1; 
          goto LOYVcRecordCheck;
        end;
      end;
    end;
  end;
  if (nonblank(CUr.CurncyCode)) then begin
    if (CUr.CurncyCode!=OYp.CurncyCode) then begin
      RecordCheckError(1217,"",-1,"CurncyCode");      
      res = -1; 
      goto LOYVcRecordCheck;
    end;
  end;      
  if (nonblank(OYp.SalesMan)) then begin    
    errcode = VerifySalesmen(OYp.SalesMan,tstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,": " & tstr,-1,"SalesMan");
      res = -1; 
      goto LOYVcRecordCheck;
    end;
  end;
  if (nonblank(OYp.OrgCust)) then begin
    CU2r.Code = OYp.OrgCust;
    if (ReadFirstMain(CU2r,1,true)) then begin
      if ((nonblank(CUr.CurncyCode) or nonblank(CU2r.CurncyCode)) and CUr.CurncyCode!=CU2r.CurncyCode) then begin
        RecordCheckError(1217,"",-1,"OrgCust");      
        res = -1; 
        goto LOYVcRecordCheck;
      end;
    end;
  end;
  if (AllowedToTakeFromLocation(OYp.Location)==false) then begin
    RecordCheckError(1768,"",-1,"Location");      
    res = -1;
    goto LOYVcRecordCheck;
  end;
  if (ARAccb.DisallowNegativeTotalsonSales!=0) then begin
    if (OYp.Sum4<0) then begin
        RecordCheckError(22047,"",0,"Sum");      
      res = -1; 
      goto LOYVcRecordCheck;
    end;
  end;

  errcode = CheckRates(OYp.CurncyCode,OYp.FrRate,OYp.ToRateB1,OYp.ToRateB2,OYp.BaseRate1,OYp.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LOYVcRecordCheck;
  end;      
  if (ValidQuotationDataForVATLaw(OYp,CUr,errcode,tstr)==false) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LOYVcRecordCheck;
  end;   
  if (OYp.Rejected!=0) then begin
    if ((stat==insertmode) or (OYp.Rejected!=OY2p.Rejected)) then begin
      if (blankdate(OYp.RejectDate)) then begin
        OYp.RejectDate = CurrentDate;
      end;
    end;
  end;
  if (nonblank(OYp.SalesMan)) then begin
    errcode = CheckUsers(OYp.SalesMan,"",tstr,true);  
    if (errcode!=0) then begin
      RecordCheckError(errcode,tstr,-1,"SalesMan");      
      res = -1;
      goto LOYVcRecordCheck;
    end;      
  end;
  User.Code = CurrentUser;
  if ReadFirstMain(User,1,true) then begin 
  end;
  rwcnt = MatRowCnt(OYp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    switch (OYrw.stp) begin
      case 1:
        if (VATAccIsClosed(OYrw.VATCode,tstr,1)) then begin
          RecordCheckError(1258,tstr,i,"VATCode");      
          res = -1; 
          goto LOYVcRecordCheck;
        end;          
        if ((nonblank(OYrw.VATCode)) and (IsVATCodeDefined(OYrw.VATCode)==false)) then begin
          RecordCheckError(1120,OYrw.VATCode,i,"VATCode");      
          res = -1; 
          goto LOYVcRecordCheck;
        end;
        if (true) then begin
          if (ARAccb.DisallowNegativeRowSumsonSales!=0) then begin
            if (OYrw.Sum<0) then begin
              RecordCheckError(22047,"",i,"Sum");      
              res = -1; 
              goto LOYVcRecordCheck;
            end;
          end;
        end;
        if (nonblank(OYrw.Salesmen)) then begin    
          errcode = VerifySalesmen(OYrw.Salesmen,tstr);
          if (errcode!=0) then begin
            RecordCheckError(errcode,": " & tstr,i,"Salesmen");
            res = -1; 
            goto LOYVcRecordCheck;
          end;
        end;
        if (nonblank(OYrw.ArtCode)) then begin
          if (HasLocalization("PRT")) then begin
            if (OYrw.vRebate<0) then begin
              RecordCheckError(22034,"",i,"vRebate");      
              res = -1; 
              goto LOYVcRecordCheck;
            end;
          end;
          if (ReadFirstItem(OYrw.ArtCode,INr,true,false)==false) then begin
            RecordCheckError(1120,OYrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto LOYVcRecordCheck;
          end;
          if (!INVc_AllowSales(INr,ErrorCode)) then begin
            RecordCheckError(ErrorCode,"",i,"ArtCode");      
            res = -1; 
            goto LOYVcRecordCheck;
          end;
          if (INr.Terminated!=0) then begin
            RecordCheckError(1120,OYrw.ArtCode,i,"ArtCode");      
            res = -1; 
            goto LOYVcRecordCheck;
          end;
          if (INr.SerNrf==1) then begin
            l = OYrw.Quant;//ulong64? 
            if (OYrw.Quant-l>0) then begin
              RecordCheckError(20797,"",i,"Quant");
              res = -1;
              goto LOYVcRecordCheck;
            end;
          end;
          if (long4!=0) then begin
            if (IsRecipeClosed(INr.Recepy)) then begin
              RecordCheckError(2088,"",i,"ArtCode");      
              res = -1; 
              goto LOYVcRecordCheck;
            end;
          end;
          if (CheckAllowedSize(INr,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval)==false) then begin
            RecordCheckError(1480,OYrw.ArtCode,i,"UnitXval");      
            res = -1; 
            goto LOYVcRecordCheck;
          end;
        end;
        if (nonblank(OYrw.SalesAcc)) then begin
          Accr.AccNumber = OYrw.SalesAcc;
          if (ReadFirstMain(Accr,1,true)==false) then begin
            RecordCheckError(1931,"",i,"SalesAcc");      
            res = -1;
            goto LOYVcRecordCheck;
          end;
        end;
        VerifyRowObjects("SL",OYp.Objects,OYrw.Objects,OYrw.SalesAcc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt);        
        if (errcode!=0) then begin
          RecordCheckError(errcode,errstr,i,"Objects");      
          res = -1; 
          goto LOYVcRecordCheck;
        end;
        if (OYrw.Sum!=0) then begin
          if (nonblank(OYrw.ArtCode)) then begin
            if (UseTaxTemplatesforTaxCalc) then begin
              if (blank(OYrw.TaxTemplateCode)) then begin
                RecordCheckError(24201,"",i,"TaxTemplateCode");      
                res = -1;
                goto LOYVcRecordCheck;
              end;
              errcode = VerifyTaxTemplateCode(OYrw.TaxTemplateCode,tstr);
              if (errcode!=0) then begin
                RecordCheckError(errcode,tstr,i,"TaxTemplateCode");                
                res = -1; 
                goto LOYVcRecordCheck;
              end;
            end else begin
              if (blank(OYrw.VATCode)) then begin
                RecordCheckError(1134,"",i,"VATCode");      
                res = -1;
                goto LOYVcRecordCheck;
              end;
            end;
          end; 
          if (CorrectM4ValProc(OYrw.vRebate)==false) then begin
            RecordCheckError(1019,"",i,"vRebate");      
            res = -1; 
            goto LOYVcRecordCheck;
          end;
        end;
        tstr = User.MinPLCode;
        if (nonblank(OYrw.DiscApprovedBy)) then begin
          User2.Code = OYrw.DiscApprovedBy;
          if (ReadFirstMain(User2,1,true)) then begin
            tstr = User2.MinPLCode;
          end;
        end;
        if (OYCheckForSalesmanPrice(OYp,i,tstr,errstr)==false) then begin 
          RecordCheckError(20115,errstr,i,"Price");      
          res = -1; 
          goto LOYVcRecordCheck;
        end;  
    end;
  end;
LOYVcRecordCheck:;
  if (res!=0) then begin OYp.SerNr = oldnr; end;
  OYVcRecordCheck = res;
  return;
end;

global
updating function LongInt OYVcRecordRemove(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record ORVc ORr;
  record ORVc oldORr;

  ORr.QuoteNr = OYr.SerNr;
  if (ReadFirstKey("QuoteNr",ORr,1,true)) then begin
    RecordCopy(oldORr,ORr);
    ORr.QuoteNr = -1;
    RecordUpdate(oldORr,ORr,true);
  end;
  OYVcRecordRemove = res; 
  return;
end;

global
function LongInt OYVcRecordRemoveTest(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLockRec;
  Integer actnr;
  record ActVc Actr;
  record RLinkVc RLr;

  res = 1;
  BlockLoad(DBLockRec);
  if (OYr.OYDate<=DBLockRec.DeleteBeforeDate) then begin
    goto LOYVcRecordRemoveTest;
  end;
  actnr = 1;
  while (ReadRecordLink(OYr,actnr,Actr,RLr)) begin
    if (Actr.TodoFlag==kTodoFlagApproval) then begin
      if (long3>0) then begin MessageBox(22408,""); end;
      res = 0;
      goto LOYVcRecordRemoveTest;
    end;
    actnr = actnr + 1;
  end;  
LOYVcRecordRemoveTest:;
  OYVcRecordRemoveTest = res; 
  return;
end;

global
function LongInt OYVcRecordProtectFields(var record OYVc OYr,record OYVc OY2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row OYVc OYrw;
  row OYVc OY2rw;
  Integer rwcnt2;
  
  OYr.RegTime = OY2r.RegTime;
  rwcnt = MatRowCnt(OYr);
  rwcnt2 = MatRowCnt(OY2r);
  for (i=0;i<rwcnt2;i=i+1) begin
    if (i<rwcnt) then begin
      MatRowGet(OYr,i,OYrw);
      MatRowGet(OY2r,i,OY2rw);
      OY2rw.Invd = OYrw.Invd;
      OY2rw.Invoiced = OYrw.Invoiced;
      OY2rw.InvDate = OYrw.InvDate;
      MatRowPut(OY2r,i,OY2rw);
    end;
  end;
  OYVcRecordProtectFields = res;
  return;
end;

global
function LongInt OYVcRecordInIndex(record OYVc OYr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (OYr.Rejected!=0) then begin 
    if (indexname=="OpenQuoteClass")  then begin res = 0; end;
  end;
  if (OYr.Closed!=0) then begin 
    if (indexname=="OpenQuoteClass")  then begin res = 0; end;
  end;
  OYVcRecordInIndex = res;
  return;
end;
