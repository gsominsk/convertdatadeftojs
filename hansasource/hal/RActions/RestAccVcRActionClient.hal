external updating procedure RestAccVc_SendToSerialPortDevices(Integer,LongInt,record RestAccVc,record RestAccVc);
remote procedure RestAccVcRecordDuplicateClientRemote(var record RestAccVc,record LocalMachineBlock);
remote procedure RestAccVcRecordDefaultsClientRemote(var record RestAccVc,record LocalMachineBlock);
remote function string 255 AddBranchObjectToObjectList(string,string);
external updating procedure RecordActionRestAcc_Print(var record RestAccVc,string,string,Boolean);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);

global
function LongInt RestAccVcRecordDefaultsClient(LongInt wn,var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);  
  if (blank(RestAccr.PriceList)) then begin
    RestAccr.PriceList = LMb.PLCode;
  end;
  RestAccr.BranchID = LMb.BranchID;
  RestAccr.Class = LMb.RestAccClass;
  RestAccVcRecordDefaultsClientRemote(RestAccr,LMb);
  ReRunWindowDef(wn);
//  PutWindowRecord(wn,RestAccr);
  RestAccDClass_RefreshStringList(wn,RestAccr);
  RestAccVcRecordDefaultsClient = res;
  return;
end;

global
function LongInt RestAccVcRecordDuplicateClient(LongInt wn,var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);  
  RestAccr.BranchID = LMb.BranchID;
  RestAccr.Class = LMb.RestAccClass;
  RestAccVcRecordDuplicateClientRemote(RestAccr,LMb);
  ReRunWindowDef(wn);
  RestAccVcRecordDuplicateClient = res;
  return;
end;

global
updating function LongInt RestAccVcRecordSaveClient(LongInt wn,var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record AutoActionBlock AAb;
  Integer nwn;
  transaction Integer gTransferRestAccToKitchenOrder;

  BlockLoad(AAb);
  if (AAb.BarTabPrinting>=1) and (RestAccr.FiscalFlag==0) then begin
    gTransferRestAccToKitchenOrder = 1;
    RecordActionRestAcc_Print(RestAccr,"","RestAccKitchenForm",true);
    gTransferRestAccToKitchenOrder = 0;
    RecordActionRestAcc_Print(RestAccr,"","RestAccForm",true);
  end;
  ReRunWindowDef(wn);
  nwn = FindWindow("TableLayoutClass");
  if (nwn>0) then begin
    UpdateNamedWindow("TableLayoutClass");
  end;
  RestAccVc_SendToSerialPortDevices(kSerialPortDeviceClassFiscalPrinter,stat,RestAccr,RestAcc2r);
  RestAccVc_SendToSerialPortDevices(kSerialPortDeviceClassFiscalControlUnit,stat,RestAccr,RestAcc2r);
  res = 1;
  RestAccVcRecordSaveClient = res;
  return;
end;

global
updating function LongInt RestAccVcRecordUpdateClient(LongInt wn,var record RestAccVc RestAccr,record RestAccVc RestAcc2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record AutoActionBlock AAb;
  Integer nwn;
  transaction Integer gTransferRestAccToKitchenOrder;

  BlockLoad(AAb);
  if (RestAccr.MergedToSerNr<=0) then begin
    if (AAb.BarTabPrinting==2) and (RestAccr.FiscalFlag==0) then begin
      gTransferRestAccToKitchenOrder = 1;
      RecordActionRestAcc_Print(RestAccr,"","RestAccKitchenForm",true);
      gTransferRestAccToKitchenOrder = 0;
      RecordActionRestAcc_Print(RestAccr,"","RestAccForm",true);
    end;
    ReRunWindowDef(wn);
  end;
  nwn = FindWindow("TableLayoutClass");
  if (nwn>0) then begin
    UpdateNamedWindow("TableLayoutClass");
  end;
  RestAccVc_SendToSerialPortDevices(kSerialPortDeviceClassFiscalPrinter,stat,RestAccr,RestAcc2r);
  RestAccVc_SendToSerialPortDevices(kSerialPortDeviceClassFiscalControlUnit,stat,RestAccr,RestAcc2r);
  res = 1;
  RestAccVcRecordUpdateClient = res;
  return;
end;
