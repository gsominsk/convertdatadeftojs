external function string 60 AddObjectToObjectList(string,string);
external function val CalculateDiscountPercentage(val,val,val);
external updating procedure IVCashUpdatePOSHist(record IVCashVc,record IVCashVc);
external updating procedure IVCashStorePOSHist(record IVCashVc);
external updating function LongInt IVCashVcSVNFiscalization(Boolean,var record IVCashVc,var string);
external function Boolean CheckIfRoomPayType(string);
external updating procedure StoreInShopBask(Integer,LongInt,String,String,Val,Val,Val,String,String,LongInt,String,Boolean,string,string,longint,string,val,val,val,val,val);
external procedure GetINName(string,var string);
external updating procedure DeleteShopBask(string,LongInt);
external function Boolean TestBarTabAllowedForHotelGuest(string,record JobVc);
external function val FindVAT(string,val,Integer,Integer);
external updating procedure IVCashUpdateCashupHist(record IVCashVc);
external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external function string 255 StripCharacter(string,string);
external function Boolean IsCapitalLetter(string); 
external function Boolean IsDigit(string);
external function Boolean IsPostcodeFormatCorrect(string);
external updating function Boolean DoXMLExport_IVCashVc(var record IVCashVc);
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external updating procedure CustStatUp(string,LongInt,string,string,string,string,string,Date,val,val,val,val,val,val,Boolean);
external updating procedure SalesmanStats_IVCashVc(record IVCashVc,record IVCashVc,Boolean);
external function string 255 AddBranchObjectToObjectList(string,string);
external function Integer VerifyTaxTemplateCode(string,var string);
external function Boolean CustomerCanGetCredit(string,val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean CustomerCanUseLoyaltyCard(string,var Boolean);
external function Boolean TestNextOfficialSerialNr_IVCashVc(row LegalInvNrBlock,string,record IVCashVc,Boolean);
external function Boolean ValidateOfficialSerialNrChronology(string,string,LongInt,Date,var Date);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external function Integer IsUnOKAllowed_IVCashVc(record IVCashVc);
external procedure FindNextIVCashVcOfficialSerialNr(var record IVCashVc);
external function Integer InString2(string,string);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external updating procedure IVCashVc_LoyaltyCardPointsRedemption(record IVCashVc,Boolean);
external procedure TaxMatrixConvertB1ToB2(record TaxMatrixVc,var val,var val,var val,var val);
external updating procedure DeletePointsHist(LongInt,string);
external updating procedure AddPointsHist(LongInt,string,integer);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Integer CheckRowPayMode(string,Integer,string,val);
external procedure RemoveOldCustObjects(string,var string);
external updating procedure IVCashUpdateItemHist(record IVCashVc,Integer);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure IVCashUpdateSerialNr(record IVCashVc);
external function Boolean POSBalanceExistsAfterThis(Date,Time,string,string);
external function Integer CheckRates(string,val,val,val,val,val,var string);
external function string 255 CurDrawerCode(string);
external function Boolean RequireOpenSession(string);
external function Boolean IsSessionOpen(string,string,Date,Time);
external function string 255 GetObjectFromRestIT(string);
external function LongInt IVCashNrFromLastSerNrBlock(string);
external function Integer GetPOSOffLineCompNo();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external updating procedure ArtStatUp2(string,string,string,string,Date,val,val,val,val,Boolean,val,val,val,val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
external function Boolean ShouldItemUpdateStock(string);
external function Boolean IsSerialNrCorrect(string);
external updating function val NextLocOKNr(string);
external procedure SwapM4Val(var val,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure IVCashSumup(var record IVCashVc,Boolean);
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure IVCashUpdateFIFO(record IVCashVc,Boolean);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external function Boolean IsControlAccount(string,Boolean,Boolean);
external function Integer CheckObjs(string,string,var string);
external function Boolean CorrectM4ValProc(val);
external function Boolean IsVATCodeDefined(string);
external function Boolean SerialNrAvail(string,string,string,val);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external function Boolean VATAccIsClosed(string,var string,Integer);
external function Integer CheckVATNrMask(string,string,Integer,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestIVCashVc(LongInt,Date,var Boolean);
external function LongInt GetCurUserLastNr(string);
external procedure GetCurUser(var record UserVc);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure GetBaseCurncy(Integer,var string);
external function Boolean PasteCustInCashInv(var record IVCashVc,string,string,var string);

// This function is actually not used, but prepared to be and is used by customisation

global
function LongInt IVCashVcRecordDefaults(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record AccBlock ARAccRec;
  record CashierDefBlock CashDefRec;
  record UserVc USr;
  Date blankd,curdate;
  val frrate,to1,to2,br1,br2;
  string 5 curcode;
  record LocalOffLineNrBlock LastRecNr;
  LongInt newnr;
  string 255 tstr,warning;
  record SRBlock SRb;  
  Boolean gentrans;
  
  curdate = CurrentDate;
  BlockLoad(ARAccRec);  
  BlockLoad(CashDefRec);  
  IVCashr.SerNr = -1;
  IVCashr.ARonTR = ARAccRec.ARonTR;
  IVCashr.TransTime = CurrentTime;
  IVCashr.StartTime = CurrentTime;
  IVCashr.InvDate = curdate;
  IVCashr.TransDate = curdate;
  IVCashr.PayDate = blankd;
  IVCashr.CustCat = "";
  IVCashr.Prntdf = 0;
  IVCashr.OKFlag = 0;
  IVCashr.NLFlag = 0;
  IVCashr.Suspended = 0;
  IVCashr.ExportedFlag = 0;
  IVCashr.InclVAT = ARAccRec.BasePriceInclVAT;
  IVCashr.NoTAXonVAT = ARAccRec.NoTAXonVAT;
  IVCashr.TotalwoTAX = ARAccRec.TotalwoTAX;
  IVCashr.ARAcc = ARAccRec.ARAcc;
  IVCashr.PriceList = "";
  IVCashr.PayDeal = "";
  IVCashr.Objects = "";
  GetCurUser(USr);
  IVCashr.Objects = USr.PersObjx;
  IVCashr.InvComment = "";
  IVCashr.CurncyCode = "";
  IVCashr.CustCode = CashDefRec.DefCustCode;
  if (PasteCustInCashInv(IVCashr,"","",warning)) then begin end;
  
  if (IsDoingManagerOverride) then begin
    IVCashr.SalesMan = OriginalLogin;
  end else begin
    IVCashr.SalesMan = CurrentUser;
  end;
  
  if (ServingClient==false) then begin//offline
    BlockLoad(LastRecNr);
    
    newnr = LastRecNr.LastIVCashNr;
    IVCashr.SerNr = NextSerNr("IVCashVc",IVCashr.TransDate,newnr,false,IVCashr.LangCode);
    if (IVCashr.SerNr<=LastRecNr.LastIVCashNr) then begin
      IVCashr.SerNr = LastRecNr.LastIVCashNr + 1;
    end;
    if (SerNrTestIVCashVc(IVCashr.SerNr,IVCashr.TransDate,gentrans)==false) then begin
      BlockLoad(SRb);  
      newnr = GetCurUserLastNr("IVCashVc");
      if (newnr==-1) then begin
        newnr = SRb.LastIVCashNr;
      end;
      IVCashr.SerNr = NextSerNr("IVCashVc",IVCashr.TransDate,newnr,false,IVCashr.LangCode);
    end;
  end;
  curcode = IVCashr.CurncyCode;
  GetFullCurncyRate(curcode,curdate,frrate,to1,to2,br1,br2);
  IVCashr.CurncyCode = curcode;
  IVCashr.FrRate = frrate;
  IVCashr.ToRateB1 = to1;
  IVCashr.ToRateB2 = to2;
  IVCashr.BaseRate1 = br1;
  IVCashr.BaseRate2 = br2;
  IVCashr.OurContact = USr.CurOurContact;
  if (nonblank(USr.Location)) then begin
    IVCashr.Location = USr.Location;
  end;
  IVCashr.Sum0 = blankval;
  IVCashr.Sum1 = blankval;
  IVCashr.Sum2 = blankval;
  IVCashr.Sum3 = blankval;
  IVCashr.Sum4 = blankval;
  IVCashr.TotGP = blankval;
  IVCashr.RecValue = blankval;
  IVCashr.RetValue = blankval;  
  IVCashr.CashValue = blankval;
  if (ProgramType==typOffLine) then begin
    IVCashr.UpdStockFlag = 0;
  end else begin
    IVCashr.UpdStockFlag = 0;
//    IVCashr.UpdStockFlag = ARAccRec.InvUpdStock;//not supported anymore
  end;
  IVCashr.BaseSum4 = blankval;
  IVCashr.TotQty = blankval;
  IVCashr.TotWeight = blankval;
  IVCashr.TotVolume = blankval;    
  IVCashr.RecValue2 = blankval;    
  IVCashr.CashValueB2 = blankval;    
  IVCashr.RetValueB2 = blankval;    
  IVCashr.CashValueCur = blankval;    
  IVCashr.RetValueCur = blankval;
  IVCashr.TendValue = blankval;  
  GetBaseCurncy(2,curcode);
  IVCashr.POSCurncyCode = curcode;    
  IVCashr.AuthorizationCode = "";
  IVCashr.Invalid = 0;
  IVCashr.OrderNr = -1;
//  IVCashr.LocalMachineCode = LocalMachineRec.LocalMachineCode;not working in client-server
  IVCashr.TerminalID = CurTerminalID;
  IVCashr.BranchID = CurBranchID;
  IVCashr.Objects = AddObjectToObjectList(IVCashr.Objects,GetObjectFromRestIT(IVCashr.LocalMachineCode));        
  IVCashr.OfficialSerNr = "";
  IVCashr.OfficialSerNr2 = "";
  IVCashr.FiscalDeviceSeqNr = -1;
  IVCashr.LocalMachineCode = CurMachineName;
  IVCashr.DrawerCode = CurDrawerCode(IVCashr.LocalMachineCode);
  IVCashVcRecordDefaults = res;  
  return;
end;

global
procedure IVCashVcRecordDefaultsClientRemote(var record IVCashVc IVCashr,record LocalMachineBlock LMb)
begin
  string 255 warning,tstr;
  record DefCashBlock DCb;

  BlockLoad(DCb);  
  if (nonblank(LMb.DefCustCode)) then begin
    tstr = IVCashr.Objects;
    RemoveOldCustObjects(IVCashr.CustCode,tstr);
    IVCashr.Objects = tstr;

    IVCashr.CustCode = LMb.DefCustCode;
    if (PasteCustInCashInv(IVCashr,"","",warning)) then begin end;
    if (IsDoingManagerOverride) then begin
      IVCashr.SalesMan = OriginalLogin;
    end else begin
      IVCashr.SalesMan = CurrentUser;
    end;
  end;
/*  
  if (blank(IVCashr.CustCode)) then begin
    BlockLoad(CashDefRec);
    IVr.CustCode = CashDefRec.DefCustCode;
  end;
*/  
  if (blank(IVCashr.Location)) then begin
    IVCashr.Location = LMb.DefLocation;
  end;
  IVCashr.BranchID = LMb.BranchID;
  IVCashr.Objects = AddBranchObjectToObjectList(LMb.BranchID,IVCashr.Objects);
  IVCashr.Objects = AddObjectToObjectList(IVCashr.Objects,GetObjectFromRestIT(LMb.LocalMachineCode));        
  if (blank(IVCashr.PriceList)) then begin
    IVCashr.PriceList = LMb.PLCode;
  end;
  IVCashr.PayDeal = DCb.DefCCPayMode;
  if (LMb.DefaulBaggerSupervisor!=0) then begin
    IVCashr.Bagger = LMb.Bagger;
    IVCashr.Supervisor = LMb.Supervisor;
  end;
  return;
end;

global
function LongInt IVCashVcRecordDuplicate(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record CashierDefBlock CashDefRec;
  record AccBlock ARAccRec;
  record UserVc USr;
  val frrate,to1,to2,br1,br2;
  string 5 curcode;
  Date curdate;
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  record LocalOffLineNrBlock LastRecNr;
  LongInt newnr;
  string 255 tstr;
  record SRBlock SRb;  
  Boolean gentrans;
  record CUVc CUr;
  
  BlockLoad(ARAccRec);  
  BlockLoad(CashDefRec);  
  curdate = CurrentDate;
  IVCashr.SerNr = -1;
  IVCashr.SDNr = -1;
  IVCashr.PUNr = -1;
  IVCashr.POSNr = CashDefRec.POSNr;
  IVCashr.TransTime = CurrentTime;
  IVCashr.StartTime = CurrentTime;
  IVCashr.InvDate = curdate;
  IVCashr.TransDate = curdate;
  if (ServingClient==false) then begin//offline
    BlockLoad(LastRecNr);
    
    newnr = LastRecNr.LastIVCashNr;
    IVCashr.SerNr = NextSerNr("IVCashVc",IVCashr.TransDate,newnr,false,IVCashr.LangCode);
    if (IVCashr.SerNr<=LastRecNr.LastIVCashNr) then begin
      IVCashr.SerNr = LastRecNr.LastIVCashNr + 1;
    end;
    if (SerNrTestIVCashVc(IVCashr.SerNr,IVCashr.TransDate,gentrans)==false) then begin
      BlockLoad(SRb);  
      newnr = GetCurUserLastNr("IVCashVc");
      if (newnr==-1) then begin
        newnr = SRb.LastIVCashNr;
      end;
      IVCashr.SerNr = NextSerNr("IVCashVc",IVCashr.TransDate,newnr,false,IVCashr.LangCode);
    end;
  end;
  IVCashr.Prntdf = 0;
  IVCashr.OKFlag = 0;
  IVCashr.NLFlag = 0;
  IVCashr.ExportedFlag = 0;
  IVCashr.Suspended = 0;
  GetCurUser(USr);
  IVCashr.OurContact = USr.CurOurContact;
  if (nonblank(USr.Location)) then begin
    IVCashr.Location = USr.Location;
  end;
  IVCashr.RefStr = "";
  GetFullCurncyRate(curcode,curdate,frrate,to1,to2,br1,br2);
  IVCashr.CurncyCode = curcode;
  IVCashr.FrRate = frrate;
  IVCashr.ToRateB1 = to1;
  IVCashr.ToRateB2 = to2;
  IVCashr.BaseRate1 = br1;
  IVCashr.BaseRate2 = br2;
  
  if (IsDoingManagerOverride) then begin
    IVCashr.SalesMan = OriginalLogin;
  end else begin
    IVCashr.SalesMan = CurrentUser;
  end;
  
  IVCashr.RecValue = blankval;
  IVCashr.RetValue = blankval;  
  IVCashr.TendValue = blankval;  
  IVCashr.CashValue = blankval;
  if (ProgramType==typOffLine) then begin
    IVCashr.UpdStockFlag = 0;
  end else begin
    IVCashr.UpdStockFlag = 0;
//    IVCashr.UpdStockFlag = ARAccRec.InvUpdStock; not supported any more
  end;
  IVCashr.RecValue = blankval;    
  IVCashr.RecValue2 = blankval;    
  IVCashr.CashValueB2 = blankval;    
  IVCashr.RetValueB2 = blankval;    
  IVCashr.CashValueCur = blankval;    
  IVCashr.RetValueCur = blankval;
  GetBaseCurncy(2,curcode);
  IVCashr.POSCurncyCode = curcode;    
  IVCashr.AuthorizationCode = "";
  IVCashr.Invalid = 0;
  IVCashr.LocOKNr = blankval;
  IVCashr.OrderNr = -1;
  IVCashr.AuthorizationCode = "";
  IVCashr.AuthorizationCode2 = "";
  IVCashr.FiscalFlag = 0;
  IVCashr.Invalid = 0;
  IVCashr.InvalidDate = "";
  IVCashr.InvalidTime = "";
  IVCashr.InvalidBy = "";
  IVCashr.TaxAdminServSeal = "";
  CUr.Code = IVCashr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  if (HasLocalization("POL")) then begin
    switch (CUr.IPBookVAT) begin
      case 1:
        IVCashr.IPBookVAT = CUr.IPBookVAT;
      case 2:
        IVCashr.IPBookVAT = 0;
      otherwise
        IVCashr.IPBookVAT = ARAccRec.IPBookVAT;
    end;
  end else begin
    IVCashr.IPBookVAT = ARAccRec.IPBookVAT;  
  end;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeVoid:    
        MatRowDelete(IVCashr,i);
        i = i-1;
        MatRowDelete(IVCashr,IVCashrw.VoidedRowNr);
        i = i-1;
      case kInvoiceRowTypeOnAccountPayment:    
        MatRowDelete(IVCashr,i);
        i = i-1;
      case kInvoiceRowTypeGiftVoucherPayment:    
        MatRowDelete(IVCashr,i);
        i = i-1;
      case kInvoiceRowTypeLoyaltyPointsPayment:    
        MatRowDelete(IVCashr,i);
        i = i-1;
      case kInvoiceRowTypeCashPayment:    
        MatRowDelete(IVCashr,i);
        i = i-1;
      case kInvoiceRowTypeCreditCardPayment:    
        MatRowDelete(IVCashr,i);
        i = i-1;
      otherwise
        IVCashrw.FIFO = blankval;
        IVCashrw.FIFORowVal = blankval;
        IVCashrw.DownPaidSum = blankval;
        IVCashrw.OrdQuant = blankval;
        IVCashrw.OrdRow = -1;
        MatRowPut(IVCashr,i,IVCashrw);
    end;
  end;  
  IVCashSumup(IVCashr,true);
  IVCashr.OfficialSerNr = "";
  IVCashr.OfficialSerNr2 = "";
  IVCashr.LocalMachineCode = CurMachineName;
  IVCashr.DrawerCode = CurDrawerCode(IVCashr.LocalMachineCode);
  IVCashr.TerminalID = CurTerminalID;
  IVCashr.BranchID = CurBranchID;
  IVCashr.Objects = AddObjectToObjectList(IVCashr.Objects,GetObjectFromRestIT(IVCashr.LocalMachineCode));        
  IVCashr.FiscalDeviceSeqNr = -1;
  IVCashr.LoyaltyCardNr = "";
  IVCashr.LCMLevel = "";
  IVCashr.Points = 0;
  IVCashr.Hash = "";
  IVCashr.HashKeyVersion = 0;  
  IVCashVcRecordDuplicate = res;  
  return;
end;

function Boolean ValidIVCashDataForVATLaw_Portuguese(record IVCashVc IVCashr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  Boolean testf;
  record CountryVc Countryr;
  
  res = true;
  if (blank(IVCashr.VATNr)) then begin
    errcode = 20275;
    gotofield = "VATNr";
    res = false;
    goto LValidIVCashDataForVATLaw_Portuguese;
  end;
  if (IVCashr.VATNr!="999999990") then begin
    testf = false;
    if (blank(IVCashr.Addr1) and blank(IVCashr.Addr2)) then begin
      gotofield = "Addr1";
      testf = true;
    end;
    if (blank(IVCashr.Addr3)) then begin
      gotofield = "Addr3";
      testf = true;
    end;
    if (blank(IVCashr.InvAddr3)) then begin
      gotofield = "InvAddr3";
      testf = true;
    end;
    if (blank(IVCashr.InvAddr4)) then begin
      gotofield = "InvAddr4";
      testf = true;
    end;
    if (testf) then begin
      errcode = 20276;
      res = false;
      goto LValidIVCashDataForVATLaw_Portuguese;
    end;
  end;
  if (nonblank(IVCashr.InvAddr4)) then begin
    Countryr.Comment = IVCashr.InvAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)==false) then begin
      errcode = 20277;
      res = false;
      gotofield = "InvAddr4";
      goto LValidIVCashDataForVATLaw_Portuguese;
    end;
  end;
  if (blank(IVCashr.InvAddr4)) or (IVCashr.InvAddr4=="Portugal") then begin
    if (nonblank(IVCashr.Addr3)) then begin
      if (IsPostcodeFormatCorrect(IVCashr.Addr3)==false) then begin
        errcode = 24620;
        res = false;
        gotofield = "Addr3";
        goto LValidIVCashDataForVATLaw_Portuguese;
      end;
    end;
  end;
LValidIVCashDataForVATLaw_Portuguese:;  
  ValidIVCashDataForVATLaw_Portuguese = res;
  return;
end;

function Boolean ValidIVCashDataForVATLaw(record IVCashVc IVCashr,var Integer errcode,var string gotofield)
begin
  Boolean res;
  
  res = true;
  if (HasLocalization("PRT")) then begin
    res = ValidIVCashDataForVATLaw_Portuguese(IVCashr,errcode,gotofield);
  end;
LValidIVCashDataForVATLaw:;  
  ValidIVCashDataForVATLaw = res;
  return;
end;

function Boolean IVCashVcGiftCertificateCheck(record IVCashVc IVCashr,Integer rownr,row IVCashVc IVCashrw,Integer stp,var val gcval)
begin
  Boolean res;
  record GCVc GCr;
  record GCSVc GCSr;
  record GCRVc GCRr;
  
  res = true;
  switch (stp) begin
    case kInvoiceRowTypeGiftVoucherSold:
      GCr.SerNr = IVCashrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin
        if (GCr.OKFlag==0) then begin
          RecordCheckError(2187,"",rownr,"GCNr");      
          res = false;
          goto LIVCashVcGiftCertificateCheck;
        end;
        if (IVCashr.InvDate>GCr.ExpiryDate) then begin
          RecordCheckError(2185,"",rownr,"GCNr");      
          res = false;
          goto LIVCashVcGiftCertificateCheck;
        end;
        GCSr.SerNr = IVCashrw.GCNr;
        if (ReadFirstMain(GCSr,1,true)) then begin
          RecordCheckError(2186,"",rownr,"GCNr");      
          res = false;
          goto LIVCashVcGiftCertificateCheck;
        end;
        if (IVCashrw.Sum!=GCr.Amount) then begin
          RecordCheckError(1210,"",rownr,"Sum");      
          res = false;
          goto LIVCashVcGiftCertificateCheck;
        end;
      end else begin
        RecordCheckError(2184,"",rownr,"GCNr");      
        res = false;
        goto LIVCashVcGiftCertificateCheck;
      end;
      gcval = gcval + IVCashrw.Sum;
    case kInvoiceRowTypeGiftVoucherPayment:
      GCSr.SerNr = IVCashrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin
        if (GCSr.Closed!=0) or (GCSr.Balance<=0) then begin
          RecordCheckError(2189,"",rownr,"GCNr");      
          res = false;
          goto LIVCashVcGiftCertificateCheck;
        end;
        if (IVCashrw.Sum>GCSr.Balance) then begin
          RecordCheckError(1210,"",rownr,"Sum");      
          res = false;
          goto LIVCashVcGiftCertificateCheck;
        end;
      end else begin
        RecordCheckError(2188,"",rownr,"GCNr");      
        res = false;
        goto LIVCashVcGiftCertificateCheck;
      end;
      gcval = gcval + IVCashrw.Sum;
  end;
LIVCashVcGiftCertificateCheck:;
  IVCashVcGiftCertificateCheck = res;
  return;
end;

function LongInt IVCashVc_CheckRowTypeGiftVoucherPayment(record IVCashVc IVCashr,row IVCashVc IVCashrw,Integer i)
begin
  LongInt res;
  row IVCashVc IVCash2rw;
  Integer j;
  val gcvalr;  

  res = 0;
  if (IVCashVcGiftCertificateCheck(IVCashr,i,IVCashrw,kInvoiceRowTypeGiftVoucherPayment,gcvalr)==false) then begin
    res = -1;
    goto LIVCashVc_CheckRowTypeGiftVoucherPayment;
  end;
  for (j=0;j<i;j=j+1) begin
    MatRowGet(IVCashr,j,IVCash2rw);
    if (IVCashrw.stp==IVCash2rw.stp) then begin
      if (IVCashrw.GCNr==IVCash2rw.GCNr) then begin
        RecordCheckError(2188,"",i,"GCNr");      
        res = -1;
        goto LIVCashVc_CheckRowTypeGiftVoucherPayment;
      end;
    end;
  end;
LIVCashVc_CheckRowTypeGiftVoucherPayment:;  
  IVCashVc_CheckRowTypeGiftVoucherPayment = res;
  return;
end;

function LongInt ValidateIVCashVcSVNFiscalization(record IVCashVc IVCashr,var string errstr,var string fieldname)
begin
  LongInt res;
  record CYABlock CYAb;
  record UserVc Userr;
  record CUVc ContactCUr;
  
  res = 0;
  BlockLoad(CYAb);    
  if (blank(CYAb.MainPremiseCode)) then begin
    res = 21479;
    fieldname = "LocalMachineCode";
  end;
  if (blank(IVCashr.LocalMachineCode)) then begin
    res = 21478;
    fieldname = "LocalMachineCode";
  end;
  Userr.Code = IVCashr.SalesMan;
  ReadFirstMain(Userr,1,true);
  ContactCUr.Code = Userr.CustCode;
  ReadFirstMain(ContactCUr,1,true);
  if (blank(ContactCUr.VATNr)) then begin
    res = 21477;
    fieldname = "SalesMan";
  end;
  ValidateIVCashVcSVNFiscalization = res;
  return;
end;

global
updating function LongInt IVCashVcRecordCheck(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;  
  record CreditLimitBlock CLb; 
  record MainStockBlock MSb;  
  record AccBlock ARAccRec;  
  record SRBlock SRb;  
  record CashierDefBlock CDb;
  record CYBlock CYb;
  record CUVc CUr;
  record INVc INr;
  record ItemStatusVc ISr;  
  record SHVc recSHr;
  record AccVc Accr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  row SHVc SHrw2;
  row IVCashVc IVCashrw;
  row IVCashVc IVCash2rw;  
  record IVCashVc locIVCashr;
  Integer i,rwcnt,j,rwcnt2,cnt; 
  LongInt newnr,oldnr;
  Boolean gentrans,testf,transf,unokf;
  val limit,bal,quant,prev,cash;
  string 255 tstr,tstr2,errstr,oldOfficialSerNr,c;
  string 10 location;
  Boolean isstruct;  
  Boolean check;
  Integer insertmode,updatemode;
  Integer errcode;
  LongInt sernr;
  record LocalOffLineNrBlock LastRecNr;
  Integer positivef;
  record UserVc User;
  val discountprice,price,vreb,baseprice,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcpricef,dummyf;
  record LoyaltyCardVc LCr;
  Boolean test2f,remoteconnection;
  LongInt l,dummyl;
  Date td;
  Integer programmode;
  record ACPVc ACPr;
  record HotelBlock Hotelb;
  record JobVc Jobr;

  programmode = CompanyProgramMode;
  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = IVCashr.SerNr;
  oldOfficialSerNr = IVCashr.OfficialSerNr;
  if (IVCashr.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (IVCash2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_IVCashVc(IVCashr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"TransDate");      
      res = -1; 
    end;
    goto LIVCashVcRecordCheck;
  end;
  transf = false;
  if (IVCashr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (IVCash2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (stat==updatemode) then begin
    if (IVCashr.SerNr<=0) and (IVCash2r.OKFlag==0) then begin
      IVCashr.SerNr = IVCash2r.SerNr;
    end;
  end; 
  BlockLoad(CDb);
  if (CDb.NoChangesPOSOnLiveSyncClient!=0) then begin
    if (ServingClient) then begin
      if (programmode!=kProgramModeLiveSync) then begin
        if (IVCashr.OKFlag==0) then begin
          RecordCheckError(1758,"",-1,"SerNr");      
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
      end;
    end else begin
      if (programmode==kProgramModeLiveSync) then begin
        if (stat==Rs_update) then begin
          if (IVCash2r.OKFlag!=0) then begin
            RecordCheckError(1758,"",-1,"SerNr");      
            res = -1;
            goto LIVCashVcRecordCheck;
          end;
        end;
      end;
    end;
  end;
  if (CDb.RequireReturnReason!=0) then begin
    if (IVCashr.OKFlag!=0) and (IVCashr.Sum4<0) then begin
      if (blank(IVCashr.InvComment)) then begin
        RecordCheckError(21350,"",-1,"InvComment");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
    end;
  end;
/*  
u might want to put loyalty card or bagger 1st

  if (CompanyProgramMode==kProgramModeLiveSync) then begin
    if (MatRowCnt(IVCashr)==0) then begin
      RecordCheckError(1796,"",-1,"SerNr");      
      res = -1;
      goto LIVCashVcRecordCheck;
    end;
  end;
*/  
  BlockLoad(CLb);
  BlockLoad(MSb);
  BlockLoad(ARAccRec);  
  BlockLoad(SRb);  
  BlockLoad(CYb);
  if (IVCashr.OKFlag==0) then begin
    IVCashr.TransTime = CurrentTime;
  end;
  
  if (stat==updatemode) then begin
    if (IVCash2r.OKFlag==0) then begin
      if (IsDoingManagerOverride) then begin
//        IVCashr.SalesMan = OriginalLogin; //why would u want to store Manger overriding as salesman ? 
      end else begin
        if (blank(IVCashr.SalesMan)) then begin
          IVCashr.SalesMan = CurrentUser;
        end;
        IVCashr.LocalMachineCode = CurMachineName;
        IVCashr.DrawerCode = CurDrawerCode(IVCashr.LocalMachineCode);
        IVCashr.BranchID = CurBranchID;
        IVCashr.TerminalID = CurTerminalID;
      end;
    end;
  end;
  if (RequireOpenSession(IVCashr.LocalMachineCode)) then begin
    if (IVCashr.OKFlag==0) then begin
      IVCashr.TransDate = CurrentDate;
    end;
    if (IsSessionOpen(IVCashr.LocalMachineCode,IVCashr.DrawerCode,IVCashr.TransDate,IVCashr.TransTime)==false) then begin
      RecordCheckError(2195,"",-1,"SerNr");      
      res = -1;
      goto LIVCashVcRecordCheck;
    end;
  end;
  if (CLb.IVSave==1) then begin  
    if (IVCashr.TransferToSL!=0) then begin
      remoteconnection = CustomerCanGetCredit(IVCashr.CustCode,IVCashr.Sum4,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,testf);
      if (remoteconnection==false) then begin
        RecordCheckError(27580,"",-1,"CustCode");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end else begin
        if (testf==false) then begin
          RecordCheckError(1164,"",-1,"CustCode");      
          res = -1;
          goto LIVCashVcRecordCheck;
        end;    
      end;
    end;
  end;
  if (IVCashr.SerNr<=0) then begin
    newnr = GetCurUserLastNr("IVCashVc");
    if (newnr==-1) then begin
      newnr = SRb.LastIVCashNr;
    end;
    if (ServingClient) then begin//online only
      if (programmode!=kProgramModeLiveSync) then begin
        if (GetPOSOffLineCompNo>0) then begin
          if (blank(IVCashr.LocalMachineCode)) then begin
            RecordCheckError(1770,"",-1,"LocalMachineCode");      
            res = -1;
            goto LIVCashVcRecordCheck;
          end;
          newnr = IVCashNrFromLastSerNrBlock(IVCashr.LocalMachineCode);
        end;
      end;
    end;    
    IVCashr.SerNr = NextSerNr("IVCashVc",IVCashr.TransDate,newnr,false,IVCashr.LangCode);
  end;
  switch (stat) begin
    case Rs_insert:
      locIVCashr.SerNr = IVCashr.SerNr;    
      if (ReadFirstMain(locIVCashr,1,true)) then begin
        RecordCheckError(1115,"",-1,"SerNr");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
    case Rs_update:
      if (IVCashr.SerNr!=IVCash2r.SerNr) then begin
        locIVCashr.SerNr = IVCashr.SerNr;    
        if (ReadFirstMain(locIVCashr,1,true)) then begin
          RecordCheckError(1115,"",-1,"SerNr");      
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
      end;
  end;
  if (stat==Rs_insert) then begin
    if (ServingClient==false) then begin//offline only
      BlockLoad(LastRecNr);//from client DB
      if (LastRecNr.LastIVCashNr>0) then begin
        if (IVCashr.SerNr<=LastRecNr.LastIVCashNr) then begin
          IVCashr.SerNr = LastRecNr.LastIVCashNr + 1;
        end;
      end;
      if (SerNrTestIVCashVc(IVCashr.SerNr,IVCashr.TransDate,gentrans)==false) then begin
        newnr = GetCurUserLastNr("IVCashVc");
        if (newnr==-1) then begin
          newnr = SRb.LastIVCashNr;
        end;
        IVCashr.SerNr = NextSerNr("IVCashVc",IVCashr.TransDate,newnr,false,IVCashr.LangCode);
      end;
    end; 
  end;
  if (SerNrTestIVCashVc(IVCashr.SerNr,IVCashr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,". " & USetStr(1744),-1,"SerNr");      
    res = -1; 
    goto LIVCashVcRecordCheck;
  end;
  switch (stat) begin
    case Rs_update:
      if (IVCashr.OKFlag!=0) and (IVCash2r.OKFlag==0) then begin
        IVCashr.RegDate = CurrentDate;
        IVCashr.RegTime = CurrentTime;
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        IVCashr.RegDate = CurrentDate;
        IVCashr.RegTime = CurrentTime;
      end;
  end;  
  if (IVCashr.UpdStockFlag==1) then begin
    if (MSb.requireLocation!=0) then begin
      if (blank(IVCashr.Location)) then begin
        RecordCheckError(1058,IVCashr.Location,-1,"Location");      
        goto LIVCashVcRecordCheck;
      end;
    end;
  end;
  if (Date2Test("IVCashVc",IVCashr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LIVCashVcRecordCheck;
  end;
  if (Date2Test("IVCashVc",IVCashr.InvDate,"InvDate",-1)==false) then begin
    res = -1;
    goto LIVCashVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,IVCashr.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LIVCashVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,IVCashr.InvDate,"InvDate",-1)) then begin
    res = -1;
    goto LIVCashVcRecordCheck;
  end;
  errcode = CheckRates(IVCashr.CurncyCode,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,"",-1,tstr);      
    res = -1; 
    goto LIVCashVcRecordCheck;
  end;
  if (IVCashr.OKFlag!=0 and IVCash2r.OKFlag==0) then begin
    if (ValidIVCashDataForVATLaw(IVCashr,errcode,tstr)==false) then begin
      RecordCheckError(errcode,"",-1,tstr);      
      res = -1; 
      goto LIVCashVcRecordCheck;
    end;   
  end;
  if (IVCashr.RecValue!=0) then begin
    if (blank(IVCashr.PayDeal)) then begin
      RecordCheckError(1207,"",-1,"PayDeal");      
      res = -1; 
      goto LIVCashVcRecordCheck;
    end;
  end;
  if (IVCashr.RecValue2!=0) then begin
    if (blank(IVCashr.PayDeal2)) then begin
      RecordCheckError(1207,"",-1,"PayDeal");      
      res = -1; 
      goto LIVCashVcRecordCheck;
    end;
  end;
  if (blank(IVCashr.CustCode)) then begin
    RecordCheckError(1125,"",-1,"CustCode");      
    res = -1; 
    goto LIVCashVcRecordCheck;
  end;
  CUr.Code = IVCashr.CustCode;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    RecordCheckError(1120,IVCashr.CustCode,-1,"CustCode");      
    res = -1; 
    goto LIVCashVcRecordCheck;
  end;
  if (CUr.blockedFlag!=0) then begin
    RecordCheckError(1265,IVCashr.CustCode,-1,"CustCode");      
    res = -1; 
    goto LIVCashVcRecordCheck;
  end;
  if (CUr.OnHoldFlag!=0) then begin
    RecordCheckError(1300,IVCashr.CustCode,-1,"CustCode");      
    res = -1;
    goto LIVCashVcRecordCheck;
  end;  


  if (nonblank(IVCashr.LoyaltyCardNr)) then begin
    LCr.SerNr = IVCashr.LoyaltyCardNr;
    if (ReadFirstMain(LCr,1,true)==false) then begin
      RecordCheckError(26435,"",-1,"LoyaltyCardNr");      
      res = -1; 
      goto LIVCashVcRecordCheck;
    end;
    if (LCr.Closed!=0) then begin
      RecordCheckError(26435,"",-1,"LoyaltyCardNr");      
      res = -1; 
      goto LIVCashVcRecordCheck;
    end;

    remoteconnection = CustomerCanUseLoyaltyCard(IVCashr.CustCode,testf);
    if (remoteconnection==false) then begin
      RecordCheckError(27581,"",-1,"CustCode");
      res = -1;
      goto LIVCashVcRecordCheck;
    end else begin
/*    
      if (testf==false) then begin
        RecordCheckError(1164,"",-1,"CustCode");
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
*/      
    end;

  end;
  if (transf) then begin
    if (ARAccRec.DisallowNegativeTotalsonSales!=0) then begin
      if (IVCashr.Sum4<0) then begin
        RecordCheckError(22047,"",0,"Sum");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
    end;
  end;
  errcode = CheckVATNrMask(IVCashr.VATNr,CUr.CountryCode,CUr.CustType,tstr);
  if (errcode!=0) then begin
    RecordCheckError(errcode,tstr,-1,"VATNr");      
    res = -1; 
    goto LIVCashVcRecordCheck;
  end;
  if (nonblank(IVCashr.Resource)) then begin    
    BlockLoad(Hotelb);
    Jobr.ResStatus = Hotelb.ChInSt;
    Jobr.ResCode = IVCashr.Resource;
    if (ReadLastKey("ResCodeStatus",Jobr,2,true)==false) then  begin
      RecordCheckError(2022,IVCashr.Resource,-1,"Resource");      
      res = -1;
      goto LIVCashVcRecordCheck;
    end;
    if (blank(IVCashr.CustCode)) then begin
      RecordCheckError(2024,"",-1,"CustCode");      
      res = -1;
      goto LIVCashVcRecordCheck;
    end;
/*  
    if (Restb.AllowBarTabwoGuest!=0) then begin
      if (blank(IVCashr.GuestCode)) then begin
        RecordCheckError(2024,"",-1,"GuestCode");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
      if (TestBarTabAllowedForHotelGuest(IVCashr.GuestCode,Jobr)==false) then begin
        RecordCheckError(2026,"",-1,"GuestCode");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
    end;
*/    
  end;
  if (POSBalanceExistsAfterThis(IVCashr.TransDate,IVCashr.TransTime,IVCashr.LocalMachineCode,IVCashr.DrawerCode)) then begin
    RecordCheckError(2194,"",-1,"TransDate");      
    res = -1;
    goto LIVCashVcRecordCheck;
  end;
  rwcnt = MatRowCnt(IVCashr);
  if ((IVCashr.OKFlag==1) and (rwcnt==0)) then begin
    RecordCheckError(1030,"",0,"ArtCode");      
    res = -1;
    goto LIVCashVcRecordCheck;
  end;
  BlockLoad(LINrb);
  if (nonblank(IVCashr.OfficialSerNr)) and ((MatRowCnt(LINrb)>0) or (HasLocalization("ARG,HRV,PRT,SVN"))) then begin
    GetLegalInvNrRow(IVCashr.OfficialSerNr,LINrbrw);
    switch (LINrbrw.SelectionType) begin
      case kLegalInvNrSelectionTypeManual:
        if (blank(LINrbrw.Serie)) then begin
          IVCashr.OfficialSerNr = "";
        end;
      case kLegalInvNrSelectionTypeAtOK:
        if (transf) then begin
          if (HasLocalization("PHL")) then begin
            if (IVCashr.Status!=kRecordStatusManual) then begin
              IVCashr.OfficialSerNr = "";
            end;
          end else begin
            IVCashr.OfficialSerNr = "";
          end;
        end;
      case kLegalInvNrSelectionTypeAtInsert:
        if (blank(LINrbrw.Serie)) or (stat==Rs_insert) then begin
          if (HasLocalization("PHL")) then begin
            if (IVCashr.Status!=kRecordStatusManual) then begin
              IVCashr.OfficialSerNr = "";
            end;
          end else begin
            IVCashr.OfficialSerNr = "";
          end;
        end;
    end;
  end;
  if (blank(IVCashr.OfficialSerNr)) then begin
    if (HasLocalization("PHL,PRT")) then begin
      if (IVCashr.Status==kRecordStatusManual or IVCashr.Status==kRecordStatusRecovered) then begin
      end else begin
        FindNextIVCashVcOfficialSerialNr(IVCashr);
      end;
    end else begin
      FindNextIVCashVcOfficialSerialNr(IVCashr);
    end;
  end;
  if (transf) then begin
    if (HasLocalization("ARG,BRA,HRV,PHL,PRT,SVN")) then begin
      if (blank(IVCashr.OfficialSerNr)) then begin
        RecordCheckError(1058,"",-1,"OfficialSerNr");  
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
    end;
    if (HasLocalization("PHL")) then begin
      if (blank(IVCashr.TerminalID)) then begin
        RecordCheckError(1058,"",-1,"TerminalID");  
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
    end;
  end;
  if (ValidateOfficialSerialNrChronology("IVCashVc",IVCashr.OfficialSerNr,IVCashr.SerNr,IVCashr.InvDate,td)==false) then begin
    RecordCheckError(26201," " & td,-1,"InvDate");  
    res = -1;
    goto LIVCashVcRecordCheck;
  end;
  if (nonblank(IVCashr.OfficialSerNr)) and (MatRowCnt(LINrb)>0) then begin    
    if (HasLocalization("PRT")) then begin
      GetLegalInvNrRow(IVCashr.OfficialSerNr,LINrbrw);
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin
        if (IVCashr.Status!=kRecordStatusManual and IVCashr.Status!=kRecordStatusRecovered) then begin
          RecordCheckError(2246,"",-1,"Status");   
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
      end;
      if (LINrbrw.RegType==kOfficialNumTypeManualIVVc) then begin
        if (IVCashr.Status!=kRecordStatusManual) then begin
          RecordCheckError(2246,"",-1,"OfficialSerNr");   
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
      end;
      if (LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc) then begin
        if (IVCashr.Status!=kRecordStatusRecovered) then begin
          RecordCheckError(2246,"",-1,"OfficialSerNr");   
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
      end;
    end;
    errcode = 0;
    rwcnt = MatRowCnt(LINrb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      test2f = true;
      if (Left(IVCashr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin test2f = false; end;
      if (test2f) then begin
        testf = true;
        test2f = TestNextOfficialSerialNr_IVCashVc(LINrbrw,CUr.Classification,IVCashr,false);
        if (test2f==false) then begin
          errcode = 1557;
          testf = false;
        end else begin
          i = rwcnt;
        end;
      end;
    end;
    if (testf==false) then begin
      RecordCheckError(errcode," " & IVCashr.OfficialSerNr,-1,"OfficialSerNr");      
      res = -1;
      goto LIVCashVcRecordCheck;
    end;
  end;
  if (nonblank(IVCashr.OfficialSerNr)) then begin
    if (InString2(IVCashr.OfficialSerNr,",")>0) then begin
      if (InString2(IVCashr.OfficialSerNr,":")>0) then begin
        RecordCheckError(1059," " & IVCashr.OfficialSerNr,-1,"OfficialSerNr");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
    end;
  end;
  if (HasLocalization("PRT")) then begin
/*
    if (CUr.VATNr=="999999990") then begin
      if (IVp.InvType!=kInvoiceTypeCash) then begin
        if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
          RecordCheckError(2246,"",-1,"PayDeal");   
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
      end;
    end;
*/    
    if (IVCashr.Sum4<0) then begin
      RecordCheckError(1567,"",-1,"Sum4");      
      res = -1; 
      goto LIVCashVcRecordCheck;
    end;
    if (IVCashr.InclVAT>0) then begin
      bal = IVCashr.Sum4 - IVCashr.Sum3;
    end else begin
      bal = IVCashr.Sum1;
    end;
    switch (CYb.BusinessType) begin
      case kCYBusinessTypeRetail:
        testf = false;
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (nonblank(IVCashrw.ArtCode)) then begin
            if (ReadFirstItem(IVCashrw.ArtCode,INr,false,true)) then begin
              if (INr.ItemType!=kItemTypeStocked) then begin
                testf = true;
                i = rwcnt;
              end;
            end;
          end;
        end;
        if (testf) then begin
          if (bal>100) then begin
            RecordCheckError(2246,"",-1,"PayDeal");   
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end else begin
          if (bal>1000) then begin
            RecordCheckError(2246,"",-1,"PayDeal");   
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
      otherwise
        if (bal>100) then begin
          RecordCheckError(2246,"",-1,"PayDeal");   
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
    end;
    if (IVCashr.Status==kRecordStatusManual or IVCashr.Status==kRecordStatusRecovered) then begin
      if (blank(IVCashr.OfficialSerNr2)) then begin   
        RecordCheckError(2210,"",-1,"OfficialSerNr2");   
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
      if (nonblank(IVCashr.OfficialSerNr2)) then begin   
        if (InString2(IVCashr.OfficialSerNr2,"/")<=0) then begin
          RecordCheckError(1059," " & IVCashr.OfficialSerNr2,-1,"OfficialSerNr2");   
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
        locIVCashr.OfficialSerNr2 = IVCashr.OfficialSerNr2;
        if (ReadFirstKey("OpenOfficialSerNr2",locIVCashr,1,true)) then begin
          if (locIVCashr.SerNr!=IVCashr.SerNr) then begin
            RecordCheckError(1391,IVCashr.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
        locIVCashr.OfficialSerNr = StripCharacter(IVCashr.OfficialSerNr2,"/");
        if (ReadFirstKey("OfficialSerNr",locIVCashr,1,true)) then begin
          if (locIVCashr.SerNr!=IVCashr.SerNr) then begin
            RecordCheckError(1391,IVCashr.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
        dummyl = 0;
        GetNextSubstring(IVCashr.OfficialSerNr2,dummyl,"/",tstr);
        GetNextSubstring(IVCashr.OfficialSerNr2,dummyl,"/",tstr2);
        for (i=0;i<len(tstr);i=i+1) begin
          c = Mid(tstr,i,1);
          if (IsDigit(c)==false and (IsCapitalLetter(c)==false)) then begin
            RecordCheckError(1059," " & IVCashr.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
        for (i=0;i<len(tstr2);i=i+1) begin
          c = Mid(tstr2,i,1);
          if (IsDigit(c)==false) then begin
            RecordCheckError(1059," " & IVCashr.OfficialSerNr2,-1,"OfficialSerNr2");   
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
        GetLegalInvNrRow(IVCashr.OfficialSerNr2,LINrbrw);
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
          RecordCheckError(2246,"",-1,"Status");   
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
      end;
    end;
  end;  
  cash = blankval;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (UserCanAction("AllowAddingINtoRetPOSIV",true)==false) then begin
      testf = true;
      if (IVCashrw.ovst!=0) then begin testf = false; end;
      if (IVCashrw.stp==kInvoiceRowTypeVoid) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        switch (positivef) begin
          case 0:
            if (IVCashrw.Sum>=0) then begin
              positivef = 1;
            end else begin
              positivef = -1;
            end;
          case 1:
            if (IVCashrw.stp!=kInvoiceRowTypeMultiBuyDiscount) then begin
              if (IVCashrw.Sum<0) then begin
                RecordCheckError(1567,"",i,"Quant");      
                res = -1; 
                goto LIVCashVcRecordCheck;
              end;
            end;
          case -1:
            if (IVCashrw.Sum>0) then begin
              RecordCheckError(1566,"",i,"Quant");      
              res = -1; 
              goto LIVCashVcRecordCheck;
            end;
        end;
      end;
    end;
    testf = true;
    if (IVCashrw.ovst!=0) then begin testf = false; end;
    if (IVCashrw.stp==kInvoiceRowTypeVoid) then begin testf = false; end;
    if (IVCashr.Invalid!=0) then begin testf = false; end;
    if (testf) then begin
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeOnAccountPayment:
        res = CheckRowPayMode("Sum",i,IVCashrw.PayMode,IVCashrw.Sum);
        if (res!=0) then begin
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
      case kInvoiceRowTypeGiftVoucherPayment:
        cash = cash + IVCashrw.Sum;      
        res = IVCashVc_CheckRowTypeGiftVoucherPayment(IVCashr,IVCashrw,i);
        if (res!=0) then begin
          goto LIVCashVcRecordCheck;
        end;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        res = CheckRowPayMode("Sum",i,IVCashrw.PayMode,IVCashrw.Sum);
        if (res!=0) then begin
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
        cash = cash + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeCashPayment:
        res = CheckRowPayMode("Sum",i,IVCashrw.PayMode,IVCashrw.Sum);
        if (res!=0) then begin
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
        cash = cash + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeChequePayment:
        res = CheckRowPayMode("Sum",i,IVCashrw.PayMode,IVCashrw.Sum);
        if (res!=0) then begin
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
        cash = cash + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeCreditCardPayment:
        res = CheckRowPayMode("Sum",i,IVCashrw.PayMode,IVCashrw.Sum);
        if (res!=0) then begin
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
        cash = cash + IVCashrw.Sum;      
      case kInvoiceRowTypeGiftVoucherSold:
        if ((nonblank(IVCashrw.VATCode)) and (VATAccIsClosed(IVCashrw.VATCode,tstr,1))) then begin
          RecordCheckError(1258,tstr,i,"VATCode");      
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;          
        res = CheckRowPayMode("Sum",i,IVCashrw.PayMode,IVCashrw.Sum);
        if (res!=0) then begin
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
        for (j=0;j<i;j=j+1) begin
          MatRowGet(IVCashr,j,IVCash2rw);
          if (IVCash2rw.ovst==0) then begin
            if (IVCash2rw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
              if (IVCash2rw.GCNr==IVCashrw.GCNr) then begin
                RecordCheckError(2186,"",i,"GCNr");      
                res = -1; 
                goto LIVCashVcRecordCheck;
              end;
            end;
          end;
        end;
      otherwise
/*
      if (blank(IVCashrw.ArtCode)) then begin
        RecordCheckError(1058,"",i,"ArtCode");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
*/
      if ((nonblank(IVCashrw.VATCode)) and (VATAccIsClosed(IVCashrw.VATCode,tstr,1))) then begin
        RecordCheckError(1258,tstr,i,"VATCode");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;          
      if (StockRecordForLocationAllowed("IVCashVc",IVCashr.Location,IVCashrw.ArtCode,IVCashr.TransDate,IVCashr.OKFlag,errcode,errstr)==false) then begin
        RecordCheckError(errcode,errstr,i,"ArtCode");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
      if (transf) then begin
        if (ARAccRec.DisallowNegativeRowSumsonSales!=0) then begin
          if (IVCashrw.Sum<0) then begin
            RecordCheckError(22047,"",i,"Sum");      
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
      end;
      if (nonblank(IVCashrw.TaxTemplateCode)) then begin
        errcode = VerifyTaxTemplateCode(IVCashrw.TaxTemplateCode,tstr);
        if (errcode!=0) then begin
          RecordCheckError(1120,tstr,i,"TaxTemplateCode");      
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
      end;
      if (nonblank(IVCashrw.ArtCode)) then begin
        if (HasLocalization("PRT")) then begin
          if (IVCashrw.Quant==0) then begin
            RecordCheckError(2210,"",i,"Quant");      
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
          if (CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum)<0) then begin
            RecordCheckError(22034,"",i,"vRebate");      
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
        INr.Code = IVCashrw.ArtCode;
        if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)==false) then begin
          RecordCheckError(1120,IVCashrw.ArtCode,i,"ArtCode");      
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
        if (INr.Terminated!=0) then begin
          RecordCheckError(1266,IVCashrw.ArtCode,i,"ArtCode");      
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
/*        
        if (INr.ItemType==kItemTypeStructured) then begin
          RecordCheckError(1826," " & IVCashrw.ArtCode,i,"ArtCode");      
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
*/        
        switch (INr.SerNrf) begin
          case 1:
            if (blank(IVCashrw.SerialNr)) then begin
              RecordCheckError(1239,"  " & IVCashrw.ArtCode,i,"SerialNr");      
              res = -1; 
              goto LIVCashVcRecordCheck;
            end;
          case 2:
            if (INr.DonotRequireBatchNrOnIVCash==0) then begin
              if (blank(IVCashrw.SerialNr)) then begin
                RecordCheckError(1239,"  " & IVCashrw.ArtCode,i,"SerialNr");      
                res = -1; 
                goto LIVCashVcRecordCheck;
              end;
            end;
        end;
      end else begin
        testf = false;
      end; 
      if (UserCanAction("AllowPOSIVNegQty",true)==false) then begin
        if (IVCashrw.stp!=kInvoiceRowTypeMultiBuyDiscount) then begin
          if (IVCashrw.Quant<0) then begin
            RecordCheckError(1274,StringFromStringSet(3,"AllowPOSIVNegQty"),i,"Quant");      
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end;
      end;                                          
      if ((check==true) and (testf==true)) then begin
        if (MSb.dontAllowOvership==1) then begin
          if ((INr.ItemType!=0) and (INr.ItemType!=3)) then begin
          if (IVCashr.UpdStockFlag!=0) then begin
          if (nonblank(IVCashrw.Recepy)) then begin          
            isstruct = ExpandStructItem(IVCashrw.ArtCode,IVCashrw.Recepy,IVCashrw.Quant,recSHr);
            if (isstruct) then begin
              rwcnt2 = MatRowCnt(recSHr);
              for (j=0;j<rwcnt2;j=j+1) begin
                MatRowGet(recSHr,j,SHrw2);
                FindStockValue(SHrw2.ArtCode,location,ISr);
                if ((ISr.Instock<SHrw2.Ship) and (SHrw2.Ship>0)) then begin
                  RecordCheckError(1247,"",i,"Quant");      
                  res = -1; 
                  goto LIVCashVcRecordCheck;
                end;
              end;
            end;
          end else begin            
            if (INr.ItemType==1) then begin
              prev = blankval;
              for (j=0;j<i;j=j+1) begin
                MatRowGet(IVCashr,j,IVCash2rw);
                if (IVCash2rw.ArtCode==IVCashrw.ArtCode) then begin
                  prev = prev + IVCash2rw.Quant;
                end;
              end;
              prev = prev + IVCashrw.Quant;
              FindStockValue(IVCashrw.ArtCode,IVCashr.Location,ISr);
              if ((ISr.Instock<prev) and (prev>0)) then begin
                RecordCheckError(1247,"",i,"Quant");      
                res = -1; 
                goto LIVCashVcRecordCheck;
              end;
            end;
          end;
          end;
          end;
        end;
      end;
      if ((check==true) and (testf==true)) then begin
        if (IVCashr.UpdStockFlag!=0 or (MSb.ChkSerNumOnNonStockIVCash!=0 and IVCashr.AllowIncorrectSerial==0)) then begin
          if (INr.SerNrf>0) then begin
            if (IsSerialNrCorrect(IVCashrw.SerialNr)==false) then begin
              RecordCheckError(24154,IVCashrw.SerialNr,i,"SerialNr");      
              res = -1; 
              goto LIVCashVcRecordCheck;
            end;
            if (blank(IVCashrw.SerialNr)) then begin
              if (IVCashrw.Quant>0) then begin
                RecordCheckError(1239,"",i,"SerialNr");      
                res = -1; 
                goto LIVCashVcRecordCheck;
              end;
            end;
            location = IVCashr.Location;
            if (blank(location)) then begin
              location = MSb.MainStock;
            end;
            quant = IVCashrw.Quant;
            if (quant>0) then begin            
              if (INr.SerNrf==1) then begin
                if (SerialNrAvail(IVCashrw.ArtCode,IVCashrw.SerialNr,location,quant)==false) then begin
                  RecordCheckError(1240,"",i,"SerialNr");      
                  res = -1; 
                  goto LIVCashVcRecordCheck;
                end;
              end else begin
                prev = blankval;
                for (cnt=0;cnt<i;cnt=cnt+1) begin
                  MatRowGet(IVCashr,cnt,IVCash2rw);
                  if ((IVCash2rw.ArtCode==IVCashrw.ArtCode) and (IVCash2rw.SerialNr==IVCashrw.SerialNr)) then begin
                    prev = prev + IVCash2rw.Quant;
                  end;
                end;
                prev = prev + IVCashrw.Quant;
                if (SerialNrAvail(IVCashrw.ArtCode,IVCashrw.SerialNr,location,prev)==false) then begin
                  RecordCheckError(1240,"",i,"SerialNr");      
                  res = -1; 
                  goto LIVCashVcRecordCheck;
                end;
              end;
            end else begin
              quant = -quant;
              if (INr.SerNrf==1) then begin
                if (SerialNrAvail(IVCashrw.ArtCode,IVCashrw.SerialNr,location,quant)==true) then begin
                  RecordCheckError(1241,"",i,"SerialNr");      
                  res = -1; 
                  goto LIVCashVcRecordCheck;
                end;
              end;
            end;
            if (INr.SerNrf==1) then begin            
              if (IVCashrw.Quant>1) then begin
                RecordCheckError(1242,"",i,"SerialNr");      
                res = -1; 
                goto LIVCashVcRecordCheck;
              end;
              for (j=0;j<i;j=j+1) begin
                MatRowGet(IVCashr,j,IVCash2rw);
                if ((IVCashrw.ArtCode==IVCash2rw.ArtCode) and (IVCashrw.SerialNr==IVCash2rw.SerialNr)) then begin
                  RecordCheckError(1242,"",i,"SerialNr");      
                  res = -1; 
                  goto LIVCashVcRecordCheck;
                end;
              end;
            end;
          end;
        end;
      end;  
      if ((nonblank(IVCashrw.VATCode)) and (IsVATCodeDefined(IVCashrw.VATCode)==false)) then begin
        RecordCheckError(1120,IVCashrw.VATCode,i,"VATCode");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
      if ((blank(IVCashrw.VATCode) and (blank(IVCashrw.TaxTemplateCode)) and (IVCashrw.Sum!=0))) then begin
        RecordCheckError(1134,IVCashrw.VATCode,i,"VATCode");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
/*      
      if (CorrectM4ValProc(IVCashrw.vRebate)==false) then begin
        RecordCheckError(1019,IVCashrw.VATCode,i,"vRebate");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
*/      
      if (nonblank(IVCashrw.SalesAcc)) then begin
        tstr = "";
        if ((nonblank(IVCashr.Objects)) or (nonblank(IVCashrw.Objects))) then begin
          tstr = IVCashr.Objects;
          if ((nonblank(tstr)) and (nonblank(IVCashrw.Objects))) then begin
            tstr = tstr & ",";
          end;
          if (nonblank(IVCashrw.Objects)) then begin
            tstr = tstr & IVCashrw.Objects;
          end;
        end;
        errcode = CheckObjs(IVCashrw.SalesAcc,tstr,errstr);
        if (errcode!=0) then begin
          RecordCheckError(errcode,errstr,-1,"Objects");      
          res = -1; 
          goto LIVCashVcRecordCheck;
        end;
      end;
      if (IsControlAccount(IVCashrw.SalesAcc,true,false)) then begin
        RecordCheckError(1082,"",i,"SalesAcc");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
      if (ARAccRec.VATCodeCtrl==1) then begin
        Accr.AccNumber = IVCashrw.SalesAcc;
        if (ReadFirstMain(Accr,1,true)) then begin
          if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVCashrw.VATCode)) then begin
            RecordCheckError(1245,"",i,"VATCode");      
            res = -1; 
            goto LIVCashVcRecordCheck;
          end;
        end else begin
          tstr = IVCashrw.SalesAcc;
          Accr.AccNumber = tstr;
          if (ReadFirstMain(Accr,1,true)) then begin
            if ((nonblank(Accr.VATCode)) and (Accr.VATCode!=IVCashrw.VATCode)) then begin
              RecordCheckError(1245,"",i,"VATCode");      
              res = -1; 
              goto LIVCashVcRecordCheck;
            end;
          end;
        end;
      end;


      if (nonblank(IVCashrw.DiscApprovedBy)) then begin
        User.Code = IVCashrw.DiscApprovedBy;
      end else begin
        User.Code = CurrentUser;
      end;
      if (ReadFirstMain(User,1,true)) then begin 
      end;
      if (nonblank(User.MinPLCode)) or (blank(IVCashrw.SalesAcc)) then begin
        if (blank(IVCashrw.DiscApprovedBy)) then begin
          if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashr.CurncyCode,
                              IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                              IVCashr.LangCode,IVCashr.CustCat,User.MinPLCode,IVCashr.RebCode,
                              price,curitemname,vreb,vatcode,baseprice,salesacc,
                              0,calcpricef,IVCashr.TransDate,IVCashr.TransTime,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tax2code,tax2prc,IVCashr.Region,location,taxtemplatecode)) then begin
            if (nonblank(User.MinPLCode)) then begin                         
              discountprice = IVCashrw.Sum/IVCashrw.Quant;
              if (price>discountprice) then begin 
                errstr = discountprice;
                errstr = errstr & USetStr(20111) & price;
                RecordCheckError(20110,errstr,i,"Price");      
                res = -1; 
                goto LIVCashVcRecordCheck;
              end;
            end;
            if (blank(IVCashrw.SalesAcc)) then begin
              IVCashrw.SalesAcc = salesacc;
            end;
          end;
        end;
      end;
                
    end;
    end;
  end;    
  cash = cash + IVCashr.RecValue;
  cash = cash + IVCashr.RecValue2;
  cash = cash + IVCashr.CashValue;
  cash = cash + MulWithRateToBase1(IVCashr.POSCurncyCode,IVCashr.InvDate,IVCashr.CashValueCur,DefaultCurRoundOff);
  if (IVCashr.TransferToSL!=0) or (IVCashr.Invalid!=0) then begin
    transf = false;
  end;
//Trace("transf " & transf & " IVCashr.Sum4 " & IVCashr.Sum4," IVCashr.RetValue " & IVCashr.RetValue);  
  if (blank(IVCashr.Resource)) then begin
    if (HasLocalization("HRV,SVN")) then begin
      if (IVCashr.Sum4>=0) then begin
        if (IVCashr.RetValue<0) then begin
          RecordCheckError(24177,"",-1,"CashValue");      
          res = -1; 
          goto LIVCashVcRecordCheck;   
        end;
      end else begin
        if (IVCashr.RetValue!=0) then begin           // No reason to have this check in the first place.
          RecordCheckError(24197,"",-1,"CashValue");  // As when doing a return, invoice is aways negative and change is always positive.    
          res = -1;                                   // the reason is to make sure not to return more than total amount is
          goto LIVCashVcRecordCheck;   
        end;
      end;
    end;
  end;
  if (transf) then begin
    if (blank(IVCashr.Resource)) then begin
      if (IVCashr.Sum4>=0) then begin
        if (IVCashr.RetValue<0) then begin
          RecordCheckError(24177,"",-1,"CashValue");      
          res = -1; 
          goto LIVCashVcRecordCheck;   
        end;
      end else begin
        if (IVCashr.RetValue!=0) then begin           // No reason to have this check in the first place.
          RecordCheckError(24197,"",-1,"CashValue");  // As when doing a return, invoice is aways negative and change is always positive.    
          res = -1;                                   // the reason is to make sure not to return more than total amount is
          goto LIVCashVcRecordCheck;   
        end;
      end;
      if ((IVCashr.CashValue==0) and (IVCashr.RecValue==0) and (IVCashr.RecValue2==0) and (IVCashr.TendValue==0) and (IVCashr.Sum4!=0)) then begin
        RecordCheckError(24177,"",-1,"CashValue");      
        res = -1; 
        goto LIVCashVcRecordCheck;   
      end;  
    end;
    if (UserCanAction("CashInvOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"CashInvOK"),-1,"SerNr");      
      res = -1;
      goto LIVCashVcRecordCheck;
    end;
    ACPr.ArtCode = IVCashrw.ArtCode;
    if (ReadFirstMain(ACPr,1,true)) then begin
      if ((blank(IVCashrw.MotherNr)) and (blank(IVCashrw.MotherSecondarySerialNr)) and (blank(IVCashrw.MotherAlternateDeviceID))) then begin
        RecordCheckError(23703,"",i,"MotherNr");      
        res = -1; 
        goto LIVCashVcRecordCheck;
      end;
    end;
  end;
  if (check) then begin
    if (IVCashr.UpdStockFlag!=0) then begin
      IVCashUpdateFIFO(IVCashr,true);
    end;
  end;
  if (transf and IVCashr.UpdStockFlag!=0) then begin
    if (stat==updatemode) then begin sernr = IVCash2r.SerNr; end;

    if (check) then begin
    if (MSb.Chronology!=0) then begin
      if (ExistStockTrans(IVCashr.Location,IVCashr.TransDate,errcode,errstr,"IVCashVc",sernr,MSb)) then begin
        RecordCheckError(errcode,errstr,-1,"TransDate");      
        res = -1;
        goto LIVCashVcRecordCheck;
      end;
    end;
    end;
    if (CanOKStockRecord(errcode)==false) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1; 
      goto LIVCashVcRecordCheck;
    end;
  end;  
//must be after all other tests
  if (HasLocalization("HRV")) then begin
    if (IVCashr.OKFlag!=0 and IVCashr.Invalid==0 and blank(IVCashr.TaxAdminServSeal)) then begin
      if (DoXMLExport_IVCashVc(IVCashr)==false) then begin
        IVCashr.OfficialSerNr = "";
        if (blank(IVCashr.RefStr)) then begin
          RecordCheckError(31412,"",0,"RefStr");
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
      end;
    end;
  end;
  if (HasLocalization("SVN")) then begin
    if (IVCashr.OKFlag!=0 and IVCashr.Invalid==0 and blank(IVCashr.TaxAdminServSeal)) then begin
      if (nonblank(IVCashr.RefStr)) then begin
        IVCashr.OfficialSerNr = "";
      end else begin
        res = ValidateIVCashVcSVNFiscalization(IVCashr,errstr,tstr);
        if (res!=0) then begin
          IVCashr.TaxAdminServSeal = "";
          RecordCheckError(res,errstr,-1,tstr);
          res = -1;
          goto LIVCashVcRecordCheck;
        end;
/*        
        res = IVCashVcSVNFiscalization(false,IVCashr,errstr);
        if (res!=0) then begin
          IVCashr.OfficialSerNr = "";
          IVCashr.TaxAdminServSeal = "";
          if (blank(IVCashr.RefStr)) then begin
            RecordCheckError(res,errstr,-1,"RefStr");
            res = -1;
            goto LIVCashVcRecordCheck;
          end;
        end;
*/        
      end;
    end;
  end;
LIVCashVcRecordCheck:;  
  if (res!=0) then begin 
    IVCashr.SerNr = oldnr; 
    IVCashr.OfficialSerNr = oldOfficialSerNr;
  end;
  if (IsSyncing) then begin
    if (RecordCheckLastErrorNo!=0) then begin
      LogText(0,"Record Check failed for POS Invoice " & IVCashr.SerNr " error " & RecordCheckLastErrorNo);
    end;
  end;
  IVCashVcRecordCheck = res;
  RETURN;
END;

global
function LongInt IVCashVcRecordProtectFields(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  IVCash2r.Prntdf = IVCashr.Prntdf;
  //IVCash2r.TaxAdminServSeal = IVCashr.TaxAdminServSeal;//why did we need this?? this broke fiscalization procedure cause WindowDoOK didn't see this field
  IVCashVcRecordProtectFields = res;
  RETURN;
END;

global
function LongInt IVCashVcRecordReset(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  IVCashr.OKFlag = 0;
  IVCashVcRecordReset = res;
  RETURN;
END;

procedure IVCashVcConvertB1ToB2(record IVCashVc IVCashr,string curncy,val fr,var val to1p,var val to2p,var val br1p,var val br2p)
BEGIN
  row IVCashVc IVCashrw;
  val t;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;

  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    B1ToB2Val(IVCashrw.rowGP,br1p,br2p,t);
    IVCashrw.rowGP = t;
    B1ToB2ValRM(IVCashrw.FIFO,br1p,br2p,t,GetCostRoundModeRB);
    IVCashrw.FIFO = t;
    B1ToB2Val(IVCashrw.BasePrice,br1p,br2p,t);
    IVCashrw.BasePrice = t;
    B1ToB2ValRM(IVCashrw.FIFORowVal,br1p,br2p,t,GetCostRoundModeRB);
    IVCashrw.FIFORowVal = t;
    MatRowPut(IVCashr,i,IVCashrw);
  end;
  RETURN;
END;

procedure CalculateTotGP(var record IVCashVc IVCashr)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;

  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.ovst==0) then begin
      IVCashr.TotGP = IVCashr.TotGP + IVCashrw.rowGP;
    end;
  end;
  return;
end;

global
updating function LongInt IVCashVcRecordImport(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  record AccBlock Accb;
  row LegalInvNrBlock LINrbrw;
      
  BlockLoad(cvm);
  BlockLoad(Accb);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    curncy = IVCashr.CurncyCode;
    fr = IVCashr.FrRate; 
    to1 = IVCashr.ToRateB1;
    to2 = IVCashr.ToRateB2;
    br1 = IVCashr.BaseRate1;
    br2 = IVCashr.BaseRate2;
    t = IVCashr.Sum4;
    ConvertToDualBase(curncy,IVCashr.TransDate,fr,to1,to2,br1,br2,t,true);
    IVCashr.CurncyCode = curncy;
    IVCashr.FrRate = fr;
    IVCashr.ToRateB1 = to1;
    IVCashr.ToRateB2 = to2;
    IVCashr.BaseRate1 = br1;
    IVCashr.BaseRate2 = br2;
    IVCashr.Sum4 = t;
  end;
  if (gBase1ToBase2) then begin
    to1 = IVCashr.ToRateB1;
    to2 = IVCashr.ToRateB2;
    br1 = IVCashr.BaseRate1;
    br2 = IVCashr.BaseRate2; 
    IVCashVcConvertB1ToB2(IVCashr,IVCashr.CurncyCode,IVCashr.FrRate,to1,to2,br1,br2);
    IVCashr.ToRateB1 = to1;
    IVCashr.ToRateB2 = to2;
    IVCashr.BaseRate1 = br1;
    IVCashr.BaseRate2 = br2;
    CalculateTotGP(IVCashr);
    IVCashr.BaseSum4 = MulRateToBase1(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
  end;
  if (IVCashr.TotGP==0) then begin  
    CalculateTotGP(IVCashr);
  end;  
  if (IVCashr.NoTAXonVAT==-1) then begin
    IVCashr.NoTAXonVAT = Accb.NoTAXonVAT;
  end;
  if (blank(IVCashr.OfficialSerNrSerie)) then begin
    GetLegalInvNrRow(IVCashr.OfficialSerNr,LINrbrw);
    IVCashr.OfficialSerNrSerie = GetLegalInvoiceNrSerie(LINrbrw,IVCashr.OfficialSerNr);
  end;
  if (blank(IVCashr.OfficialSerNr2Serie)) then begin
    GetLegalInvNrRow(IVCashr.OfficialSerNr2,LINrbrw);
    IVCashr.OfficialSerNr2Serie = GetLegalInvoiceNrSerie(LINrbrw,IVCashr.OfficialSerNr2);
  end;
  IVCashVcRecordImport = res;
  RETURN;
END;

global
updating procedure IVCashArtStats(record IVCashVc IVCashp,Boolean anegf)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  val basesum;
  val sumprice,temp;
  val icsbasesum,icsgps,icsprice;
  record TaxMatrixVc TMr;
  val sum1,sum4,gps;
  record CUVc CUr;
  val basesuminclvat,t;
  Boolean negf;

  if (blankdate(IVCashp.TransDate)) then begin goto LIVCashArtStats; end;
  negf = anegf;
  if (IVCashp.InvType==kPOSInvoiceTypeCredit) then begin
    negf = !negf;
  end;
  CUr.Code = IVCashp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    if ((IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent)) and (IVCashrw.ovst==0) then begin
      temp = MulRateToBase1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
      UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
      FindSalesExVat(TMr,IVCashrw.VATCode,temp,IVCashp.InclVAT,IVCashp.NoTAXonVAT,basesum);
      temp = IVCashrw.Quant * IVCashrw.Price;
      if (temp==0) then begin temp = IVCashrw.Sum; end;
      FindSalesExVat(TMr,IVCashrw.VATCode,temp,IVCashp.InclVAT,IVCashp.NoTAXonVAT,temp);
      sumprice = sumprice + temp;
      icsprice = temp;
      icsbasesum = basesum;
      icsgps = IVCashrw.rowGP;
      t = FindVAT(IVCashrw.VATCode,basesum,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
      basesuminclvat = basesum + t; 
      ArtStatUp2(IVCashrw.ArtCode,IVCashp.CustCode,IVCashp.BranchID,"",IVCashp.TransDate,IVCashrw.Quant,basesum,IVCashrw.rowGP,temp,negf,icsbasesum,icsgps,icsprice,basesuminclvat);
      gps = gps + IVCashrw.rowGP;
    end;
  end;
  sum1 = IVCashp.Sum1;
  if (IVCashp.InclVAT>0) then begin
    sum1 = IVCashp.Sum4 - IVCashp.Sum3 - IVCashp.TAX1Sum - IVCashp.TAX2Sum;
  end;
  basesum = MulRateToBase1(IVCashp.CurncyCode,sum1,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
  sum4 = IVCashp.Sum4;
  if (blank(CUr.CurncyCode)) then begin
    sum4 = MulRateToBase1(IVCashp.CurncyCode,sum4,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
  end;
  CustStatUp("IVCashVc",IVCashp.SerNr,IVCashp.CustCode,IVCashp.CustCode,IVCashp.BranchID,"","",IVCashp.TransDate,basesum,sum4,sum4,gps,blankval,sumprice,negf);
LIVCashArtStats:;
  return;
end;

function Boolean GetIVCashReservation(record IVCashVc IVCashr,var record JobVc resJobr)
begin
  record JobVc Jobr;
  row JobVc Jobrw;
  Integer i,rwcnt;
  Boolean res;
  record HotelBlock Hotelb;
  
  res = false;
//wrong, what if checout time is 12 and u go to pub 13.00 ?  
//  Jobr.SerNr = FindReservation(IVCashr.Resource,IVCashr.TransDate,IVCashr.TransTime);
//  if (ReadFirstMain(Jobr,1,true)) then begin

  BlockLoad(Hotelb);
  Jobr.ResStatus = Hotelb.ChInSt;
  Jobr.ResCode = IVCashr.Resource;
  if (ReadLastKey("ResCodeStatus",Jobr,2,true)) then begin   
    if (Jobr.CUCode==IVCashr.CustCode) then begin
      res = true;
    end else begin
      rwcnt = MatRowCnt(Jobr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Jobr,i,Jobrw);
        if (Jobrw.CUCode==IVCashr.CustCode) then begin
          res = true;
          goto LGetIVCashReservation;
        end;
      end;      
    end;
  end; 
LGetIVCashReservation:;
  RecordCopy(resJobr,Jobr);
  GetIVCashReservation = res;
  return;
end;

updating procedure PutIVCashInShopBask(var record IVCashVc IVCashr,string itemcode,string object,LongInt jobsernr)
begin
  string 255 tstr;
  val sum4;

  // Discount is already taken into account in Sum4  
  GetINName(itemcode,tstr);
  sum4 = IVCashr.Sum4 - IVCashr.CashValue - IVCashr.RecValue - IVCashr.RecValue2;
  StoreInShopBask(1,jobsernr,itemcode,tstr,1,sum4,blankval,IVCashr.CustCode,object,-1,"",true,"","IVCashVc",IVCashr.SerNr,"",blankval,blankval,blankval,blankval,blankval); //IVCashr.Sum4
  IVCashr.TendValue = IVCashr.TendValue + sum4;
  IVCashr.RetValue = IVCashr.RetValue - sum4;
  return;
end;

procedure ConsolidateIVCashr(record IVCashVc IVCashr,var record IVCashVc resIVCashr)
begin
  Row IVCashVc IVCashrw;
  Row IVCashVc resIVCashrw;
  Integer rwcnt,i;
  Integer resrwcnt,resi;
  Boolean treatedf;
  
  RecordCopy(resIVCashr,IVCashr);
  rwcnt = MatRowCnt(IVCashr);
  while (MatRowCnt(resIVCashr)>0) begin
    MatRowDelete(resIVCashr,0);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    resrwcnt = MatRowCnt(resIVCashr);
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.stp==1) then begin
      treatedf = false;
      for (resi=0;resi<resrwcnt;resi=resi+1) begin
        MatRowGet(resIVCashr,resi,resIVCashrw);
        if (resIVCashrw.stp==1) then begin
          if ((nonblank(resIVCashrw.ArtCode)) and (IVCashrw.ArtCode==resIVCashrw.ArtCode) and (IVCashrw.Price==resIVCashrw.Price) and (IVCashrw.Spec==resIVCashrw.Spec)) then begin
            resIVCashrw.Quant = resIVCashrw.Quant + IVCashrw.Quant;
            MatRowPut(resIVCashr,resi,resIVCashrw);
            treatedf = true;
          end;
        end;
      end;
    end;
    if (treatedf==false) then begin
      MatRowPut(resIVCashr,resrwcnt,IVCashrw);
    end;
  end;
  return;
end;

updating procedure PutIVCashRowInShopBask(var record IVCashVc IVCashr,Integer ivcashrow,string object,LongInt jobsernr)
begin
  row IVCashVc IVCashrw;
  val Price;
  string 255 cucode;

  MatRowGet(IVCashr,ivcashrow,IVCashrw);
  if (IVCashrw.ovst!=0) then begin
    goto LPutIVCashRowInShopBask;
  end;
  cucode = IVCashr.GuestCode;
  if (blank(cucode)) then begin cucode = IVCashr.CustCode; end;
  switch (IVCashrw.stp) begin
    case 1:
/*      
      Price = IVCashrw.Price;
      if (nonblank(IVCashr.Discount)) then begin
        PUCalcPerc(IVCashrw.Price,IVCashr.Discount,Price);
        Price = IVCashrw.Price - Price;
      end;  
*/      
      Price = IVCashrw.Sum/IVCashrw.Quant;
      StoreInShopBask(2,jobsernr,IVCashrw.ArtCode,IVCashrw.Spec,IVCashrw.Quant,Price,blankval,cucode,object,-1,"",true,"","IVCashVc",IVCashr.SerNr,"",blankval,blankval,blankval,blankval,blankval);
//      IVCashr.TendValue = IVCashr.TendValue + Price;
//      IVCashr.RemValue = IVCashr.RemValue - Price;
    case kInvoiceRowTypeVoid:
/*      
      Price = IVCashrw.Price;
      if (nonblank(IVCashr.Discount)) then begin
        PUCalcPerc(IVCashrw.Price,IVCashr.Discount,Price);
        Price = IVCashrw.Price - Price;
      end;  
*/      
      Price = IVCashrw.Sum/IVCashrw.Quant;
      StoreInShopBask(2,jobsernr,IVCashrw.ArtCode,IVCashrw.Spec,-IVCashrw.Quant,Price,blankval,cucode,object,-1,"",true,"","IVCashVc",IVCashr.SerNr,"",blankval,blankval,blankval,blankval,blankval);
      
//      IVCashr.TendValue = IVCashr.TendValue - Price;
//      IVCashr.RemValue = IVCashr.RemValue + Price;
    case kInvoiceRowTypeLoyaltyPointsPayment:
//      IVCashr.TendValue = IVCashr.TendValue + IVCashrw.Sum;
//      IVCashr.RemValue = IVCashr.RemValue - IVCashrw.Sum;
    case kInvoiceRowTypeGiftVoucherPayment:
//      IVCashr.TendValue = IVCashr.TendValue + IVCashrw.Sum;
//      IVCashr.RemValue = IVCashr.RemValue - IVCashrw.Sum;
    case kInvoiceRowTypeCashPayment:
//      IVCashr.TendValue = IVCashr.TendValue + IVCashrw.Sum;
//      IVCashr.RemValue = IVCashr.RemValue - IVCashrw.Sum;
    case kInvoiceRowTypeCreditCardPayment:
//      IVCashr.TendValue = IVCashr.TendValue + IVCashrw.Sum;
//      IVCashr.RemValue = IVCashr.RemValue - IVCashrw.Sum;
    case kInvoiceRowTypeChequePayment:
//      IVCashr.TendValue = IVCashr.TendValue + IVCashrw.Sum;
//      IVCashr.RemValue = IVCashr.RemValue - IVCashrw.Sum;
  end;
LPutIVCashRowInShopBask:;  
  return;
end;

updating procedure IVCashUpdateReservation(record IVCashVc IVCashr,Boolean unokf)
begin
  record IVCashVc aIVCashr;
  row IVCashVc aIVCashrw;
  record JobVc Jobr;
  Boolean detailf,restitfound;
  record RestITVc RestITr;
  Integer i,rwcnt;

  RestITr.Code = IVCashr.LocalMachineCode;
  restitfound = ReadFirstMain(RestITr,1,true);
  if (restitfound) then begin
/*  
    if (nonblank(RestAccr.Objects)) then begin
      if (nonblank(RestITr.Object)) then begin
        RestAccr.Objects = RestAccr.Objects & ",";
      end;
    end;
    RestAccr.Objects = RestAccr.Objects & RestITr.Object;
*/    
  end;

  if ((nonblank(IVCashr.Resource)) and (nonblank(IVCashr.CustCode))) then begin  // and (nonblank(IVCashr.GuestCode))
    if (CheckIfRoomPayType(IVCashr.PayDeal)) then begin
      if (GetIVCashReservation(IVCashr,Jobr)) then begin
        if (unokf) then begin
          DeleteShopBask("IVCashVc",IVCashr.SerNr);
        end else begin
          detailf = true;
          if (restitfound) then begin
            if (nonblank(RestITr.ArtCode)) then begin
              PutIVCashInShopBask(IVCashr,RestITr.ArtCode,RestITr.Object,Jobr.SerNr);
              detailf = false;
            end;
          end;
          if (detailf) then begin
            ConsolidateIVCashr(IVCashr,aIVCashr);
            rwcnt = MatRowCnt(aIVCashr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(aIVCashr,i,aIVCashrw);
              PutIVCashRowInShopBask(aIVCashr,i,"",Jobr.SerNr);
            end;
          end;  
//          PutRestAccTipInShopBask(aIVCashr,"",Jobr.SerNr);
        end;
      end;  
    end;
  end;
  return;
end;

global
updating function LongInt IVCashVcRecordSave(var record IVCashVc IVCashp,record IVCashVc IVCash2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record UserVc USr;

  if (blankdate(IVCashp.RegDate)) then begin
    IVCashp.RegDate = CurrentDate;
  end;
  if (blanktime(IVCashp.RegTime)) then begin
    IVCashp.RegTime = CurrentTime;
  end;
  if (IVCashp.Invalid==0) then begin
    IVCashSumup(IVCashp,true);
    GetCurUser(USr);
    if (blank(IVCashp.Location)) then begin
      IVCashp.Location = USr.Location;
    end;    
    IVCashp.Prntdf = 1;
    if (IVCashp.OKFlag!=0) then begin
      IVCashp.Prntdf = 0;
      if (IVCashp.UpdStockFlag!=0) then begin
        IVCashp.LocOKNr = NextLocOKNr(IVCashp.Location);
      end;
    end;
  end;    
  if (blank(IVCashp.OfficialSerNr)) then begin
    FindNextIVCashVcOfficialSerialNr(IVCashp);
  end;
  IVCashVcRecordSave = res;
  RETURN;
END;

global
updating procedure IVCashVcCreateSoldGiftCert_Invalidate(record IVCashVc IVCashp)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  record GCVc GCr;
  record GCVc oldGCr;
  record GCSVc GCSr;
  record GCSVc oldGCSr;
  record GCRVc GCRr;
  
  if (CompanyProgramMode==kProgramModeLiveSync) then begin
    goto LIVCashVcCreateSoldGiftCert_Invalidate;
  end;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    if (IVCashrw.ovst==0) then begin
      if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
        GCSr.SerNr = IVCashrw.GCNr;
        if (ReadFirstMain(GCSr,1,true)) then begin
          RecordDelete(GCSr);
        end;
        GCr.SerNr = IVCashrw.GCNr;
        if (ReadFirstMain(GCr,1,true)) then begin
          RecordCopy(oldGCr,GCr);
          GCr.Closed = 0;
          if (RecordUpdate(oldGCr,GCr,true)==0) then begin
          end;
        end;
      end;
      if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
        GCRr.SerNr = IVCashrw.GCNr;
        if (ReadFirstMain(GCRr,1,true)) then begin
          RecordDelete(GCRr);
        end;
        GCSr.SerNr = IVCashrw.GCNr;
        if (ReadFirstMain(GCSr,1,true)) then begin
          RecordCopy(oldGCSr,GCSr);
          GCSr.Closed = 0;
          GCSr.Balance = GCSr.Balance + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
          if (RecordUpdate(oldGCSr,GCSr,true)==0) then begin
          end;
        end;
      end;
    end;
  end;
LIVCashVcCreateSoldGiftCert_Invalidate:;  
  return;
end;

global
updating procedure IVCashVcCreateSoldGiftCert(record IVCashVc IVCashp)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  record GCVc GCr;
  record GCVc oldGCr;
  record GCSVc GCSr;
  record GCSVc oldGCSr;
  record GCRVc GCRr;
  
  if (CompanyProgramMode==kProgramModeLiveSync) then begin
    goto LIVCashVcCreateSoldGiftCert;
  end;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
      GCr.SerNr = IVCashrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin
        RecordNew(GCSr);
//        GCSr.TransDate = GCr.TransDate;
        GCSr.TransDate = IVCashp.TransDate;
        GCSr.ExpiryDate = GCr.ExpiryDate;
        GCSr.Comment = GCr.Comment;
        GCSr.Amount = GCr.Amount;
        GCSr.Balance = GCr.Amount;
        GCSr.SerNr = GCr.SerNr;
        GCSr.BarCode = GCr.BarCode;
        GCSr.InvSerNr = IVCashp.SerNr;
        GCSr.FileName = "IVCashVc";
        if (RecordStore(GCSr,false)) then begin
          RecordCopy(oldGCr,GCr);
          GCr.Closed = 1;
          if (RecordUpdate(oldGCr,GCr,true)==0) then begin
          end;
        end;
      end;
    end;
    if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
      GCSr.SerNr = IVCashrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin
        RecordNew(GCRr);
//        GCRr.TransDate = GCSr.TransDate;
        GCRr.TransDate = IVCashp.TransDate;
        GCRr.ExpiryDate = GCRr.ExpiryDate;
        GCRr.Comment = GCSr.Comment;
        GCRr.Amount = MulRateToBase1(IVCashp.CurncyCode,IVCashrw.Sum,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
        GCRr.SerNr = NextSerNr("GCRVc",GCRr.TransDate,-1,false,"");            
        GCRr.GCSSerNr = GCSr.SerNr;
        GCRr.BarCode = GCSr.BarCode;
        GCRr.InvSerNr = IVCashp.SerNr;
        GCRr.FileName = "IVCashVc";
        if (RecordStore(GCRr,false)) then begin
          RecordCopy(oldGCSr,GCSr);
          GCSr.Balance = GCSr.Balance - GCRr.Amount;
          if (GCSr.Balance<=0) then begin
            GCSr.Closed = 1;
          end;
          if (RecordUpdate(oldGCSr,GCSr,true)==0) then begin
          end;
        end;
      end;
    end;
  end;
LIVCashVcCreateSoldGiftCert:;  
  return;
end;

global
updating function LongInt IVCashVcRecordSaveAfter(var record IVCashVc IVCashp,record IVCashVc IVCash2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  if (IVCashp.Invalid==0) then begin
    if (IVCashp.OKFlag!=0) then begin
      IVCashVcCreateSoldGiftCert(IVCashp);
      IVCashArtStats(IVCashp,false);
      SalesmanStats_IVCashVc(IVCashp,IVCash2p,false);
      IVCashUpdateSerialNr(IVCashp);
      IVCashUpdateItemHist(IVCashp,0);
      IVCashUpdateCashupHist(IVCashp);
      IVCashUpdateReservation(IVCashp,false);
    end;
  end;  
  if (nonblank(IVCashp.OfficialSerNr)) then begin
    UpdateOffSerNr(IVCashp.SerNr,"IVCashVc",0,IVCashp.OfficialSerNr,false);
  end;
  if (nonblank(IVCashp.OfficialSerNr2)) then begin
    UpdateOffSerNr(IVCashp.SerNr,"IVCashVc2",0,IVCashp.OfficialSerNr2,false);
  end;
  if (IVCashp.OKFlag!=0) then begin
    if (nonblank(IVCashp.LoyaltyCardNr) and (IVCashp.Points!=0)) then begin
      AddPointsHist(IVCashp.SerNr,"IVCashVc",1);
    end;   
    if (nonblank(IVCashp.LoyaltyCardNr)) then begin
      IVCashVc_LoyaltyCardPointsRedemption(IVCashp,false);
    end;
  end;
  IVCashStorePOSHist(IVCashp);
  IVCashVcRecordSaveAfter = res;
  RETURN;
END;

global
updating procedure IVCashUpdateStock(record IVCashVc IVCashp)
BEGIN
  val t,t2,q2;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Boolean isstruct;
  record MainStockBlock MSb;
  record INVc INr;
  record SHVc SHr;
  row SHVc SHrw2;
  Integer shrwcnt;
  Integer j;
  string 255 location;
     
  location = IVCashp.Location;
  BlockLoad(MSb);
  if (blank(location)) then begin location = MSb.MainStock; end;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    if (IVCashrw.stp==1) then begin
      if (IVCashp.UpdStockFlag!=0) then begin
        isstruct = ExpandStructItem(IVCashrw.ArtCode,IVCashrw.Recepy,IVCashrw.Quant,SHr);
        if (isstruct==false) then begin
          if (ShouldItemUpdateStock(IVCashrw.ArtCode)) then begin
            t2 = -IVCashrw.Quant;
            if (MSb.UnitConvCalc==0) then begin
              q2 = t2 * IVCashrw.Coefficient;
            end else begin
              q2 = t2 / IVCashrw.Coefficient;
            end;
            UpdateInstock("IVCashVc",IVCashp.SerNr,IVCashrw.ArtCode,location,IVCashp.TransDate,t2,t,t,t,t,q2,t,t,t);
          end;
        end else begin
          shrwcnt = MatRowCnt(SHr);
          for (j=0;j<shrwcnt;j=j+1) begin
            MatRowGet(SHr,j,SHrw2);
            if (ShouldItemUpdateStock(SHrw2.ArtCode)) then begin
              t2 = -SHrw2.Ship;
              if (MSb.UnitConvCalc==0) then begin
                q2 = t2 * SHrw2.Coefficient;
              end else begin
                q2 = t2 / SHrw2.Coefficient;
              end;
              UpdateInstock("IVCashVc",IVCashp.SerNr,SHrw2.ArtCode,location,IVCashp.TransDate,t2,t,t,t,t,q2,t,t,t);
            end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating function LongInt IVCashVcRecordImportAfter(var record IVCashVc IVCashp,record IVCashVc IVCash2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer err;

  if (IVCashp.Invalid==0) then begin
    if (IVCashp.OKFlag!=0) then begin
      IVCashArtStats(IVCashp,false);
      SalesmanStats_IVCashVc(IVCashp,IVCash2p,false);
      if (ImportingTextBackup==false and CanOKStockRecord(err)==true) then begin
//        IVCashUpdateItemHist(IVCashp,0);
//        IVCashUpdateStock(IVCashp);
        IVCashUpdateSerialNr(IVCashp);
      end;
    end;
  end;  
  IVCashVcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt IVCashVcRecordUpdate(var record IVCashVc IVCashp,record IVCashVc IVCash2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  IVCashSumup(IVCashp,true);
  if ((IVCash2p.Invalid==0) and (IVCashp.Invalid==0)) then begin
    if ((IVCash2p.OKFlag==0) and (IVCashp.OKFlag!=0)) then begin
      if (IVCashp.UpdStockFlag!=0) then begin
        IVCashp.LocOKNr = NextLocOKNr(IVCashp.Location);
      end;
      IVCashp.Prntdf = 0;
    end;  
  end;
  if ((IVCash2p.Invalid==0) and (IVCashp.Invalid!=0)) then begin
    if (IVCash2p.OKFlag!=0) then begin
      IVCashp.InvalidDate = CurrentDate;
      IVCashp.InvalidTime = CurrentTime;
      IVCashp.InvalidBy = CurrentUser;
    end;
  end;
  IVCashVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt IVCashVcRecordUpdateAfter(var record IVCashVc IVCashp,record IVCashVc IVCash2p,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((IVCash2p.Invalid==0) and (IVCashp.Invalid==0)) then begin
    if ((IVCash2p.OKFlag==0) and (IVCashp.OKFlag!=0)) then begin
      IVCashVcCreateSoldGiftCert(IVCashp);
      IVCashArtStats(IVCashp,false);
      SalesmanStats_IVCashVc(IVCashp,IVCash2p,true);
      IVCashUpdateSerialNr(IVCashp);
      IVCashUpdateItemHist(IVCashp,0);
      IVCashUpdateReservation(IVCashp,false);
      IVCashUpdateCashupHist(IVCashp);
    end;
  end;
  if (nonblank(IVCashp.OfficialSerNr)) then begin
    if (IVCashp.OfficialSerNr!=IVCash2p.OfficialSerNr) then begin
      UpdateOffSerNr(IVCashp.SerNr,"IVCashVc",0,IVCashp.OfficialSerNr,true);
    end;
  end else begin
    if (nonblank(IVCash2p.OfficialSerNr)) then begin
      DeleteOffSerNr(IVCash2p.SerNr,"IVCashVc");
    end;
  end;
  if (nonblank(IVCashp.OfficialSerNr2)) then begin
    if (IVCashp.OfficialSerNr2!=IVCash2p.OfficialSerNr2) then begin
      UpdateOffSerNr(IVCashp.SerNr,"IVCashVc2",0,IVCashp.OfficialSerNr2,true);
    end;
  end else begin
    if (nonblank(IVCash2p.OfficialSerNr2)) then begin
      DeleteOffSerNr(IVCash2p.SerNr,"IVCashVc2");
    end;
  end;
  if (nonblank(IVCashp.LoyaltyCardNr) and (IVCashp.Points!=0)) then begin
    if ((IVCashp.OKFlag!=0) and (IVCash2p.OKFlag==0)) then begin
      AddPointsHist(IVCashp.SerNr,"IVCashVc",1);
    end;
    if ((IVCashp.OKFlag==0) and (IVCash2p.OKFlag!=0)) then begin
      DeletePointsHist(IVCashp.SerNr,"IVCashVc");
    end; 
  end;
  if (nonblank(IVCashp.LoyaltyCardNr)) then begin
    if ((IVCashp.OKFlag!=0) and (IVCash2p.OKFlag==0)) then begin
      IVCashVc_LoyaltyCardPointsRedemption(IVCashp,false);
    end;
    if ((IVCashp.OKFlag==0) and (IVCash2p.OKFlag!=0)) then begin
      IVCashVc_LoyaltyCardPointsRedemption(IVCashp,true);
    end;
  end;
  if ((IVCash2p.Invalid==0) and (IVCashp.Invalid!=0)) then begin
    if (IVCash2p.OKFlag!=0) then begin
      IVCashVcCreateSoldGiftCert_Invalidate(IVCashp);
      IVCashArtStats(IVCashp,true);
      if (nonblank(IVCashp.LoyaltyCardNr) and (IVCashp.Points!=0)) then begin
        DeletePointsHist(IVCashp.SerNr,"IVCashVc");
      end;
      if (nonblank(IVCashp.LoyaltyCardNr)) then begin
        IVCashVc_LoyaltyCardPointsRedemption(IVCashp,true);
      end;
    end;
  end;
  IVCashUpdatePOSHist(IVCashp,IVCash2p);
  IVCashVcRecordUpdateAfter = res;
  RETURN;
END;
