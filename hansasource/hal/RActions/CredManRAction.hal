external procedure CredManVc_PasteCurncyCode(var record CredManVc);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Boolean TransInFiscal(Date);
external procedure AddTransAutoTransRows(record TRVc);
external procedure TRSumup(var record TRVc,var val);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean SerNrTestCredManVc(LongInt,Date,var Boolean);
external function Integer CashSerNumberTest(string,val,string,LongInt,var Boolean);
external procedure AddCredManTypeMatrix(var record CredManVc,record CredManTypeVc);
external function val GetIntRate(string,Date);

global
function LongInt CredManVcRecordDefaults(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record CredManTypeVc CredManTyper;
  record CredManSetBlock CredManSetb;
  
  BlockLoad(CredManSetb);
  CredManr.SerNr = -1;
  CredManr.SalesMan = CurrentUser;
  CredManr.TransDate = CurrentDate;
  CredManr.startDate = CurrentDate;
  CredManr.FirstInvDate = AddMonth(CredManr.startDate,1);
  CredManr.FirstInvDate = AddDay(CredManr.FirstInvDate,CredManSetb.InvDay - GetDay(CredManr.FirstInvDate));
  CredManr.Type = CredManSetb.DefaultType;
//  CredManr.DepositItem = CredManSetb.DepositItem;
  CredManTyper.Code = CredManr.Type;
  if (ReadFirstMain(CredManTyper,1,true)) then begin
    CredManr.DepositSum = CredManTyper.DepositSum;
    CredManr.DepositPrc = CredManTyper.DepositPrc;
    CredManr.Instalment = CredManTyper.Instalment;
    CredManr.PayDeal = CredManTyper.PayDeal;
    CredManr.InstalmentType = CredManTyper.InstalmentType;
    CredManr.InstalmentMonths = CredManTyper.InstalmentMonths;
    CredManr.RateType = CredManTyper.RateType;
  end;
  CredManr.CredManAcc = CredManSetb.CredManAcc;
  CredManr.ARAcc = CredManSetb.ARAcc;
//  CredManr.RateItem = CredManSetb.RateItem;
  if (CredManr.RateType==0) then begin
    CredManr.IntRate = GetIntRate(CredManr.Type,CredManr.TransDate);
  end;
  CredManVc_PasteCurncyCode(CredManr);
  AddCredManTypeMatrix(CredManr,CredManTyper);
  if (SingleUserMode) then begin
    CredManr.SerNr = NextSerNr("CredManVc",CredManr.TransDate,-1,false,"");
  end;
  CredManVcRecordDefaults = res;
  return;
END;

global
function LongInt CredManVcRecordDuplicate(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record CredManSetBlock CredManSetb;
  row CredManVc CredManrw;
  Date bldat;
  val blval;
  Integer i,rwcnt;
  
  BlockLoad(CredManSetb);
  CredManr.SerNr = -1;
  CredManr.SalesMan = CurrentUser;
  CredManr.TransDate = CurrentDate;
//  CredManr.InvUntil = bldat;
  CredManr.OKFlag = 0;
  CredManr.Approved = 0;
  CredManVc_PasteCurncyCode(CredManr);
  CredManr.IVNr = -1;
  CredManr.QTNr = -1;
  CredManr.CredManAcc = CredManSetb.CredManAcc;
  CredManr.ARAcc = CredManSetb.ARAcc;
  if (SingleUserMode) then begin
    CredManr.SerNr = NextSerNr("CredManVc",CredManr.TransDate,-1,false,"");
  end;
  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    CredManrw.InvoicedOn = -1;
    CredManrw.InvoicedSum = blval;
    MatRowPut(CredManr,i,CredManrw);
  end;
  CredManVcRecordDuplicate = res;
  return;
END;

global
function Integer MakeTransFromCredMan(record TRVc gTRp,record CredManVc CredManr,Boolean rpt,var string errfield)
BEGIN
  Integer res;
  record TRGenBlock TRGenRec;
  record IVVc IVr;
  record CredManSetBlock CredManSetb;
  record AccVc Accr;
  record TRVc lTRr;
  string 255 ftxt,otxt,taccnumber;
  string 255 tstr;
  val t,v;
  Boolean dc1,dc2;
  val rs,totsum;
  string 10 controlacc,aracc;
  Boolean invfound;

  res = 1085;
  BlockLoad(TRGenRec);
  BlockLoad(CredManSetb);
  IVr.SerNr = CredManr.IVNr;
  invfound = ReadFirstMain(IVr,1,true);
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.CredManGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromCredMan;
    end;
    if ((nonblankdate(TRGenRec.CredManStartDate)) and
        (CredManr.TransDate<TRGenRec.CredManStartDate) ) then begin
      res = 0;
      goto LMakeTransFromCredMan;
    end;
  end;
  gTRp.IntYc = CredManYc;
  gTRp.Number = CredManr.SerNr;
  gTRp.RefStr = "";
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      res = 1032;
      goto LMakeTransFromCredMan;
    end;
  end;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = CredManr.TransDate;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      res = 0;
      goto LMakeTransFromCredMan;
    end;
  end;
  if (invfound) then begin
    ftxt = "" & CredManr.IVNr & " " & CredManr.Addr0;
  end else begin
    ftxt = CredManr.Addr0;
  end;
  gTRp.Comment = ftxt;
  dc1 = true;
  dc2 = false;
  v = CredManr.InvSum4;
  rs = MulRateToBase1(CredManr.CurncyCode,v,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff);
  controlacc = CredManr.CredManAcc;
  if (blank(controlacc)) then begin
    controlacc = CredManSetb.CredManAcc;
  end;
  otxt = CredManr.Objects;
  Accr.AccNumber = controlacc;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 1007;
    errfield = "CredManAcc";
    goto LMakeTransFromCredMan;
  end;
  if (nonblank(Accr.Curncy)) then begin
    if (Accr.Curncy!=CredManr.CurncyCode) then begin
      res = 1217;
      errfield = "CredManAcc";
      goto LMakeTransFromCredMan;
    end;
  end;
  if (CheckTTRPerRow("CredManVc",controlacc,otxt,dc1,taccnumber,1)) then begin end;
  AddEuroCurncyTrRow(gTRp,controlacc,otxt,"",ftxt,rs,false,dc1,totsum,CredManr.CurncyCode,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,v,blankval,-1,false,taccnumber);
  aracc = CredManr.ARAcc;
  if (blank(controlacc)) then begin
    controlacc = CredManSetb.ARAcc;
  end;
  otxt = CredManr.ARAccObject;
  if (invfound) then begin
    ftxt = "" & CredManr.IVNr & " " & CredManr.Addr0;
  end;
  Accr.AccNumber = aracc;
  if (ReadFirstMain(Accr,1,true)==false) then begin
    res = 1007;
    errfield = "ARAccObject";
    goto LMakeTransFromCredMan;
  end;
  if (nonblank(Accr.Curncy)) then begin
    if (Accr.Curncy!=CredManr.CurncyCode) then begin
      res = 1217;
      errfield = "ARAccObject";
      goto LMakeTransFromCredMan;
    end;
  end;
  if (CheckTTRPerRow("CredManVc",aracc,otxt,dc2,taccnumber,1)) then begin end;
  AddEuroCurncyTrRow(gTRp,aracc,otxt,"",ftxt,rs,false,dc2,totsum,Accr.Curncy,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,v,blankval,-1,false,taccnumber);
  TRSumup(gTRp,t);
  AddTransAutoTransRows(gTRp);
  res = 0;
LMakeTransFromCredMan:;
  MakeTransFromCredMan = res;
  RETURN;
END;

global
updating function LongInt CredManVcRecordCheck(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res,oldnr;
  Integer insertmode,updatemode;
  Integer i,rwcnt,errcode;
  Boolean transf,gentrans,unokf;
  record TRVc gTRp;
  string 255 errstr;
  
  res = 0;
  insertmode = 1;
  updatemode = 2;
  oldnr = CredManr.SerNr;
  if (CredManr.SerNr<=0) then begin
    CredManr.SerNr = NextSerNr("CredManVc",CredManr.TransDate,-1,false,"");
  end;

//  if ((CredMan2r.DoneFlag==1) and (stat==updatemode)) then begin goto LCredManVcRecordCheck; end;
  if (SerNrTestCredManVc(CredManr.SerNr,CredManr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");
    res = -1;
    goto LCredManVcRecordCheck;
  end;
L12:;
  transf = false;
  if (CredManr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (CredMan2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (transf) then begin
    if (CredManr.QTNr>0 and CredManr.IVNr<=0) then begin
      RecordCheckError(20578,"",-1,"SerNr");
      res = -1;
      goto LCredManVcRecordCheck;
    end;
  end;
  if (gentrans==false) then begin transf = false; end;
  if (transf) then begin
    errcode = MakeTransFromCredMan(gTRp,CredManr,false,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,errstr);
      res = -1;
      goto LCredManVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==CredManYc)) then begin
      errstr = CheckTrans(gTRp,2,true);
      if (nonblank(errstr)) then begin
        RecordCheckError(1085,errstr,-1,"SerNr");
        res = -1;
        goto LCredManVcRecordCheck;
      end;
      SaveTrans(gTRp);
    end;
  end;

LCredManVcRecordCheck:;
  if (res!=0) then begin CredManr.SerNr = oldnr; end;
  CredManVcRecordCheck = res;
  return;
END;

global
function LongInt CredManVcRecordRemoveTest(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record CredManEventVc CredManEventr;
  string 200 thekey;

  res = 1;
  if (CredManr.OKFlag!=0) then begin
    res = 0;
  end;
  if (res==1) then begin
    thekey = "CredManTransDate:" & CredManr.SerNr;
    if (LoopKey(thekey,CredManEventr,1,true)) then begin
      res = 0;
    end;
  end;
  CredManVcRecordRemoveTest = res;
  return;
END;

updating procedure ARAdd4(record CredManVc CredManr,val PV,Boolean importf)
BEGIN
  record ARVc ARr;
  record ARVc oldARr;
  record IVVc IVr;
  Boolean found;
  Boolean delf;
  val rs;
  
  if (PV!=0) then begin
    delf = false;
    ARr.InvoiceNr = CredManr.IVNr;
    found = ReadFirstMain(ARr,1,true);
    RecordCopy(oldARr,ARr);
    if (found) then begin
    end else begin
      IVr.SerNr = CredManr.IVNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (IVr.Invalid!=0) then begin goto LARAdd4; end;
        ARr.InvoiceNr = CredManr.IVNr;
        ARr.CustCode = IVr.CustCode;
        ARr.CustName = IVr.Addr0;
        ARr.ARCurncyCode = IVr.CurncyCode;
        ARr.RVal = 0;
        ARr.BookRVal = 0;
        ARr.InvDate = IVr.InvDate;
        ARr.DueDate = IVr.PayDate;//CurrentDate;
        if (IVr.pdrdays==-1) then begin
          ARr.ARRebDate = ARr.DueDate;
        end else begin
          ARr.ARRebDate = AddDay(IVr.InvDate,IVr.pdrdays);
        end;
        if (IVr.pdrdays2==-1) then begin
          ARr.ARRebDate2 = ARr.DueDate;
        end else begin
          ARr.ARRebDate2 = AddDay(IVr.InvDate,IVr.pdrdays2);
        end;
      end else begin
        goto LARAdd4;
      end;
    end;
    rs = MulWithRateToBase1(CredManr.CurncyCode,CredManr.TransDate,PV,DefaultCurRoundOff);
    ARr.RVal = ARr.RVal + PV;
    ARr.BookRVal = ARr.BookRVal + rs;
    if (ARr.RVal==0) then begin delf = true; end;
    if (ARr.RVal<0) then begin 
      ARr.DueDate = "";
      ARr.ARRebDate = "";
      ARr.ARRebDate2 = "";
    end;    
    if (ARr.InvoiceNr==-1) then begin goto LARAdd4; end;
    if (delf==false) then begin
      if (found) then begin
        if (RecordUpdate(oldARr,ARr,false)==0) then begin end;
      end else begin
        if (RecordStore(ARr,false)) then begin end;        
      end;
    end else begin
      if (found==true) then begin
        RecordDelete(oldARr);
      end;
    end;
      //add the code checking CUBalVc Date jj
  end;
LARAdd4:;
  RETURN;
END;

global
updating procedure CredManIPrsStats(record CredManVc CredManr,Boolean deletef)
BEGIN
  record IPrsVc mainr;
  record IPrsVc IPrsr;
  record IVVc IVr;
  
  if (CredManr.Invalid==0 and CredManr.IVNr>0) then begin
    IVr.SerNr = CredManr.IVNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      mainr.AccNr = IVr.ARAcc;
    end else begin    
      IPrsr.IVNr = CredManr.IVNr;
      if (ReadFirstKey("IVKey",IPrsr,1,true)==false) then begin
        goto L88CredManIPrsStats;
      end;  
    end;  
  end;
  mainr.CustCode = CredManr.CustCode;
  mainr.CustDate = CredManr.TransDate;
  mainr.TransType = kIPrsTransTypeCredMan;
  mainr.TransNr = CredManr.SerNr;
  mainr.IVNr = CredManr.IVNr;
  mainr.TransDate = CredManr.TransDate;
  if (deletef) then begin
    if (ReadFirstMain(mainr,0,true)) then begin
      RecordDelete(mainr);
    end;
  end else begin
    if (RecordStore(mainr,false)) then begin end;
  end;
L88CredManIPrsStats:;
  RETURN;
END;

updating procedure UpdateARFromCredMan(record CredManVc CredManr,Boolean unokf,Boolean importf)
BEGIN
  val v;

  v = CredManr.InvSum4;
  if (unokf) then begin
    v = -CredManr.InvSum4;
  end;
  if (CredManr.IVNr!=-1) then begin
    v = -v;
    ARAdd4(CredManr,v,importf);
  end;
  RETURN;
END;

global
function LongInt CredManVcRecordSave(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  CredManVcRecordSave = res;
  return;
END;

global
updating function LongInt CredManVcRecordSaveAfter(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (CredManr.OKFlag==1) then begin
    UpdateARFromCredMan(CredManr,false,false);
    CredManIPrsStats(CredManr,false);
  end;
  CredManVcRecordSaveAfter = res;
  return;
END;

global
function LongInt CredManVcRecordUpdate(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  CredManVcRecordUpdate = res;
  return;
END;

global
updating function LongInt CredManVcRecordUpdateAfter(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((CredManr.OKFlag==1) and (CredMan2r.OKFlag==0)) then begin
    UpdateARFromCredMan(CredManr,false,false);
    CredManIPrsStats(CredManr,false);
  end;
  if ((CredManr.OKFlag==0) and (CredMan2r.OKFlag==1)) then begin
    DeleteTransaction(CredManr.SerNr,CredManYc);
    UpdateARFromCredMan(CredManr,true,false);
    CredManIPrsStats(CredManr,true);
  end;
  CredManVcRecordUpdateAfter = res;
  return;
END;

procedure ConvertCredMantoDualBase(record CredManVc CredManp)
BEGIN
  record BaseCurBlock bascur;

  BlockLoad(bascur);
  if (blank(CredManp.CurncyCode)) then begin
    CredManp.CurncyCode = bascur.BaseCur1;
  end;
  RETURN;
END;

global
updating function LongInt CredManVcRecordImport(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gToDualBase;
  record ConvMasterBlock cvm;
  Integer i,rwcnt;
  row CredManVc CredManrw;
      
  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (gToDualBase) then begin
    ConvertCredMantoDualBase(CredManr);
  end;
  CredManVcRecordImport = res;
  RETURN;
END;

global
updating function LongInt CredManrVcRecordImportAfter(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((CredManr.OKFlag==1) and (CredManr.Invalid==0)) then begin
    CredManIPrsStats(CredManr,false);
    UpdateARFromCredMan(CredManr,false,true);
  end;
  CredManrVcRecordImportAfter = res;
  RETURN;
END;

procedure RetainCredManStatus(record CredManVc CredManp,record CredManVc CredMan2p)
BEGIN
  Integer i,rwcnt;
  row CredManVc CredManrw;
  row CredManVc CredMan2rw;
  Integer rwcnt2;
  
  CredManp.IVNr = CredMan2p.IVNr;
  CredManp.QTNr = CredMan2p.QTNr;
  rwcnt = MatRowCnt(CredManp);
  rwcnt2 = MatRowCnt(CredMan2p);
  for (i=0;i<rwcnt;i=i+1) begin
    if (i<rwcnt2) then begin
      MatRowGet(CredManp,i,CredManrw);
      MatRowGet(CredMan2p,i,CredMan2rw);
      CredManrw.InvoicedOn = CredMan2rw.InvoicedOn;
      CredManrw.InvoicedSum = CredMan2rw.InvoicedSum;
      MatRowPut(CredManp,i,CredManrw);
    end;
  end;
  RETURN;
END;

global
function LongInt CredManVcRecordProtectFields(var record CredManVc CredManr,record CredManVc CredMan2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  RetainCredManStatus(CredMan2r,CredManr);
  CredManVcRecordProtectFields = res;
  RETURN;
END;

