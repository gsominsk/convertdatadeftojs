external updating procedure DeleteInvrs(string,string,LongInt,Date,string,Integer);
external updating procedure UpdateInvrs(string,string,LongInt,Date,string,Integer,string);
external procedure ExtractObj(string,var Integer,var string);
external procedure NextM4Number(string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external updating procedure DeleteInvBal(string,string);
external updating procedure UpdateInvBal(string,string,string,string,LongInt,val,Integer);
external procedure B1ToB2Val(val,val,val,var val);

global
function string 20 ObjectsExist(string objects)
begin  
  string 20 res;
  Integer pos;
  string 20 object;
  record ObjVc Objr;
  
  pos = 0;
  ExtractObj(objects,pos,object);
  while (nonblank(object)) begin
    Objr.Code = object;
    if (ReadFirstMain(Objr,1,true)==false) then begin
      res = object;
      goto LObjectsExist;
    end;
    ExtractObj(objects,pos,object);
  end;
LObjectsExist:;  
  ObjectsExist = res;
  return;
end;

global
procedure GetNextInventoryNr(var string invnr)
begin
  Boolean res;
  record AT2UnitVc AT2Unitr;
  record SRBlock SRRec;

  BlockLoad(SRRec);
  NextM4Number(SRRec.LastInventoryNr,invnr);
  if (nonblank(invnr)) then begin
    AT2Unitr.InventoryNr = invnr;
    if (ReadFirstMain(AT2Unitr,1,true)==false) then begin
      SRRec.LastInventoryNr = invnr;
    end else begin
      AT2Unitr.InventoryNr = "ZZZZZZZZZZZZZZZZZZZ";
      if (ReadLastMain(AT2Unitr,1,false)) then begin
        NextM4Number(AT2Unitr.InventoryNr,invnr);
        if (nonblank(invnr)) then begin
          SRRec.LastInventoryNr = invnr; 
        end else begin
          invnr = "1";
        end;
      end;
    end;
  end;
  return;
end;

global
function LongInt AT2UnitVcRecordCheck(var record AT2UnitVc AT2Unitp,record AT2UnitVc AT2Unit2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer i,l;
  string 1 c;
  string 255 tstr;
  record AT2UnitVc lastATUnitr;
  record AT2Vc AT2r;

  res = 0;
  if (blank(AT2Unitp.InventoryNr)) then begin
    tstr = AT2Unitp.InventoryNr;
    GetNextInventoryNr(tstr);
    AT2Unitp.InventoryNr = tstr;
  end;
  if (blank(AT2Unitp.InventoryNr)) then begin
    RecordCheckError(1058,"",-1,"InventoryNr");      
    res = -1;
    goto LAT2UnitVcRecordCheck;
  end;
/*  
what is this ?
  lastATUnitr.InventoryNr = AT2Unitp.InventoryNr;
  if (ReadFirstMain(lastATUnitr,1,true)) then begin
    RecordCheckError(1063,"",-1,"InventoryNr");      
    res = -1;
    goto LAT2UnitVcRecordCheck;
  end;
*/  

  if (nonblankdate(AT2Unitp.UsedFromDate)) then begin
    if (blankdate(AT2Unitp.StartingDate1)) then begin
      RecordCheckError(1058,"",-1,"StartingDate1");      
      res = -1;
      goto LAT2UnitVcRecordCheck;
    end;
  end;

  l = len(AT2Unitp.InventoryNr);
  for (i=0;i<=l;i=i+1) begin
    c = Mid(AT2Unitp.InventoryNr,i,1);
    if ((c==" ") or (c==",") or (c==":")) then begin
      RecordCheckError(1059,"",-1,"InventoryNr");      
      res = -1;
      goto LAT2UnitVcRecordCheck;
    end;
  end;
  tstr = ObjectsExist(AT2Unitp.Objects);
  if (nonblank(tstr)) then begin
    RecordCheckError(1043," " & tstr,-1,"Objects");      
    res = -1;
    goto LAT2UnitVcRecordCheck;
  end;
  if (nonblank(AT2Unitp.AT2Code)) then begin
    AT2r.Code = AT2Unitp.AT2Code;
    if (ReadFirstMain(AT2r,1,true)==false) then begin
      RecordCheckError(1290," ",-1,"AT2Code");      
      res = -1;
      goto LAT2UnitVcRecordCheck;
    end;
  end;
  if (blankdate(AT2Unitp.StartingDate1)) then begin
//    MessageBox(1462,"")
//    RecordCheckError(1854,"",-1,"StartingDate1");      
//    res = -1;
//    goto LAT2UnitVcRecordCheck;
  end;
LAT2UnitVcRecordCheck:;
  AT2UnitVcRecordCheck = res;
  return;
end;


global
function LongInt AT2UnitVcRecordRemoveTest(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record InvrsVc Invrsr;
  Boolean found,testf;
  
  res = 1;
  found = true;
  Invrsr.InventoryNr = AT2Unitr.InventoryNr;
  while (LoopMain(Invrsr,1,found)) begin
    if (Invrsr.InventoryNr!=AT2Unitr.InventoryNr) then begin
      found = false;
    end;
    if (found) then begin
      if (Invrsr.FileName!="AT2UnitVc") then begin
        found = false;
        testf = true;
      end;
    end;
  end;
  
  if (testf) then begin
    res = 0;
    MessageBox(1560,"");
  end;
  if (nonblankdate(AT2Unitr.EndDate)) then begin
    if (long3>0) then begin
      MessageBox(1560,"");
    end;
    res = 0;
  end;
  if (nonblankdate(AT2Unitr.UsedFromDate)) then begin
    if (long3>0) then begin
      MessageBox(1560,"");
    end;
    res = 0;
  end;
  AT2UnitVcRecordRemoveTest = res;  
  return;
end;

global
function LongInt AT2UnitVcRecordDefaults(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Date blankd;
  
  AT2Unitr.PurchVal = blankval;
  AT2Unitr.InitDeprVal1 = blankval;
  AT2Unitr.InitDeprVal2 = blankval;
  AT2Unitr.InsuranceVal = blankval;
  AT2Unitr.ResVal = blankval;
  AT2Unitr.MinDprVal = blankval;
  AT2Unitr.InvestVal = blankval;
  AT2Unitr.SubsidyVal = blankval;
  AT2Unitr.VATVal = blankval;
  AT2Unitr.VATReclaimed = blankval;
  AT2Unitr.Quantity = 1;
  AT2Unitr.ProdDate = blankd;
  AT2Unitr.EndDate = blankd;
  AT2Unitr.Activef = 0;
  AT2Unitr.Subsidyf = 0;
  AT2Unitr.VISerNr = -1;
  AT2UnitVcRecordDefaults = res;  
  return;
end;

global
function LongInt AT2UnitVcRecordDuplicate(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  Date blankd;
  
  AT2Unitr.Activef = 0;
  AT2Unitr.Subsidyf = 0;
  AT2Unitr.Comment = "";
  AT2Unitr.InventoryNr = "";
  AT2UnitVcRecordDuplicate = res;  
  return;
end;

global
function LongInt AT2UnitVcRecordInIndex(record AT2UnitVc Accr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (Accr.Activef!=0) then begin 
    if (indexname=="ActInventoryNr")  then begin res = 0; end;
    if (indexname=="ActAT2Code")  then begin res = 0; end;
  end;
  AT2UnitVcRecordInIndex = res;
  return;
end;

procedure AT2UnitVcConvertB1ToB2(var record AT2UnitVc AT2Unitp,string curp,val frp,var val to1p,var val to2p,var val br1p,var val br2p)
begin
  val t;
  
  B1ToB2Val(AT2Unitp.PurchVal,br1p,br2p,t);
  AT2Unitp.PurchVal = t;
  B1ToB2Val(AT2Unitp.InitDeprVal1,br1p,br2p,t);
  AT2Unitp.InitDeprVal1 = t;
  B1ToB2Val(AT2Unitp.InitDeprVal2,br1p,br2p,t);
  AT2Unitp.InitDeprVal2 = t;
  B1ToB2Val(AT2Unitp.InsuranceVal,br1p,br2p,t);
  AT2Unitp.InsuranceVal = t;
  B1ToB2Val(AT2Unitp.ResVal,br1p,br2p,t);
  AT2Unitp.ResVal = t;
  B1ToB2Val(AT2Unitp.MinDprVal,br1p,br2p,t);
  AT2Unitp.MinDprVal = t;
  B1ToB2Val(AT2Unitp.InvestVal,br1p,br2p,t);
  AT2Unitp.InvestVal = t;
  B1ToB2Val(AT2Unitp.SubsidyVal,br1p,br2p,t);
  AT2Unitp.SubsidyVal = t;
  B1ToB2Val(AT2Unitp.VATVal,br1p,br2p,t);
  AT2Unitp.VATVal = t;
  B1ToB2Val(AT2Unitp.VATReclaimed,br1p,br2p,t);
  AT2Unitp.VATReclaimed = t;
  B1ToB2Val(AT2Unitp.LandVal,br1p,br2p,t);
  AT2Unitp.LandVal = t;
  B1ToB2Val(AT2Unitp.FiscalVal,br1p,br2p,t);
  AT2Unitp.FiscalVal = t;
  return;
end;

global
function LongInt AT2UnitVcRecordImport(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Boolean gBase1ToBase2;
  record ConvMasterBlock cvm;
  val fr,to1,to2,br1,br2;
  string 5 crncycode;

  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    GetFullCurncyRate(crncycode,CurrentDate,fr,to1,to2,br1,br2);
    AT2UnitVcConvertB1ToB2(AT2Unitr,crncycode,fr,to1,to2,br1,br2);
  end;
  AT2UnitVcRecordImport = res;
  return;
end;

global
updating function LongInt AT2UnitVcRecordImportAfter(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  UpdateInvBal(AT2Unitr.InventoryNr,AT2Unitr.DepCode,AT2Unitr.RespPerson,"AT2UnitVc",-1,AT2Unitr.Quantity,2);
  UpdateInvrs(AT2Unitr.InventoryNr,AT2Unitr.DepCode,0,AT2Unitr.PurchaseDate,"AT2UnitVc",-1,"");   
  AT2UnitVcRecordImportAfter = res;
  return;
end;

global
updating function LongInt AT2UnitVcRecordSave(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  UpdateInvBal(AT2Unitr.InventoryNr,AT2Unitr.DepCode,AT2Unitr.RespPerson,"AT2UnitVc",-1,AT2Unitr.Quantity,2);
  if (blank(AT2Unitr.Quantity)) then begin
    AT2Unitr.Quantity = 1;
  end;
  AT2UnitVcRecordSave = res;
  return;
end;

global
updating function LongInt AT2UnitVcRecordSaveAfter(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record SRBlock SRRec;

  BlockLoad(SRRec);
  SRRec.LastInventoryNr = AT2Unitr.InventoryNr;
  BlockStore(SRRec);
  UpdateInvrs(AT2Unitr.InventoryNr,AT2Unitr.DepCode,0,AT2Unitr.PurchaseDate,"AT2UnitVc",-1,"");   
  AT2UnitVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt AT2UnitVcRecordUpdate(var record AT2UnitVc AT2Unitr,record AT2UnitVc AT2Unit2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (blank(AT2Unitr.Quantity)) then begin
    AT2Unitr.Quantity = 1;
  end;
  if ((AT2Unit2r.DepCode!=AT2Unitr.DepCode) or (AT2Unit2r.RespPerson!=AT2Unitr.RespPerson) or (AT2Unit2r.Quantity!=AT2Unitr.Quantity)) then begin
    DeleteInvBal(AT2Unit2r.InventoryNr,AT2Unit2r.DepCode);
    UpdateInvBal(AT2Unitr.InventoryNr,AT2Unitr.DepCode,AT2Unitr.RespPerson,"AT2UnitVc",-1,AT2Unitr.Quantity,2);
  end;
  AT2UnitVcRecordUpdate = res;
  return;
end;

global
updating function LongInt AT2UnitVcRecordUpdate(var record AT2UnitVc AT2Ur,record AT2UnitVc AT2U2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (AT2U2r.InventoryNr!=AT2Ur.InventoryNr or AT2U2r.DepCode!=AT2Ur.DepCode or AT2U2r.PurchaseDate!=AT2Ur.PurchaseDate) then begin
    DeleteInvrs(AT2U2r.InventoryNr,AT2U2r.DepCode,0,AT2U2r.PurchaseDate,"AT2UnitVc",-1);   
    UpdateInvrs(AT2Ur.InventoryNr,AT2Ur.DepCode,0,AT2Ur.PurchaseDate,"AT2UnitVc",-1,"");   
  end;
  return;
end;
