external function Integer CheckObjs(string,string,var string);
external function string 60 AddObjectToObjectList(string,string);
external function roundmode DefaultRoundMode();
external function Integer TRVc_AddRoundOffRow(var record TRVc,val,val,string,Boolean,Boolean,Boolean,val,var val);
external procedure GetITStockAcc(string,var string);
external procedure GetITCostAcc(string,var string);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean TransInFiscal(Date);

procedure GetINTransferStockAcc(Integer ItemGroupAccounts,string rowlocation,string location,string MainStock,string itgroup,string arstockacc,var string res,var string locobjstr)
BEGIN
  record LocationVc LocRec;

  res = "";
  locobjstr = "";
  if (nonblank(rowlocation)) then begin
    LocRec.Code = rowlocation;
  end else begin
    LocRec.Code = location;
  end;
  if (blank(LocRec.Code)) then begin
    LocRec.Code = MainStock;
  end;
  if (ReadFirstMain(LocRec,1,true)) then begin
    if (nonblank(LocRec.StockAcc)) then begin
      res = LocRec.StockAcc;
    end;    
    locobjstr = LocRec.Objects;
  end;
  if (nonblank(res)) then begin
    goto LGetINTransferStockAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITStockAcc(itgroup,res);
    if (nonblank(res)) then begin
      goto LGetINTransferStockAcc;
    end;
  end;
  res = arstockacc;
  if (nonblank(res)) then begin
    goto LGetINTransferStockAcc;
  end;
LGetINTransferStockAcc:;  
  RETURN;
END;

procedure GetINTransferCostAcc(Integer ItemGroupAccounts,string sdcostacc,string sdrowcostacc,string incostacc,string itgroup,var string res)
BEGIN
  res = "";
  res = sdrowcostacc;
  if (nonblank(res)) then begin
    goto LGetINTransferCostAcc;
  end;
  res = sdcostacc;
  if (nonblank(res)) then begin
    goto LGetINTransferCostAcc;
  end;
  res = incostacc;
  if (nonblank(res)) then begin
    goto LGetINTransferCostAcc;
  end;
  if (ItemGroupAccounts!=0) then begin
    GetITCostAcc(itgroup,res);
    if (nonblank(res)) then begin
      goto LGetINTransferCostAcc;
    end;
  end;
LGetINTransferCostAcc:;
  RETURN;
END;

global
function Integer AddINTransferCostRows(record TRVc gTRp,record MainStockBlock MainStockRec,record CostAccBlock CostAccRec,record AccBlock ARAccRec,
                                       record INTransferVc INTransferp,row INTransferVc INTransferrw,
                                       string frlocation,Boolean dc1,Boolean dc2,val baserate1,val baserate2,var val TotSum)
BEGIN
  Integer res;
  string 10 sdcostacc,stockacc;
  val t1;
  string 255 tstr,objstr,locobjstr,errstr;
  record INVc INr;
  record LocationVc ToLocr;

  ToLocr.Code = INTransferp.Location;
  ReadFirstMain(ToLocr,1,true);
  sdcostacc = INTransferp.CostAcc;
  if (nonblank(INTransferrw.CostAcc)) then begin
    sdcostacc = INTransferrw.CostAcc;
  end;
  INr.Code = INTransferrw.ArtCode;
  objstr = "";
  if (ReadFirstMain(INr,1,true)==false) then begin
    INr.Objects = "";
    tstr = "";
  end else begin   
    objstr = AddObjectToObjectList(INr.Objects,objstr);
  end;  

  t1 = INTransferrw.Quant*INTransferrw.FIFO;
  t1 = Round(t1,DefaultRoundMode);
  tstr = INr.Name;
  objstr = AddObjectToObjectList(INTransferp.Objects,objstr);
  objstr = AddObjectToObjectList(INTransferrw.Objects,objstr);
  GetINTransferCostAcc(CostAccRec.ItemGroupAccounts,INTransferp.CostAcc,INTransferrw.CostAcc,INr.CostAcc,INr.Group,sdcostacc);
  objstr = AddObjectToObjectList(objstr,ToLocr.Objects);
  if (GetAccName(sdcostacc,tstr,60)==false) then begin
    res = 1947;
    goto LAddINTransferCostRows;
  end;
  res = CheckObjs(sdcostacc,objstr,errstr);
  if (res!=0) then begin
    goto LAddINTransferCostRows;
  end;
  AddEuroTrRow(gTRp,sdcostacc,objstr,"",tstr,t1,baserate1,baserate2,true,dc1,TotSum,false,"","","");

  GetINTransferStockAcc(CostAccRec.ItemGroupAccounts,"",frlocation,MainStockRec.MainStock,INr.Group,ARAccRec.StockAcc,stockacc,locobjstr);
  locobjstr = AddObjectToObjectList(INTransferp.Objects,locobjstr);
  locobjstr = AddObjectToObjectList(INTransferrw.Objects,locobjstr);
  if (GetAccName(stockacc,tstr,60)==false) then begin
    res = 2120;
    goto LAddINTransferCostRows;
  end;
  res = CheckObjs(stockacc,locobjstr,errstr);
  if (res!=0) then begin
    goto LAddINTransferCostRows;
  end;
  AddEuroTrRow(gTRp,stockacc,locobjstr,"",tstr,t1,baserate1,baserate2,true,dc2,TotSum,false,"","","");
LAddINTransferCostRows:;  
  AddINTransferCostRows = res;
  RETURN;
END;

global
function Integer MakeTransFromINTransfer(record TRVc gTRp,record INTransferVc INTransferp,Boolean rpt)
BEGIN
  Integer res;
  record MainStockBlock MainStockRec;
  record CostAccBlock CostAccRec;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  record INVc INr;
  record ITVc ITr;
  record TRVc locTRr;
  row INTransferVc INTransferrw;
  row SHVc SH2rw;
  Integer rwcnt,rwcnt2;
  Integer i,j;
  string 255 ftxt,tstr;
  val t1,VATSum,TotSum;
  val t,rs,structrs;
  val baserate1,baserate2,temp;
  Boolean dc1,dc2;
  Boolean isstruct,infound;
  string 5 orobjstr;
  string 255 objstr;
  string 10 frlocation;
  string 20 curncy;
          
  BlockLoad(MainStockRec);
  BlockLoad(CostAccRec);
  BlockLoad(ARAccRec);
  BlockLoad(TRGenRec);
  frlocation = INTransferp.FrLocation;
  if (blank(frlocation)) then begin
    frlocation = MainStockRec.MainStock;
  end;
  RecordNew(gTRp);
  if (rpt==false) then begin
    if (TRGenRec.INTransferGenTrans==0) then begin
      res = 0;
      goto LMakeTransFromINTransfer;
    end;
  end;  
  if (rpt==false) then begin
    if ((nonblankdate(TRGenRec.INTransferStartDate)) and
        (INTransferp.TransDate<TRGenRec.INTransferStartDate)) then begin
      res = 0;
      goto LMakeTransFromINTransfer;
    end;
  end;
  if (true) then begin
    gTRp.IntYc = INTransferYc;
    gTRp.Number = INTransferp.SerNr;
    gTRp.RefStr = "";
  end;
  if (rpt==false) then begin
    locTRr.IntYc = gTRp.IntYc;
    locTRr.Number = gTRp.Number;
    if (ReadFirstMain(locTRr,0,true)) then begin
      res = 0;
      goto LMakeTransFromINTransfer;
    end; 
  end;
  objstr = "";
  orobjstr = "";  
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = INTransferp.TransDate;
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    res = 1075;
    goto LMakeTransFromINTransfer;
  end;
  curncy = "";
  GetFullCurncyRate(curncy,gTRp.TransDate,temp,temp,temp,baserate1,baserate2);
  ftxt = INTransferp.Comment;
  gTRp.Comment = ftxt;
  TotSum = 0;
  VATSum = 0;
  dc1 = true;
  dc2 = false;
  rwcnt = MatRowCnt(INTransferp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INTransferp,i,INTransferrw);
    if (nonblank(INTransferrw.ArtCode)) then begin
      res = AddINTransferCostRows(gTRp,MainStockRec,CostAccRec,ARAccRec,INTransferp,INTransferrw,frlocation,dc1,dc2,baserate1,baserate2,TotSum);
      if (res!=0) then begin
        goto LMakeTransFromINTransfer;
      end;
    end;
  end;
  res = TRVc_AddRoundOffRow(gTRp,baserate1,baserate2,"",false,false,false,TotSum,TotSum);
  if (res!=0) then begin
    goto LMakeTransFromINTransfer;
  end;
LMakeTransFromINTransfer:;
  MakeTransFromINTransfer = res;
  RETURN;
END;
