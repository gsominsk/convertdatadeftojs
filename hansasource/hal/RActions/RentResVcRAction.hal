external function LongInt DateDiff(Date,Date);
external function Boolean IntSerialNrAvail(string,string,string,val);
external function Integer ActLenClass(Date,Date);
external function Boolean CheckDblRentRes(record RentResVc);
external function Boolean CustIsAuth(string,string,Date,Date);
external function Boolean CheckRentCustCreditLimit(string,string,string,val,Date,Date);
external updating procedure UpdateRentResBook(record RentResVc,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
function LongInt RentResVcRecordDefaults(var record RentResVc RentResr,record RentResVc RentRes2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RentControlBlock RCr;
  Time blankt;
  
  BlockLoad(RCr);
  RentResr.SerNr = -1;
  RentResr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    RentResr.SerNr = NextSerNr("RentResVc",RentResr.TransDate,-1,false,"");
  end;
  RentResr.StartTime = blankt;
  RentResr.EndTime = blankt;
  RentResr.AgreementNr = -1;
  RentResr.Price = BlankVal;
  RentResr.vRebate = BlankVal;
  RentResr.InvQuant = BlankVal;
  RentResr.RentQuant = 1;
  RentResr.RentResDel = BlankVal;
  RentResr.RentResRet = BlankVal;
  RentResr.RentResCol = BlankVal;
  RentResr.RentResInsp = BlankVal;
  RentResr.Sum = BlankVal;
  RentResr.AdvPrActive = 0;
  RentResr.AgreeStatus = RCr.AgreeStatusCreated;
  RentResVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt RentResVcRecordDuplicate(var record RentResVc RentResr,record RentResVc RentRes2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RentControlBlock RCr;
  row RentResVc RentResrw;
  Integer rwcnt,i;
  Date bldat;
  
  BlockLoad(RCr);
  RentResr.SerNr = -1;
  RentResr.CustOrdNr = "";
  RentResr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    RentResr.SerNr = NextSerNr("RentResVc",RentResr.TransDate,-1,false,"");
  end;
  RentResr.RentResDel = BlankVal;
  RentResr.RentResRet = BlankVal;
  RentResr.RentResCol = BlankVal;
  RentResr.RentResInsp = BlankVal;
  RentResr.AgreeStatus = RCr.AgreeStatusCreated;
  RentResr.LastChargeDate = bldat;
  RentResr.EndDate = bldat;
  RentResr.LastInvoiceDate = bldat;
  RentResr.OriginalSerNr = -1;
  RentResr.Done = 0;
  RentResr.AdvPrActive = 0;
  rwcnt = MatRowCnt(RentResr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentResr,i,RentResrw);
    RentResrw.Del = BlankVal;
    RentResrw.Ret = BlankVal;
    RentResrw.Col = BlankVal;
    RentResrw.Inv = BlankVal;
    MatRowPut(RentResr,i,RentResrw);
  end;
  RentResVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function LongInt RentResVcRecordCheck(var record RentResVc RentResp,record RentResVc RentRes2p,LongInt stat,LongInt check)
BEGIN
  LongInt res,sernr;
  record MainStockBlock MainStockRec;
  record AgreementVc Agreer;
  record INVc INr;
  record RentINVc RentINr;
  row RentResVc RentResrw;
  Integer insertmode,updatemode;
  LongInt oldnr;
  string 10 loc2;
  val rentqty;
  record RentControlBlock RCr;

  res = 0;
  BlockLoad(RCr);
  BlockLoad(MainStockRec);
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  oldnr = RentResp.SerNr; 
  if (RentResp.SerNr<=0) then begin
    RentResp.SerNr = NextSerNr("RentResVc",RentResp.TransDate,-1,false,"");
  end;
  if (stat==updatemode) then begin
    if (RentResp.SerNr<=0) then begin
      RentResp.SerNr = RentRes2p.SerNr;
    end;
  end;      
  if (RentResp.AgreementNr==-1) then begin
    RecordCheckError(1058,"",-1,"AgreementNr");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  Agreer.SerNr = RentResp.AgreementNr;
  if (ReadFirstMain(Agreer,1,true)==false) then begin
    RecordCheckError(1290,"",-1,"AgreementNr");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  if ((Agreer.OKFlag==0) or (Agreer.AgreeStatus>0)) then begin
    RecordCheckError(2161,"",-1,"AgreementNr");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  if (nonblankdate(RentResp.EndDate)) then begin
    if (RentResp.TransDate>RentResp.EndDate) then begin
      RecordCheckError(20851,"",-1,"EndDate");
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end;
  if (Agreer.AgreeStatus>0) then begin
    RecordCheckError(2161,"",-1,"AgreementNr");
    res = -1;
    goto LRentResVcRecordCheck;    
  end;
  if (RCr.AuthCustf!=0) then begin
    if (blank(RentResp.ClientContact)) then begin
      RecordCheckError(1058,"",-1,"ClientContact");
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end;
  if (nonblank(RCr.AgreeStatusReturned)) then begin
    if (RentResp.AgreeStatus==RCr.AgreeStatusReturned) then begin
      if ((RentResp.RentResDel-RentResp.RentResRet)!=0) then begin
        RecordCheckError(1721,"",-1,"AgreeStatus");
        res = -1;
        goto LRentResVcRecordCheck;
      end;
    end;
  end;
  if ((RentResp.Done!=0) and (RentRes2p.Done==0)) then begin
    if (RentResp.AgreeStatus!=RCr.AgreeStatusDone) then begin
      RecordCheckError(1721,"",-1,"AgreeStatus");
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end;
  if ((RentResp.Done!=0) and (RentRes2p.Done==0)) then begin
    if ((RentResp.RentResDel-RentResp.RentResRet)!=0) then begin
      RecordCheckError(1722,"",-1,"AgreeStatus");
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end;
  if (nonblank(RCr.AgreeStatusDone)) then begin
    if (RentResp.AgreeStatus==RCr.AgreeStatusDone) then begin
      if (RentResp.Done==0) then begin
        RecordCheckError(1721,"",-1,"AgreeStatus");
        res = -1;
        goto LRentResVcRecordCheck;
      end;
    end;
  end;
  if (CustIsAuth(Agreer.CustCode,RentResp.ClientContact,RentResp.TransDate,Agreer.TransDate)==false) then begin
    RecordCheckError(2045,"",-1,"ClientContact");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  if (CheckRentCustCreditLimit(Agreer.CustCode,RentResp.Code,RentResp.SerialNr,RentResp.RentQuant-RentResp.RentResDel,Agreer.TransDate,Agreer.TransDate)==false) then begin
    RecordCheckError(1164,"",-1,"RentQuant");      
    res = -1; 
    goto LRentResVcRecordCheck;
  end;
  if (RentResp.TransDate<Agreer.startDate) then begin
    RecordCheckError(2160,"",-1,"TransDate");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  if (blank(RentResp.Code)) then begin
    RecordCheckError(1058,"",-1,"Code");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  if (blank(RentResp.AgreeType)) then begin
    RecordCheckError(1058,"",-1,"AgreeType");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  RentINr.Code = RentResp.Code;
  RentINr.SerialNr = RentResp.SerialNr;
  if (ReadFirstMain(RentINr,2,true)) then begin
    if (RentINr.Terminated<>0) then begin
      RecordCheckError(1266,RentResp.SerialNr,-1,"SerialNr");
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end else begin
    RecordCheckError(2047,"",-1,"Code");
    res = -1;
    goto LRentResVcRecordCheck;
  end;
  if (nonblankdate(RentINr.PurchaseDate)) then begin
    if (RentINr.PurchaseDate>RentResp.TransDate) then begin
      RecordCheckError(2047,"",-1,"TransDate");
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end;
  if (nonblankdate(Agreer.endDate)) then begin
    if ((RentResp.TransDate>Agreer.endDate) or (RentResp.EndDate>Agreer.endDate)) then begin
      RecordCheckError(2160,"",-1,"EndDate");
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end;
  loc2 = RentResp.Location;
  if (nonblank(Agreer.Location)) then begin
    loc2 = Agreer.Location;
  end;
  if (blank(loc2)) then begin
    loc2 = MainStockRec.MainStock;
  end;
  INr.Code = RentResp.InvItem;
  if (ReadFirstMain(INr,1,true)) then begin
    if ((INr.ItemType>0) and (INr.ItemType<3)) then begin
      if (INr.ItemType==1) then begin
        RecordCheckError(1836,"",-1,"InvItem");
      end else begin
        RecordCheckError(1826,"",-1,"InvItem");
      end;
      res = -1;
      goto LRentResVcRecordCheck;
    end;
  end;
  if (RentResp.RentQuant==BlankVal) then begin
    RentResp.RentQuant = 1;
  end;
  if (RCr.CheckCustOrdNr == 1) then begin
    if (blank(RentResp.CustOrdNr)) then begin
       MessageBox(2284,"");
    end;
  end;
  rentqty = rentqty - RentResp.RentResDel;
  INr.Code = RentResp.Code;
  if (ReadFirstMain(INr,1,true)) then begin
//    if ((INr.SerNrf>0) and (INr.SerNrf<3)) then begin
    if (INr.SerNrf==1) then begin
      if (RentResp.RentQuant>1.00) then begin
        RecordCheckError(2211,"",-1,"RentQuant");      
        res = -1; 
        goto LRentResVcRecordCheck;
      end;
      if (nonblank(RentResp.SerialNr)) then begin
        if (CheckDblRentRes(RentResp)) then begin
          RecordCheckError(2162,"",-1,"SerialNr");      
          res = -1; 
          goto LRentResVcRecordCheck;
        end;
      end;
    end;
  end;
LRentResVcRecordCheck:;
  if (res!=0) then begin
    RentResp.SerNr = oldnr;
  end;
  RentResVcRecordCheck = res;
  RETURN;
END;

global
procedure SetRentResDone(var record RentResVc RentResr)
begin
  row RentResVc RentResrw;
  Integer rwcnt,i;
  Boolean setdonef;
  
  setdonef = false;
  if (RentResr.RecepyItem==0) then begin
    if (RentResr.RentQuant>0) then begin
      if (RentResr.RentResDel==RentResr.RentQuant) then begin
        if (RentResr.RentResRet==RentResr.RentResDel) then begin
          setdonef = true;
        end;
      end;
    end;
  end;
  rwcnt = MatRowCnt(RentResr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentResr,i,RentResrw);
    if (RentResrw.Type==0) then begin
      if (RentResrw.Quant>0) then begin
        if (RentResrw.Del==RentResrw.Quant) then begin
          if (RentResrw.Ret<>RentResrw.Del) then begin
            setdonef = false;
          end;
        end else begin
          setdonef = false;
        end;
      end;
    end;
  end;
  if (setdonef) then begin
    RentResr.Done = 1;
  end;
  return;
end;

function Boolean ThisItemInPL(string plcode,string custcode,string itemcode,record RentControlBlock RCb)
begin
  Boolean res;
  record PLVc PLr;
  
  if (RCb.AdvSkipIfNotOnPL==0) then begin
    res = true;
  end else begin
    res = false;
    PLr.PLCode = plcode;
    PLr.ArtCode = itemcode;
    PLr.CustCode = itemcode;
    if (ReadFirstMain(PLr,3,true)) then begin
      res = true;
    end;
    if (res==false) then begin
      PLr.PLCode = plcode;
      PLr.ArtCode = itemcode;
      if (ReadFirstMain(PLr,2,true)) then begin
        res = true;
      end;
    end;
  end;
  ThisItemInPL = res;
  return;
end;

function string 5 FindCustomerPLCode(string custcode,string dealercode,string itemcode,Integer periodunit,LongInt perlength,record RentControlBlock RCb)
begin
  string 5 res;
  record CUVc CUr;
  record CUVc dealCUr;
  record CCatVc CCatr;
  record ContactRelVc ContactRelr,ContactRel2r;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.PLCode)) then begin
      if (ThisItemInPL(CUr.PLCode,custcode,itemcode,RCb)) then begin
        res = CUr.PLCode;
        goto LFindCustomerPLCode;
      end;
    end;
    CCatr.Code = CUr.CustCat;
    if (ReadFirstMain(CCatr,1,true)) then begin
      if (nonblank(CCatr.PLCode)) then begin
        if (ThisItemInPL(CCatr.PLCode,custcode,itemcode,RCb)) then begin
          res = CCatr.PLCode;
          goto LFindCustomerPLCode;
        end;
      end;
    end;
    ContactRelr.ContactCode = custcode;
    if (ReadFirstKey("ContactCode",ContactRelr,1,true)) then begin
      ContactRel2r.ContactCode = ContactRelr.CustCode;
      if (ReadFirstKey("ContactCode",ContactRel2r,1,true)) then begin
        if (ContactRel2r.CustCode==custcode) then begin goto LSkipContactRel; end;
      end;
      res = FindCustomerPLCode(ContactRelr.CustCode,dealercode,itemcode,periodunit,perlength,RCb);
    end;
  end;
LSkipContactRel:;
  if (blank(res)) then begin
    if (dealercode!=custcode) then begin
      res = FindCustomerPLCode(dealercode,dealercode,itemcode,periodunit,perlength,RCb);
    end;
  end;
LFindCustomerPLCode:;
  FindCustomerPLCode = res;
  return;
end;

function string 5 FindRentalPriceListPLCode(string custcode,string dealercode,string site,string itemcode,Date thedat,Integer periodunit,LongInt perlength,record RentControlBlock RCb)
begin
  string 5 res;
  record CUVc CUr;
  record RentalPriceListsVc RPLr;
  record RentalPriceListsVc theRPLr;
  row RentalPriceListsVc RPLrw;
  Integer rwcnt,i;
  record CCatVc CCatr;
  Boolean foundf,testf;
  Boolean foundonef;
  Date bldat;
  
  if (CountRecords("RentalPriceListsVc")>0) then begin
    CUr.Code = dealercode;
    if (ReadFirstMain(CUr,1,true)) then begin
      foundonef = false;
      RPLr.Code = CUr.Code;
      RPLr.StartDate = thedat;
      foundf = true;
      while (LoopMain(RPLr,2,foundf)) begin
        if (RPLr.Code!=CUr.Code) then begin
          foundf = false;
        end;
        if (RPLr.StartDate>thedat) then begin
          foundf = false;
        end;
        if (foundf) then begin
          if ((RPLr.StartDate<=thedat) and (RPLr.EndDate>=thedat)) then begin
            RecordCopy(theRPLr,RPLr);
            foundf = false;
            foundonef = true;
          end;
          if ((blankdate(RPLr.StartDate)) and (blankdate(RPLr.EndDate))) then begin
            RecordCopy(theRPLr,RPLr);
            foundonef = true;
          end;
        end;
      end;
      if (foundonef==false) then begin
        RPLr.Code = CUr.Code;
        RPLr.StartDate = bldat;
        foundonef = ReadFirstMain(RPLr,2,true);
      end;
      if (foundonef) then begin
        rwcnt = MatRowCnt(RPLr);
        if (rwcnt>0) then begin
          
        end else begin
          
        end;
      end;
    end;
  end;
  FindRentalPriceListPLCode = res;
  return;
end;

global
function string 5 FindRentalPriceList(string custcode,string dealercode,string defpl,string site,string itemcode,Date thedat,Integer periodunit,LongInt perlength,record RentControlBlock RCb)
begin
  string 5 res;
  record DelAddrVc DelAddrr;
  Boolean delfoundf;
  
  if (nonblank(defpl)) then begin
    res = defpl;
    goto LFindRentalPriceList;
  end;
  DelAddrr.CustCode = custcode;
  DelAddrr.DelCode = site;
  delfoundf = ReadFirstMain(DelAddrr,2,true);
  if (delfoundf==false) then begin
    DelAddrr.DelCode = site;
    delfoundf = ReadFirstMain(DelAddrr,1,true);
  end;
  if (delfoundf) then begin
    if (nonblank(DelAddrr.PriceList)) then begin
      if (ThisItemInPL(DelAddrr.PriceList,custcode,itemcode,RCb)) then begin
        res = DelAddrr.PriceList;
        goto LFindRentalPriceList;
      end;
    end;
  end;
  res = FindRentalPriceListPLCode(custcode,dealercode,site,itemcode,thedat,periodunit,perlength,RCb);
  if (blank(res)) then begin
    res = FindCustomerPLCode(custcode,dealercode,itemcode,periodunit,perlength,RCb);
  end;
LFindRentalPriceList:;
  FindRentalPriceList = res;
  return;
end;

global
function val FindRentalPrice(record RentResVc RentResr,Date thefrdate)
begin
  val res;
  record AdvPriceRecVc AdvPricer;
  row AdvPriceRecVc AdvPricerw;
  Integer i,rwcnt;
  
  if (RentResr.AdvPrActive==0) then begin
    res = RentResr.Price;
  end else begin
    AdvPricer.SerNr = RentResr.SerNr;
    AdvPricer.FileName = "RentResVc";
    AdvPricer.RowNr = -1;
    if (ReadFirstMain(AdvPricer,3,true)) then begin
      rwcnt = MatRowCnt(AdvPricer);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(AdvPricer,i,AdvPricerw);
        if (AdvPricerw.PeriodType==0) then begin
          if (DateInRange(thefrdate,AdvPricerw.StartDate,AdvPricerw.EndDate)) then begin
            res = AdvPricerw.Price;
          end;
        end else begin
          if (DateInRange(thefrdate,AdvPricerw.StartDate,AdvPricerw.EndDate)) then begin
            res = AdvPricerw.Price;
          end else begin
            if (BlankDate(AdvPricerw.EndDate)) then begin
              if (thefrdate>AdvPricerw.StartDate) then begin
                res = AdvPricerw.Price;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  FindRentalPrice = res;
  return;
end;

global
updating procedure CreateRentResAdvPrice(var record RentResVc RentResr)
begin
  record AgreementVc Agreementr;
  record AgreeTypeVc AgreeTyper;
  row AgreeTypeVc AgreeTyperw;
  record AdvPriceRecVc oldAdvPricer;
  record AdvPriceRecVc AdvPricer;
  record RentControlBlock RCb;
  row AdvPriceRecVc AdvPricerw;
  Date thedat;
  Integer i,rwcnt,addto;
  record INVc INr;
  record CUVc CUr;
  string 20 curitemcode;
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,tax2prc;
  Boolean calcprice,dummyf;
  LongInt dlen;
  Time blankt;
  
  BlockLoad(RCb);
  if (RCb.ChargeForFirstDay!=0) then begin
    addto = 1;
  end else begin
    addto = 0;
  end;
  RentResr.AdvPrActive = 0;
  AgreeTyper.Code = RentResr.AgreeType;
  if (ReadFirstMain(AgreeTyper,1,true)) then begin
    Agreementr.SerNr = RentResr.AgreementNr;
    if (ReadFirstMain(Agreementr,1,true)==false) then begin
      RecordNew(Agreementr);
    end;
    rwcnt = MatRowCnt(AgreeTyper);
    if (rwcnt>0) then begin
      thedat = RentResr.TransDate;
      AdvPricer.SerNr = RentResr.SerNr;
      AdvPricer.FileName = "RentResVc";
      AdvPricer.RowNr = -1;
      AdvPricer.ItemCode = RentResr.Code;
      AdvPricer.ItemName = RentResr.Name;
      AdvPricer.InvItemCode = RentResr.InvItem;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(AgreeTyper,i,AgreeTyperw);
        ClearRow(AdvPricer,AdvPricerw,1);
        AdvPricerw.PeriodType = AgreeTyperw.PeriodType;
        AdvPricerw.InvBeforeDays = AgreeTyperw.InvBeforeDays;
        AdvPricerw.PeriodUnit = AgreeTyperw.PeriodUnit;
        AdvPricerw.Length = AgreeTyperw.Length;
        AdvPricerw.StartDate = thedat;
        AdvPricerw.PLCode = AgreeTyperw.PLCode;
        AdvPricerw.Comment = AgreeTyperw.Comment;
        CUr.Code = Agreementr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin
        end;
        if (RCb.AdvUseInvItemPrice==0) then begin
          curitemcode = AdvPricer.InvItemCode;
        end else begin
          curitemcode = AdvPricer.ItemCode;
        end;
        if (blank(AdvPricerw.PLCode)) then begin
          AdvPricerw.PLCode = FindRentalPriceList(Agreementr.CustCode,"",Agreementr.PriceList,RentResr.Site,curitemcode,thedat,AdvPricerw.PeriodUnit,AdvPricerw.Length,RCb);
        end;
        if (AgreeTyperw.PeriodUnit==0) then begin
          if (AgreeTyperw.Length>0) then begin
            thedat = AddDay(thedat,AgreeTyperw.Length - addto);
            AdvPricerw.EndDate = thedat;
          end;
        end else begin
          if (AgreeTyperw.Length>0) then begin
            thedat = AddDay(AddMonth(thedat,AgreeTyperw.Length),-addto);
            AdvPricerw.EndDate = thedat;
          end;
        end;
        dlen = DateDiff(AdvPricerw.EndDate,AdvPricerw.StartDate) + addto;
        thedat = AddDay(thedat,1);

        INr.Code = curitemcode;
        if (GetItemPriceDiscount3(INr.Code,AdvPricerw.Length,INr,Agreementr.CurncyCode,0,0,0,0,0,
              Agreementr.LangCode,Agreementr.CustCat,AdvPricerw.PLCode,Agreementr.RebCode,
              price,curitemname,reb,vatcode,cost,salesacc,
              Agreementr.ExportFlag,calcprice,CurrentDate,blankt,Agreementr.CustCode,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
          AdvPricerw.Price = price;
        end;
        if (AdvPricerw.PeriodType==0) then begin
          AdvPricerw.Price = AdvPricerw.Price * dlen;
        end;
        MatRowPut(AdvPricer,MatRowCnt(AdvPricer),AdvPricerw);
        addto = 1;
      end;
      RecordCopy(oldAdvPricer,AdvPricer);
      if (ReadFirstMain(oldAdvPricer,3,true)) then begin
        if (RecordUpdate(oldAdvPricer,AdvPricer,true)==0) then begin end;
      end else begin
        if (RecordInsert(AdvPricer,true)) then begin end;
      end;
      RentResr.AdvPrActive = 1;
      if (RentResr.AdvPrActive!=0) then begin
        RentResr.Price = BlankVal;
        RentResr.Sum = BlankVal;
        RentResr.vRebate = BlankVal;
      end;
    end;
  end;
  return;
end;

updating procedure DeleteRentResAdvPrice(record RentResVc RentResr)
begin
  record AdvPriceRecVc AdvPricer;
  
  AdvPricer.SerNr = RentResr.SerNr;
  AdvPricer.FileName = "RentResVc";
  AdvPricer.RowNr = -1;
  if (ReadFirstMain(AdvPricer,3,true)) then begin
    RecordDelete(AdvPricer);
  end;
  return;
end;

updating procedure UpdateRentAdvPrice(var record RentResVc RentResr,record RentResVc RentRes2r)
begin
  if ((RentResr.Code!=RentRes2r.Code) or
      (RentResr.AgreeType!=RentRes2r.AgreeType)) then begin
    CreateRentResAdvPrice(RentResr);
  end;
  return;
end;

global
updating function LongInt RentResVcRecordSave(var record RentResVc RentResr,record RentResVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  if (blankdate(RentResr.EndDate)) then begin
    RentResr.LengthClass = 4;
  end else begin
    RentResr.LengthClass = ActLenClass(RentResr.TransDate,RentResr.EndDate);
  end;
  CreateRentResAdvPrice(RentResr);
  RentResVcRecordSave = res;
  return;
end;

global
updating function LongInt RentResVcRecordSaveAfter(var record RentResVc RentResr,record RentResVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  UpdateRentResBook(RentResr,false);
  RentResVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt RentResVcRecordUpdate(var record RentResVc RentResr,record RentResVc RentRes2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  if (blankdate(RentResr.EndDate)) then begin
    RentResr.LengthClass = 4;
  end else begin
    RentResr.LengthClass = ActLenClass(RentResr.TransDate,RentResr.EndDate);
  end;
  UpdateRentAdvPrice(RentResr,RentRes2r);
  RentResVcRecordUpdate = res;
  return;
end;

global
updating function LongInt RentResVcRecordUpdateAfter(var record RentResVc RentResr,record RentResVc RentRes2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  UpdateRentResBook(RentRes2r,true);
  UpdateRentResBook(RentResr,false);
  RentResVcRecordUpdateAfter = res;
  return;
end;

global
updating function LongInt RentResVcRecordImport(var record RentResVc RentResr,record RentResVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;
  
  if (blankdate(RentResr.EndDate)) then begin
    RentResr.LengthClass = 4;
  end else begin
    RentResr.LengthClass = ActLenClass(RentResr.TransDate,RentResr.EndDate);
  end;
  UpdateRentResBook(RentResr,false);
  if (blank(RentResr.SalesGroup)) then begin
    Userr.Code = RentResr.SalesMan;
    ReadFirstMain(Userr,1,true);
    Userr.SalesGroup = Userr.SalesGroup;
  end;
  RentResVcRecordImport = res;
  return;
end;

global
function LongInt RentResVcRecordRemoveTest(var record RentResVc RentResr,record RentResVc RentRes2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (RentResr.Done<>0) then begin
    res = 0;
  end;
  if (nonblankdate(RentResr.LastChargeDate)) then begin
    res = 0;
  end;
  if (nonblankdate(RentResr.LastInvoiceDate)) then begin
    res = 0;
  end;
  if ((RentResr.RentResDel<>0)) then begin
    res = 0;
  end;
  RentResVcRecordRemoveTest = res;
  RETURN;
END;

procedure RetainRentResStatus(record RentResVc RentResp,record RentResVc RentRes2p)
BEGIN
  Integer i,rwcnt;
  row RentResVc RentResrw;
  row RentResVc RentRes2rw;
  Integer rwcnt2;
  
  RentResp.RentResDel = RentRes2p.RentResDel;
  RentResp.RentResRet = RentRes2p.RentResRet;
  RentResp.RentResCol = RentRes2p.RentResCol;
  RentResp.RentResInsp = RentRes2p.RentResInsp;
  rwcnt = MatRowCnt(RentRes2p);
  rwcnt2 = MatRowCnt(RentResp);
  for (i=0; i<rwcnt; i=i+1) begin
    if (i<rwcnt2) then begin
      MatRowGet(RentRes2p,i,RentRes2rw);
      MatRowGet(RentResp,i,RentResrw);
      RentResrw.Del = RentRes2rw.Del;
      RentResrw.Ret = RentRes2rw.Ret;
      RentResrw.Col = RentRes2rw.Col;
      MatRowPut(RentResp,i,RentResrw);
    end;
  end;
  RETURN;
END;

global
function LongInt RentResVcRecordProtectFields(var record RentResVc RentResr,record RentResVc RentRes2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  RetainRentResStatus(RentRes2r,RentResr);
  RentResVcRecordProtectFields = res;
  RETURN;
END;

global
updating function LongInt RentResVcRecordRemove(var record RentResVc RentResr,record RentResVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  UpdateRentResBook(RentResr,true);
  DeleteRentResAdvPrice(RentResr);
  RentResVcRecordRemove = res;
  return;
end;

global
function Boolean RentResDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record RentResVc RentResr;
  row RentResVc RentResrw;
  Boolean res;
  integer i,rwcnt;
  
  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,RentResr);
    rwcnt = MatRowCnt(RentResr);
    for (i=0;i<rwcnt;i=i+1) begin
      GetWindowRecord(wn,RentResr);
      MatRowGet(RentResr,i,RentResrw);
      if (RentResrw.Del>0) then begin
        res = false;
      end;
    end;
  end;
  RentResDClassDeleteRowTest = res;
  return;
end;


