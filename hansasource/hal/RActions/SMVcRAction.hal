external updating procedure DeletePlannedPayment(string,LongInt,LongInt);
external updating procedure SMCreatePlannedPayment(record SMVc);
external updating procedure SMUpdatePlannedPayment(record SMVc,record SMVc);
external procedure SwapM4Val(var val,var val);
external function roundmode DefaultRoundMode();
external procedure ConvertToDualBase(var string,date,var val,var val,var val,var val,var val,var val,Boolean);
external procedure SMBal(record SMVc,var val,Integer);
external function Integer CheckObjs(string,string,var string);
external function Boolean SLAccTest(string,Integer);
external function Boolean DateLocked(Date,string);
external function LongInt GetCurUserLastNr(string);
external function Boolean SerNrTestSMVc(LongInt,Date,var Boolean);
external updating procedure AddSM(record SMVc,Boolean);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SMSumup(var record SMVc);
external procedure SplitRiigiObjsNoCut(string ,var string,var string,var string,var string);

updating
procedure RemoveFromSuppSM(record SMVc SM2r)
begin
  row SMVc SM2rw;
  record ROHisVc RHr,oldRHr;
  integer i,rwcnt;
  string 20 obj1,obj2,obj3,obj4;
  boolean testf;
   
  rwcnt = MatRowCnt(SM2r);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SM2r,i,SM2rw);
    SplitRiigiObjsNoCut(SM2rw.Objects,obj1,obj2,obj3,obj4);
    RHr.AccNumber = SM2rw.AccNumber;
    RHr.Object1  = obj1;
    RHr.Object2  = obj2;
    RHr.Object3  = obj3;
    RHr.Object4  = obj4;
    if blankdate(SM2rw.TransDate) then begin
      RHr.Year  = GetYear(SM2r.TransDate);
      RHr.Month = GetMonth(SM2r.TransDate);
    end else begin
      RHr.Year  = GetYear(SM2rw.TransDate);
      RHr.Month = GetMonth(SM2rw.TransDate);
    end;    
    if ReadFirstMain(RHr,7,true) then begin
      RecordCopy(oldRHr,RHr);
      if (SM2rw.DebVal<>0) then begin
        if (SM2rw.RowSimStat==0) then begin
          RHr.DebSim = RHr.DebSim - SM2rw.DebVal;
          RHr.DebSim2 = RHr.DebSim2 - SM2rw.DebVal2;
        end;
      end;
      if (SM2rw.CredVal<>0) then begin
        if (SM2rw.RowSimStat==0) then begin
          RHr.CredSim = RHr.CredSim - SM2rw.CredVal;
          RHr.CredSim2 = RHr.CredSim2 - SM2rw.CredVal2;
        end;
      end;
      if (RecordUpdate(oldRHr,RHr,false)==0) then begin
      end;
    end else begin
      RecordNew(RHr);
      RHr.AccNumber = SM2rw.AccNumber;
      RHr.Object1  = obj1;
      RHr.Object2  = obj2;
      RHr.Object3  = obj3;
      RHr.Object4  = obj4;
      if blankdate(SM2rw.TransDate) then begin
        RHr.Year  = GetYear(SM2r.TransDate);
        RHr.Month = GetMonth(SM2r.TransDate);
      end else begin
        RHr.Year  = GetYear(SM2rw.TransDate);
        RHr.Month = GetMonth(SM2rw.TransDate);
      end;      
      if (SM2rw.RowSimStat==0) then begin
        if (SM2rw.DebVal<>0) then begin
          RHr.DebSim = -SM2rw.DebVal;
          RHr.DebSim2 = -SM2rw.DebVal2;
        end;
        if (SM2rw.CredVal<>0) then begin
          RHr.CredSim = - SM2rw.CredVal;
          RHr.CredSim2 = - SM2rw.CredVal2;
        end;
      end;
      if (SM2rw.RowSimStat==2) then begin
        if (SM2rw.DebVal<>0) then begin
          RHr.DebSim = SM2rw.DebVal;
          RHr.DebSim2 = SM2rw.DebVal2;
        end;
       if (SM2rw.CredVal<>0) then begin
          RHr.CredSim = SM2rw.CredVal;
          RHr.CredSim2 = SM2rw.CredVal2;
        end;
      end;        
      testf = RecordStore(RHr,true);
    end;
  end;
  return;
end;

updating
procedure UpdateROHisSM(record SMVc SMr,record SMVc SM2r,integer uptype)
begin
  row SMVc SMrw;
  record ROHisVc RHr,oldRHr;
  integer i,rwcnt;
  string 20 obj1,obj2,obj3,obj4;
  boolean testf;
 
  if (uptype == 1) then begin
    RemoveFromSuppSM(SM2r);
  end;
  if (uptype == 2) then begin
    RemoveFromSuppSM(SMr);
  end;
  if ((uptype == 0) or (uptype == 1)) then begin
    rwcnt = MatRowCnt(SMr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      if (SMrw.RowSimStat==0)  then begin
        SplitRiigiObjsNoCut(SMrw.Objects,obj1,obj2,obj3,obj4);
        RHr.AccNumber = SMrw.AccNumber;
        RHr.Object1 = obj1;
        RHr.Object2 = obj2;
        RHr.Object3 = obj3;
        RHr.Object4 = obj4;
        if blankdate(SMrw.TransDate) then begin
          RHr.Year  = GetYear(SMr.TransDate);
          RHr.Month = GetMonth(SMr.TransDate);
        end else begin
          RHr.Year  = GetYear(SMrw.TransDate);
          RHr.Month = GetMonth(SMrw.TransDate);
        end;
        if ReadFirstMain(RHr,7,true) then begin
          RecordCopy(oldRHr,RHr);
          if (SMrw.DebVal<>0) then begin
            RHr.DebSim = RHr.DebSim + SMrw.DebVal;
            RHr.DebSim2 = RHr.DebSim2 + SMrw.DebVal2;
          end;
          if (SMrw.CredVal<>0) then begin
            RHr.CredSim = RHr.CredSim + SMrw.CredVal;
            RHr.CredSim2 = RHr.CredSim2 + SMrw.CredVal2;
          end;
          if (RecordUpdate(oldRHr,RHr,false)==0) then begin
          end;
        end else begin
          RecordNew(RHr);
          RHr.AccNumber = SMrw.AccNumber;
          RHr.Object1 = obj1;
          RHr.Object2 = obj2;
          RHr.Object3 = obj3;
          RHr.Object4 = obj4;
          if blankdate(SMrw.TransDate) then begin
            RHr.Year  = GetYear(SMr.TransDate);
            RHr.Month = GetMonth(SMr.TransDate);
          end else begin
            RHr.Year  = GetYear(SMrw.TransDate);
            RHr.Month = GetMonth(SMrw.TransDate);
          end;
          if (SMrw.DebVal<>0) then begin
            RHr.DebSim = SMrw.DebVal;
            RHr.DebSim2 = SMrw.DebVal2;
          end;
          if (SMrw.CredVal<>0) then begin
            RHr.CredSim = SMrw.CredVal;
            RHr.CredSim2 = SMrw.CredVal2;
          end;
          testf = RecordStore(RHr,true);
        end;
      end;
    end;
  end;
  return;
end;

global
function LongInt SMVcRecordRemoveTest(var record SMVc SMr,record SMVc SM2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
LSMVcRecordRemoveTest:;
  SMVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt SMVcRecordDefaults(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  SMr.SerNr = -1;
  SMr.TransDate = CurrentDate;
  SMr.Balf = 0;
  if (SingleUserMode) then begin
    SMr.SerNr = NextSerNr("SMVc",CurrentDate,-1,false,"");
  end;
  SMVcRecordDefaults = res; 
  RETURN;
END;

updating procedure BatchSMMain(record SMVc SMp)
BEGIN
  Integer i,rwcnt;
  row SMVc SMrw;
  record MainVc mainr;
  
  rwcnt = MatRowCnt(SMp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMp,i,SMrw);
    mainr.AccNumber = SMrw.AccNumber;
    mainr.TransDate = SMp.TransDate;
    if (nonblankdate(SMrw.TransDate)) then begin
      mainr.TransDate = SMrw.TransDate;
    end;
    mainr.TransNr = SMp.SerNr;
    mainr.FileName = "SMVc";
    mainr.IntYc = 0;
    mainr.TransTime = SMp.RegTime;
    if (RecordStore(mainr,false)) then begin end;
  end;
  RETURN;
END;

global
updating procedure BatchSMMainAccrual(record SMVc SMp,Boolean deletef)
BEGIN
  Integer i,rwcnt;
  row SMVc SMrw;
  record MainAccrualVc mainr;
  
  rwcnt = MatRowCnt(SMp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMp,i,SMrw);
    mainr.AccNumber = SMrw.AccNumber;
    mainr.TransDate = SMp.TransDate;
    if (nonblankdate(SMrw.TransDate)) then begin
      mainr.TransDate = SMrw.TransDate;
    end;
    mainr.TransNr = SMp.SerNr;
    mainr.FileName = "SMVc";
    mainr.IntYc = 0;
    mainr.RowNr = i;
    if (deletef) then begin
      if (ReadFirstMain(mainr,0,true)) then begin
        RecordDelete(mainr);
      end;
    end else begin
      if (RecordStore(mainr,false)) then begin end;
    end;
  end;
  RETURN;
END;

global
function LongInt SMVcRecordDuplicate(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rwcnt;
  row SMVc SMrw;
  
  SMr.SerNr = -1;
  SMr.TransDate = CurrentDate;
  SMr.Balf = 0;
  SMr.RefStr = "";
  if (SingleUserMode) then begin
    SMr.SerNr = NextSerNr("SMVc",CurrentDate,-1,false,"");
  end;
  rwcnt = MatRowCnt(SMr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(SMr,i,SMrw);
    SMrw.RowSimStat = 0;
    MatRowPut(SMr,i,SMrw);
  end;  
  SMVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt SMVcRecordSave(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (blankdate(SMr.RegDate)) then begin
    SMr.RegDate = CurrentDate;
  end;
  if (blanktime(SMr.RegTime)) then begin
    SMr.RegTime = CurrentTime;
  end;
  SMVcRecordSave = res;
  return;
end;

global
updating function LongInt SMVcRecordSaveAfter(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RTViiteNumBlock RTr;
  
  AddSM(SMr,false);
  BatchSMMain(SMr);
  BatchSMMainAccrual(SMr,false);
  SMCreatePlannedPayment(SMr);
  BlockLoad(RTr);
  if (RTr.RT==1) then begin
    UpdateROHisSM(SMr,SM2r,0);
  end;    
  SMVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt SMVcRecordImportAfter(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RTViiteNumBlock RTr;
  
  AddSM(SMr,false);
  BatchSMMain(SMr);
  BatchSMMainAccrual(SMr,false);
  BlockLoad(RTr);  
  if (RTr.RT==1) then begin
    UpdateROHisSM(SMr,SM2r,0);
  end;    
  SMVcRecordImportAfter = res;
  RETURN;
END;

global
updating function LongInt SMVcRecordUpdate(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  AddSM(SM2r,true);
  AddSM(SMr,false);
  SMVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt SMVcRecordUpdateAfter(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RTViiteNumBlock RTr;
  
  BatchSMMain(SMr);
  BatchSMMainAccrual(SMr,false);
  SMUpdatePlannedPayment(SMr,SM2r);
  BlockLoad(RTr);  
  if (RTr.RT==1) then begin
    UpdateROHisSM(SMr,SM2r,1);
  end;    
  SMVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt SMVcRecordRemove(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record RTViiteNumBlock RTr;
  
  AddSM(SMr,true);
  BatchSMMainAccrual(SMr,true);
  DeletePlannedPayment("SMVc",SMr.SerNr,-1);
  BlockLoad(RTr);  
  if (RTr.RT==1) then begin
    UpdateROHisSM(SMr,SM2r,2);
  end;    
  SMVcRecordRemove = res;
  RETURN;
END;

procedure ConvertSMtoDualBase(record SMVc SMp)
begin
  row SMVc SMrw;
  Integer rwcnt,i;
  val fr,to1,to2,br1,br2,temp;
  string 10 curncy;

  rwcnt = MatRowCnt(SMp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMp,i,SMrw);
    if (SMrw.FrRate==0) then begin
//      if (SMrw.DebVal==0) then begin
      if (blank(SMrw.DebVal)) then begin     
        if (SMrw.CredVal==0) then begin
          temp = SMrw.BaseRate1/SMrw.BaseRate2;
          SMrw.CredVal2 = SMrw.CredVal2*temp;          
          curncy = SMrw.CurncyCode;
          fr = SMrw.FrRate;
          to1 = SMrw.ToRateB1;
          to2 = SMrw.ToRateB2;
          br1 = SMrw.BaseRate1;
          br2 = SMrw.BaseRate2;
          temp = SMrw.CurCredVal;
          ConvertToDualBase(curncy,SMp.TransDate,fr,to1,to2,br1,br2,temp,false);
          SMrw.CurncyCode = curncy;
          SMrw.FrRate = fr;
          SMrw.ToRateB1 = to1;
          SMrw.ToRateB2 = to2;
          SMrw.BaseRate1 = br1;
          SMrw.BaseRate2 = br2;
          SMrw.CurCredVal = temp;
          temp = SMrw.BaseRate1/SMrw.BaseRate2;
          SMrw.CredVal2 = SMrw.CredVal2/temp;
        end else begin
          curncy = SMrw.CurncyCode;
          fr = SMrw.FrRate;
          to1 = SMrw.ToRateB1;
          to2 = SMrw.ToRateB2;
          br1 = SMrw.BaseRate1;
          br2 = SMrw.BaseRate2;
          temp = SMrw.CurCredVal;
          ConvertToDualBase(curncy,SMp.TransDate,fr,to1,to2,br1,br2,temp,false);
          SMrw.CurncyCode = curncy;
          SMrw.FrRate = fr;
          SMrw.ToRateB1 = to1;
          SMrw.ToRateB2 = to2;
          SMrw.BaseRate1 = br1;
          SMrw.BaseRate2 = br2;
          SMrw.CurCredVal = temp;
          temp = SMrw.BaseRate1/SMrw.BaseRate2;
          SMrw.CredVal2 = SMrw.CredVal/temp;
        end;
      end else begin
        if (SMrw.DebVal==0) then begin
          temp = SMrw.BaseRate1/SMrw.BaseRate2;
          SMrw.DebVal2 = SMrw.DebVal2*temp;          
          curncy = SMrw.CurncyCode;
          fr = SMrw.FrRate;
          to1 = SMrw.ToRateB1;
          to2 = SMrw.ToRateB2;
          br1 = SMrw.BaseRate1;
          br2 = SMrw.BaseRate2;
          temp = SMrw.CurDebVal;
          ConvertToDualBase(curncy,SMp.TransDate,fr,to1,to2,br1,br2,temp,false);
          SMrw.CurncyCode = curncy;
          SMrw.FrRate = fr;
          SMrw.ToRateB1 = to1;
          SMrw.ToRateB2 = to2;
          SMrw.BaseRate1 = br1;
          SMrw.BaseRate2 = br2;
          SMrw.CurDebVal = temp;
          temp = SMrw.BaseRate1/SMrw.BaseRate2;
          SMrw.DebVal2 = SMrw.DebVal2/temp;
        end else begin
          curncy = SMrw.CurncyCode;
          fr = SMrw.FrRate;
          to1 = SMrw.ToRateB1;
          to2 = SMrw.ToRateB2;
          br1 = SMrw.BaseRate1;
          br2 = SMrw.BaseRate2;
          temp = SMrw.CurDebVal;
          ConvertToDualBase(curncy,SMp.TransDate,fr,to1,to2,br1,br2,temp,false);
          SMrw.CurncyCode = curncy;
          SMrw.FrRate = fr;
          SMrw.ToRateB1 = to1;
          SMrw.ToRateB2 = to2;
          SMrw.BaseRate1 = br1;
          SMrw.BaseRate2 = br2;
          SMrw.CurDebVal = temp;
          temp = SMrw.BaseRate1/SMrw.BaseRate2;
          SMrw.DebVal2 = SMrw.DebVal/temp;
        end;
      end;
      SMrw.DebVal2 = Round(SMrw.DebVal2,DefaultRoundMode);
      SMrw.CredVal2 = Round(SMrw.CredVal2,DefaultRoundMode);
    end else begin
      if (SMrw.DebVal==0) then begin
        curncy = SMrw.CurncyCode;
        fr = SMrw.FrRate;
        to1 = SMrw.ToRateB1;
        to2 = SMrw.ToRateB2;
        br1 = SMrw.BaseRate1;
        br2 = SMrw.BaseRate2;
        temp = SMrw.CurCredVal;
        ConvertToDualBase(curncy,SMp.TransDate,fr,to1,to2,br1,br2,temp,false);
        SMrw.CurncyCode = curncy;
/*
        SMrw.FrRate = fr;
        SMrw.ToRateB1 = to1;
        SMrw.ToRateB2 = to2;
*/        
        SMrw.BaseRate1 = br1;
        SMrw.BaseRate2 = br2;
        SMrw.CurCredVal = temp;
        temp = SMrw.BaseRate1/SMrw.BaseRate2;
        SMrw.CredVal2 = SMrw.CredVal/temp;
      end else begin
        curncy = SMrw.CurncyCode;
        fr = SMrw.FrRate;
        to1 = SMrw.ToRateB1;
        to2 = SMrw.ToRateB2;
        br1 = SMrw.BaseRate1;
        br2 = SMrw.BaseRate2;
        temp = SMrw.CurCredVal;
        ConvertToDualBase(curncy,SMp.TransDate,fr,to1,to2,br1,br2,temp,false);
        SMrw.CurncyCode = curncy;
/*
        SMrw.FrRate = fr;
        SMrw.ToRateB1 = to1;
        SMrw.ToRateB2 = to2;
*/        
        SMrw.BaseRate1 = br1;
        SMrw.BaseRate2 = br2;
        SMrw.CurCredVal = temp;      
        temp = SMrw.BaseRate1/SMrw.BaseRate2;
        SMrw.DebVal2 = SMrw.DebVal/temp;
      end;
      SMrw.DebVal2 = Round(SMrw.DebVal2,DefaultRoundMode);
      SMrw.CredVal2 = Round(SMrw.CredVal2,DefaultRoundMode);
    end;
    MatRowPut(SMp,i,SMrw);
  end;
  return;
end;

global
function LongInt SMVcRecordImport(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val t,fr,to1,to2,br1,br2;
  string 5 curncy;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  Integer i,rwcnt;
  row SMVc SMrw;
      
  BlockLoad(cvm);
  SMr.Balf = 0;
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
    if (gToDualBase) then begin
      ConvertSMtoDualBase(SMr);
    end;
  if (gBase1ToBase2) then begin
    GetFullCurncyRate(curncy,SMr.TransDate,fr,to1,to2,br1,br2);
    rwcnt = MatRowCnt(SMr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      br1 = SMrw.ToRateB1;
      br2 = SMrw.ToRateB2;
      SwapM4Val(br1,br2);
      SMrw.ToRateB1 = br1;
      SMrw.ToRateB2 = br2;
      br1 = SMrw.BaseRate1;
      br2 = SMrw.BaseRate2;
      SwapM4Val(br1,br2);
      SMrw.BaseRate1 = br1;
      SMrw.BaseRate2 = br2;
      br1 = SMrw.DebVal;
      br2 = SMrw.DebVal2;
      SwapM4Val(br1,br2);
      SMrw.DebVal = br1;
      SMrw.DebVal2 = br2;
      br1 = SMrw.CredVal;
      br2 = SMrw.CredVal2;
      SwapM4Val(br1,br2);
      SMrw.CredVal = br1;
      SMrw.CredVal2 = br2;
      MatRowPut(SMr,i,SMrw);
    end;
    SMSumup(SMr);
  end;  
  SMVcRecordImport = res;
  RETURN;
END;

global
updating function LongInt SMVcRecordCheck(var record SMVc SMr,record SMVc SM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gentrans;
  LongInt newnr,oldnr;
  Integer insertmode,updatemode;
  Integer i,orwcnt,rwcnt,errcode;
  row SMVc SMrw;
  record AccVc Accr;
  val temp;
  record SRBlock SRb;
  record CYBlock CYb;
  Date lastd;
  Boolean warndatef;
  string 255 tstr,t2,errstr;

  res = 0;     
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (stat==updatemode) then begin
    if (SMr.SerNr<=0) then begin
      SMr.SerNr = SM2r.SerNr;
    end;
  end;      
  warndatef = true;
  oldnr = SMr.SerNr;
//  BlockLoad(CYb);
  BlockLoad(SRb);
  if (SMr.SerNr<=0) then begin
    newnr = GetCurUserLastNr("TRVc");
    if (newnr==-1) then begin
      newnr = SRb.LastTRNr;
    end;
    SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,newnr,false,"");    
  end;
  if (SerNrTestSMVc(SMr.SerNr,SMr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LSMVcRecordCheck;
  end;
  if (blankdate(SMr.TransDate)) then begin
    RecordCheckError(1024,"",-1,"TransDate");      
    res = -1; 
    goto LSMVcRecordCheck;
  end;
  if (DateLocked(SMr.TransDate,"TRVc")) then begin
    RecordCheckError(1046,"",-1,"TransDate");      
    res = -1; 
    goto LSMVcRecordCheck;
  end;
  rwcnt = MatRowCnt(SMr);
  if (rwcnt==0) then begin
    RecordCheckError(1030,"",0,"AccNumber");      
    res = -1; 
    goto LSMVcRecordCheck;
  end;
  if (stat==updatemode) then begin
    orwcnt = MatRowCnt(SMr);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (warndatef) then begin        
      if (nonblankdate(SMrw.TransDate)) then begin
        if (SMr.TransDate!=SMrw.TransDate) then begin
          tstr = SMrw.TransDate;
          tstr = tstr & " ";
//          RecordCheckError(1142,tstr,i,"TransDate");      
//          res = -1; 
//what if accruals
          warndatef = false;
        end;
      end;  
      if ((nonblankdate(lastd)) and (warndatef)) then begin
        if (nonblankdate(SMrw.TransDate)) then begin
          if (SMrw.TransDate!=lastd) then begin
            tstr = SMrw.TransDate;
            tstr = tstr & " ";
//            RecordCheckError(1142,tstr,i,"TransDate");      
//            res = -1; 
            warndatef = false;
          end;
        end;
      end;    
      lastd = SMrw.TransDate;
    end;  
    if (nonblankdate(SMrw.TransDate)) then begin
      if (SMrw.RowSimStat==0) then begin
        if (DateLocked(SMrw.TransDate,"TRVc")) then begin
          RecordCheckError(1046,"",i,"TransDate");      
          res = -1; 
          goto LSMVcRecordCheck;
        end;
      end;
    end;
    if (nonblank(SMrw.AccNumber)) then begin
      Accr.AccNumber = SMrw.AccNumber;
      if (ReadFirstMain(Accr,1,true)==false) then begin
        RecordCheckError(1007,SMrw.AccNumber,i,"AccNumber");      
        res = -1; 
        goto LSMVcRecordCheck;
      end;
      if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
        RecordCheckError(1084,SMrw.AccNumber,i,"AccNumber");      
        res = -1; 
        goto LSMVcRecordCheck;
      end;
      if (SLAccTest(SMrw.AccNumber,0)) then begin
        if (stat==insertmode) then begin
          RecordCheckError(1082,SMrw.AccNumber,i,"AccNumber");      
          res = -1; 
          goto LSMVcRecordCheck;
        end else begin
          if (i>=orwcnt ) then begin
            RecordCheckError(1082,SMrw.AccNumber,i,"AccNumber");      
            res = -1; 
            goto LSMVcRecordCheck;
          end;
        end;
      end;
      if (CYb.SkipObjectTypeControlforYearEnd==0) or (CYb.SkipObjectTypeControlforYearEnd!=0 and (SMrw.RowSimStat<3 or SMrw.RowSimStat>4)) then begin
        errcode = CheckObjs(SMrw.AccNumber,SMrw.Objects,errstr);
        if (errcode!=0) then begin
          RecordCheckError(errcode,errstr,i,"Objects");      
          res = -1; 
          goto LSMVcRecordCheck;
        end;
      end;
      if ((blank(SMrw.DebVal)) and (blank(SMrw.CredVal))) then begin
        RecordCheckError(1009,"",i,"DebVal");      
        res = -1; 
        goto LSMVcRecordCheck;
      end;
    end else begin
      if ((SMrw.DebVal!=0) or (SMrw.CredVal!=0)) then begin
        RecordCheckError(1010,"",i,"AccNumber");      
        res = -1; 
        goto LSMVcRecordCheck;
      end;
    end;
  end;
  SMBal(SMr,temp,-1);
  if (temp!=0) then begin
    RecordCheckError(1011,"",rwcnt-1,"DebVal");      
    res = -1; 
    goto LSMVcRecordCheck;
  end;
LSMVcRecordCheck:;
  if (res!=0) then begin SMr.SerNr = oldnr; end;
  SMVcRecordCheck = res;
  RETURN;
END;
