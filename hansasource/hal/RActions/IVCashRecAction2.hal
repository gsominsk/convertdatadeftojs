external updating procedure IVCashDeletePOSHist(record IVCashVc);
external updating procedure DeleteOffSerNr(LongInt,string);
external updating procedure IVCashUpdateSerialNr(record IVCashVc);
external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external procedure FindNextIVCashVcOfficialSerialNr(var record IVCashVc);
external procedure IPVc_PasteRecCurncy(var record IPVc,Integer);
external procedure IPVc_PasteRecVal(var record IPVc,Integer);
external function Boolean IPVc_PasteCustCode(var record IPVc,Integer,var LongInt);
external procedure RecordAction_raExpandPay(var record IPVc,Integer);
external updating procedure SalesmanStats_IVCashVc(record IVCashVc,record IVCashVc,Boolean);
external updating procedure IVCashVcCreateSoldGiftCert_Invalidate(record IVCashVc);
external updating procedure IVCashArtStats(record IVCashVc,Boolean);
external updating procedure DeletePointsHist(LongInt,string);
external updating procedure AddPointsHist(LongInt,string,integer);
external updating procedure IVCashVc_LoyaltyCardPointsRedemption(record IVCashVc,Boolean);
external updating procedure IVCashVcCreateSoldGiftCert(record IVCashVc);
external function Boolean DateWarned(Date,string);
external function Boolean DateLocked(Date,string);

global 
function Boolean IVCashVcRecordShouldBeSynchronised(record IVCashVc IVCashr,string tagstr)
begin
  Boolean res;
  
  res = true;
  IVCashVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean IVCashVcRecordSync(record IVCashVc IVCashr,string tagstr)
begin
  Boolean res;
  
  res = true;
  IVCashVcRecordSync = res;
  return;
end;

global
function LongInt IVCashVcRecordRemoveTest(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record DBLockBlock DBLockRec;
  record DefCCTransVc DefCCTransr;
  row IVCashVc IVCashrw;
  integer i,rwcnt;

  res = 1;
  BlockLoad(DBLockRec);
  if (IVCashr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LIVCashVcRecordRemoveTest;
  end;
  if (IVCashr.OKFlag!=0) then begin
    if (long3>0) then begin MessageBox(1560,""); end;
    res = 0;
  end;   
  if (res) then begin
    if (IVCashr.OKFlag==0) then begin
      rwcnt = MatRowCnt(IVCashr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashr,i,IVCashrw);
        if (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) and nonblank(IVCashrw.AuthorizationCode) then begin
          res = 0;
          i = rwcnt;
          if (long3>0) then begin MessageBox(1560," " & USetStr(20571)); end;
        end;  
      end;
    end;
  end;
  if (res) then begin
    DefCCTransr.FileName = "IVCashVc";
    DefCCTransr.TransNr = IVCashr.SerNr;
    if (ReadFirstKey("FileName",DefCCTransr,2,true)) then begin
      res = 0;
      if (long3>0) then begin MessageBox(25505,""); end;
    end;
  end;
LIVCashVcRecordRemoveTest:;
  IVCashVcRecordRemoveTest = res; 
  RETURN;
END;

global
updating function LongInt IVCashVcRecordRemove(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record LocalOffLineNrBlock LastRecNr;

  BlockLoad(LastRecNr);//from client DB
  if (ServingClient==false) then begin
    if (LastRecNr.LastIVCashNr>0) then begin
      if (IVCashr.SerNr==LastRecNr.LastIVCashNr) then begin
        LastRecNr.LastIVCashNr = LastRecNr.LastIVCashNr - 1;
        BlockStore(LastRecNr);
      end;    
    end;
  end;  
  if (nonblank(IVCashr.OfficialSerNr)) then begin 
    DeleteOffSerNr(IVCashr.SerNr,"IVCashVc");
  end;
  IVCashDeletePOSHist(IVCashr);
LIVCashVcRecordRemove:;
  IVCashVcRecordRemove = res; 
  RETURN;
END;

global
function LongInt IVCashNrFromLastSerNrBlock(string LocalMachineCode)
BEGIN
  LongInt res;
  record LastSerNrBlock LastSerNrRec;
  row LastSerNrBlock LastSerNrrw;
  Integer i,rwcnt;

  if (nonblank(LocalMachineCode)) then begin
    BlockLoad(LastSerNrRec);
    rwcnt = MatRowCnt(LastSerNrRec);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LastSerNrRec,i,LastSerNrrw);
      if (LastSerNrrw.LocalMachineCode==LocalMachineCode) then begin
        res = LastSerNrrw.LastIVCashNr;
        i = rwcnt;
      end;
    end;
  end;
  IVCashNrFromLastSerNrBlock = res;
  RETURN;
END;

global
function LongInt IVCashVcRecordInIndex(record IVCashVc IVCashr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (IVCashr.OKFlag!=0) or (IVCashr.Invalid!=0) then begin 
    if (indexname=="OpenSerNr")  then begin res = 0; end;
    if (indexname=="OpenInvDate")  then begin res = 0; end;
    if (indexname=="OpenCustCode")  then begin res = 0; end;
    if (indexname=="OpenName")  then begin res = 0; end;
  end;
  if (IVCashr.OKFlag==0) or (IVCashr.Invalid!=0) then begin 
    if (indexname=="TaxAdminServSeal")  then begin res = 0; end;
  end;
  IVCashVcRecordInIndex = res;
  return;
end;

/*
global
function LongInt IVCashVcRecordInvalidateTest(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = 1;
  IVCashr.Invalid = 1;
  IVCashVcRecordInvalidateTest = res;
  return;
end;
*/

global
updating procedure IVCashVc_OnAccountPayment(record IVCashVc IVCashp,Boolean negf)
begin
  Integer i,rwcnt,rownr;
  row IVCashVc IVCashrw;
  record IPVc IPr;
  record IPVc oldIPr;
  row IPVc IPrw;
  LongInt error;
  
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeOnAccountPayment:
        RecordNew(IPr);
        IPr.PayMode = IVCashrw.PayMode;
        ClearRow(IPr,IPrw,1);
        rownr = MatRowCnt(IPr);
        IPrw.CustCode = IVCashp.CustCode;
        MatRowPut(IPr,rownr,IPrw);
        MatRowGet(IPr,rownr,IPrw);
        IPVc_PasteCustCode(IPr,rownr,error);
        MatRowGet(IPr,rownr,IPrw);
        IPrw.RecCurncy = IVCashrw.CurncyCode;
        MatRowPut(IPr,rownr,IPrw);
        MatRowGet(IPr,rownr,IPrw);
        IPVc_PasteRecCurncy(IPr,rownr);
        MatRowGet(IPr,rownr,IPrw);
        IPrw.RecVal = IVCashrw.Sum;
        MatRowPut(IPr,rownr,IPrw);
        MatRowGet(IPr,rownr,IPrw);
        IPVc_PasteRecVal(IPr,rownr);
        MatRowGet(IPr,rownr,IPrw);
        RecordAction_raExpandPay(IPr,rownr);
        IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,-1,false,"");            
        RecordStore(IPr,false);
        RecordCopy(oldIPr,IPr);
        IPr.OKFlag = 1;
        RecordUpdate(oldIPr,IPr,true);
    end;
  end;
  return;
end; 

global updating
function LongInt IVCashVcRecordSyncServer(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Boolean transf;

  if (RecordValid(IVCash2r)) then begin
    transf = false;
    if (IVCashr.OKFlag==1) then begin
      if (IVCash2r.OKFlag==0) then begin transf = true; end;
    end;
    if (transf) then begin
      if (HasLocalization("PHL,PRT")) then begin
        if (IVCashr.Status==kRecordStatusManual or IVCashr.Status==kRecordStatusRecovered) then begin
        end else begin
          FindNextIVCashVcOfficialSerialNr(IVCashr);
        end;
      end else begin
        FindNextIVCashVcOfficialSerialNr(IVCashr);
      end;
      if (nonblank(IVCashr.OfficialSerNr)) then begin
        UpdateOffSerNr(IVCashr.SerNr,"IVCashVc",0,IVCashr.OfficialSerNr,false);
      end;

//    if (nonblank(IVCashr.OfficialSerNr)) then begin
//      IVCashVc_StoreEInvoice(IVCashr,IVCash2r,stat);
//    end;
    end;
  end;
  IVCashVcRecordSyncServer = res;
  return;
end;


global updating
function LongInt IVCashVcRecordSyncServerAfter(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  if (RecordValid(IVCash2r)) then begin
    if ((IVCash2r.Invalid==0) and (IVCashr.Invalid==0)) then begin
      if ((IVCash2r.OKFlag==0) and (IVCashr.OKFlag!=0)) then begin
        IVCashVcCreateSoldGiftCert(IVCashr);
        IVCashArtStats(IVCashr,false);
        SalesmanStats_IVCashVc(IVCashr,IVCash2r,true);
        IVCashUpdateSerialNr(IVCashr);
        if (nonblank(IVCashr.LoyaltyCardNr)) then begin
          if (IVCashr.Points!=0) then begin
            AddPointsHist(IVCashr.SerNr,"IVCashVc",1);
          end;
          IVCashVc_LoyaltyCardPointsRedemption(IVCashr,false);      
          IVCashVc_OnAccountPayment(IVCashr,false);      
        end;
      end;
    end;
    if ((IVCash2r.Invalid==0) and (IVCashr.Invalid!=0)) then begin
      IVCashVcCreateSoldGiftCert_Invalidate(IVCashr);
      IVCashArtStats(IVCashr,true);
//      SalesmanStats_IVCashVc(IVCashr,IVCash2r,false);
      if (nonblank(IVCashr.LoyaltyCardNr) and (IVCashr.Points!=0)) then begin
        DeletePointsHist(IVCashr.SerNr,"IVCashVc");
      end;
      if (nonblank(IVCashr.LoyaltyCardNr)) then begin
        IVCashVc_LoyaltyCardPointsRedemption(IVCashr,true);
      end;
    end;
  end else begin
    if (IVCashr.Invalid==0) then begin
      if (IVCashr.OKFlag!=0) then begin
        IVCashVcCreateSoldGiftCert(IVCashr);
        IVCashArtStats(IVCashr,false);
        SalesmanStats_IVCashVc(IVCashr,IVCash2r,true);
        if (nonblank(IVCashr.LoyaltyCardNr)) then begin
          if (IVCashr.Points!=0) then begin
            AddPointsHist(IVCashr.SerNr,"IVCashVc",1);
          end;
          IVCashVc_OnAccountPayment(IVCashr,false);      
        end;
      end;
    end;
  end;
  IVCashVcRecordSyncServerAfter = res;
  return;
end;

global
function LongInt IVCashVcRecordInvalidateTest(var record IVCashVc IVCashr,record IVCashVc IVCash2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  res = 1;
  if (UserCanAction("InvalidateInvoice",false)==false) then begin
    res = 0;
    MessageBox(34500,"");
    goto LIVCashVcRecordInvalidateTest;
  end;
  if (IVCashr.Invalid!=0) then begin
    res = 0;
    goto LIVCashVcRecordInvalidateTest;
  end;

  if (IVCashr.OKFlag!=0) then begin
    if (DateLocked(IVCashr.TransDate,"IVVc")) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end else begin
        MessageBox(34500,"");
      end;
      res = 0;
      goto LIVCashVcRecordInvalidateTest;
    end;
    if (DateWarned(IVCashr.TransDate,"IVVc")) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
    end;
  end;
  if (res) then begin
    IVCashr.Invalid = 1;
    IVCashr.TransTime = CurrentTime;
  end;
  
LIVCashVcRecordInvalidateTest:;
  IVCashVcRecordInvalidateTest = res;  
  return;
end;

global
function LongInt IVCashVcRecordAutoresolveConflict(var record IVCashVc oldIVCashr,record IVCashVc newIVCashr,LongInt serverf,LongInt op)
begin
  LongInt res;
  
  res = kSyncResultConflict;
  
  if (serverf==1) then begin
    if (oldIVCashr.OKFlag==0) then begin
      res = kSyncResultOK;
    end;
    
    if ((oldIVCashr.OKFlag==1) and (newIVCashr.Invalid==1)) then begin
      if ((oldIVCashr.SDNr==-1) and (oldIVCashr.PUNr==-1) and (oldIVCashr.IVNr==-1)) then begin
        // add code to check FindTimeOfLastPOSBalance(dfr,tfr,machine,drawer,bal,accsales)
        // and block receive if record is included in balances
        res = kSyncResultOK;
      end;
    end;
  end;
  
  IVCashVcRecordAutoresolveConflict = res;
  
  return;
end;
