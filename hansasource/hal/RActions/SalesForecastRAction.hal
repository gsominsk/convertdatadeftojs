external function Boolean SerNrTestSalesForecastVc(string,Date,var Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function LongInt DateDiff(Date,Date);
external procedure NextM4Number(string,var string);

procedure AddToArr(string code,var array string asfcodes,var Integer acnt)
begin
  asfcodes[acnt] = code;
  acnt = acnt + 1;
end;

function Boolean CodeInArr(string code,array string asfcodes,Integer acnt)
begin
  Integer i;
  Boolean res;
  
  res = false;
  for (i=0;i<acnt;i=i+1) begin
    if (asfcodes[i]==code) then begin
      res = true;
      goto LCodeInArr;
    end;
  end;
LCodeInArr:;
  CodeInArr = res;
  return;
end;

procedure AddToSM(record SalesForecastVc SFr,var record SMVc SMr)
begin
  row SalesForecastVc SFrw;
  row SMVc SMrw;
  Integer i,rwcnt;
  Integer j,srwcnt;
  Boolean foundf;
  
  rwcnt = MatRowCnt(SFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SFr,i,SFrw);
    foundf = false;
    srwcnt = MatRowCnt(SMr);
    for (j=0;j<srwcnt;j=j+1) begin
      MatRowGet(SMr,j,SMrw);
      if ((SMrw.Objects==SFrw.ItemCode) and (SMrw.RowSimStat==SFr.RowType)) then begin
        MatRowPut(SMr,j,SMrw);
        foundf = true;
      end;
    end;
    if (foundf==false) then begin
      ClearRow(SMr,SMrw,1);
      SMrw.Objects = SFrw.ItemCode;
      SMrw.RowSimStat = SFr.RowType;
      MatRowPut(SMr,srwcnt,SMrw);
    end;
  end;
  return;
end;

procedure BuildForecastSM(var record SMVc inSMr,Date startdate,Date enddate,string theclass,string code,LongInt version)
begin
  record SalesForecastVc SFr;
  record SMVc SMr;
  row SMVc SMrw;
  array string 20 asfcodes;
  string 200 topin;
  Integer acnt,theline,i,rwcnt;
  Boolean foundf,testf;
  
  RecordNew(SMr);
  ResetLoop(SFr);
  foundf = true;
  acnt = 0;
  SMr.TransDate = startdate;
  SFr.StartDate = startdate;
  while (LoopKey("ActStartDate",SFr,1,foundf)) begin
    if (SFr.StartDate>enddate) then begin 
      foundf = false;
    end;
    testf = foundf;
    if (SFr.EndDate<startdate) then begin 
      testf = false;
    end;
    if (nonblank(theclass)) then begin
      if (SFr.Class!=theclass) then begin 
        testf = false;
      end;
    end;
    if (SFr.Code==code) then begin
      if (SFr.Version!=version) then begin 
        testf = false;
      end;
    end;
    if (testf) then begin
      AddToArr(SFr.Code,asfcodes,acnt);
      AddToSM(SFr,SMr);
    end;
  end;
  ResetLoop(SFr);
  foundf = true;
  SFr.EndDate = startdate;
  while (LoopKey("ActEndDate",SFr,1,foundf)) begin
    testf = foundf;
    if (DateInRange(startdate,SFr.StartDate,SFr.EndDate)==false) then begin
      if (DateInRange(enddate,SFr.StartDate,SFr.EndDate)==false) then begin
        testf = false;
      end;
    end;
    if (nonblank(theclass)) then begin
      if (SFr.Class!=theclass) then begin 
        testf = false;
      end;
    end;
    if (SFr.Code==code) then begin
      if (SFr.Version!=version) then begin 
        testf = false;
      end;
    end;
    if (testf) then begin
      if (CodeInArr(SFr.Code,asfcodes,acnt)==false) then begin
        AddToSM(SFr,SMr);
      end;
    end;
  end;
  RecordNew(inSMr);
  inSMr.TransDate = SMr.TransDate;
  rwcnt = MatRowCnt(SMr);
  while (rwcnt>0) begin
    topin = "";
    theline = rwcnt -1;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      if (nonblank(topin)) then begin
        if (topin>SMrw.Objects) then begin
          topin = SMrw.Objects;
          theline = i;
        end;
      end else begin
        topin = SMrw.Objects;
        theline = i;
      end;
    end;
    MatRowGet(SMr,theline,SMrw);
    MatRowPut(inSMr,MatRowCnt(inSMr),SMrw);
    MatRowDelete(SMr,theline);
    rwcnt = MatRowCnt(SMr);
  end;
  return;
end;

function string 20 GetNextForecastNr(Date dat)
BEGIN
  string 20 custnr;
  record SalesForecastVc SalesForecastr;
  record SalesForSerBlock SFb;
  LongInt ser;
  Boolean skipcodef;
  record SRBlock SRb;
  
  BlockLoad(SRb);
  NextM4Number(SRb.LastSalesForecast,custnr);
  skipcodef = false;
  BlockLoad(SFb);
  if (MatRowCnt(SFb)) then begin
    ser = NextSerNr("SalesForecastVc",dat,-1,false,"");
    custnr = ser;
    SalesForecastr.Code = custnr;
    if (ReadFirstMain(SalesForecastr,1,true)==false) then begin
      skipcodef = true;
    end;
  end;
  if (skipcodef==false) then begin
    SalesForecastr.Code = "ZZZZZZZZZZZZZZZZZZZ";
    if (ReadLastMain(SalesForecastr,1,false)) then begin
//      NextM4Number(SalesForecastr.Code,custnr);
    end;
  end;
  if (blank(custnr)) then begin
    custnr = "1";
  end;
  GetNextForecastNr = custnr;
  RETURN;
END;

global
function LongInt SalesForecastVcRecordDefaults(var record SalesForecastVc SalesForecastr,record SalesForecastVc SalesForecast2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Time blankt;
  Date td;
  record SFPeriodsBlock SFPb; 
  
  BlockLoad(SFPb);    
  SalesForecastr.Code = "";  
  SalesForecastr.Version = 1;  
  SalesForecastr.Class = ""; 
  td = CurrentDate; 
  switch (SFPb.PeriodType) begin
    case kForecastPeriodTypeMonths:
      td.day = 1;
      SalesForecastr.StartDate = td;
      SalesForecastr.EndDate = AddDay(AddMonth(td,1),-1);
    case kForecastPeriodTypeWeeks:
      td = AddDay(td,-GetDateId(CurrentDate)+1);
      SalesForecastr.StartDate = td;
      SalesForecastr.EndDate = AddDay(td,6);
  end;
  SalesForecastr.OKFlag = 0;
  SalesForecastr.Closed = 0;
  if (SingleUserMode) then begin
    SalesForecastr.Code = GetNextForecastNr(SalesForecastr.StartDate);
  end;
  SalesForecastVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt SalesForecastVcRecordDuplicate(var record SalesForecastVc SalesForecastr,record SalesForecastVc SalesForecast2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Date blankd;

  SalesForecastr.OKFlag = 0;
  SalesForecastr.Closed = 0;
  SalesForecastr.Version = 1;  
  SalesForecastr.CreateDate = CurrentDate;  
  SalesForecastr.OKDate = CurrentDate;  
  if (SingleUserMode) then begin
    SalesForecastr.Code = GetNextForecastNr(SalesForecastr.StartDate);
  end;
  SalesForecastVcRecordDuplicate = res; 
  RETURN;
END;

global
updating function Boolean CreateNewForecastVersion(var record SalesForecastVc SalesForecastr)
begin
  Boolean res;
  
  SalesForecastr.OKFlag = 0;
  SalesForecastr.Closed = 0;
  SalesForecastr.Version = -1;
  res = RecordStore(SalesForecastr,true);
  CreateNewForecastVersion = res;
  return;
end;

procedure SetVersionNumber(var record SalesForecastVc SalesForecastr)
begin
  record SalesForecastVc oldSalesForecastr;
  record SalesForecastVc locSalesForecastr;
  Boolean foundf;

  if (SalesForecastr.Version<=0) then begin
    foundf = true;
    RecordCopy(oldSalesForecastr,SalesForecastr);
    RecordCopy(locSalesForecastr,SalesForecastr);
    while (LoopMain(locSalesForecastr,2,true)) begin
      if ((locSalesForecastr.Code==SalesForecastr.Code) and (locSalesForecastr.Class==SalesForecastr.Class)) then begin
        SalesForecastr.Version = locSalesForecastr.Version;
      end else begin
        foundf = false;
      end;
    end;
    if (SalesForecastr.Version>0) then begin
      SalesForecastr.Version = SalesForecastr.Version + 1;
    end else begin
      SalesForecastr.Version = 1;
    end;
  end;
  return;
end;

// must block overlapping Forecasts with same Row Type
global
function LongInt SalesForecastVcRecordCheck(var record SalesForecastVc SalesForecastr,record SalesForecastVc SalesForecast2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,rwcnt,j,smrwcnt;
  row SalesForecastVc SFrw;
  row SalesForecastVc SF2rw;
  Integer insertmode,updatemode;
  record SMVc SMForecastr;
  row SMVc SMForecastrw;
  record INVc INr;
  record ITVc ITr;
  Boolean transf;
  Boolean closef,unokf,gentrans;
  record SFPeriodsBlock SFPb; 
  
  BlockLoad(SFPb);  
  insertmode = 1;
  updatemode = 2;
  if (stat==updatemode) then begin
    if (SalesForecastr.Class!=SalesForecast2r.Class) then begin
      SalesForecastr.Version = -1;
    end;
    if (SalesForecastr.OKFlag==0) then begin
      if (SalesForecast2r.OKFlag!=0) then begin unokf = true; end;
    end;
  end;
  SetVersionNumber(SalesForecastr);
  if (SalesForecastr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (SalesForecast2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (SalesForecastr.Closed==1) then begin
    if (stat==insertmode) then begin closef = true; end;
    if (stat==updatemode) then begin
      if (SalesForecast2r.Closed==0) then begin closef = true; end;
    end;
  end;
  if (stat==updatemode) then begin
    if ((blank(SalesForecastr.Code)) and (SalesForecast2r.OKFlag==0)) then begin
      SalesForecastr.Code = SalesForecast2r.Code;
    end;
  end;
  if (blank(SalesForecastr.Code)) then begin
    SalesForecastr.Code = GetNextForecastNr(SalesForecastr.StartDate);
  end;
  if (transf) then begin
    if (UserCanAction("SalesForecastOK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"SalesForecastOK"),-1,"Code");      
      res = -1; 
      goto LSalesForecastVcRecordCheck;
    end;
  end;  
  if (SerNrTestSalesForecastVc(SalesForecastr.Code,SalesForecastr.StartDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"Code");      
    res = -1;
    goto LSalesForecastVcRecordCheck;
  end;

  if (GetDay(SalesForecastr.StartDate)!=1) then begin
    RecordCheckError(20851,"",-1,"StartDate");      
    res = -1; 
    goto LSalesForecastVcRecordCheck;
  end;
  switch (SFPb.PeriodType) begin
    case kForecastPeriodTypeMonths:
      if (GetDay(SalesForecastr.StartDate)!=1) then begin
        RecordCheckError(20851,"",-1,"StartDate");      
        res = -1; 
        goto LSalesForecastVcRecordCheck;
      end;
      if (GetDay(SalesForecastr.EndDate)!=DaysInMonth(GetYear(SalesForecastr.StartDate),GetMonth(SalesForecastr.StartDate))) then begin
        RecordCheckError(20851,"",-1,"EndDate");      
        res = -1; 
        goto LSalesForecastVcRecordCheck;
      end;
    case kForecastPeriodTypeWeeks:
      if (GetDateId(SalesForecastr.StartDate)!=1) then begin
        RecordCheckError(20851,"",-1,"StartDate");      
        res = -1; 
        goto LSalesForecastVcRecordCheck;
      end;
      if (SalesForecastr.EndDate!=AddDay(SalesForecastr.StartDate,-GetDateId(SalesForecastr.StartDate)+7)) then begin
        RecordCheckError(20851,"",-1,"EndDate");      
        res = -1; 
        goto LSalesForecastVcRecordCheck;
      end;
  end;
  if (closef==false) and (unokf==false) then begin
    BuildForecastSM(SMForecastr,SalesForecastr.StartDate,SalesForecastr.EndDate,SalesForecastr.Class,SalesForecastr.Code,SalesForecastr.Version);
    smrwcnt = MatRowCnt(SMForecastr);
    rwcnt = MatRowCnt(SalesForecastr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SalesForecastr,i,SFrw);
      switch (SalesForecastr.RowType) begin
        case 0:
          ITr.Code = SFrw.ItemCode;
  		    if (ReadFirstMain(ITr,1,true)==false) then begin
  		      RecordCheckError(1290,"",i,"ItemCode");      
  		      res = -1; 
  		      goto LSalesForecastVcRecordCheck;
  		    end;
        case 1:
  		    if (ReadFirstItem(SFrw.ItemCode,INr,false,false)==false) then begin
  		      RecordCheckError(1290,"",i,"ItemCode");      
  		      res = -1; 
  		      goto LSalesForecastVcRecordCheck;
  		    end;
  		    for (j=0;j<smrwcnt;j=j+1) begin
  		      MatRowGet(SMForecastr,j,SMForecastrw);
  		      if (SMForecastrw.Objects==SFrw.ItemCode) then begin
  		        RecordCheckError(1547,"",i,"ItemCode");      
  		        res = -1; 
  		        goto LSalesForecastVcRecordCheck;
  		      end;
  		    end;
  		end;
  		for (j=0;j<i;j=j+1) begin
  		  MatRowGet(SalesForecastr,j,SF2rw);
  		  if (SF2rw.ItemCode==SFrw.ItemCode) then begin
  		    RecordCheckError(1547,"",j,"ItemCode");      
  		    res = -1; 
  		    goto LSalesForecastVcRecordCheck;
  		  end;
  		end;		
    end;
  end;

  res = 0;
LSalesForecastVcRecordCheck:;  
  SalesForecastVcRecordCheck = res;
  RETURN;
END;

updating procedure CloseOldVersion(string code,string class,LongInt version)
begin
  record SalesForecastVc SalesForecastr;
  record SalesForecastVc oldSalesForecastr;
  Boolean foundf;
  
LCloseOldVersion:;
  ResetLoop(SalesForecastr);
  foundf = true;
  SalesForecastr.Code = code;
  SalesForecastr.Class = class;
  while (LoopKey("ActCode",SalesForecastr,2,foundf)) begin
    if ((SalesForecastr.Code!=code) or (SalesForecastr.Class!=class)) then begin
      foundf = false;
    end;
    if (foundf) then begin
      if ((SalesForecastr.Version!=version) and (SalesForecastr.OKFlag!=0)) then begin
        RecordCopy(oldSalesForecastr,SalesForecastr);
        SalesForecastr.Closed = 1;
        if (RecordUpdate(oldSalesForecastr,SalesForecastr,false)==0) then begin end;
        goto LCloseOldVersion;
      end;
    end;
  end;
  ResetLoop(SalesForecastr);
  foundf = true;
  SalesForecastr.OKFlag = 0;
  SalesForecastr.Code = code;
  SalesForecastr.Class = class;
  while (LoopKey("OKFlag",SalesForecastr,3,foundf)) begin
    if ((SalesForecastr.OKFlag!=0) or (SalesForecastr.Code!=code) or (SalesForecastr.Class!=class)) then begin
      foundf = false;
    end;
    if (foundf) then begin
      if (SalesForecastr.Version!=version) then begin
        RecordCopy(oldSalesForecastr,SalesForecastr);
        SalesForecastr.Closed = 1;
        if (RecordUpdate(oldSalesForecastr,SalesForecastr,false)==0) then begin end;
      end;
    end;
  end;
  return;
end;

global
function LongInt SalesForecastVcRecordSave(var record SalesForecastVc SalesForecastr,record SalesForecastVc SalesForecast2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SalesForecastr.CreateDate = CurrentDate;
  SalesForecastr.OKDate = CurrentDate;  
  SetVersionNumber(SalesForecastr);
  SalesForecastVcRecordSave = res;
  RETURN;
END;

global
updating function LongInt SalesForecastVcRecordSaveAfter(var record SalesForecastVc SalesForecastr,record SalesForecastVc SalesForecast2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record SRBlock SRb;

  if (SalesForecastr.OKFlag!=0) then begin
    CloseOldVersion(SalesForecastr.Code,SalesForecastr.Class,SalesForecastr.Version);
    SalesForecastr.OKDate = CurrentDate;
  end;
  if (SalesForecastr.Version<=1) then begin
    BlockLoad(SRb);
    SRb.LastSalesForecast = SalesForecastr.Code;
    BlockStore(SRb);
  end;
  SalesForecastVcRecordSaveAfter = res;
  RETURN;
END;

global
function LongInt SalesForecastVcRecordUpdate(var record SalesForecastVc SalesForecastr,record SalesForecastVc SalesForecast2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SalesForecastr.OKDate = CurrentDate;  
  if (SalesForecastr.Class!=SalesForecast2r.Class) then begin
    SalesForecastr.Version = -1;
    SetVersionNumber(SalesForecastr);
  end;
  SalesForecastVcRecordUpdate = res;
  RETURN;
END;

global
updating function LongInt SalesForecastVcRecordUpdateAfter(var record SalesForecastVc SalesForecastr,record SalesForecastVc SalesForecast2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if ((SalesForecastr.OKFlag!=0) and (SalesForecast2r.OKFlag==0)) then begin
    CloseOldVersion(SalesForecastr.Code,SalesForecastr.Class,SalesForecastr.Version);
    SalesForecastr.OKDate = CurrentDate;
  end;
  SalesForecastVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt SalesForecastVcRecordInIndex(record SalesForecastVc SalesForecastr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if ((SalesForecastr.Closed!=0) or (SalesForecastr.OKFlag==0)) then begin 
    if (indexname=="ActCode")  then begin res = 0; end;
    if (indexname=="ActStartDate")  then begin res = 0; end;
    if (indexname=="ActEndDate")  then begin res = 0; end;
  end;
  SalesForecastVcRecordInIndex = res;
  RETURN;
END;

global
function LongInt SalesForecastVcRecordRemoveTest(var record SalesForecastVc SFr,record SalesForecastVc SF2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record DBLockBlock DBLb;
  
  res = 1;
  BlockLoad(DBLb);
  if (SFr.OKFlag!=0) then begin
    if (SFr.StartDate>DBLb.DeleteBeforeDate) then begin
      if (long3>0) then begin
        MessageBox(1560,"");
      end;
      res = 0;
      goto LSFVcRecordRemoveTest;
    end;
  end;
  if (UserCanAction("UnOKAll",false)==false) then begin
    MessageBox(2912,"");
    res = 0;
    goto LSFVcRecordRemoveTest;
  end;
LSFVcRecordRemoveTest:;
  SalesForecastVcRecordRemoveTest = res;  
  return;
end;
