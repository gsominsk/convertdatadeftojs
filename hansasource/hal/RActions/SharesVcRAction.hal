external function val GetNumberOfShares(string,Date);
external function val GetNumberOfSellRequest(LongInt,string,Date);
external function val GetNumberOfBuyRequest(LongInt,string,Date);
external procedure SharesSellServerSumup(var record SharesSellVc,Boolean);
external procedure SharesBuySumup(var record SharesBuyVc);
external procedure SharesTranSumup(var record SharesTranVc);
external function val GetOfficialShareValue(Date);
external procedure GetCurUser(var record UserVc);

global
function LongInt SharesVcRecordDefaults(var record SharesVc Sharesr,record SharesVc Shares2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  Sharesr.SerNr = -1;
  Sharesr.TransDate = CurrentDate;
  GetCurUser(USr);
  Sharesr.UserCode = USr.Code;
  Sharesr.Name = USr.Name;
  Sharesr.CustCode = USr.CustCode;
  Sharesr.InitialValue = GetOfficialShareValue(Sharesr.TransDate);
  if (SingleUserMode) then begin
    Sharesr.SerNr = NextSerNr("SharesVc",Sharesr.TransDate,-1,false,"");
  end;
  SharesVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt SharesVcRecordDuplicate(var record SharesVc Sharesr,record SharesVc Shares2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  Date blankd;
  
  Sharesr.SerNr = -1;
  Sharesr.TransDate = CurrentDate;
  Sharesr.TerminateDate = blankd;
  Sharesr.Closed = 0;
  Sharesr.InitialValue = GetOfficialShareValue(Sharesr.TransDate);
  if (SingleUserMode) then begin
    Sharesr.SerNr = NextSerNr("SharesVc",Sharesr.TransDate,-1,false,"");
  end;
  SharesVcRecordDuplicate = res; 
  RETURN;
END;

updating procedure SharesSellUpdate(record SharesVc Sharesr)
begin
  record SharesSellVc SharesSellr;
  record SharesSellVc oldSharesSellr;
  
  SharesSellr.UserCode = Sharesr.UserCode;
  if (ReadFirstMain(SharesSellr,1,true)) then begin
    RecordCopy(oldSharesSellr,SharesSellr)
    SharesSellServerSumup(SharesSellr,true);
    if (RecordUpdate(oldSharesSellr,SharesSellr,false)==0) then begin
    end;
  end else begin
    RecordNew(SharesSellr);
    SharesSellr.UserCode = Sharesr.UserCode;
    SharesSellr.Name = Sharesr.Name;
    SharesSellServerSumup(SharesSellr,true);
    if (RecordStore(SharesSellr,false)) then begin
    end;
  end;
  return;
end;

global
updating function LongInt SharesVcRecordSaveAfter(record SharesVc Sharesr,record SharesVc Shares2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SharesSellUpdate(Sharesr);
  SharesVcRecordSaveAfter = res; 
  RETURN;
END;

global
updating function LongInt SharesVcRecordUpdateAfter(record SharesVc Sharesr,record SharesVc Shares2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SharesSellUpdate(Sharesr);
  SharesVcRecordUpdateAfter = res;
  RETURN;
END;

global
function LongInt SharesVcRecordCheck(var record SharesVc Sharesr,record SharesVc Shares2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val a,b;

  if (Sharesr.SerNr==-1) then begin
    Sharesr.SerNr = NextSerNr("SharesVc",Sharesr.TransDate,-1,false,"");
  end;
  a = StringToVal(Sharesr.FromSerNo,M4UVal);
  b = StringToVal(Sharesr.ToSerNo,M4UVal);
  if ((a>0) and (b>0)) then begin
    if (a>b) then begin
      RecordCheckError(1008,"",-1,"ToSerNo");      
      res = -1;
      goto LSharesVcRecordCheck;
    end;
  end;
/*
  if (Sharesr.TotQty<=0) then begin
    RecordCheckError(1058,"",-1,"TotQty");      
    res = -1;
    goto LSharesVcRecordCheck;
  end;
*/
  if (Sharesr.Closed) then begin
    if (blankdate(Sharesr.TerminateDate)) then begin
      Sharesr.TerminateDate = CurrentDate;
    end;
  end;
  res = 0;
LSharesVcRecordCheck:;  
  SharesVcRecordCheck = res;
  RETURN;
END;

global
function LongInt SharesVcRecordRemoveTest(var record SharesVc Sharesr,record SharesVc Shares2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  SharesVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt SharesSellVcRecordDefaults(var record SharesSellVc SharesSellr,record SharesSellVc SharesSell2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  SharesSellr.RegDate = CurrentDate;
  GetCurUser(USr);
  SharesSellr.UserCode = USr.Code;
  SharesSellr.Name = USr.Name;
  SharesSellServerSumup(SharesSellr,false);
  SharesSellVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt SharesSellVcRecordDuplicate(var record SharesSellVc SharesSellr,record SharesSellVc SharesSell2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  SharesSellr.RegDate = CurrentDate;
  GetCurUser(USr);
  SharesSellr.UserCode = USr.Code;
  SharesSellr.Name = USr.Name;
  SharesSellServerSumup(SharesSellr,false);
  SharesSellVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt SharesSellVcRecordSave(var record SharesSellVc SharesSellr,record SharesSellVc SharesSell2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer rwcnt,i;
  row SharesSellVc SharesSellrw;

  rwcnt = MatRowCnt(SharesSellr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesSellr,i,SharesSellrw);
    if (blankdate(SharesSellrw.RegDate)) then begin
      SharesSellrw.RegDate = SharesSellr.RegDate;
      MatRowPut(SharesSellr,i,SharesSellrw);
    end;
  end;
  SharesSellVcRecordSave = res;
  return;
end;

global
function LongInt SharesSellVcRecordUpdate(var record SharesSellVc SharesSellr,record SharesSellVc SharesSell2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer rwcnt,i;
  row SharesSellVc SharesSellrw;

  rwcnt = MatRowCnt(SharesSellr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesSellr,i,SharesSellrw);
    if (blankdate(SharesSellrw.RegDate)) then begin
      SharesSellrw.RegDate = SharesSellr.RegDate;
      MatRowPut(SharesSellr,i,SharesSellrw);
    end;
  end;
  SharesSellVcRecordUpdate = res;
  return;
end;

global
function LongInt SharesSellVcRecordCheck(var record SharesSellVc SharesSellr,record SharesSellVc SharesSell2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer rwcnt,i;
  row SharesSellVc SharesSellrw;

  SharesSellServerSumup(SharesSellr,true);
  if (SharesSellr.RemQty<>0) then begin
    RecordCheckError(1011,"",-1,"RemQty");      
    res = -1;
    goto LSharesSellVcRecordCheck;
  end;
  rwcnt = MatRowCnt(SharesSellr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesSellr,i,SharesSellrw);
    if (SharesSellrw.Qty<0) then begin
      RecordCheckError(1008,"",i,"Qty");      
      res = -1;
      goto LSharesSellVcRecordCheck;
    end;
    if (SharesSellrw.SellAgreement==0) then begin
      if (SharesSellrw.SellForPrice==0) then begin
        RecordCheckError(1058,"",i,"SellForPrice");      
        res = -1;
        goto LSharesSellVcRecordCheck;
      end;
    end;
  end;
  SharesSellr.LastChangeDate = CurrentDate;
  res = 0;
LSharesSellVcRecordCheck:;  
  SharesSellVcRecordCheck = res;
  RETURN;
END;

global
function LongInt SharesBuyVcRecordDefaults(var record SharesBuyVc SharesBuyr,record SharesBuyVc SharesBuy2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  SharesBuyr.RegDate = CurrentDate;
  GetCurUser(USr);
  SharesBuyr.UserCode = USr.Code;
  SharesBuyr.Name = USr.Name;
  SharesBuySumup(SharesBuyr);
  SharesBuyVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt SharesBuyVcRecordDuplicate(var record SharesBuyVc SharesBuyr,record SharesBuyVc SharesBuy2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  Date blankd;
  
  SharesBuyr.RegDate = CurrentDate;
  GetCurUser(USr);
  SharesBuyr.UserCode = USr.Code;
  SharesBuyr.Name = USr.Name;
  SharesBuySumup(SharesBuyr);
  SharesBuyVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt SharesBuyVcRecordSave(var record SharesBuyVc SharesBuyr,record SharesBuyVc SharesBuy2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer rwcnt,i;
  row SharesBuyVc SharesBuyrw;

  rwcnt = MatRowCnt(SharesBuyr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesBuyr,i,SharesBuyrw);
    if (blankdate(SharesBuyrw.RegDate)) then begin
      SharesBuyrw.RegDate = SharesBuyr.RegDate;
      MatRowPut(SharesBuyr,i,SharesBuyrw);
    end;
  end;
  SharesBuyVcRecordSave = res;
  return;
end;

global
function LongInt SharesBuyVcRecordUpdate(var record SharesBuyVc SharesBuyr,record SharesBuyVc SharesBuy2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer rwcnt,i;
  row SharesBuyVc SharesBuyrw;

  rwcnt = MatRowCnt(SharesBuyr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesBuyr,i,SharesBuyrw);
    if (blankdate(SharesBuyrw.RegDate)) then begin
      SharesBuyrw.RegDate = SharesBuyr.RegDate;
      MatRowPut(SharesBuyr,i,SharesBuyrw);
    end;
  end;
  SharesBuyVcRecordUpdate = res;
  return;
end;

global
function LongInt SharesBuyVcRecordCheck(var record SharesBuyVc SharesBuyr,record SharesBuyVc SharesBuy2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row SharesBuyVc SharesBuyrw;
  Integer i,rwcnt;

  SharesBuySumup(SharesBuyr);
  SharesBuyr.LastChangeDate = CurrentDate;
  res = 0;
LSharesBuyVcRecordCheck:;  
  SharesBuyVcRecordCheck = res;
  RETURN;
END;

updating procedure SharesTranUpdateSharesTranHist(record SharesTranVc STr,Boolean unokf)
begin
  row SharesTranVc STrw;
  record SharesCertHistVc SCHr;
  Integer rwcnt,i;
  string 255 certnr;
  Boolean found;
  
  if (unokf==false) then begin
    rwcnt = MatRowCnt(STr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(STr,i,STrw);
      certnr = STrw.FromSerNo;
      found = nonblank(certnr);
      while (found) begin
        RecordNew(SCHr);
        SCHr.Person = STr.SellUserCode;
        SCHr.PersonName = STr.SellName;
        SCHr.TransDate = STr.TransDate;
        SCHr.FileName = "SharesTranVc";
        SCHr.TransNr = STr.SerNr;
        SCHr.Row = i;
        SCHr.Qty = 1;
        SCHr.CertificateSerNr = STrw.Qty;
        if (nonblank(STr.SellUserCode)) then begin
          SCHr.Type = kSharesCertHistTypeSell;
          SCHr.SerNr = NextSerNr("SharesCertHistVc",SCHr.TransDate,-1,false,"");
          if (RecordStore(SCHr,false)) then begin end;
        end else begin
          SCHr.Type = kSharesCertHistTypeAllotment;
          SCHr.SerNr = NextSerNr("SharesCertHistVc",SCHr.TransDate,-1,false,"");
          if (RecordStore(SCHr,false)) then begin end;
        end;

        SCHr.Person = STr.BuyUserCode;
        SCHr.PersonName = STr.BuyName;
        SCHr.Type = kSharesCertHistTypeBuy;
        SCHr.SerNr = NextSerNr("SharesCertHistVc",SCHr.TransDate,-1,false,"");
        if (RecordStore(SCHr,false)) then begin end;

        certnr = StringToLongInt(certnr) + 1;
        if (StringToLongInt(certnr)>StringToLongInt(STrw.ToSerNo)) then begin
          found = false; 
        end;
      end;
    end;
  end else begin
    rwcnt = MatRowCnt(STr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(STr,i,STrw);
      found = true;
      ResetLoop(SCHr);
      SCHr.FileName = "SharesTranVc";
      SCHr.TransNr = STr.SerNr;
      SCHr.Row = i;
      while (LoopKey("FileName",SCHr,3,found)) begin        
        if (SCHr.FileName!="SharesTranVc") then begin found = false; end;
        if (SCHr.TransNr!=STr.SerNr) then begin found = false; end;
        if (SCHr.Row!=i) then begin found = false; end;
        if (found) then begin
          RecordDelete(SCHr);
          StepBack(SCHr);
        end;
      end;
    end;
  end;
  return;
end;

global
updating function LongInt SharesTranVcRecordSaveAfter(var record SharesTranVc SharesTranr,record SharesTranVc SharesTran2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (SharesTranr.OKFlag!=0) then begin
    SharesTranUpdateSharesTranHist(SharesTranr,false);
  end;
  SharesTranVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt SharesTranVcRecordUpdateAfter(var record SharesTranVc SharesTranr,record SharesTranVc SharesTran2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if ((SharesTran2r.OKFlag==0) and (SharesTranr.OKFlag!=0)) then begin
    SharesTranUpdateSharesTranHist(SharesTranr,false);
  end;
  if ((SharesTran2r.OKFlag!=0) and (SharesTranr.OKFlag==0)) then begin//unok
    SharesTranUpdateSharesTranHist(SharesTranr,true);
  end;
  SharesTranVcRecordUpdateAfter = res;
  return;
end;

global
function LongInt SharesTranVcRecordDefaults(var record SharesTranVc SharesTranr,record SharesTranVc SharesTran2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  SharesTranr.SerNr = -1;
  SharesTranr.TransDate = CurrentDate;
  SharesTranr.TransTime = CurrentTime;
  SharesTranr.RegDate = CurrentDate;
  GetCurUser(USr);
  SharesTranr.SellUserCode = USr.Code;
  SharesTranr.SellName = USr.Name;
  SharesTranSumup(SharesTranr);
  if (SingleUserMode) then begin
    SharesTranr.SerNr = NextSerNr("SharesTranVc",SharesTranr.TransDate,-1,false,"");
  end;
  SharesTranVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt SharesTranVcRecordDuplicate(var record SharesTranVc SharesTranr,record SharesTranVc SharesTran2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  SharesTranr.SerNr = -1;
  SharesTranr.OKFlag = 0;
  SharesTranr.TransDate = CurrentDate;
  SharesTranr.TransTime = CurrentTime;
  SharesTranr.RegDate = CurrentDate;
  SharesTranSumup(SharesTranr);
  if (SingleUserMode) then begin
    SharesTranr.SerNr = NextSerNr("SharesTranVc",SharesTranr.TransDate,-1,false,"");
  end;
  SharesTranVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt SharesTranVcRecordCheck(var record SharesTranVc STr,record SharesTranVc ST2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  val a,b;
  Integer i,rwcnt;
  row SharesTranVc STrw;

  if (STr.SerNr==-1) then begin
    STr.SerNr = NextSerNr("SharesTranVc",STr.TransDate,-1,false,"");
  end;
  switch (STr.Type) begin
    case kSharesTransferTypeTransfer:
      if (blank(STr.SellUserCode)) then begin
        RecordCheckError(1058,"",-1,"SellUserCode");      
        res = -1;
        goto LSharesTranVcRecordCheck;
      end;
    case kSharesTransferTypeAllotment:
  end;
  if (blank(STr.BuyUserCode)) then begin
    RecordCheckError(1058,"",-1,"BuyUserCode");  
    res = -1;
    goto LSharesTranVcRecordCheck;
  end;
  rwcnt = MatRowCnt(STr);
  if (rwcnt==0) then begin
    RecordCheckError(1058,"",0,"Qty");      
    res = -1;
    goto LSharesTranVcRecordCheck;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(STr,i,STrw);
    if (STrw.Qty<=0) then begin
      RecordCheckError(1058,"",0,"Qty");      
      res = -1;
      goto LSharesTranVcRecordCheck;
    end;
    if (STrw.Price<=0) then begin
      RecordCheckError(1058,"",0,"Price");      
      res = -1;
      goto LSharesTranVcRecordCheck;
    end;
  end;
  STr.TransTime = CurrentTime;
  SharesTranSumup(STr);
  res = 0;
LSharesTranVcRecordCheck:;  
  SharesTranVcRecordCheck = res;
  RETURN;
END;

global
function LongInt SharesTranVcRecordRemoveTest(var record SharesTranVc SharesTranr,record SharesTranVc SharesTran2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (SharesTranr.OKFlag!=0) then begin
    res = 0;
  end;
  SharesTranVcRecordRemoveTest = res; 
  RETURN;
END;

global
function LongInt BuySellRequestVcRecordDefaults(var record BuySellRequestVc BuySellRequestr,record BuySellRequestVc BuySellRequest2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  BuySellRequestr.SerNr = -1;
  BuySellRequestr.TransDate = CurrentDate;
  BuySellRequestr.TransTime = CurrentTime;
  GetCurUser(USr);
  BuySellRequestr.UserCode = USr.Code;
  BuySellRequestr.Name = USr.Name;
  if (SingleUserMode) then begin
    BuySellRequestr.SerNr = NextSerNr("BuySellRequestVc",BuySellRequestr.TransDate,-1,false,"");
  end;
  BuySellRequestVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt BuySellRequestVcRecordDuplicate(var record BuySellRequestVc BuySellRequestr,record BuySellRequestVc BuySellRequest2r,LongInt stat,LongInt long4)
BEGIN
  record UserVc USr;
  LongInt res;
  
  BuySellRequestr.SerNr = -1;
  BuySellRequestr.TransDate = CurrentDate;
  BuySellRequestr.TransTime = CurrentTime;
  GetCurUser(USr);
  BuySellRequestr.UserCode = USr.Code;
  BuySellRequestr.Name = USr.Name;
  if (SingleUserMode) then begin
    BuySellRequestr.SerNr = NextSerNr("BuySellRequestVc",BuySellRequestr.TransDate,-1,false,"");
  end;
  BuySellRequestVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt BuySellRequestVcRecordCheck(var record BuySellRequestVc BuySellRequestr,record BuySellRequestVc BuySellRequest2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer rwcnt,i;
  val t;

  if (BuySellRequestr.SerNr==-1) then begin
    BuySellRequestr.SerNr = NextSerNr("BuySellRequestVc",BuySellRequestr.TransDate,-1,false,"");
  end;
  if ((BuySellRequestr.Qty<=0) or (BuySellRequestr.Qty>BuySellRequestr.MaxQty)) then begin
    RecordCheckError(1008,"",-1,"Qty");      
    res = -1;
    goto LBuySellRequestVcRecordCheck;
  end;
  if (BuySellRequestr.SellFlag==0) then begin
    t = BuySellRequestr.Qty +
        GetNumberOfSellRequest(BuySellRequestr.SerNr,BuySellRequestr.UserCode,BuySellRequestr.TransDate) -
        GetNumberOfBuyRequest (BuySellRequestr.SerNr,BuySellRequestr.UserCode,BuySellRequestr.TransDate);
    if (t>GetNumberOfShares(BuySellRequestr.UserCode,BuySellRequestr.TransDate)) then begin
      RecordCheckError(2244,"",-1,"Qty");      
      res = -1;
      goto LBuySellRequestVcRecordCheck;
    end;
  end;
  res = 0;
LBuySellRequestVcRecordCheck:;  
  BuySellRequestVcRecordCheck = res;
  RETURN;
END;

