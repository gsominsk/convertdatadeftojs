external function Integer GetPOSOffLineCompNo();
external function string 255 CurDrawerCode(string);
external procedure GetCurUser(var record UserVc);
external function Boolean SerNrTestGiftReceiptVc(LongInt,Date,var Boolean);

global
function LongInt GiftReceiptVcRecordDefaults(var record GiftReceiptVc GRr,record GiftReceiptVc GR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record UserVc USr;
  Date blankd,curdate;
  LongInt newnr;
  
  curdate = CurrentDate;
  GRr.SerNr = -1;
  GRr.TransTime = CurrentTime;
  GRr.TransDate = curdate;
  GRr.CustCat = "";
  GRr.Prntdf = 0;
  GRr.OKFlag = 0;
  GRr.ExportedFlag = 0;
  GRr.Comment = "";
  GRr.SalesMan = CurrentUser;
  if (ServingClient==false) then begin//offline
    GRr.SerNr = NextSerNr("GiftReceiptVc",GRr.TransDate,-1,false,GRr.LangCode);
  end;
  GetCurUser(USr);
  if (nonblank(USr.Location)) then begin
    GRr.Location = USr.Location;
  end;
  GRr.Sum4 = blankval;
//  GRr.TotQty = blankval;
  GRr.Invalid = 0;
  GRr.LocalMachineCode = CurMachineName;
  GRr.TerminalID = CurTerminalID;
  GRr.BranchID = CurBranchID;
  GRr.DrawerCode = CurDrawerCode(GRr.LocalMachineCode);
  GiftReceiptVcRecordDefaults = res;  
  return;
end;

global
function LongInt GiftReceiptVcRecordDuplicate(var record GiftReceiptVc GRr,record GiftReceiptVc GR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  record UserVc USr;
  Date curdate;
  LongInt newnr;
  
  curdate = CurrentDate;
  GRr.SerNr = -1;
  GRr.TransTime = CurrentTime;
  GRr.TransDate = curdate;
  if (ServingClient==false) then begin//offline
    GRr.SerNr = NextSerNr("GiftReceiptVc",GRr.TransDate,newnr,false,"");
  end;
  GRr.Prntdf = 0;
  GRr.OKFlag = 0;
  GRr.ExportedFlag = 0;
  GetCurUser(USr);
  if (nonblank(USr.Location)) then begin
    GRr.Location = USr.Location;
  end;
  GRr.SalesMan = CurrentUser;
  GRr.Invalid = 0;
  GRr.LocalMachineCode = CurMachineName;
  GRr.DrawerCode = CurDrawerCode(GRr.LocalMachineCode);
  GRr.TerminalID = CurTerminalID;
  GRr.BranchID = CurBranchID;
  GiftReceiptVcRecordDuplicate = res;  
  return;
end;

global
updating function LongInt GiftReceiptVcRecordCheck(var record GiftReceiptVc GRr,record GiftReceiptVc GR2r,LongInt stat,LongInt long4)
begin
  LongInt res;  
  LongInt newnr,oldnr;
  Boolean gentrans,testf,transf;
  Integer errcode;
  LongInt sernr;
  record UserVc User;
  Boolean check;

  if (long4>0) then begin
    check = true;
  end else begin
    check = false;
  end;
  res = 0;
  oldnr = GRr.SerNr;
  transf = false;
  if (GRr.OKFlag==1) then begin
    if (stat==Rs_insert) then begin transf = true; end;
    if (stat==Rs_update) then begin
      if (GR2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  GRr.TransTime = CurrentTime;
  if (GRr.SerNr<=0) then begin
//    newnr = GetCurUserLastNr("GiftReceiptVc");
    if (ServingClient) then begin//online only
      if (GetPOSOffLineCompNo>0) then begin
        if (blank(GRr.LocalMachineCode)) then begin
          RecordCheckError(1770,"",-1,"LocalMachineCode");      
          res = -1;
          goto LGiftReceiptVcRecordCheck;
        end;
      end;
    end;    
    GRr.SerNr = NextSerNr("GiftReceiptVc",GRr.TransDate,newnr,false,"");
  end;
  if (SerNrTestGiftReceiptVc(GRr.SerNr,GRr.TransDate,gentrans)==false) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LGiftReceiptVcRecordCheck;
  end;
LGiftReceiptVcRecordCheck:;  
  if (res!=0) then begin GRr.SerNr = oldnr; end;
  GiftReceiptVcRecordCheck = res;
  return;
end;

global
function LongInt GiftReceiptVcRecordProtectFields(var record GiftReceiptVc GRr,record GiftReceiptVc GR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  GR2r.Prntdf = GRr.Prntdf;
  GiftReceiptVcRecordProtectFields = res;
  return;
end;

global
function LongInt GiftReceiptVcRecordReset(var record GiftReceiptVc GRr,record GiftReceiptVc GR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  GRr.OKFlag = 0;
  GiftReceiptVcRecordReset = res;
  return;
end;

