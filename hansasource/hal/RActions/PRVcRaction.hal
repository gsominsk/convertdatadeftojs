external procedure AutomatedSalesOrderly(string);
external function Boolean FindTheUser(var record UserVc);
external function Boolean HasMultiCurrency();
external function Boolean IsEnterprise();
external function Boolean CurncyCodeRegistered(string);
external function Integer CheckObjs(string,string,var string);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure ExtractObj(string,var Integer,var string);
external function Integer CheckUsers(string,string,var string,Boolean);
external function Boolean SerNrTestPRVc(LongInt,Date,var Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure B1ToB2StrVal(string,val,val,var string);
external procedure NextM4Number(string,var string);
external function Integer CountObjects(string);
external procedure ExtractElemFromSet(string,integer,var string);
external procedure FindClTypeforPRClass(string,var string);
external procedure FindOTforPRClass(string,var string);

global
function LongInt PRVcRecordInIndex(record PRVc PRr,string indexname)
BEGIN
  LongInt res;
  
  res = 1;
  if (PRr.Terminated!=0) then begin 
    if (indexname=="ActCode")  then begin res = 0; end;
    if (indexname=="ActCustCode")  then begin res = 0; end;
    if (indexname=="ActCustName")  then begin res = 0; end;
    if (indexname=="ActPRLeader")  then begin res = 0; end;
    if (indexname=="ActPRClass")  then begin res = 0; end;
    if (indexname=="ActName")  then begin res = 0; end;
    if (indexname=="ActStatMark")  then begin res = 0; end;
    if (indexname=="ActPRStage")  then begin res = 0; end;
  end;
  PRVcRecordInIndex = res;
  RETURN;
END;

function Boolean CheckIfProjectClassExists(string prclass)
BEGIN
  Boolean res;
  record PRClassBlock PRCb;
  row PRClassBlock PRCrw;
  Integer i,rwcnt;
  
  BlockLoad(PRCb);
  rwcnt = MatRowCnt(PRCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRCb,i,PRCrw);
    if (prclass==PRCrw.Code) then begin
      res = true;
      goto LCheckIfProjectClassExists;
    end;
  end;
LCheckIfProjectClassExists:;  
  CheckIfProjectClassExists = res;
  RETURN;
END;

global
procedure GetNextProjectNr(var string prnr)
BEGIN
  record SRBlock SRRec;
  record PRVc PRr;

  BlockLoad(SRRec);
  NextM4Number(SRRec.LastPRCode,prnr);
  if (nonblank(prnr)) then begin
    PRr.Code = prnr;
    if (ReadFirstMain(PRr,1,true)==false) then begin
      SRRec.LastPRCode = prnr;
    end else begin
      if (CountRecords("PRVc")==0) then begin 
        prnr = "1";
        goto LGetNextProjectNr;
      end;    
      PRr.Code = "……………………………………………………";
      if (ReadLastMain(PRr,1,false)) then begin
        NextM4Number(PRr.Code,prnr);
      end else begin
        prnr = "1";
      end;
    end;
  end;
LGetNextProjectNr:;
  RETURN;
END;

global
function LongInt PRVcRecordDefaults(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ProjectBlock PRb;
  string 255 tstr;
  LongInt prnr;
  val fr,to1,to2,br1,br2;
      
  BlockLoad(PRb);
  PRr.InvoiceTime = PRb.InvoiceTime;
  PRr.InvoiceStock = PRb.InvoiceStock;
  PRr.InvoicePurch = PRb.InvoicePurch;
  PRr.InvoiceMaterial = PRb.InvoiceMaterial;
  PRr.TimeAvgPriOnInv = PRb.TimeAvgPriOnInv;
  PRr.TimeAvgQtyOnInv = PRb.TimeAvgQtyOnInv;
  PRr.PurcAvgPriOnInv = PRb.PurcAvgPriOnInv;
  PRr.PurcAvgQtyOnInv = PRb.PurcAvgQtyOnInv;
  PRr.PeriodOnInv = PRb.PeriodOnInv;
  PRr.ItemPerDay = PRb.ItemPerDay;
  PRr.BuildOn = PRb.AddOn;      
  PRr.PRCodeOnInv = PRb.PRCodeOnInv;
  PRr.PRNameOnInv = PRb.PRNameOnInv;
  PRr.PRTextOnInv = PRb.PRTextOnInv;
  PRr.PRContOnInv = PRb.PRContOnInv;
  PRr.PRLeaderOnInv = PRb.PRLeaderOnInv;
  PRr.InvSepTB = PRb.InvSepTB;
  PRr.InvSepPB = PRb.InvSepPB;      
  PRr.UseWIP = PRb.UseWIP;      
  PRr.TBIVItemsUsage = PRb.TBIVItemsUsage;      
  PRr.DownPaySent = blankval;
  PRr.DownPayRedcd = blankval;
  PRr.RetSum = blankval;
  PRr.RetInvd = blankval;
  PRr.MaxRetSum = blankval;
  if (SingleUserMode) then begin
    GetNextProjectNr(tstr);
    PRr.Code = tstr;    
    prnr = NextSerNr("PRVc",PRr.StartDate,-1,false,"");
    if (StringToLongInt(PRr.Code)<prnr) then begin
      PRr.Code = prnr;
    end;
  end else begin
    PRr.Code = "";
  end;
  PRr.LangCode = "";
  PRr.StartDate = CurrentDate;
  tstr = PRr.CurncyCode;
  GetFullCurncyRate(tstr,PRr.StartDate,fr,to1,to2,br1,br2);
  PRr.CurncyCode = tstr;
  PRVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt PRVcRecordDuplicate(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  row PRVc PRrw;
  Integer i,rwcnt;
  string 255 tstr;
  LongInt prnr;
  Date bd;
  
  rwcnt = MatRowCnt(PRr);    
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(PRr,0);
  end;
  if (SingleUserMode) then begin
    GetNextProjectNr(tstr);
    PRr.Code = tstr;    
    prnr = NextSerNr("PRVc",PRr.StartDate,-1,false,"");
    if (StringToLongInt(PRr.Code)<prnr) then begin
      PRr.Code = prnr;
    end;
  end else begin
    PRr.Code = "";
  end;
  PRr.DownPaySent = blankval;
  PRr.DownPayRedcd = blankval;
  PRr.RetSum = blankval;
  PRr.RetInvd = blankval;
  PRr.Terminated = 0;
  PRr.FinishedDate = bd;
  PRr.StartDate = CurrentDate;
  PRVcRecordDuplicate = res; 
  RETURN;
END;

global
function LongInt PRVcRecordRemoveTest(var record PRVc PRr,record PRVc PR2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;
  record TBIVVc TBIVr;
  record PRVc daughterPRr;

  res = 1;
  TBIVr.PRCode = PRr.Code;
  if (ReadFirstMain(TBIVr,1,true)) then begin
    if (long3>0) then begin
      MessageBox(1560,"");
    end;
    res = 0;
  end;
  daughterPRr.MotherCode = PRr.Code;
  if (ReadFirstKey("MotherCode",daughterPRr,1,true)) then begin
    if (long3>0) then begin
      MessageBox(1560," " & USetStr(22086));
    end;
    res = 0;
  end;
  PRVcRecordRemoveTest = res;
  RETURN;
END;

procedure SetAlreadyPaid(record PRVc PRp,Boolean prf,record PRVc PR2p,Boolean pr2f)
BEGIN
  row PRVc PRrw;
  Integer rwcnt,i;
  val sum,temp;
  
  if (prf) then begin
    rwcnt = MatRowCnt(PRp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRp,i,PRrw);
      if (PRrw.InvFlag==1) then begin
        sum = sum + StringToVal(PRrw.ValStr,M4Val);
      end;
    end;
  end;
  if (pr2f) then begin
    rwcnt = MatRowCnt(PR2p);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PR2p,i,PRrw);
      if (PRrw.InvFlag==1) then begin
        sum = sum - StringToVal(PRrw.ValStr,M4Val);
      end;
    end;
  end;
  PRp.DownPaySent = PRp.DownPaySent + sum;
  RETURN;
END;

procedure SetPRFlags(record PRVc PRp)
BEGIN
  switch (PRp.Terminated) begin
    case 0: PRp.StatMark = 0; 
    case 2: PRp.StatMark = 45; 
    case 1: PRp.StatMark = 18; 
  end;
  RETURN;
END;

global
function LongInt PRVcRecordSave(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetAlreadyPaid(PRr,true,PR2r,false);
  SetPRFlags(PRr);
  PRVcRecordSave = res; 
  RETURN;
END;

global
updating function LongInt PRVcRecordSaveAfter(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record SRBlock SRRec;
      
  BlockLoad(SRRec);
  SRRec.LastPRCode = PRr.Code;
  BlockStore(SRRec);
  AutomatedSalesOrderly("HasModExp+OK_PRVc");
  PRVcRecordSaveAfter = res; 
  RETURN;
END;

global
function LongInt PRVcRecordUpdate(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetAlreadyPaid(PRr,true,PR2r,true);
  SetPRFlags(PRr);
  PRVcRecordUpdate = res; 
  RETURN;
END;

updating procedure PRUpdateTBBU(record PRVc PRr)
begin
  record TBBUVc TBBUr;  
  record TBBUVc oldTBBUr;  
  
  TBBUr.PRCode = PRr.Code;
  if (ReadFIrstMain(TBBUr,1,true)) then begin
    RecordCopy(oldTBBUr,TBBUr);
    TBBUr.Members = PRr.Members;
    RecordUpdate(oldTBBUr,TBBUr,true);
  end;
  return;
end;

updating procedure PRUpdatePRSchedule(record PRVc PRr)
begin
  record PRScheduleVc PRSchr;  
  record PRScheduleVc oldPRSchr;  
  
  PRSchr.PRCode = PRr.Code;
  if (ReadFIrstMain(PRSchr,1,true)) then begin
    RecordCopy(oldPRSchr,PRSchr);
    PRSchr.Members = PRr.Members;
    PRSchr.PrSalesMan = PRr.PrSalesMan;
    PRSchr.SalesGroup = PRr.SalesGroup;
    RecordUpdate(oldPRSchr,PRSchr,true);
  end;
  return;
end;

global
updating function LongInt PRVcRecordUpdateAfter(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if (PRr.Members!=PR2r.Members) then begin
    PRUpdateTBBU(PRr);
  end;
  if (PRr.Members!=PR2r.Members) or (PRr.PrSalesMan!=PR2r.PrSalesMan) or (PRr.SalesGroup!=PR2r.SalesGroup) then begin
    PRUpdatePRSchedule(PRr);
  end;
  PRVcRecordUpdateAfter = res; 
  return;
end;

procedure PRSumup(record PRVc PRp)
BEGIN
  Integer i,rwcnt;
  row PRVc PRrw;
  val t;
  
  /*  
  PRp.RetSum = blankval;
  rwcnt = MatRowCnt(PRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRp,i,PRrw);
    switch (PRrw.InvFlag) begin
      case 2:
        PRp.RetSum = PRp.RetSum + StringToVal(PRrw.ValStr,M4Val);
    end;
  end; 
  */
  RETURN;
END;

procedure PRVcConvertB1ToB2Date(var record PRVc PRp)
BEGIN
  row PRVc PRrw;
  Integer i,rwcnt;
  string 5 curncy;
  val fr,to1,to2,br1,br2,t;
  string 255 tstr;
  Integer oldstyle,typofcur;  
  record BaseCurBlock BCb;

  curncy = PRp.CurncyCode;
  if (blank(PRp.CurncyCode)) then begin
    BlockLoad(BCb);
    curncy = BCb.BaseCur2;
  end;
  typofcur = TypeOfCurncy(curncy,oldstyle);
  if (typofcur==2) then begin
    GetFullCurncyRate(curncy,CurrentDate,fr,to1,to2,br1,br2);
    if (blank(PRp.CurncyCode)) then begin
      PRp.CurncyCode = curncy;
    end;
    rwcnt = MatRowCnt(PRp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRp,i,PRrw);
      B1ToB2StrVal(PRrw.ValStr,br1,br2,tstr);
      PRrw.ValStr = t;
      MatRowPut(PRp,i,PRrw);
    end;
    PRSumup(PRp);
  end;
  RETURN;
END;

global
function LongInt PRVcRecordImport(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Boolean gBase1ToBase2,gToDualBase;
  record ConvMasterBlock cvm;
  record BaseCurBlock BCb;

  BlockLoad(cvm);
  if (cvm.DualBaseCurrencyFlag!=0) then begin gToDualBase = true; end;
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gToDualBase) then begin
    if (blank(PRr.CurncyCode)) then begin
      BlockLoad(BCb);
      PRr.CurncyCode = BCb.BaseCur1;
    end;
  end;
  if (gBase1ToBase2) then begin
    PRVcConvertB1ToB2Date(PRr);
  end;
  PRVcRecordImport = res; 
  RETURN;
END;

function Boolean ProjectClassHansaObject(string prclass,var string tstr)
BEGIN
  record PRClassBlock PRCb;
  row PRClassBlock PRCbrw;
  Integer i,rwcnt;
  Boolean res;

  tstr = "";
  BlockLoad(PRCb);
  rwcnt = MatRowCnt(PRCb);
  if (blank(prclass)) then begin goto LProjectClassHansaObject; end;
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PRCb,i,PRCbrw);
    if (prclass==PRCbrw.Code) then begin
      if (nonblank(PRCbrw.DefObject)) then begin res = true; end;
      tstr = PRCbrw.DefObject;
      goto LProjectClassHansaObject;
    end;
  end;
LProjectClassHansaObject:;
  ProjectClassHansaObject = res;
  RETURN;
END;

function Boolean IsMotherAlive(string momcode,var string tstr)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (blank(momcode)) then begin goto LIsMotherAlive; end;
  PRr.Code = momcode;
  if (ReadFirstMain(PRr,1,true)) begin
    if (PRr.Terminated==1) then begin
      tstr = PRr.Code;
      res = false;
      goto LIsMotherAlive;
    end else begin
      res = IsMotherAlive(PRr.MotherCode,tstr);
    end;
  end;  
LIsMotherAlive:;
  IsMotherAlive = res;
  RETURN;
END;

function Boolean IsDaughterTerminated(string prcode,var string tstr)
BEGIN
  Boolean res;
  record PRVc PRr;
  Boolean foundf;
  
  res = true;
  PRr.MotherCode = prcode;
  foundf = true;
  while (LoopKey("MotherCode",PRr,1,foundf)) begin
    if (PRr.MotherCode!=prcode) then begin foundf = false; end;
    if (foundf) then begin
      if (PRr.Terminated!=1) then begin
        tstr = PRr.Code;
        res = false;
        goto LIsDaughterTerminated;
      end else begin
        res = IsDaughterTerminated(PRr.Code,tstr);
      end;
    end;
  end;
LIsDaughterTerminated:;
  IsDaughterTerminated = res;
  RETURN;
END;

function Boolean CorrectMotherCode(string prc,string moth)
BEGIN
  Boolean res;
  record PRVc PRr;
  Array string 20 allprs;
  Integer maxd;
  Integer cnt;
  Integer i,j;
  string 20 locmoth;
  
  maxd = 20;
  res = true;
  for (i=0;i<20;i=i+1) begin
    allprs[i] = "";
  end;
  locmoth = moth;
  allprs[cnt] = prc;
L22CorrectMotherCode:;
  cnt = cnt + 1;
  if (cnt<maxd) then begin
    allprs[cnt] = allprs[cnt] & locmoth;
    PRr.Code = locmoth;
    if (ReadFirstMain(PRr,1,true)) begin
      if (nonblank(PRr.MotherCode)) then begin
        locmoth = PRr.MotherCode;
        goto L22CorrectMotherCode;
      end;
    end else begin
      if (nonblank(locmoth)) then begin
        res = false;
      end;
    end;
  end else begin
    res = false;
  end;
  if ((res) and (nonblank(allprs[0]))) then begin
    for (i=0;i<cnt;i=i+1) begin
      if (nonblank(allprs[i])) then begin
        for (j=i+1;j<cnt;j=j+1) begin
          if (nonblank(allprs[j])) then begin
            if (allprs[i]==allprs[j]) then begin
              i = 20;
              j = 20;
              res = false;
            end;
          end else begin
            j = 20;
          end;
        end;
      end else begin
        i = 20;
      end;
    end;
  end;
  CorrectMotherCode = res;
  RETURN;
END;

global
function boolean CheckPrClInPRVc(record PRVc PRr,var string wctype)
begin
  boolean res,found;
  record PRClVc PRClr;
  integer typeam,i,clam,j;
  string 5 ctype,cclass;
  string 200 typ;
  
  res=true;
  wctype="";
  FindClTypeforPRClass(PRr.PRClass,typ);
  if (nonblank(typ)) then begin
    typeam = CountObjects(typ); 
    clam=CountObjects(PRr.PRClassification); 
    for (i=1;i<=typeam;i=i+1) begin
      ExtractElemFromSet(typ,i,ctype);
      found=false;
      for (j=1;j<=clam;j=j+1) begin
        ExtractElemFromSet(PRr.PRClassification,j,cclass);
        ResetLoop(PRClr);
        PRClr.Code=cclass;
        if (ReadFirstMain(PRClr,1,true)) then begin
          if (PRClr.CType==ctype) then begin
            found=true;
            j=clam+1;
          end;
        end;
      end;
      if (not (found)) then begin
        res=false;
        wctype=ctype;
        i=typeam+1;
      end;
    end;
  end;
  CheckPrClInPRVc = res;
  return;
end;

global
function boolean CheckObjInPRVc(record PRVc PRr,var string wctype)
begin
  boolean res,found;
  record ObjVc Objr;
  integer typeam,i,clam,j;
  string 5 ctype,cclass;
  string 200 typ;
  
  res=true;
  wctype="";
  FindOTforPRClass(PRr.PRClass,typ);
  if (nonblank(typ)) then begin
    typeam = CountObjects(typ); 
    clam=CountObjects(PRr.Objects); 
    for (i=1;i<=typeam;i=i+1) begin
      ExtractElemFromSet(typ,i,ctype);
      found=false;
      for (j=1;j<=clam;j=j+1) begin
        ExtractElemFromSet(PRr.Objects,j,cclass);
        ResetLoop(Objr);
        Objr.Code=cclass;
        if (ReadFirstMain(Objr,1,true)) then begin
          if (Objr.OTCode==ctype) then begin
            found=true;
            j=clam+1;
          end;
        end;
      end;
      if (not (found)) then begin
        res=false;
        wctype=ctype;
        i=typeam+1;
      end;
    end;
  end;
  CheckObjInPRVc = res;
  return;
end;

function Boolean IsCustCodeChangeAllowed(record PRVc PRr)
begin
  Boolean res;
  record TBBUVc TBBUr;
  record QTVc QTr;
  record ORVc ORr;
  record ActVc Actr;
  
  res = true;
  TBBUr.PRCode = PRr.Code;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    if (PRr.CustCode==TBBUr.CustCode) then begin
      res = false;
      goto LIsCustCodeChangeAllowed;
    end;
  end;
  QTr.PRCode = PRr.Code;
  if (ReadFirstKey("PRCode",QTr,1,true)) then begin
    if (PRr.CustCode==QTr.CustCode) then begin
      res = false;
      goto LIsCustCodeChangeAllowed;
    end;
  end;
  ORr.PRCode = PRr.Code;
  if (ReadFirstKey("PRCode",ORr,1,true)) then begin
    if (PRr.CustCode==ORr.CustCode) then begin
      res = false;
      goto LIsCustCodeChangeAllowed;
    end;
  end;
  Actr.PRCode = PRr.Code;
  if (ReadFirstKey("PRCode",Actr,1,true)) then begin
    if (PRr.CustCode==Actr.CUCode) then begin
      res = false;
      goto LIsCustCodeChangeAllowed;
    end;
  end;
LIsCustCodeChangeAllowed:;  
  IsCustCodeChangeAllowed = res;
  return;
end;

function Boolean PRCurrencyChangeAllowed(string prcode)
begin
  Boolean res;
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  record QTVc QTr;
  
  TBIVr.PRCode = prcode;
  res = ReadFirstMain(TBIVr,1,true);
  if (res==false) then begin
    TBBUr.PRCode = prcode;
    res = ReadFirstMain(TBBUr,1,true);
  end;
  if (res==false) then begin
    QTr.PRCode = prcode;
    res = ReadFirstKey("PRCode",QTr,1,true);
  end;
  PRCurrencyChangeAllowed = res;
  return;
end;

global
function Boolean SalesGroupExists(string salesgroups)
begin
  Boolean res;
  record SalesGroupVc SalesGroupr;
  string 255 salesgroup;
  Integer pos;

  res = true;
  pos = 0;
  ExtractObj(salesgroups,pos,salesgroup);
  while (nonblank(salesgroup)) begin
    SalesGroupr.SGroupCode = salesgroup;
    if (ReadFirstMain(SalesGroupr,1,true)==false) then begin
      res = false;
      goto LSalesGroupExists; 
    end;
    ExtractObj(salesgroups,pos,salesgroup);
  end;
LSalesGroupExists:;  
  SalesGroupExists = res;
  return;
end;

global
function Boolean UserExists(string salesmen)
begin
  Boolean res;
  record UserVc Userr;
  string 255 salesman;
  Integer pos;

  res = true;
  pos = 0;
  ExtractObj(salesmen,pos,salesman);
  while (nonblank(salesman)) begin
    Userr.Code = salesman;
    if (FindTheUser(Userr)==false) then begin
      res = false;
      goto LUserExists; 
    end;
    ExtractObj(salesmen,pos,salesman);
  end;
LUserExists:;  
  UserExists = res;
  return;
end;

global
function LongInt PRVcRecordCheck(var record PRVc PRr,record PRVc PR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record ProjectBlock PRRec;
  string 255 tstr,errstr;
  record PRVc lPRr;
  row PRVc PRrw;
  record CUVc CUr;
  Integer rwcnt,i,errcode;
  LongInt prnr;
  Boolean gentrans,smalldevicesf;
  record UserVc Userr;

  res = 0;
  switch (ProgramType) begin
    case typTimeLog: smalldevicesf = true;
  end;
  BlockLoad(PRRec);
  if (blank(PRr.Code)) then begin
    GetNextProjectNr(tstr);
    lPRr.Code = tstr;
    if (ReadFirstMain(lPRr,1,true)) then begin
      RecordCheckError(1547,tstr,-1,"Code");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
    PRr.Code = tstr;
    prnr = NextSerNr("PRVc",PRr.StartDate,-1,false,"");
    if (StringToLongInt(PRr.Code)<prnr) then begin
      PRr.Code = prnr;
    end;    
  end;  
  if (blank(PRr.Code)) then begin
    RecordCheckError(1058,tstr,-1,"Code");      
    res = -1;
    goto LPRVcRecordCheck;
  end;
  if (smalldevicesf==false and (HasMultiCurrency or IsEnterprise)) then begin
    if (blank(PRr.CurncyCode)) then begin
      RecordCheckError(1058,tstr,-1,"CurncyCode");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
    if (CurncyCodeRegistered(PRr.CurncyCode)==false) then begin
      RecordCheckError(1582,"",-1,"CurncyCode");      
      res = -1; 
      goto LPRVcRecordCheck;
    end;
  end;
  if ((stat==Rs_insert) or (PRr.Code!=PR2r.Code)) then begin
    lPRr.Code = PRr.Code;
    if (ReadFirstMain(lPRr,1,true)) then begin
      RecordCheckError(1547,"",-1,"Code");      
      res = -1; 
      goto LPRVcRecordCheck;
    end;
    if (SerNrTestPRVc(StringToLongInt(PRr.Code),PRr.StartDate,gentrans)==false) then begin
      RecordCheckError(1557,"",-1,"Code");      
      res = -1; 
      goto LPRVcRecordCheck;
    end;
  end;
  if (nonblankdate(PRr.StartDate)) and (nonblankdate(PRr.EndDate)) then begin
    if (PRr.EndDate<PRr.StartDate) then begin
      RecordCheckError(20851,"",-1,"EndDate");      
      res = -1; 
      goto LPRVcRecordCheck;
    end;
  end;
  if (nonblank(PRr.Leader)) then begin
    Userr.Code = PRr.Leader;
    if (FindTheUser(Userr)==false) then begin
      RecordCheckError(20170,"",-1,"Leader");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  if (nonblank(PRr.PrSalesMan)) then begin
    if (UserExists(PRr.PrSalesMan)==false) then begin
      RecordCheckError(20170,"",-1,"PrSalesMan");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  if (nonblank(PRr.SalesGroup)) then begin
    if (SalesGroupExists(PRr.SalesGroup)==false) then begin
      RecordCheckError(20171,"",-1,"SalesGroup");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  errcode = CheckUsers(PRr.Members,"",tstr,false);  
  if (errcode!=0) then begin
    RecordCheckError(errcode,tstr,-1,"Members");      
    res = -1;
    goto LPRVcRecordCheck;
  end;
  if (PRRec.CheckObj2!=0) then begin
    if (ProjectClassHansaObject(PRr.PRClass,tstr)) then begin
      if (SetInSet(tstr,PRr.Objects)==false) then begin
        RecordCheckError(1979,"",-1,"Objects");      
        res = -1;
        goto LPRVcRecordCheck;
      end;
    end;
  end else begin
    if (nonblank(PRr.Objects)) then begin
      tstr = "";
      errcode = CheckObjs(tstr,PRr.Objects,errstr);
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,-1,"Objects");
        res = -1; 
        goto LPRVcRecordCheck;
      end;
    end;
  end;
  if (nonblank(PRr.PRClass)) then begin     
    if (CheckObjInPRVc(PRr,tstr)==false) then begin
      RecordCheckError(1083," " & tstr,-1,"Objects");//change type     
      res = -1; 
      goto LPRVcRecordCheck;
    end;
    if (CheckPrClInPRVc(PRr,tstr)==false) then begin
      RecordCheckError(1707,tstr,-1,"PRClassification");//change type     
      res = -1; 
      goto LPRVcRecordCheck;
    end;
  end;  
  if (PRRec.CheckObj!=0) then begin
    if (SetInSet(PRr.Code,PRr.Objects)==false) then begin
      RecordCheckError(1980,"",-1,"Objects");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  if (PRRec.DemandPRClass!=0) then begin
    if (blank(PRr.PRClass)) then begin
      RecordCheckError(1373,"",-1,"PRClass");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  if (nonblank(PRr.PRClass)) then begin
    if (CheckIfProjectClassExists(PRr.PRClass)==false) then begin
      RecordCheckError(20173,"",-1,"PRClass");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  if (nonblank(PRr.MotherCode)) then begin
    if (CorrectMotherCode(PRr.Code,PRr.MotherCode)==false) then begin
      RecordCheckError(22087,"",-1,"MotherCode");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  if (PRr.Terminated==1) then begin
    if (IsDaughterTerminated(PRr.Code,tstr)==false) then begin
      RecordCheckError(2085,tstr,-1,"MotherCode");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end else begin
    if (IsMotherAlive(PRr.MotherCode,tstr)==false) then begin
      RecordCheckError(2086,tstr,-1,"MotherCode");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  rwcnt = MatRowCnt(PRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRr,i,PRrw);
    if ((PRrw.InvFlag==1) and (PRrw.InvNr==-1))then begin
      RecordCheckError(1880,"",i,"InvFlag");      
      res = -1;
      goto LPRVcRecordCheck;
    end;
  end;
  if (stat==Rs_update) then begin
    if (PRr.CustCode!=PR2r.CustCode) then begin
      if (IsCustCodeChangeAllowed(PR2r)==false) then begin
        RecordCheckError(1250," " & PR2r.CustCode,-1,"CustCode");      
        res = -1;
        goto LPRVcRecordCheck;
      end;
    end;
    if (PRr.CurncyCode!=PR2r.CurncyCode) then begin     
      if (PRCurrencyChangeAllowed(PRr.Code)) then begin
        RecordCheckError(20410,"",-1,"CurncyCode");      
        res = -1;
        goto LPRVcRecordCheck;
      end;
    end;
  end;
  if (smalldevicesf==false) then begin
    CUr.Code = PRr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.blockedFlag!=0) then begin
        RecordCheckError(1265," " & PRr.CustCode,-1,"CustCode");      
        res = -1; 
        goto LPRVcRecordCheck;
      end;
      if (nonblank(CUr.CurncyCode)) then begin
        if (PRr.CurncyCode!=CUr.CurncyCode) then begin
          RecordCheckError(1217,"",-1,"CurncyCode");      
          res = -1;
          goto LPRVcRecordCheck;
        end;
      end;
    end else begin
      RecordCheckError(1125,"",-1,"CustCode");      
      res = -1; 
      goto LPRVcRecordCheck;
    end;
  end;
LPRVcRecordCheck:;
  PRVcRecordCheck = res;
  RETURN;
END;

procedure RetainPRStatus(record PRVc PRp,record PRVc PR2p)
begin
  Integer rwcnt,rwcnt2;
  Integer i;
  row PRVc PRrw;
  row PRVc PR2rw;
  
  PRp.DownPaySent = PR2p.DownPaySent;
  PRp.DownPayRedcd = PR2p.DownPayRedcd;
  PRp.RetSum = PR2p.RetSum;
  PRp.RetInvd = PR2p.RetInvd;
  rwcnt = MatRowCnt(PR2p);
  rwcnt2 = MatRowCnt(PRp);
  for (i=0;i<rwcnt;i=i+1) begin
    if (i<rwcnt2) then begin
      MatRowGet(PR2p,i,PR2rw);
      MatRowGet(PRp,i,PRrw);
      PRrw.InvNr = PR2rw.InvNr;
      MatRowPut(PRp,i,PRrw);
    end;
  end;
  RETURN;
END;

global
function LongInt PRVcRecordProtectFields(var record PRVc PRr,record PRVc PR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  RetainPRStatus(PR2r,PRr);
  PRVcRecordProtectFields = res;
  RETURN;
END;
