external function Boolean HasIntegratedNL();
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external function Boolean StockRecordForLocationAllowed(string,string,string,date,integer,var Integer,var string);
external procedure VerifyRowObjects(String,String,String,String,var Integer,var String,var Boolean,Array string,Array string,var Integer);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean DisallowFutureDateCheck(Boolean,Date,string,Integer);
external function Boolean ReadFirstItemInclClosed(string,var record INVc,Boolean,Boolean);
external function roundmode GetCostRoundMode(record RoundBlock);
external updating procedure UpdateTrans_Stock(record TRVc);
external function Integer IsUnOKAllowed_SRVc(record SRVc);
external updating procedure UpdateRecalcStockNeeded(Integer);
external updating procedure DeleteTransaction(LongInt,Integer);
external function Boolean ItemHistExists(string,LongInt);
external updating procedure StoreUnOKHistory(string,LongInt,Date,Time,string);
external function Integer FIFOPerSerialNr(record INVc,record CostAccBlock);
external function Boolean SRVc_PasteLocation(var record SRVc,Integer);
external updating procedure UpdateLocationWeightedAv(string,string,val,val,val,val,Boolean);
external function Boolean TestArtCode(string,string,record INVc);
external function Boolean CanOKStockRecord(var Integer);
external updating procedure AddTTrans_SRVc(record TRVc,record SRVc);
external procedure GetCurUser(var record UserVc);
external procedure Base1ToBase2(var val,Date,var val);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external procedure GetPRName(string, var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsSerialNrCorrect(string);
external function Integer MakeTransFromSR(record TRVc,record SRVc,Boolean,var string,var Integer);
external procedure UpdateSRFIFO(record SRVc);
external function string 255 CheckTrans(var record TRVc,Integer,Boolean);
external updating procedure SaveTrans(record TRVc);
external function Boolean ExistStockTrans(string,Date,var Integer,var string,string,LongInt,record MainStockBlock);
external function Boolean SerialNrAvail(string,string,string,val);
external function Boolean CheckStructureItemsLevel(string,string,string,val);
external function Integer CheckObjs(string,string,var string);
external function Boolean Date2Test(string,Date,string,Integer);
external function Boolean SerNrTestSRVc(LongInt,Date,var Boolean);
external procedure B1ToB2Val(val,val,val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SRSumUp(var record SRVc);
external updating procedure SRUpdateItemHist(record SRVc,Boolean);
external updating procedure UpdateInstock(string,string,string,string,date,val,val,val,val,val,val,val,val,val);
external function Boolean ShouldItemUpdateStock(string);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetPRInvSep(string,var Integer,var Integer);
external function Integer GetItemTypeGroup(string,var string);
external updating function val NextLocOKNr(string);

global
function LongInt SRVcRecordDefaults(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  record AccBlock ARb;
  record UserVc USr;
  LongInt res;

  BlockLoad(ARb);
  SRr.TransDate = CurrentDate;
  SRr.OKFlag = 0;
  SRr.SRVarAcc = ARb.SRVarAcc;
  SRr.SerNr = -1;
  if (SingleUserMode) then begin
    SRr.SerNr = NextSerNr("SRVc",SRr.TransDate,-1,false,"");
  end;
  GetCurUser(USr);
  SRr.Location = USr.Location;
  SRVc_PasteLocation(SRr,-1);
  SRVcRecordDefaults = res;
  return;
end;

global
function LongInt SRVcRecordDuplicate(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer i,rwcnt;
  row SRVc SRrw;

  SRr.TransDate = CurrentDate;
  SRr.OKFlag = 0;
  SRr.SerNr = -1;
  if (SingleUserMode) then begin
    SRr.SerNr = NextSerNr("SRVc",SRr.TransDate,-1,false,"");
  end;
  rwcnt = MatRowCnt(SRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRr,i,SRrw);
    SRrw.FIFO = blankval;
    SRrw.FIFORowVal  = blankval;
    SRrw.NewFIFO = blankval;
    SRrw.NewFIFORowVal  = blankval;
    SRrw.DiffFIFO = blankval;
    SRrw.DiffFIFORowVal  = blankval;
    MatRowPut(SRr,i,SRrw);
  end;
  SRr.LocOKNr = blankval;
  WarnFutureDate(true,SRr.TransDate);
  SRVcRecordDuplicate = res;
  return;
end;

global
updating function LongInt SRVcRecordSave(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  if (SRr.OKFlag!=0) then begin
    if (ItemHistExists("SRVc",SRr.SerNr)==false) then begin
      SRr.LocOKNr = NextLocOKNr(SRr.Location);
    end;
  end;  
  SRVcRecordSave = res;
  return;
end;

global
updating procedure SRUpdateStock(record SRVc SRp,Boolean negf)
begin
  record MainStockBlock MSb;
  row SRVc SRrw;
  Integer i,rwcnt;
  val t,t2,q2;
  string 10 location,loc2;
  
  BlockLoad(MSb);
  location = SRp.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(SRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRp,i,SRrw);
    if (nonblank(SRrw.Location)) then begin
      loc2 = SRrw.Location;
    end else begin
      loc2 = location;
    end;
    if (nonblank(SRrw.ArtCode)) then begin
      t2 = -SRrw.Qty;
      if (ShouldItemUpdateStock(SRrw.ArtCode)==false) then begin
        t2 = blankval;
      end;
      if (MSb.UnitConvCalc==0) then begin
        q2 = t2*SRrw.Coefficient;
      end else begin
        q2 = t2/SRrw.Coefficient;
      end;
      if (negf) then begin
        t2 = -t2;
        q2 = -q2;
      end;
      if (t2!=0) then begin
        UpdateInstock("SRVc",SRp.SerNr,SRrw.ArtCode,loc2,SRp.TransDate,t2,t,t,t,t,q2,t,t,t);
      end;      

      t2 = SRrw.Qty;
      if (ShouldItemUpdateStock(SRrw.ArtCode)==false) then begin
        t2 = blankval;
      end;
      if (MSb.UnitConvCalc==0) then begin
        q2 = t2*SRrw.Coefficient;
      end else begin
        q2 = t2/SRrw.Coefficient;
      end;
      if (negf) then begin
        t2 = -t2;
        q2 = -q2;
      end;
      if (t2!=0) then begin
        UpdateInstock("SRVc",SRp.SerNr,SRrw.ArtCode,loc2,SRp.TransDate,t2,t,t,t,t,q2,t,t,t);
      end;      
    end;
  end;
  return;
end;

procedure ArtCodeOnThisSR(Integer cnt,record SRVc SRp,string artcode,string location,string MainStock,record INVc INr,var val resp)
begin
  row SRVc SRrw;
  Integer rwcnt,i;
  string 255 location2;

  resp = blankval;
  rwcnt = MatRowCnt(SRp); 
  for (i=cnt;i<rwcnt;i=i+1) begin
    MatRowGet(SRp,i,SRrw);
    location2 = SRrw.Location;
    if (blank(location2)) then begin
      location2 = SRp.Location;
    end;
    if (blank(location2)) then begin
      location2 = MainStock;
    end;  
    if (location==location2) then begin
      if (TestArtCode(SRrw.ArtCode,artcode,INr)) then begin
        resp = resp + SRrw.Qty;
      end;
    end;
  end;
  return;
end;

global
updating procedure SRUpdateCostPrice(record SRVc SRp)
begin
  record INVc oldINr;
  record INVc INr;
  record ItemStatusVc ISr;
  row SRVc SRrw;
  row SRVc SR2rw;
  Boolean found;
  Integer i,j,rwcnt,outrows;
  val q,t,t2,rs,trs,tb2,rsb2,trsb2,qonrec,newfifob2;
  record RoundBlock RoundRec;
  record BaseCurBlock BCb;
  record MainStockBlock MSb;
  string 255 location;
  
  BlockLoad(RoundRec);
  BlockLoad(BCb);
  BlockLoad(MSb);
  outrows = 0;
  i = -1;
  rwcnt = MatRowCnt(SRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRp,i,SRrw);
    if (SRrw.Qty!=0) then begin
      found = ReadFirstItemInclClosed(SRrw.ArtCode,INr,true,false);
      RecordCopy(oldINr,INr);
//      if ((found) and (SRrw.NewFIFO!=0)) then begin
      if (found) then begin
        rs = SRrw.NewFIFO;
        Base1ToBase2(rs,SRp.TransDate,rsb2);
        FindStockValue(SRrw.ArtCode,"",ISr);
        q = SRrw.Qty - ISr.Instock;
        for (j=i+1;j<rwcnt;j=j+1) begin
          MatRowGet(SRp,j,SR2rw);
          if (TestArtCode(SR2rw.ArtCode,SRrw.ArtCode,INr)) then begin
            q = q - SR2rw.Qty;
          end;
        end;
        if (q<0) then begin q = blankval; end;
        t = q*INr.WeighedAvPrice;
        if (INr.PriceFactor!=0) then begin
          rs = rs*INr.PriceFactor;
          rsb2 = rsb2*INr.PriceFactor;
        end;
        q = q + SRrw.Qty;
        if (q!=0) then begin
          t2 = SRrw.Qty*rs;
          t = t + t2;
          trs = t/q;
          t2 = SRrw.Qty*rsb2;
          tb2 = tb2 + t2;
          trsb2 = tb2/q;
        end;        
        if (q>=0) then begin
          INr.WeighedAvPrice = rs;
          INr.WeighedAvPriceB2 = rsb2;
        end;
        location = SRrw.Location;
        if (blank(location)) then begin
          location = SRp.Location;
        end;
        if (blank(location)) then begin
          location = MSb.MainStock;
        end;  
        ArtCodeOnThisSR(i+1,SRp,SRrw.ArtCode,location,MSb.MainStock,INr,qonrec);
        location = SRrw.Location;
        if (blank(location)) then begin
          location = SRp.Location;
        end;
        if (blank(location)) then begin
          location = MSb.MainStock;
        end;  
        Base1ToBase2(SRrw.NewFIFO,SRp.TransDate,newfifob2);
        UpdateLocationWeightedAv(INr.Code,location,SRrw.Qty,SRrw.NewFIFO,newfifob2,qonrec,false);
        if (found) then begin
          INr.WeighedAvPrice = Round(INr.WeighedAvPrice,GetCostRoundMode(RoundRec));
          INr.WeighedAvPriceB2 = Round(INr.WeighedAvPriceB2,GetCostRoundMode(RoundRec));
          switch(INr.SRUpdateCost) begin
            case 1:
              INr.InPrice = Round(SRrw.NewFIFO,GetCostRoundMode(RoundRec));
              if (nonblank(BCb.BaseCur2)) then begin
                INr.InPriceB2 = Round(rsb2,GetCostRoundMode(RoundRec));
              end else begin
                INr.InPriceB2 = blankval;
              end;
            case 2:
              if (INr.InPrice!=INr.WeighedAvPrice) then begin  // inprice has changed 
                INr.InPrice = INr.WeighedAvPrice;
                INr.LastPriceChange = CurrentDate;
              end;
              if (INr.InPriceB2!=INr.WeighedAvPriceB2) then begin  // inprice has changed 
                INr.InPriceB2 = INr.WeighedAvPriceB2;
              end;
          end;
          if (RecordUpdate(oldINr,INr,found)==0) then begin end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating function LongInt SRVcRecordSaveAfter(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;

  Userr.Code = SRr.Sign;
  ReadFirstMain(Userr,1,true);
  SRr.SalesGroup = Userr.SalesGroup;  
  if (SRr.OKFlag!=0) then begin
    SRUpdateStock(SRr,false);
    SRUpdateItemHist(SRr,false);
    SRUpdateCostPrice(SRr);
    SRUpdateItemHist(SRr,true);
//    SRUpdateSerialNr(SRr); not needed is it? 
  end;  
  SRVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt SRVcRecordUpdate(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  if ((SR2r.OKFlag==0) and (SRr.OKFlag!=0)) then begin
    if (ItemHistExists("SRVc",SRr.SerNr)==false) then begin
      SRr.LocOKNr = NextLocOKNr(SRr.Location);
    end;
  end;
  SRVcRecordUpdate = res;
  return;
end;

global
updating procedure UnOKStockRevaluation(record SRVc SRr,record SRVc SR2r,Boolean deltrf)
begin
//    SRUpdateStock(SRr,true);
  UpdateRecalcStockNeeded(1);
  StoreUnOKHistory("SRVc",SRr.SerNr,CurrentDate,CurrentTime,CurrentUser);    
  if (deltrf) then begin
    DeleteTransaction(SRr.SerNr,SRYc);
  end;
  return;
end;

global
updating function LongInt SRVcRecordUpdateAfter(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  val LocOKNr;
  Boolean ihef;
  
  ihef = ItemHistExists("SRVc",SRr.SerNr);  
  if ((SR2r.OKFlag==0) and (SRr.OKFlag!=0)) then begin
    SRUpdateStock(SRr,false);
    if (ihef==false) then begin
      SRUpdateItemHist(SRr,false);
      SRUpdateCostPrice(SRr);
      SRUpdateItemHist(SRr,true);
    end;
//    SRUpdateSerialNr(SRr); not needed is it? 
  end;
//  if ((IVr.Invalid==0) and (IV2r.Invalid==0)) then begin
  if ((SRr.OKFlag==0) and (SR2r.OKFlag!=0)) then begin//unok
    UnOKStockRevaluation(SRr,SR2r,true);
  end;
  SRVcRecordUpdateAfter = res;
  return;
end;

procedure SRVcConvertB1ToB2Date(record SRVc SRp,string curp,Date datp)
begin
  row SRVc SRrw;
  val fr,to1,to2,br1,br2,t;
  Integer rwcnt,i;
  string 20 curncy;

  curncy = curp;
  GetFullCurncyRate(curncy,datp,fr,to1,to2,br1,br2);
  rwcnt = MatRowCnt(SRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRp,i,SRrw);
    B1ToB2ValRM(SRrw.FIFO,br1,br2,t,GetCostRoundModeRB);
    SRrw.FIFO = t;
    B1ToB2ValRM(SRrw.FIFORowVal,br1,br2,t,GetCostRoundModeRB);
    SRrw.FIFORowVal = t;
    B1ToB2ValRM(SRrw.NewFIFO,br1,br2,t,GetCostRoundModeRB);
    SRrw.NewFIFO = t;
    B1ToB2ValRM(SRrw.NewFIFORowVal,br1,br2,t,GetCostRoundModeRB);
    SRrw.NewFIFORowVal = t;
    B1ToB2ValRM(SRrw.DiffFIFO,br1,br2,t,GetCostRoundModeRB);
    SRrw.DiffFIFO = t;
    B1ToB2ValRM(SRrw.DiffFIFORowVal,br1,br2,t,GetCostRoundModeRB);
    SRrw.DiffFIFORowVal = t;
    MatRowPut(SRp,i,SRrw);
  end;
  return;
end;

global
updating function LongInt SRVcRecordImport(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ConvMasterBlock cvm;
  Boolean gBase1ToBase2;

  SRSumUp(SRr);
  BlockLoad(cvm);
  if (cvm.Base1ToBase2Flag!=0) then begin gBase1ToBase2 = true; end;
  if (gBase1ToBase2) then begin
    SRVcConvertB1ToB2Date(SRr,"",SRr.TransDate);
  end;
  SRVcRecordImport = res;
  return;
end;

global
updating function LongInt SRVcRecordImportAfter(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record ConvMasterBlock cvm;
  record SRVc locSRr;
  Boolean gBase1ToBase2;
  Integer err;

  locSRr.SerNr = SRr.SerNr;
  if (SRr.OKFlag!=0) then begin
//    SRUpdateSerialNr(SRr); not needed is it? 
    if (ImportingTextBackup==false and CanOKStockRecord(err)==true) then begin
      SRUpdateStock(SRr,false);
      SRUpdateItemHist(SRr,false);
      SRUpdateCostPrice(SRr);
      SRUpdateItemHist(SRr,true);
    end;
  end;
  SRVcRecordImportAfter = res;
  return;
end;

global
function LongInt SRVcRecordRemove(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  SRVcRecordRemove = res;
  return;
end;

global
function LongInt SRVcRecordRemoveTest(var record SRVc SRr,record SRVc SR2r,LongInt long3,LongInt long4)
begin
  record DBLockBlock DBLockRec;
  LongInt res;

  res = 1;
  BlockLoad(DBLockRec);
  if (SRr.TransDate<=DBLockRec.DeleteBeforeDate) then begin
    res = 1;
    goto LSRVcRecordRemoveTest;
  end;
  if (SRr.OKFlag!=0) then begin
    if (long3>0) then begin MessageBox(1560,"") end;
    res = 0;
  end;
LSRVcRecordRemoveTest:;
  SRVcRecordRemoveTest = res;
  return;
end;

global
updating function LongInt SRVcRecordCheck(var record SRVc SRr,record SRVc SR2r,LongInt stat,LongInt check)
begin
  LongInt res,sernr,oldnr,newnr;
  Integer insertmode,updatemode;
  record MainStockBlock MSb;
  Boolean transf,gentrans;
  record SRVc locSRr;
  string 10 location,location2,srvaracc;
  record LocationVc Locr;
  row SRVc SRrw;
  row SRVc SR2rw;            
  string 255 objstr,accstr,errstr,errofield;
  Integer i,rwcnt,j,cnt,errcode;
  record AccVc Accr;
  record INVc INr;
  val prev,prevtot;
  record TRVc gTRp;
  Integer errorrow;
  record ItemStatusVc ISr;
  record PISVc PISr;
  record CostAccBlock CAb;
  Boolean unokf;
  transaction string 255 gRuniningMaint;
  Array string 255 otcheckaccs;
  Array string 255 otcheckobjtyps;
  Integer otcheckcnt;
  Boolean initotcheckf;    

  res = 0;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  BlockLoad(CAb);
  BlockLoad(MSb);
  if (stat==updatemode) then begin
    if (SRr.SerNr<=0) and (SR2r.OKFlag==0) then begin
      SRr.SerNr = SR2r.SerNr;
    end;
  end;     
  oldnr = SRr.SerNr; 
  transf = false;
  if (SRr.OKFlag==1) then begin
    if (stat==insertmode) then begin transf = true; end;
    if (stat==updatemode) then begin
      if (SR2r.OKFlag==0) then begin transf = true; end;
    end;
  end;
  if (SRr.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (SR2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    errcode = IsUnOKAllowed_SRVc(SRr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",-1,"TransDate");      
      res = -1; 
    end;
    goto LSRVcRecordCheck;
  end;  
  if (stat==updatemode) then begin
    if (SR2r.OKFlag!=0) then begin
      goto LSRVcRecordCheck;
    end;
  end;
  if (SRr.SerNr<=0) then begin
    SRr.SerNr = NextSerNr("SRVc",SRr.TransDate,-1,false,"");
  end;
  if ((stat==insertmode) or (SRr.SerNr!=SR2r.SerNr)) then begin
    locSRr.SerNr = SRr.SerNr;
    if (ReadFirstMain(locSRr,1,true)) then begin
      RecordCheckError(1547,"",-1,"SerNr");      
      res = -1;
      goto LSRVcRecordCheck;
    end;
  end;
  if (SerNrTestSRVc(SRr.SerNr,SRr.TransDate,gentrans)==false) then begin
    if (check>0) then begin
    RecordCheckError(1557,"",-1,"SerNr");      
    res = -1; 
    goto LSRVcRecordCheck;
  end;
  end;
  if (check==0) then begin
    goto LSRVcRecordCheck_GenTrans;
  end;
  if (Date2Test("SRVc",SRr.TransDate,"TransDate",-1)==false) then begin
    res = -1;
    goto LSRVcRecordCheck;
  end;
  if (DisallowFutureDateCheck(true,SRr.TransDate,"TransDate",-1)) then begin
    res = -1;
    goto LSRVcRecordCheck;
  end;
  if (transf) then begin
    if (UserCanAction("SROK",true)==false) then begin
      RecordCheckError(1274,StringFromStringSet(3,"SROK"),-1,"SerNr");      
      res = -1; 
      goto LSRVcRecordCheck;
    end;
    if (SRr.TransDate!=CurrentDate) then begin
      RecordCheckError(20871,SRr.TransDate,-1,"TransDate");      
      res = -1; 
      goto LSRVcRecordCheck;
    end;
  end;  
/*
  if (check!=0) then begin
    if (MSb.requireLocation!=0) then begin
      if (blank(SRr.Location)) then begin
        RecordCheckError(1058,SRr.Location,-1,"Location");      
        res = -1; 
        goto LSRVcRecordCheck;
      end;
    end;
  end;
*/
  if (nonblank(SRr.Objects)) then begin
    errcode = CheckObjs("",SRr.Objects,errstr);
    if (errcode!=0) then begin
      RecordCheckError(errcode,errstr,-1,"Objects");      
      res = -1;
      goto LSRVcRecordCheck;
    end;
  end;   
  if (nonblank(SRr.SRVarAcc)) then begin
    Accr.AccNumber = SRr.SRVarAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,SRr.SRVarAcc,-1,"SRVarAcc");  
      res = -1;
      goto LSRVcRecordCheck;
    end else begin
      if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
        RecordCheckError(1084,SRr.SRVarAcc,-1,"SRVarAcc");  
        res = -1;
        goto LSRVcRecordCheck;
      end;
    end;
  end;  
  rwcnt = MatRowCnt(SRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SRr,i,SRrw);
    location = SRrw.Location;
/*    
    if (nonblank(SRrw.Location)) then begin
      if (MSb.Chronology==1) then begin//Chronology per Location
        if (SRrw.Location!=SRr.Location) then begin
          RecordCheckError(20857,"",i,"Location");      
          res = -1;
          goto LSRVcRecordCheck;
        end;
      end;
    end;
*/    
    if (blank(location)) then begin
      location = SRr.Location;
    end;
    if (check!=0) then begin
      if (MSb.requireLocation!=0) then begin
        if (blank(location)) then begin
          RecordCheckError(1058,location,i,"Location");      
          res = -1; 
          goto LSRVcRecordCheck;
        end;
      end;
    end;
    if (blank(location)) then begin
      location = MSb.MainStock;
    end;
    
    if (nonblank(location)) then begin
      Locr.Code = location;
      if (ReadFirstMain(Locr,1,true)==false) then begin
        RecordCheckError(1120,location,i,"Location");      
        res = -1;
        goto LSRVcRecordCheck;
      end;
    end;    
    if (blank(SRrw.ArtCode)) then begin
      RecordCheckError(1058,"",i,"NewFIFO");      
      res = -1;
      goto LSRVcRecordCheck;
    end;
    if (StockRecordForLocationAllowed("SRVc",location,SRrw.ArtCode,SRr.TransDate,SRr.OKFlag,errcode,errstr)==false) then begin
      RecordCheckError(errcode,errstr,i,"ArtCode");      
      res = -1;
      goto LSRVcRecordCheck;
    end;
    if (nonblank(SRrw.ArtCode)) then begin
/*
      if (nonblank(SRrw.FIFO)) then begin
        if (SRrw.FIFO==SRrw.NewFIFO) then begin
          RecordCheckError(20580,"",i,"NewFIFO");      
          res = -1;
          goto LSRVcRecordCheck;
        end;
      end;
*/
      if (SRrw.NewFIFO<0) then begin
        RecordCheckError(1567,"",i,"NewFIFO");      
        res = -1;
        goto LSRVcRecordCheck;
      end;
      if (SRrw.Qty<0) then begin
        RecordCheckError(1574,"",i,"Qty");      
        res = -1;
        goto LSRVcRecordCheck;
      end;
      if (transf) then begin
        if (blank(SRrw.NewFIFO)) then begin
          RecordCheckError(1058,"",i,"NewFIFO");      
          res = -1;
          goto LSRVcRecordCheck;
        end;
      end;
      if (Locr.RequirePos!=0) then begin
        if (SRrw.Qty>0) and (blank(SRrw.PosCode)) then begin
          RecordCheckError(1854,"",i,"PosCode"); 
          res = -1;
          goto LSRVcRecordCheck;
        end;
      end;           
      if (ReadFirstItem(SRrw.ArtCode,INr,true,true)==false) then begin
        RecordCheckError(1233,"",i,"ArtCode");      
        res = -1;
        goto LSRVcRecordCheck;
      end;
      if (UserCanAction("DisallowSerNrItemsOnSR",false)) then begin
        if (INr.SerNrf!=0) then begin
          RecordCheckError(20105,"",i,"ArtCode");      
          res = -1;
          goto LSRVcRecordCheck;
        end;
      end;
      if (UserCanAction("DisallownonSerNrItemsOnSR",false)) then begin
        if (INr.SerNrf==0) then begin
          RecordCheckError(20106,"",i,"ArtCode");      
          res = -1;
          goto LSRVcRecordCheck;
        end;
      end;
      srvaracc = SRrw.SRVarAcc;
      if (blank(srvaracc)) then begin
        srvaracc = SRr.SRVarAcc;
      end;      
      if (blank(srvaracc)) then begin
        RecordCheckError(22041,"",-1,"SRVarAcc");      
        res = -1;
        goto LSRVcRecordCheck;
      end;
      if (nonblank(srvaracc)) then begin
        Accr.AccNumber = srvaracc;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,SRrw.SRVarAcc,i,"SRVarAcc");      
          res = -1;
          goto LSRVcRecordCheck;
        end else begin
          if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
            RecordCheckError(1084,SRrw.SRVarAcc,i,"SRVarAcc");      
            res = -1;
            goto LSRVcRecordCheck;
          end;
        end;
      end;
      if (SRrw.Qty<0) then begin
        RecordCheckError(1574,"",i,"Qty");      
        res = -1; 
        goto LSRVcRecordCheck;
      end;
      VerifyRowObjects("PL",SRr.Objects,SRrw.Objects,srvaracc,errcode,errstr,initotcheckf,otcheckaccs,otcheckobjtyps,otcheckcnt); 
      if (errcode!=0) then begin
        RecordCheckError(errcode,errstr,i,"Objects");      
        res = -1;
        goto LSRVcRecordCheck;
      end;
      if (check!=0) then begin
        if (transf) then begin
          prevtot = 0;
          for (j=0;j<rwcnt;j=j+1) begin
            MatRowGet(SRr,j,SR2rw);
            if (SR2rw.ArtCode==SRrw.ArtCode) then begin
              prevtot = prevtot + SR2rw.Qty;
            end;
            if (MSb.SamePriceforItemonSR!=0) then begin
              if (SR2rw.ArtCode==SRrw.ArtCode) then begin
                if (SR2rw.NewFIFO!=SRrw.NewFIFO) then begin
                  RecordCheckError(20087,"",j,"NewFIFO");      
                  res = -1;
                  goto LSRVcRecordCheck;
                end;
              end;
            end;
          end;  
          
          prev = SRrw.Qty;
          for (j=0;j<i;j=j+1) begin
            MatRowGet(SRr,j,SR2rw);
            location2 = SR2rw.Location;              
            if (blank(location2)) then begin
              location2 = SRr.Location;
            end;
            if (blank(location2)) then begin
              location2 = MSb.MainStock;
            end;
            if ((SR2rw.ArtCode==SRrw.ArtCode) and (location2==location)) then begin
              prev = prev + SR2rw.Qty;
            end;
          end;  
          switch (INr.ItemType) begin
            case 1:       
              if (INr.SerNrf==0) or (FIFOPerSerialNr(INr,CAb)==0) then begin                 
                FindStockValue(SRrw.ArtCode,";;;",ISr);
                if (ISr.Instock!=prevtot) then begin
                  RecordCheckError(22040,"",i,"Qty");      
                  res = -1;
                  goto LSRVcRecordCheck;
                end;
                FindStockValue(SRrw.ArtCode,location,ISr);
                if (ISr.Instock<prev) then begin
                  RecordCheckError(1247,"",i,"Qty");      
                  res = -1;
                  goto LSRVcRecordCheck;
                end;
              end;
              if (Locr.RequirePos!=0) then begin
                FindStockValueAtPosition(SRrw.ArtCode,location,SRrw.PosCode,PISr);
                if (SRrw.Qty>PISr.LeftQty) then begin
                  RecordCheckError(1397,"",i,"PosCode");      
                  res = -1; 
                  goto LSRVcRecordCheck;
                end;
              end;                
          end;
        end;
      end;
      if ((check!=0) and (transf)) then begin
        if ((nonblank(SRrw.ArtCode)) and (SRrw.Qty==0)) then begin
          RecordCheckError(1058,"",i,"Qty");      
          res = -1; 
          goto LSRVcRecordCheck;
        end;
        if (((INr.SerNrf>0) and (INr.SerNrf<3)) and (MSb.NoSerOnPU==0)) then begin
          if ((nonblank(SRrw.SerialNr)) and (blank(SRrw.ArtCode))) then begin
            RecordCheckError(1058,"",i,"ArtCode");      
            res = -1; 
            goto LSRVcRecordCheck;
          end;
          if (IsSerialNrCorrect(SRrw.SerialNr)==false) then begin
            RecordCheckError(24154,SRrw.SerialNr,i,"SerialNr");      
            res = -1; 
            goto LSRVcRecordCheck;
          end;        
          if (blank(SRrw.SerialNr)) then begin
            if (SRrw.Qty!=0) then begin
              RecordCheckError(1239,"",i,"SerialNr");      
              res = -1; 
              goto LSRVcRecordCheck;
            end;
          end;
          if (INr.SerNrf==1) then begin
            if (SRrw.Qty>1) then begin
              RecordCheckError(1242,"",i,"SerialNr");      
              res = -1; 
              goto LSRVcRecordCheck;
            end;
            if (SRrw.Qty>0) then begin
              for (cnt=0;cnt<i;cnt=cnt+1) begin
                MatRowGet(SRr,cnt,SR2rw);
                if ((SRrw.ArtCode==SR2rw.ArtCode) and (SRrw.SerialNr==SR2rw.SerialNr)) then begin
                  RecordCheckError(1242,"",i,"SerialNr");      
                  res = -1; 
                  goto LSRVcRecordCheck;
                end;
              end;
            end;          
          end;
          if (SRrw.Qty>0) then begin
            if (INr.SerNrf==1) then begin
              if (SerialNrAvail(SRrw.ArtCode,SRrw.SerialNr,location,SRrw.Qty)==false) then begin
                RecordCheckError(1240,"",i,"SerialNr");      
                res = -1; 
                goto LSRVcRecordCheck;
              end;
            end else begin
              prev = 0;
              for (cnt=0;cnt<i;cnt=cnt+1) begin
                MatRowGet(SRr,cnt,SR2rw);
                location2 = SR2rw.Location;              
                if (blank(location2)) then begin
                  location2 = SRr.Location;
                end;
                if (blank(location2)) then begin
                  location2 = MSb.MainStock;
                end;
                if (nonblank(SRrw.Location)) then begin
                  if ((SR2rw.ArtCode==SRrw.ArtCode) and (SR2rw.SerialNr==SRrw.SerialNr) and
                     (location==location2)) then begin
                     prev = prev + SR2rw.Qty;
                  end;
                end;
              end;
              prev = prev + SRrw.Qty;
              if (SerialNrAvail(SRrw.ArtCode,SRrw.SerialNr,location,prev)==false) then begin
                RecordCheckError(1240,"",i,"SerialNr");      
                res = -1; 
                goto LSRVcRecordCheck;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  if (check!=0) then begin 
    UpdateSRFIFO(SRr);
    SRSumup(SRr);
  end;
  if (transf) then begin 
    sernr = -1;
    if (stat==updatemode) then begin
      sernr = SR2r.SerNr;
    end;

    if (check>0) then begin
      if (MSb.Chronology!=0) then begin 
        if (ExistStockTrans(SRr.Location,SRr.TransDate,errcode,errstr,"SRVc",sernr,MSb)) then begin
          RecordCheckError(errcode,errstr,-1,"TransDate");      
          res = -1;
          goto LSRVcRecordCheck;
        end;
      end;
    end;
    if (CanOKStockRecord(errcode)==false) then begin
      RecordCheckError(errcode,"",-1,"SerNr");      
      res = -1; 
      goto LSRVcRecordCheck;
    end;
  end;
LSRVcRecordCheck_GenTrans:;
  if (gentrans==false) then begin transf = false; end;
  if (IsStandardProduct) then begin
    transf = HasIntegratedNL and transf;
  end;
  if (transf) then begin
    errcode = MakeTransFromSR(gTRp,SRr,false,errofield,errorrow);
    if (errcode!=0) then begin
      RecordCheckError(errcode,"",errorrow,errofield);      
      res = -1;
      goto LSRVcRecordCheck;
    end;
    if ((gTRp.Number>0) and (gTRp.IntYc==SRYc)) then begin
      errstr = CheckTrans(gTRp,2,true);
      if (nonblank(errstr)) then begin
        RecordCheckError(1085,errstr,-1,"SerNr");      
        res = -1;
        goto LSRVcRecordCheck;
      end;
      if (MatRowCnt(gTRp)>0) then begin
        switch (gRuniningMaint) begin    
          case "RecalcStockMn":
            UpdateTrans_Stock(gTRp);          
          otherwise
            SaveTrans(gTRp);
            AddTTrans_SRVc(gTRp,SRr);
        end;
      end;
    end;        
  end;
  
LSRVcRecordCheck:;
  if (res!=0) then begin
    SRr.SerNr = oldnr;
  end;
  SRVcRecordCheck = res;
  return;
end;

global
function LongInt SRVcRecordReset(var record SRVc SRr,record SRVc SR2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  SRr.OKFlag = 0;
  SRVcRecordReset = res;
  return;
end;
