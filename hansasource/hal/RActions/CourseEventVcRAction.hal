external function LongInt DaysInYear(Integer);
external function Integer DaysBeforeMonth(Integer,Integer);
external procedure GetSalesGroup(string,var string);
external updating procedure UpdateJobChilds(Record JobVc,Record JobVc);
external function LongInt DateM42Days(Date);
external procedure CourseEvent_SumUp(var record CourseEventVc);

global
procedure CourseEventToFinish(var record CourseEventVc CourseEventr)
begin
  integer i,rwcnt;
  row CourseEventVc CourseEventrw;
  boolean tofinish;
  
  tofinish = true;
  rwcnt = MatRowCnt(CourseEventr);
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CourseEventr,i,CourseEventrw);
      if (CourseEventrw.InvoiceNo<=0) and (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) then begin
        tofinish = false;
        i = rwcnt;
      end;
    end;
  end else begin  
    tofinish = false;
  end;  
  if (tofinish and CourseEventr.TransDate>CurrentDate) then begin 
    tofinish = false;
  end;
  if (tofinish==true) then begin 
    CourseEventr.StatusFlag = 1;
  end;
  return;
end;  


global
function LongInt CourseEventVcRecordUpdate(var record CourseEventVc CourseEventr,record CourseEventVc CourseEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  if (CourseEventr.StatusFlag==0)  then begin 
    CourseEventToFinish(CourseEventr);
  end;   
    
  CourseEventVcRecordUpdate = res;  
  return;
end;
  


global
function LongInt CourseEventVcRecordDuplicate(var record CourseEventVc CourseEventr,record CourseEventVc CourseEvent2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer insertmode;
  record CourseEventVc locCourseEventr;
  row CourseEventVc Courserw;
  LongInt newnr,l;
  Integer rownr,i,rwcnt;
  row CourseEventVc CourseEventrw;

  res = 0;
  insertmode = 1;  
  CourseEventr.SerNr = -1;
  CourseEventr.InvoicedSum = BlankVal;
  CourseEventr.LastTransferDate = "";
  CourseEventr.CreatedDate = CurrentDate;
  CourseEventr.RemindersSent = 0;
  CourseEventr.PRCode = "";
  CourseEventr.StatusFlag = 0;
  if (SingleUserMode) then begin
    if (CourseEventr.SerNr<=0) then begin
      CourseEventr.SerNr = NextSerNr("CourseEventVc",CourseEventr.CreatedDate,-1,false,"");
    end;
  end; 
 rwcnt = MatRowCnt(CourseEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    CourseEventrw.InvoiceNo = -1;
    CourseEventrw.PRCode = "";
    MatRowPut(CourseEventr,i,CourseEventrw);
  end; 
  CourseEventVcRecordDuplicate = res;
  RETURN;
END;


global
function LongInt CourseEventVcRecordCheck(record CourseEventVc CourseEventr,record CourseEventVc CourseEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer insertmode;
  record CourseEventVc locCourseEventr;
  record CourseVc Courser;
  record UserVc USr;
  record ResTypeVc RTr;
  record CUVc CUr;  
  record CUVc Participantr;  
  record INVc INr;
  row CourseEventVc Courserw;
  Integer invby;
  Boolean gentrans,participantf;
  LongInt newnr,l;
  record SRBlock SRRec;
  string 20 guest;
  record HotelBlock HotelSet;
  Date curd;
  Integer rownr,i,rwcnt;
  row CourseEventVc CourseEventrw;
  record ResVc Resr;
  Integer participants,webparticipants;

  webparticipants = 0;
  curd = CurrentDate;
  BlockLoad(SRRec);
  BlockLoad(HotelSet);
  res = 0;
  insertmode = 1;
  if (CourseEventr.SerNr<=0) then begin
    CourseEventr.SerNr = NextSerNr("CourseEventVc",CourseEventr.CreatedDate,-1,false,"");
  end;
    
  if ((stat==insertmode) or (CourseEventr.SerNr!=CourseEvent2r.SerNr)) then begin
    locCourseEventr.SerNr = CourseEventr.SerNr;
    if (ReadFirstMain(locCourseEventr,1,true)) then begin
      RecordCheckError(1115,CourseEventr.SerNr,-1,"SerNr");
      res = -1;
      goto LCourseEventVcRecordCheck;
    end;
  end;
  
  if(blank(CourseEventr.CourseCode)) then begin
    RecordCheckError(30100,"",-1,"CourseCode");
    res = -1;
    goto LCourseEventVcRecordCheck;    
  end;

  INr.Code = CourseEventr.ItemCode;
  if (ReadFirstMain(INr,1,true)==false) then begin
    RecordCheckError(1120,"",-1,"ItemCode");
    res = -1;
    goto LCourseEventVcRecordCheck;
  end;
  
  rwcnt = MatRowCnt(CourseEventr);
  for(i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    Participantr.Code = CourseEventrw.ContactCode;
    participantf = ReadFirstMain(Participantr,1,true);
    if (Participantr.EmployeeType==0) then begin
      CUr.Code = CourseEventrw.CustCode;
      if (not ReadFirstMain(CUr,1,true)) then begin
        RecordCheckError(1703,"",i,"CustCode");
        res = -1;
        goto LCourseEventVcRecordCheck;
      end;
    end;
    if (CourseEventr.StatusFlag==0) then begin
      if (not participantf) then begin
        RecordCheckError(1272,"",i,"ContactCode");
        res = -1;
        goto LCourseEventVcRecordCheck;
      end;
      if (CUr.blockedFlag!=0) then begin
        RecordCheckError(22069,CourseEventrw.ContactCode,i,"ContactCode");
        res = -1;
        goto LCourseEventVcRecordCheck;
      end;
    end;
    if (nonblank(CourseEventrw.ItemCode)) then begin
      INr.Code = CourseEventrw.ItemCode;
      if (not ReadFirstMain(INr,1,true)) then begin
        RecordCheckError(1120,"",i,"ItemCode");
        res = -1;
        goto LCourseEventVcRecordCheck;
      end;
    end;
    if (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) or (CourseEventrw.Status==kCourseEventPaticipantStatusNotPaying) then begin
      if (CourseEventrw.Source=="WEB") then begin
        webparticipants = webparticipants + 1;
      end else begin
        webparticipants = 0;
      end;
      participants = participants + 1;
    end;
  end;
  if (CourseEventr.MaxPersons>=0) then begin
    if (participants>CourseEventr.MaxPersons and webparticipants==0) then begin
      RecordCheckError(32008,"",-1,"MaxPersons");
      res = -1;
      goto LCourseEventVcRecordCheck;      
    end;
  end;
  Resr.Code = CourseEventr.ConferenceLocation;
  if (not ReadFirstMain(Resr,1,true)) then begin
    RecordCheckError(32004,"",-1,"ConferenceLocation");
    res = -1;
    goto LCourseEventVcRecordCheck;    
  end;
  if (Resr.MaxPersons>0 and CourseEventr.MaxPersons>Resr.MaxPersons) then begin
    RecordCheckError(30104,"",-1,"MaxPersons");
    res = -1;
    goto LCourseEventVcRecordCheck;
  end;
  if(blank(CourseEventr.SalesMan)) then begin
    RecordCheckError(32005,"",-1,"SalesMan");
    res = -1;
    goto LCourseEventVcRecordCheck;    
  end;  
  
  if(blankdate(CourseEventr.TransDate)) then begin
    RecordCheckError(32006,"",-1,"TransDate");
    res = -1;
    goto LCourseEventVcRecordCheck;    
  end;    
  
  if(blankdate(CourseEventr.EndDate)) then begin
    RecordCheckError(30101,"",-1,"EndDate");
    res = -1;
    goto LCourseEventVcRecordCheck;    
  end;
  
  if(blanktime(CourseEventr.StartTime)) then begin
    RecordCheckError(30102,"",-1,"StartTime");
    res = -1;
    goto LCourseEventVcRecordCheck;    
  end;
  
  if(blanktime(CourseEventr.EndTime)) then begin
    RecordCheckError(30103,"",-1,"EndTime");
    res = -1;
    goto LCourseEventVcRecordCheck;    
  end;
  CourseEvent_SumUp(CourseEventr);
LCourseEventVcRecordCheck:;
  CourseEventVcRecordCheck = res;
  RETURN;
END;

global
function LongInt CourseEventVcRecordDefaults(var record CourseEventVc CourseEventr,record CourseEventVc CourseEvent2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 255 tstr;
  Date blankd;
  Time blankt;
  record UserVc Userr;

  Userr.Code = CurrentUser;
  if(ReadFirstMain(Userr,1,true)) then begin
    CourseEventr.SalesMan = CurrentUser;
    CourseEventr.SalesGroup = Userr.SalesGroup;    
    CourseEventr.Objects = Userr.PersObjx;
  end;
  CourseEventr.SerNr = -1;
  CourseEventr.InvoicedSum = BlankVal;
  CourseEventr.LastTransferDate = "";
  CourseEventr.CreatedDate = CurrentDate;
  CourseEventr.RemindersSent = 0;
  if (SingleUserMode) then begin
    CourseEventr.SerNr = NextSerNr("CourseEventVc",CourseEventr.CreatedDate,-1,false,"");
  end;

  CourseEventVcRecordDefaults = res;  
  return;
end;


/*
procedure RetainCourseEventStatus(record CourseEventVc CourseEventr,record CourseEventVc CourseEvent2r)
BEGIN
  Integer i,rwcnt;
  row CourseEventVc CourseEventrw;
  row CourseEventVc CourseEvent2rw;
  Integer rwcnt2;
  
  rwcnt = MatRowCnt(CourseEventr);
  rwcnt2 = MatRowCnt(CourseEvent2r);
  for (i=0;i<rwcnt;i=i+1) begin
    if (i<rwcnt2) then begin
      MatRowGet(CourseEventr,i,CourseEventrw);
      MatRowGet(CourseEvent2r,i,CourseEvent2rw);
      CourseEventrw.InvoiceNo = CourseEvent2rw.InvoiceNo;
      MatRowPut(CourseEventr,i,CourseEventrw);
    end;
  end;
  
  RETURN;
END;

global
function LongInt CourseEventVcRecordProtectFields(var record CourseEventVc CourseEventr,record CourseEventVc CourseEvent2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  RetainCourseEventStatus(CourseEvent2r,CourseEventr);
  CourseEventVcRecordProtectFields = res;
  RETURN;
END;

global
function LongInt CourseEventVcRecordRemoveTest(var record CourseEventVc CourseEventr,record CourseEventVc CourseEvent2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
 
  if(MatRowCnt(CourseEventr) > 0) then begin
    MessageBox(32003,"");
    res = 0;
  end else begin
    res = 1;  
  end;
  
  CourseEventVcRecordRemoveTest = res;
  RETURN;
END;
*/


