external function Boolean POSBalanceExistsAfterThis(Date,Time,string,string);
external function Boolean IsSessionOpen(string,string,Date,Time);
external function Boolean IsUnOKAllowed(string,Date);
external function Boolean RequireOpenSession(string);
external function string 255 CurDrawerCode(string);
external procedure GetUserName(string,var string);

global
function LongInt CashierBalVcRecordDefaults(var record CashierBalVc CashierBalr,record CashierBalVc CashierBal2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 255 tstr;

  CashierBalr.TransDate = CurrentDate;
  CashierBalr.TransTime = CurrentTime;
  CashierBalr.StartBal = blankval;
  CashierBalr.EndBal = blankval;
  CashierBalr.UserCode = CurrentUser;
  GetUserName(CashierBalr.UserCode,tstr);
  CashierBalr.UserName = tstr;
  CashierBalr.MachineName = CurMachineName;
  CashierBalr.Drawer = CurDrawerCode(CashierBalr.MachineName);
  CashierBalVcRecordDefaults = res;
  return;
end;

global
function LongInt CashierBalVcRecordDuplicate(var record CashierBalVc CashierBalr,record CashierBalVc CashierBal2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  string 255 tstr;

  CashierBalr.TransDate = CurrentDate;
  CashierBalr.TransTime = CurrentTime;
  CashierBalr.OKFlag = 0;
  CashierBalr.StartBal = blankval;
  CashierBalr.EndBal = blankval;
  CashierBalr.UserCode = CurrentUser;
  GetUserName(CashierBalr.UserCode,tstr);
  CashierBalr.UserName = tstr;
  CashierBalr.MachineName = CurMachineName;
  CashierBalr.Drawer = CurDrawerCode(CashierBalr.MachineName);
  CashierBalVcRecordDuplicate = res;
  return;
end;

global
function LongInt CashierBalVcRecordCheck(var record CashierBalVc CashierBalr,record CashierBalVc CashierBal2r,LongInt stat,LongInt long4)
BEGIN
  row CashierBalVc CashierBalrw;
  record PMBlock PMRec;
  row PMBlock PMrw;  
  LongInt res;
  Integer insertmode,updatemode;
  Boolean unokf,pmfound;
  Integer rwcnt,i,pmrwcnt,j;
  record UserVc Userr;

  res = 0;
  BlockLoad(PMRec);
  pmrwcnt = MatRowCnt(PMRec);
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update  
  if (CashierBalr.OKFlag==0) then begin
    if (stat==updatemode) then begin
      if (CashierBal2r.OKFlag==1) then begin unokf = true; end;
    end;
  end;
  if (unokf) then begin
    if (IsUnOKAllowed("CashierBalVc",CashierBalr.TransDate)==false) then begin
      RecordCheckError(1046,"",-1,"TransDate");      
      res = -1; 
    end;    
    goto LCashierBalVcRecordCheck;
  end;  
  if (blank(CashierBalr.UserCode)) then begin
    RecordCheckError(1058,"",-1,"UserCode");  
    res = -1;
    goto LCashierBalVcRecordCheck;
  end;
  if (blankdate(CashierBalr.TransDate)) then begin
    RecordCheckError(1058,"",-1,"TransDate");  
    res = -1;
    goto LCashierBalVcRecordCheck;
  end;  
  Userr.Code = CashierBalr.UserCode;
  if (ReadFirstMain(Userr,1,true)==false) then begin
    RecordCheckError(1120,"",-1,"UserCode");  
    res = -1;
    goto LCashierBalVcRecordCheck;
  end;  
  if (RequireOpenSession(CashierBalr.MachineName)) then begin
    if (UserCanAction("AllowCashierCountChange",false)==false) then begin
      CashierBalr.TransDate = CurrentDate;
      CashierBalr.TransTime = CurrentTime;
    end;
    if (blank(CashierBalr.Drawer)) then begin
      RecordCheckError(1058,"",-1,"Drawer");   
      res = -1; 
      goto LCashierBalVcRecordCheck;  
    end;  
/* A casher count should be allowed inside or outside of session
    if (IsSessionOpen(CashierBalr.MachineName,CashierBalr.Drawer,CashierBalr.TransDate,CashierBalr.TransTime)==false) then begin
      RecordCheckError(2195,"",-1,"SerNr");      
      res = -1;
      goto LCashierBalVcRecordCheck;
    end;
*/
  end;
  if (POSBalanceExistsAfterThis(CashierBalr.TransDate,CashierBalr.TransTime,CashierBalr.MachineName,CashierBalr.Drawer)) then begin
    RecordCheckError(2194,"",-1,"TransDate");      
    res = -1;
    goto LCashierBalVcRecordCheck;
  end;

  rwcnt = MatRowCnt(CashierBalr);
  if (rwcnt==0) then begin
    RecordCheckError(1058,"",0,"PMCode");      
    res = -1;
    goto LCashierBalVcRecordCheck;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CashierBalr,i,CashierBalrw);
    pmfound = false;
    for (j=0; j<pmrwcnt;j=j+1) begin
      MatRowGet(PMRec,j,PMrw);
      if (CashierBalrw.PMCode==PMrw.Code) then begin
        pmfound = true;
        j = pmrwcnt;
      end;
    end;
    if (pmfound==false) then begin
      RecordCheckError(1101,"",i,"PMCode");      
      res = -1;
      goto LCashierBalVcRecordCheck;
    end;
  end; 
LCashierBalVcRecordCheck:;  
  CashierBalVcRecordCheck = res;
  RETURN;
END;

procedure CashierBalSumup(record CashierBalVc CashierBalr)
BEGIN
  row CashierBalVc CashierBalrw;
  Integer i,rwcnt;

  CashierBalr.EndBal = blankval;
  rwcnt = MatRowCnt(CashierBalr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CashierBalr,i,CashierBalrw);
    CashierBalr.EndBal = CashierBalr.EndBal + CashierBalrw.Amount;
  end;
  RETURN;
END;

global
function LongInt CashierBalVcRecordSave(var record CashierBalVc CashierBalr,record CashierBalVc CashierBal2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  CashierBalSumup(CashierBalr);
  CashierBalVcRecordSave = res;
  return;
end;

global
function LongInt CashierBalVcRecordUpdate(var record CashierBalVc CashierBalr,record CashierBalVc CashierBal2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  CashierBalSumup(CashierBalr);
  CashierBalVcRecordUpdate = res;
  return;
end;

global
function LongInt CashierBalVcRecordImport(var record CashierBalVc CashierBalr,record CashierBalVc CashierBal2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record UserVc Userr;
  
  if (blank(CashierBalr.SalesGroup)) then begin
    Userr.Code = CashierBalr.UserCode;
    if (ReadFirstMain(Userr,1,true)) then begin end;
    CashierBalr.SalesGroup = Userr.SalesGroup;
  end;
  CashierBalVcRecordImport = res;
  return;
end;

global
function LongInt CashierBalVcRecordRemoveTest(var record CashierBalVc CashierBalr,record CashierBalVc CashierBal2r,LongInt long3,LongInt long4)
BEGIN
  LongInt res;

  res = 1;
  if (CashierBalr.OKFlag!=0) then begin
    res = 0;
  end;
  CashierBalVcRecordRemoveTest = res;
  return;
end;
