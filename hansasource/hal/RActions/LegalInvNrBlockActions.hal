external function Integer SerBlockCheckOverlap(LongInt,LongInt,LongInt,LongInt);
external procedure FindFiscalYearBlockRow(Date,row YearBlock);

function Boolean AllDigits(string tstr)
BEGIN
  Boolean res;
  Integer i,l,a;
  
  res = true;
  l = len(tstr);
  for (i=0;i<l;i=i+1) begin
    a = asc(Mid(tstr,i,1));
    if ((a<asc("0")) or (a>asc("9"))) then begin
      res = false;
      goto LAllDigits;
    end; 
  end;
LAllDigits:;  
  AllDigits = res;
  RETURN;
END; 

function LongInt ValidateSerie(string serie)
begin
  LongInt res;
  Boolean testf;
  Integer i,l,a;
  string 255 tstr;
  LongInt pos;
  
  res = 0;
  if (HasLocalization("AGO,PRT,SVN")) then begin
    l = len(serie);
    for (i=0;i<l;i=i+1) begin
      testf = false;
      a = asc(Mid(serie,i,1));
      if ((a>=asc("A")) and (a<=asc("Z"))) then begin testf = true; end;
      if ((a>=asc("0")) and (a<=asc("9"))) then begin testf = true; end; 
      if (HasLocalization("AGO")) then begin
        if (a==asc("/") or a==asc("-")) then begin testf = true; end;
      end;       
      if (testf==false) then begin
        if (HasLocalization("AGO")) then begin
          res = 37350;
        end;
        if (HasLocalization("PRT,SVN")) then begin
          res = 37351;
        end;
        goto LValidateSerie;
      end; 
    end;
  end;
  if (HasLocalization("ARG")) then begin
    pos = 0;
    GetNextSubstring(serie,pos,"-",tstr);
    GetNextSubstring(serie,pos,"-",tstr);
    if (len(tstr)!=4) then begin
      res = 25714;
      goto LValidateSerie;
    end; 
  end;
LValidateSerie:;  
  ValidateSerie = res;
  return;
end; 

global
updating function LongInt LegalInvNrBlockCheck(var record LegalInvNrBlock LINb,record LegalInvNrBlock LegalInvNr2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer j,i,rwcnt,pmrwcnt;
  row LegalInvNrBlock LINrbrw;
  row LegalInvNrBlock LINrb2rw;
  row YearBlock Ybrw;
  Boolean testf;
  Date td;
  
  td.year = 2012; td.month = 12; td.day = 31;
  res = 0;
  rwcnt = MatRowCnt(LINb);
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(LINb,i,LINrbrw);
    res = ValidateSerie(LINrbrw.Serie);
    if (res!=0) then begin
      RecordCheckError(res,"",i,"Serie");   
      res = -1;
      goto LLegalInvNrBlockCheck;        
    end;
    if (blank(LINrbrw.Serie)) then begin
      RecordCheckError(2210,"",i,"Serie");   
      res = -1;
      goto LLegalInvNrBlockCheck;        
    end;
    if (AllDigits(LINrbrw.TSerStart)==false) then begin
      RecordCheckError(38100,"",i,"TSerStart");   
      res = -1;
      goto LLegalInvNrBlockCheck;        
    end;
    if (AllDigits(LINrbrw.TSerEnd)==false) then begin
      RecordCheckError(38100,"",i,"TSerEnd");   
      res = -1;
      goto LLegalInvNrBlockCheck;        
    end;
    if (HasLocalization("AGO,PRT,SVN")) then begin
      if (HasLocalization("PRT,SVN")) then begin
        FindFiscalYearBlockRow(LINrbrw.PurchDate,Ybrw);
        if (blankdate(LINrbrw.PurchDate)) then begin
          RecordCheckError(20851,"",i,"PurchDate");   
          res = -1;
          goto LLegalInvNrBlockCheck; 
        end;
        if (blankdate(LINrbrw.EndDate)) then begin
          RecordCheckError(20851,"",i,"EndDate");   
          res = -1;
          goto LLegalInvNrBlockCheck; 
        end;
        if (LINrbrw.PurchDate<Ybrw.StartDate) or (LINrbrw.EndDate>Ybrw.EndDate) then begin
          RecordCheckError(20851,"",i,"PurchDate");   
          res = -1;
          goto LLegalInvNrBlockCheck; 
        end;
/*        
        switch (LINrbrw.SelectionType) begin
          case kLegalInvNrSelectionTypeAtSendingERecord:
            if (LINrbrw.RegType!=kOfficialNumTypeRetPUVc) and (LINrbrw.RegType!=kOfficialNumTypeSHVc) then begin
              RecordCheckError(2246,"",i,"SelectionType");   
              res = -1;
              goto LLegalInvNrBlockCheck;        
          end;
        end;
*/        
        if (LINrbrw.RegType==kOfficialNumTypeManualOwnGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeManualConsigmentStockMovVc) or 
           (LINrbrw.RegType==kOfficialNumTypeManualThirdEntGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeManualGlobalTransStockMovVc) or 
           (LINrbrw.RegType==kOfficialNumTypeManualSHVc) or (LINrbrw.RegType==kOfficialNumTypeManualRetVc) or 
           (LINrbrw.RegType==kOfficialNumTypeManualRetPUVc) or (LINrbrw.RegType==kOfficialNumTypeManualCashInvoiceReceiptIVVc) or 
           (LINrbrw.RegType==kOfficialNumTypeManualStockMovVc) or
           (LINrbrw.RegType==kOfficialNumTypeManualIVVc) or (LINrbrw.RegType==kOfficialNumTypeManualCashIVVc) or
           (LINrbrw.RegType==kOfficialNumTypeManualPOSIVVc) or (LINrbrw.RegType==kOfficialNumTypeManualCreditIVVc) or
           (LINrbrw.RegType==kOfficialNumTypeManualInterestIVVc) or (LINrbrw.RegType==kOfficialNumTypeManualIPVc) or
           (LINrbrw.RegType==kOfficialNumTypeLiquidationIVVc) or (LINrbrw.RegType==kOfficialNumTypeReceiptIVVc) then 
        begin
          if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
            RecordCheckError(2246,"",i,"SelectionType");   
            res = -1;
            goto LLegalInvNrBlockCheck;        
          end;
        end;
      end;
      if (LINrbrw.PurchDate>td) then begin
        if (StringToLongInt(LINrbrw.TSerStart)!=1) then begin
          RecordCheckError(25715,"",i,"TSerStart");   
          res = -1;
          goto LLegalInvNrBlockCheck;        
        end;
      end;
      if (len(LINrbrw.TSerStart)!=len(LINrbrw.TSerEnd)) then begin
        RecordCheckError(25715,"",i,"TSerStart");   
        res = -1;
        goto LLegalInvNrBlockCheck;        
      end;
      if (LINrbrw.RegType==kOfficialNumTypeIPVc) then begin
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeAtOK) and (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeManual) then begin
          RecordCheckError(2246,"",i,"SelectionType");   
          res = -1;
          goto LLegalInvNrBlockCheck;        
        end;
      end;
      if (LINrbrw.RegType==kOfficialNumTypeStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeOwnGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeConsigmentStockMovVc) or
         (LINrbrw.RegType==kOfficialNumTypeThirdEntGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeGlobalTransStockMovVc) or 
/*         
         (LINrbrw.RegType==kOfficialNumTypeManualOwnGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualConsigmentStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdConsigmentStockMovVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualThirdEntGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualGlobalTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdGlobalTransStockMovVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualSHVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdSHVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualRetVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdRetVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualRetPUVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdRetPUVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualSHVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdSHVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualRetVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdRetVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualRetPUVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdRetPUVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualGlobalTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdGlobalTransStockMovVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualThirdEntGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualConsigmentStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdConsigmentStockMovVc) or 
         (LINrbrw.RegType==kOfficialNumTypeManualOwnGoodsTransStockMovVc) or (LINrbrw.RegType==kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc) or 
*/         
         (LINrbrw.RegType==kOfficialNumTypeRetPUVc) or (LINrbrw.RegType==kOfficialNumTypeSHVc) then begin
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeAtOK) and (LINrbrw.SelectionType!=kLegalInvNrSelectionTypeAtSendingERecord) then begin
          RecordCheckError(2246,"",i,"SelectionType");   
          res = -1;
          goto LLegalInvNrBlockCheck;        
        end;
      end;
    end;
    if (HasLocalization("ARG")) then begin
      if (len(LINrbrw.TSerStart)!=8) then begin
        RecordCheckError(25715,"",i,"TSerStart");   
        res = -1;
        goto LLegalInvNrBlockCheck;        
      end;
      if (len(LINrbrw.TSerEnd)!=8) then begin
        RecordCheckError(25715,"",i,"TSerEnd");   
        res = -1;
        goto LLegalInvNrBlockCheck;        
      end;
    end;
    if ((nonblankdate(LINrbrw.PurchDate)) and (nonblankdate(LINrbrw.EndDate))) then begin
      if (LINrbrw.PurchDate>LINrbrw.EndDate) then begin
        RecordCheckError(20851,"",i,"EndDate");   
        res = -1;
        goto LLegalInvNrBlockCheck;        
      end;
    end;
    for (j=0;j<i;j=j+1) begin
      MatRowGet(LINb,j,LINrb2rw);
      testf = true;
      if (HasLocalization("PRT,SVN")) then begin
        if (LINrbrw.LocalMachineCode!=LINrb2rw.LocalMachineCode) then begin testf = false; end;
        if (LINrbrw.Branch!=LINrb2rw.Branch) then begin testf = false; end;
      end else begin
        if (LINrbrw.Serie!=LINrb2rw.Serie) then begin testf = false; end;
      end;
      if (LINrbrw.SelectionType!=LINrb2rw.SelectionType) then begin testf = false; end;
      if (LINrbrw.RegType!=LINrb2rw.RegType) then begin testf = false; end;
//      if (LINrbrw.PurchDate>LINrb2rw.EndDate) then begin testf = false; end;
//      if (LINrbrw.EndDate<LINrb2rw.PurchDate) then begin testf = false; end;
      if (HasLocalization("AGO,PRT,SVN")) then begin
        if (LINrbrw.Serie==LINrb2rw.Serie) then begin
          RecordCheckError(25714,"",i,"Serie");   
          res = -1;
          goto LLegalInvNrBlockCheck;   
        end;
      end else begin
        if (testf) then begin
          res = SerBlockCheckOverlap(StringToLongInt(LINrbrw.TSerStart),StringToLongInt(LINrbrw.TSerEnd),StringToLongInt(LINrb2rw.TSerStart),StringToLongInt(LINrb2rw.TSerEnd));
          if (res!=0) then begin
            RecordCheckError(res,"",i,"TSerStart");   
            res = -1;
            goto LLegalInvNrBlockCheck;        
          end;
        end;
      end;
    end;        
  end;  
LLegalInvNrBlockCheck:;  
  LegalInvNrBlockCheck = res;
  return;
end;
