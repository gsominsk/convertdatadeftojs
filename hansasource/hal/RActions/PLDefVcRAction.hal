external function Boolean TimeInRange(Time,Time ,Time);
external function Boolean DateTimeInsideDateTime(Date,Time,Date,Time,Date,Time,Date,Time);
external function Boolean DateTimeInsidePeriod(Date,Time,Date,Time,Date,Time);
external function Integer ActLenClass(Date,Date);

function Integer TestPLDef(record PLDefVc PLDefr,var string errstr,var string gotofield)
begin
  Integer err;
  record PLDefVc oldPLDefr;
  Integer lenclass;
  Date blankd;
  Boolean found,testf;
  
  gotofield = "";
  errstr = "";
  lenclass = 4;
  if (blank(PLDefr.StartDate)) then begin lenclass = -1; end;
  while (lenclass>=0) begin
    ResetLoop(oldPLDefr);
    oldPLDefr.PLReplCode = PLDefr.PLReplCode;
    oldPLDefr.LengthClass = lenclass;
    oldPLDefr.StartDate = PLDefr.StartDate;

    switch (lenclass) begin
      case 4: oldPLDefr.StartDate = blankd;
      case 3: oldPLDefr.StartDate = AddDay(oldPLDefr.StartDate,-366);
      case 2: oldPLDefr.StartDate = AddDay(oldPLDefr.StartDate,-31);
      case 1: oldPLDefr.StartDate = AddDay(oldPLDefr.StartDate,-7);
      case 0: ;
    end;
    found = true;
    while (LoopKey("PLReplCode",oldPLDefr,3,found)) begin
      if (oldPLDefr.PLReplCode!=PLDefr.PLReplCode) then begin found = false; end;
      if (oldPLDefr.LengthClass!=lenclass) then begin found = false; end;
      if (found) then begin
        testf = true;
        if (PLDefr.Code==oldPLDefr.Code) then begin testf = false; end;
        if (testf) then begin  
          if (nonblank(PLDefr.StartTime)) and (nonblank(oldPLDefr.StartTime)) then begin

            if (DateTimeInsideDateTime(PLDefr.StartDate,PLDefr.StartTime,PLDefr.EndDate,PLDefr.EndTime,
                                       oldPLDefr.StartDate,oldPLDefr.StartTime,oldPLDefr.EndDate,oldPLDefr.EndTime)) then begin
              if (TimeInRange(PLDefr.StartTime,oldPLDefr.StartTime,oldPLDefr.EndTime)) then begin
                err = 2030;
                gotofield = "StartTime";
                errstr = oldPLDefr.Code;
                goto LTestPLDef;
              end;
              if (TimeInRange(PLDefr.EndTime,oldPLDefr.StartTime,oldPLDefr.EndTime)) then begin
                err = 2030;
                gotofield = "EndTime";
                errstr = oldPLDefr.Code;
                goto LTestPLDef;
              end;
            end;
            if (DateTimeInsideDateTime(oldPLDefr.StartDate,oldPLDefr.StartTime,oldPLDefr.EndDate,oldPLDefr.EndTime,
                                       PLDefr.StartDate,PLDefr.StartTime,PLDefr.EndDate,PLDefr.EndTime)) then begin
              if (TimeInRange(oldPLDefr.StartTime,PLDefr.StartTime,PLDefr.EndTime)) then begin
                err = 2030;
                gotofield = "StartTime";
                errstr = oldPLDefr.Code;
                goto LTestPLDef;
              end;
              if (TimeInRange(oldPLDefr.EndTime,PLDefr.StartTime,PLDefr.EndTime)) then begin
                err = 2030;
                gotofield = "EndTime";
                errstr = oldPLDefr.Code;
                goto LTestPLDef;
              end;
            end;

          end else begin
            if (nonblank(PLDefr.StartTime)) and (blank(oldPLDefr.StartTime)) then begin
            end else begin
              if (DateInRange(PLDefr.StartDate,oldPLDefr.StartDate,oldPLDefr.EndDate)) then begin
                err = 2030;
                gotofield = "StartDate";
                errstr = oldPLDefr.Code;
                goto LTestPLDef;
              end;
              if (DateInRange(PLDefr.EndDate,oldPLDefr.StartDate,oldPLDefr.EndDate)) then begin
                err = 2030;
                gotofield = "EndDate";
                errstr = oldPLDefr.Code;
                goto LTestPLDef;
              end;
            end;
          end;
        end;
      end;
    end;
    lenclass = lenclass - 1;
  end;
LTestPLDef:;
  TestPLDef = err;
  return;
end;

global
function LongInt PLDefVcRecordCheck(var record PLDefVc PLDefr,record PLDefVc PLDef2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  record PLDefVc oldPLDefr;
  string 255 gotofield,errstr;
  Integer err;
  Boolean testf;

  res = 0;
  if blank(PLDefr.Code) then begin
     res = -1;
     RecordCheckError(1959,"",-1,"Code");
     goto LPLDefVcRecordCheck;
  end;  
     if (blank(PLDefr.PLReplCode)) and (nonblankdate(PLDefr.StartDate)) then begin
       RecordCheckError(1058,"",-1,"PLReplCode");      
       res = -1; 
       goto LPLDefVcRecordCheck;     
     end;

     if (blank(PLDefr.StartDate)) and (nonblankdate(PLDefr.EndDate)) then begin
       RecordCheckError(1058,"",-1,"StartDate");      
       res = -1; 
       goto LPLDefVcRecordCheck;     
     end;
     if (nonblankdate(PLDefr.StartDate)) and (blankdate(PLDefr.EndDate)) then begin
       RecordCheckError(1058,"",-1,"EndDate");      
       res = -1; 
       goto LPLDefVcRecordCheck;     
     end;


     if (blanktime(PLDefr.StartTime)) and (nonblanktime(PLDefr.EndTime)) then begin
       RecordCheckError(1058,"",-1,"StartTime");      
       res = -1; 
       goto LPLDefVcRecordCheck;     
     end;
     if (nonblanktime(PLDefr.StartTime)) and (blanktime(PLDefr.EndTime)) then begin
       RecordCheckError(1058,"",-1,"EndTime");      
       res = -1; 
       goto LPLDefVcRecordCheck;     
     end;
     if (nonblanktime(PLDefr.StartTime)) then begin
       if (blank(PLDefr.PLReplCode)) then begin
         RecordCheckError(1058,"",-1,"PLReplCode");      
         res = -1; 
         goto LPLDefVcRecordCheck;     
       end;
     end;
     
     if (nonblank(PLDefr.PLReplCode)) then begin
       oldPLDefr.Code = PLDefr.PLReplCode;
       if (ReadFirstMain(oldPLDefr,1,true)==false) then begin
         RecordCheckError(1290,"",-1,"PLReplCode");      
         res = -1; 
         goto LPLDefVcRecordCheck;     
       end;
       testf = true;
       if (stat==Rs_update) then begin
         if (PLDefr.Code==PLDef2r.Code) then begin testf = false; end;
       end;
       if (testf) then begin
         oldPLDefr.Code = PLDefr.Code;
         if (ReadFirstMain(oldPLDefr,1,true)) then begin
           RecordCheckError(1545,"",-1,"Code");      
           res = -1; 
           goto LPLDefVcRecordCheck;     
         end;
       end;
     end;
/*
old code
     oldPLDefr.PLReplCode = PLDefr.PLReplCode;
     oldPLDefr.StartDate = PLDefr.StartDate;
     if (ReadLastKey("PLReplCode",oldPLDefr,2,false)) then begin
       if (oldPLDefr.PLReplCode==PLDefr.PLReplCode) then begin
         if (nonblankdate(PLDefr.StartDate)) then begin
           if (oldPLDefr.StartDate!=PLDefr.StartDate) then begin
             if (oldPLDefr.EndDate!=PLDefr.EndDate) then begin
               if (DateInRange(PLDefr.StartDate,oldPLDefr.StartDate,oldPLDefr.EndDate)) then begin
                 RecordCheckError(2030,"",-1,"StartDate");      
                 res = -1; 
                 goto LPLDefVcRecordCheck;     
               end;  
             end;
           end;
           if (oldPLDefr.StartDate==PLDefr.StartDate) then begin
             RecordCheckError(2030,"",-1,"StartDate");      
             res = -1; 
             goto LPLDefVcRecordCheck;     
           end;           
           if (oldPLDefr.EndDate==PLDefr.EndDate) then begin
             RecordCheckError(2030,"",-1,"EndDate");      
             res = -1; 
             goto LPLDefVcRecordCheck;     
           end;           
         end;
       end;
     end;  
     oldPLDefr.PLReplCode = PLDefr.PLReplCode;
     oldPLDefr.EndDate = PLDefr.EndDate;
     if (ReadFirstKey("EndDate",oldPLDefr,2,false)) then begin
       if (oldPLDefr.PLReplCode==PLDefr.PLReplCode) then begin
         if (nonblankdate(PLDefr.StartDate)) then begin
           if (oldPLDefr.StartDate!=PLDefr.StartDate) then begin
             if (oldPLDefr.EndDate!=PLDefr.EndDate) then begin
               if (DateInRange(PLDefr.EndDate,oldPLDefr.StartDate,oldPLDefr.EndDate)) then begin
                 RecordCheckError(2030,"",-1,"EndDate");      
                 res = -1; 
                 goto LPLDefVcRecordCheck;     
               end;  
             end;
           end;
         end;
       end;  
     end;  
*/     

     /* UST: what is this check for? If record is in insert mode, then this record can not exist, therefore always error here
     oldPLDefr.Code = PLDefr.Code;
     if (ReadFirstMain(oldPLDefr,1,true)) then begin
       if (oldPLDefr.Code==PLDefr.Code) then begin
         if (oldPLDefr.StartDate!=PLDefr.StartDate) then begin
           if (oldPLDefr.EndDate!=PLDefr.EndDate) then begin
             if (DateInRange(PLDefr.StartDate,oldPLDefr.StartDate,oldPLDefr.EndDate)) then begin
               RecordCheckError(2030,"",-1,"StartDate");      
               res = -1; 
               goto LPLDefVcRecordCheck;     
             end;  
             if (DateInRange(PLDefr.EndDate,oldPLDefr.StartDate,oldPLDefr.EndDate)) then begin
               RecordCheckError(2030,"",-1,"StartDate");      
               res = -1; 
               goto LPLDefVcRecordCheck;     
             end;  
           end;
         end;
       end;  
     end else begin
       if (nonblank(PLDefr.PLReplCode)) then begin
         RecordCheckError(1290,"",-1,"PLReplCode");      
         res = -1; 
         goto LPLDefVcRecordCheck;     
       end;
     end;
     */
  err = TestPLDef(PLDefr,errstr,gotofield);
  if (err!=0) then begin
    RecordCheckError(err," " & errstr,-1,gotofield);      
    res = err; 
    goto LPLDefVcRecordCheck;     
  end;
LPLDefVcRecordCheck:;
  PLDefVcRecordCheck = res;
  RETURN;
END;

global
function LongInt PLDefVcRecordUpdate(var record PLDefVc PLDefr,record PLDefVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  PLDefr.LengthClass = ActLenClass(PLDefr.StartDate,PLDefr.EndDate);
  PLDefVcRecordUpdate = res;
  return;
end;

global
function LongInt PLDefVcRecordSave(var record PLDefVc PLDefr,record PLDefVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  PLDefr.LengthClass = ActLenClass(PLDefr.StartDate,PLDefr.EndDate);
  PLDefVcRecordSave = res;
  return;
end;

global
function LongInt PLDefVcRecordImport(var record PLDefVc PLDefr,record PLDefVc r2,LongInt long3,LongInt long4)
begin
  LongInt res;
  
  PLDefr.LengthClass = ActLenClass(PLDefr.StartDate,PLDefr.EndDate);
  PLDefVcRecordImport = res;
  return;
end;

global 
function Boolean PLDefVcRecordShouldBeSynchronised(record PLDefVc PLDefr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLDefVcrecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean PLDefVcRecordSync(record PLDefVc PLDefr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLDefVcRecordSync = res;
  return;
end;
