function val PaymentPlanAmount(string FileName,LongInt TransNr)
begin
  val res;
  record PlannedPaymentVc PPr;
  Boolean found;
  
  found = true;
  PPr.FileName = FileName;
  PPr.TransNr = TransNr;
  while (LoopKey("FileName",PPr,2,found)) begin
    if (PPr.FileName!=FileName) then begin found = false; end;
    if (PPr.TransNr!=TransNr) then begin found = false; end;
    if (found) then begin
      res = res + PPr.Sum;
    end;
  end;
  PaymentPlanAmount = res;
  return;
end;

global
function LongInt PlannedPaymentVcRecordCheck(record PlannedPaymentVc PPr,record PlannedPaymentVc PP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  LongInt oldnr;
  record IVVc IVr;
  record VIVc VIr;
  record ORVc ORr;
  record POVc POr;
  val ppsum;

  res = 0;
  oldnr = PPr.SerNr;
  if (blankdate(PPr.TransDate)) then begin
    PPr.TransDate = CurrentDate;
  end;
  if (PPr.SerNr<=0) then begin
    PPr.SerNr = NextSerNr("PlannedPaymentVc",PPr.TransDate,-1,false,"");
  end;
  ppsum = PaymentPlanAmount(PPr.FileName,PPr.TransNr);
  switch (PPr.FileName) begin
    case "IVVc":
      IVr.SerNr = PPr.TransNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (ppsum>IVr.Sum4) then begin
          RecordCheckError(20878,"",-1,"Sum");      
          res = -1; 
          goto LPlannedPaymentVcRecordCheck;
        end;
      end;
    case "ORVc":
      ORr.SerNr = PPr.TransNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        if (ppsum>ORr.Sum4) then begin
          RecordCheckError(20878,"",-1,"Sum");      
          res = -1; 
          goto LPlannedPaymentVcRecordCheck;
        end;
      end;
    case "POVc":
      POr.SerNr = PPr.TransNr;
      if (ReadFirstMain(POr,1,true)) then begin
        if (ppsum>POr.Sum4) then begin
          RecordCheckError(20878,"",-1,"Sum");      
          res = -1; 
          goto LPlannedPaymentVcRecordCheck;
        end;
      end;
    case "VIVc":
      VIr.SerNr = PPr.TransNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        if (ppsum>VIr.PayVal) then begin
          RecordCheckError(20878,"",-1,"Sum");      
          res = -1; 
          goto LPlannedPaymentVcRecordCheck;
        end;
      end;
  end;
LPlannedPaymentVcRecordCheck:;
  if (res!=0) then begin
    PPr.SerNr = oldnr;
  end;  
  PlannedPaymentVcRecordCheck = res;
  return;
end;

global
function LongInt PlannedPaymentVcRecordDefaults(var record PlannedPaymentVc PPr,record PlannedPaymentVc PP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record AccBlock ARAccRec;
  
  PPr.SerNr = -1;
  PPr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    PPr.SerNr = NextSerNr("PlannedPaymentVc",PPr.TransDate,-1,false,"");
  end;
  PlannedPaymentVcRecordDefaults = res; 
  return;
end;

global
function LongInt PlannedPaymentVcRecordDuplicate(var record PlannedPaymentVc PPr,record PlannedPaymentVc PP2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  PPr.SerNr = -1;
  PPr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    PPr.SerNr = NextSerNr("PlannedPaymentVc",PPr.TransDate,-1,false,"");
  end;
  PlannedPaymentVcRecordDuplicate = res; 
  return;
end;

global
function LongInt PlannedPaymentVcRecordInIndex(record PlannedPaymentVc PPr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (PPr.Closed!=0) or (PPr.Paid!=0) then begin 
    if (indexname=="ActAgreedPayDate")  then begin res = 0; end;
    if (indexname=="ActPlanPayDate")  then begin res = 0; end;
    if (indexname=="ActFileName")  then begin res = 0; end;
  end;
  PlannedPaymentVcRecordInIndex = res;
  return;
end;
