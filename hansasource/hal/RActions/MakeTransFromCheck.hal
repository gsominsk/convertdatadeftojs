external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external function Integer DoBookOPWHTAXforMexico(record TRVc,record OPVc,row OPVc,record VIVc,record APAccBlock,
                                      val,val,val,val,val,Boolean,Boolean,string,var val);
external function string 5 AddVATCodeToVATAccRows(string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external procedure AddTransAutoTransRows(record TRVc);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Integer GetAccNamCurVAT(string,var string,var string,Integer,string);
external function Boolean TransInFiscal(Date);
external function Integer CheckIntYc(record CheckVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure ReconcileTRRow(record TRVc,Integer);

function Integer PostWithholdingTaxes(var record TRVc gTRp,record IVVc IVr,row IPVc IPrw,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
begin
  Integer res;
  record ItemSettingBlock ISb;
  Boolean testf;
	row WHTaxBlock WHTaxrw;
	string 255 tstr,taccnumber;
	row IVVc IVrw;
	Integer i,rwcnt;
	val v;
  
  BlockLoad(ISb);
  testf = true;
  if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
  if (ISb.Withholdings==0) then begin testf = false; end;
  
  if (testf) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.ovst==0) and (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin
        v = (IVrw.Sum*IPrw.InvVal)/IVr.Sum4;
        
        GetWHTaxRow(IVrw.WHTax,WHTaxrw);
        if (GetAccName(IVrw.SalesAcc,tstr,60)==false) then begin
          res = 1903;
          goto LPostWithholdingTaxes;
        end;
        if (CheckTTRPerRow("CkeckVc",IVrw.SalesAcc,"",dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,IVrw.SalesAcc,"","",tstr,v,baserate1,baserate2,false,dc2,TotSum,false,taccnumber,"","");         
        if (GetAccName(WHTaxrw.AccNumber,tstr,60)==false) then begin
          res = 1903;
          goto LPostWithholdingTaxes;
        end;
        if (CheckTTRPerRow("CkeckVc",WHTaxrw.AccNumber,"",dc1,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,WHTaxrw.AccNumber,"","",tstr,v,baserate1,baserate2,false,dc1,TotSum,false,taccnumber,"","");         
      end;
    end;    
  end;
LPostWithholdingTaxes:;  
  PostWithholdingTaxes = res;
  return;
end;

function Integer DoBookChequeVAT(record TRVc gTRp,record CheckVc Checkp,record CheckAccBlock CheckAb,
                    val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val totsump)
begin
  Integer res;
  record IPVc IPp;
  row IPVc IPrwp;
  Integer i,rwcnt;
  Integer j,virwcnt;
  row VATCodeBlock VATCoderw;
  string 255 tstr,vatobjstr,vatacc,taccnumber,pvatacc;
  val rd,nv,paidv,vat,t1,tnv,talreadybookednv;
  record SMVc VATr;
  row SMVc VATrw;
  Integer vcrwcnt,iprwcnt,ipi;
  record IPrsVc IPrsr;
  Boolean found;
  record AccBlock Accb;
  record VATCodeBlock VATCb;
  Boolean ldc1,ldc2;
  record IVVc IVr;
  vector Boolean vipsernr;
  record CUVc CUr;
  
  ldc1 = dc1;
  ldc2 = dc2;
  if (Checkp.Openf==kCheckTypeBounced) then begin
    ldc1 = !dc1;
    ldc2 = !dc2;
    if (CheckAb.PostVATfromBounceCheck==0) then begin
      goto LDoBookChequeVAT;
    end;
  end;
  BlockLoad(Accb);
  BlockLoad(VATCb);
//  CUr.Code = Checkp.CUCode;
//  ReadFirstMain(CUr,1,true);
  res = 0;
  if (Accb.IPBookVAT!=0) then begin
    IPrsr.CheckType = 1;
    IPrsr.ChequeNr = Checkp.SerNr;
    IPrsr.TransType = kIPrsTransTypeReceipt;
    found = true;
    while (LoopKey("ChequeNr",IPrsr,3,found)) begin
      if (IPrsr.CheckType!=1) then begin found = false; end;
      if (IPrsr.ChequeNr!=Checkp.SerNr) then begin found = false; end;
      if (IPrsr.TransType!=kIPrsTransTypeReceipt) then begin found = false; end;
      if (found) then begin
        if (vipsernr[IPrsr.TransNr]==false) then begin
        IPp.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IPp,1,true)) then begin
          vipsernr[IPrsr.TransNr] = true;
          iprwcnt = MatRowCnt(IPp);
          for (ipi=0;ipi<iprwcnt;ipi=ipi+1) begin
            MatRowGet(IPp,ipi,IPrwp);
            if (IPrwp.ChequeNr==Checkp.SerNr) and (IPrwp.InvoiceNr>0) then begin
              vatobjstr = ""; 
              if (Accb.VATUseObj!=0) then begin
                vatobjstr = IPrwp.Objects;
              end;
              if (IPrwp.VATVal!=0) then begin
                rwcnt = MatRowCnt(VATCb);
                if (rwcnt==0) then begin
                  res = 1902;
                  goto LDoBookChequeVAT;
                end;
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(VATCb,i,VATCoderw);
                  if (IPrwp.VATCode==VATCoderw.VATCode) then begin
                    goto L222;
                  end;
                end;
                MatRowGet(VATCb,0,VATCoderw);
L222:;
                rd = MulRateToBase1(IPrwp.InvCurncy,IPrwp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                vatacc = VATCoderw.PaySalesVATAcc;
                if (blank(vatacc)) then begin
                  vatacc = Accb.VATBAcc;
                end;
                if (GetAccName(vatacc,tstr,60)==false) then begin
                  res = 2172;
                  goto LDoBookChequeVAT;
                end;
                if (CheckTTRPerRow("IPVc",vatacc,vatobjstr,ldc2,taccnumber,1)) then begin end;      
                AddEuroTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(IPrwp.VATCode),tstr,rd,baserate1,baserate2,false,ldc2,totsump,false,taccnumber,"","");
                if (GetAccName(VATCoderw.SalesVATAcc,tstr,60)==false) then begin
                  res = 2171;
                  goto LDoBookChequeVAT;
                end;
                if (CheckTTRPerRow("IPVc",VATCoderw.SalesVATAcc,vatobjstr,ldc1,taccnumber,1)) then begin end;      
                AddEuroTrRow(gTRp,VATCoderw.SalesVATAcc,vatobjstr,AddVATCodeToVATAccRows(VATCoderw.VATCode),tstr,rd,baserate1,baserate2,false,ldc1,totsump,false,taccnumber,"","");
                
                IVr.SerNr = IPrwp.InvoiceNr;
                if (ReadFirstMain(IVr,1,true)) then begin
                  PostWithholdingTaxes(gTRp,IVr,IPrwp,baserate1,baserate2,dc1,dc2,totsump);
                end;
              end;    
            end;  
          end;
        end;
        end;
      end;
    end;
  end;
LDoBookChequeVAT:;
  DoBookChequeVAT = res;
  return;
end;

global
function Integer MakeTransFromCheck(record TRVc gTRp,var record CheckVc Checkp,Boolean rpt)
begin
  record CheckAccBlock CheckAb;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  record TRVc lTRr;
  string 255 tstr,tstr2;
  val frrate,torate1,torate2,baserate1,baserate2,rs,nrs,rs2,nrs2;
  val clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2;
  val rd,rd2,bv,nilv;
  Boolean dc1;
  Boolean dc2;
  val TotSum;
  Integer errstrno;
  Integer intyc;
  string 10 curcode;
  val blankv;
  Date bd;
  record BaseCurBlock bcur;

  nilv = -1;
  errstrno = 1085;
  dc1 = true;
  dc2 = false;
  BlockLoad(TRGenRec);
  BlockLoad(CheckAb);
  BlockLoad(ARAccRec);

  curcode = Checkp.CurncyCode;
  GetFullCurncyRate(curcode,Checkp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
  Checkp.CurncyCode = curcode;
  RecordNew(gTRp);
  TotSum = blankval;
  
  if (rpt==false) then begin
    if (TRGenRec.ChecksGenTrans==0) then begin
      errstrno = 0;
      goto LMakeTransFromCheck;
    end;
  end;
  if (rpt==false) then begin
    if (nonblankdate(TRGenRec.ChecksStartDate) and
        (Checkp.TransDate<TRGenRec.ChecksStartDate)) then begin
      errstrno = 0;
      goto LMakeTransFromCheck;
    end;
  end;    
  intyc = CheckIntYc(Checkp);  
  if (intyc==kCheckTypeRegistered) then begin
    errstrno = 0;
    goto LMakeTransFromCheck;
  end;
  gTRp.IntYc = intyc;
  gTRp.Number = Checkp.SerNr;
  
  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      errstrno = 1032;
      goto LMakeTransFromCheck;
    end;
  end;  
  gTRp.Comment = USetStr(23081) & " " & Checkp.CheckNr;
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;

  if (intyc==CheckYc) then begin
    if (blankdate(Checkp.ClearingDate)) then begin
      Checkp.ClearingDate = CurrentDate;
    end;
    gTRp.TransDate = Checkp.ClearingDate;
    if (Checkp.Openf==kCheckTypeDeposited) then begin
      curcode = Checkp.CurncyCode;
      GetFullCurncyRate(Checkp.CurncyCode,Checkp.ClearingDate,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2);
      Checkp.CurncyCode = curcode;
    end;
  end;
  if (intyc==Check0Yc) then begin
    gTRp.TransDate = Checkp.TransDate;
  end;
  if (intyc==Check2Yc) then begin
    gTRp.TransDate = CurrentDate;
    GetFullCurncyRate(Checkp.CurncyCode,CurrentDate,frrate,torate1,torate2,baserate1,baserate2);
  end;
  if (rpt==false) then begin
    if (TransInFiscal(gTRp.TransDate)==false) then begin
      errstrno = 1075;
      goto LMakeTransFromCheck;
    end;
  end;
  rd = blankval;
  rd2 = blankval;
  switch (intyc) begin
    case Check0Yc:
      errstrno = GetAccNamCurVAT(Checkp.TempAccNr,tstr,tstr2,60,"");
      if (errstrno!=0) then begin
        errstrno = 1276;
        goto LMakeTransFromCheck;
      end;    
      rs = MulRateToBase1(Checkp.CurncyCode,Checkp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      AddEuroCurncyTrRow(gTRp,Checkp.TempAccNr,Checkp.TempObjects,"",tstr,rs,false,dc1,TotSum,                   
                         Checkp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Checkp.Amount,blankv,-1,false,"");

      errstrno = GetAccNamCurVAT(Checkp.OrigAccNr,tstr,tstr2,60,"");
      if (errstrno!=0) then begin
         errstrno = 1276;
         goto LMakeTransFromCheck;
      end;
      rs = MulRateToBase1(Checkp.CurncyCode,Checkp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      AddEuroCurncyTrRow(gTRp,Checkp.OrigAccNr,Checkp.OrigObjects,"",tstr,rs,false,dc2,TotSum,
                         Checkp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Checkp.Amount,blankv,-1,false,"");
    case CheckYc:   //CheckYc
      errstrno = GetAccNamCurVAT(Checkp.TargetAccNr,tstr,tstr2,60,"");
      if (errstrno!=0) then begin
        errstrno = 1276;
        goto LMakeTransFromCheck;
      end;
//      rs = MulRateToBase1(Checkp.CurncyCode,Checkp.ClearedAmount,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2,DefaultCurRoundOff);
//      nrs = MulRateToBase1(Checkp.CurncyCode,Checkp.ClearedAmount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      rs = MulRateToBase1(Checkp.CurncyCode,Checkp.ClearedAmount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      nrs = MulRateToBase1(Checkp.CurncyCode,Checkp.ClearedAmount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      rd = rs - nrs;
//      rs2 = MulRateToBase2(Checkp.CurncyCode,Checkp.ClearedAmount,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2,DefaultCurRoundOff);
      rs2 = MulRateToBase2(Checkp.CurncyCode,Checkp.ClearedAmount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      nrs2 = MulRateToBase2(Checkp.CurncyCode,Checkp.ClearedAmount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      rd2 = rs2 - nrs2;
//      AddEuroCurncyTrRow(gTRp,Checkp.TargetAccNr,Checkp.TargetObjects,"",tstr,rs,false,dc1,TotSum,
//                         Checkp.CurncyCode,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2,Checkp.ClearedAmount,blankv,-1,false,"");

      AddEuroCurncyTrRow(gTRp,Checkp.TargetAccNr,Checkp.TargetObjects,"",tstr,nrs,false,dc1,TotSum,
                          Checkp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Checkp.ClearedAmount,blankv,-1,false,"");//DA
      errstrno = GetAccNamCurVAT(Checkp.TempAccNr,tstr,tstr2,60,"");
      if (errstrno!=0) then begin
        errstrno = 1276;
        goto LMakeTransFromCheck;
      end;
      rs = MulRateToBase1(Checkp.CurncyCode,Checkp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      AddEuroCurncyTrRow(gTRp,Checkp.TempAccNr,Checkp.TempObjects,"",tstr,rs,false,dc2,TotSum,                   
                         Checkp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Checkp.Amount,blankv,-1,false,"");
      if (Checkp.BankFee!=0) then begin
        if (GetAccName(ARAccRec.ExtraCostAcc,tstr,60)==false) then begin
          errstrno = 1276;
          goto LMakeTransFromCheck;
        end;
        AddEuroTrRow(gTRp,ARAccRec.ExtraCostAcc,"","",tstr,Checkp.BankFee,baserate1,baserate2,false,dc1,TotSum,false,"","","");
      end;
    case Check2Yc:   //Check2Yc
      errstrno = GetAccNamCurVAT(CheckAb.InBounceAcc,tstr,tstr2,60,"");
      if (errstrno!=0) then begin
        errstrno = 1276;
        goto LMakeTransFromCheck;
      end;
      rs = MulRateToBase1(Checkp.CurncyCode,Checkp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      AddEuroCurncyTrRow(gTRp,CheckAb.InBounceAcc,"","",tstr,rs,false,dc1,TotSum,                   
                         Checkp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Checkp.Amount,blankv,-1,false,"");
      if (Checkp.BankFee!=0) then begin
        if (GetAccName(CheckAb.BounceChargeAcc,tstr,60)==false) then begin
          errstrno = 1276;
          goto LMakeTransFromCheck;
        end;
        AddEuroTrRow(gTRp,CheckAb.BounceChargeAcc,"","",tstr,Checkp.BankFee,baserate1,baserate2,false,dc2,TotSum,false,"","","");
      end;
      switch (Checkp.Openf) begin
        case kCheckTypeBounced:
          errstrno = GetAccNamCurVAT(Checkp.TargetAccNr,tstr,tstr2,60,"");
          if (errstrno!=0) then begin
             errstrno = 1276;
            goto LMakeTransFromCheck;
          end;
          rs = MulRateToBase1(Checkp.CurncyCode,Checkp.ClearedAmount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

          AddEuroCurncyTrRow(gTRp,Checkp.TargetAccNr,Checkp.TargetObjects,"",tstr,rs,false,dc2,TotSum,
                             Checkp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Checkp.ClearedAmount,blankv,-1,false,"");
          if (CheckAb.ReconClearCheck!=0) then begin
            ReconcileTRRow(gTRp,1);
          end;
        case kCheckTypeBouncedfromEndorsed:
          errstrno = GetAccNamCurVAT(CheckAb.OutBounceAcc,tstr,tstr2,60,"");
          if (errstrno!=0) then begin
            errstrno = 23086;
            goto LMakeTransFromCheck;
          end;
          rs = MulRateToBase1(Checkp.CurncyCode,Checkp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          AddEuroCurncyTrRow(gTRp,CheckAb.OutBounceAcc,"","",tstr,rs,false,dc2,TotSum,
                             Checkp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,Checkp.Amount,blankv,-1,false,"");
          if (CheckAb.ReconClearCheck!=0) then begin
            ReconcileTRRow(gTRp,1);
          end;
      end;     
  end; 
  if (nonblank(rd)) then begin
    if (rd>0) then begin
      if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
        errstrno = 1917;
        goto LMakeTransFromCheck;
      end;
      if (rd2==0) then begin
        AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                "",-1,0,nilv,bd,-1,false,"","","");
      end else begin
        AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                "",-1,0,nilv,bd,-1,false,"","","");
      end;
    end;
    if (rd<0) then begin
      if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
        errstrno = 1917;
        goto LMakeTransFromCheck;
      end;
      if (rd2==0) then begin
        AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                "",-1,0,nilv,bd,-1,false,"","","");
      end else begin
        AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                "",-1,0,nilv,bd,-1,false,"","","");
      end;
    end;
  end;
  if (nonblank(rd2)) then begin
    if (rd2>0) then begin
      if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
        errstrno = 1918;
        goto LMakeTransFromCheck;
      end;
      AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,0,rd2,false,dc2,TotSum,
                              bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                              "",-1,0,nilv,bd,-1,false,"","","");  
    end else begin
      if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
        errstrno = 1917;
        goto LMakeTransFromCheck;
      end;
      AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,0,rd2,false,dc2,TotSum,
                              bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                              "",-1,0,nilv,bd,-1,false,"","","");
    end;
  end;  
  errstrno = DoBookChequeVAT(gTRp,Checkp,CheckAb,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum);
  if (errstrno!=0) then begin
    goto LMakeTransFromCheck;
  end;
  if (Checkp.Openf==kCheckTypeDeposited) then begin
    AddTransAutoTransRows(gTRp);
  end;
  errstrno = 0;
LMakeTransFromCheck:;
  MakeTransFromCheck = errstrno;
  return;
end;

function Integer DoBookOwnCheckWHTAXforMexico(record TRVc gTRp,record OwnCheckVc OwnCheckp,record CheckAccBlock CheckAb,
                    val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val totsump)
begin
  Integer res;
  record OPVc OPp;
  row OPVc OPrw;
  Integer i,rwcnt;
  Integer j,virwcnt;
  row VATCodeBlock VATCoderw;
  string 255 tstr,vatobjstr,vatacc,taccnumber,pvatacc;
  val rd,nv,paidv,vat,t1,tnv,talreadybookednv;
  record SMVc VATr;
  row SMVc VATrw;
  Integer vcrwcnt,oprwcnt,opi;
  record OPrsVc OPrsr;
  Boolean found;
  record APAccBlock APAccb;
  record VATCodeBlock VATCb;
  record VIVc VIr;
  vector Boolean vopsernr;

  BlockLoad(APAccb);
  BlockLoad(VATCb);
  res = 0;
  if (APAccb.OPBookVAT!=0) then begin
    OPrsr.CheckType = 2;
    OPrsr.ChequeNr = OwnCheckp.SerNr;
    OPrsr.TransType = kOPrsTransTypePayment;
    found = true;
    while (LoopKey("ChequeNr",OPrsr,3,found)) begin
      if (OPrsr.CheckType!=2) then begin found = false; end;
      if (OPrsr.ChequeNr!=OwnCheckp.SerNr) then begin found = false; end;
      if (OPrsr.TransType!=kOPrsTransTypePayment) then begin found = false; end;
      if (found) then begin
        if (vopsernr[OPrsr.TransNr]==false) then begin
        OPp.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPp,1,true)) then begin
          vopsernr[OPrsr.TransNr] = true;
          oprwcnt = MatRowCnt(OPp);
          for (opi=0;opi<oprwcnt;opi=opi+1) begin
            MatRowGet(OPp,opi,OPrw);
            if (OPrw.ChequeNr==OwnCheckp.SerNr) and (OPrw.VISerNr>0) then begin
              VIr.SerNr = OPrw.VISerNr;
              if (ReadFirstMain(VIr,1,true)) then begin
                res = DoBookOPWHTAXforMexico(gTRp,OPp,OPrw,VIr,APAccb,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,"OwnCheckVc",totsump);
                if (res!=0) begin
                  goto LDoBookOwnCheckWHTAXforMexico;
                end;
              end;
            end;
          end;
        end;
        end;
      end;
    end;
  end;
LDoBookOwnCheckWHTAXforMexico:;
  DoBookOwnCheckWHTAXforMexico = res;
  return;  
end;

function Integer DoBookOwnChequeVAT(record TRVc gTRp,record OwnCheckVc OwnCheckp,record CheckAccBlock CheckAb,
                    val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val totsump)
begin
  Integer res;
  record OPVc OPp;
  row OPVc OPrwp;
  Integer i,rwcnt;
  Integer j,virwcnt;
  row VATCodeBlock VATCoderw;
  string 255 tstr,vatobjstr,vatacc,taccnumber,pvatacc;
  val rd,nv,paidv,vat,t1,tnv,talreadybookednv;
  record SMVc VATr;
  row SMVc VATrw;
  Integer vcrwcnt,oprwcnt,opi;
  record OPrsVc OPrsr;
  Boolean found;
  record APAccBlock APAccb;
  record VATCodeBlock VATCb;
  vector Boolean vopsernr;

  if (OwnCheckp.Openf==kCheckTypeBounced) then begin
    if (CheckAb.PostVATfromBounceOwnCheck==0) then begin
      goto LDoBookOwnChequeVAT;
    end;
  end;
  BlockLoad(APAccb);
  BlockLoad(VATCb);
  res = 0;
  if (APAccb.OPBookVAT!=0) then begin
    OPrsr.CheckType = 2;
    OPrsr.ChequeNr = OwnCheckp.SerNr;
    OPrsr.TransType = kOPrsTransTypePayment;
    found = true;
    while (LoopKey("ChequeNr",OPrsr,3,found)) begin
      if (OPrsr.CheckType!=2) then begin found = false; end;
      if (OPrsr.ChequeNr!=OwnCheckp.SerNr) then begin found = false; end;
      if (OPrsr.TransType!=kOPrsTransTypePayment) then begin found = false; end;
      if (found) then begin
        if (vopsernr[OPrsr.TransNr]==false) then begin
        OPp.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPp,1,true)) then begin
          vopsernr[OPrsr.TransNr] = true;
          oprwcnt = MatRowCnt(OPp);
          for (opi=0;opi<oprwcnt;opi=opi+1) begin
            MatRowGet(OPp,opi,OPrwp);
            if (OPrwp.ChequeNr==OwnCheckp.SerNr) and (OPrwp.VISerNr>0) then begin
              vatobjstr = ""; 
              if (APAccb.VATUseObj!=0) then begin
                vatobjstr = OPrwp.Objects;
              end;
              if (OPrwp.VATVal!=0) then begin
                rwcnt = MatRowCnt(VATCb);
                if (rwcnt==0) then begin
                  res = 1902;
                  goto LDoBookOwnChequeVAT;
                end;
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(VATCb,i,VATCoderw);
                  if (OPrwp.VATCode==VATCoderw.VATCode) then begin
                    goto L22;
                  end;
                end;
                MatRowGet(VATCb,0,VATCoderw);
L22:;
                rd = MulRateToBase1(OPrwp.PInvCurncy,OPrwp.VATVal,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
                vatacc = VATCoderw.PayPurchVATAcc;
                if (blank(vatacc)) then begin
                  vatacc = APAccb.VATAcc;
                end;
                if (GetAccName(vatacc,tstr,60)==false) then begin
                  res = 2172;
                  goto LDoBookOwnChequeVAT;
                end;
                if (CheckTTRPerRow("OPVc",vatacc,vatobjstr,dc1,taccnumber,1)) then begin end;      
                AddEuroTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(OPrwp.VATCode),tstr,rd,baserate1,baserate2,true,dc1,totsump,false,taccnumber,"","");
                if (GetAccName(VATCoderw.PurchVATAcc,tstr,60)==false) then begin
                  res = 2171;
                  goto LDoBookOwnChequeVAT;
                end;
                if (CheckTTRPerRow("OPVc",VATCoderw.PurchVATAcc,vatobjstr,dc2,taccnumber,1)) then begin end;      
                AddEuroTrRow(gTRp,VATCoderw.PurchVATAcc,vatobjstr,AddVATCodeToVATAccRows(VATCoderw.VATCode),tstr,rd,baserate1,baserate2,true,dc2,totsump,false,taccnumber,"","");
              end;    
            end;  
          end;
        end;
        end;
      end;
    end;
  end;
LDoBookOwnChequeVAT:;
  DoBookOwnChequeVAT = res;
  return;
end;

global
function Integer MakeTransFromOwnCheck(record TRVc gTRp,var record OwnCheckVc OwnCheckp,Boolean rpt,Boolean skiptempf)
begin
  string 255 tstr,tstr1;
  val frrate,torate1,torate2,baserate1,baserate2,rs,nrs,rs2,nrs2;
  val clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2;
  Boolean dc1,dc2,bool;
  val TotSum,nilv;
  Integer errstrno;
  Integer intyc;
  record CheckAccBlock CheckAb;
  record TRGenBlock TRGenRec;
  record AccBlock ARAccRec;
  record TRVc lTRr;
  string 5 crncycode;
  val rd,rd2,bv;
  Date bd;
  record BaseCurBlock bcur;

  nilv = -1;
  errstrno = 1085;
  dc1 = true;
  dc2 = false;
  BlockLoad(CheckAb);
  BlockLoad(ARAccRec);
  BlockLoad(TRGenRec);
  BlockLoad(bcur);
  crncycode = OwnCheckp.CurncyCode;
  GetFullCurncyRate(crncycode,OwnCheckp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
  OwnCheckp.CurncyCode = crncycode;
  RecordNew(gTRp);
  TotSum = blankval;
  if (rpt==false) then begin
    if (TRGenRec.OwnChecksGenTrans!=1) then begin  
      errstrno = 0;
      goto LMakeTransFromOwnCheck;
    end;
  end;
  if (rpt==false) then begin
    if (nonblankdate(TRGenRec.OwnChecksStartDate)) then begin
       if (OwnCheckp.TransDate<TRGenRec.OwnChecksStartDate) then begin
        errstrno = 0;
        goto LMakeTransFromOwnCheck;
      end;
    end;
  end;  
  switch (OwnCheckp.Openf) begin
    case kCheckTypeAccepted : intyc  = OwnCheck0Yc;
    case kCheckTypeDeposited : intyc  = OwnCheckYc; 
    case kCheckTypeCancelled : intyc  = OwnCheckYc; 
    case kCheckTypeBounced : intyc  = OwnCheckYc;
  end;

  if (intyc==0) then begin
    errstrno = 0;
    goto LMakeTransFromOwnCheck;
  end;
  gTRp.IntYc = intyc;
  gTRp.Number = OwnCheckp.SerNr;
  gTRp.Comment = OwnCheckp.CheckNr;

  if (rpt==false) then begin
    lTRr.IntYc = gTRp.IntYc;
    lTRr.Number = gTRp.Number;
    if (ReadFirstMain(lTRr,2,true)) then begin
      errstrno = 1032;
      goto LMakeTransFromOwnCheck;
    end;
  end;    
  if (intyc==OwnCheckYc) then begin
    if blankdate(OwnCheckp.ClearingDate) then begin
      OwnCheckp.ClearingDate = CurrentDate;
    end;  
    if (OwnCheckp.Openf!=5) then begin
      crncycode = OwnCheckp.CurncyCode;
      GetFullCurncyRate(crncycode,OwnCheckp.ClearingDate,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2);
      OwnCheckp.CurncyCode = crncycode;
      GetFullCurncyRate(crncycode,OwnCheckp.EffectDate,frrate,torate1,torate2,baserate1,baserate2);
    end;
  end;  
  gTRp.RegDate = CurrentDate;
  gTRp.RegTime = CurrentTime;
  gTRp.TransDate = OwnCheckp.ClearingDate;
  if (intyc==OwnCheck0Yc) then begin
    gTRp.TransDate = OwnCheckp.TransDate;
  end;  
  if (OwnCheckp.Openf>2) then begin
    gTRp.TransDate = CurrentDate;
  end;  
  if (TransInFiscal(gTRp.TransDate)==false) then begin
    errstrno = 0;
    goto LMakeTransFromOwnCheck;
  end;
  rd = blankval;
  rd2 = blankval;
  switch (intyc) begin
    case OwnCheck0Yc:   
      errstrno = GetAccNamCurVAT(OwnCheckp.OrigAccNr,tstr,tstr1,60,"");
      if (errstrno!=0) then begin
        errstrno = 1276;
        goto LMakeTransFromOwnCheck;
      end;
      rs = MulRateToBase1(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      AddEuroCurncyTrRow(gTRp,OwnCheckp.OrigAccNr,OwnCheckp.OrigObjects,"",tstr,rs,false,dc1,TotSum,
                         OwnCheckp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,OwnCheckp.Amount,nilv,-1,false,"");
      errstrno = GetAccNamCurVAT(OwnCheckp.TempAccNr,tstr,tstr1,60,"");
      if (errstrno!=0) then begin
        errstrno = 1276;
        goto LMakeTransFromOwnCheck;
      end;
      rs = MulRateToBase1(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      AddEuroCurncyTrRow(gTRp,OwnCheckp.TempAccNr,OwnCheckp.TempObjects,"",tstr,rs,false,dc2,TotSum,
                         OwnCheckp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,OwnCheckp.Amount,nilv,-1,false,"");
    case OwnCheckYc:
//      rs = MulRateToBase1(OwnCheckp.CurncyCode,OwnCheckp.Amount,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2,DefaultCurRoundOff);
      rs =  MulRateToBase1(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      nrs = MulRateToBase1(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      rd = rs - nrs;
//      rs2 = MulRateToBase2(OwnCheckp.CurncyCode,OwnCheckp.Amount,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2,DefaultCurRoundOff);
      rs2 = MulRateToBase2(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      nrs2 = MulRateToBase2(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      rd2 = rs2 - nrs2;
      if (skiptempf) then begin
        errstrno = GetAccNamCurVAT(OwnCheckp.OrigAccNr,tstr,tstr1,60,"");
        if (errstrno!=0) then begin
          errstrno = 1276;
          goto LMakeTransFromOwnCheck;
        end;
        AddEuroCurncyTrRow(gTRp,OwnCheckp.OrigAccNr,OwnCheckp.OrigObjects,"",tstr,rs,false,dc1,TotSum,
                           OwnCheckp.CurncyCode,clfrrate,cltorate1,cltorate2,clbaserate1,clbaserate2,OwnCheckp.Amount,nilv,-1,false,"");
      end else begin
        errstrno = GetAccNamCurVAT(OwnCheckp.TempAccNr,tstr,tstr1,60,"");
        if (errstrno!=0) then begin
          errstrno = 1276;
          goto LMakeTransFromOwnCheck;
        end;
//        AddEuroCurncyTrRow(gTRp,OwnCheckp.TempAccNr,OwnCheckp.TempObjects,"",tstr,rs,false,dc1,TotSum,
//                           OwnCheckp.CurncyCode,frrate,cltorate1,cltorate2,clbaserate1,clbaserate2,OwnCheckp.Amount,nilv,-1,false,"");
        AddEuroCurncyTrRow(gTRp,OwnCheckp.TempAccNr,OwnCheckp.TempObjects,"",tstr,nrs,false,dc1,TotSum,
                           OwnCheckp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,OwnCheckp.Amount,nilv,-1,false,"");
      end;
      switch (OwnCheckp.Openf) begin
        case 6:
          errstrno = GetAccNamCurVAT(CheckAb.OwnBounceAcc,tstr,tstr1,60,"");
          if (errstrno!=0) then begin
            errstrno = 1276;
            goto LMakeTransFromOwnCheck;
          end;
          rs = MulRateToBase1(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          AddEuroCurncyTrRow(gTRp,CheckAb.OwnBounceAcc,"","",tstr,rs,false,dc2,TotSum,
                             OwnCheckp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,OwnCheckp.Amount,nilv,-1,false,"");
        otherwise
          errstrno = GetAccNamCurVAT(OwnCheckp.TargetAccNr,tstr,tstr1,60,"");
          if (errstrno!=0) then begin
            errstrno = 1276;
            goto LMakeTransFromOwnCheck;
          end;
          rs = MulRateToBase1(OwnCheckp.CurncyCode,OwnCheckp.Amount,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
          AddEuroCurncyTrRow(gTRp,OwnCheckp.TargetAccNr,OwnCheckp.TargetObjects,"",tstr,rs,false,dc2,TotSum,
                             OwnCheckp.CurncyCode,frrate,torate1,torate2,baserate1,baserate2,OwnCheckp.Amount,nilv,-1,false,"");
          if (OwnCheckp.Openf==2) then begin
            if (CheckAb.ReconClearCheck<>0) then begin
              ReconcileTRRow(gTRp,1);
            end;
          end;    
      end;
      if (nonblank(rd)) then begin
        if (rd<0) then begin
          if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
            errstrno = 1917;
            goto LMakeTransFromOwnCheck;
          end;
          if (rd2==0) then begin
            AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                    bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                    "",-1,0,nilv,bd,-1,false,"","","");
          end else begin
            AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                    bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                    "",-1,0,nilv,bd,-1,false,"","","");
          end;
        end;
        if (rd>0) then begin
          if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
            errstrno = 1917;
            goto LMakeTransFromOwnCheck;
          end;
          if (rd2==0) then begin
            AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                    bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                    "",-1,0,nilv,bd,-1,false,"","","");
          end else begin
            AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,rd,0,false,dc2,TotSum,
                                    bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                    "",-1,0,nilv,bd,-1,false,"","","");
          end;
        end;
      end;
      if (nonblank(rd2)) then begin
        if (rd2<0) then begin
          if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
            errstrno = 1918;
            goto LMakeTransFromOwnCheck;
          end;
          AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,0,rd2,false,dc2,TotSum,
                                  bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                  "",-1,0,nilv,bd,-1,false,"","","");  
        end else begin
          if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
            errstrno = 1917;
            goto LMakeTransFromOwnCheck;
          end;
          AddEuroCurncyNomARTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,0,rd2,false,dc2,TotSum,
                                  bcur.BaseCur2,bv,bv,bv,blankval,blankval,bv,nilv,
                                  "",-1,0,nilv,bd,-1,false,"","","");
        end;
      end;
  end; 
  
  errstrno = DoBookOwnChequeVAT(gTRp,OwnCheckp,CheckAb,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum);
  if (errstrno!=0) then begin
    goto LMakeTransFromOwnCheck;
  end;

  errstrno = DoBookOwnCheckWHTAXforMexico(gTRp,OwnCheckp,CheckAb,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum);
  if (errstrno!=0) then begin
    goto LMakeTransFromOwnCheck;
  end;
  
  if (OwnCheckp.Openf==2) then begin
    AddTransAutoTransRows(gTRp);
  end;
  errstrno = 0;
LMakeTransFromOwnCheck:;
  MakeTransFromOwnCheck = errstrno;
  return;
end;
