external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure SetRentResStatus(var record RentResVc,record RentControlBlock);

global
function LongInt CollectionVcRecordDefaults(var record CollectionVc Collectionr,record CollectionVc Collection2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  Collectionr.SerNr = -1;
  Collectionr.RegDate = CurrentDate;
  Collectionr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    Collectionr.SerNr = NextSerNr("CollectionVc",Collectionr.TransDate,-1,false,"");
  end;
  Collectionr.AgreementNr = -1;
  Collectionr.Comment = "";
  Collectionr.OKFlag = 0;
  Collectionr.SumQuant = BlankVal;
  CollectionVcRecordDefaults = res; 
  RETURN;
END;

global
function LongInt CollectionVcRecordDuplicate(var record CollectionVc Collectionr,record CollectionVc Collection2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  
  Collectionr.SerNr = -1;
  Collectionr.RegDate = CurrentDate;
  Collectionr.TransDate = CurrentDate;
  if (SingleUserMode) then begin
    Collectionr.SerNr = NextSerNr("CollectionVc",Collectionr.TransDate,-1,false,"");
  end;
  Collectionr.OKFlag = 0;
  CollectionVcRecordDuplicate = res; 
  RETURN;
END;

global 
function Boolean CollectionDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record CollectionVc Collectionr;
  row CollectionVc Collectionrw;
  Boolean res;

  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,Collectionr);
    if (Collectionr.OKFlag==0) then begin
      MatRowGet(Collectionr,rownr,Collectionrw);
/*
      if (Collectionrw.Invoiced>0) then begin
        res = false;
        MessageBox(1092,"");
      end;
*/
    end else begin
      res = false;
    end;
  end;
  CollectionDClassDeleteRowTest = res;
  return;
end;

updating procedure UpdateCollectionRentRes(record CollectionVc Collectionr,Boolean negf)
begin
  record RentControlBlock RCr;
  row CollectionVc Collectionrw;
  record RentResVc RentResr;
  record RentResVc oldRentResr;
  row RentResVc RentResrw;
  Boolean changedf;
  Integer rwcnt,i;
  Integer res;
  val qty;
  
  BlockLoad(RCr);
  rwcnt = MatRowCnt(Collectionr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Collectionr,i,Collectionrw);
    RentResr.SerNr = Collectionrw.RentResSerNo;
    if (ReadFirstMain(RentResr,1,true)) then begin
      RecordCopy(oldRentResr,RentResr);
      if (negf) then begin
        qty = -Collectionrw.Quant;
      end else begin
        qty = Collectionrw.Quant;
      end;
      if (Collectionrw.RentResRow==-1) then begin
        RentResr.RentResCol = RentResr.RentResCol + qty;
        SetRentResStatus(RentResr,RCr);        
        if (RentResr.RentResCol==0) then begin
          RentResr.RentResCol = BlankVal;
        end;
        changedf = true;
      end else begin
        if (Collectionrw.RentResRow<MatRowCnt(RentResr)) then begin
          MatRowGet(RentResr,Collectionrw.RentResRow,RentResrw);
          RentResrw.Col = RentResrw.Col + qty;
          if (RentResrw.Col==0) then begin
            RentResrw.Col = BlankVal;
          end;
          MatRowPut(RentResr,Collectionrw.RentResRow,RentResrw);
          changedf = true;
        end;
      end;
      if (changedf) then begin
        res = RecordUpdate(oldRentResr,RentResr,false);
      end;
    end;
  end;
  return;
end;

global
updating function LongInt CollectionVcRecordSaveAfter(var record CollectionVc Collectionr,record CollectionVc Collection2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  UpdateCollectionRentRes(Collectionr,false);
  CollectionVcRecordSaveAfter = res;
  RETURN;
END;

global
updating function LongInt CollectionVcRecordUpdateAfter(var record CollectionVc Collectionr,record CollectionVc Collection2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  UpdateCollectionRentRes(Collection2r,true);
  UpdateCollectionRentRes(Collectionr,false);
  CollectionVcRecordUpdateAfter = res;
  RETURN;
END;

global
updating function LongInt CollectionVcRecordRemove(var record CollectionVc Collectionr,record CollectionVc Collection2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  UpdateCollectionRentRes(Collectionr,true);
  CollectionVcRecordRemove = res;
  RETURN;
END;

global
function LongInt CollectionVcRecordRemoveTest(var record CollectionVc Collectionr,record CollectionVc Collection2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  res = 1;
  if (Collectionr.OKFlag<>0) then begin
    res = 0;
  end;
  CollectionVcRecordRemoveTest = res;  
  return;
end;

global
updating function LongInt CollectionVcRecordImportAfter(var record CollectionVc Collectionr,record CollectionVc Collection2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
    
  CollectionVcRecordImportAfter = res; 
  RETURN;
END;

