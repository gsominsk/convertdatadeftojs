external function Boolean HasPLIntegratedWithNL();
external function Boolean HasSLIntegratedWithNL();
external function Boolean HasIntegratedNL();

function LongInt CheckNoSeriesOverlapCLIn(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record CLInSerBlock CLInSerRec;
  row CLInSerBlock CLInSerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(CLInSerRec);
  BlockLoad(CLInSerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(CLInSerRec,j,CLInSerrw);
        if ((PMrw.TSerStartIn>=CLInSerrw.TSerStart) and (PMrw.TSerStartIn<=CLInSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapCLIn;
        end;             
        if ((PMrw.TSerEndIn>=CLInSerrw.TSerStart) and (PMrw.TSerEndIn<=CLInSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapCLIn;
        end;
        if ((PMrw.TSerStartOut>=CLInSerrw.TSerStart) and (PMrw.TSerStartOut<=CLInSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapCLIn;
        end;             
        if ((PMrw.TSerEndOut>=CLInSerrw.TSerStart) and (PMrw.TSerEndOut<=CLInSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapCLIn;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapCLIn:;  
  CheckNoSeriesOverlapCLIn = res;
  return;
end;

function LongInt CheckNoSeriesOverlapCLOut(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record CLOutSerBlock CLOutSerRec;
  row CLOutSerBlock CLOutSerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(CLOutSerRec);
  BlockLoad(CLOutSerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(CLOutSerRec,j,CLOutSerrw);
        if ((PMrw.TSerStartIn>=CLOutSerrw.TSerStart) and (PMrw.TSerStartIn<=CLOutSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapCLOut;
        end;             
        if ((PMrw.TSerEndIn>=CLOutSerrw.TSerStart) and (PMrw.TSerEndIn<=CLOutSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapCLOut;
        end;
        if ((PMrw.TSerStartOut>=CLOutSerrw.TSerStart) and (PMrw.TSerStartOut<=CLOutSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapCLOut;
        end;             
        if ((PMrw.TSerEndOut>=CLOutSerrw.TSerStart) and (PMrw.TSerEndOut<=CLOutSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapCLOut;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapCLOut:;  
  CheckNoSeriesOverlapCLOut = res;
  return;
end;

function LongInt CheckNoSeriesOverlapIVSer(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record IVSerBlock IVSerRec;
  row IVSerBlock IVSerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(IVSerRec);
  BlockLoad(IVSerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(IVSerRec,j,IVSerrw);
        if ((PMrw.TSerStartIn>=IVSerrw.TSerStart) and (PMrw.TSerStartIn<=IVSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapIVSer;
        end;             
        if ((PMrw.TSerEndIn>=IVSerrw.TSerStart) and (PMrw.TSerEndIn<=IVSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapIVSer;
        end;
        if ((PMrw.TSerStartOut>=IVSerrw.TSerStart) and (PMrw.TSerStartOut<=IVSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapIVSer;
        end;             
        if ((PMrw.TSerEndOut>=IVSerrw.TSerStart) and (PMrw.TSerEndOut<=IVSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapIVSer;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapIVSer:;  
  CheckNoSeriesOverlapIVSer = res;
  return;
end;

function LongInt CheckNoSeriesOverlapVISer(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record VISerBlock VISerRec;
  row VISerBlock VISerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(VISerRec);
  BlockLoad(VISerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(VISerRec,j,VISerrw);
        if ((PMrw.TSerStartIn>=VISerrw.TSerStart) and (PMrw.TSerStartIn<=VISerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapVISer;
        end;             
        if ((PMrw.TSerEndIn>=VISerrw.TSerStart) and (PMrw.TSerEndIn<=VISerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapVISer;
        end;
        if ((PMrw.TSerStartOut>=VISerrw.TSerStart) and (PMrw.TSerStartOut<=VISerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapVISer;
        end;             
        if ((PMrw.TSerEndOut>=VISerrw.TSerStart) and (PMrw.TSerEndOut<=VISerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapVISer;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapVISer:;  
  CheckNoSeriesOverlapVISer = res;
  return;
end;

function LongInt CheckNoSeriesOverlapIPSer(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record IPSerBlock IPSerRec;
  row IPSerBlock IPSerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(IPSerRec);
  BlockLoad(IPSerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(IPSerRec,j,IPSerrw);
        if ((PMrw.TSerStartIn>=IPSerrw.TSerStart) and (PMrw.TSerStartIn<=IPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapIPSer;
        end;             
        if ((PMrw.TSerEndIn>=IPSerrw.TSerStart) and (PMrw.TSerEndIn<=IPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapIPSer;
        end;
        if ((PMrw.TSerStartOut>=IPSerrw.TSerStart) and (PMrw.TSerStartOut<=IPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapIPSer;
        end;             
        if ((PMrw.TSerEndOut>=IPSerrw.TSerStart) and (PMrw.TSerEndOut<=IPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapIPSer;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapIPSer:;  
  CheckNoSeriesOverlapIPSer = res;
  return;
end;

function LongInt CheckNoSeriesOverlapOPSer(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record OPSerBlock OPSerRec;
  row OPSerBlock OPSerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(OPSerRec);
  BlockLoad(OPSerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(OPSerRec,j,OPSerrw);
        if ((PMrw.TSerStartIn>=OPSerrw.TSerStart) and (PMrw.TSerStartIn<=OPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapOPSer;
        end;             
        if ((PMrw.TSerEndIn>=OPSerrw.TSerStart) and (PMrw.TSerEndIn<=OPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapOPSer;
        end;
        if ((PMrw.TSerStartOut>=OPSerrw.TSerStart) and (PMrw.TSerStartOut<=OPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapOPSer;
        end;             
        if ((PMrw.TSerEndOut>=OPSerrw.TSerStart) and (PMrw.TSerEndOut<=OPSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapOPSer;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapOPSer:;  
  CheckNoSeriesOverlapOPSer = res;
  return;
end;

function LongInt CheckNoSeriesOverlapPPersSer(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record PPersSerBlock PPersSerRec;
  row PPersSerBlock PPersSerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(PPersSerRec);
  BlockLoad(PPersSerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(PPersSerRec,j,PPersSerrw);
        if ((PMrw.TSerStartIn>=PPersSerrw.TSerStart) and (PMrw.TSerStartIn<=PPersSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapPPersSer;
        end;             
        if ((PMrw.TSerEndIn>=PPersSerrw.TSerStart) and (PMrw.TSerEndIn<=PPersSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapPPersSer;
        end;
        if ((PMrw.TSerStartOut>=PPersSerrw.TSerStart) and (PMrw.TSerStartOut<=PPersSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapPPersSer;
        end;             
        if ((PMrw.TSerEndOut>=PPersSerrw.TSerStart) and (PMrw.TSerEndOut<=PPersSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapPPersSer;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapPPersSer:;  
  CheckNoSeriesOverlapPPersSer = res;
  return;
end;

function LongInt CheckNoSeriesOverlapExpSer(record PMBlock PMRec,Integer rwcnt)
begin
  LongInt res;
  Integer j,i,serrwcnt;
  string 255 tstr;
  record ExpSerBlock ExpSerRec;
  row ExpSerBlock ExpSerrw;
  row PMBlock PMrw;
  
  res = 0;
  serrwcnt = MatRowCnt(ExpSerRec);
  BlockLoad(ExpSerRec);
  if (serrwcnt!=0) then begin
    for (i=0; i<rwcnt;i=i+1) begin
      MatRowGet(PMRec,i,PMrw);
      for (j=0; j<serrwcnt;j=j+1) begin
        MatRowGet(ExpSerRec,j,ExpSerrw);
        if ((PMrw.TSerStartIn>=ExpSerrw.TSerStart) and (PMrw.TSerStartIn<=ExpSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
          res = -1;
          goto LCheckNoSeriesOverlapExpSer;
        end;             
        if ((PMrw.TSerEndIn>=ExpSerrw.TSerStart) and (PMrw.TSerEndIn<=ExpSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
          res = -1;
          goto LCheckNoSeriesOverlapExpSer;
        end;
        if ((PMrw.TSerStartOut>=ExpSerrw.TSerStart) and (PMrw.TSerStartOut<=ExpSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
          res = -1;
          goto LCheckNoSeriesOverlapExpSer;
        end;             
        if ((PMrw.TSerEndOut>=ExpSerrw.TSerStart) and (PMrw.TSerEndOut<=ExpSerrw.TSerEnd)) then begin
          RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
          res = -1;
          goto LCheckNoSeriesOverlapExpSer;
        end;
      end;        
    end;  
  end;
LCheckNoSeriesOverlapExpSer:;  
  CheckNoSeriesOverlapExpSer = res;
  return;
end;

function LongInt CheckNoSeriesOverlap(record PMBlock PMRec,Integer rwcnt,string blockname)
begin
 LongInt res;

 res = 0;
 switch (blockname) begin
   case "CLInSerBlock": res = CheckNoSeriesOverlapCLIn(PMRec,rwcnt);
   case "CLOutSerBlock": res = CheckNoSeriesOverlapCLOut(PMRec,rwcnt);
   case "IVSerBlock": res = CheckNoSeriesOverlapIVSer(PMRec,rwcnt);
   case "VISerBlock": res = CheckNoSeriesOverlapVISer(PMRec,rwcnt);
   case "IPSerBlock": res = CheckNoSeriesOverlapIPSer(PMRec,rwcnt);
   case "OPSerBlock": res = CheckNoSeriesOverlapOPSer(PMRec,rwcnt);
   case "PPersSerBlock": res = CheckNoSeriesOverlapPPersSer(PMRec,rwcnt);
   case "ExpSerBlock": res = CheckNoSeriesOverlapExpSer(PMRec,rwcnt);
 end;
 CheckNoSeriesOverlap = res;
 return;
end;

global
function LongInt PMBlockCheck(var record PMBlock PMr,record PMBlock PM2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;
  Integer i,j,rwcnt;
  row PMBlock PMrw;
  row PMBlock PM2rw;
  record AccVc Accr;
  record MainCLBlock MainCLRec;
  Date nd;
  
  res = 0;     
  BlockLoad(MainCLRec);
  rwcnt = MatRowCnt(PMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMr,i,PMrw);
    for (j=(i+1);j<rwcnt;j=j+1) begin
      MatRowGet(PMr,j,PM2rw);
      if (PMrw.Code==PM2rw.Code) then begin
        RecordCheckError(1545,"",j,"Code");   
        res = -1;
        goto LPMBlockCheck;
      end;
    end;
    for (j=0; j<i; j=j+1) begin
      MatRowGet(PMr,j,PM2rw);
      if ((PM2rw.CheckType==0) or (PM2rw.CheckType==5) or (PMrw.CheckType==0) or (PMrw.CheckType==5)) then begin
       if ((PMrw.TSerStartIn!=-1) or ((PM2rw.TSerStartIn!=-1) or (PM2rw.TSerEndIn!=-1))) then begin
         if ((PMrw.TSerStartIn>=PM2rw.TSerStartIn) and (PMrw.TSerStartIn<=PM2rw.TSerEndIn)) then begin
           RecordCheckError(1564,"",i,"TSerStartIn");   
           res = -1;
           goto LPMBlockCheck;
         end;
         if ((PM2rw.TSerStartIn>=PMrw.TSerStartIn) and (PM2rw.TSerStartIn<=PMrw.TSerEndIn)) then begin
           RecordCheckError(1564,"",j,"TSerStartIn");   
           res = -1;
           goto LPMBlockCheck;
         end;
       end;  
       if ((PMrw.TSerEndIn!=-1) or ((PM2rw.TSerStartIn!=-1) or (PM2rw.TSerEndIn!=-1))) then begin
         if ((PMrw.TSerEndIn>=PM2rw.TSerStartIn) and (PMrw.TSerEndIn<=PM2rw.TSerEndIn)) then begin
           RecordCheckError(1564,"",i,"TSerEndIn");   
           res = -1;
           goto LPMBlockCheck;
         end;
         if ((PM2rw.TSerEndIn>=PMrw.TSerStartIn) and (PM2rw.TSerEndIn<=PMrw.TSerEndIn)) then begin
           RecordCheckError(1564,"",j,"TSerEndIn");   
           res = -1;
           goto LPMBlockCheck;
         end;
       end;  
       if ((PMrw.TSerStartOut!=-1) or ((PM2rw.TSerStartOut!=-1) or (PM2rw.TSerEndOut!=-1))) then begin
         if ((PMrw.TSerStartOut>=PM2rw.TSerStartOut) and (PMrw.TSerStartOut<=PM2rw.TSerEndOut)) then begin
           RecordCheckError(1564,"",i,"TSerStartOut");   
           res = -1;
           goto LPMBlockCheck;
         end;
         if ((PM2rw.TSerStartOut>=PMrw.TSerStartOut) and (PM2rw.TSerStartOut<=PMrw.TSerEndOut)) then begin
           RecordCheckError(1564,"",j,"TSerStartOut");   
           res = -1;
           goto LPMBlockCheck;
         end;
       end;  
       if ((PMrw.TSerEndOut!=-1) or ((PM2rw.TSerEndOut!=-1) or (PM2rw.TSerStartOut!=-1))) then begin
         if ((PMrw.TSerEndOut>=PM2rw.TSerStartOut) and (PMrw.TSerEndOut<=PM2rw.TSerEndOut)) then begin
           RecordCheckError(1564,"",i,"TSerEndOut");   
           res = -1;
           goto LPMBlockCheck;
         end; 
         if ((PM2rw.TSerEndOut>=PMrw.TSerStartOut) and (PM2rw.TSerEndOut<=PMrw.TSerEndOut)) then begin
           RecordCheckError(1564,"",j,"TSerEndOut");   
           res = -1;
           goto LPMBlockCheck;
         end; 
       end;  
     end;   
    end;      
    if ((PMrw.TSerStartIn!=-1) and (PMrw.TSerEndIn==-1)) then begin
      RecordCheckError(1564,PMrw.TSerEndIn,i,"TSerEndIn");   
      res = -1;
      goto LPMBlockCheck;
    end;
    if ((PMrw.TSerStartIn==-1) and (PMrw.TSerEndIn!=-1)) then begin
      RecordCheckError(1564,PMrw.TSerStartIn,i,"TSerStartIn");   
      res = -1;
      goto LPMBlockCheck;
    end;
    if ((PMrw.TSerStartOut!=-1) and (PMrw.TSerEndOut==-1)) then begin
      RecordCheckError(1564,PMrw.TSerEndOut,i,"TSerEndOut");   
      res = -1;
      goto LPMBlockCheck;
    end;
    if ((PMrw.TSerStartOut==-1) and (PMrw.TSerEndOut!=-1)) then begin
      RecordCheckError(1564,PMrw.TSerStartOut,i,"TSerStartOut");   
      res = -1;
      goto LPMBlockCheck;
    end;
/*  2011-05-03 disabled after KYB decision that 
    1) we allow invoices to be OK:ed without N/L transactions to be created
    2) account check should be done when subsystem transaction is created

    Accr.AccNumber = PMrw.AccNr;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      RecordCheckError(1007,"",i,"AccNr");   
      res = -1;
      goto LPMBlockCheck;
    end;    
    if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
      RecordCheckError(1084,PMrw.AccNr,i,"AccNumber");      
      res = -1; 
      goto LPMBlockCheck;
    end;          
*/
    if (HasIntegratedNL) then begin
      if (nonblank(PMrw.AccNr)) then begin
        Accr.AccNumber = PMrw.AccNr;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"AccNr");   
          res = -1;
          goto LPMBlockCheck;
        end;    
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.AccNr,i,"AccNr");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
      if (nonblank(PMrw.PrelAccIn)) then begin
        Accr.AccNumber = PMrw.PrelAccIn;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"PrelAccIn");   
          res = -1;
          goto LPMBlockCheck;
        end;    
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.PrelAccIn,i,"PrelAccIn");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
      if (nonblank(PMrw.PrelAccOut)) then begin
        Accr.AccNumber = PMrw.PrelAccOut;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"PrelAccOut");   
          res = -1;
          goto LPMBlockCheck;
        end;    
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.PrelAccOut,i,"PrelAccOut");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
      if (nonblank(PMrw.TAXAccIn)) then begin
        Accr.AccNumber = PMrw.TAXAccIn;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"TAXAccIn");   
          res = -1;
          goto LPMBlockCheck;
        end;    
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.TAXAccIn,i,"TAXAccIn");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
      if (nonblank(PMrw.TAXAccOut)) then begin
        Accr.AccNumber = PMrw.TAXAccOut;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"TAXAccOut");   
          res = -1;
          goto LPMBlockCheck;
        end;
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.TAXAccOut,i,"TAXAccOut");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
      if (nonblank(PMrw.ChangeAcc)) then begin
        Accr.AccNumber = PMrw.ChangeAcc;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"ChangeAcc");   
          res = -1;
          goto LPMBlockCheck;
        end;    
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.ChangeAcc,i,"ChangeAcc");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
      if (nonblank(PMrw.BackOfficeAcc)) then begin
        Accr.AccNumber = PMrw.BackOfficeAcc;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"BackOfficeAcc");   
          res = -1;
          goto LPMBlockCheck;
        end;    
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.BackOfficeAcc,i,"BackOfficeAcc");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
      if (nonblank(PMrw.DiffrenceAcc)) then begin
        Accr.AccNumber = PMrw.DiffrenceAcc;
        if (ReadFirstMain(Accr,1,true)==false) then begin
          RecordCheckError(1007,"",i,"DiffrenceAcc");   
          res = -1;
          goto LPMBlockCheck;
        end;    
        if ((Accr.blockedFlag!=0) or (Accr.GroupAcc!=0)) then begin
          RecordCheckError(1084,PMrw.DiffrenceAcc,i,"DiffrenceAcc");      
          res = -1; 
          goto LPMBlockCheck;
        end;          
      end;
    end;
    if (MainCLRec.CommonNoSer!=0) then begin
      if (CheckNoSeriesOverlap(PMr,rwcnt,"CLInSerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
      if (CheckNoSeriesOverlap(PMr,rwcnt,"CLOutSerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
      if (CheckNoSeriesOverlap(PMr,rwcnt,"IVSerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
      if (CheckNoSeriesOverlap(PMr,rwcnt,"IPSerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
      if (CheckNoSeriesOverlap(PMr,rwcnt,"ExpSerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
      if (CheckNoSeriesOverlap(PMr,rwcnt,"PPersSerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
      if (CheckNoSeriesOverlap(PMr,rwcnt,"VISerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
      if (CheckNoSeriesOverlap(PMr,rwcnt,"OPSerBlock")!=0) then begin
        res = -1;
        goto LPMBlockCheck;
      end;
    end;
  end;   
LPMBlockCheck:;
  PMBlockCheck = res;
  RETURN;
END;

global
function LongInt RestPMBlockCheck(var record RestPMBlock RPMr,record RestPMBlock RPM2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  Integer i,j,rwcnt;
  row RestPMBlock RPMrw;
  row RestPMBlock RPM2rw;
  
  res = 0;
  rwcnt = MatRowCnt(RPMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RPMr,i,RPMrw);
    for (j=(i+1);j<rwcnt;j=j+1) begin
      MatRowGet(RPMr,j,RPM2rw);
      if (RPMrw.PMCode==RPM2rw.PMCode) and (RPMrw.MachineName==RPM2rw.MachineName) then begin
        RecordCheckError(1545,"",j,"PMCode");   
        res = -1;
        goto LRestPMBlockCheck;
      end;
    end;
  end;
LRestPMBlockCheck:;
  RestPMBlockCheck = res;
  return;
end;
