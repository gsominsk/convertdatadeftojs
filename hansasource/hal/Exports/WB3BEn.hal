external procedure ExtractObj(string,var Integer,var string);

procedure PrintHeaderWB3B(record RcVc RepSpec)
BEGIN
  record CYBlock CompYear;
  string 255 tstr;
  
  BlockLoad(CompYear);

  ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString(USetStr(19020));
  NewLine;
  ExportString(USetStr(19021));
  NewLine;
  ExportString(USetStr(19022));
 // ExportPadString("As at Date : ", len("As at Date : ")+1," ", false);
 // ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
  NewLine;
  NewLine;
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(USetStr(19023));
   NewLine;
   ExportString(USetStr(19024));
   ExportString(USetStr(19025));
   ExportString(USetStr(19026));
   ExportString(USetStr(19027));
   ExportString(USetStr(19028));
   ExportString("");
   ExportString("");
   ExportString(USetStr(19029));
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(USetStr(19030));
   ExportString("");
   ExportString(USetStr(19031));
   ExportString("");
   ExportString(USetStr(19032));
   ExportString("");
   ExportString("");  
   ExportString("");
   ExportString(USetStr(19033));
   ExportString("");
   ExportString("");
   ExportString("");  
   ExportString(USetStr(19034));
   ExportString(USetStr(19035));
   NewLine;
   ExportString(USetStr(19036));
   ExportString("");
   ExportString(USetStr(19037));
   ExportString(USetStr(19038));
   ExportString(USetStr(19039));
   ExportString("");
   ExportString(USetStr(19040));
   ExportString("");
   ExportString(USetStr(19041));
   ExportString("");
   ExportString(USetStr(19042));
   ExportString("");
   ExportString(USetStr(19043));
   ExportString("");
   ExportString(USetStr(19041));
   ExportString("");
   ExportString(USetStr(19041));
   ExportString("");
   ExportString(USetStr(19042));
   ExportString("");
   ExportString(USetStr(19045));
   ExportString("");
   ExportString(USetStr(19046));
   ExportString("");  
   ExportString(USetStr(19047));
   ExportString(USetStr(19048));
   NewLine;
   NewLine;
   ExportString(USetStr(19049));
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString("");  
   ExportString(""); 
   NewLine    
   RETURN;
END;

global
procedure WB3BEn(record RcVc RepSpec)
BEGIN
  record POCQStatVc POCQr;
  record VEVc VEr;
  boolean testf, TrHs;
  String 255 ostr;
  Integer i,pos;
  
  PrintHeaderWB3B(RepSpec);
  pos = 0;
  ExtractObj(RepSpec.f1,pos,ostr);
  while (nonblank(ostr)) begin
    i = 0;
    TrHs = true;
    ResetLoop(POCQr);
    POCQr.SerNr = -1;
    POCQr.Object = ostr;
    while (LoopKey("Object",POCQr,2,TrHs)) begin
     testf = true;
     if (TrHs) then begin 
      if nonblank(ostr) then begin
        if (POCQr.Object<>ostr) then begin
            TrHs = false;
            testf = false;
        end;
      end; 
      
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>POCQr.POClass) then begin 
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>POCQr.VECode) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[1] == 1) then begin
        if (POCQr.OKFlag<>1) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[2] == 0) then begin
        if (POCQr.Closed<>0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (i > 0) then begin
          ExportString("");
        end else begin
          ExportString(POCQr.Object);
        end;
        ExportString(POCQr.Comment);      
        ExportString(POCQr.POClass);
        ExportString(POCQr.Tender);
        ExportString("");
        ExportString("");
        ExportDate(POCQr.PreQualSentPl);
        ExportDate(POCQr.PreQualSentAct);
        ExportDate(POCQr.PreQualNoObjPl);
        ExportDate(POCQr.PreQualNoObjAct);
        ExportDate(POCQr.BidDocSentPl);
        ExportDate(POCQr.BidDocSentAct);
        ExportDate(POCQr.BidDocNoObjPl);
        ExportDate(POCQr.BidDocNoObjAct);
        ExportDate(POCQr.BidPackAvPl);
        ExportDate(POCQr.BidPackAvAct);
        ExportDate(POCQr.BidOpenPl);
        ExportDate(POCQr.BidOpenAct);
        ExportDate(POCQr.ContrNoObjPl);
        ExportDate(POCQr.ContrNoObjAct);
        ExportDate(POCQr.ContrSignPl);
        ExportDate(POCQr.ContrSignAct);
        ExportDate(POCQr.ContrEndAct);
        ExportDate(POCQr.ContrEndPl);
        VEr.Code = POCQr.VECode;  
        if (ReadFirstMain(VEr,1,true)) then begin
          ExportString(VEr.Name);
        end; 
        ExportLongInt(POCQr.SerNr);                
        NewLine;   
        i = i + 1;  
      end; //end testf    
     end; //TrHs;
    end; //while
    NewLine;
    ExtractObj(RepSpec.f1,pos,ostr);
  end;
  EndJob;
  RETURN;
END;
