external function Integer CountLinesInUserDefRep(record UserDefRepVc);
external function Integer CountObjects(string);
external procedure FindAccSD(Date,var Date,var Boolean);
external procedure GetUserDefRepDescription(record UserDefRepLinesVc,string,var string);

external procedure GetAccountDescription2(string,string,var string);
external procedure InitValArray(Integer,var Array val);
external procedure InitLongArray(Integer,var Array LongInt);
external procedure GetAccDCTurnover(string,string,Date,Date,record ObjBalVc,string,Integer,Integer,Integer,val,val,var val,var val);
external procedure GetAccDCStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val,var val);

external procedure MonSumListPerBal(string,Integer ,var Array val,var Array val,var Array val,var Array val,var Array val, var Array val, var Array val, var Array val,var Array val, var Array val, var Array val, var Array val,Integer,var Array LongInt,Boolean);
external procedure MonthAccListPerBalResGr(record RcVc,Boolean,record UserDefRepLinesVc,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,Boolean,val,Boolean,date);         

external procedure MonthSumLine2(record RcVc,Boolean,string,string,string,var val,var val,var val,var val,var val,var val, var val,var val,var val,var val,var val,var val,Boolean,val,Boolean,Date,Integer);

external function integer CountMonth(date, date);

procedure MonthAddupRU(Integer DCSide,var val Sbp,var val Pbp,val dSb,val dPb,val cSb,val cPb)
BEGIN
  if (DCSide==1) then begin
    Sbp = dSb;
    Pbp = dPb;
  end;
  if (DCSide==2) then begin
    Sbp = -cSb;
    Pbp = -cPb;
  end;
  if ((DCSide!=1) and (DCSide!=2)) then begin
    Sbp = dSb - cSb;
    Pbp = dPb - cPb;
  end;
  RETURN;
END;

global
function Boolean MonthAccRuPerBal(record RcVc RepSpec,Date frdat,Date todat,Boolean PLf,string accstr,string objs,var val Pbp,Integer DCSide,Boolean resUseAccum,Date AccStart)
BEGIN
  Boolean res;
  record ObjBalVc ObjBalr;
  Boolean Objbals;
  Date pysd,pyed;
  val dSb,cSb,dPb,cPb;
  val t;
  Boolean skipf;
val Sbp,Ebp; //nk
  Sbp = 0;
  Pbp = 0;
  Ebp = 0;
  ObjBalr.AccNumber = accstr;
  ObjBalr.Object = objs;
  ResetLoop( ObjBalr);
  Objbals = ReadFirstMain(ObjBalr,2,true);  
  
  if (Objbals==false) then begin
    if (RepSpec.IncDaughter==0) then begin
      if (CountObjects(objs)<=1) then begin
        skipf = true;
      end;
    end;    
  end;

  if (PLf==false) then begin
      if (skipf==false) then begin
       /* GetAccDCStartBalance(accstr,objs,frdat,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,dSb,cSb);
           NewLine;
           ExportString("1");
           ExportVal(dSb,M4Val);
           ExportVal(cSb,M4Val);
           NewLine;
     
        GetAccDCTurnover(accstr,objs,frdat,todat,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,
                         RepSpec.IncDaughter,dSb,cSb,dPb,cPb);
           NewLine;
           ExportString("2");
           ExportVal(dPb,M4Val);
           ExportVal(cPb,M4Val);
           NewLine;     */          
                        
      end;
      if (RepSpec.AccSpec==1) then begin
        if ((dSb!=0) or (cSb!=0) or (dPb!=0) or (cPb!=0)) then begin
          res = true;
        end;
      end;  
      MonthAddupRU(DCSide,Sbp,Pbp,dSb,dPb,cSb,cPb);
      Ebp = Sbp + Pbp;
  end else begin
      if (skipf==false) then begin
        if (resUseAccum==true) then begin
           GetAccDCTurnover(accstr,objs,AccStart,todat,ObjBalr,RepSpec.CurncyCode,
                           RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,blankval,blankval,dPb,cPb);
        
           
        end else begin
           GetAccDCTurnover(accstr,objs,frdat,todat,ObjBalr,RepSpec.CurncyCode,
                           RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,blankval,blankval,dPb,cPb);
         
        end;
        if (RepSpec.AccSpec==1) then begin
          if ((dSb!=0) or (cSb!=0) or (dPb!=0) or (cPb!=0)) then begin
            res = true;
          end;  
        end;  
        MonthAddupRU(DCSide,Sbp,Pbp,dSb,dPb,cSb,cPb);
        
       end;
  end;
 
 MonthAccRuPerBal = res;
 
 RETURN;
END;

global
procedure MonthAGrSumLine(record RcVc RepSpec,Integer c1,string t1,string t2,string extracode,val Sp1,val Sp2,val Sp3,val Sp4,val Sp5,val Sp6, val Sp7,val Sp8,val Sp9,val Sp10,val Sp11,val Sp12,Boolean negf,val goms,Boolean PLf,Boolean resUseAccum)
BEGIN
  val v,cppr;
  val s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12;
  string 5 tstr;
  Integer ValForm;
  Boolean prntdf;

  ValForm = M4Val;
  s1 = Sp1;
  s2 = Sp2;
  s3 = Sp3;
  s4 = Sp4;
  s5 = Sp5;
  s6 = Sp6;
  s7 = Sp7;
  s8 = Sp8;
  s9 = Sp9;
  s10 = Sp10;
  s11 = Sp11;
  s12 = Sp12;
  
  if (negf) then begin 
    s1 = -s1;
    s2 = -s2;
    s3 = -s3;
    s4 = -s4;
    s5 = -s5;
    s6 = -s6;
    s7 = -s7;
    s8 = -s8;
    s9 = -s9;
    s10 = -s10;
    s11 = -s11;
    s12 = -s12;
  end;
  ExportString(t1);
  ExportString(t2);
 
  ExportVal(s1,ValForm);
  ExportVal(s2,ValForm);
  ExportVal(s3,ValForm);
  ExportVal(s4,ValForm);
  ExportVal(s5,ValForm);
  ExportVal(s6,ValForm);
  ExportVal(s7,ValForm);
  ExportVal(s8,ValForm);
  ExportVal(s9,ValForm);
  ExportVal(s10,ValForm);
  ExportVal(s11,ValForm);
  ExportVal(s12,ValForm);
  
  NewLine;
  RETURN;
END;

global
procedure MonthALPB2ResGr(record RcVc RepSpec,Boolean PLf,record UserDefRepLinesVc UserDefRepLinesr,record AccVc Accp,string anru,var val S1,var val S2,var val S3,var val S4,var val S5,var val S6, var val S7,var val S8,var val S9,var val S10,var val S11,var val S12,Boolean addflag,val goms,var Boolean headflagp,Boolean resUseAccum,Date AccumStartDate)
BEGIN
  Boolean negf,usedf,temp;
  val Sa1,Sa2,Sa3,Sa4,Sa5,Sa6,Sa7,Sa8,Sa9,Sa10,Sa11,Sa12,accumsaldo;
  string 255 nru;
  record CYBlock CompYear;
  string 255 tstr,tstr2;
  Date sdat,edat;
  integer mnum,i;

  
//  if (AccBlockedTest((AccessView*)appSlotArr[gCurSlot].ast_Accessp,Accp->AccNumber)) then goto LALPB2;
  BlockLoad(CompYear);
  nru = anru; //nk ??
  nru = RepSpec.ObjStr;//??
  
mnum = CountMonth( RepSpec.sStartDate,RepSpec.sEndDate);

sdat = AccumStartDate;
edat = AddDay( RepSpec.sStartDate,-1);
usedf = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,accumsaldo,UserDefRepLinesr.DCSide,resUseAccum,AccumStartDate);

sdat = RepSpec.sStartDate;
edat = AddDay(AddMonth(sdat,1),-1);

for (i=1;i<=mnum;i=i+1) begin
 

 switch (i) begin
    case 1:
     	temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa1,UserDefRepLinesr.DCSide,false,AccumStartDate);
	 	sa1 = accumsaldo + sa1;
	case 2:
     	temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa2,UserDefRepLinesr.DCSide,false,AccumStartDate);
     	sa2 = sa1 + sa2;
	case 3:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa3,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa3 = sa2 + sa3;
	case 4:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa4,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa4 = sa3 + sa4;
	case 5:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa5,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa5 = sa4 + sa5;
	case 6:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa6,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa6 = sa5 + sa6;
	case 7:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa7,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa7 = sa6 + sa7;
	case 8:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa8,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa8 = sa7+ sa8;
	case 9:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa9,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa9 = sa8 + sa9;
	case 10:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa10,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa10 = sa9 + sa10;
	case 11:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa11,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa11 = sa10 + sa11;
	case 12:
		temp = MonthAccRuPerBal(RepSpec,sdat,edat,PLf,Accp.AccNumber,nru,Sa12,UserDefRepLinesr.DCSide,false,AccumStartDate);
		sa12 = sa11 + sa12;
  end;
  sdat = AddMonth(sdat,1);
  edat = AddDay(AddMonth(sdat,1),-1);
end;  		


  //nkif (UserDefRepLinesr.DCSaldo==1) then begin
    //if (Eb1<0) then begin goto LALPB2ResGr; end;
  //end;
  //if (UserDefRepLinesr.DCSaldo==2) then begin
    //if (Eb1>=0) then begin goto LALPB2ResGr; end;
  //end;
  
  GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr2);  
  if (nonblank(tstr2)) then begin // UserDefRepLinesr->Comment
  
  
  if ((((RepSpec.AccSpec==1) or (RepSpec.AccSpec==4)) and ((sa1!=0) or (sa2!=0) or (sa3!=0) or (sa4!=0) or (sa5!=0) or (sa6!=0) or (sa7!=0) or (sa8!=0) or (sa9!=0) or (sa10!=0) or (sa11!=0) or (sa12!=0))) or (RepSpec.AccSpec==0) or (nonblank(RepSpec.ObjType))) then begin


      if (headflagp==false) then begin
        ExportString(tstr2);
        NewLine;
        headflagp = true;
      end;
      negf = true;
      if (Accp.AccType==0) then begin
        if (CompYear.NS0[0]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==1) then begin
        if (CompYear.NS0[1]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==2) then begin
        if (CompYear.NS0[2]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==3) then begin
        if (CompYear.NS0[3]==0) then begin
          negf = false;
        end;
      end;
      if (Accp.AccType==4) then begin
        if (CompYear.NS0[4]==0) then begin
          negf = false;
        end;
      end;                    
      GetAccountDescription2(Accp.AccNumber,RepSpec.Language,tstr);            
      if (blank(RepSpec.ObjType)) then begin
          MonthAGrSumLine(RepSpec,0,Accp.AccNumber,tstr,UserDefRepLinesr.SpecCode,Sa1,Sa2,Sa3,Sa4,Sa5,Sa6,Sa7,Sa8,Sa9,Sa10,Sa11,Sa12,negf,goms,PLf,resUseAccum);
      end else begin     
          MonthSumLine2(RepSpec,PLf,Accp.AccNumber,tstr,UserDefRepLinesr.SpecCode,Sa1,Sa2,Sa3,Sa4,Sa5,Sa6,Sa7,Sa8,Sa9,Sa10,Sa11,Sa12,negf,goms,resUseAccum,AccumStartDate,UserDefRepLinesr.DCSide);
      end;      
    end;
  end;
  if (addflag==true) then begin
    S1 = S1 + Sa1;
    S2 = S2 + Sa2;
    S3 = S3 + Sa3;
    S4 = S4 + Sa4;
    S5 = S5 + Sa5;
    S6 = S6 + Sa6;
    S7 = S7 + Sa7;
    S8 = S8 + Sa8;
    S9 = S9 + Sa9;
    S10 = S10 + Sa10;
    S11 = S11 + Sa11;
    S12 = S12 + Sa12;
  end else begin
    S1 = S1 - Sa1;
    S2 = S2 - Sa2;
    S3 = S3 - Sa3;
    S4 = S4 - Sa4;
    S5 = S5 - Sa5;
    S6 = S6 - Sa6;
    S7 = S7 - Sa7;
    S8 = S8 - Sa8;
    S9 = S9 - Sa9;
    S10 = S10 - Sa10;
    S11 = S11 - Sa11;
    S12 = S12 - Sa12;
  end;
LALPB2ResGr:;
  RETURN;
END;

global
procedure MonthALPBEnd(record RcVc RepSpec,Boolean PLf,string Comment,string extracode,val S1,val S2,val S3,val S4,val S5,val S6, val S7,val S8,val S9,val S10,val S11,val S12,Boolean negf,val goms,Boolean aheadflag,Boolean resUseAccum)
BEGIN
  string 255 tstr;
  if ((RepSpec.AccSpec==0) or (RepSpec.AccSpec==1) or (RepSpec.AccSpec==4)) then begin
    if (aheadflag==true) then begin
      tstr = USetStr(3143) & Comment;
      if (nonblank(Comment)) then begin
         MonthAGrSumLine(RepSpec,0,tstr,"",extracode,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,negf,goms,PLf,resUseAccum);
        NewLine;
      end;
    end;
  end;
  if (RepSpec.AccSpec==2) then begin
    if (nonblank(Comment)) then begin
      MonthAGrSumLine(RepSpec,0,Comment,"",extracode,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,negf,goms,PLf,resUseAccum);
    end;
  end;
  if (RepSpec.AccSpec==3) then begin
    if ((S1!=0) or (S2!=0) or (S3!=0) or (S4!=0) or (S5!=0)or (S6!=0) or (S7!=0) or (S8!=0) or (S9!=0) or (S10!=0) or (S11!=0) or (S12!=0)) then begin
      if (nonblank(Comment)) then begin
        MonthAGrSumLine(RepSpec,0,Comment,"",extracode,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,negf,goms,PLf,resUseAccum);
      end;
    end;
  end;
  RETURN;
END;


global
procedure MonthResEn(record RcVc RepSpec)
BEGIN
  record UserDefRepVc UserDefRepr;
  record UserDefRepLinesVc UserDefRepLinesr;
  record CYBlock CompYear;
  record ConsolidationBlock cr;
  Array val S1;
  Array val S2;
  Array val S3;
  Array val S4;
  Array val S5;
  Array val S6;
  Array val S7;
  Array val S8;
  Array val S9;
  Array val S10;
  Array val S11;
  Array val S12;
  Array LongInt aida;
  val tmpS1,tmpS2,tmpS3,tmpS4,tmpS5,tmpS6,tmpS7,tmpS8,tmpS9,tmpS10,tmpS11,tmpS12;
  string 255 tstr,notstr,per1,per2;
  val Goms;
  Boolean negf,AGrs;
  Boolean PLf,resUseAccum;
  Integer i,aid,nr;
  Integer aidn,maxrsums;
  Date AccumStartDate;
  Array Integer Sym_hash;
  Array val gKey_sp;
  Array string 10 gKey_spcode;
  string 255 ckey;
  
  PLf = true;
  BlockLoad(CompYear);
  
  UserDefRepr.shortname = "ResRn"; // RepSpec.shortname perhaps... Standard name for the standard P&L, perhaps a paste special on selection window
  if (ReadFirstMain(UserDefRepr,1,true)==false) then begin
    MessageBox(3167,"");
    goto LMonthResEn;
  end;
  maxrsums = CountLinesInUserDefRep(UserDefRepr);
  InitValArray(maxrsums,S1);
  InitValArray(maxrsums,S2);
  InitValArray(maxrsums,S3);
  InitValArray(maxrsums,S4);
  InitValArray(maxrsums,S5);
  InitValArray(maxrsums,S6);
  InitValArray(maxrsums,S7);
  InitValArray(maxrsums,S8);
  InitValArray(maxrsums,S9);
  InitValArray(maxrsums,S10);
  InitValArray(maxrsums,S11);
  InitValArray(maxrsums,S12);
  InitLongArray(maxrsums,aida);
  resUseAccum = false;
  if ((PLf==true) and (RepSpec.Comparison==0)) then begin
    FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);
  end;  
  //nk ???resUseAccum = false;
  aidn = -1; 
  if ((nonblank(RepSpec.ObjType)) and (RepSpec.AccSpec==2)) then begin
    goto LMonthResEn;
  end;
  
  ckey = "ShortIDKey:" & UserDefRepr.shortname;
  UserDefRepLinesr.IdKey = 0; 
  AGrs = ReadFirstKey(ckey,UserDefRepLinesr,1,false);
  if (AGrs==false) then begin
    goto LMonthResEn;
  end;
  UserDefRepLinesr.IdKey = 0; 
  AGrs = true;
  while (LoopKey(ckey,UserDefRepLinesr,1,AGrs)) begin
    if (AGrs) then begin
      if (UserDefRepLinesr.RsType==3) then begin//RsHead
        GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr);        
        ExportString(tstr);
        NewLine;
      end;
      if (UserDefRepLinesr.RsType==2) then begin//RsSum
        if (aidn<maxrsums) then begin
          aidn = aidn + 1;
        end; 
        aida[aidn] = UserDefRepLinesr.IdKey;
        aid = aidn;
        MonSumListPerBal(UserDefRepLinesr.Desc,aid,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,maxrsums,aida,true);
        MonSumListPerBal(UserDefRepLinesr.Desc2,aid,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,maxrsums,aida,false);
        MonSumListPerBal(UserDefRepLinesr.Desc3,aid,S1,S2,S3,S4,S5,S6,S7,S8,S9,S10,S11,S12,maxrsums,aida,false);
        negf = false;
        if (UserDefRepLinesr.AccType==0) then begin
          if (CompYear.NS0[0]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==1) then begin
          if (CompYear.NS0[1]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==2) then begin
          if (CompYear.NS0[2]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==3) then begin
          if (CompYear.NS0[3]!=0) then begin
            negf = true;
          end;
        end;
        if (UserDefRepLinesr.AccType==4) then begin
          if (CompYear.NS0[4]!=0) then begin
            negf = true;
          end;
        end;              
        if (nonblank(UserDefRepLinesr.Comment)) then begin
          GetUserDefRepDescription(UserDefRepLinesr,RepSpec.Language,tstr);
          MonthAGrSumLine(RepSpec,0,tstr,"",UserDefRepLinesr.SpecCode,S1[aid],S2[aid],S3[aid],S4[aid],S5[aid],S6[aid],S7[aid],S8[aid],S9[aid],S10[aid],S11[aid],S12[aid],negf,Goms,PLf,resUseAccum);         
        end;
      end;
      if (UserDefRepLinesr.RsType==1) then begin//RsRange
        negf = true;
        if (UserDefRepLinesr.AccType==0) then begin
          if (CompYear.NS0[0]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==1) then begin
          if (CompYear.NS0[1]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==2) then begin
          if (CompYear.NS0[2]==0) then begin
            negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==3) then begin
          if (CompYear.NS0[3]==0) then begin
           negf = false;
          end;
        end;
        if (UserDefRepLinesr.AccType==4) then begin
          if (CompYear.NS0[4]==0) then begin
            negf = false;
          end;
        end;              
        if (aidn<maxrsums) then begin
          aidn = aidn + 1;
        end;  
        aida[aidn] = UserDefRepLinesr.IdKey;
        aid = aidn;
        MonthAccListPerBalResGr(RepSpec,PLf,UserDefRepLinesr,tmpS1,tmpS2,tmpS3,tmpS4,tmpS5,tmpS6,tmpS7,tmpS8,tmpS9,tmpS10,tmpS11,tmpS12,negf,Goms,resUseAccum,AccumStartDate);
       
        S1[aid] = tmpS1;
        S2[aid] = tmpS2;
        S3[aid] = tmpS3;
        S4[aid] = tmpS4;
        S5[aid] = tmpS5;
        S6[aid] = tmpS6;
        S7[aid] = tmpS7;
        S8[aid] = tmpS8;
        S9[aid] = tmpS9;
        S10[aid] = tmpS10;
        S11[aid] = tmpS11;
        S12[aid] = tmpS12;
      end;
    end;
  end;
LMonthResEn:;  
  RETURN;
END;
