/* Bankfile for Sweden */ /*SE-Banken, F.Sparbanken & Nordbanken */

#ifdef HAL

procedure FindTypeOfAccount(string accno,string vecode,var integer acctype)
begin
  record CUVc VEr;
  VEr.Code = vecode;
  if (ReadFirstMain(VEr,1,true)) then begin
    if (accno == VEr.BankAccount) then begin
      acctype = 1;
    end;
    if (accno == VEr.Bank) then begin
      acctype = 2;
    end;
  end;
end;

global
procedure BankExpSwedish0(record OPVc OPr,Integer today)
begin
  record VIVc VIr;
  row OPVc OPrw;
  string 100 tstr;
  string 10 t2;
  val totsum;
  val temp;
  Integer i,rwcnt;
  Integer rowcount,invtype;
  Boolean testf;
  integer acctype;
  
  rowcount = 0;
  totsum = 0;
  ExportPadString("11",2," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),10,"0",true);
  ExportPadString(DateToString(CurrentDate,"YYMMDD"),6," ",false);
  ExportPadString(USetStr(1246),22," ",false); // "LEVERANT…RSBETALNINGAR" Has to be in Swedish even in the language of the program is in English
  ExportPadString("",6," ",false); // Generell betaldag
  ExportPadString("",34," ",false);  
  ExportPadString(chr(13) & chr(10),2,"",false);
  rwcnt = MatRowCnt(OPr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    testf = true;
    if (OPrw.ovst!=0) then begin testf = false; end;
    if (OPrw.stp==5) then begin testf = false; end;
    if (blank(OPrw.BankAcc)) then begin testf = false; end;
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)==false) then begin testf = false; end;
    if (VIr.Invalid<>0) then begin testf = false; end;
    invtype = VIr.InvType;
    if (invtype==kInvoiceTypeCreditSpecialSales) then begin invtype = kInvoiceTypeCredit; end;
    if (invtype==kInvoiceTypeNormalSpecialSales) then begin invtype = kInvoiceTypeNormal; end;
    if ((invtype<kInvoiceTypeNormal) or (invtype>kInvoiceTypeCredit)) then begin
      invtype = kInvoiceTypeNormal;
    end;
    if ((invtype==kInvoiceTypeNormal) and (OPrw.RecVal<0)) then begin //VIr.PayVal<0)) then begin
      invtype = kInvoiceTypeCredit; /* temporarily change it to a credit invoice (UGLY!) */
    end;
    if (testf==true) then begin
      if (invtype==3) then begin
        rowcount = rowcount + 1;
        totsum = totsum + OPrw.RecVal; /* RecVal is minus */
//        ExportPadString("15",2," ",false);
        ExportPadString("16",2," ",false);
        ExportPadString(StripNonDigits(OPrw.BankAcc),10,"0",true);
        if (nonblank(VIr.RefStr)) then begin
          ExportPadString(VIr.RefStr,25," ",false);
        end;
        if (blank(VIr.RefStr)) then begin
          ExportPadString(VIr.InvoiceNr,25," ",false);
        end;
        temp = 0 - OPrw.RecVal;
        ExportPadString(ValToString(temp,M4Val,"","",0),12,"0",true);
        if (today==1) then begin
          if (VIr.DueDate>OPr.PayDate) then begin
            tstr = DateToString(VIr.DueDate,"YYMMDD");
          end else begin
            tstr = DateToString(OPr.PayDate,"YYMMDD");
          end;
        end else begin
          tstr = DateToString(OPr.PayDate,"YYMMDD");
        end;
        ExportPadString(tstr,6," ",false);
        ExportPadString("",5," ",false);
        ExportPadString("",20," ",false);
        ExportPadString(chr(13) & chr(10),2,"",false);
      end else begin // invtype
        FindTypeOfAccount(OPrw.BankAcc,OPrw.VECode,acctype);
        if (acctype>0) then begin
          rowcount = rowcount + 1;
          totsum = totsum + OPrw.RecVal;
        end;
        if (acctype == 1) then begin
          ExportPadString("14",2," ",false);
          ExportPadString(StripNonDigits(OPrw.BankAcc),10,"0",true);
          if (nonblank(VIr.RefStr)) then begin
            ExportPadString(VIr.RefStr,25," ",false);
          end;
          if (blank(VIr.RefStr)) then begin
             ExportPadString(VIr.InvoiceNr,25," ",false);
          end;
          temp = OPrw.RecVal;
          if (OPrw.stp==5) then begin
            temp = 0 - OPrw.RecVal;
          end;
          ExportPadString(ValToString(temp,M4Val,"","",0),12,"0",true);
          if (today==1) then begin
            if (VIr.DueDate>OPr.PayDate) then begin
              tstr = DateToString(VIr.DueDate,"YYMMDD");
            end else begin
              tstr = DateToString(OPr.PayDate,"YYMMDD");
            end;
          end else begin
            tstr = DateToString(OPr.PayDate,"YYMMDD");
          end;
          ExportPadString(tstr,6," ",false);
          ExportPadString("",5," ",false);
          ExportPadString("",20," ",false);
          ExportPadString(chr(13) & chr(10),2,"",false);
       end;
        if (acctype == 2) then begin
          ExportPadString("54",2," ",false);
          ExportPadString(StripNonDigits(OPrw.BankAcc),10,"0",true);
          if (nonblank(VIr.RefStr)) then begin
            ExportPadString(VIr.RefStr,25," ",false);
          end;
          if (blank(VIr.RefStr)) then begin
             ExportPadString(VIr.InvoiceNr,25," ",false);
          end;
          temp = OPrw.RecVal;
          if (OPrw.stp==5) then begin
            temp = 0 - OPrw.RecVal;
          end;
          ExportPadString(ValToString(temp,M4Val,"","",0),12,"0",true);
          if (today==1) then begin
            if (VIr.DueDate>OPr.PayDate) then begin
              tstr = DateToString(VIr.DueDate,"YYMMDD");
            end else begin
              tstr = DateToString(OPr.PayDate,"YYMMDD");
            end;
          end else begin
            tstr = DateToString(OPr.PayDate,"YYMMDD");
          end;
          ExportPadString(tstr,6," ",false);
          ExportPadString("",5," ",false);
          ExportPadString("",20," ",false);
          ExportPadString(chr(13) & chr(10),2,"",false);
        end;
      end;
    end;
  end;
  UserTrace("" & OPr.SerNr,2);
  ExportPadString("29",2," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),10,"0",true);
  ExportPadString("" & rowcount,8,"0",true);
  t2 = " ";
  if (totsum<0) then begin
    totsum = 0 - totsum;
    t2 = "-";
  end;
  ExportPadString(ValToString(totsum,M4Val,"","",0),12,"0",true);
  ExportPadString(t2,1," ",false);
  ExportPadString("",47," ",false);
//  NewLine;
  return;
end;

global
procedure BankExpSwedishHandelsBankStart(record OPVc OPr,Integer today,var LongInt rowcount,var val totsum)
begin
  rowcount = 0;
  totsum = 0;
  ExportPadString("11",2," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),10,"0",true);
  ExportPadString(DateToString(CurrentDate,"YYMMDD"),6," ",false);
  ExportPadString(USetStr(1246),22," ",false); // "LEVERANT…RSBETALNINGAR" Has to be in Swedish even in the language of the program is in English
  ExportPadString("",6," ",false); // Generell betaldag
  ExportPadString("",34," ",false);  
  ExportPadString(chr(13) & chr(10),2,"",false);
  return;
end;

global
procedure BankExpSwedishHandelsBankEnd(record OPVc OPr,Integer today,LongInt rowcount,var val totsum)
begin
  string 255 t2;
  
  ExportPadString("29",2," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),10,"0",true);
  ExportPadString("" & rowcount,8,"0",true);
  t2 = " ";
  if (totsum<0) then begin
    totsum = 0 - totsum;
    t2 = "-";
  end;
  ExportPadString(ValToString(totsum,M4Val,"","",0),12,"0",true);
  ExportPadString(t2,1," ",false);
  ExportPadString("",47," ",false);
  ExportPadString(chr(13) & chr(10),2,"",false);
  return;
end;

global
procedure BankExpSwedishHandelsBank(record OPVc OPr,Integer today,var LongInt rowcount,var val totsum)
begin
  record VIVc VIr;
  row OPVc OPrw;
  string 100 tstr;
  string 10 t2;
  val temp;
  Integer i,rwcnt;
  Integer invtype;
  Boolean testf;
  integer acctype;
  
  rwcnt = MatRowCnt(OPr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    testf = true;
    if (OPrw.ovst!=0) then begin testf = false; end;
    if (OPrw.stp==5) then begin testf = false; end;
    if (blank(OPrw.BankAcc)) then begin testf = false; end;
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)==false) then begin testf = false; end;
    if (VIr.Invalid<>0) then begin testf = false; end;
    invtype = VIr.InvType;
    if (invtype==kInvoiceTypeCreditSpecialSales) then begin invtype = kInvoiceTypeCredit; end;
    if (invtype==kInvoiceTypeNormalSpecialSales) then begin invtype = kInvoiceTypeNormal; end;
    if ((invtype<kInvoiceTypeNormal) or (invtype>kInvoiceTypeCredit)) then begin
      invtype = kInvoiceTypeNormal;
    end;
    if ((invtype==kInvoiceTypeNormal) and (OPrw.RecVal<0)) then begin //VIr.PayVal<0)) then begin
      invtype = kInvoiceTypeCredit; /* temporarily change it to a credit invoice (UGLY!) */
    end;
    if (testf==true) then begin
      if (invtype==3) then begin
        rowcount = rowcount + 1;
        totsum = totsum + OPrw.RecVal; /* RecVal is minus */
//        ExportPadString("15",2," ",false);
        ExportPadString("16",2," ",false);
        ExportPadString(StripNonDigits(OPrw.BankAcc),10,"0",true);
        if (nonblank(VIr.RefStr)) then begin
          ExportPadString(VIr.RefStr,25," ",false);
        end;
        if (blank(VIr.RefStr)) then begin
          ExportPadString(VIr.InvoiceNr,25," ",false);
        end;
        temp = 0 - OPrw.RecVal;
        ExportPadString(ValToString(temp,M4Val,"","",0),12,"0",true);
        if (today==1) then begin
          if (VIr.DueDate>OPr.PayDate) then begin
            tstr = DateToString(VIr.DueDate,"YYMMDD");
          end else begin
            tstr = DateToString(OPr.PayDate,"YYMMDD");
          end;
        end else begin
          tstr = DateToString(OPr.PayDate,"YYMMDD");
        end;
        ExportPadString(tstr,6," ",false);
        ExportPadString("",5," ",false);
        ExportPadString("",20," ",false);
        ExportPadString(chr(13) & chr(10),2,"",false);
      end else begin // invtype
        rowcount = rowcount + 1;
        FindTypeOfAccount(OPrw.BankAcc,OPrw.VECode,acctype);
        totsum = totsum + OPrw.RecVal;
        if (acctype == 1) then begin
          ExportPadString("14",2," ",false);
          ExportPadString(StripNonDigits(OPrw.BankAcc),10,"0",true);
          if (nonblank(VIr.RefStr)) then begin
            ExportPadString(VIr.RefStr,25," ",false);
          end;
          if (blank(VIr.RefStr)) then begin
             ExportPadString(VIr.InvoiceNr,25," ",false);
          end;
          temp = OPrw.RecVal;
          if (OPrw.stp==5) then begin
            temp = 0 - OPrw.RecVal;
          end;
          ExportPadString(ValToString(temp,M4Val,"","",0),12,"0",true);
          if (today==1) then begin
            if (VIr.DueDate>OPr.PayDate) then begin
              tstr = DateToString(VIr.DueDate,"YYMMDD");
            end else begin
              tstr = DateToString(OPr.PayDate,"YYMMDD");
            end;
          end else begin
            tstr = DateToString(OPr.PayDate,"YYMMDD");
          end;
          ExportPadString(tstr,6," ",false);
          ExportPadString("",5," ",false);
          ExportPadString("",20," ",false);
          ExportPadString(chr(13) & chr(10),2,"",false);
       end;
        if (acctype == 2) then begin
          ExportPadString("54",2," ",false);
          ExportPadString(StripNonDigits(OPrw.BankAcc),10,"0",true);
          if (nonblank(VIr.RefStr)) then begin
            ExportPadString(VIr.RefStr,25," ",false);
          end;
          if (blank(VIr.RefStr)) then begin
             ExportPadString(VIr.InvoiceNr,25," ",false);
          end;
          temp = OPrw.RecVal;
          if (OPrw.stp==5) then begin
            temp = 0 - OPrw.RecVal;
          end;
          ExportPadString(ValToString(temp,M4Val,"","",0),12,"0",true);
          if (today==1) then begin
            if (VIr.DueDate>OPr.PayDate) then begin
              tstr = DateToString(VIr.DueDate,"YYMMDD");
            end else begin
              tstr = DateToString(OPr.PayDate,"YYMMDD");
            end;
          end else begin
            tstr = DateToString(OPr.PayDate,"YYMMDD");
          end;
          ExportPadString(tstr,6," ",false);
          ExportPadString("",5," ",false);
          ExportPadString("",20," ",false);
          ExportPadString(chr(13) & chr(10),2,"",false);
        end;
      end;
    end;
  end;
  UserTrace("" & OPr.SerNr,2);
  return;
end;
  