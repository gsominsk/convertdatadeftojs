// Bankfile for Sweden SISU

external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure SwedishCheckNo(val,var string);

global
procedure BankExpSwedish3(record OPVc OPr,Integer bankfee,Integer mode,Integer curType)
begin
  record VIVc VIr;
  record CUVc VEr;
  record BankVc BKr;
  row OPVc OPrw;
  Integer rwcnt,i;
  Integer rowcount;
  string 200 tstr;
  Boolean VEf;
  val temp,totsum,totbase;
  Boolean testf;
  Integer invtype;
  record CYBlock CYb;

  BlockLoad(CYb);
  totsum = 0;
  totbase = 0;
  rowcount = 0;

// Avsändarpost
  ExportPadString("0",1," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),8,"0",true);
  ExportPadString(DateToString(CurrentDate,"YYMMDD"),6," ",false);

  ExportPadString(CYb.CompName,22," ",false);
  ExportPadString(CYb.Addr0 & " " & CYb.Addr1 & " " & CYb.Addr2,35," ",false);
  
//  ExportPadString("",57," ",false);
  ExportPadString(DateToString(CurrentDate,"YYMMDD"),6," ",false);
  ExportPadString("20",2," ",false);
  ExportPadString(chr(13) & chr(10),2,"",false);
  rwcnt = MatRowCnt(OPr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    testf = true;
    if (OPrw.ovst<>0) then begin testf = false; end; 
    if (OPrw.stp==5) then begin testf = false; end;
    if (blank(OPrw.BankAcc)) then begin testf = false; end; 
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)==false) then begin testf = false; end; 
    if (VIr.Invalid<>0) then begin testf = false; end;
    invtype = VIr.InvType;
    if (invtype==kInvoiceTypeCreditSpecialSales) then begin invtype = kInvoiceTypeCredit; end;
    if (invtype==kInvoiceTypeNormalSpecialSales) then begin invtype = kInvoiceTypeNormal; end;
    if ((invtype<kInvoiceTypeNormal) or (invtype>kInvoiceTypeCredit)) then begin
      invtype = kInvoiceTypeNormal;
    end;
    if ((invtype==kInvoiceTypeNormal) and (OPrw.RecVal<0)) then begin //VIr.PayVal<0)) then begin
      invtype = kInvoiceTypeCredit; /* temporarily change it to a credit invoice (UGLY!) */
    end;
    if (testf==true) then begin
    VEr.Code = VIr.VECode;
    if (ReadFirstMain(VEr,1,true)==false) then begin // Just in case
      VEr.Name = "";
      VEr.InvAddr0 = "";
      VEr.InvAddr1 = "";
      VEr.InvAddr2 = "";
      VEr.CountryCode = "";
      VEr.Bank = "";
      VEr.BankAccount = "";
      VEr.AccOperator = "";
    end;
     rowcount = rowcount + 1;
// Namnpost
     ExportPadString("2",1," ",false);
     ExportPadString(OPrw.VECode,7,"0",true);
     tstr = UpperCase(Mid(VEr.Name,0,30));
     ExportPadString(tstr,30," ",false);
     tstr = UpperCase(Mid(VEr.Name,30,33));
     ExportPadString(tstr,33," ",false);
     ExportPadString("",9," ",false);
     ExportPadString(chr(13) & chr(10),2,"",false);

// Adresspost
     ExportPadString("3",1," ",false);
     ExportPadString(OPrw.VECode,7,"0",true);
     ExportPadString(UpperCase(VEr.InvAddr0),30," ",false);
     ExportPadString(UpperCase(VEr.InvAddr1 & VEr.InvAddr2),33," ",false);
     ExportPadString("",2," ",false);
     if (curType==0) then begin
       ExportPadString("0",1," ",false);
     end else begin
       ExportPadString("1",1," ",false);
     end;
     ExportPadString(VEr.CountryCode,2," ",false);
     ExportPadString("",1," ",false);
     if (bankfee==1) then begin
       ExportPadString("2",1," ",false);
     end else begin
       ExportPadString("0",1," ",false);
     end;
     ExportPadString("1",1," ",false);
     if (mode==1) then begin
       ExportPadString("1",1," ",false);
     end else begin
       ExportPadString("0",1," ",false);
     end;
     ExportPadString(chr(13) & chr(10),2,"",false);

// Bankpost - ny
     ExportPadString("4",1," ",false);
     ExportPadString(OPrw.VECode,7,"0",true);
     BKr.Code = VEr.AccOperator;
     if (ReadFirstMain(BKr,1,true)) then begin
       ExportPadString(UpperCase(BKr.SWIFT),12," ",false);
       ExportPadString(UpperCase(BKr.Nr2),30," ",false);
       ExportPadString(UpperCase(BKr.Nr1),30," ",false);
     end else begin
       ExportPadString(UpperCase(VEr.AccOperator),12," ",false);
       ExportPadString(UpperCase(VEr.BankAccount),30," ",false);
       ExportPadString(UpperCase(VEr.Bank),30," ",false);
     end;
     ExportPadString(chr(13) & chr(10),2,"",false);
    if (invtype==3) then begin // credit invoice
// Betalningspost 
        ExportPadString("5",1," ",false);
        ExportPadString(OPrw.VECode,7,"0",true);
        ExportPadString("" & VIr.InvoiceNr,25," ",false);
        temp = MulRateToBase1(VIr.CurncyCode,OPrw.PInvVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        totbase = totbase + temp;
        temp = 0 - temp;
        SwedishCheckNo(temp,tstr);
        ExportPadString(tstr,11,"0",true);
        ExportPadString("0",10,"0",false);
        ExportPadString(OPrw.RecCurncy,3," ",false);
        tstr = DateToString(OPr.PayDate,"YYMMDD");
        ExportPadString(tstr,6," ",false);
        ExportPadString("1",1," ",false);
        ExportPadString("",1," ",false);
        temp = 0 - OPrw.RecVal;
//        totsum = totsum + temp; // This must be wrong, the value is already minus
        totsum = totsum + OPrw.RecVal;
        SwedishCheckNo(temp,tstr);
        ExportPadString(tstr,13,"0",true);
        ExportPadString("",1," ",false);
        ExportPadString("0",1," ",false);
        ExportPadString(chr(13) & chr(10),2,"",false);
    end;
    if (invtype<>3) then begin// normal invoices
// Betalningspost 
        ExportPadString("6",1," ",false);
        ExportPadString(OPrw.VECode,7,"0",true);
        ExportPadString("" & VIr.InvoiceNr,25," ",false);
        temp = MulRateToBase1(VIr.CurncyCode,OPrw.PInvVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        totbase = totbase + temp;
        ExportPadString(ValToString(temp,M4Val,"","",0),11,"0",true);
        ExportPadString("",10,"0",false);
        ExportPadString(OPrw.RecCurncy,3," ",false);
        //JJ
        if (VIr.DueDate>OPr.PayDate) then begin
          tstr = DateToString(VIr.DueDate,"YYMMDD");
        end else begin
          tstr = DateToString(OPr.PayDate,"YYMMDD");
        end;        
        ExportPadString(tstr,6," ",false);
        //JJ
        ExportPadString("1",1," ",false);
        ExportPadString("",1," ",false);
        totsum = totsum + OPrw.RecVal;
        ExportPadString(ValToString(OPrw.RecVal,M4Val,"","",0),13,"0",true);
        ExportPadString("",1," ",false);
        ExportPadString("0",1," ",false);
        ExportPadString(chr(13) & chr(10),2,"",false);
    end;
// Riksbankspost
    ExportPadString("7",1," ",false);
    ExportPadString(OPrw.VECode,7,"0",true);
    ExportPadString(OPrw.SortCode,3," ",false);
    ExportPadString("",69," ",false);
    ExportPadString(chr(13) & chr(10),2,"",false);
  end;
  end;
  UserTrace("" & OPr.SerNr,2);
// Avstämningspost 
  ExportPadString("9",1," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),8,"0",true);
  ExportPadString(ValToString(totbase,M4Val,"","",0),12,"0",true);
  ExportPadString("",42," ",false);
  ExportPadString(ValToString(totsum,M4Val,"","",0),15,"0",true);
  ExportPadString("",2," ",false);
//  NewLine;
  return;
end;
