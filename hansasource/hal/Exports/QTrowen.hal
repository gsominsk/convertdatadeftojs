function Boolean OutQTRows(record RcVc RepSpec,record QTVc QTr)
begin
  Integer i,rwcnt;
  string 255 tstr;
  String 10 unitt;
  record INVc INr;
  row QTVc QTrw;
  row INVc inrw;
  val t;
  Integer j,inrows;
  Boolean res,testf;
  
  res = true;
  if (RepSpec.ArtMode==0) then begin
    res = false;
    rwcnt = MatRowCnt(QTr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      testf = true;
      MatRowGet(QTr,i,QTrw);
      if nonblank(RepSpec.f3) then begin
        if (RepSpec.f3<>QTrw.ArtCode) then begin testf = false; end;
      end;
      INr.Code = QTrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        tstr = INr.Group;
        unitt = INr.Unittext;
      end;
      if nonblank(RepSpec.AccStr) then begin
        if (RepSpec.AccStr<>tstr) then begin testf = false; end;
      end;
      if (testf) then begin
        tstr="";
        ExportLongInt(QTr.SerNr);
        ExportDate(QTr.QTDate);
        ExportString(QTr.PlanShip);
        ExportString(QTr.CustCode);
        ExportString(QTr.Addr0);
        ExportString(QTr.SalesMan);
        ExportString(QTr.QuoteClass);
        ExportString(QTr.ValidUntilDate);
        ExportString(QTr.MakeContactDate);
        ExportVal(QTr.Probability,M4Qty);
        ExportLongInt(QTr.Closed);
        ExportLongInt(QTr.OrderNr);
        ExportString(QTr.Objects);

        ExportString(QTrw.ArtCode);
        ExportString(tstr);
        ExportVal(QTrw.Quant,M4Qty);
        ExportVal(t,M4Val);
        ExportString(QTrw.Spec);
        ExportVal(QTrw.Price,M4Val);
        ExportVal(QTrw.Sum,M4Val);
        ExportVal(QTrw.vRebate,M41Val);
        ExportString(QTrw.SalesAcc);
        ExportVal(QTrw.rowGP,M4Val);
        ExportString(QTrw.VATCode);
        ExportString(unitt);
        res = true;
        NewLine;
      end;
    end;
  end;
  if  (RepSpec.ArtMode==2) then begin
    rwcnt = MatRowCnt(QTr);
    for (i = 0 ; i<rwcnt ;i=i+1) begin
      testf = true;
      MatRowGet(QTr,i,QTrw);
      if nonblank(RepSpec.f3) then begin
        if (RepSpec.f3<>QTrw.ArtCode) then begin testf = false; end;
      end;
      INr.Code = QTrw.ArtCode;
      if ReadFirstMain(INr,1,true) then begin
        tstr = INr.Group;
      end;
      if nonblank(RepSpec.AccStr) then begin
        if (RepSpec.AccStr<>tstr) then begin testf = false; end;
      end;
      if (testf) then begin
        tstr = QTrw.ArtCode;
        tstr = tstr & ":";
        tstr = tstr & QTrw.Spec;
        ExportString(tstr);
        NewLine;
      end;
    end;
    NewLine;
  end;
  OutQTRows = res;
  return;
end;

global
procedure QTRowEn(record RcVc RepSpec)
begin
  record QTVc QTr;
  Boolean TrHs;
  string 30 fromcust,tocust;
  LongInt frqt,toqt;
  Boolean testf;
  string 255 ckey;
  
  frqt = FirstInRange(RepSpec.f1,20);
  toqt = LastInRange(RepSpec.f1,20);
  
  fromcust = FirstInRange(RepSpec.f2,30);
  tocust   = LastInRange(RepSpec.f2,30);

  switch (RepSpec.flags[6]) begin
    case 0:
      ckey = "SerNr";
      QTr.SerNr = frqt;
    case 1:
      ckey = "QuoteClass";
  end;
  TrHs = true;
  while (LoopKey(ckey,QTr,1,TrHs)) begin
    testf = true;
    if (!DateInRange(QTr.QTDate,RepSpec.sStartDate,RepSpec.sEndDate)) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (QTr.CustCode<fromcust or QTr.CustCode>tocust) then begin
        testf = false;
      end;
    end;
    if (frqt<>-1) then begin
      if (QTr.SerNr<frqt) then begin testf = false; end;
    end;
    if (toqt<>-1) then begin
      if (QTr.SerNr>toqt) then begin testf = false; end;
    end;
    if (RepSpec.flags[4]==0) then begin
      if (RepSpec.flags[2]==0 and QTr.OrderNr==-1) then begin
        testf = false;
      end;
      if (RepSpec.flags[3]==0 and QTr.OrderNr!=-1) then begin
        testf = false;
      end;
    end;
    if (!SetInSet(RepSpec.ObjStr,QTr.Objects)) then begin
      testf = false;
    end;
    logtext(0,"QTr.SerNr=" & QTr.SerNr & " | " & testf);
    if (testf) then begin
      if (OutQTRows(RepSpec,QTr)) then begin
        UserTrace(QTr.SerNr,0);
      end;
    end;
  end;
  NewLine;
  return;
end;
