 procedure DupQuatMarks( string s, var string s2 )
 begin
   String 255 b;
   String 255 quatM;
   Integer i;
   s2 = "";
   quatM = "\"";
   for (i=0; i<=Len(s); i=i+1) begin
      b = MID(s,i,1);
      s2 = s2 & b;
      if (b==quatM) then begin
        s2 = s2 & quatM;
      end;
    end;
   return;
 end;

 function Boolean ShowRec( integer CheckType , date  D1, date  D2, longint FromPav, longint ToPav, date  D3, LongInt PavNr )
 begin
   Boolean show;
   show = false;
   If ( CheckType ==0) then begin      // By number
     If ( PavNr >= FromPav ) then begin
       if (PavNr <= ToPav or ToPav <=0) then begin  show = true; end;
     end;
   end;
   If ( CheckType ==1) then begin      // By date
     If ( D3 >= D1) and (D3 <= D2 ) then begin
       show = true;
     end;
   end;
   ShowRec = show;
   return;
 end;


function Boolean CheckSupplier(LongInt PavedNr)
BEGIN
   Boolean exist;
   record OPVc OPr;
   row OPVc OPrw;  
   Integer i,rwcnt,cnt;
   string 20 VECode;

   exist = true;

    cnt = 0;
    VECode = "";

    OPr.SerNr = PavedNr;
    if (ReadFirstMain(OPr,1,true)) then begin
      rwcnt = MatRowCnt(OPr);  
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if (nonblank(OPrw.VECode)) then begin
          if (VECode<>OPrw.VECode) then begin
            VECode = OPrw.VECode;                 
            cnt = cnt + 1; 
          end; 	     
          if (cnt > 1) then begin
            exist = false;
	    goto LCheckSup;
          end; 
        end;    
      end;
    end;              
  LCheckSup:;  

  CheckSupplier = exist;
  RETURN;
END;

 global
 procedure BankLithuania2(Record RcVc RepSpec,record OPVc OPr)
 begin
   record CYBlock CompIn;
   record  CUVc VEr;
   record  BankVC Bankr;
   record PMBlock PMr;
   row OPVc OPrw;  
   row PMBlock PMrw; 

   longint frompav,topav;
   Integer i,rwcnt,rw,m,mrwcnt;
   Boolean printf;
   String 255 strr;


   String 9 PavedNr;     // Mokejimo pavedimo nr.
   String 15 KMKodas;    // Moketojo kodas 
   String 255 KVardas;   // Moketojo pavadinimas 
   String 9 KBKodas;     // Moketojo banko kodas 
   String 20 KSaskaita;  // Moketojo saskaita 
   val suma;      
   String 14 suma2;      // Mokejimo pavedimo suma 
   String 3 Valiuta;     // Valiutos kodas 
   String 15 GKodas;     // Gavejo kodas
   String 255 GVardas;   // Gavejo pavadinimas 
   String 9 GBKodas;     // Gavejo banko kodas 
   String 20 GSaskaita;  // Gavejo saskaita 
   //String 5 FMIKiti;
   String 5 MPkodas;     // Mokejimo paskirties kodas 
   String 140 Paskirtis; // Mokejimo paskirtis 
/* Tarptautiniai pavedimai, nauji laukai ---> */
   String 11 GBSwift;    // Gavejo banko S.W.I.F.T 
   String 34 GBKodas2;   // Gavejo banko kodas 
   String 1 Tipas;       // Tipas 
   String 1 UBMok;       // Uzsienio banko mokesciai 
   String 34 GSaskaita2; // Gavejo saskaita 
   String 255 GBVardas1; // Gavejo banko pavadinimas    
   String 255 GBAdres1;  // Gavejo banko adresas 
   String 255 GBAdres2;  // Gavejo banko adresas 
   String 255 GAdres1;   // Gavejo adresas 
   String 255 GAdres2;   // Gavejo adresas 
   String 255 MYpatumai1; // Mokejimo paskirtis 


   /* Initialization of Variables */
   frompav = FirstInRange(RepSpec.f1,20);
   topav = LastInRange(RepSpec.f1,20);
   rw =1;
   printf = false;

   BlockLoad(CompIn);
   BlockLoad(PMr);

   KMKodas   = CompIn.OrgNr;
   KVardas   = CompIn.CompName;
   DupQuatMarks( KVardas ,KVardas);
   if (len(KVardas) > 58) then begin
    if (ConvertSpecStr(Mid(KVardas,len(KVardas)-1,len(KVardas)),"") == "\"") then begin
       KVardas = ConvertSpecStr(Mid(KVardas,0,57),""); 
       KVardas = KVardas & "\"";
     end else begin
       KVardas = ConvertSpecStr(Mid(KVardas,0,57),""); 
     end;
   end;
   KVardas = "\"" & KVardas & "\"";
   KBKodas = CompIn.BankCode;
   KSaskaita = CompIn.Bank2;

   if (RepSpec.flags[1] == 0) then begin // Start the Loop Paprastas
     printf = ShowRec(RepSpec.OnlyUnprntd,RepSpec.sStartDate,RepSpec.sEndDate,frompav,topav,OPr.TransDate,OPr.SerNr);
     if (printf) then begin
       PavedNr = OPr.SerNr;
       if (CheckSupplier(OPr.SerNr)==false) then begin
         printf = false; 
       end; 
       if (printf==true) then begin
         mrwcnt = MatRowCnt(PMr);
         for (m = 0; m<mrwcnt; m=m+1) begin
           MatRowGet(PMr,m,pmrw);
           if (PMrw.Code == OPr.PayMode) then begin 
             if (nonblank(PMrw.BankName)) then begin 
               KBKodas = PMrw.BankName;
             end else begin
               KBKodas   = CompIn.BankCode;
             end;
           end;      
         end; 
         if  blank(OPr.BankAcc) then begin
            KSaskaita = CompIn.Bank2;
         end else begin
            KSaskaita = OPr.BankAcc;
         end;
         Valiuta = "LTL";       // Default Lithuanian Currency
         if (OPr.PayCurCode <> "" ) then begin  Valiuta = OPr.PayCurCode; end;
         if (Valiuta == "") then begin  Valiuta = "LTL";    end;
         paskirtis = "";
         suma = OPr.CurPayVal;
         if (suma > 0) then begin       
           rwcnt = MatRowCnt(OPr);  
           for (i=0; i<rwcnt; i=i+1) begin
             MatRowGet(OPr,i,OPrw);
 	     strr = OPrw.Comment;
 	     DupQuatMarks(strr,strr);
             paskirtis =paskirtis&strr;

       	     if (OPrw.stp == 1) then begin
               printf = true;
               if (suma <= 0) then begin printf = false; end;
 	       if (nonblank(OPrw.BankFeeVal)) then begin
 	         suma = suma -OPrw.BankFeeVal;
 	       end;
                if (printf) then begin
 	          if  (len(Paskirtis) > 138) then begin
 	            Paskirtis = ConvertSpecStr(Mid(Paskirtis,0,138),"");
 	            if  (Mid(Paskirtis,137,138) =="\"" ) and (Mid(Paskirtis,136,137) <>"\"" ) then begin
 	              Paskirtis = ConvertSpecStr(Mid(Paskirtis,0,137),"");
 	            end;
 	          end;
                  GSaskaita = OPrw.BankAcc;
                  VEr.Code = OPrw.VECode;
                  if (ReadFirstMain(VEr,1,true)) then begin
                    GKodas = VEr.VATNr;
                    DupQuatMarks(VEr.Name,GVardas);
 	            if  (len(GVardas) > 58) then begin
                      if (ConvertSpecStr(Mid(GVardas,len(GVardas)-1,len(GVardas)),"") == "\"") then begin
                         GVardas = ConvertSpecStr(Mid(GVardas,0,57),"");
			 GVardas = GVardas & "\"";
		       end else begin
                         GVardas = ConvertSpecStr(Mid(GVardas,0,58),"");	
		       end;
                    end;
                    GVardas = "\"" & GVardas & "\"";
                    Bankr.Code = VEr.AccOperator;
                    if (ReadFirstMain(Bankr,1,true)) then begin GBKodas = Bankr.Nr1; end;
                    end;
                    MPkodas =VEr.VECustID;
                 end; //if printf
               end;//if OPrw.stp == 1
           end;// for

           Paskirtis = "\"" & Paskirtis & "\"";
           if (rw>1) then begin NewLine; end;
           if (len(PavedNr)>9) then begin
             ExportPadString(PavedNr,9,"",false);
 	   end else begin
             ExportPadString(PavedNr,len(PavedNr),"",false);
           end;
           ExportPadString(",",1,"",false);  //1
           ExportPadString(DateToString(OPr.TransDate,"YYYY")&"."&DateToString(OPr.TransDate,"MM")&"."&DateToString(OPr.TransDate,"DD"),10,"",false);
           ExportPadString(",",1,"",false);  //2
           if (len(KMKodas)>15) then begin 
             ExportPadString(KMKodas,15,"",false);
 	   end else begin
             ExportPadString(KMKodas,len(KMKodas),"",false);
           end;
           ExportPadString(",",1,"",false);  //3
           if (len(KVardas) > 60) then begin
             ExportPadString(KVardas,60," ",false);
 	   end else begin
             ExportPadString(KVardas,len(KVardas)," ",false);
           end;
           ExportPadString(",",1,"",false);  //4
           if (len(KBKodas)>9) then begin
             ExportPadString(KBKodas,9,"",false);
 	   end else begin
             ExportPadString(KBKodas,len(KBKodas),"",false);
           end;
           ExportPadString(",",1,"",false);  //5
           if (len(KSaskaita)>20) then begin
             ExportPadString(KSaskaita,20,"",false);
 	   end else begin
             ExportPadString(KSaskaita,len(KSaskaita),"",false);
           end;
           ExportPadString(",",1,"",false);  //6
    	   suma2 = ValToString(suma,M4Val,"","",0);
           if (len(suma)>13) then begin
             ExportPadString(ConvertSpecStr(Mid(suma2,0,11),"")&"."&ConvertSpecStr(Mid(suma2,11,13),"")&",",15,"",false);
 	   end else begin
             ExportPadString(ConvertSpecStr(Mid(suma2,0,len(suma2)-2),"")&"."&ConvertSpecStr(Mid(suma2,len(suma2)-2,len(suma2)),"")&",",len(suma2)+2,"",false);
           end;
           if (len(Valiuta)>3) then begin
             ExportPadString(Valiuta,3,"",false);
 	   end else begin
             ExportPadString(Valiuta,len(Valiuta),"",false);
           end;
           ExportPadString(",",1,"",false);  //8
           if (len(GKodas)>15) then begin
             ExportPadString(GKodas,15,"",false);
 	   end else begin
             ExportPadString(GKodas,len(GKodas),"",false);
           end;
           ExportPadString(",",1,"",false);  //9
           if (len(GVardas) > 60) then begin
             ExportPadString(GVardas,60," ",false);
 	   end else begin
             ExportPadString(GVardas,len(GVardas)," ",false);
           end;
           ExportPadString(",",1,"",false);  //10
           if (len(GBKodas)>9) then begin
             ExportPadString(GBKodas,9,"",false);
 	   end else begin
             ExportPadString(GBKodas,len(GBKodas),"",false);
           end;
           ExportPadString(",",1,"",false);  //11
           if (len(GSaskaita)>20) then begin
             ExportPadString(GSaskaita,20,"",false);
 	   end else begin
             ExportPadString(GSaskaita,len(GSaskaita),"",false);
           end;
           ExportPadString(",",1,"",false);  //12
           ExportPadString(",",1,"",false);  //13
           if (len(MPKodas)>5) then begin
             ExportPadString(MPKodas,5,"",false);
 	   end else begin
             ExportPadString(MPKodas,len(MPKodas),"",false);
           end;
           ExportPadString(",",1,"",false);  //14
           if (len(paskirtis)>140) then begin
             ExportPadString(paskirtis,140,"",false);
 	   end else begin
             ExportPadString(paskirtis,len(Paskirtis),"",false);
           end;                             //15

           rw =rw + 1;
         end;//if sum>0
       end;//if printf==true
     end;//While*

   end else begin// Start the Loop Tarptautinis
     printf = ShowRec(RepSpec.OnlyUnprntd,RepSpec.sStartDate,RepSpec.sEndDate,frompav,topav,OPr.TransDate,OPr.SerNr);
     if (printf) then begin
       PavedNr = OPr.SerNr;
       if (CheckSupplier(OPr.SerNr)==false) then begin
         printf = false; 
       end; 
       if (printf==true) then begin
         mrwcnt = MatRowCnt(PMr);
         for (m = 0; m<mrwcnt; m=m+1) begin
           MatRowGet(PMr,m,pmrw);
           if (PMrw.Code == OPr.PayMode) then begin 
             if (nonblank(PMrw.BankName)) then begin 
               KBKodas = PMrw.BankName;
             end else begin
               KBKodas   = CompIn.BankCode;
             end;
           end;      
         end; 
         if  blank(OPr.BankAcc) then begin
            KSaskaita = CompIn.Bank2;
         end else begin
            KSaskaita = OPr.BankAcc;
         end;
         Valiuta = "LTL";       // Default Lithuanian Currency
         if (OPr.PayCurCode <> "" ) then begin  Valiuta = OPr.PayCurCode; end;
         if (Valiuta == "") then begin  Valiuta = "LTL";    end;
         MYpatumai1 = "";
              
         suma = OPr.CurPayVal;
         if (suma > 0) then begin
           rwcnt = MatRowCnt(OPr);  
           for (i=0; i<rwcnt; i=i+1) begin
             MatRowGet(OPr,i,OPrw);
  	     strr = OPrw.Comment;
 	     DupQuatMarks( strr ,strr);
             MYpatumai1 =MYpatumai1&strr;
       	     if (OPrw.stp == 1) then begin
               printf = true;
               if (suma <= 0) then begin printf = false; end;
 	       if (nonblank(OPrw.BankFeeVal)) then begin
 	         suma = suma -OPrw.BankFeeVal;
 	       end;
                if (printf) then begin
                  GSaskaita2 = OPrw.BankAcc;
                  VEr.Code = OPrw.VECode;
                  if (ReadFirstMain(VEr,1,true)) then begin
                     Bankr.Code = VEr.AccOperator;
                     if (ReadFirstMain(Bankr,1,true)) then begin
                       GBKodas2 = Bankr.Nr1;
                       GBSwift = Bankr.SWIFT;
                     end;
                     DupQuatMarks(VEr.Name,GVardas);
 	             if  (len(GVardas) > 33) then begin
                       if (ConvertSpecStr(Mid(GVardas,len(GVardas)-1,len(GVardas)),"") == "\"") then begin
                         GVardas = ConvertSpecStr(Mid(GVardas,0,32),"");
			 GVardas = GVardas & "\"";
		       end else begin
                         GVardas = ConvertSpecStr(Mid(GVardas,0,33),"");	
		       end;
	             end;
                     GVardas = "\"" & GVardas & "\"";
                     DupQuatMarks(VEr.InvAddr0,GAdres1);
 	             if  (len(GAdres1) > 33) then begin
                       if (ConvertSpecStr(Mid(GAdres1,len(GAdres1)-1,len(GAdres1)),"") == "\"") then begin
                         GAdres1 = ConvertSpecStr(Mid(GAdres1,0,32),"");
			 GAdres1 = GAdres1 & "\"";
		       end else begin
                         GAdres1 = ConvertSpecStr(Mid(GAdres1,0,33),"");	
		      end;
	             end;
                     GAdres1 = "\"" & GAdres1 & "\"";
                     DupQuatMarks( VEr.InvAddr1 , GAdres2);
 	             if  (len(GAdres2) > 33) then begin
                       if (ConvertSpecStr(Mid(GAdres2,len(GAdres2)-1,len(GAdres2)),"") == "\"") then begin
                         GAdres2 = ConvertSpecStr(Mid(GAdres2,0,32),"");
			 GAdres2 = GAdres2 & "\"";
		       end else begin
                         GAdres2 = ConvertSpecStr(Mid(GAdres2,0,33),"");	
		       end;
	             end;
                     GAdres2 = "\"" & GAdres2 & "\"";
                     DupQuatMarks( Bankr.Name , GBVardas1);
 	             if  (len(GBVardas1) > 33) then begin
                       if (ConvertSpecStr(Mid(GBVardas1,len(GBVardas1)-1,len(GBVardas1)),"") == "\"") then begin
                         GBVardas1 = ConvertSpecStr(Mid(GBVardas1,0,32),"");
			 GBVardas1 = GBVardas1 & "\"";
		       end else begin
                         GBVardas1 = ConvertSpecStr(Mid(GBVardas1,0,33),"");	
		       end;
	             end;
                     GBVardas1 = "\"" & GBVardas1 & "\"";
                     DupQuatMarks( Bankr.Address0 , GBAdres1);
 	             if  (len(GBAdres1) > 33) then begin
                       if (ConvertSpecStr(Mid(GBAdres1,len(GBAdres1)-1,len(GBAdres1)),"") == "\"") then begin
                         GBAdres1 = ConvertSpecStr(Mid(GBAdres1,0,32),"");
			 GBAdres1 = GBAdres1 & "\"";
		       end else begin
                         GBAdres1 = ConvertSpecStr(Mid(GBAdres1,0,33),"");	
		      end;
	             end;
                     GBAdres1 = "\"" & GBAdres1 & "\"";
                     DupQuatMarks( Bankr.Address1 , GBAdres2);
 	             if  (len(GBAdres2) > 33) then begin
                       if (ConvertSpecStr(Mid(GBAdres2,len(GBAdres2)-1,len(GBAdres2)),"") == "\"") then begin
                         GBAdres2 = ConvertSpecStr(Mid(GBAdres2,0,32),"");
			 GBAdres2 = GBAdres2 & "\"";
		       end else begin
                         GBAdres2 = ConvertSpecStr(Mid(GBAdres2,0,33),"");	
		       end;
	             end;
                     GBAdres2 = "\"" & GBAdres2 & "\"";
                   end;
                 end; //if printf
               end;//if OPrw.stp == 1
           end;// for
        //   MYpatumai1 = "\"" & MYpatumai1 & "\"";

           if (rw>1) then begin NewLine; end;
           if (len(PavedNr)>9) then begin
              ExportPadString(PavedNr,9,"",false);
 	   end else begin
              ExportPadString(PavedNr,len(PavedNr),"",false);
           end;
           ExportPadString(",",1,"",false);  //1
           ExportPadString(DateToString(OPr.TransDate,"YYYY")&"."&DateToString(OPr.TransDate,"MM")&"."&DateToString(OPr.TransDate,"DD"),10,"",false);
           ExportPadString(",",1,"",false);//2
           switch (RepSpec.flags[2]) begin
             case 0:
               Tipas = "1";
             case 1:
               Tipas = "2";
             case 2:
               Tipas = "3";
           end;
           ExportPadString(Tipas,len(Tipas),"",false);
           ExportPadString(",",1,"",false);//3
           if (len(Valiuta)>3) then begin
             ExportPadString(Valiuta,3,"",false);
 	   end else begin
             ExportPadString(Valiuta,len(Valiuta),"",false);
           end;
           ExportPadString(",",1,"",false);  //4	  	  
	   suma2 = ValToString(suma,M4Val,"","",0);
           if (len(suma)>13) then begin
             ExportPadString(ConvertSpecStr(Mid(suma2,0,11),"")&"."&ConvertSpecStr(Mid(suma2,11,13),"")&",",15,"",false);
 	   end else begin
             ExportPadString(ConvertSpecStr(Mid(suma2,0,len(suma2)-2),"")&"."&ConvertSpecStr(Mid(suma2,len(suma2)-2,len(suma2)),"")&",",len(suma2)+2,"",false);
           end;                              //5
           if (len(KSaskaita)>20) then begin
             ExportPadString(KSaskaita,20,"",false);
 	   end else begin
             ExportPadString(KSaskaita,len(KSaskaita),"",false);
           end;
           ExportPadString(",",1,"",false);  //6
           if (len(KBKodas)>9) then begin
             ExportPadString(KBKodas,9,"",false);
 	   end else begin
             ExportPadString(KBKodas,len(KBKodas),"",false);
           end;
           ExportPadString(",",1,"",false);  //7
           ExportPadString(",",1,"",false);  //8
           ExportPadString(",",1,"",false);  //9
           ExportPadString(",",1,"",false);  //10
           ExportPadString(",",1,"",false);  //11
           ExportPadString(",",1,"",false);  //12  
           ExportPadString(",",1,"",false);  //13
           if (len(GBSwift)>11) then begin
             ExportPadString(GBSwift,11,"",false);
 	   end else begin
             ExportPadString(GBSwift,len(GBSwift),"",false);
           end;
           ExportPadString(",",1,"",false);  //14
           if (len(GBKodas2)>34) then begin
             ExportPadString(GBKodas2,34,"",false);
 	   end else begin
             ExportPadString(GBKodas2,len(GBKodas2),"",false);
           end;
           ExportPadString(",",1,"",false);  //15

           if (len(GBVardas1)>35) then begin
             ExportPadString(GBVardas1,35,"",false);
 	   end else begin
             ExportPadString(GBVardas1,len(GBVardas1),"",false);
           end;
           ExportPadString(",",1,"",false); //16
           ExportPadString(",",1,"",false); //17
           if (len(GBAdres1)>35) then begin
             ExportPadString(GBAdres1,35,"",false);
 	   end else begin
             ExportPadString(GBAdres1,len(GBAdres1),"",false);
           end;
           ExportPadString(",",1,"",false); //18

           if (len(GBAdres2)>35) then begin
             ExportPadString(GBAdres2,35,"",false);
 	   end else begin
             ExportPadString(GBAdres2,len(GBAdres2),"",false);
           end;
           ExportPadString(",",1,"",false); //19
           if (len(GSaskaita2)>34) then begin
             ExportPadString(GSaskaita2,34,"",false);
 	   end else begin
             ExportPadString(GSaskaita2,len(GSaskaita2),"",false);
           end;
           ExportPadString(",",1,"",false); //20
           if (len(GVardas) > 35) then begin
             ExportPadString(GVardas,35," ",false);
 	   end else begin
             ExportPadString(GVardas,len(GVardas)," ",false);
           end;
           ExportPadString(",",1,"",false); //21
           ExportPadString(",",1,"",false); //22
           if (len(GAdres1) > 35) then begin
             ExportPadString(GAdres1,35," ",false);
 	   end else begin
             ExportPadString(GAdres1,len(GAdres1)," ",false);
           end;
           ExportPadString(",",1,"",false); //23
           if (len(GAdres2) > 35) then begin
             ExportPadString(GAdres2,35," ",false);
 	   end else begin
             ExportPadString(GAdres2,len(GAdres2)," ",false);
           end;
           ExportPadString(",",1,"",false); //24
           if (len(MYpatumai1)>1) then begin
             ExportPadString("\"" & ConvertSpecStr(Mid(MYpatumai1,0,33),"") & "\"",len(ConvertSpecStr(Mid(MYpatumai1,0,33),""))+2,"",false);
           end;
           ExportPadString(",",1,"",false);//25
           if (len(MYpatumai1)>33) then begin
             ExportPadString("\"" & ConvertSpecStr(Mid(MYpatumai1,33,33),"") & "\"",len(ConvertSpecStr(Mid(MYpatumai1,33,33),""))+2,"",false);
           end;
           ExportPadString(",",1,"",false);//26
           if (len(MYpatumai1)>66) then begin
             ExportPadString("\"" & ConvertSpecStr(Mid(MYpatumai1,66,33),"") & "\"",len(ConvertSpecStr(Mid(MYpatumai1,66,33),""))+2,"",false);
           end;
           ExportPadString(",",1,"",false);//27
           if (len(MYpatumai1)>99) then begin
             ExportPadString("\"" & ConvertSpecStr(Mid(MYpatumai1,99,33),"") & "\"",len(ConvertSpecStr(Mid(MYpatumai1,99,33),""))+2,"",false);
           end;
           ExportPadString(",",1,"",false);//28
           switch (RepSpec.flags[3]) begin
             case 0:
               UBMok = "1";
             case 1:
               UBMok = "2";
             case 2:
               UBMok = "3";
           end;
           ExportPadString(UBMok,len(UBMok),"",false);
           ExportPadString(",",1,"",false); //29
           ExportPadString(",",1,"",false); //30
           ExportPadString(",",1,"",false); //31
           ExportPadString(",",1,"",false); //32  
	   if (len(KSaskaita)>20) then begin
             ExportPadString(KSaskaita,20,"",false);
 	   end else begin
             ExportPadString(KSaskaita,len(KSaskaita),"",false);
           end;                                 
           ExportPadString(",",1,"",false); //33  
           if (len(Valiuta)>3) then begin
             ExportPadString(Valiuta,3,"",false);
 	   end else begin
             ExportPadString(Valiuta,len(Valiuta),"",false);
           end;                            //34
           rw =rw + 1;
         end;//if sum>0
       end;//if printf==true
     end;//While

   end; 
   return;
end;