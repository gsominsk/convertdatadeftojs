external function Integer CountObjects(string);
external function Boolean CheckWBobjstreq(string,string);
external procedure NormalizeObjstr(var string);
external function LongInt CalcCombination(Integer,Integer);
external procedure WBGetObjectPair(var string,var string,var Integer,var LongInt,var Integer,var Integer,var Integer,var Integer); 
external procedure FindobjstrBudgetKey(Date,string,var val);
external procedure FindWB1DobjstrFwdBalance(string,string,Date,Integer,var val);
external function Boolean CheckObjInObjs(string,string);
external procedure ExtractObj(string,var Integer,var string);
external procedure GetObjectName(string,var string);
external procedure WB1DCreateObjectsMatrices(record SMVc,record SMVc,string,string,var Integer,var Integer);
external function Boolean CheckObjsType(string,string);
external procedure PrintHeaderWB1D(record RcVc);

procedure WB1DExportObjTotal(string objstr,var val otott1,var val ototdkey,var val ototfwd)
BEGIN
  val diff,fwd;
  string 255 tstr;
 
  if (objstr == USetStr(18901)) then begin
   tstr = USetStr(18901);
 end else begin   
    GetObjectName(objstr,tstr);
  end;
  ExportString(tstr);
  ExportString("");
  ExportVal(ototdkey,M4Val);
  ExportVal(otott1,M4Val);
  ExportVal(ototfwd,M4Val);
  NewLine; 
  NewLine; 
  RETURN;  
END;

procedure FindWB1DobjstrFwdBal2(string Stext,string objstr,Date sStartDate,Date sEndDate,Integer basecurncy,var val fwd2)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Boolean TrHs;
   
  fwd2 = 0;
  TrHs = true;
  TRr.TransDate = sStartDate;
  while (LoopKey("TransDate",TRr,1,TrHs)) begin
      if (nonblank(sEndDate)) then begin
        if (TRr.TransDate >=sEndDate) then begin
        TrHs = false;
      end;
     end;
    if (TrHs) then begin
      rwcnt = MatRowCnt(TRr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);    
        if (CheckWBobjstreq(TRrw.Objects,objstr)) then begin
          if (basecurncy==0) then begin
            fwd2 = fwd2 + TRRw.DebVal;
            fwd2 = fwd2 - TRRw.CredVal;
          end else begin
            fwd2 = fwd2 + TRRw.DebVal2;
            fwd2 = fwd2 - TRRw.CredVal2;
          end;                    
        end;
      end;
    end;
  end;  
  RETURN;
END;

procedure FindWB1DobjstrFwdBal(string Stext,string objstr,Date sStartDate,Integer basecurncy,var val fwd)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;
  Integer i,rwcnt;
  Boolean TrHs;
  
  fwd = 0;
  TrHs = true;
  while (LoopKey("TransDate",TRr,1,TrHs)) begin
    if (TRr.TransDate>=sStartDate) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      rwcnt = MatRowCnt(TRr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);    
        if (CheckWBobjstreq(TRrw.Objects,Stext)) and (CheckWBobjstreq(TRrw.Objects,objstr)) then begin
          if (basecurncy==0) then begin
            fwd = fwd + TRRw.DebVal;
            fwd = fwd - TRRw.CredVal;
          end else begin
            fwd = fwd + TRRw.DebVal2;
            fwd = fwd - TRRw.CredVal2;
          end;                    
        end;
      end;
    end;
  end;  
  RETURN;
END;

procedure WB1DobjstrSumup(record RcVc RepSpec, record SMVc SMr,record SMVc SMnormr,string objs,val debv,val credv,Integer paircnt)
BEGIN
  row SMVc SMrw;  
  row SMVc SM2rw;  
  Boolean found;
  Integer i,rwcnt;
  Integer objcnt,combi,objslen,pos,comapos;
  string 255 tstr,rstr,r1str;
  LongInt combnr;
  
  found = false;
  objslen = len(objs);
  objcnt = CountObjects(objs);  
  combnr = CalcCombination(objcnt,2);
  tstr = objs;
  combi = 1;  
  while ((combi<=combnr) and (found==false)) begin
    WBGetObjectPair(tstr,rstr,objslen,combnr,combi,objcnt,comapos,pos);        
        
    for (i=0;i<paircnt;i=i+1) begin
      MatRowGet(SMnormr,i,SMrw);
      if (SMrw.Objects==rstr) then begin
        MatRowGet(SMr,i,SM2rw);
        SM2rw.DebVal = SM2rw.DebVal + debv;
        SM2rw.DebVal = SM2rw.DebVal - credv;
        MatRowPut(SMr,i,SM2rw);   
        i = paircnt;   
        found = true;
      end;
    end;
  end;   
  found = false;
  objslen = len(objs);
  objcnt = CountObjects(objs);  
  combnr = CalcCombination(objcnt,2);
  tstr = objs;
  combi = 1;  
  rwcnt = MatRowCnt(SMnormr);
  while ((combi<=combnr) and (found==false)) begin
    WBGetObjectPair(tstr,rstr,objslen,combnr,combi,objcnt,comapos,pos); 
    r1str = "";
    if (nonblank(RepSpec.ObjStr)) then begin
      if (CheckObjInObjs(RepSpec.ObjStr,objs)) then begin
        r1str = rstr & "," & RepSpec.ObjStr; 
        NormalizeObjstr(r1str);
        for (i=paircnt;i<rwcnt;i=i+1) begin
          MatRowGet(SMnormr,i,SMrw);
          if (SMrw.Objects==r1str) then begin
            MatRowGet(SMr,i,SM2rw);
            SM2rw.DebVal = SM2rw.DebVal + debv;
            SM2rw.DebVal = SM2rw.DebVal - credv;
            MatRowPut(SMr,i,SM2rw);   
            i = rwcnt;   
            found = true;
          end;
        end;  
      end;  
    end;
    r1str = "";
    if (nonblank(RepSpec.Stext)) then begin
      if (CheckObjInObjs(RepSpec.Stext,objs)) then begin
        r1str = rstr & "," & RepSpec.Stext; 
        NormalizeObjstr(r1str);
        for (i=paircnt;i<rwcnt;i=i+1) begin
          MatRowGet(SMnormr,i,SMrw);
          if (SMrw.Objects==r1str) then begin
            MatRowGet(SMr,i,SM2rw);
            SM2rw.DebVal = SM2rw.DebVal + debv;
            SM2rw.DebVal = SM2rw.DebVal - credv;
            MatRowPut(SMr,i,SM2rw);   
            i = rwcnt;   
            found = true;
          end;
        end;  
      end;  
    end;
    r1str = "";
    if (nonblank(RepSpec.f1)) then begin
      if (CheckObjInObjs(RepSpec.f1,objs)) then begin
        r1str = rstr & "," & RepSpec.f1;
        NormalizeObjstr(r1str);
        for (i=paircnt;i<rwcnt;i=i+1) begin
          MatRowGet(SMnormr,i,SMrw);
          if (SMrw.Objects==r1str) then begin
            MatRowGet(SMr,i,SM2rw);
            SM2rw.DebVal = SM2rw.DebVal + debv;
            SM2rw.DebVal = SM2rw.DebVal - credv;
            MatRowPut(SMr,i,SM2rw);   
            i = rwcnt;   
            found = true;
          end;
        end;        
      end; 
    end;    
  end;     
  RETURN;
END;  
  
procedure WB1DFindObjstrBalance(record RcVc RepSpec,record SMVc SMr,record SMVc SMnormr,Integer paircnt)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;
  row SMVc SMrw;
  Boolean TrHs,testf,testf2;
  Integer i,rwcnt;
  val dv,cv;

  TrHs = true;
  TRr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",TRr,1,TrHs)) begin
    testf2 = false;
    if (TRr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      rwcnt = MatRowCnt(TRr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (CheckObjsType(RepSpec.ObjType,TRrw.Objects)) then begin          
          testf = false;
          if (CheckObjsType(RepSpec.TransStr,TRrw.Objects)) then begin testf = true; end;
          if (CheckObjInObjs(RepSpec.Stext,TRrw.Objects)) then begin testf2 = true; end;
          if (testf) and (testf2) then begin
            if (RepSpec.basecurncy==0) then begin
              dv = TRrw.DebVal;
              cv = TRrw.CredVal;
            end else begin
              dv = TRrw.DebVal2;
              cv = TRrw.CredVal2;
            end;
            WB1DobjstrSumup(RepSpec,SMr,SMnormr,TRrw.Objects,dv,cv,paircnt);
          end;
        end;  
      end;
    end;
  end;  
  RETURN;
END; 
  
procedure sortResult(var val a, var val b, var val c, var val d, val b2, record RcVc RepSpec, string s1, val budgetKey) 
begin
  if(RepSpec.Stext=="GOV") then begin
    if(s1=="CO" or s1=="RC" or s1=="TR") then begin
      if(b<>0 or b!=0) then begin
        a = 100.00;
      end;
      c = b;
    end else begin
      if(budgetKey==100.00) then begin
        a = 0;
        b = 0;
        c = 0;
        d = 0;
      end else begin
        if(budgetKey==84.00) then begin
          a = 16;
          c = b2;//reikia padaryti
        end;
      end;
    end;
  end;
  if(RepSpec.Stext=="SA") then begin
    if(s1=="CO" or s1=="RC" or s1=="TR") then begin
      if(b<>0 or b!=0) then begin
        a = 100.00;
      end;
      c = b;
    end else begin
      if(budgetKey==100.00) then begin
        a = 100.00;
        c = b;
      end else begin
        if(budgetKey==84.00) then begin
          a = 84.00;
          c = b2;//reikia padaryti
        end;
      end;
    end;
  end;
  if(RepSpec.Stext=="SAJ" or RepSpec.Stext=="SAS") then begin
    if(b<>0 or b!=0) then begin
      a = 100.00;
    end;
    c = b;
  end;
      if(d==0) then begin
        a = 0;
        b = 0;
        c = 0;
      end;  
  ExportVal(a,M4Val);
  ExportVal(c,M4Val);  
  ExportVal(b,M4Val);
  ExportVal(d,M4Val);
  return;
end;

procedure WB1DAddToObjectsMatrices(record SMVc SMr,record SMVc SMnormr,string objstr1,string objstr2,string objstr3,var Integer paircnt)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt,cnt,ocnt;
  string 255 tstr,t2;

  rwcnt = MatRowCnt(SMr);
  paircnt = rwcnt;
  cnt = rwcnt;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    t2 = SMrw.Objects;
    if (nonblank(objstr1)) then begin 
      tstr = t2 & "," & objstr1; 
      SMrw.Objects = tstr;
      MatRowPut(SMr,cnt,SMrw);
      NormalizeObjstr(tstr);
      SMrw.Objects = tstr;          
      MatRowPut(SMnormr,cnt,SMrw);          
      cnt = cnt + 1;
    end;  
    if (nonblank(objstr2)) then begin
      tstr = t2 & "," & objstr2; 
      SMrw.Objects = tstr;
      MatRowPut(SMr,cnt,SMrw);
      NormalizeObjstr(tstr);
      SMrw.Objects = tstr;          
      MatRowPut(SMnormr,cnt,SMrw);          
      cnt = cnt + 1;    
    end;  
    if (nonblank(objstr3)) then begin
      tstr = t2 & "," & objstr3; 
      SMrw.Objects = tstr;
      MatRowPut(SMr,cnt,SMrw);
      NormalizeObjstr(tstr);
      SMrw.Objects = tstr;          
      MatRowPut(SMnormr,cnt,SMrw);          
      cnt = cnt + 1;    
    end;  
  end;  
  RETURN;
END;
  
procedure PrintWB1DResults(record RcVc RepSpec,record SMVc SMr,record SMVc SMnormr,Integer paircnt,Integer objtype1nr,Integer objtype2nr)
BEGIN
  row SMVc SMrw;
  row SMVc SM2rw;
  Integer i,j,rwcnt;
  Integer cnt;
  string 255 tstr,objstr,tstr2,tstr3;
  val a,b,c,d,b2;//b2 reikalingas perduoti reiksme is antros lenteles
  val bkeyv,t1,t2,t3,fwd,diff,dkey,fdkey,debval;
  val otott1,otott2,otott3,ototdebval,ototdkey,ototfwd;
  val ototdebvalT,otott1T,ototdkeyT,ototfwdT,otott2T,otott3T;
  string 255 lastobj;
  boolean t1_found,t2_found,t3_found;
  val fwd2;

  record SMVc _SMr,_SMnormr;//kintemieji skirti apibrezti antra lentele
  row SMVc _SMrw;
  Integer _paircnt;
  Integer _objtype1nr,_objtype2nr;
  record RcVc _RepSpec;
  
  if(RepSpec.Stext=="GOV" or RepSpec.Stext=="SA") then begin
    _RepSpec = RepSpec;
    if(RepSpec.Stext=="SA")then begin
      _RepSpec.Stext="GOV";
    end else begin
      _RepSpec.Stext="SA";
    end;
    RecordNew(_SMr);
    RecordNew(_SMnormr);
    WB1DCreateObjectsMatrices(_SMr,_SMnormr,_RepSpec.ObjType,_RepSpec.TransStr,_objtype1nr,_objtype2nr);
    WB1DAddToObjectsMatrices(_SMr,_SMnormr,_RepSpec.ObjStr,_RepSpec.Stext,_RepSpec.f1,_paircnt);
    WB1DFindObjstrBalance(_RepSpec,_SMr,_SMnormr,_paircnt);
  end;

  otott1 = 0;
  ototdkey = 0; 
  ototfwd = 0;       
  if (nonblank(RepSpec.ObjStr)) then begin 
    cnt = cnt + 1;
  end;
  if (nonblank(RepSpec.Stext)) then begin 
    cnt = cnt + 1; 
  end;
  if (nonblank(RepSpec.f1)) then begin 
    cnt = cnt + 1; 
  end;
  PrintHeaderWB1D(RepSpec);
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<paircnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
      cnt = 0;   
      ExtractObj(SMrw.Objects,cnt,tstr);
      if (lastobj<>tstr) then begin
        if (nonblank(lastobj)) then begin
          WB1DExportObjTotal(lastobj,otott1,ototdkey,ototfwd);
           otott1T = otott1T + otott1;
           ototdkeyT = ototdkeyT +ototdkey;
           ototfwdT = ototfwdT +ototfwd;
           otott1 = 0;
           ototdkey = 0;
           ototfwd = 0; 
        end;
        lastobj = tstr;
      end;    
      bkeyv = 0;
      t1 = 0;
      t2 = 0;
      t3 = 0;
      fwd = 0;
      diff = 0; 
      dkey = 0; 
      fdkey = 0;  
      debval = SMrw.DebVal; 
      objstr = SMrw.Objects;
    b2 = 0;
    t1_found = false;
    t2_found = false;
    t3_found = false;

      tstr = SMrw.Objects & "," & RepSpec.ObjStr;
    if (nonblank(RepSpec.Stext)) then begin
      tstr2 = SMrw.Objects & "," & RepSpec.Stext;
    end;
    if (nonblank(RepSpec.f1)) then begin
      tstr3 = SMrw.Objects & "," & RepSpec.f1;
    end;
      for (j=((objtype1nr*objtype2nr) + i);j<rwcnt;j=j+1) begin
        MatRowGet(SMr,j,SM2rw);
        if (SM2rw.DebVal<>0) then begin
        if (SM2rw.Objects==tstr ) then begin
          t1 = SM2rw.DebVal;
            j = rwcnt;
        end;
      end;
      end;  
      if (nonblank(RepSpec.Stext)) then begin
        tstr = SMrw.Objects & "," & RepSpec.Stext;
        for (j=((objtype1nr*objtype2nr) + i);j<rwcnt;j=j+1) begin
          MatRowGet(SMr,j,SM2rw);
          if (SM2rw.DebVal<>0) then begin
            if (SM2rw.Objects==tstr) then begin
          t2 = SM2rw.DebVal;
              j = rwcnt;
        end;
      end;  
        end;  
      end;  
      if (nonblank(RepSpec.f1)) then begin
        tstr = SMrw.Objects & "," & RepSpec.f1;
        for (j=((objtype1nr*objtype2nr) + i);j<rwcnt;j=j+1) begin
          MatRowGet(SMr,j,SM2rw);
          if (SM2rw.DebVal<>0) then begin
            if (SM2rw.Objects==tstr) then begin
          t3 = SM2rw.DebVal;
              j = rwcnt;
            end;
        end;
      end;
    end;
      cnt = 0;
      ExtractObj(SMrw.Objects,cnt,tstr2);
      ExtractObj(SMrw.Objects,cnt,tstr2);
      GetObjectName(tstr2,tstr);
      ExportString(tstr); 
      tstr = SMrw.Objects;
      NormalizeObjstr(tstr);
      FindobjstrBudgetKey(RepSpec.sStartDate,tstr,bkeyv);
    a = bkeyv;
    diff = SMrw.DebVal - t1;
    FindWB1DobjstrFwdBal2(RepSpec.Stext,tstr,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.basecurncy,fwd2);
    dkey = fwd2*-1;
    c = dkey;
    b = diff*-1;    
    FindWB1DobjstrFwdBal(RepSpec.Stext,tstr,RepSpec.sStartDate,RepSpec.basecurncy,fwd);
    d = ((fwd*-1) + (diff*-1));
    if(RepSpec.Stext=="GOV" or RepSpec.Stext=="SA") then begin//cia inicializuojama b2 reiksme
      MatRowGet(_SMr,i,_SMrw);
      FindWB1DobjstrFwdBal2(_RepSpec.Stext,tstr,_RepSpec.sStartDate,_RepSpec.sEndDate,_RepSpec.basecurncy,fwd2);
      b2 = fwd2*-1;
    end;
    sortResult(a,b,c,d,b2,RepSpec,lastobj,bkeyv);
    NewLine; 
      otott1 = otott1 + b;
      ototdkey = ototdkey + c; 
    ototfwd = ototfwd + d;
  end;
 WB1DExportObjTotal(lastobj,otott1,ototdkey,ototfwd); 
  otott1T = otott1T + otott1;
  ototdkeyT = ototdkeyT +ototdkey;
  ototfwdT = ototfwdT +ototfwd;
  otott1 = 0;
  ototdkey = 0;
  ototfwd = 0;
  WB1DExportObjTotal(USetStr(18901),otott1T,ototdkeyT,ototfwdT);  
  RETURN;
END;

global
procedure WB1DEn(record RcVc RepSpec)
BEGIN
  record SMVc SMr,SMnormr;
  Integer paircnt;
  Integer objtype1nr,objtype2nr;
  
  RecordNew(SMr);
  RecordNew(SMnormr);
  WB1DCreateObjectsMatrices(SMr,SMnormr,RepSpec.ObjType,RepSpec.TransStr,objtype1nr,objtype2nr);
  WB1DAddToObjectsMatrices(SMr,SMnormr,RepSpec.ObjStr,RepSpec.Stext,RepSpec.f1,paircnt);
  WB1DFindObjstrBalance(RepSpec,SMr,SMnormr,paircnt);
  PrintWB1DResults(RepSpec,SMr,SMnormr,paircnt,objtype1nr,objtype2nr);  
  RETURN;
END;
