external procedure SplitAddress(string,var string,var string);
external function string 255 StripCharacter(string,string);
external procedure FinnishBankVal(var string,val);

procedure ExpFactIV(record RcVc RepSpec,record IVVc IVp,Integer bnr)
BEGIN
  string 255 tstr;
  
  ExportPadString("1",1," ",false);
  tstr = DateToString(CurrentDate,"YYMMDD");
  ExportPadString(tstr,6," ",false);
  ExportPadString(RepSpec.f3,5,"0",true);
  ExportPadString(bnr,4,"0",true);
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    tstr = "KN";
  end else begin
    tstr = "FA";
  end;  
  ExportPadString(tstr,2," ",false);
  ExportPadString("0",3,"0",false);
  ExportPadString(tstr,13,"0",false);
  if (blank(IVp.CurncyCode)) then begin
    tstr = "SEK";
  end else begin
    tstr = IVp.CurncyCode;
  end;  
  ExportPadString(tstr,3," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString(IVp.CustCode,10,"0",true);
  ExportPadString(IVp.SerNr,7,"0",true);
  FinnishBankVal(tstr,IVp.Sum4);
  ExportPadString(tstr,11,"0",true);
  tstr = DateToString(IVp.InvDate,"YYMMDD");
  ExportPadString(tstr,6," ",true);
  tstr = DateToString(IVp.PayDate,"YYMMDD");
  ExportPadString(tstr,6," ",true);
  ExportPadString(" ",2," ",true);
  NewLine;
  RETURN;
END;

procedure ExpFactIVSum(record RcVc RepSpec,val bsump,Integer bnr,Integer cnt,Integer typ,string curcny)
BEGIN
  string 255 tstr;

  ExportPadString("1",1," ",false);
  tstr = DateToString(CurrentDate,"YYMMDD");
  ExportPadString(tstr,6," ",false);
  ExportPadString(RepSpec.f3,5,"0",true);
  ExportPadString(bnr,4,"0",true);
  if (typ==3) then begin
    tstr = "KN";
  end else begin
    tstr = "FA";
  end;  
  ExportPadString(tstr,2," ",false);
  ExportPadString(cnt,3,"0",true);
  FinnishBankVal(tstr,bsump);
  ExportPadString(tstr,13,"0",true);
  if (blank(curcny)) then begin
    tstr = "SEK";
  end else begin
    tstr = curcny;
  end;
  ExportPadString(tstr,3," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString("BUNTSUMMA",10," ",false);
  ExportPadString(" ",32," ",false);
  NewLine;
  RETURN;
END;


procedure GetFactPayTerm(record IVVc IVp,var string res)
BEGIN
  record PDVc PDp;
  string 255 tstr;
  
  PDp.Code = IVp.PayDeal;
  if (ReadFirstMain(PDp,1,true)) then begin
    if ((PDp.PDType==1) or (PDp.PDType==5) or (PDp.PDType==7)) then begin
      res = "00000";
      tstr = PDp.pdays;
      if (PDp.pdays<99) then begin
        res = res & "0";
      end;  
      if (PDp.pdays<9) then begin
        res = res & "0";
      end;  
      res = res & tstr;
      res = res & "00";
    end;
    if (PDp.PDType==4) then begin
      res = "00000";
      tstr = PDp.pdays;
      res = res & "8";
      if (PDp.pdays<9) then begin
        res = res & "0";
      end;  
      res = res & tstr;
      res = res & "00";
    end;
    if (PDp.PDType==6) then begin
/* Have no idea what 6 should do here
      res = "00000";
      tstr = PDp.pdays;
      res = res & "8";
      if (PDp.pdays<9) then begin
        res = res & "0";
      end;  
      res = res & tstr;
      res = res & "00";
*/
    end;
    if (PDp.PDType==3) then begin
        res = "0000000000";
    end;
    if (PDp.PDType==2) then begin
      if (PDp.pdrdays<99) then begin
        res = "0";
      end;  
      if (PDp.pdrdays<9) then begin
        res = "0";
      end;  
      tstr = PDp.pdrdays;
      res = res & tstr;
      tstr = PDp.pdvrebt;
      tstr = Left(tstr,len(tstr)-1);  // remove one decimal 
      if (len(tstr)>3) then begin
        res = res & "00";
      end else begin
        res = res & Mid(tstr,1,1);
        res = res & Mid(tstr,3,1);
      end;
      tstr = PDp.pdays;
      if (PDp.pdays<99) then begin
        res = res & "0";
      end;  
      if (PDp.pdays<9) then begin
        res = res & "0";
      end;  
      res = res & tstr;
      res = res & "00";
    end;
  end else begin
    res = "0000000000";
  end;
  RETURN;
END;

procedure ExpFactCU(record RcVc RepSpec,record IVVc IVp)
BEGIN
  record CUVc CUr;
  string 255 tstr,pnr,stad;
  
  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    ExportPadString("5",1," ",false);
    ExportPadString(RepSpec.f3,5,"0",true);
    ExportPadString(CUr.Code,10,"0",true);
    tstr = ConvertSpecStr(CUr.Name,"CONVNB");
    ExportPadString(tstr,30," ",false);
    tstr = ConvertSpecStr(CUr.Person,"CONVNB");
    ExportPadString(tstr,30," ",false);
    ExportPadString(" ",4," ",false);
    NewLine;
    ExportPadString("6",1," ",false);
    ExportPadString(RepSpec.f3,5,"0",true);
    ExportPadString(CUr.Code,10,"0",true);
    ExportPadString(" ",64," ",false);
    NewLine;
    ExportPadString("7",1," ",false);
    ExportPadString(RepSpec.f3,5,"0",true);
    ExportPadString(CUr.Code,10,"0",true);
    tstr = ConvertSpecStr(CUr.InvAddr0,"CONVNB");
    ExportPadString(tstr,30," ",false);
    if (blank(CUr.InvAddr2)) then begin
      SplitAddress(CUr.InvAddr1,pnr,stad);
    end else begin
      SplitAddress(CUr.InvAddr2,pnr,stad);
    end;
    tstr = StripCharacter(pnr," ");
    ExportPadString(tstr,5," ",false);
    tstr = ConvertSpecStr(stad,"CONVNB");
    ExportPadString(tstr,25," ",false);
    ExportPadString(" ",4," ",false);
    NewLine;
    ExportPadString("8",1," ",false);
    ExportPadString(RepSpec.f3,5,"0",true);
    ExportPadString(CUr.Code,10,"0",true);
    ExportPadString("0",5,"0",true);
    GetFactPayTerm(IVp,tstr);
    ExportPadString(tstr,10,"0",true);
    if (blank(CUr.CurncyCode)) then begin
      tstr = "SEK";
    end else begin
      tstr = CUr.CurncyCode;
    end;  
    ExportPadString(tstr,3," ",false);
    ExportPadString(CUr.VATNr,10," ",false);
    ExportPadString(" ",36," ",false);
    NewLine;
  end;
  RETURN;
END;

global
procedure ExportInvFactSwe(var record RcVc RepSpec,var record FactoringBlock factp)
BEGIN
  record IVVc IVr;
  Boolean TrHs;
  string 20 fromcust,tocust;
  string 10 curncy;
  Boolean testf,first;
  Integer cnt,bnr;
  val bsum;


  bnr = 1;
  cnt = 0;
  if (RepSpec.flags[2]==0) then begin
    if (SetExportCodepage("CP437")==false) then begin
      LogText(0,"Failed to set codepage CP437");
    end;
  end;  
  RepSpec.long1 = FirstInRange(RepSpec.f1,10);
  RepSpec.long2 = LastInRange(RepSpec.f1,10);
  fromcust = FirstInRange(RepSpec.f2,20);
  tocust = LastInRange(RepSpec.f2,20);  
  IVr.SerNr = RepSpec.long1;
  IVr.TransDate = RepSpec.sStartDate;
  TrHs = true;
// export the customers 
  while (LoopKey("TransDate",IVr,1,TrHs)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin
      TrHs = false;
    end;  
    if (TrHs) then begin
      testf = true;
      if (RepSpec.long1!=-1) then begin
        if (IVr.SerNr<RepSpec.long2) then begin
          testf = false;
        end;  
      end;    
      if (RepSpec.long2!=-1) then begin
        if (IVr.SerNr>RepSpec.long2) then begin
          testf = false;
        end;  
      end;    
      if (nonblank(RepSpec.f2)) then begin
        if ((IVr.CustCode<fromcust) or (IVr.CustCode>tocust)) then begin
          testf = false;
        end;  
      end;  
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          testf = false;
        end;  
      end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
      if (testf) then begin
        ExpFactCU(RepSpec,IVr);
      end;
      UserTrace(IVr.CustCode,M4Str);
    end;
  end;  
  first = true;
  ResetLoop(IVr);
  IVr.TransDate = RepSpec.sStartDate;
  TrHs = true;
// export the invoices, all except credit invoices 
  while (LoopKey("TransDate",IVr,1,TrHs)) begin
    if (TrHs) then begin
      if (IVr.TransDate>RepSpec.sEndDate) then begin 
        TrHs = false; 
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (RepSpec.long1!=-1) then begin
        if (IVr.SerNr<RepSpec.long1) then begin 
          testf = false;
        end;  
      end;    
      if (RepSpec.long2!=-1) then begin
        if (IVr.SerNr>RepSpec.long2) then begin 
          testf = false;
        end;  
      end;    
      if (nonblank(RepSpec.f2)) then begin
        if ((IVr.CustCode<fromcust) or (IVr.CustCode>tocust)) then begin
          testf = false;
        end;  
      end;  
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          testf = false;
        end;
      end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin 
        testf = false;
      end;  
      if (testf) then begin
        if (first) then begin
          first = false;
          curncy = IVr.CurncyCode;
        end else begin
          if (curncy!=IVr.CurncyCode) then begin
            if (cnt>0) then begin
              ExpFactIVSum(RepSpec,bsum,bnr,cnt,1,curncy);
              bnr = bnr + 1;
              cnt = 0;
              bsum = blankval;
              curncy = IVr.CurncyCode;
            end;
          end;
        end;
        ExpFactIV(RepSpec,IVr,bnr);
        cnt = cnt + 1;
        bsum = bsum + IVr.Sum4;
      end;
      UserTrace(IVr.SerNr,M4Long);
    end;
  end;
  if (cnt>0) then begin
    ExpFactIVSum(RepSpec,bsum,bnr,cnt,1,curncy);
    bnr = bnr + 1;
    cnt = 0;
  end;
  bsum = blankval;
  first = true;
  ResetLoop(IVr);
  IVr.TransDate = RepSpec.sStartDate;
  TrHs = true;
// export the invoices, only credit invoices 
  while (LoopKey("TransDate",IVr,1,TrHs)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin
      TrHs = false;
    end;  
    if (TrHs) then begin
      testf = true;
      if (RepSpec.long1!=-1) then begin
        if (IVr.SerNr<RepSpec.long1) then begin
          testf = false;
        end;  
      end;    
      if (RepSpec.long2!=-1) then begin
        if (IVr.SerNr>RepSpec.long2) then begin
          testf = false;
        end;  
      end;    
      if (nonblank(RepSpec.f2)) then begin
        if ((IVr.CustCode<fromcust) or (IVr.CustCode>tocust)) then begin
          testf = false;
        end;  
      end;  
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin
          testf = false;
        end;
      end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
      if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin 
        testf = false;
      end;  
      if (testf) then begin
        if (first) then begin
          first = false;
          curncy = IVr.CurncyCode;
        end else begin
          if (curncy!=IVr.CurncyCode) then begin
            if (cnt>0) then begin
              ExpFactIVSum(RepSpec,bsum,bnr,cnt,1,curncy);
              bnr = bnr + 1;
              cnt = 0;
              bsum = blankval;
              curncy = IVr.CurncyCode;
            end;
          end;
        end;
        ExpFactIV(RepSpec,IVr,bnr);
        cnt = cnt + 1;
        bsum = bsum + IVr.Sum4;
      end;
      UserTrace(IVr.SerNr,M4Long);
    end;
  end;
  if (cnt>0) then begin
    ExpFactIVSum(RepSpec,bsum,bnr,cnt,3,curncy);
    cnt = 0;
    bnr = bnr + 1;
  end;
  RETURN;
END;