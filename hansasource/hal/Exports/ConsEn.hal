external updating function Boolean SaveSim(record SMVc);
external updating procedure SaveTrans(record TRVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure FindAccSD(Date,var Date,var Boolean);
external procedure ExpBackupString(string);
external procedure OutRegisterTag(string);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetAccTurnover(string,string,Date,Date,record ObjBalVc,string,Integer,Integer,Integer,var val,var val);
external procedure GetAccStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val);
external procedure GetAccBalance(string,string,Date,record ObjBalVc,Integer,Integer,Integer,string,Integer,var val);
external function Boolean GetOwnerPrc(Date,var Date,var val);
external procedure MulM4OneRate(val,val,var val,roundmode,Boolean);
external procedure AddSMRow(record SMVc,Date,string,string,string,string,val,Boolean,Boolean ,var val);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);

procedure OutSM(record SMVc SMr,Boolean nonumber)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  val sv;

  if (nonumber) then begin
    ExportString("S");
  end else begin
    ExportLongInt(SMr.SerNr);
  end;
  ExportString(SMr.Comment);
  ExportDate(SMr.TransDate);
  ExportString(SMr.Sign);
  ExportString(SMr.RefStr);
  NewLine;
  rwcnt = MatRowCnt(SMr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    ExportString(SMrw.AccNumber);
    ExportString(SMrw.Objects);
    ExportString(SMrw.Comment);
    ExportVal(sv,M4Val);
    ExportString(SMrw.VATCode);
    ExportVal(SMrw.DebVal,M4Val);
    ExportVal(SMrw.CredVal,M4Val);
    NewLine;
  end;
  RETURN;
END;

procedure OutTR(record TRVc TRr,Boolean nonumber)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt;
  
  if (nonumber) then begin
    ExportString("S");
  end else begin
    ExportLongInt(TRr.Number);
  end;
  ExportDate(TRr.RegDate);
  ExportString(TRr.Comment);
  ExportDate(TRr.TransDate);
  ExportString(TRr.Sign);
  ExportString(TRr.RefStr);
  ExportLongInt(TRr.IntYc);
  NewLine;
  rwcnt = MatRowCnt(TRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRr,i,TRrw);
    if (TRrw.stp==1) then begin
      ExportString(TRrw.AccNumber);
      ExportString(TRrw.Objects);
      ExportString(TRrw.Comment);
      ExportString("");
      ExportLongInt(TRrw.ovst);
      ExportString(TRrw.VATCode);
      ExportVal(TRrw.Qty,M4Qty);
      ExportVal(TRrw.DebVal,M4Val);
      ExportVal(TRrw.CredVal,M4Val);
      ExportVal(TRrw.CurDebVal,M4Val);
      ExportVal(TRrw.CurCredVal,M4Val);
      ExportVal(TRrw.ToRateB1,M4Val);
      ExportString(TRrw.Curncy);
      ExportLongInt(TRrw.BRSerNr);
      ExportLongInt(TRrw.BRRowNr);
      ExportVal(TRrw.NomVal,M4Val);
      ExportString(TRrw.CompCode);
      ExportLongInt(TRrw.Typ);
      ExportLongInt(TRrw.SerNr);
      ExportDate(TRrw.DueDate);
      ExportLongInt(TRrw.CorspSer);
      ExportLongInt(TRrw.Reconsf);
      ExportVal(TRrw.FrRate,M4Rate);
      ExportVal(TRrw.ToRateB2,M4Rate);
      ExportVal(TRrw.DebVal2,M4Val);
      ExportVal(TRrw.CredVal2,M4Val);
      ExportVal(TRrw.BaseRate1,M4Rate);
      ExportVal(TRrw.BaseRate2,M4Rate);
      NewLine;
    end;
    if (TRrw.stp==2) then begin
      ExportString("");
      ExportLongInt(TRrw.stp);
      ExportDate(TRrw.UpdDate);
      ExportString(TRrw.Sign);
      ExportDate(TRrw.OldTransDate);
      NewLine;
    end;
    if (TRrw.stp==3) then begin
      ExportString("");
      ExportLongInt(TRrw.stp);
      ExportLongInt(TRrw.CorrNr);
      ExportDate(TRrw.CorrDate);
      ExportLongInt(TRrw.CorrYc);
      NewLine;
    end;
    if (TRrw.stp==4) then begin
      ExportString("");
      ExportLongInt(TRrw.stp);
      ExportLongInt(TRrw.CorrNr);
      ExportLongInt(TRrw.CorrYc);
      NewLine;
    end;
  end;
  RETURN;
END;

function
Boolean AddRatenCons2(record AccVc Accp,Date bdp,val ratep,var val sump)
BEGIN
  Boolean res,testf;
  Date ed;
  val prc;

  res = true;
  testf = GetOwnerPrc(bdp,ed,prc);
  if (ratep!=0) then begin
    MulM4OneRate(sump,ratep,sump,DefaultCurRoundOff,true);
  end else begin
    if (Accp.Conspr!=0) then begin
      MulM4OneRate(sump,prc,sump,DefaultCurRoundOff,true);
    end;
  end;
  AddRatenCons2 = res;
  RETURN;
END;

global
procedure ConsolidationFunc(var record RcVc RepSpec,var record TRVc TRr,var record SMVc SMr)
BEGIN
  record AccVc Accr;
  row TRVc TRrw;
  row SMVc SMrw;
  record ObjBalVc ObjBalr;
  record CYBlock CompYear;
  string 255 frob,toob,tstr,account;
  val Pb,Sb,Eb,totsum,sum,t;
  val temp,br1,br2;
  Date sd;
  Boolean Vws,debf;
  Boolean ObjBals,testf,resUseAccum;
  record ConsolidationBlock consr;
  record BaseCurBlock bcur;
  Date AccumStartDate;
  Integer oldcomp;

  BlockLoad(CompYear);
  BlockLoad(consr);
  BlockLoad(bcur);
  RepSpec.basecurncy = consr.ConsCrncy;
  RepSpec.FirstAcc = FirstInRange(RepSpec.AccStr,10);
  RepSpec.LastAcc = LastInRange(RepSpec.AccStr,10);
  frob = FirstInRange(RepSpec.ObjStr,20);
  toob = LastInRange(RepSpec.ObjStr,20);
  FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);
  if (RepSpec.ArtMode==0) then begin
    RecordNew(TRr);
    TRr.Comment = Left(RepSpec.f1,60);
    if (nonblankdate(RepSpec.d1)) then begin
      TRr.TransDate = RepSpec.d1;
      TRr.RegDate = RepSpec.d1;
    end;
  end else begin
    RecordNew(SMr);
    SMr.Comment = Left(RepSpec.f1,60);
    if (nonblankdate(RepSpec.d1)) then begin
      SMr.TransDate = RepSpec.d1;
    end;
  end;
  Vws = true;
  while (LoopMain(Accr,1,Vws)) begin
    testf = false;
    if (RepSpec.ArtMode==0) then begin
      ClearRow(TRr,TRrw,1);
    end else begin
      ClearRow(SMr,SMrw,1);
    end;
    Eb = 0;
    Sb = 0;
    Pb = 0;
    ObjBalr.AccNumber = Accr.AccNumber;
    ObjBalr.Object = RepSpec.ObjStr;    
    ObjBals = ReadFirstMain(ObjBalr,2,true);
    if (RepSpec.UsedOnly==0) then begin
      ObjBals = true;
    end;  
    if (ObjBals) then begin
      testf = true;
      if (nonblank(RepSpec.FirstAcc) and (ObjBalr.AccNumber<RepSpec.FirstAcc)) then begin testf = false; end;
      if (nonblank(RepSpec.LastAcc) and (ObjBalr.AccNumber>RepSpec.LastAcc)) then begin testf = false; end;
      if (nonblank(RepSpec.ObjStr) and (ObjBalr.Object<frob)) then begin testf = false; end;
      if (nonblank(RepSpec.ObjStr) and (ObjBalr.Object>toob)) then begin testf = false; end;
      if (Accr.GroupAcc!=0) then begin testf = false; end;
    end;
    if (testf) then begin
      if (nonblank(Accr.ConsAccNumber)) then begin
        account = Accr.ConsAccNumber;
        if (GetAccName(account,tstr,60)==false) then begin
          tstr = "";
          oldcomp = CurrentCompany;  
          if (SetCompanyCode(RepSpec.f3,false)) then begin
            if (GetAccName(account,tstr,60)==false) then begin
              tstr = "";
            end;
          end;
          ResetCompany(oldcomp);
        end;    
      end else begin
        account = Accr.AccNumber;
        tstr = Accr.Comment;
      end;
      debf = true;
      if ((Accr.AccType==3) or (Accr.AccType==4)) then begin
        if (resUseAccum==true) then begin
          sd = AddDay(RepSpec.sStartDate,-1);
          t = blankval;
          GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,AccumStartDate,sd,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Sb);
          GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,AccumStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
          Pb = Eb - Sb;
        end else begin
          Sb = 0;
          t = blankval;
          GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
          Pb = Eb - Sb;
        end;
        if (RepSpec.AccSpec==0) then begin
          sum = Eb;
        end;  
        if (RepSpec.AccSpec==1) then begin
          sum = Pb;
        end;  
        if (RepSpec.AccSpec==2) then begin
          sum = Eb;
        end;  
//##        AddRatenCons(&Accr,&RepSpec.sEndDate,&sum);
        if (AddRatenCons2(Accr,RepSpec.sEndDate,RepSpec.vals0,sum)) then begin
          if (sum<0) then begin
            debf = false;
            sum = -sum;
          end;
          if (RepSpec.ArtMode==0) then begin
            if (RepSpec.basecurncy!=0) then begin
              GetFullCurncyRate(bcur.BaseCur2,RepSpec.sEndDate,temp,temp,temp,br1,br2);
              AddEuroCurncyTrRow(TRr,account,RepSpec.f2,"",tstr,sum,true,debf,totsum,bcur.BaseCur2,0,0,0,br1,br2,sum,-1,-1,false,"");
            end else begin
              AddEuroTrRow(TRr,account,RepSpec.f2,"",tstr,sum,0,0,true,debf,totsum,false,"","","");
            end;
          end else begin
            AddSMRow(SMr,SMr.TransDate,account,RepSpec.f2,"-1",tstr,sum,true,debf,totsum);
          end;
        end;
      end;
      if ((Accr.AccType==0) or (Accr.AccType==1) or (Accr.AccType==2)) then begin
        GetAccStartBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sStartDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,Sb);
        GetAccBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,RepSpec.IncDaughter,Eb);
        Pb = Eb - Sb;
        if (RepSpec.AccSpec==0) then begin
          sum = Eb;
        end;  
        if (RepSpec.AccSpec==1) then begin
          sum = Pb;
        end;  
        if (RepSpec.AccSpec==2) then begin
          sum = Eb;
        end;  
//##        AddRatenCons(&Accr,&RepSpec.sEndDate,&sum);
        if (AddRatenCons2(Accr,RepSpec.sEndDate,RepSpec.vals0,sum)) then begin
          if (sum<0) then begin
            debf = false;
            sum = -sum;
          end;
          if (RepSpec.ArtMode==0) then begin
            if (RepSpec.basecurncy!=0) then begin
              GetFullCurncyRate(bcur.BaseCur2,RepSpec.sEndDate,temp,temp,temp,br1,br2);
              AddEuroCurncyTrRow(TRr,account,RepSpec.f2,"",tstr,sum,true,debf,totsum,bcur.BaseCur2,0,0,0,br1,br2,sum,-1,-1,false,"");
            end else begin
              AddEuroTrRow(TRr,account,RepSpec.f2,"",tstr,sum,0,0,true,debf,totsum,false,"","","");
            end;          
          end else begin
            AddSMRow(SMr,SMr.TransDate,account,RepSpec.f2,"-1",tstr,sum,true,debf,totsum);
          end;
        end;
      end;
	end;
    UserTrace(Accr.AccNumber,M4Str);
  end;
  RETURN;
END;

global
procedure ConsEn(var record RcVc RepSpec)
BEGIN
  record TRVc TRr;
  record SMVc SMr;

  ExportFormat;
  ExpBackupString(RepSpec.f3);
  if (RepSpec.ArtMode==0) then begin
    ExportString("trans4");  
    NewLine;
  end else begin
    OutRegisterTag("SMVc");
    NewLine;
  end;
  ConsolidationFunc(RepSpec,TRr,SMr);
  if (RepSpec.ArtMode==0) then begin
    OutTR(TRr,true);
  end else begin
    OutSM(SMr,true);
  end;
  NewLine;
  RETURN;
END;

global
updating procedure ConsMn(var record RcVc RepSpec)
BEGIN
  record TRVc TRr;
  record SMVc SMr;
  Integer oldcomp;

  if (nonblank(RepSpec.f3)) then begin
    oldcomp = CurrentCompany;  
    ConsolidationFunc(RepSpec,TRr,SMr);
    if (SetCompanyCode(RepSpec.f3,false)) then begin
      if (RepSpec.ArtMode==0) then begin
        TRr.Number = NextSerNr("TRVc",TRr.TransDate,-1,false,"");            
        SaveTrans(TRr);
      end else begin
        SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");            
        if (SaveSim(SMr)) then begin end;
      end;
    end;
    ResetCompany(oldcomp);
  end;
  RETURN;
END;
