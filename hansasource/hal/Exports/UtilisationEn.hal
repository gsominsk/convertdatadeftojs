external function LongInt CountWorkingDays(Date,Date,string,string);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);

procedure FindDepr(record AT2UnitVc ATr,var val dprbef)
begin
   val depr,t,dprprc1,dprprc2,svp;
   string 255 tstr;
   Date FStartDate, FEndDate;
   
   FStartDate = AddMonth(CurrentDate,-GetMonth(CurrentDate)+1);
   FStartDate = AddDay(FStartDate,-GetDay(FStartDate)+1);
   FEndDate = AddMonth(CurrentDate,-GetMonth(CurrentDate)+2);
   FEndDate = AddDay(FEndDate,-GetDay(FEndDate) + (DaysInMonth(GetYear(CurrentDate),GetMonth(CurrentDate))));
   dprbef = 0;
   depr = 0;
   OneAT2UnitDeprCalculation(0,0,0,false,FStartDate,FEndDate,ATr.InventoryNr,dprbef,depr,t,t,tstr,svp,ATr.ResVal,false);
  return;
end;

procedure FindNoOfDaysSinceAqc(string SerialNr,var val dayssinceaqc,var val invacq,val extday)
begin
  record RentResBookVc RentResr;
  record AgreementVc Agreementr;
  record RentResVc Rentr;
  record CUVc CUr;
  boolean TrHs, testf;
  string 10 countrycode;
  string 20 custcode;
  val days;

  Agreementr.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreementr,1,true)) then begin
     custcode = Agreementr.CustCode;
  end;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.CountryCode)) then begin
      countrycode = CUr.CountryCode;
    end;
  end;

  TrHs = true;
  dayssinceaqc = 0;
  while (LoopMain(RentResr,1,TrHs)) begin
    if (TrHs) then begin
      testf = true;
      if (RentResr.SerialNr <> SerialNr) then begin
        testf = false;
      end;
      if (RentResr.TransDate > CurrentDate) then begin
        testf = false;
      end;
      if (testf) then begin
        if (nonblankdate(RentResr.EndDate)) then begin
          if (RentResr.EndDate < CurrentDate) then begin
             days = CountWorkingDays(RentResr.TransDate,RentResr.EndDate,custcode,countrycode) + extday;
             dayssinceaqc = dayssinceaqc + days;
           end;
          if (RentResr.EndDate > CurrentDate) then begin
             days = CountWorkingDays(RentResr.TransDate,CurrentDate,custcode,countrycode) + extday;
             dayssinceaqc = dayssinceaqc + days;
          end;
        end else begin
          days = CountWorkingDays(RentResr.TransDate,CurrentDate,custcode,countrycode) + extday;
          dayssinceaqc = dayssinceaqc + days;
        end;
        Rentr.SerNr = RentResr.SerNr;
        if (ReadFirstMain(Rentr,1,true)) then begin
          invacq = invacq + (Rentr.Sum * days);
        end;
      end;
    end;
  end;
return;
end;

procedure FindNoOfDays(string SerialNr,var val days,date sdate,val extday)
begin
  record RentResBookVc RentResr;
  record AgreementVc Agreementr;
  record CUVc CUr;
  boolean TrHs, testf;
  Date sdate2, edate2;
  string 10 countrycode;
  string 20 custcode;

  TrHs = true;
  days = 0;
  
  Agreementr.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreementr,1,true)) then begin
     custcode = Agreementr.CustCode;
  end;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.CountryCode)) then begin
      countrycode = CUr.CountryCode;
    end;
  end;

  while (LoopMain(RentResr,1,TrHs)) begin
    if (TrHs) then begin
      testf = true;
      if (RentResr.SerialNr <> SerialNr) then begin
        testf = false;
      end;
      if (nonblankdate(RentResr.EndDate)) then begin
        if (RentResr.EndDate < sdate) then begin
          testf = false;
        end;
      end;
      if (RentResr.TransDate > CurrentDate) then begin
        testf = false;
      end;
      if (testf) then begin
        if (RentResr.TransDate < sdate) then begin
          sdate2 = sdate;
        end;
        if (Rentresr.TransDate > sdate) then begin
          sdate2 = RentResr.TransDate;     
        end;
        if (nonblankdate(RentResr.EndDate)) then begin
          if (RentResr.EndDate < CurrentDate) then begin
            days = days + (CountWorkingDays(sdate2,RentResr.EndDate,custcode,countrycode) + extday);
          end;
          if (RentResr.EndDate > CurrentDate) then begin
            days = days + (CountWorkingDays(sdate2,CurrentDate,custcode,countrycode) + extday);
          end;
        end else begin
          days = days + (CountWorkingDays(sdate2,CurrentDate,custcode,countrycode) + extday);
        end;
      end;
    end;
  end;
return;
end;

procedure FindTransactions(record DepVc Depr,record RcVc RepSpec,Date sdate, val extday)
begin
  record AT2UnitVc ATr;
  record RentINVc RentINr;
  boolean TrHs, testf;
  val days,RentalPerc,dayssinceaqc,daysavailacq;
  val invacq,ratio,currval;
  val daysavail2,dprv;
  
  TrHs = true; 
  ATr.DepCode = Depr.Code;
  while (LoopKey("DepCode",ATr,1,TrHs)) begin
    if (TrHs) then begin
      if (ATr.DepCode > Depr.Code) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;  
      if (nonblank(RepSpec.f2)) then begin
        if (ATr.SerialNr <> RepSpec.f2) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (ReadFirstKey("SerialNr",RentINr,1,true)) then begin end;
      end;
      if (nonblank(RepSpec.f1)) then begin
        if (RentINr.Code <> RepSpec.f1) then begin
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RentINr.Group <> RepSpec.f3) then begin
          testf = false;
        end;
      end;
      if (ATr.Activef <> 0) then begin
        testf = false;
      end;
      if (testf) then begin
       invacq = 0;
       FindNoOfDays(ATr.SerialNr,days,sdate,extday);
       FindNoOfDaysSinceAqc(ATr.SerialNr,dayssinceaqc,invacq,extday);
      // if (days > 0) then begin
          ExportString(Depr.Code);
          if (ReadFirstKey("SerialNr",RentINr,1,true)) then begin
            ExportString(RentINr.Code);
            ExportString(RentINr.Name);
          end;
          ExportString(ATr.SerialNr);
          ExportVal(ATr.PurchVal,M40Val);
          
          FindDepr(ATr,dprv);
          currval = ATr.PurchVal - dprv;
          ExportVal(currval,M40Val);
          ExportVal(invacq,M40Val);
          ratio = (invacq * 100) / ATr.PurchVal;
          ExportVal(ratio,M4Qty);
          ExportVal(days,M40Val);
          if (ATr.PurchaseDate > sdate) then begin
            daysavail2 = CountWorkingDays(ATr.PurchaseDate,CurrentDate,"","") + extday;
            ExportVal(daysavail2,M40Val);
          end else begin
            daysavail2 = RepSpec.vals0 + extday;
            ExportVal(daysavail2,M40Val);
          end;
          RentalPerc = (days/daysavail2) * 100;
          ExportVal(RentalPerc,M4Val);
          ExportVal(dayssinceaqc,M40Val);
          daysavailacq = CountWorkingDays(ATr.PurchaseDate,CurrentDate,"","") + extday;
          ExportVal(daysavailacq,M40Val);
          RentalPerc = (dayssinceaqc/daysavailacq)*100;
          ExportVal(RentalPerc,M4Val);
          NewLine;
    //    end;
      end;
    end;       
  end;  
  return;
end; 



procedure Header2(record RcVc RepSpec)
begin
  ExportString(USetStr(13000));
  ExportString(USetStr(13001));
  ExportString(USetStr(13002));
  ExportString(USetStr(13003));
  ExportString(USetStr(13004));
  ExportString(USetStr(13005));
 
  ExportString(USetStr(13006));
  ExportString(USetStr(13007));
  ExportString(USetStr(13008));
  ExportString(USetStr(13009));
  ExportString(USetStr(13010));
 
  ExportString(USetStr(13011));
  ExportString(USetStr(13012));
  ExportString(USetStr(13010));
  NewLine;
  return;
end;

global 
procedure InstrUtilEn(record RcVc RepSpec)
begin
  record DepVc Depr;
  record RentControlBlock RentControlr;
  boolean TrHs, testf;
  integer qty;
  date sdate, edate;
  val extday;

  BlockLoad(RentControlr);
  if (RentControlr.ChargeForFirstDay <> 0) then begin
    extday = 1;
  end else begin
    extday = 0;
  end;
  FindFiscalYear(CurrentDate,sdate,edate);
  RepSpec.vals0 = CountWorkingDays(sdate,CurrentDate,"","");
  Header2(RepSpec);
  TrHs = true;
  Depr.Code = RepSpec.f4;
  while (LoopMain(Depr,1,TrHs)) begin
    if (TrHs) then begin
      if (nonblank(RepSpec.f4)) then begin
        if (Depr.Code > RepSpec.f4) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      FindTransactions(Depr,RepSpec,sdate,extday);  
    end;
  end; 
  return;
end;
