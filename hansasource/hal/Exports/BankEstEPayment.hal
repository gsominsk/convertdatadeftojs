external procedure BankExpEstonia6SwedbankArea(record OPVc,Integer,Integer,Integer,var Area,var Integer,var string);
external procedure BankExpDomesticSwedBankArea(record OPVc,Integer,Integer,integer,var Area,var Integer,var string);
external procedure BankExpForeignSwedBankArea(record OPVc,Integer,Integer,integer,var Area,var Integer,var string);
external procedure BankExpDomesticRiigikassaArea(record OPVc,Integer,Integer,Integer,var Area,var Integer);
external function string 100 CreateCompID();
external procedure BankExpDomesticTeleHansaArea(record OPVc,Integer,Integer,var Area,var Integer);
external procedure BankExpForeignTeleHansaArea(record OPVc,Integer,Integer,Integer,Integer,var Area,var Integer);

procedure CreateEPaymentBatch_Header(LongInt opsernr,string ourbankacc,Date transdate,Integer PayMethod,string comment,var Area a)
begin
  string 255 tstr;
 
  AddTextToArea(":0::**M5",a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":1::" & opsernr,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":3::EEK",a);
  AddTextToArea(chr(13) & chr(10),a);
  tstr = ConvertStringToCodePage("ISO-8859-1",comment);
  AddTextToArea(":4::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":6::" & ourbankacc,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":12::" & DateToString(transdate,"YYYYMMDD"),a);
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure AddEPaymentBatch_Rows(string vebankacc,string vecode,string opcomment,val payval,var Area a)
begin 
  string 255 tstr,tstr2;
  record CUVc VEr;
   
  VEr.Code = vecode;
  if (ReadFirstMain(VEr,1,true)) then begin end;
  tstr = ConvertStringToCodePage("ISO-8859-1",VEr.Name);
  tstr2 = ConvertStringToCodePage("ISO-8859-1",opcomment);
  AddTextToArea(":28::" & vebankacc & ";" & tstr & ";" & ValToString(payval,M4Val,"","",0),a);
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure AddEPaymentBatch_Footer(val payval,var Area a)
begin
  AddTextToArea(":2::" & ValToString(payval,M4Val,"","",0),a);
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure CreateEPaymentDomestic(LongInt opsernr,LongInt visernr,string ourbankacc,Date transdate,Integer PayMethod,
                         val payval,string comment,
                         string vebankac,string vecode,string bankrefstr,                         
                         string bankcurncy,string bankname,var Area a)
begin
  record CUVc VEr;
  Boolean found;
  string 255 tstr;
  record BankVc VEBankr;
  record VIVc VIr;
  
  VEr.Code = vecode;
  found = ReadFirstMain(VEr,1,true);
  VEBankr.Code = VEr.AccOperator;
  if (ReadFirstMain(VEBankr,1,true)) then begin    
  end;

  AddTextToArea(":0::**M3",a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":1::" & opsernr,a);//uniqueid?
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":2::" & ValToString(payval,M4Val,"","",0),a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":3::" & bankcurncy,a);
  AddTextToArea(chr(13) & chr(10),a);

  tstr = ConvertStringToCodePage("ISO-8859-1",comment);
  AddTextToArea(":4::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  tstr = ConvertStringToCodePage("ISO-8859-1",bankrefstr);
  AddTextToArea(":5::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":6::" & ourbankacc,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":7::" & vebankac,a);
  AddTextToArea(chr(13) & chr(10),a);
  if nonblank(VEr.VEFactoring) then begin
    VEr.Code = VEr.VEFactoring;
    found = ReadFirstMain(VEr,1,true);
    tstr = VEr.Name;
  end else begin
    tstr = VEr.Name;
    if (visernr!=-1) then begin
      VIr.SerNr = visernr;
      if (ReadFirstMain(VIr,1,true)) then begin
        tstr = VIr.VEName;
      end;
    end;
  end;
  tstr = ConvertStringToCodePage("ISO-8859-1",tstr);
  AddTextToArea(":8::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  tstr = ConvertStringToCodePage("ISO-8859-1",VEBankr.Name);
  AddTextToArea(":11::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":12::" & DateToString(transdate,"YYYYMMDD"),a);
  AddTextToArea(chr(13) & chr(10),a);
  switch (PayMethod) begin
    case 0: AddTextToArea(":17::" & "T",a);
    case 1: AddTextToArea(":17::" & "X",a);
    case 2: AddTextToArea(":17::" & "K",a);  
  end;
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure CreateEPaymentForeign(LongInt opsernr,LongInt visernr,string ourbankacc,Date transdate,Integer PayMethod,
                         val payval,string comment,
                         string vebankac,string vecode,string bankrefstr,string bankcurncy,
                         string sortcode,string bankname,
                         var Area a)
begin
  record CUVc VEr;
  record BankVc VEBankr;
  Boolean found;
  string 255 tstr;
  record VIVc VIr;
  
  VEr.Code = vecode;
  found = ReadFirstMain(VEr,1,true);
  VEBankr.Code = VEr.AccOperator;
  if (ReadFirstMain(VEBankr,1,true)) then begin    
  end;
  AddTextToArea(":0::**M4",a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":1::" & opsernr,a);//uniqueid?
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":2::" & ValToString(payval,M4Val,"","",0),a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":3::" & bankcurncy,a);
  AddTextToArea(chr(13) & chr(10),a);

  tstr = ConvertStringToCodePage("ISO-8859-1",comment);
  AddTextToArea(":4::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  tstr = ConvertStringToCodePage("ISO-8859-1",bankrefstr);
  AddTextToArea(":5::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":6::" & ourbankacc,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":7::" & vebankac,a);
  AddTextToArea(chr(13) & chr(10),a);
  if nonblank(VEr.VEFactoring) then begin
    VEr.Code = VEr.VEFactoring;
    found = ReadFirstMain(VEr,1,true);
    tstr = VEr.Name;
  end else begin
    tstr = VEr.Name;
    if (visernr!=-1) then begin
      VIr.SerNr = visernr;
      if (ReadFirstMain(VIr,1,true)) then begin
        tstr = VIr.VEName;
      end;
    end;
  end;
  tstr = ConvertStringToCodePage("ISO-8859-1",tstr);
  AddTextToArea(":8::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);

  AddTextToArea(":10::" & VEBankr.SWIFT,a);
  AddTextToArea(chr(13) & chr(10),a);
  tstr = ConvertStringToCodePage("ISO-8859-1",VEBankr.Name);
  AddTextToArea(":11::" & tstr,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":12::" & DateToString(transdate,"YYYYMMDD"),a);
  AddTextToArea(chr(13) & chr(10),a);
  switch (PayMethod) begin
    case 0: AddTextToArea(":17::" & "T",a);
    case 1: AddTextToArea(":17::" & "X",a);
    case 2: AddTextToArea(":17::" & "K",a);  
  end;
  AddTextToArea(chr(13) & chr(10),a);

  AddTextToArea(":20::" & VEr.CountryCode,a);
  AddTextToArea(chr(13) & chr(10),a);
  AddTextToArea(":21::" & sortcode,a);
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure AddToVEArray(row OPVc OPrw,var Array string avecode,var Array string acurcode,var Array string abankacc,var Array string abankref,var Integer avecnt)
begin
  Boolean res;
  Integer i;
  
  for (i=0;i<avecnt;i=i+1) begin
    if ((avecode[i]==OPrw.VECode) and (acurcode[i])==OPrw.BankCurncy) and (abankacc[i]==OPrw.BankAcc) and (abankref[i]==OPrw.BankRefStr) then begin
      goto LAddToVEArray;
    end;
  end;
  avecode[avecnt] = OPrw.VECode;
  acurcode[avecnt] = OPrw.BankCurncy;
  abankacc[avecnt] = OPrw.BankAcc;
  abankref[avecnt] = OPrw.BankRefStr;
  avecnt = avecnt + 1;
LAddToVEArray:;  
  return;
end;

function Boolean VEPaymentAlreadyDone(row OPVc OPrw,var Array string avecode,var Array string acurcode,var Array string abankacc,var Array string abankref,var Integer avecnt)
begin
  Boolean res;
  Integer i;
  
  for (i=0;i<avecnt;i=i+1) begin
    if ((avecode[i]==OPrw.VECode) and (acurcode[i])==OPrw.BankCurncy) and (abankacc[i]==OPrw.BankAcc) and (abankref[i]==OPrw.BankRefStr) then begin
      res = true;
      goto LVEPaymentAlreadyDone;
    end;
  end;
LVEPaymentAlreadyDone:;
  VEPaymentAlreadyDone = res;  
  return;
end;

function Boolean BankExpEstoniaSEB_EPaymentQueVc(record OPVc OPr,record BankVc Bankr,var Array record EPaymentQueVc aEPaymentQuer,var Integer aepcnt)
begin
  Boolean res;
  row OPVc OPrw;
  row OPVc OP2rw;
  Integer i,j,rwcnt;
  Boolean found;
  Array string 50 avecode;
  Array string 20 acurcode;
  Array string 60 abankacc;
  Array string 60 abankref;
  Integer avecnt;
  val bankval;
  record EPaymentQueVc EPaymentQuer;
  string 255 corsprows;
  string 255 comment,ourbankacc;
  Area a_blob;
  Integer nrofpaym;
  record EInvoiceBlock EIb;
  val paysum;
  
  BlockLoad(EIb);
  rwcnt = MatRowCnt(OPr);
  switch (OPr.PayperSupplier) begin
    case 0:
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if ((OPrw.stp==1) and (OPrw.ovst==0)) then begin
          if (blank(corsprows)) then begin
            corsprows = i;
          end else begin
            corsprows = corsprows & ",";
            corsprows = corsprows & i;
          end;
          if (OPr.ForeignPayment==0) then begin
            CreateEPaymentDomestic(OPr.SerNr,OPrw.VISerNr,OPr.BankAcc,OPr.TransDate,OPr.PayMethod,OPrw.BankVal,OPrw.Comment,OPrw.BankAcc,OPrw.VECode,OPrw.BankRefStr,OPrw.BankCurncy,Bankr.Name,a_blob);
          end else begin
            CreateEPaymentForeign(OPr.SerNr,OPrw.VISerNr,OPr.BankAcc,OPr.TransDate,OPr.PayMethod,OPrw.BankVal,OPrw.Comment,OPrw.BankAcc,OPrw.VECode,OPrw.BankRefStr,OPrw.BankCurncy,OPrw.SortCode,Bankr.Name,a_blob);
          end;
          paysum = paysum + OPrw.BankVal;
          nrofpaym = nrofpaym + 1;
          res = true;
        end;
      end;
    case 1:
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if ((OPrw.stp==1) and (OPrw.ovst==0)) then begin
          if (blank(OPr.BankAcc)) or (blank(OPrw.BankAcc)) then begin goto LSKIPROW1; end;
          if (VEPaymentAlreadyDone(OPrw,avecode,acurcode,abankacc,abankref,avecnt)==false) then begin        
            if (blank(corsprows)) then begin
              corsprows = i;
            end else begin
              corsprows = corsprows & ",";
              corsprows = corsprows & i;
            end;
            comment = OPrw.Comment;
            bankval = OPrw.BankVal;
            for (j=i+1;j<rwcnt;j=j+1) begin
              MatRowGet(OPr,j,OP2rw);
              if ((OP2rw.stp==1) and (OP2rw.ovst==0)) then begin
                if ((OP2rw.VECode==OPrw.VECode) and (OP2rw.BankCurncy==OPrw.BankCurncy) and (OP2rw.BankAcc==OPrw.BankAcc) and (OP2rw.BankRefStr==OPrw.BankRefStr)) then begin
                  bankval = bankval + OP2rw.BankVal;
                  corsprows = corsprows & ",";
                  corsprows = corsprows & j;
                  comment = comment & ", " & OP2rw.Comment;
                end;
              end;
            end;
            if (OPr.ForeignPayment==0) then begin
              CreateEPaymentDomestic(OPr.SerNr,OPrw.VISerNr,OPr.BankAcc,OPr.TransDate,OPr.PayMethod,bankval,comment,OPrw.BankAcc,OPrw.VECode,OPrw.BankRefStr,OPrw.BankCurncy,Bankr.Name,a_blob);
            end else begin
              CreateEPaymentForeign(OPr.SerNr,OPrw.VISerNr,OPr.BankAcc,OPr.TransDate,OPr.PayMethod,bankval,comment,OPrw.BankAcc,OPrw.VECode,OPrw.BankRefStr,OPrw.BankCurncy,OPrw.SortCode,Bankr.Name,a_blob);
            end;
            nrofpaym = nrofpaym + 1;
            paysum = paysum + bankval;
            AddToVEArray(OPrw,avecode,acurcode,abankacc,abankref,avecnt);
            res = true;
LSKIPROW1:;
          end;
        end;
      end;
    case 2:
      CreateEPaymentBatch_Header(OPr.SerNr,OPr.BankAcc,OPr.TransDate,OPr.PayMethod,OPr.BankName,a_blob);
      nrofpaym = nrofpaym + 1;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        bankval = bankval + OPrw.BankVal;
        AddEPaymentBatch_Rows(OPrw.BankAcc,OPrw.VECode,OPrw.Comment,OPrw.BankVal,a_blob);
        paysum = paysum + OPrw.BankVal;
        res = true;
      end;
      AddEPaymentBatch_Footer(bankval,a_blob);
  end;

  RecordNew(EPaymentQuer);
  EPaymentQuer.Type = 0;
  EPaymentQuer.OPSerNr = OPr.SerNr;
  EPaymentQuer.CorspOPRows = corsprows;
  EPaymentQuer.PaymentFormat = "SEB";
  EPaymentQuer.Partner = "SEB";
  EPaymentQuer.DBID = DatabaseID;
  EPaymentQuer.CompID = CreateCompID;
  EPaymentQuer.NrOfPayments = nrofpaym;
  EPaymentQuer.Status = 0;
  switch (EIb.DblAcceptEPay) begin
    case 1:
      EPaymentQuer.Status = 45;
    case 2:
      if (paysum>=EIb.DblAcceptMinSumEPay) then begin
        EPaymentQuer.Status = 45;
      end;
  end;  
  SetRecordBlob(EPaymentQuer,"Math",a_blob);

  aEPaymentQuer[aepcnt] = EPaymentQuer;
  aepcnt = aepcnt + 1;

  BankExpEstoniaSEB_EPaymentQueVc = res;
  return;
end;

function Boolean BankExpTeleHansa_EPaymentQueVc(record OPVc OPr,record BankVc Bankr,var Array record EPaymentQueVc aEPaymentQuer,var Integer aepcnt)
begin
  Boolean res;
  record EPaymentQueVc EPaymentQuer;
  Area a_blob;
  Integer nrofpaym;
    
  if (OPr.ForeignPayment!=0) then begin
    BankExpForeignTeleHansaArea(OPr,OPr.PayMethod,OPr.PayperSupplier,0,OPr.Bankfees,a_blob,nrofpaym);
  end else begin
    BankExpDomesticTeleHansaArea(OPr,OPr.PayMethod,OPr.PayperSupplier,a_blob,nrofpaym);
  end;

  RecordNew(EPaymentQuer);
  EPaymentQuer.Type = 0;
  EPaymentQuer.OPSerNr = OPr.SerNr;
  EPaymentQuer.CorspOPRows = "";
  EPaymentQuer.PaymentFormat = "TELEHANSA";
  EPaymentQuer.Partner = "HANSA";
  EPaymentQuer.DBID = DatabaseID;
  EPaymentQuer.CompID = CreateCompID;
  EPaymentQuer.NrOfPayments = nrofpaym;

  SetRecordBlob(EPaymentQuer,"Math",a_blob);

  aEPaymentQuer[aepcnt] = EPaymentQuer;
  aepcnt = aepcnt + 1;

  res = true;
  BankExpTeleHansa_EPaymentQueVc = res;
  return;
end;

function Boolean BankExpSwedbank_EPaymentQueVc(record OPVc OPr,record BankVc Bankr,Integer ctype,var Array record EPaymentQueVc aEPaymentQuer,var Integer aepcnt)
begin
  Boolean res;
  record EPaymentQueVc EPaymentQuer;
  Area a_blob;
  string 255 rerror;
  Integer nrofpaym;
    
  if (OPr.ForeignPayment!=0) then begin
    BankExpForeignSwedBankArea(OPr,OPr.PayMethod,OPr.PayperSupplier,ctype,a_blob,nrofpaym,rerror);
  end else begin
//    BankExpDomesticSwedBankArea(OPr,OPr.PayMethod,OPr.PayperSupplier,ctype,a_blob,nrofpaym,rerror);
    BankExpEstonia6SwedbankArea(OPr,OPr.PayMethod,OPr.Bankfees,OPr.PayperSupplier,a_blob,nrofpaym,rerror);
  end;

//LogText(0,"BankExpEstonia6SwedbankArea koond " & koond & " rwcnt " & rwcnt);

  if (nrofpaym>0) then begin
    WriteAreaToFile(a_blob,"epaymessage.txt",0);
    RecordNew(EPaymentQuer);
    EPaymentQuer.Type = 0;
    EPaymentQuer.OPSerNr = OPr.SerNr;
    EPaymentQuer.CorspOPRows = "";
    EPaymentQuer.PaymentFormat = "TELEHANSA";
    EPaymentQuer.Partner = "SWEDBANK";
    EPaymentQuer.DBID = DatabaseID;
    EPaymentQuer.CompID = CreateCompID;
    EPaymentQuer.NrOfPayments = nrofpaym;

    SetRecordBlob(EPaymentQuer,"Math",a_blob);

    aEPaymentQuer[aepcnt] = EPaymentQuer;
    aepcnt = aepcnt + 1;

    res = true;
  end else begin
    res = false;
  end;
  BankExpSwedbank_EPaymentQueVc = res;
  return;
end;

function Boolean BankExpRiigikassa_EPaymentQueVc(record OPVc OPr,record BankVc Bankr,var Array record EPaymentQueVc aEPaymentQuer,var Integer aepcnt)
begin
  Boolean res;
  record EPaymentQueVc EPaymentQuer;
  Area a_blob;
  Integer nrofpaym;
  
  BankExpDomesticRiigikassaArea(OPr,OPr.PayMethod,OPr.Bankfees,4,a_blob,nrofpaym);

  RecordNew(EPaymentQuer);
  EPaymentQuer.Type = 0;
  EPaymentQuer.OPSerNr = OPr.SerNr;
  EPaymentQuer.CorspOPRows = "";
  EPaymentQuer.PaymentFormat = "Riigikassa";
  EPaymentQuer.Partner = "RKASSA";
  EPaymentQuer.DBID = DatabaseID;
  EPaymentQuer.CompID = CreateCompID;
  EPaymentQuer.NrOfPayments = nrofpaym;

  SetRecordBlob(EPaymentQuer,"Math",a_blob);

  aEPaymentQuer[aepcnt] = EPaymentQuer;
  aepcnt = aepcnt + 1;

  res = true;
  BankExpRiigikassa_EPaymentQueVc = res;
  return;
end;

global
function Boolean BankPayment_EPaymentQueVc(LongInt OPSerNr,record BankVc Bankr,var Array record EPaymentQueVc aEPaymentQuer,var Integer aepcnt)
begin
  Boolean res;
  record OPVc OPr;
  
  OPr.SerNr = OPSerNr;
  if (ReadFirstMain(OPr,1,true)) then begin
//    if (OPr.DoneFlag==0) and (OPr.OrderedFlag==0) then begin
      switch (Bankr.Bank) begin
        case 80: res = BankExpEstoniaSEB_EPaymentQueVc(OPr,Bankr,aEPaymentQuer,aepcnt);
        case 16: res = BankExpTeleHansa_EPaymentQueVc(OPr,Bankr,aEPaymentQuer,aepcnt);
        case 82: res = BankExpSwedbank_EPaymentQueVc(OPr,Bankr,1,aEPaymentQuer,aepcnt);
        case 19: res = BankExpRiigikassa_EPaymentQueVc(OPr,Bankr,aEPaymentQuer,aepcnt);
        case 32: res = BankExpSwedbank_EPaymentQueVc(OPr,Bankr,0,aEPaymentQuer,aepcnt);
      end;
//    end;
  end;
  BankPayment_EPaymentQueVc = res;
  return;
end;
