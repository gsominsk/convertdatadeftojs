external function val FindCostPrice(string,string,string,val,val,Boolean);
external function val GetStockQty(string,string,Date,Boolean);

global
procedure InvValEn(record RcVc RepSpec)
begin
  record INVc INr;
  record LocationVc Locr;
  string 255 frcc,tocc;
  string 255 fromart,toart;
  boolean TrHs,TrHs2,testf;
  val instock;
  val value, salesp, costp;
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  frcc = FirstInRange(RepSpec.f3,20);
  tocc = LastInRange(RepSpec.f3,20);
  TrHs = true;
  INr.Code = fromart;
  if (RepSpec.flags[3] == 1) then begin
    ExportString(USetStr(2325));
    ExportString(USetStr(2326));
    ExportString(USetStr(2327));
    ExportString(USetStr(8600));
    ExportString(USetStr(2337));
    if (RepSpec.ArtMode==1) then begin
      ExportString(USetStr(5010));
    end;
    ExportString(USetStr(5024));
    ExportString(USetStr(7683));
    ExportString(USetStr(7684));
    ExportString(USetStr(2332));
    ExportString(USetStr(8601));
    ExportString(USetStr(2474));
    NewLine;
  end;
  while (LoopMain(INr,1,TrHs))   begin
    instock = 0;
    testf = true;
    if (TrHs == true) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group > tocc) then begin
          if (RepSpec.flags[2] == 1) then begin  
            TrHs = false;
          end else begin
            testf = false;
          end;
        end;
      end;
    end;
    if (TrHs == true) then begin
      if (nonblank(toart)) then begin
        if (INr.Code > toart) then begin
          if (Repspec.flags[2]==0) then begin
             TrHs = false;
          end else begin
             testf = false;
          end;
        end;
      end;
    end;
    if (TrHs == true) then begin
      if (nonblank(RepSpec.f3)) then begin
        if (INr.Group < frcc) then begin
          testf = false;
        end;
      end;
    end;
    Locr.Code = RepSpec.f2;
    if (TrHs) then begin    
      TrHs2 = true;
    end else begin
      TrHs2 = false;
    end;
    if (testf) then begin    
      TrHs2 = true;
    end else begin
      TrHs2 = false;
    end;
    ResetLoop(Locr);
    while (LoopMain(Locr,1,TrHs2)) begin
      testf = true;
      if (RepSpec.ArtMode==0) then begin
        if (blank(RepSpec.f2)) then begin
          Locr.Code = "";
        end;
      end;
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2 <> Locr.Code) then begin
          TrHs2 = false;
        end;
      end;
      if (TrHs == true) then begin
        if (INr.ItemType == 1) then begin
          instock = GetStockQty(INr.Code,Locr.Code,RepSpec.d1,false);
          if (RepSpec.UsedOnly==1) then begin
            if (instock==0) then begin
              testf = false;
            end;
          end;
        end else begin
          testf = false;
        end;
      end;
      if (TrHs==false) then begin
        testf = false;
      end;
      if (TrHs2==false) then begin
        testf = false;
      end;
      if (testf == true) then begin
        If (RepSpec.flags[11] == 0) then begin
          salesp = INr.UPrice1;
          value = FindCostPrice(INr.Code,Locr.Code,"",instock,0,false);
          costp = value / instock;
        end;
        If (RepSpec.flags[11] == 1) then begin
          value = INr.UPrice1 * instock;
          costp = INr.InPrice;
          salesp = INr.UPrice1;
        end;
        If (RepSpec.flags[11] == 2) then begin
          value = INr.InPrice * instock;
          costp = INr.InPrice;
          salesp = INr.UPrice1;
        end;
        ExportString(INr.Code);
        ExportString(INr.Name);
        ExportString(INr.Unittext);
        ExportString(INr.BarCode);
        ExportString(INr.VATCode);
        if (RepSpec.ArtMode==1) then begin
          ExportString(Locr.Code);
        end;
        ExportVal(instock,M4UVal);
        ExportVal(costp,M4UVal);
        ExportVal(salesp,M4UVal);
        ExportVal(value,M4UVal);
        ExportLongInt(INr.ChangePrice);
        ExportString(INr.Group);
        UserTrace(INr.Code,0);      
        NewLine;
          if (RepSpec.ArtMode==0) then begin
            TrHs2 = false;
          end;
      end;
    end;
  end;
return;
END;
