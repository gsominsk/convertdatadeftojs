// - Check whether payment has only one supplier specified
function Boolean CheckSupplier(longint sernr)
begin
  boolean res;
  record OPVc OPr;
  row OPVc OPrw;
  integer i, rwcnt, cnt;
  string 20 VECode;

  res = true;
  cnt = 0;
  VECode = "";
  OPr.SerNr = sernr;
  if (ReadFirstMain(OPr,1,true)) then begin
    rwcnt = MatRowCnt(OPr);
    for (i = 0; i < rwcnt; i = i + 1) begin
      MatRowGet(OPr, i, OPrw);
      if (nonblank(OPrw.VECode)) then begin
        if (VECode <> OPrw.VECode) then begin
          VECode = OPrw.VECode;
          cnt = cnt + 1;
        end;
        if (cnt > 1) then begin
          // - at least two different suppliers used in payment
          res = false;
          goto LCheckSup;
        end;
      end;
    end;
  end;
LCheckSup:;
  CheckSupplier = res;
  return;
end;

procedure ExportLen(string str, integer length)
begin
  if (BytesInString(str) > length) then begin
    ExportString(Left(str, length));
  end else begin
    ExportString(str);
  end;
  return;
end;

global
procedure BankLithuania1(Record RcVc RepSpec, record OPVc OPr)
begin
  record CYBlock CompIn;
  record CUVc VEr;
  record BankVC Bankr;
  row OPVc OPrw;
  integer i, rwcnt, rw, m, mrwcnt;
  boolean printf;
  boolean international;
  string 255 tstr, ckey;
  string 255 our_code, GKodas, GKodas2, payment_code;
  string 255 our_name, GVardas, GAdresas1, GAdresas2;
  string 35 our_acc, GSaskaita;
  string 3 currency;
  string 34 GBKodas;
  string 35 GBPavadinimas, GBSWIFT, GBAdr1, GBAdr2;
  string 140 Paskirtis;
  val sum;

  rw = 1;
  printf = false;
  international = false;
  if (RepSpec.flags[2] == 1) then begin
    international = true;
  end;
  BlockLoad(CompIn);
  our_code = CompIn.OrgNr;
  our_name = CompIn.CompName;
  printf = CheckSupplier(OPr.SerNr); // - skip if payment includes multiple receivers

  if (printf) then begin
    if (nonblank(OPr.BankAcc)) then begin
      our_acc = OPr.BankAcc;
    end else begin
      our_acc = CompIn.Bank2;
    end;

    currency = "LTL";
    if (OPr.PayCurCode <> "") then begin
      currency = OPr.PayCurCode;
    end;

    if (currency == "") then begin
      currency ="LTL";
    end;
    Paskirtis = "";
    sum = OPr.CurPayVal;

    if (sum > 0) then begin
      rwcnt = MatRowCnt(OPr);
      for (i = 0; i < rwcnt; i = i + 1) begin
        MatRowGet(OPr, i, OPrw);
        tstr = FirstInRange(OPrw.Comment, 200);
        if (nonblank(tstr)) then begin
          // - Pirk. kn.>>Registrai>>Mokejimas>>Tekstas
          if (blank(Paskirtis)) then begin
            Paskirtis = tstr;
          end else begin
            if (((Len(Paskirtis) + Len(tstr)) < 138)) then begin
              Paskirtis = Paskirtis & ", " & tstr;
            end;
          end;
        end;
        if (OPrw.stp == 1) then begin
          printf = true;
          if (sum <= 0) then begin
            printf = false;
          end;
          if (nonblank(OPrw.BankFeeVal)) then begin
            sum = sum - OPrw.BankFeeVal;
          end;
          if (printf) then begin
            GSaskaita = OPrw.BankAcc;
            VEr.Code = OPrw.VECode;
            if (ReadFirstMain(VEr, 1, true)) then begin
              if (nonblank(VEr.VEInvoiceToCode)) then begin
                VEr.Code = VEr.VEInvoiceToCode;
                if (!ReadFirstMain(VEr, 1, true)) then begin
                end;
              end;
              GKodas2 = VEr.Code;
              GKodas = VEr.RegNr1;
              GVardas = VEr.Name;
              GAdresas1 = VEr.InvAddr0;
              GAdresas2 = VEr.InvAddr1;
              payment_code = VEr.VECustID;
              Bankr.Code = VEr.AccOperator;
              if (ReadFirstMain(Bankr, 1, true)) then begin
                GBKodas = Bankr.Nr1;
                GBPavadinimas = Bankr.Name;
                GBSWIFT = Bankr.SWIFT;
                GBAdr1 = Bankr.Address0;
                GBAdr2 = Bankr.Address1;
              end;
            end;
          end;
        end;
      end;
      if (rw > 1) then begin
        NewLine;
      end;
      if (international == false) then begin
        // - 1. Numeris C10*
        ExportLen(OPr.SerNr, 10);

        // - 2. Data C8*
        ExportString(DateToString(OPr.PayDate,"YYYYMMDD"));

        // - 3. Operacijos atlikimo banke data C8*
        ExportString(DateToString(OPr.TransDate,"YYYYMMDD"));

        // - 3. Mokejimo rusis (Prioritetas) N1*
        if (RepSpec.flags[3] == 0) then begin
          ExportString("1"); // Paprastas
        end else begin
          ExportString("2"); // Skubus
        end;

        // - 4. Moketojo saskaitos nr. C35*
        ExportLen(our_acc, 35);

        // - 5. Moketojo vardas ir pavarde / pavadinimas C200*
        ExportLen(our_name, 200);

        // - 6. Moketojo asmens kodas / registracijos nr. C11
        ExportLen(our_code, 11);

        // - 7. Moketojo kredito istaiga C11
        ExportString("");

        // - 8. Kliento kodas gavejo informacineje sistemoje C16
        ExportString("");

        // - 9. Pradinio moketojo saskaitos nr. C35
        ExportString("");

        // - 10. Pradinio moketojo vardas ir pavarde / pavadinimas C140
        ExportString("");

        // - 11. Pradinio moketojo asmens kodas / registracijos nr. C11
        ExportString("");

        // - 12. Gavejo saskaitos nr. C35*
        ExportLen(GSaskaita, 35);

        // - 13. Gavejo vardas ir pavarde / pavadinimas C200*
        ExportLen(GVardas, 200);

        // - 14. Gavejo asmens kodas / registracijos nr. C11
        ExportLen(GKodas, 11);

        // - 15. Gavejo kredito istaiga C11
        ExportString("");

        // - 16. Kliento kodas moketojo informacineje sistemoje C16
        ExportLen(GKodas2, 16);

        // - 17. Galutinio gavejo saskaitos nr. C35
        ExportString("");

        // - 18. Galutinio gavejo vardas ir pavarde / pavadinimas C140
        ExportString("");

        // - 19. Galutinio gavejo asmens kodas / registracijos nr. C11
        ExportString("");

        // - 20. Suma N14*
        tstr = ValToString(sum, M4Val, "", "", 0);
        ExportLen(tstr, 14);

        // - 21. Valiutos kodas C3*
        ExportLen(currency, 3);

        // - 22. Imokos kodas C28
        ExportLen(payment_code, 28);

        // - 23. Mokejimo paskirtis C300*
        ExportLen(Paskirtis, 300);

        // - 24. Archyvo kodas C50
        ExportString("");
      end else begin
        // - 1. Numeris C10*
        ExportLen(OPr.SerNr, 10);

        // - 2. Data C8*
        ExportString(DateToString(OPr.PayDate,"YYYYMMDD"));

        // - 3. Operacijos atlikimo banke data C8*
        ExportString(DateToString(OPr.TransDate,"YYYYMMDD"));

        // - 3. Mokejimo rusis (prioritetas) N1*
        if (RepSpec.flags[3] == 0) then begin
          tstr = "1"; // Paprastas
        end;
        if (RepSpec.flags[3] == 1) then begin
          tstr = "2"; // Skubus
        end;
        if (RepSpec.flags[3] == 2) then begin
          tstr = "3"; // Labai skubus
        end;
        ExportString(tstr);

        // - 4. Valiuta C3*
        ExportLen(currency, 3);

        // - 5. Debeto valiuta C3
        ExportString("");

        // - 6. Suma N14*
        tstr = ValToString(sum, M4Val, "", "", 0);
        ExportLen(tstr, 14);

        // - 7. Moketojo saskaita C35*
        ExportLen(our_acc, 35);

        // - 8. Kredito istaigos, kurios prasymu vykdomas pavedimas, BIC C11
        ExportString("");

        // - 9. Korespondentinio banko SWIFT C11
        ExportString("");

        // - 10. Gavejo banko saskaita korespondentiniame banke C34
        ExportString("");

        // - 11. Korespondentinio banko pavadinimas 1 C35
        ExportString("");

        // - 12. Korespondentinio banko pavadinimas 2 C35
        ExportString("");

        // - 13. Korespondentinio banko adresas 1 C35
        ExportString("");

        // - 14. Korespondentinio banko adresas 2 C35
        ExportString("");

        // - 15. Gavejo banko SWIFT C11
        ExportLen(GBSWIFT, 35);

        // - 16. Gavejo banko kodas C34
        ExportLen(GBKodas, 34);

        // - 17. Gavejo banko pavadinimas 1 C35*
        ExportLen(GBPavadinimas, 35);

        // - 18. Gavejo banko pavadinimas 2 C35
        ExportString("");

        // - 19. Gavejo banko adresas 1 C35
        ExportLen(GBAdr1, 35);

        // - 20. Gavejo banko adresas 2 C35
        ExportLen(GBAdr2, 35);

        // - 21. Gavejo saskaita C35*
        ExportLen(GSaskaita, 35);

        // - 22. Gavejo pavadinimas 1 C35*
        ExportLen(GVardas, 35);

        // - 23. Gavejo pavadinimas 2 C35
        ExportString("");

        // - 24. Gavejo adresas 1 C35
        ExportLen(GAdresas1, 35);

        // - 25. Gavejo adresas 2 C35
        ExportLen(GAdresas2, 35);

        // - 26. Mokejimo ypatumai 1 C35
        if (nonblank(Paskirtis)) then begin
          ExportString(Mid(Paskirtis, 0, 35));
        end else begin
          ExportString("");
        end;

        // - 27. Mokejimo ypatumai 2 C35
        if (Len(Paskirtis) > 35) then begin
          ExportString(Mid(Paskirtis, 35, 35));
        end else begin
          ExportString("");
        end;

        // - 28. Mokejimo ypatumai 3 C35
        if (Len(Paskirtis) > 70) then begin
          ExportString(Mid(Paskirtis, 70, 35));
        end else begin
          ExportString("");
        end;

        // - 29. Mokejimo ypatumai 4 C35
        if (Len(Paskirtis) > 105) then begin
          ExportString(Mid(Paskirtis, 105, 35));
        end else begin
          ExportString("");
        end;

        // - 30. Uzsienio banko mokesciai C1
        tstr = "";
        if (RepSpec.flags[4] == 0) then begin tstr = "1"; end; // - we pay
        if (RepSpec.flags[4] == 1) then begin tstr = "3"; end; // - supplier pays
        if (RepSpec.flags[4] == 2) then begin tstr = "2"; end; // - shared
        ExportString(tstr);

        // - 31. Gaveja informuoti teleksu C1
        ExportString("");

        // - 32. Gaveja informuoti telefonu C1
        ExportString("");

        // - 33. Telefono numeris informavimui C20
        ExportString("");

        // - 34. Komisiniu mokesciu saskaita C20
        ExportString("");

        // - 35. Komisiniu mokesciu saskaitos valiutos raidinis kodas C3
        ExportString("");

        // - 36. Banko tarpininko SWIFT C11
        ExportString("");

        // - 37. Banko tarpininko pavadinimas C70
        ExportString("");

        // - 38. Banko tarpininko saskaita C35
        ExportString("");

        // - 39. Archyvo kodas C50
        ExportString("");
      end;

      rw = rw + 1;
      NewLine;
   end; // if sum > 0
  end; // if printf

  return;
end;
