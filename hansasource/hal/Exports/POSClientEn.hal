external function val FormulaDiscountCalcSum(val,val,val,string);
external function string 255 CreateInvoiceNumber(LongInt,string);
external procedure IVCashSumup(var record IVCashVc,Boolean);
external procedure CalcSum(val,val,val,val,var val,Integer);

procedure NewSumIVCashr(record IVCashVc POSr,var record IVCashVc SumIVCashr)
BEGIN
  Integer i,rwcnt;

  RecordNew(SumIVCashr);
  RecordCopy(SumIVCashr,POSr);

  SumIVCashr.OKFlag = 1;
  SumIVCashr.UpdStockFlag = 0;
  SumIVCashr.Prntdf = 0;
  SumIVCashr.NLFlag = 0;
  SumIVCashr.TransTime = CurrentTime;
  SumIVCashr.TransDate = CurrentDate;
  SumIVCashr.InvDate = CurrentDate;
  SumIVCashr.Objects = "";
  SumIVCashr.Sum0 = blankval;
  SumIVCashr.Sum1 = blankval;
  SumIVCashr.Sum2 = blankval;
  SumIVCashr.Sum3 = blankval;
  SumIVCashr.Sum4 = blankval;
  SumIVCashr.TotGP = blankval;
  SumIVCashr.RecValue = blankval;
  SumIVCashr.RetValue = blankval;  
  SumIVCashr.CashValue = blankval;
  SumIVCashr.BaseSum4 = blankval;
  SumIVCashr.TotQty = blankval;
  SumIVCashr.TotWeight = blankval;
  SumIVCashr.TotVolume = blankval;    
  SumIVCashr.RecValue2 = blankval;    
  SumIVCashr.CashValueB2 = blankval;    
  SumIVCashr.RetValueB2 = blankval;    
  SumIVCashr.CashValueCur = blankval;    
  SumIVCashr.RetValueCur = blankval;  
  rwcnt = MatRowCnt(SumIVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(SumIVCashr,i);
    rwcnt = MatRowCnt(SumIVCashr);
    i=i-1;
  end;
  RETURN;
END;

procedure PrintIVRecord(record IVVc IVr)
BEGIN
  RETURN;
END;

procedure PrintIVCashRecord(record IVCashVc IVCashr)
BEGIN
  Integer i,rwcnt;
  row IVCashVc IVCashrw;

  StartFormat(15);
  OutString(0,0,CreateInvoiceNumber(IVCashr.SerNr,""),false);
  OutDate(130,0,IVCashr.InvDate,false);
  OutDate(220,0,IVCashr.PayDate,false);
  OutVal(480,0,IVCashr.Sum4,M4Val,true);
  EndFormat;
  StartFormat(15);
  OutString(50,0,IVCashr.CustCode,false);
  OutString(220,0,IVCashr.Addr0,false);
  EndFormat;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if ((IVCashrw.stp==1) or (IVCashrw.stp==4)) then begin
      StartFormat(15);
      OutString(20,0,IVCashrw.ArtCode,false);
      OutVal(104,0,IVCashrw.Quant,M4UVal,true);
      OutString(110,0,IVCashrw.Spec,false);
      OutVal(350,0,IVCashrw.Price,M423Val,true);
      OutString(380,0,IVCashrw.vRebate,true);
      OutVal(460,0,IVCashrw.Sum,M4Val,true);
      OutString(480,0,IVCashrw.VATCode,true);
      EndFormat;
    end;   
  end;
  Gray_Divider(0,1);
  RETURN;
END;

procedure ExportSumIVCashRecord(record IVCashVc SumIVCashr,var Boolean firstf,Integer exportf)
BEGIN
  row IVCashVc SumIVCashrw;
  Integer i,rwcnt;

  if (exportf==1) then begin
  if (firstf) then begin
    ExportString("IVCashVc");
    NewLine;
    firstf = false;
  end;
  ExportString("S");
  ExportDate(SumIVCashr.InvDate);
  ExportString(SumIVCashr.CustCode);
  ExportString(SumIVCashr.Addr0);
  ExportString(SumIVCashr.Addr1);
  ExportString(SumIVCashr.Addr2);
  ExportString(SumIVCashr.Addr3);
  ExportString(SumIVCashr.CustCat);
  ExportLongInt(SumIVCashr.OKFlag);
  ExportLongInt(SumIVCashr.ARonTR);
  ExportLongInt(SumIVCashr.UpdStockFlag);
  ExportLongInt(SumIVCashr.ExportedFlag);
  ExportLongInt(SumIVCashr.InclVAT);
  ExportDate(SumIVCashr.PayDate);
  ExportDate(SumIVCashr.TransDate);
  ExportString(SumIVCashr.OurContact);
  ExportString(SumIVCashr.ClientContact);
  ExportString(SumIVCashr.SalesMan);
  ExportString(SumIVCashr.PayDeal);
  ExportVal(SumIVCashr.RecValue,M4Val);
  ExportVal(SumIVCashr.RetValue,M4Val);
  ExportVal(SumIVCashr.Sum0,M4Val);
  ExportVal(SumIVCashr.Sum1,M4Val);
  ExportVal(SumIVCashr.Sum2,M4Val);
  ExportVal(SumIVCashr.Sum3,M4Val);
  ExportVal(SumIVCashr.Sum4,M4Val);
  ExportString(SumIVCashr.VATNr);
  ExportVal(SumIVCashr.BaseSum4,M4Val);
  ExportVal(SumIVCashr.FrRate,M4Rate);
  ExportVal(SumIVCashr.ToRateB1,M4Rate);
  ExportVal(SumIVCashr.ToRateB2,M4Rate);
  ExportVal(SumIVCashr.BaseRate1,M4Rate);
  ExportVal(SumIVCashr.BaseRate2,M4Rate);
  ExportString(SumIVCashr.CurncyCode);
  ExportString(SumIVCashr.LangCode);
  ExportString(SumIVCashr.CustOrdNr);
  ExportString(SumIVCashr.PriceList);
  ExportString(SumIVCashr.CustVATCode);
  ExportString(SumIVCashr.RebCode);
  ExportString(SumIVCashr.CreditCard);
  ExportString(SumIVCashr.AuthorizationCode);
  ExportString(SumIVCashr.InvComment);
  ExportVal(SumIVCashr.LocOKNr,M4Qty);
  ExportLongInt(SumIVCashr.Invalid);
  ExportLongInt(SumIVCashr.Prntdf);
  ExportLongInt(SumIVCashr.pdays);
  ExportVal(SumIVCashr.pdvrebt,M4Val);
  ExportLongInt(SumIVCashr.pdrdays);
  ExportVal(SumIVCashr.TotGP,M4Val);
  ExportString(SumIVCashr.Objects);
  ExportString(SumIVCashr.Location);
  ExportString(SumIVCashr.ARAcc);
  ExportLongInt(SumIVCashr.POSNr);
  ExportString(SumIVCashr.TransTime);
  ExportLongInt(SumIVCashr.NLFlag);
  ExportVal(SumIVCashr.CashValue,M4Val);
  ExportString(SumIVCashr.PayDeal2);
  ExportVal(SumIVCashr.RecValue2,M4Val);
  ExportString(SumIVCashr.CreditCard2);
  ExportString(SumIVCashr.AuthorizationCode2);
  ExportVal(SumIVCashr.TotQty,M4Qty);
  ExportVal(SumIVCashr.TotWeight,M4Qty);
  ExportVal(SumIVCashr.TotVolume,M4Qty);
  ExportString(SumIVCashr.LocalMachineCode);
  ExportString(SumIVCashr.InvAddr3);
  ExportString(SumIVCashr.InvAddr4);
  ExportString(SumIVCashr.DelAddrCode);
  ExportVal(SumIVCashr.CashValueB2,M4Val);
  ExportVal(SumIVCashr.RetValueB2,M4Val);
  ExportVal(SumIVCashr.CashValueCur,M4Val);
  ExportVal(SumIVCashr.RetValueCur,M4Val);
  ExportString(SumIVCashr.POSCurncyCode);
  ExportVal(SumIVCashr.TAX1Sum,M4Val);
  NewLine;
  rwcnt = MatRowCnt(SumIVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SumIVCashr,i,SumIVCashrw);
    ExportLongInt(SumIVCashrw.stp);
    ExportString(SumIVCashrw.ArtCode);
    ExportVal(SumIVCashrw.Quant,M4UVal);
    ExportVal(SumIVCashrw.Price,M423Val);
    ExportVal(SumIVCashrw.Sum,M4Val);
    ExportString(SumIVCashrw.vRebate);
    ExportString(SumIVCashrw.SalesAcc);
    ExportString(SumIVCashrw.Objects);
    ExportVal(SumIVCashrw.BasePrice,M4Val);
    ExportVal(SumIVCashrw.rowGP,M4Val);
    ExportVal(SumIVCashrw.FIFO,M45Val);
    ExportString(SumIVCashrw.Spec);
    ExportString(SumIVCashrw.VATCode);
    ExportString(SumIVCashrw.Recepy);
    ExportString(SumIVCashrw.SerialNr);
    ExportVal(SumIVCashrw.PriceFactor,M45Val);
    ExportVal(SumIVCashrw.FIFORowVal,M45Val);
    ExportVal(SumIVCashrw.Coefficient,M45Val);
    ExportString(SumIVCashrw.ExciseNr);
    NewLine;
  end;
  NewLine;  
  end else begin
    PrintIVCashRecord(SumIVCashr);
  end;
  RETURN;
END;

procedure ExportarrIVCashRecord(Array record IVCashVc arrIVCashr,Integer arrcnt,var Boolean firstf,Integer exportf)
BEGIN
  Integer arri;
  
  for (arri=0;arri<=arrcnt;arri=arri+1) begin
    if (exportf==1) then begin
      ExportSumIVCashRecord(arrIVCashr[arri],firstf,exportf);
    end else begin
//      PrintIVCashRecord(SumIVCashr);
    end;
  end;
  RETURN;
END;

procedure AddToSumIVCashr(record IVCashVc POSr,record IVCashVc SumIVCashr,var Boolean firstf,Integer exportf)
BEGIN
  row IVCashVc POSrw;
  row IVCashVc SumIVCashrw;
  Integer si,srwcnt;
  Integer i,rwcnt,arri;
  val t;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  srwcnt = MatRowCnt(SumIVCashr);
  rwcnt = MatRowCnt(POSr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSr,i,POSrw);
    for (si=0;si<srwcnt;si=si+1) begin
      MatRowGet(SumIVCashr,si,SumIVCashrw);
      if ((POSrw.ArtCode==SumIVCashrw.ArtCode) and (POSrw.vRebate==SumIVCashrw.vRebate) and
          (POSrw.Price==SumIVCashrw.Price)) then begin
        SumIVCashrw.Quant = SumIVCashrw.Quant + POSrw.Quant;
//        CalcSum(SumIVCashrw.Quant,SumIVCashrw.Price,SumIVCashrw.PriceFactor,SumIVCashrw.vRebate,t,GenOptRec.UseDiscount);
        t = FormulaDiscountCalcSum(SumIVCashrw.Quant,SumIVCashrw.Price,SumIVCashrw.PriceFactor,SumIVCashrw.vRebate);
        SumIVCashrw.Sum = t;
        MatRowPut(SumIVCashr,si,SumIVCashrw);
        goto LAddToSumIVCashrROW;
      end;
    end;
    CopyRow(SumIVCashr,POSrw,SumIVCashrw);
    MatRowPut(SumIVCashr,srwcnt,SumIVCashrw);
    srwcnt = srwcnt + 1;
    if (srwcnt>=199) then begin    
      IVCashSumup(SumIVCashr,true);
      ExportSumIVCashRecord(SumIVCashr,firstf,exportf);
      NewSumIVCashr(POSr,SumIVCashr);
      srwcnt = MatRowCnt(SumIVCashr);
    end;    
LAddToSumIVCashrROW:;  
  end;
  RETURN;
END;

function
Boolean CheckIVCashExists(record IVCashVc POSr,record IVCashVc SumIVCashr)
BEGIN
  Boolean res,testf;
  
  testf = true;
  if (POSr.CustCode!=SumIVCashr.CustCode) then begin
    testf = false;
  end;
  if (POSr.PayDeal!=SumIVCashr.PayDeal) then begin
    testf = false;
  end;
  if (POSr.PayDeal2!=SumIVCashr.PayDeal2) then begin
    testf = false;
  end;
  if (POSr.CreditCard!=SumIVCashr.CreditCard) then begin
    testf = false;
  end;
  if (POSr.CreditCard2!=SumIVCashr.CreditCard2) then begin
    testf = false;
  end;
  if (POSr.Objects!=SumIVCashr.Objects) then begin
    testf = false;
  end;
  if (POSr.SalesMan!=SumIVCashr.SalesMan) then begin
    testf = false;
  end;
  if (POSr.CurncyCode!=SumIVCashr.CurncyCode) then begin
    testf = false;
  end;
  if (testf) then begin
    res = true;
  end;
  CheckIVCashExists = res;
  RETURN;
END;

procedure AddToSumIVCashrArr(record IVCashVc POSr,Array record IVCashVc arrIVCashr,var Boolean firstf,Integer exportf,var Integer arrcnt)
BEGIN
  row IVCashVc POSrw;
  row IVCashVc SumIVCashrw;
  Integer si,srwcnt;
  Integer i,rwcnt,arri;
  val t;
  
  for (arri=0;arri<=arrcnt;arri=arri+1) begin
    if (CheckIVCashExists(POSr,arrIVCashr[i])) then begin
      AddToSumIVCashr(POSr,arrIVCashr[i],firstf,exportf);
      goto LAddToSumIVCashrArr;
    end;
  end;
  arrcnt = arrcnt + 1;
  NewSumIVCashr(POSr,arrIVCashr[arrcnt]);  
LAddToSumIVCashrArr:;  
  RETURN;
END;

function
Boolean CheckifExported(LongInt SerNr,Integer arrcnt,Array LongInt aexpsernr)
BEGIN
  Boolean res;
  Integer i;
  
  for (i=0;i<=arrcnt;i=i+1) begin
    if (SerNr==aexpsernr[i]) then begin
      res = true;
      goto LCheckifExported;
    end;
  end;
LCheckifExported:;  
  CheckifExported = res;
  RETURN;
END;

procedure AddToExported(LongInt SerNr,var Integer arrcnt,Array LongInt aexpsernr)
BEGIN
  arrcnt = arrcnt + 1;
  aexpsernr[arrcnt] = SerNr;
  RETURN;
END;

updating procedure ExportIVCashSum(record RcVc RepSpec)
BEGIN
  record IVCashVc POSr;
  record IVCashVc newPOSr;
  Boolean TrHs,testf;
  record IVCashVc SumIVCashr;
  string 30 keystr;
  Boolean sumposf;
  record CashierDefBlock CashierDefRec;
  Boolean firstf,newsumivf,noexportedfound;
  Integer arrcnt;
  Array LongInt aexpsernr;
  string 20 lastcucode;
  record CUVc CUr;
  Boolean CUTrHs;
  
  arrcnt = -1;
  firstf = true; 
  BlockLoad(CashierDefRec);
LLOOPAGAIN:;  
  noexportedfound = false;
  ResetLoop(CUr);
  CUr.Code = "";
  CUTrHs = true;
  while (LoopMain(CUr,1,CUTrHs)) begin
  newsumivf = true; 
  ResetLoop(POSr);
  POSr.CustCode = CUr.Code;  
  TrHs = true;
  keystr = "CustCode";
  while (LoopKey(keystr,POSr,1,TrHs)) begin
    if (POSr.CustCode!=CUr.Code) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (POSr.OKFlag==0) then begin
        testf = false;
      end;
      if (POSr.ExportedFlag!=0) then begin
        testf = false;
      end;
      if (testf) then begin
        if (CheckifExported(POSr.SerNr,arrcnt,aexpsernr)) then begin
          testf = false;
        end;
      end;      
      if (testf) then begin
        noexportedfound = true;
        if (RepSpec.flags[2]!=0) then begin
//          if (POSr.CustCode==CashierDefRec.DefCustCode) then begin
            sumposf = true;
//          end;
        end;    
        if (sumposf) then begin
          if (newsumivf) then begin
            NewSumIVCashr(POSr,SumIVCashr);
            newsumivf = false;
          end;
          if (CheckIVCashExists(POSr,SumIVCashr)) then begin
            AddToSumIVCashr(POSr,SumIVCashr,firstf,RepSpec.UsedOnly);
            AddToExported(POSr.SerNr,arrcnt,aexpsernr);
          end;
        end else begin
          if (RepSpec.UsedOnly==1) then begin
            if (firstf) then begin
              ExportString("IVCashVc");
              NewLine;
              firstf = false;
            end;
            ExportRecord(POSr);
            NewLine;
          end;
        end;
        IVCashSumup(SumIVCashr,true);
        if (RepSpec.UsedOnly==1) then begin
          RecordCopy(newPOSr,POSr);
          newPOSr.ExportedFlag = 1;
          if (RecordStore(newPOSr,true)) then begin end;
          StepBack(POSr);
        end else begin
          if (sumposf==false) then begin
            PrintIVCashRecord(POSr);
          end;
        end;
      end;
    end;
  end;
  if (MatRowCnt(SumIVCashr)>0) then begin
    IVCashSumup(SumIVCashr,true);
    ExportSumIVCashRecord(SumIVCashr,firstf,RepSpec.UsedOnly);
    RecordNew(SumIVCashr);
  end; 
  
  end;
  if (noexportedfound) then begin
    goto LLOOPAGAIN;
  end;
  RETURN;
END;

updating procedure ExportNewIV(record RcVc RepSpec)
BEGIN
  record IVVc IVr;
  record IVVc newIVr;
  Boolean TrHs,testf,firstf;
  
  firstf = true;
  IVr.ExportedFlag = 0;
  TrHs = true;
  while (LoopKey("ExportedFlag",IVr,1,TrHs)) begin
    if (IVr.ExportedFlag!=0) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (IVr.OKFlag==0) then begin
        testf = false;
      end;      
      if (testf) then begin
        if (RepSpec.UsedOnly==1) then begin
          if (firstf) then begin
            ExportString("fakt1");
            NewLine;
            firstf = false;
          end;
          ExportRecord(IVr);
          NewLine;
          RecordCopy(newIVr,IVr);
          newIVr.ExportedFlag = 1;
          if (RecordStore(newIVr,true)) then begin end;
        end else begin
          PrintIVRecord(IVr);
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure ExportIVCash(record RcVc RepSpec)
BEGIN
  record IVCashVc POSr;
  record IVCashVc newPOSr;
  Boolean TrHs,testf;
  record IVCashVc SumIVCashr;
  string 30 keystr;
  record CashierDefBlock CashierDefRec;
  Boolean firstf,newsumivf;
  
  firstf = true; 
  newsumivf = true; 
  BlockLoad(CashierDefRec);
  switch (RepSpec.flags[0]) begin
    case 0:
      keystr = "SerNr";
    case 1:
      keystr = "ExportedFlag";
      POSr.ExportedFlag = 0;
  end;
  TrHs = true;
  while (LoopKey(keystr,POSr,1,TrHs)) begin
    switch (RepSpec.flags[0]) begin
      case 1:
        if (POSr.ExportedFlag!=0) then begin
          TrHs = false;
        end;
    end;
    if (TrHs) then begin
      testf = true;
      if (POSr.OKFlag==0) then begin
        testf = false;
      end;      
      if (testf) then begin
        if (RepSpec.UsedOnly==1) then begin
          if (firstf) then begin
            ExportString("IVCashVc");
            NewLine;
            firstf = false;
          end;
          ExportRecord(POSr);
          NewLine;
          RecordCopy(newPOSr,POSr);
          newPOSr.ExportedFlag = 1;
          if (RecordStore(newPOSr,true)) then begin end;
          ResetLoop(POSr);
        end else begin
          PrintIVCashRecord(POSr);
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure IVCashIV(record RcVc RepSpec)
BEGIN
  if (RepSpec.flags[10]!=0) then begin
    if (RepSpec.flags[2]!=0) then begin  
      ExportIVCashSum(RepSpec);
    end else begin
      ExportIVCash(RepSpec);
    end;
  end;
  if (RepSpec.flags[11]!=0) then begin
    switch (RepSpec.flags[1]) begin
      case 0:
        RegisterExport("IVVc");
      case 1:
        ExportNewIV(RepSpec);
    end;
  end;
  RETURN;
END;

global
updating procedure POSClientEn(var record RcVc RepSpec)
BEGIN
  IVCashIV(RepSpec);
  RETURN;
END;

global
updating procedure POSClientRn(record RcVc RepSpec)
BEGIN
  StartReportJob("POS DATA EXPORT");//USetStr()
  EndHeader;
  IVCashIV(RepSpec);
  EndJob;
  RETURN;
END;
