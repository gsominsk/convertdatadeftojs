external function Boolean GetPMRow(string,var row PMBlock);external procedure NewLineExport();procedure DDAUSABAExportBegin(record RcVc RepSpec,record IPVc IPr)begin  row PMBlock PMrw;  record BankVc Bankr;  GetPMRow(IPr.PayMode,PMrw);  Bankr.Code = PMrw.BankCode;  ReadFirstMain(Bankr,1,true);  ExportPadString("0",1," ",false);  ExportPadString(" ",17," ",false);  ExportPadString("01",2," ",false);  ExportPadString(PMrw.BankCode,3," ",false);  ExportPadString(" ",7," ",false);  ExportPadString(PMrw.BankName,26," ",false);  ExportPadString(Bankr.DirectDebitSorting,6,"0",true);  ExportPadString(IPr.RecNumber,12," ",false);  ExportPadString(DateToString(IPr.TransDate,"DDMMYY"),6," ",false);  ExportPadString(" ",40," ",false);  NewLineExport;  return;end;procedure DDAUSABAExportOwnLine(record RcVc RepSpec,record IPVc IPr,var val TotSum,var LongInt TotNr)begin  row PMBlock PMrw;  record BankVc Bankr;  string 255 tstr;    GetPMRow(IPr.PayMode,PMrw);  Bankr.Code = PMrw.BankCode;  ReadFirstMain(Bankr,1,true);  ExportPadString("1",1," ",false);  ExportPadString(PMrw.SortCode,7," ",false);       ExportPadString(PMrw.BankNr,9," ",true);  ExportPadString(" ",1," ",false);  ExportPadString("50",2," ",false);  tstr = ValToString(TotSum*100,M4UVal,"","",0);  ExportPadString(tstr,10,"0",true);  ExportPadString(PMrw.BankName,32," ",false);  ExportPadString(IPr.RecNumber,18," ",false);  ExportPadString(PMrw.SortCode,7," ",false);       ExportPadString(PMrw.BankNr,9," ",false);       ExportPadString(PMrw.BankName,16," ",false);  ExportPadString("0",8,"0",true);  NewLineExport;  TotNr = TotNr + 1;  return;end;procedure DDAUSABAExportEnd(val TotSum,LongInt TotNr)begin  string 255 tstr;    ExportPadString("7",1," ",false);  ExportPadString("999-999",7," ",false);  ExportPadString(" ",12," ",false);  ExportPadString("0",10,"0",true);  tstr = ValToString(TotSum*100,M4UVal,"","",0);  ExportPadString(tstr,10,"0",true);  ExportPadString(tstr,10,"0",true);  ExportPadString(" ",24," ",false);  ExportPadString(TotNr,6,"0",true);  ExportPadString(" ",40," ",false);  NewLineExport;  return;end;procedure AddToCUArray(row IPVc IPrw,record CUVc CUr,var Array string acucode,var Array string acurcode,var Array string abankacc,var Array string abankref,var Integer acucnt)begin  Boolean res;  Integer i;    for (i=0;i<acucnt;i=i+1) begin    if ((acucode[i]==IPrw.CustCode) and (acurcode[i])==IPrw.BankCurncy) and (abankacc[i]==CUr.BankAccount) and (abankref[i]==IPrw.rkRecNumber) then begin      goto LAddToCUArray;    end;  end;  acucode[acucnt] = IPrw.CustCode;  acurcode[acucnt] = IPrw.BankCurncy;  abankacc[acucnt] = CUr.BankAccount;  abankref[acucnt] = IPrw.rkRecNumber;  acucnt = acucnt + 1;LAddToCUArray:;    return;end;function Boolean CUPaymentAlreadyDone(row IPVc IPrw,record CUVc CUr,var Array string acucode,var Array string acurcode,var Array string abankacc,var Array string abankref,var Integer acucnt)begin  Boolean res;  Integer i;    for (i=0;i<acucnt;i=i+1) begin    if ((acucode[i]==IPrw.CustCode) and (acurcode[i])==IPrw.BankCurncy) and (abankacc[i]==CUr.BankAccount) and (abankref[i]==IPrw.rkRecNumber) then begin      res = true;      goto LCUPaymentAlreadyDone;    end;  end;LCUPaymentAlreadyDone:;  CUPaymentAlreadyDone = res;    return;end;procedure DDAUSABAExportReceipt(record RcVc RepSpec,record IPVc IPr,var val TotSum,var LongInt TotNr)begin  record VIVc VIr;  record CUVc CUr;  record CUVc CU2r;  Integer i,j,rwcnt;  row IPVc IPrw;  row IPVc IP2rw;  Boolean testf;  string 255 tstr,comment;  Array string 50 acucode;  Array string 20 acurcode;  Array string 60 abankacc;  Array string 60 abankref;  Integer acucnt;  val bankval;  row PMBlock PMrw;  GetPMRow(IPr.PayMode,PMrw);  rwcnt = MatRowCnt(IPr);  for (i=0;i<rwcnt;i=i+1) begin    MatRowGet(IPr,i,IPrw);    if ((IPrw.stp==1) and (IPrw.ovst==0)) then begin      CUr.Code = IPrw.CustCode;      if (ReadFirstMain(CUr,1,true)) then begin end;      if (blank(CUr.BankAccount)) then begin goto LSKIPROW1; end;      if (RepSpec.flags[1]==0 or CUPaymentAlreadyDone(IPrw,CUr,acucode,acurcode,abankacc,abankref,acucnt)==false) then begin                comment = IPrw.Comment;        bankval = IPrw.BankVal;        if (RepSpec.flags[1]!=0) then begin          for (j=i+1;j<rwcnt;j=j+1) begin            MatRowGet(IPr,j,IP2rw);            if ((IP2rw.stp==1) and (IP2rw.ovst==0)) then begin              CU2r.Code = IP2rw.CustCode;              if (ReadFirstMain(CU2r,1,true)) then begin end;              if ((IP2rw.CustCode==IPrw.CustCode) and (IP2rw.BankCurncy==IPrw.BankCurncy) and (CU2r.BankAccount==CUr.BankAccount) and (IP2rw.rkRecNumber==IPrw.rkRecNumber)) then begin                bankval = bankval + IP2rw.BankVal;              end;            end;          end;        end;        ExportPadString("1",1," ",false);        ExportPadString(CUr.SortCode,7," ",false);             ExportPadString(CUr.BankAccount,9," ",true);        ExportPadString(" ",1," ",false);        ExportPadString("13",2," ",false);        tstr = ValToString(bankval*100,M4UVal,"","",0);        ExportPadString(tstr,10,"0",true);        ExportPadString(CUr.AccOperator,32," ",false);        ExportPadString(IPr.RecNumber,18," ",false);        ExportPadString(PMrw.SortCode,7," ",false);             ExportPadString(PMrw.BankNr,9," ",false);             ExportPadString(PMrw.BankName,16," ",false);        ExportPadString("0",8,"0",true);        NewLineExport;        TotNr = TotNr + 1;        TotSum = TotSum + bankval;        AddToCUArray(IPrw,CUr,acucode,acurcode,abankacc,abankref,acucnt);LSKIPROW1:;      end;    end;  end;  return;end;globalupdating procedure DirectDebitEn(record RcVc RepSpec)begin  record IPVc IPr;  Boolean found,testf,firstf;  LongInt frip,toip;  string 255 index;  record BankFileBlock BFb;  val TotSum;  LongInt TotNr;    TotNr = 0;  frip = FirstInRange(RepSpec.f1,10);  toip = LastInRange(RepSpec.f1,10);  BlockLoad(BFb);  if (BFb.DirectDebitBank==kDirectDebitBankNone) then begin    goto LDirectDebitEn;  end;  firstf = true;  found = true;  index = "TransDate";  if (nonblank(RepSpec.f1)) then begin    index = "SerNr";  end;  IPr.SerNr = frip;  IPr.TransDate = RepSpec.sStartDate;  while (LoopKey(index,IPr,1,found)) begin    if (nonblank(RepSpec.f1)) then begin      if (IPr.SerNr>toip) then begin found = false; end;    end else begin      if (DateInRange(IPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;    end;    if (found) then begin      testf = true;      if (DateInRange(IPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;      if (testf) then begin        switch (BFb.DirectDebitBank) begin          case kDirectDebitBankAUSABA:            if (firstf) then begin                     DDAUSABAExportBegin(RepSpec,IPr);               firstf = false;            end;            DDAUSABAExportReceipt(RepSpec,IPr,TotSum,TotNr);        end;        DDAUSABAExportOwnLine(RepSpec,IPr,TotSum,TotNr);      end;    end;  end;  switch (BFb.DirectDebitBank) begin    case kDirectDebitBankAUSABA:      DDAUSABAExportEnd(TotSum,TotNr);  end;LDirectDebitEn:;  return;end;