external function Integer DateGetIntMonth(Date);

global
procedure ICSEn(record RcVc RepSpec)
BEGIN
  record CUVc CUr;
  record CSVc CSr;
  record ICSVc ICSr;
  record INVc INr;
  string 20 fromcust,tocust;
  string 20 fromart,toart;
  string 255 tstr;
  Integer i,tmp;
  val s,q,gps,sum1,sum2,sum3;
  Boolean stfound;
  Boolean skipf,printedf;
  Boolean TrHs;
  Array val ICSMQuant;
  Array val ICSMGp;
  Array val ICSMBal;
  Date td;
  
//  RepSpec.sm1 = DateGetIntMonth(RepSpec.sStartDate);
//  RepSpec.em1 = DateGetIntMonth(RepSpec.sEndDate);
  
  fromart = FirstInRange(RepSpec.f1,20);
  toart = LastInRange(RepSpec.f1,20);
  fromcust = FirstInRange(RepSpec.f2,20);
  tocust = LastInRange(RepSpec.f2,20);
  CUr.Code = fromcust;
  TrHs = true;
  while (LoopKey("Code",CUr,1,TrHs)) begin
    if (TrHs) then begin
      skipf = false;
      if (nonblank(fromcust)) then begin
        if (CUr.Code<fromcust) then begin skipf = true; end;
      end;  
      if (nonblank(tocust)) then begin
        if (CUr.Code>tocust) then begin skipf = true; end;
      end;  
    end;
    if (CUr.CUType==0) then begin skipf = true; end;
    if (skipf==false) then begin
      skipf = true;
      s = 0;
      q = 0;
      gps = 0;
      sum1 = 0;
      sum2 = 0;
      sum3 = 0;
      ResetLoop(ICSr);
      ICSr.CustCode = CUr.Code;
      ICSr.ArtCode = fromart;
      stfound = true;
      while (LoopMain(ICSr,2,stfound)) begin
        if (CUr.Code!=ICSr.CustCode) then begin stfound = false; end;
        if (nonblank(toart)) then begin
          if (ICSr.ArtCode>toart) then begin stfound = false; end;
        end;  
        if (stfound==true) then begin
          if (RepSpec.ArtMode==0) then begin
            skipf = false;
            for (td=RepSpec.sStartDate;td<=RepSpec.sEndDate;td=AddMonth(td,1)) begin
              q = GetTurnover(ICSr,"quant",td,td);
              s = GetTurnover(ICSr,"salesexclvat",td,td);
              gps = GetTurnover(ICSr,"grossprofit",td,td);
              tmp = DateGetIntMonth(td) - RepSpec.sm1;
              ICSMQuant[tmp] = ICSMQuant[tmp] + q;
              ICSMBal[tmp] = ICSMBal[tmp] + s;
              ICSMGp[tmp] = ICSMGp[tmp] + gps;
              sum1 = sum1 + q;
              sum2 = sum2 + s;
              sum3 = sum3 + gps;
            end;
          end else begin
            sum1 = 0;
            sum2 = 0;
            sum3 = 0;
            for (td=RepSpec.sStartDate;td<=RepSpec.sEndDate;td=AddMonth(td,1)) begin
              q = GetTurnover(ICSr,"quant",td,td);
              s = GetTurnover(ICSr,"salesexclvat",td,td);
              gps = GetTurnover(ICSr,"grossprofit",td,td);
              sum1 = sum1 + q;
              sum2 = sum2 + s;
              sum3 = sum3 + gps;
            end;
            if ((sum1!=0) or (sum2!=0) or (sum3!=0)) then begin
              if (printedf==false) then begin
                ExportString(USetStr(2482));
                ExportString(USetStr(2483));
                ExportString("");
                ExportString(USetStr(3528));
                ExportString(USetStr(2593));
                for (i=RepSpec.sm1;i<=RepSpec.em1;i=i+1) begin
                  ExportString(USetStr(2620));
                  ExportString(USetStr(1318));
                  ExportString(USetStr(2663));
                end;
                ExportString(USetStr(2620));
                ExportString(USetStr(1318));
                ExportString(USetStr(2663));
                NewLine;
                printedf = true;
              end;
              ExportString(CUr.Code);
              ExportString(CUr.Name);
              tstr = "";
              ExportString(tstr);
              tstr = "";
              INr.Code = ICSr.ArtCode;
              if (ReadFirstMain(INr,1,true)) then begin
                if (ICSr.ArtCode==INr.Code) then begin
                  tstr = INr.Group;
                end;
              end;    
              ExportString(tstr);
              ExportString(ICSr.ArtCode);
              for (td=RepSpec.sStartDate;td<=RepSpec.sEndDate;td=AddMonth(td,1)) begin
                q = GetTurnover(ICSr,"quant",td,td);
                s = GetTurnover(ICSr,"salesexclvat",td,td);
                gps = GetTurnover(ICSr,"grossprofit",td,td);
                ExportVal(q,M4Qty);
                ExportVal(s,M4Val);
                ExportVal(gps,M4Val);
              end;
              ExportVal(sum1,M4Val);
              ExportVal(sum2,M4Val);
              ExportVal(sum3,M4Val);
              NewLine;
            end;
          end;
        end;
      end;
      if (skipf==false) then begin
        if (RepSpec.ArtMode==0) then begin
          if ((sum1!=0) or (sum2!=0) or (sum3!=0)) then begin
            if (printedf==false) then begin
              ExportString(USetStr(2482));
              ExportString(USetStr(2483));
              ExportString("");
              ExportString(USetStr(3528));              
              for (i=RepSpec.sm1;i<=RepSpec.em1;i=i+1) begin
                ExportString(USetStr(2620));
                ExportString(USetStr(1318));
                ExportString(USetStr(2663));
              end;
              ExportString(USetStr(2620));
              ExportString(USetStr(1318));
              ExportString(USetStr(2663));
              NewLine;
              printedf = true;
            end;
            ExportString(CUr.Code);
            ExportString(CUr.Name);
            tstr = "";
            ExportString(tstr); 
            tstr = "";
            INr.Code = ICSr.ArtCode;
            if (ReadFirstMain(INr,1,true)) then begin
              if (ICSr.ArtCode==INr.Code) then begin
                tstr = INr.Group;
              end;
            end;    
            ExportString(tstr); 
            for (i=RepSpec.sm1;i<=RepSpec.em1;i=i+1) begin
              tmp = i - RepSpec.sm1;
              ExportVal(ICSMQuant[tmp],M4Qty);
              ExportVal(ICSMBal[tmp],M4Val);
              ExportVal(ICSMGp[tmp],M4Val);
            end;
            ExportVal(sum1,M4Val);
            ExportVal(sum2,M4Val);
            ExportVal(sum3,M4Val);
            NewLine;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;