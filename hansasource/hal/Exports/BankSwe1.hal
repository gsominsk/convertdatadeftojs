/* Bankfile for Sweden */ /* Handelsbanken */

#ifdef HAL

global
procedure BankExpPGBegin(string prodno)
begin
  record CYBlock CompYear;
  string 200 tstr;

  BlockLoad(CompYear);
  ExportPadString("0",1," ",false);
  ExportPadString(CompYear.BankCode,5,"0",false);
  ExportPadString(DateToString(CurrentDate,"YYMMDD"),6," ",false);
  tstr = prodno;
  if (blank(tstr)) then begin
    tstr = "1";
  end;
  ExportPadString(tstr,1," ",false);
  ExportPadString("",87," ",false);
  ExportPadString(chr(13) & chr(10),2,"",false);
  ExportPadString("2",1," ",false);
  ExportPadString(CompYear.BankCode,5,"0",false);
  ExportPadString(StripNonDigits(CompYear.Bank2),10," ",true);
  ExportPadString("",2," ",true);
  tstr = CompYear.CompName;
//  Upr2String(tstr);
  ExportPadString(tstr,27," ",false);
  ExportPadString(CompYear.Phone,27," ",false);
  ExportPadString("",28," ",false);
  ExportPadString(chr(13) & chr(10),2,"",false);
  return;
end;

global
procedure BankExpPGEnd(val PGSump)
begin
  record CYBlock CompYear;
  val v;

  BlockLoad(CompYear);
  ExportPadString("7",1," ",false);
  ExportPadString(CompYear.BankCode,5,"0",false);
  ExportPadString(StripNonDigits(CompYear.Bank2),10," ",true);
  ExportPadString("",2," ",true);
  if (PGSump>=0) then begin
    ExportPadString(ValToString(PGSump,M4Val,"","",0),12,"0",true);
    ExportPadString("+",1,"0",true);
  end else begin
    v = 0 - PGSump;
    ExportPadString(ValToString(v,M4Val,"","",0),12,"0",true);
    ExportPadString("-",1,"0",true);
  end;
  ExportPadString("",69," ",false);
//  NewLine;
  return;
end;

global
procedure BankExpSwedish1(record OPVc OPr,Integer today,var val PGSum)
begin
  record VIVc VIr;
  row OPVc OPrw;
  string 100 tstr;
  Boolean testf;
  Integer rowcount;
  Integer rwcnt,i;
  val temp;
  
  rowcount = 0;
  rwcnt = MatRowCnt(OPr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    testf = true;
    if (OPrw.ovst<>0) then begin testf = false; end;
    if (OPrw.stp==5) then begin testf = false; end;
    if (blank(OPrw.BankAcc)) then begin testf = false; end;
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)==false) then begin testf = false; end;
    if (VIr.Invalid<>0) then begin testf = false; end;
    if (testf==true) then begin
      if (OPrw.RecVal<0) then begin
        if (nonblank(OPrw.BankAcc)) then begin
          rowcount = rowcount + 1;
          PGSum = PGSum + OPrw.RecVal;
          ExportPadString("63 ",7," ",false);
          ExportPadString(StripNonDigits(OPrw.BankAcc),10," ",true);
          ExportPadString(VIr.InvoiceNr,27," ",false);
          temp = 0 - OPrw.RecVal;
          ExportPadString(ValToString(temp,M4Val,"","",0),11,"0",true);
          ExportPadString(DateToString(OPr.TransDate,"YYMMDD"),6," ",false);
          ExportPadString(DateToString(OPr.TransDate,"YYMMDD"),6," ",false);
          ExportPadString("",33," ",false);
          ExportPadString(chr(13) & chr(10),2,"",false);
        end;
      end;
      if (OPrw.RecVal>0) then begin
        if (nonblank(OPrw.BankAcc)) then begin
          rowcount = rowcount + 1;
          PGSum = PGSum + OPrw.RecVal;
          ExportPadString("53 ",7," ",false);
          ExportPadString(StripNonDigits(OPrw.BankAcc),10," ",true);
          ExportPadString(VIr.InvoiceNr,27," ",false);
          ExportPadString(ValToString(OPrw.RecVal,M4Val,"","",0),11,"0",true);
          if (today==1) then begin
            if (VIr.DueDate>OPr.TransDate) then begin
              tstr = DateToString(VIr.DueDate,"YYMMDD");
            end else begin
              tstr = DateToString(OPr.TransDate,"YYMMDD");
            end;
          end else begin
            tstr = DateToString(OPr.TransDate,"YYMMDD");
          end;
          ExportPadString(tstr,6," ",false);
          ExportPadString("",39," ",false);
          ExportPadString(chr(13) & chr(10),2,"",false);
        end;
      end;
    end;
  end;
  UserTrace("" & OPr.SerNr,2);
  return;
end;

#endif
