external procedure HT2Per(Date,Date,var string);
external procedure HTbasecurncy(Integer,var string);
external procedure NewLineExport();
external procedure ExportXml(string);
external procedure ExportXmlNL(string);
external procedure ExportXmlTagOpen(string);
external procedure ExportXmlTagClose(string);
external function string 5 GetXBRLElementReportTypeCode(Integer);
external procedure FindFiscalYearBlockRow(Date,row YearBlock);
external procedure BalRnCalcRsTypeAccounts(record RcVc,string,Boolean,Boolean,val,Boolean,date,
                        vector val,vector val,vector val,
                        vector val,vector val,vector val,
                        vector Boolean,
                        Array record UserDefRepLinesVc,var Integer);
external procedure CalcRsTypeSum(vector val,vector val,vector val,
                        vector val,vector val,vector val,
                        vector Boolean, 
                        Array record UserDefRepLinesVc,Integer,LongInt);
external procedure ResRnCalcRsTypeAccounts(record RcVc,string,Boolean,Boolean,val,Boolean,date,
                        vector val,vector val,vector val,
                        vector val,vector val,vector val,
                        vector Boolean,
                        Array record UserDefRepLinesVc,var Integer);
external function Boolean GetUserDefRepRow(string,record UserDefRepVc,var row UserDefRepVc);
external procedure CalcKeyRn(string,string,Integer,Integer,string,Integer,Integer,Integer,Integer,string,string,string,var val);
external function Boolean GetBalancePresentation(record CYBlock,Integer,Integer);

procedure ExportContext(record RcVc RepSpec,Integer ReportType,string ReportCode,string RegNo,row YearBlock YearRow)
begin
  switch (RepSpec.ArtMode) begin
    case 1:
      ExportXmlTagOpen("<xbrli:context id=""" & ReportCode & "_" & YearRow.YearCode & """>");
      ExportXmlTagOpen("<xbrli:entity>");
      ExportXmlNL("<xbrli:identifier scheme=""http://xbrl.eesti.ee/estonian_commercial_register"">" & RegNo & "</xbrli:identifier>");
      ExportXmlTagClose("</xbrli:entity>");
      ExportXmlTagOpen("<xbrli:period>");
      
      if (Left(ReportCode,1)=="I") then begin
        ExportXmlNL("<xbrli:instant>" & DateToString(YearRow.EndDate,"YYYY-MM-DD") & "</xbrli:instant>");
      end;
      
      if (Left(ReportCode,1)=="D") then begin
        ExportXmlNL("<xbrli:startDate>" & DateToString(YearRow.StartDate,"YYYY-MM-DD") & "</xbrli:startDate>");
        ExportXmlNL("<xbrli:endDate>" & DateToString(YearRow.EndDate,"YYYY-MM-DD") & "</xbrli:endDate>");
      end;
      
      ExportXmlTagClose("</xbrli:period>");
      ExportXmlTagClose("</xbrli:context>");
    case 2:
      StartFormat(15);
      OutString(0,0,StringFromSet(467,ReportType),false);
      OutString(1,0,YearRow.YearCode,true);
      EndFormat;
      Gray_Divider(0,1);
  end;
  
  return;
end;

procedure ExportXBRLSetting(record RcVc RepSpec,record XBRLSettingsVc XBRLSr,string ReportCode,record CYBlock CYRec,row YearBlock YearRow,string CurrencyName)
begin
  Integer i,rwcnt,j,rwcnt2;
  row XBRLSettingsVc XBRLSrw;
  record XBRLElementVc XBRLEr;
  record UserDefRepVc UserDefRepr;
  row UserDefRepVc UDRrw;
  vector val vBalance,vDummy;
  vector Boolean sumsv;
  string 255 LastUserDefRep;
  Date AccumStartDate;
  Array record UserDefRepLinesVc aUserDefRepLinesr;
  record UserDefRepLinesVc UserDefRepLinesr;
  Integer udrlcnt;
  val MonetaryValue,t;
  string 255 StrMonetaryValue;
  transaction record RcVc KeyRepSpec;
  Boolean negf;
  
  ExportContext(RepSpec,XBRLSr.ReportType,ReportCode,CYRec.OrgNr,YearRow);
  rwcnt = MatRowCnt(XBRLSr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(XBRLSr,i,XBRLSrw);
    
    if (XBRLSrw.UserDefRep!=LastUserDefRep) then begin
//      vBalance = vEmpty;
      UserDefRepr.shortname = XBRLSrw.UserDefRep;
      if (ReadFirstMain(UserDefRepr,1,true)) then begin
        if (UserDefRepr.Type==kUserDefRepKFR or UserDefRepr.Type==kUserDefRepVAT) begin
          KeyRepSpec.sStartDate = YearRow.StartDate;
          KeyRepSpec.sEndDate = YearRow.EndDate;
          KeyRepSpec.basecurncy = RepSpec.basecurncy;
          rwcnt2 = MatRowCnt(UserDefRepr);
          for (j=0;j<rwcnt2;j=j+1) begin
            MatRowGet(UserDefRepr,j,UDRrw);
            CalcKeyRn(UDRrw.Code,UDRrw.defstr,0,0,"",0,UDRrw.PeriodType,UDRrw.PeriodOffset,UDRrw.PeriodLength,"","","",t);
            vBalance[UDRrw.Code] = t;
          end;
        end;
        if (UserDefRepr.Type==kUserDefRepBal) then begin
          KeyRepSpec.sStartDate = YearRow.StartDate;
          KeyRepSpec.sEndDate = YearRow.EndDate;
          KeyRepSpec.basecurncy = RepSpec.basecurncy;
          BalRnCalcRsTypeAccounts(KeyRepSpec,XBRLSrw.UserDefRep,false,false,0,false,AccumStartDate,
            vDummy,vDummy,vBalance,vDummy,vDummy,vDummy,sumsv,aUserDefRepLinesr,udrlcnt);
          CalcRsTypeSum(vBalance,vDummy,vDummy,vDummy,vDummy,vDummy,sumsv,aUserDefRepLinesr,udrlcnt,-1);
        end;
        if (UserDefRepr.Type==kUserDefRepRes) then begin
          KeyRepSpec.sStartDate = YearRow.StartDate;
          KeyRepSpec.sEndDate = YearRow.EndDate;
          KeyRepSpec.Stext = KeyRepSpec.Period2Str;
          KeyRepSpec.flags[1] = 1;
          KeyRepSpec.AccSpec = 1;
          KeyRepSpec.basecurncy = RepSpec.basecurncy;
          ResRnCalcRsTypeAccounts(KeyRepSpec,XBRLSrw.UserDefRep,true,false,0,false,AccumStartDate,
            vBalance,vDummy,vDummy,vDummy,vDummy,vDummy,sumsv,aUserDefRepLinesr,udrlcnt);
          CalcRsTypeSum(vBalance,vDummy,vDummy,vDummy,vDummy,vDummy,sumsv,aUserDefRepLinesr,udrlcnt,-1);
        end;
      end;
      LastUserDefRep = XBRLSrw.UserDefRep;
    end;
    
    XBRLEr.Code = XBRLSrw.XBRLElement;
    ReadFirstMain(XBRLEr,1,true);
    
    MonetaryValue = vBalance[XBRLSrw.UserDefRepRow];
    
    // Presentation of Balances
    if (UserDefRepr.Type==kUserDefRepBal or UserDefRepr.Type==kUserDefRepRes) then begin
      UserDefRepLinesr.shortname = XBRLSrw.UserDefRep;
      UserDefRepLinesr.IdKey = XBRLSrw.UserDefRepRow;
      if (ReadFirstMain(UserDefRepLinesr,2,true)) then begin
        negf = GetBalancePresentation(CYRec,UserDefRepLinesr.RsType,UserDefRepLinesr.AccType);
        if (negf) then begin
          MonetaryValue = -MonetaryValue;
        end;
      end;
    end;
    
    // Reverse sign
    if (XBRLSrw.ReverseSign!=0) then begin
      MonetaryValue = -MonetaryValue;
    end;
    
    switch (RepSpec.ArtMode) begin
      case 1:
        StrMonetaryValue = ValToString(MonetaryValue,M40Val,"","",0);
        ExportXmlNL("<et-gaap:" & XBRLEr.XMLElement & " decimals=""0"" unitRef=""" & CurrencyName & """ contextRef=""" & ReportCode & "_" & YearRow.YearCode & """>" & StrMonetaryValue & "</et-gaap:" & XBRLEr.XMLElement & ">");
      case 2:
        StartFormat(15);
        OutString(0,0,XBRLEr.FieldName,false);
        OutVal(1,0,MonetaryValue,M40Val,true);
        EndFormat;
    end;
  end;
  if (RepSpec.ArtMode==2) then begin
    StartFormat(15);
    EndFormat;
  end;
  
  return;
end;

procedure DoXBRLReport(record RcVc RepSpec)
begin
  record XBRLSettingsVc XBRLSr;
  row YearBlock YearRow,PrevYearRow;
  record CYBlock CYRec;
  record BaseCurBlock BaseCurRec;
  record CurncyCodeVc CurncyCoder;
  record RcVc RepSpec2;
  string 255 ReportCode,CurrencyCode,CurrencyName;
  Integer i,rwcnt;
  
  BlockLoad(CYRec);
  FindFiscalYearBlockRow(RepSpec.sStartDate,YearRow);
  FindFiscalYearBlockRow(AddDay(RepSpec.sStartDate,-1),PrevYearRow);
  
  BlockLoad(BaseCurRec);
  if (RepSpec.basecurncy==0) then begin
    CurrencyCode = BaseCurRec.BaseCur1;
  end else begin
    CurrencyCode = BaseCurRec.BaseCur2;
  end;
  CurncyCoder.CurncyCode = CurrencyCode;
  ReadFirstMain(CurncyCoder,1,true);
  CurrencyName = CurncyCoder.Comment;
  
  switch (RepSpec.ArtMode) begin
    case 1:
      ExportXmlNL("<?xml version='1.0' encoding='UTF-8'?>");
      ExportXml("<xbrli:xbrl xmlns:iso4217=""http://www.xbrl.org/2003/iso4217"" ");
      ExportXml("xmlns:et-gaap=""http://xbrl.eesti.ee/taxonomy/et-gaap_2010-01-01/"" ");
      ExportXml("xmlns:xlink=""http://www.w3.org/1999/xlink"" ");
      ExportXml("xmlns:link=""http://www.xbrl.org/2003/linkbase"" ");
      ExportXml("xmlns:xbrli=""http://www.xbrl.org/2003/instance"" ");
      ExportXmlTagOpen("xmlns:xbrldi=""http://xbrl.org/2006/xbrldi"">");
      ExportXmlNL("<link:schemaRef xlink:type=""simple"" xlink:href=""http://xbrl.eesti.ee/taxonomy/et-gaap_2010-01-01/et-gaap-cor_2010-01-01.xsd""/>");
      ExportXmlTagOpen("<xbrli:unit id=""" & CurrencyName & """>");
      ExportXmlNL("<xbrli:measure>iso4217:" & CurrencyCode & "</xbrli:measure>");
      ExportXmlTagClose("</xbrli:unit>");
    case 2:
      StartFormat(15);
      OutString(0,0,USetStr(25401),false);
      OutString(1,0,USetStr(25402),true);
      EndFormat;
      Black_Divider(0,1);
  end;
  
  while (LoopMain(XBRLSr,1,true)) begin
    ReportCode = GetXBRLElementReportTypeCode(XBRLSr.ReportType);
    if (RepSpec.flags[0]!=0) then begin
      ExportXBRLSetting(RepSpec,XBRLSr,ReportCode,CYRec,PrevYearRow,CurrencyName)
    end;
    ExportXBRLSetting(RepSpec,XBRLSr,ReportCode,CYRec,YearRow,CurrencyName)
  end;
  
  switch (RepSpec.ArtMode) begin
    case 1:
      ExportXmlTagClose("</xbrli:xbrl>");
  end;
  
  return;
end;

global
procedure XBRLReportEn(record RcVc RepSpec)
begin
  RepSpec.ArtMode = 1;
  DoXBRLReport(RepSpec);
  return;
end;

procedure PrintHeader(record RcVc RepSpec)
begin
  string 255 tstr;
  Integer rw;
  
  rw = 1;
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  HTbasecurncy(RepSpec.basecurncy,tstr);
  Header(rw,tstr,1);
  rw = rw + 1;
  
  return;
end;

global
procedure XBRLReportRn(record RcVc RepSpec)
begin
  StartReportJob(USetStr(25400));
  PrintHeader(RepSpec);
  EndHeader;
  RepSpec.ArtMode = 2;
  DoXBRLReport(RepSpec);
  EndJob;
  return;
end;
