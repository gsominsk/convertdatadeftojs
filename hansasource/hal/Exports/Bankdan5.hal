external procedure CreateSwedishChecksum(var string,var string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure M4WriteDanStr(string,Integer,Boolean);
external procedure CalcNorCheck(var string,Boolean);
external procedure FinnishBankVal(var string,val);
external procedure CreateKIDCode(string,LongInt,var string);

procedure BGTekstRec(record CUVc VEp,record CYBlock CompYearp,LongInt rowsernr,var LongInt appsernr)
BEGIN
  string 255 tstr;
  
  appsernr  = appsernr + 1;
  tstr = rowsernr;
  ExportPadString(tstr,7,"0",true);                      
  ExportPadString("40",2,"0",true);                    
  ExportPadString(" ",1," ",true);                    
  ExportPadString(CompYearp.CompName,35," ",false);                    
  ExportPadString(tstr,3," ",true);                    
  ExportPadString(VEp.Name,35," ",false);                    
  ExportPadString(tstr,3," ",true);                    
  ExportPadString(VEp.InvAddr0,35," ",false);                    
  ExportPadString(tstr,4," ",true);                    
  NewLine;
  RETURN;
END;

procedure CreateDanishCheckCiffer(string instr,var string res)
BEGIN
  string 255 tstr,t2;

  tstr = instr;
  M4PadString(tstr,14,"0",true,t2);  
  CalcNorCheck(t2,true);
  res = t2;
  RETURN;
END;

global
procedure RemoveSepFromStr(string tstr,var string res)
BEGIN
  Integer l,i,j;
  string 255 cstr;
  record SysFormatBlock SysFormatRec;
   
  BlockLoad(SysFormatRec);
  l = len(tstr);
  j = 0;
  for (i=0;i<=l;i=i+1) begin
   if ((Mid(tstr,i,1)!=SysFormatRec.decimalPt) and (Mid(tstr,i,1)!=SysFormatRec.thousSep) )then begin
     cstr = cstr & Mid(tstr,i,1);
    end;  
  end;
  res = cstr;
  RETURN;
END;

global
procedure CreateKIDCheckNor(val sum,LongInt inv,var string res)
BEGIN
  record BankFileBlock bfr;
  string 255 tstr,t2;

  res = "";
  BlockLoad(bfr);
  t2 = sum;
  RemoveSepFromStr(t2,tstr);
  switch (bfr.Bank) begin
    case 6: CreateSwedishChecksum(tstr,res); 
    case 7: CreateSwedishChecksum(tstr,res); 
    case 8: CreateSwedishChecksum(tstr,res);
    case 23:CreateSwedishChecksum(tstr,res);
    case 9:  
      CalcNorCheck(tstr,true);
      res = Mid(tstr,len(tstr)-1,1);
    case 10: 
      CalcNorCheck(tstr,true);
      res = Mid(tstr,len(tstr)-1,1);
    case 11: 
      CalcNorCheck(tstr,true);
      res = Mid(tstr,len(tstr)-1,1);
    case 12: 
      CalcNorCheck(tstr,true);
      res = Mid(tstr,len(tstr)-1,1);
  end;
  RETURN;
END;

global
procedure BankExpDanish5(record OPVc OPr,var val TotSump,var LongInt rowsernr,var LongInt appsernr)
BEGIN
  Integer i,j,rwcnt;
  row OPVc OPrw;
  row OPVc OP2rw;  
  record VIVc VIr;
  record CUVc VEr;
  record BankVc BKr;
  Boolean VEf,BKf,testf,fikf;
  val totsum;
  string 255 tstr,t1,t2;
  record CYBlock CompYear;

  BlockLoad(CompYear);
  fikf = false;
  rwcnt = MatRowCnt(OPr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.ovst<>0) then begin goto L88; end;
    if (blank(OPrw.BankAcc)) then begin goto L88; end;    
    
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)==false) then begin goto L88; end;
    if (VIr.InvType==kInvoiceTypeNormalSpecialSales) then begin VIr.InvType = kInvoiceTypeNormal; end;
    if (VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin VIr.InvType = kInvoiceTypeCredit; end;
    if ((VIr.InvType<kInvoiceTypeNormal) or (VIr.InvType>kInvoiceTypeCredit)) then begin VIr.InvType = kInvoiceTypeNormal; end;

    if ((VIr.InvType==kInvoiceTypeNormal) and (VIr.PayVal<0)) then begin
      VIr.InvType = kInvoiceTypeCredit; 
    end;
    VEr.Code = VIr.VECode;
    VEf = ReadFirstMain(VEr,1,true);
    begin
      testf = true;
      if (VIr.Invalid<>0) then begin testf = false; end;
      if (testf) then begin
        totsum = 0;
        for (j=i;j<rwcnt;j=j+1) begin
          MatRowGet(OPr,j,OP2rw);
          if (OP2rw.VECode==OPrw.VECode) then begin
            totsum = totsum + OP2rw.PInvVal;
          end;
        end;
        if (totsum<0) then begin goto L77; end;
        
        BKr.Code = VEr.AccOperator; 
        BKf = ReadFirstMain(BKr,1,true);        
        
        tstr = rowsernr;
        ExportPadString(tstr,7,"0",true);                    
        ExportPadString("30",2,"0",true);                    
        ExportPadString(" ",1," ",true);                    
        t1 = OPrw.BankAcc;
        if (len(OPrw.BankAcc)<2 ) then begin goto L77; end;
        t1 = Left(OPrw.BankAcc,2);
        if (len(OPrw.BankAcc) >2 ) then begin
          tstr = "411";
          fikf = false; 
        end else begin
          if ((t1=="04") or (t1=="15") or (t1=="44") or (t1=="48") or (t1=="71")) then begin
            tstr = "910";
            fikf = true;
          end; 
        end;    
        ExportPadString(tstr,3,"0",true);                    
        if (fikf) then begin
          CreateDanishCheckCiffer(VIr.InvoiceNr,tstr);   
        end else begin
          CreateKIDCode(VIr.VECode,OPrw.VISerNr,tstr);
        end;
        ExportPadString(tstr,16,"0",true);                            
        if (fikf) then begin
          tstr = OPrw.BankAcc;
          t2 = Left(tstr,2);          
        end else begin
          tstr = "00";
        end;
        ExportPadString(tstr,2,"0",true);                                    
        ExportPadString("00",2,"0",true);                                    
        if (fikf) then begin
          if (t1=="71") then begin
            tstr = "0";
          end else begin
            tstr = "1199";
          end;
        end else begin
          tstr = "1199";
        end;
        ExportPadString(tstr,4,"0",true);
        ExportPadString("0",5,"0",true);
        if (fikf) then begin
          tstr = VEr.RegNr2;
        end else begin
          if (len(OPrw.BankAcc)>4) then begin
            t2 = Right(OPr.BankAcc,len(OPrw.BankAcc)-4);                    
          end else begin  
            t2 = "0";
          end;
          tstr = StripNonDigits(t2);              
        end;  
        ExportPadString(tstr,10,"0",true);        
        ExportPadString(" ",4," ",true);
        ExportPadString("00",2,"0",true);
        FinnishBankVal(tstr,OPrw.PInvVal);
        ExportPadString(tstr,12,"0",true);
        tstr = DateToString(OPr.PayDate,"YYMMDD");                    
        ExportPadString(tstr,6,"0",true);
        ExportPadString("0",10,"0",true);
        ExportPadString("1",12,"0",true);
        ExportPadString(" ",5," ",true);
        tstr = "Faktura no. : ";
        tstr = tstr & VIr.InvoiceNr;
        ExportPadString(tstr,20," ",true);
        ExportPadString(" ",2," ",true);
        NewLine;
        TotSump = TotSump + OPrw.PInvVal;
        if ((fikf==false) or (t1=="01"))  then begin
          BGTekstRec(VEr,CompYear,rowsernr,appsernr);
        end;
//        betcount = betcount + 1;
        rowsernr = rowsernr + 1;
L77:;      
      end;
    end;    
L88:;
  end;
L99:;  
//  UserTrace(OPr.SerNr,M4Long);
  RETURN;
END;
