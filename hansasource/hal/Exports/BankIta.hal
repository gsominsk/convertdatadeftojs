external procedure M4PadString(string,Integer,string,Boolean,var string);
external function boolean ValidateIBAN(string);
external function string 255 ConvertXmlString(string,Boolean);
external procedure StripSpace(var string,string);
external procedure NewLineExport();
external function Boolean GetPMRow(string,var row PMBlock);

procedure ExportTheLevel(Integer level)
begin
  string 255 tstr;
  Integer i;
  
  tstr = "";
  for (i=0;i<level;i=i+1) begin
    tstr = tstr & "  ";
  end;
  ExportPadString(tstr,len(tstr)," ",false);
  return;
end;

procedure ExportPlainXml(string value,Integer level)
begin
  ExportTheLevel(level);
  ExportPadString(value,BytesInString(value)," ",false);
  NewLineExport;
  return;
end;

procedure ExportTagXml(string tag,string pvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure ExportAttributeTagXml(string tag,string pvalue,string attr,string attrvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  if (nonblank(attr)) then begin
    ExportPadString(" ",1," ",false);
    ExportPadString(attr,len(attr)," ",false);
    ExportPadString("=""",2," ",false);
    ExportPadString(attrvalue,BytesInString(attrvalue)," ",false);
    ExportPadString("""",1," ",false);
  end;
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure AddToPerSupplierArray(Integer ExportSuppInvNr,row OPVc OPrw,string bankacc,Array Integer aprcnt,Array string aprvecode,Array string aprbankacc,Array string aprreference,Array string aprbankcur,Array val aprbankval,
                                Array string aprreccur,Array val aprrecval,Array string aprreferencedetails,Array string aprbankvaldetails,Array string aprinvoicetypes,var Integer acnt)
begin
  Integer i;
  record VIVc VIr;
  string 255 BankRefStr;

  VIr.SerNr = OPrw.VISerNr;
  ReadFirstMain(VIr,1,true);
  
  for (i=0;i<acnt;i=i+1) begin
    if (aprcnt[i]<9) and (aprvecode[i]==OPrw.VECode) and (aprbankacc[i]==bankacc) then begin
      aprcnt[i] = aprcnt[i] + 1;
      aprbankval[i] = aprbankval[i] + OPrw.BankVal;
/*      
      if (OPrw.BankVal<0) then begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(-OPrw.BankVal,M4Val,"",".",0);
      end else begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(OPrw.BankVal,M4Val,"",".",0);
      end;
*/      
      aprrecval[i] = aprrecval[i] + OPrw.RecVal;
      if (OPrw.RecVal<0) then begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(-OPrw.RecVal,M4Val,"",".",0);
      end else begin
        aprbankvaldetails[i] = aprbankvaldetails[i] & ";" & ValToString(OPrw.RecVal,M4Val,"",".",0);
      end;
      switch (VIr.InvType) begin
        case kInvoiceTypeCredit:
          aprinvoicetypes[i] = aprinvoicetypes[i] & ";" & "CREN";
        case kInvoiceTypeCreditSpecialSales:
          aprinvoicetypes[i] = aprinvoicetypes[i] & ";" & "CREN";
        otherwise
          aprinvoicetypes[i] = aprinvoicetypes[i] & ";" & "CINV";
      end;
      BankRefStr = OPrw.BankRefStr;
      if (blank(BankRefStr)) then begin BankRefStr = VIr.RefStr; end;
      if (blank(BankRefStr)) then begin BankRefStr = VIr.InvoiceNr; end;
      aprreference[i] = aprreference[i] & "/" & BankRefStr;
      aprreferencedetails[i] = aprreferencedetails[i] & ";" & BankRefStr;
      goto LAddToPerSupplierArray;
    end;
  end;
  aprcnt[acnt] = 1;
  aprvecode[acnt] = OPrw.VECode;
  aprbankacc[acnt] = bankacc;
  aprbankcur[acnt] = OPrw.BankCurncy;
  aprbankval[acnt] = OPrw.BankVal;
/*  
  if (OPrw.BankVal<0) then begin
    aprbankvaldetails[acnt] = ValToString(-OPrw.BankVal,M4Val,"",".",0);
  end else begin
    aprbankvaldetails[acnt] = ValToString(OPrw.BankVal,M4Val,"",".",0);
  end;
*/
  aprreccur[acnt] = OPrw.RecCurncy;
  aprrecval[acnt] = OPrw.RecVal;
  if (OPrw.BankVal<0) then begin
    aprbankvaldetails[acnt] = ValToString(-OPrw.RecVal,M4Val,"",".",0);
  end else begin
    aprbankvaldetails[acnt] = ValToString(OPrw.RecVal,M4Val,"",".",0);
  end;
  switch (VIr.InvType) begin
    case kInvoiceTypeCredit:
      aprinvoicetypes[i] = "CREN";
    case kInvoiceTypeCreditSpecialSales:
      aprinvoicetypes[i] = "CREN";
    otherwise
      aprinvoicetypes[i] = "CINV";
  end;
  BankRefStr = OPrw.BankRefStr;
  if (blank(BankRefStr)) then begin BankRefStr = VIr.RefStr; end;
  if (blank(BankRefStr)) then begin BankRefStr = VIr.InvoiceNr; end;
  aprreference[i] = aprreference[i] & "/" & BankRefStr;
  aprreferencedetails[i] = aprreferencedetails[i] & ";" & BankRefStr;
  acnt = acnt + 1;
LAddToPerSupplierArray:;  
  return;
end;

global
procedure BankExpItalySEPA_Domestic_GroupHeader(record RcVc RepSpec,var record BankFileBlock bfr)
begin
  string 255 tstr;
  LongInt appsernr;
  record CYBlock CYb;
  record OPVc OPr;
  Boolean found,testf;
  Integer keys;
  string 255 ckey;
  LongInt afr,ato;
  Integer i,rwcnt;
  row OPVc OPrw;
  record BaseCurBlock BCb;  
  Integer NbOfTxs;
  record CUVc VEr;
  string 255 bankacc;
  Array string 255 aprvecode;
  Array string 255 aprbankacc;
  Array string 255 aprreference;
  Array string 255 aprbankcur;
  Array string 255 aprreccur;
  Array Integer aprcnt;
  Array val aprbankval;
  Array val aprrecval;
  Array string 255 aprreferencedetails;
  Array string 255 aprinvoicetypes;
  Array string 255 aprbankvaldetails;
  Integer prevacnt,acnt;
  string 255 timestamp;
  time curtime;
  string 255 codepage;
  val CtrlSum;
  
  codepage = StringSetFromString(89,RepSpec.f12);
  if (blank(codepage)) then begin
    codepage = "UTF-8";
  end;
  NbOfTxs = 0;
  BlockLoad(CYb);
  BlockLoad(BCb);
  appsernr = bfr.LastSerNr;
  if (appsernr<=0) or (appsernr>999999) then begin
    appsernr = 1;
  end;

  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  found = true;
  if (RepSpec.OnlyUnprntd==0) then begin
    OPr.SentFlag = 0;
    OPr.SerNr = afr;
    keys = 2;
    ckey = "SentFlag";
  end else begin
    OPr.SerNr = afr;
    keys = 1;
    ckey = "SerNr";
  end;
  while (LoopKey(ckey,OPr,keys,found)) begin
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.SentFlag==1) then begin
        found = false;
      end;
    end;
    if (ato<>-1) then begin
      if (OPr.SerNr>ato) then begin
        found = false;
      end;
    end;
    testf = true;
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.DoneFlag==1) then begin 
        testf = false;
      end;
    end;
    if (OPr.OrderedFlag==0) then begin 
      testf = false;
    end;
    if (OPr.Invalid!=0) then begin  testf = false; end;
    if (DateInRange(OPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;    
    if (found==false) then begin
      testf = false;
    end;
    if (testf) then begin
      if (RepSPec.flags[2]==0) then begin  
        rwcnt = MatRowCnt(OPr);
        if (OPr.PayperSupplier==1) or (RepSpec.flags[5]!=0) then begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
              goto LBankExpItalySEPA_Domestic_GroupHeader_SKIPROW1;
            end;
            VEr.Code = OPrw.VECode;
            ReadFirstMain(VEr,1,true);

            bankacc = OPrw.BankAcc;
            if (blank(bankacc)) then begin
              bankacc = VEr.IBANCode;
            end;
            if (blank(bankacc)) then begin
              bankacc = VEr.BankAccount;
            end;
            if (blank(bankacc)) then begin
              bankacc = VEr.Bank;
            end;
            prevacnt = acnt;
            AddToPerSupplierArray(bfr.ExportSuppInvNr,OPrw,bankacc,aprcnt,aprvecode,aprbankacc,aprreference,aprbankcur,aprbankval,aprreccur,aprrecval,aprreferencedetails,aprbankvaldetails,aprinvoicetypes,acnt);
            if (prevacnt!=acnt) then begin              
              NbOfTxs = NbOfTxs + 1;
            end;
            CtrlSum = CtrlSum + OPrw.RecVal;
LBankExpItalySEPA_Domestic_GroupHeader_SKIPROW1:;              
          end;
        end else begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
              goto LBankExpItalySEPA_Domestic_GroupHeader_SKIPROW2;
            end;
            NbOfTxs = NbOfTxs + 1;
            CtrlSum = CtrlSum + OPrw.RecVal;
LBankExpItalySEPA_Domestic_GroupHeader_SKIPROW2:;              
          end;
        end;
        
      end else begin
//foreign        
      end;
    end;
  end;

  ExportPlainXml("<?xml version=""1.0"" encoding=""" & codepage & """?>",0); 

  tstr = "<CBIPaymentRequest xsi:schemaLocation=""urn:CBI:xsd:CBIPaymentRequest.00.04.00 CBIPaymentRequest.00.04.00.xsd"" xmlns=""urn:CBI:xsd:CBIPaymentRequest.00.04.00"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">";
  ExportPlainXml(tstr,0); 

  ExportPlainXml("<GrpHdr>",1);
  curtime = CurrentTime;
  timestamp = DateToString(CurrentDate,"YYMMDD") & GetHour(curtime) & GetMinute(curtime);
  ExportTagXml("MsgId",appsernr & "-" & timestamp,2);
  tstr = DateToString(CurrentDate,"YYYY-MM-DD");
  tstr = tstr & "T";
  tstr = tstr & CurrentTime;
  ExportTagXml("CreDtTm",tstr,2);
  if (RepSpec.flags[7]!=0) then begin
//    ExportTagXml("BtchBookg","true",2);
  end else begin
//    ExportTagXml("BtchBookg","false",2);
  end;
  ExportTagXml("NbOfTxs",NbOfTxs,2);
  ExportTagXml("CtrlSum",ValToString(CtrlSum,M4Val,"",".",0),2);  
//  ExportTagXml("Grpg","MIXD",2);
  ExportPlainXml("<InitgPty>",2);
  ExportTagXml("Nm",ConvertXmlString(CYb.CompName,false),3);
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<OrgId>",4);
  ExportPlainXml("<Othr>",4);
  ExportTagXml("Id",CYb.EInvoiceAccount,5);
  ExportTagXml("Issr","CBI",5);
  ExportPlainXml("</Othr>",4);
  ExportPlainXml("</OrgId>",4);
  ExportPlainXml("</Id>",3);
  ExportPlainXml("</InitgPty>",2);
  ExportPlainXml("<FwdgAgt>",3);
  ExportPlainXml("<FinInstnId>",4);
  ExportPlainXml("<ClrSysMmbId>",5);
  ExportTagXml("MmbId","a",6);
  ExportPlainXml("</ClrSysMmbId>",5);
  ExportPlainXml("</FinInstnId>",4);
  ExportPlainXml("</FwdgAgt>",3);
  ExportPlainXml("</GrpHdr>",1);
  bfr.LastSerNr = appsernr + 1;
  return;
end;

global
procedure BankExpItalySEPA_Domestic_GroupFooter()
begin
  string 255 tstr;

  ExportPlainXml("</CBIPaymentRequest>",0);
  return;
end;

procedure BankExpItalySEPA_Domestic_Header(record RcVc RepSpec,record OPVc OPr,record BankFileBlock bfr)
begin
  string 255 tstr;
  LongInt rowsernr;
  record CYBlock CYb;
  record BankVc Bankr;
  row PMBlock PMrw;
  
  BlockLoad(CYb);
  rowsernr = bfr.RowSerNr;
  if (rowsernr<=0) or (rowsernr>999999) then begin
    rowsernr = 1;
  end;
  ExportPlainXml("<PmtInf>",1);
  M4PadString(rowsernr,4,"0",true,tstr);
  ExportTagXml("PmtInfId",DateToString(OPr.PayDate,"YYYYMMDD") & "CT" & tstr,2);
  ExportTagXml("PmtMtd","TRA",2);
  ExportTagXml("BtchBookg","false",2);
  ExportPlainXml("<PmtTpInf>",2);
  ExportTagXml("InstrPrty","NORM",3);
  ExportPlainXml("<SvcLvl>",3);
  ExportTagXml("Cd","SEPA",4);
  ExportPlainXml("</SvcLvl>",3);
  ExportPlainXml("</PmtTpInf>",2);
  if (RepSpec.flags[0]!=0) then begin
    if (OPr.PayDate>CurrentDate) then begin
      ExportTagXml("ReqdExctnDt",DateToString(OPr.PayDate,"YYYY-MM-DD"),2);
    end else begin
      ExportTagXml("ReqdExctnDt",DateToString(CurrentDate,"YYYY-MM-DD"),2);
    end;
  end else begin
    ExportTagXml("ReqdExctnDt",DateToString(CurrentDate,"YYYY-MM-DD"),2);
  end;
  
  ExportPlainXml("<Dbtr>",2);
  ExportTagXml("Nm",ConvertXmlString(CYb.CompName,false),2);
/*  
  if(nonblank(CYb.Addr0) and nonblank(CYb.Addr1) and nonblank(CYb.CountryCode)) then begin
    ExportPlainXml("<PstlAdr>",2);
    ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr0,false),3);
    ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr1,false),3);
    ExportTagXml("Ctry",CYb.CountryCode,3);
    ExportPlainXml("</PstlAdr>",2);
  end;
*/  
  ExportPlainXml("<Id>",2);
  ExportPlainXml("<OrgId>",3);
  ExportPlainXml("<Othr>",4);
  ExportTagXml("Id",CYb.VATNr,5);
  GetPMRow(OPr.PayMode,PMrw);
  Bankr.Code = PMrw.BankCode;
  ReadFirstMain(Bankr,1,true);
  if (blank(Bankr.Nr2)) then begin
    Bankr.Nr2 = CYb.Bank2;
  end;
/*  
  if(nonblank(Bankr.BankIDCode)) then begin
    ExportTagXml("BkPtyId",Bankr.BankIDCode,4);
  end else begin
    ExportTagXml("BkPtyId",CYb.BankCode,4);
  end;
*/  
  ExportPlainXml("</Othr>",4);
  ExportPlainXml("</OrgId>",3);
  ExportPlainXml("</Id>",2);    
  ExportPlainXml("</Dbtr>",2);
  
  ExportPlainXml("<DbtrAcct>",2);
  ExportPlainXml("<Id>",3);
  StripSpace(tstr,Bankr.Nr2);
  ExportTagXml("IBAN",tstr,4);  
  ExportPlainXml("</Id>",3);    
  ExportPlainXml("</DbtrAcct>",2);
  ExportPlainXml("<DbtrAgt>",2);
  ExportPlainXml("<FinInstnId>",3);
  ExportPlainXml("<ClrSysMmbId>",4);
  ExportTagXml("MmbId",CYb.Bank1,5);
  ExportPlainXml("</ClrSysMmbId>",4);
  ExportPlainXml("</FinInstnId>",3);
  ExportPlainXml("</DbtrAgt>",2);  
  ExportTagXml("ChrgBr","SLEV",3);  
  bfr.RowSerNr = rowsernr + 1;
  return;
end;

procedure BankExpItalySEPA_Domestic_Footer()
begin
  string 255 tstr;

  ExportPlainXml("</PmtInf>",1);
  return;
end;

global
procedure BankExpItalySEPA_Domestic(record RcVc RepSpec,record OPVc OPr,record BankFileBlock bfr)
begin
  string 255 tstr;
  Integer i,j,rwcnt;
  row OPVc OPrw;
  row OPVc OP2rw;
  record CUVc VEr;
  record BankVc Bankr;
  record BankVc ourBankr;
  record VIVc VIr;
  record BaseCurBlock BCb;
  row PMBlock PMrw;
  string 255 bankacc;
  Array string 255 aprvecode;
  Array string 255 aprbankacc;
  Array string 255 aprreference;
  Array string 255 aprreccur;
  Array string 255 aprbankcur;
  Array Integer aprcnt;
  Array val aprbankval;
  Array val aprrecval;
  Array string 255 aprreferencedetails;
  Array string 255 aprinvoicetypes;
  Array string 255 aprbankvaldetails;
  Integer acnt;
  Integer pos1,pos2,pos3;
  string 255 bvdet,brdet,invtype,BankRefStr;
//  record CYBlock CYb;
  
//  BlockLoad(CYb);
  BankExpItalySEPA_Domestic_Header(RepSpec,OPr,bfr);
  BlockLoad(BCb);
  rwcnt = MatRowCnt(OPr);
  if (OPr.PayperSupplier==1) or (RepSpec.flags[5]!=0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
        goto LBankExpItalySEPA_Domestic_SKIPROW1;
      end;
      VEr.Code = OPrw.VECode;
      ReadFirstMain(VEr,1,true);

      bankacc = OPrw.BankAcc;
      if (blank(bankacc)) then begin
        bankacc = VEr.IBANCode;
      end;
      if (blank(bankacc)) then begin
        bankacc = VEr.BankAccount;
      end;
      if (blank(bankacc)) then begin
        bankacc = VEr.Bank;
      end;
      AddToPerSupplierArray(bfr.ExportSuppInvNr,OPrw,bankacc,aprcnt,aprvecode,aprbankacc,aprreference,aprbankcur,aprbankval,aprreccur,aprrecval,aprreferencedetails,aprbankvaldetails,aprinvoicetypes,acnt);      
LBankExpItalySEPA_Domestic_SKIPROW1:;
    end;
    for (i=0;i<acnt;i=i+1) begin
      VEr.Code = aprvecode[i];
      ReadFirstMain(VEr,1,true);
      Bankr.Code = VEr.AccOperator;
      if (ReadFirstMain(Bankr,1,true)==false) then begin
        Bankr.Code = PMrw.BankCode;
        GetPMRow(OPr.PayMode,PMrw);
      end;
//      ourBankr.Code = CYb.AccOperator;
//      ReadFirstMain(ourBankr,1,true);


      ExportPlainXml("<CdtTrfTxInf>",1);
      ExportPlainXml("<PmtId>",2);    
      ExportTagXml("InstrId",i+1,3);  
      M4PadString(OPr.SerNr & "-" & i+1,4,"0",true,tstr);
      ExportTagXml("EndToEndId",DateToString(OPr.PayDate,"YYYYMMDD") & "CT" & tstr,3);
      ExportPlainXml("</PmtId>",2);
      ExportPlainXml("<PmtTpInf>",2);
      ExportPlainXml("<CtgyPurp>",3);
      ExportTagXml("Cd","SUPP",4);  
      ExportPlainXml("</CtgyPurp>",3);
      ExportPlainXml("</PmtTpInf>",2);

      ExportPlainXml("<Amt>",2);
      ExportAttributeTagXml("InstdAmt",ValToString(aprrecval[i],M4Val,"",".",0),"Ccy",aprreccur[i],3);
      ExportPlainXml("</Amt>",2);
      ExportPlainXml("<Cdtr>",2);
      ExportTagXml("Nm",ConvertXmlString(VEr.Name,false),3);
      ExportPlainXml("<Id>",3);
      ExportPlainXml("<OrgId>",4);
      ExportPlainXml("<Othr>",5);
      ExportTagXml("Id",VEr.RegNr1,6);
      ExportTagXml("Issr","ADE",6);
      ExportPlainXml("</Othr>",5);
      ExportPlainXml("</OrgId>",4);
      ExportPlainXml("</Id>",3);
      ExportPlainXml("</Cdtr>",2);
      
      ExportPlainXml("<CdtrAcct>",2);
      ExportPlainXml("<Id>",3);
      if (ValidateIBAN(bankacc)) then begin
        StripSpace(tstr,aprbankacc[i]);
        ExportTagXml("IBAN",tstr,4);  
      end else begin
        StripSpace(tstr,aprbankacc[i]);
        ExportTagXml("BBAN",tstr,4);  
      end;
      ExportPlainXml("</Id>",3);
      ExportPlainXml("</CdtrAcct>",2);
      ExportPlainXml("<RmtInf>",2);
      ExportTagXml("Ustrd","" & aprreference[i],3);               
      ExportPlainXml("</RmtInf>",2);          
      ExportPlainXml("</CdtTrfTxInf>",1);
    end;
    
  end else begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
        goto LBankExpItalySEPA_Domestic_SKIPROW2;
      end;
      VEr.Code = OPrw.VECode;
      ReadFirstMain(VEr,1,true);
      Bankr.Code = VEr.AccOperator;
      if (ReadFirstMain(Bankr,1,true)==false) then begin
        GetPMRow(OPr.PayMode,PMrw);
        Bankr.Code = PMrw.BankCode;
      end;
      
      VIr.SerNr = OPrw.VISerNr;
      ReadFirstMain(VIr,1,true);
      
      ExportPlainXml("<CdtTrfTxInf>",1);
      ExportPlainXml("<PmtId>",2);    
      ExportTagXml("InstrId",i+1,3);  
      M4PadString(OPr.SerNr & "-" & i+1,4,"0",true,tstr);
      ExportTagXml("EndToEndId",DateToString(OPr.PayDate,"YYYYMMDD") & "CT" & tstr,3);
      ExportPlainXml("</PmtId>",2);
      ExportPlainXml("<PmtTpInf>",2);
      ExportPlainXml("<CtgyPurp>",3);
      ExportTagXml("Cd","SUPP",4);  
      ExportPlainXml("</CtgyPurp>",3);
      ExportPlainXml("</PmtTpInf>",2);
      
      ExportPlainXml("<Amt>",2);
      ExportAttributeTagXml("InstdAmt",ValToString(OPrw.RecVal,M4Val,"",".",0),"Ccy",OPrw.RecCurncy,3);
      ExportPlainXml("</Amt>",2);

      ExportPlainXml("<Cdtr>",2);
      ExportTagXml("Nm",ConvertXmlString(VEr.Name,false),3); 
      ExportPlainXml("<Id>",3);
      ExportPlainXml("<OrgId>",4);
      ExportPlainXml("<Othr>",4);
      ExportTagXml("Id",VEr.RegNr1,5);
      ExportTagXml("Issr","ADE",5);
      ExportPlainXml("</Othr>",4);
      ExportPlainXml("</OrgId>",4);
      ExportPlainXml("</Id>",3);
      ExportPlainXml("</Cdtr>",2);
  
      ExportPlainXml("<CdtrAcct>",2);
      ExportPlainXml("<Id>",3);

      bankacc  = aprbankacc[i];
      if (blank(bankacc)) then begin
        bankacc = VEr.IBANCode;
      end;
      if (ValidateIBAN(bankacc)) then begin
        StripSpace(tstr,bankacc);
        ExportTagXml("IBAN",tstr,4);  
      end else begin
        StripSpace(tstr,bankacc);
        ExportTagXml("BBAN",tstr,4);  
      end;
      ExportPlainXml("</Id>",3);
      ExportPlainXml("</CdtrAcct>",2);
      ExportPlainXml("<RmtInf>",2);
      BankRefStr = OPrw.BankRefStr;
      if (blank(BankRefStr)) then begin BankRefStr = VIr.RefStr; end;
      if (blank(BankRefStr)) then begin BankRefStr = VIr.InvoiceNr; end;
      ExportTagXml("Ustrd",BankRefStr,3);               
      ExportPlainXml("</RmtInf>",2);          
      ExportPlainXml("</CdtTrfTxInf>",1);
        
LBankExpItalySEPA_Domestic_SKIPROW2:;    
    end;
  end;
  BankExpItalySEPA_Domestic_Footer;
  return;
end;
