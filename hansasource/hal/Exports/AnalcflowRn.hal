external procedure InitDateRange(var Date,var Date,Record RcVc);
external procedure UpdateDateRange(var Date,var Date,Record RcVc);
external procedure LabelDateRange(Date,Integer,var String);
external function val MulWithRateToBase1(var string,Date,val,roundmode);

function Val CashFlowSLAR( Date pStart, Date pEnd )
begin
  Record ARVc ARr;
  Record IVVc IVr;
  Val vRet;
  Boolean Skip,Cont;

  vRet= 0; Cont = true;
  ARr.DueDate= pStart;
  while(LoopKey("DueDate",ARr,1,Cont)) begin
    Skip= false;
    
    if (ARr.DueDate>pEnd) then begin
      Skip= true;
      Cont= false;
    end;
    
    IVr.SerNr = ARr.InvoiceNr;
    if readfirstmain(IVr,1,true) then begin
      if (IVr.InstallmentInv==1) then begin  // otherwise installment invoices are counted double
        Skip= true;
      end;
    end;
    if (not Skip) then begin
      vRet= vRet + ARr.BookRVal;
    end;
  end; // while
  CashFlowSLAR = vRet;
  return;
end;


function Val CashFlowPLAP( Date pStart, Date pEnd )
begin
  Record APVc APr;
  record APInstallVc APInstallr;
  Val vRet;
  Boolean Skip,Cont;
  
  vRet = 0; Cont = true;
  APr.DueDate = pStart;
  while(LoopKey("DueDate",APr,1,Cont)) begin
    
    Skip = false;
    if (APr.DueDate>pEnd) then begin
      Skip = true;
      Cont = false;
    end;
    
    APInstallr.VISerNr = APr.SerNr;
    if (ReadFirstMain(APInstallr,1,true)) then begin
      Skip = true;
    end;
    
    if (not Skip) then begin
       vRet= vRet + APr.BookRVal;
    end;
  end;
  CashFlowPLAP = vRet;
  return;
end;

function Val CashFlowSLInstall( Date pStart, Date pEnd )
begin
  Record ARInstallVc ARInstallr;
  Val vRet;
  Boolean Skip,Cont;

  vRet= 0; Cont = true;
  ARInstallr.DueDate= pStart;
  while(LoopKey("DueDate",ARInstallr,1,Cont)) begin
    Skip= false;
    
    if (ARInstallr.DueDate>pEnd) then begin
      Skip= true;
      Cont= false;
    end;

    if (not Skip) then begin
       vRet = vRet + ARInstallr.BookRVal;
    end;
  end; 
  CashFlowSLInstall = vRet;
  return;
end;

function Val CashFlowPLInstall( Date pStart, Date pEnd )
begin
  Record APInstallVc APInstallr;
  Val vRet;
  Boolean Skip,Cont;

  vRet= 0; Cont = true;
  APInstallr.DueDate= pStart;
  while(LoopKey("DueDate",APInstallr,1,Cont)) begin
    Skip= false;
    
    if (APInstallr.DueDate>pEnd) then begin
      Skip= true;
      Cont= false;
    end;

    if (not Skip) then begin
       vRet = vRet + APInstallr.BookRVal;
    end;
  end; 
  CashFlowPLInstall = vRet;
  return;
end;

function Val CashFlowOwnCheck( Date pStart, Date pEnd )
begin
  Record OwnCheckVc OwnCheckr;
  Val vRet;
  Boolean Skip,Cont;
  
  vRet = 0; Cont = true;
  OwnCheckr.EffectDate= pStart;
  while(LoopKey("EffectDate",OwnCheckr,1,Cont)) begin

    Skip = false;
    if (OwnCheckr.EffectDate>pEnd) then begin
      Skip = true;
      Cont = false;
    end;
    if (OwnCheckr.Openf!=kCheckTypeAccepted) then begin
      Skip = true;
    end;
    if (not Skip) then begin
      vRet = vRet + MulWithRateToBase1(OwnCheckr.CurncyCode,OwnCheckr.EffectDate,OwnCheckr.Amount,DefaultCurRoundOff);
    end;
  end;
  CashFlowOwnCheck = vRet;
  return;
end;

function Val CashFlowCheck(Date pStart, Date pEnd)
begin
  Record CheckVc Checkr;
  Val vRet;
  Boolean Skip,Cont;

  vRet = 0; Cont = true;
  Checkr.ECDate= pStart;
  while(LoopKey("OpenECDate",Checkr,1,Cont)) begin

    Skip = false;
    if (Checkr.ECDate>pEnd) then begin
      Skip = true;
      Cont = false;
    end;
    if (Checkr.Openf!=kCheckTypeAccepted) then begin
      Skip = true;
    end;
    if (not Skip) then begin
      vRet = vRet + MulWithRateToBase1(Checkr.CurncyCode,Checkr.ECDate,Checkr.Amount,DefaultCurRoundOff);
    end;
     
  end;
  CashFlowCheck = vRet;
  return;
end;

function Val CashFlowReservations( Date pStart, Date pEnd )
begin
  Record FollowUpVc FollowUpr;
  Val vRet;
  Boolean Skip,Cont;

  vRet= 0; Cont = true;
  FollowUpr.TransDate = pStart;
  while(LoopKey("TransDate",FollowUpr,1,Cont)) begin

    Skip= false;
    if (FollowUpr.TransDate>pEnd) then begin
      Skip = true;
      Cont = false;
    end;
    if (FollowUpr.OKFlag<>0) then begin
      Skip= true;
    end;
    
    if (not Skip) then begin
      vRet = vRet + FollowUpr.Amount;
    end;
  end;
  CashFlowReservations = vRet;
  return;
end;


procedure PrintHeaders(Record RcVc R)
begin
  ExportString("--");
  if (R.flags[1]==1) then begin 
    ExportString(USetStr(12090));
  end;  
  if (R.flags[2]==1) then begin 
    ExportString(USetStr(12091));
  end;  
  if (R.flags[3]==1) then begin 
    ExportString(USetStr(12092));
  end;  
  if (R.flags[4]==1) then begin 
    ExportString(USetStr(12093));
  end;  
  if (R.flags[5]==1) then begin 
    ExportString(USetStr(12094));
  end;  
  if (R.flags[6]==1) then begin 
    ExportString(USetStr(12095));
  end;  
  if (R.flags[7]==1) then begin 
    ExportString(USetStr(12096));
  end;  
  if (R.flags[8]==1) then begin 
    ExportString(USetStr(12097));
  end;  
  if (R.flags[9]==1) then begin 
    ExportString(USetStr(12098));
  end;  
  ExportString(USetStr(12099));
  ExportString(USetStr(12100));
  ExportString(USetStr(12101));
  return;
end;

procedure PrintResults(Record RcVc R,Date ps, Date pe)
begin
  val ci,co,t;
  
  ci = 0; co = 0;
  if (R.flags[1]==1) then begin 
    t = CashFlowSLAR(ps,pe);     ExportVal(t,M4Val); ci = ci + t;
  end;  
  if (R.flags[2]==1) then begin 
    t = CashFlowPLAP(ps,pe);      ExportVal(t,M4Val); co = co + t;
  end;  
  if (R.flags[3]==1) then begin 
    t = CashFlowSLInstall(ps,pe);  ExportVal(t,M4Val); ci = ci + t;
  end;  
  if (R.flags[4]==1) then begin 
    t = CashFlowPLInstall(ps,pe);  ExportVal(t,M4Val); co = co + t;
  end;  
  if (R.flags[5]==1) then begin 
    t = CashFlowCheck(ps,pe);       ExportVal(t,M4Val); ci = ci + t;
  end;  
  if (R.flags[6]==1) then begin 
    t = CashFlowOwnCheck(ps,pe);     ExportVal(t,M4Val); co = co + t;
  end;  
  if (R.flags[7]==1) then begin 
    t = CashFlowReservations(ps,pe);  ExportVal(t,M4Val); ci = ci + t;
  end;  
  ExportVal(ci,M4Val);
  ExportVal(co,M4Val);
  ExportVal((ci-co),M4Val);
  return;
end;

global
procedure ExportCashFlowEn(record RcVc RepSpec)
begin 
  Date sDate,eDate;
  String 60 tstr;

  tstr = GetDateID(RepSpec.sStartDate);

  PrintHeaders(RepSpec);
  NewLine;
  
  InitDateRange(sDate,eDate,RepSpec);
  while (sDate<=RepSpec.sEndDate) begin
    
    LabelDateRange(sDate,RepSpec.flags[0],tstr);
    ExportString(tstr);
    
    PrintResults(RepSpec,sDate,eDate);
    
    NewLine;
    UserTrace(eDate,M4Str);              
    UpdateDateRange(sDate,eDate,RepSpec);
  end;
  return;
end;
