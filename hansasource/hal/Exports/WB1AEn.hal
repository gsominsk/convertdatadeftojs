external function val FindAccTurnover(string,string,date,date,record ObjBalVc,Integer,Integer,string,Integer);
external procedure WBGetStartBalance(record ObjBalVc,string,Date,var val,Integer);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure SetWBZeroVals(var val,var val,var val,var val,var val,var val);
external procedure SetWBZeroVals1(var val,var val,var val,var val,var val,var val, var val);
external procedure ExportWB1Vals(string,val,val,val,val,val,val);
external procedure ExportWB1Vals10(string,val,val,val,val,val,val,val);
external procedure FindObjectBalance(record RcVc,Date,string,var val,var val,var val);
external procedure FindobjstrBudget(Date,Date,Date,Date,Integer,string,var val,var val,var val);
external procedure AddWBTotVals1(val,val,val,val,val,val,val,var val,var val,var val,var val,var val,var val,var val);
external procedure ExportWB1AHeader(record RcVc);
external function Boolean GetAccName(string,var string,Integer);
external procedure ConvertToBase2(Date,var val);
external procedure WBAccStartBalance(string,Date,Integer,var val);
external procedure GetObjstrBudget(string,var val);

procedure WB1AAccTurnovers(string accnumber,Date sd,Date ed,Date fsd,Date fed,Integer basecurncy,var val v1,var val v2,var val v3)
BEGIN
  record ObjBalVc ObjBalr;
  val t;
  
  ObjBalr.AccNumber = accnumber;
  ObjBalr.Object = "";
  if (ReadFirstMain(ObjBalr,2,true)) then begin
    v1 = FindAccTurnover(accnumber,"",sd,ed,ObjBalr,0,basecurncy,"",0);
    v2 = FindAccTurnover(accnumber,"",fsd,fed,ObjBalr,0,basecurncy,"",0);
    WBGetStartBalance(ObjBalr,"transdebit",ed,v3,basecurncy);     
    WBGetStartBalance(ObjBalr,"transcredit",ed,t,basecurncy);  
    v3 = v3 - t;   
  end;  
  RETURN;
END;

procedure FindAccountBudget(record RcVc RepSpec,Date fsd,Date fed,string accnumber,var val b1,var val b2,var val b3)
BEGIN
  record Bud1Vc Bud1r;
  row Bud1Vc Bud1rw;
  Integer i,rwcnt;
  val cv,yv,acv;
  Boolean TrHs,testf;
  
  Bud1r.AccNumber = accnumber;
  Bud1r.Objects = "";
  TrHs = true;
  if (LoopKey("AccObjKey",Bud1r,2,TrHs)) then begin
    testf = true;
    if (Bud1r.AccNumber<>accnumber) then begin TrHs = false; end;
    if (nonblank(Bud1r.Objects)) then begin testf = false; end;
    if (TrHs and testf) then begin
      rwcnt = MatRowCnt(Bud1r);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Bud1r,i,Bud1rw);
        if (Bud1rw.BudDate<=RepSpec.sEndDate) then begin
          acv = acv + Bud1rw.sval;
        end;  
        if (DateInRange(Bud1rw.BudDate,fsd,fed))  then begin
          yv = yv + Bud1rw.sval;
        end;            
        if (DateInRange(Bud1rw.BudDate,RepSpec.sStartDate,RepSpec.sEndDate))  then begin
          cv = cv + Bud1rw.sval;
        end;        
      end;    
      if (RepSpec.basecurncy==1) then begin
        ConvertToBase2(Bud1r.StartDate,cv);  
        ConvertToBase2(Bud1r.StartDate,yv);  
        ConvertToBase2(Bud1r.StartDate,acv);  
      end;        
      b1 = b1 + cv;
      b2 = b2 + yv;
      b3 = b3 + acv;
    end;  
  end;  
  RETURN;  
END;

procedure ExportWB1AVals3(string tstr,val v1,val v2,val v3,val v4)
BEGIN
  ExportString(tstr);
  ExportVal(v1,M4Val);
  ExportVal(v2,M4Val);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportVal(v3,M4Val);
  NewLine;
  RETURN;
END;

procedure ExportWB1AVals02(string tstr,val v1,val v2)
BEGIN
  ExportString(tstr);
  ExportString("");       //Add GT
  ExportVal(v1,M4Val);
  ExportVal(v2,M4Val);
  NewLine;
  RETURN;
END;

procedure ExportWB1AVals20(string tstr,val v1)
BEGIN
  ExportString(tstr);
  ExportVal(v1,M4Val);
// comented GT ExportVal(v2,M4Val);
  NewLine;
  RETURN;
END;

procedure ExportWB1AVals2(string tstr,val v1,val v2)
BEGIN
  ExportString(tstr);
  ExportVal(v1,M4Val);
  ExportVal(v2,M4Val);
  NewLine;
  RETURN;
END;

procedure ExportWB1AVals6(string tstr,val v1,val v2)
BEGIN
  ExportString(tstr);
  ExportVal(v1,M4Val);
  ExportVal(v1,M4Val);
  ExportVal(v1,M4Val);
  NewLine;
  RETURN;
END;

procedure ExportWB1AVals5(string tstr,val v1)
BEGIN
  ExportString(tstr);
  ExportVal(v1,M4Val);
  ExportVal(v1,M4Val);
  ExportVal(v1,M4Val);
  NewLine;
  RETURN;
END;

procedure AddWB1ATotVals3(val v1,val v2,val v3,val v4,var val tv1,var val tv2,var val tv3,var val tv4)
BEGIN
  tv1 = tv1 + v1;
  tv2 = tv2 + v2;
  tv3 = tv3 + v3;
  tv4 = tv4 + v4;
  RETURN;
END;

procedure AddWB1ATotVals(val v1,val v2,var val tv1,var val tv2)
BEGIN
  tv1 = tv1 + v1;
  tv2 = tv2 + v2;
  RETURN;
END;

global
procedure WB1AEn(record RcVc RepSpec)
BEGIN
  record ObjVc Objr;
  record AccVc Accr;
  Boolean TrHs;
  string 255 tstr;
  string 10 FirstAcc,LastAcc;//JJ
  Date fsd,fed;
  val accv1,accv2,accv3,b1,b2,b3,b4;
  val taccv1,taccv2,taccv3,tb1,tb2,tb3,tb4;
  val accv4,tbaccv11,tbaccv12,tbaccv13,tbaccv14;
    
  FirstAcc = FirstInRange(RepSpec.f1,10);  
  LastAcc = LastInRange(RepSpec.f1,10);  
  FindFiscalYear(RepSpec.sStartDate,fsd,fed);
  if (DateInRange(RepSpec.sEndDate,fsd,fed)==false) then begin goto L99; end;    
  ExportWB1AHeader(RepSpec);
  ExportString(USetStr(18900));
  NewLine;
  Accr.AccNumber = FirstAcc;
  TrHs = true;  
  while (LoopMain(Accr,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (Accr.AccNumber>LastAcc) then begin TrHs = false; end;
    end;
    if (nonblank(Accr.AccNumber) and TrHs) then begin
      WBAccStartBalance(Accr.AccNumber,RepSpec.sStartDate,RepSpec.basecurncy, accv1);
      WBAccStartBalance(Accr.AccNumber,fsd,RepSpec.basecurncy, accv2);
      GetAccName(Accr.AccNumber,tstr,60);
      ExportWB1AVals20(tstr,accv1);
      AddWB1ATotVals(accv1,accv2,tbaccv11,tbaccv12);
    end;
  end;  
  ExportWB1AVals20(USetStr(18901),tbaccv11);    
  NewLine;
  ExportString(USetStr(18902));
  NewLine;
  ExportString(USetStr(18903));
  NewLine;

  SetWBZeroVals1(taccv1,taccv2,taccv3,tb1,tb2,tb3,tb4);
  Objr.OTCode = RepSpec.TransStr;
  TrHs = true;
  ResetLoop(Objr);
  while (LoopKey("OTCode",Objr,1,TrHs)) begin
    if (Objr.OTCode<>RepSpec.TransStr) then begin TrHs = false; end;
    if (TrHs) then begin
      SetWBZeroVals1(accv1,accv2,accv3,b1,b2,b3,b4);
      accv1 =0;  // have to zero it out, even though it is zeroed out in the procedure above
      FindObjectBalance(RepSpec,fsd,Objr.Code,accv1,accv2,accv3); 
      FindobjstrBudget(RepSpec.sStartDate,RepSpec.sEndDate,fsd,fed,RepSpec.basecurncy,Objr.Code,b1,b2,b3);              
      GetObjstrBudget(Objr.Code,b4);      
      ExportWB1Vals10(Objr.Comment,accv1,accv2,accv3,b1,b2,b3,b4);      
      AddWBTotVals1(accv1,accv2,accv3,b1,b2,b3,b4,taccv1,taccv2,taccv3,tb1,tb2,tb3,tb4);
    end;
  end;  
  ExportWB1Vals10(USetStr(18901),taccv1,taccv2,taccv3,tb1,tb2,tb3,tb4);
  NewLine;  
  if (nonblank(RepSpec.AccStr)) then begin  
    WBAccStartBalance(RepSpec.AccStr,RepSpec.sStartDate,RepSpec.basecurncy, accv1);
    WBAccStartBalance(RepSpec.AccStr,RepSpec.sEndDate,RepSpec.basecurncy, accv2);
    accv1 = accv2 - accv1;
    ExportWB1AVals02(USetStr(18904),accv1,accv2);  //should export three values.
  end;  
  ExportString(USetStr(18905));
  NewLine;
  ExportString(USetStr(18906));
  NewLine;

  SetWBZeroVals1(taccv1,taccv2,taccv3,tb1,tb2,tb3,tb4);
  taccv1=0;  // have to zero it out, even though it is zeroed out in the procedure above
  Objr.OTCode = RepSpec.ObjType;
  TrHs = true;
  ResetLoop(Objr);
  while (LoopKey("OTCode",Objr,1,TrHs)) begin
    if (Objr.OTCode<>RepSpec.ObjType) then begin TrHs = false; end;
    if (TrHs) then begin
      SetWBZeroVals1(accv1,accv2,accv3,b1,b2,b3,b4);
      FindObjectBalance(RepSpec,fsd,Objr.Code,accv1,accv2,accv3); 
      FindobjstrBudget(RepSpec.sStartDate,RepSpec.sEndDate,fsd,fed,RepSpec.basecurncy,Objr.Code,b1,b2,b3);              
      GetObjstrBudget(Objr.Code,b4);      
      ExportWB1Vals10(Objr.Comment,accv1,accv2,accv3,b1,b2,b3,b4);      
      AddWBTotVals1(accv1,accv2,accv3,b1,b2,b3,b4,taccv1,taccv2,taccv3,tb1,tb2,tb3,tb4);
    end;
  end;  
  ExportWB1Vals10(USetStr(18901),taccv1,taccv2,taccv3,tb1,tb2,tb3,tb4);
  NewLine;
  
  Accr.AccNumber = FirstAcc;
  TrHs = true;  
  ResetLoop(Accr);
  ExportString(USetStr(18907));
  NewLine;
  while (LoopMain(Accr,1,TrHs)) begin
    if (nonblank(RepSpec.f1)) then begin
      if (Accr.AccNumber>LastAcc) then begin TrHs = false; end;
    end;
    if (nonblank(Accr.AccNumber)and TrHs) then begin
      WBAccStartBalance(Accr.AccNumber,RepSpec.sEndDate,RepSpec.basecurncy, accv3);
      WBAccStartBalance(Accr.AccNumber,fed,RepSpec.basecurncy, accv4);
      GetAccName(Accr.AccNumber,tstr,60);
      ExportWB1AVals20(tstr,accv3);
      tbaccv13 = tbaccv13 + accv3;
    end;
  end;      
  ExportWB1AVals20(USetStr(18901),tbaccv13);    
L99:;  
  RETURN;
END;
