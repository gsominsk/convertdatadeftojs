external procedure OutRegisterTag(string);
external procedure NewLineExport();
external function Boolean SetInSet2(string,string);

global
procedure Customer1En(record RcVc RepSpec)
begin
  record CUVc CUr;
  String 60 fr,to;
  Boolean found,testf,cufound;
  record MailSettingsBlock MBr;

  BlockLoad(MBr);
  fr = FirstInRange(RepSpec.f1,20);
  to = LastInRange(RepSpec.f1,20);
  CUr.Code = fr;
  found = true;
  
  
  
  // print out the header
  ExportString("Code");
  ExportString("Name");
  ExportString("Person");
  ExportString("WarnText1");
  ExportString("InvAddr0");
  ExportString("InvAddr1");
  ExportString("InvAddr2");
  ExportString("InvoiceToCode");
  ExportString("DelAddr0"); //Addr3
  ExportString("DelAddr1"); //Addr4
  ExportString("DelAddr2"); //Addr5
  ExportString("Phone");
  ExportString("Fax");
  ExportString("CustCat");
  ExportString("Comment");
  ExportString("PayDeal");
  ExportString("ExportFlag");
  ExportString("AccFlag");
  ExportString("Objects");
  ExportString("InterestFlag");
  ExportString("VATNr");
  ExportString("CountryCode");
  ExportString("SearchKey");
  ExportString("RemndrFlag");
  ExportString("LangCode");
  ExportString("CurncyCode");
  ExportString("OnAccount");
  ExportString("SalesMan");
  ExportString("CreditLimit");
  ExportString("ShipDeal");
  ExportString("ShipMode");
  ExportString("VATCode");
  ExportString("Department");
  ExportString("OrderComment");
  ExportString("FreightNr");
  ExportString("PLCode");
  ExportString("RebCode");
  ExportString("Classification");
  ExportString("blockedFlag");
  ExportString("DateChanged");
  ExportString("AccOperator");
  ExportString("SecAccount");
  ExportString("BankAccount");
  ExportString("JobDesc");
  ExportString("CustType");
  ExportString("ComCode");
  ExportString("Sorting");
  ExportString("RegNr1");
  ExportString("RegNr2");
  ExportString("CPRNr");
  ExportString("wwwAddr");
  ExportString("CompItemCode");
  ExportString("ANACode");
  ExportString("EDIFlag");
  ExportString("eMail");
  ExportString("IntRate");
  ExportString("TheirCode");
  ExportString("PriceBasedOn");
  ExportString("DeliveryBasedOn");
  ExportString("SalesGroup");
  ExportString("SortCode");
  ExportString("AllowLogin");
  ExportString("Password");
  ExportString("FTPLogin");
  ExportString("DateCreated");
  ExportString("EGOFlag");
  ExportString("InvAddr3");
  ExportString("DelAddr3");
  ExportString("xArea");
  ExportString("xAreaName");
  ExportString("InvAddr4");
  ExportString("DelAddr4");
  ExportString("WebConf");
  ExportString("WebStartPage");
  ExportString("FreightCode");
  ExportString("MainDispGroup");
  ExportString("AutoGiro");
  ExportString("OnHoldFlag");
  ExportString("ColectionFlag");
  ExportString("LocationCode");
  ExportString("WebDisplays");
  NewLine;
  
  
  
  
  while (LoopMain(CUr,1,found)) begin
    testf = true;
    if(nonblank(to)) then begin
      if (CUr.Code>to) then begin
        found = false;
      end;
    end;
    
    
    
    // Check category
    if (nonblank(RepSpec.f2)) then begin
      if (CUr.CustCat<>RepSpec.f2) then begin
        testf = false;
      end;
    end;
    
    
    // Check sales man
    if ((nonblank(RepSpec.f3)) and (CUr.SalesMan<>RepSpec.f3))  then begin 
      testf = false;
    end;
    
    
    // Check classification
    if (nonblank(RepSpec.Stext)) then begin
      if (SetInSet2(RepSpec.Stext,CUr.Classification)==false) then begin
        testf = false;
      end;
    end;
    
    
    // check if closed
    if (CUr.blockedFlag<>0) then begin testf = false; end;
    
    if (found==false) then begin
      testf = false;
    end;
    if (testf) then begin
      testf = false;
      if (CUr.CUType!=0) then begin if (RepSpec.flags[1]!=0) then begin testf = true; end; end;
      if (CUr.VEType!=0) then begin if (RepSpec.flags[0]!=0) then begin testf = true; end; end;
      if (CUr.GuestType!=0) then begin if (RepSpec.flags[2]!=0) then begin testf = true; end; end;
      if (CUr.DealerType!=0) then begin if (RepSpec.flags[3]!=0) then begin testf = true; end; end;
      if (CUr.EmployeeType!=0) then begin if (RepSpec.flags[5]!=0) then begin testf = true; end; end;
      if (CUr.CUType==0 and CUr.VEType==0 and CUr.GuestType==0 and CUr.DealerType==0 and CUr.EmployeeType==0) then begin
        if (RepSpec.flags[4]!=0) then begin
          testf = true;
        end;
      end;
    end;
    if(testf) then begin
      ExportString(CUr.Code);
      ExportString(CUr.Name);
      ExportString(CUr.Person);
      ExportString(CUr.WarnText1);
      ExportString(CUr.InvAddr0);
      ExportString(CUr.InvAddr1);
      ExportString(CUr.InvAddr2);
      ExportString(CUr.InvoiceToCode);
      ExportString(CUr.DelAddr0); //Addr3
      ExportString(CUr.DelAddr1); //Addr4
      ExportString(CUr.DelAddr2); //Addr5
      ExportString(CUr.Phone);
      ExportString(CUr.Fax);
      ExportString(CUr.CustCat);
      ExportString(CUr.Comment);
      ExportString(CUr.PayDeal);
      ExportString(CUr.ExportFlag);
      ExportString(CUr.AccFlag);
      ExportString(CUr.Objects);
      ExportString(CUr.InterestFlag);
      ExportString(CUr.VATNr);
      ExportString(CUr.CountryCode);
      ExportString(CUr.SearchKey);
      ExportString(CUr.RemndrFlag);
      ExportString(CUr.LangCode);
      ExportString(CUr.CurncyCode);
      ExportString(CUr.OnAccount);
      ExportString(CUr.SalesMan);
      ExportString(CUr.CreditLimit);
      ExportString(CUr.ShipDeal);
      ExportString(CUr.ShipMode);
      ExportString(CUr.VATCode);
      ExportString(CUr.Department);
      ExportString(CUr.OrderComment);
      ExportString(CUr.FreightNr);
      ExportString(CUr.PLCode);
      ExportString(CUr.RebCode);
      ExportString(CUr.Classification);
      ExportString(CUr.blockedFlag);
      ExportString(CUr.DateChanged);
      ExportString(CUr.AccOperator);
      ExportString(CUr.SecAccount);
      ExportString(CUr.BankAccount);
      ExportString(CUr.JobDesc);
      ExportString(CUr.CustType);
      ExportString(CUr.ComCode);
      ExportString(CUr.Sorting);
      ExportString(CUr.RegNr1);
      ExportString(CUr.RegNr2);
      ExportString(CUr.CPRNr);
      ExportString(CUr.wwwAddr);
      ExportString(CUr.CompItemCode);
      ExportString(CUr.ANACode);
      ExportString(CUr.EDIFlag);
      if (MBr.ExclEmail==0) then begin
        ExportString(CUr.eMail);
      end else begin
        ExportString("");
      end;
      ExportString(CUr.IntRate);
      ExportString(CUr.TheirCode);
      ExportString(CUr.PriceBasedOn);
      ExportString(CUr.DeliveryBasedOn);
      ExportString(CUr.SalesGroup);
      ExportString(CUr.SortCode);
      ExportString(CUr.AllowLogin);
      ExportString(CUr.Password);
      ExportString(CUr.FTPLogin);
      ExportString(CUr.DateCreated);
      ExportString(CUr.EGOFlag);
      ExportString(CUr.InvAddr3);
      ExportString(CUr.DelAddr3);
      ExportString(CUr.xArea);
      ExportString(CUr.xAreaName);
      ExportString(CUr.InvAddr4);
      ExportString(CUr.DelAddr4);
      ExportString(CUr.WebConf);
      ExportString(CUr.WebStartPage);
      ExportString(CUr.FreightCode);
      ExportString(CUr.MainDispGroup);
      ExportString(CUr.AutoGiro);
      ExportString(CUr.OnHoldFlag);
      ExportString(CUr.ColectionFlag);
      ExportString(CUr.LocationCode);
      ExportString(CUr.WebDisplays);
      NewLine;
    end; /* if(testf) */
  end; /* LoopMain */
  return;
end;
    
    
global
procedure ContactsEn(record RcVc RepSpec)
begin
  record CUVc CUr;
  String 60 fr,to;
  Boolean found,testf,cufound;
  record MailSettingsBlock MBr;

  fr = FirstInRange(RepSpec.f1,20);
  to = LastInRange(RepSpec.f1,20);
  ExportFormat;
  OutRegisterTag("CUVc");
  NewLineExport;
  CUr.Code = fr;
  found = true;
  
  while (LoopMain(CUr,1,found)) begin
    testf = true;
    if(nonblank(to)) then begin
      if (CUr.Code>to) then begin
        found = false;
      end;
    end;
    if (nonblank(RepSpec.f2)) then begin
      if (CUr.CustCat<>RepSpec.f2) then begin
        testf = false;
      end;
    end;
    if ((nonblank(RepSpec.f3)) and (CUr.SalesMan<>RepSpec.f3))  then begin 
      testf = false;
    end;
    if (nonblank(RepSpec.Stext)) then begin
      if (SetInSet2(RepSpec.Stext,CUr.Classification)==false) then begin
        testf = false;
      end;
    end;
    if (CUr.blockedFlag<>0) then begin testf = false; end;    
    if (found==false) then begin
      testf = false;
    end;
    if (testf) then begin
      testf = false;
      if (CUr.CUType!=0) then begin if (RepSpec.flags[1]!=0) then begin testf = true; end; end;
      if (CUr.VEType!=0) then begin if (RepSpec.flags[0]!=0) then begin testf = true; end; end;
      if (CUr.GuestType!=0) then begin if (RepSpec.flags[2]!=0) then begin testf = true; end; end;
      if (CUr.DealerType!=0) then begin if (RepSpec.flags[3]!=0) then begin testf = true; end; end;
      if (CUr.EmployeeType!=0) then begin if (RepSpec.flags[5]!=0) then begin testf = true; end; end;
      if (CUr.CUType==0 and CUr.VEType==0 and CUr.GuestType==0 and CUr.DealerType==0 and CUr.EmployeeType==0) then begin
        if (RepSpec.flags[4]!=0) then begin
          testf = true;
        end;
      end;
    end;
    if (testf) then begin
      ExportRecord(CUr);
      NewLineExport;
    end;
  end;
  return;
end;
    
    
        