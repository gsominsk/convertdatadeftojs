external procedure NewLineExport();

/* Bank Export For England BACS */
/* Programmed by Bj¿rn Schwab for 3.6 */ 
/* to be connected to 31 in  SetBegin(16); */


procedure ExportOnePayment(string sortcode,string sortcoderow,string bankacc,string bankaccrow,val recval,string invoicenr,string comment)
begin
  integer strl; 
  integer strl1;
  string 255 tstr;
  string 255 tstr2;
  integer i,rw,xzero;

  strl = 0; 
  xzero = 0;
  ExportPadString(sortcoderow,6," ",false);  //Sort Code only 6 characters
  ExportPadString(bankaccrow,8," ",false);  //Bank Account
  ExportPadString("0",1," ",false);  //Type of Bank Account 
  ExportPadString("99",2," ",false);  // Transaction Type ???
  ExportPadString(sortcode,6," ",false);  // Sort Code only 6 characters
  ExportPadString(bankacc,8," ",false); //Own Bank Account
  ExportPadString("    ",4," ",false);  //DDMM not used, only Credit Card
  tstr = ValToString(recval,M4Val,"","",0);
  ExportPadString(tstr,11,"0", true);
  ExportPadString("",18," ",false); // "Users Name", Ignored
  ExportPadString(invoicenr,18," ", false); // Reference Supplier Invoice Number
  ExportPadString(left(Uppercase(comment),18),18," ", false); // Reference Supplier Invoice Number
  NewLineExport;
  return;
end;

function Integer CheckIfVEinArray(string vecode,string sortcode,string sortcoderow,string bankacc,string bankaccrow,string invoicenr,val recval,string comment,
                                  array string avecode,array string avesortcode,array string avesortcoderow,array string avebankacc,
                                  array string avebankaccrow,array string aveinvoicenr,array val averecval,array string avecomment,Integer acnt)
begin
  Integer res;
  Integer i;
  Boolean testf
  
  res = -1;
  for (i=0;i<acnt;i=i+1) begin
    testf = true;
    if ((vecode!=avecode[i]) or (sortcode!=avesortcode[i]) or (sortcoderow!=avesortcoderow[i]) or (bankacc!=avebankacc[i]) or (bankaccrow!=avebankaccrow[i])) then begin
      testf = false;
    end;
    if (testf) then begin
      res = i;
      goto LCheckIfVeinArray;
    end;
  end;
LCheckIfVeinArray:;  
  CheckIfVeinArray = res;
  return;
end;

procedure AddToVEArray(string vecode,string sortcode,string sortcoderow,string bankacc,string bankaccrow,string invoicenr,val recval,string comment,
                       array string avecode,array string avesortcode,array string avesortcoderow,array string avebankacc,
                       array string avebankaccrow,array string aveinvoicenr,array val averecval,array string avecomment,var Integer acnt)
begin
  avecode[acnt] = vecode;
  avesortcode[acnt] = sortcode;
  avesortcoderow[acnt] = sortcoderow;
  avebankacc[acnt] = bankacc;
  avebankaccrow[acnt] = bankaccrow;
  aveinvoicenr[acnt] = invoicenr;
  averecval[acnt] = recval;
  avecomment[acnt] = Comment;
  acnt = acnt + 1;
  return;
end;

global
procedure BankExpEngEn1(record RcVc RepSpec,record OPVc OPr)
begin
  row OPVc OPrw;
  Integer i,rwcnt;
  record VIVc VIr;
  Boolean TrHs;
  string 255 InvoiceNr;  
  Integer PayperSupplier;
  string 20 supplaccnr;
  string 20 sortcode;
  record CUVc VEr,VE2r;
  Integer acnt,ai;
  Array string 255 avecode;
  Array string 255 avesortcode;
  Array string 255 avesortcoderow;
  Array string 255 avebankacc;
  Array string 255 avebankaccrow;
  Array string 255 aveinvoicenr;
  Array string 255 avecomment;
  Array val averecval;
  string 255 comm;
  
  PayperSupplier = OPr.PayperSupplier;
  if (PayperSupplier==0) then begin
    PayperSupplier = RepSpec.flags[5];
  end;
  rwcnt = MatRowCnt(OPr);
  switch (PayperSupplier) begin
    case 0:
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if (OPrw.ovst!=1 and OPrw.stp==kPaymentRowTypeNormal) then begin
          VIr.SerNr = OPrw.VISerNr;
          if (ReadFirstMain(VIr,1,true)) then begin end;   
          InvoiceNr = VIr.InvoiceNr;
          supplaccnr = OPrw.BankAcc;
          sortcode = OPrw.SortCode;
          VEr.Code = OPrw.VECode;
          comm = OPrw.Comment;
          if ReadFirstMain(VEr,1,true) then begin
            if nonblank(VEr.Bank) then begin 
              comm = VEr.Bank;
            end;
            if blank(VEr.VEFactoring) then begin 
              supplaccnr = VEr.BankAccount;
              sortcode = VEr.SortCode;
            end else begin
              VE2r.Code = VEr.VEFactoring;
              if ReadFirstMain(VE2r,1,true) then begin 
                supplaccnr = VE2r.BankAccount;
                sortcode = VE2r.SortCode;
              end;
            end;  
          end;
          ExportOnePayment(OPr.SortCode,sortcode,OPr.BankAcc,supplaccnr,OPrw.RecVal,InvoiceNr,comm);
        end;    
      end;
    case 1:
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        if (OPrw.ovst!=1 and OPrw.stp==kPaymentRowTypeNormal) then begin //cust start 26.08.09
          VIr.SerNr = OPrw.VISerNr;
          if (ReadFirstMain(VIr,1,true)) then begin end;      
          InvoiceNr = VIr.InvoiceNr;
          supplaccnr = OPrw.BankAcc;
          sortcode = OPrw.SortCode;
          VEr.Code = OPrw.VECode;
          if ReadFirstMain(VEr,1,true) then begin
            if nonblank(VEr.Bank) then begin 
              comm = VEr.Bank;
            end;
            if blank(VEr.VEFactoring) then begin 
              supplaccnr = VEr.BankAccount;
              sortcode = VEr.SortCode;
            end else begin
              VE2r.Code = VEr.VEFactoring;
              if ReadFirstMain(VE2r,1,true) then begin 
                supplaccnr = VE2r.BankAccount;
                sortcode = VE2r.SortCode;
              end;
            end;  
          end;
          ai = CheckIfVEinArray(OPrw.VECode,OPr.SortCode,sortcode,OPr.BankAcc,supplaccnr,InvoiceNr,OPrw.RecVal,comm,
                               avecode,avesortcode,avesortcoderow,avebankacc,avebankaccrow,aveinvoicenr,averecval,avecomment,acnt);
          if (ai>-1) then begin
            averecval[ai] = averecval[ai] + OPrw.RecVal;
            InvoiceNr = VIr.InvoiceNr;
            if (nonblank(aveinvoicenr[ai])) then begin
              aveinvoicenr[ai] = aveinvoicenr[ai] & ",";
            end;
            aveinvoicenr[ai] = aveinvoicenr[ai] & InvoiceNr;
            if (nonblank(avecomment[ai])) then begin
              avecomment[ai] = avecomment[ai] & ",";
            end;
            avecomment[ai] = avecomment[ai] & OPrw.Comment;
          end else begin
            AddToVEArray(OPrw.VECode,OPr.SortCode,sortcode,OPr.BankAcc,supplaccnr,InvoiceNr,OPrw.RecVal,comm,
                        avecode,avesortcode,avesortcoderow,avebankacc,avebankaccrow,aveinvoicenr,averecval,avecomment,acnt);
         end;
       end;  
     end;
     for (ai=0;ai<acnt;ai=ai+1) begin        
       ExportOnePayment(avesortcode[ai],avesortcoderow[ai],avebankacc[ai],avebankaccrow[ai],averecval[ai],aveinvoicenr[ai],avecomment[ai]);
     end;
  end;  
  return;
end;

/*
global
procedure BankExpEngEn1(record RcVc RepSpec,record OPVc OPr)
begin
  Row OPVc OPrw;
  Record VIVc VIr;
  Boolean TrHs;
  Integer i,rwcnt;
  Boolean testf;
  string 255 tstr;
  string 255 tstr2;
  integer rw, xzero;
  integer strl; 
  integer strl1;
  LongInt frop,toop;
  
  strl = 0; 
  xzero = 0;
  rwcnt = MatRowCnt(OPr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(OPr,i,OPrw);
    ExportPadString(OPrw.SortCode,6," ",false);  //Sort Code only 6 characters
    ExportPadString(OPrw.BankAcc,8," ",false);  //Bank Account
    ExportPadString("0",1," ",false);  //Type of Bank Account 
    ExportPadString("99",2," ",false);  // Transaction Type ???
    ExportPadString(OPr.SortCode,6," ",false);  // Sort Code only 6 characters
    ExportPadString(OPr.BankAcc,8," ",false); //Own Bank Account
    ExportPadString("    ",4," ",false);  //DDMM not used, only Credit Card
    strl = len(OPrw.RecVal);
    strl1 = strl - 3;
    tstr = left(OPrw.RecVal,strl1);
    //This routine should put in zeroes if strl1 < 9 characters.
    //Don«t know if it works.
    if (strl1 < 9) then begin
      xzero = 9 - strl1;
      for (i = 0 ; i < xzero ;i=i+1) begin
        tstr2 = tstr2 & "0";
      end;
      ExportPadString(tstr2,len(tstr2)," ",false);
    end;
    ExportPadString(tstr,len(tstr)," ",false);    // Sent Amount Integral Part
    tstr = right(OPrw.RecVal,2);
    ExportPadString(tstr,2," ", false); // Decimals of Sent Amount
    ExportPadString("",18," ",false); // "Users Name", Ignored
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      ExportPadString(VIr.InvoiceNr,18," ", false); // Reference Supplier Invoice Number
    end else begin
      ExportPadString("",18," ", false); // Reference Supplier Invoice Number
    end;
    
    ExportPadString(left(Uppercase(OPrw.Comment),18),18," ", false); // Reference Supplier Invoice Number
        
    NewLine;
  end; 
  return;
end;
*/