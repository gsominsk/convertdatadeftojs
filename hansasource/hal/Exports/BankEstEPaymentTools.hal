external function val ValFromString(string,string,string);
external function string 255 StripCharacter(string,string);
external function boolean SetinSet2(string,string);
external function roundmode SetRoundModeD(integer);
external function string 100 CreateCompID();
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function string 255 ConvertXml(string);
external function Boolean CurencyCodeIsISO(string);

function string 255 GetBankSwift(string bankcode)
begin
  string 255 res;
  record BankVc Bankr;

  Bankr.Code = bankcode;
  if (ReadFirstmain(Bankr,1,true)) then begin
    res = Bankr.SWIFT;
  end;
  GetBankSwift = res;
  return;
end;

function string 255 GetBankName(string bankcode)
begin
  string 255 res;
  record BankVc Bankr;

  Bankr.Code = bankcode;
  if (ReadFirstmain(Bankr,1,true)) then begin
    res = Bankr.Name;
  end;
  GetBankName = res;
  return;
end;

/*global
function string 255 CreateCustID()
begin
  string 100 res;
  record InternetEnablerBlock IEb;
  BlockLoad(IEb);
  res = IEb.CustomerCode;
  res = res & ":";//is : ok?
  res = res & IEb.EnablerRegistration;
  res = res & ":";
  res = res & CurrentCompany;
  CreateCustID = res;
return;
end;
*/

procedure ConvertIBANChars(var string tstr)
begin
  string 255 res;
  string 255 ch;
  integer i,l;
  res = "";
  l = Len(tstr);
  for (i = 0; i < l; i = i + 1) begin
    ch = mid(tstr,i,1);
    switch mid(tstr,i,1) begin
      case "A": ch = "10";
      case "B": ch = "11";
      case "C": ch = "12";
      case "D": ch = "13";
      case "E": ch = "14";
      case "F": ch = "15";
      case "G": ch = "16";
      case "H": ch = "17";
      case "I": ch = "18";
      case "J": ch = "19";
      case "K": ch = "20";
      case "L": ch = "21";
      case "M": ch = "22";
      case "N": ch = "23";
      case "O": ch = "24";
      case "P": ch = "25";
      case "Q": ch = "26";
      case "R": ch = "27";
      case "S": ch = "28";
      case "T": ch = "29";
      case "U": ch = "30";
      case "V": ch = "31";
      case "W": ch = "32";
      case "X": ch = "33";
      case "Y": ch = "34";
      case "Z": ch = "35";      
    end;
    res = res & ch;

  end;
  tstr = res;
return;
end;

function Boolean ValidateIBANCheckDigits(string convertediban)
begin
  Boolean res;
  string 255 remainingiban,tstr;
  LongInt l;
  
  tstr = Left(convertediban,9);
  remainingiban = Right(convertediban,Len(convertediban)-9);
  l = StringToLongInt(tstr);
  
  while (Len(remainingiban)>0) begin
    tstr = Mod(l,97) & Left(remainingiban,7);
    remainingiban = Right(remainingiban,Len(remainingiban)-7);
    l = StringToLongInt(tstr);
  end;
  
  ValidateIBANCheckDigits = Mod(l,97)==1;
end;

global
function boolean ValidateIBAN(string aiban)
begin
  string 255 iban;
  string 255 clist1,clist2,clist3,clist4,clist5,clist6,clist7;
  string 255 tstr,tstr2,tstr3,tstr4,tstr5,ch;
  boolean res;
  longint v,v2;
  integer pos,checklen;
  val v1;
  longint t,modv;
  Integer i;
  
  iban = StripCharacter(aiban," ");
  clist1 = "AF,AX,AL,DZ,AS,AD,AO,AI,AQ,AG,AR,AM,AW,AU,AT,AZ,BS,BH,BD,BB,BY,BE,BZ,BJ,BM,BT,BO,BA,BW,BV,BR,IO,BN,BG,BF,BI,KH,CM,CA,CV";
  clist4 = "KE,KY,CF,TD,CL,CN,CX,CC,CO,KM,CG,CD,CK,CR,CI,HR,CU,CY,CZ,DK,DJ,DM,DO,EC,EG,SV,GQ,ER,EE,ET,FK,FO,FJ,FI,FR,GF,PF,TF,GA,GM";
  clist2 = "GE,DE,GH,GI,GR,GL,GO,GP,GJ,GT,GG,GN,GW,GY,HT,HT,HM,VA,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IM,IL,IT,jM,JP,JE,JO,KZ,KE,KI,KP,KR,KW";
  clist5 = "KG,LA,LV,LB,LS,LR,LY,LI,LT,LU,MD,MO,MK,MG,MW,MY,MV,ML,MT,MH,MQ,MR,MU,QT,MX,FM,MD,MC,MN,ME,MS,MA,MZ,MM,NA,NR,NP,NL,AN,NC,NZ";
  clist3 = "NI,NE,NG,NU,NF,MP,NO,OM,PW,PS,PA,PG,PY,PE,PH,PN,PL,FT,PR,QA,RE,RO,RU,RW,BL,SH,KN,LC,MF,PM,VC,WS,SM,ST,SA,SN,RS,SC,SL,SG";
  clist6 = "SK,SI,SB,SO,ZA,GS,ES,LK,SD,SR,SJ,SZ,SE,CH,SY,TW,TJ,TZ,TH,TL,TG,TK,TO,TT,TN,TR,TM,TC,TV,UG,UA,AE,GB,US,UM,UY,UZ,VU,VE,VN";
  clist7 = "VG,VI,WF,EH,YE,ZM,ZW,PK,PT";
  res = true;
  checklen = 21;
  switch left(iban,2) begin
    case "AD": checklen = 24;
    case "AE": checklen = 23;
    case "AL": checklen = 28;
    case "AO": checklen = 25;
    case "AT": checklen = 20;
    case "BA": checklen = 20;
    case "BE": checklen = 16;
    case "BF": checklen = 27;
    case "BG": checklen = 22;
    case "BI": checklen = 16;
    case "BJ": checklen = 28;
    case "CH": checklen = 21;
    case "CI": checklen = 28;
    case "CM": checklen = 27;
    case "CV": checklen = 25;
    case "CY": checklen = 28;
    case "CZ": checklen = 24;
    case "DE": checklen = 22;
    case "DK": checklen = 18;
    case "EE": checklen = 20;
    case "ES": checklen = 24;
    case "FI": checklen = 18;
    case "FO": checklen = 18;
    case "FR": checklen = 27;
    case "GB": checklen = 22;
    case "GE": checklen = 22;
    case "GI": checklen = 23;
    case "GL": checklen = 18;
    case "GR": checklen = 27;
    case "HR": checklen = 21;
    case "HU": checklen = 28;
    case "IE": checklen = 22;
    case "IL": checklen = 23;
    case "IR": checklen = 26;
    case "IS": checklen = 26;
    case "IT": checklen = 27;
    case "KW": checklen = 30;
    case "KZ": checklen = 20;
    case "LB": checklen = 28;
    case "LI": checklen = 21;
    case "LT": checklen = 20;
    case "LU": checklen = 20;
    case "LV": checklen = 21;
    case "MC": checklen = 27;
    case "MD": checklen = 24;
    case "ME": checklen = 22;
    case "MG": checklen = 27;
    case "MK": checklen = 19;
    case "ML": checklen = 28;
    case "MR": checklen = 27;
    case "MT": checklen = 31;
    case "MU": checklen = 30;
    case "MZ": checklen = 25;
    case "NL": checklen = 18;
    case "NO": checklen = 15;
    case "PT": checklen = 25;
    case "PL": checklen = 28;
    case "RO": checklen = 24;
    case "RS": checklen = 22;
    case "SA": checklen = 24;
    case "SE": checklen = 24;
    case "SI": checklen = 19;
    case "SK": checklen = 24;
    case "SM": checklen = 27;
    case "SN": checklen = 28;
    case "TR": checklen = 26;
    case "TN": checklen = 24;
    case "AE": checklen = 23;
  end;
  if (len(iban)!=checklen) then begin
    res = false;
  end;
  if (SetInSet(left(iban,2),clist1)==false) and 
     (SetInSet(left(iban,2),clist2)==false) and 
     (SetInSet(left(iban,2),clist3)==false) and 
     (SetInSet(left(iban,2),clist4)==false) and 
     (SetInSet(left(iban,2),clist5)==false) and 
     (SetInSet(left(iban,2),clist6)==false) and 
     (SetInSet(left(iban,2),clist7)==false) then begin
    res = false;
  end;
  tstr = right(iban,len(iban)-4) & left(iban,4);
  ConvertIBANChars(tstr)
  if (ValidateIBANCheckDigits(tstr)==false) then begin
    res = false;
  end;
  ValidateIBAN = res;
  return;
end;

function boolean OnlyValidCharsInIBAN(string iban)
begin
  boolean res;
  integer i,l;
  string 1 ch;
  
  l = len(iban);
  for (i=0;i<l;i=i+1) begin
    ch = Mid(iban,i,1);
    res = ((asc(ch)>=65 and asc(ch)<=90)   // A-Z
        or (asc(ch)>=97 and asc(ch)<=122)  // a-z
        or (asc(ch)>=48 and asc(ch)<=57)); // 0-9
    if (res==false) then begin
      i = l;
    end;
  end;
  
  OnlyValidCharsInIBAN = res;
  return;
end;

function boolean ValidateSwedPaymentRow(Integer ctype,record OPVc OPr,row OPVc OPrw,record CUVc Ver,var Integer rerror)
begin
  boolean res;
  string 255 tstr;

  res = true;
  if (blank(OPr.BankAcc)) then begin
    res = false;
    rerror = 27311;
  end;
  
  if (ValidateIBAN(OPr.BankAcc)==false or OnlyValidCharsInIBAN(OPr.BankAcc)==false) then begin
    res = false;
    rerror = 27309;
  end;
  if (nonblank(OPrw.BankAcc)) then begin
    tstr = OPrw.BankAcc;
  end else begin
    tstr = VEr.BankAccount;
  end;
  if (OPr.ForeignPayment!=1) then begin
    if (ValidateIBAN(tstr)==false or OnlyValidCharsInIBAN(tstr)==false) then begin
      res = false;
      rerror = 27319;
    end;
  end;
  if (ctype!=1) then begin
    if (blank(GetBankSwift(VEr.AccOperator))) then begin
      res = false;
      rerror = 27313;
    end;
  end;
  if (blank(Oprw.Comment)) then begin
    res = false;
    rerror = 27314;
  end;
  if (CurencyCodeIsISO(OPrw.RecCurncy)==false) then begin
    res = false;
    rerror = 27315;
  end;
  if (len(ConvertXml(Ver.Name))>200) then begin
    res = false;
    rerror = 27316;
  end;
  if (len(ConvertXml(Oprw.Comment))>300) then begin
    res = false;
    rerror = 27317;
  end;
  if (ctype==1) then begin
    tstr = Oprw.rkPayNumber;
    if (blank(tstr)) then begin tstr = Oprw.BankRefStr; end;
    if (blank(tstr)) then begin tstr = OPr.PayNumber; end;
    if (len(ConvertXml(tstr))>20) then begin
      res = false;
      rerror = 27318;
    end;
  end;
  
  ValidateSwedPaymentRow = res;
  return;
end;

global
procedure BankExpDomesticSwedbankArea(record OPVc OPr,Integer PayMethod,Integer PayperSupplier,Integer ctype,var Area a_tmp,var Integer nrofpaym,var string rerror)
begin
  record BankVc Bankr;
  record CYBlock CompYear;
  record PMBlock PMBlk;
  row PMBlock PMBlkrw;
  record CUVc VEr;
  record VIVc VIr;
  row OPVc OPrw;
  Integer i,rwcnt,j,rwcnt1;
  Integer nr;
  string 200 tstr;
  boolean found,foundt;
  boolean all;
  string 20 suppl;
  val koondval;
  array string 20 vendor;
  array integer rownr;
  array val payval;
  array string 82 comment;
  integer k,t,x;
  boolean ftest; 
  string 2 ccode,pmode;
  string 255 suplinv;
  string 255 padedstr;
  string 20 invstr;
  Integer err;

  BlockLoad(CompYear);
  BlockLoad(PMBlk);
  rwcnt = MatRowCnt(OPr);
  //normal  
  switch (ctype) begin
   case 0: ccode = "LV"; invstr = "R.Nr. ";
   case 1: ccode = "EE"; invstr = "Arve Nr ";
   case 2: ccode = "LT";
  end;
  pmode = "N";
  switch (PayMethod) begin
    case 1: pmode = "U";
    case 2: pmode = "U";
  end;
  AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>" & chr(13),a_tmp);
  AddTextToArea("<B4B>"& chr(13),a_tmp);
  AddTextToArea("  <Payments>" & chr(13),a_tmp);
  if (PayperSupplier == 0) then begin 
    for (i = 0; i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      if ((OPrw.stp==1) and (OPrw.ovst==0)) then begin
        VEr.Code = OPrw.VECode;
        found = ReadFirstMain(VEr,1,true);
        if (nonblank(VEr.VEInvoiceToCode)) then begin
          VEr.Code = VEr.VEInvoiceToCode;
          found = ReadFirstMain(VEr,1,true);
        end;
        if (found==false) then begin
          goto LSkipRow1;
        end;
        if (ValidateSwedPaymentRow(ctype,OPr,OPrw,VEr,err)==false) then begin
          MessageBox(err,"");
          rerror = err;
          nrofpaym = 0;
          goto LBankExpDomesticSwedbankArea;
        end;

        nrofpaym = nrofpaym + 1;
        AddTextToArea("    <DomesticPayment" & ccode & ">"& chr(13),a_tmp);
        AddTextToArea("      <ID>" & ConvertXml(CreateCompID & "-" & OPr.SerNr & "-" & i+1) & "</ID>" & chr(13),a_tmp );
        AddTextToArea("      <DocumentNumber>" & ConvertXml(OPr.SerNr) & "</DocumentNumber>" & chr(13),a_tmp);
        AddTextToArea("      <ValueDate>" & ConvertXml(DateToString(OPr.TransDate,"YYYY-MM-DD")) & "</ValueDate>" & chr(13),a_tmp);
        AddTextToArea("      <Priority>" & ConvertXml(pmode) & "</Priority>" & chr(13),a_tmp);
        AddTextToArea("      <RemitterIBAN>" & ConvertXml(OPr.BankAcc) & "</RemitterIBAN>" & chr(13),a_tmp);
        AddTextToArea("      <Amount>" & ConvertXml(ValToString(OPrw.RecVal,M4Val,"",".",0)) & "</Amount>" & chr(13),a_tmp);
        AddTextToArea("      <Currency>" & ConvertXml(OPrw.RecCurncy) & "</Currency>" & chr(13),a_tmp);
        if (nonblank(OPrw.BankAcc)) then begin
          tstr = OPrw.BankAcc;
        end else begin
          tstr = VEr.BankAccount;
        end;
        AddTextToArea("      <BeneficiaryIBAN>" & ConvertXml(tstr) & "</BeneficiaryIBAN>" & chr(13),a_tmp);
        AddTextToArea("      <BeneficiaryName>" & ConvertXml(Ver.Name) & "</BeneficiaryName>" & chr(13),a_tmp);
        AddTextToArea("      <Details>" & ConvertXml(Oprw.Comment) & "</Details>" & chr(13),a_tmp);
        if (ctype==0) then begin
          if false then begin
            AddTextToArea("      <BudgetCode>" & "" & "</BudgetCode>" & chr(13),a_tmp);
          end;
          AddTextToArea("      <BeneficiaryID>" & ConvertXml(Ver.VATNr) & "</BeneficiaryID>" & chr(13),a_tmp);
          AddTextToArea("      <BeneficiaryResidence>" & ConvertXml(Ver.CountryCode) & "</BeneficiaryResidence>" & chr(13),a_tmp);
          AddTextToArea("      <BeneficiaryBankCode>" & ConvertXml(GetBankSwift(VEr.AccOperator)) & "</BeneficiaryBankCode>" & chr(13),a_tmp);
        end;
        if (ctype==1) then begin
          tstr = Oprw.rkPayNumber;
          if (blank(tstr)) then begin tstr = Oprw.BankRefStr; end;
          if (blank(tstr)) then begin tstr = OPr.PayNumber; end;
          AddTextToArea("      <ReferenceNumber>" & ConvertXml(tstr) & "</ReferenceNumber>" & chr(13),a_tmp);
        end;
        AddTextToArea("    </DomesticPayment" & ccode & ">" & chr(13),a_tmp);
      end;
      LSkipRow1:;
    end;
  end;
  if (PayperSupplier==1) then begin
    //one payment per supplier
    k = 0;
    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      VIr.SerNr = OPrw.VISerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        suplinv = VIr.InvoiceNr;
      end else begin
        suplinv = OPrw.VISerNr;
      end;

      ReadFirstMain(VEr,1,true);
      if ((OPrw.stp==1) and (OPrw.ovst==0)) then begin
        if (k == 0) then begin
          vendor[k] = OPrw.VECode;
          rownr[k] = i;
          payval[k] = OPrw.RecVal;
          if (OPrw.VISerNr<>-1) then begin
            comment[k] = invstr &  suplinv;
          end;  
          k = 1;
        end else begin
          ftest = false;
          for (t = 0; t<k; t = t + 1) begin
            if (vendor[t] == OPrw.VECode) then begin
              payval[t] = payval[t] + OPrw.RecVal;
              if (OPrw.VISerNr<>-1) then begin
                comment[t] = comment[t] & "," &  suplinv;
              end;  
              ftest = true;
            end;
          end;
          if (ftest == false) then begin
            vendor[k] = OPrw.VECode;
            rownr[k] = i;
            payval[k] = OPrw.RecVal;
            if (OPrw.VISerNr<>-1) then begin
              comment[k] = invstr &  suplinv;
            end;  
            k = k + 1;
          end;
        end;
      end;
    end;  
    for (t = 0; t<k; t = t + 1) begin
      VEr.Code = vendor[t];
      foundt = ReadFirstMain(VEr,1,true);
      if nonblank(VEr.VEInvoiceToCode) then begin
        VEr.Code = VEr.VEInvoiceToCode;
        foundt = ReadFirstMain(VEr,1,true);
      end;
      MatRowGet(OPr,rownr[t],OPrw);
      if (ValidateSwedPaymentRow(ctype,OPr,OPrw,VEr,err)==false) then begin
        MessageBox(err,"");
        rerror = err;
        nrofpaym = 0;
        goto LBankExpDomesticSwedbankArea;
      end;
      nrofpaym = nrofpaym + 1; 
      AddTextToArea("    <DomesticPayment" & ccode & ">"& chr(13),a_tmp);
      AddTextToArea("      <ID>" & ConvertXml(CreateCompID & "-" & OPr.SerNr & "-" & i+1) &  "</ID>" & chr(13),a_tmp );
      AddTextToArea("      <DocumentNumber>" & ConvertXml(OPr.SerNr) & "</DocumentNumber>" & chr(13),a_tmp);
      AddTextToArea("      <ValueDate>" & ConvertXml(DateToString(OPr.TransDate,"YYYY-MM-DD")) & "</ValueDate>" & chr(13),a_tmp);
      AddTextToArea("      <Priority>" & ConvertXml(pmode) & "</Priority>" & chr(13),a_tmp);
      AddTextToArea("      <RemitterIBAN>" & ConvertXml(OPr.BankAcc) & "</RemitterIBAN>" & chr(13),a_tmp);
      AddTextToArea("      <Amount>" & ConvertXml(ValToString(payval[t],M4Val,"",".",0)) & "</Amount>" & chr(13),a_tmp);
      AddTextToArea("      <Currency>" & ConvertXml(Opr.PayCurCode) & "</Currency>" & chr(13),a_tmp);
      if (nonblank(OPrw.BankAcc)) then begin
        tstr = OPrw.BankAcc;
      end else begin
        tstr = VEr.BankAccount;
      end;
      AddTextToArea("      <BeneficiaryIBAN>" & ConvertXml(tstr) & "</BeneficiaryIBAN>" & chr(13),a_tmp);
      AddTextToArea("      <BeneficiaryName>" & ConvertXml(Ver.Name) & "</BeneficiaryName>" & chr(13),a_tmp);
      AddTextToArea("      <Details>" & ConvertXml(comment[t]) & "</Details>" & chr(13),a_tmp);
      if (ctype==0) then begin
        AddTextToArea("      <BudgetCode>" & "" & "</BudgetCode>" & chr(13),a_tmp);
        AddTextToArea("      <BeneficiaryID>" & ConvertXml(Ver.VATNr) & "</BeneficiaryName>" & chr(13),a_tmp);
        AddTextToArea("      <BeneficiaryResidence>" & ConvertXml(Ver.CountryCode) & "</BeneficiaryResidence>" & chr(13),a_tmp);
       // AddTextToArea("      <BalanceOfPaymentCode>" & "" & "</BalanceOfPaymentCode>" & chr(13),a_tmp);
        AddTextToArea("      <BeneficiaryBankCode>" & ConvertXml(GetBankSwift(VEr.AccOperator)) & "</BeneficiaryBankCode>" & chr(13),a_tmp);
      end;
      if (ctype==1) then begin
        tstr = Oprw.rkPayNumber;
        if (blank(tstr)) then begin tstr = Oprw.BankRefStr; end;
        if (blank(tstr)) then begin tstr = OPr.PayNumber; end;
        AddTextToArea("      <ReferenceNumber>" & ConvertXml(tstr) & "</ReferenceNumber>" & chr(13),a_tmp);
      end;
      AddTextToArea("    </DomesticPayment" & ccode & ">" & chr(13),a_tmp);
    end;    
  end;  
  AddTextToArea("  </Payments>" & chr(13),a_tmp);
  AddTextToArea("</B4B>" & chr(13),a_tmp);
LBankExpDomesticSwedbankArea:;
  return;
end;



global
procedure BankExpForeignSwedbankArea(record OPVc OPr,Integer PayMethod,Integer PayperSupplier,integer ctype,var Area a_tmp,var Integer nrofpaym,var string rerror)
begin
  record BankVc Bankr;
  record CYBlock CompYear;
  record PMBlock PMBlk;
  row PMBlock PMBlkrw;
  record CUVc VEr;
  record VIVc VIr;
  row OPVc OPrw;
  Integer i,rwcnt,j,rwcnt1;
  Integer nr;
  string 200 tstr;
  boolean found,foundt;
  boolean all;
  string 20 suppl;
  val koondval;
  array string 20 vendor;
  array integer rownr;
  array val payval;
  array string 82 comment;
  integer k,t,x;
  boolean ftest; 
  string 2 ccode,pmode,bfee;
  string 255 suplinv;
  string 255 padedstr;
  string 20 invstr;
  Integer err;

  BlockLoad(CompYear);
  BlockLoad(PMBlk);
  rwcnt = MatRowCnt(OPr);
  //normal  
  switch (ctype) begin
   case 0: ccode = "LV"; invstr = "R.Nr. ";
   case 1: ccode = "EE"; invstr = "Arve Nr ";
   case 2: ccode = "LT";
  end;
  switch (OPr.Bankfees) begin
    case 0: bfee = "O";
    case 1: bfee = "B";
    case 2: if ctype==0 then begin bfee = "O"; end else  begin bfee = "S"; end;
  end;
  switch (PayMethod) begin
    case 0: pmode = "N";
    case 1: pmode = "U";
    case 2: pmode = "U";
  end;
  AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>"& chr(13),a_tmp);
  AddTextToArea("<B4B>"& chr(13),a_tmp);
  AddTextToArea("  <Payments>" & chr(13),a_tmp);
  if (PayperSupplier == 0) then begin 
    for (i = 0; i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      if ((OPrw.stp==1) and (OPrw.ovst==0)) then begin
        VEr.Code = OPrw.VECode;
        found = ReadFirstMain(VEr,1,true);
        if nonblank(VEr.VEInvoiceToCode) then begin
          VEr.Code = VEr.VEInvoiceToCode;
          found = ReadFirstMain(VEr,1,true);
        end;
        if (ValidateSwedPaymentRow(ctype,OPr,OPrw,VEr,err)==false) then begin
          MessageBox(err,"");
          rerror = err;
          nrofpaym = 0;
          goto LBankExpForeignSwedbankArea;
        end;
        nrofpaym = nrofpaym + 1;
        AddTextToArea("    <ForeignPayment>"& chr(13),a_tmp);
        AddTextToArea("      <ID>" & ConvertXml(CreateCompID & "-" & OPr.SerNr & "-" & i+1) &  "</ID>" & chr(13),a_tmp );
        AddTextToArea("      <DocumentNumber>" & ConvertXml(OPr.SerNr) & "</DocumentNumber>" & chr(13),a_tmp);
        AddTextToArea("      <ValueDate>" & ConvertXml(DateToString(OPr.TransDate,"YYYY-MM-DD")) & "</ValueDate>" & chr(13),a_tmp);
        AddTextToArea("      <Priority>" & ConvertXml(pmode) & "</Priority>" & chr(13),a_tmp);
        AddTextToArea("      <RemitterIBAN>" & ConvertXml(OPr.BankAcc) & "</RemitterIBAN>" & chr(13),a_tmp);
        AddTextToArea("      <Amount>" & ConvertXml(ValToString(OPrw.RecVal,M4Val,"",".",0)) & "</Amount>" & chr(13),a_tmp);
        AddTextToArea("      <Currency>" & ConvertXml(OPrw.RecCurncy) & "</Currency>" & chr(13),a_tmp);
        AddTextToArea("      <DebitCurrency>" & ConvertXml(OPrw.BankCurncy) & "</DebitCurrency>" & chr(13),a_tmp);
        AddTextToArea("      <BeneficiaryAddress>" & ConvertXml(Ver.InvAddr0) & "</BeneficiaryAddress>" & chr(13),a_tmp);
        AddTextToArea("      <BeneficiaryName>" & ConvertXml(Ver.Name) & "</BeneficiaryName>" & chr(13),a_tmp);
        AddTextToArea("      <BeneficiaryResidence>" & ConvertXml(Ver.CountryCode) & "</BeneficiaryResidence>" & chr(13),a_tmp);
        AddTextToArea("      <Details>" & ConvertXml(Oprw.Comment) & "</Details>" & chr(13),a_tmp);
        AddTextToArea("      <Costs>" & ConvertXml(bfee) & "</Costs>" & chr(13),a_tmp);
 // ELG       AddTextToArea("      <BalanceOfPaymentsCode>" & "" & "</BalanceOfPaymentsCode>" & chr(13),a_tmp);
        AddTextToArea("      <BalanceOfPaymentsCountry>" & "EE" & "</BalanceOfPaymentsCountry>" & chr(13),a_tmp); //Hardcoded to "EE" for testing by ELG
        AddTextToArea("      <BeneficiaryBank>" & chr(13),a_tmp);
        AddTextToArea("        <Name>" & ConvertXml(GetBankName(VEr.AccOperator)) & "</Name>" & chr(13),a_tmp); //CHanged from "Bank" to "Name"
        AddTextToArea("        <BIC>" & ConvertXml(GetBankSwift(VEr.AccOperator)) & "</BIC>" & chr(13),a_tmp);
        if (nonblank(OPrw.BankAcc)) then begin
          tstr = OPrw.BankAcc;
        end else begin
          tstr = VEr.BankAccount;
        end;
        AddTextToArea("        <Account>" & ConvertXml(tstr) & "</Account>" & chr(13),a_tmp);
        AddTextToArea("      </BeneficiaryBank>" & chr(13),a_tmp);
        AddTextToArea("    </ForeignPayment>" & chr(13),a_tmp);
      end;
    end;
  end;
  if (PayperSupplier == 1) then begin
    //one payment per supplier
    k = 0;
    
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(OPr,i,OPrw);
      VIr.SerNr = OPrw.VISerNr;
      if ReadFirstMain(VIr,1,true) then begin
        suplinv = VIr.InvoiceNr;
      end else begin
        suplinv = OPrw.VISerNr;
      end;

      if ReadFirstMain(VEr,1,true) then begin end;
      if ((OPrw.stp==1) and (OPrw.ovst==0)) then begin
        if (k == 0) then begin
          vendor[k] = OPrw.VECode;
          rownr[k] = i;
          payval[k] = OPrw.RecVal;
          if (OPrw.VISerNr<>-1) then begin
            comment[k] = invstr &  suplinv;
          end;  
          k = 1;
        end else begin
          ftest = false;
          for (t = 0; t<k; t = t + 1) begin
            if (vendor[t] == OPrw.VECode) then begin
              payval[t] = payval[t] + OPrw.RecVal;
              if (OPrw.VISerNr<>-1) then begin
                comment[t] = comment[t] & "," &  suplinv;
              end;  
              ftest = true;
            end;
          end;
          if (ftest == false) then begin
            vendor[k] = OPrw.VECode;
            rownr[k] = i;
            payval[k] = OPrw.RecVal;
            if (OPrw.VISerNr<>-1) then begin
              comment[k] = invstr &  suplinv;
            end;  
            k = k + 1;
          end;
        end;
      end;
    end;  
    for (t = 0; t<k; t = t + 1) begin
      VEr.Code = vendor[t];
      foundt = ReadFirstMain(VEr,1,true);
      if nonblank(VEr.VEInvoiceToCode) then begin
        VEr.Code = VEr.VEInvoiceToCode;
        foundt = ReadFirstMain(VEr,1,true);
      end;
      MatRowGet(OPr,rownr[t],OPrw);
      if (ValidateSwedPaymentRow(ctype,OPr,OPrw,VEr,err)==false) then begin
        MessageBox(err,"");
        rerror = err;
        nrofpaym = 0;
        goto LBankExpForeignSwedbankArea;
      end;
      nrofpaym = nrofpaym + 1;
      AddTextToArea("    <ForeignPayment>"& chr(13),a_tmp);
      AddTextToArea("      <ID>" & ConvertXml(CreateCompID & "-" & OPr.SerNr & "-" & i+1) &  "</ID>" & chr(13),a_tmp );
      AddTextToArea("      <DocumentNumber>" & ConvertXml(OPr.SerNr) & "</DocumentNumber>" & chr(13),a_tmp);
      AddTextToArea("      <ValueDate>" & ConvertXml(DateToString(OPr.TransDate,"YYYY-MM-DD")) & "</ValueDate>" & chr(13),a_tmp);
      AddTextToArea("      <Priority>" & ConvertXml(pmode) & "</Priority>" & chr(13),a_tmp);
      AddTextToArea("      <RemitterIBAN>" & ConvertXml(OPr.BankAcc) & "</RemitterIBAN>" & chr(13),a_tmp);
      AddTextToArea("      <Amount>" & ConvertXml(ValToString(payval[t],M4Val,"",".",0)) & "</Amount>" & chr(13),a_tmp);
      AddTextToArea("      <Currency>" & ConvertXml(Opr.PayCurCode) & "</Currency>" & chr(13),a_tmp);
      AddTextToArea("      <DebitCurrency>" & ConvertXml(OPrw.BankCurncy) & "</DebitCurrency>" & chr(13),a_tmp);
      AddTextToArea("      <BeneficiaryAddress>" & ConvertXml(Ver.InvAddr0) & "</BeneficiaryAddress>" & chr(13),a_tmp);
      AddTextToArea("      <BeneficiaryName>" & ConvertXml(Ver.Name) & "</BeneficiaryName>" & chr(13),a_tmp);
      AddTextToArea("      <BeneficiaryResidence>" & ConvertXml(Ver.CountryCode) & "</BeneficiaryResidence>" & chr(13),a_tmp);
      AddTextToArea("      <Details>" & ConvertXml(comment[t]) & "</Details>" & chr(13),a_tmp);
      AddTextToArea("      <Costs>" & ConvertXml(bfee) & "</Costs>" & chr(13),a_tmp);
 // ELG    AddTextToArea("      <BalanceOfPaymentsCode>" & "" & "</BalanceOfPaymentsCode>" & chr(13),a_tmp);
      AddTextToArea("      <BalanceOfPaymentsCountry>" & "" & "</BalanceOfPaymentsCountry>" & chr(13),a_tmp);
      AddTextToArea("      <BeneficiaryBank>" & chr(13),a_tmp);
//      AddTextToArea("        <Bank>Swedbank AS</Bank>" & chr(13),a_tmp);
      AddTextToArea("        <Name>" & ConvertXml(GetBankName(VEr.AccOperator)) & "</Name>" & chr(13),a_tmp);
      AddTextToArea("        <BIC>" & ConvertXml(GetBankSwift(VEr.AccOperator)) & "</BIC>" & chr(13),a_tmp);
      if (nonblank(OPrw.BankAcc)) then begin
        tstr = OPrw.BankAcc;
      end else begin
        tstr = VEr.BankAccount;
      end;
      AddTextToArea("        <Account>" & ConvertXml(tstr) & "</Account>" & chr(13),a_tmp);
      AddTextToArea("      </BeneficiaryBank>" & chr(13),a_tmp);
      AddTextToArea("    </ForeignPayment>" & chr(13),a_tmp);
    end;    
  end;  
  AddTextToArea("  </Payments>" & chr(13),a_tmp);
  AddTextToArea("</B4B>" & chr(13),a_tmp);
LBankExpForeignSwedbankArea:;
  return;
end;
