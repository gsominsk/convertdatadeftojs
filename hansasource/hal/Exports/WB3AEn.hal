external procedure ExtractObj(string,var Integer,var string);

procedure PrintHeaderWB3B(record RcVc RepSpec)
BEGIN
  record CYBlock CompYear;
  string 255 tstr;
  
  BlockLoad(CompYear);
 
  ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString(USetStr(18990));
  NewLine;
  ExportString(USetStr(18991));
  NewLine;
  ExportString(USetStr(18992));
  NewLine;
  NewLine;
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(USetStr(18993));
   NewLine;
   ExportString(USetStr(18994));
   ExportString(USetStr(18995));
   ExportString(USetStr(18996));
   ExportString(USetStr(18997));
   ExportString("");
   ExportString(USetStr(18998));
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(USetStr(18999));
   ExportString("");
   ExportString("");
   ExportString(USetStr(19000));
   ExportString("");
   ExportString(USetStr(19001));
   ExportString("");
   ExportString(USetStr(19002));  
   ExportString("");
   ExportString(USetStr(19003));
   ExportString("");
   ExportString(USetStr(19004));
   ExportString("");  
   ExportString(USetStr(19005));  
   ExportString(USetStr(19006));  
   NewLine;
   ExportString(USetStr(19007));
   ExportString(USetStr(19008));
   ExportString(USetStr(19009));
   ExportString(USetStr(19010));
   ExportString(USetStr(19011));
   ExportString("");
   ExportString(USetStr(19012));
   ExportString("");
   ExportString(USetStr(19013));
   ExportString("");
   ExportString(USetStr(19012));
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(USetStr(19012));  
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString("");  
   ExportString(USetStr(19014));  
   ExportString(USetStr(19015));  
   NewLine;
   NewLine;
   ExportString(USetStr(19016));
   ExportString("");
   ExportString("");
   ExportString("");
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString(USetStr(19017));
   ExportString(USetStr(19018));
   ExportString("");  
   ExportString(""); 
   NewLine    
   RETURN;
END;

global
procedure WB3AEn(record RcVc RepSpec)
BEGIN
  record POCQStatVc POCQr;
  record VEVc VEr;
  boolean testf, TrHs;
  String 255 ostr;
  Integer i,pos;
  
  PrintHeaderWB3B(RepSpec);
  pos = 0;  
  ExtractObj(RepSpec.f1,pos,ostr);
  while (nonblank(ostr)) begin
    i = 0;
    TrHs = true;
    ResetLoop(POCQr);
    POCQr.SerNr = -1;
    POCQr.Object = ostr;
    while (LoopKey("Object",POCQr,2,TrHs)) begin
      testf = true;
     if (TrHs) then begin 
      if nonblank(ostr) then begin
        if (POCQr.Object<>ostr) then begin
            TrHs = false;
            testf = false;
        end;
      end; 
      
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>POCQr.POClass) then begin 
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>POCQr.VECode) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[1] == 1) then begin
        if (POCQr.OKFlag<>1) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[2] == 0) then begin
        if (POCQr.Closed<>0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (i > 0) then begin
          ExportString("");
        end else begin
          ExportString(POCQr.Object);
        end;
        ExportString(POCQr.Comment);
        ExportString(POCQr.POClass);
        ExportString(POCQr.Tender);
        ExportDate(POCQr.PreQualSentPl);
        ExportDate(POCQr.PreQualSentAct);
        ExportDate(POCQr.PreQualNoObjPl);
        ExportDate(POCQr.PreQualNoObjAct);
        ExportDate(POCQr.BidDocSentPl);
        ExportDate(POCQr.BidDocSentAct);
        ExportDate(POCQr.BidDocNoObjPl);
        ExportDate(POCQr.BidDocNoObjAct);
        ExportDate(POCQr.BidPackAvPl);
        ExportDate(POCQr.BidPackAvAct);
        ExportDate(POCQr.BidOpenPl);
        ExportDate(POCQr.BidOpenAct);
        ExportDate(POCQr.ContrNoObjPl);
        ExportDate(POCQr.ContrNoObjAct);
        ExportDate(POCQr.ContrSignPl);
        ExportDate(POCQr.ContrSignAct);
        ExportDate(POCQr.ContrEndAct);
        ExportDate(POCQr.ContrEndPl);
        VEr.Code = POCQr.VECode;  
        if (ReadFirstMain(VEr,1,true)) then begin
          ExportString(VEr.Name);
        end; 
        ExportLongInt(POCQr.SerNr);                
        NewLine;   
        i = i + 1;   
      end; //end testf    
     end; //TrHs;
    end; //while
    NewLine;
    ExtractObj(RepSpec.f1,pos,ostr);
  end;
  EndJob;
  RETURN;
END;
