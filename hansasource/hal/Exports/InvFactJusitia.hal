//external procedure SplitAddress(string,var string,var string);
external procedure FinnishBankVal(var string,val);

procedure SplitAddress(string orgstr,var string postnr,var string ort)
begin
  Integer i,ln;
  Integer pnrst,pnren,ortst;
  string 5 chr1;
  
  pnrst = -1;
  ortst = -1;
  ln = len(orgstr);
  for (i=0;i<ln;i=i+1) begin
    chr1 = mid(orgstr,i,1);
    if ((chr1<"9") and (chr1>"0")) then begin
      if (pnrst==-1) then begin
        pnrst = i;
      end;
    end;
    if (((chr1>"9") or (chr1<"0")) and (chr1<>" ") and (pnrst>-1)) then begin
      if (ortst==-1) then begin
        ortst = i;
      end;
    end;
  end;
  pnrst = 0; // Ok, this is not how it was meant....
  pnren = (ortst-pnrst)-1;
  if (mid(orgstr,pnren-1,1)==" ") then begin
    pnren = pnren - 1;
    if (mid(orgstr,pnren-1,1)==" ") then begin
      pnren = pnren - 1;
    end;
  end;
  if ((pnrst>-1) and (ortst>-1) and (ln>0)) then begin
    postnr = left(orgstr,5);
    ort = mid(orgstr,ortst,ln-ortst);
  end;
  return;
end;

procedure ExpFactIVJustitia(record IVVc IVp,record FactoringBlock factp)
BEGIN
  string 255 tstr,t2;
  
  ExportPadString("13",2,"0",true);
  ExportPadString(factp.User,4,"0",true);
  ExportPadString(IVp.SerNr,10,"0",true);
  ExportPadString(IVp.CustCode,12,"0",true);
  tstr = DateToString(IVp.InvDate,"YYYYMMDD");  
  ExportPadString(tstr,8,"0",true);  
  ExportPadString(IVp.PayDeal,3,"0",true);  
  tstr = DateToString(IVp.PayDate,"YYYYMMDD");  
  ExportPadString(tstr,8,"0",true);  
  if ((IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) or (IVp.Sum4<0)) then begin
    ExportPadString("-",1," ",false);     
  end else begin
    ExportPadString(" ",1," ",false);     
  end;  
  ExportPadString(" ",1," ",false);     
  FinnishBankVal(tstr,IVp.Sum4);  
  tstr = StripNonDigits(tstr);          
  ExportPadString(tstr,10,"0",true);       
  ExportPadString("",3," ",true);       
  ExportPadString("",10," ",true);       
  NewLine;  
  RETURN;
END;

procedure ExpFactCUJustitia(record IVVc IVp,record FactoringBlock factp)
BEGIN
  record CUVc CUr;
  string 255 tstr,t2;
  
  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    ExportPadString("09",2,"0",true);
    ExportPadString(factp.User,4,"0",true);
    ExportPadString(IVp.CustCode,12,"0",true);
    ExportPadString(CUr.Name,30," ",false);
    ExportPadString(CUr.InvAddr0,25," ",false);
    SplitAddress(IVp.Addr3,tstr,t2);       
    ExportPadString(tstr,5,"0",true);
    ExportPadString(t2,20," ",false);
    ExportPadString(CUr.VATNr,12,"0",true);    
    ExportPadString(CUr.CountryCode,2," ",false);    
    ExportPadString(CUr.Phone,15," ",false);    
    ExportPadString(CUr.Fax,15," ",false);    
    NewLine;
  end;
  RETURN;
END;

procedure ExpFactHeaderJustitia(LongInt cnt,record FactoringBlock factp)
BEGIN
  string 255 tstr;
  
  ExportPadString("01",2,"0",true);
  ExportPadString("1",1,"0",true);
  tstr = DateToString(CurrentDate,"YYMMDD");  
  ExportPadString(tstr,6,"0",true);
  ExportPadString("0",7,"0",true);
  ExportPadString("3",1,"0",true);
  ExportPadString("1",1,"0",true);
  ExportPadString(factp.User,4,"0",true);
  ExportPadString(cnt,10,"0",true);
  ExportPadString("1",1,"0",true);
  NewLine;
  RETURN;
END;

global
procedure ExportInvJustitia(var record RcVc RepSpec,record FactoringBlock factp)
BEGIN
  record IVVc IVr;
  Boolean TrHs,testf;
  string 20 fromcust,tocust;
  LongInt cnt;

  cnt = 0;
  RepSpec.long1 = FirstInRange(RepSpec.f1,10);
  RepSpec.long2 = LastInRange(RepSpec.f1,10);
  fromcust = FirstInRange(RepSpec.f2,20);
  tocust = LastInRange(RepSpec.f2,20);  
  IVr.SerNr = RepSpec.long1;
  IVr.InvDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("InvDate",IVr,2,TrHs)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr>RepSpec.long2) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr<RepSpec.long1) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f2)) then begin
        if ((IVr.CustCode<fromcust) or (IVr.CustCode>tocust)) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin testf = false; end;
      end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
      if (testf) then begin
        cnt = cnt + 1;
      end;
    end;  
  end;
  ExpFactHeaderJustitia(cnt,factp); 
  ResetLoop(IVr);    
  IVr.SerNr = RepSpec.long1;
  IVr.InvDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey("InvDate",IVr,2,TrHs)) begin
    if (IVr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr>RepSpec.long2) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr<RepSpec.long1) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.f2)) then begin
        if ((IVr.CustCode<fromcust) or (IVr.CustCode>tocust)) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.ObjStr)) then begin
        if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin testf = false; end;
      end;
      if (IVr.OKFlag==0) then begin testf = false; end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
      if (testf) then begin
        ExpFactCUJustitia(IVr,factp);
        ExpFactIVJustitia(IVr,factp);
        UserTrace(IVr.SerNr,M4Long);
      end;
    end;
  end;
  factp.LastSerNr = factp.LastSerNr + 1;
  factp.LastDate = CurrentDate;
  RETURN;
END;
