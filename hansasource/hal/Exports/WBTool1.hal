external procedure ExtractObj(string,var Integer,var string);
external function val FindAccTurnover(string,string,date,date,record ObjBalVc,Integer,Integer,string,Integer);

global
function LongInt Power2(LongInt n)
BEGIN
  LongInt res;
  
  if (n>=0) then begin
    res = 1;
  end;  
  if (n>1) then begin
    res = n * Power2(n-1);
  end;  
  Power2 = res;
  RETURN;
END;

global
function LongInt CalcCombination(Integer n,Integer k)
BEGIN
  LongInt res;
  
  if (n>=k) then begin
    res = Power2(n)/(Power2(k)*Power2(n-k));
  end;  
  CalcCombination = res;
  RETURN;
END;


global
function Boolean CheckObjsType(string ot,string ru)
BEGIN
  record ObjVc Objr;
  Boolean found;
  Boolean res,TrHs;
  string 255 ostr;
  Integer pos;
  
  res = false;
  TrHs = true;
  pos = 0;
  
  ExtractObj(ru,pos,ostr);
  while (nonblank(ostr) and TrHs) begin
    Objr.Code = ostr;
    found = ReadFirstMain(Objr,1,true);
    if (found) then begin
        if (ot==Objr.OTCode) then begin
          res = true;
          TrHs = false;
//          goto L99;
        end;
    end;
    ExtractObj(ru,pos,ostr);
  end;
L99:;  
  CheckObjsType = res;
  RETURN; 
END;

global
procedure ExportWB1BHeader(record RcVc RepSpec)
BEGIN
  record CYBlock CompYear;
  record BaseCurBlock bascur;
  string 255 tstr;
  
  BlockLoad(CompYear);
  BlockLoad(bascur);
  tstr ="Reporting Currency";
  
  ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("Report 1 - B");
  NewLine;
  ExportString("Use of Funds by Project Activity");
  NewLine;
  ExportPadString("For the Period : ", len("For the Period")+1," ", false);
  ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
   NewLine;
  if (RepSpec.basecurncy == 0) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur1,len(bascur.BaseCur1)+2," ",false);
  end;
  if (RepSpec.basecurncy == 1) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur2,len(bascur.BaseCur2)+2," ",false);
  end;
  NewLine;
  NewLine;
  ExportString("");
  ExportString("");
  ExportString("Actual");
  ExportString("");
  ExportString("");
  ExportString("Planned");
  ExportString("");
  ExportString("");
  ExportString("Variance");
  ExportString("");
  ExportString("");
  NewLine;
  ExportString("Project");
  ExportString("Current");
  ExportString("Year");
  ExportString("Cumulative");
  ExportString("Current");
  ExportString("Year");
  ExportString("Cumulative");
  ExportString("Current");
  ExportString("Year");
  ExportString("Cumulative");
//  ExportString("Life of");
  NewLine;
  ExportString("Activities");
  ExportString("Quarter");
  ExportString("To - Date");
  ExportString("To - Date");
  ExportString("Quarter");
  ExportString("To - Date");
  ExportString("To - Date");
  ExportString("Quarter");
  ExportString("To - Date");
  ExportString("To - Date");
 // ExportString("Project");
  NewLine;
  NewLine;
  RETURN;
END;

global
procedure SetWBZeroVals(var val ocv,var val oyv,var val oacv,var val bcv,var val byv,var val bacv)
BEGIN
  ocv = 0;
  oyv = 0;
  oacv = 0;
  bcv = 0;
  byv = 0;
  bacv = 0;
  RETURN;  
END;

global
procedure ExportWB1Vals(string tstr,val ocv,val oyv,val oacv,val bcv,val byv,val bacv)
BEGIN  
  
  if ((ocv==0) and (oyv==0) and (oacv==0) and (bcv==0) and (byv==0) and (bacv==0)) then begin
  end else begin
    ExportString(tstr);
    ExportVal((ocv*-1),M4Val);
    ExportVal((oyv*-1),M4Val);
    ExportVal((oacv*-1),M4Val);
    ExportVal(bcv,M4Val);
    ExportVal(byv,M4Val);
    ExportVal(bacv,M4Val);
    ExportVal((ocv + bcv)*-1,M4Val);
    ExportVal((oyv + byv)*-1,M4Val);
    ExportVal((oacv + bacv)*-1,M4Val);
    NewLine;
  end;  
  RETURN;  
END;

global
procedure WBGetStartBalance(record ObjBalVc ObjBalr,string colname,Date sd,var val v,Integer basecurncy)
BEGIN
  Date ld;
  string 255 tstr;
  
  ld = AddDay(sd,-1);//AddMonth??
  if (basecurncy==0) then begin
    tstr = colname;
  end else begin
    tstr = colname & "2";
  end;
  v = GetBalance(ObjBalr,tstr,ld);
  RETURN;
END;

global
procedure FindObjectBalance(record RcVc RepSpec,Date fsd,string objstr,var val ocv,var val oyv,var val oacv)
BEGIN
  record ObjBalVc ObjBalr;
  Boolean TrHs;
  val cv,yv,acv,t;
  
  ObjBalr.Object = objstr;
  TrHs = true;
  while (LoopKey("ObjAccKey",ObjBalr,1,TrHs)) begin    
    if (ObjBalr.Object<>objstr) then begin TrHs = false; end;
    if (TrHs) then begin
      cv = FindAccTurnover(ObjBalr.AccNumber,objstr,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,
                           0,RepSpec.basecurncy,"",0);
      yv = FindAccTurnover(ObjBalr.AccNumber,objstr,fsd,RepSpec.sEndDate,ObjBalr,
                           0,RepSpec.basecurncy,"",0);
      WBGetStartBalance(ObjBalr,"transdebit",RepSpec.sStartDate,acv,RepSpec.basecurncy);
      WBGetStartBalance(ObjBalr,"transcredit",RepSpec.sStartDate,t,RepSpec.basecurncy);
      acv = acv - t;
      acv = acv + cv;
           
      ocv = ocv + cv;
      oyv = oyv + yv;
      oacv = oacv + acv;                              
    end;
  end;
  RETURN;  
END;

global
procedure ConvertToBase2(Date TransDate,var val resv)
BEGIN
  record BaseCurBlock BaseCurRec;
  record BaseERVc BERr;
  val t,base1,base2;

  t = resv;
  BlockLoad(BaseCurRec);
  if (nonblank(BaseCurRec.BaseCur2)) then begin
    base1 = 1;
    base2 = 1;
    BERr.Date = TransDate;
    if (ReadLastMain(BERr,1,false)) then begin
      base1 = BERr.Rate1;
      base2 = BERr.Rate2;
    end;
    t = t*base2;
    t = t / base1;
  end;
  resv = t;  
  RETURN;
END;

global
procedure FindobjstrBudget(Date StartDate,Date EndDate,Date fsd,Date fed,Integer basecurncy,string objstr,var val bcv,var val byv,var val bacv)
BEGIN
  record Bud1Vc Bud1r;
  row Bud1Vc Bud1rw;
  Integer i,rwcnt;
  Boolean TrHs;
  val cv,yv,acv;  
  
  TrHs = true;
  Bud1r.Objects = objstr;
  while (LoopKey("ObjAccKey",Bud1r,1,TrHs)) begin
    if (Bud1r.Objects<>objstr) then begin TrHs = false; end;
    if (TrHs) then begin
      rwcnt = MatRowCnt(Bud1r);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Bud1r,i,Bud1rw);
        if (Bud1rw.BudDate<=EndDate) then begin
          acv = acv + Bud1rw.sval;
        end;  
        if (DateInRange(Bud1rw.BudDate,fsd,EndDate))  then begin
          yv = yv + Bud1rw.sval;
        end;            
        if (DateInRange(Bud1rw.BudDate,StartDate,EndDate))  then begin
          cv = cv + Bud1rw.sval;
        end;        
      end;
      if (basecurncy==1) then begin
        ConvertToBase2(Bud1r.StartDate,cv);  
        ConvertToBase2(Bud1r.StartDate,yv);  
        ConvertToBase2(Bud1r.StartDate,acv);  
      end;        
    end;
  end;
  bcv = bcv + cv;
  byv = byv + yv;
  bacv = bacv + acv;
  RETURN;  
END;

