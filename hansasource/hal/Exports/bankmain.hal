external procedure BankExpItalySEPA_Domestic(record RcVc,record OPVc,record BankFileBlock);
external procedure BankExpItalySEPA_Domestic_GroupFooter();
external procedure BankExpItalySEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpGermanySEPA_Domestic_GroupFooter();
external procedure BankExpGermanySEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpGermanySEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpNordea(record OPVc,record RcVc);
external procedure BankExpFinlandSEPA_Domestic_GroupFooter();
external procedure BankExpFinlandSEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpFinlandSEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpEstoniaSEPA_Domestic_GroupFooter();
external procedure BankExpEstoniaSEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpEstoniaSEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpLatviaSEPA_Domestic_GroupFooter();
external procedure BankExpLatviaSEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpLatviaSEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpAustralia2End(val,LongInt);
external procedure BankExpAustralia2Payment(record RcVc,record OPVc,var val,var LongInt);
external procedure BankExpAustralia2OwnLine(record RcVc,record OPVc,var val,var LongInt);
external procedure BankExpAustralia2Begin(record RcVc,record OPVc);
external procedure DomesticBankCzechABOFooter();
external procedure DomesticBankCzechABOHeader(record OPVc);
external procedure BankCzechABO(record RcVc,record OPVc);
external procedure BankExpHunHVB(record BankFileBlock,record RcVc,record OPVc,var LongInt,var LongInt,var val);
external procedure BankNamibia(record RcVc);
external procedure BankExpAustraliaEnd(val,LongInt,record OPVc);
external procedure BankExpAustraliaPayment(record RcVc,record OPVc,var val,var LongInt);
external procedure BankExpAustraliaBegin(record RcVc,record OPVc);
external procedure BankExpBPH(record OPVc,record RcVc);
external procedure BankExpSlovenia(record OPVc);
external procedure BankExpSloveniaHeader(record RcVc);
external procedure BankCzech3(Record RcVc,record OPVc);
external procedure BankExpSwedishHandelsBank(record OPVc,Integer,var LongInt,var val);
external procedure BankExpSwedishHandelsBankEnd(record OPVc,Integer,LongInt,var val);
external procedure BankExpSwedishHandelsBankStart(record OPVc,Integer,var LongInt,var val);
external procedure BankLithuania2(Record RcVc,record OPVc);
external procedure BankLithuania1(Record RcVc,record OPVc);
external procedure BankExpReiffaisenHeader(record RcVc);
external procedure BankExpReiffaisen(record OPVc,record RcVc);
external procedure BankExpING(record OPVc,record RcVc);
external procedure BankExpDanish0(record OPVc);
external procedure BankExpDanish1(record OPVc);
external procedure BankExpDanish2(record OPVc);
external procedure BankExpDanish3(record OPVc,var val,var LongInt);
external procedure BankExpDanish4(record OPVc);
external procedure BankExpDanish5(record OPVc,var val,var LongInt,var LongInt );
external procedure SydEnd(val,LongInt);
external procedure SydBegin(var LongInt);
external procedure BGBegin(var LongInt,var LongInt);
external procedure BGEnd(val,var LongInt,LongInt);
external procedure BankExpSwedish0(record OPVc,Integer);
external procedure BankExpSwedish1(record OPVc,Integer,var val);
external procedure BankExpSwedish2(record OPVc,Integer,Integer);
external procedure BankExpSwedish3(record OPVc,Integer,Integer,Integer);
external procedure BankExpSwedish4(record OPVc,Integer,Integer);
external procedure BankExpPGBegin(string);
external procedure BankExpPGEnd(val);
external updating procedure BankExpNorway0(record OPVc,record RcVc,Boolean,var LongInt,var LongInt,var LongInt);
external updating procedure BankExpNorway1(record OPVc,record RcVc,Boolean,var LongInt,var LongInt,var LongInt);
external procedure BankExpNorwayEnd(record CYBlock,var LongInt,var LongInt,var LongInt,Integer,Integer,Boolean);
external procedure BankExpFinland0(record OPVc,Integer);
external procedure BankExpFinland1(record OPVc,Integer,String);
external procedure BankExpFinland2(record OPVc,Integer,String,integer);
external procedure BankExpFinland21(record OPVc,Integer,String,integer);
external updating procedure BankExpFinland3(record OPVc,Integer,String,integer,integer);
//external procedure BankExpEstonia0(record OPVc,string);
//external procedure BankExpEstonia1(record OPVc,Integer,Integer,Integer,Integer);
//external procedure BankExpEstonia5(record OPVc,Integer,Integer,Integer,Integer);
//external procedure BankExpEstonia3(record OPVc,var Integer,integer);
//external procedure BankExpEstonia6(record OPVc,Integer,Integer,Integer);
external procedure BankExpEstonia7Begin;
external procedure BankExpEstonia7(record OPVc,Integer,Integer,Integer);
external procedure BankExpEstonia7End;
//external procedure BankExpLatvia0(record OPVc,Integer); 
//external procedure BankExpLatvia1(record OPVc,Integer); 
//external procedure BankExpLatvia1a(record OPVc,Integer); 
//external procedure BankExpLatvia1Begin(record BankFileBlock); 
//external procedure BankExpLatvia1End(Integer); 
//external procedure BankExpLatvia1aBegin(record BankFileBlock); 
//external procedure BankExpLatvia1aEnd(Integer); 
//external procedure BankExpLatvia2(record OPVc,Integer,Integer); 
//external procedure BankExpLatvia3(record OPVc,Integer,Integer,Integer);
//external procedure BankExpLatvia4(record OPVc,record RcVc);
//external procedure BankExpLatvia5(record OPVc,Integer,Integer,string);
external procedure BankExpIceland1(record OPVc,record RcVc); 
external procedure BankExpIceland2(record OPVc,record RcVc); 
external procedure BankExpIceland3(record OPVc,record RcVc); 
external procedure BankExpIceland4(record OPVc,record RcVc); 
external procedure BankExpEngEn0(record OPVc);
external procedure BankExpEngEn1(record RcVc,record OPVc);
external procedure BankExpEngEn2(record OPVc);
external updating procedure PlusGirot(record RcVc);
external function boolean IsNewZealandBank(integer);
external procedure BankExpNewZealandHeaderLine(record RcVc,record OPVc);
external procedure BankExpNewZealandPayments(record RcVc,record OPVc);
external procedure BankExpNewZealandSummaryLine(record RcVc);
external function boolean IncludePaymentInNewZealandBankFile(record BankFileBlock,record RcVc,record OPVc,boolean);
external procedure BankExpLatvian_FidaVista_Header(record RcVc);
external procedure BankExpLatvian_FidaVista_Footer();
external procedure BankExpLatvian_FidaVista_Payments(record RcVc,record OPVc);
external procedure BankExpLithuaniaSEPA_Domestic_GroupFooter();
external procedure BankExpLithuaniaSEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpLithuaniaSEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpSwedenSEPA_Domestic_GroupFooter();
external procedure BankExpSwedenSEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpSwedenSEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpNorwaySEPA_Domestic_GroupFooter();
external procedure BankExpNorwaySEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpNorwaySEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);
external procedure BankExpGerSEPA_Domestic_GroupFooter();
external procedure BankExpGerSEPA_Domestic(record RcVc,record OPVc,Integer,String,integer,record BankFileBlock);
external procedure BankExpGerSEPA_Domestic_GroupHeader(record RcVc,var record BankFileBlock);

procedure SetBankCodepage(Integer bank,Integer dosmode,string cp)
begin
  string 100 s;

  if (dosmode!=0) then begin
    s = "CP437";
    goto LDoSetBankCodepage;
  end;
  s = "CP850";
  
  switch (bank) begin
    case 0:  s = "CP850";  // Denmark - Midtbank
    case 1:  s = "CP850";  // Denmark - Jyske Bank
    case 2:  s = "CP850";  // Denmark - Den Denske Bank
    case 3:  s = "CP850";  // Denmark - SYDBANK
    case 4:  s = "CP850";  // Denmark - Unibank
    case 5:  s = "CP850";  // Denmark - BGBank
    case 15: s = "CP1257"; // Estonia - Microbanker
    case 16: s = "CP1257"; // Estonia - Telehansa
//    case 82: s = "CP1257"; // Estonia - SEPA
    case 82: 
      s = StringSetFromString(89,cp);
      if (blank(s)) then begin
        s = "UTF-8";
      end;
    // case 17: s = "CP1257"; // Estonia - Tele pank
    case 18: s = "CP1257"; // Estonia - †_hispank
    case 19: s = "CP1257"; // Estonia - Riigikassa
    case 13: 
      if (WindowsMode) then begin
        s = "CP1252"; // Finland - LM 00
      end else begin
        s = "MACINTOSH"; // Finland - LM 00
      end;
    case 14: 
      if (WindowsMode) then begin
        s = "CP1252"; // Finland - LM 02
      end else begin
        s = "MACINTOSH"; // Finland - LM 02
      end;    
    case 20: s = "CP1257"; // Latvia - 1
    case 21: s = "CP1257"; // Latvia - 2
    case 22: s = "CP1257"; // Latvia - 3
    case 24: 
      if (WindowsMode) then begin
        s = "CP1252"; // Finland - LM 03
      end else begin
        s = "MACINTOSH"; // Finland - LM 03
      end;    
    case 25: 
      if (WindowsMode) then begin
        s = "CP1252"; // Finland - LM 03
      end else begin
        s = "MACINTOSH"; // Finland - LM 03
      end;    
    case 26: 
      if (WindowsMode) then begin
        s = "CP1252"; // Finland - LM 03
      end else begin
        s = "MACINTOSH"; // Finland - LM 03
      end;    
    case 27: 
      s = StringSetFromString(89,cp);
      if (blank(s)) then begin
        s = "UTF-8";
      end;
    case 32: s = "CP1257"; // Latvia - Hansabank
    case 52: s = "CP1257"; // Latvia - Nord LB
    // case 33: s = "CP1257"; // Latvia - Pareks-bank
    // case 44: s = "CP1257"; // Latvia - Vereinsbank
    case 9:  s = "CP850";  // Norway - DnB Telepay
    case 10: s = "CP850";  // Norway - K-Link
    case 11: s = "CP850";  // Norway - SparNett
    case 12: s = "CP850";  // Norway - Postbanken
    case 35: s = "ISO-8859-1";  // Norway - Postbanken
    case 6:
      if (WindowsMode) then begin
        s = "CP1252"; // Sweden - SE-Banken//CP1252
      end else begin
        s = "MACINTOSH"; // Sweden - SE-Banken
      end;
    case 7:
      if (WindowsMode) then begin
        s = "CP1252"; // Sweden - Handelsbanken
      end else begin
        s = "MACINTOSH"; // Sweden - Handelsbanken
      end;
    case 8:
      if (WindowsMode) then begin
        s = "CP1252"; // Sweden - Nordbanken//CP1252
      end else begin
        s = "MACINTOSH"; // Sweden - Nordbanken
      end;
    case 23:
      if (WindowsMode) then begin
        s = "CP1252"; // Sweden - FšreningsSparbanken//CP1252
      end else begin
        s = "MACINTOSH"; // Sweden - FšreningsSparbanken
      end;
    case 63: 
      s = "CP1252"; // ISO-8859-1
/*
      if (WindowsMode) then begin
        s = "CP1252"; // //Sweden - Plusgirot
      end else begin
        s = "MACINTOSH"; // //Sweden - Plusgirot
      end;
*/
    case 30: s = "CP850";  // England - Albany
    case 31: s = "CP850";  // England - BACS
    case 33: s = "CP850";  // England - Hexagon
    case 40: s = "CP850";  // Iceland - bunaŒarbankinn
    case 41: s = "CP850";  // Iceland - LANDSBANKINN
    case 42: s = "CP850";  // Iceland - ISLANDSBANKI
    case 43: s = "CP850";  // Iceland - SPARISJODIR
    case 50: s = "CP1250"; // Poland - ING Bank
    case 51: s = "CP1250"; // Poland - Reiffaisen Bank
    case 53: s = "CP1250"; // Poland - BPH Bank
    case 54: s = "CP1250"; // Poland - Nordea
    case 61: s = "CP1257"; // Lithuania - LITAS-ESIS
    case 62: s = "CP850"; // Lithuania - Reiffaisen Bank
    case 63: s = "CP1252"; //Sweden - Plusgirot
    case 70: s = "CP1250"; // Czech - Komercni banka 
    case 71: s = "CP1250"; // Ceskoslovenska obchodni banka - CSOB 
    case 72: s = "CP1250"; // Ceska sporitelna - CS 
    case 73: s = "CP1250"; // Czech - CITI bank
    case 84: goto LSetBankCodepage;
    case 90: s = "CP1250"; // Slovenia
    case 110: s = "CP852"; // Hungary
    case 150: s = "UTF-8"; // Latvia
    case 152: 
      s = StringSetFromString(89,cp);
      if (blank(s)) then begin
        s = "UTF-8";
      end;
    case 153:
      s = StringSetFromString(89,cp);
      if (blank(s)) then begin
        s = "UTF-8";
      end;
    case 154: s = "UTF-8"; // Latvia
    case 155:
      s = StringSetFromString(89,cp);
      if (blank(s)) then begin
        s = "UTF-8";
      end;
    case 156:
      s = StringSetFromString(89,cp);
      if (blank(s)) then begin
        s = "UTF-8";
      end;
  end;

LDoSetBankCodepage:;
  if (SetExportCodepage(s)==false) then begin
    LogText(0,"Failed to set codepage " & s);
  end;
LSetBankCodepage:;
  return;
end;

global
updating procedure MPEn(record RcVc RepSpec)
begin
  record BankFileBlock BFb;
  record OPVc OPr;
  record WeekVc WKr; /* For storing what Records should be updated */
  row WeekVc WKrw;
  record CYBlock CYb;
  Integer weekrw,weekrwcnt,i;
  string 20 ckey;
  LongInt afr,ato,LastOPSerNr;
  Integer keys;
  Integer NrOfExports;
  val PGSum;
  Boolean foundf,testf,headerf;
  Boolean storedf,newversf;
  LongInt betcount,rowsernr,appsernr;
  Boolean firstf;
  string 255 tstr;
  boolean LIsNewZealandBank;
  boolean LWrittenToBankFile;

  BlockLoad(BFb);
  BlockLoad(CYb);
  firstf = true;
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);

  SetBankCodepage(BFb.Bank,RepSpec.ArtMode,RepSpec.f12);

  LIsNewZealandBank = IsNewZealandBank (BFb.Bank);
  LWrittenToBankFile = false;
  RepSpec.sm1 = 0;

  headerf = true;
  PGSum = 0;
  betcount = 0;
  NrOfExports = 0;
  weekrw = 0;
/* Special Bank Start records */
  if (BFb.Bank==3) then begin SydBegin(betcount);  end;
  if (BFb.Bank==5) then begin BGBegin(appsernr,rowsernr);  end;

/* NOT USED ANYMORE
 if ((BFb.Bank==7) or (BFb.Bank==8) or (BFb.Bank==23)) then begin
    if (RepSpec.flags[1]<>0) then begin
      BankExpPGBegin(RepSpec.Stext);
    end;
  end;
*/
  
  if (BFb.Bank==63) then begin 
    PlusGirot(RepSpec);
    goto LMPEnOut;
  end;
  if (BFb.Bank==84) then begin // Should rewrite to work the same way as our bank files, but no time right now....
    BankNamibia(RepSpec);
    goto LMPEnOut;
  end;
  if (BFb.Bank==82) then begin 
    BankExpEstoniaSEPA_Domestic_GroupHeader(RepSpec,BFb); 
  end;
  if (BFb.Bank==19) then begin BankExpEstonia7Begin; end;
//  if (BFb.Bank==21) and (RepSpec.flags[2]==0) then begin BankExpLatvia1Begin(BFb);end;
//  if (BFb.Bank==21) and (RepSpec.flags[2]==1) then begin BankExpLatvia1aBegin(BFb);end;

  if (BFb.Bank==27 or BFb.Bank==151) then begin 
    if (RepSpec.flags[2]==0) then begin  
      BankExpFinlandSEPA_Domestic_GroupHeader(RepSpec,BFb); 
    end else begin 
//    BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);
    end;
  end;
  if (BFb.Bank==152) then begin 
    if (RepSpec.flags[2]==0) then begin  
      BankExpItalySEPA_Domestic_GroupHeader(RepSpec,BFb); 
    end else begin 
//    BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);
    end;
  end;
  if (BFb.Bank==140) then begin
    BankExpGerSEPA_Domestic_GroupHeader(RepSpec,BFb); //based on lithuanian
  end;
  if (BFb.Bank==153) then begin
    BankExpLithuaniaSEPA_Domestic_GroupHeader(RepSpec,BFb); 
  end;
  if (BFb.Bank==155) then begin
    BankExpSwedenSEPA_Domestic_GroupHeader(RepSpec,BFb);  //based on lithuanian
  end;
  if (BFb.Bank==156) then begin
    BankExpNorwaySEPA_Domestic_GroupHeader(RepSpec,BFb);  //based on lithuanian
  end;
  /*
  if (BFb.Bank==140) then begin 
    if (RepSpec.flags[2]==0) then begin  
      BankExpGermanySEPA_Domestic_GroupHeader(RepSpec,BFb); 
    end else begin 
//    BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);
    end;
  end;
  */
  if (BFb.Bank==150) then begin
    BankExpLatvian_FidaVista_Header(RepSpec);
  end;
  if (BFb.Bank==154) then begin
    BankExpLatviaSEPA_Domestic_GroupHeader(RepSpec,BFb);
  end;

  if (BFb.Bank==51) and (RepSpec.flags[2]==1) then begin BankExpReiffaisenHeader(RepSpec); end; 
  if (BFb.Bank==90) then begin BankExpSloveniaHeader(RepSpec); end;

  foundf = true;
  if (RepSpec.OnlyUnprntd==0) then begin
    OPr.SentFlag = 0;
    OPr.SerNr = afr;
    keys = 2;
    ckey = "SentFlag";
  end else begin
    OPr.SerNr = afr;
    keys = 1;
    ckey = "SerNr";
  end;
  while (LoopKey(ckey,OPr,keys,foundf)) begin
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.SentFlag==1) then begin
        foundf = false;
      end;
    end;
    if (ato<>-1) then begin
      if (OPr.SerNr>ato) then begin
        foundf = false;
      end;
    end;
    testf = true;
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.DoneFlag==1) then begin 
        testf = false;
      end;
    end;
    if (OPr.OrderedFlag==0) then begin 
      testf = false;
    end;
    if (DateInRange(OPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;    
    if (foundf==false) then begin
      testf = false;
    end;
    if (OPr.Invalid==1) then begin 
      testf = false;
    end;
    if (testf==true) and (LIsNewZealandBank==true) then begin
      testf = IncludePaymentInNewZealandBankFile(BFb,RepSpec,Opr,LWrittenToBankFile);
      // if included and about to write to export file then write header first 
      if ((testf==true) and (LWrittenToBankFile==false)) then begin
        SetBankCodepage(RepSpec.em1,RepSpec.ArtMode,RepSpec.f12);
        BankExpNewZealandHeaderLine(RepSpec,OPr);
        LWrittenToBankFile = true;
      end;
    end;    
    if (testf==true) then begin
      LWrittenToBankFile = true;
      if (BFb.Bank==0) then begin BankExpDanish0(OPr);       end;
      if (BFb.Bank==1) then begin BankExpDanish1(OPr);       end;
      if (BFb.Bank==2) then begin BankExpDanish2(OPr);       end;
      if (BFb.Bank==3) then begin BankExpDanish3(OPr,PGSum,betcount); end;
      if (BFb.Bank==4) then begin BankExpDanish4(OPr);       end;
      if (BFb.Bank==5) then begin BankExpDanish5(OPr,PGSum,rowsernr,appsernr); end;
      if (BFb.Bank==7) then begin 
        if (RepSpec.flags[2]==0) then begin
          BankExpSwedishHandelsBankStart(OPr,RepSpec.flags[0],betcount,PGSum);
          BankExpSwedishHandelsBank(OPr,RepSpec.flags[0],betcount,PGSum);
          BankExpSwedishHandelsBankEnd(OPr,RepSpec.flags[0],betcount,PGSum);
        end;
      end;
      if (BFb.Bank==100) then begin BankExpAustraliaBegin(RepSpec, OPr); end;
      if (BFb.Bank==101) then begin 
        if (firstf) then begin       
          BankExpAustralia2Begin(RepSpec, OPr); 
        end;
      end;
      if (RepSpec.flags[1]==0) then begin // This is SO strange......
        if ((BFb.Bank==6) or (BFb.Bank==8) or (BFb.Bank==23)) then begin//or (BFb.Bank==7) new handelsbank
          if (firstf==false) then begin
            NewLine;
          end;
        end;
        if (BFb.Bank==7) then begin 
          if (RepSpec.flags[2]!=0) then begin 
            if (firstf==false) then begin
              NewLine;
            end;
          end;
        end;    
        if (BFb.Bank==6) then begin
          if (RepSpec.flags[2]==0) then begin
            BankExpSwedish0(OPr,RepSpec.flags[0]); 
          end else begin
            BankExpSwedish3(OPr,RepSpec.flags[4],RepSpec.flags[3],RepSpec.flags[1]);
          end;
        end;
        if (BFb.Bank==7) then begin
          if (RepSpec.flags[2]==0) then begin
//            BankExpSwedish0(OPr,RepSpec.flags[0]); //new handelsbank format
          end else begin
            BankExpSwedish2(OPr,RepSpec.flags[3],RepSpec.flags[4]);
          end;
        end;
        if (BFb.Bank==8) then begin
          if (RepSpec.flags[2]==0) then begin
            BankExpSwedish0(OPr,RepSpec.flags[0]); 
          end else begin
            BankExpSwedish3(OPr,RepSpec.flags[4],RepSpec.flags[3],RepSpec.flags[1]);
          end;
        end;
        if (BFb.Bank==23) then begin
          if (RepSpec.flags[2]==0) then begin
            BankExpSwedish0(OPr,RepSpec.flags[0]); 
          end else begin
            BankExpSwedish4(OPr,RepSpec.flags[4],RepSpec.flags[3]);
          end;
        end;
      end else begin
        if ((BFb.Bank==8) or (BFb.Bank==23)) then begin//or (BFb.Bank==7) new handelsbank format
          if (firstf==false) then begin
            NewLine;
          end;
        end;
       if (BFb.Bank==6) then begin
          if (firstf==false) then begin
            NewLine;
          end;
        end;        
/*
        if (BFb.Bank==7) then begin 
          if (RepSpec.flags[2]!=0) then begin 
            if (firstf==false) then begin
              NewLine;
            end;
            BankExpSwedish1(OPr,RepSpec.flags[0],PGSum);
          end;
        end;
*/
        if (BFb.Bank==6) then begin
         if (RepSpec.flags[2]==0) then begin
            BankExpSwedish0(OPr,RepSpec.flags[0]); 
          end else begin
            BankExpSwedish3(OPr,RepSpec.flags[4],RepSpec.flags[3],RepSpec.flags[1]);
          end;
        end;                   
      end;
      if ((BFb.Bank==9) or (BFb.Bank==10) or (BFb.Bank==11) or (BFb.Bank==12) or (BFb.Bank==35)) then begin // 10 = K-Link
// can hopefully be removed soon....
        if (BFb.Bank==35) then begin
          newversf = true;
        end else begin
          newversf = false;
        end;
        if (RepSpec.flags[2]==0) then begin
          BankExpNorway0(OPr,RepSpec,newversf,rowsernr,betcount,appsernr); 
        end else begin
          BankExpNorway1(OPr,RepSpec,newversf,rowsernr,betcount,appsernr);
        end; 
      end;
      if (BFb.Bank==82) then begin 
        BankExpEstoniaSEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb); 
      end;
      if ((BFb.Bank==24) or (BFb.Bank==25) or (BFb.Bank==26)) then begin 
        if (RepSpec.flags[2]==0) then begin  
          BankExpFinland2(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]); 
        end else begin 
          BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);
        end;
      end;

      if (BFb.Bank==27 or BFb.Bank==151) then begin 
        if (RepSpec.flags[2]==0) then begin  
          BankExpFinlandSEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb); 
        end else begin 
          BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);
        end;
      end;
      if (BFb.Bank==152) then begin 
        if (RepSpec.flags[2]==0) then begin  
          BankExpItalySEPA_Domestic(RepSpec,OPr,BFb); 
        end else begin 
//          BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);//?
        end;
      end;
      
      if (BFb.Bank==140) then begin
        if (RepSpec.flags[2]==0) then begin 
          BankExpGerSEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb);   //based on lithuanian
        end;
      end;
      if (BFb.Bank==153) then begin
        if (RepSpec.flags[2]==0) then begin 
          BankExpLithuaniaSEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb); 
        end;
      end;
      if (BFb.Bank==155) then begin
        if (RepSpec.flags[2]==0) then begin 
          BankExpSwedenSEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb);   //based on lithuanian
        end;
      end;
      if (BFb.Bank==156) then begin
        if (RepSpec.flags[2]==0) then begin 
          BankExpNorwaySEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb);   //based on lithuanian
        end;
      end;
      
      /*
      if (BFb.Bank==140) then begin 
        if (RepSpec.flags[2]==0) then begin  
          BankExpGermanySEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb); 
        end;
      end;
      */
      if (BFb.Bank==13) then begin BankExpFinland0(OPr,RepSpec.flags[0]); end;
      if (BFb.Bank==14) then begin BankExpFinland1(OPr,RepSpec.flags[0],OPr.PayCurCode); end;

// There WAS no bank with number 25, and BankExpFinland3 is pretty much the same as BankExpFinland21
//      if (BFb.Bank==25) and (RepSpec.flags[2] == 1)  then begin BankExpFinland3(OPr,RepSpec.flags[0],OPr.PayCurCode, RepSpec.flags[3],RepSpec.flags[4]); end;

//      if (BFb.Bank==15) then begin BankExpEstonia0(OPr,RepSpec.LastAcc); end;
//      if (BFb.Bank==16) and RepSpec.flags[2] == 0 then begin BankExpEstonia1(OPr,RepSpec.flags[3]+1,RepSpec.flags[1],weekrw,RepSpec.flags[5]); end;
//      if (BFb.Bank==16) and RepSpec.flags[2] == 1 then begin BankExpEstonia5(OPr,RepSpec.flags[3]+1,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5]); end;
//      if (BFb.Bank==18) and RepSpec.flags[2] == 0 then begin BankExpEstonia3(OPr,NrOfExports,RepSpec.flags[5]); end;
//      if (BFb.Bank==18) and RepSpec.flags[2] == 1 then begin BankExpEstonia6(OPr,RepSpec.flags[3],RepSpec.flags[4],RepSpec.flags[5]); end;
      if (BFb.Bank==19) then begin BankExpEstonia7(OPr,RepSpec.flags[3],RepSpec.flags[4],RepSpec.flags[6]); end;
//      if (BFb.Bank==20) then begin BankExpLatvia0(OPr,RepSpec.flags[1]); end;
//      if (BFb.Bank==21) and (RepSpec.flags[2]==0) then begin BankExpLatvia1(OPr,RepSpec.flags[1]); end;
//      if (BFb.Bank==21) and (RepSpec.flags[2]==1) then begin BankExpLatvia1a(OPr,RepSpec.flags[4]); end;
//      if (BFb.Bank==22) then begin BankExpLatvia2(OPr,RepSpec.flags[1],RepSpec.flags[4]); end;
//      if (BFb.Bank==32) then begin BankExpLatvia3(OPr,RepSpec.flags[1], RepSpec.flags[3],RepSpec.flags[4]); end;
//      if (BFb.Bank==52)then begin BankExpLatvia4(OPr,RepSpec); end;
      if (BFb.Bank==30) then begin BankExpEngEn0(OPr); end;
      if (BFb.Bank==31) then begin BankExpEngEn1(RepSpec,OPr); end;
      if (BFb.Bank==33) then begin BankExpEngEn2(OPr); end;
//      if (BFb.Bank==44) then begin BankExpLatvia5(OPr,RepSpec.flags[1],RepSpec.flags[4],BFb.ClientNr); end;
      if (BFb.Bank==40) then begin BankExpIceland1(OPr,RepSpec); end;
      if (BFb.Bank==41) then begin BankExpIceland2(OPr,RepSpec); end;
      if (BFb.Bank==42) then begin BankExpIceland3(OPr,RepSpec); end;
      if (BFb.Bank==43) then begin BankExpIceland4(OPr,RepSpec); end;
      if (BFb.Bank==50) then begin BankExpING(OPr,RepSpec); end;
      if (BFb.Bank==53) then begin BankExpBPH(OPr,RepSpec); end;
      if (BFb.Bank==54) then begin BankExpNordea(OPr,RepSpec); end;
      if (BFb.Bank==51) then begin BankExpReiffaisen(OPr,RepSpec); end;
      if (BFb.Bank==61) then begin BankLithuania1(RepSpec,OPr); end;
      if (BFb.Bank==62) then begin BankLithuania2(RepSpec,OPr); end;

      if (BFb.Bank==73) then begin BankCzech3(RepSpec,OPr); end;
      if (BFb.Bank==74) then begin 
        if (headerf) then begin 
          DomesticBankCzechABOHeader(OPr); 
          headerf = false;
        end;
        BankCzechABO(RepSpec,OPr); 
      end;
      if (BFb.Bank==90) then begin BankExpSlovenia(OPr); end;
      if (BFb.Bank==100) then begin BankExpAustraliaPayment(RepSpec,OPr,PGSum,betcount); end;
      if (BFb.Bank==100) then begin BankExpAustraliaEnd(PGSum,betcount,OPr); end;
      if (BFb.Bank==101) then begin BankExpAustralia2Payment(RepSpec,OPr,PGSum,betcount); end;
      if (BFb.Bank==110) then begin BankExpHunHVB(BFb,RepSpec,OPr,appsernr,rowsernr,PGSum); end;
      if (LIsNewZealandBank == true) then begin BankExpNewZealandPayments(RepSpec,OPr); end;
      if (BFb.Bank==150) then begin BankExpLatvian_FidaVista_Payments(RepSpec,OPr); end;
      if (BFb.Bank==154) then begin
        BankExpLatviaSEPA_Domestic(RepSpec,OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3],BFb);
      end;

      WKrw.Year = OPr.SerNr;
      MatRowPut(WKr,weekrw,WKrw);
      weekrw = weekrw + 1;
      firstf = false;
      LastOPSerNr = OPr.SerNr;
    end;
  end;
  
  if (LastOPSerNr>=0) then begin
    OPr.SerNr = LastOPSerNr;
    ReadFirstMain(OPr,1,true);
  end;

/* Special Bank End records */
  if (BFb.Bank==3) then begin SydEnd(PGSum,betcount); end;
  if (BFb.Bank==5) then begin BGEnd(PGSum,rowsernr,appsernr);  end;
  if (BFb.Bank==74) then begin DomesticBankCzechABOFooter; end;
  if (BFb.Bank==101) then begin 
    BankExpAustralia2OwnLine(RepSpec,OPr,PGSum,betcount);
    BankExpAustralia2End(PGSum,betcount); 
  end;
  if ((LIsNewZealandBank==true) and (LWrittenToBankFile==true)) then begin
    BankExpNewZealandSummaryLine (RepSpec);
  end;    
  
  if ((BFb.Bank==9) or (BFb.Bank==10) or (BFb.Bank==11) or (BFb.Bank==12) or (BFb.Bank==35)) then begin
    BankExpNorwayEnd(CYb,rowsernr,appsernr,betcount,0,RepSpec.flags[2],newversf);
    BFb.RowSerNr = rowsernr;
    BFb.LastSerNr = appsernr;
    BFb.LastDate = CurrentDate;  
    BlockStore(BFb);
  end;

/* NOT USED ANYMORE
if ((BFb.Bank==7) or (BFb.Bank==8) or (BFb.Bank==23)) then begin 
    if (RepSpec.flags[1]<>0) then begin
      BankExpPGEnd(PGSum);
    end;
  end;
*/
  if (BFb.Bank==82) then begin 
    BankExpEstoniaSEPA_Domestic_GroupFooter; 
  end;
  if (BFb.Bank==19) then begin BankExpEstonia7End;  end;
//  if (BFb.Bank==21) and (RepSpec.flags[2]==0) then begin BankExpLatvia1End(weekrw);  end;
//  if (BFb.Bank==21) and (RepSpec.flags[2]==1) then begin BankExpLatvia1aEnd(weekrw);  end;    
  if (BFb.Bank==27 or BFb.Bank==151) then begin
    if (RepSpec.flags[2]==0) then begin  
      BankExpFinlandSEPA_Domestic_GroupFooter; 
    end else begin 
//    BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);
    end;
    BlockStore(BFb);
  end;
  if (BFb.Bank==152) then begin
    if (RepSpec.flags[2]==0) then begin  
      BankExpItalySEPA_Domestic_GroupFooter; 
    end else begin 
//    BankExpFinland21(OPr,RepSpec.flags[0],OPr.PayCurCode,RepSpec.flags[3]);
    end;
    BlockStore(BFb);
  end;
  
  if (BFb.Bank==140) then begin
    if (RepSpec.flags[2]==0) then begin  
      BankExpGerSEPA_Domestic_GroupFooter; 
    end;
    BlockStore(BFb);
  end;
  if (BFb.Bank==153) then begin
    if (RepSpec.flags[2]==0) then begin  
      BankExpLithuaniaSEPA_Domestic_GroupFooter; 
    end;
    BlockStore(BFb);
  end;
  if (BFb.Bank==155) then begin
    if (RepSpec.flags[2]==0) then begin  
      BankExpSwedenSEPA_Domestic_GroupFooter; 
    end;
    BlockStore(BFb);
  end;
  if (BFb.Bank==156) then begin
    if (RepSpec.flags[2]==0) then begin  
      BankExpNorwaySEPA_Domestic_GroupFooter; 
    end;
    BlockStore(BFb);
  end;
  
  /*
  if (BFb.Bank==140) then begin
    if (RepSpec.flags[2]==0) then begin  
      BankExpGermanySEPA_Domestic_GroupFooter; 
    end;
    BlockStore(BFb);
  end;
  */
  if (BFb.Bank==150) then begin 
    BankExpLatvian_FidaVista_Footer; 
  end;
  if (BFb.Bank==154) then begin
    BankExpLatviaSEPA_Domestic_GroupFooter;
  end;
  if (BFb.Bank==110) then begin
    BFb.LastSerNr = appsernr;
    BlockStore(BFb);
  end;
  weekrwcnt = MatRowCnt(WKr);
  for (i=0;i<weekrwcnt;i=i+1) begin
    MatRowGet(WKr,i,WKrw);
    OPr.SerNr = WKrw.Year;
    if (ReadFirstMain(OPr,1,true)) then begin
      OPr.SentFlag = 1;
      storedf = RecordStore(OPr,true);
    end;
  end;
LMPEnOut:;
  return;
end;

global
updating procedure BankingFileExportDsm()
begin
  record OPVc OPr;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,OPr);
  ReportDefaults(RepSpec,"MPEClass");
  RepSpec.sStartDate = OPr.TransDate;
  RepSpec.sEndDate = OPr.TransDate;
  RepSpec.f1 = OPr.SerNr;
  RepSpec.repname = "MPEn";
  RepSpec.Media = mtFile;
  RunExport(RepSpec,true);
  
  return;
end;

