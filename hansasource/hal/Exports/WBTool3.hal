external procedure NormalizeObjstr(var string);
external procedure WBGetStartBalance(record ObjBalVc,string,Date,var val,Integer);


global
procedure WBAccStartBalance(string accnumber,Date sd,Integer basecurncy,var val v)
BEGIN
  record ObjBalVc ObjBalr;
  val t;
   v = 0;
  ObjBalr.AccNumber = accnumber;
  ObjBalr.Object = "";
  if (ReadFirstMain(ObjBalr,1,true)) then begin
    WBGetStartBalance(ObjBalr,"transdebit",sd,v,basecurncy);
    WBGetStartBalance(ObjBalr,"transcredit",sd,t,basecurncy);
    v = v - t;
  end;
  RETURN;
END;

global
procedure ExportWB1F2(val totecr, record RcVc RepSpec)
 BEGIN
  string 255 tstr;
  val v;
  val reqamn;
 
  reqamn = 0;  
 
  tstr = LastInRange(RepSpec.f1,10);
  
  ExportPadString("Project IBRD eligble expenditure for the six months ending",len("Project IBRD eligble expenditure for the six months ending")+1," ",false);
  ExportPadString(tstr,len(tstr)+1," ",false);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportVal(totecr,M4Val);
  NewLine;
  ExportString("Less: Amount to be paid through Direct Payment or Special Commitment");
 
  NewLine
  //Put in Sub Total
  NewLine
  ExportPadString("Less: SA balance as of the end of the reporting quarter,",len("Less: SA balance as of the end of the reporting quarter,")+1," ",false);
  ExportPadString("i.e.",5," ",false);
  ExportPadString(RepSpec.sStartDate,10," ",false);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  WBAccStartBalance(RepSpec.LastAcc,RepSpec.sStartDate,RepSpec.basecurncy,v);
  ExportVal(v,M4Val);
  NewLine;
  NewLine;
  ExportString("Requested amount to be advanced to SA");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  reqamn = totecr - v;
  ExportVal(reqamn,M4Val); 
RETURN;
end;

global
procedure WB1DCreateObjectsMatrices(record SMVc SMr,record SMVc SMnormr,string objtype1,string objtype2,var Integer objtype1nr,var Integer objtype2nr)
BEGIN
  record ObjVc Objr;
  record ObjVc Obj2r;
  row SMVc SMrw;
  Boolean TrHs,TrHs2,firstf;
  string 255 tstr;
  Integer rwcnt;

  firstf = true;
  TrHs = true;
  Objr.OTCode = objtype1;
  while (LoopKey("OTCode",Objr,1,TrHs)) begin
    if (Objr.OTCode<>objtype1) then begin TrHs = false; end;
    if (TrHs) then begin
      TrHs2 = true;
      ResetLoop(Obj2r);
      Obj2r.OTCode = objtype2;
      while (LoopKey("OTCode",Obj2r,1,TrHs2)) begin
        if (Obj2r.OTCode<>objtype2) then begin TrHs2 = false; end;
        if (TrHs2) then begin
          tstr = Objr.Code & "," & Obj2r.Code;
          SMrw.Objects = tstr;
          MatRowPut(SMr,rwcnt,SMrw);
          NormalizeObjstr(tstr);
          SMrw.Objects = tstr;          
          MatRowPut(SMnormr,rwcnt,SMrw);          
          rwcnt = rwcnt + 1;
          if (firstf) then begin
            objtype2nr = objtype2nr + 1;
          end;  
        end;
      end;
      firstf = false;
      objtype1nr = objtype1nr + 1;
    end;  
  end; 
  RETURN;
END;

global
procedure PrintHeaderWB1D(record RcVc RepSpec)
begin
  record BaseCurBlock bascur;
  record CYBlock CompYear;
  record ObjVc Objr;
  string 255 tstr;
  
  BlockLoad(CompYear);
  BlockLoad(bascur);
  tstr ="Reporting Currency";

 ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("Report 1 - D");
  NewLine;
  ExportString("Project Cash Withdrawals (Disbursement)");
  NewLine;
  Objr.Code = RepSpec.Stext;
  if (ReadFirstMain(Objr,1,true)) then begin
    ExportPadString("For", len("For")+1," ", false);
    ExportPadString(Objr.Comment,len(Objr.Comment)+1," ",false);
  end; 
  NewLine;
  ExportPadString("For the Period : ", len("For the Period")+1," ", false);
  ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
  NewLine;
  if (RepSpec.basecurncy == 0) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur1,len(bascur.BaseCur1)+2," ",false);
  end;
  if (RepSpec.basecurncy == 1) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur2,len(bascur.BaseCur2)+2," ",false);
  end;
  NewLine;
  NewLine;
  ExportString("Disbursement");
  ExportString("Eligible (%)");  
  ExportString("Project Expenditures");      
  ExportString("IBRD Eligible Expenditures"); 
  ExportString("Total");        
/*  ExportString("Total");
  ExportString("100% Gov«t");    
  ExportString("Gov«t & IBRD");    
  ExportString("IBRD");    
  ExportString("Total for");    
  ExportString("Cum. Am.t Pre-");    
  ExportString("Total (cumul.)");    
  ExportString("Paid from");      
  ExportString("Paid through");        
  ExportString("Cum. Amt. Pre-");    
  ExportString("Total");    
  ExportString("Paid");    
  ExportString("Pre-financed (not");  */  
  NewLine;
  ExportString("Category");
  ExportString("");
  ExportString("Paid during Quarter");   
  ExportString("Paid during Quarter"); 
  ExportString("Bank Distursement to date");         
/*  ExportString("Financed");    
  ExportString("Financed");    
  ExportString("Eligible (%)");    
  ExportString("Quarter");    
  ExportString("Financed B/F");    
  ExportString("to date");    
  ExportString("Special Account");      
  ExportString("DP/SC");        
  ExportString("financed C/F");    
  ExportString("");    
  ExportString("");    
  ExportString("yet reimbursed)");    */
  NewLine;
  NewLine;
  RETURN;
END;

procedure WB3CFindOpenVIAmount(LongInt vinr,Date todate,var val ipv)
BEGIN
  record OPrsVc OPrsr;
  record OPVc OPr;
  row OPVc OPrw;
  Boolean TrHs,testf;
  Integer i,rwcnt;
   
  TrHs = true;
  OPrsr.VINr = vinr;
  OPrsr.TransType = kOPrsTransTypePayment;
  while (LoopKey("VIKey",OPrsr,2,TrHs)) begin
    if (OPrsr.VINr<>vinr) then begin TrHs = false; end;
    if (OPrsr.TransType<>kOPrsTransTypePayment) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (OPrsr.TransDate>todate) then begin testf = false; end;
      if (testf) then begin
        OPr.SerNr = OPrsr.TransNr;
        if (ReadFirstMain(OPr,1,true)) then begin
          if (OPr.OrderedFlag<>0) then begin
            rwcnt = MatRowCnt(OPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(OPr,i,OPrw);
              if (OPrw.VISerNr==vinr) then begin
                ipv = ipv + OPrw.RecVal;
              end;
            end;
          end;
        end;  
      end;
    end;
  end;  
  RETURN;
END;

global
procedure WB3CFindVIAmount(LongInt pocqnr,Date todate,var val viv,var val ipv)
BEGIN
  record VIVc VIr;
  Boolean TrHs,testf;
  
  viv = 0;
  ipv = 0;
  TrHs = true;
  VIr.POCQStatNr = pocqnr;
  while (LoopKey("POCQStatNr",VIr,1,TrHs)) begin
    if (VIr.POCQStatNr<>pocqnr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (VIr.TransDate>todate) then begin testf = false; end;
      if (VIr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        viv = viv + VIr.PayVal;
        WB3CFindOpenVIAmount(VIr.SerNr,todate,ipv);
      end;
    end;
  end;
  RETURN;
END;

global
procedure GetObjstrBudget(string objstr,var val res)
BEGIN
  record Bud1Vc Bud1r;
  Boolean found;
  string 255 tstr;
  
  res = 0;
  found = true;
  tstr = objstr;
  NormalizeObjstr(tstr);  
  Bud1r.Objects = tstr;
  while (LoopKey("ObjAccKey",Bud1r,1,found)) begin
    if (Bud1r.Objects!=tstr) then begin found = false; end;
    if (found) then begin
      res = res + Bud1r.YearVal;
    end;
  end;
  RETURN;
END;  

global
procedure ExportWB1Vals10(string tstr,val ocv,val oyv,val oacv,val bcv,val byv,val bacv,val bbv)
BEGIN  
  
  if ((ocv==0) and (oyv==0) and (oacv==0) and (bcv==0) and (byv==0) and (bacv==0) and (bbv==0)) then begin
  end else begin
    ExportString(tstr);
    ExportVal((ocv*-1),M4Val);
    ExportVal((oyv*-1),M4Val);
    ExportVal((oacv*-1),M4Val);
    ExportVal(bcv,M4Val);
    ExportVal(byv,M4Val);
    ExportVal(bacv,M4Val);
 /*Comented by GT
    ExportVal((ocv + bcv)*-1,M4Val);
    ExportVal((oyv + byv)*-1,M4Val);
    ExportVal((oacv + bacv)*-1,M4Val);
    */
    ExportVal((ocv + bcv),M4Val);
    ExportVal((oyv + byv),M4Val);
    ExportVal((oacv + bacv),M4Val);
    ExportVal(bbv,M4Val);
    NewLine;
  end;  
  RETURN;  
END;

global
procedure AddWBTotVals1(val accv1,val accv2,val accv3,val b1,val b2,val b3,val b4,var val taccv1,var val taccv2,var val taccv3,var val tb1,var val tb2,var val tb3, var val tb4)
BEGIN
  taccv1 = taccv1 + accv1;
  taccv2 = taccv2 + accv2;
  taccv3 = taccv3 + accv3;
  tb1 = tb1 + b1;
  tb2 = tb2 + b2;
  tb3 = tb3 + b3;
  tb4 = tb4 + b4;
  RETURN;
END;

global
procedure SetWBZeroVals1(var val ocv,var val oyv,var val oacv,var val bcv,var val byv,var val bacv, var val cacv)
BEGIN
  ocv = 0;
  oyv = 0;
  oacv = 0;
  bcv = 0;
  byv = 0;
  bacv = 0;
  RETURN;  
END;
