external function val FindAccBalance(string,string,date,record ObjBalVc,Integer,Integer,Integer,string,Integer);
//external function Boolean GetAccName(string,var string,Integer);

procedure GetAccStartBalance(var val vp,string accstr,string objstr,Date bdp,record ObjBalVc ObjBalp,Integer simf,Integer basecurncy,string crncycode)
BEGIN
  Date sbd;
  
  sbd = AddDay(bdp,-1);
  vp = FindAccBalance(accstr,objstr,sbd,ObjBalp,simf,basecurncy,0,crncycode,0);
  RETURN;
END;

procedure FindAccToDateBalance(string accnumber,string object,Date StartDate,Integer basecurncy,string CurncyCode,var val v)
BEGIN
  record ObjBalVc ObjBalr;
  
  ObjBalr.AccNumber = accnumber;
  ObjBalr.Object = object;
  if (ReadFirstMain(ObjBalr,2,true)) then begin
    GetAccStartBalance(v,ObjBalr.AccNumber,ObjBalr.Object,StartDate,ObjBalr,0,basecurncy,CurncyCode);
  end;
  RETURN;
END;
  
procedure FindCorspAccFromDateToDateBalance(string accnumber,string corspacc,Date StartDate,Date EndDate,Integer basecurncy,Boolean debf,var val v)
BEGIN
  record MainVc mainr;
  record MainVc main2r;
  record TRVc TRr;
  row TRVc TRrw;
  row TRVc TR2rw;
  Integer i,j,rwcnt;
  Boolean TrHs,testf;
  
  v = 0;
  TrHs = true;
  mainr.AccNumber = accnumber;
  mainr.TransDate = StartDate;
  while (LoopMain(mainr,2,TrHs)) begin
    if (mainr.TransDate>EndDate) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (mainr.AccNumber<>accnumber) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      main2r.AccNumber = corspacc;
      main2r.TransDate = mainr.TransDate;
      main2r.TransNr = mainr.TransNr;
      main2r.IntYc = mainr.IntYc;
      main2r.FileName = mainr.FileName;
      if (ReadFirstMain(main2r,5,true)) then begin
        if (mainr.FileName=="TRVc") then begin
		      TRr.Number = mainr.TransNr;
		      TRr.IntYc = mainr.IntYc;
		      if (ReadFirstMain(TRr,2,true)) then begin
		        if (mainr.TransDate==TRr.TransDate) then begin
		          rwcnt = MatRowCnt(TRr);
		          for (i=0;i<rwcnt;i=i+1) begin
		            MatRowGet(TRr,i,TRrw);
		            if ((TRrw.stp==1) and (TRrw.ovst==0)) then begin
		              if (TRrw.AccNumber==accnumber) then begin
		                testf = false;
		                if (debf) then begin
  		                if (TRrw.DebVal<>0) then begin
	  	                  testf = true;
		                  end;
		                end else begin
		                  if (TRrw.CredVal<>0) then begin
	  	                  testf = true;
		                  end;
		                end;
		                if (testf) then begin
                      for (j=0;j<rwcnt;j=j+1) begin
                        MatRowGet(TRr,j,TR2rw);
          	            if ((TR2rw.stp==1) and (TR2rw.ovst==0)) then begin
		                      if (TR2rw.AccNumber==corspacc) then begin
        		                if (debf) then begin
        		                  if (basecurncy==0) then begin
        		                    if (TR2rw.CredVal<>0) then begin
	  	                            if (TRrw.DebVal==TR2rw.CredVal) then begin
	  	                              v = v + TRrw.DebVal;
	  	                              j = rwcnt;
	  	                            end;
		                            end;
		                          end else begin
        		                    if (TR2rw.CredVal2<>0) then begin
	  	                            if (TRrw.DebVal2==TR2rw.CredVal2) then begin
	  	                              v = v + TRrw.DebVal2;
	  	                              j = rwcnt;
	  	                            end;
		                            end;
		                          end;  
        		                end else begin
        		                  if (basecurncy==0) then begin
        		                    if (TR2rw.DebVal<>0) then begin
	  	                            if (TRrw.CredVal==TR2rw.DebVal) then begin
	  	                              v = v + TRrw.CredVal;
	  	                              j = rwcnt;	  	                            
	  	                            end;
		                            end;
		                          end else begin
        		                    if (TR2rw.DebVal2<>0) then begin
	  	                            if (TRrw.CredVal2==TR2rw.DebVal2) then begin
	  	                              v = v + TRrw.CredVal2;
	  	                              j = rwcnt;	  	                            
	  	                            end;
		                            end;
		                          end;  
        		                end;
		                      end;
		                    end;                                                
                      end;		                  
		                end;//testf
		              end;
		            end;
		          end;//for i
		        end;
		      end;
		    end;
      end;
    end;
  end;
  RETURN;
END;
  
procedure FindObjectToDateBalance(record ObjBalVc ObjBalr,string colname,Date todate,Integer basecurncy,var val v)
BEGIN
  string 255 tstr;
  Date td;
  
  td = AddDay(todate,-1);
  v = 0;
  if (basecurncy==0) then begin
    tstr = colname;
  end else begin
    tstr = colname & "2";
  end;
  v = GetBalance(ObjBalr,tstr,td);    
  RETURN;
END;

procedure FindObjectFromDateToDateTurnover(string object,Date StartDate,Date EndDate,Integer basecurncy,Boolean debf,var val v)
BEGIN
  record ObjBalVc ObjBalr;
  Boolean TrHs;
  val t;
  string 255 colname;
  
  v = 0;
  if (debf) then begin
    colname = "transdebit";
  end else begin
    colname = "transcredit";
  end;
  TrHs = true;
  ObjBalr.Object = object;
  while (LoopKey("ObjAccKey",ObjBalr,1,TrHs)) begin
    if (ObjBalr.Object<>object) then begin TrHs = false; end;
    if (TrHs) then begin
      FindObjectToDateBalance(ObjBalr,colname,EndDate,basecurncy,t);
      v = v + t;
      FindObjectToDateBalance(ObjBalr,colname,StartDate,basecurncy,t);
      v = v - t;
    end;
  end;
  RETURN;
END;
  
global
procedure WB1EEn(record RcVc RepSpec)
BEGIN 
  record BaseCurBlock bascur;
  record CYBlock CompYear;
  record ObjVc Objr;
  record AccVc Accr;
  val fwd,fwd1,fwd2,debval,credval,debval1,credval1,endbal,objdebval,objcredval,cumdisc;
  val intrst1, intrst2;
  val t1,t2;
  val end1, end2;
  string 255 tstr;
  string 255 tstr2;
  string 255 export_title;
  string 10 frFirstAcc,toFirstAcc,frLastAcc,toLastAcc;
  Boolean TrHs;
  
  frFirstAcc = FirstInRange(RepSpec.FirstAcc,10);
  toFirstAcc = LastInRange(RepSpec.FirstAcc,10);
  frLastAcc = FirstInRange(RepSpec.LastAcc,10);
  toLastAcc = LastInRange(RepSpec.LastAcc,10);
  if ((blank(frFirstAcc)) or (blank(toFirstAcc)) or (blank(frLastAcc)) or (blank(toLastAcc))) then begin
   Trace("Incorrect Specification","");
   goto LWB1EEn;
  end;
  
  BlockLoad(CompYear);
  BlockLoad(bascur);
 debval = 0;
 credval = 0;
  
      FindAccToDateBalance(frFirstAcc,"",RepSpec.sStartDate,RepSpec.basecurncy,RepSpec.CurncyCode,fwd1);
      FindAccToDateBalance(toFirstAcc,"",RepSpec.sStartDate,RepSpec.basecurncy,RepSpec.CurncyCode,fwd2);
  fwd = fwd1 +fwd2;    
  FindAccToDateBalance(RepSpec.Stext,"",RepSpec.sStartDate,RepSpec.basecurncy,RepSpec.CurncyCode,intrst1);
  FindAccToDateBalance(RepSpec.Stext,"",RepSpec.sEndDate,RepSpec.basecurncy,RepSpec.CurncyCode,intrst2);
 
  TrHs = true;
  Accr.AccNumber = frLastAcc;
  while (LoopMain(Accr,1,TrHs)) begin
    if (nonblank(toLastAcc)) then begin
      if (Accr.AccNumber>toLastAcc) then begin
        TrHs = false;
      end;
    end;  
    if (TrHs) then begin
  FindCorspAccFromDateToDateBalance(frFirstAcc,Accr.AccNumber,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.basecurncy,true,debval1);
  FindCorspAccFromDateToDateBalance(toFirstAcc,Accr.AccNumber,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.basecurncy,false,credval1);
 debval =debval1 + debval;
 credval = credval1 + credval;
 end;
 end;
  if (nonblank(RepSpec.ObjStr)) then begin
    FindObjectFromDateToDateTurnover(RepSpec.ObjStr,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.basecurncy,true,objdebval);
    FindObjectFromDateToDateTurnover(RepSpec.ObjStr,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.basecurncy,false,objcredval);
  end;
  export_title = USetStr(18908);
  if(frFirstAcc=="27000") begin //Government
  	export_title = export_title & " for Government";
  end;
  if(frFirstAcc=="27100" or frFirstAcc=="27101") then begin //WB
  	export_title = export_title & " for Loan IBRD70010-LT";
  end;
  if(frFirstAcc=="27200" or frFirstAcc=="27201") then begin //Side
  	export_title = export_title & " for Grant SIDA20307-LT";
  end;
  if(frFirstAcc=="27300" or frFirstAcc=="27301") then begin //JPN
  	export_title = export_title & " for Grant JPN26137-LT";
  end;
  
 // if (GetAccName(RepSpec.FirstAcc,tstr,255)) then bein end;    
  ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString(USetStr(18909));
  NewLine;
  ExportString(export_title);
  NewLine;
  ExportPadString(USetStr(18910), len(USetStr(18910))+1," ", false);
  ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
  NewLine;
    Objr.Code = RepSpec.ObjStr;
  if (ReadFirstMain(Objr,1,true)) then begin
    ExportPadString(USetStr(18911), len(USetStr(18911))+1," ", false);
    ExportPadString(Objr.Comment,len(Objr.Comment)+1," ",false);
  end; 
  NewLine;
  tstr2 = "Reporting Currency";
  if (RepSpec.basecurncy == 0) then begin
    ExportPadString(USetStr(18912), len(USetStr(18912)) + 1," ", false);
    ExportPadString(bascur.BaseCur1,len(bascur.BaseCur1)+2," ",false);
  end;
  if (RepSpec.basecurncy == 1) then begin
    ExportPadString(USetStr(18912), len(USetStr(18912)) + 1," ", false);
    ExportPadString(bascur.BaseCur2,len(bascur.BaseCur2)+2," ",false);
  end;
  NewLine;
  NewLine;
  ExportString("1");
  ExportPadString(USetStr(18913),len(USetStr(18913))+1," ",false);
  //ExportPadString("Opening balance as at : ",len("Opening balance as at :")+1," ",false);
  ExportPadString(RepSpec.sStartDate,len(RepSpec.sStartDate)+2," ",false);
  ExportString("");
  ExportString("");
  fwd = (fwd);
  ExportVal(fwd,M4Val);
  NewLine;  
  ExportString("2");  
  ExportString(USetStr(18914)); 
  cumdisc = RepSpec.vals1;
  ExportVal(cumdisc,M4Val);
  NewLine;  
  ExportString("3");  
  ExportPadString(USetStr(18915),len(USetStr(18915))+1," ",false);  
  ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
  ExportString("");
  ExportString("");
  ExportVal(debval,M4Val);
  debval = debval + cumdisc;
 // ExportVal(debval,M4Val);
  NewLine;
 /* ExportString("");
  ExportString("");
  ExportString("");
  t1 = (fwd + debval);
  ExportVal(t1,M4Val);
  NewLine;*/
  ExportString("4");  
  ExportString(USetStr(18916));
 //  ExportPadString("Less : Refund to IBRD from SA during the period : ",len("Less : Refund to IBRD from SA during the period : ")+1," ",false);  
 // ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
//  ExportString("");
  ExportString("");
  ExportVal(credval,M4Val);
   NewLine;
   ExportString("");  
   ExportString(USetStr(18917));
     t1 = (fwd + debval);
       ExportString("");
  ExportVal(t1,M4Val);
  NewLine;
 ExportString("4");  
 ExportString(USetStr(18918));
//  ExportPadString("Less : Refund to IBRD from SA during the period : ",len("Less : Refund to IBRD from SA during the period : ")+1," ",false);  
//  ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
 // ExportString("");
  ExportString("");
  ExportVal(credval,M4Val);
  NewLine;
  ExportString("5");
  ExportString(USetStr(18919));
  t1 = fwd + debval - credval;
  ExportString("");
  ExportVal(t1,M4Val);
  end1 = t1;
  NewLine;
  NewLine;
  ExportString("6");
  ExportString(USetStr(18920));  
  //ExportPadString("SA closing balance as at carried forward to next period",len("SA closing balance as at carried forward to next period")+1," ",false);
  //ExportPadString(RepSpec.sEndDate,len(RepSpec.sEndDate)+2," ",false);
 // ExportString("");
  ExportString("");
  endbal = RepSpec.vals0;
  ExportVal(endbal,M4Val);
  NewLine;
  ExportString("7");
  ExportString(USetStr(18921));  
  //ExportString("Add: Amount of eligible expenditures paid during quarter");  
  ExportString("");  
  ExportVal(objcredval,M4Val);
  NewLine;
  ExportString("8");
  ExportString(USetStr(18922));  
  ExportString("");
  t2 = (objdebval - objcredval)*-1;
  ExportString("0");  
//  ExportVal(t2,M4Val);
  NewLine;
  ExportString("");
  ExportString("");
  ExportString("");
   ExportString("0"); 
 // ExportVal(endbal+t2,M4Val);
  NewLine;
  ExportString("9");
  ExportString(USetStr(18923));
  ExportString("");
  intrst1 = (intrst1 - intrst2)*-1;
  ExportVal(intrst1,M4Val);
  NewLine;
  ExportString("10");  
  ExportString(USetStr(18924));
  //ExportString("Total advance accounted for");
  ExportString("");  
 // t2 = endbal + intrst1 + t2;
  t2 =  end1 - objcredval + intrst1;      
  ExportVal(t2,M4Val);
  NewLine;
  ExportString("11");  
  ExportString(UsetStr(18925));
 // ExportString("Discrepancy (5) - (10) to be explained");
  ExportString("");
//  t2 = endbal + objdebval-objcredval;  
  end2 = t2;
  ExportVal((end1 - endbal - objcredval),M4Val);
 // ExportVal((end1 - end2),M4Val);
  NewLine;

LWB1EEn:;

  RETURN;
END;
