external procedure IPPastePayMode(var record IPVc);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external procedure SubPrePayments(record IVVc,var val,var val);
external procedure IPSumup(var record IPVc);
external procedure OutRegisterTag(string);
external procedure ExpBackupString(string);

procedure SetupRec(record IPVc IPp,var LongInt sernr,string paymode,Date datp)
BEGIN
  RecordNew(IPp);
  if (nonblank(paymode)) then begin
    IPp.PayMode = paymode;
    IPPastePayMode(IPp);
  end;  
  IPp.SerNr = sernr;
  IPp.RegDate   = datp;
  IPp.TransDate = datp;
  IPp.OKFlag = 1; 
  sernr = sernr + 1;
  RETURN;
END;

procedure OpenPrepayments(record RcVc RepSpec,record CUVc CUr,var record IPVc IPr,var LongInt serno,string paymode,Date datp,var Boolean labelfp)
begin
  record ARPayHistVc ARPayHistr;  
  record ARPayHistVc lastARPayHistr;  
  Boolean found,testf;
  record VIVc VIr;
  Boolean vif;
  val rval,bookval;
  row IPVc IPrw;

  found = true;
  ARPayHistr.CustCode = CUr.Code;
  while (LoopKey("CUPNrCustCode",ARPayHistr,1,found)) begin
    if (ARPayHistr.CustCode!=CUr.Code) then begin found = false; end;
    if (found) then begin
      if (lastARPayHistr.CUPNr>0 and lastARPayHistr.CUPNr!=ARPayHistr.CUPNr and rval>0) then begin
        ClearRow(IPr,IPrw,1);
        IPrw.stp = 1;
        IPrw.InvoiceNr = -1;
        IPrw.CustCode = CUr.Code;
        IPrw.CustName = CUr.Name;
        IPrw.InvCurncy = lastARPayHistr.CurncyCode;
        IPrw.InvVal = rval;
        IPrw.BankCurncy = lastARPayHistr.CurncyCode;
        IPrw.BankVal = rval;
        IPrw.RecCurncy = lastARPayHistr.CurncyCode;
        IPrw.RecVal = rval;
        IPrw.PayDate = datp;
        IPrw.CUPNr = lastARPayHistr.CUPNr;
        if (IPrw.RecVal!=0) then begin
          MatRowPut(IPr,MatRowCnt(IPr),IPrw);
          if (MatRowCnt(IPr)>0) then begin
            if (labelfp) then begin
              OutRegisterTag("IPVc");
              NewLine;
              labelfp = false;
            end;
            IPSumup(IPr);
            ExportRecord(IPr);
            UserTrace(IPr.SerNr,M4Long);
            NewLine;
            SetupRec(IPr,serno,paymode,datp);
          end;
        end;
        rval = blankval;
        bookval = blankval;
      end;
      if (ARPayHistr.FileName=="IVVc") then begin
        testf = true;
        if (nonblankdate(datp)) then begin
          if (datp<ARPayHistr.TransDate) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          rval = rval - ARPayHistr.Val;
          bookval = bookval - ARPayHistr.BookVal;
        end;  
      end;
      if (ARPayHistr.FileName=="IPVc") then begin
        testf = true;
        if (nonblankdate(datp)) then begin
          if (datp<ARPayHistr.TransDate) then begin
            testf = false;
          end;
        end;        
        if (testf) then begin          
          rval = rval + ARPayHistr.Val;
          bookval = bookval + ARPayHistr.BookVal;
        end;  
      end;
      if (ARPayHistr.FileName=="CLOutVc") then begin
        testf = true;
        if (nonblankdate(datp)) then begin
          if (datp<ARPayHistr.TransDate) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          rval = rval - ARPayHistr.Val;
          bookval = bookval - ARPayHistr.BookVal;
        end;
      end;
      if (ARPayHistr.FileName=="CLInVc") then begin
        testf = true;
        if (nonblankdate(datp)) then begin
          if (datp<ARPayHistr.TransDate) then begin
            testf = false;
          end;
        end;        
        if (testf) then begin
          rval = rval + ARPayHistr.Val;
          bookval = bookval + ARPayHistr.BookVal;
        end;
      end;        
      lastARPayHistr = ARPayHistr;
    end;
  end;
  if (lastARPayHistr.CUPNr>0 and rval>0) then begin
    ClearRow(IPr,IPrw,1);
    IPrw.stp = 1;
    IPrw.InvoiceNr = -1;
    IPrw.CustCode = CUr.Code;
    IPrw.CustName = CUr.Name;
    IPrw.InvCurncy = lastARPayHistr.CurncyCode;
    IPrw.InvVal = rval;
    IPrw.BankCurncy = lastARPayHistr.CurncyCode;
    IPrw.BankVal = rval;
    IPrw.RecCurncy = lastARPayHistr.CurncyCode;
    IPrw.RecVal = rval;
    IPrw.PayDate = datp;
    IPrw.CUPNr = lastARPayHistr.CUPNr;
    if (IPrw.RecVal!=0) then begin
      MatRowPut(IPr,MatRowCnt(IPr),IPrw);
      if (MatRowCnt(IPr)>0) then begin
        if (labelfp) then begin
          OutRegisterTag("IPVc");
          NewLine;
          labelfp = false;
        end;
        IPSumup(IPr);
        ExportRecord(IPr);
        UserTrace(IPr.SerNr,M4Long);
        NewLine;
        SetupRec(IPr,serno,paymode,datp);
      end;
    end;
  end;
  return;
end;

procedure CreateOpenReceipts(record RcVc RepSpec,LongInt startno,string paymode,Date datp,var Boolean labelfp)
BEGIN
  record ARVc ARr;
  record IVVc IVr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer currow;
  Boolean firstf;
  LongInt serno;
  string 255 tstr;
  string 20 curncy,PayCurCode;
  val paidval,CurPayVal,paidb1;
  record CUVc CUr;
  val sumdiff,sumcurncy,sumbooked,sumnow,sum,sum2,rval;
  record SMVc CurTotalsr;
  Boolean backdatf;  
  Boolean TrHs;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;

  firstf = true;
  serno = startno;
  ARr.CustCode = "";
  while (LoopKey("CustCode",ARr,1,true)) begin
    IVr.SerNr = ARr.InvoiceNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      if (IVr.Invalid==0) then begin
        if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
//          paidval = IVr.Sum4 - (ARr.RVal + IVr.DiscSum);
          paidval = IVr.Sum4 - ARr.RVal;
        end else begin
//          paidval = IVr.Sum4 + ARr.RVal + IVr.DiscSum;
          paidval = IVr.Sum4 + ARr.RVal;
          paidval = -paidval;
        end;
        if (paidval!=0) then begin
          if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
            SubPrePayments(IVr,paidval,paidb1);
          end;
          if ((IVr.CurncyCode!=curncy) or (firstf)) then begin
            if (firstf==false) then begin
              if (MatRowCnt(IPr)>0) then begin
                if (labelfp) then begin
                  OutRegisterTag("IPVc");
                  NewLine;
                  labelfp = false;
                end;
                IPSumup(IPr);
                ExportRecord(IPr);
                UserTrace(IPr.SerNr,M4Long);
                NewLine;
              end;
            end;
            curncy = IVr.CurncyCode;
            SetupRec(IPr,serno,paymode,datp);
            currow = 0;
            firstf = false;
          end;
          ClearRow(IPr,IPrw,1);
          IPrw.stp = 1;
          IPrw.InvoiceNr = IVr.SerNr;
          IPrw.CustCode = IVr.CustCode;
          IPrw.CustName = IVr.Addr0;
          IPrw.InvCurncy = IVr.CurncyCode;
          IPrw.InvVal = paidval;
          IPrw.BankCurncy = IVr.CurncyCode;
          IPrw.BankVal = paidval;
          IPrw.RecCurncy = IVr.CurncyCode;
          IPrw.RecVal = paidval;
          IPrw.PayDate = datp;
          if (IPrw.RecVal!=0) then begin
            MatRowPut(IPr,currow,IPrw);
            currow = currow + 1;
          end;
        end;
      end;
    end;
  end;
  if (firstf==false) then begin
    if (MatRowCnt(IPr)>0) then begin
      if (labelfp) then begin
        OutRegisterTag("IPVc");
        NewLine;
        labelfp = false;
      end;
      IPSumup(IPr);
      ExportRecord(IPr);
      UserTrace(IPr.SerNr,M4Long);
      NewLine;
    end;
  end;

  if (RepSpec.flags[4]!=0) then begin
    SetupRec(IPr,serno,paymode,datp);
    currow = 0;  
    RepSpec.d1 = RepSpec.RegDate;
    backdatf = true;
    TrHs = true;
    while (LoopMain(CUr,1,TrHs)) begin
      if (TrHs) then begin
        RepSpec.flags[29] = 1;
        GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,backdatf,1,sum,sum2,rval,sumbooked,sumnow,sumcurncy,sumdiff,CurTotalsr,debaccs,debbal,debcnt);
        if (rval!=0) then begin
          rval = -rval;
          ClearRow(IPr,IPrw,1);
          IPrw.stp = 1;
          IPrw.InvoiceNr = -1;
          IPrw.CustCode = CUr.Code;
          IPrw.CustName = CUr.Name;
          IPrw.InvCurncy = CUr.CurncyCode;
          IPrw.InvVal = rval;
          IPrw.BankCurncy = CUr.CurncyCode;
          IPrw.BankVal = rval;
          IPrw.RecCurncy = CUr.CurncyCode;
          IPrw.RecVal = rval;
          IPrw.PayDate = datp;
          if (IPrw.RecVal!=0) then begin
            MatRowPut(IPr,currow,IPrw);
            currow = currow + 1;
            if (MatRowCnt(IPr)>0) then begin
              if (labelfp) then begin
                OutRegisterTag("IPVc");
                NewLine;
                labelfp = false;
              end;
              IPSumup(IPr);
              ExportRecord(IPr);
              UserTrace(IPr.SerNr,M4Long);
              NewLine;
              SetupRec(IPr,serno,paymode,datp);
              currow = 0;
            end;
          end;
        end;
        OpenPrepayments(RepSpec,CUr,IPr,serno,paymode,datp,labelfp);
      end;
    end;

    if (MatRowCnt(IPr)>0) then begin
      if (labelfp) then begin
        OutRegisterTag("IPVc");
        NewLine;
        labelfp = false;
      end;
      IPSumup(IPr);
      ExportRecord(IPr);
      UserTrace(IPr.SerNr,M4Long);
      NewLine;
    end;
  end;
  RETURN;
END;

procedure CreatePrepaymentReceipts(record IVVc IVr,var LongInt startno,string paymode,Date datp,var Boolean firstf,var Boolean labelfp)
BEGIN
  record IPVc IPr;
  row IPVc IPrw;
  row IVVc IVrw;
  Integer i,rwcnt;
  Integer currow;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
      if (labelfp) then begin
        OutRegisterTag("IPVc");
        NewLine;
        SetupRec(IPr,startno,paymode,datp);
        firstf = false;
        labelfp = false;
      end;
      ClearRow(IPr,IPrw,1);      
      IPrw.stp = 1;
      IPrw.InvoiceNr = -1;
      IPrw.CUPNr = IVrw.CUPNr;
      IPrw.CustCode = IVr.CustCode;
      IPrw.CustName = IVr.Addr0;
      IPrw.InvCurncy = IVr.CurncyCode;
      IPrw.InvVal = IVrw.Sum;
      IPrw.BankCurncy = IVr.CurncyCode;
      IPrw.BankVal = IVrw.Sum;
      IPrw.RecCurncy = IVr.CurncyCode;
      IPrw.RecVal = IVrw.Sum;
      IPrw.PayDate = datp;
      IPrw.VATCode = IVrw.VATCode;
      IPrw.VATVal = IVrw.Price;
// CopyM4Val(&IVrwp->BasePrice,&ARPayr.BookRVal); i think it is not needed
      
      MatRowPut(IPr,currow,IPrw);
      currow = currow + 1;      
    end;
  end;
  if (currow>0) then begin
    IPSumup(IPr);
    ExportRecord(IPr);
    UserTrace(IPr.SerNr,M4Long);
    NewLine;
  end;
  RETURN;
END;

global
procedure OpenInvEn(record RcVc RepSpec)
BEGIN
  record IVVc IVr;
  record ARVc ARr;
  Boolean found,firstipf;
  string 255 tstr;
  LongInt startno;
  Boolean iplabelf;
  record CYBlock CYb;
  record CYBlock CYexpb;
  
  if (blankdate(RepSpec.RegDate)) then begin 
    MessageBox(9610,"");
    goto LOpenInvEn; 
  end;
  
  BlockLoad(CYb);
//  CYexpb.VATLaw = CYb.VATLaw;
//  BlockStore(CYexpb);
  BlockExport("CYBlock");  
//  BlockStore(CYb);

  ExportFormat;
  BlockExport("SysFormatBlock");
  ExpBackupString(RepSpec.f3);

  found = false;
  if (CountRecords("ARVc")>0) then begin
    OutRegisterTag("IVVc");
    NewLine;
    found = true;
  end;
  while (LoopMain(ARr,1,found)) begin
    if (found) then begin
      IVr.SerNr = ARr.InvoiceNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (IVr.Invalid==0) then begin
          if (RepSpec.flags[2]==1) then begin
            IVr.UpdStockFlag = 0;
          end;  
          ExportRecord(IVr);
          NewLine;
          UserTrace(IVr.SerNr,M4Long);
        end;
      end;
    end;
  end;
  NewLine;
  NewLine;
  
  iplabelf = true;
  startno = RepSpec.long1;
  if (startno==-1) then begin
    startno = 1;
  end;
  ARr.InvoiceNr = -1;
  ResetLoop(ARr);
  firstipf = true;
  found = true;
  while (LoopMain(ARr,1,found)) begin
    if (found) then begin
      IVr.SerNr = ARr.InvoiceNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (IVr.Invalid==0) then begin
          CreatePrepaymentReceipts(IVr,startno,RepSpec.f1,RepSpec.RegDate,firstipf,iplabelf);
          UserTrace(IVr.SerNr,M4Long);
        end;
      end;
    end;
  end;
    
  if (RepSpec.flags[3]==1) then begin
    CreateOpenReceipts(RepSpec,startno,RepSpec.f1,RepSpec.RegDate,iplabelf);
  end;  
LOpenInvEn:;  
  RETURN;  
END;
