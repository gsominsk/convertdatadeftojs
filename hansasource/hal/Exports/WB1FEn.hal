external function Boolean CheckWBobjstreq(string,string);
external procedure NormalizeObjstr(var string);
external procedure GetObjectName(string,var string);
external procedure FindobjstrBudgetKey(Date,string,var val);
external procedure ConvertToBase2(Date,var val);
external procedure ExportWB1F2(val,record RcVc);

procedure ExportWB1F2Heading(record RcVc RepSpec)
BEGIN
  record BaseCurBlock bascur;
  record CYBlock CompYear;
  string 255 tstr;
  
  tstr ="Reporting Currency";
  BlockLoad(CompYear);
  BlockLoad(bascur);

  NewLine; 
  NewLine;
  NewLine;
  NewLine; 
  ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString(USetStr(18926));
  NewLine;
  ExportString(USetStr(18927));
  NewLine;
   if (RepSpec.basecurncy == 0) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur1,len(bascur.BaseCur1)+2," ",false);
  end;
  if (RepSpec.basecurncy == 1) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur2,len(bascur.BaseCur2)+2," ",false);
  end;
  NewLine;
  NewLine; 
end;

procedure ExportWB1FVals(string comment,val v1,val v2,val v3,val v4,val v5,var val v6,val v7,var Boolean newlinef)
BEGIN
  if ((v1==0) and (v2==0) and (v3==0) and (v4==0) and (v5==0) and (v6==0) and (v7==0)) then begin//JJ
  end else begin  
    if (nonblank(comment)) then begin
      ExportString(comment);
    end;
    ExportVal(v1*-1,M4Val); //a
    ExportVal(v2*-1,M4Val);  //b
    ExportVal(v3*-1,M4Val);  //c
    ExportVal(v4*-1,M4Val);  //d
    ExportVal(v5*-1,M4Val);  //e
    ExportVal(v6,M4Val);    //f
    
    ExportVal(v7*-1,M4Val);  //g
   // ExportVal(-1*(v7+v5+v4+v3+v2+v1),M4Val);  //h/**/

    NewLine;
    newlinef = true;    
  end;  
  RETURN;
END;

procedure SetWB1FZeroVals(var val v1, var val v2,var val v3,var val v4,var val v5,var val v6)
BEGIN
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  RETURN;
END;

procedure AddWB1FTotVals(val tpv,val npv,val ghpv,val t,val t1,val ecr,
                        var val tottpv,var val totnpv,var val totghpv,var val tott,var val tott1,var val totecr)
BEGIN
  tottpv = tottpv + tpv;
  totnpv = totnpv + npv;
  totghpv = totghpv + ghpv;
  tott = tott + t;
  tott1 = tott1 + t1;
  totecr = totecr + ecr;
  RETURN;
END;

procedure FindobjstrSimulationTurnover(string objstr,Date StartDate,Date EndDate,Integer basecurncy,var val resv)
BEGIN
  record SMVc SMr;
  row SMVc SMrw;
  Integer i,rwcnt;
  Boolean TrHs;
  val cv,dv;
  
  resv = 0;
  TrHs = true;
  SMr.TransDate = StartDate;
  while (LoopKey("TransDate",SMr,1,TrHs)) begin
    if (SMr.TransDate>EndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      rwcnt = MatRowCnt(SMr);
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(SMr,i,SMrw);
        if (CheckWBobjstreq(SMrw.Objects,objstr)) then begin
          dv = SMrw.DebVal;
          cv = SMrw.CredVal;
          if (basecurncy==1) then begin
            ConvertToBase2(SMr.TransDate,dv);  
            ConvertToBase2(SMr.TransDate,cv);  
          end;                
          resv = resv + dv;
          resv = resv - cv;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure FindObjectSimulationTurnover(string objstr,Date StartDate,Date EndDate,Date CompStartDate,Date CompEndDate,var val resv,var val compresv)
BEGIN
  record ObjBalVc ObjBalr;
  Boolean TrHs;
  val t;
  
  resv = 0;
  compresv = 0;
  ObjBalr.AccNumber = ""; 
  ObjBalr.Object = objstr;
  TrHs = true;
  while (LoopKey("ObjAccKey",ObjBalr,1,TrHs)) begin    
    if (ObjBalr.Object<>objstr) then begin TrHs = false; end;
    if (TrHs) then begin
      t = GetTurnover(ObjBalr,"simdebit",StartDate,EndDate) - GetTurnover(ObjBalr,"simcredit",StartDate,EndDate);
      resv = resv + t;
      t = GetTurnover(ObjBalr,"simdebit",CompStartDate,CompEndDate) - GetTurnover(ObjBalr,"simcredit",CompStartDate,CompEndDate);
      compresv = compresv + t;
    end;
  end;
  RETURN;  
END;

global
procedure WB1FEn(record RcVc RepSpec) 
BEGIN
  record CYBlock CompYear;
  record BaseCurBlock bascur;
  record ObjVc Objr;
  record ObjVc Obj2r;
  Boolean TrHs,TrHs2,newlinef;
  string 255 objstr;
  val tpv,npv,ghpv,bkey,t,t1,ecr;
  val tottpv,totnpv,totghpv,tott,tott1,totecr;
//  val ttottpv,ttotnpv,ttotghpv,ttott,ttott1,ttotecr;
  Date CompStartDate,CompEndDate;
  string 255 tstr;
  string 255 tstr1,tstr2;
  string 255 endmonth;
   Integer tmp;
   val tmpv;
   string 255 tmpjj;
  BlockLoad(CompYear);
  BlockLoad(bascur);

   
//  RepSpec.f1 = RepSpec.sStartDate2 & ":" & RepSpec.sEndDate2;
//only when reportnigperiods on
  tstr1 = FirstInRange(RepSpec.f1,10);  
  tstr2 = LastInRange(RepSpec.f1,10);  
 
  CompStartDate = StringToDate(tstr1);
  CompEndDate = StringToDate(tstr2);

//  ExportWB1FHeader(RepSpec);
  
   tstr = USetStr(18928);
  
  ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString(USetStr(18929));
  NewLine;
  ExportString(USetStr(18930));
  NewLine;
   if (RepSpec.basecurncy == 0) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur1,len(bascur.BaseCur1)+2," ",false);
  end;
  if (RepSpec.basecurncy == 1) then begin
    ExportPadString(tstr & " : ", len(tstr)+1," ", false);
    ExportPadString(bascur.BaseCur2,len(bascur.BaseCur2)+2," ",false);
  end;
  NewLine;
  NewLine;
  ExportString("");
  ExportString(USetStr(18931));
  ExportString(USetStr(18931));
  ExportString(USetStr(18932));
  ExportString(USetStr(18934));
  ExportString(USetStr(18935));
  ExportString(USetStr(18936));
  ExportString(USetStr(18937));
  NewLine;  
  ExportString(USetStr(18938));
  ExportString(USetStr(18939));
  ExportString(USetStr(18939));
  ExportString(USetStr(18940));
  ExportString(USetStr(18941));
  ExportString(USetStr(18941));
  ExportString(USetStr(18942));
  ExportString(USetStr(18943));
  NewLine;
  ExportString(USetStr(18944));
  ExportDate(RepSpec.sEndDate);
  ExportString(CompEndDate);
  ExportString(CompEndDate);
  ExportString(USetStr(18945));
  ExportString(USetStr(18945));
  ExportString("");
  ExportString(USetStr(18946));
  NewLine;
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString(CompEndDate);
  NewLine;
  NewLine;

  TrHs = true;
  Objr.Code = "";
  Objr.OTCode = RepSpec.ObjType;
  while (LoopKey("OTCode",Objr,1,TrHs)) begin
    if (Objr.OTCode<>RepSpec.ObjType) then begin
      TrHs = false;
    end;
    tottpv = 0;
    totnpv = 0;
    totghpv = 0;
    tott = 0;
    tott1 = 0;
    totecr = 0;
    if (TrHs) then begin
      newlinef = false;
      SetWB1FZeroVals(tpv,npv,ghpv,bkey,t,t1);
     // FindObjectSimulationTurnover(Objr.Code,RepSpec.sStartDate,RepSpec.sEndDate,CompStartDate,CompEndDate,tpv,npv);
     // FindobjstrBudgetKey(RepSpec.sStartDate,Objr.Code,bkey);    
     // if (nonblank(RepSpec.ObjStr)) then begin
     //   objstr = Objr.Code & "," & RepSpec.ObjStr;
     //   NormalizeObjstr(objstr);
     //   FindobjstrSimulationTurnover(objstr,RepSpec.sStartDate,CompEndDate,RepSpec.basecurncy,ghpv);        
    //  end;
    //  t = tpv + npv;
    //  t1 = t - ghpv;
    //  if (bkey<> 0) then begin   //BS
    //    ecr = bkey*t1/100;
   //   end else begin          //BS
  //      ecr = t1;       //BS
 //     end;          //BS
 //     ExportWB1FVals(Objr.Comment,tpv,npv,t,ghpv,t1,bkey,ecr,newlinef);
 //     AddWB1FTotVals(tpv,npv,ghpv,t,t1,ecr,tottpv,totnpv,totghpv,tott,tott1,totecr);
      
      TrHs2 = true;
      ResetLoop(Obj2r);
      Obj2r.Code = "";
      Obj2r.OTCode = RepSpec.FirstAcc;
      while (LoopKey("OTCode",Obj2r,1,TrHs2)) begin
        if (Obj2r.OTCode<>RepSpec.FirstAcc) then begin TrHs2 = false; end;
        if ((TrHs2) and (Objr.Code<>Obj2r.Code)) then begin
          objstr = Objr.Code & "," & Obj2r.Code;
          NormalizeObjstr(objstr);    
          tmp = StringToInt(objstr);      
          SetWB1FZeroVals(tpv,npv,ghpv,bkey,t,t1);
          FindobjstrSimulationTurnover(objstr,RepSpec.sStartDate,RepSpec.sEndDate,RepSpec.basecurncy,tpv);   
          tmpjj = tpv;
          tmpv = StringToVal(tmpjj,M4Val);     
          FindobjstrSimulationTurnover(objstr,CompStartDate,CompEndDate,RepSpec.basecurncy,npv);          
          FindobjstrBudgetKey(RepSpec.sStartDate,objstr,bkey);    
          if (nonblank(RepSpec.ObjStr)) then begin
            objstr = objstr & "," & RepSpec.ObjStr;
            NormalizeObjstr(objstr);
            FindobjstrSimulationTurnover(objstr,RepSpec.sStartDate,CompEndDate,RepSpec.basecurncy,ghpv);        
          end;          
          t = tpv + npv;
          t1 = t - ghpv;
          if (bkey <> 0) then begin  //BS
             ecr = bkey*t1/100;
          end else begin    //BS
            ecr = t1;    //BS
          end;            //BS
          ExportWB1FVals(Obj2r.Comment,tpv,npv,t,ghpv,t1,bkey,ecr,newlinef); 
          AddWB1FTotVals(tpv,npv,ghpv,t,t1,ecr,tottpv,totnpv,totghpv,tott,tott1,totecr);
        end;
      end; 
      t = 0;               
      ExportWB1FVals(USetStr(18901) & " : " & Objr.Comment,tottpv,totnpv,tott,totghpv,tott1,t,totecr,newlinef);
  //    AddWB1FTotVals(tottpv,totnpv,totghpv,tott,tott1,totecr,ttottpv,ttotnpv,ttotghpv,ttott,ttott1,ttotecr);
      if (newlinef) then begin
        NewLine;          
      end;
    end;  
  end; 
  t = 0;
  ExportWB1FVals(USetStr(18901),tottpv,totnpv,tott,totghpv,tott1,t,totecr,newlinef);  //wrong BS
  ExportWB1F2Heading(RepSpec);
  totecr = -totecr;
  ExportWB1F2(totecr,RepSpec);
  RETURN;
END;
