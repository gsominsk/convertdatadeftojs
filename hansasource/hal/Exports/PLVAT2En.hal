external procedure ConvertStrToXMLStr(string,var string);
external procedure GetVIInvXML(record TRVc,record RcVc, record BaseCurBlock,integer,
                                                                            string,
                                                                            var string,
                                                                            var string,
                                                                            var string,
                                                                            var string,
                                                                            var string,
                                                                            var val,
                                                                            var val,
                                                                            var val,
                                                                            var string,
                                                                            var string);
 

procedure ExpXMLData(array string fields,array string values,integer size,string tag)
begin
  string 255 tstr;
  integer i;
  
  ExportString("");
  ExportString("<" & tag & ">"); 
  newline;
  
  for (i = 0; i < size; i = i +1) begin
    if (values[i]<>"") then begin
      ExportString("");
      ExportString("");
      tstr = "<Field name=""" & fields[i] & """ value=""" & values[i] & """ />";
      ExportPadString(tstr,len(tstr)," ",false);
      newline;
    end;
  end;
  ExportString("");
  ExportString("</" & tag & ">"); 
  newline;
return;
end;



procedure FillHeadVals(array string Headvals,record RcVc RepSpec,val totvat,val totsum,integer num)
begin
  record CYBlock CYbl;
  
  blockload(CYBl);
  headvals[0] = right(CYBl.VATNr,11);
  headvals[1] = left(CYBl.CompName,120);
  headvals[2] = datetostring(RepSpec.sStartDate,"DD.MM.YYYY");
  headvals[3] = datetostring(RepSpec.sEndDate,"DD.MM.YYYY");
  headvals[4] = valtostring(totsum,M4Val,"",",",0);
  headvals[5] = valtostring(totvat,M4Val,"",",",0);
  headvals[6] = num;
  headvals[7] = RepSpec.f1;
  headvals[8] = RepSpec.f2;
/*
  headfields[0] = "nmr_kods";
  headfields[1] = "nosaukums";
  headfields[2] = "taks_no";
  headfields[3] = "taks_lidz";
  headfields[4] = "summa_kopa";
  headfields[5] = "pvn_kopa";
  headfields[6] = "dar_sk";
  headfields[7] = "vaditajs";
  headfields[8] = "izpilditajs";
*/
return;
end;


procedure FillRowVals(array string col0,
                       array string col1,
                       array string col2,
                       array string col3,
                       array string col4,
                       array string col5,
                       array string col6,
                       array string col7,
                       array string col8,
                       var integer size,
                       Record RcVc RepSpec,var val totvat,var val total)
begin
  record APAccBlock APAccbl;
  record TRVc TRr;
  record VATCodeBlock VATCodeBl;
  record VATBlock VATbl;
  record BaseCurBlock BCb;
  row VATCodeBlock VATCoderw;
  row TRVc TRrw;
  
  string 255 tstr;
  string 80 supp,rcode,docnr,docnr2,lastacc,docname,doccode,docdate;
  string 5 ccode;
  val payvat,paysum,t1,t2;
  integer rw,rwc,i,rwcnt,rownr,num;
  boolean TrHs;
  boolean testf,foundf,showf;
  
  
  blockload(VATCodeBl);
  blockload(VATBl);
  blockload(bcb);
  blockload(APAccbl);
  TRr.TransDate = RepSpec.sStartDate;
  trhs = true;
  num = 1;
  While (loopkey("TransDate",TRr,1,trhs)) begin 
    if (TRr.TransDate > RepSpec.sEndDate) then begin 
      trhs = false;
    end;
    if (trhs) then begin
    
      foundf = false;
      rwcnt = matrowcnt(VATCodeBl);
      rwc = MatRowCnt(TRr);
      lastacc = " ";
      payvat = 0;
      paysum = 0;      

      for (rw = 0;rw <rwc;rw = rw+1) begin
        testf = true;
        MatRowGet(TRr,rw,TRrw);
        if (TRrw.ovst<>0) then begin
          testf = false;
        end;
        if setinset(TRrw.AccNumber,VATbl.VATCustomsAcc)==false then begin
          testf = false;
        end;
        if (testf) then begin
          testf = false;
          for (i = 0;i < rwcnt; i = i + 1) begin
            Matrowget(VATCodebl,i,VATCoderw);
            if Trrw.AccNumber == VATCoderw.PurchVATAcc and blank(VATCoderw.PayPurchVATAcc) then begin
              testf = true;
            end;
            if (testf) then begin
              Goto LExit;
            end;
          end;
        end;
      end;
LExit:;          
      if (testf) then begin   
        if (TRr.IntYc==VIYc) then begin
          GetVIInvXML(TRr,RepSpec,bcb,rw,VATCoderw.VATCode,supp,rcode,docnr,docnr2,docdate,payvat,paysum,t1,tstr,ccode);  
        end;
        if (foundf) then begin
          total = total + paysum;
          totvat = totvat + payvat;
          col0[size] = num;
          ConvertStrToXMLStr(supp,supp);
          col1[size] = supp;
          col2[size] = rcode;
          col3[size] = valtostring(paysum,M4Val,"",",",0);
          col4[size] = valtostring(payvat,M4Val,"",",",0);
          col5[size] = valtostring(t1,M4Val,"",",",0);
          col6[size] = tstr;//currncy
          col7[size] = docnr2;
          col8[size] = DatetoString(Trr.TransDate,"DD.MM.YYYY");
          num = num+1;
          size = size + 1;
        end;
      end;
    end;
  end;
return;
end;


procedure ExpXMLHead()
begin
  string 255 tstr;
  tstr = "<?xml version=""1.0"" encoding=""windows-1257"" ?>";
  ExportPadString(tstr,len(tstr)," ",false); newline;

  tstr = "<!DOCTYPE DeclarationFile SYSTEM ""DUF.dtd"">";
  ExportPadString(tstr,len(tstr)," ",false); newline;

  tstr = "<DeclarationFile type=""pvn_es"">";
  ExportPadString(tstr,len(tstr)," ",false); newline;
  
return;
end;
procedure XMLDeclStart()
begin
  string 255 tstr;
  tstr = "<Declaration>";
  ExportPadString(tstr,len(tstr)," ",false); newline;
return;
end;

procedure XMLDeclEnd()
begin
  string 255 tstr;
  tstr = "</Declaration>";
  ExportPadString(tstr,len(tstr)," ",false); newline;
  tstr = "</DeclarationFile>";
  ExportPadString(tstr,len(tstr)," ",false); newline;
return;
end;


global
procedure PLVAT2En(record RcVc RepSPec)
begin
  array string 255 headfields,headvals;
  
  array string 255 Rowfields,rowvals;
  
  array string 50 col0;
  array string 50 col1;
  array string 50 col2;
  array string 50 col3;
  array string 50 col4;
  array string 50 col5;
  array string 50 col6;
  array string 50 col7;
  array string 50 col8;
  
  val totvat,totsum;
  integer size;  
  integer headsize;
  integer rowsize;
  integer i;
  if (setExportCodePage("CP1257")) then begin end;
  ExpXMLHead;
  XMLDeclStart;
 
  headfields[0] = "nmr_kods";
  headfields[1] = "nosaukums";
  headfields[2] = "taks_no";
  headfields[3] = "taks_lidz";
  headfields[4] = "summa_kopa";
  headfields[5] = "pvn_kopa";
  headfields[6] = "dar_sk";
  headfields[7] = "vaditajs";
  headfields[8] = "izpilditajs";
  headsize = 9;
  
  
  rowfields[0] = "npk";
  rowfields[1] = "partneris";
  rowfields[2] = "valsts_num";
  rowfields[3] = "summa_l";
  rowfields[4] = "pvn_l";
  rowfields[5] = "summa_v";
  rowfields[6] = "valuta";
  rowfields[7] = "rek_numurs";
  rowfields[8] = "rek_datums";
  rowsize = 9;

  FillRowVals(col0,col1,col2,col3,col4,col5,col6,col7,col8,size,RepSpec,totvat,totsum);

  FIllHeadvals(headvals,RepSpec,totvat,totsum,size);
  ExpXMLData(headfields,headvals,headsize,"DeclarationHeader");
  
  for (i = 0; i < size; i = i + 1) begin
    rowvals[0] = col0[i];
    rowvals[1] = col1[i];
    rowvals[2] = col2[i];
    rowvals[3] = col3[i];
    rowvals[4] = col4[i];
    rowvals[5] = col5[i];
    rowvals[6] = col6[i];
    rowvals[7] = col7[i];
    rowvals[8] = col8[i];
    ExpXMLData(rowfields,rowvals,rowsize,"Row");
  end;
  XMLDeclEnd;
return;
end;