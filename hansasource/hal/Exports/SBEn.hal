external procedure FindAccSD(Date,var Date,var Boolean);
external procedure GetAccStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val);
external procedure GetAccBalance(string,string,Date,record ObjBalVc,Integer,Integer,Integer,string,Integer,var val);
external procedure GetAccTurnover(string,string,Date,Date,record ObjBalVc,string,Integer,Integer,Integer,var val,var val);

global
procedure SBEn(record RcVc RepSpec)
BEGIN
  record AccVc Accr;
  record ObjBalVc ObjBalr;
  record CYBlock CompYear;
  Boolean Vws,ObjBals,resUseAccum;
  val Pb,Sb,Eb,t;
  Integer salst;
  Date sd,AccumStartDate;

  BlockLoad(CompYear);
  FindAccSD(RepSpec.sStartDate,AccumStartDate,resUseAccum);
  if (RepSpec.SimVerf!=0) then begin
    salst = -1; 
  end else begin
    salst = 0;
  end;  
  Vws = true;
  while (LoopMain(Accr,1,Vws)) begin
    if  (Accr.GroupAcc==0) then begin
      Eb = 0;
      Sb = 0;
      Pb = 0;
      ObjBalr.AccNumber = Accr.AccNumber;
      ObjBalr.Object = RepSpec.ObjStr;
      ObjBals = ReadFirstMain(ObjBalr,2,true);  
      ExportString(Accr.AccNumber);
      ExportString(Accr.Comment);
      if (ObjBals) then begin
        if ((Accr.AccType==3) or (Accr.AccType==4)) then  begin
            if (resUseAccum==true) then begin
              sd = AddDay(RepSpec.sStartDate,-1);
              t = blankval;               
              GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,AccumStartDate,sd,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Sb);
              t = blankval;               
              GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,AccumStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
              Pb = Eb - Sb;              
            end else begin
              Sb = 0;
              t = blankval;
              GetAccTurnover(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.CurncyCode,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.IncDaughter,t,Eb);
              Pb = Eb - Sb;              
            end;
        end;
        if ((Accr.AccType==0) or (Accr.AccType==1) or (Accr.AccType==2)) then begin
          GetAccStartBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sStartDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,Sb);
          GetAccBalance(Accr.AccNumber,RepSpec.ObjStr,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,0,RepSpec.CurncyCode,RepSpec.IncDaughter,Eb);
          Pb = Eb - Sb;
        end;
      end;
      if (Accr.AccType==0) then begin
        if (CompYear.NS1[0]==1) then begin
          Eb = -Eb;
        end;        
      end;
      if (Accr.AccType==1) then begin
        if (CompYear.NS1[1]==1) then begin
          Eb = -Eb;
        end;        
      end;
      if (Accr.AccType==2) then begin
        if (CompYear.NS1[2]==1) then begin
          Eb = -Eb;
        end;        
      end;
      if (Accr.AccType==3) then begin
        if (CompYear.NS1[3]==1) then begin
          Eb = -Eb;
        end;        
      end;
      if (Accr.AccType==4) then begin
        if (CompYear.NS1[4]==1) then begin
          Eb = -Eb;
        end;        
      end;
      ExportVal(Eb,M4Val);
      NewLine;
      UserTrace(Accr.AccNumber,M4Str);
    end;
  end;
  RETURN;
END;