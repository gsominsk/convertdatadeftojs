// Bankfile for Sweden UTLI (Handelsbanken)

external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Integer PMCheckType(string,var string,var string);

global
procedure SwedishCheckNo(val v,var string tstr)
begin
  string 100 t2;
  string 10 t3;
  Integer ln;
  
  tstr = ValToString(v,M4Val,"","",0);
  t3 = right(tstr,1);
  if (t3=="0") then begin t3 = "-"; end;
  if (t3=="1") then begin t3 = "J"; end;
  if (t3=="2") then begin t3 = "K"; end;
  if (t3=="3") then begin t3 = "L"; end;
  if (t3=="4") then begin t3 = "M"; end;
  if (t3=="5") then begin t3 = "N"; end;
  if (t3=="6") then begin t3 = "O"; end;
  if (t3=="7") then begin t3 = "P"; end;
  if (t3=="8") then begin t3 = "Q"; end;
  if (t3=="9") then begin t3 = "R"; end;
  ln = len(tstr);
  t2 = left(tstr,ln-1);
  tstr = t2 & t3;
  return;
end;

global
procedure BankExpSwedish2(record OPVc OPr,Integer mode,Integer whopays)
begin
  record VIVc VIr;
  record CUVc VEr;
  record BankVc BKr;
  row OPVc OPrw;
  Integer i,rwcnt,j,rwcnt1;
  Integer rowcount;
  string 200 tstr;
  Boolean VEf;
  val temp,totsum,totbase;
  record BankFileBlock bfr;
  Boolean testf;
  Integer invtype,pmtype;
  record PaymentCodeVc PCr;
  record PMBLock PMb;
  row PMBLock PMbrw;

  BlockLoad(PMb);
  BlockLoad(bfr);
  totsum = 0;
  totbase = 0;
  rowcount = 0;

// Avsändarpost
  ExportPadString("0",1," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),8,"0",true);
  ExportPadString(DateToString(CurrentDate,"YYMMDD"),6," ",false);
  ExportPadString("",57," ",false);
  ExportPadString(DateToString(CurrentDate,"YYMMDD"),6," ",false);
  ExportPadString("2",2," ",false);
  ExportPadString(chr(13) & chr(10),2,"",false);
  rwcnt = MatRowCnt(OPr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    testf = true;
    if (OPrw.ovst<>0) then begin testf = false; end; 
    if (OPrw.stp==5) then begin testf = false; end;
    if (blank(OPrw.BankAcc)) then begin testf = false; end; 
    VIr.SerNr = OPrw.VISerNr;
    if (ReadFirstMain(VIr,1,true)==false) then begin testf = false; end; 
    if (VIr.Invalid<>0) then begin testf = false; end;
    invtype = VIr.InvType;
    if (invtype==kInvoiceTypeCreditSpecialSales) then begin invtype = kInvoiceTypeCredit; end;
    if (invtype==kInvoiceTypeNormalSpecialSales) then begin invtype = kInvoiceTypeNormal; end;
    if ((invtype<kInvoiceTypeNormal) or (invtype>kInvoiceTypeCredit)) then begin
      invtype = kInvoiceTypeNormal;
    end;
    if ((invtype==kInvoiceTypeNormal) and (OPrw.RecVal<0)) then begin //VIr.PayVal<0)) then begin
      invtype = kInvoiceTypeCredit; /* temporarily change it to a credit invoice (UGLY!) */
    end;
    if (nonblank(OPrw.PayMode)) then begin
      pmtype = PMCheckType(OPrw.PayMode,tstr,tstr);
    end else begin
      pmtype = PMCheckType(OPr.PayMode,tstr,tstr);
    end;
    if (testf==true) then begin
      VEr.Code = VIr.VECode;
      if (ReadFirstMain(VEr,1,true)==false) then begin // Just in case
        VEr.Name = "";
        VEr.InvAddr0 = "";
        VEr.InvAddr1 = "";
        VEr.InvAddr2 = "";
        VEr.CountryCode = "";
        VEr.Bank = "";
        VEr.BankAccount = "";
        VEr.AccOperator = "";
      end;
     rowcount = rowcount + 1;
// Namnpost
     ExportPadString("2",1," ",false);
     ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),7,"0",true);
     tstr = ConvertSpecStr(UpperCase(Mid(VEr.Name,0,30)),"NOSCANDCHAR");
     ExportPadString(tstr,30," ",false);
     tstr = ConvertSpecStr(UpperCase(Mid(VEr.Name,30,35)),"NOSCANDCHAR");
     ExportPadString(tstr,35," ",false);
     ExportPadString("",7," ",false);
     ExportPadString(chr(13) & chr(10),2,"",false);

// Adresspost
     ExportPadString("3",1," ",false);
     ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),7,"0",true);
     ExportPadString(ConvertSpecStr(UpperCase(VEr.InvAddr0),"NOSCANDCHAR"),30," ",false);
     ExportPadString(ConvertSpecStr(UpperCase(VEr.InvAddr1 & VEr.InvAddr2),"NOSCANDCHAR"),35," ",false);
     ExportPadString("",1," ",false);
     ExportPadString(OPrw.SortCode,2," ",false);  //ExportPadString(VEr.CountryCode,2," ",false);
     ExportPadString("",1," ",false);
     switch (whopays) begin
       case 0: ExportPadString("9",1," ",false);
       case 1: ExportPadString("1",1," ",false);
       case 2: ExportPadString("0",1," ",false);
       otherwise ExportPadString("0",1," ",false);
     end;
     if (mode==1 or mode==2) then begin
       ExportPadString("T",1," ",false);
     end else begin
       if (pmtype==kPayModeTypeCheque or pmtype==kPayModeTypeOwnCheque) then begin
         ExportPadString("C",1," ",false);
       end else begin
         ExportPadString("B",1," ",false);
       end;
     end;
     ExportPadString("",1," ",false);
     ExportPadString(chr(13) & chr(10),2,"",false);

// Bankpost - ny
     ExportPadString("4",1," ",false);
     ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),7,"0",true);
     BKr.Code = VEr.AccOperator;
     if (ReadFirstMain(BKr,1,true)) then begin
       if (nonblank(OPrw.BankAcc)) then begin
         ExportPadString(UpperCase(OPrw.BankAcc),35," ",false);
       end else begin
         ExportPadString(UpperCase(BKr.Nr2),35," ",false);
       end;
       ExportPadString(UpperCase(BKr.Nr1),24," ",false);
       ExportPadString(UpperCase(BKr.SWIFT),11," ",false);
       ExportPadString("BP",2,"",false);
     end else begin
       if (nonblank(OPrw.BankAcc)) then begin
         ExportPadString(UpperCase(OPrw.BankAcc),35," ",false);
       end else begin
         ExportPadString(UpperCase(VEr.BankAccount),35," ",false);
       end;
       ExportPadString(UpperCase(VEr.Bank),24," ",false);
       ExportPadString(UpperCase(VEr.AccOperator),11," ",false);
       ExportPadString("",2," ",false);
     end;
     ExportPadString(chr(13) & chr(10),2,"",false);
    if (invtype==3) then begin // credit invoice
// Betalningspost 
        ExportPadString("5",1," ",false);
        ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),7,"0",true);
        if (blank(VIr.InvoiceNr)) then begin
          ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),25," ",false);
        end else begin
          ExportPadString("" & VIr.InvoiceNr,25," ",false);
        end;
        temp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
        totbase = totbase + temp;
        temp = 0 - temp;
        SwedishCheckNo(temp,tstr);
        ExportPadString(tstr,11,"0",true);
        if (bfr.PayType=="T") then begin
          tstr = ConvertSpecStr(UpperCase(bfr.ContractNumer),"NOSCANDCHAR");
        end else begin
          tstr = "";
        end;
        ExportPadString(tstr,10," ",false);
        ExportPadString(OPrw.RecCurncy,3," ",false);
        tstr = DateToString(OPr.PayDate,"YYMMDD");
        ExportPadString(tstr,6," ",false);
        ExportPadString("",1," ",false);
        ExportPadString("",1," ",false);
        temp = 0 - OPrw.RecVal;
//        totsum = totsum + temp; // This must be wrong, the value is already minus
        totsum = totsum + OPrw.RecVal;
        SwedishCheckNo(temp,tstr);
        ExportPadString(tstr,13,"0",true);
        ExportPadString("",2," ",false);
        ExportPadString(chr(13) & chr(10),2,"",false);
    end;
    if (invtype<>3) then begin// normal invoices
// Betalningspost 
        ExportPadString("6",1," ",false);
        ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),7,"0",true);
        if (blank(VIr.InvoiceNr)) then begin
          ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),25," ",false);
        end else begin
          ExportPadString("" & VIr.InvoiceNr,25," ",false);
        end;
        temp = MulWithRateToBase1(OPrw.RecCurncy,OPr.TransDate,OPrw.RecVal,DefaultCurRoundOff);
        totbase = totbase + temp;
        ExportPadString(ValToString(temp,M4Val,"","",0),11,"0",true);
        if (bfr.PayType=="T") then begin
          tstr = UpperCase(bfr.ContractNumer);
        end else begin
          tstr = "";
        end;
        ExportPadString(tstr,10," ",false);
        ExportPadString(OPrw.RecCurncy,3," ",false);
        //JJ
        if (VIr.DueDate>OPr.PayDate) then begin
          tstr = DateToString(VIr.DueDate,"YYMMDD");
        end else begin
          tstr = DateToString(OPr.PayDate,"YYMMDD");
        end;        
        ExportPadString(tstr,6," ",false);
        //JJ        
        ExportPadString("",1," ",false);
        ExportPadString("0",1," ",false);
        totsum = totsum + OPrw.RecVal;
        ExportPadString(ValToString(OPrw.RecVal,M4Val,"","",0),13,"0",true);
        ExportPadString("",1," ",false);
        if (nonblank(bfr.PayType)) then begin
          tstr = ConvertSpecStr(UpperCase(bfr.PayType),"NOSCANDCHAR");
        end else begin
          tstr = "";
        end;
        ExportPadString(tstr,1," ",false);
        ExportPadString(chr(13) & chr(10),2,"",false);
    end;
// Riksbankspost
    rwcnt1 = MatRowCnt(PMb);
    for(j=0;j<rwcnt1;j=j+1) begin
      MatRowGet(PMb,j,PMbrw);
      if (OPr.PayMode==PMbrw.Code) then begin
        if (nonblank(PMbrw.BankCode)) then begin
          BKr.Code = PMbrw.BankCode;
          ReadFirstMain(BKr,1,true)
        end;
      end;
    end;

    PCr.Code = OPrw.PaymentCode;
    ReadFirstMain(PCr,1,true);
    ExportPadString("7",1," ",false);
    ExportPadString(ConvertSpecStr(OPrw.VECode,"NOSCANDCHAR"),7,"0",true);
    ExportPadString(PCr.Code,4," ",false);
    ExportPadString("",8," ",false);
    ExportPadString("D",1,"",false);
    ExportPadString(OPr.SortCode,2," ",false);
    ExportPadString(BKr.Nr2,35," ",false);//ExportPadString(OPr.BankAcc,35," ",false);
    ExportPadString("",2," ",false);
    ExportPadString(OPrw.BankRefStr,20," ",false);
    ExportPadString(chr(13) & chr(10),2,"",false);
  end;
  end;
  UserTrace("" & OPr.SerNr,2);
// Avstämningspost 
  ExportPadString("9",1," ",false);
  ExportPadString(StripNonDigits(OPr.BankAcc),8,"0",true);
  ExportPadString(ValToString(totbase,M4Val,"","",0),12,"0",true);
  ExportPadString("",42," ",false);
  ExportPadString(ValToString(totsum,M4Val,"","",0),15,"0",true);
  ExportPadString("",2," ",false);
//  NewLine;
  return;
end;

