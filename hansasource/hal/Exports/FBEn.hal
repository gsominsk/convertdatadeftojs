external procedure GetAccStartBalance(string,string,Date,record ObjBalVc,Integer,Integer,string,Integer,var val);
external function val FindAccTurnover(string,string,date,date,record ObjBalVc,Integer,Integer,string,Integer);



procedure FBAccRuPerBal(string accstr,string objs,var val Sbp,var val Pbp,var val Ebp,Integer DCSide,record RcVc RepSpec,Boolean resuseacum,
                        var val debval,var val credval)
BEGIN
  record ObjBalVc ObjBalr;
  Boolean Objbals;
  Date acumd;

  Sbp = 0;
  Pbp = 0;
  Ebp = 0;
  ObjBalr.AccNumber = accstr;
  ObjBalr.Object = objs;
  ObjBals = ReadFirstMain(ObjBalr,2,true);
  if (resuseacum==true) then begin
    GetAccStartBalance(accstr,objs,RepSpec.sStartDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,Sbp);
    Pbp = FindAccTurnover(accstr,objs,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,"",RepSpec.IncDaughter);        
  end else begin
    if (RepSpec.flags[0]==1) then begin
      acumd = AddDay(RepSpec.sStartDate,-1);
      GetAccStartBalance(accstr,objs,RepSpec.sStartDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,RepSpec.CurncyCode,RepSpec.IncDaughter,Sbp);
      debval = GetTurnover(ObjBalr,"transdebit",RepSpec.sStartDate,RepSpec.sEndDate);               
      credval = GetTurnover(ObjBalr,"transcredit",RepSpec.sStartDate,RepSpec.sEndDate);  
    end;  
    Pbp = FindAccTurnover(accstr,objs,RepSpec.sStartDate,RepSpec.sEndDate,ObjBalr,RepSpec.SimVerf,RepSpec.basecurncy,"",RepSpec.IncDaughter);        
  end;
  RETURN;
END;

function
Integer FindInString(string s1,string c1)
BEGIN
  Integer res;
  Integer i;
  
  res = 0;
  for(i=1;i<=len(s1);i=i+1) begin
    if (res==0) then begin
      if (CharacterMatch(s1,c1,i)) then begin
        res = i;
      end;
    end;  
  end;
  FindInString = res;
  RETURN;
END;

global
procedure FBEn(record RcVc RepSpec)
BEGIN
  Boolean Vws;
  record ObjBalVc ObjBalr;
  record AccVc Accr;
  Boolean first;
  val Sb,Pb,Eb;
  val debval,credval;
  string 255 frob,toob,firstacc,lastacc;
  Boolean testf;

  firstacc = FirstInRange(RepSpec.AccStr,10);
  lastacc = LastInRange(RepSpec.AccStr,10);
  frob = FirstInRange(RepSpec.ObjStr,20);
  toob = LastInRange(RepSpec.ObjStr,20);

  first = true;
  Vws = true;
  while (LoopMain(ObjBalr,1,Vws)) begin
      testf = true;
      if (nonblank(firstacc) and (firstacc>ObjBalr.AccNumber)) then begin testf = false; end;
      if (nonblank(lastacc) and (lastacc<ObjBalr.AccNumber)) then begin testf = false; end;
      if (nonblank(RepSpec.ObjStr) and (frob>ObjBalr.Object)) then begin testf = false; end;
      if (nonblank(RepSpec.ObjStr) and (toob<ObjBalr.Object)) then begin testf = false; end;
      if (testf) then begin
        UserTrace(ObjBalr.AccNumber,2);
        Accr.AccNumber = ObjBalr.AccNumber;
        if (ReadFirstMain(Accr,1,true)) then begin
          if (FindInString(ObjBalr.Object,",")==0) then begin
            if (FindInString(ObjBalr.Object,":")==0) then begin
              FBAccRuPerBal(Accr.AccNumber,ObjBalr.Object,Sb,Pb,Eb,0,RepSpec,false,debval,credval);
    
              ExportString(ObjBalr.AccNumber);
              ExportString(ObjBalr.Object);
              if (RepSpec.flags[0]==1) then begin
                ExportVal(Sb,M4Val);
                ExportVal(debval,M4Val);
                ExportVal(credval,M4Val);
                Eb = debval - credval;
                ExportVal(Eb,M4Val);
                Eb = Eb + Sb;
                ExportVal(Eb,M4Val);
              end else begin    
                ExportVal(Sb,M4Val);
                ExportVal(Pb,M4Val);
                ExportVal(Eb,M4Val);
              end;  
              NewLine;
            end;
          end;
        end;
      end;
  end;
  if (first==false) then begin NewLine; end;
END;
