external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure FinnishBankVal(var string,val);
/*
procedure BankExpING_inCurncyHeader(record CYBlock CompYear,Integer acnt,val totsum)
BEGIN
  record BankVc Bankr;

  NewLine;
  ExportPadString(":01:",4," ",false);
  ExportPadString(CompYear.BankCode,17,"0",true);
  NewLine;
  ExportPadString(":02:",4," ",false);
  ExportPadString("jak obliczyc",12," ",false);
  NewLine;
  ExportPadString(":03:",4," ",false);
  ExportPadString(acnt,5," ",false);
  NewLine;
  Bankr.Code = CompYear.Bank2;
  if (ReadFirstMain(Bankr,1,true)) then begin end;
  ExportPadString(":04:",4," ",false);
  ExportPadString(Bankr.SWIFT,11," ",false);
  NewLine;
  ExportPadString(":05:",4," ",false);
  ExportPadString(CompYear.CompName,35," ",false);
  NewLine;
  ExportPadString(CompYear.Addr0,35," ",false);
  NewLine;
  ExportPadString(CompYear.Addr1,35," ",false);
  NewLine;
  ExportPadString(CompYear.Addr2,35," ",false);      
  NewLine;
  ExportPadString(":07:",4," ",false);
  ExportPadString("filename",12," ",false);
  NewLine;
  RETURN;
END;

procedure BankExpING_inCurncy(record OPVc OPr,string onlycurncy,Integer whopays)
BEGIN
  row OPVc OPrw;
  record VIVc VIr;
  record CUVc VEr;
  record CYBlock CompYear;
  record BaseCurBlock basecur;
  Integer i,rwcnt,acnt,ai;
  string 255 tstr;
  Array string 20 avecode;
  Array string 20 acurncycode;
  Array string 100 avebankacc;
  Array string 200 avecomment;
  Array Date avevidate;
  Array val avebankval;
  val totsum;
  record BankVc compBankr;
  record BankVc Bankr;

  BlockLoad(basecur);
  BlockLoad(CompYear);
  rwcnt = MatRowCnt(OPr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.RecCurncy!=basecur.BaseCur1) and (nonblank(OPrw.BankCurncy)) then begin
      VIr.SerNr = OPrw.VISerNr;
      if (ReadFirstMain(VIr,1,true)) then begin end;                        
      if ((blank(onlycurncy)) or (onlycurncy==OPrw.RecCurncy)) then begin
        ai = CheckIfVEinArray(OPrw.VECode,OPrw.BankAcc,OPrw.RecCurncy,avecode,avebankacc,acurncycode,acnt,true);
        if (ai>-1) then begin
          avebankval[ai] = avebankval[ai] + OPrw.BankVal;
          avecomment[ai] = avecomment[ai] & "," & VIr.InvoiceNr;
          avevidate[ai] = bd;
        end else begin
          AddToVEArray(OPrw.VECode,OPrw.BankAcc,VIr.InvoiceNr,OPrw.RecCurncy,OPrw.BankVal,VIr.TransDate,avecode,avebankacc,avecomment,acurncycode,avebankval,avevidate,acnt);
        end;
      end;
    end;
  end;
  for (i=0;i<acnt;i=i+1) begin
    totsum = totsum + avebankval[i];
  end;
  BankExpING_inCurncyHeader(CompYear,acnt,totsum);

  compBankr.Code = CompYear.Bank2;
  if (ReadFirstMain(compBankr,1,true)) then begin end;
  
  for (i=0;i<acnt;i=i+1) begin
    ExportPadString("{F01",4," ",false);
    ExportPadString(compBankr.SWIFT,11," ",false);
    ExportPadString("1",4,"0",true);//file number from setting
    ExportPadString(i,6,"0",true);
    ExportPadString("}",1," ",false);
    ExportPadString("{2:I100:",8," ",false);
    VEr.Code = avecode[i];
    if (ReadFirstMain(VEr,1,true)) then begin end;
    Bankr.Code = VEr.AccOperator;
    if (ReadFirstMain(Bankr,1,true)) then begin end;
    ExportPadString(Bankr.SWIFT,11," ",false);
    ExportPadString("N",1," ",false);
    ExportPadString("1}",2," ",false);
    ExportPadString("{4:",2," ",false);
    NewLine;
    ExportPadString(":20:",4," ",false);
    ExportPadString(CompYear.BankCode,16,"0",true);
    NewLine;    
    ExportPadString(":32A:",5," ",false);
    ExportPadString(DateToString(OPr.PayDate,"YYMMDD"),6," ",false);
    ExportPadString(acurncycode[i],3," ",false);
    ExportPadString(avebankval[i],15,"0",true);
    NewLine;    
    ExportPadString(":50:",4," ",false);
    ExportPadString(CompYear.CompName,35," ",false);
    NewLine;    
    ExportPadString(CompYear.Addr0,35," ",false);
    NewLine;    
    ExportPadString(CompYear.Addr1,35," ",false);
    NewLine;    
    ExportPadString(CompYear.Addr2,35," ",false);      
    NewLine;    
    ExportPadString(":52D:",5," ",false);
    ExportPadString(CompYear.Bank1,34," ",false);
    NewLine;    
    ExportPadString("",34," ",false);
    NewLine;    
    ExportPadString("",3," ",false);    
    ExportPadString("",15,"0",true);    
    NewLine;    
    ExportPadString("",14," ",false);    
    ExportPadString("",1," ",false);    
    ExportPadString("",2," ",false);    
    ExportPadString("",1," ",false);    
    ExportPadString("",2," ",false);    
    NewLine;    
    ExportPadString(":57A:",5," ",false);
    ExportPadString(Bankr.SWIFT,11," ",false);
    NewLine;    
    ExportPadString(":59:",4," ",false);
    ExportPadString("/",1," ",false);
    ExportPadString(avebankacc[i],34," ",false);
    NewLine;    
    ExportPadString(VEr.Name,35," ",false);
    NewLine;    
    ExportPadString(VEr.InvAddr0,35," ",false);
    NewLine;    
    ExportPadString(VEr.InvAddr1,35," ",false);
    NewLine;    
    ExportPadString(VEr.InvAddr2,35," ",false);      
    NewLine;    
    ExportPadString(":70:",4," ",false);
    tstr = Left(avecomment[i],35);
    ExportPadString(tstr,len(tstr)," ",false);
    NewLine;    
    tstr = Mid(avecomment[i],35,35);
    ExportPadString(tstr,len(tstr)," ",false);
    NewLine;    
    tstr = Mid(avecomment[i],70,35);
    ExportPadString(tstr,len(tstr)," ",false);
    NewLine;    
    if (nonblankdate(avevidate[i])) then begin
      tstr = DateToString(avevidate[i],"YYMMDD");
    end else begin
      tstr = Mid(avecomment[i],105,35);
    end;
    ExportPadString(tstr,len(tstr)," ",false);      
    NewLine;    
    ExportPadString(":71A:",5," ",false);
    switch (whopays) begin
      case 0: ExportPadString("0",1," ",false);      
      case 1: ExportPadString("1",1," ",false);      
      case 2: ExportPadString("2",1," ",false);      
    end;
    NewLine;    
    ExportPadString(":72:",4," ",false);
    ExportPadString("01",4,"0",false);
    ExportPadString(" ",1," ",false);
    ExportPadString("0",4,"0",false);
    ExportPadString(" ",35," ",false);
    NewLine;    
    ExportPadString(" ",35," ",false);
    NewLine;    
    ExportPadString(" ",35," ",false);
    NewLine;    
    ExportPadString(" ",35," ",false);
    NewLine;    
  end;
  RETURN;
END;
*/
procedure ExportStringInQuotes(string instr,Integer l,string padch,Boolean padrightf)
BEGIN
  string 255 tstr,tstr2;
  
  M4PadString(instr,l,padch,padrightf,tstr2);
  tstr = """";
  tstr = tstr & tstr2;
  tstr = tstr & """";
  tstr = tstr & ",";  
  ExportPadString(tstr,len(tstr)," ",false);
  RETURN;
END;

function Integer CheckIfVeinArray(string vecode,string bankacc,string curncy,
                                  array string avecode,array string avebankacc,array string acurncy,Integer acnt,Boolean checkcurncyf)
BEGIN
  Integer res;
  Integer i;
  Boolean testf
  
  res = -1;
  for (i=0;i<acnt;i=i+1) begin
    testf = true;
    if ((vecode!=avecode[i]) or (bankacc!=avebankacc[i])) then begin
      testf = false;
    end;
    if (checkcurncyf) then begin
      if (curncy!=acurncy[i]) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      res = i;
      goto LCheckIfVeinArray;
    end;
  end;
LCheckIfVeinArray:;  
  CheckIfVeinArray = res;
  RETURN;
END;

procedure AddToVEArray(string vecode,string bankacc,string VISerNr,string curncy,val bankval,Date VITransDate,
                       Array string avecode,Array string avebankacc,Array string avecomment,Array string acurncy,Array val avebankval,
                       Array Date avevidate,
                       var Integer acnt)
BEGIN
  avecode[acnt] = vecode;
  avebankacc[acnt] = bankacc;
  avecomment[acnt] = VISerNr;
  acurncy[acnt] = curncy;
  avebankval[acnt] = bankval;
  avevidate[acnt] = VITransDate;
  acnt = acnt + 1;
  RETURN;
END;

procedure BankExpING_inBase1(record OPVc OPr)
BEGIN
  row OPVc OPrw;
  record VIVc VIr;
  record CUVc VEr;
  record CYBlock CompYear;
  record BaseCurBlock basecur;
  Integer i,rwcnt,acnt,ai;
  string 255 tstr;
  Array string 20 avecode;
  Array string 20 acurncycode;
  Array string 100 avebankacc;
  Array string 200 avecomment;
  Array Date avevidate;
  Array val avebankval;
  string 100 ourbankacc;
  Date bd;

  BlockLoad(basecur);
  BlockLoad(CompYear);
  ourbankacc = OPr.BankAcc;
  if (blank(ourbankacc)) then begin ourbankacc = CompYear.Bank1; end;
  rwcnt = MatRowCnt(OPr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.BankCurncy==basecur.BaseCur1) or (blank(OPrw.BankCurncy)) then begin
      VIr.SerNr = OPrw.VISerNr;
      if (ReadFirstMain(VIr,1,true)) then begin end;                        
      ai = CheckIfVEinArray(OPrw.VECode,OPrw.BankAcc,"",avecode,avebankacc,acurncycode,acnt,false);
      if (ai>-1) then begin
        avebankval[ai] = avebankval[ai] + OPrw.BankVal;
        avecomment[ai] = avecomment[ai] & "," & VIr.InvoiceNr;
        avevidate[ai] = bd;
      end else begin
        AddToVEArray(OPrw.VECode,OPrw.BankAcc,VIr.InvoiceNr,"",OPrw.BankVal,VIr.TransDate,avecode,avebankacc,avecomment,acurncycode,avebankval,avevidate,acnt);
      end;
    end;
  end;
  for (i=0;i<acnt;i=i+1) begin
      ExportPadString("110",3," ",false);
      ExportPadString(",",1," ",false);
      ExportPadString(DateToString(OPr.PayDate,"YYYYMMDD"),8," ",false);
      ExportPadString(",",1," ",false);
      FinnishBankVal(tstr,avebankval[i]);
      ExportPadString(tstr,15,"0",true);
      ExportPadString(",",1," ",false);
      ExportPadString(Left(ourbankacc,8),8,"0",true);
      ExportPadString(",",1," ",false);
      ExportPadString("",8,"0",true);
      ExportPadString(",",1," ",false);
      ExportStringInQuotes(Left(ourbankacc,19),19," ",false);
      ExportStringInQuotes(Left(avebankacc[i],34),len(avebankacc[i])," ",false);
      
      ExportPadString("""",1," ",false);
      ExportPadString(CompYear.CompName,35," ",false);
      ExportPadString("|",1," ",false);
      ExportPadString(CompYear.Addr0,35," ",false);
      ExportPadString("|",1," ",false);
      ExportPadString(CompYear.Addr1,35," ",false);
      ExportPadString("|",1," ",false);
      ExportPadString(CompYear.Addr2,35," ",false);      
      ExportPadString("""",1," ",false);
      ExportPadString(",",1," ",false);

      VEr.Code = avecode[i];
      if (ReadFirstMain(VEr,1,true)) then begin end;
      ExportPadString("""",1," ",false);
      ExportPadString(VEr.Name,35," ",false);
      ExportPadString("|",1," ",false);
      ExportPadString(VEr.InvAddr0,35," ",false);
      ExportPadString("|",1," ",false);
      ExportPadString(VEr.InvAddr1,35," ",false);
      ExportPadString("|",1," ",false);
      ExportPadString(VEr.InvAddr2,35," ",false);      
      ExportPadString("""",1," ",false);
      ExportPadString(",",1," ",false);
      ExportPadString("",0,"0",true);
      ExportPadString(",",1," ",false);
      ExportPadString(Left(avebankacc[i],8),8,"0",true);
      ExportPadString(",",1," ",false);
      ExportPadString("""",1," ",false);
      tstr = Left(avecomment[i],35);
      ExportPadString(tstr,len(tstr)," ",false);
      ExportPadString("|",1," ",false);
      tstr = Mid(avecomment[i],35,35);
      ExportPadString(tstr,len(tstr)," ",false);
      ExportPadString("|",1," ",false);
      tstr = Mid(avecomment[i],70,35);
      ExportPadString(tstr,len(tstr)," ",false);
      ExportPadString("|",1," ",false);
      if (nonblankdate(avevidate[i])) then begin
        tstr = DateToString(avevidate[i],"YYMMDD");
      end else begin
        tstr = Mid(avecomment[i],105,35);
      end;
      ExportPadString(tstr,len(tstr)," ",false);      
      ExportPadString("""",1," ",false);
      ExportPadString(",",1," ",false);
      ExportPadString("""",1," ",false);
      ExportPadString("""",1," ",false);
//      ExportPadString(",",1," ",false);
      NewLine;
  end;
  RETURN;
END;

global
procedure BankExpING(record OPVc OPr,record RcVc RepSpec)
begin
//no foreign payments
  BankExpING_inBase1(OPr);
  return;
end;
