external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure OutRegisterTag(string);
external function val FindCostPriceBackDated(string,string,string,val,Date,Boolean);
external function val GetStockQty(string,string,Date,Boolean);

procedure FindRecepyQty(string rec,string item,var val qp)
BEGIN
  record RecVc Recr;
  row RecVc Recrw;
  Integer i,rwcnt;

  qp = 0;
//  M4FromStr(Recr.Code,M4Code,20,rec);
  Recr.Code = FirstInRange(rec,20);
  if ReadFirstMain(Recr,1,true) then begin
    rwcnt = MatRowCnt(Recr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Recr,i,Recrw);
      if (item == Recrw.Item) then begin
        qp = Recrw.InQty;
        goto L99;
      end;
    end;
  end;
L99:;
  return;
end;

function 
Boolean FindSum(string FName,longint TrNr,date TrDate,integer rownr,var val tsum,string item)
BEGIN
  record IVVc IVr;
  record PUVc PUr;
  record ProdVc PRr;
  record SHVc SHr;
  record StockTakeVc StockTaker;
  record StockMovVc SMr;
  record RetVc Retr;
  record SDVc SDr;
  row IVVc IVrw;
  row PUVc PUrw;
  row PRodVc PRodrw;
  row StockTakeVc StockTakerw;
  row StockMovVc SMrw;
  row SHVc SHrw;
  row RetVc Retrw;
  row SDVc SDrw;
  integer i,rwcnt;
  val t,v,qty;

  if (FName == "IVVc") then begin
    IVr.InvDate = TrDate;
    IVr.SerNr = TrNr;
    if ReadFirstKey("InvDate",IVr,2,true) then begin
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
       MatRowGet(IVr,i,IVrw);
       if (IVrw.ArtCode==item) then begin
         tsum = tsum - IVrw.FIFO * IVrw.Quant;
        end;
      end;
    end;
  end;
  if (FName == "PUVc") then begin
    PUr.TransDate = TrDate;
    PUr.SerNr = TrNr;
    if ReadFirstKey("TransDate",PUr,2,true) then begin
      MatRowGet(PUr,rownr,PUrw);
      if PUrw.ArtCode == item then begin
        tsum = tsum + PUrw.Quant*PUrw.CostPrice;
      end;   
    end;
  end;
  if (FName == "StockMovVc") then begin
    SMr.SerNr = TrNr;
    if ReadFirstMain(SMr,1,true) then begin
      rwcnt = MatRowCnt(SMr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SMr,i,SMrw);
        if SMrw.ArtCode == item then begin
            tsum = tsum + SMrw.NewPrice * SMrw.Quant;
        end;
      end;
    end;
  end;            
  if (FName == "-1") then begin
    SMr.SerNr = TrNr;
    if ReadFirstMain(SMr,1,true) then begin
      rwcnt = MatRowCnt(SMr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SMr,i,SMrw);
        if SMrw.ArtCode == item then begin
            tsum = tsum - SMrw.OldPrice * SMrw.Quant;
        end;
      end;
    end;
  end;  
  if FName == "RetVc" then begin
      Retr.SerNr = TrNr;
      if ReadFirstMain(Retr,1,true) then begin
         rwcnt = MatRowCnt(Retr);
         for (i=0;i<rwcnt;i=i+1) begin
           MatRowGet(Retr,i,Retrw);
            if (Retrw.ArtCode==item) then begin
              tsum = tsum + Retrw.Quant + Retrw.CostPrice;
            end;
         end;
      end;  
  end;
  if FName == "SHVc" then begin
    SHr.SerNr = TrNr;
    if ReadFirstMain(SHr,1,true) then begin
       rwcnt = MatRowCnt(SHr);
       i = rownr;
       MatRowGet(SHr,i,SHrw);
       if SHrw.ArtCode == item then begin
        tsum = tsum - SHrw.Ship * SHrw.FIFO;
       end else begin
         // this is a component in the recepy!!
         FindRecepyQty(SHrw.Recepy,item,qty);
         tsum = tsum - SHrw.Ship * qty;
       end;
    end;      
  end;
  if FName == "SDVc" then begin
    SDr.SerNr = TrNr;
    if ReadFirstMain(SDr,1,true) then begin
      rwcnt = MatRowCnt(SDr);
      i = rownr;
      MatRowGet(SDr,i,SDrw);
      if SDrw.ArtCode == item then begin
        tsum = tsum - SDrw.Qty * SDrw.FIFO;
        // this is a component in the recepy!!
      end else begin
          FindRecepyQty(SDrw.Recepy,item,qty);
          tsum = tsum - SHrw.Ship * qty;               
      end;
    end;
  end;      
  if (FName == "ProdVc") or (FName == "FutProdVc") then begin
    PRr.SerNr = TrNr;
    if ReadFirstMain(PRr,1,true) then begin
      rwcnt = MatRowCnt(PRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PRr,i,Prodrw);
            if (Prodrw.Item==item) then begin
               if (Prodrw.OutQty==0) then begin
                   t = 0 - Prodrw.InQty;
                 end else begin
                   t = Prodrw.OutQty;
                 end;       
					       switch (PRr.RowsHoldActualQty) begin
					         case 1:
					         otherwise t = PRr.Qty * t;
					       end;
                 v = Prodrw.ItemCost;
                 v = v + Prodrw.ExtraCost;
                 tsum = tsum + v*t;
            end;
        end;
    end;
  end;                 
  return;
END; 
  
procedure CreatePU(integer TrackSer, string location, date dbal, var longint nr, integer method, integer invers, integer OKey, integer NegV,date recdate,string group)
BEGIN
  record INVc INr;
  record PUVc PUr;
  record PUVc PUSerr;
  record SerBalVc SerBalr;
  record ItemHistVc IHr;
  row  PUVc PUrw;
  row  PUVc PUSerw;
  boolean TrHs,TrHs2,TrHs3,test2,test,found,found1,test1;
  val instock,xQty,NegSum,TotSum,tt;
  integer i,rwcnt,k,rwcnt1;
  longint recnr;
  string 100 ts,ckey;
  integer keys;  
  boolean x;
  
  rwcnt = 200;
  i = 0;
  TrHs = true;  
  if blank(group) then begin
    ckey = "DICode";
    keys = 1;
    INr.Code = "";
  end else begin
    ckey = "Group";
    keys = 1;
    INr.Group = group;
  end;
  while (LoopKey(ckey,INr,keys,TrHs))   begin
  instock = 0;
  if i>rwcnt then begin 
    if OKey == 1 then begin
      PUr.OKFlag = 1;
    end;  
    ExportRecord(PUr);
    NewLine;
    nr = nr + 1;
    i = 0;
  end;  
  if i == 0 then begin
    RecordNew(PUr);
    PUr.SerNr   = nr;
    PUr.RegDate = recdate;
    PUr.TransDate = recdate;
    PUr.Comment = "Stock Balance, location " & location;
    PUr.Location = location;
  end;
  if (ckey == "Group") then begin
    if (group<>INr.Group) then begin
      TrHs = false;
    end;
  end;
  if (INr.ItemType == 1)  then begin  
    instock = GetStockQty(INr.Code,location,dbal,false);
    if instock <> 0 then begin
      if (INr.SerNrf > 0) and (TrackSer == 1) then begin
        ResetLoop(SerBalr);
        SerBalr.Item = INr.Code;
        SerBalr.Location = location;
        TrHs2 = true;
        while (LoopMain(SerBalr,2,TrHs2)) begin
          test = true;
          if  SerBalr.Item <> INr.Code then begin 
            test = false;
            TrHs2 = false;
          end;
          if (SerBalr.Location <> location) then begin 
            test = false;
            TrHs2 = false;
          end; 
          if test then begin
            xQty = SerBalr.Quant;
            if (xQty <> 0)  then begin
              PUrw.ArtCode     = SerBalr.Item; 
              PUrw.Spec        = INr.Name;
              PUrw.SerialNr = SerBalr.Serial;
        
              if invers == 1 then begin
                PUrw.Quant = 0 - xQty;
              end else begin
                PUrw.Quant = xQty;
              end;      
           // - Batch item price ---------------------
              IHr.ArtCode = SerBalr.Item;
              IHr.SerialNr = SerBalr.Serial;
              TrHs3 = true;
              ResetLoop(IHr);
              while (LoopKey("ArtCodeSerialNr",IHr,2,TrHs3)) begin
                test2 = true;
                if IHr.ArtCode <>INr.Code then begin 
                  TrHs3 = false; 
                  test2 = false; 
                end;
                if IHr.SerialNr <> SerBalr.Serial then begin 
                  TrHs3 = false; 
                  test2 = false; 
                end;
                if IHr.FileName <> "PUVc" then begin test2 = false; end;    
                if (IHr.Invalid!=0) then begin test2 = false; end;
                if test2 then begin
                  PUSerr.SerNr = IHr.TransNr;
                  PUSerr.TransDate = IHr.TransDate;
                  found = true;
                  ResetLoop(PUSerr);
                  if (ReadFirstKey("TransDate",PUSerr,2,found)) then begin
                    rwcnt1 = MatRowCnt(PUSerr);
                    for (k=0;k<rwcnt1;k=k+1) begin
                      MatRowGet(PUSerr,k,PUSerw);
                      if (PUSerw.ArtCode == PUrw.ArtCode) and (PUSerw.SerialNr == PUrw.SerialNr) then begin
                        PUrw.UPrice      = PUSerw.UPrice; 
                        PUrw.CostPrice   = PUSerw.CostPrice;
                        PUrw.BasePrice   = PUSerw.BasePrice;
                        PUrw.BestBefore  = PUSerw.BestBefore;
                        PUrw.Sum        = PUrw.Quant * PUrw.CostPrice;
                        PUr.SumCostPrice = PUr.SumCostPrice + PUrw.Sum;
                        PUr.SumQuant     = PUr.SumQuant + PUrw.Quant;
                        k= rwcnt1;
                      end;   
                    end;
                  end;
                end; 
              end; 
              MatRowPut(PUr,i,PUrw);
              i = i +1; 
              if (i>rwcnt) then begin 
                if (OKey == 1) then begin
                PUr.OKFlag = 1;
              end;
              ExportRecord(PUr);
              NewLine;
              nr = nr + 1;
              i= 0;
            end;  
            if (i == 0) then begin
              RecordNew(PUr);
              PUr.SerNr   = nr;
              PUr.RegDate = dbal;
              PUr.Comment = "Stock Balance, location " & location;
              PUr.Location = location;
            end; 
          end;
        end;                                 
      end; 
          // -----without Ser.Numbers
    end else begin 
      PUrw.ArtCode   = INr.Code;
      if invers == 1 then begin
        PUrw.Quant = 0 - instock;
      end else begin
        PUrw.Quant = instock;
      end;   
      PUrw.Spec      = INr.Name;
      PUrw.UPrice    = INr.InPrice;  //PU Price = CostPrice from Item card
      PUrw.BasePrice = INr.UPrice1; //PU Base Price = BasePrice from Item card          
      PUrw.SerialNr = "";
      if instock > 0   then begin
        if method == 0 then begin
          tt = 0;
          if invers == 1 then begin
            tt = FindCostPriceBackDated(INr.Code,location,"",instock,dbal,false);
            PUrw.Sum = 0 - tt;
          end else begin
            tt = FindCostPriceBackDated(INr.Code,location,"",instock,dbal,false);
            PUrw.Sum = tt;
          end;          
          PUrw.CostPrice = PUrw.Sum/PUrw.Quant;  
          PUrw.CostPrice = Round(PUrw.CostPrice,SetRoundModeD(5));
          PUrw.UPrice = PUrw.CostPrice;
        end;
      end;
      if instock < 0  and (NegV == 1) then begin
        TotSum = 0;
        IHr.ArtCode = INr.Code;
        found1 = true;
        ResetLoop(IHr);
        while LoopKey("ArtCode",IHr,1,found1) begin
          test1 = true;
          if IHr.Location <> location then begin test1 = false; end;
          if IHr.ArtCode <> INr.Code then begin
            test1 = false;
            found1 = false;
          end;
          if IHr.TransDate > dbal then begin 
            test1 = false;
            found1 = false;
          end;  
          if test1 then begin
            NegSum = 0;
            x = FindSum(IHr.FileName,IHr.TransNr,IHr.TransDate,IHr.Row,NegSum,INr.Code);
            TotSum = TotSum + NegSum;
          end;
        end;  
        if invers == 1 then begin
          PUrw.Sum = 0 - TotSum;
        end else begin
          PUrw.Sum = TotSum;  
        end;  
        PUrw.CostPrice = PUrw.Sum/PUrw.Quant;
        PUrw.Sum = Round(PUrw.Sum,DefaultRoundMode);
        PUrw.CostPrice = Round(PUrw.CostPrice,SetRoundModeD(5));
      end;    
      if method == 1 then begin  
        PUrw.CostPrice = INr.UPrice1;
        PUrw.Sum = INr.UPrice1 * PUrw.Quant;
      end;  
      if method == 2 then begin  
        PUrw.CostPrice = INr.InPrice;
        PUrw.Sum = INr.InPrice * PUrw.Quant;
      end;
      PUr.SumCostPrice = PUr.SumCostPrice + PUrw.Sum;
      PUr.SumQuant     = PUr.SumQuant + PUrw.Quant;
      MatRowPut(PUr,i,PUrw);
      i = i +1;
    end;
  end;  
  end;  
  end; 
  if i>0 and i<=rwcnt then begin 
    if OKey == 1 then begin
      PUr.OKFlag = 1;
    end;
    ExportRecord(PUr);
    NewLine;
    nr = nr +1;
  end;  
  return;
END;       

global
procedure StBalEn(record RcVc RepSpec)
BEGIN
  longint doknr;
  boolean TrHs1,foundlocation;
  record LocationVc Locr;
  string 10 frstock,tostock;
  
  doknr = RepSpec.f1; 
//  ExportString("purchase2");
  OutRegisterTag("PUVc");
  NewLine;
  TrHs1 = true;
  frstock = FirstInRange(RepSpec.f2,10);
  tostock = LastInRange(RepSpec.f2,10);
  
  Locr.Code = frstock;
  while (LoopMain(Locr,1,TrHs1)) begin      
    if (nonblank(RepSpec.f2)) then begin
      if (Locr.Code>tostock) then begin
        TrHs1 = false;
      end;
    end;
    if (TrHs1) then begin
      CreatePU(1,Locr.Code,RepSpec.d1,doknr,0,0,0,1,RepSpec.d2,RepSpec.f3); 
      foundlocation = true;
    end;      
  end;
  if (foundlocation==false) then begin
    CreatePU(1,"",RepSpec.d1,doknr,0,0,0,1,RepSpec.d2,RepSpec.f3); 
  end;
/*  
  if nonblank(frstock) then begin
    Locr.Code = frstock;
    while (LoopMain(Locr,1,TrHs1)) begin      
      if (Locr.Code>tostock) then begin
        TrHs1 = false;
      end;
      if (TrHs1) then begin
        CreatePU(1,Locr.Code,RepSpec.d1,doknr,0,0,0,1,RepSpec.d2,RepSpec.f3); 
      end;      
    end;
  end else begin 
    CreatePU(1,"",RepSpec.d1,doknr,0,0,0,1,RepSpec.d2,RepSpec.f3); 
  end;  
*/  
  return;
END;
