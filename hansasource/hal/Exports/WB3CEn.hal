external procedure ExtractObj(string,var Integer,var string);
external procedure WB3CFindVIAmount(LongInt,Date,var val,var val);

procedure PrintHeaderWB3C(record RcVc RepSpec)
BEGIN
  record CYBlock CompYear;
  string 255 tstr;
  
  BlockLoad(CompYear);

  ExportString(CompYear.CompName);
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString("");
  ExportString(USetStr(19050));
  NewLine;
  ExportString(USetStr(19051));
  NewLine;
  ExportString(USetStr(19052));
//  ExportPadString("As at Date : ", len("As at Date : ")+1," ", false);
//  ExportPadString(RepSpec.Period2Str,len(RepSpec.Period2Str)+2," ",false);
  NewLine;
  NewLine;
  ExportString(USetStr(19053));
  ExportString(USetStr(19054));
  ExportString(USetStr(19055));
  ExportString(USetStr(19056));
  ExportString(USetStr(19057));
  ExportString(USetStr(19058));
  ExportString(USetStr(19059));
  ExportString(USetStr(19060));
  ExportString(USetStr(19060));
  ExportString(USetStr(19061));
  ExportString(USetStr(19062));
  ExportString(USetStr(19063));
   NewLine;
  ExportString(USetStr(19065));
  ExportString(USetStr(19066));
  ExportString(USetStr(19067));
  ExportString(USetStr(19068));
  ExportString(USetStr(19069));
   ExportString("");
  ExportString(USetStr(19070));
  ExportString(USetStr(19071));
  ExportString(USetStr(19072));
  ExportString(USetStr(19073));
  ExportString(USetStr(19073));
  ExportString(USetStr(19074));
   NewLine;
   NewLine    
   RETURN;
END;

global
procedure WB3CEn(record RcVc RepSpec)
BEGIN
  record POCQStatVc POCQr;
  record VEVc VEr;
  record CountryVc Countryr;
  Boolean testf, TrHs;
  string 255 ostr;
  Integer i,pos;
  val viv,ipv;
  Date todate;
  
  todate = RepSpec.d1;
  if (blankdate(todate)) then begin
    todate = CurrentDate;
  end;
  PrintHeaderWB3C(RepSpec);
  pos = 0;
  ExtractObj(RepSpec.f1,pos,ostr);
  while (nonblank(ostr)) begin
    i = 0;
    TrHs = true;
    ResetLoop(POCQr);
    POCQr.SerNr = -1;
    POCQr.Object = ostr;
    while (LoopKey("Object",POCQr,2,TrHs)) begin
     testf = true;
     if (TrHs) then begin 
      if nonblank(ostr) then begin
        if (POCQr.Object<>ostr) then begin
            TrHs = false;
            testf = false;
        end;
      end; 
      
      if (nonblank(RepSpec.f2)) then begin
        if (RepSpec.f2<>POCQr.POClass) then begin 
          testf = false;
        end;
      end;
      if (nonblank(RepSpec.f3)) then begin
        if (RepSpec.f3<>POCQr.VECode) then begin
          testf = false;
        end;
      end;
      if (RepSpec.flags[2] == 0) then begin
        if (POCQr.Closed<>0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (i > 0) then begin
          ExportString("");
        end else begin
          ExportString(POCQr.Object);
        end;
        ExportString(POCQr.Comment);
        ExportString(POCQr.POClass);
        ExportLongInt(POCQr.SerNr);                
        VEr.Code = POCQr.VECode;  
        if (ReadFirstMain(VEr,1,true)) then begin
          ExportString(VEr.Name);

          Countryr.Code = VEr.CountryCode;  
          if (ReadFirstMain(Countryr,1,true)) then begin
             ExportString(Countryr.Comment); 
          end;
          if (VEr.CountryCode =="US") then begin
            ExportString(VEr.RegNr2);
          end else begin
           ExportString("");      
          end;
        end; 
        ExportString(POCQr.CurncyCode);
        ExportVal(POCQr.Sum,M4Val);
        WB3CFindVIAmount(POCQr.SerNr,todate,viv,ipv);
        ExportVal(viv,M4Val);
        ExportVal(ipv,M4Val);
        ExportString("");  // expenditure type
        NewLine;   
        i = i + 1;
      end; //end testf    
     end; //TrHs;
    end; //while
    NewLine;
    ExtractObj(RepSpec.f1,pos,ostr);
  end;
  EndJob;
  RETURN;
END;
