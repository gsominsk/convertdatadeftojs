external procedure NewLineExport();
external procedure GetCountry(string,var string);
external procedure DblDigit(var string,Integer);
external procedure FinnishBankDate(var string,Date);
external procedure FinnishBankVal(var string,val);
external procedure FinnishRebDate(val,Date,LongInt,var string);
external procedure FinnishRebVal(val,val,val,var string);
  
function boolean FactFinEInvoiceCustomer(record CUVc CUr)
begin
  boolean res;
  
  res = false;
  res = CUr.eInvStop==0 and CUr.eInvRcvPref!=kEInvoiceRcvPreferenceNone;
  FactFinEInvoiceCustomer = res;
  return;
end;

function boolean FinEInvoiceCustomer(string customer)
begin
  record CUVc CUr;
  boolean res;

  CUr.Code = customer;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = FactFinEInvoiceCustomer(CUr);
  end;
  FinEInvoiceCustomer = res;
  return;
end;  

procedure FinnishCashDiscount(val sum,string paydeal,var string tstr)
begin
  val res;
  record PDVc PDr;

  res = 0;
  if (nonblank(paydeal)) then begin
    PDr.Code = paydeal;
    if (ReadFirstMain(PDr,1,true)) then begin
      if (PDr.pdrdays>0) then begin
        res = sum * PDr.pdvrebt;
      end;
    end;
  end;
  
  tstr = ValToString(res,M40Val,"","",0); //round mathematically
//  tstr = ValToString(res,M41Val,"",".",1); //dont round. discard decimals

  return;
end;

procedure ExpFactCUFin(record RcVc RepSpec,record IVVc IVp,string country,Integer appsernr,Integer bank)
BEGIN
  record CUVc CUr;
  record CYBlock CompYear;
  string 255 tstr,t2;
  record BaseCurBlock BCb;

  BlockLoad(CompYear);  
  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (bank==1) then begin
    ExportPadString("KRFL",4," ",false);
    ExportPadString("1",1,"0",true);
    ExportPadString(RepSpec.f3,6,"0",true);    // Säljarens nr 
    ExportPadString(CUr.Code,6,"0",true);      // Köparens nr 
      ExportPadString("",4," ",false);       // Filler 
      tstr = StripNonDigits(CUr.VATNr);
      ExportPadString(tstr,10," ",false);      // As-signum 
      ExportPadString(CUr.Name,30," ",false);
      ExportPadString("",30," ",false);
      if (FactFinEInvoiceCustomer(CUr)) then begin
        ExportPadString(CUr.InvAddr1,20," ",false);      
        ExportPadString(CUr.InvAddr2,20," ",false);
      end else begin
        ExportPadString(CUr.InvAddr0,20," ",false);      
        ExportPadString(CUr.InvAddr1,20," ",false);
      end;
      ExportPadString(CUr.Phone,13," ",false);   // Telefon 
      ExportPadString(IVp.ClientContact,30," ",false); // Kontakt 
      ExportPadString("",13," ",false);      // Kontaktpers telefon 
      ExportPadString(CUr.Fax,13," ",false);     // Fax 
      tstr = CUr.CurncyCode;
      /*
      if (blank(tstr)) then begin
        tstr = RepSpec.CurncyCode;
      end;
      */  
      if (blank(tstr)) then begin
        tstr = "EUR";
      end;
      ExportPadString("FI",2," ",false);       // Språk 
      ExportPadString(RepSpec.CurncyCode,3," ",false);       // Valutakod 
      tstr = StripNonDigits(IVp.IntCode);
      ExportPadString(tstr,4,"0",true);        // Förseningsränta 
      ExportPadString("",3,"0",true);        // Sektorkod 
      ExportPadString("",6,"0",true);        // Branshkod 
      GetCountry(CUr.CountryCode,country);
      ExportPadString(country,10," ",false);     // Landets namn 
      ExportPadString("",172," ",false);       // Filler 
    end;
    if (bank==kFactoringFormatHandelsbankenFIN) then begin
      ExportPadString("HBR0",4," ",false);
      ExportPadString("1",1,"0",true);
      ExportPadString(RepSpec.f3,6,"0",true);    // Säljarens nr 
      ExportPadString(CUr.Code,6,"0",true);      // Köparens nr 
      ExportPadString("",4," ",false);       // Filler 
      tstr = StripNonDigits(CUr.VATNr);
      ExportPadString(tstr,10," ",false);      // As-signum 
      ExportPadString(CUr.Name,30," ",false);
      ExportPadString("",30," ",false);
      if (FactFinEInvoiceCustomer(CUr)) then begin
        ExportPadString(CUr.InvAddr1,20," ",false);      
        ExportPadString(CUr.InvAddr2,20," ",false);
      end else begin
        ExportPadString(CUr.InvAddr0,20," ",false);      
        ExportPadString(CUr.InvAddr1,20," ",false);
      end;
      ExportPadString(CUr.Phone,13," ",false);   // Telefon 
      ExportPadString(IVp.ClientContact,30," ",false); // Kontakt 
      ExportPadString("",13," ",false);      // Kontaktpers telefon 
      ExportPadString(CUr.Fax,13," ",false);     // Fax 
      tstr = CUr.CurncyCode;
      /*
      if (blank(tstr)) then begin
        tstr = RepSpec.CurncyCode;
      end;
      */  
      if (blank(tstr)) then begin
        tstr = "EUR";
      end;
      ExportPadString("FI",2," ",false);       // Språk 
      ExportPadString(RepSpec.CurncyCode,3," ",false);       // Valutakod 
      tstr = StripNonDigits(IVp.IntCode);
      ExportPadString(tstr,4,"0",true);        // Förseningsränta 
      ExportPadString("",3,"0",true);        // Sektorkod 
      ExportPadString("",6,"0",true);        // Branshkod 
      GetCountry(CUr.CountryCode,country);
      ExportPadString(country,10," ",false);     // Landets namn 
      ExportPadString("",172," ",false);       // Filler 
    end;
    if (bank==4) then begin
    
      ExportPadString("LA01",4," ",true);		// Standard       
      ExportPadString("1",1," ",true);		    // Prefix
      ExportPadString(RepSpec.f3,6,"0",true);  	// Avtalsnummer
      ExportPadString(CUr.Code,10," ",false);   // Köparens nr 
      tstr = StripNonDigits(CUr.VATNr);
      ExportPadString(tstr,10," ",false); //This wont work, should be VAT Reg No
      ExportPadString(CUr.Name,30," ",false);      
      ExportPadString("",30," ",false);       // Filler 
      
      tstr = appsernr;
      if (FactFinEInvoiceCustomer(CUr)) then begin
        ExportPadString(CUr.InvAddr1,20," ",false);      
        ExportPadString(CUr.InvAddr2,20," ",false);
      end else begin
        ExportPadString(CUr.InvAddr0,20," ",false);      
        ExportPadString(CUr.InvAddr1,20," ",false);
      end;
      tstr = StripNonDigits(CUr.Phone);
      ExportPadString(tstr,13,"0",true);      		// Telefon       
      ExportPadString(CUr.Person,30," ",false); 	// Kontakt 
      ExportPadString("",13," ",false);      		// Kontakt telefon
      tstr = StripNonDigits(CUr.Fax);
      ExportPadString(tstr,13," ",false);           // Kontakt fax      
      ExportPadString("FI",2," ",false);            //LangCode
      tstr = CUr.CurncyCode;
      if (blank(tstr)) then begin
        BlockLoad(BCb);
        tstr = BCb.BaseCur1;
      end;
      ExportPadString(tstr,3," ",false);            // currency    
      ExportPadString("",4," ",false);              // Spare
      ExportPadString("",3," ",false);              // Spare
      ExportPadString("",6," ",false);              // Spare
      ExportPadString("001",3," ",false);           // Always 001
      ExportPadString("FI",2," ",false);
      ExportPadString("",177," ",false);            // Spare


/*      
      ExportPadString(tstr,6,"0",true);       // Gireringslistans nummer 
      ExportPadString(CUr.Code,8," ",false);      // Köparens nr 
      tstr = StripNonDigits(CUr.VATNr);
      ExportPadString(tstr,10," ",false);      // As-signum 
      ExportPadString(CUr.Name,25," ",false);
      ExportPadString(CUr.InvAddr0,25," ",false);
      ExportPadString(CUr.Sorting,5," ",false);
      tstr = StripNonDigits(CUr.Phone);
      ExportPadString(tstr,10,"0",true);      // Telefon 
      ExportPadString("999",3,"0",true);       // Pay Deal 
      ExportPadString("",3," ",false);       // Finansbolagets reserv 
      ExportPadString("",2," ",false);       // Krav villkor 
      ExportPadString("1",1,"9",false);       // Språk 
      ExportPadString("1",1,"0",true);       // Kreditinfo ?? 
      ExportPadString("1",1,"0",true);       // Kod för hur länge det är kvar (?) 
      ExportPadString(CUr.CustCat,6," ",false);  // Kund grupp 
      tstr = CUr.CreditLimit;
      t2 = StripNonDigits(tstr);
      ExportPadString(t2,8,"0",true);       // Kredit gräns 
      ExportPadString("",45," ",false);         // Finansbolagets reserv 
*/
    
    /*
      ExportPadString("1",1,"0",true);       // Post ID 
      tstr = appsernr;
      ExportPadString(tstr,6,"0",true);       // Gireringslistans nummer 
      ExportPadString(CUr.Code,8," ",false);      // Köparens nr 
      tstr = StripNonDigits(CUr.VATNr);
      ExportPadString(tstr,10," ",false);      // As-signum 
      ExportPadString(CUr.Name,25," ",false);
      ExportPadString(CUr.InvAddr0,25," ",false);
      ExportPadString(CUr.Sorting,5," ",false);
      tstr = StripNonDigits(CUr.Phone);
      ExportPadString(tstr,10,"0",true);      // Telefon 
      ExportPadString("999",3,"0",true);       // Pay Deal 
      ExportPadString("",3," ",false);       // Finansbolagets reserv 
      ExportPadString("",2," ",false);       // Krav villkor 
      ExportPadString("1",1,"9",false);       // Språk 
      ExportPadString("1",1,"0",true);       // Kreditinfo ?? 
      ExportPadString("1",1,"0",true);       // Kod för hur länge det är kvar (?) 
      ExportPadString(CUr.CustCat,6," ",false);  // Kund grupp 
      tstr = CUr.CreditLimit;
      t2 = StripNonDigits(tstr);
      ExportPadString(t2,8,"0",true);       // Kredit gräns 
      ExportPadString("",45," ",false);         // Finansbolagets reserv 
    */
    end;
    if (bank==25) then begin
      // SAMPO Factoring - Maustetalo Condite
      // Ostajatietue
      ExportPadString("SAFA",4," ",false);
      ExportPadString("1",1,"0",true);
      ExportPadString(RepSpec.f3,6,"0",true);   // myyj‰n nr 
      ExportPadString(CUr.Code,10," ",false);     // ostajan nr 
      //ExportPadString("",4," ",false);          // t‰yttˆ‰ 
      tstr = StripNonDigits(CUr.VATNr);
      ExportPadString(tstr,10,"0",true);       // ostajan y-tunnus 
      ExportPadString(CUr.Name,30," ",false);   // ostajan nimi
      ExportPadString("",30," ",false);         // ostajan nimi 2 (tyhj‰‰)
      if (FactFinEInvoiceCustomer(CUr)) then begin
        ExportPadString(CUr.InvAddr1,20," ",false);      
        ExportPadString(CUr.InvAddr2,20," ",false);
      end else begin
        ExportPadString(CUr.InvAddr0,20," ",false);    //ostajan osoite   
        ExportPadString(CUr.InvAddr1,20," ",false); // ostajan postinro ja postitoimipaikka
      end;
      ExportPadString(CUr.Phone,13," ",false);   // ostajan puhnro
      ExportPadString(IVp.ClientContact,30," ",false); // ostajan yhteyshenkilˆ
      ExportPadString("",13," ",false);          // yhteyshenkilˆn puh. 
      ExportPadString(CUr.Fax,13," ",false);     // Fax 
      tstr = CUr.CurncyCode;
      /*
      if (blank(tstr)) then begin
        tstr = RepSpec.CurncyCode;
      end;
      */  
      if (blank(tstr)) then begin
        tstr = "EUR";
      end;
      ExportPadString("FI",2," ",false);       // kieli 
      ExportPadString(RepSpec.CurncyCode,3," ",false);  // valuuttakoodi (saa olla tyhj‰, oletus EUR)
      tstr = StripNonDigits(IVp.IntCode);
      ExportPadString(tstr,4,"0",true);        // viiv‰styskorko % 
      ExportPadString("",3,"0",true);        // ostajan sektorikoodi
      ExportPadString("",6,"0",true);        // ostajan toimialakoodi
      ExportPadString("",182," ",false);       // varalla (tyhj‰‰)
    end;
    NewLineExport;
  end;
  RETURN;
END;

procedure ExpFactOurFin(record RcVc RepSpec,LongInt appsernr,Integer bank,string passw)
BEGIN
  string 255 tstr;
  record CYBlock CompYear;
  Integer h,m;
  record BaseCurBlock bascur;

  BlockLoad(CompYear);  
  if (bank==1) then begin  
    ExportPadString("KRFL",4," ",false);     // Header 
    ExportPadString("0",1,"0",true);
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17," ",false);    // Försäljarens AS-Signum
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // Händelsedatum
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Händelsedatum
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);      // Klockslag, minut
    ExportPadString(RepSpec.f3,6,"0",true);  // Avtalsnummer
    ExportPadString(RepSpec.CurncyCode,3," ",false);     // Valutakod
    ExportPadString("MR",2," ",false);     // Finansbolagets kod (MR)
    ExportPadString(CompYear.CompName,30," ",false);     // Avsändarens namn
    tstr = appsernr;
    ExportPadString(tstr,6,"0",true);      // Gireringslistans nummer
    ExportPadString("",37," ",false);    // Finansbolagets spec
    ExportPadString("",63," ",false);    // Finansbolagets reserv
    ExportPadString("",221," ",false);   // Tomt utrymme
  end;  
  
  if (bank==kFactoringFormatHandelsbankenFIN) then begin  
    ExportPadString("HBR0",4," ",false);     // Header 
    ExportPadString("0",1,"0",true);
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17," ",false);    // Försäljarens AS-Signum
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // Händelsedatum
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Händelsedatum
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);      // Klockslag, minut
    ExportPadString(RepSpec.f3,6,"0",true);  // Avtalsnummer
    ExportPadString(RepSpec.CurncyCode,3," ",false);     // Valutakod
    ExportPadString("HB",2," ",false);     // Finansbolagets kod (MR)
    ExportPadString(CompYear.CompName,30," ",false);     // Avsändarens namn
    tstr = appsernr;
    ExportPadString("",6," ",true);      // Gireringslistans nummer //empty
    ExportPadString("",100," ",false);    // Finansbolagets spec
    ExportPadString("",221," ",false);   // Tomt utrymme
  end;
   
  if (bank==4) then begin  
    ExportPadString("LA01",4," ",false);     // Header 
    ExportPadString("0",1,"0",true);
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17," ",false);    // Försäljarens AS-Signum
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // Händelsedatum
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Händelsedatum
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);      // Klockslag, minut
    ExportPadString(RepSpec.f3,6,"0",true);  // Avtalsnummer
    ExportPadString(RepSpec.CurncyCode,3," ",false);     // Valutakod
    ExportPadString("OP",2," ",false);     // Finansbolagets kod (MR)
    ExportPadString(CompYear.CompName,30," ",false);     // Avsändarens namn
    tstr = appsernr;
    ExportPadString(tstr,6,"0",true);      // Gireringslistans nummer
    ExportPadString("",97," ",false);    // Finansbolagets reserv
    ExportPadString("",224," ",false);   // Tomt utrymme
  end; 
  if (bank==25) then begin
    // SAMPO Factoring - Maustetalo Condite
    // Er‰tietue
    ExportPadString("SAFA",4," ",false);     // sovellustunnus 
    ExportPadString("0",1,"0",true);         // tietuetunnus
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17,"0",true);    // y-tunnus
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // luontip‰iv‰
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // luontiaika,tunnit
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);      // luontiaika,minuutit
    ExportPadString(RepSpec.f3,6,"0",true);  // sopimusnumero
    ExportPadString(RepSpec.CurncyCode,3," ",false);     // valuuttakoodi
    ExportPadString("PR",2," ",false);     // rahoitusyhtiˆn tunnus (PR)
    ExportPadString(CompYear.CompName,30," ",false);     // siirt‰j‰n nimi
    tstr = appsernr;
    ExportPadString(tstr,6,"0",true);      // siirtoluettelon numero
    ExportPadString("",37," ",false);    // rahoitusyhtiˆ varaukset
    ExportPadString("",63," ",false);    // -""-
    ExportPadString("",221," ",false);   // tyhj‰‰
  end;
/*
  if (bank==4) then begin
    ExportPadString("0",1,"0",true);     // Posttyp
    tstr = appsernr;
    ExportPadString(tstr,6,"0",true);     // Gireringslistans nummer
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);     // Händelsedatum
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);     // Klockslag, timme
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);     // Klockslag, minut
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,12," ",true);     // Försäljarens AS-Signum
    tstr = StripNonDigits(CompYear.Bank1);
    ExportPadString(tstr,14,"0",true);     // Försäljarens AS-Signum
    ExportPadString("",1,"0",false);     // Post kod
    ExportPadString("",66," ",false);    // Finansbolagets reserv
    ExportPadString("KOFA",4," ",false);     // Finansbolagets kod
    ExportPadString(RepSpec.f3,4,"0",true); // Avtalsnummer
    ExportPadString("",4," ",false);    // OP Intern
    ExportPadString("",38," ",false);    // Finansbolagets reserv
  end;
*/
  NewLineExport;
  RETURN;
END;

procedure ExpFactIVFin(record RcVc RepSpec,record IVVc IVp,string country,Integer appsernr,Integer bank)
BEGIN
  row IVVc IVrw;
  string 255 tstr,t2;
  integer rwcnt,i;

  if (bank==1) then begin
    ExportPadString("KRFL",4," ",false);
    ExportPadString("3",1,"0",true);
    ExportPadString(RepSpec.f3,6,"0",true);    // Säljarens nr 
    ExportPadString(IVp.CustCode,6,"0",true);// Köparens nr 
    ExportPadString(tstr,4," ",false);       // Filler 
    ExportPadString(IVp.SerNr,10,"0",true); // Fakturanummer 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6," ",false);       // Faktura datum 
    ExportPadString(RepSpec.CurncyCode,3," ",false);       // Valutakod 
    FinnishBankDate(tstr,IVp.TransDate);
    ExportPadString(tstr,6," ",false);       // Fakturans Transdag 
    tstr = "01";
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin tstr = "02"; end;
    if (IVp.InvType==kInvoiceTypeInterest) then begin tstr = "03"; end;
    ExportPadString(tstr,2," ",false);       // Fakturatyp 
    FinnishBankVal(tstr,IVp.Sum4);
    ExportPadString(tstr,12,"0",true);       // Fakturans summa 
    FinnishBankDate(tstr,IVp.PayDate);
    ExportPadString(tstr,6," ",false);     // Fakturans förfallodag 
    FinnishRebDate(IVp.pdvrebt,IVp.InvDate,IVp.pdrdays,tstr);
    ExportPadString(tstr,6,"0",false);     // Fakturans Kassarabatt dag 1
    FinnishRebDate(IVp.pdvrebt2,IVp.InvDate,IVp.pdrdays2,tstr);
    ExportPadString(tstr,6,"0",false);     // Fakturans Kassarabatt dag 2 
    ExportPadString("",6,"0",false);       // Fakturans Kassarabatt dag 3 
    ExportPadString("",6,"0",false);       // Fakturans Kassarabatt dag 4 
    ExportPadString("",12," ",false);      // Filler 
    FinnishRebVal(IVp.pdvrebt,IVp.Sum1,IVp.Sum4,tstr);
    t2 = StripNonDigits(tstr);
    ExportPadString(t2,12,"0",true);       // Fakturans kassarabattsumma 1 
    FinnishRebVal(IVp.pdvrebt2,IVp.Sum1,IVp.Sum4,tstr);
    t2 = StripNonDigits(tstr);
    ExportPadString(t2,12,"0",true);     // Fakturans kassarabattsumma 2 
    ExportPadString("",12,"0",true);       // Fakturans kassarabattsumma 3 
    ExportPadString("",12,"0",true);       // Fakturans kassarabattsumma 4 
    ExportPadString("",24," ",false);      // Filler 
    if (IVp.pdvrebt!=0) then begin
      tstr = "1";
    end else begin
      tstr = "0";
    end;  
    ExportPadString(tstr,1,"0",true);        // Fakturans rabattkod 1 
    if (IVp.pdvrebt2!=0) then begin
      tstr = "2";
    end;  
    ExportPadString(tstr,1,"0",true);      // Fakturans rabattkod 2 
    ExportPadString("",1,"0",true);        // Fakturans rabattkod 3 
    ExportPadString("",1,"0",true);        // Fakturans rabattkod 4 
    tstr = "";
    ExportPadString("",2," ",false);       // Filler 
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin    
      if (MatRowCnt(IVp)>0) then begin
        MatRowGet(IVp,0,IVrw);
        if (IVrw.stp==3) then begin
          tstr = IVrw.OrdRow;
        end;  
      end;
    end;
    ExportPadString(tstr,10,"0",true);       // Kreditfaktura nummer 
    ExportPadString("",4,"0",true);        // Moms % 
    ExportPadString("",30," ",false);      // Leveransställe 
    ExportPadString("",6,"0",true);       // Köparens nr 
    ExportPadString("",10," ",false);      // As-signum 
    if (FinEInvoiceCustomer(IVp.CustCode)) then begin
      ExportPadString(IVp.Addr2,20," ",false);  // Utdelningsadress 
      ExportPadString(IVp.Addr3,20," ",false);  // Postanstalt 
    end else begin
      ExportPadString(IVp.Addr1,20," ",false);  // Utdelningsadress 
      ExportPadString(IVp.Addr2,20," ",false);  // Postanstalt 
    end;
    ExportPadString(IVp.ClientContact,30," ",false); // Kontakt 
    ExportPadString(IVp.Phone,13," ",false);  // Telefon 
    ExportPadString(IVp.Addr0,30," ",false);  // Beställarens namn 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6,"0",true);        // Leverans datum 
    ExportPadString(country,10," ",false);     // Landets namn 
    ExportPadString("",31," ",false);      // Filler 
  end;
  If (bank==kFactoringFormatHandelsbankenFIN) then begin
    ExportPadString("HBR0",4," ",false);
    ExportPadString("3",1,"0",true);
    ExportPadString(RepSpec.f3,6,"0",true);    // Säljarens nr 
    ExportPadString(IVp.CustCode,6,"0",true);// Köparens nr 
    ExportPadString(tstr,4," ",false);       // Filler 
    ExportPadString(IVp.SerNr,10,"0",true); // Fakturanummer 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6," ",false);       // Faktura datum 
    ExportPadString(RepSpec.CurncyCode,3," ",false);       // Valutakod 
    FinnishBankDate(tstr,IVp.TransDate);
    ExportPadString(tstr,6," ",false);       // Fakturans Transdag 
    tstr = "01";
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin tstr = "02"; end;
    if (IVp.InvType==kInvoiceTypeInterest) then begin tstr = "03"; end;
    ExportPadString(tstr,2," ",false);       // Fakturatyp 
    FinnishBankVal(tstr,IVp.Sum4);
    ExportPadString(tstr,12,"0",true);       // Fakturans summa 
    FinnishBankDate(tstr,IVp.PayDate);
    ExportPadString(tstr,6," ",false);     // Fakturans förfallodag 
    FinnishRebDate(IVp.pdvrebt,IVp.InvDate,IVp.pdrdays,tstr);
    ExportPadString(tstr,6,"0",false);     // Fakturans Kassarabatt dag 1
    FinnishRebDate(IVp.pdvrebt2,IVp.InvDate,IVp.pdrdays2,tstr);
    ExportPadString(tstr,6,"0",false);     // Fakturans Kassarabatt dag 2 
    ExportPadString("",6,"0",false);       // Fakturans Kassarabatt dag 3 
    ExportPadString("",6,"0",false);       // Fakturans Kassarabatt dag 4 
    ExportPadString("",12," ",false);      // Filler 
    FinnishRebVal(IVp.pdvrebt,IVp.Sum1,IVp.Sum4,tstr);
    t2 = StripNonDigits(tstr);
    ExportPadString(t2,12,"0",true);       // Fakturans kassarabattsumma 1 
    FinnishRebVal(IVp.pdvrebt2,IVp.Sum1,IVp.Sum4,tstr);
    t2 = StripNonDigits(tstr);
    ExportPadString(t2,12,"0",true);     // Fakturans kassarabattsumma 2 
    ExportPadString("",12,"0",true);       // Fakturans kassarabattsumma 3 
    ExportPadString("",12,"0",true);       // Fakturans kassarabattsumma 4 
    ExportPadString("",24," ",false);      // Filler 
    if (IVp.pdvrebt!=0) then begin
      tstr = "1";
    end else begin
      tstr = "0";
    end;  
    ExportPadString(tstr,1,"0",true);        // Fakturans rabattkod 1 
    if (IVp.pdvrebt2!=0) then begin
      tstr = "2";
    end;  
    ExportPadString(tstr,1,"0",true);      // Fakturans rabattkod 2 
    ExportPadString("",1,"0",true);        // Fakturans rabattkod 3 
    ExportPadString("",1,"0",true);        // Fakturans rabattkod 4 
    tstr = "";
    ExportPadString("",2," ",false);       // Filler 
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin    
      if (MatRowCnt(IVp)>0) then begin
        MatRowGet(IVp,0,IVrw);
        if (IVrw.stp==3) then begin
          tstr = IVrw.OrdRow;
        end;  
      end;
    end;
    ExportPadString(tstr,10,"0",true);       // Kreditfaktura nummer 
    ExportPadString("",4,"0",true);        // Moms % 
    ExportPadString("",30," ",false);      // Leveransställe 
    ExportPadString("",6,"0",true);       // Köparens nr 
    ExportPadString("",10," ",false);      // As-signum 
    ExportPadString("",20," ",false);      // As-signum 
    ExportPadString("",20," ",false);      // As-signum 
    ExportPadString("",30," ",false);      // As-signum 
    ExportPadString(IVp.Phone,13," ",false);  // Telefon 
    ExportPadString(IVp.Addr0,30," ",false);  // Beställarens namn 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6,"0",true);        // Leverans datum 
    ExportPadString(country,10," ",false);     // Landets namn 
    ExportPadString("",31," ",false);      // Filler 
  end;
  if (bank==4) then begin
    ExportPadString("LA01",4," ",true);
    ExportPadString("3",1,"0",true);
    tstr = appsernr;
    ExportPadString(RepSpec.f3,6,"0",true);      // Avtalsnummer
    ExportPadString(IVp.CustCode,10," ",false);  // Köparens nr 
    ExportPadString(IVp.SerNr,10,"0",true);      // Fakturanummer 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6,"0",true);            // Fakturans datum
    ExportPadString(IVp.CurncyCode,3," ",true);  // Valuta
    ExportPadString(tstr,6,"0",true);            // Fakturans datum 
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      tstr = "02";
    end else begin
      tstr = "01";
    end;  
    ExportPadString(tstr,2,"0",true);       // 01 = Normal Inv and 02 = Credit Inv
    FinnishBankVal(tstr,IVp.Sum4);
    ExportPadString(tstr,12,"0",true);       // Fakturans summa 
    FinnishBankDate(tstr,IVp.PayDate);
    ExportPadString(tstr,6,"0",true);       // Fakturans förfallodag     
    FinnishRebDate(IVp.pdvrebt,IVp.InvDate,IVp.pdrdays,tstr);
    ExportPadString(tstr,6,"0",true);       // Fakturans Kassarabatt dag 1
    ExportPadString("",6,"0",true);       // Fakturans Kassarabatt dag 2
    ExportPadString("",6,"0",true);       // Fakturans Kassarabatt dag 3
    ExportPadString("",6," ",true);      // Spare
    ExportPadString("",6," ",true);      // Spare
    ExportPadString("",6," ",true);      // Spare
    FinnishCashDiscount(IVp.Sum4,IVp.PayDeal,tstr);
    ExportPadString(tstr,12,"0",true);      // Cash discount
    ExportPadString("",12,"0",true);      // Cash discount
    ExportPadString("",12,"0",true);      // Cash discount
    ExportPadString("",12," ",true);      // Spare
    ExportPadString("",12," ",true);      // Spare
    ExportPadString("",12," ",true);      // Spare
    ExportPadString("",1," ",true);      // Spare
    ExportPadString("",1," ",true);      // Spare
    ExportPadString("",1," ",true);      // Spare    
    ExportPadString("",1," ",true);      // Spare
    ExportPadString("",1," ",true);     // Spare
    ExportPadString("",1," ",true);     // Spare    
    tstr = "";
    if(IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      rwcnt = MatRowCnt(IVp);
      for(i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if(IVrw.stp == 3) then begin
          tstr = IVrw.Spec;
        end;
      end;
    end;
    if (IVp.CredInv>0) then begin
      ExportPadString(IVp.CredInv,10,"0",true);    // Credit of invoice    
    end else begin
      ExportPadString("",10," ",true);    // Credit of invoice    
    end;
    ExportPadString("",4," ",true);      // Spare
    ExportPadString("",30," ",true);      // Spare
    ExportPadString("",6," ",true);      // Spare    
    ExportPadString("",10," ",true);      // Spare
    ExportPadString("",20," ",true);      // Spare
    ExportPadString("",20," ",true);      // Spare            
    ExportPadString("",30," ",true);      // Spare
    ExportPadString("",13," ",true);      // Spare
    ExportPadString("",30," ",true);      // Spare    
    ExportPadString("",6," ",true);          // Spare
    ExportPadString("001",3," ",true);      // SellerID
    ExportPadString("",38," ",true);      // Spare
    
/*
            
    ExportPadString("",1," ",false);       // Finansbolagets reserv 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6,"0",true);       // Faktura datum 
    ExportPadString("999",3,"0",true);       // Pay Deal 
    FinnishBankDate(tstr,IVp.PayDate);
    ExportPadString(tstr,6,"0",true);       // Fakturans förfallodag 
    FinnishRebDate(IVp.pdvrebt,IVp.InvDate,IVp.pdrdays,tstr);
    ExportPadString(tstr,6,"0",true);       // Fakturans Kassarabatt dag 1
    tstr = IVp.pdvrebt;
    if (nonblank(tstr)) then begin
      t2 = StripNonDigits(tstr);
      ExportPadString(t2,4,"0",true);        // Fakturans Kassarabatt % 1
    end else begin
      ExportPadString("",4,"0",true);     // Fakturans Kassarabatt % 1
    end;
    ExportPadString("",6,"0",true);       // Fakturans Kassarabatt dag 2
    ExportPadString("",4,"0",true);       // Fakturans Kassarabatt % 2
    if (IVp.InclVAT>0) then begin
      tstr = "01";
    end else begin
      tstr = "02";
    end;  
    ExportPadString(tstr,2,"0",true);       // 01 = Inc VAT and 02 = Ex VAT 
    tstr = StripNonDigits(IVp.CalcFinRef);
    ExportPadString(tstr,20,"0",true); // Reference Nummer, måste det sparas i databasen 
    FinnishBankVal(tstr,IVp.Sum4);
    ExportPadString(tstr,11,"0",true);       // Fakturans summa 
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      tstr = "02";
    end else begin
      tstr = "01";
    end;  
    ExportPadString(tstr,2,"0",true);       // 01 = Normal Inv and 02 = Credit Inv 
    ExportPadString("",8," ",false);       // Finansbolagets reserv 
    ExportPadString(IVp.CustCode,8," ",true);    // Köparens nr 
    ExportPadString(IVp.OurContact,20," ",true); // Referens 
    ExportPadString("",40," ",false);       // Finansbolagets reserv 
  */
  end;
  if (bank==25) then begin
    // SAMPO Factoring - Maustetalo Condite
    ExportPadString("SAFA",4," ",false);
    ExportPadString("3",1,"0",true);
    ExportPadString(RepSpec.f3,6,"0",true);    // sopimusnumero 
    ExportPadString(IVp.CustCode,10," ",false);// ostajanumero 
    //ExportPadString(" ",4," ",false);       // t‰yttˆ edelliseen
    ExportPadString(IVp.SerNr,10,"0",true); // laskunro 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6,"0",true);       // laskupvm 
    ExportPadString(RepSpec.CurncyCode,3," ",false);       // valuuttakoodi
    FinnishBankDate(tstr,IVp.TransDate);
    ExportPadString(tstr,6,"0",true);       // laskun arvop‰iv‰
    tstr = "01";  //veloituslasku
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin tstr = "02"; end;  // hyvityslasku
    if (IVp.InvType==kInvoiceTypeInterest) then begin tstr = "03"; end;  // korkolasku
    ExportPadString(tstr,2,"0",true);       // laskutyyppi 
    FinnishBankVal(tstr,IVp.Sum4);
    ExportPadString(tstr,12,"0",true);       // loppusumma
    FinnishBankDate(tstr,IVp.PayDate);
    ExportPadString(tstr,6,"0",true);       // er‰p‰iv‰ 
    FinnishRebDate(IVp.pdvrebt,IVp.InvDate,IVp.pdrdays,tstr);
    ExportPadString(tstr,6,"0",true);       // kassa-alennusp‰iv‰ 1
    ExportPadString("",6,"0",true);        // -""-               2 
    ExportPadString("",6,"0",true);        // -""-               3 
    ExportPadString("",6,"0",true);        // -""-               4 
    ExportPadString("",12,"0",true);       // -""-               5&6
    FinnishRebVal(IVp.pdvrebt,IVp.Sum1,IVp.Sum4,tstr);
    t2 = StripNonDigits(tstr);
    ExportPadString(t2,12,"0",true);       // kassa-alennuksen summa 1 
    ExportPadString("",12,"0",true);       // -""-                   2 
    ExportPadString("",12,"0",true);       // -""-                   3 
    ExportPadString("",12,"0",true);       // -""-                   4 
    ExportPadString("",24,"0",true);      // -""-                   5&6
    if (IVp.pdvrebt!=0) then begin
      tstr = "1";
    end else begin
      tstr = "0";
    end;  
    ExportPadString(tstr,1,"0",true);      // kassa-alennuskoodi 1 
    ExportPadString("",1,"0",true);        // kassa-alennuskoodi 2 
    ExportPadString("",1,"0",true);        // kassa-alennuskoodi 3 
    ExportPadString("",1,"0",true);        // kassa-alennuskoodi 4 
    tstr = "";
    ExportPadString("",2,"0",true);       // kassa-alennuskoodi 5&6 
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin    
      if (MatRowCnt(IVp)>0) then begin
        MatRowGet(IVp,0,IVrw);
        if (IVrw.stp==3) then begin
          tstr = IVrw.OrdRow;
        end;  
      end;
    end;
    ExportPadString(tstr,10,"0",true);       // hyvitett‰v‰n laskun nro 
    ExportPadString("",4,"0",true);        // alv % 
    ExportPadString("",30," ",false);      // toimituspaikka 
    ExportPadString("",6,"0",true);       // ostajan nro 
    ExportPadString("",10,"0",true);      // y-tunnus 
    if (FinEInvoiceCustomer(IVp.CustCode)) then begin
      ExportPadString(IVp.Addr2,20," ",false);  // jakeluosoite
      ExportPadString(IVp.Addr3,20," ",false);  // postitoimipaikka (sis. postinro)
    end else begin
      ExportPadString(IVp.Addr1,20," ",false);  // jakeluosoite
      ExportPadString(IVp.Addr2,20," ",false);  // postitoimipaikka (sis. postinro) 
    end;
    ExportPadString(IVp.ClientContact,30," ",false); // yhteyshenkilˆ 
    ExportPadString(IVp.Phone,13," ",false);  // puhelin
    ExportPadString(IVp.Addr0,30," ",false);  // tilaajan nimi 
    FinnishBankDate(tstr,IVp.InvDate);
    ExportPadString(tstr,6,"0",true);        // toimituspvm 
    ExportPadString("",41," ",false);      // Filler 
  end;
  NewLineExport;
  RETURN;
END;

procedure ExpFactTotFin(record RcVc RepSpec,val ivsump,Integer ivcnt,val krsump,Integer krcnt,val intsump,Integer intcnt,Integer appsernr,Integer bank)
BEGIN
  record CYBlock CompYear;
  string 255 tstr;
  Integer antal;
  
  antal = ivcnt + krcnt + intcnt;
  BlockLoad(CompYear);  
  if (bank==1) then begin
    ExportPadString("KRFL",4," ",false);     // Header 
    ExportPadString("9",1,"0",true);
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17," ",false);    // Försäljarens AS-Signum 
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // Händelsedatum 
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Klockslag, timme 
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Klockslag, minut 
    tstr = antal;
    ExportPadString(tstr,6,"0",true);    // Antal fakturor 
    tstr = ivcnt;
    ExportPadString(tstr,6,"0",true);    // Antal normala fakturor 
    FinnishBankVal(tstr,ivsump);
    ExportPadString(tstr,13,"0",true);     // Summa normala fakturor 
    tstr = krcnt;
    ExportPadString(tstr,6,"0",true);    // Antal kredit fakturor 
    FinnishBankVal(tstr,krsump);
    ExportPadString(tstr,13,"0",true);     // Summa kredit fakturor 
    tstr = intcnt;
    ExportPadString(tstr,6,"0",true);    // Antal ränte fakturor 
    FinnishBankVal(tstr,intsump);
    ExportPadString(tstr,13,"0",true);     // Summa ränte fakturor 
    ExportPadString("",6,"0",true);    // Antal kredit-ränte fakturor 
    ExportPadString("",13,"0",true);     // Summa kredit-ränte fakturor 
    ExportPadString("",13," ",false);    // Finansieringsbolags specific var(edi) 
    ExportPadString("",250," ",false);   // Tomt utrymme 
    ExportPadString("",23," ",false);   // Tomt utrymme 
  end;  
  if (bank==kFactoringFormatHandelsbankenFIN) then begin
    ExportPadString("HBR0",4," ",false);     // Header 
    ExportPadString("9",1,"0",true);
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17," ",false);    // Försäljarens AS-Signum 
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // Händelsedatum 
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Klockslag, timme 
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Klockslag, minut 
    tstr = antal;
    ExportPadString(tstr,6,"0",true);    // Antal fakturor 
    tstr = ivcnt;
    ExportPadString(tstr,6,"0",true);    // Antal normala fakturor 
    FinnishBankVal(tstr,ivsump);
    ExportPadString(tstr,13,"0",true);     // Summa normala fakturor 
    tstr = krcnt;
    ExportPadString(tstr,6,"0",true);    // Antal kredit fakturor 
    FinnishBankVal(tstr,krsump);
    ExportPadString(tstr,13,"0",true);     // Summa kredit fakturor 
    tstr = intcnt;
    ExportPadString(tstr,6,"0",true);    // Antal ränte fakturor 
    FinnishBankVal(tstr,intsump);
    ExportPadString(tstr,13,"0",true);     // Summa ränte fakturor 
    ExportPadString("",6,"0",true);    // Antal kredit-ränte fakturor 
    ExportPadString("",13,"0",true);     // Summa kredit-ränte fakturor 
    ExportPadString("",13," ",false);    // Finansieringsbolags specific var(edi) 
    ExportPadString("",250," ",false);   // Tomt utrymme 
    ExportPadString("",23," ",false);   // Tomt utrymme 
  end;
  if (bank==4) then begin
    //  tstr = appsernr;
    //  ExportPadString(tstr,6,"0",true);     // Gireringslistans nummer 
    ExportPadString("LA01",4," ",true);
    ExportPadString("9",1," ",true);		// Header 
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17," ",false);    // Försäljarens AS-Signum
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // Händelsedatum
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // Händelsedatum
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);      // Klockslag, minut
    tstr = antal;
    ExportPadString(tstr,6,"0",true);     // Antal fakturor 
    tstr = ivcnt;
    ExportPadString(tstr,6,"0",true);     // Antal normala fakturor     
    FinnishBankVal(tstr,ivsump);
    ExportPadString(tstr,13,"0",true);     // Summa normala fakturor 
    tstr = krcnt;
    ExportPadString(tstr,6,"0",true);    // Antal kredit fakturor 
    FinnishBankVal(tstr,krsump);
    ExportPadString(tstr,13,"0",true);     // Summa kredit fakturor 
    //tstr = krcnt;
    ExportPadString("0",6,"0",true);    // Antal ränte fakturor 
    //FinnishBankVal(tstr,krsump);
    ExportPadString("0",13,"0",true);     // Summa ränte fakturor
    //tstr = krcnt;
    ExportPadString("0",6,"0",true);    // Antal kredit fakkturor för ränte fakturor  
    //FinnishBankVal(tstr,krsump);
    ExportPadString("0",13,"0",true);     // Summa kredit fakturor för ränte fakturor
    ExportPadString("",186," ",false);   // Tomt utrymme 
    ExportPadString("",100," ",false);   // Tomt utrymme 
  end;
  if (bank==25) then begin
    // SAMPO Factoring - Maustetalo Condite
    ExportPadString("SAFA",4," ",false);     // Header 
    ExportPadString("9",1,"0",true);
    tstr = StripNonDigits(CompYear.OrgNr);
    ExportPadString(tstr,17," ",false);    // myyj‰n y-tunnus
    FinnishBankDate(tstr,CurrentDate);
    ExportPadString(tstr,6,"0",true);    // luontipvm
    DblDigit(tstr,GetHour(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // luontiaika, tunnit 
    DblDigit(tstr,GetMinute(CurrentTime));
    ExportPadString(tstr,2,"0",true);    // luontiaika, minuutit 
    tstr = antal;
    ExportPadString(tstr,6,"0",true);    // laskujen lkm 
    tstr = ivcnt;
    ExportPadString(tstr,6,"0",true);    // veloituslaskujen lkm 
    FinnishBankVal(tstr,ivsump);
    ExportPadString(tstr,13,"0",true);     // veloituslaskujen kok.summa
    tstr = krcnt;
    ExportPadString(tstr,6,"0",true);    // hyvityslaskujen lkm 
    FinnishBankVal(tstr,krsump);
    ExportPadString(tstr,13,"0",true);     // hyvityslaskujen kok.summa 
    tstr = intcnt;
    ExportPadString(tstr,6,"0",true);    // korkolaskujen lkm
    FinnishBankVal(tstr,intsump);
    ExportPadString(tstr,13,"0",true);     // korkolaskujen kok.summa 
    ExportPadString("",6,"0",true);    // korko-hyvityslaskujen lkm 
    ExportPadString("",13,"0",true);     // korko-hyvityslaskujen summa 
//    ExportPadString("",286," ",false);    // tyhj //Could not have worked as intended, 255 is maximum.
    ExportPadString("",255," ",false);    // tyhj
  end;
  if (bank!=1) then begin
    NewLineExport;
  end;
  RETURN;
END;

global
procedure ExportInvFactFin(var record RcVc RepSpec,var record FactoringBlock factp)
BEGIN
  record IVVc IVr;
  string 255 fromcust,tocust;
  string 255 curcust,country;
  Boolean testf,TrHs;
  Integer bnr;
  Integer ivcnt,krcnt,intcnt;
  val ivsum,intsum,krsum;
  LongInt appsernr;
  record CUVc CUr;
  Array string 255 ainvsernr;
  Array LongInt ainvnr;
  Array Integer ainvtype;
  Array val ainvsum;
  Integer ai,acnt,lastInvType,curInvType;
  LongInt lastSerNr,lastcnt, cnttot, ltot;
  string 255 tstr, tstr2;
  record CYBlock CYRec;
  val lastivsum, invtot;

  lastcnt = 0;
  BlockLoad(CYRec);
  bnr = 1;
  if (SetExportCodepage("CP437")==false) then begin
    LogText(0,"Failed to set codepage CP437");
  end;
  RepSpec.long1 = FirstInRange(RepSpec.f1,10);
  RepSpec.long2 = LastInRange(RepSpec.f1,10);
  fromcust = FirstInRange(RepSpec.f2,20);
  tocust = LastInRange(RepSpec.f2,20);
  if (blank(factp.User)) then begin 
    goto LExportInvFactFin; 
  end;
  if (blank(RepSpec.CurncyCode)) then begin
    RepSpec.CurncyCode = "EUR";
  end;  
  appsernr = 0;
  if (factp.Bank==1) or (factp.Bank==kFactoringFormatHandelsbankenFIN) then begin 
    appsernr = RepSpec.FirstVer;
  end;  
  if ((factp.Bank==1) or (factp.Bank==4) or (factp.Bank==25) or (factp.Bank==kFactoringFormatHandelsbankenFIN)) then begin// Merita , OP
    ExpFactOurFin(RepSpec,appsernr,factp.Bank,factp.Passw);
    if (factp.Bank==4) then begin 
      appsernr = appsernr +1; 
    end;
    ivcnt = 0;
    krcnt = 0;
    intcnt = 0;
    IVr.SerNr = RepSpec.long1;
    IVr.InvDate = RepSpec.sStartDate;
    TrHs = true;
    while (LoopKey("InvDate",IVr,2,TrHs)) begin
      if (IVr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;
        if (nonblank(RepSpec.f1)) then begin
          if (IVr.SerNr>RepSpec.long2) then begin testf = false; end;
        end;  
        if (nonblank(RepSpec.f1)) then begin
          if (IVr.SerNr<RepSpec.long1) then begin testf = false; end;
        end;  
        if (nonblank(RepSpec.f2)) then begin
          if ((IVr.CustCode<fromcust) or (IVr.CustCode>tocust)) then begin testf = false; end;
        end;  
        if (nonblank(RepSpec.ObjStr)) then begin
          if (SetInSet(RepSpec.ObjStr,IVr.Objects)==false) then begin testf = false; end;
        end;  
        if (IVr.OKFlag==0) then begin testf = false; end;
        if (IVr.Invalid!=0) then begin testf = false; end;
        if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
        if (nonblank(IVr.CurncyCode)) then begin
          if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin testf = false; end;
        end else begin
          if (RepSpec.CurncyCode!="EUR") then begin testf = false; end;
        end;
        if (testf) then begin          
          CUr.Code = IVr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin end;
          if (CUr.NoFactoringFlag!=0) then begin //goto LExportInvFactFin2; 
            testf = false; 
            if (lastInvType!=0) then begin
              ainvsernr[acnt-1] = ainvsernr[acnt-1] & ":";
              ainvsernr[acnt-1] = ainvsernr[acnt-1] & lastSerNr;
              ainvsum[acnt-1] = lastivsum;
              ainvnr[acnt-1] = lastcnt;

              ainvsernr[acnt] = -1;
              ainvtype[acnt] = -1;
              ainvnr[acnt] = 0;
              ainvsum[acnt] = blankval;
              acnt = acnt + 1;
              lastcnt = 0;
              lastivsum = blankval;
              lastInvType = -1;
            end;            
          end;
        end;
        if (testf) then begin          
          ExpFactCUFin(RepSpec,IVr,country,appsernr,factp.Bank);
          if (factp.Bank==4) then begin
            appsernr = appsernr +1;
          end;
          ExpFactIVFin(RepSpec,IVr,country,appsernr,factp.Bank);
          if (factp.Bank==4) then begin
            appsernr = appsernr +1;
          end;  
          if ((IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVr.InvType!=kInvoiceTypeInterest)) then begin
            ivsum = ivsum + IVr.Sum4;
            ivcnt = ivcnt + 1;
          end;
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            krsum = krsum + IVr.Sum4;
            krcnt = krcnt + 1;
          end;
          if (IVr.InvType==kInvoiceTypeInterest) then begin
            intsum = intsum + IVr.Sum4;
            intcnt = intcnt + 1;
          end;
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            curInvType = 3;
          end else begin
            curInvType = 1;
          end;
          UserTrace(IVr.SerNr,M4Long);
          if (lastInvType==0) then begin
            ainvsernr[acnt] = IVr.SerNr;
            ainvtype[acnt] = curInvType;
            acnt = acnt + 1;
          end else begin
            if ((lastInvType!=curInvType) or ((IVr.SerNr-lastSerNr)>1)) then begin   // elar 050817
              ainvsernr[acnt-1] = ainvsernr[acnt-1] & ":";
              ainvsernr[acnt-1] = ainvsernr[acnt-1] & lastSerNr;
              ainvsum[acnt-1] = lastivsum;
              ainvnr[acnt-1] = lastcnt;

              ainvsernr[acnt] = IVr.SerNr;
              ainvtype[acnt] = curInvType;
              ainvnr[acnt] = 1;
              ainvsum[acnt] = IVr.Sum4;
              acnt = acnt + 1;
              lastcnt = 0;
              lastivsum = blankval;
//              lastSerNr = -1;
            end;
//LExportInvFactFin2:;
          end;
          lastInvType = curInvType;
          lastSerNr = IVr.SerNr;
          lastcnt = lastcnt + 1;
          lastivsum = lastivsum + IVr.Sum4;
        end;
      end;
    end;
    ExpFactTotFin(RepSpec,ivsum,ivcnt,krsum,krcnt,intsum,intcnt,appsernr,factp.Bank);
    factp.LastSerNr = appsernr;
    factp.LastDate = CurrentDate;
  end;
LExportInvFactFin:;

  if (SetExportCodePage("CP1252")== false) then begin end;

  ainvsernr[acnt-1] = ainvsernr[acnt-1] & ":";
  ainvsernr[acnt-1] = ainvsernr[acnt-1] & lastSerNr;
  ainvsum[acnt-1] = lastivsum;
  ainvnr[acnt-1] = lastcnt;
  CloseFile;
  CreateFile(USetStr(16060));
  NewLineExport;
  NewLineExport;
  tstr = USetStr(16061);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("",5,chr(9),false);
  tstr = USetStr(16062);
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  tstr = USetStr(16063);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("",5,chr(9),false);
  tstr = USetStr(16064);
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  ExportPadString("",8,chr(9),false);
  tstr = USetStr(16065);
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport; 
  NewLineExport; 
  ExportPadString("",8,chr(9),false);
  tstr = factp.LastSerNr;
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport; 
  NewLineExport; 
  tstr = USetStr(16067);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("",7,chr(9),false);
  tstr = USetStr(16068);
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  NewLineExport;
  tstr = CYRec.CompName;
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("",7,chr(9),false);
  tstr = factp.User;
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  NewLineExport;
  NewLineExport;
  tstr = USetStr(16070);
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  tstr = USetStr(16071);
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  tstr = USetStr(16072);
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  NewLineExport;
  NewLineExport;
  tstr = USetStr(16073);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("",4,chr(9),false);
  tstr = USetStr(16074);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("",3,chr(9),false);
  tstr = USetStr(16075);
  ExportPadString(tstr,len(tstr)," ",false);  
  NewLineExport;
  NewLineExport;
  tstr = USetStr(16076);
  ExportPadString(tstr,len(tstr)," ",false);  
  NewLineExport; 
  lastivsum = blankval; 
  cnttot = 0;
  ltot = 0;
  invtot = blankval;
  for (ai=0;ai<acnt;ai=ai+1) begin
    if (ainvtype[ai]==1) then begin 
      cnttot = cnttot + ainvnr[ai];
      invtot = invtot + ainvsum[ai];
    end;
  end;
  
  
  for (ai=0;ai<acnt;ai=ai+1) begin
    if (ainvtype[ai]==1) then begin 
      ltot = ltot + ainvnr[ai];
      tstr = ainvsernr[ai];
      ExportPadString(tstr,len(tstr)," ",false);
      ExportPadString("",3,chr(9),false);
      tstr = ainvnr[ai];  
if cnttot == ltot then begin
   tstr = cnttot;
   tstr2 = invtot;
end else begin
   tstr = "";
   tstr2 = "";
end;

      ExportPadString(tstr,len(tstr)," ",false);
      ExportPadString("",4,chr(9),false);
      tstr = ainvsum[ai];
      ExportPadString(tstr2,len(tstr2)," ",false);
      NewLineExport;
      lastivsum = lastivsum + ainvsum[ai];
    end;
  end;
  NewLineExport;  
  tstr = USetStr(16077);
  ExportPadString(tstr,len(tstr)," ",false);  
  NewLineExport;
  for (ai=0;ai<acnt;ai=ai+1) begin
    if (ainvtype[ai]==3) then begin 
      tstr = ainvsernr[ai];
      ExportPadString(tstr,len(tstr)," ",false);
      ExportPadString("",3,chr(9),false);
      tstr = ainvnr[ai];
      ExportPadString(tstr,len(tstr)," ",false);
      ExportPadString("",4,chr(9),false);
      tstr = ainvsum[ai];
      ExportPadString(tstr,len(tstr)," ",false);
      NewLineExport;
      lastivsum = lastivsum + ainvsum[ai];
    end;
  end;
  NewLineExport;
  NewLineExport;
  NewLineExport;
  tstr = USetStr(16078);
  ExportPadString(tstr,len(tstr)," ",false);  
  ExportPadString("",7,chr(9),false);
  tstr = ainvsum[ai];
  ExportPadString(tstr,len(tstr)," ",false);
  NewLineExport;
  NewLineExport;
  tstr = USetStr(16079);
  ExportPadString(tstr,len(tstr)," ",false);  
  ExportPadString("",2,chr(9),false);
  tstr = USetStr(16080);
  ExportPadString(tstr,len(tstr)," ",false);  
  NewLineExport;
  NewLineExport;
  tstr = CYRec.Addr1;
  ExportPadString(tstr,len(tstr)," ",false);  
  ExportPadString("",1,chr(9),false);
  tstr = CurrentDate;
  ExportPadString(tstr,len(tstr)," ",false);  
  ExportPadString("",1,chr(9),false);
  tstr = CYRec.CompName;
  ExportPadString(tstr,len(tstr)," ",false);  
  NewLineExport;

  RETURN;
END;