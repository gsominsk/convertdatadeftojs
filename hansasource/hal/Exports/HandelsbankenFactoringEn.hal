/* -----------------------
Handelsbankens factoringformat, enl specifikation frŒn banken dec -05
FšrutsŠtter:
1. Att postnummret lagras pŒ rad 2 pŒ kundkortet samt att det separeras av ett mellanslag. Ex: xxx xx Stockholm
2. Att endast svensk valuta anvŠnds (kan komma att Šndras)
3. Att utlŠndska kunder har markerats som utlŠndska pŒ momszonen pŒ kundkortet
4. Att eventuell referns fylls i i fŠltet VŒr referens

…vrig info
RadlŠngd 193 tecken
Tre typer av transaktioner: 
10 - kšparpost
20 - fakturapost
30 - bunttotal
*/

procedure ExpTransType10(record CUVc CUr,record RcVc RepSpec) //startpost
begin
  string 20 tstr;
   
  ExportPadString("10",2,"0",true);//true= hšgerstŠlld, false=vŠnsterstŠlld
  ExportPadString("FKS",3," ",false);
  ExportPadString(RepSpec.f3,8,"0",true);//kundnr
  ExportPadString(CUr.Code,13," ",false);//kšparnr
  ExportPadString(CUr.RegNr1,11," ",false);
  ExportPadString(CUr.Name,32," ",false);
  ExportPadString(" ",32," ",false);
  ExportPadString(CUr.InvAddr0,32," ",false);
  If (CUr.ExportFlag == 0) then begin 
    tstr = Mid(CUr.InvAddr1,0,3) & Mid(CUr.InvAddr1,4,2); //Fšrsta fem pŒ rad tvŒ, fšrutsŠtter mellanrum mellan postnr
    ExportPadString(tstr,5,"0",false);
    ExportPadString(Mid(CUr.InvAddr1,7,37),32," ",false);//švrigt pŒ rad tvŒ
  ExportPadString("SE",3," ",false);
  end else begin//blankt postnummer om utlŠndsk kund
    ExportPadString("",5,"0",false);
    ExportPadString(CUr.InvAddr1,32," ",false);
  ExportPadString(CUr.CountryCode,3," ",false);
  end;
  ExportPadString(CUr.Phone,16," ",false);
  If (CUr.ExportFlag == 0) then begin 
    ExportPadString("SE",2," ",false);
  end else begin//Engelska om utlŠndsk kund
    ExportPadString("EN",2," ",false);
  end;
  ExportPadString("",2," ",false);
  ExportPadString(chr(13) & chr(10),2,"",false);
  return;
end;

procedure ExpTransType20(record IVVc IVp,record CUVc CUr,record RcVc RepSpec) //fakturapost
begin
  string 255 tstr;
  string 255 FKS;
  string 255 FLI;
  
  FKS = "Denuntiation enl avtal har skett";
  FLI= "…verlŠmning enl avtal har skett";

  ExportPadString("20",2,"0",true);
  ExportPadString("FKS",3," ",false);
  ExportPadString(RepSpec.f3,8,"0",true);//kundnr
  ExportPadString(CUr.Code,13," ",false);//kšparnr
  switch (IVp.InvType) begin
    case kInvoiceTypeCredit: 
      ExportPadString("K",3," ",false);
    case kInvoiceTypeInterest:
      ExportPadString("D",3," ",false);
    case kInvoiceTypeCreditSpecialSales:
      ExportPadString("K",3," ",false);
    otherwise
      ExportPadString("F",3," ",false);
  end;
  ExportPadString(IVp.SerNr,10,"0",true);
  //om den Šr delbetalad. FIX
  ExportPadString("001",3,"0",true);
  ExportPadString("",15," ",false);
  tstr = DateToString(IVp.InvDate,"YYYYMMDD");      
  ExportPadString(tstr,8,"0",true);  
  //valuta. ska vi ha det?
  ExportPadString("SEK",3," ",false);
  tstr = DateToString(CurrentDate,"YYYYMMDD");      
  ExportPadString(tstr,8,"0",true);  
  ExportPadString(IVp.OurContact,20," ",false);  //referens
  ExportPadString("",5," ",false);
  ExportPadString(FKS,32," ",false);//…verlŒtelsetext
  tstr = DateToString(IVp.PayDate,"YYYYMMDD");      
  ExportPadString(tstr,8,"0",true);  
  ExportPadString("",4,"0",true);//inget betalningsvillkor
  ExportPadString("+",1," ",true);
  tstr = StripNonDigits(IVp.Sum4);
  ExportPadString(tstr,18,"0",true);//inga punkter elle komman. fŒr ej vara noll
  ExportPadString("J",1," ",false);
  ExportPadString(IVp.CustOrdNr,18,"0",true);
  ExportPadString("",10," ",false);
  ExportPadString(chr(13) & chr(10),2,"",false);
  return;
end; 


procedure ExpTransType30(val totivsum, integer ivcnt,record RcVc RepSpec) //slutpost
begin
  string 255 tstr;
  string 255 FKS;
  string 255 FLI;
  
 // FLI = "I enlighet med avtalet mellan er och oss angŒende fakturahantering, fŒr vi hŠrmed šverlŠmna angivna fordringar";
  FKS = "Informationstext till fakturamottagaren angŒende šverlŒtelse/šverlŠmnande finns pŒ fakturan enligt villkor i respektive avtal Fakturakredit/FakturaLink";
  
  ExportPadString("30",2,"0",true);
  ExportPadString("FKS",3," ",false);
  ExportPadString(RepSpec.f3,8,"0",true);//kundnr
  ExportPadString("SEK",3," ",false);
  ExportPadString(ivcnt,6,"0",true);
  If (totivsum>0) then begin
    ExportPadString("+",1," ",true);
    tstr = StripNonDigits(totivsum);
    ExportPadString(tstr,18,"0",true);
  end else begin
    ExportPadString("-",1," ",true);
    tstr = StripNonDigits(totivsum);
    ExportPadString(tstr,18,"0",true);
  end;
  ExportPadString(FKS,152," ",false);  
  ExportPadString(chr(13) & chr(10),2,"",false);
  return;
end; 

global
procedure ExportForHandelsbanken(var record RcVc RepSpec,var record FactoringBlock factp)
begin
  record IVVc IVr;
  record CUVc CUr;
  string 20 fromcust,tocust,cust1, cust2;
  integer ivcnt;
  val totivsum;
  Boolean exported, TrHs,testf,samecust;
  record CYBlock CYrec;
    
  RepSpec.FirstVer = factp.LastSerNr;
  BlockLoad(CYrec);  
  if (SetExportCodePage("CP1252") == false) then begin end;
  RepSpec.long1 = FirstInRange(RepSpec.f1,10);
  RepSpec.long2 = LastInRange(RepSpec.f1,10);
  fromcust = FirstInRange(RepSpec.f2,20);
  tocust = LastInRange(RepSpec.f2,20);  
  IVr.SerNr = RepSpec.long1;
  IVr.InvDate = RepSpec.sStartDate;
  TrHs = true;
  samecust = true;
  cust2 = "";
     
  if (nonblank(RepSpec.f2)) then begin
    IVr.CustCode=fromcust;
  end;
     
  //loopa šver fakturor, sorterat efter kund eftersom exporten ska vara sorterad efter kund
  while (LoopKey("CustCode",IVr,1,TrHs)) begin 
    
    //stoppvillkor
    if (nonblank(RepSpec.f2)) then begin
      if(IVr.CustCode>tocust) then begin TrHs = false; end;
    end;  
    
    cust1 = IVr.CustCode;
        
    if (TrHs) then begin
      testf = true;
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr>RepSpec.long2) then begin testf = false;  end;
     end;  
      if (nonblank(RepSpec.f1)) then begin
        if (IVr.SerNr<RepSpec.long1) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (IVr.CurncyCode!=RepSpec.CurncyCode) then begin testf = false; end;
      end;  
      if (DateInRange(IVr.InvDate,RepSpec.sStartDate,RepSpec.sEndDate)== false) then begin
        testf = false; 
      end;  
      if (IVr.Sum4==0) then begin testf = false;  end;
      if (IVr.OKFlag==0) then begin testf = false;  end;
      if (IVr.Invalid!=0) then begin testf = false; end;
      if (IVr.InvType==kInvoiceTypeCash) then begin testf = false; end;
      if (testf) then begin
        
      //kšrs en gŒng per kund
      if(cust1 != cust2) then begin
        CUr.Code = IVr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin end;     
        cust2 = IVr.CustCode;
        ExpTransType10(CUr,RepSpec);
      end;
  
      ExpTransType20(IVr,CUr,RepSpec);
      if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
        totivsum = totivsum + IVr.Sum4;
      end;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        totivsum = totivsum + (IVr.Sum4*-1);
      end;
      ivcnt = ivcnt + 1;
      exported = true;
      end;
    end;  
  end;
  ExpTransType30(totivsum, ivcnt,RepSpec);
  factp.LastDate = CurrentDate;
  factp.LastSerNr = factp.LastSerNr + 1;
  return;
end;

