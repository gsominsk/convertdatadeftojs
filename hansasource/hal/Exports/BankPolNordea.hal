external procedure NewLineExport();
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure FinnishBankVal(var string,val);
external function Boolean GetPMRow(string,var row PMBlock);

function string 255 BankAccount(string paymode)
begin
  string 255 res;
  record BankVc Bankr;
  row PMBlock PMrw;

  if (nonblank(paymode)) then begin
    GetPMRow(paymode,PMrw);
    Bankr.Code = PMrw.BankCode;
    if (ReadFIrstMain(Bankr,1,true)) then begin
      res = Bankr.Nr2;
    end;
  end;
  BankAccount = res;
  return;
end;

function Integer CheckIfVeinArray(string vecode,string bankacc,string curncy,string ourbankacc,
                                  array string aourbankac,array string avecode,array string avebankacc,array string acurncy,Integer acnt,Boolean checkcurncyf)
begin
  Integer res;
  Integer i;
  Boolean testf
  
  res = -1;
  for (i=0;i<acnt;i=i+1) begin
    testf = true;
    if ((vecode!=avecode[i]) or (bankacc!=avebankacc[i]) or (ourbankacc!=aourbankac[i])) then begin
      testf = false;
    end;
    if (checkcurncyf) then begin
      if (curncy!=acurncy[i]) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      res = i;
      goto LCheckIfVeinArray;
    end;
  end;
LCheckIfVeinArray:;  
  CheckIfVeinArray = res;
  return;
end;

procedure AddToVEArray(string vecode,string bankacc,string VISerNr,string curncy,val bankval,Date VITransDate,string ourbankacc,string rkPayNumber,
                       Array string aourbankacc,Array string avecode,Array string avebankacc,Array string avecomment,Array string acurncy,Array val avebankval,
                       Array Date avevidate,Array string arkPayNumber,var Integer acnt)
begin
  avecode[acnt] = vecode;
  avebankacc[acnt] = bankacc;
  avecomment[acnt] = VISerNr;
  acurncy[acnt] = curncy;
  avebankval[acnt] = bankval;
  avevidate[acnt] = VITransDate;
  aourbankacc[acnt] = ourbankacc;
  arkPayNumber[acnt] = rkPayNumber;
  acnt = acnt + 1;
  return;
end;

procedure ExportStringInQuotes(string instr,Integer l,string padch,Boolean padrightf)
begin
  string 255 tstr,tstr2;
  
  M4PadString(instr,l,padch,padrightf,tstr2);
  tstr = """";
  tstr = tstr & tstr2;
  tstr = tstr & """";
  tstr = tstr & ",";  
  ExportPadString(tstr,len(tstr)," ",false);
  return;
end;

procedure ExportOnePayment(record CYBlock CYb,Date paydate,
                           string ourbankacc,
                           string vecode,string vebankacc,string curncycode,string vecomment,Date vevidate,val vebankval)
begin
  record CUVc VEr;
  string 255 tstr;
  
  ExportPadString("110",3," ",false);
  ExportPadString(",",1," ",false);
  ExportPadString(DateToString(paydate,"YYYYMMDD"),8," ",false);
  ExportPadString(",",1," ",false);
  FinnishBankVal(tstr,vebankval);
  ExportPadString(tstr,11,"0",true);
  ExportPadString(",",1," ",false);
  ExportPadString(Mid(ourbankacc,2,8),8,"0",true);
  ExportPadString(",",1," ",false);
  ExportPadString("0",1,"0",false);
  ExportPadString(",",1," ",false);
  ExportStringInQuotes(Left(ourbankacc,26),len(Left(ourbankacc,26)),"0",false);
  ExportStringInQuotes(Left(vebankacc,26),len(Left(vebankacc,26)),"0",false);
  ExportPadString("""",1," ",false);  
  ExportPadString(Left(CYb.CompName,35),len(Left(CYb.CompName,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(CYb.Addr0,35),len(Left(CYb.Addr0,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(CYb.Addr1,35),len(Left(CYb.Addr1,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(CYb.Addr2,35),len(Left(CYb.Addr2,35))," ",false);      
  ExportPadString("""",1," ",false);  
  ExportPadString(",",1," ",false);
  VEr.Code = vecode;
  if (ReadFirstMain(VEr,1,true)) then begin end;
  ExportPadString("""",1," ",false);  
  ExportPadString(Left(VEr.Name,35),len(Left(VEr.Name,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(VEr.InvAddr0,35),len(Left(VEr.InvAddr0,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(VEr.InvAddr1,35),len(Left(VEr.InvAddr1,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(VEr.InvAddr2,35),len(Left(VEr.InvAddr2,35))," ",false);      
  ExportPadString("""",1," ",false);  
  ExportPadString(",",1," ",false);
  ExportPadString("0",1,"0",false);  
  ExportPadString(",",1," ",false);
  ExportPadString(Mid(vebankacc,2,8),8,"0",true);
  ExportPadString(",",1," ",false);
  ExportPadString("""",1," ",false);  
  tstr = Left(vecomment,35);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("|",1," ",false);
  tstr = Mid(vecomment,35,35);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("|",1," ",false);
  tstr = Mid(vecomment,70,35);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("|",1," ",false);
  if (nonblankdate(vevidate)) then begin
//    tstr = DateToString(vevidate,"YYMMDD");
    tstr = Mid(vecomment,105,35);
  end else begin
    tstr = Mid(vecomment,105,35);
  end;
  ExportPadString(tstr,len(tstr)," ",false);      
  ExportPadString("""",1," ",false);  
  ExportPadString(",",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString(",",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString(",",1," ",false);
  ExportPadString("51",2," ",false);
  NewLineExport;
  return;
end;

procedure BankExpNordea_inBase1(record OPVc OPr,Integer persupp)
begin
  record CYBlock CYb;
  record BaseCurBlock BCb;
  string 255 headerourbankacc,ourbankacc,InvoiceNr;
  Integer i,rwcnt;
  row OPVc OPrw;
  record VIVc VIr;
  Date bd;
  Integer PayperSupplier;

  Array string 20 avecode;
  Array string 20 acurncycode;
  Array string 100 avebankacc;
  Array string 200 avecomment;
  Array string 255 arkPayNumber;
  Array val avebankval;
  Array Date avevidate;
  Array string 100 aourbankacc;
  Integer acnt,ai;

  BlockLoad(BCb);
  BlockLoad(CYb);
  PayperSupplier = OPr.PayperSupplier;
  if (PayperSupplier==0) then begin
    PayperSupplier = persupp;
  end;
  headerourbankacc = OPr.BankAcc;
  if (blank(headerourbankacc)) then begin headerourbankacc = BankAccount(OPr.PayMode); end;  
  if (blank(headerourbankacc)) then begin headerourbankacc = CYb.Bank1; end;
  rwcnt = MatRowCnt(OPr);
  switch (PayperSupplier) begin
    case 0:
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        ourbankacc = BankAccount(OPrw.PayMode);
        if (blank(ourbankacc)) then begin ourbankacc = headerourbankacc; end;  
		    VIr.SerNr = OPrw.VISerNr;
		    if (ReadFirstMain(VIr,1,true)) then begin end;   
		    InvoiceNr = VIr.InvoiceNr;
		    if (blank(InvoiceNr)) then begin
		      InvoiceNr = VIr.SerNr;
		    end;
        ExportOnePayment(CYb,OPr.PayDate,
                         ourbankacc,
                         OPrw.VECode,OPrw.BankAcc,OPrw.BankCurncy,OPrw.Comment,VIr.TransDate,OPrw.BankVal);
      end;
    case 1:
		  for (i=0;i<rwcnt;i=i+1) begin
		    MatRowGet(OPr,i,OPrw);
		    VIr.SerNr = OPrw.VISerNr;
		    if (ReadFirstMain(VIr,1,true)) then begin end;      
        ourbankacc = BankAccount(OPrw.PayMode);
        if (blank(ourbankacc)) then begin ourbankacc = headerourbankacc; end;  
		    if (OPrw.BankCurncy==BCb.BaseCur1) or (blank(OPrw.BankCurncy)) then begin
		      ai = CheckIfVEinArray(OPrw.VECode,OPrw.BankAcc,"",ourbankacc,aourbankacc,avecode,avebankacc,acurncycode,acnt,false);
		      if (ai>-1) then begin
		        avebankval[ai] = avebankval[ai] + OPrw.BankVal;
				    InvoiceNr = VIr.InvoiceNr;
				    if (blank(InvoiceNr)) then begin
				      InvoiceNr = VIr.SerNr;
				    end;
				    if (nonblank(avecomment[ai])) then begin
  		        avecomment[ai] = avecomment[ai] & " ";
  		      end;
  		      avecomment[ai] = avecomment[ai] & OPrw.Comment;
		        avevidate[ai] = bd;
		      end else begin
		        AddToVEArray(OPrw.VECode,OPrw.BankAcc,OPrw.Comment,"",OPrw.BankVal,VIr.TransDate,ourbankacc,OPrw.rkPayNumber,aourbankacc,avecode,avebankacc,avecomment,acurncycode,avebankval,avevidate,arkPayNumber,acnt);
		      end;
		    end;
	    end;
	    for (ai=0;ai<acnt;ai=ai+1) begin	      
        ExportOnePayment(CYb,OPr.PayDate,
                         aourbankacc[ai],
                         avecode[ai],avebankacc[ai],acurncycode[ai],avecomment[ai],avevidate[i],avebankval[ai]);
		  end;
  end;
  return;
end;

procedure ExportOnePayment_inCurrency(record CYBlock CYb,Date paydate,
                           string ourbankacc,
                           string vecode,string vebankacc,string curncycode,string vecomment,Date vevidate,val vebankval,string rkPayNumber)
begin
  record CUVc VEr;
  string 255 tstr;
  record BankVc Bankr;
  
  ExportPadString("410",3," ",false);
  ExportPadString(",",1," ",false);
  ExportPadString(DateToString(paydate,"YYYYMMDD"),8," ",false);
  ExportPadString(",",1," ",false);
  FinnishBankVal(tstr,vebankval);
  ExportPadString(tstr,11,"0",true);
  ExportPadString(",",1," ",false);
  ExportPadString(Mid(ourbankacc,2,8),8,"0",true);
  ExportPadString(",",1," ",false);
  ExportPadString("0",1,"0",false);
  ExportPadString(",",1," ",false);
  ExportStringInQuotes(Left(ourbankacc,26),len(Left(ourbankacc,26)),"0",false);
  ExportStringInQuotes(Left(vebankacc,26),len(Left(vebankacc,26)),"0",false);
  ExportPadString("""",1," ",false);  
  ExportPadString(Left(CYb.CompName,35),len(Left(CYb.CompName,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(CYb.Addr0,35),len(Left(CYb.Addr0,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(CYb.Addr1,35),len(Left(CYb.Addr1,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(CYb.Addr2,35),len(Left(CYb.Addr2,35))," ",false);      
  ExportPadString("""",1," ",false);  
  ExportPadString(",",1," ",false);
  VEr.Code = vecode;
  if (ReadFirstMain(VEr,1,true)) then begin end;
  Bankr.Code = VEr.AccOperator;
  if (ReadFirstMain(Bankr,1,true)) then begin end;
  ExportPadString("""",1," ",false);  
  ExportPadString(Left(VEr.Name,35),len(Left(VEr.Name,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(VEr.InvAddr0,35),len(Left(VEr.InvAddr0,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(VEr.InvAddr1,35),len(Left(VEr.InvAddr1,35))," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Left(VEr.InvAddr2,35),len(Left(VEr.InvAddr2,35))," ",false);      
  ExportPadString("""",1," ",false);  
  ExportPadString(",",1," ",false);
  ExportPadString("0",1,"0",false);  
  ExportPadString(",",1," ",false);
//  ExportPadString(Mid(vebankacc,2,8),8,"0",true);
  ExportPadString("0",1,"0",true);
  ExportPadString(",",1," ",false);
  ExportPadString("""",1," ",false);  
  tstr = Left(vecomment,35);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("|",1," ",false);
  tstr = Mid(vecomment,35,35);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("|",1," ",false);
  tstr = Mid(vecomment,70,35);
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString("|",1," ",false);
  if (nonblankdate(vevidate)) then begin
//    tstr = DateToString(vevidate,"YYMMDD");
    tstr = Mid(vecomment,105,35);
  end else begin
    tstr = Mid(vecomment,105,35);
  end;
  ExportPadString(tstr,len(tstr)," ",false);      
  ExportPadString("""",1," ",false);  
  ExportPadString(",",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString(",",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString(",",1," ",false);
  ExportPadString("51",2," ",false);
  ExportPadString(",",1," ",false);
  ExportPadString("""",1," ",false);
  ExportPadString("REF:",4," ",false);
  ExportPadString(rkPayNumber,len(rkPayNumber)," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString("WAL:",4," ",false);
  ExportPadString(curncycode,len(curncycode)," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(VEr.CountryCode,len(VEr.CountryCode)," ",false);
  ExportPadString("/SWIFT",6," ",false);
  ExportPadString(VEr.IBANCode,len(VEr.IBANCode)," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Bankr.Name,len(Bankr.Name)," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Bankr.Address0,len(Bankr.Address0)," ",false);
  ExportPadString("|",1," ",false);
  ExportPadString(Bankr.Address1,len(Bankr.Address1)," ",false);
  ExportPadString("""",1," ",false);
  NewLineExport;
  return;
end;

procedure BankExpNordea_inCurrency(record OPVc OPr,Integer persupp)
begin
  record CYBlock CYb;
  record BaseCurBlock BCb;
  string 255 headerourbankacc,ourbankacc,InvoiceNr;
  Integer i,rwcnt;
  row OPVc OPrw;
  record VIVc VIr;
  Date bd;
  Integer PayperSupplier;

  Array string 20 avecode;
  Array string 20 acurncycode;
  Array string 100 avebankacc;
  Array string 200 avecomment;
  Array string 255 arkPayNumber;
  Array val avebankval;
  Array Date avevidate;
  Array string 100 aourbankacc;
  Integer acnt,ai;

  BlockLoad(BCb);
  BlockLoad(CYb);
  PayperSupplier = OPr.PayperSupplier;
  if (PayperSupplier==0) then begin
    PayperSupplier = persupp;
  end;
  headerourbankacc = OPr.BankAcc;
  if (blank(headerourbankacc)) then begin headerourbankacc = BankAccount(OPr.PayMode); end;  
  if (blank(headerourbankacc)) then begin headerourbankacc = CYb.Bank1; end;
  rwcnt = MatRowCnt(OPr);
  switch (PayperSupplier) begin
    case 0:
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(OPr,i,OPrw);
        ourbankacc = BankAccount(OPrw.PayMode);
        if (blank(ourbankacc)) then begin ourbankacc = headerourbankacc; end;  
		    VIr.SerNr = OPrw.VISerNr;
		    if (ReadFirstMain(VIr,1,true)) then begin end;   
		    InvoiceNr = VIr.InvoiceNr;
		    if (blank(InvoiceNr)) then begin
		      InvoiceNr = VIr.SerNr;
		    end;
        ExportOnePayment_inCurrency(CYb,OPr.PayDate,
                         ourbankacc,
                         OPrw.VECode,OPrw.BankAcc,OPrw.PInvCurncy,OPrw.Comment,VIr.TransDate,OPrw.PInvVal,OPrw.rkPayNumber);
      end;
    case 1:
		  for (i=0;i<rwcnt;i=i+1) begin
		    MatRowGet(OPr,i,OPrw);
		    VIr.SerNr = OPrw.VISerNr;
		    if (ReadFirstMain(VIr,1,true)) then begin end;      
        ourbankacc = BankAccount(OPrw.PayMode);
        if (blank(ourbankacc)) then begin ourbankacc = headerourbankacc; end;  
		    if (OPrw.BankCurncy==BCb.BaseCur1) or (blank(OPrw.PInvCurncy)) then begin
		      ai = CheckIfVEinArray(OPrw.VECode,OPrw.BankAcc,OPrw.PInvCurncy,ourbankacc,aourbankacc,avecode,avebankacc,acurncycode,acnt,true);
		      if (ai>-1) then begin
		        avebankval[ai] = avebankval[ai] + OPrw.PInvVal;
				    InvoiceNr = VIr.InvoiceNr;
				    if (blank(InvoiceNr)) then begin
				      InvoiceNr = VIr.SerNr;
				    end;
				    if (nonblank(avecomment[ai])) then begin
  		        avecomment[ai] = avecomment[ai] & " ";
  		      end;
  		      avecomment[ai] = avecomment[ai] & OPrw.Comment;
		        avevidate[ai] = bd;
		      end else begin
		        AddToVEArray(OPrw.VECode,OPrw.BankAcc,OPrw.Comment,OPrw.PInvCurncy,OPrw.PInvVal,VIr.TransDate,ourbankacc,OPrw.rkPayNumber,aourbankacc,avecode,avebankacc,avecomment,acurncycode,avebankval,avevidate,arkPayNumber,acnt);
		      end;
		    end;
	    end;
	    for (ai=0;ai<acnt;ai=ai+1) begin	      
        ExportOnePayment_inCurrency(CYb,OPr.PayDate,
                         aourbankacc[ai],
                         avecode[ai],avebankacc[ai],acurncycode[ai],avecomment[ai],avevidate[ai],avebankval[ai],arkPayNumber[ai]);
		  end;
  end;
  return;
end;

global
procedure BankExpNordea(record OPVc OPr,record RcVc RepSpec)
begin
  if (OPr.ForeignPayment!=0) or (RepSpec.flags[2]!=0) then begin
    BankExpNordea_inCurrency(OPr,RepSpec.flags[5]);
  end else begin
    if (RepSpec.flags[2]==0) then begin
      BankExpNordea_inBase1(OPr,RepSpec.flags[5]);
    end;
  end;
  return;
end;
