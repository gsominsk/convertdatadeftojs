external procedure StripSpace(var string,string);
external function boolean ValidateIBAN(string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure NewLineExport();
external function string 255 AddStr(string,string,string);
external function string 255 ConvertXmlString(string,Boolean);

procedure ExportTheLevel(Integer level)
begin
  string 255 tstr;
  Integer i;
  
  tstr = "";
  for (i=0;i<level;i=i+1) begin
    tstr = tstr & "  ";
  end;
  ExportPadString(tstr,len(tstr)," ",false);
  return;
end;

procedure ExportPlainXml(string value,Integer level)
begin
  ExportTheLevel(level);
  ExportPadString(value,BytesInString(value)," ",false);
  NewLineExport;
  return;
end;

procedure ExportTagXml(string tag,string pvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure ExportAttributeTagXml(string tag,string pvalue,string attr,string attrvalue,Integer level)
begin
  string 255 value;
  
  value = pvalue;
  ExportTheLevel(level);
  ExportPadString("<",1," ",false);
  ExportPadString(tag,len(tag)," ",false);
  if (nonblank(attr)) then begin
    ExportPadString(" ",1," ",false);
    ExportPadString(attr,len(attr)," ",false);
    ExportPadString("=""",2," ",false);
    ExportPadString(attrvalue,BytesInString(attrvalue)," ",false);
    ExportPadString("""",1," ",false);
  end;
  ExportPadString(">",1," ",false);  
  ExportPadString(value,BytesInString(value)," ",false);
  ExportPadString("</",2," ",false);
  ExportPadString(tag,len(tag)," ",false);
  ExportPadString(">",1," ",false);
  NewLineExport;
  return;
end;

procedure AddToPerSupplierArray(Integer ExportSuppInvNr,row OPVc OPrw,string bankacc,Array string aprvecode,Array string aprbankacc,Array string aprreference,Array string aprbankcur,
                                Array string aprreccur,Array val aprrecval,Array string aprreferencedetails,var Integer acnt)
begin
  Integer i;
  record VIVc VIr;
  string 255 tstr;

  VIr.SerNr = OPrw.VISerNr;
  ReadFirstMain(VIr,1,true);
  for (i=0;i<acnt;i=i+1) begin
    if (aprvecode[i]==OPrw.VECode) and (aprbankacc[i]==bankacc) then begin
      aprrecval[i] = aprrecval[i] + OPrw.RecVal;
      tstr = OPrw.PaymentCode;
      if (blank(tstr)) then begin
        tstr = OPrw.BankRefStr;
      end;
      if (nonblank(tstr)) then begin
        if (blank(aprreferencedetails[i])) then begin
          aprreferencedetails[i] = tstr;
        end;
      end;
      if (nonblank(VIr.InvoiceNr)) then begin
        if ((len(aprreference[i])+len(VIr.InvoiceNr)+1) <= 132) then begin
          if (SetInSet(VIr.InvoiceNr,aprreference[i])==false) then begin
            aprreference[i] = AddStr(aprreference[i],VIr.InvoiceNr,",");
          end;
        end;
      end else begin
        if ((len(aprreference[i])+9) <= 132) then begin
          if (SetInSet("TRANSFER",aprreference[i])==false) then begin
            aprreference[i] = AddStr(aprreference[i],"TRANSFER",",");
          end;
        end;
      end;
      goto LAddToPerSupplierArray;
    end;
  end;
  aprvecode[acnt] = OPrw.VECode;
  aprbankacc[acnt] = bankacc;
  aprbankcur[acnt] = OPrw.BankCurncy;
  aprreccur[acnt] = OPrw.RecCurncy;
  aprrecval[acnt] = OPrw.RecVal;
  tstr = OPrw.PaymentCode;
  if (blank(tstr)) then begin
    tstr = OPrw.BankRefStr;
  end;
  if (nonblank(tstr)) then begin
    if (blank(aprreferencedetails[acnt])) then begin
      aprreferencedetails[acnt] = tstr;
    end;
  end;
  if (nonblank(VIr.InvoiceNr)) then begin
    aprreference[acnt] = aprreference[acnt] & VIr.InvoiceNr;
  end else begin
    aprreference[acnt] = aprreference[acnt] & "TRANSFER";
  end;
  acnt = acnt + 1;
LAddToPerSupplierArray:;
  return;
end;

global
procedure BankExpNorwaySEPA_Domestic_GroupHeader(record RcVc RepSpec,var record BankFileBlock bfr)
begin
  string 255 tstr;
  LongInt appsernr;
  record CYBlock CYb;
  record OPVc OPr;
  Boolean found,testf;
  Integer keys;
  string 255 ckey;
  LongInt afr,ato;
  Integer i,rwcnt;
  row OPVc OPrw;
  Integer NbOfTxs;
  record CUVc VEr;
  string 255 bankacc;
  Array string 255 aprvecode;
  Array string 255 aprbankacc;
  Array string 255 aprreference;
  Array string 255 aprbankcur;
  Array string 255 aprreccur;
  Array val aprrecval;
  Array string 255 aprreferencedetails;
  Integer prevacnt,acnt;
  string 255 timestamp;
  time curtime;
  string 255 codepage;
  val CtrlSum;
  record BankVc Bankr;
  row PMBlock PMrw;

  codepage = StringSetFromString(89,RepSpec.f12);
  if (blank(codepage)) then begin
    codepage = "UTF-8";
  end;
  if (SetExportCodePage(codepage)) then begin end;
  NbOfTxs = 0;
  CtrlSum = 0;
  BlockLoad(CYb);
  appsernr = bfr.LastSerNr;
  if (appsernr<=0) or (appsernr>999999) then begin
    appsernr = 1;
  end;
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  found = true;
  if (RepSpec.OnlyUnprntd==0) then begin
    OPr.SentFlag = 0;
    OPr.SerNr = afr;
    keys = 2;
    ckey = "SentFlag";
  end else begin
    OPr.SerNr = afr;
    keys = 1;
    ckey = "SerNr";
  end;
  while (LoopKey(ckey,OPr,keys,found)) begin
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.SentFlag==1) then begin
        found = false;
      end;
    end;
    if (ato<>-1) then begin
      if (OPr.SerNr>ato) then begin
        found = false;
      end;
    end;
    testf = true;
    if (RepSpec.OnlyUnprntd==0) then begin
      if (OPr.DoneFlag==1) then begin 
        testf = false;
      end;
    end;
    if (OPr.OrderedFlag==0) then begin 
      testf = false;
    end;
    if (DateInRange(OPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.CurncyCode)) then begin
      if (nonblank(OPr.PayCurCode) and (OPr.PayCurCode <> RepSpec.CurncyCode)) then begin
        testf = false;
      end;
    end;
    if (found==false) then begin
      testf = false;
    end;
    if (testf==true) then begin
      GetPMRow(OPr.PayMode,PMrw);
      Bankr.Code = PMrw.BankCode;
      ReadFirstMain(Bankr,1,true);
      rwcnt = MatRowCnt(OPr);
      if (OPr.PayperSupplier==1) or (RepSpec.flags[5]!=0) then begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          if (OPrw.ovst!=0) or (OPrw.stp!=1) then begin
            goto LBankExpNorwaySEPA_Domestic_GroupHeader_SKIPROW1;
          end;
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (OPrw.BankCurncy!=RepSpec.CurncyCode) then begin
              goto LBankExpNorwaySEPA_Domestic_GroupHeader_SKIPROW1;
            end;
          end;

          VEr.Code = OPrw.VECode;
          ReadFirstMain(VEr,1,true);

          bankacc = OPrw.BankAcc;
          if (blank(bankacc)) then begin
            bankacc = VEr.IBANCode;
          end;
          if (blank(bankacc)) then begin
            bankacc = VEr.BankAccount;
          end;
          if (blank(bankacc)) then begin
            bankacc = VEr.Bank;
          end;
          prevacnt = acnt;
          AddToPerSupplierArray(1,OPrw,bankacc,aprvecode,aprbankacc,aprreference,aprbankcur,aprreccur,aprrecval,aprreferencedetails,acnt);
          if (prevacnt!=acnt) then begin              
            NbOfTxs = NbOfTxs + 1;
          end;
          CtrlSum = CtrlSum + OPrw.RecVal;
LBankExpNorwaySEPA_Domestic_GroupHeader_SKIPROW1:;              
        end;
      end else begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(OPr,i,OPrw);
          if (OPrw.ovst!=0) or (OPrw.stp!=1) then begin
            goto LBankExpNorwaySEPA_Domestic_GroupHeader_SKIPROW2;
          end;
          if (nonblank(RepSpec.CurncyCode)) then begin
            if (OPrw.BankCurncy!=RepSpec.CurncyCode) then begin
              goto LBankExpNorwaySEPA_Domestic_GroupHeader_SKIPROW2;
            end;
          end;
          NbOfTxs = NbOfTxs + 1;
          CtrlSum = CtrlSum + OPrw.RecVal;
LBankExpNorwaySEPA_Domestic_GroupHeader_SKIPROW2:;              
        end;
      end;
    end;
  end;

  ExportPlainXml("<?xml version=""1.0"" encoding=""" & codepage & """?>",0);

  tstr = "<Document xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"">";
//  tstr = "<Document xmlns=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""urn:iso:std:iso:20022:tech:xsd:pain.001.001.03 pain.001.001.03.xsd"">";
  ExportPlainXml(tstr,0); 

  ExportPlainXml("<CstmrCdtTrfInitn>",0);

  ExportPlainXml("<GrpHdr>",1);
  curtime = CurrentTime;
  timestamp = DateToString(CurrentDate,"YYMMDD") & GetHour(curtime) & GetMinute(curtime);
  ExportTagXml("MsgId",appsernr & "-" & timestamp,2);
  tstr = DateToString(CurrentDate,"YYYY-MM-DD");
  tstr = tstr & "T";
  tstr = tstr & CurrentTime;
  ExportTagXml("CreDtTm",tstr,2);
  ExportTagXml("NbOfTxs",NbOfTxs,2);
  ExportTagXml("CtrlSum",ValToString(CtrlSum,M4UVal,"",".",0),2);
  ExportPlainXml("<InitgPty>",2);
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<OrgId>",4);
  ExportPlainXml("<Othr>",5);
  
  ExportTagXml("Id",Bankr.FactoringType,6);
  ExportPlainXml("<SchmeNm>",6);
  ExportTagXml("Cd","CUST",6);
  ExportPlainXml("</SchmeNm>",6);

//  ExportTagXml("Nm",ConvertXmlString(CYb.CompName,false),3);
/*  if(nonblank(CYb.Addr0) and nonblank(CYb.Addr1)) then begin
    ExportPlainXml("<PstlAdr>",3);
    ExportTagXml("Ctry",left(CYb.Bank2,2),4);
    ExportTagXml("AdrLine",ConvertXmlString((CYb.Addr0 & "," & CYb.Addr1),false),4);
    ExportPlainXml("</PstlAdr>",3);
  end; */
  ExportPlainXml("</Othr>",5);
  ExportPlainXml("</OrgId>",4);
  ExportPlainXml("</Id>",3);
  ExportPlainXml("</InitgPty>",2);
  ExportPlainXml("</GrpHdr>",1);
  bfr.LastSerNr = appsernr + 1;
  return;
end;

global
procedure BankExpNorwaySEPA_Domestic_GroupFooter()
begin
  ExportPlainXml("</CstmrCdtTrfInitn>",0);
  ExportPlainXml("</Document>",0);
  return;
end;

procedure BankExpNorwaySEPA_Domestic_Header(record RcVc RepSpec,record OPVc OPr,var record BankFileBlock bfr)
begin
  string 255 bankacc;
  LongInt rowsernr;
  record CYBlock CYb;
  record BankVc Bankr;
  row PMBlock PMrw;
  record BaseCurBlock BCb;
    
  BlockLoad(BCb);
  BlockLoad(CYb);
  rowsernr = bfr.RowSerNr;
  if (rowsernr<=0) or (rowsernr>999999) then begin
    rowsernr = 1;
  end;
  ExportPlainXml("<PmtInf>",1);

  ExportTagXml("PmtInfId",rowsernr,2);
  ExportTagXml("PmtMtd","TRF",2);
  ExportTagXml("BtchBookg","false",2);
  ExportPlainXml("<PmtTpInf>",2);
/*not requested
  ExportPlainXml("<SvcLvl>",3);
  if (ForeignPaymf) then begin
    ExportTagXml("Cd","SDVA",4);//NURG?
  end else begin
    ExportTagXml("Cd","SEPA",4);
  end;
  ExportPlainXml("</SvcLvl>",3);
*/  
  ExportPlainXml("<CtgyPurp>",3);
  ExportTagXml("Cd","SUPP",4);
  ExportPlainXml("</CtgyPurp>",3);

  ExportPlainXml("</PmtTpInf>",2);
  if (RepSpec.flags[0]==0) then begin
    if (OPr.PayDate>CurrentDate) then begin
      ExportTagXml("ReqdExctnDt",DateToString(OPr.PayDate,"YYYY-MM-DD"),2);
    end else begin
      ExportTagXml("ReqdExctnDt",DateToString(OPr.PayDate,"YYYY-MM-DD"),2);//CurrentDate
    end;
  end else begin
    ExportTagXml("ReqdExctnDt",DateToString(OPr.PayDate,"YYYY-MM-DD"),2);//CurrentDate
  end;

  ExportPlainXml("<Dbtr>",2);
  ExportTagXml("Nm",ConvertXmlString(CYb.CompName,false),3);
//  if(nonblank(CYb.Addr0) and nonblank(CYb.Addr1)) then begin
    ExportPlainXml("<PstlAdr>",3);
    ExportTagXml("Ctry",CYb.CountryCode,4);
   // ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr0,false),4);
   // ExportTagXml("AdrLine",ConvertXmlString(CYb.Addr1,false),4);
    ExportPlainXml("</PstlAdr>",3);
//  end;
  ExportPlainXml("<Id>",3);
  ExportPlainXml("<OrgId>",4);
  ExportPlainXml("<Othr>",5);
  GetPMRow(OPr.PayMode,PMrw);
  Bankr.Code = PMrw.BankCode;
  ReadFirstMain(Bankr,1,true);

  /* this is crap. RTM!!!
  if (nonblank(PMrw.SortCode)) then begin
    ExportTagXml("Id",PMrw.SortCode,6);
  end else begin
    if(nonblank(Bankr.BankIDCode)) then begin
      ExportTagXml("Id",Bankr.BankIDCode,6);
    end else begin
      ExportTagXml("Id",PMrw.BankCode,6);
    end;
  end;
 */
  ExportTagXml("Id",Bankr.BankIDCode,6);//Payer's ID, such as Company no., or VAT no. Not used at DNB bank
  ExportPlainXml("<SchmeNm>",6);
  ExportTagXml("Cd","BANK",7);//COID- company number, CUST - client's code in the payee system. Jei mokama i VMI, turi buti COID
  ExportPlainXml("</SchmeNm>",6);
  ExportPlainXml("</Othr>",5);
  ExportPlainXml("</OrgId>",4);
  ExportPlainXml("</Id>",3);  
  ExportPlainXml("</Dbtr>",2);
  
  ExportPlainXml("<DbtrAcct>",2);
  ExportPlainXml("<Id>",3);
  if (nonblank(PMrw.BankNr)) then begin
    bankacc = PMrw.BankNr;
  end else begin
    if (nonblank(Bankr.Nr2)) then begin
      bankacc = Bankr.Nr2;
    end else begin
      bankacc = CYb.Bank2;
    end;
  end;
  StripSpace(bankacc,bankacc);
  if (ValidateIBAN(bankacc)) then begin
    ExportTagXml("IBAN",bankacc,4);
  end;
  ExportPlainXml("</Id>",3);    
  if (nonblank(OPr.PayCurCode)) then begin
    ExportTagXml("Ccy",OPr.PayCurCode,3);
  end else begin
    if (nonblank(BCb.BaseCur1)) then begin
      ExportTagXml("Ccy",BCb.BaseCur1,3);
    end else begin
      ExportTagXml("Ccy","EUR",3);
    end;
  end;
  ExportPlainXml("</DbtrAcct>",2);

  ExportPlainXml("<DbtrAgt>",2);
  ExportPlainXml("<FinInstnId>",3);
  if (nonblank(Bankr.SWIFT)) then begin
    ExportTagXml("BIC",Bankr.SWIFT,4);  //not required?
  end;
  ExportPlainXml("</FinInstnId>",3);
  ExportPlainXml("</DbtrAgt>",2);

  if (RepSpec.flags[4]==2) then begin
    ExportTagXml("ChrgBr","SLEV",2);  
  end;
  bfr.RowSerNr = rowsernr + 1;
  return;
end;

procedure BankExpNorwaySEPA_Domestic_Footer()
begin
  ExportPlainXml("</PmtInf>",1);
  return;
end;

global
procedure BankExpNorwaySEPA_Domestic(record RcVc RepSpec,record OPVc OPr,Integer today,String curnc,integer method,record BankFileBlock bfr)
begin
  string 255 tstr,tstr1;
  Integer i,j,rwcnt;
  row OPVc OPrw;
  row OPVc OP2rw;
  record CUVc VEr;
  record BankVc Bankr;
  record VIVc VIr;
  string 255 bankacc;
  Array string 255 aprvecode;
  Array string 255 aprbankacc;
  Array string 255 aprreference;
  Array string 255 aprreccur;
  Array string 255 aprbankcur;
  Array val aprrecval;
  Array string 255 aprreferencedetails;
  Integer acnt;
  string 255 bvdet,brdet,invtype,country,refstr;
  record CYBlock CYb;
  boolean ForeignPaymf,printRef;
  record BaseCurBlock BCb;
    
  BlockLoad(BCb);
  BLockLoad(CYb);
  if (nonblank(RepSpec.CurncyCode)) then begin
    if (nonblank(OPr.PayCurCode) and (OPr.PayCurCode <> RepSpec.CurncyCode)) then begin
      goto LBankExpNorwaySEPA_Domestic_SKIPOP;
    end;
  end;

  if (OPr.ForeignPayment==1) or (RepSpec.flags[2]==1) then begin
    ForeignPaymf = true;
  end;
  BankExpNorwaySEPA_Domestic_Header(RepSpec,OPr,bfr);
  rwcnt = MatRowCnt(OPr);
  if (OPr.PayperSupplier==1) or (RepSpec.flags[5]!=0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
        goto LBankExpNorwaySEPA_Domestic_SKIPROW1;
      end;
      if (nonblank(RepSpec.CurncyCode)) then begin
        if (OPrw.BankCurncy!=RepSpec.CurncyCode) then begin
          goto LBankExpNorwaySEPA_Domestic_SKIPROW1;
        end;
      end;
      VEr.Code = OPrw.VECode;
      ReadFirstMain(VEr,1,true);
      bankacc = OPrw.BankAcc;
      if (blank(bankacc)) then begin
        bankacc = VEr.IBANCode;
      end;
      if (blank(bankacc)) then begin
        bankacc = VEr.BankAccount;
      end;
      if (blank(bankacc)) then begin
        bankacc = VEr.Bank;
      end;
      AddToPerSupplierArray(1,OPrw,bankacc,aprvecode,aprbankacc,aprreference,aprbankcur,aprreccur,aprrecval,aprreferencedetails,acnt);      
LBankExpNorwaySEPA_Domestic_SKIPROW1:;
    end;
    for (i=0;i<acnt;i=i+1) begin
      VEr.Code = aprvecode[i];
      ReadFirstMain(VEr,1,true);
      Bankr.Code = VEr.AccOperator;
      ReadFirstMain(Bankr,1,true);

      ExportPlainXml("<CdtTrfTxInf>",1);

      ExportPlainXml("<PmtId>",2);    
      //ExportTagXml("InstrId",OPr.SerNr,3); Swedbank does not accept both InstrId and PmtInfId filled in.
      ExportTagXml("EndToEndId",OPr.SerNr & "-" & i+1,3);  
      ExportPlainXml("</PmtId>",2);
      
      ExportPlainXml("<Amt>",2);
      if (nonblank(aprreccur[i])) then begin
        ExportAttributeTagXml("InstdAmt",ValToString(aprrecval[i],M4Val,"",".",0),"Ccy",aprreccur[i],3);
      end else begin
        if (nonblank(BCb.BaseCur1)) then begin
          ExportAttributeTagXml("InstdAmt",ValToString(aprrecval[i],M4Val,"",".",0),"Ccy",BCb.BaseCur1,3);
        end else begin
          ExportAttributeTagXml("InstdAmt",ValToString(aprrecval[i],M4Val,"",".",0),"Ccy","EUR",3);
        end;
      end;
      ExportPlainXml("</Amt>",2);
      StripSpace(bankacc,aprbankacc[i]);
      if (ValidateIBAN(bankacc)) then begin
        country = Left(bankacc,2);
      end else begin
        if(nonblank(Bankr.CountryCode)) then begin
          country = Bankr.CountryCode;
        end else begin
          if(nonblank(VEr.CountryCode)) then begin
            country = VEr.CountryCode;
          end;
        end;
      end;
      if(aprbankcur[i]!="EUR") then begin
        if (nonblank(Bankr.ExchangeRateContract)) then begin
          ExportPlainXml("<XchgRateInf>",2);
          ExportTagXml("CtrctId",Bankr.ExchangeRateContract,3);
          ExportPlainXml("</XchgRateInf>",2);
        end;
      end;
      if (ForeignPaymf) or (left(CYb.Bank2,2)!=country) then begin
        if (nonblank(Bankr.SWIFT)) then begin
          ExportPlainXml("<CdtrAgt>",2);
          ExportPlainXml("<FinInstnId>",3);
          ExportTagXml("BIC",Bankr.SWIFT,4);
          ExportTagXml("Nm",Bankr.Name,4);  
          ExportPlainXml("</FinInstnId>",3);
          ExportPlainXml("</CdtrAgt>",2);
        end;
      end;
      ExportPlainXml("<Cdtr>",2);
      ExportTagXml("Nm",ConvertXmlString(VEr.Name,false),3);
      if (nonblank(VEr.InvAddr1) and nonblank(VEr.InvAddr2)) then begin
        ExportPlainXml("<PstlAdr>",3);
        ExportTagXml("Ctry",country,4);
        ExportTagXml("AdrLine",ConvertXmlString(VEr.InvAddr1,false),4);  
        ExportTagXml("AdrLine",ConvertXmlString(VEr.InvAddr2,false),4);  
        ExportPlainXml("</PstlAdr>",3);
      end;
      ExportPlainXml("</Cdtr>",2);

      ExportPlainXml("<CdtrAcct>",2);
      ExportPlainXml("<Id>",3);
      if (ValidateIBAN(bankacc)) then begin
        ExportTagXml("IBAN",bankacc,4);
      end else begin
        ExportPlainXml("<Othr>",4);
        ExportTagXml("Id",aprbankacc[i],5);
        ExportPlainXml("</Othr>",4);
      end;
      ExportPlainXml("</Id>",3);
      ExportPlainXml("</CdtrAcct>",2);

      if (ForeignPaymf) or (CYb.CountryCode!=country) then begin
        ExportPlainXml("<RgltryRptg>",2);
        ExportPlainXml("<Dtls>",3);
        ExportTagXml("Ctry",country,4);  
        ExportTagXml("Cd","999",4);  
        ExportPlainXml("</Dtls>",3);
        ExportPlainXml("</RgltryRptg>",2);
      end;
      
      printRef = false;
      ExportPlainXml("<RmtInf>",2);
      if ((ForeignPaymf) or (left(CYb.Bank2,2)!=country)) and (Bankr.Sorting == "Foreign") then begin
        tstr = "Invoice:" & left(aprreference[i],122);
        ExportTagXml("Ustrd",left(tstr,140),3);
      end else begin
        if ((ForeignPaymf) or (left(CYb.Bank2,2)!=country)) and (Bankr.Sorting != "Foreign") then begin
          if (nonblank(aprreferencedetails[i])) then begin
            printRef = true;
          end;
        end;
        if (!printRef) then begin
          tstr = USetStr(16668);
          if (nonblank(aprreferencedetails[i])) then begin
            tstr = tstr & left(aprreference[i],122-len(aprreferencedetails[i]));
            ExportTagXml("Ustrd",left(tstr,140),3);    
          end else begin
            tstr = tstr & aprreference[i];
            ExportTagXml("Ustrd",left(tstr,140),3);  
          end;
        end;
        if (nonblank(aprreferencedetails[i])) then begin
          ExportPlainXml("<Strd>",3);
          ExportPlainXml("<CdtrRefInf>",4);
          ExportPlainXml("<Tp>",5);
          ExportPlainXml("<CdOrPrtry>",6);
          ExportTagXml("Cd","SCOR",7);  
          ExportPlainXml("</CdOrPrtry>",6);  
          ExportPlainXml("</Tp>",5);  
          ExportTagXml("Ref",aprreferencedetails[i],5);          
          ExportPlainXml("</CdtrRefInf>",4);
          ExportPlainXml("</Strd>",3);       
        end;
      end;
      ExportPlainXml("</RmtInf>",2);
      
      ExportPlainXml("</CdtTrfTxInf>",1);
    end;
    
  end else begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      If (OPrw.ovst!=0) or (OPrw.stp!=1) Then Begin
        goto LBankExpNorwaySEPA_Domestic_SKIPROW2;
      end;
      VEr.Code = OPrw.VECode;
      ReadFirstMain(VEr,1,true);
      Bankr.Code = VEr.AccOperator;
      ReadFirstMain(Bankr,1,true);
      VIr.SerNr = OPrw.VISerNr;
      ReadFirstMain(VIr,1,true);
      ExportPlainXml("<CdtTrfTxInf>",1);
      ExportPlainXml("<PmtId>",2);    
      //ExportTagXml("InstrId",OPr.SerNr,3);//Swedbank does not accept both InstrId and PmtInfId filled in.
      ExportTagXml("EndToEndId",OPr.SerNr & "-" & i+1,3);  
      ExportPlainXml("</PmtId>",2);
      ExportPlainXml("<Amt>",2);
      if (nonblank(OPrw.RecCurncy)) then begin
        ExportAttributeTagXml("InstdAmt",ValToString(OPrw.RecVal,M4Val,"",".",0),"Ccy",OPrw.RecCurncy,3);
      end else begin
        if (nonblank(BCb.BaseCur1)) then begin
          ExportAttributeTagXml("InstdAmt",ValToString(OPrw.RecVal,M4Val,"",".",0),"Ccy",BCb.BaseCur1,3);
        end else begin
          ExportAttributeTagXml("InstdAmt",ValToString(OPrw.RecVal,M4Val,"",".",0),"Ccy","EUR",3);
        end;
      end;
      ExportPlainXml("</Amt>",2);
      if(OPrw.BankCurncy!="EUR") then begin
        if (nonblank(Bankr.ExchangeRateContract)) then begin
          ExportPlainXml("<XchgRateInf>",2);
          ExportTagXml("CtrctId",Bankr.ExchangeRateContract,3);
          ExportPlainXml("</XchgRateInf>",2);
        end;
      end;
      if (ForeignPaymf) or (left(CYb.Bank2,2)!=country) then begin
        if (nonblank(Bankr.SWIFT)) then begin
          ExportPlainXml("<CdtrAgt>",2);
          ExportPlainXml("<FinInstnId>",3);
          ExportTagXml("BIC",Bankr.SWIFT,4);  
          ExportPlainXml("</FinInstnId>",3);
          ExportPlainXml("</CdtrAgt>",2);
        end;
      end;
      tstr = OPrw.BankAcc;
      if (blank(tstr)) then begin
        tstr = VEr.IBANCode;
      end;
      if (blank(tstr)) then begin
        tstr = VEr.BankAccount;
      end;
      if (blank(tstr)) then begin
        tstr = VEr.Bank;
      end;
      StripSpace(bankacc,tstr);
      if (ValidateIBAN(bankacc)) then begin
        country = Left(bankacc,2);
      end else begin
        if(nonblank(Bankr.CountryCode)) then begin
          country = Bankr.CountryCode;
        end else begin
          if(nonblank(VEr.CountryCode)) then begin
            country = VEr.CountryCode;
          end;
        end;
      end;
      ExportPlainXml("<Cdtr>",2);
      ExportTagXml("Nm",ConvertXmlString(VEr.Name,false),3); 
      if(nonblank(VEr.InvAddr1) and nonblank(VEr.InvAddr2)) then begin
        ExportPlainXml("<PstlAdr>",3);
        ExportTagXml("Ctry",country,4);
        ExportTagXml("AdrLine",ConvertXmlString(VEr.InvAddr1,false),4);  
        ExportTagXml("AdrLine",ConvertXmlString(VEr.InvAddr2,false),4);  
        ExportPlainXml("</PstlAdr>",3);
      end;
      ExportPlainXml("</Cdtr>",2);

      ExportPlainXml("<CdtrAcct>",2);
      ExportPlainXml("<Id>",3);
      if (ValidateIBAN(bankacc)) then begin
        ExportTagXml("IBAN",bankacc,4);  
      end else begin
        ExportPlainXml("<Othr>",4);
        ExportTagXml("Id",tstr,5);
        ExportPlainXml("</Othr>",4);
      end;
      ExportPlainXml("</Id>",3);
      ExportPlainXml("</CdtrAcct>",2);

      if (ForeignPaymf) or (left(CYb.Bank2,2)!=country) then begin
        ExportPlainXml("<RgltryRptg>",2);
        ExportPlainXml("<Dtls>",3);
        ExportTagXml("Ctry",country,4);  
        ExportTagXml("Cd","999",4);  
        ExportPlainXml("</Dtls>",3);
        ExportPlainXml("</RgltryRptg>",2);
      end;
      
      printRef = false;
      refstr = VIr.InvoiceNr;
      if (blank(refstr)) then begin
        refstr = "TRANSFER";
      end;
      tstr = OPrw.BankRefStr;
      
      ExportPlainXml("<RmtInf>",2);

      if ((ForeignPaymf) or (left(CYb.Bank2,2)!=country)) and (Bankr.Sorting == "Foreign") then begin
        tstr1 = "Invoice:" & left(refstr,122);
        ExportTagXml("Ustrd",left(tstr1,140),3);    
      end else begin
//        if ((ForeignPaymf) or (left(CYb.Bank2,2)!=country)) and (Bankr.Sorting != "Foreign") then begin
          if (nonblank(tstr)) then begin
            printRef = true;
          end;
//        end else begin
        
//        end;
        if (!printRef) then begin
          refstr = USetStr(16668) & refstr;
          if (nonblank(tstr)) then begin
            tstr1 = left(refstr,(130-len(tstr)));
            ExportTagXml("Ustrd",left(tstr1,140),3);  
          end else begin
            tstr1 = refstr;
            ExportTagXml("Ustrd",left(tstr1,140),3); 
          end;
        end;
        if (nonblank(tstr)) then begin
          ExportPlainXml("<Strd>",3);
          ExportPlainXml("<CdtrRefInf>",4);
          ExportPlainXml("<Tp>",5);
          ExportPlainXml("<CdOrPrtry>",6);
          ExportTagXml("Cd","SCOR",7);
          ExportPlainXml("</CdOrPrtry>",6);  
          ExportPlainXml("</Tp>",5);  
          ExportTagXml("Ref",tstr,5);   
          ExportPlainXml("</CdtrRefInf>",4);
          ExportPlainXml("</Strd>",3);
        end;      
      end;      
      ExportPlainXml("</RmtInf>",2);
      
      ExportPlainXml("</CdtTrfTxInf>",1);
LBankExpNorwaySEPA_Domestic_SKIPROW2:;    
    end;
  end;
  BankExpNorwaySEPA_Domestic_Footer;
LBankExpNorwaySEPA_Domestic_SKIPOP:;
  return;
end;
