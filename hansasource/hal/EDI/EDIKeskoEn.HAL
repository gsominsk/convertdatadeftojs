external updating procedure UpdateFileNr();external procedure KeskoExportUNH(LongInt,var string,var Integer);external procedure KeskoExportBGM(record EDIIVVc,var string,var Integer);external procedure KeskoExportDTM(Date,LongInt,Integer,var string,var Integer);external procedure KeskoExportRFF(record EDIIVVc,Integer,var string,var Integer);external procedure KeskoExportNAD(record EDIIVVc,Integer,var string,var Integer);external procedure KeskoExportCUX(record EDIIVVc,var string,var Integer);external procedure KeskoExportPAT(record EDIIVVc,Integer,var string,var Integer);external procedure KeskoExportMOA(val,string,Integer,var string,var Integer);external procedure KeskoExportLIN(record INVc,Integer,var string,var Integer);external procedure KeskoExportPIA(record INVc,var string,var Integer);external procedure KeskoExportIMD(record INVc,var string,var Integer);external procedure KeskoExportQTY(record INVc,Integer,val,var string,var Integer);external procedure KeskoExportPRI(val,var string,var Integer);external procedure KeskoExportTAX(Integer,string,var string,var Integer);external procedure KeskoExportUNS(var string,var Integer);external procedure KeskoExportPCD(val,var string,var Integer);external procedure KeskoAddStringToexpstr(string,var string);external procedure M4PadString(string,Integer,string,Boolean,var string);external procedure KeskoNewLine(var string,var Integer);external procedure KeskoExportFTX(record EDIIVVc,Integer,var Integer);external procedure KeskoExportUNZ(LongInt,string);external procedure KeskoExportALC(record EDIIVVc,var string,var Integer,Integer);external procedure CalcSum(val,val,val,val,var val,Integer);function val GetCPMVal(string calcprice)BEGIN  val res;  record CPMVc CPMr;  row CPMVc CPMrw;    CPMr.Code = calcprice;  if (ReadFirstMain(CPMr,1,true)) then begin    if (MatRowCnt(CPMr)>0) then begin      MatRowGet(CPMr,0,CPMrw);      res = CPMrw.Val;    end;  end;  GetCPMVal = res;  RETURN;END;procedure CreateMessageIdentifier(var string res)BEGIN    res = "";  res = res & CurrentDate;  res = res & CurrentTime;  RETURN;END;procedure KeskoExportUNT(LongInt cnt,var string expstr,var Integer rowcnt)BEGIN  string 255 t2;    KeskoAddStringToexpstr("UNT",expstr);  KeskoAddStringToexpstr("01",expstr);  t2 = rowcnt + 1;  M4PadString(t2,6,"0",true,t2);            KeskoAddStringToexpstr(t2,expstr);  t2 = cnt;  M4PadString(t2,14," ",false,t2);            KeskoAddStringToexpstr(t2,expstr);  NewLine;  RETURN;END;procedure KeskoExportUNB(string custcode,var string expstr,string messident,var Integer rowcnt)BEGIN  string 255 tstr,t2;  record CYBlock CYRec;  record CUVc CUr;  Boolean cufoundf;    BlockLoad(CYRec);     CUr.Code = custcode;  cufoundf = ReadFirstMain(CUr,1,true);     KeskoAddStringToexpstr("UNB",expstr);  KeskoAddStringToexpstr("01",expstr);  tstr = StripNonDigits(CYRec.ANACode);  M4PadString(tstr,35," ",false,t2);  KeskoAddStringToexpstr(t2,expstr);//  tstr = StripNonDigits(CUr.ANACode);  tstr = "003701098628";  M4PadString(tstr,35," ",false,t2);  KeskoAddStringToexpstr(t2,expstr);  M4PadString(messident,14," ",false,t2);  KeskoAddStringToexpstr(t2,expstr);  KeskoNewLine(expstr,rowcnt);  RETURN;END;procedure FileExtension(var LongInt FileExtNr,var string res)BEGIN  string 255 tstr;    tstr = FileExtNr;  if (len(tstr)==1) then begin    res = ".00";    res = res & tstr;  end;  if (len(tstr)==2) then begin    res = ".0";    res = res & tstr;  end;  if (len(tstr)==3) then begin    res = ".";    res = res & tstr;  end;  if (len(tstr)>3) then begin    FileExtNr = 1;    res = ".001";  end;  RETURN;END;  procedure ExportFRAMEBegin(record CUVc CUr, record CYBlock CYRec,LongInt lastfilenr)BEGIN  string 255 tstr;    ExportPadString("'''ED2'''",9," ",false);  ExportPadString("FILE",4," ",false);  ExportPadString(":",1," ",false);  ExportPadString("0037",4," ",false);   tstr = StripNonDigits(CYRec.OrgNr);  ExportPadString(tstr,8," ",false);  ExportPadString(":",1," ",false);  ExportPadString("TAV",3," ",false);  ExportPadString("'",1," ",false);    ExportPadString("FILE",4," ",false);  ExportPadString(":",1," ",false);  ExportPadString("0037",4," ",false);  tstr = StripNonDigits(CUr.ANACode);    ExportPadString(tstr,8," ",false);  ExportPadString(":",1," ",false);  ExportPadString("TAV",3," ",false);  ExportPadString("'",1," ",false);    ExportPadString("KESKO026510",11," ",false);  ExportPadString("'1'",3," ",false);    ExportPadString("NRQ",3," ",false);  ExportPadString(":",1," ",false);  ExportPadString("1",1," ",false);    ExportPadString("'''",3," ",false);    NewLine;   RETURN;END;  procedure ExportFRAMEEnd()BEGIN  ExportPadString("'''EOF'''",9," ",false);  ExportPadString("452'",4," ",false);  RETURN;END;  procedure ExportFileStart(string custcode,var string cuanacode,LongInt lastfilenr,var string expstr)BEGIN  record CUVc CUr;  record CYBlock CYRec;  record EDIFileBlock EDIRec;  string 255 tstr,t2;  Boolean cufoundf;    BlockLoad(CYRec);    BlockLoad(EDIRec);    CUr.Code = custcode;  cufoundf  = ReadFirstMain(CUr,1,true);  ExportFRAMEBegin(CUr,CYRec,lastfilenr);  ExportPadString("UNA",3," ",false);    ExportPadString(":+,? '",6," ",false);      ExportPadString("UNB",3," ",false);    ExportPadString("+",1," ",false);    ExportPadString("UNOZ",4," ",false);    ExportPadString(":",1," ",false);  ExportPadString("1",1," ",false);  ExportPadString("+",1," ",false);    ExportPadString("0037",4," ",false);  tstr = StripNonDigits(CYRec.OrgNr);              ExportPadString(tstr,8," ",false);  ExportPadString(":",1," ",false);    ExportPadString("30",4," ",false);  ExportPadString("+",1," ",false);    ExportPadString("0037",4," ",false);  tstr = StripNonDigits(CUr.ANACode);              ExportPadString(tstr,8," ",false);  ExportPadString(":",1," ",false);    ExportPadString("30",4," ",false);  ExportPadString("+",1," ",false);    tstr = DateToString(CurrentDate,"YYMMDD");  ExportPadString(tstr,6," ",false);   ExportPadString(":",1," ",false);       tstr = StripNonDigits("" & CurrentTime);  ExportPadString(tstr,4," ",false);  ExportPadString("+",1," ",false);      tstr = DateToString(CurrentDate,"YYMMDD");  ExportPadString(tstr,6," ",false);     tstr = StripNonDigits(CUr.ANACode);              ExportPadString(tstr,8," ",false);     ExportPadString("++",2," ",false);     NewLine;  cuanacode = CUr.ANACode;  expstr = "INVOIC001";  expstr = expstr & "+++";  expstr = expstr & "UN+1'";    RETURN;END;updating function LongInt ExportBeginKesko(string custcode,var string cuanacode,var string expstr) BEGIN  LongInt lastfilenr;  string 255 tstr,t2;  LongInt res,l;  record EDIFileBlock EDIRec;         BlockLoad(EDIRec);  l = EDIRec.FileExtNr;  res = -1;  lastfilenr = EDIRec.LastFileNr + 1;  if (EDIRec.ExportFileFolder=="") then begin    tstr = "EDI\\import";  end else begin    tstr = EDIRec.ExportFileFolder & "\\INVKES";  end;  l = l + 1;  FileExtension(l,t2);  EDIRec.FileExtNr = l;  BlockStore(EDIRec);  tstr = tstr & t2;  if (nonblank(tstr)) then begin    CreateFile(tstr);//    ExportFileStart(custcode,cuanacode,lastfilenr,expstr);    res = lastfilenr;  end;    ExportBeginKesko = res;  RETURN;END;procedure FindOrderTotQty(record ORVc ORr,var val qty)BEGIN  row ORVc ORrw;  Integer i,rwcnt;    qty = 0;  rwcnt = MatRowCnt(ORr);  for (i=0;i<rwcnt;i=i+1) begin    MatRowGet(ORr,i,ORrw);    qty = ORrw.Quant + qty;  end;  RETURN;END;global updating procedure EDIKeskoEn(record RcVc RepSpec)BEGIN  record EDIIVVc IVr;  row EDIIVVc IVrw;  record INVc INr;  Boolean infoundf;  LongInt afr,ato;  LongInt batchnr,sercnt;  Integer i,rwcnt;  Integer rowcnt;  string 255 tstr,vatname,cuanacode,firstVATCode;  Boolean testf,found,headexpf,updatefilef,calcformf;  val vatv,vatprc,t,calcformprcv;  val TotSum,TotVatSum,DiscSum;  string 255 keystr,expstr,messident;  Integer keys,dummy;    if (blank(RepSpec.f2)) then begin goto L99; end;  CreateMessageIdentifier(messident);  sercnt = 1;  headexpf = false;  updatefilef = false;  rowcnt = 0;  afr = FirstInRange(RepSpec.f1,20);  ato = LastInRange(RepSpec.f1,20);  if (nonblank(RepSpec.f2)) then begin    IVr.CustCode = RepSpec.f2;    keystr = "CustCode";    keys = 2;  end else begin    keystr = "SerNr";    keys = 1;  end;  IVr.SerNr = afr;  found = true;  while (LoopKey(keystr,IVr,keys,found)) begin    testf = true;    if (nonblank(RepSpec.f2)) then begin      if (ato<>-1) then begin        if (IVr.SerNr>ato) then begin          testf = false;        end;        if (IVr.SerNr<afr) then begin         testf = false;         end;      end;      if (RepSpec.flags[1]==0) then begin        if (IVr.CustCode<>RepSpec.f2) then begin          found = false;                end;      end;      end else begin      if (ato<>-1) then begin        if (IVr.SerNr>ato) then begin          found = false;        end;      end;      end;/*        if (RepSpec.flags[1]==0) then begin      if (nonblank(RepSpec.f2)) then begin        if (IVr.CustCode<>RepSpec.f2) then begin          found = false;                end;      end;    end;    if (RepSpec.flags[1]==1) then begin      if (nonblank(RepSpec.f2)) then begin        if (IVr.OrgCust<>RepSpec.f2) then begin          found = false;                end;      end;    end;*/        If (IVr.Invalid == 1) then begin      testf = false;    end;    if (IVr.Prntdf<>0 and RepSpec.flags[0]==0) then begin      testf = false;       end;    if (DateInRange(IVr.TransDate,RepSpec.sStartDate,Repspec.sEndDate)==false) then begin      testf = false;    end;    if (RepSpec.FirstVer<>-1) then begin      if (RepSpec.FirstVer<>IVr.BatchNr) then begin        testf = false;      end;    end;    if (found==false) then begin testf = false; end;    if (testf) then begin      if (headexpf==false) then begin        batchnr = ExportBeginKesko(RepSpec.f2,cuanacode,expstr);        if (batchnr==-1) then begin goto L99; end;            headexpf = true;       end;              KeskoExportUNB(RepSpec.f2,expstr,messident,dummy);//rowcnt should not be here likely      KeskoExportUNH(sercnt,expstr,rowcnt);// Start of each record      KeskoExportBGM(IVr,expstr,rowcnt);   // Invoice basic info      KeskoExportDTM(IVr.InvDate,0,1,expstr,rowcnt); // 3 Invoice Date      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin        KeskoExportFTX(IVr,1,rowcnt); // Credited Invoice Data      end else begin        KeskoExportRFF(IVr,1,expstr,rowcnt); // Customer Order Number      end;        KeskoExportDTM(IVr.TransDate,0,5,expstr,rowcnt); // 7 Trans Date       KeskoExportRFF(IVr,2,expstr,rowcnt); // Bank Reference      KeskoExportRFF(IVr,3,expstr,rowcnt); // Delivery Journal Number      KeskoExportNAD(IVr,1,expstr,rowcnt); // Customers Information      KeskoExportNAD(IVr,2,expstr,rowcnt); // Kesko Info      if (nonblank(IVr.OrgCust)) then begin        KeskoExportNAD(IVr,3,expstr,rowcnt); // Shop invoice info      end;        KeskoExportNAD(IVr,4,expstr,rowcnt); // Shop delivery info      KeskoExportCUX(IVr,expstr,rowcnt);   // Currency      KeskoExportPAT(IVr,1,expstr,rowcnt); // Payment Mode      KeskoExportDTM(IVr.PayDate,0,3,expstr,rowcnt); // 13 Due Date      KeskoExportPAT(IVr,2,expstr,rowcnt); // Cash Discount      KeskoExportDTM(IVr.InvDate,IVr.pdrdays,4,expstr,rowcnt); // 12 Discount Date      t = IVr.pdvrebt*IVr.Sum4;      t = t/100;      KeskoExportMOA(t,IVr.CurncyCode,3,expstr,rowcnt);      calcformf = false;      calcformprcv = blankval;      rwcnt = MatRowCnt(IVr);      for (i=0;i<rwcnt;i=i+1) begin        MatRowGet(IVr,i,IVrw);        INr.Code = IVrw.ArtCode;        infoundf = ReadFirstMain(INr,1,true);        if (nonblank(INr.CalcPrice)) then begin          calcformf = true;          calcformprcv = GetCPMVal(INr.CalcPrice);        end;      end;      DiscSum = 0;      firstVATCode = "";      rwcnt = MatRowCnt(IVr);      for (i=0;i<rwcnt;i=i+1) begin        MatRowGet(IVr,i,IVrw);        if (IVrw.stp!=1) and (IVrw.stp!=kInvoiceRowTypeVoid) then begin           goto LSKIPROW;        end;        INr.Code = IVrw.ArtCode;        infoundf = ReadFirstMain(INr,1,true);        if (infoundf==false) then begin          goto LSKIPROW;        end;                if (blank(INr.CalcPrice)) then begin                  KeskoExportLIN(INr,i+1,expstr,rowcnt);          KeskoExportPIA(INr,expstr,rowcnt);          KeskoExportIMD(INr,expstr,rowcnt);          KeskoExportQTY(INr,IVr.InvType,IVrw.Quant,expstr,rowcnt);          if ((IVrw.Quant==0) or (IVrw.Price!=0)) then begin            IVrw.Quant = 1.00;          end;          CalcSum(IVrw.Quant,IVrw.Price,0,calcformprcv,t,0);          KeskoExportMOA(IVrw.Sum,IVr.CurncyCode,1,expstr,rowcnt);//t          KeskoExportPRI(IVrw.Price,expstr,rowcnt);          KeskoExportTAX(IVr.InclVAT,IVrw.VATCode,expstr,rowcnt);          if (IVr.pdvrebt!=0) then begin            KeskoExportALC(IVr,expstr,rowcnt,1);            KeskoExportPCD(IVr.pdvrebt,expstr,rowcnt);          end;          if (calcformf) then begin            KeskoExportALC(IVr,expstr,rowcnt,2);            KeskoExportPCD(-calcformprcv,expstr,rowcnt);          end;          if (blank(firstVATCode)) then begin            firstVATCode = IVrw.VATCode;          end;          DiscSum = DiscSum + (IVrw.Quant*IVrw.Price-IVrw.Sum);        end else begin          DiscSum = DiscSum - IVrw.Sum;        end;  LSKIPROW:;          end;      if ((IVr.Prntdf==0) or (IVr.BatchNr!=batchnr)) then begin        IVr.Prntdf = 1;        if (IVr.BatchNr<>RepSpec.FirstVer) then begin          IVr.BatchNr = batchnr;          updatefilef = true;        end;          testf = RecordStore(IVr,true);       end;      KeskoExportUNS(expstr,rowcnt);            KeskoExportMOA(IVr.Sum4,IVr.CurncyCode,2,expstr,rowcnt);      KeskoExportTAX(IVr.InclVAT,firstVATCode,expstr,rowcnt);      KeskoExportMOA(IVr.Sum1,IVr.CurncyCode,4,expstr,rowcnt);      KeskoExportMOA(IVr.Sum3,IVr.CurncyCode,5,expstr,rowcnt);      KeskoExportUNT(sercnt,messident,rowcnt);      rowcnt = 0;      sercnt = sercnt + 1;    end;//testf  end;//while  KeskoExportUNZ(rowcnt,messident);//  ExportUNT(sercnt);  if (headexpf) then begin//    ExportFRAMEEnd;  end;  if (updatefilef) then begin    UpdateFileNr;  end;    CloseFile;L99:;      RETURN;END;  