external function val FindVAT(string,val,Integer,Integer);
external procedure ValToHALString(val,string,var string);
external procedure DateToString2(Date,var string,string,string,string);
external procedure RemoveCharacterFromString(var string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);

global
procedure ExportIRF(LongInt ivnr,Date ivtd)
BEGIN
  string 255 tstr;
  
  NewLine;
  ExportPadString("IRF ",4," ",false);  
  tstr = ivnr;
  ExportPadString(tstr,10,"0",true);
  ExportPadString(" ",6," ",false);    
  ExportPadString(" ",1," ",false);
  DateToString2(ivtd,tstr,"Y","M","D");
  ExportPadString(tstr,6," ",true);
  ExportPadString("",1," ",false);
  ExportPadString(tstr,6," ",true);    
  RETURN;
END;

global
procedure ExportTOT(val TotSum, val TotVatSum,LongInt invcnt)
BEGIN
  string 255 tstr;
  val t;
  Integer i;
  
  NewLine;
  ExportPadString("TOT ",4," ",false);
  ValToHALString(TotSum,"1",tstr);    
  ExportPadString(tstr,12," ",true);
  ExportPadString(" ",1," ",false);          
  ExportPadString(tstr,12," ",true);          
  ExportPadString(" ",1," ",false);          
  tstr = TotVatSum;
  ValToHALString(TotVatSum,"2",tstr);  
  ExportPadString(tstr,12," ",true);          
  ExportPadString(" ",1," ",false);   
  t = TotSum + TotVatSum;
  ValToHALString(t,"1",tstr);  
  ExportPadString(tstr,12," ",true);          
  ExportPadString(" ",1," ",false);          
  ExportPadString(tstr,12," ",true);          
  ExportPadString(" ",1," ",false);  
  tstr = invcnt;        
  ExportPadString(tstr,10," ",true);            
  RETURN;
END;

procedure DeltaExportHeader(string custcode,LongInt lastfilenr)
BEGIN
  string 255 tstr,datestr;
  record CUVc CUr;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  ExportPadString("Z",1," ",false);
  ExportPadString(CUr.ANACode,len(CUr.ANACode)," ",false);
  ExportPadString("INVLIV",6," ",false);  
  tstr = lastfilenr;
  ExportPadString(tstr,6,"0",true);
  DateToString2(CurrentDate,datestr,"Y","M","D");
  ExportPadString(datestr,len(datestr)," ",false);
  tstr = CurrentTime;
  RemoveCharacterFromString(tstr,":");
  tstr = tstr & "00";  
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString(datestr,len(datestr)," ",false);
  ExportPadString("INVFIL8T",8," ",false);  
  RETURN;
END;

procedure ExportHeader(string custcode,LongInt lastfilenr)
BEGIN
  string 255 tstr,datestr;
  record CUVc CUr;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  ExportPadString("0",1," ",false);
  ExportPadString(CUr.ANACode,len(CUr.ANACode)," ",false);
  ExportPadString("INVFIL",6," ",false);  
  tstr = lastfilenr;
  ExportPadString(tstr,6,"0",true);
  DateToString2(CurrentDate,datestr,"Y","M","D");
  ExportPadString(datestr,len(datestr)," ",false);
  tstr = CurrentTime;
  RemoveCharacterFromString(tstr,":");
  tstr = tstr & "00";  
  ExportPadString(tstr,len(tstr)," ",false);
  ExportPadString(datestr,len(datestr)," ",false);
  RETURN;
END;

procedure ExportSTL(var LongInt stlcnt,string vatcode,Integer ildcnt,val rowsum,val vatv,string vatprc)
BEGIN
  string 255 tstr;
  val t;
 
  NewLine;
  ExportPadString("STL ",4," ",false);    
  tstr = stlcnt;
  ExportPadString(tstr,4," ",true);
  ExportPadString(" ",1," ",false);     
  ExportPadString(" ",5," ",false);       
  ExportPadString(vatcode,1," ",false);
  ExportPadString(" ",1," ",false);       
  ExportPadString(vatprc,6," ",true);     
  ExportPadString(" ",1," ",false);       
  tstr = ildcnt;   
  ExportPadString(tstr,4," ",true); 
  ExportPadString(" ",1," ",false);      
  ValToHALString(rowsum,"1",tstr);
  ExportPadString(tstr,10," ",true);            
  ExportPadString(" ",1," ",false);       
  ExportPadString("0",10," ",true);     
  ExportPadString(" ",1," ",false);            
  ExportPadString("0",10," ",true);     
  ExportPadString(" ",1," ",false);            
  ExportPadString(" ",10," ",true);     
  ExportPadString(" ",1," ",false);               
  ExportPadString("0",10," ",true);   
  ExportPadString(" ",1," ",true);              
  ExportPadString(tstr,10," ",true);          
  ExportPadString(" ",1," ",true);              
  ExportPadString(" ",10," ",true);          
  ExportPadString(" ",1," ",true);              
  ExportPadString(tstr,10," ",true);            
  NewLine;
  ExportPadString("STLA",4," ",false); 
  ValToHALString(vatv,"1",tstr);
  ExportPadString(tstr,10," ",true);          
  ExportPadString(" ",1," ",true);              
  ValToHALString(rowsum,"1",tstr);
  ExportPadString(tstr,10," ",true);   
  ExportPadString(" ",1," ",true);              
  t = vatv + rowsum;       
  ValToHALString(t,"1",tstr);
  ExportPadString(tstr,10," ",true);            
  stlcnt = stlcnt + 1;  
  RETURN;
END;

global
procedure ExportSTLs(record SMVc SMr,var LongInt stlcnt,LongInt ildcnt)
BEGIN
  Integer i,rwcnt;
  row SMVc SMrw;
  
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    ExportSTL(stlcnt,SMrw.VATCode,ildcnt,SMrw.DebVal,SMrw.CredVal,SMrw.AccNumber);
  end;
  RETURN;
END;

procedure ExportVRS(var LongInt vrscnt,string vatcode,val rowsum,val vatv,string vatprc)
BEGIN
  string 255 tstr;
  val t;
  
  NewLine;
  ExportPadString("VRS ",4," ",false);
  tstr = vrscnt;
  ExportPadString(tstr,4," ",true);
  ExportPadString(" ",1," ",false); 
  ExportPadString(vatcode,1," ",false);          
  ExportPadString(" ",1," ",false);              
  ExportPadString(vatprc,6," ",true);          
  ExportPadString(" ",1," ",false);  
  ValToHALString(rowsum,"1",tstr);          
  ExportPadString(tstr,10," ",true);            
  ExportPadString(" ",1," ",false);          
  ExportPadString(tstr,10," ",true);          
  ExportPadString(" ",1," ",false);          
  ValToHALString(vatv,"1",tstr);  
  ExportPadString(tstr,10," ",true);          
  ExportPadString(" ",1," ",false);   
  t = vatv + rowsum;       
  ValToHALString(t,"1",tstr);         
  ExportPadString(tstr,10," ",true);            
  ExportPadString(" ",1," ",false);          
  ExportPadString(tstr,10," ",true);          
  vrscnt = vrscnt + 1;     
  RETURN;
END;

global
procedure ExportVRSs(record SMVc SMTotr)
BEGIN
  LongInt vrscnt;
  Integer i,rwcnt;
  row SMVc SMrw;
  
  vrscnt = 1;
  rwcnt = MatRowCnt(SMTotr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMTotr,i,SMrw);
    ExportVRS(vrscnt,SMrw.VATCode,SMrw.DebVal,SMrw.CredVal,SMrw.AccNumber)
  end;  
  RETURN;
END;

global
procedure  NewSTLInfo(var record SMVc SMr,string VATCode,val Price,val Quant,Integer inclvat,val vatprc)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  Boolean foundf;
  val pricev,vatv;
  string 255 tstr;
  
  pricev = Price * Quant;
  vatv = FindVAT(VATCode,pricev,inclvat,0);  
  foundf = false;
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (SMrw.VATCode==VATCode) then begin
      SMrw.DebVal = SMrw.DebVal + pricev;
      SMrw.CredVal = SMrw.CredVal + vatv;        
      MatRowPut(SMr,i,SMrw);  
      foundf = true;
      i = rwcnt;
    end;
  end;
  if (foundf==false) then begin
    SMrw.VATCode = VATCode;
    ValToHALString(vatprc,"2",tstr);
    SMrw.AccNumber = tstr;
    SMrw.DebVal = pricev;
    SMrw.CredVal = vatv;    
    MatRowPut(SMr,rwcnt,SMrw);  
  end;
  RETURN;
END;

procedure ExportSDT()
BEGIN
  record CYBlock CYRec;
  Boolean testf;
  
  BlockLoad(CYRec);
  NewLine;    
  ExportPadString("SDT ",4," ",false);
  ExportPadString(CYRec.ANACode,13," ",true);
  ExportPadString(" ",1," ",false);
  ExportPadString(" ",17," ",false);/*where from?*/
  ExportPadString(" ",1," ",false);
  ExportPadString(CYRec.CompName,40," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString(CYRec.Addr0,35," ",false);
  NewLine;
  ExportPadString("SDTA",4," ",false);  
  ExportPadString(CYRec.Addr1,35," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString(CYRec.Addr2,35," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString(" ",35," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString(CYRec.HomeCommunity,8," ",false);
  NewLine;    
  ExportPadString("SDTB",4," ",false);  
  ExportPadString(CYRec.VATNr,9," ",true);
  RETURN;
END;

procedure ExportTYP()
BEGIN
  NewLine;
  ExportPadString("TYP ",4," ",false);
  ExportPadString("0700",4," ",true);
  ExportPadString(" ",1," ",false);
  ExportPadString("INVOICES",8," ",false);  
  RETURN;
END;

procedure ExportCDT(string custcode,var string cuanacode)
BEGIN
  record CUVc CUr;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.InvoiceToCode)) then begin
      CUr.Code = CUr.InvoiceToCode;
      if (ReadFirstMain(CUr,1,true)) then begin
      end;
    end;  
  end;
  NewLine;
  ExportPadString("CDT ",4," ",false);
  ExportPadString(CUr.ANACode,13," ",true);
  ExportPadString(" ",1," ",false);  
  ExportPadString(CUr.RegNr2,17," ",false);/*customers code allocated by suplier*/
  ExportPadString(" ",1," ",false);  
  ExportPadString(CUr.Name,40," ",false);
  ExportPadString(" ",1," ",false);  
  ExportPadString(CUr.InvAddr0,35," ",false);
  NewLine;
  ExportPadString("CDTA",4," ",false);  
  ExportPadString(CUr.InvAddr1,35," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString(CUr.InvAddr2,35," ",false);
  ExportPadString(" ",1," ",false);
  ExportPadString("",35," ",false);
  ExportPadString(" ",1," ",false);  
  ExportPadString(CUr.Sorting,8," ",false);/*PostCode*/
  NewLine;
  ExportPadString("CDTB",4," ",false);  
  ExportPadString(CUr.VATNr,9," ",true);
  ExportPadString(" ",17," ",false);
  cuanacode = CUr.ANACode;
  RETURN;
END;

procedure ExportFIL(record EDIFileBlock EDIRec)
BEGIN
  string 255 tstr;
  Date td;
  
  NewLine;
  ExportPadString("FIL ",4," ",true);
  tstr = EDIRec.LastFileNr;
  ExportPadString(tstr,len(tstr),"0",true);
  ExportPadString(" ",1," ",true);
  ExportPadString("1",4,"0",true);
  ExportPadString(" ",1," ",true);
  td = CurrentDate;
  DateToString2(td,tstr,"Y","M","D");
  ExportPadString(tstr,6," ",true);    
  RETURN;
END;

procedure ExportFDT(Date ed)
BEGIN
  string 255 tstr;
  
  NewLine;
  ExportPadString("FDT ",4," ",true);
  DateToString2(ed,tstr,"Y","M","D");  
  ExportPadString(tstr,6," ",true);
  ExportPadString(" ",1," ",true);
  ExportPadString(tstr,6," ",true);    
  RETURN;
END;

global
updating function LongInt ExportBegin(string custcode,var string cuanacode) 
BEGIN
  LongInt lastfilenr;
  string 255 tstr,t2;
  LongInt res;
  record EDIFileBlock EDIRec;
        
  BlockLoad(EDIRec);  
  res = -1;
  lastfilenr = EDIRec.LastFileNr + 1;
  tstr = lastfilenr;
  M4PadString(tstr,6,"0",true,t2);
  tstr = "EDI\\$";
  tstr = tstr & t2;
  tstr = tstr & ".tei";
  if (nonblank(tstr)) then begin
    CreateFile(tstr); // there is no return value anymore 
    ExportHeader(custcode,lastfilenr);
    ExportTYP;
    ExportSDT;
    ExportCDT(custcode,cuanacode);
    ExportFIL(EDIRec);
    ExportFDT(CurrentDate); 
    res = lastfilenr;
  end;  
  ExportBegin = res;
  RETURN;
END;

global
function LongInt DeltaExportBegin(string custcode,var string cuanacode) 
BEGIN
  LongInt lastfilenr;
  string 255 tstr,t2;
  LongInt res;
  record EDIFileBlock EDIRec;
        
  BlockLoad(EDIRec);  
  res = -1;
  lastfilenr = EDIRec.LastFileNr + 1;
  tstr = lastfilenr;
  M4PadString(tstr,6,"0",true,t2);
  tstr = "EDI\\$";
  tstr = tstr & t2;
  tstr = tstr & ".BQI";
  if (nonblank(tstr)) then begin
    CreateFile(tstr); /* there is no return value anymore */
    DeltaExportHeader(custcode,lastfilenr);
    ExportTYP;
    ExportSDT;
    ExportCDT(custcode,cuanacode);
    ExportFIL(EDIRec);
    ExportFDT(CurrentDate); 
    res = lastfilenr;
  end;  
  DeltaExportBegin = res;
  RETURN;
END;
