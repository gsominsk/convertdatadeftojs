//external procedure UpdateFileNrDK();
external procedure HANCOMExportUNH(LongInt,var Integer);
external procedure HANCOMExportBGM(record EDIIVVc,var Integer);
external procedure HANCOMExportDTM(Date,LongInt,Integer,var Integer);
external procedure HANCOMExportRFF(record EDIIVVc,Integer,var Integer);
external procedure HANCOMExportNAD(record EDIIVVc,Integer,var Integer);
external procedure HANCOMExportCUX(record EDIIVVc,var Integer);
external procedure HANCOMExportPAT(record EDIIVVc,Integer,var Integer);
external procedure HANCOMExportLIN(record INVc,Integer,var Integer);
external procedure HANCOMExportPIA(record INVc,var Integer);
external procedure HANCOMExportIMD(record INVc,var Integer);
external procedure HANCOMExportQTY(record INVc,Integer,val,var Integer);
external procedure HANCOMExportMOA(val,string,Integer,var Integer);
external procedure HANCOMExportPRI(val,var Integer);
external procedure HANCOMExportTAX(Integer,string,var Integer);
external procedure HANCOMExportUNS(var Integer);
external procedure HANCOMExportUNT(LongInt,var Integer);
external procedure HANCOMExportPCD(record EDIIVVc,var Integer);
external procedure HANCOMExportFTX(record EDIIVVc,var Integer);
external procedure HANCOMExportUNB(record EDIIVVc,string,var Integer);
external procedure HANCOMExportUNZ(LongInt,string,var Integer);

/*
global
procedure UpdateFileNrDK()
BEGIN
  record EDIFileBlock EDIr;
  Boolean testf;
  LongInt l;
  
  BlockLoad(EDIr);    
  l = EDIr.LastFileNr + 1;
  EDIr.LastFileNr = l;
  BlockStore(EDIr);  
  RETURN;
END;  
*/

procedure CreateMessageIdentifier(var string res)
BEGIN  
  res = "";
  res = res & CurrentDate;
  res = res & CurrentTime;
  RETURN;
END;

procedure FileExtension(var LongInt FileExtNr,var string res)
BEGIN
  string 255 tstr;
  
  tstr = FileExtNr;
  if (len(tstr)==1) then begin
    res = ".00";
    res = res & tstr;
  end;
  if (len(tstr)==2) then begin
    res = ".0";
    res = res & tstr;
  end;
  if (len(tstr)==3) then begin
    res = ".";
    res = res & tstr;
  end;
  if (len(tstr)>3) then begin
    FileExtNr = 1;
    res = ".001";
  end;
  RETURN;
END;
  
updating function 
LongInt ExportBeginHANCOM(string custcode,var string cuanacode) 
BEGIN
  LongInt res,l;
  string 255 tstr,t2;
  LongInt lastfilenr;
  record EDIFileBlock EDIRec;
       
  BlockLoad(EDIRec);
  l = EDIRec.FileExtNr;
  res = -1;
  lastfilenr = EDIRec.LastFileNr + 1;
  if (EDIRec.ExportFileFolder=="") then begin
    tstr = "EDI\\import";
  end else begin
    tstr = EDIRec.ExportFileFolder & "\\INVINT";
  end;
  l = l + 1;
  FileExtension(l,t2);
  EDIRec.FileExtNr = l;
  BlockStore(EDIRec);
  tstr = tstr & t2;
  if (nonblank(tstr)) then begin
    //CreateFile(tstr);
    CreateFile("TEST.txt");
//    ExportFileStart(custcode,cuanacode,lastfilenr);
    res = lastfilenr;
  end;  
  ExportBeginHANCOM = res;
  RETURN;
END;
  
procedure ExportFRAMEBegin(record CUVc CUr, record CYBlock CYRec,LongInt lastfilenr)
BEGIN
  string 255 tstr;
  
  ExportPadString("'''ED2'''",9," ",false);
  ExportPadString("SYSNET",6," ",false);
  ExportPadString(":",1," ",false);
  ExportPadString(CYRec.OrgNr,7," ",false);
  ExportPadString(":",1," ",false);
  ExportPadString("LYT",3," ",false);
  ExportPadString("'",1," ",false);  
  ExportPadString("SYSNET",6," ",false);
  ExportPadString(":",1," ",false);
  ExportPadString(CUr.RegNr1,7," ",false);
  ExportPadString(":",1," ",false);
  ExportPadString("LYT",3," ",false);
  ExportPadString("'",1," ",false);
  tstr = lastfilenr;
  ExportPadString(tstr,7," ",false);
  ExportPadString("'",1," ",false);
  ExportPadString("STX",3," ",false);
  ExportPadString(":",1," ",false);
  ExportPadString("EDIFACT",7," ",false);
  ExportPadString("'",1," ",false);
  ExportPadString("TYP",3," ",false);
  ExportPadString(":",1," ",false);
  ExportPadString("TILAUS",6," ",false);
  ExportPadString("'",1," ",false);
  ExportPadString("NR",2," ",false);//80
//  NewLine;
  ExportPadString("Q",1," ",false);
  ExportPadString(":",1," ",false);
  ExportPadString("0",1," ",false);
  ExportPadString("'''",3," ",false);   
  NewLine; 
  RETURN;
END;
  
procedure ExportFRAMEEnd()
BEGIN
  ExportPadString("'''EOF'''",9," ",false);
  ExportPadString("452'",4," ",false);
  RETURN;
END;
  
procedure ExportFileStart(string custcode,var string cuanacode,LongInt lastfilenr)
BEGIN
  record CUVc CUr;
  record CYBlock CYRec;
  record EDIFileBlock EDIRec;
  string 255 tstr;
  Boolean cufoundf;
  
  BlockLoad(CYRec);  
  BlockLoad(EDIRec);  
  CUr.Code = custcode;
  cufoundf  = ReadFirstMain(CUr,1,true);
  ExportFRAMEBegin(CUr,CYRec,lastfilenr);
  
  ExportPadString("UNB",3," ",false);  
  ExportPadString("11",2," ",false);  
  ExportPadString("UNOC",4," ",false);  
  ExportPadString("1",1," ",false);
  ExportPadString("0037",4," ",false);
  tstr = StripNonDigits(CYRec.OrgNr);          
  ExportPadString(tstr,31," ",false);
  ExportPadString("30",4," ",false);
  ExportPadString("",14," ",false);
  if (EDIRec.Live==1) then begin//  ExportPadString("003705655815",35," ",false);
    ExportPadString(EDIRec.LiveCode,17," ",false);//80
//    NewLine;
    ExportPadString(EDIRec.LiveCode,18," ",false);
  end else begin
    ExportPadString(EDIRec.TestCode,17," ",false);
//    NewLine;
    ExportPadString(EDIRec.TestCode,18," ",false);
  end;  
  ExportPadString("30",4," ",false);
  ExportPadString("",14," ",false);
  tstr = DateToString(CurrentDate,"YYMMDD");
  ExportPadString(tstr,6," ",false);  
  tstr = StripNonDigits("" & CurrentTime);
  ExportPadString(tstr,4," ",false);
  ExportPadString("" & lastfilenr,14," ",false);
  cuanacode = CUr.ANACode;
  ExportPadString("",14," ",false);
  ExportPadString("",6," ",false);//80
//  NewLine;
  ExportPadString("",8," ",false);
  ExportPadString("",2," ",false);
  ExportPadString("INVOIC001911",14," ",false);
  ExportPadString("",1," ",false);
  ExportPadString("",1,"0",false);
  ExportPadString("",35," ",false);
  ExportPadString("",1,"0",false);
  NewLine;   
  RETURN;
END;

procedure FindOrderTotQty(record ORVc ORr,var val qty)
BEGIN
  row ORVc ORrw;
  Integer i,rwcnt;
  
  qty = 0;
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    qty = ORrw.Quant + qty;
  end;
  RETURN;
END;

global 
updating procedure EDIHANCOMInvEn(record RcVc RepSpec)
BEGIN
  record EDIIVVc IVr;
  row EDIIVVc IVrw;
  record INVc INr;
  Boolean infoundf;
  LongInt afr,ato;
  LongInt batchnr,sercnt;
  Integer i,rwcnt;
  Integer rowcnt,keys;
  string 255 tstr,vatname,cuanacode;
  Boolean testf,found,headexpf,updatefilef;
  val vatv,vatprc;
  val TotSum,TotVatSum,DiscSum;
  string 255 keystr,messident;
  string 2 VATCode;
  
  
  CreateMessageIdentifier(messident);
  sercnt = 1;
  headexpf = false;
  updatefilef = false;
  rowcnt = 1;
  afr = FirstInRange(RepSpec.f1,20);
  ato = LastInRange(RepSpec.f1,20);
  if (nonblank(RepSpec.f2)) then begin
    IVr.CustCode = RepSpec.f2;
    keystr = "CustCode";
    keys = 2;
  end else begin
    keystr = "SerNr";
    keys = 1;
  end;
  IVr.SerNr = afr;
  found = true;
  while (LoopKey(keystr,IVr,keys,found)) begin
    testf = true;
    if (nonblank(RepSpec.f2)) then begin
      if (ato<>-1) then begin
        if (IVr.SerNr>ato) then begin
          testf = false;
        end;
        if (IVr.SerNr<afr) then begin
         testf = false;
         end;
      end;
      if (RepSpec.flags[1]==0) then begin
        if (IVr.CustCode<>RepSpec.f2) then begin
          found = false;        
        end;
      end;  
    end else begin
      if (ato<>-1) then begin
        if (IVr.SerNr>ato) then begin
          found = false;
        end;
      end;  
    end;  
/*    
    if (RepSpec.flags[1]==0) then begin
      if (nonblank(RepSpec.f2)) then begin
        if (IVr.CustCode<>RepSpec.f2) then begin
          found = false;        
        end;
      end;
    end;
    if (RepSpec.flags[1]==1) then begin
      if (nonblank(RepSpec.f2)) then begin
        if (IVr.OrgCust<>RepSpec.f2) then begin
          found = false;        
        end;
      end;
    end;
*/    
    If (IVr.Invalid == 1) then begin
      testf = false;
    end;
    if (IVr.Prntdf<>0 and RepSpec.flags[0]==0) then begin
      testf = false;   
    end;
    if (DateInRange(IVr.TransDate,RepSpec.sStartDate,Repspec.sEndDate)==false) then begin
      testf = false;
    end;
    if (RepSpec.FirstVer<>-1) then begin
      if (RepSpec.FirstVer<>IVr.BatchNr) then begin
        testf = false;
      end;
    end;
    if (found==false) then begin testf = false; end;
    
    testf = true; // CON
    
    if (testf) then begin
          
      //headexpf =false;
       
      //if (headexpf==false) then begin
      //  batchnr = ExportBeginHANCOM(RepSpec.f2,cuanacode);
      //  if (batchnr==-1) then begin goto L99; end;    
      //  headexpf = true; 
      //end;
      HANCOMExportUNH(sercnt,rowcnt);// Start of each record
      HANCOMExportBGM(IVr,rowcnt);   // Invoice basic info
      HANCOMExportDTM(IVr.InvDate,0,1,rowcnt); // Invoice Date
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
        HANCOMExportFTX(IVr,rowcnt); // Credited Invoice Data
      end else begin
        HANCOMExportRFF(IVr,1,rowcnt); // Customer Order Number, 2 changed to 5
      end;  
      HANCOMExportDTM(IVr.TransDate,0,5,rowcnt); // Trans Date 
//      HANCOMExportRFF(IVr,2,rowcnt); // Bank Reference
//      HANCOMExportRFF(IVr,3,rowcnt); // Delivery Reference
      HANCOMExportNAD(IVr,1,rowcnt); // Customers Information
      HANCOMExportNAD(IVr,2,rowcnt); // HANCOM Info
      HANCOMExportNAD(IVr,3,rowcnt); // Shop info
//      HANCOMExportCUX(IVr,rowcnt);   // Currency
      HANCOMExportPAT(IVr,1,rowcnt); // Payment Mode
      HANCOMExportDTM(IVr.PayDate,0,3,rowcnt); // Due Date
      HANCOMExportPAT(IVr,2,rowcnt); // Cash Discount
      HANCOMExportDTM(IVr.InvDate,IVr.pdrdays,4,rowcnt); // Discount Date
      HANCOMExportPCD(IVr,rowcnt);   // Discount Prc
      rwcnt = MatRowCnt(IVr);
      DiscSum = 0.00;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        if (IVrw.stp!=1) and (IVrw.stp!=kInvoiceRowTypeVoid) then begin 
          goto LSKIPROW;
        end;        
        INr.Code = IVrw.ArtCode;
        infoundf = ReadFirstMain(INr,1,true);  
        if (infoundf==false) then begin 
          goto LSKIPROW;
        end;        
        if (blank(INr.CalcPrice)) then begin
          HANCOMExportLIN(INr,i+1,rowcnt); 
          HANCOMExportPIA(INr,rowcnt);
          HANCOMExportIMD(INr,rowcnt);
          HANCOMExportQTY(INr,IVr.InvType,IVrw.Quant,rowcnt);
          HANCOMExportMOA(IVrw.Sum,IVr.CurncyCode,1,rowcnt);
          HANCOMExportPRI(IVrw.Price,rowcnt);
          HANCOMExportTAX(IVr.InclVAT,IVrw.VATCode,rowcnt);
          VATCode = IVrw.VATCode;//1 VAT CODE FOR INVOICE?!!!
          DiscSum = DiscSum + (IVrw.Quant*IVrw.Price-IVrw.Sum);
        end else begin
          DiscSum = DiscSum - IVrw.Sum;
        end;  
LSKIPROW:;         
      end;
      if ((IVr.Prntdf==0) or (IVr.BatchNr!=batchnr)) then begin
        IVr.Prntdf = 1;
        if (IVr.BatchNr<>RepSpec.FirstVer) then begin
          IVr.BatchNr = batchnr;
          updatefilef = true;
        end;  
        testf = RecordStore(IVr,true); 
      end;
      HANCOMExportUNS(rowcnt);      
//      HANCOMExportMOA(DiscSum,IVr.CurncyCode,3 ,rowcnt);      
      HANCOMExportMOA(IVr.Sum4,IVr.CurncyCode,2,rowcnt);
      HANCOMExportTAX(IVr.InclVAT,VATCode,rowcnt);      
      HANCOMExportMOA(IVr.Sum1,IVr.CurncyCode,4,rowcnt);
      HANCOMExportMOA(IVr.Sum3,IVr.CurncyCode,5,rowcnt);
      HANCOMExportUNT(sercnt,rowcnt);
      HANCOMExportUNB(IVr,messident,rowcnt);
      rowcnt = 1;
      sercnt = sercnt + 1;
    end;//testf
  end;//while
  HANCOMExportUNZ(rowcnt,messident,rowcnt);
  if (headexpf) then begin
//    ExportFRAMEEnd;
  end;
///  if (updatefilef) then begin
///    UpdateFileNr;
///  end;  
L99:;    
  RETURN;
END;  
