external function roundmode SetRoundModeD(Integer);external function val FindVAT(string,val,Integer,Integer);external procedure M4PadString(string,Integer,string,Boolean,var string);globalprocedure RemoveCharacterFromString(var string res,string character)BEGIN  Integer i,l;  string 255 tstr,t2;    tstr = res;  res = "";  l = len(tstr);  for (i=l;i>=1;i=i-1) begin      if (CharacterMatch(tstr,character,i)) then begin      res = Left(tstr,(i-1));      t2 = Right(tstr,(len(tstr)-i));      res = res & t2;              goto LRem;    end;  end;LRem:;    RETURN;END;  procedure StripEndingCharacter(var string res,string character)BEGIN  Integer i,l,j;  string 255 tstr;  Boolean L88f;    L88f = false;  tstr = res;  res = "";  l = len(tstr);  for (i=l; i>=1; i=i-1) begin    if (L88f==false) then begin      if (CharacterMatch(tstr,character,i)==false) then begin        L88f = true;        j = i;      end;    end;    end;  res = Left(tstr,j);  RETURN;END;procedure BankDate2(var string res,Date dp,Integer ylen)BEGIN  string 255 tstr,t2;    tstr = GetYear(dp);  if (ylen==2) then begin    tstr = Right(tstr,2);  end else begin  end;    res = res & tstr;  t2 = GetMonth(dp);  if (len(t2)==1) then begin    tstr = "0";    tstr = tstr & t2;   end else begin    tstr = t2;  end;  res = res & tstr;  t2 = GetDay(dp);  if (len(t2)==1) then begin    tstr = "0";    tstr = tstr & t2;   end else begin    tstr = t2;  end;  res = res & tstr;  RETURN;END;procedure BankDate(var string res,Date dp,Integer ylen)BEGIN  string 255 tstr,t2;    t2 = GetDay(dp);  if (len(t2)==1) then begin    tstr = "0";    tstr = tstr & t2;   end else begin    tstr = t2;  end;    res = res & tstr;  t2 = GetMonth(dp);  if (len(t2)==1) then begin    tstr = "0";    tstr = tstr & t2;   end else begin    tstr = t2;  end;    res = res & tstr;  tstr = GetYear(dp);  if (ylen==2) then begin    tstr = Right(tstr,2);  end else begin  end;  res = res & tstr;  RETURN;END;globalprocedure DateToString2(Date tdp,var string tstr,string for1,string for2,string for3)BEGIN  Integer i,l;  i = 1;  l = len(tstr);  tstr = "";      if (CharacterMatch(for1,"D",1)) then begin        if (CharacterMatch(for2,"M",1)) then begin            if (CharacterMatch(for3,"Y",1)) then begin                BankDate(tstr,tdp,2);                goto LDat;            end;        end;    end;              /*    if (CharacterMatch(for1,"D",1)) then begin        if (CharacterMatch(for2,"M",1)) then begin            if (CharacterMatch(for3,"Y",1)) then begin                if (CharacterMatch(for3,"Y",2)) then begin                  BankDate(tstr,tdp,0);                  goto LDat;                end;            end;        end;    end;      */                    if (CharacterMatch(for1,"Y",1)) then begin      if (CharacterMatch(for2,"M",1)) then begin        if (CharacterMatch(for3,"D",1)) then begin                BankDate2(tstr,tdp,2);                goto LDat;        end;      end;    end;         /*           if (CharacterMatch(for1,"Y",1)) then begin        if (CharacterMatch(for1,"Y",2)) then begin            if (CharacterMatch(for2,"M",1)) then begin                if (CharacterMatch(for3,"D",1)) then begin                  BankDate2(tstr,tdp,0);                  goto LDat;                end;            end;        end;    end;           */LDat:;                 RETURN;END;globalprocedure ValToHALString(val a,string format,var string res)BEGIN  string 255 tstr,t2;  record SysFormatBlock SysRec;  Integer i,l,j;  Boolean stripf;  val a2;  BlockLoad(SysRec);  res = "";  a2 = a;  if ((CharacterMatch(format,"1",1)) or (CharacterMatch(format,"2",1))) then begin // No decimals    a2 = Round(a,SetRoundModeD(0));  end;  tstr = a2;  l = len(tstr);  for (i=l;i>=1;i=i-1) begin      if (CharacterMatch(tstr,SysRec.decimalPt,i)) then begin      if (CharacterMatch(format,"0",1)) then begin // 4 Digits after comma, no separator        res = Left(tstr,(i-1));        t2 = Right(tstr,(len(tstr)-i));        res = res & t2;                res = res & "00";        goto LValT;      end;      if (CharacterMatch(format,"1",1)) then begin // No decimals at all        stripf = true;        res = Left(tstr,(i-1));        if (res=="0") then begin          stripf = false;        end;        t2 = Right(tstr,(len(tstr)-i));        res = res & t2;              if (stripf) then begin            StripEndingCharacter(res,"0");                end else begin          res = "0";        end;          goto LValT;      end;            if (CharacterMatch(format,"2",1)) then begin // No decimals...        res = Left(tstr,(i-1));              goto LValT;      end;            if (CharacterMatch(format,"3",1)) then begin // 3 Digits after comma, no separator        res = Left(tstr,(i-1));        t2 = Right(tstr,(len(tstr)-i));        res = res & t2;                res = res & "0";        goto LValT;      end;    end;  end;  if (blank(res)) then begin res = tstr; end;LValT:;  RETURN;END;globalprocedure CalculateVAT(val rowsum,string vatcode,Integer inclvat,var val vatv,var val vatprc, var string vatname)BEGIN  record VATCodeBlock VATr;  row VATCodeBlock VATrw;  string 255 tstr;  val t;  Integer i,rwcnt;  Boolean foundf;    vatprc = 0;  vatv = 0;  vatname = "";  foundf = false;  BlockLoad(VATr);  rwcnt = MatRowCnt(VATr);  for (i=0;i<rwcnt;i=i+1) begin    if (foundf==false) then begin      MatRowGet(VATr,i,VATrw);      if (VATrw.VATCode==vatcode) then begin        vatprc = VATrw.ExVatpr;        vatname = VATrw.VATCode;        foundf = true;      end;    end;    end;    vatv = FindVAT(vatcode,rowsum,inclvat,0);//jjtax  RETURN;END;globalupdating procedure UpdateFileNr()BEGIN  record EDIFileBlock EDIr;  Boolean testf;  LongInt l;    BlockLoad(EDIr);      l = EDIr.LastFileNr + 1;  EDIr.LastFileNr = l;  BlockStore(EDIr);    RETURN;END;  