external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);external updating procedure UpdateFileNr();external procedure IntradeExportUNH(LongInt,var Integer);external procedure IntradeExportBGM(record EDIIVVc,var Integer);external procedure IntradeExportDTM(Date,LongInt,Integer,var Integer);external procedure IntradeExportRFF(record EDIIVVc,Integer,var Integer);external procedure IntradeExportNAD(record EDIIVVc,Integer,var Integer);external procedure IntradeExportCUX(record EDIIVVc,var Integer);external procedure IntradeExportPAT(record EDIIVVc,Integer,var Integer);external procedure IntradeExportLIN(record INVc,Integer,var Integer);external procedure IntradeExportPIA(record INVc,var Integer);external procedure IntradeExportIMD(record INVc,var Integer);external procedure IntradeExportQTY(record INVc,Integer,val,var Integer);external procedure IntradeExportMOA(val,string,Integer,var Integer);external procedure IntradeExportPRI(val,var Integer);external procedure IntradeExportTAX(Integer,string,var Integer);external procedure IntradeExportUNS(var Integer);external procedure IntradeExportUNT(LongInt,var Integer);external procedure IntradeExportPCD(record EDIIVVc,var Integer);external procedure IntradeExportFTX(record EDIIVVc,var Integer);external procedure IntradeExportUNB(record EDIIVVc,string,var Integer);external procedure IntradeExportUNZ(LongInt,string,var Integer);procedure CreateMessageIdentifier(var string res)BEGIN    res = "";  res = res & CurrentDate;  res = res & CurrentTime;  RETURN;END;procedure FileExtension(var LongInt FileExtNr,var string res)BEGIN  string 255 tstr;    tstr = FileExtNr;  if (len(tstr)==1) then begin    res = ".00";    res = res & tstr;  end;  if (len(tstr)==2) then begin    res = ".0";    res = res & tstr;  end;  if (len(tstr)==3) then begin    res = ".";    res = res & tstr;  end;  if (len(tstr)>3) then begin    FileExtNr = 1;    res = ".001";  end;  RETURN;END;  updating function LongInt ExportBeginIntrade(string custcode,var string cuanacode) BEGIN  LongInt res,l;  string 255 tstr,t2;  LongInt lastfilenr;  record EDIFileBlock EDIRec;         BlockLoad(EDIRec);  l = EDIRec.FileExtNr;  res = -1;  lastfilenr = EDIRec.LastFileNr + 1;  if (EDIRec.ExportFileFolder=="") then begin    tstr = "EDI\\import";  end else begin    tstr = EDIRec.ExportFileFolder & "\\INVINT";  end;  l = l + 1;  FileExtension(l,t2);  EDIRec.FileExtNr = l;  BlockStore(EDIRec);  tstr = tstr & t2;  if (nonblank(tstr)) then begin    CreateFile(tstr);//    ExportFileStart(custcode,cuanacode,lastfilenr);    res = lastfilenr;  end;    ExportBeginIntrade = res;  RETURN;END;  procedure ExportFRAMEBegin(record CUVc CUr, record CYBlock CYRec,LongInt lastfilenr)BEGIN  string 255 tstr;    ExportPadString("'''ED2'''",9," ",false);  ExportPadString("SYSNET",6," ",false);  ExportPadString(":",1," ",false);  ExportPadString(CYRec.OrgNr,7," ",false);  ExportPadString(":",1," ",false);  ExportPadString("LYT",3," ",false);  ExportPadString("'",1," ",false);    ExportPadString("SYSNET",6," ",false);  ExportPadString(":",1," ",false);  ExportPadString(CUr.RegNr1,7," ",false);  ExportPadString(":",1," ",false);  ExportPadString("LYT",3," ",false);  ExportPadString("'",1," ",false);  tstr = lastfilenr;  ExportPadString(tstr,7," ",false);  ExportPadString("'",1," ",false);  ExportPadString("STX",3," ",false);  ExportPadString(":",1," ",false);  ExportPadString("EDIFACT",7," ",false);  ExportPadString("'",1," ",false);  ExportPadString("TYP",3," ",false);  ExportPadString(":",1," ",false);  ExportPadString("TILAUS",6," ",false);  ExportPadString("'",1," ",false);  ExportPadString("NR",2," ",false);//80//  NewLine;  ExportPadString("Q",1," ",false);  ExportPadString(":",1," ",false);  ExportPadString("0",1," ",false);  ExportPadString("'''",3," ",false);     NewLine;   RETURN;END;  procedure ExportFRAMEEnd()BEGIN  ExportPadString("'''EOF'''",9," ",false);  ExportPadString("452'",4," ",false);  RETURN;END;  procedure ExportFileStart(string custcode,var string cuanacode,LongInt lastfilenr)BEGIN  record CUVc CUr;  record CYBlock CYRec;  record EDIFileBlock EDIRec;  string 255 tstr;  Boolean cufoundf;    BlockLoad(CYRec);    BlockLoad(EDIRec);    CUr.Code = custcode;  cufoundf  = ReadFirstMain(CUr,1,true);  ExportFRAMEBegin(CUr,CYRec,lastfilenr);    ExportPadString("UNB",3," ",false);    ExportPadString("11",2," ",false);    ExportPadString("UNOC",4," ",false);    ExportPadString("1",1," ",false);  ExportPadString("0037",4," ",false);  tstr = StripNonDigits(CYRec.OrgNr);            ExportPadString(tstr,31," ",false);  ExportPadString("30",4," ",false);  ExportPadString("",14," ",false);  if (EDIRec.Live==1) then begin//  ExportPadString("003705655815",35," ",false);    ExportPadString(EDIRec.LiveCode,17," ",false);//80//    NewLine;    ExportPadString(EDIRec.LiveCode,18," ",false);  end else begin    ExportPadString(EDIRec.TestCode,17," ",false);//    NewLine;    ExportPadString(EDIRec.TestCode,18," ",false);  end;    ExportPadString("30",4," ",false);  ExportPadString("",14," ",false);  tstr = DateToString(CurrentDate,"YYMMDD");  ExportPadString(tstr,6," ",false);    tstr = StripNonDigits("" & CurrentTime);  ExportPadString(tstr,4," ",false);  ExportPadString("" & lastfilenr,14," ",false);  cuanacode = CUr.ANACode;  ExportPadString("",14," ",false);  ExportPadString("",6," ",false);//80//  NewLine;  ExportPadString("",8," ",false);  ExportPadString("",2," ",false);  ExportPadString("INVOIC001911",14," ",false);  ExportPadString("",1," ",false);  ExportPadString("",1,"0",false);  ExportPadString("",35," ",false);  ExportPadString("",1,"0",false);  NewLine;     RETURN;END;procedure FindOrderTotQty(record ORVc ORr,var val qty)BEGIN  row ORVc ORrw;  Integer i,rwcnt;    qty = 0;  rwcnt = MatRowCnt(ORr);  for (i=0;i<rwcnt;i=i+1) begin    MatRowGet(ORr,i,ORrw);    qty = ORrw.Quant + qty;  end;  RETURN;END;global updating procedure EDIIntradeEn(record RcVc RepSpec)BEGIN  record EDIIVVc IVr;  row EDIIVVc IVrw;  record INVc INr;  Boolean infoundf;  LongInt afr,ato;  LongInt batchnr,sercnt;  Integer i,rwcnt;  Integer rowcnt,keys;  string 255 tstr,vatname,cuanacode;  Boolean testf,found,headexpf,updatefilef;  val vatv,vatprc;  val TotSum,TotVatSum,DiscSum;  string 255 keystr,messident;  string 2 VATCode;    if (blank(RepSpec.f2)) then begin goto L99; end;  CreateMessageIdentifier(messident);  sercnt = 1;  headexpf = false;  updatefilef = false;  rowcnt = 1;  afr = FirstInRange(RepSpec.f1,20);  ato = LastInRange(RepSpec.f1,20);  if (nonblank(RepSpec.f2)) then begin    IVr.CustCode = RepSpec.f2;    keystr = "CustCode";    keys = 2;  end else begin    keystr = "SerNr";    keys = 1;  end;  IVr.SerNr = afr;  found = true;  while (LoopKey(keystr,IVr,keys,found)) begin    testf = true;    if (nonblank(RepSpec.f2)) then begin      if (ato<>-1) then begin        if (IVr.SerNr>ato) then begin          testf = false;        end;        if (IVr.SerNr<afr) then begin         testf = false;         end;      end;      if (RepSpec.flags[1]==0) then begin        if (IVr.CustCode<>RepSpec.f2) then begin          found = false;                end;      end;      end else begin      if (ato<>-1) then begin        if (IVr.SerNr>ato) then begin          found = false;        end;      end;      end;  /*        if (RepSpec.flags[1]==0) then begin      if (nonblank(RepSpec.f2)) then begin        if (IVr.CustCode<>RepSpec.f2) then begin          found = false;                end;      end;    end;    if (RepSpec.flags[1]==1) then begin      if (nonblank(RepSpec.f2)) then begin        if (IVr.OrgCust<>RepSpec.f2) then begin          found = false;                end;      end;    end;*/        If (IVr.Invalid == 1) then begin      testf = false;    end;    if (IVr.Prntdf<>0 and RepSpec.flags[0]==0) then begin      testf = false;       end;    if (DateInRange(IVr.TransDate,RepSpec.sStartDate,Repspec.sEndDate)==false) then begin      testf = false;    end;    if (RepSpec.FirstVer<>-1) then begin      if (RepSpec.FirstVer<>IVr.BatchNr) then begin        testf = false;      end;    end;    if (found==false) then begin testf = false; end;    if (testf) then begin      if (headexpf==false) then begin        batchnr = ExportBeginIntrade(RepSpec.f2,cuanacode);        if (batchnr==-1) then begin goto L99; end;            headexpf = true;       end;      IntradeExportUNH(sercnt,rowcnt);// Start of each record      IntradeExportBGM(IVr,rowcnt);   // Invoice basic info      IntradeExportDTM(IVr.InvDate,0,1,rowcnt); // Invoice Date      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin        IntradeExportFTX(IVr,rowcnt); // Credited Invoice Data      end else begin        IntradeExportRFF(IVr,1,rowcnt); // Customer Order Number, 2 changed to 5      end;        IntradeExportDTM(IVr.TransDate,0,5,rowcnt); // Trans Date       IntradeExportRFF(IVr,2,rowcnt); // Bank Reference      IntradeExportRFF(IVr,3,rowcnt); // Delivery Reference      IntradeExportNAD(IVr,1,rowcnt); // Customers Information      IntradeExportNAD(IVr,2,rowcnt); // Intrade Info      IntradeExportNAD(IVr,3,rowcnt); // Shop info      IntradeExportCUX(IVr,rowcnt);   // Currency      IntradeExportPAT(IVr,1,rowcnt); // Payment Mode      IntradeExportDTM(IVr.PayDate,0,3,rowcnt); // Due Date      IntradeExportPAT(IVr,2,rowcnt); // Cash Discount      IntradeExportDTM(IVr.InvDate,IVr.pdrdays,4,rowcnt); // Discount Date      IntradeExportPCD(IVr,rowcnt);   // Discount Prc      rwcnt = MatRowCnt(IVr);      DiscSum = 0.00;      for (i=0;i<rwcnt;i=i+1) begin        MatRowGet(IVr,i,IVrw);        if (IVrw.stp!=1) and (IVrw.stp!=kInvoiceRowTypeVoid) then begin           goto LSKIPROW;        end;                INr.Code = IVrw.ArtCode;        infoundf = ReadFirstItem(INr.Code,INr,true,false);          if (infoundf==false) then begin           goto LSKIPROW;        end;                if (blank(INr.CalcPrice)) then begin          IntradeExportLIN(INr,i+1,rowcnt);           IntradeExportPIA(INr,rowcnt);          IntradeExportIMD(INr,rowcnt);          IntradeExportQTY(INr,IVr.InvType,IVrw.Quant,rowcnt);          IntradeExportMOA(IVrw.Sum,IVr.CurncyCode,1,rowcnt);          IntradeExportPRI(IVrw.Price,rowcnt);          IntradeExportTAX(IVr.InclVAT,IVrw.VATCode,rowcnt);          VATCode = IVrw.VATCode;//1 VAT CODE FOR INVOICE?!!!          DiscSum = DiscSum + (IVrw.Quant*IVrw.Price-IVrw.Sum);        end else begin          DiscSum = DiscSum - IVrw.Sum;        end;  LSKIPROW:;               end;      if ((IVr.Prntdf==0) or (IVr.BatchNr!=batchnr)) then begin        IVr.Prntdf = 1;        if (IVr.BatchNr<>RepSpec.FirstVer) then begin          IVr.BatchNr = batchnr;          updatefilef = true;        end;          testf = RecordStore(IVr,true);       end;      IntradeExportUNS(rowcnt);      //      IntradeExportMOA(DiscSum,IVr.CurncyCode,3 ,rowcnt);            IntradeExportMOA(IVr.Sum4,IVr.CurncyCode,2,rowcnt);      IntradeExportTAX(IVr.InclVAT,VATCode,rowcnt);            IntradeExportMOA(IVr.Sum1,IVr.CurncyCode,4,rowcnt);      IntradeExportMOA(IVr.Sum3,IVr.CurncyCode,5,rowcnt);      IntradeExportUNT(sercnt,rowcnt);      IntradeExportUNB(IVr,messident,rowcnt);      rowcnt = 1;      sercnt = sercnt + 1;    end;//testf  end;//while  IntradeExportUNZ(rowcnt,messident,rowcnt);  if (headexpf) then begin//    ExportFRAMEEnd;  end;  if (updatefilef) then begin    UpdateFileNr;  end;    CloseFile;L99:;      RETURN;END;  