external function val FindVAT(string,val,Integer,Integer);external procedure DateToString2(Date,var string,string,string,string);external procedure ValToHALString(val,string,var string);external updating procedure UpdateFileNr();procedure ExportIH(record EDIIVVc IVr)BEGIN  string 255 tstr;  record PDVc PDr;  record CUVc CUr;    if (nonblank(IVr.OrgCust)) then begin    CUr.Code = IVr.OrgCust;  end else begin    CUr.Code = IVr.CustCode;  end;  if (ReadFirstMain(CUr,1,true)) then begin  end;  ExportPadString("IH",2," ",false);    ExportPadString(" ",1," ",false);    ExportPadString(CUr.ANACode,13," ",false);  ExportPadString(" ",1," ",false);    ExportPadString(CUr.RegNr2,17," ",false);  ExportPadString(" ",1," ",false);  ExportPadString(CUr.Name,40," ",false);  ExportPadString(" ",1," ",false);  tstr = IVr.SerNr;  ExportPadString(tstr,10,"0",true);  ExportPadString(" ",1," ",false);  ExportPadString(" ",6," ",false);  ExportPadString(" ",1," ",false);  DateToString2(IVr.InvDate,tstr,"D","M","Y");  ExportPadString(tstr,6," ",true);  ExportPadString(" ",1," ",false);  ExportPadString(tstr,6," ",true);  ExportPadString(" ",1," ",false);  tstr = "";  PDr.Code = IVr.PayDeal;  if (ReadFirstMain(PDr,1,true)) then begin    tstr = PDr.pdComment;  end;  ExportPadString(tstr,40," ",false);  ExportPadString(" ",1," ",false);  DateToString2(IVr.PayDate,tstr,"D","M","Y");  ExportPadString(tstr,6," ",true);     NewLine;   RETURN;END;procedure ExportIL(record EDIIVVc IVr,Integer i,Integer InclVAT)BEGIN  string 255 tstr;  record INVc INr;  val tmp;  row EDIIVVc IVrw;    MatRowGet(IVr,i,IVrw);  INr.Code = IVrw.ArtCode;  if (ReadFirstMain(INr,1,true)) then begin      end;    ExportPadString("IL",2," ",false);    ExportPadString(" ",1," ",false);    ExportPadString(INr.BarCode,13," ",false);  ExportPadString(" ",1," ",false);  //  ExportPadString(INr.AlternativeCode,30," ",false);  ExportPadString(INr.Code,30," ",false);  //Switched over    ExportPadString(" ",1," ",false);  //  ExportPadString(INr.Code,30," ",false);  ExportPadString(INr.AlternativeCode,30," ",false);  //Switched over    ExportPadString(" ",1," ",false);  tmp = INr.UnitCoefficient;  ValToHALString(tmp,"2",tstr);      ExportPadString(tstr,4," ",false);    ExportPadString(" ",1," ",false);    ExportPadString(" ",15," ",false);    ExportPadString(" ",1," ",false);    ValToHALString(IVrw.Quant,"2",tstr);      ExportPadString(tstr,15,"0",true);    ExportPadString(" ",1," ",false);    ExportPadString(" ",20," ",false);    ExportPadString(" ",1," ",false);    ValToHALString(IVrw.Price,"0",tstr);      ExportPadString(tstr,9,"0",true);    ExportPadString(" ",1," ",false);    tmp = IVrw.Sum/IVrw.Quant;  ValToHALString(tmp,"0",tstr);      ExportPadString(tstr,11,"0",true);        ExportPadString(" ",1," ",false);    ExportPadString(IVrw.VATCode,1," ",false);    ExportPadString(" ",1," ",false);    ExportPadString(" ",20," ",false);    ExportPadString(" ",1," ",false);    ExportPadString(IVrw.Spec,40," ",false);    ExportPadString(" ",1," ",false);    tmp = FindVAT(IVrw.VATCode,IVrw.Sum,InclVAT,IVr.NoTAXonVAT);          ValToHALString(tmp,"0",tstr);      ExportPadString(tstr,11,"0",true);    ExportPadString(" ",1," ",false);    ValToHALString(IVrw.Sum,"0",tstr);      ExportPadString(tstr,11,"0",true);   NewLine;  RETURN;END;procedure FindOrderTotQty(record ORVc ORr,var val qty)BEGIN  row ORVc ORrw;  Integer i,rwcnt;    qty = 0;  rwcnt = MatRowCnt(ORr);  for (i=0;i<rwcnt;i=i+1) begin    MatRowGet(ORr,i,ORrw);    qty = ORrw.Quant + qty;  end;  RETURN;END;procedure ExportOH(record EDIIVVc IVr)BEGIN  string 255 tstr;  record ORVc ORr;  record SHVc SHr;  val qty;  ExportPadString("OH",2," ",false);    ExportPadString(" ",1," ",false);    tstr = IVr.CustOrdNr;  ExportPadString(tstr,13," ",false);  ExportPadString(" ",1," ",false);    ExportPadString(" ",3," ",false);    ExportPadString(" ",1," ",false);    tstr = IVr.OrderNr;  ExportPadString(tstr,10,"0",true);  ExportPadString(" ",1," ",false);    ORr.SerNr = IVr.OrderNr;  if (ReadFirstMain(ORr,1,true)) then begin  end;    ExportPadString(" ",6," ",false);  ExportPadString(" ",1," ",false);  DateToString2(ORr.OrdDate,tstr,"D","M","Y");  ExportPadString(tstr,6," ",true);  ExportPadString(" ",1," ",false);  ExportPadString(tstr,6," ",true);  ExportPadString(" ",1," ",false);  SHr.OrderNr = IVr.OrderNr;  SHr.SerNr = -1;  if (ReadFirstKey("OrderKey",SHr,1,true)) then begin  end;    tstr = SHr.SerNr;  ExportPadString(tstr,10,"0",true);  ExportPadString(" ",1," ",false);    ExportPadString(" ",6," ",true);//  ExportPadString(" ",1," ",false);//they say from pos = 72for Sainsbury  DateToString2(SHr.ShipDate,tstr,"D","M","Y");  ExportPadString(tstr,6," ",true);  ExportPadString(" ",1," ",false);  FindOrderTotQty(ORr,qty);    ValToHALString(qty,"2",tstr);        ExportPadString(tstr,6,"0",true);  ExportPadString(" ",1," ",false);  ExportPadString(" ",21," ",true);  ExportPadString(" ",1," ",false);  tstr = SHr.SerNr;  ExportPadString(tstr,10,"0",true);  ExportPadString(" ",1," ",false);    ExportPadString(" ",6," ",false);  ExportPadString(" ",1," ",false);  DateToString2(SHr.ShipDate,tstr,"D","M","Y");  ExportPadString(tstr,6," ",true);  ExportPadString(" ",1," ",false);  NewLine;  RETURN;END;procedure ExportBH(string custcode,var string cuanacode)BEGIN  record CUVc CUr;  record CYBlock CYRec;    BlockLoad(CYRec);    CUr.Code = custcode;  if (ReadFirstMain(CUr,1,true)) then begin  end;  ExportPadString("BH",2," ",false);    ExportPadString(" ",1," ",false);    ExportPadString(CYRec.ANACode,13," ",false);  ExportPadString(" ",1," ",false);    ExportPadString(CYRec.CompName,40," ",false);  ExportPadString(" ",1," ",false);  ExportPadString(CUr.ANACode,13," ",false);  ExportPadString(" ",1," ",false);  ExportPadString(CUr.Code,17," ",false);  ExportPadString(" ",1," ",false);  ExportPadString(CUr.Name,40," ",false);  ExportPadString(" ",1," ",false);  ExportPadString(CUr.TheirCode,5," ",false);  cuanacode = CUr.ANACode;  NewLine;    RETURN;END;procedure FileExtension(var LongInt FileExtNr,var string res)BEGIN  string 255 tstr;    tstr = FileExtNr;  if (len(tstr)==1) then begin    res = ".00";    res = res & tstr;  end;  if (len(tstr)==2) then begin    res = ".0";    res = res & tstr;  end;  if (len(tstr)==3) then begin    res = ".";    res = res & tstr;  end;  if (len(tstr)>3) then begin    FileExtNr = 1;    res = ".001";  end;  RETURN;END;  updating function LongInt ExportBeginS(string custcode,var string cuanacode) BEGIN  LongInt lastfilenr;  string 255 tstr,t2;  LongInt res,l;  record EDIFileBlock EDIRec;         BlockLoad(EDIRec);  l = EDIRec.FileExtNr;  res = -1;  lastfilenr = EDIRec.LastFileNr + 1;  if (EDIRec.ExportFileFolder=="") then begin    tstr = "EDI\\import";  end else begin    tstr = EDIRec.ExportFileFolder & "\\import";  end;  l = l + 1;  FileExtension(l,t2);  EDIRec.FileExtNr = l;  BlockStore(EDIRec);  tstr = tstr & t2;  if (nonblank(tstr)) then begin    CreateFile(tstr);    ExportBH(custcode,cuanacode);    res = lastfilenr;  end;    ExportBeginS = res;  RETURN;END;global updating procedure EDIVSEn(record RcVc RepSpec)BEGIN  record EDIIVVc IVr;  row EDIIVVc IVrw;  LongInt afr,ato;  LongInt batchnr;  Integer i,rwcnt;  string 255 tstr,vatname,cuanacode;  Boolean testf,found,headexpf,updatefilef;  val vatv,vatprc;  val TotSum,TotVatSum;  string 255 keystr;    if ((blank(RepSpec.f2)) and (RepSpec.FirstVer<1)) then begin goto L99; end;     headexpf = false;  updatefilef = false;  afr = FirstInRange(RepSpec.f1,20);  ato = LastInRange(RepSpec.f1,20);  if (RepSpec.flags[1]==0) then begin     keystr = "CustCode";     IVr.CustCode = RepSpec.f2;  end;  if (RepSpec.flags[1]==1) then begin     keystr = "OrgCust";     IVr.OrgCust = RepSpec.f2;  end;  IVr.SerNr = afr;  found = true;    while (LoopKey(keystr,IVr,2,found)) begin    testf = true;    if (ato<>-1) then begin      if (IVr.SerNr>ato) then begin        testf = false;      end;    end;    if (RepSpec.flags[1]==0) then begin      if (nonblank(IVr.CustCode)) then begin /* you can now select a batch number, they have the same customer */        if (IVr.CustCode<>RepSpec.f2) then begin          found = false;                end;      end;    end;    if (RepSpec.flags[1]==1) then begin      if (nonblank(IVr.OrgCust)) then begin /* you can now select a batch number, they have the same customer */        if (IVr.OrgCust<>RepSpec.f2) then begin          found = false;                end;      end;    end;    If (IVr.Invalid == 1) then begin      testf = false;    end;    if (IVr.Prntdf<>0 and RepSpec.flags[0]==0) then begin      testf = false;       end;    if (DateInRange(IVr.TransDate,RepSpec.sStartDate,Repspec.sEndDate)==false) then begin      testf = false;    end;    if (RepSpec.FirstVer<>-1) then begin      if (RepSpec.FirstVer<>IVr.BatchNr) then begin        testf = false;      end;    end;    if (found==false) then begin testf = false; end;    if (testf) then begin      if (headexpf==false) then begin        batchnr = ExportBeginS(RepSpec.f2,cuanacode);        if (batchnr==-1) then begin goto L99; end;            headexpf = true;       end;      ExportIH(IVr);             ExportOH(IVr);             rwcnt = MatRowCnt(IVr);      for (i=0;i<rwcnt;i=i+1) begin        ExportIL(IVr,i,IVr.InclVAT);       end;      if ((IVr.Prntdf==0) or (IVr.BatchNr!=batchnr)) then begin        IVr.Prntdf = 1;        if (IVr.BatchNr<>RepSpec.FirstVer) then begin          IVr.BatchNr = batchnr;          updatefilef = true;        end;          testf = RecordStore(IVr,true);       end;    end;//testf  end;//while  ExportPadString("",1," ",false);  if (updatefilef) then begin    UpdateFileNr;  end;    CloseFile;L99:;      RETURN;END;  