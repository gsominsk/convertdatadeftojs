external procedure PMsgAddToStack(record LSerialPortDeviceVc,integer,array string,var array string);
external procedure PMsgAddToStackNP(record LSerialPortDeviceVc,integer,var array string);
external function integer PMsgConst(record LSerialPortDeviceVc,integer,string);
external function integer PMsgSettings_Int(record LSerialPortDeviceVc,integer);
external function integer StrWordWrap(string,integer,var array string); 

global
procedure PMsgStack_Beep(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_Beep,msgbuffer);
  return;
end;

global
procedure PMsgStack_OpenCashDrawer(record LSerialPortDeviceVc LSPDr,var array string msgbuffer)
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_OpenCashDrawer,msgbuffer);
  return;
end;

global
procedure PMsgStack_ExitCurrentMode(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_ExitCurrentMode,msgbuffer);
  return;
end;

global
procedure PMsgStack_SetDecimalPoint(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer Decimals) 
begin
  array string 50 params;

  params[PMsgVar_Value] = Decimals;
  PMsgAddToStack(LSPDr,PMsgCmdConst_SetDecimalPoint,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_PrintLine(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,String Text) 
begin   
  array string 50 params;

  params[PMsgVar_Text] = Text;
  PMsgAddToStack(LSPDr,PMsgCmdConst_PrintLine,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_PrintMultiLine(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,String Text) 
begin   
  array string 255 wrapped;
  integer linelen,cnt,i;
  
  linelen = PMsgSettings_Int(LSPDr,PMsgSettings_MaxLineLength);
  
  cnt = StrWordWrap(Text,linelen,wrapped);
  for(i=0;i<cnt;i=i+1) begin
    PMsgStack_PrintLine(LSPDr,msgbuffer,wrapped[i]);
  end;
  return;
end;

global
procedure PMsgStack_EnterModeEx(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer mode,string password) 
begin
  array string 50 params;

  params[PMsgVar_Mode] = PMsgConst(LSPDr,PMsgCmdConst_EnterMode,mode);
  params[PMsgVar_Password] = password;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_EnterMode,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_EnterMode(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer mode,integer password) 
begin
  integer pwd;
  
  pwd = PMsgConst(LSPDr,PMsgCmdConst_EnterMode,password);
  PMsgStack_EnterModeEx(LSPDr,msgbuffer,mode,pwd);
  return;
end;


global
procedure PMsgStack_AddSalesSumQty(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty,val vat) begin
  array string 50 params;

  params[PMsgVar_TestMode] = 0;
  params[PMsgVar_CashCheckMode] = 1;
  params[PMsgVar_Price] = ValToString(sum,M45Val,"",".",0);
  params[PMsgVar_Qty] = ValToString(qty,M45Val,"",".",0);
  params[PMsgVar_Section] = vat;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_AddSalesSumQty,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_TotalExtinction(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_TotalExtinction,msgbuffer);
  return;
end;

global
procedure PMsgStack_MoneyDeposit(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum) 
begin
  array string 50 params;

  params[PMsgVar_TestMode] = 0;
  params[PMsgVar_Sum] = ValToString(sum,M45Val,"",".",0);
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_MoneyDeposit,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_MoneyWithdraw(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum) begin
  array string 50 params;

  params[PMsgVar_TestMode] = 0;
  params[PMsgVar_Sum] = ValToString(sum,M45Val,"",".",0);
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_MoneyWithdraw,params,msgbuffer);
  return;
end;


global
procedure PMsgStack_RemSumQty(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty) begin
  array string 50 params;

  params[PMsgVar_TestMode] = 0;
  params[PMsgVar_CashCheckMode] = 1;
  params[PMsgVar_Price] = ValToString(sum,M45Val,"",".",0);
  params[PMsgVar_Qty] = ValToString(qty,M45Val,"",".",0);
  params[PMsgVar_Section] = 0;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_RemSumQty,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_AddCancelSumQty(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty) begin
  array string 50 params;

  params[PMsgVar_TestMode] = 0;
  params[PMsgVar_CashCheckMode] = 0;
  params[PMsgVar_Price] = ValToString(sum,M45Val,"",".",0);
  params[PMsgVar_Qty] = ValToString(qty,M45Val,"",".",0);
  params[PMsgVar_Section] = 0;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_AddCancelSumQty,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_AddReturnSumQty(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty,val vat) begin
  array string 50 params;

  params[PMsgVar_TestMode] = 0;
  params[PMsgVar_CashCheckMode] = 0;
  params[PMsgVar_Price] = ValToString(sum,M45Val,"",".",0);
  params[PMsgVar_Qty] = ValToString(qty,M45Val,"",".",0);
  params[PMsgVar_Section] = vat;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_AddReturnSumQty,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_ReceiptOpen(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer type) 
begin
  array string 50 params;

  params[PMsgVar_Type] = PMsgConst(LSPDr,PMsgCmdConst_OpenReceipt,type);
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_OpenReceipt,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_ReceiptClose(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer type,val sum) 
begin
  array string 50 params;

  params[PMsgVar_PaymentType] = type;
  params[PMsgVar_Sum] = ValToString(sum,M45Val,"",".",0);

  PMsgAddToStack(LSPDr,PMsgCmdConst_CloseReceipt,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_ReceiptAddPayment(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer type,val sum,integer CalcChange) 
begin
  array string 50 params;

  params[PMsgVar_PaymentType] = PMsgConst(LSPDr,PMsgCmdConst_AddReceiptPayment,type);
  params[PMsgVar_Sum] = ValToString(sum,M45Val,"",".",0);

  PMsgAddToStack(LSPDr,PMsgCmdConst_AddReceiptPayment,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_ReceiptRemPayment(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer type,val sum) 
begin
  array string 50 params;

  params[PMsgVar_PaymentType] = type;
  params[PMsgVar_Sum] = ValToString(sum,M45Val,"",".",0);

  PMsgAddToStack(LSPDr,PMsgCmdConst_RemReceiptPayment,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_Diagnostics(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_Diagnostics,msgbuffer);
  return;
end;

global
procedure PMsgStack_DemoPrint(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  array string 50 params;
  
  params[PMsgVar_PrintOnReceipt]="1";
  params[PMsgVar_PrintOnTestStrip]="0";
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_DemoPrint,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_Sound(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer Freq,integer Length) 
begin
  array string 50 params;
  
  params[PMsgVar_Freq] = Freq;
  params[PMsgVar_Duration] = Length;

  PMsgAddToStack(LSPDr,PMsgCmdConst_Sound,params,msgbuffer);
  return; 
end;

global
procedure PMsgStack_SetDate(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,date NewDate) 
begin
  array string 50 params;

  params[PMsgVar_Date] = NewDate;
  PMsgAddToStack(LSPDr,PMsgCmdConst_SetDate,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_ReportDateRange(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer Mode,date FrDate,date ToDate) 
begin
  array string 50 params;

  params[PMsgVar_Mode] = Mode;
  params[PMsgVar_FromDate] = FrDate;
  params[PMsgVar_ToDate] = ToDate;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_ReportDateRanges,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_LastShiftTotal(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_GetLastShiftSales,msgbuffer);
  return;
end; 



global
procedure PMsgStack_PrinterGet(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer table,integer rownr,integer field)
begin
  array string 50 params;
  integer cmd;

  cmd = PMsgCmdConst_PrinterGet;
  params[PMsgVar_Table] = PMsgConst(LSPDr,cmd,table);
  params[PMsgVar_Row] = PMsgConst(LSPDr,cmd,rownr);
  params[PMsgVar_Field] = PMsgConst(LSPDr,cmd,field);
  
  PMsgAddToStack(LSPDr,cmd,params,msgbuffer);  
  return;
end;

global
procedure PMsgStack_Report(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer Type) 
begin
  array string 50 params;

  params[PMsgVar_Type] = PMsgConst(LSPDr,PMsgCmdConst_Report,Type);
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_Report,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_CloseShift(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_CloseShift,msgbuffer);    
  return;
end;

global
procedure PMsgStack_ResetCashierNames(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_ResetCashierNames,msgbuffer);
  return;
end;

global
procedure PMsgStack_GetCashierData(record LSerialPortDeviceVc LSPDr,var array string msgbuffer)
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_GetCashierData,msgbuffer);
  return;
end;

global
procedure PMsgStack_SetCashierName(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer rownr,string NewName)
begin
  array string 50 params;

  params[PMsgVar_Row] = rownr;
  params[PMsgVar_Name] = NewName;  
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_SetCashierName,params,msgbuffer);
  return;
end;



global
procedure PMsgStack_GetCashierName(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer rownr)
begin
  array string 50 params;

  params[PMsgVar_Row] = rownr;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_GetCashierName,params,msgbuffer);
  return;
end;


global
procedure PMsgStack_OpenShift(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,string text) 
begin
  array string 50 params;

  params[PMsgVar_Text] = text;
  PMsgAddToStack(LSPDr,PMsgCmdConst_OpenShift,params,msgbuffer);    
  return;
end;

global
procedure PMsgStack_SetTime(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,time NewTime) 
begin
  array string 50 params;
  
  params[PMsgVar_Time] = NewTime;
  PMsgAddToStack(LSPDr,PMsgCmdConst_SetTime,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_Cut(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,Boolean CutAll) 
begin
  array string 50 params;
  
//  params["mode"] = 0;
  if(!CutAll) then begin params[PMsgVar_Mode] = "1"; end;

  PMsgAddToStack(LSPDr,PMsgCmdConst_Cut,params,msgbuffer);
  return; 
end;

global
procedure PMsgStack_FiscalReportDateRange(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,date FrDate,date ToDate,integer Complete)
begin
  array string 50 params;
  
  params[PMsgVar_Complete] = Complete;
  params[PMsgVar_FromDate] = FrDate;
  params[PMsgVar_ToDate] = ToDate;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_FiscalReportDateRange,params,msgbuffer);  
  return;
end;

global
procedure PMsgStack_ReportMonthly(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer mode,date rdate)
begin
  array string 50 params;
  
  params[PMsgVar_Date] = rdate;
  params[PMsgVar_Complete] = mode;
  PMsgAddToStack(LSPDr,PMsgCmdConst_ReportMonthly,params,msgbuffer);  
  return;
end;

global
procedure PMsgStack_YearlyReport(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer mode,date rdate)
begin
  array string 50 params;
  
  params[PMsgVar_Date] = rdate;
  params[PMsgVar_Complete] = mode;
  PMsgAddToStack(LSPDr,PMsgCmdConst_ReportYearly,params,msgbuffer);  
  return;
end;



global
procedure PMsgStack_PrintFooter(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin   
  array string 50 params;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_PrintFooter,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_AddDiscount(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer Scope,integer Type,integer Sign,Val amount) 
begin   
  array string 50 params;
  integer cmd;

  params[PMsgVar_TestMode] = 0;

  cmd = PMsgCmdConst_AddDiscountPercentage;
  if(Type == PMsgConst_DiscountSum) then begin
    cmd = PMsgCmdConst_AddDiscountSum;
  end;
  
  params[PMsgVar_Scope] = PMsgConst(LSPDr,0,Scope);
  params[PMsgVar_Type] = PMsgConst(LSPDr,0,Type);
  params[PMsgVar_Sign] = PMsgConst(LSPDr,0,Sign);
  params[PMsgVar_Value] = ValToString(amount,M45Val,"",".",0);
  
  PMsgAddToStack(LSPDr,cmd,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_CancelDiscount(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin   
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_CancelDiscount,msgbuffer);
  return;
end;



global
procedure PMsgStack_StatusRequest(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin     
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_Status,msgbuffer);
  return;
end;

global
procedure PMsgStack_Feed(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer Amount) 
begin   
  array string 50 params;

  params[PMsgVar_Amount] = Amount;
  PMsgAddToStack(LSPDr,PMsgCmdConst_Feed,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_GetVatValue(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer RowNr)
begin
  array string 50 params;

  params[PMsgVar_Row] = RowNr;
  PMsgAddToStack(LSPDr,PMsgCmdConst_GetVATValue,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_PrintText(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,String Text) 
begin   
  array string 50 params;

  params[PMsgVar_TestMode] = 0;  
  params[PMsgVar_Print] = 1; // [0] prnt on receipt: 0 - no, 1 -yes [1] print on control tape: 0 - no, 1 - yes
  params[PMsgVar_Size] = 0;
  params[PMsgVar_Spacing] = 0;
  params[PMsgVar_Mode1] = 0;
  params[PMsgVar_Mode2] = 1;

  params[PMsgVar_Text] = Text;
  
  PMsgAddToStack(LSPDr,PMsgCmdConst_PrintText,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_ReceiptCancel(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_CancelCurrentReceipt,msgbuffer);
  return;
end;

global
procedure PMsgStack_Raw(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,string Hex) 
begin
  array string 250 params;

  params[PMsgVar_Data] = Hex; 

  PMsgAddToStack(LSPDr,PMsgCmdConst_RawHex,params,msgbuffer);
  return;
end;

global
procedure PMsgStack_StatusCode(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_RequestStatusCode,msgbuffer);
  return;
end;

// [COMM/] Grouped commands
global
procedure PMsgStack_ChangeModeEx(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer NewMode,string password) 
begin
  PMsgStack_ExitCurrentMode(LSPDr,msgbuffer);
  PMsgStack_EnterModeEx(LSPDr,msgbuffer,NewMode,password);
  return;
end;

global
procedure PMsgStack_ChangeMode(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,integer NewMode,integer password) 
begin
  PMsgStack_ExitCurrentMode(LSPDr,msgbuffer);
  PMsgStack_EnterMode(LSPDr,msgbuffer,NewMode,password);
  return;
end;

global
procedure PMsgStack_ReceiptAddLine(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty,val vat,string caption) 
begin
  PMsgStack_PrintLine(LSPDr,msgbuffer,caption);
  PMsgStack_AddSalesSumQty(LSPDr,msgbuffer,sum,qty,vat);
  return;
end;

global
procedure PMsgStack_ReceiptCancelLine(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty,string caption) begin
  PMsgStack_PrintLine(LSPDr,msgbuffer,caption);
  PMsgStack_AddCancelSumQty(LSPDr,msgbuffer,sum,qty);
  return;
end;

global
procedure PMsgStack_ReceiptReturnLine(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty,val vat,string caption) begin
  PMsgStack_PrintLine(LSPDr,msgbuffer,caption);
  PMsgStack_AddReturnSumQty(LSPDr,msgbuffer,sum,qty,vat);
  return;
end;

global
procedure PMsgStack_ReceiptRemLine(record LSerialPortDeviceVc LSPDr,var array string msgbuffer,val sum,val qty,string caption) 
begin
  PMsgStack_PrintLine(LSPDr,msgbuffer,caption);
  PMsgStack_RemSumQty(LSPDr,msgbuffer,sum,qty);
  return;
end;

global
procedure PMsgStack_ModeProgramming(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_ModeProgramming,msgbuffer);  
  return;
end;

global
procedure PMsgStack_GetNextDocumentNumber(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_GetNextDocumentNumber,msgbuffer);  
  return;
end;

global
procedure PMsgStack_ModeFiscalReporting(record LSerialPortDeviceVc LSPDr,var array string msgbuffer) 
begin
  PMsgAddToStackNP(LSPDr,PMsgCmdConst_ModeFiscalReporting,msgbuffer);  
  return;
end;