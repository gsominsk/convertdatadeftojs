external procedure CHDFMPOSOpenDrawer(record LSerialPortDeviceVc,Boolean);
remote function Integer OpenDrawer_POSNETProtocol_TCP(record LSerialPortDeviceVc);
external updating function Boolean RestAccVc_PrintToFiscalControlUnit(var record RestAccVc);
remote updating procedure StorePOSJournalEntry(string,string,string,string,Integer);
external function Boolean HasFiscalPrinter();
external updating procedure RestAccVc_PrintToFiscalPrinter(var record RestAccVc,Boolean);
external procedure POSNETOpenDrawer(record LSerialPortDeviceVc,Boolean);
external updating procedure IVCashVc_PrintToFiscalPrinter(var record IVCashVc,Boolean);
external updating function Boolean IVCashVc_PrintToFiscalControlUnit(var record IVCashVc);
external updating function Boolean IVVc_PrintToFiscalControlUnit(var record IVVc);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external procedure ExtractObj(string,var Integer,var string);
external updating procedure IVVc_PrintToFiscalPrinter(var record IVVc,Boolean);
external procedure HASARReset(record LSerialPortDeviceVc);
external procedure HASARPL23FPANReset(record LSerialPortDeviceVc);
external procedure EpsonReset(record LSerialPortDeviceVc);
external procedure TSLVersion(record LSerialPortDeviceVc);
external procedure TSLDiagnostics(record LSerialPortDeviceVc);
external procedure TSLStatus(record LSerialPortDeviceVc);
external procedure TSLTerminateReceipt(record LSerialPortDeviceVc);
external procedure PMsg_Status(record LSerialPortDeviceVc);
external procedure PMsg_Diagnostics(record LSerialPortDeviceVc); 
external procedure PMsg_TerminateReceipt(record LSerialPortDeviceVc); 
external function LongInt PMsg_SyncDateAndTime(record LSerialPortDeviceVc,date,time);
external procedure PMsg_Status(record LSerialPortDeviceVc); 

global
updating procedure IVVc_SendToSerialPortDevices(Integer type,LongInt stat,record IVVc IVr,record IVVc IV2r)
begin
  Boolean printf,testf;
  Integer ltype;
  record IVVc credIVr;
  
  if (HasFiscalPrinter==false) then begin
    goto LIVVc_SendToSerialPortDevices;
  end;
  ltype = type;
  switch (ltype) begin
    case kSerialPortDeviceClassReceiptPrinter:
      switch (stat) begin
        case Rs_insert:
          if (IVr.OKFlag!=0) then begin
            printf = true;
          end;
        case Rs_update:
          if ((IV2r.Invalid==0) and (IVr.Invalid==0)) then begin
            if ((IV2r.OKFlag==0) and (IVr.OKFlag!=0)) then begin
              printf = true;
            end;
          end;
      end;
    case kSerialPortDeviceClassFiscalPrinter:
      switch (stat) begin
        case Rs_insert:
          if (IVr.OKFlag!=0) then begin
            printf = true;
          end;
        case Rs_update:
          if ((IV2r.Invalid==0) and (IVr.Invalid==0)) then begin
            if ((IV2r.OKFlag==0) and (IVr.OKFlag!=0)) then begin
              printf = true;
            end;
          end;
      end;
    case kSerialPortDeviceClassFiscalControlUnit:
      switch (stat) begin
        case Rs_normal:
          testf = true;
          if (IVr.OKFlag==0) then begin testf = false; end;
          if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              credIVr.SerNr = IVr.CredInv;
              if (ReadFirstMain(credIVr,1,true)) then begin
                if (credIVr.InvType!=kInvoiceTypeCash and credIVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = false; end;
              end;
            end else begin
              testf = false;
            end;
          end;
//          if (IVr.FiscalFlag==0) then begin testf = false; end;
          if (testf) then begin
            printf = true;
          end;
        case Rs_insert:
          testf = true;
          if (IVr.OKFlag==0) then begin testf = false; end;
          if (IVr.InvType!=kInvoiceTypeCash or IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              credIVr.SerNr = IVr.CredInv;
              if (ReadFirstMain(credIVr,1,true)) then begin
                if (credIVr.InvType!=kInvoiceTypeCash and credIVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = false; end;
              end;
            end else begin
              testf = false;
            end;
          end;
//          if (IVr.FiscalFlag==0) then begin testf = false; end;
          if (testf) then begin
            printf = true;
          end;
        case Rs_update:
          testf = true;
          if ((IV2r.Invalid!=0) or (IVr.Invalid!=0)) then begin testf = false; end;          
          if ((IV2r.OKFlag!=0) or (IVr.OKFlag==0)) then begin testf = false; end;
          if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
            if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              credIVr.SerNr = IVr.CredInv;
              if (ReadFirstMain(credIVr,1,true)) then begin
                if (credIVr.InvType!=kInvoiceTypeCash and credIVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = false; end;
              end;
            end else begin
              testf = false;
            end;
          end;
//          if (IVr.FiscalFlag==0) then begin testf = false; end;
          if (testf) then begin
            printf = true;
          end;
      end;
  end;
  if (printf) then begin
    switch (ltype) begin
      case kSerialPortDeviceClassReceiptPrinter:
//         PrintToReceiptPrinter(IVr);
      case kSerialPortDeviceClassFiscalPrinter:
        IVVc_PrintToFiscalPrinter(IVr,false);
      case kSerialPortDeviceClassFiscalControlUnit:
        IVVc_PrintToFiscalControlUnit(IVr);
    end;
  end;
LIVVc_SendToSerialPortDevices:;
  return;
end;

global
updating procedure IVCashVc_SendToSerialPortDevices(Integer type,LongInt stat,record IVCashVc IVCashr,record IVCashVc IVCash2r)
begin
  Boolean printf,testf;
  Integer ltype;
  
  if (HasFiscalPrinter==false) then begin
    goto LIVCashVc_SendToSerialPortDevices;
  end;
  ltype = type;
  switch (ltype) begin
    case kSerialPortDeviceClassReceiptPrinter:
      if (IVCashr.FiscalFlag!=0) then begin
        ltype = kSerialPortDeviceClassFiscalPrinter;
      end;
  end;

  switch (ltype) begin
    case kSerialPortDeviceClassReceiptPrinter:
      switch (stat) begin
        case Rs_insert:
          if (IVCashr.OKFlag!=0) then begin
            printf = true;
          end;
        case Rs_update:
          if ((IVCash2r.Invalid==0) and (IVCashr.Invalid==0)) then begin
            if ((IVCash2r.OKFlag==0) and (IVCashr.OKFlag!=0)) then begin
              printf = true;
            end;
          end;
      end;
    case kSerialPortDeviceClassFiscalPrinter:
      switch (stat) begin
        case Rs_insert:
          if (IVCashr.OKFlag!=0) then begin
            printf = true;
          end;
        case Rs_update:
          if ((IVCash2r.Invalid==0) and (IVCashr.Invalid==0)) then begin
            if ((IVCash2r.OKFlag==0) and (IVCashr.OKFlag!=0)) then begin
              printf = true;
            end;
          end;
      end;
    case kSerialPortDeviceClassFiscalControlUnit:
      switch (stat) begin
        case Rs_normal:
          testf = true;
          if (IVCashr.OKFlag==0) then begin testf = false; end;          
          if (testf) then begin
            printf = true;
          end;
        case Rs_insert:
          testf = true;
          if (IVCashr.OKFlag==0) then begin testf = false; end;          
          if (testf) then begin
            printf = true;
          end;
        case Rs_update:
          testf = true;
          if ((IVCash2r.Invalid!=0) or (IVCashr.Invalid!=0)) then begin testf = false; end;          
          if ((IVCash2r.OKFlag!=0) or (IVCashr.OKFlag==0)) then begin testf = false; end;          
          if (testf) then begin
            printf = true;
          end;
      end;
  end;
  if (IVCashr.Invalid!=0) then begin
    printf = false;
  end;
  if (printf) then begin
    switch (ltype) begin
      case kSerialPortDeviceClassReceiptPrinter:
      case kSerialPortDeviceClassFiscalPrinter:
        IVCashVc_PrintToFiscalPrinter(IVCashr,false);
      case kSerialPortDeviceClassFiscalControlUnit:
        IVCashVc_PrintToFiscalControlUnit(IVCashr);
    end;
  end;
LIVCashVc_SendToSerialPortDevices:;
  return;
end;

global
updating procedure RestAccVc_SendToSerialPortDevices(Integer type,LongInt stat,record RestAccVc RestAccr,record RestAccVc RestAcc2r)
begin
  Boolean printf,testf;
  Integer ltype;
  
  if (HasFiscalPrinter==false) then begin
    goto LRestAccVc_SendToSerialPortDevices;
  end;
  ltype = type;

  switch (ltype) begin
    case kSerialPortDeviceClassReceiptPrinter:
      if (RestAccr.FiscalFlag!=0) then begin
        ltype = kSerialPortDeviceClassFiscalPrinter;
      end;
  end;

  switch (ltype) begin
    case kSerialPortDeviceClassReceiptPrinter:
      switch (stat) begin
        case Rs_insert:
          if (RestAccr.Closed!=0) then begin
            printf = true;
          end;
        case Rs_update:
          if ((RestAcc2r.Invalid==0) and (RestAccr.Invalid==0)) then begin
            if ((RestAcc2r.Closed==0) and (RestAccr.Closed!=0)) then begin
              printf = true;
            end;
          end;
      end;
    case kSerialPortDeviceClassFiscalPrinter:
      switch (stat) begin
        case Rs_insert:
          if (RestAccr.Closed!=0) then begin
            printf = true;
          end;
        case Rs_update:
          if ((RestAcc2r.Invalid==0) and (RestAccr.Invalid==0)) then begin
            if ((RestAcc2r.Closed==0) and (RestAccr.Closed!=0)) then begin
              printf = true;
            end;
          end;
      end;
    case kSerialPortDeviceClassFiscalControlUnit:
      switch (stat) begin
        case Rs_normal:
          testf = true;
          if (RestAccr.Closed==0) then begin testf = false; end;          
          if (testf) then begin
            printf = true;
          end;
        case Rs_insert:
          testf = true;
          if (RestAccr.Closed==0) then begin testf = false; end;          
          if (testf) then begin
            printf = true;
          end;
        case Rs_update:
          testf = true;
          if ((RestAcc2r.Invalid!=0) or (RestAccr.Invalid!=0)) then begin testf = false; end;          
          if ((RestAcc2r.Closed!=0) or (RestAccr.Closed==0)) then begin testf = false; end;          
          if (testf) then begin
            printf = true;
          end;
      end;
  end;
  if (RestAccr.Invalid!=0) then begin
    printf = false;
  end;
  if (printf) then begin
    switch (ltype) begin
      case kSerialPortDeviceClassReceiptPrinter:
      case kSerialPortDeviceClassFiscalPrinter:
        RestAccVc_PrintToFiscalPrinter(RestAccr,false);
      case kSerialPortDeviceClassFiscalControlUnit:
        RestAccVc_PrintToFiscalControlUnit(RestAccr);
    end;
  end;
LRestAccVc_SendToSerialPortDevices:;
  return;
end;

global
function string 255 GenerateSerialPortDeviceCommand(string escseq)
begin
  string 255 res;
  string 10 cmd;
  Integer pos;
  
  pos = 0;
  ExtractObj(escseq,pos,cmd);
  while (nonblank(cmd)) begin
    res = res & uchr(StringToInt(cmd));
    ExtractObj(escseq,pos,cmd);
  end;
  GenerateSerialPortDeviceCommand = res;
  return;
end;

global
updating procedure LogCashDrawerAction(string user,string locmach,string drawer,string tid,Integer ac)
begin
  asyncremote.StorePOSJournalEntry(user,locmach,drawer,tid,ac);
  return;
end;

global
procedure OpenCashDrawer()
begin
  String 20 CashBox;
  Integer Error;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  Boolean openf;
  Integer type;
  
  if (UserCanAction("OpenCashDrawer",IsStandardProduct==true)) then begin
    BlockLoad(LMb);  
    openf = false;
    if (FindLocalSerialPortDevice(kSerialPortDeviceClassDrawer,-1,LMb.LocalMachineCode,LSPDr)) then begin  
//      MessageBox(20990,": " & StringFromSet(413,kSerialPortDeviceClassDrawer));
// must be possible to use system without drawers 
      type = kSerialPortDeviceClassDrawer;
      openf = true;
    end;
    if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalPrinter,-1,LMb.LocalMachineCode,LSPDr)) then begin  
      type = kSerialPortDeviceClassFiscalPrinter;
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterPOSNET:
          openf = true;
        case kSerialPortDeviceModelFiscPrinterPOSNETTCPIP:
          openf = true;
        case kSerialPortDeviceModelFiscPrinterPOSNETwVATNr:
          openf = true;
        case kSerialPortDeviceModelFiscPrinterPOSNET1:
          openf = true;
        case kSerialPortDeviceModelFiscPrinterPOSNET2:
          openf = true;
        case kSerialPortDeviceModelFiscPrinterOPTIMUS:
          openf = true;
        case kSerialPortDeviceModelFiscPrinterPOSNETThermal5V:
          openf = true;
        case kSerialPortDeviceModelVirtualFiscPrinterCHDFMPOS:
          openf = true;
        otherwise
          openf = false;
      end;
    end;
    if (openf==false) then begin
      goto LOpenCashDrawer;
    end;
    switch (type) begin
      case kSerialPortDeviceClassDrawer:
        CashBox = GenerateSerialPortDeviceCommand(LSPDr.EscSeqBefore);
        if (blank(CashBox)) then begin
          switch (LSPDr.Printer) begin
            case kSerialPortDeviceModelPrinterEPSONTMU210:
              CashBox = chr(27) & chr(112) & chr(0);
            case kSerialPortDeviceModelPrinterSTARTSP210:
              CashBox = chr(27) & chr(112) & chr(0) & chr(25) & chr(250);//ESC p       
          end;
        end;
        Error = OpenComPort(1,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);
        Error = OutComPort(1,CashBox);
        Error = CloseComPort(1);
        queued.LogCashDrawerAction(CurrentUser,LMb.LocalMachineCode,"",LMb.TerminalID,kPOSActionOpenDrawer);
      case kSerialPortDeviceClassFiscalPrinter:
        switch (LSPDr.Printer) begin
          case kSerialPortDeviceModelFiscPrinterPOSNET:
            POSNETOpenDrawer(LSPDr,true);
          case kSerialPortDeviceModelFiscPrinterPOSNETTCPIP:
            OpenDrawer_POSNETProtocol_TCP(LSPDr);
          case kSerialPortDeviceModelFiscPrinterPOSNETwVATNr:
            POSNETOpenDrawer(LSPDr,true);
          case kSerialPortDeviceModelFiscPrinterPOSNET1:
            POSNETOpenDrawer(LSPDr,true);
          case kSerialPortDeviceModelFiscPrinterPOSNET2:
            POSNETOpenDrawer(LSPDr,true);
          case kSerialPortDeviceModelFiscPrinterOPTIMUS:
            POSNETOpenDrawer(LSPDr,true);
          case kSerialPortDeviceModelFiscPrinterPOSNETThermal5V:
            POSNETOpenDrawer(LSPDr,true);
          case kSerialPortDeviceModelVirtualFiscPrinterCHDFMPOS:
            CHDFMPOSOpenDrawer(LSPDr,true);
        end;
    end;
  end else begin
    if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
      MessageBox(1274,StringFromStringSet(3,"OpenCashDrawer"));
    end;
  end;
LOpenCashDrawer:;  
  return;
end;

global
procedure OpenCashDrawer_IVCashVc(record IVCashVc IVCashr)
begin
  record RestPMBlock RPMb;
  row RestPMBlock RPMrw;
  Integer ri,rrwcnt;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  Boolean opendrawerf;
  record DefCashBlock DCb;
  
  BlockLoad(RPMb);
  rrwcnt = MatRowCnt(RPMb);
  if (IVCashr.CashValue>0) then begin
    BlockLoad(DCb);
    for (ri=0;ri<rrwcnt;ri=ri+1) begin
      MatRowGet(RPMb,ri,RPMrw);
      if (DCb.DefCashPayMode==RPMrw.PMCode) and ((IVCashr.LocalMachineCode==RPMrw.MachineName) or blank(RPMrw.MachineName)) then begin
        opendrawerf = nonblank(RPMrw.Drawers);
        if (opendrawerf) then begin
          goto LOpenCashDrawer_IVCashVc;
        end;
      end;
    end;
  end;
  if (IVCashr.RecValue>0) then begin
    for (ri=0;ri<rrwcnt;ri=ri+1) begin
      MatRowGet(RPMb,ri,RPMrw);
      if (IVCashr.PayDeal==RPMrw.PMCode) and ((IVCashr.LocalMachineCode==RPMrw.MachineName) or blank(RPMrw.MachineName)) then begin
        opendrawerf = nonblank(RPMrw.Drawers);
        if (opendrawerf) then begin
          goto LOpenCashDrawer_IVCashVc;
        end;
      end;
    end;
  end;
  if (IVCashr.RecValue2>0) then begin
    for (ri=0;ri<rrwcnt;ri=ri+1) begin
      MatRowGet(RPMb,ri,RPMrw);
      if (IVCashr.PayDeal2==RPMrw.PMCode) and ((IVCashr.LocalMachineCode==RPMrw.MachineName) or blank(RPMrw.MachineName)) then begin
        opendrawerf = nonblank(RPMrw.Drawers);
        if (opendrawerf) then begin
          goto LOpenCashDrawer_IVCashVc;
        end;
      end;
    end;
  end;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if ((IVCashrw.stp==kInvoiceRowTypeCashPayment) or
       (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) or
       (IVCashrw.stp==kInvoiceRowTypeLoyaltyPointsPayment) or
       (IVCashrw.stp==kInvoiceRowTypeGiftVoucherPayment) or
       (IVCashrw.stp==kInvoiceRowTypeChequePayment)) then begin
       for (ri=0;ri<rrwcnt;ri=ri+1) begin
         MatRowGet(RPMb,ri,RPMrw);
         if (IVCashrw.PayMode==RPMrw.PMCode) and ((IVCashr.LocalMachineCode==RPMrw.MachineName) or blank(RPMrw.MachineName) or blank(IVCashr.LocalMachineCode)) then begin
           opendrawerf = nonblank(RPMrw.Drawers);
           if (opendrawerf) then begin
             goto LOpenCashDrawer_IVCashVc;
           end;
         end;
       end;
    end;
  end;
LOpenCashDrawer_IVCashVc:;
  if (opendrawerf) then begin
    OpenCashDrawer;
  end;
  return;
end;

global
procedure OpenCashDrawer_RestAccVc(record RestAccVc RestAccr)
begin
  OpenCashDrawer;
  return;
end;

global
procedure OpenCashDrawer_IVVc(record IVVc IVr)
begin
  OpenCashDrawer;
  return;
end;

global
procedure ResetLSerialPportDevice()
begin
  record LSerialPortDeviceVc LSPDr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,LSPDr);
  
  switch (LSPDr.DeviceType) begin
    case kSerialPortDeviceClassFiscalPrinter:
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterHASAR: // Fiscal Printer Hasar (Argentina)
          HASARReset(LSPDr);
        case kSerialPortDeviceModelFiscPrinterHASARPL23F: // Fiscal Printer Hasar (Panama)
          HASARPL23FPANReset(LSPDr);
        case 17: // Fiscal Printer Epson (Argentina)
          EpsonReset(LSPDr);
      otherwise
        Beep;
      end;
  otherwise
    Beep;
  end;
  
  return;
end;

global
procedure LSerialPportDeviceSyncDateTime()
begin
  record LSerialPortDeviceVc LSPDr;
  Integer wn;
  LongInt err;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,LSPDr);
  
  switch (LSPDr.DeviceType) begin
    case kSerialPortDeviceClassFiscalPrinter:
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterFPRINT02K:
          err = PMsg_SyncDateAndTime(LSPDr,CurrentDate,CurrentTime);
          if (err!=0) then begin
            MessageBox(err,"");
          end;
        otherwise
          Beep;
      end;
  otherwise
    Beep;
  end;
  return;
end;

global
procedure LSerialPportDeviceStatus()
begin
  record LSerialPortDeviceVc LSPDr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,LSPDr);
  
  switch (LSPDr.DeviceType) begin
    case kSerialPortDeviceClassFiscalPrinter:
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterFPRINT02K:
          PMsg_Status(LSPDr);
        otherwise
          Beep;
      end;
  otherwise
    Beep;
  end;
  return;
end;

global
procedure VersionLSerialPportDevice()
begin
  record LSerialPortDeviceVc LSPDr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,LSPDr);
  
  switch (LSPDr.DeviceType) begin
    case kSerialPortDeviceClassFiscalPrinter:
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterTSLFP05:
          TSLVersion(LSPDr);
      otherwise
        Beep;
      end;
  otherwise
    Beep;
  end;
  
  return;
end;

global
procedure DiagnosticsLSerialPportDevice()
begin
  record LSerialPortDeviceVc LSPDr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,LSPDr);
  
  switch (LSPDr.DeviceType) begin
    case kSerialPortDeviceClassFiscalPrinter:
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterTSLFP05:
          TSLDiagnostics(LSPDr);
        case kSerialPortDeviceModelFiscPrinterFPRINT02K:
          PMsg_Diagnostics(LSPDr);
      otherwise
        Beep;
      end;
  otherwise
    Beep;
  end;
  
  return;
end;

global
procedure StatusLSerialPportDevice()
begin
  record LSerialPortDeviceVc LSPDr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,LSPDr);
  
  switch (LSPDr.DeviceType) begin
    case kSerialPortDeviceClassFiscalPrinter:
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterTSLFP05:
          TSLStatus(LSPDr);
        case kSerialPortDeviceModelFiscPrinterFPRINT02K:
          PMsg_Status(LSPDr);
      otherwise
        Beep;
      end;
  otherwise
    Beep;
  end;
  
  return;
end;

global
procedure TerminateReceiptLSerialPportDevice()
begin
  record LSerialPortDeviceVc LSPDr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,LSPDr);
  
  switch (LSPDr.DeviceType) begin
    case kSerialPortDeviceClassFiscalPrinter:
      switch (LSPDr.Printer) begin
        case kSerialPortDeviceModelFiscPrinterTSLFP05:
          TSLTerminateReceipt(LSPDr);
        case kSerialPortDeviceModelFiscPrinterFPRINT02K:
          PMsg_TerminateReceipt(LSPDr);
      otherwise
        Beep;
      end;
  otherwise
    Beep;
  end;
  
  return;
end;
