external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer InString2(string,string);
external function Integer CheckPOSNETWrite(LongInt,string);
external procedure AddPOSNETVal(record SysFormatBlock,val,Integer,Boolean,var string);
external procedure AddPOSNETInteger(Integer,Boolean,var string);
external function string 255 NumToHex2(string,Integer);

function Integer FindInString(string s1,string c1)
BEGIN
  Integer res;
  Integer i;
  
  res = -1;
  for(i=1;i<=len(s1);i=i+1) begin
    if (res==-1) then begin
      if (CharacterMatch(s1,c1,i)) then begin
        res = i;
      end;
    end;  
  end;
  FindInString = res;
  RETURN;
END;

procedure PutSpecChar(var string res,Integer i,string ch)
BEGIN
  string 255 tstr,tstr2;
  
  tstr = res;
  res = Left(tstr,i-1);  
  res = res & ch;
  tstr2 = Right(tstr,len(tstr)-i);
  res = res & tstr2;
  RETURN;
END;

global
procedure WinToMaz(string instr,var string res)
BEGIN 
  res = instr;
  RETURN;
END;

global
function Integer GetPOSNETVATRates(string replystr,var Array val FPVATRates)
BEGIN
  Integer res,i,l,what;
  string 1 nc;
  string 255 rate1str,rate2str,rate3str,rate4str,rate5str,rate6str,rate7str;
  record SysFormatBlock SysFormatRec;
  record CashPrintBlock CashPrintRec;
   
  BlockLoad(SysFormatRec);
  BlockLoad(CashPrintRec);
  what = -1;
  l = len(replystr);
  for (i=0;i<=l;i=i+1) begin
    nc = Mid(replystr,i,1);
    switch (what) begin
      case 0:
        if (((asc(nc)>=asc("0")) and (asc(nc)<=asc("9")))) or (nc==".") then begin
          rate1str = rate1str & nc;
        end;
      case 1:
        if (((asc(nc)>=asc("0")) and (asc(nc)<=asc("9")))) or (nc==".") then begin
          rate2str = rate2str & nc;
        end;
      case 2:
        if (((asc(nc)>=asc("0")) and (asc(nc)<=asc("9")))) or (nc==".") then begin
          rate3str = rate3str & nc;
        end;
      case 3:
        if (((asc(nc)>=asc("0")) and (asc(nc)<=asc("9")))) or (nc==".") then begin
          rate4str = rate4str & nc;
        end;
      case 4:
        if (((asc(nc)>=asc("0")) and (asc(nc)<=asc("9")))) or (nc==".") then begin
          rate5str = rate5str & nc;
        end;
        if (CashPrintRec.FiscalPrinter!=4) then begin
          goto LGetPOSNETVATRates;
        end;
      case 5:
        if (((asc(nc)>=asc("0")) and (asc(nc)<=asc("9")))) or (nc==".") then begin
          rate6str = rate6str & nc;
        end;
      case 6:
        if (((asc(nc)>=asc("0")) and (asc(nc)<=asc("9")))) or (nc==".") then begin
          rate7str = rate7str & nc;
        end;
    end;
    if (nc=="/") then begin
      what = what + 1;
    end;
  end;
LGetPOSNETVATRates:;  
  i = FindInString(rate1str,".");
  if (i>-1) then begin
    PutSpecChar(rate1str,i,SysFormatRec.decimalPt);
  end;
  i = FindInString(rate2str,".");
  if (i>-1) then begin
    PutSpecChar(rate2str,i,SysFormatRec.decimalPt);
  end;
  i = FindInString(rate3str,".");
  if (i>-1) then begin
    PutSpecChar(rate3str,i,SysFormatRec.decimalPt);
  end;
  i = FindInString(rate4str,".");
  if (i>-1) then begin
    PutSpecChar(rate4str,i,SysFormatRec.decimalPt);
  end;
  i = FindInString(rate5str,".");
  if (i>-1) then begin
    PutSpecChar(rate5str,i,SysFormatRec.decimalPt);
  end;
  if (CashPrintRec.FiscalPrinter==4) then begin
    i = FindInString(rate6str,".");
    if (i>-1) then begin
      PutSpecChar(rate6str,i,SysFormatRec.decimalPt);
    end;
    i = FindInString(rate7str,".");
    if (i>-1) then begin
      PutSpecChar(rate7str,i,SysFormatRec.decimalPt);
    end;
  end;
  FPVATRates[0] = StringToVal(rate1str,M4Val);
  FPVATRates[1] = StringToVal(rate2str,M4Val);
  FPVATRates[2] = StringToVal(rate3str,M4Val);
  FPVATRates[3] = StringToVal(rate4str,M4Val);
  FPVATRates[4] = StringToVal(rate5str,M4Val);
  if (CashPrintRec.FiscalPrinter==4) then begin
    FPVATRates[5] = StringToVal(rate6str,M4Val);
    FPVATRates[6] = StringToVal(rate7str,M4Val);
  end;
  GetPOSNETVATRates = res;
  RETURN;
END;

global
procedure GetPOSNETVATCode(Array val prates,Integer FiscalPrinter,record VATCodeBlock VATCodeRec,string vatcode, var string fpvatcode)
BEGIN
  Integer i,j,vatcnt;
  row VATCodeBlock vatrw;
  Array string 1 FPVATCODES;
  Integer vratescnt;
  string 1 novat;
  
  switch (FiscalPrinter) begin
    case kSerialPortDeviceModelFiscPrinterPOSNET:
      FPVATCODES[0] = "0";
      FPVATCODES[1] = "1";
      FPVATCODES[2] = "2";
      FPVATCODES[3] = "3";
      FPVATCODES[4] = "4";
      FPVATCODES[5] = "5";
      FPVATCODES[6] = "6";
      vratescnt = 4;
    case kSerialPortDeviceModelFiscPrinterPOSNETTCPIP:
      FPVATCODES[0] = "0";
      FPVATCODES[1] = "1";
      FPVATCODES[2] = "2";
      FPVATCODES[3] = "3";
      FPVATCODES[4] = "4";
      FPVATCODES[5] = "5";
      FPVATCODES[6] = "6";
      vratescnt = 4;
    case kSerialPortDeviceModelFiscPrinterPOSNETwVATNr:
      FPVATCODES[0] = "0";
      FPVATCODES[1] = "1";
      FPVATCODES[2] = "2";
      FPVATCODES[3] = "3";
      FPVATCODES[4] = "4";
      FPVATCODES[5] = "5";
      FPVATCODES[6] = "6";
      vratescnt = 4;
    case 4:
      FPVATCODES[0] = "A";
      FPVATCODES[1] = "B";
      FPVATCODES[2] = "C";
      FPVATCODES[3] = "D";
      FPVATCODES[4] = "E";
      FPVATCODES[5] = "F";
      FPVATCODES[6] = "G";
      vratescnt = 6;
      novat = "G";
    case 5:
      FPVATCODES[0] = "1";
      FPVATCODES[1] = "2";
      FPVATCODES[2] = "3";
      FPVATCODES[3] = "4";
      FPVATCODES[4] = "5";
      vratescnt = 4;
    otherwise
      FPVATCODES[0] = "A";
      FPVATCODES[1] = "B";
      FPVATCODES[2] = "C";
      FPVATCODES[3] = "D";
      FPVATCODES[4] = "Z";
      vratescnt = 4;
      novat = "Z";
  end;
  if (nonblank(vatcode)) then begin
    fpvatcode = "";
    vatcnt = MatRowCnt(VATCodeRec);
    if (vatcnt==0) then begin goto LGetPOSNETVATCode; end;
    for (i=0;i<vatcnt;i=i+1) begin
      MatRowGet(VATCodeRec,i,vatrw);
      if (vatrw.VATCode==vatcode) then begin
        switch (FiscalPrinter) begin
          case kSerialPortDeviceModelFiscPrinterPOSNET: ;
          case kSerialPortDeviceModelFiscPrinterPOSNETTCPIP: ;
          case 5: ;
          otherwise
            if (blank(vatrw.ExVatpr)) then begin
              fpvatcode = novat;
              goto LGetPOSNETVATCode;
            end;
        end;
        for (j=0;j<vratescnt;j=j+1) begin
          if (prates[j]==vatrW.ExVatpr) then begin
            fpvatcode = FPVATCODES[j];
            goto LGetPOSNETVATCode;
          end;
        end;
      end;   
    end;
  end;
LGetPOSNETVATCode:;  
  RETURN;
END;

global
function Integer GetPOSNETDate(string replystr,var Integer year,var Integer month,var Integer day)
BEGIN
  Integer res,i,l,what;
  string 1 nc;
  string 255 tstrY,tstrM,tstrD;
  Boolean getdatef;
  
  l = len(replystr);
  for (i=0;i<=l;i=i+1) begin
    nc = Mid(replystr,i,1);
    if (getdatef) then begin
      switch (what) begin
        case 0:
          if ((asc(nc)>=asc("0")) and (asc(nc)<=asc("9"))) then begin
            tstrY = tstrY & nc;
          end;
        case 1:
          if ((asc(nc)>=asc("0")) and (asc(nc)<=asc("9"))) then begin
            tstrM = tstrM & nc;
          end;
        case 2:
          if ((asc(nc)>=asc("0")) and (asc(nc)<=asc("9"))) then begin
            tstrD = tstrD & nc;
          end;
        case 3:
          goto LGetPOSNETDate;
      end;
      if ((nc==";") and (nonblank(tstrY))) then begin
        what = what + 1;
      end;
    end;
    if (asc(nc)==asc("C")) then begin
      getdatef = true;
    end;
  end;
LGetPOSNETDate:;  
  year = 2000 + StringToInt(tstrY);
  month = StringToInt(tstrM);
  day = StringToInt(tstrD);
  GetPOSNETDate = res;
  RETURN;
END;

global
function Integer GetPOSNETErrorCode(string replystr)
BEGIN
  Integer res,i,l,where;
  string 1 nc;
  string 255 tstr;
  
  l = len(replystr);
  where = InString2(replystr,"P1#X");
  if (where<0) then begin where = 0; end;
  for (i=5+where;i<=l;i=i+1) begin
    nc = Mid(replystr,i,1);
    if ((asc(nc)>=asc("0")) and (asc(nc)<=asc("9"))) then begin
      tstr = tstr & nc;
    end;  
    if (nc==";") then begin i=l+1; end;
  end;
  res = StringToInt(tstr);
/*
  if (nonblank(tstr)) then begin
    if (res==0) then begin
      res = 12001;
    end;
  end;
*/
  GetPOSNETErrorCode = res;
  RETURN;
END;


procedure M4ILMidstr(string ostr,var string res,Integer pos,Integer l)
BEGIN
  Integer tc,ill,lp;
  string 255 tstr;

  lp = pos;
  ill = len(ostr);
L11LOOPBEGIN:
  if (tc>=l) then begin
    goto L22LOOPEND;
  end;
  if (lp>ill) then begin
    goto L22LOOPEND;
  end;  
  tstr = tstr & Mid(ostr,lp,1);
  lp = lp + 1;
  tc = tc + 1;
  goto L11LOOPBEGIN;
L22LOOPEND:
  res = tstr;
  RETURN;
END;

global
procedure POSNETGetByte(string instr,Integer bytesnr,Integer byte,var string res)
BEGIN
  M4ILMidstr(instr,res,bytesnr*2-byte*2,2);
  RETURN;  
END;

global
function Integer FindCharPosition(string tstr,string chars)
BEGIN
  Integer res;
  Integer i,slen;
  
  slen = len(tstr);
  for (i=slen;i>=0;i=i-1) begin
    if (Mid(tstr,i,1)==chars) then begin
       res = i;
       goto LFindCharPosition;
    end;
  end;
LFindCharPosition:;  
  FindCharPosition = res;
  RETURN;
END;

global
function LongInt POSNETHexToLong(string instr)
BEGIN
  LongInt res;
  string 16 hexs;
  Integer pos,slen,i,t;

  res = 0;
  slen = len(instr);
  hexs = "0123456789ABCDEF";
  for (i=slen;i>0;i=i-1) begin
    pos = FindCharPosition(hexs,Mid(instr,i-1,1));
    res = res + pos*Power(16,(slen-i));
  end; 
  POSNETHexToLong = res; 
  RETURN;  
END;

global
function Integer POSNETInString(string a1,string b1)
BEGIN
  Integer res;
  LongInt i,j;
  LongInt im,jm;
  string 255 a,b;
  string 1 ac,bc;

  res = -1;
  a = a1;
  b = b1;
  if (nonblank(b)) then begin
    a = UpperCase(a);
    b = UpperCase(b);
    jm = len(b);
    im = len(a)-jm+1;
    for (i = 1 ; i<=im ; i=i+1) begin
      for (j = 1 ; j<=jm ;j=j+1) begin
//        if (a[i+j-1]!=b[j]) then begin goto L11; end;
        ac = Mid(a,i+j-2,1);
        bc = Mid(b,j-1,1);
        if (ac!=bc) then begin
          goto LInS11;
        end;
      end;  
      res = i-1;
      goto LPOSNETInString;
LInS11:;
    end;
    res = -1;
  end;
LPOSNETInString:;
  POSNETInString = res;
  RETURN;
END;

global
procedure POSNETCheckSum(var string CtrlSeq)
BEGIN
  Integer i,l;
  Integer c;
  string 1 ENQs;
  string 2 bytestr,tstr,ST;
  string 255 t1;
  string 1 ch;
  
  ENQs = chr(5);
  ST  = chr(27) & chr(92);
  l = len(CtrlSeq);
  c = 255;
  for (i=2;i<=len(CtrlSeq);i=i+1) begin
    ch = Mid(CtrlSeq,i,1);
    ch = ConvertStringToCodePage("MAZOVIA",ch);
	c = BitXor(c,asc(ch));
  end;
  t1 = NumToHex2(c,8);
  POSNETGetByte(t1,4,1,bytestr);
  tstr = bytestr;
  if (len(bytestr)==1) then begin
    bytestr = "0";
    bytestr = bytestr & tstr;
  end;
  CtrlSeq = CtrlSeq & bytestr;
  CtrlSeq = CtrlSeq & ST;
  if (true) then begin
    CtrlSeq = CtrlSeq & ENQs;
  end;
  RETURN;
END;

global
function Integer POSNETAcceptBOS_OPTIMUS(record IVVc IVr)
BEGIN
  Integer res;
  Integer footlines;
  record CashPrintBlock CashPrintRec;
  record SysFormatBlock SysFormatRec;
  string 255 CtrlSeq,tstr,t2;
  string 3 DCS,ST,LBTREXIT;
  string 1 CR;
  LongInt LONG_DELAY;
  
  LONG_DELAY = 45;
  CR = chr(13);  
  LBTREXIT = "$" & "y";
  DCS = chr(27) & "P";
  ST  = chr(27) & chr(92);

  BlockLoad(SysFormatRec);
  BlockLoad(CashPrintRec);
  if (nonblank(CashPrintRec.Foot0)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot1)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot2)) then begin
//    footlines = footlines + 1;
  end;
  footlines = 0;
  CtrlSeq = DCS;
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,false,CtrlSeq);
  CtrlSeq = CtrlSeq & LBTREXIT;
  CtrlSeq = CtrlSeq & "Z  " & CR;
  t2 = CurrentUser;
  if (len(t2)<3) then begin
    t2 = t2 & " ";
  end;
  WinToMaz(t2,tstr);
  CtrlSeq = CtrlSeq & tstr;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & IVr.SerNr & CR;
//  AddPOSNETStrings(CashPrintRec,IVr,false,CtrlSeq);//xx
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  CtrlSeq = CtrlSeq & "10/2/0/97";
  POSNETCheckSum(CtrlSeq);
//StopAlert("AcceptOPT " & CtrlSeq);

  res = CheckPOSNETWrite(LONG_DELAY,CtrlSeq);
  POSNETAcceptBOS_OPTIMUS = res;
  RETURN;
END;

global
function Integer POSNETAcceptBOS_POSNETY(record IVVc IVr)
BEGIN
  Integer res;
  Integer footlines;
  record CashPrintBlock CashPrintRec;
  record SysFormatBlock SysFormatRec;
  string 255 CtrlSeq,tstr,t2;
  string 3 DCS,ST,LBTREXIT;
  string 1 CR;
  LongInt LONG_DELAY;
  
  LONG_DELAY = 45;
  CR = chr(13);  
  LBTREXIT = "$" & "y";
  DCS = chr(27) & "P";
  ST  = chr(27) & chr(92);

  BlockLoad(SysFormatRec);
  BlockLoad(CashPrintRec);
  if (nonblank(CashPrintRec.Foot0)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot1)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot2)) then begin
//    footlines = footlines + 1;
  end;
  footlines = 0;
//ESC P Pn;Pc;Py;Px;Pg;Pk;Pz;Pb;Po1;Po2;Pr $x <kod> CR <linia1> CR <linia2> CR..<linia5> CR <nazwa_karty> CR <nazwa_czeku> CR <nazwa_bonu> CR TOTAL / RABAT / WPLATA / KARTA / CZEK/BON / KAUCJA_POBRANA / KAUCJA_ZWROCONA / RESZTA / <check> ESC \
  CtrlSeq = DCS;
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,false,CtrlSeq);
  CtrlSeq = CtrlSeq & LBTREXIT;
  CtrlSeq = CtrlSeq & "001" & CR;
  t2 = CurrentUser;
  if (len(t2)<3) then begin
    t2 = t2 & " ";
  end;
  WinToMaz(t2,tstr);
  CtrlSeq = CtrlSeq & tstr;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & IVr.SerNr & CR;
//  AddPOSNETStrings(CashPrintRec,IVr,false,CtrlSeq);//xx
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  CtrlSeq = CtrlSeq & "0/";
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  CtrlSeq = CtrlSeq & "0/";
  POSNETCheckSum(CtrlSeq);
  res = CheckPOSNETWrite(LONG_DELAY,CtrlSeq);
  POSNETAcceptBOS_POSNETY = res;
  RETURN;
END;

procedure IVVc_CalculatePaymentModeSums(record IVVc IVr,vector val vpaymodesums,var string ccpaydesc)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  val t;
  
  ccpaydesc = "";
  vpaymodesums[kInvoiceRowTypeCreditCardPayment] = 0.00;
  vpaymodesums[kInvoiceRowTypeCashPayment] = 0.00;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
//      case kInvoiceRowTypeGiftVoucherPayment:
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
        ccpaydesc = IVrw.Spec;
//      case kInvoiceRowTypeLoyaltyPointsPayment:
      case kInvoiceRowTypeCashPayment:
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
//      case kInvoiceRowTypeChequePayment:
    end;
  end;
/*
  switch (IVr.InvType) begin
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      t = IVr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      if (t>0) then begin
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
      end;
    otherwise
      t = IVr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      if (t>0) then begin
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
      end;
  end;
*/
  return;
end;

global
function Integer POSNETAcceptBOS_WithPaymentModes(record IVVc IVr)
begin
  Integer res;
  Integer footlines;
  record CashPrintBlock CashPrintRec;
  record SysFormatBlock SysFormatRec;
  string 255 CtrlSeq,tstr,t2,ccpaydesc;
  string 3 DCS,ST,LBTRXEND;
  string 1 CR;
  LongInt LONG_DELAY;
  vector val vpaymodesums;
  record LocalMachineBlock LMb;
  val cashv;
  
  BlockLoad(LMb);
  IVVc_CalculatePaymentModeSums(IVr,vpaymodesums,ccpaydesc);
  cashv = IVr.Sum4 - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
  if (cashv<0) then begin cashv = 0; end;
  LONG_DELAY = 45;
  CR = chr(13);  
  LBTRXEND = "$" & "x";
  DCS = chr(27) & "P";
  ST  = chr(27) & chr(92);

  BlockLoad(SysFormatRec);
  BlockLoad(CashPrintRec);
  if (nonblank(CashPrintRec.Foot0)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot1)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot2)) then begin
//    footlines = footlines + 1;
  end;
  footlines = 0;
//ESC P Pn;Pc;Py;Px;
//Pg;Pk;Pz;Pb;Po1;Po2;Pr 
//$x <kod> CR <linia1> CR <linia2> CR..<linia5> CR <nazwa_karty> CR 
//<nazwa_czeku> CR <nazwa_bonu> CR TOTAL / RABAT / WPLATA / KARTA / 
//CZEK/BON / KAUCJA_POBRANA / KAUCJA_ZWROCONA / RESZTA / <check> ESC \

//P0;0;0;0;0;0;0;0;0;0;1;$x1

  CtrlSeq = DCS;
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  if (cashv!=0) then begin
    AddPOSNETInteger(1,true,CtrlSeq);
  end else begin
    AddPOSNETInteger(0,true,CtrlSeq);
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    AddPOSNETInteger(1,true,CtrlSeq);
  end else begin
    AddPOSNETInteger(0,true,CtrlSeq);
  end;
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  if (IVr.RetValue>0) then begin
    AddPOSNETInteger(1,true,CtrlSeq);
  end else begin
    AddPOSNETInteger(0,true,CtrlSeq);
  end;
  CtrlSeq = CtrlSeq & LBTRXEND;

  if (blank(LMb.LocalMachineCode)) then begin
    CtrlSeq = CtrlSeq & "001" & CR;
  end else begin
    CtrlSeq = CtrlSeq & Left(LMb.LocalMachineCode,1) & Left(CurrentUser,2) & CR;
  end;

  CtrlSeq = CtrlSeq & IVr.SerNr & CR;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    WinToMaz(Left(ccpaydesc,16),tstr);
    CtrlSeq = CtrlSeq & tstr & CR;
  end else begin
    CtrlSeq = CtrlSeq & CR;
  end;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  if (cashv!=0) then begin
    AddPOSNETVal(SysFormatRec,cashv,2,true,CtrlSeq);
  end else begin
    AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    AddPOSNETVal(SysFormatRec,vpaymodesums[kInvoiceRowTypeCreditCardPayment],2,true,CtrlSeq);
  end else begin
    AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  end;
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  if (IVr.RetValue>0) then begin
    AddPOSNETVal(SysFormatRec,IVr.RetValue,2,true,CtrlSeq);
  end else begin
    AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  end;
  POSNETCheckSum(CtrlSeq);
LogText(0," POSNETAcceptBOS_WithPaymentModes CtrlSeq " & CtrlSeq);
  res = CheckPOSNETWrite(LONG_DELAY,CtrlSeq);
  POSNETAcceptBOS_WithPaymentModes = res;
  return;
end;

global
function Integer POSNETAcceptBOS_POSNETYIVCash(record IVCashVc IVr)
BEGIN
  Integer res;
  Integer footlines;
  record CashPrintBlock CashPrintRec;
  record SysFormatBlock SysFormatRec;
  string 255 CtrlSeq,tstr,t2;
  string 3 DCS,ST,LBTREXIT;
  string 1 CR;
  LongInt LONG_DELAY;
  
  LONG_DELAY = 45;
  CR = chr(13);  
  LBTREXIT = "$" & "y";
  DCS = chr(27) & "P";
  ST  = chr(27) & chr(92);

  BlockLoad(SysFormatRec);
  BlockLoad(CashPrintRec);
  if (nonblank(CashPrintRec.Foot0)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot1)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot2)) then begin
//    footlines = footlines + 1;
  end;
  footlines = 0;
  CtrlSeq = DCS;
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,false,CtrlSeq);
  CtrlSeq = CtrlSeq & LBTREXIT;
  CtrlSeq = CtrlSeq & "001" & CR;
  t2 = CurrentUser;
  if (len(t2)<3) then begin
    t2 = t2 & " ";
  end;
  WinToMaz(t2,tstr);
  CtrlSeq = CtrlSeq & tstr;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & IVr.SerNr & CR;
//  AddPOSNETStrings(CashPrintRec,IVr,false,CtrlSeq);//xx
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  CtrlSeq = CtrlSeq & "0/";
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  CtrlSeq = CtrlSeq & "0/";
  POSNETCheckSum(CtrlSeq);
  res = CheckPOSNETWrite(LONG_DELAY,CtrlSeq);
  POSNETAcceptBOS_POSNETYIVCash = res;
  RETURN;
END;

global
function Integer POSNETAcceptBOS_OPTIMUSIVCash(record IVCashVc IVr)
BEGIN
  Integer res;
  Integer footlines;
  record CashPrintBlock CashPrintRec;
  record SysFormatBlock SysFormatRec;
  string 255 CtrlSeq,tstr,t2;
  string 3 DCS,ST,LBTREXIT;
  string 1 CR;
  LongInt LONG_DELAY;
  
  LONG_DELAY = 45;
  CR = chr(13);  
  LBTREXIT = "$" & "y";
  DCS = chr(27) & "P";
  ST  = chr(27) & chr(92);

  BlockLoad(SysFormatRec);
  BlockLoad(CashPrintRec);
  if (nonblank(CashPrintRec.Foot0)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot1)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot2)) then begin
//    footlines = footlines + 1;
  end;
  footlines = 0;
  CtrlSeq = DCS;
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,false,CtrlSeq);
  CtrlSeq = CtrlSeq & LBTREXIT;
  CtrlSeq = CtrlSeq & "Z  " & CR;
  t2 = CurrentUser;
  if (len(t2)<3) then begin
    t2 = t2 & " ";
  end;
  WinToMaz(t2,tstr);
  CtrlSeq = CtrlSeq & tstr;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & IVr.SerNr & CR;
//  AddPOSNETStrings(CashPrintRec,IVr,false,CtrlSeq);//xx
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,IVr.Sum4,2,true,CtrlSeq);
  CtrlSeq = CtrlSeq & "10/2/0/97";
  POSNETCheckSum(CtrlSeq);
//StopAlert("AcceptOPT " & CtrlSeq);

  res = CheckPOSNETWrite(LONG_DELAY,CtrlSeq);
  POSNETAcceptBOS_OPTIMUSIVCash = res;
  RETURN;
END;

procedure IVCashVc_CalculatePaymentModeSums(record IVCashVc IVCashr,vector val vpaymodesums,var string ccpaydesc)
begin
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  val t;
  
  ccpaydesc = "";
  vpaymodesums[kInvoiceRowTypeCreditCardPayment] = 0.00;
  vpaymodesums[kInvoiceRowTypeCashPayment] = 0.00;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
//      case kInvoiceRowTypeGiftVoucherPayment:
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
        ccpaydesc = IVCashrw.Spec;
//      case kInvoiceRowTypeLoyaltyPointsPayment:
      case kInvoiceRowTypeCashPayment:
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
//      case kInvoiceRowTypeChequePayment:
    end;
  end;
/*
  switch (IVCashr.InvType) begin
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      t = IVCashr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      if (t>0) then begin
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
      end;
    otherwise
      t = IVCashr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      if (t>0) then begin
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
      end;
  end;
*/
  return;
end;

global
function Integer POSNETAcceptBOS_WithPaymentModesIVCash(record IVCashVc IVCashr)
begin
  Integer res;
  Integer footlines;
  record CashPrintBlock CashPrintRec;
  record SysFormatBlock SysFormatRec;
  string 255 CtrlSeq,tstr,t2,ccpaydesc;
  string 3 DCS,ST,LBTRXEND;
  string 1 CR;
  LongInt LONG_DELAY;
  vector val vpaymodesums;
  record LocalMachineBlock LMb;
  val cashv,sum4;
  
  BlockLoad(LMb);
  IVCashVc_CalculatePaymentModeSums(IVCashr,vpaymodesums,ccpaydesc);
  vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + IVCashr.RecValue + IVCashr.RecValue2;
  if (IVCashr.CashValue!=0) then begin
    cashv = IVCashr.CashValue + vpaymodesums[kInvoiceRowTypeCashPayment];
  end else begin
    cashv = IVCashr.Sum4 - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
  end;
  if (cashv<0) then begin cashv = 0; end;
  LONG_DELAY = 45;
  CR = chr(13);  
  LBTRXEND = "$" & "x";
  DCS = chr(27) & "P";
  ST  = chr(27) & chr(92);

  BlockLoad(SysFormatRec);
  BlockLoad(CashPrintRec);
  if (nonblank(CashPrintRec.Foot0)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot1)) then begin
    footlines = footlines + 1;
  end;
  if (nonblank(CashPrintRec.Foot2)) then begin
//    footlines = footlines + 1;
  end;
  footlines = 0;
//ESC P Pn;Pc;Py;Px;
//Pg;Pk;Pz;Pb;Po1;Po2;Pr 
//$x <kod> CR <linia1> CR <linia2> CR..<linia5> CR <nazwa_karty> CR 
//<nazwa_czeku> CR <nazwa_bonu> CR TOTAL / RABAT / WPLATA / KARTA / 
//CZEK/BON / KAUCJA_POBRANA / KAUCJA_ZWROCONA / RESZTA / <check> ESC \
  CtrlSeq = DCS;
  AddPOSNETInteger(1,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  if (cashv!=0) then begin
    AddPOSNETInteger(1,true,CtrlSeq);
  end else begin
    AddPOSNETInteger(0,true,CtrlSeq);
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    AddPOSNETInteger(1,true,CtrlSeq);
  end else begin
    AddPOSNETInteger(0,true,CtrlSeq);
  end;
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
  AddPOSNETInteger(0,true,CtrlSeq);
/*
  if (IVCashr.RetValue>0) then begin
    AddPOSNETInteger(1,true,CtrlSeq);
  end else begin
    AddPOSNETInteger(0,true,CtrlSeq);
  end;
*/
  CtrlSeq = CtrlSeq & LBTRXEND;
  if (blank(LMb.LocalMachineCode)) then begin
    CtrlSeq = CtrlSeq & "001" & CR;
  end else begin
    CtrlSeq = CtrlSeq & Left(LMb.LocalMachineCode,1) & Left(CurrentUser,2) & CR;
  end;
  CtrlSeq = CtrlSeq & IVCashr.SerNr & CR;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    WinToMaz(Left(ccpaydesc,16),tstr);
    CtrlSeq = CtrlSeq & tstr & CR;
  end else begin
    CtrlSeq = CtrlSeq & CR;
  end;
  CtrlSeq = CtrlSeq & CR;
  CtrlSeq = CtrlSeq & CR;
  sum4 = cashv + vpaymodesums[kInvoiceRowTypeCreditCardPayment];
  AddPOSNETVal(SysFormatRec,IVCashr.Sum4,2,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  if (cashv!=0) then begin
    AddPOSNETVal(SysFormatRec,cashv,2,true,CtrlSeq);
  end else begin
    AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]!=0) then begin
    AddPOSNETVal(SysFormatRec,vpaymodesums[kInvoiceRowTypeCreditCardPayment],2,true,CtrlSeq);
  end else begin
    AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  end;
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
/*
  if (IVCashr.RetValue>0) then begin
    AddPOSNETVal(SysFormatRec,IVCashr.RetValue,2,true,CtrlSeq);
  end else begin
    AddPOSNETVal(SysFormatRec,0.00,3,true,CtrlSeq);
  end;
*/
  POSNETCheckSum(CtrlSeq);
  res = CheckPOSNETWrite(LONG_DELAY,CtrlSeq);
  POSNETAcceptBOS_WithPaymentModesIVCash = res;
  return;
end;
