external function val CalculateDiscountPercentage(val,val,val);
external function roundmode SetRoundModeD(Integer);
forward function Integer POSNETWrite(string,LongInt);
external procedure GetPOSNETVATCode(Array val,Integer,record VATCodeBlock,string,var string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val ValFromString(string,string,string);
external function Integer GetPOSNETVATRates(string,var Array val);
external function Date DateFromString(string,string);
external function string 255 NumToHex(string);
external procedure IVCashCalculatePaymentModeSums(record IVCashVc,vector val);
external procedure IVCalculatePaymentModeSums(record IVVc,vector val);
external procedure RestAccCalculatePaymentModeSums(record RestAccVc,vector val);

enum begin
  POSNETPROTOCOL_DELAY = 10,
  POSNETPROTOCOL_LONGDELAY = 45
end;

enum begin
  POSNET_NOERR = 0,
  POSNET_STX = 2,
  POSNET_ETX = 3,
  POSNET_FS = 9,
  POSNET_LF = 10
end;

function Integer FindStrPosition(string tstr,string decsep)
begin
  Integer res;
  Integer i,slen;
  
  slen = len(tstr);
  for (i=slen;i>=0;i=i-1) begin
    if (Mid(tstr,i,1)==decsep) then begin
       res = i;
       goto LFindStrPosition;
    end;
  end;
LFindStrPosition:;  
  FindStrPosition = res;
  return;  
end;

function Integer HexToInt(string instr)
begin
  Integer res;
  string 16 hexs;
  Integer pos,slen,i,t;

  res = 0;
  slen = len(instr);
  hexs = "0123456789ABCDEF";
  for (i=slen;i>0;i=i-1) begin
    pos = FindStrPosition(hexs,Mid(instr,i-1,1));
    res = res + pos*Power(16,(slen-i));
  end; 
  HexToInt = res; 
  return;  
end;

procedure PopulateCRCHTable(Array Integer acrc)
begin
  Integer i;

  i = 0;     acrc[i]  = HexToInt("0x00"); i = i + 1; acrc[i]  = HexToInt("0x10"); i = i + 1; acrc[i]  = HexToInt("0x20"); i = i + 1; acrc[i]  = HexToInt("0x30"); i = i + 1; acrc[i]  = HexToInt("0x40"); i = i + 1; acrc[i]  = HexToInt("0x50"); i = i + 1; acrc[i]  = HexToInt("0x60"); i = i + 1; acrc[i]  = HexToInt("0x70");
  i = i + 1; acrc[i]  = HexToInt("0x81"); i = i + 1; acrc[i]  = HexToInt("0x91"); i = i + 1; acrc[i]  = HexToInt("0xa1"); i = i + 1; acrc[i]  = HexToInt("0xb1"); i = i + 1; acrc[i]  = HexToInt("0xc1"); i = i + 1; acrc[i]  = HexToInt("0xd1"); i = i + 1; acrc[i]  = HexToInt("0xe1"); i = i + 1; acrc[i]  = HexToInt("0xf1");
  i = i + 1; acrc[i]  = HexToInt("0x12"); i = i + 1; acrc[i]  = HexToInt("0x02"); i = i + 1; acrc[i]  = HexToInt("0x32"); i = i + 1; acrc[i]  = HexToInt("0x22"); i = i + 1; acrc[i]  = HexToInt("0x52"); i = i + 1; acrc[i]  = HexToInt("0x42"); i = i + 1; acrc[i]  = HexToInt("0x72"); i = i + 1; acrc[i]  = HexToInt("0x62");
  i = i + 1; acrc[i]  = HexToInt("0x93"); i = i + 1; acrc[i]  = HexToInt("0x83"); i = i + 1; acrc[i]  = HexToInt("0xb3"); i = i + 1; acrc[i]  = HexToInt("0xa3"); i = i + 1; acrc[i]  = HexToInt("0xd3"); i = i + 1; acrc[i]  = HexToInt("0xc3"); i = i + 1; acrc[i]  = HexToInt("0xf3"); i = i + 1; acrc[i]  = HexToInt("0xe3");
  i = i + 1; acrc[i]  = HexToInt("0x24"); i = i + 1; acrc[i]  = HexToInt("0x34"); i = i + 1; acrc[i]  = HexToInt("0x04"); i = i + 1; acrc[i]  = HexToInt("0x14"); i = i + 1; acrc[i]  = HexToInt("0x64"); i = i + 1; acrc[i]  = HexToInt("0x74"); i = i + 1; acrc[i]  = HexToInt("0x44"); i = i + 1; acrc[i]  = HexToInt("0x54");
  i = i + 1; acrc[i]  = HexToInt("0xa5"); i = i + 1; acrc[i]  = HexToInt("0xb5"); i = i + 1; acrc[i]  = HexToInt("0x85"); i = i + 1; acrc[i]  = HexToInt("0x95"); i = i + 1; acrc[i]  = HexToInt("0xe5"); i = i + 1; acrc[i]  = HexToInt("0xf5"); i = i + 1; acrc[i]  = HexToInt("0xc5"); i = i + 1; acrc[i]  = HexToInt("0xd5");
  i = i + 1; acrc[i]  = HexToInt("0x36"); i = i + 1; acrc[i]  = HexToInt("0x26"); i = i + 1; acrc[i]  = HexToInt("0x16"); i = i + 1; acrc[i]  = HexToInt("0x06"); i = i + 1; acrc[i]  = HexToInt("0x76"); i = i + 1; acrc[i]  = HexToInt("0x66"); i = i + 1; acrc[i]  = HexToInt("0x56"); i = i + 1; acrc[i]  = HexToInt("0x46");
  i = i + 1; acrc[i]  = HexToInt("0xb7"); i = i + 1; acrc[i]  = HexToInt("0xa7"); i = i + 1; acrc[i]  = HexToInt("0x97"); i = i + 1; acrc[i]  = HexToInt("0x87"); i = i + 1; acrc[i]  = HexToInt("0xf7"); i = i + 1; acrc[i]  = HexToInt("0xe7"); i = i + 1; acrc[i]  = HexToInt("0xd7"); i = i + 1; acrc[i]  = HexToInt("0xc7");
  i = i + 1; acrc[i]  = HexToInt("0x48"); i = i + 1; acrc[i]  = HexToInt("0x58"); i = i + 1; acrc[i]  = HexToInt("0x68"); i = i + 1; acrc[i]  = HexToInt("0x78"); i = i + 1; acrc[i]  = HexToInt("0x08"); i = i + 1; acrc[i]  = HexToInt("0x18"); i = i + 1; acrc[i]  = HexToInt("0x28"); i = i + 1; acrc[i]  = HexToInt("0x38");
  i = i + 1; acrc[i]  = HexToInt("0xc9"); i = i + 1; acrc[i]  = HexToInt("0xd9"); i = i + 1; acrc[i]  = HexToInt("0xe9"); i = i + 1; acrc[i]  = HexToInt("0xf9"); i = i + 1; acrc[i]  = HexToInt("0x89"); i = i + 1; acrc[i]  = HexToInt("0x99"); i = i + 1; acrc[i]  = HexToInt("0xa9"); i = i + 1; acrc[i]  = HexToInt("0xb9");
  i = i + 1; acrc[i]  = HexToInt("0x5a"); i = i + 1; acrc[i]  = HexToInt("0x4a"); i = i + 1; acrc[i]  = HexToInt("0x7a"); i = i + 1; acrc[i]  = HexToInt("0x6a"); i = i + 1; acrc[i]  = HexToInt("0x1a"); i = i + 1; acrc[i]  = HexToInt("0x0a"); i = i + 1; acrc[i]  = HexToInt("0x3a"); i = i + 1; acrc[i]  = HexToInt("0x2a");
  i = i + 1; acrc[i]  = HexToInt("0xdb"); i = i + 1; acrc[i]  = HexToInt("0xcb"); i = i + 1; acrc[i]  = HexToInt("0xfb"); i = i + 1; acrc[i]  = HexToInt("0xeb"); i = i + 1; acrc[i]  = HexToInt("0x9b"); i = i + 1; acrc[i]  = HexToInt("0x8b"); i = i + 1; acrc[i]  = HexToInt("0xbb"); i = i + 1; acrc[i]  = HexToInt("0xab");
  i = i + 1; acrc[i]  = HexToInt("0x6c"); i = i + 1; acrc[i]  = HexToInt("0x7c"); i = i + 1; acrc[i]  = HexToInt("0x4c"); i = i + 1; acrc[i]  = HexToInt("0x5c"); i = i + 1; acrc[i]  = HexToInt("0x2c"); i = i + 1; acrc[i]  = HexToInt("0x3c"); i = i + 1; acrc[i]  = HexToInt("0x0c"); i = i + 1; acrc[i]  = HexToInt("0x1c");
  i = i + 1; acrc[i]  = HexToInt("0xed"); i = i + 1; acrc[i]  = HexToInt("0xfd"); i = i + 1; acrc[i]  = HexToInt("0xcd"); i = i + 1; acrc[i]  = HexToInt("0xdd"); i = i + 1; acrc[i]  = HexToInt("0xad"); i = i + 1; acrc[i]  = HexToInt("0xbd"); i = i + 1; acrc[i]  = HexToInt("0x8d"); i = i + 1; acrc[i]  = HexToInt("0x9d");
  i = i + 1; acrc[i]  = HexToInt("0x7e"); i = i + 1; acrc[i]  = HexToInt("0x6e"); i = i + 1; acrc[i]  = HexToInt("0x5e"); i = i + 1; acrc[i]  = HexToInt("0x4e"); i = i + 1; acrc[i]  = HexToInt("0x3e"); i = i + 1; acrc[i]  = HexToInt("0x2e"); i = i + 1; acrc[i]  = HexToInt("0x1e"); i = i + 1; acrc[i]  = HexToInt("0x0e");
  i = i + 1; acrc[i]  = HexToInt("0xff"); i = i + 1; acrc[i]  = HexToInt("0xef"); i = i + 1; acrc[i]  = HexToInt("0xdf"); i = i + 1; acrc[i]  = HexToInt("0xcf"); i = i + 1; acrc[i]  = HexToInt("0xbf"); i = i + 1; acrc[i]  = HexToInt("0xaf"); i = i + 1; acrc[i]  = HexToInt("0x9f"); i = i + 1; acrc[i]  = HexToInt("0x8f");
  i = i + 1; acrc[i]  = HexToInt("0x91"); i = i + 1; acrc[i]  = HexToInt("0x81"); i = i + 1; acrc[i]  = HexToInt("0xb1"); i = i + 1; acrc[i]  = HexToInt("0xa1"); i = i + 1; acrc[i]  = HexToInt("0xd1"); i = i + 1; acrc[i]  = HexToInt("0xc1"); i = i + 1; acrc[i]  = HexToInt("0xf1"); i = i + 1; acrc[i]  = HexToInt("0xe1");
  i = i + 1; acrc[i]  = HexToInt("0x10"); i = i + 1; acrc[i]  = HexToInt("0x00"); i = i + 1; acrc[i]  = HexToInt("0x30"); i = i + 1; acrc[i]  = HexToInt("0x20"); i = i + 1; acrc[i]  = HexToInt("0x50"); i = i + 1; acrc[i]  = HexToInt("0x40"); i = i + 1; acrc[i]  = HexToInt("0x70"); i = i + 1; acrc[i]  = HexToInt("0x60");
  i = i + 1; acrc[i]  = HexToInt("0x83"); i = i + 1; acrc[i]  = HexToInt("0x93"); i = i + 1; acrc[i]  = HexToInt("0xa3"); i = i + 1; acrc[i]  = HexToInt("0xb3"); i = i + 1; acrc[i]  = HexToInt("0xc3"); i = i + 1; acrc[i]  = HexToInt("0xd3"); i = i + 1; acrc[i]  = HexToInt("0xe3"); i = i + 1; acrc[i]  = HexToInt("0xf3");
  i = i + 1; acrc[i]  = HexToInt("0x02"); i = i + 1; acrc[i]  = HexToInt("0x12"); i = i + 1; acrc[i]  = HexToInt("0x22"); i = i + 1; acrc[i]  = HexToInt("0x32"); i = i + 1; acrc[i]  = HexToInt("0x42"); i = i + 1; acrc[i]  = HexToInt("0x52"); i = i + 1; acrc[i]  = HexToInt("0x62"); i = i + 1; acrc[i]  = HexToInt("0x72");
  i = i + 1; acrc[i]  = HexToInt("0xb5"); i = i + 1; acrc[i]  = HexToInt("0xa5"); i = i + 1; acrc[i]  = HexToInt("0x95"); i = i + 1; acrc[i]  = HexToInt("0x85"); i = i + 1; acrc[i]  = HexToInt("0xf5"); i = i + 1; acrc[i]  = HexToInt("0xe5"); i = i + 1; acrc[i]  = HexToInt("0xd5"); i = i + 1; acrc[i]  = HexToInt("0xc5");
  i = i + 1; acrc[i]  = HexToInt("0x34"); i = i + 1; acrc[i]  = HexToInt("0x24"); i = i + 1; acrc[i]  = HexToInt("0x14"); i = i + 1; acrc[i]  = HexToInt("0x04"); i = i + 1; acrc[i]  = HexToInt("0x74"); i = i + 1; acrc[i]  = HexToInt("0x64"); i = i + 1; acrc[i]  = HexToInt("0x54"); i = i + 1; acrc[i]  = HexToInt("0x44");
  i = i + 1; acrc[i]  = HexToInt("0xa7"); i = i + 1; acrc[i]  = HexToInt("0xb7"); i = i + 1; acrc[i]  = HexToInt("0x87"); i = i + 1; acrc[i]  = HexToInt("0x97"); i = i + 1; acrc[i]  = HexToInt("0xe7"); i = i + 1; acrc[i]  = HexToInt("0xf7"); i = i + 1; acrc[i]  = HexToInt("0xc7"); i = i + 1; acrc[i]  = HexToInt("0xd7");
  i = i + 1; acrc[i]  = HexToInt("0x26"); i = i + 1; acrc[i]  = HexToInt("0x36"); i = i + 1; acrc[i]  = HexToInt("0x06"); i = i + 1; acrc[i]  = HexToInt("0x16"); i = i + 1; acrc[i]  = HexToInt("0x66"); i = i + 1; acrc[i]  = HexToInt("0x76"); i = i + 1; acrc[i]  = HexToInt("0x46"); i = i + 1; acrc[i]  = HexToInt("0x56");
  i = i + 1; acrc[i]  = HexToInt("0xd9"); i = i + 1; acrc[i]  = HexToInt("0xc9"); i = i + 1; acrc[i]  = HexToInt("0xf9"); i = i + 1; acrc[i]  = HexToInt("0xe9"); i = i + 1; acrc[i]  = HexToInt("0x99"); i = i + 1; acrc[i]  = HexToInt("0x89"); i = i + 1; acrc[i]  = HexToInt("0xb9"); i = i + 1; acrc[i]  = HexToInt("0xa9");
  i = i + 1; acrc[i]  = HexToInt("0x58"); i = i + 1; acrc[i]  = HexToInt("0x48"); i = i + 1; acrc[i]  = HexToInt("0x78"); i = i + 1; acrc[i]  = HexToInt("0x68"); i = i + 1; acrc[i]  = HexToInt("0x18"); i = i + 1; acrc[i]  = HexToInt("0x08"); i = i + 1; acrc[i]  = HexToInt("0x38"); i = i + 1; acrc[i]  = HexToInt("0x28");
  i = i + 1; acrc[i]  = HexToInt("0xcb"); i = i + 1; acrc[i]  = HexToInt("0xdb"); i = i + 1; acrc[i]  = HexToInt("0xeb"); i = i + 1; acrc[i]  = HexToInt("0xfb"); i = i + 1; acrc[i]  = HexToInt("0x8b"); i = i + 1; acrc[i]  = HexToInt("0x9b"); i = i + 1; acrc[i]  = HexToInt("0xab"); i = i + 1; acrc[i]  = HexToInt("0xbb");
  i = i + 1; acrc[i]  = HexToInt("0x4a"); i = i + 1; acrc[i]  = HexToInt("0x5a"); i = i + 1; acrc[i]  = HexToInt("0x6a"); i = i + 1; acrc[i]  = HexToInt("0x7a"); i = i + 1; acrc[i]  = HexToInt("0x0a"); i = i + 1; acrc[i]  = HexToInt("0x1a"); i = i + 1; acrc[i]  = HexToInt("0x2a"); i = i + 1; acrc[i]  = HexToInt("0x3a");
  i = i + 1; acrc[i]  = HexToInt("0xfd"); i = i + 1; acrc[i]  = HexToInt("0xed"); i = i + 1; acrc[i]  = HexToInt("0xdd"); i = i + 1; acrc[i]  = HexToInt("0xcd"); i = i + 1; acrc[i]  = HexToInt("0xbd"); i = i + 1; acrc[i]  = HexToInt("0xad"); i = i + 1; acrc[i]  = HexToInt("0x9d"); i = i + 1; acrc[i]  = HexToInt("0x8d");
  i = i + 1; acrc[i]  = HexToInt("0x7c"); i = i + 1; acrc[i]  = HexToInt("0x6c"); i = i + 1; acrc[i]  = HexToInt("0x5c"); i = i + 1; acrc[i]  = HexToInt("0x4c"); i = i + 1; acrc[i]  = HexToInt("0x3c"); i = i + 1; acrc[i]  = HexToInt("0x2c"); i = i + 1; acrc[i]  = HexToInt("0x1c"); i = i + 1; acrc[i]  = HexToInt("0x0c");
  i = i + 1; acrc[i]  = HexToInt("0xef"); i = i + 1; acrc[i]  = HexToInt("0xff"); i = i + 1; acrc[i]  = HexToInt("0xcf"); i = i + 1; acrc[i]  = HexToInt("0xdf"); i = i + 1; acrc[i]  = HexToInt("0xaf"); i = i + 1; acrc[i]  = HexToInt("0xbf"); i = i + 1; acrc[i]  = HexToInt("0x8f"); i = i + 1; acrc[i]  = HexToInt("0x9f");
  i = i + 1; acrc[i]  = HexToInt("0x6e"); i = i + 1; acrc[i]  = HexToInt("0x7e"); i = i + 1; acrc[i]  = HexToInt("0x4e"); i = i + 1; acrc[i]  = HexToInt("0x5e"); i = i + 1; acrc[i]  = HexToInt("0x2e"); i = i + 1; acrc[i]  = HexToInt("0x3e"); i = i + 1; acrc[i]  = HexToInt("0x0e"); i = i + 1; acrc[i]  = HexToInt("0x1e");
  return;
end;

procedure PopulateCRCLTable(Array Integer acrc)
begin
  Integer i;

  i = 0;     acrc[i]  = HexToInt("0x00"); i = i + 1; acrc[i]  = HexToInt("0x21"); i = i + 1; acrc[i]  = HexToInt("0x42"); i = i + 1; acrc[i]  = HexToInt("0x63"); i = i + 1; acrc[i]  = HexToInt("0x84"); i = i + 1; acrc[i]  = HexToInt("0xa5"); i = i + 1; acrc[i]  = HexToInt("0xc6"); i = i + 1; acrc[i]  = HexToInt("0xe7");
  i = i + 1; acrc[i]  = HexToInt("0x08"); i = i + 1; acrc[i]  = HexToInt("0x29"); i = i + 1; acrc[i]  = HexToInt("0x4a"); i = i + 1; acrc[i]  = HexToInt("0x6b"); i = i + 1; acrc[i]  = HexToInt("0x8c"); i = i + 1; acrc[i]  = HexToInt("0xad"); i = i + 1; acrc[i]  = HexToInt("0xce"); i = i + 1; acrc[i]  = HexToInt("0xef");
  i = i + 1; acrc[i]  = HexToInt("0x31"); i = i + 1; acrc[i]  = HexToInt("0x10"); i = i + 1; acrc[i]  = HexToInt("0x73"); i = i + 1; acrc[i]  = HexToInt("0x52"); i = i + 1; acrc[i]  = HexToInt("0xb5"); i = i + 1; acrc[i]  = HexToInt("0x94"); i = i + 1; acrc[i]  = HexToInt("0xf7"); i = i + 1; acrc[i]  = HexToInt("0xd6");
  i = i + 1; acrc[i]  = HexToInt("0x39"); i = i + 1; acrc[i]  = HexToInt("0x18"); i = i + 1; acrc[i]  = HexToInt("0x7b"); i = i + 1; acrc[i]  = HexToInt("0x5a"); i = i + 1; acrc[i]  = HexToInt("0xbd"); i = i + 1; acrc[i]  = HexToInt("0x9c"); i = i + 1; acrc[i]  = HexToInt("0xff"); i = i + 1; acrc[i]  = HexToInt("0xde");
  i = i + 1; acrc[i]  = HexToInt("0x62"); i = i + 1; acrc[i]  = HexToInt("0x43"); i = i + 1; acrc[i]  = HexToInt("0x20"); i = i + 1; acrc[i]  = HexToInt("0x01"); i = i + 1; acrc[i]  = HexToInt("0xe6"); i = i + 1; acrc[i]  = HexToInt("0xc7"); i = i + 1; acrc[i]  = HexToInt("0xa4"); i = i + 1; acrc[i]  = HexToInt("0x85");
  i = i + 1; acrc[i]  = HexToInt("0x6a"); i = i + 1; acrc[i]  = HexToInt("0x4b"); i = i + 1; acrc[i]  = HexToInt("0x28"); i = i + 1; acrc[i]  = HexToInt("0x09"); i = i + 1; acrc[i]  = HexToInt("0xee"); i = i + 1; acrc[i]  = HexToInt("0xcf"); i = i + 1; acrc[i]  = HexToInt("0xac"); i = i + 1; acrc[i]  = HexToInt("0x8d");
  i = i + 1; acrc[i]  = HexToInt("0x53"); i = i + 1; acrc[i]  = HexToInt("0x72"); i = i + 1; acrc[i]  = HexToInt("0x11"); i = i + 1; acrc[i]  = HexToInt("0x30"); i = i + 1; acrc[i]  = HexToInt("0xd7"); i = i + 1; acrc[i]  = HexToInt("0xf6"); i = i + 1; acrc[i]  = HexToInt("0x95"); i = i + 1; acrc[i]  = HexToInt("0xb4");
  i = i + 1; acrc[i]  = HexToInt("0x5b"); i = i + 1; acrc[i]  = HexToInt("0x7a"); i = i + 1; acrc[i]  = HexToInt("0x19"); i = i + 1; acrc[i]  = HexToInt("0x38"); i = i + 1; acrc[i]  = HexToInt("0xdf"); i = i + 1; acrc[i]  = HexToInt("0xfe"); i = i + 1; acrc[i]  = HexToInt("0x9d"); i = i + 1; acrc[i]  = HexToInt("0xbc");
  i = i + 1; acrc[i]  = HexToInt("0xc4"); i = i + 1; acrc[i]  = HexToInt("0xe5"); i = i + 1; acrc[i]  = HexToInt("0x86"); i = i + 1; acrc[i]  = HexToInt("0xa7"); i = i + 1; acrc[i]  = HexToInt("0x40"); i = i + 1; acrc[i]  = HexToInt("0x61"); i = i + 1; acrc[i]  = HexToInt("0x02"); i = i + 1; acrc[i]  = HexToInt("0x23");
  i = i + 1; acrc[i]  = HexToInt("0xcc"); i = i + 1; acrc[i]  = HexToInt("0xed"); i = i + 1; acrc[i]  = HexToInt("0x8e"); i = i + 1; acrc[i]  = HexToInt("0xaf"); i = i + 1; acrc[i]  = HexToInt("0x48"); i = i + 1; acrc[i]  = HexToInt("0x69"); i = i + 1; acrc[i]  = HexToInt("0x0a"); i = i + 1; acrc[i]  = HexToInt("0x2b");
  i = i + 1; acrc[i]  = HexToInt("0xf5"); i = i + 1; acrc[i]  = HexToInt("0xd4"); i = i + 1; acrc[i]  = HexToInt("0xb7"); i = i + 1; acrc[i]  = HexToInt("0x96"); i = i + 1; acrc[i]  = HexToInt("0x71"); i = i + 1; acrc[i]  = HexToInt("0x50"); i = i + 1; acrc[i]  = HexToInt("0x33"); i = i + 1; acrc[i]  = HexToInt("0x12");
  i = i + 1; acrc[i]  = HexToInt("0xfd"); i = i + 1; acrc[i]  = HexToInt("0xdc"); i = i + 1; acrc[i]  = HexToInt("0xbf"); i = i + 1; acrc[i]  = HexToInt("0x9e"); i = i + 1; acrc[i]  = HexToInt("0x79"); i = i + 1; acrc[i]  = HexToInt("0x58"); i = i + 1; acrc[i]  = HexToInt("0x3b"); i = i + 1; acrc[i]  = HexToInt("0x1a");
  i = i + 1; acrc[i]  = HexToInt("0xa6"); i = i + 1; acrc[i]  = HexToInt("0x87"); i = i + 1; acrc[i]  = HexToInt("0xe4"); i = i + 1; acrc[i]  = HexToInt("0xc5"); i = i + 1; acrc[i]  = HexToInt("0x22"); i = i + 1; acrc[i]  = HexToInt("0x03"); i = i + 1; acrc[i]  = HexToInt("0x60"); i = i + 1; acrc[i]  = HexToInt("0x41");
  i = i + 1; acrc[i]  = HexToInt("0xae"); i = i + 1; acrc[i]  = HexToInt("0x8f"); i = i + 1; acrc[i]  = HexToInt("0xec"); i = i + 1; acrc[i]  = HexToInt("0xcd"); i = i + 1; acrc[i]  = HexToInt("0x2a"); i = i + 1; acrc[i]  = HexToInt("0x0b"); i = i + 1; acrc[i]  = HexToInt("0x68"); i = i + 1; acrc[i]  = HexToInt("0x49");
  i = i + 1; acrc[i]  = HexToInt("0x97"); i = i + 1; acrc[i]  = HexToInt("0xb6"); i = i + 1; acrc[i]  = HexToInt("0xd5"); i = i + 1; acrc[i]  = HexToInt("0xf4"); i = i + 1; acrc[i]  = HexToInt("0x13"); i = i + 1; acrc[i]  = HexToInt("0x32"); i = i + 1; acrc[i]  = HexToInt("0x51"); i = i + 1; acrc[i]  = HexToInt("0x70");
  i = i + 1; acrc[i]  = HexToInt("0x9f"); i = i + 1; acrc[i]  = HexToInt("0xbe"); i = i + 1; acrc[i]  = HexToInt("0xdd"); i = i + 1; acrc[i]  = HexToInt("0xfc"); i = i + 1; acrc[i]  = HexToInt("0x1b"); i = i + 1; acrc[i]  = HexToInt("0x3a"); i = i + 1; acrc[i]  = HexToInt("0x59"); i = i + 1; acrc[i]  = HexToInt("0x78");
  i = i + 1; acrc[i]  = HexToInt("0x88"); i = i + 1; acrc[i]  = HexToInt("0xa9"); i = i + 1; acrc[i]  = HexToInt("0xca"); i = i + 1; acrc[i]  = HexToInt("0xeb"); i = i + 1; acrc[i]  = HexToInt("0x0c"); i = i + 1; acrc[i]  = HexToInt("0x2d"); i = i + 1; acrc[i]  = HexToInt("0x4e"); i = i + 1; acrc[i]  = HexToInt("0x6f");
  i = i + 1; acrc[i]  = HexToInt("0x80"); i = i + 1; acrc[i]  = HexToInt("0xa1"); i = i + 1; acrc[i]  = HexToInt("0xc2"); i = i + 1; acrc[i]  = HexToInt("0xe3"); i = i + 1; acrc[i]  = HexToInt("0x04"); i = i + 1; acrc[i]  = HexToInt("0x25"); i = i + 1; acrc[i]  = HexToInt("0x46"); i = i + 1; acrc[i]  = HexToInt("0x67");
  i = i + 1; acrc[i]  = HexToInt("0xb9"); i = i + 1; acrc[i]  = HexToInt("0x98"); i = i + 1; acrc[i]  = HexToInt("0xfb"); i = i + 1; acrc[i]  = HexToInt("0xda"); i = i + 1; acrc[i]  = HexToInt("0x3d"); i = i + 1; acrc[i]  = HexToInt("0x1c"); i = i + 1; acrc[i]  = HexToInt("0x7f"); i = i + 1; acrc[i]  = HexToInt("0x5e");
  i = i + 1; acrc[i]  = HexToInt("0xb1"); i = i + 1; acrc[i]  = HexToInt("0x90"); i = i + 1; acrc[i]  = HexToInt("0xf3"); i = i + 1; acrc[i]  = HexToInt("0xd2"); i = i + 1; acrc[i]  = HexToInt("0x35"); i = i + 1; acrc[i]  = HexToInt("0x14"); i = i + 1; acrc[i]  = HexToInt("0x77"); i = i + 1; acrc[i]  = HexToInt("0x56");
  i = i + 1; acrc[i]  = HexToInt("0xea"); i = i + 1; acrc[i]  = HexToInt("0xcb"); i = i + 1; acrc[i]  = HexToInt("0xa8"); i = i + 1; acrc[i]  = HexToInt("0x89"); i = i + 1; acrc[i]  = HexToInt("0x6e"); i = i + 1; acrc[i]  = HexToInt("0x4f"); i = i + 1; acrc[i]  = HexToInt("0x2c"); i = i + 1; acrc[i]  = HexToInt("0x0d");
  i = i + 1; acrc[i]  = HexToInt("0xe2"); i = i + 1; acrc[i]  = HexToInt("0xc3"); i = i + 1; acrc[i]  = HexToInt("0xa0"); i = i + 1; acrc[i]  = HexToInt("0x81"); i = i + 1; acrc[i]  = HexToInt("0x66"); i = i + 1; acrc[i]  = HexToInt("0x47"); i = i + 1; acrc[i]  = HexToInt("0x24"); i = i + 1; acrc[i]  = HexToInt("0x05");
  i = i + 1; acrc[i]  = HexToInt("0xdb"); i = i + 1; acrc[i]  = HexToInt("0xfa"); i = i + 1; acrc[i]  = HexToInt("0x99"); i = i + 1; acrc[i]  = HexToInt("0xb8"); i = i + 1; acrc[i]  = HexToInt("0x5f"); i = i + 1; acrc[i]  = HexToInt("0x7e"); i = i + 1; acrc[i]  = HexToInt("0x1d"); i = i + 1; acrc[i]  = HexToInt("0x3c");
  i = i + 1; acrc[i]  = HexToInt("0xd3"); i = i + 1; acrc[i]  = HexToInt("0xf2"); i = i + 1; acrc[i]  = HexToInt("0x91"); i = i + 1; acrc[i]  = HexToInt("0xb0"); i = i + 1; acrc[i]  = HexToInt("0x57"); i = i + 1; acrc[i]  = HexToInt("0x76"); i = i + 1; acrc[i]  = HexToInt("0x15"); i = i + 1; acrc[i]  = HexToInt("0x34");
  i = i + 1; acrc[i]  = HexToInt("0x4c"); i = i + 1; acrc[i]  = HexToInt("0x6d"); i = i + 1; acrc[i]  = HexToInt("0x0e"); i = i + 1; acrc[i]  = HexToInt("0x2f"); i = i + 1; acrc[i]  = HexToInt("0xc8"); i = i + 1; acrc[i]  = HexToInt("0xe9"); i = i + 1; acrc[i]  = HexToInt("0x8a"); i = i + 1; acrc[i]  = HexToInt("0xab");
  i = i + 1; acrc[i]  = HexToInt("0x44"); i = i + 1; acrc[i]  = HexToInt("0x65"); i = i + 1; acrc[i]  = HexToInt("0x06"); i = i + 1; acrc[i]  = HexToInt("0x27"); i = i + 1; acrc[i]  = HexToInt("0xc0"); i = i + 1; acrc[i]  = HexToInt("0xe1"); i = i + 1; acrc[i]  = HexToInt("0x82"); i = i + 1; acrc[i]  = HexToInt("0xa3");
  i = i + 1; acrc[i]  = HexToInt("0x7d"); i = i + 1; acrc[i]  = HexToInt("0x5c"); i = i + 1; acrc[i]  = HexToInt("0x3f"); i = i + 1; acrc[i]  = HexToInt("0x1e"); i = i + 1; acrc[i]  = HexToInt("0xf9"); i = i + 1; acrc[i]  = HexToInt("0xd8"); i = i + 1; acrc[i]  = HexToInt("0xbb"); i = i + 1; acrc[i]  = HexToInt("0x9a");
  i = i + 1; acrc[i]  = HexToInt("0x75"); i = i + 1; acrc[i]  = HexToInt("0x54"); i = i + 1; acrc[i]  = HexToInt("0x37"); i = i + 1; acrc[i]  = HexToInt("0x16"); i = i + 1; acrc[i]  = HexToInt("0xf1"); i = i + 1; acrc[i]  = HexToInt("0xd0"); i = i + 1; acrc[i]  = HexToInt("0xb3"); i = i + 1; acrc[i]  = HexToInt("0x92");
  i = i + 1; acrc[i]  = HexToInt("0x2e"); i = i + 1; acrc[i]  = HexToInt("0x0f"); i = i + 1; acrc[i]  = HexToInt("0x6c"); i = i + 1; acrc[i]  = HexToInt("0x4d"); i = i + 1; acrc[i]  = HexToInt("0xaa"); i = i + 1; acrc[i]  = HexToInt("0x8b"); i = i + 1; acrc[i]  = HexToInt("0xe8"); i = i + 1; acrc[i]  = HexToInt("0xc9");
  i = i + 1; acrc[i]  = HexToInt("0x26"); i = i + 1; acrc[i]  = HexToInt("0x07"); i = i + 1; acrc[i]  = HexToInt("0x64"); i = i + 1; acrc[i]  = HexToInt("0x45"); i = i + 1; acrc[i]  = HexToInt("0xa2"); i = i + 1; acrc[i]  = HexToInt("0x83"); i = i + 1; acrc[i]  = HexToInt("0xe0"); i = i + 1; acrc[i]  = HexToInt("0xc1");
  i = i + 1; acrc[i]  = HexToInt("0x1f"); i = i + 1; acrc[i]  = HexToInt("0x3e"); i = i + 1; acrc[i]  = HexToInt("0x5d"); i = i + 1; acrc[i]  = HexToInt("0x7c"); i = i + 1; acrc[i]  = HexToInt("0x9b"); i = i + 1; acrc[i]  = HexToInt("0xba"); i = i + 1; acrc[i]  = HexToInt("0xd9"); i = i + 1; acrc[i]  = HexToInt("0xf8");
  i = i + 1; acrc[i]  = HexToInt("0x17"); i = i + 1; acrc[i]  = HexToInt("0x36"); i = i + 1; acrc[i]  = HexToInt("0x55"); i = i + 1; acrc[i]  = HexToInt("0x74"); i = i + 1; acrc[i]  = HexToInt("0x93"); i = i + 1; acrc[i]  = HexToInt("0xb2"); i = i + 1; acrc[i]  = HexToInt("0xd1"); i = i + 1; acrc[i]  = HexToInt("0xf0");
  return;
end;

/*
function string 255 CalculateControlSum2(string CtrlSeq)
begin
  string 255 res;
  Integer i,l,a,j;
  LongInt bcrc;
 
  bcrc = 0;
  l = len(CtrlSeq);
  for (i=0;i<l;i=i+1) begin
//    a = GetByteFromString(Mid(CtrlSeq,i,1),0);
    a = asc(Mid(CtrlSeq,i,1));
LogText(0,"CalculateControlSum2 a " & a & " Mid(CtrlSeq,i,1) " & Mid(CtrlSeq,i,1));
    bcrc = BitXor(bcrc,a);
    for (j=1;j<=8;j=j+1) begin
      if (BitAnd(bcrc,1)) then begin
        bcrc = bcrc/power(2,1);  // bcrc = bcrc >> 1 ;
        bcrc = BitXor(bcrc,33800);
      end else begin
        bcrc = bcrc/power(2,1);  // bcrc = bcrc >> 1 ;
      end;
    end;
  end;
  res = NumToHex(bcrc);
Trace("CalculateControlSum2 bcrc " & bcrc," res " & res);

  CalculateControlSum2 = res;
  return;
end;
*/

function string 255 CalculateControlSum(string CtrlSeq)
begin
  string 255 res,c;
  Integer i,l,a,a1;
  Integer hi,lo;
  Integer index;
  LongInt bcrc;
  Array Integer ahcrc;
  Array Integer alcrc;
 
  bcrc = 0; hi = 0; lo = 0;
  PopulateCRCHTable(ahcrc);
  PopulateCRCLTable(alcrc);

  l = len(CtrlSeq);

  for (i=0;i<l;i=i+1) begin
    c = ConvertStringToCodePage("CP1250",Mid(CtrlSeq,i,1));
//    a = asc(c);//asc gets utf8
    a = GetByteFromString(c,0);

    index = BitXor(hi,a);
    hi = BitXor(lo,ahcrc[index]);
    lo = alcrc[index];

  end;
  bcrc = hi*power(2,8);  // val = bcrc << 8 ;
  bcrc = BitOr(bcrc,lo);
//mttty, program serwisowy zps

  res = NumToHex(bcrc);
  CalculateControlSum = res;
  return;
end;

function Integer WaitForPOSNETReply(LongInt waittickscoef,Boolean acknowledgeonlyf,var string response)
begin
  Integer res,res2;
  Integer noErr;
  LongInt waitticks;
  LongInt currenttick, starttick;
  Integer l,responselen;
  Boolean waitf,etxf;
  string 255 c,errorcode,CtrlSeq;
  Integer i;
  LongInt pos;
  string 255 tstr,tstr2;

  res = noErr;
  response = "";
  waitticks = waittickscoef*1000;
//  waitticks = 1*1000;
  starttick = GetCurTick;

//LogText(0,"DEBUG acknowledgeonlyf=" & acknowledgeonlyf & ", waittickscoef=" & waittickscoef);
  waitf = true;
  while (waitf) begin
    currenttick = GetCurTick;

    c = ReadComPort(0,1);
//LogText(0,"DEBUG c=" & asc(c));
    response = response & c;
    if (len(response)>=250) then begin
//LogText(0,"WaitForPOSNETReply exceeded max response length");
      waitf = false;
    end;
    if (acknowledgeonlyf) then begin
      if (asc(c)==ACK) then begin
        waitf = false;
      end;    
    end else begin
      if (asc(c)==POSNET_ETX) then begin
        waitf = false;
        etxf = true;
      end;    
    end;
    if ((currenttick-starttick)>waitticks) then begin
      waitf = false;
    end;
  end;

  if (etxf==false) then begin
//    LogText(0,"WaitForPOSNETReply not full reply response " & response);
    res = -10;
    goto LWaitForPOSNETReply;
  end;
  if (acknowledgeonlyf) then begin
    if (asc(response)==ACK) then begin
      res = 0;
    end else begin
      res = -1;
//      POSNETCancelReceipt;
    end;
  end else begin
    pos = 0;
    GetNextSubstring(response,pos,chr(POSNET_FS),tstr)
//LogText(0,"DEBUG tstr=" & tstr);
    GetNextSubstring(response,pos,"#",tstr)
//LogText(0,"DEBUG tstr=" & tstr);
    if (Left(tstr,1)=="?") then begin
      errorcode = Right(tstr,len(tstr)-1);
      res = StringToInt(errorcode);
//LogText(0,"DEBUG res=" & res);
    end;
//LogText(0,"DBG.response " & response & " tstr " & tstr & " errorcode " & errorcode & " res " & res & " Left(tstr,1) " & Left(tstr,1));
    if (res!=noErr) then begin
      CtrlSeq = "trcancel" & chr(POSNET_FS);
      res2 = POSNETWrite(CtrlSeq,POSNETPROTOCOL_LONGDELAY);
      MessageBox(0,"Error 1: " & res);
      LogText(0,"WaitForPOSNETReply errorcode " & errorcode & " res " & res & " errorcode " & errorcode);
//      POSNETCancelReceipt;
    end;  
    if (res!=noErr) then begin
      if (blank(errorcode)) then begin
        LogText(0,"WaitForPOSNETReply blank errorcode ");
        res = -2;
      end;
    end;
  end;
LWaitForPOSNETReply:;
  WaitForPOSNETReply = res;
  return;
end;

function Integer POSNETWrite(string aCtrlSeq,LongInt delay) 
begin
  Integer res,noErr;
  string 255 response;
  string 255 CtrlSeq;
  Boolean sent;
 
  CtrlSeq = chr(POSNET_STX) & aCtrlSeq & "#" & CalculateControlSum(aCtrlSeq) & chr(POSNET_ETX);

//LogText(0,"DBG.POSNETWrite aCtrlSeq " & aCtrlSeq & " CalculateControlSum(aCtrlSeq) " & CalculateControlSum(aCtrlSeq));

/*
  res = -3;
  sent = OutComPort(0,chr(ST05_SOC));
  if (sent) then begin
    res = WaitForPOSNETReply(delay,true,response);
  end;
  if (res!=noErr) then begin
    goto LPOSNETWrite;
  end;
*/
  res = -4;
  sent = OutComPort(0,CtrlSeq);
  if (sent) then begin
    res = WaitForPOSNETReply(delay,false,response);
  end;
LPOSNETWrite:;  
  POSNETWrite = res;
  return;
end;

function Integer POSNETWriteAndGetResponse(string aCtrlSeq,LongInt delay,var string response) 
begin
  Integer res,noErr;
  string 255 CtrlSeq;
  Boolean sent;

  response = ""; 
  CtrlSeq = chr(POSNET_STX) & aCtrlSeq & "#" & CalculateControlSum(aCtrlSeq) & chr(POSNET_ETX);

//LogText(0,"POSNETWriteAndGetResponse aCtrlSeq=" & aCtrlSeq & " CtrlSeq=" & CtrlSeq);

/*
  res = -5;
  sent = OutComPort(0,chr(ST05_SOC));
  sent = true;
  if (sent) then begin
    res = WaitForPOSNETReply(delay,true,response);
  end;
  if (res!=noErr) then begin
    goto LPOSNETWriteAndGetResponse;
  end;
*/  
  res = -6;
  sent = OutComPort(0,CtrlSeq);
  if (sent) then begin
    res = WaitForPOSNETReply(delay,false,response);
  end;
LPOSNETWriteAndGetResponse:;  
  POSNETWriteAndGetResponse = res;
  return;
end;

function Integer Open_POSNETProtocol(record LSerialPortDeviceVc LSPDr)
begin
  Integer res,noErr;
  string 255 ldevice;
  
  ldevice = LSPDr.Port;
  if (blank(ldevice)) then begin
    ldevice = "COM1";
  end;
  res = OpenComPort(0,ldevice,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);
  if (res==1) then begin
    if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))==false) then begin 
      SetComPortCodepage("CP1250");
    end;
    res = noErr;
  end else begin
    res = 1;
    goto LOpen_POSNETProtocol;
  end;
LOpen_POSNETProtocol:;
  Open_POSNETProtocol = res;
  return;
end;

procedure GetPOSNETDate(string areplystr,var Integer year,var Integer month,var Integer day)
begin
  Integer res,i,l,what;
  string 1 nc;
  string 255 tstrY,tstrM,tstrD;
  string 255 replystr;
  Boolean getdatef;
  Date td;
  LongInt pos;
  
  pos = 0;
  GetNextSubstring(areplystr,pos,chr(POSNET_FS),replystr)
  GetNextSubstring(areplystr,pos,chr(POSNET_FS),replystr)
  replystr = Mid(replystr,2,10);
  td = DateFromString(replystr,"YYYY-MM-DD");
  year = td.year;
  month = td.month;
  day = td.day;
  return;
end;

function Integer CheckClock_POSNETProtocol()
begin
  Integer res;
  Date td;
  Integer pY,pM,pD;
  string 255 CtrlSeq;
  string 3 DCS,LBSENDCK,ST;
  Integer noErr;
  string 255 replystr;
  
  td = CurrentDate;
  CtrlSeq = "rtcget" & chr(POSNET_FS);
  res = POSNETWriteAndGetResponse(CtrlSeq,POSNETPROTOCOL_DELAY,replystr);
  if (res!=noErr) then begin
    if (res>=12400) then begin
      MessageBox(0,USetStr(res));
    end else begin
      MessageBox(0,"Error 2: " & res);
    end;
    goto LCheckClock_POSNETProtocol;
  end;
  GetPOSNETDate(replystr,pY,pM,pD);
  if ((GetYear(td)==pY) and (GetMonth(td)==pM) and (GetDay(td)==pD)) then begin
     res = noErr;
  end else begin
     MessageBox(0,USetStr(12402));
     MessageBox(0,USetStr(12403) & pY & pM & pD);
     MessageBox(0,USetStr(12404) & GetYear(td) & GetMonth(td) & GetDay(td));
//     res = SendPOSNETString(chr(56));
     res = 1;
  end;
LCheckClock_POSNETProtocol:;
  CheckClock_POSNETProtocol = res;
  return;
end;

procedure GetVATRates_POSNETProtocol(string replystr,var Array val FPVATRates)
begin
  LongInt pos;
  string 255 tstr;

  pos = 0;
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  FPVATRates[0] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  FPVATRates[1] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  FPVATRates[2] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  FPVATRates[3] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  FPVATRates[4] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  FPVATRates[5] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNET_FS),tstr)
  FPVATRates[6] = ValFromString(Right(tstr,len(tstr)-2),",","");
  return;
end;

function Integer LoadVATRates_POSNETProtocol(Array val prates)
BEGIN
  Integer res,noErr;
  string 10 getReplystr;
  string 2 ST;
  Integer i,l,slash,vatdef;
  string 255 replystr,CtrlSeq;
  Date td;

  CtrlSeq = "vatget" & chr(POSNET_FS);
  res = POSNETWriteAndGetResponse(CtrlSeq,POSNETPROTOCOL_DELAY,replystr);
  if (blank(replystr)) then begin
    goto L66LoadVATRates_POSNETProtocol;
  end;
  if (res!=noErr) then begin
    goto LLoadVATRates_POSNETProtocol;
  end;
  td = CurrentDate;
  GetVATRates_POSNETProtocol(replystr,prates);
  goto LLoadVATRates_POSNETProtocol;
L66LoadVATRates_POSNETProtocol:;
  res = 12405;
  MessageBox(0,res);
LLoadVATRates_POSNETProtocol:;
  LoadVATRates_POSNETProtocol = res;
  RETURN;
END;

function Integer TransBegin_POSNETProtocol()
begin
  Integer res;
  string 255 CtrlSeq;

  CtrlSeq = "login" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "na" & CurrentUser & chr(POSNET_FS);
  if (nonblank(CurMachineName)) then begin
    CtrlSeq = CtrlSeq & "nk" & CurMachineName & chr(POSNET_FS);
  end;
  CtrlSeq = CtrlSeq & "dr" & "0" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LTransBegin_POSNETProtocol;
  end;

  CtrlSeq = "trinit" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "bm0" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
LTransBegin_POSNETProtocol:;
  TransBegin_POSNETProtocol = res;
  return;
end;

function val DownPaymentAmount(record IVVc IVr,Integer ordrow)
begin
  val res;
  row IVVc IVrw;
  Integer i,rwcnt;

  if (ordrow>=0) then begin
    rwcnt =  MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==5) then begin
        if (IVrw.OrdRow==ordrow) then begin
          res = res + IVrw.Sum;
        end;
      end;
    end;
  end;
  DownPaymentAmount = res;
  return;
end;

function Integer PrintBOSLines_POSNETProtocol(record IVVc IVr,Array val prates,Integer FiscalPrinter)
begin
  Integer res,noErr,res2;
  record SysFormatBlock SFb;
  record CashPrintBlock CPb;
  record VATCodeBlock VATb;
  record INVc INr;
  Integer i,j,linenr,rwcnt,slen;
  row IVVc IVrw;
  string 255 tstr,spec,tspec,CtrlSeq;
  string 20 qtystr, pricestr;
  Boolean onelinef;
  string 3 DCS,ST,LBTRSLN;
  string 1 CR;
  string 20 cancelstr;
  string 10 FPVATCode;
  string 255 replystr;
  val downpaysum,qty;
  
  BlockLoad(SFb);
  BlockLoad(CPb);
  BlockLoad(VATb);
  rwcnt =  MatRowCnt(IVr);
  linenr = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (blank(IVrw.ArtCode)) then begin
      goto LSKIPROW;
    end;
    qty = IVrw.Quant;
    downpaysum = blankval;
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;
        downpaysum = DownPaymentAmount(IVr,IVrw.OrdRow);
        if (downpaysum!=0) then begin        
          IVrw.Sum = IVrw.Sum + downpaysum;
          IVrw.Price = (IVrw.Sum/(100-IVrw.vRebate))*100;
          IVrw.Price = Round(IVrw.Price/IVrw.Quant,SetRoundModeD(2)); 
        end else begin
          if (IVrw.PriceFactor!=0) then begin
            qty = qty/IVrw.PriceFactor;
          end;
        end;
      case kInvoiceRowTypeCorrection: ;
        if (IVrw.PriceFactor!=0) then begin
          qty = qty/IVrw.PriceFactor;
        end;
      case kInvoiceRowTypeDownpayment: 
        if (IVrw.Sum<0) then begin 
          goto LSKIPROW;
        end;
        if (blank(IVrw.Price)) then begin
          IVrw.Price = IVrw.Sum/IVrw.Quant;
        end;
        downpaysum = IVrw.Sum;
      otherwise 
        goto LSKIPROW;
    end;
    onelinef = false;
    linenr = linenr + 1;
    spec = "";
    if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin    
      spec = INr.AlternativeCode;
    end;
    if (blank(spec)) then begin
      spec = IVrw.Spec;
    end;
    
    CtrlSeq = "trline" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & IVrw.ArtCode & chr(POSNET_FS);
    GetPOSNETVATCode(prates,FiscalPrinter,VATb,IVrw.VATCode,FPVATCode);
    CtrlSeq = CtrlSeq & "vt" & FPVATCode & chr(POSNET_FS);
    tstr = ValToString(IVrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "pr" & tstr & chr(POSNET_FS);
//    CtrlSeq = CtrlSeq & "st" & "false" & chr(POSNET_FS);//storno
    tstr = ValToString(IVrw.Quant*IVrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    tstr = ValToString(IVrw.Quant,M4Qty,"",",",0);
    CtrlSeq = CtrlSeq & "il" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "op" & Left(spec,35) & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "jm" & IVrw.UnitCode & chr(POSNET_FS);
    if (IVrw.vRebate!=0) then begin
      CtrlSeq = CtrlSeq & "rd" & "1" & chr(POSNET_FS);
      if (downpaysum==0) then begin
        tstr = ValToString(IVrw.vRebate*100,M40Val,"",",",1);
        CtrlSeq = CtrlSeq & "rp" & tstr & chr(POSNET_FS);
      end else begin
        tstr = ValToString((IVrw.Quant*IVrw.Price - IVrw.Sum)*100,M40Val,"",",",1);
        CtrlSeq = CtrlSeq & "rw" & tstr & chr(POSNET_FS);
      end;
    end;
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
//    MilliSleep(200);
LSKIPROW:;    
  end;
LPrintBOSLines_POSNETProtocol:;  
  PrintBOSLines_POSNETProtocol = res;
  return;  
end;


function Integer PaymentModes_POSNETProtocol(record IVVc IVr)
begin
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  vector val vpaymodesums;
  
  IVCalculatePaymentModeSums(IVr,vpaymodesums);
  if (vpaymodesums[kInvoiceRowTypeCashPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCashPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModes_POSNETProtocol;
    end;
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "2" & chr(POSNET_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCreditCardPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModes_POSNETProtocol;
    end;
  end;
  if (vpaymodesums[100]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "8" & chr(POSNET_FS);
    tstr = ValToString(vpaymodesums[100]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModes_POSNETProtocol;
    end;
  end;
  if (IVr.RetnValue>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = ValToString(IVr.RetnValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModes_POSNETProtocol;
    end;
  end else begin
/*
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = "0";
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNET_FS);
*/
  end;
LPaymentModes_POSNETProtocol:;
  PaymentModes_POSNETProtocol = res;
  return;
end;

function Integer AcceptBOS_POSNETProtocol(record IVVc IVr)
begin
  Integer res;
  string 255 CtrlSeq,tstr;
  vector val vpaymodesums;
  
  IVCalculatePaymentModeSums(IVr,vpaymodesums);
  CtrlSeq = "trend" & chr(POSNET_FS);
  tstr = ValToString(IVr.Sum4*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "to" & tstr & chr(POSNET_FS);
  tstr = ValToString((vpaymodesums[kInvoiceRowTypeCashPayment]+vpaymodesums[kInvoiceRowTypeCreditCardPayment])*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "fp" & tstr & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fe" & "0" & chr(POSNET_FS);
  if (IVr.RetnValue>0) then begin
    tstr = ValToString(IVr.RetnValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNET_FS);
  end else begin
/*
    tstr = "0";
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNET_FS);
*/
  end;
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);

  AcceptBOS_POSNETProtocol = res;
  return;
end;

function Integer AdditionalLines_POSNETProtocol(record IVVc IVr,Integer FiscalPrinter)
begin
  Integer res;
  string 255 CtrlSeq;
  
  
  switch (FiscalPrinter) begin
    case kSerialPortDeviceModelFiscPrinterPOSNETwVATNr:
      if (nonblank(IVr.VATNr)) then begin
        CtrlSeq = "trnipset" & chr(POSNET_FS);
        CtrlSeq = CtrlSeq & "ni" & IVr.VATNr & chr(POSNET_FS);
        res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
        if (res!=0) then begin
          goto LAdditionalLines_POSNETProtocol;
        end;
      end;
  end;


  CtrlSeq = "trftrln" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "id" & "0" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "na" & IVr.SerNr & chr(POSNET_FS);

  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LAdditionalLines_POSNETProtocol;
  end;

  if (IVr.Points!=0) then begin
    CtrlSeq = "trftrln" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "id" & "1" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & IVr.Points & chr(POSNET_FS);

    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LAdditionalLines_POSNETProtocol;
    end;
  end;
LAdditionalLines_POSNETProtocol:;
  AdditionalLines_POSNETProtocol = res;
  return;
end;

function Integer EndFooter_POSNETProtocol()
begin
  Integer res;
  string 255 CtrlSeq;
  
  CtrlSeq = "trftrend" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LEndFooter_POSNETProtocol;
  end;
/*
  CtrlSeq = "logout" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "na" & CurrentUser & chr(POSNET_FS);
  if (nonblank(CurMachineName)) then begin
    CtrlSeq = CtrlSeq & "nk" & CurMachineName & chr(POSNET_FS);
  end;
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LEndFooter_POSNETProtocol;
  end;
*/
LEndFooter_POSNETProtocol:;
  EndFooter_POSNETProtocol = res;
  return;
end;

procedure ClosePOSNET()
begin
  Integer res;

  res = CloseComPort(0);
  return;
end;

global
function Integer OpenDrawer_POSNETProtocol(record LSerialPortDeviceVc LSPDr,Boolean opencomf)
begin
  Integer res,noErr;
  string 255 CtrlSeq;
  
  if (opencomf) then begin
    res = Open_POSNETProtocol(LSPDr);
  end;
  if (res==noErr) then begin    
    CtrlSeq = "opendrwr" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LOpenDrawer_POSNETProtocol;
    end;
  end;
LOpenDrawer_POSNETProtocol:;
  if (opencomf) then begin
    ClosePOSNET;
  end;
  OpenDrawer_POSNETProtocol = res;
  return;
end;

global
updating procedure PrintPOSNETReceipt_withPOSNETProtocol(var record IVVc IVr,record LSerialPortDeviceVc LSPDr)
begin
  record IVVc lIVr;
  record IVVc oldIVr;
  string 2 ST;
  string 255 replystr,tstr;
  Integer noErr;
  Array val prates;

  noErr = 0;
  if (Open_POSNETProtocol(LSPDr)==noErr) then begin
    if ((CheckClock_POSNETProtocol==noErr) and 
        (LoadVATRates_POSNETProtocol(prates)==noErr)) then begin
      if (TransBegin_POSNETProtocol==noErr) then begin
        if (PrintBOSLines_POSNETProtocol(IVr,prates,LSPDr.Printer)==noErr) then begin
          if (PaymentModes_POSNETProtocol(IVr)==noErr) then begin
            if (AcceptBOS_POSNETProtocol(IVr)==noErr) then begin
              if (AdditionalLines_POSNETProtocol(IVr,LSPDr.Printer)==noErr) then begin
                if (EndFooter_POSNETProtocol==noErr) then begin
//                  OpenDrawer_POSNETProtocol(false);
                  lIVr.SerNr = IVr.SerNr;
                  if (ReadFirstMain(lIVr,1,true)) then begin
                    RecordCopy(oldIVr,lIVr);
                    lIVr.Prntdf = 1;
                    if (RecordUpdate(oldIVr,lIVr,false)==0) then begin
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;     
      end;     
    end;
    ClosePOSNET;
  end;
  return;
end;

function Integer PrintBOSLinesIVCash_POSNETProtocol(record IVCashVc IVCashr,Array val prates,Integer FiscalPrinter)
begin
  Integer res,noErr,res2;
  record SysFormatBlock SFb;
  record CashPrintBlock CPb;
  record VATCodeBlock VATb;
  record INVc INr;
  Integer i,j,linenr,rwcnt,slen;
  row IVCashVc IVCashrw;
  string 255 tstr,spec,tspec,CtrlSeq;
  string 20 qtystr, pricestr;
  Boolean onelinef;
  string 3 DCS,ST,LBTRSLN;
  string 1 CR;
  string 20 cancelstr;
  string 10 FPVATCode;
  string 255 replystr;
  val qty,vreb;
  
  BlockLoad(SFb);
  BlockLoad(CPb);
  BlockLoad(VATb);
  rwcnt =  MatRowCnt(IVCashr);
  linenr = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (blank(IVCashrw.ArtCode)) then begin
      goto LSKIPIVCashROW;
    end;
    qty = IVCashrw.Quant;
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkIVCashRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkIVCashRowTypeNormal:;
        if (IVCashrw.PriceFactor!=0) then begin
          qty = qty/IVCashrw.PriceFactor;
        end;
      otherwise 
        if (IVCashrw.PriceFactor!=0) then begin
          qty = qty/IVCashrw.PriceFactor;
        end;
        goto LSKIPIVCashROW;
    end;
    onelinef = false;
    linenr = linenr + 1;
    spec = "";
    if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin    
      spec = INr.AlternativeCode;
    end;
    if (blank(spec)) then begin
      spec = IVCashrw.Spec;
    end;
    
    CtrlSeq = "trline" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & IVCashrw.ArtCode & chr(POSNET_FS);
    GetPOSNETVATCode(prates,FiscalPrinter,VATb,IVCashrw.VATCode,FPVATCode);
    CtrlSeq = CtrlSeq & "vt" & FPVATCode & chr(POSNET_FS);
    tstr = ValToString(IVCashrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "pr" & tstr & chr(POSNET_FS);
//    CtrlSeq = CtrlSeq & "st" & "false" & chr(POSNET_FS);//storno
    tstr = ValToString(IVCashrw.Quant*IVCashrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    tstr = ValToString(IVCashrw.Quant,M4Qty,"",",",0);
    CtrlSeq = CtrlSeq & "il" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "op" & Left(spec,35) & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "jm" & IVCashrw.UnitCode & chr(POSNET_FS);
    if (nonblank(IVCashrw.vRebate)) then begin
      CtrlSeq = CtrlSeq & "rd" & "1" & chr(POSNET_FS);
      vreb = CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum);
      tstr = ValToString(vreb*100,M40Val,"",",",1);
      CtrlSeq = CtrlSeq & "rp" & tstr & chr(POSNET_FS);
    end;
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
//    MilliSleep(200);
LSKIPIVCashROW:;    
  end;
LPrintBOSLinesIVCash_POSNETProtocol:;  
  PrintBOSLinesIVCash_POSNETProtocol = res;
  return;  
end;

function Integer PaymentModesIVCash_POSNETProtocol(record IVCashVc IVCashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  vector val vpaymodesums;
  
  IVCashCalculatePaymentModeSums(IVCashr,vpaymodesums);
  if (vpaymodesums[kInvoiceRowTypeCashPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCashPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModesIVCash_POSNETProtocol;
    end;
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "2" & chr(POSNET_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCreditCardPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModesIVCash_POSNETProtocol;
    end;
  end;
  if (IVCashr.RetValue>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = ValToString(IVCashr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModesIVCash_POSNETProtocol;
    end;
  end else begin
/*
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = "0";
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNET_FS);
*/
  end;
LPaymentModesIVCash_POSNETProtocol:;
  PaymentModesIVCash_POSNETProtocol = res;
  return;
end;

function Integer AcceptBOSIVCash_POSNETProtocol(record IVCashVc IVCashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr;
  vector val vpaymodesums;
  
  IVCashCalculatePaymentModeSums(IVCashr,vpaymodesums);
  CtrlSeq = "trend" & chr(POSNET_FS);
  tstr = ValToString(IVCashr.Sum4*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "to" & tstr & chr(POSNET_FS);
  tstr = ValToString((vpaymodesums[kInvoiceRowTypeCashPayment]+vpaymodesums[kInvoiceRowTypeCreditCardPayment])*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "fp" & tstr & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fe" & "0" & chr(POSNET_FS);
  if (IVCashr.RetValue>0) then begin
    tstr = ValToString(IVCashr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNET_FS);
  end else begin
/*
    tstr = "0";
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNET_FS);
*/
  end;
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);

  AcceptBOSIVCash_POSNETProtocol = res;
  return;
end;

function Integer AdditionalLinesIVCash_POSNETProtocol(record IVCashVc IVCashr,Integer FiscalPrinter)
begin
  Integer res;
  string 255 CtrlSeq;
  
  switch (FiscalPrinter) begin
    case kSerialPortDeviceModelFiscPrinterPOSNETwVATNr:
      if (nonblank(IVCashr.VATNr)) then begin
        CtrlSeq = "trnipset" & chr(POSNET_FS);
        CtrlSeq = CtrlSeq & "ni" & IVCashr.VATNr & chr(POSNET_FS);
        res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
        if (res!=0) then begin
          goto LAdditionalLinesIVCash_POSNETProtocol;
        end;
      end;
  end;


  CtrlSeq = "trftrln" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "id" & "0" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "na" & IVCashr.SerNr & chr(POSNET_FS);

  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LAdditionalLinesIVCash_POSNETProtocol;
  end;

  if (IVCashr.Points!=0) then begin
    CtrlSeq = "trftrln" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "id" & "1" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & IVCashr.Points & chr(POSNET_FS);

    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LAdditionalLinesIVCash_POSNETProtocol;
    end;
  end;
LAdditionalLinesIVCash_POSNETProtocol:;
  AdditionalLinesIVCash_POSNETProtocol = res;
  return;
end;

global 
procedure SetPOSWindowDisplayModeFiscalPrinterPOSNETLCD(record LSerialPortDeviceVc LSPDr,string adispstr,string adisp2str)
begin
  record IVVc oldIVr;
  string 2 ST;
  string 255 replystr,tstr, CtrlSeq, res;
  string 255 dispstr,disp2str;
  Integer noErr;
  Array val prates;
    
  dispstr = adispstr;
  disp2str = adisp2str;
  //stopalert("dispstr: " & dispstr & ", disp2str: " & disp2str);
  if (blank(dispstr)) then begin
    dispstr = disp2str;
    disp2str = "";
  end;
    
  noErr = 0;  
  res = 0;
  
  if (Open_POSNETProtocol(LSPDr)==noErr) then begin
    if (CheckClock_POSNETProtocol==noErr) begin
     //  if (TransBegin_POSNETProtocol==noErr) then begin
        // stopalert("UUU");
         CtrlSeq = "dsptxt" & chr(POSNET_FS);
         CtrlSeq = CtrlSeq & "id0" & chr(POSNET_FS) & "st" & dispstr & chr(POSNET_LF) & disp2str & chr(POSNET_FS);
         res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
     //  end;
    end;
    ClosePOSNET;
  end;
  return;  
end;

global
updating procedure PrintPOSNETReceiptIVCash_withPOSNETProtocol(var record IVCashVc IVCashr,record LSerialPortDeviceVc LSPDr)
begin
  record IVCashVc oldIVCashr;
  string 2 ST;
  string 255 replystr,tstr;
  Integer noErr;
  Array val prates;

  noErr = 0;
  if (Open_POSNETProtocol(LSPDr)==noErr) then begin
    if ((CheckClock_POSNETProtocol==noErr) and 
        (LoadVATRates_POSNETProtocol(prates)==noErr)) then begin
      if (TransBegin_POSNETProtocol==noErr) then begin
        if (PrintBOSLinesIVCash_POSNETProtocol(IVCashr,prates,LSPDr.Printer)==noErr) then begin
          if (PaymentModesIVCash_POSNETProtocol(IVCashr)==noErr) then begin
            if (AcceptBOSIVCash_POSNETProtocol(IVCashr)==noErr) then begin
              if (AdditionalLinesIVCash_POSNETProtocol(IVCashr,LSPDr.Printer)==noErr) then begin
                if (EndFooter_POSNETProtocol==noErr) then begin
//                  OpenDrawer_POSNETProtocol(false);
                  RecordCopy(oldIVCashr,IVCashr);
                  IVCashr.Prntdf = 1;
                  if (RecordUpdate(oldIVCashr,IVCashr,false)==0) then begin
                  end;
                end;
              end;
            end;
          end;
        end;     
      end;     
    end;
    ClosePOSNET;
  end;
  return;
end;

function Integer PrintBOSLinesRestAcc_POSNETProtocol(record RestAccVc RestAccr,Array val prates,Integer FiscalPrinter)
begin
  Integer res,noErr,res2;
  record SysFormatBlock SFb;
  record CashPrintBlock CPb;
  record VATCodeBlock VATb;
  record INVc INr;
  Integer i,j,linenr,rwcnt,slen;
  row RestAccVc RestAccrw;
  string 255 tstr,spec,tspec,CtrlSeq;
  string 20 qtystr, pricestr;
  Boolean onelinef;
  string 3 DCS,ST,LBTRSLN;
  string 1 CR;
  string 20 cancelstr;
  string 10 FPVATCode;
  string 255 replystr;
  val qty;
  
  BlockLoad(SFb);
  BlockLoad(CPb);
  BlockLoad(VATb);
  rwcnt =  MatRowCnt(RestAccr);
  linenr = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    if (blank(RestAccrw.ArtCode)) then begin
      goto LSKIPRestAccROW;
    end;
    qty = RestAccrw.Quant;
    switch (RestAccrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkRestAccRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkRestAccRowTypeNormal:;
        if (RestAccrw.PriceFactor!=0) then begin
          qty = qty/RestAccrw.PriceFactor;
        end;
      otherwise 
        if (RestAccrw.PriceFactor!=0) then begin
          qty = qty/RestAccrw.PriceFactor;
        end;
        goto LSKIPRestAccROW;
    end;
    onelinef = false;
    linenr = linenr + 1;
    spec = "";
    if (ReadFirstItem(RestAccrw.ArtCode,INr,true,true)) then begin    
      spec = INr.AlternativeCode;
    end;
    if (blank(spec)) then begin
      spec = RestAccrw.Spec;
    end;
    
    CtrlSeq = "trline" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & RestAccrw.ArtCode & chr(POSNET_FS);
    GetPOSNETVATCode(prates,FiscalPrinter,VATb,RestAccrw.VATCode,FPVATCode);
    CtrlSeq = CtrlSeq & "vt" & FPVATCode & chr(POSNET_FS);
    tstr = ValToString(RestAccrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "pr" & tstr & chr(POSNET_FS);
//    CtrlSeq = CtrlSeq & "st" & "false" & chr(POSNET_FS);//storno
    tstr = ValToString(RestAccrw.Quant*RestAccrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    tstr = ValToString(RestAccrw.Quant,M4Qty,"",",",0);
    CtrlSeq = CtrlSeq & "il" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "op" & Left(spec,35) & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "jm" & INr.Unittext & chr(POSNET_FS);
    if (RestAccrw.vRebate!=0) then begin
      CtrlSeq = CtrlSeq & "rd" & "1" & chr(POSNET_FS);
      tstr = ValToString(RestAccrw.vRebate*100,M40Val,"",",",1);
      CtrlSeq = CtrlSeq & "rp" & tstr & chr(POSNET_FS);
    end;
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
//    MilliSleep(200);
LSKIPRestAccROW:;    
  end;
LPrintBOSLinesRestAcc_POSNETProtocol:;  
  PrintBOSLinesRestAcc_POSNETProtocol = res;
  return;  
end;

function Integer PaymentModesRestAcc_POSNETProtocol(record RestAccVc RestAccr)
begin
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  vector val vpaymodesums;
  
  RestAccCalculatePaymentModeSums(RestAccr,vpaymodesums);
  if (vpaymodesums[kInvoiceRowTypeCashPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCashPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModesRestAcc_POSNETProtocol;
    end;
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "2" & chr(POSNET_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCreditCardPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModesRestAcc_POSNETProtocol;
    end;
  end;
  if (RestAccr.RetValue>0) then begin
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = ValToString(RestAccr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LPaymentModesRestAcc_POSNETProtocol;
    end;
  end else begin
/*
    CtrlSeq = "trpayment" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNET_FS);
    tstr = "0";
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNET_FS);
*/
  end;
LPaymentModesRestAcc_POSNETProtocol:;
  PaymentModesRestAcc_POSNETProtocol = res;
  return;
end;

function Integer AcceptBOSRestAcc_POSNETProtocol(record RestAccVc RestAccr)
begin
  Integer res;
  string 255 CtrlSeq,tstr;
  vector val vpaymodesums;
  
  RestAccCalculatePaymentModeSums(RestAccr,vpaymodesums);
  CtrlSeq = "trend" & chr(POSNET_FS);
  tstr = ValToString(RestAccr.Sum4*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "to" & tstr & chr(POSNET_FS);
  tstr = ValToString((vpaymodesums[kInvoiceRowTypeCashPayment]+vpaymodesums[kInvoiceRowTypeCreditCardPayment])*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "fp" & tstr & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fe" & "0" & chr(POSNET_FS);
  if (RestAccr.RetValue>0) then begin
    tstr = ValToString(RestAccr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNET_FS);
  end else begin
/*
    tstr = "0";
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNET_FS);
*/
  end;
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);

  AcceptBOSRestAcc_POSNETProtocol = res;
  return;
end;

function Integer AdditionalLinesRestAcc_POSNETProtocol(record RestAccVc RestAccr,Integer FiscalPrinter)
begin
  Integer res;
  string 255 CtrlSeq;
  
  switch (FiscalPrinter) begin
    case kSerialPortDeviceModelFiscPrinterPOSNETwVATNr:
      if (nonblank(RestAccr.VATNr)) then begin
        CtrlSeq = "trnipset" & chr(POSNET_FS);
        CtrlSeq = CtrlSeq & "ni" & RestAccr.VATNr & chr(POSNET_FS);
        res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
        if (res!=0) then begin
          goto LAdditionalLinesRestAcc_POSNETProtocol;
        end;
      end;
  end;

  CtrlSeq = "trftrln" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "id" & "0" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "na" & RestAccr.SerNr & chr(POSNET_FS);

  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LAdditionalLinesRestAcc_POSNETProtocol;
  end;

  if (RestAccr.Points!=0) then begin
    CtrlSeq = "trftrln" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "id" & "1" & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "na" & RestAccr.Points & chr(POSNET_FS);

    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
    if (res!=0) then begin
      goto LAdditionalLinesRestAcc_POSNETProtocol;
    end;
  end;
LAdditionalLinesRestAcc_POSNETProtocol:;
  AdditionalLinesRestAcc_POSNETProtocol = res;
  return;
end;

global
updating procedure PrintPOSNETReceiptRestAcc_withPOSNETProtocol(var record RestAccVc RestAccr,record LSerialPortDeviceVc LSPDr)
begin
  record RestAccVc oldRestAccr;
  string 2 ST;
  string 255 replystr,tstr;
  Integer noErr;
  Array val prates;

  noErr = 0;
  if (Open_POSNETProtocol(LSPDr)==noErr) then begin
    if ((CheckClock_POSNETProtocol==noErr) and 
        (LoadVATRates_POSNETProtocol(prates)==noErr)) then begin
      if (TransBegin_POSNETProtocol==noErr) then begin
        if (PrintBOSLinesRestAcc_POSNETProtocol(RestAccr,prates,LSPDr.Printer)==noErr) then begin
          if (PaymentModesRestAcc_POSNETProtocol(RestAccr)==noErr) then begin
            if (AcceptBOSRestAcc_POSNETProtocol(RestAccr)==noErr) then begin
              if (AdditionalLinesRestAcc_POSNETProtocol(RestAccr,LSPDr.Printer)==noErr) then begin
                if (EndFooter_POSNETProtocol==noErr) then begin
//                  OpenDrawer_POSNETProtocol(false);
                  RecordCopy(oldRestAccr,RestAccr);
                  RestAccr.Prntdf = 1;
                  if (RecordUpdate(oldRestAccr,RestAccr,false)==0) then begin
                  end;
                end;
              end;
            end;
          end;
        end;     
      end;     
    end;
    ClosePOSNET;
  end;
  return;
end;

function Integer MoneyOutCurr_POSNETProtocol(record CashVc Cashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  
  CtrlSeq = "cash" & chr(POSNET_FS);
  tstr = ValToString(Cashr.Total*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "kw" & tstr & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "wp" & "0" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyOutCurr_POSNETProtocol;
  end;

  CtrlSeq = "formstart" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fh" & "1" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyOutCurr_POSNETProtocol;
  end;
/*
  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "s1" & Cashr.Comment & chr(10) & tstr & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "2" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyOutCurr_POSNETProtocol;
  end;
*/

  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "16" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyOutCurr_POSNETProtocol;
  end;
  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "17" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyOutCurr_POSNETProtocol;
  end;
  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "s1" & "Podpis" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "18" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyOutCurr_POSNETProtocol;
  end;

  CtrlSeq = "formend" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyOutCurr_POSNETProtocol;
  end;

LMoneyOutCurr_POSNETProtocol:;
  MoneyOutCurr_POSNETProtocol = res;
  return;
end;

function Integer MoneyInCurr_POSNETProtocol(record CashVc Cashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr;
  
  CtrlSeq = "cash" & chr(POSNET_FS);
  tstr = ValToString(Cashr.Total*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "kw" & tstr & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "wp" & "1" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyInCurr_POSNETProtocol;
  end;

  CtrlSeq = "formstart" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fh" & "0" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyInCurr_POSNETProtocol;
  end;
/*
  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "s1" & Cashr.Comment & chr(10) & tstr & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "2" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyInCurr_POSNETProtocol;
  end;
*/

  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "16" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyInCurr_POSNETProtocol;
  end;
  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "17" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyInCurr_POSNETProtocol;
  end;
  CtrlSeq = "formline" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "s1" & "Podpis" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fl" & "18" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyInCurr_POSNETProtocol;
  end;

  CtrlSeq = "formend" & chr(POSNET_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNET_FS);
  res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);
  if (res!=0) then begin
    goto LMoneyInCurr_POSNETProtocol;
  end;

LMoneyInCurr_POSNETProtocol:;
  MoneyInCurr_POSNETProtocol = res;
  return;
end;

global
procedure PrintPOSNETProtocolCashEvent(var record CashVc Cashr,record LSerialPortDeviceVc LSPDr)
begin
  Integer noErr,res;
  
  noErr = 0;
  res = Open_POSNETProtocol(LSPDr);
  if (res==noErr) then begin    
    res = CheckClock_POSNETProtocol;
    if (res!=noErr) then begin
      goto LPrintPOSNETProtocolCashEvent;
    end;
    switch (Cashr.Event) begin
      case 0:
        MoneyOutCurr_POSNETProtocol(Cashr);
      case 1:
        MoneyInCurr_POSNETProtocol(Cashr);
    end;
LPrintPOSNETProtocolCashEvent:;
    ClosePOSNET;
    if (res!=0) then begin
      MessageBox(0,"Error 3: " & res);
    end;
  end;
  return;
end;

global
procedure POSNETProtocol_DailyReport(record LSerialPortDeviceVc LSPDr,Date atd)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date td;
  
  noErr = 0;
  res = Open_POSNETProtocol(LSPDr);
  if (res==noErr) then begin    
    CtrlSeq = "dailyrep" & chr(POSNET_FS);
    td = atd;
    if (blankdate(td)) then begin
      td = CurrentDate;
    end;
    CtrlSeq = CtrlSeq & "da" & DateToString(td,"YYYY-MM-DD") & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);    
    ClosePOSNET;
    if (res!=0) then begin
      MessageBox(0,"Error 4: " & res);
    end;
  end;
  return;
end;

global
procedure POSNETProtocol_MonthlyReport(record LSerialPortDeviceVc LSPDr,Date atd)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date td;
  
  noErr = 0;
  res = Open_POSNETProtocol(LSPDr);
  if (res==noErr) then begin    
    CtrlSeq = "monthlyrep" & chr(POSNET_FS);
    td = atd;
    if (blankdate(td)) then begin
      td = CurrentDate;
    end;
    CtrlSeq = CtrlSeq & "da" & DateToString(td,"YYYY-MM-DD") & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);    
    ClosePOSNET;
    if (res!=0) then begin
      MessageBox(0,"Error 5: " & res);
    end;
  end;
  return;
end;

global
procedure POSNETProtocol_YearlyReport(record LSerialPortDeviceVc LSPDr,Date atd)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date td;
  
  noErr = 0;
  res = Open_POSNETProtocol(LSPDr);
  if (res==noErr) then begin    
    CtrlSeq = "periodicrepbydates" & chr(POSNET_FS);
    td = atd;
    if (blankdate(td)) then begin
      td = CurrentDate;
    end;
    td.month = 1;
    td.day = 1;
    CtrlSeq = CtrlSeq & "fd" & DateToString(td,"YYYY-MM-DD") & chr(POSNET_FS);
    td.month = 12;
    td.day = DaysInMonth(GetYear(td),GetMonth(td));
    CtrlSeq = CtrlSeq & "td" & DateToString(td,"YYYY-MM-DD") & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);    
    ClosePOSNET;
    if (res!=0) then begin
      MessageBox(0,"Error 6: " & res);
    end;
  end;
  return;
end;

global
procedure POSNETProtocol_PeriodicReport(record LSerialPortDeviceVc LSPDr,Date asd,Date aed)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date sd,ed;
  
  noErr = 0;
  res = Open_POSNETProtocol(LSPDr);
  if (res==noErr) then begin    
    CtrlSeq = "periodicrepbydates" & chr(POSNET_FS);
    sd = asd;
    if (blankdate(sd)) then begin
      sd = CurrentDate;
    end;
    ed = aed;
    if (blankdate(ed)) then begin
      ed = CurrentDate;
    end;

    CtrlSeq = CtrlSeq & "fd" & DateToString(sd,"YYYY-MM-DD") & chr(POSNET_FS);
    CtrlSeq = CtrlSeq & "td" & DateToString(ed,"YYYY-MM-DD") & chr(POSNET_FS);
    res = POSNETWrite(CtrlSeq,POSNETPROTOCOL_DELAY);    
    ClosePOSNET;
    if (res!=0) then begin
      MessageBox(0,"Error 7: " & res);
    end;
  end;
  return;
end;
