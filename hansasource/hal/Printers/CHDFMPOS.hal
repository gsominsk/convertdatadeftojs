external function val CalculateDiscountPercentage2(val,val,val,Boolean);
external procedure GetVATproc(string,Integer,var val);
external function val ValFromString(string,string,string);
external function Boolean GetRestPMRow(string,var row RestPMBlock);

function Boolean ParseSDRVReply(string vatfilename,vector string FPVATRates)
begin
  Boolean res;
  Boolean testf;
  string 255 instr,vatcodenr,value;
  LongInt pos,fsz;
  area a;

//  fsz = FileSize(vatfilename);
//  LoadFileToArea(vatfilename,0,fsz,a);
//  WriteAreaToFile(a,"jarek.txt",0);

  OpenFile(vatfilename);
  testf = true;  
  while (testf) begin  
    instr = ImportField;
    pos = 0;
    GetNextSubstring(instr,pos,",",vatcodenr);
    GetNextSubstring(instr,pos,",",value);
  
    if (nonblank(vatcodenr) and nonblank(value)) then begin
      value = ValFromString(value,".","");
      if (blank(FPVATRates[value])) then begin
        FPVATRates[value] = chr(asc("A") + StringToInt(vatcodenr) - 1);  
      end;
      if (nonblank(FPVATRates[value])) then begin res = true; end;    
    end;    
    testf = NextImportLine(false);
  end;
  CloseFile;
  ParseSDRVReply = res;
  return;
end;

function Boolean ReadVATRates(record LSerialPortDeviceVc LSPDr,string vatfilename,vector string FPVATRates)
begin
  Boolean res;
  string 255 exefilename,args;
  Boolean testf;
  LongInt startt;
  
  exefilename = LSPDr.Port & "SDRV.exe";
  args =  " " & "read 30";
  args = args & " " & vatfilename;
  RunProgram(exefilename,args);
  startt = GetCurTick; 
  testf = true;
  while (testf) begin
    testf = FileSize(vatfilename)<50;
    if ((GetCurTick-startt)>3000) then begin
      testf = false;
    end;
  end;  
  if (FileExists(vatfilename) and FileSize(vatfilename)>50) then begin
    res = ParseSDRVReply(vatfilename,FPVATRates);
  end;
  Sleep(2);
  ReadVATRates = res;
  return;
end;

procedure StartCHDFVP(record LSerialPortDeviceVc LSPDr)
begin
  string 255 filename,exefilename;
    
  filename = LSPDr.Port & "CHDVFP.NotStopped.tmp";
  exefilename = LSPDr.Port & "chdvfp.exe";
  if (FileExists(filename)==false) then begin
    RunProgram(exefilename,"");
  end;
  return;
end;

function Integer ParseCHDFMPOSReply(var string rescode,var string msg,var string rcptno)
begin
  Integer res;
  Boolean testf;
  string 255 instr,reply,value;
  LongInt pos;

  testf = true;  
  while (testf) begin  
    instr = ImportField;
    pos = 0;
    GetNextSubstring(instr,pos,"=",reply);
    GetNextSubstring(instr,pos,chr(13) & chr(10),value);
    switch (reply) begin
      case "ResultCode": rescode = value;
      case "Message": msg = value;
      case "ReceiptNo": rcptno = value;
    end;
    testf = NextImportLine(false);
  end;
  
  res = StringToInt(rescode);
  if (blank(rescode)) then begin
    res = 1000;
  end;
  ParseCHDFMPOSReply = res;
  return;
end;

function Integer WaitForCHDFMPOSSimpleReply(string resfilename,LongInt waitfor)
begin
  Integer res,noErr;
  LongInt currenttick,starttick,waitticks;
  Boolean waitf;
  string 255 rescode,msg,rcptno;
  
  res = noErr;
  waitticks = waitfor*1000;
  starttick = GetCurTick;

  waitf = true;
  while (waitf) begin
    currenttick = GetCurTick;
    if (FileExists(resfilename) and FileSize(resfilename)>30) then begin
      OpenFile(resfilename);
      res = ParseCHDFMPOSReply(rescode,msg,rcptno);
      CloseFile;
      if (nonblank(rcptno)) then begin
        waitf = false;
      end;
    end;
    if ((currenttick-starttick)>waitticks) then begin
      waitf = false;
    end;
  end;
  WaitForCHDFMPOSSimpleReply = res;
  return;
end;

function Integer WaitForCHDFMPOSReply(string resfilename,LongInt waitfor,var string rescode,var string msg,var string rcptno)
begin
  Integer res,noErr;
  LongInt currenttick,starttick,waitticks;
  Boolean waitf;
  
  res = noErr;
  waitticks = waitfor*1000;
  starttick = GetCurTick;

  waitf = true;
  while (waitf) begin
    currenttick = GetCurTick;
    if (FileExists(resfilename) and FileSize(resfilename)>30) then begin
      OpenFile(resfilename);
      res = ParseCHDFMPOSReply(rescode,msg,rcptno);
      CloseFile;
      if (nonblank(rcptno)) then begin
        waitf = false;
      end;
    end;
    if ((currenttick-starttick)>waitticks) then begin
      waitf = false;
    end;
  end;
  WaitForCHDFMPOSReply = res;
  return;
end;

procedure DisplayCHDFMPOSError(Integer res,string rescode,string msg,string rcptno)
begin
  switch (res) begin
    case 0:
    case 1: MessageBox(38921," " & msg);
    case 2: MessageBox(38922," " & msg);
    case 3: MessageBox(38923," " & msg);
    case 4: MessageBox(38924," " & msg);
    case 100: MessageBox(38999," " & msg);
    case 1000: MessageBox(38900,"");
    case 1001: MessageBox(38901,"");
    case 1002: MessageBox(38901,"");
    case 1003: MessageBox(38903,"");
  end;
  return;
end;

function Integer CHDFMPOSWriteSimpleCommandToFile(record LSerialPortDeviceVc LSPDr,string command)
begin
  Integer res;
  string 255 tmpfilename,filename,resfilename;
  
  StartCHDFVP(LSPDr);
  filename = LSPDr.Port & "vfpCmds.tmp";
  tmpfilename = LSPDr.Port & "vfpCmds.tmp1";
  resfilename = LSPDr.Port & "vfpResult.tmp";

  Delete_File(filename);
  Delete_File(tmpfilename);
  Delete_File(resfilename);
  if (OpenExportFile(tmpfilename,false)==false) then begin
    CreateFile(tmpfilename);  
  end;
  CloseFile;
  if (OpenExportFile(tmpfilename,false)==false) then begin
    res = 1001;
    goto LCHDFMPOSWriteSimpleCommandToFile;
  end;
  ExportPadString(command,len(command),"",false); 
  CloseFile;
  if (RenameFile(tmpfilename,filename)) then begin
    res = 1002;
    goto LCHDFMPOSWriteSimpleCommandToFile;
  end;
  res = WaitForCHDFMPOSSimpleReply(resfilename,20);
LCHDFMPOSWriteSimpleCommandToFile:;  
  DisplayCHDFMPOSError(res,"","","");
  CHDFMPOSWriteSimpleCommandToFile = res;
  return;
end;

global
procedure CHDFMPOSDailyReport(record LSerialPortDeviceVc LSPDr)
begin
  CHDFMPOSWriteSimpleCommandToFile(LSPDr,"REPORT: TYPE=Z;");  
  return;
end;

global
procedure CHDFMPOSMonthlyReport(record LSerialPortDeviceVc LSPDr)
begin
  CHDFMPOSWriteSimpleCommandToFile(LSPDr,"REPORT: TYPE=X;");
  return;
end;

global
procedure CHDFMPOSOpenDrawer(record LSerialPortDeviceVc LSPDr,Boolean opencomf)
begin
  CHDFMPOSWriteSimpleCommandToFile(LSPDr,"NO_SALE:");  
  return;
end;

global
procedure CHDFMPOSCashEvent(record CashVc Cashr,record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 tmpfilename,filename,resfilename,command;
  string 255 rescode,msg,rcptno;
  
  StartCHDFVP(LSPDr);
  filename = LSPDr.Port & "vfpCmds.tmp";
  tmpfilename = LSPDr.Port & "vfpCmds.tmp1";
  resfilename = LSPDr.Port & "vfpResult.tmp";

  Delete_File(filename);
  Delete_File(tmpfilename);
  Delete_File(resfilename);
  if (OpenExportFile(tmpfilename,false)==false) then begin
    CreateFile(tmpfilename);  
  end;
  CloseFile;
  if (OpenExportFile(tmpfilename,false)==false) then begin
    res = 1001;
    goto LCHDFMPOSCashEvent;
  end;
  
  switch (Cashr.Event) begin
    case 0: 
      command = "PICKUP:";
      command = command & " TENDERID=Cash; NAME=" & """" & USetStr(39112) & """;" & " AMOUNT=" & ValToString(Cashr.Total,M4Val,"",".",0);
    case 1: 
      command = "LOAN:";
      command = command & " TENDERID=Cash; NAME=" & """" & USetStr(39112) & """;" & " AMOUNT=" & ValToString(Cashr.Total,M4Val,"",".",0);
  end;
  command = command & ";" & chr(13) & chr(10);
  ExportPadString(command,len(command),"",false); 
//  command = "EFT_COMMIT";
//  command = command & chr(13) & chr(10);
//  ExportPadString(command,len(command),"",false); 
    
  CloseFile;
  if (RenameFile(tmpfilename,filename)) then begin
    res = 1002;
    goto LCHDFMPOSCashEvent;
  end;
  res = WaitForCHDFMPOSReply(resfilename,20,rescode,msg,rcptno);
LCHDFMPOSCashEvent:;  
  DisplayCHDFMPOSError(res,rescode,msg,rcptno);  
  
  return;
end;

procedure ExportSlipData(LongInt sernr,string argumentstr)
begin
  record CouponVc Couponr;
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer notenr;
  Boolean found;
  Integer i,rwcnt;
  string 255 tstr,command;

  Couponr.IVNr = sernr;
  Couponr.OriginType = 2;
  found = true;
  while (LoopKey("OriginType",Couponr,2,found)) begin
    if (Couponr.IVNr!=sernr) then begin found = false; end;
    if (Couponr.OriginType!=2) then begin found = false; end;
    if (found) then begin
      notenr = 1;
      while (ReadRecordLink(Couponr,notenr,Noter,RLr)) begin
        if ((argumentstr==Noter.Classification) or (blank(argumentstr))) then begin
          if (argumentstr=="MERCHANT") then begin
            command = "PRINT_SLIP: RECEIPT_COPY=YES";
            command = command & ";" & chr(13) & chr(10);
            ExportPadString(command,len(command),"",false); 
          end;
          rwcnt = LineTextCnt(Noter);
          for (i=0;i<rwcnt;i=i+1) begin
            tstr = LineTextGet(Noter,i);
            if (argumentstr=="CUSTOMER") then begin
              command = "COMMENT:";
              command = command & " TEXT=" & """" & tstr & """";
              command = command & ";" & chr(13) & chr(10);
            end else begin
              command = tstr;
              command = command & ";" & chr(13) & chr(10);
            end;
            
            ExportPadString(command,len(command),"",false); 


          end;  
          goto LCCSlipNotePrintNote;
        end;
        notenr = notenr + 1;
      end;
    end;
LCCSlipNotePrintNote:;  
  end;

  return;
end;

global
procedure CHDFMPOSIVCashReceipt(record IVCashVc IVCr,record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 tmpfilename,filename,resfilename,vatfilename,command,vats;
  string 255 rescode,msg,rcptno;
  Integer i,rwcnt;
  row IVCashVc IVCrw;
  Boolean testf,printslipf;
  row RestPMBlock RPMrw;
  vector string 255 FPVATRates;
  val vatv,v;
  
  vatfilename = LSPDr.Port & "vfpResultVAT.tmp";
  Delete_File(vatfilename);

  if (ReadVATRates(LSPDr,vatfilename,FPVATRates)==false) then begin
    res = 1003;
    goto LCHDFMPOSIVCashReceipt;
  end;

  StartCHDFVP(LSPDr);
  filename = LSPDr.Port & "vfpCmds.tmp";
  tmpfilename = LSPDr.Port & "vfpCmds.tmp1";
  resfilename = LSPDr.Port & "vfpResult.tmp";

  Delete_File(filename);
  Delete_File(tmpfilename);
  Delete_File(resfilename);
  SetExportCodePage("CP1257");
  if (OpenExportFile(tmpfilename,false)==false) then begin
    CreateFile(tmpfilename);  
  end;
  CloseFile;
  if (OpenExportFile(tmpfilename,false)==false) then begin
    res = 1001;
    goto LCHDFMPOSIVCashReceipt;
  end;
  rwcnt = MatRowCnt(IVCr);
  command = "COMMENT:";
  command = command & " TEXT=" & """" & USetStr(39105) & " " & IVCr.SerNr & """";
  command = command & ";" & chr(13) & chr(10);
  ExportPadString(command,len(command),"",false); 
  command = "COMMENT:";
  command = command & " TEXT=" & """" & USetStr(39106) & " " & IVCr.CustCode & """";
  command = command & ";" & chr(13) & chr(10);
  ExportPadString(command,len(command),"",false); 
  if (nonblank(IVCr.RegNr1)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.RegNr1 & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (nonblank(IVCr.VATNr)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.VATNr & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (nonblank(IVCr.Addr0)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.Addr0 & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (nonblank(IVCr.Addr1)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.Addr1 & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (nonblank(IVCr.Addr2)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.Addr2 & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (nonblank(IVCr.Addr3)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.Addr3 & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (nonblank(IVCr.InvAddr3)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.InvAddr3 & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (nonblank(IVCr.InvAddr4)) then begin
    command = "COMMENT:";
    command = command & " TEXT=" & """" & IVCr.InvAddr4 & """";
    command = command & ";" & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  rwcnt = MatRowCnt(IVCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);
    testf = true;
    if (IVCrw.ovst!=0) then begin testf = false; end;
    if (testf) then begin
      switch (IVCrw.stp) begin 
        case kInvoiceRowTypeGiftVoucherSold:
          if (IVCrw.GCNr<=0) then begin
            command = "COMMENT:";
            command = command & " TEXT=" & """" & IVCrw.Spec & """";
            command = command & ";" & chr(13) & chr(10);
            ExportPadString(command,len(command),"",false); 
          end else begin
            vatv = 0;
            if (nonblank(IVCrw.VATCode)) then begin
              GetVATproc(IVCrw.VATCode,0,vatv);
            end;
            vats = ValToString(vatv,M4Val,"",DecimalSeparator,0);

            command = "SALE:";
            command = command & " NAME=" & """" & IVCrw.GCNr & " - " & IVCrw.Spec & """;";
            command = command & " PRICE=" & ValToString(IVCrw.Sum,M4Val,"",".",0) & ";";
            command = command & " QNTY=" & ValToString(1.00,M4Qty,"",".",0) & ";";
            command = command & " AMOUNT=" & ValToString(IVCrw.Sum,M4Val,"",".",0) & ";";

    //        command = command & " TAXID=" & "A" & ";";
    //        command = command & " TAXPERCENTS=" & "0" & ";";

            command = command & " TAXID=" & FPVATRates[vats] & ";";
            command = command & " TAXPERCENTS=" & ValToString(vatv,M4Val,"",".",1) & ";";

            command = command & chr(13) & chr(10);
            ExportPadString(command,len(command),"",false); 
          end;
        case kInvoiceRowTypeNormal:
          if (blank(IVCrw.ArtCode)) then begin
            command = "COMMENT:";
            command = command & " TEXT=" & """" & IVCrw.Spec & """";
            command = command & ";" & chr(13) & chr(10);
            ExportPadString(command,len(command),"",false); 
          end else begin
            GetVATproc(IVCrw.VATCode,0,vatv);
            vats = ValToString(vatv,M4Val,"",DecimalSeparator,0);


            command = "SALE:";
            command = command & " NAME=" & """" & IVCrw.ArtCode & " - " & IVCrw.Spec & """;";
            command = command & " PRICE=" & ValToString(IVCrw.Price,M4Val,"",".",0) & ";";
            command = command & " QNTY=" & ValToString(IVCrw.Quant,M4Qty,"",".",0) & ";";
            command = command & " AMOUNT=" & ValToString(IVCrw.Sum,M4Val,"",".",0) & ";";

    //        command = command & " TAXID=" & "A" & ";";
    //        command = command & " TAXPERCENTS=" & "0" & ";";

            command = command & " TAXID=" & FPVATRates[vats] & ";";
            command = command & " TAXPERCENTS=" & ValToString(vatv,M4Val,"",".",1) & ";";

            command = command & chr(13) & chr(10);
          end;
          ExportPadString(command,len(command),"",false); 
          v = CalculateDiscountPercentage2(IVCrw.Quant,IVCrw.Price,IVCrw.Sum,true);
          if (v!=0) then begin
    /*      
            command = "COMMENT:";
            command = command & " TEXT=" & """" & USetStr(1870) & " " & IVCrw.vRebate & "%" & """";
            command = command & ";" & chr(13) & chr(10);
            ExportPadString(command,len(command),"",false); 
    */

            command = "DISCOUNT:";
            command = command & " TYPE=" & "ITEM" & ";";
            command = command & " AMOUNT=" & ValToString(IVCrw.Quant*IVCrw.Price-IVCrw.Sum,M4Val,"",".",0) & ";";
            command = command & chr(13) & chr(10);
            ExportPadString(command,len(command),"",false); 
          end;
      end;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);
    testf = true;
    if (testf) then begin
      switch (IVCrw.stp) begin
        case kInvoiceRowTypeCashPayment:
          command = "TENDER:";
          command = command & " TENDERID=" & """" & "Cash" & """;";
          command = command & " NAME=" & """" &  USetStr(39112) & """;";
          command = command & " AMOUNT=" & ValToString(IVCrw.Sum,M4Val,"",".",0) & ";";
          command = command & chr(13) & chr(10);
          ExportPadString(command,len(command),"",false); 
        case kInvoiceRowTypeCreditCardPayment:
          command = "TENDER:";
          command = command & " TENDERID=" & """" & "Card" & """;";
          command = command & " NAME=" & """" &  USetStr(39113) & """;";
          command = command & " AMOUNT=" & ValToString(IVCrw.Sum,M4Val,"",".",0) & ";";
          command = command & chr(13) & chr(10);
          ExportPadString(command,len(command),"",false); 
          printslipf = true;
        case kInvoiceRowTypeGiftVoucherPayment:
          command = "TENDER:";
          command = command & " TENDERID=" & """" & "Voucher" & """;";
          command = command & " NAME=" & """" &  USetStr(39114) & """;";
          command = command & " AMOUNT=" & ValToString(IVCrw.Sum,M4Val,"",".",0) & ";";
          command = command & chr(13) & chr(10);
          ExportPadString(command,len(command),"",false); 
        case kInvoiceRowTypeChequePayment:
          command = "TENDER:";
          command = command & " TENDERID=" & """" & "Cheque" & """;";
          command = command & " NAME=" & """" &  USetStr(39115) & """;";
          command = command & " AMOUNT=" & ValToString(IVCrw.Sum,M4Val,"",".",0) & ";";
          command = command & chr(13) & chr(10);
          ExportPadString(command,len(command),"",false); 
      end;
    end;
  end;
  if (IVCr.CashValue!=0) then begin
    command = "TENDER:";
    command = command & " TENDERID=" & """" & "Cash" & """;";
    command = command & " NAME=" & """" &  USetStr(39112) & """;";
    command = command & " AMOUNT=" & ValToString(IVCr.CashValue,M4Val,"",".",0) & ";";
    command = command & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (IVCr.RecValue!=0) then begin
    GetRestPMRow(IVCr.PayDeal,RPMrw)
    command = "TENDER:";
    switch (RPMrw.rowstp) begin
      case kInvoiceRowTypeCreditCardPayment:
        command = command & " TENDERID=" & """" & USetStr(39113) & """;";
      otherwise
        command = command & " TENDERID=" & """" & USetStr(39112) & """;";
    end;
    command = command & " NAME=" & """" &  IVCr.SalesMan & """;";
    command = command & " AMOUNT=" & ValToString(IVCr.RecValue,M4Val,"",".",0) & ";";
    command = command & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
  if (IVCr.RecValue2!=0) then begin
    GetRestPMRow(IVCr.PayDeal2,RPMrw)
    command = "TENDER:";
    switch (RPMrw.rowstp) begin
      case kInvoiceRowTypeCreditCardPayment:
        command = command & " TENDERID=" & """" & USetStr(39113) & """;";
      otherwise
        command = command & " TENDERID=" & """" & USetStr(39112) & """;";
    end;
    command = command & " NAME=" & """" &  IVCr.SalesMan & """;";
    command = command & " AMOUNT=" & ValToString(IVCr.RecValue2,M4Val,"",".",0) & ";";
    command = command & chr(13) & chr(10);
    ExportPadString(command,len(command),"",false); 
  end;
//  command = "EFT_COMMIT";
//  command = command & chr(13) & chr(10);
//  ExportPadString(command,len(command),"",false); 
  if (printslipf) then begin
    ExportSlipData(IVCr.SerNr,"CUSTOMER");
    ExportSlipData(IVCr.SerNr,"MERCHANT");
  end;


  CloseFile;

  if (RenameFile(tmpfilename,filename)) then begin
    res = 1002;
    goto LCHDFMPOSIVCashReceipt;
  end;
    
  res = WaitForCHDFMPOSReply(resfilename,20,rescode,msg,rcptno);
LCHDFMPOSIVCashReceipt:;  
  DisplayCHDFMPOSError(res,rescode,msg,rcptno);  
  return;
end;
