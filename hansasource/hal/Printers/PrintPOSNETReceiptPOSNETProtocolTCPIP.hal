external function val CalculateDiscountPercentage(val,val,val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetPOSNETVATCode(Array val,Integer,record VATCodeBlock,string,var string);
external function roundmode SetRoundModeD(Integer);
external function Date DateFromString(string,string);
external procedure LogAreaToFile(string,area);
external function val ValFromString(string,string,string);
external function string 255 NumToHex(string);
external procedure IVCashCalculatePaymentModeSums(record IVCashVc,vector val);
external procedure IVCalculatePaymentModeSums(record IVVc,vector val);
external procedure RestAccCalculatePaymentModeSums(record RestAccVc,vector val);

forward function Integer TCPIPCancel_POSNETProtocol(string,LongInt,string);

enum begin
  POSNETTCPPROTOCOL_DELAY = 10,
  POSNETTCPPROTOCOL_LONGDELAY = 45
end;

enum begin
  POSNETTCP_NOERR = 0,
  POSNETTCP_STX = 2,
  POSNETTCP_ETX = 3,
  POSNETTCP_FS = 9,
  POSNETTCP_LF = 10
end;

function Integer FindStrPosition(string tstr,string decsep)
begin
  Integer res;
  Integer i,slen;
  
  slen = len(tstr);
  for (i=slen;i>=0;i=i-1) begin
    if (Mid(tstr,i,1)==decsep) then begin
       res = i;
       goto LFindStrPosition;
    end;
  end;
LFindStrPosition:;  
  FindStrPosition = res;
  return;  
end;

function Integer HexToInt(string instr)
begin
  Integer res;
  string 16 hexs;
  Integer pos,slen,i,t;

  res = 0;
  slen = len(instr);
  hexs = "0123456789ABCDEF";
  for (i=slen;i>0;i=i-1) begin
    pos = FindStrPosition(hexs,Mid(instr,i-1,1));
    res = res + pos*Power(16,(slen-i));
  end; 
  HexToInt = res; 
  return;  
end;

procedure PopulateCRCHTable(Array Integer acrc)
begin
  Integer i;

  i = 0;     acrc[i]  = HexToInt("0x00"); i = i + 1; acrc[i]  = HexToInt("0x10"); i = i + 1; acrc[i]  = HexToInt("0x20"); i = i + 1; acrc[i]  = HexToInt("0x30"); i = i + 1; acrc[i]  = HexToInt("0x40"); i = i + 1; acrc[i]  = HexToInt("0x50"); i = i + 1; acrc[i]  = HexToInt("0x60"); i = i + 1; acrc[i]  = HexToInt("0x70");
  i = i + 1; acrc[i]  = HexToInt("0x81"); i = i + 1; acrc[i]  = HexToInt("0x91"); i = i + 1; acrc[i]  = HexToInt("0xa1"); i = i + 1; acrc[i]  = HexToInt("0xb1"); i = i + 1; acrc[i]  = HexToInt("0xc1"); i = i + 1; acrc[i]  = HexToInt("0xd1"); i = i + 1; acrc[i]  = HexToInt("0xe1"); i = i + 1; acrc[i]  = HexToInt("0xf1");
  i = i + 1; acrc[i]  = HexToInt("0x12"); i = i + 1; acrc[i]  = HexToInt("0x02"); i = i + 1; acrc[i]  = HexToInt("0x32"); i = i + 1; acrc[i]  = HexToInt("0x22"); i = i + 1; acrc[i]  = HexToInt("0x52"); i = i + 1; acrc[i]  = HexToInt("0x42"); i = i + 1; acrc[i]  = HexToInt("0x72"); i = i + 1; acrc[i]  = HexToInt("0x62");
  i = i + 1; acrc[i]  = HexToInt("0x93"); i = i + 1; acrc[i]  = HexToInt("0x83"); i = i + 1; acrc[i]  = HexToInt("0xb3"); i = i + 1; acrc[i]  = HexToInt("0xa3"); i = i + 1; acrc[i]  = HexToInt("0xd3"); i = i + 1; acrc[i]  = HexToInt("0xc3"); i = i + 1; acrc[i]  = HexToInt("0xf3"); i = i + 1; acrc[i]  = HexToInt("0xe3");
  i = i + 1; acrc[i]  = HexToInt("0x24"); i = i + 1; acrc[i]  = HexToInt("0x34"); i = i + 1; acrc[i]  = HexToInt("0x04"); i = i + 1; acrc[i]  = HexToInt("0x14"); i = i + 1; acrc[i]  = HexToInt("0x64"); i = i + 1; acrc[i]  = HexToInt("0x74"); i = i + 1; acrc[i]  = HexToInt("0x44"); i = i + 1; acrc[i]  = HexToInt("0x54");
  i = i + 1; acrc[i]  = HexToInt("0xa5"); i = i + 1; acrc[i]  = HexToInt("0xb5"); i = i + 1; acrc[i]  = HexToInt("0x85"); i = i + 1; acrc[i]  = HexToInt("0x95"); i = i + 1; acrc[i]  = HexToInt("0xe5"); i = i + 1; acrc[i]  = HexToInt("0xf5"); i = i + 1; acrc[i]  = HexToInt("0xc5"); i = i + 1; acrc[i]  = HexToInt("0xd5");
  i = i + 1; acrc[i]  = HexToInt("0x36"); i = i + 1; acrc[i]  = HexToInt("0x26"); i = i + 1; acrc[i]  = HexToInt("0x16"); i = i + 1; acrc[i]  = HexToInt("0x06"); i = i + 1; acrc[i]  = HexToInt("0x76"); i = i + 1; acrc[i]  = HexToInt("0x66"); i = i + 1; acrc[i]  = HexToInt("0x56"); i = i + 1; acrc[i]  = HexToInt("0x46");
  i = i + 1; acrc[i]  = HexToInt("0xb7"); i = i + 1; acrc[i]  = HexToInt("0xa7"); i = i + 1; acrc[i]  = HexToInt("0x97"); i = i + 1; acrc[i]  = HexToInt("0x87"); i = i + 1; acrc[i]  = HexToInt("0xf7"); i = i + 1; acrc[i]  = HexToInt("0xe7"); i = i + 1; acrc[i]  = HexToInt("0xd7"); i = i + 1; acrc[i]  = HexToInt("0xc7");
  i = i + 1; acrc[i]  = HexToInt("0x48"); i = i + 1; acrc[i]  = HexToInt("0x58"); i = i + 1; acrc[i]  = HexToInt("0x68"); i = i + 1; acrc[i]  = HexToInt("0x78"); i = i + 1; acrc[i]  = HexToInt("0x08"); i = i + 1; acrc[i]  = HexToInt("0x18"); i = i + 1; acrc[i]  = HexToInt("0x28"); i = i + 1; acrc[i]  = HexToInt("0x38");
  i = i + 1; acrc[i]  = HexToInt("0xc9"); i = i + 1; acrc[i]  = HexToInt("0xd9"); i = i + 1; acrc[i]  = HexToInt("0xe9"); i = i + 1; acrc[i]  = HexToInt("0xf9"); i = i + 1; acrc[i]  = HexToInt("0x89"); i = i + 1; acrc[i]  = HexToInt("0x99"); i = i + 1; acrc[i]  = HexToInt("0xa9"); i = i + 1; acrc[i]  = HexToInt("0xb9");
  i = i + 1; acrc[i]  = HexToInt("0x5a"); i = i + 1; acrc[i]  = HexToInt("0x4a"); i = i + 1; acrc[i]  = HexToInt("0x7a"); i = i + 1; acrc[i]  = HexToInt("0x6a"); i = i + 1; acrc[i]  = HexToInt("0x1a"); i = i + 1; acrc[i]  = HexToInt("0x0a"); i = i + 1; acrc[i]  = HexToInt("0x3a"); i = i + 1; acrc[i]  = HexToInt("0x2a");
  i = i + 1; acrc[i]  = HexToInt("0xdb"); i = i + 1; acrc[i]  = HexToInt("0xcb"); i = i + 1; acrc[i]  = HexToInt("0xfb"); i = i + 1; acrc[i]  = HexToInt("0xeb"); i = i + 1; acrc[i]  = HexToInt("0x9b"); i = i + 1; acrc[i]  = HexToInt("0x8b"); i = i + 1; acrc[i]  = HexToInt("0xbb"); i = i + 1; acrc[i]  = HexToInt("0xab");
  i = i + 1; acrc[i]  = HexToInt("0x6c"); i = i + 1; acrc[i]  = HexToInt("0x7c"); i = i + 1; acrc[i]  = HexToInt("0x4c"); i = i + 1; acrc[i]  = HexToInt("0x5c"); i = i + 1; acrc[i]  = HexToInt("0x2c"); i = i + 1; acrc[i]  = HexToInt("0x3c"); i = i + 1; acrc[i]  = HexToInt("0x0c"); i = i + 1; acrc[i]  = HexToInt("0x1c");
  i = i + 1; acrc[i]  = HexToInt("0xed"); i = i + 1; acrc[i]  = HexToInt("0xfd"); i = i + 1; acrc[i]  = HexToInt("0xcd"); i = i + 1; acrc[i]  = HexToInt("0xdd"); i = i + 1; acrc[i]  = HexToInt("0xad"); i = i + 1; acrc[i]  = HexToInt("0xbd"); i = i + 1; acrc[i]  = HexToInt("0x8d"); i = i + 1; acrc[i]  = HexToInt("0x9d");
  i = i + 1; acrc[i]  = HexToInt("0x7e"); i = i + 1; acrc[i]  = HexToInt("0x6e"); i = i + 1; acrc[i]  = HexToInt("0x5e"); i = i + 1; acrc[i]  = HexToInt("0x4e"); i = i + 1; acrc[i]  = HexToInt("0x3e"); i = i + 1; acrc[i]  = HexToInt("0x2e"); i = i + 1; acrc[i]  = HexToInt("0x1e"); i = i + 1; acrc[i]  = HexToInt("0x0e");
  i = i + 1; acrc[i]  = HexToInt("0xff"); i = i + 1; acrc[i]  = HexToInt("0xef"); i = i + 1; acrc[i]  = HexToInt("0xdf"); i = i + 1; acrc[i]  = HexToInt("0xcf"); i = i + 1; acrc[i]  = HexToInt("0xbf"); i = i + 1; acrc[i]  = HexToInt("0xaf"); i = i + 1; acrc[i]  = HexToInt("0x9f"); i = i + 1; acrc[i]  = HexToInt("0x8f");
  i = i + 1; acrc[i]  = HexToInt("0x91"); i = i + 1; acrc[i]  = HexToInt("0x81"); i = i + 1; acrc[i]  = HexToInt("0xb1"); i = i + 1; acrc[i]  = HexToInt("0xa1"); i = i + 1; acrc[i]  = HexToInt("0xd1"); i = i + 1; acrc[i]  = HexToInt("0xc1"); i = i + 1; acrc[i]  = HexToInt("0xf1"); i = i + 1; acrc[i]  = HexToInt("0xe1");
  i = i + 1; acrc[i]  = HexToInt("0x10"); i = i + 1; acrc[i]  = HexToInt("0x00"); i = i + 1; acrc[i]  = HexToInt("0x30"); i = i + 1; acrc[i]  = HexToInt("0x20"); i = i + 1; acrc[i]  = HexToInt("0x50"); i = i + 1; acrc[i]  = HexToInt("0x40"); i = i + 1; acrc[i]  = HexToInt("0x70"); i = i + 1; acrc[i]  = HexToInt("0x60");
  i = i + 1; acrc[i]  = HexToInt("0x83"); i = i + 1; acrc[i]  = HexToInt("0x93"); i = i + 1; acrc[i]  = HexToInt("0xa3"); i = i + 1; acrc[i]  = HexToInt("0xb3"); i = i + 1; acrc[i]  = HexToInt("0xc3"); i = i + 1; acrc[i]  = HexToInt("0xd3"); i = i + 1; acrc[i]  = HexToInt("0xe3"); i = i + 1; acrc[i]  = HexToInt("0xf3");
  i = i + 1; acrc[i]  = HexToInt("0x02"); i = i + 1; acrc[i]  = HexToInt("0x12"); i = i + 1; acrc[i]  = HexToInt("0x22"); i = i + 1; acrc[i]  = HexToInt("0x32"); i = i + 1; acrc[i]  = HexToInt("0x42"); i = i + 1; acrc[i]  = HexToInt("0x52"); i = i + 1; acrc[i]  = HexToInt("0x62"); i = i + 1; acrc[i]  = HexToInt("0x72");
  i = i + 1; acrc[i]  = HexToInt("0xb5"); i = i + 1; acrc[i]  = HexToInt("0xa5"); i = i + 1; acrc[i]  = HexToInt("0x95"); i = i + 1; acrc[i]  = HexToInt("0x85"); i = i + 1; acrc[i]  = HexToInt("0xf5"); i = i + 1; acrc[i]  = HexToInt("0xe5"); i = i + 1; acrc[i]  = HexToInt("0xd5"); i = i + 1; acrc[i]  = HexToInt("0xc5");
  i = i + 1; acrc[i]  = HexToInt("0x34"); i = i + 1; acrc[i]  = HexToInt("0x24"); i = i + 1; acrc[i]  = HexToInt("0x14"); i = i + 1; acrc[i]  = HexToInt("0x04"); i = i + 1; acrc[i]  = HexToInt("0x74"); i = i + 1; acrc[i]  = HexToInt("0x64"); i = i + 1; acrc[i]  = HexToInt("0x54"); i = i + 1; acrc[i]  = HexToInt("0x44");
  i = i + 1; acrc[i]  = HexToInt("0xa7"); i = i + 1; acrc[i]  = HexToInt("0xb7"); i = i + 1; acrc[i]  = HexToInt("0x87"); i = i + 1; acrc[i]  = HexToInt("0x97"); i = i + 1; acrc[i]  = HexToInt("0xe7"); i = i + 1; acrc[i]  = HexToInt("0xf7"); i = i + 1; acrc[i]  = HexToInt("0xc7"); i = i + 1; acrc[i]  = HexToInt("0xd7");
  i = i + 1; acrc[i]  = HexToInt("0x26"); i = i + 1; acrc[i]  = HexToInt("0x36"); i = i + 1; acrc[i]  = HexToInt("0x06"); i = i + 1; acrc[i]  = HexToInt("0x16"); i = i + 1; acrc[i]  = HexToInt("0x66"); i = i + 1; acrc[i]  = HexToInt("0x76"); i = i + 1; acrc[i]  = HexToInt("0x46"); i = i + 1; acrc[i]  = HexToInt("0x56");
  i = i + 1; acrc[i]  = HexToInt("0xd9"); i = i + 1; acrc[i]  = HexToInt("0xc9"); i = i + 1; acrc[i]  = HexToInt("0xf9"); i = i + 1; acrc[i]  = HexToInt("0xe9"); i = i + 1; acrc[i]  = HexToInt("0x99"); i = i + 1; acrc[i]  = HexToInt("0x89"); i = i + 1; acrc[i]  = HexToInt("0xb9"); i = i + 1; acrc[i]  = HexToInt("0xa9");
  i = i + 1; acrc[i]  = HexToInt("0x58"); i = i + 1; acrc[i]  = HexToInt("0x48"); i = i + 1; acrc[i]  = HexToInt("0x78"); i = i + 1; acrc[i]  = HexToInt("0x68"); i = i + 1; acrc[i]  = HexToInt("0x18"); i = i + 1; acrc[i]  = HexToInt("0x08"); i = i + 1; acrc[i]  = HexToInt("0x38"); i = i + 1; acrc[i]  = HexToInt("0x28");
  i = i + 1; acrc[i]  = HexToInt("0xcb"); i = i + 1; acrc[i]  = HexToInt("0xdb"); i = i + 1; acrc[i]  = HexToInt("0xeb"); i = i + 1; acrc[i]  = HexToInt("0xfb"); i = i + 1; acrc[i]  = HexToInt("0x8b"); i = i + 1; acrc[i]  = HexToInt("0x9b"); i = i + 1; acrc[i]  = HexToInt("0xab"); i = i + 1; acrc[i]  = HexToInt("0xbb");
  i = i + 1; acrc[i]  = HexToInt("0x4a"); i = i + 1; acrc[i]  = HexToInt("0x5a"); i = i + 1; acrc[i]  = HexToInt("0x6a"); i = i + 1; acrc[i]  = HexToInt("0x7a"); i = i + 1; acrc[i]  = HexToInt("0x0a"); i = i + 1; acrc[i]  = HexToInt("0x1a"); i = i + 1; acrc[i]  = HexToInt("0x2a"); i = i + 1; acrc[i]  = HexToInt("0x3a");
  i = i + 1; acrc[i]  = HexToInt("0xfd"); i = i + 1; acrc[i]  = HexToInt("0xed"); i = i + 1; acrc[i]  = HexToInt("0xdd"); i = i + 1; acrc[i]  = HexToInt("0xcd"); i = i + 1; acrc[i]  = HexToInt("0xbd"); i = i + 1; acrc[i]  = HexToInt("0xad"); i = i + 1; acrc[i]  = HexToInt("0x9d"); i = i + 1; acrc[i]  = HexToInt("0x8d");
  i = i + 1; acrc[i]  = HexToInt("0x7c"); i = i + 1; acrc[i]  = HexToInt("0x6c"); i = i + 1; acrc[i]  = HexToInt("0x5c"); i = i + 1; acrc[i]  = HexToInt("0x4c"); i = i + 1; acrc[i]  = HexToInt("0x3c"); i = i + 1; acrc[i]  = HexToInt("0x2c"); i = i + 1; acrc[i]  = HexToInt("0x1c"); i = i + 1; acrc[i]  = HexToInt("0x0c");
  i = i + 1; acrc[i]  = HexToInt("0xef"); i = i + 1; acrc[i]  = HexToInt("0xff"); i = i + 1; acrc[i]  = HexToInt("0xcf"); i = i + 1; acrc[i]  = HexToInt("0xdf"); i = i + 1; acrc[i]  = HexToInt("0xaf"); i = i + 1; acrc[i]  = HexToInt("0xbf"); i = i + 1; acrc[i]  = HexToInt("0x8f"); i = i + 1; acrc[i]  = HexToInt("0x9f");
  i = i + 1; acrc[i]  = HexToInt("0x6e"); i = i + 1; acrc[i]  = HexToInt("0x7e"); i = i + 1; acrc[i]  = HexToInt("0x4e"); i = i + 1; acrc[i]  = HexToInt("0x5e"); i = i + 1; acrc[i]  = HexToInt("0x2e"); i = i + 1; acrc[i]  = HexToInt("0x3e"); i = i + 1; acrc[i]  = HexToInt("0x0e"); i = i + 1; acrc[i]  = HexToInt("0x1e");
  return;
end;

procedure PopulateCRCLTable(Array Integer acrc)
begin
  Integer i;

  i = 0;     acrc[i]  = HexToInt("0x00"); i = i + 1; acrc[i]  = HexToInt("0x21"); i = i + 1; acrc[i]  = HexToInt("0x42"); i = i + 1; acrc[i]  = HexToInt("0x63"); i = i + 1; acrc[i]  = HexToInt("0x84"); i = i + 1; acrc[i]  = HexToInt("0xa5"); i = i + 1; acrc[i]  = HexToInt("0xc6"); i = i + 1; acrc[i]  = HexToInt("0xe7");
  i = i + 1; acrc[i]  = HexToInt("0x08"); i = i + 1; acrc[i]  = HexToInt("0x29"); i = i + 1; acrc[i]  = HexToInt("0x4a"); i = i + 1; acrc[i]  = HexToInt("0x6b"); i = i + 1; acrc[i]  = HexToInt("0x8c"); i = i + 1; acrc[i]  = HexToInt("0xad"); i = i + 1; acrc[i]  = HexToInt("0xce"); i = i + 1; acrc[i]  = HexToInt("0xef");
  i = i + 1; acrc[i]  = HexToInt("0x31"); i = i + 1; acrc[i]  = HexToInt("0x10"); i = i + 1; acrc[i]  = HexToInt("0x73"); i = i + 1; acrc[i]  = HexToInt("0x52"); i = i + 1; acrc[i]  = HexToInt("0xb5"); i = i + 1; acrc[i]  = HexToInt("0x94"); i = i + 1; acrc[i]  = HexToInt("0xf7"); i = i + 1; acrc[i]  = HexToInt("0xd6");
  i = i + 1; acrc[i]  = HexToInt("0x39"); i = i + 1; acrc[i]  = HexToInt("0x18"); i = i + 1; acrc[i]  = HexToInt("0x7b"); i = i + 1; acrc[i]  = HexToInt("0x5a"); i = i + 1; acrc[i]  = HexToInt("0xbd"); i = i + 1; acrc[i]  = HexToInt("0x9c"); i = i + 1; acrc[i]  = HexToInt("0xff"); i = i + 1; acrc[i]  = HexToInt("0xde");
  i = i + 1; acrc[i]  = HexToInt("0x62"); i = i + 1; acrc[i]  = HexToInt("0x43"); i = i + 1; acrc[i]  = HexToInt("0x20"); i = i + 1; acrc[i]  = HexToInt("0x01"); i = i + 1; acrc[i]  = HexToInt("0xe6"); i = i + 1; acrc[i]  = HexToInt("0xc7"); i = i + 1; acrc[i]  = HexToInt("0xa4"); i = i + 1; acrc[i]  = HexToInt("0x85");
  i = i + 1; acrc[i]  = HexToInt("0x6a"); i = i + 1; acrc[i]  = HexToInt("0x4b"); i = i + 1; acrc[i]  = HexToInt("0x28"); i = i + 1; acrc[i]  = HexToInt("0x09"); i = i + 1; acrc[i]  = HexToInt("0xee"); i = i + 1; acrc[i]  = HexToInt("0xcf"); i = i + 1; acrc[i]  = HexToInt("0xac"); i = i + 1; acrc[i]  = HexToInt("0x8d");
  i = i + 1; acrc[i]  = HexToInt("0x53"); i = i + 1; acrc[i]  = HexToInt("0x72"); i = i + 1; acrc[i]  = HexToInt("0x11"); i = i + 1; acrc[i]  = HexToInt("0x30"); i = i + 1; acrc[i]  = HexToInt("0xd7"); i = i + 1; acrc[i]  = HexToInt("0xf6"); i = i + 1; acrc[i]  = HexToInt("0x95"); i = i + 1; acrc[i]  = HexToInt("0xb4");
  i = i + 1; acrc[i]  = HexToInt("0x5b"); i = i + 1; acrc[i]  = HexToInt("0x7a"); i = i + 1; acrc[i]  = HexToInt("0x19"); i = i + 1; acrc[i]  = HexToInt("0x38"); i = i + 1; acrc[i]  = HexToInt("0xdf"); i = i + 1; acrc[i]  = HexToInt("0xfe"); i = i + 1; acrc[i]  = HexToInt("0x9d"); i = i + 1; acrc[i]  = HexToInt("0xbc");
  i = i + 1; acrc[i]  = HexToInt("0xc4"); i = i + 1; acrc[i]  = HexToInt("0xe5"); i = i + 1; acrc[i]  = HexToInt("0x86"); i = i + 1; acrc[i]  = HexToInt("0xa7"); i = i + 1; acrc[i]  = HexToInt("0x40"); i = i + 1; acrc[i]  = HexToInt("0x61"); i = i + 1; acrc[i]  = HexToInt("0x02"); i = i + 1; acrc[i]  = HexToInt("0x23");
  i = i + 1; acrc[i]  = HexToInt("0xcc"); i = i + 1; acrc[i]  = HexToInt("0xed"); i = i + 1; acrc[i]  = HexToInt("0x8e"); i = i + 1; acrc[i]  = HexToInt("0xaf"); i = i + 1; acrc[i]  = HexToInt("0x48"); i = i + 1; acrc[i]  = HexToInt("0x69"); i = i + 1; acrc[i]  = HexToInt("0x0a"); i = i + 1; acrc[i]  = HexToInt("0x2b");
  i = i + 1; acrc[i]  = HexToInt("0xf5"); i = i + 1; acrc[i]  = HexToInt("0xd4"); i = i + 1; acrc[i]  = HexToInt("0xb7"); i = i + 1; acrc[i]  = HexToInt("0x96"); i = i + 1; acrc[i]  = HexToInt("0x71"); i = i + 1; acrc[i]  = HexToInt("0x50"); i = i + 1; acrc[i]  = HexToInt("0x33"); i = i + 1; acrc[i]  = HexToInt("0x12");
  i = i + 1; acrc[i]  = HexToInt("0xfd"); i = i + 1; acrc[i]  = HexToInt("0xdc"); i = i + 1; acrc[i]  = HexToInt("0xbf"); i = i + 1; acrc[i]  = HexToInt("0x9e"); i = i + 1; acrc[i]  = HexToInt("0x79"); i = i + 1; acrc[i]  = HexToInt("0x58"); i = i + 1; acrc[i]  = HexToInt("0x3b"); i = i + 1; acrc[i]  = HexToInt("0x1a");
  i = i + 1; acrc[i]  = HexToInt("0xa6"); i = i + 1; acrc[i]  = HexToInt("0x87"); i = i + 1; acrc[i]  = HexToInt("0xe4"); i = i + 1; acrc[i]  = HexToInt("0xc5"); i = i + 1; acrc[i]  = HexToInt("0x22"); i = i + 1; acrc[i]  = HexToInt("0x03"); i = i + 1; acrc[i]  = HexToInt("0x60"); i = i + 1; acrc[i]  = HexToInt("0x41");
  i = i + 1; acrc[i]  = HexToInt("0xae"); i = i + 1; acrc[i]  = HexToInt("0x8f"); i = i + 1; acrc[i]  = HexToInt("0xec"); i = i + 1; acrc[i]  = HexToInt("0xcd"); i = i + 1; acrc[i]  = HexToInt("0x2a"); i = i + 1; acrc[i]  = HexToInt("0x0b"); i = i + 1; acrc[i]  = HexToInt("0x68"); i = i + 1; acrc[i]  = HexToInt("0x49");
  i = i + 1; acrc[i]  = HexToInt("0x97"); i = i + 1; acrc[i]  = HexToInt("0xb6"); i = i + 1; acrc[i]  = HexToInt("0xd5"); i = i + 1; acrc[i]  = HexToInt("0xf4"); i = i + 1; acrc[i]  = HexToInt("0x13"); i = i + 1; acrc[i]  = HexToInt("0x32"); i = i + 1; acrc[i]  = HexToInt("0x51"); i = i + 1; acrc[i]  = HexToInt("0x70");
  i = i + 1; acrc[i]  = HexToInt("0x9f"); i = i + 1; acrc[i]  = HexToInt("0xbe"); i = i + 1; acrc[i]  = HexToInt("0xdd"); i = i + 1; acrc[i]  = HexToInt("0xfc"); i = i + 1; acrc[i]  = HexToInt("0x1b"); i = i + 1; acrc[i]  = HexToInt("0x3a"); i = i + 1; acrc[i]  = HexToInt("0x59"); i = i + 1; acrc[i]  = HexToInt("0x78");
  i = i + 1; acrc[i]  = HexToInt("0x88"); i = i + 1; acrc[i]  = HexToInt("0xa9"); i = i + 1; acrc[i]  = HexToInt("0xca"); i = i + 1; acrc[i]  = HexToInt("0xeb"); i = i + 1; acrc[i]  = HexToInt("0x0c"); i = i + 1; acrc[i]  = HexToInt("0x2d"); i = i + 1; acrc[i]  = HexToInt("0x4e"); i = i + 1; acrc[i]  = HexToInt("0x6f");
  i = i + 1; acrc[i]  = HexToInt("0x80"); i = i + 1; acrc[i]  = HexToInt("0xa1"); i = i + 1; acrc[i]  = HexToInt("0xc2"); i = i + 1; acrc[i]  = HexToInt("0xe3"); i = i + 1; acrc[i]  = HexToInt("0x04"); i = i + 1; acrc[i]  = HexToInt("0x25"); i = i + 1; acrc[i]  = HexToInt("0x46"); i = i + 1; acrc[i]  = HexToInt("0x67");
  i = i + 1; acrc[i]  = HexToInt("0xb9"); i = i + 1; acrc[i]  = HexToInt("0x98"); i = i + 1; acrc[i]  = HexToInt("0xfb"); i = i + 1; acrc[i]  = HexToInt("0xda"); i = i + 1; acrc[i]  = HexToInt("0x3d"); i = i + 1; acrc[i]  = HexToInt("0x1c"); i = i + 1; acrc[i]  = HexToInt("0x7f"); i = i + 1; acrc[i]  = HexToInt("0x5e");
  i = i + 1; acrc[i]  = HexToInt("0xb1"); i = i + 1; acrc[i]  = HexToInt("0x90"); i = i + 1; acrc[i]  = HexToInt("0xf3"); i = i + 1; acrc[i]  = HexToInt("0xd2"); i = i + 1; acrc[i]  = HexToInt("0x35"); i = i + 1; acrc[i]  = HexToInt("0x14"); i = i + 1; acrc[i]  = HexToInt("0x77"); i = i + 1; acrc[i]  = HexToInt("0x56");
  i = i + 1; acrc[i]  = HexToInt("0xea"); i = i + 1; acrc[i]  = HexToInt("0xcb"); i = i + 1; acrc[i]  = HexToInt("0xa8"); i = i + 1; acrc[i]  = HexToInt("0x89"); i = i + 1; acrc[i]  = HexToInt("0x6e"); i = i + 1; acrc[i]  = HexToInt("0x4f"); i = i + 1; acrc[i]  = HexToInt("0x2c"); i = i + 1; acrc[i]  = HexToInt("0x0d");
  i = i + 1; acrc[i]  = HexToInt("0xe2"); i = i + 1; acrc[i]  = HexToInt("0xc3"); i = i + 1; acrc[i]  = HexToInt("0xa0"); i = i + 1; acrc[i]  = HexToInt("0x81"); i = i + 1; acrc[i]  = HexToInt("0x66"); i = i + 1; acrc[i]  = HexToInt("0x47"); i = i + 1; acrc[i]  = HexToInt("0x24"); i = i + 1; acrc[i]  = HexToInt("0x05");
  i = i + 1; acrc[i]  = HexToInt("0xdb"); i = i + 1; acrc[i]  = HexToInt("0xfa"); i = i + 1; acrc[i]  = HexToInt("0x99"); i = i + 1; acrc[i]  = HexToInt("0xb8"); i = i + 1; acrc[i]  = HexToInt("0x5f"); i = i + 1; acrc[i]  = HexToInt("0x7e"); i = i + 1; acrc[i]  = HexToInt("0x1d"); i = i + 1; acrc[i]  = HexToInt("0x3c");
  i = i + 1; acrc[i]  = HexToInt("0xd3"); i = i + 1; acrc[i]  = HexToInt("0xf2"); i = i + 1; acrc[i]  = HexToInt("0x91"); i = i + 1; acrc[i]  = HexToInt("0xb0"); i = i + 1; acrc[i]  = HexToInt("0x57"); i = i + 1; acrc[i]  = HexToInt("0x76"); i = i + 1; acrc[i]  = HexToInt("0x15"); i = i + 1; acrc[i]  = HexToInt("0x34");
  i = i + 1; acrc[i]  = HexToInt("0x4c"); i = i + 1; acrc[i]  = HexToInt("0x6d"); i = i + 1; acrc[i]  = HexToInt("0x0e"); i = i + 1; acrc[i]  = HexToInt("0x2f"); i = i + 1; acrc[i]  = HexToInt("0xc8"); i = i + 1; acrc[i]  = HexToInt("0xe9"); i = i + 1; acrc[i]  = HexToInt("0x8a"); i = i + 1; acrc[i]  = HexToInt("0xab");
  i = i + 1; acrc[i]  = HexToInt("0x44"); i = i + 1; acrc[i]  = HexToInt("0x65"); i = i + 1; acrc[i]  = HexToInt("0x06"); i = i + 1; acrc[i]  = HexToInt("0x27"); i = i + 1; acrc[i]  = HexToInt("0xc0"); i = i + 1; acrc[i]  = HexToInt("0xe1"); i = i + 1; acrc[i]  = HexToInt("0x82"); i = i + 1; acrc[i]  = HexToInt("0xa3");
  i = i + 1; acrc[i]  = HexToInt("0x7d"); i = i + 1; acrc[i]  = HexToInt("0x5c"); i = i + 1; acrc[i]  = HexToInt("0x3f"); i = i + 1; acrc[i]  = HexToInt("0x1e"); i = i + 1; acrc[i]  = HexToInt("0xf9"); i = i + 1; acrc[i]  = HexToInt("0xd8"); i = i + 1; acrc[i]  = HexToInt("0xbb"); i = i + 1; acrc[i]  = HexToInt("0x9a");
  i = i + 1; acrc[i]  = HexToInt("0x75"); i = i + 1; acrc[i]  = HexToInt("0x54"); i = i + 1; acrc[i]  = HexToInt("0x37"); i = i + 1; acrc[i]  = HexToInt("0x16"); i = i + 1; acrc[i]  = HexToInt("0xf1"); i = i + 1; acrc[i]  = HexToInt("0xd0"); i = i + 1; acrc[i]  = HexToInt("0xb3"); i = i + 1; acrc[i]  = HexToInt("0x92");
  i = i + 1; acrc[i]  = HexToInt("0x2e"); i = i + 1; acrc[i]  = HexToInt("0x0f"); i = i + 1; acrc[i]  = HexToInt("0x6c"); i = i + 1; acrc[i]  = HexToInt("0x4d"); i = i + 1; acrc[i]  = HexToInt("0xaa"); i = i + 1; acrc[i]  = HexToInt("0x8b"); i = i + 1; acrc[i]  = HexToInt("0xe8"); i = i + 1; acrc[i]  = HexToInt("0xc9");
  i = i + 1; acrc[i]  = HexToInt("0x26"); i = i + 1; acrc[i]  = HexToInt("0x07"); i = i + 1; acrc[i]  = HexToInt("0x64"); i = i + 1; acrc[i]  = HexToInt("0x45"); i = i + 1; acrc[i]  = HexToInt("0xa2"); i = i + 1; acrc[i]  = HexToInt("0x83"); i = i + 1; acrc[i]  = HexToInt("0xe0"); i = i + 1; acrc[i]  = HexToInt("0xc1");
  i = i + 1; acrc[i]  = HexToInt("0x1f"); i = i + 1; acrc[i]  = HexToInt("0x3e"); i = i + 1; acrc[i]  = HexToInt("0x5d"); i = i + 1; acrc[i]  = HexToInt("0x7c"); i = i + 1; acrc[i]  = HexToInt("0x9b"); i = i + 1; acrc[i]  = HexToInt("0xba"); i = i + 1; acrc[i]  = HexToInt("0xd9"); i = i + 1; acrc[i]  = HexToInt("0xf8");
  i = i + 1; acrc[i]  = HexToInt("0x17"); i = i + 1; acrc[i]  = HexToInt("0x36"); i = i + 1; acrc[i]  = HexToInt("0x55"); i = i + 1; acrc[i]  = HexToInt("0x74"); i = i + 1; acrc[i]  = HexToInt("0x93"); i = i + 1; acrc[i]  = HexToInt("0xb2"); i = i + 1; acrc[i]  = HexToInt("0xd1"); i = i + 1; acrc[i]  = HexToInt("0xf0");
  return;
end;

function string 255 TCPIPCalculateControlSum(string codepage,string CtrlSeq)
begin
  string 255 res,c;
  Integer i,l,a,a1;
  Integer hi,lo;
  Integer index;
  LongInt bcrc;
  Array Integer ahcrc;
  Array Integer alcrc;
 
  bcrc = 0; hi = 0; lo = 0;
  PopulateCRCHTable(ahcrc);
  PopulateCRCLTable(alcrc);

  l = len(CtrlSeq);

  for (i=0;i<l;i=i+1) begin
    c = ConvertStringToCodePage(codepage,Mid(CtrlSeq,i,1));
//    a = asc(c);//asc gets utf8
    a = GetByteFromString(c,0);

    index = BitXor(hi,a);

    hi = BitXor(lo,ahcrc[index]);
    lo = alcrc[index];

  end;
  bcrc = hi*power(2,8);  // val = bcrc << 8 ;
  bcrc = BitOr(bcrc,lo);
//mttty, program serwisowy zps

  res = NumToHex(bcrc);
  TCPIPCalculateControlSum = res;
  return;
end;

procedure GetVATRates_POSNETProtocol(string replystr,var Array val FPVATRates)
begin
  LongInt pos;
  string 255 tstr;

  pos = 0;
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  FPVATRates[0] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  FPVATRates[1] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  FPVATRates[2] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  FPVATRates[3] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  FPVATRates[4] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  FPVATRates[5] = ValFromString(Right(tstr,len(tstr)-2),",","");
  GetNextSubstring(replystr,pos,chr(POSNETTCP_FS),tstr)
  FPVATRates[6] = ValFromString(Right(tstr,len(tstr)-2),",","");
  return;
end;


procedure GetPOSNETDate(string areplystr,var Integer year,var Integer month,var Integer day)
begin
  Integer res,i,l,what;
  string 1 nc;
  string 255 tstrY,tstrM,tstrD;
  string 255 replystr;
  Boolean getdatef;
  Date td;
  LongInt pos;
  
  pos = 0;
  GetNextSubstring(areplystr,pos,chr(POSNETTCP_FS),replystr)
  GetNextSubstring(areplystr,pos,chr(POSNETTCP_FS),replystr)
  replystr = Mid(replystr,2,10);
  td = DateFromString(replystr,"YYYY-MM-DD");
  year = td.year;
  month = td.month;
  day = td.day;
  return;
end;



function Integer ParseTCPIPCheckClockReply(string replystr,var string errstr)
begin
  Integer res;
  Integer pY,pM,pD;
  Date td;

  td = CurrentDate;
  GetPOSNETDate(replystr,pY,pM,pD);
  if ((GetYear(td)==pY) and (GetMonth(td)==pM) and (GetDay(td)==pD)) then begin
    res = POSNETTCP_NOERR;
  end else begin
    res = 12402;
    errstr = USetStr(12403) & pY & pM & pD & " " & USetStr(12404) & GetYear(td) & GetMonth(td) & GetDay(td);
  end;
  ParseTCPIPCheckClockReply = res;
  return;
end;

function Integer ParseTCPIPLoadVATRatesReply(string replystr)
begin
  Integer res;
  Array val prates;
  transaction string 255 gPOSNETVATRates;

  gPOSNETVATRates = replystr;
  GetVATRates_POSNETProtocol(replystr,prates);
  if (blank(replystr)) then begin
    res = 12405;
  end;
//Trace("","ParseTCPIPLoadVATRatesReply replystr " & replystr);

  ParseTCPIPLoadVATRatesReply = res;
  return;
end;


function Integer ParsePOSNETReplyFromTCPIP(string host,LongInt port,string codepage,Area reply)
begin
  Integer res,err;
  string 255 replystr,errstr,response;
  LongInt pos;
  
//  LogAreaToFile("_ReceivePosnetReply.txt",reply);
  
  replystr = GetLineFromArea(reply,0);

  pos = 0;
  GetNextSubstring(replystr,pos,chr(POSNETTCP_STX),response);
  GetNextSubstring(replystr,pos,chr(9),response);

  LogText(0,"ReceivePosnetReply response " & response & " replystr=" & replystr);

  switch (response) begin
    case "rtcget":
      err = ParseTCPIPCheckClockReply(replystr,errstr);
    case "ERR":
      GetNextSubstring(replystr,pos,chr(9),response);
      err = StringToInt(Right(response,len(response)-1));

      TCPIPCancel_POSNETProtocol(host,port,codepage);
//  LogText(0,"ERR ReceivePosnetReply response " & response & " Right(response,len(response)-1)=" & Right(response,len(response)-1) & " err " & err);

   end;
  if (err!=POSNETTCP_NOERR) then begin
    MessageBox(err,errstr);
  end;
  ParsePOSNETReplyFromTCPIP = res;
  return;
end;

function Integer POSNETWriteToTCPIP(string host,LongInt port,string codepage,string apartCtrlSeq)
begin
  Integer res;
  string 255 CtrlSeq,partCtrlSeq;
  Area a,reply;
  

  partCtrlSeq = ConvertStringToCodePage(codepage,apartCtrlSeq);

  CtrlSeq = chr(POSNETTCP_STX) & partCtrlSeq & "#" & TCPIPCalculateControlSum(codepage,apartCtrlSeq) & chr(POSNETTCP_ETX);
  
  SetAreaZeroSize(a);
  AddStringToArea(CtrlSeq,a);
//  SendToPosnet(host,port,POSNETTCPPROTOCOL_DELAY,a);

//  LogAreaToFile("_POSNETWriteToTCPIP" & ".txt",a);

  SendTCPRequest(host,port,-1,false,"","","","",false,a,reply,POSNETTCPPROTOCOL_DELAY,0);

//  LogAreaToFile("_POSNETWriteToTCPIPReply" & ".txt",reply);
  res = ParsePOSNETReplyFromTCPIP(host,port,codepage,reply);

  POSNETWriteToTCPIP = res;
  return;
end;

function Integer POSNETWriteToTCPIPWithReply(string host,LongInt port,string codepage,string apartCtrlSeq,var string replystr)
begin
  Integer res;
  string 255 CtrlSeq,partCtrlSeq;
  Area a,reply;
  

  partCtrlSeq = ConvertStringToCodePage(codepage,apartCtrlSeq);

  CtrlSeq = chr(POSNETTCP_STX) & partCtrlSeq & "#" & TCPIPCalculateControlSum(codepage,apartCtrlSeq) & chr(POSNETTCP_ETX);
  
  SetAreaZeroSize(a);
  AddStringToArea(CtrlSeq,a);
//  SendToPosnet(host,port,POSNETTCPPROTOCOL_DELAY,a);

//  LogAreaToFile("_POSNETWriteToTCPIP.txt",a);

  SendTCPRequest(host,port,-1,false,"","","","",false,a,reply,POSNETTCPPROTOCOL_DELAY,0);

//  LogAreaToFile("_POSNETWriteToTCPIPReply.txt",reply);

  replystr = GetLineFromArea(reply,0);

  POSNETWriteToTCPIPWithReply = res;
  return;
end;

function Integer TCPIPCancel_POSNETProtocol(string host,LongInt port,string codepage)
begin  
  string 255 CtrlSeq;
  
  CtrlSeq = "trcancel" & chr(POSNETTCP_FS);
  TCPIPCancel_POSNETProtocol = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  return;
end;

function Integer TCPIPCheckClock_POSNETProtocol(string host,LongInt port,string codepage)
begin  
  string 255 CtrlSeq;
  
  CtrlSeq = "rtcget" & chr(POSNETTCP_FS);
  TCPIPCheckClock_POSNETProtocol = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  return;
end;

function Integer TCPIPLoadVATRates_POSNETProtocol(string host,LongInt port,string codepage,var Array val prates)
begin  
  Integer res;
  string 255 CtrlSeq,replystr;
  
  CtrlSeq = "vatget" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIPWithReply(host,port,codepage,CtrlSeq,replystr);
  if (res==POSNETTCP_NOERR) then begin
    GetVATRates_POSNETProtocol(replystr,prates);
    if (blank(replystr)) then begin
      res = 12405;
    end;
  end;
  TCPIPLoadVATRates_POSNETProtocol = res;
  return;
end;

function Integer TCPIPTransBegin_POSNETProtocol(string host,LongInt port,string codepage)
begin  
  Integer res;
  string 255 CtrlSeq;

  CtrlSeq = "login" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "na" & CurrentUser & chr(POSNETTCP_FS);
  if (nonblank(CurMachineName)) then begin
    CtrlSeq = CtrlSeq & "nk" & CurMachineName & chr(POSNETTCP_FS);
  end;
  CtrlSeq = CtrlSeq & "dr" & "0" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPTransBegin_POSNETProtocol;
  end;

  CtrlSeq = "trinit" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "bm0" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
LTCPIPTransBegin_POSNETProtocol:;  
  TCPIPTransBegin_POSNETProtocol = res;
  return;
end;

function val DownPaymentAmount(record IVVc IVr,Integer ordrow)
begin
  val res;
  row IVVc IVrw;
  Integer i,rwcnt;

  if (ordrow>=0) then begin
    rwcnt =  MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==5) then begin
        if (IVrw.OrdRow==ordrow) then begin
          res = res + IVrw.Sum;
        end;
      end;
    end;
  end;
  DownPaymentAmount = res;
  return;
end;

function Integer TCPIPPrintIVLines_POSNETProtocol(string host,LongInt port,string codepage,record IVVc IVr,Array val prates,Integer FiscalPrinter)
begin  
  Integer res,noErr,res2;
  record SysFormatBlock SFb;
  record CashPrintBlock CPb;
  record VATCodeBlock VATb;
  record INVc INr;
  Integer i,j,linenr,rwcnt,slen;
  row IVVc IVrw;
  string 255 tstr,spec,tspec,CtrlSeq;
  string 20 qtystr, pricestr;
  Boolean onelinef;
  string 3 DCS,ST,LBTRSLN;
  string 1 CR;
  string 20 cancelstr;
  string 10 FPVATCode;
  string 255 replystr;
  val downpaysum,qty;

  BlockLoad(SFb);
  BlockLoad(CPb);
  BlockLoad(VATb);
  rwcnt =  MatRowCnt(IVr);
  linenr = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (blank(IVrw.ArtCode)) then begin goto LTCPIPSKIPROW; end;
    qty = IVrw.Quant;
    downpaysum = blankval;
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LTCPIPkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LTCPIPkInvoiceRowTypeNormal:;
        downpaysum = DownPaymentAmount(IVr,IVrw.OrdRow);
        if (downpaysum!=0) then begin        
          IVrw.Sum = IVrw.Sum + downpaysum;
          IVrw.Price = (IVrw.Sum/(100-IVrw.vRebate))*100;
          IVrw.Price = Round(IVrw.Price/IVrw.Quant,SetRoundModeD(2)); 
        end else begin
          if (IVrw.PriceFactor!=0) then begin
            qty = qty/IVrw.PriceFactor;
          end;
        end;
      case kInvoiceRowTypeCorrection: ;
        if (IVrw.PriceFactor!=0) then begin
          qty = qty/IVrw.PriceFactor;
        end;
      case kInvoiceRowTypeDownpayment: 
        if (IVrw.Sum<0) then begin goto LTCPIPSKIPROW; end;
        if (blank(IVrw.Price)) then begin
          IVrw.Price = IVrw.Sum/IVrw.Quant;
        end;
        downpaysum = IVrw.Sum;
      otherwise 
        goto LTCPIPSKIPROW;
    end;
    onelinef = false;
    linenr = linenr + 1;
    spec = "";
    if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin    
      spec = INr.AlternativeCode;
    end;
    if (blank(spec)) then begin
      spec = IVrw.Spec;
    end;
        
    CtrlSeq = "trline" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & IVrw.ArtCode & chr(POSNETTCP_FS);
    GetPOSNETVATCode(prates,FiscalPrinter,VATb,IVrw.VATCode,FPVATCode);
    CtrlSeq = CtrlSeq & "vt" & FPVATCode & chr(POSNETTCP_FS);
    tstr = ValToString(IVrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "pr" & tstr & chr(POSNETTCP_FS);
//    CtrlSeq = CtrlSeq & "st" & "false" & chr(POSNETTCP_FS);//storno
    tstr = ValToString(IVrw.Quant*IVrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    tstr = ValToString(IVrw.Quant,M4Qty,"",",",0);
    CtrlSeq = CtrlSeq & "il" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "op" & Left(spec,35) & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "jm" & IVrw.UnitCode & chr(POSNETTCP_FS);
    if (IVrw.vRebate!=0) then begin
      CtrlSeq = CtrlSeq & "rd" & "1" & chr(POSNETTCP_FS);
      if (downpaysum==0) then begin
        tstr = ValToString(IVrw.vRebate*100,M40Val,"",",",1);
        CtrlSeq = CtrlSeq & "rp" & tstr & chr(POSNETTCP_FS);
      end else begin
        tstr = ValToString((IVrw.Quant*IVrw.Price - IVrw.Sum)*100,M40Val,"",",",1);
        CtrlSeq = CtrlSeq & "rw" & tstr & chr(POSNETTCP_FS);
      end;
    end;    
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVLines_POSNETProtocol;
    end;
LTCPIPSKIPROW:;    
  end;
LTCPIPPrintIVLines_POSNETProtocol:;  
  TCPIPPrintIVLines_POSNETProtocol = res;
  return;
end;

function Integer TCPIPPrintIVPaymentModesSums_POSNETProtocol(string host,LongInt port,string codepage,record IVVc IVr)
begin  
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  vector val vpaymodesums;

  IVCalculatePaymentModeSums(IVr,vpaymodesums);

  if (vpaymodesums[kInvoiceRowTypeCashPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNETTCP_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCashPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVPaymentModesSums_POSNETProtocol;
    end;
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "2" & chr(POSNETTCP_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCreditCardPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVPaymentModesSums_POSNETProtocol;
    end;
  end;
  if (vpaymodesums[100]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "8" & chr(POSNETTCP_FS);
    tstr = ValToString(vpaymodesums[100]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVPaymentModesSums_POSNETProtocol;
    end;
  end;
  if (IVr.RetnValue>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNETTCP_FS);
    tstr = ValToString(IVr.RetnValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVPaymentModesSums_POSNETProtocol;
    end;
  end;
LTCPIPPrintIVPaymentModesSums_POSNETProtocol:;  
  TCPIPPrintIVPaymentModesSums_POSNETProtocol = res;
  return;
end;

function Integer TCPIPIVAcceptTrans_POSNETProtocol(string host,LongInt port,string codepage,record IVVc IVr)
begin  
  string 255 CtrlSeq,tstr;
  vector val vpaymodesums;
  
  IVCalculatePaymentModeSums(IVr,vpaymodesums);

  CtrlSeq = "trend" & chr(POSNETTCP_FS);
  tstr = ValToString(IVr.Sum4*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "to" & tstr & chr(POSNETTCP_FS);
  tstr = ValToString((vpaymodesums[kInvoiceRowTypeCashPayment]+vpaymodesums[kInvoiceRowTypeCreditCardPayment])*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "fp" & tstr & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fe" & "0" & chr(POSNETTCP_FS);
  if (IVr.RetnValue>0) then begin
    tstr = ValToString(IVr.RetnValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNETTCP_FS);
  end;
  TCPIPIVAcceptTrans_POSNETProtocol = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  return;
end;

function Integer TCPIPPrintIVAdditionLines_POSNETProtocol(string host,LongInt port,string codepage,record IVVc IVr)
begin  
  Integer res;
  string 255 CtrlSeq
  
  CtrlSeq = "trftrln" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "id" & "0" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "na" & IVr.SerNr & chr(POSNETTCP_FS);

  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPPrintIVAdditionLines_POSNETProtocol;
  end;

  if (IVr.Points!=0) then begin
    CtrlSeq = "trftrln" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "id" & "1" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & IVr.Points & chr(POSNETTCP_FS);

    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVAdditionLines_POSNETProtocol;
    end;
  end;
LTCPIPPrintIVAdditionLines_POSNETProtocol:;  
  TCPIPPrintIVAdditionLines_POSNETProtocol = res;
  return;
end;

function Integer TCPIPPrintIVCashLines_POSNETProtocol(string host,LongInt port,string codepage,record IVCashVc IVCashr,Array val prates,Integer FiscalPrinter)
begin
  Integer res,noErr,res2;
  record SysFormatBlock SFb;
  record CashPrintBlock CPb;
  record VATCodeBlock VATb;
  record INVc INr;
  Integer i,j,linenr,rwcnt,slen;
  row IVCashVc IVCashrw;
  string 255 tstr,spec,tspec,CtrlSeq;
  string 20 qtystr, pricestr;
  Boolean onelinef;
  string 3 DCS,ST,LBTRSLN;
  string 1 CR;
  string 20 cancelstr;
  string 10 FPVATCode;
  string 255 replystr;
  val qty,v;
  
  BlockLoad(SFb);
  BlockLoad(CPb);
  BlockLoad(VATb);
  rwcnt =  MatRowCnt(IVCashr);
  linenr = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (blank(IVCashrw.ArtCode)) then begin
      goto LTCPIPSKIPIVCashROW;
    end;
    qty = IVCashrw.Quant;
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LTCPIPkIVCashRowTypeNormal;
      case kInvoiceRowTypeNormal:
LTCPIPkIVCashRowTypeNormal:;
        if (IVCashrw.PriceFactor!=0) then begin
          qty = qty/IVCashrw.PriceFactor;
        end;
      otherwise 
        if (IVCashrw.PriceFactor!=0) then begin
          qty = qty/IVCashrw.PriceFactor;
        end;
        goto LTCPIPSKIPIVCashROW;
    end;
    onelinef = false;
    linenr = linenr + 1;
    spec = "";
    if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin    
      spec = INr.AlternativeCode;
    end;
    if (blank(spec)) then begin
      spec = IVCashrw.Spec;
    end;
    
    CtrlSeq = "trline" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & IVCashrw.ArtCode & chr(POSNETTCP_FS);
    GetPOSNETVATCode(prates,FiscalPrinter,VATb,IVCashrw.VATCode,FPVATCode);
    CtrlSeq = CtrlSeq & "vt" & FPVATCode & chr(POSNETTCP_FS);
    tstr = ValToString(IVCashrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "pr" & tstr & chr(POSNETTCP_FS);
//    CtrlSeq = CtrlSeq & "st" & "false" & chr(POSNETTCP_FS);//storno
    tstr = ValToString(IVCashrw.Quant*IVCashrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    tstr = ValToString(IVCashrw.Quant,M4Qty,"",",",0);
    CtrlSeq = CtrlSeq & "il" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "op" & Left(spec,35) & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "jm" & IVCashrw.UnitCode & chr(POSNETTCP_FS);
    if (nonblank(IVCashrw.vRebate)) then begin
      v = CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum);

      CtrlSeq = CtrlSeq & "rd" & "1" & chr(POSNETTCP_FS);
      tstr = ValToString(v*100,M40Val,"",",",1);
      CtrlSeq = CtrlSeq & "rp" & tstr & chr(POSNETTCP_FS);
    end;
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVCashLines_POSNETProtocol;
    end;
LTCPIPSKIPIVCashROW:;    
  end;
LTCPIPPrintIVCashLines_POSNETProtocol:;  
  TCPIPPrintIVCashLines_POSNETProtocol = res;
  return;  
end;

function Integer TCPIPPrintIVCashPaymentModesSums_POSNETProtocol(string host,LongInt port,string codepage,record IVCashVc IVCashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  vector val vpaymodesums;
  
  IVCalculatePaymentModeSums(IVCashr,vpaymodesums);
  if (vpaymodesums[kInvoiceRowTypeCashPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNETTCP_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCashPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVCashPaymentModesSums_POSNETProtocol;
    end;
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "2" & chr(POSNETTCP_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCreditCardPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVCashPaymentModesSums_POSNETProtocol;
    end;
  end;
  if (IVCashr.RetValue>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNETTCP_FS);
    tstr = ValToString(IVCashr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVCashPaymentModesSums_POSNETProtocol;
    end;
  end;
LTCPIPPrintIVCashPaymentModesSums_POSNETProtocol:;
  TCPIPPrintIVCashPaymentModesSums_POSNETProtocol = res;
  return;
end;

function Integer TCPIPIVCashAcceptTrans_POSNETProtocol(string host,LongInt port,string codepage,record IVCashVc IVCashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr;
  vector val vpaymodesums;
  
  IVCalculatePaymentModeSums(IVCashr,vpaymodesums);
  CtrlSeq = "trend" & chr(POSNETTCP_FS);
  tstr = ValToString(IVCashr.Sum4*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "to" & tstr & chr(POSNETTCP_FS);
  tstr = ValToString((vpaymodesums[kInvoiceRowTypeCashPayment]+vpaymodesums[kInvoiceRowTypeCreditCardPayment])*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "fp" & tstr & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fe" & "0" & chr(POSNETTCP_FS);
  if (IVCashr.RetValue>0) then begin
    tstr = ValToString(IVCashr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNETTCP_FS);
  end;
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPPrintIVCashPaymentModesSums_POSNETProtocol;
  end;
LTCPIPPrintIVCashPaymentModesSums_POSNETProtocol:;
  TCPIPIVCashAcceptTrans_POSNETProtocol = res;
  return;
end;

function Integer TCPIPPrintIVCashAdditionLines_POSNETProtocol(string host,LongInt port,string codepage,record IVCashVc IVCashr)
begin
  Integer res;
  string 255 CtrlSeq;
  
  CtrlSeq = "trftrln" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "id" & "0" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "na" & IVCashr.SerNr & chr(POSNETTCP_FS);

  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPPrintIVCashAdditionLines_POSNETProtocol;
  end;

  if (IVCashr.Points!=0) then begin
    CtrlSeq = "trftrln" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "id" & "1" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & IVCashr.Points & chr(POSNETTCP_FS);

    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintIVCashAdditionLines_POSNETProtocol;
    end;
  end;
LTCPIPPrintIVCashAdditionLines_POSNETProtocol:;
  TCPIPPrintIVCashAdditionLines_POSNETProtocol = res;
  return;
end;

function Integer TCPIPPrintRestAccLines_POSNETProtocol(string host,LongInt port,string codepage,record RestAccVc RestAccr,Array val prates,Integer FiscalPrinter)
begin
  Integer res,noErr,res2;
  record SysFormatBlock SFb;
  record CashPrintBlock CPb;
  record VATCodeBlock VATb;
  record INVc INr;
  Integer i,j,linenr,rwcnt,slen;
  row RestAccVc RestAccrw;
  string 255 tstr,spec,tspec,CtrlSeq;
  string 20 qtystr, pricestr;
  Boolean onelinef;
  string 3 DCS,ST,LBTRSLN;
  string 1 CR;
  string 20 cancelstr;
  string 10 FPVATCode;
  string 255 replystr;
  val qty;
  
  BlockLoad(SFb);
  BlockLoad(CPb);
  BlockLoad(VATb);
  rwcnt =  MatRowCnt(RestAccr);
  linenr = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    if (blank(RestAccrw.ArtCode)) then begin
      goto LTCPIPSKIPRestAccROW;
    end;
    qty = RestAccrw.Quant;
    switch (RestAccrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LTCPIPkRestAccRowTypeNormal;
      case kInvoiceRowTypeNormal:
LTCPIPkRestAccRowTypeNormal:;
        if (RestAccrw.PriceFactor!=0) then begin
          qty = qty/RestAccrw.PriceFactor;
        end;
      otherwise 
        if (RestAccrw.PriceFactor!=0) then begin
          qty = qty/RestAccrw.PriceFactor;
        end;
        goto LTCPIPSKIPRestAccROW;
    end;
    onelinef = false;
    linenr = linenr + 1;
    spec = "";
    if (ReadFirstItem(RestAccrw.ArtCode,INr,true,true)) then begin    
      spec = INr.AlternativeCode;
    end;
    if (blank(spec)) then begin
      spec = RestAccrw.Spec;
    end;
    
    CtrlSeq = "trline" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & RestAccrw.ArtCode & chr(POSNETTCP_FS);
    GetPOSNETVATCode(prates,FiscalPrinter,VATb,RestAccrw.VATCode,FPVATCode);
    CtrlSeq = CtrlSeq & "vt" & FPVATCode & chr(POSNETTCP_FS);
    tstr = ValToString(RestAccrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "pr" & tstr & chr(POSNETTCP_FS);
//    CtrlSeq = CtrlSeq & "st" & "false" & chr(POSNETTCP_FS);//storno
    tstr = ValToString(RestAccrw.Quant*RestAccrw.Price*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    tstr = ValToString(RestAccrw.Quant,M4Qty,"",",",0);
    CtrlSeq = CtrlSeq & "il" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "op" & Left(spec,35) & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "jm" & INr.Unittext & chr(POSNETTCP_FS);
    if (RestAccrw.vRebate!=0) then begin
      CtrlSeq = CtrlSeq & "rd" & "1" & chr(POSNETTCP_FS);
      tstr = ValToString(RestAccrw.vRebate*100,M40Val,"",",",1);
      CtrlSeq = CtrlSeq & "rp" & tstr & chr(POSNETTCP_FS);
    end;
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintBOSLinesRestAcc_POSNETProtocol;
    end;    
LTCPIPSKIPRestAccROW:;    
  end;
LTCPIPPrintBOSLinesRestAcc_POSNETProtocol:;  
  TCPIPPrintRestAccLines_POSNETProtocol = res;
  return;  
end;

function Integer TCPIPPrintRestAccPaymentModesSums_POSNETProtocol(string host,LongInt port,string codepage,record RestAccVc RestAccr)
begin
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  vector val vpaymodesums;
  
  RestAccCalculatePaymentModeSums(RestAccr,vpaymodesums);
  if (vpaymodesums[kInvoiceRowTypeCashPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNETTCP_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCashPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintRestAccPaymentModesSums_POSNETProtocol;
    end;    
  end;
  if (vpaymodesums[kInvoiceRowTypeCreditCardPayment]>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "2" & chr(POSNETTCP_FS);
    tstr = ValToString(vpaymodesums[kInvoiceRowTypeCreditCardPayment]*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "0" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintRestAccPaymentModesSums_POSNETProtocol;
    end;    
  end;
  if (RestAccr.RetValue>0) then begin
    CtrlSeq = "trpayment" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "ty" & "0" & chr(POSNETTCP_FS);
    tstr = ValToString(RestAccr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "wa" & tstr & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & "" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "re" & "1" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintRestAccPaymentModesSums_POSNETProtocol;
    end;    
  end;
LTCPIPPrintRestAccPaymentModesSums_POSNETProtocol:;
  TCPIPPrintRestAccPaymentModesSums_POSNETProtocol = res;
  return;
end;

function Integer TCPIPRestAccAcceptTrans_POSNETProtocol(string host,LongInt port,string codepage,record RestAccVc RestAccr)
begin
  Integer res;
  string 255 CtrlSeq,tstr;
  vector val vpaymodesums;
  
  RestAccCalculatePaymentModeSums(RestAccr,vpaymodesums);
  CtrlSeq = "trend" & chr(POSNETTCP_FS);
  tstr = ValToString(RestAccr.Sum4*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "to" & tstr & chr(POSNETTCP_FS);
  tstr = ValToString((vpaymodesums[kInvoiceRowTypeCashPayment]+vpaymodesums[kInvoiceRowTypeCreditCardPayment])*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "fp" & tstr & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fe" & "0" & chr(POSNETTCP_FS);
  if (RestAccr.RetValue>0) then begin
    tstr = ValToString(RestAccr.RetValue*100,M40Val,"",",",1);
    CtrlSeq = CtrlSeq & "re" & tstr & chr(POSNETTCP_FS);
  end;
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPRestAccAcceptTrans_POSNETProtocol;
  end;    
LTCPIPRestAccAcceptTrans_POSNETProtocol:;
  TCPIPRestAccAcceptTrans_POSNETProtocol = res;
  return;
end;

function Integer TCPIPPrintRestAccAdditionLines_POSNETProtocol(string host,LongInt port,string codepage,record RestAccVc RestAccr)
begin
  Integer res;
  string 255 CtrlSeq;
  
  CtrlSeq = "trftrln" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "id" & "0" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "na" & RestAccr.SerNr & chr(POSNETTCP_FS);

  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPPrintRestAccAdditionLines_POSNETProtocol;
  end;    

  if (RestAccr.Points!=0) then begin
    CtrlSeq = "trftrln" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "id" & "1" & chr(POSNETTCP_FS);
    CtrlSeq = CtrlSeq & "na" & RestAccr.Points & chr(POSNETTCP_FS);

    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      goto LTCPIPPrintRestAccAdditionLines_POSNETProtocol;
    end;    
  end;
LTCPIPPrintRestAccAdditionLines_POSNETProtocol:;
  TCPIPPrintRestAccAdditionLines_POSNETProtocol = res;
  return;
end;

function Integer TCPIPPrintFooter_POSNETProtocol(string host,LongInt port,string codepage)
begin  
  string 255 CtrlSeq
  
  CtrlSeq = "trftrend" & chr(POSNETTCP_FS);
  TCPIPPrintFooter_POSNETProtocol = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);  
  return;
end;

function Integer TCPIPMoneyOutCurr_POSNETProtocol(string host,LongInt port,string codepage,record CashVc Cashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr,t2;
  
  CtrlSeq = "cash" & chr(POSNETTCP_FS);
  tstr = ValToString(Cashr.Total*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "kw" & tstr & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "wp" & "0" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyOutCurr_POSNETProtocol;
  end;    

  CtrlSeq = "formstart" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fh" & "1" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyOutCurr_POSNETProtocol;
  end;    
/*
  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "s1" & Cashr.Comment & chr(10) & tstr & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "2" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyOutCurr_POSNETProtocol;
  end;    
*/

  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "16" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyOutCurr_POSNETProtocol;
  end;    
  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "17" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyOutCurr_POSNETProtocol;
  end;    
  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "s1" & "Podpis" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "18" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyOutCurr_POSNETProtocol;
  end;    

  CtrlSeq = "formend" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyOutCurr_POSNETProtocol;
  end;    

LTCPIPMoneyOutCurr_POSNETProtocol:;
  TCPIPMoneyOutCurr_POSNETProtocol = res;
  return;
end;

function Integer TCPIPMoneyInCurr_POSNETProtocol(string host,LongInt port,string codepage,record CashVc Cashr)
begin
  Integer res;
  string 255 CtrlSeq,tstr;
  
  CtrlSeq = "cash" & chr(POSNETTCP_FS);
  tstr = ValToString(Cashr.Total*100,M40Val,"",",",1);
  CtrlSeq = CtrlSeq & "kw" & tstr & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "wp" & "1" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyInCurr_POSNETProtocol;
  end;    

  CtrlSeq = "formstart" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fh" & "0" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyInCurr_POSNETProtocol;
  end;    
/*
  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "s1" & Cashr.Comment & chr(10) & tstr & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "2" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyInCurr_POSNETProtocol;
  end;    
*/

  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "16" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyInCurr_POSNETProtocol;
  end;    
  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "17" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyInCurr_POSNETProtocol;
  end;    
  CtrlSeq = "formline" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "s1" & "Podpis" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fl" & "18" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyInCurr_POSNETProtocol;
  end;    

  CtrlSeq = "formend" & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "fn" & "29" & chr(POSNETTCP_FS);
  res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
  if (res!=POSNETTCP_NOERR) then begin
    goto LTCPIPMoneyInCurr_POSNETProtocol;
  end;    

LTCPIPMoneyInCurr_POSNETProtocol:;
  TCPIPMoneyInCurr_POSNETProtocol = res;
  return;
end;

global
updating procedure PrintPOSNETReceipt_withPOSNETProtocol_TCP(var record IVVc IVr,record LSerialPortDeviceVc LSPDr)
begin
  record IVVc lIVr;
  record IVVc oldIVr;
  string 2 ST;
  string 255 replystr,tstr;
  Integer noErr;
  Array val prates;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);
    
    if ((TCPIPCheckClock_POSNETProtocol(host,port,codepage)==noErr) and 
        (TCPIPLoadVATRates_POSNETProtocol(host,port,codepage,prates)==noErr)) then begin
      if (TCPIPTransBegin_POSNETProtocol(host,port,codepage)==noErr) then begin
        if (TCPIPPrintIVLines_POSNETProtocol(host,port,codepage,IVr,prates,LSPDr.Printer)==noErr) then begin
          if (TCPIPPrintIVPaymentModesSums_POSNETProtocol(host,port,codepage,IVr)==noErr) then begin
            if (TCPIPIVAcceptTrans_POSNETProtocol(host,port,codepage,IVr)==noErr) then begin
              if (TCPIPPrintIVAdditionLines_POSNETProtocol(host,port,codepage,IVr)==noErr) then begin
                if (TCPIPPrintFooter_POSNETProtocol(host,port,codepage)==noErr) then begin
                  lIVr.SerNr = IVr.SerNr;
                  if (ReadFirstMain(lIVr,1,true)) then begin
                    RecordCopy(oldIVr,lIVr);
                    lIVr.Prntdf = 1;
                    if (RecordUpdate(oldIVr,lIVr,false)==0) then begin
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;        
      end;
    end;
  end else begin
  end;
  return;
end;

global
updating procedure PrintPOSNETReceiptIVCash_withPOSNETProtocol_TCP(var record IVCashVc IVCashr,record LSerialPortDeviceVc LSPDr)
begin
  record IVCashVc oldIVCashr;
  string 2 ST;
  string 255 replystr,tstr;
  Integer noErr;
  Array val prates;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);
    codepage = StringSetFromString(89,LSPDr.Codepage);
    if ((TCPIPCheckClock_POSNETProtocol(host,port,codepage)==noErr) and 
        (TCPIPLoadVATRates_POSNETProtocol(host,port,codepage,prates)==noErr)) then begin
      if (TCPIPTransBegin_POSNETProtocol(host,port,codepage)==noErr) then begin
        if (TCPIPPrintIVCashLines_POSNETProtocol(host,port,codepage,IVCashr,prates,LSPDr.Printer)==noErr) then begin
          if (TCPIPPrintIVCashPaymentModesSums_POSNETProtocol(host,port,codepage,IVCashr)==noErr) then begin
            if (TCPIPIVCashAcceptTrans_POSNETProtocol(host,port,codepage,IVCashr)==noErr) then begin
              if (TCPIPPrintIVCashAdditionLines_POSNETProtocol(host,port,codepage,IVCashr)==noErr) then begin
                if (TCPIPPrintFooter_POSNETProtocol(host,port,codepage)==noErr) then begin
                  RecordCopy(oldIVCashr,IVCashr);
                  IVCashr.Prntdf = 1;
                  if (RecordUpdate(oldIVCashr,IVCashr,false)==0) then begin
                  end;
                end;
              end;
            end;
          end;        
        end;
      end;
    end;
  end else begin  
  end;
  return;
end;

global
updating procedure PrintPOSNETReceiptRestAcc_withPOSNETProtocol_TCP(var record RestAccVc RestAccr,record LSerialPortDeviceVc LSPDr)
begin
  record RestAccVc oldRestAccr;
  string 2 ST;
  string 255 replystr,tstr;
  Integer noErr;
  Array val prates;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);
    if ((TCPIPCheckClock_POSNETProtocol(host,port,codepage)==noErr) and 
        (TCPIPLoadVATRates_POSNETProtocol(host,port,codepage,prates)==noErr)) then begin
      if (TCPIPTransBegin_POSNETProtocol(host,port,codepage)==noErr) then begin
        if (TCPIPPrintRestAccLines_POSNETProtocol(host,port,codepage,RestAccr,prates,LSPDr.Printer)==noErr) then begin
          if (TCPIPPrintRestAccPaymentModesSums_POSNETProtocol(host,port,codepage,RestAccr)==noErr) then begin
            if (TCPIPRestAccAcceptTrans_POSNETProtocol(host,port,codepage,RestAccr)==noErr) then begin
              if (TCPIPPrintRestAccAdditionLines_POSNETProtocol(host,port,codepage,RestAccr)==noErr) then begin
                if (TCPIPPrintFooter_POSNETProtocol(host,port,codepage)==noErr) then begin
                  RecordCopy(oldRestAccr,RestAccr);
                  RestAccr.Prntdf = 1;
                  if (RecordUpdate(oldRestAccr,RestAccr,false)==0) then begin
                  end;
                end;
              end;
            end;
          end;
        end;        
      end;
    end;
  end else begin    
  end;
  return;
end;

global
procedure PrintPOSNETProtocolCashEvent_TCP(var record CashVc Cashr,record LSerialPortDeviceVc LSPDr)
begin
  Integer noErr,res;
  string 255 tstr;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);

    res = TCPIPCheckClock_POSNETProtocol(host,port,codepage);
    if (res!=noErr) then begin
      goto LTCPIPPrintPOSNETProtocolCashEvent;
    end;
    switch (Cashr.Event) begin
      case 0:
        TCPIPMoneyOutCurr_POSNETProtocol(host,port,codepage,Cashr);
      case 1:
        TCPIPMoneyInCurr_POSNETProtocol(host,port,codepage,Cashr);
    end;
LTCPIPPrintPOSNETProtocolCashEvent:;    
    if (res!=0) then begin
      MessageBox(0,"error " & res);
    end;
  end else begin
  end;
  return;
end;

global
procedure POSNETProtocol_DailyReport_TCP(record LSerialPortDeviceVc LSPDr,Date atd)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date td;
  string 255 tstr;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  CtrlSeq = "dailyrep" & chr(POSNETTCP_FS);
  td = atd;
  if (blankdate(td)) then begin
    td = CurrentDate;
  end;
  CtrlSeq = CtrlSeq & "da" & DateToString(td,"YYYY-MM-DD") & chr(POSNETTCP_FS);
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);

    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      MessageBox(0,"error " & res);
    end;    
  end else begin  
  end;
  return;
end;

global
procedure POSNETProtocol_MonthlyReport_TCP(record LSerialPortDeviceVc LSPDr,Date atd)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date td;
  string 255 tstr;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  CtrlSeq = "monthlyrep" & chr(POSNETTCP_FS);
  td = atd;
  if (blankdate(td)) then begin
    td = CurrentDate;
  end;
  CtrlSeq = CtrlSeq & "da" & DateToString(td,"YYYY-MM-DD") & chr(POSNETTCP_FS);
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);

    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      MessageBox(0,"error " & res);
    end;    
  end else begin
  end;
  return;
end;

global
procedure POSNETProtocol_YearlyReport_TCP(record LSerialPortDeviceVc LSPDr,Date atd)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date td;  
  string 255 tstr;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  CtrlSeq = "periodicrepbydates" & chr(POSNETTCP_FS);
  td = atd;
  if (blankdate(td)) then begin
    td = CurrentDate;
  end;
  td.month = 1;
  td.day = 1;
  CtrlSeq = CtrlSeq & "fd" & DateToString(td,"YYYY-MM-DD") & chr(POSNETTCP_FS);
  td.month = 12;
  td.day = DaysInMonth(GetYear(td),GetMonth(td));
  CtrlSeq = CtrlSeq & "td" & DateToString(td,"YYYY-MM-DD") & chr(POSNETTCP_FS);
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);

    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      MessageBox(0,"error " & res);
    end;    
  end else begin
  end;
  return;
end;

global
procedure POSNETProtocol_PeriodicReport_TCP(record LSerialPortDeviceVc LSPDr,Date asd,Date aed)
begin
  Integer noErr,res;
  string 255 CtrlSeq;
  Date sd,ed;
  string 255 tstr;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;

  noErr = 0;
  CtrlSeq = "periodicrepbydates" & chr(POSNETTCP_FS);
  sd = asd;
  if (blankdate(sd)) then begin
    sd = CurrentDate;
  end;
  ed = aed;
  if (blankdate(ed)) then begin
    ed = CurrentDate;
  end;

  CtrlSeq = CtrlSeq & "fd" & DateToString(sd,"YYYY-MM-DD") & chr(POSNETTCP_FS);
  CtrlSeq = CtrlSeq & "td" & DateToString(ed,"YYYY-MM-DD") & chr(POSNETTCP_FS);
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);

    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      MessageBox(0,"error " & res);
    end;    
  end else begin
  end;
  return;
end;

global
function Integer OpenDrawer_POSNETProtocol_TCP(record LSerialPortDeviceVc LSPDr)
begin
  Integer res,noErr;
  string 255 CtrlSeq;
  string 255 tstr;
  string 255 host,codepage;
  LongInt port;
  LongInt pos;
  
  if (InString(LSPDr.Port,":")) then begin
    pos = 0;
    GetNextSubstring(LSPDr.Port,pos,":",host);
    GetNextSubstring(LSPDr.Port,pos,":",tstr);
    port = StringToLongInt(tstr);    
    codepage = StringSetFromString(89,LSPDr.Codepage);

    CtrlSeq = "opendrwr" & chr(POSNETTCP_FS);
    res = POSNETWriteToTCPIP(host,port,codepage,CtrlSeq);
    if (res!=POSNETTCP_NOERR) then begin
      MessageBox(0,"error " & res);
    end;    
  end;
  OpenDrawer_POSNETProtocol_TCP = res;
  return;
end;
