external procedure GetVATproc(string,Integer,var val);
external function LongInt POSNETHexToLong(string);
external function roundmode SetRoundModeD(Integer);
external function string 255 NumToHex(string);

enum begin
  HPAN_STX = 2,  // 0x02
  HPAN_ETX = 3,  // 0x03
  HPAN_ACK = 6,  // 0x06
  HPAN_DC1 = 17, // 0x11
  HPAN_DC2 = 18, // 0x12
  HPAN_DC3 = 19, // 0x13
  HPAN_DC4 = 20, // 0x14
  HPAN_NAK = 21, // 0x15
  HPAN_ESC = 27, // 0x1B
  HPAN_FS = 28,  // 0x1C
  HPAN_STATPRN = 161
end;

procedure SStrings()
begin
  SString(32900,"IV");
  SString(32901,"CN");
  SString(32902,"DN");
  SString(32903,"Pay Deal: ");
  SString(32904," SalesMan: ");
  SString(32905," Cashier: ");
  SString(32906,"Command: ");
  
  SString(32907,"Printer Busy");
  SString(32908,"Printer Error (serial comunication error)");
  SString(32909,"Offline Printer");
  SString(32910,"Secondary Paper Error");
  SString(32911,"Main Paper Error");
  SString(32912,"Incomming Buffer Almost Full (printer send back the command to you if 1)");
  SString(32913,"Empty Buffer (sucessfull command)");
  SString(32914,"Top of the Printer Opened");
  SString(32915,"Cash Box Closed or non existent");
  SString(32916,"Logic OR for 2 to 5, 8 and 14");
  SString(32917,"*** HASAR Printer Status ERROR: ");
  
  SString(32918,"CRITICAL Fiscal Memory Fail");
  SString(32919,"Unrecognized Command");
  SString(32920,"Invalid Field Data");
  SString(32921,"Invalid Command");
  SString(32922,"Total Overflow");
  SString(32923,"CRITICAL Fiscal Memory Full");
  SString(32924,"Date Set Fail");
  SString(32925,"Slip Open");
  SString(32926,"Receipt Open");
  SString(32927,"* * * HASAR Fiscal Status ERROR: ");

  SString(32928,"Printer Status: ");
  SString(32929,"Wrong answer: ");
  SString(32930,"Fiscal Status: ");
  SString(32931,"DC4- Out of Paper");
  SString(32932," R1: ");
  SString(32933," R2: ");
  SString(32934,"* * HASAR Open Port: ");
  SString(32935,"* * HASAR Close Port");
  SString(32936,"* * * HASAR ONLINE");
  SString(32937,"TimeOut: ");
  SString(32938,"* * * HASAR CheckHASARClock");
  SString(32939,"Invoice Data are sending to fiscal printer, please wait...");
  SString(32940,"CheckHASARClock * Error on print date");
  SString(32941,"CheckHASARClock * Error");
  SString(32942,"* * * HASAR OpenFiscalReceipt, ");
  SString(32943,"* * * HASAR SetHeader, Delete Header: ");
  SString(32944,"* * * HASAR SetHeader, line: ");
  SString(32945,"* * * HASAR SetTrailer, Delete Trailer: ");
  SString(32946,"* * * HASAR SetTrailer, line: ");
  SString(32947,"* * * HASAR PrintLastItemDiscount");
  SString(32948,"* * * HASAR PrintFiscalText");
  SString(32949,"* * * HASAR PrintItemLine: ");
  SString(32950,"* * * HASAR TotalTender -Global Disc: ");
  SString(32951,"* * * ERROR Item does not exist: ");
  SString(32952,"Unit: ");
  SString(32953," BarCode: ");
  SString(32954,"Fiscal Text Error, line: ");
  SString(32955,"Batch Nr.: ");
  SString(32956,"Fiscal Text Error, line: ");
  SString(32957,"Item Data Error, line: ");
  SString(32958,"Discount Error, line: ");
  SString(32959,"Fiscal Text Error, line: ");
  SString(32960,"* * * HASAR SubTotal");
  SString(32961,"* * * HASAR CloseFiscalReport");
  SString(32962,"* * * HASAR StatusExtra");
  SString(32963,"HASAR Doc.No: ");
  SString(32964,"* * * HASAR GetSerial");
  SString(32965,"HASAR Printer ID: ");
  SString(32966,"* * * HASAR CANCEL");
  SString(32967,"INVALID Document, please check settings and make a new invoice.");
  SString(32968,"Address:  ");
  SString(32969,"* * * HASAR SetCustExtraData, ");
  SString(32970,"* * * HASAR SetCustExtraData, res: ");
  SString(32971,"Document.No.");
  SString(32972,"* * * HASAR Report X");
  SString(32973,"* * *  HASAR Report Z");
end;


function integer FiscalDebugMode()
begin
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;

  BlockLoad(LMb);  
  MCr.Code = LMb.LocalMachineCode;
  if (ReadFirstMain(MCr,1,true)) then begin
    FiscalDebugMode = MCr.LogLevel;  
  end;
  return;
end;

function integer FiscalTimeOut()
begin
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;
  integer ret;

  BlockLoad(LMb);
  MCr.Code = LMb.LocalMachineCode;
  if (ReadFirstMain(MCr,1,true)) then begin
    if (MCr.AnsTimeOut<1 or blank(MCr.AnsTimeOut)) then begin
      ret = 250; //K default value
    end else begin
      ret = MCr.AnsTimeOut;
    end;
  end;
  FiscalTimeOut = ret;
  return;
end;

//conversiones de strings
procedure ConvertAccent(var string c)
begin
  boolean changed;
  string 1 nc;
  
  switch (asc(c)) begin
    case 225: nc = "a"; changed = true; //"·"
    case 233: nc = "e"; changed = true; //"È"
    case 237: nc = "i"; changed = true; //"Ì"
    case 243: nc = "o"; changed = true; //"Û"
    case 250: nc = "u"; changed = true; //"?"
    case 252: nc = "u"; changed = true; //"¸"
    case 241: nc = "n"; changed = true; //"Ò"
    case 193: nc = "A"; changed = true; //"¡"
    case 201: nc = "E"; changed = true; //"…"
    case 205: nc = "I"; changed = true; //"Õ"
    case 211: nc = "O"; changed = true; //"”"
    case 218: nc = "U"; changed = true; //"?"
    case 220: nc = "U"; changed = true; //"‹"
    case 209: nc = "N"; changed = true; //"—"
  end;
  if changed then begin c = nc; end;
  return;
end;

procedure TestConvertAccent(var string tstr)
begin
  String 255 ostr,newtstr;
  Integer i,rw,l;
  val res;
  string 1 c;

  newtstr = "";
  l = len(tstr);
  for (i=0;i<=l;i=i+1) begin
    c = Mid(tstr,i,1);
    ConvertAccent(c);
    newtstr = newtstr & c;
  end;
  tstr = newtstr;
  return;
end;

procedure ConvertStrtoFiscal(var string ret)
begin
  integer l,i;
  string 255 aux; 
  integer c;
  
  aux= "";
  TestConvertAccent(ret);
  l= len(ret);
  for(i=0;i<l;i=i+1) begin
    c = asc(mid(ret,i,1));
    // space , 0-9, a-z, A-Z
    if (c==42) or (c>=45 and c<=47) or (c>=44 and c<=58) or (c>=65 and c<=90) or (c==92) or (c==95) or (c>=97 and c<=122) then begin
      aux = aux & mid(ret,i,1);
    end;
  end;
  ret= aux;
  return;
end;

procedure ConvertStrtoFiscal2(var string ret)
begin
  integer l,i;
  string 255 aux; 
  integer c;
  
  aux= "";
  TestConvertAccent(ret);
  l = len(ret);
  for(i=0;i<l;i=i+1) begin
    c = asc(mid(ret,i,1));
    if (c>=32 and c<=125) then begin
      aux = aux & mid(ret,i,1);
    end;
  end;
  ret= aux;
  return;
end;

procedure NormalizeReply(var string ret)
begin
  integer l,i;
  string 255 aux; 
  integer c;
  
  aux= "";
  l= len(ret);
  for(i=0;i<l;i=i+1) begin
    c= asc(mid(ret,i,1));
    if (c==28) then begin
      aux = aux & chr(124);
    end else begin
      aux = aux & mid(ret,i,1);
    end;
  end;
  ret= aux;
  return;
end;

function boolean TestStatusReply(string tstr)
begin
  boolean ret;
  integer l,i;
  integer c;
  
  ret = true;
  l = len(tstr);
  for(i=0;i<l;i=i+1) begin
    c = asc(mid(tstr,i,1));
    if (c<44) or (c>58) then begin
      ret = false;
      i = l;
    end;
  end;
  TestStatusReply= ret;
  return;
end;

procedure GetStringFromTime(Time tt, var string retstr)
begin
  string 20 tstr, res;
  
  res = "";
  tstr = GetHour(tt);
  if len(tstr)==1 then begin tstr = "0" & tstr; end;
  res = res & tstr & ":";
  tstr = GetMinute(tt);
  if len(tstr)==1 then begin tstr = "0" & tstr; end;
  res = res & tstr & ":";
  tstr = GetSecond(tt);
  if len(tstr)==1 then begin tstr = "0" & tstr; end;
  res = res & tstr;
  retstr = res;
  return;
end;

procedure GetHASARPrinterNumber(string replystr,var string IDPrinter)
BEGIN
  Integer i,l;
  string 1 nc;
  string 255 tstInvNr;

  IDPrinter = "";
  l = len(replystr);
  for (i=13;i<=25;i=i+1) begin
    nc = Mid(replystr,i,1);
    tstInvNr = tstInvNr & nc;
  end;
  if nonblank(tstInvNr) then begin
    IDPrinter = tstInvNr;
  end;
  return;
end;

procedure GetHASARInvoiceNumber(string replystr,var string InvNr)
BEGIN
  Integer i,l;
  string 1 nc;
  string 255 tstInvNr;

  InvNr = "";
  l = len(replystr);
  for (i=35;i<=42;i=i+1) begin
    nc = Mid(replystr,i,1);
    tstInvNr = tstInvNr & nc;
  end;
  if nonblank(tstInvNr) then begin
    InvNr = USetStr(32900) & tstInvNr;
  end;
  return;
end;

procedure GetHASARNCreditNumber(string replystr,var string InvNr)
BEGIN
  Integer i,l;
  string 1 nc;
  string 255 tstInvNr;
  
  InvNr = "";
  l = len(replystr);
  for (i=53;i<=60;i=i+1) begin
    nc = Mid(replystr,i,1);
    tstInvNr = tstInvNr & nc;
  end;
  if nonblank(tstInvNr) then begin
    InvNr = USetStr(32901) & tstInvNr;
  end;
  return;
end;

procedure GetHASARNDebitNumber(string replystr,var string InvNr)
BEGIN
  Integer i,l,what;
  string 1 nc;
  string 255 tstInvNr;
  Boolean getdatef;

  InvNr= "";
  l = len(replystr);
  for (i=44;i<=51;i=i+1) begin
    nc = Mid(replystr,i,1);
    tstInvNr = tstInvNr & nc;
  end;
  if nonblank(tstInvNr) then begin
    InvNr = USetStr(32902) & tstInvNr;
  end;
  return;
end;

function val DownPaymentAmount(record IVVc IVr,Integer ordrow)
begin
  val res;
  row IVVc IVrw;
  Integer i,rwcnt;

  if (ordrow>=0) then begin
    rwcnt =  MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==5) then begin
        if (IVrw.OrdRow==ordrow) then begin
          res = res + IVrw.Sum;
        end;
      end;
    end;
  end;
  DownPaymentAmount = res;
  RETURN;
END;


procedure PrintInvoiceHeader(record IVVc IVr,var string tstr,integer nrl)
begin
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;
  record PDVc PDr;
  integer ret;

  BlockLoad(LMb);
  SStrings;
  MCr.Code = LMb.LocalMachineCode;
  if (ReadFirstMain(MCr,1,true)) then begin
    if (nrl==1) then begin
      PDr.Code = IVr.PayDeal;
      if ReadFirstMain(PDr,1,true) then begin
        if blank(PDr.pdComment) then begin
          tstr = USetStr(32903) & PDr.Code;
        end else begin
          tstr = USetStr(32903) & PDr.pdComment;
        end;
      end;
      if (MCr.PrintSalesMan==1) then begin
        tstr = tstr & USetStr(32904) & IVr.SalesMan;
      end;
      if (MCr.PrintCashier==1) then begin
        tstr = tstr & USetStr(32905) & CurrentUser;
      end;
      TestConvertAccent(tstr);
    end;
  end;
  return;
end;

function integer GetLastItemRow(record IVVc IVr)
begin
  row IVVc IVrw;
  integer rwcnt,ret,i;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if nonblank(IVrw.ArtCode) then begin 
      ret = i;
    end;
  end;
  GetLastItemRow= ret;
  return;
end;

function val GetGlobalDiscount(record IVVc IVr)
begin
  row IVVc IVrw;
  integer rwcnt,ret,i;
  val totdisc,subtotal,discount;

  totdisc = 0;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==1) then begin
      totdisc = totdisc+((IVrw.Price*IVrw.Quant)-IVrw.Sum);
      subtotal = subtotal+(IVrw.Price*IVrw.Quant);
    end;
  end;
  discount = totdisc/subtotal*100;
  GetGlobalDiscount= discount;
  return;
end;

procedure HASARWriteLog(array Integer aEscSeq, Integer aCount )
begin
  string 255 comd;
  integer i;
  
  comd = "";
  for (i=0; i<aCount;i=i+1) begin
    comd = comd & chr(aEscSeq[i]); 
    LogText(0,aEscSeq[i]);
  end;
  logtext(0,USetStr(32906) & comd);
  return;
end;

procedure Add_ASC(var Array Integer aArray,var Integer aCount,Integer AscCode)
begin
  aArray[aCount] = AscCode;
  aCount = aCount + 1;
  return;
end;

procedure Add_CHR(var Array Integer aArray,var Integer aCount,string s)
begin                                                                              
  Integer i,cnt;
  
  cnt = len(s);
  for (i=0;i<cnt;i=i+1) begin
    Add_ASC(aArray,aCount,asc(mid(s,i,1)));
  end;                                                  
  return;                                                                          
end; 

procedure Add_STR(var Array Integer aArray,var Integer aCount,string s)
begin                                                       
  if (NonBlank(s)) then begin
    Add_CHR(aArray,aCount,ConvertStringToCodePage("CP437",s));
  end;
  return;                                                                          
end; 

procedure Add_VAL(var Array Integer aArray,var Integer aCount,val v)
begin
  record SysFormatBlock SRSet;
  string 20 tstr;

  BlockLoad(SRSet);
  tstr = ValToString(v,M4Val,"",SRSet.decimalPt,0);
  Add_CHR(aArray,aCount,tstr);
  return;
end;

procedure Add_VAL3(var Array Integer aArray,var Integer aCount,val v)
begin
  record SysFormatBlock SRSet;
  string 20 tstr;

  BlockLoad(SRSet);
  tstr = ValToString(v,M45Val,"",SRSet.decimalPt,0);
  Add_CHR(aArray,aCount,tstr);
  return;
end;

function string 255 ArrayToStr(Array Integer aArray,Integer aCount)
begin
  string 255 res;
  Integer i;
  
  for (i=0;i<aCount;i=i+1) begin
    res = res & chr(aArray[i]);
  end;
  ArrayToStr = res;
  return;
end;

function boolean isHexNr(string tstr)
begin
  boolean res;
  string 16 hexs;
  integer i;
  
  res= true;
  hexs = "0123456789ABCDEF";
  for (i=0;i<len(tstr);i=i+1) begin
    if not SetInSet(mid(tstr,i,1),hexs) then begin
      res = false;
    end;
  end;
  isHexNr = res;
  return;
end;

function string 255 AddMessage(string msg1,string msg2)
begin
  string 255 res;
  
  res = msg1;
  if (NonBlank(res)) then begin
    res = res & chr(10);
  end;
  res = res & msg2;  
  AddMessage = res;
  return;
end;

procedure HASARDisplayErrorMsg(Integer err,string msg)
begin
  if (err!=0 or NonBlank(msg)) then begin
    MessageBox(err,msg);
  end;
  return;
end;

function Integer AddCmdSeq(var Integer cmdnr)
begin
  if (cmdnr<32) then begin
    cmdnr = 32;
    goto LAddCmdSeq;
  end;
  if (cmdnr>127) then begin
    cmdnr = 32;
    goto LAddCmdSeq;
  end;
  cmdnr = cmdnr + 2; // must be even
LAddCmdSeq:;  
  AddCmdSeq = cmdnr;
  return;
end;

function Integer ReplyInHASARBuffer(var string replystr,Integer l)
begin
  Integer noErr;
  
  if (l<=255) then begin
    replystr = replystr & ReadComPort(0,l-len(replystr));
  end;
  ReplyInHASARBuffer = noErr;
  return;
end;

function Integer OutComPortInteger(Integer EscSeq)
begin
  Integer res;
  res = OutComPort(0,chr(EscSeq));
  OutComPortInteger = res;
  return;
end;

function Integer OutComPortArray(array Integer aEscSeq,Integer aCount)
BEGIN
  Integer res;
  Integer noErr,i;
  String 255 comand;
  
  comand= "";
  for (i=0;i<aCount;i=i+1) begin
    comand= comand & chr(aEscSeq[i]);
  end;
  res = OutComPort(0,comand);
  if (res!=0) then begin
    res = noErr;
  end else begin
    res = 1;
  end;
  OutComPortArray = res;
  RETURN;
END;

procedure ClearComPort()
begin
  string 1 c;
  
  c = ReadComPort(0,1);
  while (c!="") begin
    c = ReadComPort(0,1);
  end;
  return;
end;

function Integer TestPrinterStatus(string printerstatus)
begin
  Integer res;
  LongInt l;
  string 255 tlog;

  l = POSNETHexToLong(Left(printerstatus,4));
  tlog= "";
  if (BitAnd(l,1)) then begin res = 22100; tlog= USetStr(32907); goto LTestPrinterStatus; end;
//  if (BitAnd(l,2)) then begin res = 0; end;//always zero
  if (BitAnd(l,4)) then begin res = 22101; tlog= USetStr(32908); goto LTestPrinterStatus; end;
  if (BitAnd(l,8)) then begin res = 22102; tlog= USetStr(32909); goto LTestPrinterStatus; end;
  if (BitAnd(l,16)) then begin res = 22103; tlog= USetStr(32910); goto LTestPrinterStatus; end;
  if (BitAnd(l,32)) then begin res = 22104; tlog= USetStr(32911); goto LTestPrinterStatus; end;
//  if (BitAnd(l,64)) then begin res = 22105; goto LTestPrinterStatus; end;//incomming buffer almost full (printer send back the command to you if 1)
  if (BitAnd(l,64)) then begin res = 0; tlog= USetStr(32912); end;
  if (BitAnd(l,128)) then begin res = 0; tlog= USetStr(32913); end;
  if (BitAnd(l,256)) then begin res = 22106; tlog= USetStr(32914); goto LTestPrinterStatus; end;
//  if (BitAnd(l,512)) then begin res = 1; end;//always zero
//  if (BitAnd(l,1024)) then begin res = 1; end;//always zero
//  if (BitAnd(l,2048)) then begin res = 1; end;//always zero
//  if (BitAnd(l,4096)) then begin res = 1; end;//always zero
//  if (BitAnd(l,8192)) then begin res = 1; end;//always zero
  if (BitAnd(l,16384)) then begin res = 0; tlog= USetStr(32915); end;
  if (BitAnd(l,32768)) then begin res = 0; tlog= USetStr(32916); end;
LTestPrinterStatus:;
  if (FiscalDebugMode>1) and nonblank(tlog) then begin
    LogText(0,USetStr(32917) & tlog);
  end;
  TestPrinterStatus = res;
  return;
end;

function Integer TestFiscMemoryStatus(string fiscalstatus)
begin
  Integer res;
  LongInt l;
  string 255 tlog;

  l = POSNETHexToLong(Left(fiscalstatus,4));
  tlog= "";
  if (BitAnd(l,1)) then begin res = 22110; tlog= USetStr(32918); goto LTestFiscMemoryStatus; end;
  if (BitAnd(l,2)) then begin res = 22111; tlog= USetStr(32919); goto LTestFiscMemoryStatus; end;
//  if (BitAnd(l,4)) then begin res = 0; end; //Not Used
  if (BitAnd(l,8)) then begin res = 22112; tlog= USetStr(32920); goto LTestFiscMemoryStatus; end; 
  if (BitAnd(l,16)) then begin res = 22113; tlog= USetStr(32921); goto LTestFiscMemoryStatus; end;
  if (BitAnd(l,32)) then begin res = 22114; tlog= USetStr(32922); goto LTestFiscMemoryStatus; end;
  if (BitAnd(l,64)) then begin res = 22115; tlog= USetStr(32923); goto LTestFiscMemoryStatus; end;
  if (BitAnd(l,128)) then begin res = 22116; tlog= USetStr(32924); goto LTestFiscMemoryStatus; end;
  if (BitAnd(l,256)) then begin res = 0; end; //Fiscal Memory Near Full
  if (BitAnd(l,512)) then begin res = 0; end; //Fiscal Terminal Certified  
  if (BitAnd(l,1024)) then begin res = 0; end; //Fiscal Terminal Fiscalized  
  if (BitAnd(l,2048)) then begin res = 22118; tlog= USetStr(32925); goto LTestFiscMemoryStatus; end;
  if (BitAnd(l,4096)) then begin res = 0; goto LTestFiscMemoryStatus; end; //22119; tlog= "Receipt/Slip Open";
  if (BitAnd(l,8192)) then begin res = 22120; tlog= USetStr(32926); goto LTestFiscMemoryStatus; end;
  if (BitAnd(l,16384)) then begin res = 22121; tlog= USetStr(32926); goto LTestFiscMemoryStatus; end;
//  if (BitAnd(l,32768)) then begin res = 0; end; //logic OR for 0 to 8 bits //NOT USED  
  if (FiscalDebugMode>1) and nonblank(tlog)  then begin
    LogText(0,USetStr(32927) & tlog);
  end;
LTestFiscMemoryStatus:;
  TestFiscMemoryStatus = res;
  return;
end;

procedure GetReplyStatus(string tstr,var string ret,boolean fiscal)
begin
  string 4 ps,fs;
  integer l,i,c;
  boolean fsf,psf;
  
  ret= "";
  l= len(tstr);
  for(i=0;i<l;i=i+1) begin
    c = asc(mid(tstr,i,1));
    if psf and blank(ps) then begin
      ps = mid(tstr,i,4);
    end;
    if fsf and blank(fs) then begin
      fs = mid(tstr,i,4);
      i= l;
    end;
    if (c==124) then begin
      if psf then begin
        fsf = true;
        psf = false;
      end else begin
        psf = true;
        fsf = false;
      end;
    end;
  end;
  if fiscal then begin
    ret = fs;
  end else begin
    ret = ps;
  end;
  return;
end;

function Integer TestHASARSuccess(string escseq,string replystr)
begin
  Integer res,err,noErr;
  string 20 printerstatus,fiscalstatus;
  integer i;
 
  //if (Left(escseq,2)==Left(replystr,2)) then begin
    //Get Printer Status
    GetReplyStatus(replystr,printerstatus,false);
    if (FiscalDebugMode>1) then begin
      LogText(0,USetStr(32928) & printerstatus);
    end;
    if isHexNr(printerstatus) then begin
      if TestStatusReply(printerstatus) then begin
        res = TestPrinterStatus(printerstatus);
      end else begin 
        if (printerstatus == "C00C") then begin //ADAA
          res = 777;
        end else begin
          res = 1;
        end;
      end;
    end else begin
      res = 0; //ignoro respuesta
    end;
    if (res!=0) then begin
      LogText(0,USetStr(32929) & res);
      goto LTestHASARSuccess;
    end;
    //Get Fiscal Status
    GetReplyStatus(replystr,fiscalstatus,true);
    if (FiscalDebugMode>1) then begin
      LogText(0,USetStr(32930) & fiscalstatus);
    end;
    if isHexNr(fiscalstatus) then begin
      if TestStatusReply(printerstatus) then begin
        res = TestFiscMemoryStatus(fiscalstatus);
      end else begin //Aqui
        if (printerstatus == "C00C") then begin //ADAA
          res = 777;
        end else begin
          res= 1;
        end;
      end;
    end else begin
      res=0;
    end;
    if (res!=0) then begin
      LogText(0,USetStr(32929) & res);
      goto LTestHASARSuccess;
    end;
  res = noErr;
LTestHASARSuccess:;
  TestHASARSuccess = res;
  return;
end;

procedure SeqWithHasanCheckSum(array Integer aEscSeq,var Integer aCount)
begin
  string 255 cchex,escseq2;
  Integer cc,i;
  
  for (i=0;i<aCount;i=i+1) begin
    cc = cc + aEscSeq[i];
  end;
  cchex = NumToHex(cc);
  for(i=0;i<len(cchex);i=i+1)begin
    aEscSeq[aCount] = asc(Mid(cchex,i,1));
    aCount = aCount + 1;
  end;
  return;
end;

procedure GetCmdTimeOut(integer cmdnr)
begin
  integer timeout;

  timeout= FiscalTimeOut;
  switch(cmdnr) begin
    case 42: //ONLINE
    case 93: //SETHEADER
    case 94: //SETTRAILER
    case 63: //OPENFISCALRECEIPT
    case 89: //GETDATA
      timeout = timeout*2;
    case 65: //PRINTFISCALTEXT
      timeout = timeout*2;
    case 66: //PRINTITEMLINE
      timeout = timeout*2;
    case 67: //SUBTOTAL
      timeout = timeout*6;
    case 68: //TOTALTENDER
      timeout = timeout*2;
    case 69: //CLOSEFISCALRECEIPT
      timeout = timeout*6;
    case 42: //STATUSEXTRA
      timeout = timeout*2;
    case 54: //GETSERIAL
    case 152: //CANCEL
      timeout = timeout*6;
    case 57:  //DAILY REPORT X/Z
      timeout = timeout*6;
      //LogText(0,"time: " & timeout);
  end;
  MilliSleep(timeout);
end;

function Integer HASARWrite2(var Integer cmdnr,array Integer aEscSeq,var Integer aCount,var string replystr,var string replystr2)
begin
  integer res,res2,cnt;

  res= -1;
  replystr = "";
  replystr2 = "";
  //envio de comando
  SeqWithHasanCheckSum(aEscSeq,aCount);
  if (FiscalDebugMode>2) then begin
    HASARWriteLog(aEscSeq,aCount);
  end;
  res = OutComPortArray(aEscSeq,aCount);
  
  while(cnt<5) begin 
    
    GetCmdTimeOut(aEscSeq[2]);
    if blank(replystr) then begin
      replystr = ReadComPort(0,255);
    end else begin
      replystr2 = ReadComPort(0,255);
    end;
    if len(replystr)>0 then begin
      if (len(replystr)==1) then begin
        if asc(replystr)==HPAN_DC2 then begin
          if (FiscalDebugMode>2) then begin
            LogText(0,"DC2");
          end;
          replystr= ""; //sino entra en loop
          cnt= 0;
        end;
        if asc(replystr)==HPAN_DC4 then begin
          if (FiscalDebugMode>2) then begin
            LogText(0,USetStr(32931));
          end;
          replystr= ""; //sino entra en loop
          cnt= 0;
        end;
      end else begin
        res2 = OutComPortInteger(HPAN_ACK);
        NormalizeReply(replystr);
        NormalizeReply(replystr2);
        if (FiscalDebugMode>2) then begin
          LogText(0,USetStr(32932) & replystr);
          LogText(0,USetStr(32933) & replystr2);
        end;
        res = TestHASARSuccess(ArrayToStr(aEscSeq,aCount),replystr);
        goto LFIN;
      end;
      
    end;
    cnt= cnt + 1;
  end;
LFIN:;  
  HASARWrite2 = res;
  return;
end;

procedure GetHASARDate(string replystr,var Integer year,var Integer month,var Integer day)
BEGIN
  Integer i,l,what;
  string 1 nc;
  string 255 tstrY,tstrM,tstrD;
  Boolean getdatef;
  
  l = len(replystr);
  for (i=14;i<=15;i=i+1) begin
    nc = Mid(replystr,i,1);
    if ((asc(nc)>=asc("0")) and (asc(nc)<=asc("9"))) then begin
      tstrY = tstrY & nc;
    end;
  end;        
  for (i=16;i<=17;i=i+1) begin
    nc = Mid(replystr,i,1);
    if ((asc(nc)>=asc("0")) and (asc(nc)<=asc("9"))) then begin
      tstrM = tstrM & nc;
    end;
  end;
  for (i=18;i<=19;i=i+1) begin
    nc = Mid(replystr,i,1);
    if ((asc(nc)>=asc("0")) and (asc(nc)<=asc("9"))) then begin
      tstrD = tstrD & nc;
    end;
  end;          
  year = 2000 + StringToInt(tstrY);
  month = StringToInt(tstrM);
  day = StringToInt(tstrD);
  return;
end;

function Integer HASAROpen(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;

  if (FiscalDebugMode>2) then begin
    logtext(0,USetStr(32934) & LSPDr.Port);
  end;
  res = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);
  HASAROpen = res;
  return;
end;

procedure HASARClose()
begin
  if (FiscalDebugMode>2) then begin
    logtext(0,USetStr(32935));
  end;
  CloseComPort(0);
  return;
end;

function Integer HASARGetOnline(var Integer cmdnr)
begin
  Integer res;
  Array Integer aCtrlSeq;
  Integer aCount,noErr;
  String 255 replystr,replystr2;
  Integer cnt;

  res= -1;
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32936));
    LogText(0,USetStr(32937) & FiscalTimeOut);
  end;
  for (cnt=0;cnt<10;cnt=cnt+1) begin
    aCount= 0;
    Add_ASC(aCtrlSeq,aCount,HPAN_STX);
    Add_ASC(aCtrlSeq,aCount,AddCmdSeq(cmdnr));
    Add_ASC(aCtrlSeq,aCount,42);
    Add_ASC(aCtrlSeq,aCount,HPAN_ETX);
    res= HasarWrite2(cmdnr,aCtrlSeq,aCount,replystr,replystr2);
    if (res==0) then begin    
      cnt= 10;
    end;
  end;
   HASARGetOnline = res;
  return;
end;

function Integer CheckHASARClock(var Integer cmdnr,record IVVc IVr)
begin
  Integer res;
  Date td;
  Integer pY,pM,pD;
  Array Integer aCtrlSeq;
  Integer aCount,noErr;
  string 255 replystr,replystr2,msg;
  
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32938));
  end;
  td = CurrentDate;
  Add_ASC(aCtrlSeq,aCount,HPAN_STX);
  Add_ASC(aCtrlSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aCtrlSeq,aCount,89); // 59H
  Add_ASC(aCtrlSeq,aCount,HPAN_ETX);
  res = HASARWrite2(cmdnr,aCtrlSeq,aCount,replystr,replystr2);
  if (res==noErr) then begin
    GetHASARDate(replystr,pY,pM,pD);
    if ((GetYear(td)==pY) and (GetMonth(td)==pM) and (GetDay(td)==pD)) then begin
      res = noErr;
    end else begin
      msg = USetStr(12402);
      res = 1;
    end;
    td.year = pY;
    td.month = pM;
    td.day = pD;
    if (td==IVr.TransDate) then begin
      MessageBox(0,USetStr(32939));
    end else begin
      LogText(0,USetStr(32940));
      msg = USetStr(20852) & " " & IVr.TransDate & " " & USetStr(12403) & " " & td;  
      res = 1;
    end;
  end else begin
    LogText(0,USetStr(32941));
    res= 1;
  end;
LCheckHASARClock:;
  HASARDisplayErrorMsg(0,msg);
  CheckHASARClock = res;
  RETURN;
END;

function Integer HASAROpenFiscalReceipt(var Integer cmdnr,record IVVc IVr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2,tstr;
  array Integer aEscSeq;
  Integer aCount;
  string 1 c,InvKind,DocType;
  Integer i,cnt;
  
  tstr= IVr.CustCode;
  tstr= tstr & "-" & IVr.Addr0;
  ConvertStrtoFiscal2(tstr);
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,64); // 40H
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,Left(tstr,50));
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_CHR(aEscSeq,aCount,IVr.VATNr);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,IVr.CAE);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,IVr.OurContact);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,"000000");
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,"000000");
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  switch (IVr.InvType) begin //Tipo de Documento (B) = ND, (D) =  NC, (A) = FAC
    case 0 : DocType= "A"; 
    case 1:  DocType= "A";
    case 2:  DocType= "A";
    case 3:  DocType= "D";
    case 4:  DocType= "B";
  end;
  Add_CHR(aEscSeq,aCount,DocType);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,127);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,127)
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32942) & DocType & "-" & IVr.SerNr);
  end;
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  HASAROpenFiscalReceipt = res;
  return;
end;

function Integer HASARSetHeader(var Integer cmdnr, integer nl,string tstr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2;
  Array Integer aEscSeq;
  Integer aCount,nrLinea;

  if (FiscalDebugMode>0) then begin
    if (nl==0) then begin
      LogText(0,USetStr(32943));
    end else begin
      LogText(0,USetStr(32944) & nl);
    end;
  end;  
  nrLinea = 48 + nl;
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,93);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,nrLinea);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,mid(tstr,0,120));
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  HASARSetHeader = res;
  return;
end;

function Integer HASARSetTrailer(var Integer cmdnr,integer nl,string tstr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2;
  Array Integer aEscSeq;
  Integer aCount,nrLinea;

  if (FiscalDebugMode>0) then begin
    if (nl==0) then begin
      LogText(0,USetStr(32945));
    end else begin
      LogText(0,USetStr(32946) & nl);
    end;
  end;  
  nrLinea = 48 + nl;
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,94);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,nrLinea);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,mid(tstr,0,120));
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  HASARSetTrailer = res;
  return;
end;

function Integer HASARPrintLastItemDiscount(var Integer cmdnr,record IVVc IVr,row IVVc IVrw)
begin
  Integer res;
  String 255 replystr,replystr2,tstr;
  String 60 spec;
  String 20 artcode;
  Array Integer aEscSeq;
  Integer aCount;
  val Discount,t;
  
  if (FiscalDebugMode>0) then begin
    logtext(0,USetStr(32947));
  end;
  Discount = IVrw.Quant * IVrw.Price * IVrw.vRebate / 100;
  if  (NonBlank(IVrw.Spec)) then begin
    spec =  mid(IVrw.Spec,0,50); 
  end else begin
    spec =  ""; 
  end;
  ConvertStrtoFiscal2(spec);
  GetVATproc(IVrw.VATCode,IVr.InclVAT,t);
  if (t==blankval) then begin
    GetVATproc(IVrw.VATCode,0,t);
  end;
  if (t==blankval) then begin
    t = 0;
  end;
  artcode= mid(IVrw.ArtCode,0,20);
  ConvertStrtoFiscal(artcode);
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,66); //42H
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,spec);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_VAL(aEscSeq,aCount,1);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_VAL3(aEscSeq,aCount,Discount);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_VAL(aEscSeq,aCount,t);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_CHR(aEscSeq,aCount,"m");
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_CHR(aEscSeq,aCount,artcode);
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
LHASARPrintLastItemDiscount:;
  HASARPrintLastItemDiscount = res;
  return;
end;

function Integer HASARPrintFiscalText(var Integer cmdnr,string tstr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2;
  Array Integer aEscSeq;
  Integer aCount;
  
  if (FiscalDebugMode>0) then begin
    logtext(0,USetStr(32948));
  end;
  ConvertStrtoFiscal2(tstr);
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,65);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,mid(tstr,0,50));
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,"");
  Add_ASC(aEscSeq,aCount,HPAN_ETX);  
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  HASARPrintFiscalText = res;
  return;
end;

function Integer HASARPrintItemLine(var Integer cmdnr,integer rownr,string spec,val quant,val price,val itbms,string signo,string artcode)
begin
  array Integer aEscSeq;
  integer aCount,res;
  string 255 replystr,replystr2;

  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32949) & rownr);
  end;
  ConvertStrtoFiscal(artcode);  
  ConvertStrtoFiscal2(spec);  
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,66); //42H
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_STR(aEscSeq,aCount,spec);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_VAL3(aEscSeq,aCount,quant);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_VAL3(aEscSeq,aCount,price);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_VAL(aEscSeq,aCount,itbms);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_CHR(aEscSeq,aCount,signo);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_CHR(aEscSeq,aCount,artcode);
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  HASARPrintItemLine= res;
  return;
end;

function Integer HASARTotalTender(var Integer cmdnr,record IVVc IVr)
begin
  string 60 tstr;
  string 255 replystr,replystr2;
  array Integer aEscSeq;
  Integer aCount;
  val discount;
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;
  integer res;

  BlockLoad(LMb);
  MCr.Code = LMb.LocalMachineCode;
  if (ReadFirstMain(MCr,1,true)) then begin
    if (FiscalDebugMode>0) then begin
      LogText(0,USetStr(32950));
    end;
    if (MCr.GlobalDiscount==1) then begin
      discount= GetGlobalDiscount(IVr);
    end;
    if (discount>0) then begin
      Add_ASC(aEscSeq,aCount,HPAN_STX);
      Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
      Add_ASC(aEscSeq,aCount,68); // 44H
      Add_ASC(aEscSeq,aCount,HPAN_FS);
      if (MCr.PrintDiscount==1) then begin
        tstr= "" & discount & "%";
      end else begin
        tstr= "";
      end;
      Add_CHR(aEscSeq,aCount,tstr);
      Add_ASC(aEscSeq,aCount,HPAN_FS);
      Add_VAL3(aEscSeq,aCount,discount);
      Add_ASC(aEscSeq,aCount,HPAN_FS);
      Add_ASC(aEscSeq,aCount,asc("D")); //D- Global Discount
      Add_ASC(aEscSeq,aCount,HPAN_FS);
      Add_ASC(aEscSeq,aCount,asc("0"));
      Add_ASC(aEscSeq,aCount,HPAN_ETX);
      res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
    end;
  end;
LHASARTotalTender:;
  HASARTotalTender = res;
  return;
end;

function Integer HASARPrintInvoiceLines(var Integer cmdnr,record IVVc IVr)
begin
  record CashPrintBlock CPb;
  record INVc INr;
  record UnitVc Unitr;
  row IVVc IVrw;
  string 255 tstr;
  String 10 signo;
  String 20 artcode;
  String 60 spec;
  val downpay,t,quant,price,itbms;
  val discount;
  integer lastitemrow;
  integer res,noErr,res2;
  integer i,rwcnt;
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;
  integer ret;
 
  BlockLoad(LMb);
  BlockLoad(CPb);
  MCr.Code = LMb.LocalMachineCode;
  if (ReadFirstMain(MCr,1,true)) then begin
    
  lastitemrow= GetLastItemRow(IVr);
  rwcnt =  MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    
    switch (IVrw.stp) begin
      case kInvoiceRowTypeNormal: 
        downpay = DownPaymentAmount(IVr,IVrw.OrdRow);
        if (downpay!=0) then begin
          IVrw.Sum = IVrw.Sum + downpay;
          IVrw.Price = IVrw.Sum/IVrw.Quant;
        end;
      case 3:
      case 11:
      case 5:
        if (IVrw.Sum<0) then begin 
          goto LSKIPROW;
        end;
        IVrw.Price = IVrw.Sum/IVrw.Quant;
      otherwise 
        goto LSKIPROW;
    end;
    
    if nonblank(IVrw.ArtCode) then begin
      INr.Code= IVrw.ArtCode;
      if not ReadFirstMain(INr,1,true) then begin
        LogText(0,USetStr(32951) & IVrw.ArtCode);
        goto LSKIPROW;
      end;
      tstr= "";
      if (MCr.PrintAltCode==1) then begin
        if nonblank(INr.Unittext) then begin
          Unitr.Code= INr.Unittext;
          if ReadFirstMain(Unitr,1,true) then begin
            tstr= USetStr(32952) & mid(Unitr.Comment,0,20);
          end;
        end;
      end;
      if (MCr.PrintBarCode==1) then begin
        if nonblank(INr.BarCode) then begin
          tstr= tstr & USetStr(32953) & INr.BarCode;
        end;
      end;
      if nonblank(tstr) then begin
        if (HASARPrintFiscalText(cmdnr,tstr)!=noErr) then begin 
          LogText(0,USetStr(32954) & i+1);
          MessageBox(0,USetStr(32954) & i+1);
          res= -1;
          goto LHASARPrintInvoiceLines;
        end;
        tstr= "";
      end;
      if (MCr.PrintSerialInfo==1) then begin
        if nonblank(IVrw.SerialNr) then begin
          tstr= USetStr(32955) & IVrw.SerialNr;
        end;
        if nonblank(tstr) then begin
          if (HASARPrintFiscalText(cmdnr,tstr)!=noErr) then begin
            LogText(0,USetStr(32955) & i+1);
            MessageBox(0,USetStr(32955) & i+1);
            res= -1;
            goto LHASARPrintInvoiceLines;
          end;
          tstr= "";
        end;
      end;
      quant = IVrw.Quant;
      price = IVrw.Price;
      if (quant<0) then begin
        t = -quant;
        signo = "m";   
      end else begin
        signo = "M";
      end;
      if (price<0) then begin
        price = -price;
        signo = "m";   
      end else begin
        signo = "M";
      end;
      GetVATproc(IVrw.VATCode,IVr.InclVAT,itbms);
      if (itbms==blankval) then begin
        GetVATproc(IVrw.VATCode,0,itbms);
      end;
      if (itbms==blankval) then begin
        itbms = 0;
      end;
      artcode= mid(IVrw.ArtCode,0,20);
      if (NonBlank(IVrw.Spec)) then begin
        spec =  mid(IVrw.Spec,0,50);
      end else begin
        spec =  ""; 
      end;      
      if (HASARPrintItemLine(cmdnr,i+1,spec,quant,price,itbms,signo,artcode)!=noErr) then begin
        LogText(0,USetStr(32957) & i+1);
        MessageBox(0,USetStr(32957) & i+1);
        res= -1;
        goto LHASARPrintInvoiceLines;
      end;
      if (MCr.GlobalDiscount==0) then begin
        if (IVrw.vRebate!=BlankVal) then begin
          if (HASARPrintLastItemDiscount(cmdnr,IVr,IVrw)!=noErr) then begin
            LogText(0,USetStr(32958) & i+1);
            MessageBox(0,USetStr(32958) & i+1);
            res= -1;
            goto LHASARPrintInvoiceLines;
          end;
        end;
      end;
    end else begin
      if (MCr.WithExtraText==1) then begin
        if (IVrw.stp==1) and NonBlank(IVrw.Spec) and (i<lastitemrow) then begin
          tstr= IVrw.Spec;
          if (HASARPrintFiscalText(cmdnr,tstr)!=noErr) then begin
            LogText(0,USetStr(32959) & i+1);
            MessageBox(0,USetStr(32959) & i+1);
            res= -1;
            goto LHASARPrintInvoiceLines;
          end;
        end else begin
          goto LSKIPROW;
        end;
      end;
    end;
LSKIPROW:;
  end;
  end;
LHASARPrintInvoiceLines:;  
  HASARPrintInvoiceLines = res;
  return;
end;

function Integer HASARSubTotal(var Integer cmdnr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2;
  Array Integer aEscSeq;
  Integer aCount;

  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32960));
  end;
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,67); // 43H
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,HPAN_ETX);  
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  HASARSubTotal = res;
  return;
end;

function Integer HASARCloseFiscalReceipt(var Integer cmdnr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2;
  Array Integer aEscSeq;
  Integer aCount;
  
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32961));
  end;
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,69); // 45H
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  HASARCloseFiscalReceipt = res;
  return;
end;

function Integer HASARStatusExtra(var Integer cmdnr,integer invtype,var string OfficalInvNr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2;
  String 255 InvNr;
  Array Integer aEscSeq;
  Integer aCount;  
  
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32962));
  end;
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,42);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  switch (invtype) begin
    case 0: GetHASARInvoiceNumber(replystr,InvNr);
    case 1: GetHASARInvoiceNumber(replystr,InvNr);
    case 2: GetHASARInvoiceNumber(replystr,InvNr);
    case 3: GetHASARNCreditNumber(replystr,InvNr);
    case 4: GetHASARNDebitNumber(replystr,InvNr); 
  end;
  if (FiscalDebugMode>1) then begin
    LogText(0,USetStr(32963));
  end;
  OfficalInvNr = InvNr;
  HASARStatusExtra = res;
  return;
end;

function Integer HASARGetSerial(var Integer cmdnr,var string OfficalInvNr)
begin
  Integer res,noErr;
  String 255 replystr,replystr2;
  string 255 InvNr;
  Array Integer aEscSeq;
  Integer aCount;  

  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,128);
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32964));
  end;
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  GetHASARPrinterNumber(replystr,InvNr);
  if (FiscalDebugMode>1) then begin
    LogText(0,USetStr(32965) & InvNr);
  end;
  OfficalInvNr = InvNr;
  HASARGetSerial = res;
  return;
end;

procedure HasarCancel(var Integer cmdnr)
begin
  String 255 replystr,replystr2;
  Integer res,noErr;
  Array Integer aEscSeq;
  Integer aCount;
  
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,152);
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32966));      
  end;
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
  MessageBox(0,USetStr(32967));
  return;
end;

function Integer SetCustExtraData(var Integer cmdnr,record IVVc IVr,integer posLine)
begin
  String 255 replystr,replystr2;
  Integer res,noErr;
  string 255 tstr;
  Array Integer aEscSeq;
  Integer aCount,nrLinea; 

  res = 0; 
  nrLinea = 48 + posLine;
  switch (posLine) begin 
    case 1:  
      if nonblank(IVr.Addr1) then begin
        tstr = USetStr(32968) &  IVr.Addr1;
      end;
    case 2:  tstr = IVr.Addr2;
    case 3:  tstr = IVr.Addr3;
    case 4:  tstr = IVr.InvAddr3; 
  end;
  if (nonblank(tstr)) then begin
    if (FiscalDebugMode>0) then begin
      logtext(0,USetStr(32969) & posLine);
    end;
    aCount= 0;
    ConvertStrtoFiscal2(tstr);
    Add_ASC(aEscSeq,aCount,HPAN_STX);
    Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
    Add_ASC(aEscSeq,aCount,156);
    Add_ASC(aEscSeq,aCount,HPAN_FS);
    Add_ASC(aEscSeq,aCount,nrLinea);
    Add_ASC(aEscSeq,aCount,HPAN_FS);
    Add_STR(aEscSeq,aCount,mid(tstr,0,50));
    Add_ASC(aEscSeq,aCount,HPAN_ETX);
    res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
    if (FiscalDebugMode>1) then begin
      logtext(0,USetStr(32969) & res);
    end;
  end;
  SetCustExtraData = res;
  return;
end;

global 
updating procedure PrintHASARPL23FPANReceipt(record IVVc aIVr,record LSerialPortDeviceVc LSPDr)
begin
  record IVVc IVr;
  record IVVc oldIVr;
  integer noErr,res;
  string 60 InvNrOfficial,PrinterSerie;
  string 50 tstr50;
  Integer cmdnr, i;
  boolean cancelf;
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;

  BlockLoad(LMb);
  
  res = HASAROpen(LSPDr);
  if (res!=1) then begin
    goto LPrintHASARPANReceipt;
  end;
  
  HASARGetOnline(cmdnr);

  MCr.Code = LMb.LocalMachineCode;
  if !(ReadFirstMain(MCr,1,true)) then begin
    goto LPrintHASARPANReceipt;
  end;
  
  if (MCr.CheckClock==1) then begin
    if (CheckHASARClock(cmdnr,IVr)!=noErr) then begin goto LPrintHASARPANReceipt; end;
  end;
  
  if (MCr.AddHeader==1) then begin
    if (HASARSetHeader(cmdnr,0,"")!=noErr) then begin goto LPrintHASARPANReceipt; end;
    PrintInvoiceHeader(IVr,tstr50,1);
    if nonblank(tstr50) then begin
      if (HASARSetHeader(cmdnr,1,tstr50)!=noErr) then begin goto LPrintHASARPANReceipt; end;
    end;
  end;

  if (MCr.AddFooter==1) then begin
    if (HASARSetTrailer(cmdnr,0,"")!=noErr) then begin goto LPrintHASARPANReceipt; end;
    if (HASARSetTrailer(cmdnr,1,USetStr(32970) & IVr.SerNr)!=noErr) then begin goto LPrintHASARPANReceipt; end;
    if (HASARSetTrailer(cmdnr,2,IVr.InvComment)!=noErr) then begin goto LPrintHASARPANReceipt; end;
  end;
  
  for (i=1;i<5;i=i+1) begin
    if(SetCustExtraData(cmdnr,IVr,i)!=noErr) then begin goto LPrintHASARPANReceipt; end;
  end;
  
  if (HASAROpenFiscalReceipt(cmdnr,IVr)!=noErr) then begin
    goto LPrintHASARPANReceipt;
  end else begin
    if (HASARPrintInvoiceLines(cmdnr,IVr)!=noErr) then begin 
      cancelf= true;
    end;
    if (HASARTotalTender(cmdnr,IVr)!=noErr) then begin
      cancelf= true;
    end;
    if not cancelf then begin 
      if (HASARSubTotal(cmdnr)!=noErr) then begin 
        cancelf= true;
      end;
    end;
    if not cancelf then begin 
      if (HASARCloseFiscalReceipt(cmdnr)!=noErr) then begin 
        cancelf= true;
      end;
    end;
  end;
  if (cancelf) then begin
    HasarCancel(cmdnr);
  end;
  HASARStatusExtra(cmdnr,IVr.InvType,InvNrOfficial);
  HASARGetSerial(cmdnr,PrinterSerie);

  if nonblank(InvNrOfficial) and nonblank(PrinterSerie) then begin
    IVr.SerNr = aIVr.SerNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      RecordCopy(oldIVr,IVr);
      IVr.OfficialSerNr = trim(InvNrOfficial);
      IVr.OurContact = trim(PrinterSerie);
      IVr.Prntdf = 1;
      if (cancelf) then begin
        IVr.Invalid= 1;
      end;
      if (RecordUpdate(oldIVr,IVr,false)==0) then begin
      end;
    end;
  end;

LPrintHASARPANReceipt:;
  HasarClose;
  return;
end;

global
procedure HasarPL23FPANDailyReport(record LSerialPortDeviceVc LSPDr)
begin
  String 255 replystr,replystr2;
  Integer cmdnr,res;
  array Integer aEscSeq;
  Integer aCount;
  
  res = HASAROpen(LSPDr);
  if (res!=1) then begin
    goto LHasarPANDailyReport;
  end;
  res= HASARGetOnline(cmdnr);
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,57);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,asc("X"));
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32972));      
  end;
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
LHasarPANDailyReport:;  
  HASARClose;
  return;
end;

global
procedure HasarPL23FPANMonthlyReport(record LSerialPortDeviceVc LSPDr)
begin
  Integer cmdnr,res;
  String 255 replystr,replystr2;
  array Integer aEscSeq;
  Integer aCount;
 
  res = HASAROpen(LSPDr);
  if (res!=1) then begin
    goto LHasarPANMonthlyReport;
  end;
  HASARGetOnline(cmdnr);
  Add_ASC(aEscSeq,aCount,HPAN_STX);
  Add_ASC(aEscSeq,aCount,AddCmdSeq(cmdnr));
  Add_ASC(aEscSeq,aCount,57);
  Add_ASC(aEscSeq,aCount,HPAN_FS);
  Add_ASC(aEscSeq,aCount,asc("Z"));
  Add_ASC(aEscSeq,aCount,HPAN_ETX);
  if (FiscalDebugMode>0) then begin
    LogText(0,USetStr(32973));
  end;
  res = HASARWrite2(cmdnr,aEscSeq,aCount,replystr,replystr2);
LHasarPANMonthlyReport:;  
  HASARClose;
  return;
end;

global
procedure HASARPL23FPANReset(record LSerialPortDeviceVc LSPDr)
begin
  Integer res,cmdnr;
  
  res = HASAROpen(LSPDr);
  if (res!=1) then begin
    goto LHASARPANReset;
  end;
  HasarCancel(cmdnr);
LHASARPANReset:;  
  HASARClose;
  return;
end;

