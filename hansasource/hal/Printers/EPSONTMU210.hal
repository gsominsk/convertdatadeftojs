external function string 255 GenerateSerialPortDeviceCommand(string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure M4ILMidstr(string,var string,Integer,Integer);

procedure PutSpecChar(var string tstr,var string res,Integer i,string ch)
BEGIN
  string 255 tstr2;
  
  res = Left(tstr,i);  
  res = res & ch;
  tstr2 = Right(tstr,len(tstr)-i-1);
  res = res & tstr2;
  tstr = res;
  RETURN;
END;

global
procedure ConvertLatvianChars(string instr,var string res)
BEGIN
  string 255 tstr,tstr2;
  string 1 ch;
  Integer i;
  
  tstr = instr;
  res = instr;
  for (i=0;i<len(instr);i=i+1) begin
    ch = Mid(instr,i,1);
    if (ch==chr(194)) then begin
      PutSpecChar(tstr,res,i,chr(181));   
      goto LFOR; 
    end;
    if (ch==chr(226)) then begin
      if ((asc(ch)!=97) and (asc(ch)!=65)) then begin
        PutSpecChar(tstr,res,i,chr(198));    
        goto LFOR; 
      end;        
    end;
    if (ch==chr(232)) then begin
      PutSpecChar(tstr,res,i,chr(210));    
      goto LFOR; 
    end;
    if (ch==chr(200)) then begin
      PutSpecChar(tstr,res,i,chr(211));    
      goto LFOR; 
    end;
    if (ch==chr(199)) then begin
      PutSpecChar(tstr,res,i,chr(240));    
      goto LFOR; 
    end;
    if (ch==chr(231)) then begin
      PutSpecChar(tstr,res,i,chr(241));    
      goto LFOR; 
    end;
    if (ch==chr(204)) then begin
      PutSpecChar(tstr,res,i,chr(214));    
      goto LFOR; 
    end;
    if (ch==chr(236)) then begin
      PutSpecChar(tstr,res,i,chr(242));    
      goto LFOR; 
    end;
    if (ch==chr(206)) then begin
      PutSpecChar(tstr,res,i,chr(215));    
      goto LFOR; 
    end;
    if (ch==chr(238)) then begin
      PutSpecChar(tstr,res,i,chr(216));    
      goto LFOR; 
    end;
    if (ch==chr(205)) then begin
      PutSpecChar(tstr,res,i,chr(244));    
      goto LFOR; 
    end;
    if (ch==chr(237)) then begin
      PutSpecChar(tstr,res,i,chr(243));    
      goto LFOR; 
    end;
    if (ch==chr(207)) then begin
      PutSpecChar(tstr,res,i,chr(246));    
      goto LFOR; 
    end;
    if (ch==chr(239)) then begin
      PutSpecChar(tstr,res,i,chr(245));    
      goto LFOR; 
    end;
    if (ch==chr(210)) then begin
      PutSpecChar(tstr,res,i,chr(252));    
      goto LFOR; 
    end;
    if (ch==chr(242)) then begin
      PutSpecChar(tstr,res,i,chr(183));    
      goto LFOR; 
    end;
    if (ch==chr(208)) then begin
      PutSpecChar(tstr,res,i,chr(208));    
      goto LFOR; 
    end;
    if (ch==chr(240)) then begin
      PutSpecChar(tstr,res,i,chr(253));    
      goto LFOR; 
    end;
    if (ch==chr(219)) then begin
      PutSpecChar(tstr,res,i,chr(222));    
      goto LFOR; 
    end;
    if (ch==chr(251)) then begin
      PutSpecChar(tstr,res,i,chr(221));    
      goto LFOR; 
    end;
    if (ch==chr(222)) then begin
      PutSpecChar(tstr,res,i,chr(248));    
      goto LFOR; 
    end;
    if (ch==chr(254)) then begin
      PutSpecChar(tstr,res,i,chr(247));    
      goto LFOR; 
    end;
LFOR:;
  end;
  RETURN;
END;

function
Boolean CheckBarTabRecord(record RestAccVc RestAccr)
BEGIN
  Boolean res;
  
  res = true;
  if (RestAccr.Closed!=0) then begin
    res = false;
  end;  
  CheckBarTabRecord = res;
  RETURN;
END;

function Integer OpenEPSONTMU210(record LSerialPortDeviceVc LSPDr)
BEGIN
  Integer res;
  string 255 port;
  
  port = LSPDr.Port;
  if (blank(port)) then begin
    port = "LPT1";
  end;
  res = 1;
  res = OpenComPort(0,port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);
//  res = OpenComPort(0,port,SPb.BaudRate,SPb.Parity,SPb.ByteSize,SPb.StopBits,kFlowControlDefault);
/*baudrate = 9600
  patiry = -1(no)
  bytesize = 8
  stopbits = 0(1 stopbit)*/  
  OpenEPSONTMU210 = res;
  RETURN;
END;

procedure CloseEPSONTMU210()
BEGIN
  Integer res;

  res = CloseComPort(0);
  RETURN;
END;

procedure COMSendEPSONTMU210(string sendstr)
BEGIN
  Integer res;

  res = OutComPort(0,sendstr);  
  RETURN;
END;

procedure SelectPrinModeEPSONTMU210()
BEGIN
  string 20 PrintMode;

  PrintMode  = chr(27) & chr(33) & chr(49);/*ESC ! 0*/
  COMSendEPSONTMU210(PrintMode);  
  RETURN;
END;

procedure SelectPrinerOnOffEPSONTMU210(Boolean onf)
BEGIN
  string 20 PrinterOn,PrinterOff;

  PrinterOn = chr(27) & chr(61) & chr(1); /*ESC = 1*/
  PrinterOff = chr(27) & chr(61) & chr(2); /*ESC = 2*/

  if (onf) then begin
    COMSendEPSONTMU210(PrinterOn);  
  end else begin
    COMSendEPSONTMU210(PrinterOff);  
  end;
  RETURN;
END;

procedure SetCharSetEPSONTMU210()
BEGIN
  string 20 CharSet;

  CharSet = chr(27) & chr(82) & chr(9);/*ESC R 9 - Norway*/  
  COMSendEPSONTMU210(CharSet);  
  RETURN;
END;

procedure InitPrinterEPSONTMU210()
BEGIN
  string 20 InitPrinter;

  InitPrinter = chr(27) & chr(64);/*ESC @*/
  
  COMSendEPSONTMU210(InitPrinter);  
  COMSendEPSONTMU210(chr(27)&chr(69)&chr(49));
//  COMSendEPSONTMU210(chr(27)&chr(45)&chr(49));  /* UNDERLINED */
//  COMSendEPSONTMU210(chr(27)&chr(71)&chr(49));  /* DOUBLE-STRIKED */
  RETURN;
END;

procedure SetAlign(Integer aligned)
BEGIN
  string 20 Align;
  
  Align = chr(27) & chr(97) & chr(asc(aligned));/*0 left,1 center,2 right*/
  COMSendEPSONTMU210(Align);  
  RETURN;
END;

procedure SendStringEPSONTMU210(string instr1,string instr2,string padchar)
BEGIN
  string 255 sendstr,tstr;
  string 1 ENDL;
  Integer padlen;
  
  ENDL = chr(10);
  padlen = 40-len(instr2);
  if (padlen<0) then begin
    padlen = 0;
  end;
  M4PadString(instr1,padlen,padchar,false,sendstr);    
  sendstr = sendstr & instr2;
  COMSendEPSONTMU210(sendstr);  
  COMSendEPSONTMU210(ENDL);  
  RETURN;
END;

procedure FormFeedEPSONTMU210()
BEGIN
  string 20 ENDL;
  
  ENDL = chr(10);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  COMSendEPSONTMU210(ENDL);
  RETURN;
END;

procedure CutPaperEPSONTMU210()
BEGIN
  string 20 CutPaper;

  CutPaper = chr(27) & chr(105);/*ESC i*/
  COMSendEPSONTMU210(CutPaper);  
  RETURN;
END;

global
procedure BarPrintEPSONTMU210(Integer wn,record RestAccVc RestAccr)
BEGIN
  row RestAccVc RestAccrw;
  Integer normalmode;
  Integer i,rwcnt,frompos;
  record SysFormatBlock SysFormatRec;
  string 255 tstr;
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;

  BlockLoad(LMb);  
  BlockLoad(SysFormatRec);
  normalmode = 0;
  if ((WindowState(wn)==normalmode) and (windowsMode==1) and (CheckBarTabRecord(RestAccr))) then begin
    if (FindLocalSerialPortDevice(kSerialPortDeviceClassReceiptPrinter,1,LMb.LocalMachineCode,LSPDr)==false) then begin  
      LSPDr.BaudRate = 9600; LSPDr.Parity = -1; LSPDr.ByteSize = 8; LSPDr.StopBits = 0; LSPDr.FlowControl = kFlowControlDefault;
    end;
    if (OpenEPSONTMU210(LSPDr)!=0) then begin
      SelectPrinerOnOffEPSONTMU210(true);
      SelectPrinModeEPSONTMU210;
      InitPrinterEPSONTMU210;
      SetCharSetEPSONTMU210;
      SetAlign(0);
      SendStringEPSONTMU210("=","","=");
      SetAlign(1);
      SendStringEPSONTMU210("",USetStr(10230),"");
      SetAlign(0);
      SendStringEPSONTMU210("=","","=");
      SendStringEPSONTMU210(USetStr(2584),RestAccr.SerNr," ");
      SendStringEPSONTMU210(USetStr(9835),RestAccr.CustCode," ");
      SendStringEPSONTMU210(USetStr(9833),RestAccr.Cashier," ");
      SendStringEPSONTMU210("","","");
      
      frompos = WindowActiveRow(wn);
      if (frompos<0) then begin
        frompos = 0;
      end;
      rwcnt = MatRowCnt(RestAccr);      
      for (i=frompos;i<rwcnt;i=i+1) begin        
        MatRowGet(RestAccr,i,RestAccrw);
        switch (RestAccrw.stp) begin
//jjbartab        
          case 1:
            if (nonblank(RestAccrw.Spec)) then begin
              SendStringEPSONTMU210("   " & RestAccrw.Spec,ValToString(RestAccrw.Quant,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0)," ");
            end;
          case kInvoiceRowTypeVoid:
            if (nonblank(RestAccrw.Spec)) then begin
              SendStringEPSONTMU210("   " & RestAccrw.Spec,ValToString(-RestAccrw.Quant,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0)," ");
            end;
        end;
      end;  
      SendStringEPSONTMU210("","","");

      frompos = 0;
      M4ILMidstr(RestAccr.Comment,tstr,frompos,30);
      SendStringEPSONTMU210(USetStr(9892),tstr," ");
      frompos = frompos + 30;
      M4ILMidstr(RestAccr.Comment,tstr,frompos,30);
      if (nonblank(tstr)) then begin
        SendStringEPSONTMU210("",tstr," ");
      end;
      frompos = frompos + 30;
      M4ILMidstr(RestAccr.Comment,tstr,frompos,30);
      if (nonblank(tstr)) then begin
        SendStringEPSONTMU210("",tstr," ");
      end;
      frompos = frompos + 30;
      M4ILMidstr(RestAccr.Comment,tstr,frompos,30);
      if (nonblank(tstr)) then begin
        SendStringEPSONTMU210("",tstr," ");
      end;
      
      SendStringEPSONTMU210("=","","=");
      FormFeedEPSONTMU210;
      CutPaperEPSONTMU210;
      SelectPrinerOnOffEPSONTMU210(false);      
      CloseEPSONTMU210;
    end;
  end;  
  RETURN;
END;

global
procedure OpenCashDrawerEpson()
BEGIN
  String 20 CashBox;
  Integer Error;
  string 20 KickOff;
  record SerPrintBlock SPb;
  string 255 port;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);

  if (FindLocalSerialPortDevice(kSerialPortDeviceClassDrawer,1,LMb.LocalMachineCode,LSPDr)==false) then begin  
    LSPDr.BaudRate = 9600; LSPDr.Parity = -1; LSPDr.ByteSize = 8; LSPDr.StopBits = 0; LSPDr.FlowControl = kFlowControlDefault;
  end else begin
    KickOff = GenerateSerialPortDeviceCommand(LSPDr.EscSeqBefore);
  end;
  if (blank(KickOff)) then begin
    KickOff = chr(27) & chr(112) & chr(0) & chr(25) & chr(250);/*ESC p signal length*/
  end;
  if (blank(CashBox)) then begin
    CashBox = chr(27) & chr(112) & chr(0);
  end;
  port = LSPDr.Port;
  if (blank(port)) then begin
    port = "LPT1";
  end;
  Error = OpenComPort(0,port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);
  if (Error!=0) then begin
//  Error = OpenComPort(1,port,SPb.BaudRate,SPb.Parity,SPb.ByteSize,SPb.StopBits,kFlowControlDefault);
    Error = OutComPort(1,KickOff);
  end;
  Error = CloseComPort(1);
  RETURN;
END;
