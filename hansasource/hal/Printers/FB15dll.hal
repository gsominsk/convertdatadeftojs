external function val AbsoluteVal(val);
external procedure LogAreaToFile(string,area);
external function val CalculateDiscountPercentage(val,val,val);
external procedure ReverseString(string,var string);
external procedure NewLineExport();
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure ExtractObj(string,var Integer,var string);
external procedure GetVATdouble(string,var val,var val,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val ValFromString(string,string,string);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function string 255 NumToHex(string);

function Integer FindStrPosition(string tstr,string decsep)
begin
  Integer res;
  Integer i,slen;
  
  slen = len(tstr);
  for (i=slen;i>=0;i=i-1) begin
    if (Mid(tstr,i,1)==decsep) then begin
       res = i;
       goto LFindStrPosition;
    end;
  end;
LFindStrPosition:;  
  FindStrPosition = res;
  return;  
end;

function Integer HexToInt(string instr)
begin
  Integer res;
  string 16 hexs;
  Integer pos,slen,i,t;

  res = 0;
  slen = len(instr);
  hexs = "0123456789ABCDEF";
  for (i=slen;i>0;i=i-1) begin
    pos = FindStrPosition(hexs,Mid(instr,i-1,1));
    res = res + pos*Power(16,(slen-i));
  end; 
  HexToInt = res; 
  return;  
end;

function Integer CheckFB15Clock(Integer Printer)
begin
  Integer res,noErr;
  string 255 response; 
  Date td; 
  Integer pY,pM,pD;
  
//<COMMAND>=<0x4F><FS><Õ5Õ><FS>

  td = CurrentDate;
  res = FiscalPrinterGetInfo(Printer,5,response);

  if (res!=noErr) then begin
    if (res>=12400) then begin
      MessageBox(0,USetStr(res));
    end else begin
      MessageBox(0,"error " & USetStr(res));
    end;
    goto LCheckFB15Clock;
  end;

  pY = StringToInt(Left(response,4));
  pM = StringToInt(Mid(response,5,2));
  pD = StringToInt(Mid(response,8,2));
    
  if ((td.year==pY) and (td.month==pM) and (td.day==pD)) then begin
     res = noErr;
  end else begin
     MessageBox(0,USetStr(12402));
     MessageBox(0,USetStr(12403) & pY & pM & pD);
     MessageBox(0,USetStr(12404) & GetYear(td) & GetMonth(td) & GetDay(td));
     res = 12402;
  end;
LCheckFB15Clock:;
  CheckFB15Clock = res;
  return;
end;

function Integer LoadFB15VATRate(Integer Printer,string vatrate,var val vr)
begin
  INteger res,noErr,pos;
  string 255 response; 

  res = FiscalPrinterGetInfo(Printer,StringToInt(vatrate),response);
  vr = ValFromString(Right(response,len(response)-1),".","");
  LoadFB15VATRate = res;
  return;
end;

function Integer LoadFB15VATRates(Integer Printer,vector val vatrates)
begin
  Integer res;
  val vr;
  
  res = LoadFB15VATRate(Printer,"40",vr);
  if (res!=0) then begin
    MessageBox(0,USetStr(res));
    goto LLoadFB15VATRates;
  end;
  vatrates[0] = vr;

  res = LoadFB15VATRate(Printer,"41",vr);
  if (res!=0) then begin
    MessageBox(0,USetStr(res));
    goto LLoadFB15VATRates;
  end;

  vatrates[1] = vr;
  res = LoadFB15VATRate(Printer,"42",vr);
  if (res!=0) then begin
    MessageBox(0,USetStr(res));
    goto LLoadFB15VATRates;
  end;

  vatrates[2] = vr;
  res = LoadFB15VATRate(Printer,"43",vr);
  if (res!=0) then begin
    MessageBox(0,USetStr(res));
    goto LLoadFB15VATRates;
  end;

  vatrates[3] = vr;
  res = LoadFB15VATRate(Printer,"44",vr);
  if (res!=0) then begin
    MessageBox(0,USetStr(res));
    goto LLoadFB15VATRates;
  end;

  vatrates[4] = vr;
  res = LoadFB15VATRate(Printer,"45",vr);
  if (res!=0) then begin
    MessageBox(0,USetStr(res));
    goto LLoadFB15VATRates;
  end;

  vatrates[5] = vr;   
LLoadFB15VATRates:;
  LoadFB15VATRates = res;
  return;
end;

function string 255 GetFB15VATCode(Integer InclVAT,string vatcode,vector val vatrates)
begin
  string 255 res;
  val vatprc,tax1;

  GetVATdouble(vatcode,vatprc,tax1,0);

  if (vatprc==vatrates[0]) then begin 
    res = "0"; 
    goto LGetFB15VATCode;
  end;
  if (vatprc==vatrates[1]) then begin 
    res = "1"; 
    goto LGetFB15VATCode;
  end;
  if (vatprc==vatrates[2]) then begin 
    res = "2"; 
    goto LGetFB15VATCode;
  end;
  if (vatprc==vatrates[3]) then begin 
    res = "3"; 
    goto LGetFB15VATCode;
  end;
  if (vatprc==vatrates[4]) then begin 
    res = "4"; 
    goto LGetFB15VATCode;
  end;
  if (vatprc==vatrates[5]) then begin 
    res = "5"; 
    goto LGetFB15VATCode;
  end;
LGetFB15VATCode:;
  GetFB15VATCode = res;
  return;
end;

function Integer ItemDiscountAddition_IVVc(Integer Printer,record IVVc IVr,row IVVc IVrw)
begin
  Integer res,noErr;
  
  res = FiscalPrinterItemDiscountAddition(Printer,1,-IVrw.vRebate);
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;

  ItemDiscountAddition_IVVc = res;
  return;
end;

function Integer PrintItemRow_IVVc(Integer Printer,record IVVc IVr,row IVVc IVrw,vector val vatrates)
begin
  Integer res,noErr;
  string 255 unit,vatcode;
  
  unit = IVrw.UnitCode;
  if (blank(unit)) then begin
    unit = "PCS";
  end;

  vatcode = GetFB15VATCode(IVr.InclVAT,IVrw.VATCode,vatrates);


  res = FiscalPrinterPrintItemLine(Printer,Left(IVrw.Spec,29),IVrw.Quant,IVrw.Price,StringToInt(vatcode),Left(unit,4));
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;

  if (res==noErr) then begin
    if (IVrw.vRebate!=0) then begin
      res = ItemDiscountAddition_IVVc(Printer,IVr,IVrw);
    end;
  end;
  PrintItemRow_IVVc = res;
  return;
end;

function Integer PrintCommentLine_IVVc(Integer Printer,record IVVc IVr,row IVVc IVrw)
begin
  INteger res,noErr;
  
  res = FiscalPrinterPrintCommentLine(Printer,IVrw.Spec,HexToInt("0x41"));
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;
  PrintCommentLine_IVVc = res;
  return;
end;

function Integer PrintItemReturnRow_IVVc(Integer Printer,record IVVc IVr,row IVVc IVrw,vector val vatrates)
begin
  INteger res,noErr;
  string 255 unit,vatcode;
  
  unit = IVrw.UnitCode;
  if (blank(unit)) then begin
    unit = "PCS";
  end;
  vatcode = GetFB15VATCode(IVr.InclVAT,IVrw.VATCode,vatrates);
 
  res = FiscalPrinterPrintItemReturnLine(Printer,Left(IVrw.Spec,29),IVrw.Quant,IVrw.Price,StringToInt(vatcode),Left(unit,4),0,0);
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;

  PrintItemReturnRow_IVVc = res;
  return;
end;

function Integer PrintItemRows_IVVc(Integer Printer,record IVVc IVr,vector val vatrates)
begin
  INteger res,noErr;
  row IVVc IVrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);    
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal1;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
        if (nonblank(IVrw.ArtCode)) then begin
          res = PrintItemRow_IVVc(Printer,IVr,IVrw,vatrates);
          if (res!=noErr) then begin
            goto LPrintItemRows_IVVc;
          end;
        end else begin
          res = PrintCommentLine_IVVc(Printer,IVr,IVrw);
          if (res!=noErr) then begin
            goto LPrintItemRows_IVVc;
          end;
        end;
      case kInvoiceRowTypeVoid:
        res = PrintItemReturnRow_IVVc(Printer,IVr,IVrw,vatrates);
        if (res!=noErr) then begin
          goto LPrintItemRows_IVVc;
        end;
    end;
  end;
LPrintItemRows_IVVc:;  
  PrintItemRows_IVVc = res;
  return;
end;

procedure CalculatePaymentModeSums_IVVc(record IVVc IVr,vector val vpaymodesums)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  val t;
  
  vpaymodesums[kInvoiceRowTypeCreditCardPayment] = 0.00;
  vpaymodesums[kInvoiceRowTypeCashPayment] = 0.00;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeCashPayment:
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  switch (IVr.InvType) begin
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
      LkInvoiceTypeCredit:;
      t = IVr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      if (t>0) then begin
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
      end;
    otherwise
      t = IVr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      if (t>0) then begin
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
      end;
  end;
  return;
end;

function Integer EndFiscalReceipt_IVVc(Integer Printer,record IVVc IVr)
begin
  INteger res,noErr;
  vector val vpaymodesums;

  CalculatePaymentModeSums_IVVc(IVr,vpaymodesums);

  if (IVr.InvType==kInvoiceTypeCredit) then begin
    res = FiscalPrinterEndFiscalReturn(Printer,vpaymodesums[kInvoiceRowTypeCashPayment],vpaymodesums[kInvoiceRowTypeCreditCardPayment],
                                 blankval,blankval,blankval,blankval,blankval,blankval);
  end else begin
    res = FiscalPrinterEndFiscalReceipt(Printer,vpaymodesums[kInvoiceRowTypeCashPayment],vpaymodesums[kInvoiceRowTypeCreditCardPayment],
                                  blankval,blankval,blankval,blankval,blankval,blankval);
  end;
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;
  
//mix of currencies possible                                
  EndFiscalReceipt_IVVc = res;
  return;
end;

global
updating procedure PrintFB15ReceiptDLL_IVVc(var record IVVc aIVr,record LSerialPortDeviceVc LSPDr)
begin
  record IVVc IVr;
  record IVVc oldIVr;
  Integer noErr,res;
  vector val vatrates;
  string 255 vatcode;
  
  noErr = 0;
  
  res = CheckFB15Clock(LSPDr.Printer);
  if (res!=noErr) then begin
    goto LPrintFB15Receipt;
  end;
  res = LoadFB15VATRates(LSPDr.Printer,vatrates);
  if (res!=noErr) then begin
    goto LPrintFB15Receipt;
  end;

  res = FiscalPrinterBeginFiscalReceipt(LSPDr.Printer);
  if (res!=noErr) then begin
    FiscalPrinterReset(LSPDr.Printer);
    goto LPrintFB15Receipt;
  end;
  res = PrintItemRows_IVVc(LSPDr.Printer,aIVr,vatrates);
  if (res!=noErr) then begin
    goto LPrintFB15Receipt;
  end;
  res = EndFiscalReceipt_IVVc(LSPDr.Printer,aIVr);
  if (res!=noErr) then begin
    goto LPrintFB15Receipt;
  end;

  IVr.SerNr = aIVr.SerNr;
  if (ReadFirstMain(IVr,1,true)) then begin
    if (IVr.Prntdf==0) then begin
      RecordCopy(oldIVr,IVr);
      IVr.Prntdf = 1;
      RecordUpdate(oldIVr,IVr,false);
    end;
  end;    
LPrintFB15Receipt:;
  if (res!=0) then begin
    if (res<0) then begin res = 22138; end;
    MessageBox(res,"");
  end;
  return;
end;



function Integer ItemDiscountAddition_IVCashVc(Integer Printer,record IVCashVc IVCr,row IVCashVc IVCrw)
begin
  Integer res,noErr;
  
  res = FiscalPrinterItemDiscountAddition(Printer,1,-CalculateDiscountPercentage(AbsoluteVal(IVCrw.Quant),AbsoluteVal(IVCrw.Price),AbsoluteVal(IVCrw.Sum)));
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;
//  res = FiscalPrinterItemDiscountAddition(Printer,2,-(IVCashrw.Quant*IVCashrw.Price-IVCashrw.Sum));

  ItemDiscountAddition_IVCashVc = res;
  return;
end;

function Integer PrintItemRow_IVCashVc(Integer Printer,record IVCashVc IVCr,row IVCashVc IVCrw,vector val vatrates,var Boolean creditnotef)
begin
  Integer res,noErr;
  string 255 unit,vatcode;
  
  unit = IVCrw.UnitCode;
  if (blank(unit)) then begin
    unit = "PCS";
  end;

  vatcode = GetFB15VATCode(IVCr.InclVAT,IVCrw.VATCode,vatrates);
  if (IVCrw.Quant<0) then begin
    creditnotef = true;
  end;

  res = FiscalPrinterPrintItemLine(Printer,Left(IVCrw.Spec,29),AbsoluteVal(IVCrw.Quant),AbsoluteVal(IVCrw.Price),StringToInt(vatcode),Left(unit,4));
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;

  if (res==noErr) then begin
    if (nonblank(IVCrw.vRebate)) then begin
      res = ItemDiscountAddition_IVCashVc(Printer,IVCr,IVCrw);
    end;
  end;
  PrintItemRow_IVCashVc = res;
  return;
end;

function Integer PrintCommentLine_IVCashVc(Integer Printer,record IVCashVc IVCr,row IVCashVc IVCrw)
begin
  INteger res,noErr;
  
  res = FiscalPrinterPrintCommentLine(Printer,IVCrw.Spec,HexToInt("0x41"));
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;
  PrintCommentLine_IVCashVc = res;
  return;
end;

function Integer PrintItemReturnRow_IVCashVc(Integer Printer,record IVCashVc IVCr,row IVCashVc IVCrw,vector val vatrates)
begin
  INteger res,noErr;
  string 255 unit,vatcode;
  
  unit = IVCrw.UnitCode;
  if (blank(unit)) then begin
    unit = "PCS";
  end;
  vatcode = GetFB15VATCode(IVCr.InclVAT,IVCrw.VATCode,vatrates);
 
  res = FiscalPrinterPrintItemReturnLine(Printer,Left(IVCrw.Spec,29),AbsoluteVal(IVCrw.Quant),AbsoluteVal(IVCrw.Price),StringToInt(vatcode),Left(unit,4),0,0);
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;

  PrintItemReturnRow_IVCashVc = res;
  return;
end;

function Integer PrintItemRows_IVCashVc(Integer Printer,record IVCashVc IVCr,vector val vatrates,var Boolean creditnotef)
begin
  Integer res,noErr;
  row IVCashVc IVCrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(IVCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);    
    switch (IVCrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkCashInvoiceRowTypeNormal1;
      case kInvoiceRowTypeNormal:
LkCashInvoiceRowTypeNormal1:;
        if (nonblank(IVCrw.ArtCode)) then begin
          res = PrintItemRow_IVCashVc(Printer,IVCr,IVCrw,vatrates,creditnotef);
          if (res!=noErr) then begin
            goto LPrintItemRows_IVCashVc;
          end;
        end else begin
          res = PrintCommentLine_IVCashVc(Printer,IVCr,IVCrw);
          if (res!=noErr) then begin
            goto LPrintItemRows_IVCashVc;
          end;
        end;
      case kInvoiceRowTypeVoid:
        res = PrintItemReturnRow_IVCashVc(Printer,IVCr,IVCrw,vatrates);
        if (res!=noErr) then begin
          goto LPrintItemRows_IVCashVc;
        end;
    end;
  end;
LPrintItemRows_IVCashVc:;  
  PrintItemRows_IVCashVc = res;
  return;
end;

procedure CalculatePaymentModeSums_IVCashVc(record IVCashVc IVCr,vector val vpaymodesums)
begin
  row IVCashVc IVCrw;
  Integer i,rwcnt;
  val t;
  
  vpaymodesums[kInvoiceRowTypeCreditCardPayment] = 0.00;
  vpaymodesums[kInvoiceRowTypeCashPayment] = 0.00;
  rwcnt = MatRowCnt(IVCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);
    switch (IVCrw.stp) begin
      case kInvoiceRowTypeCreditCardPayment:
        vpaymodesums[kInvoiceRowTypeCreditCardPayment] = vpaymodesums[kInvoiceRowTypeCreditCardPayment] + MulRateToBase1(IVCrw.CurncyCode,IVCrw.Sum,IVCrw.FrRate,IVCrw.ToRateB1,IVCrw.ToRateB2,IVCrw.BaseRate1,IVCrw.BaseRate2,DefaultCurRoundOff);
      case kInvoiceRowTypeCashPayment:
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + MulRateToBase1(IVCrw.CurncyCode,IVCrw.Sum,IVCrw.FrRate,IVCrw.ToRateB1,IVCrw.ToRateB2,IVCrw.BaseRate1,IVCrw.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  switch (IVCr.InvType) begin
    case kPOSInvoiceTypeCredit:
LkCashInvoiceTypeCredit:;
      t = IVCr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      if (t>0) then begin
        vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
      end;
    otherwise
      t = IVCr.BaseSum4 - vpaymodesums[kInvoiceRowTypeCashPayment] - vpaymodesums[kInvoiceRowTypeCreditCardPayment];
      
      vpaymodesums[kInvoiceRowTypeCashPayment] = vpaymodesums[kInvoiceRowTypeCashPayment] + t;  
  end;
  return;
end;

function Integer EndFiscalReceipt_IVCashVc(Integer Printer,record IVCashVc IVCr,Boolean creditnotef)
begin
  INteger res,noErr;
  vector val vpaymodesums;

  CalculatePaymentModeSums_IVCashVc(IVCr,vpaymodesums);

  if (IVCr.InvType==kPOSInvoiceTypeCredit or creditnotef) then begin
    res = FiscalPrinterEndFiscalReturn(Printer,AbsoluteVal(vpaymodesums[kInvoiceRowTypeCashPayment]),AbsoluteVal(vpaymodesums[kInvoiceRowTypeCreditCardPayment]),
                                  blankval,blankval,blankval,blankval,blankval,blankval);
  end else begin
    res = FiscalPrinterEndFiscalReceipt(Printer,vpaymodesums[kInvoiceRowTypeCashPayment],vpaymodesums[kInvoiceRowTypeCreditCardPayment],
                                  blankval,blankval,blankval,blankval,blankval,blankval);
  end;
  if (res!=noErr) then begin
    FiscalPrinterReset(Printer);
  end;
//mix of currencies possible                                
  EndFiscalReceipt_IVCashVc = res;
  return;
end;

global
updating procedure PrintFB15Receiptdll_IVCashVc(var record IVCashVc aIVCr,record LSerialPortDeviceVc LSPDr)
begin
  record IVCashVc IVCr;
  record IVCashVc oldIVCr;
  Integer noErr,res;
  vector val vatrates;
  string 255 vatcode;
  Boolean creditnotef;
  
  noErr = 0;
  
  res = CheckFB15Clock(LSPDr.Printer);
  if (res!=noErr) then begin
    goto LPrintFB15Receiptdll_IVCashVc;
  end;
  res = LoadFB15VATRates(LSPDr.Printer,vatrates);
  if (res!=noErr) then begin
    goto LPrintFB15Receiptdll_IVCashVc;
  end;

  res = FiscalPrinterBeginFiscalReceipt(LSPDr.Printer);
  if (res!=noErr) then begin
    FiscalPrinterReset(LSPDr.Printer);
    goto LPrintFB15Receiptdll_IVCashVc;
  end;
  res = PrintItemRows_IVCashVc(LSPDr.Printer,aIVCr,vatrates,creditnotef);
  if (res!=noErr) then begin
    goto LPrintFB15Receiptdll_IVCashVc;
  end;
  res = EndFiscalReceipt_IVCashVc(LSPDr.Printer,aIVCr,creditnotef);
  if (res!=noErr) then begin
    goto LPrintFB15Receiptdll_IVCashVc;
  end;

  IVCr.SerNr = aIVCr.SerNr;
  if (ReadFirstMain(IVCr,1,true)) then begin
    if (IVCr.Prntdf==0) then begin
      RecordCopy(oldIVCr,IVCr);
      IVCr.Prntdf = 1;
      RecordUpdate(oldIVCr,IVCr,false);
    end;
  end;    
LPrintFB15Receiptdll_IVCashVc:;
  if (res!=0) then begin
    if (res<0) then begin res = 22138; end;
    MessageBox(res,"");
  end;
  return;
end;


//------Reports------

global
procedure FB15PeriodicReportdll(record RcVc RepSpec,record LSerialPortDeviceVc LSPDr)
begin
  Integer res,noErr;

  res = FiscalPrinterPrintPeriodicReport(LSPDr.Printer,DateToString(RepSpec.d1,"YYYY.MM.DD"),DateToString(RepSpec.d2,"YYYY.MM.DD"));
  if (res!=0) then begin
    if (res<0) then begin res = 22138; end;
    MessageBox(res,"");
  end;
  return;
end;

global
procedure FB15MonthlyReportdll(record LSerialPortDeviceVc LSPDr)
begin
  Integer res,noErr;
  
  res = FiscalPrinterPrintDaylyReport(LSPDr.Printer);//PrintXReport
  if (res!=0) then begin
    if (res<0) then begin res = 22138; end;
    MessageBox(res,"");
  end;
  return;
end;

global
procedure FB15DailyReportdll(record LSerialPortDeviceVc LSPDr)
begin
  Integer res,noErr;

  res = FiscalPrinterCommitDaylyReport(LSPDr.Printer);//PrintZReport
  if (res!=0) then begin
    if (res<0) then begin res = 22138; end;
    MessageBox(res,"");
  end;
 
  return;
end;

function Integer MoneyOutCurr(Integer Printer,record CashVc Cashr)
begin
  INteger res,noErr;

  res = FiscalPrinterMoneyOut(Printer,0,AbsoluteVal(Cashr.Total));
  MoneyOutCurr = res;
  return;
end;

function Integer MoneyInCurr(Integer Printer,record CashVc Cashr)
begin
  Integer res,noErr;

  res = FiscalPrinterMoneyIn(Printer,0,AbsoluteVal(Cashr.Total));
  MoneyInCurr = res;
  return;
end;

global
procedure PrintFB15CashEventdll(var record CashVc Cashr,record LSerialPortDeviceVc LSPDr)
begin
  Integer noErr,res;
  
  noErr = 0;
  res = CheckFB15Clock(LSPDr.Printer);
  if (res!=noErr) then begin
    goto LPrintFB15CashEvent;
  end;
  switch (Cashr.Event) begin
    case 0:
      if (Cashr.Total<0) then begin
        MoneyInCurr(LSPDr.Printer,Cashr);
      end else begin
        MoneyOutCurr(LSPDr.Printer,Cashr);
      end;
    case 1:
      if (Cashr.Total<0) then begin
        MoneyOutCurr(LSPDr.Printer,Cashr);
      end else begin
        MoneyInCurr(LSPDr.Printer,Cashr);
      end;
  end;
LPrintFB15CashEvent:;
  if (res!=0) then begin
    if (res<0) then begin res = 22138; end;
    MessageBox(res,"");
  end;
  return;
end;