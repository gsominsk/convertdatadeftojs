external function val CalculateDiscountPercentage(val,val,val);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external function integer DepartmentFromVATCode(string);
external function string 255 NumToHex2(string,Integer);

enum begin
  BEMATECH_DEBUG = 0 // Change to 1 to get logging of communication with printer
end;

enum begin
  BEMATECH_NO_ERR = 0,
  BEMATECH_DELAY  = 20
end;

enum begin
  BEMATECH_STX  = 2,
  BEMATECH_ETX  = 3,
  BEMATECH_ACK  = 6,
  BEMATECH_NACK = 21,
  BEMATECH_ESC  = 27
end;

enum begin
  BEMATECH_OPEN_RECEIPT      = 0,
  BEMATECH_Z_REPORT          = 5,
  BEMATECH_X_REPORT          = 6,
  BEMATECH_ADD_VAT_PRC       = 7,
  BEMATECH_READ_FISCAL_MEM   = 8,
  BEMATECH_PRINT_ITEM        = 9,
  BEMATECH_CANCEL_RECEIPT    = 14,
  BEMATECH_DAYLIGHT_SAV      = 18,
  BEMATECH_OPEN_DRAWER       = 22,
  BEMATECH_CHECK_DRAWER      = 23,
  BEMATECH_CASH_EVENT        = 25,
  BEMATECH_CHECK_VAT_PRC     = 26,
  BEMATECH_CLOSE_RECEIPT     = 34,
  BEMATECH_QUERY_PRINTER     = 35,
  BEMATECH_PRINT_PAYMENT     = 72,
  BEMATECH_ADD_PAYMENT_MODES = 73,
  BEMATECH_AFTER_ITEMS       = 103,
  BEMATECH_PRINT_DISCOUNT    = 104,
  BEMATECH_PRINT_TOTAL       = 106
end;

enum begin
  BEMATECH_QUERY_PAYMENT_MODES = 32
end;

enum begin
  BEMATECH_PAYMENT_CASH = 1,
  BEMATECH_PAYMENT_CREDIT_CARD = 2,
  BEMATECH_PAYMENT_GIFT_VOUCHER = 3,
  BEMATECH_PAYMENT_CHEQUE = 4,
  BEMATECH_PAYMENT_LOYALTY_POINTS = 5,
  BEMATECH_MAX_PAYMENT_MODE
end;

function Integer BematechMP2100Open(record LSerialPortDeviceVc LSPDr,var string errstr)
begin
  Integer res;
  
  if (BEMATECH_DEBUG==1) then begin
    LogText(0,"BematechMP2100Open, LSPDr.Port = " & LSPDr.Port & ", LSPDr.BaudRate = " & LSPDr.BaudRate & ", LSPDr.Parity = " & LSPDr.Parity & ", LSPDr.ByteSize = " & LSPDr.ByteSize & ", LSPDr.StopBits = " & LSPDr.StopBits & ", LSPDr.FlowControl = " & LSPDr.FlowControl);
  end;
  if (OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl)) then begin
    res = 0;
  end else begin
    res = 1;
  end;
  
  BematechMP2100Open = res;
end;

procedure BematechMP2100Close()
begin
  CloseComPort(0);
end;

procedure AddBematech2100Error(LongInt errnr,var string errstr)
begin
  if (nonblank(errstr)) then begin
    errstr = errstr & ", ";
  end;
  errstr = errstr & USetStr(errnr);
end;

function Integer CheckBematech2100Errors(string replystr,var string errstr)
begin
  Integer res,i;
  string 255 tstr;
  
  res = BEMATECH_NO_ERR;
  errstr = "";
  
  if (Len(replystr)<3) then begin
    errstr = USetStr(28352);
    res = 2;
    goto LCheckBematech2100Errors;
  end;
  
  if (Asc(Left(replystr,1))!=BEMATECH_ACK) then begin
    if (BEMATECH_DEBUG==1) then begin
      LogText(0,"CheckBematech2100Errors !ACK");
    end;
    res = 1;
    goto LCheckBematech2100Errors;
  end;
  
  tstr = Right(replystr,2);
  
  i = Asc(Mid(tstr,0,1));
  if (BitAnd(i,1))   then begin res = 3; AddBematech2100Error(36151,errstr); end;
  if (BitAnd(i,2))   then begin res = 3; AddBematech2100Error(36152,errstr); end;
  if (BitAnd(i,4))   then begin res = 3; AddBematech2100Error(36153,errstr); end;
  if (BitAnd(i,8))   then begin res = 3; AddBematech2100Error(36154,errstr); end;
  if (BitAnd(i,16))  then begin res = 3; AddBematech2100Error(36155,errstr); end;
  if (BitAnd(i,32))  then begin res = 3; AddBematech2100Error(36156,errstr); end;
  if (BitAnd(i,128)) then begin res = 3; AddBematech2100Error(28353,errstr); end;
  
  i = Asc(Mid(tstr,1,1));
  if (BitAnd(i,1))   then begin res = 3; AddBematech2100Error(36157,errstr); end;
  if (BitAnd(i,2))   then begin res = 3; AddBematech2100Error(36158,errstr); end;
  if (BitAnd(i,4))   then begin res = 3; AddBematech2100Error(36159,errstr); end;
  if (BitAnd(i,8))   then begin res = 3; AddBematech2100Error(36160,errstr); end;
  if (BitAnd(i,16))  then begin res = 3; AddBematech2100Error(36161,errstr); end;
  if (BitAnd(i,32))  then begin res = 3; AddBematech2100Error(36162,errstr); end;
  if (BitAnd(i,64))  then begin res = 3; AddBematech2100Error(36163,errstr); end;
  if (BitAnd(i,128)) then begin res = 3; AddBematech2100Error(36164,errstr); end;
  
LCheckBematech2100Errors:;
  CheckBematech2100Errors = res;
end;

function Integer WaitForBematechMP2100Reply(Integer replylen,var string replystr,var string errstr)
begin
  Integer res,i;
  LongInt waitticks,curtick,starttick;
  Boolean waitf;
  
  res = BEMATECH_NO_ERR;
  replystr = "";
  errstr = "";
  waitticks = BEMATECH_DELAY;
  waitticks = waitticks*1000;
  starttick = GetCurTick;
  waitf = true;
  
  while (waitf) begin
    replystr = replystr & ReadComPort(0,replylen-Len(replystr));
    if (nonblank(replystr)) then begin
      if (Asc(Left(replystr,1))==BEMATECH_NACK) then begin
        waitf = false;
        res = 1;
      end;
      if (Len(replystr)>=replylen) then begin
        waitf = false;
      end;
    end;
    curtick = GetCurTick;
    if (curtick-starttick>waitticks and Len(replystr)<replylen) then begin
      errstr = USetStr(28352);
      waitf = false;
      res = 2;
    end;
  end;
  if (res!=BEMATECH_NO_ERR) then begin goto LWaitForBematechMP2100Reply; end;
  res = CheckBematech2100Errors(replystr,errstr);
  
LWaitForBematechMP2100Reply:;
  if (BEMATECH_DEBUG==1) then begin
    LogText(0,"Bematech reply, length = " & Len(replystr));
    for (i = 0; i<Len(replystr); i = i + 1) begin
      LogText(0,Asc(Mid(replystr,i,1)));
    end;
  end;
  
  WaitForBematechMP2100Reply = res;
end;

procedure AddIntToBematechMP2100CtrlSeq(Integer i,var string CtrlSeq)
begin
  Area a;
  
  AddIntToArea(i,a);
  CtrlSeq = CtrlSeq & Chr(GetByteFromArea(a,1));
  CtrlSeq = CtrlSeq & Chr(GetByteFromArea(a,0));
end;

function Integer WriteToBematechMP2100WithReply(string data,Integer replylen,var string replystr,var string errstr)
begin
  Integer res,i,l,datasum;
  string 255 CtrlSeq,tstr;
  
  l = Len(data);
  CtrlSeq = Chr(BEMATECH_STX);
  AddIntToBematechMP2100CtrlSeq(l + 2,CtrlSeq);
  CtrlSeq = CtrlSeq & data;
  
  datasum = 0;
  for (i = 0; i<l; i = i + 1) begin
    datasum = datasum + Asc(Mid(data,i,1));
  end;
  
  AddIntToBematechMP2100CtrlSeq(datasum,CtrlSeq);
  
  if (BEMATECH_DEBUG==1) then begin
    LogText(0,"Bematech control sequence, length = " & Len(CtrlSeq));
    for (i = 0; i<Len(CtrlSeq); i = i + 1) begin
      LogText(0,Asc(Mid(CtrlSeq,i,1)));
    end;
  end;
  
  if (OutComPort(0,CtrlSeq)!=0) then begin
    res = WaitForBematechMP2100Reply(replylen,replystr,errstr);
  end else begin
    replystr = "";
    res = 1;
  end;
  
  WriteToBematechMP2100WithReply = res;
end;

function Integer WriteToBematechMP2100(string data,var string errstr)
begin
  Integer res;
  string 255 replystr;
  
  res = WriteToBematechMP2100WithReply(data,3,replystr,errstr);
  WriteToBematechMP2100 = res;
end;

function string 255 BematechMP2100FormatVal(val v,Integer numint,Integer numdec)
begin
  string 255 res,tstr,tstr2;
  LongInt pos;
  
  if (numint<1 or numdec<0) then begin
    goto LBematechMP2100FormatVal;
  end;
  
  tstr = ValToString(v,M45Val,"",".",0);
  pos = -1;
  GetNextSubstring(tstr,pos,".",res);
  GetNextSubstring(tstr,pos,".",tstr2);
  
  if (Len(res)>numint) then begin
    res = Right(res,numint);
  end else begin
    while (Len(res)<numint) begin
      res = "0" & res;
    end;
  end;
  
  if (Len(tstr2)>numdec) then begin
    res = Left(tstr2,numdec);
  end else begin
    while (Len(tstr2)<numdec) begin
      tstr2 = tstr2 & "0";
    end;
  end;
  
  res = res & tstr2;
  
LBematechMP2100FormatVal:;
  BematechMP2100FormatVal = res;
end;

function string 255 Bematech2100FormatText(string text,Integer textlen)
begin
  string 255 res;
  
  if (Len(text)>textlen) then begin
    res = Left(text,textlen);
  end else begin
    res = text;
    while (Len(res)<textlen) begin
      res = res & " ";
    end;
  end;
  
  Bematech2100FormatText = res;
end;

function Integer BematechMP2100RunXReport(var string errstr)
begin
  Integer res;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_X_REPORT),errstr);
  BematechMP2100RunXReport = res;
end;

function Integer BematechMP2100RunZReport(var string errstr)
begin
  Integer res;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_Z_REPORT),errstr);
  BematechMP2100RunZReport = res;
end;

function Integer BematechMP2100CashIn(val amount,var string errstr)
begin
  Integer res;
  string 255 data;
  
  data = Chr(BEMATECH_ESC) & Chr(BEMATECH_CASH_EVENT);
  data = data & "SU";
  data = data & BematechMP2100FormatVal(amount,12,2);
  
  res = WriteToBematechMP2100(data,errstr);
  
  BematechMP2100CashIn = res;
end;

function Integer BematechMP2100CashOut(val amount,var string errstr)
begin
  Integer res;
  string 255 data;
  
  data = Chr(BEMATECH_ESC) & Chr(BEMATECH_CASH_EVENT);
  data = data & "SA";
  data = data & BematechMP2100FormatVal(amount,12,2);
  
  res = WriteToBematechMP2100(data,errstr);
  
  BematechMP2100CashOut = res;
end;

function Integer BematechMP2100CheckVATPercentages(var array val printervatvals,var string errstr)
begin
  Integer res,i,vatcnt;
  string 255 replystr;
  
  ClearArray(printervatvals);
  
  res = WriteToBematechMP2100WithReply(Chr(BEMATECH_ESC) & Chr(BEMATECH_CHECK_VAT_PRC),36,replystr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    LBematechMP2100CheckVATPercentages:;
  end;
  
  vatcnt = Asc(Mid(replystr,1,1));
  for (i = 0; i<vatcnt; i = i + 1) begin
    printervatvals[i] = StringToInt(NumToHex2(Asc(Mid(replystr,(i+1)*2,1)),2)) + StringToInt(NumToHex2(Asc(Mid(replystr,(i+1)*2+1,1)),2))/100.00;
  end;
  
LBematechMP2100CheckVATPercentages:;
  BematechMP2100CheckVATPercentages = res;
end;

function Integer BematechMP2100QueryPrinter(Integer query,Integer replylen,var string replystr,var string errstr)
begin
  Integer res;
  
  res = WriteToBematechMP2100WithReply(Chr(BEMATECH_ESC) & Chr(BEMATECH_QUERY_PRINTER) & Chr(query),replylen,replystr,errstr);
  BematechMP2100QueryPrinter = res;
end;

function Integer BematechMP2100CheckPaymentModes(var string errstr)
begin
  Integer res;
  string 255 replystr;
  
  res = BematechMP2100QueryPrinter(BEMATECH_QUERY_PAYMENT_MODES,255,replystr,errstr);
  if (BEMATECH_DEBUG==1) then begin
    LogText(0,"Bematech2100CheckPaymentModes, replystr = " & replystr);
  end;
  
  BematechMP2100CheckPaymentModes = res;
end;

function Integer BematechMP2100OpenReceipt(var string errstr)
begin
  Integer res;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_OPEN_RECEIPT),errstr);
  BematechMP2100OpenReceipt = res;
end;

function Integer BematechMP2100CloseReceipt(var string errstr)
begin
  Integer res;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_CLOSE_RECEIPT),errstr);
  BematechMP2100CloseReceipt = res;
end;

function Integer BematechMP2100CancelReceipt(var string errstr)
begin
  Integer res;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_CANCEL_RECEIPT),errstr);
  BematechMP2100CancelReceipt = res;
end;

function Integer BematechMP2100AddVATPercent(val vatprc,var string errstr)
begin
  Integer res;
  string 255 data;
  
  data = Chr(BEMATECH_ESC) & Chr(BEMATECH_ADD_VAT_PRC);
  data = data & BematechMP2100FormatVal(vatprc,2,2);
  data = data & "0";
  
  res = WriteToBematechMP2100(data,errstr);
  
  BematechMP2100AddVATPercent = res;
end;

function Integer BematechMP2100PrintItemRow(string artcode,string desc,string taxrule,val qty,val price,val rebate,var string errstr)
begin
  Integer res;
  string 255 data;
  
  data = Chr(BEMATECH_ESC) & Chr(BEMATECH_PRINT_ITEM);
  data = data & Bematech2100FormatText(artcode,13);
  data = data & Bematech2100FormatText(desc,29);
  data = data & Bematech2100FormatText(taxrule,2);
  data = data & BematechMP2100FormatVal(qty,4,3);
  data = data & BematechMP2100FormatVal(price,6,2);
  data = data & BematechMP2100FormatVal(rebate,6,2);
  
  res = WriteToBematechMP2100(data,errstr);
  
  BematechMP2100PrintItemRow = res;
end;

function Integer BematechMP2100PrintDiscount(val rebatetot,var string errstr)
begin
  Integer res;
  string 255 data;
  
  data = Chr(BEMATECH_ESC) & Chr(BEMATECH_PRINT_DISCOUNT);
  
  if (rebatetot<0) then begin
    data = data & "A";
  end else begin
    data = data & "D";
  end;
  
  data = data & BematechMP2100FormatVal(rebatetot,12,2);
  res = WriteToBematechMP2100(data,errstr);
  
  BematechMP2100PrintDiscount = res;
end;

function Integer BematechMP2100PrintTotal(var string errstr)
begin
  Integer res;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_PRINT_TOTAL),errstr);
  BematechMP2100PrintTotal = res;
end;

function Integer BematechMP2100PrintPayment(string paymentmode,val paytot,var string errstr)
begin
  Integer res;
  string 255 data;
  
  data = Chr(BEMATECH_ESC) & Chr(BEMATECH_PRINT_PAYMENT);
  data = data & Bematech2100FormatText(paymentmode,2);
  data = data & BematechMP2100FormatVal(paytot,12,2);
  
  res = WriteToBematechMP2100(data,errstr);
  
  BematechMP2100PrintPayment = res;
end;

function Integer IVVc_BematechMP2100PrintItemRows(record IVVc IVr,var string errstr)
begin
  Integer res,i,rwcnt,dep;
  row IVVc IVrw;
  string 255 depstr;
  
  res = BEMATECH_NO_ERR;
  rwcnt = MatRowCnt(IVr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LIVVc_kInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LIVVc_kInvoiceRowTypeNormal:;
        dep = DepartmentFromVATCode(IVrw.VATCode);
        if (dep==0) then begin
          res = 1;
          goto LIVVc_kInvoiceRowTypeNormal;
        end;
        if (dep<10) then begin
          depstr = "0" & dep;
        end else begin
          depstr = dep;
        end;
        res = BematechMP2100PrintItemRow(IVrw.ArtCode,IVrw.Spec,depstr,IVrw.Quant,IVrw.Price,IVrw.vRebate,errstr);
        if (res!=BEMATECH_NO_ERR) then begin
          goto LIVVc_BematechMP2100PrintItemRows;
        end;
    end;
  end;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_AFTER_ITEMS),errstr);
  
LIVVc_BematechMP2100PrintItemRows:;
  IVVc_BematechMP2100PrintItemRows = res;
end;

function Integer IVVc_Bematech2100Payment(record IVVc IVr,var string errstr)
begin
  Integer res,i,rwcnt;
  row IVVc IVrw;
  array val paymentmodesums;
  string 255 paymentmode;
  
  res = BEMATECH_NO_ERR;
  rwcnt = MatRowCnt(IVr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeCashPayment:
        paymentmodesums[BEMATECH_PAYMENT_CASH] = paymentmodesums[BEMATECH_PAYMENT_CASH] + IVrw.Sum;
      case kInvoiceRowTypeCreditCardPayment:
        paymentmodesums[BEMATECH_PAYMENT_CREDIT_CARD] = paymentmodesums[BEMATECH_PAYMENT_CREDIT_CARD] + IVrw.Sum;
      case kInvoiceRowTypeGiftVoucherPayment:
        paymentmodesums[BEMATECH_PAYMENT_GIFT_VOUCHER] = paymentmodesums[BEMATECH_PAYMENT_GIFT_VOUCHER] + IVrw.Sum;
      case kInvoiceRowTypeChequePayment:
        paymentmodesums[BEMATECH_PAYMENT_CHEQUE] = paymentmodesums[BEMATECH_PAYMENT_CHEQUE] + IVrw.Sum;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        paymentmodesums[BEMATECH_PAYMENT_LOYALTY_POINTS] = paymentmodesums[BEMATECH_PAYMENT_LOYALTY_POINTS] + IVrw.Sum;
    end;
  end;
  
  for (i = 1; i<BEMATECH_MAX_PAYMENT_MODE; i = i + 1) begin
    if (i<10) then begin
      paymentmode = "0" & i;
    end else begin
      paymentmode = i;
    end;
    if (paymentmodesums[i]!=0) then begin
      res = BematechMP2100PrintPayment(paymentmode,paymentmodesums[i],errstr);
      if (res!=BEMATECH_NO_ERR) then begin
        goto LIVVc_Bematech2100Payment;
      end;
    end;
  end;
  
LIVVc_Bematech2100Payment:;
  IVVc_Bematech2100Payment = res;
end;

global
procedure IVVc_PrintBematechMP2100Receipt(var record IVVc IVr,record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 errstr;
  
  res = BematechMP2100Open(LSPDr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100OpenReceipt(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVVc_PrintBematechMP2100Receipt;
  end;
  
  res = IVVc_BematechMP2100PrintItemRows(IVr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100PrintTotal(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVVc_PrintBematechMP2100Receipt;
  end;
  
  res = IVVc_Bematech2100Payment(IVr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100CloseReceipt(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVVc_PrintBematechMP2100Receipt;
  end;
  
LIVVc_PrintBematechMP2100Receipt:;
  if (res!=BEMATECH_NO_ERR) then begin
    if (nonblank(errstr)) then begin
      Trace(USetStr(36150) & ": ",errstr);
    end;
    BematechMP2100CancelReceipt(errstr);
  end;
  BematechMP2100Close;
end;

function Integer IVCashVc_BematechMP2100PrintItemRows(record IVCashVc IVCashr,var string errstr)
begin
  Integer res,i,rwcnt,dep;
  row IVCashVc IVCashrw;
  string 255 depstr;
  val vreb;
  
  res = BEMATECH_NO_ERR;
  rwcnt = MatRowCnt(IVCashr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LIVCashVc_kInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LIVCashVc_kInvoiceRowTypeNormal:;
        dep = DepartmentFromVATCode(IVCashrw.VATCode);
        if (dep==0) then begin
          res = 1;
          goto LIVCashVc_kInvoiceRowTypeNormal;
        end;
        if (dep<10) then begin
          depstr = "0" & dep;
        end else begin
          depstr = dep;
        end;
        vreb = CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum);
        res = BematechMP2100PrintItemRow(IVCashrw.ArtCode,IVCashrw.Spec,depstr,IVCashrw.Quant,IVCashrw.Price,vreb,errstr);
        if (res!=BEMATECH_NO_ERR) then begin
          goto LIVCashVc_BematechMP2100PrintItemRows;
        end;
    end;
  end;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_AFTER_ITEMS),errstr);
  
LIVCashVc_BematechMP2100PrintItemRows:;
  IVCashVc_BematechMP2100PrintItemRows = res;
end;

function Integer IVCashVc_Bematech2100Payment(record IVCashVc IVCashr,var string errstr)
begin
  Integer res,i,rwcnt;
  row IVCashVc IVCashrw;
  array val paymentmodesums;
  string 255 paymentmode;
  
  res = BEMATECH_NO_ERR;
  rwcnt = MatRowCnt(IVCashr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeCashPayment:
        paymentmodesums[BEMATECH_PAYMENT_CASH] = paymentmodesums[BEMATECH_PAYMENT_CASH] + IVCashrw.Sum;
      case kInvoiceRowTypeCreditCardPayment:
        paymentmodesums[BEMATECH_PAYMENT_CREDIT_CARD] = paymentmodesums[BEMATECH_PAYMENT_CREDIT_CARD] + IVCashrw.Sum;
      case kInvoiceRowTypeGiftVoucherPayment:
        paymentmodesums[BEMATECH_PAYMENT_GIFT_VOUCHER] = paymentmodesums[BEMATECH_PAYMENT_GIFT_VOUCHER] + IVCashrw.Sum;
      case kInvoiceRowTypeChequePayment:
        paymentmodesums[BEMATECH_PAYMENT_CHEQUE] = paymentmodesums[BEMATECH_PAYMENT_CHEQUE] + IVCashrw.Sum;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        paymentmodesums[BEMATECH_PAYMENT_LOYALTY_POINTS] = paymentmodesums[BEMATECH_PAYMENT_LOYALTY_POINTS] + IVCashrw.Sum;
    end;
  end;
  
  for (i = 1; i<BEMATECH_MAX_PAYMENT_MODE; i = i + 1) begin
    if (i<10) then begin
      paymentmode = "0" & i;
    end else begin
      paymentmode = i;
    end;
    if (paymentmodesums[i]!=0) then begin
      res = BematechMP2100PrintPayment(paymentmode,paymentmodesums[i],errstr);
      if (res!=BEMATECH_NO_ERR) then begin
        goto LIVCashVc_Bematech2100Payment;
      end;
    end;
  end;
  
LIVCashVc_Bematech2100Payment:;
  IVCashVc_Bematech2100Payment = res;
end;

global
procedure IVCashVc_PrintBematechMP2100Receipt(var record IVCashVc IVCashr,record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 errstr;
  
  res = BematechMP2100Open(LSPDr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVCashVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100OpenReceipt(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVCashVc_PrintBematechMP2100Receipt;
  end;
  
  res = IVCashVc_BematechMP2100PrintItemRows(IVCashr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVCashVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100PrintTotal(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVCashVc_PrintBematechMP2100Receipt;
  end;
  
  res = IVCashVc_Bematech2100Payment(IVCashr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVCashVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100CloseReceipt(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LIVCashVc_PrintBematechMP2100Receipt;
  end;
  
LIVCashVc_PrintBematechMP2100Receipt:;
  if (res!=BEMATECH_NO_ERR) then begin
    if (nonblank(errstr)) then begin
      Trace(USetStr(36150) & ": ",errstr);
    end;
    BematechMP2100CancelReceipt(errstr);
  end;
  BematechMP2100Close;
end;

function Integer RestAccVc_BematechMP2100PrintItemRows(record RestAccVc RestAccr,var string errstr)
begin
  Integer res,i,rwcnt,dep;
  row RestAccVc RestAccrw;
  string 255 depstr;
  
  res = BEMATECH_NO_ERR;
  rwcnt = MatRowCnt(RestAccr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    switch (RestAccrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LRestAccVc_kInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LRestAccVc_kInvoiceRowTypeNormal:;
        dep = DepartmentFromVATCode(RestAccrw.VATCode);
        if (dep==0) then begin
          res = 1;
          goto LRestAccVc_BematechMP2100PrintItemRows;
        end;
        if (dep<10) then begin
          depstr = "0" & dep;
        end else begin
          depstr = dep;
        end;
        res = BematechMP2100PrintItemRow(RestAccrw.ArtCode,RestAccrw.Spec,depstr,RestAccrw.Quant,RestAccrw.Price,RestAccrw.vRebate,errstr);
        if (res!=BEMATECH_NO_ERR) then begin
          goto LRestAccVc_BematechMP2100PrintItemRows;
        end;
    end;
  end;
  
  res = WriteToBematechMP2100(Chr(BEMATECH_ESC) & Chr(BEMATECH_AFTER_ITEMS),errstr);
  
LRestAccVc_BematechMP2100PrintItemRows:;
  RestAccVc_BematechMP2100PrintItemRows = res;
end;

function Integer RestAccVc_Bematech2100Payment(record RestAccVc RestAccr,var string errstr)
begin
  Integer res,i,rwcnt;
  row RestAccVc RestAccrw;
  array val paymentmodesums;
  string 255 paymentmode;
  
  res = BEMATECH_NO_ERR;
  rwcnt = MatRowCnt(RestAccr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    switch (RestAccrw.stp) begin
      case kInvoiceRowTypeCashPayment:
        paymentmodesums[BEMATECH_PAYMENT_CASH] = paymentmodesums[BEMATECH_PAYMENT_CASH] + RestAccrw.Sum;
      case kInvoiceRowTypeCreditCardPayment:
        paymentmodesums[BEMATECH_PAYMENT_CREDIT_CARD] = paymentmodesums[BEMATECH_PAYMENT_CREDIT_CARD] + RestAccrw.Sum;
      case kInvoiceRowTypeGiftVoucherPayment:
        paymentmodesums[BEMATECH_PAYMENT_GIFT_VOUCHER] = paymentmodesums[BEMATECH_PAYMENT_GIFT_VOUCHER] + RestAccrw.Sum;
      case kInvoiceRowTypeChequePayment:
        paymentmodesums[BEMATECH_PAYMENT_CHEQUE] = paymentmodesums[BEMATECH_PAYMENT_CHEQUE] + RestAccrw.Sum;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        paymentmodesums[BEMATECH_PAYMENT_LOYALTY_POINTS] = paymentmodesums[BEMATECH_PAYMENT_LOYALTY_POINTS] + RestAccrw.Sum;
    end;
  end;
  
  for (i = 1; i<BEMATECH_MAX_PAYMENT_MODE; i = i + 1) begin
    if (i<10) then begin
      paymentmode = "0" & i;
    end else begin
      paymentmode = i;
    end;
    if (paymentmodesums[i]!=0) then begin
      res = BematechMP2100PrintPayment(paymentmode,paymentmodesums[i],errstr);
      if (res!=BEMATECH_NO_ERR) then begin
        goto LRestAccVc_Bematech2100Payment;
      end;
    end;
  end;
  
LRestAccVc_Bematech2100Payment:;
  RestAccVc_Bematech2100Payment = res;
end;

global
procedure RestAccVc_PrintBematechMP2100Receipt(var record RestAccVc RestAccr,record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 errstr;
  
  res = BematechMP2100Open(LSPDr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LRestAccVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100OpenReceipt(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LRestAccVc_PrintBematechMP2100Receipt;
  end;
  
  res = RestAccVc_BematechMP2100PrintItemRows(RestAccr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LRestAccVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100PrintTotal(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LRestAccVc_PrintBematechMP2100Receipt;
  end;
  
  res = RestAccVc_Bematech2100Payment(RestAccr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LRestAccVc_PrintBematechMP2100Receipt;
  end;
  
  res = BematechMP2100CloseReceipt(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LRestAccVc_PrintBematechMP2100Receipt;
  end;
  
LRestAccVc_PrintBematechMP2100Receipt:;
  if (res!=BEMATECH_NO_ERR) then begin
    if (nonblank(errstr)) then begin
      Trace(USetStr(36150) & ": ",errstr);
    end;
    BematechMP2100CancelReceipt(errstr);
  end;
  BematechMP2100Close;
end;

function Integer BematechMP2100AddPaymentModes(var string errstr)
begin
  Integer res;
  string 255 data;
  
  data = Chr(BEMATECH_ESC) & Chr(BEMATECH_ADD_PAYMENT_MODES);
  data = data & Bematech2100FormatText(GetSetFromID(390,kInvoiceRowTypeCreditCardPayment),16);
  data = data & " ";
  data = data & Bematech2100FormatText(GetSetFromID(390,kInvoiceRowTypeGiftVoucherPayment),16);
  data = data & " ";
  data = data & Bematech2100FormatText(GetSetFromID(390,kInvoiceRowTypeChequePayment),16);
  data = data & " ";
  data = data & Bematech2100FormatText(GetSetFromID(390,kInvoiceRowTypeLoyaltyPointsPayment),16);
  data = data & " ";
  
  res = WriteToBematechMP2100(data,errstr);
  
  BematechMP2100AddPaymentModes = res;
end;

global
procedure BematechMP2100XReport(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 errstr;
  
  res = BematechMP2100Open(LSPDr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100XReport;
  end;
  
  res = BematechMP2100RunXReport(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100XReport;
  end;
  
  res = BematechMP2100AddPaymentModes(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100XReport;
  end;
  
LBematechMP2100XReport:;
  if (res!=BEMATECH_NO_ERR) then begin
    if (nonblank(errstr)) then begin
      Trace(USetStr(36150) & ": ",errstr);
    end;
  end;
  BematechMP2100Close;
end;

global
procedure BematechMP2100ZReport(record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 errstr;
  
  res = BematechMP2100Open(LSPDr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100ZReport;
  end;
  
  res = BematechMP2100RunZReport(errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100ZReport;
  end;
  
LBematechMP2100ZReport:;
  if (res!=BEMATECH_NO_ERR) then begin
    if (nonblank(errstr)) then begin
      Trace(USetStr(36150) & ": ",errstr);
    end;
  end;
  BematechMP2100Close;
end;

global
procedure BematechMP2100CashEvent(record CashVc Cashr,record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  string 255 errstr;
  
  res = BematechMP2100Open(LSPDr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100CashEvent;
  end;
  
  switch (Cashr.Event) begin
    case 0:
      res = BematechMP2100CashOut(Cashr.Total,errstr);
    case 1:
      res = BematechMP2100CashIn(Cashr.Total,errstr);
    otherwise
      res = 1;
  end;
  
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100CashEvent;
  end;
  
LBematechMP2100CashEvent:;
  if (res!=BEMATECH_NO_ERR) then begin
    if (nonblank(errstr)) then begin
      Trace(USetStr(36150) & ": ",errstr);
    end;
  end;
  BematechMP2100Close;
end;

function Integer SyncVATWithFiscalPrinter(var record ZimFPVATCodeBlock ZFPVCb,array val printervatvals,var string errstr)
begin
  Integer res;
  row ZimFPVATCodeBlock ZFPVCrw;
  record VATCodeBlock VATCodeb;
  row VATCodeBlock VATCoderw;
  record TaxRulesVc TaxRulesr;
  Integer i,i2,i3,zfpvrwcnt,vatrwcnt,nextdept;
  Boolean found,found2;
  
  res = BEMATECH_NO_ERR;
  nextdept = printervatvals.length + 1;
  BlockLoad(VATCodeb);
  vatrwcnt = MatRowCnt(VATCodeb);
  
  zfpvrwcnt = MatRowCnt(ZFPVCb);
  for (i = 0; i<zfpvrwcnt; i = i + 1) begin
    MatRowGet(ZFPVCb,i,ZFPVCrw);
    found = false;
    if (nonblank(ZFPVCrw.VATCode)) begin
      for (i2 = 0; i2<vatrwcnt; i2 = i2 + 1) begin
        MatRowGet(VATCodeb,i2,VATCoderw);
        if (ZFPVCrw.VATCode==VATCoderw.VATCode) then begin
          TaxRulesr.Code = VATCoderw.TaxRules;
          if (ReadFirstMain(TaxRulesr,1,true)) then begin
            if (TaxRulesr.TaxType=="ISSQN" or TaxRulesr.TaxType=="ICMS") then begin
              found = true;
            end;
          end;
          i2 = vatrwcnt;
        end;
      end;
    end;
    if (found) then begin
      ZFPVCrw.Department = 0;
      MatRowPut(ZFPVCb,i,ZFPVCrw);
    end else begin
      MatRowDelete(ZFPVCb,i);
      i = i - 1;
      zfpvrwcnt = zfpvrwcnt - 1;
    end;
  end;
  
  for (i = 0; i<printervatvals.length; i = i + 1) begin
    if (BEMATECH_DEBUG==1) then begin
      LogText(0,i & ". SyncVATWithFiscalPrinter, " & ValToString(printervatvals[i],M4Val,"",".",0));
    end;
    found = false;
    for (i2 = 0; i2<vatrwcnt; i2 = i2 + 1) begin
      MatRowGet(VATCodeb,i2,VATCoderw);
      if (VATCoderw.ExVatpr==printervatvals[i]) then begin
        TaxRulesr.Code = VATCoderw.TaxRules;
        if (ReadFirstMain(TaxRulesr,1,true)) then begin
          if (TaxRulesr.TaxType=="ISSQN" or TaxRulesr.TaxType=="ICMS") then begin
            found = true;
            found2 = false;
            for (i3 = 0; i3<zfpvrwcnt; i3 = i3 + 1) begin
              MatRowGet(ZFPVCb,i3,ZFPVCrw);
              if (ZFPVCrw.VATCode==VATCoderw.VATCode) then begin
                found2 = true;
                ZFPVCrw.Department = i + 1;
                MatRowPut(ZFPVCb,i3,ZFPVCrw);
                i3 = zfpvrwcnt;
              end;
            end;
            if (found2==false) then begin
              ClearRow(ZFPVCb,ZFPVCrw,1);
              ZFPVCrw.VATCode = VATCoderw.VATCode;
              ZFPVCrw.Department = i + 1;
              MatRowInsert(ZFPVCb,MatRowCnt(ZFPVCb),ZFPVCrw);
            end;
          end;
        end;
      end;
    end;
    if (found==false) then begin
      ClearRow(ZFPVCb,ZFPVCrw,1);
      ZFPVCrw.VATCode = ValToString(printervatvals[i],M4Val,"",".",0) & "%";
      ZFPVCrw.Department = i + 1;
      MatRowInsert(ZFPVCb,MatRowCnt(ZFPVCb),ZFPVCrw);
    end;
  end;
  
  for (i = 0; i<zfpvrwcnt; i = i + 1) begin
    MatRowGet(ZFPVCb,i,ZFPVCrw);
    if (ZFPVCrw.Department==0) then begin
      for (i2 = 0; i2<vatrwcnt; i2 = i2 + 1) begin
        MatRowGet(VATCodeb,i2,VATCoderw);
        if (ZFPVCrw.VATCode==VATCoderw.VATCode) then begin
          TaxRulesr.Code = VATCoderw.TaxRules;
          if (ReadFirstMain(TaxRulesr,1,true)) then begin
            if (TaxRulesr.TaxType=="ISSQN" or TaxRulesr.TaxType=="ICMS") then begin
              res = BematechMP2100AddVATPercent(VATCoderw.ExVatpr,errstr);
              if (res!=BEMATECH_NO_ERR) then begin
                goto LSyncVATWithFiscalPrinter;
              end;
              ZFPVCrw.Department = nextdept;
              nextdept = nextdept + 1;
              MatRowPut(ZFPVCb,i,ZFPVCrw);
            end;
          end;
          i2 = vatrwcnt;
        end;
      end;
    end;
  end;
  
LSyncVATWithFiscalPrinter:;
  SyncVATWithFiscalPrinter = res;
end;

function Boolean BematechMP2100SyncVATWithFiscalPrinter(var record ZimFPVATCodeBlock ZFPVCb,record LSerialPortDeviceVc LSPDr)
begin
  Integer res;
  array val printervatvals;
  string 255 errstr;
  
  res = BematechMP2100Open(LSPDr,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100SyncVATWithFiscalPrinter;
  end;
  
  res = BematechMP2100CheckVATPercentages(printervatvals,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100SyncVATWithFiscalPrinter;
  end;
  
  res = SyncVATWithFiscalPrinter(ZFPVCb,printervatvals,errstr);
  if (res!=BEMATECH_NO_ERR) then begin
    goto LBematechMP2100SyncVATWithFiscalPrinter;
  end;
  
LBematechMP2100SyncVATWithFiscalPrinter:;
  if (res!=BEMATECH_NO_ERR) then begin
    if (nonblank(errstr)) then begin
      Trace(USetStr(36150) & ": ",errstr);
    end;
  end;
  BematechMP2100Close;
  
  BematechMP2100SyncVATWithFiscalPrinter = res==BEMATECH_NO_ERR;
end;

global
procedure SyncVATWithFiscalPrintersm()
begin
  Boolean res;
  record ZimFPVATCodeBlock ZFPVCb;
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;
  string 255 errstr;
  
  res = false;
  BlockLoad(LMb);  
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalPrinter,-1,LMb.LocalMachineCode,LSPDr)) then begin
    DeselectWindow(CurWindow,false);
    GetWindowRecord(CurWindow,ZFPVCb);
    switch (LSPDr.Printer) begin
      case kSerialPortDeviceModelFiscPrinterBematechMP2100:
        res = BematechMP2100SyncVATWithFiscalPrinter(ZFPVCb,LSPDr);
    end;
    if (res) then begin
      PutWindowRecord(CurWindow,ZFPVCb);
    end;
  end;
end;
