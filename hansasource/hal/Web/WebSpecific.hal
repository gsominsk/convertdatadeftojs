external function Integer GetCodeFromCompanyCode(Integer);
external procedure ToolWebGetTheText(Integer,var string);
/* This file is the beginning of Country specific stuff. You can translate this */

global
function LongInt ConsolidateSameTypes(LongInt progtyp,string cc,var LongInt registeredprogtyp)
begin
  LongInt res;
  string 20 cccode;
  
  switch (progtyp) begin
    case typFinancials: res = typStandardERP;
    case typHansaWorld: res = typStandardERP;
    case typStandardERP: res = typStandardERP;
    case typStandardERP: res = typStandardERP;
    case typRussianStandard: res = typRussianStandard;
    case typPurplesoftERP: res = typPurplesoftERP;
    case typOBSHousing: res = typOBSHousing;
    case typPAYYAPERP: res = typPAYYAPERP;
    otherwise res = progtyp;
  end;
// Hacks due to bugs...
  if (nonblank(cc)) then begin
    cccode = left(cc,2);
    if (cccode=="14") then begin
      if (GetCodeFromCompanyCode(CurrentCompany)==3) then begin // Sweden
        if ((progtyp==typHansaWorldSMB) or (registeredprogtyp==typHansaWorldSMB)) then begin
          res = typHansaWorldSMB;
          registeredprogtyp = res;
        end;
      end;
    end;
    if ((cccode=="15") or (cccode=="16") or (cccode=="17") or (cccode=="18") or (cccode=="19")) then begin
      if (GetCodeFromCompanyCode(CurrentCompany)==8) then begin // Latvia
        if ((progtyp==typOffice2) or (progtyp==typFirstOffice) or (progtyp==typFirstOfficePro) or (registeredprogtyp==typFirstOfficePro)) then begin
          res = typFirstOfficePro;
          registeredprogtyp = res;
        end;
      end;
    end;
    if ((cccode=="90") or (cccode=="91") or (cccode=="92")) then begin
      if ((progtyp==typFinancials) or (progtyp==typHansaRaama) or (registeredprogtyp==typFinancials) or (registeredprogtyp==typHansaRaama)) then begin
        res = typHansaRaama;
        registeredprogtyp = res;
      end;
    end;
  end;
  ConsolidateSameTypes = res;
  return;
end;

global
function Boolean CustomerIsExcepted(string custcode,string threefirstchars,var Date enddat)
begin
  record EnabExceptionVc EEr;
  Boolean res;

  res = false;
  EEr.CustCode = custcode;
  EEr.Closed = 0;
  if (ReadFirstKey("CustCode",EEr,2,true)) then begin
    if (DateInRange(CurrentDate,EEr.StartDate,EEr.EndDate)) then begin
      if ((blank(EEr.MayHaveThreeFirst)) or (EEr.MayHaveThreeFirst==threefirstchars)) then begin
        enddat = EEr.EndDate;
        res = true;
      end;
      if (EEr.MayHaveThreeFirst=="MONTH") then begin
        enddat = AddDay(AddMonth(CurrentDate,1),-1);
        res = true;
      end;
    end;
  end;
  CustomerIsExcepted = res;
  return;
end;

procedure SetDate(Integer y,Integer m,Integer d,var Date thedat)
begin
  thedat.year = y;
  thedat.month = m;
  thedat.day = d;
  return;
end;

procedure SetMaximumDate(LongInt programtyp,Integer cccode,var Date thedat)
begin
  Integer comp;
  record KeyAllowExistBlock KAEr;
  row KeyAllowExistBlock KAErw;
  integer i,cnt,minprev;
  boolean datefoundf;
  date d;

  thedat = d;
  minprev = -1;
  BlockLoad(KAEr);
  cnt = MatRowCnt(KAEr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(KAEr,i,KAErw);
    if (KAErw.ProgType==programtyp) then begin
      if (cccode<=StringToInt(KAErw.Minimum)) then begin
        if (cccode==StringToInt(KAErw.Minimum)) then begin
          if (nonblankdate(KAErw.EndDate)) then begin
            d = KAErw.EndDate;
            SetDate(GetYear(d),GetMonth(d),GetDay(d),thedat);
            datefoundf = true;
          end;
          i = cnt;
        end else begin      
          if (minprev<0 or minprev>StringToInt(KAErw.Minimum)) then begin
            minprev = StringToInt(KAErw.Minimum);
            if (nonblankdate(KAErw.EndDate)) then begin
              d = KAErw.EndDate;
              SetDate(GetYear(d),GetMonth(d),GetDay(d),thedat);
              datefoundf = true;
            end;
          end;
        end;
      end;
    end;
  end;

  if (datefoundf) then begin
    goto LSetMaximumDate;
  end;
  
  if (cccode>=180) then begin
    goto LSetMaximumDate;
  end;

  comp = CurrentCompany;
  if ((programtyp==typFinancials) or (programtyp==typHansaWorld) or (programtyp==typStandardERP) or (programtyp==typPurplesoftERP) or (programtyp==typOBSHousing) or (programtyp==typPAYYAPERP) or (programtyp==typRussianStandard)) then begin
    SetDate(2006,2,15,thedat);
    
  switch (comp) begin

    case 36: // Poland
      if (cccode<180) then begin
        SetDate(2006,2,28,thedat);
      end;

//
//    case 25: // Estonia
//
    case 74: // Estonia - HansaRaama
      if (cccode<180) then begin
        SetDate(2006,6,30,thedat);
      end;

    case 83: // Sweden - FO
      if (cccode<130) then begin // Version before 3.9
        SetDate(2006,2,28,thedat);
      end else begin
        if (cccode<140) then begin // Version before 4.0
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<180) then begin
            SetDate(2006,8,31,thedat);
          end;
        end;
      end;
    case 39: // Sweden
      if (cccode<130) then begin // Version before 3.9
        SetDate(2006,2,28,thedat);
      end else begin
        if (cccode<140) then begin // Version before 4.0
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<179) then begin
            SetDate(2006,8,31,thedat);
          end else begin
            if (cccode<180) then begin
              SetDate(2007,2,28,thedat);
            end;
          end;
        end;
      end;

    case 82: // Norway - FO
      if (cccode<140) then begin // Version before 4.0
        SetDate(2006,3,31,thedat);
      end else begin
        if (cccode<160) then begin // Version before 4.1
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<170) then begin
            SetDate(2006,8,31,thedat); // Version before 4.2
          end else begin
            if (cccode<180) then begin
              SetDate(2006,10,31,thedat); // Version before 4.3
            end;
          end;
        end;
      end;
    case 24: // Norway
      if (cccode<140) then begin // Version before 4.0
        SetDate(2006,3,31,thedat);
      end else begin
        if (cccode<160) then begin // Version before 4.1
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<170) then begin
            SetDate(2006,8,31,thedat); // Version before 4.2
          end else begin
            if (cccode<180) then begin
              SetDate(2006,10,31,thedat); // Version before 4.3
            end;
          end;
        end;
      end;

    case 40: // Finland
      if (cccode<130) then begin // Version before 3.9
        SetDate(2006,2,28,thedat);
      end else begin
        if (cccode<140) then begin // Version before 4.0
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<180) then begin
            SetDate(2006,8,31,thedat);
          end;
        end;
      end;
    case 84: // FO - Finland
      if (cccode<130) then begin // Version before 3.9
        SetDate(2006,2,28,thedat);
      end else begin
        if (cccode<140) then begin // Version before 4.0
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<180) then begin
            SetDate(2006,8,31,thedat);
          end;
        end;
      end;
      
    case 27: // Latvia - FO
      if (cccode<130) then begin // Version before 3.9
        SetDate(2006,1,31,thedat);
      end else begin
        if (cccode<140) then begin // Version before 4.0
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<170) then begin
            SetDate(2006,8,31,thedat); // Version before 4.2
          end else begin
            if (cccode<180) then begin
              SetDate(2006,12,31,thedat); // Version before 4.3
            end;
          end;
        end;
      end;
    case 26: // Latvia
      if (cccode<130) then begin // Version before 3.9
        SetDate(2006,1,31,thedat);
      end else begin
        if (cccode<140) then begin // Version before 4.0
          SetDate(2006,5,31,thedat);
        end else begin
          if (cccode<170) then begin
            SetDate(2006,8,31,thedat); // Version before 4.2
          end else begin
            if (cccode<180) then begin
              SetDate(2006,12,31,thedat); // Version before 4.3
            end;
          end;
        end;
      end;

    case 37: // South Africa
      if (cccode<160) then begin // Version before 4.1
        SetDate(2006,4,30,thedat);
      end else begin
        if (cccode<170) then begin // Version before 4.2
          SetDate(2006,12,31,thedat);
        end else begin
          if (cccode<180) then begin
            SetDate(2006,12,31,thedat); // Version before 4.3
          end;
        end;
      end;

    case 28: // Lithuania
      if (cccode<180) then begin
        SetDate(2006,11,1,thedat);
      end;

    case 76: // Portugal
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 90: // Portugal
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 73: // Equador
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 75: // Latin America
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 72: // Paraguay
      if (cccode<180) then begin
        SetDate(2007,06,30,thedat);
      end;

    case 71: // Honduras
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 70: // Uruguay
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 69: // Argentina
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 59: // Bolivia
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 19: // Denmark
      if (cccode<140) then begin // Version before 4.0
        SetDate(2006,3,31,thedat);
      end else begin
        if (cccode<180) then begin
          SetDate(2006,8,31,thedat);
        end;
      end;
      
    case 64: // Middle East
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 65: // Slovenia
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 66: // Czech
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 67: // Hungarian
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 68: // Excellent
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 74: // HansaRaama
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 81: // Romania
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

    case 93: // Slovakia
      if (cccode<180) then begin
        SetDate(2006,12,31,thedat);
      end;

  end;
  end;
LSetMaximumDate:;
  return;
end;

global
function Integer GetSystemMaxValidUntil(string custcode,LongInt programtyp,string cc,var Date maxvaliduntil)
begin
  string 10 threefirstchars;
  Integer cccode;
  Date thedat;
  Integer res;

  res = 0;
  threefirstchars = Left(cc,3);
  cccode = StringToInt(left(cc,3));
  if (CustomerIsExcepted(custcode,threefirstchars,thedat)) then begin
    if (nonblankdate(thedat)) then begin
      if (maxvaliduntil<thedat) then begin
        maxvaliduntil = thedat;
        res = 2;
      end;
    end;
  end else begin
    SetMaximumDate(programtyp,cccode,thedat);
    if (nonblankdate(thedat)) then begin res = 1; end;
  end;
  if (nonblankdate(thedat)) then begin
    if (maxvaliduntil>thedat) then begin
      maxvaliduntil = thedat;
    end;
  end;
  GetSystemMaxValidUntil = res;
  return;
end;

global
function Boolean ShouldAllowCode(string cc,string cs,string custcode,LongInt cosernr,LongInt cochildnr,Boolean newcustf,string alastfirstchars)
begin
  Boolean res;
  record ModuleBlock MBr;
  record ServEnabSettBlock SESr;
  record KeyAllowNewBlock KANr;
  row KeyAllowNewBlock KANrw;
  record KeyAllowExistBlock KAEr;
  row KeyAllowExistBlock KAErw;
  record KeyAllowUpdateBlock KAUr;
  row KeyAllowUpdateBlock KAUrw;
  Integer rwcnt,i;
  string 10 threefirstchars;
  LongInt programtyp,tmp;
  Date bldat;
  record CUCOEnabActVc CUCOEnabActr;
  string 15 previousfirstchars;
  
  previousfirstchars = alastfirstchars;//LAST does not mean PREVIOUS
  threefirstchars = Left(cc,3);
  BlockLoad(SESr);
  res = true;
  if (nonblank(SESr.OnlyThisOrNewer)) then begin
    if (threefirstchars<SESr.OnlyThisOrNewer) then begin
      res = false;
    end;
  end;
  if (newcustf) then begin
    BlockLoad(KANr);
    rwcnt = MatRowCnt(KANr);
    if (rwcnt>0) then begin
      programtyp = ConsolidateSameTypes(CalcAllModules(cs,cc,MBr),cc,tmp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(KANr,i,KANrw);
        if (KANrw.ProgType==programtyp) then begin
          if ((blank(KANrw.StartDate)) or (CurrentDate>=KANrw.StartDate)) then begin
            if (threefirstchars<KANrw.Minimum) then begin
              res = false;
            end;
          end;
        end;
      end;
    end;
  end else begin
    BlockLoad(KAEr);
    rwcnt = MatRowCnt(KAEr);
    if (rwcnt>0) then begin
      programtyp = ConsolidateSameTypes(CalcAllModules(cs,cc,MBr),cc,tmp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(KAEr,i,KAErw);
        if (KAErw.ProgType==programtyp) then begin
          if ((nonblank(KAErw.EndDate)) and (CurrentDate>KAErw.EndDate)) then begin
            if (threefirstchars==KAErw.Minimum) then begin
              res = false;
            end;
          end;
        end;
      end;
    end;
    BlockLoad(KAUr);
    if (nonblank(previousfirstchars)) then begin
/*
      CUCOEnabActr.CONr = cosernr;
      CUCOEnabActr.COChildSerNr = cochildnr;
      CUCOEnabActr.CustCode = custcode;
      if (LoopBackKey("CONr",CUCOEnabActr,3,true)) then begin
        if (LoopBackKey("CONr",CUCOEnabActr,3,true)) then begin
          previousfirstchars = CUCOEnabActr.ThreeFirstChar;
        end;
      end;
*/
      if (previousfirstchars!=threefirstchars) then begin
        rwcnt = MatRowCnt(KAUr);
        if (rwcnt>0) then begin
          programtyp = ConsolidateSameTypes(CalcAllModules(cs,cc,MBr),cc,tmp);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(KAUr,i,KAUrw);
            if (KAUrw.ProgType==programtyp) then begin
              if ((blank(KAUrw.StartDate)) or (CurrentDate>=KAUrw.StartDate)) then begin
                if (threefirstchars<KAUrw.Minimum) then begin
                  res = false;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  if (res==false) then begin
    res = CustomerIsExcepted(custcode,threefirstchars,bldat);
  end;
  ShouldAllowCode = res;
  return;
end;

global
procedure WebOutEnabHeader(Integer strno,string extrainfo)
begin
  string 255 hstr;
  
  ToolWebGetTheText(strno,hstr);
  
  if (nonblank(extrainfo)) then begin
    if (nonblank(hstr)) then begin
      hstr = hstr & " ";
    end;
    hstr = hstr & extrainfo;
  end;
  WebOutString("<p class=""heading1"">" & hstr & "</p>");
  return;
end;

global
procedure WebEnabNavLink(Integer strno,string linkto,string param,string somthn)
begin
  string 200 tstr;
  
  ToolWebGetTheText(strno,tstr);
  WebOutString("<a href=""");
  WebOutLink(linkto & "?sessionid=" & WebGetArg("sessionid") & param);
  WebOutString(""">");
  WebOutString(tstr);
  WebOutString("</a>");
  return;
end;

global
procedure WebLeadText3(string webname,string wwidth)
begin
  WebOutString("<td width=""" & wwidth & """ class=""feedback-txt"">");
  WebOutString(webname);
  WebOutString("</td>");
  WebOutNL;
  return;
end;

global
procedure WebEnabMenuItem(string webname,string weblink,string webarg,string webtarget,var Integer rwt)
begin
  string 255 llink;
  string 60 bgcolr;
  
  if (rwt!=0) then begin
    bgcolr = "#CCCCFF";
    rwt = 0;
  end else begin
    bgcolr = "#FFFFFF";
    rwt = 1;
  end;
  WebOutString("<TR><TD class=""heading3"">");
  WebOutNL;
  WebOutString("<A HREF=""");
  llink = weblink & "?sessionid=" & WebGetArg("sessionid");
  if (nonblank(webarg)) then begin
    llink = llink & "&" & webarg;
  end;
  WebOutLink(llink);
  if (nonblank(webtarget)) then begin
    WebOutString(""" target=""" & webtarget & """>");  
  end else begin
    WebOutString(""">");  
  end;
  WebOutString(webname);
  WebOutNL;
  WebOutString("</A>");  
  WebOutString("</TD></TR>");  
  WebOutNL;
  return;
end;

global
function string 60 GetWHUCountryCode2(Integer comp)
begin
  string 60 res;
  
  switch (comp) begin
    case 58: res = "ARG"; // Argentina
    case 86: res = "AUS"; // Australia
    case 59: res = "BOL"; // Bolivia
    case 66: res = "CZE"; // Czech
    case 19: res = "DEN"; // Denmark
    case 73: res = "ECR"; // Ecuador
    case 25: res = "EST"; // Estonia
    case 68: res = "EBS"; // Estonia Excellent Bus. Sol.
    case 74: res = "EHR"; // Estonia HansaRaama
    case 40: res = "FIN"; // Finland
    case 71: res = "HON"; // Honduras
    case 67: res = "HUN"; // Hungary
    case 85: res = "ICE"; // Iceland
    case 26: res = "LAT"; // Latvia
    case 28: res = "LIT"; // Lithuania
    case 64: res = "ME"; // Middle East
    case 24: res = "NOR"; // Norway
    case 82: res = "NFO"; // Norway FirstOffice
    case 72: res = "PAR"; // Paraguay
    case 36: res = "POL"; // Poland
    case 90: res = "POR"; // Portugal
    case 29: res = "RUS"; // Russia
    case 81: res = "ROM"; // Romania
    case 93: res = "SLK"; // Slovakia
    case 65: res = "SLO"; // Slovenia
    case 89: res = "SUD"; // Sudan
    case 37: res = "SAF"; // South Africa
    case 39: res = "SWE"; // Sweden
    case 63: res = "UK"; // UK
    case 70: res = "URU"; // Uruguay
    case 1:  res = "EN";  // Internal use and BusinessPhone Special DB
    otherwise res = "UK";
  end;
  GetWHUCountryCode2 = res;
  return;
end;

global
function string 60 GetCountryCode(string langcode)
begin
  string 60 res;
  
  switch(langcode) begin
    case "EN":
      res = "UK";
    case "EN-ZA":
      res = "ZA";      
    case "SV":
      res = "SE";
    case "DA":
      res = "DK";
    case "ET":
      res = "EE";
    case "FI":
      res = "FI";
    case "LV":
      res = "LV";
    case "LT":
      res = "LT";
    case "NO":
      res = "NO";
    case "RU":
      res = "RU";
    case "ES":
      res = "ES";
    case "PL":
      res = "PL";
    case "PT":
      res = "PT";
    case "HN":
      res = "HN";
    otherwise
      res = "UK";
  end;
  GetCountryCode = res;
  return;
end;


global
procedure WebSetLanguage(var string langcode)
begin
  record LangBlock LangBlockr;
  row LangBlock LangBlockrw;
  integer rwcnt,i;
  string 10 web_langcode1,web_langcode2;
  
  // get the language code
  langcode = WebGetArg("langcode");
  
  if(blank(langcode)) then begin
  
    switch(WebHost) begin
      case "university.hansaworld.ee":
        langcode = "ET";
    end;
  end;  
  
  if(blank(langcode)) then begin
  
    // if language code not set get the first browser alternative
    BlockLoad(LangBlockr);  
    rwcnt = MatRowCnt(LangBlockr);    
    web_langcode1 = left(WebLanguage(1),2);
    if(nonblank(web_langcode1)) then begin
      for(i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LangBlockr,i,LangBlockrw);
        if(LangBlockrw.Code == web_langcode1) then begin
          langcode = LangBlockrw.Code;
          goto LWebSetLanguage;
        end;
      end;    
    end;

    // if language code not found try the second browser alternative
    web_langcode2 = left(WebLanguage(2),2);    
    if(nonblank(web_langcode2)) then begin
      for(i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LangBlockr,i,LangBlockrw);
        if(LangBlockrw.Code == web_langcode2) then begin
          langcode = LangBlockrw.Code;
          goto LWebSetLanguage;
        end;
      end;      
    end;
    // if no match yet set the langcode to default
    if(blank(langcode)) then begin
      langcode = "en";
    end;
  end;
  
LWebSetLanguage:;
  return;
end;
