external function Boolean GetFullCurncyRateDate(var string,Date,var val,var val,var val,var val,var val,var Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function Boolean CalcMaintStartEndDate(record COCUServiceVc,record CUServiceVc,string,var Date,var Date,var Date,var val);
external function string 200 ToolWebReturnTheText(Integer);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function string 255 GetUnitText(string,string);
external procedure GetBaseCurncy(Integer,var string);
external function Boolean GetPurchaseItem(string,string,var record PIVc);
external function string 255 FindINObjects(string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure WebMainCust2();
external procedure WebShopBask();
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean PasteCustInOR(var record ORVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure ORSumup(var record ORVc);
external function Boolean LoggedInTest();
external function Boolean WapLoggedInTest();
external procedure WebWapOrderItems();
external procedure CalcRowGP(record EDIORVc,string,string,val,val,val,val,val,var val);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function val DivWithRateToBase1(string,Date,val,roundmode);
external function LongInt CUServicePerLength(record CUServiceVc,record COCUServiceVc);
external function val CUServiceFactor(record CUServiceVc,record COCUServiceVc);

global
updating function Longint ShopORNexSerNr()
begin
  record ORSerNrBlock SerNrr;
  
  BlockLoad(SerNrr);
  SerNrr.CCPayPReNo = SerNrr.CCPayPReNo + 1;
  if (SerNrr.CCPayPReNo==0) then begin
    SerNrr.CCPayPReNo = 1;
  end;
  BlockStore(SerNrr);
  ShopORNexSerNr = SerNrr.CCPayPReNo;
  return;
end; 

procedure AddFreight(var record ORVc ORr,record WebFreightVc WFr,val totwe)
begin
  row ORVc ORrw;
  row WebFreightVc WFrw;
  string 20 curitemno;
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,qty,instock,tax2prc;
  Boolean calcprice,dummyf;
  val fr,to1,to2,br1,br2;
  record GeneralOptionBlock GenOptRec;
  record INVc INr;
  val rowsum;
  LongInt rwcnt;
  Integer i;
  Time blankt;
  
  BlockLoad(GenOptRec);
  ClearRow(ORr,ORrw,1);
  ORrw.vRebate = BlankVal;
  ORrw.stp = 1;
  ORrw.ArtCode = WFr.ItemCode;
  ORrw.Quant = 1;
  qty = ORrw.Quant;
  curitemno = ORrw.ArtCode;
  if (GetItemPriceDiscount3(curitemno,qty,INr,ORr.CurncyCode,
              ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
              ORr.LangCode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
              price,curitemname,reb,vatcode,cost,salesacc,
              ORr.ExportFlag,calcprice,CurrentDate,blankt,ORr.CustCode,true,dummyf,ORr.PayDeal,tax2code,tax2prc,ORr.Region,"",taxtemplatecode)) then begin
    ORrw.Price = price;
    ORrw.vRebate = reb;
    ORrw.VATCode = vatcode;
    ORrw.BasePrice = cost;
    ORrw.SalesAcc = salesacc;
    if (nonblank(WFr.Comment)) then begin
      ORrw.Spec = WFr.Comment;
    end else begin
      ORrw.Spec = curitemname;
    end;
  end;
  if (blank(ORrw.Spec)) then begin
    ORrw.Spec = INr.Name;
  end;
  rwcnt = MatRowCnt(WFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WFr,i,WFrw);
    if (totwe>=WFrw.FromVal) then begin
      MatRowGet(WFr,i+1,WFrw);
      if (nonblank(WFrw.FromVal) and (totwe>=WFrw.FromVal)) then begin
        goto nextline;
      end else begin
        MatRowGet(WFr,i,WFrw);;
        ORrw.Sum = StringToVal(WFrw.Rate,M4Val);
        goto exwfr;  
      end;
    end else begin
      ORrw.Sum = WFr.MinValue;
      goto exwfr;  
    end;
    nextline:;
  end;
exwfr:;
/*
  if ((ORr.Sum4-ORr.Sum1)>=WFr.MinValue) then begin
    ORrw.vRebate = 100;
  end;
*/
//      CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,rowsum,GenOptRec.UseDiscount);
//      ORrw.Sum = rowsum;
  CalcRowGP(ORr,ORrw.VATCode,ORrw.ArtCode,ORrw.Quant,ORrw.BasePrice,ORrw.PriceFactor,ORrw.Sum,ORrw.Price,rowsum);
  ORrw.rowGP = rowsum;
  if (ORrw.Sum>0) then begin
    MatRowPut(ORr,MatRowCnt(ORr),ORrw);
  end;
  return;
end;

function string 200 GetTabString()
begin
  string 200 tabstr;
  
  tabstr = "&nbsp;&nbsp;&nbsp;";
  GetTabString = tabstr;
  return;
end;

global
function Boolean BuildWebOrd(string custcode,LongInt baskno,var record ORVc ORr, var Boolean freightf,string langcode)
begin
  record ShopBaskVc ShopBaskr;
  record CCatVc CCatr;
  row ORVc ORrw;
  record INVc INr;
  record PIVc PIr;
  string 100 ckey,tax2code;
  Integer rwcnt;
  Boolean Accs;
  Boolean testf,error,frf;
  Date tpd;
  Boolean res,dummyf;
  val rowsum,s,t,sum,totwe,tax2prc;
  Longint order_number;
  string 20 curitemno;
  string 100 curitemname,vecode;
  string 20 salesacc,vatcode,taxtemplatecode;
  val price,reb,cost,qty,instock;
  Boolean calcprice;
  val fr,to1,to2,br1,br2;
  record GeneralOptionBlock GenOptRec;
  record WebFreightVc WFr;
  record CUVc CUr;
  string 10 basecur1;
  string 10 ovrcurrency;
  record TaxMatrixVc TMr;
  Time blankt;

  GetBaseCurncy(1,basecur1);
  BlockLoad(GenOptRec);
  totwe = 0;
  freightf = false;
  res = false;
  rwcnt = 0;
  ovrcurrency = ORr.CurncyCode;
  RecordNew(ORr);
  ORr.CustCode = custcode;
  if (PasteCustInOR(ORr) or baskno==999) then begin // Ugly to have 999 as purchord
    if (nonblank(ovrcurrency)) then begin
      ORr.CurncyCode = ovrcurrency;
    end;
    GetFullCurncyRate(ORr.CurncyCode,ORr.OrdDate,fr,to1,to2,br1,br2);
    ORr.FrRate = fr;
    ORr.ToRateB1 = to1;
    ORr.ToRateB2 = to2;
    ORr.BaseRate1 = br1;
    ORr.BaseRate2 = br2;
    
    if (ORr.CustCat<>"") then begin
      CCatr.Code = ORr.CustCat;
      if (ReadFirstMain(CCatr,1,true)) then begin
        ORr.OrderClass = CCatr.WebOrderClass;
      end;
    end;
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      WFr.Code = CUr.FreightCode;
      frf = ReadFirstMain(WFr,1,true);
    end;

    ckey = "CUCode";
    ShopBaskr.CUCode = custcode;
    ShopBaskr.DestinationNr = -1;
    Accs = true;
    while (LoopKey(ckey,ShopBaskr,2,Accs)) begin
      if (ShopBaskr.CUCode<>custcode) then begin Accs = false; end;
      if (ShopBaskr.DestinationNr<>-1) then begin Accs = false; end;
      testf = true;
      if (Accs==false) then begin testf = false; end;
      if (ShopBaskr.Owner<>kShopBaskOwnerCustomer) then begin testf = false; end;
      if (ShopBaskr.Destination<>kShopBaskDestinationOrder) then begin testf = false; end;
      if (baskno>0) then begin
        if (ShopBaskr.BaskNo<>baskno) then begin testf = false; end;
      end;
      INr.Code = ShopBaskr.ItemCode;
      if (ReadFirstMain(INr,1,true)==false) then begin testf = false; end;
      if (testf) then begin
        ClearRow(ORr,ORrw,1);
        reb = BlankVal;
        price = BlankVal;
        cost = BlankVal;
        salesacc = "";
        vatcode = "";
        vecode = "";
        ORrw.vRebate = BlankVal;
        ORrw.stp = 1;
        ORrw.ArtCode = ShopBaskr.ItemCode;
        ORrw.Quant = ShopBaskr.Qty;
        ORrw.CUServiceHistNr = ShopBaskr.CUServiceHistNr;
        ORrw.CUServiceUntilDate = ShopBaskr.PeriodStartDate;
        qty = ORrw.Quant;
        curitemno = ORrw.ArtCode;
        if (GetItemPriceDiscount3(curitemno,qty,INr,ORr.CurncyCode,
                  ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                  langcode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
                  price,curitemname,reb,vatcode,cost,salesacc,
                  ORr.ExportFlag,calcprice,CurrentDate,blankt,custcode,true,dummyf,ORr.PayDeal,tax2code,tax2prc,ORr.Region,"",taxtemplatecode)) then begin
          if (ShopBaskr.PriceInCur!=0) then begin
              if (ShopBaskr.CurncyCode!=ovrcurrency) then begin
                t = MulRateToBase1(ShopBaskr.CurncyCode,ShopBaskr.PriceInCur,ShopBaskr.FrRate,ShopBaskr.ToRateB1,ShopBaskr.ToRateB2,ShopBaskr.BaseRate1,ShopBaskr.BaseRate2,DefaultCurRoundOff);
                Base1ToOther(ORr.CurncyCode,t,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,t,DefaultCurRoundOff);  
                ORrw.Price = t;
              end else begin
                ORrw.Price = ShopBaskr.PriceInCur;
              end;
          end else begin
            if (ShopBaskr.Price!=0) then begin
              if (nonblank(ovrcurrency)) then begin
                price = DivWithRateToBase1(ovrcurrency,CurrentDate,price,DefaultCurRoundOff);
              end;
              ORrw.Price = ShopBaskr.Price;
            end else begin
              ORrw.Price = price;
            end;
          end;
          ORrw.vRebate = reb;
          ORrw.VATCode = vatcode;
          ORrw.BasePrice = cost;
          ORrw.SalesAcc = salesacc;
          ORrw.Spec = curitemname;
          ORrw.Objects = FindINObjects(INr.Objects,INr.Group);
        end;
        if (baskno==999) then begin // Ugly to have 999 as purchord
          price = INr.InPrice;
          vecode = ShopBaskr.VECode;
          if (GetPurchaseItem(curitemno,"",PIr)) then begin
            if (blank(vecode)) then begin
              vecode = PIr.VECode; // Should have it's own field in ShopBaskVc
            end;
            price = PIr.PurPrice;
            if (nonblank(PIr.CurncyCode)) then begin
              if (PIr.CurncyCode!=basecur1) then begin
                price = MulWithRateToBase1(PIr.CurncyCode,CurrentDate,price,DefaultCurRoundOff);
              end;
            end;
          end;
          if (ShopBaskr.PriceInCur!=0) then begin
            if (ShopBaskr.CurncyCode!=ovrcurrency) then begin
              t = MulRateToBase1(ShopBaskr.CurncyCode,ShopBaskr.PriceInCur,ShopBaskr.FrRate,ShopBaskr.ToRateB1,ShopBaskr.ToRateB2,ShopBaskr.BaseRate1,ShopBaskr.BaseRate2,DefaultCurRoundOff);
              Base1ToOther(ORr.CurncyCode,t,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,t,DefaultCurRoundOff);  
              ORrw.Price = t;
            end else begin
              ORrw.Price = ShopBaskr.PriceInCur;
            end;
          end else begin
            if (ShopBaskr.Price!=0) then begin
              ORrw.Price = ShopBaskr.Price;
            end else begin
              ORrw.Price = price;
            end;
          end;
          ORrw.vRebate = reb;
          ORrw.VECode = vecode;
        end;
        if (blank(ORrw.Spec)) then begin
          ORrw.Spec = INr.Name;
        end;
        if (nonblank(ShopBaskr.Comment)) then begin
          ORrw.Spec = ShopBaskr.Comment;
        end;
        CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,rowsum,GenOptRec.UseDiscount);
        ORrw.Sum = rowsum;
        if (nonblank(ORrw.ArtCode)) then begin
          t = qty*ORrw.BasePrice;
          if (ORrw.PriceFactor!=0) then begin
            t = t/ORrw.PriceFactor;
          end;
          sum = ORrw.Sum;
          s = MulRateToBase1(ORr.CurncyCode,sum,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
          UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
          FindSalesExVat(TMr,ORrw.VATCode,s,ORr.InclVAT,ORr.NoTAXonVAT,rowsum);
          ORrw.rowGP = rowsum - t;      /* GP    */
        end else begin
          ORrw.rowGP = 0;
          ORrw.BasePrice = 0;
        end;        
        MatRowPut(ORr,rwcnt,ORrw);
        switch (WFr.BasedOn) begin
          case 0: totwe = totwe + ORrw.Quant*INr.Volume;
          case 1: totwe = totwe + ORrw.Quant*INr.Weight;
          case 2: 
            if (INr.Volume>INr.Weight) then begin
              totwe = totwe + ORrw.Quant*INr.Volume;
            end else begin
              totwe = totwe + ORrw.Quant*INr.Weight;
            end;
          case 3: totwe = totwe + ORrw.Quant;
          case 4: totwe = totwe + ORrw.Sum;
        end;
        rwcnt = rwcnt + 1;
        if (nonblank(ShopBaskr.ExtraCom)) then begin
          ClearRow(ORr,ORrw,1);
          ORrw.Spec = Right(ShopBaskr.ExtraCom,Len(ShopBaskr.ExtraCom)-Len(GetTabString));
          MatRowPut(ORr,rwcnt,ORrw);
          rwcnt = rwcnt + 1;
        end;
      end;
    end;
  end;
  if (totwe>0) and (frf) then begin
    freightf = true;
    AddFreight(ORr,WFr,totwe);
  end;
  ORSumup(ORr);
  if (rwcnt>0) then begin res = true; end;
  BuildWebOrd = res;
  return;
end;

global
updating function Boolean BuildWebOrd2(string custcode,LongInt baskno,var record ORVc ORr, var Boolean freightf,string langcode)
begin
  record ShopBaskVc ShopBaskr,oldShopBaskr;
  record CCatVc CCatr;
  row ORVc ORrw;
  record INVc INr;
  record PIVc PIr;
  string 100 ckey,tax2code,taxtemplatecode;
  Integer rwcnt;
  Boolean Accs;
  Boolean testf,error,frf;
  Date tpd;
  Boolean res,dummyf;
  val rowsum,s,t,sum,totwe,tax2prc;
  Longint order_number;
  string 20 curitemno;
  string 100 curitemname,vecode;
  string 20 salesacc,vatcode;
  val price,reb,cost,qty,instock;
  Boolean calcprice;
  val fr,to1,to2,br1,br2;
  record GeneralOptionBlock GenOptRec;
  record WebFreightVc WFr;
  record CUVc CUr;
  string 10 basecur1;
  string 10 ovrcurrency;
  record TaxMatrixVc TMr;
  Time blankt;
  
  GetBaseCurncy(1,basecur1);
  BlockLoad(GenOptRec);
  totwe = 0;
  freightf = false;
  res = false;
  rwcnt = 0;
  ovrcurrency = ORr.CurncyCode;
  RecordNew(ORr);
  ORr.CustCode = custcode;
  if (PasteCustInOR(ORr) or baskno==999) then begin // Ugly to have 999 as purchord
    if (nonblank(ovrcurrency)) then begin
      ORr.CurncyCode = ovrcurrency;
    end;
    GetFullCurncyRate(ORr.CurncyCode,ORr.OrdDate,fr,to1,to2,br1,br2);
    ORr.FrRate = fr;
    ORr.ToRateB1 = to1;
    ORr.ToRateB2 = to2;
    ORr.BaseRate1 = br1;
    ORr.BaseRate2 = br2;
    
    if (ORr.CustCat<>"") then begin
      CCatr.Code = ORr.CustCat;
      if (ReadFirstMain(CCatr,1,true)) then begin
        ORr.OrderClass = CCatr.WebOrderClass;
      end;
    end;
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      WFr.Code = CUr.FreightCode;
      frf = ReadFirstMain(WFr,1,true);
    end;

    ckey = "CUCode";
    ShopBaskr.CUCode = custcode;
    ShopBaskr.DestinationNr = -1;
    Accs = true;
    while (LoopKey(ckey,ShopBaskr,2,Accs)) begin
      if (ShopBaskr.CUCode<>custcode) then begin Accs = false; end;
      if (ShopBaskr.DestinationNr<>-1) then begin Accs = false; end;
      testf = true;
      if (Accs==false) then begin testf = false; end;
      if (ShopBaskr.Owner<>kShopBaskOwnerCustomer) then begin testf = false; end;
      if (ShopBaskr.Destination<>kShopBaskDestinationOrder) then begin testf = false; end;
      if (baskno>0) then begin
        if (ShopBaskr.BaskNo<>baskno) then begin testf = false; end;
      end;
      INr.Code = ShopBaskr.ItemCode;
      if (ReadFirstMain(INr,1,true)==false) then begin testf = false; end;
      if (testf) then begin
        ClearRow(ORr,ORrw,1);
        reb = BlankVal;
        price = BlankVal;
        cost = BlankVal;
        salesacc = "";
        vatcode = "";
        vecode = "";
        ORrw.vRebate = BlankVal;
        ORrw.stp = 1;
        ORrw.ArtCode = ShopBaskr.ItemCode;
        ORrw.Quant = ShopBaskr.Qty;
        ORrw.CUServiceHistNr = ShopBaskr.CUServiceHistNr;
        ORrw.CUServiceUntilDate = ShopBaskr.PeriodStartDate;
        qty = ORrw.Quant;
        curitemno = ORrw.ArtCode;
        if (GetItemPriceDiscount3(curitemno,qty,INr,ORr.CurncyCode,
                  ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                  langcode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
                  price,curitemname,reb,vatcode,cost,salesacc,
                  ORr.ExportFlag,calcprice,CurrentDate,blankt,custcode,true,dummyf,ORr.PayDeal,tax2code,tax2prc,ORr.Region,"",taxtemplatecode)) then begin
          if (ShopBaskr.PriceInCur!=0) then begin
              if (ShopBaskr.CurncyCode!=ovrcurrency) then begin
                t = MulRateToBase1(ShopBaskr.CurncyCode,ShopBaskr.PriceInCur,ShopBaskr.FrRate,ShopBaskr.ToRateB1,ShopBaskr.ToRateB2,ShopBaskr.BaseRate1,ShopBaskr.BaseRate2,DefaultCurRoundOff);
                Base1ToOther(ORr.CurncyCode,t,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,t,DefaultCurRoundOff);  
                ORrw.Price = t;
              end else begin
                ORrw.Price = ShopBaskr.PriceInCur;
              end;
          end else begin
            if (ShopBaskr.Price!=0) then begin
              if (nonblank(ovrcurrency)) then begin
                price = DivWithRateToBase1(ovrcurrency,CurrentDate,price,DefaultCurRoundOff);
              end;
              ORrw.Price = ShopBaskr.Price;
            end else begin
              ORrw.Price = price;
            end;
          end;
          ORrw.vRebate = reb;
          ORrw.VATCode = vatcode;
          ORrw.BasePrice = cost;
          ORrw.SalesAcc = salesacc;
          ORrw.Spec = curitemname;
          ORrw.Objects = FindINObjects(INr.Objects,INr.Group);
        end;
        if (baskno==999) then begin // Ugly to have 999 as purchord
          price = INr.InPrice;
          vecode = ShopBaskr.VECode;
          if (GetPurchaseItem(curitemno,"",PIr)) then begin
            if (blank(vecode)) then begin
              vecode = PIr.VECode; // Should have it's own field in ShopBaskVc
            end;
            price = PIr.PurPrice;
            if (nonblank(PIr.CurncyCode)) then begin
              if (PIr.CurncyCode!=basecur1) then begin
                price = MulWithRateToBase1(PIr.CurncyCode,CurrentDate,price,DefaultCurRoundOff);
              end;
            end;
          end;
          if (ShopBaskr.PriceInCur!=0) then begin
            if (ShopBaskr.CurncyCode!=ovrcurrency) then begin
              t = MulRateToBase1(ShopBaskr.CurncyCode,ShopBaskr.PriceInCur,ShopBaskr.FrRate,ShopBaskr.ToRateB1,ShopBaskr.ToRateB2,ShopBaskr.BaseRate1,ShopBaskr.BaseRate2,DefaultCurRoundOff);
              Base1ToOther(ORr.CurncyCode,t,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,t,DefaultCurRoundOff);  
              ORrw.Price = t;
            end else begin
              ORrw.Price = ShopBaskr.PriceInCur;
            end;
          end else begin
            if (ShopBaskr.Price!=0) then begin
               ORrw.Price = ShopBaskr.Price;
             end else begin
               ORrw.Price = price;
             end;
          end;
          ORrw.vRebate = reb;
          ORrw.VECode = vecode;
        end;
        if (blank(ORrw.Spec)) then begin
          ORrw.Spec = INr.Name;
        end;
        if (nonblank(ShopBaskr.Comment)) then begin
          ORrw.Spec = ShopBaskr.Comment;
        end;
        CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,rowsum,GenOptRec.UseDiscount);
        ORrw.Sum = rowsum;
        if (nonblank(ORrw.ArtCode)) then begin
          t = qty*ORrw.BasePrice;
          if (ORrw.PriceFactor!=0) then begin
            t = t/ORrw.PriceFactor;
          end;
          sum = ORrw.Sum;
          s = MulRateToBase1(ORr.CurncyCode,sum,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
          UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
          FindSalesExVat(TMr,ORrw.VATCode,s,ORr.InclVAT,ORr.NoTAXonVAT,rowsum);
          ORrw.rowGP = rowsum - t;      /* GP    */
        end else begin
          ORrw.rowGP = 0;
          ORrw.BasePrice = 0;
        end;        
        MatRowPut(ORr,rwcnt,ORrw);
        switch (WFr.BasedOn) begin
          case 0: totwe = totwe + ORrw.Quant*INr.Volume;
          case 1: totwe = totwe + ORrw.Quant*INr.Weight;
          case 2: 
            if (INr.Volume>INr.Weight) then begin
              totwe = totwe + ORrw.Quant*INr.Volume;
            end else begin
              totwe = totwe + ORrw.Quant*INr.Weight;
            end;
          case 3: totwe = totwe + ORrw.Quant;
          case 4: totwe = totwe + ORrw.Sum;
        end;
        rwcnt = rwcnt + 1;
        if (nonblank(ShopBaskr.ExtraCom)) then begin
          ClearRow(ORr,ORrw,1);
          ORrw.Spec = Right(ShopBaskr.ExtraCom,Len(ShopBaskr.ExtraCom)-Len(GetTabString));
          MatRowPut(ORr,rwcnt,ORrw);
          rwcnt = rwcnt + 1;
        end;
// These lines are the ONLY differences with BuildWebOrd...... DUMB...
        if (ShopBaskr.CCPayPReNo==-1) then begin
          RecordCopy(oldShopBaskr,ShopBaskr);
          ShopBaskr.CCPayPReNo = ShopORNexSerNr;
          error = RecordUpdate(oldShopBaskr,ShopBaskr,true);
        end;
        ORr.CustOrdNr = ShopBaskr.CCPayPReNo;
      end;
    end;
  end;
  if (totwe>0) and (frf) then begin
    freightf = true;
    AddFreight(ORr,WFr,totwe);
  end;
  ORSumup(ORr);
  if (rwcnt>0) then begin res = true; end;
  BuildWebOrd2 = res;
  return;
end;

global
updating function LongInt ToolWebStoreTheOrder(string langcode)
begin
  record ORVc ORr;
  record INVc INr;
  record ShopBaskVc ShopBaskr;
  record ShopBaskVc oldShopBaskr;
  record WebControlBlock WCr;
  record DelAddrVc DelAddrr;
  row ORVc ORrw;
  string 60 cunamn;
  Integer error;
  Integer i,rwcnt;
  Boolean okflag,freightf;
  Boolean foundf,testf;
  LongInt orderno;
  record ORVc oldORr;
  record WebControlBlock WebControlr;
  string 5 ordclass,newordclass;

  BlockLoad(WCr);
  BlockLoad(WebControlr);
  if (LoggedInTest()) then begin
    okflag = BuildWebOrd(CurrentCust,-1,ORr,freightf,langcode);
    if (okflag) then begin
      ordclass = "WEB";
      newordclass = "WEB";
      if nonblank(WebControlr.FirstORClass) then begin
        newordclass = WebControlr.FirstORClass;
      end;
      if nonblank(WebControlr.ORClass) then begin
        ordclass = WebControlr.ORClass;
      end;
      ORr.OrderClass = newordclass;
      oldORr.CustCode = CurrentCust;
      if ReadFirstKey("CustCode",oldORr,1,true) begin
        ORr.OrderClass = ordclass;
      end;
      ordclass = ORr.OrderClass;
      ORr.ShipMode = WebGetArg("delmode");
      ORr.DelAddrCode = WebGetArg("deladdr");
      if (ORr.DelAddrCode<>"") then begin
        DelAddrr.CustCode = CurrentCust;
        DelAddrr.DelCode = ORr.DelAddrCode;
        if (ReadFirstMain(DelAddrr,2,true)) then begin
          ORr.ShipAddr0 = ORr.Addr0;
          ORr.ShipAddr1 = DelAddrr.DelAddr0;
          ORr.ShipAddr2 = DelAddrr.DelAddr1;
          ORr.ShipAddr3 = DelAddrr.DelAddr2;
          ORr.DelAddr3 = DelAddrr.DelAddr3;
          ORr.DelAddr4 = DelAddrr.DelAddr4;
          ORr.Region = DelAddrr.Region;
        end;
      end;
      ORr.CustOrdNr = WebGetArg("custref");
      ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
      okflag = RecordInsert(ORr,true);
      if (okflag) then begin
L22:;
        ShopBaskr.CUCode = CurrentCust;
        ShopBaskr.DestinationNr = -1;
        foundf = true;
        while (LoopKey("CUCode",ShopBaskr,2,foundf)) begin
          testf = true;
          if (ShopBaskr.CUCode<>CurrentCust) then begin testf = false; end;
          if (ShopBaskr.DestinationNr<>-1) then begin testf = false; end;
          if (testf) then begin
            RecordCopy(oldShopBaskr,ShopBaskr);
            ShopBaskr.DestinationNr = ORr.SerNr;
            error = RecordUpdate(oldShopBaskr,ShopBaskr,true);
            ResetLoop(ShopBaskr);
            goto L22;
          end;
        end;
      end;
    end;
    ORr.OSFlag = 1;
    ORr.CustCode = CurrentCust;
    foundf = true;
    orderno = -1;
    ResetLoop(ORr);
    while (LoopKey("OSCU",ORr,2,foundf)) begin
      if ((ORr.OSFlag==1) and (ORr.CustCode==CurrentCust) and (ORr.OrderClass==ordclass) and (ORr.OrdDate==CurrentDate)) then begin
        orderno = ORr.SerNr;
        cunamn = ORr.Addr0;
      end else begin
        if ((ORr.OSFlag<>1) or (ORr.CustCode<>CurrentCust)) then begin
          foundf = false;
        end;
      end;
    end;
  end;
  ToolWebStoreTheOrder = orderno;
  return;
end;

updating procedure WebStoreTheItem2(LongInt baskno,Boolean salesord)
begin
  record ShopBaskVc ShopBaskr;
  record ShopBaskVc oldShopBaskr;
  record CUServiceVc CUServicer;
  record COCUServiceVc COCUServicer;
  record CUServiceHistVc CUServiceHistr;
  record INVc INr;
  record PIVc PIr;
  record CUVc CUr;
  Boolean found,delf;
  Integer error;
  string 30 theitem;
  string 20 curitemno;
  string 100 curitemname,vecode;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,qty,instock,tax2prc;
  Boolean calcprice,dummyf;
  string 10 basecur1;
  Time blankt;
  
  theitem = WebGetArg("itemcode");
  vecode = "";
  if (salesord) then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      CUr.Name = "";
    end;
    ShopBaskr.CUCode = CUr.Code;
    ShopBaskr.ItemCode = theitem;
    ShopBaskr.PFormCode = WebGetArg("group");
    ShopBaskr.BaskNo = baskno;
    ShopBaskr.DestinationNr = -1;
    if (ReadFirstKey("CUItmBask",ShopBaskr,5,true)) then begin
      found = true;
      RecordCopy(oldShopBaskr,ShopBaskr);
    end else begin
      found = false;
      RecordNew(ShopBaskr);
    end;  
    curitemno = theitem;
    qty = StringToVal(WebGetArg("ord_qty"),M4Qty);
    if (qty<=0) then begin
      qty = 0;
    end;
    if (GetItemPriceDiscount3(curitemno,qty,INr,CUr.CurncyCode,0,0,0,0,0,
            CUr.LangCode,CUr.CustCat,CUr.PLCode,CUr.RebCode,
            price,curitemname,reb,vatcode,cost,salesacc,
            CUr.ExportFlag,calcprice,CurrentDate,blankt,CUr.Code,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)==false) then begin     
      INr.Name = "";
    end;
    ShopBaskr.CUCode = CUr.Code;
  end else begin
    GetBaseCurncy(1,basecur1);
    reb = BlankVal;
    price = INr.InPrice;
    ShopBaskr.CUCode = CurrentUser;
    ShopBaskr.ItemCode = theitem;
    ShopBaskr.PFormCode = WebGetArg("group");
    ShopBaskr.BaskNo = baskno;
    ShopBaskr.DestinationNr = -1;
    if (ReadFirstKey("CUItmBask",ShopBaskr,5,true)) then begin
      found = true;
      RecordCopy(oldShopBaskr,ShopBaskr);
    end else begin
      found = false;
      RecordNew(ShopBaskr);
    end;  
    curitemno = theitem;
    qty = StringToVal(WebGetArg("ord_qty"),M4Qty);
    if (qty<=0) then begin
      qty = 0;
    end;
    vecode = ShopBaskr.VECode;
    if (GetPurchaseItem(theitem,"",PIr)) then begin
      if (blank(vecode)) then begin
        vecode = PIr.VECode; // Should have it's own field in ShopBaskVc
      end;
      price = PIr.PurPrice;
      if (nonblank(PIr.CurncyCode)) then begin
        if (PIr.CurncyCode!=basecur1) then begin
          price = MulWithRateToBase1(PIr.CurncyCode,CurrentDate,price,DefaultCurRoundOff);
        end;
      end;
    end;
    ShopBaskr.CUCode = CurrentUser;
  end;
  ShopBaskr.ItemCode = theitem;
  ShopBaskr.Qty = qty;
  ShopBaskr.TransDate = CurrentDate;
  ShopBaskr.TransTime = CurrentTime;
  ShopBaskr.PFormCode = "";
  ShopBaskr.Destination = kShopBaskDestinationOrder;
  ShopBaskr.Discount = reb;
  ShopBaskr.Owner = kShopBaskOwnerCustomer;
  ShopBaskr.Price = price;
  ShopBaskr.BaskNo = baskno;
  ShopBaskr.VECode = vecode;
  if (ShopBaskr.CUServiceHistNr>0) then begin
    CUServiceHistr.SerNr = ShopBaskr.CUServiceHistNr;
    if (ReadFirstMain(CUServiceHistr,1,true)) then begin
      CUServicer.SerNr = CUServiceHistr.CUServiceNr;
      if (ReadFirstMain(CUServicer,1,true)) then begin
        COCUServicer.SerNr = CUServicer.COCUServiceNr;
        ReadFirstMain(COCUServicer,1,true);
        
// Not neccesary with this if I think... but..
        if (nonblankdate(ShopBaskr.PeriodStartDate)) then begin
          ShopBaskr.CUServiceValidUntil = AddMonth(ShopBaskr.PeriodStartDate,(ShopBaskr.Qty-1)*CUServicePerLength(CUServicer,COCUServicer));
          ShopBaskr.ExtraCom = GetTabString & ToolWebReturnTheText(20150) & " " & ShopBaskr.CUServiceValidUntil;
        end else begin
          if (nonblankdate(CUServiceHistr.UntilDate)) then begin
            ShopBaskr.CUServiceValidUntil = AddMonth(CUServiceHistr.UntilDate,(ShopBaskr.Qty-1)*CUServicePerLength(CUServicer,COCUServicer));
            ShopBaskr.ExtraCom = GetTabString & ToolWebReturnTheText(20150) & " " & ShopBaskr.CUServiceValidUntil; // I think...
          end;
        end;
      end;
    end;
  end;
  delf = false;
  if (ShopBaskr.Qty==0) then begin delf = true; end;
  if (found) then begin
    if (delf==false) then begin
      error = RecordUpdate(oldShopBaskr,ShopBaskr,true);
    end else begin
      RecordDelete(oldShopBaskr);
    end;
  end else begin
    if (delf==false) then begin
      found = RecordInsert(ShopBaskr,false);
    end;
  end;
  return;
end;

global
updating procedure ToolWebStoreTheItem()
begin
  WebStoreTheItem2(-1,true);
  return;
end;

global
updating procedure WebStoreThePOItem()
begin
  WebStoreTheItem2(999,false);
  return;
end;

global
updating procedure WebStoreTheVESelect()
begin
  record ShopBaskVc ShopBaskr;
  record ShopBaskVc oldShopBaskr;
  Boolean foundf,testf;
  string 40 itemcode;
  
  itemcode = WebGetArg("itemcode");
  ShopBaskr.CUCode = CurrentUser;
  ShopBaskr.DestinationNr = -1;
  foundf = true;
  while (LoopKey("CUCode",ShopBaskr,2,foundf)) begin
    if (ShopBaskr.CUCode<>CurrentUser) then begin foundf = false; end;
    if (ShopBaskr.DestinationNr<>-1) then begin foundf = false; end;
    testf = foundf;
    if (ShopBaskr.ItemCode!=itemcode) then begin
      testf = false;
    end;
    if (testf) then begin
      RecordCopy(oldShopBaskr,ShopBaskr);
      ShopBaskr.VECode = WebGetArg("vecode");
      if (RecordUpdate(oldShopBaskr,ShopBaskr,true)==0) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure WebStoreItem()
begin
  if (LoggedInTest()) then begin
    ToolWebStoreTheItem;
    if (nonblank(WebGetArg("itcode"))) then begin
      WebMainCust2;
    end else begin
      WebShopBask;
    end;
  end;
  return;
end;

global
updating procedure WebStoreWapItem()
begin
  if (WapLoggedInTest()) then begin
    ToolWebStoreTheItem;
    WebWapOrderItems;
  end;
  return;
end;

global
function val QtyInBasket(String ItemCode,Integer baskno)
begin
  record ShopBaskVc Shop;
  longint mBaskNo;
  String 5 mCustCode;
  val res;

  if (baskno==999) then begin // Ugly, this function should have a parameter called salesord
    Shop.CUCode = CurrentUser;
  end else begin
    Shop.CUCode = CurrentCust;
  end;
  Shop.ItemCode = ItemCode;
  if (baskno>0) then begin
    mBaskNo   = baskno;
  end else begin
    mBaskNo   = -1;
  end;
  Shop.PFormCode = "";
  Shop.BaskNo = mBaskNo;
  Shop.DestinationNr = -1;
  if ReadFirstKey("CUItmBask",Shop,5,true) then begin
     res = Shop.Qty;
  end else begin
     res = 0;
  end;
  QtyInBasket = res;
  return;    
end;

global
updating procedure BuildShopBaskFromRegistration(string custcode,string langcode)
begin
  record COCUServiceVc COCUServicer;
  record CUServiceVc CUServicer;
  row CUServiceVc CUServicerw;
  record CUServiceHistVc CUServiceHistr;
  record CUServiceHistVc maintCUServiceHistr;
  record ShopBaskVc ShopBaskr;
  record ShopBaskVc oldShopBaskr;
  record CCatVc CCatr;
  row ORVc ORrw;
  record INVc INr;
  Boolean foundf,testf;
  Boolean foundf2,testf2;
  val rowsum,s,t,sum,tax2prc;
  val fr,to1,to2,br1,br2;
  record GeneralOptionBlock GenOptRec;
  record SysFormatBlock SysFormatRec;
  string 255 tstr;
  Integer i,rwcnt;
  Date sd,ed,actualed;
  val PackageQty;

  BlockLoad(SysFormatRec);
  BlockLoad(GenOptRec);
  foundf = true;
  ShopBaskr.CUCode = custcode;
  ShopBaskr.DestinationNr = -1;
  while (LoopKey("CUCode",ShopBaskr,2,foundf)) begin
    if (ShopBaskr.CUCode<>custcode) then begin foundf = false; end;
    if (ShopBaskr.DestinationNr<>-1) then begin foundf = false; end;
    testf = foundf;
    if (ShopBaskr.CUServiceHistNr<=0) then begin testf = false; end;
    if (testf) then begin
      RecordDelete(ShopBaskr);
      StepBack(ShopBaskr);
    end;
  end;
  CUServicer.CustCode = custcode;
  foundf = true;
  while (LoopKey("CustCode",CUServicer,1,foundf)) begin
    if (CUServicer.CustCode!=custcode) then begin foundf = false; end;
    testf = foundf;
    if (CUServicer.Closed!=0) then begin testf = false; end;
    COCUServicer.SerNr = CUServicer.COCUServiceNr;
    if (ReadFirstMain(COCUServicer,1,true)==false) then begin
      testf = false;
    end;
    if (testf) then begin
      foundf2 = true;
      ResetLoop(CUServiceHistr);
      CUServiceHistr.CUServiceNr = CUServicer.SerNr;
      CUServiceHistr.COCUServiceNr = CUServicer.COCUServiceNr;
      CUServiceHistr.NextSer = -1;
      CUServiceHistr.Type = 0;
      while (LoopKey("COCUArtCode",CUServiceHistr,4,foundf2)) begin
        if (CUServiceHistr.CUServiceNr!=CUServicer.SerNr) then begin foundf2 = false; end;
        if (CUServiceHistr.COCUServiceNr!=CUServicer.COCUServiceNr) then begin foundf2 = false; end;
        if (CUServiceHistr.NextSer>0) then begin foundf2 = false; end;
        if (CUServiceHistr.Type!=0) then begin foundf2 = false; end;
        testf2 = foundf2;
        INr.Code = CUServiceHistr.ArtCode;
        if (ReadFirstMain(INr,1,true)==false) then begin testf2 = false; end;
        if (testf2) then begin
          RecordNew(ShopBaskr);
          ShopBaskr.CUCode = custcode;
          ShopBaskr.DestinationNr = -1;
          ShopBaskr.ItemCode = CUServiceHistr.ArtCode;
          if (GetItemNameStr(1,tstr,langcode,INr.Name,INr.Code)) then begin end;
          ShopBaskr.Comment = tstr;
          ShopBaskr.ExtraCom = "";
          if (CUServiceHistr.Qty>1) then begin
            ShopBaskr.Comment = ShopBaskr.Comment & " " & ValToString(CUServiceHistr.Qty,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,0) & " " & GetUnitText(INr.Unittext,langcode);
          end;
          ShopBaskr.CUServiceHistNr = CUServiceHistr.SerNr;
          if (nonblankdate(CUServiceHistr.UntilDate)) then begin
            ShopBaskr.PeriodStartDate = CUServiceHistr.UntilDate;
            ShopBaskr.CUServiceValidUntil = CUServiceHistr.UntilDate;
            ShopBaskr.ExtraCom = GetTabString & ToolWebReturnTheText(20150) & " " & ShopBaskr.CUServiceValidUntil;
          end;
          ShopBaskr.Qty = 1;
          ShopBaskr.TransDate = CurrentDate;
          ShopBaskr.TransTime = CurrentTime;
          ShopBaskr.PFormCode = "";
          ShopBaskr.Destination = kShopBaskDestinationOrder;
          ShopBaskr.Discount = 0;
          ShopBaskr.Owner = kShopBaskOwnerCustomer;
          ShopBaskr.Price = CUServiceHistr.Sum; // CUServiceHistr.Qty * CUServiceHistr.Price;
          ShopBaskr.BaskNo = -1;
          if (RecordInsert(ShopBaskr,false)) then begin end;
          if (CUServiceHistr.ChargeFor==0) then begin
            RecordCopy(maintCUServiceHistr,CUServiceHistr);
            maintCUServiceHistr.ChargeFor = 1;
            if (ReadFirstKey("CUServicePaidUntil",maintCUServiceHistr,4,true)==false) then begin
              rwcnt = MatRowCnt(CUServicer);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CUServicer,i,CUServicerw);
                INr.Code = CUServicerw.ArtCode;
                if (ReadFirstMain(INr,1,true)==false) then begin testf2 = false; end;
                RecordNew(ShopBaskr);
                ShopBaskr.CUCode = custcode;
                ShopBaskr.DestinationNr = -1;
                ShopBaskr.ItemCode = CUServicerw.ArtCode;
                if (GetItemNameStr(1,tstr,langcode,INr.Name,INr.Code)) then begin end;
                ShopBaskr.Comment = tstr;
                ShopBaskr.ExtraCom = "";
                if (CalcMaintStartEndDate(COCUServicer,CUServicer,ShopBaskr.ItemCode,sd,ed,actualed,PackageQty)) then begin
                end;
                if (CUServicerw.InvoiceQty>1) then begin
                  ShopBaskr.Comment = ShopBaskr.Comment & " " & ValToString(CUServicerw.InvoiceQty*PackageQty,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,0) & " " & GetUnitText(INr.Unittext,langcode);
                end;
                if (CUServicer.MaintOptional!=0) then begin
                  ShopBaskr.Comment = ShopBaskr.Comment & " " & ToolWebReturnTheText(20184);
                end;
                if (nonblankdate(ed)) then begin
                  ShopBaskr.ExtraCom = GetTabString & ToolWebReturnTheText(20150) & " " & ed;
                end;
                ShopBaskr.Qty = 1;
                if (CUServiceFactor(CUServicer,COCUServicer)!=0) then begin
                  ShopBaskr.Qty = ShopBaskr.Qty * CUServiceFactor(CUServicer,COCUServicer);
                end;
                ShopBaskr.TransDate = CurrentDate;
                ShopBaskr.TransTime = CurrentTime;
                ShopBaskr.PFormCode = "";
                ShopBaskr.Destination = kShopBaskDestinationOrder;
                ShopBaskr.Discount = CUServicerw.vRebate;
                ShopBaskr.Objects = CUServicerw.Objects;
                ShopBaskr.Owner = kShopBaskOwnerCustomer;
                ShopBaskr.Price = CUServicerw.InvoiceQty * CUServicerw.Price;
                ShopBaskr.BaskNo = -1;
                ShopBaskr.CUServiceHistNr = CUServiceHistr.SerNr;
                ShopBaskr.PeriodStartDate = ed;
                ShopBaskr.CUServiceValidUntil = ed;
                if (RecordInsert(ShopBaskr,false)) then begin end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

