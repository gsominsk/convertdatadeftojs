external function string 200 GetWebLanguage();
external function Time TimeDiff(Time,Time);
external function Boolean BuildWebOrd(string,LongInt,var record ORVc,var Boolean,string);
external function Boolean WapLoggedInTest();
external function val QtyInBasket(String,Integer);
external procedure FindCustBalance(string,Integer,var val,var val,var val);
external procedure ToolWebGetDispGroup(string,var string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
procedure WebWapStartPage()
begin
  WebOutString("<?xml version=""1.0""?>");
  WebOutNL;
//  WebOutString("<!DOCTYPE wml PUBLIC ""-//WAPFORUM//DTD WML 1.1//EN"" ""wml11.dtd"">"); 
  WebOutString("<!DOCTYPE wml PUBLIC ""-//WAPFORUM//DTD WML 1.1//EN"" ""http://www.wapforum.org/DTD/wml_1.1.xml"">");
  WebOutNL;
  WebOutString("<wml>");
  WebOutNL;
  return;
end;

global
procedure WebWapEndPage()
begin
  WebOutString("</wml>");
  WebOutNL;
  return;
end;

global
procedure WebWapCreateCard(string wapid,string waptitle,string waptimeout,LongInt waptimeoutval)
begin
  WebOutString("<card id=""" & wapid & """ title=""" & waptitle & """");
  if (nonblank(waptimeout)) then begin
    WebOutString(" ontimer=""" & waptimeout & """");
  end;
  WebOutString(">");
  WebOutNL;
  if (waptimeoutval>0) then begin
    WebOutString("<timer name=""key" & wapid & """ value=""" & waptimeoutval & """/>");
    WebOutNL;
  end;
  return;
end;

global
procedure WebWapEndCard()
begin
  WebOutString("</card>");
  WebOutNL;
  return;
end;

global
procedure WebWapAnchorStart(string linknam,string thetitle,string halnam)
begin
  WebOutString("<anchor title=""" & thetitle & """>");
  WebOutNL;
  WebOutString(linknam);
  WebOutNL;
  WebOutString("<go href=""" & halnam & """ method=""post"">");
  WebOutNL;
  return;
end;

global
procedure WebWapAnchorEnd()
begin
  WebOutString("</go>");
  WebOutNL;
  WebOutString("</anchor>");
  WebOutNL;
  WebOutString("<br/>");
  WebOutNL;
  return;
end;

global
procedure WebWapParStart()
begin
  WebOutString("<p>");
  WebOutNL;
  return;
end;

global
procedure WebWapParEnd()
begin
  WebOutString("</p>");
  WebOutNL;
  return;
end;

//  WebOutString("<do type=""accept"" label=""Log In""><go href=""dologin"" method=""post"">");
//  WebOutString("</go></do>");

global
procedure WebWapPrev(string thelabel,string gowhere)
begin
  WebOutString("<do type=""prev"" ");
  if (nonblank(thelabel)) then begin
    WebOutString("label=""" & thelabel & """");
  end;
  WebOutString("><go href=""" & gowhere & "?sessionid=" & WebGetArg("sessionid") & """/></do>");
  WebOutNL;
  return;
end;

global
procedure WebWapEditField(string waptext,string wapfieldname)
begin
  WebOutString(waptext);
//  WebOutNL;
  WebOutString("<input type=""text"" name=""" & wapfieldname & """/>");
  WebOutNL;
  WebOutString("<br/>");
  WebOutNL;
  return;
end;

global
procedure WebWapEditSpecField(string thetitle,string fldnam,string initval,string thetyp,string theformat)
begin
  WebOutString(thetitle);
  WebOutString("<input format=""" & theformat & """ name=""" & fldnam & """ title=""" & thetitle & """ ");
  if (nonblank(thetyp)) then begin
    WebOutString("type=""" & thetyp & """ ");
  end;
  if (nonblank(initval)) then begin
    WebOutString("value=""" & initval & """ ");
  end;
  WebOutString("/>");
  WebOutNL;
  WebOutString("<br/>");
  WebOutNL;
  return;
end;

global
procedure WebWapPict(string pictnam)
begin
  WebWapParStart;
  WebOutString("<img src=""" & pictnam & """ alt=""logo"" />");
  WebOutNL;
  WebWapParEnd;
  return;
end;

global
procedure WebWapMenu(string waptext,string wapref)
begin
  WebOutString("<a href=""" & wapref & """ title=""Select"">" & waptext & " </a><br/>");
  WebOutNL;
  return;
end;

global
procedure WebWapPostField(string name,string value)
begin
  WebOutString("<postfield name=""" & name & """ value=""" & value & """/>");
  WebOutNL;
  return;
end;

global
procedure WebWapAcceptRef(string waplabel,string wapref)
begin
  WebOutString("<do type=""accept"" label=""" & waplabel & """>");
  WebOutString("<go href=""" & wapref & """/>");
  WebOutString("</do>");
  WebOutNL;
  return;
end;

global
procedure WebWapString(string wapstr)
begin
  WebWapParStart;
  WebOutString(wapstr);
  WebOutNL;
  WebWapParEnd;
  return;
end;

global
procedure ListActTypes()
begin
  record ActTypeVc RType;
 
  while (LoopMain(RType,1,true)) begin 
    WebOutString("<option value=""" & RType.Code & """>" & RType.Comment & "</option>");
    WebOutNL;
  end;  
  return;
end;

global
updating procedure ActivitySave()
begin
  Record ActVc Actr;
  Boolean Bool;
  
  RecordNew(Actr);   
  Actr.ActType = WebGetArg("ActType");
  Actr.ActResult = WebGetArg("ActTypeRes");
  Actr.Comment = WebGetArg("Comment");
  Actr.CalTimeFlag = 1; // show activity
  Actr.MainPersons = CurrentUser();
  Actr.EndDate = WebGetArg("EndDate");
  Actr.TransDate = WebGetArg("TransDate");
  Actr.StartTime = WebGetArg("StartTime");   
  Actr.EndTime = WebGetArg("EndTime");
  Actr.PRCode = WebGetArg("PRCode");
  Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);
  Actr.OKFlag = 1;
  if (RecordInsert(Actr,true)) then begin
  end;
  return;
end;

global
updating procedure WebWapActSaved()
begin
  WebWapStartPage;
  ActivitySave;
  WebWapCreateCard("thanks","TimeSheet Thanks","WebWapRegAct.hal#main",20);
  WebWapPict("WapLogo.wbp");
  WebWapString("Thanks");
  WebWapEndCard;
  WebWapEndPage;
  return;
end;

global
procedure WebWapRegAct()
begin
  WebWapStartPage;
  WebWapCreateCard("main","TimeSheet Entry","WebWapMainMenu.hal?sessionid=" & WebGetArg("sessionid"),20);
//  WebWapCreateCard("main","TimeSheet Entry","#act1",20);
  WebWapString("Under Construction");
  WebWapParStart;
  WebWapParEnd;
  WebWapEndCard;
  WebWapCreateCard("act1","ActType","",0);
  WebWapParStart;
  WebWapEditField("Comment:","Comment");
  WebOutString("<select name =""ActType"" title=""ActType"" value="""">");
  WebOutNL;
  ListActTypes;
  WebOutString("</select><br/>");
  WebOutNL;
  WebWapAcceptRef("Next","#act2");
  WebWapParEnd;
  WebWapEndCard;
  WebWapCreateCard("act2","Dates","",0);
  WebWapParStart;
  WebWapEditField("Start date (dd/mm/yy):","TransDate");
  WebWapEditField("End date (dd/mm/yy):","EndDate");
  WebWapAcceptRef("Next","#act3");
  WebWapParEnd;
  WebWapEndCard;
  WebWapCreateCard("act3","Times","",0);
  WebWapParStart;
  WebWapEditField("Start Time (hh:mm):","StartTime");
  WebWapEditField("End Time (hh:mm):","EndTime");
  WebWapAcceptRef("Next","#act4");
  WebWapParEnd;
  WebWapEndCard;
  WebWapCreateCard("act4","Project","",0);
  WebWapParStart;
  WebWapEditField("Item:","ItemCode");
  WebWapEditField("Project:","PRCode");
  WebOutString("<do type=""accept"" label=""Submit"">");
  WebOutString("<go href=""WebWapActSaved.hal#thanks"" method=""post"">");
  WebWapPostField("PRCode","$(PRCode)");
  WebWapPostField("ItemCode","$(ItemCode)");
  WebWapPostField("TransDate","$(TransDate)");
  WebWapPostField("EndDate","$(EndDate)");
  WebWapPostField("ActType","$(ActType)");
  WebWapPostField("StartTime","$(StartTime)");
  WebWapPostField("EndTime","$(EndTime)");
  WebWapPostField("Comment","$(Comment)");
  WebOutString("</go>");
  WebOutString("</do>");
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  return;
end;

global
procedure WebWapSelCust()
begin
  record CUVc CUr;
  string 60 ckey;
  Boolean found;
  
  if (WapLoggedInTest) then begin
  WebWapStartPage;
  WebWapCreateCard("cust","Select Customer","",0);
  WebWapParStart;
  WebWapPrev("Main Menu","WebWapMainMenu.hal");
  ckey = "Code:" & CurrentUser;
  found = true;
  while (LoopKey(ckey,CUr,1,found)) begin
    if (found) then begin
      WebWapAnchorStart(Left(CUr.Name,17),"Select","selcust?sessionid=" & WebGetArg("sessionid"));
      WebWapPostField("custcode",CUr.Code);
      WebWapPostField("backpage","WebWapMainMenu.hal");
      WebWapAnchorEnd;
    end;
  end;
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  end;
  return;
end;

global
procedure WebWapSelectItem()
begin
  record CUVc CUr;
  record INVc INr;
  string 20 curitemno;
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,qty,instock,tax2prc;
  Boolean calcprice,dummyf;
  Time blankt;

  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    CUr.Name = "";
  end;
  INr.Code = WebGetArg("itemcode");
  curitemno = INr.Code;
  qty = QtyInBasket(curitemno,0);
  if (GetItemPriceDiscount3(curitemno,qty,INr,CUr.CurncyCode,0,0,0,0,0,
    CUr.LangCode,CUr.CustCat,CUr.PLCode,CUr.RebCode,
    price,curitemname,reb,vatcode,cost,salesacc,
    CUr.ExportFlag,calcprice,CurrentDate,blankt,CUr.Code,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)==false) then begin     
    INr.Name = "";
  end;
  WebWapStartPage;
  WebWapCreateCard("select",INr.Name,"",0);
  WebWapParStart;
  WebWapPrev("Main Menu","WebWapMainMenu.hal");
//  WebWapEditSpecField("Unitprice:","price",price,"","*X");
  WebWapEditSpecField("Quantity:","ord_qtyt","","","N");
  WebWapAnchorStart("Order this item","Accept","WebStoreWapItem.hal?sessionid=" & WebGetArg("sessionid"));
  WebWapPostField("ord_qty","$(ord_qtyt)");
  WebWapPostField("itemcode",curitemno);
  WebWapPostField("backpage","WebWapMainMenu.hal");
  WebWapAnchorEnd;
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  return;
end;

global
procedure WebWapDispGroups(string itcode)
begin
  record DIVc DIr;
  record INVc INr;
  string 60 ckey;
  Boolean found;

  ckey = "DICode:" & itcode;
  found = true;
  DIr.Code = "";
  ResetLoop(DIr);
  while (LoopKey(ckey,DIr,1,found)) begin
    if (DIr.Code==itcode) then begin found = false; end;
    if (found) then begin
      WebWapAnchorStart(Left(DIr.Name,17),"Open","WebWapOrderItems.hal?sessionid=" & WebGetArg("sessionid"));
      WebWapPostField("itcode",DIr.Code);
      WebWapAnchorEnd;
    end;
  end;
  ckey = "DICode:" & itcode;
  found = true;
  INr.Code = "";
  while (LoopKey(ckey,INr,1,found)) begin
    if (found) then begin
      WebWapAnchorStart(Left(INr.Name,17),"Order","WebWapSelectItem.hal?sessionid=" & WebGetArg("sessionid"));
      WebWapPostField("itcode",WebGetArg("itcode"));
      WebWapPostField("itemcode",INr.Code);
      WebWapAnchorEnd;
    end;
  end;
  return;
end;

global
procedure WebWapOrderItems()
begin
  record WebControlBlock WCr;
  string 20 itcode;

  BlockLoad(WCr);
  itcode = WebGetArg("itcode");
  if (blank(itcode)) then begin
    ToolWebGetDispGroup(CurrentCust,itcode);
  end;
  WebWapStartPage;
  WebWapCreateCard("items","Order Items","",0);
  WebWapParStart;
  WebWapPrev("Main Menu","WebWapMainMenu.hal");
  WebWapDispGroups(itcode);
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  return;  
end;

global
procedure WebWapCustInfo()
begin
  record CUVc CUr;
  val due,bal,limit;
  
  if (WapLoggedInTest) then begin
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)==false) then begin CUr.Name = "Not Found"; end;
  FindCustBalance(CUr.Code,0,limit,bal,due);
  WebWapStartPage;
  WebWapCreateCard("main",CUr.Name,"",0);
  WebWapPrev("Main Menu","WebWapMainMenu.hal");
  WebWapString("Credit:  " & CUr.CreditLimit);
  WebWapString("Balance: " & bal);
  WebWapString("Overdue: " & due);
  if (nonblank(CurrentUser)) then begin
    WebWapString(CUr.Comment);
    WebWapString(CUr.WarnText1);
  end;
  WebWapEndCard;
  WebWapEndPage;
  end;
  return;
end;

Function
Boolean WebBasketIsEmpty()
begin
  record ShopBaskVc ShopBaskr;
  Boolean res;
  
  res = true;
  ShopBaskr.CUCode = CurrentCust;
  ShopBaskr.DestinationNr = -1;
  if (ReadFirstKey("CUCode",ShopBaskr,2,true)) then begin
    res = false;
    if (ShopBaskr.CUCode<>CurrentCust) then begin res = true; end;
  end;
  WebBasketIsEmpty = res;
  return;
end;

global
updating procedure WebWapStoreOrder()
begin
  record ORVc ORr;
  record ShopBaskVc ShopBaskr;
  record ShopBaskVc oldShopBaskr;
  record DelAddrVc DelAddrr;
  Integer error;
  Boolean res;
  Boolean foundf,testf,freightf;
  LongInt orderno;

  if (WapLoggedInTest) then begin
    res = BuildWebOrd(CurrentCust,-1,ORr,freightf,GetWebLanguage);
    if (res) then begin
      ORr.OrderClass = "WAP";
/*
      ORr.ShipMode = WebGetArg("delmode");
      ORr.CustOrdNr = WebGetArg("custref");
      ORr.DelAddrCode = WebGetArg("deladdr");
      if (ORr.DelAddrCode<>"") then begin
        DelAddrr.CustCode = CurrentCust;
        DelAddrr.DelCode = ORr.DelAddrCode;
        if (ReadFirstMain(DelAddrr,2,true)) then begin
          ORr.ShipAddr0 = ORr.Addr0;
          ORr.ShipAddr1 = DelAddrr.DelAddr0;
          ORr.ShipAddr2 = DelAddrr.DelAddr1;
          ORr.ShipAddr3 = DelAddrr.DelAddr2;
          ORr.DelAddr3 = DelAddrr.DelAddr3;
          ORr.DelAddr4 = DelAddrr.DelAddr4;
        end;
      end;
*/
      ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");            
      res = RecordInsert(ORr,true);
      if (res) then begin
L22:;
        ShopBaskr.CUCode = CurrentCust;
        ShopBaskr.DestinationNr = -1;
        foundf = true;
        while (LoopKey("CUCode",ShopBaskr,2,foundf)) begin
          testf = true;
          if (ShopBaskr.CUCode<>CurrentCust) then begin testf = false; end;
          if (ShopBaskr.DestinationNr<>-1) then begin testf = false; end;
          if (testf) then begin
            RecordCopy(oldShopBaskr,ShopBaskr);
            ShopBaskr.DestinationNr = ORr.SerNr;
            error = RecordUpdate(oldShopBaskr,ShopBaskr,true);
            ResetLoop(ShopBaskr);
            goto L22;
          end;
        end;
      end;
    end;
    ORr.OSFlag = 1;
    ORr.CustCode = CurrentCust;
    foundf = true;
    orderno = -1;
    ResetLoop(ORr);
    while (LoopKey("OSCU",ORr,2,foundf)) begin
      if ((ORr.OSFlag==1) and (ORr.CustCode==CurrentCust) and (ORr.OrderClass=="WAP") and (ORr.OrdDate==CurrentDate)) then begin
        orderno = ORr.SerNr;
      end else begin
        if ((ORr.OSFlag<>1) or (ORr.CustCode<>CurrentCust)) then begin
          foundf = false;
        end;
      end;
    end;
    WebWapStartPage;
    WebWapCreateCard("confirm","Thank You","",0);
    WebWapPrev("Main Menu","WebWapMainMenu.hal");
    if (orderno>-1) then begin
      WebWapString("Ordernumber: " & orderno);
    end else begin
      WebWapString("Order was not stored");
    end;
    WebWapEndCard;
    WebWapEndPage;
  end;
  return; 
end;

global
procedure WebWapMakeOrder()
begin
  if (WapLoggedInTest) then begin
  WebWapStartPage;
  WebWapCreateCard("confirm","Confirm Order","",0);
  WebWapParStart;
  WebWapPrev("Main Menu","WebWapMainMenu.hal");
  WebWapAnchorStart("Generate Order","Accept","WebWapStoreOrder.hal?sessionid=" & WebGetArg("sessionid"));
  WebWapAnchorEnd;
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  end;
  return;
end;

global
procedure WebWapUsMainMenu()
begin
  if (WapLoggedInTest) then begin
  WebWapStartPage;
  WebWapCreateCard("main","Hansa User","",0);
  WebWapParStart;
  WebWapPrev("Logout","WebWapLogin.hal");
//  WebWapMenu("Register Time","WebWapRegAct.hal?sessionid=" & WebGetArg("sessionid"));
  if (nonblank(CurrentCust)) then begin
    WebWapMenu("Customer Info","WebWapCustInfo.hal?sessionid=" & WebGetArg("sessionid"));
    WebWapMenu("Order Items","WebWapOrderItems.hal?sessionid=" & WebGetArg("sessionid"));
    if (WebBasketIsEmpty==false) then begin
      WebWapMenu("Confirm Order","WebWapMakeOrder.hal?sessionid=" & WebGetArg("sessionid"));
    end;
  end;
  WebWapMenu("Select Customer","WebWapSelCust.hal?sessionid=" & WebGetArg("sessionid"));
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  end;
  return;
end;

global
procedure WebWapCuMainMenu()
begin
  if (WapLoggedInTest) then begin
  WebWapStartPage;
  WebWapCreateCard("main","Hansa Customer","",0);
  WebWapParStart;
  WebWapPrev("Logout","WebWapLogin.hal");
  WebWapMenu("Current Status","WebWapCustInfo.hal?sessionid=" & WebGetArg("sessionid"));
  WebWapMenu("Order Items","WebWapOrderItems.hal?sessionid=" & WebGetArg("sessionid"));
  if (WebBasketIsEmpty==false) then begin
    WebWapMenu("Confirm Order","WebWapMakeOrder.hal?sessionid=" & WebGetArg("sessionid"));
  end;
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  end;
  return;
end;

global
updating procedure WebWapLogin()
begin
  WebLogout;
  WebWapStartPage;
  WebWapCreateCard("LoginCard","Hansa WAP Client","",0);
  WebWapParStart;
//  WebWapPrev("Intro","WebWapMain.hal");
  WebWapEditSpecField("Login:","logint","","","*XN");
  WebWapEditSpecField("Password:","passwdt","","password","*");
  WebWapAnchorStart("Log In","Log In","dologin");
  WebWapPostField("login","$(logint)");
  WebWapPostField("passwd","$(passwdt)");
  WebWapPostField("userpage","WebWapUsMainMenu.hal");
  WebWapPostField("custpage","WebWapCuMainMenu.hal");
  WebWapAnchorEnd;
  WebWapParEnd;
  WebWapEndCard;
  WebWapEndPage;
  return;
end;

global
updating procedure WebWapMainMenu()
begin
  if (WebLoginStatus==3) then begin
    if (blank(CurrentUser)) then begin
      if (blank(CurrentCust)) then begin
        WebWapLogin;
      end else begin
        WebWapCuMainMenu;
      end;
    end else begin
      WebWapUsMainMenu;
    end;
  end else begin
    WebWapLogin;
  end;
  return;
end;

global
procedure WebWapMain()
begin
  WebWapStartPage;
  WebWapCreateCard("welcome","Welcome to Hansa","WebWapLogin.hal",20);
  WebWapPict("WapLogo.wbp");
  WebWapEndCard;
  WebWapEndPage;
  return;
end;

global
procedure ToolWebWapNotLoggedIn()
begin
  WebWapStartPage;
  WebWapCreateCard("nologin","Error","WebWapLogin.hal",20);
  WebWapString("You are not logged in");
  WebWapEndCard;
  WebWapEndPage;
  return;
end;

global
procedure WebWapUnknownLogin()
begin
  WebWapStartPage;
  WebWapCreateCard("error","Login Failed","WebWapLogin.hal",40);
  WebWapString("Please try again.");
  WebWapEndCard;
  WebWapEndPage;
  return;
end;
