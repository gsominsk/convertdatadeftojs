external procedure GetConfCode(string,var string);
external procedure GetCustEmail(record CUVc,var string);
external procedure AddTextLineToLetter(string,record LetVc);

/* Set more variables on the Customer record */
global
procedure ToolWebSetCustInfo(var record CUVc CUr)
begin
  return;
end;

global
procedure GetWebHBSDivLanguages(var record LangBlock LBr)
begin
  integer oldcomp;
  boolean res;
  row LangBlock LBrw;
  integer i;
  boolean loadfromsetting;
  
  loadfromsetting = true;
  
  if (loadfromsetting) then begin
    oldcomp = CurrentCompany;
    res = SetCompany(1,false);
    
    BlockLoad(LBr);
    
    if (res) then begin
      ResetCompany(oldcomp);
    end;
  end else begin
    i = 0;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "DA";
    LBrw.Comment = "Danish";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "EN";
    LBrw.Comment = "English";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "ET";
    LBrw.Comment = "Estonian";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "FI";
    LBrw.Comment = "Finnish";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "DE";
    LBrw.Comment = "German";
    MatRowPut(LBr,i,LBrw);
  
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "LV";
    LBrw.Comment = "Latvian";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "LT";
    LBrw.Comment = "Lithuanian";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "NO";
    LBrw.Comment = "Norwegian";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "PL";
    LBrw.Comment = "Polish";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "PT";
    LBrw.Comment = "Portuguese";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "RU";
    LBrw.Comment = "Russian";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "SL";
    LBrw.Comment = "Slovenian";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "ES";
    LBrw.Comment = "Spanish";
    MatRowPut(LBr,i,LBrw);
    
    i = i+1;
    ClearRow(LBr,LBrw,1);
    LBrw.Code = "SV";
    LBrw.Comment = "Swedish";
    MatRowPut(LBr,i,LBrw);
  end;
  
  return;
end;

global
procedure ToolWebLangText(string code,string langcode,var string res)
begin
  record WebTextVc WTr;
  row WebTextVc WTrw;
  Integer i,rwcnt;
  
  res = "";
  WTr.Code = code;
  if (ReadFirstMain(WTr,1,true)) then begin
    res = WTr.Comment;
    rwcnt = MatRowCnt(WTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WTr,i,WTrw);
      if (WTrw.LangCode==langcode) then begin
        res = WTrw.Comment;
        i = rwcnt;
      end;
    end;
  end;
  return;
end;

global
function string 200 GetWebLanguage()
begin
  string 200 lang;
  record LangBlock Lb;
  row LangBlock Lbrw;
  integer i,cnt;
  boolean foundf;
  
  lang = WebGetArg("programlanguage");
  if (blank(lang)) then begin
    lang = WebGetArg("prog_lang");
  end;
  if (nonblank(lang)) then begin
    switch (lang) begin
      case "ENG": lang  = "EN";
      case "SWE": lang  = "SV";
      case "DAN": lang  = "DA";
      case "EST": lang  = "ET";
      case "FIN": lang  = "FI";
      case "LAT": lang  = "LV";
      case "LIT": lang  = "LT";
      case "NOR": lang  = "NO";
      case "RUS": lang  = "RU";
      case "SPA": lang  = "ES";
      case "POL": lang  = "PL";
      case "POR": lang  = "PT";
      case "PHE": lang  = "EN";
      case "NZE": lang  = "EN";
      case "KEE": lang  = "EN";
      case "FRA": lang  = "FR";
      case "FRC": lang  = "FR";
      case "SGP": lang  = "EN";
      otherwise   lang = "";
    end;
  end;
  if (blank(lang)) then begin
    lang = WebGetArg("langcode");
  end;
  if (blank(lang)) then begin
    switch (right(WebHost,2)) begin
      case "fi": lang = "FI";
      case "no": lang = "NO";
      case "dk": lang = "DK";
      case "lv": lang = "LV";
      case "ru": lang = "RU";
      case "nu": lang = "SV";
      case "fr": lang = "FR";
    end;
  end;
  if (blank(lang)) then begin
    lang = WebLanguage(1);
  end;
  if (nonblank(lang)) then begin
    if (len(lang)>2) then begin
      lang = left(lang,2);
    end;
    
    foundf = false;
    GetWebHBSDivLanguages(Lb);
    cnt = MatRowCnt(Lb);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(Lb,i,Lbrw);
      if (Lbrw.Code==lang) then begin
        foundf = true;
        i=cnt;
      end;
    end;
    if (foundf==false) then begin
      lang = "";
    end;
  end;
  GetWebLanguage = lang;
  return;
end;

// Slow function if we have many web pages. Needs better solution.
global
function string 20 GetWebVersion()
begin
  record WebPagesVc WPr;
  row WebPagesVc WPrw;
  string 20 ver;
  Boolean foundf;
  
  ver = WebGetArg("version");
  if (blank(ver)) then begin
    WPr.Code = "";
    foundf = true;
    while (LoopMain(WPr,1,foundf)) begin
      if (WPr.PageType==11) then begin
        if (MatRowCnt(WPr)>0) then begin
          MatRowGet(WPr,0,WPrw);
          ver = WPrw.ConfCode;
        end;
      end;
    end;
  end;
  GetWebVersion = ver;
  return;
end;

/* Mainly for the Enablers, but also used in HansaWorld.com */
global
procedure ToolWebGetTheTextWithLangCode(Integer strno,var string hstr,string langcode)
begin
  ToolWebLangText(strno,langcode,hstr); // NOT fine, needs to get langcode as parameter....
  if (blank(hstr)) then begin
    switch(strno) begin
      case 20000: hstr = "You are not logged in";
      case 20001: hstr = "Request for an Enabler failed";
      case 20002: hstr = "Request for an Enabler completed";
      case 20003: hstr = "Select Contract";
      case 20004: hstr = "You have no valid Contract";
      case 20005: hstr = "Contract No.";
      case 20006: hstr = "Thank you for Registering";
      case 20007: hstr = "Something went Wrong";
      case 20008: hstr = "Register for Enabler";
      case 20009: hstr = "We don't have your Fax No. or E-Mail";
      case 20010: hstr = "Not a valid Customer Code";
      case 20011: hstr = "Get your Enabler Key";
      case 20012: hstr = "Unknown Login";
      case 20013: hstr = "Hansa Support";
      case 20014: hstr = "Enabler Key";
      case 20015: hstr = "off";
      case 20016: hstr = "on";
      case 20017: hstr = "Your Request for an Enabler";
      case 20018: hstr = "The product you wish to get a key for is not the same as you have registered with us";
      case 20019: hstr = "You have Outstanding Invoices";
      case 20020: hstr = "Your contract is not OK";
      case 20021: hstr = "Your contract has not been signed";
      case 20022: hstr = "The Contract is not valid, could be Invoices overdue";
      case 20023: hstr = "Here is your password: ";
      case 20024: hstr = "Registration Password";
      case 20025: hstr = "Return to Login";
      case 20026: hstr = "Logout";
      case 20027: hstr = "Main Menu";
      case 20028: hstr = USetStr(1781); // "Something went technically wrong.";
      case 20029: hstr = "The Fax or E-Mail could not be sent.";
      case 20030: hstr = USetStr(1776); // "You should check your System Usage/Configurations, it doesn't match our information.";
      case 20031: hstr = "You will probably need to contact your local Hansa office.";
      case 20032: hstr = "A Fax is beeing sent to the following number: ";
      case 20033: hstr = "An E-mail is beeing sent to the following address: ";
      case 20034: hstr = "You must contact your local Hansa office.";
      case 20035: hstr = "Your date is not valid, enter a proper date.";
      case 20036: hstr = USetStr(1777); // "You are only allowed to use versions that you used when you ended your contract with us.";
      case 20037: hstr = USetStr(1778); // "Your application may not receive an enabler on this site.";
      case 20038: hstr = USetStr(1780); // "You are not registered properly with us.";
      case 20039: hstr = "Control String:";
      case 20040: hstr = "Control Code";
      case 20041: hstr = "Valid Until: YY";
      case 20042: hstr = "MM";
      case 20043: hstr = "DD";
      case 20044: hstr = "Receive the key via Fax to: ";
      case 20045: hstr = "Receive the key via E-mail to: ";
      case 20046: hstr = "Receive the password via Fax to: ";
      case 20047: hstr = "Receive the password via E-mail to: ";
      case 20048: hstr = "You have already registered but you may continue to get a new password.";
      case 20049: hstr = "Log In"; //USetStr(20502); // Why, I mean, 20502 IS Log In...
      case 20050: hstr = "Register";
      case 20051: hstr = "Cust.Code";
      case 20052: hstr = "Password"; //USetStr(20503); // Why, I mean, 20503 IS Password...
      case 20053: hstr = "Save";
      case 20054: hstr = "Show All";
      case 20055: hstr = "Select One";
      case 20056: hstr = "Read More";
      case 20057: hstr = "NEWS";
      case 20058: hstr = USetStr(20505);
      case 20059: hstr = USetStr(20504);
      case 20060: hstr = USetStr(20509);
      case 20061: hstr = "URL";
      case 20062: hstr = USetStr(20508);
      case 20063: hstr = USetStr(20510);
      case 20064: hstr = "Message (max 250 char)";
      case 20065: hstr = "Choose Country";
      case 20066: hstr = USetStr(20513);
      case 20067: hstr = USetStr(20514);
      case 20068: hstr = USetStr(20515);
      case 20069: hstr = USetStr(20506) & " 1";
      case 20070: hstr = USetStr(20506) & " 2";
      case 20071: hstr = USetStr(20506) & " 3";
      case 20072: hstr = USetStr(20506) & " 4";
      case 20073: hstr = USetStr(20506) & " 5";
      case 20074: hstr = "Send Question";
      case 20075: hstr = "From";
      case 20076: hstr = "To";
      case 20077: hstr = USetStr(1779); // "The date is after the end of your contract, please change it";
      case 20078: hstr = "here is your key";
      case 20079: hstr = "here is your password";
      case 20080: hstr = "Due to licence rules, you may only ask for an enabler that lasts until";
      case 20081: hstr =  USetStr(20501);
      case 20082: hstr =  USetStr(20507);
      case 20083: hstr =  USetStr(20511);
      case 20084: hstr =  USetStr(20512);
      case 20085: hstr =  USetStr(20516);
      case 20086: hstr =  USetStr(20517);
      case 20087: hstr =  USetStr(20518);
      case 20088: hstr =  USetStr(20519);
      case 20089: hstr =  USetStr(20520);
      case 20090: hstr =  USetStr(20521);
      case 20091: hstr =  USetStr(20522);
      case 20092: hstr =  USetStr(20523);
      case 20093: hstr =  USetStr(20524);
      case 20094: hstr =  USetStr(20525);
      case 20095: hstr =  USetStr(20526);
      case 20096: hstr =  USetStr(20527);
      case 20097: hstr =  USetStr(20528);
      case 20098: hstr =  USetStr(20529);
      case 20099: hstr =  USetStr(20530);
      case 20100: hstr =  USetStr(20531);
      case 20101: hstr =  USetStr(20532); // Order
      case 20102: hstr =  USetStr(20533); // Removed. Use 20049
      case 20103: hstr =  USetStr(20534);
      case 20104: hstr =  USetStr(20535);
      case 20105: hstr =  USetStr(20536);
      case 20106: hstr =  USetStr(20537);
      case 20107: hstr =  USetStr(20538);
      case 20108: hstr =  USetStr(20539);
      case 20109: hstr =  USetStr(20540);
      case 20110: hstr =  USetStr(20541);
      case 20111: hstr =  USetStr(20542);
      case 20112: hstr = "Choose Category";      
      case 20113: hstr = "Please, fill all necessery data.";
      case 20114: hstr = "Please, try again.";
      case 20115: hstr = "Lead Customer is not registered or error in Org. No.";
      case 20116: hstr = "You are not registered as Partner or error in Org. No.";
      case 20117: hstr = "You are not registered as Partner.";
      case 20118: hstr = "You can not perform this action. Lead already registered.";
      case 20119: hstr = "Confirm";
      case 20120: hstr = "Private Network Sales";
      case 20121: hstr = "Lead has been registered.";
      case 20122: hstr = "Selected Source";
      case 20123: hstr = "Selected Industry";
      case 20124: hstr = "Lead VAT Reg. No.";
      case 20125: hstr = "Source";
      case 20126: hstr = "Industry";
      case 20127: hstr = "Open distribution";
      case 20128: hstr = "New Customer Code";
      case 20129: hstr = "HansaWorld FirstOffice (Single User)";
      case 20130: hstr = "HansaWorld Express (or other Small Business Product)";
      case 20131: hstr = "HansaWorld Standard ERP";
      case 20132: hstr = "Entire Range";
      case 20133: hstr = "Not Sure";
      case 20134: hstr = "I am interested in (*)";
      case 20135: hstr = "Customer Interested in:";
      case 20136: hstr =  USetStr(20542);
      case 20137: hstr = "in other languages";
      case 20138: hstr = "Previous";
      case 20139: hstr = "Next";
      case 20140: hstr = "Entire Chapter in Printable Form";
      case 20141: hstr = "Top";
      case 20142: hstr = "This part of the manual is from version";
      case 20143: hstr = "Search";
      case 20144: hstr = "Not logged in";
      case 20145: hstr = "Max Hits";
      case 20146: hstr = "Search for";
      case 20147: hstr = "Item Search";
            
      case 20150: hstr = "Maintenance until";// followed by a date
      case 20151: hstr = "Credit Card";
      case 20152: hstr = "Paypal";
      case 20153: hstr = "Reset password";
      case 20154: hstr = "Customer Code";
      case 20155: hstr = "Payment reference number";
      case 20156: hstr = "Amount to pay";
      case 20157: hstr = "Payment with";
      case 20158: hstr = "Credit card number";
      case 20159: hstr = "Credit card expiry date (MM/YYYY)";
      case 20160: hstr = "Card Verification Code";
      case 20161: hstr = "Credit card start date (MM/YYYY)";
      case 20162: hstr = "Issue Number";
      case 20163: hstr = "Address";
      case 20164: hstr = "Post Code";
      case 20165: hstr = "What is Card Verification Code?";
      case 20166: hstr = "Mandatory field";
      case 20167: hstr = "For AMEX, Maestro and Solo";
      case 20168: hstr = "Required by some Switch, Solo and Laser cards";
      case 20169: hstr = "The payment will be authorised online. This process may take up to 60 seconds";
      case 20170: hstr = "Back to the Web Shop";
      case 20171: hstr = "Credit Card Payment";
      case 20172: hstr = "Creditcard number may only contain numbers";
      case 20173: hstr = "Creditcard number must be 16 characters long";
      case 20174: hstr = "CVC number may only contain numbers";
      case 20175: hstr = "CVC number must be 3 characters long";
      case 20176: hstr = "Error in startdate entry";
      case 20177: hstr = "Error in startdate, month must be 2 digits long";
      case 20178: hstr = "Error in startdate, year must be 4 digits long";
      case 20179: hstr = "Order has already been paid, please return to the Web Shop";
      case 20180: hstr = "Payment failed due to technical reasons, please try again";
      case 20181: hstr = "Transaction unsuccessful. Please use an alternative card.";
      case 20182: hstr = "Payment failed due to technical reasons, please try again";
      case 20183: hstr = "Please check your card details and try again";
      case 20184: hstr = "(optional)";
      case 20185: hstr = "Optional field";
      case 20186: hstr = "List all adds";
      case 20187: hstr = "Show me all news";
      case 20188: hstr = "Apx. Cost";
      case 20189: hstr = USetStr(20603);      
      case 20190: hstr = "Transaction cannot be found";
      case 20191: hstr = "This payment has already been completed";
      case 20192: hstr = "Transaction values do not match.";
      case 20193: hstr = "An error occurred during payment. Payment was not completed.";
      case 20194: hstr = USetStr(1803); // Invoice
      case 20195: hstr = "Place Order";
      case 20196: hstr = "Order Details";
      case 20197: hstr = "Invoice Details";
      case 20198: hstr = "Select Country";
      case 20199: hstr = "Language";
      case 20200: hstr = "Full Name";
      case 20201: hstr = "Search result for product: ";
      case 20202: hstr = "No products found";
      case 20203: hstr = " category: ";

      case 20210: hstr = "Add a new delivery address";
      case 20211: hstr = USetStr(20601);
      case 20212: hstr = USetStr(20600);
      case 20213: hstr = USetStr(20602);
      case 20214: hstr = "Purchase Order";
      case 20215: hstr = "PAY";
      case 20216: hstr = "CONFIRMATION";
      case 20217: hstr = "Please find below the details of your purchase.";
      case 20218: hstr = "Order Number";
      case 20219: hstr = "Date";
      //case 20220: hstr = "Invoice Details"; //not used, can be reused
      case 20221: hstr = "Back to the Web Shop";
      case 20222: hstr = "Couldn't perform credit card payment. Check your account!";
      case 20223: hstr = "Dear";
      case 20224: hstr = "The purchase orders were stored. Please see details in the Purchase Order Journal";
      case 20225: hstr = "Something prevented the purchase orders from beeing created.";
      case 20226: hstr = "Order Date";
      case 20227: hstr = "Order No.";
      case 20228: hstr = "Payment Reference No.";
      case 20229: hstr = "Your Reference";
      case 20230: hstr = "Planned Delivery";
      case 20231: hstr = "Delivery Mode";
      case 20232: hstr = "Invoice Address";
      case 20233: hstr = "Paid with Credit Card";
      case 20234: hstr = "Customer Fax";
      case 20235: hstr = "Customer VAT Number";
      case 20236: hstr = "Discount";
      case 20237: hstr = "Sum";
      case 20238: hstr = "Currency";
      case 20239: hstr = "TO PAY :";
      case 20240: hstr = "Reg. No.";
      case 20241: hstr = "Vat No.";
      case 20242: hstr = "Internet";
      case 20243: hstr =  USetStr(31339);
      
      case 20250: hstr = "Payment in progress";
      case 20251: hstr = "Your session timed out and you have been logged out. Please check your email to see the status of your payment.";
      case 20252: hstr = "Waiting for Credit Card authorisation";
      case 20253: hstr = "Please wait";
      case 20254: hstr = "Please check your email";
      case 20255: hstr = "The transaction took longer than expected, but is still being attempted by our server.";
      case 20256: hstr = "You will receive an email when the transaction has completed.";
      case 20257: hstr = "Payment was not processed, the card was rejected. Please check your details and try again.";
      case 20258: hstr = "Payment was not processed for an unspecified reason.";
      case 20259: hstr = "";

      //IS Website
      case 20300: hstr = "Not available in your version";
      case 20301: hstr = "All countries";
      case 20302: hstr = "Related services";
      case 20303: hstr = "Setup fee";
      case 20304: hstr = "No of units";
      case 20305: hstr = "Price";
      case 20306: hstr = "Price per additional unit";
      case 20307: hstr = "Buy";
      case 20308: hstr = "N/A";
      case 20309: hstr = "Voucher";
      case 20310: hstr = "Validity period";
      case 20311: hstr = "Package details";
      case 20312: hstr = "For package details and pricing information, please contact your nearest HansaWorld office.";
      case 20313: hstr = "For package details and pricing information, please log in or contact your nearest HansaWorld office.";
      case 20314: hstr = "Subscription";
      case 20315: hstr = "Tariff Option"; //package
      case 20316: hstr = "Buy additional";
      case 20317: hstr = "Change existing subscription";
      case 20318: hstr = "Select a payment option:";
      case 20319: hstr = "Get Invoice";
      case 20320: hstr = "Info / Pricing";
      case 20321: hstr = "More Info";
      case 20322: hstr = "<b>Please note</b>, that your country is not set up for online payments. Please contact your nearest HansaWorld office to complete this purchase.";
      case 20323: hstr = "An error occurred setting up your new services. Please contact your nearest HansaWorld office.";
      case 20324: hstr = "Type";
      case 20325: hstr = "Start Date";
      case 20326: hstr = "End Date";
      case 20327: hstr = "No of Units";
      case 20328: hstr = "Units left";
      case 20329: hstr = "Change Tariff";
      case 20330: hstr = "Please wait while we check your details...";
      case 20331: hstr = "Generating report. Please wait...";
      case 20332: hstr = "Checking your existing services...";
      case 20333: hstr = "Setting up your new services...";
      case 20334: hstr = "The Internet Services Registration Server appears to be offline.<br>Please try again in 5 minutes.";
      case 20335: hstr = "You are not currently subscribed to any services.";
      case 20336: hstr = "Cancelling service subscription...";
      case 20337: hstr = "Updating service subscription...";
      case 20338: hstr = "Unknown service";
      
      case 20340: hstr = "Subscription"; //package
      case 20341: hstr = "Price per use"; //extra clicks
      case 20342: hstr = "First Page";
      case 20343: hstr = "Extra Pages";
      case 20344: hstr = "Default Priority Postage";
      case 20345: hstr = "Heavy Priority Postage";
      case 20346: hstr = "Default Economy Postage";
      case 20347: hstr = "Heavy Economy Postage";
      
      case 20350: hstr = "Current Tariff Detail";
      case 20351: hstr = "Are you sure you want to cancel the selected service subscription?";
      case 20352: hstr = "Cancel";
      case 20353: hstr = "Choose new tariff";
      case 20354: hstr = "Are you sure you want to modify your service subscription?";
      case 20355: hstr = "Select";
      case 20356: hstr = "No service packages available online";
      case 20357: hstr = "Status";
      case 20358: hstr = "Active";
      case 20359: hstr = "Disabled";
      case 20360: hstr = "Requires contract";
      case 20361: hstr = "Disable";
      case 20362: hstr = "Are you sure you want to disable the selected service? If you disable a service, you cannot use it until you activate it again. Please read the Terms and Conditions.";
      case 20363: hstr = "Setup tariff";
      case 20364: hstr = "Contact us";
      case 20365: hstr = "Remove";
      case 20366: hstr = "You are not logged in.  Please log in to manage your Internet Services.";
      case 20367: hstr = "Are you sure you want to remove this tariff option?";
      case 20368: hstr = "Unknown";
      case 20369: hstr = "Activate";
      case 20370: hstr = "Are you sure you want to activate the selected service? This may result in monthly and usage charges. Before continuing, make sure you read the Terms and Conditions.";
      case 20371: hstr = "View tariffs";
      case 20372: hstr = "Monthly fee";
      case 20373: hstr = "Usage fee";
      case 20374: hstr = "Show usage";
      case 20375: hstr = "Default Tariff";
            
      //the following web text is there only temporarily and will be removed. Only used for IS Webshop while under development.
      case 20400: hstr = "The feature you have requested is still under development.  Please navigate to back to the previous page and select a different option.";
      
      case 20401: hstr = "SmartApps Payment";
      case 20402: hstr = "Current balance of your account";
      case 20403: hstr = "Suggested Amount to pay";
      case 20404: hstr = "How much do you wish to pay into your SmartApps account";
      case 20405: hstr = "Top-up";
      case 20406: hstr = "You cannot pay less than the minimum amount.";
      case 20407: hstr = "Amount in local currency";
      case 20408: hstr = "Please note that you credit card will be charged in";
      
      case 20415: hstr = "Sum";
      case 20416: hstr = "";
      
/* These are taken from the Langauge files, or if you have them in Webtexts...
7668,7668,7669,7669,7687,7688,7689,7690,7691,7692,7692,
7693,7694,7694,7694,7694,7696,7697,7698,7699,7700,7702,
7703,7705,7707,7708,7709,7710,7711,7712,7713,7713,7714,
7715,7716,7722,7723,7724,7724,7725,7725,7726,7726,7727,
7728,7729,7729,7749,7750,7751,7752,7753,7753,7754,7754,
7755,7755,7757,7758,7759,7770,7850,7851,7853,7854,7855,
7856,7857,7858,7859,7860,7861,7862,7863,7852

     and many more.....

*/
    end;
  end;
  if (blank(hstr)) then begin
    //ksz::this shows some strange texts. lets avoid this
    //hstr = USetStr(strno);
  end;
  return;
end;

global
procedure ToolWebGetTheText(Integer strno,var string hstr)
begin
  ToolWebGetTheTextWithLangCode(strno,hstr,GetWebLanguage);
  return;
end;

global
function string 200 ToolWebReturnTheText(Integer strno)
begin
  string 200 tstr;
  
  ToolWebGetTheText(strno,tstr);
  ToolWebReturnTheText = tstr;
  return;
end;

procedure CutStringNicely(var string tstr)
begin
  string 255 tstr2;
  string 10 astr;
  Integer i,slen;
  Integer apoint;
  Integer aspace;
  
  apoint = 0;
  aspace = 0;
  tstr2 = tstr;
  slen = len(tstr2)-1;
  for (i=slen;i>0;i=i-1) begin
    astr = Mid(tstr2,i,1);
    if (astr==".") then begin
      apoint = i+1;
      i = 0;
    end;
    if (aspace==0) then begin
      if (astr==" ") then begin
        aspace = i;
      end;
    end;
  end;
  if (apoint>0) then begin
    if (apoint>slen-80) then begin
      tstr = Left(tstr2,apoint);
    end else begin
      tstr = Left(tstr2,aspace);
    end;
  end;
  return;
end;

global
procedure ToolWebGetTextLang(record MailVc Mailr,LongInt nrofchrs,record MailVc Mail2r,string langcode)
begin
  record NotepadVc Noter;
  record RLinkVc RLr;
  Integer cnt;
  Boolean printf;
  string 255 tstr;

  printf = false;
  cnt = 1;
  RecordNew(Mail2r);
  while (ReadRecordLink(Mailr,cnt,Noter,RLr)) begin
    cnt = cnt + 1;
    if (langcode==Noter.LangCode) then begin // WebLanguage(1)
      tstr = StringFromText(Noter,0,nrofchrs);
      Mail2r.Header = RLr.Comment;
      printf = true;
      goto LWebGetTextLang;
    end;
  end;
  if (printf==false) then begin
    tstr = StringFromText(Mailr,0,nrofchrs);
    Mail2r.Header = Mailr.Header;
  end;
LWebGetTextLang:;
  CutStringNicely(tstr);
  AddToText(tstr,Mail2r);
  return;
end;

global
procedure GetConfInfo(string thecode,var string confname,var string confcode,var LongInt maxmail)
begin
/*
  record WebConferenceBlock WCfr;
  row WebConferenceBlock WCfrw;
  Integer i,rwcnt;
  Integer oldcomp;
  Boolean res;
  
  oldcomp = CurrentCompany;  
  res = SetCompany(1,false);
  BlockLoad(WCfr);
  rwcnt = MatRowCnt(WCfr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WCfr,i,WCfrw);
    if (WCfrw.Code==thecode) then begin
      confname = WCfrw.WebConf;
      maxmail = WCfrw.MailQty;
      i = rwcnt;
    end;
  end;
*/
  record ConfAliasVc CFr;
  Integer oldcomp;
  Boolean res,foundf;
  
  CFr.Code = thecode;
  oldcomp = CurrentCompany;  
  foundf = ReadFirstMain(CFr,1,true);
  if (foundf==false) then begin
    res = SetCompany(1,false);
    CFr.Code = thecode;
    foundf = ReadFirstMain(CFr,1,true);
  end;
  if (foundf) then begin
    confname = CFr.WebConf;
    maxmail = CFr.MailQty;
  end;
  ResetCompany(oldcomp);
  GetConfCode(confname,confcode);
  return;
end;

global
updating procedure ToolWebAddCounter(string thelink)
begin
  record MailVc Mail;
  row MailVc Mailrw;
  record MailVc oldMail;
  record ShopBaskVc Shop;
  record ShopBaskVc Shop2;
  record ShopBaskVc oldShop;
  record WebControlBlock WCr;
  record MailSettingsBlock MSr;
  string 60 confname;
  string 60 confcode;
  LongInt maxmail;
  string 10 countcode;
  Date today;
  Boolean foundf,foundf2;
  Boolean dayfoundf,mailstored;
  Integer error;
  Boolean updatf;
  Integer oldcomp;
  Boolean res;
  
  oldcomp = CurrentCompany;  
  res = SetCompany(1,false);
  BlockLoad(WCr);
  BlockLoad(MSr);
  today = CurrentDate;
  countcode = "COUNTER";
  RecordNew(Mail);
  Mail.SerNr = -1;
  RecordNew(Shop);
  RecordNew(oldShop);
  Shop.CUCode = countcode;
  Shop.ItemCode = thelink;
  Shop.DestinationNr = -1;
  dayfoundf = false;
  foundf = true;
  while (LoopKey("CUItemCode",Shop,3,foundf)) begin
    if ((Shop.CUCode<>countcode) or (Shop.ItemCode<>thelink)) then begin
      foundf = false;
    end;
    if (foundf) then begin
      if (Shop.TransDate==today) then begin
        RecordCopy(oldShop,Shop);
        Shop.Qty = Shop.Qty + 1;
        error = RecordUpdate(oldShop,Shop,true);
        dayfoundf = true;
        foundf = false;
      end;
    end;
  end;
  if (dayfoundf==false) then begin
    if (countcode==thelink) then begin
      updatf = false;
      mailstored = false;
L11:;
      Shop.CUCode = countcode;
      Shop.ItemCode = thelink;
      Shop.DestinationNr = -1;
      if (ReadFirstKey("CUItemCode",Shop,3,true)) then begin
        if (Shop.TransDate<>today) then begin
          if ((updatf) and (mailstored)) then begin
            error = RecordUpdate(oldMail,Mail,true);
            mailstored = false;
            RecordNew(Mail);
            Mail.SerNr = -1;
          end;
          if (Mail.SerNr==-1) then begin
            Mail.SendFlag = 1;
            Mailrw.RowTyp = 1;
            Mailrw.AddrCode = MSr.Postmaster;
            MatRowPut(Mail,0,Mailrw);
            Mailrw.RowTyp = 0;
            Mailrw.AddrCode = WCr.NewsConf;
            MatRowPut(Mail,1,Mailrw);
            Mail.Header = ValToString(Shop.Qty,M4UVal,"","",0) & " hits on the " & Shop.TransDate;
            mailstored = RecordInsert(Mail,false);
            RecordCopy(oldMail,Mail);
          end;
        end;
      end else begin
        mailstored = false;
      end;
L22:;
      if (mailstored) then begin
        foundf2 = true;
        ResetLoop(Shop2);
        Shop2.CUCode = Shop.CUCode;
        Shop2.DestinationNr = -1;
        while (LoopKey("CUCode",Shop2,2,foundf2)) begin
          if ((Shop2.CUCode<>countcode) or (Shop2.DestinationNr<>-1)) then begin
            foundf2 = false;
          end;
          if (foundf2) then begin
            if ((Shop2.TransDate==Shop.TransDate)) then begin
              if (Shop2.ItemCode<>thelink) then begin
                confname = "";
                GetConfInfo(Shop2.ItemCode,confname,confcode,maxmail);
                if (Shop2.Qty==1) then begin
                  AddToText(ValToString(Shop2.Qty,M4UVal,"","",0) & " hit in " & confname & Chr(13) & Chr(10),Mail);
                end else begin
                  AddToText(ValToString(Shop2.Qty,M4UVal,"","",0) & " hits in " & confname & Chr(13) & Chr(10),Mail);
                end;
              end;
              RecordCopy(oldShop,Shop2);
              Shop2.DestinationNr = Mail.SerNr;
              error = RecordUpdate(oldShop,Shop2,true);
              updatf = true;
              goto L22;
            end;
          end;
        end;
        RecordCopy(oldShop,Shop);
        Shop.DestinationNr = Mail.SerNr;
        error = RecordUpdate(oldShop,Shop,true);
        goto L11;
      end;
      if (updatf) then begin
        error = RecordUpdate(oldMail,Mail,true);
      end;
    end;
    RecordNew(Shop);
    Shop.CUCode = countcode;
    Shop.ItemCode = thelink;
    Shop.Qty = 1;
    Shop.TransDate = today;
    foundf = RecordInsert(Shop,false);
  end;
  ResetCompany(oldcomp);
  return;
end;

global
updating function Boolean StoreLetAsAct(record LetVc Letr,var record ActVc Actr)
begin
  record NotepadVc Noter;
  Integer i,rwcnt;
  string 255 tstr;
  Boolean res;
  
  RecordNew(Actr);
  Actr.TransDate = CurrentDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.MainPersons = "WEB";
  Actr.OKFlag = 1;
  Actr.CUCode = Letr.CustCode;
  Actr.CUName = Letr.Name;
  Actr.Comment = Letr.Header;
  Actr.LangCode = Letr.LangCode;
  if (RecordStore(Actr,false)) then begin 
    Noter.SerNr = NextSerNr("NotepadVc",Actr.TransDate,-1,false,"");
    if (nonblank(Letr.Greet)) then begin
      ToolWebGetTheText(20079,tstr);
      LineTextPut(Noter,0,tstr & ": " & Letr.Greet);
    end else begin
      rwcnt = LineTextCnt(Letr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(Letr,i);
        LineTextPut(Noter,i,tstr);
      end;  
    end;  
    if (RecordStore(Noter,false)) then begin
      CreateRecordLink(Actr,CurrentCompany,Noter,CurrentCompany);
    end;
    res = true;
  end;
  StoreLetAsAct = res;
  return;
end;

updating Function Boolean RegLetterToEMailQueue(record LetVc Letr)
begin
  record EMailQueVc EMQr;
  row EMailQueVc EMQrw;
  Boolean res;
  record EmailBlock EMBr;
  LongInt i,rwcnt;
  string 255 tstr;

  res = true;
  BlockLoad(EMBr);
  RecordNew(EMQr);
  EMQr.QueDate = CurrentDate;
  EMQr.TransDate = CurrentDate;
  EMQr.OrgSerNr = -1;
  EMQr.FileName = ""; // LetVc?
  EMQr.QueTime = CurrentTime;
  EMQr.TransTime = CurrentTime;
  EMQr.EMailSent = 0;
  EMQr.Header = Letr.Header;
  EMQrw.RowTyp = 1;
  EMQrw.AddrCode = EMBr.UserIP;
  if (blank(EMQrw.AddrCode)) then begin
    ToolWebGetTheText(20013,tstr);
    EMQrw.AddrCode = tstr;
  end;
  MatRowPut(EMQr,0,EMQrw);
  EMQrw.RowTyp = 0;
  EMQrw.AddrCode = Letr.emailAddr;
  if (blank(EMQrw.AddrCode)) then begin
    res = false;
  end else begin
    MatRowPut(EMQr,1,EMQrw);
    rwcnt = LineTextCnt(Letr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(Letr,i);
      LineTextPut(EMQr,i,tstr);
    end;
    ToolWebGetTheText(20023,tstr);
    LineTextPut(EMQr,i,tstr & Letr.Greet);
    EMQr.SerNr = NextSerNr("EMailQueVc",EMQr.QueDate,-1,false,"");
    if (RecordStore(EMQr,true)==false) then begin 
      res = false;
    end;
  end;
  RegLetterToEMailQueue = res;
  return;
end;

global
updating Function Boolean ToolWebRegisterAndSendLetter(record CUVc CUr,string passwd,Boolean sendfax,Boolean sendemail)
begin
  record ActVc Actr;
  record LetVc Letr;
  Boolean res,tmpf;
  string 60 emailaddr;
  string 200 tstr;

  res = true;
  RecordNew(Letr);
  Letr.CustCode = CUr.Code;
  Letr.Name = CUr.Name;
  ToolWebGetTheText(20024,tstr);
  Letr.Header = tstr;
  Letr.DocName = "";
  Letr.Greet = passwd;
  Letr.OKFlag = 1;
  Letr.AllCont = kAllContCustomerEmail;
  Letr.Printdf = 0;
  Letr.Addr0 = CUr.InvAddr0;
  Letr.Addr1 = CUr.InvAddr1;
  Letr.Addr2 = CUr.InvAddr2;
  Letr.Addr3 = CUr.InvAddr3;
  Letr.Addr4 = CUr.InvAddr4;
  Letr.LangCode = "PWDFX";
  Letr.Fax = CUr.Fax;
  GetCustEmail(CUr,emailaddr);
  Letr.emailAddr = emailaddr;
  Letr.TransDate = CurrentDate;
  Letr.SerNr = NextSerNr("LetVc",Letr.TransDate,-1,false,"");
  AddTextLineToLetter(" ",Letr);
  if (StoreLetAsAct(Letr,Actr)) then begin 
    if (sendfax) then begin
      res = PrintDocument(Actr,"ActDocForm",false);
    end;
    if (sendemail) then begin
      res = RegLetterToEMailQueue(Letr);
    end;
  end else begin
    res = false;
  end;
  ToolWebRegisterAndSendLetter = res;
  return;
end;

global
procedure GeneratePassword(record CUVc CUr,var string passwd,Integer passlen)
begin
  string 100 ast;
  LongInt pos;
  LongInt i;
  
  passwd = "";
  ast = "C3DrsEJbGcKLM5Nuvw89PQijRS67pqThkUVW24XYZadefgFHAmnotxyz1Bes8"; // 61 characters
  for (i=0;i<passlen;i=i+1) begin
    pos = Random(0,61);
    passwd = passwd & Mid(ast,pos,1);
  end;
  return;
end;
