external function Boolean FindTheUser(var record UserVc);
external function Date DateFromString(string,string);
external Function Boolean WebHBSDivPublicMain(string,string,LongInt,LongInt,Boolean,Boolean);
external function string 60 GetWHUCountryCode2(Integer);
external procedure ToolWebStartPage();
external procedure ToolWebStartBody(string);
external procedure ToolWebEndPage(Boolean);
external procedure ToolWebSetMainTitle();

external procedure ToolWebStartTable();
external procedure ToolWebEndTable();
external procedure ToolWebMenuItem(string,string,string,string,var Integer);

external function string 255 ToolWebBuildLink(string,string);
external procedure ToolWebHBSDivStartPage();
external procedure ToolWebHBSDivSetMainTitle();
external procedure ToolWebHBSDivStartBody(string,string);
external procedure ToolWebLineStart();
external procedure ToolWebLineEnd();
external procedure ToolWebHBSDivEndPage();
external function string 200 GetWebLanguage();
external procedure ToolWebHBSDivPrintHeaderLang(string,string,string);
external function string 200 ToolWebReturnTheText(Integer);
external procedure GetConfInfo(string,var string,var string,var LongInt);
external procedure ToolWebGetTheText(Integer,var string);
external function Boolean GetNextCustNr(var string);

external procedure WebOutStringNL(string);
external function string 255 TranslateString(string,string);
external procedure GetCourseStr(record CourseVc,var string,var string,var string,string,var boolean);
external procedure WebSetLanguage(var string);
external procedure CourseEventVc_UpdatePrice(var record CourseEventVc);
external procedure HT2Per(Date, Date , var string);

external procedure HWUShowQuestion(record UnivTestAnswerVc,integer,string,integer,boolean);

procedure WebHWUSendRefreshHTML(string newaddress,integer delay,boolean htmlenvelope)
begin
  boolean debug;
  debug = false;
    
  if (htmlenvelope) then begin
    ToolWebStartPage;
    ToolWebSetMainTitle;
    ToolWebStartBody("");
  end;
  WebOutString("Please Wait...");
  WebOutString("<br><img src=""art/anim_clock.gif"">");
  
  WebOutString("<form id=""webhwuhf"" method=""POST"" action=""");
  if (debug) then begin
    WebOutString(newaddress);
  end else begin
    WebOutLink(newaddress);
  end;
  WebOutString(""">");
  WebOutString("</form>");
  if (debug==false) then begin
    WebOutString("<script>");
    WebOutNL;
    WebOutString("<!--");
    WebOutNL;
    WebOutString("setTimeout('document.getElementById(""webhwuhf"").submit()'," & delay * 1000 & ");");
    WebOutString("//-->");
    WebOutNL;
    WebOutString("</script>");
  end;
  if (htmlenvelope) then begin
    ToolWebEndPage(true);
  end;
  return;
end;

function Time GetTime(string t)
begin
  Time t2;
  string 20 tstr;
  if (len(t)>=6) then begin
    tstr = left(t,2) & ":";
    tstr = tstr & mid(t,2,2) & ":";
    tstr = tstr & mid(t,4,2);
    t2 = tstr;
  end;
  GetTime = t2;
  return;
end;

function string 255 ToTimeString(Time t)
begin
  string 255 res,tstr;

  if (nonblank(t)) then begin
    tstr = "" & t.hour;
    if (len(tstr)<2) then begin tstr = "0" & tstr; end;
    res = tstr;
    tstr = "" & t.minute;
    if (len(tstr)<2) then begin tstr = "0" & tstr; end;
    res = res & tstr;
    tstr = "" & t.second;
    if (len(tstr)<2) then begin tstr = "0" & tstr; end;
    res = res & tstr;
  end else begin
    res = "000000";
  end;
  ToTimeString = res;
  return;
end;

global
procedure WebHWUUnivTARefresh()
begin
  record UnivTestAnswerVc Answerr;
  string 255 refreshaction,correct_answers,nrofqs,newaddress,course,p_cc,pagelook;
  integer oldcomp,thecomp;
  Integer rw;
  Date enddate;
  Time starttime;
  boolean handled,res,htmlenvelope;
  integer rownr;
  string 255 navdir,startnav;
  string 255 nextpage,langcode,type;

  type = WebGetArg("type");
  refreshaction = WebGetArg("refact");
  pagelook = WebGetArg("plook");
  langcode = WebGetArg("langcode");
  thecomp = StringToInt(WebGetArg("thecomp"));
  oldcomp = CurrentCompany;
  if (thecomp>0 and thecomp!=oldcomp) then begin
    res = SetCompany(thecomp,false);
  end;
  if (res==false) then begin
    thecomp = oldcomp;
  end;

  switch (refreshaction) begin
    case "hwuans":
      course = WebGetArg("course");
      p_cc = WebGetArg("p_cc");
      enddate = DateFromString(WebGetArg("ed"),"YYYYMMDD");
      starttime = GetTime(WebGetArg("st"));
      correct_answers = WebGetArg("ans");
      nrofqs = WebGetArg("qs");

      Answerr.CourseCode = course;
      Answerr.CustCode = p_cc;
      Answerr.EndDate = enddate;
      Answerr.StartTime = starttime;
      if (ReadFirstMain(Answerr,4,true)) then begin
        if (pagelook=="intranet") then begin
          ToolWebStartPage;
          ToolWebSetMainTitle;
          ToolWebStartBody("");
        end;
        if (pagelook=="hworld") then begin
          ToolWebHBSDivStartPage;
          ToolWebHBSDivSetMainTitle;
          ToolWebHBSDivStartBody("","");
        end;
        ToolWebStartTable;
        if (pagelook=="intranet") then begin
          ToolWebMenuItem("<b><big>" & "Thank you! You have " & Answerr.CorrectAnswers & " correct answers on " & Answerr.NoOfQuestions & " questions." & "</b></big>","WebMainUser.hal","","",rw);
        end;
        if (pagelook=="hworld") then begin
          ToolWebMenuItem("<b><big>" & "Thank you! You have " & Answerr.CorrectAnswers & " correct answers on " & Answerr.NoOfQuestions & " questions." & "</b></big>","WebHBSDivMain.hal","","",rw);
        end;
        ToolWebEndTable;
        if (pagelook=="intranet") then begin
          ToolWebEndPage(true);
        end;
        if (pagelook=="hworld") then begin
          ToolWebHBSDivEndPage;
        end;
      end else begin
        newaddress = ToolWebBuildLink("WebHWUUnivTARefresh.hal","&type=" & type & "&refact=hwuans" & "&ans=" & correct_answers & "&qs=" & nrofqs & "&course=" & course & "&p_cc=" & p_cc & "&ed=" & enddate & "&st=" & WebGetArg("st") & "&thecomp=" & thecomp & "&langcode=" & langcode & "&ws=" & WebGetArg("ws"));
        WebHWUSendRefreshHTML(newaddress,1,true);
      end;
    case "hwunav":
      course = WebGetArg("course");
      p_cc = WebGetArg("p_cc");
      enddate = DateFromString(WebGetArg("ed"),"YYYYMMDD");
      starttime = GetTime(WebGetArg("st"));
      navdir = WebGetArg("navdir");
      startnav = WebGetArg("startnav");
      rownr = StringToInt(WebGetArg("rownr"));

      handled = false;
      htmlenvelope = false;
      Answerr.CourseCode = course;
      Answerr.CustCode = p_cc;
      Answerr.EndDate = enddate;
      Answerr.StartTime = starttime;
      res = ReadFirstMain(Answerr,4,true);
      if (res or startnav!="1") then begin
        htmlenvelope = true;
        if (pagelook=="intranet") then begin
          ToolWebStartPage;
          ToolWebSetMainTitle;
          ToolWebStartBody("");
        end;
        if (pagelook=="hworld") then begin
          ToolWebHBSDivStartPage;
          ToolWebHBSDivSetMainTitle;
          ToolWebHBSDivStartBody("","");
        end;
        ToolWebStartTable;

        if (res) then begin
          if (Answerr.LastRowUpdated==rownr or startnav=="1") then begin
            switch (navdir) begin
              case "back":
                if (rownr>0) then begin
                  rownr = rownr-1;
                end;
              case "next":
                rownr = rownr+1;
                if (rownr>=MatRowCnt(Answerr)) then begin
                  rownr = MatRowCnt(Answerr)-1;
                end;
            end;
            if (navdir=="finish") then begin

            end else begin
              if (type=="cust") then begin
                HWUShowQuestion(Answerr,rownr,langcode,StringToInt(thecomp),true);
              end else begin
                HWUShowQuestion(Answerr,rownr,langcode,StringToInt(thecomp),false);
              end;
            end;
            handled = true;
          end;
        end else begin
          if (startnav!="1") then begin
            if (pagelook=="intranet") then begin
              nextpage = "WebMainUser.hal";
            end;
            if (pagelook=="hworld") then begin
              nextpage = "WebHBSDivMain.hal";
            end;
            ToolWebMenuItem("<b><big>" & "An error occurred. Could not find Answer record." & "</b></big>",nextpage,"","",rw);
            handled = true;
          end;
        end;
        ToolWebEndTable;
        if (pagelook=="intranet") then begin
          ToolWebEndPage(true);
        end;
        if (pagelook=="hworld") then begin
          ToolWebHBSDivEndPage;
        end;
      end;

      if (handled==false) then begin
        newaddress = ToolWebBuildLink("WebHWUUnivTARefresh.hal","&type=" & type & "&refact=hwunav" & "&rownr=" & rownr & "&navdir=" & navdir & "&plook=" & pagelook & "&course=" & course & "&p_cc=" & p_cc & "&ed=" & enddate & "&st=" & WebGetArg("st") & "&thecomp=" & thecomp & "&langcode=" & langcode & "&ws=" & WebGetArg("ws") );
        WebHWUSendRefreshHTML(newaddress,1,(htmlenvelope==false));
      end;

  end;
  if (res) then begin
    ResetCompany(oldcomp);
  end;
  return;
end;

procedure AddToArray(string CountryCode,
                   string CurncyCode,
                   val value,
                   integer qty,
       	           var array string country_code,
       	           var array string country_cur,
       	           var array val country_val,
       	           var array integer country_participants,
       	           var integer counter)
begin
  integer i;
  boolean foundf;

  foundf = false;
  for(i=0;i<counter;i=i+1) begin
    if(country_code[i] == CountryCode) then begin
      foundf = true;
      country_val[i] = country_val[i] + value;
      country_participants[i] = country_participants[i] + qty;
    end;
  end;

  if(foundf == false) then begin
    country_code[counter] = CountryCode;
    country_cur[counter] = CurncyCode;
    country_val[counter] = value;
    country_participants[counter] =  qty;
    counter = counter + 1;
  end;

  return;
end;


procedure CreateSortArray(var array integer country_participants,
       	                  var integer counter,
       	                  var array integer sort_array)
begin
  integer i,j;
  boolean foundf;
  integer position;

  foundf = false;
  for(i=0;i<counter;i=i+1) begin
     position = 0;
    for(j=0;j<counter;j=j+1) begin
      if(j<>i) then begin
        if(country_participants[i] < country_participants[j]) then begin
          position = position + 1;
        end;
      end;
    end;
    while(sort_array[position] > 0) begin
      position = position + 1;
    end;
    sort_array[position] = i;
  end;

  return;
end;

global
procedure WebCustomHAL5()
begin

  record RcVc RepSpec;
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;
  record CountryVc Countryr;
  integer rw,i,rwcnt;
  string 255 tstr;
  boolean TrHs,testf;
  integer qty,tot_qty;
  val value;
  array string 20 country_code,country_cur;
  array val country_val;
  array integer country_participants;
  array string 20 salesman_code,salesman_cur;
  array val salesman_val;
  array integer salesman_participants;
  array integer sort_array,sort_array2;
  integer counter,counter2,j;
  integer cancelled,tot_cancelled;
  string 60 status;
  string 60 langcode;


  if(WebLoginStatus <> 3) then begin
    WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
    WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">You are not logged in.</td></tr>");
    WebOutStringNL("</table>");
    goto LWebCustomHAL5;
  end;

  WebSetLanguage(langcode);

  RepSpec.repname = "CourseEventJournalRn";
  ReportDefaults(RepSpec,"CourseEventJournalRClass");

//  RepSpec.sStartDate = "1/1/2006";
//  RepSpec.sEndDate = "31/12/2006";

  rw = 1;


  ToolWebHBSDivStartPage;
  ToolWebHBSDivSetMainTitle;
  ToolWebHBSDivStartBody("","");

  WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
  WebOutStringNL("  <tr><th colspan=""4"">" & TranslateString("International Sales",langcode) & "</th></tr>");
//  WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt""><b>Period: 2006-01-01 to 2006-02-15</b></td></tr>");
//  WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">&nbsp;</td></tr>");

  // Heading
  WebOutStringNL("    <tr>");
  WebOutStringNL("      <td class=""feedback-txt""><b>Course</b></td>");
  WebOutStringNL("      <td><b>Cntry</b></td>");
  WebOutStringNL("      <td><b>Date</b></td>");
  WebOutStringNL("      <td><b>Participants</b></td>");
  WebOutStringNL("    </tr>");

//  WebOutStringNL("</table>");


  TrHs = true;
  while (LoopKey("TransDate",CourseEventr,1,TrHs)) begin

    if (TrHs) then begin
      testf = true;

      if (nonblank(RepSpec.f1)) then begin
        if (CourseEventr.CourseCode <> RepSpec.f1) then begin
          testf = false;
        end;
      end;

      if (DateInRange(CourseEventr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
        testf = false;
      end;

      if (RepSpec.ArtMode == 1) then begin
        if (CourseEventr.StatusFlag <> 0) then begin
          testf = false;
        end;
      end;
      if (RepSpec.ArtMode == 2) then begin
        if (CourseEventr.StatusFlag <> 1) then begin
          testf = false;
        end;
      end;

      if (RepSpec.ArtMode == 3) then begin
        if (CourseEventr.StatusFlag <> 2) then begin
          testf = false;
        end;
      end;

      if(nonblank(RepSpec.f2)) then begin
        if(RepSpec.f2 <> CourseEventr.CountryCode) then begin
          testf = false;
        end;
      end;

      if(RepSpec.flags[0]==0) then begin
        if(MatRowCnt(CourseEventr) == 0) then begin
          testf = false;
        end;
      end;


      if (testf) then begin
        qty = 0;
        value = 0;
        cancelled = 0;
        rwcnt = MatRowCnt(CourseEventr);
        for(i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CourseEventr,i,CourseEventrw);
          if(nonblank(RepSpec.f3)) then begin
            if(RepSpec.f3 <> CourseEventrw.Reference) then begin
              goto LSkipOnSalesMan;
            end;
          end;
          if(CourseEventrw.Status == kCourseEventPaticipantStatusPaying or (CourseEventrw.Status==kCourseEventPaticipantStatusNotPaying and RepSpec.flags[1]==1)) then begin
            value = value + CourseEventrw.Price;
            qty = qty + 1;
          end else begin
            cancelled = cancelled + 1;
          end;
LSkipOnSalesMan:;
        end;


        if(RepSpec.flags[0]==0) then begin
          if(qty == 0) then begin
            goto LSkipOnSalesMan2;
          end;
        end;

        WebOutString("<tr>");
        WebOutString("  <td class=""feedback-txt"">" & CourseEventr.CourseName & "</td>");
        WebOutString("  <td>" & CourseEventr.CountryCode & "</td>");
        WebOutString("  <td>" & CourseEventr.TransDate & "</td>");
        WebOutString("  <td align=""center"">" & qty & "</td>");
        WebOutString("</tr>");

/*
        if(RepSpec.flags[2] == 1) then begin
          if(rwcnt > 0) then begin
            StartFormat(15);
            EndFormat;
            StartFormat(15);
            OutString(50,0,"Participant",false);
            OutString(260,0,"Reference",false);
            OutString(1,0,"Status",true);
            EndFormat;
            Gray_Divider(50,1);
          end;
        end;
*/

        for(i=0;i<rwcnt;i=i+1) begin
          //StartFormat(15);
          MatRowGet(CourseEventr,i,CourseEventrw);

          if(nonblank(RepSpec.f3)) then begin
            if(RepSpec.f3 <> CourseEventrw.Reference) then begin
              goto LSkipOnSalesMan3;
            end;
          end;


          if(not(RepSpec.flags[1]==0 and CourseEventrw.Status==kCourseEventPaticipantStatusNotPaying)) then begin
            if(RepSpec.flags[2] == 1) then begin
              /*
              OutString(50,0,CourseEventrw.Person,false);
              OutString(260,0,CourseEventrw.Reference,false);
              switch(CourseEventrw.Status) begin
                case 0:
                  status = "";
                case 1:
                  status = "Cancelled";
                case 2:
                  status = "Non Paying";
              end;
              OutString(1,0,status,true);
              */
            end;

            AddToArray(CourseEventrw.Reference,
         	       CourseEventr.CurncyCode,
                   CourseEventrw.Price,
                   1,
       	           salesman_code,
       	           salesman_cur,
       	           salesman_val,
       	           salesman_participants,
       	           counter2);
          end;
LSkipOnSalesMan3:;
        end;
        if(RepSpec.flags[2] == 1) then begin
          /*
          EndFormat;
          StartFormat(15);
          EndFormat;
          Gray_Divider(0,1);
          */
        end;


        tot_qty = tot_qty + qty;
        tot_cancelled = tot_cancelled + cancelled;

        AddToArray(CourseEventr.CountryCode,
        	       CourseEventr.CurncyCode,
                   value,
                   qty,
       	           country_code,
       	           country_cur,
       	           country_val,
       	           country_participants,
       	           counter);
      end;
LSkipOnSalesMan2:;
    end;
  end;

  WebOutString("<tr>");
  WebOutString("  <td colspan=""3"" class=""feedback-txt"">TOTAL:</td>");
  WebOutString("  <td>" & tot_qty & "</td>");
  WebOutString("</tr>");

  /*
  if(RepSpec.flags[2] == 0) then begin
    Gray_Divider(0,1);
  end;
  StartFormat(15);
  OutString(0,0,"TOTAL",false);
  OutVal(340,0,tot_qty,M40Val,true);
  OutVal(380,0,tot_cancelled,M40Val,true);
  EndFormat;
  */


  CreateSortArray(country_participants,
       	           counter,
       	           sort_array);


  WebOutString("<tr>");
  WebOutString("  <td colspan=""4"" class=""feedback-txt"">&nbsp;</td>");
  WebOutString("</tr>");

  WebOutString("<tr>");
  WebOutString("  <th colspan=""4"">COUNTRY TOP LIST IN PERIOD</td>");
  WebOutString("</tr>");

  WebOutString("<tr>");
  WebOutString("  <td class=""feedback-txt""><b>Country</b></td>");
  WebOutString("  <td><b>Value</b></td>");
  WebOutString("  <td><b>Curncy</b></td>");
  WebOutString("  <td><b>Participants</b></td>");
  WebOutString("</tr>");



/*
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,"COUNTRY TOP LIST IN PERIOD",false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,"Country",false);
  OutString(250,0,"Value",true);
  OutString(400,0,"Participants",true);
  EndFormat;
  Gray_Divider(0,1);
*/

  tot_qty = 0;
  for(i=0;i<counter;i=i+1) begin

    //StartFormat(15);
    WebOutString("<tr>");
    if(blank(country_code[sort_array[i]])) then begin
      //OutString(0,0,"International",false);
      WebOutString("  <td class=""feedback-txt"">International</td>");
    end else begin
      Countryr.Code = country_code[sort_array[i]];
      if(ReadFirstMain(Countryr,1,true)) then begin
        //OutStringID(0,"DblCountryJournal",Countryr.Comment,false,Countryr.Code);
        WebOutString("  <td class=""feedback-txt"">" & Countryr.Comment & "</td>");
      end else begin
        //OutString(0,0,country_code[sort_array[i]],false);
        WebOutString("  <td class=""feedback-txt"">" & country_code[sort_array[i]] & "</td>");
      end;
    end;

    //OutString(250,0,country_val[sort_array[i]],true);
    //OutString(255,0,country_cur[sort_array[i]],false);
    //OutString(400,0,country_participants[sort_array[i]],true);
    WebOutString("  <td class=""feedback-txt"">" & country_val[sort_array[i]] & "</td>");
    WebOutString("  <td class=""feedback-txt"">" & country_cur[sort_array[i]] & "</td>");
    WebOutString("  <td class=""feedback-txt"">" & country_participants[sort_array[i]] & "</td>");
    tot_qty = tot_qty + country_participants[sort_array[i]];
    EndFormat;

  end;

/*
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,"TOTAL",false);
  OutString(400,0,tot_qty,true);
  EndFormat;
*/

  WebOutString("<tr>");
  WebOutString("  <td colspan=""3"" class=""feedback-txt"">TOTAL:</td>");
  WebOutString("  <td>" & tot_qty & "</td>");
  WebOutString("</tr>");




  CreateSortArray(salesman_participants,
       	          counter2,
       	          sort_array2);


/*
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  EndFormat;
  StartFormat(15);
  OutString(0,0,"SALES MAN TOP LIST IN PERIOD",false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,"Sales Man",false);
  OutString(250,0,"Value",true);
  OutString(400,0,"Participants",true);
  EndFormat;
  Gray_Divider(0,1);
*/
  WebOutString("<tr>");
  WebOutString("  <td colspan=""4"" class=""feedback-txt"">&nbsp;</td>");
  WebOutString("</tr>");

  WebOutString("<tr>");
  WebOutString("  <th colspan=""4"" class=""feedback-txt"">SALES MAN TOP LIST IN PERIOD</td>");
  WebOutString("</tr>");

  WebOutString("<tr>");
  WebOutString("  <td class=""feedback-txt""><b>Sales Man</b></td>");
  WebOutString("  <td><b>Value</b></td>");
  WebOutString("  <td><b>Curncy</b></td>");
  WebOutString("  <td><b>Participants</b></td>");
  WebOutString("</tr>");



  tot_qty = 0;
  for(i=0;i<counter2;i=i+1) begin
    WebOutString("<tr>");
    if(blank(salesman_code[sort_array2[i]])) then begin
      //OutString(0,0,"WEB",false);
      WebOutString("  <td class=""feedback-txt"">WEB</td>");
    end else begin
      //OutString(0,"DblSalesManJournal",salesman_code[sort_array2[i]],false);
      WebOutString("  <td class=""feedback-txt"">" & salesman_code[sort_array2[i]] & "</td>");
    end;
    //OutString(250,0,salesman_val[sort_array2[i]],true);
    //OutString(255,0,salesman_cur[sort_array2[i]],false);
    //OutString(400,0,salesman_participants[sort_array2[i]],true);
    WebOutString("  <td class=""feedback-txt"">" & salesman_val[sort_array2[i]] & "</td>");
    WebOutString("  <td class=""feedback-txt"">" & salesman_cur[sort_array2[i]] & "</td>");
    WebOutString("  <td class=""feedback-txt"">" & salesman_participants[sort_array2[i]] & "</td>");

    tot_qty = tot_qty + salesman_participants[sort_array2[i]];
    WebOutString("</tr>");
  end;
  /*
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,"TOTAL",false);
  OutString(400,0,tot_qty,true);
  EndFormat;
  */
  WebOutString("<tr>");
  WebOutString("  <td colspan=""3"" class=""feedback-txt"">TOTAL:</td>");
  WebOutString("  <td>" & tot_qty & "</td>");
  WebOutString("</tr>");


  WebOutString("</table>");

  ToolWebHBSDivEndPage;

LWebCustomHAL5:;
  return;
end;

global
procedure WebHWUUnivTests()
begin
  record RcVc RepSpec;
  record UnivTestVc Testr;
  row UnivTestVc Testrw;
  record CountryVc Countryr;
  integer rw,i,rwcnt;
  string 255 tstr;
  boolean TrHs,testf;
  integer qty,tot_qty;
  val value;
  array string 20 country_code,country_cur;
  array val country_val;
  array integer country_participants;
  array string 20 salesman_code,salesman_cur;
  array val salesman_val;
  array integer salesman_participants;
  array integer sort_array,sort_array2;
  integer counter,counter2,j;
  integer cancelled,tot_cancelled;
  string 60 status;
  string 60 langcode;
  string 255 llink;
  Integer oldcomp;
  Boolean res;


  oldcomp = CurrentCompany;
  res = SetCompany(1,false);

  WebSetLanguage(langcode);
  ToolWebStartPage;
  ToolWebSetMainTitle;
  ToolWebStartBody("");

  if (WebLoginStatus <> 3) then begin
    WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
    WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">You are not logged in.</td></tr>");
    WebOutStringNL("</table>");
    goto LWebHWUUnivTests;
  end;

  WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");

  WebOutStringNL("  <tr><th colspan=""4"">" & TranslateString("HansaWorld Tests",langcode) & "</th></tr>");
//  WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt""><b>Period: 2006-01-01 to 2006-02-15</b></td></tr>");
//  WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">&nbsp;</td></tr>");

  // Heading
  WebOutStringNL("    <tr>");
  WebOutStringNL("      <td class=""feedback-txt""><b>Course</b></td>");
  WebOutStringNL("      <td><b>Training Material</b></td>");
  WebOutStringNL("      <td><b>Test</b></td>");
  WebOutStringNL("    </tr>");

  while (LoopMain(Testr,1,true)) begin
    WebOutString("      <tr>");
    WebOutString("        <td class=""feedback-txt"">" & Testr.CourseName & "</td>");
    WebOutString("        <td><a href=""../../../" & Testr.CourseCode & ".pdf"">" & TranslateString("Download",langcode) & "</a></td>");
    if (DateInRange(CurrentDate,Testr.StartDate,Testr.EndDate) and (CurrentTime > Testr.StartTime) and (CurrentTime < Testr.EndTime)) then begin
//        WebOutString("        <td><a href=""/main/function___WebHWUUnivTest.hal&course=" & Testr.CourseCode & "&sessionid=" & WebGetArg("sessionid") & "/WEBPAGE___SALES/hwconvindex.htm"">" & TranslateString("Take the test",langcode) & "</a></td>");
      WebOutString("<td>");
      WebOutString("<a href=""");
      llink = ToolWebBuildLink("WebHWUUnivTest.hal","&course=" & Testr.CourseCode & "&sessionid=" & WebGetArg("sessionid") & "/WEBPAGE___SALES/hwconvindex.htm");
      WebOutLink(llink);
      WebOutString(""">");
      WebOutString(TranslateString("Take the test",langcode));
  //    WebOutString("Take the test");
      WebOutString("</a>");
      WebOutString("</td>");
    end else begin
      WebOutString("        <td>Contact us for date.</td>");
    end;
  end;

  ToolWebEndTable;
  ToolWebEndPage(true);

LWebHWUUnivTests:;
  ResetCompany(oldcomp);
  return;
end;

procedure HWUUnivTestRowNew(record UnivTestAnswerVc Answerr,Integer rownr)
begin
  row UnivTestAnswerVc Answerrw;
  string 255 ans;
  boolean checked;
  integer i;
  string 255 tstr;

  MatRowGet(Answerr,rownr,Answerrw);
  WebOutStringNL("  <tr height=""1"">");
  WebOutStringNL("    <td colspan=""3"">&nbsp;<br><br></td>");
  WebOutStringNL("  </tr>");
  WebOutStringNL("  <tr height=""30"">");
  WebOutStringNL("    <td width=""45"" class=""triip"" align=""center"">" & rownr+1 & "</td>");
  WebOutStringNL("    <td class=""triip"">" & Answerrw.Question & "</td>");
  WebOutStringNL("  </tr>");
  WebOutStringNL("  <tr>");
  WebOutStringNL("    <td valign=""top"" colspan=""2"">");
  WebOutStringNL("      <table border=""0"" width=""100%"" class=""tekst"" cellspacing=""0"" cellpadding=""2"">");

  tstr = "";
  for (i=1;i<=6;i=i+1) begin
    switch (i) begin
      case 1: ans = Answerrw.Alt1;
      case 2: ans = Answerrw.Alt2;
      case 3: ans = Answerrw.Alt3;
      case 4: ans = Answerrw.Alt4;
      case 5: ans = Answerrw.Alt5;
      case 6: ans = Answerrw.Alt6;
      otherwise ans = "";
    end;

    if(nonblank(ans)) then begin
      checked = false;
      if (mid(ans,1,1)=="+" or mid(ans,1,1)=="-") then begin
        if (left(ans,1)=="+") then begin
          checked = true;
        end;
        ans = right(ans,len(ans)-2);
      end else begin
        ans = right(ans,len(ans)-1);
      end;
      WebOutStringNL("        <tr valign=""top"">");
      WebOutString("          <td align=""center"" width=""30""><input id=""quest" & chr(96+i) & """ name=""quest" & chr(96+i) & """ type=""checkbox"" value=""true""");
      if (checked) then begin
        WebOutString("checked=""true""");
        tstr = tstr & "+";
      end else begin
        tstr = tstr & "-";
      end;

      WebOutStringNL("></td>");
      WebOutStringNL("          <td>" & ans & "</td>");
      WebOutStringNL("        </tr>");
    end else begin
      tstr = tstr & ".";
    end;
  end;

  WebOutStringNL("      </table>");
  WebOutStringNL("    </td>");
  WebOutStringNL("  </tr>");
  return;
end;

procedure WebHWUUnivTestPageHeader(string UserName,record CUVc CUr,record UnivTestVc Testr,integer rownr,string langcode,integer newcomp,boolean custstyle,Date EndDate,Time StartTime)
begin
  string 255 llink,tstr;
  Date TestEndDate,CurDate;
  Time TestEndTime,CurTime;

  CurDate = CurrentDate;
  CurTime = CurrentTime;
  TestEndDate = Testr.EndDate;
  TestEndTime = Testr.EndTime;

  WebOutString("<form method=""post"" action=""");
  llink = ToolWebBuildLink("WebHWUUnivTestNavigate.hal","&sessionid=" & WebGetArg("sessionid"));
  WebOutLink(llink);
  WebOutStringNL(""">");
  WebOutStringNL("<input value=""" & WebGetArg("ws") & """ type=""hidden"" name=""warningshown"" id=""warningshown"">");
  if (WebGetArg("ws")!="1") begin
    WebOutStringNL("<script type=""text/javascript"">");
    WebOutString("var t;");
    WebOutString("var serverTime=new Date(");
    WebOutString(CurDate.year & ",");
    WebOutString(CurDate.month-1 & ","); //month is 0 based
    WebOutString(CurDate.day & ",");
    WebOutString(CurTime.hour & ",");
    WebOutString(CurTime.minute & ",");
    WebOutString(CurTime.second & ",");
    WebOutString("0);");
    WebOutString("var clientTime=new Date();");
    WebOutString("var offset=serverTime-clientTime;");
    WebOutString("var endTime=new Date(");
    WebOutString(TestEndDate.year & ",");
    WebOutString(TestEndDate.month-1 & ","); //month is 0 based
    WebOutString(TestEndDate.day & ",");
    WebOutString(TestEndTime.hour & ",");
    WebOutString(TestEndTime.minute & ",");
    WebOutString(TestEndTime.second & ",");
    WebOutString("0)-offset;");
    WebOutString("function TimeUpWarning() {");
    WebOutString("  var curTime=new Date();");
    WebOutString("  if ((endTime-curTime)<=(3*60*1000)) {");
    WebOutString("    alert('You have less than 3 minutes before this test ends. Please finish up!');");
    WebOutString("    var obj=document.getElementById('warningshown');");
    WebOutString("    if (obj!=null) obj.value=1;");
    WebOutString("  } else {");
    WebOutString("    t=setTimeout('TimeUpWarning()',5000);");
    WebOutString("  }");
    WebOutString("}");
    WebOutStringNL("t = setTimeout('TimeUpWarning()',5000);");
    WebOutStringNL("</script>");
  end;

  WebOutString("<input value=""" & CUr.Code & """ type=""hidden"" name=""p_cc"" size=""31"">");
  WebOutString("<input value=""" & Testr.CourseCode & """ type=""hidden"" name=""course"" size=""31"">");
  WebOutString("<input value=""" & newcomp & """ type=""hidden"" name=""company"" size=""31"">");
  WebOutString("<input value=""" & custstyle & """ type=""hidden"" name=""custstyle"">");
  WebOutString("<input value=""" & rownr & """ type=""hidden"" name=""rownrpost"">");
  WebOutString("<input value=""" & DateToString(EndDate,"YYYYMMDD") & """ type=""hidden"" name=""enddate"">");
  WebOutString("<input value=""" & ToTimeString(StartTime) & """ type=""hidden"" name=""starttime"">");
  WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
  WebOutStringNL("  <tr><th>" & TranslateString("Test",langcode) & " " & Testr.CourseName & "</th></tr>");
  WebOutStringNL("</table>");
  WebOutString("<table align=""center"" bgcolor=""#FFFFFF"" width=""90%"" cellspacing=""3"" cellpadding=""3"" border=""0"" class="""">");

  tstr = UserName;
  if (blank(tstr)) then begin
    WebOutString("<tr><td class=""feedback-txt"">" & TranslateString("30024",langcode) & "</td><td width=""72%""><input value="""" type=""text"" id=""person_name"" name=""person_name"" size=""31"" class=""feedback""></td></tr>");
  end else begin
    WebOutString("<tr><td width=""28%"" class=""feedback-txt"">" & TranslateString("30024",langcode) & ":</td><td width=""72%"" class=""feedback-txt"">" & tstr & "</td></tr>");
  end;

  WebOutStringNL("  <tr height=""1"">");
  WebOutStringNL("    <td colspan=""3"">&nbsp;<br><br></td>");
  WebOutStringNL("  </tr>");
  WebOutString("</table>");
  WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
  WebOutStringNL("  <tr><th>" & TranslateString("Questions, post your answers before",langcode) & " " & Testr.EndDate & " " & Testr.EndTime & "</th></tr>");
  WebOutStringNL("</table>");

  WebOutStringNL("<table align=""center"" bgcolor=""#FFFFFF"" width=""90%"" cellspacing=""0"" cellpadding=""3"" border=""0"" class="""">");
  return;
end;

function boolean AllQuestionsAnsweredSkipCurrent(record UnivTestAnswerVc Answerr,integer rownr)
begin
  integer i,j,cnt;
  string 255 alt;
  boolean res,checked;
  row UnivTestAnswerVc Answerrw;

  res = true;
  cnt = MatRowCnt(Answerr);

  for (i=0;i<cnt;i=i+1) begin
    if (i!=rownr) then begin
      checked = false;
      MatRowGet(Answerr,i,Answerrw);
      for (j=1;j<=6;j=j+1) begin
        switch (j) begin
          case 1: alt = Answerrw.Alt1;
          case 2: alt = Answerrw.Alt2;
          case 3: alt = Answerrw.Alt3;
          case 4: alt = Answerrw.Alt4;
          case 5: alt = Answerrw.Alt5;
          case 6: alt = Answerrw.Alt6;
        end;
        if (mid(alt,1,1)=="+" or mid(alt,1,1)=="-") then begin
          if (left(alt,1)=="+") then begin
            checked = true;
          end;
        end;
      end;
      if (checked==false) then begin
        res = false;
        goto LAllQuestionsAnsweredSkipCurrent;
      end;
    end;
  end;
LAllQuestionsAnsweredSkipCurrent:;
  AllQuestionsAnsweredSkipCurrent = res;
  return;
end;

global
procedure HWUShowQuestion(record UnivTestAnswerVc Answerr,integer quest,string langcode,integer thecomp,boolean custstyle)
begin
  record UserVc Userr;
  record UnivTestVc Testr;
  record CUVc CUr;
  string 255 confirmmessage,confirm2;
  boolean res;

  if (nonblank(CurrentUser)) then begin
    Userr.Code = CurrentUser;
    if (FindTheUser(Userr)) then begin
      CUr.Code = Userr.CustCode;
    end;
  end;
  if (blank(CUr.Code)) then begin
    CUr.Code = CurrentCust;
  end;
  if (ReadFirstMain(CUr,1,true)) then begin end;

  Testr.CourseCode = Answerr.CourseCode;
  if (ReadFirstMain(Testr,1,true)) then begin end;

  WebHWUUnivTestPageHeader(Answerr.PersonName,CUr,Testr,quest,langcode,thecomp,custstyle,Answerr.EndDate,Answerr.StartTime);
  HWUUnivTestRowNew(Answerr,quest);

  WebOutStringNL("  <tr height=""30"">");
  WebOutStringNL("    <td width=""190""><br><br>");
  if (quest==0) then begin
    WebOutStringNL("<input type=""submit"" name=""navdircombo"" value=""Back"" disabled=""true"">&nbsp;");
  end else begin
    WebOutStringNL("<input type=""submit"" name=""navdircombo"" value=""Back"">&nbsp;");
  end;
  if (quest+1==MatRowCnt(Answerr)) then begin
    WebOutString("<input type=""submit"" name=""navdircombo"" value=""Finish"" onclick=""");
    if (blank(Answerr.PersonName)) then begin
      WebOutString("if (document.getElementById('person_name')!=null && document.getElementById('person_name').value=='') { ");
      WebOutString("  alert('Please fill in your name. You cannot submit this test without specifying your name.'); ");
      WebOutString("  return false; ");
      WebOutString("} else {");
    end;
    WebOutString("    var submit=confirm('Do you want to submit this test? You cannot change any more questions after submitting!');");
    res = AllQuestionsAnsweredSkipCurrent(Answerr,quest);
    WebOutString("    if (submit) {");
    if (res) then begin
      WebOutString("      var ch=new Array('a','b','c','d','e','f');");
      WebOutString("      var checked=false;");
      WebOutString("      for (i=0;i<6;i++) {");
      WebOutString("        var cb=document.getElementById('quest'+ch[i]);");
      WebOutString("        if (cb!=null && cb.checked) checked=true;");
      WebOutString("      }");
      WebOutString("      if (checked==false) {");
    end;
    WebOutString("        submit=confirm('WARNING! You did not answer all the questions. Please cancel and review your questions. If you press Ok, your test will be submitted with unanswered questions!');");
    if (res) then begin
      WebOutString("      }");
    end;
    WebOutString("    }");
    WebOutString("    return submit;");
    if (blank(Answerr.PersonName)) then begin
      WebOutString("}");
    end;
    WebOutStringNL("""></td>");
  end else begin
    WebOutStringNL("<input type=""submit"" name=""navdircombo"" value=""Next""></td>");
  end;
  WebOutStringNL("  </tr>");
  WebOutStringNL("</table>");
  WebOutStringNL("</form>");

  return;
end;

global
updating procedure HWUUpdateAnswers(string personname,string coursecode,string custcode,date enddate,time starttime,integer rownr,string questa,string questb,string questc,string questd,string queste,string questf)
begin
  row UnivTestAnswerVc Answerrw;
  record UnivTestAnswerVc oldAnswerr,Answerr;
  string 255 alt1,alt2,alt3,alt4,alt5,alt6;
  string 255 ans,alt;
  integer i;
  string 255 oldstr,newstr;

  oldstr = "";
  newstr = "";

  Answerr.CourseCode = CourseCode;
  Answerr.CustCode = CustCode;
  Answerr.EndDate = EndDate;
  Answerr.StartTime = StartTime;
  if (ReadFirstMain(Answerr,4,true)) then begin

    RecordCopy(oldAnswerr,Answerr);

    MatRowGet(Answerr,rownr,Answerrw);

    for (i=1;i<=6;i=i+1) begin
      switch (i) begin
        case 1: ans = Answerrw.Alt1; alt = questa;
        case 2: ans = Answerrw.Alt2; alt = questb;
        case 3: ans = Answerrw.Alt3; alt = questc;
        case 4: ans = Answerrw.Alt4; alt = questd;
        case 5: ans = Answerrw.Alt5; alt = queste;
        case 6: ans = Answerrw.Alt6; alt = questf;
        otherwise
          ans = "";
      end;
      if (nonblank(ans)) then begin
        if (mid(ans,1,1)=="+" or mid(ans,1,1)=="-") then begin
          oldstr = oldstr & left(ans,1);
          ans = right(ans,len(ans)-1);
        end else begin
          oldstr = oldstr & ".";
        end;
        if (alt=="true") then begin
          ans = "+" & ans;
        end else begin
          ans = "-" & ans;
        end;
        newstr = newstr & left(ans,1);
        switch (i) begin
          case 1: Answerrw.Alt1 = ans;
          case 2: Answerrw.Alt2 = ans;
          case 3: Answerrw.Alt3 = ans;
          case 4: Answerrw.Alt4 = ans;
          case 5: Answerrw.Alt5 = ans;
          case 6: Answerrw.Alt6 = ans;
        end;
      end;
    end;

    MatRowPut(Answerr,rownr,Answerrw);

    if (nonblank(Personname)) then begin
      Answerr.PersonName = Personname;
    end;
    Answerr.LastRowUpdated = rownr;
    i = RecordUpdate(oldAnswerr,Answerr,true);

  end;

  return;
end;

global
updating procedure HWUCompleteTest(string personname,string coursecode,string custcode,date enddate,time starttime,integer rownr,string questa,string questb,string questc,string questd,string queste,string questf)
begin
  record UnivTestAnswerVc Answer2r;
  row UnivTestAnswerVc Answerrw;
  record UnivTestAnswerVc oldAnswerr;
  integer correct_answers;
  integer i,cnt,rw;

  Answer2r.CourseCode = CourseCode;
  Answer2r.CustCode = CustCode;
  Answer2r.EndDate = EndDate;
  Answer2r.StartTime = StartTime;
  if (ReadFirstMain(Answer2r,4,true)) then begin
    HWUUpdateAnswers(Personname,CourseCode,CustCode,EndDate,StartTime,rownr,questa,questb,questc,questd,queste,questf);
  end;

  //called after UpdateAnswers which is not queued this time, so we know this happens after UpdateAnswers completed completely
  Answer2r.CourseCode = CourseCode;
  Answer2r.CustCode = CustCode;
  Answer2r.EndDate = EndDate;
  Answer2r.StartTime = StartTime;
  if (ReadFirstMain(Answer2r,4,true)) then begin end;

  RecordCopy(oldAnswerr,Answer2r);

  correct_answers = 0;
  cnt = MatRowCnt(Answer2r);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(Answer2r,i,Answerrw);
    if ((left(Answerrw.Alt1,1)==mid(Answerrw.Alt1,1,1)) and
       (left(Answerrw.Alt2,1)==mid(Answerrw.Alt2,1,1)) and
       (left(Answerrw.Alt3,1)==mid(Answerrw.Alt3,1,1)) and
       (left(Answerrw.Alt4,1)==mid(Answerrw.Alt4,1,1)) and
       (left(Answerrw.Alt5,1)==mid(Answerrw.Alt5,1,1)) and
       (left(Answerrw.Alt6,1)==mid(Answerrw.Alt6,1,1))) then begin
      correct_answers = correct_answers + 1;
      Answerrw.Answer = "OK";
    end else begin
      Answerrw.Answer = "";
    end;
    MatRowPut(Answer2r,i,Answerrw);
  end;
  Answer2r.CorrectAnswers = correct_answers;
  Answer2r.EndTime = CurrentTime;
  Answer2r.OKFlag = 1;

  i = RecordUpdate(oldAnswerr,Answer2r,false);

  return;
end;

global
procedure WebHWUUnivTestNavigate()
begin
  integer oldcomp,newcomp;
  boolean res,res2,custstyle;
  record UnivTestVc Testr;
  string 255 langcode,newaddress,navdir;
  record UserVc Userr;
  record CUVc CUr;
  record UnivTestAnswerVc Answerr;
  integer rownr;
  string 255 page_look;
  Date EndDate;
  Time StartTime;

  oldcomp = CurrentCompany;
  newcomp = StringToInt(WebGetArg("company"));
  if (newcomp>0 and newcomp!=oldcomp) then begin
    res = SetCompany(newcomp,false);
  end;

  if (WebGetArg("type")=="cust") then begin
    custstyle = true;
  end;

  page_look = WebGetArg("plook");

  WebSetLanguage(langcode);
  Testr.CourseCode = WebGetArg("course");
  EndDate = DateFromString(WebGetArg("enddate"),"YYYYMMDD");
  StartTime = GetTime(WebGetArg("starttime"));

  if (ReadFirstMain(Testr,1,true)) then begin

    if (custstyle) then begin
      ToolWebHBSDivStartPage;
      ToolWebHBSDivSetMainTitle;
      ToolWebHBSDivStartBody("","");
    end else begin
      ToolWebStartPage;
      ToolWebSetMainTitle;
      ToolWebStartBody("");
    end;

    if (WebLoginStatus <> 3) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">You are not logged in.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestNavigate;
    end;

    if (DateInRange(CurrentDate,Testr.StartDate,Testr.EndDate)==false or  (CurrentTime < Testr.StartTime) or (CurrentTime > Testr.EndTime)) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">Test not available.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestNavigate;
    end;

    if (nonblank(CurrentUser)) then begin
      Userr.Code = CurrentUser;
      if (FindTheUser(Userr)) then begin
        CUr.Code = Userr.CustCode;
      end;
    end;
    if (blank(CUr.Code)) then begin
      CUr.Code = CurrentCust;
    end;
    res2 = ReadFirstMain(CUr,1,true);

    if (blank(CUr.Code) or res2==false) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">Your contact card is not set up correctly. You cannot take this test.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestNavigate;
    end;

    Answerr.CourseCode = Testr.CourseCode;
    Answerr.CustCode = CUr.Code;
    Answerr.EndDate = EndDate;
    Answerr.StartTime = StartTime;
    if (ReadFirstMain(Answerr,4,true)) then begin
      if (Answerr.OKFlag==0) then begin

        rownr = StringToInt(WebGetArg("rownrpost"));
        navdir = WebGetArg("navdircombo");

        if (navdir=="back" or navdir=="next") then begin
          queued.HWUUpdateAnswers(WebGetArg("person_name"),Answerr.CourseCode,Answerr.CustCode,Answerr.EndDate,Answerr.StartTime,rownr,WebGetArg("questa"),WebGetArg("questb"),WebGetArg("questc"),WebGetArg("questd"),WebGetArg("queste"),WebGetArg("questf"));
          newaddress = ToolWebBuildLink("WebHWUUnivTARefresh.hal","&type=" & WebGetArg("type") & "&refact=hwunav" & "&rownr=" & rownr & "&navdir=" & navdir & "&plook=" & page_look & "&course=" & Answerr.CourseCode & "&p_cc=" & Answerr.CustCode & "&ed=" & DateToString(Answerr.EndDate,"YYYYMMDD") & "&st=" & ToTimeString(Answerr.StartTime) & "&thecomp=" & newcomp & "&langcode=" & langcode & "&ws=" & WebGetArg("warningshown"));
        end else begin
          queued.HWUCompleteTest(WebGetArg("person_name"),Answerr.CourseCode,Answerr.CustCode,Answerr.EndDate,Answerr.StartTime,rownr,WebGetArg("questa"),WebGetArg("questb"),WebGetArg("questc"),WebGetArg("questd"),WebGetArg("queste"),WebGetArg("questf"));
          newaddress = ToolWebBuildLink("WebHWUUnivTARefresh.hal","&type=" & WebGetArg("type") & "&refact=hwuans" & "&plook=" & page_look & "&course=" & Answerr.CourseCode & "&p_cc=" & Answerr.CustCode & "&ed=" & DateToString(Answerr.EndDate,"YYYYMMDD") & "&st=" & ToTimeString(Answerr.StartTime) & "&thecomp=" & newcomp & "&langcode=" & langcode & "&ws=" & WebGetArg("warningshown"));
        end;
        WebHWUSendRefreshHTML(newaddress,1,false);
      end else begin
        WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
        WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">This test has already been submitted.</td></tr>");
        WebOutStringNL("</table>");
      end;
    end else begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">An error occurred. No open test for current user.</td></tr>");
      WebOutStringNL("</table>");
    end;
SkipQuestions:;
    ToolWebEndPage(true);
  end;
LWebHWUUnivTestNavigate:;
  if (res) then begin
    ResetCompany(oldcomp);
  end;
  return;
end;

global
updating procedure WebHWUUnivTestsAnswersQueue(record UnivTestAnswerVc Answerr,Integer comp)
begin
  Boolean res;
  Integer oldcomp;

  oldcomp = CurrentCompany;
  if (SetCompany(comp,false)) then begin
    res = RecordStore(Answerr,false);
  end;
  ResetCompany(oldcomp);
  return;
end;


global
procedure WebHWUUnivTest()
begin
  record UnivTestVc Testr;
  row UnivTestVc Testrw;
  record UnivTestAnswerVc Answerr;
  row UnivTestAnswerVc Answerrw;
  string 60 langcode,llink,tstr;
  integer rwcnt,i;
  record UserVc Userr;
  Integer oldcomp;
  Boolean res,foundf;
  record CUVc CUr;
  Array Integer arows;
  Integer acnt,ai;
  boolean allowquestions;
  string 200 newaddress;

  oldcomp = CurrentCompany;
  res = SetCompany(1,false);

  WebSetLanguage(langcode);
  Testr.CourseCode = WebGetArg("course");

  if (ReadFirstMain(Testr,1,true)) then begin

    ToolWebStartPage;
    ToolWebSetMainTitle;
    ToolWebStartBody("");

    if (WebLoginStatus <> 3) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">You are not logged in.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestNew;
    end;

    if (DateInRange(CurrentDate,Testr.StartDate,Testr.EndDate)==false or  (CurrentTime < Testr.StartTime) or (CurrentTime > Testr.EndTime)) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">The test is not open at the moment, please contact HansaWorld University.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestNew;
    end;

    rwcnt = MatRowCnt(Testr);
    if (nonblank(CurrentUser)) then begin
      Userr.Code = CurrentUser;
      if (FindTheUser(Userr)) then begin
        CUr.Code = Userr.CustCode;
      end;
    end;
    if (blank(CUr.Code)) then begin
      CUr.Code = CurrentCust;
    end;
    res = ReadFirstMain(CUr,1,true);

    if (blank(CUr.Code) or res==false) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">Your contact card is not set up correctly. You cannot take this test.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestNew;
    end;

    Randomize;
    while (acnt<rwcnt) begin
      i = Random(0,rwcnt-1);
      for (ai=0;ai<acnt;ai=ai+1) begin
        if (arows[ai]==i) then begin
          goto LSKIPROWNRNEW;
        end;
      end;
      arows[acnt] = i;
      acnt = acnt + 1;
LSKIPROWNRNEW:;
    end;
    if (acnt>29) then begin acnt = 30; end;

    allowquestions = true;

    foundf = true;
    Answerr.CustCode = CUr.Code;
    Answerr.CourseCode = Testr.CourseCode;
    Answerr.EndDate = CurrentDate;
    while (LoopMain(Answerr,3,foundf)) begin
      if (Answerr.CustCode != CUr.Code or Answerr.CourseCode != Testr.CourseCode or Answerr.EndDate != CurrentDate) then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (Answerr.OKFlag!=1) then begin
          goto LWebHWUUnivTestDoIt;
        end;
      end;
    end;

    if (true) then begin
      RecordNew(Answerr);
      Answerr.EndDate = CurrentDate;
      Answerr.CustCode = CUr.Code;
      Answerr.Person = CurrentUser;
      Answerr.PersonName = CUr.Name;
      Answerr.CourseCode = Testr.CourseCode;
      Answerr.CourseName = Testr.CourseName;
      Answerr.NoOfQuestions = acnt;
      Answerr.CorrectAnswers = 0;
      Answerr.StartDate = CurrentDate;
      Answerr.StartTime = CurrentTime;
      Answerr.LastRowUpdated = -1;

      i = 0;
      for (ai=0;ai<acnt;ai=ai+1) begin
        MatRowGet(Testr,arows[ai],Testrw);
        ClearRow(Answerr,Answerrw,1);
        Answerrw.Question = Testrw.Question;
        if (Testrw.Alt1Correct!=0) then begin Answerrw.Alt1 = "+"; end else begin Answerrw.Alt1 = "-"; end; if (blank(Testrw.Alt1)) then begin Answerrw.Alt1 = ""; end;
        Answerrw.Alt1 = Answerrw.Alt1 & Testrw.Alt1;
        if (Testrw.Alt2Correct!=0) then begin Answerrw.Alt2 = "+"; end else begin Answerrw.Alt2 = "-"; end; if (blank(Testrw.Alt2)) then begin Answerrw.Alt2 = ""; end;
        Answerrw.Alt2 = Answerrw.Alt2 & Testrw.Alt2;
        if (Testrw.Alt3Correct!=0) then begin Answerrw.Alt3 = "+"; end else begin Answerrw.Alt3 = "-"; end; if (blank(Testrw.Alt3)) then begin Answerrw.Alt3 = ""; end;
        Answerrw.Alt3 = Answerrw.Alt3 & Testrw.Alt3;
        if (Testrw.Alt4Correct!=0) then begin Answerrw.Alt4 = "+"; end else begin Answerrw.Alt4 = "-"; end; if (blank(Testrw.Alt4)) then begin Answerrw.Alt4 = ""; end;
        Answerrw.Alt4 = Answerrw.Alt4 & Testrw.Alt4;
        if (Testrw.Alt5Correct!=0) then begin Answerrw.Alt5 = "+"; end else begin Answerrw.Alt5 = "-"; end; if (blank(Testrw.Alt5)) then begin Answerrw.Alt5 = ""; end;
        Answerrw.Alt5 = Answerrw.Alt5 & Testrw.Alt5;
        if (Testrw.Alt6Correct!=0) then begin Answerrw.Alt6 = "+"; end else begin Answerrw.Alt6 = "-"; end; if (blank(Testrw.Alt6)) then begin Answerrw.Alt6 = ""; end;
        Answerrw.Alt6 = Answerrw.Alt6 & Testrw.Alt6;
        Answerrw.Answer = "";
        MatRowPut(Answerr,i,Answerrw);
        i = i+1;
      end;

      queued.WebHWUUnivTestsAnswersQueue(Answerr,1);
    end;

    LWebHWUUnivTestDoIt:;

    newaddress = ToolWebBuildLink("WebHWUUnivTARefresh.hal","&type=internal" & "&refact=hwunav" & "&startnav=1" & "&rownr=0" & "&plook=" & "intranet" & "&course=" & Answerr.CourseCode & "&p_cc=" & Answerr.CustCode & "&ed=" & DateToString(Answerr.EndDate,"YYYYMMDD") & "&st=" & ToTimeString(Answerr.StartTime) & "&thecomp=1&langcode=" & langcode );
    WebHWUSendRefreshHTML(newaddress,1,false);

    ToolWebEndPage(true);
  end;
LWebHWUUnivTestNew:;
  ResetCompany(oldcomp);
  return;
end;

global
procedure WebHWUCustomerTests(string langcode)
begin
  Integer oldcomp,newcomp;
  Boolean res,found,first_loop;
  record UnivTestVc Testr;
  string 255 company,country,llink;

  oldcomp = CurrentCompany;
  newcomp = StringToInt(WebGetArg("company"));
  if ((newcomp>0) and (oldcomp!=newcomp)) then begin
    res = SetCompany(newcomp,false);
  end;

  company = WebGetArg("company");
//  country = GetCountryCode(langcode);
  country = GetWHUCountryCode2(newcomp);
  WebHBSDivPublicMain("CUSTTESTS",langcode,1 ,-1 ,true ,false);
                      //thecode,norofmails,maxchars,skipspecial,clickable

  WebOutStringNL("<table width=""100%"" cellspacing=""0"" cellpadding=""3"" border=""0"">");
  first_loop = true;
  found = true;
  while (LoopMain(Testr,1,found)) begin
    WebOutString("      <tr>");
    WebOutString("        <td class=""feedback-txt"">" & Testr.CourseName & "</td>");
    WebOutString("        <td><a href=""../../../" & Testr.CourseCode & ".pdf"">" & TranslateString("Download",langcode) & "</a></td>");
    if (DateInRange(CurrentDate,Testr.StartDate,Testr.EndDate) and (CurrentTime > Testr.StartTime) and (CurrentTime < Testr.EndTime)) then begin
      WebOutString("<td>");
      WebOutString("<a href=""");
      llink = ToolWebBuildLink("WebHWUUnivTestCust.hal","&course=" & Testr.CourseCode & "&company=" & company & "&sessionid=" & WebGetArg("sessionid") & "/WEBPAGE___SALES/hwconvindex.htm");
      WebOutLink(llink);
      WebOutString(""">");
      WebOutString(TranslateString("Take the test",langcode));
  //    WebOutString("Take the test");
      WebOutString("</a>");
      WebOutString("</td>");
      WebOutString("</tr>");
    end else begin
      WebOutString("        <td>" & TranslateString("Contact us for date.",langcode) & "</td>");
    end;
  end;
  WebOutStringNL("</table>");
  if (res) then begin
    ResetCompany(oldcomp);
  end;
  return;
end;

global
procedure WebHWUUnivTestCust()
begin
  record UnivTestVc Testr;
  row UnivTestVc Testrw;
  record UnivTestAnswerVc Answerr;
  row UnivTestAnswerVc Answerrw;
  string 60 langcode,llink,tstr;
  integer rwcnt,i;
  record UserVc Userr;
  Integer oldcomp,newcomp;
  Boolean res,res2,allowquestions,foundf;
  record CUVc CUr;
  Array Integer arows;
  Integer acnt,ai;
  string 255 newaddress;

  oldcomp = CurrentCompany;
  newcomp = StringToInt(WebGetArg("company"));
  if ((newcomp>0) and (oldcomp!=newcomp)) then begin
    res = SetCompany(newcomp,false);
  end;
  if (res==false) then begin
    newcomp = oldcomp;
  end;
  WebSetLanguage(langcode);
  Testr.CourseCode = WebGetArg("course");

  if (ReadFirstMain(Testr,1,true)) then begin

    ToolWebHBSDivStartPage;
    ToolWebHBSDivSetMainTitle;
    ToolWebHBSDivStartBody("","");

    if (WebLoginStatus <> 3) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">You are not logged in.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestCUNew;
    end;

    if (DateInRange(CurrentDate,Testr.StartDate,Testr.EndDate)==false or  (CurrentTime < Testr.StartTime) or (CurrentTime > Testr.EndTime)) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">The test is not open at the moment, please contact HansaWorld University.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestCUNew;
    end;

    if (nonblank(CurrentUser)) then begin
      Userr.Code = CurrentUser;
      if (FindTheUser(Userr)) then begin
        CUr.Code = Userr.CustCode;
      end;
    end;
    if (blank(CUr.Code)) then begin
      CUr.Code = CurrentCust;
    end;
    res2 = ReadFirstMain(CUr,1,true);

    if (blank(CUr.Code) or res2==false) then begin
      WebOutStringNL("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
      WebOutStringNL("  <tr><td colspan=""4"" class=""feedback-txt"">Your contact card is not set up correctly. You cannot take this test.</td></tr>");
      WebOutStringNL("</table>");
      goto LWebHWUUnivTestCUNew;
    end;

    rwcnt = MatRowCnt(Testr);
    Randomize;
    while (acnt<rwcnt) begin
      i = Random(0,rwcnt-1);
      for (ai=0;ai<acnt;ai=ai+1) begin
        if (arows[ai]==i) then begin
          goto LSKIPROWNRCUNEW;
        end;
      end;
      arows[acnt] = i;
      acnt = acnt + 1;
LSKIPROWNRCUNEW:;
    end;
    if (acnt>Testr.NoOfQuestions) then begin acnt = Testr.NoOfQuestions; end; // UST: 100416*
    allowquestions = true;

    foundf = true;
    Answerr.CustCode = CUr.Code;
    Answerr.CourseCode = Testr.CourseCode;
    Answerr.EndDate = CurrentDate;
    while (LoopMain(Answerr,3,foundf)) begin
      if (Answerr.CustCode != CUr.Code or Answerr.CourseCode != Testr.CourseCode or Answerr.EndDate != CurrentDate) then begin
        foundf = false;
      end;
      if (foundf and Answerr.OKFlag!=1) then begin
        goto LWebHWUUnivTestCustDoIt;
      end;
    end;

    if (true) then begin
      RecordNew(Answerr);
      Answerr.EndDate = CurrentDate;
      Answerr.CustCode = CUr.Code;
      Answerr.Person = CurrentUser;
      Answerr.PersonName = CUr.Name;//why was this commented out?
      Answerr.CourseCode = Testr.CourseCode;
      Answerr.CourseName = Testr.CourseName;
      Answerr.NoOfQuestions = acnt;
      Answerr.CorrectAnswers = 0;
      Answerr.StartDate = CurrentDate;
      Answerr.StartTime = CurrentTime;
      Answerr.LastRowUpdated = -1;

      i = 0;
      for (ai=0;ai<acnt;ai=ai+1) begin
        MatRowGet(Testr,arows[ai],Testrw);
        ClearRow(Answerr,Answerrw,1);
        Answerrw.Question = Testrw.Question;
        if (Testrw.Alt1Correct!=0) then begin Answerrw.Alt1 = "+"; end else begin Answerrw.Alt1 = "-"; end; if (blank(Testrw.Alt1)) then begin Answerrw.Alt1 = ""; end;
        Answerrw.Alt1 = Answerrw.Alt1 & Testrw.Alt1;
        if (Testrw.Alt2Correct!=0) then begin Answerrw.Alt2 = "+"; end else begin Answerrw.Alt2 = "-"; end; if (blank(Testrw.Alt2)) then begin Answerrw.Alt2 = ""; end;
        Answerrw.Alt2 = Answerrw.Alt2 & Testrw.Alt2;
        if (Testrw.Alt3Correct!=0) then begin Answerrw.Alt3 = "+"; end else begin Answerrw.Alt3 = "-"; end; if (blank(Testrw.Alt3)) then begin Answerrw.Alt3 = ""; end;
        Answerrw.Alt3 = Answerrw.Alt3 & Testrw.Alt3;
        if (Testrw.Alt4Correct!=0) then begin Answerrw.Alt4 = "+"; end else begin Answerrw.Alt4 = "-"; end; if (blank(Testrw.Alt4)) then begin Answerrw.Alt4 = ""; end;
        Answerrw.Alt4 = Answerrw.Alt4 & Testrw.Alt4;
        if (Testrw.Alt5Correct!=0) then begin Answerrw.Alt5 = "+"; end else begin Answerrw.Alt5 = "-"; end; if (blank(Testrw.Alt5)) then begin Answerrw.Alt5 = ""; end;
        Answerrw.Alt5 = Answerrw.Alt5 & Testrw.Alt5;
        if (Testrw.Alt6Correct!=0) then begin Answerrw.Alt6 = "+"; end else begin Answerrw.Alt6 = "-"; end; if (blank(Testrw.Alt6)) then begin Answerrw.Alt6 = ""; end;
        Answerrw.Alt6 = Answerrw.Alt6 & Testrw.Alt6;
        Answerrw.Answer = "";
        MatRowPut(Answerr,i,Answerrw);
        i = i+1;
      end;

      queued.WebHWUUnivTestsAnswersQueue(Answerr,newcomp);
    end;

    LWebHWUUnivTestCustDoIt:;

    newaddress = ToolWebBuildLink("WebHWUUnivTARefresh.hal","&type=cust" & "&refact=hwunav" & "&startnav=1" & "&rownr=0" & "&plook=" & "hworld" & "&course=" & Answerr.CourseCode & "&p_cc=" & Answerr.CustCode & "&ed=" & DateToString(Answerr.EndDate,"YYYYMMDD") & "&st=" & ToTimeString(Answerr.StartTime) & "&thecomp=" & newcomp & "&langcode=" & langcode );
    WebHWUSendRefreshHTML(newaddress,1,false);

    ToolWebHBSDivEndPage;
  end;
LWebHWUUnivTestCUNew:;
  if (res) then begin
    ResetCompany(oldcomp);
  end;
  return;
end;