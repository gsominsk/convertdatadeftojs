external function Integer GetCodeFromCompanyCode(Integer);
external function string 200 ToolWebReturnTheText(Integer);
external procedure SetupTXCUServiceRecord(string,Date,record ISPackageVc,string,var record TXCUServiceVc,boolean);

global
function string 255 GetInternetServiceName(string servicecode,integer country,string langcode)
begin
  record WebServiceVc WSr;
  record NotepadVc Noter;
//  row WebServiceVc WSrw;
  record RLinkVc RLr;
  string 255 res;
  integer i,cnt;
  boolean foundf;
  
  WSr.Code = servicecode;
  if (country!=0) then begin
    WSr.Country = country;
  end else begin
    WSr.Country = "";
  end;
  foundf = ReadFirstMain(WSr,2,true);
  if (foundf==false) then begin
    WSr.Code = servicecode;
    foundf = ReadFirstMain(WSr,1,true);
  end;
  if (foundf) then begin
    res = WSr.Comment;
    cnt = 1;
    while (ReadRecordLink(WSr,cnt,Noter,RLr)) begin
      cnt = cnt + 1;
      if (langcode==Noter.LangCode) then begin
        res = RLr.Comment;
        goto LGetInternetServiceName;
      end;
    end;

    /*cnt = MatRowCnt(WSr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WSr,i,WSrw);
      if (WSrw.LangCode==langcode) then begin
        res = WSrw.Text;
        goto LGetInternetServiceName;
      end;
    end;*/
  end;
LGetInternetServiceName:;
  GetInternetServiceName = res;
  return;
end;

global
function string 60 GetPackageRowTypeName(integer typ)
begin
  string 60 res;
  
  switch (typ) begin
    case 1: res = ToolWebReturnTheText(20340);
    case 2: res = ToolWebReturnTheText(20341);
    case 3: res = ToolWebReturnTheText(20342);
    case 4: res = ToolWebReturnTheText(20343);
    case 5: res = ToolWebReturnTheText(20344);
    case 6: res = ToolWebReturnTheText(20345);
    case 7: res = ToolWebReturnTheText(20346);
    case 8: res = ToolWebReturnTheText(20347);
    otherwise
      res = StringFromSet(328,typ);
  end;
  
  GetPackageRowTypeName = res;
  return;
end;

global
procedure GetCustData(string CustCode,var integer country,var longint version)
begin
  record CUCOEnabActVc CUCOEnabActr;
  record CUVc CUr;
  
  country = 0;
  if (nonblank(CustCode)) then begin
    /*CUCOEnabActr.CustCode = CustCode;
    if (ReadFirstKey("CustCode",CUCOEnabActr,1,true)) then begin
      country = GetCodeFromCompanyCode(CUCOEnabActr.CompanyNr);
    end else begin
      country = 1;
    end;
    */
    CUr.Code = CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (nonblank(CUr.Nationality)) then begin
        country = StringToInt(CUr.Nationality);
      end;
    end;
    //TODO find a way to store and even in the first place figure out, the version of the customer.
    version = "53020002";
  end;
  return;
end;

global
function boolean IsInternetServiceAvailInVersion(string servicecode,integer country,longint verbuild)
begin
  record WebServiceVc WSr;
  boolean res;

/*  WSr.Code = servicecode;
  if (ReadFirstMain(WSr,1,true)) then begin
    if (verbuild >= WSr.VerBuild and WSr.CantBuyOnline==0) then begin
      res = true;
    end else begin
      res = false;
    end;
  end; */
  res = true;
  IsInternetServiceAvailInVersion = res;
  return;
end;

global
function boolean IsISPackageValid(string pkgcode,date d)
begin
  record ISPackageVc ISr;
  boolean res;
  
  res = false;
  ISr.Code = pkgcode;
  if (ReadFirstMain(ISr,1,true)) then begin
    if (ISr.Closed==0) then begin
      if (blank(ISr.StartDate) or ISr.StartDate<=d) then begin
        if (blank(ISr.EndDate) or ISr.EndDate>=d) then begin
          res = true;
        end;
      end;
    end;
  end;
  
  IsISPackageValid = res;
  return;
end;

global
function string 20 WebISShopFormatDate(date d)
begin
  string 255 res;
  if (blankdate(d)) then begin
    res = "-";
  end else begin
    res = d;
  end;
  WebISShopFormatDate = res;
end;

global
function val WebISShopGetNoOfUnits(record TXCUServiceVc TCSr)
begin
  row TXCUServiceVc TCSrw;
  integer i,cnt;
  val res;
  
  cnt = MatRowCnt(TCSr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(TCSr,i,TCSrw);
    if (TCSrw.Typ==1) then begin //Package
      res = TCSrw.Quant;
      goto LGetUnits;
    end;
  end;
LGetUnits:;
  WebISShopGetNoOfUnits = res;
  return;
end;

global
function boolean IsDefaultService(record TXCUServiceVc TCSr)
begin
  record TXCUServiceVc TCS2r;
  row TXCUServiceVc TCSrw,TCS2rw;
  boolean res;
  integer i,cnt;
  
  res = false;
  TCS2r.Service = TCSr.Service;
  TCS2r.CustCode = "";
  if (ReadFirstKey("CustCode",TCS2r,2,true)) then begin
    if (TCS2r.perLength!=TCSr.perLength) then begin
      goto LIsDefaultService;
    end;
    if (TCS2r.Type!=TCSr.Type) then begin
      goto LIsDefaultService;
    end;
    if (TCS2r.ExtraPerClick!=TCSr.ExtraPerClick) then begin
      goto LIsDefaultService;
    end;
    cnt = MatRowCnt(TCS2r);
    if (cnt!=MatRowCnt(TCSr)) then begin
      goto LIsDefaultService;
    end;
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(TCSr,i,TCSrw);
      MatRowGet(TCS2r,i,TCS2rw);
      if (TCS2rw.Typ!=TCSrw.Typ) then begin
        goto LIsDefaultService;
      end;
      if (TCS2rw.ArtCode!=TCSrw.ArtCode) then begin
        goto LIsDefaultService;
      end;
      if (TCS2rw.Quant!=TCSrw.Quant) then begin
        goto LIsDefaultService;
      end;
      if (TCS2rw.Price!=TCSrw.Price) then begin
        goto LIsDefaultService;
      end;
      if (TCS2rw.Prc!=TCSrw.Prc) then begin
        goto LIsDefaultService;
      end;
    end;
    res = true;
  end;
LIsDefaultService:;
  IsDefaultService = res;
  return;
end;

global
function integer GetTXCUServiceStatus(longint servicesernr,string custcode)
begin
  integer res;
  record TXCUServiceVc TCSr,TCS2r;
  record WebServiceVc WSr;
  Date newest;
  integer closed;
  boolean testf, foundf;
  
  res = -1;
  TCSr.SerNr = servicesernr;
  if (ReadFirstMain(TCSr,1,true)) then begin
    if (TCSr.CustCode=="") then begin // default service contract - customer has no contract
      //first check that the customer does not have old contracts, the last one of which will state whether service is active or not
      TCS2r.Service = TCSr.Service;
      TCS2r.CustCode = custcode;
      foundf = false;
      testf = true;
      closed = 0;
      while (LoopKey("CustCode",TCS2r,2,testf)) begin
        if (TCS2r.Service!=TCSr.Service or TCS2r.CustCode!=custcode) then begin
          testf = false;
        end;
        if (testf) then begin
          if (blankdate(newest) or TCS2r.EndDate > newest) then begin
            newest = TCS2r.EndDate;
            closed = TCS2r.Closed;
            foundf = true;
          end;
        end;
      end;
      
      WSr.Code = TCSr.Service;
      if (ReadFirstMain(WSr,1,true)) then begin end;
      if (WSr.DemandContract==1) then begin
        res = 3; // requires contract
      end else begin
        res = 1; // Active
      end;
      
      if (foundf) then begin
        if (closed==0) then begin
          if (newest>=CurrentDate and res==3) then begin
            res = 1;
          end;
        end else begin
          if (res==3 and newest<CurrentDate) then begin
            res = 3;
          end;
          res = 2;
        end;
      end;
    end else begin
      if (TCSr.Closed==0) then begin
        res = 1; // Active;
      end else begin
        res = 2; // Disabled;
      end;
    end;
  end;
  GetTXCUServiceStatus = res;
  return;
end;

global
updating function boolean UpdateISStatus(string custcode,var longint servicesernr,integer newstatus)
begin
  record TXCUServiceVc TCSr,oldTCSr;
  record ISPackageVc IPr;
  boolean res;
  
  res = false;
  TCSr.SerNr = servicesernr;
  if (ReadFirstMain(TCSr,1,true)) then begin
    if (TCSr.CustCode=="") then begin
      SetupTXCUServiceRecord(custcode,CurrentDate,IPr,TCSr.Service,TCSr,true);
      TCSr.SerNr = NextSerNr("TXCUServiceVc",CurrentDate,-1,false,"");
      switch (newstatus) begin
        case 1: //activate
          TCSr.Closed = 0;
          res = true;
        case 2: //disable
          TCSr.Closed = 1;
          res = true;
      end;
      if (RecordStore(TCSr,true)) then begin end;
      servicesernr = TCSr.SerNr;
      res = true;
    end else begin
      RecordCopy(oldTCSr,TCSr);
      switch (newstatus) begin
        case 1: //activate
          TCSr.Closed = 0;
          res = true;
        case 2:
          TCSr.Closed = 1;
          res = true;
      end;
    
      if (res) then begin
        res = (RecordUpdate(oldTCSr,TCSr,true)==0);
      end;
    end;
  end;
  
  UpdateISStatus = res;
  return;
end;

global
procedure WebISShopNotLoggedIn(string langcode)
begin
  WebOutString(ToolWebReturnTheText(20366));
  return;
end;

global
procedure ISWebCannotHandle(string func,string whichone,string langcode)
begin
  WebOutString(ToolWebReturnTheText(20400) & "<br>");
  WebOutString("<span style=""display:none"">" & func & ":" & whichone & "/" & langcode & "</span>");
  return;
end;
