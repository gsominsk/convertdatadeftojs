external procedure UpdateWebFreemiumTags(string,string);
external procedure UpdateWebProgAppName(string);
external function string 255 ConvertXml(string);
external procedure UpdateWebProgOperatingSystem(string);
external procedure UpdateWebProgCountry(string);
external procedure UpdateWebLicenseMode(string);
external procedure UpdateWebProductCode(string);
external procedure UpdateWebLanguage(string);
external procedure WebHBSDivPrepareOrder(string);
external updating procedure WebHBSDivCreateOrder(string);
external procedure RandomAddOwnNewAdverts(string,string);
external procedure ToolWebHBSDivAddAdvert(Integer);
external procedure WebHBSDivDisplayAdvert(string);
external procedure WebHBSDivMailNewsView(string);
external procedure WebHWUCustomerTests(string);
external procedure DoWebHWUUniversity(string);
external procedure WebHWUCourseDescription(string);
external procedure WebHWUPlanCourse(string);
external procedure ToolWebHBSDivForum(record WebPagesVc,string);
external procedure WebHBSDivDownStoreQ(string);
external updating procedure WebHBSDivDownStore(string);
external procedure WebHBSDivNewDownloadPage2(string);
external procedure WebHBSDivNewDownloadPage(string);
external procedure WebHBSDivDownloadPage(string);
external procedure WebHBSDivNewDownloadPageSelect(string);
external updating procedure BuildShopBaskFromRegistration(string,string);
external procedure ToolWebHBSDivListVersions(record WebPagesVc,string);
external procedure ToolWebHBSMagicMidMenu(record WebPagesVc,string);
external updating procedure WebHBSDivStoreCust(string);
external updating procedure WebHBSDivCreatePassword(string);
external procedure WebHBSDivRegister();
external procedure WebHBSDivPassword(string);
external procedure WebHBSDivPassword2(string);
external procedure ToolWebHBSDivCommentAndLink(string,string,string,string,string);
external procedure ToolWebHBSDivMenuItem(string,string,string,string,string,Boolean,Integer,Boolean,Boolean);
external procedure ToolWebHBSDivSimpleLink(string,string,string);
external function string 200 ToolWebReturnTheText(Integer);
external procedure ToolWebLineStart();
external procedure ToolWebLineEnd();
external procedure ToolWebHBSDivSetMainTitle();
external procedure ToolWebHBSDivSetMainWithTimeout(string,string);
external procedure ToolWebHBSDivStartPage();
external procedure ToolWebHBSDivStartBody(string,string);
external procedure ToolWebHBSDivEndPage();
external procedure ToolWebStartTable();
external procedure ToolWebEndTable();
external updating procedure ToolWebAddCounter(string);
external procedure ToolWebHBSDivAddLeftMenubar(string,string,string);
external procedure ToolWebHBSDivAddTopMenubar(string,string);
external procedure ToolWebHBSDivOutTextLang(record MailVc,string,string,string);
external procedure GetConfInfo(string,var string,var string,var LongInt);
external procedure ToolWebHBSDivPublicNews(string,string,LongInt);
external Function Boolean WebHBSDivPublicMain(string,string,LongInt,LongInt,Boolean,Boolean);
external procedure ToolWebGetTheText(Integer,var string);
external procedure ToolWebHBSDivPublicMailMain(string,string,LongInt);
external procedure ToolWebHBSDivPublicMailNews(string,string,LongInt);
external procedure ToolWebHBSDivPublicMailBullet(string,string,LongInt);
external procedure ToolWebHBSDivPublicConference(string,string,LongInt);
external procedure ToolWebHBSDivPublicMailLink(string,string,LongInt);
external function string 200 GetWebLanguage();
external procedure ToolWebHBSDivRadioButton(string,string,Integer,Boolean);
external procedure ToolWebHBSDivStartDiv(string);
external procedure ToolWebHBSDivEndDiv(string);
external function Boolean ToolWebHBSUseLink();
external procedure WebHBSDivContactUs();
external procedure ToolWebHBSDivDownloads(string);
external procedure ToolWebHBSDivDownloadsNew(string);
external procedure ToolWebHBSDivShopChoose(string);
external procedure ToolWebHBSDivFAQChoose(string);
external function string 255 ToolWebBuildLink(string,string);
external procedure ToolWebHBSDivLoginLine(string,string,string,string);
external procedure ToolWebHiddenField(string,string);
external procedure WebHBSDivChat();
external procedure ToolWebHBSDivBanner(string,string,string,string,string);
external procedure ToolWebHBSDivShopBasketNew(string); //WNS
external procedure ToolWebHBSDivCustProdNew(string); //WNS
external procedure ToolWebHBSDivItemViewNew(string); //WNS
external updating procedure WebHBSDivStoreItem(); //WNS
external updating procedure WebHBSDivCheckout(string); //WNS
external updating procedure WebHBSDivShopBasketStepPAY2(string); //WNS
external procedure ToolWebHBSDivDropDownMail(string,string,string,string,var LongInt);
external procedure ToolWebHBSDivReadMore(string);
external updating procedure WebHBSDivSendPayment(string);
external procedure WebHBSDivSearchConf(string);
external updating procedure WebHBSDivPayPalSuccess(string);
external updating procedure WebHBSDivPAYWithPayServer(string);
external updating procedure WebHBSDivSendPayServerPayment(string);
external updating procedure WebHBSDivPayServerSuccess(string);
external procedure WebHBSDivPayServerBack(string);
external updating procedure WebHBSDivWaitForCCPurchase(string);
external procedure WebISShopMyServices(string);
external procedure WebISShopServiceAmend(string,LongInt);
external updating procedure WebISShopServiceAmendBuy(string);
external procedure WebISShopServiceStatus(string);
external updating procedure WebISShopServiceStatusChange(string);
external procedure ISWebCannotHandle(string,string,string);
external procedure WebISShopServiceTariffView(string);
external updating procedure WebISShopServiceAmendRemove(string);
external function boolean AutoLoginToWebNG();
external procedure GetWebHBSDivLanguages(var record LangBlock);
external procedure RedirectToURL(string);
external procedure LogWebNGMasterPayClick();

procedure ToolWebHBSDivPublicReadMore(string whichone,LongInt norofmails,LongInt maxchars,string langcode)
begin
  if (WebHBSDivPublicMain(whichone,langcode,norofmails,maxchars,false,false)) then begin
    ToolWebHBSDivReadMore(ToolWebBuildLink("WebHBSDivMain.hal","&function=WebHBSDivPublicMain&confcode=" & whichone & "&langcode=" & langcode));
  end;
  return;
end;

procedure ToolWebHBSDivMagicList(string whichone,string langcode)
begin
  record ConfVc Confr;
  record WebPagesVc WPr;
  row WebPagesVc WPrw;
  Integer rwcnt,i;
  Boolean res,companyset,foundf;
  Integer NoOfMails;
  Integer CharsToShow;
  LongInt selected;
  string 60 confcode;
  string 60 confname;
  LongInt maxmail;
  string 200 tstr;
  string 200 wpconfcode;
  Integer oldcomp,newcomp;
  string 255 llink;
  
  oldcomp = CurrentCompany;
  WPr.Code = whichone;
  foundf = ReadFirstMain(WPr,1,true);
  if (foundf==false) then begin
    companyset = SetCompany(1,false);
    WPr.Code = whichone;
    foundf = ReadFirstMain(WPr,1,true);
  end;
  if (foundf) then begin
    ToolWebHBSDivStartDiv("txtmenu");
    ToolWebHBSMagicMidMenu(WPr,langcode);
    ToolWebHBSDivEndDiv("txtmenu");
    ToolWebHBSDivStartDiv("txtbody2");
//
    if (WPr.Code=="PARTNERS") then begin
      WebOutString("<div>");
      ToolWebHBSDivSimpleLink(ToolWebReturnTheText(20110),"WebHBSDivRegisterDealerChooseCountry.hal",langcode);
      WebOutString("</div><div>");
      ToolWebHBSDivSimpleLink(ToolWebReturnTheText(20111),"WebHBSDivRegisterLeadChooseCountry.hal",langcode);
      WebOutString("</div>");
    end;
//
    wpconfcode = WPr.Code;
    if (nonblank(WPr.CounterCode)) then begin
//      ToolWebAddCounter(WPr.CounterCode);
    end;
    rwcnt = MatRowCnt(WPr);
    switch (WPr.PageType) begin
      case 0:
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(WPr,i,WPrw);
          NoOfMails = WPrw.NoOfMails;
          if (NoOfMails<=0) then begin
            NoOfMails = 1;
          end;
          CharsToShow = WPrw.CharsToShow;
           if (CharsToShow<=0) then begin
            CharsToShow = 255;
          end;
          switch (WPr.OnePerWhat) begin
            case 0:
              ToolWebHBSDivPublicReadMore(WPrw.ConfCode,NoOfMails,CharsToShow,langcode);
            case 1:
              res = WebHBSDivPublicMain(WPrw.ConfCode,langcode,-1,-1,false,false);
            case 2:
              ToolWebHBSDivPublicMailMain(WPrw.ConfCode,langcode,CharsToShow);
            case 3:
              ToolWebHBSDivPublicMailNews(WPrw.ConfCode,langcode,CharsToShow);
            case 4:
              ToolWebHBSDivPublicMailLink(WPrw.ConfCode,langcode,CharsToShow);
            case 5:
              ToolWebHBSDivPublicMailBullet(WPrw.ConfCode,langcode,CharsToShow);
            case 6:
              ToolWebHBSDivPublicConference(WPrw.ConfCode,langcode,CharsToShow);
          end;
        end;
        if (nonblank(WPr.NewsCode)) then begin
          WebOutString("<br />");
          ToolWebHBSDivPublicNews(WPr.NewsCode,langcode,150);
        end;
      case 1:
        if (WPr.OnePerWhat!=1) then begin
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(WPr,i,WPrw);
              ToolWebHBSDivDropDownMail(WPrw.ConfCode,"WebHBSDivMain.hal","&WEBPAGE=" & WPr.Code,langcode,selected);
            end;
            if (nonblank(WPr.NewsCode)) then begin
              WebOutString("<br />");
              ToolWebHBSDivPublicNews(WPr.NewsCode,langcode,150);
            end;
        end else begin
            selected = WebGetArg("dropdownmail");
            WebOutString("<form method=""post"" action=""");
            llink = ToolWebBuildLink("WebHBSDivMain.hal","&WEBPAGE=" & WPr.Code & "&langcode=" & langcode);
            if (ToolWebHBSUseLink) then begin
              WebOutLink(llink);
            end else begin
              WebOutString(llink);
            end;
            WebOutString(""">");
            WebOutString("<table width=""170"" border=""0"" cellpadding=""0"" cellspacing=""0"">");
            WebOutString("<tr valign=""top"">");
            WebOutString("<td width=""100%"">");
            WebOutString("<select name=""dropdownmail"" onchange=""submit(this.form)"">");
            ToolWebGetTheText(20055,tstr);
            WebOutString("<option value=""-1"">" & tstr & "</option>"); //###
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(WPr,i,WPrw);
              GetConfInfo(WPrw.ConfCode,confname,confcode,maxmail);
              Confr.SerNr = confcode;
              if (ReadFirstMain(Confr,1,true)) then begin
                WebOutString("<option value=""" & i & """ ");
                if (selected==i) then begin
                  WebOutString("selected");
                end;
                if (nonblank(Confr.Comment)) then begin
                  confname = Confr.Comment;
                end;
                WebOutString(">" & confname &"</option>");
              end;
            end;
            WebOutString("</select>");
            WebOutString("</td>");
            ToolWebLineEnd;
            WebOutString("</table>");
            WebOutString("</form>");
            if ((selected>-1) and (selected<rwcnt)) then begin
              MatRowGet(WPr,selected,WPrw);
              wpconfcode = WPrw.ConfCode;
              res = WebHBSDivPublicMain(WPrw.ConfCode,langcode,-1,-1,true,false);
              if (nonblank(WPrw.DropDownNewsCode)) then begin
                WebOutString("<br />");
                ToolWebHBSDivPublicNews(WPrw.DropDownNewsCode,langcode,150);
              end else begin
                if (nonblank(WPr.NewsCode)) then begin
                  WebOutString("<br />");
                  ToolWebHBSDivPublicNews(WPr.NewsCode,langcode,150);
                end;
              end;
            end else begin
              if (nonblank(WPr.NewsCode)) then begin
                WebOutString("<br />");
                ToolWebHBSDivPublicNews(WPr.NewsCode,langcode,150);
              end;
            end;
        end;
      case 11:
        ToolWebHBSDivListVersions(WPr,langcode);
      case 19:
        if (companyset) then begin
          ResetCompany(oldcomp);
          companyset = false;
        end;
        ToolWebHBSDivForum(WPr,langcode);
    end; // Switch
  end else begin
  end;
  ToolWebHBSDivEndDiv("txtbody2");
  if (companyset) then begin
    ResetCompany(oldcomp);
  end;
  return;
end;

procedure ToolWebHBSDivLangSelect(string langcode)
begin
  record LangBlock LBr;
  row LangBlock LBrw;
  Integer rwcnt,i;
  string 200 selected;
  string 255 llink;

  selected = langcode;
  GetWebHBSDivLanguages(LBr);
  ToolWebHBSDivStartDiv("mainpageform");
  WebOutString("<form method=""post"" action=""");
  llink = ToolWebBuildLink("WebHBSDivMain.hal","&function=" & WebGetArg("function") & "&company=" & WebGetArg("company") & "&webpage=" & WebGetArg("webpage") & "&mailnumber=" & WebGetArg("mailnumber") & "&theconf=" & WebGetArg("theconf") & "&thecode=" & WebGetArg("thecode"));
  if (ToolWebHBSUseLink) then begin
    WebOutLink(llink);
  end else begin
    WebOutString(llink);
  end;
  WebOutString(""">");
  WebOutNL;
  WebOutString("<span class=""langselecttext"">" & ToolWebReturnTheText(20199) & ": </span>"); //newstylesheet
  WebOutString("<select name=""langcode"" class=""lang_select"" onchange=""submit(this.form)"">");
  WebOutNL;
  WebOutString("<option value="""">" & ToolWebReturnTheText(20199) & "</option>");
  WebOutString("<optgroup label=""----"">");
  WebOutNL;
  rwcnt = MatRowCnt(LBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LBr,i,LBrw);
    if (nonblank(LBrw.Code)) then begin
      WebOutString("<option ");
      if (selected==LBrw.Code) then begin
        WebOutString("selected ");
      end;
      WebOutString("value=""" & LBrw.Code & """>");
      WebOutString(LBrw.Comment);
      WebOutString("</option>");
      WebOutNL;
    end;
  end;
  WebOutString("</optgroup>");
  WebOutString("</select>");
  WebOutNL;
  WebOutString("</form>");
  WebOutNL;
  ToolWebHBSDivEndDiv("mainpageform");
  WebOutString("<br />");
  WebOutNL;
  return;
end;

procedure ToolWebHBSDivStartMainBox()
begin
  ToolWebHBSDivStartDiv("mainbox");
  WebOutNL;
  return;
end;

procedure ToolWebHBSDivEndMainBox()
begin
  ToolWebHBSDivEndDiv("mainbox");
  WebOutNL;
  return;
end;

procedure ToolWebHBSDivTopMenu(string whichone,string langcode)
begin
  WebOutNL;
//  ToolWebHBSDivStartDiv("topmenu_container");
  ToolWebHBSDivStartDiv("topmenu");
  ToolWebHBSDivAddTopMenubar(whichone,langcode);
  ToolWebHBSDivEndDiv("topmenu");
//  ToolWebHBSDivEndDiv("topmenu_container");
  return;
end;

procedure ToolWebHBSDivHeaderStart()
begin 
  ToolWebHBSDivStartDiv("header1");
  return;
end;

procedure ToolWebHBSDivHeaderEnd()
begin
  ToolWebHBSDivEndDiv("header1");
  return;
end;

procedure ToolWebHBSDivFooter()
begin
  ToolWebHBSDivStartDiv("footer");
  ToolWebHBSDivEndDiv("footer");
  return;
end;

procedure ToolWebHBSDivBodyElementStart()
begin
  WebOutNL;
  WebOutString("<!-- Table to fix Explorer bug with Div start -->");
  WebOutNL;
  WebOutString("<table class=""cTable"" cellspacing=""0"" cellpadding=""0""><tr><td class=""cTd"">");
  WebOutNL;
//  ToolWebHBSDivStartDiv("body_elements_container");
  return;
end;

procedure ToolWebHBSDivBodyElementEnd()
begin
  WebOutString("</td></tr></table>");
  WebOutNL;
  WebOutString("<!-- End of Table for Explorer bug fix -->");
  WebOutNL;
//  ToolWebHBSDivEndDiv("body_elements_container");
  return;
end;

procedure ToolWebHBSDivLeftStart()
begin
  ToolWebHBSDivStartDiv("left_container");
  return;
end;

procedure ToolWebHBSDivLeftEnd()
begin
  ToolWebHBSDivEndDiv("left_container");
  //WebOutString("<br />");  //newstylesheet
  return;
end;

procedure ToolWebHBSDivLeftMenu(string whichone,string langcode)
begin
  ToolWebHBSDivStartDiv("leftmenu_container");
  ToolWebHBSDivStartDiv("leftmenu_header");
  ToolWebHBSDivEndDiv("leftmenu_header");
  ToolWebHBSDivStartDiv("leftmenu_content");

  ToolWebHBSDivAddLeftMenubar(whichone,WebGetArg("clicked"),langcode);
  
  ToolWebHBSDivEndDiv("leftmenu_content");
  ToolWebHBSDivStartDiv("leftmenu_footer");
  ToolWebHBSDivEndDiv("leftmenu_footer");
  ToolWebHBSDivEndDiv("leftmenu_container");
  return;
end;

function Boolean DBHasMoreThanOneCompany()
begin
  record CompaniesBlock CPb;
  Boolean res;

  BlockLoad(CPb);
  if (MatRowCnt(CPb)>1) then begin
    res = true;
  end else begin
    res = false;
  end;
  DBHasMoreThanOneCompany = res;
  return;
end;

procedure ToolWebHBSDivLeftLogin(string leftmenu,string leftmenuli,Boolean failedlogin,string langcode)
begin
  string 255 llink;
  
  if ((blank(CurrentCust)) or (WebLoginStatus!=3)) then begin
    ToolWebHBSDivStartDiv("login_container");
    ToolWebHBSDivStartDiv("login_header");
    ToolWebHBSDivEndDiv("login_header");
    ToolWebHBSDivStartDiv("login_content");
    if (failedlogin) then begin
      WebOutString("<table border=""0"" cellpadding=""0""cellspacing=""6"">");
      ToolWebLineStart;
      WebOutString("<td colspan=""2"" class=""partnerheader"">");
      WebOutString(ToolWebReturnTheText(20012));
      WebOutString("</td>");
      WebOutNL;
      ToolWebLineEnd;
      WebOutString("</table>");
    end;
    if (nonblank(WebGetArg("company"))) then begin
      WebOutString("<form name=""HansaForm"" METHOD=""POST"" action=""");
      llink = "/dologin?company=" & WebGetArg("company") & "&failed=WebHBSDivFailedMain.hal" & "&langcode=" & langcode;
      if (ToolWebHBSUseLink) then begin
        WebOutLink(llink);
      end else begin
        WebOutString(llink);
      end;
      WebOutString(""">");
      WebOutString("<table border=""0"" cellpadding=""0""cellspacing=""6"">");
      ToolWebHBSDivLoginLine(ToolWebReturnTheText(20154) & ":","login","text",WebGetArg("login"));
      ToolWebHBSDivLoginLine(ToolWebReturnTheText(20052) & ":","passwd","password","");
      ToolWebLineStart;
      WebOutString("<td colspan=""2"" align=""right""><input type=""image"" src=""/gfx/_en/btn_log_in.gif"" border=""0""></td>");
      WebOutNL;
      ToolWebLineEnd;
//      ToolWebHiddenField("custpage","WebHBSDivMain.hal?langcode=" & langcode);
      ToolWebHiddenField("custpage","WebHBSDivMain.hal?langcode=" & langcode); //GetWebLanguage);
      WebOutString("</form>");
      WebOutString("</table>");
    end;
    if (nonblank(WebGetArg("company"))) then begin
      ToolWebHBSDivMenuItem(ToolWebReturnTheText(20050),"WebHBSDivMain.hal","&function=WebHBSDivRegister&langcode=" & langcode,"",langcode,0,9,false,false);
      ToolWebHBSDivMenuItem(ToolWebReturnTheText(20153),"WebHBSDivMain.hal","&function=WebHBSDivPassword&langcode=" & langcode,"",langcode,0,9,false,false);
      if (DBHasMoreThanOneCompany) then begin
        ToolWebHBSDivMenuItem(ToolWebReturnTheText(20065),"WebHBSDivMain.hal","&function=WebHBSDivChooseCountry&langcode=" & langcode & "&whatlogmenu=GENERAL","",langcode,0,9,false,false);
      end;
    end else begin
      if (DBHasMoreThanOneCompany==false) then begin
        ToolWebHBSDivMenuItem(ToolWebReturnTheText(20049),"WebHBSDivMain.hal","&company=1&langcode=" & langcode,"",langcode,0,9,false,false);
        ToolWebHBSDivMenuItem(ToolWebReturnTheText(20050),"WebHBSDivMain.hal","&function=WebHBSDivRegister&langcode=" & langcode & "&company=1","",langcode,0,9,false,false);
        ToolWebHBSDivMenuItem(ToolWebReturnTheText(20153),"WebHBSDivMain.hal","&function=WebHBSDivPassword&langcode=" & langcode & "&company=1","",langcode,0,9,false,false);
      end else begin
        ToolWebHBSDivMenuItem(ToolWebReturnTheText(20049),"WebHBSDivMain.hal","&function=WebHBSDivChooseCountry&langcode=" & langcode & "&whatlogmenu=GENERAL","",langcode,0,9,false,false);
      end;
    end;
    ToolWebHBSDivEndDiv("login_content");
    ToolWebHBSDivStartDiv("login_footer");
    ToolWebHBSDivEndDiv("login_footer");
    ToolWebHBSDivEndDiv("login_container");
  end else begin
    if (leftmenu!=leftmenuli) then begin
      ToolWebHBSDivStartDiv("login_container");
      ToolWebHBSDivStartDiv("login_header");
      ToolWebHBSDivEndDiv("login_header");
      ToolWebHBSDivStartDiv("login_content");
      ToolWebHBSDivAddLeftMenubar(leftmenuli,WebGetArg("clicked"),langcode);
      ToolWebHBSDivEndDiv("login_content");
      ToolWebHBSDivStartDiv("login_footer");
      ToolWebHBSDivEndDiv("login_footer");
      ToolWebHBSDivEndDiv("login_container");
    end;
  end;
  return;
end;

procedure WebHBSDivPublic(string confcode,string langcode)
begin
  Boolean res;

  res = WebHBSDivPublicMain(confcode,langcode,-1,-1,false,false);
  return;
end;

procedure WebHBSDivMailFAQView(string langcode)
begin
  record MailVc Mailr;
  record MailVc Mail2r;
  record RLinkVc RLr;
  Integer cnt;
  LongInt wmailnumber;

  wmailnumber = WebGetArg("mailnumber");
  Mailr.SerNr = wmailnumber;
  if (ReadFirstMain(Mailr,1,true)) then begin
    ToolWebHBSDivOutTextLang(Mailr,"",Mailr.Header,langcode); // Confcode...
    WebOutString("<p>");
    cnt = 1;
    while (ReadRecordLink(Mailr,cnt,Mail2r,RLr)) begin
      cnt = cnt + 1;
      ToolWebHBSDivOutTextLang(Mail2r,"",Mail2r.Header,langcode);
    end;
  end;
  return;
end;

procedure WebHBSDivKeywordComments()
begin
  record WebKeywordsBlock WKr;
  row WebKeywordsBlock WKrw;
  Integer i,rwcnt,cnt;
  Integer oldcomp;
  Boolean res;
  
  oldcomp = CurrentCompany;  
  res = SetCompany(1,false);
  cnt = 0;
  BlockLoad(WKr);
  rwcnt = MatRowCnt(WKr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WKr,i,WKrw);
    if (nonblank(WKrw.KeyWord)) then begin
      cnt = cnt + 1;
      if (cnt==1) then begin
        WebOutString("<!-- ");
      end;
      WebOutString(" " & WKrw.KeyWord);
      if (cnt==5) then begin
        WebOutString(" -->");
        WebOutNL;
        cnt = 0;
      end;
    end;
  end;
  if (cnt>0) then begin
    WebOutString(" -->");
    WebOutNL;
  end;
  ResetCompany(oldcomp);
  return;
end;

procedure WebHBSDivKeywords()
begin
  record WebKeywordsBlock WKr;
  row WebKeywordsBlock WKrw;
  Integer i,rwcnt,cnt;
  Integer oldcomp;
  Boolean res;
  
  oldcomp = CurrentCompany;  
  res = SetCompany(1,false);
  BlockLoad(WKr);
  WebOutString("<meta name=""keywords"" content=""");
  rwcnt = MatRowCnt(WKr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WKr,i,WKrw);
    if (nonblank(WKrw.KeyWord)) then begin
      WebOutString(WKrw.KeyWord);
      if (i<(rwcnt-1)) then begin
        WebOutString(", ");
      end;
    end;
  end;
  WebOutString(""" />");
  WebOutNL;
  ResetCompany(oldcomp);
  return;
end;

procedure WebHBSDivChooseCountry(string langcode)
begin
  record WebLinkListsVc WLLr;
  row WebLinkListsVc WLLrw;
  Integer i,rwcnt;
  Integer oldcomp;
  Boolean res;
  
  oldcomp = CurrentCompany;  
  res = SetCompany(1,false);
  WebOutString("<p class=""heading3"">" & ToolWebReturnTheText(20198) & "</p>");
  WLLr.Code = WebGetArg("whatlogmenu");
  if (blank(WLLr.Code)) then begin
    WLLr.Code = "DEFAULT";
  end;
  if (ReadFirstMain(WLLr,1,true)) then begin
    rwcnt = MatRowCnt(WLLr);
    if (rwcnt>0) then begin
      ToolWebStartTable;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(WLLr,i,WLLrw);
        ToolWebHBSDivCommentAndLink(WLLrw.Comment,WLLrw.LinkComment,"WebHBSDivMain.hal",WLLrw.LinkString & "&langcode=" & langcode,"");
      end;
      ToolWebEndTable;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

function string 200 DefaultEditField(string whichone)
begin
  string 200 res;
  
  switch (whichone) begin
    case "WebHBSDivSearchConf": res = "search_field";
    otherwise res = "";
  end;
  DefaultEditField = res;
  return;
end;

procedure WebHBSWelcomePage(string langcode)
begin
  string 200 person;
  record CUVc CUr;
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    CUr.Code = CurrentCust;
  end;
  person = WebGetArg("username");
  if (blank(person)) then begin
    person = CUr.Name;
  end;
  WebOutString("<p class=""heading3""> Welcome " & person & "</p>");
  return;
end;

procedure WebHBSDivDisplayPageMain(string whichone,string confcode,string langcode)
begin
  switch (whichone) begin
// Special functions called inside the code
    case "WebHBSDivPublicMain":       WebHBSDivPublic(confcode,langcode);
    case "WebHBSDivMailFAQView":      WebHBSDivMailFAQView(langcode);
    case "WebHBSDivMailNewsView":     WebHBSDivMailNewsView(langcode);
//    case "WebHBSDivChatSelected":   WebHBSDivChatSelected; // Not needed
    case "WebHBSDivChooseCountry":    WebHBSDivChooseCountry(langcode);
    case "WebHBSDivRegister":         WebHBSDivRegister;
    case "WebHBSDivPassword":         WebHBSDivPassword(langcode);
    case "WebHBSDivPassword2":        WebHBSDivPassword2(langcode);
//    case "WebHBSDivFAQMain":        WebHBSDivFAQMain;
    case "WebHBSDivShopBasket":       ToolWebHBSDivShopBasketNew(langcode); //WNS
    case "WebHBSDivCustProd":         ToolWebHBSDivCustProdNew(langcode); //WNS
    case "WebHBSDivItemView":         ToolWebHBSDivItemViewNew(langcode); //WNS
//    case "WebHBSShopIndex":         WebHBSDivShopIndex;
    case "WebHBSDivDownloadPage":     WebHBSDivDownloadPage(langcode);
    case "WebHBSDivNewDownloadPage":  WebHBSDivNewDownloadPage(langcode);
    case "WebHBSDivNewDownloadPage2": WebHBSDivNewDownloadPage2(langcode);
    case "WebHBSDivNewDownloadPageSelect": WebHBSDivNewDownloadPageSelect(langcode);
    case "WebHBSDivSearchConf":       WebHBSDivSearchConf(langcode);
    case "WebHBSDivDisplayAdvert":    WebHBSDivDisplayAdvert(langcode);

// Special functions called using settings, code to avoid redoing settings...
    case "WebHBSContactUs.hal":       WebHBSDivContactUs;
    case "WebHBSDownloads.hal":       ToolWebHBSDivDownloads(langcode);
    case "WebHBSDownloadsNew.hal":    ToolWebHBSDivDownloadsNew(langcode);
    case "WebHBSShopChoose.hal":      ToolWebHBSDivShopChoose(langcode);
    case "WebHBSFAQChoose.hal":       ToolWebHBSDivFAQChoose(langcode);
    case "WebHBSDivChat.hal":         WebHBSDivChat; // Should not be neccesary
    case "WebHBSDivDownStoreQ":       WebHBSDivDownStoreQ(langcode);

    case "WebHWUPlanCourse.hal":      WebHWUPlanCourse(langcode);
    case "WebHWUCourseDescription.hal": WebHWUCourseDescription(langcode);
    case "WebHWUUniversity.hal":      DoWebHWUUniversity(langcode);
    case "WebHWUCustomerTests.hal":   WebHWUCustomerTests(langcode);
    case "WebHBSDivPayServerBack":    WebHBSDivPayServerBack(langcode);
    case "WebHBSDivPrepareOrder":     WebHBSDivPrepareOrder(langcode);

//IS Website
    case "WebISShopServiceAmend"      : WebISShopServiceAmend(langcode,-1);
    case "WebISShopMyServices"        : WebISShopMyServices(langcode);
    case "WebISShopServiceStatus"     : WebISShopServiceStatus(langcode);
    case "WebISShopServiceTariffView" : WebISShopServiceTariffView(langcode);
    case "WebISShopServiceUsage"      : ISWebCannotHandle("Main",whichone,langcode);

    case "HOMELI":
      WebHBSWelcomePage(langcode);
      ToolWebHBSDivMagicList(whichone,langcode);
// Standard function
    otherwise
      ToolWebHBSDivMagicList(whichone,langcode);
  end;
  return;
end;

updating procedure WebHBSDivDisplayPageMainUpdate(string whichone,string confcode,string langcode)
begin
  switch (whichone) begin
// Special functions called inside the code
    case "WebHBSDivStoreCust":          WebHBSDivStoreCust(langcode);
    case "WebHBSDivCreatePassword":     WebHBSDivCreatePassword(langcode);
    case "WebHBSDivDownStore":          WebHBSDivDownStore(langcode);
    case "WebHBSDivStoreItem":          WebHBSDivStoreItem; //WNS
    case "WebHBSDivShopBasketStepPAY2": WebHBSDivShopBasketStepPAY2(langcode); //WNS
    case "WebHBSDivSendPayment":        WebHBSDivSendPayment(langcode); //WNS
    case "WebHBSDivPayPalSuccess":      WebHBSDivPayPalSuccess(langcode); //WNS
    case "WebHBSDivSendPayServerPayment":WebHBSDivSendPayServerPayment(langcode); //WNS
    case "WebHBSDivCheckout":           WebHBSDivCheckout(langcode); //WNS
    case "WebHBSDivPayServerSuccess":   WebHBSDivPayServerSuccess(langcode);
    case "WebHBSDivCreateOrder":        WebHBSDivCreateOrder(langcode);
    case "WebHBSDivPAYWithPayServer":   WebHBSDivPAYWithPayServer(langcode); //WNS
    case "WebHBSDivWaitForCCPurchase":  WebHBSDivWaitForCCPurchase(langcode); //WNS
// IS Website
    case "WebISShopServiceAmendBuy"   : WebISShopServiceAmendBuy(langcode);
    case "WebISShopServiceStatusChange": WebISShopServiceStatusChange(langcode);
    case "WebISShopServiceAmendRemove": WebISShopServiceAmendRemove(langcode);
    otherwise
      WebHBSDivDisplayPageMain(whichone,confcode,langcode);
  end;
  return;
end;

procedure WebHBSDivDisplayBanners(string whichone,string langcode)
begin
  record WebLinkListsVc WLLr;
  row WebLinkListsVc WLLrw;
  Integer i,rwcnt;
  Integer oldcomp;
  Boolean res;
  
  oldcomp = CurrentCompany;  
  res = SetCompany(1,false);
  WLLr.Code = WebGetArg("bannerlist");
  if (blank(WLLr.Code)) then begin
    WLLr.Code = "BANNER";
  end;
  ToolWebHBSDivStartDiv("banner_container");
  RandomAddOwnNewAdverts(whichone,langcode);
  if (ReadFirstMain(WLLr,1,true)) then begin
    rwcnt = MatRowCnt(WLLr);
    if (rwcnt>0) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(WLLr,i,WLLrw);
        if ((nonblank(WLLrw.Comment)) and (nonblank(WLLrw.LinkComment))) then begin
          ToolWebHBSDivBanner(WLLrw.Comment,WLLrw.LinkComment,"WebHBSDivMain.hal",WLLrw.LinkString,"_parent");
        end else begin
          if (nonblank(WLLrw.LinkString)) then begin
            ToolWebHBSDivAddAdvert(4); // Well.....not very nice...but works...
          end;
        end;
        WebOutString("<br><br>");
        WebOutNL;
      end;
    end;
  end;
  ToolWebHBSDivEndDiv("banner_container");
  ResetCompany(oldcomp);
  return;
end;

procedure WebHBSDivDisplayPageTop(string whichone,string topmenu,string leftmenu,string leftmenu2,string langcode,Boolean loginf,Boolean failedlogin)
begin
  ToolWebHBSDivStartPage;
  ToolWebHBSDivSetMainTitle;
  WebHBSDivKeywords;
  ToolWebHBSDivStartBody(DefaultEditField(whichone),"");

  ToolWebHBSDivStartDiv("maincontainer");
  ToolWebHBSDivStartDiv("leftcontainer");
//  ToolWebHBSDivAddAdvert(1);
  ToolWebHBSDivEndDiv("leftcontainer");
  ToolWebHBSDivStartDiv("rightcontainer");
//  ToolWebHBSDivAddAdvert(1);
  ToolWebHBSDivEndDiv("rightcontainer");
  ToolWebHBSDivStartDiv("centercontainer");
//  ToolWebHBSDivStartDiv("topcontainer"); //newstylesheet - IE fix
//  ToolWebHBSDivAddAdvert(3);
//  ToolWebHBSDivEndDiv("topcontainer"); //newstylesheet - IE fix

  ToolWebHBSDivStartMainBox;
  ToolWebHBSDivHeaderStart;
  ToolWebHBSDivLangSelect(langcode);
  ToolWebHBSDivTopMenu(topmenu,langcode);
  ToolWebHBSDivHeaderEnd;
  ToolWebHBSDivBodyElementStart;
  ToolWebHBSDivLeftStart;
  ToolWebHBSDivLeftMenu(leftmenu,langcode);
  if (loginf) then begin
    ToolWebHBSDivLeftLogin(leftmenu,leftmenu2,failedlogin,langcode);
  end;
  WebHBSDivDisplayBanners(whichone,langcode);
  ToolWebHBSDivLeftEnd;
  ToolWebHBSDivStartDiv("txtbody");
  return;
end;

procedure WebHBSDivDisplayPageBottom()
begin
  ToolWebHBSDivEndDiv("txtbody");
  ToolWebHBSDivBodyElementEnd;
  ToolWebHBSDivFooter;
  ToolWebHBSDivEndMainBox;

  ToolWebHBSDivStartDiv("bottomcontainer");
//  WebOutString("<img src=""/728x90.jpg"">");
//  ToolWebHBSDivAddAdvert(3);
  ToolWebHBSDivEndDiv("bottomcontainer");
  ToolWebHBSDivEndDiv("centercontainer");

  ToolWebHBSDivStartDiv("mainfooter"); //newstylesheet
  ToolWebHBSDivEndDiv("mainfooter"); //newstylesheet

  ToolWebHBSDivEndDiv("maincontainer");

  WebHBSDivKeywordComments;
  ToolWebHBSDivEndPage;
  return;
end;

// stylesheet not implemented.
procedure WebHBSSetVariables(string defwhichone,string deftop_menu,string defleftmenu,string defleftmenuli,
                             var string whichone,var string confcode,var string topmenu,
                             var string leftmenu,var string leftmenuli,var string langcode)
begin
  string 255 thefunc;
  
  whichone = WebGetArg("webpage");
  confcode = WebGetArg("confcode");
  topmenu =  WebGetArg("topmenu");
  leftmenu = WebGetArg("leftmenu");
  thefunc =  WebGetArg("function");
//KJELL
  langcode = GetWebLanguage;
  leftmenuli = WebGetArg("leftmenulogin");
  
  if (blank(whichone)) then begin whichone = defwhichone; end;
  if (blank(topmenu)) then begin topmenu = deftop_menu; end;
  if (blank(leftmenu)) then begin leftmenu = defleftmenu; end;
  if (blank(langcode)) then begin langcode = GetWebLanguage; end;
  if (blank(leftmenuli)) then begin leftmenuli = leftmenu & defleftmenuli; end;
  
  if (nonblank(thefunc)) then begin
    whichone = thefunc;
  end;

  return;
end;

procedure WebHBSDivSelectPage(var string whichone,var string confcode,var string topmenu,var string leftmenu,var string leftmenuli,var string langcode,var Integer canlogin)
begin
  record WebSitesBlock WSBr;
  row WebSitesBlock WSBrw;
  string 200 defpage,deftopmenu,defleftmenu,defleftmenuli;
  Integer i,rwcnt;
  string 60 thehost;
  Integer defrow;
  Integer matchrow;
  Integer bisloggedin;
  Integer oldcomp;
  Boolean res;
  string 60 forcelang;
  
  forcelang = "";
  oldcomp = CurrentCompany;  
  res = SetCompany(1,false);
  defrow = -1;
  matchrow = -1;
  defpage = "HOME";
  deftopmenu = "TOP";
  defleftmenu = "LEFT";
  defleftmenuli = "LI";
  canlogin = 1;
  if (blank(CurrentCust)) then begin
    bisloggedin = 0;
  end else begin
    bisloggedin = 1;
  end;
  thehost = WebHost;
  BlockLoad(WSBr);
  rwcnt = MatRowCnt(WSBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSBr,i,WSBrw);
    if (WSBrw.Host==thehost) then begin
      switch (right(WSBrw.Host,2)) begin
        case "fi": forcelang = "FI";
        case "no": forcelang = "NO";
        case "dk": forcelang = "DK";
        case "lv": forcelang = "LV";
      end;
      if (WSBrw.LoggedIn==bisloggedin) then begin
        defpage = WSBrw.MidPage;
        deftopmenu = WSBrw.TopMenu;
        defleftmenu = WSBrw.LeftMenu;
        canlogin = WSBrw.LoginActive;
        goto LWebHBSDivSelectPage;
      end;
      matchrow = i;
    end;
    if (blank(WSBrw.Host)) then begin
      if (WSBrw.LoggedIn==bisloggedin) then begin
        defrow = i;
      end;
    end;
  end;
  if (matchrow>0) then begin
    MatRowGet(WSBr,matchrow,WSBrw);
    defpage = WSBrw.MidPage;
    deftopmenu = WSBrw.TopMenu;
    defleftmenu = WSBrw.LeftMenu;
    canlogin = WSBrw.LoginActive;
    goto LWebHBSDivSelectPage;
  end;
  if (defrow>=0) then begin //WNS
    MatRowGet(WSBr,defrow,WSBrw);
    defpage = WSBrw.MidPage;
    deftopmenu = WSBrw.TopMenu;
    defleftmenu = WSBrw.LeftMenu;
    canlogin = WSBrw.LoginActive;
    goto LWebHBSDivSelectPage;
  end;
LWebHBSDivSelectPage:;
//KJELL
  WebHBSSetVariables(defpage,deftopmenu,defleftmenu,defleftmenuli,whichone,confcode,topmenu,leftmenu,leftmenuli,langcode);
  if (blank(langcode)) then begin
    langcode = forcelang;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure WebHBSDivMain()
begin
  string 200 whichone,confcode,topmenu,leftmenu,leftmenu2,langcode;
  Integer canlogin;    

  if (WebGetArg("demof")=="1") then begin
    PutSessionString("demof","1");
  end else begin
    PutSessionString("demof","");
  end;
  if (nonblank(WebGetArg("prog_lang"))) then begin
    UpdateWebLanguage(WebGetArg("prog_lang"));
  end;

  if (nonblank(WebGetArg("prog_productcode"))) then begin
    UpdateWebProductCode(WebGetArg("prog_productcode"));
  end;
  if (nonblank(WebGetArg("prog_licensemode"))) then begin
    UpdateWebLicenseMode(WebGetArg("prog_licensemode"));
  end;
  if (nonblank(WebGetArg("prog_cntry"))) then begin
    UpdateWebProgCountry(WebGetArg("prog_cntry"));
  end;
  if (nonblank(WebGetArg("prog_appname"))) then begin
    UpdateWebProgAppName(WebGetArg("prog_appname"));
  end;
  if (nonblank(WebGetArg("os"))) then begin
    UpdateWebProgOperatingSystem(WebGetArg("os"));
  end;
  UpdateWebFreemiumTags(WebGetArg("freemiumtags"),WebGetArg("freemiumcnt"));

  SetDetailedCookie("progcountrycode",ConvertXml(WebGetArg("prog_cntry")),"Country Code","","/",15552000); //180days

  if (nonblank(WebGetArg("enabregno"))) then begin
    if (AutoLoginToWebNG) then begin
      goto LWebHBSDivMain;
    end;
  end;
  
  WebHBSDivSelectPage(whichone,confcode,topmenu,leftmenu,leftmenu2,langcode,canlogin);
  WebHBSDivDisplayPageTop(whichone,topmenu,leftmenu,leftmenu2,langcode,canlogin,false);
  WebHBSDivDisplayPageMain(whichone,confcode,langcode);
  WebHBSDivDisplayPageBottom;
LWebHBSDivMain:;
  return;
end;

global
procedure WebFinishEnabLogin()
begin
  WebHBSDivMain;
  return;
end;

global
updating procedure WebHBSDivMainUpdate()
begin
  string 200 whichone,confcode,topmenu,leftmenu,leftmenu2,langcode;
  Integer canlogin;
  
  WebHBSDivSelectPage(whichone,confcode,topmenu,leftmenu,leftmenu2,langcode,canlogin);
  WebHBSDivDisplayPageTop(whichone,topmenu,leftmenu,leftmenu2,langcode,canlogin,false);
  WebHBSDivDisplayPageMainUpdate(whichone,confcode,langcode);
  WebHBSDivDisplayPageBottom;
  return;
end;

global
procedure WebHBSDivFailedMain()
begin
  string 200 whichone,confcode,topmenu,leftmenu,leftmenu2,langcode;
  Integer canlogin;
  
  WebHBSDivSelectPage(whichone,confcode,topmenu,leftmenu,leftmenu2,langcode,canlogin);
  WebHBSDivDisplayPageTop(whichone,topmenu,leftmenu,leftmenu2,langcode,canlogin,true);
  WebHBSDivDisplayPageMain(whichone,confcode,langcode);
  WebHBSDivDisplayPageBottom;
  return;
end;

procedure WebHBSDivRedirectToMain()
begin
  WebOutString("<html>");
  WebOutString("<head>");
  WebOutString("<title>Logging out...</title>");
  WebOutString("<meta http-equiv=""refresh"" content=""0; url=/?langcode=" & GetWebLanguage & """>");
  WebOutString("<style>");
  WebOutString("<!--");
  WebOutString("body {font-family: Verdana, Arial, Helvetica, Sans-sherif:padding: 0px;	margin: 0 0 0 0;  text-align:left;	font-size: 11px;  ");
  WebOutString("color: #333333;  font-weight: normal;    letter-spacing: normal;  background-image:  url(/art/bg01.gif);    }");
  WebOutString("//-->");
  WebOutString("</style>");
  WebOutString("</head>");
//  WebOutString("<body>Logging out</body>");
  WebOutString("</html>");
  return;
end;

global
updating procedure WebHBSDivDoLogout()
begin
  WebLogout;
  WebHBSDivRedirectToMain;
//  WebHBSDivMain;
  return;
end;

global
updating procedure WebHBSDivRegPay2()
begin
  string 200 whichone,confcode,topmenu,leftmenu,leftmenu2,langcode;
  Integer canlogin;
  
  WebHBSDivSelectPage(whichone,confcode,topmenu,leftmenu,leftmenu2,langcode,canlogin);
  BuildShopBaskFromRegistration(CurrentCust,langcode);
  WebHBSDivDisplayPageTop("WebHBSDivShopBasket",topmenu,leftmenu,leftmenu2,langcode,canlogin,false);
  WebHBSDivDisplayPageMain("WebHBSDivShopBasket",confcode,langcode);
  WebHBSDivDisplayPageBottom;
  return;
end;

global
procedure WebHBSDivRegPay()
begin
  string 255 link;

  if (false) then begin
    WebOutString("<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/2000/REC-xhtml1-20000126/DTD/xhtml1-transitional.dtd"">");
    WebOutNL;
    WebOutString("<html xmlns=""http://www.w3.org/1999/xhtml"" xml:lang=""EN"">");
    WebOutNL;
    WebOutString("<meta http-equiv=""refresh"" content=""" & 0 & "; url=http://shop.hansaworld.com/WebHBSDivRegPay2.hal?");
    WebOutString("custcode=" & WebGetArg("custcode") & "&enabregno=" & WebGetArg("enabregno") & "&usercode=" & WebGetArg("usercode") & "&prog_lang=" & WebGetArg("prog_lang") & "&company=" & WebGetArg("company") & "&os=" & WebGetArg("os") & "&sessionid=" & WebGetArg("sessionid") & """ />");
    WebOutNL;
    WebOutString("<head>");
    WebOutNL;
    WebOutString("<title></title>");
    WebOutNL;
    WebOutString("</head>");
    WebOutNL;
    WebOutString("<body>");
    WebOutNL;
    WebOutString("</body>");
    WebOutNL;
    WebOutString("</html>");
    WebOutNL;
  end else begin
    link = "/WebUpdatingAction.hal?action=regpay";
    link = link & "&custcode="  & WebGetArg("custcode");
    link = link & "&enabregno=" & WebGetArg("enabregno");
    link = link & "&usercode="  & WebGetArg("usercode");
    link = link & "&prog_lang=" & WebGetArg("prog_lang");
    link = link & "&company="   & WebGetArg("company");
    link = link & "&os="   & WebGetArg("os");

    LogWebNGMasterPayClick;
    
    RedirectToURL(link);
  end;
  return;
end;
