external updating procedure CreateNewContract(record CUVc,var record COCUServiceVc,LongInt,LongInt,LongInt,Integer,LongInt);

external updating function LongInt ToolWebStoreTheOrder2(var LongInt,string,Boolean);
external updating function Boolean ToolWebStoreThePurOrder2();
external function string 255 ToolWebBuildLink(string,string);
external function Boolean LoggedInHBSDivTest();
external updating procedure WebHBSDivShopBasketStep2();
external function string 200 GetWebLanguage();
external function Boolean BuildWebOrd(string,LongInt,var record ORVc,var Boolean,string);
external function Boolean ToolWebHBSUseLink();
external Function Boolean WebHBSDivPublicMain(string,string,LongInt,LongInt,Boolean,Boolean);
external procedure ToolWebLineStart();
external procedure ToolWebLineEnd();
external procedure ToolWebHBSDivItemHeader(Boolean);
external procedure AddLinkedItemsToArr(record INVc,var array string,var integer);
external procedure ToolWebHBSDivDisplayItemLine(string,string,val,string,string,val,val,string,val,Boolean,Integer);
external procedure RemoveItemFromArr(string,var array string,var integer);
external procedure ToolWebHBSDivListTable(Integer,Integer,string);
external procedure ToolWebHBSDivListTableEnd();
external procedure ToolWebHBSDivInfoCell(string,string,string);
external function string 255 GetUnitText(string,string);
external function string 200 ToolWebReturnTheText(Integer);
external procedure ToolWebHBSDivListSuggestedItems(array string,integer,string);
external procedure ToolWebHWStartPage();
external procedure ToolWebHWEndPage();
external procedure ToolWebHWStartSecureBody();
external procedure ToolWebHiddenField(string,string); 
external procedure FindCCAccountID(string,string,Integer,var record CCAccountIDVc,Integer);
external procedure ToolWebHWSpecialDisplayLine(string,string,string,string,LongInt,LongInt,Boolean);
external procedure ToolWebHWDisplayErrorLine(Integer,string,string);
external updating function boolean ValidateCCPayment(string);
external updating function boolean OpenCCPurchaseTransaction(val,string,string,string,var string,string,string,string,string,string,string,
                                                              integer,string,integer,
                                                              string,string,string,string,string,string,string,
                                                              var LongInt,var string);
external updating function Boolean BuildWebOrd2(string,LongInt,var record ORVc, var Boolean,string);
external procedure CreateFormToPaySite(string,string);
external function Integer GetCCPurchaseParameters(string,string,integer,var string,var string,var string,var string,
                                          var string,var string,var integer,var string,var integer);
external updating procedure GetCustDetailsForTX(string,var string,var string,var string,var string,var string,var string,var string);
/*
external procedure ToolWebHBSDivDisplayItemLine(string,string,val,string,string,val,val,string,val,Boolean,Integer);
external function string 255 GetUnitText(string,string);
external procedure ToolWebHBSDivInfoCell(string,string,string);
external Function Boolean WebHBSDivPublicMain(string,string,LongInt,LongInt,Boolean,Boolean);
external procedure ToolWebLineStart();
external procedure ToolWebLineEnd();
external procedure ToolWebHBSDivListTable(Integer,Integer,string);
external procedure ToolWebHBSDivListTableEnd();
external function string 200 ToolWebReturnTheText(Integer);
external function Boolean BuildWebOrdFromRegistration(string,var record ORVc);
external procedure ToolWebHBSDivItemHeader(Boolean);
*/
/* I assume this function is NOT used, as BuildWebOrdFromRegistration function does NOT exist
global
procedure ToolWebHBSDivRegToPay(string langcode)
begin
  record ORVc ORr;
  record CUVc CUr;
  Boolean res;
  Boolean proceedf;
  row ORVc ORrw;
  record INVc INr;
  Integer rwt;
  Integer rwcnt,i;
  string 255 linkargs;

  proceedf = false;
  if (LoggedInHBSDivTest()) then begin
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)==false) then begin
    CUr.Name = "";
  end;
  res = BuildWebOrdFromRegistration(CurrentCust,ORr);
  rwcnt = MatRowCnt(ORr);
  if (rwcnt>0) then begin proceedf = true; end;
  res = WebHBSDivPublicMain("WWWPREREGTOPAY",langcode,-1,-1,false,false);
  WebOutString("<table border=""0"" width=""100%"" align=""left"">");
  ToolWebLineStart;
  if (proceedf==true) then begin
    WebOutString("<td>");
    ToolWebHBSDivItemHeader(true);
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      INr.Code = ORrw.ArtCode;
      if (ReadFirstMain(INr,1,true)==false) then begin
        INr.Unittext = "";
      end;
//      linkargs = "company=" & WebGetArg("company") & "&langcode=" & langcode & "&itcode=" & WebGetArg("itcode") & "&itemcode=" & ORrw.ArtCode;
      ToolWebHBSDivDisplayItemLine(ORrw.ArtCode,"",ORrw.Quant,GetUnitText(INr.Unittext,langcode),ORrw.Spec,ORrw.vRebate,ORrw.Price,ORr.CurncyCode,ORrw.Sum,true,rwt);//WNS
      rwt = rwt + 1;
      if (rwt>1) then begin rwt = 0; end;
    end;
    ToolWebHBSDivListTableEnd;
    WebOutString("</td>");
    ToolWebLineEnd;
    ToolWebLineStart;
    WebOutString("<td>");
    ToolWebHBSDivListTable(3,0,"0");
    ToolWebLineStart;
    ToolWebHBSDivInfoCell(ToolWebReturnTheText(20104),"80%","right");
    ToolWebHBSDivInfoCell(ORr.Sum1,"20%","right");
    ToolWebLineEnd;
    ToolWebLineStart;
    ToolWebHBSDivInfoCell(ToolWebReturnTheText(20105),"80%","right");
    ToolWebHBSDivInfoCell(ORr.Sum3,"20%","right");
    ToolWebLineEnd;
    ToolWebLineStart;
    ToolWebHBSDivInfoCell(ToolWebReturnTheText(20106),"80%","right");
    ToolWebHBSDivInfoCell(ORr.Sum4,"20%","right");
    ToolWebLineEnd;
    if (nonblank(ORr.CurncyCode)) then begin
      ToolWebLineStart;
      ToolWebHBSDivInfoCell(ToolWebReturnTheText(20108),"80%","right");
      ToolWebHBSDivInfoCell(ORr.CurncyCode,"20%","right");
      ToolWebLineEnd;
    end;
    ToolWebHBSDivListTableEnd;
    WebOutString("</td>");
    ToolWebLineEnd;
    ToolWebLineStart;
    WebOutString("<td>");
//    ToolWebHBSDivListTable(3,0,"0");
//    WebOutString("<form name=""HansaForm"" method=""POST"" action=""");
//    WebOutLink(ToolWebBuildLink("WebHBSDivShopBasketStep2.hal","&company=" & WebGetArg("company") & "&langcode=" & langcode & "&itemcode=" & WebGetArg("itemcode")));
//    WebOutString(""">");
//    ToolWebLineStart;
//    WebOutString("<td align=""right"" bgcolor=""#FFFFFF"" valign=""top""><input type=""submit"" value=""" & ToolWebReturnTheText(20119) & """ name=""b1""></td>");
//    ToolWebLineEnd;
//    WebOutString("</form>");
//    ToolWebHBSDivListTableEnd;
    WebOutString("</td>");
  end else begin
    ToolWebHBSDivInfoCell(ToolWebReturnTheText(20107),"100%","false");
  end;
  ToolWebLineEnd;
  WebOutString("</table>");
  if (proceedf==true) then begin
    res = WebHBSDivPublicMain("WWWAFTERSHOPBASK",langcode,-1,-1,false,false);
  end;
  end;
  return;  
end;
*/

global
updating procedure WebHBSDivPayPalSuccess(string langcode)
begin
  // this only gets called from paypal
  // problem 1: in theory a user could call this directly, thereby bypassing the payment !!! We need to possibly get additional confirmation from PayPal
  // problem 2: what if the paypal thing takes too long? our user will be logged out. which is fine in theory, but how do we then store the payment 
  //            if our session is expired and cannot give us a customer code anymore?
  
  if (LoggedInHBSDivTest()) then begin
    WebHBSDivShopBasketStep2;
  end;
  
  return;
end;

//WNS:begin
function string 20 PayPalGetWebLanguage()
begin
  string 20 res;
  
  // read ui language and map this to a paypal language
  res = GetWebLanguage;//"UK";
  
  PayPalGetWebLanguage = res;
  return;
end;

function string 5 PayPalGetCurrency(string currency)
begin
  string 5 res;
  res = "GBP"; //convert hansa currency codes to paypal currency codes
  PayPalGetCurrency = res;
  return;
end;

global
procedure BuildPayPalPostFields(string langcode)
begin
  Record ORVc ORr;
  Row ORVc ORrw;
  Boolean res,freightf;
  Integer i, cnt;
  string 255 llink;
  string 255 serverurl;
  record WebControlBlock WCr;
  
  BlockLoad(WCr);
  if (nonblank(WCr.ToPaySSLURL)) then begin
    serverurl = WCr.ToPaySSLURL;
    if (right(WCr.ToPaySSLURL,1)!="/") then begin
      serverurl = serverurl & "/";
    end;
  end;

  res = BuildWebOrd(CurrentCust,-1,ORr,freightf,langcode);
  cnt = MatRowCnt(ORr);
  if (cnt>0) then begin
    //output header fields
    WebOutString("<input type=""hidden"" name=""cmd"" value=""_cart"">");
    WebOutString("<input type=""hidden"" name=""business"" value=""webshop@hansaworld.com"">");
    WebOutString("<input type=""hidden"" name=""lc"" value=""" & PayPalGetWebLanguage & """>");

    llink = ToolWebBuildLink("WebHBSDivMain.hal","company=" & WebGetArg("company") & "&langcode=" & langcode & "&function=WebHBSDivShopBasket");

    WebOutString("<input type=""hidden"" name=""cancel_return"" value=""" & serverurl);
    if (ToolWebHBSUseLink) then begin
      WebOutLink(llink);
    end else begin
      WebOutString(llink);
    end;
    WebOutString(""">"); // url to "cancel/go back to webshop"
    
    WebOutString("<input type=""hidden"" name=""shopping_url"" value=""" & serverurl);
    if (ToolWebHBSUseLink) then begin
      WebOutLink(llink);
    end else begin
      WebOutString(llink);
    end;
    WebOutString(""">"); // url to "continue shopping"
    
    llink = ToolWebBuildLink("WebHBSDivMainUpdate.hal","company=" & WebGetArg("company") & "&langcode=" & langcode & "&function=WebHBSDivPayPalSuccess");
    
    WebOutString("<input type=""hidden"" name=""return"" value=""" & serverurl);
    if (ToolWebHBSUseLink) then begin
      WebOutLink(llink);
    end else begin
      WebOutString(llink);
    end;
    WebOutString(""">");// url to go to upon successful return
    WebOutString("<input type=""hidden"" name=""rm"" value=""2"">");
    WebOutString("<input type=""hidden"" name=""upload"" value=""1"">");

    for (i=0;i<cnt;i=i+1) begin
      //output row fields
      MatRowGet(ORr,i,ORrw);
      WebOutString("<input type=""hidden"" name=""item_name_" & i+1 & """ value=""" & ORrw.Spec & """>");
      WebOutString("<input type=""hidden"" name=""item_number_" & i+1 & """ value=""" & ORrw.ArtCode & """>");
      WebOutString("<input type=""hidden"" name=""quantity_" & i+1 & """ value=""" & ValToString(ORrw.Quant,M4Val,"",".",2) & """>");
      WebOutString("<input type=""hidden"" name=""amount_" & i+1 & """ value=""" & ORrw.Sum + 1 & """>");
    end;

    WebOutString("<input type=""hidden"" name=""invoice"" value=""" & ORr.SerNr & """>");
    WebOutString("<input type=""hidden"" name=""currency_code"" value=""" & PayPalGetCurrency(ORr.CurncyCode) & """>");
//    WebOutString("<input type=""image"" src=""http://www.paypal.com/en_US/i/btn/x-click-but01.gif"" name=""submit"" alt=""Make payments with PayPal - it's fast, free and secure!"">");

  end;
  return;
end;

global
procedure ToolWebHBSDivShopBasketNew(string langcode)
begin
  record ORVc ORr;
  record CUVc CUr;
  Boolean res;
  Boolean proceedf;
  row ORVc ORrw;
  record INVc INr;
  Integer rwt;
  Integer rwcnt,i;
  string 255 linkargs;
  Boolean freightf;
  array string 20 arrIN;
  integer arrINcnt;

  arrINcnt = 0;
  proceedf = false;
  if (LoggedInHBSDivTest()) then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      CUr.Name = "";
    end;
    res = BuildWebOrd(CurrentCust,-1,ORr,freightf,langcode);
    rwcnt = MatRowCnt(ORr);
    if (rwcnt>0) then begin proceedf = true; end;
    res = WebHBSDivPublicMain("WWWPRESHOPBASK",langcode,-1,-1,false,false);
    WebOutString("<table border=""0"" width=""100%"" align=""left"">");
    ToolWebLineStart;
    if (proceedf==true) then begin
      WebOutString("<td>");
      ToolWebHBSDivItemHeader(true);
      rwcnt = MatRowCnt(ORr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        INr.Code = ORrw.ArtCode;
        if (ReadFirstMain(INr,1,true)==false) then begin
          INr.Unittext = "";
        end else begin
          // get attached items (as suggestions what more to buy)
          AddLinkedItemsToArr(INr,arrIN,arrINcnt); //wns
        end;
        linkargs = "company=" & WebGetArg("company") & "&langcode=" & langcode & "&itcode=" & WebGetArg("itcode") & "&itemcode=" & ORrw.ArtCode;
        ToolWebHBSDivDisplayItemLine(ORrw.ArtCode,linkargs,ORrw.Quant,GetUnitText(INr.Unittext,langcode),ORrw.Spec,ORrw.vRebate,ORrw.Price,ORr.CurncyCode,ORrw.Sum,true,rwt);//WNS
        rwt = rwt + 1;
        if (rwt>1) then begin rwt = 0; end;
      end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        RemoveItemFromArr(ORrw.ArtCode,arrIN,arrINcnt);
      end;
      ToolWebHBSDivListTableEnd;
      WebOutString("</td>");
      ToolWebLineEnd;
      ToolWebLineStart;
      WebOutString("<td>");
      ToolWebHBSDivListTable(3,0,"0");
      ToolWebLineStart;
      ToolWebHBSDivInfoCell(ToolWebReturnTheText(20104),"80%","right");
      ToolWebHBSDivInfoCell(ORr.Sum1,"20%","right");
      ToolWebLineEnd;
      ToolWebLineStart;
      ToolWebHBSDivInfoCell(ToolWebReturnTheText(20105),"80%","right");
      ToolWebHBSDivInfoCell(ORr.Sum3,"20%","right");
      ToolWebLineEnd;
      ToolWebLineStart;
      ToolWebHBSDivInfoCell(ToolWebReturnTheText(20106),"80%","right");
      ToolWebHBSDivInfoCell(ORr.Sum4,"20%","right");
      ToolWebLineEnd;
      if (nonblank(ORr.CurncyCode)) then begin
        ToolWebLineStart;
        ToolWebHBSDivInfoCell(ToolWebReturnTheText(20108),"80%","right");
        ToolWebHBSDivInfoCell(ORr.CurncyCode,"20%","right");
        ToolWebLineEnd;
      end;
      ToolWebHBSDivListTableEnd;
      WebOutString("</td>");
      ToolWebLineEnd;
      ToolWebLineStart;
      WebOutString("<td>");
  //    ToolWebHBSDivListTable(3,0,"0");
  //    WebOutString("<form name=""HansaForm"" method=""POST"" action=""");
  //    WebOutLink(ToolWebBuildLink("WebHBSDivShopBasketStep2.hal","&company=" & WebGetArg("company") & "&langcode=" & langcode & "&itemcode=" & WebGetArg("itemcode")));
  //    WebOutString(""">");
  //    ToolWebLineStart;
  //    WebOutString("<td align=""right"" bgcolor=""#FFFFFF"" valign=""top""><input type=""submit"" value=""" & ToolWebReturnTheText(20119) & """ name=""b1""></td>");
  //    ToolWebLineEnd;
  //    WebOutString("</form>");
  //    ToolWebHBSDivListTableEnd;
      WebOutString("</td>");
    end else begin
      ToolWebHBSDivInfoCell(ToolWebReturnTheText(20107),"100%","false");
    end;
    ToolWebLineEnd;
    
    if (proceedf==true) then begin
      ToolWebLineStart;
      WebOutString("<td>");
      res = WebHBSDivPublicMain("WWWAFTERSHOPBASK",langcode,-1,-1,false,false);
      WebOutString("</td>");
      ToolWebLineEnd;

      ToolWebLineStart;
      WebOutString("<td><br>");
      ToolWebHBSDivListSuggestedItems(arrIN,arrINcnt,langcode);
      WebOutString("</td>");
      ToolWebLineEnd;
    end;
    WebOutString("</table>");
  end;
  return;  
end;

function integer CountShoppingBasketItems(string CustCode, string langcode)
begin
  Boolean freightf;
  record ORVc ORr;
  record CUVc CUr;
  integer res;

  res = 0;
  CUr.Code = CustCode;
    if (ReadFirstMain(CUr,1,true)==false) then begin
      CUr.Name = "";
    end;
  if (BuildWebOrd(CustCode,-1,ORr,freightf,langcode)) then begin
    res = MatRowCnt(ORr);
  end;
  
  CountShoppingBasketItems = res;
  return;
end;

global
function string 5 FindBestCreditCardCurrency(string currency)
begin
  string 5 tmpcur;
  integer rating;
  record CCAccountIDVc CCAccr;
  string 5 res;

  rating = 99;
  tmpcur = "";
  res = currency;
  while (LoopMain(CCAccr,1,true)) begin
    if (CCAccr.Type==1) then begin
      if (CCAccr.CurncyCode==currency) then begin
        goto LFindBestCreditCardCurrency;
      end;
      switch (CCAccr.CurncyCode) begin
        case "EUR" : if (rating>10) then begin tmpcur = CCAccr.CurncyCode; rating = 10; end;
        case "USD" : if (rating>20) then begin tmpcur = CCAccr.CurncyCode; rating = 20; end;
        case "GBP" : if (rating>30) then begin tmpcur = CCAccr.CurncyCode; rating = 30; end;
        case "SEK" : if (rating>40) then begin tmpcur = CCAccr.CurncyCode; rating = 40; end;
      end;
    end;
  end;
  
  if (nonblank(tmpcur)) then begin
    res = tmpcur;
  end;
  
LFindBestCreditCardCurrency:;
  FindBestCreditCardCurrency = res;
  return;
end;

global
procedure GetCustDetails(string custcode,var string name,var string lastname,var string addr1,var string addr2,var string addr3,var string postcode,var string country)
begin
  record CUVc CUr;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    name = CUr.Person;
    lastname = "";
    addr1 = CUr.InvAddr0;
    addr2 = CUr.InvAddr1;
    addr3 = CUr.InvAddr2;
    postcode = CUr.InvAddr4;
    country = CUr.CountryCode;
  end;
  return;
end;

global
updating procedure WebHBSDivCheckout(string langcode)
begin
  boolean res;
  string 255 tstr;
  record WebControlBlock WCb;
  string 255 TXNumber,errmsg;
  val amount;
  string 3 curncy;
  LongInt err;
  record CUVc CUr;
  record ORVc ORr;
  Boolean freight;
  string 20 partner;
  string 60 merchantid;
  string 20 merchantcode;
  string 10 merchantaccref;
  string 255 merchantkey;
  string 10 merchantrefundpw;
  integer merchanttestaddr;
  string 60 merchantserialnr;
  integer merchantlivef;
  string 60 name;
  string 60 addr1;
  string 60 addr2;
  string 60 addr3;
  string 60 postcode;
  string 60 country;
  string 60 lastname;
  string 60 localcurrency;
  val localamount;
  string 255 frompayurl;
  
  if (LoggedInHBSDivTest) then begin
    if (CountShoppingBasketItems(CurrentCust,langcode)==0) then begin
      ToolWebHBSDivShopBasketNew(langcode);
      res = false;
    end else begin
      res = true;
    end;    
  end;
  if (res) then begin
    BlockLoad(WCb);
    WebOutString("<table border=""0"" cellspacing=""0"" cellpadding=""1"">");
    WebOutString("<tr><td>");
    res = WebHBSDivPublicMain("WWWPRECHECKOUT",langcode,-1,-1,false,false);
    WebOutString("</td></tr>");
    WebOutString("<tr><td>&nbsp;</td></tr>");
    WebOutString("<tr><td>");
    WebOutString("<table border=""0"" cellspacing=""0"" cellpadding=""1"" width=""100%"">");
    WebOutString("<tr><td align=""center"">");
    if (WCb.UsePaymentServer) then begin
      CreateFormToPaySite("WebHBSDivMainUpdate.hal","langcode=" & langcode & "&function=WebHBSDivPAYWithPayServer" & "&sessionid=" & WebGetArg("sessionid"));
      CUr.Code = CurrentCust;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        CUr.Name = "";
      end;
      res = BuildWebOrd2(CurrentCust,-1,ORr,freight,langcode);
      
      tstr = FindBestCreditCardCurrency(ORr.CurncyCode);
      if (tstr!=ORr.CurncyCode) then begin
        localcurrency = ORr.CurncyCode;
        localamount = ORr.Sum4;
        RecordNew(ORr);
        ORr.CurncyCode = tstr;
        res = BuildWebOrd2(CurrentCust,-1,ORr,freight,langcode);
      end;

      /* tstr = WCb.FromPaySSLURL;
      if (right(tstr,1)!="/") then begin
        tstr = tstr & "/";
      end;
       "WebHBSDivMainUpdate.hal?langcode=" & langcode & "&function=WebHBSDivPayServerSuccess" & "&sessionid=" & WebGetArg("sessionid"),
            "WebHBSDivMain.hal?langcode=" & langcode & "&function=WebHBSDivPayServerFail" & "&sessionid=" & WebGetArg("sessionid") 
      */
      txnumber = -1;
      frompayurl = "http://" & WebHost; //WCb.FromPaySSLURL; //so we dont limit ourselves to one return address
      if (GetCCPurchaseParameters(ORr.CurncyCode,"",1,
            partner,merchantid,merchantcode,merchantaccref,merchantkey,merchantrefundpw,
            merchanttestaddr,merchantserialnr,merchantlivef)==0) then begin
 
        GetCustDetails(CurrentCust,name,lastname,addr1,addr2,addr3,postcode,country);
        if (OpenCCPurchaseTransaction(ORr.Sum4,ORr.CurncyCode,frompayurl,WebGetArg("sessionid"),TXNumber,
                                      partner,merchantid,merchantcode,merchantaccref,merchantkey,merchantrefundpw,
                                      merchanttestaddr,merchantserialnr,merchantlivef,
                                      name,lastname,addr1,addr2,addr3,postcode,country,
                                      err,errmsg)) then begin
        end;
        
      end;
      ToolWebHiddenField("orderid",ORr.CustOrdNr);
      ToolWebHiddenField("currency",ORr.CurncyCode);
      ToolWebHiddenField("amount",ORr.Sum4);
      ToolWebHiddenField("l_amount",localamount);
      ToolWebHiddenField("l_curncy",localcurrency);
      ToolWebHiddenField("txnumber",txnumber);
      ToolWebHiddenField("frompayurl",frompayurl);
    end else begin
      CreateFormToPaySite("WebHBSDivMainUpdate.hal","langcode=" & langcode & "&company=" & WebGetArg("company") & "&function=WebHBSDivShopBasketStepPAY2" & "&sessionid=" & WebGetArg("sessionid"));
    end;
//    CreateFormToPaySite("WebHBSDivShopBasketStepPAY2.hal","langcode=" & langcode & "&sessionid=" & WebGetArg("sessionid"));
    WebOutString("<input type=""submit"" value=""" & ToolWebReturnTheText(20151) & """ name=""b1"">"); // credit card
    WebOutString("</form>");
    WebOutString("</td>");
/* Until PayPal actually does something useful...
    WebOutString("<td align=""center"">");
    WebOutString("<form name=""PayPalForm"" method=""POST"" action=""https://www.sandbox.paypal.com/ee/cgi-bin/webscr"">");
    BuildPayPalPostFields(langcode);
    WebOutString("<input type=""submit"" name=""b2"" value=""" & ToolWebReturnTheText(20152) & """>"); //paypal
    WebOutString("</form>");
    WebOutString("</td>");
*/
    WebOutString("<td align=""center"">");
    WebOutString("<form name=""InvoiceForm"" method=""POST"" action=""/");
    WebOutLink("WebHBSDivMain.hal?langcode=" & langcode & "&company=" & WebGetArg("company") & "&function=WebHBSDivPrepareOrder&sessionid=" & WebGetArg("sessionid"));
    WebOutString(""">");
    WebOutString("<input type=""submit"" name=""b2"" value=""" & ToolWebReturnTheText(20194) & """>");
    WebOutString("</form>");
    WebOutString("</td></tr>");
    WebOutString("</table>");
    WebOutString("</td></tr>");
    WebOutString("<tr><td>&nbsp;</td></tr>");
    WebOutString("<tr><td>");
    res = WebHBSDivPublicMain("WWWAFTERCHECKOUT",langcode,-1,-1,false,false);
    WebOutString("</td></tr>");
    WebOutString("</table>");
  end;
  return;
end;

global
procedure WebHBSDivPrepareOrder(string langcode)
begin
  boolean res;
  string 255 tstr;
  record WebControlBlock WCb;
  string 255 TXNumber,errmsg;
  val amount;
  string 3 curncy;
  integer err;
  record CUVc CUr;
  record ORVc ORr;
  Boolean freight;
  string 20 partner;
  string 60 merchantid;
  string 20 merchantcode;
  string 10 merchantaccref;
  string 255 merchantkey;
  string 10 merchantrefundpw;
  integer merchanttestaddr;
  string 60 merchantserialnr;
  integer merchantlivef;
  
  if (LoggedInHBSDivTest) then begin
    if (CountShoppingBasketItems(CurrentCust,langcode)==0) then begin
      ToolWebHBSDivShopBasketNew(langcode);
      res = false;
    end else begin
      res = true;
    end;    
  end;
  if (res) then begin
    BlockLoad(WCb);
    WebOutString("<table border=""0"" cellspacing=""0"" cellpadding=""1"">");
    WebOutString("<tr><td>");
    res = WebHBSDivPublicMain("WWWPREPREORDER",langcode,-1,-1,false,false);
    WebOutString("</td></tr>");
    WebOutString("<tr><td>&nbsp;</td></tr>");
    WebOutString("<tr><td>");
    WebOutString("<table border=""0"" cellspacing=""0"" cellpadding=""1"" width=""100%"">");
    WebOutString("<tr><td align=""center"">");
    WebOutString("</td></tr>");
    WebOutString("</td><td align=""center"">");
    WebOutString("<form name=""InvoiceForm"" method=""POST"" action=""");
    WebOutLink("WebHBSDivMainUpdate.hal?langcode=" & langcode & "&company=" & WebGetArg("company") & "&function=WebHBSDivCreateOrder&sessionid=" & WebGetArg("sessionid"));
    WebOutString(""">");
    WebOutString("<input type=""submit"" name=""b2"" value=""" & ToolWebReturnTheText(20119) & """>");
    WebOutString("</form>");
    WebOutString("</td></tr>");
    WebOutString("</table>");
    WebOutString("</td></tr>");
    WebOutString("<tr><td>&nbsp;</td></tr>");
    WebOutString("<tr><td>");
    res = WebHBSDivPublicMain("WWWAFTERPREORDER",langcode,-1,-1,false,false);
    WebOutString("</td></tr>");
    WebOutString("</table>");
  end;
  return;
end;

/*
function string 200 DoAscEnq(string t,var Integer pos)
begin
  Integer i,si;
  string 2 c;
  string 200 res;
  
  res = "";
  si = len(t);
  for (i=0;i<si;i=i+1) begin
    c = Chr(Asc("A") + StringToLongInt(Mid(t,i,1)));
    res = res & c;
  end;
  DoAscEnq = res;
  return;
end;
*/
/*
updating function Integer CreateMailFromActivation(record CUVc CUr,string activcode,var record MailVc Mailr)
begin
  Integer res;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;
  row IVVc IVrw;
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  record IVMailBlock IVMailr;
  
  res = 0;
  MArw.RowTyp = 1;
  MArw.AddrCode = "noreply@shop.hansaworld.com";
  MatRowPut(Mailr,0,MArw);
  MArw.RowTyp = 0;
  MArw.AddrCode = CUr.eMail;
  if (blank(MArw.AddrCode)) then begin
    goto LCreateMailFromIVD;
  end;
  MatRowPut(Mailr,1,MArw);
  if (nonblank(IVMailr.Header)) then begin
    Mailr.Header = IVMailr.Header & " ";
  end;
  Mailr.Header = Mailr.Header & USetStr(1803) & " ";
  Mailr.Header = Mailr.Header & IVr.SerNr;
  LTxtr.Code = IVMailr.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end;    
    AddCRToText(Mailr);
  end;
  if (additemstobodyf) then begin
	  rwcnt = MatRowCnt(IVr);
	  for (i=0;i<rwcnt;i=i+1) begin
	    MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==10) then begin 
        goto LIVHIDDENLine;
      end;
	    tstr = IVrw.ArtCode & TAB;
	    tstr = tstr & ValToString(IVrw.Quant,M4UVal,"",".",0) & TAB;
	    tstr = tstr & Left(IVrw.Spec,60) & TAB;
	    tstr = tstr & IVrw.Price & TAB;
	    if (IVrw.vRebate!=0) then begin
	      tstr = tstr & "-" & ValToString(IVrw.vRebate,M4UVal,"",".",0) & "%" &  TAB;
	    end;
	    tstr = tstr & IVrw.Sum & TAB;
	    LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
	  end;
	end;
LIVHIDDENLine:;	
  tstr = TAB & TAB & TAB & "=====";
  LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  tstr = TAB & TAB & TAB & USetStr(2685) & TAB & IVr.Sum1;
  LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  tstr = TAB & TAB & TAB & USetStr(2686) & TAB & IVr.Sum3;
  LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  tstr = TAB & TAB & TAB & USetStr(2687) & TAB & IVr.Sum4;
  LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  GetPayDealText(IVr.PayDeal,IVr.LangCode,tstr);
  tstr = USetStr(3060) & " " & tstr;
  LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  LTxtr.Code = IVMailr.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end;    
    AddCRToText(Mailr);
  end;
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin end;
LCreateMailFromIVD:;  
  CreateMailFromIVD = res;
  return;
end;
*/

global
updating function Boolean CreateContractFromOrder(record CUVc CUr,LongInt orderno,var string activcode,string langcode)
begin
  record ProdPack2Vc PPr;
  record BPProdPackBlock BPPPb;
  record FOSmallProdPackBlock FOSmallPPb;
  record FOStartProdPackBlock FOStartPPb;
  record FOProProdPackBlock FOProPPb;
  record COCUServiceVc COCUServicer;
  record ORVc ORr;
  record MailVc Mailr;
  row ORVc ORrw;
  Integer i,rwcnt;
  Boolean res;
  Integer progtyp;
  LongInt NumberOfUsers;
  string 200 t1,t2,t3;
  
  res = false;
  progtyp = -1;
  NumberOfUsers = 1;
  activcode = "";
  BlockLoad(BPPPb);
  BlockLoad(FOStartPPb);
  ORr.SerNr = orderno;
  if (ReadFirstMain(ORr,1,true)) then begin
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ORrw.CUServiceHistNr>0) then begin
        progtyp = -1;
        i = rwcnt;
      end else begin
        PPr.ProgramInit = ORrw.ArtCode;
        if (ReadFirstKey("ProgramInit",PPr,1,true)) then begin
          progtyp = PPr.ProgType;
        end else begin
          PPr.Users = ORrw.ArtCode;
          if (ReadFirstKey("Users",PPr,1,true)) then begin
            NumberOfUsers = NumberOfUsers + 1;
          end else begin
            if (ORrw.ArtCode==BPPPb.ProgramInit) then begin progtyp = typBusinessPhone; end;
            if (ORrw.ArtCode==FOStartPPb.ProgramInit) then begin progtyp = typFirstOffice; end;
            if (ORrw.ArtCode==FOProPPb.ProgramInit) then begin progtyp = typFirstOfficePro; end;
            if (ORrw.ArtCode==FOSmallPPb.ProgramInit) then begin progtyp = typFirstOfficeSmall; end;

            if (ORrw.ArtCode==BPPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
            if (ORrw.ArtCode==FOStartPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
            if (ORrw.ArtCode==FOProPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
            if (ORrw.ArtCode==FOSmallPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
          end;
        end;
      end;
    end;
    if (progtyp>0) then begin
      CreateNewContract(CUr,COCUServicer,NumberOfUsers,0,0,progtyp,0);
/*
      i = 0;
      t1 = CurrentCompany;
      activcode = DoAscEnq(t1,i);
      t1 = COCUServicer.SerNr;
      activcode = activcode & "-" & DoAscEnq(t1,i);
      activcode = activcode & "-" & DoAscEnq(COCUServicer.CustCode,i);
      CreateMailFromActivation(CUr,activcode,Mailr);
      CreateRecordLink(CUr,curcomp,Mailr,curcomp);  
      CreateRecordLink(Mailr,curcomp,CUr,curcomp);  
*/
      res = true;
    end;
  end;
  CreateContractFromOrder = res;
  return;
end;

global
updating function Boolean CreateContractFromInvoice(record CUVc CUr,LongInt invno,var string activcode,string langcode) //copy of CreateContractFromOrder but for invoice
begin
  record BPProdPackBlock BPPPb;
  record FOSmallProdPackBlock FOSmallPPb;
  record FOStartProdPackBlock FOStartPPb;
  record FOProProdPackBlock FOProPPb;
  record COCUServiceVc COCUServicer;
  record IVVc IVr;
  record MailVc Mailr;
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean res;
  Integer progtyp;
  LongInt NumberOfUsers;
  string 200 t1,t2,t3;
  
  res = false;
  progtyp = -1;
  NumberOfUsers = 1;
  activcode = "";
  BlockLoad(BPPPb);
  BlockLoad(FOStartPPb);
  IVr.SerNr = invno;
  if (ReadFirstMain(IVr,1,true)) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.CUServiceHistNr>0) then begin
        progtyp = -1;
        i = rwcnt;
      end else begin
        if (IVrw.ArtCode==BPPPb.ProgramInit) then begin progtyp = typBusinessPhone; end;
        if (IVrw.ArtCode==FOStartPPb.ProgramInit) then begin progtyp = typFirstOffice; end;
        if (IVrw.ArtCode==FOProPPb.ProgramInit) then begin progtyp = typFirstOfficePro; end;
        if (IVrw.ArtCode==FOSmallPPb.ProgramInit) then begin progtyp = typFirstOfficeSmall; end;

        if (IVrw.ArtCode==BPPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
        if (IVrw.ArtCode==FOStartPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
        if (IVrw.ArtCode==FOProPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
        if (IVrw.ArtCode==FOSmallPPb.Users) then begin NumberOfUsers = NumberOfUsers + 1; end;
      end;
    end;
    if (progtyp>0) then begin
      CreateNewContract(CUr,COCUServicer,NumberOfUsers,0,0,progtyp,0);
/*
      i = 0;
      t1 = CurrentCompany;
      activcode = DoAscEnq(t1,i);
      t1 = COCUServicer.SerNr;
      activcode = activcode & "-" & DoAscEnq(t1,i);
      activcode = activcode & "-" & DoAscEnq(COCUServicer.CustCode,i);
      CreateMailFromActivation(CUr,activcode,Mailr);
      CreateRecordLink(CUr,curcomp,Mailr,curcomp);  
      CreateRecordLink(Mailr,curcomp,CUr,curcomp);  
*/
      res = true;
    end;
  end;
  CreateContractFromInvoice = res;
  return;
end;

updating procedure ToolWebHBSDivORStore2(string langcode,Boolean salesord)
begin
  record CUVc CUr;
  Boolean res,freight;
  LongInt orderno,invno;
  string 200 activcode;

  if (LoggedInHBSDivTest()) then begin
    if (salesord) then begin
      CUr.Code = CurrentCust;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        CUr.Name = "";
      end;
      orderno = ToolWebStoreTheOrder2(invno,"",false);
      if (orderno<=0) then begin
      end else begin
        res = WebHBSDivPublicMain("WWWPREDONEORDER",langcode,-1,-1,false,false);
        WebOutString("<p><a href=""Javascript:void(0)"" onClick=""jsOpenReadMore('./WebStandardOrder.hal?ordno=" & orderno & "&ccnumber=" & right(WebGetArg("ccnumber"),4) & "&company=" & CurrentCompany & "','Item view','scrollbars=yes ,rezisable=yes,width=780,height=790')"">" & ToolWebReturnTheText(20196) & "</a></p>");
        res = WebHBSDivPublicMain("WWWAFTERDONEORDER",langcode,-1,-1,false,false);
        if (CreateContractFromOrder(CUr,orderno,activcode,langcode)) then begin
//          res = WebHBSDivPublicMain("WWWACTIVATIONCODE",langcode,-1,-1,false,false);
//          WebOutString("<p class=""bluefont"">" & activcode & "</p>");
        end;
      end;
    end else begin
/*
      WebOutString("<table width=""100%"" cellpadding=""17"">");
      ToolWebLineStart;
      if (ToolWebStoreThePurOrder2) then begin
        WebOutString("<td><b>The purchase orders were stored. Please see details in the Purchase Order Journal</b></td>");
      end else begin
        WebOutString("<td><b>Something prevented the purchase orders from beeing created.</b></td>");
      end;
      ToolWebLineEnd;
      WebOutString("</table>");
*/
    end;
  end;
  return;
end;

global
updating procedure ToolWebHBSDivORStore(string langcode)
begin
  ToolWebHBSDivORStore2(langcode,true);
  return;
end;

global
updating procedure WebHBSDivPOStore(string langcode)
begin
  ToolWebHBSDivORStore2(langcode,false);
  return;
end;

global
updating procedure WebHBSDivCreateOrder(string langcode)
begin
  boolean res;

  if (LoggedInHBSDivTest) then begin
    if (CountShoppingBasketItems(CurrentCust,langcode)==0) then begin
      ToolWebHBSDivShopBasketNew(langcode);
      res = false;
    end else begin
      res = true;
    end;    
  end;
  if (res) then begin
    ToolWebHBSDivORStore(langcode);
  end;
  return;
end;

global
procedure CreateLinkBackToCallingSite(string backurl,string sessionid,string thetext)
begin
  record WebControlBlock WCr;
  string 200 nexturl;
  
  WebOutString("<a href=""" & backurl);
  if (right(backurl,1)!="/") then begin
    WebOutString("/");
  end;
  WebOutLink("?sessionid=" & sessionid);
  WebOutString(""" target=""_parent""><b>" & thetext & "</b></a>");

  //Somehow output a link to the webshop (this will be called while on the payment server, so we have to pass/fetch URL somehow)
  
  return;
end;

procedure ToolWebOption(string value,string comment,string selectedval)
begin
  WebOutString("<OPTION ");
  if (value==selectedval) then begin
    WebOutString("selected ");
  end;
  WebOutString("value=""" & value & """>");
  WebOutString(comment);
  WebOutString("</OPTION>");
  return;
end;

function string 255 FixVal(string instr)
begin
  string 255 res;
  string 1 ch;
  Integer i;
  boolean commaf;
  
  for (i=0;i<len(instr);i=i+1) begin
    ch = Mid(instr,i,1);
    if (ch==",") then begin
      commaf = true;
      res = res & ".";;
    end else begin
      if (ch==".") then begin
        if (commaf) then begin
          res = instr;
          goto LFixVal;
        end else begin
          res = res & ch;
        end;
      end else begin
        res = res & ch;
      end;
    end;
  end;
LFixVal:;
  FixVal = res;
  return;
end;

global
updating procedure ToolWebHBSDivPAYWithPayServer2(Integer error,string errstr,string errorcode,string langcode,string backurl,string sessionid)
begin
  record CredCardTypeVc CCTr;
  string 10 defdelmodcode;
  string 60 defdelmod;
  Boolean foundf,testf;
  Boolean res,proceedf,freight;
  LongInt rwcnt;
  integer i,rwt;
  string 60 tstr;
  record CCAccountIDVc CCAccountIDr;  
  Longint custordnr;
  string 3 curncycode;
  string 255 amount;
  string 32 txnumber;
  string 60 name;
  string 60 lastname;
  string 60 addr1;
  string 60 addr2;
  string 60 addr3;
  string 60 postcode;
  string 60 country;
  string 60 localamount;
  string 60 localcurrency;
  string 255 link;
    
  // get details
  custordnr = WebGetArg("orderid");
  curncycode = WebGetArg("currency");
  amount = FixVal(WebGetArg("amount"));
  txnumber = WebGetArg("txnumber");
  localamount = FixVal(WebGetArg("l_amount"));
  localcurrency = WebGetArg("l_curncy");

  //only validate txnumber present
  if (nonblank(txnumber)) then begin
    
    GetCustDetailsForTX(txnumber,name,lastname,addr1,addr2,addr3,postcode,country);

    WebOutString("<script language=""JavaScript"">");
    WebOutNL;
    WebOutString("<!--");
    WebOutNL;
    WebOutString("function MM_openBrWindow(theURL,winName,features) { //v2.0");
    WebOutNL;
    WebOutString("  window.open(theURL,'',features);");
    WebOutNL;
    WebOutString("}");
    WebOutNL;
    WebOutString("//-->");
    WebOutNL;
    WebOutString("</script>");
    WebOutNL;
    WebOutString("<table width=""503"" border=""0"" align=""center"" cellpadding=""0"" cellspacing=""0"">");
    WebOutString("<tr> ");
    WebOutString("<td>");
    WebOutString("<TABLE border=""0"" class=""paybkground"" align=""center"" cellPadding=""2"" cellSpacing=""4"" width=""465"">");

    WebOutString("<form name=""HansaForm"" method=""POST"" action=""/");
    WebOutLink("WebHBSDivMainUpdate.hal?langcode=" & langcode & "&function=WebHBSDivSendPayServerPayment&shoptype=" & WebGetArg("shoptype") & "&sessionid=" & WebGetArg("sessionid"));
    WebOutString(""">");

    WebOutString("<tr><td colspan=""3"" align=""center""><h1>" & ToolWebReturnTheText(20171) & "</h1></td></tr>");
    if ((error>0) or (nonblank(errorcode)) or (nonblank(errstr))) then begin
      ToolWebHWDisplayErrorLine(error,errstr,errorcode);
    end;
    if (custordnr>0) then begin
      ToolWebHWSpecialDisplayLine(ToolWebReturnTheText(20155) & ":","orderid",custordnr,"",30,0,true);
    end else begin
      ToolWebHiddenField("orderid","1");
    end;
    if (nonblank(localcurrency)) then begin
      tstr = localcurrency & " ";
      tstr = tstr & localamount;
      ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20407) & ":","localval",tstr,"",30,0,true);
    end;
    tstr = curncycode & " ";
    tstr = tstr & amount;
    ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20156) & ":","payval",tstr,"",30,0,true);
    if (nonblank(localcurrency)) then begin
      WebOutString("<TR bgcolor=""#EEEEEE"">");
      WebOutString("<TD align=""center"" colspan=""3"" class=""Normal""><span style=""color: #ff0000"">" & ToolWebReturnTheText(20408) & " " & curncycode & ".</span></TD>");
      WebOutString("</TR>");
    end;
    ToolWebHiddenField("currency",curncycode);
    ToolWebHiddenField("amount",amount); 
    ToolWebHiddenField("txnumber",txnumber); 
  //    ToolWebHiddenField("deladdr",WebGetArg("deladdr"));//causes problems on Credit card payment page. What problems?
    ToolWebHiddenField("delmode",WebGetArg("delmode"));
    ToolWebHiddenField("custref",WebGetArg("custref"));
    ToolWebHiddenField("frompayurl",WebGetArg("frompayurl"));
    ToolWebHiddenField("l_amount",WebGetArg("l_amount"));
    ToolWebHiddenField("l_curncy",WebGetArg("l_curncy"));
    WebOutString("<TR><TD colspan=""3""><hr></TD></TR>");
    
  //    WebOutString("<TR>");
    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("<TD class=""EditFieldHeader"" width=""160"">&nbsp;" & ToolWebReturnTheText(20157) & ":</TD>");
    WebOutString("<TD class=""EditFieldHeader"" width=""10"">M</TD>");
    WebOutString("<TD>");

    WebOutString("<SELECT NAME=""CreditCardType"" TABINDEX=-1"">");
    CCTr.Code = "";
    foundf = true;
    while (LoopMain(CCTr,1,foundf)) begin
      testf = foundf;
      if (blank(CCTr.Code)) then begin testf = false; end;
      if (blank(CCTr.Comment)) then begin testf = false; end;
      if (CCTr.UseOnWeb==0) then begin testf = false; end;
      if (testf) then begin
        WebOutString("<OPTION VALUE=""" & CCTr.Code & """>" & CCTr.Comment & "</OPTION>");
      end;
    end;
    WebOutString("</SELECT>");
    WebOutString("</TD>");
    WebOutString("</TR>");

    ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20158) & ":","ccnumber","","M",22,19,false);

    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("<TD class=""EditFieldHeader"">&nbsp;" & ToolWebReturnTheText(20159) & "</TD>");
    WebOutString("<TD class=""EditFieldHeader"">M</TD>");
    WebOutString("<TD class=""TableData"">");
    WebOutString("  <SELECT name=""ExpirationMonth"">");
    WebOutString("    <OPTION VALUE=""01"">01</OPTION>");
    WebOutString("    <OPTION VALUE=""02"">02</OPTION>");
    WebOutString("    <OPTION VALUE=""03"">03</OPTION>");
    WebOutString("    <OPTION VALUE=""04"">04</OPTION>");
    WebOutString("    <OPTION VALUE=""05"">05</OPTION>");
    WebOutString("    <OPTION VALUE=""06"">06</OPTION>");
    WebOutString("    <OPTION VALUE=""07"">07</OPTION>");
    WebOutString("    <OPTION VALUE=""08"">08</OPTION>");
    WebOutString("    <OPTION VALUE=""09"">09</OPTION>");
    WebOutString("    <OPTION VALUE=""10"">10</OPTION>");
    WebOutString("    <OPTION VALUE=""11"">11</OPTION>");
    WebOutString("    <OPTION VALUE=""12"">12</OPTION>");
    WebOutString("  </SELECT>");
    WebOutString("<SELECT name=""ExpirationYear"">");
    WebOutString("    <OPTION VALUE=""2007"">2007</OPTION>");
    WebOutString("    <OPTION VALUE=""2008"">2008</OPTION>");
    WebOutString("    <OPTION VALUE=""2009"">2009</OPTION>");
    WebOutString("    <OPTION VALUE=""2010"">2010</OPTION>");
    WebOutString("    <OPTION VALUE=""2011"">2011</OPTION>");
    WebOutString("    <OPTION VALUE=""2012"">2012</OPTION>");
    WebOutString("    <OPTION VALUE=""2013"">2013</OPTION>");
    WebOutString("    <OPTION VALUE=""2014"">2014</OPTION>");
    WebOutString("    <OPTION VALUE=""2015"">2015</OPTION>");
    WebOutString("    <OPTION VALUE=""2016"">2016</OPTION>");
    WebOutString("    <OPTION VALUE=""2017"">2017</OPTION>");
    WebOutString("    <OPTION VALUE=""2018"">2018</OPTION>");
    WebOutString("    <OPTION VALUE=""2019"">2019</OPTION>");
    WebOutString("    <OPTION VALUE=""2020"">2020</OPTION>");
    WebOutString("    <OPTION VALUE=""2021"">2021</OPTION>");
    WebOutString("    <OPTION VALUE=""2022"">2022</OPTION>");
    WebOutString("    <OPTION VALUE=""2023"">2023</OPTION>");
    WebOutString("    <OPTION VALUE=""2024"">2024</OPTION>");
    WebOutString("    <OPTION VALUE=""2025"">2025</OPTION>");
    WebOutString("    <OPTION VALUE=""2026"">2026</OPTION>");
    WebOutString("    <OPTION VALUE=""2027"">2027</OPTION>");
    WebOutString("    <OPTION VALUE=""2028"">2028</OPTION>");
    WebOutString("    <OPTION VALUE=""2029"">2029</OPTION>");
    WebOutString("</SELECT>");
    WebOutString("</TD>");
    WebOutString("</TR>");
    ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20160),"cvcsecurity","","M",6,4,false);
    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("<TD colspan=""3"" class=""Normal""><a href=""Javascript:void(0)"" onClick=""MM_openBrWindow('/CreditCardPayment.html','Item view','scrollbars=no,rezisable=yes,width=550,height=610')"">" & ToolWebReturnTheText(20165) & "</a></TD>");
    WebOutString("</TR>");

    CCTr.Code = WebGetArg("CreditCardType");
    ReadFirstMain(CCTr,1,true);
    if (CCTr.CardType==3) then begin

    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("  <TD class=""EditFieldHeader"">&nbsp;" & ToolWebReturnTheText(20161) & "</TD>");
    WebOutString("  <TD class=""EditFieldHeader"">S</TD>");
    WebOutString("  <TD class=""TableData""><INPUT autocomplete=""off"" name=""amexstartmonth"" size=""4"" maxlength=""2"""">");
    WebOutString("  <INPUT autocomplete=""off"" name=""amexstartyear"" size=""6"" maxlength=""4""""></TD>");
    WebOutString("</TR>");
    ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20162),"issuenumber","","I",6,2,false);
    end;
    FindCCAccountID(curncycode,"",1,CCAccountIDr,kCardHolderNotPresent);
    if (CCAccountIDr.TestAddress!=0) then begin
      ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20200) & "","ccaddr1",name,"M",50,50,false);
      ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20163) & " 1","ccaddr2",addr1,"M",50,50,false);
      ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20163) & " 2","ccaddr3",addr2,"M",50,50,false);
      ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20163) & " 3","ccaddr4",addr3,"O",50,50,false);
      ToolWebHWSpecialDisplayLine("&nbsp;" & ToolWebReturnTheText(20164),"ccaddr6",postcode,"M",10,10,false);
  //      ToolWebHWSpecialDisplayLine("&nbsp;Country","cccountry","","M",10,10,false);
      

      WebOutString("<TR bgcolor=""#EEEEEE"">");
      WebOutString("<TD class=""EditFieldHeader"">&nbsp;" & ToolWebReturnTheText(20065) & "</TD>");
      WebOutString("<TD class=""EditFieldHeader"">M</TD>");
      WebOutString("<TD class=""TableData"">");
      WebOutString("<SELECT name=""cccountry"">");
      ToolWebOption("","-- " & ToolWebReturnTheText(20065) & " --",country);      
      ToolWebOption("AF","Afghanistan",country);
      ToolWebOption("AL","Albania",country);
      ToolWebOption("DZ","Algeria",country);
      ToolWebOption("AS","American Samoa (US)",country);
      ToolWebOption("AD","Andorra",country);
      ToolWebOption("AO","Angola",country);
      ToolWebOption("AI","Anguilla (UK)",country);
      ToolWebOption("AG","Antigua and Barbuda",country);
      ToolWebOption("AR","Argentina",country);
      ToolWebOption("AM","Armenia",country);
      ToolWebOption("AW","Aruba",country);
      ToolWebOption("AU","Australia",country);
      ToolWebOption("AT","Austria",country);
      ToolWebOption("AZ","Azerbaijan",country);
      ToolWebOption("BS","Bahamas",country);
      ToolWebOption("BH","Bahrain",country);
      ToolWebOption("BD","Bangladesh",country);
      ToolWebOption("BB","Barbados",country);
      ToolWebOption("BY","Belarus",country);
      ToolWebOption("BE","Belgium",country);
      ToolWebOption("BZ","Belize",country);
      ToolWebOption("BJ","Benin",country);
      ToolWebOption("BM","Bermuda (UK)",country);
      ToolWebOption("BT","Bhutan",country);
      ToolWebOption("BO","Bolivia",country);
      ToolWebOption("BA","Bosnia and Herzegovina",country);
      ToolWebOption("BW","Botswana",country);
      ToolWebOption("BR","Brazil",country);
      ToolWebOption("VG","British Virgin Islands (UK)",country);
      ToolWebOption("BN","Brunei Darussalam",country);
      ToolWebOption("BG","Bulgaria",country);
      ToolWebOption("BF","Burkina Faso",country);
      ToolWebOption("BI","Burundi",country);
      ToolWebOption("KH","Cambodia",country);
      ToolWebOption("CM","Cameroon",country);
      ToolWebOption("CA","Canada",country);
      ToolWebOption("CV","Cape Verde",country);
      ToolWebOption("KY","Cayman Islands (UK)",country);
      ToolWebOption("CF","Central African Republic",country);
      ToolWebOption("TD","Chad",country);
      ToolWebOption("CL","Chile",country);
      ToolWebOption("CN","China",country);
      ToolWebOption("CX","Christmas Island (AU)",country);
      ToolWebOption("CC","Cocos (Keeling) Islands (AU)",country);
      ToolWebOption("CO","Colombia",country);
      ToolWebOption("KM","Comoros",country);
      ToolWebOption("CD","Congo, Democratic Republic of the",country);
      ToolWebOption("CG","Congo, Republic of the",country);
      ToolWebOption("CK","Cook Islands (NZ)",country);
      ToolWebOption("CR","Costa Rica",country);
      ToolWebOption("CI","Cote D'Ivoire",country);
      ToolWebOption("HR","Croatia",country);
      ToolWebOption("CU","Cuba",country);
      ToolWebOption("CY","Cyprus",country);
      ToolWebOption("CZ","Czech Republic",country);
      ToolWebOption("DK","Denmark",country);
      ToolWebOption("DJ","Djibouti",country);
      ToolWebOption("DM","Dominica",country);
      ToolWebOption("DO","Dominican Republic",country);
      ToolWebOption("EC","Ecuador",country);
      ToolWebOption("EG","Egypt",country);
      ToolWebOption("SV","El Salvador",country);
      ToolWebOption("GQ","Equatorial Guinea",country);
      ToolWebOption("ER","Eritrea",country);
      ToolWebOption("EE","Estonia",country);
      ToolWebOption("ET","Ethiopia",country);
      ToolWebOption("FK","Falkland Islands (UK)",country);
      ToolWebOption("FO","Faroe Islands (DK)",country);
      ToolWebOption("FJ","Fiji",country);
      ToolWebOption("FI","Finland",country);
      ToolWebOption("FR","France",country);
      ToolWebOption("GF","French Guiana (FR)",country);
      ToolWebOption("PF","French Polynesia (FR)",country);
      ToolWebOption("GA","Gabon",country);
      ToolWebOption("GM","Gambia",country);
      ToolWebOption("GE","Georgia",country);
      ToolWebOption("DE","Germany",country);
      ToolWebOption("GH","Ghana",country);
      ToolWebOption("GI","Gibraltar (UK)",country);
      ToolWebOption("GR","Greece",country);
      ToolWebOption("GL","Greenland (DK)",country);
      ToolWebOption("GD","Grenada",country);
      ToolWebOption("GP","Guadeloupe (FR)",country);
      ToolWebOption("GU","Guam (US)",country);
      ToolWebOption("GT","Guatemala",country);
      ToolWebOption("GN","Guinea",country);
      ToolWebOption("GW","Guinea-Bissau",country);
      ToolWebOption("GY","Guyana",country);
      ToolWebOption("HT","Haiti",country);
      ToolWebOption("VA","Holy See (Vatican City)",country);
      ToolWebOption("HN","Honduras",country);
      ToolWebOption("HK","Hong Kong (CN)",country);
      ToolWebOption("HU","Hungary",country);
      ToolWebOption("IS","Iceland",country);
      ToolWebOption("IN","India",country);
      ToolWebOption("ID","Indonesia",country);
      ToolWebOption("IR","Iran",country);
      ToolWebOption("IQ","Iraq",country);
      ToolWebOption("IE","Ireland",country);
      ToolWebOption("IL","Israel",country);
      ToolWebOption("IT","Italy",country);
      ToolWebOption("JM","Jamaica",country);
      ToolWebOption("JP","Japan",country);
      ToolWebOption("JO","Jordan",country);
      ToolWebOption("KZ","Kazakhstan",country);
      ToolWebOption("KE","Kenya",country);
      ToolWebOption("KI","Kiribati",country);
      ToolWebOption("KP","Korea, Democratic People's Republic (North)",country);
      ToolWebOption("KR","Korea, Republic of (South)",country);
      ToolWebOption("KW","Kuwait",country);
      ToolWebOption("KG","Kyrgyzstan",country);
      ToolWebOption("LA","Laos",country);
      ToolWebOption("LV","Latvia",country);
      ToolWebOption("LB","Lebanon",country);
      ToolWebOption("LS","Lesotho",country);
      ToolWebOption("LR","Liberia",country);
      ToolWebOption("LY","Libya",country);
      ToolWebOption("LI","Liechtenstein",country);
      ToolWebOption("LT","Lithuania",country);
      ToolWebOption("LU","Luxembourg",country);
      ToolWebOption("MO","Macau (CN)",country);
      ToolWebOption("MK","Macedonia",country);
      ToolWebOption("MG","Madagascar",country);
      ToolWebOption("MW","Malawi",country);
      ToolWebOption("MY","Malaysia",country);
      ToolWebOption("MV","Maldives",country);
      ToolWebOption("ML","Mali",country);
      ToolWebOption("MT","Malta",country);
      ToolWebOption("MH","Marshall Islands",country);
      ToolWebOption("MQ","Martinique (FR)",country);
      ToolWebOption("MR","Mauritania",country);
      ToolWebOption("MU","Mauritius",country);
      ToolWebOption("YT","Mayotte (FR)",country);
      ToolWebOption("MX","Mexico",country);
      ToolWebOption("FM","Micronesia, Federated States of",country);
      ToolWebOption("MD","Moldova Republic of",country);
      ToolWebOption("MC","Monaco",country);
      ToolWebOption("MN","Mongolia",country);
      ToolWebOption("MS","Montserrat (UK)",country);
      ToolWebOption("MA","Morocco",country);
      ToolWebOption("MZ","Mozambique",country);
      ToolWebOption("MM","Myanmar",country);
      ToolWebOption("NA","Namibia",country);
      ToolWebOption("NR","Nauru",country);
      ToolWebOption("NP","Nepal",country);
      ToolWebOption("AN","Netherlands Antilles (NL)",country);
      ToolWebOption("NL","Netherlands",country);
      ToolWebOption("NC","New Caledonia (FR)",country);
      ToolWebOption("NZ","New Zealand",country);
      ToolWebOption("NI","Nicaragua",country);
      ToolWebOption("NE","Niger",country);
      ToolWebOption("NG","Nigeria",country);
      ToolWebOption("NU","Niue",country);
      ToolWebOption("NF","Norfolk Island (AU)",country);
      ToolWebOption("MP","Northern Mariana Islands (US)",country);
      ToolWebOption("NO","Norway",country);
      ToolWebOption("OM","Oman",country);
      ToolWebOption("PK","Pakistan",country);
      ToolWebOption("PW","Palau",country);
      ToolWebOption("PA","Panama",country);
      ToolWebOption("PG","Papua New Guinea",country);
      ToolWebOption("PY","Paraguay",country);
      ToolWebOption("PE","Peru",country);
      ToolWebOption("PH","Philippines",country);
      ToolWebOption("PN","Pitcairn Islands (UK)",country);
      ToolWebOption("PL","Poland",country);
      ToolWebOption("PT","Portugal",country);
      ToolWebOption("PR","Puerto Rico (US)",country);
      ToolWebOption("QA","Qatar",country);
      ToolWebOption("RE","Reunion (FR)",country);
      ToolWebOption("RO","Romania",country);
      ToolWebOption("RU","Russia",country);
      ToolWebOption("RW","Rwanda",country);
      ToolWebOption("SH","Saint Helena (UK)",country);
      ToolWebOption("KN","Saint Kitts and Nevis",country);
      ToolWebOption("LC","Saint Lucia",country);
      ToolWebOption("PM","Saint Pierre & Miquelon (FR)",country);
      ToolWebOption("VC","Saint Vincent and the Grenadines",country);
      ToolWebOption("WS","Samoa",country);
      ToolWebOption("SM","San Marino",country);
      ToolWebOption("ST","Sao Tome and Principe",country);
      ToolWebOption("SA","Saudi Arabia",country);
      ToolWebOption("SN","Senegal",country);
      ToolWebOption("CS","Serbia and Montenegro",country);
      ToolWebOption("SC","Seychelles",country);
      ToolWebOption("SL","Sierra Leone",country);
      ToolWebOption("SG","Singapore",country);
      ToolWebOption("SK","Slovakia",country);
      ToolWebOption("SI","Slovenia",country);
      ToolWebOption("SB","Solomon Islands",country);
      ToolWebOption("SO","Somalia",country);
      ToolWebOption("ZA","South Africa",country);
      ToolWebOption("GS","South Georgia & South Sandwich Islands (UK)",country);
      ToolWebOption("ES","Spain",country);
      ToolWebOption("LK","Sri Lanka",country);
      ToolWebOption("SD","Sudan",country);
      ToolWebOption("SR","Suriname",country);
      ToolWebOption("SZ","Swaziland",country);
      ToolWebOption("SE","Sweden",country);
      ToolWebOption("CH","Switzerland",country);
      ToolWebOption("SY","Syria",country);
      ToolWebOption("TW","Taiwan",country);
      ToolWebOption("TJ","Tajikistan",country);
      ToolWebOption("TZ","Tanzania",country);
      ToolWebOption("TH","Thailand",country);
      ToolWebOption("TL","Timor-Leste",country);
      ToolWebOption("TG","Togo",country);
      ToolWebOption("TK","Tokelau",country);
      ToolWebOption("TO","Tonga",country);
      ToolWebOption("TT","Trinidad and Tobago",country);
      ToolWebOption("TN","Tunisia",country);
      ToolWebOption("TR","Turkey",country);
      ToolWebOption("TM","Turkmenistan",country);
      ToolWebOption("TC","Turks and Caicos Islands (UK)",country);
      ToolWebOption("TV","Tuvalu",country);
      ToolWebOption("UG","Uganda",country);
      ToolWebOption("UA","Ukraine",country);
      ToolWebOption("AE","United Arab Emirates",country);
      ToolWebOption("GB","United Kingdom",country);
      ToolWebOption("US","United States",country);
      ToolWebOption("UY","Uruguay",country);
      ToolWebOption("UZ","Uzbekistan",country);
      ToolWebOption("VU","Vanuatu",country);
      ToolWebOption("VE","Venezuela",country);
      ToolWebOption("VN","Vietnam",country);
      ToolWebOption("VI","Virgin Islands (US)",country);
      ToolWebOption("WF","Wallis and Futuna (FR)",country);
      ToolWebOption("EH","Western Sahara",country);
      ToolWebOption("YE","Yemen",country);
      ToolWebOption("ZM","Zambia",country);
      ToolWebOption("ZW","Zimbabwe",country);
      WebOutString("</SELECT>");
      WebOutString("</TD>");
      WebOutString("</TR>");
    end;

    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("<TD colspan=""3"" class=""Normal"">M = " & ToolWebReturnTheText(20166) & "</TD>");
    WebOutString("</TR>");
    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("<TD colspan=""3"" class=""Normal"">O = " & ToolWebReturnTheText(20185) & "</TD>");
    WebOutString("</TR>");
    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("<TD colspan=""3"" class=""Normal"">S = " & ToolWebReturnTheText(20167) & "</TD>");
    WebOutString("</TR>");
    WebOutString("<TR bgcolor=""#EEEEEE"">");
    WebOutString("<TD colspan=""3"" class=""Normal"">I = " & ToolWebReturnTheText(20168) & "</TD>");
    WebOutString("</TR>");
    WebOutString("<TR>");
    WebOutString("<TD align=""center"" colSpan=""3""><br><b>" & ToolWebReturnTheText(20169) & "</b><br><br></TD>");
    WebOutString("</TR>");
    WebOutString("<TR>");
    WebOutString("<TD colspan=""3"" align=""center"">");
    WebOutString("<INPUT autocomplete=""off"" onmouseout=""self.status=''; return true"" onmouseover=""self.status='Confirm'; return true"" name=""submit"" type=""submit"" value=""" & ToolWebReturnTheText(20067) &""">");
    WebOutString("<IMG alt="""" border=""0"" height=""1"" src=""pics/spacer.gif"" width=""1"">");

    WebOutString("<br><br><br>");
    if (nonblank(backurl)) then begin
      CreateLinkBackToCallingSite(backurl,sessionid,ToolWebReturnTheText(20170));
    end else begin
      link = WebGetArg("frompayurl");
      if (nonblank(link)) then begin
          WebOutString("<a href=""");
          WebOutString(link);
          if (right(link,1)!="/") then begin
            WebOutString("/");
          end;
          switch (WebGetArg("shoptype")) begin
            case "HWU": WebOutLink("WebHWUAbortCreditCardPayment.hal?langcode=" & langcode & "&sessionid=" & WebGetArg("sessionid") & "&txnumber=" & txnumber);
            case "HWUWEBNG": WebOutString("WebAction.hal?action=university_abortcc&txnumber=" & txnumber); // In or out?
            case "WEBNG": WebOutString("WebAction.hal?action=payserverabort&txnumber=" & txnumber);
            otherwise
              WebOutLink("WebHBSDivMain.hal?langcode=" & langcode & "&sessionid=" & WebGetArg("sessionid") & "&function=WebHBSDivShopBasket" & "&shoptype=" & WebGetArg("shoptype"));
          end;          
          WebOutString(""">");
          WebOutString("<b>" & ToolWebReturnTheText(20170) & "</b>");
          WebOutString("</a>");
      end;
    end;
    
    WebOutString("</TD>");
    WebOutString("</TR>");
    WebOutString("</FORM>");
    WebOutString("</TABLE>");
    WebOutString("&nbsp;</td>");
    WebOutString("</tr>");
    WebOutString("</table>");
    WebOutString("<script language=""JavaScript"">document.HansaForm.ccnumber.focus();</script>");
  end else begin
    WebOutString("ERROR"); //no tx number supplied
  end;
  
  return;
end;

global
updating procedure WebHBSDivPAYWithPayServer(string langcode)
begin
  ToolWebHBSDivPAYWithPayServer2(0,"","",langcode,"","");
  return;
end;

global
updating procedure UpdateContact(string custcode,string name,string addr1,string addr2,string addr3,string postcode,string country,string cardtype)
begin
  record CUVc oldCUr,CUr;
  record CredCardTypeVc CCTr;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(name) or nonblank(addr1) or nonblank(addr2) or nonblank(addr3) or nonblank(postcode) or nonblank(country) or nonblank(cardtype)) then begin
      RecordCopy(oldCUr,CUr);
      CUr.Person = name;
      CUr.InvAddr0 = addr1;
      CUr.InvAddr1 = addr2;
      CUr.InvAddr2 = addr3;
      CUr.InvAddr3 = "";
      CUr.InvAddr4 = postcode;
      CUr.CountryCode = country;
      
      CCTr.Code = cardtype;
      if (ReadFirstMain(CCTr,1,true)) then begin
        CUr.PayDeal = CCTr.PayTerm;
      end;
      
      if (RecordUpdate(oldCUr,CUr,false)) then begin end;
    end;
  end;
  return;
end;

global
updating procedure WebHBSDivPayServerSuccess(string langcode)
begin
  string 32 txnumber;
  txnumber = WebGetArg("txnumber");
  if (ValidateCCPayment(txnumber)) then begin
    UpdateContact(CurrentCust,WebGetArg("firstname"),WebGetArg("addr1"),WebGetArg("addr2"),WebGetArg("addr3"),WebGetArg("postcode"),WebGetArg("country"),WebGetArg("cardtype"));
    WebHBSDivShopBasketStep2;
  end else begin
    WebOutString("TODO: display something nice here, but for bascially this is an error because payment wasnt complete or txnumber not supplied");
  end;
  return;
end;

global
procedure WebHBSDivPayServerBack(string langcode)
begin
  WebOutString("TODO: display same page as above, with error that CC payment failed or was cancelled");
  return;
end;
