external function Boolean AnyClassInSet(string,string);
//tools
external outer function Boolean IsMarketplaceServer();
external function string 255 removenextnode(var string);
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external function string 255 FormatSimpleLinkWithArg(string,string,boolean);
external function boolean LoginState();
external function string 255 CurrentWebLang();
external function string 255 removenextlistitem(var string,string);
external procedure WebOutSubmit(string,string,string,string);
//pages
external procedure ShowErrorPage(string);
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//translation
external function string 255 ToolWebNGTranslateText(integer);
//shop
external function string 255 GetLinkToShop();
external procedure RedirectToShopPage(string);
external procedure RedirectToShopPageWithArg(string,string);
external procedure RedirectToShoppingBasket();
external function Boolean BuildWebNGOrder(var record ORVc,integer,string,boolean,string,string);
external updating procedure ClearShopBasket(integer);
external function string 255 GetLinkToCheckoutPage();
external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
external function Boolean BuildWebNGInvoice(var record IVVc,integer,string,boolean,string);
external procedure WebNGInsertCustOrderNr_ORVc(var record ORVc);
external procedure WebNGInsertCustOrderNr_IVVc(var record IVVc);
external procedure AddWebCCPaymentLineIV(var record IVVc,val,Integer,string,string,string,string,string);
external function string 255 WebNGGetSelectedDeliveryMode(string);
//webng
external procedure RedirectToURL(string);
//std
external function Integer InString2(string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Integer CheckCreditCardData(LongInt,string,string,string,string,string, string,val,var string,string,string,var string,Integer);
external updating function integer StartCardPurchaseAsync(string,string,string,string,string,string,integer,integer,var string,var string);
external updating function string 255 GetCreditCardRedirectURL(record WebNGPaySessionVc);
external function val cur2cur(String,String,Date,Val);
external function string 5 FindBestCreditCardCurrency(string);
external updating function boolean ValidateCCPayment(string);
external updating function boolean OpenCCPurchaseTransaction(val,string,string,string,var string,string,string,string,string,string,string,
                                                              integer,string,integer,
                                                              string,string,string,string,string,string,string,
                                                              var LongInt,var string);
external function Integer GetCCPurchaseParameters(string,string,integer,var string,var string,var string,var string,
                                          var string,var string,var integer,var string,var integer);
remote updating function Integer RecordAction_raPasteInvInCOCUService(var record COCUServiceVc,var record IVVc,var record IVVc);
external function string 255 ConvertXml(string);
external procedure RedirectToeGate(string);
external procedure FindCCAccountID(string,string,Integer,var record CCAccountIDVc,Integer);
external procedure RedirectTodotpay(string);
external procedure RedirectTopaysera(string);
external procedure RedirectTopaytrail(string);
external procedure ShopPaymentByPaypal2(record WebNGStructVc,string);
external procedure GetBaseCurncy(Integer,var string);
external function Boolean IPVc_PasteCustCode(var record IPVc,Integer,var LongInt);
external procedure IPPastePayMode(var record IPVc);
external procedure IPVc_PasteOrderNr(var record IPVc,Integer);
external updating function Integer RecordAction_raPasteOrdInInv(var record IVVc,LongInt,Boolean,var Integer);
external updating function Boolean ShopUpdateExistingOrder(record WebNGShopBasketVc);
external updating procedure SendWebshopMail(Integer,Longint);
external function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);
external updating procedure FinishPaidSubscriptions(record WebNGPaySessionVc,Boolean);
external function Boolean IsMarketplaceServer();
external updating procedure CancelMarketplacePayment(string);
external procedure ShowRedirectHtml(string,boolean);
external function string 255 GetLinkToMyAccount();
external procedure ShowRedirectHtml(string,boolean);

global
function boolean PayMethodSupported2(string paymethod,var string paydeal,var string infoelement,var string paymode)
begin
  boolean res,found,testf;
  record CUVc CUr;
  record CCatVc CCatr;
  record WebDisplayVc WebDisplayr;
  record WebPayMethodVc WPMr;
  record WebNGShopCompBlock WSCb;
  string 5 code;
  
  res = false;
  CUr.Code = CurrentCust;
  if (nonblank(CUr.Code)) then begin
    ReadFirstMain(CUr,1,true);
    if (nonblank(CUr.WebDisplays)) then begin
      code = CUr.WebDisplays;
    end else begin
      if (nonblank(CUr.CustCat)) then begin
        CCatr.Code = CUr.CustCat;
        ReadFirstMain(CCatr,1,true);
        code = CCatr.WebDisplays;
      end;
    end;
  end;
  if (nonblank(code) or paymethod=="dotpay" or paymethod=="paytrail" or paymethod=="paysera") then begin
    WebDisplayr.Code = code;
    ReadFirstMain(WebDisplayr,1,true);
    switch (paymethod) begin
      case "creditcard": 
        res = WebDisplayr.PayTypeCreditCard!=0;
        paydeal = WebDisplayr.PayDealCreditCard;
        infoelement = WebDisplayr.InfoElCreditCard;
        paymode = WebDisplayr.PayModeCreditCard;
      case "order": 
        res = WebDisplayr.PayTypeOrder!=0;
        paydeal = WebDisplayr.PayDealOrder;
        infoelement = WebDisplayr.InfoElOrder;
      case "invoice":
        res = WebDisplayr.PayTypeInvoice!=0;
        paydeal = WebDisplayr.PayDealInvoice;
        infoelement = WebDisplayr.InfoElInvoice;
      case "paypal":
        res = WebDisplayr.PayTypePaypal!=0;
        paydeal = WebDisplayr.PayDealPaypal;
        infoelement = WebDisplayr.InfoElPaypal;
        paymode = WebDisplayr.PayModePayPal;
      case "dotpay":
        found = true;
        while (LoopMain(WPMr,1,found)) begin
          if (found) then begin
            testf = true;
            if (WPMr.PayMethod!=kWebPaymentMethodDotpay) then begin testf = false; end;
            if (nonblank(WPMr.CUClassification)) then begin
              if (AnyClassInSet(WPMr.CUClassification,CUr.Classification)==false) then begin testf = false; end;
            end;
            if (nonblank(WPMr.ExcludeCUClassification)) then begin
              if (AnyClassInSet(WPMr.ExcludeCUClassification,CUr.Classification)) then begin testf = false; end;
            end;
            if (testf) then begin
              res = true;
              paydeal = WPMr.PayDeal;
              infoelement = WPMr.InfoElCreditCard;
              paymode = WPMr.PayMode;
              found = false;
            end;
          end;
        end;
      case "paysera":
        found = true;
        while (LoopMain(WPMr,1,found)) begin
          if (found) then begin
            testf = true;
            if (WPMr.PayMethod!=kWebPaymentMethodPaysera) then begin testf = false; end;
            if (nonblank(WPMr.CUClassification)) then begin
              if (AnyClassInSet(WPMr.CUClassification,CUr.Classification)==false) then begin testf = false; end;
            end;
            if (nonblank(WPMr.ExcludeCUClassification)) then begin
              if (AnyClassInSet(WPMr.ExcludeCUClassification,CUr.Classification)) then begin testf = false; end;
            end;
            if (testf) then begin
              res = true;
              paydeal = WPMr.PayDeal;
              infoelement = WPMr.InfoElCreditCard;
              paymode = WPMr.PayMode;
              found = false;
            end;
          end;
        end;
      case "paytrail":
        found = true;
        while (LoopMain(WPMr,1,found)) begin
          if (found) then begin
            testf = true;
            if (WPMr.PayMethod!=kWebPaymentMethodPaytrail) then begin testf = false; end;
            if (nonblank(WPMr.CUClassification)) then begin
              if (AnyClassInSet(WPMr.CUClassification,CUr.Classification)==false) then begin testf = false; end;
            end;
            if (nonblank(WPMr.ExcludeCUClassification)) then begin
              if (AnyClassInSet(WPMr.ExcludeCUClassification,CUr.Classification)) then begin testf = false; end;
            end;
            if (testf) then begin
              res = true;
              paydeal = WPMr.PayDeal;
              infoelement = WPMr.InfoElCreditCard;
              paymode = WPMr.PayMode;
              found = false;
            end;
          end;
        end;
//      case "directdeb"  : res = (WebDisplayr.PayTypeDirectDebit==1);
//      case "paypal"     : res = (WebDisplayr.PayTypePayPal==1);
    end;
  end else begin
    BlockLoad(WSCb);
    switch (paymethod) begin
      case "creditcard": 
        res = (WSCb.PayTypeCreditCard==1);
        paydeal = WSCb.PayDealCreditCard;
        infoelement = WSCb.InfoElCreditCard;
        paymode = WSCb.PayModeCreditCard;
      case "order": 
        res = (WSCb.PayTypeOrder==1);
        paydeal = WSCb.PayDealOrder;
        infoelement = WSCb.InfoElOrder;
      case "invoice": 
        res = (WSCb.PayTypeInvoice==1);
        paydeal = WSCb.PayDealInvoice;
        infoelement = WSCb.InfoElInvoice;
      case "directdeb": 
        res = (WSCb.PayTypeDirectDebit==1);
        paydeal = WSCb.PayDealDirectDebit;
        infoelement = WSCb.InfoElDirectDebit;
      case "paypal": 
        res = (WSCb.PayTypePayPal==1);
        paydeal = WSCb.PayDealPayPal;
        infoelement = WSCb.InfoElPayPal;
        paymode = WSCb.PayModePayPal;
      case "dotpay":
        found = true;
        while (LoopMain(WPMr,1,found)) begin
          if (found) then begin
            testf = true;
            if (StringFromSet(613,WPMr.PayMethod)!=paymethod) then begin testf = false; end;
            if (nonblank(WPMr.CUClassification)) then begin
              if (AnyClassInSet(WPMr.CUClassification,CUr.Classification)==false) then begin testf = false; end;
            end;
            if (nonblank(WPMr.ExcludeCUClassification)) then begin
              if (AnyClassInSet(WPMr.ExcludeCUClassification,CUr.Classification)) then begin testf = false; end;
            end;
            if (testf) then begin
              res = true;
              paydeal = WPMr.PayDeal;
              infoelement = WPMr.InfoElCreditCard;
              paymode = WPMr.PayMode;
              found = false;
            end;
          end;
        end;
      case "paysera":
        found = true;
        while (LoopMain(WPMr,1,found)) begin
          if (found) then begin
            testf = true;
            if (StringFromSet(613,WPMr.PayMethod)!=paymethod) then begin testf = false; end;
            if (nonblank(WPMr.CUClassification)) then begin
              if (AnyClassInSet(WPMr.CUClassification,CUr.Classification)==false) then begin testf = false; end;
            end;
            if (nonblank(WPMr.ExcludeCUClassification)) then begin
              if (AnyClassInSet(WPMr.ExcludeCUClassification,CUr.Classification)) then begin testf = false; end;
            end;
            if (testf) then begin
              res = true;
              paydeal = WPMr.PayDeal;
              infoelement = WPMr.InfoElCreditCard;
              paymode = WPMr.PayMode;
              found = false;
            end;
          end;
        end;
      case "paytrail":
        while (LoopMain(WPMr,1,found)) begin
          if (found) then begin
            testf = true;
            if (StringFromSet(613,WPMr.PayMethod)!=paymethod) then begin testf = false; end;
            if (nonblank(WPMr.CUClassification)) then begin
              if (AnyClassInSet(WPMr.CUClassification,CUr.Classification)==false) then begin testf = false; end;
            end;
            if (nonblank(WPMr.ExcludeCUClassification)) then begin
              if (AnyClassInSet(WPMr.ExcludeCUClassification,CUr.Classification)) then begin testf = false; end;
            end;
            if (testf) then begin
              res = true;
              paydeal = WPMr.PayDeal;
              infoelement = WPMr.InfoElCreditCard;
              paymode = WPMr.PayMode;
              found = false;
            end;
          end;
        end;
    end;
  end;
  
  PayMethodSupported2 = res;
  return;
end;

global
function boolean PayMethodSupported(string paymethod,var string paydeal,var string infoelement)
begin
  string 20 paymode;
  
  PayMethodSupported = PayMethodSupported2(paymethod,paydeal,infoelement,paymode);
  return;
end;

function longint GetShopAppNodeSerNr()
begin
  record WebNGShopBlock WSb;
  
  BlockLoad(WSb);
  GetShopAppNodeSerNr = WSb.NodeToShopApp;
  
  return;
end;

procedure ClearCheckOutSessionVariables()
begin
  PutSessionString("delmodecode","");
  PutSessionString("paycustomerorderno","");
  return;
end;

global
procedure RedirectToPaymentCompletedPage(record WebNGPaySessionVc WPSr)
begin
  record WebNGShopCompBlock WSCb;
  string 15 type;
  
  if (ReadFirstMain(WPSr,1,true)) then begin end;//we need to find the actual-updated basket with real record nr 
  if (WPSr.PayMethod=="creditcard" or WPSr.PayMethod=="paypal") then begin
    BlockLoad(WSCb);
    switch (WSCb.CCPaymentOpt) begin
      case 2: type = "order";
      otherwise type = "invoice";
    end;
  end;
  
  switch (WPSr.PayMethod) begin
    case "order": RedirectToShopPage("payment/complete/order/" & WPSr.RecordNr);
    case "invoice": RedirectToShopPage("payment/complete/invoice/" & WPSr.RecordNr);
    case "creditcard": RedirectToShopPage("payment/complete/" & type & "/" & WPSr.RecordNr);
    case "paypal": 
      RedirectToShopPage("payment/complete/" & type & "/" & WPSr.RecordNr);
      if (IsMarketplaceServer) then begin
        PutSessionString("reload_licenses","1"); 
      end;
    case "dotpay": RedirectToShopPage("payment/complete/" & type & "/" & WPSr.RecordNr);
    case "paysera": RedirectToShopPage("payment/complete/" & type & "/" & WPSr.RecordNr);
    case "paytrail": RedirectToShopPage("payment/complete/" & type & "/" & WPSr.RecordNr);
    otherwise
      RedirectToShopPageWithArg("payment/complete","errmsg=Payment complete.");
  end;
  
  return;
end;

procedure ShopPaymentErrorPage(string title,string msg)
begin
  record ORVc ORr;
  boolean orderokf;
  record WebNGStructVc WSr;
  record WebNGPageVc WPr;
  
  WSr.SerNr = GetShopAppNodeSerNr;
  if (ReadFirstMain(WSr,1,true)) then begin
    WPr.Code = WSr.WebPage;
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  
  ShowWebAppPageStart(WPr,"");
  
  WebOutStringFormat("<h1>" & title & "</h1>");
  WebOutStringFormat(msg);
  
  ShowWebAppPageEnd(WPr);

  return;
end;

function boolean GetPaySession(string id,var record WebNGPaySessionVc WPSr)
begin
  boolean res;
  res = false;
  if (LoginState) then begin
    WPSr.UUID = id;
    res = ReadFirstMain(WPSr,1,true);
  end;
  GetPaySession = res;
  return;
end;

updating function boolean CreateHWContractFromInvoice(LongInt IVSerNr,string language)
begin
  record IVVc IVr;
  record IVVc newIVr;
  record COCUServiceVc COCUServicer;
  record COCUServiceBlock COCUb;
  Boolean res;
  Integer r;

  res = false;
  BlockLoad(COCUb);
  if (COCUb.BlockUsingStdCO==1) then begin
    IVr.SerNr = IVSerNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      r = RecordAction_raPasteInvInCOCUService(COCUServicer,IVr,newIVr);
      if (r!=-1) then begin
        res = true;
      end;
    end;
  end;

  CreateHWContractFromInvoice = res;
  return;
end;

global
updating procedure ShopHandleOrderPayment(string paysessionid)
begin
  record WebNGPaySessionVc WPSr;
  record WebNGPaySessionVc oldWPSr;
  record ORVc ORr,oldORr;
  boolean orderokf;
  string 255 paydeal,infoelement;
  Longint recsernr;
  record WebNGShopCompBlock WSCb;
  record WebNGShopBasketVc WSBr;
    
  if (GetPaySession(paysessionid,WPSr)) then begin
    BlockLoad(WSCb);
    orderokf = false;
    PayMethodSupported("order",paydeal,infoelement);
    
    if (GetShoppingBasket(WSBr,0)) then begin
      if (WSBr.OrderNr>-1) then begin
        orderokf = ShopUpdateExistingOrder(WSBr);
        recsernr = WSBr.OrderNr;
      end else begin
        if (BuildWebNGOrder(ORr,0,paydeal,false,"",WPSr.DelAddrCode)) then begin
          WebNGInsertCustOrderNr_ORVc(ORr);
          if (ORr.SerNr<0) then begin
            ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
          end;
          recsernr = ORr.SerNr;
          if (ORr.SerNr>0) then begin
            if (RecordInsert(ORr,true)) then begin
              orderokf = true;
              SendWebshopMail(kWebshopMailOrder,ORr.SerNr);
              if (WSCb.DontOKOrders==0) then begin
                RecordCopy(oldORr,ORr);
                ORr.OKFlag = 1;
                RecordUpdate(oldORr,ORr,true);
              end;
            end;
          end;
        end;
      end;
    end;
    
    if (orderokf) then begin
      ClearShopBasket(0);
      RecordCopy(oldWPSr,WPSr);
      WPSr.Completed = 1;
      WPSr.CompletedDate = CurrentDate;
      WPSr.RecordNr = recsernr;
      if (RecordUpdate(oldWPSr,WPSr,false)) then begin end;

      RedirectToPaymentCompletedPage(WPSr);
    end else begin
      RedirectToShopPage("payment/error");
    end;
  end else begin
    RedirectToShopPage("payment/error");
  end;

  return;
end;

global
updating procedure ShopHandleInvoicePayment(string paysessionid)
begin
  record WebNGPaySessionVc WPSr;
  record WebNGPaySessionVc oldWPSr;
  record WebNGShopCompBlock WSCb;
  record IVVc oldIVr,IVr;
  boolean invoiceokf;
  string 255 paydeal,infoelement;
  longint recsernr;
    
  if (GetPaySession(paysessionid,WPSr)) then begin
    invoiceokf = false;
    BlockLoad(WSCb);
    PayMethodSupported("invoice",paydeal,infoelement);
    
    if (BuildWebNGInvoice(IVr,0,paydeal,false,"")) then begin
      WebNGInsertCustOrderNr_IVVc(IVr);
      IVr.ShipMode = WebNGGetSelectedDeliveryMode(IVr.ShipMode);
      if (IVr.SerNr<0) then begin
        IVr.SerNr = NextSerNr("IVVc",IVr.InvDate,-1,false,"");
      end;
      recsernr = IVr.SerNr;
      if (IVr.SerNr>0) then begin
        invoiceokf = RecordInsert(IVr,true);
        SendWebshopMail(kWebshopMailInvoice,IVr.SerNr);
        if (invoiceokf and WSCb.DontOKInvoices==0) then begin
          RecordCopy(oldIVr,IVr);
          IVr.OKFlag = 1;
          if (RecordUpdate(oldIVr,IVr,true)==0) then begin
            if (CreateHWContractFromInvoice(IVr.SerNr,"")) then begin end;
          end;
        end;
      end;
    end;
    
    if (invoiceokf) then begin
      ClearShopBasket(0);
      RecordCopy(oldWPSr,WPSr);
      WPSr.Completed = 1;
      WPSr.CompletedDate = CurrentDate;
      WPSr.RecordNr = recsernr;
      if (RecordUpdate(oldWPSr,WPSr,false)) then begin end;

      RedirectToPaymentCompletedPage(WPSr);
    end else begin
      RedirectToShopPage("payment/error");
    end;
  end else begin
    RedirectToShopPage("payment/error");
  end;

  return;
end;

updating function Boolean CreateCCInvoice(string ccnumber,string cctype,string authcode,string paydeal,Boolean shouldokf,var Longint recnr
                                          ,record WebNGPaySessionVc WPSr,string paymode)
begin
  string 255 tstr,tstr2,margs,errmsg,ccnumber2;
  string 255 authcode2,transid,infoelement;  
  record IVVc IVr,oldIVr;
  record CUVc CUr;
  Boolean res;
      
  margs = WPSr.CustomField1;
  while (nonblank(margs)) begin
    tstr = removenextlistitem(margs,",");
    tstr2 = removenextlistitem(tstr,"=");
    switch (tstr2) begin
      case "ccnumber": ccnumber2 = tstr;
      case "authcode": authcode2 = tstr;
      case "transid": transid = tstr;
      case "errmsg": errmsg = tstr;
    end;
  end;

  if (BuildWebNGInvoice(IVr,0,paydeal,true,"")) then begin
    if (IVr.SerNr<0) then begin
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");
    end;
    IVr.CreditCard = ccnumber;
    IVr.AuthorizationCode = authcode;
    if (IVr.SerNr>0) then begin
      AddWebCCPaymentLineIV(IVr,WPSr.InclAmount,kInvoiceRowTypeCreditCardPayment,WPSr.Currency,paymode,authcode2,transid,ccnumber2);
      if (RecordStore(IVr,true)) then begin
        recnr = IVr.SerNr;
        CUr.Code = IVr.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin end;
        SendWebshopMail(kWebshopMailInvoice,IVr.SerNr);
        res = true;
        if (shouldokf) then begin
          RecordCopy(oldIVr,IVr);
          IVr.OKFlag = 1;
          if (RecordUpdate(oldIVr,IVr,true)) then begin end;
          if (CreateHWContractFromInvoice(IVr.SerNr,"")) then begin end;
        end;
      end;
    end;
  end;

  CreateCCInvoice = res;
  return;
end;

updating procedure CreateCCOrder(string paydeal,string deladdr,Boolean okf,var Longint ordernr,Boolean createinvf,var Boolean savef,var Longint recnr)
begin
  record ORVc ORr;
  record IVVc IVr,oldIVr;
  Integer r,errcode;

  if (BuildWebNGOrder(ORr,0,paydeal,true,"",deladdr)) then begin
    if (ORr.SerNr<0) then begin
      ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
    end;
    if (okf) then begin
      ORr.OKFlag = 1;
    end;
    if (createinvf) then begin
      ORr.InvBeforeShip = 1;
    end;
    ordernr = ORr.SerNr;
    if (ORr.SerNr>0) then begin
      RecordInsert(ORr,true);
      SendWebshopMail(kWebshopMailOrder,ORr.SerNr);
    end;
    savef = true;
    if (createinvf) then begin
      savef = false;
      r = RecordAction_raPasteOrdInInv(IVr,ordernr,true,errcode);
      if (r==0) then begin
        if (MatRowCnt(IVr)!=0) then begin
          RecordStore(IVr,true);
          RecordCopy(oldIVr,IVr);
          IVr.OKFlag = 1;
          savef = true;
          recnr = IVr.SerNr;
          if (RecordUpdate(oldIVr,IVr,true)) then begin
          end;
        end;
      end;
    end;
  end;

  return;
end;

updating function Boolean CreateCCPrepayment(string custcode,string paymode,Longint ordernr,var Longint recnr)
begin
  string 255 tstr;
  record IPVc IPr,oldIPr;
  row IPVc IPrw;
  Boolean res;
  record ORVc ORr;
  val amount;
  Longint error;
  
  ORr.SerNr = ordernr;
  recnr = ordernr;
  if (ReadFirstMain(ORr,1,true)) then begin
    amount = ORr.Sum4;
    if (amount>0) then begin
      RecordNew(IPr);
      IPr.SerNr = NextSerNr("IPVc",CurrentDate,-1,false,"");
      GetBaseCurncy(1,tstr);    
      IPr.PayMode = paymode;
      IPPastePayMode(IPr);
      ClearRow(IPr,IPrw,1);
      IPr.TransDate     = CurrentDate;

      IPrw.ChequeNr    =  -1;
      IPrw.InvoiceNr   =  -1;
      IPrw.stp         =  1;
      IPrw.CustCode    =  custcode;
      MatRowPut(IPr,0,IPrw);
      IPVc_PasteCustCode(IPr,0,error);
      MatRowGet(IPr,0,IPrw);
      IPr.CurPayVal     = amount;     
      IPrw.RecVal    = amount;   
      IPrw.InvVal    = amount;     
      IPrw.BankVal   = amount; 
      IPrw.VATVal = 0;    
      IPrw.OrderNr = ordernr;
      MatRowPut(IPr,0,IPrw);
      IPVc_PasteOrderNr(IPr,0);
      
      if (RecordStore(IPr,true)) then begin
        RecordCopy(oldIPr,IPr);
        IPr.OKFlag = 1;
        res = RecordUpdate(oldIPr,IPr,true)==0;
      end;
    end;
  end;

  CreateCCPrepayment = res;
  return;
end;

global
updating function Boolean FinishCCPayments(record WebNGPaySessionVc WPSr,record WebNGShopCompBlock WSCb,string margs,var string paydeal,string paymode)
begin
  Longint recnr,ordernr;
  Boolean savef;
  string 255 ccnumber,cctype,authcode,transid,errmsg;
  string 255 tstr,tstr2;
  record WebNGPaySessionVc oldWPSr;
  record CredCardTypeVc CCTr;

  while (nonblank(margs)) begin
    tstr = removenextlistitem(margs,",");
    tstr2 = removenextlistitem(tstr,"=");
    switch (tstr2) begin
      case "ccnumber": ccnumber = tstr;
      case "cctype": cctype = tstr;
      case "authcode": authcode = tstr;
      case "transid": transid = tstr;
      case "errmsg": errmsg = tstr;      
    end;
  end;

  if (nonblank(cctype)) then begin
    CCTr.Code = cctype;
    if (ReadFirstMain(CCTr,1,true)) then begin
      if (nonblank(CCTr.PayTerm)) then begin
        paydeal = CCTr.PayTerm;
      end;
    end;
  end;
  switch (WSCb.CCPaymentOpt) begin
    case 0: 
      savef = CreateCCInvoice(ccnumber,cctype,authcode,paydeal,WSCb.DontOKInvoices==0,recnr,WPSr,paymode);
    case 1:
      //savef = CreateCCInvoice(ccnumber,cctype,authcode,paydeal,WSCb.DontOKInvoices==0,recnr);
      CreateCCOrder(paydeal,WPSr.DelAddrCode,WSCb.DontOKOrders==0,ordernr,true,savef,recnr);
    case 2:
      CreateCCOrder(paydeal,WPSr.DelAddrCode,WSCb.DontOKOrders==0,ordernr,false,savef,recnr);
      savef = CreateCCPrepayment(WPSr.CustCode,paymode,ordernr,recnr);
  end;
  
  if (savef) then begin
    ClearShopBasket(0);
    RecordCopy(oldWPSr,WPSr);
    WPSr.Completed = 1;
    WPSr.CompletedDate = CurrentDate;
    WPSr.RecordNr = recnr;
    if (RecordUpdate(oldWPSr,WPSr,false)) then begin end;
  end else begin
    LogText2(0,"Failed to finish payment >> Failed to store transactions. Check number series or other system setup.",kVerbosityDebug);
  end;

  FinishCCPayments = savef;
  return;
end;

global
updating procedure FinishManualPayment(record WebNGPaySessionVc WPSr,Longint invoiceno,string paymode)
begin

  string 255 tstr;
  record IPVc IPr,oldIPr;
  row IPVc IPrw;
  Boolean res;
  record IVVc IVr;
  val amount;
  Longint error;
  Boolean installmentf;
  val chk;
  
  IVr.SerNr = invoiceno;
  if (ReadFirstMain(IVr,1,true)) then begin
    amount = IVr.Sum4;
    if (amount>0) then begin
      RecordNew(IPr);
      IPr.SerNr = NextSerNr("IPVc",CurrentDate,-1,false,"");
      GetBaseCurncy(1,tstr);    
      IPr.PayMode = paymode;
      IPPastePayMode(IPr);
      ClearRow(IPr,IPrw,1);
      IPr.TransDate = CurrentDate;

      IPrw.InvoiceNr = IVr.SerNr;
      MatRowPut(IPr,0,IPrw);
      PasteInvIn2IPr(IPr,0,IPr.TransDate,chk,false,installmentf)

      if (RecordStore(IPr,true)) then begin
        RecordCopy(oldIPr,IPr);
        IPr.OKFlag = 1;
        res = RecordUpdate(oldIPr,IPr,true)==0;
        if (res) then begin
          FinishPaidSubscriptions(WPSr,true);
        end;
      end;
    end;
  end;

  return;
end;

global
updating procedure ShopHandleCreditCardPayment(string paysessionid)
begin
  record WebNGPaySessionVc WPSr;
  record WebNGPaySessionVc oldWPSr;
  record IVVc oldIVr,IVr;
  boolean ivokf;
  string 255 paydeal,ccnumber,cctype,authcode,paymode;
  string 255 tstr,tstr2,margs;
  record CUVc CUr;
  string 255 activcode;
  record WebNGShopCompBlock WSCb;
  
  if (GetPaySession(paysessionid,WPSr)) begin
    if (WPSr.Completed==0) then begin
      BlockLoad(WSCb);
      PayMethodSupported2("creditcard",paydeal,tstr,paymode);
      
      margs = WPSr.CustomField1;
      if (GetSessionString("webshop_manual_payment")=="1") then begin
        FinishManualPayment(WPSr,WPSr.RecordNr,paymode);
        PutSessionString("webshop_manual_payment","");
      end else begin
        FinishCCPayments(WPSr,WSCb,margs,paydeal,paymode);
      end;
    end;
  end;
  
  return;
end;

procedure ShopPaymentCompleted(record WebNGStructVc WSr,string doctype,longint sernr)
begin
  record WebNGPageVc WPr;
  string 255 ccnumber,link;

  if (ReadFirstMain(WSr,1,true)) then begin
    WPr.Code = WSr.WebPage;
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  
  ShowWebAppPageStart(WPr,"");
  
  if (doctype=="order") then begin
    WebOutStringFormat("<h1>" & ToolWebNGTranslateText(25425) & "</h1>"); //Order placed successfully
  end else begin
    WebOutStringFormat("<h1>" & ToolWebNGTranslateText(25409) & "</h1>"); //Payment completed successfully
  end;
  
  switch (doctype) begin
    case "order"  :
      link = FormatLink("/WebUpdatingAction.hal","action=download_order&company=" & CurrentCompany & "&sernr=" & SerNr,true,true);
      WebOutStringFormat("<a target=""_blank"" href=""" & link & """>" & ToolWebNGTranslateText(25410) & "</a>"); //Click here to see your order
    case "invoice":
      ccnumber = WebGetArg("ccnumber");
      link = FormatLink("/WebUpdatingAction.hal","action=download_invoice&company=" & CurrentCompany & "&sernr=" & SerNr & "&ccnumber=" & ConvertXml(ccnumber),true,true);
      WebOutStringFormat("<a target=""_blank"" href=""" & link & """>" & ToolWebNGTranslateText(25411) & "</a>"); //Click here to see your invoice
  end;
  ClearCheckOutSessionVariables;
  ShowWebAppPageEnd(WPr);
  return;
end;

procedure ShopPaymentError(record WebNGStructVc WSr)
begin
  string 255 err;
  
  err = WebGetArg("errmsg");
  if (blank(err)) then begin
    err = ToolWebNGTranslateText(25019); //An unknown error occurred during payment
  end;
  ShopPaymentErrorPage(ToolWebNGTranslateText(25020),err); //Payment failed
  return;
end;

procedure PaymentMethodNotSupported()
begin
  ShopPaymentErrorPage(ToolWebNGTranslateText(25021),ToolWebNGTranslateText(25412)); //Payment method not yet supported //Please navigate back and try another payment method.
  return;
end;

updating function string 255 StartPaymentSession(integer appid,string paymethod,string custcode,string currency,val inclamount,val vat,
                                    string custordnr,string deladdrcode,string orderclass)
begin
  record WebNGPaySessionVc WPSr;
  val fr,to1,to2,br1,br2;
  string 255 res;
  record IVVc IVr;

  if (LoginState) then begin
    GetFullCurncyRate(currency,CurrentDate,fr,to1,to2,br1,br2);
    
    RecordNew(WPSr);
    
    WPSr.AppID       = appid;
    WPSr.PayMethod   = paymethod;
    WPSr.CustCode    = custcode;
    WPSr.Currency    = currency;
    WPSr.InclAmount  = inclamount;
    WPSr.VAT         = vat;
    WPSr.CustOrderNr = custordnr;
    WPSr.DelAddrCode = deladdrcode;
    WPSr.OrderClass  = orderclass;
    WPSr.FrRate      = fr;
    WPSr.ToRateB1    = to1;
    WPSr.ToRateB2    = to2;
    WPSr.BaseRate1   = br1;
    WPSr.BaseRate2   = br2;

    if (GetSessionString("webshop_manual_payment")=="1") then begin
      WPSr.RecordNr = StringToLongint(GetSessionString("webshop_manual_payment_invoice"));
      WPSr.CustCode = CurrentCust;
      IVr.SerNr = WPSr.RecordNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        WPSr.InclAmount = IVr.Sum4;
        WPSr.VAT = IVr.Sum3;
        WPSr.Currency = IVr.CurncyCode;
      end;
    end;
    
    if (RecordStore(WPSr,true)) then begin
      res = WPSr.UUID;
    end;
  end;
  
  StartPaymentSession = res;
  return;
end;

function integer CCPaymentPartner(string Currency)
begin
  integer res;
  record CCAccountIDVc CCAccountIDr;
  record CCMerchantIDVc CCMerchantIDr;
  
  FindCCAccountID(Currency,"",kCCAccountTypeWeb,CCAccountIDr,kCardHolderNotPresent);
  CCMerchantIDr.Code = CCAccountIDr.MerchantID;
  if (ReadFirstMain(CCMerchantIDr,1,true)) then begin
    res = CCMerchantIDr.Partner;
  end;
  CCPaymentPartner = res;
  return;
end;

global
updating procedure ShopHandlePayment(string paymethod,string appid)
begin
  record WebNGShopBasketVc WSBr;
  record WebNGPaySessionVc WPSr;
  string 255 paysessionid;
  integer m_appid;
  string 255 redirecturl,tstr;
  Integer partner;
  record IVVc IVr;
  
  if (LoginState) then begin
    if (PayMethodSupported(paymethod,tstr,tstr)) then begin
      m_appid = StringToInt(appid);
      GetShoppingBasket(WSBr,0);
      BuildWebNGInvoice(IVr,0,"",false,"");
      paysessionid = StartPaymentSession(m_appid,paymethod,WSBr.CustCode,WSBr.CurrencyCode,IVr.Sum4,IVr.Sum3,GetSessionString("paycustomerorderno"),WSBr.DelAddrCode,"WEB");
      
      if (nonblank(paysessionid)) then begin
        GetPaySession(paysessionid,WPSr);
        switch (paymethod) begin
          case "order": 
            RedirectToShopPage("payment/" & paymethod & "/" & paysessionid);
          case "invoice": 
            RedirectToShopPage("payment/" & paymethod & "/" & paysessionid);
          case "creditcard": 
            partner = CCPaymentPartner(WPSr.Currency);
            switch (partner) begin 
              case kCCPartnerANZeGate:
                RedirectToeGate(paysessionid);
              otherwise
                redirecturl = "";
                if (GetPaySession(paysessionid,WPSr)) then begin
                  redirecturl = GetCreditCardRedirectURL(WPSr);
                end;
                if (nonblank(redirecturl)) then begin
                  RedirectToURL(redirecturl);
                end else begin
                  RedirectToShopPage("payment/" & paymethod & "/" & paysessionid);
                end;
            end;
          case "directdeb": 
            RedirectToShopPage("payment/" & paymethod & "/" & paysessionid);
          case "paypal": 
            RedirectToShopPage("payment/" & paymethod & "/" & paysessionid);
          case "paytrail":
            RedirectTopaytrail(paysessionid);
          case "dotpay":
            RedirectTodotpay(paysessionid);
          case "paysera":
            RedirectTopaysera(paysessionid);
        end;
      end else begin
        RedirectToShopPageWithArg("payment/error","errmsg=" & ToolWebNGTranslateText(25022)); //Could not create a Payment Session
      end;
    end else begin
      RedirectToShopPage("payment/notsupported");
    end;
  end else begin  
    RedirectToShopPageWithArg("payment/error","errmsg=" & ToolWebNGTranslateText(25023)); //You must be logged in to checkout and pay. Please log in and try again.
  end;
  
LPaymentDone:;
  return;
end;

global
updating procedure ShopHandlePaymentManual(string paymethod,string invoiceno,string appid)
begin

  PutSessionString("webshop_manual_payment",1);
  if (paymethod=="creditcard" or paymethod=="paypal" or paymethod=="dotpay" or paymethod=="paytrail" or paymethod=="paysera") then begin
    PutSessionString("webshop_manual_payment_invoice",invoiceno);
    ShopHandlePayment(paymethod,appid);
  end;

  return;
end;

global
updating procedure ShopPaymentByOrder(string path)
begin
  record WebNGPaySessionVc WPSr;
  string 255 node,mpath;
  
  mpath = path;
  node = removenextnode(mpath);
  
  if (GetPaySession(node,WPSr)) then begin
    if (WPSr.Completed==0) then begin
      ShopHandleOrderPayment(node);
    end else begin
      RedirectToPaymentCompletedPage(WPSr);
    end;
  end else begin
    RedirectToShoppingBasket;
  end;
  
  return;
end;

global
updating procedure ShopPaymentByInvoice(string path)
begin
  record WebNGPaySessionVc WPSr;
  string 255 node,mpath;
  
  mpath = path;
  node = removenextnode(mpath);
  
  if (GetPaySession(node,WPSr)) then begin
    if (WPSr.Completed==0) then begin
      ShopHandleInvoicePayment(node);
    end else begin
      RedirectToPaymentCompletedPage(WPSr);
    end;
  end else begin
    RedirectToShoppingBasket;
  end;
  
  return;
end;

procedure GetCardPaymentSessionVariables(var string firstname,var string lastname,var string cardnumber,var string cardtype,var integer expirymonth,var integer expiryyear)
begin
  firstname   = GetSessionString("payment_cc_firstname");
  lastname    = GetSessionString("payment_cc_lastname");
  cardnumber  = GetSessionString("payment_cc_cardnumber");
  cardtype    = GetSessionString("payment_cc_cardtype");
  if (nonblank(GetSessionString("payment_cc_expirymonth"))) then begin
    expirymonth = StringToInt(GetSessionString("payment_cc_expirymonth"));
  end;
  if (nonblank(GetSessionString("payment_cc_expiryyear"))) then begin
    expiryyear  = StringToInt(GetSessionString("payment_cc_expiryyear"));
  end;
  return;
end;

global
//procedure SetCardPaymentSessionVariables(string giftvouchernr,string firstname,string lastname,string cardnumber,string cardtype,integer expirymonth,integer expiryyear)
procedure SetCardPaymentSessionVariables(string firstname,string lastname,string cardnumber,string cardtype,integer expirymonth,integer expiryyear)
begin
//  PutSessionString("payment_giftvouchernr",giftvouchernr);
  PutSessionString("payment_cc_firstname",firstname);
  PutSessionString("payment_cc_lastname",lastname);
  PutSessionString("payment_cc_cardnumber",cardnumber);
  PutSessionString("payment_cc_cardtype",cardtype);
  PutSessionString("payment_cc_expirymonth",expirymonth);
  PutSessionString("payment_cc_expiryyear",expiryyear);
  return;
end;
    
procedure ClearCardPaymentSessionVariables()
begin
  PutSessionString("payment_giftvouchernr","");
  PutSessionString("payment_cc_firstname","");
  PutSessionString("payment_cc_lastname","");
  PutSessionString("payment_cc_cardnumber","");
  PutSessionString("payment_cc_cardtype","");
  PutSessionString("payment_cc_expirymonth","");
  PutSessionString("payment_cc_expiryyear","");
  PutSessionString("payment_cc_err","");
  PutSessionString("payment_cc_errmsg","");
  return;
end;

procedure ShopPaymentByCreditCardWaitForReply(record WebNGStructVc WSr,string paysessionid)
begin
  record WebNGPaySessionVc WPSr;
  record WebNGPageVc WPr;
    
  if (GetPaySession(paysessionid,WPSr)) begin
    if (ReadFirstMain(WSr,1,true)) then begin
      WPr.Code = WSr.WebPage;
      if (ReadFirstMain(WPr,1,true)) then begin end;
    end;

    if (WPSr.Completed==0) then begin
      switch (WPSr.Status-10) begin
        case kCCStatusPaymentOK:
          queued.ShopHandleCreditCardPayment(paysessionid);
          WPr.TemporaryPage = 3;
          ShowWebAppPageStart(WPr,"");
          WebOutStringFormatNL("<h1>" & ToolWebNGTranslateText(25413) & "</h1>"); //Processing card transaction
          WebOutStringFormatNL("<p><img src=""/shop/loader.gif""></p>");
          WebOutStringFormat("<p>" & ToolWebNGTranslateText(25414) & "</p>"); //This may take a few seconds.
          ShowWebAppPageEnd(WPr);
        case kCCStatusProcessing:
          WPr.TemporaryPage = 3;
          ShowWebAppPageStart(WPr,"");
          WebOutStringFormatNL("<h1>" & ToolWebNGTranslateText(25413) & "</h1>"); //Processing card transaction
          WebOutStringFormatNL("<p><img src=""/shop/loader.gif""></p>");
          WebOutStringFormat("<p>" & ToolWebNGTranslateText(25414) & "</p>"); //This may take a few seconds.
          ShowWebAppPageEnd(WPr);
        case kCCStatusUnknownError:
          PutSessionString("payment_cc_errmsg",ToolWebNGTranslateText(25024) & " " & WPSr.PayMentDesc); //This payment has resulted in an unknown error. Please check with your bank whether any transaction was made.
          RedirectToShopPage("payment/creditcard/" & paysessionid)
        case kCCStatusCardRejected:
          PutSessionString("payment_cc_errmsg",ToolWebNGTranslateText(25025) & " " & WPSr.PayMentDesc); //Card rejected. Please try another card.
          RedirectToShopPage("payment/creditcard/" & paysessionid);
        case kCCStatusTimedOut:
          PutSessionString("payment_cc_errmsg",ToolWebNGTranslateText(25026)); //Transaction timed out. Please try again.
          RedirectToShopPage("payment/creditcard/" & paysessionid);
        case kCCStatusPaymentServerError:
          RedirectToShopPageWithArg("payment/error","errmsg=" & ToolWebNGTranslateText(25027)); //Payment Server Transaction not completed successfully.
        otherwise
          PutSessionString("payment_cc_errmsg",WPSr.PayMentDesc);
          RedirectToShopPage("payment/creditcard/" & paysessionid);
      end;
    end else begin
      RedirectToPaymentCompletedPage(WPSr);
    end;
  end else begin
    ShowErrorPage(25000);
  end;
  
  return;
end;

procedure GetCUPersonFirstLastName(string custcode,var string firstname,var string lastname)
begin
  record CUVc CUr;
  longint l;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.Person)) then begin
      l = InString2(CUr.Person," ");
      if (l!=-1) then begin
        lastname = mid(CUr.Person,l+1,255);
        firstname = left(CUr.Person,l);
      end else begin
        firstname = CUr.Person;
        lastname = "";
      end;
    end;
  end;
  
  return;
end;

global
updating procedure RemovePaySession(string paysessionid)
begin
  record WebNGPaySessionVc WPSr;
  
  if (GetPaySession(paysessionid,WPSr)) then begin
    RecordDelete(WPSr);
  end;
  return;
end;

global
updating procedure UpdatePaySessionAfterPayServerDone(string paysessionid,string ccnumber,string cctype)
begin
  record WebNGPaySessionVc oldWPSr,WPSr;
  WPSr.UUID = paysessionid;
  
  if (ReadFirstMain(WPSr,1,true)) then begin
    RecordCopy(oldWPSr,WPSr);
    
    if (ValidateCCPayment(WPSr.ExternalSession)) then begin
      WPSr.Status = 10+kCCStatusPaymentOK;
    end else begin
      WPSr.Status = 10+kCCStatusPaymentServerError;
    end;
    
    if (nonblank(WPSr.CustomField1)) then begin
      WPSr.CustomField1 = WPSr.CustomField1 & ",";
    end;
    WPSr.CustomField1 = WPSr.CustomField1 & "ccnumber=" & ccnumber & ",cctype=" & cctype;
    if (RecordUpdate(oldWPSr,WPSr,false)) then begin end;
  end;
  return;
end;

global
procedure ShopPaymentPayServerAborted(string txnumber)
begin
  record WebNGPaySessionVc WPSr;
  boolean res;
  
  WPSr.ExternalSession = txnumber;
  if (ReadFirstKey("ExternalSession",WPSr,1,true)) then begin    
    queued.RemovePaySession(WPSr.UUID);
    RedirectToShopPage("payment/creditcard/" & WPSr.UUID & "/aborted");
  end else begin
    RedirectToShopPageWithArg("payment/error","errmsg=" & ToolWebNGTranslateText(25028)); //Could not find Payment Session based on TX number
  end;

  return;
end;

global
procedure ShopPaymentPayServerCompleted(string txnumber,string ccnumber,string cctype)
begin
  record WebNGPaySessionVc WPSr;

  WPSr.ExternalSession = txnumber;
  if (ReadFirstKey("ExternalSession",WPSr,1,true)) then begin
    queued.UpdatePaySessionAfterPayServerDone(WPSr.UUID,ccnumber,cctype);
    RedirectToShopPage("payment/creditcard/" & WPSr.UUID & "/busy");
  end else begin
    RedirectToShopPageWithArg("payment/error","errmsg=" & ToolWebNGTranslateText(25028)); //Could not find Payment Session based on TX number
  end;
  
  return;
end;

global updating
procedure SetupPayServerTransaction(string paysessionid)
begin
  record WebNGPaySessionVc oldWPSr,WPSr;
  record CUVc CUr;
  string 255 ovrcurrency;
  string 255 partner,merchantid,merchantcode,merchantaccref,merchantkey,merchantrefundpw,merchantserialnr;
  integer merchanttestaddr,merchantlivef;
  string 255 cardfirstname,cardlastname,addr1,addr2,addr3,postcode,country;
  longint err;
  string 255 errmsg;
  string 255 txnumber;
  transaction string 255 frompayurl;
  val fr,to1,to2,br1,br2;
  
  if (GetPaySession(paysessionid,WPSr)) then begin
    RecordCopy(oldWPSr,WPSr);

    txnumber = -1;
    
    if (WebSecureMode) then begin
      frompayurl = "https://";
    end else begin
      frompayurl = "http://";
    end;
    frompayurl = frompayurl & WebHost;

    ovrcurrency = FindBestCreditCardCurrency(WPSr.Currency);
    if (ovrcurrency!=WPSr.Currency) then begin
      WPSr.DisplayCurrency = WPSr.Currency;
      WPSr.DisplayAmount = WPSr.InclAmount;
      WPSr.DisplayVAT = WPSr.VAT;
      
      WPSr.Currency = ovrcurrency;
      WPSr.InclAmount = cur2cur(WPSr.DisplayCurrency,WPSr.Currency,CurrentDate,WPSr.DisplayAmount);
      WPSr.VAT = cur2cur(WPSr.DisplayCurrency,WPSr.Currency,CurrentDate,WPSr.DisplayVAT);
      
      GetFullCurncyRate(WPSr.Currency,CurrentDate,fr,to1,to2,br1,br2);
      WPSr.FrRate      = fr;
      WPSr.ToRateB1    = to1;
      WPSr.ToRateB2    = to2;
      WPSr.BaseRate1   = br1;
      WPSr.BaseRate2   = br2;
    end;
    
    if (GetCCPurchaseParameters(WPSr.Currency,"",1,
          partner,merchantid,merchantcode,merchantaccref,merchantkey,merchantrefundpw,
          merchanttestaddr,merchantserialnr,merchantlivef)==0) then begin

      GetCUPersonFirstLastName(WPSr.CustCode,cardfirstname,cardlastname);
      if (nonblank(cardfirstname)) then begin
        if (nonblank(cardlastname)) then begin
          cardfirstname = cardfirstname & " " & cardlastname;
        end;
      end else begin
        cardfirstname = cardlastname;
      end;
      
      CUr.Code = WPSr.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        addr1 = CUr.InvAddr0;
        addr2 = CUr.InvAddr1;
        addr3 = CUr.InvAddr2;
        postcode = CUr.InvAddr4;
        country = CUr.CountryCode;
      end;

      if (OpenCCPurchaseTransaction(WPSr.InclAmount,WPSr.Currency,frompayurl,WPSr.UUID,txnumber,
                                    partner,merchantid,merchantcode,merchantaccref,merchantkey,merchantrefundpw,
                                    merchanttestaddr,merchantserialnr,merchantlivef,
                                    cardfirstname,cardlastname,addr1,addr2,addr3,postcode,country,
                                    err,errmsg)) then begin
        WPSr.Status = 10+kCCStatusProcessing;
        WPSr.ExternalSession = txnumber;
        if (RecordUpdate(oldWPSr,WPSr,false)) then begin end;
      end;
    end;
  end;
  
  return;
end;

global
updating procedure ShopPaymentByPaymentServer(string paysessionid)
begin
  record WebNGPaySessionVc WPSr;
  record WebNGPageVc WPr;
  record WebControlBlock WCb;
  string 255 tourl;
  boolean res;
  transaction string 255 frompayurl;
  
  res = false;
  
  SetupPayServerTransaction(paysessionid);

  if (GetPaySession(paysessionid,WPSr)) then begin
    if (nonblank(WPSr.ExternalSession) and WPSr.ExternalSession!="-1") then begin    
      BlockLoad(WCb);
      tourl = WCb.ToPaySSLURL;
      
      if (left(tourl,7)!="http://" and left(tourl,8)!="https://") then begin
        tourl = "https://" & tourl;
      end;

      if (right(tourl,1)!="/") then begin
        tourl = tourl & "/";
      end;
      
  //    tourl = tourl & "WebAction.hal?action=payserverpayment&txnumber=" & txnumber & "&langcode=" & CurrentWebLang; //TODO: Fix CCTX to include all info so we only need this line, not the next 5
      tourl = tourl & "mainupdate/paysrv/hwconvindex.htm?txnumber=" & WPSr.ExternalSession & "&currency=" & WPSr.Currency & "&amount=" & ValToString(WPSr.InclAmount,M4Val,"",".",0) & "&shoptype=WEBNG&langcode=" & CurrentWebLang & "&frompayurl=" & frompayurl; //TODO: remove this so the above link works
      if (nonblank(WPSr.DisplayCurrency) and WPSr.DisplayCurrency!=WPSr.Currency) then begin
        tourl = tourl & "&l_amount=" & ValToString(WPSr.DisplayAmount,M4Val,"",".",0);
        tourl = tourl & "&l_curncy=" & WPSr.DisplayCurrency;
      end;
      
      if (false) then begin
        res = true;
        WebOutString("will redirect to: ");
        WebOutString(tourl);
      end else begin
        res = true;
        RedirectToURL(tourl);
      end;
    end;
  end;
  
  if (res==false) then begin
    RedirectToShopPageWithArg("payment/error","errmsg=" & ToolWebNGTranslateText(25029)); //Error Setting up Payment Server Transaction
  end;

  return;
end;

procedure ShopPaymentByCreditCard(record WebNGStructVc WSr,string path)
begin
  record WebControlBlock WCb;
  record WebNGPageVc WPr;
  string 255 node,mpath;
  record WebNGPaySessionVc WPSr;
  record CredCardTypeVc CCTr;
  string 255 cardfirstname,cardlastname,cardnumber,cardtype;
  integer expirymonth,expiryyear;
  integer i;
  boolean foundf,testf;
  string 255 tstr;
  integer err;
  string 255 errmsg;
  
  //TODO: this may only run in SSL mode
  //TODO: field values may not be cached by browser
  
  mpath = path;
  node = removenextnode(mpath);
  
  if (nonblank(node) and nonblank(mpath)) then begin
    tstr = removenextnode(mpath);
    switch (tstr) begin
      case "busy": 
        ShopPaymentByCreditCardWaitForReply(WSr,node);
        goto LShopPaymentByCreditCard;
      case "aborted":
        ShopPaymentErrorPage(ToolWebNGTranslateText(25031),ToolWebNGTranslateText(25030)); //Credit Card Payment aborted. //You cancelled the credit card transaction before it was completed. Please restart the checkout process.
        goto LShopPaymentByCreditCard;
    end;
  end;
  
  if (GetPaySession(node,WPSr)) then begin
    if (WPSr.Completed!=0) then begin
      RedirectToShoppingBasket;
      goto LShopPaymentByCreditCard;
    end;
    
    BlockLoad(WCb);
    if (WCb.UsePaymentServer==1) then begin
      //ShopPaymentByPaymentServer(WSr,WPSr.UUID); //TODO: move this before GetPaySession to reduce number of DB reads
      RedirectToURL(FormatLink("/WebUpdatingAction.hal","action=paywithpayserver&paysessionid=" & ConvertXml(WPSr.UUID),true,true));
      goto LShopPaymentByCreditCard;
    end;
    
    //TODO: check here if pay session is done or status is set (busy or failed) and then show error page rather than cc pay form
    expirymonth = GetMonth(CurrentDate);
    expiryyear = GetYear(CurrentDate);
    if (true) then begin //TODO: Get from session (for security reasons we might always want to clear the form if an error was input)
      GetCardPaymentSessionVariables(cardfirstname,cardlastname,cardnumber,cardtype,expirymonth,expiryyear);
    end;
    if (blank(cardfirstname) and blank(cardlastname)) then begin
      GetCUPersonFirstLastName(WPSr.CustCode,cardfirstname,cardlastname);
    end;
    
    err = StringToInt(GetSessionString("payment_cc_err"));
    errmsg = GetSessionString("payment_cc_errmsg");
    
    ClearCardPaymentSessionVariables;
    
    if (ReadFirstMain(WSr,1,true)) then begin
      WPr.Code = WSr.WebPage;
      if (ReadFirstMain(WPr,1,true)) then begin end;
    end;
    
    ShowWebAppPageStart(WPr,"");
    
    WebOutStringFormat("<h1>" & ToolWebNGTranslateText(25314) & "</h1>"); //Credit Card Payment
    
    if (err!=0 or nonblank(errmsg)) then begin
      WebOutTagOpen("<div class=""errorbox"">");
      if (nonblank(errmsg) and BitAnd(err,64)==0) then begin
        WebOutStringFormatNL("<p>" & errmsg & "</p>");
      end;
      if (err!=0) then begin
        WebOutStringFormatNL(ToolWebNGTranslateText(25032)); //Some details are required or incorrect:
        WebOutTagOpen("<ul>");
        if (BitAnd(err,1)==1) then begin
          WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25033) & "</li>"); //First Name is required
        end;
        if (BitAnd(err,2)==2) then begin
          WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25034) & "</li>"); //Last Name is required
        end;
        if (BitAnd(err,4)==4) then begin
          WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25035) & "</li>"); //Card Number is required
        end;
        if (BitAnd(err,8)==8) then begin
          WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25036) & "</li>"); //Card Type is required
        end;
        if (BitAnd(err,16)==16) then begin
          WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25037) & "</li>"); //CVC Number is required
        end;
        if (BitAnd(err,32)==32) then begin
          WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25038) & "</li>"); //The expiry date is invalid
        end;
        if (BitAnd(err,64)==64) then begin
          WebOutStringFormatNL("<li>" & errmsg & "</li>");
        end;
        if (BitAnd(err,128)==128) then begin
          WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25058) & "</li>"); //State field is required
        end;                
        WebOutTagClose("</ul>");
      end;
      WebOutTagClose("</div>");
    end;
    
    WebOutStringFormatNL("<h3>" & ToolWebNGTranslateText(25315) & "</h3>"); //Payment details:
    WebOutTagOpen("<div class=""shopcardtotal"">");
    WebOutStringFormat("Total = " & WPSr.InclAmount & " <span>" & WPSr.Currency & "</span>");
    WebOutTagClose("</div>");

    WebOutTagOpen("<form name=""ccpayform"" id=""ccpayform"" method=""POST"" action=""/WebUpdatingAction.hal?action=paywithcreditcard"" onsubmit=""MakeSubmitInactive(this);"">");

    WebOutStringFormatNL("<input type=""hidden"" name=""paysessionid"" value=""" & WPSr.UUID & """>");
    
    WebOutTagOpen("<fieldset class=""shopcardpayment"">");

    WebOutStringFormatNL("<h3>" & ToolWebNGTranslateText(25316) & "</h3>"); //Cardholder details (as printed on card):
    WebOutTagOpen("<div class=""shopcardpayment_row"">");
    WebOutTagOpen("<label for=""cardfirstname"" class=""shopcardpayment_label"">");
    WebOutStringFormatNL(ToolWebNGTranslateText(25200)); //First name:
    WebOutTagClose("</label>");
    WebOutStringFormatNL("<input type=""text"" id=""cardfirstname"" name=""cardfirstname"" class=""shopcardpayment_editbox"" value=""" & cardfirstname & """>");
    WebOutTagClose("</div>");

    WebOutTagOpen("<div class=""shopcardpayment_row"">");
    WebOutTagOpen("<label for=""cardlastname"" class=""shopcardpayment_label"">");
    WebOutStringFormatNL(ToolWebNGTranslateText(25201)); //Last name:
    WebOutTagClose("</label>");
    WebOutStringFormatNL("<input type=""text"" id=""cardlastname"" name=""cardlastname"" class=""shopcardpayment_editbox"" value=""" & cardlastname & """>");
    WebOutTagClose("</div>");

    WebOutStringFormatNL("<h3>" & ToolWebNGTranslateText(25317) & "</h3>"); //Credit card details:
    WebOutTagOpen("<div class=""shopcardpayment_row"">");
    WebOutTagOpen("<label for=""cardnumber"" class=""shopcardpayment_label"">");
    WebOutStringFormatNL(ToolWebNGTranslateText(25202)); //Credit Card Number:
    WebOutTagClose("</label>");
    WebOutStringFormatNL("<input type=""text"" id=""cardnumber"" name=""cardnumber"" class=""shopcardpayment_editbox"" value=""" & cardnumber & """>");
    WebOutTagClose("</div>");

    WebOutTagOpen("<div class=""shopcardpayment_row"">");
    WebOutTagOpen("<label for=""cardtype"" class=""shopcardpayment_label"">");
    WebOutStringFormatNL(ToolWebNGTranslateText(25203)); //Credit Card Type:
    WebOutTagClose("</label>");
    WebOutTagOpen("<select id=""cardtype"" name=""cardtype"" class=""shopcardpayment_cardtype"">");
    WebOutStringFormatNL("<option value="""">" & ToolWebNGTranslateText(25620) & "</option>");
    CCTr.Code = "";
    foundf = true;
    while (LoopMain(CCTr,1,foundf)) begin
      testf = foundf;
      if (blank(CCTr.Code)) then begin testf = false; end;
      if (blank(CCTr.Comment)) then begin testf = false; end;
      if (CCTr.UseOnWeb==0) then begin testf = false; end;
      if (testf) then begin
        if (cardtype==CCTr.Code) then begin
          tstr = " selected";
        end else begin
          tstr = "";
        end;
        WebOutStringFormatNL("<option value=""" & CCTr.Code & """" & tstr & ">" & CCTr.Comment & "</option>");
      end;
    end;
    WebOutTagClose("</select>");
    WebOutTagClose("</div>");
    
    WebOutTagOpen("<div class=""shopcardpayment_row"">");
    WebOutTagOpen("<label for=""expirymonth"" class=""shopcardpayment_label"">");
    WebOutStringFormatNL(ToolWebNGTranslateText(25204)); //Expiry Date (MM/YYYY):
    WebOutTagClose("</label>");
    WebOutTagOpen("<select id=""expirymonth"" name=""expirymonth"" class=""shopcardpayment_combo"">");
    for (i=1;i<=12;i=i+1) begin
      if (expirymonth==i) then begin
        tstr = " selected";
      end else begin
        tstr = "";
      end;
      WebOutStringFormatNL("<option value=""" & i & """ " & tstr & ">" & i & "</option>");
    end;
    WebOutTagClose("</select>");
    
    WebOutStringFormat("/");
    
    WebOutTagOpen("<select id=""expiryyear"" name=""expiryyear"" class=""shopcardpayment_combo"">");
    for (i=GetYear(CurrentDate);i<=GetYear(CurrentDate)+10;i=i+1) begin
      if (expiryyear==i) then begin
        tstr = " selected";
      end else begin
        tstr = "";
      end;
      WebOutStringFormatNL("<option value=""" & i & """ " & tstr & ">" & i & "</option>");
    end;
    WebOutTagClose("</select>");
    WebOutTagClose("</div>");

    WebOutTagOpen("<div class=""shopcardpayment_row"">");
    WebOutTagOpen("<label for=""cardcvc"" class=""shopcardpayment_label"">");
    WebOutStringFormatNL(ToolWebNGTranslateText(25205)); //Verification Code (CVC):
    WebOutTagClose("</label>");
    WebOutStringFormatNL("<input type=""text"" id=""cardcvc"" name=""cardcvc"" class=""shopcardpayment_editbox"">");
    WebOutTagClose("</div>");
    
    WebOutTagClose("</fieldset>");

    WebOutTagOpen("<div class=""shopcardpayment_row_buttons"">");
    WebOutSubmit("s1","shopcardpayment_button","s1",ToolWebNGTranslateText(25516)); //Pay
    WebOutString("<script>function MakeSubmitInactive(form){var tmp = document.getElementById(""s1""); tmp.disabled=""true"";}</script>");
    WebOutTagClose("</div>");
    
    WebOutTagClose("</form>");
    
    WebOutTagOpen("<script type=""text/javascript"">");
    WebOutStringFormatNL("document.ccpayform.cardfirstname.focus();");
    WebOutTagClose("</script>");
    
    ShowWebAppPageEnd(WPr);

  end else begin
    ShowErrorPage(ToolWebNGTranslateText(25000));
  end;
  
LShopPaymentByCreditCard:;
  return;
end;

global
function integer ValidateCreditCardDetails2(string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear,val amount,string currency,var string errmsg,string state,string country,
                                          string city,string email,string street,string phone)
begin
  integer err,res;
  integer em,ey;
  string 255 gotofield,ccissue,countrylist;
  
  err = 0;
  if (blank(cardfirstname)) then begin
    err = err + 1;
  end;
  if (blank(cardlastname)) then begin
    err = err + 2;
  end;
  if (blank(cardnumber)) then begin
    err = err + 4;
  end;
  if (blank(cardtype)) then begin
    err = err + 8;
  end;
  if (blank(cardcvc)) then begin
    err = err + 16;
  end;
  em = StringToInt(expirymonth);
  ey = StringToInt(expiryyear);
  if (ey<GetYear(CurrentDate) or (em<1) or (em>12) or (ey==GetYear(CurrentDate) and em<GetMonth(CurrentDate))) then begin
    err = err + 32;
  end;
  if (nonblank(cardnumber) and nonblank(cardtype)) then begin
    /*res = CheckCreditCardData(1,"",cardnumber,em,ey,cardcvc,cardtype,0,ccissue,"","",gotofield,kCardHolderNotPresent);  //TODO: Connect this (likely reimplement)
    if (res!=0) then begin
      err = err + 64;
      errmsg = USetStr(res);
    end;*/
    if (len(cardnumber)!=16) then begin
      err = err + 64;
      errmsg = ToolWebNGTranslateText(25039); //Cardnumber invalid.
    end;
  end;
  countrylist = "US,CA";  // Comma separated. Country codes in file: hal/WebNG/WebNGSubscriptions.hal
//why customizations in master ? 
  if (nonblank(country) and SetInSet(country,countrylist)) then begin       
     if (blank(state)) then begin 
      err = err + 128;
    end; 
  end;
  ValidateCreditCardDetails2 = err;
  return;
end;


global
function integer ValidateCreditCardDetails(string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear,val amount,string currency,var string errmsg)
begin

  ValidateCreditCardDetails = ValidateCreditCardDetails2(cardfirstname,cardlastname,cardnumber,cardtype,cardcvc,expirymonth,expiryyear,amount,currency,errmsg,"","","","","","");
  return;
end;

global
updating procedure ShopPaymentPayWithCard2(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear,string subscribetosubinpackage)
begin
  record WebNGPaySessionVc WPSr;
  integer err,res;
  string 255 errmsg,redirectURL;

  err = 0;
  if (GetPaySession(paysessionid,WPSr)) then begin
    err = ValidateCreditCardDetails(cardfirstname,cardlastname,cardnumber,cardtype,cardcvc,expirymonth,expiryyear,WPSr.InclAmount,WPSr.Currency,errmsg);
    
    if (err==0) then begin
      err = StartCardPurchaseAsync(paysessionid,cardfirstname,cardlastname,cardnumber,cardtype,cardcvc,StringToInt(expirymonth),StringToInt(expiryyear),errmsg,redirectURL);
      
      if (err==0) then begin
        if (nonblank(redirectURL)) then begin
          RedirectToURL(redirectURL);
        end else begin
          RedirectToShopPage("payment/creditcard/" & paysessionid & "/busy");
        end;
      end else begin
        if (blank(errmsg)) then begin
          errmsg = USetStr(err);
          if (blank(errmsg)) then begin
            errmsg = ToolWebNGTranslateText(25019); //An unknown error occurred during payment
          end;
        end;
      end;
    end;
  end else begin
    errmsg = ToolWebNGTranslateText(25040); //Invalid payment session.
    err = -1;
  end;
  
  if (err!=0) then begin
//    SetCardPaymentSessionVariables("",cardfirstname,cardlastname,cardnumber,cardtype,StringToInt(expirymonth),StringToInt(expiryyear));
    SetCardPaymentSessionVariables(cardfirstname,cardlastname,cardnumber,cardtype,StringToInt(expirymonth),StringToInt(expiryyear));
    PutSessionString("payment_cc_errmsg",errmsg);
    RedirectToShopPage("payment/creditcard/" & paysessionid);
  end;
  
  return;
end;

global
updating procedure ShopPaymentPayWithCard(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear)
begin
  ShopPaymentPayWithCard2(paysessionid,cardfirstname,cardlastname,cardnumber,cardtype,cardcvc,expirymonth,expiryyear,"");
  return;
end;

global
procedure ShowShopPaymentTypes()
begin
  string 255 link,tstr;
  record WebNGShopBlock WSb;
  
  BlockLoad(WSb);
  if (WSb.AllowRequestingQuotes==1) then begin
    link = "";
    //WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    //WebOutStringFormat(" href=""" & link & """>");
    WebOutStringFormat("<input type=""button"" value=""" & ToolWebNGTranslateText(25520) & """>"); //Request Quotation
    //WebOutTagClose("</a>");
  end;
  if (PayMethodSupported("creditcard",tstr,tstr)) then begin
    link = FormatSimpleLink(GetLinkToCheckoutPage & "creditcard",true);
    WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    WebOutStringFormat(" href=""" & link & """>");
    WebOutStringFormat(" <input type=""button"" value=""" & ToolWebNGTranslateText(25521) & """>"); //Pay with Credit Card
    WebOutTagClose("</a>");
  end;
  if (PayMethodSupported("paypal",tstr,tstr)) then begin
    link = FormatSimpleLink(GetLinkToCheckoutPage & "paypal",true);
    WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    WebOutStringFormat(" href=""" & link & """>");
    WebOutStringFormat(" <input type=""button"" value=""" & ToolWebNGTranslateText(25524) & """>"); //Pay with PayPal
    WebOutTagClose("</a>");
  end;
  if (PayMethodSupported("directdebit",tstr,tstr)) then begin
    link = FormatSimpleLink(GetLinkToCheckoutPage & "dirdebit",true);
    WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    WebOutStringFormat(" href=""" & link & """>");
    WebOutStringFormat(" <input type=""button"" value=""" & ToolWebNGTranslateText(25522) & """>"); //Pay with Direct Debit
    WebOutTagClose("</a>");
  end;
  if (PayMethodSupported("order",tstr,tstr)) then begin
    //link = FormatSimpleLink(GetLinkToCheckoutPage & "invoice",true);
    link = FormatLink("/WebUpdatingAction.hal","action=pay&paymethod=order&appid=1",true,true);
    WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    WebOutStringFormat(" href=""" & link & """>");
    WebOutStringFormat(" <input type=""button"" value=""" & ToolWebNGTranslateText(25523) & """>"); //Order on Invoice
    WebOutTagClose("</a>");
  end;
  if (PayMethodSupported("invoice",tstr,tstr)) then begin
    //link = FormatSimpleLink(GetLinkToCheckoutPage & "invoice",true);
    link = FormatLink("/WebUpdatingAction.hal","action=pay&paymethod=invoice&appid=1",true,true);
    WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    WebOutStringFormat(" href=""" & link & """>");
    WebOutStringFormat(" <input type=""button"" value=""" & ToolWebNGTranslateText(25530) & """>"); //Invoice
    WebOutTagClose("</a>");
  end;
  return;
end;

global
updating procedure ShopHandlePaymentFailed(string paysession,Integer errcode)
begin
  record ORVc ORr;
  record WebNGPaySessionVc WPSr;
  record WebNGPaySessionVc oldWPSr;
  
  if (GetPaySession(paysession,WPSr)) then begin
    if (nonblank(WPSr.RecordNr)) then begin
      ORr.SerNr = WPSr.RecordNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        RecordDelete(ORr);
      end;
    end;
    if (errcode == 666) then begin
      RecordDelete(WPSr);
    end else begin
      RecordCopy(oldWPSr,WPSr);
      WPSr.Completed = 1;
      WPSr.CompletedDate = CurrentDate;
      WPSr.Status = errcode;
      WPSr.RecordNr = "";
      if (RecordUpdate(oldWPSr,WPSr,false)) then begin end;
    end;
  end;
  return;
end;

global
procedure ShopPaymentApp(record WebNGStructVc WSr,string path)
begin
  string 255 node,mpath;
  string 255 tstr;
  record WebNGShopBlock WSb;
  
  if (LoginState==false) then begin
    RedirectToShoppingBasket;
  end;
  
  // handles:
  // /checkout/creditcard
  // /checkout/creditcard/step1
  // /checkout/creditcard/step2

  mpath = path;
  node = removenextnode(mpath);
  
  switch (node) begin
    case "order":
      RedirectToURL(FormatLink("/WebUpdatingAction.hal","action=paywithorder&paysessionid=" & removenextnode(mpath),true,true));
      //ShopPaymentByOrder(mpath);
    case "invoice":
      RedirectToURL(FormatLink("/WebUpdatingAction.hal","action=paywithinvoice&paysessionid=" & removenextnode(mpath),true,true));
    case "creditcard":
      ShopPaymentByCreditCard(WSr,mpath);
    case "directdeb":
      PaymentMethodNotSupported;
    case "paypal":
      ShopPaymentByPaypal2(WSr,mpath);
    case "complete":
      tstr = removenextnode(mpath);
      ShopPaymentCompleted(WSr,tstr,StringToLongint(removenextnode(mpath)));
    case "error":
      ShopPaymentError(WSr);
    case "cancel":
      if (IsMarketplaceServer) then begin
        qupdating.CancelMarketplacePayment(mpath);
        ShowRedirectHTML("/subscriptions",WebSecureMode);//hardcoded..
      end else begin
        if (nonblank(GetSessionString("webshop_manual_payment_invoice"))) then begin
          PutSessionString("webshop_manual_payment","");
          PutSessionString("webshop_manual_payment_invoice","");
          ShowRedirectHTML(FormatSimpleLink(GetLinkToMyAccount & "invoices",true),WebSecureMode);
        end else begin
          RedirectToShopPage("basket");
        end;
      end;
    case "notsupported":
      PaymentMethodNotSupported;
    otherwise
      RedirectToShoppingBasket;
  end;
  
LShopCheckoutApp:;
  return;
end;
