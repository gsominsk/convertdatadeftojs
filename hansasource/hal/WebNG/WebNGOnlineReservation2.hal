//tools
external function string 255 removenextnode(var string);
external function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 FormatLink(string,string,boolean,boolean);
external function boolean LoginState();
external function string 10 CurrentWebLang();
external function string 255 FormatSimpleLink(string,boolean);
external procedure GetLoginAndSelectCountryNodes(var longint,var longint);
external procedure RememberRequestURL(string);
//elements
external procedure ShowWebElementTemplate(string,integer);
external procedure ShowWebElement(string);
//pages
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
external procedure ShowWebPage(record WebNGStructVc);
//webng
external procedure RedirectToSubNode(longint,string);
//translation
external function string 255 ToolWebNGTranslateText(integer);
//onlineres
external procedure ShowRoomChoiceLine(longint,string,string,longint,longint,longint,integer,integer,integer,boolean);
//onlinerestools
external function date OnlineResDateFromString(string);
external function string 255 GetClassTermType(string);
external procedure GetCleanMaxGuestValues(var integer,var integer,var integer);
external procedure OnlineResGetTemplates(record WebNGStructVc,integer,var string,var string,integer,var string,var boolean);
external procedure RemoveNewUserFromSession();
external function LongInt GetMotherReservationForSession(string);
external procedure ShowOnlineResValidationErrors(integer,integer);
external function string 255 GetMainCustomerCodeFromContact(string);
external procedure GetNewUserFromSession(var string,var string,var string,var string,var string);
external procedure SimpleElementEditField(string,string,string,string,integer,string,boolean);
external procedure SimpleElementComboBox(string,string,string,string,array string,array string,integer,string,boolean,boolean);
external procedure FillArrayWithCountries(array string,array string,var integer);
external procedure GetCustomerTerms(string,var string,var val,var string);
external function string 255 GetRoomTypeName(string);
external function string 255 GetPackageName(string);
external function string 255 CurrentOnlineResWebSession();
external procedure GetCCDetailsFromSession(var string,var string,var string,var string,var string);
external procedure RemoveCCDetailsFromSession();
external procedure FillArrayWithCreditCards(array string,array string,var integer);
external procedure SimpleElementQtyChooser(string,string,string,string,integer,integer,integer,boolean);
//std
external procedure GetMonthText(string,Date,var string);
remote procedure JobSumup(var record JobVc);
remote function Boolean PasteCUCodeToJob(var record JobVc,Integer);
external function LongInt Do_ReservationsInDayRa(string,string,string,Date,LongInt,Array LongInt,Array LongInt,Time,Time,var LongInt,var LongInt);
external updating function LongInt JobVcRecordUpdateAfter(var record JobVc,record JobVc,LongInt,LongInt);
external function Boolean GetNextCustNr(var string);
external function Date FindDueDateInAccPeriod(Date);
external procedure RedirectToLoginPage();

global
procedure SimpleElementComboBox(string id,string class,string name,string label,array string texts,array string values,integer arrlen,string selvalue,boolean firstblank,boolean enabled)
begin
  string 255 tstr;
  integer i,cnt;
  
  if (nonblank(label)) then begin
    WebOutStringFormatNL("<label class=""" & class & """ for=""" & name & """>" & label & "</label>");
  end;
  
  tstr = "<select";
  if (nonblank(name)) then begin
    tstr = tstr & " name=""" & name & """";
  end;
  if (nonblank(id)) then begin
    tstr = tstr & " id=""" & id & """";
  end;
  if (nonblank(class)) then begin
    tstr = tstr & " class=""" & class & """";
  end;
  if (enabled==false) then begin
    tstr = tstr & " disabled";
  end;
  tstr = tstr & ">";
  
  WebOutTagOpen(tstr);
  
  if (firstblank) then begin
    WebOutTagOpen("<option value="""">");
    WebOutTagClose("</option>");
  end;
  for (i=0;i<arrlen;i=i+1) begin
    if (nonblank(selvalue) and values[i]==selvalue) then begin
      WebOutTagOpen("<option selected value=""" & values[i] & """>");
    end else begin
      WebOutTagOpen("<option value=""" & values[i] & """>");
    end;
    WebOutStringFormat(texts[i]);
    WebOutTagClose("</option>");
  end;
  
  WebOutTagClose("</select>");

  return;
end;

procedure SimpleElementDateDropDown(string id,string class,string name,string label,date selecteddate)
begin
  string 255 tstr;
  integer i,cnt;
  date d;
  
  WebOutStringFormatNL("<input type=""hidden"" name=""splitdate"" value=""" & "1" & """>");

  tstr = "";
  if (nonblank(id)) then begin
    tstr = tstr & " id=""" & id & """";
  end;
  if (nonblank(class)) then begin
    tstr = tstr & " class=""" & class & """";
  end;

  WebOutTagOpen("<div" & tstr & ">");

  WebOutTagOpen("<div class=""calendar_label"">");
  WebOutStringFormat(label);
  WebOutTagClose("</div>");
  
  WebOutTagOpen("<select name=""" & name & "_day" & """ class=""" & name & "_day"">");

  for (i=1;i<=31;i=i+1) begin
    if (i==GetDay(selecteddate)) then begin
      tstr = " selected";
    end else begin
      tstr = "";
    end;
    WebOutTagOpen("<option value=""" & i & """" & tstr & ">");
    WebOutStringFormat(i);
    WebOutTagClose("</option>");
  end;
  
  WebOutTagClose("</select>");

  WebOutTagOpen("<select name=""" & name & "_month" & """ class=""" & name & "_month"">");

  d = selecteddate;
  for (i=1;i<=12;i=i+1) begin
    if (i==GetMonth(selecteddate)) then begin
      tstr = " selected";
    end else begin
      tstr = "";
    end;
    WebOutTagOpen("<option value=""" & i & """" & tstr & ">");
    d.month = i;
    GetMonthText(CurrentWebLang,d,tstr);
    WebOutStringFormat(tstr);
    WebOutTagClose("</option>");
  end;
  
  WebOutTagClose("</select>");

  WebOutTagOpen("<select name=""" & name & "_year" & """ class=""" & name & "_year"">");

  cnt = GetYear(CurrentDate) + 10;
  for (i=GetYear(CurrentDate);i<=cnt;i=i+1) begin
    if (i==GetYear(selecteddate)) then begin
      tstr = " selected";
    end else begin
      tstr = "";
    end;
    WebOutTagOpen("<option value=""" & i & """" & tstr & ">");
    WebOutStringFormat(i);
    WebOutTagClose("</option>");
  end;
  
  WebOutTagClose("</select>");

  WebOutTagClose("</div>");
  return;
end;

global
procedure SimpleElementCalenar(string id,string class,string name,string label,date selecteddate)
begin
  SimpleElementDateDropDown(id,class,name,label,selecteddate);
  return;
end;

global
procedure SimpleElementQtyChooser(string id,string class,string fieldname,string label,integer min,integer max,integer selected,boolean emptydefault)
begin
  integer i;
  string 255 tstr;
  
  if (nonblank(label)) then begin
    WebOutStringFormatNL("<label class=""" & class & """ for=""" & fieldname & """>" & label & "</label>");
  end;
  
  WebOutTagOpen("<select name=""" & fieldname & """>");
  
  if (emptydefault) then begin
    WebOutTagOpen("<option value="""">");
    WebOutTagClose("</option>");
  end;

  for (i=min;i<=max;i=i+1) begin
    if (i==selected) then begin
      tstr = " selected";
    end else begin
      tstr = "";
    end;
    WebOutTagOpen("<option value=""" & i & """" & tstr & ">");
    WebOutStringFormat(i);
    WebOutTagClose("</option>");
  end;
  
  WebOutTagClose("</select>");
  return;
end;

global
procedure SimpleElementEditField(string id,string class,string name,string label,integer length,string value,boolean enabled)
begin
  integer l;
  
  WebOutStringFormatNL("<label class=""" & class & """ for=""" & name & """>" & label & "</label>");

  WebOutStringFormat("<input type=""");
  
  l = length;
  if (l<0) then begin
    l = -l;
    WebOutStringFormat("password""");
  end else begin
    WebOutStringFormat("text""");
  end;
  
  if (nonblank(id)) then begin
    WebOutStringFormat(" id=""" & id & """");
  end;

  if (nonblank(class)) then begin
    WebOutStringFormat(" class=""" & class & """");
  end;

  if (nonblank(name)) then begin
    WebOutStringFormat(" name=""" & name & """");
  end;

  if (nonblank(value)) then begin
    WebOutStringFormat(" value=""" & value & """");
  end;
  
  if (l>0) then begin
    WebOutStringFormat(" size=""" & l & """");
  end;
  
  if (enabled==false) then begin
    WebOutStringFormat(" disabled");
  end;
  
  WebOutStringFormat(">");
  
  
  return;
end;

global
procedure SimpleElementTextField(string id,string class,string name,string label,integer rows,integer cols,record WebNGTranslateVc WTr,boolean enabled)
begin
  string 255 tstr;

  tstr = "";
  if (nonblank(id)) then begin
    tstr = tstr & " id=""" & id & """";
  end;

  if (nonblank(class)) then begin
    tstr = tstr & " class=""" & class & """";
  end;

  WebOutTagOpen("<div" & tstr & ">");
  
  WebOutTagOpen("<div class=""usercomment_heading"">");
  WebOutStringFormat(label);
  WebOutTagClose("</div>");

  tstr = "";
  if (enabled==false) then begin
    tstr = " disabled";
  end;
  
  WebOutTagOpen("<textarea rows=""" & rows & """ cols=""" & cols & """ name=""" & name & """" & tstr & ">");
  
  WebOutText(WTr,false,"");
  
  WebOutTagClose("</textarea>");
  
  WebOutTagClose("</div>");
  
  return;
end;

procedure ShowDaysAvailability(integer dayofmonth,array longint a_avail)
begin
  WebOutTagOpen("<div class=""online_res_calendarday"">");

  WebOutTagOpen("<div class=""online_res_calendardaynumber"">");
  WebOutStringFormat(dayofmonth+1);
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""online_res_calendaravailability"">");
  if (a_avail[dayofmonth]>0) then begin
    WebOutStringFormat("<span class=""availqty"">" & a_avail[dayofmonth] & "</span>");
    WebOutStringFormat("<span class=""availtext""> " & ToolWebNGTranslateText(25757) & "</span>");
  end;
  WebOutTagClose("</div>");
  
  WebOutTagClose("</div>");
  return;
end;

procedure ShowCalendar(string roomtype,date d,array longint a_avail,longint WSSerNr)
begin
  integer startday; //0=sun
  integer monthstartday;
  integer daycnt;
  integer i,x;
  date d2;
  string 255 tstr;
  
  d2 = d;

  d2.day = 1;
  monthstartday = GetDateId(d2);
  monthstartday = mod(monthstartday,7);

  d2 = AddDay(AddMonth(d2,1),-1);
  daycnt = d2.day;
  
  WebOutTagOpen("<table id=""availabilitycalendar"" border=0 cellspacing=0 cellpadding=0>");

  WebOutTagOpen("<tr>");
  WebOutTagOpen("<th class=""calendarmonth"" colspan=""7"">")
  
  WebOutTagOpen("<div class=""calendarprevbtn"">");
  tstr = FormatSimpleLink(GetLinkToStruct(WSSerNr,true) & "availability/" & roomtype & "/" & DateToString(AddMonth(d,-1),"YYYYMM"),true);
  WebOutStringFormat("<a href=""" & tstr & """>" & ToolWebNGTranslateText(25720) & "</a>");
  WebOutTagClose("</div>");
  
  WebOutTagOpen("<div class=""calendarnextbtn"">");
  tstr = FormatSimpleLink(GetLinkToStruct(WSSerNr,true) & "availability/" & roomtype & "/" & DateToString(AddMonth(d,1),"YYYYMM"),true);
  WebOutStringFormat("<a href=""" & tstr & """>" & ToolWebNGTranslateText(25721) & "</a>");
  WebOutTagClose("</div>");

  GetMonthText(CurrentWebLang,d,tstr);
  WebOutStringFormat(tstr & " " & GetYear(d));

  
  WebOutTagClose("</th>");
  WebOutTagClose("</tr>");

  startday = 0;
  WebOutTagOpen("<tr>");
  for (i=0;i<7;i=i+1) begin
    x = startday+i;
    x = mod(x,7);
    switch (x) begin
      case 0: WebOutStringFormatNL("<th>" & ToolWebNGTranslateText(25722) & "</th>");
      case 1: WebOutStringFormatNL("<th>" & ToolWebNGTranslateText(25723) & "</th>");
      case 2: WebOutStringFormatNL("<th>" & ToolWebNGTranslateText(25724) & "</th>");
      case 3: WebOutStringFormatNL("<th>" & ToolWebNGTranslateText(25725) & "</th>");
      case 4: WebOutStringFormatNL("<th>" & ToolWebNGTranslateText(25726) & "</th>");
      case 5: WebOutStringFormatNL("<th>" & ToolWebNGTranslateText(25727) & "</th>");
      case 6: WebOutStringFormatNL("<th>" & ToolWebNGTranslateText(25728) & "</th>");
    end;
  end;
  WebOutTagClose("</tr>");
  WebOutTagOpen("<tr>");
  
  for (i=-monthstartday;i<daycnt+7;i=i+1) begin
    if (i<0 or i>=daycnt) then begin
      WebOutStringFormatNL("<td class=""calendaremptycell"">&nbsp;</td>");
    end else begin
      WebOutTagOpen("<td class=""calendarcell"">");
      ShowDaysAvailability(i,a_avail);
      WebOutTagClose("</td>");
    end;
    if (mod(i+monthstartday+1,7)==0) then begin
      WebOutTagClose("</tr>");
      if (i<daycnt-1) then begin
        WebOutTagOpen("<tr>");
      end else begin
        i = daycnt+7;
      end;
    end;
  end;

  WebOutTagClose("</tr>");

  WebOutTagClose("</table>");
  return;
end;

function Boolean CalculateAvailability(string restype,string location,Date dp,LongInt maxdays,Time chkin,Time chkout,array longint a_avail,var LongInt readrecs,var LongInt usedrec)
begin
  Boolean res;
  LongInt adrStartPos;
  LongInt i;
  Array LongInt ra;
  Array LongInt ra2;
  LongInt m,dummy;
  
  for (i=0;i<maxdays;i=i+1) begin
    ra[i] = 0;
    ra2[i] = 0;
  end;  
  dummy = Do_ReservationsInDayRa(restype,location,"",dp,maxdays,ra,ra2,chkin,chkout,readrecs,usedrec);  
  
  res = true;
  for (i=0;i<maxdays;i=i+1) begin
    m = ra2[i] + ra[i];
    adrStartPos = m;
    if (m<0) then begin
      adrStartPos = -m;
    end;
    a_avail[i] = adrStartPos;
  end;
  CalculateAvailability = res; 
  return;
end;

global
procedure ShowRoomAvailability(record WebNGStructVc WSr,string path)
begin
  record HotelBlock htr;
  string 255 node,mpath;
  record ResTypeVc ResTyper;
  boolean dontshowhead;
  array longint a_avail;
  Time chkin,chkout;
  LongInt readrecs,usedrecs;
  record WebNGPageVc WPr;
  date dp;
  integer maxpax,maxadult,maxchild;
  string 255 templatepage,templateelement,progresselement;
  
  //handles
  // /availability/roomtype/
  // /availability/roomtype/200810/
  
  OnlineResGetTemplates(WSr,kOnlineResAvailability,templatepage,templateelement,0,progresselement,dontshowhead);

  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowWebElementTemplate(templateelement,0); //before

  BlockLoad(htr);

  chkout = htr.CheckOut;
  chkin = htr.CheckIn;
  
  dp = CurrentDate;
  dp.day = 1;
  
  mpath = path;
  node = removenextnode(mpath);
  ResTyper.Code = node;
  if (ReadFirstMain(ResTyper,1,true)) then begin
    node = removenextnode(mpath);
    dp = CurrentDate;
    if (nonblank(node)) then begin
      dp = OnlineResDateFromString(node);
    end;
    dp.day = 1;
    if (CalculateAvailability(ResTyper.Code,ResTyper.ResLoc,dp,31,chkin,chkout,a_avail,readrecs,usedrecs)) then begin end;  
    
    WebOutTagOpen("<ul class=""roomdescription"">");
    maxpax = ResTyper.MaxPax;
    maxadult = ResTyper.MaxPersons;
    maxchild = ResTyper.MaxChildren;
    GetCleanMaxGuestValues(maxpax,maxadult,maxchild);
    ShowRoomChoiceLine(WSr.SerNr,ResTyper.Code,ResTyper.Comment,-1,-1,-1,maxpax,maxadult,maxchild,true);
    WebOutTagClose("</ul>");
    
    ShowCalendar(ResTyper.Code,dp,a_avail,WSr.SerNr);
  end else begin
    WebOutStringFormat(ToolWebNGTranslateText(25729));
  end;

  ShowWebElementTemplate(templateelement,2); //after

  ShowWebAppPageEnd(WPr);
  
LShowRoomAvailability:;
  return;
end;

procedure SummaryOverviewRow(longint WSSerNr,record JobVc Jobr)
begin
  string 255 link;
  val v;
  
  WebOutTagOpen("<tr class=""summarytablerow"">");
          
  WebOutTagOpen("<td class=""summarytabletext"" valign=""top"">");
  WebOutStringFormatNL(GetRoomTypeName(Jobr.Type) & "<br>");
  WebOutStringFormatNL(GetPackageName(Jobr.ResUsage) & "<br>");
  if (blank(Jobr.PLPrice)) then begin v = 0; end else begin v = Jobr.PLPrice; end;
  WebOutStringFormat(Jobr.TransDate & " - " & Jobr.EndDate & " (" & Jobr.NrOfDays & " nights) : " & Jobr.Pax & " guests @ " & v & " (avg)");
  WebOutTagClose("</td>");
  
  WebOutTagOpen("<td class=""summarytablesum"" valign=""top"" align=""right"">");
  if (blank(Jobr.Sum4)) then begin v = 0; end else begin v = Jobr.Sum4; end;
  WebOutStringFormat(v);
  WebOutStringFormat("<br><br>");
  link = FormatLink("/WebUpdatingAction.hal","action=onlinereservation.removereservation&wsnr=" & WSSerNr & "&sernr=" & Jobr.SerNr,true,true);
  WebOutTagOpen("<a href=""" & link & """>");
  WebOutStringFormat("<img style=""border:0px"" src=""/images/cancel.png"" alt=""Remove"">");
  WebOutTagClose("</a>");
  WebOutTagClose("</td>");

  WebOutTagClose("</tr>");
  return;
end;

procedure ShowBookingSummarySection(longint WSSerNr,longint MotherJobSerNr,var val sum,string summaryel)
begin
  record JobVc Jobr,JobMotherr;
  boolean TrHs,foundf;
  string 255 link;

  WebOutTagOpen("<div class=""overviewsection"">");

  WebOutTagOpen("<h3>");
  WebOutStringFormat(ToolWebNGTranslateText(25741));
  WebOutTagClose("</h3>");
  WebOutTagOpen("<div class=""summaryintro"">");
  ShowWebElement(summaryel);
  WebOutTagClose("</div>");    
  
  
  WebOutTagOpen("<table border=""0"" class=""summarytable"" cellspacing=""0"" cellpadding=""0"">");
  sum = 0;
  
  if (MotherJobSerNr!=-1) then begin
    TrHs = true;
    JobMotherr.WebSession = CurrentOnlineResWebSession;
    while (LoopKey("WebSession",JobMotherr,1,TrHs)) begin
      if (JobMotherr.WebSession!=CurrentOnlineResWebSession) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        SummaryOverviewRow(WSSerNr,JobMotherr);
        sum = sum + JobMotherr.Sum4;
        
        foundf = true;
        Jobr.Mother = JobMotherr.SerNr;
        while (LoopKey("MotherKey",Jobr,1,foundf)) begin
          if (Jobr.Mother!=JobMotherr.SerNr) then begin
            foundf = false;
          end;
          if (foundf) then begin
            SummaryOverviewRow(WSSerNr,Jobr);
            sum = sum + Jobr.Sum4;
          end;
        end;
      end;
    end;

    WebOutTagOpen("<tr class=""summarytablerow"">");
        
    WebOutTagOpen("<td class=""summarytabletext"" valign=""top"" align=""right"">");
    WebOutStringFormatNL(ToolWebNGTranslateText(25730));
    WebOutTagClose("</td>");
        
    WebOutTagOpen("<td class=""summarytablesum"" valign=""top"" align=""right"">");
    WebOutStringFormat(sum);
    WebOutTagClose("</td>");

    WebOutTagClose("</tr>");
  end else begin
    WebOutTagOpen("<tr class=""summarytablerow"">");
    WebOutTagOpen("<td class=""summarytabletext"" valign=""top"" align=""left"">");
    WebOutStringFormat(ToolWebNGTranslateText(25731));
    WebOutTagClose("</td>");
    WebOutTagClose("</tr>");
  end;
  WebOutTagClose("</table>");
  
  link = FormatSimpleLink(GetLinkToStruct(WSSerNr,true) & "resort",true);
  WebOutTagOpen("<a href=""" & link & """>");
  if (MotherJobSerNr!=-1) then begin
    WebOutStringFormatNL("<input class=""addbookingbutton"" type=""button"" value=""" & ToolWebNGTranslateText(25732) & """>"); //TODO:
  end else begin
    WebOutStringFormatNL("<input class=""addbookingbutton"" type=""button"" value=""" & ToolWebNGTranslateText(25733) & """>"); //TODO:
  end;
  WebOutTagClose("</a>");

  if (LoginState==false and MotherJobSerNr!=-1) then begin
    link = FormatSimpleLink(GetLinkToStruct(WSSerNr,true) & "register",true);
    WebOutTagOpen("<a href=""" & link & """>");
    WebOutStringFormatNL("<input class=""addbookingbutton"" type=""button"" value=""" & ToolWebNGTranslateText(25734) & """>"); //TODO:
    WebOutTagClose("</a>");
  end;

  WebOutTagClose("</div>"); //overviewsection
  return;
end;

procedure ShowDownpaymentTerms(string downp,val downpprc,val totsum)
begin
  record PDVc PDr;
  date duedate;
  
  if (nonblank(downp) and downpprc>0) then begin
    PDr.Code = downp;
    if (ReadFirstMain(PDr,1,true)) then begin end;
    
    WebOutTagOpen("<p>");
    WebOutStringFormat(ToolWebNGTranslateText(25745) & downpprc & ToolWebNGTranslateText(25746));
    if (totsum>0) then begin
      WebOutStringFormat(" (");
      WebOutStringFormat(downpprc/100*totsum);
      WebOutStringFormat(")");
    end;
    WebOutStringFormat(ToolWebNGTranslateText(25747));
    if (PDr.PDType!=6) then begin
      if (PDr.pdays>0) then begin
        WebOutStringFormat(ToolWebNGTranslateText(25748) & PDr.pdays);
        if (PDr.pdays>1) then begin
          WebOutStringFormat(ToolWebNGTranslateText(25749));
        end else begin
          WebOutStringFormat(ToolWebNGTranslateText(25750));
        end;
      end else begin
        WebOutStringFormat(ToolWebNGTranslateText(25751));
      end;
    end else begin
      duedate = FindDueDateInAccPeriod(CurrentDate);
      if (PDr.pdays>0) then begin
        duedate = AddDay(duedate,PDr.pdays);
      end;
      WebOutStringFormat(ToolWebNGTranslateText(25752) & duedate);
    end;  
    WebOutStringFormat(ToolWebNGTranslateText(25753));
    WebOutTagClose("</p>");
  end;
  return;
end;

procedure ShowCancellationTerms(string cndcode)
begin
  record CNDVc CNDr;
  row CNDVc CNDrw;
  integer i,cnt;
  
  if (nonblank(cndcode)) then begin
    CNDr.Code = cndcode;
    if (ReadFirstMain(CNDr,1,true)) then begin
      cnt = MatRowCnt(CNDr);
      for (i=0;i<cnt;i=i+1) begin
        MatRowGet(CNDr,i,CNDrw);
        if (i==0) then begin
          WebOutTagOpen("<p>");
          WebOutStringFormat(ToolWebNGTranslateText(25791) & CNDrw.Days & ToolWebNGTranslateText(25755));
          WebOutStringFormat((CNDrw.Percentage) & ToolWebNGTranslateText(25756));
          WebOutTagClose("</p>");
        end else begin
          WebOutTagOpen("<p>");
          WebOutStringFormat(ToolWebNGTranslateText(25754) & CNDrw.Days & ToolWebNGTranslateText(25755));
          WebOutStringFormat((CNDrw.Percentage) & ToolWebNGTranslateText(25756));
          WebOutTagClose("</p>");
        end;
      end;
    end;
  end;
  return;
end;

procedure ShowBookingTermsSection(val sum,string bookingel)
begin
  string 255 downp,cndcode;
  val downpprc;

  WebOutTagOpen("<div class=""bookingtermssection"">");
  
  WebOutTagOpen("<h3>");
  WebOutStringFormat(ToolWebNGTranslateText(25742));
  WebOutTagClose("</h3>");
  WebOutTagOpen("<div class=""summaryintro"">");
  ShowWebElement(bookingel);
  WebOutTagClose("</div>");    

  GetCustomerTerms(CurrentCust,downp,downpprc,cndcode);
  if (downpprc>0) then begin
    WebOutTagOpen("<p class=""bookingtermsheading"">");
    WebOutStringFormat(ToolWebNGTranslateText(25743));
    WebOutTagClose("</p>");
  
    ShowDownpaymentTerms(downp,downpprc,sum);

    WebOutTagOpen("<div class=""divider"">");
    WebOutTagClose("</div>");
  end;
  
  WebOutTagOpen("<p class=""bookingtermsheading"">");
  WebOutStringFormat(ToolWebNGTranslateText(25744));
  WebOutTagClose("</p>");

  ShowCancellationTerms(cndcode);
  
  WebOutTagClose("</div>"); //bookingtermssection
end;

procedure ShowUserDetailSection(string id,string class,boolean createuserf)
begin
  record WebNGTranslateVc WTr;
  record CUVc CUr;
  string 255 tstr;
  array string 255 texts,codes;
  integer arrlen;
  boolean enabled;
  string 255 customername,companyname,email,userphone,usercountry;

  tstr = "";
  if (nonblank(id)) then begin
    tstr = tstr & " id=""" & id & """";
  end;
  if (nonblank(class)) then begin
    tstr = tstr & " class=""" & class & """";
  end;
  
  WebOutTagOpen("<div" & tstr & ">");

  WebOutTagOpen("<h3>");
  WebOutStringFormat(ToolWebNGTranslateText(25758));
  WebOutTagClose("</h3>");
  
  if (createuserf) then begin
    ShowOnlineResValidationErrors(kOnlineResRegister,StringToInt(GetSessionString("online_res_error")));
  end;

  WebOutTagOpen("<p>");
  
  tstr = "";
  enabled = true;
  if (createuserf==false) then begin
    CUr.Code = GetMainCustomerCodeFromContact(CurrentCust);
    if (ReadFirstMain(CUr,1,true)) then begin enabled = false; end;
    
    if (enabled) then begin
      GetNewUserFromSession(customername,companyname,email,userphone,usercountry);
    end else begin
      companyname = CUr.Name;
      customername = CUr.Person;
    
      if (CUr.Code!=CurrentCust) then begin
        CUr.Code = CurrentCust;
        if (ReadFirstMain(CUr,1,true)) then begin
          customername = CUr.Name;
        end;
      end;
      
      userphone = CUr.Phone;
      email = CUr.eMail;
      usercountry = CUr.CountryCode;
    end;
  end else begin
    GetNewUserFromSession(customername,companyname,email,userphone,usercountry);
  end;
  SimpleElementEditField("","","customername","Name",15,customername,enabled);
  if (createuserf or enabled==false) then begin
    SimpleElementEditField("","mainline","companyname","Company",30,companyname,enabled);
  end;
  WebOutTagClose("</p>");

  WebOutTagOpen("<p>");
  SimpleElementEditField("","mainline","email","Email",25,email,enabled);
  WebOutTagClose("</p>");

  if (enabled) then begin
    WebOutTagOpen("<p>");
    SimpleElementEditField("","mainline","emailconfirm","Email (confirm)",25,"",enabled);
    WebOutTagClose("</p>");
  end;

  if (createuserf) then begin
    WebOutTagOpen("<p>");
    SimpleElementEditField("","mainline","password","Password",-10,"",enabled);
    SimpleElementEditField("","mainline","passwordconfirm","Password (confirm)",-10,"",enabled);
    WebOutTagClose("</p>");
  end;
  
  WebOutTagOpen("<p>");
  SimpleElementEditField("","mainline","userphone","Phone number",15,userphone,enabled);
  WebOutTagClose("</p>");

  WebOutTagOpen("<p>");
  FillArrayWithCountries(texts,codes,arrlen);
  SimpleElementComboBox("","","usercountry","Country",texts,codes,arrlen,usercountry,true,enabled);
  WebOutTagClose("</p>");

/*  if (createuserf==false) then begin
    WebOutTagOpen("<p>");
    SimpleElementTextField("","","usercomments","Comments",5,60,WTr,true);
    WebOutTagClose("</p>");
  end;*/
  
  WebOutTagClose("</div>"); //userdetailsection
  return;
end;

global
procedure ShowUserPaymentSection(record WebNGStructVc WSr,string mpath)
begin
  array string 255 texts,codes;
  string 255 cctype,ccnumber,ccexpmonth,ccexpyear,ccholder;
  integer arrlen;
  string 255 path,node;
  record WebNGPageVc WPr;
  val sum;
  record CUVc CUr;
  boolean dontshowhead;
  longint MotherJobSerNr;
  string 255 templatepage,templateelement,progresselement;
  record OnlineResBlock OnlineResb;
  
  if (LoginState) then begin
    path = mpath;
    node = removenextnode(path);
    MotherJobSerNr = GetMotherReservationForSession(CurrentOnlineResWebSession);
    OnlineResGetTemplates(WSr,kOnlineResStepSummary,templatepage,templateelement,0,progresselement,dontshowhead);

    WPr.Code = templatepage;
    if (nonblank(WPr.Code)) then begin
      if (ReadFirstMain(WPr,1,true)) then begin end;
    end;

    ShowWebAppPageStart(WPr,"");
    ShowWebElement(progresselement);
    ShowWebElementTemplate(templateelement,0); //before
    
    BlockLoad(OnlineResb);
    WebOutTagOpen("<div class=""userpaymentsection"">");

    WebOutTagOpen("<h3>");
    WebOutStringFormat(ToolWebNGTranslateText(25736));
    WebOutTagClose("</h3>");
    WebOutTagOpen("<div class=""paymentintro"">");
    ShowWebElement(OnlineResb.ElementPayDetails);
    WebOutTagClose("</div>");    
    WebOutTagOpen("<form action='" & FormatLink("/WebUpdatingAction.hal","action=onlinereservation.dobooking&wsnr=" & WSr.SerNr & "&company=" & CurrentCompany,true,true) & "' method='POST'>");
    if (OnlineResb.PayTypeCreditCard==1) then begin
      WebOutTagOpen("<p class=""paymentheading"">");
      WebOutStringFormat(ToolWebNGTranslateText(25737) & "<br>");
      WebOutTagClose("</p>");

      WebOutTagOpen("<div class=""paymentdescription"">");
      ShowWebElement(OnlineResb.InfoElCreditCard);
      WebOutTagClose("</div>");
  
      GetCCDetailsFromSession(cctype,ccnumber,ccexpmonth,ccexpyear,ccholder);
      RemoveCCDetailsFromSession;
  
      if (blank(ccexpmonth) and blank(ccexpyear)) then begin
        ccexpmonth = GetMonth(AddMonth(CurrentDate,1));
        ccexpyear = GetYear(AddMonth(CurrentDate,1));
      end;
      WebOutTagOpen("<p>");
      FillArrayWithCreditCards(texts,codes,arrlen);
      SimpleElementComboBox("","","usercardtype",ToolWebNGTranslateText(25759),texts,codes,arrlen,cctype,true,true);
      WebOutTagClose("</p>");

      WebOutTagOpen("<p>");
      SimpleElementEditField("","","usercardnumber",ToolWebNGTranslateText(25760),30,ccnumber,true);
      SimpleElementQtyChooser("","","usercardexpirymonth",ToolWebNGTranslateText(25761),1,12,StringToInt(ccexpmonth),true);
      SimpleElementQtyChooser("","","usercardexpiryyear","",2008,2018,StringToInt(ccexpyear),true);
      WebOutTagClose("</p>");
      WebOutTagOpen("<p>");
      SimpleElementEditField("","","usercardholder",ToolWebNGTranslateText(25762),20,ccholder,true);
      SimpleElementEditField("","","usercardcvc",ToolWebNGTranslateText(25763),4,"",true);
      WebOutTagClose("</p>");

      WebOutTagOpen("<div class=""confirmpaymentbutton"">");
      WebOutStringFormatNL("<input type=""button"" name=""confirm_cc"" value=""" & ToolWebNGTranslateText(25740) & """ onclick=""alert('" & ToolWebNGTranslateText(25739) & "'); return false;"">"); //TODO:>");//
      WebOutTagClose("</div>");

      WebOutTagOpen("<div class=""divider"">");
      WebOutTagClose("</div>");
    end;
    if (OnlineResb.PayTypeOrder==1) then begin
      WebOutTagOpen("<p class=""paymentheading"">");
      WebOutStringFormat(ToolWebNGTranslateText(25738));
      WebOutTagClose("</p>");
  
      WebOutTagOpen("<div class=""paymentdescription"">");
      ShowWebElement(OnlineResb.InfoElOrder);
      WebOutTagClose("</div>");

      WebOutTagOpen("<div class=""confirmpaymentbutton"">");
      WebOutStringFormatNL("<input type=""submit"" name=""confirm_other"" value=""" & ToolWebNGTranslateText(25740) & """>"); //TODO:
      WebOutTagClose("</div>");
    end;
    WebOutTagClose("</form>");
    WebOutTagClose("</div>"); //userpaymentsection
    ShowWebElementTemplate(templateelement,2); //after
    ShowWebAppPageEnd(WPr);    
  end else begin
    RedirectToLoginPage;
  end;
  return;
end;

global
procedure ShowSummary(record WebNGStructVc WSr)
begin
  string 255 link;
  record WebNGPageVc WPr;
  val sum;
  record CUVc CUr;
  boolean dontshowhead;
  longint MotherJobSerNr;
  string 255 templatepage,templateelement,progresselement;
  string 255 npath;
  record OnlineResBlock OnlineResb;
  
  BlockLoad(OnlineResb);
  MotherJobSerNr = GetMotherReservationForSession(CurrentOnlineResWebSession);
    
  OnlineResGetTemplates(WSr,kOnlineResStepSummary,templatepage,templateelement,0,progresselement,dontshowhead);

  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowWebElement(progresselement);

  ShowWebElementTemplate(templateelement,0); //before

  npath = GetLinkToStruct(WSr.SerNr,true);
  npath = npath & "checkout";
  npath = FormatSimpleLink(npath,true);

  link = npath;
  WebOutTagOpen("<form id=""confirmbooking"" action=""" & link & """ method=""GET"">");
  
  if (dontshowhead==false) then begin
    WebOutTagOpen("<h2>");
    WebOutStringFormat(ToolWebNGTranslateText(25764));
    WebOutTagClose("</h2>");
  end;

//  ShowOnlineResValidationErrors(kOnlineResStepSummary,StringToInt(GetSessionString("online_res_error")));

  ShowBookingSummarySection(WSr.SerNr,MotherJobSerNr,sum,OnlineResb.ElementOverview);
  
  ShowBookingTermsSection(sum,OnlineResb.ElementTerms);

  if (LoginState or MotherJobSerNr!=-1) then begin
    //ShowUserDetailSection("","userdetailsection",false);
  end;

  WebOutStringFormat("<input type='submit' value='" & ToolWebNGTranslateText(25735) & "'>");
    
  WebOutTagClose("</form>");

  ShowWebElementTemplate(templateelement,2); //after

  ShowWebAppPageEnd(WPr);

LShowSummary:;
  return;
end;

global
procedure ShowConfirmation(record WebNGStructVc WSr,string path)
begin
  string 255 node,mpath;
  record WebNGPageVc WPr;
  boolean creditcard,dontshowhead;
  string 255 templatepage,templateelement,progresselement;
  string 255 link;
  record OnlineResBlock OSb;
  
  BlockLoad(OSb);
  creditcard = false;
  mpath = path;
  node = removenextnode(mpath);
  if (node=="creditcard") then begin
    creditcard = true;
    node = removenextnode(mpath);
  end;
  
  node = StripNonDigits(node);
  
  if (blank(node)) then begin
    RedirectToSubNode(WSr.SerNr,"resort");
    goto LShowConfirmation;
  end;
  
  if (creditcard) then begin
    OnlineResGetTemplates(WSr,kOnlineResStepConfirmation,templatepage,templateelement,1,progresselement,dontshowhead);
  end else begin
    OnlineResGetTemplates(WSr,kOnlineResStepConfirmation,templatepage,templateelement,0,progresselement,dontshowhead);
  end;
  
  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowWebElement(progresselement);

  ShowWebElementTemplate(templateelement,0); //before

  WebOutTagOpen("<p>");
  WebOutStringFormat(ToolWebNGTranslateText(25789) & node & ". ");
  if (creditcard==false) then begin
    if (OSb.PayTypeInvoice==1) then begin
      link = FormatLink("/WebUpdatingAction.hal","action=onlinereservation.download_invoice&company=" & CurrentCompany & "&sernr=" & node,true,true);
      WebOutStringFormat("<br><a target=""_blank"" href=""" & link & """>" & ToolWebNGTranslateText(25411) & "</a>"); //Click here to see your invoice
    end else begin
      link = FormatLink("/WebUpdatingAction.hal","action=onlinereservation.download_inquiry&company=" & CurrentCompany & "&sernr=" & node,true,true);
      WebOutStringFormat("<br><a target=""_blank"" href=""" & link & """>" & ToolWebNGTranslateText(25430) & "</a>"); //Click here to see your invoice
    end;
  end;
  WebOutTagClose("</p>");

  WebOutTagClose("</div>");

  ShowWebElementTemplate(templateelement,2); //after

  ShowWebAppPageEnd(WPr);

LShowConfirmation:;
  return;
end;

global
procedure ShowCreateUserForm(record WebNGStructVc WSr,string path)
begin
  string 255 templatepage,templateelement,progresselement;
  boolean dontshowhead;
  record WebNGPageVc WPr;
  string 255 link;
  string 255 mpath;
  longint loginnode,selcountrynode;
  
  OnlineResGetTemplates(WSr,kOnlineResRegister,templatepage,templateelement,0,progresselement,dontshowhead);
  
  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowWebElementTemplate(templateelement,0); //before

  WebOutTagOpen("<div id=""online_reservation"">");
  
  mpath = path;
  link = removenextnode(mpath);

  if (link=="success") then begin
    RemoveNewUserFromSession;
    if (dontshowhead==false) then begin
      WebOutTagOpen("<h2>");
      WebOutStringFormat("New account created");
      WebOutTagClose("</h2>");
    end;

    WebOutTagOpen("<p>");
    WebOutStringFormat("To return to your reservations, please log in with your new account.");
    WebOutTagClose("</p>");

    GetLoginAndSelectCountryNodes(loginnode,selcountrynode);
    if (loginnode>0) then begin
      RememberRequestURL(FormatSimpleLink(GetLinkToStruct(WSr.SerNr,true) & "summary",true));
      WebOutTagOpen("<form method=""GET"" action=""" & FormatSimpleLink(GetLinkToStruct(loginnode,true),true) & """>");
      WebOutStringFormatNL("<input type=""submit"" id=""s1"" name=""s1"" value=""" & "Login"  & """>");
      WebOutTagClose("</form>");
    end;

    goto LCreateUserFormFooter;
  end;
  
  if (dontshowhead==false) then begin
    WebOutTagOpen("<h2>");
    WebOutStringFormat("Create a user account");
    WebOutTagClose("</h2>");

    WebOutTagOpen("<p>");
    WebOutStringFormat("In order to save your basket of reservations, you need to create a user account.");
    WebOutTagClose("</p>");
  end;
  
  link = FormatLink("/WebUpdatingAction.hal","",true,true);
  WebOutTagOpen("<form id=""createuserform"" action=""" & link & """ method=""POST"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""wsnr"" value=""" & WSr.SerNr & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""onlinereservation.createaccount"">");

  ShowUserDetailSection("","createusersection",true);

  WebOutStringFormatNL("<input class=""createuserbutton"" type=""submit"" name=""btnSave"" value=""Create account and save reservations"">");

  WebOutTagClose("</form>");

LCreateUserFormFooter:;
  WebOutTagClose("</div>");

  ShowWebElementTemplate(templateelement,2); //after

  ShowWebAppPageEnd(WPr);
  return;
end;

global
procedure ShowOnlineResDisabled(record WebNGStructVc WSr,string path)
begin
  string 255 templatepage,templateelement,progresselement;
  boolean dontshowhead;
  record WebNGStructVc WS2r;
  
  OnlineResGetTemplates(WSr,kOnlineResDisabled,templatepage,templateelement,0,progresselement,dontshowhead);

  WS2r.WebPage = templatepage;
  ShowWebPage(WS2r);
  return;
end;