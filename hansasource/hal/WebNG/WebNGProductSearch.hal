//tools
external function boolean LoginState();
external function string 10 CurrentWebLang();
external procedure SimpleElementComboBox(string,string,string,string,array string,array string,integer,string,boolean,boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
//shop
external function string 255 GetLinkToShop(); 
external function string 255 FormatSimpleLink(string,boolean); 
external function string 255 removenextnode(var string); 
external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
external procedure ShowCatalogProductRow(record WebNGProductVc,integer,val,boolean);
external procedure ShowProductCatalogHeading(integer,integer);
//elements
external procedure ShowWebElementTemplate(string,integer);
//pages
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//translation
external function string 255 ToolWebNGTranslateText(integer);
external procedure ShowRedirectHtml(string,boolean);

function string 255 LinkToSearchresult()
begin
  string 255 link;
  
  link = GetLinkToShop;
  if (nonblank(link)) then begin
    link = link & "search/";
  end;
  LinkToSearchresult = link;
  return;
end; 

procedure FillArrayWithWebCat(var array string texts,var array string codes,var integer arrlen,Integer maxlen,string maincat,Integer pos,string pspace)
begin
  record WebNGProductCatVc WPCr;
  string 255 ckey,tstr,space;
  boolean foundf;
  
  if (blank(maincat)) then begin
    ckey = "ParentCategory";
  end else begin
    ckey = "ParentCategory2:" & maincat;
  end;
  foundf = true;
  space = pspace;
  if (nonblank(maincat)) then begin
    space = pspace & "&nbsp;&nbsp;";
  end;
  while (LoopKey(ckey,WPCr,1,foundf)) begin
    if (blank(maincat) and nonblank(WPCr.ParentCategory)) then begin
      foundf = false;
    end;
    if (foundf) then begin
      texts[arrlen] = pspace & Left(WPCr.Comment,maxlen);
      codes[arrlen] = WPCr.Code;
      arrlen = arrlen + 1;

      FillArrayWithWebCat(texts,codes,arrlen,maxlen,WPCr.Code,pos+1,space);
    end;
  end;
  return;
end;

procedure ShowDropDown(string type,string label,string fieldname,string value)
begin
  array string 255 texts,codes;
  integer arrlen;

  arrlen = 0;
  switch (type) begin
    case "categories":
      FillArrayWithWebCat(texts,codes,arrlen,30,"",0,"");
      SimpleElementComboBox("labelid","labelclass",fieldname,label,texts,codes,arrlen,value,false,true);
  end;
  return;
end;

global
procedure ShowSearchProductsForm()
begin
  record WebNGSearchBlock WSbl;
  string 255 link;

  BlockLoad(WSbl);
  link = FormatSimpleLink(LinkToSearchresult,true); 
  WebOutTagOpen("<div class=""searchbox"">");
  WebOutTagOpen("<form method=""POST"" action=""" & link & """>");
  WebOutStringFormat("<span class=""searchlabel"">"  & ToolWebNGTranslateText(20143) & "</span>");
  WebOutStringFormat("<input type=""text"" name=""search_str"" value="""" class=""searchfield"" id=""searchstring"" />");
  if (WSbl.SearchInCategory == 0) then begin
    ShowDropDown("categories","","search_catstr",WebGetArg("search_catstr"));
  end;
  WebOutStringFormat("<input class=""button"" name=""Submit"" value=""" & ToolWebNGTranslateText(20067) & """ type=""submit"" />");
  WebOutTagClose("</form>");
  WebOutTagClose("</div>");
  return;
end;

procedure ShowShopCatalogJavaScript()
begin
  WebOutTagOpen("<script type=""text/javascript"">");
  WebOutStringFormatNL("function submitAddToBasket(rownr) {");
  WebOutStringFormatNL("  var elem = document.getElementById('shopproductinfo_addtobasket_' + rownr);");
  WebOutStringFormatNL("  if (elem)");
  WebOutStringFormatNL("    elem.submit();");
  WebOutStringFormatNL("  return false;");
  WebOutStringFormatNL("}");
  WebOutTagClose("</script>");
  return;
end;

procedure GetProductQtysInBasket(var vector val basketqtys)
begin
  record WebNGShopBasketVc WSBr;
  row WebNGShopBasketVc WSBrw;
  integer i,cnt;

  if (GetShoppingBasket(WSBr,0)) then begin
    cnt = MatRowCnt(WSBr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WSBr,i,WSBrw);
      basketqtys[WSBrw.Product] = basketqtys[WSBrw.Product] + WSBrw.Qty;
    end;
  end;
  return;
end;

procedure DisplaySearchResult(string catstr,string searchstr,vector val basketqtys,Integer maxres,record WebNGSearchBlock WS2b,boolean hidepricef,var boolean firstline,var integer i)
begin
  record WebNGProductVc WPr;
  record WebHTMLVc WHr;
  record INVc INr;
  boolean foundf,testf,found2f;
  string 255 ckey,ckey2;
  record WebNGTranslateVc WebNGTranslater;
  row WebNGTranslateVc WebNGTranslaterw;
  integer rwcnt,rw;

  if (nonblank(catstr)) then begin
    ckey = "ProductCategory2:" & catstr;
  end else begin
    ckey = "ProductCategory";
    WPr.ProductCategory = "";
  end;
  foundf = true;
  while (LoopKey(ckey,WPr,1,foundf)) begin
    if (WPr.Closed <> 1) then begin
      RecordNew(WHr);
      if (WS2b.SearchInCode == 1) then begin
        AddToText(WPr.Code,WHr);
      end;
      if (WS2b.SearchInEANCode == 1) then begin
        if (ReadFirstItem(WPr.Code,INr,true,false)) then begin
          AddToText(INr.EUCodex,WHr);
        end;
      end;
      if (WS2b.SearchInName == 1) then begin
        AddToText(WPr.Comment,WHr);
      end;
      if (WS2b.SearchInGroup == 1) then begin
        AddToText(WPr.ProductCategory,WHr);
      end;
      if (WS2b.SearchInDetails == 1) then begin
        ckey2 = "ProductLangCode:" & WPr.Code;
        WebNGTranslater.LangCode = CurrentWebLang;
        WebNGTranslater.Sorting = -1;
        WebNGTranslater.Code = WPr.Code;
        WebNGTranslater.FileName = 2;
        testf = ReadFirstKey(ckey2,WebNGTranslater,4,true);
        if (testf == false) then begin
          WebNGTranslater.LangCode = WPr.DefLangCode;
          WebNGTranslater.Sorting = -1;
          WebNGTranslater.Code = WPr.Code;
          WebNGTranslater.FileName = 2;
          testf = ReadFirstKey(ckey2,WebNGTranslater,4,true);
        end;
        if (testf) then begin
          AddToText(WebNGTranslater.Comment,WHr);
          rwcnt = MatRowCnt(WebNGTranslater);
          for (rw=0;rw<rwcnt;rw=rw+1) begin
            MatRowGet(WebNGTranslater,rw,WebNGTranslaterw);
            AddToText(WebNGTranslaterw.OverviewText,WHr);
          end;
        end;
      end;
      found2f = StringInText(searchstr,WHr);
      if (found2f==false and testf) then begin 
        found2f = StringInText(searchstr,WebNGTranslater);
      end; 
      if (found2f) then begin
        if (firstline) then begin
          firstline = false;
          WebOutTagOpen("<div class=""shopcatalogdiv"">");
          ShowProductCatalogHeading(1,0);
        end;
        i = i + 1;
        ShowCatalogProductRow(WPr,i,basketqtys[WPr.Code],hidepricef);
        if (i>=maxres) then begin
          foundf = false;
        end;
      end;
    end;
  end;
  return;
end; 

procedure List_Searchresult(record WebNGStructVc WSr,string tstr,string catstr)
begin
  record WebNGPageVc WPr;
  record WebNGProductCatVc WPCr;
  integer i,maxres;
  Boolean firstline;
  vector val basketqtys;
  record WebNGShopBlock WSb;
  record WebNGShopCompBlock WSCb;
  record WebNGSearchBlock WS2b;
  boolean hidepricef;
  boolean foundf;
  string 255 ckey;
  
  BlockLoad(WSb);
  BlockLoad(WS2b);
  if (nonblank(WSb.ShopCatalogTemplPage)) then begin
    WPr.Code = WSb.ShopCatalogTemplPage;
  end else begin
    WPr.Code = WSr.WebPage;
  end;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  ShowWebAppPageStart(WPr,"");

  ShowShopCatalogJavaScript;

  if (nonblank(WSb.ShopCatalogTemplElement)) then begin
    ShowWebElementTemplate(WSb.ShopCatalogTemplElement,0); //before
  end;

  if (nonblank(tstr)) then begin
    WebOutStringFormatNL(ToolWebNGTranslateText(20201) & tstr); //Search result for product
  end;
  if (nonblank(catstr)) then begin
    WebOutStringFormatNL(ToolWebNGTranslateText(20203) & catstr); //Search result in category
  end;

  if (nonblank(tstr)) then begin
    GetProductQtysInBasket(basketqtys);
    maxres = 100;
    i = 0;
    firstline = true;

    BlockLoad(WSCb);
    if (WSCb.HidePricesNotLoggedIn!=0) then begin
      if (LoginState==false) then begin
        hidepricef = true;
      end;
    end;

    DisplaySearchResult(catstr,tstr,basketqtys,maxres,WS2b,hidepricef,firstline,i);

    if (nonblank(catstr) and (i<maxres)) then begin
      ckey = "ParentCategory2:" & catstr;
      foundf = true;
      while (LoopKey(ckey,WPCr,1,foundf)) begin
        DisplaySearchResult(WPCr.Code,tstr,basketqtys,maxres,WS2b,hidepricef,firstline,i);
        if (i>=maxres) then begin
          foundf = false;
        end;
      end;
    end;
  end;

  if (firstline==false and nonblank(tstr)) then begin
    WebOutTagClose("</div>");
  end else begin
    if (nonblank(tstr)) then begin
      WebOutStringFormatNL("<br>" & ToolWebNGTranslateText(20202)); //No products found
    end;
  end;
  
  if (nonblank(WSb.ShopCatalogTemplElement)) then begin
    ShowWebElementTemplate(WSb.ShopCatalogTemplElement,2); //after
  end;

  ShowWebAppPageEnd(WPr);
  return;
end; 

global
procedure ShopSearchresultApp(record WebNGStructVc WSr,string path)
begin
  string 255 node,mpath;
  string 255 tstr,catstr;
  
  mpath = path;
  node = removenextnode(mpath);

  tstr = WebGetArg("search_str");
  catstr = WebGetArg("search_catstr");  

  if (blank(tstr)) then begin
    tstr = GetSessionString("webshop_search_str");
  end;
  if (blank(catstr)) then begin
    catstr = GetSessionString("webshop_search_catstr");
  end;
  
  PutSessionString("webshop_search_str",tstr);
  PutSessionString("webshop_search_catstr",catstr);

  if (nonblank(WebGetArg("search_str"))) then begin
    ShowRedirectHTML(WebGetArg("path"),WebSecureMode);
  end;
  
  List_Searchresult(WSr,tstr,catstr);
  return;
end;
