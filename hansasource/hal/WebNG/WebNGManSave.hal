external function Integer GetWeekNr(Date,string,var LongInt);external function val StringToValue(string,Integer,string,string);external function boolean LastPlanExists(var longint);external function LongInt TimeDiffinMinutes(Time,Time);external function Time TimeDiff(Time,Time);external function val TimeToVal2(Time);updating procedure RemoveProdPlanID(longint plan)begin  record ProdPlanRecVc PlanRecr;  boolean TrHs;  PlanRecr.PlanID = plan;  TrHs = true;  while loopkey("PlanID",PlanRecr,1,TrHs) begin    if PlanRecr.PlanID <> plan then begin      TrHs = false;    end else begin      RecordRemove(PlanRecr);      StepBack(PlanRecr);    end;  end;  return;end;function longint GetOperationCnt(longint plan)begin  record ProdPlanRecVc PlanRecr;  longint res;  boolean TrHs;  TrHs = true;  res = 0;  PlanRecr.PlanID = plan;  ResetLoop(PlanRecr);  while loopkey("PlanID",PlanRecr,1,TrHs) begin    if PlanRecr.PlanID <> plan then begin      TrHs = false;    end else begin      res = res + 1;    end;  end;  GetOperationCnt = res;  return;end;function string 255 ConcatXPath(string parent,string child)begin  string 255 res;  res = parent;  if (nonblank(parent)) then begin    res = res & "/";  end;  res = res & child;  ConcatXPath = res;  return;end;updating function boolean CheckForSplitItem(var record ProdPlanRecVc PlanRecr,xml jobs,string node)begin  boolean res;  record ProdOperationVc ProdOpr,nProdOpr,oldProdOpr;  res = false;  if XmlGet(jobs,node) == "1" then begin    if XmlGetAttribute(jobs,node,"first") == "1" then begin      ProdOpr.SerNr = PlanRecr.ProdOpNr;      if readfirstmain(ProdOpr,1,true) then begin        recordCopy(oldProdOpr,ProdOpr);        ProdOpr.Qty = PlanRecr.Qty;        if recordUpdate(oldProdOpr,ProdOpr,true) then begin end;      end;    end else begin      nProdOpr.SerNr = PlanRecr.ProdOpNr;      if readfirstmain(nProdOpr,1,true) then begin        recordCopy(ProdOpr,nProdOpr);        ProdOpr.SerNr = NextSerNr("ProdOperationVc",CurrentDate,-1,false,"");        ProdOpr.Qty = PlanRecr.Qty;        if recordStore(ProdOpr,true) then begin          PlanRecr.ProdOpNr = ProdOpr.SerNr;          res = true;        end;      end;    end;  end;  CheckForSplitItem = res;  return;end;updating procedure UpdatePOFreezeFlag(record ProdPlanRecVc PlanRecr,boolean updatef)begin  record ProdOperationVc ProdOpr,oldProdOpr;  if updatef then begin    ProdOpr.SerNr = PlanRecr.ProdOpNr;    if readfirstmain(ProdOpr,1,true) then begin      recordCopy(oldProdOpr,ProdOpr);      //jzs-combine      /*      ProdOpr.ManualTimeOverride = PlanRecr.FreezeFlag;      if ProdOpr.ManualTimeOverride >0 then begin        ProdOpr.StartDate = PlanRecr.StartDate;        ProdOpr.StartTime = PlanRecr.StartTime;        ProdOpr.ProdDate = PlanRecr.EndDate;        ProdOpr.EndTime = PlanRecr.EndTime;      end;      */            if recordUpdate(oldProdOpr,ProdOpr,true) then begin      end;    end;  end;  return;end;procedure AppendHourLine(var record ProdPlanIDVc ProdPlanr,date sd,date ed,time s1,val e1,time s2,val e2,time s3,val e3,time s4,val e4,time s5,val e5,time s6,val e6,time s7,val e7,string group,string code,integer type,string id)begin  row ProdPlanIDVc ProdPlanrw;  ClearRow(ProdPlanr,ProdPlanrw,1);  ProdPlanrw.FromDate = sd;  ProdPlanrw.ToDate = ed;  ProdPlanrw.MGroup = group;  ProdPlanrw.Machine = code;  ProdPlanrw.MonStart = s1;  ProdPlanrw.MonEnd = e1;  ProdPlanrw.TueStart = s2;  ProdPlanrw.TueEnd = e2;  ProdPlanrw.WedStart = s3;  ProdPlanrw.WedEnd = e3;  ProdPlanrw.ThuStart = s4;  ProdPlanrw.ThuEnd = e4;  ProdPlanrw.FriStart = s5;  ProdPlanrw.FriEnd = e5;  ProdPlanrw.SatStart = s6;  ProdPlanrw.SatEnd = e6;  ProdPlanrw.SunStart = s7;  ProdPlanrw.SunEnd = e7;  ProdPlanrw.Type = type;  ProdPlanrw.recid = id;  MatRowPut(ProdPlanr,MatRowCnt(ProdPlanr),ProdPlanrw);  return;end;procedure FillActivityShifts(var record ProdPlanIDVc ProdPlanr)begin  record ActVc Actr;  record AT2UnitVc AT2r;  boolean Trhs,testf;  integer lenclass;  string 20 acttype;  val dur;  acttype = "";  while loopmain(AT2r,1,true) begin    lenclass = 4;    while (lenclass>=0) begin      ResetLoop(Actr);      Actr.InventoryNr = AT2r.InventoryNr;      Actr.TodoFlag = 0;      Actr.TransDate = CurrentDate;      Actr.LengthClass = lenclass;      TrHs = true;      while (LoopKey("InventoryNr",Actr,4,TrHs)) begin        if (Actr.InventoryNr!=AT2r.InventoryNr) then begin TrHs = false; end;        if (Actr.TodoFlag!=0) then begin TrHs = false; end;        if (Actr.LengthClass!=lenclass) then begin TrHs = false; end;        if (TrHs) then begin          testf = true;          if (Actr.Invalid!=0) then begin testf = false; end;          if (Actr.PrivateFlag!=0) then begin testf = false; end;          if (nonblank(acttype)) then begin            if (Actr.ActType!=acttype) then begin testf = false; end;          end;          //logtext(0,"hmm " & testf & ";" & ";" & Actr.CalTimeFlag & ";" & Actr.Invalid & ";" & Actr.PrivateFlag);          if (testf) then begin            dur = TimeDiffinMinutes(Actr.EndTime,Actr.StartTime)/60;            AppendHourLine(ProdPlanr,Actr.TransDate,Actr.EndDate,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,"",Actr.InventoryNr,2,Actr.SerNr);          end;        end;      end;      lenclass = lenclass - 1;    end;  end;  return;end;globalprocedure LoadShiftInfo(var record ProdPlanIDVc ProdPlanr)begin  record WebPlanDefBlock WPDbl;  record MachineHoursVc MHr;  record BHollVc BHollr;  record MachineGroupsBlock MGBl;  record CYBlock CYBl;  record MachineHoursChangesVc MHCr;  string 20 wgroup;  blockload(WPDbl);  MHr.SerNr = WPDbl.DefaultHours;  if readfirstmain(MHr,1,true)then begin    wgroup = MHr.Code;    AppendHourLine(ProdPlanr,"","",MHr.MonStart,MHr.MonEnd,MHr.TueStart,MHr.TueEnd,MHr.WedStart,MHr.WedEnd,MHr.ThuStart,MHr.ThuEnd,MHr.FriStart,MHr.FriEnd,MHr.SatStart,MHr.SatEnd,MHr.SunStart,MHr.SunEnd,"","",0,MHr.Code);  end;  while loopmain(MHr,1,true) begin    if MHr.Code <> wgroup then begin      AppendHourLine(ProdPlanr,"","",MHr.MonStart,MHr.MonEnd,MHr.TueStart,MHr.TueEnd,MHr.WedStart,MHr.WedEnd,MHr.ThuStart,MHr.ThuEnd,MHr.FriStart,MHr.FriEnd,MHr.SatStart,MHr.SatEnd,MHr.SunStart,MHr.SunEnd,MHr.Code,MHr.InventoryNr,0,MHr.Code);    end;  end;  MHCr.StartDate = ProdPlanr.PlanDate;  while loopkey("StartDate",MHCr,1,true) begin    AppendHourLine(ProdPlanr,MHCr.StartDate,MHCr.EndDate,MHCr.MonStart,MHCr.MonEnd,MHCr.TueStart,MHCr.TueEnd,MHCr.WedStart,MHCr.WedEnd,MHCr.ThuStart,MHCr.ThuEnd,MHCr.FriStart,MHCr.FriEnd,MHCr.SatStart,MHCr.SatEnd,MHCr.SunStart,MHCr.SunEnd,MHCr.Code,MHCr.InventoryNr,1,MHCr.SerNr);  end;  //fill activity data  FillActivityShifts(ProdPlanr);  return;end;procedure ClearPlanRows(var record ProdPlanIDVc ProdPlanr)begin  row ProdPlanIDVc ProdPlanrw;  integer i,rwcnt;  rwcnt = MatRowCnt(ProdPlanr);  for (i = rwcnt; i >=0 ; i = i - 1) begin    MatRowDelete(ProdPlanr,i);  end;  return;end;procedure ReplaceWebStrings(var string tstr,var longint movcnt)begin  integer i,l;    l = len(tstr);  movcnt = 0;  for (i = 0; i < l;i = i + 1) begin    movcnt = movcnt + 1;    if mid(tstr,i,4)=="&lt;" then begin      tstr = left(tstr,i) & "<" & right(tstr,l-i-4);      l = l - 3;      movcnt = movcnt + 3;    end;    if mid(tstr,i,4)=="&gt;" then begin      tstr = left(tstr,i) & ">" & right(tstr,l-i-4);      l = l - 3;      movcnt = movcnt + 3;    end;    if mid(tstr,i,6)=="&apos;" then begin      tstr = left(tstr,i) & "'" & right(tstr,l-i-6);      l = l - 5;      movcnt = movcnt + 5;    end;    if movcnt>220 then begin      tstr = left(tstr,len(tstr)-(255-movcnt));      i = l;    end;  end;return;end;procedure FixAreaWebStrings(var area FileArea)begin  area newArea;  string 255 tstr;  longint asize,pos,movcnt;    SetAreaZeroSize(newArea);  asize = GetAreaLength(FileArea);  pos = 0;  while pos < asize begin    tstr = GetStringFromArea(FileArea,pos,255);    ReplaceWebStrings(tstr,movcnt);    pos = pos + movcnt;    if movcnt==0 then begin      pos = pos + 1;    end;     AddTextToArea(tstr,newArea);  end;  SetAreaZeroSize(FileArea);  InsertAreaBeforeArea(newArea,FileArea);return;end;global webpublicupdating procedure WebSavePlanJob()begin  xml jobs;  area FileArea;  longint pos;  integer jcnt;  string 100 jobpath,childpath,childname,jobname;  integer attrcnt,i,j;  string 255 tstr;  longint plan;  record ProdPlanRecVc PlanRecr;  record ProdPlanIDVc ProdPlanr;  boolean recf;  string 200 weeks;  boolean savef,testf;  longint maxweeknr;  savef = false;  WebGetPostData(FileArea);  FixAreaWebStrings(FileArea);  WriteAreaToFile(FileArea,"test" & CurrentTime & ".txt",0);    jobs = parseXmlArea(FileArea);  if XmlGet(jobs,"sess") == GetSessionString("savesess") then begin    plan = StringToLongInt(getSessionString("plan"));    savef = true;  end else begin    RecordNew(ProdPlanr);    ProdPlanr.SerNr = NextSerNr("ProdPlanIDVc",CurrentDate,-1,false,"");    ProdPlanr.PlanDate = CurrentDate;    ProdPlanr.PlanTime = CurrentTime;    ProdPlanr.Comment = XmlGetAttribute(jobs,"sess","comment");    ProdPlanr.LastChanged = CurrentDate;    ProdPlanr.UserCode = CurrentUser;    LoadShiftInfo(ProdPlanr);    PutSessionString("savesess",XmlGet(jobs,"sess"));    if recordStore(ProdPlanr,true) then begin plan = ProdPlanr.SerNr; end;    PutSessionString("plan",plan);    savef = true;  end;  if (savef and plan > -1) then begin    jcnt = XmlCountChildren(jobs,"jobs");    for (i = 0; i < jcnt; i = i + 1) begin      RecordNew(PlanRecr);      PlanRecr.SerNr = NextSerNr("ProdPlanRecVc",CurrentDate,-1,false,"");      PlanRecr.PlanID = plan;      PlanRecr.MachineID = XmlGet(jobs,"jobs/job[" & i & "]/machine");      PlanRecr.StartDate = StringToDate(XmlGet(jobs,"jobs/job[" & i & "]/real_startdate"));      PlanRecr.EndDate = StringToDate(XmlGet(jobs,"jobs/job[" & i & "]/real_enddate"));      PlanRecr.StartTime = StringToTime(XmlGet(jobs,"jobs/job[" & i & "]/real_starttime"));      PlanRecr.EndTime = StringToTime(XmlGet(jobs,"jobs/job[" & i & "]/real_endtime"));      PlanRecr.ProdOpNr = XmlGet(jobs,"jobs/job[" & i & "]/prodopnr");      PlanRecr.ProdNr = XmlGet(jobs,"jobs/job[" & i & "]/prodnr");      PlanRecr.SetupTime = StringToLongInt(XmlGet(jobs,"jobs/job[" & i & "]/setup"));      PlanRecr.Qty = StringToValue(XmlGet(jobs,"jobs/job[" & i & "]/qty"),M4Val,"",",");      PlanRecr.FreezeFlag = StringToInt(XmlGet(jobs,"jobs/job[" & i & "]/freeze"));      PlanRecr.Dur = StringToLongInt(XmlGet(jobs,"jobs/job[" & i & "]/duration"));      if CheckForSplitItem(PlanRecr,jobs,"jobs/job[" & i & "]/prodop_state") then begin      end;      UpdatePOFreezeFlag(PlanRecr,PlanRecr.FreezeFlag == 1);      if recordStore(PlanRecr,true) then begin end;    end;  end;  return;end;global webpublicupdating procedure WebChangeProdRoute()begin  boolean TrHs;  integer i;  longint sernr;  string 20 route;  record ProdVc Prodr,oldProdr;  TrHs = true;  i = 0;  while TrHs begin    sernr = StringToLongInt(WebGetArg("prod" & i));    if (sernr<0) then begin      TrHs = false;    end else begin      route = WebGetArg("route" & i);      Prodr.SerNr = sernr;      if readfirstmain(Prodr,1,true) then begin        recordCopy(oldProdr,Prodr);        Prodr.Routing = route;        if recordUpdate(oldProdr,Prodr,true) == 0 then begin        end;      end;    end;    i = i + 1;  end;  return;end;global webpublicupdating procedure WebUpdatePlanJob()begin  xml jobs;  area FileArea;  longint pos;  integer jcnt;  string 100 jobpath,childpath,childname,jobname;  integer attrcnt,i,j;  string 255 tstr;  longint plan;  record ProdPlanRecVc PlanRecr,oldPlanRecr;  record ProdPlanIDVc ProdPlanr,oldProdPlanr;  boolean savef,updatef;  record ProdOperationVc ProdOpr;  savef = false;  WebGetPostData(FileArea);  FixAreaWebStrings(FileArea);  jobs = parseXmlArea(FileArea);  if XmlGet(jobs,"sess") == GetSessionString("savesess") then begin    plan = StringToLongInt(getSessionString("plan"));    savef = true;  end else begin    ProdPlanr.SerNr = StringToLongInt(XmlGet(jobs,"plan"));    if readfirstmain(ProdPlanr,1,true) then begin      RecordCopy(oldProdPlanr,ProdPlanr);      ProdPlanr.Comment = XmlGetAttribute(jobs,"sess","comment");      ProdPlanr.LastChanged = CurrentDate;      ClearPlanRows(ProdPlanr);      LoadShiftInfo(ProdPlanr);      if recordUpdate(oldProdPlanr,ProdPlanr,true) then begin end;      savef = true;      plan = ProdPlanr.SerNr;      PutSessionString("savesess",XmlGet(jobs,"sess"));      PutSessionString("plan",plan);    end;  end;  if (savef and plan > -1) then begin    jcnt = XmlCountChildren(jobs,"jobs");    for (i = 0; i < jcnt; i = i + 1) begin      PlanRecr.PlanID = plan;      PlanRecr.ProdOpNr = XmlGet(jobs,"jobs/job[" & i & "]/prodopnr");      ResetLoop(PlanRecr);      if readfirstkey("ProdOpNr",PlanRecr,2,true) then begin        updatef = true;        ProdOpr.SerNr = PlanRecr.ProdOpNr;        if readfirstmain(ProdOpr,1,true) then begin          RecordCopy(oldPlanRecr,PlanRecr);          PlanRecr.MachineID = XmlGet(jobs,"jobs/job[" & i & "]/machine");          PlanRecr.StartDate = StringToDate(XmlGet(jobs,"jobs/job[" & i & "]/real_startdate"));          PlanRecr.EndDate = StringToDate(XmlGet(jobs,"jobs/job[" & i & "]/real_enddate"));          PlanRecr.StartTime = StringToTime(XmlGet(jobs,"jobs/job[" & i & "]/real_starttime"));          PlanRecr.SetupTime = StringToLongInt(XmlGet(jobs,"jobs/job[" & i & "]/setup"));          PlanRecr.EndTime = StringToTime(XmlGet(jobs,"jobs/job[" & i & "]/real_endtime"));          PlanRecr.ProdOpNr = XmlGet(jobs,"jobs/job[" & i & "]/prodopnr");          PlanRecr.FreezeFlag = StringToInt(XmlGet(jobs,"jobs/job[" & i & "]/freeze"));          PlanRecr.Qty = StringToValue(XmlGet(jobs,"jobs/job[" & i & "]/qty"),M4Val,"",",");          if CheckForSplitItem(PlanRecr,jobs,"jobs/job[" & i & "]/prodop_state") then begin            updatef = false;            PlanRecr.SerNr = NextSerNr("ProdPlanRecVc",CurrentDate,-1,false,"");          end;          UpdatePOFreezeFlag(PlanRecr,true);          if updatef then begin            if recordUpdate(oldPlanRecr,PlanRecr,true) then begin  end;          end else begin            if recordStore(PlanRecr,true) then begin end;          end;        end else begin          recordRemove(PlanRecr);        end;      end else begin        RecordNew(PlanRecr);        PlanRecr.PlanID = plan;        PlanRecr.ProdOpNr = StringToLongInt(XmlGet(jobs,"jobs/job[" & i & "]/prodopnr"));        PlanRecr.MachineID = XmlGet(jobs,"jobs/job[" & i & "]/machine");        PlanRecr.ProdNr = StringToLongInt(XmlGet(jobs,"jobs/job[" & i & "]/prodnr"));        PlanRecr.StartDate = StringToDate(XmlGet(jobs,"jobs/job[" & i & "]/real_startdate"));        PlanRecr.EndDate = StringToDate(XmlGet(jobs,"jobs/job[" & i & "]/real_enddate"));        PlanRecr.StartTime = StringToTime(XmlGet(jobs,"jobs/job[" & i & "]/real_starttime"));        PlanRecr.SetupTime = StringToLongInt(XmlGet(jobs,"jobs/job[" & i & "]/setup"));        PlanRecr.EndTime = StringToTime(XmlGet(jobs,"jobs/job[" & i & "]/real_endtime"));        PlanRecr.FreezeFlag = StringToInt(XmlGet(jobs,"jobs/job[" & i & "]/freeze"));        PlanRecr.Qty = StringToValue(XmlGet(jobs,"jobs/job[" & i & "]/qty"),M4Val,"",",");        if CheckForSplitItem(PlanRecr,jobs,"jobs/job[" & i & "]/prodop_state") then begin        end;        PlanRecr.SerNr = NextSerNr("ProdPlanRecVc",CurrentDate,-1,false,"");        UpdatePOFreezeFlag(PlanRecr,true);        if recordStore(PlanRecr,true) then begin end;      end;    end;  end;  return;end;global webpublicupdating procedure WebRemoveProdPlan()begin  record ProdPlanIDVc ProdPlanr;  record ProdPlanRecVc PlanRecr;  longint pi;  boolean TrHs;  if nonblank(CurrentUser) then begin    ProdPlanr.SerNr = StringToLongint(WebGetArg("pi"));    if readfirstmain(ProdPlanr,1,true) then begin      resetloop(PlanRecr);      PlanRecr.PlanID = ProdPlanr.SerNr;      TrHs = true;      while loopkey("PlanID",PlanRecr,1,TrHs) begin        if PlanRecr.PlanID != ProdPlanr.SerNr then begin          TrHs = false;        end else begin          RecordDelete(PlanRecr);          StepBack(PlanRecr);        end;      end;      RecordDelete(ProdPlanr);    end;    if LastPlanExists(pi) begin      WebOutString("<result last='true' plan='" & pi & "'></result>");    end else begin      WebOutString("<result last='false'></result>");    end;  end;  return;end;updating procedure UpdatePlanRec(date sd,date ed,time s1,val e1,time s2,val e2,time s3,val e3,time s4,val e4,time s5,val e5,time s6,val e6,time s7,val e7,string group,string code,integer type,string id)begin  record ProdPlanIDVc ProdPlanr,oldProdPlanr;  ProdPlanr.SerNr = StringToLongInt(WebGetArg("sernr"));  if readfirstmain(ProdPlanr,1,true) then begin    recordCopy(oldProdPlanr,ProdPlanr);    AppendHourLine(ProdPlanr,sd,ed,s1,e1,s2,e2,s3,e3,s4,e4,s5,e5,s6,e6,s7,e7,group,code,type,id);    if recordUpdate(oldProdPlanr,ProdPlanr,true) then begin end;  end;  return;end;updating procedure RemovePlanRow(string id,integer type)begin  record ProdPlanIDVc ProdPlanr,oldProdPlanr;  row ProdPlanIDVc ProdPlanrw;  integer rwcnt,i;  ProdPlanr.SerNr = StringToLongInt(WebGetArg("sernr"));  if readfirstmain(ProdPlanr,1,true) then begin    recordCopy(oldProdPlanr,ProdPlanr);    rwcnt = MatRowCnt(ProdPlanr);    for (i = 0; i < rwcnt;i = i + 1) begin      MatRowGet(ProdPlanr,i,ProdPlanrw);      if ProdPlanrw.Type == type and ProdPlanrw.recid == id then begin        MatRowDelete(ProdPlanr,i);        i = rwcnt;      end;    end;    if recordUpdate(oldProdPlanr,ProdPlanr,true) then begin end;  end;  return;end;global webpublicupdating procedure WebSaveMachineActivity()begin  record ActVc Actr,oldActr;  date sd,ed;  time st,et;  val dur;  record AT2UnitVc AT2r;  if nonblank(CurrentUser) then begin    sd = WebGetArg("sd");    ed = WebGetArg("ed");    st = WebGetArg("st");    dur = StringToVal(WebGetArg("et"),M4Val);    et = WebGetArg("et");    if nonblank(WebGetArg("recid")) then begin      Actr.SerNr = StringToLongInt(WebGetArg("recid"));      if readfirstmain(Actr,1,true) then begin        recordCopy(oldActr,Actr);        Actr.TransDate = sd;        Actr.EndDate = ed;        Actr.StartTime = st;        Actr.EndTime = et;        if Actr.EndTime>Actr.StartTime then begin          Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);          dur = TimeToVal2(Actr.CostTime);//dur = TimeDiffinMinutes(Actr.EndTime,Actr.StartTime)/60;        end else begin          Actr.CostTime = TimeDiff(Actr.EndTime,Actr.StartTime);          dur = -(TimeToVal2(Actr.CostTime));//dur = TimeDiffinMinutes(Actr.EndTime,Actr.StartTime)/60;        end;        if recordUpdate(oldActr,Actr,true)==0 then begin          RemovePlanRow(Actr.SerNr,2);          WebOutString("<div class='result' stat='ok'></div>");          UpdatePlanRec(Actr.TransDate,Actr.EndDate,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,"",Actr.InventoryNr,2,Actr.SerNr);        end;      end;    end else begin      AT2r.InventoryNr = WebGetArg("code");      if readfirstmain(AT2r,1,true) then begin        RecordNew(Actr);        Actr.SerNr = NextSerNr("ActVc",CurrentDate,-1,false,"");        Actr.TransDate = sd;        Actr.EndDate = ed;        Actr.StartTime = st;        Actr.EndTime = et;        Actr.InventoryNr = AT2r.InventoryNr;        Actr.LengthClass = 4;        Actr.MainPersons = CurrentUser;        Actr.CalTimeFlag = 1;        if Actr.EndTime>Actr.StartTime then begin          Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);          dur = TimeToVal2(Actr.CostTime);        end else begin          Actr.CostTime = TimeDiff(Actr.EndTime,Actr.StartTime);          dur = -(TimeToVal2(Actr.CostTime));        end;        if recordStore(Actr,true) then begin          WebOutString("<div class='result' stat='ok' pid='" & Actr.SerNr & "'></div>");          UpdatePlanRec(Actr.TransDate,Actr.EndDate,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,Actr.StartTime,dur,"",Actr.InventoryNr,2,Actr.SerNr);        end;      end;    end;  end;  return;end;global webpublicupdating procedure WebSaveMachineHoursChanges()begin  record MachineHoursChangesVc MHCr,oldMHCr;  date sd,ed;  time s1,s2,s3,s4,s5,s6,s7;  time e1,e2,e3,e4,e5,e6,e7;  val d1,d2,d3,d4,d5,d6,d7;  record AT2UnitVc AT2r;  if nonblank(CurrentUser) then begin    sd = WebGetArg("sd");    ed = WebGetArg("ed");    s1 = WebGetArg("st1");    s2 = WebGetArg("st2");    s3 = WebGetArg("st3");    s4 = WebGetArg("st4");    s5 = WebGetArg("st5");    s6 = WebGetArg("st6");    s7 = WebGetArg("st7");    d1 = StringToVal(WebGetArg("et1"),M4Val);    d2 = StringToVal(WebGetArg("et2"),M4Val);    d3 = StringToVal(WebGetArg("et3"),M4Val);    d4 = StringToVal(WebGetArg("et4"),M4Val);    d5 = StringToVal(WebGetArg("et5"),M4Val);    d6 = StringToVal(WebGetArg("et6"),M4Val);    d7 = StringToVal(WebGetArg("et7"),M4Val);    if nonblank(webgetarg("recid")) then begin      MHCr.SerNr = StringToLongInt(WebGetArg("recid"));      if readfirstmain(MHCr,1,true) then begin        RecordCopy(oldMHCr,MHCr);        MHCr.StartDate = sd;        MHCr.EndDate = ed;        MHCr.MonStart = s1;        MHCr.MonEnd = d1;        MHCr.TueStart = s2;        MHCr.TueEnd = d2;        MHCr.WedStart = s3;        MHCr.WedEnd = d3;        MHCr.ThuStart = s4;        MHCr.ThuEnd = d4;        MHCr.FriStart = s5;        MHCr.FriEnd = d5;        MHCr.SatStart = s6;        MHCr.SatEnd = d6;        MHCr.SunStart = s7;        MHCr.SunEnd = d7;        if recordUpdate(oldMHCr,MHCr,true)== 0 then begin          RemovePlanRow(MHCr.SerNr,1);          UpdatePlanRec(MHCr.StartDate,MHCr.EndDate,s1,d1,s2,d2,s3,d3,s4,d4,s5,d5,s6,d6,s7,d7,"",MHCr.InventoryNr,1,MHCr.SerNr);          WebOutString("<div class='result' stat='ok' pid='" & MHCr.SerNr & "'></div>");        end;      end;    end else begin      AT2r.InventoryNr = WebGetArg("code");      if readfirstmain(AT2r,1,true) then begin        RecordNew(MHCr);        MHCr.SerNr = NextSerNr("MachineHoursChangesVc",CurrentDate,-1,false,"");        MHCr.InventoryNr = AT2r.InventoryNr;        MHCr.StartDate = sd;        MHCr.EndDate = ed;        MHCr.MonStart = s1;        MHCr.MonEnd = d1;        MHCr.TueStart = s2;        MHCr.TueEnd = d2;        MHCr.WedStart = s3;        MHCr.WedEnd = d3;        MHCr.ThuStart = s4;        MHCr.ThuEnd = d4;        MHCr.FriStart = s5;        MHCr.FriEnd = d5;        MHCr.SatStart = s6;        MHCr.SatEnd = d6;        MHCr.SunStart = s7;        MHCr.SunEnd = d7;        if recordStore(MHCr,true) then begin          UpdatePlanRec(MHCr.StartDate,MHCr.EndDate,s1,d1,s2,d2,s3,d3,s4,d4,s5,d5,s6,d6,s7,d7,"",AT2r.InventoryNr,1,MHCr.SerNr);          WebOutString("<div class='result' stat='ok' pid='" & MHCr.SerNr & "'></div>");        end;      end;    end;  end;  return;end;global webpublicupdating procedure WebProdPlanDeleteShift()begin  string 20 code;  integer type;  record MachineHoursChangesVc MHCr;  record ActVc Actr;  if nonblank(CurrentUser) begin    code = WebGetArg("code");    type = StringToInt(WebGetArg("type"));    switch type begin      case 1://hours          MHCr.SerNr = StringToLongInt(code);          if readfirstmain(MHCr,1,true) then begin            recordRemove(MHCr);            RemovePlanRow(code,1);          end;      case 2://activity          Actr.SerNr = StringToLongInt(code);          if readfirstmain(Actr,1,true) then begin            RemovePlanRow(code,2);            recordRemove(Actr);          end;     end;  end;  return;end;