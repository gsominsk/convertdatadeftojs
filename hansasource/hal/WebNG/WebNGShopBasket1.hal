external function roundmode DefaultRoundMode();
//tools
external function string 255 removenextnode(var string);
external function string 255 CurrentWebLang();
external procedure UpdateWebCountry(string);
external function boolean LoginState();
external function string 255 FormatSimpleLink(string,boolean);
external function string 255 FormatLink(string,string,boolean,boolean);
external procedure SetWebNGFieldProduct(string);
external function string 255 FindCountryFromHMCompany();
external function string 255 WebGetDeliveryModeFreight(string);
//elements
external procedure ShowWebElementTemplate(string,integer);
//pages
external procedure ShowWebPage(record WebNGStructVc);
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//shop
external procedure RedirectToShopPageWithArg(string,string);
external procedure RedirectToShoppingBasket();
external procedure RedirectToShopPage(string);
external function string 255 LinkToProductInfo(record WebNGProductVc);
external function string 255 GetItemAvailablity(string,Integer,val,var val);
external function string 255 GetLinkToCheckoutPage();
external function boolean PayMethodSupported(string,var string,var string);
external function Integer GetShowStockLevel();
//shop tools
external function val ShopGetItemPrice(string,val,var val,var string,var string,integer);
external function string 255 GetLinkToShop();
external function integer ShopGetAfterAddingRedirectType(var string);
external function string 255 ShopGetAfterAddingTemplatePage();
external function string 255 GetDefaultWebFreightCode();
external function Boolean BuildWebNGInvoiceFromBasket(var record IVVc,record WebNGShopBasketVc,string,boolean,string,var val);
//download app
external function boolean ProductHasImage(record WebNGProductVc,var string);
//translation
external function string 255 ToolWebNGTranslateText(integer);
external function string 255 GetTranslatedNameProduct(record WebNGProductVc);
//webng
external procedure RedirectToRequestedPage();
//std
external procedure GetBaseCurncy(Integer,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure AddTAX2Base(Boolean,record SMVc,string,val,val,val,Integer,string);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external function val CalcTax2BaseTax2(Boolean,record SMVc,Integer);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function string 255 GetItemVARDescription(string,string);
external procedure GetStockValue(string,string,var record ItemStatusVc);
//contracts
external function string 255 GetUnitText(string,string);
external function Boolean CalcMaintStartEndDate(record COCUServiceVc,record CUServiceVc,string,var Date,var Date,var Date,var val);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function LongInt CUServicePerLength(record CUServiceVc,record COCUServiceVc);
external function val CUServiceFactor(record CUServiceVc,record COCUServiceVc);
external procedure ShowRedirectHtml(string,boolean);

procedure RedirectToProductConfigPage(string product,string qty,integer basketno)
begin
  string 255 args;
  
  if (nonblank(qty)) then begin
    args = "qty=" & qty;
  end;
  if (basketno>0) then begin
    if (nonblank(qty)) then begin
      args = args & "&";
    end;
    args = args & "basketno=" & basketno;
  end;
  RedirectToShopPageWithArg("configureproduct/" & product,args);
  return;
end;

procedure RedirectToProductCatalog()
begin
  RedirectToShopPage("catalog");
  return;
end;

procedure RedirectToBackToProductCatalog()
begin
  string 255 path;
  
  path = GetSessionString("shop_lastcatalogpath");
  if (nonblank(path)) then begin
    if (left(path,1)!="/") then begin
      path = "/" & path;
    end;
    RedirectToShopPage("catalog" & path);
  end else begin
    RedirectToProductCatalog;
  end;
  
  return;
end;

procedure RedirectToPageAfterAddingToBasket(string product)
begin
  record WebNGPageVc WPr;
  integer redirecttype;
  string 20 element;
    
  redirecttype = ShopGetAfterAddingRedirectType(element);
  if (nonblank(element)) then begin
    PutSessionString("display_notification_element",element);
  end;
  
  switch (redirecttype) begin
    case 0: RedirectToShoppingBasket;
    case 1: RedirectToBackToProductCatalog;
    case 2: RedirectToRequestedPage;
    case 3: RedirectToShopPage("justadded/" & product);
    otherwise
      RedirectToShoppingBasket;
  end;
  return;
end;

global
updating procedure CreateBasketFromProductRegistration(string custcode,string enabregno,string usercode,string prog_lang,string company)
begin
  record COCUServiceVc COCUServicer;
  record CUServiceVc CUServicer;
  row CUServiceVc CUServicerw;
  record CUServiceHistVc CUServiceHistr;
  record CUServiceHistVc maintCUServiceHistr;
  record WebNGShopBasketVc oldWSBr,WSBr;
  row WebNGShopBasketVc WSBrw;
  record CCatVc CCatr;
  row ORVc ORrw;
  record INVc INr;
  Boolean foundf,testf;
  Boolean foundf2,testf2;
  val rowsum,s,t,sum,tax2prc;
  val fr,to1,to2,br1,br2;
  record GeneralOptionBlock GenOptRec;
  record SysFormatBlock SysFormatRec;
  string 255 tstr;
  Integer i,rwcnt,cnt;
  Date sd,ed,actualed;
  val PackageQty;
  boolean updateexistingf,rowschangedf;
  string 255 country,vatcode;

  rowschangedf = false;
  BlockLoad(SysFormatRec);
  BlockLoad(GenOptRec);

  WSBr.CustCode = custcode;
  WSBr.CompanyNr = StringToInt(company);
  WSBr.BasketNo = 0;
  if (ReadFirstMain(WSBr,3,true)) then begin
    updateexistingf = true;
    RecordCopy(oldWSBr,WSBr);
    cnt = MatRowCnt(WSBr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WSBr,i,WSBrw);
      if (WSBrw.CUServiceHistNr>0) then begin 
        MatRowDelete(WSBr,i); 
        i=i-1; 
        cnt=cnt-1; 
        rowschangedf = true; 
      end;
    end;
  end else begin
    updateexistingf = false;
    RecordNew(WSBr);
    WSBr.CustCode = custcode;
    WSBr.CompanyNr = StringToInt(company);
    WSBr.BasketNo = 0;
    //TODO: lookup and set currency
  end;

  CUServicer.CustCode = custcode;
  foundf = true;
  while (LoopKey("CustCode",CUServicer,1,foundf)) begin
    if (CUServicer.CustCode!=custcode) then begin foundf = false; end;
    testf = foundf;
    if (CUServicer.Closed!=0) then begin testf = false; end;
    COCUServicer.SerNr = CUServicer.COCUServiceNr;
    if (ReadFirstMain(COCUServicer,1,true)==false) then begin
      testf = false;
    end;
    if (testf) then begin
      PackageQty = CUServicer.PackageQty;
      if (PackageQty<=0) then begin
        PackageQty = 1;
      end;
      foundf2 = true;
      ResetLoop(CUServiceHistr);
      CUServiceHistr.CUServiceNr = CUServicer.SerNr;
      CUServiceHistr.COCUServiceNr = CUServicer.COCUServiceNr;
      CUServiceHistr.NextSer = -1;
      CUServiceHistr.Type = 0;
      while (LoopKey("COCUArtCode",CUServiceHistr,4,foundf2)) begin
        if (CUServiceHistr.CUServiceNr!=CUServicer.SerNr) then begin foundf2 = false; end;
        if (CUServiceHistr.COCUServiceNr!=CUServicer.COCUServiceNr) then begin foundf2 = false; end;
        if (CUServiceHistr.NextSer>0) then begin foundf2 = false; end;
        if (CUServiceHistr.Type!=0) then begin foundf2 = false; end;
        testf2 = foundf2;
        INr.Code = CUServiceHistr.ArtCode;
        if (ReadFirstMain(INr,1,true)==false) then begin testf2 = false; end;
        if (testf2) then begin
          ClearRow(WSBr,WSBrw,1);
          WSBrw.Product = CUServiceHistr.ArtCode;
          WSBrw.Comment = "";
          if (CUServiceHistr.Qty>1) then begin
            WSBrw.Comment = WSBrw.Comment & " " & ValToString(CUServiceHistr.Qty,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,0) & " " & GetUnitText(INr.Unittext,CurrentWebLang);
          end;
          WSBrw.CUServiceHistNr = CUServiceHistr.SerNr;
          if (nonblankdate(CUServiceHistr.UntilDate)) then begin
            WSBrw.PeriodStartDate = CUServiceHistr.UntilDate;
            WSBrw.CUServiceValidUntil = CUServiceHistr.UntilDate;
            WSBrw.Comment = WSBrw.Comment & "&nbsp;&nbsp;&nbsp;" & ToolWebNGTranslateText(20150) & " " & WSBrw.CUServiceValidUntil;
          end;
          WSBrw.Qty = 1;
          WSBrw.Price = CUServiceHistr.Sum; // CUServiceHistr.Qty * CUServiceHistr.Price;
          
          GetItemVATCode(WSBrw.Product,0,vatcode,true);
          WSBrw.VATCode = vatcode;
          
          MatRowPut(WSBr,MatRowCnt(WSBr),WSBrw);
          rowschangedf = true;
          if (CUServiceHistr.ChargeFor==0) then begin
            RecordCopy(maintCUServiceHistr,CUServiceHistr);
            maintCUServiceHistr.ChargeFor = 1;
            if (ReadFirstKey("CUServicePaidUntil",maintCUServiceHistr,4,true)==false) then begin
              rwcnt = MatRowCnt(CUServicer);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CUServicer,i,CUServicerw);
                INr.Code = CUServicerw.ArtCode;
                if (ReadFirstMain(INr,1,true)==false) then begin testf2 = false; end;
                ClearRow(WSBr,WSBrw,i);
                WSBrw.Product = CUServicerw.ArtCode;
                WSBrw.Comment = "";
                if (CalcMaintStartEndDate(COCUServicer,CUServicer,WSBrw.Product,sd,ed,actualed,PackageQty)) then begin
                end;
                if (CUServicerw.InvoiceQty>1) then begin
                  WSBrw.Comment = WSBrw.Comment & " " & ValToString(CUServicerw.InvoiceQty*PackageQty,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,0) & " " & GetUnitText(INr.Unittext,CurrentWebLang);
                end;
                if (CUServicer.MaintOptional!=0) then begin
                  WSBrw.Comment = WSBrw.Comment & " " & ToolWebNGTranslateText(20184);
                end;
                if (nonblankdate(ed)) then begin
                  WSBrw.Comment = "&nbsp;&nbsp;&nbsp;" & ToolWebNGTranslateText(20150) & " " & ed;
                end;
                WSBrw.Qty = 1;
                if (CUServiceFactor(CUServicer,COCUServicer)!=0) then begin
                  WSBrw.Qty = WSBrw.Qty * CUServiceFactor(CUServicer,COCUServicer);
                end;
                WSBrw.Discount = CUServicerw.vRebate;
                //ShopBaskr.Objects = CUServicerw.Objects; //TODO ???
                WSBrw.Price = CUServicerw.InvoiceQty * CUServicerw.Price;
                
                GetItemVATCode(WSBrw.Product,0,vatcode,true);
                WSBrw.VATCode = vatcode;
                
                WSBrw.CUServiceHistNr = CUServiceHistr.SerNr;
                WSBrw.PeriodStartDate = ed;
                WSBrw.CUServiceValidUntil = ed;
                MatRowPut(WSBr,MatRowCnt(WSBr),WSBrw);
                rowschangedf = true;
              end;
            end;
          end;
        end;
      end;
    end;
  end;  
  if (rowschangedf) then begin
    if (updateexistingf) then begin
      if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
    end else begin
      if (RecordStore(WSBr,true)) then begin end;
    end;
  end;
  
  country = FindCountryFromHMCompany; //TODO: rather pass in the company number, even though we should be in the correct one.
  if (nonblank(country)) then begin
    UpdateWebCountry(country);
  end;
  
  RedirectToShoppingBasket;
  return;
end;

procedure CreateShoppingBasket(var record WebNGShopBasketVc WSBr,integer basketno)
begin
  integer b;

  b = basketno;
  if (b<0) then begin
    b = 0;
  end;

  RecordNew(WSBr);
  
  if (LoginState) then begin
    WSBr.CompanyNr = CurrentCompany;
    WSBr.CustCode = CurrentCust;
    WSBr.BasketNo = b;
    WSBr.SessionID = "";
  end else begin
    WSBr.SessionID = GetWebSessionUUID;
  end;
  
  return;
end;

global
function boolean GetShoppingBasket(var record WebNGShopBasketVc WSBr,integer basketno)
begin
//only to be used in WEB code
  Boolean res;
  Integer keylen;
  Integer b;
  b = basketno;
  if (b<0) then begin
    b = 0;
  end;

  res = false;
  if (LoginState) then begin
    WSBr.CompanyNr = CurrentCompany;
    WSBr.CustCode = CurrentCust;
    WSBr.BasketNo = b;
    WSBr.SessionID = "";
    keylen = 4;
  end else begin
    WSBr.SessionID = GetWebSessionUUID;
    keylen = 4;
  end;
  
  if (ReadFirstMain(WSBr,keylen,true)) then begin
    res = true;
  end;

  GetShoppingBasket = res;
  return;
end;

function val CalculateBasketFreight(record WebNGShopBasketVc WSBr,var string FreightVATCode)
begin
  record GeneralOptionBlock GenOptRec;
  row WebNGShopBasketVc WSBrw;
  record WebFreightVc WFr;
  row WebFreightVc WFrw;
  record CUVc CUr;
  record INVc INr;
  integer i,cnt;
  boolean frf;
  val totalweight,rowsum,res;
  val freightitemprice,reb;
  string 255 vatcode,custcurrency;
  record DelAddrVc DelAddrr;
  record CountryVc Countryr;
  record DMVc DMr;
  
  res = 0;
  frf = false;
  
  CUr.Code = CurrentCust;
  if (nonblank(CUr.Code)) then begin
    ReadFirstMain(CUr,1,true);
  end;
  switch (WSBr.DelAddrCode) begin
    case "": // delivery address not selected yet
      if (nonblank(CUr.DelAddr0)) then begin
        if (nonblank(CUr.DelCountry)) then begin
          Countryr.Code = CUr.DelCountry;
          if (ReadFirstMain(Countryr,1,true)) then begin
            WFr.Code = Countryr.FreightCode;
          end;
        end;
      end else begin
        if (nonblank(CUr.CountryCode)) then begin
          Countryr.Code = CUr.CountryCode;
          if (ReadFirstMain(Countryr,1,true)) then begin
            WFr.Code = Countryr.FreightCode;
          end;
        end;
      end;
    case ";deladdr":
      if (nonblank(CUr.DelCountry)) then begin
        Countryr.Code = CUr.DelCountry;
        if (ReadFirstMain(Countryr,1,true)) then begin
          WFr.Code = Countryr.FreightCode;
        end;
      end;
    case ";invaddr":
      if (nonblank(CUr.CountryCode)) then begin
        Countryr.Code = CUr.CountryCode;
        if (ReadFirstMain(Countryr,1,true)) then begin
          WFr.Code = Countryr.FreightCode;
        end;
      end;
    otherwise
      DelAddrr.DelCode = WSBr.DelAddrCode;
      DelAddrr.CustCode = CurrentCust;
      if (ReadFirstMain(DelAddrr,2,true)) then begin
        WFr.Code = DelAddrr.FreightCode;
      end;
  end;
  if (blank(WFr.Code)) then begin
    WFr.Code = CUr.FreightCode;
  end;
  if (blank(WFr.Code)) then begin
    WFr.Code = GetDefaultWebFreightCode;
  end;
  if (nonblank(WSBr.DelMode)) then begin 
    DMr.Code = WSBr.DelMode;
    if (ReadFirstMain(DMr,1,true)) then begin 
      WFr.Code = DMr.FreightCode;
    end;
  end else begin 
    WFr.Code = WebGetDeliveryModeFreight(WFr.Code);
  end;  
  frf = ReadFirstMain(WFr,1,true);

  if (frf) then begin
    BlockLoad(GenOptRec);
    totalweight = 0;
    
    cnt = MatRowCnt(WSBr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WSBr,i,WSBrw);
      
      INr.Code = WSBrw.Product;
      if (ReadFirstMain(INr,1,true)) then begin
        switch (WFr.BasedOn) begin
          case 0: totalweight = totalweight + WSBrw.Qty*INr.Volume;
          case 1: totalweight = totalweight + WSBrw.Qty*INr.Weight;
          case 2: 
            if (INr.Volume>INr.Weight) then begin
              totalweight = totalweight + WSBrw.Qty*INr.Volume;
            end else begin
              totalweight = totalweight + WSBrw.Qty*INr.Weight;
            end;
          case 3: totalweight = totalweight + WSBrw.Qty;
          case 4: CalcSum(WSBrw.Qty,WSBrw.Price,0,WSBrw.Discount,rowsum,GenOptRec.UseDiscount); totalweight = totalweight + rowsum;
        end;
      end;
    end;
    
    freightitemprice = ShopGetItemPrice(WFr.ItemCode,1,reb,FreightVATCode,custcurrency,0);
        
    cnt = MatRowCnt(WFr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WFr,i,WFrw);
      if (totalweight>=WFrw.FromVal) then begin
        MatRowGet(WFr,i+1,WFrw);
        if (nonblank(WFrw.FromVal) and (totalweight>=WFrw.FromVal)) then begin
          goto nextline;
        end else begin
          MatRowGet(WFr,i,WFrw);;
          res = StringToVal(WFrw.Rate,M4Val);
          goto exwfr;  
        end;
      end else begin
        res = WFr.MinValue;
        goto exwfr;  
      end;
      nextline:;
    end;
exwfr:;
    if (cnt==0) then begin
      res = WFr.MinValue;
    end;
    //TODO: Convert to customer currency
    
  end;

  CalculateBasketFreight = res;
  return;
end;

procedure GetCustVATTAXSettings(var integer inclvat,var integer notaxonvat,var integer exportflag,var integer totalwotax)
begin
  record AccBlock Accb;
  record CUVc CUr;
  string 255 pricelist;
  Date blankd;
  Time blankt;
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  exportflag = CUr.ExportFlag;
  
  pricelist = CUr.PLCode;
  GetPriceList(CUr.CustCat,blankd,blankt,pricelist,inclvat);
  
  BlockLoad(Accb);
  notaxonvat = Accb.NoTAXonVAT;
  totalwotax = Accb.TotalwoTAX;

  return;
end;

global
procedure SumUpShopBasket(var record WebNGShopBasketVc WSBr)
begin
  record GeneralOptionBlock GenOptRec;
  row WebNGShopBasketVc WSBrw;
  val rowsum,subtotal;
  val tax1sum,tax2sum,ttax1sum,taxvat;
  val tax1reb,tax2reb,tax2prc;
  string 255 tax2code;
  Integer i,cnt;
  roundmode roundlines,rndtotal,rndvat;
  record SMVc SMr,SMTax2r;
  Integer vatcnt;  
  integer inclvat,notaxonvat,exportflag,totalwotax;
  val vat,total,freight,months;
  string 255 FreightVATCode;
  record INVc INr;
  
  vat = 0;
  total = 0;
  freight = 0;
  subtotal = 0;
  
  BlockLoad(GenOptRec);

  GetCustVATTAXSettings(inclvat,notaxonvat,exportflag,totalwotax);
  SetupVATBase(SMr,vatcnt);

  cnt = MatRowCnt(WSBr);
  for (i = 0;i<cnt;i=i+1) begin
    MatRowGet(WSBr,i,WSBrw);
    months = WSBrw.Months;
    if (months<=0) then begin
      months = 1;
    end;
    CalcSum(WSBrw.Qty*months,WSBrw.Price,0,WSBrw.Discount,rowsum,GenOptRec.UseDiscount);
    subtotal = subtotal + rowsum;
    tax1reb = 0; tax2reb = 0; tax2prc = 0; tax2code = "";   //TODO: find tax1reb, tax2reb, tax2prc, tax2code
    AddVATBase(SMr,WSBrw.VATCode,rowsum,tax1reb,vatcnt,inclvat,notaxonvat);
    AddTAX2Base(false,SMTax2r,tax2code,tax2prc,tax2reb,rowsum,inclvat,WSBrw.VATCode);       
  end;
  
  freight = CalculateBasketFreight(WSBr,FreightVATCode);
  if (freight>0) then begin
  //  subtotal = subtotal + freight;
    tax1reb = 0; tax2reb = 0; tax2prc = 0; tax2code = "";   //TODO: find tax1reb, tax2reb, tax2prc, tax2code
    AddVATBase(SMr,FreightVATCode,freight,tax1reb,vatcnt,inclvat,notaxonvat);
    AddTAX2Base(false,SMTax2r,tax2code,tax2prc,tax2reb,freight,inclvat,FreightVATCode);
  end;

  CalcVATBaseVAT(SMr,inclvat,notaxonvat,vatcnt,vat,tax1sum);

  tax2sum = CalcTax2BaseTax2(false,SMTax2r,inclvat);

  GetCurncyRoundoff(WSBr.CurrencyCode,"","WebNGShopBasketVc",rndtotal,roundlines,rndvat);

  if (exportflag==1 or exportflag==2) then begin
    if (inclvat>0) then begin
      total = subtotal + freight - vat;
    end else begin
      total = subtotal + freight;
    end;  
    vat = blankval;
  end else begin
    if (inclvat>0) then begin
      total = subtotal + freight;
    end else begin
      total = subtotal + freight + vat;
    end;  

    if (totalwotax==0) then begin
      total = total + tax1sum;
    end;

    if (inclvat==2 and notaxonvat==2) begin
      CalcVATBaseVAT(SMr,inclvat,1,vatcnt,taxvat,ttax1sum);  
      total = total + vat - taxvat;
    end;
  end;

  total = Round(total,rndtotal);
  total = total + Round(tax2sum,DefaultRoundMode);

  subtotal = Round(subtotal,rndtotal);
  tax1sum = Round(tax1sum,DefaultRoundMode);
  vat = Round(vat,rndvat);
  total = Round(total,rndtotal);

  WSBr.Freight = freight;
  if (blank(WSBr.Freight)) then begin WSBr.Freight = 0; end;
  
  WSBr.TAX1Sum = tax1sum;
  if (blank(WSBr.TAX1Sum)) then begin WSBr.TAX1Sum = 0; end;

  WSBr.VAT = vat;
  if (blank(WSBr.VAT)) then begin WSBr.VAT = 0; end;
  
  WSBr.Sum = total;
  if (blank(WSBr.Sum)) then begin WSBr.Sum = 0; end;

  return;
end;

procedure InsertNewBasketRow(var record WebNGShopBasketVc WSBr,row WebNGShopBasketVc WSBrw)
begin
  row WebNGShopBasketVc WSB2rw;
  integer i,rwcnt;
  Boolean foundf;
  record AltINVc AltINr;
  record CrossINVc CINr;
  string 20 groupin;
  Boolean altf;
  
  altf = false;
  AltINr.AltItemCode = WSBrw.Product;
  if (ReadFirstKey("AltItemCode",AltINr,1,true)) then begin
    altf = true;
    groupin = AltINr.ItemCode;
  end else begin
    CINr.CrossItemCode = WSBrw.Product;
    if (ReadFirstKey("CrossItemCode",CINr,1,true)) then begin
      altf = true;
      groupin = CINr.ItemCode;
    end;
  end;
  if (altf) then begin
    rwcnt = MatRowCnt(WSBr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WSBr,i,WSB2rw);
      if (WSB2rw.Product==groupin) then begin
        MatRowInsert(WSBr,i+1,WSBrw);
        i = rwcnt;
        foundf = true;
      end;
    end;
  end;
  if (!foundf) then begin
    MatRowInsert(WSBr,0,WSBrw);
  end;

  return;
end;

global
updating function Integer AddProductToBasket(string product,val qty,Integer basketno)
begin
  Integer res;
  record WebNGShopBasketVc oldWSBr,WSBr;
  row WebNGShopBasketVc WSBrw;
  boolean updatef;
  boolean foundf;
  Integer b;
  integer i,cnt;
  integer rownr;
  string 255 custcurrency,vatcode,tstr;
  val reb;
  
  if (qty>0) then begin
    foundf = false;
    if (GetShoppingBasket(WSBr,basketno)) then begin
      RecordCopy(oldWSBr,WSBr);
      
      cnt = MatRowCnt(WSBr);
      for (i=0;i<cnt;i=i+1) begin
        MatRowGet(WSBr,i,WSBrw);
        if (WSBrw.Product==product) then begin
          foundf = true;
          rownr = i;
          i = cnt;
        end;
      end;
      
      if (foundf==false) then begin
        ClearRow(WSBr,WSBrw,1);
      end else begin
      end;
      updatef = true;
    end else begin
      updatef = false;
      CreateShoppingBasket(WSBr,basketno);
      ClearRow(WSBr,WSBrw,1);
      rownr = 0;
    end;

    WSBrw.Product = product;
    if (WSBrw.QtyType==1) then begin
      WSBrw.PalletQty = WSBrw.PalletQty + qty;
    end else begin
      WSBrw.Qty = WSBrw.Qty + qty;
    end;
    WSBrw.Price = ShopGetItemPrice(product,WSBrw.Qty,reb,vatcode,custcurrency,0);
    WSBrw.Discount = reb;
    WSBrw.VATCode = vatcode;
    WSBrw.DateAdded = CurrentDate;
    WSBrw.TimeAdded = CurrentTime;
    
    if (blank(custcurrency)) then begin
      GetBaseCurncy(1,custcurrency);
    end;
    
    if (updatef) then begin
      if (custcurrency!=WSBr.CurrencyCode) then begin
        if (nonblank(WSBr.CustCode)) then begin
          tstr = " - Customer: " & WSBr.CustCode & " (Company = " & WSBr.CompanyNr & ")";
        end;
        LogText(0,"WebShopNG: Cannot mix currencies in shopping basket" & tstr);
        goto LAddProductToBasket;
      end;
    end else begin
      WSBr.CurrencyCode = custcurrency;
    end;

    if (updatef and foundf==false) then begin
      InsertNewBasketRow(WSBr,WSBrw);
    end else begin
      MatRowPut(WSBr,rownr,WSBrw);
    end;
    
    SumUpShopBasket(WSBr);
    if (updatef) then begin
      if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
    end else begin
      if (RecordStore(WSBr,true)) then begin end;
    end;
  end;
LAddProductToBasket:;
  RedirectToPageAfterAddingToBasket(product);
LAddProductToBasketOut:;
  AddProductToBasket = res;
  return;
end;

updating procedure AddConfiguredProductToBasket(string product,val qty,integer basketno)
begin
  string 255 link;
  boolean testf;
  
  testf = true;
  
  //TODO: validate that we got the data and that we got correct / valid data
  testf = true;
  
  if (testf) then begin
    AddProductToBasket(product,qty,basketno); //TODO: Add product configuration first
  end else begin
    //TODO: set all error flags/session vars
    RedirectToProductConfigPage(product,qty,basketno);
  end;
  return;
end;

global
updating procedure ShopAddToBasket(string product,string qty,string config,string basketno)
begin
  val q;
  string 255 link;
  record WebNGProductVc WPr;
  boolean foundf;
   record ItemStatusVc ISr;
  
  if (blank(qty)) then begin
    q = 1;
  end else begin
    q = StringToVal(qty,M4Val);
  end;
  
  foundf = true;
  WPr.Code = product;
  if (ReadFirstMain(WPr,1,true)) then begin
    if (WPr.Closed==1) then begin
      foundf = false;
    end;
  end;
  if (foundf) then begin
    if (WPr.Configurable==1) then begin
      if (config=="1") then begin
        AddConfiguredProductToBasket(product,q,StringToInt(basketno));
      end else begin 
        RedirectToProductConfigPage(product,qty,StringToInt(basketno));
      end;
    end else begin
      AddProductToBasket(product,q,StringToInt(basketno));
    end;
  end else begin
    RedirectToProductCatalog;
  end;
  
  return;
end;

global
updating procedure ShopRemoveFromBasket(string rownr,string basketno)
begin
  record WebNGShopBasketVc oldWSBr,WSBr;
  integer r;
  integer i,cnt;
  
  if (nonblank(rownr)) then begin
    r = StringToInt(rownr);
    
    if (r>=0) then begin
      if (GetShoppingBasket(WSBr,StringToInt(basketno))) then begin
        if (r<MatRowCnt(WSBr)) then begin
          RecordCopy(oldWSBr,WSBr);
          MatRowDelete(WSBr,r);
          SumUpShopBasket(WSBr);
          if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
        end;
      end;
    end;
  end;
  
  RedirectToShoppingBasket;
  return;
end;

procedure UpdateCUServiceValidity(var row WebNGShopBasketVc WSBrw)
begin
  record CUServiceHistVc CUServiceHistr;
  record CUServiceVc CUServicer;
  record COCUServiceVc COCUServicer;
  
  if (WSBrw.CUServiceHistNr>0) then begin
    CUServiceHistr.SerNr = WSBrw.CUServiceHistNr;
    if (ReadFirstMain(CUServiceHistr,1,true)) then begin
      CUServicer.SerNr = CUServiceHistr.CUServiceNr;
      if (ReadFirstMain(CUServicer,1,true)) then begin
        COCUServicer.SerNr = CUServicer.COCUServiceNr;
        ReadFirstMain(COCUServicer,1,true);
// Not neccesary with this if I think... but..
        if (nonblankdate(WSBrw.PeriodStartDate)) then begin
          WSBrw.CUServiceValidUntil = AddMonth(WSBrw.PeriodStartDate,(WSBrw.Qty-1)*CUServicePerLength(CUServicer,COCUServicer));
          WSBrw.Comment = "&nbsp;&nbsp;&nbsp;" & ToolWebNGTranslateText(20150) & " " & WSBrw.CUServiceValidUntil;
        end else begin
          if (nonblankdate(CUServiceHistr.UntilDate)) then begin
            WSBrw.CUServiceValidUntil = AddMonth(CUServiceHistr.UntilDate,(WSBrw.Qty-1)*CUServicePerLength(CUServicer,COCUServicer));
            WSBrw.Comment = "&nbsp;&nbsp;&nbsp;" & ToolWebNGTranslateText(20150) & " " & WSBrw.CUServiceValidUntil; // I think...
          end;
        end;
      end;
    end;
  end;
end;

function Boolean ShopShouldCheckStockLevel(record ItemStatusVc ISr,val q)
begin
  record WebNGShopCompBlock WSCbl;
  Boolean res;
  val instock;
  
  BlockLoad(WSCbl);
  instock = ISr.Instock;
  if (WSCbl.IncludeOrdQty) then begin
    instock = ISr.Instock-ISr.OrddOut;
  end;
  if (q>instock) then begin
    res = true;
  end else begin
    res = false;
  end;

  if (WSCbl.CCPaymentOpt>0) then begin
    if (WSCbl.StockCheck==0) begin
      res = false;
    end;
  end;
  
  ShopShouldCheckStockLevel = res;
  return;
end;

global
updating procedure ShopUpdateBasketQty(string rownr,string qty,string basketno)
begin
  record WebNGShopBasketVc oldWSBr,WSBr;
  row WebNGShopBasketVc WSBrw;
  integer r;
  integer i,cnt;
  val q;
  record ItemStatusVc ISr;
  
  if (nonblank(rownr)) then begin
    if (blank(qty)) then begin
      q = 1;
    end else begin
      q = StringToVal(qty,M4Val);
    end;
    if (q==0) then begin
      ShopRemoveFromBasket(rownr,basketno);
      goto LShopUpdateBasketQty;
    end;
    
    if (q<0) then begin
      RedirectToShoppingBasket;
      goto LShopUpdateBasketQty;
    end;
    
    r = StringToInt(rownr);
    
    if (r>=0) then begin
      if (GetShoppingBasket(WSBr,StringToInt(basketno))) then begin
        if (r<MatRowCnt(WSBr)) then begin
          RecordCopy(oldWSBr,WSBr);
          MatRowGet(WSBr,r,WSBrw);

          GetStockValue(WSBrw.Product,";;;",ISr);
          if (ShopShouldCheckStockLevel(ISr,q)) then begin
            PutSessionString("stocklevels_" & rownr,ToolWebNGTranslateText(25330) & ": " & q);
          end else begin

            if (WSBrw.QtyType==1) then begin
              WSBrw.PalletQty = q;
            end else begin
              WSBrw.Qty = q;
            end;
            WSBrw.DateAdded = CurrentDate;
            WSBrw.TimeAdded = CurrentTime;

            UpdateCUServiceValidity(WSBrw);
            
            MatRowPut(WSBr,r,WSBrw);
            SumUpShopBasket(WSBr);
            if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
          end;
        end;
      end;
    end;
  end;
  
  RedirectToShoppingBasket;

LShopUpdateBasketQty:;
  return;
end;

function Boolean GetShoppingBasketRow(record WebNGShopBasketVc WSBr,string product,var Integer rownr)
begin
  row WebNGShopBasketVc WSBrw;
  Integer i,rwcnt;
  Boolean res;
  
  rwcnt = MatRowCnt(WSBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSBr,i,WSBrw);
    if (WSBrw.Product==product) then begin
      res = true;
      rownr = i;
      i = rwcnt;
    end;
  end;

  GetShoppingBasketRow = res;
  return;
end;

global
updating procedure CatalogUpdateBasketQty(string qty,string product)
begin
  record WebNGShopBasketVc oldWSBr,WSBr;
  row WebNGShopBasketVc WSBrw;
  integer r;
  integer i,cnt;
  val q;
  record ItemStatusVc ISr;
  
  if (blank(qty)) then begin
    q = 0;
  end else begin
    q = StringToVal(qty,M4Val);
  end;
  
  if (q<0) then begin
    goto LShopUpdateBasketQty;
  end;
  
  if (GetShoppingBasket(WSBr,0)) then begin
    if (GetShoppingBasketRow(WSBr,product,r)) then begin
      if (r<MatRowCnt(WSBr)) then begin
        RecordCopy(oldWSBr,WSBr);
        MatRowGet(WSBr,r,WSBrw);

        if (q==0) then begin
          MatRowDelete(WSBr,r);
        end else begin
          GetStockValue(WSBrw.Product,";;;",ISr);
          if (ShopShouldCheckStockLevel(ISr,q)) then begin
            PutSessionString("stocklevels_" & r,ToolWebNGTranslateText(25330) & ": " & q);
          end else begin
            if (WSBrw.QtyType==1) then begin
              WSBrw.PalletQty = q;
            end else begin
              WSBrw.Qty = q;
            end;
            WSBrw.DateAdded = CurrentDate;
            WSBrw.TimeAdded = CurrentTime;

            UpdateCUServiceValidity(WSBrw);
            MatRowPut(WSBr,r,WSBrw);
          end;
        end;
        SumUpShopBasket(WSBr);
        if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
      end;
    end else begin
      ShopAddToBasket(product,q,"","");
    end;
  end;
  
LShopUpdateBasketQty:;
  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);
  
  return;
end;

global
updating procedure ShopChangeBasketQtyType(Integer type,string item)
begin
  Integer r;
  record WebNGShopBasketVc WSBr,oldWSBr;
  row WebNGShopBasketVc WSBrw;
  record INVc INr;


  if (GetShoppingBasket(WSBr,0)) then begin
    if (GetShoppingBasketRow(WSBr,item,r)) then begin
      if (r<MatRowCnt(WSBr)) then begin
        RecordCopy(oldWSBr,WSBr);
        MatRowGet(WSBr,r,WSBrw);

        if (WSBrw.QtyType==0 and type==1) then begin
          INr.Code = WSBrw.Product;
          if (ReadFirstMain(INr,1,true)) then begin
            WSBrw.PalletQty = WSBrw.Qty/INr.QtyonPallet;
          end;
        end;

        WSBrw.QtyType = type;
        PutSessionString("webshop_qtytype_" & WSBrw.Product,type);
        MatRowPut(WSBr,r,WSBrw);
        SumUpShopBasket(WSBr);
        if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
      end;
    end;
  end;
  
  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);
  return;
end;

global
function Boolean CheckoutQtyFail()
begin
  Boolean res;
  Integer i,rwcnt;
  record WebNGShopBasketVc WSBr;
  row WebNGShopBasketVc WSBrw;
  record ItemStatusVc ISr;  

  res = false;
  if (GetShoppingBasket(WSBr,0)) then begin
    rwcnt = MatRowCnt(WSBr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WSBr,i,WSBrw);

      GetStockValue(WSBrw.Product,";;;",ISr);
      if (ShopShouldCheckStockLevel(ISr,WSBrw.Qty)) then begin
        PutSessionString("stocklevels_" & i,ToolWebNGTranslateText(25330) & ": " & WSBrw.Qty);
        res = true;
      end;
    end;
  end;
  
  CheckoutQtyFail = res;
  return;
end;

global
updating procedure ClearShopBasket(integer basketno)
begin
  record WebNGShopBasketVc WSBr;

  if (GetShoppingBasket(WSBr,StringToInt(basketno))) then begin
    RecordDelete(WSBr);
  end;
  return;
end;


global
updating procedure ShopEmptyBasket(string basketno)
begin  
  ClearShopBasket(StringToInt(basketno));
  
  RedirectToShoppingBasket;  
  return;
end;

global
updating procedure MoveShoppingBasket(string SessionID,string CustCode)
begin
  record WebNGShopBasketVc oldWSBr,WSBr,WSB2r;
  row WebNGShopBasketVc WSBrw,WSB2rw;
  integer i,cnt,j,cntj;
  boolean mergef;
  val reb;
  string 255 custcurrency,vatcode;
  
  if (nonblank(SessionID) and nonblank(CustCode)) then begin
    WSBr.SessionID = SessionID;
    if (ReadFirstMain(WSBr,4,true)) then begin
      RecordCopy(oldWSBr,WSBr);

      cnt = MatRowCnt(WSBr);
      for (i=0;i<cnt;i=i+1) begin
        MatRowGet(WSBr,i,WSBrw);
        WSBrw.Price = ShopGetItemPrice(WSBrw.Product,1,reb,vatcode,custcurrency,0);
        WSBrw.Discount = reb;
        WSBrw.VATCode = vatcode;
        MatRowPut(WSBr,i,WSBrw);
      end;
      if (blank(custcurrency)) then begin
        GetBaseCurncy(1,custcurrency);
      end;
      WSBr.CurrencyCode = custcurrency;

      WSB2r.CustCode = CustCode;
      WSB2r.CompanyNr = CurrentCompany;
      WSB2r.BasketNo = 0;
      if (ReadFirstMain(WSB2r,3,true)) then begin
        mergef = true;
        if (WSBr.CurrencyCode!=WSB2r.CurrencyCode) then begin
          goto LDontMergeBaskets;
        end;
        
        cnt = MatRowCnt(WSB2r);
        for (i=0;i<cnt;i=i+1) begin
          MatRowGet(WSB2r,i,WSB2rw);

          cntj = MatRowCnt(WSBr);
          for (j=0;j<cntj;j=j+1) begin
            MatRowGet(WSBr,j,WSBrw);
            if (WSBrw.Product==WSB2rw.Product and WSBrw.ProductConfig==WSB2rw.ProductConfig) then begin
              goto LFoundExistingProduct;
            end;
          end;
          ClearRow(WSBr,WSBrw,1);
          WSBrw.DateAdded = WSB2rw.DateAdded;
          WSBrw.TimeAdded = WSB2rw.TimeAdded;
          WSBrw.Product = WSB2rw.Product;
          WSBrw.ProductConfig = WSB2rw.ProductConfig;
          WSBrw.Price = WSB2rw.Price;
          WSBrw.Discount = WSB2rw.Discount;
          WSBrw.VATCode = WSB2rw.VATCode;
          WSBrw.QtyType = WSB2rw.QtyType;
          WSBrw.PalletQty = WSB2rw.PalletQty;

        LFoundExistingProduct:;
          WSBrw.Qty = WSBrw.Qty + WSB2rw.Qty;
          MatRowPut(WSBr,j,WSBrw);
        end;
      end;
      
      LDontMergeBaskets:;
      WSBr.CustCode = CustCode;
      WSBr.CompanyNr = CurrentCompany;
      WSBr.BasketNo = 0;
      WSBr.SessionID = "";
      if (mergef) then begin
        RecordDelete(WSB2r);
      end;
      
      SumUpShopBasket(WSBr);
      if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
    end;
  end;
LMoveShoppingBasket:;
  return;
end;

global
procedure ShopAfterAddingToBasketApp(record WebNGStructVc WSr,string path)
begin
  record WebNGStructVc WS2r;
  record WebNGProductVc WPr;
  string 255 node,mpath;
  
  // handles:
  // /justadded/12345/
  
  mpath = path;
  node = removenextnode(mpath);
  
  WPr.Code = node;
  if (ReadFirstMain(WPr,1,true)) then begin
    WS2r.SerNr = -1;
    WS2r.WebPage = ShopGetAfterAddingTemplatePage;
  
    if (blank(WS2r.WebPage)) then begin
      WS2r.WebPage = WSr.WebPage;
    end;
  
    SetWebNGFieldProduct(WPr.Code);
    
    ShowWebPage(WS2r);
  end else begin
    RedirectToProductCatalog;
  end;
  
  return;
end;

procedure ShowProductMandatoryIncludes(record WebNGProductVc WPr)
begin
  row WebNGProductVc WPrw;
  record WebNGProductVc WProdr;
  integer i,cnt;
  boolean firstline;
  string 255 link;
  
  firstline = true;
  cnt = MatRowCnt(WPr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(WPr,i,WPrw);
    if (WPrw.Requirement==1) then begin
      if (WPrw.SelectionType==0) then begin //TODO: also support components groups here
        WProdr.Code = WPrw.ComponentCode;
        if (ReadFirstMain(WProdr,1,true)) then begin
          if (firstline) then begin
            firstline = false;
            WebOutTagOpen("<div class=""shopbasket_mandatoryitems"">");
            WebOutStringFormatNL("<h3>" & ToolWebNGTranslateText(25313) & "</h3>"); //Includes mandatory components
            WebOutTagOpen("<ul>");
          end;
          
          WebOutTagOpen("<li>");
          link = FormatSimpleLink(LinkToProductInfo(WProdr),true);
          WebOutStringFormat("<a href=""" & link & """>" & GetTranslatedNameProduct(WProdr) & "</a>");
          WebOutTagClose("</li>");
        end;
      end;
    end;
  end;
        
  if (firstline==false) then begin
    WebOutTagClose("</ul>");
    WebOutTagClose("</div>");
  end;
  
  return;
end;

function boolean ProductHasRecommendedAddons(record WebNGProductVc WPr)
begin
  row WebNGProductVc WPrw;
  integer i,cnt;
  boolean res;
  
  res = false;
  cnt = MatRowCnt(WPr);
  for (i=0;i<cnt and res==false;i=i+1) begin
    MatRowGet(WPr,i,WPrw);
    if (WPrw.Requirement==3) then begin
      res = true;
    end;
  end;
  
  ProductHasRecommendedAddons = res;
  return;
end;

procedure ShowShoppingBasketRow(string product,longint productconfig,val qty,val price,val discount,string comment,integer rownr,Boolean hidepricef,Boolean readonly,Boolean availf)
begin
  record WebNGProductVc WPr;
  record INVc INr;
  string 255 link,tstr,href;
  boolean qtychangeable;
  val rowsum,AvailableQty;
  record GeneralOptionBlock GenOptRec;
  record SysFormatBlock SysFormatRec;
  Integer ShowStockLevel;
  string 30 imageid;
  
  BlockLoad(SysFormatRec);
  if (ReadFirstItem(product,INr,true,false)==false) then begin
    goto LShowShoppingBasketRow;
  end;
  
  WPr.Code = INr.Code;
  if (ReadFirstMain(WPr,1,true)==false) then begin
    WPr.Code = INr.Code;
    WPr.Comment = INr.Name;
  end;
  if (nonblank(WPr.Code)) then begin
    BlockLoad(GenOptRec);

    WebOutTagOpen("<div class=""shopbasketrow"">");

    WebOutTagOpen("<div class=""shopbasketcol_no"">");
    WebOutStringFormat(rownr+1 & ".");
    WebOutTagClose("</div>");
    
    WebOutTagOpen("<div class=""shopbasketcol_itemimage"">");
    if (ProductHasImage(WPr,imageid)) then begin
      link = GetLinkToShop & "images/";
      link = FormatSimpleLink(link & WPr.Code,true) & "?id=" & imageid;
      href = FormatSimpleLink(LinkToProductInfo(WPr),true);
      WebOutStringFormat("<a href=""" & href & """><img src=""" & link & """></a>");
    end else begin
      WebOutString("<div class='shopcatalog_itemimage_replace'></div>");  
    end;
    WebOutTagClose("</div>");
    
    WebOutTagOpen("<div class=""shopbasketcol_product"">");
    
    WebOutTagOpen("<div class=""shopbasket_itemname"">");
    link = FormatSimpleLink(LinkToProductInfo(WPr),true);
    tstr = GetItemVARDescription(product,CurrentWebLang);
    if (nonblank(tstr)) then begin
      tstr = " (" & tstr & ")";
    end;
    WebOutStringFormat("<a href=""" & link & """>" & GetTranslatedNameProduct(WPr) & tstr & "</a>");
    WebOutTagClose("</div>");

    if (nonblank(comment)) then begin
      WebOutTagOpen("<div class=""shopbasket_comment"">");
      WebOutStringFormat(comment);
      WebOutTagClose("</div>");
    end;
    tstr = GetSessionString("stocklevels_" & rownr);
    if (nonblank(tstr)) then begin
      WebOutTagOpen("<div class=""stocklevels"">");
      WebOutStringFormat(tstr);
      WebOutTagClose("</div>");
      PutSessionString("stocklevels_" & rownr,"");
    end;

    WebOutTagOpen("<div class=""shopbasket_itemcode"">");
    WebOutStringFormat(ToolWebNGTranslateText(32433) & ": " & WPr.Code & " ");  // Item Code
    WebOutTagClose("</div>");

    if (availf) then begin
      ShowStockLevel = GetShowStockLevel;
      link = GetItemAvailablity(WPr.Code,ShowStockLevel,WPr.LimitedInStock,AvailableQty);
      if (nonblank(link)) then begin
        WebOutTagOpen("<div class=""shopbasket_availability"">");
        WebOutStringFormat(link);
        WebOutTagClose("</div>");
      end;
    end;

    ShowProductMandatoryIncludes(WPr);
    
    if (WPr.Configurable==1) then begin
      link = FormatSimpleLink(GetLinkToShop & "editproduct/" & productconfig,true);    
      WebOutTagOpen("<div class=""shopbasket_configurethis"">");
      WebOutStringFormat("<a href=""" & link & """>" & ToolWebNGTranslateText(25505) & "</a>");
      WebOutTagClose("</div>");
    end;

    if (ProductHasRecommendedAddons(WPr)) then begin
      link = FormatSimpleLink(GetLinkToShop & "recommendations/" & product,true);
      WebOutTagOpen("<div class=""shopbasket_recommendedaddons"">");
      WebOutStringFormat("<a href=""" & link & """>" & ToolWebNGTranslateText(25506) & "</a>");
      WebOutTagClose("</div>");
    end;
  
    WebOutTagClose("</div>");
    
    if (hidepricef==false) then begin
      WebOutTagOpen("<div class=""shopbasketcol_unitprice"">");
      WebOutStringFormat(ValToString(price,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0));
      WebOutTagClose("</div>");
    end;

    qtychangeable = true;
    if (WPr.Configurable==1) then begin //if more than 1 can be bought of this thing, or if qty can be changed //TODO: find a better way to determine whether qty may be updated
      qtychangeable = false;
    end;
    if (readonly) then begin
      qtychangeable = false;
    end;
    
    WebOutTagOpen("<div class=""shopbasketcol_qty"">");
    if (qtychangeable==false) then begin
      WebOutStringFormat(ValToString(qty,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,0));
    end else begin
      link = FormatLink("/WebUpdatingAction.hal","?action=updatebasketqty&rownr=" & rownr,true,true);
      WebOutTagOpen("<form id=""shopbasketrow_qty_" & rownr & """ name=""shopbasketrow_qty_" & rownr & """ method=""POST"" action=""" & link & """ style=""display: inline"">");
      WebOutStringFormat("<input type=""text"" value=""" & ValToString(qty,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,0) & """ name=""qty"" class=""shopbasket_qtyfield"">");
      WebOutTagClose("</form>");
    end;
    WebOutTagClose("</div>");
    
    WebOutTagOpen("<div class=""shopbasketcol_discount"">");
    tstr = ValToString(discount,M41Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    if (nonblank(tstr)) then begin
      tstr = tstr & "<span>%</span>";
    end;
    WebOutStringFormat(tstr);
    WebOutTagClose("</div>");

    WebOutTagOpen("<div class=""shopbasketcol_price"">");
    if (hidepricef==false) then begin
      CalcSum(qty,price,0,discount,rowsum,GenOptRec.UseDiscount);
      WebOutStringFormat(ValToString(rowsum,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0));
    end else begin
      WebOutStringFormat("&nbsp;");
    end;
    WebOutTagClose("</div>");

    WebOutTagOpen("<div class=""cleardiv"">");
    WebOutTagClose("</div>");
    
    if (!readonly) then begin
      WebOutTagOpen("<div class=""shopbasket_actions"">");
      if (qtychangeable) then begin
        link = "javascript:return submitBasketQty(" & rownr & ");";
        WebOutStringFormat("<a href="""" onclick=""" & link & """>" & ToolWebNGTranslateText(25507) & "</a>"); //Update Qty
        WebOutStringFormat(" | ");
      end;
      link = FormatLink("/WebUpdatingAction.hal","?action=removefrombasket&rownr=" & rownr,true,true);
      WebOutStringFormat("<a onclick=""return confirm('" & ToolWebNGTranslateText(25408) & "');"" href=""" & link & """>" & ToolWebNGTranslateText(25504) & "</a>"); //Are you sure you want to remove this item? //Remove
      
      WebOutTagClose("</div>");
    end;
    
    WebOutTagClose("</div>");
  end;
LShowShoppingBasketRow:;
  return;
end;

procedure ShowShoppingBasketHeading(record WebNGShopBasketVc WSBr)
begin
  transaction boolean gOutputTagComments;
  string 100 currency;
  
  WebOutTagOpen("<script type=""text/javascript"">");
  WebOutStringFormatNL("function submitBasketQty(rownr) {");
  WebOutStringFormatNL("  var elem = document.getElementById('shopbasketrow_qty_' + rownr);");
  WebOutStringFormatNL("  if (elem)");
  WebOutStringFormatNL("    elem.submit();");
  WebOutStringFormatNL("  return false;");
  WebOutStringFormatNL("}");
  WebOutTagClose("</script>");
  
  if (gOutputTagComments) then begin
    if (LoginState==false) then begin
      WebOutStringFormatNL("<!--[if !IE]> BASKET-SESSION-ID: " & GetWebSessionUUID & " <![endif]-->");
    end;
  end;
  
  if (nonblank(WSBr.CurrencyCode)) then begin
    currency = "<span> " & WSBr.CurrencyCode & "</span>";
  end;
  
  WebOutTagOpen("<div class=""shoptablehead"">");

  WebOutTagOpen("<div class=""shopbasketcol_no"">");
  WebOutStringFormat("#");
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopbasketcol_itemimage"">");
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopbasketcol_product"">");
  WebOutStringFormat(ToolWebNGTranslateText(25306)); //Product
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopbasketcol_unitprice"">");
  WebOutStringFormat(ToolWebNGTranslateText(25307) & currency); //Unit Price
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopbasketcol_qty"">");
  WebOutStringFormat(ToolWebNGTranslateText(25308)); //Qty
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopbasketcol_discount"">");
  WebOutStringFormat(ToolWebNGTranslateText(25331)); //Discount %
  WebOutTagClose("</div>");
  
  WebOutTagOpen("<div class=""shopbasketcol_price"">");
  WebOutStringFormat(ToolWebNGTranslateText(25309) & currency); //Price
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""cleardiv"">");
  WebOutTagClose("</div>");

  WebOutTagClose("</div>");
  return;
end;

global
procedure ShowMultiBuyDiscount(record IVVc IVr)
begin
  row IVVc IVrw;
  boolean printf;
  Integer i,rwcnt;
  record MultiBuyRebVc MultiBuyRebr;
  record SysFormatBlock SysFormatRec;
  
  BlockLoad(SysFormatRec);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount) then begin
      MultiBuyRebr.Code = IVrw.MBRCode;
      ReadFirstMain(MultiBuyRebr,1,true);
      if (!printf) then begin
        WebOutTagOpen("<div class=""shopbasket_multibuy"">");
        WebOutTagOpen("<div class=""multibuyhead"">");
        WebOutStringFormatNL("<div class=""multibuycol_comment"">" & ToolWebNGTranslateText(25335) & "</div>"); // Multi Buy Discount
        WebOutStringFormatNL("<div class=""multibuycol_quant"">" & ToolWebNGTranslateText(25308) & "</div>"); // Qty
        WebOutStringFormatNL("<div class=""multibuycol_sum"">" & ToolWebNGTranslateText(25326) & "</div>"); // Amount
        WebOutStringFormatNL("<div class=""cleardiv""></div>");
        WebOutTagClose("</div>");
        printf = true;
      end;
      WebOutTagOpen("<div class=""multibuyrow"">");
      WebOutStringFormatNL("<div class=""multibuycol_comment"">" & MultiBuyRebr.Comment & "</div>");
      WebOutStringFormatNL("<div class=""multibuycol_quant""><span>-</span>" & ValToString(-IVrw.Quant,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,0) & "</div>");
      WebOutStringFormatNL("<div class=""multibuycol_sum""><span>-</span>" & ValToString(-IVrw.Sum,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0) & "</div>");
      WebOutStringFormatNL("<div class=""cleardiv""></div>");
      WebOutTagClose("</div>");
    end;
  end;
  if (printf) then begin
    WebOutTagClose("</div>");
  end;
  
  return;
end;

procedure ShowShoppingBasketTotals(record IVVc IVr,record WebNGShopBasketVc WSBr,boolean hidepricef,boolean readonly,val freight)
begin
  string 255 link,currency;
  boolean showfreightf;
  
  if (freight!=0) then begin 
    showfreightf = true;
  end;
  WebOutTagOpen("<div class=""shopbasketrow lastrow"">");

  if (!readonly) then begin
    WebOutTagOpen("<div class=""shopbasketcol_total_text"">");
    link = FormatLink("/WebUpdatingAction.hal","action=emptybasket",true,true);
    WebOutStringFormat("<a onclick=""return (confirm('" & ToolWebNGTranslateText(25405) & "') && (location.href='" & link & "'));""");
    WebOutStringFormat(" href=""" & link & """>"); //Are you sure you want to remove all items from the basket?
    WebOutStringFormat("<input class=""shopbasketemptybutton"" type=""button"" value=""" & ToolWebNGTranslateText(25503) & """></a>"); //Empty basket
    WebOutTagClose("</div>");
  end;

  if (nonblank(WSBr.CurrencyCode)) then begin
    currency = "<span> " & WSBr.CurrencyCode & "</span>";
  end;
  WebOutTagOpen("<div class=""shopbasketcol_total_name"">");
  if (showfreightf) then begin 
    WebOutStringFormat(ToolWebNGTranslateText(25303) & currency); //FREIGHT
    WebOutStringFormat("<br>");
  end;
  WebOutStringFormat(ToolWebNGTranslateText(25328) & currency); //SUBTOTAL
  WebOutStringFormat("<br>");
  WebOutStringFormat(ToolWebNGTranslateText(25304) & currency); //VAT
  WebOutStringFormat("<br>");
  WebOutStringFormat(ToolWebNGTranslateText(25305) & currency); //TOTAL
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopbasketcol_total_value"">");
  if (hidepricef==false) then begin
    if (showfreightf) then begin 
      WebOutStringFormat(freight);
      WebOutStringFormat("<br>");
    end;
    WebOutStringFormat(IVr.Sum1-freight);
    WebOutStringFormat("<br>");
    WebOutStringFormat(IVr.Sum3);
    WebOutStringFormat("<br>");
    //WebOutStringFormat(IVr.TAX1Sum);
    //WebOutStringFormat("<br>");
    WebOutStringFormat(IVr.Sum4);
  end else begin
    WebOutStringFormat("&nbsp;");
    WebOutStringFormat("<br>");
    WebOutStringFormat("&nbsp;");
    WebOutStringFormat("<br>");
    WebOutStringFormat("&nbsp;");
    WebOutStringFormat("<br>");
    //WebOutStringFormat("&nbsp;");
    //WebOutStringFormat("<br>");
    WebOutStringFormat("&nbsp;");
  end;
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""cleardiv"">");
  WebOutTagClose("</div>");
  
  WebOutTagClose("</div>");
  
  return;
end;

global
procedure ShowInvoice(string class,Boolean readonly,Boolean hidepricef,record IVVc IVr,record WebNGShopBasketVc WSBr)
begin
  row IVVc IVrw;
  integer i,cnt;
  val freight;

  WebOutTagOpen("<div class=""" & class & """>");

  ShowShoppingBasketHeading(WSBr);

  cnt = MatRowCnt(IVr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      ShowShoppingBasketRow(IVrw.ArtCode,-1,IVrw.Quant,IVrw.Price,IVrw.vRebate,IVrw.Comment,i,hidepricef,readonly,false);
    end;
  end;

  if (!hidepricef) then begin
    ShowMultiBuyDiscount(IVr);
  end;

  ShowShoppingBasketTotals(IVr,WSBr,hidepricef,readonly,freight);

  WebOutTagClose("</div>");
end;

global
procedure ShowOrder(string class,Boolean readonly,Boolean hidepricef,record ORVc ORr,record WebNGShopBasketVc WSBr)
begin
  row ORVc ORrw;
  integer i,cnt;
  val freight;

  WebOutTagOpen("<div class=""" & class & """>");

  ShowShoppingBasketHeading(WSBr);

  cnt = MatRowCnt(ORr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    //if (ORrw.stp==kInvoiceRowTypeNormal) or (ORrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      ShowShoppingBasketRow(ORrw.ArtCode,-1,ORrw.Quant,ORrw.Price,ORrw.vRebate,"",i,hidepricef,readonly,false);
//ORrw.Spec
    //end;
  end;

//  if (!hidepricef) then begin
//    ShowMultiBuyDiscount(IVr);
//  end;

//  ShowShoppingBasketTotals(IVr,WSBr,hidepricef,readonly,freight);

  WebOutTagClose("</div>");
end;

global
procedure ShowShoppingBasket(string class,Boolean readonly)
begin
  record WebNGElementVc WEr;
  record WebNGShopBasketVc WSBr;
  boolean basketf;
  integer i,cnt;
  record WebNGShopBlock WSb;
  string 255 link,paydeal,tstr;
  record WebNGShopCompBlock WSCb;
  boolean hidepricef;
  record IVVc IVr;
  row IVVc IVrw;
  val freight;
  
  basketf = false;
  if (GetShoppingBasket(WSBr,0)) then begin
    if (MatRowCnt(WSBr)>0) then begin
      basketf = true;
    end;
  end;
  
  if (basketf) then begin
    BlockLoad(WSCb);
    if (WSCb.HidePricesNotLoggedIn!=0) then begin
      if (LoginState==false) then begin
        hidepricef = true;
      end;
    end;

    PayMethodSupported("invoice",paydeal,tstr);
    BuildWebNGInvoiceFromBasket(IVr,WSBr,paydeal,false,"",freight); ///API
    
    WebOutTagOpen("<div class=""" & class & """>");

    ShowShoppingBasketHeading(WSBr);

    cnt = MatRowCnt(IVr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
        ShowShoppingBasketRow(IVrw.ArtCode,-1,IVrw.Quant,IVrw.Price,IVrw.vRebate,IVrw.Comment,i,hidepricef,readonly,true);
      end;
    end;
    
    if (!hidepricef) then begin
      ShowMultiBuyDiscount(IVr);
    end;

    ShowShoppingBasketTotals(IVr,WSBr,hidepricef,readonly,freight);

    WebOutTagClose("</div>");
  end else begin
    WebOutTagOpen("<div class=""" & class & " empty"">");
    WebOutString(ToolWebNGTranslateText(25406)); //Your basket is empty.
    WebOutTagClose("</div>");
  end;
  return;
end;

global
procedure ShopBasketApp(record WebNGStructVc WSr,string path)
begin
  record WebNGPageVc WPr;
  record WebNGElementVc WEr;
  string 255 node,mpath,link;
  integer pagenumber;
  record WebNGShopBlock WSb;
  
  // handles
  // /basket/
  
  BlockLoad(WSb);
  
  if (nonblank(WSb.ShopBasketTemplPage)) then begin
    WPr.Code = WSb.ShopBasketTemplPage;
  end else begin
    WPr.Code = WSr.WebPage;
  end;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  if (nonblank(WSb.ShopBasketTemplElement)) then begin
    ShowWebElementTemplate(WSb.ShopBasketTemplElement,0); //before
  end;
  
  ShowShoppingBasket("shopbasketdiv",false);

  WebOutTagOpen("<div class=""shopbasketcheckoutdiv"">");
  
  if (WSb.AllowRequestingQuotes==1) then begin
    link = "";
    //WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    //WebOutStringFormat(" href=""" & link & """>");
    WebOutStringFormat("<input type=""button"" value=""" & ToolWebNGTranslateText(25520) & """>"); //Request Quotation
    //WebOutTagClose("</a>");
  end;

  link = FormatSimpleLink(GetLinkToCheckoutPage,true);
  WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
  WebOutStringFormat(" href=""" & link & """>");
  WebOutStringFormat(" <input type=""button"" value=""" & ToolWebNGTranslateText(25508) & """>"); //Proceed to Checkout
  WebOutTagClose("</a>");
  
  WebOutTagClose("</div>");
  
  if (nonblank(WSb.ShopBasketTemplElement)) then begin
    ShowWebElementTemplate(WSb.ShopBasketTemplElement,2);
  end;
  
  ShowWebAppPageEnd(WPr);

  return;
end;

