//tools
external function string 255 removenextnode(var string);
external function string 255 CleanPath(string);
external function string 10 ToolWebNGGetCountry();
external procedure UpdateWebCountry(string);
external function boolean LoginState();
external function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLinkWithArg(string,string,boolean);
external function string 10 CurrentWebLang();
external procedure RequireSessionState();
//pages
external procedure ShowErrorPage(string);
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//shoptools
external function boolean ShopPerCountry();
external function string 255 GetLinkToShop();
//translation
external function string 255 ToolWebNGTranslateText(integer);
//webng
external procedure RedirectToSelectCountryPage();
external procedure RedirectToStructLink(string);
external procedure RedirectToStartPage();
external procedure RedirectToURL(string);
//apps
external procedure ShopCatalogApp(record WebNGStructVc,string);
external procedure ShopProductInfoApp(record WebNGStructVc,string);
external procedure ShopBasketApp(record WebNGStructVc,string);
external procedure ShopConfigureProductApp(record WebNGStructVc,string);
external procedure ShopAfterAddingToBasketApp(record WebNGStructVc,string);
external procedure ShopCheckoutApp(record WebNGStructVc,string);
external procedure ShopPaymentApp(record WebNGStructVc,string);
external procedure ProductImageDownloadApp(string);
external procedure ObjectImageDownloadApp(string);
external procedure ShopSearchresultApp(record WebNGStructVc,string);
external procedure ShopManageFavouriteItem(string);

global
procedure RedirectToShopPageWithArg(string path,string args)
begin
  RedirectToURL(FormatSimpleLinkWithArg(GetLinkToShop & path,args,true));
  return;
end;

global
procedure RedirectToShopPage(string path)
begin
  RedirectToStructLink(GetLinkToShop & path);
  return;
end;

procedure RedirectToShopStartPage()
begin
  RedirectToShopPage("");
  return;
end;

procedure RedirectToLocalShop(string path)
begin
  string 255 apppath,country,mpath;
  boolean res;

  mpath = path;
  if (left(mpath,1)=="/") then begin
    mpath = right(mpath,len(mpath)-1);
  end;
  
  if (nonblank(ToolWebNGGetCountry)) then begin
    RedirectToShopPage(path);
  end else begin
    RedirectToStartPage;
  end;

  return;
end;

global
procedure RedirectToShoppingBasket()
begin
  RedirectToShopPage("basket");
  return;
end;

function boolean NodeIsCountry(string node)
begin
  record WebNGCountryVc WCr;
  boolean res;
  
  WCr.Code = node;
  if (ReadFirstMain(WCr,1,true)) then begin
    res = true;
  end else begin
    res = false;
  end;

  NodeIsCountry = res;
  return;
end;

function boolean ShopCountryCorrect(string node,var boolean usenextnode)
begin
  string 255 country;
  boolean res;

  res = true;
  usenextnode = false;
  if (NodeIsCountry(node)) then begin
    country = ToolWebNGGetCountry;
    if (blank(country)) then begin
      UpdateWebCountry(node);
    end else begin
      if (node!=country) then begin
        if (LoginState==false) then begin
          UpdateWebCountry(node);
        end else begin
          ShowErrorPage(ToolWebNGTranslateText(25005)); //You cannot shop in a country other than the country you are registered in
        end;
      end;
    end;
    usenextnode = true;
  end else begin
    if (ShopPerCountry) then begin
      res = false;
    end;
  end;
  
  ShopCountryCorrect = res;
  return;
end;

global
function boolean ShopSetCompany(string country)
begin
  boolean res,foundf;
  record WebNGCompCountryVc WCCr;
  integer newcompany;
  
  res = false;
  
  if (LoginState==false and nonblank(country)) then begin
    newcompany = -1;
    foundf = true;
    WCCr.Country = country;
    if (LoopKey("Country",WCCr,1,foundf)) begin
      if (WCCr.Country!=country) then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (newcompany==-1 or WCCr.CountryDefault==1) then begin
          newcompany = WCCr.CompanyNr;
        end;
        if (WCCr.CountryDefault==1) then begin
          foundf = false;
        end;
      end;
    end;
    if (newcompany!=-1 and newcompany!=CurrentCompany) then begin
      res = SetCompany(WCCr.CompanyNr,false);
    end;
  end;
  
  ShopSetCompany = res;
  return;
end;

procedure TempWelcomePage(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  
  WPr.Code = WSr.WebPage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");
  WebOutString("<h2>Welcome to the webshop</h2>");
  ShowWebAppPageEnd(WPr);

  return;
end;

procedure ShopNotImplemented(record WebNGStructVc WSr,string section)
begin
  record WebNGPageVc WPr;
  string 255 tstr;
  
  WPr.Code = WSr.WebPage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  
  ShowWebAppPageStart(WPr,"");
  
  switch (section) begin
    case "INFO":
      tstr = "Product Information";
    case "CONFIG":
      tstr = "Configure this product";
    case "EDITCONFIG":
      tstr = "Edit product configuration";
    case "RECOMMEND":
      tstr = "Recommended Add-ons";
    otherwise
      tstr = "Unknown function";
  end;
  
  WebOutTagOpen("<h1>");
  WebOutStringFormat(tstr);
  WebOutTagClose("</h1>");
  
  WebOutStringFormat("This function is not yet implemented. Please use your browser's back button to go back.");
  
  ShowWebAppPageEnd(WPr);
  return;
end;

global
procedure ShopApp2(record WebNGStructVc WSr,string path,Boolean simplef)
begin
  string 255 node,mpath;
  boolean usenextnode;
  integer oldcompany;
  boolean res;
  longint structnode;
  
  mpath = path;
  node = removenextnode(mpath);

  if (simplef==false) then begin
    if (ShopPerCountry) then begin
      if (blank(ToolWebNGGetCountry) or ToolWebNGGetCountry=="global") then begin
        PutSessionString("wantedtorequestedpage","true");
        RedirectToSelectCountryPage;
        goto LShopApp;
      end;
    end;
  end;

  RequireSessionState;
  
  if (ShopCountryCorrect(node,usenextnode)) then begin
    oldcompany = CurrentCompany;
    res = ShopSetCompany(ToolWebNGGetCountry);
  end else begin
    RedirectToShopPage(path);
    goto LShopApp;
  end;
  
  //TODO: a bit of a workaround function
  if (nonblank(WSr.HALFunc)) begin
    if (CountRecords("WebNGProductVc")==0) then begin
      structnode = StringToLongint(WSr.HALFunc);
      if (structnode>0) then begin
        RedirectToStructLink(GetLinkToStruct(structnode,true));
        goto LShopApp;
      end;
    end;
  end;

  if (usenextnode) then begin
    node = removenextnode(mpath);
  end;

  switch (node) begin
    case "":
      //TempWelcomePage(WSr);
      RedirectToShopPage("catalog");
    case "catalog":
      ShopCatalogApp(WSr,mpath);
    case "basket":
      ShopBasketApp(WSr,mpath);
    case "productinfo":
      ShopProductInfoApp(WSr,mpath);
    case "manage":
      ShopManageFavouriteItem(mpath);
    case "configureproduct":
      ShopConfigureProductApp(WSr,mpath);
    case "editproduct":
      ShopNotImplemented(WSr,"EDITCONFIG");
      //make sure that the incoming parameter (sernr or productconfig record) belongs to the current user
    case "recommendations":
      ShopNotImplemented(WSr,"RECOMMEND");
      //ShopListRecommendations(WSr,mpath); //TODO: add this functionality
    case "justadded":
      ShopAfterAddingToBasketApp(WSr,mpath);
    case "checkout":
      ShopCheckoutApp(WSr,mpath);
    case "payment":
      ShopPaymentApp(WSr,mpath);
    case "images":
      ProductImageDownloadApp(mpath);
    case "images_dep":
      ObjectImageDownloadApp(mpath);
    case "search":
      ShopSearchresultApp(WSr,mpath);
    otherwise
      RedirectToShopStartPage;
  end;
  
  if (res) then begin
    ResetCompany(oldcompany);
  end;

LShopApp:
  return;
end;

global
procedure ShopApp(record WebNGStructVc WSr,string path)
begin
  ShopApp2(WSr,path,false);
end;
