external procedure DoWeb(Boolean);
external procedure RedirectToLoginPage;
external procedure RedirectToStartPage;
external function boolean LoginState();
remote procedure FillCalendarRemote(record RcVc,Integer,Integer,var Array record ActDisp2Vc);
remote procedure FillCalendarInvoicesRemote(record RcVc,Integer,Integer,var Array record ActDisp2Vc);
remote procedure FillCalendarOrdersRemote(record RcVc,Integer,Integer,var Array record ActDisp2Vc);
remote procedure FillCalendarDeliveriesRemote(record RcVc,Integer,Integer,var Array record ActDisp2Vc);
external function LongInt DateDiff(Date,Date);
external procedure ShowLoginControlElement(record WebNGElementVc,string);
external function string 255 removenextnode(var string);
external procedure ShowOrders(record WebNGStructVc,Boolean);
external procedure ShowInvoices(record WebNGStructVc,Boolean);
external procedure ShopApp2(record WebNGStructVc,string,Boolean);
external procedure ShowInvoice(string,Boolean,Boolean,record IVVc,record WebNGShopBasketVc);
external procedure ShowOrder(string,Boolean,Boolean,record IVVc,record WebNGShopBasketVc);
external updating procedure ShopAddToBasket(string,string,string,string);
external procedure SetupCustPS2Rn(string,var record RcVc);
external procedure ShowFilteredShopItems(string);
external function string 255 ToolWebNGTranslateText(integer);

global webpublic
procedure WebSimple()
begin
  DoWeb(true);
end;

function string 255 GetNodeTranslation(string node)
begin
  string 255 res;
  
  res = node;
  switch (node) begin
    case "calendar":    res = ToolWebNGTranslateText(26000);
    case "shop":        res = ToolWebNGTranslateText(26001);
    case "catalog":     res = ToolWebNGTranslateText(26009);
    case "basket":      res = ToolWebNGTranslateText(26010);
    case "orders":      res = ToolWebNGTranslateText(26002);
    case "invoices":    res = ToolWebNGTranslateText(26003);
    case "account":     res = ToolWebNGTranslateText(26004);
    case "checkout":    res = ToolWebNGTranslateText(26005);
    case "report":      res = ToolWebNGTranslateText(26006);
    case "sale":        res = ToolWebNGTranslateText(26007);
    case "productinfo": res = ToolWebNGTranslateText(26024);
    case "manage":      res = ToolWebNGTranslateText(26025);
    case "order":       res = ToolWebNGTranslateText(26001);
  end;

  GetNodeTranslation = res;
  return;
end;

procedure SimpleBeginPage(string path)
begin
  record CUVc CUr;
  record CYBlock CYb;
  string 255 node,mpath,lpath,nodetrans;

  WebOutTagOpen("<html>");
  WebOutTagOpen("<head>");
  WebOutStringFormatNL("<title>" & CYb.CompName & "</title>");
//WebOutStringFormatNL("<link rel=""stylesheet"" type=""text/css"" href=""/stdweb.css"">");
WebOutStringFormatNL("<link rel=""stylesheet"" type=""text/css"" href=""/styles/styles.css"">");
WebOutStringFormatNL("<link rel=""stylesheet"" type=""text/css"" href=""/styles/slidebars.min.css"">");

WebOutStringFormatNL("<script language=""javascript"" type=""text/javascript"" src=""/js/jquery.min.js""></script>");
WebOutStringFormatNL("<script language=""javascript"" type=""text/javascript"" src=""/js/jquery.colorbox-min.js""></script>");
WebOutStringFormatNL("<script language=""javascript"" type=""text/javascript"" src=""/js/hw.js""></script>");
WebOutStringFormatNL("<script language=""javascript"" type=""text/javascript"" src=""/js/slidebars.min.js""></script>");
WebOutStringFormatNL("<link rel='stylesheet' href='//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css'>");
WebOutStringFormatNL("<script src='//code.jquery.com/ui/1.11.4/jquery-ui.js'></script>");

WebOutStringFormatNL("<script language=""javascript"" type=""text/javascript"" src=""/stdweb.js?ver=124""></script>");

  WebOutTagClose("</head>");
  WebOutTagOpen("<body>");

  WebOutTagOpen("<div class='header'>");

  BlockLoad(CYb);
  WebOutStringFormatNL("<div class='shopname'>" & CYb.CompName & "</div>");

  if (CurrentCust<>"") then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)) then begin
      WebOutStringFormatNL("<div class='loggedincust'>" & ToolWebNGTranslateText(26012) & CUr.Name & "</div>");
    end;
  end;

  WebOutTagClose("</div>");

  WebOutTagOpen("<div class='breadcrumbs'>");

  if (path<>"" and path<>"/") then begin
    WebOutString("<a href='/'>" & ToolWebNGTranslateText(26011) & "</a>");
    // these should be built as we parse the whole path, just a quick 'fix' to do it this way
    mpath = path;
    lpath = "";
    while (mpath<>"") begin
      node = removenextnode(mpath);
      nodetrans = GetNodeTranslation(node);
      lpath = lpath & "/" & node;
      if (mpath=="") then begin
        WebOutStringFormatNL(">> " & nodetrans);
      end else begin
        WebOutStringFormatNL(">> <a href='" & lpath & "'>" & nodetrans & "</a>");
      end;
    end;
  end;

  WebOutTagClose("</div>");

  WebOutTagOpen("<div class='mainpage'>");

end;

procedure SimpleEndPage()
begin
  WebOutTagClose("</div>");
  WebOutTagClose("</body>");
  WebOutTagClose("</html>");
end;

procedure DisplayNewItemBadge(string custcode)
begin
  Integer cnt;
  string 255 res;
  record WebNGProductVc WPr;
  record WebNGProductViewVc PVr;
  
  if (nonblank(custcode)) then begin
    while (LoopMain(WPr,1,true) and cnt<=10) begin
      if (WPr.Closed==0) then begin
        PVr.CustCode = custcode;
        PVr.Product = WPr.Code;
        if (ReadFirstMain(PVr,2,true)==false) then begin
          cnt = cnt + 1;
        end;
      end;
    end;
    
    if (cnt>0) then begin
      res = cnt;
      if (cnt==10) then begin
        res = res & "+";
      end;
      WebOutStringFormatNL("<div class='order_link_item_badge'>" & res & "</div>");
    end;
  end;

  return;
end;

procedure SimpleMainPage(string path)
begin
  record SimpleWebBlock SWb;

  BlockLoad(SWb);

  SimpleBeginPage(path);

  // should check if we're logged in as a customer
  if (SWb.ShowCalendarCustomer and CurrentCust<>"") then begin WebOutStringFormatNL("<div class=""iconbutton"" style=""background-image: url('/icons/calendar.png');""><a href='/calendar'>" & ToolWebNGTranslateText(26000) & "</a></div>"); end;

  if (SWb.ShowShop and CurrentCust<>"") then begin 
    WebOutStringFormatNL("<div class='iconbutton'>");
    DisplayNewItemBadge(CurrentCust);
    WebOutStringFormatNL("<a href='/shop/catalog?setfavf=0'>" & ToolWebNGTranslateText(26001) & "</a></div>"); 
  end;
  if (SWb.ShowFavourites and CurrentCust<>"") then begin 
    WebOutStringFormatNL("<div class='iconbutton'><a href='/shop/catalog?setfavf=1'>" & ToolWebNGTranslateText(26027) & "</a></div>"); 
  end;
  if (SWb.ShowOrders and CurrentCust<>"") then begin WebOutStringFormatNL("<div class='iconbutton'><a href='/orders'>" & ToolWebNGTranslateText(26002) & "</a></div>"); end;
  if (SWb.ShowInvoices and CurrentCust<>"") then begin WebOutStringFormatNL("<div class='iconbutton'><a href='/invoices'>" & ToolWebNGTranslateText(26003) & "</a></div>"); end;
  //WebOutStringFormatNL("<div class='iconbutton'><a href='/reports'>reports</a></div>");
  //if (SWb.Show??) then begin WebOutStringFormatNL("<div class='iconbutton'><a href='/catalogue'>catalogue</a></div>"); end;
  //WebOutStringFormatNL("<div class='iconbutton'><a href='/offers'>offers</a></div>");

  if (SWb.ShowMyAccount) then begin WebOutStringFormatNL("<div class='iconbutton'><a href='/account'>" & ToolWebNGTranslateText(26004) & "</a></div>"); end;
  if (SWb.ShowSale) then begin WebOutStringFormatNL("<div class='iconbutton'><a href='/sale'>" & ToolWebNGTranslateText(26007) & "</a></div>"); end;
  //WebOutStringFormatNL("<div class='iconbutton'><a href='/settings'>settings</a></div>");
  //WebOutStringFormatNL("<div class='iconbutton'><a href='/contact'>contact</a></div>");

  if (SWb.ShowShop) then begin WebOutStringFormatNL("<div class='iconbutton'><a href='/shop/checkout'>" & ToolWebNGTranslateText(26005) & "</a></div>"); end;
  if (true) then begin WebOutStringFormatNL("<div class='iconbutton'><a href='/report'>" & ToolWebNGTranslateText(26006) & "</a></div>"); end;

  SimpleEndPage;
end;

procedure SimpleLogin(string wantedpath)
begin
  record WebNGElementVc WEr;

  SimpleBeginPage("");

  RecordNew(WEr);
  WEr.Type = kElementTypeLoginControl;
  ShowLoginControlElement(WEr,wantedpath);

  SimpleEndPage;
end;

global
function Boolean HandleSimplePath(string apath)
begin
  Boolean res; //,justloggedout;
  record RcVc RepSpec;
  Array record ActDisp2Vc aADr;
  Integer i,rwcnt;
  date dt;
  record SimpleWebBlock SWb;
  record WebNGStructVc WSr;
  string 255 path,mpath,node;
  record IVVc IVr;
  record ORVc ORr;
  row ORVc ORrw;
  record WebNGShopBasketVc WSBr;

  BlockLoad(SWb);

//  if (GetSessionString("justloggedout")=="true") then begin
//    justloggedout = true;
//    PutSessionString("justloggedout","");
//  end else begin
//    justloggedout = false;
//  end;

  if (SWb.EnableSimpleWeb==0) then begin goto LHandleSimplePathOut; end;

  if (LoginState==false and SWb.ForceLogin) then begin
    SimpleLogin(apath);
    res = true;
    goto LHandleSimplePathOut;
  end;

  mpath = apath;
  node = removenextnode(mpath);

  switch (node) begin
    case "/":
      SimpleMainPage(apath);
      res = true;
    case "":
      SimpleMainPage(apath);
      res = true;
    case "calendar":
      SimpleBeginPage(apath);

      dt = CurrentDate;
      dt.day = 1;
      RepSpec.sStartDate = AddDay(dt,-GetDateId(dt)+1);
      dt = AddDay(AddMonth(dt,1),-1);
      RepSpec.sEndDate = AddDay(dt,7-GetDateId(dt));
      RepSpec.d1 = RepSpec.sStartDate;
      RepSpec.f12 = CurrentCust;
      RepSpec.flags[4] = DateDiff(RepSpec.sEndDate,RepSpec.sStartDate);
      FillCalendarRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);
      FillCalendarInvoicesRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);
      FillCalendarOrdersRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);
      FillCalendarDeliveriesRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);

      for (i=0;i<aADr.length;i=i+1) begin
        DisplayCalendarItem(-1,aADr[i]);
      end;

      WebOutCalendar(RepSpec);
      SimpleEndPage;

      res = true;
    case "shop":
      SimpleBeginPage(apath);
      ShopApp2(WSr,mpath,true);
      SimpleEndPage;
      res = true;
    case "orders":
      SimpleBeginPage(apath);
      ShowOrders(WSr,false);
      SimpleEndPage;
      res = true;
    case "invoices":
      SimpleBeginPage(apath);
      ShowInvoices(WSr,false);
      SimpleEndPage;
      res = true;
    case "catalogue":
      res = true;
    case "account":
      res = true;
    case "invoice":
      SimpleBeginPage(apath);
      IVr.SerNr = mpath; //WebGetArg("ivnr");
      if (ReadFirstMain(IVr,1,true)) then begin
        ShowInvoice("invoice",true,false,IVr,WSBr);
      end;
      SimpleEndPage;
      res = true;
    case "order":
      SimpleBeginPage(apath);
      ORr.SerNr = mpath; //WebGetArg("ivnr");
      if (ReadFirstMain(ORr,1,true)) then begin
        ShowOrder("order",true,false,ORr,WSBr);
      end;

      WebOutString("<form action=""/duporder/" & mpath & """>");
      WebOutString("<button type=""submit"">" & ToolWebNGTranslateText(26013) & "</button>");
      WebOutString("</form>");

      SimpleEndPage;
      res = true;
    case "duporder":
      ORr.SerNr = mpath; //WebGetArg("ivnr");
      if (ReadFirstMain(ORr,1,true)) then begin
        rwcnt = MatRowCnt(ORr);
        for (i = 0; i<rwcnt; i = i + 1) begin
          MatRowGet(ORr,i,ORrw);
          //ShopAddToBasket(ORrw.ArtCode,ORrw.Quant,"",""); // erikfix
        end;
      end;
      SimpleMainPage(apath);
      res = true;
    case "delivery":
    case "report":
      SimpleBeginPage(apath);
      ReportDefaults(RepSpec,"CustPS2Rn");
      SetupCustPS2Rn(CurrentCust,RepSpec);
      RepSpec.Media = mtHttp;
      RunReport(RepSpec,0);
      SimpleEndPage;
      res = true;
    case "sale":
      SimpleBeginPage(apath);
      ShowFilteredShopItems(SWb.SaleItemClass);
      SimpleEndPage;
  end;

LHandleSimplePathOut:;
  HandleSimplePath = res;
end;

global webpublic
procedure WebDayPlanner()
begin
  Array record ActDisp2Vc aADr;
  date dt;
  record RcVc RepSpec;
  LongInt i;

  WebOutString("<div class='k4DayPlanner'>");
  WebOutString(WebGetArg("date"));

  dt = WebGetArg("date");
  RepSpec.sStartDate = dt;
  RepSpec.sEndDate = dt;
  RepSpec.d1 = dt;
  RepSpec.f12 = CurrentCust;
  RepSpec.flags[4] = 1;

  FillCalendarRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);
  FillCalendarInvoicesRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);
  FillCalendarOrdersRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);
  FillCalendarDeliveriesRemote(RepSpec,RepSpec.flags[4],CalendarSystem,aADr);

  LogText(0,"aADr.length: " & aADr.length & " date: " & dt);

  for (i=0;i<aADr.length;i=i+1) begin
    DisplayCalendarItem(-1,aADr[i]);
  end;

  WebOutDayPlanner(RepSpec);

  WebOutString("</div>");

end;
