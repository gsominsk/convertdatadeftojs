//tools
external procedure ToolWebOutElementTextFormat(record WebNGElementVc);
external function string 255 GetNextValue(var string);
external procedure AddToSortedArray(string,string,var array string,var array string,var integer);
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external function string 255 GetStartStructLink();
external function string 255 GetTranslatedNameCountry(record WebNGCountryVc);
external function string 255 GetTranslatedNameLanguage(record WebNGLanguageVc);
external function string 255 GetTranslatedNameRegion(record WebNGCountryRegionVc);
external function string 255 GetTranslatedNameContentCategory(record WebNGContentCatVc);
external function string 255 CurrentWebLang();
external function string 10 ToolWebNGGetCountry();
external function string 255 GetLinkToStruct(LongInt,boolean);
external function boolean LoginState;
external procedure ToolWebOutContentTextFormat(record WebNGContentVc,Boolean);
external function Boolean FindMatchingContentTranslation(record WebNGContentVc,var record WebNGTranslateVc);
external procedure GetListOfCompaniesForCountry(string,var array integer,var array string);
external function string 255 GetCountrySelectStructLink();
external function string 255 GetWebNGFieldProduct();
external function string 255 GetWebNGFieldProductName();
external procedure RollbackOneRequestURL();
//translation
external function string 255 ToolWebNGTranslateText(integer);
//elements
external procedure ShowWebElementTemplate(string,integer);
external procedure ShowSubWebElement(record WebNGElementVc,integer);
external procedure ApplyTemplateToElement(var record WebNGElementVc,string,integer);
//contactus
external procedure ShowContactUsElement(record WebNGElementVc);
//live chat
external procedure ShowLiveChatElement(record WebNGElementVc);
//register cu
external procedure ShowCURegElement(record WebNGElementVc);
external procedure ShowForgotPasswordElement(record WebNGElementVc);
//shop
external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
external procedure ShowShopPaymentTypes();
external function string 255 GetLinkToCheckoutPage();
external procedure ShowShopCatalogCategories(record WebNGElementVc,string);
//university
external procedure ShowUniversityWebTestList(record WebNGElementVc);
//createmailform
external procedure ShowCreateMailForm(record WebNGElementVc);
//webng
external procedure RedirectToRequestedPage();
//OLD:code
external procedure ShowRecommendedItems();
external procedure OldCodeWebHBSDivShopBasketNew();
//std
external function string 255 ConvertXml(string);
external procedure ShowSearchProductsForm();
external function string 255 GetWebHostAndPort(Boolean);
external procedure ShowForumBreadCrumbs(record WebNGElementVc);
external procedure ShowFilteredShopItems(string);
external procedure HansaWorldRegisterApp();
external procedure HansaWorldIDResetPassword();
external outer procedure ShowWebWatchpointIssue();
external procedure ShowWebStandardIDLink(record WebNGElementVc);
external procedure WebInstallationForm(record WebNGElementVc);
external procedure ShowDownloadProductElement(record WebNGElementVc);
external procedure ShowDownloadProductElement2(record WebNGElementVc);
external procedure ShowMyServerAdminMenu(record WebNGElementVc);
external procedure ShowSingleMPItem(record WebNGElementVc);
external procedure ShowIBMLoginWindow();
external procedure ShowForumButtonWidget(record WebNGElementVc);
external procedure ShowForumPostWidget(record WebNGElementVc);
external function Boolean DisplayStdIDLoginLink();
external procedure ShowForumSearchWidget(record WebNGElementVc);


procedure ShowLanguageSelectElement()
begin
  record WebNGLanguageVc WLr;
  row WebNGLanguageVc WLrw;
  record WebNGCountryVc WCr;
  string 10 curlang;
  string 255 country;
  string 255 tstr,lang,allowedlangs;
  boolean showall;
  array string 20 langlist;
  array string 20 codelist;
  integer listlen,i;
  
  listlen = 0;
  curlang = CurrentWebLang;
  country = ToolWebNGGetCountry;
  
  WebOutTagOpen("<form method=""POST"" action=""" & FormatLink("/WebAction.hal","action=changelanguage",true,true) & """>");
  WebOutStringFormatNL("<input type=""hidden"" id=""path"" name=""path"" value=""" & WebGetArg("path") & """>");
  WebOutTagOpen("<select id=""langcode"" name=""langcode"" onchange=""submit(this.form)"">");
  
  showall = true;
  if (nonblank(country)) then begin
    WCr.Code = country;
    if (ReadFirstMain(WCr,1,true)) then begin
      if (nonblank(WCr.AllowedLanguages)) then begin
        showall = false;
        allowedlangs = WCr.AllowedLanguages;
        lang = GetNextValue(allowedlangs);
        while (nonblank(lang)) begin
          WLr.Code = lang;
          if (ReadFirstMain(WLr,1,true)) then begin
            if (WLr.Code==curlang) then begin
              tstr = " selected";
            end else begin
              tstr = "";
            end;
            tstr = tstr & " value=""" & WLr.Code & """";
            AddToSortedArray(GetTranslatedNameLanguage(WLr),tstr,langlist,codelist,listlen);
          end;
          lang = GetNextValue(allowedlangs);
        end;
      end;
    end;
  end;
  if (showall) then begin
    while (LoopMain(WLr,0,true)) begin
      if (WLr.Code==curlang) then begin
        tstr = " selected";
      end else begin
        tstr = "";
      end;
      tstr = tstr & " value=""" & WLr.Code & """";
      AddToSortedArray(GetTranslatedNameLanguage(WLr),tstr,langlist,codelist,listlen);
    end;
  end;
  for (i=0;i<listlen;i=i+1) begin
    WebOutStringFormat("<option");
    WebOutStringFormat(codelist[i]);
    WebOutStringFormat(">");
    WebOutStringFormat(langlist[i]);
    WebOutStringFormatNL("</option>");
  end;
  WebOutTagClose("</select>");
  WebOutTagClose("</form>");
  
  return;
end;

procedure ShowLinkElement(record WebNGElementVc WEr)
begin
  record WebNGStructVc WSr;
  string 255 tstr;
  
  tstr = "<a href=""";
  if (WEr.LinkToStruct!=-1) then begin
    tstr = tstr & FormatSimpleLink(GetLinkToStruct(WEr.LinkToStruct,true) & WEr.HALFunc,true);
  end else begin
    tstr = tstr & WEr.HALFunc;
  end;
  tstr = tstr & """";
  if (WEr.NoDiv==1) then begin
    if (nonblank(WEr.DivID)) then begin tstr = tstr & " id=""" & WEr.DivID & """"; end;
    if (nonblank(WEr.DivClass)) then begin tstr = tstr & " class=""" & WEr.DivClass & """"; end;
  end;
  tstr = tstr & ">";
  WebOutStringFormat(tstr);
  
  ToolWebOutElementTextFormat(WEr);
  ShowSubWebElement(WEr,1); //content
  
  WebOutStringFormat("</a>");
  
  return;
end;

procedure ShowImageElement(record WebNGElementVc WEr)
begin
  
  WebOutStringFormat("<img src=""" & WEr.HALFunc & """");
  if (WEr.NoDiv==1) then begin
    if (nonblank(WEr.DivClass)) then begin WebOutStringFormat(" class=""" & WEr.DivClass & """"); end;
  end;
  WebOutStringFormat(">");
  
  return;
end;

procedure ShowLoginStateElement(record WebNGElementVc WEr)
begin
  record WebNGStructVc WSr;
  string 255 tstr;

  if (LoginState==true) then begin
    WebOutTagOpen("<a href=""" & FormatLink("/WebUpdatingAction.hal","?action=logout&path=" & ConvertXml(WebGetArg("path")),true,true) & """>");
    WebOutStringFormat(ToolWebNGTranslateText(20026)); //Logout
    WebOutTagClose("</a>");  
  end else begin  
    tstr = "<a href=""";
    if (WEr.LinkToStruct!=-1) then begin
      tstr = tstr & FormatSimpleLink(GetLinkToStruct(WEr.LinkToStruct,true),true);
    end else begin
      tstr = tstr & WEr.HALFunc;
    end;
    tstr = tstr & """";
    if (WEr.NoDiv==1) then begin
      if (nonblank(WEr.DivID)) then begin tstr = tstr & " id=""" & WEr.DivID & """"; end;
      if (nonblank(WEr.DivClass)) then begin tstr = tstr & " class=""" & WEr.DivClass & """"; end;
    end;
    tstr = tstr & ">";
    WebOutTagOpen(tstr);

    WebOutStringFormat(ToolWebNGTranslateText(20049)); //Login

    WebOutTagClose("</a>");
  end;
  return;
end;

global
procedure ShowLoginControlElement(record WebNGElementVc WEr,string afterlogin)
begin
  string 255 requesturl;
  array integer numberlist;
  array string 244 namelist;
  integer i,err;
  boolean firstline;
  transaction string 20 gWebAppName;
  
  WebOutTagOpen("<div id=""loginbox"">");
  if (gWebAppName=="standard") then begin
    WebOutStringFormat("<div class=""error"">" & ToolWebNGTranslateText(20243) & "</div>"); //Reopen Marketplace
    goto LShowLoginControlElement;
  end;
  if (GetSessionString("wantedtologin")=="true") then begin
    RollbackOneRequestURL;
    PutSessionString("wantedtologin","");
  end;
  
  RollbackOneRequestURL;
  
  ToolWebOutElementTextFormat(WEr);

  if (DisplayStdIDLoginLink==false) then begin
    WebOutTagOpen("<form method=""POST"" action=""" & FormatLink("/dologin","",true,true) & """>");
  end;
  if (nonblank(GetCookie("HSESSION")) or nonblank(GetCookie("langcode")) or nonblank(GetCookie("country"))) then begin
    WebOutStringFormatNL("<input type=""hidden"" id=""cooksess"" name=""cooksess"" value=""true"">");
  end;

  WebOutStringFormatNL("<input type=""hidden"" id=""failed"" name=""failed"" value=""" & FormatLink("WebUpdatingAction.hal","action=afterlogin&failed=1",true,true) & """>");

  if (afterlogin<>"") then begin
    WebOutStringFormatNL("<input type=""hidden"" id=""custpage"" name=""custpage"" value=""" & afterlogin & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""userpage"" name=""userpage"" value=""" & afterlogin & """>");
  end else begin
    WebOutStringFormatNL("<input type=""hidden"" id=""custpage"" name=""custpage"" value=""" & FormatLink("WebUpdatingAction.hal","action=afterlogin&cust=1",true,true) & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""userpage"" name=""userpage"" value=""" & FormatLink("WebUpdatingAction.hal","action=afterlogin&user=1",true,true) & """>");
  end;

  numberlist[0] = 0;
  GetListOfCompaniesForCountry(ToolWebNGGetCountry,numberlist,namelist);
  if (numberlist[0]>1) then begin
    firstline = true;
    for (i=1;i<=numberlist[0];i=i+1) begin
      if (firstline) then begin
        WebOutStringFormat("<p><span class=""loginlabel"">" & ToolWebNGTranslateText(25902) & "</span>"); //Select which company you are a customer of:
        WebOutTagOpen("<select name=""company"" id=""company"">");
        firstline = false;
      end;
      WebOutTagOpen("<option value=""" & numberlist[i] & """>");
      WebOutStringFormat(namelist[i]);
      WebOutTagClose("</option>");
    end;
    if (firstline==false) then begin
      WebOutTagClose("</select>");
      WebOutStringFormat("</p>");
    end;
  end else begin
    if (numberlist[0]==1) then begin
      WebOutStringFormatNL("<input type=""hidden"" id=""company"" name=""company"" value=""" & numberlist[1] & """>");
    end;
  end;
  
  WebOutStringFormatNL("<p class=""loginline1""><span class=""loginlabel"">" & ToolWebNGTranslateText(20154) & "</span><input type=""text"" id=""login"" name=""login""></p>"); //Customer Code
  WebOutStringFormatNL("<p class=""loginline2""><span class=""loginlabel"">" & ToolWebNGTranslateText(20052) & "</span><input type=""password"" id=""passwd"" name=""passwd""></p>"); //Password
  WebOutStringFormatNL("<p class=""loginline3""><input type=""submit"" class=""loginbutton"" id=""s1"" name=""s1"" value=""" & ToolWebNGTranslateText(20049) & """></p>"); //Login
  WebOutTagClose("</form>");
  if (GetSessionString("loginfailed")=="true") then begin
    PutSessionString("loginfailed","");
    WebOutStringFormat("<div class=""error"">" & ToolWebNGTranslateText(20081)); //Login failed
    if (GetSessionString("login_err")!="") then begin
      err = StringToLongint(GetSessionString("login_err"));
      switch (err) begin
        case 1:
          WebOutString("<br>" & ToolWebNGTranslateText(25842));
      end;
      PutSessionString("loginfailed","");
    end;
    WebOutStringFormat("</div>");
  end;
LShowLoginControlElement:;  
  WebOutTagClose("</div>");
  return;
end;

procedure ShowShoppingBasketElement()
begin
  OldCodeWebHBSDivShopBasketNew;
  return;
end;

function boolean ShowCountryNameElement(record WebNGElementVc WEr)
begin
  string 255 country;
  record WebNGCountryVc WCr;
  country = ToolWebNGGetCountry;
  if (nonblank(country)) then begin
    WCr.Code = country;
    if (ReadFirstMain(WCr,1,true)) then begin
      WebOutStringFormat(GetTranslatedNameCountry(WCr));
    end else begin
      WebOutStringFormat(country);
    end;
  end else begin
    WebOutStringFormat("Global");
  end;
  return;
end;

procedure DisplayContentListLine(record WebNGContentVc WCr,record WebNGContentStyleVc WCSr,var Boolean firstline)
begin
  record WebNGElementVc WEr;
  string 255 countrylink,tstr;
  
  if (firstline) then begin
    tstr = "<ul";
    if (nonblank(WCSr.DivID)) then begin tstr = tstr & " id=""" & WCSr.DivID & """"; end;
    if (nonblank(WCSr.DivClass)) then begin tstr = tstr & " class=""" & WCSr.DivClass & """"; end;
    tstr = tstr & ">";
    WebOutTagOpen(tstr);
    firstline = false;
  end;
  WebOutTagOpen("<li>");
  
  if (nonblank(WCSr.ElementTemplate)) then begin
    ShowWebElementTemplate(WCSr.ElementTemplate,0); //before
  end;

  if (nonblank(WCr.Country)) then begin
    countrylink = WCr.Country & "/";
  end else begin
    countrylink = "";
  end;
  
  tstr = FormatSimpleLink(GetLinkToStruct(WCSr.HandlerAppNode,true) & countrylink & WCr.SerNr,true);
  WebOutTagOpen("<a href=""" & tstr & """>");
  ToolWebOutContentTextFormat(WCr,true);
  WebOutTagClose("</a>");

  if (nonblank(WCSr.ElementTemplate)) then begin
    ShowWebElementTemplate(WCSr.ElementTemplate,2); //after
  end;

  WebOutTagClose("</li>");
  return;
end;

procedure AddCountryToArray(string country,var array string countries)
begin
  integer i;
  
  i = StringToInt(countries[0]);
  i = i + 1;
  countries[i] = country;
  countries[0] = i;
  
  return;
end;

function boolean CountryInArray(string country,array string countries)
begin
  boolean res;
  integer i,cnt;
  
  cnt = StringToInt(countries[0]);
  for (i=1;i<=cnt;i=i+1) begin
    if (countries[i]==country) then begin
      res = true;
      i = cnt+1;
    end;
  end;
  
  CountryInArray = res;
  return;
end;

procedure ParseParamString(string param,string country,var string outstyle,var array string outcountries)
begin
  record WebNGContentStyleVc WCSr;
  string 255 node;

  node = GetNextValue(param);
  outstyle = node;

  outcountries[0] = "0";
  if (nonblank(country)) then begin
    AddCountryToArray(country,outcountries);
  end else begin
    node = GetNextValue(param);
    while (nonblank(node)) begin
      if (node=="usecurrentcountry") then begin
        node = ToolWebNGGetCountry;
      end;
      AddCountryToArray(node,outcountries);
      node = GetNextValue(param);
    end;
  end;
  
  return;
end;

procedure DisplayCountryHeading(string country,string divclass,var boolean firstline)
begin
  string 255 tstr,headertext;
  record WebNGCountryVc WCr;
    
  if (firstline==false) then begin
    WebOutTagClose("</ul>");
    firstline = true;
  end;
  
  WCr.Code = country;
  if (ReadFirstMain(WCr,1,true)) then begin
    headertext = GetTranslatedNameCountry(WCr);
  end;
  
  if (blank(headertext)) then begin
    headertext = ToolWebNGTranslateText(25300); //Other
  end;
  
  tstr = "<h1";
  if (nonblank(divclass)) then begin
    tstr = tstr & " class=""" & divclass & """";
  end;
  tstr = tstr & ">";
  WebOutTagOpen(tstr);
  
  WebOutStringFormat(headertext);
  
  WebOutTagClose("</h1>");
  
  return;
end;

procedure DisplayCategoryHeading(string category,string divclass,var boolean firstline)
begin
  string 255 tstr,headertext;
  record WebNGContentCatVc WCCr;
    
  if (firstline==false) then begin
    WebOutTagClose("</ul>");
    firstline = true;
  end;
  
  WCCr.Code = category;
  if (ReadFirstMain(WCCr,1,true)) then begin
    headertext = GetTranslatedNameContentCategory(WCCr);
  end;
  
  if (blank(headertext)) then begin
    headertext = "Other";
  end;
  
  tstr = "<h1";
  if (nonblank(divclass)) then begin
    tstr = tstr & " class=""" & divclass & """";
  end;
  tstr = tstr & ">";
  WebOutTagOpen(tstr);
  
  WebOutStringFormat(headertext);
  
  WebOutTagClose("</h1>");
  
  return;
end;

procedure DisplayRandomContentLines(array record WebNGContentVc aWCr,record WebNGContentStyleVc WCSr,integer acnt,integer maxcnt,var boolean firstline)
begin
  integer i,ipos,cnt,lmaxcnt;
  record WebNGContentVc WCr;
  
  cnt = 0;
  lmaxcnt = maxcnt;
  if (acnt>0) then begin
    if (lmaxcnt>acnt) then begin
      lmaxcnt = acnt;
    end;
    while (cnt<lmaxcnt) begin
      Randomize;
      ipos = Random(0,acnt-1);
      if (ipos<acnt) then begin
        WCr = aWCr[ipos];
        if (WCr.SerNr>0) then begin
          DisplayContentListLine(WCr,WCSr,firstline);
          cnt = cnt + 1;
          WCr.SerNr = -1;
          aWCr[ipos] = WCr;
        end;
      end;
    end;
  end;

  return;
end;

procedure DisplayAlphabeticalContentLines(array record WebNGContentVc aWCr,record WebNGContentStyleVc WCSr,integer acnt,integer maxcnt,var boolean firstline)
begin
  record WebNGContentVc WCr,WC2r;
  Integer i;
  Boolean Sorted;
  
  while (!Sorted) begin
    Sorted = true;
    for (i=0;i<acnt-1;i=i+1) begin
      WCr = aWCr[i];
      WC2r = aWCr[i+1];
      if (WCr.Comment>WC2r.Comment) then begin
        aWCr[i] = WC2r;
        aWCr[i+1] = WCr;
        Sorted = false;
      end;
    end;
  end;
  
  i = 0;
  while (i<acnt and i<maxcnt) begin
    WCr = aWCr[i];
    DisplayContentListLine(WCr,WCSr,firstline);
    i = i + 1;
  end;

  return;
end;

global
procedure ShowContentList(string style,string country,string category,Boolean fulllistf,Boolean outputaspagef)
begin
  record WebNGContentVc WCr;
  record WebNGContentStyleVc WCSr;
  Boolean firstline;
  Boolean foundf,testf;
  Integer maxcnt,cnt;
  LongInt rcnt,ipos;
  array record WebNGContentVc aWCr;
  Integer acnt;
  string 255 mstyle;
  array string 255 countries;
  string 255 key;
  integer keylen;
  string 255 currentcountry,currentcategory;
  record WebNGTranslateVc WTr;
  
  ParseParamString(style,country,mstyle,countries);
  
  firstline = true;
  foundf = true;
  WCSr.Code = mstyle;
  if (ReadFirstMain(WCSr,1,true)) then begin
    maxcnt = 10000;
    cnt = 0;
    if (fulllistf==false) then begin
      maxcnt = WCSr.ElementCount;
      if (maxcnt<=0) then begin
        maxcnt = 2;
      end;
    end;

    switch (WCSr.SortingFlag) begin
      case 1: // Random
        acnt = 0;
        foundf = true;
        key = "ContentStyle";
        WCr.ContentStyle = WCSr.Code;
        
        if (fulllistf) then begin
          currentcountry = chr(255);
          currentcategory = chr(255);
  
          if (WCSr.GroupByCountry==1) then begin
            key = key & "Country";
            WCr.Country = currentcountry;
          end;
          if (WCSr.GroupByCategory==1) then begin
            key = key & "Cat";
            WCr.ContentCategory = currentcategory;
          end;
        end;
        
        while (LoopBackKey(key,WCr,1,foundf)) begin
          testf = foundf;
          if (WCr.ContentStyle!=WCSr.Code) then begin
            testf = false;
          end;
          if (countries[0]!="0") then begin
            if (CountryInArray(WCr.Country,countries)==false) then begin
              testf = false;
            end;
          end;
          if (FindMatchingContentTranslation(WCr,WTr)==false) then begin
            testf = false;
          end;
  
          if (fulllistf and testf) then begin
            if (WCSr.GroupByCountry==1) then begin
              if (WCr.Country!=currentcountry) then begin
                DisplayRandomContentLines(aWCr,WCSr,acnt,maxcnt,firstline);
                acnt = 0;
                currentcountry = WCr.Country;
                DisplayCountryHeading(currentcountry,WCSr.CountryHeaderDivClass,firstline);
              end;
            end;
            if (WCSr.GroupByCategory==1) then begin
              if (WCr.ContentCategory!=currentcategory) then begin
                DisplayRandomContentLines(aWCr,WCSr,acnt,maxcnt,firstline);
                acnt = 0;
                currentcategory = WCr.ContentCategory;
                DisplayCategoryHeading(currentcategory,WCSr.CatHeaderDivClass,firstline);
              end;
            end;
          end;
  
          if (testf) then begin
            aWCr[acnt] = WCr;
            acnt = acnt + 1;
          end;
        end;
        if (acnt>0) then begin
          DisplayRandomContentLines(aWCr,WCSr,acnt,maxcnt,firstline);
        end;
      case 0: // Newest First
        key = "ContentStyle";
        keylen = 2;
        WCr.ContentStyle = WCSr.Code;
        WCr.SpecDate = AddYear(CurrentDate,1);
  
        if (fulllistf) then begin
          currentcountry = chr(255);
          currentcategory = chr(255);
  
          if (WCSr.GroupByCountry==1) then begin
            key = key & "Country";
            keylen = keylen + 1;
            WCr.Country = currentcountry;
          end;
          if (WCSr.GroupByCategory==1) then begin
            key = key & "Cat";
            keylen = keylen + 1;
            WCr.ContentCategory = currentcategory;
          end;
        end;
  
        while (LoopBackKey(key,WCr,2,foundf)) begin
          if (cnt>=maxcnt) then begin
            foundf = false;
          end;
          if (WCr.ContentStyle!=WCSr.Code) then begin
            foundf = false;
          end;
          testf = foundf;
          if (countries[0]!="0") then begin
            if (CountryInArray(WCr.Country,countries)==false) then begin
              testf = false;
            end;
          end;
          if (FindMatchingContentTranslation(WCr,WTr)==false) then begin
            testf = false;
          end;
          if (fulllistf and testf) then begin
            if (WCSr.GroupByCountry==1) then begin
              if (WCr.Country!=currentcountry) then begin
                currentcountry = WCr.Country;
                DisplayCountryHeading(currentcountry,WCSr.CountryHeaderDivClass,firstline);
              end;
            end;
            if (WCSr.GroupByCategory==1) then begin
              if (WCr.ContentCategory!=currentcategory) then begin
                currentcategory = WCr.ContentCategory;
                DisplayCategoryHeading(currentcategory,WCSr.CatHeaderDivClass,firstline);
              end;
            end;
          end;
          if (testf) then begin
            DisplayContentListLine(WCr,WCSr,firstline);
            cnt = cnt + 1;
          end;
        end;
      case 2: // Alphabetical
        key = "ContentStyle";
        WCr.ContentStyle = WCSr.Code;
  
        if (fulllistf) then begin
          currentcountry = chr(255);
          currentcategory = chr(255);
  
          if (WCSr.GroupByCountry==1) then begin
            key = key & "Country";
            WCr.Country = currentcountry;
          end;
          if (WCSr.GroupByCategory==1) then begin
            key = key & "Cat";
            WCr.ContentCategory = currentcategory;
          end;
        end;
  
        while (LoopKey(key,WCr,1,foundf)) begin
          if (cnt>=maxcnt) then begin
            foundf = false;
          end;
          if (WCr.ContentStyle!=WCSr.Code) then begin
            foundf = false;
          end;
          testf = foundf;
          if (countries[0]!="0") then begin
            if (CountryInArray(WCr.Country,countries)==false) then begin
              testf = false;
            end;
          end;
          if (FindMatchingContentTranslation(WCr,WTr)==false) then begin
            testf = false;
          end;
          WCr.Comment = WTr.Comment;
          if (fulllistf and testf) then begin
            if (WCSr.GroupByCountry==1) then begin
              if (WCr.Country!=currentcountry) then begin
                DisplayAlphabeticalContentLines(aWCr,WCSr,acnt,maxcnt,firstline);
                acnt = 0;
                currentcountry = WCr.Country;
                DisplayCountryHeading(currentcountry,WCSr.CountryHeaderDivClass,firstline);
              end;
            end;
            if (WCSr.GroupByCategory==1) then begin
              if (WCr.ContentCategory!=currentcategory) then begin
                DisplayAlphabeticalContentLines(aWCr,WCSr,acnt,maxcnt,firstline);
                acnt = 0;
                currentcategory = WCr.ContentCategory;
                DisplayCategoryHeading(currentcategory,WCSr.CatHeaderDivClass,firstline);
              end;
            end;
          end;
  
          if (testf) then begin
            aWCr[acnt] = WCr;
            acnt = acnt + 1;
          end;
        end;
        if (acnt>0) then begin
          DisplayAlphabeticalContentLines(aWCr,WCSr,acnt,maxcnt,firstline);
        end;
    end;
    
    if (firstline==false) then begin
      WebOutTagClose("</ul>");
    end;
  end;

  return;
end;

global
procedure ShowLoggedInCustomer()
begin
  record CUVc CUr;
  if (LoginState) then begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)) then begin
      WebOutStringFormat("Welcome customer: " & CUr.Name & " (Code: " & CUr.Code & ")");
    end;
  end else begin
    WebOutStringFormat("Not logged in");
  end;
  
  WebOutStringFormat("<br>Current langcode = " & CurrentWebLang);
  WebOutStringFormatNL("<br>Current country = " & ToolWebNGGetCountry); 
  return;
end;

global
procedure ShowCountryDropDownElement(record WebNGElementVc WEr)
begin
  record WebNGCountryVc WCr;
  boolean firstline;
  string 255 currentcountry,selected;
  
  currentcountry = ToolWebNGGetCountry;
  firstline = true;
  while (LoopKey("Comment",WCr,1,true)) begin
    if (firstline) then begin
      WebOutTagOpen("<select id=""country"" name=""country"">");
      firstline = false;
    end;
    if (WCr.Code==currentcountry) then begin
      selected = "selected ";
    end else begin
      selected = "";
    end;
    WebOutStringFormatNL("<option " & selected & "value=""" & WCr.Code & """>" & GetTranslatedNameCountry(WCr) & "</option>");
  end;
  if (firstline==false) then begin
    WebOutTagClose("</select>");
  end;
  return;
end;

global
procedure ShowWorldMapControl(record WebNGElementVc WEr)
begin
  record WebNGCountryRegionVc WCRr;
  record WebNGCountryVc WCr;
  string 255 region;
  boolean showregions;
  array string 255 list,list2;
  integer i,listcnt;
  boolean testf,foundf;
  boolean firstline;
  integer linecnt,colcnt;
  
  showregions = false;
  region = WebGetArg("region");
  if (blank(region)) then begin
    showregions = true;
  end;  

  //a few blank divs for layout/formatting, e.g. non interactive worldmap pieces
  for (i=0;i<10;i=i+1) begin
    WebOutTagOpen("<div id=""map" & i & """>");
    WebOutTagClose("</div>");
  end;

  while (LoopMain(WCRr,0,true)) begin
    WebOutTagOpen("<a id=""mapregion"" class=""" & WCRr.Code & """ href=""?region=" & WCRr.Code & """>");
    WebOutTagClose("</a>");
  end;
  RecordNew(WCRr);
  ResetLoop(WCRr);
    
  if (showregions) then begin
    while (LoopMain(WCRr,0,true)) begin
      testf = true;
      foundf = false;
      ResetLoop(WCr);
      WCr.CountryRegion = WCRr.Code;
      while (LoopKey("CountryRegion",WCr,1,true)) begin
        if (WCr.CountryRegion != WCRr.Code) then begin
          testf = false;
        end;
        if (testf) then begin
          if (WCr.ShowOnWeb==1) then begin
            foundf = true;
            testf = false;
          end;
        end;
      end;
      
      if (foundf) then begin
        AddToSortedArray(GetTranslatedNameRegion(WCRr),WCRr.Code,list,list2,listcnt);
      end;
    end;
    
    foundf = true;
    RecordNew(WCr);
    ResetLoop(WCr);
    WCr.CountryRegion = "";
    while (LoopKey("CountryRegion",WCr,1,true)) begin
      if (WCr.CountryRegion!="") then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (WCr.ShowOnWeb==1) then begin
          AddToSortedArray(GetTranslatedNameCountry(WCr),"%" & WCr.Code,list,list2,listcnt);
        end;
      end;
    end;

    WebOutTagOpen("<div id=""mapText"">");
  
    WebOutTagOpen("<h1>");
    WebOutStringFormat(ToolWebNGTranslateText(25301)); //Choose your region
    WebOutTagClose("</h1>");

    linecnt = 0;
    firstline = true;
    for (i=0;i<listcnt;i=i+1) begin
      linecnt = linecnt + 1;
      if (firstline) then begin
        WebOutTagOpen("<ul>");
        firstline = false;
      end;
      if (left(list2[i],1)!="%") then begin
        WebOutStringFormatNL("<li><a href=""" & FormatLink("","?region=" & list2[i],true,true) & """>" & list[i] & "</a></li>");
      end else begin
        WebOutStringFormatNL("<li><a href=""" & FormatLink("/WebAction.hal","?action=changecountry&country=" & mid(list2[i],1,255),true,true) & """>" & list[i] & "</a></li>");
      end;
      if (linecnt==15) then begin
        WebOutTagClose("</ul>");
        firstline = true;
        linecnt = 0;
      end;
    end;
    if (firstline==false) then begin
      WebOutTagClose("</ul>");
    end;
    WebOutTagClose("</div>");
  end else begin
    WebOutTagOpen("<div id=""mapText"">");
  
    WebOutTagOpen("<h1>");
    WebOutStringFormat(ToolWebNGTranslateText(25302)); //Choose your country
    WebOutTagClose("</h1>");
    WebOutTagOpen("<div id=""countrybackbutton"">");
    WebOutStringFormat("(");
    WebOutTagOpen("<a href=""" & FormatSimpleLink(GetCountrySelectStructLink,true) & """>");
    WebOutStringFormat("&lt;&lt; " & ToolWebNGTranslateText(25509));
    WebOutTagClose("</a>");
    WebOutStringFormat(")");
    WebOutTagClose("</div>");

    testf = true;
    WCr.CountryRegion = region;
    while (LoopKey("CountryRegion",WCr,1,testf)) begin
      if (WCr.CountryRegion!=region) then begin
        testf = false;
      end;
      if (testf and WCr.ShowOnWeb==1) then begin
        AddToSortedArray(GetTranslatedNameCountry(WCr),WCr.Code,list,list2,listcnt);
      end;
    end;
    colcnt = 0;
    linecnt = 0;
    firstline = true;
    for (i=0;i<listcnt;i=i+1) begin
      linecnt = linecnt + 1;
      if (firstline) then begin
        colcnt = colcnt+1;
        WebOutTagOpen("<ul class=""col" & colcnt & """>");
        firstline = false;
      end;
      WebOutStringFormatNL("<li><a href=""" & FormatLink("/WebAction.hal","?action=changecountry&country=" & list2[i],true,true) & """>" & list[i] & "</a></li>");
      if (linecnt==15) then begin
        WebOutTagClose("</ul>");
        firstline = true;
        linecnt = 0;
      end;
    end;
    if (firstline==false) then begin
      WebOutTagClose("</ul>");
    end;

    WebOutTagClose("</div>");
  end;

  return;
end;

procedure ShowAddToBasketLink(record WebNGElementVc WEr)
begin
  string 255 link;
  
  if (nonblank(WEr.HALFunc)) then begin
    link = FormatLink("/WebUpdatingAction.hal","?action=addtobasket&product=" & ConvertXml(WEr.HALFunc),true,true);
    WebOutTagOpen("<a href=""" & link & """>");
  end;

  WebOutStringFormat(ToolWebNGTranslateText(25510)); //Add to basket  
  
  if (nonblank(WEr.HALFunc)) then begin
    WebOutTagClose("</a>");
  end;
  return;
end;

procedure ShowCheckoutLink(record WebNGElementVc WEr)
begin
  record WebNGShopBasketVc WSBr;
  string 255 link;
  
  if (true) then begin //TODO: get from Setting: Checkout Element only shows when there are items in the basket
    if (GetShoppingBasket(WSBr,0)) then begin
      if (MatRowCnt(WSBr)>0) then begin //stuff in basket
        link = FormatSimpleLink(GetLinkToCheckoutPage,true);;
        WebOutTagOpen("<a href=""" & link & """>");

        WebOutStringFormat(ToolWebNGTranslateText(25508)); //Proceed to Checkout
        
        WebOutTagClose("</a>");
      end;
    end;
  end;
  return;
end;

procedure ShowMiniShoppingBasket(record WebNGElementVc WEr)
begin
  WebOutStringFormat("Shopping basket");
  return;
end;

procedure ShowWebNGFieldValue(record WebNGElementVc WEr)
begin
  switch (WEr.HALFunc) begin
    case "currentproduct": 
      WebOutStringFormat(GetWebNGFieldProduct);
    case "currentproductname": 
      WebOutStringFormat(GetWebNGFieldProductName);
  end;
  return;
end;

procedure OutputCountriesForRegion(string region,array string countryarr,integer alen)
begin
  integer i;
  integer colcnt,rwcnt;
  record WebNGCountryVc WCr;
  record WebNGCountryRegionVc WCRr;
  boolean firstline;

  if (blank(region)) then begin
    goto LOutCountriesForReg;
  end;
  
  colcnt = 4;
  rwcnt = alen/colcnt;
  if (rwcnt*colcnt<alen) then begin rwcnt = rwcnt+1; end;
  
  WebOutTagOpen("<h2>");
  WCRr.Code = region;
  if (ReadFirstMain(WCRr,1,true)) then begin
    WebOutStringFormat(GetTranslatedNameRegion(WCRr));
  end else begin
    WebOutStringFormat("&nbsp;");
  end;
  WebOutTagClose("</h2>");
  
  firstline = true;
  WebOutTagOpen("<table class=""countrylisttable"">");
  WebOutTagOpen("<tr>");
  for (i=0;i<alen;i=i+1) begin
    if (mod(i,rwcnt)==0) then begin
      if (firstline==false) then begin
        WebOutTagClose("</td>");
      end;
      firstline = false;
      WebOutTagOpen("<td class=""cltblcol"">");
    end;
    WCr.Code = countryarr[i];
    if (ReadFirstMain(WCr,1,true)) then begin
      WebOutTagOpen("<a href=""/contact/" & WCr.Code & """>");
      WebOutStringFormat(GetTranslatedNameCountry(WCr));
      WebOutTagClose("</a>");
      WebOutStringFormatNL("<br>");
    end;
  end;
  if (firstline==false) then begin
    WebOutTagClose("</td>");
  end;
  WebOutTagClose("</tr>");
  WebOutTagClose("</table>");
  WebOutStringFormatNL("<br>");
LOutCountriesForReg:;
  return;
end;

procedure ShowWebNGCountryList(record WebNGElementVc WEr)
begin
  record WebNGCountryVc WCr;
  array string 255 countryarr;
  integer alen;
  string 255 curregion;
  
  alen = 0;
  while (LoopKey("CountryRegion",WCr,1,true)) begin
    if (WCr.ShowOnWeb!=0) then begin
      if (WCr.CountryRegion!=curregion) then begin
        if (alen>0) then begin
          OutputCountriesForRegion(curregion,countryarr,alen);
          alen = 0;
        end;
        curregion = WCr.CountryRegion;
      end;
      countryarr[alen] = WCr.Code;
      alen = alen+1;
    end;
  end;
  
  if (alen>0) then begin
    OutputCountriesForRegion(curregion,countryarr,alen);
  end;
  
  return;
end;

procedure ShowWebClientWindow(record WebNGElementVc WEr)
begin
  string 255 tstr,mparam,wname,repname,shortname;
  LongInt wn;
  
  mparam = WEr.HALFunc;
  while (nonblank(mparam)) begin
    tstr = GetNextValue(mparam);
    if (left(tstr,8)=="repname=") then begin
      repname = mid(tstr,8,255);
    end else begin
      if (left(tstr,10)=="shortname=") then begin
        shortname = mid(tstr,10,255);
      end else begin
        wname = tstr;
      end;
    end;
  end;
//  if (nonblank(WebGetArg("wname"))) then begin
//    wname = WebGetArg("wname");
//  end;
//  if (nonblank(WebGetArg("repname"))) then begin
//    repname = WebGetArg("repname");
//  end;
//  if (nonblank(WebGetArg("shortname"))) then begin
//    shortname = WebGetArg("shortname");
//  end;
//  wn = StringToLongInt(WebGetArg("wn"));
  WebClientWindow(wname,repname,shortname,wn);
  
  return;
end;

procedure ShowLoggedInCustName(record WebNGElementVc WEr)
begin
  record CUVc CUr;
  record UserVc Userr;
  string 255 tstr;
  
  CUr.Code = CurrentCust;
  if (nonblank(CUr.Code)) then begin
    if (ReadFirstMain(CUr,1,true)) then begin
      tstr = CUr.Name;
    end;
  end;
  Userr.Code = CurrentUser;
  if (nonblank(Userr.Code)) then begin
    if (ReadFirstMain(Userr,1,true)) then begin
      tstr = Userr.Name;
    end;
  end;
  WebOutStringFormatNL(ConvertXml(tstr));
  
  return;
end;

procedure FindReplace(var string tstr,string find,string replace)
begin
  Integer t;

  t = InString(tstr,find);
  if (t>0) then begin
    tstr = left(tstr,t-1) & replace & right(tstr,len(tstr)-t-len(find)+1);
  end;
  
  return;
end;

procedure LinkToSubscriptionPriceList(record WebNGElementVc WEr)
begin
  string 255 link;
  
  link = WEr.HALFunc;
  FindReplace(link,"country",ToolWebNGGetCountry);
  FindReplace(link,"language",CurrentWebLang);
  
  WebOutString("<iframe src='" & link & "'></iframe>");
  return;
end;

procedure ShowWebClientLink()
begin
  string 255 link;
  
  if (nonblank(CurrentUser)) then begin
    link = "https://" & GetWebHostAndPort(true);
    WebOutStringFormatNL("<div class='webclient_link'><a href='" & link & "/startwebclient' target='blank'>" & ToolWebNGTranslateText(29020) & "</a></div>");
  end;
  
  return;
end;

global
function boolean ShowSpecialWebElement(record WebNGElementVc WEr)
begin
  boolean res;
  
  res = false;
  switch (WEr.Type) begin
    case kElementTypeLoginControl:
      ShowLoginControlElement(WEr,"");
    case kElementTypeShoppingBasket:
      ShowShoppingBasketElement;
    case kElementTypeLanguageBox:
      ShowLanguageSelectElement;
    case kElementTypeLink:
      ShowLinkElement(WEr); res = true;
    case kElementTypeImage:
      ShowImageElement(WEr);
    case kElementTypeLoginState:
      ShowLoginStateElement(WEr);
    case kElementTypeCountryName:
      ShowCountryNameElement(WEr);
    case kElementTypeShoppingBasketRecommended:
      ShowRecommendedItems;
    case kElementTypeContentList:
      ShowContentList(WEr.HALFunc,"","",false,false);
    case kElementTypeContactUsForm:
      ShowContactUsElement(WEr);
    case kElementTypeRegisterNewCustomerForm:
      ShowCURegElement(WEr);
    case kElementTypeForgotPasswordForm:
      ShowForgotPasswordElement(WEr);
    case kElementTypeWebShopAddToBasketLink:
      ShowAddToBasketLink(WEr);
    case kElementTypeWebShopCheckoutLink:
      ShowCheckoutLink(WEr);
    case kElementTypeWebShopShoppingBasketStatus:
      ShowMiniShoppingBasket(WEr);
    case kElementTypeUniversityWebTestList:
      ShowUniversityWebTestList(WEr);
    case kElementTypeWebShopProductCategoryTree:
      ShowShopCatalogCategories(WEr,"");
    case kElementTypeLiveChat:
      ShowLiveChatElement(WEr);
    case kElementTypeLoggedInUserName:
      ShowLoggedInCustName(WEr);
    case kElementTypeCreateMailForm:
      ShowCreateMailForm(WEr);
    case 90:
      ShowWebNGCountryList(WEr);
    case kElementTypeWebShopShowField:
      ShowWebNGFieldValue(WEr);
    case kElementTypeWebShopPaymentMethodButtons:
      ShowShopPaymentTypes;
    case kElementTypeWebClientWindow:
      ShowWebClientWindow(WEr);
    case kElementTypeProductSearchForm:
      ShowSearchProductsForm;
    case kElementTypeWebClientLink:
      ShowWebClientLink;
    case kElementTypeForumBreadCumbs:
      ShowForumBreadCrumbs(WEr);
    case kElementTypeExternalPriceListLink:
      LinkToSubscriptionPriceList(WEr);
    case kElementTypeFilteredProductList:
      ShowFilteredShopItems(WEr.HALFunc);
    case kElementTypeHWIDForm:
      HansaWorldRegisterApp;
    case kElementTypeHWIDResetPasswordForm:
      HansaWorldIDResetPassword;
    case kElementTypeWatchpointElement:
      ShowWebWatchpointIssue;
    case kElementTypeStandardIDLink:
      ShowWebStandardIDLink(WEr);
    case kElementTypeWebInstallForm:
      WebInstallationForm(WEr);
    case kElementTypeDownloadProductLink:
      ShowDownloadProductElement(WEr);
    case kElementTypeDownloadProductLink2:
      ShowDownloadProductElement2(WEr);
    case kElementTypeMyServerAdminMenu:
      ShowMyServerAdminMenu(WEr);
    case kElementTypeSingleMPItem:
      ShowSingleMPItem(WEr);
    case kElementTypeIBMLogin:
      ShowIBMLoginWindow;
    case kElementTypeForumPostWidget:
      ShowForumPostWidget(WEr);
    case kElementTypeForumButtonWidget:
      ShowForumButtonWidget(WEr);
    case kElementTypeForumSearchWidget:
      ShowForumSearchWidget(WEr);
    otherwise
      WebOutStringFormat("not implemented yet");
  end;
  ShowSpecialWebElement = res;
  return;
end;
