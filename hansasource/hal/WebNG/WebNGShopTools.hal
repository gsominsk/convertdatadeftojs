//tools
external function string 10 ToolWebNGGetCountry();
external function boolean LoginState();
external function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 CurrentWebLang();
external function string 255 WebGetDeliveryModeFreight(string);
external function string 255 WebNGGetSelectedDeliveryMode(string);
//shop
external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
//translation
external function string 255 ToolWebNGTranslateText(integer);
external function string 255 GetTranslatedNameProduct(record WebNGProductVc);
//std
external remote procedure IVVc_PasteDelAddrCode(var record IVVc);
external function Boolean GetItemStatus(string,string,string,Integer,var val,var val,var val,var val,var val,var val,var val);
external function string 255 UrlEncodeCS(string);
external function val GetStockQty(string,string,Date,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external procedure GetBaseCurncy(Integer,var string);
external function Boolean PasteCustInOR(var record ORVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function val DivWithRateToBase1(string,Date,val,roundmode);
external function string 255 FindINObjects(string,string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure CalcRowGP(record EDIORVc,string,string,val,val,val,val,val,var val);
external procedure IVVc_PastePrice(var record IVVc,record IVVc,Integer,var string);
external function Boolean IVVc_PasteQuantity(var record IVVc,Integer);
external procedure IVSumup(var record IVVc,Boolean);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external procedure IVVc_PastePayDeal(var record IVVc,string,string);
external procedure IVVc_PasteCurncyCode(var record IVVc,string,Integer,Boolean,Boolean);
external function Boolean PasteCustInOrder(var record ORVc,string,string,var string,var string);
remote procedure ORVc_PasteCurncyCode(var record ORVc,string);
remote procedure ORVc_PastePayDeal(var record ORVc);
remote procedure ORVc_PasteQuant(var record ORVc,Integer,Boolean,var Boolean);
remote function Boolean ORVc_PasteArtCode(var record ORVc,Integer,var string,var string,Boolean);
remote procedure ORVc_PasteDelAddrCode(var record ORVc);
external function Boolean ORDchrsum(var record ORVc,Integer);
external procedure ORDchsum(var record ORVc,Integer);
external procedure ORSumup(var record ORVc);
external procedure RecalcDiscountIVD(var record IVVc);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure ORVc_PasteSalesMan(var record ORVc,string);
external procedure ORVc_PasteLocation(var record ORVc,Integer);
external procedure IVVc_PasteSalesMan(var record IVVc,string);
external procedure IVVc_PasteLocation(var record IVVc,Integer);
external function string 60 AddObjectToObjectList(string,string);
external function string 60 RemoveObjectFromObjectList(string,string);
external procedure ShowRedirectHtml(string,boolean);
external function Date DateFromString(string,string);
external function string 10 ShopGetDateFormat();
external function Boolean ShopGetObjectImage(record ObjVc,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

global
function Integer GetShowStockLevel()
begin
  Integer res;
  record CUVc CUr;
  record CCatVc CCatr;
  record WebDisplayVc WebDisplayr;
  record WebNGShopBlock WSb;
  string 5 code;
  
  CUr.Code = CurrentCust;
  if (nonblank(CUr.Code)) then begin
    ReadFirstMain(CUr,1,true);
    if (nonblank(CUr.WebDisplays)) then begin
      code = CUr.WebDisplays;
    end else begin
      if (nonblank(CUr.CustCat)) then begin
        CCatr.Code = CUr.CustCat;
        ReadFirstMain(CCatr,1,true);
        code = CCatr.WebDisplays;
      end;
    end;
  end;
  if (nonblank(code)) then begin
    WebDisplayr.Code = code;
    ReadFirstMain(WebDisplayr,1,true);
    res = WebDisplayr.ShowStockLevel;
  end else begin
    BlockLoad(WSb);
    res = WSb.ShowStockLevel;
  end;
  
  GetShowStockLevel = res;
  return;
end;

global
function string 255 GetItemAvailablity(string itemcode,Integer ShowStockLevel,val LimitedInStock,var val AvailableQty)
begin
  record INVc INr;
  val v;  
  val order,purch,unitcoef,prodord,rsrv,inprice;
  string 255 res;
  
  if (ShowStockLevel!=kShowStockLevelDont) then begin
    INr.Code = itemcode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (INr.ItemType==kItemTypeStocked) or (INr.ItemType==kItemTypeStructured) then begin
        GetItemStatus(itemcode,"",INr.Recepy,0,v,order,purch,unitcoef,prodord,rsrv,inprice);
        switch (ShowStockLevel) begin
          case kShowStockLevelYesNo:
            if (v<=0) then begin
              res = "<div class='st_av_stat stat2'>" & ToolWebNGTranslateText(25334) & "</div>"; // Not Available
            end else begin
              if (LimitedInStock>0 and v<=LimitedInStock) then begin
                res = "<div class='st_av_stat stat1'>" & ToolWebNGTranslateText(25333) & "</div>"; // Limited Availability
              end else begin
                res = "<div class='st_av_stat stat0'>" & ToolWebNGTranslateText(25332) & "</div>"; // Available
              end;
            end;
          case kShowStockLevelQuant:
            if (v<=0) then begin
              res = "<div class='st_av_stat stat2'>" & ToolWebNGTranslateText(25415) & "</div>"; //Item out of stock
            end else begin
              res = "<div class='st_av_stat stat0><span class='item_av_text'>" & ToolWebNGTranslateText(25416) & "</span><span class='item_av_val'>" & ValToString(v,M40Val,"","",0) & "</span></div>"; //items available
            end;
        end;
        AvailableQty = v;
      end;
    end;
  end;
  
  GetItemAvailablity = res;
  return;
end;

global
function string 255 GetDefaultWebCustomer()
begin
  record WebNGShopCompBlock WSCb;
  
  BlockLoad(WSCb);
  
  GetDefaultWebCustomer = WSCb.DefaultCust;
  return;
end;

global
function val ShopGetItemPrice(string itemcode,val qty,var val outreb,var string outvatcode,var string outcurrency,integer calllevel)
begin
  record WebNGProductVc WPr;
  row WebNGProductVc WPrw;
  record CUVc CUr;
  record INVc INr;
  val price,cost,tax2prc,tmpprice,tmpoutreb;
  string 255 curitemname,salesacc,tax2code,tmpoutvatcode,tmpoutcurrency,taxtemplatecode;
  boolean calcprice,dummyf;
  val fr,to1,to2,br1,br2;
  integer i,cnt;
  Time blankt;
  date blankd;
  Integer inclvat;
  string 20 tstr;
  
  outcurrency = "";
  outvatcode = "";
  
  if (LoginState==true) then begin
    CUr.Code = CurrentCust;
  end else begin
    CUr.Code = GetDefaultWebCustomer;
  end;
  if (ReadFirstMain(CUr,1,true)) then begin
    outcurrency = CUr.CurncyCode;
  end;
  
  if (nonblank(outcurrency)) then begin
    GetFullCurncyRate(outcurrency,CurrentDate,fr,to1,to2,br1,br2);
  end;
  tstr = CUr.PLCode;
  GetPriceList(CUr.CustCat,blankd,blankt,tstr,inclvat);
  if (GetItemPriceDiscount3(itemcode,qty,INr,outcurrency,fr,to1,to2,br1,br2,
                    "",CUr.CustCat,tstr,CUr.RebCode,
                    price,curitemname,outreb,outvatcode,cost,salesacc,
                    CUr.ExportFlag,calcprice,CurrentDate,blankt,CUr.Code,true,dummyf,CUr.PayDeal,tax2code,tax2prc,CUr.Region,"",taxtemplatecode)==false) then begin     
    INr.Name = "";
  end;
  if (blank(price)) then begin
    price = 0;
  end;
  
  if (calllevel<5) then begin
    WPr.Code = itemcode;
    if (ReadFirstMain(WPr,1,true)) then begin
      if (WPr.Configurable==0) then begin
        cnt = MatRowCnt(WPr);
        for (i=0;i<cnt;i=i+1) begin
          MatRowGet(WPr,i,WPrw);
          if (WPrw.SelectionType==0 and WPrw.Requirement==1) then begin
            tmpprice = ShopGetItemPrice(WPrw.ComponentCode,qty,tmpoutreb,tmpoutvatcode,tmpoutcurrency,calllevel+1); //TODO: handle discount/VAT code correctly
            if (blank(tmpprice)) then begin
              tmpprice = 0;
            end;
            price = price + tmpprice;
          end;
        end;
      end;
    end;
  end;

  ShopGetItemPrice = price;
  return;
end;

global
function boolean ShopPerCountry()
begin
  record WebNGShopBlock WSb;
  
  BlockLoad(WSb);
  
  ShopPerCountry = (WSb.ShopPerCountry==1);
  return;
end;

global
function string 255 GetLinkToShop()
begin
  record WebNGShopBlock WSb;
  string 255 link,country;
  
  BlockLoad(WSb);
  link = GetLinkToStruct(WSb.NodeToShopApp,true);
  
  if (ShopPerCountry) then begin
    country = ToolWebNGGetCountry;
    if (nonblank(country)) then begin
      link = link & country & "/";
    end;
  end;
  
  GetLinkToShop = link;
  return;
end;

global
function string 255 GetLinkToProductImageApp()
begin
  record WebNGShopBlock WSb;
  string 255 link,country;
  
  BlockLoad(WSb);
  link = GetLinkToStruct(WSb.NodeToItemImageApp,true);
  
  GetLinkToProductImageApp = link;
  return;
end;

global
function string 255 LinkToProductInfo(record WebNGProductVc WPr)
begin
  string 255 res;
  
  if (nonblank(WPr.MoreInfoLink)) then begin
    res = GetLinkToStruct(WPr.MoreInfoLink,true);
  end;
  
  if (blank(res)) then begin
    res = GetLinkToShop & "productinfo/" & URLEncodeCS(WPr.Code);
  end;
  
  LinkToProductInfo = res;
  return;
end;

global
function integer ShopGetAfterAddingRedirectType(var string element)
begin
  record WebNGShopBlock WSb;
  
  BlockLoad(WSb);
  ShopGetAfterAddingRedirectType = WSb.AfterAddToBasketAction;
  element = WSb.AfterAddToBasketElement;
  return;
end;

global
function string 255 ShopGetAfterAddingTemplatePage()
begin
  record WebNGShopBlock WSb;
  
  BlockLoad(WSb);
  ShopGetAfterAddingTemplatePage = WSb.AfterAddToBasketPage;
  return;
end;

global
function string 255 GetDefaultWebFreightCode()
begin
  record WebNGShopCompBlock WSCb;
  
  BlockLoad(WSCb);
  
  GetDefaultWebFreightCode = WSCb.DefaultFreight;
  return;
end;

procedure CalcWebFreight_IVVc(record IVVc IVp,var val freight)
begin
  record CUVc CUr;
  record WebFreightVc WFr;
  row WebFreightVc WFrw;
  boolean frf;
  row IVVc IVpw;
  val freightitemprice,totalweight;
  string 255 FreightVATCode, custcurrency;
  integer i,cnt;
  record INVc INr;
  record DelAddrVc DelAddrr;
  record CountryVc Countryr;
  record DMVc DMr;
  
  CUr.Code = IVp.CustCode;
  if (nonblank(CUr.Code)) then begin
    ReadFirstMain(CUr,1,true);
  end;
  switch (IVp.DelAddrCode) begin
    case "": // delivery address not selected yet
      if (nonblank(CUr.DelAddr0)) then begin
        if (nonblank(CUr.DelCountry)) then begin
          Countryr.Code = CUr.DelCountry;
          if (ReadFirstMain(Countryr,1,true)) then begin
            WFr.Code = Countryr.FreightCode;
          end;
        end;
      end else begin
        if (nonblank(CUr.CountryCode)) then begin
          Countryr.Code = CUr.CountryCode;
          if (ReadFirstMain(Countryr,1,true)) then begin
            WFr.Code = Countryr.FreightCode;
          end;
        end;
      end;
    case ";deladdr":
      if (nonblank(CUr.DelCountry)) then begin
        Countryr.Code = CUr.DelCountry;
        if (ReadFirstMain(Countryr,1,true)) then begin
          WFr.Code = Countryr.FreightCode;
        end;
      end;
    case ";invaddr":
      if (nonblank(CUr.CountryCode)) then begin
        Countryr.Code = CUr.CountryCode;
        if (ReadFirstMain(Countryr,1,true)) then begin
          WFr.Code = Countryr.FreightCode;
        end;
      end;
    otherwise
      DelAddrr.DelCode = IVp.DelAddrCode;
      DelAddrr.CustCode = CurrentCust;
      if (ReadFirstMain(DelAddrr,2,true)) then begin
        WFr.Code = DelAddrr.FreightCode;
      end;
  end;
  if (blank(WFr.Code)) then begin
    WFr.Code = CUr.FreightCode;
  end;
  if (blank(WFr.Code)) then begin
    WFr.Code = GetDefaultWebFreightCode;
  end;
  if (nonblank(IVp.ShipMode)) then begin 
    DMr.Code = IVp.ShipMode;
    if (ReadFirstMain(DMr,1,true)) then begin 
      WFr.Code = DMr.FreightCode;
    end;
  end else begin 
    WFr.Code = WebGetDeliveryModeFreight(WFr.Code);
  end;
  frf = ReadFirstMain(WFr,1,true);
  if (frf) then begin
    totalweight = 0;    
    cnt = MatRowCnt(IVp);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(IVp,i,IVpw);
      
      INr.Code = IVpw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        switch (WFr.BasedOn) begin
          case 0: totalweight = totalweight + IVpw.Quant*INr.Volume;
          case 1: totalweight = totalweight + IVpw.Quant*INr.Weight;
          case 2: 
            if (INr.Volume>INr.Weight) then begin
              totalweight = totalweight + IVpw.Quant*INr.Volume;
            end else begin
              totalweight = totalweight + IVpw.Quant*INr.Weight;
            end;
          case 3: totalweight = totalweight + IVpw.Quant;
          case 4: totalweight = totalweight + (IVpw.Quant * IVpw.Price) - (IVpw.Quant*IVpw.Price * (IVpw.vRebate/100));
        end;
      end;
    end;

    cnt = MatRowCnt(WFr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WFr,i,WFrw);
      if (totalweight>=WFrw.FromVal) then begin
        MatRowGet(WFr,i+1,WFrw);
        if (nonblank(WFrw.FromVal) and (totalweight>=WFrw.FromVal)) then begin
          goto nextline; 
        end else begin
          MatRowGet(WFr,i,WFrw);
          if (nonblank(WFr.ItemCode) and StringToVal(WFrw.Rate,M4Val)>0) then begin
            freight = StringToVal(WFrw.Rate,M4Val);
            goto exwfr;  
          end;
        end;
      end else begin
        if (nonblank(WFr.ItemCode) and WFr.MinValue>0) then begin
          freight = WFr.MinValue;
          goto exwfr;  
        end;
      end;
nextline:;
    end;
exwfr:;
    if (cnt==0 and WFr.MinValue>0) then begin
      freight = WFr.MinValue;
    end;
  end;
  return;
end;

procedure AddFreightItemToBasket(var record WebNGShopBasketVc WSBr, var val freight)
begin
  record CUVc CUr;
  record WebFreightVc WFr;
  row WebFreightVc WFrw;
  boolean frf;
  row WebNGShopBasketVc WSBrw;
  val freightitemprice,reb,totalweight;
  string 255 FreightVATCode, custcurrency;
  record GeneralOptionBlock GenOptRec;
  integer i,cnt;
  record INVc INr;
  record DelAddrVc DelAddrr;
  record CountryVc Countryr;
  record DMVc DMr;
  
  CUr.Code = WSBr.CustCode;
  if (nonblank(CUr.Code)) then begin
    ReadFirstMain(CUr,1,true);
  end;
  switch (WSBr.DelAddrCode) begin
    case "": // delivery address not selected yet
      if (nonblank(CUr.DelAddr0)) then begin
        if (nonblank(CUr.DelCountry)) then begin
          Countryr.Code = CUr.DelCountry;
          if (ReadFirstMain(Countryr,1,true)) then begin
            WFr.Code = Countryr.FreightCode;
          end;
        end;
      end else begin
        if (nonblank(CUr.CountryCode)) then begin
          Countryr.Code = CUr.CountryCode;
          if (ReadFirstMain(Countryr,1,true)) then begin
            WFr.Code = Countryr.FreightCode;
          end;
        end;
      end;
    case ";deladdr":
      if (nonblank(CUr.DelCountry)) then begin
        Countryr.Code = CUr.DelCountry;
        if (ReadFirstMain(Countryr,1,true)) then begin
          WFr.Code = Countryr.FreightCode;
        end;
      end;
    case ";invaddr":
      if (nonblank(CUr.CountryCode)) then begin
        Countryr.Code = CUr.CountryCode;
        if (ReadFirstMain(Countryr,1,true)) then begin
          WFr.Code = Countryr.FreightCode;
        end;
      end;
    otherwise
      DelAddrr.DelCode = WSBr.DelAddrCode;
      DelAddrr.CustCode = CurrentCust;
      if (ReadFirstMain(DelAddrr,2,true)) then begin
        WFr.Code = DelAddrr.FreightCode;
      end;
  end;
  if (blank(WFr.Code)) then begin
    WFr.Code = CUr.FreightCode;
  end;
  if (blank(WFr.Code)) then begin
    WFr.Code = GetDefaultWebFreightCode;
  end;
  if (nonblank(WSBr.DelMode)) then begin 
    DMr.Code = WSBr.DelMode;
    if (ReadFirstMain(DMr,1,true)) then begin 
      WFr.Code = DMr.FreightCode;
    end;
  end else begin 
    WFr.Code = WebGetDeliveryModeFreight(WFr.Code);
  end;
  
  frf = ReadFirstMain(WFr,1,true);
//  freightitemprice = ShopGetItemPrice(WFr.ItemCode,1,reb,FreightVATCode,custcurrency,0);
//fright price is NOT taken from item but from WF record
  if (frf) then begin
  
    BlockLoad(GenOptRec);
    totalweight = 0;
    
    cnt = MatRowCnt(WSBr);

    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WSBr,i,WSBrw);
      
      INr.Code = WSBrw.Product;
      if (ReadFirstMain(INr,1,true)) then begin
        switch (WFr.BasedOn) begin
          case 0: totalweight = totalweight + WSBrw.Qty*INr.Volume;
          case 1: totalweight = totalweight + WSBrw.Qty*INr.Weight;
          case 2: 
            if (INr.Volume>INr.Weight) then begin
              totalweight = totalweight + WSBrw.Qty*INr.Volume;
            end else begin
              totalweight = totalweight + WSBrw.Qty*INr.Weight;
            end;
          case 3: totalweight = totalweight + WSBrw.Qty;
          case 4: totalweight = totalweight + WSBrw.Qty*WSBrw.Price;
        end;
      end;
    end;

    cnt = MatRowCnt(WFr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WFr,i,WFrw);
      if (totalweight>=WFrw.FromVal) then begin
        MatRowGet(WFr,i+1,WFrw);
        if (nonblank(WFrw.FromVal) and (totalweight>=WFrw.FromVal)) then begin
          goto nextline; 
        end else begin
          MatRowGet(WFr,i,WFrw);
          if (nonblank(WFr.ItemCode) and StringToVal(WFrw.Rate,M4Val)>0) then begin
            WSBrw.Product = WFr.ItemCode;
            WSBrw.Qty = 1;
            WSBrw.Price = StringToVal(WFrw.Rate,M4Val);
            freight = WSBrw.Price;
            MatRowPut(WSBr,MatRowCnt(WSBr),WSBrw);
            goto exwfr;  
          end;
        end;
      end else begin
        if (nonblank(WFr.ItemCode) and WFr.MinValue>0) then begin
          ClearRow(WSBr,WSBrw,1);
          WSBrw.Product = WFr.ItemCode;
          WSBrw.Qty = 1;
          WSBrw.Price = WFr.MinValue;
          freight = WFr.MinValue;
          MatRowPut(WSBr,MatRowCnt(WSBr),WSBrw);
          goto exwfr;  
        end;
      end;
nextline:;
    end;
exwfr:;
    if (cnt==0 and WFr.MinValue>0) then begin
      ClearRow(WSBr,WSBrw,1);
      WSBrw.Product = WFr.ItemCode;
      WSBrw.Qty = 1;
      WSBrw.Price = WFr.MinValue;
      freight = WFr.MinValue;
      MatRowPut(WSBr,MatRowCnt(WSBr),WSBrw);
    end;
  end;

 /* 
    if (nonblank(WFr.ItemCode)) then begin
      ClearRow(WSBr,WSBrw,1);
      WSBrw.Product = WFr.ItemCode;
      WSBrw.Qty = WSBr.Freight;
      freight = WSBr.Freight * freightitemprice;
      WSBrw.Price = freight;
      MatRowPut(WSBr,MatRowCnt(WSBr),WSBrw);
    end;
*/    
//CalculateBasketFreight   
  return;
end;

procedure BuildProductList(string productcode,var array string productlist)
begin
  record WebNGProductVc WPr;
  row WebNGProductVc WPrw;
  integer i,cnt,arrlen;
  
  arrlen = 1;
  productlist[arrlen] = productcode;
  
  WPr.Code = productcode;
  if (ReadFirstMain(WPr,1,true)) then begin
    if (WPr.Configurable==0) then begin
      cnt = MatRowCnt(WPr);
      for (i=0;i<cnt;i=i+1) begin
        MatRowGet(WPr,i,WPrw);
        if (WPrw.SelectionType==0 and WPrw.Requirement==1) then begin //TODO: support component groups here too
          arrlen = arrlen + 1;
          productlist[arrlen] = WPrw.ComponentCode;
        end;
      end;
    end;
  end;
  productlist[0] = arrlen;
  
  return;
end;

procedure AddBasketRowToOrder(var record ORVc ORr,var record WebNGShopBasketVc WSBr,row WebNGShopBasketVc WSBrw)
begin
  row ORVc ORrw;
  Integer rwcnt;
  string 255 warning;
  array string 255 productlist;
  integer i,cnt;
  boolean chsum;
  record ModuleBlock OptFeature;
  
  if (WSBrw.CUServiceHistNr<=0) then begin
    BuildProductList(WSBrw.Product,productlist);
  end else begin
    productlist[0] = "1";
    productlist[1] = WSBrw.Product;
  end;

  cnt = StringToInt(productlist[0]);
  for (i=1;i<=cnt;i=i+1) begin
    rwcnt = MatRowCnt(ORr);
    ClearRow(ORr,ORrw,1);

    ORrw.ArtCode = productlist[i];
    MatRowPut(ORr,rwcnt,ORrw);
    if (ORVc_PasteArtCode(ORr,rwcnt,warning,warning,false)) then begin end;
    MatRowGet(ORr,rwcnt,ORrw);

    ORrw.vRebate = WSBrw.Discount;
    MatRowPut(ORr,rwcnt,ORrw);
    
    ORrw.Quant = WSBrw.Qty;
    ORrw.Price = WSBrw.Price;
    ORrw.Sum = WSBrw.Price * WSBrw.Qty;
    MatRowPut(ORr,rwcnt,ORrw);
    chsum = false;
    BlockLoad(OptFeature);
    if (OptFeature.NoQtyDepPrices==0) then begin
      ORVc_PasteQuant(ORr,rwcnt,true,chsum);
    end else begin
      chsum = ORDchrsum(ORr,rwcnt);
    end;
    if (chsum) then begin
      ORDchsum(ORr,rwcnt);
    end;    

    MatRowGet(ORr,rwcnt,ORrw);
    ORrw.CUServiceHistNr = WSBrw.CUServiceHistNr;
    ORrw.CUServiceUntilDate = WSBrw.PeriodStartDate;
    MatRowPut(ORr,rwcnt,ORrw);
  end;
  
  return;
end;

procedure PasteUserRefStr(var record ORVc ORr)
begin
  record UserVc Userr;

  Userr.Code = ORr.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    ORr.OurContact = Userr.CurOurContact;
  end;

  return;
end;

procedure AddBasketRowsAndAddrToOrder(var record ORVc ORr,record WebNGShopBasketVc WSBr)
begin
  val freight;
  Integer i,rwcnt;
  row WebNGShopBasketVc WSBrw;

  switch (WSBr.DelAddrCode) begin
    case ";deladdr": // do nothing, delivery address was pasted with customer
    case ";invaddr": // clear out delivery address
      ORr.ShipAddr0 = "";
      ORr.ShipAddr1 = "";
      ORr.ShipAddr2 = "";
      ORr.ShipAddr3 = "";
      ORr.DelAddr3 = "";
      ORr.DelAddr4 = "";
    otherwise
      ORr.DelAddrCode = WSBr.DelAddrCode;
      ORVc_PasteDelAddrCode(ORr);
  end; 
  
  AddFreightItemToBasket(WSBr,freight);

  rwcnt = MatRowCnt(WSBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSBr,i,WSBrw);
    AddBasketRowToOrder(ORr,WSBr,WSBrw);
  end; 

  return;
end;

global
function Boolean BuildWebNGOrderFromBasket(var record ORVc ORr,record WebNGShopBasketVc WSBr,string defpaydeal,boolean forcepaydealf,string ovrcurrency,string deladdrcode)
begin
  Integer i,rwcnt;
  string 255 warning,errstr;
  row WebNGShopBasketVc WSBrw;
  record WebNGShopCompBlock WSCb;
  val freight;
  boolean res;
  string 20 oldsalesman;
  
  res = false;
  
  RecordNew(ORr);
  ORr.CustCode = WSBr.CustCode;
  if (PasteCustInOrder(ORr,ORr.CustCode,"",warning,errstr)) then begin
  end;  
  
  if (nonblank(ovrcurrency) and ORr.CurncyCode!=ovrcurrency) then begin
    ORr.CurncyCode = ovrcurrency;
    ORVc_PasteCurncyCode(ORr,"");
  end;

  if (forcepaydealf or blank(ORr.PayDeal)) then begin
    ORr.PayDeal = defpaydeal;
    ORVc_PastePayDeal(ORr);
  end;

  if (blank(WSBr.DelAddrCode)) then begin
    WSBr.DelAddrCode = ";deladdr";
  end;
  ORr.FrPrice = WSBr.Freight;
  AddBasketRowsAndAddrToOrder(ORr,WSBr);

  if (MatRowCnt(ORr)>0) then begin
    ORSumup(ORr);
    res = true;
  end;
  
  BlockLoad(WSCb);
  ORr.OrderClass = WSCb.OrderClass;
  if (blank(ORr.OrderClass)) then begin
    ORr.OrderClass = "WEB";
  end;
  if (nonblank(WSCb.SalesMan)) then begin
    oldsalesman = ORr.SalesMan;
    ORr.SalesMan = WSCb.SalesMan;
    ORVc_PasteSalesMan(ORr,oldsalesman);
  end;
  if (nonblank(WSCb.Location)) then begin
    ORr.Location = WSCb.Location;
    ORVc_PasteLocation(ORr,-1);
  end;
  PasteUserRefStr(ORr);
  ORr.PlanShipDate = WSBr.ShipDate;
  ORr.PlanShip = WSBr.ShipDate;
  ORr.ShipMode = WSBr.DelMode;
  
  BuildWebNGOrderFromBasket = res;
  return;
end;

global
function Boolean BuildWebNGOrder(var record ORVc ORr,integer basketno,string defpaydeal,boolean forcepaydealf,string ovrcurrency,string deladdrcode)
begin
  record WebNGShopBasketVc WSBr;
  boolean res;
  
  res = false;
  if (GetShoppingBasket(WSBr,basketno)) then begin
    res = BuildWebNGOrderFromBasket(ORr,WSBr,defpaydeal,forcepaydealf,ovrcurrency,deladdrcode);
  end;
  
  BuildWebNGOrder = res;
  return;
end;

procedure AddBasketRowToInvoice(var record IVVc IVr,var integer rownr,var record WebNGShopBasketVc WSBr,row WebNGShopBasketVc WSBrw)
begin
  record IVVc IV2r;
  row IVVc IVrw;
  string 255 warning;
  array string 255 productlist;
  integer i,cnt;
  Integer sernrf;
  
  if (WSBrw.CUServiceHistNr<=0) then begin
    BuildProductList(WSBrw.Product,productlist);
  end else begin
    productlist[0] = "1";
    productlist[1] = WSBrw.Product;
  end;

  cnt = StringToInt(productlist[0]);
  for (i=1;i<=cnt;i=i+1) begin
    ClearRow(IVr,IVrw,1);

    IVrw.ArtCode = productlist[i];
    MatRowInsert(IVr,rownr,IVrw);
    if (IVVc_PasteArtCode(IVr,rownr,warning,warning,false,sernrf)) then begin end;
    MatRowGet(IVr,rownr,IVrw);

    IVrw.Quant = WSBrw.Qty;
    IVrw.Price = WSBrw.Price;
    IVrw.Sum = WSBrw.Price * WSBrw.Qty;
    MatRowPut(IVr,rownr,IVrw);
    IVVc_PasteQuantity(IVr,rownr);        
    MatRowGet(IVr,rownr,IVrw);

//    IVrw.vRebate = WSBrw.Discount;
//    MatRowPut(IVr,rownr,IVrw);
    
    IVrw.CUServiceHistNr = WSBrw.CUServiceHistNr;
    IVrw.CUServiceUntilDate = WSBrw.PeriodStartDate;
    MatRowPut(IVr,rownr,IVrw);
      
    //if (IVDchrsum(IVr,rownr)) then begin
      IVDchsum(IVr,rownr);
    //end;
    rownr = rownr + 1;
  end;
  
  return;
end;

global
function Boolean BuildWebNGInvoiceFromBasket(var record IVVc IVr,record WebNGShopBasketVc WSBr,string defpaydeal,boolean forcepaydealf,string ovrcurrency,var val freight)
begin
  Integer i,rwcnt,rownr;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  row WebNGShopBasketVc WSBrw;
  record WebShopSettingBlock WebShopSettingr;
  record WebNGShopCompBlock WSCb;
  row IVVc IVrw;
  boolean res;
  record LocalMachineBlock LMb;
  string 255 oldsalesman;
  
  res = false;
  
  RecordNew(IVr);
  if (nonblank(WSBr.CustCode)) then begin
    IVr.CustCode = WSBr.CustCode;
  end else begin
    IVr.CustCode = GetDefaultWebCustomer;
  end;
  if (PasteCust2InInv(IVr,LMb,"",true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
  end;

  if (blank(WSBr.DelAddrCode)) then begin
    WSBr.DelAddrCode = ";deladdr";
  end;
  switch (WSBr.DelAddrCode) begin
    case ";deladdr": // do nothing, delivery address was pasted with customer
    case ";invaddr": // clear out delivery address
      IVr.ShipAddr0 = "";
      IVr.ShipAddr1 = "";
      IVr.ShipAddr2 = "";
      IVr.ShipAddr3 = "";
      IVr.DelAddr3 = "";
      IVr.DelAddr4 = "";
      IVr.DelAddrCode = WSBr.DelAddrCode;
    otherwise
      IVr.DelAddrCode = WSBr.DelAddrCode;
      IVVc_PasteDelAddrCode(IVr);
  end;
  
  if (nonblank(ovrcurrency) and IVr.CurncyCode!=ovrcurrency) then begin
    IVr.CurncyCode = ovrcurrency;
    IVVc_PasteCurncyCode(IVr,"",-1,false,true);
  end;

  if (forcepaydealf or blank(IVr.PayDeal)) then begin
    IVr.PayDeal = defpaydeal;
    IVVc_PastePayDeal(IVr,"","");
  end;
  
  rwcnt = MatRowCnt(WSBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSBr,i,WSBrw);
    AddBasketRowToInvoice(IVr,rownr,WSBr,WSBrw);
  end; 
  if (MatRowCnt(IVr)>0) then begin
    RecalcDiscountIVD(IVr);
    CalcWebFreight_IVVc(IVr,freight);
    IVr.FrPrice = freight;
    IVSumup(IVr,true);
    res = true;
  end;
  
  BlockLoad(WebShopSettingr);
  if (nonblank(WebShopSettingr.Objects)) then begin
    if (nonblank(IVr.Objects)) then begin
      IVr.Objects = IVr.Objects & ",";
    end;
    IVr.Objects = IVr.Objects & WebShopSettingr.Objects;
  end;
  
  BlockLoad(WSCb);
  IVr.InvComment = WSCb.OrderClass;
  if (blank(IVr.InvComment)) then begin
    IVr.InvComment = "WEB";
  end;
  if (nonblank(WSCb.SalesMan)) then begin
    oldsalesman = IVr.SalesMan;
    IVr.SalesMan = WSCb.SalesMan;
    IVVc_PasteSalesMan(IVr,oldsalesman);
  end;
  if (nonblank(WSCb.Location)) then begin
    IVr.Location = WSCb.Location;
    IVVc_PasteLocation(IVr,-1);
  end;
  IVr.ShipMode = WSBr.DelMode;
  
  BuildWebNGInvoiceFromBasket = res;
  return;
end;

global
function Boolean BuildWebNGInvoice(var record IVVc IVr,integer basketno,string defpaydeal,boolean forcepaydealf,string ovrcurrency)
begin
  record WebNGShopBasketVc WSBr;
  boolean res;
  val freight;
  
  res = false;
  if (GetShoppingBasket(WSBr,basketno)) then begin
    res = BuildWebNGInvoiceFromBasket(IVr,WSBr,defpaydeal,forcepaydealf,ovrcurrency,freight);
  end;
  
  BuildWebNGInvoice = res;
  
  return;
end;

global
updating procedure AddItemToFavourites(string item,string object,Boolean addf)
begin
  record WebNGFavItemVc WFr,oldWFr;
  Boolean res;

  if (LoginState) then begin
    WFr.CustCode = CurrentCust;
    WFr.ItemCode = item;
    if (addf) then begin
      if (ReadFirstMain(WFr,2,true)==false) then begin
        WFr.CustCode = CurrentCust;
        WFr.ItemCode = item;
        WFr.Objects = object;
        RecordStore(WFr,false);
        res = true;
      end;
    end else begin
      if (ReadFirstMain(WFr,2,true)) then begin
        RecordRemove(WFr);
        res = true;
      end;
    end;
  end;

  WebOutStringFormat("<reply><status>" & res & "</status></reply>");

  return;
end;

global
procedure LoadWebshopObjects(string objlist,string cat,string path)
begin
  record ObjVc Objr;
  string 255 tstr,tmp,actobj,src;
  Longint pos;
  Boolean foundf;
  
  actobj = GetSessionString("webshop_objlist_" & cat);
  tstr = objlist;
  while (GetNextSubString(tstr,pos,",",tmp)) begin
    Objr.Code = tmp;
    if (ReadFirstMain(Objr,1,true)) then begin
      if (SetInSet(Objr.Code,actobj)) then begin
        WebOutString("<div class='shop_select_obj active'><a href='" & path & "?deselectobj=" & Objr.Code & "'><span class='object_item_image'>");
        if (ShopGetObjectImage(Objr,src)) then begin
          WebOutString("<img src='" & src & "'>");
        end;
        WebOutString("</span>" & Objr.Comment & "</a></div>");
      end else begin
        WebOutString("<div class='shop_select_obj inactive'><a href='" & path & "?selectobj=" & Objr.Code & "'><span class='object_item_image'>");
        if (ShopGetObjectImage(Objr,src)) then begin
          WebOutString("<img src='" & src & "'>");
        end;
        WebOutString("</span>" & Objr.Comment & "</a></div>");
      end;
      foundf = true;
    end;
  end;
  if (foundf) then begin
    WebOutString("<div class='shop_select_obj'><a href='" & path & "?selectobj=*'><span class='object_item_image'>All</a></div>");
  end;
  
  return;
end;

function Boolean CustomerCanViewOrder(Longint ordernr,string custcode)
begin
  record ORVc ORr;
  Boolean res;

  res = false;
  if (ordernr>-1) then begin
    ORr.SerNr = ordernr;
    if (ReadFirstMain(ORr,1,true)) then begin
      if (ORr.CustCode==custcode) then begin
        res = true;
      end;
    end;
  end else begin
    res = true;
  end;

  CustomerCanViewOrder = res;
  return;
end;

function Date GetNextOrderDate(string custcode)
begin
  Date res,td;
  record CUVc CUr;
  record DelRouteVc DelRouter;
  Boolean contf,testf;

  res = AddDay(CurrentDate,1);
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    DelRouter.Code = CUr.Sorting;
    if (ReadFirstMain(DelRouter,1,true)) then begin
      if (DelRouter.MonFlag!=0 or DelRouter.TueFlag!=0 or DelRouter.WedFlag!=0 or DelRouter.ThuFlag!=0 or DelRouter.FriFlag!=0 and DelRouter.SatFlag!=0 or DelRouter.SunFlag!=0) then begin
        td = res;
        contf = true;
        while (contf) begin
          testf = false;
          if (DelRouter.MonFlag!=0) then begin
            if (GetDateId(td)==1) then begin testf = true; end;
          end;
          if (DelRouter.TueFlag!=0) then begin
            if (GetDateId(td)==2) then begin testf = true; end;
          end;
          if (DelRouter.WedFlag!=0) then begin
            if (GetDateId(td)==3) then begin testf = true; end;
          end;
          if (DelRouter.ThuFlag!=0) then begin
            if (GetDateId(td)==4) then begin testf = true; end;
          end;
          if (DelRouter.FriFlag!=0) then begin
            if (GetDateId(td)==5) then begin testf = true; end;
          end;
          if (DelRouter.SatFlag!=0) then begin
            if (GetDateId(td)==6) then begin testf = true; end;
          end;
          if (DelRouter.SunFlag!=0) then begin
            if (GetDateId(td)==7) then begin testf = true; end;
          end;
          if (testf) then begin
            contf = false;
            res = td;
          end;
          if (contf) then begin
            td = AddDay(td,1);
          end;
        end;
      end;
    end;
  end;

  GetNextOrderDate = res;
  return;
end;

global
updating function Boolean ShopUpdateExistingOrder(record WebNGShopBasketVc WSBr)
begin
  record ORVc ORr,oldORr;
  Integer i,rwcnt;
  Boolean res;

  if (WSBr.OrderNr>-1) then begin
    ORr.SerNr = WSBr.OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin
      RecordCopy(oldORr,ORr);
      rwcnt = MatRowCnt(ORr);
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowDelete(ORr,i);
      end;
      AddBasketRowsAndAddrToOrder(ORr,WSBr);
      ORr.PlanShipDate = WSBr.ShipDate;
      ORr.PlanShip = WSBr.ShipDate;
      if (MatRowCnt(ORr)>0) then begin
        ORSumup(ORr);
      end;
      res = (RecordUpdate(oldORr,ORr,true)==0);
    end;
  end;

  ShopUpdateExistingOrder = res;
  return;
end;

global
updating procedure CreateNewShoppingBasket(var record WebNGShopBasketVc WSBr)
begin
  record CUVc CUr;
  string 255 basecur;

  RecordNew(WSBr);
  WSBr.CompanyNr = CurrentCompany;
  WSBr.CustCode = CurrentCust;
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    WSBr.CurrencyCode = CUr.CurncyCode;
  end;
  if (blank(WSBr.CurrencyCode)) then begin
    GetBaseCurncy(1,basecur);
    WSBr.CurrencyCode = basecur;
  end;
  WSBr.BasketNo = 0;
  WSBr.SessionID = "";
  WSBr.ShipDate = GetNextOrderDate(CurrentCust);
  RecordStore(WSBr,true);

  return;
end;

global
updating procedure WebshopLoadExistingOrder(var record WebNGShopBasketVc WSBr,Longint ordernr,Boolean newf)
begin
  record WebNGShopBasketVc oldWSBr;
  row WebNGShopBasketVc WSBrw;
  record ORVc ORr;
  row ORVc ORrw;
  Integer i,rwcnt;
  string 10 df;
  record INVc INr;

  ORr.SerNr = ordernr;
  if (ReadFirstMain(ORr,1,true)) then begin
    if (newf) then begin
      CreateNewShoppingBasket(WSBr);
    end;
    RecordCopy(oldWSBr,WSBr);
    rwcnt = MatRowCnt(WSBr);
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowDelete(WSBr,i);
    end;
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ReadFirstItem(ORrw.ArtCode,INr,false,false)) then begin
        ClearRow(WSBr,WSBrw,1);
        WSBrw.Product = ORrw.ArtCode;
        WSBrw.Qty = ORrw.Quant;
        WSBrw.Price = ORrw.Price;
        if (INr.QtyonPallet>0 and mod(WSBrw.Qty,INr.QtyonPallet)==0) then begin
          WSBrw.QtyType = 1;
          WSBrw.PalletQty = WSBrw.Qty/INr.QtyonPallet;
          PutSessionString("webshop_qtytype_" & WSBrw.Product,1);
        end else begin
          PutSessionString("webshop_qtytype_" & WSBrw.Product,0);        
        end;
        MatRowPut(WSBr,i,WSBrw);
      end;
    end;
    if (MatRowCnt(ORr)>0) then begin
      ORSumup(ORr);
    end;
    WSBr.DelAddrCode = ORr.DelAddrCode;
    df = ShopGetDateFormat;
    WSBr.ShipDate = ORr.PlanShipDate;
    if (blank(WSBr.ShipDate)) then begin
      WSBr.ShipDate = GetNextOrderDate(CurrentCust);
    end;
    WSBr.OrderNr = ordernr;
    WSBr.CurrencyCode = ORr.CurncyCode;
    RecordUpdate(oldWSBr,WSBr,true);
  end;

  return;
end;

updating procedure CreateNewShoppingBasketWithFavItems(string custcode)
begin
  record WebNGFavItemVc WFr;
  record WebNGShopBasketVc WSBr,oldWSBr;
  row WebNGShopBasketVc WSBrw;
  Integer i,rwcnt;
  Boolean TrHs;

  if (GetShoppingBasket(WSBr,0)) then begin
    RecordCopy(oldWSBr,WSBr);
    if (WSBr.OrderNr>-1) then begin
      ShopUpdateExistingOrder(WSBr);
    end;
    rwcnt = MatRowCnt(WSBr);
    for (i=rwcnt-1;i>=0;i=i-1) begin
      MatRowDelete(WSBr,i);
    end;
    WSBr.OrderNr = -1;
    WSBr.ShipDate = GetNextOrderDate(CurrentCust);
    TrHs = true;
    i = 0;
    WFr.CustCode = custcode;
    while (LoopMain(WFr,1,TrHs)) begin
      if (WFr.CustCode!=custcode) then begin
        TrHs = false;
      end else begin
        if (WFr.OrdQty>0) then begin
          ClearRow(WSBr,WSBrw,1);
          WSBrw.Product = WFr.ItemCode;
          WSBrw.Qty = WFr.OrdQty;
          WSBrw.Price = blankval;
          MatRowPut(WSBr,i,WSBrw);
          i = i + 1;
        end;
      end;
    end;
    RecordUpdate(oldWSBr,WSBr,true);    
  end;

  return;
end;

global
updating procedure SelectOrderForBasket(string str_order)
begin
  record WebNGShopBasketVc WSBr;
  Longint ordernr;

  if (LoginState) then begin
    if (str_order=="reorder") then begin
      CreateNewShoppingBasketWithFavItems(CurrentCust);
    end else begin
      ordernr = StringToLongint(str_order);
      if (CustomerCanViewOrder(ordernr,CurrentCust)) then begin
        if (GetShoppingBasket(WSBr,0)) then begin
          if (WSBr.OrderNr>-1 and WSBr.OrderNr!=ordernr) then begin
            ShopUpdateExistingOrder(WSBr);
          end;
          if (ordernr>-1) then begin
            WebshopLoadExistingOrder(WSBr,ordernr,false);
          end else begin
            RecordRemove(WSBr);
            CreateNewShoppingBasket(WSBr);
          end;
        end;
      end;
    end;
  end;
  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);

  return;
end;

global
updating procedure ShopSetWebOrderDate(string dstr)
begin
  record WebNGShopBasketVc WSBr,oldWSBr;
  Date td;
  string 10 df;
 
  if (LoginState) then begin
    if (GetShoppingBasket(WSBr,0)) then begin
      df = ShopGetDateFormat;
      td = DateFromString(dstr,df);//TODO::use ToolWebNGTranslateText string for that
      RecordCopy(oldWSBr,WSBr);
      WSBr.ShipDate = td;
      RecordUpdate(oldWSBr,WSBr,true);
    end;
  end;
  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);

  return;
end;

global
updating procedure ShopAddFavItemObject(string item,string object,Boolean addf)
begin
  string 255 tstr;
  record WebNGFavItemVc WFr,oldWFr;

  if (LoginState and nonblank(item) and nonblank(object)) then begin
    WFr.CustCode = CurrentCust;
    WFr.ItemCode = item;
    if (ReadFirstMain(WFr,2,true)) then begin
      RecordCopy(oldWFr,WFr);
      if (addf) then begin
        tstr = AddObjectToObjectList(WFr.Objects,object);
      end else begin
        tstr = RemoveObjectFromObjectList(WFr.Objects,object);      
      end;
      WFr.Objects = tstr;
      RecordUpdate(oldWFr,WFr,true);
    end;
  end;
  
  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);
  return;
end;

global
updating procedure ShopChangeFavOrderQty(string item,val ordqty)
begin
  string 255 tstr;
  record WebNGFavItemVc WFr,oldWFr;

  if (LoginState and nonblank(item)) then begin
    WFr.CustCode = CurrentCust;
    WFr.ItemCode = item;
    if (ReadFirstMain(WFr,2,true)) then begin
      RecordCopy(oldWFr,WFr);
      WFr.OrdQty = ordqty;
      RecordUpdate(oldWFr,WFr,true);
    end;
  end;
  
  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);
  return;
end;


global
updating procedure StoreProductCustomerView(string item,string custcode)
begin
  record WebNGProductViewVc PVr;
  
  if (nonblank(custcode)) then begin
    PVr.CustCode = custcode;
    PVr.Product = item;
    if (ReadFirstMain(PVr,2,true)==false) then begin
      RecordNew(PVr);
      PVr.CustCode = custcode;
      PVr.Product = item;
      RecordStore(PVr,true);
    end;
  end;

  return;
end;

global
updating procedure WebshopChangeOrderDate(Longint sernr,Date td)
begin
  record ORVc ORr,oldORr;

  if (LoginState and sernr>-1) then begin
    ORr.SerNr = sernr;
    if (ReadFirstMain(ORr,1,true)) then begin
      RecordCopy(oldORr,ORr);
      ORr.PlanShipDate = td;
      ORr.PlanShip = td;
      RecordUpdate(oldORr,ORr,true);
    end;
  end;

  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);

  return;
end;
