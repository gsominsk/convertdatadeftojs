//tools
external function string 255 removenextnode(var string);
external function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external function string 255 FormatSimpleLinkWithArg(string,string,boolean);
external function boolean LoginState();
external function string 10 CurrentWebLang;
external function string 10 ToolWebNGGetCountry();
external function Integer GetCountryDefaultCompanyNr(string);
//pages
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//translation
external function string 255 ToolWebNGTranslateText(integer);
//webng
external procedure RedirectToURL(string);
external procedure RedirectToStartPage();
external procedure RedirectToStructLink(string);
//university
external procedure UniversityPlannedCourses(record WebNGStructVc,string);
external procedure UniversityApplyForCourse(record WebNGStructVc,string);

global
function string 255 GetLinkToUniversityStruct(boolean callfromweb)
begin
  record WebNGUniversityBlock WUb;
  string 255 res;
  
  res = "";
  BlockLoad(WUb);
  if (WUb.StructNode>0) then begin
    res = GetLinkToStruct(WUb.StructNode,callfromweb);
  end;
  
  GetLinkToUniversityStruct = res;
  return;
end;

global
function string 255 GetUniversityFunctionLink(string func,string paramnodes)
begin
  string 255 newurl;
  
  newurl = GetLinkToUniversityStruct(true);
  if (nonblank(newurl)) then begin
    newurl = newurl & func & "/" & paramnodes;
  end;
  
  GetUniversityFunctionLink = newurl;
  return;
end;

global
procedure RedirectToUniversityFunction(string func,string paramnodes)
begin
  string 255 newurl;
  
  newurl = GetUniversityFunctionLink(func,paramnodes);
  if (nonblank(newurl)) then begin
    RedirectToStructLink(newurl);
  end else begin
    newurl = GetUniversityFunctionLink("courses","");
    if (nonblank(newurl)) then begin
      RedirectToStructLink(newurl);
    end else begin
      RedirectToStartPage;
    end;
  end;
  
  return;
end;

global
procedure UniversityRedirectToError(longint courseno,string title,string message)
begin
  string 255 tstr;
  
  if (courseno>0) then begin
    tstr = courseno;
  end else begin
    tstr = "";
  end;
  
  RedirectToURL(FormatSimpleLinkWithArg(GetUniversityFunctionLink("error",tstr),"title=" & title & "&msg=" & message,true));
  return;
end;

procedure UniversityShowError(record WebNGStructVc WSr,string path)
begin
  string 255 title,message;
  record WebNGPageVc WPr;
  string 255 node,mpath,link;
  longint courseno;
  
  title = WebGetArg("title");
  message = WebGetArg("msg");

  WPr.Code = WSr.WebPage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");
  
  mpath = path;
  node = removenextnode(mpath);
  courseno = StringToLongint(node);

  WebOutString("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class="""">");
  WebOutString("<tr valign=""top"">");
  WebOutString("<td class=""heading2"">&nbsp;</td>");
  WebOutString("</tr>");
  WebOutString("</table>");
  
  WebOutString("<table align=""center"" width=""90%"" cellspacing=""1"" cellpadding=""3"" border=""0"" class=""deftbl"">");
  WebOutString("  <tr><th>" & title & "</th></tr>");
  WebOutString("</table>");
  WebOutString("<table align=""center"" bgcolor=""#FFFFFF"" width=""90%"" cellspacing=""3"" cellpadding=""3"" border=""0"" class="""">");
  WebOutString("<tr><td colspan=""2"" width=""100%"" class=""feedback-txt"">");
  WebOutString(message);
  WebOutString("</td></tr>");

  WebOutString("<tr><td width=""28%"" class=""feedback-txt"">&nbsp;</td><td width=""72%"">&nbsp;</td></tr>");
  WebOutString("<tr valign=""top"">");
  WebOutString("<td width=""28%"">&nbsp;</td>");
  WebOutString("<td align=""right"" width=""72%"">");
  if (courseno>0) then begin
    link = FormatSimpleLink(GetUniversityFunctionLink("apply",courseno & "/step1/"),true);
    WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    WebOutStringFormat(" href=""" & link & """>");
    WebOutString("<input type=""button"" name=""s1"" value=""" & ToolWebNGTranslateText(25512) & """></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"); //Restart Booking
  end else begin
    link = FormatSimpleLink(GetUniversityFunctionLink("courses",""),true);
    WebOutStringFormat("<a onclick=""location.href='" & link & "';""");
    WebOutStringFormat(" href=""" & link & """>");
    WebOutString("<input type=""button"" name=""s1"" value=""" & ToolWebNGTranslateText(25513) & """></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"); //View Courses
  end;
  WebOutString("</td></tr>");
  WebOutString("</tr>");

  WebOutString("</table>");  
  
  ShowWebAppPageEnd(WPr);
  
  return;
end;

global
procedure ShowUniversityWebTestList(record WebNGElementVc WEr)
begin
  Integer oldcomp,CompanyNr;
  Boolean res,found,first_loop;
  record UnivTestVc Testr;
  string 255 company,country,llink;

  country = ToolWebNGGetCountry;
  if (nonblank(country)) then begin
    CompanyNr = GetCountryDefaultCompanyNr(country);
    oldcomp = CurrentCompany;
    if ((CompanyNr>0) and (CompanyNr!=oldcomp)) then begin
      res = SetCompany(CompanyNr,false);
    end;
  end;

  WebOutTagOpen("<table id=""university_webtest_table"">");
  first_loop = true;
  found = true;
  while (LoopMain(Testr,1,found)) begin
    first_loop = false;
    WebOutTagOpen("<tr>");
    WebOutTagOpen("<td>");
    WebOutStringFormat(Testr.CourseName);
    WebOutTagClose("</td>");

    WebOutTagOpen("<td>");
    if (DateInRange(CurrentDate,Testr.StartDate,Testr.EndDate) and (CurrentTime > Testr.StartTime) and (CurrentTime < Testr.EndTime)) then begin
      WebOutStringFormat("<a href=""");
      llink = "/WebHWUUnivTestCust.hal?course=" & Testr.CourseCode & "&company=" & company & "&webpage=SALES";
      WebOutStringFormat(llink);
      WebOutStringFormat(""" target=""_blank"">");
      WebOutStringFormat(ToolWebNGTranslateText(25525)); //Take the test
      WebOutStringFormatNL("</a>");
    end else begin
      WebOutStringFormat(ToolWebNGTranslateText(25421)); //Contact us for date.
    end;
    WebOutTagClose("</td>");
    WebOutTagClose("</tr>");
  end;
  if (first_loop==true) then begin
    WebOutTagOpen("<tr>");
    WebOutTagOpen("<td>");
    WebOutStringFormat(ToolWebNGTranslateText(25422)); //Please contact us to inquire about our online Web Tests.
    WebOutTagClose("</td>");
    WebOutTagClose("</tr>");
  end;
  WebOutTagClose("</table>");

  if (res) then begin
    ResetCompany(oldcomp);
  end;

  return;
end;

global
function boolean SetCompanyForUniversity(string country,string group)
begin
  boolean res,foundf;
  record WebNGCompCountryVc WCCr;
  
  res = false;
  
  if (LoginState==false and nonblank(country)) then begin
    foundf = true;
    WCCr.Country = country;
    while (LoopKey("Country",WCCr,1,foundf)) begin
      if (WCCr.Country!=country) then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (WCCr.GroupID==group or blank(group)) then begin
          foundf = false;
          res = SetCompany(WCCr.CompanyNr,false);
        end;
      end;
    end;
  end;
  
  SetCompanyForUniversity = res;
  return;
end;

global
procedure UniversityApp(record WebNGStructVc WSr,string path)
begin
  string 255 node,mpath;
  
  mpath = path;
  node = removenextnode(mpath);
  
  switch (node) begin
    case "apply"  : UniversityApplyForCourse(WSr,mpath);
    case "courses": UniversityPlannedCourses(WSr,mpath);
    case "error"  : UniversityShowError(WSr,mpath);
    otherwise
      RedirectToUniversityFunction("courses","");
  end;
  
  return;
end;