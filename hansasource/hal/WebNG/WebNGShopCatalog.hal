//tools
external function string 255 removenextnode(var string);
external function boolean LoginState();
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external function boolean ToolWebOutProductInfoTextFormat(record WebNGProductVc);
external function string 10 CurrentWebLang();
//elements
external procedure ShowWebElementTemplate(string,integer);
//pages
external procedure ShowErrorPage(string);
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//shop
external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
external procedure RedirectToShopPage(string);
external function string 255 LinkToProductInfo(record WebNGProductVc);
//download app
external function boolean ProductHasImage(record WebNGProductVc,var string);
//shoptools
external function string 255 GetLinkToShop();
external function val ShopGetItemPrice(string,val,var val,var string,var string,integer);
external function string 255 GetItemAvailablity(string,Integer,val,var val);
external function Integer GetShowStockLevel();
//translation
external function string 255 ToolWebNGTranslateText(integer);
external function string 255 GetTranslatedNameProduct(record WebNGProductVc);
external function string 255 GetTranslatedNameProductCategory(record WebNGProductCatVc);
//std
external procedure GetBaseCurncy(Integer,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function string 255 ConvertXml(string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Integer GetItemVarietiesForGroup(string,string,var array string,var array string);
external function string 255 GetNextValue(var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function string 255 AddStr(string,string,string);
external function string 60 AddObjectToObjectList(string,string);
external function string 60 RemoveObjectFromObjectList(string,string);
external updating procedure WebshopLoadExistingOrder(var record WebNGShopBasketVc,Longint,Boolean);
external updating procedure CreateNewShoppingBasket(var record WebNGShopBasketVc);
external function string 60 AddObjectToObjectList(string,string);
external updating procedure StoreProductCustomerView(string,string);
external function boolean FileNameIsImage(string);

function string 255 GetFullCatTree(string cat)
begin
  string 255 res;
  record WebNGProductCatVc WPCr;
  
  if (nonblank(cat)) begin
    WPCr.Code = cat;
    if (ReadFirstMain(WPCr,1,true)) begin
      res = GetFullCatTree(WPCr.ParentCategory) & WPCr.Code & "/" & res;
    end;
  end;

  GetFullCatTree = res;
  return;
end;

global
function Boolean ShopGetObjectImage(record ObjVc Objr,var string src)
begin
  Boolean res;
  record Attach2Vc Attachr;
  record RLinkVc RLr;
  Integer i;

  i = 1;
  while (ReadRecordLink(Objr,i,Attachr,RLr)) begin
    if (FileNameIsImage(Attachr.FileName)) then begin
      src = GetLinkToShop & "images_dep/" & Objr.Code;
      res = true;
      goto LGetObjectImage;
    end;
    i = i + 1;
  end;
 
LGetObjectImage:;
  ShopGetObjectImage = res;
  return;
end;

procedure DisplayExistingObjects(record WebNGFavItemVc WFr)
begin
  string 255 tstr,tmp,src;
  Longint pos;
  record ObjVc Objr;

  WebOutString("<div class='object_item_wrap'>");
  tstr = WFr.Objects;
  while (GetNextSubstring(tstr,pos,",",tmp)) begin
    Objr.Code = tmp;
    if (ReadFirstMain(Objr,1,true)) then begin
      WebOutString("<div class='object_item'><span class='object_item_image'>");
      if (ShopGetObjectImage(Objr,src)) then begin
        WebOutString("<img src='" & src & "'>");
      end;
      WebOutString("</span><span class='object_item_name'>" & Objr.Comment & "</span><span class='remove_obj' object='" & Objr.Code & "' item='" & WFr.ItemCode & "'></span></div>");
    end;
  end;
  WebOutString("</div>");

  return;
end;

function string 20 GetWebshopDefaultOTCode(string custcode)
begin
  record WebNGShopCompBlock WSCb;
  record CUVc CUr;
  record CCatVc CCatr;
  string 20 res;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = CUr.WebOTCode;
    if (blank(res)) then begin
      CCatr.Code = CUr.CustCat;
      if (ReadFirstMain(CCatr,1,true)) then begin
        res = CCatr.WebOTCode;
      end;
    end;
  end;
  if (blank(res)) then begin
    BlockLoad(WSCb);
    res = WSCb.WebOTCode;
  end;
  
  GetWebshopDefaultOTCode = res;
  return;
end;

procedure DisplayNewObjectExtry(record WebNGFavItemVc WFr)
begin
  record ObjVc Objr;
  Boolean TrHs;
  string 20 otcode;

  otcode = GetWebshopDefaultOTCode(CurrentCust);
  WebOutString("<div class='object_entry_form'>");
  WebOutString("<form method='POST' action='/WebUpdatingAction.hal'>");
  WebOutString("<input type='hidden' name='path' value='" & WebGetArg("path") & "'>");
  WebOutString("<input type='hidden' name='action' value='shopaddobject'>");
  WebOutString("<input type='hidden' name='addf' value='1'>");
  WebOutString("<input type='hidden' name='item' value='" & WFr.ItemCode & "'>");
  WebOutString("<select name='object_code'>");
  WebOutString("<option value=''>" & ToolWebNGTranslateText(26021) & "</option>");
  TrHs = true;
  Objr.OTCode = otcode;
  while (LoopKey("OTCode",Objr,1,TrHs)) begin
    if (Objr.OTCode!=otcode) then begin
      TrHs = false;
    end else begin
      if (SetInSet(Objr.Code,WFr.Objects)==false) then begin
        WebOutString("<option value='" & Objr.Code & "'>" & Objr.Comment & "</option>");
      end;
    end;
  end;
  WebOutString("</select>");
  WebOutString("<input type='submit' value='" & ToolWebNGTranslateText(26022) & "'>");
  WebOutString("</form>");
  WebOutString("</div>");

  return;
end;

procedure DisplayOrderQtyInput(record WebNGFavItemVc WFr)
begin
  
  WebOutStringFormatNL("<div class='manage_order_qty'><div class='manage_order_qty_label'>" & ToolWebNGTranslateText(26023) & "<div><div class='manage_order_qty_fw'><input type='text' value='" & WFr.OrdQty & "' class='manage_order_qty_field' item='" & WFr.ItemCode & "'></div></div>");

  return;
end;

global
procedure ShopManageFavouriteItem(string mpath)
begin
  record WebNGFavItemVc WFr;
  string 255 path,item;
  record WebNGProductVc WPr;
 
  if (LoginState) then begin
    path = mpath;
    item = removenextnode(path);
    WPr.Code = item;
    if (ReadFirstMain(WPr,1,true)) then begin
      WFr.CustCode = CurrentCust;
      WFr.ItemCode = WPr.Code;
      if (ReadFirstMain(WFr,2,true)) then begin
        DisplayExistingObjects(WFr);
        DisplayNewObjectExtry(WFr);
        DisplayOrderQtyInput(WFr);
      end;
    end;
  end;
  
  return;
end;

global
procedure ShowShopCatalogCategories(record WebNGElementVc WEr,string category)
begin
  record WebNGProductCatVc WPCr;
  string 255 ckey,tstr;
  boolean foundf,firstline;
  
  if (blank(category)) then begin
    ckey = "ParentCategory";
  end else begin
    ckey = "ParentCategory2:" & category;
  end;
  firstline = true;
  foundf = true;
  while (LoopKey(ckey,WPCr,1,foundf)) begin
    if (blank(category)) then begin
      if (nonblank(WPCr.ParentCategory)) then begin
        foundf = false;
      end;
    end;
    if (foundf) then begin
      if (firstline) then begin
        firstline = false;
        WebOutTagOpen("<ul>");
      end;
      
      tstr = GetLinkToShop & "catalog/" & GetFullCatTree(WPCr.ParentCategory) & WPCr.Code;
      WebOutStringFormatNL("<li><a href=""" & tstr & """>" & GetTranslatedNameProductCategory(WPCr) & "</a></li>");
      ShowShopCatalogCategories(WEr,WPCr.Code);
    end;
  end;
  if (firstline==false) then begin
    WebOutTagClose("</ul>");
  end;
  return;
end;

global
procedure ShowProductShortDescription(record WebNGProductVc WPr)
begin
  record WebNGTranslateVc WTr;
  row WebNGTranslateVc WTrw;
  boolean res;
  integer i,cnt;
  
  WTr.Code = WPr.Code;
  WTr.FileName = 2; //Product
  WTr.LangCode = CurrentWebLang;
  res = ReadFirstKey("FileName",WTr,3,true);
  if (res==false) then begin
    WTr.Code = WPr.Code;
    WTr.FileName = 2;
    WTr.LangCode = WPr.DefLangCode;
    res = ReadFirstKey("FileName",WTr,3,true);
  end;
  
  if (res) then begin
    cnt = MatRowCnt(WTr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WTr,i,WTrw);
      WebOutStringFormat(WTrw.OverviewText);
    end;
  end;
  
  return;
end;

procedure ShowProductMandatoryIncludes(record WebNGProductVc WPr)
begin
  row WebNGProductVc WPrw;
  record WebNGProductVc WProdr;
  integer i,cnt;
  boolean firstline;
  
  firstline = true;
  cnt = MatRowCnt(WPr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(WPr,i,WPrw);
    if (WPrw.Requirement==1) then begin
      if (WPrw.SelectionType==0) then begin //TODO: also support components groups here
        WProdr.Code = WPrw.ComponentCode;
        if (ReadFirstMain(WProdr,1,true)) then begin
          if (firstline) then begin
            firstline = false;
            WebOutTagOpen("<div class=""shopcatalog_mandatoryitems"">");
            WebOutStringFormatNL("<h3>" & ToolWebNGTranslateText(25313) & "</h3>"); //Includes mandatory components
            WebOutTagOpen("<ul>");
          end;
          
          WebOutTagOpen("<li>");
          WebOutStringFormat(GetTranslatedNameProduct(WProdr));
          WebOutTagClose("</li>");
        end;
      end;
    end;
  end;
  
  if (firstline==false) then begin
    WebOutTagClose("</ul>");
    WebOutTagClose("</div>");
  end;
  
  return;
end;

procedure ShowShopCatalogJavaScript()
begin
  WebOutTagOpen("<script type=""text/javascript"">");
  WebOutStringFormatNL("function submitAddToBasket(rownr) {");
  WebOutStringFormatNL("  addtobasket_oFormObject = document.forms['shopproductinfo_addtobasket_' + rownr];");
  WebOutStringFormatNL("  updatetobasket_oFormObject2 = document.forms['shopproductinfo_updatetobasket_' + rownr];");
  WebOutStringFormatNL("  addtobasket_oFormObject.elements[""qty""].value =  updatetobasket_oFormObject2.elements[""qty""].value;");
  WebOutStringFormatNL("  var elem = document.getElementById('shopproductinfo_addtobasket_' + rownr);");
  WebOutStringFormatNL("  if (elem)");
  WebOutStringFormatNL("    elem.submit();");
  WebOutStringFormatNL("  return false;");
  WebOutStringFormatNL("}");
  WebOutTagClose("</script>");
  
  return;
end;

global
procedure ShopProductInfoApp(record WebNGStructVc WSr,string path)
begin
  boolean foundf;
  string 255 node,mpath;
  record WebNGPageVc WPr;
  row WebNGPageVc WPrw;
  record WebNGProductVc WProdr;
  string 60 sz,msk,mskrep,vargroup;
  string 200 varsubset,res;
  Integer i,cnt;
  array string 10 a_varcode;
  array string 60 a_varcomment;
  
  // handles:
  // /productinfo/12345

  mpath = path;
  node = removenextnode(mpath);
  
  if (nonblank(node)) then begin    
    foundf = true;
    WProdr.Code = urldecode(node);
    if (ReadFirstMain(WProdr,1,true)) then begin
      if (WProdr.Closed==1) then begin
        foundf = false;
      end;
    end;
    
    if (foundf) then begin
      WPr.Code = WSr.WebPage;
      if (nonblank(WPr.Code)) then begin
        if (ReadFirstMain(WPr,1,true)) then begin end;
      end;
      
      if (nonblank(WProdr.ElementCode)) then begin
        WPrw.WebElement = WProdr.ElementCode;
        WPrw.Position = 3; //HTML Head
        MatRowInsert(WPr,0,WPrw);
      end;

      ShowWebAppPageStart(WPr,"");
      ShowShopCatalogJavaScript;

      WebOutTagOpen("<div class=""shopproductinfodiv"">");
      
      WebOutTagOpen("<form class='shopproductinfo_addtobasket' id=""shopproductinfo_addtobasket_0"" name=""shopproductinfo_addtobasket_0"" method=""POST"" action=""/WebUpdatingAction.hal"" style=""display: inline"">");
      WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""addtobasket"">");
      WebOutStringFormatNL("<input type=""hidden"" name=""qty"" value="""">");
      WebOutStringFormatNL("<input type=""hidden"" name=""product"" value=""" & ConvertXml(WProdr.Code) & """>");
      if (FindItemVAR(WProdr.Code,sz,msk,mskrep,varsubset)) then begin
        WebOutTagOpen("<div class=""shopproductinfo_varieties"">");
        vargroup = GetNextValue(msk);
        while (nonblank(vargroup)) begin
          cnt = GetItemVarietiesForGroup(WProdr.Code,vargroup,a_varcode,a_varcomment);
          if (cnt>0) then begin
            WebOutTagOpen("<select name=""var_" & vargroup & """>");
            for (i=0;i<cnt;i=i+1) begin
              WebOutStringFormatNL("<option value=""" & a_varcode[i] & """>" & a_varcomment[i] & "</option>");
            end;
            WebOutTagClose("</select>");
          end;
          vargroup = GetNextValue(msk);
        end;
        WebOutTagClose("</div>");
      end;
      WebOutTagClose("</form>");
      
      WebOutTagOpen("<div class=""shopproductinfo_actions_top"">");
      WebOutStringFormat("<a href="""""" onclick=""javascript:return submitAddToBasket(0);"">" & ToolWebNGTranslateText(25510) & "</a>");
      WebOutStringFormat(" | ");
      WebOutStringFormat("<a href=""javascript:history.back();"">" & ToolWebNGTranslateText(25509) & "</a>"); //Back
      WebOutTagClose("</div>");            

      if (ToolWebOutProductInfoTextFormat(WProdr)==false) then begin
        WebOutTagOpen("<h1>");
        WebOutStringFormat(WProdr.Comment);
        WebOutTagClose("</h1>");
        
        WebOutTagOpen("<p>")
        WebOutStringFormat(ToolWebNGTranslateText(25903)); //This product has currently has no detailed information.
        WebOutTagClose("</p>");
      end;
      
      WebOutTagClose("</div>");

      ShowWebAppPageEnd(WPr);
      queued.StoreProductCustomerView(WPr.Code,CurrentCust);
    end else begin
      ShowErrorPage(ToolWebNGTranslateText(25006)); //The specified product does not exist
    end;
  end else begin
    RedirectToShopPage("catalog");
  end;
  return;
end;

function string 255 GetLinkToWebCategory()
begin
  transaction string 255 gLastCatLink;
  string 255 res;

  res = GetLinkToShop;
  res = FormatSimpleLink(res & "catalog/" & gLastCatLink,true);

  GetLinkToWebCategory = res;
  return;
end;

procedure ShowSubCategories(string mcategory)
begin
  record WebNGProductCatVc WPCr;
  string 255 ckey,tstr;
  boolean foundf;
  boolean firstline;
  record CUVc CUr;
  string 20 category;
  boolean prevcat;
  string 255 baselink;

  category = mcategory;
  prevcat = true;
  if (blank(category)) then begin
    prevcat = false;
    CUr.Code = CurrentCust;
    if (nonblank(CUr.Code)) then begin
      ReadFirstMain(CUr,1,true);
      category = CUr.MainDispGroup;
    end;
  end;
  if (blank(category)) then begin
    ckey = "ParentCategory";
  end else begin
    ckey = "ParentCategory2:" & category;
  end;
  firstline = true;
  foundf = true;
  baselink = GetLinkToWebCategory();
  while (LoopKey(ckey,WPCr,1,foundf)) begin
    if (blank(category)) then begin
      if (nonblank(WPCr.ParentCategory)) then begin
        foundf = false;
      end;
    end;
    if (foundf) then begin
      if (firstline) then begin
        firstline = false;
        WebOutTagOpen("<ul class=""shopcatalogcategories"">");
      end;
      
      tstr = Lowercase(WPCr.Code);
      tstr = FormatSimpleLink(baselink & "/" & tstr,true);
      
      WebOutString("<li><a href=""" & tstr & """>" & GetTranslatedNameProductCategory(WPCr) & "</a>");
    end;
  end;
 
  if (firstline==false) then begin
    WebOutTagClose("</ul>");
  end;
  return;
end;

procedure GetItemStartPos(Integer tot,Integer pn,Integer perpage,var Integer sp,var Integer ep,Integer pagetype)
begin
  
  if (pagetype>0) then begin
    sp = (pn-1)*perpage;
    ep = sp + perpage;
  end else begin
    sp = 0;
    ep = tot;
  end;
  
  return;
end;

procedure ShowProductCatalogPager(integer currentpage,integer cnt,record WebNGShopCompBlock WSCb,integer pos,string category)
begin
  integer i,a,z,cp;
  integer listlen;
  string 255 link;
  Integer noofpages;
  
  listlen = WSCb.MaxPages;
  //link = "?page=";
  if (pos!=WSCb.PaginationType and WSCb.PaginationType!=kWebPaginationBoth) then begin
    goto LSkipPagination;
  end;
  noofpages = cnt/WSCb.ItemsPerPage;
  if (noofpages*WSCb.ItemsPerPage!=cnt) then begin
    noofpages = noofpages + 1;
  end;
  if (InString(WebGetArg("path"),"/p/")<=0) then begin
    if (blank(category)) then begin
      link =  "catalog/p/";
    end else begin
      link = category & "/p/";
    end;
  end;
  cp = currentpage;
  if (currentpage>noofpages) then begin
    cp = noofpages;
  end else begin
    if (currentpage<1) then begin
      cp = 1;
    end else begin
      cp = currentpage;
    end;
  end;
  WebOutTagOpen("<div class=""shopcatalog_selectpage"">");
  if (noofpages>1) then begin
    WebOutStringFormat(ToolWebNGTranslateText(25310) & " "); //Page

    if (noofpages>=listlen) then begin
      a = cp-(listlen/2);
      if (a<1) then begin a = 1; end;
    end else begin
      a = 1;
    end;
  
    z = a+listlen-1;
    if (z>noofpages) then begin
      z = noofpages; 
      a = noofpages-listlen+1; 
      if (a<1) then begin
        a = 1;
      end;
    end;

    if (a>1) then begin
      WebOutString("<a href=""" & link & currentpage-1 & """>&lt;&lt;</a> ");
    end;

    for (i=a;i<=z;i=i+1) begin
      if (i!=cp) then begin
        WebOutTagOpen("<a class=""shopcatalog_pageno"" href=""" & link & i & """>");
      end;
      WebOutString(i);
      if (i!=cp) then begin
        WebOutTagClose("</a>");
      end;
      if (i!=z) then begin
        WebOutString("<span class='page_divider'></span>");
      end;
    end;

    if (z<noofpages) then begin
      WebOutString(" <a href=""" & link & currentpage+1 & """>&gt;&gt;</a>");
    end;
  end;
  WebOutTagClose("</div>");
  

LSkipPagination:;
  return;
end;

global
procedure ShowProductCatalogHeading(integer currentpage,integer noofpages)
begin
  
  WebOutTagOpen("<div class=""shopcataloghead"">");

  WebOutTagOpen("<div class=""shopcatalog_selectproduct"">");
  WebOutStringFormat(ToolWebNGTranslateText(25311)); //Select your product
  WebOutTagClose("</div>");

  //if (noofpages>1) then begin
  //  ShowProductCatalogPager(currentpage,noofpages);
  //end;
            
  WebOutTagClose("</div>");
  return;
end;

global
procedure ShowProductCatalogHeading2(integer currentpage,integer cnt,record WebNGShopCompBlock WSCb,string category)
begin
  
  WebOutTagOpen("<div class=""shopcataloghead"">");

  WebOutTagOpen("<div class=""shopcatalog_selectproduct"">");
  WebOutStringFormat(ToolWebNGTranslateText(25311)); //Select your product
  WebOutTagClose("</div>");

  ShowProductCatalogPager(currentpage,cnt,WSCb,kWebPaginationOnTop,category);
  
  WebOutTagClose("</div>");
  return;
end;

procedure ShowProductFavouriteElement(record WebNGProductVc WPr,var Boolean isfavf)
begin
  record WebNGFavItemVc WFr;
  Boolean testf;
  Integer stat;
  string 20 statcls;
  string 50 objlist,tstr;
  Longint pos;
  transaction string 255 gLastCatLink;


  isfavf = false;
  if (LoginState) then begin
    WFr.CustCode = CurrentCust;
    WFr.ItemCode = WPr.Code;
    statcls = "not_added";
    stat = 0;
    if (ReadFirstMain(WFr,2,true)) then begin
      isfavf = true;
      stat = 1;
      statcls = "added";
    end;
    WebOutString("<div class='fav_item_wrap'>");
    WebOutString("<div class='fav_item_icon " & statcls & "' onclick=""AddProductToFavourites(this,'" & WPr.Code & "',''," & stat & ")""></div>");
    WebOutString("</div>");
  end;

  return;
end;

function Boolean HasConnectedItems(string code)
begin
  record AltINVc AltINr;
  record CrossINVc CINr;
  Boolean res;
  
  AltINr.ItemCode = code;
  AltINr.CustCode = CurrentCust;
  res = ReadFirstKey("CustItem",AltINr,2,true);
  if (res==false) then begin
    AltINr.ItemCode = code;
    AltINr.CustCode = "";
    res = ReadFirstKey("CustItem",AltINr,2,true);  
  end;
  if (res==false) then begin
    CINr.ItemCode = code;
    CINr.CustCode = CurrentCust;
    res = ReadFirstKey("CustItem",CINr,2,true);
  end;
  if (res==false) then begin
    CINr.ItemCode = code;
    CINr.CustCode = "";
    res = ReadFirstKey("CustItem",CINr,2,true);
  end;

  HasConnectedItems = res;
  return;
end;

global
procedure ShowCatalogProductRow(record WebNGProductVc WPr,integer rownr,val qtyinbasket,boolean hidepricef)
begin
  string 255 link,custcurrency,vatcode,href;
  val price,reb,sum,AvailableQty;
  record GeneralOptionBlock GenOptRec;
  string 60 sz,msk,mskrep,vargroup;
  string 200 varsubset,res;
  Integer i,cnt,ShowStockLevel;
  array string 10 a_varcode;
  array string 60 a_varcomment;
  string 30 imageid;
  Boolean isfavf;
  string 255 cls1,cls2;
  record INVc INr;
  string 255 addclass;

  BlockLoad(GenOptRec);
  
  addclass = " simple";
  if (GetSessionString("webshop_lm")=="1") then begin
    addclass = " expaneded";
  end;

  if (rownr==1) then begin
    WebOutTagOpen("<div class=""shopcatalogrow firstrow" & addclass & """>");
  end else begin
    WebOutTagOpen("<div class=""shopcatalogrow" & addclass & """>");
  end;

  WebOutTagOpen("<div class=""shopcatalogcol_no"">");
  WebOutStringFormat(rownr & ".");
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopcatalogcol_main"">");
  
  WebOutTagOpen("<div class=""shopcatalog_itemimage"">");
  if (ProductHasImage(WPr,imageid)) then begin
    link = GetLinkToShop & "images/";
    link = FormatSimpleLink(link & URLEncode(WPr.Code),true);
    href = FormatSimpleLink(LinkToProductInfo(WPr),true);
    WebOutStringFormat("<a href=""" & href & """><img src=""" & link & """></a>");
  end else begin
    WebOutString("<div class='shopcatalog_itemimage_replace'></div>");
  end;
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""shopcatalog_firstline"">");

  ShowProductFavouriteElement(WPr,isfavf);

  WebOutTagOpen("<div class=""shopcatalog_productname"">");
  link = FormatSimpleLink(LinkToProductInfo(WPr),true);
  WebOutStringFormat("<a href=""" & link & """>" & GetTranslatedNameProduct(WPr) & "</a>");
  WebOutTagClose("</div>");
  WebOutTagClose("</div>"); // shopcatalog_firstline

  WebOutTagOpen("<div class=""shopcatalog_secondline"">");

  WebOutTagOpen("<div class=""shopcatalog_itemcode"">");
  WebOutStringFormat(ToolWebNGTranslateText(32433) & ": " & WPr.Code & " "); // Item Code
  WebOutTagClose("</div>");

  if (hidepricef==false) then begin
    price = ShopGetItemPrice(WPr.Code,1,reb,vatcode,custcurrency,0);
    CalcSum(1,price,0,reb,sum,GenOptRec.UseDiscount);

    if (blank(custcurrency)) then begin
      GetBaseCurncy(1,custcurrency);
    end;
  end;

  WebOutTagOpen("<div class=""shopcatalog_unitprice"">");
  if (hidepricef==false) then begin
    if (WPr.Configurable==1) then begin
      WebOutStringFormat(ToolWebNGTranslateText(25600) & " " & ToolWebNGTranslateText(25601) & " " & custcurrency & " " & price); //Price: //from
    end else begin
      WebOutStringFormat(ToolWebNGTranslateText(25600) & " " & custcurrency & " <span class='item_price_val'>" & price & "</span>"); //Price:
    end;
  end else begin
    WebOutStringFormat("&nbsp;");
  end;
  WebOutTagClose("</div>");
  
  if (hidepricef==false) then begin
    if (price!=sum) then begin
      WebOutTagOpen("<div class=""shopcatalog_discperc"">");
      WebOutStringFormat(ToolWebNGTranslateText(25603) & " " & ValToString(reb,M41Val,"",".",0) & " %");
      WebOutTagClose("</div>");
      
      WebOutTagOpen("<div class=""shopcatalog_discprice"">");
      WebOutStringFormat(ToolWebNGTranslateText(25604) & " <span class='item_discprice_val'>" & sum & "</span>");
      WebOutTagClose("</div>");
    end;
  end;

  if (qtyinbasket>0) then begin
    WebOutTagOpen("<div class=""shopcatalog_qtyinbasket"">");
    WebOutStringFormat(ValToString(qtyinbasket,M4UVal,"",",",0) & " " & ToolWebNGTranslateText(25602)); //in basket
    WebOutTagClose("</div>");
  end;

  ShowStockLevel = GetShowStockLevel;
  link = GetItemAvailablity(WPr.Code,ShowStockLevel,WPr.LimitedInStock,AvailableQty);
  if (nonblank(link)) then begin
    WebOutTagOpen("<div class=""shopcatalog_availability"">");
    WebOutStringFormat(link);
    WebOutTagClose("</div>");
  end;

  ShowProductMandatoryIncludes(WPr);

  WebOutTagOpen("<div class=""shopcatalog_shortdescription"">");
  ShowProductShortDescription(WPr);
  WebOutTagClose("</div>");

  WebOutTagClose("</div>"); // shopcatalog_secondline
  WebOutTagOpen("<div class=""shopcatalog_thirdline"">");

  WebOutString("<form class='shopproductinfo_updatetobasket' id=""shopproductinfo_updatetobasket_" & rownr & """ name=""shopproductinfo_updatetobasket_" & rownr & """ method='POST' action='/WebUpdatingAction.hal'>");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""cat_updatebasketqty"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""product"" value=""" & ConvertXml(WPr.Code) & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""path"" value=""" & WebGetArg("path") & """>");
  WebOutStringFormatNL("<input type=""text"" name=""qty"" class='item_qty_field' value=""" & ValToString(qtyinbasket,M4Qty,"",".",0) & """>");

  if (ReadFirstItem(WPr.Code,INr,false,false)) then begin
    if (INr.QtyonPallet>0) then begin
      if (GetSessionString("webshop_qtytype_" & WPr.Code)=="0" or GetSessionString("webshop_qtytype_" & WPr.Code)=="") then begin
        cls1 = "active";
      end else begin
        cls2 = "active";
      end;
      WebOutStringFormatNL("<div class='qty_type_selection' item='" & INr.Code & "'><div class='qty_type_pcs " & cls1 & "'>" & ToolWebNGTranslateText(25605) & "</div><div class='qty_type_pallets " & cls2 & "'>" & ToolWebNGTranslateText(25606) & "</div></div>");
    end else begin
      WebOutStringFormatNL("<div class='qty_type_selection empty'></div>");
    
    end;
  end;

  WebOutString("</form>");

  WebOutTagOpen("<form class='shopproductinfo_addtobasket' id=""shopproductinfo_addtobasket_" & rownr & """ name=""shopproductinfo_addtobasket_" & rownr & """ method=""POST"" action=""/WebUpdatingAction.hal"" style=""display: inline"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""addtobasket"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""product"" value=""" & ConvertXml(WPr.Code) & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""qty"" value="""">");
  if (FindItemVAR(WPr.Code,sz,msk,mskrep,varsubset)) then begin
    WebOutTagOpen("<div class=""shopcatalog_varieties"">");
    vargroup = GetNextValue(msk);
    while (nonblank(vargroup)) begin
      cnt = GetItemVarietiesForGroup(WPr.Code,vargroup,a_varcode,a_varcomment);
      if (cnt>0) then begin
        WebOutTagOpen("<select name=""var_" & vargroup & """>");
        for (i=0;i<cnt;i=i+1) begin
          WebOutStringFormatNL("<option value=""" & a_varcode[i] & """>" & a_varcomment[i] & "</option>");
        end;
        WebOutTagClose("</select>");
      end;
      vargroup = GetNextValue(msk);
    end;
    WebOutTagClose("</div>");
  end;
  WebOutTagClose("</form>");

  WebOutTagOpen("<div class=""shopcatalog_actions"">");
  link = FormatSimpleLink(LinkToProductInfo(WPr),true);
  WebOutStringFormat("<a class='more_info_link' href=""" & link & """>" & ToolWebNGTranslateText(25511) & "</a>"); //More Info
  WebOutStringFormat(" | ");
  WebOutStringFormat("<a class='add_to_basket_link' href="""" onclick=""javascript:return submitAddToBasket(" & rownr & ");"">" & ToolWebNGTranslateText(25510) & "</a>"); //Add to basket // " & ToolWebNGTranslateText(25510) & "
  if (isfavf) then begin
    WebOutStringFormat("<a class='manage_link' href=""" & GetLinkToShop & "manage/" & WPr.Code & """>" & ToolWebNGTranslateText(26019) & "</a>");
  end;
  if (HasConnectedItems(WPr.Code)) then begin
    WebOutStringFormat("<a class='connected_items_link' href='/WebAction.hal?action=loadconnecteditems&item=" & WPr.Code & "' item='" & WPr.Code & "'>" & ToolWebNGTranslateText(26020) & "</a>");
  end;
  WebOutTagClose("</div>");

  WebOutTagClose("</div>"); // shopcatalog_thirdline

  WebOutTagClose("</div>");
  WebOutTagClose("</div>");
  
  queued.StoreProductCustomerView(WPr.Code,CurrentCust);
      
  return;
end;

procedure GetProductQtysInBasket(var vector val basketqtys)
begin
  record WebNGShopBasketVc WSBr;
  row WebNGShopBasketVc WSBrw;
  integer i,cnt;
  record INVc INr;

  if (GetShoppingBasket(WSBr,0)) then begin
    cnt = MatRowCnt(WSBr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WSBr,i,WSBrw);
      ReadFirstItem(WSBrw.Product,INr,false,false);
      if (WSBrw.QtyType==0) then begin
        basketqtys[INr.Code] = basketqtys[INr.Code] + WSBrw.Qty;
      end else begin
        basketqtys[INr.Code] = basketqtys[INr.Code] + WSBrw.PalletQty;      
      end;
    end;
  end;

  return;
end;

function Boolean ShowTestFavItem(string code,string cat)
begin
  Boolean res;
  record WebNGFavItemVc WFr;
  string 255 tstr,tmp,catlist;
  Longint pos;
  transaction string 255 gWebshopObjectList;

  res = true;
  if (LoginState) then begin
    res = GetSessionString("webshop_favf")!="1";
    WFr.CustCode = CurrentCust;
    WFr.ItemCode = code;
    if (ReadFirstMain(WFr,2,true)) then begin
      if (GetSessionString("webshop_favf")=="1") then begin
        res = true;
      end;
      if (res and nonblank(GetSessionString("webshop_objlist_" & cat))) then begin
        res = false;
      end;
      catlist = GetSessionString("webshop_objlist_" & cat);
      tstr = WFr.Objects;
      while (GetNextSubstring(tstr,pos,",",tmp)) begin
        if (SetInSet(tmp,gWebshopObjectList)==false) then begin
          gWebshopObjectList = AddObjectToObjectList(gWebshopObjectList,tmp);        
        end;
        if (nonblank(GetSessionString("webshop_objlist_" & cat))) then begin
          if (SetInSet(tmp,catlist)) begin
            res = true;
          end;
        end;
      end;
    end else begin
      if (res and nonblank(GetSessionString("webshop_objlist_" & cat))) then begin
        res = false;
      end;
    end;
  end;

  ShowTestFavItem = res;
  return;
end;

procedure ShowFavItemNav()
begin
  string 255 action;

  if (LoginState) then begin
    action = " onchange='this.form.submit()'";
    WebOutString("<form method='GET' action='' class='fav_item_form'>");
    if (GetSessionString("webshop_favf")=="1") then begin
      WebOutString("<div class='f_opt'><input type='radio' name='setfavf' value='0' " & action & "><div class='f_opt_text'>" & ToolWebNGTranslateText(25534) & "</div></div>");
      WebOutString("<div class='f_opt'><input type='radio' name='setfavf' value='1' " & action & " CHECKED><div class='f_opt_text'>" & ToolWebNGTranslateText(25535) & "</div></div>");
    end else begin
      WebOutString("<div class='f_opt'><input type='radio' name='setfavf' value='0' " & action & " CHECKED><div class='f_opt_text'>" & ToolWebNGTranslateText(25534) & "</div></div>");
      WebOutString("<div class='f_opt'><input type='radio' name='setfavf' value='1' " & action & "><div class='f_opt_text'>" & ToolWebNGTranslateText(25535) & "</div></div>");
    end;
    WebOutString("</form>");
    WebOutString("<div id='shop_objects'></div>");
  end;

  return;
end;

procedure ShowDisplaySwitchForm()
begin
  string 255 action;
 
  WebOutString("<div class='display_mode_form'>");
  if (GetSessionString("webshop_lm")=="1") then begin
    WebOutString("<div class='switch_opt list1'><a href='?listmode=0'></a></div>");
    WebOutString("<div class='switch_opt list2 active'><a href='?listmode=1'></a></div>");
  end else begin
    WebOutString("<div class='switch_opt list1 active'><a href='?listmode=0'></a></div>");
    WebOutString("<div class='switch_opt list2'><a href='?listmode=1'></a></div>");
  end;
  WebOutString("</div>");  

  return;
end;

procedure ShowProductsForCategory(string mcategory,integer pagenumber)
begin
  record WebNGProductVc WPr;
  integer i,j,arrcnt;
  boolean foundf,testf;
  boolean firstline;
  vector val basketqtys;
  string 255 ckey;
  record WebNGShopCompBlock WSCb;
  boolean hidepricef;
  record CUVc CUr;
  string 20 category;
  array string 255 sortingItems, nonsortingItems;
  Integer sp,ep;
  transaction string 255 gWebshopObjectList;
  transaction string 255 gLastCatLink;

  category = mcategory;
  if (blank(category)) then begin
    CUr.Code = CurrentCust;
    if (nonblank(CUr.Code)) then begin
      ReadFirstMain(CUr,1,true);
      category = CUr.MainDispGroup;
    end;
  end;
  
  GetProductQtysInBasket(basketqtys);
  i = 0;
  firstline = true;
  foundf = true;
  arrcnt = 0;
  
  BlockLoad(WSCb);
  switch (WSCb.HidePricesNotLoggedIn) begin
    case 1: 
      if (LoginState==false) then begin
        hidepricef = true;
      end;
    case 2: 
      hidepricef = true;
  end;

  if (nonblank(category)) then begin
    ckey = "ProductCategory2:" & category;
  end else begin
    ckey = "ProductCategory";
    WPr.ProductCategory = "";
  end;
  while (LoopKey(ckey,WPr,1,foundf)) begin    
    if (blank(category)) then begin
      if (nonblank(WPr.ProductCategory)) then begin foundf = false; end;
    end;
    testf = true;
    if (ShowTestFavItem(WPr.Code,category)==false) then begin
      testf = false;
    end;
    if (testf) then begin
      if (blank(WPr.Sorting)) then begin
        nonsortingItems[arrcnt] = WPr.Code;
      end else begin
        sortingItems[arrcnt] = WPr.Code;
      end;
    end;
    arrcnt = arrcnt + 1;
  end;
  GetItemStartPos(arrcnt,pagenumber,WSCb.ItemsPerPage,sp,ep,WSCb.PaginationType);
  for (j=sp;j<ep;j=j+1) begin
    testf = true;
    WPr.Code = sortingItems[j];
    if (ReadFirstKey("Code",WPr,1,true)) then begin  
      if (WPr.Closed==1) then begin
        testf = false;
      end;
      if (testf and foundf) then begin
        if (firstline) then begin
          firstline = false;
          WebOutTagOpen("<div class=""shopcatalogdiv"">");
          ShowProductCatalogHeading2(pagenumber,arrcnt,WSCb,category);
        end;
      
        i = i + 1;
        ShowCatalogProductRow(WPr,j,basketqtys[WPr.Code],hidepricef);
      end;
    end;
  end;
  for (j=sp;j<ep;j=j+1) begin
    testf = true;
    WPr.Code = nonsortingItems[j];
    if (ReadFirstKey("Code",WPr,1,true)) then begin  
      if (WPr.Closed==1) then begin
        testf = false;
      end;
      if (testf and foundf) then begin
        if (firstline) then begin
          firstline = false;
          WebOutTagOpen("<div class=""shopcatalogdiv"">");
          ShowProductCatalogHeading2(pagenumber,arrcnt,WSCb,category);
        end;
      
        i = i + 1;
        ShowCatalogProductRow(WPr,j,basketqtys[WPr.Code],hidepricef);
      end;
    end;
  end;
  ShowProductCatalogPager(pagenumber,arrcnt,WSCb,kWebPaginationAtBottom,category)
  if (firstline==false) then begin
    WebOutTagClose("</div>");
  end;
  WebOutString("<div id='shop_objects_helper' objects='" & gWebshopObjectList & "' cat='" & gLastCatLink & "'></div>");
  return;
end;

procedure ShowProductList(string category,integer pagenumber)
begin

  ShowSubCategories(category);
  
  ShowProductsForCategory(category,pagenumber);
  
  return;
end;

procedure ShowCategoryBreadCrumbs(array string breadcrumbarray,array string breadcrumblinkarray)
begin
  integer l;
  integer i,cnt;
  string 255 shoplink,link;
  
  l = StringToInt(breadcrumbarray[0]);
  if (l>0) then begin
  
    WebOutTagOpen("<div class=""shopcatalogbreadcrumbs"">");

    shoplink = GetLinkToShop;
    link = FormatSimpleLink(shoplink & "catalog",true);
    WebOutStringFormat("<a href=""" & link & """>");
    WebOutStringFormat(ToolWebNGTranslateText(25312)); //Products
    WebOutStringFormat("</a>");

    for (i=1;i<=l;i=i+1) begin
      WebOutStringFormat(" >> ");

      link = FormatSimpleLink(shoplink & "catalog/" & breadcrumblinkarray[i],true);
      WebOutStringFormat("<a href=""" & link & """>");
      WebOutStringFormat(breadcrumbarray[i]);
      WebOutStringFormat("</a>");
    end;
    
    WebOutTagClose("</div>");
  end;
  return;
end;

procedure AddToBreadcrumbArray(string CategoryName,string nodepath,var array string breadcrumbarray,var array string breadcrumblinkarray)
begin
  integer l;
  
  l = StringToInt(breadcrumbarray[0]);
  l = l + 1;
  breadcrumbarray[l] = CategoryName;
  breadcrumblinkarray[l] = nodepath;
  breadcrumbarray[0] = l;
  
  return;
end;

global
function string 255 GetShopProductArg()
begin
  string 255 res;
  record INVc INr;
  string 60 sz,msk,mskrep,vargroup;
  string 200 varsubset,tstr;
  
  res = WebGetArg("product");
  if (ReadFirstItem(res,INr,false,false)) then begin
    if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
      vargroup = GetNextValue(msk);
      while (nonblank(vargroup)) begin
        tstr = WebGetArg("var_" & vargroup);
        res = AddStr(res,tstr,sz);
        vargroup = GetNextValue(msk);
      end;
    end;
  end;
  
  GetShopProductArg = res;
  return;
end;

procedure ParseCatalogPath(string path,var string currentcategory,var integer pagenumber,var array string breadcrumbarray,var array string breadcrumblinkarray)
begin
  record WebNGProductCatVc WPCr;
  string 255 mpath;
  string 255 breadcrumbpath;
  string 255 node,previousnode;
  boolean nodehierarchyok;
  string 255 tstr,tstr2;
  record CUVc CUr;

  CUr.Code = CurrentCust;
  if (nonblank(CUr.Code)) then begin
    ReadFirstMain(CUr,1,true);
  end;
  breadcrumbpath = "";
  previousnode = "";

  pagenumber = 1;

  mpath = path;
  node = removenextnode(mpath);
  while (nonblank(node)) begin
    if (node=="p") then begin
      pagenumber = StringToInt(removenextnode(mpath));
      if (pagenumber<=0) then begin
        pagenumber = 1;
      end;
      goto LParseCatalogPath;
    end else begin
      WPCr.Code = node;
      if (ReadFirstMain(WPCr,1,true)) then begin
        currentcategory = node;
      
        if (nonblank(breadcrumbpath)) then begin
          breadcrumbpath = breadcrumbpath & "/";
        end;
      
        breadcrumbpath = breadcrumbpath & node;
      
        nodehierarchyok = false;
        if (blank(previousnode) and blank(WPCr.ParentCategory) or (WPCr.ParentCategory==CUr.MainDispGroup)) then begin
          nodehierarchyok = true;
        end else begin
          if (nonblank(previousnode)) then begin
            tstr = Lowercase(previousnode);
            tstr2 = Lowercase(WPCr.ParentCategory);
            if (SetInSet(tstr,tstr2)) then begin
              nodehierarchyok = true;
            end;
          end;
        end;
      
        if (nodehierarchyok) then begin
          AddToBreadcrumbArray(GetTranslatedNameProductCategory(WPCr),breadcrumbpath,breadcrumbarray,breadcrumblinkarray);
        end else begin
          pagenumber = -1;
          goto LParseCatalogPath;          
        end;
      
      end else begin
        pagenumber = -1;
        goto LParseCatalogPath;
      end;
    end;
    
    previousnode = node;
    node = removenextnode(mpath);
  end;

LParseCatalogPath:;
  return;
end;

function string 255 GetPageTitle(array string breadcrumbarray)
begin
  string 255 res;
  integer l;
  integer i;
  
  l = StringToInt(breadcrumbarray[0]);
  if (l>0) then begin
    for (i=1;i<=l;i=i+1) begin
      res = res & breadcrumbarray[i];
      if (i<l) then begin
        res = res & " - ";
      end;
    end;
  end;
  
  GetPageTitle = res;
  return;
end;


function string 255 OutputAllowedDays(string custcode)
begin
  string 255 res;
  record CUVc CUr;
  record DelRouteVc DelRouter;
  Boolean conft,testf;

  res = "";
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    DelRouter.Code = CUr.Sorting;
    if (ReadFirstMain(DelRouter,1,true)) then begin
      if (DelRouter.MonFlag!=0) then begin
        res = AddObjectToObjectList(res,"1");
      end;
      if (DelRouter.TueFlag!=0) then begin
        res = AddObjectToObjectList(res,"2");
      end;
      if (DelRouter.WedFlag!=0) then begin
        res = AddObjectToObjectList(res,"3");
      end;
      if (DelRouter.ThuFlag!=0) then begin
        res = AddObjectToObjectList(res,"4");
      end;
      if (DelRouter.FriFlag!=0) then begin
        res = AddObjectToObjectList(res,"5");
      end;
      if (DelRouter.SatFlag!=0) then begin
        res = AddObjectToObjectList(res,"6");
      end;
      if (DelRouter.SunFlag!=0) then begin
        res = AddObjectToObjectList(res,"0");
      end;
    end;
  end;

  res = "del_days='" & res & "'";
  OutputAllowedDays = res;
  return;
end;

function Boolean GetListofOrders(string custcode,var array Longint aOrderNr)
begin
  record ORVc ORr;
  Boolean res,TrHs;
  Date min_date;

  ORr.CustCode = custcode;
  ORr.PlanShipDate = AddDay(CurrentDate,1);
  TrHs = true;
  while (LoopKey("PlanShipDate",ORr,2,TrHs)) begin
    if (ORr.CustCode!=custcode) then begin
      //TrHs = false;
    end else begin
      if (ORr.ShipFlag==0) then begin
        res = true;
        aOrderNr[aOrderNr.length] = ORr.SerNr;
      end;
    end;
  end;

  GetListofOrders = res;
  return;
end;

function Boolean GetOpenCustomerOrder(string custcode,var Longint ordernr)
begin
  record ORVc ORr;
  Boolean res,TrHs;
  Date min_date;

  min_date = AddMonth(CurrentDate,-2);//need to think of a better solution with index. Now we don't have proper index

  ORr.CustCode = custcode;
  ORr.OrdDate = CurrentDate;
  TrHs = true;
  while (LoopBackKey("CustDate",ORr,2,TrHs)) begin
    if (ORr.CustCode!=custcode or ORr.OrdDate<min_date) then begin
      TrHs = false;
    end else begin
      if (ORr.ShipFlag==0) then begin
        res = true;
        ordernr = ORr.SerNr;
        goto LGetOpenCustomerOrder;
      end;
    end;
  end;

LGetOpenCustomerOrder:;
  GetOpenCustomerOrder = res;
  return;
end;

procedure ShowOrderNav()
begin
  record WebNGShopBasketVc WSBr;
  record WebNGShopCompBlock WSCb;
  Longint ordernr;
  array Longint aOrderNr;
  Integer i;

  if (LoginState) then begin
    BlockLoad(WSCb);
    if (WSCb.UseExistingOrders==1) then begin
      WebOutString("<div class='shop_order_details'>");
      if (GetShoppingBasket(WSBr,0)==false) then begin
        if (GetOpenCustomerOrder(CurrentCust,ordernr)) then begin
          qupdating.WebshopLoadExistingOrder(WSBr,ordernr,true);
        end else begin
          qupdating.CreateNewShoppingBasket(WSBr);
        end;
      end;
      WebOutString("<div class='order_select'>");
      WebOutString("<div class='select_label'>" & ToolWebNGTranslateText(26014) & "</div>");//onload event adds onchange event to this element
      WebOutString("<select id='order_select_el'>");//onload event adds onchange event to this element
      WebOutString("<option value='-1'>" & ToolWebNGTranslateText(26015) & "</option>");
      if (GetListofOrders(CurrentCust,aOrderNr)) then begin
        for (i=0;i<aOrderNr.length;i=i+1) begin
          if (aOrderNr[i]==WSBr.OrderNr) then begin
            WebOutString("<option value='" & aOrderNr[i] & "' SELECTED>" & aOrderNr[i] & "</option>");
          end else begin
            WebOutString("<option value='" & aOrderNr[i] & "'>" & aOrderNr[i] & "</option>");
          end;
        end;
      end;
      WebOutString("<option value='reorder'>" & ToolWebNGTranslateText(26016) & "</option>");
      WebOutString("</select>");
      WebOutString("</div>");
      WebOutString("<div class='order_date'>");
      if (blank(WSBr.ShipDate)) then begin
        WSBr.ShipDate = CurrentDate;
      end;
      WebOutString("<div class='date_label'>" & ToolWebNGTranslateText(26026) & "</div>");
      WebOutString("<input type='text' name='order_date_el' id='order_date_el' value='" & WSBr.ShipDate & "' " & OutputAllowedDays(CurrentCust) & ">");
      WebOutString("</div>");
      WebOutString("</div>");
    end;
  end;

  return;
end;

global
procedure ShopCatalogApp(record WebNGStructVc WSr,string path)
begin
  record WebNGPageVc WPr;
  record WebNGElementVc WEr;
  record WebNGShopBlock WSb;
  string 255 node,mpath,tstr;
  integer pagenumber;
  array string 255 breadcrumbarray;
  array string 255 breadcrumblinkarray;
  string 255 currentcategory;
  transaction string 255 gLastCatLink;
  
  // handles
  // /catalog/
  // /catalog/page/1
  // /catalog/
  // /catalog/category1/
  // /catalog/category1/category2
  // /catalog/category1/category2/?page=1
  
  ParseCatalogPath(path,currentcategory,pagenumber,breadcrumbarray,breadcrumblinkarray);
  
  PutSessionString("shop_lastcatalogpath",path);
  if (nonblank(WebGetArg("setfavf"))) then begin
    PutSessionString("webshop_favf",WebGetArg("setfavf"));
  end;
  if (nonblank(WebGetArg("listmode"))) then begin
    PutSessionString("webshop_lm",WebGetArg("listmode"));
  end;
  if (nonblank(WebGetArg("selectobj"))) then begin
    if (WebGetArg("selectobj")=="*") then begin
      PutSessionString("webshop_objlist_" & currentcategory,"");    
    end else begin
      tstr = AddObjectToObjectList(GetSessionString("webshop_objlist_" & currentcategory),WebGetArg("selectobj"));        
      PutSessionString("webshop_objlist_" & currentcategory,tstr);
    end;
  end;
  if (nonblank(WebGetArg("deselectobj"))) then begin
    tstr = RemoveObjectFromObjectList(GetSessionString("webshop_objlist_" & currentcategory),WebGetArg("deselectobj"));        
    PutSessionString("webshop_objlist_" & currentcategory,tstr);
  end;

  if (pagenumber<=0) then begin
    ShowErrorPage(ToolWebNGTranslateText(25006)); //Invalid category page number
    goto LShopCatalogApp;
  end;
  
  BlockLoad(WSb);
  
  if (nonblank(WSb.ShopCatalogTemplPage)) then begin
    WPr.Code = WSb.ShopCatalogTemplPage;
  end else begin
    WPr.Code = WSr.WebPage;
  end;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  
  WPr.PageTitle = GetPageTitle(breadcrumbarray);

  ShowWebAppPageStart(WPr,"");

  if (nonblank(WSb.ShopBasketTemplElement)) then begin
    ShowWebElementTemplate(WSb.ShopCatalogTemplElement,0); //before
  end;

  ShowShopCatalogJavaScript;
  
  ShowCategoryBreadCrumbs(breadcrumbarray,breadcrumblinkarray);

  ShowFavItemNav;
  ShowOrderNav;
  ShowDisplaySwitchForm;

  gLastCatLink = breadcrumblinkarray[breadcrumblinkarray.length-1];
  
  ShowProductList(currentcategory,pagenumber);

  if (nonblank(WSb.ShopBasketTemplElement)) then begin
    ShowWebElementTemplate(WSb.ShopCatalogTemplElement,2); //after
  end;

  ShowWebAppPageEnd(WPr);

LShopCatalogApp:;
  return;
end;

global
procedure ShowFilteredShopItems(string cat)
begin
  record WebNGProductVc WPr;
  record INVc INr;
  integer i;
  vector val basketqtys;
  record WebNGShopCompBlock WSCb;
  boolean hidepricef;

  GetProductQtysInBasket(basketqtys);
  i = 0;
  
  BlockLoad(WSCb);
  switch (WSCb.HidePricesNotLoggedIn) begin
    case 1: 
      if (LoginState==false) then begin
        hidepricef = true;
      end;
    case 2: 
      hidepricef = true;
  end;

  WebOutTagOpen("<div class=""shopcatalogdiv"">");
  while (LoopKey("DICode:" & cat,INr,1,true)) begin
    WPr.Code = INr.Code;
    if (ReadFirstMain(WPr,1,true)) then begin
      ShowCatalogProductRow(WPr,i,basketqtys[WPr.Code],hidepricef);
      i = i + 1;
    end;
  end;
  WebOutTagClose("</div>");

  return;
end;

procedure DisplayConnectedItem(string item,val qtyinbasket,Integer rownr)
begin
  record WebNGProductVc WPr;
  string 255 link,custcurrency,vatcode,href;
  val price,reb,sum,AvailableQty;
  record GeneralOptionBlock GenOptRec;
  string 60 sz,msk,mskrep,vargroup;
  string 200 varsubset,res;
  Integer i,cnt,ShowStockLevel;
  array string 10 a_varcode;
  array string 60 a_varcomment;
  string 30 imageid;
  Boolean isfavf;
  record INVc INr;
  
  if (ReadFirstItem(item,INr,false,false)) then begin end;
  WPr.Code = INr.Code;
  WPr.Comment = INr.Name;

  WebOutTagOpen("<div class=""shopcatalogrow"">");

  WebOutTagOpen("<div class=""shopcatalogcol_main"">");

  WebOutTagOpen("<div class=""shopcatalog_productname"">");
  link = FormatSimpleLink(LinkToProductInfo(WPr),true);
  WebOutStringFormat(GetTranslatedNameProduct(WPr));
  WebOutTagClose("</div>");

  price = ShopGetItemPrice(item,1,reb,vatcode,custcurrency,0);
  CalcSum(1,price,0,reb,sum,GenOptRec.UseDiscount);

  if (blank(custcurrency)) then begin
    GetBaseCurncy(1,custcurrency);
  end;
  
  WebOutTagOpen("<div class=""shopcatalog_discprice"">");
  WebOutStringFormat(ToolWebNGTranslateText(25604) & " <span class='item_discprice_val'>" & sum & "</span>");
  WebOutTagClose("</div>");
  
  ShowStockLevel = GetShowStockLevel;
  link = GetItemAvailablity(WPr.Code,ShowStockLevel,WPr.LimitedInStock,AvailableQty);
  if (nonblank(link)) then begin
    WebOutTagOpen("<div class=""shopcatalog_availability"">");
    WebOutStringFormat(link);
    WebOutTagClose("</div>");
  end;

  WebOutTagClose("</div>");

  WebOutString("<form class='shopproductinfo_updatetobasket' method='POST' action='/WebUpdatingAction.hal'>");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""cat_updatebasketqty"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""product"" value=""" & ConvertXml(WPr.Code) & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""path"" value=""" & WebGetArg("path") & """>");
  WebOutStringFormatNL("<input type=""text"" name=""qty"" class='item_qty_field' value=""" & qtyinbasket & """>");
  WebOutString("</form>");

  WebOutTagOpen("<div class=""shopcatalog_actions"">");
  link = FormatSimpleLink(LinkToProductInfo(WPr),true);
  WebOutStringFormat("<a class='more_info_link' href=""" & link & """>" & ToolWebNGTranslateText(25511) & "</a>"); //More Info
  //WebOutStringFormat(" | ");
  WebOutStringFormat("<a class='add_to_basket_link' href="""" onclick=""javascript:return submitAddToBasket(" & rownr & ");""></a>"); //Add to basket // " & ToolWebNGTranslateText(25510) & "
  WebOutTagClose("</div>");
      
  WebOutTagClose("</div>");
  queued.StoreProductCustomerView(INr.Code,CurrentCust);

  return;
end;

global
procedure LoadWebshopConnectedItems(string item)
begin
  record AltINVc AltINr;
  record CrossINVc CINr;
  vector val basketqtys;
  Integer cnt;
  record WebNGPageVc WPr;  
  Boolean firstf;
  
  ShowWebAppPageStart(WPr,"shop_helper_window");
  ShowShopCatalogJavaScript;
  GetProductQtysInBasket(basketqtys);

  WebOutStringFormatNL("<link rel=""stylesheet"" type=""text/css"" href=""/styles/styles.css"">");
  WebOutStringFormatNL("<script type=""text/javascript"" src=""/js/jquery.min.js""></script>");
  WebOutStringFormatNL("<script type=""text/javascript"" src=""/js/jquery.colorbox-min.js""></script>");
  WebOutStringFormatNL("<script type=""text/javascript"" src=""/js/hw.js""></script>");
  WebOutStringFormatNL("<script type=""text/javascript"" src=""/js/slidebars.min.js""></script>");
  WebOutStringFormatNL("<link rel='stylesheet' href='//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css'>");
  WebOutStringFormatNL("<script src='//code.jquery.com/ui/1.11.4/jquery-ui.js'></script>");
  WebOutStringFormatNL("<script type=""text/javascript"" src=""/stdweb.js?ver=124""></script>");

  //Alternative items
  WebOutStringFormat("<div class='item_section'>");
  firstf = true;
  while (LoopMain(AltINr,1,true)) begin
    if (blank(AltINr.CustCode) or AltINr.CustCode==CurrentCust) then begin
      if (firstf) then begin
        WebOutStringFormat("<div class='item_section_head'>" & ToolWebNGTranslateText(26017) & "</div>");
        firstf = false;
      end;
      DisplayConnectedItem(AltINr.AltItemCode,basketqtys[AltINr.AltItemCode],cnt);
      cnt = cnt + 1;
    end;
  end;
  WebOutStringFormat("</div>");
  
  //Crosssale items
  WebOutStringFormat("<div class='item_section'>");
  firstf = true;
  while (LoopMain(CINr,1,true)) begin
    if (blank(CINr.CustCode) or CINr.CustCode==CurrentCust) then begin
      if (firstf) then begin
        WebOutStringFormat("<div class='item_section_head'>" & ToolWebNGTranslateText(26018) & "</div>");
        firstf = false;
      end;
      DisplayConnectedItem(CINr.CrossItemCode,basketqtys[CINr.CrossItemCode],cnt);
      cnt = cnt + 1;
    end;
  end;
  WebOutStringFormat("</div>");

  ShowWebAppPageEnd(WPr);
  return;
end;
