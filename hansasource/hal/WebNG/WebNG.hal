external function Boolean IsMarketplaceServer();
external function Boolean HandleSimplePath(string);

//tools
external procedure LogWebNGMarketplaceClick();
external function string 255 removenextnode(var string);
external function string 255 CleanPath(string);
external procedure ShowRedirectHtml(string,boolean);
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external function string 255 GetStartStructLink();
external function string 255 GetCountrySelectStructLink();
external function string 255 GetLoginPageStructLink();
external function string 10 ToolWebNGGetCountry();
external function string 10 CurrentWebLang();
external function boolean LoginState();
external function boolean CountryCompanyMismatch();
external function boolean StructurePathValid(string);
external procedure addnode(var array longint,longint);
external function boolean visitedbefore(array longint,longint);
external function string 255 FindCountryFromHMCompany();
external procedure UpdateWebCountry(string);
external function boolean NodeIsApplication(record WebNGStructVc);
external procedure RememberRequestURL(string);
external procedure RollbackOneRequestURL();
external function string 255 GetNextValue(var string);
external function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 GetBrowserOperatingSystem();
external procedure UpdateWebLanguage(string);
//translation
external function string 255 ToolWebNGTranslateText(integer);
//webpage
external procedure ShowWebPage(record WebNGStructVc);
external procedure ShowErrorPage(string);
//updating actions
external updating procedure DoLogout();
//apps
external procedure ContentHandlerApp(record WebNGStructVc,string);
external procedure ForumApp(record WebNGStructVc,string);
external procedure ShopBrowserApp(record WebNGStructVc,string);
external procedure ShopBasketOldApp(record WebNGStructVc,string);
external procedure ShopItemOrderApp(record WebNGStructVc,string);
external procedure FileDownloadApp(record WebNGStructVc);
external procedure SingleFileDownloadApp(record WebNGStructVc);
external procedure UniversityApp(record WebNGStructVc,string);
external procedure ProductImageDownloadApp(string);
external procedure ShopApp(record WebNGStructVc,string);
external procedure DownloadRegistrationApp(record WebNGStructVc);
external procedure ASPApp(record WebNGStructVc,string);
external procedure ToolWebNGOnlineReservationApp(record WebNGStructVc,string);
external procedure MyAccountApp(record WebNGStructVc,string);
external procedure SubscriptionsApp(record WebNGStructVc,string);
external procedure ProdPlanApp(record WebNGStructVc,string);
external procedure AvailableAppsOnWeb(record WebNGStructVc,string);
external procedure MyServerApp2(record WebNGStructVc,string);
external procedure WebVideoApp(record WebNGStructVc,string);
external procedure MigrationRegisterApp(record WebNGStructVc,string);
//statistics
external procedure LogWebNGStructAccess(longint);
external procedure LogWebNGMasterGlobeClick();
//hal_apps
external procedure HansaWorldFormsApp(record WebNGStructVc,string,string);
//std hal
external function string 255 ConvertXml(string);
//external procedure HansaWorldHALApp(record WebNGStructVc,string,string);
external procedure SendHansaWorldID();

procedure SetCountryAndLanguage(var string path)
begin
  string 255 node,mpath,country,language;
  record WebNGCountryVc WCr;
  record WebNGLanguageVc WLr;

  mpath = path;
  if (left(mpath,1)=="/") then begin
    node = removenextnode(mpath);
  end;
  node = removenextnode(mpath);
  WCr.Code = node;
  if (ReadFirstMain(WCr,1,true)) then begin
    country = WCr.Code;
    UpdateWebCountry(country);
    node = removenextnode(mpath);
//  end else begin
//    UpdateWebCountry("global");
  end;
  WLr.Code = node;
  if (ReadFirstMain(WLr,1,true)) then begin
    language = WLr.Code;
    path = "";
    if (nonblank(country)) then begin
      path = country & "/";
    end;
    path = path & mpath;
    if (blank(path)) then begin
      path = "/";
    end;
  end;
  if (blank(language)) begin
    language = GetCookie("langcode");
  end;
  if (blank(language)) begin
    language = WCr.DefaultLanguage;
  end;
  if (nonblank(language)) then begin
    UpdateWebLanguage(language);
  end;
  
  return;
end;

function Boolean RedirectToCorrectLanguage(string path)
begin
  Boolean res;
  string 255 mpath,npath,node;
  record WebNGShopBlock WSbl;
  record WebNGLanguageVc WLr;

  mpath = path;
  BlockLoad(WSbl);
  if (WSbl.ForceLanguage==1) then begin
    if (left(mpath,1)=="/") then begin
      node = removenextnode(mpath);
    end;
    node = removenextnode(mpath);
    WLr.Code = node;
    if (ReadFirstMain(WLr,1,true)) then begin
      if (WLr.Code!=CurrentWebLang) then begin
        npath = "/" & LowerCase(CurrentWebLang) & "/" & mpath;
        res = true;
      end;
    end else begin
      npath = "/" & LowerCase(CurrentWebLang);
      if (left(path,1)!="/") then begin
        npath = npath & "/";
      end;
      npath = npath & path;
      res = true;
    end;
  end;

  if (res) then begin
    ShowRedirectHTML(npath,WebSecureMode);
  end;

  RedirectToCorrectLanguage = res;
  return;
end;

//SECTION : REDIRECT FUNCTIONS
global
procedure RedirectToStartPage()
begin
  string 255 path;
  
  path = GetStartStructLink;
  if (nonblank(path)) then begin
    ShowRedirectHtml(FormatSimpleLink(path,true),WebSecureMode);
  end else begin
    WebOutString("No start node setup.");
  end;
  return;
end;

global
procedure RedirectToRequestedPage()
begin
  string 255 requesturl,mpath,node,path;
  record WebNGLanguageVc WLr;
  record WebNGShopBlock WSbl;
  
  requesturl = GetSessionString("requesturl");
  if (blank(requesturl)) then begin
    RedirectToStartPage;
  end else begin
    mpath = requesturl;
    BlockLoad(WSbl);
    if (WSbl.ForceLanguage==1) then begin
      if (left(mpath,1)=="/") then begin
        node = removenextnode(mpath);
      end;
      node = removenextnode(mpath);
      WLr.Code = node;
      if (ReadFirstMain(WLr,1,true)) then begin
        path = "/" & LowerCase(CurrentWebLang) & "/" & mpath;
      end else begin
        path = "/" & LowerCase(CurrentWebLang) & requesturl;
      end;
    end else begin
      path = mpath;
    end;

    ShowRedirectHtml(FormatSimpleLink(path,true),WebSecureMode);
  end;
  
  return;
end;

global
procedure RedirectToSelectCountryPage()
begin
  ShowRedirectHtml(FormatSimpleLink(GetCountrySelectStructLink,true),false);
  return;
end;

global
procedure RedirectToLoginPage()
begin
  if (blank(ToolWebNGGetCountry)) then begin
    PutSessionString("wantedtologin","true");
    RedirectToSelectCountryPage;
  end else begin
    ShowRedirectHtml(FormatSimpleLink(GetLoginPageStructLink,true),WebSecureMode);
  end;
  return;
end;

global
procedure RedirectToLogoutPage()
begin
  ShowRedirectHtml(FormatLink("/WebUpdatingAction.hal","?action=logout&path=" & ConvertXml(WebGetArg("path")),true,true),false);
  return;
end;

global
procedure RedirectToURL(string url)
begin
  ShowRedirectHtml(url,WebSecureMode);
  return;
end;

global
procedure RedirectToStructLink(string link)
begin
  RedirectToURL(FormatSimpleLink(link,true));
  return;
end;

global
procedure RedirectToSecureModePage()
begin
  ShowRedirectHtml(FormatSimpleLink(WebGetArg("path"),true),true);
  return;
end;

global
procedure RedirectToSubNode(longint WSSerNr,string node)
begin
  string 255 path;

  path = GetLinkToStruct(WSSerNr,true);
  if (nonblank(path)) then begin
    path = path & node;
    RedirectToURL(FormatSimpleLink(path,true));
  end else begin
    RedirectToStartPage;
  end;
  return;
end;

global
procedure RedirectToCountrySubPage(record WebNGStructVc WSr)
begin
  string 255 newpath;
  string 255 country;
  
  country = ToolWebNGGetCountry;
  if (blank(country)) then begin
    RedirectToSelectCountryPage;
  end else begin
    newpath = WebGetArg("path");
    if (right(newpath,1)!="/") then begin
      newpath = newpath & "/";
    end;
    newpath = newpath & country;
    if (StructurePathValid(CleanPath(newpath))) then begin
      ShowRedirectHtml(FormatSimpleLink(newpath,true),false);
    end else begin
      if (blank(WSr.WebPage) and nonblank(WSr.HALFunc)) then begin
        RedirectToURL(WSr.HALFunc);
      end else begin
        ShowWebPage(WSr);
      end;
    end;
  end;
  return;
end;

global
procedure RedirectToPlatformSubPage(record WebNGStructVc WSr)
begin
  string 255 newpath;
  string 255 browseros;
  boolean foundf;
  
  browseros = GetBrowserOperatingSystem;
  if (browseros=="Windows NT") then begin
    browseros = "Windows";
  end;
  browseros = Lowercase(browseros);
  foundf = false;
  if (nonblank(browseros)) then begin
    newpath = WebGetArg("path");
    if (right(newpath,1)!="/") then begin
      newpath = newpath & "/";
    end;
    newpath = newpath & browseros;
    if (StructurePathValid(CleanPath(newpath))) then begin
      foundf = true;
      ShowRedirectHtml(FormatSimpleLink(newpath,true),false);
    end;
  end;
  
  if (foundf==false) then begin
    if (blank(WSr.WebPage) and nonblank(WSr.HALFunc)) then begin
      RedirectToURL(WSr.HALFunc);
    end else begin
      ShowWebPage(WSr);
    end;
  end;
  return;
end;

//SECTION : HANDLER FUNCTIONS
procedure CallApp(string name,string path,longint structnode,string page)
begin
  record WebNGPageVc WPr;
  record WebNGStructVc WSr;
  string 255 tstr,tstr2,mname;
  LongInt pos;
  
  if (nonblank(page)) then begin
    WPr.Code = page;
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  
  WSr.SerNr = structnode;
  if (ReadFirstMain(WSr,1,true)) then begin end;
  
  mname = name;
  tstr = GetNextValue(mname);

  tstr2 = mname;
  mname = left(tstr,7);
  switch (mname) begin
    case "hwforms" : HansaWorldFormsApp(WSr,path,tstr2);
    case "halprim" : 
      pos = 1;
      GetNextSubstring(tstr,pos,"/",tstr2);
      GetNextSubstring(tstr,pos,"/",tstr2);
      //HansaWorldHALApp(WSr,path,tstr2);  // HansaWorldHALApp is nowhere to be found, enable again when it's comitted
    otherwise
      tstr = "Calling app: " & name & ". Passing path (" & path & ")";
      ShowErrorPage(tstr);
  end;
  return;
end;

procedure StoreVisitedNodes(array longint visitednodes)
begin
  transaction string 50 gVisitedNodes;
  string 50 res;
  integer i;
  
  for (i=1;i<visitednodes.length;i=i+1) begin
    if (nonblank(res)) then begin
      res = res & ",";
    end;
    res = res & visitednodes[i];
  end;
  
  gVisitedNodes = res;
  return;
end;

function Boolean PathIsWebshop(string path)
begin
  record WebNGStructVc WSr;
  string 255 mpath,node;
  Longint pos;
  Boolean res;  
    
  res = false;
  mpath = path;
  while (GetNextSubstring(mpath,pos,"/",node)) begin
    WSr.Name = node;
    if (ReadFirstKey("Name",WSr,1,true)) then begin
      if (WSr.Type==kStructTypeWebshopApp) then begin
        res = true;
        goto LPathIsWebshop;
      end;
    end;
  end;

LPathIsWebshop:;
  PathIsWebshop = res;
  return;
end;

function Boolean CheckAndRedirectToSecurePage(string path)
begin
  Boolean redirectf;
  Boolean res;
  record ProgramStatusBlock PSb;
  
  BlockLoad(PSb);
  if (PSb.UseHttps==0) then begin
    goto LCheckAndRedirectToSecurePage;
  end;
  if (InString(path,"/payment/")>0 and PathIsWebshop(path)) then begin
    redirectf = true;
  end;
  if (WebSecureMode==false) then begin
    if (redirectf) then begin
      PutSessionString("https_forced_redirect","1");
      ShowRedirectHTML(FormatSimpleLink(path,true),true);
      res = true;
    end;
  end else begin
    if (GetSessionString("https_forced_redirect")=="1" and redirectf==false) then begin
      PutSessionString("https_forced_redirect","");
      ShowRedirectHTML(FormatSimpleLink(path,true),false);
      res = true;
    end;
  end;
 
LCheckAndRedirectToSecurePage:;
  CheckAndRedirectToSecurePage = res;
  return;
end;

global
procedure HandlePath(string path,longint mother)
begin
  record WebNGStructVc WSr;
  string 255 mpath,node;
  integer lasttype,cnt;
  boolean rootrequested,justloggedout;
  array longint visitednodes;
  transaction string 60 gCountryCode;
  transaction string 20 gLangcode;
  
  gCountryCode = "";
  gLangcode = "";
  
  RememberRequestURL(path);

  if (CheckAndRedirectToSecurePage(WebGetArg("path"))) then begin
    goto LHandlePathOut;
  end;
  
  visitednodes[0] = 0;
  mpath = path;
  SetCountryAndLanguage(mpath);
  lasttype = -1;
  WSr.Mother = mother;
  if (len(mpath)==0) then begin
    RedirectToStartPage;
    goto LHandlePathOut;
  end;
  if (mpath=="/") then begin
    rootrequested = true;
  end else begin
    WSr.Name = "/";
    if (ReadFirstKey("Mother",WSr,2,true)) then begin
      WSr.Mother = WSr.SerNr;
      addnode(visitednodes,WSr.SerNr);
    end;
  end;

  if (GetSessionString("justloggedout")=="true") then begin
    justloggedout = true;
    PutSessionString("justloggedout","");
  end else begin
    justloggedout = false;
  end;

  while (len(mpath)>0) begin
    cnt = cnt+1;
    if (rootrequested==false) then begin
      node = removenextnode(mpath);
    end else begin
      mpath = GetStartStructLink;
      SetCountryAndLanguage(mpath);
      if (mpath!="/" and nonblank(mpath)) then begin
        RedirectToURL(FormatSimpleLink(mpath,true));
        goto LHandlePathOut;
      end;
      node = mpath;
      mpath = "";
    end;
    
    WSr.Name = node;

    lasttype = -1;
    if (ReadFirstKey("Mother",WSr,2,true)) then begin
      if (WSr.Closed==1) then begin
        goto LHandlePath;
      end;
      if (visitedbefore(visitednodes,WSr.SerNr)) then begin
        lasttype = -2;
        goto LHandlePath;
      end;
      if (WSr.NeedsLogin) then begin
        if (LoginState==false) then begin
          if (justloggedout) then begin
            RedirectToStartPage;
          end else begin
            RedirectToLoginPage;
          end;
          goto LHandlePathOut;
        end;
      end;
      //if needed, apply settings that are inherited from parent pages here
      lasttype = WSr.Type;
      WSr.Mother = WSr.SerNr;
      addnode(visitednodes,WSr.SerNr);
      if (NodeIsApplication(WSr)) then begin
        goto LHandlePath;
      end;
    end;
    if (cnt>10) then begin
      LogText(0,"link too deep");
      goto LHandlePathOut;
    end;
  end;
  
LHandlePath:;
  if (lasttype>=0) then begin
    if (WSr.LogAccess!=0) then begin
      LogWebNGStructAccess(WSr.SerNr);
    end;
  end;
  if (lasttype!=kStructTypeFolder and lasttype!=kStructTypeFile) then begin
    RememberRequestURL(path);
    if (RedirectToCorrectLanguage(path)) then begin
      goto LHandlePathOut;
    end;
  end;
  StoreVisitedNodes(visitednodes);
  switch (lasttype) begin
    case -2:
      RollbackOneRequestURL; 
      ShowErrorPage(ToolWebNGTranslateText(25001)); //Cyclic link in web structure
    case kStructTypePage: ShowWebPage(WSr);
    case kStructTypeFile: SingleFileDownloadApp(WSr);
    case kStructTypeFolder: FileDownloadApp(WSr);
    case kStructTypeHALFunction: CallApp(WSr.HALFunc,mpath,WSr.SerNr,WSr.WebPage);
    case kStructTypeRedirect: RedirectToURL(WSr.HALFunc);
    case kStructTypeRedirectToCountry: RedirectToCountrySubPage(WSr);
    case kStructTypeContentHandlerApp: ContentHandlerApp(WSr,mpath);
    case kStructTypeForumApp: ForumApp(WSr,mpath);
    case kStructTypeItemBrowse: ShopBrowserApp(WSr,mpath);
    case kStructTypeShoppingBasket: ShopBasketOldApp(WSr,mpath);
    case kStructTypeItemOrder: ShopItemOrderApp(WSr,mpath);
    case kStructTypeUniversityApp: UniversityApp(WSr,mpath); 
    case kStructTypeProductImageApp: ProductImageDownloadApp(mpath);
    case kStructTypeWebshopApp: ShopApp(WSr,mpath);
    case kStructTypeASPApp: ASPApp(WSr,mpath);
    case kStructTypeDownloadRegistration: DownloadRegistrationApp(WSr);
    case kStructTypeOnlineReservationApp: ToolWebNGOnlineReservationApp(WSr,mpath);
    case kStructTypeRedirectToPlatform: RedirectToPlatformSubPage(WSr);
    case kStructTypeMyAccountApp: MyAccountApp(WSr,mpath);
    case kStructTypeSubscriptionsApp: SubscriptionsApp(WSr,mpath);
    case kStructTypeProductionPlan: ProdPlanApp(WSr,mpath);
    case kStructTypeAvailableApps: AvailableAppsOnWeb(WSr,mpath);
    case kStructTypeMyServerApp: MyServerApp2(WSr,mpath);
    case kStructTypeWebVideoApp: WebVideoApp(WSr,mpath);
    case kStructTypeMigrationRegApp: MigrationRegisterApp(WSr,mpath);
    otherwise
      RollbackOneRequestURL;
      ShowErrorPage(ToolWebNGTranslateText(25000)); //File not found
  end;
LHandlePathOut:;
  return;
end;

function Boolean GoToOldPage(string thehost)
begin
  record WebSitesBlock WSBr;
  row WebSitesBlock WSBrw;
  Integer i,rwcnt;
  string 255 url;
  Integer oldcomp;
  Boolean res;
  
  res = false;
  oldcomp = CurrentCompany;  
  if (SetCompany(1,false)) then begin
  end;
  BlockLoad(WSBr);
  rwcnt = MatRowCnt(WSBr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSBr,i,WSBrw);
    if (WSBrw.Host==thehost) then begin
      url = "http://" & thehost & "/WebHBSDivMain.hal";
//      Trace("Redirecting to ",url);
      RedirectToURL(url);
      res = true;
      i = rwcnt;
    end;
  end;
  ResetCompany(oldcomp);
  GoToOldPage = res;
  return;
end;

//SECTION : ENTRY POINT FUNCTIONS
global
procedure DoWeb(Boolean simplef)
begin
  string 255 path;
  integer oldcomp;
  boolean res,treatedf;
  transaction boolean gOutputTagComments;
  transaction boolean gDontAutoIdentHTML;
  transaction boolean gDontOutputHTMLDoctype;
  transaction boolean gJustLoggedIn;
  
  //if (GoToOldPage(WebHost)) then begin goto LWeb; end; //Enable to allow sites from "old web module" (do not use in Single Server User mode)
  if (GetSessionString("justloggedin")=="true") then begin
    gJustLoggedIn = true;
    PutSessionString("justloggedin","");
  end;
  
  res = false;
  if (LoginState==false) then begin
    oldcomp = CurrentCompany;
    res = SetCompany(1,false);
  end else begin
    if (CountryCompanyMismatch) then begin
      RedirectToLogoutPage;
      goto LWeb;
    end;
  end;
  
  path = WebGetArg("path");
  if (blank(path) or path=="/") then begin
    path = "/";
  end else begin
    path = CleanPath(path);
  end;
  
  gOutputTagComments = true;
//  gDontAutoIdentHTML = true;
//  gDontOutputHTMLDoctype = true;
  
  if (simplef) then begin
    treatedf = HandleSimplePath(path);
  end;

  if (treatedf==false) then begin
    HandlePath(path,0);
  end;

  if (res) then begin
    ResetCompany(oldcomp);
  end;

LWeb:;
  return;
end;

//SECTION : ENTRY POINT FUNCTIONS
global webpublic
procedure Web()
begin
  DoWeb(false);
end;

procedure RedirectToDownloadInvoicePage()
begin
  string 255 link;
  
  link = FormatLink("/WebUpdatingAction.hal","?action=download_invoice&sernr=" & WebGetArg("ivnr") & "&compnr=" & WebGetArg("compnr"),true,true);
  ShowRedirectHtml(link,true);

  return;
end;


//SECTION: PATCHES TO WORK WITH OLD WEB CODE
global
function boolean AutoLoginToWebNG()
begin
  boolean res;
  string 255 country;
    
  res = false;
  if (LoginState) then begin
    country = FindCountryFromHMCompany;
    
    UpdateWebCountry(country);
  end;
  if (IsMarketplaceServer) then begin
    if (nonblank(WebGetArg("btntype"))) then begin
      if (Left(WebGetArg("btntype"),6)=="market") then begin
        PutSessionString("hw_com_market","true");
        PutSessionString("hw_com_enabregno",WebGetArg("enabregno"));
        LogWebNGMarketplaceClick;
      end;
      if (WebGetArg("btntype")=="downloadinv") then begin
        RedirectToDownloadInvoicePage;
        goto LAutoLoginToWebNG;
      end;
      LogWebNGMasterGlobeClick;
    end else begin
      LogWebNGMasterGlobeClick;
    end;
  end else begin
    LogWebNGMasterGlobeClick;
  end;
  SendHansaWorldID;

  RedirectToStartPage; 

LAutoLoginToWebNG:;  
  res = true;  
  AutoLoginToWebNG = res;
  return;
end;
