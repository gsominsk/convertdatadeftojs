external procedure FillProdOpClr(var array string,var integer);external function longint GetMotherProdOP(longint,longint);external function integer GetProdPrio(longint);external procedure GetNextAvailableWTime(var date,record MachineShiftVc,date,var time,var time,var time,var integer);external procedure ProdPlanAdditionInfo(record ProdOperationVc);external function LongInt TimeToSeconds2(Time);external procedure ProdPlanFillOrderArr(record ProdOperationVc,array record ProdOrderVc,var integer);external procedure FillShiftDays(record MachineShiftVc,record AT2UnitVc,longint,date);external function longint GetChildProdOP(longint,longint);external function longint DurToSeconds(duration);external function Time TimeDiff(Time,Time);external procedure OutPutMachineUsage(longint,boolean);external procedure ProdPlanOutPutUserSettings(record WebPlanDefBlock);external procedure OutPutMachineShifts(record ProdPlanIDVc);external procedure ProdPlanOutPutUserSettings(record WebPlanDefBlock);external procedure LoadShiftInfo(var record ProdPlanIDVc);external procedure ProdPlanShowSingleOperation(record ProdPlanRecVc,record ProdOperationVc,record MachineShiftVc,record WebPlanDefBlock,string,boolean);function AddProdToVector(array record ProdVc aProdr,vector longint vProdr,var integer size,longint num)begin  record ProdVc Prodr;  if vProdr[num] < 0 then begin    Prodr.SerNr = num;    if readfirstmain(Prodr,1,true) then begin      vProdr[num] = size;      aProdr[size] = Prodr;      size = size + 1;    end;  end;  return;end;procedure ShowSingleOperation(record ProdOperationVc ProdOpr,var vector string vcolors,var integer csize,var integer clrnr,array string color)begin  record WebPlanDefBlock WPDbl;  string 20 tclr;  longint tdur;  time ttime;  date sd,ed,gsd;  time st,et,tt;  integer i,dcnt;  time starttime,endtime;  record MachineShiftVc Shiftr;  boolean daysf,foundf;  array record ProdOrderVc arrOrders;  integer size;  record ProdVc Prodr;  array record ProdVc aProdr;  vector longint vProdr;  integer prodsize;  integer rcnt;  record AT2UnitVc AT2Unitr;  record ProdPlanRecVc PlanRecr;  BlockLoad(WPDbl);  if vcolors[ProdOpr.ProdNr]=="" then begin    vcolors[ProdOpr.ProdNr] = color[clrnr];    tclr = color[clrnr];    clrnr = clrnr + 1;    if clrnr==csize then begin clrnr = 0; end;  end else begin    tclr = vcolors[ProdOpr.ProdNr];  end;  ProdPlanShowSingleOperation(PlanRecr,ProdOpr,Shiftr,WPDbl,tclr,true);  AddProdToVector(aProdr,vProdr,prodsize,ProdOpr.ProdNr);  if vProdr[PlanRecr.ProdNr]>-1 then begin    Prodr = aProdr[vProdr[ProdOpr.ProdNr]];  end;  ProdPlanFillOrderArr(ProdOpr,arrOrders,size);  return;end;global webpublicprocedure WebShowDoneOper()begin  record ProdOperationVc ProdOpr;  date tdate;  boolean TrHs,testf;  vector string 20 vcolors;  integer clrnr,csize;  array string 30 color;  record WebPlanDefBlock WPDbl;  record ProdPlanIDVc ProdPlanr;  record AT2UnitVc AT2Unitr;  string 30 lmch;  record PrPlanMachinesBlock PlanMachinesBl;  row PrPlanMachinesBlock PlanMachinesBlrw;  integer rwcnt,i;  BlockLoad(WPDbl);  BlockLoad(PlanMachinesBl);  tdate = AddMonth(CurrentDate,-1);  tdate.Day = 1;  TrHs = true;  OutPutMachineUsage(-1,false);  ProdPlanOutPutUserSettings(WPDbl);  LoadShiftInfo(ProdPlanr);  OutPutMachineShifts(ProdPlanr);  WebOutStringFormat("<div class=""rows"">");  WebOutStringFormat("<div class=""direction"">" & WPDbl.Direction & "</div>");  WebOutStringFormat("<div class=""gradient"">" & WPDbl.GradientFlag & "</div>");  WebOutStringFormat("<div class=""calctype"">0</div>");  WebOutStringFormat("<div class=""statustype"">" & WPDbl.StatusFlag & "</div>");  FillProdOpClr(color,csize);  lmch = "";  rwcnt = MatRowCnt(PlanMachinesBl);  for (i = 0; i < rwcnt; i = i + 1) begin    MatRowGet(PlanMachinesBl,i,PlanMachinesBlrw);    ProdOpr.StartDate = tdate;    ProdOpr.Machine = PlanMachinesBlrw.ATCode;    ProdOpr.PRStatusFlag = 3;    ResetLoop(ProdOpr);    TrHs = true;       while loopkey("Machine",ProdOpr,3,TrHs) begin      if (ProdOpr.StartDate >= CurrentDate or ProdOpr.PRStatusFlag <> 3 or ProdOpr.Machine <> PlanMachinesBlrw.ATCode) then begin        TrHs = false;      end else begin        if lmch <> ProdOpr.Machine or lmch == "" then begin          if lmch <> "" then begin            WebOutStringFormat("</div>");            WebOutStringFormat("</div>");          end;          lmch = ProdOpr.Machine;          WebOutStringFormat("<div class=""machine"">");          WebOutStringFormat("<div class=""machinecode"">" & ProdOpr.Machine & "</div>");          AT2Unitr.InventoryNr = ProdOpr.Machine;          if readfirstmain(AT2Unitr,1,true) then begin            WebOutStringFormat("<div class=""machinename"">" & AT2Unitr.Description & "</div>");          end else begin            WebOutStringFormat("<div class=""machinename""></div>");          end;          WebOutStringFormat("<div class=""curTime"">" & (GetHour(CurrentTime) * 60) & "</div>");          WebOutStringFormat("<div class=""jobs"">");        end;        ShowSingleOperation(ProdOpr,vcolors,csize,clrnr,color);      end;    end;  end;  WebOutStringFormat("</div>");  WebOutStringFormat("</div>");  WebOutStringFormat("</div>");  return;end;