//tools
external function string 255 removenextnode(var string);
external function boolean LoginState();
external function string 10 CurrentWebLang();
external function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external procedure WebOutSubmit(string,string,string,string);
//downloads
external function boolean FileNameIsImage(string);
external procedure OnlineReservationRoomPictureDownload(string);
//elements
external procedure ShowWebElementTemplate(string,integer);
external procedure ShowWebElement(string);
//pages
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//translation
external function string 255 ToolWebNGTranslateText(integer);
//webng
external procedure RedirectToURL(string);
external procedure RedirectToSubNode(longint,string);
external procedure RedirectToSecureModePage();
//onlineres2
external function date OnlineResDateFromString(string);
external procedure ShowRoomAvailability(record WebNGStructVc,string);
external updating procedure DeleteOnlineReservation(longint,boolean);
external function boolean JustLoggedInAndHasReservations();
external function string 255 GetResortName(string);
external function string 255 GetGuestClassifcationName(string);
external function string 255 GetClassTermType(string);
external procedure GetCleanMaxGuestValues(var integer,var integer,var integer);
external procedure OnlineResGetTemplates(record WebNGStructVc,integer,var string,var string,integer,var string,var boolean);
external procedure SimpleElementQtyChooser(string,string,string,string,integer,integer,integer,boolean);
external procedure SimpleElementCalenar(string,string,string,string,date);
external procedure SimpleElementComboBox(string,string,string,string,array string,array string,integer,string,boolean,boolean);
external updating function integer CreateNewOnlineResUser(string,string,string,string,string,string,string,string,boolean,var string,var string);
external procedure StoreNewUserInSession(string,string,string,string,string);
external procedure ShowOnlineResValidationErrors(integer,integer);
external updating procedure MoveReservationsBasket(string,string);
external procedure ShowCreateUserForm(record WebNGStructVc,string);
external procedure ShowConfirmation(record WebNGStructVc,string);
external function integer ValidateRoomsGuestsPostDetails(array integer,array string,array string,array integer,var integer);
external procedure ShowOnlineResDisabled(record WebNGStructVc,string);
external procedure ShowSummary(record WebNGStructVc);
//onlinerestools
external updating procedure ClearOpenReservations(string);
external updating procedure BuildNewReservation(string,date,date,array integer,array string,array string,array string,array integer,integer);
external function string 255 CurrentOnlineResWebSession();
external procedure StoreCCDetailsToSession(string,string,string,string,string);
external procedure RemoveCCDetailsFromSession();
external procedure RemoveNewUserFromSession();
external procedure StoreGuestsInSession(array integer,array string,array string,array string,array integer,var integer);
external procedure RemoveGuestsFromSession(string);
external updating function integer CreateInvoiceForBookings(string);
external function LongInt GetMotherReservationForSession(string);
external function integer GetNoOfGuestsFromSession(integer,string,string);
external function string 255 GetRoomPackageFromSession(integer,string);
external procedure ShowUserPaymentSection(record WebNGStructVc,string);
//std
external function LongInt DateDiff(Date,Date);
external function string 255 GetNextValue(var string);
external procedure ResTypeAvail(string,string,string,Date,LongInt,Time,Time,var LongInt,var LongInt,var LongInt,var LongInt);
external function string 255 UrlEncodeCS(string);
external function Boolean ProductInDemoMode();

procedure ShowSelectResortElement(record WebNGStructVc WSr,boolean dontshowhead)
begin
  record ResLocVc ResLr;
  array string 255 resorts;
  array string 255 resortcodes;
  integer arrlen;
  string 255 link;
  
  arrlen = 0;
  
  WebOutTagOpen("<div id=""online_reservation"">");

  link = FormatLink("/WebUpdatingAction.hal","",true,true);
  WebOutTagOpen("<form id=""selectresort"" action=""" & link & """ method=""POST"">");

  WebOutStringFormatNL("<input type=""hidden"" name=""wsnr"" value=""" & WSr.SerNr & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""onlinereservation.selectresort"">");

  if (dontshowhead==false) then begin
    WebOutTagOpen("<h2>");
    WebOutStringFormat(ToolWebNGTranslateText(25700));
    WebOutTagClose("</h2>");
  end;

  ShowOnlineResValidationErrors(kOnlineResStepResort,StringToInt(GetSessionString("online_res_error")));
  
  ResLr.Code = "";
  while (LoopMain(ResLr,1,true)) begin
    resorts[arrlen] = ResLr.Comment;
    resortcodes[arrlen] = ResLr.Code;
    arrlen = arrlen+1;
  end;

  SimpleElementComboBox("","resortcombo","resort","",resorts,resortcodes,arrlen,GetSessionString("online_res_resort"),true,true);
  
  WebOutTagOpen("<div class=""continuebutton"">");
  WebOutSubmit("","button","continue",ToolWebNGTranslateText(25701)); //TODO:
  WebOutTagClose("</div>");

  WebOutTagClose("</form>");
    
  WebOutTagClose("</div>");
  return;
end;

procedure SelectResort(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  string 255 templatepage,templateelement,progresselement;
  boolean dontshowhead;
  
  if (JustLoggedInAndHasReservations) then begin
    RedirectToSubNode(WSr.SerNr,"summary");
    goto LSelectResort;
  end;
  
  OnlineResGetTemplates(WSr,kOnlineResStepResort,templatepage,templateelement,0,progresselement,dontshowhead);

  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");
  
  ShowWebElement(progresselement);

  ShowWebElementTemplate(templateelement,0); //before

  ShowSelectResortElement(WSr,dontshowhead);

  ShowWebElementTemplate(templateelement,2); //after

  ShowWebAppPageEnd(WPr);

LSelectResort:;
  return;
end;

procedure ShowSelectDateElement(record WebNGStructVc WSr,record ResLocVc ResLr,boolean dontshowhead)
begin
  string 255 tstr;
  date sd,ed;
  
  WebOutTagOpen("<div id=""online_reservation"">");

  tstr = FormatLink("/WebUpdatingAction.hal","",true,true);
  WebOutTagOpen("<form id=""selectdates"" action=""" & tstr & """ method=""POST"">");

  WebOutStringFormatNL("<input type=""hidden"" name=""wsnr"" value=""" & WSr.SerNr & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""onlinereservation.selectdates"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""resort"" value=""" & ResLr.Code & """>");

  if (dontshowhead==false) then begin
    WebOutTagOpen("<h2>");
    WebOutStringFormat(ToolWebNGTranslateText(25702) & ResLr.Comment);
  //  WebOutStringFormat(ToolWebNGTranslateText(27000) & ": "); //Please select the resort
    WebOutTagClose("</h2>");
  end;
  
  ShowOnlineResValidationErrors(kOnlineResStepDates,StringToInt(GetSessionString("online_res_error")));

  tstr = GetSessionString("online_res_startdate");
  if (nonblank(tstr)) then begin
    sd = OnlineResDateFromString(tstr);
  end else begin
    sd = CurrentDate;
  end;
  SimpleElementCalenar("","calendar","startdate",ToolWebNGTranslateText(25703),sd);

  tstr = GetSessionString("online_res_enddate");
  if (nonblank(tstr)) then begin
    ed = OnlineResDateFromString(tstr);
  end else begin
    ed = AddDay(CurrentDate,1);
  end;
  SimpleElementCalenar("","calendar","enddate",ToolWebNGTranslateText(25704),ed);
  
  WebOutTagOpen("<div class=""continuebutton"">");
  WebOutSubmit("","button","continue",ToolWebNGTranslateText(25701)); //TODO:
  WebOutTagClose("<div>");

  WebOutTagClose("</form>");
    
  WebOutTagClose("</div>");
  return;
end;

procedure SelectDates(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  record ResLocVc ResLr;
  string 255 templatepage,templateelement,progresselement;
  boolean dontshowhead;
  
  if (JustLoggedInAndHasReservations) then begin
    RedirectToSubNode(WSr.SerNr,"summary");
    goto LSelectDates;
  end;

  ResLr.Code = GetSessionString("online_res_resort");
  if (ReadFirstMain(ResLr,1,true)==false) then begin
    RedirectToSubNode(WSr.SerNr,"resort");
    goto LSelectDates;
  end;
  
  OnlineResGetTemplates(WSr,kOnlineResStepDates,templatepage,templateelement,0,progresselement,dontshowhead);

  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowWebElement(progresselement);

  ShowWebElementTemplate(templateelement,0); //before

  ShowSelectDateElement(WSr,ResLr,dontshowhead);

  ShowWebElementTemplate(templateelement,2); //after

  ShowWebAppPageEnd(WPr);

LSelectDates:;
  return;
end;

procedure OutputRoomTypePictureLink(string roomtype,string class,string WSSerNr)
begin
  record ResTypeVc ResTyper;
  record Attach2Vc Attachr;
  record RLinkVc RLr;
  integer i;
  
  ResTyper.Code = roomtype;
  if (ReadFirstMain(ResTyper,1,true)) then begin
    i = 1;
    while (ReadRecordLink(ResTyper,i,Attachr,RLr)) begin
      if (FileNameIsImage(Attachr.FileName)) then begin
        WebOutStringFormatNL("<img src=""" & FormatSimpleLink(GetLinkToStruct(WSSerNr,true) & "roompicture/" & roomtype,true) & """>");
        goto LOutputRoomTypePictureLink;
      end;
      i = i + 1;
    end;
  end;
LOutputRoomTypePictureLink:;
  return;
end;

global
procedure ShowRoomChoiceLine(longint WSSerNr,string roomtype,string comment,longint totqty,longint available,longint selected,integer maxpax,integer maxadult,integer maxchild,boolean calendarhead)
begin
  longint i;
  string 255 tstr;

  if (calendarhead==false) then begin
    if (available<=0) then begin
      tstr = " class=""notavailable""";
    end;
  end else begin
    tstr = " class=""calendarhead""";
  end;
  WebOutTagOpen("<li" & tstr & ">");
  
  WebOutTagOpen("<div class=""roomqtycombo"">");
  if (calendarhead==false) then begin
    if (available>0) then begin
      SimpleElementQtyChooser("","",roomtype,"",1,available,selected,true);
    end else begin
      WebOutTagOpen("<div class=""notavailableindicator"">");
      
      WebOutTagOpen("<span class=""notavailabletext"">");
      WebOutStringFormat(ToolWebNGTranslateText(25705));
      WebOutTagClose("</span>");
      
      WebOutTagClose("</div>");
    end;
  end;
  WebOutTagClose("</div>");
  
  WebOutTagOpen("<div class=""roomcomment"">");
  WebOutStringFormat(Comment);
  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""roomdetails"">");

  if (calendarhead==false) then begin
    WebOutTagOpen("<ul>");

    if (totqty>0) then begin
      WebOutTagOpen("<li>");
      WebOutStringFormat(ToolWebNGTranslateText(25706) & totqty);
      WebOutTagClose("</li>");
    end;
    
    if (available>=0) then begin
      WebOutTagOpen("<li>");
      WebOutStringFormat(ToolWebNGTranslateText(25707) & available);
      WebOutTagClose("</li>");
    end;

    WebOutTagClose("</ul>");
  end;

  WebOutTagOpen("<ul>");

  WebOutTagOpen("<li>");
  WebOutStringFormat(ToolWebNGTranslateText(25708) & maxpax);
  WebOutTagClose("</li>");

  WebOutTagOpen("<li>");
  WebOutStringFormat(ToolWebNGTranslateText(25709) & maxadult);
  WebOutTagClose("</li>");

  WebOutTagOpen("<li>");
  WebOutStringFormat(ToolWebNGTranslateText(25710) & maxchild);
  WebOutTagClose("</li>");

  WebOutTagClose("</ul>");
  WebOutTagClose("</div>");
  
  if (calendarhead==false) then begin
    WebOutTagOpen("<div class=""availabilitylink"">");
    tstr = FormatSimpleLink(GetLinkToStruct(WSSerNr,true) & "availability/" & roomtype,true);
    WebOutStringFormat("<a href=""" & tstr & """ target=""_blank"" onclick=""if (self.OpenAvailabilityCal) return OpenAvailabilityCal(this);"">" & ToolWebNGTranslateText(25711) & "</a>");
    WebOutTagClose("</div>");
  end;
  
  WebOutTagOpen("<div class=""roompicture"">");
  OutputRoomTypePictureLink(roomtype,"roompicture",WSSerNr)
  WebOutTagClose("</div>");

  WebOutTagClose("</li>");
  return;
end;

procedure SelectRooms(record WebNGStructVc WSr)
begin
  record ResTypeVc ResTyper;
  boolean TrHs,testf,first,dontshowhead;
  string 255 resort,tstr;
  integer maxdays;
  record HotelBlock htr;
  Time endofday,startofday;
  date sd,ed;
  LongInt rooms,booked;
  LongInt totrooms,totbooked;
  LongInt readrecs,usedrecs;
  string 255 roomtypes;
  record WebNGPageVc WPr;
  integer maxpax,maxadult,maxchild;
  string 255 templatepage,templateelement,progresselement;
  
  if (JustLoggedInAndHasReservations) then begin
    RedirectToSubNode(WSr.SerNr,"summary");
    goto LSelectRooms;
  end;

  resort = GetSessionString("online_res_resort");
  sd = OnlineResDateFromString(GetSessionString("online_res_startdate"));
  ed = OnlineResDateFromString(GetSessionString("online_res_enddate"));

  if (blank(resort) or sd<CurrentDate or ed<sd) then begin
    RedirectToSubNode(WSr.SerNr,"dates");
    goto LSelectRooms;
  end;

  OnlineResGetTemplates(WSr,kOnlineResStepRooms,templatepage,templateelement,0,progresselement,dontshowhead);

  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowWebElement(progresselement);

  ShowWebElementTemplate(templateelement,0); //before

  WebOutTagOpen("<div id=""online_reservation"">");
  
  if (dontshowhead==false) then begin
    WebOutTagOpen("<h2>");
    WebOutStringFormatNL(ToolWebNGTranslateText(25712))
    WebOutTagClose("</h2>");

    WebOutTagOpen("<p>");
    WebOutStringFormatNL(ToolWebNGTranslateText(25712) & GetResortName(resort) & ". <br>")
    WebOutTagClose("</p>");
  end;

  ShowOnlineResValidationErrors(kOnlineResStepRooms,StringToInt(GetSessionString("online_res_error")));

  tstr = FormatLink("/WebUpdatingAction.hal","",true,true);
  WebOutTagOpen("<form id=""selectrooms"" action=""" & tstr & """ method=""POST"">");

  WebOutStringFormatNL("<input type=""hidden"" name=""wsnr"" value=""" & WSr.SerNr & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""onlinereservation.selectrooms"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""resort"" value=""" & resort & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""startdate"" value=""" & DateToString(sd,"YYYYMMDD") & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""enddate"" value=""" & DateToString(ed,"YYYYMMDD") & """>");

  BlockLoad(htr);  
  endofday = htr.CheckOut;
  startofday = htr.CheckIn;

  maxdays = DateDiff(ed,sd);
  if (maxdays==0) then begin
    maxdays = 1;
  end;
  
  roomtypes = "";
  
  first = true;
  TrHs = true;
  ResTyper.Code = ""; //room type
  while (LoopKey("Code",ResTyper,1,TrHs)) begin
    if (TrHs) then begin
      testf = true;
      if (nonblank(resort)) then begin
        if (nonblank(ResTyper.ResLoc)) then begin
          if (ResTyper.ResLoc!=resort) then begin testf = false;  end;
        end;
      end;
      if (testf) then begin
        ResTypeAvail(ResTyper.Code,resort,"",sd,maxdays,startofday,endofday,rooms,booked,readrecs,usedrecs);
        //rooms = rooms + 1;
        if (first) then begin
          WebOutTagOpen("<ul class=""roomchoiceline"">");
          first = false;
        end else begin
          roomtypes = roomtypes & ",";
        end;
        maxpax = ResTyper.MaxPax;
        maxadult = ResTyper.MaxPersons;
        maxchild = ResTyper.MaxChildren;
        GetCleanMaxGuestValues(maxpax,maxadult,maxchild);
        if (htr.WebIncludeUnavailable==1 or (rooms-booked>0)) then begin
          ShowRoomChoiceLine(WSr.SerNr,ResTyper.Code,ResTyper.Comment,rooms,rooms-booked,-1,maxpax,maxadult,maxchild,false);
        end;
        roomtypes = roomtypes & ResTyper.Code;
        totrooms = totrooms + rooms;
        totbooked = totbooked + booked;        
      end;
    end;
  end;
  if (first==false) then begin
    WebOutTagClose("</ul>");
    WebOutStringFormat("<input type=""hidden"" name=""roomtypes"" value=""");
    WebOutStringFormat(roomtypes);
    WebOutStringFormatNL(""">");
  end else begin
    WebOutStringFormat("No rooms available");
  end;
  
  WebOutTagOpen("<div class=""continuebutton"">");
  WebOutSubmit("","button","continue",ToolWebNGTranslateText(25701)); //TODO:
  WebOutTagClose("</div>");

  WebOutTagClose("</form>");

  WebOutTagClose("</div>");
  
  ShowWebElementTemplate(templateelement,2); //after
  
  ShowWebAppPageEnd(WPr);
LSelectRooms:;
  return;
end;

procedure ShowGuestSpecificatonRow(record HotelBlock htr,string roomtype,integer rownr)
begin
  record CClassDVc CCDr;
  row CClassDVc CCDrw;
  integer i,j,cnt,adultcnt,childcnt,rowspan;
  boolean first,foundf;
  array string 255 a_roompkg,a_roompkgcodes;
  integer arrlen;
  string 255 ctype;
  record ResTypeVc ResTyper;
  record ResArtCodeVc RACr;
  record ResUsageVc RUr;
  vector integer v_rac;
  integer max;
  integer maxpax,maxadult,maxchild;
  string 255 curpackage;
  integer curqty;

  CCDr.Code = htr.DefCClassDCode;
  if (ReadFirstMain(CCDr,1,true)) then begin
    for (j=0;j<2;j=j+1) begin
      switch (j) begin
        case 0: ctype = htr.CClassDCType;
        case 1: ctype = htr.CClassDCTypeChild;
      end;
      cnt = MatRowCnt(CCDr);
      for (i=0;i<cnt;i=i+1) begin
        MatRowGet(CCDr,i,CCDrw);
        if (GetClassTermType(CCDrw.CClass)==ctype) then begin
          switch (j) begin
            case 0: adultcnt = adultcnt+1;
            case 1: childcnt = childcnt+1;
          end;
        end;
      end;
    end;
  end;
  
  WebOutTagOpen("<div>");
  
  WebOutTagOpen("<table border=""0"" cellspacing=""0"" cellpadding=""0"" class=""selectguesttable"">");

  WebOutTagOpen("<tr>");
  
  ResTyper.Code = roomtype;
  if (ReadFirstKey("Code",ResTyper,1,true)==false) then begin
    ResTyper.Comment = "";
  end;
  if (blank(ResTyper.Comment)) then begin
    ResTyper.Comment = ToolWebNGTranslateText(25714) & roomtype;
  end;
  
  maxpax = ResTyper.MaxPax;
  maxadult = ResTyper.MaxPersons;
  maxchild = ResTyper.MaxChildren;
  GetCleanMaxGuestValues(maxpax,maxadult,maxchild);
  
  if (maxadult==0) then begin
    adultcnt = 0;
  end;
  if (maxchild==0) then begin
    childcnt = 0;
  end;

  rowspan = adultcnt+childcnt;
  if (rowspan==0) then begin
    rowspan = 1;
  end;
  WebOutTagOpen("<td class=""guestselectdescription"" rowspan=""" & rowspan & """>");
  WebOutStringFormat("<h3>" & ResTyper.Comment & "</h3>");
  WebOutStringFormat(ToolWebNGTranslateText(25708) & maxpax & "<br>");
  WebOutStringFormat(ToolWebNGTranslateText(25709) & maxadult & "<br>");
  WebOutStringFormat(ToolWebNGTranslateText(25710) & maxchild & "<br>");
  arrlen = 0;
  foundf = true;
  RACr.ResType = roomtype;
  while (LoopMain(RACr,1,foundf)) begin
    if (RACr.ResType!=roomtype) then begin foundf = false; end;
    if (foundf) then begin
      if (v_rac[RACr.ResUsageCode]!=1) then begin
        v_rac[RACr.ResUsageCode] = 1;
        
        RUr.Code = RACr.ResUsageCode;
        if (ReadFirstMain(RUr,1,true)) then begin
          if (RUr.DontShowOnWeb==0 and nonblank(RUr.Comment)) then begin
            a_roompkg[arrlen] = RUr.Comment;
            a_roompkgcodes[arrlen] = RACr.ResUsageCode;
            arrlen = arrlen+1;
          end;
        end;
      end;
    end;
  end;
  //SimpleElementComboBox("","packagecombo",roomtype & "_pkg_" & rownr,"",a_roompkg,a_roompkgcodes,arrlen,"",false,true);
  WebOutTagClose("</td>");

  for (j=0;j<2;j=j+1) begin
    switch (j) begin
      case 0: 
        ctype = htr.CClassDCType;
        cnt = adultcnt;
        max = ResTyper.MaxPersons;
        if (max<0) then begin max = 1; end;
        max = maxadult;
      case 1:
        ctype = htr.CClassDCTypeChild;
        cnt = childcnt;
        max = ResTyper.MaxChildren;
        if (max<0) then begin max = 0; end;
        max = maxchild;
    end;
    if (cnt>0) then begin
      if (adultcnt>0 and j>0) then begin
        WebOutTagClose("</tr>");
        WebOutTagOpen("<tr>");
      end;
      WebOutTagOpen("<td class=""guestselectguestcategory"" rowspan=""" & cnt & """>");
      switch (j) begin
        case 0: WebOutStringFormat(ToolWebNGTranslateText(25715));
        case 1: WebOutStringFormat(ToolWebNGTranslateText(25716));
      end;
      WebOutTagClose("</td>");
      
      first = true;
      cnt = MatRowCnt(CCDr);
      for (i=0;i<cnt;i=i+1) begin
        MatRowGet(CCDr,i,CCDrw);

        if (GetClassTermType(CCDrw.CClass)==ctype) then begin
          if (first==false) then begin
            WebOutTagClose("</tr>");
            WebOutTagOpen("<tr>");
          end else begin
            first = false;
          end;
          
          WebOutTagOpen("<td class=""guestselectdemograph"">");
          WebOutStringFormat(GetGuestClassifcationName(CCDrw.CClass));
          WebOutTagClose("</td>");

          WebOutTagOpen("<td class=""guestselectdemograph_qty"">");
          
          curqty = GetNoOfGuestsFromSession(rownr,roomtype,CCDrw.CClass);
          if (curqty==0) then begin
            curqty = -1;
          end;

          SimpleElementQtyChooser("","",roomtype & "_" & CCDrw.CClass & "_" & rownr,"",1,max,curqty,true);
          WebOutTagClose("</td>");
        end;
      end;
    end;
  end;

  WebOutTagClose("</tr>");
  
  WebOutTagOpen("<tr>");
  WebOutTagOpen("<td class=""guestselectpackage"" colspan=""4"">");

  curpackage = GetRoomPackageFromSession(rownr,roomtype);

  SimpleElementComboBox("","packagecombo",roomtype & "_pkg_" & rownr,ToolWebNGTranslateText(25717),a_roompkg,a_roompkgcodes,arrlen,curpackage,false,true);
  WebOutTagClose("</td>");
  WebOutTagClose("</tr>");

  WebOutTagClose("</table>");
  
  WebOutTagClose("</div>");
  return;
end;

procedure SelectGuests(record WebNGStructVc WSr)
begin
  boolean first,dontshowhead;
  string 255 resort;
  record HotelBlock htr;
  date sd,ed;
  string 255 roomtypes;
  string 255 tstr;
  array string 255 roomtype;
  array integer roomqty;
  integer i,j,arrlen;
  record WebNGPageVc WPr;
  string 255 templatepage,templateelement,progresselement;
  
  if (JustLoggedInAndHasReservations) then begin
    RedirectToSubNode(WSr.SerNr,"summary");
    goto LSelectGuests;
  end;

  resort = GetSessionString("online_res_resort");
  sd = OnlineResDateFromString(GetSessionString("online_res_startdate"));
  ed = OnlineResDateFromString(GetSessionString("online_res_enddate"));
  roomtypes = GetSessionString("online_res_roomtypes");

  if (blank(resort) or sd<CurrentDate or ed<sd or blank(roomtypes)) then begin
    RedirectToSubNode(WSr.SerNr,"rooms");
    goto LSelectGuests;
  end;

  OnlineResGetTemplates(WSr,kOnlineResStepGuests,templatepage,templateelement,0,progresselement,dontshowhead);

  WPr.Code = templatepage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowWebElement(progresselement);

  ShowWebElementTemplate(templateelement,0); //before

  WebOutTagOpen("<div id=""online_reservation"">");
  
  if (dontshowhead==false) then begin
    WebOutTagOpen("<h2>");
    WebOutStringFormat(ToolWebNGTranslateText(25718))
    WebOutTagClose("</h2>");

    WebOutTagOpen("<p>");
    WebOutStringFormatNL(ToolWebNGTranslateText(25719) & GetResortName(resort) & ". <br>")
    WebOutTagClose("</p>");
  end;

  ShowOnlineResValidationErrors(kOnlineResStepGuests,StringToInt(GetSessionString("online_res_error")));

  tstr = FormatLink("/WebUpdatingAction.hal","",true,true);
  WebOutTagOpen("<form id=""selectguests"" action=""" & tstr & """ method=""POST"">");

  WebOutStringFormatNL("<input type=""hidden"" name=""wsnr"" value=""" & WSr.SerNr & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""onlinereservation.selectguests"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""resort"" value=""" & resort & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""startdate"" value=""" & DateToString(sd,"YYYYMMDD") & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""enddate"" value=""" & DateToString(ed,"YYYYMMDD") & """>");
  WebOutStringFormatNL("<input type=""hidden"" name=""roomtypes"" value=""" & roomtypes & """>");
  
  arrlen = 0;
  tstr = GetNextValue(roomtypes);
  while (nonblank(tstr)) begin
    if (nonblank(GetSessionString("online_res_room_" & tstr))) then begin
      roomtype[arrlen] = tstr;
      roomqty[arrlen] = StringToInt(GetSessionString("online_res_room_" & tstr));
      WebOutStringFormatNL("<input type=""hidden"" name=""" & tstr & """ value=""" & roomqty[arrlen] & """>");
      arrlen = arrlen+1;
    end;
    tstr = GetNextValue(roomtypes);
  end;
  
  BlockLoad(htr);
  first = true;
  for (i=0;i<arrlen;i=i+1) begin
    for (j=0;j<roomqty[i];j=j+1) begin
      if (first) then begin
        WebOutTagOpen("<ol class=""guestchoiceline"">");
        first = false;
      end;
      WebOutTagOpen("<li>");
      ShowGuestSpecificatonRow(htr,roomtype[i],j);
      WebOutTagClose("</li>");
    end;
  end;
  
  if (first==false) then begin
    WebOutTagClose("</ol>");
  end;

  WebOutTagOpen("<div class=""continuebutton"">");
  WebOutSubmit("","button","continue",ToolWebNGTranslateText(25701)); //TODO:
  WebOutTagClose("</div>");

  WebOutTagClose("</form>");

  WebOutTagClose("</div>");
  
  ShowWebElementTemplate(templateelement,2); //after

  ShowWebAppPageEnd(WPr);
  
LSelectGuests:;
  return;
end;

procedure GetRoomsGuestsFromPost(array integer a_resvnr,array string a_roomtype,array string a_package,array string a_guestclass,array integer a_guestqty,var integer arrlen)
begin
  record HotelBlock htr;
  string 255 roomtypes;
  string 255 node,fieldname;
  integer i,j,x,cnt,rwcnt;
  record CClassDVc CCDr;
  row CClassDVc CCDrw;
  
  x = 0;
  arrlen = 0;
  BlockLoad(htr);

  CCDr.Code = htr.DefCClassDCode;
  if (ReadFirstMain(CCDr,1,true)) then begin end;
  rwcnt = MatRowCnt(CCDr);
  
  roomtypes = WebGetArg("roomtypes");
  node = GetNextValue(roomtypes);
  while (nonblank(node)) begin
    cnt = StringToInt(WebGetArg(node));
    for (i=0;i<cnt;i=i+1) begin
      x = x + 1;
      for (j=0;j<rwcnt;j=j+1) begin
        MatRowGet(CCDr,j,CCDrw);
        fieldname = node & "_" & CCDrw.CClass & "_" & i;

        a_resvnr[arrlen] = i;
        a_roomtype[arrlen] = node;
        a_package[arrlen] = WebGetArg(node & "_pkg_" & i);
        a_guestclass[arrlen] = CCDrw.CClass;
        a_guestqty[arrlen] = StringToInt(WebGetArg(fieldname));
        arrlen = arrlen+1;
      end;
    end;
    node = GetNextValue(roomtypes);
  end;
  
  return;
end;

procedure ClearOnlineResvSession()
begin
  RemoveCCDetailsFromSession;
  RemoveNewUserFromSession;
  RemoveGuestsFromSession(GetSessionString("online_res_roomtypes"));
  PutSessionString("online_res_resort","");
  PutSessionString("online_res_error","");
  PutSessionString("online_res_startdate","");
  PutSessionString("online_res_enddate","");
  PutSessionString("online_res_roomtypes","");
  return;
end;

function boolean ValidDate(date d)
begin
  date d1;
  d1 = AddDay(AddDay(d,1),-1);
  ValidDate = (d==d1);
  return;
end;

/*function integer RoomsAvailable(string type,string resort,date sd,date ed)
begin
  record HotelBlock htr;
  record ResTypeVc ResTyper;
  integer maxdays;
  longint rooms,booked;
  LongInt readrecs,usedrecs;
  
  maxdays = DateDiff(ed,sd);
  if (maxdays==0) then begin
    maxdays = 1;
  end;

  ResTypeAvail(ResTyper.Code,resort,"",sd,maxdays,htr.CheckIn,htr.CheckOut,rooms,booked,readrecs,usedrecs);
  rooms = rooms + 1;
  
  RoomsAvailable = rooms-booked;
  return;
end;*/

updating procedure OnlineReservationDownloadInvoice(longint sernr)
begin
  record JobVc Jobr;
  record IVVc IVr;
  record RLinkVc RLr;
  string 255 filename,docname;
  
  Jobr.SerNr = sernr;
  if (ReadFirstMain(Jobr,1,true)==false) then begin
    goto LExit;
  end;
  if (Jobr.CUCode!=CurrentCust) then begin
    goto LExit;
  end;
  
  if (ReadRecordLink(Jobr,1,IVr,RLr)) then begin
    switch (IVr.InvType) begin
      case kInvoiceTypeCash: docname = "CashInvForm";
      case kInvoiceTypeCashInvoiceReceiptPRT: docname = "CashInvRecPRTForm";
      case kInvoiceTypeCredit: docname = "CredInvForm";
      case kInvoiceTypeInterest: docname = "IIInvForm";
      case kInvoiceTypeCreditSpecialSales: docname = "CredInvForm";
      otherwise docname = "InvForm";
    end;
    if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
      if (nonblank(IVr.PRCode)) then begin    
        docname = "ProjInvForm";
      end;
    end;
    filename = "tmp/invoice_" & IVr.SerNr & ".pdf";
    SetDocumentFilename(filename);
    SetMedia(mtPdf);
    PrintDocument(IVr,docname,false);
    SetDocumentFilename("");
  
    if (FileExists(filename)) then begin
      WebSetContentType("application/pdf");
      if (true) then begin // TODO: make setting
        WebSetContentDisposition("inline; filename=" & filename);
      end else begin
        WebSetContentDisposition("attachment; filename=" & filename);
      end;
      WebOutFile(filename);
      Delete_File(filename);
    end else begin
      WebOutString(ToolWebNGTranslateText(25000));
    end;
  end;
  
LExit:;
  return;
end;

updating procedure OnlineReservationDownloadInquiry(longint sernr)
begin
  record JobVc Jobr;
  string 255 filename,docname;
  
  Jobr.SerNr = sernr;
  if (ReadFirstMain(Jobr,1,true)==false) then begin
    goto LExit;
  end;
  if (Jobr.CUCode!=CurrentCust) then begin
    goto LExit;
  end;
  
  docname = "Job2Form";
  filename = "tmp/Enquiry_" & Jobr.SerNr & ".pdf";
  SetDocumentFilename(filename);
  SetMedia(mtPdf);
  PrintDocument(Jobr,docname,false);
  SetDocumentFilename("");
  
  if (FileExists(filename)) then begin
    WebSetContentType("application/pdf");
    if (true) then begin // TODO: make setting
      WebSetContentDisposition("attachment; filename=Enquiry.pdf");
    end else begin
      WebSetContentDisposition("inline; filename=Enquiry.pdf");
    end;
    WebOutFile(filename);
    Delete_File(filename);
  end else begin
    WebOutString(ToolWebNGTranslateText(25000));
  end;
  
LExit:;
  return;
end;

global
updating function boolean OnlineReservationsAction(string action,longint structnr)
begin
  date sd,ed;
  boolean res,handled;
  string 255 tstr,node,resort;
  integer cnt,err;
  array string 255 a_roomtype,a_guestclass,a_package;
  array integer a_guestqty,a_resvnr;
  integer arrlen;
  longint MotherJobSerNr;
  record HotelBlock htr;
  
  //TODO: Make sure these all happen in the correct company

  BlockLoad(htr);
  
  res = false; //TODO: get rid of this variable
  handled = true;
  switch (action) begin
    case "selectresort":
      err = 1;
      if (nonblank(WebGetArg("resort"))) then begin
        PutSessionString("online_res_resort",WebGetArg("resort"));
        err = 0;
      end;
      if (err==0) then begin
        RedirectToSubNode(structnr,"dates");
      end else begin
        PutSessionString("online_res_error",err);
        RedirectToSubNode(structnr,"resort");
      end;

    case "selectdates":
      err = 0;
      if (WebGetArg("splitdate")!="1") then begin
        err = -1;
      end;
      if (err==0) then begin
        sd.day = StringToInt(WebGetArg("startdate_day"));
        sd.month = StringToInt(WebGetArg("startdate_month"));
        sd.year = StringToInt(WebGetArg("startdate_year"));
        ed.day = StringToInt(WebGetArg("enddate_day"));
        ed.month = StringToInt(WebGetArg("enddate_month"));
        ed.year = StringToInt(WebGetArg("enddate_year"));

        if (ValidDate(sd)==false) then begin
          err = err + 1;
        end;
        if (ValidDate(ed)==false) then begin
          err = err + 2;
        end;
        if (sd<CurrentDate) then begin
          err = err + 4;
        end;
        if (ed<sd) then begin
          err = err + 8;
        end;
        if (nonblankdate(htr.WebMaxFutureDate) and ed>htr.WebMaxFutureDate) then begin
          err = err + 16;
        end;
        
        PutSessionString("online_res_startdate",DateToString(sd,"YYYYMMDD"));
        PutSessionString("online_res_enddate",DateToString(ed,"YYYYMMDD"));
      end;
      if (err==0) then begin
        RedirectToSubNode(structnr,"rooms");
      end else begin
        PutSessionString("online_res_error",err);
        RedirectToSubNode(structnr,"dates");
      end;
      
    case "selectrooms":
      cnt = 0;
      err = 0;
      
      resort = GetSessionString("online_res_resort");
      sd = OnlineResDateFromString(GetSessionString("online_res_startdate"));
      ed = OnlineResDateFromString(GetSessionString("online_res_enddate"));
      tstr = WebGetArg("roomtypes");
      
      if (blank(WebGetArg("resort")) or blank(tstr)) then begin
        err = err + 1;
      end;
      
      PutSessionString("online_res_roomtypes",tstr);
      node = GetNextValue(tstr);
      while (nonblank(node)) begin
        PutSessionString("online_res_room_" & node,WebGetArg(node));
        cnt = cnt + StringToInt(WebGetArg(node));
        if (BitAnd(err,2)==0) then begin
//          if (StringToInt(WebGetArg(node))>RoomsAvailable(node,resort,sd,ed)) then begin
//            err = 2;
//          end;
        end;
        node = GetNextValue(tstr);
        res = true;
      end;
      
      if (cnt==0) then begin
        err = err + 4;
      end;
      
      if (err==0) then begin
        RedirectToSubNode(structnr,"guests");
      end else begin
        PutSessionString("online_res_error",err);
        RedirectToSubNode(structnr,"rooms");
      end;
      
    case "selectguests":
      err = 0;

      if (blank(WebGetArg("resort"))) then begin
        err = err + 1;
      end;
      
      if (err==0) then begin
        GetRoomsGuestsFromPost(a_resvnr,a_roomtype,a_package,a_guestclass,a_guestqty,arrlen);
        StoreGuestsInSession(a_resvnr,a_roomtype,a_package,a_guestclass,a_guestqty,arrlen);
        err = err + ValidateRoomsGuestsPostDetails(a_resvnr,a_roomtype,a_guestclass,a_guestqty,arrlen);
      end;
      
      if (err==0) then begin
        BuildNewReservation(WebGetArg("resort"),OnlineResDateFromString(WebGetArg("startdate")),OnlineResDateFromString(WebGetArg("enddate")),a_resvnr,a_roomtype,a_package,a_guestclass,a_guestqty,arrlen);        
        ClearOnlineResvSession;//clear all session state
      end;

      if (err==0) then begin
        RedirectToSubNode(structnr,"summary");
      end else begin
        PutSessionString("online_res_error",err);
        RedirectToSubNode(structnr,"guests");
      end;
      
    case "confirmbooking":
      //TODO: Make sure this happens in the correct company
      err = 0;
      tstr = CurrentOnlineResWebSession;
      if (LoginState==false) then begin
        StoreNewUserInSession(WebGetArg("customername"),WebGetArg("companyname"),WebGetArg("email"),WebGetArg("userphone"),WebGetArg("usercountry"));
        err = CreateNewOnlineResUser(WebGetArg("customername"),WebGetArg("companyname"),
                                     WebGetArg("email"),WebGetArg("emailconfirm"),
                                     "","",
                                     WebGetArg("userphone"),WebGetArg("usercountry"),false,tstr,node);
        
        if (err==0) then begin
          MoveReservationsBasket(GetWebSessionUUID,tstr);
          tstr = ";;;" & tstr;
        end;
      end;
      
      if (nonblank(WebGetArg("confirm_cc"))) then begin
        PutSessionString("online_res_confim_using_cc","1");
        StoreCCDetailsToSession(WebGetArg("usercardtype"),WebGetArg("usercardnumber"),WebGetArg("usercardexpirymonth"),WebGetArg("usercardexpiryyear"),WebGetArg("usercardholder"));
      end else begin
        PutSessionString("online_res_confim_using_cc","");
      end;
      
      if (err==0) then begin
        tstr = right(tstr,len(tstr)-3);
        
        if (LoginState==false) then begin
          PutSessionString("online_res_error",-3);
          tstr = "cooksess=true&login=" & tstr & "&passwd=" & node & "&failed=" & UrlEncodeCS(FormatSimpleLink(GetLinkToStruct(structnr,true) & "summary",true)) & "&custpage=" & UrlEncodeCS(FormatLink("/WebUpdatingAction.hal","action=onlinereservation.dobooking&wsnr=" & structnr,true,true) & "&company=" & CurrentCompany);
          tstr = FormatLink("/dologin",tstr,true,true);
        end else begin
          tstr = FormatLink("/WebUpdatingAction.hal","action=onlinereservation.dobooking&wsnr=" & structnr,true,true);
        end;
        RedirectToURL(tstr);
      end else begin
        PutSessionString("online_res_error",err);
        RedirectToSubNode(structnr,"summary");
      end;
      res = true;
  
    case "dobooking":
      err = 0;

      if (LoginState==false) then begin
        err = -3;
      end;
      
      if (err==0 and GetSessionString("online_res_confim_using_cc")=="1") then begin
//        err = err + ValidateCreditCardDetails();

        //put custcode into a session var
        //setup pay session (w/ custcode on it)
        //start async CC payment
        //redirect to cc wait page
        //after waiting
          //if success redirect to completed page
          //if error, redirect back to summary page (must be changed to show records of customer in session var,when not logged in)
            //if sessionvar has custcode, we also should not create a new user, but still move reservations basket from session to (session var)custcode
          
        if (err==0) then begin
            //Do 
        end;
      end;
      
      if (err==0) then begin
        tstr = CurrentOnlineResWebSession;
        MotherJobSerNr = GetMotherReservationForSession(tstr);
        err = CreateInvoiceForBookings(tstr);
      end;
      
      if (err==0) then begin
        ClearOpenReservations(tstr);
        
        if (GetSessionString("online_res_confim_using_cc")=="1") then begin
          RedirectToSubNode(structnr,"confirmed/creditcard/" & MotherJobSerNr);
        end else begin
          RedirectToSubNode(structnr,"confirmed/" & MotherJobSerNr);
        end;
      end else begin
        PutSessionString("online_res_error",err);
        RedirectToSubNode(structnr,"summary");
      end;
      PutSessionString("online_res_confim_using_cc","");
      res = true;
    case "removereservation":
      DeleteOnlineReservation(WebGetArg("sernr"),(htr.WebDontDelete==0));
      RedirectToSubNode(structnr,"summary");
      res = true;
      
    case "createaccount":
      //TODO: Make sure this happens in the correct company
      err = CreateNewOnlineResUser(WebGetArg("customername"),WebGetArg("companyname"),
                                   WebGetArg("email"),WebGetArg("emailconfirm"),
                                   WebGetArg("password"),WebGetArg("passwordconfirm"),
                                   WebGetArg("userphone"),WebGetArg("usercountry"),true,tstr,node);
      
      if (err==0) then begin
        MoveReservationsBasket(GetWebSessionUUID,tstr);

        RedirectToSubNode(structnr,"register/success/");
      end else begin
        PutSessionString("online_res_error",err);
        StoreNewUserInSession(WebGetArg("customername"),WebGetArg("companyname"),WebGetArg("email"),WebGetArg("userphone"),WebGetArg("usercountry"));
        RedirectToSubNode(structnr,"register");
      end;
    case "download_invoice":
      OnlineReservationDownloadInvoice(StringToLongInt(WebGetArg("sernr")))
    case "download_inquiry":
      OnlineReservationDownloadInquiry(StringToLongInt(WebGetArg("sernr")))
    otherwise
      handled = false;
  end;
  OnlineReservationsAction = handled;
  return;
end;

global 
procedure ToolWebNGOnlineReservationApp(record WebNGStructVc WSr,string path)
begin
  string 255 mpath,node;
  record OnlineResBlock OSb;
  
  //handles
  // /reservation/resort/
  // /reservation/dates/
  // /reservation/rooms/
  // /reservation/guests/
  // /reservation/summary/
  // /reservation/confirmed/
  
  BlockLoad(OSb);
  
  mpath = path;
  node = removenextnode(mpath);

  if (node!="disabled" and OSb.Active==0) then begin
    RedirectToSubNode(WSr.SerNr,"disabled");
    goto L99;
  end;

  if (node=="summary" and WebSecureMode==false and ProductInDemoMode==false) then begin
    RedirectToSecureModePage;
    goto L99;
  end;
  
  switch (node) begin
    case "resort":
      SelectResort(WSr);
    case "dates":
      SelectDates(WSr);
    case "rooms":
      SelectRooms(WSr);
    case "guests":
      SelectGuests(WSr);
    case "summary":
      ShowSummary(WSr);
    case "confirmed":
      ShowConfirmation(WSr,mpath);
    case "roompicture":
      OnlineReservationRoomPictureDownload(mpath);
    case "availability":
      ShowRoomAvailability(WSr,mpath);
    case "disabled":
      ShowOnlineResDisabled(WSr,mpath);
    case "register":
      ShowCreateUserForm(WSr,mpath);
    case "checkout":
      ShowUserPaymentSection(WSr,mpath);
    otherwise
      RedirectToSubNode(WSr.SerNr,"resort");
  end;
L99:;  
  return;
end;
