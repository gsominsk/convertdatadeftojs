external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
external function Boolean IsMarketplaceServer();
//tools
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external function string 255 removenextnode(var string);
external function boolean LoginState();
external function string 255 GetLinkToStruct(LongInt,boolean);
external procedure RedirectToURL(string);
external procedure SessionAddToArray(string,string);
external function Boolean SessionGetNextFromArray(string,var string,var Integer);
external procedure SessionClearArray(string);
external procedure WebOutSubmit(string,string,string,string);
//elements
external procedure ShowSimpleWebElement(record WebNGElementVc);
external procedure ShowWebElementTemplate(string,integer);
//cureg
external function string 255 GetCURegFieldComment(record CUVc,record CURegFieldVc);
//translation
external function string 255 ToolWebNGTranslateText(integer);
external function string 255 GetTranslatedNameCURegField(record CURegFieldVc);
//pages
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//webng
external procedure RedirectToLoginPage();
// deladdr
external procedure ShowDelAddrList(string);
external procedure ShowDelAddrEdit(string,string,Boolean);
//std
external function string 255 UrlEncodeCS(string);
external function string 255 ConvertXml(string);
//old code:
external procedure LoadWebPage(string,var record WebNGPageVc);
external function Date DateFromString(string,string);
external function string 255 GetMarketplacePayMethod(string);
external function string 255 GetLinkToShop();
external updating procedure SendWebshopMail(Integer,Longint);
external function boolean PayMethodSupported(string,var string,var string);
external updating procedure SendWebshopMail2(Integer,Longint,string,string,string);
external function string 10 CurrentWebLang();
external function Boolean ValidEmailAddress(string);
external procedure ShowRedirectHtml(string,boolean);
external function string 255 GetMarketplaceCustomerPayMethod(record CUVc);

global
function string 10 ShopGetDateFormat()
begin
  string 10 res;
  
  switch (CalendarSystem) begin
    case m4_mdy: res = ToolWebNGTranslateText(25650);
    case m4_hijri: goto LDMY;
    case m4_dmy:
LDMY:;
      res = ToolWebNGTranslateText(25651);
    case m4_persian_date: goto LYMD;
    case m4_ymd:
LYMD:;
      res = ToolWebNGTranslateText(25652);
    case m4_myd: res = ToolWebNGTranslateText(25653);
    case m4_dym: res = ToolWebNGTranslateText(25654);
    case m4_ydm: res = ToolWebNGTranslateText(25655);
  end;
  
  ShopGetDateFormat = res;
  return;
end;

function LongInt GetMyAccountStruct()
begin
  LongInt res;
  record WebNGStructVc WSr;
  
  WSr.Type = kStructTypeMyAccountApp;
  if (ReadFirstKey("Type",WSr,1,true)) then begin
    res = WSr.SerNr;
  end;
  
  GetMyAccountStruct = res;
  return;
end;

global
function string 255 GetLinkToMyAccount()
begin
  LongInt MyAccountStruct;
  string 255 link;
  
  MyAccountStruct = GetMyAccountStruct;
  if (MyAccountStruct!=-1) then begin
    link = GetLinkToStruct(MyAccountStruct,true);
  end;
  
  GetLinkToMyAccount = link;
  return;
end;

procedure MyAccountGetTemplates(record WebNGStructVc WSr,integer page,var string templatepage,var string templateelement,var boolean dontshowhead)
begin 
  record MyAccountBlock MAb;
  
  BlockLoad(MAb);
  dontshowhead = (MAb.OverrideHeadings==1);
  switch (page) begin
    case kMyAccountPageOrders:
      templatepage = MAb.OrderPage;
      templateelement = MAb.OrderElement;
    case kMyAccountPageInvoices:
      templatepage = MAb.InvoicePage;
      templateelement = MAb.InvoiceElement;
    case kMyAccountPageDetails:
      templatepage = MAb.DetailsPage;
      templateelement = MAb.DetailsElement;
    case kMyAccountPageAddress:
      templatepage = MAb.DelAddrPage;
      templateelement = MAb.DelAddrElement;
    case kMyAccountPagePassword:
      templatepage = MAb.PasswordPage;
      templateelement = MAb.PasswordElement;
  end;
  if (blank(templatepage)) then begin
    templatepage = WSr.WebPage;
  end;
  
  return;
end;

procedure ShowTableRow(string label,string text)
begin
  WebOutTagOpen("<tr>");
  WebOutStringFormatNL("<td class=""label"">" & ConvertXml(label) & "</td>");
  WebOutStringFormatNL("<td class=""text"">" & ConvertXml(text) & "</td>");
  WebOutTagClose("</tr>");
  return;
end;

global
procedure ShowInputWithLabel2(string label,string type,string class,string fieldname,string value,boolean required,boolean intable,
                              integer maxlength)
begin
  string 255 tstr,attributes;

  tstr = "<label for=""" & fieldname & """>" & ConvertXml(label);
  if (required) then begin
    tstr = tstr & "<em>*</em>";
  end;
  tstr = tstr & "</label>";
  if (intable==true) then begin 
    WebOutTagOpen("<tr>");
    WebOutTagOpen("<td>");
  end;
  WebOutStringFormatNL(tstr);
  if (intable==true) then begin 
    WebOutTagClose("</td>");
  end;
  tstr = "<input type=""" & type & """";
  if (nonblank(class)) then begin
    tstr = tstr & " class=""" & class & """";
  end;
  if (maxlength>-1) then begin 
    attributes = "maxlength=" & maxlength;
  end;
  tstr = tstr & " id=""" & fieldname & """ name=""" & fieldname & """ value=""" & value & """  " & attributes & " /> ";
  if (intable==true) then begin 
    WebOutTagOpen("<td>");
  end;  
  WebOutStringFormatNL(tstr);
  if (intable==true) then begin 
    WebOutTagClose("</td>");
    WebOutTagClose("</tr>");
  end;  
  return;
end;

global
procedure ShowInputWithLabel(string label,string type,string class,string fieldname,string value,boolean required,boolean intable)
begin
  ShowInputWithLabel2(label,type,class,fieldname,value,required,intable,-1)
  return;
end;


global
procedure MyAccountShowErrors(string name) // TODO: rename to something more generic
begin
  Boolean firstline;
  string 255 tstr;
  Integer nr;
  
  firstline = true;
  while (SessionGetNextFromArray(name,tstr,nr)) begin
    if (firstline) then begin
      WebOutTagOpen("<div id=""errorbox"">");
      WebOutTagOpen("<ul>");
      firstline = false;
    end;
    WebOutStringFormatNL("<li>" & tstr & "</li>");
  end;
  if (!firstline) then begin
    WebOutTagClose("</ul>");
    WebOutTagClose("</div>");
    SessionClearArray(name);
  end;
  
  return;
end;

function longint CountCustomerOrders(string custcode)
begin
  record ORVc ORr;
  boolean foundf;
  longint res;

  res = 0;
  foundf = true;
  ORr.CustCode = custcode;
  while (LoopKey("CustCode",ORr,1,foundf)) begin
    if (ORr.CustCode!=custcode) then begin
      foundf = false;
    end;
    if (foundf) then begin
      res = res + 1;
    end;
  end;
  
  CountCustomerOrders = res;
  return;
end;

procedure ShowDetailsView(record WebNGStructVc WSr,record CUVc CUr)
begin
  record CURegFieldVc CURegFieldr;
  string 255 text,link;
  record IntServerTypeBlock ISTb;
  record WebNGShopBasketVc WSBr;
  string 255 paymethod;

  BlockLoad(ISTb);
  WebOutTagOpen("<div id=""details"">");
  if (ISTb.Server==kInternalServerMarketplace or ISTb.Server==kInternalServerMarketplaceTest or ISTb.Server==kInternalServerMarketplaceDev or ISTb.Server==kInternalServerMarketplaceUpdate) then begin
    if (nonblank(ToolWebNGTranslateText(32307))) then begin
      WebOutStringFormatNL("<h2>"& ToolWebNGTranslateText(32307) & "</h2>");
    end;
  end else begin
    if (nonblank(ToolWebNGTranslateText(20416))) then begin
      WebOutStringFormatNL("<h2>"& ToolWebNGTranslateText(20416) & "</h2>");
    end;
  end;
  WebOutTagOpen("<table>");
  while (LoopKey("Sorting",CURegFieldr,1,true)) begin
    text = GetCURegFieldComment(CUr,CURegFieldr);
    if (nonblank(text) and CURegFieldr.FieldType!=61) then begin
      ShowTableRow(GetTranslatedNameCURegField(CURegFieldr),text);
    end;
  end;
  WebOutTagClose("</table>");
  link = FormatSimpleLink(GetLinkToStruct(WSr.SerNr,true) & "details",true);
  WebOutStringFormatNL("<div id=""button""><a class='editbutton' href=""" & link & """>" & ToolWebNGTranslateText(25528) & "</a></div>");
  if (IsMarketplaceServer) then begin
    paymethod = GetMarketplaceCustomerPayMethod(CUr);
    if (GetShoppingBasket(WSBr,0) and MatRowCnt(WSBr)>0 and GetSessionString("redirectedfrom")=="Payment") then begin
      WebOutString("<button type='button' class='editbutton' onclick='StartPayForSubscriptions(""" & ToolWebNGTranslateText(23954) & """,""" & paymethod & """)'>" & ToolWebNGTranslateText(25515) & "</button>");
    end else begin    
      link = FormatSimpleLink("subscriptions/overview",true);
      WebOutStringFormatNL("<div id=""button""><a class='editbutton' href=""" & link & """>" & ToolWebNGTranslateText(25515) & "</a></div>");
    end;

//    LogText(0,"1=<button type='button' class='editbutton' onclick=" & GetSessionString("currentsubinpackage") & ">" & ToolWebNGTranslateText(32108) & "</button>");
//    WebOutStringFormatNL("<button type='button' class='editbutton' onclick='" & GetSessionString("currentsubinpackage") & "'>" & ToolWebNGTranslateText(32108) & "</button>");
  end;
  WebOutTagClose("</div>");
  return;
end;

procedure ShowMyAccountOverview(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  record WebNGCountryVc WCr;
  string 255 link,tstr;
  val amount;
  longint cnt;
  date earliestexp;
  record CUVc CUr;
  
  CUr.Code = CurrentCust;
  ReadFirstMain(CUr,1,true);
  
  LoadWebPage(WSr.WebPage,WPr);
  
  ShowWebAppPageStart(WPr,"my_account");
  WebOutStringFormatNL("<h1>" & ToolWebNGTranslateText(25800) & "</h1>");
  ShowDetailsView(WSr,CUr);
//  if (nonblank(address1)) then begin WebOutStringFormat("<br />" & address1); end;
//  if (nonblank(address2)) then begin WebOutStringFormat("<br />" & address2); end;
//  if (nonblank(address3)) then begin WebOutStringFormat("<br />" & address3); end;
//  if (nonblank(address4)) then begin WebOutStringFormat("<br />" & address4); end;
//  if (nonblank(address5)) then begin WebOutStringFormat("<br />" & address5); end;
//  if (nonblank(phone)) then begin WebOutStringFormat("<br />Phone: " & phone); end;
//  if (nonblank(email)) then begin WebOutStringFormat("<br />" & email); end;
//  WebOutStringFormatNL("</p>");
//  link = FormatSimpleLink(GetLinkToStruct(WSr.SerNr,true) & "billinginfo",true);
//  WebOutStringFormatNL("<a href=""" & link & """>Edit</a>");

//  WebOutTagOpen("<li class=""myaccounttile"">");
//  WebOutStringFormatNL("<h1>Delivery Address</h1>");
//  GetCurrentCustomerDeliveryAddr(deladdrcode,address1,address2,address3,address4,address5,email,phone,fax);
//  WebOutStringFormat("<p>");
//  WebOutStringFormat(address1);
//  if (nonblank(address2)) then begin WebOutStringFormat("<br />" & address2); end;
//  if (nonblank(address3)) then begin WebOutStringFormat("<br />" & address3); end;
//  if (nonblank(address4)) then begin WebOutStringFormat("<br />" & address4); end;
//  if (nonblank(address5)) then begin WebOutStringFormat("<br />" & address5); end;
//  if (nonblank(phone)) then begin WebOutStringFormat("<br />Phone: " & phone); end;
//  if (nonblank(email)) then begin WebOutStringFormat("<br />" & email); end;
//  WebOutStringFormat("</p>");
//  link = FormatSimpleLink(GetLinkToStruct(WSr.SerNr,true) & "shipping",true);
//  WebOutStringFormatNL("<a href=""" & link & """>Edit</a>");
//  WebOutTagClose("</li>");
//
//  WebOutTagOpen("<li class=""myaccounttile"">");
//  WebOutStringFormatNL("<h1>Order History</h1>");
//  cnt = CountCustomerOrders(CurrentCust);
//  if (cnt==1) then begin
//    tstr = "order";
//  end else begin
//    tstr = "orders";
//  end;
//  WebOutStringFormatNL("<p>You have " & cnt & " " & tstr & " in your order history.</p>");
//  link = FormatSimpleLink(GetLinkToStruct(WSr.SerNr,true) & "orderhistory",true);
//  WebOutStringFormatNL("<a href=""" & link & """>View</a>");
//  WebOutTagClose("</li>");

/*
//  WebOutTagOpen("<div class=""displayunit"">");
//  link = GetFormattedMenuLink(kMyAccountWishList,WSr.SerNr);
//  WebOutStringFormatNL("<div class=""button""><span class=""edit""><a href=""" & link & """ title=""Edit Account"">Edit Account</a></span></div>");
//  WebOutStringFormatNL("<h1>Wish List</h1>");
//  WebOutStringFormatNL("<p>You have 1 item(s) in your wish list.</p>");
//  WebOutTagClose("</div>");

  WebOutTagOpen("<div class=""displayunit_last"">");
  link = FormatSimpleLink(GetLinkToShop,true);
  WebOutStringFormatNL("<div class=""button""><a href=""" & link & """ title=""Go Shopping""><span class=""shipping"">Go Shopping</span></a></div>");
  WebOutStringFormatNL("<div class=""clr""></div>");
  link = FormatLink("/WebUpdatingAction.hal","?action=logout&path=/",true,true);
  WebOutStringFormatNL("<div class=""button""><a href=""" & link & """ title=""Logout""><span class=""logout"">Logout</span></a></div>");
  WebOutTagClose("</div>");
*/
//  WebOutTagClose("</ul>");
//  WebOutTagClose("</div>");
  ShowWebAppPageEnd(WPr);
  return;
end;

procedure ShowShippingInfoList(record WebNGStructVc WSr)
begin
/*
  record DelAddrVc DAr;
  record WebNGCountryVc WCr;
  boolean foundf,addnewf;
  string 255 address1,address2,address3,address4,address5,phone,email,fax,country,comment,name,postcode,state;
  integer err;
  string 255 link;
  integer i,cnt;
//  record WebNGCKStatesVc WCSr;
//  row WebNGCKStatesVc WCSrw;
  
  WebOutTagOpen("<div class=""myaccount"">");

  WebOutStringFormatNL("<h3>SHIPPING INFORMATION <span class=""required"">(*required)</span></h3>");

  WebOutTagOpen("<table width=""100%"">");

  WebOutTagOpen("<thead>");

  WebOutTagOpen("<tr>");
  WebOutStringFormatNL("<td>Saved As</td>");
  WebOutStringFormatNL("<td>Name</td>");
  WebOutStringFormatNL("<td>Address</td>");
  WebOutStringFormatNL("<td>Phone Number</td>");
  WebOutStringFormatNL("<td>&nbsp;</td>");
  WebOutStringFormatNL("<td>&nbsp;</td>");
  WebOutTagClose("</tr>");

  WebOutTagClose("</thead>");
  
  WebOutTagOpen("<tbody>");
  
  foundf = true;
  DAr.CustCode = CurrentCust;
  while (LoopKey("CustCode",DAr,1,foundf)) begin
    if (DAr.CustCode!=CurrentCust) then begin
      foundf = false;
    end;
    if (foundf) then begin
      WebOutTagOpen("<tr>");
      WebOutStringFormatNL("<td>" & DAr.Comment & "</td>");
      WebOutStringFormatNL("<td>" & DAr.Name & "</td>");

      WebOutTagOpen("<td>");
      WebOutTagOpen("<div align=""left"">");
      if (nonblank(DAr.DelAddr0)) then begin WebOutStringFormatNL(DAr.DelAddr0 & "<br />"); end;
      if (nonblank(DAr.DelAddr1)) then begin WebOutStringFormatNL(DAr.DelAddr1 & "<br />"); end;
      if (nonblank(DAr.DelAddr2)) then begin WebOutStringFormatNL(DAr.DelAddr2 & "<br />"); end;
      if (nonblank(DAr.DelAddr3)) then begin WebOutStringFormatNL(DAr.DelAddr3 & "<br />"); end;
      if (nonblank(DAr.DelAddr4)) then begin WebOutStringFormatNL(DAr.DelAddr4 & "<br />"); end;
//      if (nonblank(DAr.WebCountry)) then begin
//        WCr.Code = DAr.WebCountry;
//        if(ReadFirstMain(WCr,1,true)) then begin
//          WebOutStringFormat(GetTranslatedNameCountry(WCr));
//        end;
//      end;
      WebOutTagClose("</div>");
      WebOutTagClose("</td>");
      
      WebOutStringFormatNL("<td>" & DAr.Phone & "</td>");
      link = "?edit=" & UrlEncodeCS(DAr.DelCode) & "#form";
      WebOutStringFormatNL("<td><a class=""button update"" href=""" & link & """></a></td>");
      link = FormatLink("/WebUpdatingAction.hal","?action=deletedeladdr&deladdrcode=" & DAr.DelCode,true,true);
      WebOutStringFormatNL("<td><a class=""button remove"" href=""" & link & """ onclick=""return confirm('Do you want to remove this shipping address?');""></a></td>");
      
      WebOutTagClose("</tr>");
    end;
  end;

  WebOutTagClose("</tbody>");

  WebOutTagClose("</table>");
  
  ResetLoop(DAr);
  DAr.DelCode = "";

  if (WebGetArg("addnew")=="1") then begin
    addnewf = true;
  end;
  
  if (addnewf==false and nonblank(WebGetArg("edit"))) then begin
    DAr.CustCode = CurrentCust;
    DAr.DelCode = WebGetArg("edit");
    if (ReadFirstMain(DAr,2,true)==false) then begin DAr.DelCode = ""; end;
  end;
  
  if (nonblank(DAr.DelCode) or addnewf) then begin
    WebOutStringFormatNL("<br />");
    WebOutStringFormatNL("<br />");
    
    GetAddDelAddrSessionVars(address1,address2,address3,address4,address5,phone,email,fax,err,country,comment,name,postcode,state);
    
    if (addnewf==false and blank(address1 & address2 & address3 & address4 & address5 & phone & email & fax & country & comment & name & postcode)) then begin
      name     = DAr.Name;
      comment  = DAr.Comment;
      address1 = DAr.DelAddr0;
      address2 = DAr.DelAddr1;
      address3 = DAr.DelAddr2;
      address4 = DAr.DelAddr3;
      phone    = DAr.Phone;
      fax      = DAr.Fax;
      email    = DAr.Email;
//      postcode = DAr.PostCode;
//      country  = DAr.WebCountry;
    end;
    
    WebOutStringFormatNL("<a name=""form""></a>");
    
    ShowAddDeliveryErrorList(err);

    ClearAddDelAddrSessionVars;

    WebOutTagOpen("<form id=""billinginfo"" method=""post"" action=""" & FormatLink("/WebUpdatingAction.hal","?action=adddeladdr",true,true) & """>");
    if (addnewf==false) then begin
      WebOutStringFormat("<input type=""hidden"" name=""deladdrcode"" value=""" & DAr.DelCode & """>");
    end;
    WebOutStringFormat("<input type=""hidden"" name=""type"" value=""myaccount"">");

    WebOutTagOpen("<ol>");

    WebOutTagOpen("<li>");
    WebOutStringFormat("<label>Saved As<span class=""required"">*</span>:</label>");
    WebOutStringFormat("<input type=""text"" class=""textfield"" name=""comment"" value=""");
    WebOutStringFormat(comment);
    WebOutStringFormat(""" />");
    WebOutTagClose("</li>");

    WebOutStringFormatNL("<li></li>");

    WebOutStringFormat("<li><label>Name<span class=""required"">*</span>:</label> <input type=""text"" class=""textfield"" name=""name"" value=""");
    WebOutStringFormat(name);
    WebOutStringFormatNL(""" /></li>");
    WebOutStringFormat("<li><label>Address Line 1<span class=""required"">*</span>:</label> <input type=""text"" class=""textfield"" name=""address1"" value=""");
    WebOutStringFormat(address1);
    WebOutStringFormatNL("""  />&nbsp;<span class=""notetocustomer"">Note to Customer:<br /> CharlesKeith.com does not ship to PO Box or hotel addresses</span></li>");
    WebOutStringFormat("<li><label>Address Line 2:</label> <input type=""text"" class=""textfield"" name=""address2"" value=""");
    WebOutStringFormat(address2);
    WebOutStringFormatNL(""" /></li>");
    WebOutStringFormat("<li><label>City<span class=""required"">*</span>:</label> <input type=""text"" class=""textfield"" name=""address3"" value=""");
    WebOutStringFormat(address3);
    WebOutStringFormatNL(""" /></li>");

    WebOutTagOpen("<li>");
    
    WebOutStringFormatNL("<label>Country<span class=""required"">*</span>:</label>");
                            
    WebOutTagOpen("<select name=""country"" id=""country"" tabindex=""7"" onchange=""changeDelAddrCountry();"">");
    ResetLoop(WCr);
    WCr.Code = "";
    while (LoopMain(WCr,1,true)) begin
//      if(NonBlank(WCr.WebFreightZone)) then begin
//        if (WCr.Code==country) then begin
//          WebOutTagOpen("<option value=""" & WCr.Code & """ selected=""selected"">");
//        end else begin
//          WebOutTagOpen("<option value=""" & WCr.Code & """>");
//        end;
//        WebOutStringFormat(GetTranslatedNameCountry(WCr));
//        WebOutTagClose("</option>");
//      end;
    end;
    WebOutTagClose("</select>");
    
    WebOutStringFormat("<img src=""/imgs/zoomloader.gif"" id=""spinner"" style=""display: none;"">");

    WebOutStringFormatNL("<br /><br />");

    WebOutTagClose("</li>"); //country

//    WebOutStringFormat("<li><label>State/Province<span class=""required"">*</span>:</label> <input type=""text"" class=""textfield"" id=""address4"" name=""address4"" value=""");
//    WebOutStringFormat(address4);
//    WCSr.Code = country;
//    if (ReadFirstMain(WCSr,1,true)) then begin end;
//    cnt = MatRowCnt(WCSr);
//    if (cnt>0) then begin
//      WebOutStringFormatNL(""" style=""display:none;"" /></li>");
//      WebOutTagOpen("<select name=""state"" id=""statecombo"">");
//      WebOutStringFormatNL("<option value="""">-- Select --</option>");
//      for (i=0;i<cnt;i=i+1) begin
//        MatRowGet(WCSr,i,WCSrw);
//        if (WCSrw.StateCode==state) then begin
//          WebOutStringFormatNL("<option value=""" & WCSrw.StateCode & """ selected=""selected"">" & WCSrw.StateName & "</option>");
//        end else begin
//          WebOutStringFormatNL("<option value=""" & WCSrw.StateCode & """>" & WCSrw.StateName & "</option>");
//        end;
//      end;
//      WebOutTagClose("</select>");
//    end else begin
//      WebOutStringFormatNL(""" /></li>");
//    end;
    WebOutStringFormat("<li><label>Zip/Postal Code<span class=""required"">*</span>:</label> <input type=""text"" class=""textfield"" name=""postcode"" value=""");
    WebOutStringFormat(postcode);
    WebOutStringFormatNL(""" /></li>");

//  name -> NAme
//  addr1 -> addr0
//  addr2 -> addr1
//  city -> addr2
//  province -> addr3
//  postcode -> new field
  
    WebOutStringFormat("<li><label>Email:</label> <input type=""email"" class=""textfield"" name=""email"" value=""");
    WebOutStringFormat(email);
    WebOutStringFormatNL(""" /></li>");

    WebOutStringFormat("<li><label>Phone number:</label> <input type=""text"" class=""textfield"" name=""phone"" value=""");
    WebOutStringFormat(phone);
    WebOutStringFormatNL(""" /></li>");

    WebOutTagOpen("<li>");
    WebOutStringFormatNL("<br /><br />");
    WebOutStringFormatNL("<div class=""button""><a href=""hwindex.htm"" title=""Back""><span class=""back"">Back</span></a></div>");
    if (addnewf) then begin
//      WebOutStringFormatNL("<div class=""button""><input id=""addmoreaddress"" type=""submit"" class=""addnew"" value="" "" /></div>");
      WebOutStringFormatNL("<input type=""submit"" class=""button addnew"" value="" "" />");
    end else begin
      WebOutStringFormatNL("<input type=""submit"" class=""button update"" value="" "" />");
    end;
//    WebOutStringFormatNL("<div class=""button""><span id=""addmoreaddress"" class=""addnew""><a href=""?addnew=1"" title=""Add New"">Add New</a></span></div>");
    WebOutTagClose("</li>");

    WebOutTagClose("</ol>");
    
    WebOutTagClose("</form>");
  end else begin
    WebOutStringFormatNL("<br />");
    WebOutStringFormatNL("<div class=""button""><a href=""?addnew=1"" title=""Add New""><span id=""addmoreaddress"" class=""addnew"">Add New</span></a></div>");
  end; 

  WebOutTagClose("</div>");
*/
  return;
end;

procedure ShowShippingInfoPage(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;

  LoadWebPage(WSr.WebPage,WPr);

  ShowWebAppPageStart(WPr,"my_account");

//  WebOutTagOpen("<div id=""leftcontent"">");
//  ShowMyAccountMenu(WSr);
//  WebOutTagClose("</div>");
  
  WebOutTagOpen("<div id=""rightcontent"">");
  ShowShippingInfoList(WSr);
  WebOutTagClose("</div>");
  
  WebOutStringFormatNL("<div class=""clr""></div>");

  ShowWebAppPageEnd(WPr);
  return;
end;

procedure ShowDetailsEdit(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  record WebNGElementVc WEr;
  record CUVc CUr;
  string 255 templatepage,templateelement;
  Boolean dontshowhead;
  
  MyAccountGetTemplates(WSr,kMyAccountPageDetails,templatepage,templateelement,dontshowhead);
  LoadWebPage(templatepage,WPr);
  ShowWebAppPageStart(WPr,"my_account");
  ShowWebElementTemplate(templateelement,0); //before
  if (dontshowhead==false) then begin
    if (IsMarketplaceServer) then begin
      if (nonblank(ToolWebNGTranslateText(32307))) then begin
        WebOutStringFormatNL("<h1>"& ToolWebNGTranslateText(32307) & "</h1>");
      end;
      MyAccountShowErrors("cureg_error");
    end else begin
    /* What is this??? we get some strange texts here, because it will always contain a value
      if (nonblank(ToolWebNGTranslateText(20416))) then begin
        WebOutStringFormatNL("<h1>"& ToolWebNGTranslateText(20416) & "</h1>");
      end;
    */
    end;
  end;
  WEr.Type = kElementTypeRegisterNewCustomerForm; // In or out?
  WEr.DivID = "details_edit";
  WEr.LinkToStruct = GetMyAccountStruct;
  ShowSimpleWebElement(WEr);
  ShowWebElementTemplate(templateelement,2); //after
  ShowWebAppPageEnd(WPr);
  
  return;
end;

global
procedure ShowOrders(record WebNGStructVc WSr,Boolean showpage)
begin
  record WebNGPageVc WPr;
  record PeriodBlock PeriodRec;
  row PeriodBlock Periodrw;
  date startdate,enddate;
  string 255 tstr,status,link;
  record ORVc ORr;
  boolean TrHs,testf,printf;
  string 10 dateformat;
  string 255 templatepage,templateelement;
  Boolean dontshowhead;
  
  BlockLoad(PeriodRec);
  if (MatRowCnt(PeriodRec)>0) then begin
    MatRowGet(PeriodRec,0,Periodrw);
    startdate = Periodrw.FromDate;
    enddate = Periodrw.ToDate;
  end;
  
  tstr = WebGetArg("startdate");
  if (nonblank(tstr)) then begin
    startdate = StringToDate(tstr);
  end;
  tstr = WebGetArg("enddate");
  if (nonblank(tstr)) then begin
    enddate = StringToDate(tstr);
  end;
  
  dateformat = ShopGetDateFormat;

  if (showpage) then begin
    MyAccountGetTemplates(WSr,kMyAccountPageOrders,templatepage,templateelement,dontshowhead);
    LoadWebPage(templatepage,WPr);
    ShowWebAppPageStart(WPr,"my_account");
    ShowWebElementTemplate(templateelement,0); //before
  end;

  if (dontshowhead==false) then begin
    WebOutStringFormatNL("<h1>" & ToolWebNGTranslateText(25801) & "</h1>");
  end;
  WebOutTagOpen("<div id=""order_list"" class=""listsearch"">");
  WebOutTagOpen("<form id=""orders"" method=""post"" action="""">");
  WebOutTagOpen("<ul>");
  WebOutTagOpen("<li>");
  ShowInputWithLabel(ToolWebNGTranslateText(25802),"text","","startdate",startdate,false,false);
  if (nonblank(dateformat)) then begin
    WebOutStringFormatNL("<div id=""orddateformat"" >( " & dateformat & " )</div>");
  end;
  WebOutTagClose("</li>");
  WebOutTagOpen("<li>");
  ShowInputWithLabel(ToolWebNGTranslateText(25803),"text","","enddate",enddate,false,false);
  WebOutTagClose("</li>");
  WebOutTagOpen("<li>");
  WebOutSubmit("","button","Submit",ToolWebNGTranslateText(20067));
  WebOutTagClose("</li>");
  WebOutTagClose("</ul>");
  WebOutTagClose("<form>");
  
  ORr.CustCode = CurrentCust;
  ORr.OrdDate = AddDay(enddate,1);
  TrHs = true;
  while (LoopBackKey("CustDate",ORr,2,TrHs)) begin
    if (ORr.CustCode!=CurrentCust) then begin
      TrHs = false;
    end;
    if (ORr.OrdDate<startdate) then begin
      TrHs = false;
    end;
    testf = TrHs;
    if (testf) then begin
      if (!printf) then begin
        WebOutTagOpen("<table class=""orderstable2"">");
        WebOutTagOpen("<tr>");
        WebOutStringFormatNL("<th class='or_no'>" & ToolWebNGTranslateText(25804) & "</th>");
        WebOutStringFormatNL("<th class='or_date'>" & ToolWebNGTranslateText(25805) & "</th>");
        WebOutStringFormatNL("<th class='or_sum'>" & ToolWebNGTranslateText(25806) & "</th>");
        WebOutTagClose("</tr>");
        printf = true;
      end;
      link = FormatLink("/WebUpdatingAction.hal","?action=download_order&sernr=" & ORr.SerNr,true,true);
      WebOutTagOpen("<tr>");
      WebOutStringFormatNL("<td class='or_no'><a target=""_blank"" href="""& link & """>" & ORr.SerNr & "</a></td>");
      WebOutStringFormatNL("<td class='or_date'>" & ORr.OrdDate & "</td>");
      WebOutStringFormatNL("<td class='or_sum'>" & ORr.Sum4 & "</td>");
      WebOutTagClose("</tr>");
    end;
  end;
  if (printf) then begin
    WebOutTagClose("</table>");
  end;
  WebOutTagOpen("</div>");

  if (showpage) then begin
    ShowWebElementTemplate(templateelement,2); //after
    ShowWebAppPageEnd(WPr);
  end;
  return;
end;

procedure GetIVStatus(record IVVc IVr,var integer stat)
begin
  record ARVc ARr;

  stat = 0;

  ARr.InvoiceNr = IVr.SerNr;
  if (ReadFirstMain(ARr,1,true)) then begin
    if (ARr.DueDate<CurrentDate) then begin
      stat = 1;
    end else begin
      stat = 2;
    end;
  end;

  return;
end;

function string 40 ShowIVStatus(integer stat)
begin
  string 40 res;
  
  res = "<div class='stat_flag stat" & stat & "'>" & ToolWebNGTranslateText(25810+stat) & "</div>";
  
  ShowIVStatus = res;
  return;
end;

procedure DisplayInvoiceSelectList(string custcode,Date startdate,Date enddate,var array record IVVc aIVr)
begin
  record IVVc IVr;
  Boolean TrHs,testf;

  IVr.InvDate = AddDay(enddate,1);
  IVr.CustCode = custcode;
  TrHs = true;
  while (LoopBackKey("CustDate",IVr,2,TrHs)) begin
    if (IVr.CustCode!=custcode) then begin
      TrHs = false;
    end;
    if (IVr.InvDate<startdate) then begin
      TrHs = false;
    end;
    testf = TrHs;
    if (IVr.OKFlag==0) then begin
      testf = false;
    end;
    if (IVr.Invalid!=0) then begin  
      testf = false;
    end;
    if (testf) then begin
      aIVr[aIVr.length] = IVr;
    end;
  end;
    
  return;
end;


global
procedure ShowInvoices(record WebNGStructVc WSr,Boolean showpage)
begin
  record WebNGPageVc WPr;
  record PeriodBlock PeriodRec;
  row PeriodBlock Periodrw;
  date startdate,enddate;
  string 255 tstr,status,link;
  record IVVc IVr;
  boolean TrHs,testf,printf;
  string 10 dateformat;
  record CUVc CUr;
  integer stat,i;
  val sum;
  string 255 paymethod;
  string 255 templatepage,templateelement;
  Boolean dontshowhead;
  string 255 paydeal,infoel;
  record MyAccountBlock MAbl;
  array record IVVc aIVr;
  record WebRegMailBlock WMb;

  BlockLoad(WMb);
  BlockLoad(MAbl);
  BlockLoad(PeriodRec);
  if (MatRowCnt(PeriodRec)>0) then begin
    MatRowGet(PeriodRec,0,Periodrw);
    startdate = Periodrw.FromDate;
    enddate = Periodrw.ToDate;
  end;
  
  dateformat = ShopGetDateFormat;   
  tstr = WebGetArg("startdate");
  if (nonblank(tstr)) then begin
    startdate = DateFromString(tstr,dateformat);
  end;
  tstr = WebGetArg("enddate");
  if (nonblank(tstr)) then begin
    enddate = DateFromString(tstr,dateformat);
  end;
  CUr.Code = CurrentCust;
  ReadFirstMain(CUr,1,true);

  if (showpage) then begin
    MyAccountGetTemplates(WSr,kMyAccountPageInvoices,templatepage,templateelement,dontshowhead);
    LoadWebPage(templatepage,WPr);
    ShowWebAppPageStart(WPr,"my_account");
    ShowWebElementTemplate(templateelement,0); //before
  end;

  if (CUr.BillingTypePreference==kBillPaymentPrefNotDecided or 
      CUr.BillingTypePreference==kBillPaymentPrefCC or 
      CUr.BillingTypePreference==kBillPaymentPrefPaypal or
      CUr.BillingTypePreference==kBillPaymentPrefDotpay or
      CUr.BillingTypePreference==kBillPaymentPrefPaytrail or
      CUr.BillingTypePreference==kBillPaymentPrefPaysera) then begin
    if (dontshowhead==false) then begin
      WebOutStringFormatNL("<h1>" & ToolWebNGTranslateText(25807) & "</h1>");
    end;
    WebOutTagOpen("<div id=""invoice_list"" class=""listsearch"">");
    WebOutTagOpen("<form id=""invoices"" method=""post"" action="""">");
    WebOutTagOpen("<ul class=""invoicestable"">"); 
    WebOutTagOpen("<li>");
    ShowInputWithLabel(ToolWebNGTranslateText(25802),"text","date-pick","startdate",DateToString(startdate,dateformat),false,true); 
    WebOutTagOpen("</li>");
    WebOutTagOpen("<li>");
    ShowInputWithLabel(ToolWebNGTranslateText(25803),"text","date-pick","enddate",DateToString(enddate,dateformat),false,true);
    WebOutTagOpen("</li>");
    WebOutTagOpen("<li>");
    WebOutSubmit("","button","Submit",ToolWebNGTranslateText(20067));
    WebOutTagClose("</li>");
    WebOutTagClose("</ul>");
    WebOutTagClose("</form>");

    
    DisplayInvoiceSelectList(CurrentCust,startdate,enddate,aIVr);

    if (aIVr.length>0 and nonblank(WMb.InvoiceLetID)) then begin
      switch (GetSessionString("myaccount_iv_sent")) begin
        case "1":
          WebOutString("<div class='iv_sent_msg'>" & ToolWebNGTranslateText(25825) & "</div>");
        case "2":
          WebOutString("<div class='iv_sent_msg error'>" & ToolWebNGTranslateText(25826) & "</div>");
      end;
      PutSessionString("myaccount_iv_sent","");
      WebOutStringFormatNL("<div class='iv_send' invoice='" & IVr.SerNr & "'><form action='/WebAction.hal' Method='POST'>");
      WebOutString("<input type='hidden' name='path' value='" & WebGetArg("path") & "'>");
      WebOutString("<input type='hidden' name='action' value='sendwebinvoice'>");
      WebOutString("<div class='send_iv_nr'><select name='invoice'><option value='-1'>" & ToolWebNGTranslateText(25814) & "</option>");
      for (i=0;i<aIVr.length;i=i+1) begin
        IVr = aIVr[i];
        WebOutString("<option value='" & IVr.SerNr & "'>" & IVr.InvDate & " - " & IVr.SerNr & "</option>");
      end;
      WebOutString("</select></div>");
      WebOutString("<div class='send_iv_mail'><input type='email' placeholder='" & ToolWebNGTranslateText(25607) & "' name='email'></div>");
      WebOutString("<div class='send_iv_button'><input type='submit' value='" & ToolWebNGTranslateText(25813) & "'></div>");
      WebOutString("</div>");
    end;
    
    for (i=0;i<aIVr.length;i=i+1) begin
      IVr = aIVr[i];
      GetIVStatus(IVr,stat);
      if (!printf) then begin
        WebOutTagOpen("<table class=""invoicestable2"">");
        WebOutTagOpen("<tr>");
        WebOutStringFormatNL("<th class='iv_no'>" & ToolWebNGTranslateText(25804) & "</th>");
        WebOutStringFormatNL("<th class='iv_date'>" & ToolWebNGTranslateText(25805) & "</th>");
        WebOutStringFormatNL("<th class='iv_sum'>" & ToolWebNGTranslateText(25806) & "</th>");
        WebOutStringFormatNL("<th class='iv_status'>" & ToolWebNGTranslateText(25808) & "</th>");
        WebOutStringFormatNL("<th class='iv_pay'></th>");
        WebOutTagClose("</tr>");
        printf = true;
      end;
      if (GetSessionString("hw_com_market")=="true") then begin
        link = "/dologinwithenab?custcode=" & CurrentCust & "&enabregno=" & GetSessionString("hw_com_enabregno") & "&btntype=downloadinv&ivnr=" & IVr.SerNr;
      end else begin
        link = FormatLink("/WebUpdatingAction.hal","?action=download_invoice&sernr=" & IVr.SerNr,true,true);
      end;
      WebOutTagOpen("<tr>");
      sum = IVr.Sum4;
      if (IVr.InvType==kInvoiceTypeCredit) then begin
        sum = -sum;
      end;
      WebOutStringFormatNL("<td class='iv_no'><a target=""_blank"" href="""& link & """>" & IVr.SerNr & "</a></td>");
      WebOutStringFormatNL("<td class='iv_date'>" & DateToString(IVr.InvDate,dateformat) & "</td>");
      WebOutStringFormatNL("<td class='iv_sum'>" & sum & "</td>");
      WebOutStringFormatNL("<td class='iv_status'>" & ShowIVStatus(stat) & "</td>");
      WebOutStringFormatNL("<td class='iv_pay'>");
      if (stat>0) then begin
        if (IsMarketplaceServer) then begin
          paymethod = GetMarketplacePayMethod(CurrentCust);
          if (nonblank(paymethod)) then begin
            WebOutStringFormatNL("<a href='/WebUpdatingAction.hal?action=pay_invoice&invoiceno=" & IVr.SerNr & "&paymethod=" & paymethod & "'>" & ToolWebNGTranslateText(31416) & "</a>");
          end;
        end else begin
          if (MAbl.InvoiceAllowPay==1) then begin
            paymethod = "";
            if (PaymethodSupported("creditcard",paydeal,infoel)) then begin
              paymethod = "creditcard";
            end else begin
              if (PaymethodSupported("paypal",paydeal,infoel)) then begin
                paymethod = "paypal";
              end;
            end;
            if (nonblank(paymethod)) then begin
              WebOutStringFormatNL("<a href='/WebUpdatingAction.hal?action=pay_invoice&invoiceno=" & IVr.SerNr & "&paymethod=" & paymethod & "'>" & ToolWebNGTranslateText(31416) & "</a>");

            end;
          end;
        end;
      end;
      WebOutStringFormatNL("</td>");
      WebOutTagClose("</tr>");
    end;
    if (printf) then begin
      WebOutTagClose("</table>");
    end;
    WebOutTagOpen("</div>");
  end else begin
    WebOutStringFormatNL("<h1>" & ToolWebNGTranslateText(32411) & "</h1>");
  end;
  if (showpage) then begin
    ShowWebElementTemplate(templateelement,2); //after
    ShowWebAppPageEnd(WPr);
  end;
  return;
end;

global
updating procedure MyAccountDownloadInvoice(LongInt InvoiceNr)
begin
  record IVVc IVr;
  string 255 filename,docname;
  
  IVr.SerNr = InvoiceNr;
  if (!ReadFirstMain(IVr,1,true)) then begin
    goto LExit;
  end;
  if (IVr.CustCode!=CurrentCust) then begin
    goto LExit;
  end;
  
  switch (IVr.InvType) begin
    case kInvoiceTypeCash: docname = "CashInvForm";
    case kInvoiceTypeCashInvoiceReceiptPRT: docname = "CashInvRecPRTForm";
    case kInvoiceTypeCredit: docname = "CredInvForm";
    case kInvoiceTypeInterest: docname = "IIInvForm";
    case kInvoiceTypeCreditSpecialSales: docname = "CredInvForm";
    otherwise docname = "InvForm";
  end;
  if ((IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeNormalSpecialSales) or (IVr.InvType==kInvoiceTypeDownpayment)) then begin
    if (nonblank(IVr.PRCode)) then begin    
      docname = "ProjInvForm";
    end;
  end;
  filename = "tmp/invoice_" & IVr.SerNr & ".pdf";
  SetDocumentFilename(filename);
  SetMedia(mtPdf);
  PrintDocument(IVr,docname,false);
  SetDocumentFilename("");
  
  if (FileExists(filename)) then begin
    WebSetContentType("application/pdf");
    if (true) then begin // TODO: make setting
      WebSetContentDisposition("inline; filename=" & filename);
    end else begin
      WebSetContentDisposition("attachment; filename=" & filename);
    end;
    WebOutFile(filename);
    Delete_File(filename);
  end else begin
    WebOutString(ToolWebNGTranslateText(25000));
  end;
  
LExit:;
  return;
end;

global
procedure MyAccountSendInvoice(LongInt InvoiceNr,string email)
begin
  
  if (InvoiceNr>0 and ValidEmailAddress(email)) then begin
    queued.SendWebshopMail2(kWebshopMailInvoice,InvoiceNr,email,"invoice-resend",CurrentWebLang);
    PutSessionString("myaccount_iv_sent",1);
  end else begin
    PutSessionString("myaccount_iv_sent",2);  
  end;
  ShowRedirectHTML(WebGetArg("path"),WebSecureMode);
  
  return;
end;

global
updating procedure MyAccountDownloadOrder(LongInt OrderNr)
begin
  record ORVc ORr;
  string 255 filename,docname;
  
  ORr.SerNr = OrderNr;
  if (!ReadFirstMain(ORr,1,true)) then begin
    goto LExit;
  end;
  if (ORr.CustCode!=CurrentCust) then begin
    goto LExit;
  end;
  
  docname = "OrdForm";
  filename = "tmp/order_" & ORr.SerNr & ".pdf";
  SetDocumentFilename(filename);
  SetMedia(mtPdf);
  PrintDocument(ORr,docname,false);
  SetDocumentFilename("");
  
  if (FileExists(filename)) then begin
    WebSetContentType("application/pdf");
    if (true) then begin // TODO: make setting
      WebSetContentDisposition("attachment; filename=Order.pdf");
    end else begin
      WebSetContentDisposition("inline; filename=Order.pdf");
    end;
    WebOutFile(filename);
    Delete_File(filename);
  end else begin
    WebOutString(ToolWebNGTranslateText(25000));
  end;
  
LExit:;
  return;
end;

procedure ShowChangePassword(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  record WebNGElementVc WEr;
  string 255 link;
  string 255 templatepage,templateelement;
  Boolean dontshowhead;
  
  MyAccountGetTemplates(WSr,kMyAccountPagePassword,templatepage,templateelement,dontshowhead);
  LoadWebPage(templatepage,WPr);
  ShowWebAppPageStart(WPr,"my_account");
  ShowWebElementTemplate(templateelement,0); //before
  if (blank(GetSessionString("changepass_complete"))) then begin
    if (dontshowhead==false) then begin
      WebOutStringFormatNL("<h1>" & ToolWebNGTranslateText(25815) & "</h1>");
    end;
    WebOutTagOpen("<div id=""chpassword"">");
    MyAccountShowErrors("changepass_error");
    link = FormatLink("/WebUpdatingAction.hal","?action=change_password",true,true);
    WebOutTagOpen("<form id=""change_password"" method=""post"" action=""" & link & """>");
    WebOutStringFormatNL("<input type=""hidden"" id=""path"" name=""path"" value=""" & WebGetArg("path") & """>");
    WebOutTagOpen("<ul>");
    WebOutTagOpen("<li>");
    ShowInputWithLabel(ToolWebNGTranslateText(25816),"password","","current_password","",true,false);
    WebOutTagClose("</li>");
    WebOutTagOpen("<li>");
    ShowInputWithLabel(ToolWebNGTranslateText(25817),"password","","new_password","",true,false);
    WebOutTagClose("</li>");
    WebOutTagOpen("<li>");
    ShowInputWithLabel(ToolWebNGTranslateText(25818),"password","","confirm_new_password","",true,false);
    WebOutTagClose("</li>");
    WebOutTagOpen("<li>");
    WebOutSubmit("","button","Submit",ToolWebNGTranslateText(20067));
    WebOutTagClose("</li>");
    WebOutTagClose("</ul>");
    WebOutTagClose("</form>");
    WebOutTagClose("</div>");
  end else begin
    PutSessionString("changepass_complete","");
    WebOutTagOpen("<div>");
    WebOutStringFormatNL(ToolWebNGTranslateText(25427));
    WebOutTagClose("</div>");
  end;
  ShowWebElementTemplate(templateelement,2); //after
  ShowWebAppPageEnd(WPr);
  
  return;
end;

global
updating procedure MyAccountChangePassword()
begin
  record CUVc CUr,OldCUr;
  string 255 curpass,newpass1,newpass2,link;
  Boolean validateok;
  
  curpass = WebGetArg("current_password");
  newpass1 = WebGetArg("new_password");
  newpass2 = WebGetArg("confirm_new_password");
  
  validateok = true;
  if (blank(curpass) or blank(newpass1) or blank(newpass2)) then begin
    SessionAddToArray("changepass_error",ToolWebNGTranslateText(25053));
    validateok = false;
  end;
  if (newpass1!=newpass2) then begin
    SessionAddToArray("changepass_error",ToolWebNGTranslateText(25046));
    validateok = false;
  end;
  if (validateok) then begin
    CUr.Code = CurrentCust;
    ReadFirstMain(CUr,1,true);
    if (CalcPassword(curpass,CUr.Code,0)!=CUr.Password) then begin
      SessionAddToArray("changepass_error",ToolWebNGTranslateText(25054));
      validateok = false;
    end;
  end;
  if (validateok) then begin
    RecordCopy(OldCUr,CUr);
    CUr.Password = CalcPassword(newpass1,CUr.Code,0);
    RecordUpdate(OldCUr,CUr,true);
    PutSessionString("changepass_complete","true");
    SendWebshopMail(kWebshopMailPassword,CUr.Code);
  end;
  
  link = FormatSimpleLink(WebGetArg("path"),true);
  RedirectToURL(FormatSimpleLink(link,true));
  
  return;
end;

procedure ShowDelAddr(record WebNGStructVc WSr,string path)
begin
  record WebNGPageVc WPr;
  string 255 mpath,node;
  string 255 templatepage,templateelement;
  Boolean dontshowhead;
  
  MyAccountGetTemplates(WSr,kMyAccountPageAddress,templatepage,templateelement,dontshowhead);
  LoadWebPage(templatepage,WPr);
  ShowWebAppPageStart(WPr,"my_account");
  ShowWebElementTemplate(templateelement,0); //before
  
  mpath = path;
  node = removenextnode(mpath);
  if (blank(node)) then begin
    ShowDelAddrList(CurrentCust);
  end else begin
    ShowDelAddrEdit(node,FormatSimpleLink(GetLinkToMyAccount & "deliveryaddress",true),false);
  end;
  
  ShowWebElementTemplate(templateelement,2); //after
  ShowWebAppPageEnd(WPr);
  
  return;
end;

global
procedure MyAccountApp(record WebNGStructVc WSr,string path)
begin
  record MyAccountBlock MyAccountRec;
  record WebNGPageVc WPr;
  string 255 node,mpath;
  record IntServerTypeBlock ISTb;
  
  //handles
  // myaccount/
  // myaccount/
  // myaccount/
  BlockLoad(MyAccountRec);
  if (MyAccountRec.Active==0) then begin
    LoadWebPage(WSr.WebPage,WPr);
    ShowWebAppPageStart(WPr,"my_account");
    WebOutStringFormat(ToolWebNGTranslateText(25055));
    ShowWebAppPageEnd(WPr);
    goto LMyAccountApp;
  end;
  
  BlockLoad(ISTb);
  if (ISTb.Server==kInternalServerMarketplace or ISTb.Server==kInternalServerMarketplaceTest or ISTb.Server==kInternalServerMarketplaceDev or ISTb.Server==kInternalServerMarketplaceUpdate) then begin
    if (GetSessionString("demof")=="1") then begin
      LoadWebPage(WSr.WebPage,WPr);
      ShowWebAppPageStart(WPr,"my_account");
      WebOutStringFormat(ToolWebNGTranslateText(25056));
      ShowWebAppPageEnd(WPr);
      goto LMyAccountApp;
    end;
  end;
  
  if (LoginState==false) then begin
    RedirectToLoginPage;
    goto LMyAccountApp;
  end;
  
//  if (RedirectToCorrectSSLLink(WSr)) then begin goto LMyAccountApp; end;
  
  mpath = path;
  node = removenextnode(mpath);
  
  if (blank(node)) then begin
    ShowMyAccountOverview(WSr);
  end else begin
    switch (node) begin
      case "details":
        ShowDetailsEdit(WSr);
      case "orders":
        ShowOrders(WSr,true);
      case "invoices":
        ShowInvoices(WSr,true);
      case "changepassword":
        ShowChangePassword(WSr);
      case "shipping":
        ShowShippingInfoPage(WSr);
      case "deliveryaddress":
        ShowDelAddr(WSr,mpath);
      otherwise
        LoadWebPage(WSr.WebPage,WPr);
        ShowWebAppPageStart(WPr,"my_account");
        WebOutStringFormat("NOT IMPLEMENTED");
        ShowWebAppPageEnd(WPr);
    end;
  end;
  
LMyAccountApp:;
  return;
end;
