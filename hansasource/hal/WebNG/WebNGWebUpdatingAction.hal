//tools
external updating procedure ShopRedeemIntStdActivCode2(string,string,string);
external function string 10 ToolWebNGGetCountry();
external function string 255 FormatSimpleLink(string,boolean);
external procedure ShowRedirectHtml(string,boolean);
external function boolean LoginState();
//cust registration
external updating procedure UpdateCustomerRegistration(boolean,string,string,string,string,string,string,string,string,string,string,string,string,string,string);
external updating function StoreUpdateCustomer();
//contactus
external updating procedure StoreContactUsForm();
//register new cu
external updating procedure StoreRegisterCUForm();
external updating function StoreCURegForm();
//shop
external function boolean ShopSetCompany(string);
external updating procedure MoveShoppingBasket(string,string);
//university
external updating procedure UniversityPayForCourse(longint);
external updating procedure UniversityCompleteCCTransaction();
//web shop
external updating procedure ShopAddToBasket(string,string,string,string);
external updating procedure ShopRemoveFromBasket(string,string);
external updating procedure ShopUpdateBasketQty(string,string,string);
external updating procedure ShopEmptyBasket(string);
external updating procedure ShopHandlePayment(string,string);
external updating procedure CreateBasketFromProductRegistration(string,string,string,string,string);
external updating procedure ShopPaymentByPaymentServer(string);
external updating procedure ShopPaymentByOrder(string);
external updating procedure ShopPaymentByInvoice(string);
external updating procedure ShopUpdateDeliveryAddress(string);
external updating procedure ShopAddDeliveryAddress(string,string,string,string,string,string,string,string);
external function string 255 GetShopProductArg();
external updating procedure ShopUpdateDeliveryMode();
//online reservations
external updating procedure MoveReservationsBasket(string,string);
external function string 255 GetMainCustomerCodeFromContact(string);
//myaccount
external updating function StoreDelAddrForm;
external updating procedure MyAccountDownloadInvoice(LongInt);
external updating procedure MyAccountDownloadOrder(LongInt);
external updating procedure MyAccountChangePassword();
external updating procedure DoConfirmEmailAddress();
//application specific action handlers
external updating function boolean OnlineReservationsAction(string,longint);
external updating function boolean ForumAction(string,longint);
//web payments
external updating procedure ShopPaymentPayWithCard2(string,string,string,string,string,string,string,string,string);
external updating procedure SubscribeWithCard3(string,string,string,string,string,string,string,string,string,string,string,string,string,string,string,string,string,string);
//createmail
external updating procedure StoreCreateMail();
//webng
external procedure RedirectToStartPage();
external procedure RedirectToRequestedPage();
external procedure RedirectToLoginPage();
//std
external function string 255 removenextlistitem(var string,string);
external function Date DateFromString(string,string);
//old web code
external updating procedure OldCodeWebHBSDivStoreItem(string,string,string);
external updating procedure ShopPaymentAftereGate();
external updating procedure ShopPaymentAfterdotpay2(string,string);
external updating procedure ShopPaymentAfterpaysera2(string,string);
external updating procedure ShopPaymentAfterpaytrail2(string,string);
external updating procedure ShopPaymentDotPayRedirectAfter2(string,string);
external updating procedure ShopPaymentPayseraRedirectAfter2(string,string);
external updating procedure ShopPaymentPayTrailRedirectAfter2(string,string);
external updating procedure AddItemToFavourites(string,string,Boolean);
external updating procedure CatalogUpdateBasketQty(string,string);
external updating procedure SelectOrderForBasket(string);
external updating procedure ShopSetWebOrderDate(string);
external updating procedure ShopAddFavItemObject(string,string,Boolean);
external updating procedure ShopChangeFavOrderQty(string,val);
external procedure SendHansaWorldID();
external updating procedure WebshopChangeOrderDate(Longint,Date);
external updating procedure ShopHandlePaymentManual(string,string,string);
external procedure SendLogAction(Integer,Integer,Integer,string,string);
external updating function Boolean StandardInstallAction(string,string);
external updating procedure ClearMyStandardSessions();

global
updating procedure DoLogout()
begin
  string 255 newpath;
  transaction boolean gLoggedOut;

  WebLogout;
  gLoggedOut = true;
  newpath = WebGetArg("path");
  PutSessionString("justloggedout","true");
  ShowRedirectHtml(FormatSimpleLink(newpath,true),WebSecureMode);
  return;
end;

updating procedure AfterLoginUpdating()
begin
  if (WebGetArg("failed")=="1" or LoginState==false) then begin
    PutSessionString("loginfailed","true");
    RedirectToLoginPage;
  end else begin
    if (WebGetArg("cust")=="1") then begin
      if (blank(GetMainCustomerCodeFromContact(CurrentCust))) then begin
        WebLogout;
        PutSessionString("loginfailed","true");
        RedirectToLoginPage;
      end else begin
        PutSessionString("loginfailed","");
        ClearMyStandardSessions;
        MoveShoppingBasket(GetWebSessionUUID,CurrentCust);
        MoveReservationsBasket(GetWebSessionUUID,CurrentCust);
        PutSessionString("justloggedin","true");
        SendHansaWorldID;
        RedirectToRequestedPage;
      end;
    end else begin
      PutSessionString("loginfailed","");
      PutSessionString("justloggedin","true");
      RedirectToRequestedPage;
    end;
  end;

  return;
end;

global webpublic
updating procedure WebUpdatingAction()
begin
  string 255 action,app;
  string 255 ss;
  integer oldcompany;
  longint WSSerNr;
  boolean res,handled;
  
  oldcompany = CurrentCompany;
  res = ShopSetCompany(ToolWebNGGetCountry);
  
  action = WebGetArg("action");
  WSSerNr = StringToLongint(WebGetArg("wsnr"));

  app = removenextlistitem(action,".");
  switch (app) begin
    case "onlinereservation":
      handled = OnlineReservationsAction(action,WSSerNr);
    case "forum":
      handled = ForumAction(action,WSSerNr);
    case "stdinstall":
      handled = StandardInstallAction(action,WebGetArg("pck"));
    otherwise
      handled = false;
  end;
  
  if (handled==false) then begin
    action = WebGetArg("action");
    switch (action) begin
      case "logout":
        DoLogout;
      case "storeitem":
        OldCodeWebHBSDivStoreItem(WebGetArg("itemcode"),WebGetArg("ord_qty"),WebGetArg("backpage"));
      case "custregistration":
        UpdateCustomerRegistration(false,WebGetArg("companyname"),WebGetArg("person"),WebGetArg("address1"),WebGetArg("address2"),WebGetArg("address3"),WebGetArg("address4"),WebGetArg("address5"),WebGetArg("orgnr"),WebGetArg("phone"),WebGetArg("email"),WebGetArg("fax"),WebGetArg("passwd"),WebGetArg("passwd2"),WebGetArg("message"));
      case "newcustregistration":
        UpdateCustomerRegistration(false,WebGetArg("companyname"),WebGetArg("person"),WebGetArg("address1"),WebGetArg("address2"),WebGetArg("address3"),WebGetArg("address4"),WebGetArg("address5"),WebGetArg("orgnr"),WebGetArg("phone"),WebGetArg("email"),WebGetArg("fax"),WebGetArg("passwd"),WebGetArg("passwd2"),WebGetArg("message"));
      case "save_contactus":
        StoreContactUsForm;
      case "save_newcust":
        StoreRegisterCUForm;
      case "update_cust":
        StoreUpdateCustomer;
      case "university_pay":
        UniversityPayForCourse(StringToLongint(WebGetArg("course")));
      case "university_completecc":
        UniversityCompleteCCTransaction;
      case "addtobasket":
        ShopAddToBasket(GetShopProductArg,WebGetArg("qty"),WebGetArg("config"),WebGetArg("basketno"));
      case "removefrombasket":
        ShopRemoveFromBasket(WebGetArg("rownr"),WebGetArg("basketno"));
      case "updatebasketqty":
        ShopUpdateBasketQty(WebGetArg("rownr"),WebGetArg("qty"),WebGetArg("basketno"));
      case "cat_updatebasketqty":
        CatalogUpdateBasketQty(WebGetArg("qty"),WebGetArg("product"));
      case "emptybasket":
        ShopEmptyBasket(WebGetArg("basketno"));
      case "pay":
        PutSessionString("paycustomerorderno",WebGetArg("customerordnum"));      
        ShopHandlePayment(WebGetArg("paymethod"),WebGetArg("appid"));
      case "pay_invoice":
        ShopHandlePaymentManual(WebGetArg("paymethod"),WebGetArg("invoiceno"),WebGetArg("appid"));
      case "paywithcreditcard":
        ShopPaymentPayWithCard2(WebGetArg("paysessionid"),WebGetArg("cardfirstname"),WebGetArg("cardlastname"),WebGetArg("cardnumber"),WebGetArg("cardtype"),WebGetArg("cardcvc"),WebGetArg("expirymonth"),WebGetArg("expiryyear"),WebGetArg("subscribetosubinpackage"));
      case "subswithcreditcard":
        SubscribeWithCard3(WebGetArg("paysessionid"),WebGetArg("cardfirstname"),WebGetArg("cardlastname"),WebGetArg("cardnumber"),WebGetArg("cardtype"),WebGetArg("cardcvc"),WebGetArg("expirymonth"),WebGetArg("expiryyear"),WebGetArg("address_street"),WebGetArg("address_city"),WebGetArg("address_state"),WebGetArg("address_postalcode"),WebGetArg("address_coutry"),WebGetArg("address_email"),WebGetArg("address_phone"),WebGetArg("successlink"),WebGetArg("sourcepath"),WebGetArg("subscribetosubinpackage"));
      case "redeemactivationcode":
        ShopRedeemIntStdActivCode2(WebGetArg("paysessionid"),WebGetArg("activationcode"),WebGetArg("activationcodecustname"));
      case "regpay":
        CreateBasketFromProductRegistration(WebGetArg("custcode"),WebGetArg("enabregno"),WebGetArg("usercode"),WebGetArg("prog_lang"),WebGetArg("company"));
      case "afterlogin":
        AfterLoginUpdating;
      case "paywithpayserver":
        ShopPaymentByPaymentServer(WebGetArg("paysessionid"));
      case "paywithorder":
        ShopPaymentByOrder(WebGetArg("paysessionid"));
      case "paywithinvoice":
        ShopPaymentByInvoice(WebGetArg("paysessionid"));
      case "updatedeladdr":
        ShopUpdateDeliveryAddress(WebGetArg("deladdress"));
      case "adddeladdr":
        ShopAddDeliveryAddress(WebGetArg("address1"),WebGetArg("address2"),WebGetArg("address3"),WebGetArg("address4"),WebGetArg("address5"),WebGetArg("email"),WebGetArg("phone"),WebGetArg("fax"));
      case "deladdr_save":
        StoreDelAddrForm;
      case "cureg_save":
        StoreCURegForm;
      case "download_invoice":
        MyAccountDownloadInvoice(StringToLongInt(WebGetArg("sernr")));
      case "download_order":
        MyAccountDownloadOrder(StringToLongInt(WebGetArg("sernr")));
      case "change_password":
        MyAccountChangePassword;
      case "createmail_save":
        StoreCreateMail;
      case "payinvpc":
        ShopPaymentAftereGate;
      case "dotpayproceed":
        ShopPaymentAfterdotpay2(WebGetArg("session"),WebGetArg("status"));
      case "payseraproceed":
        ShopPaymentAfterpaysera2(WebGetArg("session"),WebGetArg("status"));
      case "afterdotpayment":
        ShopPaymentDotPayRedirectAfter2(WebGetArg("session"),WebGetArg("status"));
      case "afterpayserament":
        ShopPaymentPayseraRedirectAfter2(WebGetArg("session"),WebGetArg("status"));
      case "paytrailproceed":
        ShopPaymentAfterpaytrail2(WebGetArg("session"),WebGetArg("status"));
      case "afterpaytrailpayment":
        ShopPaymentPayTrailRedirectAfter2(WebGetArg("session"),WebGetArg("status"));
      case "confirmmail":
        DoConfirmEmailAddress;
      case "addtofavourites":
        AddItemToFavourites(WebGetArg("item"),WebGetArg("object"),WebGetArg("addf")=="1");
      case "changeweborder":
        SelectOrderForBasket(WebGetArg("ordernr"));
      case "changeorderdate":
        ShopSetWebOrderDate(WebGetArg("ndate"));
      case "shopaddobject":
        ShopAddFavItemObject(WebGetArg("item"),WebGetArg("object_code"),WebGetArg("addf")=="1");
      case "shopchangeordqty":
        ShopChangeFavOrderQty(WebGetArg("item"),StringToVal(WebGetArg("qty"),M4Val));
      case "shopchangeorderdate":
        WebshopChangeOrderDate(StringToLongint(WebGetArg("sernr")),DateFromString(WebGetArg("td"),"YYYY-MM-DD"));
      case "paywithdotpay":
        ShopHandlePayment(WebGetArg("paymethod"),WebGetArg("appid"));
      case "paywithpaysera":
        ShopHandlePayment(WebGetArg("paymethod"),WebGetArg("appid"));
      case "paywithpaytrail":
        ShopHandlePayment(WebGetArg("paymethod"),WebGetArg("appid"));
      case "updatedeliverymode":
        PutSessionString("delmodecode",WebGetArg("delmode"));
        ShopUpdateDeliveryMode;
      case "senduseraction":
        SendLogAction(kActionFaceTimeWeb,-1,StringToLongint(WebGetArg("time")),WebGetArg("domain"),WebGetArg("page"));
      otherwise
        RedirectToStartPage;
    end;
  end;
  
  if (res) then begin
    ResetCompany(oldcompany);
  end;
  return;
end;
