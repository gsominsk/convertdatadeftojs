external procedure GenProdPlanRecsTask(string);external updating procedure UpdateSessionRec(string,string,integer,var boolean);external procedure GetMonthText(string,Date,var string);external function Integer SetDateOrder(string);external procedure ExtractObj(string,var Integer,var string);external function LongInt DateDiff(Date,Date);external function LongInt TimeDiffinMinutes(Time,Time);external function Integer DateIsRedDay(Integer,Date);external function Integer WeekNr(Date,string);external function Integer GetWeekNr(Date,string,var LongInt);external function boolean FileNameIsImage(string);external function longint GetMotherProdOP(longint,longint);external function integer GetProdPrio(longint);external function Time TimeDiff(Time,Time);external procedure FillShiftDays(record MachineShiftVc,record AT2UnitVc,longint,date);external procedure GetNextAvailableWTime(var date,record MachineShiftVc,date,var time,var time,var time,var integer);external procedure LoadShiftInfo(var record ProdPlanIDVc);external function LongInt TimeToSeconds2(Time);procedure SetContentTypeForExtension(string ext)begin  switch (ext) begin    case "css" : WebSetContentType("text/css");    case "jpg" : WebSetContentType("image/jpeg");    case "jpeg" : WebSetContentType("image/jpeg");    case "png" : WebSetContentType("image/png");    case "gif" : WebSetContentType("image/gif");    case "htc" : WebSetContentType("text/x-component");    case "exe" : WebSetContentType("application/binary");    case "bin" : WebSetContentType("application/binary");    case "obj" : WebSetContentType("application/binary");    case "hpf" : WebSetContentType("application/binary");    case "hob" : WebSetContentType("application/binary");    case "dat" : WebSetContentType("application/binary");    case "swf" : WebSetContentType("application/x-shockwave-flash");    case "pdf" : WebSetContentType("application/pdf");    case "zip" : WebSetContentType("application/zip");    case "txt" : WebSetContentType("text/plain");    case "xml" : WebSetContentType("text/xml");    case "xsl" : WebSetContentType("text/xsl");    case "htm" : WebSetContentType("text/html");    case "html" : WebSetContentType("text/html");    otherwise      WebSetContentType("application/binary");  end;  return;end;global webpublicprocedure WebOutImg()begin  record Attach2Vc Attachr;  string 255 ext;  Attachr.SerNr = StringToLongint(WebGetArg("sernr"));  if ReadFirstMain(Attachr,1,true) then begin    if (Attachr.SerNr>0) then begin      ext = right(Attachr.FileName,4);      SetContentTypeForExtension(ext);      WebSetContentDisposition("inline; filename=" & Attachr.FileName);      WebOutAttachment(Attachr.SerNr);    end;  end;  return;end;function string 255 GetMachinePic(string id)begin  string 255 res;  record AT2UnitVc AT2Unitr;  integer i;  record Attach2Vc Attachr;  record RLinkVc RLr;  res = "";  AT2Unitr.InventoryNr = id;  if readfirstmain(AT2Unitr,1,true) then begin    i = 1;    while ReadRecordLink(AT2Unitr,1,Attachr,RLr) and res=="" begin      if FileNameIsImage(Attachr.FileName) then begin        res = "/WebOutImg.hal?sernr=" & Attachr.SerNr;      end;      i = i + 1;    end;  end;  GetMachinePic = res;  return;end;globalfunction longint DurToSeconds(duration t)begin  longint res;  longint l;  res = 0;    if nonblankduration(t) then begin    l = t.hour * 3600 + 60 * t.minute + t.second;    res = l;  end ;  DurToSeconds = res;  return;end;globalfunction string 255 GetFormatedDate(date td,boolean monthf)begin  record CYBlock CYBl;  string 255 tstr,res;  BlockLoad(CYbl);  GetMonthText(CYbl.LangCode,td,tstr);  if monthf then begin    res = tstr;  end else begin    res = GetYear(td) & ", " & GetDay(td) & ". " & tstr;  end;  GetFormatedDate = res;return;end;globalfunction string 20 GetMainMachine(string machines,var integer pos)BEGIN  Integer cnt;  string 20 res,tstr;  ExtractObj(machines,pos,res);  while (nonblank(res)) begin    if res <> "" then begin      goto LGetMainMachine;    end;    ExtractObj(machines,pos,res);  end;LGetMainMachine:;    GetMainMachine = res;  return;end;globalfunction boolean LastPlanExists(var longint PlanID)begin  record ProdPlanIDVc ProdPlanr;  boolean TrHs;  boolean foundf;  ProdPlanr.PlanDate = CurrentDate;  TrHs = true;  foundf = false;  while loopBackKey("PlanDate",ProdPlanr,1,TrHs) begin    TrHs = false;    PlanID = ProdPlanr.SerNr;    foundf = true;  end;  LastPlanExists = foundf;  return;end;procedure FillRouteArr()begin  record RoutingVc Routingr;  while loopmain(Routingr,1,true) begin    WebOutStringFormatNL("routes['" & Routingr.Code & "'] = '" & Routingr.Comment & "';");  end;  return;end;global webpublic updatingprocedure WebGeneratePlan()begin  record RCVc RepSpec;  record ProdPlanIDVc ProdPlanr;  string 255 sessid;  boolean breakf;  string 255 tstr;  time ct;  ct = CurrentTime;  sessid = DateToString(CurrentDate,"YYYYMMDD") & ct.Hour & ct.Minute & ct.Second;  PutSessionString("prodsessionid",sessid);  ProdPlanr.SerNr = WebGetArg("plan");  if ReadFirstMain(ProdPlanr,1,true) then begin    //recalc    ProdPlanr.RecalcWeeks = WebGetArg("weeks");    RecordUpdate(ProdPlanr,ProdPlanr,true);    UpdateSessionRec(GetSessionString("prodsessionid"),"<br>... initializing ",0,breakf);    NewTimedTask2("GenProdPlan","Generate plan","GenProdPlanRecsTask",sessid & ":" & ProdPlanr.SerNr,CurrentDate,AddSeconds(CurrentTime,1),"","");  end else begin    //newplan    UpdateSessionRec(GetSessionString("prodsessionid"),"<br>... initializing ",0,breakf);    NewTimedTask2("GenProdPlan","Generate plan","GenProdPlanRecsTask",sessid,CurrentDate,AddSeconds(CurrentTime,1),"","");  end;  return;end;global webpublicprocedure WebShowAllPlans()begin  record ProdPlanIDVc ProdPlanr;  longint planid;  if LastPlanExists(planid) then begin end;  WebOutString("<div id=""plan_select"" class=""select_wrapper""><select class=""headselect"" onChange=""return ShowOldPlan(this);"" id=""plansel"">");  WebOutString("<option value="""">" & USetStr(32625) & "</option>");  while loopMain(ProdPlanr,1,true) begin    if planid == ProdPlanr.SerNr then begin      WebOutString("<option value=""" & ProdPlanr.SerNr & """ col0='" & ProdPlanr.Comment & "' selected>" & ProdPlanr.SerNr & "</option>");    end else begin      WebOutString("<option value=""" & ProdPlanr.SerNr & """ col0='" & ProdPlanr.Comment & "'>" & ProdPlanr.SerNr & "</option>");    end;  end;  WebOutString("</select></div>");  return;end;function boolean CheckWeeks(record ProdPlanAccessVc ProdPlanAccr,integer wk)begin  boolean res;  res = true;  switch (wk) begin    case 0: if ProdPlanAccr.ChWeek1Flag == 0 then begin res = false; end;    case 1: if ProdPlanAccr.ChWeek2Flag == 0 then begin res = false; end;    case 2: if ProdPlanAccr.ChWeek3Flag == 0 then begin res = false; end;    case 3: if ProdPlanAccr.ChWeek4Flag == 0 then begin res = false; end;    case 4: if ProdPlanAccr.ChWeek5Flag == 0 then begin res = false; end;    case 5: if ProdPlanAccr.ChWeek6Flag == 0 then begin res = false; end;    case 6: if ProdPlanAccr.ChWeek7Flag == 0 then begin res = false; end;    case 7: if ProdPlanAccr.ChWeek8Flag == 0 then begin res = false; end;    case 8: if ProdPlanAccr.ChWeek9Flag == 0 then begin res = false; end;    case 9: if ProdPlanAccr.ChWeek10Flag == 0 then begin res = false; end;    case 10: if ProdPlanAccr.ChWeek11Flag == 0 then begin res = false; end;    case 11: if ProdPlanAccr.ChWeek12Flag == 0 then begin res = false; end;    case 12: if ProdPlanAccr.ChWeek13Flag == 0 then begin res = false; end;    case 13: if ProdPlanAccr.ChWeek14Flag == 0 then begin res = false; end;    case 14: if ProdPlanAccr.ChWeek15Flag == 0 then begin res = false; end;  end;  CheckWeeks = res;  return;end;function boolean CheckDefaults(record ProdPlanAccessVc ProdPlanAccr,integer wk)begin  boolean res;  res = true;  switch (wk) begin    case 0: if ProdPlanAccr.Default1Flag == 0 then begin res = false; end;    case 1: if ProdPlanAccr.Default2Flag == 0 then begin res = false; end;    case 2: if ProdPlanAccr.Default3Flag == 0 then begin res = false; end;    case 3: if ProdPlanAccr.Default4Flag == 0 then begin res = false; end;    case 4: if ProdPlanAccr.Default5Flag == 0 then begin res = false; end;    case 5: if ProdPlanAccr.Default6Flag == 0 then begin res = false; end;    case 6: if ProdPlanAccr.Default7Flag == 0 then begin res = false; end;    case 7: if ProdPlanAccr.Default8Flag == 0 then begin res = false; end;    case 8: if ProdPlanAccr.Default9Flag == 0 then begin res = false; end;    case 9: if ProdPlanAccr.Default10Flag == 0 then begin res = false; end;    case 10: if ProdPlanAccr.Default11Flag == 0 then begin res = false; end;    case 11: if ProdPlanAccr.Default12Flag == 0 then begin res = false; end;    case 12: if ProdPlanAccr.Default13Flag == 0 then begin res = false; end;    case 13: if ProdPlanAccr.Default14Flag == 0 then begin res = false; end;    case 14: if ProdPlanAccr.Default15Flag == 0 then begin res = false; end;  end;  CheckDefaults = res;  return;end;function boolean UserCanActionPlan(record ProdPlanAccessVc ProdPlanAccr,boolean foundf,integer action,string arg)begin  boolean res;  res = true;  if foundf then begin    switch (action) begin      case 0: //allowed to change weeks;        res = CheckWeeks(ProdPlanAccr,stringToInt(arg));      case 1:        res = CheckDefaults(ProdPlanAccr,stringToInt(arg));      case 2:        if (ProdPlanAccr.NewPlanFlag == 0) then begin res = false; end;      case 3:        if (ProdPlanAccr.RecalcPlanFlag == 0) then begin res = false; end;      case 4:        if (ProdPlanAccr.ChangeOpFlag == 0) then begin res = false; end;      case 5:        if (ProdPlanAccr.ChangeRouteFlag == 0) then begin res = false; end;      case 6:        if (ProdPlanAccr.DeletePlanFlag == 0) then begin res = false; end;    end;  end;  UserCanActionPlan = res;  return;end;procedure FindUserAccess(var record ProdPlanAccessVc ProdPlanAccr,var boolean loginf,var boolean foundf)begin  string 20 user;  boolean TrHs;  loginf = false;  foundf = false;  TrHs = true;  loginf = true;  user = CurrentUser;  if user <> "" then begin    loginf = true;  end;  ProdPlanAccr.UserCode = user;  if ReadFirstMain(ProdPlanAccr,1,true) then begin    if ProdPlanAccr.ClosedFlag == 0 then begin      TrHs = false;      foundf = true;    end;  end;  return;end;function boolean MachineAllowed(string code,record MachineGroupsBlock MachineGroupsBl,record ProdPlanAccessVc ProdPlanAccr)begin  boolean res,foundf;  integer i,rwcnt;  row MachineGroupsBlock MachineGroupsBlrw;  res = false;  if blank(ProdPlanAccr.MGroups) then begin    res = true;  end else begin    rwcnt = MatRowCnt(MachineGroupsBl);    foundf = false;    for (i = 0; i < rwcnt;i = i + 1) begin      MatRowGet(MachineGroupsBl,i,MachineGroupsBlrw);      if setinset(code,MachineGroupsBlrw.DefStr) then begin        if setinset(MachineGroupsBlrw.Code,ProdPlanAccr.MGroups) then begin          res = true;        end;        i = rwcnt;        foundf = true;      end;    end;    if foundf==false then begin      res = true;    end;  end;  MachineAllowed = res;  return;end;procedure BuildProdMachineAr(record MachineGroupsBlock MachineGroupsBl,record ProdPlanAccessVc ProdPlanAccr,array record AT2UnitVc arAT2Unitr,var integer cnt)begin  row MachineGroupsBlock MachineGroupsrw;  record At2UnitVc AT2Unitr;  integer i,rwcnt;  record PrPlanMachinesBlock PlanMachinesBl;  row PrPlanMachinesBlock PlanMachinesBlrw;  /*//  while Loopkey("ProdInventoryNr",AT2Unitr,1,true) begin//jzs-combine  while LoopMain(AT2Unitr,1,true) begin    testf = true;//    if AT2unitr.ProdMachineID<>"" then begin      arAT2Unitr[cnt] = AT2Unitr;      cnt = cnt + 1;//    end;  end;*/  BlockLoad(PlanMachinesBl);  rwcnt = MatRowCnt(PlanMachinesBl);  for (i = 0; i < rwcnt;i = i + 1) begin    MatRowGet(PlanMachinesBl,i,PlanMachinesBlrw);    AT2Unitr.InventoryNr = PlanMachinesBlrw.ATCode;    if MachineAllowed(PlanMachinesBlrw.ATCode,MachineGroupsBl,ProdPlanAccr) then begin      if readfirstmain(AT2Unitr,1,true) then begin        AT2Unitr.Description = PlanMachinesBlrw.ATName;        arAT2Unitr[cnt] = AT2Unitr;        cnt = cnt + 1;      end;    end;  end;  return;end;function string 255 GetEqivMachineList(string atcode)begin  string 255 res;  record ProdMachineEqVc EQPlantsr;  boolean TrHs,testf;  res = "";  EQPlantsr.Code = atcode;  TrHs = true;  while LoopMain(EQPlantsr,1,TrHs) begin    if EQPlantsr.Code <> atcode then begin      TrHs = false;    end else begin      testf = true;      if testf then begin        if res <> "" then begin res = res & ","; end;        res = res & EQPlantsr.ProdEqCode;      end;    end;  end;  ResetLoop(EQPlantsr);  EQPlantsr.ProdEqCode = atcode;  TrHs = true;  while LoopKey("ProdEqCode",EQPlantsr,1,TrHs) begin    if EQPlantsr.ProdEqCode <> atcode then begin      TrHs = false;    end else begin      testf = true;      if SetInset(EQPlantsr.ProdEqCode,res) then begin        testf = false;      end;      if testf then begin        if res <> "" then begin res = res & ","; end;        res = res & EQPlantsr.Code;      end;    end;  end;  GetEqivMachineList = res;  return;end;function string 255 RemoveUnfriendlyChars(string tstr)begin  string 255 res;  integer l,i;  l = len(tstr);  for (i= 0; i < l;i = i + 1) begin    if mid(tstr,i,1)<> "'" then begin      res = res & mid(tstr,i,1);    end;  end;  RemoveUnfriendlyChars = res;  return;end;function string 255 GetATUnitMachineGroups(record MachineGroupsBlock MachineGroupsbl,string atcode)begin  string 255 res;  row MachineGroupsBlock MachineGroupsrw;  integer rw,rwc;  rwc = MatrowCnt(MachineGroupsbl);  res = "";  for (rw = 0; rw < rwc; rw = rw + 1) begin    MatRowGet(MachineGroupsBl,rw,MachineGroupsrw);    if setinset(atcode,MachineGroupsrw.DefStr) then begin      if res <> "" then begin res = res & ","; end;      res = res & MachineGroupsrw.Code;    end;  end;  GetATUnitMachineGroups = res;  return;end;procedure OutputGeneratedCSS()begin  record WebPlanDefBlock WPDbl;  BlockLoad(WPDbl);  if WPDbl.ShowOrigColors == 0 then begin    WebOutString("<style type='text/css'>");    if nonblank(WPDbl.ActiveColor) then begin      WebOutString(".ActionBlockFrame .ActionBlockSelected{ background-color:" & WPDbl.ActiveColor & ";}");    end;    if nonblank(WPDbl.DragColor) then begin      WebOutString(".draghelper .DragIn.changed{ background-color:" & WPDbl.DragColor & ";}");    end;    if nonblank(WPDbl.DateWorkColor) then begin      WebOutString(".HeaderDate .HeaderDateVal{ background-color:" & WPDbl.DateWorkColor & ";}");      WebOutString(".DateWrapLower  .DateValLower { background-color:" & WPDbl.DateWorkColor & ";}");    end;    if nonblank(WPDbl.DateHolColor) then begin      WebOutString(".HeaderDate .HeaderDateVal.Holiday{ background-color:" & WPDbl.DateHolColor & ";}");      WebOutString(".DateWrapLower  .DateValLower.Holiday { background-color:" & WPDbl.DateHolColor & ";}");    end;    if nonblank(WPDbl.MachineIdleColor) then begin      WebOutString(".machineblockline .m_shift.idle{ background-color:" & WPDbl.MachineIdleColor & ";}");    end;    if nonblank(WPDbl.ShiftOutColor) then begin      WebOutString(".machineblockline .m_shift{ background-color:" & WPDbl.ShiftOutColor & ";}");    end;    if nonblank(WPDbl.ShiftOverColor) then begin      WebOutString(".machineblockline .m_shift.changes{ background-color:" & WPDbl.ShiftOverColor & ";}");    end;    if nonblank(WPDbl.ShiftOldColor) then begin      WebOutString(".machineblockline .m_shift.oldshift{ background-color:" & WPDbl.ShiftOldColor & ";}");    end;    WebOutString("</style>");  end;  return;end;function string 10 GetUnitStatus(record AT2UnitVc AT2Unitr)begin  record AT2UnitStatusVc AT2Statusr;  string 10 res;  record PrPlanMachinesBlock PlanMachinesBl;  row PrPlanMachinesBlock PlanMachinesBlrw;  integer i,rwcnt;  BlockLoad(PlanMachinesBl);  res = "";  //jzs-combine  /*  AT2Statusr.Code = AT2Unitr.Status;  if readfirstmain(AT2Statusr,1,true) then begin    res = AT2Statusr.Color;  end;*/  rwcnt = MatRowCnt(PlanMachinesBl);  for (i = 0; i < rwcnt;i = i + 1) begin    MatRowGet(PlanMachinesBl,i,PlanMachinesBlrw);    if (PlanMachinesBlrw.ATCode == AT2Unitr.InventoryNr) then begin      AT2Statusr.Code = PlanMachinesBlrw.Status;      if readfirstmain(AT2Statusr,1,true) then begin        res = AT2Statusr.Color;      end;      i = rwcnt;    end;  end;  GetUnitStatus = res;  return;end;procedure WebOutProdMachineContainer(record MachineGroupsBlock MachineGroupsBl,record AT2UnitVc AT2Unitr,longint vdays)begin  integer j;  WebOutString("var mline = L_createMLine('" & AT2Unitr.InventoryNr & "','" &  GetATUnitMachineGroups(MachineGroupsbl,AT2Unitr.InventoryNr) & "','nowidth,noleft',msheight,cwrapper);" & chr(13));  WebOutString("var mdescr = L_createMdescr('nowidth,noleft,notop',6,(msheight*" & vdays & "),(msheight-6),mline);" & chr(13));  WebOutString("var corr2 = 5;" & chr(13));  WebOutString("if (navigator.appName == ""Microsoft Internet Explorer"") { corr2 = 5;}" & chr(13));  WebOutString("var mlinewrap = L_createMlinewrap('nowidth,noleft,notop',(msheight*" & vdays & "),(msheight-corr2),corr2,mline);");  WebOutString("var corr = 7;" & chr(13));  WebOutString("if (navigator.appName == ""Microsoft Internet Explorer"") { corr = 6;}" & chr(13));  WebOutString("var tmpdiv = document.createElement(""DIV"");" & chr(13));  WebOutString("tmpdiv.className =""desctext"";" & chr(13));  WebOutString("tmpdiv.style.fontWeight = ""normal"";" & chr(13));  WebOutString("tmpdiv.innerHTML = '" & AT2Unitr.InventoryNr  & "," & RemoveUnfriendlyChars(AT2Unitr.Description) & "';" & chr(13));  WebOutString("mdescr.appendChild(tmpdiv);" & chr(13));  WebOutString("var statusbar = document.createElement(""DIV"");" & chr(13));  WebOutString("statusbar.className =""statusbar"";" & chr(13));  WebOutString("AddStatus(statusbar,'" & GetUnitStatus(AT2Unitr) & "');");//pieskiram statusu  WebOutString("mdescr.appendChild(statusbar);" & chr(13));  WebOutString("var efficbar = document.createElement(""DIV"");" & chr(13));  WebOutString("efficbar.className =""efficbar"";" & chr(13));  WebOutString("mdescr.appendChild(efficbar);" & chr(13));  WebOutString("var effic = document.createElement(""DIV"");" & chr(13));  WebOutString("effic.className =""effic"";" & chr(13));  WebOutString("effic.id =""effic_" & AT2Unitr.InventoryNr & """;" & chr(13));  WebOutString("efficbar.appendChild(effic);" & chr(13));  WebOutString("effic.style.left = GetPositionForStatus('80',effic,efficbar) + 'px';");  if GetMachinePic(AT2Unitr.InventoryNr)<>"" then begin    WebOutString("var imgdiv = L_createImgdiv('" & GetMachinePic(AT2Unitr.InventoryNr) & "',(msheight - corr2 - 60),(msheight*" & vdays & "),(60+corr2),160,'nowidth,notop',mdescr);" & chr(13));  end;  WebOutString("var buttons = L_createMachineButtons('" & UsetStr(32680) & "','" & Usetstr(32681) & "','" & UsetStr(32682) & "','" & AT2Unitr.Description & "','" & AT2Unitr.InventoryNr & "',mdescr);");  WebOutString("var timet = L_createTimet('nowidth,noleft',(msheight-corr),(msheight*" & vdays & "),corr,mline);");  for (j = 0;j <= 24; j = j + 1) begin    WebOutString("var timer = L_createTimer('nowidth,noleft',(" & j & "*((msheight-corr)/24))," & j & ",'nowidth,noleft',timet);");  end;  return;end;procedure WebOutScriptsHeader(integer vdays,integer hdays,var string host)begin  record WebPlanDefBlock ProdPlanSetBl;  string 20 ver;  BlockLoad(ProdPlanSetBl);  host = ProdPlanSetBl.WCHost;  ver = ProdPlanSetBl.WebFileVer;  WebOutString(" <!--[if IE]><link rel=""stylesheet"" type=""text/css"" href=""" & host & "/planning/Vertical/testsverticalIE.css"" ><![endif]-->" & chr(13));  WebOutString("  <link rel=""stylesheet"" type=""text/css"" href=""" & host & "/planning/Tools/SelectField.css?ver=" & ver & """ >" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/getElementsByClassName.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/Selection.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Vertical/NG.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/SelectField.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/SliderTool.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/FillTool.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/SavePlan.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/ShowDone.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/scroll.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/RightMenu.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/MachineDrop.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Vertical/PutActions.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/Settings.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/Mask.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/sessionTools.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <link type=""text/css"" rel=""stylesheet"" href=""" & host & "/planning/Vertical/testsvertical.css?ver=" & ver & """>" & chr(13)); //calendar  WebOutString("  <script type=""text/javascript"" src=""" & host & "/planning/Tools/Calendar/cal.js?ver=" & ver & """></script>" & chr(13));  WebOutString("  <link type=""text/css"" rel=""stylesheet"" href=""" & host & "/planning/Tools/Calendar/cal.css?ver=" & ver & """>" & chr(13));  WebOutString("  <!--[if IE 7]>" & chr(13));  WebOutString("  <script type=""text/javascript"">ie7 = true;ie7fix.x = 10;ie7fix.y = 14;</script>" & chr(13));  WebOutString("  <![endif]-->" & chr(13));  OutputGeneratedCSS;  WebOutString("  <script type=""text/javascript"">" & chr(13));  WebOutString("function drawfullpage(){" & chr(13));  WebOutString("var mheight = (TH*" & vdays & ")-20; " & chr(13));  WebOutString("var msheight = (mheight/" & vdays & ");" & chr(13));  WebOutString("var mwidth = TW*" & hdays & ";" & chr(13));  WebOutString("var dateval = mheight;" & chr(13));  WebOutString("var headf = document.createElement(""DIV"");" & chr(13));  WebOutString("headf.setAttribute(""id"",""Headerframe"");" & chr(13));  WebOutString("headf.style.width = (mwidth+194)+'px';" & chr(13));  WebOutString("document.body.appendChild(headf);" & chr(13));  WebOutString("var todayb = document.createElement(""DIV"");" & chr(13));  WebOutString("todayb.setAttribute(""id"",""tdbutton"");" & chr(13));  WebOutString("todayb.innerHTML = '<a href=""#"" onClick=""setPositionForCalendar()""><img src=""" & host & "/planning/home.png""></a>';" & chr(13));  WebOutString("document.getElementById(""nav"").appendChild(todayb);" & chr(13));  WebOutString("var scrollborder2 = document.createElement(""DIV"");" & chr(13));  WebOutString("scrollborder2.className = ""scrollbordersmall"";" & chr(13));  WebOutString("headf.appendChild(scrollborder2);" & chr(13));   WebOutString("var scrollborder4 = document.createElement(""DIV"");" & chr(13));  WebOutString("scrollborder4.className = ""scrollbordersmallright"";" & chr(13));  WebOutString("headf.appendChild(scrollborder4);" & chr(13));  WebOutString("var scrollborderright = document.createElement(""DIV"");" & chr(13));  WebOutString("scrollborderright.className = ""scrollbordersmallright"";" & chr(13));  WebOutString("var scrollborder3 = document.createElement(""DIV"");" & chr(13));  WebOutString("scrollborder3.className = ""scrollborderhor"";" & chr(13));  WebOutString("scrollborder3.style.width = ((TW*" & hdays & ")-16)+'px';" & chr(13));  WebOutString("headf.appendChild(scrollborder3);" & chr(13));  WebOutString("var head = document.createElement(""DIV"");" & chr(13));  WebOutString("head.className = ""Header"";" & chr(13));  WebOutString("head.setAttribute(""id"",""HeadInner"");" & chr(13));  WebOutString("head.style.width = (mwidth-16)+'px';" & chr(13));  WebOutString("headf.appendChild(head);" & chr(13));  WebOutString("var sett_butt = document.createElement(""DIV"");" & chr(13));  WebOutString("sett_butt.id='settings_button'; sett_butt.href='#';sett_butt.onclick= function(ev){ShowWindowSettingsWindow(ev)};sett_butt.innerHTML ='" & USetStr(32670) & "';" & chr(13));  WebOutString("document.body.appendChild(sett_butt);" & chr(13));  WebOutString("var sett_win = document.createElement(""DIV"");" & chr(13));  WebOutString("sett_win.id='settings_window'; sett_win.className = 'settings_window';" & chr(13));  WebOutString("var radio = '<div class=\"radio_frame\">';" & chr(13));  WebOutString("radio += '<div class=\"radio_label\">' + '" & UsetStr(32666) & "' + '</div>';" & chr(13));  WebOutString("radio += '<div class=\"radio_row\"><input type=\"radio\" name=\"optype\" value=\"0\" onclick=\"win_sett.UpdateWindowSettings(this)\" checked>' + '" & UsetStr(32667) & "</div>';" & chr(13));  WebOutString("radio += '<div class=\"radio_row\"><input type=\"radio\" name=\"optype\" value=\"1\" onclick=\"win_sett.UpdateWindowSettings(this)\" >' + '" & UsetStr(32668) & "</div>';" & chr(13));  WebOutString("radio += '<div class=\"radio_row\"><input type=\"radio\" name=\"optype\" value=\"2\" onclick=\"win_sett.UpdateWindowSettings(this)\" >' + '" & UsetStr(32669) & "</div>';" & chr(13));  WebOutString("radio += '</div>';" & chr(13));  WebOutString("sett_win.innerHTML = radio;" & chr(13));  WebOutString("document.body.appendChild(sett_win);" & chr(13));  WebOutString("var mainc = document.createElement(""DIV"");" & chr(13));  WebOutString("mainc.setAttribute(""id"",""maincontainer"");" & chr(13));  WebOutString("mainc.style.height=(mheight)+'px';" & chr(13));  WebOutString("document.body.appendChild(mainc);" & chr(13));  WebOutString("var cwrapper = document.createElement(""DIV"");" & chr(13));  WebOutString("cwrapper.setAttribute(""id"",""containerwrapper"");" & chr(13));  WebOutString("mainc.appendChild(cwrapper);" & chr(13));  return;end;procedure WebOutDayWrapper(record WebPlanDefBlock WPDbl,record ProdPlanAccessVc ProdPlanAccr,var longint dd,var longint daypos)begin  date etd,td;  integer i,wkcnt,spos,curpos;  longint maxweeknr;  string 20 even;  boolean foundf;  boolean firstf;  td = CurrentDate;  etd = AddMonth(td,WPDbl.ViewMonths);  etd.Day = 1;  etd = AddDay(etd,-1);  td.Day = 1;  td = AddMonth(td,-1);  dd = DateDiff(etd,td);  i = 0;  wkcnt = 0;  spos = 0;  firstf = true;  while td <= etd begin    if td == CurrentDate then begin      curpos = i;      WebOutString("var curpos = (" & curpos & "*TW);" & chr(13));    end;    if GetDateId(td) == 7 then begin       if spos <>0 then begin        WebOutString("headwv.innerHTML +='<div class=""monthend""></div>';" & chr(13));      end;      spos = i;    end else begin      if GetDateId(td) == 1 or firstf then begin        WebOutString("var headwv = document.createElement(""DIV"");" & chr(13));        WebOutString("headwv.className = ""HeaderWeekVal sizeable"";" & chr(13));        WebOutString("headwv.setAttribute(""rules"",""notop,noheight"");" & chr(13));        if spos == 0 then begin          WebOutString("headwv.style.width = (" & (i-spos+1) & "*TW)+1+'px';" & chr(13));          WebOutString("headwv.style.left = (" & (spos) & "*TW)+'px';" & chr(13));        end else begin          WebOutString("headwv.style.width = (" & (i-spos) & "*TW)+1+'px';" & chr(13));          WebOutString("headwv.style.left = (" & (spos+1) & "*TW)+'px';" & chr(13));        end;        firstf = false;        if td >= CurrentDate then begin          if wkcnt <15 begin            if (UserCanActionPlan(ProdPlanAccr,foundf,0,wkcnt)==false) then begin              WebOutString("weeksaccess.push(0);");            end else begin              WebOutString("weeksaccess.push(1);");            end;            if (UserCanActionPlan(ProdPlanAccr,foundf,1,wkcnt)) then begin              WebOutString("weeksdefaults.push(1);");            end else begin              WebOutString("weeksdefaults.push(0);");            end;            WebOutString("weeks.push(" & GetWeekNr(td,"",maxweeknr) & ");");          end;          wkcnt = wkcnt + 1;        end;        WebOutString("headwv.innerHTML = '<div class=""val_wrap""><div class=""week_num"">" & GetWeekNr(td,"",maxweeknr) & ".</div> " & Lowercase(USetStr(31020)) & "</div>';" & chr(13));        WebOutString("headw.appendChild(headwv);" & chr(13));      end;      if td == CurrentDate and wkcnt == 0 then begin        if (UserCanActionPlan(ProdPlanAccr,foundf,0,wkcnt)==false) then begin          WebOutString("weeksaccess.push(0);");        end else begin          WebOutString("weeksaccess.push(1);");        end;        if (UserCanActionPlan(ProdPlanAccr,foundf,1,wkcnt)) then begin          WebOutString("weeksdefaults.push(1);");        end else begin          WebOutString("weeksdefaults.push(0);");        end;        WebOutString("weeks.push(" & GetWeekNr(td,"",maxweeknr) & ");");        wkcnt = wkcnt + 1;      end;    end;    WebOutString("var headd = document.createElement(""DIV"");" & chr(13));    WebOutString("headd.className = ""HeaderDate sizeable"";" & chr(13));    WebOutString("headd.setAttribute(""rules"",""notop,noheight"");" & chr(13));    WebOutString("headd.style.left = (" & i & "*TW)+'px';" & chr(13));    WebOutString("head.appendChild(headd);" & chr(13));    WebOutString("var headd2 = document.createElement(""DIV"");" & chr(13));    WebOutString("headd2.className = ""DateWrapLower sizeable"";" & chr(13));    WebOutString("headd2.setAttribute(""rules"",""notop,sort,noheight"");" & chr(13));    WebOutString("headd2.style.left = (" & i & "*TW)+'px';" & chr(13));    WebOutString("headd2.style.height = dateval + 'px';" & chr(13));    WebOutString("head2.appendChild(headd2);" & chr(13));    if (mod(i,2) == 0) then begin      even = " even";    end else begin      even = "";    end;    WebOutString("var headdv = document.createElement(""DIV"");" & chr(13));    WebOutString("headdv.setAttribute(""rules"",""notop,noheight"");" & chr(13));    WebOutString("headdv.style.width=TW+ 'px';" & chr(13));    WebOutString("var headdv2 = document.createElement(""DIV"");" & chr(13));    WebOutString("headdv2.setAttribute(""rules"",""notop,sort,noheight"");" & chr(13));    WebOutString("headdv2.style.width=TW+ 'px';" & chr(13));    WebOutString("headdv2.style.height=dateval+ 'px';" & chr(13));    if DateIsRedDay(CalendarSystem,td) != 0 then begin      WebOutString("headdv.className = ""HeaderDateVal Holiday sizeable" & even & """" & chr(13));      WebOutString("headdv2.className = ""DateValLower Holiday sizeable" & even & """" & chr(13));    end else begin      WebOutString("headdv.className = ""HeaderDateVal sizeable" & even & """" & chr(13));      WebOutString("headdv2.className = ""DateValLower sizeable" & even & """" & chr(13));    end;    WebOutString("headdv.innerHTML = '<div class=""date_wrap""><div class=""date_num"">" & td.Day & "</div><div class=""date_text"">" & USetStr(32640+(GetDateId(td))) & "</div></div>';" & chr(13));    WebOutString("headd.appendChild(headdv);" & chr(13));    WebOutString("headd2.appendChild(headdv2);" & chr(13));    if i <> 0 then begin      WebOutString("var headde = document.createElement(""DIV"");" & chr(13));      WebOutString("var headde2 = document.createElement(""DIV"");" & chr(13));      if td == CurrentDate then begin        WebOutString("headde.className = ""DayEnd td""" & chr(13));        WebOutString("headde2.className = ""DayEnd td""" & chr(13));      end else begin        WebOutString("headde.className = ""DayEnd""" & chr(13));        WebOutString("headde2.className = ""DayEnd""" & chr(13));      end;      WebOutString("headde2.style.height=dateval + 'px';" & chr(13));      WebOutString("headd2.appendChild(headde2);" & chr(13));      WebOutString("headd.appendChild(headde);" & chr(13));    end;    td = AddDay(td,1);    i = i + 1;  end;  if GetDateId(addDay(td,-1)) <> 7 then begin    WebOutString("headwv.innerHTML +='<div class=""monthend""></div>';" & chr(13));  end;  WebOutString("headw.style.width =  (totwidth)+'px';" & chr(13));  WebOutString("headm.style.width = (totwidth)+'px';" & chr(13));  WebOutString("head2.style.width = (totwidth)+'px';" & chr(13));  daypos = curpos;  return;end;procedure WebOutProdMachineScripts(record MachineGroupsBlock MachineGroupsBl,record At2UnitVc AT2Unitr,integer vdays,integer hdays,longint dd)begin  string 255 altmachines;  altmachines = GetEqivMachineList(AT2Unitr.InventoryNr);  WebOutString("var machinebl2 = L_createMachinebl(null,'" & GetATUnitMachineGroups(MachineGroupsBl,AT2Unitr.InventoryNr) & "',(msheight),(curpos),machineb2,'hist_wrap" & AT2Unitr.InventoryNr & "');" & chr(13));  WebOutString("var machineblm2 = L_createMachineblm((msheight-corr2),(msheight*" & vdays & "),corr2,(curpos),machinebl2,'hist" & AT2Unitr.InventoryNr & "');" & chr(13));  WebOutString("var spacer2 = document.createElement(""DIV"");" & chr(13));  WebOutString("spacer2.className = ""freespace sizeable "";" & chr(13));  WebOutString("spacer2.setAttribute(""rules"",""noheight,notop"");" & chr(13));  WebOutString("machinebl2.appendChild(spacer2);" & chr(13));  WebOutString("var machinebl = L_createMachinebl('" & AT2Unitr.InventoryNr & "','" & GetATUnitMachineGroups(MachineGroupsBl,AT2Unitr.InventoryNr) & "',(msheight),((TW*" & (dd+1) & ")-(curpos)),machineb);" & chr(13));  WebOutString("var machineblm = L_createMachineblm((msheight-corr2),(msheight*" & vdays & "),corr2,((TW*" & (dd+1) & ")-6-(curpos)),machinebl,'" & AT2Unitr.InventoryNr & "','" & altmachines &  "','" & AT2Unitr.InventoryNr & "');" & chr(13));  WebOutString("var machinebld = document.createElement(""DIV"");" & chr(13));  WebOutString("machinebld.setAttribute(""machinecode"",""" & AT2Unitr.InventoryNr & """);" & chr(13));  WebOutString("machinebld.style.height = (msheight-6)+'px';" & chr(13));  WebOutString("machinebld.style.width = ((TW*" & (dd+1) & ")-6-(curpos)) + 'px';" & chr(13));  WebOutString("machinebld.className = ""MachineDeselected  sizeable""" & chr(13));  WebOutString("machinebld.setAttribute(""origheight"",(msheight*" & hdays & "));" & chr(13));  WebOutString("machinebld.setAttribute(""substractheight"",6);" & chr(13));  WebOutString("machinebld.setAttribute(""rules"",""notop"");" & chr(13));  WebOutString("machinebl.appendChild(machinebld);" & chr(13));  WebOutString("var spacer = document.createElement(""DIV"");" & chr(13));  WebOutString("spacer.className = ""freespace sizeable "";" & chr(13));  WebOutString("spacer.setAttribute(""rules"",""noheight,notop"");" & chr(13));  WebOutString("machinebl.appendChild(spacer);" & chr(13));  return;end;procedure ShowFilterWindow(array record AT2UnitVc arAT2Unitr,integer mcnt)begin  record LocationVc Locr;  record StdOperationVc StdOpr;  record CalDispGroupBlock CDGbl;  row CalDispGroupBlock CDGblrw;  integer i,rwcnt;  record UserVc Userr;  record AT2UnitVc AT2Unitr;  WebOutString("<div id='filter_window' class='filter_window'>");  WebOutString("<table>");  WebOutString("<tr><td>" & USetStr(32605) & "</td><td><div class=""select_wrapper"" id=""machine_select"">");  WebOutString("<select class=""headselect"" name=""machinesel"" id=""locselect"" onChange=""D_SelectNG(this,'machine','machine_inactive','select_machine_hidden');"">");  WebOutString("<option value=""-1"" >" & USetStr(32624) & "</option>" & chr(13));  for (i = 0; i < mcnt; i = i + 1) begin    AT2Unitr = arAT2Unitr[i];    WebOutString("<option value=""" & AT2Unitr.InventoryNr & """ >" & AT2Unitr.Description & "</option>" & chr(13));  end;  WebOutString("</select></div></td></tr>" & chr(13));  WebOutString("<tr><td>" & USetStr(32674) & "</td><td><div class=""select_wrapper"" id=""loc_select"">");  WebOutString("<select class=""headselect"" name=""locsel"" id=""locselect"" onChange=""D_SelectNG(this,'Location','loc_inactive','select_loc_hidden');FilterProdSelectBox(this);"">");  WebOutString("<option value=""-1"" >" & USetStr(32624) & "</option>" & chr(13));  while loopmain(Locr,1,true) begin    WebOutString("<option value=""" & Locr.Code & """ >" & Locr.Name & "</option>" & chr(13));  end;  WebOutString("</select></div></td></tr>" & chr(13));  WebOutString("<tr><td>" & USetStr(32675) & "</td><td><div class=""select_wrapper"" id=""stdop_select"">");  WebOutString("<select class=""headselect"" name=""stdopsel"" id=""stdopselect"" onChange=""D_SelectNG(this,'StdOper','stdop_inactive','select_stdop_hidden');"">");  WebOutString("<option value=""-1"" >" & USetStr(32624) & "</option>" & chr(13));  while loopmain(StdOpr,1,true) begin    WebOutString("<option value=""" & StdOpr.Code & """ >" & StdOpr.Comment & "</option>" & chr(13));  end;  WebOutString("</select></div></td></tr>" & chr(13));  WebOutString("<tr><td>" & USetStr(32676) & "</td><td><div class=""select_wrapper"" id=""stdop_select"">");  WebOutString("<select class=""headselect"" name=""stdopsel"" id=""personselect"" onChange=""D_SelectNG(this,'Person','person_inactive','select_person_hidden');"">");  WebOutString("<option value=""-1"" >" & USetStr(32624) & "</option>" & chr(13));  while loopmain(Userr,1,true) begin    WebOutString("<option value=""" & Userr.Code & """ >" & Userr.Name & "</option>" & chr(13));  end;  WebOutString("</select></div></td></tr>" & chr(13));  WebOutString("<tr><td>" & USetStr(32677) & "</td><td><div class=""select_wrapper"" id=""stdop_select"">");  WebOutString("<select class=""headselect"" name=""stdopsel"" id=""cgroupselect"" onChange=""D_SelectNG(this,'CGroup','cgroup_inactive','select_cgroup_hidden');"">");  WebOutString("<option value=""-1"" >" & USetStr(32624) & "</option>" & chr(13));  BlockLoad(CDGbl);  rwcnt = MatRowCnt(CDGbl);  for (i = 0; i < rwcnt; i = i + 1) begin    MatRowGet(CDGbl,i,CDGblrw);    WebOutString("<option value=""" & CDGblrw.Code & """ >" & CDGblrw.Comment & "</option>" & chr(13));  end;  WebOutString("</select></div></td></tr>" & chr(13));  WebOutString("<tr><td>" & USetStr(32700) & "</td><td><div class=""select_wrapper"" id=""outit_select""><form onsubmit=""D_FindNG(this,'OuterItem','outitem_inactive','select_outitem_hidden');return false;"">");  WebOutString("<input type='text' class='filter_input' value='' name='sf' onblur=""D_FindNG(this.parentNode,'OuterItem','outitem_inactive','select_outitem_hidden');return false;""></form>");  WebOutString("</div></td></tr>" & chr(13));  WebOutString("<tr><td>" & USetStr(32701) & "</td><td><div class=""select_wrapper"" id=""prodop_select""><form onsubmit=""D_FindNG(this,'num','prodop_inactive','select_prodop_hidden');return false;"">");  WebOutString("<input type='text' class='filter_input' onblur=""D_FindNG(this.parentNode,'num','prodop_inactive','select_prodop_hidden');return false;"" value='' name='sf'></form>");  WebOutString("</div></td></tr>" & chr(13));  WebOutString("</table>");  WebOutString("</div>");  return;end;function string 255 ExportCalSettings()begin  record SysFormatBlock SFbl;  string 255 res;  integer type;  BlockLoad(SFbl);  if SFbl.dateOrder == 0 then begin    type = 1;  end else begin    if SFbl.dateOrder == 1 then begin      type = 0;    end;  end;  res = "{headtype:'" & UsetStr(32706) & "',t_type:" & type & ",seperator:'" & SFbl.dateSep & "',days:['" & UsetStr(2201) & "','" & UsetStr(2202) & "','" & UsetStr(2203) & "','" & UsetStr(2204) & "','" & UsetStr(2205) & "','" & UsetStr(2206) & "','" & UsetStr(2207) & "']}";  ExportCalSettings = res;  return;end;function string 255 ExportCalMonths()begin  string 255 res;  res = "['" & UsetStr(2781) & "','" & UsetStr(2782) & "','" & UsetStr(2783) & "','" & UsetStr(2784) & "','" & UsetStr(2785) & "','" & UsetStr(2786) & "','" & UsetStr(2787) & "','" & UsetStr(2788) & "','" & UsetStr(2789) & "','" & UsetStr(2790) & "','" & UsetStr(2791) & "','" & UsetStr(2792) & "']";  ExportCalMonths = res;  return;end;procedure OutputProdPlanLabels()begin  WebOutString("labels[0] = '" & USetStr(32610) & "';" & chr(13));  WebOutString("labels[1] = '" & USetStr(32611) & "';" & chr(13));  WebOutString("labels[2] = '" & USetStr(32612) & "';" & chr(13));  WebOutString("labels[3] = '" & USetStr(32613) & "';" & chr(13));  WebOutString("labels[4] = '" & USetStr(32614) & "';" & chr(13));  WebOutString("labels[5] = '" & USetStr(32615) & "';" & chr(13));  WebOutString("labels[6] = '" & USetStr(32616) & "';" & chr(13));  WebOutString("labels[7] = '" & USetStr(32617) & "';" & chr(13));  WebOutString("labels[8] = '" & USetStr(32618) & "';" & chr(13));  WebOutString("labels[9] = '" & USetStr(32619) & "';" & chr(13));  WebOutString("labels[10] = '" & USetStr(32629) & "';" & chr(13));  WebOutString("labels[11] = '" & USetStr(32630) & "';" & chr(13));  WebOutString("labels[12] = '" & USetStr(32631) & "';" & chr(13));  WebOutString("labels[13] = '" & USetStr(32632) & "';" & chr(13));  WebOutString("labels[14] = '" & USetStr(32633) & "';" & chr(13));  WebOutString("labels[15] = '" & USetStr(32634) & "';" & chr(13));  WebOutString("labels[16] = '" & USetStr(32635) & "';" & chr(13));  WebOutString("labels[17] = '" & USetStr(32636) & "';" & chr(13));  WebOutString("labels[18] = '" & USetStr(32637) & "';" & chr(13));  WebOutString("labels[19] = '" & USetStr(32638) & "';" & chr(13));  WebOutString("labels[20] = '" & USetStr(32649) & "';" & chr(13));  WebOutString("labels[21] = '" & USetStr(32650) & "';" & chr(13));  WebOutString("labels[22] = '" & USetStr(32651) & "';" & chr(13));  WebOutString("labels[23] = '" & USetStr(32609) & "';" & chr(13));  WebOutString("labels[24] = '" & USetStr(32653) & "';" & chr(13));  WebOutString("labels['Constr'] = '" & USetStr(32710) & "';" & chr(13));  WebOutString("labels['Name'] = '" & USetStr(12164) & "';" & chr(13));  WebOutString("labels['RouteVersion'] = '" & USetStr(32713) & "';" & chr(13));  WebOutString("labels['RouteRevision'] = '" & USetStr(32714) & "';" & chr(13));  WebOutString("labels['RecVersion'] = '" & USetStr(32715) & "';" & chr(13));  WebOutString("labels['RecRevision'] = '" & USetStr(32716) & "';" & chr(13));  WebOutString("labels['Qty'] = '" & USetStr(32660) & "';" & chr(13));  WebOutString("labels['Divide_Qty'] = '" & USetStr(32661) & "';" & chr(13));  WebOutString("labels['OrderDateExp'] = '" & USetStr(32662) & "';" & chr(13));  WebOutString("labels['KK'] = '" & USetStr(32663) & "';" & chr(13));  WebOutString("labels['RN'] = '" & USetStr(32664) & "';" & chr(13));  WebOutString("labels['RD'] = '" & USetStr(32665) & "';" & chr(13));  WebOutString("labels['ShowOP'] = '" & USetStr(32666) & "';" & chr(13));  WebOutString("labels['ShowOPAll'] = '" & USetStr(32667) & "';" & chr(13));  WebOutString("labels['ShowOPFull'] = '" & USetStr(32668) & "';" & chr(13));  WebOutString("labels['ShowOPEmpty'] = '" & USetStr(32669) & "';" & chr(13));  WebOutString("labels['RouteCode'] = '" & USetStr(32671) & "';" & chr(13));  WebOutString("labels['Time'] = '" & USetStr(5100) & "';" & chr(13));  WebOutString("labels['Instructions'] = '" & USetStr(32672) & "';" & chr(13));  WebOutString("labels['StdOper'] = '" & USetStr(32675) & "';" & chr(13));  WebOutString("labels['RouteVerRev'] = '" & USetStr(32678) & "';" & chr(13));  WebOutString("labels['RecVerRev'] = '" & USetStr(32679) & "';" & chr(13));  WebOutString("labels['Save'] = '" & USetStr(1681) & "';" & chr(13));  WebOutString("labels['Cancel'] = '" & USetStr(1687) & "';" & chr(13));  WebOutString("labels['StartDate'] = '" & USetStr(11751) & "';" & chr(13));  WebOutString("labels['EndDate'] = '" & USetStr(11752) & "';" & chr(13));  WebOutString("labels['StartTime'] = '" & USetStr(11086) & "';" & chr(13));  WebOutString("labels['EndTime'] = '" & USetStr(11087) & "';" & chr(13));  WebOutString("labels['FillData'] = '" & USetStr(32683) & "';" & chr(13));  WebOutString("labels['ShiftAct'] = '" & USetStr(32684) & "';" & chr(13));  WebOutString("labels['ShiftChange'] = '" & USetStr(32685) & "';" & chr(13));  WebOutString("labels['WrongDates'] = '" & USetStr(32702) & "';" & chr(13));  WebOutString("labels['WrongTimes'] = '" & USetStr(32703) & "';" & chr(13));  WebOutString("labels['MonStart'] = '" & USetStr(32690) & "';" & chr(13));  WebOutString("labels['TueStart'] = '" & USetStr(32691) & "';" & chr(13));  WebOutString("labels['WedStart'] = '" & USetStr(32692) & "';" & chr(13));  WebOutString("labels['ThuStart'] = '" & USetStr(32693) & "';" & chr(13));  WebOutString("labels['FriStart'] = '" & USetStr(32694) & "';" & chr(13));  WebOutString("labels['SatStart'] = '" & USetStr(32695) & "';" & chr(13));  WebOutString("labels['SunStart'] = '" & USetStr(32696) & "';" & chr(13));  WebOutString("labels['End'] = '" & USetStr(32697) & "';" & chr(13));  WebOutString("labels['Status'] = '" & USetStr(16453) & "';" & chr(13));  WebOutString("labels['Seq'] = '" & USetStr(16432) & "';" & chr(13));  WebOutString("labels['Eff_coef'] = '" & USetStr(32704) & "';" & chr(13));  WebOutString("labels['Opt_qty'] = '" & USetStr(32705) & "';" & chr(13));  WebOutString("labels['_DateOptions'] = " & ExportCalSettings & ";");  WebOutString("labels['_DateMonths'] =  " & ExportCalMonths & ";");  WebOutString("labels['InItems'] =  '" & UsetStr(32707) & "';");  WebOutString("labels['Tools'] =  '" & UsetStr(32708) & "';");  WebOutString("labels['Info'] =  '" & UsetStr(32709) & "';");  WebOutString("labels['Code'] =  '" & UsetStr(6301) & "';");  WebOutString("labels['Split'] =  '" & UsetStr(32729) & "';");  WebOutString("labels['Undo_Move'] =  '" & UsetStr(32731) & "';");  WebOutString("labels['Undo_Split'] =  '" & UsetStr(32730) & "';");  WebOutString("labels['Freeze'] =  '" & UsetStr(32733) & "';");  WebOutString("labels['Undo_Freeze'] =  '" & UsetStr(32734) & "';");  WebOutString("labels['Edit'] =  '" & UsetStr(32728) & "';");  WebOutString("labels['Routing'] =  '" & UsetStr(32606) & "';");  WebOutString("labels['Rec'] =  '" & UsetStr(32608) & "';");  WebOutString("labels['Alternative'] =  '" & UsetStr(34442) & "';");  WebOutString("labels['Debug'] =  '" & UsetStr(34442) & "';");//kzs 2012.12.19. need to add label for debug tile button  return;end;procedure WebHWLPlanProdMan()begin  array record AT2UnitVc arAT2Unitr;  record AT2UnitVc AT2Unitr;  record MachineGroupsBlock MachineGroupsbl;  record WebPlanDefBlock WPDbl;  record TempProdPlanVc Tempr;  row MachineGroupsBlock MachineGroupsrw;  string 255 mainc,tstr,altmachines,sessid;  integer whours,machinecnt;  boolean darkf,testf;  integer rw,rwc,pos,i,j,spos;  boolean Trhs,breakf;  longint dpos;  longint dur;  time ct;  date td,etd;  val effectcoef;  string 10 even;  integer vdays,hdays,wkcnt;  longint planid,curpos;  longint offpos,tmppos,mdiff,dd,maxweeknr,totwidth;  record ProdPlanAccessVc ProdPlanAccr;  boolean loginf,foundf;  integer tmpcnt;  string 100 host;  RecordNew(ProdPlanAccr);  FindUserAccess(ProdPlanAccr,loginf,foundf);  if foundf then begin    whours = 24;    td = CurrentDate;    BlockLoad(MachineGroupsbl);    BlockLoad(WPDbl);    vdays = WPDbl.WindowMachines;    hdays = WPDbl.WindowDays;    ct = CurrentTime;    sessid = DateToString(CurrentDate,"YYYYMMDD") & ct.Hour & ct.Minute & ct.Second;    PutSessionString("prodsessionid",sessid);    PutSessionString("plan","");    WebOutString("<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01//EN"" ""http://www.w3.org/TR/html4/strict.dtd"">");    WebOutString("<html>" & chr(13));    WebOutString("<head><title>" & UsetStr(32607) & "</title>" & chr(13));    BuildProdMachineAr(MachineGroupsbl,ProdPlanAccr,arAT2Unitr,machinecnt);    WebOutScriptsHeader(vdays,hdays,host);    for (rw = 0; rw <machinecnt; rw = rw + 1) begin      AT2Unitr = arAT2Unitr[rw];      Tempr.SessionID = sessid;      Tempr.MachineID = AT2Unitr.InventoryNr;      WebOutProdMachineContainer(MachineGroupsbl,AT2Unitr,vdays);    end;    WebOutString("var scrolldiv = document.createElement(""DIV"");" & chr(13));    WebOutString("scrolldiv.style.height=((TH*" & vdays & "))+'px';" & chr(13));    WebOutString("scrolldiv.style.width=((TW*" & hdays & "))+'px';" & chr(13));    WebOutString("scrolldiv.onscroll = function(){scrollother(this)};" & chr(13));    WebOutString("scrolldiv.setAttribute(""id"",""scrolldiv"");" & chr(13));    WebOutString("document.body.appendChild(scrolldiv);" & chr(13));    WebOutString("var headm = document.createElement(""DIV"");" & chr(13));    WebOutString("headm.className = ""HeaderMonth sizeable"";" & chr(13));    WebOutString("headm.setAttribute(""rules"",""noheight"");" & chr(13));    td = CurrentDate;    td.Day = 1;    td = AddMonth(td,-1);    WebOutString("head.appendChild(headm);" & chr(13));    mdiff = DaysInMonth(td.Year,td.Month);    for (i = 0; i <= WPDbl.ViewMonths ; i = i + 1) begin      totwidth = totwidth + mdiff;      WebOutString("var headmv = document.createElement(""DIV"");" & chr(13));      WebOutString("headmv.className = ""HeaderMonthVal sizeable"";" & chr(13));      WebOutString("headmv.setAttribute(""rules"",""noheight"");" & chr(13));      WebOutString("headmv.style.width = (" & (mdiff) & "*TW) +'px';" & chr(13));      WebOutString("headm.appendChild(headmv);" & chr(13));      WebOutString("headmv.innerHTML = '");      WebOutString("<div class=""val_wrap"">" & GetFormatedDate(td,true) & "</div>");      if WPDbl.ViewMonths<30 then begin        WebOutString("<div class=""val_wrap middle"">" & GetFormatedDate(td,true) & "</div>");        WebOutString("<div class=""val_wrap right"">" & GetFormatedDate(td,true) & "</div>");      end;      if i <> 0 then begin        WebOutString("<div class=""monthend""></div>");      end;      WebOutString("';" & chr(13));      td = AddMonth(td,1);      mdiff = DaysInMonth(td.Year,td.Month);    end;    WebOutString("var totwidth = TW* " & (totwidth+1) & "+1;" & chr(13));    WebOutString("var headw = document.createElement(""DIV"");" & chr(13));    WebOutString("headw.className = ""HeaderDateWeek sizeable"";" & chr(13));    WebOutString("headw.setAttribute(""rules"",""notop,noheight"");" & chr(13));    WebOutString("head.appendChild(headw);" & chr(13));    WebOutString("var head2 = document.createElement(""DIV"");" & chr(13));    WebOutString("head2.setAttribute(""id"",""DateLower"");" & chr(13));    WebOutString("head2.className =  ""sizeable"";" & chr(13));    WebOutString("head2.style.height = (dateval)+'px';" & chr(13));    WebOutString("head2.setAttribute(""rules"",""notop,noheight"");" & chr(13));    WebOutString("var scrollbord = document.createElement(""DIV"");" & chr(13));    WebOutString("scrollbord.className = ""scrollbord"";" & chr(13));    WebOutString("scrollbord.style.height = dateval +'px';" & chr(13));    WebOutString("mainc.appendChild(scrollbord);" & chr(13));    WebOutString("scrolldiv.appendChild(head2);" & chr(13));    WebOutDayWrapper(WPDBl,ProdPlanAccr,dd,curpos);    rwc = MatRowCnt(MachineGroupsbl);    WebOutString("var machineb2 = document.createElement(""DIV"");" & chr(13));    WebOutString("machineb2.setAttribute(""id"",""machineblock_old"");" & chr(13));    WebOutString("machineb2.className = 'sizeable';" & chr(13));    WebOutString("machineb2.style.top = 0 + 'px';" & chr(13));    WebOutString("machineb2.setAttribute(""rules"",""noheight,notop,left"");" & chr(13));    WebOutString("scrolldiv.appendChild(machineb2);" & chr(13));    WebOutString("var machineb = document.createElement(""DIV"");" & chr(13));    WebOutString("machineb.setAttribute(""id"",""machineblock"");" & chr(13));    WebOutString("machineb.className = 'sizeable';" & chr(13));    WebOutString("machineb.style.left = (" & curpos & "*TW)+ 'px';" & chr(13));    WebOutString("machineb.style.top = 0 + 'px';" & chr(13));    WebOutString("machineb.setAttribute(""rules"",""noheight,notop,left"");" & chr(13));    WebOutString("scrolldiv.appendChild(machineb);" & chr(13));    for (rw = 0; rw <machinecnt; rw = rw + 1) begin      AT2Unitr = arAT2Unitr[rw];      WebOutProdMachineScripts(MachineGroupsbl,AT2Unitr,vdays,hdays,dd);    end;    WebOutString("var coorddiv = document.createElement(""DIV"");" & chr(13));    WebOutString("coorddiv.setAttribute(""msheight"",msheight);" & chr(13));    WebOutString("coorddiv.setAttribute(""vert"",((msheight-8)/24));" & chr(13));    WebOutString("coorddiv.setAttribute(""id"",""glcoord"");" & chr(13));    WebOutString("coorddiv.setAttribute(""prevsortcnt"",""" & machinecnt & """);" & chr(13));    WebOutString("coorddiv.setAttribute(""sortcnt"","""& machinecnt & """);" & chr(13));    WebOutString("coorddiv.setAttribute(""origmachines""," & machinecnt & ");" & chr(13));    WebOutString("coorddiv.setAttribute(""hor"",TW);" & chr(13));    WebOutString("coorddiv.setAttribute(""days""," & WPDbl.WindowDays & ");" & chr(13));    WebOutString("coorddiv.setAttribute(""machines""," & WPDbl.WindowMachines & ");" & chr(13));    WebOutString("coorddiv.setAttribute(""origdays""," & WPDbl.DayCnt & ");" & chr(13));    WebOutString("coorddiv.setAttribute(""origtoday"",(" & (curpos*hdays) & ")*TW);" & chr(13));    WebOutString("document.body.appendChild(coorddiv);" & chr(13));    OutputProdPlanLabels;    FillRouteArr;    if UserCanActionPlan(ProdPlanAccr,foundf,4,"") then begin      WebOutStringFormatNL("useroptions.editop = 1");    end else begin      WebOutStringFormatNL("useroptions.editop = 0");    end;    if UserCanActionPlan(ProdPlanAccr,foundf,5,"") then begin      WebOutStringFormatNL("useroptions.iditroute = 1");    end else begin      WebOutStringFormatNL("useroptions.iditroute = 0");    end;    WebOutStringFormatNL("routecolor = '" & WPDbl.RouteColor & "';");    WebOutString("  }" & chr(13));    WebOutString("  </script>" & chr(13));    WebOutString("</head>" & chr(13));    WebOutString("<body class=""bodyclass"" oncontextmenu=""return false;"">" & chr(13));    ShowFilterWindow(arAT2Unitr,machinecnt);    WebOutString("<div id=""navigation""><div id=""nav"">");    if WPDbl.ShowSliderFlag == 1 then begin      WebOutString("<div id=""daycnt""><div id=""dcnt"">" & hdays & "</div><div class=""smalltext"">&nbsp;" & USetStr(32620) & "</div><div id=""dayslideframe"" days=""0"" dayslideframe=""0""><div id=""dayslidemiddle"" middle=""0"" days=""0"">&nbsp;</div><div dayslide=""0"" id=""dayslide"" days=""0""></div></div></div>" & chr(13));      WebOutString("<div id=""machinecnt""><div id=""mcnt"">" & vdays & "</div><div class=""smalltext"">&nbsp;" & USetStr(32621) & "</div><div id=""machineslideframe"" machines=""0"" dayslideframe=""0""><div id=""machineslidemiddle"" middle=""0"" machines=""0"">&nbsp;</div><div dayslide=""0"" machines=""0"" id=""machineslide"" style=""left:" & vdays & "px;""></div></div></div>" & chr(13));    end else begin      WebOutStringFormatNL("<div id=""daycnt_select"" class=""select_wrapper"">" & USetStr(32620) & "<select onChange=""resizeWidth(this.options[this.selectedIndex].value)"">");      for (i = 0; i < WPDbl.DayCnt ; i = i + 5) begin        if i <> 0 then begin          if (mod(i,hdays)<5 and hdays >= i ) then begin            WebOutStringFormatNL("<option value=""" & i & """ SELECTED>" & i & "</option>");          end else begin            WebOutStringFormatNL("<option value=""" & i & """>" & i & "</option>");          end;        end;      end;      WebOutStringFormatNL("</select></div><div id=""machinecnt_select"" class=""select_wrapper"">" & USetStr(32621) & "<select onChange=""resizeHeight(this.options[this.selectedIndex].value)"">");      tmpcnt = WPDbl.MachineCnt; // limit machine count on resize      if tmpcnt <1 then begin        tmpcnt = 10;      end;      for (i = 1; i <= tmpcnt ; i = i + 1) begin        if i == vdays then begin          WebOutStringFormatNL("<option value=""" & i & """ SELECTED>" & i & "</option>");        end else begin          WebOutStringFormatNL("<option value=""" & i & """>" & i & "</option>");        end;      end;      WebOutStringFormatNL("</select></div>");    end;    WebOutString("<table ><tr><td>" & USetStr(32622) & "</td><td><div class=""select_wrapper"" id=""group_select""><select class=""headselect"" name=""groupsel"" id=""groupselect"" onChange=""D_SelectGroup(this);"">");//ShowSelection(true)"">" & chr(13));    WebOutString("<option value=""-1"" >" & USetStr(32624) & "</option>" & chr(13));    for (rw = 0; rw <rwc; rw = rw + 1) begin      MatRowget(MachineGroupsBl,rw,MachineGroupsrw);      WebOutString("<option value=""" & MachineGroupsrw.Code & """ >" & MachineGroupsrw.Code & "</option>" & chr(13));    end;    WebOutString("</select></div></td><td>" & chr(13));    WebOutString(USetStr(32623) & "</td><td><div class=""select_wrapper"" id=""production_select""><select class=""headselect"" onChange=""D_SelectProd(this)"" name=""prodsel"" id=""prodopsel"">" & chr(13));    WebOutString("<option value=""-1"" >" & USetStr(32624) & "</option>" & chr(13));    WebOutString("</select></div></td>" & chr(13));    WebOutString("<td>" & USetStr(32628) & "</td><td>" & chr(13));    WebShowAllPlans;    WebOutString("</td><td>" & chr(13));    WebOutString("<div class=""filter_button"" onclick='ShowFilterWindow(event,this);'>" & UsetStr(32673) & "</div>" & chr(13));    WebOutString("</td>" & chr(13));    WebOutString("</tr></table></div>" & chr(13));    WebOutString("<div id=""buttons"">" & chr(13));    if (UserCanActionPlan(ProdPlanAccr,foundf,2,"")) then begin      WebOutString("<a href=""#"" class=""chbutton"" onClick=""GenerateNewPlan()"">" & USetStr(32627) & "</a>" & chr(13));    end;    if (UserCanActionPlan(ProdPlanAccr,foundf,3,"")) then begin      WebOutString("<a href=""#"" class=""chbutton"" onClick=""ShowWeekSelection('RecalculatePlan()');"">" & USetStr(32652) & "</a>" & chr(13));    end;    if (UserCanActionPlan(ProdPlanAccr,foundf,6,"")) then begin      WebOutString("<a href=""#"" class=""chbutton"" onClick=""DeletePlan()"">" & USetStr(1498) & "</a>" & chr(13));    end;    WebOutString("<a href=""#"" class=""chbutton"" onclick=""window.location.reload();"">" & USetStr(1687) & "</a>" & chr(13));    WebOutString("<div id=""commentline""><input id=""plan_comment""></div>" & chr(13));    WebOutString("<a href=""#"" class=""chbutton"" onClick=""SaveAndSend()"">" & USetStr(32626) & "</a>" & chr(13));    WebOutString("<div><a href=""#"" class=""chbutton"" onClick=""ShowDoneOper(this.parentNode)"">" & USetStr(32629) & "</a></div>" & chr(13));    WebOutString("<input id=""inp"">" & chr(13));    WebOutString("<input id=""inp2"">" & chr(13));    WebOutString("</div></div>");    WebOutString("<div id=""pop"" class=""popup""></div>" & chr(13));    //drawing header    WebOutString("<div id=""globalpar"" workstart=""" & TimeToSeconds2("00:00") & """ workend=""" & TimeToSeconds2("24:00") & """></div>" & chr(13));    WebOutString("<div id=""sesstr"" style=""display:none"">" & sessid & "</div>");    dpos = 10;    offpos=(whours-ct.Hour) * 60;    webOutString("<div id=""wrapper"">");    webOutString("<div id=""status""><img src='" & host & "/planning/images/loading4.gif'>");    webOutString("</div>" & chr(13));    webOutString("</div>" & chr(13));    webOutString("<div id=""right-menu"" class=""right-menu"">");    webOutString("</div>" & chr(13));    webOutString("<div id=""win_frame""><div id=""win_head""><div id=""win_header""></div><div id=""win_exit""><a href=""#"" onclick=""HideWindow()"">x</a></div></div><div id=""win""></div></div>" & chr(13));    webOutString("<div id=""MachineLineHidden"" class=""sizeable"">" & chr(13));    webOutString("</div>" & chr(13));    WebOutString("<script type=""text/javascript"">" & chr(13));    WebOutString("window.onload = function(){" & chr(13));    WebOutString("getheight(" & vdays & ");" & chr(13));    WebOutString("getwidth(" & hdays & "," & curpos & ");" & chr(13));    WebOutString("document.getElementById(""buttons"").style.width = (theWidth-240) + 'px';" & chr(13));    WebOutString("document.getElementById(""nav"").style.width = (theWidth-260) + 'px';" & chr(13));    WebOutString("document.getElementById(""navigation"").style.width = (theWidth-225) + 'px';" & chr(13));    WebOutString("document.body.style.height = (theHeight+20)+'px';" & chr(13));    WebOutString("document.body.style.width = (theWidth+40)+'px';" & chr(13));    WebOutString("drawfullpage();" & chr(13));    WebOutString("setPositionForCalendar();" & chr(13));    WebOutString("sWrapper = document.getElementById('wrapper');");    WebOutString("container_1 = document.getElementById('machineblock');");    WebOutString("container_2 = document.getElementById('machineblock_old');");    /* this is removed for later    if WPDbl.ShowSliderFlag == 1 then begin      WebOutString("setPositionForSlider(" & vdays & ",document.getElementById(""machineslide""),document.getElementById(""glcoord"").getAttribute(""origmachines""));" & chr(13));      WebOutString("setPositionForSlider(" & hdays & ",document.getElementById(""dayslide""),document.getElementById(""glcoord"").getAttribute(""origdays""));" & chr(13));    end;    */    WebOutString(" dragHelper = document.createElement('DIV');" & chr(13));    WebOutString(" dragHelper.style.cssText = '';" & chr(13));    WebOutString(" dragHelper.className = 'draghelper';" & chr(13));    WebOutString("disableSelection(document.body); " & chr(13));    WebOutString("" & chr(13));    WebOutString(" CreateDragContainer(" & chr(13));    for (i = 0; i < machinecnt; i = i + 1)begin      AT2Unitr = arAT2Unitr[i];      if (i > 0) then begin        WebOutString(",");      end;      WebOutString("'" & AT2Unitr.InventoryNr & "'");    end;    WebOutString(" );" & chr(13));    WebOutString("" & chr(13));    if (LastPlanExists(planid)==false) then begin      WebOutString(" CheckLoadStatus();" & chr(13));    end else begin      WebOutString(" GetOldPlan('" & planid & "');" & chr(13));    end;    WebOutString(" document.body.appendChild(dragHelper);" & chr(13));    WebOutString("DrawSelectBox();" & chr(13));    WebOutString("LoadWindowSettings();" & chr(13));    WebOutString("}" & chr(13));    WebOutString("</script>" & chr(13));    WebOutString("</div>" & chr(13));    WebOutString("</body>" & chr(13));    WebOutString("</html>" & chr(13));    if LastPlanExists(planid)==false then begin      qupdating.UpdateSessionRec(GetSessionString("prodsessionid"),"<br>... initializing ",0,breakf);      NewTimedTask2("GenProdPlan","Generate plan","GenProdPlanRecsTask",sessid,CurrentDate,AddSeconds(CurrentTime,1),"","");    end;  end;  return;end;globalprocedure ProdPlanApp(record WebNGStructVc WSr,string path)begin  WebHWLPlanProdMan;  return;end;globalfunction longint getDateDiffInMinutes(time t2,time t1,date d2,date d1)begin  longint t;  longint days;  days = DateDiff(d2,d1);  if t1 > t2 then begin    days = days - 1;    t = TimeDiffinMinutes(t1,t2);    t = 1440-t;  end else begin    t = TimeDiffinMinutes(t2,t1);  end;  t = (days * 1440) + t;  getDateDiffInMinutes = t;  return;end;globalprocedure FillProdOpClr(var array string color,var integer csize)begin  record ProdOpWebColorBlock WCbl;  row ProdOpWebColorBlock WCblrw;  integer rwcnt,i;  csize = 0;  BlockLoad(WCbl);  rwcnt = MatRowCnt(WCbl);  for(i = 0; i < rwcnt; i = i + 1) begin    MatRowGet(WCbl,i,WCblrw);    color[csize] = WCblrw.WebColor;    csize = csize + 1;  end;  return;end;function string 20 GetOperRoute(longint sernr)begin  record ProdOperationVc ProdOpr;  record ProdVc Prodr;  string 20 res;  res = "";  ProdOpr.SerNr = sernr;  if readfirstmain(ProdOpr,1,true) then begin    Prodr.SerNr = ProdOpr.ProdNr;    if readfirstmain(Prodr,1,true) then begin      res = Prodr.Routing;    end;  end;  GetOperRoute = res;  return;end;function string 100 GetOperAltRoute(longint sernr)begin  record ProdOperationVc ProdOpr;  record ProdVc Prodr;  record RoutingVc Routingr,tRoutingr;  string 20 res;  boolean TrHs;  res = "";  ProdOpr.SerNr = sernr;  if readfirstmain(ProdOpr,1,true) then begin    Prodr.SerNr = ProdOpr.ProdNr;    if readfirstmain(Prodr,1,true) then begin      tRoutingr.Code = Prodr.Routing;      if ReadFirstMain(tRoutingr,1,true) then begin        resetLoop(Routingr);        TrHs = true;        while loopkey("Class:" & tRoutingr.Classification,Routingr,1,TrHs) begin          if (res <>"") then begin            res = res & ",";          end;          res = res & Routingr.Code;        end;      end;    end;  end;  GetOperAltRoute = res;  return;end;function string 30 GetPOStatus(integer status)begin  string 30 res;  switch (status) begin    case kPRStatusCreated: res = UsetStr(32600);    case kPRStatusCancelled: res = UsetStr(32601);    case kPRStatusStarted: res = UsetStr(32602);    case kPRStatusFinished: res = UsetStr(32603);    case kPRStatusFinishedandDiscarded: res = UsetStr(32719);  end;  GetPOStatus = res;  return;end;function string 20 GetEfficiencyCoef(record ProdOperationVc ProdOpr,record RoutingVc Routingr)begin  val dur,dur2,tval;  string 20 res;  row RoutingVc Routingrw;  integer i,rwcnt;  rwcnt = MatRowCnt(Routingr);  for ( i = 0; i < rwcnt;i = i + 1) begin    MatRowGet(Routingr,i,Routingrw);    if ProdOpr.Sequence == Routingrw.Sequence then begin      dur = TimeToSeconds2(Routingrw.SetupTime) + TimeToSeconds2(Routingrw.MoveTime)+ DurToSeconds(Routingrw.RunTime) * ProdOpr.Qty;      dur2 = DurToSeconds(Routingrw.RunTime) * ProdOpr.Qty;      tval = dur2/dur*100;      i = rwcnt;    end;  end;  tval = 0;  res = tval & "%";  GetEfficiencyCoef = res;  return;end;function string 4 FormatVRStr(string code,longint tmp,integer type)begin  string 4 res;  boolean addf;  integer i;  res = "";  if tmp < 0 then begin    if type == 1 then begin      for (i = 0; i < len(code); i = i + 1) begin        if mid(code,i-1,1) == "(" then begin          addf = true;        end;        if addf and mid(code,i,1) == "-" then begin          addf = false;          i = len(code);        end;        if addf then begin          res = res & mid(code,i,1);        end;      end;    end else begin      for (i = len(code)-1; i>=0; i = i - 1) begin        if mid(code,i+1,1) == ")" then begin          addf = true;        end;        if addf and mid(code,i,1) == "-" then begin          addf = false;          i = 0;        end;        if addf then begin          res = res & mid(code,i,1);        end;      end;    end;  end else begin    res = tmp;  end;  FormatVRStr = res;  return;end;globalprocedure ProdPlanAdditionInfo(record ProdOperationVc ProdOpr)begin  record RoutingVc Routingr;  record RecVc Recr;  record ProdVc Prodr;  string 3 alt;  WebOutStringFormat("<div class='loc'>" & ProdOpr.Location & "</div>");  WebOutStringFormat("<div class='person'>" & ProdOpr.Person & "</div>");  WebOutStringFormat("<div class='stdoper'>" & ProdOpr.StdOperation & "</div>");  WebOutStringFormat("<div class='cgroup'>" & ProdOpr.DisplayGroup & "</div>");  WebOutStringFormat("<div class='outeritem'>" & "" & "</div>");//jzs-combine  WebOutStringFormat("<div class='seq'>" & ProdOpr.Sequence & "</div>");  WebOutStringFormat("<div class='s_w'>" & GetPOStatus(ProdOpr.PRStatusFlag) & "</div>");//status with words  WebOutStringFormatNL("<div class='ordnum'>" & ProdOpr.ProdOrdNr & "</div>");  Prodr.SerNr = ProdOpr.ProdNr;  if ReadFirstMain(Prodr,1,true) then begin    Routingr.Code = Prodr.Routing;    if readfirstmain(Routingr,1,true) then begin      WebOutStringFormatNL("<div class='route_info' code='" & Routingr.Code & "' version='' revision='' name='" & "artname" & "'></div>");      WebOutStringFormat("<div class='o_q'>" & "" & "</div>");//optimalQty      WebOutStringFormat("<div class='e_c'>" & GetEfficiencyCoef(ProdOpr,Routingr) & "</div>");//efficiency      Recr.Code = Prodr.Recepy;      if readfirstmain(Recr,1,true) then begin        alt = "0";        if Recr.DefaultRouting <> Routingr.Code then begin          alt = "1";        end;        WebOutStringFormatNL("<div class='rec_info' alt='" & alt & "'  code='" & Recr.Code & "'></div>");      end;    end;  end;  return;end;function string 10 OutputUsageColor(integer coef,array string acol,array integer aprc,integer size)begin  string 20 res;  integer i;  res = 0;  for ( i = 0; i < size; i = i + 1) begin    if coef <= aprc[i] then begin      res = acol[i];      i = size;    end;  end;  OutputUsageColor = res;  return;end;procedure FillUsageColors(array string acol,array integer aprc,var integer size)begin  record MachineColorBlock MCbl;  row MachineColorBlock MCblrw;  integer rwcnt,i;  BlockLoad(MCbl);  rwcnt = MatRowCnt(MCbl);  size = 0;  for ( i = 0; i < rwcnt;i = i + 1) begin    MatRowGet(MCbl,i,MCblrw);    acol[size] = MCblrw.Color;    aprc[size] = MCblrw.Prc;    size = size + 1;  end;  return;end;procedure DisplaySingleUsageLine(string code,integer coef,array string acol,array integer aprc,integer size)begin  WebOutStringFormatNL("<m_usage code='" & code & "' coef='" & coef & "' color='" & OutputUsageColor(coef,acol,aprc,size) & "'></m_usage>");  return;end;procedure GetShiftTimes(record MachineShiftVc Shiftr,var time st,var time et,integer diff)begin  integer i,rwcnt,cnt;  row MachineShiftVc Shiftrw;  rwcnt = MatRowCnt(Shiftr);  for (i = 0; i < rwcnt;i = i + 1) begin    MatRowGet(Shiftr,i,Shiftrw);    cnt = cnt + (Shiftrw.RepeatCnt);    if cnt >= diff then begin      st = Shiftrw.StartTime;      et = Shiftrw.EndTime;    end;  end;  return;end;function val GetOperationPartDur(record MachineShiftVc Shiftr,date enddate,record ProdPlanRecVc PlanRecr,date planstart)begin  val res;  date td;  time st,et;  boolean firstf;  firstf = true;  td = PlanRecr.StartDate;  while td <= enddate begin    GetShiftTimes(Shiftr,st,et,(DateDiff(td,planstart)));    if firstf then begin      st = PlanRecr.StartTime;      firstf = false;    end;    res = res + TimeToSeconds2(et) - TimeToSeconds2(st);    td = AddDay(td,1);  end;  GetOperationPartDur = res;  return;end;globalprocedure OutPutMachineUsage(longint planid,boolean planf)begin  record ProdPlanIDVc ProdPlanIDr;  record WebPlanDefBlock WPDefbl;  record TempProdPlanVc Tempr;  record AT2UnitVc AT2Unitr;  record ProdPlanRecVc PlanRecr;  record MachineShiftVc Shiftr;  row MachineShiftVc Shiftrw;  date effectenddate,startd;  boolean TrHs,TrHs2;  val tcoef;  array integer aprc;  array string 20 acol;  integer size,rwc,i;  longint wrkcnt;  FillUsageColors(acol,aprc,size);  if planf then begin    ProdPlanIDr.SerNr = planid;    if ReadFirstmain(ProdPlanIDr,1,true) then begin      TRhs = true;      BlockLoad(WPDefbl);      if WPDefbl.EffectWeekCnt > 0 then begin        effectenddate = AddDay(CurrentDate,-GetDateId(CurrentDate)+1);        startd = effectenddate;        effectenddate = AddDay(effectenddate,7*WPDefbl.EffectWeekCnt-1);      end;//jzs-combine//      while LoopKey("ProdMachineID",AT2Unitr,1,TrHs) begin      while LoopMain(AT2Unitr,1,TrHs) begin        //if AT2Unitr.ProdMachineID<>"" then begin        if true then begin          recordNew(Shiftr);          FillShiftDays(Shiftr,AT2Unitr,100,ProdPlanIDr.PlanDate);          ResetLoop(PlanRecr);          PlanRecr.PlanID = planid;          PlanRecr.MachineID= AT2Unitr.InventoryNr;          PlanRecr.StartDate = startd;          tcoef= 0;          TrHs2 = true;          while LoopKey("PlanID",PlanRecr,3,TrHs2) begin            if PlanRecr.PlanID <> planid or               PlanRecr.MachineID<> AT2Unitr.InventoryNr then begin              TrHs2 = false;            end else begin              if PlanRecr.EndDate <= effectenddate then begin                tcoef= tcoef + PlanRecr.Dur;              end else begin                if (PlanRecr.StartDate <=effectenddate) then begin                  tcoef = tcoef + GetOperationPartDur(Shiftr,effectenddate,PlanRecr,ProdPlanIDr.PlanDate);                end;              end;            end;          end;          rwc = MatRowCnt(Shiftr);          wrkcnt = 0;          if DateDiff(effectenddate,ProdPlanIDr.PlanDate)<rwc then begin            rwc = DateDiff(effectenddate,ProdPlanIDr.PlanDate);          end;          for (i = 0; i < rwc; i = i + 1) begin            MatRowGet(Shiftr,i,Shiftrw);            wrkcnt = wrkcnt + TimeToSeconds2(Shiftrw.EndTime) - TimeToSeconds2(Shiftrw.StartTime);          end;          tcoef = tcoef / wrkcnt * 100;          if tcoef > 100 then begin tcoef = 100; end;          DisplaySingleUsageLine(AT2Unitr.InventoryNr,tcoef,acol,aprc,size);        end;      end;    end;  end else begin    while LoopMain(Tempr,1,true) begin      DisplaySingleUsageLine(Tempr.MachineID,Tempr.EffectCoef,acol,aprc,size);    end;  end;  return;end;globalprocedure ProdPlanOutPutUserSettings(record WebPlanDefBlock WPDbl)begin  integer d1,d2,d3,d4;  record ProdPlanAccessVc ProdPlanAccr;  string 30 user;  user = CurrentUser;  d1 = WPDbl.LateFlag;  d2 = WPDbl.ConstrFlag;  d3 = WPDbl.ProdNrFlag;  d4 = WPDbl.ProdOpNrFlag;  ProdPlanAccr.UserCode = user;  if ReadFirstMain(ProdPlanAccr,1,true) then begin    if (ProdPlanAccr.UseDefFlag == 1) then begin      d1 = ProdPlanAccr.LateFlag;      d2 = ProdPlanAccr.ConstrFlag;      d3 = ProdPlanAccr.ProdNrFlag;      d4 = ProdPlanAccr.ProdOpNrFlag;    end;  end;  WebOutStringFormatNL("<user_settings d1='" & d1 & "' d2='" & d2 & "' d3='" & d3 & "' d4='" & d4 & "'></user_settings>");  return;end;globalprocedure ProdPlanFillOrderArr(record ProdOperationVc ProdOpr,array record ProdOrderVc arrO,var integer size)begin  record ProdOrderVc Ordr,nOrdr;  integer i;  boolean foundf;  foundf = false;  Ordr.SerNr = ProdOpr.ProdOrdNr;  if readfirstmain(Ordr,1,true) then begin    for (i = size-1; i >=0;i = i - 1) begin      nOrdr = arrO[i];      if nOrdr.SerNr == Ordr.SerNr then begin        foundf = true;        i = 0;      end;    end;    if foundf ==false then begin      arrO[size] = Ordr;      size = size + 1;    end;  end;  return;end;procedure OutputOrders(array record ProdOrderVc arrO,integer size)begin  record ProdOrderVc ProdOpr;  integer i;  WebOutStringFormatNL("<orders>");  for (i = 0; i < size;i = i + 1) begin    ProdOpr = arrO[i];    WebOutStringFormatNL("<order enddate='" & DateToString(ProdOpr.DueDate,"DD.MM.YYYY") & "' no='" & ProdOpr.SerNr & "' prior='" & ProdOpr.Priority & "'></order>");  end;  WebOutStringFormatNL("</orders>");  return;end;globalprocedure OutPutMachineShifts(record ProdPlanIDVc ProdPlanr)begin  row ProdPlanIDVc ProdPlanrw;  integer i,rwcnt;  WebOutString("<div class='machine_shifts'>");  rwcnt = MatRowCnt(ProdPlanr);  for (i = 0; i < rwcnt;i =  i + 1) begin    MatRowGet(ProdPlanr,i,ProdPlanrw);    WebOutString("<div class='machine_shift' sd='" & ProdPlanrw.FromDate & "' ed='" & ProdPlanrw.ToDate & "'");    WebOutString(" s1='" & ProdPlanrw.MonStart & "' e1='" & ProdPlanrw.MonEnd & "'");    WebOutString(" s2='" & ProdPlanrw.TueStart & "' e2='" & ProdPlanrw.TueEnd & "'");    WebOutString(" s3='" & ProdPlanrw.WedStart & "' e3='" & ProdPlanrw.WedEnd & "'");    WebOutString(" s4='" & ProdPlanrw.ThuStart & "' e4='" & ProdPlanrw.ThuEnd & "'");    WebOutString(" s5='" & ProdPlanrw.FriStart & "' e5='" & ProdPlanrw.FriEnd & "'");    WebOutString(" s6='" & ProdPlanrw.SatStart & "' e6='" & ProdPlanrw.SatEnd & "'");    WebOutString(" s7='" & ProdPlanrw.SunStart & "' e7='" & ProdPlanrw.SunEnd & "'");    WebOutString(" mcode='" & ProdPlanrw.Machine & "' group='" & ProdPlanrw.MGroup & "' type='" & ProdPlanrw.Type & "' rec='" & ProdPlanrw.recid & "'></machine_shift>");  end;  WebOutString("</div>");  return;end;function AddProdToVector(array record ProdVc aProdr,vector longint vProdr,var integer size,longint num)begin  record ProdVc Prodr;  if vProdr[num] < 0 then begin    Prodr.SerNr = num;    if readfirstmain(Prodr,1,true) then begin      vProdr[num] = size;      aProdr[size] = Prodr;      size = size + 1;    end;  end;  return;end;globalfunction longint GetChildProdOP(longint prodnr,longint seqnr)begin  record ProdOperationVc ProdOpr;  longint res;  ProdOpr.Sequence = seqnr+1;  ProdOpr.ProdNr = prodnr;  LoopKey("ProdNrSeq",ProdOpr,2,true);  res = -1;  if ProdOpr.ProdNr == prodnr and ProdOpr.PRStatusFlag==0 then begin    res = ProdOpr.SerNr;  end;  GetChildProdOP = res;  return;end;globalprocedure ProdPlanShowSingleOperation(record ProdPlanRecVc PlanRecr,record ProdOperationVc ProdOpr,record MachineShiftVc Shiftr,record WebPlanDefBlock WPDbl,string tclr,boolean pof)begin  date tmp_sd,tmp_ed;  time tmp_st,tmp_et;  longint dur,prodnr,setuptime;  integer frflag;  longint tdur;  time ttime;  date sd,ed,gsd;  time st,et,tt;  integer i,dcnt;  time starttime,endtime;  record AT2UnitVc AT2Unitr;  boolean daysf;  integer rcnt;  record ProdVc Prodr;  prodnr = ProdOpr.ProdNr;  if pof then begin    tmp_sd = ProdOpr.StartDate;    tmp_ed = ProdOpr.ProdDate;    tmp_st = ProdOpr.StartTime;    tmp_et = ProdOpr.EndTime;    frflag = 0;    setuptime = TimeToSeconds2(ProdOpr.SetupTime);    dur = DurToSeconds(ProdOpr.RunTime);  end else begin    tmp_sd = PlanRecr.StartDate;    tmp_ed = PlanRecr.EndDate;    tmp_st = PlanRecr.StartTime;    tmp_et = PlanRecr.EndTime;    frflag = PlanRecr.FreezeFlag;    setuptime = PlanRecr.SetupTime;    dur = PlanRecr.Dur;  end;  Prodr.SerNr = prodnr;  readfirstmain(Prodr,1,true);  if tmp_sd != tmp_ed then begin    daysf = true;    ttime = tmp_st;    gsd = currentDate;    Shiftr.MachineID = ProdOpr.Machine;    AT2Unitr.InventoryNr = ProdOpr.Machine;    if readfirstmain(AT2Unitr,1,true) then begin end;    dcnt = 30 * WPDbl.ViewMonths;    FillShiftDays(Shiftr,AT2Unitr,dcnt,gsd);    ed = PlanRecr.StartDate;    tdur  = TimeToSeconds2(ProdOpr.SetupTime);// + TimeToSeconds2(ProdOpr.MoveTime);//+ TimeToSeconds2(ProdOpr.QueueTime);    tdur = tdur + (TimeToSeconds2(ProdOpr.QueueTime) + DurToSeconds(ProdOpr.RunTime)) * ProdOpr.Qty;    rcnt = 0;    GetNextAvailableWTime(ed,Shiftr,gsd,starttime,endtime,tt,rcnt);  end else begin    daysf = false;    endtime = tmp_et;  end;  WebOutStringFormat("<div class=""job"">");  WebOutStringFormat("<div class=""qty"">" & ProdOpr.Qty & "</div>");  WebOutStringFormat("<div class=""prodopname"">" & ProdOpr.Comment & "</div>");  WebOutStringFormat("<div class=""prev"">" & GetMotherProdOP(prodnr,ProdOpr.Sequence) & "</div>");  WebOutStringFormat("<div class=""next"">" & GetChildProdOP(prodnr,ProdOpr.Sequence) & "</div>");  WebOutStringFormat("<div class=""prodopnr"">" & ProdOpr.SerNr & "</div>");  WebOutStringFormat("<div class=""prodnr"" loc='" & Prodr.Location & "'>" & prodnr & "</div>");  WebOutStringFormat("<div class=""startdate"">" & tmp_sd & "</div>");  WebOutStringFormat("<div class=""starttime"">" & tmp_st & "</div>");  WebOutStringFormat("<div class=""enddate"">" & tmp_sd & "</div>");  WebOutStringFormat("<div class=""endtime"">" & endtime & "</div>");  WebOutStringFormat("<div class=""color"">" & tclr & "</div>");  WebOutStringFormat("<div class=""route"">" & GetOperRoute(ProdOpr.SerNr) & "</div>");  WebOutStringFormat("<div class=""altroute"">" & GetOperAltRoute(ProdOpr.SerNr) & "</div>");  WebOutStringFormat("<div class=""freeze"">" & frflag & "</div>");  WebOutStringFormat("<div class=""setup"">" & setuptime & "</div>");  WebOutStringFormat("<div class=""qty"">" & ProdOpr.Qty & "</div>");  WebOutStringFormat("<div class=""duration"">" & dur & "</div>");  ProdPlanAdditionInfo(ProdOpr);  WebOutStringFormat("<div class=""prior"">" & GetProdPrio(prodnr) & "</div>");  WebOutStringFormat("</div>");  if daysf then begin    while tdur > TimeToSeconds2(TimeDiff(ttime,endtime)) begin      ed = AddDay(ed,1);      rcnt = 0;      GetNextAvailableWTime(ed,Shiftr,gsd,starttime,endtime,tt,rcnt);      tdur = tdur - TimeToSeconds2(TimeDiff(ttime,endtime));      ttime = starttime;      if tdur > TimeToSeconds2(TimeDiff(ttime,endtime)) then begin        et = addseconds(starttime,TimeToSeconds2(TimeDiff(ttime,endtime)));      end else begin        et = addseconds(starttime,tdur);      end;      sd = ed;      st = starttime;      WebOutStringFormat("<div class=""job"">");      WebOutStringFormat("<div class=""qty"">" & ProdOpr.Qty & "</div>");      WebOutStringFormat("<div class=""prodopname"">" & ProdOpr.Comment & "</div>");      WebOutStringFormat("<div class=""prev"">" & GetMotherProdOP(PlanRecr.ProdNr,ProdOpr.Sequence) & "</div>");      WebOutStringFormat("<div class=""next"">" & GetChildProdOP(PlanRecr.ProdNr,ProdOpr.Sequence) & "</div>");      WebOutStringFormat("<div class=""prodopnr"">" & PlanRecr.ProdOpNr & "</div>");      WebOutStringFormat("<div class=""prodnr"" loc='" & Prodr.Location & "'>" & PlanRecr.ProdNr & "</div>");      WebOutStringFormat("<div class=""startdate"">" & sd & "</div>");      WebOutStringFormat("<div class=""starttime"">" & st & "</div>");      WebOutStringFormat("<div class=""enddate"">" & ed & "</div>");      WebOutStringFormat("<div class=""endtime"">" & et & "</div>");      WebOutStringFormat("<div class=""color"">" & tclr & "</div>");      WebOutStringFormat("<div class=""route"">" & GetOperRoute(PlanRecr.ProdOpNr) & "</div>");      WebOutStringFormat("<div class=""altroute"">" & GetOperAltRoute(PlanRecr.ProdOpNr) & "</div>");      WebOutStringFormat("<div class=""freeze"">" & PlanRecr.FreezeFlag & "</div>");      WebOutStringFormat("<div class=""setup"">" & PlanRecr.SetupTime & "</div>");      WebOutStringFormat("<div class=""qty"">" & ProdOpr.Qty & "</div>");      WebOutStringFormat("<div class=""duration"">" & PlanRecr.Dur & "</div>");      ProdPlanAdditionInfo(ProdOpr);      WebOutStringFormat("<div class=""prior"">" & GetProdPrio(PlanRecr.ProdNr) & "</div>");      WebOutStringFormat("</div>");    end;  end;  return;end;procedure SendLastPlan(longint planid)begin  record ProdPlanRecVc PlanRecr;  string 50 ckey;  string 40 lmch; // last machine  record WebPlanDefBlock WPDbl;  array string 30 color;  time tmpct;  longint cnt;  boolean TrHs;  string 20 tclr;  vector string 20 vcolors;  integer clrnr,csize;  record AT2UnitVc AT2Unitr;  record ProdOperationVc ProdOpr;  longint tdur;  time ttime;  date sd,ed,gsd;  time st,et,tt;  integer i,dcnt;  time starttime,endtime;  record MachineShiftVc Shiftr;  boolean daysf,foundf;  record TempProdPlanVc Tempr;  array record ProdOrderVc arrOrders;  integer size;  record ProdPlanIDVc ProdPlanr;  record ProdVc Prodr;  array record ProdVc aProdr;  vector longint vProdr;  integer prodsize;  integer rcnt;  BlockLoad(WPDbl);  cnt = 0;  ProdPlanr.SerNr = planid;  readfirstmain(ProdPlanr,1,true);  FillProdOpClr(color,csize);  OutPutMachineUsage(planid,true);  ProdPlanOutPutUserSettings(WPDbl);  OutPutMachineShifts(ProdPlanr);  WebOutStringFormat("<div class=""rows"">");  WebOutStringFormat("<div class=""direction"">" & WPDbl.Direction & "</div>");  WebOutStringFormat("<div class=""gradient"">" & WPDbl.GradientFlag & "</div>");  WebOutStringFormat("<div class=""calctype"">0</div>");  WebOutStringFormat("<div class=""statustype"">" & WPDbl.StatusFlag & "</div>");  PlanRecr.PlanID = planid;  lmch = "";  TrHs = true;  WebOutStringFormat("<div class='plan_comment'>" & ProdPlanr.Comment & "</div>");  while loopKey("PlanID",PlanRecr,1,TrHs) begin    if PlanRecr.PlanID <> planid then begin      TrHs = false;    end else begin      ProdOpr.SerNr = PlanRecr.ProdOpNr;      foundf = readfirstmain(ProdOpr,1,true);      if foundf and ProdOpr.PRStatusFlag < 3 then begin        cnt = cnt + 1;        if lmch <> PlanRecr.MachineID then begin          if lmch <> "" then begin            WebOutStringFormat("</div>");            WebOutStringFormat("</div>");          end;          lmch = PlanRecr.MachineID;          WebOutStringFormat("<div class=""machine"">");          WebOutStringFormat("<div class=""machinecode"">" & PlanRecr.MachineID & "</div>");          AT2Unitr.InventoryNr = PlanRecr.MachineID;          if readfirstmain(AT2Unitr,1,true) then begin            WebOutStringFormat("<div class=""machinename"">" & AT2Unitr.Description & "</div>");          end else begin            WebOutStringFormat("<div class=""machinename""></div>");          end;          WebOutStringFormat("<div class=""curTime"">" & (GetHour(CurrentTime) * 60) & "</div>");          WebOutStringFormat("<div class=""jobs"">");        end;        if vcolors[PlanRecr.ProdNr]=="" then begin          vcolors[PlanRecr.ProdNr] = color[clrnr];          tclr = color[clrnr];          clrnr = clrnr + 1;          if clrnr==csize then begin clrnr = 0; end;        end else begin          tclr = vcolors[PlanRecr.ProdNr];        end;        ProdPlanShowSingleOperation(PlanRecr,ProdOpr,Shiftr,WPDbl,tclr,false);        AddProdToVector(aProdr,vProdr,prodsize,ProdOpr.ProdNr);        if vProdr[PlanRecr.ProdNr]>-1 then begin          Prodr = aProdr[vProdr[ProdOpr.ProdNr]];        end;        ProdPlanFillOrderArr(ProdOpr,arrOrders,size);            end;    end;  end;  WebOutStringFormat("</div>");  OutputOrders(arrOrders,size);  return;end;globalprocedure ProdPlanWebOut(string sessid)begin  record TempProdPlanVc Tempr;  row TempProdPlanVc Temprw;  record ProdOperationVc ProdOpr;  record WebPlanDefBlock WPDbl;  boolean TrHs;  integer rw,rwc;  array string 30 color;  time tmpct;  vector string 20 vcolors;  integer clrnr,csize;  string 20 tclr;  record AT2UnitVc AT2Unitr;  array record ProdOrderVc arrOrders;  record ProdPlanIDVc ProdPlanr;  integer size;  record ProdVc Prodr;  array record ProdVc aProdr;  vector longint vProdr;  integer prodsize;  BlockLoad(WPDbl);  csize =0;  FillProdOpClr(color,csize);  OutPutMachineUsage(-1,false);  ProdPlanOutPutUserSettings(WPDbl);  LoadShiftInfo(ProdPlanr);  OutPutMachineShifts(ProdPlanr);  WebOutStringFormat("<div class=""rows"">");  WebOutStringFormat("<div class=""direction"">" & WPDbl.Direction & "</div>");  WebOutStringFormat("<div class=""gradient"">" & WPDbl.GradientFlag & "</div>");  WebOutStringFormat("<div class=""calctype"">0</div>");  WebOutStringFormat("<div class=""statustype"">" & WPDbl.StatusFlag & "</div>");  WebOutStringFormat("<div class='plan_comment'></div>");  Tempr.SessionID = sessid;  TrHs = true;  ResetLoop(Tempr);  while LoopKey("SessionID",Tempr,1,TrHs) begin    if Tempr.SessionID <> sessid then begin      TrHs = false;    end else begin      rwc = MatRowCnt(Tempr);      WebOutStringFormat("<div class=""machine"">");      WebOutStringFormat("<div class=""machinecode"">" & Tempr.MachineID & "</div>");      AT2Unitr.InventoryNr = Tempr.MachineID;      if readfirstmain(AT2Unitr,1,true) then begin        WebOutStringFormat("<div class=""machinename"">" & AT2Unitr.Description & "</div>");      end else begin        WebOutStringFormat("<div class=""machinename""></div>");      end;      WebOutStringFormat("<div class=""curTime"">" & (GetHour(CurrentTime) * 60) & "</div>");      WebOutStringFormat("<div class=""jobs"">");      for (rw = 0; rw < rwc; rw = rw + 1) begin        MatRowGet(Tempr,rw,Temprw);        ProdOpr.SerNr = Temprw.ProdOpNr;        if readfirstmain(ProdOpr,1,true) then begin          if vcolors[Temprw.ProdNr]=="" then begin            vcolors[Temprw.ProdNr] = color[clrnr];            tclr = color[clrnr];            clrnr = clrnr + 1;            if clrnr==csize then begin clrnr = 0; end;          end else begin            tclr = vcolors[Temprw.ProdNr];          end;          AddProdToVector(aProdr,vProdr,prodsize,Temprw.ProdNr);          if vProdr[Temprw.ProdNr]>-1 then begin            Prodr = aProdr[vProdr[Temprw.ProdNr]];          end;          WebOutStringFormat("<div class=""job"">");          WebOutStringFormat("<div class=""prodopnr"">" & Temprw.ProdOpNr & "</div>");          WebOutStringFormat("<div class=""prodnr"" loc='" & Prodr.Location & "'>" & Temprw.ProdNr & "</div>");          WebOutStringFormat("<div class=""startdate"">" & Temprw.StartDate & "</div>");          WebOutStringFormat("<div class=""starttime"">" & Temprw.StartTime & "</div>");          WebOutStringFormat("<div class=""enddate"">" & Temprw.EndDate & "</div>");          WebOutStringFormat("<div class=""endtime"">" & Temprw.EndTime & "</div>");          WebOutStringFormat("<div class=""addclass"">" & Temprw.AddClass & "</div>");          WebOutStringFormat("<div class=""type"">" & Temprw.Type & "</div>");          WebOutStringFormat("<div class=""color"">" & tclr & "</div>");          WebOutStringFormat("<div class=""route"">" & GetOperRoute(Temprw.ProdOpNr) & "</div>");          WebOutStringFormat("<div class=""altroute"">" & GetOperAltRoute(Temprw.ProdOpNr) & "</div>");          WebOutStringFormat("<div class=""setup"">" & Temprw.SetupTime & "</div>");          WebOutStringFormat("<div class=""freeze"">" & Temprw.FixedFlag & "</div>");          WebOutStringFormat("<div class=""qty"">" & Temprw.Qty & "</div>");          WebOutStringFormat("<div class=""duration"">" & Temprw.Dur & "</div>");          WebOutStringFormat("<div class=""qty"">" & ProdOpr.Qty & "</div>");          WebOutStringFormat("<div class=""prodopname"">" & ProdOpr.Comment & "</div>");          WebOutStringFormat("<div class=""prev"">" & GetMotherProdOP(Temprw.ProdNr,ProdOpr.Sequence) & "</div>");          WebOutStringFormat("<div class=""next"">" & GetChildProdOP(Temprw.ProdNr,ProdOpr.Sequence) & "</div>");          ProdPlanAdditionInfo(ProdOpr);          ProdPlanFillOrderArr(ProdOpr,arrOrders,size);          WebOutStringFormat("<div class=""prior"">" & GetProdPrio(Temprw.ProdNr) & "</div>");          WebOutStringFormat("</div>");        end;      end;      WebOutStringFormat("</div>");      WebOutStringFormat("</div>");    end;  end;  WebOutStringFormat("</div>");  OutputOrders(arrOrders,size);  return;end;global webpublicprocedure WebGetOldPlan()begin  longint planid;  planid = StringToLongInt(WebGetArg("planid"));  SendLastPlan(planid);  return;end;global webpublicprocedure WebHWLProdPlanGetRecs()begin  string 255 tstr,sessid;  record ProdPlanSessionVc ProdSesr,ProdSes2r;  ProdSesr.SessionID = WebGetArg("sessid");  if ReadFirstMain(ProdSesr,1,true) then begin    ProdPlanWebOut(ProdSesr.SessionID);  end;  return;end;global webpublicprocedure WebGetLoadingProgress()begin  string 255 tstr,sessid;  record ProdPlanSessionVc ProdSesr,ProdSes2r;  string 255 fn;  if GetSessionString("prodsessionid")<>"" then begin    ProdSesr.SessionID = GetSessionString("prodsessionid");    if ReadFirstMain(ProdSesr,1,true) then begin      switch (ProdSesr.StatusFlag) begin        case 1: tstr = "<div class=""status"" act='done'>done</div>";                ProdPlanWebOut(ProdSesr.SessionID);                PutSessionString("prodsessionid","");        case 2: tstr = "<div class=""status"" act='aborted'>canceled</div>";        otherwise          tstr = "<div class=""status"" act='calc'><div id=""statusbar"">" & ProdSesr.StatusStr & "<a href=""#"" id=""statuscancel"" onclick=""stopsession('" & GetSessionString("prodsessionid") & "');"">" & USetStr(20177) & "</a></div></div>";      end;    end else begin      tstr = "Session Closed";      PutSessionString("prodsessionid","");    end;  end else begin    tstr = "Session Closed";    PutSessionString("prodsessionid","");  end;  WebOutStringFormat(tstr);  return;end;global webpublicprocedure WebProdPlanGetAltM()begin//  record BREqvUnitVc EUr;  record ProdVc Prodr;  string 255 res;  string 30 code,rcode;  integer rw;  record ProdPlanCoefBlock PDbl;  record ProdMachineEqVc QUr;  boolean TrHs;  record ProdOperationVc ProdOpr;  BlockLoad(PDbl);  code = webgetarg("code");  rcode = webgetarg("po");  rw = stringtoint(webgetarg("rnum"));  TrHs = true;    if PDbl.UseEqMachines == 1 then begin    QUr.Code = code;    while loopkey("Code",QUr,1,TrHs) begin      if QUr.Code <> code then begin        TrHs = false;      end else begin        if setinset(QUr.ProdEqCode,res) == false or blank(res) then begin          if nonblank(res) then begin            res = res & ",";          end;          res  = res & QUr.ProdEqCode;        end;      end;    end;    ResetLoop(QUr);    RecordNew(QUr);    QUr.ProdEqCode = code;    while loopkey("ProdEqCode",QUr,1,TrHs) begin      if QUr.ProdEqCode <> code then begin        TrHs = false;      end else begin        if setinset(QUr.ProdEqCode,res) == false or blank(res) then begin          if nonblank(res) then begin            res = res & ",";          end;          res  = res & QUr.Code;        end;      end;    end;  end;  WebOutString(res);  return;end;function boolean ProdIsStarted(longint prod)begin  record ProdOperationVc ProdOpr;  boolean TrHs,res;  res = false;  TrHs = true;  ProdOpr.ProdNr = prod;  while loopkey("ProdNrSeq",ProdOpr,1,TrHs) begin    if ProdOpr.ProdNr <> prod then begin      TrHs = false;    end else begin      if ProdOpr.PRStatusFlag <> 0 then begin        res = true;        TrHs = false;      end;    end;  end;  ProdIsStarted = res;  return;end;procedure SoundOutOneDebugString(string tstr)begin  string 255 cstr;  integer i,l;  integer parnr;  string 255 res;  l = len(tstr);  parnr = 0;  res = "<div class='debugrow' ";  for (i = 0; i < l; i = i + 1) begin    if mid(tstr,i,1)==chr(9) then begin      res = res & "col" & parnr & "='" & cstr & "' ";      parnr = parnr + 1;      cstr = "";    end else begin      cstr = cstr & mid(tstr,i,1);    end;  end;  if cstr<>"" then begin    res = res & "col" & parnr & "='" & cstr & "' ";  end;  res = res & ">";  WebOutStringFormatNL(res);  return;end;global webpublicprocedure WebProdPlanGetOperationInfo()begin  record ProdOperationVc ProdOpr;  boolean testf,TrHs;  string 10 res;  record RoutingVc Routingr,tRoutingr;  record ProdVc Prodr;  string 255 altm,tstr;  integer i,rwcnt;  row ProdVc Prodrw;  string 30 code,rcode;  integer rw;  record AT2UnitVc AT2Unitr;//  record RoutingToolsVc RToolr;  record INVc INr;  record NotePadVc Noter;  record RLinkVc RLr;  integer notenr;  integer rwc;    res = "bad";  testf = false;  if nonblank(CurrentUser) then begin    Prodr.SerNr = StringToLongInt(WebGetArg("pnr"));    if readfirstmain(Prodr,1,true) then begin      res = "ok";      if ProdIsStarted(Prodr.SerNr) then begin      end else begin        testf= true;      end;      ProdOpr.SerNr = StringToLongInt(WebGetArg("ponr"));      readfirstmain(ProdOpr,1,true);      WebOutString("<div class='status' act='" & res & "' setup='" & ProdOpr.SetupTime & "' prod='" & ProdOpr.RunTime & "' queue='" & ProdOpr.QueueTime & "'>");      WebOutText(ProdOpr,false,"");      WebOutString("</div>");      TrHs = true;      WebOutString("<div class='routes'>");      if testf then begin        WebOutString("<select name='route_code' onchange='FreezeEditField(this)'>");      end else begin        WebOutString("<select name='route_code' disabled>");      end;      Routingr.Code = Prodr.Routing;      if readfirstmain(Routingr,1,true) then begin        while loopkey("Class:" & Routingr.Classification,tRoutingr,1,TrHs) begin          if Prodr.Routing != tRoutingr.Code then begin            WebOutString("<option value='" & tRoutingr.Code & "'>" & tRoutingr.Code & "</option>");          end else begin            WebOutString("<option value='" & tRoutingr.Code & "' selected>" & tRoutingr.Code & "</option>");          end;        end;              end;      WebOutString("</select>");      WebOutString("</div>");      WebOutStringFormatNL("<div class='items'>");      Prodr.SerNr = ProdOpr.ProdNr;      if readfirstmain(Prodr,1,true) then begin        rwcnt = MatRowCnt(Prodr);        for (i = 0; i < rwcnt;i = i + 1) begin          MatRowGet(Prodr,i,Prodrw);          if Prodrw.InQty > 0 then begin            WebOutStringFormatNL("<div class='initems' code='" & Prodrw.Item & "' name='" & Prodrw.Comment & "' qty='" & (Prodrw.InQty*Prodr.Qty) & "'></div>");          end;        end;      end;      WebOutStringFormatNL("</div>");      if FileExists("EnProdPlanDebug") then begin        WebOutStringFormatNL("<div class='debuginfo'>");        notenr = 1;        while (ReadRecordLink(ProdOpr,notenr,Noter,RLr)) begin          if Noter.Classification == "DEBUG" then begin            rwc = LineTextCnt(Noter);            for (rw = 0; rw < rwc; rw = rw + 1) begin              tstr = LineTExtGet(NOter,rw);              SoundOutOneDebugString(tstr);            end;            goto ExitLoop;          end;          notenr = notenr + 1;        end;   ExitLoop:;        WebOutStringFormatNL("</div>");      end;    end;  end;  return;end;global webpublicupdating procedure WebProdUpdateProdOperation()begin  record ProdOrderVc POrdr;  record ProdOperationVc ProdOpr,tProdOpr,oldProdOpr;  record ProdVc Prodr,oldProdr;  boolean TrHs;  string 40 route;  longint prior;  boolean testf;  if nonblank(CurrentUSer) then begin    Prodr.SerNr = StringToLongInt(WebGetArg("pnr"));    ProdOpr.SerNr = StringToLongInt(WebGetArg("ponr"));    if readfirstmain(Prodr,1,true) then begin      recordCopy(oldProdr,Prodr);      testf = false;      route = webgetArg("route");      if Prodr.Routing <> route then begin        testf = true;        Prodr.Routing = route;        if RecordUpdate(oldProdr,Prodr,true)==0 then begin          //jzs-combine        /*          TrHs = true;          tProdOpr.ProdNr = Prodr.SerNr;          while loopkey("ProdNrSeq",tProdOpr,1,TrHs) begin            if tProdOpr.ProdNr <> Prodr.SerNr then begin              TrHs = false;            end else begin              recordCopy(oldProdOpr,tProdOpr);              tProdOpr.Routing = route;              if recordUpdate(oldProdOpr,tProdOpr,true)==0 then begin              end;            end;          end;          */        end;      end;      if testf == false then begin        if readfirstmain(ProdOpr,1,true) then begin          RecordCopy(oldProdOpr,ProdOpr);          WebGetText("instructions",ProdOpr);          if recordUpdate(oldProdOpr,ProdOpr,true) then begin end;        end;      end;      prior = StringToLongInt(WebGetArg("priority"));      if Prodr.ProdOrder>0 then begin        POrdr.SerNr = Prodr.ProdOrder;        if readfirstmain(POrdr,1,true) then begin          if POrdr.Priority <> prior then begin            POrdr.Priority = prior;            recordUpdate(POrdr,POrdr,true);          end;        end;      end;    end;  end;  return;end;