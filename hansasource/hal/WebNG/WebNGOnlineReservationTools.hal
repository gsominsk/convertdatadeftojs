//tools
external function string 10 CurrentWebLang();
external function boolean LoginState();
//translation
external function string 255 ToolWebNGTranslateText(integer);
//std
external function string 255 GetNextValue(var string);
external procedure GetMonthText(string,Date,var string);
remote procedure JobSumup(var record JobVc);
remote function Boolean PasteCUCodeToJob(var record JobVc,Integer);
external function Boolean FindHCUD(string,Date,string,var record HCUDVc);
external updating function LongInt JobVcRecordUpdateAfter(var record JobVc,record JobVc,LongInt,LongInt);
external function Boolean GetNextCustNr(var string);
remote procedure AddObj(String, var string);
remote function Integer JobPasteType(var record JobVc,string);
remote updating function boolean SetupJobDownPayInv(var record IVVc,record JobVc,String,boolean);
remote procedure RecordActionIV_PrintOrg(var record IVVc,string,string,Integer,boolean);
external procedure FindUserMailboxName(string,var string,var string);
external procedure ResolveMailboxNumber(var row MailVc);
external function string 255 GeneratePassword2(Integer);

global
function date OnlineResDateFromString(string datestring)
begin
  date d;

  d.year = StringToInt(left(datestring,4));
  d.month = StringToInt(mid(datestring,4,2));
  if (blank(right(datestring,2))) then begin
    d.day = 1;
  end else begin
    d.day = StringToInt(right(datestring,2));
  end;
  OnlineResDateFromString = d;
  return;
end;

global
function boolean JustLoggedInAndHasReservations()
begin
  transaction boolean gJustLoggedIn;
  record JobVc Jobr;
  boolean res;
  
  if (gJustLoggedIn) then begin
    Jobr.WebSession = ";;;" & CurrentCust;
    res = ReadFirstKey("WebSession",Jobr,1,true);
  end;
  
  JustLoggedInAndHasReservations = res;
  return;
end;

global
function string 255 GetResortName(string resort) //TODO: add translation
begin
  record ResLocVc ResLr;
  string 255 res;
  
  res = ToolWebNGTranslateText(25766) & " - " & resort;
  ResLr.Code = resort;
  if (ReadFirstMain(ResLr,1,true)) then begin
    res = ResLr.Comment;
  end;
  
  GetResortName = res;
  return;
end;

global
function string 255 GetGuestClassifcationName(string cclass)
begin
  string 255 res;
  record CClassVc CCr;
  
  res = ToolWebNGTranslateText(25767) & " - " & cclass;
  CCr.Code = cclass;
  if (ReadFirstMain(CCr,1,true)) then begin
    res = CCr.Comment;
  end;
  
  GetGuestClassifcationName = res;
  return;
end;

global
function string 255 GetRoomTypeName(string roomtype)
begin
  string 255 res;
  record ResTypeVc ResTyper;
  
  res = ToolWebNGTranslateText(25768) & " - " & roomtype;
  ResTyper.Code = roomtype;
  if (ReadFirstKey("Code",ResTyper,1,true)) begin
    res = ResTyper.Comment;
  end;

  GetRoomTypeName = res;
  return;
end;

global
function string 255 GetPackageName(string package)
begin
  string 255 res;
  record ResUsageVc ResUsager;
  
  ResUsager.Code = package;
  if (ReadFirstMain(ResUsager,1,true)) begin
    res = ResUsager.Comment;
  end;

  GetPackageName = res;
  return;
end;

global
function string 255 GetClassTermType(string cclass)
begin
  record CClassVc CCr;
  string 255 res;
  
  CCr.Code = cclass;
  if (ReadFirstMain(CCr,1,true)) then begin
    res = CCr.CType;
  end;
  GetClassTermType = res;
  return;
end;

global
procedure GetCleanMaxGuestValues(var integer maxpax,var integer maxadult,var integer maxchild)
begin
  if (maxadult>=0) then begin
    maxadult = maxadult;
  end else begin
    maxadult = 1;
  end;
  
  if (maxchild>0) then begin
    maxchild = maxchild;
  end else begin
    maxchild = 0;
  end;

  if (maxpax>0) then begin
    maxpax = maxpax;
  end else begin
    maxpax = maxadult+maxchild;
  end;
  return;
end;

global
procedure OnlineResGetTemplates(record WebNGStructVc WSr,integer step,var string templatepage,var string templateelement,integer templelementnr,var string progresselement,var boolean dontshowhead)
begin 
  record OnlineResBlock ORb;
  
  BlockLoad(ORb);
  dontshowhead = (ORb.OverrideHeadings==1);
  switch (step) begin
    case kOnlineResStepResort:
      templatepage = ORb.PageResort;
      templateelement = ORb.ElementResort;
      progresselement = ORb.ProgressResort;

    case kOnlineResStepDates:
      templatepage = ORb.PageDates;
      templateelement = ORb.ElementDates;
      progresselement = ORb.ProgressDates;

    case kOnlineResStepRooms:
      templatepage = ORb.PageRooms;
      templateelement = ORb.ElementRooms;
      progresselement = ORb.ProgressRooms;

    case kOnlineResStepGuests:
      templatepage = ORb.PageGuests;
      templateelement = ORb.ElementGuests;
      progresselement = ORb.ProgressGuests;

    case kOnlineResStepSummary:
      templatepage = ORb.PageSummary;
      templateelement = ORb.ElementSummary;
      progresselement = ORb.ProgressSummary;

    case kOnlineResStepConfirmation:
      templatepage = ORb.PageConfirmation;
      if (templelementnr==1) then begin
        templateelement = ORb.ElementConfirmationCC;
      end else begin
        templateelement = ORb.ElementConfirmation;
      end;
      progresselement = ORb.ProgressConfirmation;

    case kOnlineResAvailability:
      templatepage = ORb.PageAvailability;
      templateelement = ORb.ElementAvailability;
      progresselement = "";
      
    case kOnlineResRegister:
      templatepage = ORb.PageRegister;
      templateelement = ORb.ElementRegister;
      progresselement = "";
    
    case kOnlineResDisabled:
      templatepage = ORb.PageDisabled;
      templateelement = "";
      progresselement = "";

  end;
  if (blank(templatepage)) then begin
    templatepage = WSr.WebPage;
  end;
  return;
end;

global
procedure FillArrayWithCreditCards(array string texts,array string codes,var integer arrlen)
begin
  record CredCardTypeVc CredCardTyper;
  
  arrlen = 0;
  while (LoopMain(CredCardTyper,1,true)) begin
    if (CredCardTyper.UseOnWeb==1) then begin
      texts[arrlen] = CredCardTyper.Comment;
      codes[arrlen] = CredCardTyper.Code;
      arrlen = arrlen + 1;
    end;
  end;
  return;
end;

global
procedure FillArrayWithCountries(array string texts,array string codes,var integer arrlen)
begin
  record CountryVc Countryr;
  row CountryVc Countryrw;
  integer i,cnt;
  string 255 langcode;
  
  langcode = CurrentWebLang;
  arrlen = 0;
  while (LoopMain(Countryr,1,true)) begin
    codes[arrlen] = Countryr.Code;
    texts[arrlen] = Countryr.Comment;
    cnt = MatRowCnt(Countryr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(Countryr,i,Countryrw);
      if (Countryrw.LangCode==langcode) then begin
        texts[arrlen] = Countryrw.Text;
        i = cnt;
      end;
    end;
    arrlen = arrlen + 1;
  end;
  return;
end;

procedure FillArrayWithCountries2(array string texts,array string codes,var integer arrlen)
begin
  record WebNGCountryVc WCr;
  row WebNGCountryVc WCrw;
  integer i,cnt;
  string 255 langcode;
  
  langcode = CurrentWebLang;
  arrlen = 0;
  while (LoopKey("Comment",WCr,1,true)) begin
    codes[arrlen] = WCr.Code;
    texts[arrlen] = WCr.Comment;
    cnt = MatRowCnt(WCr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WCr,i,WCrw);
      if (WCrw.LangCode==langcode) then begin
        texts[arrlen] = WCrw.Text;
        i = cnt;
      end;
    end;
    arrlen = arrlen + 1;
  end;
  return;
end;

global
function string 255 GetMainCustomerCodeFromContact(string contactcode)
begin
  record ContactRelVc CRr;
  record CUVc CUr;
  string 255 res;
  
  res = "";
  if (nonblank(contactcode)) then begin
    CUr.Code = contactcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.CUType==0 and CUr.VEType==0 and CUr.GuestType==0 and CUr.DealerType==0) then begin
        CRr.ContactCode = contactcode;
        if (LoopKey("ContactCode",CRr,1,true)) then begin
          if (CRr.ContactCode==contactcode) then begin
            res = CRr.CustCode;
            if (LoopKey("ContactCode",CRr,1,true)) then begin
              if (CRr.ContactCode==contactcode) then begin
                res = "";
              end;
            end;
          end;
        end;
      end else begin
        res = CUr.Code;
      end;
    end;
  end;
  GetMainCustomerCodeFromContact = res;
  return;
end;

global
function string 255 CurrentOnlineResWebSession()
begin
  string 255 websess;
  
  if (blank(CurrentCust)) then begin
    websess = GetWebSessionUUID;
  end else begin
    websess = ";;;" & CurrentCust;
  end;
  CurrentOnlineResWebSession = websess;
  return;
end;

global
function LongInt GetMotherReservationForSession(string session)
begin
  record JobVc Jobr;
  longint res;
  
  Jobr.WebSession = session;
  if (ReadFirstKey("WebSession",Jobr,1,true)) then begin
    res = Jobr.SerNr;
  end;
  
  GetMotherReservationForSession = res;
  return;
end;

updating procedure ReparentReservations(longint oldparent,longint newparent,string newcust,string newcontact)
begin
  record JobVc oldJobr,Jobr;
  boolean foundf;
  
  if (oldparent>0 and newparent>0) then begin
    foundf = true;
    Jobr.Mother = oldparent;
    while (LoopKey("MotherKey",Jobr,1,foundf)) begin
      if (Jobr.Mother!=oldparent) then begin
        foundf = false;
      end;
      if (foundf) then begin
        RecordCopy(oldJobr,Jobr);
        Jobr.Mother = newparent;
        if (nonblank(newcust)) then begin
          Jobr.CUCode = newcust;
          if (PasteCUCodeToJob(Jobr,-1)) then begin
            JobSumup(Jobr);
          end;
        end;
        if (nonblank(newcontact)) then begin
          Jobr.CustContact = newcontact;
        end;
        Jobr.WebSession = "";
        
        if (RecordUpdate(oldJobr,Jobr,false)==0) then begin
          if (JobVcRecordUpdateAfter(Jobr,oldJobr,0,0)==0) then begin end;
        end;
        if (oldparent!=newparent) then begin
          StepBack(Jobr);
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure DeleteOnlineReservation(longint SerNr,boolean deletef)
begin
  record JobVc oldJobr,Jobr;
  LongInt MotherResv;
  record HotelBlock htr;
  string 255 websess;
    
  Jobr.SerNr = SerNr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    if (Jobr.Mother==-1) then begin
      MotherResv = Jobr.SerNr;
      websess = Jobr.WebSession;
    end;
    BlockLoad(htr);
    if (deletef) then begin
      RecordDelete(Jobr);
    end else begin
      Jobr.Mother = -1;
      Jobr.ResStatus = htr.WebDeletedStatus;
      Jobr.WebSession = "";
      if (RecordStore(Jobr,true)) then begin end;
    end;
    
    if (MotherResv>0) then begin
      Jobr.Mother = MotherResv;
      if (ReadFirstKey("MotherKey",Jobr,1,true)) then begin
        RecordCopy(oldJobr,Jobr);
        Jobr.Mother = -1;
        Jobr.WebSession = websess;
        if (RecordUpdate(oldJobr,Jobr,false)==0) then begin
          if (JobVcRecordUpdateAfter(Jobr,oldJobr,0,0)==0) then begin end;
        end;
        
        ReparentReservations(MotherResv,Jobr.SerNr,"","");
      end;
    end;
  end;
  return;
end;

global
updating procedure MoveReservationsBasket(string WebSession,string custcode)
begin
  record JobVc oldJobr,Jobr;
  LongInt MotherResv;
  string 255 cucode,contactname;
  record CUVc CUr;
    
  //check if we are actually using online reservations.
  if (nonblank(WebSession) and nonblank(custcode)) then begin
    cucode = GetMainCustomerCodeFromContact(custcode);
    if (nonblank(cucode)) then begin
      MotherResv = GetMotherReservationForSession(";;;" & custcode);
      Jobr.WebSession = WebSession;
      if (ReadFirstKey("WebSession",Jobr,1,true)) begin
        RecordCopy(oldJobr,Jobr);
        Jobr.Mother = MotherResv;

        CUr.Code = CurrentCust;
        if (ReadFirstMain(CUr,1,true)) then begin
          if (nonblank(CUr.Person)) then begin
            contactname = CUr.Person;
          end else begin
            contactname = CUr.Name;
          end;
        end;
        Jobr.CustContact = contactname;
        Jobr.CUCode = cucode;
          
        if (PasteCUCodeToJob(Jobr,-1)) then begin
          JobSumup(Jobr);
        end;

        if (MotherResv==-1) then begin
          Jobr.WebSession = ";;;" & custcode;
          MotherResv = Jobr.SerNr;
        end else begin
          Jobr.WebSession = "";
        end;
        if (RecordUpdate(oldJobr,Jobr,false)==0) then begin
          if (JobVcRecordUpdateAfter(Jobr,oldJobr,0,0)==0) then begin end;
        end;

        if (MotherResv!=-1) then begin
          ReparentReservations(Jobr.SerNr,MotherResv,cucode,contactname);
        end;
      end;
    end;
  end;
  return;
end;

global
procedure GetCustomerTerms(string contactcode,var string downp,var val downpprc,var string cndcode)
begin
  string 255 cucode;
  record HCUDVc HCUDr;
  record HotelBlock htr;
  
  BlockLoad(htr);
  cucode = GetMainCustomerCodeFromContact(contactcode);
  if (nonblank(cucode)) then begin
    if (FindHCUD(cucode,CurrentDate,"",HCUDr)) then begin
      downp = HCUDr.DownPayDeal;
      downpprc = HCUDr.DownPercent;
      cndcode = HCUDr.CNDCode;
    end;
  end;
  if (blank(downp)) then begin
    downp = htr.WebDownPayDeal;
    if (blank(downp)) then begin
      downp = htr.DownPayDeal;
    end;
  end;
  if (blank(downpprc)) then begin
    downpprc = htr.WebDownPercent;
    if (blank(downpprc)) then begin
      downp = htr.DownPercent;
    end;
  end;
  if (blank(cndcode)) then begin
    cndcode = htr.WebCNDCode;
    if (blank(cndcode)) then begin
      cndcode = htr.CNDCode;
    end;
  end;

  return;
end;

global
procedure RemoveGuestsFromSession(string roomtypes)
begin
  integer i,j,cnt;
  string 255 mroomtypes,node;

  PutSessionString("online_res_guests_matrix","");
  return;
end;

global
procedure StoreGuestsInSession(array integer a_resvnr,array string a_roomtype,array string a_package,array string a_guestclass,array integer a_guestqty,var integer arrlen)
begin
  integer i;

  for (i=0;i<arrlen;i=i+1) begin
    PutSessionString("online_res_guests_" & a_roomtype[i] & "_" & a_resvnr[i] & "_" & a_guestclass[i],a_guestqty[i]);
    PutSessionString("online_res_package_" & a_roomtype[i] & "_" & a_resvnr[i],a_package[i]);
  end;
  PutSessionString("online_res_guests_matrix","valid");
  return;
end;

global
function integer GetNoOfGuestsFromSession(integer resvnr,string roomtype,string guestclass)
begin
  string 255 tstr;
  
  if (GetSessionString("online_res_guests_matrix")=="valid") then begin
    tstr = GetSessionString("online_res_guests_" & roomtype & "_" & resvnr & "_" & guestclass);
  end;
  GetNoOfGuestsFromSession = StringToInt(tstr);
  return;
end;

global
function string 255 GetRoomPackageFromSession(integer resvnr,string roomtype)
begin
  string 255 tstr;
  
  if (GetSessionString("online_res_guests_matrix")=="valid") then begin
    tstr = GetSessionString("online_res_package_" & roomtype & "_" & resvnr);
  end;
  GetRoomPackageFromSession = tstr;
  return;
end;

global
procedure RemoveCCDetailsFromSession()
begin
  PutSessionString("online_res_pay_usercardtype","");
  PutSessionString("online_res_pay_usercardnumber","");
  PutSessionString("online_res_pay_usercardexpirymonth","");
  PutSessionString("online_res_pay_usercardexpiryyear","");
  PutSessionString("online_res_pay_usercardholder","");
  return;
end;

global
procedure StoreCCDetailsToSession(string usercardtype,string usercardnumber,string usercardexpirymonth,string usercardexpiryyear,string usercardholder)
begin
  PutSessionString("online_res_pay_usercardtype",usercardtype);
  PutSessionString("online_res_pay_usercardnumber",usercardnumber);
  PutSessionString("online_res_pay_usercardexpirymonth",usercardexpirymonth);
  PutSessionString("online_res_pay_usercardexpiryyear",usercardexpiryyear);
  PutSessionString("online_res_pay_usercardholder",usercardholder);
  return;
end;

global
procedure GetCCDetailsFromSession(var string usercardtype,var string usercardnumber,var string usercardexpirymonth,var string usercardexpiryyear,var string usercardholder)
begin
  usercardtype        = GetSessionString("online_res_pay_usercardtype");
  usercardnumber      = GetSessionString("online_res_pay_usercardnumber");
  usercardexpirymonth = GetSessionString("online_res_pay_usercardexpirymonth");
  usercardexpiryyear  = GetSessionString("online_res_pay_usercardexpiryyear");
  usercardholder      = GetSessionString("online_res_pay_usercardholder");
  return;
end;

global
procedure RemoveNewUserFromSession()
begin
  PutSessionString("online_res_new_user_name","");
  PutSessionString("online_res_new_user_company","");
  PutSessionString("online_res_new_user_email","");
  PutSessionString("online_res_new_user_phone","");
  PutSessionString("online_res_new_user_country","");
  return;
end;

global
procedure StoreNewUserInSession(string customername,string companyname,string email,string userphone,string usercountry)
begin
  PutSessionString("online_res_new_user_name",customername);
  PutSessionString("online_res_new_user_company",companyname);
  PutSessionString("online_res_new_user_email",email);
  PutSessionString("online_res_new_user_phone",userphone);
  PutSessionString("online_res_new_user_country",usercountry);
  return;
end;

global
procedure GetNewUserFromSession(var string customername,var string companyname,var string email,var string userphone,var string usercountry)
begin
  customername = GetSessionString("online_res_new_user_name");
  companyname  = GetSessionString("online_res_new_user_company");
  email        = GetSessionString("online_res_new_user_email");
  userphone    = GetSessionString("online_res_new_user_phone");
  usercountry  = GetSessionString("online_res_new_user_country");
  return;
end;

function boolean TestEmailAddress(string email)
begin
  boolean res;
  integer p;
  string 255 tstr;
  
  res = false;
  p = InString(email,"@");
  if (p>1) then begin
    tstr = mid(email,p,255);
    if (InString(tstr,"@")==0) then begin
      if (InString(tstr,".")>1) then begin
        if (right(tstr,1)!=".") then begin
          res = true;
        end;
      end;
    end;
  end;
  TestEmailAddress = res;
  return;
end;

function boolean EmailAlreadyExists(string email)
begin
  record CUVc CUr;
  boolean res;
  
  CUr.eMail = email;
  res = ReadFirstKey("eMail",CUr,1,true);
  
  EmailAlreadyExists = res;
  return;
end;

function integer ValidateNewUserDetails(string customername,string companyname,string email,string emailconfirm,string password,string passwordconfirm,string userphone,string usercountry,boolean requirepasswd)
begin
  integer err;

  err = 0;
  if (blank(customername)) then begin
    err = err + 1;
  end;
  if (blank(email)) then begin
    err = err + 2;
  end;
  if (blank(emailconfirm)) then begin
    err = err + 4;
  end;
  if (requirepasswd) then begin
    if (blank(password)) then begin
      err = err + 8;
    end;
    if (blank(passwordconfirm)) then begin
      err = err + 16;
    end;
  end;
  if (blank(userphone)) then begin
    err = err + 32;
  end;
  if (blank(usercountry)) then begin
    err = err + 64;
  end;
  if (email!=emailconfirm) then begin
    err = err + 128;
  end;
  if (password!=passwordconfirm) then begin
    err = err + 256;
  end;
  if (TestEmailAddress(email)==false) then begin
    err = err + 512;
  end;
//  if (TestPassword(password)==false) then begin
//    err = err + 1024;
//  end;
  if (EmailAlreadyExists(email)) then begin
    err = err + 2048;
  end;
  
  ValidateNewUserDetails = err;
  return;
end;

global
procedure ShowOnlineResValidationErrors(integer step,integer err)
begin
  record HotelBlock htr;

  if (err!=0) then begin
    WebOutTagOpen("<div class=""onlinereserror"">");
    
    WebOutTagOpen("<h3>" & ToolWebNGTranslateText(25769) & "</h3>");
    
    WebOutTagOpen("<ul>");
    
    if (err>0) then begin
      switch (step) begin
        case kOnlineResStepResort:
          if (BitAnd(err,   1)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25770) & "</li>"); end;

        case kOnlineResStepDates:
          if (BitAnd(err,   1)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25771) & "</li>"); end;
          if (BitAnd(err,   2)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25772) & "</li>"); end;
          if (BitAnd(err,   4)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25773) & "</li>"); end;
          if (BitAnd(err,   8)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25774) & "</li>"); end;
          if (BitAnd(err,  16)!=0) then begin 
            BlockLoad(htr);
            WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25775) & htr.WebMaxFutureDate & "</li>");
          end;

        case kOnlineResStepRooms:
          if (BitAnd(err,   1)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25776) & "</li>"); end;
          if (BitAnd(err,   2)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25777) & "</li>"); end;
          if (BitAnd(err,   4)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25778) & "</li>"); end;

        case kOnlineResStepGuests:
          if (BitAnd(err,   1)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25779) & "</li>"); end;
          if (BitAnd(err,   2)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25780) & "</li>"); end;
          if (BitAnd(err,   4)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25781) & "</li>"); end;
          if (BitAnd(err,   8)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25782) & "</li>"); end;
          if (BitAnd(err,  16)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25783) & "</li>"); end;
          if (BitAnd(err,  32)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25784) & "</li>"); end;
          if (BitAnd(err,  64)!=0) then begin WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25785) & "</li>"); end;

        case kOnlineResRegister:
          if (BitAnd(err,   1)!=0) then begin WebOutStringFormatNL("<li>" & "Name is a required field" & "</li>"); end;
          if (BitAnd(err,   2)!=0) then begin WebOutStringFormatNL("<li>" & "Email is a required field" & "</li>"); end;
          if (BitAnd(err,   4)!=0) then begin WebOutStringFormatNL("<li>" & "Email (confirm) is a required field" & "</li>"); end;
          if (BitAnd(err,   8)!=0) then begin WebOutStringFormatNL("<li>" & "Password is a required field" & "</li>"); end;
          if (BitAnd(err,  16)!=0) then begin WebOutStringFormatNL("<li>" & "Password (confirm) is a required field" & "</li>"); end;
          if (BitAnd(err,  32)!=0) then begin WebOutStringFormatNL("<li>" & "Phone is a required field" & "</li>"); end;
          if (BitAnd(err,  64)!=0) then begin WebOutStringFormatNL("<li>" & "Country is a required field" & "</li>"); end;
          if (BitAnd(err, 128)!=0) then begin WebOutStringFormatNL("<li>" & "Email addresses do not match" & "</li>"); end;
          if (BitAnd(err, 256)!=0) then begin WebOutStringFormatNL("<li>" & "Passwords do not match" & "</li>"); end;
          if (BitAnd(err, 512)!=0) then begin WebOutStringFormatNL("<li>" & "The provided email address is not valid" & "</li>"); end;
          if (BitAnd(err,1024)!=0) then begin WebOutStringFormatNL("<li>" & "The provided password is invalid" & "</li>"); end;
          if (BitAnd(err,2048)!=0) then begin WebOutStringFormatNL("<li>" & "The email address is already registered." & "</li>"); end;

        case kOnlineResStepSummary:
          if (BitAnd(err,   1)!=0) then begin WebOutStringFormatNL("<li>" & "Name is a required field" & "</li>"); end;
          if (BitAnd(err,   2)!=0) then begin WebOutStringFormatNL("<li>" & "Email is a required field" & "</li>"); end;
          if (BitAnd(err,   4)!=0) then begin WebOutStringFormatNL("<li>" & "Email (confirm) is a required field" & "</li>"); end;
          if (BitAnd(err,   8)!=0) then begin WebOutStringFormatNL("<li>" & "Password is a required field" & "</li>"); end;
          if (BitAnd(err,  16)!=0) then begin WebOutStringFormatNL("<li>" & "Password (confirm) is a required field" & "</li>"); end;
          if (BitAnd(err,  32)!=0) then begin WebOutStringFormatNL("<li>" & "Phone is a required field" & "</li>"); end;
          if (BitAnd(err,  64)!=0) then begin WebOutStringFormatNL("<li>" & "Country is a required field" & "</li>"); end;
          if (BitAnd(err, 128)!=0) then begin WebOutStringFormatNL("<li>" & "Email addresses do not match" & "</li>"); end;
          if (BitAnd(err, 256)!=0) then begin WebOutStringFormatNL("<li>" & "Passwords do not match" & "</li>"); end;
          if (BitAnd(err, 512)!=0) then begin WebOutStringFormatNL("<li>" & "The provided email address is not valid" & "</li>"); end;
          if (BitAnd(err,1024)!=0) then begin WebOutStringFormatNL("<li>" & "The provided password is invalid" & "</li>"); end;
          if (BitAnd(err,2048)!=0) then begin WebOutStringFormatNL("<li>" & "The email address is already registered." & "</li>"); end;
          if (BitAnd(err,4096)!=0) then begin WebOutStringFormatNL("<li>" & "An error occurred creating the downpayment." & "</li>"); end;
  /*        if (BitAnd(err,   1)!=0) then begin WebOutStringFormatNL("<li>" & "Name is a required field" & "</li>"); end;
          if (BitAnd(err,   2)!=0) then begin WebOutStringFormatNL("<li>" & "Email is a required field" & "</li>"); end;
          if (BitAnd(err,   4)!=0) then begin WebOutStringFormatNL("<li>" & "Email (confirm) is a required field" & "</li>"); end;
          if (BitAnd(err,  32)!=0) then begin WebOutStringFormatNL("<li>" & "Phone is a required field" & "</li>"); end;
          if (BitAnd(err,  64)!=0) then begin WebOutStringFormatNL("<li>" & "Country is a required field" & "</li>"); end;
          if (BitAnd(err, 128)!=0) then begin WebOutStringFormatNL("<li>" & "Email addresses do not match" & "</li>"); end;
          if (BitAnd(err, 512)!=0) then begin WebOutStringFormatNL("<li>" & "The provided email address is not valid" & "</li>"); end;
          if (BitAnd(err,2048)!=0) then begin WebOutStringFormatNL("<li>" & "The email address is already registered." & "</li>"); end;*/

      end;
    end else begin
      WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(25786) & err & "</li>");
    end;
    
    WebOutTagClose("</ul>");
    
    WebOutTagClose("</div>");
    
    PutSessionString("online_res_error","");
  end;
  return;
end;

global
updating function integer CreateNewOnlineResUser(string customername,string companyname,string email,string emailconfirm,string password,string passwordconfirm,string userphone,string usercountry,boolean requirepasswd,var string newcucode,var string newpasswd)
begin
  integer err;
  boolean useexisting;
  record CUVc CUr,defCUr;
  record HotelBlock htr;

  newcucode = "";
  newpasswd = "";
  useexisting = false;

  err = ValidateNewUserDetails(customername,companyname,email,emailconfirm,password,passwordconfirm,userphone,usercountry,requirepasswd);
  
/*  if (requirepasswd==false and err==2048) then begin
    err = 0;
    CUr.eMail = email;
    if (ReadFirstMain(CUr,1,true)) then begin end;
    newcucode = CUr.Code;
    useexisting = true;
  end;*/

  if (err==0 and useexisting==false) then begin
    BlockLoad(htr);
    
    RecordNew(CUr);

    if (GetNextCustNr(newcucode)) then begin end;
    CUr.Code = newcucode;

    CUr.AllowLogin = 1;
    CUr.CUType = 1;
    CUr.CustCat = htr.WebDefCustCat;
    if (blank(CUr.CustCat)) then begin
      CUr.CustCat = "WWW";
    end;
    
    if (nonblank(companyname)) then begin
      CUr.Name = companyname;
      CUr.Person = customername;
    end else begin
      CUr.Name = customername;
    end;
    CUr.eMail = email;
    CUr.Phone = userphone;
    CUr.CountryCode = usercountry;
    
    if (nonblank(htr.WebDefCust)) then begin
      defCUr.Code = htr.WebDefCust;
      if (ReadFirstMain(defCUr,1,true)) then begin
        CUr.Classification = defCUr.Classification;
        CUr.ShipDeal = defCUr.ShipDeal;
        CUr.ShipMode = defCUr.ShipMode;
        CUr.PayDeal = defCUr.PayDeal;
        CUr.CreditLimit = defCUr.CreditLimit;
        CUr.IntRate = defCUr.IntRate;
        CUr.PLCode = defCUr.PLCode;
        CUr.RebCode = defCUr.RebCode;
        CUr.SalesMan = defCUr.SalesMan;
        CUr.SalesGroup = defCUr.SalesGroup;
        CUr.CurncyCode = defCUr.CurncyCode;
        CUr.LangCode = defCUr.LangCode;
        CUr.VATCode = defCUr.VATCode;
        CUr.ExportFlag = defCUr.ExportFlag;
        CUr.AccAP = defCUr.AccAP;
        CUr.AccCost = defCUr.AccCost;
        CUr.OnAccAccAP = defCUr.OnAccAccAP;
        CUr.Objects = defCUr.Objects;
      end;
    end;
    
    newpasswd = password;
    if (requirepasswd==false and blank(newpasswd)) then begin
      newpasswd = GeneratePassword2(8);
    end;
    
    WebStoreCust(CUr,newpasswd);
  end;
  
  CreateNewOnlineResUser = err;
  return;
end;

procedure SetPostmasterMailTo(record MailVc Mailr,string cucode)
begin
  record MailSettingsBlock MSr;
  record MailVc oldMailr;
  row MailVc Mailrw;
  string 255 mailboxnr, tstr;
  string 100 fname;
  record CUVc CUr;
  
  BlockLoad(MSr);

  CUr.Code = cucode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  
  Mailrw.RowTyp = 1;
  Mailrw.AddrCode = MSr.Postmaster;
  ResolveMailboxNumber(Mailrw);
  MatRowPut(Mailr,0,Mailrw);
  
  Mailrw.RowTyp = 0;
  Mailrw.AddrCode = CUr.eMail;
  MatRowPut(Mailr,1,Mailrw);
  
  Mailr.TransDate = CurrentDate;
  
  return;
end;

updating procedure PrintAndAttachInvoice(record MailVc Mailr,record IVVc IVr)
begin
  string 255 fname;

  fname = "tmp/resv" & IVr.JobNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  RecordActionIV_PrintOrg(IVr,"","",0,true);
  RecordLinkFile(fname,0,Mailr,CurrentCompany);
  SetDocumentFilename("");
  Delete_File(fname);

  return;
end;

updating procedure OnlineResMailIVToCustomer(string cucode,record IVVc IVr)
begin
  record MailVc oldMailr,Mailr;
  
  SetPostmasterMailTo(Mailr,cucode);
  
  Mailr.Header = ToolWebNGTranslateText(25787) & "(" & IVr.JobNr & ")";
  LineTextPut(Mailr,LineTextCnt(Mailr),ToolWebNGTranslateText(25788));
  
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,true)) then begin
    RecordCopy(oldMailr,Mailr);
    PrintAndAttachInvoice(Mailr,IVr);
    Mailr.SendFlag = 1;
    if (RecordUpdate(oldMailr,Mailr,true)==0) then begin end;
  end;
  return;
end;

global
updating function integer CreateInvoiceForBookings(string session)
begin
  record JobVc Jobr;
  record IVVc oldIVr,IVr;
  integer err,res;
  string 255 cucode;
  record OnlineResBlock OSr;
  record HotelBlock Hotelb;
  string 255 downp,cndcode;
  val downpprc;
  
  err = 0;
  BlockLoad(OSr);
  BlockLoad(Hotelb);
  GetCustomerTerms(CurrentCust,downp,downpprc,cndcode);

  if (OSr.PayTypeInvoice==1 and downpprc>0) then begin
    cucode = "";
    if (left(session,3)==";;;") then begin
      cucode = right(session,len(session)-3);
      cucode = GetMainCustomerCodeFromContact(cucode);
    end;
    if (nonblank(cucode)) then begin
      Jobr.SerNr = GetMotherReservationForSession(session);
      if (ReadFirstMain(Jobr,1,true)) then begin
        if (SetupJobDownPayInv(IVr,Jobr,cucode,true)) then begin
          RecordCopy(oldIVr,IVr);
          IVr.OKFlag = 1;
          res = RecordUpdate(oldIVr,IVr,true);
          if (OSr.SendInvoiceMail==1) then begin
            OnlineResMailIVToCustomer(right(session,len(session)-3),IVr);
          end;
          err = 0;
        end else begin
          err = 4096;
        end;
      end else begin
        err = -2;
      end;
    end else begin
      err = -1;
    end;
  end;
  
  CreateInvoiceForBookings = err;
  return;
end;

global
updating procedure ClearOpenReservations(string session)
begin
  record JobVc Jobr,oldJobr;
  record HotelBlock htr;
  boolean foundf;
    
  BlockLoad(htr);
  foundf = true;
  Jobr.WebSession = session;
  while (LoopKey("WebSession",Jobr,1,foundf)) begin
    if (Jobr.WebSession!=session) then begin
      foundf = false;
    end;
    if (foundf) then begin
      RecordCopy(oldJobr,Jobr);
      Jobr.WebSession = "";
      if (nonblank(htr.WebWaitPayStatus)) then begin
        Jobr.ResStatus = htr.WebWaitPayStatus;
      end;
      if (RecordUpdate(oldJobr,Jobr,false)==0) then begin end;
      StepBack(Jobr);
    end;
  end;
  
  return;
end;

global
updating procedure BuildNewReservation(string resort,date sd,date ed,array integer a_resvnr,array string a_roomtype,array string a_package,array string a_guestclass,array integer a_guestqty,integer arrlen)
begin
  integer i,j,currentresv,err;
  record JobVc Jobr;
  row JobVc Jobrw;
  record HotelBlock htr;
  string 255 objs;
  record ResUsageVc ResUsager;
  record CUVc CUr;
  string 255 currentroomtype;
  
  BlockLoad(htr);
  currentresv = -1;
  for (i=0;i<arrlen;i=i+1) begin
    if (a_guestqty[i]>0) then begin
      if (currentresv!=a_resvnr[i] or currentroomtype!=a_roomtype[i]) then begin
        if (currentresv!=-1) then begin
          if (PasteCUCodeToJob(Jobr,-1)) then begin
            JobSumup(Jobr);
          end;
          
          Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,"");
          if (RecordStore(Jobr,true)) then begin end;
        end;
        
        currentresv = a_resvnr[i];
        currentroomtype = a_roomtype[i];
        
        RecordNew(Jobr);
        
        Jobr.TransDate = sd;
        Jobr.EndDate = ed;

        Jobr.Persons = 0;
        Jobr.Children = 0;
        
        Jobr.Type = a_roomtype[i];
        err = JobPasteType(Jobr,"");

        if (nonblank(a_package[i])) then begin
          Jobr.ResUsage = a_package[i];

          ResUsager.Code = Jobr.ResUsage;
          if (ReadFirstMain(ResUsager,1,true)) then begin
            objs = Jobr.Objects;
            AddObj(ResUsager.Objects,objs);
            Jobr.Objects = objs;    
          end;
        end;
        
        Jobr.BookOrigin = htr.WebBookOrigin;
        Jobr.ResStatus = htr.WebResStatus;
        
        Jobr.Mother = GetMotherReservationForSession(CurrentOnlineResWebSession);
        
        if (Jobr.Mother==-1) then begin
          Jobr.WebSession = CurrentOnlineResWebSession;
        end;

        if (LoginState) then begin
          Jobr.CUCode = GetMainCustomerCodeFromContact(CurrentCust);
          if (nonblank(Jobr.CUCode) and Jobr.CUCode!=CurrentCust) then begin
            CUr.Code = CurrentCust;
            if (ReadFirstMain(CUr,1,true)) then begin
              if (nonblank(CUr.Person)) then begin
                Jobr.CustContact = CUr.Person;
              end else begin
                Jobr.CustContact = CUr.Name;
              end;
            end;
          end;
        end;
        if (blank(Jobr.CUCode)) then begin
          Jobr.CUCode = htr.WebDefCust;
        end;
      end;
      
      if (GetClassTermType(a_guestclass[i])==htr.CClassDCTypeChild) then begin
        Jobr.Children = Jobr.Children + a_guestqty[i]; //no of children
      end else begin
        Jobr.Persons = Jobr.Persons + a_guestqty[i]; //no of guests
      end;
      
      for (j=0;j<a_guestqty[i];j=j+1) begin
        ClearRow(Jobr,Jobrw,1);
        Jobrw.CClass = a_guestclass[i];
        MatRowPut(Jobr,MatRowCnt(Jobr),Jobrw);
      end;
    end;
  end;

  if (currentresv!=-1) then begin
    if (PasteCUCodeToJob(Jobr,-1)) then begin
      JobSumup(Jobr);
    end;
    Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,"");
    if (RecordStore(Jobr,true)) then begin end;
  end;
  
  return;
end;

procedure AddBit(var integer err,integer bitnr)
begin
  if (BitAnd(err,bitnr)==0) then begin
    err = err + bitnr;
  end;
end;

procedure ValidateGuestsCounts(var integer err,string roomtype,integer adultcnt,integer childcnt)
begin
  record ResTypeVc ResTyper;
  integer maxpax,maxadult,maxchild;

  ResTyper.Code = roomtype;
  if (ReadFirstMain(ResTyper,1,true)) then begin
    maxpax = ResTyper.MaxPax;
    maxadult = ResTyper.MaxPersons;
    maxchild = ResTyper.MaxChildren;
    GetCleanMaxGuestValues(maxpax,maxadult,maxchild);
    if (adultcnt>maxadult) then begin
      AddBit(err,4);
    end;
    if (childcnt>maxchild) then begin
      AddBit(err,8);
    end;
    if (adultcnt+childcnt>maxpax) then begin
      AddBit(err,16);
    end;
    if (adultcnt+childcnt==0) then begin
      AddBit(err,32);
    end;
  end else begin
    AddBit(err,2);
  end;

  return;
end;

global
function integer ValidateRoomsGuestsPostDetails(array integer a_resvnr,array string a_roomtype,array string a_guestclass,array integer a_guestqty,var integer arrlen)
begin
  integer i,adultcnt,childcnt,totalcnt,err,rows,currsvnr;
  string 255 curroomtype;
  record HotelBlock htr;
  
  BlockLoad(htr);
  err = 0;
  adultcnt = 0;
  childcnt = 0;
  totalcnt = 0;
  currsvnr = -1;
  for (i=0;i<arrlen;i=i+1) begin
    if (currsvnr!=a_resvnr[i] or curroomtype!=a_roomtype[i]) then begin
      if (currsvnr!=-1) then begin
        ValidateGuestsCounts(err,curroomtype,adultcnt,childcnt);
      end;
      curroomtype = a_roomtype[i];
      currsvnr = a_resvnr[i];
      adultcnt = 0;
      childcnt = 0;
    end;
    if (GetClassTermType(a_guestclass[i])==htr.CClassDCTypeChild) then begin
      childcnt = childcnt + a_guestqty[i];
      totalcnt = totalcnt + a_guestqty[i];
    end else begin
      adultcnt = adultcnt + a_guestqty[i];
      totalcnt = totalcnt + a_guestqty[i];
    end;
  end;
  ValidateGuestsCounts(err,curroomtype,adultcnt,childcnt);
  if (totalcnt<=0) then begin
    AddBit(err,64);
  end;
  ValidateRoomsGuestsPostDetails = err;
  return;
end;