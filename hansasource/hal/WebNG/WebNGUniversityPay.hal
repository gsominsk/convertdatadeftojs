//tools
external function string 10 CurrentWebLang();
//translation
external function string 255 ToolWebNGTranslateText(integer);
//university
external procedure RedirectToUniversityFunction(string,string);
external procedure UniversityRedirectToError(longint,string,string);
external updating procedure UniversityStoreBooking2(longint,longint,longint,string,string,string,string,string,
                              string,string,string,string,string,
                              string,string,string,string,string,string,string,
                              string,string,string,string);
external procedure GetApplicationFormValues2(longint,var string,var string,var string,var string,var string,
                              var string,var string,var string,var string,var string,
                              var string,var string,var string,var string,var string,var string,var string,
                              var string,var string,var string,var string,var integer);
//webng
external procedure RedirectToURL(string);
//std
external procedure IVVc_PastePayDeal(var record IVVc,string,string);
external procedure GetBaseCurncy(Integer,var string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean PasteCustInOR(var record ORVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure ORSumup(var record ORVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function string 255 FindINObjects(string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
remote updating function Integer RecordAction_raPasteOrdInInv(var record IVVc,LongInt,Boolean,var Integer);
external updating function LongInt DoHWUStoreTheOrder(string,string,val,val,string,string,string,string,string);
external function string 5 FindBestCreditCardCurrency(string);
external procedure GetCustDetails(string,var string,var string,var string,var string,var string,var string,var string);
external updating function boolean OpenCCPurchaseTransaction(val,string,string,string,var string,string,string,string,string,string,string,
                                                              integer,string,integer,
                                                              string,string,string,string,string,string,string,
                                                              var LongInt,var string);
external function Integer GetCCPurchaseParameters(string,string,integer,var string,var string,var string,var string,
                                          var string,var string,var integer,var string,var integer);

function val CountParticipants(string personname1,string personname2,string personname3,string personname4,string personname5)
begin
  integer i,cnt;
  string 255 tstr;
  
  cnt = 0;
  for (i=1;i<=5;i=i+1) begin
    switch (i) begin
      case 1: tstr = personname1;
      case 2: tstr = personname2;
      case 3: tstr = personname3;
      case 4: tstr = personname4;
      case 5: tstr = personname5;
      otherwise
        tstr = "";
    end;
    if (nonblank(tstr)) then begin cnt = cnt + 1; end;
  end;
  
  CountParticipants = cnt;
  return;
end;

procedure SplitText(string intext,var string name,var string value)
begin
  integer i,cnt;
  boolean before;
  string 5 ch;
  
  before = true;
  name = "";
  value = "";
  for (i=0;i<len(intext);i=i+1) begin
    ch = mid(intext,i,1); 
    if (ch=="=") then begin
      before = false;
    end else begin
      if (before) then begin
        name = name & ch;
      end else begin
        value = value & ch;
      end;
    end;
  end;
  return;
end;

procedure GetBookingParameters(longint orderno,var longint courseno,var string personname1,var string personname2,var string personname3,var string personname4,var string personname5,
                              var string companyname,var string department,var string title,var string addr1,var string postalcode,var string city,var string country,var string phone,
                              var string email,var string orderperson,var string custcode)
begin
  record ORVc ORr;
  row ORVc ORrw;
  integer i,cnt;
  string 255 name,value;
  
  ORr.SerNr = orderno;
  if (ReadFirstMain(ORr,1,true)) then begin
    cnt = MatRowCnt(ORr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ORrw.stp==17) then begin //consider only "header lines"
        SplitText(ORrw.Spec,name,value);
        switch (name) begin
          case "courseno" : courseno = StringToLongint(value);
          case "personname1" : personname1 = value;
          case "personname2" : personname2 = value;
          case "personname3" : personname3 = value;
          case "personname4" : personname4 = value;
          case "personname5" : personname5 = value;
          case "companyname" : companyname = value;
          case "department": department = value;
          case "title": title = value;
          case "addr1": addr1 = value;
          case "postalcode" : postalcode = value;
          case "city" : city = value;
          case "country" : country = value;
          case "phone" : phone = value;
          case "email" : email = value;
          case "orderperson": orderperson = value;
          case "custcode": custcode = value;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure AddParamsToOrder(var record ORVc ORr,longint courseno,string personname1,string personname2,string personname3,string personname4,string personname5,
                              string companyname,string department,string title,string addr1,string postalcode,string city,string country,
                              string phone,string email,string orderperson,string custcode,string txnumber)
begin
  array string 20 args;
  integer i,cnt;
  record ORVc oldORr;
  row ORVc ORrw;
  
  RecordCopy(oldORr,ORr);
  ORr.Addr0 = txnumber;
  ORr.Closed = 1; //to mark is as temporary
  
  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "courseno=" & courseno;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "personname1=" & personname1;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "personname2=" & personname2;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "personname3=" & personname3;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "personname4=" & personname4;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "personname5=" & personname5;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "companyname=" & companyname;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "department=" & department;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "title=" & title;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "addr1=" & addr1;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "postalcode=" & postalcode;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "city=" & city;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "country=" & country;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);
  
  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "phone=" & phone;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "email=" & email;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "orderperson=" & orderperson;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  ClearRow(ORr,ORrw,17);
  ORrw.Spec = "custcode=" & custcode;
  MatRowPut(ORr,MatRowCnt(ORr),ORrw);

  if (RecordUpdate(oldORr,ORr,false)) then begin end;
  
  return;
end;

updating procedure RemoveParamsFromOrder(var record ORVc ORr)
begin
  record ORVc oldORr;
  record CUVc CUr;
  row ORVc ORrw;
  integer i,cnt;
  
  RecordCopy(oldORr,ORr);
  CUr.Code = ORr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    ORr.Addr0 = CUr.Name;
  end else begin
    ORr.Addr0 = "";
  end;
  
  ORr.Closed = 0; //this is no longer a temp invoice

  cnt = MatRowCnt(ORr);
  for (i=cnt-1;i>=0;i=i-1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.stp==17) then begin
      MatRowDelete(ORr,i);
    end;
  end;
  
  if (RecordUpdate(oldORr,ORr,false)) then begin end;
  return;
end;

function Boolean BuildUnivWebOrd(string custcode,var record ORVc ORr,string itemcode,val participantqty,val courseprice,string langcode)
begin
  record CCatVc CCatr;
  row ORVc ORrw;
  record INVc INr;
  record PIVc PIr;
  string 100 ckey,tax2code;
  Integer rwcnt;
  Boolean Accs;
  Boolean testf,error,frf;
  Date tpd;
  Boolean res,dummyf;
  val rowsum,s,t,sum,totwe,tax2prc;
  Longint order_number;
  string 20 curitemno;
  string 100 curitemname,vecode;
  string 20 salesacc,vatcode,taxtemplatecode;
  val price,reb,cost,qty,instock;
  Boolean calcprice;
  val fr,to1,to2,br1,br2;
  record GeneralOptionBlock GenOptRec;
  record WebFreightVc WFr;
  record CUVc CUr;
  string 10 basecur1;
  string 5 ovrcurrency;
  record TaxMatrixVc TMr;
  Time blankt;

  GetBaseCurncy(1,basecur1);
  BlockLoad(GenOptRec);
  totwe = 0;
  res = false;
  rwcnt = 0;
  ovrcurrency = ORr.CurncyCode;
  RecordNew(ORr);
  ORr.CustCode = custcode;
  if (PasteCustInOR(ORr)) then begin
    ORr.CurncyCode = ovrcurrency;
    GetFullCurncyRate(ORr.CurncyCode,ORr.OrdDate,fr,to1,to2,br1,br2);
    ORr.FrRate = fr;
    ORr.ToRateB1 = to1;
    ORr.ToRateB2 = to2;
    ORr.BaseRate1 = br1;
    ORr.BaseRate2 = br2;
    
    if (ORr.CustCat<>"") then begin
      CCatr.Code = ORr.CustCat;
      if (ReadFirstMain(CCatr,1,true)) then begin
        ORr.OrderClass = CCatr.WebOrderClass;
      end;
    end;
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      WFr.Code = CUr.FreightCode;
      frf = ReadFirstMain(WFr,1,true);
    end;

    if (true) then begin
      testf = true;
      INr.Code = itemcode;
      if (ReadFirstMain(INr,1,true)==false) then begin testf = false; end;
      if (testf) then begin
        ClearRow(ORr,ORrw,1);
        reb = BlankVal;
        price = BlankVal;
        cost = BlankVal;
        salesacc = "";
        vatcode = "";
        vecode = "";
        ORrw.vRebate = BlankVal;
        ORrw.stp = 1;
        ORrw.ArtCode = itemcode;
        ORrw.Quant = participantqty;
        qty = ORrw.Quant;
        curitemno = ORrw.ArtCode;
        if (GetItemPriceDiscount3(curitemno,qty,INr,ORr.CurncyCode,
                  ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                  langcode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
                  price,curitemname,reb,vatcode,cost,salesacc,
                  ORr.ExportFlag,calcprice,CurrentDate,blankt,custcode,true,dummyf,ORr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
          if (price==0) then begin
            price = courseprice;
          end;
          ORrw.Price = price;
          ORrw.vRebate = reb;
          ORrw.VATCode = vatcode;
          ORrw.BasePrice = cost;
          ORrw.SalesAcc = salesacc;
          ORrw.Spec = curitemname;
          ORrw.Objects = FindINObjects(INr.Objects,INr.Group);
        end;
        if (blank(ORrw.Spec)) then begin
          ORrw.Spec = INr.Name;
        end;
        CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,rowsum,GenOptRec.UseDiscount);
        ORrw.Sum = rowsum;
        if (nonblank(ORrw.ArtCode)) then begin
          t = qty*ORrw.BasePrice;
          if (ORrw.PriceFactor!=0) then begin
            t = t/ORrw.PriceFactor;
          end;
          sum = ORrw.Sum;
          s = MulRateToBase1(ORr.CurncyCode,sum,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
          UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
          FindSalesExVat(TMr,ORrw.VATCode,s,ORr.InclVAT,ORr.NoTAXonVAT,rowsum);
          ORrw.rowGP = rowsum - t;      /* GP    */
        end else begin
          ORrw.rowGP = 0;
          ORrw.BasePrice = 0;
        end;        
        MatRowPut(ORr,rwcnt,ORrw);
        switch (WFr.BasedOn) begin
          case 0: totwe = totwe + ORrw.Quant*INr.Volume;
          case 1: totwe = totwe + ORrw.Quant*INr.Weight;
          case 2: 
            if (INr.Volume>INr.Weight) then begin
              totwe = totwe + ORrw.Quant*INr.Volume;
            end else begin
              totwe = totwe + ORrw.Quant*INr.Weight;
            end;
          case 3: totwe = totwe + ORrw.Quant;
          case 4: totwe = totwe + ORrw.Sum;
        end;
        rwcnt = rwcnt + 1;
      end;
    end;
  end;
  ORSumup(ORr);
  if (rwcnt>0) then begin res = true; end;
  BuildUnivWebOrd = res;
  return;
end;

procedure SetCCPayTerm(var record ORVc ORr,string ccpaytype)
begin
  record CredCardTypeVc CredCardTyper;
  record WebControlBlock WCb;
  
  CredCardTyper.Code = ccpaytype;
  if (ReadFirstMain(CredCardTyper,1,true)) then begin
    ORr.PayDeal = CredCardTyper.PayTerm;
  end;
  if (blank(ORr.PayDeal)) then begin
    BlockLoad(WCb);
    ORr.PayDeal = WCb.CCPayTerm;
  end;
  return;
end;

procedure SetIVPayTerm(var record ORVc ORr)
begin
  record CustomerSettingBlock CSr;
  record PDVc PDr;
  
  BlockLoad(CSr);
  if (nonblank(CSr.DefPayDeal)) then begin
    ORr.PayDeal = CSr.DefPayDeal;
  end else begin
    if (LoopMain(PDr,0,true)) then begin
      ORr.PayDeal = PDr.Code;
    end;
  end;
  
  return;
end;

procedure DoUnivBuildTheOrder(string custcode,string itemcode,val qty,val courseprice,string ovrpaydeal,string shipmode,string deladdrcode,string custordnr,string ovrcurrency,var record ORVc ORr,
                            string personname1,string personname2,string personname3,string personname4,string personname5)
begin
  record INVc INr;
  record IVVc IVr;
  record IVVc oldIVr;
  record ShopBaskVc ShopBaskr;
  record ShopBaskVc oldShopBaskr;
  record DelAddrVc DelAddrr;
  row ORVc ORrw;
  string 60 cunamn;
  Integer error;
  Integer i;
  val totqty;
  Boolean okflag,freightf;
  Boolean foundf,testf;
  LongInt invno;
  record ORVc oldORr;
  record WebControlBlock WebControlr;
  string 5 ordclass,newordclass;
  record MainStockBlock MainStockr;
  LongInt baskno;
  LongInt orderno;
  Integer cei;
  string 255 tstr;

  baskno = -1;
  orderno = -1;
  invno = -1;
  BlockLoad(WebControlr);
  BlockLoad(MainStockr);
  
  okflag = BuildUnivWebOrd(custcode,ORr,itemcode,qty,courseprice,CurrentWebLang); //TODO : check lang
  if (nonblank(ovrcurrency)) then begin
    if (ovrcurrency!=ORr.CurncyCode) then begin
      RecordNew(ORr);
      ORr.CurncyCode = ovrcurrency;
      okflag = BuildUnivWebOrd(custcode,ORr,itemcode,qty,courseprice,CurrentWebLang); //TODO : check lang
    end;
  end;
  if (okflag) then begin
    ordclass = "WEB";
    newordclass = "WEB";
    if nonblank(WebControlr.FirstORClass) then begin
      newordclass = WebControlr.FirstORClass;
    end;
    if nonblank(WebControlr.ORClass) then begin
      ordclass = WebControlr.ORClass;
    end;
    ORr.OrderClass = newordclass;
    oldORr.CustCode = custcode;
    if ReadFirstKey("CustCode",oldORr,1,true) begin
      ORr.OrderClass = ordclass;
    end;
    ordclass = ORr.OrderClass;
    ORr.ShipMode = shipmode;
    ORr.DelAddrCode = deladdrcode;
    if (ORr.DelAddrCode<>"") then begin
      DelAddrr.CustCode = custcode;
      DelAddrr.DelCode = ORr.DelAddrCode;
      if (ReadFirstMain(DelAddrr,2,true)) then begin
        ORr.ShipAddr0 = ORr.Addr0;
        ORr.ShipAddr1 = DelAddrr.DelAddr0;
        ORr.ShipAddr2 = DelAddrr.DelAddr1;
        ORr.ShipAddr3 = DelAddrr.DelAddr2;
        ORr.DelAddr3 = DelAddrr.DelAddr3;
        ORr.DelAddr4 = DelAddrr.DelAddr4;
        ORr.Region = DelAddrr.Region;
      end;
    end;
    if (blank(ORr.CustOrdNr)) then begin
      ORr.CustOrdNr = ORr.SerNr;//custordnr;
    end;
    if (nonblank(ovrpaydeal)) then begin
      ORr.PayDeal = ovrpaydeal;
    end else begin
      if (blank(ORr.PayDeal)) then begin
        SetIVPayTerm(ORr);
      end;
    end;
    ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
    if (ORr.SerNr>0) then begin
      // not entirely sure 'bout this one, especially the second part
      // not needed as function is in halcust, but consider it for standard
      if (WebControlr.ShopBaskCheckOut==1) then begin
        ORr.InvBeforeShip = 1;
      end else begin
        if (MainStockr.AllowInvBeforeShip==1) then begin
          ORr.InvBeforeShip = 1;
        end;
      end;
      for (i=1;i<=5;i=i+1) begin
        switch (i) begin
          case 1: tstr = personname1;
          case 2: tstr = personname2;
          case 3: tstr = personname3;
          case 4: tstr = personname4;
          case 5: tstr = personname5;
        end;
        if (nonblank(tstr)) then begin
          ClearRow(ORr,ORrw,1);
          ORrw.Spec = tstr;
          MatRowPut(ORr,MatRowCnt(ORr),ORrw);
        end;
      end;
    end;
    orderno = ORr.SerNr;
  end;
  
  return;
end;

updating function LongInt DoUnivStoreTheOrder(string custcode,string itemcode,val qty,val courseprice,string ovrpaydeal,string shipmode,string deladdrcode,string custordnr,string ovrcurrency,
                                              string personname1,string personname2,string personname3,string personname4,string personname5)
begin
  record ORVc ORr;
  boolean okflag;
  
  DoUnivBuildTheOrder(custcode,itemcode,qty,courseprice,ovrpaydeal,shipmode,deladdrcode,custordnr,ovrcurrency,ORr,personname1,personname2,personname3,personname4,personname5);
  
  okflag = RecordStore(ORr,true);
  if (okflag==false) then begin
    ORr.SerNr = -1;
  end;
  
  DoUnivStoreTheOrder = ORr.SerNr;
  return;
end;

updating function LongInt UniversityCreateIVFromOrder(LongInt orderno,string ovrpaydeal)
begin
  record IVVc IVr,oldIVr;
  LongInt invno;
  integer errcode;
  integer res;
  
  invno = -1;
  RecordNew(IVr);
  IVr.OrderNr = orderno;
  res = RecordAction_raPasteOrdInInv(IVr,orderno,false,errcode);
  if (res==0) then begin 
    invno = IVr.SerNr;
    if (nonblank(ovrpaydeal)) then begin
      RecordCopy(oldIVr,IVr);
      IVr.PayDeal = ovrpaydeal;
      IVVc_PastePayDeal(IVr,"","");
      if (RecordUpdate(oldIVr,IVr,true)) then begin end;
    end;
  end else begin        
//    invno = IVr.SerNr; we failed to create invoice, why  to store nr in course evenr row ? 
  end;

  UniversityCreateIVFromOrder = invno;  
  return;
end;

updating procedure UniversityPayWithInvoice(longint courseno,string personname1,string personname2,string personname3,string personname4,string personname5,
                              string personmail1,string personmail2,string personmail3,string personmail4,string personmail5,
                              string companyname,string department,string title,string addr1,string postalcode,string city,string country,
                              string phone,string email,string orderperson,string custcode)
begin
  LongInt invno,orderno;
  record CourseEventVc CourseEventr;
  record CourseVc Courser;
  val cnt;

  PutSessionString("hwu_pay_invno","");
  PutSessionString("hwu_pay_orderno","");
  PutSessionString("hwu_pay_ccnumber","");

  CourseEventr.SerNr = courseno;
  if (ReadFirstMain(CourseEventr,1,true)) then begin end;
  Courser.Code = CourseEventr.CourseCode;
  if (ReadFirstMain(Courser,1,true)) then begin end;

  cnt = CountParticipants(personname1,personname2,personname3,personname4,personname5);
  orderno = DoHWUStoreTheOrder(CurrentCust,Courser.ItemCode,cnt,CourseEventr.Price,"","","","","");
  invno = UniversityCreateIVFromOrder(orderno,"");
  
  if (invno>=0) then begin
    PutSessionString("hwu_pay_invno",invno);
    PutSessionString("hwu_pay_orderno",orderno);

    // return to HWU pages, create course event as per normal.
    UniversityStoreBooking2(invno,orderno,courseno,personname1,personname2,personname3,personname4,personname5,
                          personmail1,personmail2,personmail3,personmail4,personmail5,
                          companyname,department,title,addr1,postalcode,city,country,phone,email,orderperson,custcode);
    
    // redirect to completed page
    RedirectToUniversityFunction("apply",courseno & "/step3/");
  end else begin
     //WebHWUShowErrorWindow
    UniversityRedirectToError(courseno,ToolWebNGTranslateText(30056),ToolWebNGTranslateText(30057));
  end;
  
  return;
end;

updating function longint UniversityCreateTemporaryOrder(longint courseno,string custcode,string personname1,string personname2,string personname3,string personname4,string personname5,var val localamount,var string localcurrency)
begin
  record CourseEventVc CourseEventr;
  record CourseVc Courser;
  record ORVc ORr;
  val cnt;
  string 255 tmpcur;
  longint orderno;
  record WebControlBlock WCb;
  string 255 ovrpaydeal;
  
  CourseEventr.SerNr = courseno;
  if (ReadFirstMain(CourseEventr,1,true)) then begin end;
  Courser.Code = CourseEventr.CourseCode;
  if (ReadFirstMain(Courser,1,true)) then begin end;

  cnt = CountParticipants(personname1,personname2,personname3,personname4,personname5);

  BlockLoad(WCb);
  ovrpaydeal = WCb.CCPayTerm;

  RecordNew(ORr);
  DoUnivBuildTheOrder(custcode,Courser.ItemCode,cnt,CourseEventr.Price,ovrpaydeal,"","","","",ORr,personname1,personname2,personname3,personname4,personname5); //temp build to get local currency & amount
    
  localcurrency = ORr.CurncyCode;
  localamount = ORr.Sum4;

  tmpcur = FindBestCreditCardCurrency(ORr.CurncyCode);
  if (tmpcur==localcurrency) then begin
    tmpcur = ""; //dont override currency
  end;
  
  orderno = DoUnivStoreTheOrder(custcode,Courser.ItemCode,cnt,CourseEventr.Price,ovrpaydeal,"","","",tmpcur,personname1,personname2,personname3,personname4,personname5);
  
  UniversityCreateTemporaryOrder = orderno;
  return;
end;

updating function integer UniversityStartCCTransaction(var string txnumber,val amount,string currency)
begin
  string 255 frompayurl;
  string 20 partner;
  string 60 merchantid;
  string 20 merchantcode;
  string 10 merchantaccref;
  string 255 merchantkey;
  string 10 merchantrefundpw;
  integer merchanttestaddr;
  string 60 merchantserialnr;
  integer merchantlivef;
  string 60 mname;
  string 60 maddr1;
  string 60 maddr2;
  string 60 maddr3;
  string 60 mpostcode;
  string 60 mcountry;
  string 60 mlastname;
  LongInt funcerr;
  integer err;
  string 255 errmsg;
  
  txnumber = -1;
  frompayurl = "http://" & WebHost;
  
  if (GetCCPurchaseParameters(currency,"",1,partner,merchantid,merchantcode,merchantaccref,merchantkey,merchantrefundpw,merchanttestaddr,merchantserialnr,merchantlivef)==0) then begin
    GetCustDetails(CurrentCust,mname,mlastname,maddr1,maddr2,maddr3,mpostcode,mcountry);
    if (OpenCCPurchaseTransaction(amount,currency,frompayurl,"",txnumber,partner,merchantid,merchantcode,merchantaccref,merchantkey,merchantrefundpw,merchanttestaddr,merchantserialnr,merchantlivef,
                                  mname,mlastname,maddr1,maddr2,maddr3,mpostcode,mcountry,funcerr,errmsg)) then begin
      err = 0;
    end else begin
      LogText(0,"UniversityStartCCTransaction: OpenCCPurch==false");
      err = 2;
    end;
  end else begin
    LogText(0,"UniversityStartCCTransaction: GetCCPurch!=0");
    err = 1;
  end;
  
  UniversityStartCCTransaction = err;
  
  return;
end;

//eventually only txnumber and amount should be a parameter. the rest the cc payment server looks up based on txnumber
procedure UniversityRedirectToCCPaymentPage(string txnumber,string custordnr,val amount,string currency,val localamount,string localcurrency)
begin
  record WebControlBlock WCb;
  string 255 tstr;
  
  BlockLoad(WCb);
  
  if (WCb.UsePaymentServer!=0) then begin
    //tstr = WCb.ToPaySSLURL;
    if (right(WCb.ToPaySSLURL,1)=="/") then begin
      tstr = mid(WCb.ToPaySSLURL,0,len(WCb.ToPaySSLURL)-1);//tstr & "/";
    end else begin
      tstr = WCb.ToPaySSLURL;
    end;
    //RedirectToURL(tstr & "/WebAction.hal?action=process_cc&txnumber=" & txnumber & "&amount=" & ValToString(amount*100,M40Val,"",".",0) & "&forcelc=" & CurrentWebLang); //eventually we'll use this
    
    WebOutTagOpen("<html>");
    WebOutTagOpen("<head>");
    WebOutTagClose("</head>");
    WebOutTagOpen("<body>");
    WebOutTagOpen("<form id=""ccpayform"" name=""ccpayform"" method=""POST"" action=""" & tstr & "/WebHBSDivMainUpdate.hal?function=WebHBSDivPAYWithPayServer&txnumber=" & txnumber & "&langcode=" & CurrentWebLang & """>");
    
    WebOutStringFormat("<input type=""hidden"" name=""shoptype"" value=""HWUWEBNG"">");
    WebOutStringFormat("<input type=""hidden"" name=""orderid"" value=""" & custordnr & """>");
    WebOutStringFormat("<input type=""hidden"" name=""currency"" value=""" & currency & """>");
    WebOutStringFormat("<input type=""hidden"" name=""amount"" value=""" & ValToString(amount,M4Val,"",".",0) & """>");
    WebOutStringFormat("<input type=""hidden"" name=""frompayurl"" value=""" & "http://" & WebHost & """>");
    if (currency!=localcurrency) then begin
      WebOutStringFormat("<input type=""hidden"" name=""l_amount"" value=""" & ValToString(localamount,M4Val,"",".",0) & """>");
      WebOutStringFormat("<input type=""hidden"" name=""l_curncy"" value=""" & localcurrency & """>");
    end;
    //WebOutStringFormat("<input type=""submit"" name=""s1"" value=""" & "Continue" & """>"); //for debugging. when using comment out .submit() line further down
    WebOutTagClose("</form>");
    
    WebOutTagOpen("<script>");
    WebOutStringFormatNL("<!--");
    WebOutStringFormatNL("document.getElementById(""ccpayform"").submit();");
    WebOutStringFormatNL("//-->");
    WebOutTagClose("</script>");
    WebOutTagClose("</body>");
  end else begin
    UniversityRedirectToError(0,ToolWebNGTranslateText(25017),ToolWebNGTranslateText(25018)); //Local credit card payments are not supported //You must use a payment server
  end;    
  return;
end;

updating function boolean UniversityValidateCCTransaction(string txnumber)
begin
  boolean res;
  
  res = true;
  
  UniversityValidateCCTransaction = res;
  return;
end;

global
updating procedure UniversityCompleteCCTransaction()
begin
  string 255 txnumber,ccnumber,cctype;
  record CredCardTypeVc CredCardTyper;
  record ORVc ORr;
  LongInt invno,orderno;
  Longint courseno;
  string 255 personname1,personname2,personname3,personname4,personname5;
  string 255 custcode,companyname,addr1,postalcode,country,phone,email,city;
  string 255 department,Title,orderperson;
  string 255 ovrpaydeal;

  txnumber = WebGetArg("txnumber");
  ccnumber = WebGetArg("ccnumber");
  cctype   = WebGetArg("cctype");
  
  if (UniversityValidateCCTransaction(txnumber)) then begin
  
    ORr.Addr0 = WebGetArg("txnumber");
    if (ReadFirstKey("Name",ORr,1,true)) then begin
      orderno = ORr.SerNr;
      
      GetBookingParameters(orderno,courseno,personname1,personname2,personname3,personname4,personname5,companyname,department,title,addr1,postalcode,city,country,phone,email,orderperson,custcode);
      
      RemoveParamsFromOrder(ORr);
      
      CredCardTyper.Code = cctype;
      if (ReadFirstMain(CredCardTyper,1,true)) then begin
        ovrpaydeal = CredCardTyper.PayTerm;
      end;
      invno = UniversityCreateIVFromOrder(orderno,ovrpaydeal);
      
      if (invno>=0) then begin
        PutSessionString("hwu_pay_invno",invno);
        PutSessionString("hwu_pay_orderno",orderno);

        UniversityStoreBooking2(invno,orderno,courseno,personname1,personname2,personname3,personname4,personname5,"","","","","",
                              companyname,department,title,addr1,postalcode,city,country,phone,email,orderperson,custcode);
        
        // redirect to completed page
        RedirectToUniversityFunction("apply",courseno & "/step3/");
      end else begin
        UniversityRedirectToError(courseno,ToolWebNGTranslateText(30056),ToolWebNGTranslateText(30057));
      end;
    end else begin
      UniversityRedirectToError(courseno,ToolWebNGTranslateText(25007),ToolWebNGTranslateText(25008)); //Credit Card payment failed //Invalid transaction number.
    end;
  end else begin
    UniversityRedirectToError(courseno,ToolWebNGTranslateText(25007),ToolWebNGTranslateText(25009)); //Credit Card payment failed //Your transaction could not be validated.
  end;

  return;
end;

global
procedure UniversityAbortCreditCardPayment()
begin
  UniversityRedirectToError(0,ToolWebNGTranslateText(30054),ToolWebNGTranslateText(30055));
  return;
end;


global
procedure UniversityAfterCCPaymentPage()
begin
  string 255 txnumber,ccnumber,cctype;
  
  txnumber = WebGetArg("txnumber");
  ccnumber = WebGetArg("ccnumber");
  cctype   = WebGetArg("cctype");

  RedirectToURL("/WebUpdatingAction.hal?action=university_completecc&txnumber=" & txnumber & "&ccnumber=" & ccnumber & "&cctype=" & cctype);
  return;
end;

updating procedure UniversityPayWithCreditCard(longint courseno,string personname1,string personname2,string personname3,string personname4,string personname5,
                              string personmail1,string personmail2,string personmail3,string personmail4,string personmail5,
                              string companyname,string department,string title,string addr1,string postalcode,string city,string country,
                              string phone,string email,string orderperson,string custcode)
begin
  longint orderno;
  record ORVc ORr;
  string 255 localcurrency;
  val localamount;
  string 255 txnumber;
  integer err;
  
  PutSessionString("hwu_pay_invno","");
  PutSessionString("hwu_pay_orderno","");
  PutSessionString("hwu_pay_ccnumber","");

  orderno = UniversityCreateTemporaryOrder(courseno,CurrentCust,personname1,personname2,personname3,personname4,personname5,localamount,localcurrency);
  
  if (orderno>0) then begin
    ORr.SerNr = orderno;
    if (ReadFirstMain(ORr,1,true)) then begin end;
    err = UniversityStartCCTransaction(txnumber,ORr.Sum4,ORr.CurncyCode);
    
    if (err==0) then begin
      AddParamsToOrder(ORr,courseno,personname1,personname2,personname3,personname4,personname5,companyname,department,title,addr1,postalcode,city,country,phone,email,orderperson,custcode,txnumber);

      UniversityRedirectToCCPaymentPage(txnumber,ORr.CustOrdNr,ORr.Sum4,ORr.CurncyCode,localamount,localcurrency);
    end else begin
      RecordDelete(ORr);
      switch (err) begin
        case 1: UniversityRedirectToError(courseno,ToolWebNGTranslateText(25012),ToolWebNGTranslateText(25013)); //Credit Card Setup Incomplete //Please check your Credit Card settings, making sure you have setup an AccountID for the correct currency.
        case 2: UniversityRedirectToError(courseno,ToolWebNGTranslateText(25010),ToolWebNGTranslateText(25011)); //Credit Card Transaction Failure //Could not communicate with the Payment Server. Please ensure you have a valid Enabler.
        otherwise
          UniversityRedirectToError(courseno,ToolWebNGTranslateText(25014),ToolWebNGTranslateText(25015)); //Payment system unavailable //The payment process could not be set up. Please try again later.
      end;
    end;
  end else begin
    UniversityRedirectToError(courseno,ToolWebNGTranslateText(25016),""); //Cannot create temporary order
  end;
  
  return;
end;

global
updating procedure UniversityPayForCourse(longint courseno)
begin
  string 255 personname1,personname2,personname3,personname4,personname5;
  string 255 personmail1,personmail2,personmail3,personmail4,personmail5;
  string 255 companyname,department,title;
  string 255 addr1,postalcode,city,country,phone,email,orderperson,custcode;
  integer accept;

  GetApplicationFormValues2(courseno,personname1,personname2,personname3,personname4,personname5,personmail1,personmail2,personmail3,personmail4,personmail5,companyname,department,title,addr1,postalcode,city,country,phone,email,orderperson,custcode,accept);
  
  if (accept==1) then begin
    if (nonblank(WebGetArg("SubmitIV"))) then begin
      UniversityPayWithInvoice(courseno,personname1,personname2,personname3,personname4,personname5,personmail1,personmail2,personmail3,personmail4,personmail5,companyname,department,title,addr1,postalcode,city,country,phone,email,orderperson,custcode);
    end else begin
      if (nonblank(WebGetArg("SubmitCC"))) then begin //credit card
        UniversityPayWithCreditCard(courseno,personname1,personname2,personname3,personname4,personname5,personmail1,personmail2,personmail3,personmail4,personmail5,companyname,department,title,addr1,postalcode,city,country,phone,email,orderperson,custcode);
      end;
    end;
  end else begin
    //show step 1 again
    RedirectToUniversityFunction("apply",courseno & "/step1/");
  end;
  return;
end;
