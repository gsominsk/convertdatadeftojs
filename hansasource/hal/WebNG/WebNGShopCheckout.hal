//tools
external procedure ShowInputWithLabel2(string,string,string,string,string,boolean,boolean,integer);
external function string 255 removenextnode(var string);
external function string 255 FormatLink(string,string,boolean,boolean);
external function string 255 FormatSimpleLink(string,boolean);
external function string 255 FormatSimpleLinkWithArg(string,string,boolean);
external function boolean LoginState();
external function string 255 CurrentWebLang();
external function string 255 ConvertXml(string);
external procedure WebOutSubmit(string,string,string,string);
//pages
external procedure ShowErrorPage(string);
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//translation
external function string 255 ToolWebNGTranslateText(integer);
external function string 255 GetTranslatedNameProduct(record WebNGProductVc);
//shop
external function string 255 GetLinkToShop();
external procedure RedirectToShopPage(string);
external procedure RedirectToShoppingBasket();
external updating procedure ClearShopBasket(integer);
external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
external function Boolean BuildWebNGInvoiceFromBasket(var record IVVc,record WebNGShopBasketVc,string,boolean,string,var val);
external procedure ShowShoppingBasket(string,boolean);
external procedure SumUpShopBasket(var record WebNGShopBasketVc);
external function boolean PayMethodSupported(string,var string,var string);
external procedure WebCheckOutDeliveryModes();
//webng
external procedure RedirectToRequestedPage();
external procedure RedirectToLoginPage();
external procedure RedirectToURL(string);
external procedure RedirectToSecureModePage();
//std
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function string 255 GetItemVARDescription(string,string);
external procedure GetCountryName(string,string,var string);
//old code:
external updating Function Boolean ToolWebRegisterAndSendLetter(record CUVc,string,Boolean,Boolean);
external procedure GetCustEmail(record CUVc,var string);
external procedure OldCodeContactTextBox(string,string,record NotepadVc);
external procedure OldCodeWebHBSDivContactLine(string,string,string,Boolean);
external function Boolean GetNextCustNr(var string);
external procedure ToolWebSetCustInfo(var record CUVc);
external function string 60 UserDefined(string,string);
external function Boolean GetNextDelCode(var string);
//elements
external procedure ShowWebElement(string);
//deladdr
external procedure ShowDelAddrEdit(string,string,Boolean);
external function Boolean CheckoutQtyFail();

global
function string 255 GetLinkToCheckoutPage()
begin
  string 255 link;
  
  link = GetLinkToShop;
  if (nonblank(link)) then begin
    link = link & "checkout/";
  end;
  
  GetLinkToCheckoutPage = link;
  return;
end;

procedure ClearUpdateCUSessionVariables()
begin
  integer i,cnt;
  PutSessionString("updcu_complete","");
  PutSessionString("updcu_busy","");

  PutSessionString("updcu_companyname","");
  PutSessionString("updcu_personname","");
  PutSessionString("updcu_address1","");
  PutSessionString("updcu_address2","");
  PutSessionString("updcu_address3","");
  PutSessionString("updcu_address4","");
  PutSessionString("updcu_address5","");
  PutSessionString("updcu_email","");
  PutSessionString("updcu_orgnr","");
  PutSessionString("updcu_phone","");
  PutSessionString("updcu_fax","");
  PutSessionString("updcu_comment","");
  PutSessionString("updcu_errorflags","");
  PutSessionString("updcu_errormsg","");

  return;
end;

procedure GetCurrentCustomerDetails(var string companyname,var string personname,var string address1,var string address2,var string address3,var string address4,
                                    var string address5,var string country,var string email,var string orgnr,var string phone,var string fax,var string comment)
begin
  record CUVc CUr;
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    companyname = CUr.Name;
    personname  = CUr.Person;
    address1    = CUr.InvAddr0;
    address2    = CUr.InvAddr1;
    address3    = CUr.InvAddr2;
    address4    = CUr.InvAddr3;
    address5    = CUr.InvAddr4;
    GetCountryName(CUr.CountryCode,CurrentWebLang,country);
    email       = CUr.eMail;
    orgnr       = CUr.VATNr;
    phone       = CUr.Phone;
    fax         = CUr.Fax;
    comment     = CUr.Comment;
  end;
  
  return;
end;

procedure GetCurrentCustomerDeliveryAddr(var string deladdrcode,var string address1,var string address2,var string address3,var string address4,
                                    var string address5,var string country,var string email,var string phone,var string fax)
begin
  record CUVc CUr;
  record DelAddrVc DelAddrr;
  
  address1 = "";
  address2 = "";
  address3 = "";
  address4 = "";
  address5 = "";
  email = "";
  phone = "";
  fax = "";
  country = "";
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    switch (deladdrcode) begin
      case ";deladdr":
        address1 = CUr.DelAddr0;
        address2 = CUr.DelAddr1;
        address3 = CUr.DelAddr2;
        address4 = CUr.DelAddr3;
        address5 = CUr.DelAddr4;
        GetCountryName(CUr.DelCountry,CurrentWebLang,country);
        email = CUr.eMail;
        phone = CUr.Phone;
        fax = CUr.Fax;
      case ";invaddr":
        /*
        address1 = CUr.InvAddr0;
        address2 = CUr.InvAddr1;
        address3 = CUr.InvAddr2;
        address4 = CUr.InvAddr3;
        address5 = CUr.InvAddr4;
        GetCountryName(CUr.CountryCode,CurrentWebLang,country);
        email = CUr.eMail;
        phone = CUr.Phone;
        fax = CUr.Fax;
        */
      otherwise
        if (blank(deladdrcode)) then begin
          DelAddrr.CustCode = CurrentCust;
          if (ReadFirstKey("CustCode",DelAddrr,1,true)) then begin end;
        end else begin
          DelAddrr.CustCode = CurrentCust;
          DelAddrr.DelCode = deladdrcode;
          if (ReadFirstKey("CustCode",DelAddrr,2,true)) then begin end;
        end;
        address1 = DelAddrr.DelAddr0;
        address2 = DelAddrr.DelAddr1;
        address3 = DelAddrr.DelAddr2;
        address4 = DelAddrr.DelAddr3;
        address5 = DelAddrr.DelAddr4;
        GetCountryName(DelAddrr.DelCountry,CurrentWebLang,country);
        email = DelAddrr.Email;
        phone = DelAddrr.Phone;
        fax = DelAddrr.Fax;
    end;
  end;

  return;
end;

global
updating procedure ShopUpdateDeliveryAddress(string DelAddrCode)
begin
  record WebNGShopBasketVc oldWSBr,WSBr;
  
  if (LoginState==false) then begin
    RedirectToLoginPage;
    goto LShopUpdateDelAddr;
  end;
  
  if (DelAddrCode==";addnew") then begin
    RedirectToShopPage("checkout/adddeliveryaddress");
    goto LShopUpdateDelAddr;
  end;
  
  if (GetShoppingBasket(WSBr,0)) then begin
    RecordCopy(oldWSBr,WSBr);
    if (DelAddrCode=="--") then begin
      WSBr.DelAddrCode = "";
    end else begin
      WSBr.DelAddrCode = DelAddrCode;
    end;
    SumUpShopBasket(WSBr);
    if (RecordUpdate(oldWSBr,WSBr,false)) then begin end;
  end;
  
  RedirectToShopPage("checkout/confirm#checkout_sel_deladdr");
LShopUpdateDelAddr:;
  return;
end;

global
procedure WebOutOption(string value,string selvalue,string text)
begin
  string 255 tstr;
  
  tstr = "<option value=""" & value & """";
  if (value==selvalue) then begin
    tstr = tstr & " selected";
  end;
  tstr = tstr & ">" & ConvertXml(text) & "</option>";
  WebOutStringFormatNL(tstr);
  
  return;
end;

procedure DeliveryAddressDropDown(string custcode,var string selected)
begin
  record WebNGShopBasketVc WSBr;
  record CUVc CUr;
  record DelAddrVc DelAddrr;
  string 255 link,tstr,delstr;
  boolean found,blanklistf;

  WebOutTagOpen("<form method=""GET"" action=""/WebUpdatingAction.hal"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""updatedeladdr"">");

  selected = "";
  blanklistf = true;

  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
    
  if (GetShoppingBasket(WSBr,0)) then begin
    selected = WSBr.DelAddrCode;
  end;
  if (blank(selected)) then begin
    if (nonblank(CUr.DelAddr0)) then begin
      selected = ";deladdr";
    end else begin
      selected = ";invaddr";
    end;
  end;

  WebOutTagOpen("<select id='checkout_sel_deladdr' class=""checkout_sel_deladdr"" name=""deladdress"" onChange=""submit(this.form)"">");

  WebOutOption(";invaddr",selected,ToolWebNGTranslateText(25531));
  if (nonblank(CUr.DelAddr0)) then begin
    WebOutOption(";deladdr",selected,CUr.DelAddr0);
    blanklistf = false;
    if (blank(selected)) then begin
      selected = ";deladdr";
    end;
  end;
  found = true;
  DelAddrr.CustCode = custcode;
  while (LoopKey("CustCode",DelAddrr,1,found)) begin
    if (DelAddrr.CustCode==custcode) then begin
      if (nonblank(DelAddrr.Comment)) then begin
        delstr = DelAddrr.Comment;
      end else begin
        delstr = DelAddrr.DelAddr0;
      end;
      WebOutOption(DelAddrr.DelCode,selected,delstr);
      blanklistf = false;
    end else begin
      found = false;
    end;
  end;
  WebOutOption(";addnew","",ToolWebNGTranslateText(20213));
  WebOutTagClose("</select>");
  WebOutTagClose("</form>");
    
  return;
end;

global
procedure ContactLine(string thetext,string thename,string preval,Boolean passwordline)
begin  
  string 255 type;
  string 255 mpreval;
  
  WebOutTagOpen("<tr>");
  if (nonblank(thename)) then begin
    WebOutTagOpen("<td class=""shopcustdetails_table_col1"">");
    WebOutStringFormat(thetext);
    WebOutTagClose("</td>");
    WebOutTagOpen("<td class=""shopcustdetails_table_col2"">");
    if (passwordline) then begin
      type = "password";
      mpreval = "";
    end else begin
      type = "text";
      mpreval = left(preval,60);
    end;
    WebOutStringFormatNL("<input value=""" & mpreval & """ type=""" & type & """ maxlength=60 name=""" & thename & """ size=""31"" class=""feedback"">");
    WebOutTagClose("</td>");
  end else begin
    WebOutTagOpen("<td colspan=""2"" class=""shopcustdetails_table_col1"">");
    WebOutStringFormat(thetext);
    WebOutTagClose("</td>");
  end;
  WebOutTagClose("</tr>");
  return;
end;

procedure ShowCheckoutCustDetailsForm()
begin
  Boolean res;
  string 255 tstr;
  LongInt interestf;
  string 255 llink;
  integer i;
  string 255 companyname;
  string 255 personname;
  string 255 address1;
  string 255 address2;
  string 255 address3;
  string 255 address4;
  string 255 address5;
  string 255 country;
  string 255 email;
  string 255 orgnr;
  string 255 phone;
  string 255 fax;
  string 255 passwd;
  string 255 comment;
  integer hmcompany;
  record NotepadVc Noter;
  integer errorflags,errormsg;
  array integer numberlist;
  array string 244 namelist;
  boolean firstline;
  
  if (nonblank(GetSessionString("updcu_busy"))) then begin
    companyname = GetSessionString("updcu_companyname");
    personname  = GetSessionString("updcu_personname");
    address1    = GetSessionString("updcu_address1");
    address2    = GetSessionString("updcu_address2");
    address3    = GetSessionString("updcu_address3");
    address4    = GetSessionString("updcu_address4");
    address5    = GetSessionString("updcu_address5");
    email       = GetSessionString("updcu_email");
    orgnr       = GetSessionString("updcu_orgnr");
    phone       = GetSessionString("updcu_phone");
    fax         = GetSessionString("updcu_fax");
    comment     = GetSessionString("updcu_comment");
  end else begin
    GetCurrentCustomerDetails(companyname,personname,address1,address2,address3,address4,address5,country,email,orgnr,phone,fax,comment);
  end;

  errorflags  = StringToInt(GetSessionString("updcu_errorflags"));
  errormsg    = StringToInt(GetSessionString("updcu_errormsg"));
  
  ClearUpdateCUSessionVariables;
      
  WebOutTagOpen("<form method=""post"" action=""" & FormatLink("/WebUpdatingAction.hal","?action=update_cust&app=checkout",true,true) & """>");
  WebOutTagOpen("<table class=""shopcustdetails_table"" border=""0"" cellpadding=""1"" cellspacing=""0"">");
  WebOutStringFormatNL("<input type=""hidden"" id=""path"" name=""path"" value=""" & WebGetArg("path") & """>");

  if (errormsg!=0) then begin
    WebOutTagOpen("<tr>");
    WebOutTagOpen("<td colspan=""2"" class=""shopcustdetails_table_col1 error"">");
    WebOutStringFormat(ToolWebNGTranslateText(errormsg));
    WebOutTagClose("</td>");
    WebOutTagOpen("<td colspan=""2"">");
    WebOutStringFormat("&nbsp;");
    WebOutTagClose("</td>");
    WebOutTagClose("</tr>");
  end;

  if (errorflags!=0) then begin
    WebOutTagOpen("<tr>");
    WebOutTagOpen("<td colspan=""2"" class=""shopcustdetails_table_col1 error"">");
    WebOutStringFormat(ToolWebNGTranslateText(25002)); //The following required fields are missing:
    WebOutTagOpen("<ul>");
    if (BitAnd(errorflags,1)==1) then begin
      WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(20059) & "</li>");  //Company Name
    end;
    if (BitAnd(errorflags,2)==2) then begin
      WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(20058) & "</li>");  //Your Name
    end;
    if (BitAnd(errorflags,4)==4) then begin
      WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(20082) & "</li>");  //Org. No.
    end;
    if (BitAnd(errorflags,8)==8) then begin
      WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(20062) & "</li>");  //Phone
    end;
    if (BitAnd(errorflags,16)!=0) then begin
      WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(20060) & "</li>");  //Email
    end;
    WebOutTagClose("<ul>");
    WebOutTagClose("</td>");
    WebOutTagClose("</tr>");
  end;

  ContactLine(ToolWebNGTranslateText(20059) & " (*)","companyname",companyname,false);
  ContactLine(ToolWebNGTranslateText(20058) & " (*)","personname",personname,false);
  ContactLine(ToolWebNGTranslateText(20069),"address1",address1,false);
  ContactLine(ToolWebNGTranslateText(20070),"address2",address2,false);
  ContactLine(ToolWebNGTranslateText(20071),"address3",address3,false);
  ContactLine(ToolWebNGTranslateText(20072),"address4",address4,false);
  ContactLine(ToolWebNGTranslateText(20073),"address5",address5,false);
  ContactLine(ToolWebNGTranslateText(20082) & " (*)","orgnr",orgnr,false);
  ContactLine(ToolWebNGTranslateText(20062) & " (*)","phone",phone,false);
  ContactLine(ToolWebNGTranslateText(20060) & " (*)","email",email,false);
  ContactLine(ToolWebNGTranslateText(20063),"fax",fax,false);
  ContactLine(ToolWebNGTranslateText(20084),"comment",comment,false);
  ContactLine(ToolWebNGTranslateText(20066),"","",false);
  WebOutTagOpen("<tr valign=""top"">");
  WebOutTagOpen("<td class=""shopcustdetails_table_col1"">");
  WebOutStringFormat("&nbsp;");
  WebOutTagClose("</td>");
  WebOutTagOpen("<td class=""shopcustdetails_table_col2"">");
  WebOutSubmit("","button","Submit",ToolWebNGTranslateText(25529)); //Update
  WebOutStringFormatNL("<a href=""" & FormatSimpleLink(GetLinkToCheckoutPage & "confirm",true) & """><input type=""button"" name=""s_cancel"" value=""" & ToolWebNGTranslateText(25527) & """></a>"); //Cancel
  WebOutTagClose("</td>");
  WebOutTagClose("</tr>");
  WebOutTagClose("</table>");
  WebOutTagClose("</form>");

  return;
end;

updating procedure UpdateCustomer(string custcode,string companyname,string personname,string address1,string address2,string address3,
                                  string address4,string address5,string email,string orgnr,string phone,string fax,string comment,var integer errormsg)
begin
  record CUVc oldCUr,CUr;
  boolean storef;
  
  storef = false;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    RecordCopy(oldCUr,CUr);
    if (CUr.Name!=companyname) then begin
      CUr.Name = companyname;
      storef = true;
    end;
    if (CUr.Person!=personname) then begin
      CUr.Person = personname;
      storef = true;
    end;
    if (CUr.InvAddr0!=address1) then begin
      CUr.InvAddr0 = address1;
      storef = true;
    end;
    if (CUr.InvAddr1!=address2) then begin
      CUr.InvAddr1 = address2;
      storef = true;
    end;
    if (CUr.InvAddr2!=address3) then begin
      CUr.InvAddr2 = address3;
      storef = true;
    end;
    if (CUr.InvAddr3!=address4) then begin
      CUr.InvAddr3 = address4;
      storef = true;
    end;
    if (CUr.InvAddr4!=address5) then begin
      CUr.InvAddr4 = address5;
      storef = true;
    end;
    if (CUr.eMail!=email) then begin
      CUr.eMail = email;
      storef = true;
    end;
    if (CUr.VATNr!=orgnr) then begin
      CUr.VATNr = orgnr;
      storef = true;
    end;
    if (CUr.Phone!=phone) then begin
      CUr.Phone = phone;
      storef = true;
    end;
    if (CUr.Fax!=fax) then begin
      CUr.Fax = fax;
      storef = true;
    end;
    if (CUr.Comment!=comment) then begin
      CUr.Comment = comment;
      storef = true;
    end;
    
    if (storef) then begin
      if (RecordUpdate(oldCUr,CUr,false)) then begin end;
    end;
  end;
  
  return;
end;

global
updating procedure StoreUpdateCustomer()
begin
  integer i,cnt,pos,errorflags;
  string 255 companyname;
  string 255 personname;
  string 255 address1;
  string 255 address2;
  string 255 address3;
  string 255 address4;
  string 255 address5;
  string 255 email;
  string 255 orgnr;
  string 255 phone;
  string 255 fax;
  string 255 comment;
  string 255 tstr;
  integer errormsg;
  string 255 custcode;
  
  if (LoginState==false) then begin
    RedirectToRequestedPage;
  end else begin
    //read from webargs
    companyname = WebGetArg("companyname");
    personname  = WebGetArg("personname");
    address1    = WebGetArg("address1");
    address2    = WebGetArg("address2");
    address3    = WebGetArg("address3");
    address4    = WebGetArg("address4");
    address5    = WebGetArg("address5");
    email       = WebGetArg("email");
    orgnr       = WebGetArg("orgnr");
    phone       = WebGetArg("phone");
    fax         = WebGetArg("fax");
    comment     = WebGetArg("comment");
    
    //validate
    errorflags = 0;
    if (blank(companyname)) then begin
      errorflags = errorflags + 1;
    end;
    if (blank(personname)) then begin
      errorflags = errorflags + 2;
    end;
    if (blank(orgnr)) then begin
      errorflags = errorflags + 4;
    end;
    if (blank(phone)) then begin
      errorflags = errorflags + 8;
    end;
    if (blank(email)) then begin
      errorflags = errorflags + 16;
    end;

    if (errorflags==0) then begin
      UpdateCustomer(CurrentCust,companyname,personname,address1,address2,address3,address4,address5,email,orgnr,phone,fax,comment,errormsg);
    end;

    if (errorflags==0 and errormsg==0) then begin
      RedirectToShopPage("checkout/confirm");
    end else begin
      PutSessionString("updcu_errorflags",errorflags);
      PutSessionString("updcu_errormsg",errormsg);
      PutSessionString("updcu_companyname",companyname);
      PutSessionString("updcu_personname",personname);
      PutSessionString("updcu_address1",address1);
      PutSessionString("updcu_address2",address2);
      PutSessionString("updcu_address3",address3);
      PutSessionString("updcu_address4",address4);
      PutSessionString("updcu_address5",address5);
      PutSessionString("updcu_email",email);
      PutSessionString("updcu_orgnr",orgnr);
      PutSessionString("updcu_phone",phone);
      PutSessionString("updcu_fax",fax);
      PutSessionString("updcu_comment",comment);
      PutSessionString("updcu_busy","true");
      RedirectToRequestedPage;
    end;
  end;
  
  return;
end;

procedure ShopCheckoutVerifyCustDetails(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  string 255 link;
  
  WPr.Code = WSr.WebPage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  WebOutStringFormat("<h1>" & ToolWebNGTranslateText(25318) & "</h1>"); //Please verify your contact/invoice information

  ShowCheckoutCustDetailsForm;

  ShowWebAppPageEnd(WPr);

LVerifyCustDetails:;
  return;
end;

procedure StoreAddDelAddrSessionVars(string address1,string address2,string address3,string address4,string address5,string phone,string email,string fax,integer error)
begin
  PutSessionString("new_deladdr_address1",address1);
  PutSessionString("new_deladdr_address2",address2);
  PutSessionString("new_deladdr_address3",address3);
  PutSessionString("new_deladdr_address4",address4);
  PutSessionString("new_deladdr_address5",address5);
  PutSessionString("new_deladdr_phone",phone);
  PutSessionString("new_deladdr_email",email);
  PutSessionString("new_deladdr_fax",fax);
  PutSessionString("new_deladdr_error",error);
end;

procedure GetAddDelAddrSessionVars(var string address1,var string address2,var string address3,var string address4,var string address5,var string phone,var string email,var string fax,var integer error)
begin
  address1 = GetSessionString("new_deladdr_address1");
  address2 = GetSessionString("new_deladdr_address2");
  address3 = GetSessionString("new_deladdr_address3");
  address4 = GetSessionString("new_deladdr_address4");
  address5 = GetSessionString("new_deladdr_address5");
  phone = GetSessionString("new_deladdr_phone");
  email = GetSessionString("new_deladdr_email");
  fax = GetSessionString("new_deladdr_fax");
  error = StringToInt(GetSessionString("new_deladdr_error"));
  return;
end;

procedure ClearAddDelAddrSessionVars()
begin
  PutSessionString("new_deladdr_error","");
  PutSessionString("new_deladdr_address1","");
  PutSessionString("new_deladdr_address2","");
  PutSessionString("new_deladdr_address3","");
  PutSessionString("new_deladdr_address4","");
  PutSessionString("new_deladdr_address5","");
  PutSessionString("new_deladdr_phone","");
  PutSessionString("new_deladdr_email","");
  PutSessionString("new_deladdr_fax","");
  return;
end;

procedure ShowAddDeliveryErrorList(integer err)
begin
  if (err!=0) then begin
    WebOutTagOpen("<div class=""shop_adddeladdr_error"">");
    
    WebOutTagOpen("<h3>" & ToolWebNGTranslateText(25002) & "</h3>"); //The following required fields are missing:
    
    WebOutTagOpen("<ul>");
    
    if (err>0) then begin
      if (BitAnd(err,   1)!=0) then begin WebOutStringFormat("<li>" & UserDefined("CUVc","InvAddr0") & "</li>"); end;
      if (BitAnd(err,   2)!=0) then begin WebOutStringFormat("<li>" & UserDefined("CUVc","InvAddr1") & "</li>"); end;
      if (BitAnd(err,   4)!=0) then begin WebOutStringFormat("<li>" & UserDefined("CUVc","InvAddr2") & "</li>"); end;
      if (BitAnd(err,   8)!=0) then begin WebOutStringFormat("<li>" & UserDefined("CUVc","InvAddr3") & "</li>"); end;
      if (BitAnd(err,  16)!=0) then begin WebOutStringFormat("<li>" & UserDefined("CUVc","InvAddr4") & "</li>"); end;
    end;
    WebOutTagClose("</ul>");
    
    WebOutTagClose("</div>");
  end;
  return;
end;

global
updating procedure ShopAddDeliveryAddress(string address1,string address2,string address3,string address4,string address5,string email,string phone,string fax)
begin
  integer err;
  string 255 delcode;
  record DelAddrVc DelAddrr;
  record CUVc CUr;
  
  if (LoginState==false) then begin
    RedirectToRequestedPage;
  end;
  
  err = 0;
  if (blank(address1)) then begin err = err + 1; end;
  if (blank(address2)) then begin err = err + 2; end;
  if (blank(address3)) then begin err = err + 4; end;
  if (blank(address4)) then begin err = err + 8; end;
  if (blank(address5)) then begin err = err + 16; end;
  
  if (err!=0) then begin
    StoreAddDelAddrSessionVars(address1,address2,address3,address4,address5,email,phone,fax,err);
    RedirectToRequestedPage;
  end else begin
    CUr.Code = CurrentCust;
    if (ReadFirstMain(CUr,1,true)) then begin end;
    DelAddrr.CustCode = CUr.Code;
    DelAddrr.Name = CUr.Name;
    if (GetNextDelCode(delcode)) then begin end;
    DelAddrr.DelCode = delcode;
    DelAddrr.DelAddr0 = address1;
    DelAddrr.DelAddr1 = address2;
    DelAddrr.DelAddr2 = address3;
    DelAddrr.DelAddr3 = address4;
    DelAddrr.DelAddr4 = address5;
    DelAddrr.Email = email;
    DelAddrr.Phone = phone;
    DelAddrr.Fax = fax;
    DelAddrr.Comment = ToolWebNGTranslateText(25426); //Added from web
    if (RecordInsert(DelAddrr,true)) then begin end;
    RedirectToShopPage("checkout/confirm");
  end;
  return;
end;

procedure ShopCheckoutAddDeliveryAddress(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  record CUVc CUr;
  record DelAddrVc DelAddrr;
  string 255 link,selected,label;
  boolean found;
  integer err;
  string 255 address1,address2,address3,address4,address5,phone,email,fax;
  
  WPr.Code = WSr.WebPage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");

  ShowDelAddrEdit("new",FormatSimpleLink(GetLinkToCheckoutPage & "confirm",true),true);
//  WebOutStringFormat("<h1>" & ToolWebNGTranslateText(20210) & "</h1>"); //Add a new delivery address
//  
//  GetAddDelAddrSessionVars(address1,address2,address3,address4,address5,phone,email,fax,err);
//  
//  ShowAddDeliveryErrorList(err);
//
//  ClearAddDelAddrSessionVars;
//
//  WebOutTagOpen("<form method=""post"" action=""" & FormatLink("/WebUpdatingAction.hal","?action=adddeladdr",true,true) & """>");
//  WebOutTagOpen("<table width=""100%"" border=""0"" cellpadding=""1"" cellspacing=""0"">");
//
//  label = UserDefined("CUVc","InvAddr0");
//  if (blank(label)) then begin label = ToolWebNGTranslateText(20163); end; //Address
//  OldCodeWebHBSDivContactLine(label,"address1",address1,false);
//  label = UserDefined("CUVc","InvAddr1");
//  OldCodeWebHBSDivContactLine(label,"address2",address2,false);
//  label = UserDefined("CUVc","InvAddr2");
//  OldCodeWebHBSDivContactLine(label,"address3",address3,false);
//  label = UserDefined("CUVc","InvAddr3");
//  OldCodeWebHBSDivContactLine(label,"address4",address4,false);
//  label = UserDefined("CUVc","InvAddr4");
//  OldCodeWebHBSDivContactLine(label,"address5",address5,false);
//  OldCodeWebHBSDivContactLine(ToolWebNGTranslateText(20062),"phone",phone,false);
//  OldCodeWebHBSDivContactLine(ToolWebNGTranslateText(20060),"email",email,false);
//  OldCodeWebHBSDivContactLine(ToolWebNGTranslateText(20063),"fax",fax,false);
//
//  WebOutTagClose("</table>");
//
//  WebOutStringFormatNL("<input type=""submit"" name=""s_add"" value=""" & ToolWebNGTranslateText(25526) & """>"); //Add
//  WebOutStringFormatNL("<a href=""" & FormatSimpleLink(GetLinkToCheckoutPage & "confirm",true) & """><input type=""button"" name=""s_cancel"" value=""" & ToolWebNGTranslateText(25527) & """></a>"); //Cancel
//  
//  WebOutTagClose("</form>");
  
  ShowWebAppPageEnd(WPr);
  
LSelectDelAddr:;
  return;
end;

procedure ShowOrderSummary(record WebNGShopBasketVc WSBr)
begin
  row WebNGShopBasketVc WSBrw;
  record WebNGProductVc WPr;
  record INVc INr;
  integer i,cnt;
  val sumofrows;
  string 255 tstr,paydeal,infoelement;
  record IVVc IVr;
  val freight;
  
  PayMethodSupported("invoice",paydeal,infoelement);
  BuildWebNGInvoiceFromBasket(IVr,WSBr,paydeal,false,"",freight);
  sumofrows = 0;
  
  WebOutStringFormat("<span style=""font-weight: bold"">" & ToolWebNGTranslateText(25325) & " </span><br>"); //Order summary
  WebOutTagOpen("<div class=""checkout_summary"">");
  
  cnt = MatRowCnt(WSBr);
  if (cnt>0) then begin
    WebOutTagOpen("<table class=""checkout_summary_table"" border=""0"" cellpadding=""1"" cellspacing=""0"" width=""100%"">");
    WebOutTagOpen("<tr>");
    WebOutStringFormat("<th class=""cst_qty"">" & ToolWebNGTranslateText(25308) & "</th>"); //Qty
    WebOutStringFormat("<th class=""cst_product"">" & ToolWebNGTranslateText(25306) & "</th>"); //Product
    WebOutStringFormat("<th class=""cst_desc"">" & ToolWebNGTranslateText(25327) & "</th>"); //Description
    WebOutStringFormat("<th class=""cst_unitprice"">" & ToolWebNGTranslateText(25307) & "</th>"); //Unit price
    WebOutStringFormatNL("<th class=""cst_amount"">" & ToolWebNGTranslateText(25326) & "</th>"); //Amount
    WebOutTagClose("</tr>");
    
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(WSBr,i,WSBrw);
      if (ReadFirstItem(WSBrw.Product,INr,true,false)) then begin end;
      WPr.Code = INr.Code;
      if (ReadFirstMain(WPr,1,true)) then begin end;

      WebOutTagOpen("<tr>");
      WebOutStringFormat("<td class=""cst_qty"">" & WSBrw.Qty & "</td>");
      WebOutStringFormat("<td class=""cst_product"">" & WSBrw.Product & "</td>");
      tstr = GetItemVARDescription(WSBrw.Product,CurrentWebLang);
      if (nonblank(tstr)) then begin
        tstr = " (" & tstr & ")";
      end;
      WebOutStringFormat("<td class=""cst_desc"">" & GetTranslatedNameProduct(WPr) & tstr & "</td>");
      WebOutStringFormat("<td class=""cst_unitprice"">" & WSBrw.Price & "</td>");
      WebOutStringFormatNL("<td class=""cst_amount"">" & WSBrw.Qty * WSBrw.Price & "</td>");
      
      sumofrows = sumofrows + (WSBrw.Qty * WSBrw.Price);
      WebOutTagClose("</tr>");
    end;
    
    WebOutTagOpen("<tr>");
    WebOutStringFormat("<th class=""cst_subtotal topborder"" colspan=""4"">" & ToolWebNGTranslateText(25328) & "</td>"); //Subtotal
    WebOutStringFormat("<td class=""cst_subtotal topborder"">" & IVr.Sum1 & "</td>");
    WebOutTagClose("</tr>");

    WebOutTagOpen("<tr>");
    WebOutStringFormat("<th class=""cst_subtotal"" colspan=""4"">" & ToolWebNGTranslateText(25304) & "</td>"); //VAT
    WebOutStringFormat("<td class=""cst_subtotal"">" & IVr.Sum3 & "</td>");
    WebOutTagClose("</tr>");

    WebOutTagOpen("<tr>");
    WebOutStringFormat("<th class=""cst_freight"" colspan=""4"">" & ToolWebNGTranslateText(25303) & "</td>"); //FREIGHT
    WebOutStringFormat("<td class=""cst_freight"">" & freight & "</td>");
    WebOutTagClose("</tr>");

/*
    WebOutTagOpen("<tr>");
    WebOutStringFormat("<th class=""cst_subtotal"" colspan=""4"">" & ToolWebNGTranslateText(25324) & "</td>"); //Ext. TAX
    WebOutStringFormat("<td class=""cst_subtotal"">" & WSBr.TAX1Sum & "</td>");
    WebOutTagClose("</tr>");
*/

    WebOutTagOpen("<tr>");
    WebOutStringFormat("<th class=""cst_subtotal"" colspan=""4"">" & "TOTAL" & "</td>");
    WebOutStringFormat("<td class=""cst_subtotal"">" & IVr.Sum4 & "</td>");
    WebOutTagClose("</tr>");

    WebOutTagClose("</table>");
  end else begin
    WebOutTagOpen("<p>");
    WebOutStringFormat(ToolWebNGTranslateText(25406)); //Your basket it empty.
    WebOutTagClose("</p>");
  end;

  WebOutTagClose("</div>");
  
  return;
end;

procedure OutChecked(var Boolean firstf)
begin
  if (firstf) then begin
    WebOutStringFormat(" checked");
    firstf = false;
  end;
  return;
end;

procedure ShopCheckoutSelectPayMethod(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  string 255 link;
  string 255 companyname;
  string 255 personname;
  string 255 deladdrcode;
  string 255 address1;
  string 255 address2;
  string 255 address3;
  string 255 address4;
  string 255 address5;
  string 255 country;
  string 255 email;
  string 255 orgnr;
  string 255 phone;
  string 255 fax;
  string 255 comment;
  record WebNGShopBasketVc WSBr;
  boolean firstpaymethodf;
  string 20 paydeal,infoelement;

  WPr.Code = WSr.WebPage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;

  ShowWebAppPageStart(WPr,"");
  if (GetShoppingBasket(WSBr,0)) then begin end;

  if (MatRowCnt(WSBr)==0) then begin
    WebOutStringFormat("<div class='checkout_error_msg'><h2>" & ToolWebNGTranslateText(25337) & "</h2></div>");
    goto LSkipPage;
  end;

  WebOutStringFormat("<h1>" & ToolWebNGTranslateText(25320) & "</h1>"); //Please confirm your purchase and choose how you wish to pay


//  ShowOrderSummary(WSBr);
  ShowShoppingBasket("shopbasketdivconfirm",true);

  WebOutStringFormat("<br>");

  WebOutTagOpen("<div class=""checkout_invoice_address"">");
  GetCurrentCustomerDetails(companyname,personname,address1,address2,address3,address4,address5,country,email,orgnr,phone,fax,comment);
  WebOutStringFormat("<span style=""font-weight: bold"">" & ToolWebNGTranslateText(25321) & "</span>"); //Invoice to:
  WebOutStringFormat("(<a href=""" & FormatSimpleLink(GetLinkToShop & "checkout/verifydetails",true)& """>");
  WebOutStringFormat(ToolWebNGTranslateText(25528)); //Edit
  WebOutStringFormat("</a>)<br>");
  if (nonblank(companyname)) then begin WebOutStringFormat(companyname & "<br>"); end;
  if (nonblank(address1)) then begin WebOutStringFormat(address1 & "<br>"); end;
  if (nonblank(address2)) then begin WebOutStringFormat(address2 & "<br>"); end;
  if (nonblank(address3)) then begin WebOutStringFormat(address3 & "<br>"); end;
  if (nonblank(address4)) then begin WebOutStringFormat(address4 & "<br>"); end;
  if (nonblank(address5)) then begin WebOutStringFormat(address5 & "<br>"); end;
  if (nonblank(country)) then begin WebOutStringFormat(country & "<br>"); end;
  if (nonblank(email)) then begin WebOutStringFormat(email & "<br>"); end;
  WebOutTagClose("</div>");

  if (true) then begin //TODO: make setting (enable/disable showing delivery address)
    WebOutTagOpen("<div class=""checkout_delivery_address"">");
    WebOutStringFormat("<span style=""font-weight: bold"">" & ToolWebNGTranslateText(25329) & "</span>"); //Deliver to:
    DeliveryAddressDropDown(CurrentCust,deladdrcode);
    GetCurrentCustomerDeliveryAddr(deladdrcode,address1,address2,address3,address4,address5,country,email,phone,fax);
    if (nonblank(address1)) then begin WebOutStringFormat(address1 & "<br>"); end;
    if (nonblank(address2)) then begin WebOutStringFormat(address2 & "<br>"); end;
    if (nonblank(address3)) then begin WebOutStringFormat(address3 & "<br>"); end;
    if (nonblank(address4)) then begin WebOutStringFormat(address4 & "<br>"); end;
    if (nonblank(address5)) then begin WebOutStringFormat(address5 & "<br>"); end;
    if (nonblank(country)) then begin WebOutStringFormat(country & "<br>"); end;
    WebOutTagClose("</div>");
  end;
  WebCheckOutDeliveryModes;
  WebOutTagOpen("<div class=""checkout_select_paymethod"">");

  WebOutStringFormat("<span style=""font-weight: bold"">" & ToolWebNGTranslateText(25322) & "</span>" & "<br>"); //Please select your method of payment:

  WebOutTagOpen("<form method=""GET"" action=""/WebUpdatingAction.hal"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""action"" value=""pay"">");
  WebOutStringFormatNL("<input type=""hidden"" name=""appid"" value=""1"">");

  firstpaymethodf = true;
  if (PayMethodSupported("creditcard",paydeal,infoelement)) then begin
    WebOutStringFormat("<input type=""radio"" id=""paymethod_cc"" name=""paymethod"" value=""creditcard""");
    OutChecked(firstpaymethodf);
    WebOutStringFormatNL("><label for=""paymethod_cc"">" & ToolWebNGTranslateText(25521) & "</label>"); //Credit Card
    if (nonblank(infoelement)) then begin
      ShowWebElement(infoelement);
    end;
    WebOutStringFormatNL("<br>");
  end;
  if (PayMethodSupported("order",paydeal,infoelement)) then begin
    WebOutStringFormat("<input type=""radio"" id=""paymethod_or"" name=""paymethod"" value=""order""");
    OutChecked(firstpaymethodf);
    WebOutStringFormatNL("><label for=""paymethod_or"">" & ToolWebNGTranslateText(25523) & "</label>"); //Settle with Order
    if (nonblank(infoelement)) then begin
      ShowWebElement(infoelement);
    end;
    WebOutStringFormatNL("<br>");
  end;
  if (PayMethodSupported("invoice",paydeal,infoelement)) then begin
    WebOutStringFormat("<input type=""radio"" id=""paymethod_iv"" name=""paymethod"" value=""invoice""");
    OutChecked(firstpaymethodf);
    WebOutStringFormatNL("><label for=""paymethod_iv"">" & ToolWebNGTranslateText(25530) & "</label>"); //Settle with Invoice
    if (nonblank(infoelement)) then begin
      ShowWebElement(infoelement);
    end;
    WebOutStringFormatNL("<br>");
  end;
  if (PayMethodSupported("paypal",paydeal,infoelement)) then begin
    WebOutStringFormat("<input type=""radio"" id=""paymethod_pp"" name=""paymethod"" value=""paypal""");
    OutChecked(firstpaymethodf);
    WebOutStringFormatNL("><label for=""paymethod_pp"">" & ToolWebNGTranslateText(25524) & "</label>"); //PayPal
    if (nonblank(infoelement)) then begin
      ShowWebElement(infoelement);
    end;
    WebOutStringFormatNL("<br>");
  end;
  if (PayMethodSupported("directdebit",paydeal,infoelement)) then begin
    WebOutStringFormat("<input type=""radio"" id=""paymethod_dd"" name=""paymethod"" value=""directdeb""");
    if (firstpaymethodf) then begin
      WebOutStringFormat(" checked");
      firstpaymethodf = false;
    end;
    WebOutStringFormatNL("><label for=""paymethod_dd"">" & ToolWebNGTranslateText(25522) & "</label>"); //Direct Debit
    if (nonblank(infoelement)) then begin
      ShowWebElement(infoelement);
    end;
    WebOutStringFormatNL("<br>");
  end;
  ShowInputWithLabel2(ToolWebNGTranslateText(30080),"text","poentryfield","customerordnum","",false,false,60);  //"Your Purchase Order No."
  WebOutStringFormatNL("<br>");

  WebOutSubmit("","button","s1",ToolWebNGTranslateText(25516)); //Pay
  
  WebOutTagClose("</form>");

  WebOutTagClose("</div>");

LSkipPage:;
  ShowWebAppPageEnd(WPr);

  return;
end;

global
procedure ShopCheckoutApp(record WebNGStructVc WSr,string path)
begin
  string 255 node,mpath;
  string 255 paytype;
  
  if (LoginState==false) then begin
    RedirectToLoginPage;
    goto LShopCheckoutApp;
  end;

//  if (WebSecureMode==false) then begin
//    RedirectToSecureModePage; //TODO: fix this up so it redirects properly and goes back to normal mode after payment
//  end;
  
  mpath = path;
  node = removenextnode(mpath);
  
  switch (node) begin
    case "verifydetails":
      ShopCheckoutVerifyCustDetails(WSr);
    case "adddeliveryaddress":
      ShopCheckoutAddDeliveryAddress(WSr);
    case "confirm":
      ShopCheckoutSelectPayMethod(WSr);
    otherwise
      if (CheckoutQtyFail) then begin
        RedirectToShopPage("basket");          
      end else begin
        RedirectToShopPage("checkout/confirm");    
      end;
  end;
  
LShopCheckoutApp:;
  return;
end;