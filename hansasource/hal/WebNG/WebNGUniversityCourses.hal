//tools
external function string 255 FormatLink(string,string,boolean,boolean);
external procedure GetListOfGroupsForCountry(string,var array string,var array string);
external function string 10 ToolWebNGGetCountry();
external function string 255 removenextnode(var string);
external function string 255 FormatSimpleLink(string,boolean);
external function boolean LoginState();
external function string 10 CurrentWebLang();
//elements
external procedure ShowWebElementTemplate(string,integer);
//translation
external function string 255 ToolWebNGTranslateText(integer);
external function string 255 GetTranslatedNameCountry(record WebNGCountryVc);
//pages
external procedure ShowWebAppPageStart(record WebNGPageVc,string);
external procedure ShowWebAppPageEnd(record WebNGPageVc);
//webng
external procedure RedirectToStartPage();
external procedure RedirectToStructLink(string);
external procedure RedirectToCountrySubPage(record WebNGStructVc);
external procedure ShowCreateMailForm(record WebNGElementVc);
external function string 255 GetWebmailBoxForCountry(string);
//university
external function string 255 GetUniversityFunctionLink(string,string);
external function string 255 GetLinkToUniversityStruct(boolean);
external function boolean SetCompanyForUniversity(string,string);
//std
external function string 60 GetMonthString(integer,string);
external procedure GetCourseStr(record CourseVc,var string,var string,var string, string, var boolean);
external function string 255 ToolWebBuildLink(string,string);
external function string 255 TranslateString(string,string);
external outer function Boolean UnivTestActiveVc_GetCourseDateTime(string,var Date,var Time,var Date,var Time);
external function Boolean DateTimeInRange(Date,Time,Date,Time,Date,Time); // CUST
external procedure GetTypeStr(record CourseTypeVc,var string,string);
external procedure ShowRedirectHtml(string,boolean);
external function string 255 GetLinkToStruct(LongInt,boolean);

procedure ShowCourseDetails(record CourseVc Courser)
begin
  record NotepadVc Noter;
  record RLinkVc RLr;
  string 255 theheader;
  integer cnt;
  boolean printf,translated;
  string 60 langcode;
  string 255 name,description,length;
  record WebNGUniversityBlock WUb;
  string 255 tstr;

  langcode = CurrentWebLang;
  BlockLoad(WUb);
  GetCourseStr(Courser,name,description,length,langcode,translated);  
  printf = false;
  cnt = 1;

  if (blank(name)) then begin
    name = Courser.Name;
  end;
  while (ReadRecordLink(Courser,cnt,Noter,RLr)) begin
    cnt = cnt + 1;
    if (langcode==Noter.LangCode) then begin
      WebOutStringFormat("<h1>" & name & "</h1>");
      tstr = "<div";
      if (nonblank(WUb.DescriptDivClass)) then begin
        tstr = tstr & " class=""" & WUb.DescriptDivClass & """";
      end;
      tstr = tstr & ">";
      WebOutTagOpen(tstr);
      WebOutText(Noter,false,"");
      WebOutTagClose("</div>");
      printf = true;
      goto LShowCourseDetails;
    end;
  end;

  if(printf == false) then begin
    cnt = 1;
    langcode = "EN";       
    while (ReadRecordLink(Courser,cnt,Noter,RLr)) begin
      cnt = cnt + 1;
      if (langcode==Noter.LangCode) then begin
        WebOutStringFormat("<h1>" & Courser.Name & "</h1>");
        tstr = "<div";
        if (nonblank(WUb.DescriptDivClass)) then begin
          tstr = tstr & " class=""" & WUb.DescriptDivClass & """";
        end;
        tstr = tstr & ">";
        WebOutTagOpen(tstr);
        WebOutText(Noter,false,"");
        WebOutTagClose("</div>");
        goto LShowCourseDetails;
      end;
    end;
  end;
LShowCourseDetails:;
  return;
end;

function Boolean CustomerHasBoughtMedia(record CUVc CUr,record CourseMediaVc Mediar)
begin
  Integer i;
  record CourseMediaVc tMediar;
  record RLinkVc RLr;
  Boolean res;
  
  i = 1;
  while (ReadRecordLink(CUr,i,tMediar,RLr)) begin
    if (tMediar.CourseCode==Mediar.CourseCode) then begin
      res = true;
      goto LCustomerHasBoughtMedia;
    end;
    i = i + 1;
  end;
  
LCustomerHasBoughtMedia:;
  CustomerHasBoughtMedia = res;
  return;
end;

procedure DisplayCourseMaterials(string course,record CUVc CUr)
begin
  record CourseMediaVc Mediar;
  row CourseMediaVc Mediarw;
  Integer i,rwcnt;
  record CourseMediaVc aPdf;
  record CourseMediaVc aVid;
  Boolean pdflangf,vidlangf;
  string 255 curlang;
  Boolean firstf;
  
  if (LoginState) then begin
    firstf = true;
    curlang = CurrentWebLang;
    Mediar.CourseCode = course;
    if (ReadFirstMain(Mediar,1,true)) then begin
      rwcnt = MatRowCnt(Mediar);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Mediar,i,Mediarw);
        switch (Mediarw.Type) begin
          case kCourseMediaTypeFile:
            MatRowPut(aPdf,MatRowCnt(aPdf),Mediarw);
            if (Mediarw.LangCode==curlang) then begin
              pdflangf = true;
            end;
          case kCourseMediaTypeVideo: 
            MatRowPut(aVid,MatRowCnt(aVid),Mediarw);
            if (Mediarw.LangCode==curlang) then begin
              vidlangf = true;
            end;
        end;
      end;
      rwcnt = MatRowCnt(aPdf);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(aPdf,i,Mediarw);
        if (Mediarw.LangCode==curlang or (blank(Mediarw.LangCode) and pdflangf==false)) then begin
          if (firstf) then begin
            WebOutStringFormatNL("<div class='media_title title_files'>" & ToolWebNGTranslateText(30079) & "</div>");
            WebOutString("<div class='media_block'>");
            firstf = false;
          end;
          WebOutString("<div class='media_link pdf_link'><div class='hwu_section_head'>" & Mediarw.ExtraInfo & "</div><a target='_blank' href='" & Mediarw.Link & "'>" & ToolWebNGTranslateText(30083) & "</a></div>");
        end;
      end;
      if (CUr.DealerType==1 or CustomerHasBoughtMedia(CUr,Mediar) or nonblank(CurrentUser)) then begin
        rwcnt = MatRowCnt(aVid);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(aVid,i,Mediarw);
          if (Mediarw.LangCode==curlang or (blank(Mediarw.LangCode) and vidlangf==false)) then begin
            if (firstf) then begin
              WebOutStringFormatNL("<div class='media_title title_videos'>" & ToolWebNGTranslateText(30080) & "</div>");
              WebOutString("<div class='media_block'>");
              firstf = false;
            end;
            WebOutString("<div class='media_link video_link'><div class='hwu_section_head'>" & Mediarw.ExtraInfo & "</div><a href='" & Mediarw.Link & "'>" & ToolWebNGTranslateText(30084) & "</a></div>");
          end;
        end;
      end;
    end;
  end;
  if (!firstf) then begin
    WebOutString("</div>");
  end;

  return;
end;

procedure DisplayCourseSchedule(string course)
begin
  record CourseEventVc CourseEventr;
  string 255 tstr,applystr,datestr;
  Integer oldcomp,newcomp;
  Boolean res,firstf,foundf,validf,TrHs;
  string 255 llink2,langcode,courseno;
  record ResVc Resr; 
  record WebNGElementVc WEr;

  firstf = true;
  validf = false;

  if (LoginState) then begin
    WebOutStringFormatNL("<div class='sched_title'>" & ToolWebNGTranslateText(30078) & "</div>");

    TrHs = true;
    CourseEventr.CourseCode = course;
    CourseEventr.TransDate = AddDay(CurrentDate,1);
    while(LoopKey("CourseCodeTD",CourseEventr,2,TrHs)) begin
      if (CourseEventr.CourseCode!=course) then begin
        TrHs = false;
      end else begin
        foundf = true;
        if (blank(CourseEventr.CountryCode)) then begin //CourseEventr.CountryCode <> country) then begin
          foundf = false;
        end;
        
        if((CourseEventr.StatusFlag == 0) and (foundf == true)) then begin         
          datestr = ToolWebNGTranslateText(30015) & ": " & CourseEventr.TransDate;
          if (CourseEventr.TransDate <> CourseEventr.EndDate) then begin
            datestr = datestr & "-" & CourseEventr.EndDate;        
          end;
        
          Resr.Code = CourseEventr.ConferenceLocation;
          if(ReadFirstMain(Resr,1,true)) then begin end;

          tstr = Resr.Addr1;
          if (nonblank(tstr)) then begin
            if (nonblank(Resr.Addr2)) then begin
              tstr = tstr & ", ";
            end;
          end;
          tstr = tstr & Resr.Addr2;
          if (nonblank(tstr)) then begin
            if (nonblank(Resr.Addr3)) then begin
              tstr = tstr & ", ";
            end;
          end;
          tstr = tstr & Resr.Addr3;
          if (firstf) then begin
            WebOutString("<div class='sched_table'>");
            firstf = false;
          end;
          llink2 = FormatSimpleLink(GetUniversityFunctionLink("apply",CourseEventr.SerNr),true);
          applystr = "<a href='" & llink2 & "'>" & ToolWebNGTranslateText(30001) & "</a>";
          if((CourseEventr.MaxPersons-CourseEventr.NoOfPersons)<=0)  or ((CurrentDate>CourseEventr.LastBookingDate) and (nonblankdate(CourseEventr.LastBookingDate))) then begin
            applystr = ToolWebNGTranslateText(30043);
          end else begin
            validf = true;
          end;
          WebOutString("<div class='sched_row'><div class='sched_date'>" & datestr & "<br>" & tstr & "</div><div class='sched_action'>" & applystr & "</div></div>");
        end;
      end;
    end;
  
    if (firstf==false) then begin
      WebOutString("</div>");
    end;
  end;

  if (!validf and LoginState) then begin
    WebOutString("<div class='hwu_contact_us'>");
    if (blank(GetSessionString("createmail_complete"))) then begin
      WebOutString("<div class='hwu_contact_text'>" & ToolWebNGTranslateText(30077) & "</div>");
    end;
    WEr.Type = kElementTypeCreateMailForm;
    WEr.HALFunc = GetWebmailBoxForCountry(ToolWebNGGetCountry);
    ShowCreateMailForm(WEr);
    WebOutString("</div>");
  end;
  
  return;
end;

procedure DisplayCourseWebTestLink(string course,string langcode)
begin
  record UnivTestVc Testr;
  string 255 llink;
  Boolean TestIsActive;
  Date StartDate,EndDate;
  Time StartTime,EndTime;

  if (LoginState) then begin
    Testr.CourseCode = course;
    if (ReadFirstMain(Testr,1,true)) begin
      //TestIsActive = UnivTestActiveVc_GetCourseDateTime(Testr.CourseCode,StartDate,StartTime,StartDate,EndTime);
      //if (TestIsActive and DateTimeInRange(CurrentDate,CurrentTime,StartDate,StartTime,EndDate,EndTime)) then begin
      //if (DateInRange(CurrentDate,Testr.StartDate,Testr.EndDate) and (CurrentTime > Testr.StartTime) and (CurrentTime < Testr.EndTime)) then begin
      if (true) then begin
      llink = "/WebHWUUnivTestCust.hal?course=" & Testr.CourseCode & "&company=&webpage=SALES";
        WebOutString("<div class='hwu_test_link'><div class='hwu_section_head'>" & ToolWebNGTranslateText(30082) & "</div><a href='" & llink & "'>" & ToolWebNGTranslateText(25525) & "</a></div>");
      end;
    end;
  end;

  return;
end;

procedure ShowUniversityCourseDescript(string course,string country,string group)
begin
  record CourseEventVc CourseEventr;
  string 200 tstr;
  record CourseVc Courser;
  Integer oldcomp,newcomp;
  Boolean res,partnerf;
  string 255 llink2,langcode,courseno;
  record CUVc CUr;
  
/*
  courseno = courseevent;
  
  CourseEventr.SerNr = courseno;
  if (ReadFirstMain(CourseEventr,1,true)==false) then begin
    WebOutString("<h1>" & ToolWebNGTranslateText(30062) & "</h1>"); //Course Event not found
    goto LShowUniversityCourseDescript;
  end;

  Courser.Code = CourseEventr.CourseCode;
*/
  langcode = CurrentWebLang;
  Courser.Code = course;
  CUr.Code = CurrentCust;
  ReadFirstMain(CUr,1,true);
  if (ReadFirstMain(Courser,1,true)) then begin
    ShowCourseDetails(Courser);
    DisplayCourseMaterials(Courser.Code,CUr);
    DisplayCourseWebTestLink(Courser.Code,langcode);
    DisplayCourseSchedule(Courser.Code);
  end;
  
/*
  if (CourseEventr.SerNr>0) then begin
    WebOutTagOpen("<ul class=""hwubuttons"">");
    llink2 = FormatSimpleLink(GetUniversityFunctionLink("apply",CourseEventr.SerNr),true);
    if ((CourseEventr.MaxPersons-CourseEventr.NoOfPersons) <= 0)  or ((CurrentDate>CourseEventr.LastBookingDate) and (nonblankdate(CourseEventr.LastBookingDate))) then begin
      WebOutStringFormatNL("<li>" & ToolWebNGTranslateText(30043) & "</li>");
    end else begin
      if ((CourseEventr.MaxPersons-CourseEventr.NoOfPersons) <= 3) then begin
        WebOutTagOpen("<li>");
        WebOutTagOpen("<a href=""" & llink2 & """ onclick=""return jsOpenInParent('" & llink2 & "');"">");
        WebOutStringFormat(ToolWebNGTranslateText(30006));
        WebOutTagClose("</a>");
        WebOutTagClose("</li>");
      end else begin
        WebOutTagOpen("<li>");
        WebOutTagOpen("<a href=""" & llink2 & """ onclick=""return jsOpenInParent('" & llink2 & "');"">");
        WebOutStringFormat(ToolWebNGTranslateText(30001));
        WebOutTagClose("</a>");
        WebOutTagClose("</li>");
      end;
    end;
    WebOutTagClose("</ul>");
  end; 
*/

LShowUniversityCourseDescript:;
  return;
end;

// **********************************
// ******* Course Descriptions *******
// **********************************
procedure ShowUniversityPlannedCourses(string country,string group)
begin
  record CourseEventVc CourseEventr;
  record CourseVc Courser;  
  boolean foundf,testf,first_loop,translated;
  integer month,day,last_month,current_month;
  date first_of_month;
  string 60 last_type,company;//,country;
  string 255 llink,llink2,name,description,length,month_str,tstr;
  record ResVc Resr;  
  Integer oldcomp,newcomp;
  Boolean res;
  string 255 countryname;
  record WebNGCountryVc WCr;
  boolean oddline;
  boolean listbegin;
  string 255 langcode;
  record CourseTypeVc CourseTyper;
  string 20 oldtype;

  first_loop = true;
  listbegin = false;
  
  foundf = true;
  month = GetMonth(CurrentDate);
  day = GetDay(CurrentDate);
  first_of_month = AddDay(CurrentDate,-(day-1));
  
  WCr.Code = country;
  if (ReadFirstMain(WCr,1,true)) then begin 
    countryname = GetTranslatedNameCountry(WCr);
  end;
  langcode = CurrentWebLang;
 
  WebOutTagOpen("<div id=""univcourselist"">");
  
  // Local Educations
  //CourseEventr.CountryCode = "";//country;
  //CourseEventr.TransDate = first_of_month;
  /*
  CourseEventr.TransDate = AddDay(CurrentDate,1);
  while(LoopKey("TransDate",CourseEventr,1,true)) begin
    foundf = true;
    if(blank(CourseEventr.CountryCode)) then begin //CourseEventr.CountryCode <> country) then begin
      foundf = false;
    end;
    
    if((CourseEventr.StatusFlag == 0) and (foundf == true)) then begin
    
      if(first_loop) then begin
        // Print heading
        WebOutTagOpen("<h1>");        
        WebOutStringFormat(ToolWebNGTranslateText(30031) & " " & countryname);
        WebOutTagClose("</h1>");
        first_loop = false;
      end;
    
      current_month = GetMonth(CourseEventr.TransDate);
      if(current_month <> last_month) then begin  
        // Print header
        month_str = GetMonthString(current_month,CurrentWebLang);

        if (listbegin) then begin
          WebOutTagClose("</ul>");
        end;
        WebOutStringFormatNL("<h2>" & month_str & "</h2>");
        WebOutTagOpen("<ul class=""courselist"">");
        listbegin = true;
        last_month = current_month;
        oddline = true;
      end;
      
      Courser.Code = CourseEventr.CourseCode;
      if(ReadFirstMain(Courser,1,true)) then begin
        GetCourseStr(Courser,name,description,length,CurrentWebLang,translated);
        if (oddline) then begin
          WebOutTagOpen("<li class=""odd"">");
        end else begin
          WebOutTagOpen("<li>");
        end;
        oddline = !oddline;

        WebOutStringFormatNL("<h3>" & name & "</h3>");
        
        WebOutStringFormat("<p>");
        WebOutStringFormat(ToolWebNGTranslateText(30015) & ": " & CourseEventr.TransDate);
        if(CourseEventr.TransDate <> CourseEventr.EndDate) then begin
          WebOutStringFormat("-" & CourseEventr.EndDate);        
        end;
        WebOutStringFormatNL("</p>");
        
        Resr.Code = CourseEventr.ConferenceLocation;
        if(ReadFirstMain(Resr,1,true)) then begin end;

        tstr = Resr.Addr1;
        if (nonblank(tstr)) then begin
          if (nonblank(Resr.Addr2)) then begin
            tstr = tstr & ", ";
          end;
        end;
        tstr = tstr & Resr.Addr2;
        if (nonblank(tstr)) then begin
          if (nonblank(Resr.Addr3)) then begin
            tstr = tstr & ", ";
          end;
        end;
        tstr = tstr & Resr.Addr3;
        
        WebOutStringFormatNL("<p>" & ToolWebNGTranslateText(30030) & ": " & tstr & "</p>");

        WebOutTagOpen("<ul class=""hwubuttons"">");
        llink = FormatSimpleLink(WebGetArg("path") & "/" & CourseEventr.SerNr,true);
        llink2 = FormatSimpleLink(GetUniversityFunctionLink("apply",CourseEventr.SerNr),true);
        if((CourseEventr.MaxPersons-CourseEventr.NoOfPersons) <= 0)  or ((CurrentDate>CourseEventr.LastBookingDate) and (nonblankdate(CourseEventr.LastBookingDate))) then begin
          WebOutTagOpen("<li>");
          WebOutStringFormat(ToolWebNGTranslateText(30043));
          WebOutTagClose("</li>");
        end else begin
          WebOutTagOpen("<li>");
          if((CourseEventr.MaxPersons-CourseEventr.NoOfPersons) <= 3) then begin
            WebOutTagOpen("<a href=""" & llink2 & """>");// target=""_blank"" onclick=""return jsUnivReadMore(this.href);"">");
            WebOutStringFormat(ToolWebNGTranslateText(30006));
            WebOutTagClose("</a>");
          end else begin
            WebOutTagOpen("<a href=""" & llink2 & """>");// target=""_blank"" onclick=""return jsUnivReadMore(this.href);"">");
            WebOutStringFormat(ToolWebNGTranslateText(30001));
            WebOutTagClose("</a>");
          end;
          WebOutTagClose("</li>");
        end;
        WebOutTagOpen("<li>");
        WebOutTagOpen("<a href=""" & llink & """ target=""_blank"" onclick=""return jsUnivReadMore(this.href);"">");
        WebOutStringFormat(ToolWebNGTranslateText(30037));
        WebOutTagClose("</a>");
        WebOutTagClose("</li>");
        WebOutTagClose("</ul>");
        WebOutTagClose("</li>");
      end;
    end;
  end;
  */
  
  while (LoopKey("Type",Courser,1,true)) begin
    testf = true;
    if (Courser.Type=="INTERNAL" and blank(CurrentUser)) then begin
      testf = false;
    end;
    if (Courser.Terminated!=0) then begin
      testf = false;
    end;
    if (nonblank(group) and Courser.Type!=group) then begin
      testf = false;
    end;
    if (testf) then begin
      if (Courser.Type!=oldtype) then begin
        if (nonblank(Courser.Type)) then begin
          CourseTyper.Code = Courser.Type;
          ReadFirstMain(CourseTyper,1,true);
          tstr = "";
          GetTypeStr(CourseTyper,tstr,langcode);
          WebOutString("<div class='course_type'>" & tstr & "</div>");
        end;
        oldtype = Courser.Type;
      end;
      GetCourseStr(Courser,name,description,length,langcode,translated);
      if (nonblank(name)) then begin
        llink = FormatSimpleLink(WebGetArg("path") & "/" & Courser.Code,true);
        WebOutString("<div class='course_line'><a href='" & llink & "'>" & name & "</a></div>");
      end;
    end;
  end;
  
  if (listbegin) then begin
    WebOutTagClose("</ul>");
  end;
  
  WebOutTagClose("</div>");

  // International Educations
  //TODO: Repeat above for international educations

  return;
end;

global
procedure UniversityActionUpdateGroup()
begin
  string 255 country,group;
  string 255 newurl;
  
  country = WebGetArg("country");
  group = WebGetArg("group");
  
  newurl = GetLinkToUniversityStruct(true);

  if (nonblank(newurl)) then begin
    newurl = newurl & "courses/";
    
    if (blank(country)) then begin
      country = ToolWebNGGetCountry;
    end;
    if (nonblank(country)) then begin
      newurl = newurl & country & "/";
      if (nonblank(group)) then begin
        newurl = newurl & group & "/";
      end;
    end;
  end;
  
  if (nonblank(newurl)) then begin
    RedirectToStructLink(newurl);
  end else begin
    RedirectToStartPage;
  end;
  
  return;
end;

procedure CountryGroupCombo(array string grouplist,array string namelist,string currentcountry,string currentgroup)
begin
  integer i,cnt;
  boolean firstline;
  
  cnt = StringToLongint(grouplist[0]);
  firstline = true;
  
  for (i=1;i<=cnt;i=i+1) begin
    if (firstline) then begin
      WebOutTagOpen("<form method=""POST"" action=""" & FormatLink("/WebAction.hal","?action=university_updategroup",true,true) & """>");
      WebOutStringFormatNL("<input type=""hidden"" id=""country"" name=""country"" value=""" & currentcountry & """>");
      WebOutTagOpen("<select name=""group"" id=""group"" onchange=""javascript:this.form.submit();"">");
      firstline = false;
    end;
    
    if (currentgroup==grouplist[i]) then begin
      WebOutTagOpen("<option selected value=""" & grouplist[i] & """>");
    end else begin
      WebOutTagOpen("<option value=""" & grouplist[i] & """>");
    end;
    WebOutStringFormat(namelist[i]);
    WebOutTagClose("</option>");
  end;
    
  if (firstline==false) then begin
    WebOutTagClose("</select>");
    WebOutStringFormatNL("<input type=""submit"" id=""s1"" name=""s1"" value=""" & ToolWebNGTranslateText(25514) & """>"); //Change
    WebOutTagClose("</form>");
  end;
  return;
end;

global
procedure UniversityPlannedCourses(record WebNGStructVc WSr,string path)
begin
  record WebNGPageVc WPr;
  record WebNGCountryVc WCr;
  string 255 node,mpath;
  string 255 country,group,courseevent;
  integer oldcomp;
  boolean res;
  array string 255 grouplist;
  array string 255 namelist;
  string 255 newurl;
  boolean testf;
  integer i,cnt;
  boolean pagestartshown;
  record WebNGUniversityBlock WUb;
  record CourseVc Courser;
  record CourseTypeVc CourseTyper;

  mpath = path;
  node = removenextnode(mpath);
  if (nonblank(node)) then begin
    CourseTyper.Code = node;
    if (ReadFirstMain(CourseTyper,1,true)) then begin
      group = node;
    end else begin
      mpath = path;
    end;
  end;


  if (blank(mpath)) then begin
    RedirectToCountrySubPage(WSr);
  end;

  WPr.Code = WSr.WebPage;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  
  pagestartshown = false;
  cnt = 0;
  testf = true;
  node = removenextnode(mpath);
  //the mechanism allows:
  //  /estonia/
  //  /estonia/hansaraama/
  //  /sweden/1/
  //  /estonia/1/  (defaults to first company in country)
  //  /estonia/hansaraama/2/
  if (nonblank(node)) then begin
    WCr.Code = node;
    if (ReadFirstMain(WCr,1,true)) then begin
      country = WCr.Code;
      node = removenextnode(mpath);
/* this is not used anymore. Added grouping in beginning of this function
      GetListOfGroupsForCountry(country,grouplist,namelist);
      cnt = StringToInt(grouplist[0]);
      if (cnt>0) then begin
        for (i=1;i<=cnt;i=i+1) begin
          if (grouplist[i]==node) then begin
            group = node;
            node = removenextnode(mpath);
            i = cnt+1;
          end;
        end;
      end;
*/
      courseevent = node;
    end;
  end;
  if (nonblank(courseevent)) then begin
    Courser.Code = courseevent;
    if (ReadFirstMain(Courser,1,true)==false) then begin
      //group = courseevent;
      //courseevent = removenextnode(mpath);
    end;
  end;

  if (nonblank(country)) then begin
    res = false;
    if (LoginState==false) then begin
      if (cnt>0) then begin
        if (blank(group) and nonblank(courseevent)) then begin  
          group = grouplist[1];
        end;
        if (blank(group)) then begin
          newurl = WebGetArg("path");
          if (right(newurl,1)!="/") then begin
            newurl = newurl & "/";
          end;
          newurl = newurl & grouplist[1] & "/";
          RedirectToStructLink(newurl);
          goto LUniversityPlannedCourses;
        end;
      end;
      oldcomp = CurrentCompany;
      res = SetCompanyForUniversity(country,group);
    end;

    BlockLoad(WUb);


    if (blank(courseevent)) then begin
      ShowWebAppPageStart(WPr,"");
      pagestartshown = true;
      if (cnt>0 and LoginState==false) then begin
        WebOutTagOpen("<div id=""univgroupselect"">");
        WebOutStringFormat(ToolWebNGTranslateText(25904) & " "); //Select product line:
        CountryGroupCombo(grouplist,namelist,country,group);    
        WebOutTagClose("</div>");
      end;
      
      if (nonblank(WUb.CoursePlanElement)) then begin
        ShowWebElementTemplate(WUb.CoursePlanElement,0); //before
      end;
      
      ShowUniversityPlannedCourses(country,group);

      if (nonblank(WUb.CoursePlanElement)) then begin
        ShowWebElementTemplate(WUb.CoursePlanElement,2); //after
      end;
    end else begin
      WPr.Code = WUb.DescriptTemplate;
      if (ReadFirstMain(WPr,1,true)) then begin end;
      ShowWebAppPageStart(WPr,"");
      pagestartshown = true;
      ShowUniversityCourseDescript(courseevent,country,group);
    end;
  end;
  
  if (pagestartshown==false) then begin
    ShowWebAppPageStart(WPr,"");
  end;
  
  ShowWebAppPageEnd(WPr);
  
  if (res) then begin
    ResetCompany(oldcomp);
  end;
LUniversityPlannedCourses:;
  return;
end;

