external function Boolean BuildWebNGInvoice(var record IVVc,integer,string,boolean,string);
//tools
external procedure ShowRedirectHtmlFromArea(area,boolean);
external function string 255 FormatLink(string,string,boolean,boolean);
external function boolean LoginState();
//translation
external function string 255 ToolWebNGTranslateText(integer);
//shop
external updating procedure ShopHandleCreditCardPayment(string);
external updating procedure ShopHandlePaymentFailed(string,Integer);
external procedure RedirectToPaymentCompletedPage(record WebNGPaySessionVc);
external function boolean GetShoppingBasket(var record WebNGShopBasketVc,integer);
external procedure RedirectToShoppingBasket();
//std
external function string 255 UrlEncodeCS(string);
//webng
external procedure RedirectToShopPageWithArg(string,string);
external procedure RedirectToURL(string);
//
external procedure FindCCAccountID(string,string,Integer,var record CCAccountIDVc,Integer);
external function Integer InString2(string,string);
external procedure GetCountryName(string,string,var string);
external procedure FindPaymentGateway(string,string,Integer,var record CCAccountIDVc,Integer,Integer);
external function Boolean IsMarketplaceServer();
external updating function Boolean CreateSubscriptionsFromShoppingBasket(string,string);
external updating function Boolean DoSubscriptionTransMn(var record RcVc);
external updating procedure ClearShopBasket(integer);
external updating function Boolean DoSubscriptionTransPayMn(var record RcVc);
external function string 255 GetLinkToShop();

function boolean GetPaySession(string id,var record WebNGPaySessionVc WPSr,Boolean ignorelogin)
begin
  boolean res;

  res = false;
  if (ignorelogin or LoginState) then begin
    WPSr.UUID = id;
    res = ReadFirstMain(WPSr,1,true);
  end;
  GetPaySession = res;
  return;
end;

procedure GetCUPersonData(string custcode,var string firstname,var string lastname,var string email,var string addr1,var string addr2,var string addr3,var string postcode,var string country,var string phone)
begin
  record CUVc CUr;
  string 60 tstr;
  longint l;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.Person)) then begin
      l = InString2(CUr.Person," ");
      if (l!=-1) then begin
        lastname = mid(CUr.Person,l+1,255);
        firstname = left(CUr.Person,l);
      end else begin
        firstname = CUr.Person;
        lastname = "";
      end;
    end;
    email = CUr.eMail;
    addr1 = CUr.InvAddr0;
    addr2 = CUr.InvAddr1;
    addr3 = CUr.InvAddr2;
    postcode = CUr.InvAddr4;
    country = CUr.CountryCode;
    if (nonblank(country) and len(country)<>3) then begin
      GetCountryName(CUr.CountryCode,"",tstr);    
    end;
    country = tstr;
    phone = CUr.Phone;
  end;
  
  return;
end;

global
procedure RedirectTopaytrail(string paysessionid)
begin
  record CCAccountIDVc CCAccountIDr;
  record CYBlock CYb;
  record WebNGPaySessionVc WPSr;
  string 255 tourl,amount,authcode,link,link2;
  string 255 accesscode;
  string 255 merchant;
  string 255 locale;
  string 255 returnurl;
  string 255 custom,base;
  string 255 firstname,lastname,addr1,addr2,addr3,email,postcode,country,phone,customer;
  area areq,checkarea;
  record WebNGShopBasketVc WSBr;
  record IVVc IVr;
  record CUVc CUr;

  if (GetPaySession(paysessionid,WPSr,false)==false) then begin
    goto LRedirectTopaytrail;
  end;
  BlockLoad(CYb);
  FindPaymentGateway("","",1,CCAccountIDr,kCardHolderNotPresent,kCCPartnerPaytrail);
  CUr.Code = WPSr.CustCode;
  ReadFirstMain(CUr,1,true);
 // logtext(0,"CCAccountIDr.Code" & CCAccountIDr.Code);
  tourl = CCAccountIDr.URL;
  if (GetShoppingBasket(WSBr,0)) then begin
    if (BuildWebNGInvoice(IVr,0,CUr.PayDeal,false,"")) then begin      
      amount = ValToString(IVr.Sum4,M4Val,"",".",0);
    end else begin
      amount = ValToString(WSBr.Sum,M4Val,"",".",0);
    end;
  end;
  accesscode = CCAccountIDr.AccessKey;
  merchant = CCAccountIDr.ProfileID;
  if (WebSecureMode) then begin
    returnurl = "https://" & Webhost;
  end else begin
    returnurl = "http://" & Webhost;
  end;
  base = GetLinkToShop;
  
  link = FormatLink("/WebUpdatingAction.hal","action=paytrailproceed&session=" & paysessionid,true,true);
  link2 = returnurl & base & "payment/cancel/" & paysessionid;

  AddTextToArea(tourl,areq);
 // logtext(0,tourl);
 // logtext(0,link2);
  
  AddTextToArea(accesscode & "|",checkarea);
  AddTextToArea("?MERCHANT_ID=" & merchant,areq);
  AddTextToArea(merchant & "|",checkarea);
  AddTextToArea("&AMOUNT=" & amount,areq);
  AddTextToArea(amount & "|",checkarea);
  AddTextToArea("&ORDER_NUMBER=0",areq);
  AddTextToArea("0|",checkarea);
  AddTextToArea("&REFERENCE_NUMBER=",areq);
  AddTextToArea("|",checkarea);
  AddTextToArea("&ORDER_DESCRIPTION=" & firstname,areq);
  AddTextToArea(firstname & "|",checkarea);
  AddTextToArea("&CURRENCY=" & WPSr.Currency,areq);
  AddTextToArea(WPSr.Currency & "|",checkarea);
  AddTextToArea("&RETURN_ADDRESS=",areq);
  AddTextToArea(UrlEncodeCS(returnurl),areq);
  AddTextToArea(UrlEncodeCS(link),areq);
  AddTextToArea(returnurl & link & "|",checkarea);
  AddTextToArea("&CANCEL_ADDRESS=",areq);
  AddTextToArea(UrlEncodeCS(link2),areq);
  AddTextToArea(link2 & "|",checkarea);

  AddTextToArea("&PENDING_ADDRESS=",areq);
  AddTextToArea("|",checkarea);
  AddTextToArea("&NOTIFY_ADDRESS=",areq);
  AddTextToArea("|",checkarea);
  AddTextToArea("&TYPE=S1",areq);
  AddTextToArea("S1|",checkarea);
  AddTextToArea("&CULTURE=fi_FI",areq);
  AddTextToArea("fi_FI|",checkarea);
  AddTextToArea("&PRESELECTED_METHOD=",areq);
  AddTextToArea("|",checkarea);
  AddTextToArea("&MODE=1",areq);
  AddTextToArea("1|",checkarea);
  AddTextToArea("&VISIBLE_METHODS=",areq);
  AddTextToArea("|",checkarea);
  AddTextToArea("&GROUP=",areq);
  authcode = Uppercase(md5area(checkarea));
  AddTextToArea("&AUTHCODE=" & authcode,areq);
  
  ShowRedirectHtmlFromArea(areq,true);
LRedirectTopaytrail:;
  return;
end;

global
updating procedure ShopPaymentPaytrailRedirectAfter2(string paysessionid,string response)
begin
  string 255 errmsg;
  record WebNGPaySessionVc WPSr;
  record WebNGShopBasketVc WSBr;
  integer err,i,rwcnt;
  record SubINPackageVc SubINPr;
  record RcVc RepSpec;
  record SubscriptionTransVc STr;
  string 255 langcode;
  
  err = 0;
  if (GetPaySession(paysessionid,WPSr,false)==false) then begin
    err = err + 1;
  end;
  if (WPSr.AppID==1) then begin
    if (GetShoppingBasket(WSBr,0)==false) then begin
      err = err + 2;
    end;
  end;
  if (response == "FAIL") then begin
    err = err + 4;
  end;

  if (err == 0) then begin
    if (WPSr.Status == 10 + kCCStatusPaymentOK) then begin
      if (IsMarketplaceServer) then begin
        langcode = GetCookie("langcode");
        CreateSubscriptionsFromShoppingBasket("paytrail",langcode);
        RepSpec.d1 = CurrentDate;
        RepSpec.f5 = CurrentCust;
        DoSubscriptionTransMn(RepSpec);
        if (RepSpec.LastVer>-1) then begin
          DoSubscriptionTransPayMn(RepSpec);
          ClearShopBasket(0);
        end;
        PutSessionString("reload_licenses","1"); 
      end;
    end else begin
      ShopHandleCreditCardPayment(WPSr.UUID);
    end;
    RedirectToPaymentCompletedPage(WPSr);
  end else begin
    if (BitAnd(err,1)!=0) then begin
      errmsg = ToolWebNGTranslateText(25040); //Invalid payment session.
    end;
    if (BitAnd(err,2)!=0) then begin
      errmsg = ToolWebNGTranslateText(25040); //Invalid payment session.
    end;
    if (BitAnd(err,4)!=0) then begin
      errmsg = ToolWebNGTranslateText(25009); //Invalid payment session.
    end;
    RedirectToShopPageWithArg("payment/error","errmsg=" & errmsg);
  end;
  return;
end;

global
updating procedure ShopPaymentPayTrailRedirectAfter()
begin
  ShopPaymentPayTrailRedirectAfter2("","");
  return;
end;

global
updating procedure ShopPaymentAfterpaytrail2(string paysessionid, string response)
begin
  record WebNGPaySessionVc oldWPSr,WPSr;
  integer err;
  string 255 errmsg;

  err = 0;
  if (GetPaySession(paysessionid,WPSr,true)==false or blank(paysessionid)) then begin
    err = err + 1;
  end;
  if (response == "FAIL") then begin
    err = err + 4;
  end;
  if (err==0) then begin//success
    RecordCopy(oldWPSr,WPSr);
    WPSr.Status = 10+kCCStatusPaymentOK;
    RecordUpdate(oldWPSr,WPSr,false);

    WebOutString("OK");
    RedirectToURL(FormatLink("/WebUpdatingAction.hal","action=afterpaytrailpayment&session=" & paysessionid & "&status=" & response,true,true));
  end else begin
//    LogText(0,"paytrail payment error: " & responseCode & " (paysession=" & paysessionid & ")");
    ShopHandlePaymentFailed(WPSr.UUID,kCCStatusPaymentServerError);
    errmsg = ToolWebNGTranslateText(25009);
    RedirectToShopPageWithArg("payment/error","errmsg=" & errmsg);
  end;

LShopPaymentAfterpaytrail:;
  return;
end;

global
updating procedure ShopPaymentAfterpaytrail()
begin
  ShopPaymentAfterpaytrail2("","");
  return;
end;
