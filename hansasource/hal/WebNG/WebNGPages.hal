//tools
external procedure RollbackOneRequestURL();
external procedure ToolWebOutElementTextFormat(record WebNGElementVc);
external procedure GetWebSiteSettings(var string,var string,var string,var string,var string,var string,var integer,var boolean,var string,var longint,var longint);
external function string 10 ToolWebNGGetCountry();
external procedure GetLoginAndSelectCountryNodes(var longint,var longint);
external function Boolean FindWebPageTranslation(record WebNGPageVc,var record WebNGTranslateVc);
external procedure ShowGoogleReCaptchaHeader();
//translation
external function string 255 ToolWebNGTranslateText(integer);
//webng
external procedure RedirectToSelectCountryPage;
//elements
external procedure ShowWebElement(string);
external procedure ShowWebElementOverrideContent(string,record WebNGElementVc,integer);
//forward declarations
external procedure ShowErrorPage(string); //forward declaration
external function string 10 CurrentWebLang();

global
procedure LoadWebPage(string page,var record WebNGPageVc WPr)
begin
  WPr.Code = page;
  if (nonblank(WPr.Code)) then begin
    if (ReadFirstMain(WPr,1,true)) then begin end;
  end;
  return;
end;

function boolean ShowEncapsulationDivOpen(record WebNGPageVc WPr)
begin
  record WebNGPageVc TemplWPr;
  boolean encapsulateindiv;
  string 255 tstr,divid,divclass;

  encapsulateindiv = false;
  if (WPr.EncapsulateInDiv==1) then begin
    encapsulateindiv = true;
    divid = WPr.DivID;
    divclass = WPr.DivClass;
  end else begin
    TemplWPr.Code = WPr.TemplatePage;
    if (ReadFirstMain(TemplWPr,1,true)) then begin
      if (TemplWPr.EncapsulateInDiv==1) then begin
        encapsulateindiv = true;
        divid = TemplWPr.DivID;
        divclass = TemplWPr.DivClass;
      end;
    end;
  end;
  if (encapsulateindiv) then begin
    tstr = "<div";
    if (nonblank(divid)) then begin tstr = tstr & " id=""" & divid & """"; end;
    if (nonblank(divclass)) then begin tstr = tstr & " class=""" & divclass & """"; end;
    tstr = tstr &  ">";
    WebOutTagOpen(tstr);
  end;
  ShowEncapsulationDivOpen = encapsulateindiv;
  return;
end;

procedure ShowEncapsulationDivClose(record WebNGPageVc WPr,boolean iencapsulateindiv)
begin
  record WebNGPageVc TemplWPr;
  boolean encapsulateindiv;
  string 255 tstr,divid,divclass;

  encapsulateindiv = iencapsulateindiv;
  if (encapsulateindiv==false) then begin
    if (WPr.EncapsulateInDiv==1) then begin
      encapsulateindiv = true;
      divid = WPr.DivID;
      divclass = WPr.DivClass;
    end else begin
      TemplWPr.Code = WPr.TemplatePage;
      if (ReadFirstMain(TemplWPr,1,true)) then begin
        if (TemplWPr.EncapsulateInDiv==1) then begin
          encapsulateindiv = true;
          divid = TemplWPr.DivID;
          divclass = TemplWPr.DivClass;
        end;
      end;
    end;
  end;
  if (encapsulateindiv) then begin
    WebOutTagClose("</div>");
  end;
  return;
end;

procedure ShowPageTemplateElements(record WebNGPageVc WPr,integer position)
begin
  row WebNGPageVc WPrw;
  integer i,cnt;
  
  cnt = MatRowCnt(WPr);

  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(WPr,i,WPrw);
    if (WPrw.Position==position) then begin
      ShowWebElement(WPrw.WebElement);
    end;
  end;
  
  return;
end;

procedure ShowPageElements(record WebNGPageVc WPr,integer position)
begin
  row WebNGPageVc WPrw;
  record WebNGPageVc TemplWPr;
  integer i,cnt,contentcnt;
  
  contentcnt = 0;
  cnt = MatRowCnt(WPr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(WPr,i,WPrw);
    if (WPrw.Position==position) then begin
      ShowWebElement(WPrw.WebElement);
      contentcnt = contentcnt+1;
    end;
  end;
  
  if (contentcnt==0 or position==3) then begin
    if (nonblank(WPr.TemplatePage)) then begin
      TemplWPr.Code = WPr.TemplatePage;
      if (ReadFirstMain(TemplWPr,1,true)) then begin
        ShowPageElements(TemplWPr,position); //content
      end;
    end;
  end;
  return;
end;

procedure ShowOverridePageContent(record WebNGPageVc WPr,record WebNGElementVc htmltext,integer position)
begin
  row WebNGPageVc WPrw;
  record WebNGPageVc TemplWPr;
  integer i,cnt,contentcnt;
  
  contentcnt = 0;
  cnt = MatRowCnt(WPr);
  for (i=0;i<cnt;i=i+1) begin
    MatRowGet(WPr,i,WPrw);
    if (WPrw.Position==1) then begin //content
      ShowWebElementOverrideContent(WPrw.WebElement,htmltext,position);
      contentcnt = contentcnt+1;
    end;
  end;
  if (contentcnt==0) then begin
    ToolWebOutElementTextFormat(htmltext);
  end;  
  return;
end;

procedure ShowOverridePageContentSimple(record WebNGPageVc WPr,string message)
begin
  record WebNGElementVc note;
  AddToText(message,note);
  ShowOverridePageContent(WPr,note,-1);
  return;
end;

procedure SendHtmlHeadTags(string title,array string stylesheets,integer arrlen,string analyticsid)
begin
  integer i;
  string 255 googlelink,pagelink;
  
  WebOutStringFormatNL("<meta http-equiv=""Content-Type"" content=""text/html;charset=utf-8"">");
  if (nonblank(title)) then begin
    WebOutTagOpen("<title>");
    WebOutStringFormat(title);
    WebOutTagClose("</title>");
  end;
  
  for (i=0;i<arrlen;i=i+1) begin
    WebOutStringFormatNL("<link rel=""stylesheet"" type=""text/css"" href=""" & stylesheets[i] & """ />");
  end;

  if (nonblank(analyticsid)) then begin
    pagelink = WebGetArg("path");
    if (nonblank(pagelink)) then begin
      if (right(pagelink,1)=="/") then begin
        pagelink = left(pagelink,len(pagelink) - 1);
      end;

      pagelink = "'" & pagelink & "'";
    end;
    if (false) then begin
      if (WebSecureMode) then begin
        googlelink = "https://ssl.google-analytics.com/urchin.js";
      end else begin
        googlelink = "http://www.google-analytics.com/urchin.js";
      end;
      WebOutTagOpen("<script src=""" & googlelink & """ type=""text/javascript"">");
      WebOutTagClose("</script>");

      WebOutTagOpen("<script type=""text/javascript"">");
      WebOutStringFormat("_uacct = """ & analyticsid & """;");
      WebOutStringFormat("urchinTracker(" & pagelink & ");");
      WebOutTagClose("</script>");
    end else begin
      WebOutTagOpen("<script>");
      WebOutStringFormatNL("(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){");
      WebOutStringFormatNL("(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),");
      WebOutStringFormatNL("m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)");
      WebOutStringFormatNL("})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');");
      WebOutStringFormatNL("ga('create', '" & analyticsid & "', 'auto');");
      WebOutStringFormatNL("ga('send', 'pageview');");
      WebOutTagClose("</script>");
    end;
  end;

  return;
end;

function string 255 ConvertWebLang()
begin
  string 255 res;

  res = CurrentWebLang;
  if (len(res)==3) then begin
    res = StringSetFromString(551,res);
  end;

  ConvertWebLang = res;
  return;
end;

global
procedure StartPage(record WebNGPageVc WPr)
begin
  string 255 startstruct,sitetitle,headerelement,footerelement,stylesheet,analyticsid,errorpage,lang;
  longint loginnode,selectcountry;
  integer prependtitle;
  boolean allowlogin;
  array string 255 sheets;
  integer arrLen;
  string 255 tstr;
  record WebNGPageVc TemplWPr;
  transaction boolean gOutputTagComments;
  transaction boolean gDontOutputHTMLDoctype;
  transaction string 255 gExtraHeadHTML;
  transaction string 255 gExtraSiteTitle;
  transaction boolean gSkipAnalyticsID;
  
  if (gDontOutputHTMLDoctype==false) then begin
  //  WebOutStringFormatNL("<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01//EN"" ""http://www.w3.org/TR/html4/strict.dtd"">");
  end;
  WebOutStringFormatNL("<!DOCTYPE HTML>");
  lang = ConvertWebLang;
  if (nonblank(lang)) then begin
    WebOutTagOpen("<html lang='" & lang & "'>");
  end else begin
    WebOutTagOpen("<html>");
  end;
  arrLen = 0;

  GetWebSiteSettings(startstruct,sitetitle,headerelement,footerelement,stylesheet,analyticsid,prependtitle,allowlogin,errorpage,loginnode,selectcountry);
  switch (prependtitle) begin
    case 0: 
      sitetitle = WPr.PageTitle;
    case 1: 
      if (nonblank(WPr.PageTitle)) then begin
        sitetitle = sitetitle & " " & WPr.PageTitle;
      end;
    case 2:
    case 3:
      if (blank(sitetitle)) then begin
        sitetitle = WPr.PageTitle;
      end else begin
        if (nonblank(WPr.PageTitle)) then begin
          sitetitle = WPr.PageTitle & " " & sitetitle;
        end;
      end;
  end;
  
  if (nonblank(gExtraSiteTitle)) then begin
    sitetitle = sitetitle & gExtraSiteTitle;
    gExtraSiteTitle = "";
  end;
  
  if (nonblank(stylesheet) and WPr.DontInheritStyle==0) then begin
    sheets[arrLen] = stylesheet;
    arrLen = arrLen+1;
  end;
  if (nonblank(WPr.StyleSheet)) then begin
    sheets[arrLen] = WPr.StyleSheet;
    arrLen = arrLen+1;
  end else begin
    if (nonblank(WPr.TemplatePage)) then begin
      TemplWPr.Code = WPr.TemplatePage;
      if (ReadFirstMain(TemplWPr,1,true)) then begin
        if (nonblank(TemplWPr.StyleSheet)) then begin
          sheets[arrLen] = TemplWPr.StyleSheet;
          arrLen = arrLen+1;
        end;
      end;
    end;
  end;

  if (gOutputTagComments) then begin
    WebOutTagOpen("<!--[if !IE]> PAGE-BEGIN: " & WPr.Code & " <![endif]-->");
  end;

  WebOutTagOpen("<head>");
  if (gSkipAnalyticsID==true) then begin analyticsid = ""; end;
  SendHtmlHeadTags(sitetitle,sheets,arrLen,analyticsid);
  if (WPr.TemporaryPage>0) then begin
    WebOutStringFormat("<meta http-equiv=""refresh"" content=""" & WPr.TemporaryPage & """>");
  end;
  ShowPageElements(WPr,3); //head
  WebOutStringFormat(gExtraHeadHTML);
  ShowGoogleReCaptchaHeader;
  WebOutTagClose("</head>");
  
  tstr = "<body";
  if (nonblank(WPr.BodyClass)) then begin
    tstr = tstr & " class=""" & WPr.BodyClass & """";
  end;
  tstr = tstr & ">";
  WebOutTagOpen(tstr);
    
  if (nonblank(headerelement)) then begin
    if (WPr.DontInheritSiteElements==0) then begin
      ShowWebElement(headerelement);
    end;
  end;

  return;
end;

global
procedure EndPage(record WebNGPageVc WPr)
begin
  string 255 startstruct,sitetitle,headerelement,footerelement,stylesheet,analyticsid,errorpage;
  longint loginnode,selectcountry;
  integer prependtitle;
  boolean allowlogin;
  transaction boolean gOutputTagComments;

  GetWebSiteSettings(startstruct,sitetitle,headerelement,footerelement,stylesheet,analyticsid,prependtitle,allowlogin,errorpage,loginnode,selectcountry);

  if (nonblank(footerelement)) then begin
    if (WPr.DontInheritSiteElements==0) then begin
      ShowWebElement(footerelement);
    end;
  end;

  WebOutTagClose("</body>");

  if (gOutputTagComments) then begin
    WebOutTagClose("<!--[if !IE]> PAGE-END: " & WPr.Code & " <![endif]-->");
  end;
  
  WebOutTagClose("</html>");
  return;
end;

procedure ApplyTemplate(var record WebNGPageVc WPr,integer level)
begin
  record WebNGPageVc TemplWPr;
  
  if (nonblank(WPr.TemplatePage)) then begin
    TemplWPr.Code = WPr.TemplatePage;
    if (ReadFirstMain(TemplWPr,1,true)) then begin
      if (level<=4) then begin
        ApplyTemplate(TemplWPr,level+1);
      end;
      if (blank(WPr.PageTitle)) then begin WPr.PageTitle = TemplWPr.PageTitle; end;
      if (blank(WPr.StyleSheet)) then begin WPr.StyleSheet = TemplWPr.StyleSheet; end;
      if (blank(WPr.BodyClass)) then begin WPr.BodyClass = TemplWPr.BodyClass; end;
      if (WPr.EncapsulateInDiv==0 and TemplWPr.EncapsulateInDiv==1) then begin
        if (blank(WPr.DivID)) then begin WPr.DivID = TemplWPr.DivID; end;
        if (blank(WPr.DivClass)) then begin WPr.DivClass = TemplWPr.DivClass; end;
        WPr.EncapsulateInDiv = 1; 
      end;
      if (WPr.DontInheritStyle==0) then begin WPr.DontInheritStyle = TemplWPr.DontInheritStyle; end;
      if (WPr.DontInheritSiteElements==0) then begin WPr.DontInheritSiteElements = TemplWPr.DontInheritSiteElements; end;
      if (WPr.TemporaryPage==0) then begin WPr.TemporaryPage = TemplWPr.TemporaryPage; end;
    end;
  end;
  return;
end;

global
procedure ShowWebAppPageStart(record WebNGPageVc WPr,string appdivid)
begin
  record WebNGPageVc WP2r;
  record WebNGElementVc WEr;
  record WebNGTranslateVc WTr;
  boolean encapsulateindiv,foundf;
  string 20 notification_element;
  
  foundf = FindWebPageTranslation(WPr,WTr);
  if (foundf==false) then begin
    RecordCopy(WP2r,WPr);
    ApplyTemplate(WP2r,0);
  end;
  
  StartPage(WP2r);
  
  if (foundf) then begin
    WebOutPageWithTemplate(WTr,WTr.HtmlTranslation==1,"",WPr,0);
    goto LShowWebAppPageStart;
  end;
  
  encapsulateindiv = ShowEncapsulationDivOpen(WP2r);
  ShowPageElements(WP2r,0); //before
  ShowOverridePageContent(WP2r,WEr,0); //before
  
  notification_element = GetSessionString("display_notification_element");
  if (nonblank(notification_element)) then begin
    ShowWebElement(notification_element);
    PutSessionString("display_notification_element","");
  end;
LShowWebAppPageStart:;
  if (nonblank(appdivid)) then begin
    WebOutStringFormatNL("<div id=""" & appdivid & """>");
  end else begin
    WebOutStringFormatNL("<div id=""webapp"">");
  end;
  
  return;
end;

global
procedure ShowWebAppPageEnd(record WebNGPageVc WPr)
begin
  record WebNGElementVc WEr;
  record WebNGTranslateVc WTr;
  
  WebOutStringFormatNL("</div>"); // webapp div
  
  if (FindWebPageTranslation(WPr,WTr)) then begin
    WebOutPageWithTemplate(WTr,WTr.HtmlTranslation==1,"",WPr,2);
    goto LShowWebAppPageEnd;
  end;
  ShowOverridePageContent(WPr,WEr,2); //after
  ShowPageElements(WPr,2); //after
  ShowEncapsulationDivClose(WPr,false);
LShowWebAppPageEnd:;
  EndPage(WPr);
  return;
end;

global
procedure ShowWebPage(record WebNGStructVc WSr)
begin
  record WebNGPageVc WPr;
  record WebNGTranslateVc WTr;
  boolean res,foundf;
  boolean encapsulateindiv;
  longint loginnode,selcountrynode;

  res = false;
  if (nonblank(WSr.WebPage)) then begin
    WPr.Code = WSr.WebPage;
    res = ReadFirstMain(WPr,1,true);
  end;
  
  if (res==false) then begin
    RecordNew(WPr);
  end;

  if (res) then begin
    GetLoginAndSelectCountryNodes(loginnode,selcountrynode);
    if (WSr.SerNr==loginnode) then begin
      if (blank(ToolWebNGGetCountry)) then begin
        PutSessionString("wantedtologin","true");
        RedirectToSelectCountryPage;
        goto LShowWebPage;
      end;
    end;
    
    if (WSr.SerNr==selcountrynode) then begin
      RollbackOneRequestURL;
    end;
    
    foundf = FindWebPageTranslation(WPr,WTr);

    if (foundf==false) then begin
      ApplyTemplate(WPr,0);
    end;

    StartPage(WPr);

    if (foundf) then begin
      WebOutPageWithTemplate(WTr,WTr.HtmlTranslation==1,"",WPr,kWebPositionContent);
    end else begin
      encapsulateindiv = ShowEncapsulationDivOpen(WPr);
    
      ShowPageElements(WPr,0); //before
      ShowPageElements(WPr,1); //content
      ShowPageElements(WPr,2); //after

      ShowEncapsulationDivClose(WPr,encapsulateindiv);
    end;

    EndPage(WPr);
  end else begin
    ShowErrorPage(ToolWebNGTranslateText(25004) & " " & WSr.WebPage); //Cannot find page:
  end;
LShowWebPage:;  
  return;
end;
 
global
procedure ShowErrorPage(string error)
begin
  record WebNGPageVc WPr;
  string 255 startstruct,sitetitle,headerelement,footerelement,stylesheet,analyticsid,errorpage;
  longint loginnode,selectcountry;
  integer prependtitle;
  boolean allowlogin;
  boolean encapsulateindiv,res;

  GetWebSiteSettings(startstruct,sitetitle,headerelement,footerelement,stylesheet,analyticsid,prependtitle,allowlogin,errorpage,loginnode,selectcountry);
  WPr.Code = errorpage;
  res = ReadFirstMain(WPr,1,true);
  
  if (res==false) then begin RecordNew(WPr); end;

  ShowWebAppPageStart(WPr,"");
  
  WebOutStringFormatNL(error);
  
  ShowWebAppPageEnd(WPr);
  return;
end;
