external function string 255 GetGlobalUserMainCompanies(string);
external function Boolean GetGlobalUserMainCompany(string,var string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function Boolean InterNetAddrTest(string);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure GetCurUser(var record UserVc);

global
updating procedure DeleteActFromSubSys_VIVc(record VIVc VIp)
BEGIN
  record ActVc Actr;
  record RLinkVc RLinkr;
  record ASTBlock ASTRec;
  Integer notenr;
  Boolean testf;

  BlockLoad(ASTRec);
  notenr = 1;
  while (ReadRecordLink(VIp,notenr,Actr,RLinkr)) begin
    testf = true;
    if (Actr.TodoFlag!=1) then begin testf = false; end;
    if (Actr.ActType!=ASTRec.PInv) then begin testf = false; end;
    if (Actr.MainPersons!=VIp.OKPersons) then begin testf = false; end;
    if (testf) then begin
      RecordDelete(Actr);
      RecordDelete(RLinkr);
    end;
    notenr = notenr + 1;
  end;
  RETURN;
END;

global
updating procedure MakeActFromSubSys_VIVc(var record VIVc VIp,Boolean force,var record ActVc resActp)
BEGIN
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;
  record ActVc Actr;
  record CUVc VEr;
  Boolean savef;
  Integer curcomp;

  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTRec);
  RecordNew(Actr);
  if (force==false) then begin
    if (ASTRec.GenPInv==0) then begin goto LMakeActFromSubSys_VIVc; end;
    if (blank(ASTRec.PInv)) then begin goto LMakeActFromSubSys_VIVc; end;
  end;
  Actr.CUCode = VIp.VECode;
  VEr.Code = VIp.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
    Actr.Phone = VEr.Phone;
    Actr.Contact = VEr.Person;
    Actr.CUName = VEr.Name;
    Actr.Phone = VEr.Phone;
  end;
  Actr.TransDate = VIp.DueDate;
  Actr.EndDate = VIp.DueDate;
  Actr.OKFlag = ASTRec.PInvDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.TodoFlag = 1;  
  Actr.StartTime = CurrentTime;
  Actr.ActType = ASTRec.PInv;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = "";
  Actr.MainPersons = CurrentUser;
  if (SetInSet(CurrentUser,VIp.OKPersons)==false) then begin
    Actr.CCPersons = VIp.OKPersons;
  end;
  Actr.Comment = VIp.Comment;
  savef = true;
LMakeActFromSubSys_VIVc:;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,VIp,curcomp);  
      CreateRecordLink(VIp,curcomp,Actr,curcomp); 
      RecordCopy(resActp,Actr); 
    end;
  end;  
  RETURN;
END;

global
updating procedure MakeActFromSubSys_IVVc(var record IVVc IVp,Boolean force)
BEGIN
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;
  record ActVc Actr;
  record CUVc CUr;
  Boolean savef;
  Integer curcomp;

  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTRec);
  RecordNew(Actr);
  if (force==false) then begin
    if (ASTRec.GenSInv==0) then begin goto LMakeActFromSubSys_IVVc; end;
    if (blank(ASTRec.GenSalesInv)) then begin goto LMakeActFromSubSys_IVVc; end;
  end;
  Actr.CUCode = IVp.CustCode;
  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.Contact = CUr.Person;
    Actr.CUName = CUr.Name;
    Actr.Phone = CUr.Phone;
  end;
  Actr.TransDate = IVp.PayDate;
  Actr.EndDate = IVp.PayDate;
  Actr.OKFlag = ASTRec.SInvDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.TodoFlag = 1;  
  Actr.StartTime = CurrentTime;
  Actr.ActType = ASTRec.GenSalesInv;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = "";
  Actr.MainPersons = IVp.SalesMan;
  if (IVp.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  if (nonblank(IVp.Phone)) then begin
    Actr.Phone = IVp.Phone;
  end;
  savef = true;
LMakeActFromSubSys_IVVc:;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,IVp,curcomp);  
      CreateRecordLink(IVp,curcomp,Actr,curcomp);  
    end;
  end;  
  RETURN;
END;

global
updating function Boolean MakeActFromIV(var record IVVc IVp,var record ActVc Actr)
begin
  Boolean res;
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;
  record CUVc CUr;
  Boolean savef;
  Integer curcomp;

  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTRec);
  Actr.CUCode = IVp.CustCode;
  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.Contact = CUr.Person;
    Actr.CUName = CUr.Name;
    Actr.Phone = CUr.Phone;
  end;
  Actr.TransDate = IVp.PayDate;
  Actr.EndDate = IVp.PayDate;
  Actr.OKFlag = ASTRec.SInvDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.TodoFlag = 1;  
  Actr.StartTime = CurrentTime;
  Actr.ActType = ASTRec.GenSalesInv;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = "";
  Actr.MainPersons = IVp.SalesMan;
  if (IVp.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  if (nonblank(IVp.Phone)) then begin
    Actr.Phone = IVp.Phone;
  end;
  savef = true;
LMakeActFromSubSys_IVVc:;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,IVp,curcomp);  
      CreateRecordLink(IVp,curcomp,Actr,curcomp);  
      res = true;
    end;
  end;  
  MakeActFromIV = res;
  return;
end;

global
updating procedure MakeActFromSubSys_LetVc(var record LetVc Letp,Boolean force)
BEGIN
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;
  record ActVc Actr;
  record CUVc CUr;
  record CUVc ContactCUr;
  Boolean savef;
  Integer curcomp;

  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTRec);
  RecordNew(Actr);
  if (force==false) then begin
    if (ASTRec.GenLetters==0) then begin goto LMakeActFromSubSys_LetVc; end;
    if (blank(ASTRec.Letters)) then begin goto LMakeActFromSubSys_LetVc; end;
  end;
  Actr.CUCode = Letp.CustCode;
  CUr.Code = Letp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.Contact = Letp.Contact;
    Actr.ActType = ASTRec.Letters;
    if (PasteActTypeInAct("",Actr)) then begin
    end;
    Actr.Comment = Letp.Header;
    Actr.CUName = Letp.Name;
    Actr.MainPersons = Letp.ShortSign;
    if ((Letp.Contact==CUr.Person) or (blank(Letp.Contact))) then begin
      Actr.Phone = CUr.Phone;
    end else begin
      if (FindCustomerRelation(Letp.CustCode,Letp.Contact,ContactCUr)) then begin
        Actr.Phone = ContactCUr.Phone;
      end;
    end;
  end;
  Actr.TransDate = Letp.TransDate;
  Actr.StartTime = Letp.TransTime;
  Actr.OKFlag = ASTRec.LettersDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.TodoFlag = 1;  
  Actr.ActType = ASTRec.Letters;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  savef = true;
LMakeActFromSubSys_LetVc:;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,Letp,curcomp);  
      CreateRecordLink(Letp,curcomp,Actr,curcomp);  
    end;
  end;  
  RETURN;
END;

global
updating procedure CreateActFromCOVc(var record COVc COp,var record ActVc Actr,Boolean force,Boolean readf)
BEGIN
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;  
  record CUVc CUr;
  Boolean savef;
  Integer curcomp;

  if (readf) then begin
    if (ReadFirstMain(COp,0,true)) then begin end;  
  end;
  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTRec);
  if (force==false) then begin
    if (ASTRec.GenContract==0) then begin goto LMakeActFromSubSys_COVc; end;
    if (blank(ASTRec.Contract)) then begin goto LMakeActFromSubSys_COVc; end;
  end;
  Actr.CUCode = COp.CustCode;
  CUr.Code = COp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.Phone = CUr.Phone;
  end;
  Actr.TransDate = CurrentDate;
  Actr.OKFlag = ASTRec.ContractDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.Contact = COp.ClientContact;
  Actr.ActType = ASTRec.Contract;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = COp.InvComment;
  Actr.CUName = COp.Addr0;
  Actr.MainPersons = USr.Code;
  Actr.TodoFlag = 1;
  savef = true;
LMakeActFromSubSys_COVc:;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,COp,curcomp);  
      CreateRecordLink(COp,curcomp,Actr,curcomp);  
    end;
  end;  
  RETURN;
END;

global
updating procedure CreateActFromCOCUServiceVc(var record COCUServiceVc COCUServicep,var record ActVc Actr,Boolean force,Boolean readf)
BEGIN
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;  
  record CUVc CUr;
  Boolean savef;
  Integer curcomp;

  if (readf) then begin
    if (ReadFirstMain(COCUServicep,0,true)) then begin end;  
  end;
  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTRec);
  if (force==false) then begin
    if (ASTRec.GenContract==0) then begin goto LMakeActFromSubSys_COCUServiceVc; end;
    if (blank(ASTRec.Contract)) then begin goto LMakeActFromSubSys_COCUServiceVc; end;
  end;
  Actr.CUCode = COCUServicep.CustCode;
  CUr.Code = COCUServicep.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.Phone = CUr.Phone;
  end;
  Actr.TransDate = CurrentDate;
  Actr.OKFlag = ASTRec.ContractDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.Contact = COCUServicep.ClientContact;
  Actr.ActType = ASTRec.Contract;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = COCUServicep.InvComment;
  Actr.CUName = COCUServicep.Addr0;
  Actr.MainPersons = USr.Code;
  Actr.TodoFlag = 1;
  savef = true;
LMakeActFromSubSys_COCUServiceVc:;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,COCUServicep,curcomp);  
      CreateRecordLink(COCUServicep,curcomp,Actr,curcomp);  
    end;
  end;  
  RETURN;
END;

global
updating procedure MakeActFromSubSys_COVc(var record COVc COp,Boolean force,Boolean readf)
BEGIN
  record ActVc Actr;
  
  RecordNew(Actr);
  CreateActFromCOVc(COp,Actr,force,readf);
  RETURN;
END;

global
updating function Boolean RecordAction_rlCOLAct(var record COVc COr,var record ActVc Actr,Boolean forcef,Boolean readf)
BEGIN
  Boolean res;
  record COVc oldCOr;

  if (IsRecordLocked(COr)==false) then begin
    RecordNew(Actr);
    CreateActFromCOVc(COr,Actr,forcef,readf);
    res = true;
  end;
  RecordAction_rlCOLAct = res;
  RETURN;
END;

global
updating function LongInt MakeActFromSubSys_MailVc2(var record MailVc Mailp,var record ActVc Actr,Boolean forcef,var Integer actcomp)
begin
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTRec;
  record UserVc USr;
  record CUVc CUr;
  record CUVc MainCUr;
  Boolean savef;
  Integer oldcomp;
  LongInt res;
  row MailVc marw;
  Integer rwcnt,i;
  record ContactRelVc ContactRelr;
  string 255 maincrmcompcode;
  string 255 maincrmcompanies;

  oldcomp = CurrentCompany;
  BlockLoad(ASTRec);
  if (forcef==false) then begin
//    RecordNew(Actr); done on client, cause of client time
    if (ASTRec.GenMails==0) then begin goto LMakeActFromSubSys_MailVc2; end;
    if (blank(ASTRec.Mails)) then begin goto LMakeActFromSubSys_MailVc2; end;
  end;  
  GetCurUser(USr);
  maincrmcompanies = GetGlobalUserMainCompanies(USr.Code);
  if (SetInSet(CurrentCompany,maincrmcompanies)==false) then begin
    if (GetGlobalUserMainCompany(USr.Code,maincrmcompcode)) then begin
      if (nonblank(maincrmcompcode)) then begin
        if (SetCompanyCode(maincrmcompcode,false)) then begin
        end;
      end;
    end;
  end;  
  
  actcomp = CurrentCompany;
  rwcnt = MatRowCnt(Mailp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Mailp,i,marw);
    if (InterNetAddrTest(ExtractEMailAddress(marw.AddrCode))) then begin
      CUr.eMail = ExtractEMailAddress(marw.AddrCode);
      if (ReadFirstKey("eMail",CUr,1,true)) then begin
        ContactRelr.ContactCode = CUr.Code;
        ContactRelr.ContactName = CUr.Name;
        if (ReadFirstKey("ContactName",ContactRelr,2,true)) then begin
          MainCUr.Code = ContactRelr.CustCode;
          if (ReadFirstMain(MainCUr,1,true)) then begin
          end;
          Actr.CUCode = MainCUr.Code;
          Actr.Phone = CUr.Phone;
          Actr.Contact = CUr.Name;
          Actr.CUName = MainCUr.Name;
        end else begin
          Actr.CUCode = CUr.Code;
          Actr.Phone = CUr.Phone;
          Actr.Contact = CUr.Person;
          Actr.CUName = CUr.Name;
        end;
      end;
      i = rwcnt;
    end;
  end;

  if (blankdate(Actr.TransDate)) then begin
    Actr.TransDate = CurrentDate;
  end;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.ActType = ASTRec.Mails;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = Mailp.Header;
  Actr.MainPersons = USr.Code;
  Actr.TodoFlag = 1;
  if (forcef==false) then begin
    Actr.OKFlag = ASTRec.MailDone;  
  end;
  savef = true;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,actcomp,Mailp,actcomp);  
      CreateRecordLink(Mailp,actcomp,Actr,actcomp);  
      res = Actr.SerNr;
    end;
  end; 
  ResetCompany(oldcomp);
LMakeActFromSubSys_MailVc2:;  
  MakeActFromSubSys_MailVc2 = res;
  return;
end;

global
updating function LongInt MakeActFromSubSys_MailVc(var record MailVc Mailp,var record ActVc Actr,Boolean forcef)
begin
  Integer actcomp;
  
  MakeActFromSubSys_MailVc = MakeActFromSubSys_MailVc2(Mailp,Actr,forcef,actcomp);
  return;
end;

updating procedure MailCreateActivityforCustomer(record MailVc Mailr,var record ActVc resActr,record CUVc CUr,record CUVc ContactCUr,Boolean forcef)
begin
  record ActVc Actr;
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTb;
  Integer oldcomp;
  record UserVc USr;
  string 255 compcode,maincrmcompanies;
  
  oldcomp = CurrentCompany;
  BlockLoad(ASTb);
//  RecordNew(Actr); done on client, cuase of client time
  if (forcef==false) then begin
    if (ASTb.GenMails==0) then begin goto LMailCreateActivityforCustomer; end;
    if (blank(ASTb.Mails)) then begin goto LMailCreateActivityforCustomer; end;
  end;  
  GetCurUser(USr);
  maincrmcompanies = GetGlobalUserMainCompanies(USr.Code);
  if (SetInSet(oldcomp,maincrmcompanies)==false) then begin
    if (GetGlobalUserMainCompany(USr.Code,compcode)) then begin
      if (nonblank(compcode)) then begin
        if (SetCompanyCode(compcode,false)) then begin
        end;
      end;
    end;
  end;
  if (blankdate(Actr.TransDate)) then begin
    Actr.TransDate = CurrentDate;
  end;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.ActType = ASTb.Mails;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.Comment = Mailr.Header;
  Actr.MainPersons = USr.Code;
  Actr.CUCode = CUr.Code;
  Actr.Phone = ContactCUr.Phone;
  Actr.Contact = ContactCUr.Name;
  Actr.CUName = CUr.Name;

  Actr.TodoFlag = 1;
  ATr.Code = Actr.ActType;
  if (ReadFirstMain(ATr,1,true)) then begin
    Actr.ItemCode = ATr.ItemCode;
    ATGRr.Code = ATr.ActTypeGr;
    if (ReadFirstMain(ATGRr,1,true)) then begin
      Actr.CalTimeFlag = ATGRr.DefTimeFlag;
    end;
  end;  
  if (forcef==false) then begin
    Actr.OKFlag = ASTb.MailDone;  
  end;
  if (RecordStore(Actr,false)) then begin
    CreateRecordLink(Actr,CurrentCompany,Mailr,CurrentCompany);  
    CreateRecordLink(Mailr,CurrentCompany,Actr,CurrentCompany);  
  end;
  ResetCompany(oldcomp);
  RecordCopy(resActr,Actr);
LMailCreateActivityforCustomer:;  
  return;
end;

global
updating procedure CreateActivityforCustomer_Mail2(record MailVc Mailr,var record ActVc Actr,Boolean forcef,var Integer actcomp)
begin
  Integer i,rwcnt;
  row MailVc marw;
  record CUVc CUr;
  record ContactRelVc ContactRelr;
  record CUVc ContactCUr;
  Boolean found,testf,donef;
  vector Boolean vcumaildonef;
  record ActVc blankActr;

  rwcnt = MatRowCnt(Mailr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Mailr,i,marw);
    if (marw.RowTyp==kMailRowTypeFrom) or (marw.RowTyp==kMailRowTypeTo) then begin
      if (InterNetAddrTest(ExtractEMailAddress(marw.AddrCode))) then begin
        CUr.eMail = ExtractEMailAddress(marw.AddrCode);
        if (ReadFirstKey("eMail",CUr,1,true)) then begin
          RecordCopy(ContactCUr,CUr);
          if (CUr.CUType!=0) then begin
            if (vcumaildonef[CUr.Code]==false) then begin
              ContactCUr.Name = CUr.Person;
              RecordCopy(Actr,blankActr);
              MailCreateActivityforCustomer(Mailr,Actr,CUr,ContactCUr,forcef);
              actcomp = CurrentCompany;
              donef = true;
              vcumaildonef[CUr.Code] = true;
            end;
          end else begin          
            ContactRelr.ContactCode = ContactCUr.Code;
            found = true;
            while (LoopKey("ContactCode",ContactRelr,1,found)) begin
              if (found) then begin
                if (ContactRelr.ContactCode!=ContactCUr.Code) then begin
                  found = false;
                end;
              end;
              if (found) then begin
                testf = true;
                if (ContactRelr.Invalid!=0) then begin testf = false; end;
                if (testf) then begin
                  CUr.Code = ContactRelr.CustCode;
                  if (ReadFirstMain(CUr,1,true)==false) then begin
                    testf = false;
                  end;
                  if (CUr.blockedFlag!=0) then begin testf = false; end;
                  if (vcumaildonef[CUr.Code]) then begin testf = false; end;
                  if (testf) then begin
                    RecordCopy(Actr,blankActr);
                    MailCreateActivityforCustomer(Mailr,Actr,CUr,ContactCUr,forcef);
                    actcomp = CurrentCompany;
                    donef = true;
                    vcumaildonef[CUr.Code] = true;
                  end;
                  found = false;
                end;
              end;
            end;
          end;
        end;
      end else begin
      end;
    end;
  end;
  if (donef==false) then begin
    MakeActFromSubSys_MailVc2(Mailr,Actr,forcef,actcomp);
  end;
  return;
end;

global
updating procedure CreateActivityforCustomer_Mail(record MailVc Mailr,var record ActVc Actr,Boolean forcef)
begin
  Integer actcomp;
  
  CreateActivityforCustomer_Mail2(Mailr,Actr,forcef,actcomp);
  return;
end;

global
updating procedure RecordAction_MailDAct2(var record MailVc Mailr,var record ActVc Actr,var Integer actcomp)
begin
  LongInt res;

  if (IsRecordLocked(Mailr)==false) then begin
    if (ReadFirstMain(Mailr,0,true)) then begin end;  
//    res = MakeActFromSubSys_MailVc(Mailr,Actr,true);
      CreateActivityforCustomer_Mail2(Mailr,Actr,true,actcomp);
  end;
  return;
end;

global
updating procedure RecordAction_MailDAct(var record MailVc Mailr,var record ActVc Actr)
begin
  return;
end;

global
updating procedure MakeActFromSubSys_ORVc(var record ORVc ORp,Boolean forcef,Boolean readf)
BEGIN
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTb;
  record ActVc Actr;
  record CUVc CUr;
  Boolean savef;
  Integer curcomp;
  record OrderClassVc OrderClassr;

  if (readf) then begin
    if (ReadFirstMain(ORp,0,true)) then begin end;  
  end;
  curcomp = CurrentCompany;
  BlockLoad(ASTb);
  RecordNew(Actr);
  if (forcef==false) then begin
    if (ASTb.GenOrder==0) then begin goto LMakeActFromSubSys_ORVc; end;
    if (blank(ASTb.GenSalesOrd)) then begin goto LMakeActFromSubSys_ORVc; end;
  end;  
  Actr.CUCode = ORp.CustCode;
  Actr.Phone = CUr.Phone;
  CUr.Code = ORp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  Actr.TransDate = ORp.OrdDate;
  Actr.OKFlag = ASTb.OrderDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.Contact = ORp.CustContact;
  Actr.ActType = ASTb.Order;
  Actr.Comment = ORp.Comment;
  Actr.CUName = ORp.Addr0;
  Actr.MainPersons = ORp.SalesMan;
  if (ORp.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  Actr.ActType = ASTb.GenSalesOrd;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.TodoFlag = 1;    
  OrderClassr.Code = ORp.OrderClass;
  if (ReadFirstMain(OrderClassr,1,true)) then begin
    if (nonblank(OrderClassr.OrderActCode)) then begin
      Actr.ActType = OrderClassr.OrderActCode;
      if (PasteActTypeInAct("",Actr)) then begin
      end;
    end;
  end;
  savef = true;  
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    Actr.OKFlag = ASTb.OrderDone;
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,ORp,curcomp);  
      CreateRecordLink(ORp,curcomp,Actr,curcomp);  
    end;
  end;  
LMakeActFromSubSys_ORVc:;  
  RETURN;
END;

global
updating procedure MakeActFromSubSys_KitchenOrderVc(var record KitchenOrderVc KOp,Boolean force)
begin
  record ActTypeVc ATr;
  record ASTBlock ASTb;
  record UserVc USr;
  record ActVc Actr;
  record CUVc CUr;
  record CUVc ContactCUr;
  Boolean savef;
  record RestSetupVc RSr;
  Integer curcomp;

  curcomp = CurrentCompany;
  GetCurUser(USr);
  BlockLoad(ASTb);
  RecordNew(Actr);
  if (force==false) then begin
    if (ASTb.GenKitchenOrder==0) then begin goto LMakeActFromSubSys_KitchenOrderVc; end;
    if (blank(ASTb.KitchenOrder)) then begin goto LMakeActFromSubSys_KitchenOrderVc; end;
  end;
  RSr.BranchID = KOp.BranchID;
  ReadFirstMain(RSr,1,true);
  Actr.ActType = ASTb.KitchenOrder;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.CUCode = KOp.CUCode;
  Actr.CUName = KOp.CUName;
  Actr.Comment = KOp.Comment;
  if (blank(Actr.Comment)) then begin
    Actr.Comment = USetStr(27320) & ": " & KOp.RestAccSerNr & " " & USetStr(27325) & ": " & KOp.SerNrPerBranch;
  end;
  Actr.MainPersons = RSr.KitchenCoordinator;
  Actr.CCPersons = RSr.KitchenSupervisor;
  Actr.Supervisor = RSr.KitchenSupervisor;

  Actr.TransDate = KOp.TransDate;
  Actr.StartTime = KOp.TransTime;
  Actr.OKFlag = 0; //ASTb.KitchenOrderDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.TodoFlag = 2;  
  Actr.FromFileName = "KitchenOrderVc";  
  Actr.FromSerNr = KOp.SerNr;  
  savef = nonblank(RSr.KitchenCoordinator);
LMakeActFromSubSys_KitchenOrderVc:;
  if (savef) then begin 
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,KOp,curcomp);  
      CreateRecordLink(KOp,curcomp,Actr,curcomp);  
    end;
  end;  
  return;
end;
