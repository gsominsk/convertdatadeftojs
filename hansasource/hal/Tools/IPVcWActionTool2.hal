external function Boolean VATIVDchrsum(var record VATIVVc,Integer);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure VATIVSumup(record VATIVVc);
external procedure CalcPrice(val,val,val,var val,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val AllFEIVPrepaymentAmount(LongInt,LongInt);
external procedure FEIVSumup(record FEIVVc);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);

function val RowQuantFractSum(LongInt ordernr,LongInt feivnr,Integer rownr)
BEGIN
  val res;
  record FEIVVc FEIVr;
  row FEIVVc FEIVrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  
  TrHs = true;
  FEIVr.OrderNr = ordernr;
  while (LoopKey("OrderNr",FEIVr,1,TrHs)) begin
    if (FEIVr.OrderNr!=ordernr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (FEIVr.SerNr==feivnr) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(FEIVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(FEIVr,i,FEIVrw);
          if (FEIVrw.OrdRow==rownr) then begin
            res = res + FEIVrw.QuantFract;
          end;
        end;
      end;
    end;
  end;  
LRowQuantFractSum:;  
  RowQuantFractSum = res;
  RETURN;
END;

function val DeliveredBeforeDate(Date ipdate,LongInt ornr,Integer orrow)
BEGIN
  val res;
  record SHVc SHr;
  row SHVc SHrw;
  Integer i,rwcnt;
  Boolean TrHs;
  
  SHr.OrderNr = ornr;
  TrHs = true;
  while (LoopKey("OrderKey",SHr,1,TrHs)) begin
    if (SHr.OrderNr!=ornr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (SHr.ShipDate<ipdate) then begin
        rwcnt = MatRowCnt(SHr);
        if (orrow<rwcnt) then begin      
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(SHr,i,SHrw);
            if (SHrw.OrdRow==orrow) then begin
              res = res + SHrw.Ship;
            end;
          end;
        end;
      end;
    end;
  end;
  DeliveredBeforeDate = res;
  RETURN;
END;

function LongInt PasteORInFEIV(var record FEIVVc FEIVp,record ORVc ORp,row IPVc IPrw,Date td,LongInt IPNr)
BEGIN
  LongInt res;
  row ORVc ORrw;
  row FEIVVc FEIVrw;
  record CUVc CUr;
  record INVc INr;
  Integer i,rwcnt,srw,oldsrw;
  Boolean testf,infound;
  record GeneralOptionBlock GenOptRec;
  val s,rowsum,t,totsum,rowquantfact,notdelivered,ipnovat,orrwsum;
  record TaxMatrixVc TMr;

  res = 1;
  BlockLoad(GenOptRec);
  FEIVp.TransDate = td;
  FEIVp.IVTransDate = td;
  FEIVp.OrderNr = ORp.SerNr;
  FEIVp.PrepaymentNr = IPrw.CUPNr;
  if (nonblank(ORp.InvoiceToCode)) then begin
    CUr.Code = ORp.InvoiceToCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.OnHoldFlag!=0) then begin goto LPasteORInFEIV; end;
      FEIVp.CustCode = CUr.Code;
      FEIVp.Addr0 = CUr.Name;
      FEIVp.Addr1 = CUr.InvAddr0;
      FEIVp.Addr2 = CUr.InvAddr1;
      FEIVp.Addr3 = CUr.InvAddr2;
      FEIVp.InvAddr3 = CUr.InvAddr3;
      FEIVp.InvAddr4 = CUr.InvAddr4;
      FEIVp.OrgCust = ORp.CustCode;
      FEIVp.PayDeal = CUr.PayDeal;
      FEIVp.VATNr = CUr.VATNr;      
      FEIVp.ExportFlag = CUr.ExportFlag;
    end else begin
      goto L20PasteORInFEIV; // if customer is not found then use the original customer
    end;
  end else begin
L20PasteORInFEIV:;
    FEIVp.CustCode = ORp.CustCode;
    FEIVp.Addr0 = ORp.Addr0;
    FEIVp.Addr1 = ORp.Addr1;
    FEIVp.Addr2 = ORp.Addr2;
    FEIVp.Addr3 = ORp.Addr3;
    FEIVp.InvAddr3 = ORp.InvAddr3;
    FEIVp.InvAddr4 = ORp.InvAddr4;
    FEIVp.PayDeal = ORp.PayDeal;
    FEIVp.VATNr = ORp.VATNr;    
    FEIVp.OrgCust = "";
    FEIVp.ExportFlag = ORp.ExportFlag;
  end;
  FEIVp.ClientContact = ORp.CustContact;
  FEIVp.OurContact = ORp.OurContact;
  FEIVp.Objects = ORp.Objects;
  FEIVp.SalesMan = ORp.SalesMan;
  FEIVp.CurncyCode = ORp.CurncyCode;
  FEIVp.LangCode = ORp.LangCode;
  FEIVp.InvComment = ORp.Comment;
  FEIVp.Sorting = ORp.Sorting;
  FEIVp.InclVAT = ORp.InclVAT;
  FEIVp.NoTAXonVAT = ORp.NoTAXonVAT;
  FEIVp.TotalwoTAX = ORp.TotalwoTAX;
  FEIVp.FrRate = ORp.FrRate;
  FEIVp.ToRateB1 = ORp.ToRateB1;
  FEIVp.ToRateB2 = ORp.ToRateB2;
  FEIVp.BaseRate1 = ORp.BaseRate1;
  FEIVp.BaseRate2 = ORp.BaseRate2;
  FEIVp.VATNr = ORp.VATNr;  
  FEIVp.Phone = ORp.Phone;
  FEIVp.Fax = ORp.Fax;
  CUr.Code = ORp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  if (CUr.blockedFlag!=0) then begin goto LPasteORInFEIV; end;
  if (blank(FEIVp.VATNr)) then begin FEIVp.VATNr = CUr.VATNr; end;
  if (blank(ORp.InvoiceToCode)) then begin
  end;
  rwcnt = MatRowCnt(ORp);
  oldsrw = MatRowCnt(FEIVp);
  srw = oldsrw;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.stp==10) then begin
      ClearRow(FEIVp,FEIVrw,10);
      MatRowPut(FEIVp,srw,FEIVrw);
      srw = srw + 1;      
      goto LSKIPROW;
    end;    
    if (ORrw.stp==9) then begin
      ClearRow(FEIVp,FEIVrw,9);
      FEIVrw.Sum = ORrw.Sum;
      MatRowPut(FEIVp,srw,FEIVrw);
      srw = srw + 1;      
      goto LSKIPROW;
    end;
    testf = true;   
    notdelivered = ORrw.Quant;// - ORrw.Shipd2;
    if (testf) then begin
      notdelivered = notdelivered - DeliveredBeforeDate(td,ORp.SerNr,i);
      ClearRow(FEIVp,FEIVrw,1);
      FEIVrw.stp = 1;
      FEIVrw.OrdRow = i;
      FEIVrw.ArtCode = ORrw.ArtCode;
      FEIVrw.Quant = ORrw.Quant;
      FEIVrw.Spec = ORrw.Spec;
      FEIVrw.Price = ORrw.Price;
      FEIVrw.vRebate = ORrw.vRebate;
      FEIVrw.SalesAcc = ORrw.SalesAcc;
      FEIVrw.VATCode = ORrw.VATCode;
      FEIVrw.Objects = ORrw.Objects;
      FEIVrw.PriceFactor = ORrw.PriceFactor;
      FEIVrw.UnitCode = ORrw.UnitCode;
      FEIVrw.UnitFactQuant = ORrw.UnitFactQuant;
      FEIVrw.UnitFactPrice = ORrw.UnitFactPrice;
      FEIVrw.UnitXval = ORrw.UnitXval;
      FEIVrw.UnitYval = ORrw.UnitYval;
      FEIVrw.UnitZval = ORrw.UnitZval;
      ipnovat = IPrw.RecVal-IPrw.VATVal;
      orrwsum = ORrw.Sum*(notdelivered/ORrw.Quant);
      rowquantfact = RowQuantFractSum(FEIVp.OrderNr,FEIVp.SerNr,i);    
      ipnovat = ipnovat *(ORrw.Sum/ORp.Sum1);//* (notdelivered/ORrw.Quant)
      FEIVrw.QuantFract = ((ipnovat)*notdelivered)/orrwsum;//ipnovat-totsum
//StopAlert("nv " & ipnovat & " tot " & totsum & " nd " & notdelivered & " orrwsum " & orrwsum & " qf " & FEIVrw.QuantFract);
//StopAlert("nv " & ipnovat & " nd " & notdelivered & " ors " & orrwsum & " qf " & FEIVrw.QuantFract);
//      FEIVrw.QuantFract = (((IPrw.RecVal-IPrw.VATVal)-totsum)*ORrw.Quant)/ORrw.Sum;
      if ((rowquantfact+FEIVrw.QuantFract)>FEIVrw.Quant) then begin
        FEIVrw.QuantFract = FEIVrw.Quant - rowquantfact;
      end;
//StopAlert("rowquantfact " & rowquantfact & " qf " & FEIVrw.QuantFract & " q " & FEIVrw.Quant);
      if (FEIVrw.QuantFract>FEIVrw.Quant) then begin
        FEIVrw.QuantFract = FEIVrw.Quant;
      end;
      t = FEIVrw.Price; 
      CalcPrice(FEIVrw.BasePrice,FEIVrw.PriceFactor,FEIVrw.vRebate,t,GenOptRec.UseDiscount);
      FEIVrw.Price = t;  
      CalcSum(FEIVrw.QuantFract,FEIVrw.Price,FEIVrw.PriceFactor,FEIVrw.vRebate,t,GenOptRec.UseDiscount);
      FEIVrw.Sum = Round(t,DefaultRoundMode);
      if ((FEIVrw.Sum==0) and (blank(FEIVrw.QuantFract)) and (blank(FEIVrw.Price))) then begin
        FEIVrw.Sum = blankval;
      end;
      INr.Code = FEIVrw.ArtCode;
      infound = ReadFirstMain(INr,1,true);
      FEIVrw.BasePrice = ORrw.BasePrice;
      if (nonblank(FEIVrw.ArtCode)) then begin
        t = FEIVrw.QuantFract*FEIVrw.BasePrice;   // cost  
        if (FEIVrw.PriceFactor!=0) then begin
          t = t/FEIVrw.PriceFactor;
        end;
        s = MulRateToBase1(FEIVp.CurncyCode,FEIVrw.Sum,FEIVp.FrRate,FEIVp.ToRateB1,FEIVp.ToRateB2,FEIVp.BaseRate1,FEIVp.BaseRate2,DefaultCurRoundOff);// sales
        FindSalesExVat(TMr,FEIVrw.VATCode,s,FEIVp.InclVAT,FEIVp.NoTAXonVAT,rowsum);
//        FEIVrw.rowGP = rowsum - t;        // GP    
      end else begin
//        FEIVrw.rowGP = 0;
        FEIVrw.BasePrice = 0;
      end;
//      FEIVrw.Coefficient = INr.UnitCoefficient;
      totsum = totsum + FEIVrw.Sum;
      if (FEIVrw.QuantFract!=0) then begin
        MatRowPut(FEIVp,srw,FEIVrw);
        res = 0;
        srw = srw + 1;
      end;      
    end;
LSKIPROW:;      
  end;
  FEIVp.IPNr = IPNr;
  FEIVp.Commision = ORp.Commision;
  FEIVSumup(FEIVp);
LPasteORInFEIV:;
  PasteORInFEIV = res;  
  RETURN;
END;

function LongInt PasteIPRowInFEIV(var record FEIVVc FEIVp,row IPVc IPrw,Date td,LongInt IPNr)
BEGIN
  LongInt res;
  record CUVc CUr;
  
  res = 0;
  if (AllFEIVPrepaymentAmount(-1,IPrw.CUPNr)>=IPrw.RecVal) then begin
    res = 2181;
    goto LPasteIPRowInFEIV;
  end;
  FEIVp.TransDate = td;
  FEIVp.IVTransDate = td;
  FEIVp.PrepaymentNr = IPrw.CUPNr;
  CUr.Code = IPrw.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.OnHoldFlag!=0) then begin goto LPasteIPRowInFEIV; end;
    FEIVp.CustCode = CUr.Code;
    FEIVp.Addr0 = CUr.Name;
    FEIVp.Addr1 = CUr.InvAddr0;
    FEIVp.Addr2 = CUr.InvAddr1;
    FEIVp.Addr3 = CUr.InvAddr2;
    FEIVp.InvAddr3 = CUr.InvAddr3;
    FEIVp.InvAddr4 = CUr.InvAddr4;
    FEIVp.OrgCust = IPrw.CustCode;
    FEIVp.PayDeal = CUr.PayDeal;
    FEIVp.VATNr = CUr.VATNr;    
    FEIVp.ExportFlag = CUr.ExportFlag;
    FEIVp.CustVATCode = IPrw.VATCode;    
    FEIVp.IPNr = IPNr;
    if (blank(FEIVp.CustVATCode)) then begin
      FEIVp.CustVATCode = CUr.VATCode;    
    end;
  end;
LPasteIPRowInFEIV:; 
  PasteIPRowInFEIV = res; 
  RETURN;
END;

function Boolean FEIVCanbeCreated(record ORVc ORr)
BEGIN
  Boolean res;
  row ORVc ORrw;
  Integer i,rwcnt;

  res = true;
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.Shipd2>ORrw.Invd) then begin
      res = false;
      goto LFEIVCanbeCreated;
    end;
  end;
LFEIVCanbeCreated:;
  FEIVCanbeCreated = res;
  RETURN;
END;

global
function LongInt PasteIPInFEIV(var record FEIVVc FEIVp,record IPVc IPr,Integer rownr)
BEGIN
  LongInt res,noerr;
  row IPVc IPrw;
  record ORVc ORr;
  record FEIVVc lFEIVr;
  Boolean testf;
  
  noErr = 0;
  res = noerr;
  MatRowGet(IPr,rownr,IPrw);
  RecordNew(FEIVp);
  if (IPrw.OrderNr>0) then begin
    lFEIVr.PrepaymentNr = IPrw.CUPNr;
    lFEIVr.IPNr = IPr.SerNr;
    if (ReadFirstKey("PrepaymentNr",lFEIVr,2,true)==false) then begin
      ORr.SerNr = IPrw.OrderNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        testf = true;
        if (ORr.InvFlag==0) then begin
          if (FEIVCanbeCreated(ORr)==false) then begin
            testf = false;
            res = 2182;
          end;
        end;
        if (testf) then begin
          res = PasteORInFEIV(FEIVp,ORr,IPrw,IPr.TransDate,IPr.SerNr);
        end;
      end else begin
        res = 1252;
      end;
    end else begin
      res = 2183;
    end;
  end else begin
    res = PasteIPRowInFEIV(FEIVp,IPrw,IPr.TransDate,IPr.SerNr);
  end;
  PasteIPInFEIV = res;
  RETURN
END;

global
Procedure LookUpChqAcnt(Integer Nro,var string AcNr)
begin
  Record CheckTargetAccBlock chqacnts;
  Integer rows,j,comp;
  Row CheckTargetAccBlock chqacntsrw;
  
  AcNr = "";
  Blockload(chqacnts);
  rows = MatRowCnt(chqacnts);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(chqacnts,j,chqacntsrw);
    comp = chqacntsrw.TargetTyp;
    if (comp == Nro) then begin
      AcNr = chqacntsrw.AccNr;
    end;
  end;
  return;
end;

procedure CopyHeaderORToVATIV(record ORVc ORr,LongInt CUPNr,record IPVc IPr,LongInt iprow,var record VATIVVc VATIVr)
begin
  Date blankd;
  record CUVc CUr;

  VATIVr.CustCode = ORr.CustCode;
  VATIVr.Addr0 = ORr.Addr0;
  VATIVr.Addr1 = ORr.Addr1;
  VATIVr.Addr2 = ORr.Addr2;
  VATIVr.Addr3 = ORr.Addr3;
  VATIVr.InvAddr3 = ORr.InvAddr3;
  VATIVr.InvAddr4 = ORr.InvAddr4;
  VATIVr.OurContact = ORr.OurContact;
//    VATIVr.ClientContact = ORr.ClientContact;
  VATIVr.ExportFlag = ORr.ExportFlag;
  VATIVr.CreateDate = CurrentDate;
  VATIVr.TransDate = IPr.TransDate;
  VATIVr.IVPayDate = blankd;
  VATIVr.IVInvDate = ORr.OrdDate;
  VATIVr.IVTransDate = ORr.OrdDate;
  VATIVr.Prntdf = 0;
  VATIVr.OKFlag = 0;
  VATIVr.FiscalFlag = 0;  
  VATIVr.InvType = 0;
  VATIVr.OrderNr = ORr.SerNr;
  VATIVr.CUPNr = CUPNr;
  VATIVr.IVNr = -1;
  VATIVr.IPNr = IPr.SerNr;
  VATIVr.IPRow = iprow;
  VATIVr.CredInv = -1;
  VATIVr.Objects = ORr.Objects;
  VATIVr.InclVAT = ORr.InclVAT;
  VATIVr.NoTAXonVAT = ORr.NoTAXonVAT;
  VATIVr.TotalwoTAX = ORr.TotalwoTAX;
  VATIVr.InvComment = ORr.Comment;
  VATIVr.SalesMan = ORr.SalesMan;
  VATIVr.SalesGroup = ORr.SalesGroup;
  VATIVr.LangCode = ORr.LangCode;
  VATIVr.Sign = "";
  VATIVr.FrPrice = blankval;
  VATIVr.FrBase = blankval;
  VATIVr.FrItem = "";
  VATIVr.FrVATCode = "";
  VATIVr.FrObjects = "";
  VATIVr.FrGP = blankval;
  VATIVr.FrGPPercent = blankval;
  VATIVr.Sum0 = ORr.Sum0;
  VATIVr.Sum1 = ORr.Sum1;
  VATIVr.Sum2 = ORr.Sum2;
  VATIVr.Sum3 = ORr.Sum3;
  VATIVr.Sum4 = ORr.Sum4;
  VATIVr.BaseSum4 = ORr.BaseSum4;
  VATIVr.DiscPerc = ORr.DiscPerc;
  VATIVr.DiscSum = ORr.DiscSum;
  VATIVr.TAX1Sum = ORr.TAX1Sum;
  VATIVr.Commision = ORr.Commision;
  VATIVr.SumIncCom = ORr.SumIncCom;
  VATIVr.VATNr = ORr.VATNr;
  if (blank(VATIVr.VATNr)) then begin
    CUr.Code = ORr.CustCode;
    ReadFirstMain(CUr,1,true);
    VATIVr.VATNr = CUr.VATNr;
  end;
  VATIVr.FrSalesAcc = "";
  VATIVr.CustVATCode = ORr.CustVATCode;
  VATIVr.CalcFinRef = "";
  VATIVr.Phone = ORr.Phone;
  VATIVr.Fax = ORr.Fax;
  VATIVr.ExportedFlag = 0;
  VATIVr.CurncyCode = ORr.CurncyCode;
  VATIVr.FrRate = ORr.FrRate;
  VATIVr.ToRateB1 = ORr.ToRateB1;
  VATIVr.ToRateB2 = ORr.ToRateB2;
  VATIVr.BaseRate1 = ORr.BaseRate1;
  VATIVr.BaseRate2 = ORr.BaseRate2;
  VATIVr.InvoiceNr = "";
  VATIVr.Sorting = ORr.Sorting;
  VATIVr.ORCONr = ORr.ORCONr;
  return;
end;

function val GetVATORSum(LongInt ordernr,LongInt vativnr,Integer ordrow,Boolean negf,var val frprice)
begin
  val res;
  record VATIVVc VATIVr;
  row VATIVVc VATIVrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  
  frprice = blankval;
  TrHs = true;
  VATIVr.OrderNr = ordernr;
  while (LoopKey("OrderNr",VATIVr,1,TrHs)) begin
    if (VATIVr.OrderNr!=ordernr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (VATIVr.SerNr==vativnr) then begin
        testf = false;
      end;
      if (VATIVr.Invalid!=0) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(VATIVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VATIVr,i,VATIVrw);
          if (VATIVrw.OrdRow==ordrow) then begin
            if (negf) then begin
            end else begin
              if (VATIVrw.Sum>0) then begin
                res = res + VATIVrw.Sum;
              end;
            end;
          end;
        end;
        frprice = frprice + VATIVr.FrPrice;
      end;
    end;
  end;  
LGetVATORSum:;  
  GetVATORSum = res;
  return;
end;

function val GetVATIVSum(LongInt IPNr)
begin
  val res;
  record VATIVVc VATIVr;
  Boolean TrHs,testf;
  
  TrHs = true;
  VATIVr.IPNr = IPNr;
  while (LoopKey("IPNr",VATIVr,1,TrHs)) begin
    if (VATIVr.IPNr!=IPNr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (VATIVr.Invalid!=0) then begin
        testf = false;
      end;
      if (testf) then begin
        res = res + VATIVr.Sum4;
      end;
    end;
  end;  
LGetVATIVSum:;  
  GetVATIVSum = res;
  return;
end;

procedure PasteORRowToVATIV(record ORVc ORr,var record VATIVVc VATIVr,Integer ordrow,record IPVc IPr,row IPVc selectedIPrw,Integer iprownr,vector val orsumpervat,var val sum1)
begin
  row ORVc ORrw;
  row VATIVVc VATIVrw;
  Integer i,rwcnt;
  val qty,t,orqty,sumvatcorr,frprice,coef;
  record GeneralOptionBlock GOb;
  Boolean testf;
  row IPVc IPrw;
  record VATIVTBlock VATIVTb;

  sum1 = blankval;
  BlockLoad(GOb);
  BlockLoad(VATIVTb);
  rwcnt = MatRowCnt(ORr);
  if (ordrow<rwcnt) then begin
    MatRowGet(ORr,ordrow,ORrw);
    if nonblank((selectedIPrw.VATCode)) and (selectedIPrw.VATCode!=ORrw.VATCode) then begin
      goto LPasteORRowToVATIV;
    end;
    rwcnt = MatRowCnt(IPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IPr,i,IPrw);
      testf = true;
      if (IPrw.VATCode!=selectedIPrw.VATCode) then begin
        testf = false;
      end;
      if (selectedIPrw.CUPNr>0) then begin
        if (IPrw.CUPNr!=selectedIPrw.CUPNr) then begin
          testf = false;
        end;
      end;
      if (selectedIPrw.OrderNr>0) then begin
        if (IPrw.OrderNr!=selectedIPrw.OrderNr) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        orqty = ORrw.Quant;
      end;      
    end;
    testf = true;
    coef = selectedIPrw.InvVal/ORr.Sum4;
    switch (ORrw.stp) begin     
      case 1:
        if (selectedIPrw.InvVal>0) then begin
          qty = orqty;
          sumvatcorr = GetVATORSum(ORr.SerNr,VATIVr.SerNr,ordrow,false,frprice);
          sum1 = (ORr.Sum4-ORr.FrPrice)*coef;
          if ((sum1-(sumvatcorr-frprice))<=0) then begin
            testf = false;
          end;
          frprice = ORr.FrPrice*coef;
        end else begin
          sum1 = GetVATIVSum(IPr.SerNr);
          qty = orqty;
          sum1 = - sum1 + selectedIPrw.InvVal;
          if (sum1>=0) then begin
            testf = false;
          end;
        end;
      otherwise    
        testf = false;
    end;
    if (testf) then begin
      ClearRow(VATIVr,VATIVrw,ORrw.stp);
      VATIVrw.stp = ORrw.stp;
      VATIVrw.ArtCode = ORrw.ArtCode;
      VATIVrw.Quant = qty;
      VATIVrw.Spec = ORrw.Spec;
      VATIVrw.SalesAcc = ORrw.SalesAcc;
      VATIVrw.VATCode = ORrw.VATCode;
      switch (ORrw.stp) begin     
        case 1:
          switch (VATIVTb.VATIVCalcWhenPrepayment) begin
            case kVATIVWhenPrepaymentCalcPrice:
              VATIVrw.Price = (ORrw.Price*sum1)/orsumpervat[ORrw.VATCode];
            case kVATIVWhenPrepaymentCalcQuant:
              VATIVrw.Price = ORrw.Price;
              VATIVrw.Sum = ORrw.Sum;
              sum1 = selectedIPrw.RecVal - selectedIPrw.VATVal;
              t = (sum1/ORr.Sum1)*VATIVrw.Sum;
              VATIVrw.Quant = Round(t/VATIVrw.Price,SetRoundModeD(3));
            otherwise
              VATIVrw.Price = ORrw.Price;
          end;
          VATIVrw.vRebate = ORrw.vRebate;      
          VATIVrw.PriceFactor = ORrw.PriceFactor;
          CalcSum(VATIVrw.Quant,VATIVrw.Price,VATIVrw.PriceFactor,VATIVrw.vRebate,t,GOb.UseDiscount);          
          VATIVrw.Sum = Round(t,DefaultRoundMode);
          VATIVrw.Objects = ORrw.Objects;
      end;
      VATIVrw.OrdRow = ordrow;
      MatRowPut(VATIVr,MatRowCnt(VATIVr),VATIVrw);
    end;
  end;
  VATIVr.FrPrice = frprice;
LPasteORRowToVATIV:;  
  return;
end;

procedure PasteIPRowToVATIV(record IPVc IPr,row IPVc selectedIPrw,Integer iprownr,var record VATIVVc VATIVr)
begin
  record CUVc CUr;
  row VATIVVc VATIVrw;
  
  CUr.Code = selectedIPrw.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    VATIVr.CustCode = CUr.Code;
    VATIVr.Addr0 = CUr.InvAddr0;
    VATIVr.Addr1 = CUr.InvAddr1;
    VATIVr.Addr2 = CUr.InvAddr2;
    VATIVr.Addr3 = CUr.InvAddr3;
    VATIVr.InvAddr3 = CUr.InvAddr4;
    VATIVr.OurContact = CUr.Person;
    VATIVr.IVInvDate = IPr.TransDate;
    VATIVr.IVTransDate = IPr.TransDate;
    VATIVr.OrderNr = -1;
    VATIVr.IVNr = -1;
    VATIVr.IPNr = IPr.SerNr;
    VATIVr.IPRow = iprownr;
    VATIVr.CUPNr = selectedIPrw.CUPNr;
  end;
  return;
end;

procedure PasteIPToVATIV(record IPVc IPr,row IPVc selectedIPrw,LongInt iprownr,var record VATIVVc VATIVr)
begin  
  Integer i,rwcnt,vatcnt;
  Integer vati;
  record ORVc ORr;  
  row ORVc ORrw;   
  Boolean orfound;
  val vat,t1,sum1,rnddiff;
  record SMVc VATr;
  row SMVc VATrw;
  vector val orsumpervat;
  record VATIVTBlock VATIVTb;
  row VATIVVc VATIVrw;
  
  if (selectedIPrw.OrderNr>0) then begin
    BlockLoad(VATIVTb);
    ORr.SerNr = selectedIPrw.OrderNr;
    if (ReadFIrstMain(ORr,1,true)) then begin
      CopyHeaderORToVATIV(ORr,selectedIPrw.CUPNr,IPr,iprownr,VATIVr);
      SetupVATBase(VATr,vatcnt);
      rwcnt = MatRowCnt(ORr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ORr,i,ORrw);
        AddVATBase(VATr,ORrw.VATCode,ORrw.Sum,ORrw.TAX1Reb,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);
      end;
      for (i=0;i<vatcnt;i=i+1) begin
        MatRowGet(VATr,i,VATrw);
        MulVATIV(VATrw.VATCode,VATrw.DebVal,vat,t1,ORr.InclVAT,ORr.NoTAXonVAT);
        orsumpervat[VATrw.VATCode] = VATrw.DebVal + vat;
      end;
      for (i=0;i<rwcnt;i=i+1) begin
        PasteORRowToVATIV(ORr,VATIVr,i,IPr,selectedIPrw,iprownr,orsumpervat,sum1);
      end;
      VATIVSumup(VATIVr);
      if (VATIVr.Sum1!=sum1) then begin
        if (rwcnt>0) then begin
          switch (VATIVTb.VATIVCalcWhenPrepayment) begin
            case kVATIVWhenPrepaymentCalcQuant:
              rnddiff = VATIVr.Sum1 - sum1;
              MatRowGet(VATIVr,rwcnt-1,VATIVrw);
              VATIVrw.Sum = VATIVrw.Sum - rnddiff;
              VATIVrw.Quant = Round(VATIVrw.Sum/VATIVrw.Price,SetRoundModeD(3));
              MatRowPut(VATIVr,rwcnt-1,VATIVrw);
              VATIVDchrsum(VATIVr,rwcnt-1);
              VATIVSumup(VATIVr);
          end;
        end;
      end;
      orfound = true;
    end;
  end;
  if (orfound==false) then begin
    PasteIPRowToVATIV(IPr,selectedIPrw,iprownr,VATIVr);
  end;
  return;
end;

global
function Integer CreateVATIVFromIP(record IPVc IPr,Integer rownr,var record VATIVVc VATIVr)
begin
  Integer res;
  row IPVc IPrw;  
  
  RecordNew(VATIVr);
  MatRowGet(IPr,rownr,IPrw);
  res = 22092;
  if (IPrw.CUPNr>0) then begin
    PasteIPToVATIV(IPr,IPrw,rownr,VATIVr);
    if (MatRowCnt(VATIVr)>0) then begin
      res = 0;
    end else begin
      res = 22091;
    end;
  end;
  CreateVATIVFromIP = res;
  return;
end;
