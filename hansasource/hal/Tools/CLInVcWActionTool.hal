external procedure WarnFutureDate(Boolean,Date);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function string 255 GetCustomerOnAccountAC(string);
external function string 255 GetSupplierOnAccountAC(string);
external function Boolean GetPMRow(string,var row PMBlock);
external function LongInt DateDiff(Date,Date);
external procedure RemoveOldCustObjects(string,var string);
external procedure IPUsedPrepaysum(LongInt,var val,var val,var val);
external procedure PastePMInCLIn(var record CLInVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure RemoveOldUserObjects(string,var string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean GetPMTAX(string,var val);

procedure CalcCLIn(record CLInVc CLInp)
BEGIN
  record RoundBlock RoundRec;
  val vatv,t;

  BlockLoad(RoundRec);  
  if (nonblank(CLInp.VATCode)) then begin
    MulVATIV(CLInp.VATCode,CLInp.Total,vatv,t,1,0);
    vatv = Round(vatv,GetVATRoundMode(RoundRec));  
    t = Round(t,GetVATRoundMode(RoundRec));  
  end;
  CLInp.TAX1Sum = t;

  if (GetPMTAX(CLInp.PayMode,t)) then begin end;
  if (nonblank(t)) then begin
    t = (1-(100/(100+t)))*100;
    t = t*CLInp.Total;
    CLInp.TAX1Sum = Round(t/100,GetTotalRoundMode(RoundRec));
  end;
  CLInp.VATVal = vatv;
  CLInp.NetVal = Round(CLInp.Total - vatv - CLInp.TAX1Sum,GetTotalRoundMode(RoundRec));
  RETURN;
END;

global
procedure CLInVc_PasteTotal(var record CLInVc CLInp)
BEGIN
  CalcCLIn(CLInp);
  RETURN;
END;

global
procedure CLInVc_PasteVATCode(var record CLInVc CLInp)
BEGIN
  CalcCLIn(CLInp);
  RETURN;
END;

global
procedure CLInVc_PasteNetVal(var record CLInVc CLInp)
BEGIN
  record RoundBlock RoundRec;
  val vatv,t;

  BlockLoad(RoundRec);  
  if (nonblank(CLInp.VATCode)) then begin
    MulVATIV(CLInp.VATCode,CLInp.NetVal,vatv,t,0,0);
    vatv = Round(vatv,GetVATRoundMode(RoundRec));
    CLInp.TAX1Sum = Round(t,GetVATRoundMode(RoundRec));
  end;
  if (GetPMTAX(CLInp.PayMode,t)) then begin end;
  if (nonblank(t)) then begin
    t = t*CLInp.Total;
    CLInp.TAX1Sum = Round(t/100,GetTotalRoundMode(RoundRec));
  end;
  CLInp.VATVal = vatv;
  CLInp.Total = CLInp.NetVal + CLInp.VATVal + CLInp.TAX1Sum;  
  RETURN;
END;

global
procedure CLInVc_PastePerson(var record CLInVc CLInp,Integer wnst,string efstr)
BEGIN
  record UserVc USr;
  string 255 tstr;
  record CUVc UserContactr;

  USr.Code = CLInp.Person;
  if (ReadFirstMain(USr,1,true)) then begin end;
  UserContactr.Code = USr.CustCode;
  if (ReadFirstMain(UserContactr,1,true)) then begin end;

  CLInp.CUName = USr.Name;
  CLInp.SalesGroup = USr.SalesGroup;
  CLInp.Addr0 = UserContactr.InvAddr0;
  CLInp.Addr1 = UserContactr.InvAddr1;
  CLInp.Addr2 = UserContactr.InvAddr2;
  CLInp.Addr3 = UserContactr.InvAddr3;
  CLInp.Addr4 = UserContactr.InvAddr4;
  if (wnst!=0) then begin//Rs_normal
    if ((efstr!=CLInp.Person) and (nonblank(efstr))) then begin
      tstr = CLInp.Objects;
      RemoveOldUserObjects(efstr,tstr);
      CLInp.Objects = tstr;
    end;    
  end;
  tstr = CLInp.Objects;
  if (nonblank(tstr)) then begin tstr = tstr & ","; end;
  CLInp.Objects = tstr & USr.PersObjx;  
  RETURN;
END;

procedure CLInGetRate(var record CLInVc CLInp)
BEGIN
  val from,to1,to2,base1,base2;
  string 10 curncy
 
  curncy = CLInp.CurncyCode;
  GetFullCurncyRate(curncy,CLInp.TransDate,from,to1,to2,base1,base2);
  CLInp.CurncyCode = curncy;
  CLInp.FrRate = from;
  CLInp.ToRateB1 = to1;
  CLInp.ToRateB2 = to2;
  CLInp.BaseRate1 = base1;
  CLInp.BaseRate2 = base2;
  RETURN;
END;

global
procedure CLInVc_PasteCurncyCode(var record CLInVc CLInp)
BEGIN
  CLInGetRate(CLInp);
  RETURN;
END;

global
procedure CLInVc_PastePayMode(var record CLInVc CLInp)
BEGIN
  val t,t1;
  
  PastePMInCLIn(CLInp);
  if (GetPMTAX(CLInp.PayMode,t)) then begin end;
  t = t * CLInp.Total;
  t = t/100;
  t1 = CLInp.Total + t;
  CLInp.TAX1Sum = t;
  CLInp.Total = t1;
  CLInp.Total = t1;
  RETURN;
END;

global
procedure CLInVc_PasteTransDate(var record CLInVc CLInp)
BEGIN
  WarnFutureDate(true,CLInp.TransDate);
  CLInGetRate(CLInp);
  RETURN;
END;

global
procedure CLInVc_PasteCorspCode(var record CLInVc CLInp,Integer rownr)
BEGIN
  record CLCorspVc CLCorspr;
  row CLInVc CLInrw;
  
  if (rownr<0) then begin
    CLCorspr.Code = CLInp.CorspCode;
    if (ReadFirstMain(CLCorspr,1,true)) then begin
      CLInp.CorspComment = CLCorspr.Comment;
    end;
  end else begin
    MatRowGet(CLInp,rownr,CLInrw);
    CLCorspr.Code = CLInrw.CorspCode;
    if (ReadFirstMain(CLCorspr,1,true)) then begin
      CLInrw.Comment = CLCorspr.Comment;
    end;
    MatRowPut(CLInp,rownr,CLInrw);
  end;
  
  RETURN;
END;

global
function Integer CLInVc_PasteCUCode(var record CLInVc CLInp,string efstr,Boolean allf)
BEGIN
  integer res;
  record CUVc CUr;
  string 255 tstr;
  row PMBlock PMrw;
  record AccVc Accr;
  
  if (allf) then begin
    if ((efstr!=CLInp.CUCode) and (nonblank(efstr))) then begin
      tstr = CLInp.Objects;
      RemoveOldCustObjects(efstr,tstr);
      CLInp.Objects = tstr;
    end;
  end;
  CUr.Code = CLInp.CUCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    GetPMRow(CLInp.PayMode,PMrw);
    Accr.AccNumber = PMrw.AccNr;
    ReadFirstMain(Accr,1,true);
    if (nonblank(Accr.Curncy)) and (nonblank(CUr.CurncyCode)) then begin
      if (Accr.Curncy!=CUr.CurncyCode) then begin
        res = 20806;
        goto LCLInVc_PasteCUCode;
      end;
    end;
    CLInp.CUCode = CUr.Code;
    CLInp.CUName = CUr.Name;
    CLInp.Addr0 = CUr.InvAddr0;
    CLInp.Addr1 = CUr.InvAddr1;
    CLInp.Addr2 = CUr.InvAddr2;
    CLInp.Addr3 = CUr.InvAddr3;
    CLInp.Addr4 = CUr.InvAddr4;
    if (allf) then begin
      if (blank(Accr.Curncy)) then begin
        CLInp.CurncyCode = CUr.CurncyCode;
      end;
      CLInGetRate(CLInp);
      tstr = CLInp.Objects;
      if (nonblank(tstr)) and nonblank(CUr.Objects) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & CUr.Objects;
      CLInp.Objects = tstr;
    end;
  end;
LCLInVc_PasteCUCode:;  
  CLInVc_PasteCUCode = res;
  RETURN;
END;

global
procedure CLInVc_PasteCompany(var record CLInVc CLInp,integer rownr,Boolean allf)
BEGIN
  record CUVc CUr;
  row CLInVc CLINrw;
  string 255 tstr;
  
  MatRowGet(CLInp,rownr,Clinrw);
  switch (Clinrw.Type) begin
    case 4:
      Clinrw.ARAPAcc = GetCustomerOnAccountAC(Clinrw.Company);
      MatRowPut(CLInp,rownr,Clinrw);
  end;    
  if (blank(CLINp.CUName)) or (MatRowCnt(CLINp)==1) then begin
    CUr.Code = CLINrw.Company;
    if (ReadFirstMain(CUr,1,true)) then begin
      CLInp.CUCode = CUr.Code;
      CLInp.CUName = CUr.Name;
      CLInp.Addr0 = CUr.InvAddr0;
      CLInp.Addr1 = CUr.InvAddr1;
      CLInp.Addr2 = CUr.InvAddr2;
      CLInp.Addr3 = CUr.InvAddr3;
      CLInp.Addr4 = CUr.InvAddr4;
      if (allf) then begin
        CLInp.CurncyCode = CUr.CurncyCode;
        CLInGetRate(CLInp);
        tstr = CLInp.Objects;
        if (nonblank(tstr)) then begin
          tstr = tstr & ",";
        end;
        tstr = tstr & CUr.Objects;
        CLInp.Objects = tstr;
      end;
    end;
  end;
  RETURN;
END;

global
procedure CLInSumup(var record CLInVc CLInp)
BEGIN
  Integer i,rwcnt;
  row CLInVc CLInrw;
  
  CLInp.Total = blankval;
  CLInp.NetVal = blankval;
  CLInp.VATVal = blankval;
  CLInp.TAX1Sum = blankval;
  rwcnt = MatRowCnt(CLInp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CLInp,i,CLInrw);
    CLInp.Total = CLInp.Total + CLInrw.Sum;
  end;
  CalcCLIn(CLInp);
  RETURN;
END;

global
function Integer CLInVc_PasteTransNr(var record CLInVc CLInp,Integer rownr)
BEGIN
  record APVc APr;
  record ARVc ARr;  
  record ORVc ORr;  
  record POVc POr;  
  record OPPVc OPPr;  
  record VIVc VIr;  
  record IVVc IVr;  
  row CLInVc CLInrw;
  row CLInVc CLIn2rw;
  Integer res;
  val amount;
  Integer j;
  record CheckVc Checkr;
  record APAccBlock APAccRec;
  record AccBlock ARb;
  Integer i,rwcnt;
  row VIVc VIrw; 
  row IVVc IVrw; 
  string 255 tstr;
  LongInt rebdays;
  record RoundBlock RoundRec;
  val rebval,rv;
  row POVc POrw;  
  record APPayHistVc APPHr;
  record CUVc CUr;
  Integer IPBookVAT;
  Integer OPBookVAT;
  
  MatRowGet(CLInp,rownr,CLInrw);
  switch (CLInrw.Type) begin
    case kCashInRowTypeInvoice: 
      BlockLoad(RoundRec);  
      ARr.InvoiceNr = CLInrw.TransNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        if (ARr.ARCurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (ARr.CustCode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          for (j=0;j<rownr;j=j+1) begin
            MatRowGet(CLInp,j,CLIn2rw);
            if (CLIn2rw.Type==CLInrw.Type) then begin
              if (CLIn2rw.TransNr==CLInrw.TransNr) then begin
                amount = amount + CLIn2rw.Sum;
              end;
            end;
          end;
          rv = ARr.RVal - amount;
          IVr.SerNr = CLInrw.TransNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            CLInrw.ARAPAcc = IVr.ARAcc;
            if (IVr.pdvrebt!=0) then begin
              rebdays = DateDiff(ARr.ARRebDate,CLInp.TransDate);
              if (rebdays>=0) then begin
                rebval = rv*IVr.pdvrebt;
                rebval = rebval/100;
                rebval = Round(rebval,GetTotalRoundMode(RoundRec));
                rv = rv - rebval;
//pdvrebt2                
              end;
            end;
          end;
          BlockLoad(ARb);
          CLInrw.Sum = rv;        
          CLInrw.Company = ARr.CustCode;        
          CLInp.CUCode = ARr.CustCode;
          if (ARb.ARUseObj!=0) then begin
            CLInrw.Objects = IVr.Objects;
          end;    
          CLInVc_PasteCUCode(CLInp,"",false);
          CUr.Code = CLInrw.Company;
          ReadFirstMain(CUr,1,true);
          if (HasLocalization("POL")) then begin
            IPBookVAT = IVr.IPBookVAT;
          end else begin
            switch (CUr.IPBookVAT) begin
              case 1:
                IPBookVAT = 1;
              case 2:
                IPBookVAT = 0;
              otherwise
                IPBookVAT = ARb.IPBookVAT;
            end;
          end;
          if (IPBookVAT!=0) then begin
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              if (nonblank(IVrw.VATCode)) then begin
                tstr = IVrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLInp.VATCode = tstr;
          end;          
        end;
      end;
    case kCashInRowTypeCredPurchaseInvoice: 
      APr.SerNr = CLInrw.TransNr;
      if (ReadFirstMain(APr,1,true)) then begin
        if (APr.CurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (APr.VECode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          BlockLoad(APAccRec);
          VIr.SerNr = CLInrw.TransNr;
          ReadFirstMain(VIr,1,true);
          CLInrw.Sum = -APr.RVal;        
          CLInrw.Company = APr.VECode;        
          CLInp.CUCode = APr.VECode;
          CLInVc_PasteCUCode(CLInp,"",false);
          CUr.Code = APr.VECode;
          ReadFirstMain(CUr,1,true);
          if (HasLocalization("POL")) then begin
            OPBookVAT = VIr.OPBookVAT;
          end else begin
            switch (CUr.OPBookVAT) begin
              case 1:
                OPBookVAT = 1;
              case 2:
                OPBookVAT = 0;
              otherwise
                OPBookVAT = APAccRec.OPBookVAT;
            end;
          end;
          CLInrw.ARAPAcc = VIr.APAcc;
          if (OPBookVAT!=0) then begin
            rwcnt = MatRowCnt(VIr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(VIr,i,VIrw);
              if (nonblank(VIrw.VATCode)) then begin
                tstr = VIrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLInp.VATCode = tstr;
          end;
        end;
      end else begin
        VIr.SerNr = CLInrw.TransNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          if (VIr.CurncyCode!=CLInp.CurncyCode) then begin
            res = 1;
          end;
          if (nonblank(CLInp.CUCode)) then begin
            if (VIr.VECode!=CLInp.CUCode) then begin
              res = 2;
            end;
          end;
          if (res==0) then begin
            CLInrw.Sum = VIr.PayVal;        
            CLInrw.Company = VIr.VECode;        
            CLInp.CUCode = VIr.VECode;
            if (nonblank(VIr.Objects)) and (nonblank(CLInp.Objects)) then begin
              CLInp.Objects = CLInp.Objects & ",";
            end;
            CLInp.Objects = CLInp.Objects & VIr.Objects;
            CLInVc_PasteCUCode(CLInp,"",false);
          end;
        end;
      end;
    case kCashInRowTypeCustomerPrepayment: 
      ORr.SerNr = CLInrw.OrderNr;//special field for OrderNr
      if (ReadFirstMain(ORr,1,true)) then begin
        if (ORr.CurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (ORr.CustCode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          CLInrw.Sum = ORr.Sum4;        
          CLInrw.Company = ORr.CustCode;        
          CLInp.CUCode = ORr.CustCode;
          CLInVc_PasteCUCode(CLInp,"",false);
        end;
      end;
    case kCashInRowTypeSupplierRevPrepayment: 
      if (CLInrw.OrderNr!=-1) then begin
        POr.SerNr = CLInrw.TransNr;
        if (ReadFirstMain(POr,1,true)) then begin
          if (POr.CurncyCode!=CLInp.CurncyCode) then begin
            res = 1;
          end;
          if (nonblank(CLInp.CUCode)) then begin
            if (POr.VECode!=CLInp.CUCode) then begin
              res = 2;
            end;
          end;
          if (res==0) then begin
            BlockLoad(APAccRec);
            CLInrw.Sum = POr.Sum4;        
            CLInrw.Company = POr.VECode;        
            CLInp.CUCode = POr.VECode;
            if (APAccRec.PreOPBookVAT!=0) then begin
              rwcnt = MatRowCnt(POr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(POr,i,POrw);
                if (nonblank(POrw.VATCode)) then begin
                  tstr = POrw.VATCode;
                  i = rwcnt;
                end;
              end;
            end;
            CLInp.VATCode = tstr;
            CLInVc_PasteCUCode(CLInp,"",false);
          end;
        end;
      end else begin
        OPPr.SerNr = CLInrw.TransNr;
        if (ReadFirstMain(OPPr,1,true)) then begin
          if (OPPr.CurncyCode!=CLInp.CurncyCode) then begin
            res = 1;
          end;
          if (nonblank(CLInp.CUCode)) then begin
            if (OPPr.VECode!=CLInp.CUCode) then begin
              res = 2;
            end;
          end;
          if (res==0) then begin
            BlockLoad(APAccRec);
            CLInrw.Sum = OPPr.PPVal;        
            CLInrw.Company = OPPr.VECode; 
            CLInp.CUCode = OPPr.VECode;
            if (APAccRec.PreOPBookVAT!=0) then begin
              CLInp.VATCode = OPPr.VATCode;
            end;
            CLInVc_PasteCUCode(CLInp,"",false);
          end;
        end;
      end;
      APPHr.VEPNr = CLInrw.TransNr;
      ReadFirstMain(APPHr,1,true);
      CLInrw.ARAPAcc = APPHr.APAcc;
      if (blank(CLInrw.ARAPAcc)) then begin       
        CLInrw.ARAPAcc = GetSupplierOnAccountAC(Clinrw.Company);
      end;
    case kCashInRowTypeCheque: 
      Checkr.SerNr = CLInrw.TransNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        for (j=0;j<rownr;j=j+1) begin
          MatRowGet(CLInp,j,CLIn2rw);
          if (CLIn2rw.Type==CLInrw.Type) then begin
            if (CLIn2rw.TransNr==CLInrw.TransNr) then begin
              amount = amount + CLIn2rw.Sum;
            end;
          end;
        end;
        CLInrw.Sum = Checkr.Amount - amount;
        CLInrw.Company = Checkr.CUCode;        
        CLInp.CUCode = Checkr.CUCode;
        CLInVc_PasteCUCode(CLInp,"",false);
        CLInp.CurncyCode = Checkr.CurncyCode;
        CLInVc_PasteCurncyCode(CLInp);
      end;      
  end;  
  MatRowPut(CLInp,rownr,CLInrw);
  if (rebval!=0) then begin
    CLInrw.stp = 2;
    CLInrw.Sum = rebval;
    MatRowPut(CLInp,MatRowCnt(CLInp),CLInrw);
  end;
  CLInSumup(CLInp);
  CLInVc_PasteTransNr = res;
  RETURN;
END;

global
function Integer CLInVc_PasteTransOfficialSerNr(var record CLInVc CLInp,Integer rownr)
begin
  record APVc APr;
  record ARVc ARr;  
  record ORVc ORr;  
  record POVc POr;  
  record OPPVc OPPr;  
  record VIVc VIr;  
  record IVVc IVr;  
  row CLInVc CLInrw;
  row CLInVc CLIn2rw;
  Integer res;
  val amount;
  Integer j;
  record CheckVc Checkr;
  record APAccBlock APAccRec;
  record AccBlock ARb;
  Integer i,rwcnt;
  row VIVc VIrw; 
  row IVVc IVrw; 
  string 255 tstr;
  LongInt rebdays;
  record RoundBlock RoundRec;
  val rebval,rv;
  row POVc POrw;  
  record APPayHistVc APPHr;
  record CUVc CUr;
  Integer IPBookVAT;
  Integer OPBookVAT;
  
  MatRowGet(CLInp,rownr,CLInrw);
  switch (CLInrw.Type) begin
    case 1: 
      BlockLoad(RoundRec);
      ARr.OfficialSerNr = CLInrw.TransOfficialSerNr;
      if (ReadFirstKey("OfficialSerNr",ARr,1,true)) then begin        
        if (ARr.ARCurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (ARr.CustCode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          for (j=0;j<rownr;j=j+1) begin
            MatRowGet(CLInp,j,CLIn2rw);
            if (CLIn2rw.Type==CLInrw.Type) then begin
              if (CLIn2rw.TransOfficialSerNr==CLInrw.TransOfficialSerNr) then begin
                amount = amount + CLIn2rw.Sum;
              end;
            end;
          end;
          rv = ARr.RVal - amount;
          IVr.OfficialSerNr = CLInrw.TransOfficialSerNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            CLInrw.ARAPAcc = IVr.ARAcc;
            if (IVr.pdvrebt!=0) then begin
              rebdays = DateDiff(ARr.ARRebDate,CLInp.TransDate);
              if (rebdays>=0) then begin
                rebval = rv*IVr.pdvrebt;
                rebval = rebval/100;
                rebval = Round(rebval,GetTotalRoundMode(RoundRec));
                rv = rv - rebval;
//pdvrebt2                
              end;
            end;
          end;
          BlockLoad(ARb);
          CLInrw.TransNr = ARr.InvoiceNr;        
          CLInrw.Sum = rv;        
          CLInrw.Company = ARr.CustCode;        
          CLInp.CUCode = ARr.CustCode;
          if (ARb.ARUseObj!=0) then begin
            CLInrw.Objects = IVr.Objects;
          end;    
          CLInVc_PasteCUCode(CLInp,"",false);
          CUr.Code = CLInrw.Company;
          ReadFirstMain(CUr,1,true);
          if (HasLocalization("POL")) then begin
            IPBookVAT = IVr.IPBookVAT;
          end else begin
            switch (CUr.IPBookVAT) begin
              case 1:
                IPBookVAT = 1;
              case 2:
                IPBookVAT = 0;
              otherwise
                IPBookVAT = ARb.IPBookVAT;
            end;
          end;
          if (IPBookVAT!=0) then begin
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              if (nonblank(IVrw.VATCode)) then begin
                tstr = IVrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLInp.VATCode = tstr;
          end;          
        end;
      end;
    case 2: 
      APr.SerNr = CLInrw.TransNr;
      if (ReadFirstMain(APr,1,true)) then begin
        if (APr.CurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (APr.VECode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          BlockLoad(APAccRec);
          VIr.SerNr = CLInrw.TransNr;
          ReadFirstMain(VIr,1,true);
          CLInrw.Sum = -APr.RVal;        
          CLInrw.Company = APr.VECode;        
          CLInp.CUCode = APr.VECode;
          CLInVc_PasteCUCode(CLInp,"",false);
          CUr.Code = APr.VECode;
          ReadFirstMain(CUr,1,true);
          if (HasLocalization("POL")) then begin
            OPBookVAT = VIr.OPBookVAT;
          end else begin
            switch (CUr.OPBookVAT) begin
              case 1:
                OPBookVAT = 1;
              case 2:
                OPBookVAT = 0;
              otherwise
                OPBookVAT = APAccRec.OPBookVAT;
            end;
          end;
          CLInrw.ARAPAcc = VIr.APAcc;
          if (OPBookVAT!=0) then begin
            rwcnt = MatRowCnt(VIr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(VIr,i,VIrw);
              if (nonblank(VIrw.VATCode)) then begin
                tstr = VIrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLInp.VATCode = tstr;
          end;
        end;
      end else begin
        VIr.SerNr = CLInrw.TransNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          if (VIr.CurncyCode!=CLInp.CurncyCode) then begin
            res = 1;
          end;
          if (nonblank(CLInp.CUCode)) then begin
            if (VIr.VECode!=CLInp.CUCode) then begin
              res = 2;
            end;
          end;
          if (res==0) then begin
            CLInrw.Sum = VIr.PayVal;        
            CLInrw.Company = VIr.VECode;        
            CLInp.CUCode = VIr.VECode;
            if (nonblank(VIr.Objects)) and (nonblank(CLInp.Objects)) then begin
              CLInp.Objects = CLInp.Objects & ",";
            end;
            CLInp.Objects = CLInp.Objects & VIr.Objects;
            CLInVc_PasteCUCode(CLInp,"",false);
          end;
        end;
      end;
    case 4: 
      ORr.SerNr = CLInrw.OrderNr;//special field for OrderNr
      if (ReadFirstMain(ORr,1,true)) then begin
        if (ORr.CurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (ORr.CustCode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          CLInrw.Sum = ORr.Sum4;        
          CLInrw.Company = ORr.CustCode;        
          CLInp.CUCode = ORr.CustCode;
          CLInVc_PasteCUCode(CLInp,"",false);
        end;
      end;
    case 5: 
      if (CLInrw.OrderNr!=-1) then begin
        POr.SerNr = CLInrw.TransNr;
        if (ReadFirstMain(POr,1,true)) then begin
          if (POr.CurncyCode!=CLInp.CurncyCode) then begin
            res = 1;
          end;
          if (nonblank(CLInp.CUCode)) then begin
            if (POr.VECode!=CLInp.CUCode) then begin
              res = 2;
            end;
          end;
          if (res==0) then begin
            BlockLoad(APAccRec);
            CLInrw.Sum = POr.Sum4;        
            CLInrw.Company = POr.VECode;        
            CLInp.CUCode = POr.VECode;
            if (APAccRec.PreOPBookVAT!=0) then begin
              rwcnt = MatRowCnt(POr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(POr,i,POrw);
                if (nonblank(POrw.VATCode)) then begin
                  tstr = POrw.VATCode;
                  i = rwcnt;
                end;
              end;
            end;
            CLInp.VATCode = tstr;
            CLInVc_PasteCUCode(CLInp,"",false);
          end;
        end;
      end else begin
        OPPr.SerNr = CLInrw.TransNr;
        if (ReadFirstMain(OPPr,1,true)) then begin
          BlockLoad(APAccRec);
          CLInrw.Sum = OPPr.PPVal;        
          CLInrw.Company = OPPr.VECode; 
          CLInp.CUCode = OPPr.VECode;
          if (APAccRec.PreOPBookVAT!=0) then begin
            CLInp.VATCode = OPPr.VATCode;
          end;
          CLInVc_PasteCUCode(CLInp,"",false);
        end;
      end;
      APPHr.VEPNr = CLInrw.TransNr;
      ReadFirstMain(APPHr,1,true);
      CLInrw.ARAPAcc = APPHr.APAcc;
      if (blank(CLInrw.ARAPAcc)) then begin       
        CLInrw.ARAPAcc = GetSupplierOnAccountAC(Clinrw.Company);
      end;
    case 6: 
      Checkr.SerNr = CLInrw.TransNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        for (j=0;j<rownr;j=j+1) begin
          MatRowGet(CLInp,j,CLIn2rw);
          if (CLIn2rw.Type==CLInrw.Type) then begin
            if (CLIn2rw.TransNr==CLInrw.TransNr) then begin
              amount = amount + CLIn2rw.Sum;
            end;
          end;
        end;
        CLInrw.Sum = Checkr.Amount - amount;
        CLInrw.Company = Checkr.CUCode;        
        CLInp.CUCode = Checkr.CUCode;
        CLInVc_PasteCUCode(CLInp,"",false);
        CLInp.CurncyCode = Checkr.CurncyCode;
        CLInVc_PasteCurncyCode(CLInp);
      end;      
  end;
  if (blank(CLInrw.TransOfficialSerNr)) then begin
    CLInrw.TransOfficialSerNr = CLInrw.TransNr;
  end;  
  MatRowPut(CLInp,rownr,CLInrw);
  if (rebval!=0) then begin
    CLInrw.stp = 2;
    CLInrw.Sum = rebval;
    MatRowPut(CLInp,MatRowCnt(CLInp),CLInrw);
  end;
  CLInSumup(CLInp);
  CLInVc_PasteTransOfficialSerNr = res;
  RETURN;
END;

function val CLInPrepaysum(var record CLInVc CLInp,LongInt cupnr,Integer currow)
BEGIN
  Integer i,rwcnt;
  row CLInVc CLInrw;
  val isp;
  
  isp = blankval;
  rwcnt = MatRowCnt(CLInp);
  for (i=0;i<rwcnt;i=i+1) begin
    if (currow!=i) then begin
      MatRowGet(CLInp,i,CLInrw);
      switch (CLInrw.Type) begin
        case 4:
          if (CLInrw.TransNr==cupnr) then begin isp = isp + CLInrw.Sum; end;
      end;
    end;  
  end;
  CLInPrepaysum = isp;
  RETURN;
END;

global
function Integer CLInVc_PasteOrderNr(var record CLInVc CLInp,Integer rownr)
BEGIN
  record APVc APr;
  record ARVc ARr;  
  record ORVc ORr;  
  row ORVc ORrw;  
  record POVc POr;  
  row POVc POrw;  
  row CLInVc CLInrw;
  Integer res;
  val t,vatused,rv,taxused;
  record ARPayVc ARPayr;
  record AccBlock ARb;
  record APAccBlock APAccRec;
  Integer i,rwcnt;
  string 255 tstr;
  record CUVc CUr;
  Integer IPBookVAT;
  Integer OPBookVAT;
  
  BlockLoad(ARb);
  MatRowGet(CLInp,rownr,CLInrw);
  switch (CLInrw.Type) begin
    case 4: 
      ORr.SerNr = CLInrw.OrderNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        if (ORr.CurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (ORr.CustCode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          rv = ORr.Sum4 - CLInPrepaysum(CLInp,CLInrw.TransNr,rownr);  
          ARPayr.CUPNr = CLInrw.TransNr;
          if (ReadFirstMain(ARPayr,1,true)) then begin
            rv = rv - ARPayr.RVal;
          end;  
          IPUsedPrepaysum(CLInrw.TransNr,t,vatused,taxused);
          rv = rv - t;      
          CLInrw.Sum = rv;        
          CLInrw.Company = ORr.CustCode;  
          if (ARb.ARUseObj!=0) then begin
            CLInrw.Objects = ORr.Objects;
          end;       
          CLInp.CUCode = ORr.CustCode;
          CLInVc_PasteCUCode(CLInp,"",false);
          CUr.Code = CLInrw.Company;
          ReadFirstMain(CUr,1,true);
          switch (CUr.IPBookVAT) begin
            case 1:
              IPBookVAT = 1;
            case 2:
              IPBookVAT = 0;
            otherwise
              IPBookVAT = ARb.IPBookVAT;
          end;
          if (IPBookVAT!=0) then begin
            rwcnt = MatRowCnt(ORr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(ORr,i,ORrw);
              if (nonblank(ORrw.VATCode)) then begin
                tstr = ORrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLInp.VATCode = tstr;
          end;          
        end;
      end;
    case 5: 
      POr.SerNr = CLInrw.OrderNr;
      if (ReadFirstMain(POr,1,true)) then begin
        if (POr.CurncyCode!=CLInp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLInp.CUCode)) then begin
          if (POr.VECode!=CLInp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          CLInrw.Sum = POr.PrepaidAmount;
          CLInrw.Company = POr.VECode;        
          CLInp.CUCode = POr.VECode;
          CLInVc_PasteCUCode(CLInp,"",false);
          BlockLoad(APAccRec);
          CUr.Code = CLInp.CUCode;
          ReadFirstMain(CUr,1,true);
          switch (CUr.OPBookVAT) begin
            case 1:
              OPBookVAT = 1;
            case 2:
              OPBookVAT = 0;
            otherwise
              OPBookVAT = APAccRec.OPBookVAT;
          end;
          if (OPBookVAT!=0) then begin
            rwcnt = MatRowCnt(POr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(POr,i,POrw);
              if (nonblank(POrw.VATCode)) then begin
                tstr = POrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLInp.VATCode = tstr;
          end;          
        end;
      end;
  end;  
  MatRowPut(CLInp,rownr,CLInrw);
  CLInSumup(CLInp);
  CLInVc_PasteOrderNr = res;
  RETURN;
END;
