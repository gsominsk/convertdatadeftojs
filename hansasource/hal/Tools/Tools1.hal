external function roundmode SetRoundModeD(Integer);
external function roundmode GetCostRoundMode(record RoundBlock);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure FillThisItemVAR(string,string,string,Array string,Array string,Array string,Array string,var string);
external procedure FillMaskVAR(string,string,string,Array string,Array string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);

global
procedure CutDecimals(val nr, var string cutstr)
begin
  Integer ln;
  String 200 nrstr;
  
  nrstr = "" & nr;
  ln = Len(nrstr);
  cutstr = Mid(nrstr,0,ln-3);
  return;
end;

global
procedure GetCurRateText(var string currate,val FrRate,val ToRateB1,val ToRateB2)
begin
  string 200 tstr;
  
  currate = "";
  if ((FrRate<>0) and ((ToRateB1<>0) or (ToRateB2<>0))) then begin
    CutDecimals(FrRate,currate)
    currate = currate & ":";
    if (ToRateB1<>0) then begin
      CutDecimals(ToRateB1,tstr)
    end else begin
      CutDecimals(ToRateB2,tstr)
    end;
    currate = currate & tstr;
  end;
  return;
end;

global
procedure GetItemVATCode(string item,Integer aexport,var string vatcode,Boolean sales)
begin
  record ITVc ITr;
  record INVc INr;
  record AccBlock ARAccRec;
  record APAccBlock APAccRec;
  
  vatcode = "";
  INr.Code = item;
  if (ReadFirstItem(item,INr,true,false)) then begin
    switch (aexport) begin
      case 4: vatcode = INr.VATCodeExp;
      case 3: vatcode = INr.VATCodeEU;
      case 2: vatcode = INr.VATCodeExp;
      case 1: vatcode = INr.VATCodeEU;
      otherwise vatcode = INr.VATCode;
    end;
    if (nonblank(vatcode)) then begin goto LGetItemVATCode; end;
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
      switch (aexport) begin
        case 4: vatcode = ITr.VATCodeExp;
        case 3: vatcode = ITr.VATCodeEU;
        case 2: vatcode = ITr.VATCodeExp;
        case 1: vatcode = ITr.VATCodeEU;
        otherwise vatcode = ITr.VATCodeDom;
      end;
    end;
  end;
  if (blank(vatcode)) then begin
    if (sales) then begin
      BlockLoad(ARAccRec);
      switch (aexport) begin
        case 4: vatcode = ARAccRec.VATCodeExp;
        case 3: vatcode = ARAccRec.VATCodeEU;
        case 2: vatcode = ARAccRec.VATCodeExp;
        case 1: vatcode = ARAccRec.VATCodeEU;
        otherwise vatcode = ARAccRec.VATCodeDom;
      end;
      if (blank(vatcode)) then begin
        vatcode = ARAccRec.VATCodeDom;
      end;
    end else begin
      BlockLoad(APAccRec);
      switch (aexport) begin
        case 4: vatcode = APAccRec.VATCodeExp;
        case 3: vatcode = APAccRec.VATCodeEU;
        case 2: vatcode = APAccRec.VATCodeExp;
        case 1: vatcode = APAccRec.VATCodeEU;
        otherwise vatcode = ARAccRec.VATCodeDom;
      end;
      if (blank(vatcode)) then begin
        vatcode = APAccRec.VATCodeDom;
      end;
    end;
  end;
LGetItemVATCode:;
  return;
end;

global
procedure GetItemTaxTemplateCode(string item,Integer aexport,var string taxtemplatecode,Boolean sales)
begin
  record ITVc ITr;
  record INVc INr;
  record AccBlock ARAccRec;
  record APAccBlock APAccRec;
  
  taxtemplatecode = "";
  INr.Code = item;
  if (ReadFirstItem(item,INr,true,false)) then begin
    switch (aexport) begin
      case 4: taxtemplatecode = INr.TaxTemplateCodeExp;
      case 3: taxtemplatecode = INr.TaxTemplateCodeEU;
      case 2: taxtemplatecode = INr.TaxTemplateCodeExp;
      case 1: taxtemplatecode = INr.TaxTemplateCodeEU;
      otherwise taxtemplatecode = INr.TaxTemplateCode;
    end;
    if (nonblank(taxtemplatecode)) then begin goto LGetItemTaxTemplateCode; end;
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
      switch (aexport) begin
        case 4: taxtemplatecode = ITr.TaxTemplateCodeExp;
        case 3: taxtemplatecode = ITr.TaxTemplateCodeEU;
        case 2: taxtemplatecode = ITr.TaxTemplateCodeExp;
        case 1: taxtemplatecode = ITr.TaxTemplateCodeEU;
        otherwise taxtemplatecode = ITr.TaxTemplateCode;
      end;
    end;
  end;
  if (blank(taxtemplatecode)) then begin
    if (sales) then begin
      BlockLoad(ARAccRec);
      switch (aexport) begin
        case 4: taxtemplatecode = ARAccRec.TaxTemplateCodeExp;
        case 3: taxtemplatecode = ARAccRec.TaxTemplateCodeEU;
        case 2: taxtemplatecode = ARAccRec.TaxTemplateCodeExp;
        case 1: taxtemplatecode = ARAccRec.TaxTemplateCodeEU;
        otherwise taxtemplatecode = ARAccRec.TaxTemplateCode;
      end;
      if (blank(taxtemplatecode)) then begin
        taxtemplatecode = ARAccRec.TaxTemplateCode;
      end;
    end else begin
      BlockLoad(APAccRec);
      switch (aexport) begin
        case 4: taxtemplatecode = APAccRec.TaxTemplateCodeExp;
        case 3: taxtemplatecode = APAccRec.TaxTemplateCodeEU;
        case 2: taxtemplatecode = APAccRec.TaxTemplateCodeExp;
        case 1: taxtemplatecode = APAccRec.TaxTemplateCodeEU;
        otherwise taxtemplatecode = ARAccRec.TaxTemplateCode;
      end;
      if (blank(taxtemplatecode)) then begin
        taxtemplatecode = APAccRec.TaxTemplateCode;
      end;
    end;
  end;
LGetItemTaxTemplateCode:;
  return;
end;

global
procedure GetItemCreditVATCode(string item,Integer aexport,var string vatcode,Boolean sales)
begin
  record ITVc ITr;
  record INVc INr;
  record AccBlock ARAccRec;
  record APAccBlock APAccRec;
  
  vatcode = "";
  INr.Code = item;
  if (ReadFirstMain(INr,1,true)) then begin
    switch (aexport) begin
      case 4: vatcode = INr.CredVATCodeExp;
      case 3: vatcode = INr.CredVATCodeEU;
      case 2: vatcode = INr.CredVATCodeExp;
      case 1: vatcode = INr.CredVATCodeEU;
      otherwise vatcode = INr.CredVATCode;
    end;
    if (nonblank(vatcode)) then begin goto LGetItemCreditVATCode; end;
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
      switch (aexport) begin
        case 4: vatcode = ITr.CredVATCodeExp;
        case 3: vatcode = ITr.CredVATCodeEU;
        case 2: vatcode = ITr.CredVATCodeExp;
        case 1: vatcode = ITr.CredVATCodeEU;
        otherwise vatcode = ITr.CredVATCodeDom;
      end;
    end;
  end;
  if (blank(vatcode)) then begin
    if (sales) then begin
      BlockLoad(ARAccRec);
      switch (aexport) begin
        case 4: vatcode = ARAccRec.CredVATCodeExp;
        case 3: vatcode = ARAccRec.CredVATCodeEU;
        case 2: vatcode = ARAccRec.CredVATCodeExp;
        case 1: vatcode = ARAccRec.CredVATCodeEU;
        otherwise vatcode = ARAccRec.CredVATCodeDom;
      end;
      if (blank(vatcode)) then begin
        vatcode = ARAccRec.VATCodeDom;
      end;
    end else begin
      BlockLoad(APAccRec);
      switch (aexport) begin
        case 4: vatcode = APAccRec.VATCodeExp;
        case 3: vatcode = APAccRec.VATCodeEU;
        case 2: vatcode = APAccRec.VATCodeExp;
        case 1: vatcode = APAccRec.VATCodeEU;
        otherwise vatcode = APAccRec.VATCodeDom;
      end;
      if (blank(vatcode)) then begin
        vatcode = APAccRec.VATCodeDom;
      end;
    end;
  end;
LGetItemCreditVATCode:;
  return;
end;

global
function Boolean GetItemNameStr(Integer tnr,var string tstr,string langcod2,string deftext,string itemname)
begin
  Boolean res;
  Integer i,rwcnt;
  row INVc INTrrp;
  record INVc INp;
  Integer hcnt;
  String 5 langcode;
  Boolean hit;
  
  string 60 sz,msk,mskrep;  
  string 200 varsubset;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  Array string 20 vars;
  Array string 2 varssz;
  string 255 mask;
  string 10 itemsize;
  
  res = false;
  hcnt = 0;
  tstr = deftext;
  INp.Code=itemname;
  if (ReadFirstItem(itemname,INp,true,false)) then begin
    langcode = langcod2;
    if (nonblank(langcode)) then begin
      hit = false;
      rwcnt = MatRowCnt(INp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(INp,i,INTrrp);
        if (langcode==INTrrp.LangCode) then begin
          hit = true;
        end;
      end;
      if (hit==false) then begin
        langcode = "";
      end;      
    end;
    if (blank(langcode)) then begin 
      hcnt = hcnt+1; 
    end;
    if ((hcnt==1) and (tnr==1)) then begin
      res = true;
    end else begin
      rwcnt = MatRowCnt(INp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(INp,i,INTrrp);
        if (langcode==INTrrp.LangCode) then begin
          hcnt=hcnt+1;
          if (hcnt==tnr) then begin
            tstr = INTrrp.Text;
//we don't need variety info on evry line
            if (FindItemVAR(itemname,sz,msk,mskrep,varsubset)) then begin
              FillMaskVAR(itemname,itemsize,mask,maskvar,maskvarsz);
              FillThisItemVAR(itemname,langcode,itemsize,maskvar,maskvarsz,vars,varssz,tstr);
            end;
            res = true;
            i = rwcnt;
          end;
        end;
      end;
    end;
 end;
 GetItemNameStr = res;   
 return;
end;

global 
function val RoundVAL(val v,LongInt roundto,Integer typ)
begin
  val res;
  LongInt lroundto;
  roundmode rnddef;
  
  lroundto = roundto;
  rnddef = DefaultValRoundoff;
  if (lroundto<0) then begin lroundto = rnddef.decimals; end;
  switch (typ) begin
    otherwise
      res = Round(v,SetRoundModeD(lroundto));
  end;
  RoundVAL = res;
  return;
end;

global
function roundmode CostPriceDecimals()
begin
  roundmode res;
  record RoundBlock Rb;
  
  BlockLoad(Rb);
  res = GetCostRoundMode(Rb);
  res.decimals = 5;
  CostPriceDecimals = res;
  return;
end;

global
procedure SplitString(string s,string split,var array string ssa)
begin
  LongInt i,j,k,n,l;
  string 10 tstr;
  string 1 c;

  k = 0;
  tstr = "";
  j = 0;
  l = len(s);

  if (nonblank(s)) then begin
    for (i = 0; i<=l; i = i + 1) begin
      c = Mid(s,i,1);
      if ((c==split) or (i==l)) then begin
        ssa[j] = tstr;
        tstr = "";
        j = j + 1;
      end else begin
        tstr = tstr & c;
      end;
    end;
    k = j;
  end;
end;
