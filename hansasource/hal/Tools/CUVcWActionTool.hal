external function string 60 RemoveObjectFromObjectList(string,string);
external function string 60 AddObjectToObjectList(string,string);
external function boolean CheckClassInCUVc(record CUVc,record CCatVc,var string);
external procedure GetCountryName(string,string,var string);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure SetSalesMan(var string,string);
external function Boolean GetPD(var record PDVc);
external function LongInt DateDiff(Date,Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,
                   Array string,Array val,var Integer);
external function Boolean GetNextCustNr(var string);
external function Boolean PasteRegDef(string,string,var string,var string,var string,var string);
external function string 255 AddStr(string,string,string);
external function string 255 RemoveSetFromSet(string,string);

global
function Boolean CUVc_PasteName(var record CUVc CUp)
BEGIN
  Boolean res;
  record CUVc CUr;
  
  res = true;
  if (nonblank(CUp.Name)) then begin
    CUr.Name = CUp.Name;
    if (ReadFirstKey("Name",CUr,1,true)) then begin
      res = false;
    end;
  end;
  CUVc_PasteName = res;
  RETURN;
END;

global
function Boolean CUVc_PasteSalesMan(var record CUVc CUp)
BEGIN
  Boolean res;
  record UserVc Userr;
  
  Userr.Code = CUp.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    CUp.SalesGroup = Userr.SalesGroup;
    res = true;
  end;
  CUVc_PasteSalesMan = res;
  RETURN;
END;

global
function Boolean CUVc_PasteRegNr2(var record CUVc CUp)
BEGIN
  Boolean res;
  string 255 cuvatcode,vevatcode,tstr,doctype;
    
  if (PasteRegDef("CUVc",CUp.RegNr2,cuvatcode,vevatcode,tstr,doctype)) then begin
    CUp.VATCode = cuvatcode;
    CUp.VEVATCode = vevatcode;
    CUp.LangCode = tstr;
    CUp.DocType = doctype;
    res = true;
  end;
  CUVc_PasteRegNr2 = res;
  RETURN;
END;

global
updating procedure UpdContactAddrCUDsmRemote(record CUVc CUr)
BEGIN
  record ContactRelVc ContactRelr;
  record ContactRelVc oldContactRelr;
  record CUVc ContactCUr;
  record CUVc oldContactCUr;
  Boolean TrHs;
  
  TrHs = true;
  ContactRelr.CustCode = CUr.Code;
  while (LoopKey("CompKey",ContactRelr,1,TrHs)) begin
    if (ContactRelr.CustCode!=CUr.Code) then begin TrHs = false; end;
    if (TrHs) then begin
      ContactCUr.Code = ContactRelr.ContactCode;
      if (ReadFirstMain(ContactCUr,1,true)) then begin
        RecordCopy(oldContactCUr,ContactCUr);
        ContactCUr.InvAddr0 = CUr.InvAddr0;
        ContactCUr.InvAddr1 = CUr.InvAddr1;
        ContactCUr.InvAddr2 = CUr.InvAddr2;
        ContactCUr.InvAddr3 = CUr.InvAddr3;
        ContactCUr.InvAddr4 = CUr.InvAddr4;
        if (RecordUpdate(oldContactCUr,ContactCUr,false)) then begin
        end;
      end;
      if (ContactRelr.CustName!=CUr.Name) then begin
        RecordCopy(oldContactRelr,ContactRelr);
        ContactRelr.CustName = CUr.Name;
        if (RecordUpdate(oldContactRelr,ContactRelr,false)) then begin
        end;
      end;
    end;
  end;
  TrHs = true;
  ContactRelr.ContactCode = CUr.Code;
  while (LoopKey("ContactCode",ContactRelr,1,TrHs)) begin
    if (ContactRelr.ContactCode!=CUr.Code) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      RecordCopy(oldContactRelr,ContactRelr);
      ContactRelr.ContactName = CUr.Name;
      ContactRelr.ContactPhone = CUr.Phone;
      ContactRelr.ContactMobile = CUr.Mobile;
      ContactRelr.ContactAltPhone = CUr.AltPhone;
      ContactRelr.ContacteMail = CUr.eMail;
      ContactRelr.ContactTitle = CUr.Title;
      ContactRelr.JobTitle = CUr.JobDesc;
      if (RecordUpdate(oldContactRelr,ContactRelr,true)==0) then begin end;
    end;
  end;
  RETURN;
END;

global
updating function Boolean AddContactCUDsmRemote(record CUVc CUr,string custcode)
begin
  Boolean res;
  record ContactRelVc ContactRelr;
  record ContactRelVc oldContactRelr;
  record CUVc ContactCUr;
  
  ContactCUr.Code = custcode;
  if (ReadFirstMain(ContactCUr,1,true)) then begin
    RecordNew(ContactRelr);

    ContactRelr.CustCode = CUr.Code;
    ContactRelr.CustName = CUr.Name;
    
    ContactRelr.ContactCode = ContactCUr.Code;
    ContactRelr.ContactName = ContactCUr.Name;
    ContactRelr.ContactMobile = ContactCUr.Mobile;
    ContactRelr.ContactPhone = ContactCUr.Phone;
    ContactRelr.ContacteMail = ContactCUr.eMail;
    ContactRelr.ContactTitle = ContactCUr.Title;
//    ContactRelr.JobTitle = CUr.JobDesc;
    ContactRelr.JobTitle = ContactCUr.JobDesc;
    RecordCopy(oldContactRelr,ContactRelr);
    if (ReadFirstMain(oldContactRelr,2,true)==false) then begin
      RecordStore(ContactRelr,false);
    end else begin
      RecordCopy(oldContactRelr,ContactRelr);
      ContactRelr.Invalid = 0;
      RecordUpdate(oldContactRelr,ContactRelr,true);
    end;
    res = true;
  end;
  AddContactCUDsmRemote = res;
  return;
end;

global
updating function Boolean NewContactCUDsmRemote(record CUVc CUr,var record CUVc ContactCUr)
BEGIN
  record CUVc lCUr;
  record ContactRelVc ContactRelr;
  Integer wn,nwn;
  string 200 tstr;
  Boolean res;
  
  if (blank(CUr.Code)) then begin
    goto LNewContactCUDsmRemote;
  end;
  RecordNew(ContactCUr);
  RecordNew(ContactRelr);
  if (GetNextCustNr(tstr)) then begin
  end;
  ContactCUr.CustCat = "";
  ContactCUr.Code = tstr;
  ContactCUr.Name = USetStr(2294);
  ContactCUr.InvAddr0 = CUr.InvAddr0;
  ContactCUr.InvAddr1 = CUr.InvAddr1;
  ContactCUr.InvAddr2 = CUr.InvAddr2;
  ContactCUr.InvAddr3 = CUr.InvAddr3;
  ContactCUr.InvAddr4 = CUr.InvAddr4;
  ContactCUr.Phone = CUr.Phone;
  ContactCUr.Fax = CUr.Fax;
  ContactCUr.Department = CUr.Department;
  ContactCUr.CUType = 0;
  ContactCUr.VEType = 0;
  ContactCUr.GuestType = 0;
  ContactCUr.CustType = 1;
  lCUr.Code = ContactCUr.Code;
  if (ReadFirstMain(lCUr,1,true)==false) then begin
    if (RecordStore(ContactCUr,false)) then begin end;
    ContactRelr.CustCode = CUr.Code;
    ContactRelr.CustName = CUr.Name;
    ContactRelr.ContactCode = ContactCUr.Code;
    ContactRelr.ContactName = ContactCUr.Name;
    ContactRelr.ContactMobile = ContactCUr.Mobile;
    ContactRelr.ContactPhone = ContactCUr.Phone;
    ContactRelr.ContacteMail = ContactCUr.eMail;
    ContactRelr.ContactTitle = ContactCUr.Title;
    ContactRelr.JobTitle = ContactCUr.JobDesc;
    if (RecordStore(ContactRelr,false)) then begin end;
    res = true;
  end;
LNewContactCUDsmRemote:;  
  NewContactCUDsmRemote = res;
  RETURN;
END;

global
updating procedure CreateCUObject(var record CUVc CUr,Boolean autof)
begin
  record CustomerSettingBlock CSb;
  record OTVc OTr;
  record ObjVc Objr;
  Boolean testsalesf,testpurchf;
  Integer err;
  
  BlockLoad(CSb);
  testsalesf = false;
  testpurchf = false;
  if (autof) then begin
    if (CSb.AutSalesObject!=0) then begin testsalesf = true; end;
    if (CSb.AutPurchObject!=0) then begin testpurchf = true; end;
  end else begin
    testpurchf = true;
    testpurchf = true;
  end;
  if (testsalesf) and (CUr.CUType!=0) then begin
    OTr.Code = CSb.SalesOTCode;
    ReadFirstMain(OTr,1,true);
    Objr.Code = OTr.Start & CUr.Code;
    if (ReadFirstMain(Objr,1,true)==false) then begin
      Objr.Code = OTr.Start & CUr.Code;
      Objr.Comment = CUr.Name;
      Objr.OTCode = CSb.SalesOTCode;
      if (OTr.Length>0) then begin
        if (len(Objr.Code)!=OTr.Length) then begin
          err = 20444;
        end;
      end;
      if (err!=0) then begin
        MessageBox(err,"");
        Objr.Code = "";
      end else begin
        RecordStore(Objr,false);
      end;
    end;
    CUr.Objects = AddObjectToObjectList(CUr.Objects,Objr.Code);
  end;
  if (testpurchf) and (CUr.VEType!=0) then begin
    OTr.Code = CSb.PurchOTCode;
    ReadFirstMain(OTr,1,true);
    Objr.Code = OTr.Start & CUr.Code;
    if (ReadFirstMain(Objr,1,true)==false) then begin
      Objr.Code = OTr.Start & CUr.Code;
      Objr.Comment = CUr.Name;
      Objr.OTCode = CSb.PurchOTCode;
      RecordStore(Objr,false);
    end;
    CUr.VEObjects = AddObjectToObjectList(CUr.VEObjects,Objr.Code);
  end;
  return;
end;

procedure AddChecks(var val balp,string cust,Integer openf,Integer owncheques,Integer thirdcheques,Integer ioucheques,Integer thirdioucheques)
BEGIN
  record CheckVc Checkr;
  Boolean found;

  switch (openf) begin
    case kCheckTypeEndorsed://should not be taken into account
    case kCheckTypeAccepted:
      found = true;
      Checkr.SerNr = -1;
      Checkr.Openf = openf;
      while (LoopKey("OpenSerNr",Checkr,1,found)) begin
        if (Checkr.CUCode==cust) then begin
          if (owncheques!=0) then begin
            if (Checkr.ChkMode==0) then begin
              balp = balp + Checkr.Amount;         
            end;
          end;
          if (thirdcheques!=0) then begin
            if (Checkr.ChkMode==1) then begin
              balp = balp + Checkr.Amount;         
            end;
          end;
          if (ioucheques!=0) then begin
            if (Checkr.ChkMode==2) then begin
              balp = balp + Checkr.Amount;         
            end;
          end;
          if (thirdioucheques!=0) then begin
            if (Checkr.ChkMode==3) then begin
              balp = balp + Checkr.Amount;         
            end;
          end;
        end;
      end;
  end;
  RETURN;
END;

procedure AddOrderStock(string cust,var val balp,val limit,Boolean limitf)
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  Integer i,rwcnt;
  Boolean TrHs;
  val q,s,sum4,vat,t1;
  record SMVc VATr;
  Integer vatcnt;
  record GeneralOptionBlock GOb;
  
  BlockLoad(GOb);
  TrHs = true;
  ORr.OSFlag = 1;
  ORr.CustCode = cust;
  while (LoopKey("OSCU",ORr,2,TrHs)) begin
    if (ORr.OSFlag!=1) then begin
      TrHs = false;
    end;
    if (ORr.CustCode!=cust) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (ORr.Closed==0) then begin
        if (ORr.InvFlag==2) then begin
          sum4 = blankval;
          SetupVATBase(VATr,vatcnt);
          rwcnt = MatRowCnt(ORr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(ORr,i,ORrw);
            q = ORrw.Quant - ORrw.Invd;
            if (q>0) then begin
              CalcSum(q,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,s,GOb.UseDiscount);
              sum4 = sum4 + s;
              AddVATBase(VATr,ORrw.VATCode,s,blankval,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);              
            end;
          end;
          CalcVATBaseVAT(VATr,ORr.InclVAT,ORr.NoTAXonVAT,vatcnt,vat,t1);
          sum4 = sum4 + vat;
        end else begin
          sum4 = ORr.Sum4;
        end;
        balp = balp + MulRateToBase1(ORr.CurncyCode,sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
        if (limitf) then begin
          if (balp>limit) then begin
            TrHs = false;
          end;
        end;
      end;
    end;  
  end;  
  return;
end;

global
procedure GetFindCustBalance(string cust,LongInt limitdays,var val limit,var val balp,var val duep,var val onacc,Integer based,Integer owncheques,Integer thirdcheques,Integer ioucheques,Integer thirdioucheques,Integer orders,Boolean limitf,var Boolean limitdaysf)
begin
  record ARVc ARr;
  Boolean found;
  val rs;
  LongInt latedays;
  val sum,sum2,rval,sumbooked,sumnow,sumincur,sumdiff;
  record SMVc CurTotalsr;
  record RcVc RepSpec;
  Array string 10 debaccs;
  Array val debbal;
  Integer debcnt;

  if (nonblank(limit)) then begin
    GetOnAccBalance(RepSpec,cust,"",false,1,onacc,sum2,rval,sumbooked,sumnow,sumincur,sumdiff,CurTotalsr,debaccs,debbal,debcnt);
  end;
//  limit = limit - sum;  
  balp = blankval; // Ehh.. blankv
//how can sum be added to limit and balance ?   
  if (duep!=-1) then begin
    duep = blankval;
  end; 
  ARr.CustCode = cust;
  found = true;
  while (LoopKey("CustCode",ARr,1,found)) begin
    if (found) then begin
      if (ARr.CustCode!=cust) then begin
        found = false;
      end;  
    end;  
    if (found) then begin
      rs = ARr.BookRVal;
      balp = balp + rs;
      latedays = DateDiff(ARr.DueDate,CurrentDate);
      if (latedays<0) then begin
        if (duep!=-1) then begin  
          duep = duep + rs;
        end;
        if (limitdays>=0) then begin
          if (limitdays<-latedays) then begin
            limitdaysf = true;
//            found = false; why stopping in 1st late invoices ? others are not balance ? 
          end;
        end;
      end;
      if (limitf) then begin
        switch (based) begin
          case kCreditLimitBasedOnAllOpenInv: if (balp>limit-onacc) then begin found = false; end;
          case kCreditLimitBasedOnOverDueInv: if (duep>limit-onacc) then begin found = false; end;
          case kCreditLimitBasedOnOpenInvSuspendOnOverdue: if (balp>limit-onacc) then begin found = false; end;
        end;
      end;
    end;
  end;
  if (based==kCreditLimitBasedOnAllOpenInv) then begin
  end;
  if (based==kCreditLimitBasedOnOverDueInv) then begin
    balp = duep;
  end;
  if (based==kCreditLimitBasedOnOpenInvSuspendOnOverdue) then begin
    if (limit-onacc>0) then begin
      if (duep>0) then begin
        limit = 0.001;//why overriding limit set on contact card ?  : We suspend credit when there are overdue invoices
      end;
    end;      
  end;
  if (nonblank(limit)) then begin
    if (based==kCreditLimitBasedOnAllOpenInv) and (orders!=0) then begin//due should not take orders into account
      AddOrderStock(cust,balp,limit-onacc,limitf);
    end;
    if (((owncheques!=0) or (thirdcheques!=0) or (ioucheques!=0) or (thirdioucheques!=0)) and (based!=kCreditLimitBasedOnOpenInvSuspendOnOverdue)) then begin
      AddChecks(balp,cust,kCheckTypeAccepted,owncheques,thirdcheques,ioucheques,thirdioucheques);
      AddChecks(balp,cust,kCheckTypeEndorsed,owncheques,thirdcheques,ioucheques,thirdioucheques);
    end;
  end;
LGetFindCustBalance:;  
  RETURN;
END;

global
procedure CUCreditLimit(record CUVc CUr,Date crlimitdate,string type,var val crlimit,var LongInt crlimitdays)
begin
  record CreditLimitVc CLr;
  Boolean found;
  
  crlimit = blankval;
  crlimitdays = blankval;
  CLr.CustCode = CUr.Code;
  switch (type) begin
    case "sales":
      CLr.CreditLimitDate = crlimitdate;
      if (blank(CLr.CreditLimitDate)) then begin
        CLr.CreditLimitDate = CurrentDate;
      end;
      if (ReadLastKey("CreditLimitDate",CLr,2,false)) then begin
        if (CLr.CustCode==CUr.Code) then begin
          crlimit = CLr.CreditLimit;
          crlimitdays = CLr.CreditLimitDays;
          found = true;
        end;
      end;
      if (found==false) then begin
        crlimit = CUr.CreditLimit;
        crlimitdays = CUr.CreditLimitDays;
      end;
    case "purchase":
      CLr.VECreditLimitDate = crlimitdate;
      if (blank(CLr.VECreditLimitDate)) then begin
        CLr.VECreditLimitDate = CurrentDate;
      end;
      if (ReadLastKey("VECreditLimitDate",CLr,2,false)) then begin
        if (CLr.CustCode==CUr.Code) then begin
          crlimit = CLr.VECreditLimit;
          crlimitdays = CLr.VECreditLimitDays;
          found = true;
        end;
      end;
      if (found==false) then begin
        crlimit = CUr.VECreditLimit;
        crlimitdays = CUr.VECreditLimitDays;
      end;
  end;
  return;
end;

global
procedure ContactCreditLimit(string cust,Date crlimitdate,string type,var val crlimit,var LongInt crlimitdays)
begin
  record CUVc CUr;

  CUr.Code = cust;
  if (ReadFirstMain(CUr,1,true)) then begin
    CUCreditLimit(CUr,crlimitdate,type,crlimit,crlimitdays);
  end;
  return;
end;

global
function Boolean GetCustAndBal2(var record CUVc CUp,var val limit,var val balp,Date crd,Integer based,Integer owncheques,Integer thirdcheques,Integer ioucheques,Integer thirdioucheques,Integer orsavewarn,var Boolean limitdaysf)
begin
  record CUVc CUr;
  Boolean res;
  val due,onacc;
  LongInt limitdays;

  res = true;
  limitdaysf = false;
  due = blankval;
  balp = blankval;
  limit = blankval;
  if (ReadFirstMain(CUp,1,true)) then begin
    if (nonblank(CUp.InvoiceToCode)) then begin
      CUr.Code = CUp.InvoiceToCode;
      if (ReadFirstMain(CUr,1,true)) then begin
//        limit = CUr.CreditLimit;
//        limitdays = CUr.CreditLimitDays;
        CUCreditLimit(CUr,crd,"sales",limit,limitdays);
      end;  
      if (blank(limit)==false) or (limitdays>0) then begin
        GetFindCustBalance(CUp.InvoiceToCode,limitdays,limit,balp,due,onacc,based,owncheques,thirdcheques,ioucheques,thirdioucheques,orsavewarn,true,limitdaysf);
      end;
    end else begin
//      limit = CUp.CreditLimit;
//      limitdays = CUp.CreditLimitDays;
      CUCreditLimit(CUp,crd,"sales",limit,limitdays);
      if (blank(limit)==false) or (limitdays>0) then begin
        GetFindCustBalance(CUp.Code,limitdays,limit,balp,due,onacc,based,owncheques,thirdcheques,ioucheques,thirdioucheques,orsavewarn,true,limitdaysf);
      end;
    end;
    limit = limit - onacc;
  end else begin
    CUp.Code = "";
    res = false;
  end;
  GetCustAndBal2 = res;
  return;
end;

global
function Boolean GetCustAndBal(var record CUVc CUp,var val limit,var val balp,Integer based,Integer owncheques,Integer thirdcheques,Integer ioucheques,Integer thirdioucheques,Integer orsavewarn,var Boolean limitdaysf)
begin
  GetCustAndBal = GetCustAndBal2(CUp,limit,balp,CurrentDate,based,owncheques,thirdcheques,ioucheques,thirdioucheques,orsavewarn,limitdaysf);
  return;
end;

global
function Boolean CustomerCanGetCreditTrampoline(string custcode,val sum4,Integer based,Integer owncheques,Integer thirdcheques,Integer ioucheques,Integer thirdioucheques,Integer orsavewarn,var Boolean res)
begin  
  val limit,bal;
  record CUVc CUr;
  Boolean remoteconf,limitdaysf;
  
  remoteconf = true;
  res = true;
  CUr.Code = custcode;
  if (GetCustAndBal(CUr,limit,bal,based,owncheques,thirdcheques,ioucheques,thirdioucheques,orsavewarn,limitdaysf)) then begin
    if (limitdaysf) then begin
      res = false;
    end;
    if (blank(limit)==false) then begin 
      bal = bal + sum4;
      if (bal>limit) then begin
        res = false;
      end;
    end;
  end;
  CustomerCanGetCreditTrampoline = remoteconf;
  return;
end;

global
function Boolean CustomerCanUseLoyaltyCardTrampoline(string custcode,var Boolean res)
begin  
  val limit,bal;
  record CUVc CUr;
  Boolean remoteconf,limitdaysf;
  
  remoteconf = true;
  res = true;
  CustomerCanUseLoyaltyCardTrampoline = remoteconf;
  return;
end;

global
procedure CUVc_PasteInvAddr(var record CUVc CUr,Integer addrfield)
begin
  record CUUserLabelBlock CUUserLb;
  record CountryVc Countryr;
  
  BlockLoad(CUUserLb);
  switch (CUUserLb.CountryAddrLine) begin
    case kCountryAddrLineUserAddr0:
      if (addrfield==0) then begin
        Countryr.Comment = CUr.InvAddr0;
        if (ReadFirstKey("Comment",Countryr,1,true)) then begin
          CUr.InvAddr0 = Countryr.Comment;
          CUr.CountryCode = Countryr.Code;
        end else begin
          Countryr.Code = CUr.InvAddr0;
          if (ReadFirstMain(Countryr,1,true)) then begin
            CUr.InvAddr0 = Countryr.Comment;
            CUr.CountryCode = Countryr.Code;
          end;
        end;
      end;
    case kCountryAddrLineUserAddr1:
      if (addrfield==1) then begin
        Countryr.Comment = CUr.InvAddr1;
        if (ReadFirstKey("Comment",Countryr,1,true)) then begin
          CUr.InvAddr1 = Countryr.Comment;
          CUr.CountryCode = Countryr.Code;
        end else begin
          Countryr.Code = CUr.InvAddr1;
          if (ReadFirstMain(Countryr,1,true)) then begin
            CUr.InvAddr1 = Countryr.Comment;
            CUr.CountryCode = Countryr.Code;
          end;
        end;
      end;
    case kCountryAddrLineUserAddr2:
      if (addrfield==2) then begin
        Countryr.Comment = CUr.InvAddr2;
        if (ReadFirstKey("Comment",Countryr,1,true)) then begin
          CUr.InvAddr2 = Countryr.Comment;
          CUr.CountryCode = Countryr.Code;
        end else begin
          Countryr.Code = CUr.InvAddr2;
          if (ReadFirstMain(Countryr,1,true)) then begin
            CUr.InvAddr2 = Countryr.Comment;
            CUr.CountryCode = Countryr.Code;
          end;
        end;
      end;
    case kCountryAddrLineUserAddr3:
      if (addrfield==3) then begin
        Countryr.Comment = CUr.InvAddr3;
        if (ReadFirstKey("Comment",Countryr,1,true)) then begin
          CUr.InvAddr3 = Countryr.Comment;
          CUr.CountryCode = Countryr.Code;
        end else begin
          Countryr.Code = CUr.InvAddr3;
          if (ReadFirstMain(Countryr,1,true)) then begin
            CUr.InvAddr3 = Countryr.Comment;
            CUr.CountryCode = Countryr.Code;
          end;
        end;
      end;
    case kCountryAddrLineUserAddr4:
      if (addrfield==4) then begin
        Countryr.Comment = CUr.InvAddr4;
        if (ReadFirstKey("Comment",Countryr,1,true)) then begin
          CUr.InvAddr4 = Countryr.Comment;
          CUr.CountryCode = Countryr.Code;
        end else begin
          Countryr.Code = CUr.InvAddr4;
          if (ReadFirstMain(Countryr,1,true)) then begin
            CUr.InvAddr4 = Countryr.Comment;
            CUr.CountryCode = Countryr.Code;
          end;
        end;
      end;
  end;
  return;
end;

global
procedure CUVc_PasteCountryCode(var record CUVc CUr,string OldCountry)
begin
  record CountryVc Countryr;
  record CUUserLabelBlock CUUserLb;

  if (CUr.CountryCode!=OldCountry) then begin
    Countryr.Code = OldCountry;
    if (ReadFirstMain(Countryr,1,true)) then begin
      CUr.Objects = RemoveSetFromSet(Countryr.Objects,CUr.Objects);
    end;
    
    if (nonblank(CUr.CountryCode)) then begin 
      GetCountryName(CUr.CountryCode,CUr.LangCode,CUr.InvCountryName);
    end else begin
      CUr.InvCountryName = "";
    end;     
    Countryr.Code = CUr.CountryCode;
    if (ReadFirstMain(Countryr,1,true)) then begin
      CUr.FreightCode = Countryr.FreightCode;
      CUr.PLCode = Countryr.PLCode;
      CUr.RebCode = Countryr.RebCode;
      if (!SetInSet(Countryr.Objects,CUr.Objects)) then begin
        CUr.Objects = AddStr(CUr.Objects,Countryr.Objects,",");
      end;
      if (blank(CUr.CountryVATNr)) then begin
        CUr.CountryVATNr = Countryr.DefaultVATNr;
      end;
      CUr.ExportFlag = Countryr.ExportFlag;
      BlockLoad(CUUserLb);
      switch (CUUserLb.CountryAddrLine) begin
        case kCountryAddrLineUserAddr0:
          CUr.InvAddr0 = Countryr.Comment;
        case kCountryAddrLineUserAddr1:
          CUr.InvAddr1 = Countryr.Comment;
        case kCountryAddrLineUserAddr2:
          CUr.InvAddr2 = Countryr.Comment;
        case kCountryAddrLineUserAddr3:
          CUr.InvAddr3 = Countryr.Comment;
        case kCountryAddrLineUserAddr4:
          CUr.InvAddr4 = Countryr.Comment;
      end;
    end;
  end;
  return;
end;

global
procedure CUVc_PasteDelCountryCode(var record CUVc CUr,string OldCountry)
begin
  record CountryVc Countryr;

  if (CUr.DelCountry!=OldCountry or blank(OldCountry)) then begin
    if (nonblank(CUr.DelCountry)) then begin 
      GetCountryName(CUr.DelCountry,CUr.LangCode,CUr.DelCountryName);
    end else begin
      CUr.DelCountryName = "";
    end;  
  end;
  return;
end;

global
procedure CUDClassOnOpenWindowRemote(record CUVc CUr,var Integer err,var string errstr,var string gotofield)
begin
  record CCatVc CCatr;

  gotofield = "";
  errstr = "";
  err = 0;
  if (nonblank(CUr.CustCat)) then begin
    CCatr.Code = CUr.CustCat; 
    if (ReadFirstMain(CCatr,1,true)) then begin  
      if (CheckClassInCUVc(CUr,CCatr,errstr)==false) then begin
        err = 1707;
        gotofield = "CustCat";
      end;
    end;
  end;
  return;
end;

global 
function string 255 GetCustomerPriceList(string custcode)
begin
  record CUVc CUr;
  record CCatVc CCatR;
  string 255 res;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = CUr.PLCode; 
    CCatR.Code = CUr.CustCat;
    if (ReadFirstMain(CCatR,1,true)) then begin
      if (blank(res)) then begin
        res = CCatR.PLCode;
      end;
    end;
  end;
  GetCustomerPriceList = res;
  return;
end;
