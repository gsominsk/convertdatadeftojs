external Procedure GetCustName(String,var String);
external procedure AddCurTotalsRow(string,val,val,val,var record SMVc);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure GetDefaultJobCust(LongInt,var String);

procedure ListCreditNotes(LongInt JobNr,String CustCode,var val Total,var val SaldoInv)
begin
  Boolean found,testf;
  record IVVc IVr;
  record IVVc orgIVr;
  
  found = true;
  IVr.JobNr = JobNr;
  while (LoopKey("JobNr",IVr,1,found)) begin
    if (IVr.JobNr!=JobNr) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(CustCode)) then begin
        if (IVr.CustCode!=CustCode) then begin testf = false; end;
      end;
      if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin testf = false; end;
      if (testf) then begin
        orgIVr.SerNr = IVr.CredInv;
        if (ReadFirstMain(orgIVr,1,true)) then begin
          switch (orgIVr.InvType) begin
            case kInvoiceTypeDownpayment:  testf = false;              
          end;
        end;
      end;
      if (testf) then begin
        StartFormat(15);
        OutString(2,"DblJobVc",JobNr,false);
        OutLongInt(4,"Dbl2IVVc",IVr.SerNr,false);
        OutString(5,0,IVr.CustCode,false);
        OutVal(6,0,-IVr.Sum4,M4Val,true);
        OutVal(480,0,-IVr.Sum4,M4Val,true);
        EndFormat;
//        Total = Total - IVr.Sum4;
//        SaldoInv = SaldoInv - IVr.Sum4;
      end;
    end;
  end;
  return;
end;

global
procedure ListInvoicesFromShopBask(LongInt JobNr,String CustCode,Var val Total,Var val SaldoInv,Boolean Displayf)
begin
  record ShopBaskVc ShopBaskp;
  record IVVc IVr;
  Record ARVc ARr;
  LongInt LastIVSerNr;
  Boolean skip,Accs,once;
  String 60 LastCust,DefaultCust,Cust;
  Val OpenAmount;

  LastIVSerNr = -1;
  once= true;
  Accs = true;
  GetDefaultJobCust(JobNr,DefaultCust);
  ShopBaskp.OwnerSerNr = JobNr;
  ShopBaskp.Owner = kShopBaskOwnerReservation;    // 1=Job  
  while (LoopKey("OwnerSerNr",ShopBaskp,2,Accs)) begin
    skip = false;
    if blank(ShopBaskp.CUCode) then begin
      Cust = DefaultCust;
    end else begin
      Cust = ShopBaskp.CUCode;
    end;
    if ((CustCode<>Cust) and nonblank(CustCode)) then begin
      skip = true;
    end;
    if (ShopBaskp.DestinationNr==-1) then begin
      skip = true;
    end;
    if (ShopBaskp.OwnerSerNr<>JobNr) then begin
      Accs = false;
      skip = true;
    end;
    if (not skip) then begin
    
      //LO40 Changed a lot 
      if ((ShopBaskp.DestinationNr<>LastIVSerNr) and (LastIVSerNr<>-1)) then begin
        IVr.SerNr = LastIVSerNr;     
        if readfirstMain(IVr,1,true) then begin
          OpenAmount = 0;
          if (IVr.OKFlag!=0) then begin 
            ARr.InvoiceNr = IVr.SerNr; 
            if (ReadFirstMain(ARr,1,true)) then begin 
              OpenAmount = ARr.RVal;
            end;
          end else begin 
            OpenAmount = IVr.Sum4;
          end;
          if (Displayf) then begin
            if (once) then begin 
               StartFormat(15);
               OutString(0,0,USetStr(11140),false);
               EndFormat;
               StartFormat(15);
               OutString(2,0,USetStr(11141),false);
               OutString(4,0,USetStr(11142),false);
               OutString(5,0,USetStr(11143),false);
               OutString(6,0,USetStr(11144),true);
               OutString(480,0,USetStr(11145),true);
               EndFormat;
               Black_Divider(0,1);
               StartFormat(15);
              once= false;
            end;
            StartFormat(15);
            OutString(2,"DblJobVc",JobNr,false);
            OutLongInt(4,"Dbl2IVVc",LastIVSerNr,false);
            OutString(5,0,IVr.CustCode,false);
            OutVal(6,0,IVr.Sum4,M4Val,true);
            OutVal(480,0,OpenAmount,M4Val,true);
            EndFormat;
          end;  
          Total = Total + IVr.Sum4;
          SaldoInv = SaldoInv + OpenAmount;
        end;
      end;  
      LastIVSerNr = ShopBaskp.DestinationNr;
      LastCust    = ShopBaskp.CUCode;
    end;
  end;
//  if (ShopBaskp.DestinationNr<>LastIVSerNr) then begin what if lastivnnr is equal ordnr
  if (LastIVSerNr!=-1) then begin
    IVr.SerNr = LastIVSerNr;
    if readfirstMain(IVr,1,true) then begin
      OpenAmount = 0;
      if (IVr.OKFlag!=0) then begin 
        ARr.InvoiceNr = IVr.SerNr;
        if (ReadFirstMain(ARr,1,true)) then begin 
          OpenAmount = ARr.RVal;
        end;
      end else begin 
        OpenAmount = IVr.Sum4;
      end;
      if (Displayf) then begin
        if (once) then begin 
          StartFormat(15);
          OutString(0,0,USetStr(11140),false);
          EndFormat;
          StartFormat(15);
          OutString(2,0,USetStr(11141),false);
          OutString(4,0,USetStr(11142),false);
          OutString(5,0,USetStr(11143),false);
          OutString(6,0,USetStr(11144),true);
          OutString(480,0,USetStr(11145),true);
          EndFormat;
          Black_Divider(0,1);
          StartFormat(15);
          once= false;
        end;
        StartFormat(15);
        OutString(2,"DblJobVc",JobNr,false);
        OutLongInt(4,"Dbl2IVVc",LastIVSerNr,false);  //LO mmmmmm !
        OutString(5,0,IVr.CustCode,false);
        OutVal(6,0,IVr.Sum4,M4Val,true);
        OutVal(480,0,OpenAmount,M4Val,true);
        EndFormat;
      end;  
      Total = Total + IVr.Sum4;
      SaldoInv = SaldoInv + OpenAmount;
    end;
  end;    
  ListCreditNotes(JobNr,CustCode,Total,SaldoInv);
  return;
end;
 
 
global 
procedure ListAlreadyInvoiced1(LongInt JobNr,String CustCode,var val Total,var val SaldoInv,Boolean Displayf)
begin
  string 60 ckey;
  Boolean TsHr;
  Record JobVc Jobr;
  
  Total = 0;
  SaldoInv = 0;
  ListInvoicesFromShopBask(JobNr,CustCode,Total,SaldoInv,Displayf);
  TsHr = true;
  ckey = "Mother:" & JobNr;
//  SetLoopPosition(Jobr,0);
  Jobr.Mother = JobNr;
  while(LoopKey(ckey,Jobr,1,TsHr)) begin
    if (Jobr.Mother == JobNr) then begin
       ListInvoicesFromShopBask(Jobr.SerNr,CustCode,Total,SaldoInv,Displayf);
    end else begin
      TsHr = false;
    end;
  end;
  If (Total>0) then begin
    if (Displayf) then begin
      Gray_Divider(400,1);
      StartFormat(15);
      OutString(0,0,USetStr(9977),false);
      OutVal(480,0,SaldoInv,M4Val,true);  
      EndFormat;
    end;
  end;
  return;
end;

global
procedure ListAlreadyInvoiced(LongInt JobNr,String CustCode)
begin
  Val Total,SaldoInv;
  
  ListAlreadyInvoiced1(JobNr,CustCode,Total,SaldoInv,true);
  return;
end;  

procedure PrintPrePayments(LongInt PPaynr,string custcode,var val Total,Boolean Displayf) 
Begin
  record CUVc CUr;
  record ARPayHistVc prep;
  Boolean TsHr,skip,once;
  val t;
  String 255 tstr,Zoom;
  LongInt sign;
  record SMVc CurTotalsr;
   
  Total = 0;
  once= true;
  TsHr = true;
  RecordNew(CurTotalsr);
  prep.CUPNr = PPaynr;
  while (LoopKey("MainKey",prep,1,TsHr)) begin
    Skip = false;
    if (PPaynr <> prep.CUPNr) then begin
       Skip = true;
       TsHr = false;
    end;
    if ((custcode <> prep.CustCode) and nonblank(custcode)) then begin
      Skip = true;
    end;
    If (not Skip) then begin
      CUr.Code = prep.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin end;
      if (prep.FileName=="IVVc") then begin
        sign = -1;
        Zoom = "DblIVVc";
      end else begin
        sign = 1;
        Zoom = "DblIPVc";
      end;
      if (Displayf) then begin
        if (once) then begin
          OutString(0,0,USetStr(11139),false);
          StartFormat(15);
          OutString(0,0,USetStr(7814),false);  
          OutString(65,0,USetStr(7815),false);
          OutString(200,0,USetStr(7816),false);
          OutString(290,0,USetStr(7817),false);
          OutString(385,0,USetStr(7818),false);
          OutString(480,0,USetStr(7819),true);
          EndFormat;
          Black_Divider(0,1);
        end;
        StartFormat(15);
        OutDate(0,0,prep.TransDate,false);
        GetCustName(prep.CustCode,tstr);
        OutString(65,0,Left(tstr,25),false);
        OutString(200,0,prep.CUPNr,false);
        OutString(290,Zoom,prep.SerNr,false);
        OutString(385,0,prep.CurncyCode,false); 
        OutVal(480,0,sign * prep.Val,M4Val,true);     //prep.BookVal    
        EndFormat;
      end;
      t = prep.Val;
      if (blank(CUr.CurncyCode)) then begin
        AddCurTotalsRow(prep.CurncyCode,sign*prep.Val,-1,-1,CurTotalsr);
      end else begin
        CurValToOtherCur(prep.TransDate,prep.CurncyCode,prep.Val,CUr.CurncyCode,t,DefaultCurRoundOff);
      end;
      Total = Total + sign * t;
    end;
  end;  
  Return;
END;

procedure PrintUnOKPrePayments(LongInt PPaynr,string custcode,var val Total,Boolean Displayf) 
Begin
  record CUVc CUr;
  record IPVc IPp;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean TsHr,testf;
  val t;
  String 255 tstr;
   
  TsHr = true;
  IPp.OKFlag = 0;
  IPp.SerNr = 0;
  while (LoopKey("OKMark",IPp,1,TsHr)) begin
    if (IPp.OKMark!=0) then begin
      TsHr = false;
    end;
    testf = true;
    if (TsHr==false) then begin testf = false; end;
    if (testf) then begin
      rwcnt = MatRowCnt(IPp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IPp,i,IPrw);
        if ((IPrw.CustCode==custcode) and (IPrw.CUPNr==PPaynr)) then begin
          if (Displayf) then begin
            StartFormat(15);
            OutDate(0,0,IPp.TransDate,false);
            GetCustName(IPrw.CustCode,tstr);
            OutString(80,0,Left(tstr,25),false);
            OutString(200,0,IPrw.CUPNr,false);
            OutString(290,"DblIPVc",IPp.SerNr,false);
            OutString(380,0,USetStr(9344),true);
            OutString(385,0,IPrw.RecCurncy,false); 
            OutVal(480,0,IPrw.RecVal,M4Val,true);
            EndFormat;
          end;
          t = IPrw.RecVal;
          if (nonblank(CUr.CurncyCode)) then begin
            CurValToOtherCur(IPp.TransDate,IPrw.RecCurncy,IPrw.RecVal,CUr.CurncyCode,t,DefaultCurRoundOff); 
          end;
          Total = Total + t;
        end;
      end;
    end;
  end;  
  Return;
END;

global 
procedure ListAlreadyPaid(LongInt JobNr,String CustCode,var val Total,Boolean Displayf)
begin
  string 60 ckey;
  Boolean TsHr;
  Record JobVc Jobr;
  
  Total = 0;
  PrintPrePayments(JobNr,CustCode,Total,Displayf);
  PrintUnOKPrePayments(JobNr,CustCode,Total,Displayf);
  TsHr = true;
  ckey = "Mother:" & JobNr;
  SetLoopPosition(Jobr,0);
  Jobr.Mother = JobNr;
  while(LoopKey(ckey,Jobr,1,TsHr)) begin
    if (Jobr.Mother == JobNr) then begin
       PrintPrePayments(Jobr.SerNr,CustCode,Total,Displayf);
    end else begin
      TsHr = false;
    end;
  end;
  If (Total>0) then begin
    if (Displayf) then begin
      Gray_Divider(400,1);
      StartFormat(15);
      OutString(0,0,USetStr(7822),false);
      OutVal(480,0,Total ,M4Val,true);  
      EndFormat;
      EndFormat;
    end;  
  end;
  return;
end;

global 
procedure FindCancelledReservationState(var record ReservationStatusVc aRSr)
begin
  Boolean found;
  record ReservationStatusVc RSr;

  RecordClear(aRSr);  
  found = true;
  while (LoopMain(RSr,1,found)) begin
    if (RSr.StatType==2) then begin
      found = false;
      RecordCopy(aRSr,RSr);
    end;
  end;
  return;
end;

global
function Boolean IsCancelState(String Status) 
begin
  record ReservationStatusVc ResStatus;
  Boolean res;
  
  res = false;
  ResStatus.Code = Status;
  if readfirstmain(ResStatus,1,true) then begin
    if (ResStatus.StatType==2) then begin
       res = true;
    end;  
  end;
  IsCancelState = res;
  return;
end;

global
function integer GetPersonsInJob(Record JobVc Jobr)
begin
  Integer p;
  String 20 ckey;
  Record JobVc Kids;
  Boolean TsHr;
  
  p = 0;
  if not IsCancelState(Jobr.ResStatus) then begin
    p = Jobr.Persons;
  end;
  TsHr = true;
  ckey = "Mother:" & Jobr.SerNr;
  SetLoopPosition(Kids,0);
  Kids.Mother = Jobr.SerNr;  
  while(LoopKey(ckey,Kids,1,TsHr)) begin
    if (Kids.Mother == Jobr.SerNr) then begin
       p = p + GetPersonsInJob(Kids);
    end else begin
      TsHr = false;
    end;
  end;
  GetPersonsInJob = p;
  return;
end;  

global
function integer GetRoomsInJob(Record JobVc Jobr)
begin
  Integer p;
  String 20 ckey;
  Record JobVc Kids;
  Boolean TsHr;
  
  p = 0;
  if not IsCancelState(Jobr.ResStatus) then begin
    p = 1;
  end;
  TsHr = true;
  ckey = "Mother:" & Jobr.SerNr;
  SetLoopPosition(Kids,0);
  Kids.Mother = Jobr.SerNr;  
  while(LoopKey(ckey,Kids,1,TsHr)) begin
    if (Kids.Mother == Jobr.SerNr) then begin
       p = p + GetRoomsInJob(Kids);
    end else begin
      TsHr = false;
    end;
  end;
  GetRoomsInJob = p;
  return;
end;  

global
procedure GetEvents(Record JobVc Jobr,Boolean Leaving,var string tstr)
begin
  record ResEventTypeVc ResEventTyper;
  row ResEventTypeVc ResEventTyperw;
  Integer rows,i;
  Record ExcurTypeVc ExcurTyper;
  
  ResEventTyper.SerNr = Jobr.SerNr;
  if readfirstmain(ResEventTyper,1,true) then begin
    goto LGetEvents1;
  end;
  ResEventTyper.SerNr = Jobr.Mother;
  if readfirstmain(ResEventTyper,1,true) then begin
    goto LGetEvents1;
  end;
  goto LGetEvents2;
LGetEvents1:;
  rows = MatRowCnt(ResEventTyper);
  if (rows==0) then begin goto LGetEvents2; end;
  if (Leaving) then begin
    MatRowGet(ResEventTyper,rows-1,ResEventTyperw);
  end else begin
    MatRowGet(ResEventTyper,0,ResEventTyperw);
  end;
  tstr = ResEventTyperw.EventType;
LGetEvents2:;  
  return;
end;

global
updating procedure UpdateJobChilds(Record JobVc Jobr,Record JobVc Jobr2r)
begin
 Record JobVc sJobr;
 Boolean found,Skip,ChangeChilds,res;
 String 30 ckey;
 record HotelBlock HotelSettings;
 
 found = true; 
 ChangeChilds = false;
 
 BlockLoad(HotelSettings);
 // Los Notros Datos Basicos
 if (Jobr.TransDate<> Jobr2r.TransDate) then begin
   ChangeChilds = true;
 end;
 if (Jobr.EndDate<> Jobr2r.EndDate) then begin
   ChangeChilds = true;
 end;
 if (Jobr.StartTime<> Jobr2r.StartTime) then begin
   ChangeChilds = true;
 end;
 if (Jobr.EndTime<> Jobr2r.EndTime) then begin
   ChangeChilds = true;
 end;
 if (Jobr.PriceList<> Jobr2r.PriceList) then begin
   ChangeChilds = true;
 end; 
 if (Jobr.Source<> Jobr2r.Source) then begin
   ChangeChilds = true;
 end;     
 if (Jobr.CUCode<> Jobr2r.CUCode) then begin
   ChangeChilds = true;
 end;   
 if (Jobr.CUName<> Jobr2r.CUName) then begin
   ChangeChilds = true;
 end;    
 if (Jobr.Objects<> Jobr2r.Objects) then begin
   ChangeChilds = true;
 end;   
 if (Jobr.ResStatus<> Jobr2r.ResStatus) then begin
   ChangeChilds = true;
 end;  
 if (Jobr.BookOrigin<>Jobr2r.BookOrigin) then begin
   ChangeChilds = true;
 end;  
 if (Jobr.CustContact<>Jobr2r.CustContact) then begin
   ChangeChilds = true;
 end;  
 if (Jobr.Comment<>Jobr2r.Comment) then begin
   ChangeChilds = true;
 end;  
 if (ChangeChilds) then begin
   ckey = "Mother:" & Jobr.SerNr;
   SetLoopPosition(sJobr,0);
   sJobr.Mother = Jobr.SerNr;  
   while(LoopKey(ckey,sJobr,1,found)) begin
     Skip= false;
    
     if (Jobr.SerNr<>sJobr.Mother) then begin
       found= true;
       Skip = true;
     end;
     if IsCancelState(sJobr.ResStatus) then begin
       Skip = true;
     end;
     if (Jobr.ResStatus <> Jobr2r.ResStatus) then begin
       if ((HotelSettings.ChInSt==Jobr.ResStatus) or (HotelSettings.ChOutSt==Jobr.ResStatus)) then begin
         if (sJobr.TransDate<>Jobr2r.TransDate) then begin //Because of change of rooms for example
           Skip = true;
         end;       
         if (sJobr.EndDate<>Jobr2r.EndDate) then begin
           Skip = true;
         end;
       end;  
     end;
     if (not Skip) then begin
        if ((sJobr.EndDate==Jobr2r.EndDate) and (sJobr.TransDate==Jobr2r.TransDate)) then begin
          sJobr.TransDate = Jobr.TransDate;
          sJobr.EndDate   = Jobr.EndDate;
          sJobr.StartTime = Jobr.StartTime;
          sJobr.EndTime   = Jobr.EndTime;
        end;  
        sJobr.PriceList = Jobr.PriceList;
        sJobr.ResUsage = Jobr.ResUsage;
        sJobr.Source = Jobr.Source;
        sJobr.CUCode = Jobr.CUCode;
        sJobr.CUName = Jobr.CUName;
        sJobr.Objects = Jobr.Objects;
        if IsCancelState(Jobr.ResStatus) then begin
          sJobr.ResStatus = Jobr.ResStatus;
        end;
        sJobr.SourceName = Jobr.SourceName;
        sJobr.BookOrigin = Jobr.BookOrigin;
        sJobr.CustContact = Jobr.CustContact;
        sJobr.Comment = Jobr.Comment;
        res = RecordStore(sJobr,true);
     end;
   end; // while
 end; // if
 
 return;
end;

