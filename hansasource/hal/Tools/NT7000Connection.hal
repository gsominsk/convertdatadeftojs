external function string 255 FindINObjects(string,string);
external function Boolean PUVc_PasteVECode(var record PUVc);
external function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external procedure PUSumUp(var record PUVc);
external updating function Boolean SetNewQuantityOnStockMov(LongInt,string,val,var Integer);
external procedure StockMovSumUp(var record StockMovVc);
external procedure GetINCostAcc(record INVc,var string);
external procedure SDSumUp(var record SDVc);
external function Boolean FindNextManualForkLiftQue(var record ForkLiftQueVc,LongInt);
external function string 20 FindFreePositionInLocArea(record INVc,string,record LocationVc,string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external updating function Boolean SetNewPositionOnStockMov(LongInt,Boolean,string);
external updating procedure SetPositionStatus(string,Integer);
external function string 20 FindPositionWithItem(string,string,val,string);
external updating function Integer ForkLift_OKStockMovement(LongInt);
external function Boolean FindNextToSendToForkLiftQue(var record ForkLiftQueVc);
external function string 255 NumToHex(string);

//on server

procedure LogQMessage(string tstr)
BEGIN
  string 255 tmpstr;
  
  if (OpenExportFile("nt7000errors.txt",true)) then begin
    tmpstr = CurrentDate;
    ExportPadString(tmpstr,len(tmpstr)+2," ",false);
    tmpstr = CurrentTime;
    ExportPadString(tmpstr,len(tmpstr)+2," ",false);
    ExportPadString(tstr,len(tstr)," ",false);
    ExportPadString(chr(13) & chr(10),2," ",false);
    CloseFile;
  end;
  RETURN;
END;

global
procedure SendQMessageToNT7000(Integer messid,Integer prio,Integer forkliftid,string location,string FrPosCode,string ToPosCode,Integer QueType)
BEGIN
  Area nt;
  record LocationVc Locr;
  
  if (QueType==0) then begin//picking mode
    Locr.Code = location;
    ReadFirstMain(Locr,1,true);
    if (Locr.WHMForkLiftSystem!=1) then begin goto LSendQMessageToNT7000; end;
  end;

  AddIntToArea(asc("q"),nt); // allways q
  AddIntToArea(12,nt);       // number of bytes following (always 10)
  AddByteToArea(10,nt);      // transport structure, this does not change.
  
  switch (prio) begin
    case 1: AddByteToArea(1,nt);
    case 2: AddByteToArea(2,nt);
    case 5: AddByteToArea(5,nt);       // priority, fast delivery is higher prio than others
    otherwise AddByteToArea(0,nt);
  end;
  
  AddIntToArea(messid,nt);

  AddIntToArea(forkliftid,nt);
  AddIntToArea(StringToInt(FrPosCode),nt);
  AddIntToArea(StringToInt(ToPosCode),nt);
  AddIntToArea(0,nt);
  SendNT7000(nt);
LSendQMessageToNT7000:;
  RETURN;
END;

procedure GetOrderStatus(string ForkLiftSystemID,Integer QueType)
BEGIN
  Integer forkliftid;
  
  forkliftid = StringToInt(ForkLiftSystemID);
  SendQMessageToNT7000(18,0,forkliftid,"","","",QueType);
  return;
end;

procedure CancelTransportOrder(string ForkLiftSystemID,Integer QueType)
BEGIN
  Integer forkliftid;
  
//  LogQMessage("CancelTransportOrder " & ForkLiftSystemID);//testcode
  if (nonblank(ForkLiftSystemID)) then begin
    forkliftid = StringToInt(ForkLiftSystemID);
    SendQMessageToNT7000(16,0,forkliftid,"","","",QueType);
  end;
  return;
end;

procedure PickingSendNewOrder(Integer FullPallet,string location,string FrPosCode,string ToPosCode,string ForkLiftSystemID,Integer prio,Integer QueType)
BEGIN
  Integer forkliftid;
  string 20 frpos;
  record PosVc emptypalletstockPosr;
  record LocationVc Locr;

  Locr.Code = location;
  ReadFirstMain(Locr,1,true);
  if (Locr.RequirePos==0) then begin goto LPickingSendNewOrder; end;
  
  if (FullPallet==0) then begin
    emptypalletstockPosr.Location = Locr.Code;
    emptypalletstockPosr.LocArea = Locr.WHMPalletArea;
    if (ReadFirstKey("LocArea",emptypalletstockPosr,2,true)) then begin  
      frpos = emptypalletstockPosr.Code;
    end;
  end else begin
    frpos = FrPosCode;
  end;
  forkliftid = StringToInt(ForkLiftSystemID);
  SendQMessageToNT7000(12,prio,forkliftid,location,frpos,ToPosCode,QueType);
LPickingSendNewOrder:;  
  return;
end;

procedure FullAutomaticSendNewOrder(string location,string FrPosCode,string ToPosCode,string ForkLiftSystemID,Integer prio)
BEGIN
  Integer forkliftid;
  
  forkliftid = StringToInt(ForkLiftSystemID);
  SendQMessageToNT7000(11,prio,forkliftid,location,FrPosCode,ToPosCode,1);
  return;
end;

procedure SendNewSource(string location,string FrPosCode,string ForkLiftSystemID,Integer prio,Integer QueType)
BEGIN
  Integer forkliftid;
  
//  LogQMessage("SendNewSource " & ForkLiftSystemID & " FrPosCode " & FrPosCode);//testcode
  forkliftid = StringToInt(ForkLiftSystemID);
  SendQMessageToNT7000(13,prio,forkliftid,location,FrPosCode,"",QueType);
  return;
end;

procedure FinishPickingMode(string location,string ForkLiftSystemID,Integer QueType)
BEGIN
  Integer forkliftid;

  if (nonblank(ForkLiftSystemID)) then begin
    forkliftid = StringToInt(ForkLiftSystemID);
    SendNewSource(location,"",forkliftid,0,QueType);
  end;
  return;
end;

procedure SendNewDestinantion(string location,string ToPosCode,string ForkLiftSystemID,Integer prio,Integer QueType)
BEGIN
  Integer forkliftid;
  
//  LogQMessage("SendNewDestinantion " & ForkLiftSystemID & " ToPosCode " & ToPosCode);//testcode
  forkliftid = StringToInt(ForkLiftSystemID);
  SendQMessageToNT7000(14,prio,forkliftid,location,ToPosCode,"",QueType);
  return;
end;

procedure PickingSendNewSource(string location,string FrPosCode,string ForkLiftSystemID,Integer prio,Integer QueType)
BEGIN
  Integer forkliftid;
  
  forkliftid = StringToInt(ForkLiftSystemID);
  SendQMessageToNT7000(15,prio,forkliftid,location,FrPosCode,"",QueType);
  return;
end;

updating procedure SetForkLiftStatus(string code,Integer stat)
BEGIN
  record ForkLiftVc ForkLiftr;
  record ForkLiftVc oldForkLiftr;

  ForkLiftr.Code = code;
  if (ReadFirstMain(ForkLiftr,1,true)) then begin
    RecordCopy(oldForkLiftr,ForkLiftr);
    if (ForkLiftr.Mode!=stat) then begin
      ForkLiftr.Mode = stat;
      if (RecordUpdate(oldForkLiftr,ForkLiftr,false)==0) then begin 
      end;
    end;
  end;
  RETURN;
END;

updating procedure SetForkLiftQueStatus(record ForkLiftQueVc ForkLiftQuer,Integer status,string comment)
BEGIN
  record ForkLiftQueVc oldForkLiftQuer;
  Integer flid;
  record NT7000NumbersVc NTNr;
  record NT7000NumbersVc oldNTNr;

  RecordCopy(oldForkLiftQuer,ForkLiftQuer);
  ForkLiftQuer.Status = status;
  if (status==1) then begin
    ForkLiftQuer.Attempts = ForkLiftQuer.Attempts + 1;
  end;
  if (blank(ForkLiftQuer.ForkLiftSystemID)) then begin
    NTNr.Location = ForkLiftQuer.FrLocation;
    ReadFirstMain(NTNr,1,true);
    RecordCopy(oldNTNr,NTNr);
    if (ForkLiftQuer.QueType!=0) then begin
      if (NTNr.LastAutomaticNr<0) then begin NTNr.LastAutomaticNr = 0; end;
      if (NTNr.LastAutomaticNr>=9999) then begin NTNr.LastAutomaticNr = 0; end;
      NTNr.LastAutomaticNr  = NTNr.LastAutomaticNr + 1;
      ForkLiftQuer.ForkLiftSystemID = NTNr.LastAutomaticNr;
    end else begin
      if (NTNr.LastPickingNr<10001) then begin NTNr.LastPickingNr = 10000; end;
      if (NTNr.LastPickingNr>=19999) then begin NTNr.LastPickingNr = 10000; end;
      NTNr.LastPickingNr  = NTNr.LastPickingNr + 1;
      ForkLiftQuer.ForkLiftSystemID = NTNr.LastPickingNr;
    end;
    RecordUpdate(oldNTNr,NTNr,true);
  end;
  if (ForkLiftQuer.Attempts>=5) then begin
    ForkLiftQuer.Status = 3;
  end;
  ForkLiftQuer.Comment = comment;
  if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,true)==0) then begin end;
  RETURN;
END;

updating function Integer OKStockMovementFromThisPickingOrder(string ForkLiftSystemID,Integer ForkLiftSystem)
BEGIN
  Integer err;
  record ForkLiftQueVc ForkLiftQuer;
  Boolean TrHs,testf;
  Integer cnt;

LAgainOKStockMovement:;  
  TrHs = true;
  RecordNew(ForkLiftQuer);
  ResetLoop(ForkLiftQuer);
  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 2;//1 jarek
  while (LoopKey("ForkLiftSystemID",ForkLiftQuer,3,TrHs)) begin
    if (ForkLiftQuer.ForkLiftSystemID!=ForkLiftSystemID) then begin TrHs = false; end;
    if (ForkLiftQuer.QueType!=0) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=2) then begin TrHs = false; end;
    testf = true;
    if (ForkLiftQuer.Done==0) then begin testf = false; end;
    if (TrHs and testf) then begin
      err = ForkLift_OKStockMovement(ForkLiftQuer.StockMovNr);
      if (err!=0) then begin
        SetForkLiftQueStatus(ForkLiftQuer,3,USetStr(1742) & ": " & USetStr(err));
      end else begin
        StepBack(ForkLiftQuer);
//        goto LAgainOKStockMovement;
      end;
    end;
  end;
LOKStockMovementFromThisPickingOrder:;  
  OKStockMovementFromThisPickingOrder = err;
  RETURN;
END;

updating procedure NT7000LoadDisappearedFromForkLift(LongInt ForkLiftSystemID)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;

/*
    SetForkLiftQueStatus(ForkLiftQuer,3,"");
*/    

  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  if (ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true)) then begin 
    CancelTransportOrder(ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
  end;
  RETURN;
END;

updating procedure NT7000InternalError(LongInt ForkLiftSystemID)
BEGIN
//do nothing
  RETURN;
END;

updating procedure AssignForkLift(LongInt SHNr,string forklift) 
BEGIN
  Boolean TrHs;
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  
  if (SHNr>=0) and (nonblank(forklift) and (StringToInt(forklift)!=0)) then begin
    TrHs = true;
    ForkLiftQuer.SHNr = SHNr;
    while (LoopKey("SHNr",ForkLiftQuer,1,TrHs)) begin
      if (ForkLiftQuer.SHNr!=SHNr) then begin TrHs = false; end;
      if (TrHs) then begin
        RecordCopy(oldForkLiftQuer,ForkLiftQuer);
        ForkLiftQuer.ForkLift = forklift;
        if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)==0) then begin end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure NT7000TransportOrderAccepted(LongInt ForkLiftSystemID)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  
//  LogQMessage("NT7000TransportOrderAccepted " & " ForkLiftSystemID=" & ForkLiftSystemID);//testcode
  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  if (ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true)) then begin 
    SetForkLiftQueStatus(ForkLiftQuer,2,"");
  end;  
  RETURN;
END;

updating procedure NT7000ForkLiftAtPickingPosition(LongInt ForkLiftSystemID)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  Boolean found;

  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 1;
  found = ReadLastKey("ForkLiftSystemID",ForkLiftQuer,3,true);
  if (found==false) then begin
    ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
    found = ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true);
  end;
  if (found) then begin
    if (ForkLiftQuer.QueType==0) then begin
      SetForkLiftQueStatus(ForkLiftQuer,2,"");
    end;
  end;  
  RETURN;
END;

updating procedure SetNextInQueToBeReady_Automatic(string location,string frposcode,Boolean pickedfromsourcef)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc testForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  Boolean found,testf;
  record LocationVc Locr;
  
  Locr.Code = location;
  ReadFirstMain(Locr,1,true);   
  if (Locr.RequirePos==0) then begin goto LSetNextInQueToBeReady_Automatic; end;

  ForkLiftQuer.FrLocation = location;
  ForkLiftQuer.FrPosCode = frposcode;
  ForkLiftQuer.QueType = 2;
  ForkLiftQuer.Status = 10;
  found = ReadFirstKey("FrPosTypeStatus",ForkLiftQuer,4,true);
  if (found) then begin
    testForkLiftQuer.FrLocation = location;
    testForkLiftQuer.FrPosCode = frposcode;
    testForkLiftQuer.QueType = 2;
    testForkLiftQuer.Status = 0;
    testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
    if (testf==false) then begin
      testForkLiftQuer.FrLocation = location;
      testForkLiftQuer.FrPosCode = frposcode;
      testForkLiftQuer.QueType = 2;
      testForkLiftQuer.Status = 1;
      testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
      if (testf==false) then begin
        if (pickedfromsourcef==false) then begin
          testForkLiftQuer.FrLocation = location;
          testForkLiftQuer.FrPosCode = frposcode;
          testForkLiftQuer.QueType = 2;
          testForkLiftQuer.Status = 2;
          testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
          if (testf) then begin found = false; end;
        end;
      end else begin
        found = false;
      end;
    end else begin
      found = false;
    end;
    if (found) then begin
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);
      ForkLiftQuer.Status = 0;
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin
      end;
    end;
  end;    
   
  ForkLiftQuer.FrLocation = location;
  ForkLiftQuer.FrPosCode = Locr.WHMDefPUPosCode;
  ForkLiftQuer.QueType = 2;
  ForkLiftQuer.Status = 10;
  found = ReadFirstKey("FrPosTypeStatus",ForkLiftQuer,4,true);
  if (found) then begin
    testForkLiftQuer.FrLocation = location;
    testForkLiftQuer.FrPosCode = Locr.WHMDefPUPosCode;
    testForkLiftQuer.QueType = 2;
    testForkLiftQuer.Status = 0;
    testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
    if (testf==false) then begin
      testForkLiftQuer.FrLocation = location;
      testForkLiftQuer.FrPosCode = Locr.WHMDefPUPosCode;
      testForkLiftQuer.QueType = 2;
      testForkLiftQuer.Status = 1;
      testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
      if (testf==false) then begin
        if (pickedfromsourcef==false) then begin
          testForkLiftQuer.FrLocation = location;
          testForkLiftQuer.FrPosCode = Locr.WHMDefPUPosCode;
          testForkLiftQuer.QueType = 2;
          testForkLiftQuer.Status = 2;
          testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
          if (testf) then begin found = false; end;
        end;
      end else begin
        found = false;
      end;
    end else begin
      found = false;
    end;
    if (found) then begin
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);
      ForkLiftQuer.Status = 0;
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin
      end;
    end;
  end;
  
  ForkLiftQuer.FrLocation = location;
  ForkLiftQuer.FrPosCode = Locr.WHMDefProdPosCode;
  ForkLiftQuer.QueType = 2;
  ForkLiftQuer.Status = 10;
  found = ReadFirstKey("FrPosTypeStatus",ForkLiftQuer,4,true);
  if (found) then begin
    testForkLiftQuer.FrLocation = location;
    testForkLiftQuer.FrPosCode = Locr.WHMDefProdPosCode;
    testForkLiftQuer.QueType = 2;
    testForkLiftQuer.Status = 0;
    testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
    if (testf==false) then begin
      testForkLiftQuer.FrLocation = location;
      testForkLiftQuer.FrPosCode = Locr.WHMDefProdPosCode;
      testForkLiftQuer.QueType = 2;
      testForkLiftQuer.Status = 1;
      testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
      if (testf==false) then begin
        if (pickedfromsourcef==false) then begin
          testForkLiftQuer.FrLocation = location;
          testForkLiftQuer.FrPosCode = Locr.WHMDefProdPosCode;
          testForkLiftQuer.QueType = 2;
          testForkLiftQuer.Status = 2;
          testf = ReadFirstKey("FrPosTypeStatus",testForkLiftQuer,4,true);
          if (testf) then begin found = false; end;
        end;
      end else begin
        found = false;
      end;
    end else begin
      found = false;
    end;
    if (found) then begin
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);
      ForkLiftQuer.Status = 0;
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin
      end;
    end;
  end;
LSetNextInQueToBeReady_Automatic:;  
  RETURN;
END;

global
updating procedure NT7000LoadPickedupFromSourcePosition(LongInt ForkLiftSystemID,string forklift)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc nextForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  Boolean found;
  
  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 1;
  found = ReadLastKey("ForkLiftSystemID",ForkLiftQuer,3,true);
  if (found==false) then begin
    ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
    found = ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true);
  end;
  if (found) then begin
    if (ForkLiftQuer.QueType==0) then begin
      SetForkLiftQueStatus(ForkLiftQuer,2,"");
      AssignForkLift(ForkLiftQuer.SHNr,forklift);    
    end else begin
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);
      ForkLiftQuer.ForkLift = forklift;
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin
      end;
    end;
    if (StringToInt(forklift)>0) then begin
      SetNextInQueToBeReady_Automatic(ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,true);
    end;
  end;
LNT7000LoadPickedupFromSourcePosition:;  
  RETURN;
END;
    
updating procedure NT7000TransportOrderDelivered(LongInt ForkLiftSystemID,Integer ForkLiftSystem)
BEGIN
  record ForkLiftQueVc sentForkLiftQuer;
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc nextForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  Boolean found;
  Integer err;
  string 50 frposcode,frpos;
  record PosVc emptypalletstockPosr;
  record LocationVc Locr;
  
  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  if (ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true)) then begin 
    Locr.Code = ForkLiftQuer.FrLocation;
    ReadFirstMain(Locr,1,true);

    frposcode = ForkLiftQuer.FrPosCode;
    if (ForkLiftQuer.QueType==0) then begin    
      err = OKStockMovementFromThisPickingOrder(ForkLiftQuer.ForkLiftSystemID,ForkLiftSystem);
      if (err==0) then begin//noerr
//LogQMessage("odel 1.ForkLiftQuer.SerNr " & " ForkLiftQuer.SerNr ");//testcode
        if (FindNextManualForkLiftQue(nextForkLiftQuer,ForkLiftQuer.SHNr)==false) then begin
          found = FindNextToSendToForkLiftQue(nextForkLiftQuer);
//LogQMessage("odel 2.ForkLiftQuer.SerNr " & " ForkLiftQuer.SerNr " & nextForkLiftQuer.SerNr & " nextForkLiftQuer.SerNr ");//testcode
          if (found) then begin  
            if (nextForkLiftQuer.QueType==0) then begin
              found = false;
              sentForkLiftQuer.SHNr = nextForkLiftQuer.SHNr;
              sentForkLiftQuer.QueType = 0;
              sentForkLiftQuer.Status = 2;
              if (ReadFirstKey("SHNr",sentForkLiftQuer,3,true)==false) then begin     
                sentForkLiftQuer.SHNr = nextForkLiftQuer.SHNr;
                sentForkLiftQuer.QueType = 0;
                sentForkLiftQuer.Status = 1;
                if (ReadFirstKey("SHNr",sentForkLiftQuer,3,true)==false) then begin     
                  found = true;
                end;
              end;
              if (found) then begin
                if (ForkLiftSystem==2) then begin goto LNT7000TransportOrderDelivered; end;
                
                if (blank(ForkLiftQuer.ForkLiftSystemID)) then begin
                  goto LNT7000TransportOrderDelivered;
                end else begin
                  RecordCopy(oldForkLiftQuer,nextForkLiftQuer);
                  nextForkLiftQuer.ForkLiftSystemID = ForkLiftQuer.ForkLiftSystemID;
                  nextForkLiftQuer.NextInPickMode = 1;
                  nextForkLiftQuer.Status = 1;
                  if (RecordUpdate(oldForkLiftQuer,nextForkLiftQuer,false)) then begin end;
//LogQMessage("odel 3.ForkLiftQuer.SerNr " & " ForkLiftQuer.SerNr " & nextForkLiftQuer.SerNr & " nextForkLiftQuer.SerNr ");//testcode
                end;
                
                if (nextForkLiftQuer.FullPallet==0) then begin
                  emptypalletstockPosr.Location = Locr.Code;
                  emptypalletstockPosr.LocArea = Locr.WHMPalletArea;
                  if (ReadFirstKey("LocArea",emptypalletstockPosr,2,true)) then begin  
                    frpos = emptypalletstockPosr.Code;
                  end;
                end else begin
                  frpos = nextForkLiftQuer.FrPosCode;
                end;
                
                PickingSendNewSource(nextForkLiftQuer.FrLocation,frpos,nextForkLiftQuer.ForkLiftSystemID,0,nextForkLiftQuer.QueType);
                goto LNT7000TransportOrderDelivered;
              end;
            end;
          end;
          if (found==false) then begin        
            FinishPickingMode(ForkLiftQuer.FrLocation,ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
          end;
        end else begin
          RecordCopy(oldForkLiftQuer,nextForkLiftQuer);
          nextForkLiftQuer.ForkLiftSystemID = ForkLiftQuer.ForkLiftSystemID;
          if (RecordUpdate(oldForkLiftQuer,nextForkLiftQuer,false)) then begin end;
        end;
      end else begin
        FinishPickingMode(ForkLiftQuer.FrLocation,ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
      end;
    end else begin
      err = ForkLift_OKStockMovement(ForkLiftQuer.StockMovNr);
      if (err==0) then begin//noerr
      end else begin
        SetForkLiftQueStatus(ForkLiftQuer,3,USetStr(1742) & ": " & USetStr(err));
      end;
    end;
    SetNextInQueToBeReady_Automatic(ForkLiftQuer.FrLocation,frposcode,false);
  end;
LNT7000TransportOrderDelivered:;  
  RETURN;
END;
    
updating procedure NT7000DestPosOccupiedOrNotReady(LongInt ForkLiftSystemID)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  record INVc INr;
  Boolean notnewdestposf;
  string 20 locarea;
  record LocationVc Locr;
  
  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  if (ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true)) then begin 
    Locr.Code = ForkLiftQuer.ToLocation;
    ReadFirstMain(Locr,1,true);
    if (Locr.RequirePos==0) then begin notnewdestposf = true; end;
    if (ForkLiftQuer.ToPosCode==Locr.WHMWraperPosCode) then begin notnewdestposf = true; end;
    if (ForkLiftQuer.ToPosCode==Locr.WHMDeliveryPosCode) then begin notnewdestposf = true; end;
    if (notnewdestposf) then begin goto LNT7000DestPosOccupiedOrNotReady; end;
    
    RecordCopy(oldForkLiftQuer,ForkLiftQuer);
    if (ForkLiftQuer.QueType!=0) then begin
      if (ForkLiftQuer.Attempts>=5) then begin
        ForkLiftQuer.Status = 3;        
        ForkLiftQuer.Comment = "NT7000DestPosOccupiedOrNotReady-1";        
        CancelTransportOrder(ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
        goto Ldestnotready;
      end;      
    end;
    SetPositionStatus(oldForkLiftQuer.ToPosCode,3);        
    if (ReadFirstItem(ForkLiftQuer.ArtCode,INr,true,true)) then begin end;
    locarea = INr.LocArea;
    if (ForkLiftQuer.QueType==1) then begin
      locarea = Locr.WHMDeliveryArea;
    end;
    ForkLiftQuer.ToPosCode = FindFreePositionInLocArea(INr,locarea,Locr,ForkLiftQuer.FrPosCode,ForkLiftQuer.ToPosCode);
    if (blank(ForkLiftQuer.ToPosCode)) or (ForkLiftQuer.ToPosCode==oldForkLiftQuer.ToPosCode) then begin
      ForkLiftQuer.Status = 3;      
      ForkLiftQuer.Comment = "NT7000DestPosOccupiedOrNotReady-2";        
      if (blank(ForkLiftQuer.ToPosCode)) then begin
        ForkLiftQuer.ToPosCode = oldForkLiftQuer.ToPosCode;
      end;
      CancelTransportOrder(ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
      goto Ldestnotready;
    end else begin
      if (SetNewPositionOnStockMov(ForkLiftQuer.StockMovNr,false,ForkLiftQuer.ToPosCode)) then begin
        ForkLiftQuer.Attempts = ForkLiftQuer.Attempts + 1;
        SetPositionStatus(ForkLiftQuer.ToPosCode,2);        
        SendNewDestinantion(ForkLiftQuer.FrLocation,ForkLiftQuer.ToPosCode,ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
      end else begin
        ForkLiftQuer.Status = 3;
        ForkLiftQuer.ToPosCode = oldForkLiftQuer.ToPosCode;
        ForkLiftQuer.Comment = "NT7000DestPosOccupiedOrNotReady-3";        
      end;
    end;
Ldestnotready:;      
    if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)==0) then begin end;
  end;
LNT7000DestPosOccupiedOrNotReady:;  
  RETURN;
END;

updating procedure NT7000TransportOrderDeleted(LongInt ForkLiftSystemID)
BEGIN
/*
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;

  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  if (ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true)) then begin 
  end;
*/  
  RETURN;
END;

updating procedure NT7000SourcePosEmptyOrNotReady(LongInt ForkLiftSystemID)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  Boolean notnewsourceposf;
  record LocationVc Locr;
        
  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  if (ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true)) then begin 
    Locr.Code = ForkLiftQuer.FrLocation;
    ReadFirstMain(Locr,1,true);
    if (Locr.RequirePos==0) then begin notnewsourceposf = true; end;
    if (ForkLiftQuer.FrPosCode==Locr.WHMDefPUPosCode) then begin notnewsourceposf = true; end;
    if (ForkLiftQuer.FrPosCode==Locr.WHMDefProdPosCode) then begin notnewsourceposf = true; end;
    if (notnewsourceposf) then begin goto LNT7000SourcePosEmptyOrNotReady; end;
  
    RecordCopy(oldForkLiftQuer,ForkLiftQuer);
    if (ForkLiftQuer.Attempts>=5) then begin
      ForkLiftQuer.Status = 3;
      ForkLiftQuer.Comment = "NT7000SourcePosEmptyOrNotReady-1";        
      if ((ForkLiftQuer.QueType!=0) and (ForkLiftQuer.Status==2)) then begin
        CancelTransportOrder(ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
      end;
      goto Lsourceempty;
    end;

    SetPositionStatus(oldForkLiftQuer.FrPosCode,3);
    ForkLiftQuer.FrPosCode = FindPositionWithItem(ForkLiftQuer.ArtCode,ForkLiftQuer.FrLocation,ForkLiftQuer.Quant,ForkLiftQuer.FrPosCode);
    if (blank(ForkLiftQuer.FrPosCode)) or (ForkLiftQuer.FrPosCode==oldForkLiftQuer.FrPosCode) then begin
      ForkLiftQuer.Status = 3;
      ForkLiftQuer.Comment = "NT7000SourcePosEmptyOrNotReady-2";        
      if (blank(ForkLiftQuer.FrPosCode)) then begin
        ForkLiftQuer.FrPosCode = oldForkLiftQuer.FrPosCode;
      end;
      CancelTransportOrder(ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
      goto Lsourceempty;
    end else begin
      if (SetNewPositionOnStockMov(ForkLiftQuer.StockMovNr,true,ForkLiftQuer.FrPosCode)) then begin
        ForkLiftQuer.Attempts = ForkLiftQuer.Attempts + 1;
        SendNewSource(ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
        if (ForkLiftQuer.Attempts>=5) then begin
          ForkLiftQuer.Status = 3;
        end;        
      end else begin
        ForkLiftQuer.Status = 3;
        ForkLiftQuer.FrPosCode = oldForkLiftQuer.FrPosCode;
        ForkLiftQuer.Comment = "NT7000SourcePosEmptyOrNotReady-3";        
      end;
    end;
Lsourceempty:;      
    if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)==0) then begin end;
  end;
LNT7000SourcePosEmptyOrNotReady:;  
  RETURN;
END;

global
updating procedure NT7000WrongTransportOrder(LongInt ForkLiftSystemID)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  
  ForkLiftQuer.ForkLiftSystemID = ForkLiftSystemID;
  if (ReadFirstKey("ForkLiftSystemID",ForkLiftQuer,1,true)) then begin 
    if (ForkLiftQuer.QueType!=0) then begin
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);
      ForkLiftQuer.ForkLiftSystemID = "";
      ForkLiftQuer.Status = 0;
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin end;
      
      SetForkLiftQueStatus(ForkLiftQuer,1,"");
      FullAutomaticSendNewOrder(ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,ForkLiftQuer.ToPosCode,ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QuePriority);
    end else begin
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);
      ForkLiftQuer.ForkLiftSystemID = "";
      ForkLiftQuer.Status = 0;
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin end;

      SetForkLiftQueStatus(ForkLiftQuer,1,"");
      PickingSendNewOrder(ForkLiftQuer.FullPallet,ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,"",ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
    end;
  end;
  RETURN;
END;

/*l1-Magic  l2-Magic_2  l3-Magic_3 */
global 
updating procedure ReceiveNT7000(LongInt l1,LongInt l2,LongInt l3)
BEGIN
  string 4 sl1,sl2,sl3;
  string 2 sl1b1,sl2b1,sl3b1,sl1b2,sl2b2,sl3b2;


  sl1 = NumToHex(l1);
  sl2 = NumToHex(l2);
  sl3 = NumToHex(l3);
  sl1b1 = Left(sl1,2); sl1b2 = Right(sl1,2);
  sl2b1 = Left(sl2,2); sl2b2 = Right(sl2,2);
  sl3b1 = Left(sl3,2); sl3b2 = Right(sl3,2);

//          LogQMessage("ReceiveNT7000 " & " transport order=" & l3 & " sl1b2=" & sl1b2 & " sl2b2=" & sl2b2);//testcode
  switch (sl1b2) begin
    case "63":; //just nothing //99 dec
    case "6E": //110 dec
      SendQMessageToNT7000(99,0,0,"","","",1);

//StopAlert("ReceiveNT7000 " & " l1= " & l1 & " l2= " & l2 & " l3= " & l3);
//StopAlert("ReceiveNT7000 " & " sl1b2= " & sl1b2 & " sl1b1= " & sl1b1 & " sl2b2= " & sl2b2);
      
      switch (sl2b2) begin
        case "80": 
          LogQMessage("ReceiveNT7000 " & " transport order=" & l3 & " error sl2b1=" & sl2b1);//testcode
//          StopAlert("ReceiveNT7000 error sl2b1=" & sl2b1);//testcode
          switch (sl2b1) begin
            case "1E": NT7000InternalError(l3);               //30// Internal AGVCS error, do nothing
            case "19": NT7000LoadDisappearedFromForkLift(l3); //25
            case "18": NT7000DestPosOccupiedOrNotReady(l3);   //24
            case "17": NT7000DestPosOccupiedOrNotReady(l3);   //23//destinati not ready
            case "15": NT7000SourcePosEmptyOrNotReady(l3);    //21
            case "14": NT7000SourcePosEmptyOrNotReady(l3);    //20//source not read
            case "10": NT7000WrongTransportOrder(l3);         //16            
            case "0F": NT7000WrongTransportOrder(l3);         //15
            case "0D": NT7000DestPosOccupiedOrNotReady(l3);   //13              
            case "0C": NT7000SourcePosEmptyOrNotReady(l3);    //12
            case "0B": NT7000WrongTransportOrder(l3);         //11
          end;        
          goto LReceiveNT7000;
        case "40": NT7000TransportOrderDelivered(l3,1);                         //64
        case "20": NT7000ForkLiftAtPickingPosition(l3);                         //32
        case "10": NT7000LoadPickedupFromSourcePosition(l3,StringToInt(sl1b1)); //16
        case "08": //man on board
        case "04": //ready for picking         
        case "02": NT7000TransportOrderAccepted(l3);
        case "00": NT7000TransportOrderDeleted(l3);
      end;
    case "78": //120 dec//fork lift status
      SendQMessageToNT7000(99,0,0,"","","",1);
      if (TestBit(l2,1)!=0) then begin SetForkLiftStatus(StringToInt(sl1b1),0); end;
      if (TestBit(l2,2)!=0) then begin         
        SetForkLiftStatus(StringToInt(sl1b1),1); 
      end;
    otherwise
      SendQMessageToNT7000(99,0,0,"","","",1);
  end;  
LReceiveNT7000:; 
//  UpdateBrowses("ForkLiftQueVc");//testcode
  RETURN;
END;

global 
updating procedure ReceiveNT7000Test()
BEGIN
  ReceiveNT7000(110,64,7777);
  RETURN;
END;

global
updating procedure SendNewOrderToNT7000(Integer ForkLiftSystem)
BEGIN
  record ForkLiftQueVc sentForkLiftQuer;
  record ForkLiftQueVc ForkLiftQuer;
  Boolean found;

  found = FindNextToSendToForkLiftQue(ForkLiftQuer);
  if (found) then begin  
    if (ForkLiftQuer.QueType!=0) then begin
      SetForkLiftQueStatus(ForkLiftQuer,1,"");
      FullAutomaticSendNewOrder(ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,ForkLiftQuer.ToPosCode,ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QuePriority);
    end else begin
      if (ForkLiftSystem==1) then begin
        sentForkLiftQuer.SHNr = ForkLiftQuer.SHNr;
        sentForkLiftQuer.QueType = 0;
        sentForkLiftQuer.Status = 2;
        if (ReadFirstKey("SHNr",sentForkLiftQuer,3,true)==false) then begin     
          sentForkLiftQuer.SHNr = ForkLiftQuer.SHNr;
          sentForkLiftQuer.QueType = 0;
          sentForkLiftQuer.Status = 1;
          if (ReadFirstKey("SHNr",sentForkLiftQuer,3,true)==false) then begin     
            SetForkLiftQueStatus(ForkLiftQuer,1,"");
            PickingSendNewOrder(ForkLiftQuer.FullPallet,ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,"",ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QuePriority,ForkLiftQuer.QueType);
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure NT7000PickingOrderRemote(LongInt forkliftquenr,LongInt curforkliftquenr)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc curForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  
  ForkLiftQuer.SerNr = forkliftquenr;
  if (ReadFirstMain(ForkLiftQuer,1,true)) then begin
    if (ForkLiftQuer.QueType==0) and (ForkLiftQuer.Done==0) then begin      
      curForkLiftQuer.SerNr = curforkliftquenr;
      if (ReadFirstMain(curForkLiftQuer,1,true)) then begin
        RecordCopy(oldForkLiftQuer,ForkLiftQuer);
        ForkLiftQuer.ForkLiftSystemID = curForkLiftQuer.ForkLiftSystemID;
        ForkLiftQuer.NextInPickMode = 1;
        if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin end;
      end;      
      SetForkLiftQueStatus(ForkLiftQuer,1,"");      
      if (ForkLiftQuer.NextInPickMode!=0) then begin
        PickingSendNewSource(ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
      end else begin
        PickingSendNewOrder(ForkLiftQuer.FullPallet,ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,"",ForkLiftQuer.ForkLiftSystemID,5,ForkLiftQuer.QueType);
      end;
    end else begin
//??
    end;
  end else begin
//??
  end;
  RETURN;
END;

global
updating procedure NT7000PickingFinishRemote(string location,LongInt shnr)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  record LocationVc Locr;
  
  Locr.Code = location;
  ReadFirstMain(Locr,1,true);
  if (Locr.RequirePos==0) then begin goto LNT7000PickingFinishRemote; end;
  if (Locr.WHMForkLiftSystem==2) then begin
    ForkLiftQuer.SHNr = shnr;
    if (ReadFirstKey("SHNr",ForkLiftQuer,1,true)) then begin 
      NT7000TransportOrderDelivered(StringToLongInt(ForkLiftQuer.ForkLiftSystemID),Locr.WHMForkLiftSystem); 
    end;
  end else begin
    ForkLiftQuer.SHNr = shnr;
    ForkLiftQuer.QueType = 0;
    ForkLiftQuer.Status = 0;
    if (ReadFirstKey("SHNr",ForkLiftQuer,3,true)) then begin 
      FinishPickingMode(ForkLiftQuer.FrLocation,ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);
      ForkLiftQuer.ForkLiftSystemID = "";
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)) then begin
      end;
    end;
  end;
LNT7000PickingFinishRemote:;  
  RETURN;
END;

global 
updating procedure NT7000PickingCancelRemote(LongInt shnr)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 2;
  ForkLiftQuer.SHNr = shnr;
  if (ReadLastKey("QueTypeStatusSH",ForkLiftQuer,3,true)) then begin 
    CancelTransportOrder(ForkLiftQuer.ForkLiftSystemID,ForkLiftQuer.QueType);
  end;
//??
  RETURN;
END;

global
updating function LongInt NT7000PickingTakePalletRemote(string location,LongInt shnr)
BEGIN
  LongInt res;
  record LocationVc Locr;
  record POSVc Posr;
  record ForkLiftQueVc ForkLiftQuer;
  
  Locr.Code = location;
  ReadFirstMain(Locr,1,true);
  if (Locr.RequirePos==0) then begin goto LNT7000PickingTakePalletRemote; end;
  Posr.LocArea = Locr.WHMPalletArea;
  if (ReadFirstKey("LocArea",Posr,1,true)) then begin
    ForkLiftQuer.SHNr = shnr;
    ForkLiftQuer.QueType = 0;
    ForkLiftQuer.Status = 0;
    if (ReadFirstKey("SHNr",ForkLiftQuer,3,true)) then begin 
      if (blank(ForkLiftQuer.ForkLiftSystemID)) then begin
        SetForkLiftQueStatus(ForkLiftQuer,1,"");
        PickingSendNewOrder(ForkLiftQuer.FullPallet,ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,"",ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
      end else begin
        SetForkLiftQueStatus(ForkLiftQuer,1,"");
        PickingSendNewSource(Posr.Location,Posr.Code,ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
      end;
      res = ForkLiftQuer.SerNr;
    end;
  end;
LNT7000PickingTakePalletRemote:;  
  NT7000PickingTakePalletRemote = res;
  RETURN;
END;

global
updating procedure NT7000PickingGotoWraperRemote(LongInt forkliftquenr)
BEGIN
  record LocationVc Locr;
  record ForkLiftQueVc ForkLiftQuer;

  ForkLiftQuer.SerNr = forkliftquenr;
  if (ReadFirstMain(ForkLiftQuer,1,true)) then begin 
    Locr.Code = ForkLiftQuer.FrLocation;
    ReadFirstMain(Locr,1,true);
    SendNewDestinantion(Locr.Code,Locr.WHMWraperPosCode,ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
    if (SetNewPositionOnStockMov(ForkLiftQuer.StockMovNr,false,Locr.WHMWraperPosCode)) then begin
    end;
  end;
  RETURN;
END;

global
updating procedure NT7000PickingGoOutRemote(LongInt forkliftquenr)
BEGIN
  record LocationVc Locr;
  record ForkLiftQueVc ForkLiftQuer;
  
  ForkLiftQuer.SerNr = forkliftquenr;
  if (ReadFirstMain(ForkLiftQuer,1,true)) then begin 
    Locr.Code = ForkLiftQuer.FrLocation;
    ReadFirstMain(Locr,1,true);
    SendNewDestinantion(ForkLiftQuer.FrLocation,Locr.WHMWraperPosCode,ForkLiftQuer.ForkLiftSystemID,0,ForkLiftQuer.QueType);
  end;
  RETURN;
END;

function Boolean SDPasteArtCode(var record SDVc SDr,string artcode,string frposcode,val q,Integer rwcnt)
BEGIN
  Boolean res;
  record INVc INr;
  row SDVc SDrw;
  string 10 costacc;
  
  if (ReadFirstItem(artcode,INr,true,true)) then begin
    ClearRow(SDr,SDrw,1);
    SDrw.ArtCode = INr.Code;
    SDrw.Coefficient = INr.UnitCoefficient;
    SDrw.ArtCode = INr.Code;
    SDrw.Spec = INr.Name;
    SDrw.BasePrice = INr.UPrice1;
    SDrw.Objects = FindINObjects(INr.Objects,INr.Group);
    GetINCostAcc(INr,costacc);
    SDrw.CostAcc = costacc;
    SDrw.Qty = q;
    SDrw.PosCode = frposcode;
    MatRowPut(SDr,rwcnt,SDrw);
    res = true;
  end;
  SDPasteArtCode = res;
  RETURN;            
END;

updating function Integer MakeStockDepreciation(val requiredq,val deprqty,record ForkLiftQueVc ForkLiftQuer)
BEGIN
  Integer res;
  record SDVc SDr;
  val ldeprqty;
  record PISVc PISr;
  
  ldeprqty = deprqty;
  PISr.ArtCode = ForkLiftQuer.ArtCode;
  PISr.Location = ForkLiftQuer.FrLocation;
  PISr.Position = ForkLiftQuer.FrPosCode;
  if (ReadFirstMain(PISr,3,true)) then begin
    if (PISr.Instock>requiredq) then begin
      ldeprqty = PISr.Instock - requiredq;
    end;
  end;

  res = 2;
  RecordNew(SDr);
  if (SDPasteArtCode(SDr,ForkLiftQuer.ArtCode,ForkLiftQuer.FrPosCode,ldeprqty,0)) then begin
    SDr.TransDate = CurrentDate;
    SDr.SerNr = NextSerNr("SDVc",SDr.TransDate,-1,false,"");  
    SDr.Location = ForkLiftQuer.FrLocation;
    if (SDr.SerNr>0) then begin
      SDr.OKFlag = 1;
      SDSumUp(SDr);
      if (RecordStore(SDr,false)) then begin
      end;
      res = 0;
    end;
  end;
  MakeStockDepreciation = res;
  RETURN;
END;

updating function Integer MakeGoodsReceipt(val requiredq,val rcvqty,record ForkLiftQueVc ForkLiftQuer,Boolean checkpisf)
BEGIN
  Integer res;
  record PUVc PUr;
  row PUVc PUrw;
  record PISVc PISr;
  string 255 warning,inwarn;
  val lrcvqty;
  record LocationVc Locr;
  
  lrcvqty = rcvqty;
  if (checkpisf) then begin
    PISr.ArtCode = ForkLiftQuer.ArtCode;
    PISr.Location = ForkLiftQuer.FrLocation;
    PISr.Position = ForkLiftQuer.FrPosCode;
    if (ReadFirstMain(PISr,3,true)) then begin
      if (PISr.Instock>=requiredq) then begin
        res = 0;
        goto LMakeGoodsReceipt;
      end;
      lrcvqty = requiredq - PISr.Instock;
    end;
  end;
  res = 1;
  RecordNew(PUr);
  ClearRow(PUr,PUrw,1);
  PUrw.ArtCode = ForkLiftQuer.ArtCode;
  PUrw.PosCode = ForkLiftQuer.FrPosCode;
  PUrw.Quant = lrcvqty;
  MatRowPut(PUr,0,PUrw);
  if (PUVc_PasteArtCode(PUr,0,warning,inwarn)) then begin
    Locr.Code = ForkLiftQuer.FrLocation;
    ReadFirstMain(Locr,1,true);
    PUr.VECode = Locr.WHMDefPUVECode;
    if (PUVc_PasteVECode(PUr)) then begin end;
    PUr.TransDate = CurrentDate;
    PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");  
    PUr.Location = ForkLiftQuer.FrLocation;
    if (PUr.SerNr>0) then begin
      PUSumUp(PUr);
      PUr.OKFlag = 1;
      if (RecordStore(PUr,false)) then begin
      end;
      res = 0;
    end;
  end;
LMakeGoodsReceipt:;  
  MakeGoodsReceipt = res;
  RETURN;
END;

updating
procedure AddRowToSH(record StockMovVc StockMovr,Integer rwcnt,Integer shrownr)
BEGIN
  row StockMovVc StockMovrw;
  record SHVc SHr;
  record SHVc oldSHr;
  row SHVc SHrw;
  row SHVc toSHrw;
    
  if (shrownr>=0) then begin
    MatRowGet(StockMovr,rwcnt,StockMovrw);
    if (nonblank(StockMovrw.ArtCode)) and (StockMovrw.Quant>0) then begin
      SHr.SerNr = StockMovr.TransNr;
      if (ReadFirstMain(SHr,1,true)) then begin
        if (SHr.OKFlag==0) then begin
          RecordCopy(oldSHr,SHr);
          MatRowGet(SHr,shrownr,SHrw);
          CopyRow(SHr,SHrw,toSHrw);
          toSHrw.Ship = StockMovrw.Quant;
          toSHrw.Ordered = toSHrw.Ordered - SHrw.Ship;
          toSHrw.InStock = toSHrw.InStock - SHrw.Ship;
          MatRowPut(SHr,MatRowCnt(SHr),toSHrw);
          if (RecordUpdate(oldSHr,SHr,true)==0) then begin end;
        end;
      end;
    end;
  end;
  RETURN;
END;

function Integer StockMovPasteArtCode(var record StockMovVc StockMovr,string artcode,string warehouse,string frposcode,string toposcode,val q,Integer rwcnt)
BEGIN
  Integer res;
  record INVc INr;
  row StockMovVc StockMovrw;
  string 10 costacc;
  
  res = 4;
  if (ReadFirstItem(artcode,INr,true,true)) then begin
    ClearRow(StockMovr,StockMovrw,1);   
    StockMovrw.ArtCode = INr.Code;
    StockMovrw.Quant = q;
    StockMovrw.Coefficient = INr.UnitCoefficient;
    StockMovrw.Spec = INr.Name;
    StockMovrw.BasePrice = INr.UPrice1;
    StockMovrw.Objects = FindINObjects(INr.Objects,INr.Group);
    StockMovrw.UnitXval = INr.Width;
    StockMovrw.UnitYval = INr.Height;
    StockMovrw.UnitZval = INr.Depth;
    StockMovrw.ToPosCode = toposcode;
    StockMovrw.FrPosCode = FindPositionWithItem(artcode,warehouse,q,frposcode);
    if (nonblank(StockMovrw.FrPosCode)) then begin
      MatRowPut(StockMovr,rwcnt,StockMovrw);
      res = 0;
    end;
  end;
  StockMovPasteArtCode = res;
  RETURN;            
END;

updating function Integer MakeStockMovement(val deprqty,record ForkLiftQueVc ForkLiftQuer,Integer shrownr)
BEGIN
  Integer res;
  record StockMovVc StockMovr;
  record ForkLiftQueVc newForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  
  RecordNew(StockMovr);
  res = StockMovPasteArtCode(StockMovr,ForkLiftQuer.ArtCode,ForkLiftQuer.FrLocation,ForkLiftQuer.FrPosCode,ForkLiftQuer.ToPosCode,deprqty,0);
  if (res==0) then begin
    res = 3;
    StockMovr.TransDate = CurrentDate;
    StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.TransDate,-1,false,"");  
    StockMovr.FrLocation = ForkLiftQuer.FrLocation;
    StockMovr.ToLocation = ForkLiftQuer.ToLocation;
    StockMovr.ManualPick = 1;
    StockMovr.ToForkLiftQue = 1;
    StockMovr.TransNr = ForkLiftQuer.SHNr;
    if (ForkLiftQuer.SHNr>0) then begin
      StockMovr.FileName = "SHVc";
    end;
    if (StockMovr.SerNr>0) then begin
      StockMovSumUp(StockMovr);
      if (RecordStore(StockMovr,false)) then begin
        res = 0;
      end else begin
        res = 3;
      end;
    end;
    if (res==0) then begin
      newForkLiftQuer.StockMovNr = StockMovr.SerNr;
      if (ReadFirstKey("StockMovNr",newForkLiftQuer,1,true)) then begin
        RecordCopy(oldForkLiftQuer,newForkLiftQuer);
        newForkLiftQuer.ForkLift = ForkLiftQuer.ForkLift;
        if (RecordUpdate(oldForkLiftQuer,newForkLiftQuer,false)==0) then begin end;
      end;
      AddRowToSH(StockMovr,0,shrownr);
    end;
  end;
  MakeStockMovement = res;
  RETURN;
END;

updating function Integer DoNT7000PickingConfirm(LongInt forkliftqnr,val v,Integer whichforliftque)
BEGIN
  Integer res;
  record ForkLiftQueVc ForkLiftQuer;
  record ForkLiftQueVc oldForkLiftQuer;
  record ForkLiftQueVc nextForkLiftQuer;
  Integer shrownr;
  record PISVc PISr;
  Boolean pisf;
  record LocationVc Locr;
  
  ForkLiftQuer.SerNr = forkliftqnr;
  if (ReadFirstMain(ForkLiftQuer,1,true)) begin
    Locr.Code = ForkLiftQuer.FrLocation;
    ReadFirstMain(Locr,1,true);
    
    pisf = true;
    
    if (v==ForkLiftQuer.Quant) then begin
      RecordCopy(oldForkLiftQuer,ForkLiftQuer);        
      ForkLiftQuer.Done = 1;
      if (Locr.WHMForkLiftSystem==2) then begin ForkLiftQuer.Status = 2; end;
      if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)==0) then begin end;
    end;    
    if (v<ForkLiftQuer.Quant) then begin
      res = MakeStockDepreciation(v,ForkLiftQuer.Quant-v,ForkLiftQuer);
      if (res==0) then begin
        if (SetNewQuantityOnStockMov(ForkLiftQuer.StockMovNr,ForkLiftQuer.ArtCode,v,shrownr)) then begin
        end;
      end;
      if (res==0) then begin
        res = MakeStockMovement(ForkLiftQuer.Quant-v,ForkLiftQuer,shrownr);
      end;
      if (res==0) or (res==4) then begin
        RecordCopy(oldForkLiftQuer,ForkLiftQuer);        
        ForkLiftQuer.Quant = v;
        ForkLiftQuer.Done = 1;
        if (Locr.WHMForkLiftSystem==2) then begin ForkLiftQuer.Status = 2; end;
        if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)==0) then begin end;
        SetPositionStatus(ForkLiftQuer.FrPosCode,3);        
      end;
      pisf = false;
    end;
    if (v>ForkLiftQuer.Quant) then begin
      res = 1;
      res = MakeGoodsReceipt(v,v-ForkLiftQuer.Quant,ForkLiftQuer,true);
      if (res==0) then begin
        if (SetNewQuantityOnStockMov(ForkLiftQuer.StockMovNr,ForkLiftQuer.ArtCode,v,shrownr)) then begin
        end;
      end;
      if (res==0) then begin
        RecordCopy(oldForkLiftQuer,ForkLiftQuer);        
        ForkLiftQuer.Quant = v;
        ForkLiftQuer.Done = 1;
        if (Locr.WHMForkLiftSystem==2) then begin ForkLiftQuer.Status = 2; end;
        if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)==0) then begin end;
      end;
      pisf = false;
    end;
    if (pisf) then begin
      PISr.ArtCode = ForkLiftQuer.ArtCode;
      PISr.Location = ForkLiftQuer.FrLocation;
      PISr.Position = ForkLiftQuer.FrPosCode;
      if (ReadFirstMain(PISr,3,true)) then begin
        if (v>PISr.Instock) then begin
          res = MakeGoodsReceipt(v,v-PISr.Instock,ForkLiftQuer,false);
        end;
      end;
    end;
    if (res==0) then begin
      if (ForkLiftQuer.QueType==0) then begin
        if (FindNextManualForkLiftQue(nextForkLiftQuer,ForkLiftQuer.SHNr)) then begin
          RecordCopy(oldForkLiftQuer,nextForkLiftQuer);
          nextForkLiftQuer.ForkLiftSystemID = ForkLiftQuer.ForkLiftSystemID;
          nextForkLiftQuer.NextInPickMode = 1;
          if (RecordUpdate(oldForkLiftQuer,nextForkLiftQuer,false)==0) then begin end;
        end;
      end;
    end;    
  end;
  
  DoNT7000PickingConfirm = res;
  RETURN;
END;

global
updating function Integer NT7000PickingConfirmRemote(LongInt forkliftqnr,string qtys)
BEGIN
  Integer res;
  val v;

  v = StringToVal(qtys,M4Qty);
  res = DoNT7000PickingConfirm(forkliftqnr,v,0);
  NT7000PickingConfirmRemote = res;
  RETURN;
END;

procedure AddToLastSHNrArray(LongInt shnr,Array LongInt alastshnr,var Integer acnt)
BEGIN
  Integer i;
  
  if (shnr<=0) then begin goto LAddToLastSHNrArray; end;
  for (i=0;i<acnt;i=i+1) begin
    if (alastshnr[i]==shnr) then begin
      goto LAddToLastSHNrArray;
    end;
  end;
  alastshnr[acnt] = shnr;
  acnt = acnt + 1;
LAddToLastSHNrArray:;      
  RETURN;
END;

function Boolean CheckLastSHNrArray(LongInt shnr,Array LongInt alastshnr,Integer acnt)
BEGIN
  Boolean res;
  Integer i;
  
  res = false;
  if (shnr<=0) then begin goto LCheckLastSHNrArray; end;
  for (i=0;i<acnt;i=i+1) begin
    if (alastshnr[i]==shnr) then begin
      res = true;
      goto LCheckLastSHNrArray;
    end;
  end;
LCheckLastSHNrArray:;  
  CheckLastSHNrArray = res;
  RETURN;
END;

global
function Integer CountForkLiftsInPickingMode()
BEGIN
  Integer res;
  Boolean TrHs;
  record ForkLiftQueVc ForkLiftQuer;
  Array LongInt alastshnr;
  Integer acnt;
  
  res = 0;
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 1;
  TrHs = true;
  while (LoopKey("QueTypeStatusSH",ForkLiftQuer,2,TrHs)) begin
    if (ForkLiftQuer.QueType!=0) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=1) then begin TrHs = false; end;
    if (TrHs) then begin
      if (CheckLastSHNrArray(ForkLiftQuer.SHNr,alastshnr,acnt)==false) then begin
        res = res + 1; 
        if (res>RecordsInIndex("ForkLiftVc","ActCode")) then begin       
          goto LCountForkLiftsInPickingMode;
        end;
        AddToLastSHNrArray(ForkLiftQuer.SHNr,alastshnr,acnt);
      end;
    end;
  end;
  RecordNew(ForkLiftQuer);
  ResetLoop(ForkLiftQuer);
  ForkLiftQuer.QueType = 0;
  ForkLiftQuer.Status = 2;
  TrHs = true;
  while (LoopKey("QueTypeStatusSH",ForkLiftQuer,2,TrHs)) begin
    if (ForkLiftQuer.QueType!=0) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=2) then begin TrHs = false; end;
    if (TrHs) then begin
      if (CheckLastSHNrArray(ForkLiftQuer.SHNr,alastshnr,acnt)==false) then begin
        res = res + 1; 
        if (res>RecordsInIndex("ForkLiftVc","ActCode")) then begin       
          goto LCountForkLiftsInPickingMode;
        end;
        AddToLastSHNrArray(ForkLiftQuer.SHNr,alastshnr,acnt);
      end;
    end;
  end;
LCountForkLiftsInPickingMode:;  
  CountForkLiftsInPickingMode = res;
  RETURN;
END;

function Integer CountForkLiftsInAutomaticMode()
BEGIN
  Integer res;
  Boolean TrHs;
  record ForkLiftQueVc ForkLiftQuer;
  Array LongInt alastshnr;
  Integer acnt;
  
  res = 0;
  ForkLiftQuer.QueType = 1;
  ForkLiftQuer.Status = 1;
  TrHs = true;
  while (LoopKey("QueTypeStatusSH",ForkLiftQuer,2,TrHs)) begin
    if (ForkLiftQuer.QueType>2) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=1) then begin TrHs = false; end;
    if (TrHs) then begin
      if (CheckLastSHNrArray(StringToLongInt(ForkLiftQuer.ForkLiftSystemID),alastshnr,acnt)==false) then begin
        res = res + 1; 
        if (res>RecordsInIndex("ForkLiftVc","ActCode")) then begin       
          goto LCountForkLiftsInAutomaticMode;
        end;
        AddToLastSHNrArray(StringToLongInt(ForkLiftQuer.ForkLiftSystemID),alastshnr,acnt);        
      end;
    end;
  end;

  RecordNew(ForkLiftQuer);
  ResetLoop(ForkLiftQuer);
  ForkLiftQuer.QueType = 1;
  ForkLiftQuer.Status = 2;
  TrHs = true;
  while (LoopKey("QueTypeStatusSH",ForkLiftQuer,2,TrHs)) begin
    if (ForkLiftQuer.QueType>2) then begin TrHs = false; end;
    if (ForkLiftQuer.Status!=2) then begin TrHs = false; end;
    if (TrHs) then begin
      if (CheckLastSHNrArray(StringToLongInt(ForkLiftQuer.ForkLiftSystemID),alastshnr,acnt)==false) then begin
        res = res + 1; 
        if (res>RecordsInIndex("ForkLiftVc","ActCode")) then begin       
          goto LCountForkLiftsInAutomaticMode;
        end;
        AddToLastSHNrArray(StringToLongInt(ForkLiftQuer.ForkLiftSystemID),alastshnr,acnt);        
      end;
    end;
  end;
LCountForkLiftsInAutomaticMode:;  
  CountForkLiftsInAutomaticMode = res;
  RETURN;
END;

global
updating procedure NT7000Connection()
BEGIN
  record NT7000ConnVc NTCr; 
  record NT7000ConnVc oldNTCr;
  time ts,te,ct;
  Boolean setmaxforkliftf,zerof;
  Integer nroffreeforklifts;
  record LocalMachineBlock LMb;
  record LocationVc Locr;
  
  BlockLoad(LMb);
  Locr.Code = LMb.DefLocation;
  ReadFirstMain(Locr,1,true);
  if ((Locr.RequirePos!=0) and (Locr.WHMForkLiftSystem!=0)) then begin
    NTCr.Location = LMb.DefLocation;
    ReadFirstMain(NTCr,1,true);
    RecordCopy(oldNTCr,NTCr);
    if ((nonblank(NTCr.ZeroTransTime)) and (nonblank(NTCr.MaxTransTime))) then begin
      zerof = false;
      ct = CurrentTime;
      ts = StringToTime(NTCr.MaxTransTime);
      te = StringToTime(NTCr.ZeroTransTime);
      if ((nonblanktime(ts)) and (nonblanktime(te))) then begin
        if (ct.hour>=ts.hour) then begin 
          if (ct.hour<=te.hour) then begin 
            if (ct.minute>=ts.minute) then begin 
              if (ct.minute<te.minute) then begin 
                setmaxforkliftf = true;
                zerof = false;
              end;
            end;
          end;
        end;
        if (ct.hour>=te.hour) then begin 
          if (ct.minute>=te.minute) then begin 
            setmaxforkliftf = true;
            zerof = true;
          end;
        end;
        if (setmaxforkliftf) then begin
          if (zerof) then begin;
            if (NTCr.MaxForkLiftForPickMode!=0) then begin
              NTCr.MaxForkLiftForPickMode = 0;
              RecordUpdate(oldNTCr,NTCr,true);
            end;
          end else begin
            if (NTCr.MaxForkLiftForPickMode!=RecordsInIndex("ForkLiftVc","ActCode")) then begin
              NTCr.MaxForkLiftForPickMode = RecordsInIndex("ForkLiftVc","ActCode");
              RecordUpdate(oldNTCr,NTCr,true);
            end;
          end;
        end;
      end;
    end;
    nroffreeforklifts = RecordsInIndex("ForkLiftVc","ActCode") - CountForkLiftsInPickingMode - CountForkLiftsInAutomaticMode;
    if (nroffreeforklifts>0) then begin
      SendNewOrderToNT7000(Locr.WHMForkLiftSystem);
    end;
  end;
  RETURN;
END;

global
procedure MovePurchaseConveyour(string location)
BEGIN
  record LocationVc Locr;

  Locr.Code = location;
  ReadFirstMain(Locr,1,true);
  if ((Locr.RequirePos!=0) and (Locr.WHMForkLiftSystem==0)) then begin
    SendQMessageToNT7000(20,0,1,"","","",1);
  end;
  RETURN;
END;

global
procedure MoveProductionConveyour(string location)
BEGIN
  record LocationVc Locr;

  Locr.Code = location;
  ReadFirstMain(Locr,1,true);
  if ((Locr.RequirePos!=0) and (Locr.WHMForkLiftSystem==0)) then begin
    SendQMessageToNT7000(20,0,2,"","","",1);
  end;
  RETURN;
END;
