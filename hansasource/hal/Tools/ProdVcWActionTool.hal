external procedure ProdSumup(var record ProdVc);
external procedure SetActTypeValues(record ActVc);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external function Boolean PasteQCTemplateToQualCon(var record QualConVc);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure NextM4Number(string,var string);
external function string 255 FindINObjects(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure NextM4SerialNumber(string,var string);
external function Time TimeDiff(Time,Time);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure ReadLastINSer(string,var string);
external procedure ProdFillFIFO(record ProdVc,Boolean);

global
procedure AutoFillProdSerNr(var record ProdVc Prodp)
BEGIN
  Integer i,rwcnt;
  row ProdVc Prodrw;
  string 255 lastnr,lastitem;
  record INVc INr;
  
  rwcnt = MatRowCnt(Prodp);
  if (rwcnt==0) then begin goto LAutoFillProdSerNr; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodp,i,Prodrw);
    if (Prodrw.OutQty==0) then begin
      goto L33AutoFillProdSerNr;
    end;
    if (ReadFirstItem(Prodrw.Item,INr,true,true)==false) then begin
      goto L33AutoFillProdSerNr;
    end;
    if (INr.SerNrf==0) then begin
      goto L33AutoFillProdSerNr;
    end;
    if ((blank(Prodrw.SerialNr)) and (Prodrw.Item==lastitem)) then begin
      NextM4SerialNumber(lastnr,lastnr);
      Prodrw.SerialNr = lastnr;
      Prodrw.RelVal = 1.00;
    end else begin
      lastnr = Prodrw.SerialNr;
      lastitem = Prodrw.Item;
      if (blank(Prodrw.SerialNr)) then begin
        ReadLastINSer(Prodrw.Item,lastnr);
      end else begin
        lastnr = Prodrw.SerialNr;
        goto L33AutoFillProdSerNr;
      end;
      NextM4SerialNumber(lastnr,lastnr);      
      Prodrw.SerialNr = lastnr;
      Prodrw.RelVal = 1.00;
    end;
    if (blank(lastitem)) then begin
      lastitem = Prodrw.Item;
    end;
    MatRowPut(Prodp,i,Prodrw);
L33AutoFillProdSerNr:;
  end;
LAutoFillProdSerNr:;
  RETURN;
END;

global
procedure RecordAction_raProdFillFIFO(var record ProdVc Prodp)
BEGIN
  if (ReadFirstMain(Prodp,0,true)) then begin end;  
  ProdFillFIFO(Prodp,true)
  RETURN;
END;

global
updating function Boolean MakeActFromProdVc(record ProdVc Prodr,var record ActVc Actr)
BEGIN
  Integer curcomp;
  Boolean res;
  record ASTBlock ASTb;

  BlockLoad(ASTb);
  if (ReadFirstMain(Prodr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 0;
  Actr.CalTimeFlag = 1;
  Actr.MainPersons = Prodr.Person;
  if (blank(Actr.MainPersons)) then begin
    Actr.MainPersons = CurrentUser;
  end else begin
    if (Actr.MainPersons!=CurrentUser) then begin
      Actr.CCPersons = CurrentUser;
    end;
  end;
  Actr.Comment = Prodr.Comment;
  Actr.TransDate = Prodr.StartDate;
  Actr.EndDate = Prodr.ProdDate;
  Actr.StartTime = Prodr.StartTime;
  Actr.EndTime = Prodr.EndTime;
  Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  Actr.ProdSerNr = Prodr.SerNr;
  Actr.ActType = ASTb.Production;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.ProductiondDone;
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,Prodr,curcomp);  
    CreateRecordLink(Prodr,curcomp,Actr,curcomp);  
    res = true;
  end;  
  MakeActFromProdVc = res;
  RETURN;
END;

global
updating function Integer RecordAction_raDisProdFromProd(record ProdVc Prodr,var record ProdVc newProdr)
BEGIN
  Integer res;
  row ProdVc Prodrw;
  row ProdVc newProdrw;
  Integer curcomp;
  Integer i,rwcnt;
  record ProdVc orgProdr;
  val totdisfifo;

  orgProdr.OrgProdNr = Prodr.SerNr;
  if (ReadFirstKey("OrgProdNr",orgProdr,1,true)) then begin
    res = 20879;
    goto LRecordAction_raDisProdFromProd;
  end;
  res = 0;
  if (ReadFirstMain(Prodr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  RecordCopy(newProdr,Prodr);
  newProdr.SerNr = -1;
  newProdr.ProdDate = CurrentDate;
  newProdr.PRStatusFlag = 0;
  newProdr.Disassemble = 1;
  newProdr.OrgProdNr = Prodr.SerNr;
  rwcnt = MatRowCnt(newProdr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(newProdr,i);
    rwcnt = MatRowCnt(newProdr);
  end;
  rwcnt = MatRowCnt(Prodr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodr,i,Prodrw);
    CopyRow(Prodr,Prodrw,newProdrw);
    if (Prodrw.InQty!=0) then begin
      newProdrw.OutQty = Prodrw.InQty;
      newProdrw.InQty = blankval;
      newProdrw.ExtraCost = blankval;
//      newProdrw.RelVal = Prodrw.ItemCost;
      newProdrw.OrgProdRow = i;
      newProdrw.OrgProdFIFORowVal = Prodrw.FIFORowVal;
      MatRowPut(newProdr,i,newProdrw);      
      totdisfifo = totdisfifo + Prodrw.FIFORowVal;
    end;
    if (Prodrw.OutQty!=0) then begin
      newProdrw.InQty = Prodrw.OutQty;
      newProdrw.OutQty = blankval;
      newProdrw.RelVal = blankval;
      newProdrw.OrgProdRow = i;
      newProdrw.OrgProdFIFORowVal = Prodrw.FIFORowVal;
      MatRowInsert(newProdr,0,newProdrw);      
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(newProdr,i,Prodrw);
    if (Prodrw.OutQty!=0) then begin
      Prodrw.RelVal = Prodrw.OrgProdFIFORowVal/totdisfifo;
      MatRowPut(newProdr,i,Prodrw);
    end;
  end;
  newProdr.SerNr = NextSerNr("ProdVc",newProdr.ProdDate,-1,false,"");  
  ProdSumup(newProdr);
  if (RecordStore(newProdr,false)) then begin 
    CreateRecordLink(newProdr,curcomp,Prodr,curcomp);  
    CreateRecordLink(Prodr,curcomp,newProdr,curcomp);  
  end; 
LRecordAction_raDisProdFromProd:;  
  RecordAction_raDisProdFromProd = res;
  RETURN;
END;

global
procedure ProdVc_PasteItem(var record ProdVc Prodr,Integer rownr)
BEGIN
  record INVc INr;
  row ProdVc Prodrw;
  Boolean itemfound;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  
  MatRowGet(Prodr,rownr,Prodrw);
  itemfound = GetFirstItem(Prodrw.Item,INr);
  if (itemfound==false) then begin
    itemfound = ReadFirstItem(Prodrw.Item,INr,true,true);
    if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
      INr.Code = Prodrw.Item;
    end;
  end;
  if (itemfound) then begin
    Prodrw.Coefficient = INr.UnitCoefficient;
    Prodrw.Item = INr.Code;
    Prodrw.Comment = INr.Name;
    Prodrw.Objects = FindINObjects(INr.Objects,INr.Group);
    Prodrw.Weight = INr.Weight;
    if (nonblank(INr.Width)) then begin
      Prodrw.UnitXval = INr.Width;
    end;
    if (nonblank(INr.Height)) then begin
      Prodrw.UnitYval = INr.Height;
    end;
    if (nonblank(INr.Depth)) then begin
      Prodrw.UnitZval = INr.Depth;    
    end;
    Prodrw.SuppSerialNr = INr.SuppSerialNr;
    Prodrw.MajStoneDet = INr.MajStoneDet;
    Prodrw.Colour = INr.Colour;
    Prodrw.Clarity = INr.Clarity;
    Prodrw.Cert = INr.Cert;
    Prodrw.MinStoneDet = INr.MinStoneDet;
    Prodrw.Metal = INr.Metal;
    Prodrw.RowWeight = INr.RowWeight;
    Prodrw.Size = INr.Size;
    Prodrw.Length = INr.Length;

    Prodrw.WatchBrand = INr.WatchBrand;
    Prodrw.StyleName = INr.StyleName;
    Prodrw.WatchMetal = INr.WatchMetal;
    Prodrw.Movement = INr.Movement;
    Prodrw.BrcStr = INr.BrcStr;
    Prodrw.Gender = INr.Gender;
    Prodrw.Other = INr.Other;
    Prodrw.Other2 = INr.Other2;

  end;
  MatRowPut(Prodr,rownr,Prodrw);
  RETURN;
END;

global
updating function LongInt ProdBackflush_OKOperations(record ProdVc Prodr,var LongInt prodopersernr)
begin
  LongInt res;
  Boolean found,testf;
  record ProdOperationVc ProdOpr;
  record ProdOperationVc oldProdOpr;
  
  found = true;
  ProdOpr.ProdNr = Prodr.SerNr;
  ProdOpr.Sequence = 1;
  while (LoopKey("ProdNrSeq",ProdOpr,2,found)) begin
    if (ProdOpr.ProdNr!=Prodr.SerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (ProdOpr.PRStatusFlag!=0) and (ProdOpr.PRStatusFlag!=2) then begin testf = false; end;
      if (testf) then begin
	      RecordCopy(oldProdOpr,ProdOpr);
	      ProdOpr.PRStatusFlag = 3;
	      ProdOpr.ActualQty = ProdOpr.Qty;
	      res = RecordUpdate(oldProdOpr,ProdOpr,true);
	      if (res!=0) then begin
	        prodopersernr = ProdOpr.SerNr;
	        goto LProdBackflush_OKOperations;
	      end;
	    end;
    end;
  end;
  /*
  ResetLoop(ProdOpr);
  found = true;
  ProdOpr.ProdNr = Prodr.SerNr;
  ProdOpr.PRStatusFlag = 2;
  while (LoopKey("ProdNrPRStatus",ProdOpr,2,found)) begin
    if (ProdOpr.ProdNr!=Prodr.SerNr) then begin found = false; end;
    if (ProdOpr.PRStatusFlag!=2) then begin found = false; end;
    if (found) then begin
      RecordCopy(oldProdOpr,ProdOpr);
      ProdOpr.PRStatusFlag = 3;
      ProdOpr.ActualQty = ProdOpr.Qty;
      res = RecordUpdate(oldProdOpr,ProdOpr,true);
      if (res>0) then begin
        prodopersernr = ProdOpr.SerNr;
        goto LProdBackflush_OKOperations;
      end;
    end;
  end;
  */
LProdBackflush_OKOperations:;  
  ProdBackflush_OKOperations = res;
  return;
end;

global
procedure PasteQtyInProd(var record ProdVc Prodr,string efstr)
begin
  vector integer vItemIsSerNr;
  vector val vItemQty;
  record INVc INr;
  row ProdVc Prodrw;
  Integer i,rwcnt;
  val qty;
  boolean sernrf;
  
  switch (Prodr.RowsHoldActualQty) begin
    case 1: 
      rwcnt = MatRowCnt(Prodr);
      qty = StringToVal(efstr,M4Qty);
      if (qty>0) then begin
        for (i=0;i<rwcnt;i=i+1) begin         
          MatRowGet(Prodr,i,Prodrw);
          sernrf = false;
          if (ReadFirstItem(Prodrw.Item,INr,true,true)) then begin
            if (INr.SerNrf==1) then begin
              sernrf = true;
              vItemIsSerNr[Inr.Code] = 1;
            end;
          end;
          if !sernrf then begin
            if (Prodrw.InQty>0) then begin
              Prodrw.InQty = Prodrw.InQty/qty;
            end;
            if (Prodrw.OutQty>0) then begin
              Prodrw.OutQty = Prodrw.OutQty/qty;
            end;
            MatRowPut(Prodr,i,Prodrw);
          end else begin 
            if (vItemQty[INr.Code]>=Prodr.Qty) then begin
              MatRowDelete(Prodr,i);
              i = i - 1;
              rwcnt = rwcnt - 1;
            end else begin
              Prodrw.RelVal = 1.00/Prodr.Qty;
              MatRowPut(Prodr,i,Prodrw);
              vItemQty[Prodrw.Item] = vItemQty[Prodrw.Item] + (Prodrw.InQty+Prodrw.OutQty);
            end;
          end;
        end;
      end;

      rwcnt = MatRowCnt(Prodr);
      for (i=0;i<rwcnt;i=i+1) begin         
        MatRowGet(Prodr,i,Prodrw);
        if (vItemIsSerNr[Prodrw.Item]!=1) then begin
          if (Prodrw.InQty>0) then begin
            Prodrw.InQty = Prodrw.InQty*Prodr.Qty;
          end;
          if (Prodrw.OutQty>0) then begin
            Prodrw.OutQty = Prodrw.OutQty*Prodr.Qty;
          end;
          MatRowPut(Prodr,i,Prodrw);
        end else begin
          if (vItemQty[Prodrw.Item]<Prodr.Qty) then begin
            rwcnt = rwcnt + 1;
            MatRowInsert(Prodr,i,Prodrw);
            vItemQty[Prodrw.Item] = vItemQty[Prodrw.Item] + Prodrw.InQty + Prodrw.OutQty;
          end;
          
        end;
      end;
  end;    
  ProdSumup(Prodr);
  return;
end;


