external procedure QTSumup(var record QTVc);
external function Boolean GetPD(var record PDVc);
forward procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external procedure IVVc_PasteInvCountry(var record IVVc,string);
external procedure IVVc_PasteDelCountry(var record IVVc,string);
external function Boolean GetARPayRate(LongInt,LongInt,var val,var val,var val,var val,var val,string,Date);
external function Boolean HasPriceLists();
external procedure IVDUpdatePrices(var record IVVc,Boolean);
external procedure IVVc_PasteLoyaltyCardNr(var record IVVc,record LocalMachineBlock);
external function string 60 AddObjectToObjectList(string,string);
external procedure IVVc_FillupTaxTemplate(var record IVVc);
external function Boolean OfficialSerNrDefined(string);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure RowCalculateTaxMatrix_IVVc(var record IVVc,Integer,row IVVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external function Boolean FindWHITTax(string,Date,var record WHITVc);
external procedure GetCustAndBasket(string,var string,var LongInt);
external function Boolean FindRPCUTax(string,Date,var record RPCUTaxVc);
external function roundmode SetRoundModeD(Integer);
external function Boolean GetPurchaseItem(string,string,var record PIVc);
external function val DfncyStockForStockReserv(Integer,LongInt,string);
external procedure GetSalesGroup(string,var string);
external procedure GetARAcc(string,var string);
external function Boolean CheckIfIVOpen(Date,record IVVc,string,var val,Boolean,Boolean);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external procedure IVOpenPrepExists(string);
external procedure IVGetRate(var record IVVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalculateFreightWeight(record IVVc,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure SetSalesMan(var string,string);
external procedure RemoveOldCustObjects(string,var string);
external procedure RemoveOldPersObjects(string,var string);
external function Boolean GetCustAndBal2(var record CUVc,var val,var val,Date,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean DateWarned(Date,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external procedure GetUserObject(string,var string);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external procedure IVSumup(var record IVVc,Boolean);
external function val FindVAT(string,val,Integer,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetItemSalesAcc(string,Integer,var string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external function Boolean PasteCustInInv(var record IVVc);
external function LongInt GetCurUserLastNr(string);
external procedure GetItemSalesAccFromOR(record ORVc,var string);
external procedure ORSumup(var record ORVc);

procedure GetItemDebtorsAcc(record ORVc ORr,var string debtorsacc)
begin
  record OrderClassVc OCr;
  
  debtorsacc = "";
  if (nonblank(ORr.OrderClass)) then begin
    OCr.Code = ORr.OrderClass;
    if (ReadFirstMain(OCr,1,true)) then begin
      if (nonblank(OCr.DownpayInvDebtorsAcc)) then begin
        debtorsacc = OCr.DownpayInvDebtorsAcc;
      end;
    end;
  end;
  return;
end;

procedure DownPayMul(val a,val b,var val c)
begin
  if (b!=100) then begin
    c = a*b;
    c = c/100;
    c = Round(c,SetRoundModeD(2));//0
  end else begin
    c = a;
  end;
  return;
end;

procedure GetCustCatPerc(string custcode,var val percentagep)
begin
  record CCatVc CCr;
  record CUVc CUr;

  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CCr.Code = CUr.CustCat;
    if (ReadFirstMain(CCr,1,true)) then begin
      if (CCr.DownPayPerc!=0) then begin percentagep = CCr.DownPayPerc; end;
    end;
  end;
  return;
end;

procedure AddPreviousDownpayment(record IVVc IVp)
begin
  row IVVc IVrw;
  record IVVc dIVr;
  Boolean found,testf;
  
  found = true;
  dIVr.OrderNr = IVp.OrderNr;
  while (LoopKey("OrderNr",dIVr,1,found)) begin
    if (dIVr.OrderNr!=IVp.OrderNr) then begin
      found = false;
    end;
    if (found) then begin
      testf = true;
      if (dIVr.InvType!=kInvoiceTypeDownpayment) then begin testf = false; end;
      if (dIVr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        ClearRow(IVp,IVrw,kInvoiceRowTypePreviousDownpayment);
        IVrw.CUPNr = dIVr.SerNr;
        IVrw.ServiceDelDate = dIVr.InvDate;
        IVrw.Sum = dIVr.Sum4;
        IVrw.Price = dIVr.Sum1;
        MatRowInsert(IVp,0,IVrw);
      end;
    end;
  end;
  return;
end;

function string 255 OrdDownPay(record IVVc IVp,LongInt ordnr,var val sum,val perc,var record ORVc ORr,integer useRemainPerc)
begin
  string 255 res;
  record DownPayBlock DPb;
  record INVc INr;
  record CUVc CUr;
  row ORVc ORrw;
  row IVVc IVrw;
  val t,t2,baseprice;
  val percentage;
  Integer i,rwcnt,srw;
  string 255 tstr;
  string 10 VATCode;
  string 5 ipcurncy;
  record RoundBlock Roundb;
  record TaxMatrixVc TMr;
  val RemainPerc,price,vrebate;
  
  BlockLoad(Roundb);
  ipcurncy = IVp.CurncyCode;
  IVp.OrderNr = ordnr;
  ORr.SerNr = IVp.OrderNr;  
  if (ReadFirstMain(ORr,1,true)) then begin end;
  if (ORr.OKFlag==0) then begin
    if (OfficialSerNrDefined("ORVc")) then begin
      res = USetStr(2069);
      goto LOrdDownPay;
    end;
  end;
  IVp.OrderNr = ORr.SerNr;
  IVp.InclVAT = ORr.InclVAT;
  IVp.NoTAXonVAT = ORr.NoTAXonVAT;
  IVp.TotalwoTAX = ORr.TotalwoTAX;
  IVp.SVONr = -1;  
  if (nonblank(ORr.InvoiceToCode)) then begin
    IVp.CustCode = ORr.InvoiceToCode;
  end else begin
    IVp.CustCode = ORr.CustCode;
  end;
  if (PasteCustInInv(IVp)) then begin
  end;
  GetARAcc(IVp.CustCode,IVp.ARAcc);
  if (nonblank(ORr.InvoiceToCode)) then begin
    CUr.Code = ORr.InvoiceToCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      IVp.CustCode = CUr.Code;
      IVp.Addr0 = CUr.Name;
      IVp.Addr1 = CUr.InvAddr0;
      IVp.Addr2 = CUr.InvAddr1;
      IVp.Addr3 = CUr.InvAddr2;
      IVp.InvAddr3 = CUr.InvAddr3;
      IVp.InvAddr4 = CUr.InvAddr4;
      IVp.CustCat = CUr.CustCat;
      IVp.OrgCust = ORr.CustCode;
      IVp.PayDeal = CUr.PayDeal;
      IVp.ExportFlag = CUr.ExportFlag;
      IVp.InvCountry = CUr.CountryCode;
    end else begin
      goto L20OrdDownPay; 
    end;
  end else begin
L20OrdDownPay:;
    IVp.CustCode = ORr.CustCode;
    IVp.Addr0 = ORr.Addr0;
    IVp.Addr1 = ORr.Addr1;
    IVp.Addr2 = ORr.Addr2;
    IVp.Addr3 = ORr.Addr3;
    IVp.InvAddr3 = ORr.InvAddr3;
    IVp.InvAddr4 = ORr.InvAddr4;
    IVp.InvCountry = ORr.InvCountry;
    IVp.CustCat = ORr.CustCat;
    IVp.PayDeal = ORr.PayDeal;
    IVp.OrgCust = "";
    IVp.ExportFlag = ORr.ExportFlag;
  end;
  if (nonblank(ORr.ShipAddr0))then begin
    IVp.ShipAddr0 = ORr.ShipAddr0;
  end;
  if (nonblank(ORr.ShipAddr1))then begin
    IVp.ShipAddr1 = ORr.ShipAddr1;
  end;
  if (nonblank(ORr.ShipAddr2))then begin
    IVp.ShipAddr2 = ORr.ShipAddr2;
  end;
  if (nonblank(ORr.ShipAddr3))then begin
    IVp.ShipAddr3 = ORr.ShipAddr3;
  end;
  if (nonblank(ORr.DelAddr3))then begin
    IVp.DelAddr3 = ORr.DelAddr3;
  end;
  if (nonblank(ORr.DelAddr4))then begin
    IVp.DelAddr4 = ORr.DelAddr4;
  end;
  if (nonblank(ORr.DelCountry))then begin
    IVp.DelCountry = ORr.DelCountry;
  end;

  IVp.InvComment = ORr.Comment;
  IVp.CustOrdNr = ORr.CustOrdNr;
  IVp.LangCode = ORr.LangCode;
  IVp.OurContact = ORr.OurContact;
  IVp.ClientContact = ORr.CustContact;
  IVp.Objects = ORr.Objects;
  IVp.ExportFlag = ORr.ExportFlag;
  IVp.SalesMan = ORr.SalesMan;
  IVp.CurncyCode = ORr.CurncyCode;
  IVp.PRCode = ORr.PRCode;
  IVp.PriceList = ORr.PriceList;
  IVp.FrRate = ORr.FrRate;
  IVp.ToRateB1 = ORr.ToRateB1;
  IVp.ToRateB2 = ORr.ToRateB2;
  IVp.BaseRate1 = ORr.BaseRate1;
  IVp.BaseRate2 = ORr.BaseRate2;
  IVp.Location = ORr.Location;
  BlockLoad(DPb);
  if (nonblank(DPb.PayDeal)) then begin
    IVp.PayDeal = DPb.PayDeal;
  end;
  IVp.ServiceDelDate = CurrentDate;
  PastePDInInv(IVp,"",false);
  IVp.InvType = kInvoiceTypeDownpayment;
  srw = 0;
  percentage = perc;
  GetItemDebtorsAcc(ORr,tstr);
  if (nonblank(tstr)) then begin
    IVp.ARAcc = tstr;
  end else begin
    GetARAcc(IVp.CustCode,IVp.ARAcc);
  end;
  VATCode = DPb.VATCode;
  if (blank(VATCode)) then begin
    GetItemVATCode(DPb.ArtCode,IVp.ExportFlag,VATCode,true);
  end;
  if (blank(VATCode)) then begin 
    VATCode = IVp.CustVATCode; 
  end;
  if (DPb.DetailsOnIV==0) then begin
    rwcnt = MatRowCnt(ORr);
    VATCode = DPb.VATCode;
    if (blank(VATCode)) then begin
      GetItemVATCode(DPb.ArtCode,IVp.ExportFlag,VATCode,true);
    end;
    if (blank(VATCode)) then begin VATCode = IVp.CustVATCode; end;
    INr.Code = DPb.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin end;
    baseprice = INr.InPrice + INr.ExtraCost;
    if (sum==0) then begin
      if (percentage==0) then begin
        percentage = DPb.Percentage;
        GetCustCatPerc(ORr.CustCode,percentage);
      end;
      switch (DPb.CalcMode) begin
        case 2:
          if (ORr.InclVAT!=0) then begin
            t2 = ORr.Sum4 - ORr.Sum3;
            DownPayMul(t2,percentage,t);
            DownPayMul(baseprice,percentage,baseprice);
          end else begin
            DownPayMul(ORr.Sum1,percentage,t);
            DownPayMul(baseprice,percentage,baseprice);
          end;
        case 1:
          if (ORr.InclVAT!=0) then begin
            t2 = ORr.Sum4 - ORr.Sum3;
            DownPayMul(t2,percentage,t);
            DownPayMul(baseprice,percentage,baseprice);
          end else begin
            DownPayMul(ORr.Sum1,percentage,t);
            DownPayMul(baseprice,percentage,baseprice);
          end;
        otherwise
          DownPayMul(ORr.Sum4,percentage,t);
          DownPayMul(baseprice,percentage,baseprice);
      end;
    end else begin
      UnpackFieldMatrix(ORr,"TaxMatrix",TMr);
      FindSalesExVat(TMr,VATCode,sum,1,0,t);
    end;
    ClearRow(IVp,IVrw,5);
    if (nonblank(DPb.TextA)) then begin
      IVrw.Spec = DPb.TextA;
    end else begin
      if (GetItemNameStr(1,tstr,ORr.LangCode,INr.Name,INr.Code)) then begin end;
      IVrw.Spec = tstr;
    end;
    IVrw.Perceptions = INr.Perceptions;
    IVrw.Spec = IVrw.Spec & " ";
    IVrw.Spec = IVrw.Spec & ORr.SerNr;
    t = t - ORr.DownPaySent;
    if (t<0) then begin t = 0; end;
    IVrw.Sum = t;
    GetItemSalesAcc(DPb.ArtCode,IVp.ExportFlag,tstr);
    IVrw.SalesAcc = tstr;
    IVrw.VATCode = VATCode;
    IVrw.Objects = "";
    IVrw.BasePrice = baseprice;
    t2 = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);  
    UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
    FindSalesExVat(TMr,IVrw.VATCode,t2,IVp.InclVAT,IVp.NoTAXonVAT,t2);
    t = IVrw.Quant*IVrw.BasePrice;
    if (IVrw.PriceFactor!=0) then begin
      t = t/IVrw.PriceFactor;
    end;
    IVrw.rowGP = t2 - t;    
    IVrw.TaxTemplateCode = FillupTaxMatrix(0,IVp.BranchID,IVp.CustCode,IVp.CustCat,"",INr.TaxTemplateCode,TMr);
    PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
    RowCalculateTaxMatrix_IVVc(IVp,srw,IVrw);
    MatRowPut(IVp,srw,IVrw);
  end else begin
    if (percentage==0) then begin
      percentage = DPb.Percentage;
      GetCustCatPerc(ORr.CustCode,percentage);
    end;
    if (sum!=0) then begin
      percentage = (sum/ORr.Sum4)*100;
    end;
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ORrw.stp==10) then begin
        goto LOrdDownPay;
      end;
      if (ORrw.stp==kInvoiceRowTypeNormal) or (ORrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
        price = blankval;
        vrebate = ORrw.vRebate;
        INr.Code = ORrw.ArtCode;
        if (ReadFirstMain(INr,1,true)) then begin end;
        baseprice = INr.InPrice + INr.ExtraCost;
        switch (DPb.CalcMode) begin
          case 1:
            if (ORr.InclVAT!=0) then begin
              t2 = ORrw.Sum - FindVAT(ORrw.VATCode,ORrw.Sum,ORr.InclVAT,ORr.NoTAXonVAT);
              DownPayMul(t2,percentage,t);
              DownPayMul(baseprice,percentage,baseprice);
            end else begin
              DownPayMul(ORrw.Sum,percentage,t);
              DownPayMul(baseprice,percentage,t2);
              baseprice = t2;
            end;
          otherwise
            switch (Roundb.VATCalcWay) begin
              case 0:
                if (ORr.InclVAT!=0) then begin
  //                t2 = ORrw.Sum + FindVAT(ORrw.VATCode,ORrw.Sum,ORr.InclVAT,ORr.NoTAXonVAT);//wierd stuff, it is already including VAT
                  t2 = ORrw.Sum;
                  DownPayMul(t2,percentage,t);
                  DownPayMul(baseprice,percentage,baseprice);
                end else begin
//                  t2 = ORrw.Sum + FindVAT(ORrw.VATCode,ORrw.Sum,ORr.InclVAT,ORr.NoTAXonVAT); vat will be calculated per vat code
                  t2 = ORrw.Sum;
                  DownPayMul(t2,percentage,t);
                  DownPayMul(baseprice,percentage,t2);
                  baseprice = t2;
                end;
              case 1:
                if (ORr.InclVAT!=0) then begin
                  t2 = ORrw.Sum;
                  DownPayMul(t2,percentage,t);
                  DownPayMul(baseprice,percentage,baseprice);
                end else begin
                  t2 = ORrw.Sum + FindVAT(ORrw.VATCode,ORrw.Sum,ORr.InclVAT,ORr.NoTAXonVAT);
                  DownPayMul(t2,percentage,t);
                  DownPayMul(baseprice,percentage,t2);
                  baseprice = t2;
                end;
            end;
        end;
        DownPayMul(ORrw.Price,percentage,price);
        
        if (blank(t)==false or ORrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
          ClearRow(IVp,IVrw,kInvoiceRowTypeDownpayment);
          IVrw.Sum = t;
          IVrw.ArtCode = ORrw.ArtCode;
          IVrw.Perceptions = INr.Perceptions;
          IVrw.Quant = ORrw.Quant;
          IVrw.Spec = ORrw.Spec;
          IVrw.SalesAcc = ORrw.SalesAcc;
          IVrw.Location = ORrw.Location;
          GetItemSalesAccFromOR(ORr,tstr);
          if (nonblank(tstr)) then begin
            IVrw.SalesAcc = tstr;
          end else begin
            GetItemSalesAcc(DPb.ArtCode,IVp.ExportFlag,tstr);
            if (nonblank(tstr)) then begin
              IVrw.SalesAcc = tstr;
            end;
          end;
          IVrw.VATCode = DPb.VATCode;
          if (blank(IVrw.VATCode)) then begin
            IVrw.VATCode = ORrw.VATCode;
          end;
          IVrw.OrdRow = i;
          IVrw.Price = price;
          IVrw.vRebate = vrebate;
          IVrw.BasePrice = baseprice;
          t2 = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);  
          UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
          FindSalesExVat(TMr,IVrw.VATCode,t2,IVp.InclVAT,IVp.NoTAXonVAT,t2);
          t = IVrw.Quant*IVrw.BasePrice;
          if (IVrw.PriceFactor!=0) then begin
            t = t/IVrw.PriceFactor;
          end;
          IVrw.rowGP = t2 - t;    
          IVrw.TaxTemplateCode = ORrw.TaxTemplateCode;
          UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
          PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
          RowCalculateTaxMatrix_IVVc(IVp,srw,IVrw);
          MatRowPut(IVp,srw,IVrw);
          srw = srw + 1;
        end;
      end;
    end;
//    AddPreviousDownpayment(IVp);
LOrdDownPay:;
  end;
  AddPerceptionTaxesRows_IVVc(IVp);
  IVSumup(IVp,true);
  if ((IVp.Sum4+ORr.DownPaySent)>ORr.Sum4) then begin
    res = USetStr(20406);
    res = res & ORr.Sum4 - ORr.DownPaySent;
    res = res & ". ";
    res = res & USetStr(20412);
    if ((useRemainPerc == 1) and (ORr.DownPaySent < ORr.Sum4)) then begin 
      RemainPerc = ((ORr.Sum4 - ORr.DownPaySent)/ORr.Sum4)*100;
      res = OrdDownPay(IVp,ordnr,sum,RemainPerc,ORr,0);
    end;  
  end;
//  IVp.OfficialSerNr = FindNextLegalSerNr(IVp,CUr.Classification);  //POSN
  OrdDownPay = res;
  return;
end;

global
updating function Integer RecordAction_raOrdDownPay(LongInt ordnr,val percentage,val prepaidsum,var record IVVc IVp,var string errstr,integer userRemainPerc)
begin
  Integer res;
  LongInt newnr;
  record SRBlock SRb;
  string 255 tstr;
  val temp;
  record ORVc ORr;
  
  res = -1;
  RecordNew(IVp);
  IVp.SerNr = -1;
  IVp.OrderNr = ordnr;
  if (IVp.SerNr==-1) then begin
    BlockLoad(SRb);
    newnr = GetCurUserLastNr("IVVc");
    if (newnr==-1) then begin
      newnr = SRb.LastInvNr;
    end;
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,false,"");
    if (IVp.SerNr==-1) then begin
      errstr = USetStr(1747);
      goto LRecordAction_raOrdDownPay;
    end;
  end;
  errstr = OrdDownPay(IVp,ordnr,prepaidsum,percentage,ORr,userRemainPerc);
  if (blank(errstr)) then begin
    if ((MatRowCnt(IVp)>0) and (IVp.SerNr!=-1)) then begin
      IVSumup(IVp,true);
      if (RecordInsert(IVp,false)) then begin
        CreateRecordLink(IVp,CurrentCompany,ORr,CurrentCompany);
        CreateRecordLink(ORr,CurrentCompany,IVp,CurrentCompany);
        res = 1;
      end;
    end;
  end;
LRecordAction_raOrdDownPay:;
  RecordAction_raOrdDownPay = res;
  return;
end;

global
procedure PasteCompulsoryINtoIV(string compitem,record IVVc IVp)
begin
  record CompItemVc CIr;
  record INVc INr;
  row CompItemVc CIrw;
  row IVVc IVrw;
  Integer i,cicnt;  
  Integer ivcnt;
  string 255 inwarning;
  Integer sernrf;

  CIr.Code = compitem;
  if (ReadFirstMain(CIr,1,true)) then begin
    cicnt = MatRowCnt(CIr);
    ivcnt = MatRowCnt(IVp);
    for (i=0;i<cicnt;i=i+1) begin
      if (ivcnt>=199) then begin goto LPasteCompulsoryINtoIV; end;
      MatRowGet(CIr,i,CIrw);
      ClearRow(IVp,IVrw,1);
      IVrw.stp = kInvoiceRowTypeNormal;
      INr.Code = CIrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        IVrw.ArtCode = INr.Code;
        MatRowPut(IVp,ivcnt,IVrw);      
        if (IVVc_PasteArtCode(IVp,ivcnt,inwarning,inwarning,false,sernrf)) then begin    
        end;
        ivcnt = ivcnt + 1;
      end;      
    end;
  end;
LPasteCompulsoryINtoIV:;
  return;
end;

procedure RemovePerceptionTaxesRows_IVVc(var record IVVc IVr)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  
  rwcnt = MatRowCnt(IVr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypePerceptionTax) then begin
      MatRowDelete(IVr,i);
      i = i - 1;
      rwcnt = rwcnt - 1;
    end;
  end;
end;

global
procedure AddPerceptionTaxesRows_IVVc(var record IVVc IVp)
begin
  record RPCUTaxVc RPCUTaxr;
  row RPCUTaxVc RPCUTaxrw;
  Integer i,rwcnt;
  row IVVc IVrw;
  Integer ivrownr;
  record RegionVc Regionr;
  record RPTaxVc RPTaxr;
  record AccBlock Accb;
  record CUVc CUr;
  
  BlockLoad(Accb);
  if (Accb.CalculatePerceptionTaxes!=0) then begin
    RemovePerceptionTaxesRows_IVVc(IVp);
    CUr.Code = IVp.CustCode;
    ReadFirstMain(CUr,1,true);
    if (CUr.NoTax2==0) then begin    
      if (FindRPCUTax(IVp.CustCode,IVp.InvDate,RPCUTaxr)) then begin
        ivrownr = MatRowCnt(IVp);
    //    ClearRow(IVp,IVrw,kInvoiceRowTypeNormal);
    //    IVrw.Spec = " ";
    //    MatRowPut(IVp,ivrownr,IVrw);
    //    ivrownr = ivrownr + 1;
        rwcnt = MatRowCnt(RPCUTaxr); 
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RPCUTaxr,i,RPCUTaxrw);
          if (RPCUTaxrw.CalculateTax==kCalculateTax) then begin
            ClearRow(IVp,IVrw,kInvoiceRowTypePerceptionTax);
            IVrw.CuAccCode = RPCUTaxrw.Region;
            IVrw.TAX2Prc = RPCUTaxrw.TAXPrc;
            Regionr.Code = RPCUTaxrw.Region;
            ReadFirstMain(Regionr,1,true);
            if (blank(IVrw.TAX2Prc)) then begin
              RPTaxr.Region = RPCUTaxrw.Region;
              ReadFirstKey("Region",RPTaxr,1,true);
              IVrw.TAX2Prc = Regionr.Rate;
            end;
            IVrw.SalesAcc = RPCUTaxrw.TAXAcc;
            if (blank(IVrw.SalesAcc)) then begin
              IVrw.SalesAcc = RPCUTaxr.TAXAcc;
            end;
            IVrw.Spec = USetStr(20340) & " " & Regionr.Name;
            if (IVrw.TAX2Prc!=0) then begin
              MatRowPut(IVp,ivrownr,IVrw);
              ivrownr = ivrownr + 1;
            end;
          end;
        end;
        IVSumup(IVp,true);
      end;
    end;
  end;
  return;
end;

procedure RemovePerceptionTaxesRows_ORVc(var record ORVc ORr)
begin
  Integer i,rwcnt;
  row ORVc ORrw;
  
  rwcnt = MatRowCnt(ORr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.stp==kInvoiceRowTypePerceptionTax) then begin
      MatRowDelete(ORr,i);
      i = i - 1;
      rwcnt = rwcnt - 1;
    end;
  end;
end;

global
procedure AddPerceptionTaxesRows_ORVc(var record ORVc ORp)
begin
  record RPCUTaxVc RPCUTaxr;
  row RPCUTaxVc RPCUTaxrw;
  Integer i,rwcnt;
  row ORVc ORrw;
  Integer orrownr;
  record RegionVc Regionr;
  record RPTaxVc RPTaxr;
  record AccBlock Accb;
  record CUVc CUr;
  
  BlockLoad(Accb);
  if (Accb.CalculatePerceptionTaxes!=0) then begin
    RemovePerceptionTaxesRows_ORVc(ORp);
    CUr.Code = ORp.CustCode;
    ReadFirstMain(CUr,1,true);
    if (CUr.NoTax2==0) then begin    
      if (FindRPCUTax(ORp.CustCode,ORp.OrdDate,RPCUTaxr)) then begin
        orrownr = MatRowCnt(ORp);
    //    ClearRow(ORp,ORrw,kInvoiceRowTypeNormal);
    //    ORrw.Spec = " ";
    //    MatRowPut(ORp,orrownr,ORrw);
    //    orrownr = orrownr + 1;
        rwcnt = MatRowCnt(RPCUTaxr); 
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RPCUTaxr,i,RPCUTaxrw);
          if (RPCUTaxrw.CalculateTax==kCalculateTax) then begin
            ClearRow(ORp,ORrw,kInvoiceRowTypePerceptionTax);
            ORrw.Region = RPCUTaxrw.Region;
            ORrw.TAX2Prc = RPCUTaxrw.TAXPrc;
            Regionr.Code = RPCUTaxrw.Region;
            ReadFirstMain(Regionr,1,true);
            if (blank(ORrw.TAX2Prc)) then begin
              RPTaxr.Region = RPCUTaxrw.Region;
              ReadFirstMain(RPTaxr,1,true);
              ORrw.TAX2Prc = Regionr.Rate;
            end;
            ORrw.SalesAcc = RPCUTaxrw.TAXAcc;
            if (blank(ORrw.SalesAcc)) then begin
              ORrw.SalesAcc = RPCUTaxr.TAXAcc;
            end;
            ORrw.Spec = USetStr(20340) & " " & Regionr.Name;
            if (ORrw.TAX2Prc!=0) then begin
              MatRowPut(ORp,orrownr,ORrw);
              orrownr = orrownr + 1;
            end;
          end;
        end;
      end;
    end;
    ORSumup(ORp);
  end;
  return;
end;

procedure RemovePerceptionTaxesRows_QTVc(var record QTVc QTr)
begin
  Integer i,rwcnt;
  row QTVc QTrw;
  
  rwcnt = MatRowCnt(QTr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(QTr,i,QTrw);
    if (QTrw.stp==kInvoiceRowTypePerceptionTax) then begin
      MatRowDelete(QTr,i);
      i = i - 1;
      rwcnt = rwcnt - 1;
    end;
  end;
end;

global
procedure AddPerceptionTaxesRows_QTVc(var record QTVc QTp)
begin
  record RPCUTaxVc RPCUTaxr;
  row RPCUTaxVc RPCUTaxrw;
  Integer i,rwcnt;
  row QTVc QTrw;
  Integer qtrownr;
  record RegionVc Regionr;
  record RPTaxVc RPTaxr;
  record AccBlock Accb;
  record CUVc CUr;
  
  BlockLoad(Accb);
  if (Accb.CalculatePerceptionTaxes!=0) then begin
    RemovePerceptionTaxesRows_QTVc(QTp);
    CUr.Code = QTp.CustCode;
    ReadFirstMain(CUr,1,true);
    if (CUr.NoTax2==0) then begin    
      if (FindRPCUTax(QTp.CustCode,QTp.QTDate,RPCUTaxr)) then begin
        qtrownr = MatRowCnt(QTp);
    //    ClearRow(QTp,QTrw,kInvoiceRowTypeNormal);
    //    QTrw.Spec = " ";
    //    MatRowPut(QTp,qtrownr,QTrw);
    //    qtrownr = qtrownr + 1;
        rwcnt = MatRowCnt(RPCUTaxr); 
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RPCUTaxr,i,RPCUTaxrw);
          if (RPCUTaxrw.CalculateTax==kCalculateTax) then begin
            ClearRow(QTp,QTrw,kInvoiceRowTypePerceptionTax);
            QTrw.Region = RPCUTaxrw.Region;
            QTrw.TAX2Prc = RPCUTaxrw.TAXPrc;
            Regionr.Code = RPCUTaxrw.Region;
            ReadFirstMain(Regionr,1,true);
            if (blank(QTrw.TAX2Prc)) then begin
              RPTaxr.Region = RPCUTaxrw.Region;
              ReadFirstMain(RPTaxr,1,true);
              //QTrw.TAX2Prc = RPTaxr.TAXPrc;
              QTrw.TAX2Prc = Regionr.Rate;
            end;
            QTrw.SalesAcc = RPCUTaxrw.TAXAcc;
            if (blank(QTrw.SalesAcc)) then begin
              QTrw.SalesAcc = RPCUTaxr.TAXAcc;
            end;
            QTrw.Spec = USetStr(20340) & " " & Regionr.Name;
            if (QTrw.TAX2Prc!=0) then begin
              MatRowPut(QTp,qtrownr,QTrw);
              qtrownr = qtrownr + 1;
            end;
          end;
        end;
      end;
    end;
    QTSumup(QTp);
  end;
  return;
end;

global
procedure AddItemWithholdingTaxesRows_IVVc(var record IVVc IVp,Integer rownr,record INVc INr)
begin
  record WHITVc WHITr;
  row WHITVc WHITrw;
  Integer i,rwcnt;
  row IVVc IVrw;
  Integer ivrownr;
  record RegionVc Regionr;
  record ITVc ITr;
	row WHTaxBlock WHTaxrw;
	Integer ivi,ivrwcnt;
  
  if (INr.Withholdings!=0) then begin
  if (FindWHITTax(INr.Group,IVp.InvDate,WHITr)) then begin
    ivrownr = MatRowCnt(IVp);       
    rwcnt = MatRowCnt(WHITr); 
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WHITr,i,WHITrw);
      ivrwcnt = MatRowCnt(IVp);
      for (ivi=0;ivi<ivrwcnt;ivi=ivi+1) begin
        MatRowGet(IVp,ivi,IVrw);
        if (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin
          if (IVrw.WHTax==WHITrw.WHTax) then begin
            goto LALREADYONINVOICE;
          end;
        end;
      end;
      ClearRow(IVp,IVrw,kInvoiceRowTypeWithholdingTax);
      IVrw.WHTax = WHITrw.WHTax;
      IVrw.TAX2Prc = WHITrw.TAXPrc;
      IVrw.SalesAcc = WHITrw.TmpTAXAcc;
      if (blank(WHITrw.TAXAcc)) then begin
        GetWHTaxRow(WHITrw.WHTax,WHTaxrw);
        if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
          IVrw.SalesAcc = WHTaxrw.AccNumber;
        end else begin
          IVrw.SalesAcc = WHTaxrw.TmpAccNumber;
        end;
      end;
      MatRowPut(IVp,ivrownr,IVrw);
      ivrownr = ivrownr + 1;
LALREADYONINVOICE:;
      MatRowGet(IVp,rownr,IVrw);
      IVrw.Withholdings = INr.Withholdings;
      MatRowPut(IVp,rownr,IVrw);
    end;
  end;
  end;
  return;
end;

global
procedure AddWithholdingTaxesRows_IVVc(var record IVVc IVp)
begin
  Integer i,rwcnt;
  row IVVc IVrw;   
  record INVc INr;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) then begin
      if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
        AddItemWithholdingTaxesRows_IVVc(IVp,i,INr);
      end;
    end;
  end;
  return;
end;

procedure PasteCustCodeToIV_Argentinean(var record IVVc IVp,record CUVc CUr)
begin
  record MachineCashVc MCr;
  row MachineCashVc MCrw;
  Integer i,rwcnt;

  if (IVp.FiscalFlag!=0) then begin
    MCr.Code = IVp.MachineName;
    if (ReadFirstMain(MCr,1,true)) then begin
      rwcnt = MatRowCnt(MCr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(MCr,i,MCrw);
        if (MCrw.RegDef==CUr.RegNr2) then begin
          if (MCrw.CUVATRules==3 or MCrw.CUVATRules==4 or MCrw.CUVATRules==5 or MCrw.CUVATRules==7) then begin
            IVp.InclVAT = 2;
            i = rwcnt;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure VATLawPasteCustCodeToIV(var record IVVc IVp,record CUVc CUr)
begin
  if (HasLocalization("ARG")) then begin
    PasteCustCodeToIV_Argentinean(IVp,CUr);
  end;
  return;
end;

global
function Boolean PasteCust2InInv(var record IVVc IVp,record LocalMachineBlock LMb,string efstr,Boolean waf,var string warning,var string errstr,var string prepstr,var string invdatewarn,var string transdatewarn)
begin
  record CUVc CUr;
  record INVc INr;
  record RebVc Rebr;
  record UserVc Userr;
  Boolean found;
  Boolean iscred;
  val x,pr,bal,limit,t;
  record IIBlock IIRec;
  record FreightBlock FreightRec;
  record CreditLimitBlock CLb;
  string 255 tstr,tstr2;
  record GeneralOptionBlock GOb;
  Integer InclVAT;
  val fr,to1,to2,br1,br2;
  string 5 curcode,oldSalesMan,oldpricelist,oldvatcode,oldcurrency;
  record AccBlock ARAccRec;
  record CCatVc CCatr;
  record LoyaltyCardVc LoyaltyCardr;
  Boolean limitdaysf;
  record PDVc PDr;

  warning = "";
  errstr = "";
  prepstr = "";
  invdatewarn = "";
  transdatewarn = "";
  oldpricelist = IVp.PriceList;
  oldvatcode = IVp.CustVATCode;
  oldcurrency = IVp.CurncyCode;
  if (waf==false) then begin
  IVp.DiscSum = blankval;
  IVp.DiscPerc = blankval;
  if (IVp.OKFlag!=0) then begin
    CUr.Code = IVp.CustCode;
    if (ReadFIrstMain(CUr,1,true)) then begin
      found = true;
      IVp.Addr0 = CUr.Name;
      IVp.Addr1 = CUr.InvAddr0;
      IVp.Addr2 = CUr.InvAddr1;
      IVp.Addr3 = CUr.InvAddr2;
      IVp.InvAddr3 = CUr.InvAddr3;
      IVp.InvAddr4 = CUr.InvAddr4;
      IVp.InvCountry = CUr.CountryCode;
      IVp.ClientContact = CUr.Person;
    end;
    goto LPasteCust2InInv;
  end;
  end;
  BlockLoad(GOb);
  BlockLoad(CLb);
  if ((efstr!=IVp.CustCode) and (nonblank(efstr))) then begin
    tstr = IVp.Objects;
    RemoveOldCustObjects(efstr,tstr);
    IVp.Objects = tstr;
  end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    iscred = true;
  end;  
  CUr.Code = IVp.CustCode;
  if (GetCustAndBal2(CUr,limit,bal,IVp.InvDate,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
    BlockLoad(IIRec);
    BlockLoad(FreightRec);
    BlockLoad(ARAccRec);
    CCatr.Code = CUr.CustCat;
    if (ReadFirstMain(CCatr,1,true)) then begin end;
//    if (blank(IVp.ARAcc)) then begin
      IVp.ARAcc = CCatr.ARAcc;
//    end;
    if (blank(IVp.ARAcc)) then begin
      IVp.ARAcc = ARAccRec.ARAcc;
    end;    
    found = true;
    if (HasPriceLists) then begin
      Rebr.Code = CUr.RebCode;
      if (blank(Rebr.Code)) then begin
        Rebr.Code = CCatr.RebCode;
      end;
      if (ReadFirstMain(Rebr,1,true)) then begin
        IVp.DiscPerc = Rebr.DiscPerc;
      end;
    end;
    IVp.BankCode = CUr.AccOperator;
    IVp.Addr0 = CUr.Name;
    IVp.Addr1 = CUr.InvAddr0;
    IVp.Addr2 = CUr.InvAddr1;
    IVp.Addr3 = CUr.InvAddr2;
    IVp.InvAddr3 = CUr.InvAddr3;
    IVp.InvAddr4 = CUr.InvAddr4;
    IVp.InvCountry = CUr.CountryCode;
    IVp.ClientContact = CUr.Person;
    IVp.CustCat = CUr.CustCat;
    IVp.IntCode = IIRec.IntRate;
    if (CUr.IntRate!=0) then begin
      IVp.IntCode = CUr.IntRate;
    end;
    IVp.CurncyCode = CUr.CurncyCode;
    switch (CUr.IPBookVAT) begin
      case 1:
        IVp.IPBookVAT = CUr.IPBookVAT;
      case 2:
        IVp.IPBookVAT = 0;
      otherwise
        IVp.IPBookVAT = ARAccRec.IPBookVAT;
    end;
    IVp.Objects = AddObjectToObjectList(IVp.Objects,CUr.Objects);
    oldSalesMan = IVp.SalesMan;
    SetSalesMan(IVp.SalesMan,CUr.SalesMan);
    if ((IVp.SalesMan!=oldSalesMan)) then begin
      tstr2 = IVp.Objects;
      RemoveOldPersObjects(oldSalesMan,tstr2);
      IVp.Objects = tstr2;
    end;
    /*
    GetUserObject(IVp.SalesMan,tstr);    
    IVp.Objects = AddObjectToObjectList(IVp.Objects,tstr);
    GetSalesGroup(IVp.SalesMan,IVp.SalesGroup);
    */
    Userr.Code = IVp.SalesMan;
    if (ReadFirstMain(Userr,1,true)) then begin
      IVp.Objects = AddObjectToObjectList(IVp.Objects,Userr.PersObjx);
      IVp.SalesGroup = Userr.SalesGroup;
    end;   
    if (SingleUserMode) then begin
      if (IVp.LangCode!=CUr.LangCode) then begin
        IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,IVp.SerNr,false,CUr.LangCode);
      end;
    end;
    IVp.LangCode = CUr.LangCode;
    IVp.ShipDeal = CUr.ShipDeal;
    IVp.ShipMode = CUr.ShipMode;
    IVp.OrgCust = "";
    if (HasPriceLists) then begin
      IVp.PriceList = CUr.PLCode;
      IVp.RebCode = CUr.RebCode;
      if (blank(IVp.RebCode)) then begin
        IVp.RebCode = CCatr.RebCode;
      end;
    end;      
    if (iscred==false) then begin
      IVp.PayDeal = CUr.PayDeal;
      PastePDInInv(IVp,"",true);
    end;
    IVp.PriceList = CUr.PLCode;
    if (blank(IVp.PriceList)) then begin
      IVp.PriceList = CCatr.PLCode;
    end;
    IVp.RebCode = CUr.RebCode;
    if (blank(IVp.RebCode)) then begin
      IVp.RebCode = CCatr.RebCode;
    end;
    IVp.CustVATCode = CUr.VATCode;
    if (CUr.TaxTemplateCode!=IVp.CustTaxTemplateCode) then begin
      IVVc_FillupTaxTemplate(IVp);
      IVp.CustTaxTemplateCode = CUr.TaxTemplateCode;
    end;    
    IVp.Phone = CUr.Phone;
    IVp.Fax = CUr.Fax;
    InclVAT = IVp.InclVAT;
    tstr = CUr.PLCode;
    if (nonblank(tstr)) then begin
      IVp.PriceList = tstr;
    end;
    if (blank(IVp.PriceList)) then begin
      PDr.Code = IVp.PayDeal;
      if (GetPD(PDr)) then begin
        IVp.PriceList = PDr.PriceList;
      end;
    end;
    if (HasPriceLists) then begin
      GetPriceList(IVp.CustCat,IVp.TransDate,IVp.TransTime,IVp.PriceList,InclVAT);
      IVp.InclVAT = InclVAT;
    end else begin
      IVp.PriceList = "";
    end;
    if (nonblank(CUr.DelAddr0) or nonblank(CUr.DelAddr1) or nonblank(CUr.DelAddr2) or nonblank(CUr.DelAddr3) or nonblank(CUr.DelAddr4)) then begin
      IVp.ShipAddr0 = CUr.Name;
      IVp.ShipAddr1 = CUr.DelAddr0;
      IVp.ShipAddr2 = CUr.DelAddr1;
      IVp.ShipAddr3 = CUr.DelAddr2;
      IVp.DelAddr3 = CUr.DelAddr3;
      IVp.DelAddr4 = CUr.DelAddr4;
      IVp.DelCountry = CUr.DelCountry;
    end else begin
      IVp.ShipAddr0 = "";
      IVp.ShipAddr1 = "";
      IVp.ShipAddr2 = "";
      IVp.ShipAddr3 = "";
      IVp.DelAddr3 = "";
      IVp.DelAddr4 = "";
      IVp.DelCountry = "";
    end;
    if (HasLocalization("HRV")) then begin
      if (LMb.SendFiscalInvoice==0) then begin
        IVp.FiscalFlag = CUr.FiscalFlag;
      end;
    end else begin
      IVp.FiscalFlag = CUr.FiscalFlag;
    end;
    IVp.SelfBilling = CUr.SelfBilling;
    IVp.VATNr = CUr.VATNr;
    IVp.RegNr1 = CUr.RegNr1;
    IVp.InvComment = CUr.OrderComment;
    IVp.ExportFlag = CUr.ExportFlag;
    IVp.Region = CUr.Region;
    IVp.NoRemndrFlag = 0;
    IVp.NoInterestFlag = 0;
    IVp.NoTax1 = CUr.NoTax1;
    IVp.NoTax2 = CUr.NoTax2;
    curcode = IVp.CurncyCode;
    GetFullCurncyRate(curcode,IVp.InvDate,fr,to1,to2,br1,br2);
    IVp.CurncyCode = curcode;
    IVp.FrRate = fr;
    IVp.ToRateB1 = to1;
    IVp.ToRateB2 = to2;
    IVp.BaseRate1 = br1;
    IVp.BaseRate2 = br2;
    IVp.FrItem = FreightRec.FrItem;
    IVp.FrGPPercent = FreightRec.FrGPPercent;
    INr.Code = IVp.FrItem;
    if (ReadFirstMain(INr,1,true)) then begin
      IVp.FrVATCode = CUr.VATCode;
      if (blank(IVp.FrVATCode)) then begin
        GetItemVATCode(IVp.FrItem,IVp.ExportFlag,tstr,true);
        IVp.FrVATCode = tstr;
      end;
      GetItemSalesAcc(IVp.FrItem,IVp.ExportFlag,tstr);
      IVp.FrSalesAcc = tstr;
      IVp.FrBase = INr.UPrice1;
    end else begin
      IVp.FrItem = "";
      IVp.FrGPPercent = blankval;
      IVp.FrBase = blankval;
      IVp.FrPrice = blankval;
      IVp.FrGP = blankval;
      IVp.FrVATCode = "";
      IVp.FrSalesAcc = "";
    end;
    if (FreightRec.UseWeight!=0) then begin
      CalculateFreightWeight(IVp,true);
    end else begin
      IVp.FrPrice = DivRateToBase1(IVp.CurncyCode,IVp.FrBase,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
      pr = 100;
      pr = pr - IVp.FrGPPercent;
      CalcSum(1,IVp.FrBase,0,pr,t,GOb.UseDiscount);
      IVp.FrGP = t;
    end;
    VATLawPasteCustCodeToIV(IVp,CUr);
    IVSumup(IVp,true);
    if (nonblank(CUr.WarnText1)) then begin
      warning = CUr.WarnText1;
    end;
    if (CLb.IVPaste==1) then begin
      if (limitdaysf) then begin
        errstr = USetStr(22260);
      end;
      if (limit>0) then begin
        if (bal>limit) then begin
          if (limit==0.001 and CLb.Base==kCreditLimitBasedOnOpenInvSuspendOnOverdue) then begin
            errstr = USetStr(39600);
          end else begin
            errstr = USetStr(1164);
          end;
        end;
      end;
    end;
    if (nonblank(CUr.CompItemCode)) then begin
      PasteCompulsoryINtoIV(CUr.CompItemCode,IVp);
    end;
    IVGetRate(IVp);
    IVOpenPrepExists(IVp.CustCode);//prepstr, no such string
    if (DateWarned(IVp.TransDate,"IVVc")) then begin
      transdatewarn = USetStr(1045);
    end;
    if (DateWarned(IVp.InvDate,"IVVc")) then begin
      invdatewarn = USetStr(1045);
    end;  
    if (oldpricelist!=IVp.PriceList or oldvatcode!=IVp.CustVATCode or oldcurrency!=IVp.CurncyCode) then begin
      IVDUpdatePrices(IVp,false);
    end;
  end;
  AddPerceptionTaxesRows_IVVc(IVp);
  AddWithholdingTaxesRows_IVVc(IVp);
  IVp.LoyaltyCardNr = "";
  IVp.LCMLevel = "";
  IVp.Points = 0;

  LoyaltyCardr.CustCode = CUr.Code;
  if (ReadFirstKey("ActCustCode",LoyaltyCardr,1,true)) then begin
   IVp.LoyaltyCardNr = LoyaltyCardr.SerNr;
   IVVc_PasteLoyaltyCardNr(IVp,LMb);
  end;
  IVVc_PasteInvCountry(IVp,"");
  IVVc_PasteDelCountry(IVp,"");

LPasteCust2InInv:;  
  PasteCust2InInv = found;
  return;
end;

global
function Boolean IVVc_PasteAddr0(var record IVVc IVr,record LocalMachineBlock LMb,string efstr,Boolean waf,var string warning,var string errstr,var string prepstr,var string invdatewarn,var string transdatewarn)
begin
  Boolean found;
  record CUVc CUr;

  CUr.Code = IVr.Addr0;
  found = ReadFirstMain(CUr,1,true);
  if (found) then begin
    IVr.CustCode = CUr.Code;
  end else begin
    CUr.Name = IVr.Addr0;
    found = ReadFirstKey("Name",CUr,1,true);    
    if (found) then begin
      if (IVr.CustCode!=CUr.Code) then begin
        IVr.CustCode = CUr.Code;
      end;
    end;
  end;
  if (found) then begin
    found = PasteCust2InInv(IVr,LMb,efstr,true,warning,errstr,prepstr,invdatewarn,transdatewarn);
  end;
  IVVc_PasteAddr0 = found;
  return;
end;

function val CUGetStartBalanceNotFullMonth(record CUVc CUr,string colns,string curncy,Date sd,Date ed,Boolean basecurf,val startdbgv)
begin
  val res;
  record IPrsVc IPrsr;
  record IVVc oIVr;
  record IVVc IVr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Boolean TrHs,testf,addlossf;
  val opensum;
  val t,lossv;
  val fr,to1,to2,br1,br2;
  record BaseCurBlock bcur;
  record CLInVc CLInr;
  row CLInVc CLInrw;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;

//  res = startdbgv;
/*
StartFormat(15);    
 OutString(0,0,"jj0",false);
 OutString(200,0,sd,false);
 OutString(300,0,ed,false);
 OutString(400,0,colns,false);
EndFormat;
*/
  BlockLoad(bcur);
  TrHs = true;
  IPrsr.CustCode = CUr.Code;
  IPrsr.TransDate = sd;

  if (blankdate(IPrsr.TransDate)) then begin
    IPrsr.TransDate = AddYear(IPrsr.TransDate,1980);
    IPrsr.TransDate = AddMonth(IPrsr.TransDate,1);
    IPrsr.TransDate = AddDay(IPrsr.TransDate,1);
  end;
  while (LoopKey("CustTransKey",IPrsr,2,TrHs)) begin
    if (TrHs) then begin
      if (IPrsr.CustCode!=CUr.Code) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if (IPrsr.TransDate>ed) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      opensum = blankval;
      switch (IPrsr.TransType) begin
        case kIPrsTransTypeInvoice:
          testf = true;
          IVr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(IVr,1,true)==false) then begin testf = false; end;        
          if (IVr.Invalid!=0) then begin testf = false; end;          
          if (IVr.OKFlag==0) then begin testf = false; end;          
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            if (IVr.CredInv>0) then begin 
              oIVr.SerNr = IVr.CredInv;
              if (ReadFirstMain(oIVr,1,true)) then begin
                if (oIVr.TransDate>=sd) then begin
                  testf = false; 
                end;
              end;
            end;
          end;
          if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = false; end;
          if (nonblank(curncy)) then begin
            if (IVr.CurncyCode!=curncy) then begin testf = false; end;
          end;
          switch (colns) begin
            case "paidvalue": testf = false;
          end;
          if (testf) then begin
            if (IVr.CredInv>0) then begin 
              res = res - MulRateToBase1(oIVr.CurncyCode,IVr.Sum4,oIVr.FrRate,oIVr.ToRateB1,oIVr.ToRateB2,oIVr.BaseRate1,oIVr.BaseRate2,DefaultCurRoundOff);;
            end else begin
              if (CheckIfIVOpen(ed,IVr,colns,opensum,false,basecurf)) then begin 
                res = res + opensum;
              end;
            end;
          end;
/*          
StartFormat(15);    
 OutString(0,0,"jj1",false);
 OutString(70,0,IPrsr.TransType,false);
 OutString(100,0,IPrsr.TransNr,false);
 OutString(300,0,opensum,false);
 OutString(400,0,res,false);
EndFormat;
*/
        case kIPrsTransTypeReceipt:
            IPr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              if (IPr.RejectedFlag==0) then begin
                rwcnt = MatRowCnt(IPr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(IPr,i,IPrw);
                  testf = true;
                  if (IPrw.ovst!=0) then begin testf = false; end;
                  if (IPrw.InvoiceNr!=IPrsr.IVNr) then begin testf = false; end;
                  if (nonblank(curncy)) then begin
                    if (IPrw.InvCurncy!=curncy) then begin testf = false; end;
                  end;
                  if (colns!="paidvalue") then begin
                    if (IPrw.InvoiceNr<0) then begin testf = false; end;
                  end;
                  
                  if (testf) then begin
                    if (IPrw.stp!=1) then begin testf = false; end;
                    if (IPrsr.IVNr!=-1) then begin 
                      if (colns!="paidvalue" and colns!="balance") then begin
                        testf = false;
                      end else begin
                        oIVr.SerNr = IPrsr.IVNr;
                        if (ReadFirstMain(oIVr,1,true)) then begin
                          if (oIVr.TransDate>=sd) then begin testf = false; end;
                        end else begin
                          testf = false;
                        end;
                      end;
                    end;
                    if (IPrw.PayDate!=IPrsr.CustDate) then begin testf = false; end;
                    if (IPrw.CustCode!=CUr.Code) then begin testf = false; end;

                      if (testf) then begin
                            switch (colns) begin
                              case "grossprofit":
                              case "salesexclvat":
                              case "paidvalue":
                                t = IPrw.InvVal;
                                if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                                  if (IPrw.B1BankVal!=0) then begin
                                    t = IPrw.B1BankVal;
                                  end else begin
                                    GetFullCurncyRate(CUr.CurncyCode,IPr.TransDate,fr,to1,to2,br1,br2);
                                    t = MulRateToBase1(CUr.CurncyCode,t,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                                  end;
                                end;
                                res = res - t;
                                if (IPrw.CUPNr>0) then begin
                                  GetARPayRate(-1,IPrw.CUPNr,fr,to1,to2,br1,br2,IPrw.InvCurncy,IPr.TransDate);          
                                  lossv = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                                  lossv = lossv - t;
                                  res = res - lossv;
                                end;
                              otherwise 
                                addlossf = false;
                                t = IPrw.InvVal;
//                                if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1) or (basecurf)) then begin       
//this must be passed as argument
                                if (basecurf) then begin       
                                  if (IPrw.B1BankVal!=0) then begin
                                    t = IPrw.B1BankVal;
                                  end else begin
                                    if (IPrw.BankCurncy==bcur.BaseCur1) then begin
                                      t = IPrw.BankVal;
                                    end else begin
                                      GetFullCurncyRate(CUr.CurncyCode,IPr.TransDate,fr,to1,to2,br1,br2);
                                      t = MulRateToBase1(CUr.CurncyCode,t,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                                      addlossf = true;
                                    end;
                                  end;
                                end;
                                res = res - t;
                                if (IPrw.CUPNr>0) and (addlossf) then begin
                                  GetARPayRate(-1,IPrw.CUPNr,fr,to1,to2,br1,br2,IPrw.InvCurncy,IPr.TransDate);          
                                  lossv = MulRateToBase1(IPrw.InvCurncy,IPrw.InvVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                                  lossv = lossv - t;
                                  res = res - lossv;
                                end;
                            end;
                      end;
                      if (IPrw.stp==kReceiptRowTypeWriteoff) then begin
                        switch (colns) begin
                          case "paidvalue":
                            t = IPrw.InvVal;
                            if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                              GetFullCurncyRate(CUr.CurncyCode,IPr.TransDate,fr,to1,to2,br1,br2);
                              t = MulRateToBase1(CUr.CurncyCode,t,fr,to1,to2,br1,br2,DefaultCurRoundOff);
                            end;
                            res = res - t;
                          otherwise 
                            res = res - IPrw.InvVal;
                        end;
                      end;
                  end;
                end;
/*                
StartFormat(15);    
 OutString(0,0,"jj2",false);
 OutString(70,0,IPrsr.TransType,false);
 OutString(100,0,IPrsr.TransNr,false);
 OutString(300,0,-IPrw.InvVal,false);
 OutString(400,0,res,false);
EndFormat;
*/
              end;              
            end;
        case kIPrsTransTypeCashIn:            
          CLInr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(CLInr,1,true)) then begin
            testf = true;
            if (CLInr.Invalid!=0) then begin testf = false; end;
            if (CLInr.CUCode!=IPrsr.CustCode) then begin testf = false; end;
            if (testf) then begin
              rwcnt = MatRowCnt(CLInr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(CLInr,i,CLInrw);
                testf = true;
                if (CLInrw.TransNr!=IPrsr.IVNr) then begin testf = false; end;
                if (IPrsr.IVNr<0) then begin
                  if (CLInrw.Type!=4) then begin testf = false; end;
                end else begin
                  if (CLInrw.Type!=1) then begin testf = false; end;
                  if (testf) then begin
                    IVr.SerNr = CLInrw.TransNr;
                    if (ReadFirstMain(IVr,1,true)) then begin
                      if (IVr.TransDate<sd) then begin testf = false; end;
                    end else begin
                      testf = false;
                    end;
                  end;
                end;
                if (testf) then begin
                  switch (colns) begin
                    case "grossprofit":
                    case "salesexclvat":
                    case "paidvalue":
                      t = CLInrw.Sum;
                      if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                        t = MulRateToBase1(CLInr.CurncyCode,t,CLInr.FrRate,CLInr.ToRateB1,CLInr.ToRateB2,CLInr.BaseRate1,CLInr.BaseRate2,DefaultCurRoundOff);
                      end;
                      res = res - t;
                    otherwise 
                      res = res - CLInrw.Sum;
                  end;
                end;
              end;
            end;
          end;
        case kIPrsTransTypeReverseCustomerPrepayment:            
          if (true) then begin
//          if (IPrsr.IVNr==-1) then begin
            CLOutr.SerNr = IPrsr.TransNr;
            if (ReadFirstMain(CLOutr,1,true)) then begin
              if (CLOutr.Invalid==0) then begin
                rwcnt = MatRowCnt(CLOutr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(CLOutr,i,CLOutrw);
                  if (CLOutrw.Type==5) then begin
                    if (CLOutr.CUCode==IPrsr.CustCode) then begin
                      switch (colns) begin
                        case "grossprofit":
                        case "salesexclvat":
                        case "paidvalue":
                          t = CLOutrw.Sum;
                          if ((blank(CUr.CurncyCode)) or (CUr.CurncyCode==bcur.BaseCur1)) then begin          
                            t = MulRateToBase1(CLOutr.CurncyCode,t,CLOutr.FrRate,CLOutr.ToRateB1,CLOutr.ToRateB2,CLOutr.BaseRate1,CLOutr.BaseRate2,DefaultCurRoundOff);
                          end;
                          res = res + t;
                        otherwise res = res + CLOutrw.Sum;
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
      end;
    end;
  end;  
/*  
StartFormat(15);    
 OutString(0,0,"jje",false);
 OutString(400,0,res,false);
EndFormat;
*/
  CUGetStartBalanceNotFullMonth = res;          
  return;
end;

global
procedure CUGetStartBalance(record CUVc CUr,string colns,string curncy,Date sd,var val v,Boolean basecurf)
begin
  Date ld;
  record CSVc CSr;
  Date blankd;
  Date ed;
  
  v = blankval;
  if (GetDay(sd)!=1) then begin
    ld = sd;
    ld.day = 1;
    ld = AddDay(ld,-1);
    CSr.CustCode = CUr.Code;
    CSr.CurncyCode = curncy;    
    if (basecurf) then begin
      CSr.CurncyCode = "";    
    end;
    v = GetBalance(CSr,colns,ld);    
/*    
StartFormat(15);    
 OutString(0,0,"aa0",false);
 OutString(300,0,ld,false);
 OutString(400,0,v,false);
EndFormat;
*/
    ld = sd;
    ld.day = 1;
    ed = AddDay(sd,-1);
    v = v + CUGetStartBalanceNotFullMonth(CUr,colns,curncy,ld,ed,basecurf,v);
  end else begin
    ld = AddDay(sd,-1);
//    v = GetBalance(CUr,colns,ld);
    CSr.CustCode = CUr.Code;
    CSr.CurncyCode = curncy;    
    if (basecurf) then begin
      CSr.CurncyCode = "";    
    end;
    v = GetBalance(CSr,colns,ld);
/*    
StartFormat(15);    
 OutString(0,0,"aa1",false);
 OutString(300,0,ld,false);
 OutString(400,0,v,false);
EndFormat;
*/
  end;
  return;
end;

global
procedure CUGetEndBalance(record CUVc CUr,string colns,string curncy,Date ed,var val v,Boolean basecurf)
begin  
  record CSVc CSr;
  Date sd,ld;

  v = blankval;
  if (ed.day!=DaysInMonth(ed.year,ed.month)) then begin
    sd.day = 1;
    sd.month = ed.month;
    sd.year = ed.year;
    ld = AddDay(sd,-1);
    CSr.CustCode = CUr.Code;
    CSr.CurncyCode = curncy;    
    v = GetBalance(CSr,colns,ld);    
    v = v + CUGetStartBalanceNotFullMonth(CUr,colns,curncy,sd,ed,basecurf,v);
  end else begin
//    v = GetBalance(CUr,colns,ed);

    CSr.CustCode = CUr.Code;
    CSr.CurncyCode = curncy;    
    v = GetBalance(CSr,colns,ed);
  end;
  return;
end;

global
procedure VEGetStartBalance(record CUVc VEr,string colns,string curncy,Date sd,var val v)
begin
  Date ld;
  record VSVc VSr;
  
  ld = AddDay(sd,-1);
//  v = GetBalance(VEr,colns,ld);

  VSr.VECode = VEr.Code;
  VSr.CurncyCode = curncy;    
  v = GetBalance(VSr,colns,ld);
  return;
end;

global
function val VEGetEndBalance(record CUVc VEr,string colns,string curncy,Date ed)
begin
  record VSVc VSr;
  val v;
  
//  v = GetBalance(VEr,colns,ed);

  VSr.VECode = VEr.Code;
  VSr.CurncyCode = curncy;    
  v = GetBalance(VSr,colns,ed);
  VEGetEndBalance = v;
  return;
end;

global
updating procedure AddORtoDfncyStock(LongInt FromSerNr)
begin
  record StockReservVc SResr;
  Boolean found,testf;
  val q;
  record DfncyStockVc DSr;
  record PIVc PIr;

  found = true;
  SResr.Donef = 0;
  SResr.FromFileName = 0;      
  SResr.FromSerNr = FromSerNr;      
  while (LoopKey("FromItem",SResr,3,found)) begin
    if (SResr.Donef!=0) then begin found = false; end;
    if (SResr.FromFileName!=0) then begin found = false; end;
    if (SResr.FromSerNr!=FromSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      q = SResr.Quant - DfncyStockForStockReserv(SResr.FromFileName,SResr.FromSerNr,SResr.ArtCode);
      if (q<=0) then begin testf = false; end;
      if (SResr.ToFileName!=kResTypeMakeNewPO) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordNew(DSr);
        DSr.StockReservNr = SResr.SerNr;
        DSr.ArtCode = SResr.ArtCode;
        DSr.Location = SResr.FromLocation;
        GetPurchaseItem(SResr.ArtCode,DSr.Location,PIr);
        DSr.FromFileName = SResr.FromFileName;
        DSr.FromSerNr = SResr.FromSerNr;
        DSr.Quant = q;
        DSr.PICode = PIr.VEItemCode;
        DSr.VECode = PIr.VECode;
        RecordStore(DSr,false);
        StepForward(DSr,1);
      end;      
    end;
  end;
  return;
end;

global
function Boolean DfncyStockVcExists(string artcode,string location)
begin
  Boolean found,res;
  record DfncyStockVc DSr;

  DSr.ArtCode = artcode;
  DSr.Location = location;
  found = true;
  while (LoopKey("ActArtCode",DSr,1,found)) begin
    if (DSr.ArtCode!=artcode) then begin found = false; end;
    if (found) then begin
      if (DSr.Location==location) and (DSr.FromSerNr<0) then begin
        res = true;
        found = false;
      end;
    end;
  end;
  DfncyStockVcExists = res;
  return;
end;

global
function Boolean FindDfncyStock(string artcode,string location,var record DfncyStockVc aDSr)
begin
  Boolean found,res;
  record DfncyStockVc DSr;

  RecordClear(aDSr);
  DSr.ArtCode = artcode;
  DSr.Location = location;
  found = true;
  while (LoopKey("ActArtCode",DSr,1,found)) begin
    if (DSr.ArtCode!=artcode) then begin found = false; end;
    if (found) then begin
      if (DSr.Location==location) and (DSr.FromSerNr<0) then begin
        res = true;
        found = false;
        RecordCopy(aDSr,DSr);
      end;
    end;
  end;
  FindDfncyStock = res;
  return;
end;

global
updating function Boolean DblAssignJobCustVc_Remote(record RcVc RepSpec,LongInt shopbasknr)
begin
  Boolean res;
  record ShopBaskVc ShopBaskr;
  record JobVc Jobr;
  Integer pos;
  
  ShopBaskr.SerNr = shopbasknr;
  if (ReadFirstMain(ShopBaskr,1,true)) then begin
    if (RepSpec.flags[29]==0) then begin
      GetCustAndBasket(RepSpec.f1,ShopBaskr.CUCode,ShopBaskr.BaskNo);
      res = true;
    end;      
    if (RepSpec.flags[29]==2) then begin
      if (RepSpec.long2>0) then begin
        Jobr.SerNr = RepSpec.long2;
        if (ReadFIrstMain(Jobr,1,true)) then begin
          ShopBaskr.OwnerSerNr = RepSpec.long2;
          ShopBaskr.CUCode = RepSpec.f1;
          if (blank(ShopBaskr.CUCode)) then begin
            ShopBaskr.CUCode = Jobr.CUCode;
          end;
          res = true;
        end;
      end;
    end;  
    if (res) then begin
      if (RecordStore(ShopBaskr,true)) then begin end;
    end;
  end;
  DblAssignJobCustVc_Remote = res;
  return;
end;

global
updating function Boolean RecordAction_rlBud1LOK(var record Bud1Vc Bud1p)
begin
  Boolean res;
  record Bud1Vc oldBud1p;
  Integer updatemode;
  
  updatemode = 2;//Rs_update
  if (IsRecordLocked(Bud1p)==false) then begin
    if (ReadFirstMain(Bud1p,0,true)) then begin end;  
    if (Bud1p.OKFlag==0) then begin
      RecordCopy(oldBud1p,Bud1p);
      Bud1p.OKFlag = 1;
      if (RecordUpdate(oldBud1p,Bud1p,true)==0) then begin
        res = true;
      end;
    end;
  end;
LRecordAction_rlBud1LOK:;
  RecordAction_rlBud1LOK = res;
  return;
end;

global
updating function Boolean RecordAction_rlBud2LOK(var record Bud2Vc Bud2p)
begin
  Boolean res;
  record Bud2Vc oldBud2p;
  Integer updatemode;
  
  updatemode = 2;//Rs_update
  if (IsRecordLocked(Bud2p)==false) then begin
    if (ReadFirstMain(Bud2p,0,true)) then begin end;  
    if (Bud2p.OKFlag==0) then begin
      RecordCopy(oldBud2p,Bud2p);
      Bud2p.OKFlag = 1;
      if (RecordUpdate(oldBud2p,Bud2p,true)==0) then begin
        res = true;
      end;
    end;
  end;
LRecordAction_rlBud2LOK:;
  RecordAction_rlBud2LOK = res;
  return;
end;

global
procedure ReplacePerceptionTaxesRows_IVVc(var record IVVc IVp)
begin
  Integer i,rwcnt;
  row IVVc IVrw;

  rwcnt = MatRowCnt(IVp); 
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypePerceptionTax) then begin
      MatRowDelete(IVp,i);
      i = i - 1;
    end;
  end;
  AddPerceptionTaxesRows_IVVc(IVp);
  return;
end;

global
procedure ReplacePerceptionTaxesRows_ORVc(var record ORVc ORp)
begin
  Integer i,rwcnt;
  row ORVc ORrw;

  rwcnt = MatRowCnt(ORp); 
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.stp==kInvoiceRowTypePerceptionTax) then begin
      MatRowDelete(ORp,i);
      i = i - 1;
    end;
  end;
  AddPerceptionTaxesRows_ORVc(ORp);
  return;
end;

global
procedure ReplacePerceptionTaxesRows_QTVc(var record QTVc QTp)
begin
  Integer i,rwcnt;
  row QTVc QTrw;

  rwcnt = MatRowCnt(QTp); 
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    if (QTrw.stp==kInvoiceRowTypePerceptionTax) then begin
      MatRowDelete(QTp,i);
      i = i - 1;
    end;
  end;
  AddPerceptionTaxesRows_QTVc(QTp);
  return;
end;

global
procedure AddPerceptionTaxesRows_OYVc(var record OYVc OYp)
begin
  record RPCUTaxVc RPCUTaxr;
  row RPCUTaxVc RPCUTaxrw;
  Integer i,rwcnt;
  row OYVc OYrw;
  Integer qtrownr;
  record RegionVc Regionr;
  record RPTaxVc RPTaxr;
  record AccBlock Accb;
  
  BlockLoad(Accb);
  if (Accb.CalculatePerceptionTaxes!=0) then begin
    if (FindRPCUTax(OYp.CustCode,OYp.OYDate,RPCUTaxr)) then begin
      qtrownr = MatRowCnt(OYp);
  //    ClearRow(OYp,OYrw,kInvoiceRowTypeNormal);
  //    OYrw.Spec = " ";
  //    MatRowPut(OYp,qtrownr,OYrw);
  //    qtrownr = qtrownr + 1;
      rwcnt = MatRowCnt(RPCUTaxr); 
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RPCUTaxr,i,RPCUTaxrw);
        if (RPCUTaxrw.CalculateTax==kCalculateTax) then begin
          ClearRow(OYp,OYrw,kInvoiceRowTypePerceptionTax);
          OYrw.Region = RPCUTaxrw.Region;
          OYrw.TAX2Prc = RPCUTaxrw.TAXPrc;
          Regionr.Code = RPCUTaxrw.Region;
          ReadFirstMain(Regionr,1,true);
          if (OYrw.TAX2Prc==0) then begin
            RPTaxr.Region = RPCUTaxrw.Region;
            ReadFirstMain(RPTaxr,1,true);
            //OYrw.TAX2Prc = RPTaxr.TAXPrc;
            OYrw.TAX2Prc = Regionr.Rate;
          end;
          OYrw.SalesAcc = RPCUTaxrw.TAXAcc;
          if (blank(OYrw.SalesAcc)) then begin
            OYrw.SalesAcc = RPCUTaxr.TAXAcc;
          end;
          OYrw.Spec = USetStr(20340) & " " & Regionr.Name;
          MatRowPut(OYp,qtrownr,OYrw);
          qtrownr = qtrownr + 1;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure ReplacePerceptionTaxesRows_OYVc(var record OYVc OYp)
begin
  Integer i,rwcnt;
  row OYVc OYrw;

  rwcnt = MatRowCnt(OYp); 
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    if (OYrw.stp==kInvoiceRowTypePerceptionTax) then begin
      MatRowDelete(OYp,i);
      i = i - 1;
    end;
  end;
  AddPerceptionTaxesRows_OYVc(OYp);
  return;
end;

