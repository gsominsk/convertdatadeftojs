external function Boolean GetWHTaxRowNr(string,var row WHTaxBlock,var Integer);
external procedure IVVc_PastePrice(var record IVVc,record IVVc,Integer,var string);
external function Boolean IVVc_PasteQuantity(var record IVVc,Integer);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external procedure IVVc_PastePayDeal(var record IVVc,string,string);
external function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external function Boolean FindWHVETax(string,Date,var record WHVEVc);
external function roundmode SetRoundModeD(Integer);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external procedure GetPayType(String,var Integer);

global
function longint GetOriginNr(Integer ToType,LongInt CheckNr)
begin
  Record CheckVc Checkr;
  Record OwnCheckVc OwnCheckr;
 
  switch (ToType) begin
    case 0:
      Checkr.SerNr= CheckNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        GetOriginNr = Checkr.FromNo;
      end;
    case 1:
      OwnCheckr.SerNr = CheckNr;
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        GetOriginNr = OwnCheckr.FromNo;
      end;
    case 2:
      Checkr.SerNr = CheckNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        GetOriginNr = Checkr.FromNo;
      end;
    case 3:
      Checkr.SerNr = CheckNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        GetOriginNr = Checkr.ToNo;
      end;
    case 4:
      OwnCheckr.SerNr = CheckNr;
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        GetOriginNr = OwnCheckr.FromNo;
      end;
  end;
  return;
end;
/*
global
procedure GetEndorsedSupplier(LongInt CheckNr,var string sup)
begin
  Record ChqLinkVc ChqLinkr;
  Record OPVc OPr;
  row OPVc OPrw;

  sup = "";
  ChqLinkr.RFlag = 2;
  ChqLinkr.ChqNr = CheckNr;
  if readfirstmain(ChqLinkr,2,true) then begin 
    OPr.SerNr = ChqLinkr.OriginNr;
    if readfirstmain(OPr,1,true) then begin 
      if matrowcnt(OPr) > 0 then begin
        MatRowGet(OPr,0,OPrw);
        sup = OPrw.VECode;
      end; 
    end; 
  end;
  return;
end;
*/

function LongInt NextWHTaxNoForWHTax(string whtax)
begin
  LongInt res;
  Boolean found;
  record WHCertificateVc oldWHCertr;
  
  found = true;
  oldWHCertr.WHTax = whtax;
  while (LoopBackKey("WHTax",oldWHCertr,1,found)) begin
    if (oldWHCertr.WHTax!=whtax) then begin found = false; end;
    if (found) then begin
      res = oldWHCertr.WHTaxSerNr + 1;
      found = false;
    end;
  end;
  NextWHTaxNoForWHTax = res;
  return;
end;

function LongInt NextWHTaxNo(string whtax,row WHTaxBlock curWHTaxrw,record WHTaxBlock WHTaxb,var integer certrow)
begin
  LongInt res;
  LongInt nr;
  Boolean found;
  record WHCertificateVc oldWHCertr;
  row WHTaxBlock WHTaxbrw;
  Integer i,rwcnt;

  certrow = -1;
  if (curWHTaxrw.CertificateNr!=-1) then begin 
    if (curWHTaxrw.LastCertificateNr==-1) then begin 
      res = curWHTaxrw.CertificateNr;
    end else begin
      res = curWHTaxrw.LastCertificateNr + 1;
    end;
  end else begin
    rwcnt = MatRowCnt(WHTaxb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(WHTaxb,i,WHTaxbrw);
      if (WHTaxbrw.Code==curWHTaxrw.WHTax) and nonblank(curWHTaxrw.WHTax) then begin
        if (WHTaxbrw.LastCertificateNr==-1) then begin 
          res = WHTaxbrw.CertificateNr;
        end else begin
         res = WHTaxbrw.LastCertificateNr + 1;
        end;
        certrow = i;
        i = rwcnt;
      end;
    end;
  end;

  /*
  res = NextWHTaxNoForWHTax(whtax);
  if (nonblank(curWHTaxrw.WHTax)) then begin
    if (GetWHTaxRow(curWHTaxrw.WHTax,WHTaxbrw)) then begin
      nr = NextWHTaxNoForWHTax(WHTaxbrw.Code);
      if (res<nr) then begin
        res = nr;
      end;
    end;
  end;

 
  rwcnt = MatRowCnt(WHTaxb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WHTaxb,i,WHTaxbrw);
    if (WHTaxbrw.WHTax==curWHTaxrw.Code) then begin
      nr = NextWHTaxNoForWHTax(WHTaxbrw.Code);
      if (res<nr) then begin
        res = nr;
      end;
    end;
  end;
  
  if (res<curWHTaxrw.CertificateNr) then begin
    res = curWHTaxrw.CertificateNr;
  end;
  */
  
  if (res<0) then begin
    res = 1;       
  end;
  NextWHTaxNo = res;
  return;
end;

procedure AddWHCertificateRow(record WHCertificateVc WHCertr,row OPVc OPrw,Integer oprownr)
begin
  row WHCertificateVc WHCertrw;
  record VIVc VIr;
  
  VIr.SerNr = OPrw.VISerNr;
  ReadFirstMain(VIr,1,true);
  ClearRow(WHCertr,WHCertrw,1);
  WHCertrw.OPRow = oprownr;
  WHCertrw.InvoiceNr = VIr.InvoiceNr;
  WHCertrw.BaseAmount = OPrw.WHTaxBase;
  WHCertrw.Amount = Round(OPrw.BankVal,SetRoundModeD(2));
//not wrking  WHCertrw.AccBaseAmount = OPrw.WHTaxAccumBase;
  MatRowPut(WHCertr,MatRowCnt(WHCertr),WHCertrw);
  return;
end;

updating procedure SaveWHCertificate(record OPVc OPr,row OPVc OPrw,Integer oprownr)
begin
  record WHTaxBlock WHTaxb;  
  row WHTaxBlock WHTaxbrw;  
  record WHCertificateVc WHCertr;
  record WHCertificateVc oldWHCertr;
  record UserVc Userr;
  record CUVc VEr;
  Boolean found;
  LongInt nextwhtaxsernr;
  record WHVEVc WHVEr;
  row WHVEVc WHVErw;
  Integer i,rwcnt;
  string 255 wxtaxcomment,tstr;
  record WHCalcFormVc WHCalcFr;
  Boolean whcertf;
  Integer sharerow,rownr;
  row WHTaxBlock shareWHTaxbrw; 


  BlockLoad(WHTaxb);
  if (GetWHTaxRowNr(OPrw.WHTax,WHTaxbrw,rownr)) then begin
    if (nonblank(WHTaxbrw.WHCalcForm)) then begin    
      WHCalcFr.PayCode = WHTaxbrw.WHCalcForm;
      ReadFirstMain(WHCalcFr,1,true);
      if (WHCalcFr.TaxCalc==kWHTaxCalcMonthly) or (WHCalcFr.TaxCalc==kWHTaxCalcYearly) or (WHCalcFr.TaxCalc==kWHTaxCalcPerPayment) then begin
        WHCertr.OPNr = OPr.SerNr;
        WHCertr.WHTax = OPrw.WHTax;
        whcertf = ReadFirstKey("OPWH",WHCertr,2,true);
      end;
      if (whcertf) then begin
        RecordCopy(oldWHCertr,WHCertr);
        AddWHCertificateRow(WHCertr,OPrw,oprownr);
        WHCertr.Amount = WHCertr.Amount + Round(OPrw.BankVal,SetRoundModeD(2));
        WHCertr.CalcBase = WHCertr.CalcBase + OPrw.WHTaxBase;
//not wrking        WHCertr.AccBaseAmount = WHCertr.AccBaseAmount + OPrw.WHTaxAccumBase;
        RecordUpdate(oldWHCertr,WHCertr,false);
      end else begin
        WHCertr.DocName = WHTaxbrw.DocName;
        WHCertr.CalcForm = WHTaxbrw.WHCalcForm;
        WHCertr.VECode = OPrw.VECode;
        VEr.Code = OPrw.VECode;
        if (ReadFirstMain(VEr,1,true)) then begin
          WHCertr.VEName = VEr.Name;
        end;
        Userr.Code = CurrentUser;
        if (ReadFirstMain(Userr,1,true)) then begin
          WHCertr.UserName = Userr.Name;
        end;
        wxtaxcomment = WHTaxbrw.Comment;
        if (FindWHVETax(OPrw.VECode,OPr.TransDate,WHVEr)) then begin
          rwcnt = MatRowCnt(WHVEr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(WHVEr,i,WHVErw);
            if (WHVErw.WHTax==OPrw.WHTax) then begin
              if (blankdate(WHVErw.StartDate)) or (OPr.TransDate>=WHVErw.StartDate) then begin
                WHCertr.Comment = WHVErw.Comment;
                i = rwcnt;
              end;
              if (WHVErw.TAXPrc!=0) then begin
                if (nonblank(WHVErw.Comment)) then begin
                  wxtaxcomment = WHVErw.Comment;
                end;
              end;
            end;
          end;
          WHCertr.WHTaxComment = wxtaxcomment;
          WHCertr.OPNr = OPr.SerNr;
          WHCertr.OPTransDate = OPr.TransDate;
          WHCertr.OPRefStr = OPr.PayNumber;
          WHCertr.OPComment = OPr.BankName;
          WHCertr.BankCurncy = OPrw.BankCurncy;
          WHCertr.Amount = Round(OPrw.BankVal,SetRoundModeD(2));
          WHCertr.CalcBase = OPrw.WHTaxBase;
//not wrking          WHCertr.AccBaseAmount = OPrw.WHTaxAccumBase;
          WHCertr.TaxPrc = OPrw.WHTaxPrc;
          if (WHCalcFr.TaxCalc==kWHTaxCalcPerInvoice or WHCalcFr.TaxCalc==kWHTaxCalcOnPurchaseInvoice) then begin
            WHCertr.OPRow = oprownr;
          end else begin
            AddWHCertificateRow(WHCertr,OPrw,oprownr);
          end;
          WHCertr.SerNr = NextSerNr("WHCertificateVc",CurrentDate,-1,false,"");            
          WHCertr.WHTax = OPrw.WHTax;
          WHCertr.WHTaxSerNr = NextWHTaxNo(WHCertr.WHTax,WHTaxbrw,WHTaxb,sharerow);
          if (WHCertr.SerNr>0) then begin
            if (RecordStore(WHCertr,false)) then begin
              if (sharerow==-1) and (rownr!=-1) then begin 
                WHTaxbrw.LastCertificateNr = WHCertr.WHTaxSerNr;
                MatRowPut(WHTaxb,rownr,WHTaxbrw);
              end else begin
                MatRowGet(WHTaxb,sharerow,shareWHTaxbrw);
                shareWHTaxbrw.LastCertificateNr = WHCertr.WHTaxSerNr;
                MatRowPut(WHTaxb,sharerow,shareWHTaxbrw);
              end;
              BlockStore(WHTaxb);
              CreateRecordLink(WHCertr,CurrentCompany,OPr,CurrentCompany);  
              CreateRecordLink(OPr,CurrentCompany,WHCertr,CurrentCompany);  
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure SaveWHCertificates(record OPVc OPr,Boolean updcheqlinkf)
begin
  LongInt res;
  Integer j,rows;
  row OPVc OPrw;
  
  rows = MatRowCnt(OPr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(OPr,j,OPrw); 
    if (nonblank(OPrw.WHTax)) then begin
      SaveWHCertificate(OPr,OPrw,j);
    end;
  end;
  return;
end;

global
updating procedure SaveChequeLink2(record IPVc IPr)
begin
  // Fix data corruption with missing FromFileName field values that prevent the linked Receipt from being opened from Cheques.
  LongInt res;
  Integer j,rows,LastChqNr;
  row IPVc IPrw;
  Record CheckVc Checkr;
  Record CheckVc oldCheckr;

  LastChqNr = -1;    
  rows = MatRowCnt(IPr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(IPr,j,IPrw);
    if (IPrw.ChequeNr<>-1) then begin
      if (IPrw.ChequeNr<>LastChqNr) then begin
        Checkr.SerNr = IPrw.ChequeNr;
        if (ReadFirstMain(Checkr,1,true)) then begin
          if ((Checkr.FromNo<=0 or Checkr.FromNo==IPr.SerNr) and (blank(Checkr.FromFileName)) and (Checkr.ToType==0)) then begin
            RecordCopy(oldCheckr,Checkr);
            Checkr.FromFileName = "IPVc";
            Checkr.FromNo = IPr.SerNr;
            Checkr.ToType = 0;
            if (RecordUpdate(oldCheckr,Checkr,false)==0) then begin end; 
          end;
        end;
      end;  
      LastChqNr = IPrw.ChequeNr;    
    end; 
  end;
  Return;
end;

global
updating
procedure SaveChequeLink3(record ChqDepVc ChqDepr)
begin
  LongInt res;
  Integer j,rows;
  row ChqDepVc ChqDeprw;
  Record CheckVc Checkr;
  Record CheckVc oldCheckr;

  rows = MatRowCnt(ChqDepr);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(ChqDepr,j,ChqDeprw);
    if (ChqDeprw.ChqNr<>-1) then begin
      Checkr.SerNr = ChqDeprw.ChqNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        RecordCopy(oldCheckr,Checkr);
        Checkr.ToNo = ChqDepr.SerNr;
        Checkr.ToType = 3;
        if (RecordUpdate(oldCheckr,Checkr,false)==0) then begin end; 
      end;
    end; 
  end;
  Return;
end;

global
function Integer CreateDebitNoteCheckRemote(record CheckVc Checkr,var record IVVc IVr,var string rlink)
begin
  Integer res,rownr;
  record CheckSetBlock CSb;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  row IVVc IVrw;
  Integer sernrf;
  record IVVc IV2r;
  record LocalMachineBlock LMb;
  
  BlockLoad(CSb);
  RecordNew(IVr);
  IVr.CustCode = Checkr.CUCode;
  if (PasteCust2InInv(IVr,LMb,"",true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
    IVr.PayDeal = CSb.DNPayDeal;
    IVVc_PastePayDeal(IVr,"","");
    ClearRow(IVr,IVrw,1);
    switch (Checkr.Openf) begin
      case kCheckTypeBounced:
        IVrw.ArtCode = CSb.BouncedArtCode;
      case kCheckTypeBouncedfromEndorsed:
        IVrw.ArtCode = CSb.BouncedArtCode;
      case kCheckTypeCancelled:
        IVrw.ArtCode = CSb.CancelledArtCode;      
    end;
    MatRowPut(IVr,0,IVrw);
    if (IVVc_PasteArtCode(IVr,0,invdatewarn,warning,false,sernrf)) then begin    
    end;
    MatRowGet(IVr,0,IVrw);
    IVrw.Quant = 1;
    MatRowPut(IVr,0,IVrw);
    IVVc_PasteQuantity(IVr,0);        

    MatRowGet(IVr,0,IVrw);
    IVrw.Price = Checkr.Amount;
    MatRowPut(IVr,0,IVrw);
    IVVc_PastePrice(IVr,IV2r,0,warning);

    if (nonblank(CSb.BankFeeArtCode)) then begin
      rownr = MatRowCnt(IVr);
      ClearRow(IVr,IVrw,kInvoiceRowTypeNormal);
      IVrw.ArtCode = CSb.BankFeeArtCode;      
      MatRowPut(IVr,rownr,IVrw);
      if (IVVc_PasteArtCode(IVr,rownr,invdatewarn,warning,false,sernrf)) then begin    
      end;
      MatRowGet(IVr,rownr,IVrw);
      IVrw.Quant = 1;
      MatRowPut(IVr,rownr,IVrw);
      IVVc_PasteQuantity(IVr,rownr);        
    end;

    rlink = GetRecordLink(Checkr);
  end;
  CreateDebitNoteCheckRemote = res;
  return;
end;

global
updating procedure UpdateOwnChequeStatusHistory(record OwnCheckVc OwnCheckr,string filename,LongInt transnr,Boolean unokf)
begin
  record OwnCheckStatusHistVc OCSHr;
  record OwnCheckStatusHistVc tOCSHr;
  Boolean newf;
  
  OCSHr.FileName = filename;
  OCSHr.TransNr = transnr;
  if (ReadFirstKey("FNTransNr",OCSHr,2,true)) then begin
    if (unokf) then begin
      RecordDelete(OCSHr);
    end else begin
      newf = true;
    end;
  end else begin
    newf = true;
  end;
  if (newf) then begin
    OCSHr.Openf = OwnCheckr.Openf;
    OCSHr.CheckSerNr = OwnCheckr.SerNr;
    OCSHr.CheckNr = OwnCheckr.CheckNr;
    OCSHr.FileName = filename;
    OCSHr.TransNr = transnr;
    switch (OwnCheckr.Openf) begin
      case kCheckTypeCancelled: OCSHr.StatusDate = OwnCheckr.CancelledDate;
      case kCheckTypeBounced: OCSHr.StatusDate = OwnCheckr.BouncedDate;
    end;
    if (blankdate(OCSHr.StatusDate)) then begin
      OCSHr.StatusDate = CurrentDate;
    end;
    RecordCopy(tOCSHr,OCSHr);
    if (ReadFirstKey("CheckSerNr",tOCSHr,2,true)==false) then begin
      OCSHr.SerNr = NextSerNr("OwnCheckStatusHistVc",OCSHr.StatusDate,-1,false,"");            
      RecordStore(OCSHr,false);
    end;
  end;
  return;
end;

global
updating procedure UpdateChequeStatusHistory(record CheckVc Checkr,string filename,LongInt transnr,Boolean unokf)
begin
  record CheckStatusHistVc CSHr;
  record CheckStatusHistVc tCSHr;
  Boolean newf;
  
  CSHr.FileName = filename;
  CSHr.TransNr = transnr;
  if (ReadFirstKey("FNTransNr",CSHr,2,true)) then begin
    if (unokf) then begin
      RecordDelete(CSHr);
    end else begin
      newf = true;
    end;
  end else begin
    newf = true;
  end;
  if (newf) then begin
    CSHr.Openf = Checkr.Openf;
    CSHr.CheckSerNr = Checkr.SerNr;
    CSHr.CheckNr = Checkr.CheckNr;
    CSHr.FileName = filename;
    CSHr.TransNr = transnr;
    switch (Checkr.Openf) begin
      case kCheckTypeCancelled: CSHr.StatusDate = Checkr.CancelledDate;
      case kCheckTypeBounced: CSHr.StatusDate = Checkr.BouncedDate;
      case kCheckTypeBouncedfromEndorsed: CSHr.StatusDate = Checkr.BouncedDate;
    end;
    if (blankdate(CSHr.StatusDate)) then begin
      CSHr.StatusDate = CurrentDate;
    end;
    RecordCopy(tCSHr,CSHr);
    if (ReadFirstKey("CheckSerNr",tCSHr,2,true)==false) then begin
      CSHr.SerNr = NextSerNr("CheckStatusHistVc",CSHr.StatusDate,-1,false,"");            
      RecordStore(CSHr,false);
    end;
  end;
  return;
end;
