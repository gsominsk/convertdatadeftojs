external function Boolean HasMultiCurrency();
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();

global
procedure DivM4OneRate(val a,val b,var val c)
BEGIN
  val d;
  val rate;
  val res;
  
  res = a;
  rate = b;
  if (res==0) then begin goto L997; end;
  if (rate==0) then begin goto L997; end;
  d = a * 100;
  res = d/rate;
L997:;
  c = res;
  RETURN;
END;

global
procedure B1ToB2Val(val from,val br1p,val br2p,var val to)
BEGIN
  val baserate;

  DivM4OneRate(br2p,br1p,baserate);
  DivM4OneRate(from,baserate,to);
  to = Round(to,DefaultRoundMode);
  RETURN;
END;

global
procedure B1ToB2ValRM(val from,val br1p,val br2p,var val to,roundmode rm)
begin
  val baserate;

  DivM4OneRate(br2p,br1p,baserate);
  DivM4OneRate(from,baserate,to);
  to = Round(to,rm);
  return;
end;

global
procedure B1ToB2StrVal(string froms,val br1p,val br2p,var string tos)
BEGIN
  val fr,to;
  string 255 tstr;

  tstr = froms;
  if (Mid(tstr,len(tstr),1)!="%") then begin
    fr = StringToVal(tstr,M45Val);
    B1ToB2Val(fr,br1p,br2p,to);
    tos = to;//ValToString
  end else begin
    tos = tstr;
  end;
  RETURN;
END;

global
procedure B1ToB2StrValRM(string froms,val br1p,val br2p,var string tos,roundmode rm)
BEGIN
  val fr,to;
  string 255 tstr;

  tstr = froms;
  if (Mid(tstr,len(tstr),1)!="%") then begin
    fr = StringToVal(tstr,M45Val);
    B1ToB2ValRM(fr,br1p,br2p,to,rm);
    tos = to;//ValToString
  end else begin
    tos = tstr;
  end;
  RETURN;
END;

global
procedure GetBaseCurncy(Integer no,var string curcode)
BEGIN
  record BaseCurBlock bascur;

  BlockLoad(bascur);
  curcode = "";
  if (no==0) then begin curcode = bascur.StdBaseCur; end;
  if (no==1) then begin curcode = bascur.BaseCur1; end;
  if (no==2) then begin curcode = bascur.BaseCur2; end;
  RETURN;
END;

global 
function Integer TypeOfCurncy(var string curncy,var Integer oldstyle)
BEGIN
  record BaseCurBlock bascur;
  Integer res; 
  
  BlockLoad(bascur);
  if (blank(curncy)) then begin curncy = bascur.BaseCur1; end;
  if (curncy==bascur.BaseCur1) then begin res = 1; end;
  if (curncy==bascur.BaseCur2) then begin res = 2; end;
  if (blank(curncy)) then begin res = 3; end;
  if (oldstyle<>-1) then begin
    oldstyle = 0;
    if (res==3) then begin oldstyle = 1; end;
    if ((res==0) and (blank(bascur.BaseCur2))) then begin oldstyle = 1; end;
  end;
  TypeOfCurncy = res;
  RETURN;
END;

global
function Boolean GetForeignCurncyRate(string curcode,var val from,var val to1,var val to2,Date dp,var Date edp)
begin
  record ERVc ERr;
  Boolean res;

  res = false;
  ERr.CurncyCode = curcode;
  ERr.Date = dp;
  if (ReadLastMain(ERr,2,false)) then begin
    if (ERr.CurncyCode==curcode) then begin
      edp = ERr.Date;
      from = ERr.FrRate;
      to1 = ERr.ToRate1;
      to2 = ERr.ToRate2;
      res = true;
    end;
  end;
  GetForeignCurncyRate = res;
  return;
end;

global
function Boolean GetFullCurncyRateDate(var string curcode,Date adp,var val from,var val to1,var val to2,
                                var val base1,var val base2,var Date edp)
BEGIN
  record BaseERVc BERr;
  record BaseCurBlock bascur;
  Boolean testf;
  Date dp;
 
  dp = adp;
  if (HasLocalization("POL")) then begin
    dp = AddDay(dp,-1);
  end;
  testf = false;
  BlockLoad(bascur);
  if (blank(curcode)) then begin
    curcode = bascur.BaseCur1;
  end;  
  if (blank(bascur.BaseCur2)) then   begin goto L885; end;
  if (curcode==bascur.BaseCur1) then begin goto L775; end;
  if (curcode==bascur.BaseCur2) then begin goto L775; end;
  testf = GetForeignCurncyRate(curcode,from,to1,to2,dp,edp);
L775:;
  base1 = 100;
  base2 = 100;
  BERr.Date = dp;
  if (ReadLastMain(BERr,1,false)) then begin
    base1 = BERr.Rate1;
    base2 = BERr.Rate2;
  end;
L885:;
  if (curcode==bascur.BaseCur1) then begin goto L995; end;
  testf = GetForeignCurncyRate(curcode,from,to1,to2,dp,edp);
L995:;
  GetFullCurncyRateDate = testf;
  RETURN;
END;

global
procedure GetFullCurncyRate(var string curcode, Date adp, var val from, var val to1, var val to2, var val base1, var val base2)
begin
  record BaseERVc BERr;
  record ERVc ERr;
  record BaseCurBlock bascur;
  Date edp;
  Boolean testf;
  Date dp;
 
  dp = adp;
  if (HasLocalization("POL")) then begin
    dp = AddDay(dp,-1);
  end;
  from = blankval;
  to1 = blankval;
  to2 = blankval;
  base1 = blankval;
  base2 = blankval;
  BlockLoad(bascur);
  if (blank(curcode) and HasMultiCurrency) then begin
    curcode = bascur.StdBaseCur;
  end;
/*JJCUR  
  if (blank(curcode)) then begin
    curcode = bascur.BaseCur1;
  end;
*/  
  if (blank(bascur.BaseCur2)) then begin goto L88; end;
  if (curcode==bascur.BaseCur1 or blank(curcode)) then begin goto L77; end;
  if (curcode==bascur.BaseCur2) then begin goto L77; end;
  testf = GetForeignCurncyRate(curcode,from,to1,to2,dp,edp);
L77:;
  base1 = 100;
  base2 = 100;
  BERr.Date = dp;
  if (ReadLastMain(BERr,1,false)) then begin
    base1 = BERr.Rate1;
    base2 = BERr.Rate2;
  end;
  goto L99;
L88:; // Old way of using Rate 
  if (curcode==bascur.BaseCur1 or blank(curcode)) then begin goto L99; end;
  testf = GetForeignCurncyRate(curcode,from,to1,to2,dp,edp);
L99:;
  return;
end;
 
global
procedure GetFullCurncyRateText(Boolean curraref,var string res,val FrRate,val ToRateB1,val ToRateB2,val BaseRate1,val BaseRate2)
begin
  string 255 tstr;
  record SysFormatBlock SysFormatRec;
  
  BlockLoad(SysFormatRec);
  if (curraref==true) then begin
    if ((FrRate<>0) and ((ToRateB1<>0) or (ToRateB2<>0))) then begin
      res = ValToString(FrRate,M4Rate,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      res = res & ":";
      if (ToRateB1<>0) then begin
        tstr = ValToString(ToRateB1,M4Rate,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      end else begin
        tstr = ValToString(ToRateB2,M4Rate,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      end;  
      res = res & tstr;
    end else begin
      res = "";
    end;
  end;
  if (curraref==false) then begin
    if ((BaseRate1<>0) and (BaseRate2<>0)) then begin
      res = ValToString(BaseRate1,M4Rate,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      res = res & ":";
      tstr = ValToString(BaseRate2,M4Rate,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      res = res & tstr;
    end else begin
      res = "";
    end;
  end;
  return;
end;

global
procedure Base1ToBase2(var val vp,Date datp,var val rp)
BEGIN
  string 20 curncy;
  val fr,to1,to2,br1,br2;
  val temp;
  Date td;
  Boolean testf;

  testf = GetFullCurncyRateDate(curncy,datp,fr,to1,to2,br1,br2,td); 
  temp = br1;
  br1 = br2;
  br2 = temp;
  B1ToB2Val(vp,br1,br2,temp);
  rp = temp;
  RETURN;
END;

global
procedure Base2ToBase1(var val vp,Date datp,var val rp)
BEGIN
  string 20 curncy;
  val fr,to1,to2,br1,br2;
  val temp;
  Date td;
  Boolean testf;

  testf = GetFullCurncyRateDate(curncy,datp,fr,to1,to2,br1,br2,td); 
  B1ToB2Val(vp,br1,br2,temp);
  rp = temp;
  RETURN;
END;

global
procedure MulM4OneRate(val a,val ratep,var val resp,roundmode roundof,Boolean rndf)
BEGIN
  val res;
  
  if ((ratep==0) or (ratep==100)) then begin
    res = a;
  end else begin
    res = a * ratep;
    res = res/100;
  end;
  if (rndf) then begin   
    res = Round(res,roundof);
  end;  
  resp = res;
  RETURN;  
END;

global
function Boolean UseOldRate(record BaseCurBlock bascur)
BEGIN
  Boolean res;

  res = false;
  if (blank(bascur.BaseCur2)) then begin res = true; end;
  UseOldRate = res;
  RETURN;
END;

function val MulBaseRate(var string acurcode,val valp,
                         val from,val to1,val to2,val base1,val base2,
                         Integer basecurncy,roundmode roundof)
begin
  val res;
  val valinbase1;
  val valinbase2; 
  Integer curtype;  //not used
  record BaseCurBlock bascur;
  val baserate,currate;
  val bas1,bas2;
  val newbase1,newbase2,newfrom;
  Boolean oldratef;
  Boolean basflipf;
  string 40 curcode;

  curcode = acurcode;
  BlockLoad(bascur);
  newfrom = from;
  newbase1 = base1;
  newbase2 = base2;  
  if (newbase1==0) then begin newbase1 = 100; end;
  if (newbase2==0) then begin newbase2 = 100; end;
  if (newfrom==0) then begin newfrom = 100; end;
  oldratef = UseOldRate(bascur);
  if (newbase1<newbase2) then begin
    DivM4OneRate(newbase2,newbase1,baserate);
    basflipf = true;
  end else begin
    DivM4OneRate(newbase1,newbase2,baserate);
    basflipf = false;
  end;
  if (blank(curcode)) then begin
    curcode = bascur.BaseCur1;// This HAS to be set, we used it in the caling functions, remove the acurcode when combining.
  end;
  if (curcode==bascur.BaseCur1) then begin
    bas1 = valp;
    if (oldratef==false) then begin
      if (basflipf) then begin
        MulM4OneRate(valp,baserate,bas2,DefaultCurRoundOff,false);
      end else begin
        DivM4OneRate(valp,baserate,bas2);
      end;
      bas2 = Round(bas2,roundof);
    end else begin
      bas2 = blankval;
    end;
    curtype = 1;
    goto LMulBaseRate;
  end;
  if (curcode==bascur.BaseCur2) then begin
    bas2 = valp;
    if (basflipf) then begin
      DivM4OneRate(valp,baserate,bas1);
    end else begin
      MulM4OneRate(valp,baserate,bas1,DefaultCurRoundOff,false);
    end;
    bas1 = Round(bas1,roundof);
    curtype = 2;
    goto LMulBaseRate;
  end;
  if (to1!=0) then begin
    if (to1<newfrom) then begin
      DivM4OneRate(newfrom,to1,currate);
      DivM4OneRate(valp,currate,bas1);
    end else begin
      DivM4OneRate(to1,newfrom,currate);
      MulM4OneRate(valp,currate,bas1,DefaultCurRoundOff,false);
    end;
    if (basflipf) then begin
      MulM4OneRate(bas1,baserate,bas2,DefaultCurRoundOff,false);
    end else begin
      DivM4OneRate(bas1,baserate,bas2);
    end;
    bas1 = Round(bas1,roundof);
    bas2 = Round(bas2,roundof);
    curtype = 3;
    goto LMulBaseRate;
  end;
  if (to2!=0) then begin // bas1 not set 
    if (oldratef==false) then begin // don't allow to base 2, since there are no base 2
      if (to2<newfrom) then begin
        DivM4OneRate(newfrom,to2,currate);
        DivM4OneRate(valp,currate,bas2);
      end else begin
        DivM4OneRate(to2,newfrom,currate);
        MulM4OneRate(valp,currate,bas2,DefaultCurRoundOff,false);
      end;
      if (basflipf) then begin
        DivM4OneRate(bas2,baserate,bas1);
      end else begin
        MulM4OneRate(bas2,baserate,bas1,DefaultCurRoundOff,false);
      end;
      bas1 = Round(bas1,roundof);
      bas2 = Round(bas2,roundof);
    end;
    curtype = 3;
    goto LMulBaseRate;
  end;
  if (curtype==0) then begin
    bas1 = valp;
  end;
LMulBaseRate:;
  switch (basecurncy) begin
    case 1: res = bas1;
    case 2: res = bas2;
  end;
  MulBaseRate = res;
  return;
end;

function val MulDateRate(var string curcode,Date td,val sum,Integer basecurncy,roundmode roundof)
begin
  val fr,to1,to2,br1,br2;
  val res;
      
  GetFullCurncyRate(curcode,td,fr,to1,to2,br1,br2);
  res = MulBaseRate(curcode,sum,fr,to1,to2,br1,br2,basecurncy,roundof);
  MulDateRate = res;
  return;
end;

global
function val MulWithRateToBase1(var string curncy,Date td,val v,roundmode roundof)
begin
  val res;
  
  res = MulDateRate(curncy,td,v,1,roundof);
  MulWithRateToBase1 = res;
  return;
end;

global
function val MulWithRateToBase2(var string curncy,Date td,val v,roundmode roundof)
begin
  val res;
  
  res = MulDateRate(curncy,td,v,2,roundof);
  MulWithRateToBase2 = res;
  return;
end;

global
function val MulRateToBase1(var string curncy,val v,val from,val to1,val to2,val base1,val base2,roundmode roundof)
begin
  val res;
  
  res = MulBaseRate(curncy,v,from,to1,to2,base1,base2,1,roundof);
  MulRateToBase1 = res;
  return;
end;

global
function val MulRateToBase2(var string curncy,val v,val from,val to1,val to2,val base1,val base2,roundmode roundof)
begin
  val res;
  
  res = MulBaseRate(curncy,v,from,to1,to2,base1,base2,2,roundof);
  MulRateToBase2 = res;
  return;
end;

global
function val ChangeToBase1(string curncy,val v,val from,val to1,val to2,val base1,val base2,roundmode roundof)
begin
  val res;
  string 10 lcurncy;
  
  lcurncy = curncy;
  res = MulBaseRate(lcurncy,v,from,to1,to2,base1,base2,1,roundof);
  ChangeToBase1 = res;
  return;
end;

global
function val ChangeToBase2(string curncy,val v,val from,val to1,val to2,val base1,val base2,roundmode roundof)
begin
  val res;
  string 10 lcurncy;
  
  lcurncy = curncy;
  res = MulBaseRate(lcurncy,v,from,to1,to2,base1,base2,2,roundof);
  ChangeToBase2 = res;
  return;
end;

global
procedure Base1ToOther(var string curcode,val valp,val fr,val to1,val to2,val b1,val b2,var val res,roundmode roundof)
BEGIN
  record BaseCurBlock bascur;
  val baserate,currate;
  val base1,base2,from,temp;
  val endres;
  Boolean oldrate;
  Integer curtype;
  Boolean basflip;

  curtype = 0;
  BlockLoad(bascur);
  base1 = b1;
  base2 = b2;
  from = fr;
  if (base1==0) then begin base1 = 100; end;
  if (base2==0) then begin base2 = 100; end;
  if (from==0) then begin from = 100; end;
  oldrate = UseOldRate(bascur);
  if (base1<base2) then begin
    DivM4OneRate(base2,base1,baserate);
    basflip = true;
  end else begin
    DivM4OneRate(base1,base2,baserate);
    basflip = false;
  end;
  if (blank(curcode)) then begin
    curcode = bascur.BaseCur1;
  end;  
  if (curcode==bascur.BaseCur1) then begin
    endres = valp;
    endres = Round(endres,roundof);
    curtype = 1;
    goto LBase1ToOther;
  end;
  if (curcode==bascur.BaseCur2) then begin
    if (basflip) then begin
      MulM4OneRate(valp,baserate,endres,DefaultCurRoundOff,false);
    end else begin
      DivM4OneRate(valp,baserate,endres);
    end;  
    endres = Round(endres,roundof);
    curtype = 2;
    goto LBase1ToOther;
  end;
  if (to1!=0) then begin
    if (to1<from) then begin
      DivM4OneRate(from,to1,currate);
      MulM4OneRate(valp,currate,endres,DefaultCurRoundOff,false);
    end else begin
      DivM4OneRate(to1,from,currate);
      DivM4OneRate(valp,currate,endres);
    end;
    endres = Round(endres,roundof);
    curtype = 3;
    goto LBase1ToOther;
  end;
  if (to2!=0) then begin
    if (oldrate==false) then begin // don't allow to base 2, since there are no base 2 
      if (to2<from) then begin
        DivM4OneRate(from,to2,currate);
        MulM4OneRate(valp,currate,temp,DefaultCurRoundOff,false);
      end else begin
        DivM4OneRate(to2,from,currate);
        DivM4OneRate(valp,currate,temp);
      end;
      if (basflip) then begin
        MulM4OneRate(temp,baserate,endres,DefaultCurRoundOff,false);
      end else begin
        DivM4OneRate(temp,baserate,endres);
      end;  
      endres = Round(endres,roundof);
    end;
    curtype = 3;
    goto LBase1ToOther;
  end;
  if (curtype==0) then begin
    endres = valp;
  end;
LBase1ToOther:;
  res = endres;
  RETURN;
END;

global
procedure CurValToOtherCur(Date td,string frcur,val frval,string tocur,var val toval,roundmode roundof)
BEGIN
  string 20 curncy;
  val fr,to1,to2,br1,br2;
  val temp;
  Date ed;
  Boolean testf;

  temp = MulWithRateToBase1(frcur,td,frval,SetRoundModeD(7));    
  testf = GetFullCurncyRateDate(tocur,td,fr,to1,to2,br1,br2,ed); 
  curncy = tocur;
  Base1ToOther(curncy,temp,fr,to1,to2,br1,br2,toval,roundof);  
  RETURN;
END;

global
procedure CurValToOtherCurWithRate(Date td,string frcur,val frval,val frfr,val frto1,val frto2,val frbr1,val frbr2,
                                           string tocur,var val toval,roundmode roundof)
begin
  string 20 curncy;
  val fr,to1,to2,br1,br2;
  val temp;
  Date ed;
  Boolean testf;

  temp = MulRateToBase1(frcur,frval,frfr,frto1,frto2,frbr1,frbr2,DefaultCurRoundOff);     
  testf = GetFullCurncyRateDate(tocur,td,fr,to1,to2,br1,br2,ed); 
  curncy = tocur;
  Base1ToOther(curncy,temp,fr,to1,to2,br1,br2,toval,roundof);  
  return;
end;

function val DivBaseRate(string curcode,val valp,
                         val from,val to1,val to2,val base1,val base2,
                         Integer basecurncy,roundmode roundof)
begin
  val res;
  val valinbase1;
  val valinbase2; 
  Integer curtype;  //not used
  record BaseCurBlock bascur;
  val baserate,currate;
  val bas1,bas2;
  val newbase1,newbase2,newfrom;
  Boolean oldratef;
  Boolean basflipf;

  BlockLoad(bascur);
  newfrom = from;
  newbase1 = base1;
  newbase2 = base2;  
  if (newbase1==0) then begin newbase1 = 100; end;
  if (newbase2==0) then begin newbase2 = 100; end;
  if (newfrom==0) then begin newfrom = 100; end;
  oldratef = UseOldRate(bascur);
  if (newbase1<newbase2) then begin
    DivM4OneRate(newbase2,newbase1,baserate);
    basflipf = true;
  end else begin
    DivM4OneRate(newbase1,newbase2,baserate);
    basflipf = false;
  end;
  if (blank(curcode)) then begin
//    curcode = bascur.BaseCur1;// why is it here
  end;
  if (curcode==bascur.BaseCur1) then begin
    bas1 = valp;
    if (oldratef==false) then begin
      if (basflipf) then begin
        DivM4OneRate(valp,baserate,bas2);
      end else begin
        MulM4OneRate(valp,baserate,bas2,DefaultCurRoundOff,false);
      end;
      bas2 = Round(bas2,roundof);
    end else begin
      bas2 = blankval;
    end;
    curtype = 1;
    goto LDivBaseRate;
  end;
  if (curcode==bascur.BaseCur2) then begin
    bas2 = valp;
    if (basflipf) then begin
      MulM4OneRate(valp,baserate,bas1,DefaultCurRoundOff,false);
    end else begin
      DivM4OneRate(valp,baserate,bas1);
    end;
    bas1 = Round(bas1,roundof);
    curtype = 2;
    goto LDivBaseRate;
  end;
  if (to1!=0) then begin
    if (to1<newfrom) then begin
      DivM4OneRate(newfrom,to1,currate);
      MulM4OneRate(valp,currate,bas1,DefaultCurRoundOff,false);
    end else begin
      DivM4OneRate(to1,newfrom,currate);
      DivM4OneRate(valp,currate,bas1);
    end;
    if (basflipf) then begin
      DivM4OneRate(bas1,baserate,bas2);
    end else begin
      MulM4OneRate(bas1,baserate,bas2,DefaultCurRoundOff,false);
    end;
    bas1 = Round(bas1,roundof);
    bas2 = Round(bas2,roundof);
    curtype = 3;
    goto LDivBaseRate;
  end;
  if (to2!=0) then begin // bas1 not set 
    if (oldratef==false) then begin // don't allow to base 2, since there are no base 2
      if (to2<newfrom) then begin
        DivM4OneRate(newfrom,to2,currate);
        MulM4OneRate(valp,currate,bas2,DefaultCurRoundOff,false);
      end else begin
        DivM4OneRate(to2,newfrom,currate);
        DivM4OneRate(valp,currate,bas2);
      end;
      if (basflipf) then begin
        MulM4OneRate(bas2,baserate,bas1,DefaultCurRoundOff,false);
      end else begin
        DivM4OneRate(bas2,baserate,bas1);
      end;
      bas1 = Round(bas1,roundof);
      bas2 = Round(bas2,roundof);
    end;
    curtype = 3;
    goto LDivBaseRate;
  end;
  if (curtype==0) then begin
    bas1 = valp;
  end;
LDivBaseRate:;
  switch (basecurncy) begin
    case 1: res = bas1;
    case 2: res = bas2;
  end;
  DivBaseRate = res;
  return;
end;

function val DivDateRate(string curcode,Date td,val sum,Integer basecurncy,roundmode roundof)
begin
  val fr,to1,to2,br1,br2;
  val res;
      
  GetFullCurncyRate(curcode,td,fr,to1,to2,br1,br2);
  res = DivBaseRate(curcode,sum,fr,to1,to2,br1,br2,basecurncy,roundof);
  DivDateRate = res;
  return;
end;

global
function val DivWithRateToBase1(string curncy,Date td,val v,roundmode roundof)
begin
  val res;
  
  res = DivDateRate(curncy,td,v,1,roundof);
  DivWithRateToBase1 = res;
  return;
end;

global
function val DivWithRateToBase2(string curncy,Date td,val v,roundmode roundof)
begin
  val res;
  
  res = DivDateRate(curncy,td,v,2,roundof);
  DivWithRateToBase2 = res;
  return;
end;

global
function val DivRateToBase1(string curncy,val v,val from,val to1,val to2,val base1,val base2,roundmode roundof)
begin
  val res;
  
  res = DivBaseRate(curncy,v,from,to1,to2,base1,base2,1,roundof);
  DivRateToBase1 = res;
  return;
end;

global
function val DivRateToBase2(string curncy,val v,val from,val to1,val to2,val base1,val base2,roundmode roundof)
begin
  val res;
  
  res = DivBaseRate(curncy,v,from,to1,to2,base1,base2,2,roundof);
  DivRateToBase2 = res;
  return;
end;

global
function val cur2cur(String CurncyFrom,String CurncyTo,Date TransDate,Val Amount)
begin
  val fr,to1,to2,br1,br2;
  Date tempdat;
  String 30 tstr;
  val forrval,AmountC1;
  
  if (CurncyTo==CurncyFrom) then begin
    forrval = amount;
  end else begin
    GetBaseCurncy(1,tstr);
    // first to base cur 1
    if (tstr<>CurncyFrom) then begin
      if (GetFullCurncyRateDate(CurncyFrom,TransDate,fr,to1,to2,br1,br2,tempdat)) then begin end;
      AmountC1 = MulRateToBase1(CurncyFrom,Amount,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    end else begin
      AmountC1 = Amount;
    end;
    // now to other cur
    if (tstr<>CurncyTo) then begin
      if (GetFullCurncyRateDate(CurncyTo,TransDate,fr,to1,to2,br1,br2,tempdat)) then begin end;
      Base1ToOther(CurncyTo,AmountC1,fr,to1,to2,br1,br2,forrval,DefaultCurRoundOff);
    end else begin
      forrval = AmountC1;
    end;
  end;
  cur2cur = forrval;
  return;
end;

global
function val b12cur(String CurncyTo,Date TransDate,Val AmountC1)
begin
  val fr,to1,to2,br1,br2;
  Date tempdat;
  String 30 tstr;
  val forrval;
  
  GetBaseCurncy(1,tstr);
  if (tstr<>CurncyTo) then begin
    if (GetFullCurncyRateDate(CurncyTo,TransDate,fr,to1,to2,br1,br2,tempdat)) then begin end;
    Base1ToOther(CurncyTo,AmountC1,fr,to1,to2,br1,br2,forrval,DefaultCurRoundOff);
  end else begin
    forrval = AmountC1;
  end;

  b12cur = forrval;
  return;
end;

global
function val b22cur(String CurncyTo,Date TransDate,Val AmountC1) //mmm
begin
  String 30 tstr;
  val forrval;
  
  GetBaseCurncy(2,tstr);
  if (tstr<>CurncyTo) then begin
    forrval = cur2cur(tstr,CurncyTo,TransDate,AmountC1);
  end else begin
    forrval = AmountC1;
  end;
  b22cur = forrval;
  return;
end;

global
function val cur2b1(String CurncyFrom,Date TransDate,Val Amount)
begin
  val fr,to1,to2,br1,br2;
  Date tempdat;
  String 30 tstr;
  val AmountC1;
  
  GetBaseCurncy(1,tstr);
  if (tstr<>CurncyFrom) then begin
    if (GetFullCurncyRateDate(CurncyFrom,TransDate,fr,to1,to2,br1,br2,tempdat)) then begin end;
    AmountC1 = MulRateToBase1(CurncyFrom,Amount,fr,to1,to2,br1,br2,DefaultCurRoundOff);
  end else begin
    AmountC1 = Amount;
  end;
  cur2b1 = AmountC1;
  return;
end;

global
function val cur2b2(String CurncyFrom,Date TransDate,Val Amount)
begin
  val fr,to1,to2,br1,br2;
  Date tempdat;
  String 30 tstr;
  val AmountC2;
  
  GetBaseCurncy(2,tstr);
  if (tstr<>CurncyFrom) then begin
    if (GetFullCurncyRateDate(CurncyFrom,TransDate,fr,to1,to2,br1,br2,tempdat)) then begin end;
    AmountC2 = MulRateToBase2(CurncyFrom,Amount,fr,to1,to2,br1,br2,DefaultCurRoundOff);
  end else begin
    AmountC2 = Amount;
  end;
  cur2b2 = AmountC2;
  return;
end;

global
function val b12b2(Date TransDate,Val Amount)
begin
  val fr,to1,to2,br1,br2;
  Date tempdat;
  String 30 tstr;
  val AmountC2; 
   
  GetBaseCurncy(1,tstr);
  if (GetFullCurncyRateDate(tstr,TransDate,fr,to1,to2,br1,br2,tempdat)) then begin end;
  AmountC2 = MulRateToBase2(tstr,Amount,fr,to1,to2,br1,br2,DefaultCurRoundOff);
  b12b2 = AmountC2;
  return;
end;

global
function val b22b1(Date TransDate,Val Amount)
begin
  val fr,to1,to2,br1,br2;
  Date tempdat;
  String 30 tstr;
  val AmountC2;
  
  GetBaseCurncy(2,tstr);
  if (GetFullCurncyRateDate(tstr,TransDate,fr,to1,to2,br1,br2,tempdat)) then begin end;
  AmountC2 = MulRateToBase1(tstr,Amount,fr,to1,to2,br1,br2,DefaultCurRoundOff);
  b22b1 = AmountC2;
  return;
end;

function Boolean GetForeignCurncySalesRate(string curcode,var val from,var val to1,var val to2,Date dp,var Date edp)
begin
  record ERVc ERr;
  Boolean res;

  res = false;
  ERr.CurncyCode = curcode;
  ERr.Date = dp;
  if (ReadLastMain(ERr,2,false)) then begin
    if (ERr.CurncyCode==curcode) then begin
      edp = ERr.Date;
      from = ERr.FrRate;
      to1 = ERr.SalesRateTo1;
      to2 = blankval;
      if (nonblank(ERr.SalesRateTo1)) then begin
        res = true;
      end;
    end;
  end;
  GetForeignCurncySalesRate = res;
  return;
end;

function Boolean GetForeignCurncyPurchaseRate(string curcode,var val from,var val to1,var val to2,Date dp,var Date edp)
begin
  record ERVc ERr;
  Boolean res;

  res = false;
  ERr.CurncyCode = curcode;
  ERr.Date = dp;
  if (ReadLastMain(ERr,2,false)) then begin
    if (ERr.CurncyCode==curcode) then begin
      edp = ERr.Date;
      from = ERr.FrRate;
      to1 = ERr.PurchaseRateTo1;
      to2 = blankval;
      if (nonblank(ERr.PurchaseRateTo1)) then begin
        res = true;
      end;
    end;
  end;
  GetForeignCurncyPurchaseRate = res;
  return;
end;

global
function Boolean GetFullCurncySalesRate(var string curcode, Date dp, var val from, var val to1, var val to2, var val base1, var val base2)
begin
  Boolean res;
  record BaseERVc BERr;
  record ERVc ERr;
  record BaseCurBlock bascur;
  Date edp;
  Boolean testf;
  
  from = blankval;
  to1 = blankval;
  to2 = blankval;
  base1 = blankval;
  base2 = blankval;
  BlockLoad(bascur);
  if (blank(curcode) and HasMultiCurrency) then begin
    curcode = bascur.StdBaseCur;
  end;
  if blank(curcode) then begin
    curcode = bascur.BaseCur1;
  end;
  if (blank(bascur.BaseCur2)) then begin goto L88SR; end;
  if (curcode==bascur.BaseCur1) then begin goto L77SR; end;
  if (curcode==bascur.BaseCur2) then begin goto L77SR; end;
  testf = GetForeignCurncySalesRate(curcode,from,to1,to2,dp,edp);
L77SR:;
  base1 = 100;
  base2 = 100;
  BERr.Date = dp;
  if (ReadLastMain(BERr,1,false)) then begin
    base1 = BERr.Rate1;
    base2 = BERr.Rate2;
  end;
  goto L99SR;
L88SR:; // Old way of using Rate 
  if (curcode == bascur.BaseCur1) then begin goto L99SR; end;
  testf = GetForeignCurncySalesRate(curcode,from,to1,to2,dp,edp);
L99SR:;
  GetFullCurncySalesRate = testf;
  return;
end;

global
function Boolean  GetFullCurncyPurchaseRate(var string curcode, Date dp, var val from, var val to1, var val to2, var val base1, var val base2)
begin
  record BaseERVc BERr;
  record ERVc ERr;
  record BaseCurBlock bascur;
  Date edp;
  Boolean testf;
  
  from = blankval;
  to1 = blankval;
  to2 = blankval;
  base1 = blankval;
  base2 = blankval;
  BlockLoad(bascur);
  if (blank(curcode) and HasMultiCurrency) then begin
    curcode = bascur.StdBaseCur;
  end;
  if blank(curcode) then begin
    curcode = bascur.BaseCur1;
  end;
  if (blank(bascur.BaseCur2)) then begin goto L88PR; end;
  if (curcode==bascur.BaseCur1) then begin goto L77PR; end;
  if (curcode==bascur.BaseCur2) then begin goto L77PR; end;
  testf = GetForeignCurncyPurchaseRate(curcode,from,to1,to2,dp,edp);
L77PR:;
  base1 = 100;
  base2 = 100;
  BERr.Date = dp;
  if (ReadLastMain(BERr,1,false)) then begin
    base1 = BERr.Rate1;
    base2 = BERr.Rate2;
  end;
  goto L99PR;
L88PR:; // Old way of using Rate 
  if (curcode == bascur.BaseCur1) then begin goto L99PR; end;
  testf = GetForeignCurncyPurchaseRate(curcode,from,to1,to2,dp,edp);
L99PR:;
  GetFullCurncyPurchaseRate = testf;
  return;
end;

global
function Boolean GetForeignCurncyPLConsolidationRate(string curcode,var val from,var val to1,var val to2,Date dp,var Date edp)
begin
  record ConsERVc ConsERr;
  Boolean res;

  res = false;
  ConsERr.CurncyCode = curcode;
  ConsERr.Date = dp;
  if (ReadLastMain(ConsERr,2,false)) then begin
    if (ConsERr.CurncyCode==curcode) then begin
      edp = ConsERr.Date;
      from = ConsERr.PLFrRate;
      to1 = ConsERr.PLToRate1;
      to2 = ConsERr.PLToRate2;
      res = true;
    end;
  end;
  GetForeignCurncyPLConsolidationRate = res;
  return;
end;


global
procedure GetFullCurncyPLConsolidationRate(var string curcode, Date dp, var val from, var val to1, var val to2, var val base1, var val base2)
begin
  Record BaseERVc BERr;
  Record BaseCurBlock bascur;
  Date edp;
  Boolean testf;
  
  from = blankval;
  to1 = blankval;
  to2 = blankval;
  base1 = blankval;
  base2 = blankval;
  BlockLoad(bascur);
  if (blank(curcode) and HasMultiCurrency) then begin
    curcode = bascur.StdBaseCur;
  end;
  if blank(curcode) then begin
    curcode = bascur.BaseCur1;
  end;
//  if (blank(bascur.BaseCur2)) then begin goto L88; end;
//  if (curcode == bascur.BaseCur1) then begin goto L77; end;
//  if (curcode == bascur.BaseCur2) then begin goto L77; end;
  testf = GetForeignCurncyPLConsolidationRate(curcode,from,to1,to2,dp,edp);
  if (curcode == bascur.BaseCur1) then begin
    base1 = to1;
    base2 = to2;
  end;
/*
L77:;
  base1 = 100;
  base2 = 100;
  BERr.Date = dp;
  if (ReadLastMain(BERr,1,false)) then begin
    base1 = BERr.Rate1;
    base2 = BERr.Rate2;
  end;
  goto L99;
L88:; // Old way of using Rate 
  if (curcode == bascur.BaseCur1) then begin goto L99; end;
  testf = GetForeignCurncyPLConsolidationRate(curcode,from,to1,to2,dp,edp);
*/
L99:;
  return;
end;

global
function Boolean GetForeignCurncyBalConsolidationRate(string curcode,var val from,var val to1,var val to2,Date dp,var Date edp)
begin
  record ConsERVc ConsERr;
  Boolean res;

  res = false;
  ConsERr.CurncyCode = curcode;
  ConsERr.Date = dp;
  if (ReadLastMain(ConsERr,2,false)) then begin
    if (ConsERr.CurncyCode==curcode) then begin
      edp = ConsERr.Date;
      from = ConsERr.BalFrRate;
      to1 = ConsERr.BalToRate1;
      to2 = ConsERr.BalToRate2;
      res = true;
    end;
  end;
  GetForeignCurncyBalConsolidationRate = res;
  return;
end;


global
procedure GetFullCurncyBalConsolidationRate(var string curcode, Date dp, var val from, var val to1, var val to2, var val base1, var val base2)
begin
  Record BaseERVc BERr;
  Record BaseCurBlock bascur;
  Date edp;
  Boolean testf;
  
  from = blankval;
  to1 = blankval;
  to2 = blankval;
  base1 = blankval;
  base2 = blankval;
  BlockLoad(bascur);
  if (blank(curcode) and HasMultiCurrency) then begin
    curcode = bascur.StdBaseCur;
  end;
  if blank(curcode) then begin
    curcode = bascur.BaseCur1;
  end;
//  if (blank(bascur.BaseCur2)) then begin goto L88; end;
//  if (curcode == bascur.BaseCur1) then begin goto L77; end;
//  if (curcode == bascur.BaseCur2) then begin goto L77; end;
  testf = GetForeignCurncyBalConsolidationRate(curcode,from,to1,to2,dp,edp);
  if (curcode == bascur.BaseCur1) then begin
    base1 = to1;
    base2 = to2;
  end;
  
/*
L77:;
  base1 = 100;
  base2 = 100;
  BERr.Date = dp;
  if (ReadLastMain(BERr,1,false)) then begin
    base1 = BERr.Rate1;
    base2 = BERr.Rate2;
  end;
  goto L99;
L88:; // Old way of using Rate 
  if (curcode == bascur.BaseCur1) then begin goto L99; end;
  testf = GetForeignCurncyBalConsolidationRate(curcode,from,to1,to2,dp,edp);
*/
L99:;
  return;
end;
