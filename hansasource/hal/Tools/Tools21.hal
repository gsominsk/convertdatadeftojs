external function Integer AccrualSimulationsTransferred(LongInt,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Integer PMCheckType(string,var string,var string);
external function Boolean DateLocked(Date,string);

global
function Boolean CheckCurncy(string paymode,string curncy)
BEGIN
  record AccVc Accr;
  record PMBlock pmrp;
  row PMBlock pmrw;
  Integer PMn,i,rwcnt;
  Boolean res;
          
  res = true;       
  PMn = 0;
  BlockLoad(pmrp);
  rwcnt = MatRowCnt(pmrp);
  if (len(paymode)>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(pmrp,i,pmrw);
      if (pmrw.Code==paymode) then begin 
        PMn = i;
        goto L99CheckCurncy;
      end;  
    end;
  end;      
L99CheckCurncy:; 
  MatRowGet(pmrp,PMn,pmrw); 
  Accr.AccNumber = pmrw.AccNr;
  if (ReadFirstMain(Accr,1,true)) then begin
    if (nonblank(Accr.Curncy)) then begin
      if (curncy!=Accr.Curncy) then begin
        res = false;
      end;
    end;
  end; 
  CheckCurncy = res;
  RETURN;
END;

global
function Integer GetCheck(string recpaymod,string rowpaymod,LongInt sernr,var string checknr,var string bankname,var string curncy,var val amount,var Date efdat,var Date regdat)
BEGIN
  record CheckVc Checkr;
  record OwnCheckVc OwnCheckr;
  record CouponVc Couponr;
  Integer cht;
  Date blankd;
  string 255 tstr;

  if (sernr==-1) then begin checknr=""; end else begin checknr = sernr; end;
  amount = blankval;
  efdat = blankd;
  regdat = blankd;
  bankname = "";
  if (nonblank(rowpaymod)) then begin
    cht = PMCheckType(rowpaymod,tstr,tstr);
  end else begin
    cht = PMCheckType(recpaymod,tstr,tstr);
  end;
  
  switch (cht) begin
    case kPayModeTypeCheque:
      Checkr.SerNr = sernr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        checknr = Checkr.CheckNr;
        bankname = Checkr.BankName;
        curncy = Checkr.CurncyCode;
        amount = Checkr.Amount;
        efdat = Checkr.EffectDate;
        regdat = Checkr.TransDate;
      end;
    case kPayModeTypeOwnCheque:
      OwnCheckr.SerNr = sernr;
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        checknr = OwnCheckr.CheckNr;
//        bankname = OwnCheckr.TargetAccNr;//it is not bank name
        bankname = OwnCheckr.BankName;
        curncy = OwnCheckr.CurncyCode;
        amount = OwnCheckr.Amount;
        efdat = OwnCheckr.EffectDate;
        regdat = OwnCheckr.TransDate;
      end;
    case kPayModeTypeCreditCard:
      Couponr.SerNr = sernr;
      if (ReadFirstMain(Couponr,1,true)) then begin
        checknr = "";
        bankname = "";
        curncy = Couponr.CurncyCode;
        amount = Couponr.Amount;
        efdat = blankd;
      end;
    case kPayModeTypeDebitCard:
      Couponr.SerNr = sernr;
      if (ReadFirstMain(Couponr,1,true)) then begin
        checknr = "";
        bankname = "";
        curncy = Couponr.CurncyCode;
        amount = Couponr.Amount;
        efdat = blankd;
      end;
  end;
  GetCheck = cht;
  RETURN;
END;

global
function Boolean PasteVEInPO(var record POVc POr,Boolean warnf)
BEGIN
  Boolean res;
  record CUVc VEr;
  val fr,to1,to2,br1,br2;
  string 5 crncy;
  
  VEr.Code = POr.VECode;
  res = ReadFirstMain(VEr,1,true);
  if (VEr.blockedFlag!=0) then begin res = false; end;
  if (res) then begin
    POr.Addr0 = VEr.Name;
    POr.Addr1 = VEr.InvAddr0;
    POr.Addr2 = VEr.InvAddr1;
    POr.Addr3 = VEr.InvAddr2;
    POr.InvAddr3 = VEr.InvAddr3;
    POr.InvAddr4 = VEr.InvAddr4;
    POr.VEContact = VEr.Person;
    POr.ExportFlag = VEr.ExportFlag;
    POr.PayDeal = VEr.VEPayDeal;
    POr.VEVATCode = VEr.VEVATCode;
    POr.VETaxTemplateCode = VEr.VETaxTemplateCode;
    POr.CurncyCode = VEr.VECurncyCode;
    POr.Objects = VEr.VEObjects;
    crncy = POr.CurncyCode;
    GetFullCurncyRate(crncy,POr.TransDate,fr,to1,to2,br1,br2);
    POr.CurncyCode = crncy;
    POr.FrRate = fr;
    POr.ToRateB1 = to1;
    POr.ToRateB2 = to2;
    POr.BaseRate1 = br1;
    POr.BaseRate2 = br2;      
    POr.LangCode = VEr.LangCode;
    POr.ShipMode = VEr.VEShipMode;
    POr.ShipDeal = VEr.VEShipDeal;
    POr.VEFactoring = VEr.VEFactoring;
    POr.InvoiceToCode = VEr.VEInvoiceToCode;
    POr.ExportFlag = VEr.ExportFlag;
    if (warnf) then begin
      if (nonblank(VEr.VEWarnText1)) then begin
        MessageBox(0,VEr.VEWarnText1);
      end;
    end;          
  end;
  PasteVEInPO = res;
  RETURN;
END;

global
updating function LongInt UpdatePPOKNr(LongInt oldnr)
BEGIN
  LongInt res;
  record ExpenseBlock ExpRec;
  
  res = oldnr;
  if (res==-1) then begin
    BlockLoad(ExpRec);
    ExpRec.PPOKNr = ExpRec.PPOKNr + 1;
    res = ExpRec.PPOKNr;
    BlockStore(ExpRec);
  end;
  UpdatePPOKNr = res;
  RETURN;
END;

global
updating procedure ExprsStats(record ExpVc Expp,Boolean deletef)
BEGIN
  record PPrsVc mainr;
  
  mainr.Person = Expp.Person;
  mainr.TransDate = Expp.TransDate;
  mainr.PPOKNr = Expp.PPOKNr;
  mainr.TransType = 0;
  mainr.TransNr = Expp.SerNr;
  if (deletef) then begin
    if (ReadFirstMain(mainr,0,true)) then begin
      RecordDelete(mainr);
    end;
  end else begin
    if (RecordStore(mainr,false)) then begin
    end;
  end;
  RETURN;
END;

global
updating procedure PPrsStats(record PPVc PPp,Boolean deletef)
BEGIN
  record PPrsVc mainr;
  row PPVc PPrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(PPp);
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(PPp,i,PPrw);
    switch (PPrw.stp) begin
      case 1:
        if (PPrw.ovst==0) then begin
          mainr.Person = PPrw.Person;
          mainr.TransDate = PPp.TransDate;
          mainr.TransNr = PPp.SerNr;
          mainr.TransType = 1;
          mainr.PPOKNr = PPp.PPOKNr;
          if (deletef) then begin
            if (ReadFirstMain(mainr,0,true)) then begin
              RecordDelete(mainr);
            end;
          end else begin
            if (RecordStore(mainr,false)) then begin
            end;
          end;          
        end;
    end;
  end;
  RETURN;
END;

global
function Integer IsUnOKAllowed_OPVc(record OPVc OPp)
BEGIN
  record APPayHistVc APPayHistr;
  Integer res;
  row OPVc OPrw;//OPRowType
  Integer i,rwcnt;
  
  res = 0;
  if (DateLocked(OPp.TransDate,"OPVc")) then begin
    res = 1046;
  end;
  if (OPp.Invalid!=0) then begin
    res = 1282;
  end;
  if (res==0) then begin
    rwcnt = MatRowCnt(OPp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPp,i,OPrw);
      if (OPrw.PrepayNr!=-1) then begin
        APPayHistr.VEPNr = OPrw.PrepayNr;
        APPayHistr.FileName = "VIVc";
        if (ReadFirstMain(APPayHistr,2,true)) then begin
          res = 22058;
          goto LIsUnOKAllowed_OPVc;
        end;
      end;
    end;
  end;
LIsUnOKAllowed_OPVc:;  
  IsUnOKAllowed_OPVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_CostUserVc(record CostUserVc CostUserp)
BEGIN
  Integer res;
  
  res = 0;
  IsUnOKAllowed_CostUserVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_ForecastUserVc(record ForecastUserVc ForecastUserp)
BEGIN
  Integer res;
  
  res = 0;
  IsUnOKAllowed_ForecastUserVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_ResultUserVc(record ResultUserVc ResultUserp)
BEGIN
  Integer res;
  
  res = 0;
  IsUnOKAllowed_ResultUserVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_VIVc(record VIVc VIp)
BEGIN
  record APVc APr;
  Integer res;
  row VIVc VIrw;
  Integer i,rwcnt;
  val visum;
  Boolean prepayf;
  record OPrsVc OPrsr;
  record OPVc OPr;
  record TRVc TRr;
  
  res = 0;
  if (DateLocked(VIp.TransDate,"VIVc")) then begin
    res = 1046;
  end;
  if (res==0) then begin
    if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      visum = -VIp.PayVal;
    end else begin
      visum = VIp.PayVal;
    end;
    rwcnt = MatRowCnt(VIp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIp,i,VIrw);
      if (VIrw.stp==kInvoiceRowTypePrepayment) then begin
        if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
          visum = visum + VIrw.PrepayAmount;
        end else begin
          visum = visum - VIrw.PrepayAmount;
        end;
        prepayf = true;
      end;
    end;
    APr.SerNr = VIp.SerNr;
    if (ReadFirstMain(APr,1,true)) then begin
      if (APr.RVal!=visum) then begin
        res = 22059;
        goto LIsUnOKAllowed_VIVc;
      end;
    end else begin
      if (prepayf==false) then begin
        if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) then begin
          if (VIp.CredInv>0) then begin          
            goto LIsUnOKAllowed_VIVc;
          end;
        end;
        if (VIp.InvType==kInvoiceTypeEmployee or VIp.InvType==kInvoiceTypeCash or VIp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
          goto LIsUnOKAllowed_VIVc;
        end;
        if (VIp.PayVal!=0) then begin
          res = 22059;
          goto LIsUnOKAllowed_VIVc;
        end;
      end;
    end;
    OPrsr.VINr = VIp.SerNr;
    OPrsr.TransType = kOPrsTransTypePayment;
    if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
      OPr.SerNr = OPrsr.TransNr;
      ReadFirstMain(OPr,1,true);
      if (OPr.DoneFlag!=0) or (OPr.OrderedFlag!=0) then begin
        res = 22058;
        goto LIsUnOKAllowed_VIVc;
      end;
    end;
    OPrsr.VINr = VIp.SerNr;
    OPrsr.TransType = kOPrsTransTypeNLTransaction;
    if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
      TRr.Number = OPrsr.TransNr;
      TRr.IntYc = OPrsr.IntYc;
      if (ReadFirstMain(TRr,2,true)) then begin
        res = 22058;
        goto LIsUnOKAllowed_VIVc;
      end;
    end;
    OPrsr.VINr = VIp.SerNr;
    OPrsr.TransType = kOPrsTransTypeCashOut;
    if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_VIVc;
    end;
    OPrsr.VINr = VIp.SerNr;
    OPrsr.TransType = kOPrsTransTypeCashIn;
    if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_VIVc;
    end;
    OPrsr.VINr = VIp.SerNr;
    OPrsr.TransType = kOPrsTransTypeReverseSupplierPrepayment;
    if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_VIVc;
    end;
    if (res==0) then begin
      res = AccrualSimulationsTransferred(VIp.SerNr,"VIVc");
    end;    
  end;
LIsUnOKAllowed_VIVc:;  
  IsUnOKAllowed_VIVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_CLInVc2(record CLInVc CLInp,var string fieldname,var Integer rownr)
BEGIN
  Integer res;
  record ARPayHistVc ARPayHistr;
  row CLInVc CLInrw;
  Integer i,rwcnt;
  record CheckVc Checkr;
  
  res = 0;
  fieldname = "";
  rownr = -1;
  if (DateLocked(CLInp.TransDate,"CLInVc")) then begin
    fieldname = "TransDate";
    res = 1046;
  end;
  if (res==0) then begin
    rwcnt = MatRowCnt(CLInp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLInp,i,CLInrw);
      switch (CLInrw.Type) begin
        case 4:
          if (CLInrw.TransNr!=-1) then begin
            ARPayHistr.CUPNr = CLInrw.TransNr;
            ARPayHistr.FileName = "IVVc";
            if (ReadFirstMain(ARPayHistr,2,true)) then begin
              fieldname = "TransNr";
              rownr = i;
              res = 22060;
              goto LIsUnOKAllowed_CLInVc;
            end;        
          end;
        case 6:
          if (CLInrw.TransNr!=-1) then begin
            Checkr.SerNr = CLInrw.TransNr;
            if (ReadFirstMain(Checkr,1,true)) then begin
              if (Checkr.Openf>kCheckTypeAccepted) then begin
                fieldname = "TransNr";
                rownr = i;
                res = 1292;
                goto LIsUnOKAllowed_CLInVc;
              end;
            end;
          end;
      end;
    end;
  end;
LIsUnOKAllowed_CLInVc:;
  IsUnOKAllowed_CLInVc2 = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_CLInVc(record CLInVc CLInp)
begin
  string 255 tstr;
  Integer i;
  
  IsUnOKAllowed_CLInVc = IsUnOKAllowed_CLInVc2(CLInp,tstr,i);
end;

global
function Integer IsUnOKAllowed_CLOutVc(record CLOutVc CLOutr,var string fieldname,var Integer rownr)
begin
  Integer res;
  row CLOutVc CLOutrw;
  Integer i,rwcnt;
  record OwnCheckVc OwnCheckr;
  
  res = 0;
  fieldname = "";
  rownr = -1;
  if (DateLocked(CLOutr.TransDate,"CLOutVc")) then begin
    fieldname = "TransDate";
    res = 1046;
  end;
  if (res==0) then begin
    rwcnt = MatRowCnt(CLOutr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLOutr,i,CLOutrw);
      switch (CLOutrw.Type) begin
        case 7:
          if (CLOutrw.TransNr!=-1) then begin
            OwnCheckr.SerNr = CLOutrw.TransNr;
            if (ReadFirstMain(OwnCheckr,1,true)) then begin
              if (OwnCheckr.Openf>kCheckTypeAccepted) then begin
                fieldname = "TransNr";
                rownr = i;
                res = 1292;
                goto LIsUnOKAllowed_CLOutVc;
              end;
            end;
          end;
      end;
    end;
  end;
LIsUnOKAllowed_CLOutVc:;
  IsUnOKAllowed_CLOutVc = res;
end;

global
function Integer IsUnOKAllowed_IPVc(record IPVc IPp)
BEGIN
  record ARPayHistVc ARPayHistr;
  Integer res;
  row IPVc IPrw;
  Integer i,rwcnt;
  string 255 tstr;
  Integer cht;
  record CheckVc Checkr;  
  
  res = 0;
  if (DateLocked(IPp.TransDate,"IVVc")) then begin
    res = 1046;
  end;
  if (res==0) then begin
    rwcnt = MatRowCnt(IPp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IPp,i,IPrw);
      if (IPrw.CUPNr!=-1) then begin
        ARPayHistr.CUPNr = IPrw.CUPNr;
        ARPayHistr.FileName = "IVVc";
        if (ReadFirstMain(ARPayHistr,2,true)) then begin
          res = 22060;
          goto LIsUnOKAllowed_IPVc;
        end;        
      end;

      if (IPrw.ChequeNr!=-1) then begin
        if (nonblank(IPrw.PayMode)) then begin
          cht = PMCheckType(IPrw.PayMode,tstr,tstr);
        end else begin
          cht = PMCheckType(IPp.PayMode,tstr,tstr);
        end;
        switch (cht) begin
          case 1:
            Checkr.SerNr = IPrw.ChequeNr;
            if (ReadFirstMain(Checkr,1,true)) then begin
              if (Checkr.Openf>=2) then begin
                res = 23080;
                goto LIsUnOKAllowed_IPVc;
              end;
            end;
        end;
      end;
    end;
  end;
  if (res==0 and HasLocalization("PRT")) then begin 
    if (nonblank(IPp.OfficialSerNr)) then begin 
      res = 19125;
      goto LIsUnOKAllowed_IPVc;      
    end;
  end;
LIsUnOKAllowed_IPVc:;  
  IsUnOKAllowed_IPVc = res;
  RETURN;
END;

function Boolean UnOKAllowed_IVVc(record IVVc IVp,Boolean prepayf,val notpaidsum)
BEGIN
  Boolean res;
  record IVVc lIVr;
  
  if (prepayf) then begin res = true; end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
/*  
    lIVr.SerNr = IVp.CredInv;
    if (ReadFirstMain(lIVr,1,true)) then begin
      if (lIVr.InvType==kInvoiceTypeCash) then begin res = true; end;
    end;
*/    
    if (IVp.CredInv>0) then begin res = true; end;
  end;
  if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin res = true; end;
  if (notpaidsum==0) then begin res = true; end;
  UnOKAllowed_IVVc = res;
  RETURN;
END;

function Integer TestArgEInvoiceStatus(record IVVc IVp)
begin
  Integer res;
  record EInvoiceQueVc EIQuer;
  record ERecordStatusVc ERSr;
  record InternetEnablerBlock IEb;
  Boolean testf,resf;

  if (IVp.CAEAFlag==0) then begin
    if (nonblank(IVp.CAE)) then begin
      res = 25707;
    end;
  end else begin
    resf = true;
    EIQuer.FileName = "ArgIVVc";
    EIQuer.RecSerNr = IVp.SerNr;
    EIQuer.RecVersionNr = 10000;
    if (ReadLastKey("RecVersionNr",EIQuer,3,false)) then begin
      res = 25707;
      if (EIQuer.FileName!="ArgIVVc") then begin testf = false; end;
      if (EIQuer.RecSerNr!=IVp.SerNr) then begin testf = false; end;
      if (testf) then begin
        BlockLoad(IEb);
        ERSr.FileName = "ArgIVVc";
        ERSr.Status = 0;
        ERSr.CustID = IEb.CustomerCode;
        ERSr.CustSerNr = IVp.SerNr;
        resf = ReadFirstKey("FileNameStatus",ERSr,4,true);
        if (testf==false) then begin
          ERSr.FileName = "ArgIVVc";
          ERSr.Status = 0;
          ERSr.CustID = IVp.CustCode;
          ERSr.CustSerNr = IVp.SerNr;
          resf = ReadFirstKey("FileNameStatus",ERSr,4,true);
        end;
      end;
    end;
    if (resf) then begin
      res = 0;
    end;
  end;
  TestArgEInvoiceStatus = res;
  return;
end;

global
function Integer IsUnOKAllowed_IVVc(record IVVc IVp)
BEGIN
  record ARVc ARr;
  Integer res;
  row IVVc IVrw;
  Integer i,rwcnt;
  val ivsum;
  Boolean prepayf;
  record INVc INr;
  record IPrsVc IPrsr;
  record MainStockBlock MSb;
  
  res = TestArgEInvoiceStatus(IVp);
  if (res!=0) then begin
    goto LIsUnOKAllowed_IVVc;
  end;
  if (nonblank(IVp.Hash)) then begin
    res = 20650;
    goto LIsUnOKAllowed_IVVc;
  end;
  if (DateLocked(IVp.TransDate,"IVVc")) then begin
    res = 1046;
  end;
  if (IVp.UpdStockFlag!=0) then begin
    BlockLoad(MSb);
    if (nonblankdate(MSb.StockCorectAfter)) then begin
      if (IVp.TransDate<MSb.StockCorectAfter) then begin
        res = 20884;
        goto LIsUnOKAllowed_IVVc;
      end;
    end else begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (ReadFirstItem(IVrw.ArtCode,INr,false,false)) then begin
          if ((INr.ItemType==1) or (INr.ItemType==2)) then begin
            res = 1273;
            goto LIsUnOKAllowed_IVVc;
          end;
        end;
      end;    
    end;
  end;
  if (IVp.Invalid!=0) then begin
    res = 1282;
  end;
  if (res==0) then begin
    ivsum = IVp.Sum4;
    rwcnt = MatRowCnt(IVp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
        ivsum = ivsum - IVrw.Sum;
        prepayf = true;
      end;
      switch (IVrw.stp) begin
        case kInvoiceRowTypePrepayment:
//          ivsum = ivsum - IVrw.Sum;//already in ARr.RVal taken into account
          prepayf = true;
        case kInvoiceRowTypeGiftVoucherPayment:
          ivsum = ivsum - IVrw.Sum;
        case kInvoiceRowTypeCashPayment:
          ivsum = ivsum - IVrw.Sum;
        case kInvoiceRowTypeLoyaltyPointsPayment:
          ivsum = ivsum - IVrw.Sum;
        case kInvoiceRowTypeCreditCardPayment:
          ivsum = ivsum - IVrw.Sum;
        case kInvoiceRowTypeChequePayment:
          ivsum = ivsum - IVrw.Sum;
      end;
    end;
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin ivsum = -ivsum; end;
    ARr.InvoiceNr = IVp.SerNr;
    if (ReadFirstMain(ARr,1,true)) then begin
      if (ARr.RVal!=ivsum) then begin
        res = 22059;
        goto LIsUnOKAllowed_IVVc;
      end;
    end else begin
      if (IVp.Sum4!=0) then begin
        if (UnOKAllowed_IVVc(IVp,prepayf,ivsum)==false) then begin
          res = 20874;
          goto LIsUnOKAllowed_IVVc;
        end;
      end;
    end;
    IPrsr.IVNr = IVp.SerNr;
    IPrsr.TransType = kIPrsTransTypeReceipt;
    if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_IVVc;
    end;
    IPrsr.IVNr = IVp.SerNr;
    IPrsr.TransType = kIPrsTransTypePurgeNLTransaction;
    if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_IVVc;
    end;
    IPrsr.IVNr = IVp.SerNr;
    IPrsr.TransType = kIPrsTransTypeNLTransaction;
    if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_IVVc;
    end;
    IPrsr.IVNr = IVp.SerNr;
    IPrsr.TransType = kIPrsTransTypeCashIn;
    if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_IVVc;
    end;
    IPrsr.IVNr = IVp.SerNr;
    IPrsr.TransType = kIPrsTransTypeCashOut;
    if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_IVVc;
    end;
    IPrsr.IVNr = IVp.SerNr;
    IPrsr.TransType = kIPrsTransTypeReverseCustomerPrepayment;
    if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
      res = 22058;
      goto LIsUnOKAllowed_IVVc;
    end;
    if (res==0) then begin
      res = AccrualSimulationsTransferred(IVp.SerNr,"IVVc");
    end;    
  end;
LIsUnOKAllowed_IVVc:;  
  IsUnOKAllowed_IVVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_VATIVVc(record VATIVVc VATIVp)
BEGIN
  Integer res;
  
  res = 0;
  if (DateLocked(VATIVp.TransDate,"VATIVVc")) then begin
    res = 1046;
  end;
LIsUnOKAllowed_VATIVVc:;  
  IsUnOKAllowed_VATIVVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_IntIVVc(record IntIVVc IntIVp)
BEGIN
  Integer res;
  
  res = 0;
  if (DateLocked(IntIVp.TransDate,"IVVc")) then begin
    res = 1046;
  end;
LIsUnOKAllowed_IntIVVc:;  
  IsUnOKAllowed_IntIVVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_VATVIVc(record VATVIVc VATVIp)
BEGIN
  Integer res;
  
  res = 0;
  if (DateLocked(VATVIp.TransDate,"VATVIVc")) then begin
    res = 1046;
  end;
LIsUnOKAllowed_VATVIVc:;  
  IsUnOKAllowed_VATVIVc = res;
  RETURN;
END;

global
function Boolean IsUnOKAllowed(string fnr,Date TransDate)
BEGIN
  Boolean res;
  
  res = true;
  switch (fnr) begin
    otherwise
      if (DateLocked(TransDate,fnr)) then begin
        res = false;
      end;
  end;
  IsUnOKAllowed = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_FEIVVc(record FEIVVc FEIVp)
BEGIN
  Integer res;
  
  res = 0;
  if (DateLocked(FEIVp.TransDate,"IVVc")) then begin
    res = 1046;
  end;
LIsUnOKAllowed_FEIVVc:;  
  IsUnOKAllowed_FEIVVc = res;
  RETURN;
END;

global
function Integer IsUnOKAllowed_FEVIVc(record FEVIVc FEVIp)
BEGIN
  Integer res;
  
  res = 0;
  if (DateLocked(FEVIp.TransDate,"VIVc")) then begin
    res = 1046;
  end;
LIsUnOKAllowed_FEVIVc:;  
  IsUnOKAllowed_FEVIVc = res;
  RETURN;
END;

function Integer IsUnOKAllowed_SDVc_TBIVVc(record SDVc SDp)
begin
  Integer res;
  record TBIVVc TBIVr;
  string 255 prcode;
  integer i,rwcnt;
  row SDVc SDrw;
  
  rwcnt = MatRowCnt(SDp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDp,i,SDrw);
    prcode = SDrw.PRCodeRow;
    if (blank(prcode)) then begin prcode = SDp.PRCode; end;
    if (nonblank(prcode)) then begin
      TBIVr.PRCode = prcode;
      TBIVr.oVc = 7;
      TBIVr.SerNr = SDp.SerNr;
      TBIVr.Row = i;
      TBIVr.ArtCode = SDrw.ArtCode;
      TBIVr.EMCode = "";
      TBIVr.ChildNr = -1;
      if (ReadFirstMain(TBIVr,0,true)) then begin
        if (TBIVr.Invoice>0) then begin
          res = 20885;
          goto LIsUnOKAllowed_SDVc_TBIVVc;
        end;
     end;
    end;
  end;
LIsUnOKAllowed_SDVc_TBIVVc:;  
  IsUnOKAllowed_SDVc_TBIVVc = res;
  return;
end;


global
function Integer IsUnOKAllowed_SDVc(record SDVc SDp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (SDp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_SDVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_SDVc;
  end;
//  res = IsUnOKAllowed_SDVc_TBIVVc(SDp);//JJRECALCSTOCK
LIsUnOKAllowed_SDVc:;  
  IsUnOKAllowed_SDVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_WSVc(record WSVc WSp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (WSp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_WSVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_WSVc;
  end;
LIsUnOKAllowed_WSVc:;  
  IsUnOKAllowed_WSVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_SRVc(record SRVc SRp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (SRp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_SRVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_SRVc;
  end;
LIsUnOKAllowed_SRVc:;  
  IsUnOKAllowed_SRVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_SHVc(record SHVc SHp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (SHp.ShipDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_SHVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_SHVc;
  end;
  if (nonblank(SHp.Hash)) then begin
    res = 20650;
    goto LIsUnOKAllowed_SHVc;
  end;
LIsUnOKAllowed_SHVc:;  
  IsUnOKAllowed_SHVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_DropSHVc(record DropSHVc DropSHp)
begin  
  Integer res;
  Integer i,rwcnt;
  
  res = 0;
  if (DateLocked(DropSHp.ShipDate,"DropShipVc")) then begin
    res = 1046;
  end;
  if (DropSHp.Invalid!=0) then begin
    res = 1282;
  end;
LIsUnOKAllowed_DropSHVc:;  
  IsUnOKAllowed_DropSHVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_RetVc(record RetVc Retp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (Retp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_RetVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_RetVc;
  end;
  if (nonblank(Retp.Hash)) then begin
    res = 20650;
    goto LIsUnOKAllowed_RetVc;
  end;
LIsUnOKAllowed_RetVc:;  
  IsUnOKAllowed_RetVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_RetPUVc(record RetPUVc RetPUp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (RetPUp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_RetPUVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_RetPUVc;
  end;
LIsUnOKAllowed_RetPUVc:;  
  IsUnOKAllowed_RetPUVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_INTransferVc(record INTransferVc INTp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (INTp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_INTranferVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_INTranferVc;
  end;
LIsUnOKAllowed_INTranferVc:;  
  IsUnOKAllowed_INTransferVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_ProdVc(record ProdVc Prodp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (Prodp.ProdDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_ProdVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_ProdVc;
  end;
LIsUnOKAllowed_ProdVc:;  
  IsUnOKAllowed_ProdVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_ProdOperationVc(record ProdOperationVc ProdOp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (ProdOp.ProdDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_ProdOperationVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_ProdOperationVc;
  end;
LIsUnOKAllowed_ProdOperationVc:;  
  IsUnOKAllowed_ProdOperationVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_PUVc(record PUVc PUp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (PUp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_PUVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_PUVc;
  end;
LIsUnOKAllowed_PUVc:;  
  IsUnOKAllowed_PUVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_StockMovVc(record StockMovVc SMp)
begin  
  Integer res;
  record MainStockBlock MSb;

  res = 0;
  BlockLoad(MSb);
  if (nonblankdate(MSb.StockCorectAfter)) then begin
    if (SMp.TransDate<MSb.StockCorectAfter) then begin
      res = 20884;
      goto LIsUnOKAllowed_StockMovVc;
    end;
  end else begin
    res = 20884;
    goto LIsUnOKAllowed_StockMovVc;
  end;
  if (nonblank(SMp.Hash)) then begin
    res = 20650;
    goto LIsUnOKAllowed_StockMovVc;
  end;
LIsUnOKAllowed_StockMovVc:;  
  IsUnOKAllowed_StockMovVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_LeaveTransferVc(record LeaveTransferVc LTr)
begin
  Integer res;
  
  res = 0;
  if (DateLocked(LTr.TransDate,"LeaveTransferVc")) then begin
    res = 1046;
  end;
LIsUnOKAllowed_LeaveTransferVc:;  
  IsUnOKAllowed_LeaveTransferVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_LeaveApplicationVc(record LeaveApplicationVc LAr)
begin
  Integer res;
  
  res = 0;
  if (DateLocked(LAr.TransDate,"LeaveApplicationVc")) then begin
    res = 1046;
  end;
LIsUnOKAllowed_LeaveApplicationVc:;  
  IsUnOKAllowed_LeaveApplicationVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_IVCashVc(record IVCashVc IVCashr)
begin  
  Integer res;

  res = 0;
  if (nonblank(IVCashr.Hash)) then begin
    res = 20650;
    goto LIsUnOKAllowed_IVCashVc;
  end;
LIsUnOKAllowed_IVCashVc:;  
  IsUnOKAllowed_IVCashVc = res;
  return;
end;

global
function Integer IsUnOKAllowed_ORVc(record ORVc ORr)
begin  
  Integer res;

  res = 0;
  if (nonblank(ORr.Hash)) then begin
    res = 20650;
    goto LIsUnOKAllowed_ORVc;
  end;
LIsUnOKAllowed_ORVc:;  
  IsUnOKAllowed_ORVc = res;
  return;
end;
