external updating procedure QueryELearningServer(array string,array string,longint);
external procedure AddMinutesToDateTime(var date,var time,longint);

global
updating procedure InitUniversityCache()
begin
  record UniversityURLCacheVc UUCr;
  record UniversityURLCacheVc oldUUCr;
  
  while (LoopMain(UUCr,1,true)) begin
    switch (UUCr.State) begin
      case kUniversityURLStateRequesting:
        RecordCopy(oldUUCr,UUCr);
        UUCr.State = kUniversityURLStateRequest;
        RecordUpdate(oldUUCr,UUCr,false);
    end;
  end;
  return;  
end;

function longint UniversityCacheAgeLimit() //in minutes
begin
  UniversityCacheAgeLimit = 60;
  return;
end;

function boolean UniversityCacheRecordExpired(record UniversityURLCacheVc UUCr)
begin
  date d;
  time t;
  boolean res;
  
  res = false;
  d = UUCr.UDate;
  t = UUCr.UTime;
  AddMinutesToDateTime(d,t,UniversityCacheAgeLimit);
        
  if (d<=CurrentDate) then begin
    if (d==CurrentDate) then begin
      if (t<=CurrentTime) then begin
        res = true;
      end;
    end else begin
      res = true;
    end;
  end;
  UniversityCacheRecordExpired = res;
  return;
end;

global
updating procedure UpdateUniversityCache(string arg)
begin
  record UniversityURLCacheVc UUCr;
  record UniversityURLCacheVc oldUUCr;
  uuid bluuid;
  longint acnt;
  array string 255 awindows;
  array string 255 auuid;
  date d;
  time t;
  
  acnt = 0;
  while (LoopMain(UUCr,1,true)) begin
    switch (UUCr.State) begin
      case kUniversityURLStateValid:
        // re check if time and date are >limit
        if (UniversityCacheRecordExpired(UUCr)) then begin
          // client notification, need to validate (uuid is same as on server and thus sent to server)
          // fetch immediately
          awindows[acnt] = UUCr.WindowName;
          auuid[acnt] = UUCr.UUID;
          acnt = acnt+1;
        end;
      case kUniversityURLStateNothing:
        // re check if time and date are >limit
        if (UniversityCacheRecordExpired(UUCr)) then begin
          // client notification, need to fetch (uuid is blanked when sending to server)
          // fetch immediately and change State to Requesting
          RecordCopy(oldUUCr,UUCr);
          UUCr.State = kUniversityURLStateRequesting;
          RecordUpdate(oldUUCr,UUCr,false);
          UUCr.UUID = bluuid;
          
          awindows[acnt] = UUCr.WindowName;
          auuid[acnt] = UUCr.UUID;
          acnt = acnt+1;
        end;
      case kUniversityURLStateRequest:
      
        // client notification, need to fetch (uuid is blanked when sending to server)
        // fetch immediately and change State to Requesting
        RecordCopy(oldUUCr,UUCr);
        UUCr.State = kUniversityURLStateRequesting;
        RecordUpdate(oldUUCr,UUCr,false);
        UUCr.UUID = bluuid;
        
        awindows[acnt] = UUCr.WindowName;
        auuid[acnt] = UUCr.UUID;
        acnt = acnt+1;
    end;
  end;
  
  if (acnt>0) then begin
    // send request to server
    QueryELearningServer(awindows,auuid,acnt);
  end;
out:;
  if (arg=="startup") then begin
    NewPeriodicTask("UpdateUniversityCache","UpdateUniversityCache","UpdateUniversityCache","",300,"");
  end;

  return;  
end;