external function string 60 AddStringToStringList(string,string);
external function Boolean FindLocationAccRow(string,row LocationAccBlock);
external function Integer CountObjects(string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean HasSalesmanChanged(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure RemoveOldUserObjects(string,var string);
external function roundmode DefaultRoundMode();
external procedure TBBUSumup(var record TBBUVc);
external procedure GetPRName(string,var string);
external procedure GetBaseCurncy(Integer,var string);
external procedure GetUserName(string,var string);
external procedure GetNextProjectNr(var string);
external function val FindVAT(string,val,Integer,Integer);
external procedure AddCalcPrice(record INVc,record CPMVc,string,val,string,Integer,var val);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean INVc_AllowSales(record INVc,var LongInt);
external function string 20 FindCustRoute(string,string,string);
remote procedure ORVc_GetPriceList(var record ORVc);

global
function Boolean PasteCustInOR(var record ORVc ORr)
BEGIN
  record CUVc CUr;
  Boolean res;
  record BaseCurBlock BaseCurRec;
  record RebVc Rebr;
  Integer inclvat;
  
  BlockLoad(BaseCurRec);
  CUr.Code = ORr.CustCode;
  res = ReadFirstMain(CUr,1,true);
  if (res) then begin
    Rebr.Code = CUr.RebCode;
    if (ReadFirstMain(Rebr,1,true)) then begin
      ORr.DiscPerc = Rebr.DiscPerc;
    end;
    ORr.Addr0  = CUr.Name;
    ORr.Addr1  = CUr.InvAddr0;
    ORr.Addr2  = CUr.InvAddr1;
    ORr.Addr3  = CUr.InvAddr2;
    ORr.InvAddr3 = CUr.InvAddr3;
    ORr.InvAddr4 = CUr.InvAddr4;
    ORr.CustCat = CUr.CustCat;
    ORr.Objects = CUr.Objects;
    ORr.LangCode = CUr.LangCode;
    ORr.ShipDeal = CUr.ShipDeal;
    ORr.ShipMode = CUr.ShipMode;
    ORr.CustVATCode = CUr.VATCode;
    ORr.ShipAddr0 = CUr.Name;
    ORr.ShipAddr1 = CUr.DelAddr0;
    ORr.ShipAddr2 = CUr.DelAddr1;
    ORr.ShipAddr3 = CUr.DelAddr2;
    ORr.DelAddr3 = CUr.DelAddr3;
    ORr.DelAddr4 = CUr.DelAddr4;
    ORr.CustContact = CUr.Person;
    ORr.RecipientGLN = CUr.RecipientGLN;
    ORr.CurncyCode = CUr.CurncyCode;
    if (blank(ORr.CurncyCode)) then begin
      ORr.CurncyCode = BaseCurRec.BaseCur1;
    end;
    ORr.Region = CUr.Region;
    ORr.NoTax1 = CUr.NoTax1;
    ORr.NoTax2 = CUr.NoTax2;
    ORr.VATNr = CUr.VATNr;
    ORr.PriceList = CUr.PLCode;
    ORr.RebCode = CUr.RebCode;
    ORr.Phone = CUr.Phone;
    ORr.Fax = CUr.Fax;
    ORr.Sorting = CUr.Sorting;
    ORVc_GetPriceList(ORr);
    ORr.InclVAT = inclvat;
    ORr.ExportFlag = CUr.ExportFlag;
    ORr.PayDeal = CUr.PayDeal;
    ORr.SalesMan = CUr.SalesMan;
//    PastePDInOR(ORp;
  end;
  PasteCustInOR = res;
  return;
end;

global
procedure ORVcCheckItemPrice(record ORVc ORp,Integer rownr, Boolean getprice)
BEGIN
  record PLVc PLr;
  record PLQVc PLQr;
  record PLDefVc PLDefr;
  record AccBlock ARAccRec;
  string 20 artcode,tax2code,location,taxtemplatecode;
  string 2 vatcode,paydeal;
  string 10 pricelist;
  Boolean recalcprice,pldeffound,pricefound,priceqfound,deppr;
  Boolean res;
  val price,vatval,t1,tax2prc;
  row ORVc ORrw;
  record INVc INr;
  Boolean calcprice,dummyf;
  string 255 tstr,salesacc;
  string 2 fakeVATCode;
  val t;
  Time blankt;

  MatRowGet(ORp,rownr,ORrw);
  res = true;
  recalcprice = false;
  pldeffound = false;
  pricefound = false;
  priceqfound = false;
  deppr = false;
  BlockLoad(ARAccRec);
  paydeal = "";
  pricelist = ORp.PriceList;
  vatcode = ORrw.VATCode;
  artcode = ORrw.ArtCode;
  price = ORrw.Price;
  paydeal = ORp.PayDeal;
  if (blank(VATCode)) then begin goto LORVcCIP; end;
  if ((ARAccRec.BasePriceInclVAT==0) and blank(pricelist)) then begin
    recalcprice = true;
  end else begin
    if (nonblank(pricelist)) then begin
      PLDefr.Code = PriceList;
      pldeffound = ReadFirstMain(PLDefr,1,true);
      if (PLDefr.DepPrice!=0) then begin deppr = true; end;
    end;    
    PLr.PLCode = PriceList;
    PLr.ArtCode = ArtCode;
    pricefound = ReadFirstMain(PLr,2,true);    
    if (deppr) then begin
      PLQr.PLCode = PriceList;
      PLQr.ArtCode = ArtCode;
      priceqfound = ReadFirstMain(PLQr,2,true);
    end;
    if ((!priceqfound and (ARAccRec.BasePriceInclVAT==0)) or
         (pricefound and pldeffound and (PLDefr.InclVAT==0)) or
         (priceqfound and pldeffound and (PLDefr.InclVAT==0))) then begin
      recalcprice = true;
    end;  
  end;
  if (recalcprice) then begin
    if (getprice) then begin
      location = ORrw.Location;
      if (blank(location)) then begin
        location = ORp.Location;
      end;
      price = blankval;
      if (GetItemPriceDiscount3(artcode,ORrw.Quant,INr,ORp.CurncyCode,
          ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,
          ORp.LangCode,ORp.CustCat,ORp.PriceList,ORp.RebCode,
          price,tstr,ORrw.vRebate,
          fakeVATCode,t,salesacc,0,calcprice,ORp.OrdDate,blankt,ORp.CustCode,true,dummyf,ORp.PayDeal,tax2code,tax2prc,ORp.Region,location,taxtemplatecode)) then begin 
      end;
      ORrw.Price = price;
      ORrw.BasePrice = t;
      ORrw.SalesAcc = salesacc;
    end;
    vatval = FindVAT(vatcode,price,0,0);
    price = price + vatval;
  end;
LORVcCIP:;
  MatRowPut(ORp,rownr,ORrw);
  RETURN;
END;

global
procedure ORVcGetCalcItemPrice(record INVc INr,record ORVc ORp,Integer rownr,var val pricep)
BEGIN
  row ORVc ORrw;
  record CPMVc CPr;
  Integer i,rwcnt;
  val price;
  
  rwcnt = MatRowCnt(ORp);
  MatRowGet(ORp,rownr,ORrw);
  ORrw.Price = blankval;
  MatRowPut(ORp,rownr,ORrw);

  CPr.Code = INr.CalcPrice;
  if (ReadFirstMain(CPr,1,true)) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORp,i,ORrw);
      if (i!=rownr) then begin
        if (ORrw.stp==1) then begin
          AddCalcPrice(INr,CPr,ORrw.ArtCode,ORrw.Sum,ORrw.VATCode,ORp.InclVAT,price);
        end;
      end;  
    end;
    price = Round(price,DefaultRoundMode);
    MatRowGet(ORp,rownr,ORrw);
    ORrw.Price = price;
    MatRowPut(ORp,rownr,ORrw);
  end;
  if (pricep!=-1) then begin pricep = price; end;
      
  RETURN;
END;  

global
updating function Integer CreatePRFromORD(var record ORVc ORp,var record PRVc PRr)
begin
  Integer res;
  record PRVc lastPRr;
  string 255 tstr;
  Integer i,rwcnt;
  LongInt prnr;
  record CUVc CUr;
  record ORVc lORr;
  
  lORr.SerNr = ORp.SerNr;
  if (ReadFirstMain(lORr,1,true)) then begin end;
  if (lORr.InvFlag>1) then begin
    res = 20252;
    goto LCreatePRFromORD;
  end;
  PRr.Code = ORp.PRCode;
  if (ReadFirstMain(PRr,1,true)==false) then begin
    RecordNew(PRr);
    PRr.Code = ORp.PRCode;
    PRr.CustCode = ORp.CustCode;
    PRr.CustName = ORp.Addr0;
    PRr.PrSalesMan = ORp.SalesMan;
    PRr.Leader = CurrentUser;
    GetUserName(PRr.Leader,tstr);
    PRr.LeaderName = tstr;
    PRr.StartDate = CurrentDate;
    PRr.EndDate = CurrentDate;
    PRr.LangCode = ORp.LangCode;
    PRr.Name = ORp.Comment;    
    PRr.Contact = ORp.CustContact;
    PRr.CurncyCode = ORp.CurncyCode;
    PRr.SalesGroup = ORp.SalesGroup;
    if (blank(PRr.Contact)) then begin
      CUr.Code = PRr.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin end;
      PRr.Contact = CUr.Person;
    end;
    if (blank(PRr.Code)) then begin
      GetNextProjectNr(tstr);
      PRr.Code = tstr;    
      prnr = NextSerNr("PRVc",PRr.StartDate,-1,false,"");
      if (StringToLongInt(PRr.Code)<prnr) then begin
        PRr.Code = prnr;
      end;
    end;
    if (nonblank(PRr.Code)) then begin
      if (RecordStore(PRr,false)) then begin
        ORp.PRCode = PRr.Code;
      end else begin
        res = 20174;
      end;
    end;
  end else begin
    res = 20174;
  end;
LCreatePRFromORD:;  
  CreatePRFromORD = res;
  return;
end;

global
function Integer CreateTBBUFromORD(record ORVc ORr,var record TBBUVc TBBUr)
begin
  Integer res;
  record CUVc CUr;
  row ORVc ORrw;
  row TBBUVc TBBUrw;
  string 255 tstr;
  Integer i,rwcnt,tbrow;
  string 10 basecur1;
  record PRVc PRr;
  
  PRr.Code = ORr.PRCode;
  ReadFirstMain(PRr,1,true);
  if (nonblank(ORr.CurncyCode)) then begin
    if (nonblank(PRr.CurncyCode)) then begin
      if (PRr.CurncyCode!=ORr.CurncyCode) then begin
        res = 1582;
        goto LCreateTBBUFromORD;
      end;
    end else begin
      GetBaseCurncy(1,basecur1);
      if (basecur1!=ORr.CurncyCode) then begin
        res = 1582;
        goto LCreateTBBUFromORD;
      end;
    end;
  end;
  TBBUr.PRCode = ORr.PRCode;
  if (ReadFirstMain(TBBUr,1,true)==false) then begin 
    RecordNew(TBBUr);
    TBBUr.Members = PRr.Members;
    TBBUr.SalesGroup = ORr.SalesGroup;
    TBBUr.TransDate = ORr.OrdDate;
    TBBUr.CustCode = ORr.CustCode;
    CUr.Code = TBBUr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
    end;
    TBBUr.CurncyCode = ORr.CurncyCode;
    TBBUr.FrRate = ORr.FrRate;
    TBBUr.ToRateB1 = ORr.ToRateB1;
    TBBUr.ToRateB2 = ORr.ToRateB2;
    TBBUr.BaseRate1 = ORr.BaseRate1;
    TBBUr.BaseRate2 = ORr.BaseRate2;
    TBBUr.CustName = ORr.Addr0;
    TBBUr.PRLeader = PRr.Leader;
    TBBUr.SalesMan = ORr.SalesMan;
    TBBUr.LangCode = ORr.LangCode;
    TBBUr.PRCode = ORr.PRCode;
    GetPRName(TBBUr.PRCode,tstr);
    TBBUr.PRName = tstr;    
    TBBUr.Comment = ORr.Comment;
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ORrw.stp==10) then begin goto LSKIPORROW; end;
      ClearRow(TBBUr,TBBUrw,ORrw.stp);
      TBBUrw.ArtCode = ORrw.ArtCode;
      TBBUrw.Qty = ORrw.Quant;
      TBBUrw.Price = ORrw.Price;
      TBBUrw.Sum = ORrw.Sum;
      TBBUrw.Objects = ORrw.Objects;
      TBBUrw.Comment = ORrw.Spec;
      TBBUrw.Recepy = ORrw.Recepy;
      TBBUrw.MotherArtCode = ORrw.MotherArtCode;
      TBBUrw.RecipeQuant = ORrw.RecipeQuant;
      TBBUrw.Cost = ORrw.BasePrice;
      TBBUrw.GP = ORrw.rowGP;
      TBBUrw.GM = TBBUrw.GP*100/TBBUrw.Sum;
      if (ORrw.stp==17) then begin
        TBBUrw.Comment = "";
        TBBUrw.Spec = ORrw.Spec;
      end;
      MatRowPut(TBBUr,tbrow,TBBUrw);
      tbrow = tbrow + 1;
LSKIPORROW:;
    end;
    TBBUSumup(TBBUr);
    res = 0;
  end else begin
    res = 2084;
  end;
LCreateTBBUFromORD:;  
  CreateTBBUFromORD = res;
  return;
end;

global
function Boolean ORDelWithTBIV(record ORVc ORr)
begin
  Boolean res;
  record SHVc SHr;
  Boolean found;
  record TBIVVc TBIVr;
  
  res = false;
  found = true;
  SHr.OrderNr = ORr.SerNr;
  while (LoopKey("OrderKey",SHr,1,found)) begin
    if (SHr.OrderNr!=ORr.SerNr) then begin found = false; end;
    if (found) then begin
      TBIVr.PRCode = ORr.PRCode;
      TBIVr.oVc = 4;
      TBIVr.SerNr = SHr.SerNr;
      if (ReadFirstKey("MainKey",TBIVr,3,true)) then begin
        res = true;
        goto LORDelWithTBIV;
      end;
    end;
  end;
LORDelWithTBIV:;  
  ORDelWithTBIV = res;  
  return;
end;

global
procedure ORVc_PasteLocation(var record ORVc ORr,Integer rownr)
begin
  row ORVc ORrw;
  Integer i,rwcnt;
  Integer exportflag;
  record INVc INr;
  val price,vreb,baseprice,tax2prc;
  string 255 curitemname,vatcode,salesacc,tax2code,location,taxtemplatecode;
  Boolean calcprice,dummyf;
  Time blankt;
  row LocationAccBlock LAbrw;
  
  if (rownr<0) then begin
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      location = ORrw.Location;
      if (blank(location)) then begin
        location = ORr.Location;
      end;
/*
      exportflag = ORr.ExportFlag;
      GetItemPriceDiscount3(ORrw.ArtCode,ORrw.Quant,INr,ORr.CurncyCode,
                            ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                            ORr.LangCode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            exportflag,calcprice,ORr.OrdDate,blankt,ORr.CustCode,true,dummyf,ORr.PayDeal,
                            tax2code,tax2prc,ORr.Region,location,taxtemplatecode);
*/
      if (FindLocationAccRow(location,LAbrw)) then begin
        switch (ORr.ExportFlag) begin
          case 1: salesacc = LAbrw.EUSalesAcc;
          case 2: salesacc = LAbrw.ExpSalesAcc;
          case 3: salesacc = LAbrw.EUSalesAcc;
          case 4: salesacc = LAbrw.ExpSalesAcc;
          otherwise salesacc = LAbrw.SalesAcc;
        end;
        if (nonblank(salesacc)) then begin
          ORrw.SalesAcc = salesacc;
          MatRowPut(ORr,i,ORrw);
        end;
      end;
    end;
    ORr.Sorting = FindCustRoute(ORr.CustCode,ORr.Location,ORr.DelAddrCode);
  end else begin
    MatRowGet(ORr,rownr,ORrw);
    location = ORrw.Location;
    if (blank(location)) then begin
      location = ORr.Location;
    end;
/*
    exportflag = ORr.ExportFlag;
    GetItemPriceDiscount3(ORrw.ArtCode,ORrw.Quant,INr,ORr.CurncyCode,
                          ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                          ORr.LangCode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
                          price,curitemname,vreb,vatcode,baseprice,salesacc,
                          exportflag,calcprice,ORr.OrdDate,blankt,ORr.CustCode,true,dummyf,ORr.PayDeal,
                          tax2code,tax2prc,ORr.Region,location,taxtemplatecode);
*/
    if (FindLocationAccRow(location,LAbrw)) then begin
      switch (ORr.ExportFlag) begin
        case 1: salesacc = LAbrw.EUSalesAcc;
        case 2: salesacc = LAbrw.ExpSalesAcc;
        case 3: salesacc = LAbrw.EUSalesAcc;
        case 4: salesacc = LAbrw.ExpSalesAcc;
        otherwise salesacc = LAbrw.SalesAcc;
      end;
      if (nonblank(salesacc)) then begin
        ORrw.SalesAcc = salesacc;
        MatRowPut(ORr,rownr,ORrw);
      end;
    end;
  end;
  return;
end;

global
procedure ORVc_PasteSalesMan(var record ORVc ORp,string oldsalesmen)
begin 
  record UserVc Userr;
  string 255 salesman;
  Integer pos;
    
  if (HasSalesmanChanged(ORp.SalesMan,oldsalesmen)) then begin
    pos = 0;
    ExtractObj(oldsalesmen,pos,salesman);
    while (nonblank(salesman)) begin
      RemoveOldUserObjects(salesman,ORp.Objects);
      ExtractObj(oldsalesmen,pos,salesman);
    end;
    ORp.SalesGroup = "";    

    pos = 0;
    ExtractObj(ORp.SalesMan,pos,salesman);
    while (nonblank(salesman)) begin
      Userr.Code = salesman;
      if (ReadFirstMain(Userr,1,true)) then begin
        ORp.SalesGroup = AddStringToStringList(ORp.SalesGroup,Userr.SalesGroup);                
        ORp.Objects = AddObjectToObjectList(ORp.Objects,Userr.PersObjx);        
      end;
      ExtractObj(ORp.SalesMan,pos,salesman);
    end;
  end;
  return;
end;

global
function Boolean ORVc_AllowSales(record ORVc ORr,var Integer rownr,var LongInt ErrorCode)
begin
  Boolean res;
  row ORVc ORrw;
  Integer i,rwcnt;
  record INVc INr;
  
  res = true;
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    switch (ORrw.stp) begin
      case 1:
        if (nonblank(ORrw.ArtCode)) then begin
          if (ReadFirstItem(ORrw.ArtCode,INr,true,false)) then begin
            if (!INVc_AllowSales(INr,ErrorCode)) then begin
              res = false; 
              rownr = i;
              goto LORVc_AllowSales;
            end;
          end;
        end;
    end;
  end;
  
LORVc_AllowSales:;
  ORVc_AllowSales = res;
  return;
end;
