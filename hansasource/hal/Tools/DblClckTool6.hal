external procedure FindUserMailboxName(string,var string,var string);
external function Boolean FindDfncyStock(string,string,var record DfncyStockVc);
external procedure MSNCUFindMapPosition(record CUVc);
external function Boolean IsEnterprise();
remote function Integer DblNewRsrtEventVcRemote(string,string,Date,Time,Time,string,LongInt,string,LongInt,var record RsrtEventVc);
remote procedure RsrtEventVc_PasteJobToRsrtEvent(var record RsrtEventVc,Integer);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote procedure JobVc_PasteGuestCode(var record JobVc,Integer);
external procedure RsrtEventSumup(record RsrtEventVc);
remote function Boolean DfncyStockVcExists(string,string);
remote updating procedure AddORtoDfncyStock(LongInt);
remote function Boolean GetPurchaseItem(string,string,var record PIVc);
external function Integer InString2(string,string);
external function string 255 FormatLinkToStructForBrowser(longint,boolean,string,boolean);
external function string 255 removenextnode(var string);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
remote procedure OldVATIVSumup(var record IVVc,Boolean);
remote updating procedure SetReadFlagHal(LongInt,Integer);
remote procedure EmailValidationAtLoginOClassResendRemote(string);

global
procedure DblConsBalRClass(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  RepSpec.repname = "ConsBalRn";
  RepSpec.critname = "";
  RepSpec.f5 = dblstr;
  RepSpec.shortname = FirstInRange(l,10);
  RepSpec.LastVer = LastInRange(l,10);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblConsResRClass(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  RepSpec.repname = "ConsResRn";
  RepSpec.critname = "";
  RepSpec.f5 = dblstr;
  RepSpec.shortname = FirstInRange(l,10);
  RepSpec.LastVer = LastInRange(l,10);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblLatOnDay(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc repRepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RecordCopy(repRepSpec,RepSpec);
  repRepSpec.d2 = dblstr;
  repRepSpec.ArtMode = 2;
  RunReport(repRepSpec,0);   
  return;
end;

global
procedure DblLatUserDay(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc repRepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RecordCopy(repRepSpec,RepSpec);
  repRepSpec.f1 = FirstInRange(l,10);
  repRepSpec.d2 = LastInRange(l,20);
  repRepSpec.ArtMode = 2;
  RunReport(repRepSpec,0);   
  return;
end;

global
procedure DblLatDetail(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc repRepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RecordCopy(repRepSpec,RepSpec);
  repRepSpec.f1 = dblstr;
  repRepSpec.d2 = l;
  repRepSpec.ArtMode = 1;
  RunReport(repRepSpec,0);   
  return;
end;

global
procedure DblActEnabInfo(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  record ActVc Actr;
  row ActVc Actrw;
  Integer rwcnt,i;

  Actr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(Actr,1,true)) then begin
    rwcnt = MatRowCnt(Actr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Actr,i,Actrw);
      if ((Actrw.TextCode=="CS") and (rwcnt>=i+2)) then begin
        RepSpec.LastAcc = UpperCase(Actrw.Text);
        MatRowGet(Actr,i+1,Actrw);
        if (Actrw.TextCode=="CC") then begin
          RepSpec.FirstAcc = Actrw.Text;
        end;
      end;
    end;
    RepSpec.f1 = Actr.CUCode;
    RepSpec.f2 = Actr.CUName;
    RepSpec.f3 = Actr.Comment;
    RepSpec.f4 = Actr.Phone;
    RepSpec.Media = mtScreen;
    RepSpec.repname = "CodeManRn";
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
procedure DblPastePriceOnPO(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  record POVc POr;
  row POVc POrw;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.UsedOnly>0) then begin
    if (RepSpec.FirstAcc==GetWindowFileName(RepSpec.UsedOnly)) then begin
      GetWindowRecord(RepSpec.UsedOnly,POr);
      if ((POr.Closed==0) and (POr.OKFlag==0)) then begin
        MatRowGet(POr,RepSpec.flags[0],POrw);
        if ((POrw.Shipd1==0) and (POrw.Invd==0)) then begin
          POrw.Price = StringToVal(dblstr,M4Val);
          MatRowPut(POr,RepSpec.flags[0],POrw);
          PutWindowRecord(RepSpec.UsedOnly,POr);
          CloseWindow(wn);
        end;  
      end;  
    end;
  end;  
  RETURN;
END;

global
procedure DblPastePrOnOR(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  record ORVc ORr;
  row ORVc ORrw;
  Integer wn;
  Integer orwn
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  orwn = RepSpec.UsedOnly;
  if (orwn>0) then begin
    if (RepSpec.FirstAcc==GetWindowFileName(orwn)) then begin
      GetWindowRecord(orwn,ORr);
      DeselectWindow(orwn,false);
      if (ORr.Closed==0) then begin
        MatRowGet(ORr,RepSpec.flags[0],ORrw);
        if ((ORrw.Shipd1==blankval) and (ORrw.Invd==blankval)) then begin
          ORrw.Price = StringToVal(dblstr,M4Val);
          MatRowPut(ORr,RepSpec.flags[0],ORrw);
//          PutWindowRecord(orwn,ORr); // This kills memory, RepSpec in the Current Window gets crapped, ithink it is gHalCurWn
        end;
      end;  
    end;
  end;  
  RETURN;
END;

global
procedure DblPastePrOnIV(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  record IVVc IVr;
  row IVVc IVrw;
  Integer wn;
  Integer ivwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  ivwn = RepSpec.UsedOnly;
  if (ivwn>0) then begin
    if (RepSpec.FirstAcc==GetWindowFileName(ivwn)) then begin
      GetWindowRecord(ivwn,IVr);
      DeselectWindow(ivwn,false);
      if (IVr.OKFlag==0) then begin
        MatRowGet(IVr,RepSpec.flags[0],IVrw);
        if (IVrw.OrdRow==-1) then begin
          IVrw.Price = StringToVal(dblstr,M4Val);
          MatRowPut(IVr,RepSpec.flags[0],IVrw);          
          PutWindowRecord(ivwn,IVr);
        end;
      end;  
    end;
  end;  
  RETURN;
END;

global
procedure DblPastePrOnIVCash(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.UsedOnly>0) then begin
    if (RepSpec.FirstAcc==GetWindowFileName(RepSpec.UsedOnly)) then begin
      DeselectWindow(RepSpec.UsedOnly,false);
      GetWindowRecord(RepSpec.UsedOnly,IVCashr);
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        MatRowGet(IVCashr,RepSpec.flags[0],IVCashrw);
        IVCashrw.Price = StringToVal(dblstr,M4Val);
        MatRowPut(IVCashr,RepSpec.flags[0],IVCashrw);          
        PutWindowRecord(RepSpec.UsedOnly,IVCashr);
      end;  
    end;
  end;  
  RETURN;
END;

global
procedure DblITVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ITVc ITr;

  if (nonblank(dblstr)) then begin
    ITr.Code = FirstInRange(dblstr,5);
    if (ReadFirstMain(ITr,1,true)) then begin  
      wn = OpenWindow("ITDClass",1,0,"","",ITr);
    end; 
  end;
  return;
end;

global
procedure DblRecalculateIV(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IVVc IVr;
   
  IVr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
    OldVATIVSumup(IVr,true);
    PutWindowRecord(wn,IVr);
  end;     
  return;
end;

global 
procedure DblORProgVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record ORProgVc ORProgr;
   
   ORProgr.SerNr = dblstr;
   if (ReadFirstMain(ORProgr,1,true)) then begin
     wn = OpenWindow("ORProgDClass",1,0,"","",ORProgr);
   end;   
   return;
end;

global
updating procedure DblLocalMailVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record LocalMailVc LocalMailr;
  
  if (nonblank(l)) then begin
    LocalMailr.SerNr = l;
    if (ReadFirstMain(LocalMailr,1,true)) then begin  
      SetReadFlagHAL(LocalMailr.SerNr,0);
      wn = OpenWindow("LocalMailDClass",1,0,"","",LocalMailr);
    end; 
  end;
  return;
end;

global
procedure DblVEINStat(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  GetWindowRecord(CurWindow,RepSpec);
  tstr = RepSpec.f1;
  ReportDefaults(RepSpec,"INLastPPriceRClass");    
  RepSpec.repname = "INLastPPriceRn";
  RepSpec.f1 = tstr;
  RepSpec.f2 = dblstr;
  RepSpec.long1 = 5;
  RepSpec.ArtMode = 0;
  RepSpec.Media = 6;
  RunReport(RepSpec,1);     
  RETURN;
END;

global
procedure DblItemHistLine(string dblstr,string l,Integer currepwn)
begin
  string 255 fr;
  LongInt to;
  Integer wn;
  record PUVc PUr;
  record IVVc IVr;
  record SRVc SRr;
  record ProdVc Prodr;
  record RetVc Retr;
  record StockMovVc StockMovr;
  record StockTakeVc StockTaker;
  record ProdOperationVc ProdOpr;
  
  fr = FirstInRange(dblstr,15);
  to = LastInRange(dblstr,15);
  if (fr==USetStr(1150)) then begin
    IVr.SerNr = to;
    if (ReadFirstMain(IVr,1,true)) then begin  
      wn = OpenWindow("IVDClass",1,0,"","",IVr);
    end; 
    goto LDblItemHistLine;
  end;
  if (fr==USetStr(1157)) then begin
    PUr.SerNr = to;
    if (ReadFirstMain(PUr,1,true)) then begin  
      wn = OpenWindow("PUDClass",1,0,"","",PUr);
    end; 
    goto LDblItemHistLine;
  end;
  if (fr==USetStr(1162)) then begin
    Prodr.SerNr = to;
    if (ReadFirstMain(Prodr,1,true)) then begin  
      wn = OpenWindow("ProdDClass",1,0,"","",Prodr);
    end; 
    goto LDblItemHistLine;
  end;
  if (fr==USetStr(1633)) then begin
    ProdOpr.SerNr = to;
    if (ReadFirstMain(ProdOpr,1,true)) then begin  
      wn = OpenWindow("ProdOperationDClass",1,0,"","",ProdOpr);
    end; 
    goto LDblItemHistLine;
  end;
  if (fr==USetStr(1421)) then begin
    Retr.SerNr = to;
    if (ReadFirstMain(Retr,1,true)) then begin  
      wn = OpenWindow("RetDClass",1,0,"","",Retr);
    end; 
    goto LDblItemHistLine;
  end;
  if (fr==USetStr(1172)) or (fr==USetStr(1448)) then begin
    StockMovr.SerNr = to;
    if (ReadFirstMain(StockMovr,1,true)) then begin  
      wn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
    end; 
    goto LDblItemHistLine;
  end;
  if (fr==USetStr(1421)) then begin
    StockTaker.SerNr = to;
    if (ReadFirstMain(StockTaker,1,true)) then begin  
      wn = OpenWindow("StockTakeDClass",1,0,"","",StockTaker);
    end; 
    goto LDblItemHistLine;
  end;
  if (fr==USetStr(1636)) then begin
    SRr.SerNr = to;
    if (ReadFirstMain(SRr,1,true)) then begin  
      wn = OpenWindow("SRDClass",1,0,"","",SRr);
    end; 
    goto LDblItemHistLine;
  end;
LDblItemHistLine:;  
  return;
end;

global
procedure STCompDbl(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  RepSpec.repname = "STDblVarCompRn";
  RepSpec.Media = mtScreen;  
  RepSpec.f1 = dblstr;
  RepSpec.f3 = "";
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblLiqInfoVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record LiqInfoVc LIr;
  string 255 tstr;

  if (nonblank(l)) then begin
    tstr = l;
  end else begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    LIr.SerNr = LastInRange(tstr,10);
    if (ReadFirstMain(LIr,1,true)) then begin  
      wn = OpenWindow("LiqInfoDClass",1,0,"","",LIr);
    end; 
  end;
  return;
end;

global
procedure DblCustConfig(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CustContModuleVc CustContModuler;
  Integer oldcomp;

  CustContModuler.CustCode = dblstr;
  CustContModuler.ContractNr = LastInRange(l,20);
  CustContModuler.ChildSerNr = -1;
  if (SetCompanyCode(FirstInRange(l,20),false)) then begin
    if (ReadFirstMain(CustContModuler,3,true)) then begin
      wn = OpenWindow("CustContModuleDClass",1,0,"","",CustContModuler);
    end;
  end;
  return;
end;


global
procedure DblPUVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PUVc PUr;
   
  PUr.SerNr = FirstInRange(l,10);
  if (PUr.SerNr<=0) then begin
    PUr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(PUr,1,true)) then begin
    wn = OpenWindow("PUDClass",1,0,"","",PUr);
  end;     
  return;
end;

global
procedure DblUnitTestAnswerVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record UnivTestAnswerVc UTAr;
   
  UTAr.CustCode = dblstr;
  UTAr.CourseCode = l;
  if (ReadFirstKey("CustCode",UTAr,3,true)) then begin
    wn = OpenWindow("UnivTestAnswerDClass",1,0,"","",UTAr);
  end;     
  return;
end;

global
procedure DblCOCUServiceVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record COCUServiceVc COCUServicer;

  if (nonblank(l)) then begin
    COCUServicer.SerNr = l;
  end else begin
    COCUServicer.SerNr = dblstr;
  end;
  if (COCUServicer.SerNr>0) then begin
    if (ReadFirstMain(COCUServicer,1,true)) then begin  
      wn = OpenWindow("COCUServiceDClass",1,0,"","",COCUServicer);
    end; 
  end;
  return;
end;

global
procedure DblCUServiceVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CUServiceVc CUServicer;

  if (nonblank(l)) then begin
    CUServicer.SerNr = l;
  end else begin
    CUServicer.SerNr = dblstr;
  end;
  if (CUServicer.SerNr>0) then begin
    if (ReadFirstMain(CUServicer,1,true)) then begin  
      wn = OpenWindow("CUServiceDClass",1,0,"","",CUServicer);
    end; 
  end;
  return;
end;

global
procedure DblCUServiceMoreDet(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record COCUServiceVc COCUServicer;
  record RcVc RepSpec;

  if (nonblank(l)) then begin
    COCUServicer.SerNr = l;
  end else begin
    COCUServicer.SerNr = dblstr;
  end;
  if (COCUServicer.SerNr>0) then begin
    if (ReadFirstMain(COCUServicer,1,true)) then begin  
      GetWindowRecord(currepwn,RepSpec);
      RepSpec.repname = "COCUServiceInfoRn";
      RepSpec.long1 = COCUServicer.SerNr;
      RunReport(RepSpec,0);
    end; 
  end;
  return;
end;

global
procedure DblFlipFlags4(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  Integer wn;
  
  GetWindowRecord(currepwn,RepSpec);
  if (RepSpec.flags[4]==0) then begin
    RepSpec.flags[4] = 1;
  end else begin
    RepSpec.flags[4] = 0;
  end;
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblCUServiceInfo(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CUServiceVc CUServicer;
  record RcVc RepSpec;

  if (nonblank(l)) then begin
    CUServicer.SerNr = l;
  end else begin
    CUServicer.SerNr = dblstr;
  end;
  if (CUServicer.SerNr>0) then begin
    if (ReadFirstMain(CUServicer,1,true)) then begin
      GetWindowRecord(currepwn,RepSpec);
      RepSpec.repname = "CUServiceInfoRn";
      RepSpec.long1 = CUServicer.SerNr;
      RunReport(RepSpec,0);
    end; 
  end;
  return;
end;

global
procedure DblLetVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record LetVc Letr;
   
  Letr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(Letr,1,true)) then begin
    wn = OpenWindow("LetDClass",1,0,"","",Letr);
    goto LDblLetVc;
  end;     
  Letr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(Letr,1,true)) then begin
    wn = OpenWindow("LetDClass",1,0,"","",Letr);
    goto LDblLetVc;
  end;     
LDblLetVc:;  
  return;
end;

global
procedure DblTRIDVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record TRVc TRr;

  TRr.Number = FirstInRange(l,20);
  TRr.IntYc = StringToInt(LastInRange(l,20));
  if (ReadFirstKey("Number",TRr,2,true)) then begin
    wn = OpenWindow("TRDClass",1,0,"","",TRr);
  end;
  return;
end;

global
procedure DoVARMaskStock()
begin
  record RcVc RepSpec;
  record INVc INr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.Media = mtScreen;
  if (ReadFirstItem(RepSpec.f1,INr,true,false)) then begin
    RepSpec.f1 = INr.Code;
  end;
  RepSpec.f2 = RepSpec.f6;
  RepSpec.f3 = "";
  RepSpec.flags[19] = 1;
  RepSpec.repname = "VARMaskStockRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure DoLocationItem()
begin
  record RcVc RepSpec;
  record RcVc RepSpec1;
  record INVc INr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (ReadFirstItem(RepSpec.f1,INr,true,false)) then begin
    RepSpec1.Media = mtScreen;
    RepSpec1.f1 = INr.Code;
    RepSpec1.repname = "ItemLocationStatusRn";
    RepSpec1.flags[13] = 1;
    RepSpec1.flags[14] = 1;
    RepSpec1.flags[15] = 1;
    RepSpec1.flags[16] = 1;
    RunReport(RepSpec1,0);
  end;
  return;
end;

global
procedure VarMaskVarDbl(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  record RcVc curRepSpec;

  if ((ProgramType==typFinancials) or (ProgramType==typHansaWorld) or (ProgramType==typPurplesoftERP) or (ProgramType==typOBSHousing) or (ProgramType==typPAYYAPERP) or (ProgramType==typStandardERP) or (ProgramType==typRussianStandard)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    GetWindowRecord(CurWindow,RepSpec);
    RepSpec.repname = "VarMaskVarRn";
    RepSpec.Media = mtScreen;
    RepSpec.f1 = dblstr;
    RepSpec.d1 = curRepSpec.d1;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
procedure DoFutureStockHist()
begin
  record RcVc RepSpec;
  record INVc INr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.Media = mtScreen;
  if (ReadFirstItem(RepSpec.f1,INr,true,false)) then begin
    RepSpec.f1 = INr.Code;
  end;
  RepSpec.f2 = ""; // RepSpec.f6; // don't care about location
  RepSpec.d1 = AddDay(CurrentDate,-60);
  RepSpec.flags[1] = 1;
  RepSpec.repname = "DoFutureStockHistRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure FutureStockHistDbl(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,RepSpec);
  RepSpec.repname = "DoFutureStockHistRn";
  RepSpec.f1 = FirstInRange(l,20);
  RepSpec.f2 = LastInRange(l,20);
  RepSpec.d1 = dblstr;
  RepSpec.flags[1] = 0;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure DblRecVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RecVc Recr;

  Recr.Code = dblstr;
  if (ReadFirstMain(Recr,1,true)) then begin  
    wn = OpenWindow("RecDClass",1,0,"","",Recr);
  end;
  return;
end;

global
procedure DblKeyComp(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.repname = "KeyCompRn";
  RepSpec.Media = mtScreen;
  RepSpec.critname = "";
  RepSpec.TransStr = dblstr;
  RepSpec.shortname = l;
  RepSpec.ArtMode = 0;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblKeyCompDetail(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.repname = "KeyCompRn";
  RepSpec.Media = mtScreen;
  RepSpec.critname = "";
  RepSpec.TransStr = dblstr;
  RepSpec.shortname = FirstInRange(l,10);
  RepSpec.long2 = StringToLongInt(LastInRange(l,10));
  RepSpec.ArtMode = 1;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblKeyVIInfo(string dblstr,string l,Integer currepwn)
BEGIN
  record VIVc VIr;
  record RcVc RepSpec;
  Integer oldcomp;
  Integer wn;

  oldcomp = CurrentCompany;
  if (SetCompany(StringToLongInt(l),false)) then begin
    VIr.SerNr = StringToLongInt(dblstr);
    if (ReadFirstMain(VIr,1,true)) then begin
      RepSpec.repname = "VIInfoRn";
      RepSpec.long1 = VIr.SerNr;
      RepSpec.Media = mtScreen;
      RunReport(RepSpec,0);
    end;
    ResetCompany(oldcomp);
  end;
  RETURN;
END;

global
procedure DblKeyIVInfo(string dblstr,string l,Integer currepwn)
BEGIN
  record IVVc IVr;
  record RcVc RepSpec;
  Integer oldcomp;
  Integer wn;

  oldcomp = CurrentCompany;
  if (SetCompany(StringToLongInt(l),false)) then begin
    IVr.SerNr = StringToLongInt(dblstr);
    if (ReadFirstMain(IVr,1,true)) then begin
      RepSpec.repname = "IVInfoRn";
      RepSpec.long1 = IVr.SerNr;
      RepSpec.Media = mtScreen;
      RunReport(RepSpec,0);
    end;
    ResetCompany(oldcomp);
  end;
  RETURN;
END;

global
procedure DblOpenNodeInWeb(string dblstr,string l,Integer currepwn)
begin
  string 255 link;
  string 255 element,forcelang;
  if (nonblank(l)) then begin
    link = l;
    element = removenextnode(link);
    forcelang = removenextnode(link);
    link = FormatLinkToStructForBrowser(StringToInt(element),true,forcelang,false);
  end else begin
    link = dblstr;
  end;
  if (nonblank(link)) then begin
    OpenWebBrowser(link);
  end;
  return;
end;

global
procedure DblOpenNodeInWeb2(string dblstr,string l,Integer currepwn)
begin
  string 255 link;
  string 255 element,forcelang;

  OpenWebBrowser(l);

  return;
end;

global
procedure DblBankTRVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record BankTRVc BankTRr;
  string 255 tstr;

  if (nonblank(l)) then begin
    tstr = l;
  end else begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    BankTRr.SerNr = LastInRange(tstr,10);
    if (ReadFirstMain(BankTRr,1,true)) then begin  
      wn = OpenWindow("BankTRDClass",1,0,"","",BankTRr);
    end; 
  end;
  return;
end;

global
procedure DblCredManEventVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record CredManEventVc CredManEventr;
  string 255 tstr;
  
  if (nonblank(l)) then begin
    tstr = l;
  end else begin
    tstr = dblstr;
  end;
  if (InString2(tstr,",")>0) then begin
    ReportDefaults(RepSpec,"CredManInfoRClass");    
    RepSpec.repname = "CredManInfoSelRn";
    RepSpec.f1 = tstr;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);
  end else begin
    CredManEventr.SerNr = StringToLongInt(tstr);
    if (ReadFirstMain(CredManEventr,1,true)) then begin  
      wn = OpenWindow("CredManEventDClass",1,0,"","",CredManEventr);
    end;
  end;
  return;
end;

global
procedure DblSMSStatus(string dblstr,string l,Integer currepwn)
begin
  record SMSVc SMSr;
  integer nwn;
  
  if (nonblank(l)) then begin
    SMSr.SerNr = StringToLongint(l);
    if (ReadFirstMain(SMSr,1,true)) then begin
      nwn = OpenWindow("SMSDClass",1,0,"","",SMSr);
    end;
  end;
  return;
end;

global
procedure DblBPCVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record BPCVc BPCr;
  string 255 tstr;

  if (nonblank(l)) then begin
    tstr = l;
  end else begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    BPCr.SerNr = LastInRange(tstr,10);
    if (ReadFirstMain(BPCr,1,true)) then begin  
      wn = OpenWindow("BPCDClass",1,0,"","",BPCr);
    end; 
  end;
  return;
end;

global
procedure DblConsARRn(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.flags[29] = StringToInt(l);
  RepSpec.IncDaughter = 0;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblConsAPRn(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.flags[29] = StringToInt(l);
  RepSpec.IncDaughter = 0;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblBuyBackVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record BuyBackVc BBr;
  string 255 tstr;

  if (nonblank(l)) then begin
    tstr = l;
  end else begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    BBr.SerNr = LastInRange(tstr,10);
    if (ReadFirstMain(BBr,1,true)) then begin  
      wn = OpenWindow("BuyBackDClass",1,0,"","",BBr);
    end; 
  end;
  return;
end;

global
procedure DblSRCostAnalysis(string dblstr,string l,Integer currepwn)
begin
  Integer wn,nwn;
  record RcVc RepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.repname = "INCostAnalyseMn";
  nwn = OpenWindow("INCostAnalyseVClass",0,0,"","",RepSpec);
  return;
end;

global
procedure DblSerialNrHistory(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  ReportDefaults(RepSpec,"SerialNrRClass");  
  RepSpec.Media = mtScreen;
  RepSpec.f1 = l;
  RepSpec.f2 = dblstr;
  RepSpec.repname = "SerialNrRn";
  RunReport(RepSpec,0);     
  return;
end;

global
procedure DblAccrualDetail(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc curRepSpec;
  record RcVc RepSpec;
  
  if (nonblank(l)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    RecordCopy(RepSpec,curRepSpec);
    RepSpec.repname = "AccrualNewDetailRn";
    RepSpec.Media = mtScreen;
    RepSpec.long1 = FirstTransInRange(l);
    RepSpec.ArtMode = FirstTransTypeInRange(l);
    RepSpec.flags[0] = 1;
    RepSpec.flags[1] = 0;
    RepSpec.flags[2] = 0;
    RepSpec.flags[3] = 0;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
updating procedure DblDfncyStockVc(string dblstr,string l,Integer currepwn)
begin
  Integer nwn;
  record DfncyStockVc DSr;
  record PIVc PIr;
  record RcVc RepSpec;
  Boolean found;

  GetWindowRecord(currepwn,RepSpec);
  
  if (DfncyStockVcExists(FirstInRange(l,20),LastInRange(l,20))==false) then begin
    RecordNew(DSr);
    DSr.ArtCode = FirstInRange(l,20);
    DSr.Location = LastInRange(l,20);
    GetPurchaseItem(DSr.ArtCode,DSr.Location,PIr);
    DSr.Quant = StringToVal(dblstr,M4Qty);
    DSr.PICode = PIr.VEItemCode;
    DSr.VECode = PIr.VECode;
    nwn = OpenWindow("DfncyStockDClass",1,0,"","",DSr);
    WindowDoOK(nwn,0);
  end;
  return;
end;

global
updating procedure DblNewDfncyStock(string dblstr,string l,Integer currepwn)
begin
  Integer nwn;
  record DfncyStockVc DSr;
  record PIVc PIr;
  record RcVc RepSpec;
  Boolean found;

  GetWindowRecord(currepwn,RepSpec);
  RecordNew(DSr);
  DSr.ArtCode = FirstInRange(l,20);
  DSr.Location = LastInRange(l,20);
  GetPurchaseItem(DSr.ArtCode,DSr.Location,PIr);
  DSr.Quant = StringToVal(dblstr,M4Qty);
  DSr.PICode = PIr.VEItemCode;
  DSr.VECode = PIr.VECode;
  nwn = OpenWindow("DfncyStockDClass",1,0,"","",DSr);
  WindowDoOK(nwn,0);
  return;
end;

global
procedure DblDfncyStock(string dblstr,string l,Integer currepwn)
begin
  Integer nwn;
  record DfncyStockVc DSr;

  if (nonblank(l)) then begin
    DSr.SerNr = FirstInRange(l,10);
  end else begin
    DSr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(DSr,1,true)) then begin  
    nwn = OpenWindow("DfncyStockDClass",1,0,"","",DSr);
  end;
  return;
end;

global
updating procedure DblDfncyStockRsrvVc(string dblstr,string l,Integer currepwn)
begin
  Integer nwn;
  record DfncyStockVc DSr;
  record PIVc PIr;
  record RcVc RepSpec;
  record StockReservVc SResr;

  GetWindowRecord(currepwn,RepSpec);

  if (nonblank(l)) then begin
    SResr.SerNr = FirstInRange(l,10);
  end else begin
    SResr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(SResr,1,true)) then begin  
    DSr.StockReservNr = SResr.SerNr;
    if (ReadFirstKey("StockReservNr",DSr,1,true)==false) then begin
      RecordNew(DSr);
      DSr.StockReservNr = SResr.SerNr;
      DSr.ArtCode = SResr.ArtCode;
      DSr.Location = SResr.FromLocation;
      GetPurchaseItem(SResr.ArtCode,DSr.Location,PIr);
      DSr.FromFileName = SResr.FromFileName;
      DSr.FromSerNr = SResr.FromSerNr;
      DSr.Quant = SResr.Quant;
      DSr.PICode = PIr.VEItemCode;
      DSr.VECode = PIr.VECode;
      nwn = OpenWindow("DfncyStockDClass",1,0,"","",DSr);
      WindowDoOK(nwn,0);
    end else begin
      nwn = OpenWindow("DfncyStockDClass",1,0,"","",DSr);
    end;
  end; 
  return;
end;

global
updating procedure DblAllDfncySRsrvVc(string dblstr,string l,Integer currepwn)
begin
  LongInt FromSerNr;
  record RcVc RepSpec;
  record DfncyStockVc DSr;

  GetWindowRecord(currepwn,RepSpec);
  if (nonblank(l)) then begin
    FromSerNr = FirstInRange(l,10);
  end else begin
    FromSerNr = FirstInRange(dblstr,10);
  end;
  AddORtoDfncyStock(FromSerNr);  
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
updating procedure DblDfncyStockAll(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  Integer nwn;
  
  GetWindowRecord(currepwn,RepSpec);
  RepSpec.repname = "PurLocMn";
  RepSpec.critname = "PurLocVClass";
  RunMaintenance(RepSpec);
  return;
end;

global
procedure DblLetInfoDetail(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  RepSpec.FirstVer = FirstInRange(l,10);
  RepSpec.TransStr = LastInRange(l,10);
  RepSpec.flags[1] = 1;
  RepSpec.flags[18] = 0;
  RepSpec.repname = "LetInfoPlanMessageRn";
  RunReport(RepSpec,0);     
  return;
end;

global
procedure DblCUServiceHistVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CUServiceHistVc CUServiceHistr;

  if (nonblank(l)) then begin
    CUServiceHistr.SerNr = l;
  end else begin
    CUServiceHistr.SerNr = dblstr;
  end;
  if (CUServiceHistr.SerNr>0) then begin
    if (ReadFirstMain(CUServiceHistr,1,true)) then begin  
      wn = OpenWindow("CUServiceHistDClass",1,0,"","",CUServiceHistr);
    end; 
  end;
  return;
end;

global
procedure DblCUSCheckDetailVc(string dblstr,string l,Integer currepwn)
begin
  record CUServiceVc CUServicer;
  record RcVc RepSpec;

  if (nonblank(l)) then begin
    CUServicer.SerNr = l;
  end else begin
    CUServicer.SerNr = dblstr;
  end;
  if (CUServicer.SerNr>0) then begin
    if (ReadFirstMain(CUServicer,1,true)) then begin  
      GetWindowRecord(currepwn,RepSpec);
      RepSpec.repname = "CUCheckDetailRn";
      RepSpec.long1 = CUServicer.SerNr;
      RunReport(RepSpec,0);
    end; 
  end;
  return;
end;

global
procedure DblBankVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record BankVc Bankr;

  if (nonblank(dblstr)) then begin
    Bankr.Code = FirstInRange(dblstr,20);
    if (ReadFirstMain(Bankr,1,true)) then begin  
      wn = OpenWindow("BankDClass",1,0,"","",Bankr);
    end; 
  end;
  return;
end;

global
procedure DblAccVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record AccVc Accr;

  if (nonblank(dblstr)) then begin
    Accr.AccNumber = FirstInRange(dblstr,20);
    if (ReadFirstMain(Accr,1,true)) then begin  
      wn = OpenWindow("AccDClass",1,0,"","",Accr);
    end; 
  end;
  return;
end;

global
procedure DblRsrtEventVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RsrtEventVc RsrtEventr;

  if (nonblank(l)) then begin
    RsrtEventr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(RsrtEventr,1,true)) then begin  
      wn = OpenWindow("RsrtEventDClass",1,0,"","",RsrtEventr);
      goto LDblRsrtEventVc;
    end; 
  end;
  if (nonblank(dblstr)) then begin
    RsrtEventr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(RsrtEventr,1,true)) then begin  
      wn = OpenWindow("RsrtEventDClass",1,0,"","",RsrtEventr);
    end; 
  end;
LDblRsrtEventVc:;  
  return;
end;

global
procedure DblPackRsrtEventVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn,nwn;
  record RsrtEventVc RsrtEventr;
  string 255 tstr,package;
  Integer pos;
  LongInt seqnr;

  ExtractObjWithSeparator(",",l,false,pos,tstr);
  RsrtEventr.SerNr = StringToLongInt(tstr);
  ExtractObjWithSeparator(",",l,false,pos,package);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  seqnr = FirstInRange(tstr,10);
  if (ReadFirstMain(RsrtEventr,1,true)) then begin  
    nwn = OpenWindow("RsrtEventDClass",1,0,"","",RsrtEventr);
    if (nwn!=0) then begin
      PutWindowString(nwn,"event_package",package);
      PutWindowString(nwn,"event_sequencenr",seqnr);
    end;
  end; 
  return;
end;

global
procedure DblNewRsrtEventVc(string dblstr,string l,Integer currepwn)
begin
  record RsrtEventVc REventr;
  Integer pos;
  string 255 filename,tstr,rescode,package;
  LongInt nr,seqnr;
  Time st,et;
  Date td;
  Integer nwn,stat;
  record RcVc RepSpec;
  
  ExtractObjWithSeparator(",",l,false,pos,rescode);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  td = StringToDate(tstr);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  st = StringToTime(tstr);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  et = StringToTime(tstr);
  ExtractObjWithSeparator(",",l,false,pos,package);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  seqnr = FirstInRange(tstr,10);
  ExtractObjWithSeparator(",",l,false,pos,filename);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  nr = StringToLongInt(tstr);
  stat = DblNewRsrtEventVcRemote(dblstr,rescode,td,st,et,package,seqnr,filename,nr,REventr); 
  switch (stat) begin
    case 1:
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
  end;
  nwn = OpenWindow("RsrtEventDClass",1,0,"","",REventr);
  if (nwn>0) then begin
    PutWindowString(nwn,"event_package",package);
    PutWindowString(nwn,"event_sequencenr",seqnr);
  end;
  return;
end;

procedure AddToRsrtEvent_JobVc(LongInt renr,LongInt jobnr,string package)
begin
  record JobVc Jobr;
  row JobVc Jobrw;
  record RsrtEventVc REventr;
  row RsrtEventVc REventrw;
  row RsrtEventVc REvent2rw;
  LongInt l,pers;
  Integer i,rwcnt;
  Integer nwn;
  record ResTypeVc RTr;
  LongInt maxpersons;
  Integer ri,rrwcnt;
  Integer alreadyin;
  Boolean addf,addedf;
  record RsrtEventTypeVc RETr;
  record INVc INr;
  
  Jobr.SerNr = jobnr;
  if (ReadFirstMain(Jobr,1,true)) then begin    
    REventr.SerNr = renr;
    if (ReadFirstMain(REventr,1,true)) then begin  
      rrwcnt = MatRowCnt(REventr);
      for (ri=0;ri<rrwcnt;ri=ri+1) begin
        MatRowGet(REventr,ri,REventrw);
        if (REventrw.JobNr==jobnr) then begin
          alreadyin  = alreadyin + 1;
        end;
      end;
      RETr.Code = REventr.EventType;
      ReadFirstMain(RETr,1,true);
      INr.Code = RETr.ArtCode;
      ReadFirstMain(INr,1,true);

      nwn = OpenWindow("RsrtEventDClass",1,0,"","",REventr);
      rwcnt = MatRowCnt(Jobr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Jobr,i,Jobrw);
        ClearRow(REventr,REventrw,1);
        REventrw.JobNr = Jobr.SerNr;
        REventrw.Invoicing = kResortEventOnReservation;
        REventrw.CustCode = Jobr.CUCode;
        REventrw.CustName = Jobr.CUName;
        REventrw.GuestCode = Jobrw.GuestCode;
        REventrw.GuestName = Jobrw.CUName;
        REventrw.Price = INr.UPrice1;
        addf = true;
        rrwcnt = MatRowCnt(REventr);
        for (ri=0;ri<rrwcnt;ri=ri+1) begin
          MatRowGet(REventr,ri,REvent2rw);
          if (REvent2rw.JobNr==jobnr) then begin
            if (REvent2rw.GuestCode==Jobrw.GuestCode) then begin
              addf = false;
            end;
          end;
        end;
        if (addf) then begin
          MatRowPut(REventr,MatRowCnt(REventr),REventrw);      
          addedf = true;
        end;
      end;
      pers = Jobr.Persons;
      if (IsEnterprise) then begin
        if (Jobr.Children>0) then begin
          pers = pers + Jobr.Children;
        end;
      end;
      pers = pers - alreadyin;
      if (rwcnt<pers) then begin
        for (l=rwcnt;l<pers;l=l+1) begin
          ClearRow(REventr,REventrw,1);
          REventrw.JobNr = Jobr.SerNr;
          REventrw.Invoicing = kResortEventOnReservation;
          REventrw.CustCode = Jobr.CUCode;
          REventrw.CustName = Jobr.CUName;
          REventrw.Price = INr.UPrice1;
          addf = true;
/*          
          rrwcnt = MatRowCnt(REventr);
          for (ri=0;ri<rrwcnt;ri=ri+1) begin
            MatRowGet(REventr,ri,REventrw);
            if (REventrw.JobNr==jobnr) then begin
              addf = false;
            end;
          end;
*/          
          if (addf) then begin
            MatRowPut(REventr,MatRowCnt(REventr),REventrw);      
            addedf = true;
          end;
        end;
      end;
      if (addedf) then begin
        RsrtEventSumup(REventr);
        PutWindowRecord(nwn,REventr);
      end;
    end;
  end;
  return;
end;

global
procedure DblAddRsrtEventVc(string dblstr,string l,Integer currepwn)
begin
  Integer pos;
  string 255 filename,tstr,package;
  LongInt renr,jobnr,seqnr;

  ExtractObjWithSeparator(",",l,false,pos,tstr);
  renr = StringToLongInt(tstr);
  ExtractObjWithSeparator(",",l,false,pos,filename);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  jobnr = StringToLongInt(tstr);
  ExtractObjWithSeparator(",",l,false,pos,package);
  ExtractObjWithSeparator(",",l,false,pos,tstr);
  seqnr = FirstInRange(tstr,10);
  switch (filename) begin
    case "JobVc":
      AddToRsrtEvent_JobVc(renr,jobnr,package);
  end;
  return;
end;

global
procedure DblRsrtEventAvPack(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  RepSpec.flags[0] = 1;
//  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblREventPackDetail(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
 GetWindowRecord(currepwn,RepSpec);
 RepSpec.flags[0] = 2;
 RepSpec.AccStr = dblstr;
//  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblPasteCUToJob(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record JobVc Jobr;
  row JobVc Jobrw;
  
  GetWindowRecord(currepwn,RepSpec);
  if (RepSpec.UsedOnly>0) then begin
    if (nonblank(l)) then begin  
      switch (GetWindowFIleName(RepSpec.UsedOnly)) begin
        case "JobVc":
          DeselectWindow(RepSpec.UsedOnly,true);
          GetWindowRecord(RepSpec.UsedOnly,Jobr);
          if (RepSpec.AccSpec>=0) then begin
            MatRowGet(Jobr,RepSpec.AccSpec,Jobrw);
            Jobrw.GuestCode = l;
            MatRowPut(Jobr,RepSpec.AccSpec,Jobrw);
            JobVc_PasteGuestCode(Jobr,RepSpec.AccSpec);
            PutWindowRecord(RepSpec.UsedOnly,Jobr);
            CloseWindow(currepwn);
          end;
      end;
    end;
  end;
  return;
end;

global
procedure DblJobToRsrtEvent(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RsrtEventVc REr;
  row RsrtEventVc RErw;
  string 255 tstr;
  Integer pos;
  
  GetWindowRecord(currepwn,RepSpec);
  if (RepSpec.UsedOnly>0) then begin
    if (nonblank(l)) then begin  
      switch (GetWindowFIleName(RepSpec.UsedOnly)) begin
        case "RsrtEventVc":
          DeselectWindow(RepSpec.UsedOnly,true);
          GetWindowRecord(RepSpec.UsedOnly,REr);
          if (RepSpec.AccSpec>=0) then begin
            MatRowGet(REr,RepSpec.AccSpec,RErw);
            ExtractObjWithSeparator(",",l,false,pos,tstr);
            RErw.GuestCode = tstr;
            ExtractObjWithSeparator(",",l,false,pos,tstr);
            RErw.JobNr = StringToLongInt(tstr);
            MatRowPut(REr,RepSpec.AccSpec,RErw);
            RsrtEventVc_PasteJobToRsrtEvent(REr,RepSpec.AccSpec);
            PutWindowRecord(RepSpec.UsedOnly,REr);
            CloseWindow(currepwn);
          end;
      end;
    end;
  end;
  return;
end;

global
procedure DblREAvailAllJob(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record JobVc Jobr;

  GetWindowRecord(currepwn,RepSpec);
  switch (RepSpec.FirstAcc) begin
    case "JobVc":
      Jobr.SerNr = RepSpec.long1;
      if (ReadFirstMain(Jobr,1,true)) then begin
        RepSpec.sStartDate = Jobr.TransDate;
        RepSpec.sStartTime = Jobr.StartTime;
        RepSpec.sEndDate = Jobr.EndDate;
        RepSpec.sEndTime = Jobr.EndTime;
        RepSpec.LastAcc = Jobr.Type;
        RepSpec.long1 = Jobr.SerNr;
        RepSpec.FirstAcc = "JobVc";
        RepSpec.Media = mtScreen;    
        RepSpec.flags[0] = 3;
        RunReport(RepSpec,0);
      end;
  end;
  return;
end;


global
procedure DblFDSeqNrDetails(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc curRepSpec;
  
  GetWindowRecord(currepwn,curRepSpec);
  RepSpec.repname = "FDSeqNrDetailsRn";
  RepSpec.AccStr = FirstInRange(l,10);
  RepSpec.long1 = LastInRange(l,10);  
  RepSpec.f1 = curRepSpec.f1;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblRoyaltyRepVc(string dblstr,string l,Integer currepwn)
begin
  record RoyaltyRepVc RoyaltyRepr;
//  Integer oldcomp;
  Integer nwn;

//  oldcomp = CurrentCompany;
//  if (SetCompany(StringToLongInt(l),false)) then begin
    RoyaltyRepr.SerNr = StringToLongInt(l);
    if (RoyaltyRepr.SerNr<=0) then begin
      RoyaltyRepr.SerNr = StringToLongInt(dblstr);
    end;
    if (ReadFirstMain(RoyaltyRepr,1,true)) then begin
      nwn = OpenWindow("RoyaltyRepDClass",1,0,"","",RoyaltyRepr);
    end;
//    ResetCompany(oldcomp);
//  end;

  return;
end;

global
procedure DblRoyaltyMaintVc(string dblstr,string l,Integer currepwn)
begin
  record RoyaltyMaintVc RoyaltyMaintr;
//  Integer oldcomp;
  Integer nwn;

//  oldcomp = CurrentCompany;
//  if (SetCompany(StringToLongInt(l),false)) then begin
    RoyaltyMaintr.SerNr = StringToLongInt(l);
    if (RoyaltyMaintr.SerNr<=0) then begin
      RoyaltyMaintr.SerNr = StringToLongInt(dblstr);
    end;
    if (ReadFirstMain(RoyaltyMaintr,1,true)) then begin
      nwn = OpenWindow("RoyaltyMaintDClass",1,0,"","",RoyaltyMaintr);
    end;
//    ResetCompany(oldcomp);
//  end;

  return;
end;

global
procedure DblHRMCOVc(string dblstr,string l,Integer currepwn)
begin
  record HRMCOVc HRMCOr;
  Integer nwn;

  HRMCOr.SerNr = StringToLongInt(dblstr);
  if (ReadFirstMain(HRMCOr,1,true)) then begin
    nwn = OpenWindow("HRMCODClass",1,0,"","",HRMCOr);
  end;
  return;
end;

global
procedure DblHRMCOChangeVc(string dblstr,string l,Integer currepwn)
begin
  record HRMCOChangeVc HRMCOCr;
  Integer nwn;

  HRMCOCr.SerNr = StringToLongInt(dblstr);
  if (ReadFirstMain(HRMCOCr,1,true)) then begin
    nwn = OpenWindow("HRMCOChangeDClass",1,0,"","",HRMCOCr);
  end;
  return;
end;

global
procedure DblPOSBalanceVc(string dblstr,string l,Integer currepwn)
begin
  record POSBalanceVC POSBalancer;

  if (nonblank(dblstr)) then begin
    POSBalancer.SerNr = StringToInt(dblstr);
    if (ReadFirstMain(POSBalancer,1,true)) then begin  
      OpenWindow("POSBalanceDClass",1,0,"","",POSBalancer);
    end; 
  end;
  return;
end;

global
procedure DblLCardVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record LoyaltyCardVc LoyaltyCardr;

  if (nonblank(dblstr)) then begin
    LoyaltyCardr.SerNr = FirstInRange(dblstr,20);
    if (ReadFirstMain(LoyaltyCardr,1,true)) then begin  
      wn = OpenWindow("LoyaltyCardDClass",1,0,"","",LoyaltyCardr);
    end; 
  end;
  return;
end;

global
procedure DblCOCUServStatCust(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  RepSpec.critname = "";
  RepSpec.f3 = l;
  RepSpec.f4 = "";
  RepSpec.f5 = "";
  RepSpec.f6 = "";
  RepSpec.f7 = "";
  RepSpec.f8 = "";
  RepSpec.f9 = "";
  RepSpec.f10 = "";
  RepSpec.f11 = "";
  RepSpec.f12 = "";
  RepSpec.ArtMode = 1;
  RunReport(RepSpec,0);
  
  return;
end;

global
procedure DblJobPriceVcID(string dblstr,string l,Integer currepwn)
begin
  record JobPriceVc JobPricer;

  if (nonblank(dblstr)) then begin
    JobPricer.RecType = 0;
    JobPricer.SerNr = StringToInt(l);
    JobPricer.RowNr = 0;
    if (ReadFirstMain(JobPricer,3,true)) then begin  
      OpenWindow("JobPriceDClass",1,0,"","",JobPricer);
    end; 
  end;
  return;
end;

global
procedure DblPriceRulesVc(string dblstr,string l,Integer currepwn)
begin
  record PriceRulesVc PriceRulesr;

  if (nonblank(dblstr)) then begin
    PriceRulesr.Code = dblstr;
    if (ReadFirstMain(PriceRulesr,1,true)) then begin  
      OpenWindow("PriceRulesDClass",1,0,"","",PriceRulesr);
    end; 
  end;
  return;
end;

global
procedure DblVATRepApp5Rn(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(currepwn,RepSpec);
  ReportDefaults(RepSpec,"VATRepApp5RClass");    
  RepSpec.repname = "VATRepApp5Rn";
  RepSpec.critname = "VATRepApp5RClass";
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RunReport(RepSpec,0);
  return;
end;

procedure ActPrevNext(string dblstr,string l,Integer currepwn,Integer quant)
begin
  record RcVc RepSpec;
  record RcVc curRepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  switch (curRepSpec.Notation) begin
    case 1:
      RepSpec.sStartDate = AddMonth(RepSpec.sStartDate,quant);
      RepSpec.sEndDate = AddMonth(RepSpec.sEndDate,quant);
    case 2:
      RepSpec.sStartDate = AddDay(RepSpec.sStartDate,7*quant);
      RepSpec.sEndDate = AddDay(RepSpec.sEndDate,7*quant);
    case 3:
      RepSpec.sStartDate = AddDay(RepSpec.sStartDate,quant);
      RepSpec.sEndDate = AddDay(RepSpec.sEndDate,quant);
  end;
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblActNext(string dblstr,string l,Integer currepwn)
begin
  ActPrevNext(dblstr,l,currepwn,1);
  return;
end;

global
procedure DblActPrev(string dblstr,string l,Integer currepwn)
begin
  ActPrevNext(dblstr,l,currepwn,-1);
  return;
end;

global
procedure DblTodoRefresh(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc curRepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblTodoDayPlanner(string dblstr,string l,Integer currepwn)
begin
    ToolAction(currepwn,ToolCalDay,0,false);
end;

procedure ActChangePeriod(string dblstr,string l,Integer currepwn,Integer period)
begin
  record RcVc RepSpec;
  record RcVc curRepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  switch (period) begin
    case 1:
      RepSpec.sEndDate = AddMonth(RepSpec.sStartDate,1);
    case 2:
      RepSpec.sEndDate = AddDay(RepSpec.sStartDate,6);
    case 3:
      RepSpec.sEndDate = RepSpec.sStartDate;
  end;
  RepSpec.Notation = period;
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblActMonth(string dblstr,string l,Integer currepwn)
begin
  ActChangePeriod(dblstr,l,currepwn,1);
  return;
end;

global
procedure DblActWeek(string dblstr,string l,Integer currepwn)
begin
  ActChangePeriod(dblstr,l,currepwn,2);
  return;
end;

global
procedure DblActDay(string dblstr,string l,Integer currepwn)
begin
  ActChangePeriod(dblstr,l,currepwn,3);
  return;
end;

global
procedure DblSharesTranVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SharesTranVc STr;
  string 255 tstr;

  tstr = dblstr;
  if (blank(tstr)) then begin tstr = l; end;
  if (nonblank(tstr)) then begin
    STr.SerNr = FirstInRange(tstr,20);
    if (ReadFirstMain(STr,1,true)) then begin  
      wn = OpenWindow("SharesTranDClass",1,0,"","",STr);
    end; 
  end;
  return;
end;

global
procedure DblNoSalesVClass(string dblstr,string l,Integer currepwn)
begin
  Integer wn,nwn;
  record RcVc RepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.repname = "NoSalesMn";
  nwn = OpenWindow("NoSalesVClass",0,0,"","",RepSpec);
  return;
end;

global
procedure DblASProductVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn,pos;
  record ASProductStatusVc ASPSr;

  if (nonblank(l)) then begin
    ASPSr.SerNr = l;
    if (ReadFirstMain(ASPSr,1,true)) then begin  
      wn = OpenWindow("ASProductStatusDClass",1,0,"","",ASPSr);
    end; 
  end;
  return;
end;

global
procedure DblDAVc(string dblstr,string l,Integer currepwn)
begin
  record DAVc DAr;
  Integer wn;
  
  DAr.SerNr = FirstInRange(l,10);
  if (DAr.SerNr<=0) then begin
    DAr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(DAr,1,true)) then begin
    wn = OpenWindow("DADClass",1,0,"","",DAr);
  end;
  return;
end;

global
procedure DblTXCUServiceVc(string dblstr,string l,Integer currepwn)
begin
  record TXCUServiceVc TXCUSr;

  TXCUSr.SerNr = StringToLongInt(l);
  if (TXCUSr.SerNr>0) then begin
    TXCUSr.SerNr = StringToLongInt(dblstr);
  end;
  TXCUSr.SerNr = dblstr;
  if (ReadFirstMain(TXCUSr,1,true)) then begin  
    OpenWindow("TXCUServiceDClass",1,0,"","",TXCUSr);
  end; 
  return;
end;

global
procedure DblOpenProjMnWn(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc MnRepSpec,RnRepSpec;

  GetWindowRecord(currepwn,RnRepSpec);
  ReportDefaults(MnRepSpec,"ProInvVClass");    
  MnRepSpec.repname = "ProInvMn";
  MnRepSpec.critname = "ProInvVClass";
  MnRepSpec.f1 = RnRepSpec.f3;                          //Customer
  MnRepSpec.f2 = RnRepSpec.f1;                          //Project
  MnRepSpec.LastAcc = RnRepSpec.f2;                     //Project Leader
  MnRepSpec.d1 = RnRepSpec.d1;                          //Registrations until
  MnRepSpec.FirstAcc = RnRepSpec.FirstAcc;              //Class
  
  wn = OpenWindow("ProInvVClass",1,0,"","",MnRepSpec);
  return;
end;

global
procedure DblPlanMessageVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PlanMessageQueueVc PlanMessageQueuer;

  if (nonblank(l)) then begin
    PlanMessageQueuer.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(PlanMessageQueuer,1,true)) then begin  
      wn = OpenWindow("PlanMessageQueueDClass",1,0,"","",PlanMessageQueuer);
    end;
  end;
  return;
end;

global
procedure DblHTSIVVc(string dblstr,string l,Integer currepwn)
begin
  record HTSIVVc HTSIVr;
  Integer wn;
  
  HTSIVr.SerNr = StringToLongInt(l);
  if (HTSIVr.SerNr<0) then begin
    HTSIVr.SerNr = StringToLongInt(dblstr);
  end;
  if (ReadFirstMain(HTSIVr,1,true)) then begin
    wn = OpenWindow("HTSIVDClass",1,0,"","",HTSIVr);
  end;
  return;
end;

global
procedure DblKeyCompKEY(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.repname = "KeyCompKEYRn";
  RepSpec.Media = mtScreen;
  RepSpec.critname = "";
  RepSpec.TransStr = dblstr;
  RepSpec.long1 = StringToLongInt(l);
  RepSpec.ArtMode = 0;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblASProductStatusVc(string dblstr,string l,Integer currepwn)
begin
  record ASProductStatusVc ASProductStatusr;
  Integer wn;
  
  ASProductStatusr.SerNr = StringToLongInt(l);
  if (ASProductStatusr.SerNr<0) then begin
    ASProductStatusr.SerNr = StringToLongInt(dblstr);
  end;
  if (ReadFirstMain(ASProductStatusr,1,true)) then begin
    wn = OpenWindow("ASProductStatusDClass",1,0,"","",ASProductStatusr);
  end;
  return;
end;

global
procedure DblCUMap(string dblstr,string l,Integer currepwn)
begin
  record CUVc CUr;

  CUr.Code = l;
  if (ReadFirstMain(CUr,1,true)) begin    
    MSNCUFindMapPosition(CUr);
  end;
  return;
end;

global
procedure DblMBARn(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc curRepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    RecordCopy(RepSpec,curRepSpec);
    RepSpec.repname = "MBARn";
    RepSpec.AccStr = "";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.ArtMode = 0;
    RepSpec.TransStr = dblstr;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblWebAvApps2Vc(string dblstr,string l,Integer currepwn)
begin
  record WebAvailableApp2Vc AWr;
  Integer wn;

  AWr.SerNr = StringToLongInt(l);
  if (ReadFirstMain(AWr,1,true)) begin 
    wn = OpenWindow("WebAvailableAppDClass",1,0,"","",AWr);
  end;
  return;
end;

global
procedure DblEmailValidationVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record EmailValidationVc EVr;
  string 255 tstr,tmp;
  Longint pos;
  
  tmp = l;
  GetNextSubString(l,pos,":",tstr);
  EVr.Email = tstr;
  GetNextSubString(l,pos,":",tstr);
  EVr.RegistrationNumber = StringToLongInt(tstr);
  GetNextSubString(l,pos,":",tstr);
  EVr.Status = StringToInt(tstr);
  
  if (ReadFirstMain(EVr,3,true)) then begin  
    wn = OpenWindow("EmailValidationDClass",0,0,"","",EVr);
  end; 
  return;
end;

global
procedure DblRegCount(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.repname = "RegCountCompRn";
  RepSpec.Media = mtScreen;
  RepSpec.critname = "";
  RepSpec.TransStr = dblstr;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblCloudMachineStatsVc(string dblstr,string l,Integer currepwn)
begin
  record CloudMachineStatsVc CMSr;
  Integer wn;

  CMSr.ServerCode = l;
  if (blank(CMSr.ServerCode)) then begin
    CMSr.ServerCode = dblstr;
  end;
  if (ReadFirstMain(CMSr,1,true)) begin 
    wn = OpenWindow("CloudMachineStatsDClass",1,0,"","",CMSr);
  end;
  return;
end;

global
procedure DblResendValidMailVc(string dblstr,string l,Integer currepwn)
begin

  if (nonblank(l)) then begin
    EmailValidationAtLoginOClassResendRemote(l);
  end;

  return;
end;

global
procedure DblEmailQueVc(string dblstr,string l,Integer currepwn)
begin
  record EmailQueVc EQr;
  Integer wn;

  if (nonblank(dblstr)) then begin
    EQr.SerNr = StringToLongint(dblstr);
    if (ReadFirstMain(EQr,1,true)) then begin
      wn = OpenWindow("EMailQueDClass",1,0,"","",EQr);
    end;
  end;

  return;
end;

global
procedure DblRemoteCloudServerVc(string dblstr,string l,Integer currepwn)
begin
  record RemoteCloudServerVc RCSr;
  Integer wn;

  if (nonblank(l)) then begin
    RCSr.UUID = StringToUUID(l);
    if (ReadFirstMain(RCSr,1,true)) then begin
      wn = OpenWindow("RemoteCloudServerDClass",1,0,"","",RCSr);
      goto LDblRemoteCloudServerVc;
    end;
  end;
  if (nonblank(dblstr)) then begin
    RCSr.UUID = StringToUUID(dblstr);
    if (ReadFirstMain(RCSr,1,true)) then begin
      wn = OpenWindow("RemoteCloudServerDClass",1,0,"","",RCSr);
      goto LDblRemoteCloudServerVc;
    end;
  end;
LDblRemoteCloudServerVc:;  
  return;
end;

global
procedure DblRCSVc(string dblstr,string l,Integer currepwn)
begin
  record RemoteCloudServerVc RCSr;
  Integer wn;

  DblRemoteCloudServerVc(dblstr,l,currepwn);

  return;
end;

global
procedure DblCloudNodeVc(string dblstr,string l,Integer currepwn)
begin
  record CloudNodeVc CNr;
  Integer wn;

  CNr.Code = dblstr;
  if (ReadFirstMain(CNr,1,true)) then begin
    wn = OpenWindow("CloudNodeDClass",1,0,"","",CNr);
  end;

  return;
end;


global
procedure DblConference(string dblstr,string l,Integer currepwn)
begin
  record ConfVc Cnfr;
  Integer nwn;
  record RcVc RepSpec;

  if (nonblank(l)) then begin
    Cnfr.SerNr = StringToLongint(l);
    if (ReadFirstMain(Cnfr,1,true)) then begin
      nwn = OpenWindow("MailLClass",0,0,Cnfr.SerNr,Cnfr.AddrName,RepSpec);
      goto LDblConference;
    end;
  end;
  Cnfr.AddrName = dblstr;
  if (ReadFirstKey("AddrName",Cnfr,1,true)) then begin
    nwn = OpenWindow("MailLClass",0,0,Cnfr.SerNr,Cnfr.AddrName,RepSpec);
    goto LDblConference;
  end;
LDblConference:;  
  return;
end;

global
procedure DblConferenceW(string dblstr,string l,Integer currepwn)
begin
  record ConfVc Cnfr;
  Integer nwn;
  record RcVc RepSpec;

  if (nonblank(l)) then begin
    Cnfr.SerNr = StringToLongint(l);
    if (ReadFirstMain(Cnfr,1,true)) then begin
      nwn = OpenWindow("ConferenceWClass",0,0,Cnfr.SerNr,Cnfr.AddrName,RepSpec);
      goto LDblConference;
    end;
  end;
  Cnfr.AddrName = dblstr;
  if (ReadFirstKey("AddrName",Cnfr,1,true)) then begin
    nwn = OpenWindow("ConferenceWClass",0,0,Cnfr.SerNr,Cnfr.AddrName,RepSpec);
    goto LDblConference;
  end;
LDblConference:;  
  return;
end;

global
procedure DblArchive(string dblstr,string l,Integer currepwn)
begin
  record ConfVc Cnfr;
  record ConfVc Mailboxr;
  Integer nwn;
  record RcVc RepSpec;
  string 255 cstr,tstr;

  FindUserMailboxName(CurrentUser,cstr,tstr);
  Mailboxr.SerNr = StringToLongInt(cstr);
  ReadFirstMain(Mailboxr,1,true);
  if (nonblank(l)) then begin
    Cnfr.SerNr = StringToLongint(l);
    if (ReadFirstMain(Cnfr,1,true)) then begin
      cstr = BuildRecordIdStr(Cnfr,0);
      nwn = OpenWindow("ArchiveWClass",0,0,cstr,Mailboxr.AddrName,RepSpec);
      goto LDblConference;
    end;
  end;
  Cnfr.AddrName = dblstr;
  if (ReadFirstKey("AddrName",Cnfr,1,true)) then begin
    cstr = BuildRecordIdStr(Cnfr,0);
    nwn = OpenWindow("ArchiveWClass",0,0,cstr,Mailboxr.AddrName,RepSpec);
    SetWindowNameArg(nwn,tstr);
    goto LDblConference;
  end;
LDblConference:;  
  return;
end;

global
procedure DblAccessCheckRn(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record UserVc Userr;
  record GlobalUserVc GUserr;
  string 255 uname,compno,instr;
  LongInt pos;
  Integer oldcomp;

  if (nonblank(l)) then begin
    instr = l;
  end else begin
    instr = dblstr;
  end;

  oldcomp = CurrentCompany;

  pos = -1;
  GetNextSubstring(instr,pos,":",uname);
  GetNextSubstring(instr,pos,":",compno);

  if (nonblank(compno)) then begin
    if (SetCompany(StringToInt(compno),true)==false) then begin
      goto LDblAccessCheckRn;
    end;
  end;

  Userr.Code = uname;
  GUserr.Code = Userr.Code;

  if (nonblank(GUserr.Code)) then begin
    if (ReadFirstMain(GUserr,1,true)) then begin
      wn = OpenWindow("GlobalUserDClass",1,0,"","",GUserr);
    end;
  end;
  if (wn==0) then begin
    if (nonblank(Userr.Code)) then begin
      if (ReadFirstMain(Userr,1,true)) then begin
        wn = OpenWindow("USDClass",1,0,"","",Userr);
      end;
    end;
  end;

LDblAccessCheckRn:;
  ResetCompany(oldcomp);

  return;
end;
