external function Boolean ReadFirstItemInclClosed(string,var record INVc,Boolean,Boolean);
external function roundmode GetCostRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external function Integer ArtCodeFIFOPerSerialNr(string);
external function Integer ArtCodeCostPerLocation(string);
external function Integer FIFOPerSerialNr(record INVc,record CostAccBlock);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean SerialNrAvail(string,string,string,val);
external procedure RemoveCharactersFromString(var string,string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean TestLocation(string,string);

global
procedure FindIntFIFOPrice(string item,Integer SerNrf,string location,val qty,val adjustqty,var val totvalp,Boolean curncytday,Boolean print,Date todatp)
BEGIN
  record IntINrsVc IntINrsr;
  record INTransferVc INTransferr;
  Boolean found;
  val tprice;
  val rem;
  val t,org;
  row INTransferVc INTransferrw;
  record OffHireVc OHr;
  row OffHireVc OHrw;
  Integer i,rwcnt;
  val baseprice;
  val frrate,to1,to2,br1,br2;
  val rowqty;
  val useqty,q2,totuseqty;
  string 255 recstr,tstr;
  Boolean testf;
  record RoundBlock RoundRec;
  record CostAccBlock CostAccRec;
  record MainStockBlock MainStockRec;
  Date blankd;
  string 255 locs;
          
  BlockLoad(CostAccRec);
  BlockLoad(RoundRec);
  BlockLoad(MainStockRec);
  if (qty<=0) then begin
    totvalp = 0;
    goto LFindFIFOPrice;
  end;
  tprice = blankval;
  totvalp = blankval;
  rem = qty;
  IntINrsr.ItemCode = item;
  IntINrsr.TransDate = blankd;
  IntINrsr.FIFO = 1;
  found = true;
  while (LoopBackKey("FIFO",IntINrsr,2,found)) begin//and ((print==false) or (RepCancel==false))
    if (found) then begin
      if (IntINrsr.ItemCode!=item) then begin found = false; end;
    end;
    if (found) then begin
      if (IntINrsr.FIFO==0) then begin found = false; end;
    end;
    if (found) then begin
      testf = true;      
      if (nonblankdate(todatp)) then begin
        if (IntINrsr.TransDate>todatp) then begin testf = false; end;
      end;
      if (testf) then begin
      if (IntINrsr.FileName=="INTransferVc") then begin
        INTransferr.SerNr = IntINrsr.TransNr;
        if (ReadFirstMain(INTransferr,1,true)) then begin
          if ((ArtCodeCostPerLocation(IntINrsr.ItemCode)==0) or (blank(location)) or (location==INTransferr.Location) or 
              ((blank(INTransferr.Location)) and (location==MainStockRec.MainStock))) then begin
          rwcnt = MatRowCnt(INTransferr);
          for (i=rwcnt-1;i>=0;i=i-1) begin
            MatRowGet(INTransferr,i,INTransferrw);
/*
            if ((INTransferrw.stp==3) or (INTransferrw.ovst!=0)) then begin
              goto L12FindFIFOPrice;
            end;
*/
//            if ((INTransferrw.ArtCode==item) and
              if ((Left(INTransferrw.ArtCode,len(item))==item) and
                (INTransferrw.Quant>0)) then begin
              totuseqty = totuseqty + INTransferrw.Quant;            
              if (totuseqty<=adjustqty) then begin goto L12FindFIFOPrice; end;
              if ((SerNrf==1) and (ArtCodeFIFOPerSerialNr(IntINrsr.ItemCode)!=0)) then begin
                locs = location;
                if (blank(locs)) then begin
                  locs = INTransferr.Location;
                end;
                if (blank(locs)) then begin
                  locs = MainStockRec.MainStock;
                end;
                if (SerialNrAvail(INTransferrw.ArtCode,INTransferrw.SerialNr,locs,1)==false) then begin goto L12FindFIFOPrice; end;
              end;    
              if (curncytday) then begin
                GetFullCurncyRate(INTransferr.CurncyCode,CurrentDate,frrate,to1,to2,br1,br2);
                t = DivRateToBase1(INTransferr.CurncyCode,INTransferrw.FIFO,INTransferr.FrRate,INTransferr.ToRateB1,INTransferr.ToRateB2,INTransferr.BaseRate1,INTransferr.BaseRate2,DefaultCurRoundOff);
                baseprice = MulRateToBase1(INTransferr.CurncyCode,t,frrate,to1,to2,br1,br2,DefaultCurRoundOff);
              end else begin
                baseprice = INTransferrw.FIFO;
              end;
              org = rem;
              rem = rem - INTransferrw.Quant;
              if (rem<=0) then begin
                rem = 0;
                t = org*baseprice;
                t = Round(t,GetCostRoundMode(RoundRec));
                tprice = tprice + t;
                useqty = org;
                found = false;
              end else begin
                t = INTransferrw.Quant*baseprice;
                t = Round(t,GetCostRoundMode(RoundRec));
                tprice = tprice + t;
                useqty = INTransferrw.Quant;
              end;
              if (print) then begin
                if (useqty!=0) then begin
                  recstr = USetStr(1443);
                  recstr = recstr & ":";
                  recstr = recstr & INTransferr.SerNr;                
                  StartFormat(15);
                  OutString(50,0,recstr,false);
                  OutDate(160,0,INTransferr.TransDate,false);
                  OutVal(3,0,useqty,M4Qty,true);
                  OutVal(4,0,baseprice,M45Val,true);
                  OutVal(1,0,t,M4Val,true);
                  EndFormat;
                end;  
              end;
L12FindFIFOPrice:;
            end;
          end;
          end;
        end;
      end;
      if (IntINrsr.FileName=="OffHireVc") then begin
        OHr.SerNr = IntINrsr.TransNr;
        if (ReadFirstMain(OHr,1,true)) then begin
          if ((ArtCodeCostPerLocation(IntINrsr.ItemCode)==0) or (blank(location)) or (location==OHr.Location) or 
              ((blank(OHr.Location)) and (location==MainStockRec.MainStock))) then begin
          rwcnt = MatRowCnt(OHr);
          for (i=rwcnt-1;i>=0;i=i-1) begin
            MatRowGet(OHr,i,OHrw);
/*
            if ((OHrw.stp==3) or (OHrw.ovst!=0)) then begin
              goto L12FindFIFOPrice;
            end;
*/
            if ((OHrw.ArtCode==item) and
                (OHrw.Quant>0)) then begin
              totuseqty = totuseqty + OHrw.Quant;            
              if (totuseqty<=adjustqty) then begin goto L13FindFIFOPrice; end;
              if ((SerNrf==1) and (ArtCodeFIFOPerSerialNr(IntINrsr.ItemCode)!=0)) then begin
                locs = location;
                if (blank(locs)) then begin
                  locs = OHr.Location;
                end;
                if (blank(locs)) then begin
                  locs = MainStockRec.MainStock;
                end;
                if (SerialNrAvail(OHrw.ArtCode,OHrw.SerialNr,locs,1)==false) then begin goto L13FindFIFOPrice; end;
              end;    
              if (curncytday) then begin
/*              
                GetFullCurncyRate(OHr.CurncyCode,CurrentDate,frrate,to1,to2,br1,br2);
                t = DivRateToBase1(OHr.CurncyCode,OHrw.Cost,OHr.FrRate,OHr.ToRateB1,OHr.ToRateB2,OHr.BaseRate1,OHr.BaseRate2,DefaultCurRoundOff);
                baseprice = MulRateToBase1(OHr.CurncyCode,t,frrate,to1,to2,br1,br2,DefaultCurRoundOff);
*/
                t = OHrw.Cost;    
                baseprice = t;            
              end else begin
                baseprice = OHrw.Cost;
              end;
              org = rem;
              rem = rem - OHrw.Quant;
              if (rem<=0) then begin
                rem = 0;
                t = org*baseprice;
                t = Round(t,GetCostRoundMode(RoundRec));
                tprice = tprice + t;
                useqty = org;
                found = false;
              end else begin
                t = OHrw.Quant*baseprice;
                t = Round(t,GetCostRoundMode(RoundRec));
                tprice = tprice + t;
                useqty = OHrw.Quant;
              end;
              if (print) then begin
                if (useqty!=0) then begin
                  recstr = USetStr(1443);
                  recstr = recstr & ":";
                  recstr = recstr & OHr.SerNr;                
                  StartFormat(15);
                  OutString(50,0,recstr,false);
                  OutDate(160,0,OHr.TransDate,false);
                  OutVal(3,0,useqty,M4Qty,true);
                  OutVal(4,0,baseprice,M45Val,true);
                  OutVal(1,0,t,M4Val,true);
                  EndFormat;
                end;  
              end;
L13FindFIFOPrice:;
            end;
          end;
          end;
        end;
      end;
      end;  
    end;
  end;
L90FindFIFOPrice:;
  org = qty;
  totvalp = tprice;
  if (rem!=0) then begin
    org = org - rem; 
    t = tprice/org;
    t = t*rem;
    t = Round(t,GetCostRoundMode(RoundRec));
    totvalp = totvalp + t;
  end;
LFindFIFOPrice:;
  RETURN;
END;

procedure BackDatIntStockCalc(Boolean varf,string item,string location,var val instockp,Date datp)
BEGIN
  Boolean found,testf;
  record IntINrsVc IntINrsr;
  Integer i;
  string 20 litem;
  
  litem = item;
  if (varf) then begin
    for (i=len(litem);i<=20;i=i+1) begin
      litem = litem & "z";
    end;
  end;
  IntINrsr.ItemCode = litem;
  found = true;
  while (LoopBackKey("MainKey",IntINrsr,1,found)) begin
    if (found) then begin
      if (Left(IntINrsr.ItemCode,len(item))!=item) then begin found = false; end;
    end;  
    if (found) then begin
      if (IntINrsr.TransDate<=datp) then begin found = false; end;
    end;  
    if (found) then begin
      testf = true;      
      if (nonblank(location)) then begin
        if (TestLocation(location,IntINrsr.Location)==false) then begin testf = false; end;
      end;  
      if (testf) then begin
        if (IntINrsr.StockAffectf!=0) then begin
          instockp = instockp - IntINrsr.Qty;
        end;  
      end;
    end;
  end;
  RETURN;
END;

procedure BackDatIntStock(string item,string location,var val instockp,Date datp)
BEGIN
  Boolean varf;
  string 60 sz,msk,mskrep;  
  string 200 varsubset;
  
  varf = FindItemVAR(item,sz,msk,mskrep,varsubset);
  BackDatIntStockCalc(varf,item,location,instockp,datp);
  RETURN;
END;

global
procedure FindIntStockValue2(string item,string location,var record IntISVc IntISp,Integer curncytday,Date todatp,Integer printvals,Boolean manyloc,var val tot,Integer wav,Boolean printdetails)
BEGIN
  record IntISVc IntISr;
  record CostAccBlock CostAccRec;
  record WeigAvVc war;
  Boolean backf,d;
  val t,o;
  val instock;
  Integer keys;
  record INVc INr;
  string 255 variety;
  val adjqty;
          
  BlockLoad(CostAccRec);
  tot = blankval;
  if (nonblankdate(todatp)) then begin backf = true; end;
  IntISp.Instock = 0;
  keys = 1;
  IntISr.Code = item;
  IntISr.Location = location;
  if (ReadFirstItemInclClosed(item,INr,false,false)) then begin
    if (item!=INr.Code) then begin
      variety = right(item,len(item)-len(INr.Code));
      IntISr.Variety = variety;
      IntISr.Code = INr.Code;
      keys = 2;
    end;
  end;
  d = LoopKey("CodeVariety",IntISr,keys,true);
  if (nonblank(variety)) then begin
    if (IntISr.Variety!=variety) then begin
      d = false;
    end;
  end;
  if (IntISr.Code!=item) then begin
    d = false;
  end;
  if (d==false) then begin
    IntISp.Instock = 0;
  end;
  while (d) begin
    if (d) then begin
      if (item!=IntISr.Code) then begin
        d = false;
      end;
      if (nonblank(variety)) then begin
        if (IntISr.Variety!=variety) then begin
          d = false;
        end;
      end;
    end;    
    if (d) then begin
       instock = 0;
       if (nonblank(IntISr.Location)) then begin
         if (backf) then begin 
           BackDatIntStock(item,IntISr.Location,instock,todatp);
           IntISp.Instock = IntISp.Instock + instock;             
         end;  
       end;  
       IntISp.Instock = IntISp.Instock + IntISr.Instock;
       if (printdetails==false) then begin
         if (wav==5) then begin//gRcp->flags[11]
           war.ArtCode = item;
           war.Location = IntISr.Location;
            if (ReadFirstMain(war,2,true)==false) then begin
             war.WeighedAvPrice = blankval;
             war.WeighedAvPriceB2 = blankval;
           end;
           o = war.WeighedAvPrice;
           t = o*(IntISr.Instock+instock);
         end else begin
           FindIntFIFOPrice(item,-1,IntISr.Location,IntISr.Instock,IntISp.Instock-IntISr.Instock,t,false,false,todatp);
           o = t/(IntISr.Instock+instock);
         end;
         tot = tot + t;
       end;
       if (printdetails) then begin
         if ((IntISr.Instock+instock)!=0) then begin
           StartFormat(15);
           OutString(120,0,IntISr.Location,false);
           OutVal(3,0,IntISr.Instock+instock,M4UVal,true);
           if (printvals!=0) then begin
             if (wav==5) then begin//gRcp->flags[11]
               war.ArtCode = item;
               war.Location = IntISr.Location;
                if (ReadFirstMain(war,2,true)==false) then begin
                 war.WeighedAvPrice = blankval;
                 war.WeighedAvPriceB2 = blankval;
               end;
               o = war.WeighedAvPrice;
               t = o*(IntISr.Instock+instock);
             end else begin
               FindIntFIFOPrice(item,-1,IntISr.Location,IntISr.Instock,IntISp.Instock-IntISr.Instock,t,false,false,todatp);
               o = t/(IntISr.Instock+instock);
             end;
             OutVal(4,0,o,M4Val,true);
             tot = tot + t;
             OutVal(1,0,t,M4Val,true);
           end;
           EndFormat;
         end;
       end;         
    end;      
    if (d) then begin
      d = LoopKey("CodeVariety",IntISr,keys,true);
    end;
  end;
  if (printdetails==false) then begin
    StartFormat(15);
      OutVal(3,0,IntISp.Instock,M4UVal,true);
      OutVal(4,0,tot/IntISp.Instock,M4Val,true);
      OutVal(1,0,tot,M4Val,true);
    EndFormat;
  end;
  RETURN;
END;

/* Copy the logic for Varieties from C to here, should be easy. When this is done, copy the logic to the above function as well */
/* Beware though, make sure you test it A LOT before shipping it. */
global
procedure FindIntStockValue(string item,string location,var record IntISVc IntISp)
BEGIN
  record IntISVc IntISr;
  record CostAccBlock CostAccRec;
  Boolean varf,testf;
  Boolean d;
  string 60 sz,msk,mskrep;
  string 200 varsubset,variety,keystr;
  record MainStockBlock MainStockRec;
  record INVc INr;
  Integer keys;

  BlockLoad(MainStockRec);
  varf = false;
  IntISp.Instock = 0;
  if (FindItemVAR(item,sz,msk,mskrep,varsubset)) then begin
    varf = true;
  end;
  if (varf) then begin
    ReadFirstItemInclClosed(item,INr,false,false);
  end;
  if (nonblank(location)) then begin
    if (varf) then begin
      variety = right(item,len(item)-len(INr.Code));
      d = true;
      IntISr.Code = INr.Code;
      keys = 2;
      keystr = "Code";
      if (item!=INr.Code) then begin
        IntISr.Variety = variety;
        keys = 3;
        keystr = "CodeVariety";
      end;
      IntISr.Location = location;
      IntISr.Variety = variety;
      while (LoopKey(keystr,IntISr,keys,d)) begin    
        if (IntISr.Code!=INr.Code) then begin d = false; end;
        if (nonblank(variety)) then begin
          if (IntISr.Variety!=variety) then begin d = false; end;
        end;
        testf = true;
        if (IntISr.Location!=location) then begin
          testf = false;
        end;
        if (d and testf) then begin
          IntISp.Instock = IntISp.Instock + IntISr.Instock;
        end;
      end;
    end else begin
      IntISp.Code = item;
      IntISp.Location = location;
      d = ReadFirstMain(IntISp,2,true);
      if (d==false) then begin
        IntISp.Instock = 0;
      end;
    end;
  end else begin
    IntISr.Code = item;
    IntISr.Location = "";
    if (varf) then begin
      variety = right(item,len(item)-len(INr.Code));
      keys = 2;
      if (item!=INr.Code) then begin
        IntISr.Variety = variety;
        keys = 3;
      end;
      if (nonblank(location)) then begin
        d = LoopKey("Location",IntISr,3,true);
      end else begin
        d = LoopKey("CodeVariety",IntISr,2,true);
      end;
      if (IntISr.Code!=INr.Code) then begin d = false; end;
      if (nonblank(variety)) then begin
        if (IntISr.Variety!=variety) then begin d = false; end;
      end;
    end else begin
      d = LoopMain(IntISr,1,true);
      if (IntISr.Code!=item) then begin
        d = false;
      end;
    end;
    if (d==false) then begin
      IntISp.Instock = 0;
    end;    
    while (d) begin
      if (d) then begin
        if (varf) then begin
          if (IntISr.Code!=INr.Code) then begin d = false; end;
          if (nonblank(variety)) then begin
            if (IntISr.Variety!=variety) then begin d = false; end;
          end;
          if (nonblank(location)) then begin
            if (location<>IntISr.Location) then begin
              d = false;
            end;
          end;
        end else begin
          if (item!=IntISr.Code) then begin
            d = false;
          end;
        end;
      end;    
      if (d) then begin      
         IntISp.Instock = IntISp.Instock + IntISr.Instock;
      end;
      if (d) then begin
        if (varf) then begin
          if (nonblank(location)) then begin
            d = LoopKey("Location",IntISr,3,true);
          end else begin
            d = LoopMain(IntISr,1,true);
          end;
        end else begin
          d = LoopMain(IntISr,1,true);
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure Find2IntStockValue(string item,string location,var val instockp,Date datp)
BEGIN
  record IntISVc IntISr;
  
  FindIntStockValue(item,location,IntISr);
  instockp = IntISr.Instock;
  if (blankdate(datp)) then begin goto LFind2IntStockValue; end;
  BackDatIntStock(item,location,instockp,datp);
LFind2IntStockValue:;
  RETURN;
END;

global
function val HALGetIntStockQty(string item,string location,Date datp)
BEGIN
  val res;
  
  Find2IntStockValue(item,location,res,datp);
  HALGetIntStockQty = res;
  RETURN;
END;

