external function string 60 AddObjectToObjectList(string,string);
external procedure SetupIVFromShopBask(var record IVVc,string,string,string,string,val,val,val,val,val);
external procedure BuildIVFromShopBask(var record IVVc,record JobVc,string,Boolean,Boolean,Boolean);
external function Boolean IsEnterprise();
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure ResAvVc_PasteResCode(var record ResAvVc,Integer);
external procedure AddObj(String, var string);
external procedure RemoveOldResUsageObjects(string,var string);
external procedure SetJobVcRecordDefaults(integer,var record JobVc);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean IsJobChargeAllowed(record JobVc);
external procedure FindUserMailboxName(string,var string,var string);
external function roundmode DefaultRoundMode();
external procedure ExtractObj(string,var Integer,var string);
external procedure RemoveOldResTypeObjects(string,var string);
external function Boolean CheckedAllowedStatus(string,string);
external function string 60 FindJobCustomerName(record JobVc);
external procedure CheckObsRecord(record GuestObserVc);
external function LongInt JobVcRecordCheck2(record JobVc,record JobVc,Integer);
external function LongInt JobVcRecordCheck3(record JobVc,record JobVc,LongInt,var Integer,var string,var Integer,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function val NumberOfStayDays(Date,Date,Time,Time,Integer);
external updating procedure StoreInShopBask2(Integer,LongInt,String,String,Val,Val,Integer,Val,String,String,LongInt,String,Boolean,string,string,longint,string,val,val,val,val,val);
external updating procedure StoreChargeInShopBask3(LongInt,String,var String,val,val,val,Integer,val,String,String,Date,Date,Boolean,string,string,val,val,val,val,val);
external updating procedure UpdateMiles(Record JobVc);
external updating procedure TelCallsJobLoop(LongInt,LongInt);
external Function LongInt GetChargeResNr(String,Date,Time,LongInt);
external Function Boolean IsSpecialAccount(String);
external function LongInt FillFullJobPriceArray(Date,LongInt,val,var array string,var array string,var array string,var array LongInt,var array LongInt,LongInt,String,String,Boolean);
external function LongInt JobVcRecordCheck(record JobVc,record JobVc,LongInt,LongInt);
external function string 20 FindJobCustomerCode(record JobVc);
external updating procedure StoreInShopBaskOne2(LongInt,String,String,Val,Val,Integer,Val,String,String,val,Date,LongInt,Integer,Integer,String,string,LongInt,string,string,val,val,val,val,val);
external procedure RemoveOldCustObjects(string,var string);
external function val ValueStayJob(record JobVc,string,var val,Integer,var val,Boolean);
external function val AddUsageItems(Date,Date,Time,Time,LongInt,String,String,String,String,var val,Integer,val,val,string,string,Integer,var val,string,val,val,val,val,val);
external procedure AddObj(String, var string);
external function LongInt DateDiff(Date,Date);
external procedure JobVcNumberOfDays(var record JobVc);
external function integer GetGuestsInJob(record JobVc);

global
procedure JobSumup(var record JobVc Jobr)
BEGIN
  val price,amount,vat;
  Integer InclVAT;
  integer NoOfGuests;
  record IVVc IVr;

  InclVAT = kBasePriceInclVAT;
  if ((nonblankdate(Jobr.TransDate) and nonblank(Jobr.Type) and nonblank(Jobr.ResUsage)) or (nonblankdate(Jobr.TransDate) and IsStandardProduct)) then begin
    Jobr.Sum4ExclDisc = ValueStayJob(Jobr,Jobr.Type,price,InclVAT,vat,true);
    amount = ValueStayJob(Jobr,Jobr.Type,price,InclVAT,vat,false);
    Jobr.PLPrice     = price;
    Jobr.Sum4        = amount;
    Jobr.VatSum      = vat;
    NoOfGuests = GetGuestsInJob(Jobr);
/*    
    amount = AddUsageItems(Jobr.TransDate,Jobr.EndDate,Jobr.StartTime,Jobr.EndTime,NoOfGuests,
                           Jobr.Type,Jobr.ResUsage,Jobr.PriceList,FindJobCustomerCode(Jobr),price,0,1,Jobr.AgreedPrice,Jobr.AgreedDiscount,"",InclVAT,vat,
                           Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
we should have setting maybe if agreed price includes items from Package or not                           
*/
    amount = AddUsageItems(Jobr.TransDate,Jobr.EndDate,Jobr.StartTime,Jobr.EndTime,NoOfGuests,
                           Jobr.Type,Jobr.ResUsage,Jobr.PriceList,FindJobCustomerCode(Jobr),price,0,1,blankval,Jobr.AgreedDiscount,"",InclVAT,vat,
                           Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);

    Jobr.TotalSum4   = Jobr.Sum4 + Round(amount,DefaultRoundMode);
    Jobr.TotalVatSum = Jobr.VatSum + vat;
    if (BuildProductCode=="StandardHotel") then begin
      SetupIVFromShopBask(IVr,Jobr.PriceList,Jobr.ResUsage,Jobr.CUCode,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
      BuildIVFromShopBask(IVr,Jobr,Jobr.CUCode,true,false,false);
      Jobr.TotalVatSum = Jobr.VatSum + IVr.Sum3;
      Jobr.TotalSum4  = Jobr.Sum4 + IVr.Sum4;      
      Jobr.Sum4  = Jobr.TotalSum4;
    end;
    JobVcNumberOfDays(Jobr);
    if (Jobr.Persons==0) then begin
      Jobr.Persons = -1;
    end;
    if (Jobr.Children==0) then begin
      Jobr.Children = -1;
    end;
    Jobr.Pax = 0;
    if (Jobr.Persons>=0) then begin
      Jobr.Pax = Jobr.Pax + Jobr.Persons;
    end;
    if (IsEnterprise) then begin
      if (Jobr.Children>=0) then begin
        Jobr.Pax = Jobr.Pax + Jobr.Children;
      end;
    end;
    if (Jobr.Pax==0) then begin
      Jobr.Pax = -1;
    end;
  end;
  RETURN;
END;

global
function Boolean PasteCUCodeToJob(var record JobVc Jobr,Integer rownr)
begin
  Boolean res;
  record JobVc Job2r;
  row JobVc Jobrw;
  record CUVc CUr;
  string 60 objs;
  record RebVc Rebr;
  record CCatVc CCatr;
  integer rwcnt;
  
  res = false;
  if (rownr<0) then begin
    CUr.Code = Jobr.CUCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      res = true;
      Jobr.PriceList = CUr.PLCode;
      if (blank(Jobr.PriceList)) then begin
        CCatr.Code = CUr.CustCat;
        ReadFirstMain(CCatr,1,true);
        Jobr.PriceList = CCatr.PLCode;
      end;
      Jobr.CUName = CUr.Name;
      if (nonblank(CUr.BookOrigin)) then begin
        Jobr.BookOrigin = CUr.BookOrigin;
      end;
      JobSumup(Jobr);
      if (blank(Jobr.LangCode)) then begin
        Jobr.LangCode = CUr.LangCode;     
      end;
      objs = Jobr.Objects;      
      AddObj(CUr.Objects,objs);
      Jobr.Objects = objs;
      Rebr.Code = CUr.RebCode;
      if (ReadFirstMain(Rebr,1,true)) then begin
        Jobr.AgreedDiscount = Rebr.vra0;
        if (nonblank(Jobr.AgreedDiscount)) then begin
          Jobr.AgreedDiscount = Jobr.AgreedDiscount & "%";
        end;
      end;
      if (Jobr.Mother<=0) then begin
        Jobr.CurncyCode = CUr.CurncyCode;
        GetFullCurncyRate(Jobr.CurncyCode,Jobr.TransDate,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
      end;
      if (BuildProductCode=="StandardHotel" or CUr.GuestType!=0) then begin
        Jobrw.GuestCode = CUr.Code;
        Jobrw.CUName = CUr.Name;
        MatRowPut(Jobr,0,Jobrw);
      end;
    end else begin
      if (nonblank(Jobr.CUCode)) then begin
        Jobr.CUName = "";
      end else begin
      end;
    end;
  end else begin
    MatRowGet(Jobr,rownr,Jobrw);
    CUr.Code = Jobrw.CUCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      res = true;
      Jobrw.PriceList = CUr.PLCode;
      if (blank(Jobrw.PriceList)) then begin
        CCatr.Code = CUr.CustCat;
        ReadFirstMain(CCatr,1,true);
        Jobrw.PriceList = CCatr.PLCode;
      end;
      MatRowPut(Jobr,rownr,Jobrw);
      objs = Jobr.Objects;
      AddObj(CUr.Objects,objs);
      Jobr.Objects = objs; 
      JobSumup(Jobr);
    end;
  end;
  PasteCUCodeToJob = res;
  return;
end;

global
function string 255 FindHotelClassForClassTerms(string classifications)
begin
  string 255 res;
  record HotelBlock Hotelb;
  string 255 class;
  Integer pos;
  record CClassVc CClassr;
  
  BlockLoad(Hotelb);
  if (nonblank(Hotelb.CClassDCType)) then begin
    pos = 0;
    ExtractObj(classifications,pos,class);
    while (nonblank(class)) begin
      CClassr.Code = class;
      ReadFirstMain(CClassr,1,true);
      if (CClassr.CType==Hotelb.CClassDCType or CClassr.CType==Hotelb.CClassDCTypeChild) then begin
        res = class;
        goto LFindHotelClassForClassTerms;
      end;
      ExtractObj(classifications,pos,class);
    end;
  end;
LFindHotelClassForClassTerms:;  
  FindHotelClassForClassTerms = res;
  return;
end;

global
procedure JobVc_PasteGuestCode(var record JobVc Jobr,Integer rownr)
begin
  record ResVc Resr;
  row JobVc Jobrw;
  record CUVc Guestr;
  record CCatVc CCatr;

  MatRowGet(Jobr,rownr,Jobrw);
  Guestr.Code = Jobrw.GuestCode;
  if (ReadFirstKey("GuestActCode",Guestr,1,true)) then begin
    Jobrw.CUName = Guestr.Name;
    if (Guestr.CUType!=0) then begin
      Jobrw.CUCode = Guestr.Code;
    end;
    if (blank(Jobr.LangCode)) then begin
      Jobr.LangCode = Guestr.LangCode;
      Jobr.Newspapers = Guestr.Newspaper;
    end;
    if (Guestr.Smoking!=0) then begin
      Resr.Code = Jobr.ResCode;
      if (ReadFirstMain(Resr,1,true)) then begin
        if (Guestr.Smoking!=Resr.Smoking) then begin // Should be checked when assigning rooms as well.
          MessageBox(0,USetStr(2156));
        end;
      end;
    end;
    Jobrw.PriceList = Guestr.PLCode;
    if (blank(Jobrw.PriceList)) then begin
      CCatr.Code = Guestr.CustCat;
      ReadFirstMain(CCatr,1,true);
      Jobrw.PriceList = CCatr.PLCode;
    end;
    Jobrw.CClass = FindHotelClassForClassTerms(Guestr.Classification);
  end else begin
    MessageBox(0,USetStr(2142));
    Jobrw.GuestCode = "";
  end;
  MatRowPut(Jobr,rownr,Jobrw);  
  return;
end;

global
function Boolean PasteSourceToJob(var record JobVc Jobr,string efstr)
begin
  row JobVc Jobrw;
  record CUVc CUr;
  val price,amount;
  Boolean res;
  String 60 objs;

  res = true;
  if ((efstr!=Jobr.Source) and (nonblank(efstr))) then begin
    objs = Jobr.Objects;
    RemoveOldCustObjects(efstr,objs);
    Jobr.Objects = objs;
  end;
  CUr.Code = Jobr.Source;
  if (ReadFirstMain(CUr,1,true)) then begin
    Jobr.SourceName = CUr.Name;
    if blank(Jobr.PriceList) then begin
      Jobr.PriceList = CUr.PLCode;
    end;
    if blank(Jobr.LangCode) then begin
      Jobr.LangCode = CUr.LangCode;
    end;
    Jobr.BookOrigin = CUr.BookOrigin;
    objs = Jobr.Objects;    
    AddObj(CUr.Objects,objs);
    Jobr.Objects = objs;    
    JobSumup(Jobr);
  end else begin
    if (nonblank(Jobr.Source)) then begin
      res = false;
    end;
    Jobr.SourceName = "";
  end;
  PasteSourceToJob = res;
  return;
end;

global
updating function Integer JobShopBask1VClassSaveRemote(record SoftFVc Softr,var string fieldname,var Integer rownr)
BEGIN
  Integer res;
  row SoftFVc Softrw;
  Integer i,rwcnt;

  fieldname = "";
  rownr = -1;
  rwcnt = MatRowCnt(Softr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Softr,i,Softrw);
    if (Softrw.Quant==0) then begin
      res = 1058;
      fieldname = "Quant";
      rownr = i;
      goto LJobShopBask1VClassSaveRemote;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Softr,i,Softrw);
    StoreInShopBaskOne2(Softr.SerNr,Softrw.ArtCode,Softrw.Spec,Softrw.Quant,Softrw.Price,Softr.InclVAT,Softrw.BasePrice,Softr.CustCode,Softr.Objects,Softrw.vRebate,CurrentDate,-1,0,0,"","",-1,"",
                       Softr.CurncyCode,Softr.FrRate,Softr.ToRateB1,Softr.ToRateB2,Softr.BaseRate1,Softr.BaseRate2);
  end;
LJobShopBask1VClassSaveRemote:;  
  JobShopBask1VClassSaveRemote = res;
  return;
end;

// Not used?
global
updating procedure AddShopbaskItemMn(Record RcVc RepSpec)
begin
  if (nonblank(RepSpec.f1)) then begin   
//    StoreInShopBaskOne2(RepSpec.long1,RepSpec.f1,RepSpec.f2,RepSpec.vals0,RepSpec.vals1,blankval,RepSpec.f3,RepSpec.f4,RepSpec.vals2,CurrentDate,-1,0,0,"","",-1,"","",blankval,blankval,blankval,blankval,blankval);
  end; 
  return;
end;

updating procedure LoadExtraItems(Record JobVc Jobr,string bookitem,Integer Freq)
begin
  Record ResUsageVc ResUsage;
  Row ResUsageVc ResUsagerw;
  record GuestObserVc GuestObserr;
  record OBTypeVc OBTyper;
  row JobVc Jobrw;
  LongInt i,rwcnt;
  string 40 CustCode;
  val qtyl;
  record HotelBlock Hotelb;

  BlockLoad(Hotelb);
  if (nonblank(Jobr.Source)) then begin
    CustCode =  Jobr.Source;
  end else begin
    CustCode =  FindJobCustomerCode(Jobr);
  end;
  ResUsage.Code = Jobr.ResUsage;
  if (ReadFirstMain(ResUsage,1,true)) then begin
    rwcnt = MatRowCnt(ResUsage);
    for (i=0;i<rwcnt;i=i+1) begin 
      MatRowGet(ResUsage,i,ResUsagerw);    
      if (ResUsagerw.AddPer==0) then begin
        qtyl = 1;
      end else begin
        qtyl = GetGuestsInJob(Jobr);
      end;      
      if (ResUsagerw.CodeType==Freq) then begin
//        StoreInShopBask2(1,Jobr.SerNr,ResUsagerw.ArtCode,"",qtyl,BlankVal,BlankVal,CustCode,Jobr.Objects,-1,"",true,Jobr.ResUsage,"",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
/*
        if (ResUsage.NoAdditionalToInv==0) then begin
          if (ResUsage.AddItemIncPrice==0) then begin            
            StoreInShopBask2(1,Jobr.SerNr,ResUsagerw.ArtCode,"",qtyl,BlankVal,CustCode,Jobr.Objects,-1,"",true);
          end else begin
            StoreInShopBask2(5,Jobr.SerNr,ResUsagerw.ArtCode,"",qtyl,BlankVal,CustCode,Jobr.Objects,-1,bookitem,true);
          end;
        end else begin
*/
          if (ResUsage.AddItemIncPrice==0) then begin
            StoreInShopBask2(1,Jobr.SerNr,ResUsagerw.ArtCode,"",qtyl,BlankVal,Jobr.InclVAT,BlankVal,CustCode,Jobr.Objects,-1,"",true,Jobr.ResUsage,"",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
//            StoreInShopBask2(4,Jobr.SerNr,ResUsagerw.ArtCode,"",qtyl,BlankVal,CustCode,Jobr.Objects,-1,"",true);
          end else begin
            StoreInShopBask2(1,Jobr.SerNr,ResUsagerw.ArtCode,"",qtyl,BlankVal,Jobr.InclVAT,BlankVal,CustCode,Jobr.Objects,-1,bookitem,true,Jobr.ResUsage,"",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
//            StoreInShopBask2(6,Jobr.SerNr,ResUsagerw.ArtCode,"",qtyl,BlankVal,CustCode,Jobr.Objects,-1,bookitem,true);
          end;
//        end;
        if ((nonblank(ResUsagerw.OBType)) or (nonblank(ResUsagerw.MessageToHK))) then begin
          RecordNew(GuestObserr);
          GuestObserr.OBType = ResUsagerw.OBType;
          GuestObserr.Person = CurrentUser;
          OBTyper.Code = GuestObserr.OBType;
          if (ReadFirstMain(OBTyper,1,true)) then begin
            GuestObserr.Comment = OBTyper.Comment;
            GuestObserr.Type = OBTyper.Type;
          end;
          if (nonblank(ResUsagerw.MessageToHK)) then begin
            GuestObserr.Comment = ResUsagerw.MessageToHK;
          end;
          CheckObsRecord(GuestObserr);
          GuestObserr.StartDate = Jobr.TransDate;
          GuestObserr.EndDate = Jobr.EndDate;
          if (MatRowCnt(Jobr)>0) then begin
            MatRowGet(Jobr,0,Jobrw);
            GuestObserr.Guest = Jobrw.GuestCode;
          end;
        end;
      end;
    end;
  end;
  return;
end;

updating procedure LoadRepItems(Record JobVc Jobr)
begin
  Record RepItemsVc RepItemsr;
  Row RepItemsVc RepItemsrw;
  LongInt i,rwcnt;
  string 40 CustCode;
  record HotelBlock Hotelb;

  BlockLoad(Hotelb);
  if (nonblank(Jobr.Source)) then begin
    CustCode =  Jobr.Source;
  end else begin
    CustCode =  FindJobCustomerCode(Jobr);
  end;
  RepItemsr.SerNr = Jobr.SerNr;
  if (ReadFirstMain(RepItemsr,1,true)) then begin
    rwcnt = MatRowCnt(RepItemsr);
    for (i=0;i<rwcnt;i=i+1) begin 
      MatRowGet(RepItemsr,i,RepItemsrw);
      StoreInShopBask2(2,Jobr.SerNr,RepItemsrw.Item,"",RepItemsrw.Qty,RepItemsrw.Price,Jobr.InclVAT,BlankVal,CustCode,Jobr.Objects,-1,"",true,"","",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
    end;
  end;
  return;
end;

global
updating function Boolean JobToShopBask(var record JobVc Jobr,record ResTypeVc ResTyper,record HotelBlock Hotelb,Record RcVc RepSpec)
begin
  Boolean res;
  val qty,price;
  string 60 Comment,CustCode,InvoiceItem,tax2code;
  LongInt DateDif,Resnro;
  Integer i,n,rwcnt;
  LongInt j,arwcnt;
  Date StartPoint,EndPoint;
  Time StartTime,EndTime;
  val v,tax2prc;
  LongInt nrofdays;
  Date dt,CheckDate;
  Time startofday;
  array string 40 ainvitems;
  array string 40 apricerules;
  array string 40 acuclass;
  array LongInt adummyqtya;
  array LongInt aqty;
  record JobPriceVc JPr;
  row JobPriceVc JPrw;
  Record INVc INr;
  Record CUVc CUr;
  String 100 Spec;
  Val baseprice,Discperc;
  val cost,factor,agreed;
  Boolean calcprice;
  String 10 salesacc,vatcode,tstr,taxtemplatecode;
  Boolean dummyf;
  Time blankt;
  Integer InvoiceBy;

  res = false;
  if (IsStandardProduct) then begin
    InvoiceBy = 1;
  end;
  if (nonblank(ResTyper.Code)) then begin
    InvoiceBy = ResTyper.InvoiceBy;
  end;
  startofday = Hotelb.CheckIn;
  if (nonblanktime(Hotelb.StartNewDay)) then begin
    startofday = Hotelb.StartNewDay;
  end;
  StartPoint = Jobr.LastTransferDate;
  if blankdate(Jobr.LastTransferDate) then begin StartPoint = Jobr.TransDate; end;
  EndPoint = RepSpec.sStartDate;
  if (EndPoint > Jobr.EndDate) then begin EndPoint = Jobr.EndDate; end;
  StartTime = Jobr.LastTransferTime;
  if blanktime(Jobr.LastTransferTime) then begin StartTime = Jobr.StartTime; end;
  EndTime = RepSpec.sStartTime;
  if (Jobr.LastTransferDate > Jobr.EndDate) then begin EndTime = Jobr.EndTime; end;
  if ((nonblank(Jobr.Source)) and (Hotelb.ChargeSource!=0)) then begin
    CustCode =  Jobr.Source;
  end else begin
    CustCode =  FindJobCustomerCode(Jobr);
  end;
  if (InvoiceBy==0) then begin
    EndTime = Jobr.EndTime;
  end;
  JPr.RecType = 0;
  JPr.SerNr = Jobr.SerNr;
  JPr.RowNr = 0;
  if (ReadFirstMain(JPr,3,true)) then begin
    Resnro = GetChargeResNr("",CurrentDate,CurrentTime,Jobr.SerNr);
    rwcnt = MatRowCnt(JPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(JPr,i,JPrw);
      if (DateInRange(JPrw.StayDay,StartPoint,EndPoint)) then begin
        dt = AddDay(JPrw.StayDay,1);
        if (JPrw.AgreedPrice!=0) then begin
          agreed = JPrw.AgreedPrice;
        end else begin
          agreed = Jobr.AgreedPrice;
        end;
        if (agreed!=0) then begin
          if (nonblank(Hotelb.DiscItem)) then begin
            Comment = USetStr(11141) & Jobr.SerNr & " " & USetStr(10153) & " " & Jobr.ResCode & ": " & JPrw.StayDay;
            if (JPrw.AgreedPrice!=0) then begin
              price = (JPrw.AgreedPrice - JPrw.Price);
            end else begin
              price = (Jobr.AgreedPrice - JPrw.Price);
            end;
            StoreInShopBask2(1,Resnro,Hotelb.DiscItem,Comment,JPrw.Qty,price,Jobr.InclVAT,JPrw.RackRatePrice,CustCode,Jobr.Objects,-1,"",true,Jobr.ResUsage,"",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
          end;
          Comment = USetStr(11141) & Jobr.SerNr & " " & USetStr(10153) & " " & Jobr.ResCode;
//          StoreChargeInShopBask2(Resnro,JPrw.ArtCode,Comment,JPrw.Qty,agreed,JPrw.RackRatePrice,CustCode,Jobr.Objects,JPrw.StayDay,dt,true,Jobr.ResUsage,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
//JPrw.Sum knows agreed sum as well
          StoreChargeInShopBask3(Resnro,JPrw.ArtCode,Comment,JPrw.Qty,JPrw.Price,JPrw.vRebate,Jobr.InclVAT,JPrw.RackRatePrice,CustCode,Jobr.Objects,JPrw.StayDay,dt,true,Jobr.ResUsage,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
        end else begin
          Comment = USetStr(11141) & Jobr.SerNr & " " & USetStr(10153) & " " & Jobr.ResCode;
          StoreChargeInShopBask3(Resnro,JPrw.ArtCode,Comment,JPrw.Qty,JPrw.Price,JPrw.vRebate,Jobr.InclVAT,JPrw.RackRatePrice,CustCode,Jobr.Objects,JPrw.StayDay,dt,true,Jobr.ResUsage,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
        end;
        if (i==0) then begin
          LoadExtraItems(Jobr,JPrw.ArtCode,0);
        end;
        if (i==rwcnt-1) then begin
          LoadExtraItems(Jobr,JPrw.ArtCode,2);
        end;
        if (CheckDate<>dt) then begin //This must only be executed for each day
          LoadExtraItems(Jobr,JPrw.ArtCode,1);
          LoadRepItems(Jobr);
          CheckDate = dt;
        end;
        res = true;
      end;
    end;
    if (res) then begin
      Jobr.LastTransferDate = dt;
      Jobr.LastTransferTime = EndTime;
      if RecordStore(Jobr,true) then begin end;
    end;
  end else begin
    qty = NumberOfStayDays(StartPoint,EndPoint,StartTime,EndTime,InvoiceBy);
    if (/*(calctype!=0) or*/ (InvoiceBy==0)) then begin
      Comment = ValToString(qty,M40Val,"","",0) & " " & USetStr(10133) & " " & ResTyper.Comment;
      nrofdays = 1;
    end else begin
      for (i=0;i<qty;i=i+1) begin
        LoadExtraItems(Jobr,"",1);
      end;
      Comment = USetStr(11141) & Jobr.SerNr & " " & USetStr(10153) & " " & Jobr.ResCode & ": " & Jobr.TransDate & " - " & EndPoint;
      nrofdays = qty;
      qty = 1;
    end;
    if (qty<0) then begin
      goto LJobToShopBask;
    end;

    arwcnt = FillFullJobPriceArray(StartPoint,nrofdays,qty,ainvitems,apricerules,acuclass,adummyqtya,aqty,GetGuestsInJob(Jobr),ResTyper.Code,Jobr.ResUsage,true);
    if (arwcnt>0) then begin      
      Resnro = GetChargeResNr("",CurrentDate,CurrentTime,Jobr.SerNr);
      for (j=0;j<arwcnt;j=j+1) begin
        if (/*(calctype==0) and*/ (InvoiceBy==1)) then begin
          EndPoint = AddDay(StartPoint,adummyqtya[j]);
          Comment = USetStr(11141) & Jobr.SerNr & " " & USetStr(10153) & " " & Jobr.ResCode & ": " & StartPoint & " - " & EndPoint;;
          StartPoint = AddDay(StartPoint,adummyqtya[j]);
        end;
        if (Jobr.AgreedPrice!=blankval) then begin
          if (nonblank(Hotelb.DiscItem)) then begin
            Comment = Comment & ": " & Jobr.TransDate & " - " & EndPoint;
            price = (Jobr.AgreedPrice - Jobr.PLPrice);  // I stop using the discount field AgreedPrice is enough
            StoreInShopBask2(1,Resnro,ainvitems[j],Comment,aqty[j],Jobr.PLPrice,Jobr.InclVAT,BlankVal,CustCode,Jobr.Objects,-1,"",true,Jobr.ResUsage,"",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
            StoreInShopBask2(1,Resnro,Hotelb.DiscItem,Comment,aqty[j],price,Jobr.InclVAT,BlankVal,CustCode,Jobr.Objects,-1,"",true,Jobr.ResUsage,"",-1,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
          end else begin
            price = Jobr.AgreedPrice;
            StoreChargeInShopBask3(Resnro,ainvitems[j],Comment,aqty[j],price,blankval,Jobr.InclVAT,BlankVal,CustCode,Jobr.Objects,StartPoint,EndPoint,true,Jobr.ResUsage,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
          end;
        end else begin
          price = BlankVal;
          if (Hotelb.StoreWithPrice!=0) then begin
            CUr.Code = CustCode;
            if (ReadFirstMain(CUr,1,true)) then begin end;
            INr.Code = ainvitems[j];
            if (ReadFirstMain(INr,1,true)) then begin
              if (GetItemPriceDiscount3(ainvitems[j],aqty[j],INr,CUr.CurncyCode,0,0,0,0,0,
                  CUr.LangCode,CUr.CustCat,Jobr.PriceList,CUr.RebCode,
                  price,Spec,Discperc,vatcode,cost,salesacc,
                  CUr.ExportFlag,calcprice,CurrentDate,blankt,"",true,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then begin
                price = price * ((100.00 - Discperc)/100.00);
              end;
            end;
          end;
          StoreChargeInShopBask3(Resnro,ainvitems[j],Comment,aqty[j],price,Discperc,Jobr.InclVAT,BlankVal,CustCode,Jobr.Objects,StartPoint,EndPoint,true,Jobr.ResUsage,Jobr.CurncyCode,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
        end;
      end;
      LoadRepItems(Jobr);
      Jobr.LastTransferDate = EndPoint;
      Jobr.LastTransferTime = EndTime;
      res = true;
      if RecordStore(Jobr,true) then begin end;
    end;  
  end;  
LJobToShopBask:;  
  JobToShopBask = res;
  return;
end;

global
updating function Integer JobToShopBaskRemote(var record JobVc Jobp,Record RcVc RepSpec)
begin
  record HotelBlock Hotelb;
  Integer res;
  Boolean DiscAmount;
  record ResTypeVc ResTyper;

  Blockload(Hotelb); 
  if (IsJobChargeAllowed(Jobp)==false) then begin
    res = 22200;
    goto LJobToShopBaskRemote;
  end;
  DiscAmount = false;  
  if (nonblank(Jobp.AgreedDiscount)) then begin
    DiscAmount = true;
  end;
  if (DiscAmount and blank(Hotelb.DiscItem)) then begin
    res = 22201;
    goto LJobToShopBaskRemote;
  end;
  if (nonblank(Jobp.Type)) then begin
    ResTyper.Code = Jobp.Type;
    if (ReadFirstMain(ResTyper,1,true)==false) then begin
      res = 22202;
      goto LJobToShopBaskRemote;
    end;
  end;
  if (JobToShopBask(Jobp,ResTyper,Hotelb,RepSpec)==false) then begin
    res = 1936;
  end;
LJobToShopBaskRemote:;
  JobToShopBaskRemote = res;
  return;
end;

updating procedure StateChangeDaughters(LongInt Mother,string ToStatus)
begin
  Record JobVc Jobr;
  Boolean TsHr;
  record HotelBlock Hotelb;
  string 60 ckey;
  
  Blockload(Hotelb);
  Jobr.Mother = Mother;
  ckey = "Mother:" & Mother;
//  Jobr.SerNr = -1;
  SetLoopPosition(Jobr,0);
  While (LoopKey(ckey,Jobr,1,TsHr)) begin
    if (Jobr.Mother!=Mother) then begin
      TsHr = false;
    end;
    if (TsHr) then begin
      if (CheckedAllowedStatus(Jobr.ResStatus,ToStatus)==true) then begin
        Jobr.ResStatus = ToStatus;
        if (RecordInsert(Jobr,false)) then begin end; //##KH Should use another function but WHICH ONE????
      end;  
    end;
  end;
  return;
end;

// No need for this...
/*
updating procedure JobGenerateActivity(Record JobVc Jobr,Boolean Checkout)
begin
  Record ActVc Actr;
  Record ResMesVc ResMesr;
  Record ResUsageVc ResUs;
  Record TextTypeVc TextType;
  Row ActVc Actrw;
  Row ResMesVc ResMesrw;
  String 80 tstr;
  Integer i,rwcnt;
  record HotelBlock Hotelb;

  Blockload(Hotelb);
  RecordNew(Actr);
  if (Checkout) then begin
    Actr.ActType = Hotelb.CheckoutMes;
    tstr = USetStr(10130) & " " & Jobr.SerNr;
  end else begin
    Actr.ActType = Hotelb.CheckinMes;
    tstr = USetStr(10131) & " " & Jobr.SerNr;
  end;
  Actr.Comment = tstr;  
  Actr.OKFlag = 0; 
  Actr.TodoFlag = 1; 
  Actr.PrivateFlag = 1; 
  Actr.CalTimeFlag = 0;
  Actr.TransDate = CurrentDate;
  Actr.MainPersons = CurrentUser;
  Actr.CUCode = FindJobCustomerCode(Jobr);
  Actr.CUName = FindJobCustomerName(Jobr);
  Actr.Resources = Jobr.ResCode;
  Actr.StartTime = CurrentTime;   
 // Actr.EndTime = EndTime;
 // Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);
 // Actr.EndDate = CurrentDate;
 
  if nonblank(Jobr.ResUsage) then begin
    ResUs.Code   = Jobr.ResUsage;
    if ReadFirstMain(ResUs,1,true) then begin
      if (Checkout) then begin
        ResMesr.Code = ResUs.MessCkOut;
      end else begin
        ResMesr.Code = ResUs.MessCkIn;
      end;  
      if ReadFirstMain(ResMesr,1,true) then begin
        rwcnt = MatRowCnt(ResMesr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ResMesr,i,ResMesrw); 
          Actrw.TextCode   = ResMesrw.TextCode;
          TextType.Code = ResMesrw.TextCode;
          if ReadFirstMain(TextType,1,true) then begin
            Actrw.Text  = TextType.Comment;
          end;
          MatRowPut(Actr,i,Actrw); 
        end;
      end;  
    end;
  end;
  if RecordStore(Actr,true) then begin end;
  return;
end;
*/
global
updating function Integer DoJobCheckOut(var Record JobVc Jobr,Boolean SubResflag)
begin
  LongInt daysstay;
  Record ResVc Resr;
  record HotelBlock Hotelb;
  record JobVc oldJobr;
  record JobPriceVc JPr;
  Integer res;

  res = 0;
  Blockload(Hotelb);
  RecordCopy(oldJobr,Jobr);
  if (UserCanAction("AllowCheckoutBeforePlanned",true)==false) then begin
    Jobr.EndDate   = CurrentDate;
    Jobr.EndTime   = CurrentTime;
  end;
  Jobr.ResStatus = Hotelb.ChOutSt;
  res = JobVcRecordCheck2(Jobr,oldJobr,2);
  if (res==0) then begin
    if (RecordUpdate(oldJobr,Jobr,true)!=0) then begin
      res = 20718;
      goto LDoJobCheckOut;
    end;
    Resr.Code = Jobr.ResCode;
    if readfirstmain(Resr,1,true) then begin 
      Resr.ResStatus = Hotelb.ToResStatus;
      if RecordStore(Resr,true) then begin end;
    end;
    UpdateMiles(Jobr);
    if (SubResflag) then begin
      StateChangeDaughters(Jobr.SerNr,Hotelb.ChOutSt);
    end;
    TelCallsJobLoop(Jobr.SerNr,Jobr.SerNr);
    JPr.RecType = 0;
    JPr.SerNr = Jobr.SerNr;
    JPr.RowNr = 0;
    if (ReadFirstMain(JPr,3,true)==false) then begin
      LoadExtraItems(Jobr,"",2);
    end;
//    JobGenerateActivity(Jobr,true);
  end;
LDoJobCheckOut:;  
  DoJobCheckOut = res;
  return;
end;

global
function Boolean AllowCheckout(record JobVc Jobr,var Boolean hasopen)
begin
  record ShopBaskVc SBr;
  record CUVc CUr;
  record PDVc PDr;
  Boolean res,TrHs,found;
  record JobVc dJobr;
  string 255 index;

  res = true;
  SBr.OwnerSerNr = Jobr.SerNr;
  SBr.DestinationNr = -1;
  SBr.Owner = kShopBaskOwnerReservation;
  hasopen = ReadFirstKey("OwnerSerNr",SBr,3,true);
  if (hasopen) then begin
    res = false;
//not allowing to checkout before invoice created regardless of payment term    
/*  
    CUr.Code = FindJobCustomerCode(Jobr);
    if (ReadFirstMain(CUr,1,true)) then begin
      PDr.Code = CUr.PayDeal;
      if (ReadFirstMain(PDr,1,true)) then begin
        if (PDr.PDType==2) then begin
          res = false;
        end;
      end else begin
        res = false;
      end;
    end;
*/    
  end else begin
    res = false;
    SBr.OwnerSerNr = Jobr.SerNr;
    SBr.Owner = kShopBaskOwnerReservation;
    TrHs = true;
    while (LoopKey("OwnerSerNr",SBr,2,TrHs)) begin
      if (SBr.OwnerSerNr!=Jobr.SerNr) then begin TrHs = false; end;
      if (SBr.Owner!=kShopBaskOwnerReservation) then begin TrHs = false; end;
      if (TrHs) then begin
        if (SBr.DestinationNr!=-1) then begin
          res = true;
          TrHs = false;
        end;
      end;
    end;
    if (Jobr.ReservationType==kReservationTypeNormal) then begin
//when moved to other room    
      dJobr.Mother = Jobr.SerNr;
      found = true;
      index = "Mother:" & Jobr.SerNr;
      while (LoopKey(index,dJobr,1,found)) begin
        if (dJobr.Mother!=Jobr.SerNr) then begin found = false; end;
        if (found) then begin
          ResetLoop(SBr);
          SBr.OwnerSerNr = dJobr.SerNr;
          SBr.Owner = kShopBaskOwnerReservation;
          TrHs = true;
          while (LoopKey("OwnerSerNr",SBr,2,TrHs)) begin
            if (SBr.OwnerSerNr!=dJobr.SerNr) then begin TrHs = false; end;
            if (SBr.Owner!=kShopBaskOwnerReservation) then begin TrHs = false; end;
            if (TrHs) then begin
              if (SBr.DestinationNr!=-1) then begin
                res = true;
                TrHs = false;
                found = false;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  AllowCheckout = res;
  return;
end;

// Will always read one record every checkin, even if you don't use quotations...but we are fast
updating procedure ClientUpdateResAv(LongInt jobserno,LongInt mothserno)
begin
  record ResAvVc ResAvr;
  record ResAvVc oldResAvr;
  
  if (mothserno==-1) then begin
    ResAvr.MatherJobNr = jobserno;
  end else begin
    ResAvr.MatherJobNr = mothserno;
  end;
  if (ReadFirstKey("MatherJobNr",ResAvr,1,true)) then begin
    if (ResAvr.OKFlag==0) then begin
      RecordCopy(oldResAvr,ResAvr);
      ResAvr.OKFlag = 1;
      if (RecordUpdate(oldResAvr,ResAvr,false)==0) then begin
      end;
    end;
  end;
  return;
end;

function Boolean TestGuestsBeforeCheckin(record HotelBlock Hotelb,record JobVc Jobr)
begin
  Boolean res;
  row JobVc Jobrw;
  Integer i,rwcnt;
  Integer adults,children;
  record CClassVc CClassr;
  
  res = true;
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    CClassr.Code = Jobrw.CClass;
    ReadFirstMain(CClassr,1,true);
    if (CClassr.CType==Hotelb.CClassDCType) or (blank(Jobrw.CClass)) then begin
      adults = adults + 1;
    end;
    if (CClassr.CType==Hotelb.CClassDCTypeChild) then begin
      children = children + 1;
    end;
  end;
  if (Jobr.Persons!=adults) then begin res = false; end;
  if (IsEnterprise) then begin
    if (Jobr.Children>0) then begin
      if (Jobr.Children!=children) then begin res = false; end;
    end;
  end;
  TestGuestsBeforeCheckin = res;
  return;
end; 

updating procedure AssignArrivalSequence(var record JobVc Jobr)
begin
  row JobVc Jobrw;
  Integer i,rwcnt;
  record SRBlock SRb;
  LongInt ArrivalSequence;
  record JobVc oldJobr;
  
  RecordCopy(oldJobr,Jobr);
  BlockLoad(SRb);
  ArrivalSequence = SRb.GuestArrivalSequence;
  if (ArrivalSequence<=0) then begin
    ArrivalSequence = 1;
  end;
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Jobr,i,Jobrw);
    if (Jobrw.ArrivalSequence<0) then begin
      Jobrw.ArrivalSequence = ArrivalSequence;
      ArrivalSequence = ArrivalSequence + 1;
      MatRowPut(Jobr,i,Jobrw);
    end;
  end;
  RecordUpdate(oldJobr,Jobr,false);
  SRb.GuestArrivalSequence = ArrivalSequence;
  BlockStore(SRb);
  return;
end;

global    
updating function Integer DoJobCheckIn2(var record JobVc Jobr,Boolean SubResflag,Boolean errstrf,var string errstr,var string thefield,var Integer therow)
begin
  record HotelBlock Hotelb;
  record JobVc oldJobr;
  record JobPriceVc JPr;
  Integer res;
  LongInt lres;

  errstr = "";
  res = 0;
  Blockload(Hotelb);
  RecordCopy(oldJobr,Jobr);
  if (CheckedAllowedStatus(Jobr.ResStatus,Hotelb.ChInSt)==false) then begin
    res = 1942;
    goto LDoJobCheckIn2;
  end;
  if (Hotelb.DemandGuestOnRes>0) then begin
    if (TestGuestsBeforeCheckin(Hotelb,Jobr)==false) then begin
//    if (MatRowCnt(Jobr)<1) then begin
      res = 2143;
      if (errstrf) then begin
        errstr = ". " & USetStr(2283) & Jobr.SerNr;
      end;
      goto LDoJobCheckIn2;
    end;    
  end;
  if (UserCanAction("AllowCheckinBeforePlanned",true)==false) then begin
    Jobr.TransDate = CurrentDate;
    Jobr.StartTime = CurrentTime;
  end;
  Jobr.ResStatus = Hotelb.ChInSt;  
//  res = JobVcRecordCheck2(Jobr,oldJobr,2);
  JobVcRecordCheck3(Jobr,oldJobr,2,res,errstr,therow,thefield);
  if (res==0) then begin
    JPr.RecType = 0;
    JPr.SerNr = Jobr.SerNr;
    JPr.RowNr = 0;
    if (ReadFirstMain(JPr,3,true)==false) then begin
      LoadExtraItems(Jobr,"",0);
    end;
//    JobGenerateActivity(Jobr,false);
    ClientUpdateResAv(Jobr.SerNr,Jobr.Mother);
    if (SubResflag) then begin
      StateChangeDaughters(Jobr.SerNr,Hotelb.ChInSt);
    end;
//    if (RecordInsert(Jobr,true)==false) then begin //##KH Should use another function but WHICH ONE????
//      res = 20719;
//    end;
    if (RecordUpdate(oldJobr,Jobr,true)!=0) then begin
      res = 20719;
    end else begin
      AssignArrivalSequence(Jobr);
    end;
  end;
LDoJobCheckIn2:;  
  DoJobCheckIn2 = res;
  return;
end;

global    
updating function Integer DoJobCheckIn(var record JobVc Jobr,boolean SubResflag,Boolean errstrf,var string errstr)
begin
  string 255 thefield;
  Integer therow;
  
  DoJobCheckIn = DoJobCheckIn2(Jobr,SubResflag,errstrf,errstr,thefield,therow);
  return;
end;

global
procedure GetJobShopBaskPrices(string cust,string pricelist,string item,val qty,var string comment,var val tsum,var val disc,var val pricep)
begin
  string 100 curitemname;
  string 20 salesacc,vatcode,tax2code,taxtemplatecode;
  val price,reb,cost,instock,t1,tax2prc;
  Boolean calcprice,dummyf;
  record INVc INr;
  record CUVc CUr;
  record GeneralOptionBlock GenOptr;
  val realqty;
  Time blankt;
  
  realqty = qty;
  if (realqty==0) then begin
    realqty = 1;
  end;
  BlockLoad(GenOptr);
  CUr.Code = cust;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (ReadFirstItem(item,INr,true,true)) then begin
      if (GetItemPriceDiscount3(INr.Code,qty,INr,CUr.CurncyCode,0,0,0,0,0,
            CUr.LangCode,CUr.CustCat,pricelist,CUr.RebCode,
            price,curitemname,reb,vatcode,cost,salesacc,
            CUr.ExportFlag,calcprice,CurrentDate,blankt,CUr.Code,true,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then begin
        CalcSum(realqty,price,INr.PriceFactor,0,tsum,GenOptr.UseDiscount);//it is price
        disc = reb;
        comment = curitemname;
        pricep = price;
        if (disc==0) then begin disc = BlankVal; end;
        if (tsum==0) then begin tsum = BlankVal; end;
        if (pricep==0) then begin pricep = BlankVal; end;
      end;
    end;
  end;
  return;
end;

global
function LongInt JobVcCheckIfSaveAllowed(var record JobVc Jobr,record JobVc Job2r,LongInt stat,LongInt long4)
BEGIN
  LongInt res;

  SetRecordCheckVc("JobVc");
  res = JobVcRecordCheck(Jobr,Job2r,stat,long4);  
  JobVcCheckIfSaveAllowed = res;
  RETURN;
END;

global
function Boolean IsAccountOK(record JobVc Jobr)
begin
  record ShopbaskVc Shopb;
  Boolean TsHr;
  String 20 CustCode;
  Boolean AccountOK;
  
  switch (Jobr.ReservationType) begin      
    case kReservationTypeNormal: AccountOK = false;
    case kReservationTypeGroup: AccountOK = false;
  end;
//  if (Jobr.Mother<>-1) then begin
//    AccountOK = true;
//  end else begin
    TsHr = true;
    shopb.OwnerSerNr = Jobr.SerNr;
    while LoopKey("OwnerSerNr",shopb,1,TsHr) begin
      if (shopb.OwnerSerNr <> Jobr.SerNr) then begin 
        TsHr = false;
      end else begin
        if (Shopb.DestinationNr == -1) then begin
          AccountOK = false;
          if (blank(Shopb.CUCode)) then begin
            CustCode = FindJobCustomerCode(Jobr);
          end else begin
            CustCode = Shopb.CUCode;
          end;
          AccountOK = IsSpecialAccount(CustCode);
        end;
      end;
    end;
//  end;
  IsAccountOK = AccountOK;
  return;
end;

function val GetStandardHotelRoomRate(record ResVc Resr)
begin
  val res;
  record INVc INr;
  
  if (Resr.Terminated==0) then begin 
    INr.Code = Resr.Code;
    if (ReadFirstMain(INr,1,true)) then begin
      res = INr.UPrice1;
    end;  
  end; 
  GetStandardHotelRoomRate = res;      
end;

global
function Integer JobPasteResCode(var record JobVc Jobr,string allowedresloc)
begin
  record ResTypeVc ResTyper;
  record UserVc USr;
  record ResVc Resr;
  string 60 resname;
  record ResLocVc RLr;
  Integer res;
  val blankv;
  boolean testf,standardhotelf;

  standardhotelf = BuildProductCode=="StandardHotel";
  res = 0;
  testf = true;
  if (nonblank(Jobr.ResCode)) then begin
    Resr.Code = Jobr.ResCode;
    if ((ReadFirstMain(Resr,1,true)) ) then begin
      if (Resr.Terminated!=0) then begin 
        testf = false;
        Jobr.ResCode = "";
      end;
      if (testf) then begin 
        if (UserCanAction("LimitToResLoc",false)) then begin
          if (nonblank(allowedresloc)) then begin
            if (Resr.ResLoc!=allowedresloc) then begin
              Jobr.ResCode = "";
              res = 2028;
              goto LJobPasteResCode;
            end;
          end;
        end;
        resname = Resr.Name;
  //        if (blank(Jobr.QtyConv)) then begin
          Jobr.MaxPersons = Resr.MaxPersons;
          Jobr.MaxChildren = Resr.MaxChildren;
          Jobr.MaxPax = Resr.MaxPax;
          if (Jobr.MaxPersons<1) then begin
            Jobr.MaxPersons = 1;
          end;
          if (Jobr.MaxChildren<1) then begin
            Jobr.MaxChildren = 0;
          end;
          if (Jobr.MaxPax<1) then begin
            Jobr.MaxPax = Jobr.MaxPersons+Jobr.MaxChildren;
          end;
  //        end;
        if (standardhotelf) then begin
          Jobr.ResUsage = Jobr.ResCode;
        end;
        Jobr.Objects = AddObjectToObjectList(Jobr.Objects,Resr.Objects);
        Jobr.Type = Resr.Type;
        Jobr.LTxtCode = Resr.LTxtCode;
        RLr.Code = Resr.ResLoc;
        ReadFirstMain(RLr,1,true);
        Jobr.BranchID = RLr.BranchID;
        Jobr.Resources = AddObjectToObjectList("",Jobr.ResCode);
        Jobr.Resources = AddObjectToObjectList(Jobr.Resources,Resr.Resources);
      end else begin
        USr.Code = Jobr.ResCode;
        if (ReadFirstMain(USr,1,true)) then begin
          resname = USr.Name;
        end else begin
  //        Beep;
        end;  
      end;
    end;  
    if (standardhotelf) then begin
      JobSumup(Jobr);
    end;
  end else begin
    Jobr.Resources = "";
    if (nonblank(Jobr.Type)) then begin
      ResTyper.Code = Jobr.Type;
      if (ReadFirstMain(ResTyper,1,true)) then begin 
        if (UserCanAction("LimitToResLoc",false)) then begin
          if (nonblank(allowedresloc)) then begin
            if (ResTyper.ResLoc!=allowedresloc) then begin
              Jobr.Type = "";
              res = 2028;
              goto LJobPasteResCode;
            end;
          end;
        end;
        Jobr.MaxPersons = ResTyper.MaxPersons;
        Jobr.MaxChildren = ResTyper.MaxChildren;
        Jobr.MaxPax = ResTyper.MaxPax;
        if (Jobr.MaxPersons<1) then begin
          Jobr.MaxPersons = 1;
        end;
        if (Jobr.MaxChildren<1) then begin
          Jobr.MaxChildren = 0;
        end;
        if (Jobr.MaxPax<1) then begin
          Jobr.MaxPax = Jobr.MaxPersons+Jobr.MaxChildren;
        end;
      end;
    end;
    JobSumup(Jobr);
  end;
  if (Jobr.MaxPersons<1) then begin
    Jobr.MaxPersons = 1;
  end;
  Jobr.ResName = resname;
LJobPasteResCode:;  
  JobPasteResCode = res;
  return;
end;

global
function Integer JobPasteType(var record JobVc Jobr,string oldtypstr)
begin
  Integer res;
  record ResVc Resr;
  record ResTypeVc ResTyper;
  string 60 objs,efstr;

  if (nonblank(Jobr.ResCode)) then begin
    Resr.Code = Jobr.ResCode;
    if (ReadFirstMain(Resr,1,true)) then begin
      if (Resr.Type!=Jobr.Type) then begin
        res = 1944;
      end;
    end;
  end;
  ResTyper.Code = Jobr.Type;
  if (ReadFirstMain(ResTyper,1,true)) then begin 
    efstr = oldtypstr;
    if ((efstr!=Jobr.Type) and (nonblank(efstr))) then begin
      objs = Jobr.Objects;
      RemoveOldResTypeObjects(efstr,objs);
      Jobr.Objects = objs;
    end;
    objs = Jobr.Objects;
    AddObj(ResTyper.Objects,objs);
    Jobr.Objects = objs;    
    Jobr.MaxPersons = ResTyper.MaxPersons;
    Jobr.MaxChildren = ResTyper.MaxChildren;
    Jobr.MaxPax = ResTyper.MaxPax;
  end;
  if (Jobr.MaxPersons<1) then begin
    Jobr.MaxPersons = 1;
  end;
  if (Jobr.MaxChildren<1) then begin
    Jobr.MaxChildren = 0;
  end;
  if (Jobr.MaxPax<1) then begin
    Jobr.MaxPax = Jobr.MaxPersons+Jobr.MaxChildren;
  end;
  JobPasteType = res;
  return;
end;

global
procedure JobPasteTransDate(var record JobVc Jobr)
begin  
  if (Jobr.NrOfDays>=0) then begin
    Jobr.EndDate = AddDay(Jobr.TransDate,Jobr.NrOfDays);
  end;
  if (Jobr.Mother<=0) then begin
    GetFullCurncyRate(Jobr.CurncyCode,Jobr.TransDate,Jobr.FrRate,Jobr.ToRateB1,Jobr.ToRateB2,Jobr.BaseRate1,Jobr.BaseRate2);
  end;
  JobSumup(Jobr);
  return;
end;

global
function Integer JobPasteResUsage(var record JobVc Jobr,string oldresusage)
begin
  Integer res;
  Record ResUsageVc ResUsager;
  string 60 objs,efstr;

  JobSumup(Jobr);
  ResUsager.Code = Jobr.ResUsage;
  if (ReadFirstMain(ResUsager,1,true)) then begin
    if ((oldresusage!=Jobr.ResUsage) and (nonblank(oldresusage))) then begin
      objs = Jobr.Objects;
      RemoveOldResUsageObjects(oldresusage,objs);
      Jobr.Objects = objs;
    end;
    objs = Jobr.Objects;
    AddObj(ResUsager.Objects,objs);
    Jobr.Objects = objs;    
  end;
  JobPasteResUsage = res;
  return;
end;

global
procedure JobPasteNrOfDays(var record JobVc Jobr)
begin  
  if (Jobr.NrOfDays>=0) then begin
    Jobr.EndDate = AddDay(Jobr.TransDate,Jobr.NrOfDays);
  end;
  JobSumup(Jobr);
  return;
end;

function Integer GetMailTextRow(string filename,string registername,string language,var row MailTextVc resMTrw,var Integer IgnoreRecordDetails)
begin
  Integer res;
  record MailTextVc MTr;
  row MailTextVc MTrw;
  Integer i,rwcnt;
  
  res = -1;
  ClearRow(MTr,resMTrw,1);
  if (nonblank(filename)) then begin
    MTr.Register = StringFromStringSet(-3,filename);
  end else begin
    MTr.Register = registername;
  end;
  if (ReadFirstMain(MTr,1,true)) then begin
    IgnoreRecordDetails = MTr.IgnoreRecordDetails;
    if (blank(language)) then begin
      resMTrw.Header = MTr.Header;
      resMTrw.FirstTxt = MTr.FirstTxt;
      resMTrw.LastTxt = MTr.LastTxt;
      goto LMailTextRow;
    end;
    rwcnt = MatRowCnt(MTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(MTr,i,MTrw);
      if (MTrw.Language==language) then begin
        CopyRow(MTr,MTrw,resMTrw);
        res = i;
        goto LMailTextRow;
      end;
    end;
    resMTrw.Header = MTr.Header;
    resMTrw.FirstTxt = MTr.FirstTxt;
    resMTrw.LastTxt = MTr.LastTxt;
    goto LMailTextRow;
  end;
LMailTextRow:;
  GetMailTextRow = res;
  return;
end;

global
procedure MailTextRow2(string filename,string registername,string language,string fallbacklanguage,var row MailTextVc resMTrw,var Integer IgnoreRecordDetails)
begin
  Integer rownr;
  
  if (GetMailTextRow(filename,registername,language,resMTrw,IgnoreRecordDetails)==-1) then begin
    if (blank(language) and nonblank(fallbacklanguage)) then begin
      GetMailTextRow(filename,registername,fallbacklanguage,resMTrw,IgnoreRecordDetails);
    end;
  end;
end;

global
procedure MailTextRow(string filename,string registername,string language,var row MailTextVc resMTrw,var Integer IgnoreRecordDetails)
begin
  GetMailTextRow(filename,registername,language,resMTrw,IgnoreRecordDetails);
end;

global
updating function Integer CreateMailFromJobD(record JobVc Jobr,var record MailVc Mailr,var string warning,string pdfform)
BEGIN
  Integer res;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc CUr;
  row JobVc Jobrw;
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  row MailTextVc MTrw;
  Integer IgnoreRecordDetails;
  string 255 docname,fname;
  
  res = 0;
  if (ReadFirstMain(Jobr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromJobD;
  end;
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  CUr.Code = FindJobCustomerCode(Jobr);
  if (ReadFirstMain(CUr,1,true)) then begin end;
  MArw.RowTyp = 0;
  MArw.AddrCode = CUr.eMail;
  if (blank(MArw.AddrCode)) then begin
    res = 2289;
    warning = CUr.Code;
    goto LCreateMailFromJobD;
  end;
  MatRowPut(Mailr,1,MArw);
  MailTextRow("JobVc","",Jobr.LangCode,MTrw,IgnoreRecordDetails);

  Mailr.Header = MTrw.Header;
  if (nonblank(Mailr.Header)) then begin
    Mailr.Header = Mailr.Header & " ";
  end;
  Mailr.Header = Mailr.Header & USetStr(9079);
  Mailr.Header = Mailr.Header & Jobr.SerNr;
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin
    CreateRecordLink(Mailr,CurrentCompany,Jobr,CurrentCompany);  
    CreateRecordLink(Jobr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);

  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;

  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;

  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "JobForm";
  end;
  fname = "tmp/" & USetStr(2283) & Jobr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(Jobr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromJobD:;
  CreateMailFromJobD = res;
  RETURN;
END;

global
procedure JobVc_PasteMother(var record JobVc Jobr)
begin  
  record JobVc mJobr;
  
  mJobr.SerNr = Jobr.Mother;
  if (ReadFirstMain(mJobr,1,true)) then begin
    Jobr.BookOrigin = mJobr.BookOrigin;
    Jobr.CurncyCode = mJobr.CurncyCode;
    Jobr.FrRate = mJobr.FrRate;
    Jobr.ToRateB1 = mJobr.ToRateB1;
    Jobr.ToRateB2 = mJobr.ToRateB2;
    Jobr.BaseRate1 = mJobr.BaseRate1;
    Jobr.BaseRate2 = mJobr.BaseRate2;  
  end;
  return;
end;

global
procedure ResTypeAvailNewResRemote(record RcVc RepSpec,string l,var record JobVc Jobr)
begin
  Integer pos;
  record ResArtCodeVc ResArtCoder;
  record ResTypeVc ResTyper;
  Record ResUsageVc ResUsager;
  record INVc INr;
  string 255 tstr;
  string 60 objs;
  record HotelBlock Hotelb;

  BlockLoad(Hotelb);
  if (nonblank(Hotelb.DefResUsage)) then begin
    objs = Jobr.Objects;
    RemoveOldResUsageObjects(Hotelb.DefResUsage,objs);
    Jobr.Objects = objs;
  end;
  Jobr.TransDate = RepSpec.sStartDate;
  Jobr.EndDate = AddDay(RepSpec.sStartDate,1);
  if (nonblankdate(RepSpec.d2)) then begin
    Jobr.EndDate = RepSpec.d2;
  end;
  if (nonblankdate(RepSpec.d1)) then begin
    Jobr.TransDate = RepSpec.d1;
  end;
  pos = 0;
  ExtractObj(l,pos,tstr);
  ResArtCoder.ResType = tstr;
  ExtractObj(l,pos,tstr);
  ResArtCoder.ResUsageCode = tstr;
  ExtractObj(l,pos,tstr);
  ResArtCoder.NoOfGuests = StringToLongInt(tstr);
  
  if (ReadFirstKey("NoOfGuests",ResArtCoder,3,true)) then begin
  end;
  INr.Code = ResArtCoder.ArtCode;
  if (ReadFirstMain(INr,1,true)) then begin end;
  Jobr.Type = ResArtCoder.ResType;
  if (nonblank(Jobr.Type)) then begin
    ResTyper.Code = Jobr.Type;
    if (ReadFirstMain(ResTyper,1,true)) then begin
      objs = Jobr.Objects;
      AddObj(ResTyper.Objects,objs);
      Jobr.Objects = objs;
      Jobr.MaxPersons = ResTyper.MaxPersons;
    end;
  end;
  Jobr.ResUsage = ResArtCoder.ResUsageCode;
  ResUsager.Code = Jobr.ResUsage;
  if (ReadFirstMain(ResUsager,1,true)) then begin
    objs = Jobr.Objects;
    AddObj(ResUsager.Objects,objs);
    Jobr.Objects = objs;
  end;
  Jobr.Persons = ResArtCoder.NoOfGuests;
  Jobr.PLPrice = INr.UPrice1;
  JobSumup(Jobr);
  return;
end;

global
procedure RTWNewResRemote2(record RcVc RepSpec,var record JobVc Jobr,Integer type)
begin  
  record ResTypeVc ResTyper;
  string 60 objs;

  RecordNew(Jobr);
  SetJobVcRecordDefaults(type,Jobr);
  Jobr.Type = RepSpec.f1;
  JobPasteType(Jobr,"");
  Jobr.TransDate = RepSpec.sStartDate;
  Jobr.EndDate = AddDay(RepSpec.sStartDate,1);
  if (nonblank(RepSpec.AccStr)) then begin
    Jobr.ResCode = RepSpec.AccStr;
    JobPasteResCode(Jobr,RepSpec.f3);
  end;
/* 
cannot be right 
  if (RepSpec.LastVer>0) then begin
    Jobr.NrOfDays = RepSpec.LastVer;
  end else begin
    Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
  end;
*/   
  if (nonblankdate(RepSpec.d1)) then begin
    Jobr.TransDate = RepSpec.d1;
  end;
  if (nonblankdate(RepSpec.d2)) then begin
    Jobr.EndDate = RepSpec.d2;
  end;
  Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
  JobPasteNrOfDays(Jobr);
  JobSumup(Jobr);
  return;
end;

global
procedure RTWNewResRemote(record RcVc RepSpec,var record JobVc Jobr)
begin  
  RTWNewResRemote2(RepSpec,Jobr,kReservationTypeNormal);
  return;
end;

global
procedure RTWNewResWithArgsRemote(record RcVc RepSpec,Integer compnr,Integer type,string firstres,string lastres,Date startdate,Date enddate,
                                  var record ResAvVc ResAvr)
begin
  record ResVc Resr;
  record ResTypeVc RTr;
  Boolean found;
  row ResAvVc ResAvrw;
  Integer rwcnt;
  record HotelBlock Hotelb;

  BlockLoad(Hotelb);
  ResAvr.TransDate = startdate;
  ResAvr.EndDate = enddate;
  ResAvr.NrOfDays = RepSpec.LastVer;
  ResAvr.StartTime = Hotelb.CheckIn;
  ResAvr.EndTime = Hotelb.CheckOut;
  ResAvr.VisitPurpose = Hotelb.DefVisitPurpose;
  ResAvr.ResLoc = RepSpec.f3;
  if (blank(ResAvr.ResLoc)) then begin
    RTr.Code = RepSpec.f1;
    ReadFirstMain(RTr,1,true);
    ResAvr.ResLoc = RTr.ResLoc;
  end;
  Resr.Code = firstres;
  found = true;
  while (LoopMain(Resr,1,found)) begin
    if (Resr.Code<firstres) or (Resr.Code>lastres) then begin
      found = false;
    end;
    if (found) then begin
      rwcnt = MatRowCnt(ResAvr);
      ClearRow(ResAvr,ResAvrw,1);
      ResAvrw.ResCode = Resr.Code;      
      MatRowPut(ResAvr,rwcnt,ResAvrw);
      ResAvVc_PasteResCode(ResAvr,rwcnt);
      MatRowGet(ResAvr,rwcnt,ResAvrw);
      ResAvrw.Usage = Hotelb.DefResUsage;
      MatRowPut(ResAvr,rwcnt,ResAvrw);
    end;
  end;
  return;
end;
