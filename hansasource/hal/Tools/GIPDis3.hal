external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure IVDchsum(var record IVVc,Integer);
external procedure IVSumup(var record IVVc,Boolean);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure IV2Sumup3(record IVVc,record SMVc,Integer,record SMVc,record SMVc,Boolean,Boolean,Integer,var val,var val,var val,var val,var val,var val,var string);
external function Boolean HasPriceLists();
external function Boolean DateTimeInsidePeriod(Date,Time,Date,Time,Date,Time);
external function Boolean TimeInRange(Time,Time ,Time);
external function Boolean FindItemVARLocal(string,var string,var string,var string,var string);
external procedure FindPLQPriceLocalItem(record PLQVc,record LocalINVc,var val,var val);
external function Boolean ReadFirstLocalItem(string,var record LocalINVc,Boolean,Boolean);
external function Boolean GetFirstLocalItem(var string,var record LocalINVc);
external function roundmode SetRoundModeD(Integer);
external function Boolean FindLocationAccRow(string,row LocationAccBlock);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external function Integer FIFOPerSerialNr(record INVc,record CostAccBlock);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure FillMaskVAR(string,string,string,Array string,Array string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val DivWithRateToBase1(string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure FindPLQPrice(record PLQVc,record INVc,var val,var val);
external function Boolean GetRebate(record INVc,var val,var val,string,string,var val,var Boolean,Date);
external procedure GetStructureCostPrice(string,var val);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure SetDefProjectUnit(string,var string);

/*  This code will calculate the price if the price is not in the prices register, I don't think it should work that way
function Boolean GetPurchaseItem(string artcode,var record PIVc PIp)
BEGIN
  Boolean res;
  
  PIp.ItemCode = artcode;
  PIp.DefaultChoice = 1;
  if (ReadFirstKey("DefaultChoice",PIp,2,true)) then begin
    res = true;
  end;
  GetPurchaseItem = res;
  RETURN;
END;

procedure GetPurchItemPrice(string ItemCode,var val newprp)
begin
  record PIVc PIr;
  
  if (GetPurchaseItem(ItemCode,PIr)) then begin
    newprp = PIr.PurPrice;
    if (nonblank(PIr.CurncyCode)) then begin
      newprp = MulWithRateToBase1(PIr.CurncyCode,CurrentDate,newprp,DefaultCurRoundOff);
    end;
  end;
  return;
end;

function Boolean CalcItemPrice(string plcode,var val exvatprice,record INVc INp,string formula,Integer roundof)
begin
  record PFormVc PFr;
  record PLDefVc PLDr;
  Boolean res;
  Boolean pldfound;
  val newpr,t;
  val t100;
  val frrate,to1,to2,br1,br2;
  Integer theroundof;
  
  theroundof = roundof;
  res = false;
  pldfound = false;
  PLDr.Code = plcode;
  pldfound = ReadFirstMain(PLDr,1,true);
  newpr = BlankVal;
  t100 = 100;
  PFr.Code = formula;
  if (ReadFirstMain(PFr,1,true)) then begin
    switch (PFr.SelBase) begin
      case 0: 
        newpr = INp.InPrice;
      case 1: 
        newpr = INp.UPrice1;
      case 2: 
        newpr = INp.LastPurchPrice2;
      case 3: 
        newpr = INp.WeighedAvPrice;
      case 4: 
        GetPurchItemPrice(INp.Code,newpr);
    end;
    if (pldfound) then begin
      switch (PFr.SelBase) begin
        case 0:
          if (nonblank(PLDr.CurncyCode)) then begin
            newpr = DivWithRateToBase1(PLDr.CurncyCode,CurrentDate,newpr,DefaultCurRoundOff);
          end;
        case 1:
          if (nonblank(PLDr.CurncyCode)) then begin
            newpr = DivWithRateToBase1(PLDr.CurncyCode,CurrentDate,newpr,DefaultCurRoundOff);
          end;
        case 3:
          if (nonblank(PLDr.CurncyCode)) then begin
            newpr = DivWithRateToBase1(PLDr.CurncyCode,CurrentDate,newpr,DefaultCurRoundOff);
          end;
        case 2:
          if (PLDr.CurncyCode<>INp.LastPurchCurncyCode) then begin
            if (nonblank(INp.LastPurchCurncyCode)) then begin
              newpr = DivWithRateToBase1(INp.LastPurchCurncyCode,CurrentDate,newpr,DefaultCurRoundOff);
            end;
            if (nonblank(PLDr.CurncyCode)) then begin
              newpr = DivWithRateToBase1(PLDr.CurncyCode,CurrentDate,newpr,DefaultCurRoundOff);
            end;
          end;
      end;
      if ((PFr.SelBase<>0) and (theroundof<>3)) then begin
        theroundof = 3;
      end;
    end;
    newpr = newpr * PFr.Perc;
    newpr = newpr / 100;
    newpr = Round(newpr + PFr.Add1Val,SetRoundModeD(PFr.RndTo));
    newpr = Round(newpr + PFr.Add2Val,SetRoundModeD(roundof));
    
    if (newpr<>exvatprice) then begin
      res = true;
      exvatprice = newpr;
    end;
  end;
  CalcItemPrice = res;
  return;
end;
*/

global
function Integer AddPortugueseType()
begin
  AddPortugueseType = 100;
  return;
end;

global
function string 5 FindPLVATCode(record PLDefVc PLDefr,string artcode,string group)
begin
  string 5 res;
  row PLDefVc PLDefrw;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(PLDefr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PLDefr,i,PLDefrw);
    switch (PLDefrw.CodeType) begin
      case 0:
        if (PLDefrw.ItemCode==group) or blank(PLDefrw.ItemCode) then begin
          res = PLDefrw.VATCode;
          goto LFindPLVATCode;
        end;
      case 1:
        if (PLDefrw.ItemCode==artcode) then begin
          res = PLDefrw.VATCode;
          goto LFindPLVATCode;
        end;
    end;
  end;
LFindPLVATCode:;  
  if (blank(res)) then begin
    res = PLDefr.VATCode;
  end;
  FindPLVATCode = res;
  return;
end;

global
function string 10 FindPLTaxTemplateCode(record PLDefVc PLDefr,string artcode,string group)
begin
  string 10 res;
  row PLDefVc PLDefrw;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(PLDefr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PLDefr,i,PLDefrw);
    switch (PLDefrw.CodeType) begin
      case 0:
        if (PLDefrw.ItemCode==group) or blank(PLDefrw.ItemCode) then begin
          res = PLDefrw.TaxTemplateCode;
          goto LFindPLTaxTemplateCode;
        end;
      case 1:
        if (PLDefrw.ItemCode==artcode) then begin
          res = PLDefrw.TaxTemplateCode;
          goto LFindPLTaxTemplateCode;
        end;
    end;
  end;
LFindPLTaxTemplateCode:;
  FindPLTaxTemplateCode = res;
  return;
end;

global
procedure RegionPerceptionTax(string custcode,string region,string eucodex,string group,var string tax2code,var val tax2prc)
BEGIN
  record CUVc CUr;
  record RPTaxVc RPTaxr;
  row RPTaxVc RPTaxrw;
  Integer i,rwcnt;
  record ITVc ITr;
  string 60 leucodex,lregion;
  
  tax2code = "";
  tax2prc = blankval;
  lregion = region;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  if (blank(lregion)) then begin
    lregion = CUr.Region;
  end;
  leucodex = eucodex;
  if (blank(leucodex)) then begin
    ITr.Code = group; 
    if (ReadFirstMain(ITr,1,true)) then begin end;
    leucodex = ITr.EUCodex;
  end;
  RPTaxr.Region = lregion;
  if (ReadFirstKey("Region",RPTaxr,1,true)) then begin
    rwcnt = MatRowCnt(RPTaxr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RPTaxr,i,RPTaxrw);
      if (RPTaxrw.EUCodex==leucodex) then begin
        tax2code = RPTaxr.Code;
        tax2prc = RPTaxrw.TAXPrc;
        goto LRegionPerceptionTax;
      end;
    end;
  end;
 LRegionPerceptionTax:; 
  RETURN;
END;

global
function Boolean PriceListforDateTime2(Date tdp,Time tt,string areplpricelist,var string respricelist,var record PLDefVc PLDefr)
begin
  Boolean pldeffound;
  string 255 pricelist,replpricelist;
  Integer lenclass;
  Date blankd;
  Boolean found,testf;
  
  RecordClear(PLDefr);
  replpricelist = areplpricelist;
LPriceListforDateTime2START:;
  pricelist = replpricelist;
  lenclass = 4;
  while (lenclass>=0) begin
    ResetLoop(PLDefr);
    PLDefr.PLReplCode = replpricelist;
    PLDefr.LengthClass = lenclass;
    PLDefr.StartDate = tdp;

    switch (lenclass) begin
      case 4: PLDefr.StartDate = blankd;
      case 3: PLDefr.StartDate = AddDay(PLDefr.StartDate,-366);
      case 2: PLDefr.StartDate = AddDay(PLDefr.StartDate,-31);
      case 1: PLDefr.StartDate = AddDay(PLDefr.StartDate,-7);
      case 0: ;
    end;
    found = true;
    while (LoopKey("PLReplCode",PLDefr,3,found)) begin
      if (PLDefr.PLReplCode!=replpricelist) then begin found = false; end;
      if (PLDefr.LengthClass!=lenclass) then begin found = false; end;
      if (found) then begin
        testf = true;
        if (testf) then begin  
          if ((nonblanktime(PLDefr.StartTime)) and (nonblanktime(tt))) then begin
            if (DateTimeInsidePeriod(tdp,tt,PLDefr.StartDate,PLDefr.StartTime,PLDefr.EndDate,PLDefr.EndTime)) then begin
              found = false;
              pldeffound = true;
              pricelist = PLDefr.Code;
            end;
          end else begin
            if (DateInRange(tdp,PLDefr.StartDate,PLDefr.EndDate))  then begin
//cannot stop cause might be pricelist defined per period            
              pldeffound = true;
              pricelist = PLDefr.Code;
            end;
          end;
        end;
      end;
    end;
    lenclass = lenclass - 1;
  end;
  if (pldeffound==false) then begin
    PLDefr.Code = replpricelist;
    if (ReadFirstMain(PLDefr,1,true)) then begin
      if (nonblank(PLDefr.PLReplCode)) then begin
        replpricelist = PLDefr.PLReplCode;
        goto LPriceListforDateTime2START;
      end else begin
        pldeffound = true;
      end;
    end;
  end;
  respricelist = pricelist;
  PriceListforDateTime2 = pldeffound;
  return;
end;

global
function Boolean PriceListforDateTime(Date tdp,Time tt,string areplpricelist,var string respricelist)
begin
  record PLDefVc PLDefr;
  PriceListforDateTime2(tdp,tt,areplpricelist,respricelist,PLDefr);
  return;
end;

global
function Boolean BlockedBranchItem(string BranchID,string ArtCode)
begin
  Boolean res;
  record BranchBlockINVc BBINr;
  
  BBINr.ArtCode = ArtCode;
  BBINr.BranchCode = BranchID;
  res = ReadFirstMain(BBINr,2,true);  
  BlockedBranchItem = res;
  return;
end;

/*should i put branch as argument ? */
global
function Boolean GetItemPriceDiscount3(string item,val qtp,var record INVc INr,string crncycode,
         val frrate,val torate1,val torate2,val basrate1,val basrate2,
         string langcode,string custcat,string pricelist,string rebcode,
         var val price,var string descstr,var val discount,
         var string vatcode,var val basepricep,var string salesacc,Integer aexport,var Boolean calcpricef,
         Date tdp,Time tt,string custcode,Boolean forcepropervar,var Boolean nomoreremotecalls,string paydeal,var string tax2code,var val tax2prc,
         string region,string location,var string taxtempletecode)
begin
  Boolean res;
  record PDVc PDr;
  record ITVc ITr;
  record PLVc PLr;
  record PLQVc PLQr;
  record PLDefVc PLDefr;
  Boolean pldeffound,infound,qtydepf,foundstaff,promotionsf;
  val tprice,tdisc;
  string 255 lang2,pricelist2;
  val fr,to1,to2,br1,br2;  
  record AccBlock ARAccb;
  record CostAccBlock CAb;
  string 60 theitemcode;
  string 200 comment;
  Integer exportf;
  Boolean plf,varf;
  string 10 itemsize;
  string 255 mask;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  Boolean nomorepricing,rebfound,qtyplfound;
  string 10 plvatcode,pltaxtemplatecode;
//  row PLDefVc PLDefrw;
//  Integer rwcnt,i;
//  Boolean res2;
  record PDSalesAccBlock PDSAb;
  row LocationAccBlock LAbrw;

  nomorepricing = false;
  exportf = aexport;
  res = false;
  pldeffound = false;  
  foundstaff = false;
  qtydepf = false;
  calcpricef = false;
  pricelist2 = pricelist;
  BlockLoad(ARAccb);
  BlockLoad(CAb);
  if (ARAccb.CredSalesAccs==0) then begin
    if (exportf>=AddPortugueseType) then begin
      exportf = exportf - AddPortugueseType;
    end;
  end;
  descstr = "";
  vatcode = "";
  salesacc = "";
  taxtempletecode = "";
  tprice = price;
  tdisc = discount;
  basepricep = blankval;

  infound = GetFirstItem(item,INr);
  theitemcode = INr.Code;
  if (infound==false) then begin
    infound = ReadFirstItem(item,INr,true,forcepropervar);
    if (infound) then begin
      theitemcode = item;
      if (item<>INr.Code) then begin
        INr.Code = item;
      end;
    end;
  end;
  if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
    varf = true;
    FillMaskVAR(item,itemsize,mask,maskvar,maskvarsz);
  end;

  BlockLoad(PDSAb);
  if (INr.Terminated<>0) then begin infound = false; end;
  if (infound) then begin
    if (nonblank(INr.CalcPrice)) then begin
      calcpricef = true;
    end;  
    FindLocationAccRow(location,LAbrw);
    switch (exportf) begin
      case 1: salesacc = LAbrw.EUSalesAcc;
      case 2: salesacc = LAbrw.ExpSalesAcc;
      case 3: salesacc = LAbrw.EUSalesAcc;
      case 4: salesacc = LAbrw.ExpSalesAcc;
      otherwise salesacc = LAbrw.SalesAcc;
    end;

    if (blank(salesacc)) then begin
      switch (exportf) begin
        case 1: salesacc = INr.EUSalesAcc;
        case 2: salesacc = INr.ExpSalesAcc;
        case 3: salesacc = INr.EUSalesAcc;
        case 4: salesacc = INr.ExpSalesAcc;
        otherwise salesacc = INr.SalesAcc;
      end;
    end;
    if (exportf==AddPortugueseType+0) then begin
      salesacc = INr.CredSalesAcc;
    end;  
    if (exportf==AddPortugueseType+1) then begin
      salesacc = INr.CredEUSalesAcc;
    end;  
    if (exportf==AddPortugueseType+2) then begin
      salesacc = INr.CredExpSalesAcc;
    end;  
    if (blank(salesacc)) then begin
      if (PDSAb.UsePDSalesAcc==1) then begin
        PDr.Code = paydeal;
        if (ReadFirstMain(PDr,1,true)) then begin end;
        salesacc = PDr.pdSalesAcc;
      end;
    end;
    vatcode = INr.VATCode;
    switch (exportf) begin
      case 1: vatcode = INr.VATCodeEU;
      case 2: vatcode = INr.VATCodeExp;
      case 3: vatcode = INr.VATCodeEU;
      case 4: vatcode = INr.VATCodeExp;
    end;
    if (exportf==AddPortugueseType+0) then begin
      vatcode = INr.CredVATCode;
    end;      
    if (exportf==AddPortugueseType+1) then begin
      vatcode = INr.CredVATCodeEU;
    end;      
    if (exportf==AddPortugueseType+2) then begin
      vatcode = INr.CredVATCodeExp;
    end;      
    taxtempletecode = INr.TaxTemplateCode;
    switch (exportf) begin
      case 1: taxtempletecode = INr.TaxTemplateCodeEU;
      case 2: taxtempletecode = INr.TaxTemplateCodeExp;
      case 3: taxtempletecode = INr.TaxTemplateCodeEU;
      case 4: taxtempletecode = INr.TaxTemplateCodeExp;
    end;
    if ((nonblank(INr.Group)) and ((blank(vatcode)) or (blank(salesacc)) or (blank(taxtempletecode)))) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        if (blank(vatcode)) then begin
          vatcode = ITr.VATCodeDom;
          switch (exportf) begin
            case 1: vatcode = ITr.VATCodeEU;
            case 2: vatcode = ITr.VATCodeExp;
            case 3: vatcode = ITr.VATCodeEU;
            case 4: vatcode = ITr.VATCodeExp;
          end;          
          if (exportf==AddPortugueseType+0) then begin
            vatcode = ITr.CredVATCodeDom;
          end;      
          if (exportf==AddPortugueseType+1) then begin
            vatcode = ITr.CredVATCodeEU;
          end;      
          if (exportf==AddPortugueseType+2) then begin
            vatcode = ITr.CredVATCodeExp;
          end;      
        end;        
        if (blank(taxtempletecode)) then begin
          taxtempletecode = ITr.TaxTemplateCode;
          switch (exportf) begin
            case 1: taxtempletecode = ITr.TaxTemplateCodeEU;
            case 2: taxtempletecode = ITr.TaxTemplateCodeExp;
            case 3: taxtempletecode = ITr.TaxTemplateCodeEU;
            case 4: taxtempletecode = ITr.TaxTemplateCodeExp;
          end;
        end;
        if (blank(salesacc)) then begin
          switch (exportf) begin
            case 1: salesacc = ITr.EUSalesAcc;
            case 2: salesacc = ITr.ExpSalesAcc;
            case 3: salesacc = ITr.EUSalesAcc;
            case 4: salesacc = ITr.ExpSalesAcc;
            otherwise salesacc = ITr.SalesAcc;
          end;
          if (exportf==AddPortugueseType+0) then begin
            salesacc = ITr.CredSalesAcc;
          end;          
          if (exportf==AddPortugueseType+1) then begin
            salesacc = ITr.CredEUSalesAcc;
          end;          
          if (exportf==AddPortugueseType+2) then begin
            salesacc = ITr.CredExpSalesAcc;
          end;          
        end;
      end;
    end;
    
    res = true;
    tprice = INr.UPrice1;
    if (HasPriceLists==false) then begin
      goto L44GetItemPriceDiscount3;
    end;
    if (nonblank(custcode)) then begin
      if (nonblank(custcode)) then begin
        PLr.PLCode = pricelist2;
        PLr.ArtCode = theitemcode;
        PLr.CustCode = custcode;
        plf = ReadFirstMain(PLr,3,true);
        if ((plf==false) and varf) then begin
          PLr.PLCode = pricelist2;
          PLr.ArtCode = maskvar[0];
          PLr.CustCode = custcode;
          plf = ReadFirstMain(PLr,3,true);
        end;
        if (plf) then begin
          tprice = PLr.ExVatPrice;
          if (nonblank(PLr.SalesAcc)) then begin
            salesacc = PLr.SalesAcc;
          end;
          if (PLr.NoOtherPricing!=0) then begin
            nomorepricing = true;
          end;
          plvatcode = FindPLVATCode(PLDefr,INr.Code,INr.Group);
          if (nonblank(plvatcode)) then begin
            vatcode = plvatcode;
          end;
          pltaxtemplatecode = FindPLTaxTemplateCode(PLDefr,INr.Code,INr.Group);
          if (nonblank(pltaxtemplatecode)) then begin
            taxtempletecode = pltaxtemplatecode;
          end;
          goto L44GetItemPriceDiscount3;  
        end;
      end;
    end;    
//MOved to GetPriceList
    if (nonblank(pricelist2)) then begin
      if (GetYear(tdp)>0) then begin
        pldeffound = PriceListforDateTime2(tdp,tt,pricelist2,pricelist2,PLDefr);
/*            
        PLDefr.PLReplCode = pricelist2;
        PLDefr.StartDate = tdp;
        pldeffound = ReadLastKey("PLReplCode",PLDefr,2,false); 
        if (PLDefr.PLReplCode<>pricelist2) then begin pldeffound = false; end;
        if (DateInRange(tdp,PLDefr.StartDate,PLDefr.EndDate)==false) then begin pldeffound = false; end;
        if (pldeffound) then begin pricelist2 = PLDefr.Code; end;
*/        
      end;  
      if (pldeffound==false) then begin
        PLDefr.Code = pricelist2;
        pldeffound = ReadFirstMain(PLDefr,1,true);        
        if (pldeffound) then begin        
          if (nonblankdate(tdp)) then begin
            if (DateInRange(tdp,PLDefr.StartDate,PLDefr.EndDate)==false) then begin
              goto L44GetItemPriceDiscount3;
            end;
          end;
        end;    
      end;  
//Moved to GetPriceList
      if (pldeffound) then begin
        if (PLDefr.DepPrice==1) then begin qtydepf = true; end;
        plvatcode = FindPLVATCode(PLDefr,INr.Code,INr.Group);
        if (nonblank(plvatcode)) then begin
          vatcode = plvatcode;
        end;
        pltaxtemplatecode = FindPLTaxTemplateCode(PLDefr,INr.Code,INr.Group);
        if (nonblank(pltaxtemplatecode)) then begin
          taxtempletecode = pltaxtemplatecode;
        end;
      end;  
      switch (PLDefr.DepPrice) begin
        case 2:
          PLr.PLCode = pricelist2;
          PLr.ArtCode = theitemcode;        
          plf = ReadFirstMain(PLr,2,true);
          if (plf==false) and (pricelist!=pricelist2) then begin
            PLr.PLCode = pricelist;
            PLr.ArtCode = theitemcode;        
            plf = ReadFirstMain(PLr,2,true);
          end;
          if ((plf==false) and varf) then begin
            PLr.PLCode = pricelist2;
            PLr.ArtCode = maskvar[0];        
            plf = ReadFirstMain(PLr,2,true);
          end;
          if (plf) then begin 
            if (nonblank(custcode)) then begin
              if (nonblank(PLr.CustCode)) then begin
                if (PLr.CustCode!=custcode) then begin
                  plf = false;
                end;
              end;
            end;
          end;
          if (plf) then begin 
            basepricep = PLr.CostPrice;
            if (nonblank(PLr.ExVatPrice)) then begin
              tprice = PLr.ExVatPrice;
            end;
            if (nonblank(PLr.SalesAcc)) then begin
              salesacc = PLr.SalesAcc;
            end;            
            plvatcode = FindPLVATCode(PLDefr,INr.Code,INr.Group);
            if (nonblank(plvatcode)) then begin
              vatcode = plvatcode;
            end;
            pltaxtemplatecode = FindPLTaxTemplateCode(PLDefr,INr.Code,INr.Group);
            if (nonblank(pltaxtemplatecode)) then begin
              taxtempletecode = pltaxtemplatecode;
            end;
            if (PLr.NoOtherPricing!=0) then begin
              nomorepricing = true;
            end;
          end else begin
            pldeffound = false;
          end;

        case 1:
          PLQr.PLCode = pricelist2;
          PLQr.ArtCode = theitemcode;
          plf = ReadFirstMain(PLQr,2,true);
          if ((plf==false) and varf) then begin
            PLQr.PLCode = pricelist2;
            PLQr.ArtCode = maskvar[0];
            plf = ReadFirstMain(PLQr,2,true);
          end;
          if (plf) then begin
            qtyplfound = true;
            FindPLQPrice(PLQr,INr,qtp,tprice);
            if (nonblank(PLQr.SalesAcc)) then begin
              salesacc = PLQr.SalesAcc;
            end;            
          end else begin
            pldeffound = false;
          end;
        case 0:
          PLr.PLCode = pricelist2;
          PLr.ArtCode = theitemcode;        
          plf = ReadFirstMain(PLr,2,true);
          if (plf==false) and (pricelist!=pricelist2) then begin
            PLr.PLCode = pricelist;
            PLr.ArtCode = theitemcode;        
            plf = ReadFirstMain(PLr,2,true);
          end;
          if ((plf==false) and varf) then begin
            PLr.PLCode = pricelist2;
            PLr.ArtCode = maskvar[0];        
            plf = ReadFirstMain(PLr,2,true);
          end;
          if (plf) then begin 
            if (nonblank(custcode)) then begin
              if (nonblank(PLr.CustCode)) then begin
                if (PLr.CustCode!=custcode) then begin
                  plf = false;
                end;
              end;
            end;
          end;
          if (plf) then begin 
            tprice = PLr.ExVatPrice;
            if (nonblank(PLr.SalesAcc)) then begin
              salesacc = PLr.SalesAcc;
            end;            
            plvatcode = FindPLVATCode(PLDefr,INr.Code,INr.Group);
            if (nonblank(plvatcode)) then begin
              vatcode = plvatcode;
            end;
            pltaxtemplatecode = FindPLTaxTemplateCode(PLDefr,INr.Code,INr.Group);
            if (nonblank(pltaxtemplatecode)) then begin
              taxtempletecode = pltaxtemplatecode;
            end;
            if (PLr.NoOtherPricing!=0) then begin
              nomorepricing = true;
            end;
          end else begin
            pldeffound = false;
  /*
            tprice = BlankVal;
            rwcnt = MatRowCnt(PLDefr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(PLDefr,i,PLDefrw);
              switch (PLDefrw.CodeType) begin
                case 0:
                  if (PLDefrw.ItemCode==INr.Group) then begin
                    res2 = CalcItemPrice(PLDefr.Code,tprice,INr,PLDefrw.Formula,3);
                  end;
                case 1:
                  if (PLDefrw.ItemCode==INr.Code) then begin
                    res2 = CalcItemPrice(PLDefr.Code,tprice,INr,PLDefrw.Formula,3);
                  end;
              end;
            end;
  */
          end;
        end;
    end;
    if (pldeffound) then begin
       if (crncycode==PLDefr.CurncyCode) then begin goto L45GetItemPriceDiscount3; end;// do not touch price 
       if (nonblank(PLDefr.CurncyCode)) then begin
         if (blank(crncycode)) then begin           
           tprice = MulWithRateToBase1(PLDefr.CurncyCode,CurrentDate,tprice,DefaultCurRoundOff);
           goto L45GetItemPriceDiscount3;
         end else begin
           tprice = MulWithRateToBase1(PLDefr.CurncyCode,CurrentDate,tprice,DefaultCurRoundOff);
           if (frrate==0 and torate1==0 and torate2==0 and basrate1==0 and basrate2==0) then begin
             tprice = DivWithRateToBase1(crncycode,CurrentDate,tprice,DefaultCurRoundOff);
           end else begin
             tprice = DivRateToBase1(crncycode,tprice,frrate,torate1,torate2,basrate1,basrate2,DefaultCurRoundOff);
           end;
           goto L45GetItemPriceDiscount3;
         end;
       end;
    end;    

L44GetItemPriceDiscount3:;
    if (frrate==0 and torate1==0 and torate2==0 and basrate1==0 and basrate2==0) then begin
      tprice = DivWithRateToBase1(crncycode,CurrentDate,tprice,DefaultCurRoundOff);
    end else begin
      tprice = DivRateToBase1(crncycode,tprice,frrate,torate1,torate2,basrate1,basrate2,DefaultCurRoundOff);
    end;
L45GetItemPriceDiscount3:;

    price = tprice;
    lang2 = langcode;
    GetItemNameStr(1,descstr,lang2,INr.Name,theitemcode);
    
    if (nomorepricing==false and promotionsf==false) then begin
      rebfound = GetRebate(INr,tprice,qtp,custcat,rebcode,tdisc,foundstaff,tdp);
      if (foundstaff) then begin
        discount = tdisc;
      end else begin
        if (blank(discount)) then begin
          discount = tdisc;
        end;        
      end;        
    end;    
    if (blank(vatcode)) then begin
      vatcode = ARAccb.VATCodeDom;
      switch (exportf) begin
        case 1: vatcode = ARAccb.VATCodeEU;
        case 2: vatcode = ARAccb.VATCodeExp;
        case 3: vatcode = ARAccb.VATCodeEU;
        case 4: vatcode = ARAccb.VATCodeExp;
      end;
      if (exportf==AddPortugueseType+0) then begin
        vatcode = ARAccb.CredVATCodeDom;
      end;
      if (exportf==AddPortugueseType+1) then begin
        vatcode = ARAccb.CredVATCodeEU;
      end;
      if (exportf==AddPortugueseType+2) then begin
        vatcode = ARAccb.CredVATCodeExp;
      end;
    end;
    if (blank(taxtempletecode)) then begin
      taxtempletecode = ARAccb.TaxTemplateCode;
      switch (exportf) begin
        case 1: taxtempletecode = ARAccb.TaxTemplateCodeEU;
        case 2: taxtempletecode = ARAccb.TaxTemplateCodeExp;
        case 3: taxtempletecode = ARAccb.TaxTemplateCodeEU;
        case 4: taxtempletecode = ARAccb.TaxTemplateCodeExp;
      end;
    end;
    if (blank(salesacc)) then begin
      switch (exportf) begin
        case 1: salesacc = ARAccb.EUSalesAcc;
        case 2: salesacc = ARAccb.ExpSalesAcc;
        case 3: salesacc = ARAccb.EUSalesAcc;
        case 4: salesacc = ARAccb.ExpSalesAcc;
        otherwise salesacc = ARAccb.DomSalesAcc;
      end;
      if (exportf==AddPortugueseType+0) then begin
        salesacc = ARAccb.CredDomSalesAcc;
      end;
      if (exportf==AddPortugueseType+1) then begin
        salesacc = ARAccb.CredEUSalesAcc;
      end;
      if (exportf==AddPortugueseType+2) then begin
        salesacc = ARAccb.CredExpSalesAcc;
      end;
    end;
    if (PDSAb.UsePDSalesAcc==2) then begin
      PDr.Code = paydeal;
      if (ReadFirstMain(PDr,1,true)) then begin end;
      if (nonblank(PDr.pdSalesAcc)) then begin
        salesacc = PDr.pdSalesAcc;
      end;
    end;
    if ((blank(INr.InPrice)) and (blank(INr.ExtraCost))) then begin
      basepricep = blankval;
    end else begin
      if (blank(basepricep)) then begin
        basepricep = INr.InPrice;
        if (CAb.INExtraCostInCOGS!=0) then begin
          basepricep = basepricep + INr.ExtraCost;
        end;
      end;
    end;  
    if (INr.ItemType==3) then begin
      comment = "";
      SetDefProjectUnit(INr.Code,comment);
      if (nonblank(comment)) then begin
        INr.Unittext = comment;
      end;
    end;
    if ((INr.InPrice==blankval) and (INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      GetStructureCostPrice(INr.Recepy,basepricep);
    end;        
  end else begin
    price = blankval;
    discount = blankval;
  end;    
  if (discount==0) then begin
    discount = blankval;
  end;
  RegionPerceptionTax(custcode,region,INr.EUCodex,INr.Group,tax2code,tax2prc);
  nomoreremotecalls = !calcpricef and !rebfound and !qtyplfound;
//Trace("item " & item," pricelist " & pricelist & " rebcode " & rebcode & " custcode " & custcode & " tprice " & tprice);            
  GetItemPriceDiscount3 = res;
  RETURN;
END;

global
function val GetTax1Discount(string custcode,Date transdate,string vatcode)
BEGIN
  val res;
  record Tax1RebVc Tax1Rebr;

  Tax1Rebr.Code = vatcode;
  Tax1Rebr.CustCode = custcode;
  if (ReadFirstMain(Tax1Rebr,2,true)) then begin
    if (transdate>=Tax1Rebr.From) then begin
      res = Tax1Rebr.TAX1Reb;
    end;
  end;
  GetTax1Discount = res;
  RETURN;
END;

/*
not used register

global
function val GetTax2Discount(string custcode,Date transdate,string tax2code)
BEGIN
  val res;
  record RPTaxRebVc RPTaxRebr;

  RPTaxRebr.Code = tax2code;
  RPTaxRebr.CustCode = custcode;
  if (ReadFirstMain(RPTaxRebr,2,true)) then begin
    if (transdate>=RPTaxRebr.From) then begin
      res = RPTaxRebr.TAX2Reb;
    end;
  end;
  GetTax2Discount = res;
  RETURN;
END;
*/

global
procedure GetTaxesDiscounts(string custcode,Date transdate,string vatcode,string tax2code,var val tax1reb,var val tax2reb)
BEGIN

  tax1reb = GetTax1Discount(custcode,transdate,vatcode);
/*
not used register
  tax2reb = GetTax2Discount(custcode,transdate,tax2code);
*/  
  RETURN;
END;

global
function string 20 GetTax2Acc(string tax2code)
BEGIN
  string 20 res;
  record RPTaxVc RPTaxr;
  
  RPTaxr.Code = tax2code;
  if (ReadFirstMain(RPTaxr,1,true)) then begin
    res = RPTaxr.TAXAcc;
  end;
  GetTax2Acc = res;
  RETURN;
END;

global
function Boolean CostPriceForGP(string item,string serialnr,string pricelist,string custcode,var val basepricep)
begin
  Boolean res;
  record CostAccBlock CAb;
  record INVc INr;
  record PLVc PLr;
  string 255 theitemcode;
  Boolean plf,buybackf,varf;
  string 10 itemsize;
  string 255 mask;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  val tprice;
  
  BlockLoad(CAb);
  if (CAb.SalesCostAsStdCost!=0) then begin
    if (GetFirstItem(item,INr)==false) then begin
      theitemcode = INr.Code;
      if (ReadFirstItem(item,INr,true,false)) then begin
        theitemcode = item;
        if (item!=INr.Code) then begin
          INr.Code = item;
        end;
      end;
    end;
    if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
      varf = true;
      FillMaskVAR(item,itemsize,mask,maskvar,maskvarsz);
    end;
    PLr.PLCode = pricelist;
    PLr.ArtCode = theitemcode;
    PLr.CustCode = custcode;
    plf = ReadFirstMain(PLr,3,true);
    if ((plf==false) and varf) then begin
      PLr.PLCode = pricelist;
      PLr.ArtCode = maskvar[0];
      PLr.CustCode = custcode;
      plf = ReadFirstMain(PLr,3,true);
    end;
    if (plf==false) then begin
      PLr.PLCode = pricelist;
      PLr.ArtCode = theitemcode;        
      plf = ReadFirstMain(PLr,2,true);
      if (plf==false) then begin
        PLr.PLCode = pricelist;
        PLr.ArtCode = theitemcode;        
        plf = ReadFirstMain(PLr,2,true);
      end;
    end;

    if (blank(PLr.CostPrice)) then begin    
      if (INr.SerNrf!=0) then begin
        if (nonblank(serialnr)) then begin
          if (FIFOPerSerialNr(INr,CAb)) then begin
            tprice = FindCostPrice(item,"",serialnr,1,0.00,false);
            if (nonblank(tprice)) then begin
              basepricep = tprice;
              res = true;
            end;
          end;
        end;
      end;
    end;
  end;
  CostPriceForGP = res;
  return;
end;

global
function Boolean GetItemPriceDiscountLocalItem(string item,val qtp,var record LocalINVc LocalINr,string crncycode,
         val frrate,val torate1,val torate2,val basrate1,val basrate2,
         string langcode,string custcat,string pricelist,string rebcode,
         var val price,var string descstr,var val discount,
         var string vatcode,var val basepricep,var string salesacc,Integer aexport,var Boolean calcpricef,
         Date tdp,string custcode,Boolean forcepropervar,var Boolean nomoreremotecalls,string paydeal,var string tax2code,var val tax2prc,
         string region,string location)
begin
  Boolean res;
  record PDVc PDr;
  record LocalITVc LocalITr;
  record LocalPLVc LocalPLr;
  record PLQVc PLQr;
  record PLDefVc PLDefr;
  Boolean pldeffound,infound,qtydepf,foundstaff;
  val tprice,tdisc;
  string 255 lang2,pricelist2;
  val fr,to1,to2,br1,br2;  
  record AccBlock ARb;
  string 60 theitemcode;
  string 200 comment;
  Integer exportf;
  Boolean plf,varf;
  string 10 itemsize;
  string 255 mask;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  Boolean nomorepricing,rebfound,qtyplfound;
  string 10 plvatcode;
//  row PLDefVc PLDefrw;
//  Integer rwcnt,i;
//  Boolean res2;
  record PDSalesAccBlock PDSAb;
  row LocationAccBlock LAbrw;

  nomorepricing = false;
  exportf = aexport;
  res = false;
  pldeffound = false;  
  foundstaff = false;
  qtydepf = false;
  calcpricef = false;
  pricelist2 = pricelist;
  
  BlockLoad(ARb);  
  if (ARb.CredSalesAccs==0) then begin
    if (exportf>=AddPortugueseType) then begin
      exportf = exportf - AddPortugueseType;
    end;
  end;
  descstr = "";
  vatcode = "";
  salesacc = "";
  tprice = price;
  tdisc = discount;
  basepricep = blankval;

  infound = GetFirstLocalItem(item,LocalINr);
  theitemcode = LocalINr.Code;
  if (infound==false) then begin
    infound = ReadFirstLocalItem(item,LocalINr,true,forcepropervar);
    if (infound) then begin
      theitemcode = item;
      if (item!=LocalINr.Code) then begin
        LocalINr.Code = item;
      end;
    end;
  end;
  if (infound==false) then begin
    if (FindItemVARLocal(LocalINr.Code,sz,msk,mskrep,varsubset)) then begin
      varf = true;
      FillMaskVAR(item,itemsize,mask,maskvar,maskvarsz);
    end;
  end;
  BlockLoad(PDSAb);
  if (LocalINr.Terminated<>0) then begin infound = false; end;
  if (infound) then begin
    if (nonblank(LocalINr.CalcPrice)) then begin
      calcpricef = true;
    end;  
    FindLocationAccRow(location,LAbrw);
    switch (exportf) begin
      case 1: salesacc = LAbrw.EUSalesAcc;
      case 2: salesacc = LAbrw.ExpSalesAcc;
      case 3: salesacc = LAbrw.EUSalesAcc;
      case 4: salesacc = LAbrw.ExpSalesAcc;
      otherwise salesacc = LAbrw.SalesAcc;
    end;

    if (blank(salesacc)) then begin
      switch (exportf) begin
        case 1: salesacc = LocalINr.EUSalesAcc;
        case 2: salesacc = LocalINr.ExpSalesAcc;
        case 3: salesacc = LocalINr.EUSalesAcc;
        case 4: salesacc = LocalINr.ExpSalesAcc;
        otherwise salesacc = LocalINr.SalesAcc;
      end;
    end;
    if (exportf==AddPortugueseType+0) then begin
      salesacc = LocalINr.CredSalesAcc;
    end;  
    if (exportf==AddPortugueseType+1) then begin
      salesacc = LocalINr.CredEUSalesAcc;
    end;  
    if (exportf==AddPortugueseType+2) then begin
      salesacc = LocalINr.CredExpSalesAcc;
    end;  
    if (blank(salesacc)) then begin
      if (PDSAb.UsePDSalesAcc==1) then begin
        PDr.Code = paydeal;
        if (ReadFirstMain(PDr,1,true)) then begin end;
        salesacc = PDr.pdSalesAcc;
      end;
    end;
    vatcode = LocalINr.VATCode;
    if (exportf==1) then begin
      vatcode = LocalINr.VATCodeEU;
    end;
    if (exportf==2) then begin
      vatcode = LocalINr.VATCodeExp;
    end;      
    if (exportf==3) then begin
      vatcode = LocalINr.VATCodeEU;
    end;
    if (exportf==4) then begin
      vatcode = LocalINr.VATCodeExp;
    end;      
    if (exportf==AddPortugueseType+0) then begin
      vatcode = LocalINr.CredVATCode;
    end;      
    if (exportf==AddPortugueseType+1) then begin
      vatcode = LocalINr.CredVATCodeEU;
    end;      
    if (exportf==AddPortugueseType+2) then begin
      vatcode = LocalINr.CredVATCodeExp;
    end;      
    if ((nonblank(LocalINr.Group)) and ((blank(vatcode)) or (blank(salesacc)))) then begin
      LocalITr.Code = LocalINr.Group;
      if (ReadFirstMain(LocalITr,1,true)) then begin
        if (blank(vatcode)) then begin
          vatcode = LocalITr.VATCodeDom;
          if (exportf==1) then begin
            vatcode = LocalITr.VATCodeEU;
          end;
          if (exportf==2) then begin
            vatcode = LocalITr.VATCodeExp;
          end;      
          if (exportf==3) then begin
            vatcode = LocalITr.VATCodeEU;
          end;
          if (exportf==4) then begin
            vatcode = LocalITr.VATCodeExp;
          end;      
          if (exportf==AddPortugueseType+0) then begin
            vatcode = LocalITr.CredVATCodeDom;
          end;      
          if (exportf==AddPortugueseType+1) then begin
            vatcode = LocalITr.CredVATCodeEU;
          end;      
          if (exportf==AddPortugueseType+2) then begin
            vatcode = LocalITr.CredVATCodeExp;
          end;      
        end;        
        if (blank(salesacc)) then begin
          switch (exportf) begin
            case 1: salesacc = LocalITr.EUSalesAcc;
            case 2: salesacc = LocalITr.ExpSalesAcc;
            case 3: salesacc = LocalITr.EUSalesAcc;
            case 4: salesacc = LocalITr.ExpSalesAcc;
            otherwise salesacc = LocalITr.SalesAcc;
          end;
          if (exportf==AddPortugueseType+0) then begin
            salesacc = LocalITr.CredSalesAcc;
          end;          
          if (exportf==AddPortugueseType+1) then begin
            salesacc = LocalITr.CredEUSalesAcc;
          end;          
          if (exportf==AddPortugueseType+2) then begin
            salesacc = LocalITr.CredExpSalesAcc;
          end;          
        end;
      end;
    end;
    
    res = true;
    tprice = LocalINr.UPrice1;
    if (nonblank(custcode)) then begin
      if (nonblank(custcode)) then begin
        LocalPLr.PLCode = pricelist2;
        LocalPLr.ArtCode = theitemcode;
        LocalPLr.CustCode = custcode;
        plf = ReadFirstMain(LocalPLr,3,true);
        if ((plf==false) and varf) then begin
          LocalPLr.PLCode = pricelist2;
          LocalPLr.ArtCode = maskvar[0];
          LocalPLr.CustCode = custcode;
          plf = ReadFirstMain(LocalPLr,3,true);
        end;
        if (plf) then begin
          tprice = LocalPLr.ExVatPrice;
          if (nonblank(LocalPLr.SalesAcc)) then begin
            salesacc = LocalPLr.SalesAcc;
          end;
          if (LocalPLr.NoOtherPricing!=0) then begin
            nomorepricing = true;
          end;
          plvatcode = FindPLVATCode(PLDefr,LocalINr.Code,LocalINr.Group);
          
          if (nonblank(plvatcode)) then begin
            vatcode = plvatcode;
          end;
          goto L44GetItemPriceDiscountLocalItem;  
        end;
      end;
    end;    
    if (nonblank(pricelist2)) then begin
      if (GetYear(tdp)>0) then begin
        PLDefr.PLReplCode = pricelist2;
        PLDefr.StartDate = tdp;
        pldeffound = ReadLastKey("PLReplCode",PLDefr,2,false); 
        if (PLDefr.PLReplCode<>pricelist2) then begin pldeffound = false; end;
        if (DateInRange(tdp,PLDefr.StartDate,PLDefr.EndDate)==false) then begin pldeffound = false; end;
        if (pldeffound) then begin pricelist2 = PLDefr.Code; end;
      end;  
      if (pldeffound==false) then begin
        PLDefr.Code = pricelist2;
        pldeffound = ReadFirstMain(PLDefr,1,true);        
        if (pldeffound) then begin        
          if (nonblankdate(tdp)) then begin
            if (DateInRange(tdp,PLDefr.StartDate,PLDefr.EndDate)==false) then begin
              goto L44GetItemPriceDiscountLocalItem;
            end;
          end;
        end;    
      end;  
      if (pldeffound) then begin
        if (PLDefr.DepPrice==1) then begin qtydepf = true; end;
        plvatcode = FindPLVATCode(PLDefr,LocalINr.Code,LocalINr.Group);
        if (nonblank(plvatcode)) then begin
          vatcode = plvatcode;
        end;
      end;  
      switch (PLDefr.DepPrice) begin
        case 2:
          LocalPLr.PLCode = pricelist2;
          LocalPLr.ArtCode = theitemcode;        
          plf = ReadFirstMain(LocalPLr,2,true);
          if (plf==false) and (pricelist!=pricelist2) then begin
            LocalPLr.PLCode = pricelist;
            LocalPLr.ArtCode = theitemcode;        
            plf = ReadFirstMain(LocalPLr,2,true);
          end;
          if ((plf==false) and varf) then begin
            LocalPLr.PLCode = pricelist2;
            LocalPLr.ArtCode = maskvar[0];        
            plf = ReadFirstMain(LocalPLr,2,true);
          end;
          if (plf) then begin 
            if (nonblank(custcode)) then begin
              if (nonblank(LocalPLr.CustCode)) then begin
                if (LocalPLr.CustCode!=custcode) then begin
                  plf = false;
                end;
              end;
            end;
          end;
          if (plf) then begin 
            basepricep = LocalPLr.CostPrice;
            if (nonblank(LocalPLr.ExVatPrice)) then begin
              tprice = LocalPLr.ExVatPrice;
            end;
            if (nonblank(LocalPLr.SalesAcc)) then begin
              salesacc = LocalPLr.SalesAcc;
            end;            
            plvatcode = FindPLVATCode(PLDefr,LocalINr.Code,LocalINr.Group);
            if (nonblank(plvatcode)) then begin
              vatcode = plvatcode;
            end;
            if (LocalPLr.NoOtherPricing!=0) then begin
              nomorepricing = true;
            end;
          end else begin
            pldeffound = false;
          end;

        case 1:
          PLQr.PLCode = pricelist2;
          PLQr.ArtCode = theitemcode;
          plf = ReadFirstMain(PLQr,2,true);
          if ((plf==false) and varf) then begin
            PLQr.PLCode = pricelist2;
            PLQr.ArtCode = maskvar[0];
            plf = ReadFirstMain(PLQr,2,true);
          end;
          if (plf) then begin
            qtyplfound = true;
            FindPLQPriceLocalItem(PLQr,LocalINr,qtp,tprice);
            if (nonblank(PLQr.SalesAcc)) then begin
              salesacc = PLQr.SalesAcc;
            end;            
          end else begin
            pldeffound = false;
          end;
        case 0:
          LocalPLr.PLCode = pricelist2;
          LocalPLr.ArtCode = theitemcode;        
          plf = ReadFirstMain(LocalPLr,2,true);
          if (plf==false) and (pricelist!=pricelist2) then begin
            LocalPLr.PLCode = pricelist;
            LocalPLr.ArtCode = theitemcode;        
            plf = ReadFirstMain(LocalPLr,2,true);
          end;
          if ((plf==false) and varf) then begin
            LocalPLr.PLCode = pricelist2;
            LocalPLr.ArtCode = maskvar[0];        
            plf = ReadFirstMain(LocalPLr,2,true);
          end;
          if (plf) then begin 
            if (nonblank(custcode)) then begin
              if (nonblank(LocalPLr.CustCode)) then begin
                if (LocalPLr.CustCode!=custcode) then begin
                  plf = false;
                end;
              end;
            end;
          end;
          if (plf) then begin 
            tprice = LocalPLr.ExVatPrice;
            if (nonblank(LocalPLr.SalesAcc)) then begin
              salesacc = LocalPLr.SalesAcc;
            end;            
            plvatcode = FindPLVATCode(PLDefr,LocalINr.Code,LocalINr.Group);
            if (nonblank(plvatcode)) then begin
              vatcode = plvatcode;
            end;
            if (LocalPLr.NoOtherPricing!=0) then begin
              nomorepricing = true;
            end;
          end else begin
            pldeffound = false;
          end;
        end;
    end;
    if (pldeffound) then begin
       if (crncycode==PLDefr.CurncyCode) then begin goto L44GetItemPriceDiscountLocalItem; end;// do not touch price 
       if (nonblank(PLDefr.CurncyCode)) then begin
         if (blank(crncycode)) then begin           
           tprice = MulWithRateToBase1(PLDefr.CurncyCode,CurrentDate,tprice,DefaultCurRoundOff);
           goto L44GetItemPriceDiscountLocalItem;
         end else begin
           tprice = MulWithRateToBase1(PLDefr.CurncyCode,CurrentDate,tprice,DefaultCurRoundOff);
           if (frrate==0 and torate1==0 and torate2==0 and basrate1==0 and basrate2==0) then begin
             tprice = DivWithRateToBase1(crncycode,CurrentDate,tprice,DefaultCurRoundOff);
           end else begin
             tprice = DivRateToBase1(crncycode,tprice,frrate,torate1,torate2,basrate1,basrate2,DefaultCurRoundOff);
           end;
           goto L44GetItemPriceDiscountLocalItem;
         end;
       end;
    end;    

    if (frrate==0 and torate1==0 and torate2==0 and basrate1==0 and basrate2==0) then begin
      tprice = DivWithRateToBase1(crncycode,CurrentDate,tprice,DefaultCurRoundOff);
    end else begin
      tprice = DivRateToBase1(crncycode,tprice,frrate,torate1,torate2,basrate1,basrate2,DefaultCurRoundOff);
    end;

L44GetItemPriceDiscountLocalItem:;
    price = tprice;
    lang2 = langcode;
//    if (GetItemNameStr(1,descstr,lang2,LocalINr.Name,theitemcode)) then begin end;//J
    if (nomorepricing==false) then begin
//      rebfound = GetRebate(LocalINr,tprice,qtp,custcat,rebcode,tdisc,foundstaff,tdp);//J
      if (foundstaff) then begin
        discount = tdisc;
      end else begin
        if (discount==blankval) then begin
          discount = tdisc;
        end;        
      end;        
    end;    
    if (blank(vatcode)) then begin
      vatcode = ARb.VATCodeDom;
      if (exportf==1) then begin
        vatcode = ARb.VATCodeEU;
      end;
      if (exportf==2) then begin
        vatcode = ARb.VATCodeExp;
      end;
      if (exportf==3) then begin
        vatcode = ARb.VATCodeEU;
      end;
      if (exportf==4) then begin
        vatcode = ARb.VATCodeExp;
      end;
      if (exportf==AddPortugueseType+0) then begin
        vatcode = ARb.CredVATCodeDom;
      end;
      if (exportf==AddPortugueseType+1) then begin
        vatcode = ARb.CredVATCodeEU;
      end;
      if (exportf==AddPortugueseType+2) then begin
        vatcode = ARb.CredVATCodeExp;
      end;
    end;
    if (blank(salesacc)) then begin

      switch (exportf) begin
        case 1: salesacc = ARb.EUSalesAcc;
        case 2: salesacc = ARb.ExpSalesAcc;
        case 3: salesacc = ARb.EUSalesAcc;
        case 4: salesacc = ARb.ExpSalesAcc;
        otherwise salesacc = ARb.DomSalesAcc;
      end;
      if (exportf==AddPortugueseType+0) then begin
        salesacc = ARb.CredDomSalesAcc;
      end;
      if (exportf==AddPortugueseType+1) then begin
        salesacc = ARb.CredEUSalesAcc;
      end;
      if (exportf==AddPortugueseType+2) then begin
        salesacc = ARb.CredExpSalesAcc;
      end;
    end;
    if (PDSAb.UsePDSalesAcc==2) then begin
      PDr.Code = paydeal;
      if (ReadFirstMain(PDr,1,true)) then begin end;
      if (nonblank(PDr.pdSalesAcc)) then begin
        salesacc = PDr.pdSalesAcc;
      end;
    end;
    if ((blank(LocalINr.InPrice)) and (blank(LocalINr.ExtraCost))) then begin
      basepricep = blankval;
    end else begin
      if (blank(basepricep)) then begin
        basepricep = LocalINr.InPrice + LocalINr.ExtraCost;
      end;
    end;  
    if (LocalINr.ItemType==3) then begin
      comment = "";
      SetDefProjectUnit(LocalINr.Code,comment);
      if (nonblank(comment)) then begin
        LocalINr.Unittext = comment;
      end;
    end;
    if ((LocalINr.InPrice==blankval) and (LocalINr.ItemType==2) and (nonblank(LocalINr.Recepy))) then begin
      GetStructureCostPrice(LocalINr.Recepy,basepricep);
    end;        
  end else begin
    price = blankval;
    discount = blankval;
  end;    
  if (discount==0) then begin
    discount = blankval;
  end;
//  RegionPerceptionTax(custcode,region,LocalINr.EUCodex,LocalINr.Group,tax2code,tax2prc);//checkbox needed to say read regional taxes
  nomoreremotecalls = !calcpricef and !rebfound and !qtyplfound;
  GetItemPriceDiscountLocalItem = res;
  return;
end;

global
function string 255 GetHotelWIPAccount(record INVc INr)
begin
  string 255 res; 
  record ITVc ITr;
  record HotelBlock Hotelb;
  
  res = INr.HotelWIPAcc;
  if (blank(res)) then begin
    if (nonblank(INr.Group)) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        res = ITr.HotelWIPAcc;
      end;
    end;
  end;
  if (blank(res)) then begin
    BlockLoad(Hotelb);
    res = Hotelb.ResBridgeAcc;
  end;
  GetHotelWIPAccount = res;
  return;
end;

procedure AddToRvrsVATCodes(string rvrsvatcode,array string arvrsvatcodes)
begin
  Integer i;
  
  for (i=0;i<arvrsvatcodes.length;i=i+1) begin
    if (arvrsvatcodes[i]==rvrsvatcode) then begin
      goto LAddToRvrsVATCodes;
    end;
  end;
  arvrsvatcodes[arvrsvatcodes.length] = rvrsvatcode;
LAddToRvrsVATCodes:;  
  return;
end;

global
procedure IVPasteRvrsVATCode(var record IVVc aIVr,Boolean forcef)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,j,rwcnt;
  record INVc INr;
  record VATCodeBlock VATCb;
  row VATCodeBlock VATCbrw;
  array string 255 arvrsvatcodes;
  vector Boolean vrvrsvatcodesf;
  vector val vrvrsvatcodesv;
  record SMVc VATr;
  record SMVc SMTax2r;
  record SMVc RvrsVATr;
  row SMVc RvrsVATrw;
  Integer vatcnt;
  Boolean testf;
  val s0,s1,s2,s3,s4,rvrsvat,TotGP,t;
  string 255 cashpaymode;
  record CUVc CUr;
  
  CUr.Code = aIVr.CustCode;
  ReadFirstMain(CUr,1,true);
  if (CUr.RvrsVAT==0 or CUr.CustType==1 or forcef) and (aIVr.InclVAT==0) then begin
    RecordCopy(IVr,aIVr);
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal or IVrw.stp==kInvoiceRowTypeCorrection) then begin
        if (nonblank(IVrw.ArtCode)) then begin
          if (CUr.CustType==1) then begin
            IVrw.RvrsVATCode = "";
            MatRowPut(IVr,i,IVrw);
          end else begin
            testf = GetFirstItem(IVrw.ArtCode,INr);
            if (testf==false) then begin
              testf = ReadFirstItem(IVrw.ArtCode,INr,true,false);
            end;
            if (nonblank(INr.RvrsVATCode)) then begin
              IVrw.RvrsVATCode = INr.RvrsVATCode;
              MatRowPut(IVr,i,IVrw);
              AddToRvrsVATCodes(IVrw.RvrsVATCode,arvrsvatcodes);
            end;
          end;
        end;
      end;
    end;
    if (arvrsvatcodes.length>0) then begin
      if (CUr.RvrsVAT!=0) then begin
        RecordCopy(aIVr,IVr);
      end else begin
        BlockLoad(VATCb);
        SetupVATBase(VATr,vatcnt);
        SetupVATBase(RvrsVATr,vatcnt);
        IV2Sumup3(IVr,VATr,vatcnt,SMTax2r,RvrsVATr,true,testf,0,s0,s1,s2,s3,s4,TotGP,cashpaymode);
        for (i=0;i<arvrsvatcodes.length;i=i+1) begin
          for (j=0;j<vatcnt;j=j+1) begin
            MatRowGet(RvrsVATr,j,RvrsVATrw);
            if (arvrsvatcodes[i]==RvrsVATrw.VATCode) then begin
              vrvrsvatcodesv[arvrsvatcodes[i]] = RvrsVATrw.DebVal;
            end;
          end;
        end;
        for (i=0;i<arvrsvatcodes.length;i=i+1) begin
          testf = true;
          GetVATRowFromBlock(arvrsvatcodes[i],VATCb,VATCbrw);
          if (VATCbrw.MinBaseAmount>0) then begin
            if (vrvrsvatcodesv[arvrsvatcodes[i]]<=VATCbrw.MinBaseAmount) then begin testf = false; end;
          end;
          if (VATCbrw.MaxBaseAmount>0) then begin
            if (vrvrsvatcodesv[arvrsvatcodes[i]]>VATCbrw.MaxBaseAmount) then begin testf = false; end;
          end;
          vrvrsvatcodesf[arvrsvatcodes[i]] = testf;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (vrvrsvatcodesf[IVrw.RvrsVATCode]==false) then begin
            IVrw.RvrsVATCode = "";
            MatRowPut(IVr,i,IVrw);
          end;
        end;
        RecordCopy(aIVr,IVr);        
      end;
    end;
  end;
  
  return;
end;

global
procedure ORPasteRvrsVATCode(var record ORVc aORr,Boolean forcef)
begin
  record ORVc ORr;
  row ORVc ORrw;
  Integer i,j,rwcnt;
  record INVc INr;
  record VATCodeBlock VATCb;
  row VATCodeBlock VATCbrw;
  array string 255 arvrsvatcodes;
  vector Boolean vrvrsvatcodesf;
  vector val vrvrsvatcodesv;
  record SMVc VATr;
  record SMVc SMTax2r;
  record SMVc RvrsVATr;
  row SMVc RvrsVATrw;
  Integer vatcnt;
  Boolean testf;
  val s0,s1,s2,s3,s4,rvrsvat,TotGP,t,tax1reb;
  string 255 cashpaymode;
  record CUVc CUr;
  
  CUr.Code = aORr.CustCode;
  ReadFirstMain(CUr,1,true);
  if (CUr.RvrsVAT==0 or CUr.CustType==1 or forcef) and (aORr.InclVAT==0) then begin
    RecordCopy(ORr,aORr);
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ORrw.stp!=kInvoiceRowTypeSubtotal) and (ORrw.stp!=kInvoiceRowTypePerceptionTax) then begin
        if (nonblank(ORrw.ArtCode)) then begin
          if (CUr.CustType==1) then begin
            ORrw.RvrsVATCode = "";
            MatRowPut(ORr,i,ORrw);
          end else begin
            testf = GetFirstItem(ORrw.ArtCode,INr);
            if (testf==false) then begin
              testf = ReadFirstItem(ORrw.ArtCode,INr,true,false);
            end;
            if (nonblank(INr.RvrsVATCode)) then begin
              ORrw.RvrsVATCode = INr.RvrsVATCode;
              MatRowPut(ORr,i,ORrw);
              AddToRvrsVATCodes(ORrw.RvrsVATCode,arvrsvatcodes);
            end;
          end;
        end;
      end;
    end;
    if (arvrsvatcodes.length>0) then begin
      if (CUr.RvrsVAT!=0) then begin
        RecordCopy(aORr,ORr);
      end else begin
        BlockLoad(VATCb);
        SetupVATBase(VATr,vatcnt);
        SetupVATBase(RvrsVATr,vatcnt);
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (ORrw.stp!=kInvoiceRowTypeSubtotal) and (ORrw.stp!=kInvoiceRowTypePerceptionTax) then begin
            if (nonblank(ORrw.RvrsVATCode)) then begin
              AddVATBase(RvrsVATr,ORrw.RvrsVATCode,ORrw.Sum,tax1reb,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);
            end;
          end;
        end;
        for (i=0;i<arvrsvatcodes.length;i=i+1) begin
          for (j=0;j<vatcnt;j=j+1) begin
            MatRowGet(RvrsVATr,j,RvrsVATrw);
            if (arvrsvatcodes[i]==RvrsVATrw.VATCode) then begin
              vrvrsvatcodesv[arvrsvatcodes[i]] = RvrsVATrw.DebVal;
            end;
          end;
        end;
        for (i=0;i<arvrsvatcodes.length;i=i+1) begin
          testf = true;
          GetVATRowFromBlock(arvrsvatcodes[i],VATCb,VATCbrw);
          if (VATCbrw.MinBaseAmount>0) then begin
            if (vrvrsvatcodesv[arvrsvatcodes[i]]<=VATCbrw.MinBaseAmount) then begin testf = false; end;
          end;
          if (VATCbrw.MaxBaseAmount>0) then begin
            if (vrvrsvatcodesv[arvrsvatcodes[i]]>VATCbrw.MaxBaseAmount) then begin testf = false; end;
          end;
          vrvrsvatcodesf[arvrsvatcodes[i]] = testf;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ORr,i,ORrw);
          if (vrvrsvatcodesf[ORrw.RvrsVATCode]==false) then begin
            ORrw.RvrsVATCode = "";
            MatRowPut(ORr,i,ORrw);
          end;
        end;
        RecordCopy(aORr,ORr);        
      end;
    end;
  end;
  
  return;
end;

global
procedure QTPasteRvrsVATCode(var record QTVc aQTr,Boolean forcef)
begin
  record QTVc QTr;
  row QTVc QTrw;
  Integer i,j,rwcnt;
  record INVc INr;
  record VATCodeBlock VATCb;
  row VATCodeBlock VATCbrw;
  array string 255 arvrsvatcodes;
  vector Boolean vrvrsvatcodesf;
  vector val vrvrsvatcodesv;
  record SMVc VATr;
  record SMVc SMTax2r;
  record SMVc RvrsVATr;
  row SMVc RvrsVATrw;
  Integer vatcnt;
  Boolean testf;
  val s0,s1,s2,s3,s4,rvrsvat,TotGP,t,tax1reb;
  string 255 cashpaymode;
  record CUVc CUr;
  
  CUr.Code = aQTr.CustCode;
  ReadFirstMain(CUr,1,true);
  if (CUr.RvrsVAT==0 or CUr.CustType==1 or forcef) and (aQTr.InclVAT==0) then begin
    RecordCopy(QTr,aQTr);
    rwcnt = MatRowCnt(QTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QTrw);
      if (QTrw.stp!=kInvoiceRowTypeSubtotal) and (QTrw.stp!=kInvoiceRowTypePerceptionTax) then begin
        if (nonblank(QTrw.ArtCode)) then begin
          if (CUr.CustType==1) then begin
            QTrw.RvrsVATCode = "";
            MatRowPut(QTr,i,QTrw);
          end else begin
            testf = GetFirstItem(QTrw.ArtCode,INr);
            if (testf==false) then begin
              testf = ReadFirstItem(QTrw.ArtCode,INr,true,false);
            end;
            if (nonblank(INr.RvrsVATCode)) then begin
              QTrw.RvrsVATCode = INr.RvrsVATCode;
              MatRowPut(QTr,i,QTrw);
              AddToRvrsVATCodes(QTrw.RvrsVATCode,arvrsvatcodes);
            end;
          end;
        end;
      end;
    end;
    if (arvrsvatcodes.length>0) then begin
      if (CUr.RvrsVAT!=0) then begin
        RecordCopy(aQTr,QTr);
      end else begin
        BlockLoad(VATCb);
        SetupVATBase(VATr,vatcnt);
        SetupVATBase(RvrsVATr,vatcnt);
        rwcnt = MatRowCnt(QTr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(QTr,i,QTrw);
          if (QTrw.stp!=kInvoiceRowTypeSubtotal) and (QTrw.stp!=kInvoiceRowTypePerceptionTax) then begin
            if (nonblank(QTrw.RvrsVATCode)) then begin
              AddVATBase(RvrsVATr,QTrw.RvrsVATCode,QTrw.Sum,tax1reb,vatcnt,QTr.InclVAT,QTr.NoTAXonVAT);
            end;
          end;
        end;
        for (i=0;i<arvrsvatcodes.length;i=i+1) begin
          for (j=0;j<vatcnt;j=j+1) begin
            MatRowGet(RvrsVATr,j,RvrsVATrw);
            if (arvrsvatcodes[i]==RvrsVATrw.VATCode) then begin
              vrvrsvatcodesv[arvrsvatcodes[i]] = RvrsVATrw.DebVal;
            end;
          end;
        end;
        for (i=0;i<arvrsvatcodes.length;i=i+1) begin
          testf = true;
          GetVATRowFromBlock(arvrsvatcodes[i],VATCb,VATCbrw);
          if (VATCbrw.MinBaseAmount>0) then begin
            if (vrvrsvatcodesv[arvrsvatcodes[i]]<=VATCbrw.MinBaseAmount) then begin testf = false; end;
          end;
          if (VATCbrw.MaxBaseAmount>0) then begin
            if (vrvrsvatcodesv[arvrsvatcodes[i]]>VATCbrw.MaxBaseAmount) then begin testf = false; end;
          end;
          vrvrsvatcodesf[arvrsvatcodes[i]] = testf;
        end;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(QTr,i,QTrw);
          if (vrvrsvatcodesf[QTrw.RvrsVATCode]==false) then begin
            QTrw.RvrsVATCode = "";
            MatRowPut(QTr,i,QTrw);
          end;
        end;
        RecordCopy(aQTr,QTr);        
      end;
    end;
  end;
  
  return;
end;



function Boolean TestPromotionFilters(record PromotionVc Promr,Date d,record CUVc CUr,array record INVc aINr)
begin
  Boolean testf;
  record INVc INr;
  row PromotionVc Promrw;
  Integer a,i,rwcnt;
  string 255 fr,to;

  testf = true;
  if (nonblankdate(Promr.StartDate)) then begin
    if (d<Promr.StartDate) then begin testf = false; end;
  end;
  if (nonblankdate(Promr.EndDate)) then begin
    if (d>Promr.EndDate) then begin testf = false; end;
  end;
  if (testf) then begin
//test schedule  
  end;
  if (testf) then begin
    rwcnt = MatRowCnt(Promr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Promr,i,Promrw);
      switch (Promrw.RowType) begin
        case kPromotionRowTypeFilter:
          switch (Promrw.Type) begin
            case kPromotionFilterCustomer:
              if (nonblank(Promrw.Condition)) then begin
                fr = FirstInRange(Promrw.Condition,20);
                to = LastInRange(Promrw.Condition,20);
                if (CUr.Code<fr or CUr.Code>to) then begin 
                  testf = false; 
                  i = rwcnt;
                end;
              end;
            case kPromotionFilterCustomerCategory:
              if (nonblank(Promrw.Condition)) then begin
                fr = FirstInRange(Promrw.Condition,20);
                to = LastInRange(Promrw.Condition,20);
                if (CUr.CustCat<fr or CUr.CustCat>to) then begin 
                  testf = false; 
                  i = rwcnt;
                end;
              end;
            case kPromotionFilterCustomerClassification:
              if (nonblank(Promrw.Condition)) then begin
                if (SetInSet(Promrw.Condition,CUr.Classification)==false) then begin 
                  testf = false; 
                  i = rwcnt;
                end;
              end;
            case kPromotionFilterItem:
              if (nonblank(Promrw.Condition)) then begin
                testf = false; 
                fr = FirstInRange(Promrw.Condition,20);
                to = LastInRange(Promrw.Condition,20);
                for (a=0;a<aINr.length;a=a+1) begin
                  RecordCopy(INr,aINr[a]);
                  if (INr.Code>=fr and INr.Code<=to) then begin 
                    testf = true; 
                    a = aINr.length;
                    i = rwcnt;
                  end;
                end;
              end;
            case kPromotionFilterItemGroup:
              if (nonblank(Promrw.Condition)) then begin
                testf = false; 
                fr = FirstInRange(Promrw.Condition,20);
                to = LastInRange(Promrw.Condition,20);
                for (a=0;a<aINr.length;a=a+1) begin
                  if (INr.Group>=fr and INr.Group<=to) then begin 
                    testf = true; 
                    a = aINr.length;
                    i = rwcnt;
                  end;
                end;
              end;
            case kPromotionFilterItemClassification:
              if (nonblank(Promrw.Condition)) then begin
                testf = false; 
                for (a=0;a<aINr.length;a=a+1) begin
                  if (SetInSet(Promrw.Condition,INr.DispGroups)) then begin 
                    testf = true; 
                    a = aINr.length;
                    i = rwcnt;
                  end;
                end;
              end;
          end;
      end;
    end;
  end; 
  TestPromotionFilters = testf;
  return;
end;

procedure IVApplyPromotionConditions(record PromotionVc Promr,record IVVc IVr,row IVVc IVrw)
begin
  row PromotionVc Promrw;
  Integer i,rwcnt;

  IVrw.vRebate = blankval;
  rwcnt = MatRowCnt(Promr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Promr,i,Promrw);
    switch (Promrw.RowType) begin
      case kPromotionRowTypeCondition:
        switch (Promrw.Type) begin
          case kPromotionConditionAmount:
            if (IVrw.Sum>EvalToVal(Promrw.Condition)) then begin
              IVrw.vRebate = IVrw.vRebate + Promrw.vRebate;
            end;
          case kPromotionConditionNumberOfItems:
            IVrw.vRebate = IVrw.vRebate + Promrw.vRebate;
          case kPromotionConditionNumberOfINvoices:
            IVrw.vRebate = IVrw.vRebate + Promrw.vRebate;
        end;
    end;
  end;        
  return;
end;

global
procedure IVApplyPromotions(record IVVc IVr)
begin
  row IVVc IVrw;
  Integer a,i,rwcnt;
  record CUVc CUr;
  Boolean found,testf;
  record INVc INr;
  array record INVc aINr;
  record PromotionVc Promr;
  array record PromotionVc aPromr;
  
  if (CountRecords("PromotionVc")>0) then begin
    CUr.Code = IVr.CustCode;
    ReadFirstMain(CUr,1,true);
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      testf = true;
      switch (IVrw.stp) begin
        case kInvoiceRowTypeNormal: 
        case kInvoiceRowTypeCorrection: 
        otherwise testf = false;
      end;
      if (blank(IVrw.ArtCode)) then begin testf = false; end;
      if (testf) then begin
        if (ReadFirstItem(IVrw.ArtCode,INr,true,false)) then begin
          aINr[aINr.length] = INr; 
        end;
      end;      
    end;
    
    found = true;
    while (LoopKey("ActCode",Promr,1,found)) begin
      if (found) then begin
        testf = TestPromotionFilters(Promr,IVr.InvDate,CUr,aINr);
        if (testf) then begin
          aPromr[aPromr.length] = Promr; 
        end;
      end;
    end;
    if (aPromr.length>0) then begin
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,IVrw);
        testf = true;
        switch (IVrw.stp) begin
          case kInvoiceRowTypeNormal: 
          case kInvoiceRowTypeCorrection: 
          otherwise testf = false;
        end;
        if (blank(IVrw.ArtCode)) then begin testf = false; end;
        if (testf) then begin
          for (a=0;a<aPromr.length;a=a+1) begin          
            RecordCopy(Promr,aPromr[a]); 
            IVApplyPromotionConditions(Promr,IVr,IVrw);
          end;
          MatRowPut(IVr,i,IVrw);
          if (IVDchrsum(IVr,i)) then begin
            IVDchsum(IVr,i);
          end;  
        end;
      end;
    end;
    IVSumup(IVr,true);    
  end;
  return;
end;
