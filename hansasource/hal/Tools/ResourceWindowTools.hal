external function roundmode SetRoundModeD(Integer);
external function string 60 AddObjectToObjectList(string,string);
external function LongInt FillResourceMonth_RsrtEvents(record RcVc,string,string,string,string,Date,LongInt,Integer,var LongInt,Area,var LongInt,var LongInt);
external procedure ResourcePlanner_Resort(string,LongInt,var LongInt,Area);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function LongInt Do_ProdOpersInDay(string,string,Date,LongInt,Integer,Area,var LongInt,var LongInt);
external procedure Do_FindPersonsInAssetsActivities(string,string,Date,LongInt,Integer,var Array string,var Integer,var LongInt,var LongInt);
external function LongInt Do_ActsInDay_Assests(string,string,string,Date,LongInt,Integer,Integer,var Area,string,var LongInt,var LongInt);
external function Boolean FindTheUser(var record UserVc);
external function Boolean GetGlobalUserMainCompany(string,var string);
external function Boolean DateTimeInsideDateTime(Date,Time,Date,Time,Date,Time,Date,Time);
external function LongInt Do_RentINInDay1(string,string,Date,LongInt,Integer,Area,var LongInt,var LongInt);
external function LongInt Do_ProdOrdersInDay(string,string,Date,LongInt,Integer,Area,var LongInt,var LongInt);
external function LongInt Do_ActsInDay3(string,string,string,Date,LongInt,Area,Integer,Integer,string,var LongInt,var LongInt);
external function LongInt Do_ProjectInDay(string,Date,LongInt,Integer,Area,string,Integer,Integer,string,var LongInt,var LongInt);
external function LongInt Do_ProjectInDay2(string,Date,LongInt,Integer,Area,string,Integer,Integer,string,var LongInt,var LongInt,Boolean);
external function Boolean SkipResTest(record ReservationStatusVc,Boolean);
external function Boolean CntResourceExist(string,Date,LongInt,Array LongInt,var LongInt,var LongInt);
external function LongInt Do_ReservationsInDayRa(string,string,string,Date,LongInt,Array LongInt,Array LongInt,Time,Time,var LongInt,var LongInt);
external procedure ExtractObj(string,var Integer,var string);
external procedure FindCalDispGroup(var string);
external function LongInt DateDiff(Date,Date);
external function LongInt ResLen(Date,Date,Time,LongInt,LongInt,Integer);
external procedure CalcResMonDays(Integer,LongInt,Date,Area);
//external function Boolean TestInsideReservation(Date,Time,record JobVc);
//external function Boolean DateRangeInsideRes(Date,Date,record JobVc);
external procedure SetupDayMatrix(var Array LongInt,var Array LongInt,Date,LongInt,string,string,Time,Time,var LongInt,var LongInt);

global
procedure LogReadsAndUsed(string comment,var LongInt readrecs,var LongInt usedrecs)
begin
  string 255 tstr;
  
  M4PadString(comment,20," ",false,tstr);
  tstr = tstr & " Records Reads = " & readrecs;
  M4PadString(tstr,50," ",false,tstr);
  tstr = tstr & " Records Used = " & usedrecs;
//  LogText(0,tstr); // only useful when improving it
  return;
end;

function Boolean Do_RTInDay2(string restype,string reslocation,string resclass,Date dp,LongInt maxdays,Integer dmode,Area adhp,Time chkin,Time chkout,var LongInt readrecs,var LongInt usedrec)
begin
  Boolean res;
  LongInt adractsernr;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc, 4 - PRVc, 5 - ProdOperationVc, 6 - RsrtEventVc
  LongInt adrStartPos;
  LongInt adractlen;
  LongInt adrcolnr;
  LongInt adcnt;
  LongInt adoff;
  LongInt i;
  Array LongInt ra;
  Array LongInt ra2;
  LongInt m,dummy;
  LongInt compno;
  Boolean showzerorestypef;
  
  adcnt = 0;
  compno = CurrentCompany;
  adoff = GetAreaLength(adhp);

  for (i=0;i<maxdays;i=i+1) begin
    ra[i] = 0;
    ra2[i] = 0;
  end;  
  dummy = Do_ReservationsInDayRa(restype,reslocation,resclass,dp,maxdays,ra,ra2,chkin,chkout,readrecs,usedrec);  
  showzerorestypef = true;
  if (dmode==0) then begin
  if (nonblank(reslocation)) or (nonblank(resclass)) then begin
    showzerorestypef = false;
    for (i=0;i<maxdays;i=i+1) begin
      switch (dmode) begin
        case 0: 
          m = ra2[i] + ra[i];
          if (m!=0) then begin
            showzerorestypef = true;
            i = maxdays;
          end;
        case 1:
          if (ra2[i]!=0) then begin
            m = (-ra[i])*100 / ra2[i];
          end else begin
            m = 0;
          end;
      end;
    end;
  end;
  end;
  if (showzerorestypef) then begin
    res = true;
    AddLongToArea(adcnt,adhp); 
    AddLongToArea(kResourceTypeResource,adhp);  //0, resource
    AddStringToArea(restype,adhp);    
    
    for (i=0;i<maxdays;i=i+1) begin
      if (dmode==0) then begin
        m = ra2[i] + ra[i];
        adrcolnr = 0;
        adrStartPos = m;
        if (m<0) then begin
          adrcolnr = 1;
          adrStartPos = -m;
        end;
      end;
      if (dmode==1) then begin
        if (ra2[i]!=0) then begin
          m = (-ra[i])*100 / ra2[i];
        end else begin
          m = 0;
        end;
        adrcolnr = 0;
        adrvcnr = kResourceJobVc;
        adrStartPos = m;
        if (m>100) then begin
          adrcolnr = 1;
          adrStartPos = m-100;
        end;
      end;
      adractsernr = 0;
      adractlen = 0;
      AddLongToArea(adractsernr,adhp);
      AddLongToArea(adrvcnr,adhp);
      AddLongToArea(adrStartPos,adhp);
      AddLongToArea(adractlen,adhp);
      AddLongToArea(adrcolnr,adhp);    
      AddLongToArea(compno,adhp);
      AddStringToArea("",adhp);
      adcnt = adcnt + 1;
    end;
    PutLongInArea(adcnt,adhp,adoff);
  end;
  Do_RTInDay2 = res; 
  return;
end;

procedure Do_RentINInDay2(string restype,string location,Date dp,LongInt maxdays,Integer dmode,Area adhp,Time chkin,Time chkout,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  LongInt adractsernr;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc, 4 - PRVc, 5 - ProdOperationVc
  LongInt adrStartPos;
  LongInt adractlen;
  LongInt adrcolnr;
  LongInt adcnt;
  LongInt adoff;
  LongInt i;
  Array LongInt ra;
  Array LongInt ra2;
  LongInt m;
  LongInt compno;
  
  compno = CurrentCompany;
  adcnt = 0;
  adoff = GetAreaLength(adhp);
  AddLongToArea(adcnt,adhp);  
  AddLongToArea(kResourceTypeResType,adhp);  //6, res type
  AddStringToArea(restype,adhp);
  SetupDayMatrix(ra,ra2,dp,maxdays,restype,location,chkin,chkout,readrecs,usedrecs);
  for (i=0;i<maxdays;i=i+1) begin
    if (dmode==0) then begin
      m = ra2[i] + ra[i];
      adrcolnr = 0;
      adrStartPos = m;
      if (m<0) then begin
        adrcolnr = 1;
        adrStartPos = -m;
      end;
    end;
    if (dmode==1) then begin
      if (ra2[i]!=0) then begin//crash bug
        m = (-ra[i])*100 / ra2[i];
      end else begin
        m = 0;
      end;
      adrcolnr = 0;
      adrvcnr = kResourceJobVc;
      adrStartPos = m;
      if (m>100) then begin
        adrcolnr = 1;
        adrStartPos = m-100;
      end;
    end;
    adractsernr = 0;
    adractlen = 0;
    AddLongToArea(adractsernr,adhp);
    AddLongToArea(adrvcnr,adhp);
    AddLongToArea(adrStartPos,adhp);
    AddLongToArea(adractlen,adhp);
    AddLongToArea(adrcolnr,adhp);    
    AddLongToArea(compno,adhp);
    AddStringToArea("",adhp);
    adcnt = adcnt + 1;
  end;  
  PutLongInArea(adcnt,adhp,adoff);
  RETURN;
END;

procedure Do_DispGroup(var LongInt uscntp,Area adhp)
BEGIN
  record CalDispGroupBlock CalDispGroupRec;
  row CalDispGroupBlock CalDispGrouprw;
  Integer i,rwcnt;
  LongInt adcnt;
  
  adcnt = 0;
  BlockLoad(CalDispGroupRec);
  rwcnt = MatRowCnt(CalDispGroupRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CalDispGroupRec,i,CalDispGrouprw);
    AddLongToArea(adcnt,adhp);  
    AddLongToArea(kResourceTypeDispGroup,adhp);  //1,disp group
    AddStringToArea(CalDispGrouprw.Code,adhp);  
    uscntp = uscntp + 1;
  end;
  RETURN;
END;

procedure Do_AT2DispGroup(string uscode,var LongInt uscntp,Area adhp)
begin
  record AT2DispGroupBlock AT2DGb;
  row AT2DispGroupBlock AT2DGbrw;
  Integer i,rwcnt;
  LongInt adcnt;
  Boolean testf;
  
  adcnt = 0;
  BlockLoad(AT2DGb);
  rwcnt = MatRowCnt(AT2DGb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AT2DGb,i,AT2DGbrw);
    testf = true;
    if (nonblank(uscode)) then begin
      if (AT2DGbrw.Code!=uscode) then begin testf = false; end;
    end;
    if (testf) then begin
      AddLongToArea(adcnt,adhp);  
      AddLongToArea(kResourceTypeAssetDisp,adhp);  //9, at2 disp group
      AddStringToArea(AT2DGbrw.Code,adhp);  
      uscntp = uscntp + 1;
    end;
  end;
  RETURN;
END;

procedure Do_MachineGroups(string uscode,var LongInt uscntp,Area adhp,Integer typ)
BEGIN
  record MachineGroupsBlock MGb;
  row MachineGroupsBlock MGbrw;
  Integer i,rwcnt;
  LongInt adcnt;
  Boolean testf;

  adcnt = 0;
  BlockLoad(MGb);
  rwcnt = MatRowCnt(MGb);
  for (i=0;i<rwcnt;i=i+1) begin
    testf = true;
    MatRowGet(MGb,i,MGbrw);
    if (nonblank(uscode)) then begin
      if (MGbrw.Code!=uscode) then begin testf = false; end;
    end;
    if (testf) then begin
      AddLongToArea(adcnt,adhp);  
      AddLongToArea(typ,adhp);  //2,machine group
      AddStringToArea(MGbrw.Code,adhp);  
      uscntp = uscntp + 1;
    end;
  end;
  RETURN;
END;

procedure Do_Projects(string uscode,var LongInt uscntp,Area adhp)
begin
  record PRVc PRr;
  Integer i,rwcnt;
  LongInt adcnt;
  Boolean TrHs,testf;
  
  adcnt = 0;
  TrHs = true;  
  PRr.Terminated = 0;  
  while (LoopKey("Active",PRr,1,TrHs)) begin
    if (PRr.Terminated!=0) then begin TrHs = false; end;
    testf = true;
    if (nonblank(uscode)) then begin
      if (PRr.Code!=uscode) then begin testf = false; end;
    end;
    if (TrHs and testf) then begin
      AddLongToArea(adcnt,adhp);
      AddLongToArea(kResourceTypeProject,adhp);  //3,project
      AddStringToArea(PRr.Code,adhp);  
      uscntp = uscntp + 1;
    end;
  end;
  RecordNew(PRr);
  ResetLoop(PRr);
  TrHs = true;  
  PRr.Terminated = 2;  
  while (LoopKey("Active",PRr,1,TrHs)) begin
    if (PRr.Terminated!=2) then begin TrHs = false; end;
    testf = true;
    if (nonblank(uscode)) then begin
      if (PRr.Code!=uscode) then begin testf = false; end;
    end;
    if (TrHs and testf) then begin
      AddLongToArea(adcnt,adhp);
      AddLongToArea(kResourceTypeProject,adhp);  //3, project
      AddStringToArea(PRr.Code,adhp);  
      uscntp = uscntp + 1;
    end;
  end;
  AddLongToArea(adcnt,adhp);
  AddLongToArea(kResourceTypeProject,adhp);  //3, project
  AddStringToArea(USetStr(34440),adhp);  
  uscntp = uscntp + 1;
  
  return;
end;

procedure Do_RentalGroup(string dicode,string location,var LongInt uscntp,Date dp,LongInt maxdays,Integer dmode,Area adhp,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  record DIVc DIr;
  record INVc INr;
  record RentINVc RentINr;
  record RentControlBlock Rentr;
  LongInt adcnt;
  Boolean found,founddi;
  string 255 ckey;
  Time endofday,startofday;

  adcnt = 0;
  BlockLoad(Rentr);
  endofday = Rentr.NormalIn;
//  if (nonblanktime(Rentr.EndOfDay)) then begin
//    endofday = Rentr.EndOfDay;
//  end;
  startofday = Rentr.NormalOut;
//  if (nonblanktime(Rentr.StartNewDay)) then begin
//    startofday = Rentr.StartNewDay;
//  end;
  if (nonblank(Rentr.DispGroup)) then begin
    found = true;
    founddi = false;
    ckey = "DICode:";
    if (blank(dicode)) then begin
      ckey = ckey & Rentr.DispGroup;
    end else begin
      ckey = ckey & dicode;
    end;
    while (LoopKey(ckey,DIr,1,found)) begin
      AddLongToArea(adcnt,adhp);  
      AddLongToArea(kResourceTypeItemClass,adhp);  //5,Item Classification
      AddStringToArea(DIr.Code,adhp);  
      founddi = true;
      uscntp = uscntp + 1;
    end;
    if (founddi==false) then begin
      found = true;
      while (LoopKey(ckey,INr,1,found)) begin
        founddi = true;
        RentINr.Code = INr.Code;
        RentINr.SerialNr = "";
        if (ReadFirstMain(RentINr,2,true)) then begin
          Do_RentINInDay2(INr.Code,location,dp,maxdays,dmode,adhp,startofday,endofday,readrecs,usedrecs);
        end else begin
          AddLongToArea(adcnt,adhp);
          AddLongToArea(kResourceTypeItem,adhp);  //4.item
          AddStringToArea(INr.Code,adhp);
        end;
        uscntp = uscntp + 1;
      end;
    end;
    if (founddi==false) then begin
      RentINr.Code = dicode;
      RentINr.SerialNr = "";
      if (ReadFirstMain(RentINr,2,true)) then begin
        Do_RentINInDay2(RentINr.Code,location,dp,maxdays,dmode,adhp,startofday,endofday,readrecs,usedrecs);
        uscntp = uscntp + 1;
      end;
    end;
  end;
  RETURN;
END;

function LongInt Do_Activities_Assets(string asset,string acttype,Date startdate,LongInt maxdays,Integer dmode,Area adhp,string curuser,var LongInt readrecs,var LongInt usedrecs)
begin
  LongInt res;
  Array string 255 apersons;
  Integer i,acnt;
  LongInt adoff,actcnt;
  
  res = 0;
  actcnt = 0;
  Do_FindPersonsInAssetsActivities(asset,acttype,startdate,maxdays,1,apersons,acnt,readrecs,usedrecs);
  res = acnt;
  for (i=0;i<acnt;i=i+1) begin
    adoff = GetAreaLength(adhp);
    AddLongToArea(actcnt,adhp);  
    AddLongToArea(kResourceMonthUser,adhp);  //7, user
    AddStringToArea(apersons[i],adhp);       
    actcnt = Do_ActsInDay_Assests(asset,acttype,apersons[i],startdate,maxdays,dmode,1,adhp,curuser,readrecs,usedrecs);
    PutLongInArea(actcnt,adhp,adoff);    
  end;
  Do_Activities_Assets = res;
  return;
end;

function LongInt Do_Assets_In_Disp_Group(string assetgroup,string acttype,Date startdate,LongInt maxdays,Integer dmode,Area adhp,string curuser,var LongInt readrecs,var LongInt usedrecs)
begin
  LongInt res;
  record AT2DispGroupBlock AT2DGb;
  row AT2DispGroupBlock AT2DGbrw;
  Integer i,rwcnt;
  LongInt actcnt,adoff;
  Integer pos;
  string 255 asset;
  
  res = 0;
  BlockLoad(AT2DGb);
  rwcnt = MatRowCnt(AT2DGb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AT2DGb,i,AT2DGbrw);
    if (AT2DGbrw.Code==assetgroup) then begin
      pos = 0;
      ExtractObj(AT2DGbrw.DefStr,pos,asset);
      while (nonblank(asset)) begin
        adoff = GetAreaLength(adhp);
        AddLongToArea(actcnt,adhp);  
        AddLongToArea(kResourceMonthAsset,adhp);  //10, assets
        AddStringToArea(asset,adhp);       
        actcnt = Do_ActsInDay_Assests(asset,acttype,"",startdate,maxdays,dmode,1,adhp,curuser,readrecs,usedrecs);
        PutLongInArea(actcnt,adhp,adoff);    
        res = res + 1;
        ExtractObj(AT2DGbrw.DefStr,pos,asset);
      end;
      goto LDo_Assets_In_Disp_Group;
    end;
  end;
LDo_Assets_In_Disp_Group:;  
  Do_Assets_In_Disp_Group = res;
  return;
end;

global
procedure FillResourceType(record RcVc RepSpec,string uscode,string location,string item,string asset,Date dp,LongInt maxdays,Integer dmode,
                           LongInt type,var Area adhp,var Area ddhp)
BEGIN
  record ResTypeVc ResTyper;
  Boolean TrHs;
  Boolean testf;
  LongInt tv;
  LongInt uscnt;
  record HotelBlock Hotelb;
  Time endofday,startofday;
  Integer acclevel;
  record ResPlanBlock RPb;
  LongInt readrecs;
  LongInt usedrecs;

  readrecs = 0;
  usedrecs = 0;
  BlockLoad(RPb);  
  uscnt = 0;
  CalcResMonDays(0,maxdays,dp,ddhp);  
  AddLongToArea(tv,adhp);
  switch (type) begin  
    otherwise
      BlockLoad(Hotelb);
      endofday = Hotelb.CheckOut;
      startofday = Hotelb.CheckIn;
      if (true) then begin // When clicking down one level in Display groups, I don't want the other stuff to appear      
        if (RPb.Resources<>0) then begin
          TrHs = true;
          while (LoopKey("Code",ResTyper,1,TrHs)) begin
            if (TrHs) then begin
              testf = true;
              if (nonblank(location)) then begin
                if (nonblank(ResTyper.ResLoc)) then begin
                  if (ResTyper.ResLoc!=location) then begin testf = false; end;
                end;
              end;
              if (nonblank(uscode)) then begin
                if (ResTyper.Code!=uscode) then begin testf = false; end;
              end;
              if (ResTyper.Sort!=0) then begin testf = false; end;
              if (testf) then begin
                if (Do_RTInDay2(ResTyper.Code,location,RepSpec.f6,dp,maxdays,dmode,adhp,startofday,endofday,readrecs,usedrecs)) then begin
                  uscnt = uscnt + 1;
                end;
              end;
            end;
          end;
        end;
    //## not proper, client code...  
        if (RPb.Activities<>0) then begin
//          acclevel = UserRegisterAccess("ActVc");
//          if (acclevel!=5) then begin
            Do_DispGroup(uscnt,adhp);
//          end;
        end;
        if (RPb.Production<>0) then begin
          Do_MachineGroups(uscode,uscnt,adhp,kResourceTypeMachineGroupProdOrder);
        end;
        if (RPb.ProdOperations!=0) then begin
          Do_MachineGroups(uscode,uscnt,adhp,kResourceTypeMachineGroupProdOper);
        end;
        if (RPb.Projects<>0) then begin
          Do_Projects(uscode,uscnt,adhp); // readrecs,usedrecs.... not really necessary
        end;
        if (RPb.Assets<>0) then begin
//          acclevel = UserRegisterAccess("ActVc");
//          if (acclevel!=5) then begin
            Do_AT2DispGroup(uscode,uscnt,adhp);
//          end;
        end;
        if (RPb.Resort!=0) then begin
          ResourcePlanner_Resort(location,maxdays,uscnt,adhp);
        end;
      end;  
    // Access group
      if (RPb.Rental<>0) then begin
        Do_RentalGroup(uscode,location,uscnt,dp,maxdays,dmode,adhp,readrecs,usedrecs);
      end;
  end;
  PutLongInArea(uscnt,adhp,0);    
  LogReadsAndUsed("FillResourceType",readrecs,usedrecs);
  RETURN;
END;

procedure AddResLine(LongInt colnr,LongInt jobnr,LongInt startpos,LongInt endpos,LongInt compno,Area adhp)
BEGIN
  AddLongToArea(jobnr,adhp);
  AddLongToArea(kResourceJobVc,adhp);
  AddLongToArea(startpos,adhp);
  AddLongToArea(endpos,adhp);
  AddLongToArea(colnr,adhp);    
  AddLongToArea(compno,adhp);
  AddStringToArea("",adhp);
  RETURN;
END;

/*this code is the same as CntResourceExist except AddResLine*/
function LongInt AddResourceExist(string rescode,Date dp,LongInt maxdays,Area adhp,Integer dmode,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  Boolean found,foundnext,foundprev,adcntf;
  record ResExistVc ResExistr;
  record ResExistVc nextResExistr;
  record ResExistVc prevResExistr;
  Integer i;
  LongInt startpos,endpos;
  Date tdp;
  LongInt adcnt;
  LongInt compno;
  
  compno = CurrentCompany;
  adcntf = true;
  adcnt = 0;
  tdp = dp;
  ResExistr.ResCode = rescode;
  found = LoopMain(ResExistr,1,true);
  if (ResExistr.ResCode!=rescode) then begin found = false; end;
  if (found==false) then begin
    goto LAddResourceExist;
  end;  
LAddResourceExistLoop:; 
  ResetLoop(ResExistr);
  ResExistr.ResCode = rescode;
  ResExistr.StartDate = tdp;
  found = LoopMain(ResExistr,2,true);
  if (ResExistr.ResCode!=rescode) then begin found = false; end;

  ResetLoop(nextResExistr);
  nextResExistr.ResCode = rescode;
  nextResExistr.StartDate = tdp;
  SetLoopPosition(nextResExistr,GetLoopPosition(ResExistr));
  foundnext = LoopMain(nextResExistr,2,true);
  readrecs = readrecs + 1;
  if (nextResExistr.ResCode!=rescode) then begin foundnext = false; end;
  
  ResetLoop(prevResExistr);
  prevResExistr.ResCode = rescode;
  prevResExistr.StartDate = tdp;
  SetLoopPosition(prevResExistr,GetLoopPosition(ResExistr));
  foundprev = LoopBackKey("MainKey",prevResExistr,2,true);
  readrecs = readrecs + 1;
  if (prevResExistr.ResCode!=rescode) then begin foundprev = false; end;
  
  if (found) then begin
    endpos = maxdays * ResourceColumnWidth;
    
    if (ResExistr.OnOffFlag!=0) then begin
      startpos = ResLen(dp,ResExistr.StartDate,ResExistr.StartTime,maxdays,1,dmode);
      if (foundnext) then begin
        usedrecs = usedrecs + 1;
        endpos = ResLen(dp,nextResExistr.StartDate,nextResExistr.StartTime,maxdays,1,dmode);
      end;
      if (startpos>=0) then begin
        AddResLine(-1001,-1,startpos,endpos,compno,adhp);    
        adcnt = adcnt + 1;
      end;
    end else begin
      if (foundprev) then begin
        if (prevResExistr.OnOffFlag!=0) then begin
          usedrecs = usedrecs + 1;
          startpos = ResLen(dp,prevResExistr.StartDate,prevResExistr.StartTime,maxdays,1,dmode);
          endpos = ResLen(dp,ResExistr.StartDate,ResExistr.StartTime,maxdays,1,dmode);
          AddResLine(-1001,-1,startpos,endpos,compno,adhp);    
          adcnt = adcnt + 1;
        end else begin
        end;
      end;
    end;
    if (foundnext) then begin
      tdp = AddDay(nextResExistr.StartDate,1);
      usedrecs = usedrecs + 1;
      goto LAddResourceExistLoop;
    end;
  end else begin
    if (foundprev) then begin
      if (prevResExistr.OnOffFlag!=0) then begin
        usedrecs = usedrecs + 1;
        startpos = ResLen(dp,prevResExistr.StartDate,prevResExistr.StartTime,maxdays,1,dmode);
        endpos = maxdays * ResourceColumnWidth;
        AddResLine(-1001,-1,startpos,endpos,compno,adhp);    
        adcnt = adcnt + 1;
      end else begin
      end;
    end;
  end;    
LAddResourceExist:;  
  AddResourceExist = adcnt;
  RETURN;
END;

procedure DoAddHotelJobToThp(record JobVc Jobr,record RcVc RepSpec,var Area adhp,var LongInt avail,var LongInt adcnt,var Boolean restest,var LongInt readrecs,var LongInt usedrecs,Boolean componentresf)
BEGIN
  record ReservationStatusVc ResStatr;
  record HotelBlock Hotelb;
  record ResTypeVc ResTyper;
  record JobVc compJobr;
  record JobVc mJobr;
  row JobVc Jobrw;
  string 255 guest;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc, 4 - PRVc, 5 - ProdOperationVc
  LongInt adrcolnr;  
  LongInt startpos;
  LongInt endpos;
  LongInt adractsernr;
  LongInt adrStartPos;
  LongInt adractlen;
  string 255 auscode;
  string 255 location;
  string 255 item;
  string 255 acttype;
  Date dp,endday;
  Time infrom,into,tim;
  LongInt maxdays;
  Integer dmode;
  LongInt compno;
  Boolean ritf,addtoavail;
  
  auscode = RepSpec.f1;
  location = RepSpec.f3;
  item = RepSpec.f4;
  acttype = RepSpec.f5;
  dp = RepSpec.sStartDate;
  infrom = RepSpec.sStartTime;
  into = RepSpec.sEndTime;
  endday = RepSpec.d2;
  maxdays = RepSpec.long1;
  dmode = RepSpec.Comparison + RepSpec.flags[22];
  if (BlankDate(endday)) then begin
    endday = AddDay(dp,1);
  end;
  compno = CurrentCompany;
  BlockLoad(Hotelb);

  ResTyper.Code = Jobr.Type;
  ReadFirstMain(ResTyper,1,true);
  readrecs = readrecs + 1;
  usedrecs = usedrecs + 1;
  
  if (ResTyper.HoursBeforef!=0) then begin
    guest = "";
    adrvcnr = kResourceJobVc;
    adrcolnr = ResTyper.ColourBefore;
    tim = AddHours(Jobr.StartTime,-ResTyper.NoHoursBefore);
    startpos = ResLen(dp,Jobr.TransDate,tim,maxdays,0,dmode);
    endpos = ResLen(dp,Jobr.TransDate,Jobr.StartTime,maxdays,1,dmode);
    adractsernr = Jobr.SerNr;
    adrStartPos = startpos;
    adractlen = endpos;
    AddLongToArea(adractsernr,adhp);
    AddLongToArea(adrvcnr,adhp);
    AddLongToArea(adrStartPos,adhp);
    AddLongToArea(adractlen,adhp);
    AddLongToArea(adrcolnr,adhp);
    AddLongToArea(compno,adhp);
    AddStringToArea(guest,adhp);
    adcnt = adcnt + 1;
  end;

  adrcolnr = 1;
  adrvcnr = kResourceJobVc;
  addtoavail = true;
  ResStatr.Code = Jobr.ResStatus;
  if (ReadFirstMain(ResStatr,1,true)) then begin
    readrecs = readrecs + 1;
    usedrecs = usedrecs + 1;
    if (SkipResTest(ResStatr,true)) then begin
      if (ResStatr.StatType==1) then begin
        addtoavail = false;
      end else begin
        goto LDoAddHotelJobToThp;
      end;
    end;
    if (ResStatr.CalColNr>0) then begin
      adrcolnr = ResStatr.CalColNr;
    end;
  end;
  if (componentresf) then begin
    adrcolnr = 20;
  end;
  if (Jobr.Mother>0) then begin
    adrcolnr = -adrcolnr;
  end;
  compJobr.TransDate = dp;
  compJobr.EndDate = endday;
  compJobr.StartTime = infrom;
  compJobr.EndTime = into;
  if (DateTimeInsideDateTime(Jobr.TransDate,Jobr.StartTime,Jobr.EndDate,Jobr.EndTime,
                             compJobr.TransDate,compJobr.StartTime,compJobr.EndDate,compJobr.EndTime)) then begin
    restest = true;
  end;
  startpos = ResLen(dp,Jobr.TransDate,Jobr.StartTime,maxdays,0,dmode);
  endpos = ResLen(dp,Jobr.EndDate,Jobr.EndTime,maxdays,1,dmode);
  adractsernr = Jobr.SerNr;
  adrStartPos = startpos;
  adractlen = endpos;
  guest = "";
  if (MatRowCnt(Jobr)>0) then begin
    MatRowGet(Jobr,0,Jobrw);
    guest = Jobrw.CUName;
  end;
  if (blank(guest)) then begin
    guest = Jobr.CUName;
  end;

  switch (Hotelb.ResPlanDisplay) begin
    case 1:
      guest = Jobr.SerNr;
      if (Jobr.Mother>0) then begin
        guest = guest & "|" & Jobr.Mother;
      end;
    case 2:
      guest = Jobr.RefStr;
    case 3:
      guest = Jobr.RefStr;
      if (Jobr.Mother>0) then begin
        mJobr.SerNr = Jobr.Mother;
        ReadFirstMain(mJobr,1,true);
        readrecs = readrecs + 1;
        usedrecs = usedrecs + 1;
        if (nonblank(mJobr.RefStr)) then begin
          guest = guest & "|" & mJobr.RefStr;
        end else begin
          guest = guest & "|" & Jobr.Mother;
        end;
      end;
    otherwise
      guest = Jobr.SerNr & "|" & guest;
  end;
//LogText(0,"4.Do_ReservationsInDay2 Jobr.SerNr " & Jobr.SerNr);    
  AddLongToArea(adractsernr,adhp);
  AddLongToArea(adrvcnr,adhp);
  AddLongToArea(adrStartPos,adhp);
  AddLongToArea(adractlen,adhp);
  AddLongToArea(adrcolnr,adhp);    
  AddLongToArea(compno,adhp);
  AddStringToArea(guest,adhp);
  adcnt = adcnt + 1;

  if (ResTyper.HoursAfterf!=0) then begin
    guest = "";
    adrvcnr = kResourceJobVc;
    adrcolnr = ResTyper.ColourAfter;
    tim = AddHours(Jobr.EndTime,ResTyper.NoHoursAfter);
    startpos = ResLen(dp,Jobr.EndDate,Jobr.EndTime,maxdays,0,dmode);
    endpos = ResLen(dp,Jobr.EndDate,tim,maxdays,1,dmode);
    adractsernr = Jobr.SerNr;
    adrStartPos = startpos;
    adractlen = endpos;
    AddLongToArea(adractsernr,adhp);
    AddLongToArea(adrvcnr,adhp);
    AddLongToArea(adrStartPos,adhp);
    AddLongToArea(adractlen,adhp);
    AddLongToArea(adrcolnr,adhp);
    AddLongToArea(compno,adhp);
    AddStringToArea(guest,adhp);
    adcnt = adcnt + 1;
  end;
  if (restest) then begin
    if (addtoavail) then begin
      avail = avail - 1;
    end;
  end;
LDoAddHotelJobToThp:;
  RETURN;
END;

global
procedure AddHotelJobToThp(record JobVc Jobr,record RcVc RepSpec,var Area adhp)
begin
  Boolean restest;
  LongInt avail,uscnt,adcnt,readrecs,usedrecs;
  
  uscnt = GetLongFromArea(adhp,0);
  avail = GetLongFromArea(adhp,4);
  DoAddHotelJobToThp(Jobr,RepSpec,adhp,avail,adcnt,restest,readrecs,usedrecs,false);
  return;
end;

procedure AddRoomData(string room,val qty,var array string arooms,var array val aoccup)
begin
  Integer i;
  
  for (i=0;i<arooms.length;i=i+1) begin
    if (room==arooms[i]) then begin
      aoccup[i] = aoccup[i] + qty;
      goto LAddRoomData;
    end;
  end;
  i = arooms.length;
  arooms[i] = room;
  aoccup[i] = qty;
LAddRoomData:;  
  return;
end;

function val ResColWidth()
begin
  val res;
  record ResPlanBlock RPb;

  BlockLoad(RPb)
  res = (RPb.DayWidth + 2) * 8;
  ResColWidth = res;
  return;
end;


function LongInt Do_ReservationsInDay2(record RcVc RepSpec,string rescode,record ResTypeVc ResTyper,string rsrvstatus,Boolean restypef,
                                       Date dp,LongInt amaxdays,Integer dmode,Date until,Time from,Time to,var LongInt avail,Integer ResPlanDisplay,
                                       Area adhp,var LongInt readrecs,var LongInt usedrecs,var array string arooms,var array val aoccup)
begin
  LongInt res;
  record JobVc mJobr;
  record JobVc Jobr;
  row JobVc Jobrw;
  record JobVc compJobr;
  Boolean TrHs;
  Boolean testf;
  LongInt adractsernr;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc, 4 - PRVc, 5 - ProdOperationVc, 6 - RsrtEventVc
  LongInt adrStartPos;
  LongInt adractlen;
  LongInt adrcolnr;  
  LongInt adcnt;
  LongInt adoff;
  LongInt startpos;
  LongInt endpos;
  LongInt ddif;
  record ReservationStatusVc ResStatr;
  Integer lenclass;
  LongInt maxdays;
  Array LongInt ra;
  Date blankd;
  Boolean restest;
  Boolean ritf;
  Time tim;
  Integer i;
  Boolean addtoavail;
  LongInt compno;
  string 255 guest,index;
  val days,rescolw;
  
  rescolw = ResColWidth;
  compno = CurrentCompany;
  restest = false;
  maxdays = amaxdays;
  if (dmode>=2) then begin
    maxdays = (amaxdays+23) / 24;
  end;
  res = 0;
  adcnt = 0;
  if (restypef==false) then begin
    for (i=0;i<maxdays;i=i+1) begin
      ra[i] = 0;
    end;
    if (CntResourceExist(rescode,dp,maxdays,ra,readrecs,usedrecs)==false) then begin
      goto LDo_ReservationsInDay2;
    end;
  end;
  adcnt = 0;
  adoff = GetAreaLength(adhp);
  if (restypef==false) then begin
    AddLongToArea(adcnt,adhp);      
    AddLongToArea(kResourceMonthResource,adhp);  //11,resource
    AddStringToArea(rescode,adhp);      
    res = 1;
  end;
  lenclass = 4;
LDo_ReservationsInDay2BEGIN:;
  ResetLoop(Jobr);
  Jobr.ResCode = rescode;
  Jobr.LengthClass = lenclass;
  Jobr.TransDate = dp;
  switch (lenclass) begin
    case 4: Jobr.TransDate = blankd;
    case 3: Jobr.TransDate = AddDay(Jobr.TransDate,-366);
    case 2: Jobr.TransDate = AddDay(Jobr.TransDate,-31);
    case 1: Jobr.TransDate = AddDay(Jobr.TransDate,-7);
    case 0: ;
  end;
  TrHs = true;
  if (blank(rescode)) then begin
    index = "CalResStartTime";
  end else begin
    index = "AllResources:" & rescode;
  end;
  while (LoopKey(index,Jobr,3,TrHs)) begin
    readrecs = readrecs + 1;
    restest = false;
    ddif = DateDiff(Jobr.TransDate,dp);
//    if (nonblank(rescode)) then begin
//      if (SetInSet(rescode,Jobr.Resources)==false) then begin TrHs = false; end;
//    end;
    if (Jobr.LengthClass!=lenclass) then begin TrHs = false; end;
    if (blank(rescode)) then begin
      if (Jobr.ResCode!=rescode) then begin TrHs = false; end;
    end;
    if (ddif>=maxdays) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Jobr.EndDate<dp) then begin testf = false; end;
      if (restypef) then begin
        if (Jobr.Type!=ResTyper.Code) then begin testf = false; end;
      end;
      if (nonblank(rsrvstatus)) then begin
        if (Jobr.ResStatus!=rsrvstatus) then begin testf = false; end;
      end;
      if (testf) then begin
        if (restypef) then begin
          ResStatr.Code = Jobr.ResStatus;
          if (ReadFirstMain(ResStatr,1,true)) then begin
            readrecs = readrecs + 1;
            usedrecs = usedrecs + 1;
            if (SkipResTest(ResStatr,true)) then begin
              if (ResStatr.StatType==1) then begin
              end else begin
                goto LDo_ReservationsInDay22;
              end;
            end;
          end;
//must be same condition as in DoAddHotelJobToThp          
          adcnt = 1;
          AddLongToArea(adcnt,adhp);    
          AddLongToArea(kResourceMonthResource,adhp);  //11,resource
          AddStringToArea(rescode,adhp);
          res = res + 1;
          DoAddHotelJobToThp(Jobr,RepSpec,adhp,avail,adcnt,restest,readrecs,usedrecs,false);
LDo_ReservationsInDay22:;          
        end else begin
          DoAddHotelJobToThp(Jobr,RepSpec,adhp,avail,adcnt,restest,readrecs,usedrecs,rescode!=Jobr.ResCode and nonblank(Jobr.ResCode));
        end;

        startpos = ResLen(RepSpec.sStartDate,Jobr.TransDate,Jobr.StartTime,RepSpec.long1,0,RepSpec.Comparison + RepSpec.flags[22]);
        endpos = ResLen(RepSpec.sStartDate,Jobr.EndDate,Jobr.EndTime,RepSpec.long1,1,RepSpec.Comparison + RepSpec.flags[22]);
        days = endpos - startpos;
        days = days/rescolw;
        days = Round(days+0.49999,SetRoundModeD(0));
        AddRoomData(Jobr.ResCode,days,arooms,aoccup);

        usedrecs = usedrecs + 1;
      end;
    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto LDo_ReservationsInDay2BEGIN;end;
  
  if (restypef==false) then begin
    adcnt = adcnt + AddResourceExist(rescode,dp,maxdays,adhp,dmode,readrecs,usedrecs);
  end;
  if (restest==false) then begin
    if (restypef==false) then begin
      avail = avail + 1;
    end;
  end;
  if (restypef==false) then begin
    PutLongInArea(adcnt,adhp,adoff);    
  end;
LDo_ReservationsInDay2:;  
  Do_ReservationsInDay2 = res;
  RETURN;
END;

global
function string 255 FindGroupMachines(string group)
begin
  string 255 res;
  Integer rwcnt,i;
  record MachineGroupsBlock MGb;
  row MachineGroupsBlock MachineGroupsrw;
  
  BlockLoad(MGb);
  rwcnt = MatRowCnt(MGb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(MGb,i,MachineGroupsrw);
    if (group==MachineGroupsrw.Code) then begin
      res = MachineGroupsrw.DefStr;
      goto LFindGroupMachines;
    end;
  end;
LFindGroupMachines:;  
  FindGroupMachines = res;
  return;
end;

global
function string 255 GetMachineGroup(string machine)
begin
  string 255 res;
  Integer rwcnt,i;
  record MachineGroupsBlock MGb;
  row MachineGroupsBlock MachineGroupsrw;
  
  BlockLoad(MGb);
  rwcnt = MatRowCnt(MGb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(MGb,i,MachineGroupsrw);
    if (SetInSet(UpperCase(machine),MachineGroupsrw.DefStr)) then begin
      res = MachineGroupsrw.Code;
      goto LGetMachineGroup;
    end;
  end;
LGetMachineGroup:;  
  GetMachineGroup = res;
  return;
end;

function string 255 FindProjectMemebers(var string str)
begin
  record PRVc PRr;
  
  PRr.Code = str;  
  if (ReadFirstMain(PRr,1,true)) then begin
  end;
  FindProjectMemebers = prr.Members;
  return;
end;

function LongInt Do_ReservationsInDay1(record RcVc RepSpec,string resourcetyp,string rsrvstatus,string reslocation,string resclass,Date dp,LongInt maxdays,
                   Integer dmode,Date until,Time from,Time to,var LongInt avail,Integer ResPlanDisplay,
                   Area adhp,var LongInt readrecs,var LongInt usedrecs,var array string arooms,var array val aoccup)
begin
  record ResVc Resr;
  record ResTypeVc ResTyper;
  Boolean TrHs;
  string 255 ckey;
  Boolean testf;
  LongInt uscnt,maxrooms;
  string 255 lastresourcetyp;
  vector Boolean vusedresourcetypf;

  uscnt = 0;
  ResTyper.Code = resourcetyp;
  ReadFirstMain(ResTyper,1,true);
  if (nonblank(resourcetyp)) then begin
    ckey = "Type";
    Resr.Type = resourcetyp;
  end else begin
    ckey = "Code";
    Resr.Code = "";
  end;  
  maxrooms = -1;
  if (IsStandardProduct) then begin
    if (GetFeatureState("HasModPP")==kFeatureTrial) then begin
      maxrooms = 2;
    end;
  end;
  TrHs = true;
  while (LoopKey(ckey,Resr,1,TrHs)) begin
    readrecs = readrecs + 1;
    if (nonblank(resourcetyp)) then begin
      if (Resr.Type!=resourcetyp) then begin TrHs = false; end;
    end;
    if (maxrooms>0) then begin
      if (uscnt>=maxrooms) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(reslocation)) then begin
        if (Resr.ResLoc!=reslocation) then begin testf = false; end;
      end;
      if (nonblank(resclass)) then begin
        if (SetInSet(resclass,Resr.Class)==false) then begin testf = false; end;
      end;
      if (Resr.Terminated!=0) then begin testf = false; end;
      if (testf) then begin
        if (blank(resourcetyp)) then begin
          if (vusedresourcetypf[lastresourcetyp]==false) then begin
            if (nonblank(lastresourcetyp)) then begin
              ResTyper.Code = lastresourcetyp;
              ReadFirstMain(ResTyper,1,true);
              uscnt = uscnt + Do_ReservationsInDay2(RepSpec,"",ResTyper,rsrvstatus,true,dp,maxdays,dmode,until,from,to,avail,ResPlanDisplay,adhp,readrecs,usedrecs,arooms,aoccup);
              vusedresourcetypf[ResTyper.Code] = true;
            end;
          end;          
        end;
        usedrecs = usedrecs + 1;
        AddRoomData(Resr.Code,0,arooms,aoccup);
        uscnt = uscnt + Do_ReservationsInDay2(RepSpec,Resr.Code,ResTyper,rsrvstatus,false,dp,maxdays,dmode,until,from,to,avail,ResPlanDisplay,adhp,readrecs,usedrecs,arooms,aoccup);
        lastresourcetyp = Resr.Type;
      end;
    end;
  end;
  if (nonblank(resourcetyp)) then begin
    uscnt = uscnt + Do_ReservationsInDay2(RepSpec,"",ResTyper,rsrvstatus,true,dp,maxdays,dmode,until,from,to,avail,ResPlanDisplay,adhp,readrecs,usedrecs,arooms,aoccup);
  end else begin
    if (nonblank(lastresourcetyp)) then begin
      if (vusedresourcetypf[lastresourcetyp]==false) then begin
        ResTyper.Code = lastresourcetyp;
        ReadFirstMain(ResTyper,1,true);
        uscnt = uscnt + Do_ReservationsInDay2(RepSpec,"",ResTyper,rsrvstatus,true,dp,maxdays,dmode,until,from,to,avail,ResPlanDisplay,adhp,readrecs,usedrecs,arooms,aoccup);
      end;
    end;          
  end;
  Do_ReservationsInDay1 = uscnt;
  return;
end;

global
procedure FillResourceMonth2(record RcVc RepSpec,var Area adhp,var Area ddhp,var array string arooms,var array val aoccup)
begin
  LongInt tv;
  LongInt uscnt,avail;
  record UserVc Userr;
  record INVc INr;
  string 255 user,uscode,machine,resource;
  Integer pos;
  record ResVc Resr;
  record AT2UnitVc AT2Unitr;
  LongInt availpos;
  Date until;
  record PRVc PRr;
  record ResPlanBlock RPb;
  Integer typ;
  record HotelBlock Hotelb;
  Time from,to;
  string 20 compcode,tstr;
  Integer oldcomp;
  Boolean firstf,found;
  record ResTypeVc ResTyper;
  LongInt readrecs;
  LongInt usedrecs;
  string 255 auscode;
  string 255 location;
  string 255 item;
  string 255 acttype;
  Date dp,endday;
  Time infrom,into;
  LongInt maxdays;
  Integer dmode;
  Integer type;
  
  BlockLoad(Hotelb);
  type = RepSpec.flags[21];
  auscode = RepSpec.f1;
  location = RepSpec.f3;
  item = RepSpec.f4;
  acttype = RepSpec.f5;
  dp = RepSpec.sStartDate;
  if (blanktime(RepSpec.sStartTime)) or ((GetHour(RepSpec.sStartTime)==0) and (GetMinute(RepSpec.sStartTime)==0) and (GetSecond(RepSpec.sStartTime)==0)) then begin
    RepSpec.sStartTime = Hotelb.CheckIn;
  end;
  if (blanktime(RepSpec.sEndTime)) or ((GetHour(RepSpec.sEndTime)==0) and (GetMinute(RepSpec.sEndTime)==0) and (GetSecond(RepSpec.sEndTime)==0)) then begin
    RepSpec.sEndTime = Hotelb.CheckOut;
  end;
  infrom = RepSpec.sStartTime;
  into = RepSpec.sEndTime;
  endday = RepSpec.d2;
  maxdays = RepSpec.long1;
  dmode = RepSpec.Comparison + RepSpec.flags[22];
  
/*
  switch (WindowCompileType(wn)) {
    case ctWindowsCE:
      startfrom = 8;
      break;
    otherwise
      startfrom = 0;
      break;
  };  
*/

  readrecs = 0;
  usedrecs = 0;
  oldcomp = CurrentCompany;  
  firstf = true;
  BlockLoad(RPb);
  uscnt = 0;
  avail = 0;
  CalcResMonDays(0,maxdays,dp,ddhp);
  AddLongToArea(tv,adhp);
  availpos = GetAreaLength(adhp);
  AddLongToArea(tv,adhp);

  switch (type) begin        
    case kResourceTypeDispGroup:
      if (RPb.Activities<>0) then begin
        from = infrom;
        to = into;
        to = Hotelb.CheckOut;
        from = Hotelb.CheckIn;
        until = endday;
        if (BlankDate(until)) then begin
          until = AddDay(dp,1);
        end;
        uscode = auscode;
        FindCalDispGroup(uscode);
        pos = 0;
        ExtractObj(uscode,pos,user);
        while (nonblank(user)) begin
          if (firstf==false) then begin
            if (blank(user)) then begin goto L77FillResourceMonth; end;
          end;
          if (GetGlobalUserMainCompany(user,compcode)) then begin
            if (nonblank(compcode)) then begin
              if (SetCompanyCode(compcode,false)) then begin
              end;
            end;
          end;
          firstf = false;
          Userr.Code = user;
          if (FindTheUser(Userr)) then begin
            if ((dmode==1) or (dmode==3)) then begin
              uscnt = uscnt + Do_ActsInDay3(user,item,acttype,dp,maxdays,adhp,2,dmode,CurrentUser,readrecs,usedrecs);
            end;
            uscnt = uscnt + Do_ActsInDay3(user,item,acttype,dp,maxdays,adhp,1,dmode,CurrentUser,readrecs,usedrecs);
          end;  
          ExtractObj(uscode,pos,user);
        end;
      end;
    case kResourceTypeResource:
      if (RPb.Resources<>0) then begin        
        to = Hotelb.CheckOut;
        from = Hotelb.CheckIn;
        until = endday;
        if (BlankDate(until)) then begin
          until = AddDay(dp,1);
        end;
        uscode = auscode;
        if (blank(uscode)) then begin
          uscnt = uscnt + Do_ReservationsInDay1(RepSpec,"",RepSpec.FirstAcc,RepSpec.f3,RepSpec.f6,dp,maxdays,dmode,until,from,to,avail,Hotelb.ResPlanDisplay,adhp,readrecs,usedrecs,arooms,aoccup);
        end else begin
          pos = 0;
          ExtractObj(uscode,pos,resource);
          while (nonblank(resource)) begin
             uscnt = uscnt + Do_ReservationsInDay1(RepSpec,resource,RepSpec.FirstAcc,RepSpec.f3,RepSpec.f6,dp,maxdays,dmode,until,from,to,avail,Hotelb.ResPlanDisplay,adhp,readrecs,usedrecs,arooms,aoccup);
            ExtractObj(uscode,pos,resource);
           end;
         end;
        if (avail<0) then begin avail = 0; end;
      end;
    case kResourceMonthAsset:
      if (RPb.Assets<>0) then begin
        uscnt = uscnt + Do_Activities_Assets(auscode,acttype,dp,maxdays,dmode,adhp,CurrentUser,readrecs,usedrecs);
      end;
    case kResourceTypeAssetDisp:
      if (RPb.Assets<>0) then begin
        uscnt = uscnt + Do_Assets_In_Disp_Group(auscode,acttype,dp,maxdays,dmode,adhp,CurrentUser,readrecs,usedrecs);
      end;
    case kResourceTypeMachineGroupProdOrder:
      if (RPb.Production<>0) then begin
        uscode = FindGroupMachines(auscode);
        pos = 0;
        ExtractObj(uscode,pos,machine);
        while (nonblank(machine)) begin
          AT2Unitr.InventoryNr = machine;
          if (ReadFirstMain(AT2Unitr,1,true)) then begin
            uscnt = uscnt + Do_ProdOrdersInDay(machine,item,dp,maxdays,dmode,adhp,readrecs,usedrecs);
          end;
          ExtractObj(uscode,pos,machine);
        end;
      end;
    case kResourceTypeMachineGroupProdOper:
      if (RPb.ProdOperations<>0) then begin
        uscode = FindGroupMachines(auscode);
        pos = 0;
        ExtractObj(uscode,pos,machine);
        while (nonblank(machine)) begin
          AT2Unitr.InventoryNr = machine;
          if (ReadFirstMain(AT2Unitr,1,true)) then begin
            uscnt = uscnt + Do_ProdOpersInDay(machine,item,dp,maxdays,dmode,adhp,readrecs,usedrecs);
          end;
          ExtractObj(uscode,pos,machine);
        end;
      end;
    case kResourceMonthResourceResort:
      if (RPb.Resort<>0) then begin        
        uscode = auscode;
        if (blank(uscode)) then begin
//           uscnt = uscnt + FillResourceMonth_RsrtEvents(RepSpec,"",RepSpec.FirstAcc,RepSpec.f3,RepSpec.f6,dp,maxdays,dmode,avail,adhp,readrecs,usedrecs);
        end else begin
          pos = 0;
          ExtractObj(uscode,pos,resource);
          while (nonblank(resource)) begin
//             uscnt = uscnt + FillResourceMonth_RsrtEvents(RepSpec,resource,RepSpec.FirstAcc,RepSpec.f3,RepSpec.f6,dp,maxdays,dmode,avail,adhp,readrecs,usedrecs);
            ExtractObj(uscode,pos,resource);
           end;
         end;
        if (avail<0) then begin avail = 0; end;
      end;
    case kResourceTypeProject:
      from = infrom;
      to = into;
      until = endday;
      if (BlankDate(until)) then begin
        until = AddDay(dp,1);
      end;
      uscode = auscode;
      if (auscode==UsetStr(34440)) then begin
        found = true;
        PRr.Terminated = 0;  
        while (LoopKey("Active",PRr,1,found)) begin
          uscode = FindProjectMemebers(PRr.Code);      
          pos = 0;
          ExtractObj(uscode,pos,user);
          while (nonblank(user)) begin
            if (GetGlobalUserMainCompany(user,compcode)) then begin
              if (nonblank(compcode)) then begin
                if (SetCompanyCode(compcode,false)) then begin
                end;
              end;
            end;
            typ = RepSpec.flags[0] + 1;
            if ((dmode==1) or (dmode==3)) then begin
              uscnt = uscnt + Do_ProjectInDay2(user,dp,maxdays,dmode,adhp,PRr.Code,typ,2,CurrentUser,readrecs,usedrecs,true);
            end;
            uscnt = uscnt + Do_ProjectInDay2(user,dp,maxdays,dmode,adhp,PRr.Code,typ,1,CurrentUser,readrecs,usedrecs,true); // 1 = only_this_proj,2 = all_act;
            ExtractObj(uscode,pos,user);
          end;
        end;
      end else begin
        uscode = FindProjectMemebers(uscode);      
        pos = 0;
LFillResourceMonthProjectBEGIN:;
        ExtractObj(uscode,pos,user);
        while (nonblank(user)) begin
          if (GetGlobalUserMainCompany(user,compcode)) then begin
            if (nonblank(compcode)) then begin
              if (SetCompanyCode(compcode,false)) then begin
              end;
            end;
          end;
          PRr.Code = auscode;      
          if (ReadFirstMain(PRr,1,true)) then begin
            typ = RepSpec.flags[0] + 1;
            if ((dmode==1) or (dmode==3)) then begin
              uscnt = uscnt + Do_ProjectInDay(user,dp,maxdays,dmode,adhp,PRr.Code,typ,2,CurrentUser,readrecs,usedrecs);
            end;
            uscnt = uscnt + Do_ProjectInDay(user,dp,maxdays,dmode,adhp,PRr.Code,typ,1,CurrentUser,readrecs,usedrecs); // 1 = only_this_proj,2 = all_act;
            goto LFillResourceMonthProjectBEGIN;
          end;
          ExtractObj(uscode,pos,user);
        end;
      end;
    otherwise
    // infrom and into are never properly filled, so why they are here, I don't know...
      from = infrom;
      to = into;
    //  if (blanktime(to)) then begin
      to = Hotelb.CheckOut;
    //  if (nonblanktime(Hotelb.EndOfDay)) then begin
    //    to = Hotelb.EndOfDay;
    //  end;
    //  end;
    //  if (blanktime(from)) then begin
      from = Hotelb.CheckIn;
    //  if (nonblanktime(Hotelb.StartNewDay)) then begin
    //    from = Hotelb.StartNewDay;
    //  end;
    //  end;
      until = endday;
      if (BlankDate(until)) then begin
        until = AddDay(dp,1);
      end;

      uscode = auscode;
      if (RPb.Activities<>0) then begin
        FindCalDispGroup(uscode);
      end;
            
      if (RPb.Projects<>0) then begin
        uscode = FindProjectMemebers(uscode);
      end;
      
      pos = 0;
LFillResourceMonthBEGIN:;
      ExtractObj(uscode,pos,user);
      if (firstf==false) then begin
        if (blank(user)) then begin goto L77FillResourceMonth; end;
      end;
      firstf = false;
      if (GetGlobalUserMainCompany(user,compcode)) then begin
        if (nonblank(compcode)) then begin
          if (SetCompanyCode(compcode,false)) then begin
          end;
        end;
      end;
      if (RPb.Projects<>0) then begin
        PRr.Code = auscode;
        
        if (ReadFirstMain(PRr,1,true)) then begin
          typ = RepSpec.flags[0] + 1;
    //      StopAlert("typ: " & typ);
          if ((dmode==1) or (dmode==3)) then begin
            uscnt = uscnt + Do_ProjectInDay(user,dp,maxdays,dmode,adhp,auscode,typ,2,CurrentUser,readrecs,usedrecs);
          end;
          uscnt = uscnt + Do_ProjectInDay(user,dp,maxdays,dmode,adhp,auscode,typ,1,CurrentUser,readrecs,usedrecs); // 1 = only_this_proj,2 = all_act;
          goto LFillResourceMonthBEGIN;
        end;
      end;
            
      if (RPb.Rental<>0) then begin
        INr.Code = user;
        if (ReadFirstMain(INr,0,true)) then begin
          uscnt = uscnt + Do_RentINInDay1(user,location,dp,maxdays,dmode,adhp,readrecs,usedrecs);
          goto LFillResourceMonthBEGIN;
        end;
      end;
            
      if (RPb.Activities<>0) then begin
        RecordClear(ResTyper);
        Resr.Code = user;
        if (ReadFirstMain(Resr,1,true)) then begin
          uscnt = uscnt + Do_ReservationsInDay2(RepSpec,user,ResTyper,"",false,dp,maxdays,dmode,until,from,to,avail,0,adhp,readrecs,usedrecs,arooms,aoccup);
          goto LFillResourceMonthBEGIN;
        end;
      end;
L77FillResourceMonth:;
  end;
  PutLongInArea(uscnt,adhp,0);
  PutLongInArea(avail,adhp,availpos);
  LogReadsAndUsed("FillResourceMonth",readrecs,usedrecs);
  ResetCompany(oldcomp);
  return;
end;

global
procedure FillResourceMonth(record RcVc RepSpec,var Area adhp,var Area ddhp)
begin
  array string 255 arooms;
  array val aoccup;
  
  FillResourceMonth2(RepSpec,adhp,ddhp,arooms,aoccup);
  return;
end;

function LongInt Do_IsReserved(string rescode,Date dp,Time tp)
BEGIN
  record JobVc Jobr;
  Boolean TrHs;
  Boolean testf;
  record ReservationStatusVc rsr;
  Integer lenclass;
  LongInt res;
  Date blankd;
  
  res = -1;
  lenclass = 4;
LDo_IsReservedBEGIN:;
  ResetLoop(Jobr);
  Jobr.ResCode = rescode;
  Jobr.LengthClass = lenclass;
  Jobr.TransDate = dp;
  switch (lenclass) begin
    case 4: Jobr.TransDate = blankd;
    case 3: Jobr.TransDate = AddDay(Jobr.TransDate,-366);
    case 2: Jobr.TransDate = AddDay(Jobr.TransDate,-31);
    case 1: Jobr.TransDate = AddDay(Jobr.TransDate,-7);
    case 0: ;
  end;  
  TrHs = true;
  while (LoopKey("CalResStartTime",Jobr,3,TrHs)) begin
    if (Jobr.TransDate>dp) then begin TrHs = false; end;
    if (Jobr.LengthClass!=lenclass) then begin TrHs = false; end;
    if (Jobr.ResCode!=rescode) then begin TrHs = false; end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      rsr.Code = Jobr.ResStatus;
      if (ReadFirstMain(rsr,1,true)) then begin
        if (SkipResTest(rsr,false)) then begin
          testf = false;
        end;
      end;
      if (Jobr.EndDate<dp) then begin testf = false; end;
      if (Jobr.TransDate==dp) then begin
        if ((nonblanktime(Jobr.StartTime)) and (nonblanktime(tp))) then begin
          if (tp<Jobr.StartTime) then begin testf = false; end;
        end;
      end;
      if (Jobr.EndDate==dp) then begin
        if ((nonblanktime(Jobr.EndTime)) and (nonblanktime(tp))) then begin
          if (tp>Jobr.EndTime) then begin testf = false; end;
        end;
      end;

      if (testf) then begin
        res = Jobr.SerNr;
        goto LDo_IsReserved;
      end;
    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto LDo_IsReservedBEGIN; end;
LDo_IsReserved:;  
  Do_IsReserved = res;
  RETURN;
END;

global
function LongInt FindReservation(string tstr,Date td, Time tt)
BEGIN
  LongInt res;

  res = Do_IsReserved(tstr,td,tt);
  FindReservation = res;
  RETURN;
END;