external function Integer SMVc_AddRoundOffRow(var record SMVc,Boolean,Date,val,var val);
external procedure OneAT2UnitDeprCalculation(Integer,Integer,Integer,Boolean,Date,Date,string,var val,var val,var val,var val,var string,val,val,Boolean);
external procedure SMSumup(var record SMVc);
external procedure GetCategoryNLAccounts(Integer,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,
                                         var string,var string,var string,var string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddSMRow(record SMVc,Date,string,string,string,string,val,Boolean,Boolean ,var val);

function val PrevDpr(LongInt curnr,string InventoryNr) 
BEGIN
  val res;
  record AT2DprVc ATDprr;
  Boolean TrHs;
  
  TrHs = true;
  ATDprr.InventoryNr = InventoryNr;
  ATDprr.SerNr = curnr - 1;
  while (LoopBackKey("InventoryNr",ATDprr,2,TrHs)) begin
    if (ATDprr.InventoryNr!=InventoryNr) then begin TrHs = false; end;
    if (ATDprr.SerNr>=curnr) then begin TrHs = false; end;
    if (TrHs) then begin
      res = ATDprr.StartVal;
      TrHs = false;
    end;    
  end;
  PrevDpr = res;
  RETURN;      
END;      

updating function Boolean DoRevalSMRussiasm(record AT2UnitVc ATr,val newpurval,LongInt curat2dprnr,record SMVc SMr)
BEGIN
  Boolean res;
  record AT2Vc ATCatr;
  record DprModVc DMr;
  record AT2AccBlock AT2AccRec;
  record AccBlock AccRec;
  string 10 costacc,depracc,assetacc,revdepr1acc,capcorr1acc;
  string 60 accname,objstr,dmcode,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,AT2Class,revdepr1objects,capcorr1objects;
  Date td;
  val TotSum,t;
  val oldpurval;
  Integer dprtd,tst;
  record InvBalVc InvBalr;

  InvBalr.InventoryNr = ATr.InventoryNr;
  if (ReadFirstMain(InvBalr,1,true)) then begin end;
  BlockLoad(AT2AccRec);  
  oldpurval = ATr.PurchVal;//maybe las revval 
  t = PrevDpr(curat2dprnr,ATr.InventoryNr);
  if (t!=0) then begin
    oldpurval = t;
  end;
  ATCatr.Code = ATr.AT2Code;
  if (ReadFirstMain(ATCatr,1,true)) then begin          
    AT2Class = ATr.AT2Class;
    if (blank(AT2Class)) then begin
      AT2Class = ATCatr.AT2Class;
    end;
    GetCategoryNLAccounts(0,AT2Class,assetacc,costacc,depracc,objstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects);
    if ((nonblank(objstr)) and (nonblank(ATr.Objects))) then begin
      objstr = objstr & ",";
    end;
    objstr = objstr & ATr.Objects;
    if (GetAccName(assetacc,accname,60)) then begin
      accname = accname & " " & ATr.InventoryNr;
      AddSMRow(SMr,td,assetacc,objstr,"-1",accname,(newpurval-oldpurval)*InvBalr.CurQuant,false,true,TotSum);
    end else begin
      goto LDoRevalSMRussia;
    end;
    if (GetAccName(AT2AccRec.CapInvAcc,accname,60)) then begin
      AddSMRow(SMr,td,AT2AccRec.CapInvAcc,"","-1",accname,(newpurval-oldpurval)*InvBalr.CurQuant,false,false,TotSum);
    end else begin
      goto LDoRevalSMRussia;
    end;             
    if (blankdate(SMr.TransDate)) then begin    
      SMr.TransDate = CurrentDate;
    end;
    if (TotSum!=0) then begin
      if (SMVc_AddRoundOffRow(SMr,false,td,TotSum,TotSum)==0) then begin
      end;
    end;
    if (SMr.SerNr==-1) then begin
      SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
    end;
    if (MatRowCnt(SMr)>0) then begin
      SMr.Comment = USetStr(2059);
      SMSumup(SMr);
      if (RecordInsert(SMr,false)) then begin 
        res = true;
      end;
    end;        
  end;
  DoRevalSMRussiasm = res;
LDoRevalSMRussia:;  
  RETURN;
END;

procedure LastAT2Dpr(LongInt at2dprnr,record AT2UnitVc ATUnitr,var val stval,var Date lastrevd) 
BEGIN
  record AT2DprVc ATDprr;
  Boolean TrHs;
  
  stval= ATUnitr.PurchVal;
  lastrevd = ATUnitr.PurchaseDate;
  TrHs = true;
  ATDprr.InventoryNr = ATUnitr.InventoryNr;
  ATDprr.SerNr = at2dprnr - 1;
  while (LoopBackKey("InventoryNr",ATDprr,2,TrHs)) begin
    if (ATDprr.SerNr>=at2dprnr) then begin TrHs = false; end;
    if (ATDprr.InventoryNr!=ATUnitr.InventoryNr) then begin TrHs = false; end;
    if (TrHs) then begin
      stval = ATDprr.StartVal;
      lastrevd = ATDprr.StartingDate1;
      TrHs = false;
    end;    
  end;
  RETURN;      
END;      

updating function Boolean DoRevalSMEnglandsm(record AT2UnitVc ATr,Date revaldate,val newpurval,LongInt at2dprnr,record SMVc SMr)
BEGIN
  Boolean res;
  record AT2Vc ATCatr;
  record DprModVc DMr;
  record AT2AccBlock AT2AccRec;
  record AccBlock AccRec;
  string 10 costacc,depracc,assetacc,revdepr1acc,capcorr1acc;
  string 60 accname,objstr,dmcode,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,AT2Class,revdepr1objects,capcorr1objects;
  Date td,sd;
  val TotSum,t;
  val oldpurval,svp;
  Integer dprtd,tst;
  val dprbef,dprv;
  string 255 tstr;
  record InvBalVc InvBalr;

  InvBalr.InventoryNr = ATr.InventoryNr;
  if (ReadFirstMain(InvBalr,1,true)) then begin end;
  BlockLoad(AT2AccRec);  
  oldpurval = ATr.PurchVal;//maybe las revval 
  ATCatr.Code = ATr.AT2Code;
  if (ReadFirstMain(ATCatr,1,true)) then begin          

    AT2Class = ATr.AT2Class;
    if (blank(AT2Class)) then begin
      AT2Class = ATCatr.AT2Class;
    end;
    GetCategoryNLAccounts(0,AT2Class,assetacc,costacc,depracc,objstr,asset1objstr,depr1objstr,cost1objstr,asset2objstr,depr2objstr,cost2objstr,revdepr1acc,revdepr1objects,capcorr1acc,capcorr1objects);
    if ((nonblank(objstr)) and (nonblank(ATr.Objects))) then begin
      objstr = objstr & ",";
    end;
    objstr = objstr & ATr.Objects;    
    LastAT2Dpr(at2dprnr,ATr,svp,sd);
    
    OneAT2UnitDeprCalculation(0,0,0,false,sd,AddDay(revaldate,-1),ATr.InventoryNr,dprbef,dprv,t,t,tstr,svp,ATr.ResVal,false);    

    if (GetAccName(depracc,accname,60)) then begin
      accname = accname & " " & ATr.InventoryNr;
      AddSMRow(SMr,td,depracc,objstr,"-1",accname,dprv,false,false,TotSum);
    end else begin
      goto LDoRevalSMEngland;
    end;

    if (GetAccName(assetacc,accname,60)) then begin
      accname = accname & " " & ATr.InventoryNr;
      AddSMRow(SMr,td,assetacc,objstr,"-1",accname,newpurval*InvBalr.CurQuant + dprv - oldpurval*InvBalr.CurQuant,false,true,TotSum);
    end else begin
      goto LDoRevalSMEngland;
    end;
    if (GetAccName(AT2AccRec.CapInvAcc,accname,60)) then begin
      AddSMRow(SMr,td,AT2AccRec.CapInvAcc,"","-1",accname,(newpurval-oldpurval)*InvBalr.CurQuant,false,false,TotSum);
    end else begin
      goto LDoRevalSMEngland;
    end;             
    if (blankdate(SMr.TransDate)) then begin    
      SMr.TransDate = CurrentDate;
    end;
    if (TotSum!=0) then begin
      if (SMVc_AddRoundOffRow(SMr,false,td,TotSum,TotSum)==0) then begin
      end;      
    end;
    if (SMr.SerNr==-1) then begin
      SMr.SerNr = NextSerNr("SMVc",SMr.TransDate,-1,false,"");  
    end;
    if (MatRowCnt(SMr)>0) then begin
      SMr.Comment = USetStr(2059);
      SMSumup(SMr);
      if (RecordInsert(SMr,false)) then begin 
        res = true;
      end;
    end;        
  end;
  DoRevalSMEnglandsm = res;
LDoRevalSMEngland:;  
  RETURN;
END;

global
updating function Integer CreateAT2DprSimulation(var record AT2DprVc AT2Dpr,var record SMVc SMr)
BEGIN 
  Integer err;
  Boolean res;
  record AT2DprVc oldAT2Dpr;
  record AT2UnitVc ATr;
  Boolean updatedprf;
  
  ATr.InventoryNr = AT2Dpr.InventoryNr;
  if (ReadFirstMain(ATr,1,true)) then begin
    RecordNew(SMr);
    if (ReadFirstMain(AT2Dpr,1,true)) then begin end;
    err = 20417;
    if (AT2Dpr.SMSerNr<=0) then begin
      SMr.TransDate = AT2Dpr.TransDate;
      if (HasLocalization("GBR")) then begin
        updatedprf = DoRevalSMEnglandsm(ATr,AT2Dpr.StartingDate1,AT2Dpr.StartVal,AT2Dpr.SerNr,SMr);
      end;
      if (HasLocalization("RUS")) then begin
        updatedprf = DoRevalSMRussiasm(ATr,AT2Dpr.StartVal,AT2Dpr.SerNr,SMr);//vatRussian
      end;
      if (HasLocalization("UKR")) then begin
        updatedprf = DoRevalSMRussiasm(ATr,AT2Dpr.StartVal,AT2Dpr.SerNr,SMr);//vatUkrainian
      end;
      if (updatedprf) then begin
        err = 0;
        if (SMr.SerNr!=-1) then begin  
          RecordCopy(oldAT2Dpr,AT2Dpr);        
          AT2Dpr.SMSerNr = SMr.SerNr;
          if (RecordUpdate(oldAT2Dpr,AT2Dpr,true)==0) then begin
          end;
        end;  
      end;
    end;
  end;
  CreateAT2DprSimulation = err;
  RETURN;
END;