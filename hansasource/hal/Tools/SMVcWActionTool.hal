external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function roundmode DefaultRoundMode();
external function val DivRateToBase2(string,val,val,val,val,val,val,roundmode);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external updating function LongInt SMVcRecordCheck(var record SMVc,record SMVc,LongInt,LongInt);
external procedure AddEuroCurncySmRow(var record SMVc,Date,string,string,string,string,val,Boolean,Boolean,var val,string,
                                      val,val,val,val,val,val,val);
external function Boolean GetAccName(string,var string,Integer);
external procedure MulM4ProcVal(val,val,var val);
external procedure ATransVal(val,val,string,string,var val,var val,Boolean);
external procedure SMBal(record SMVc,var val,Integer);
external procedure PasteAccObj(string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SpecialRateCalc(val,val,val,var val);
external function Integer Norm2Cont(string,val,val);
external procedure SMSumup(var record SMVc);
external procedure AutoObj(var string);

global
function Boolean SMVc_PasteObjects(var record SMVc SMp,Integer rownr)
BEGIN
  Boolean res;
  string 255 objstr;
  row SMVc SMrr;

  MatRowGet(SMp,rownr,SMrr);
  objstr = SMrr.Objects;
  AutoObj(objstr);
  SMrr.Objects = objstr;
  MatRowPut(SMp,rownr,SMrr);
  res = true;
  SMVc_PasteObjects = res;
  RETURN;
END;

procedure SMUpdateDebRows(var row SMVc SMrp,Date trdat)
BEGIN
  val sv,tor1,tor2;
  val temp;
  
  SMrp.CredVal = sv;
  SMrp.CredVal2 = sv;
  SMrp.CurCredVal = sv;
  if ((SMrp.DebVal==0) and (SMrp.DebVal2!=0)) then begin
//    goto LSMUpdateDebRows;
  end;
  if ((blank(SMrp.BaseRate1)) and (blank(SMrp.BaseRate2)) and (blank(SMrp.FrRate))) then begin
    goto LSMUpdateDebRows;
  end;
  if ((SMrp.DebVal==0) and 
      ((SMrp.ToRateB1!=0) or (SMrp.ToRateB2!=0))) then begin
    sv = MulRateToBase1(SMrp.CurncyCode,SMrp.CurDebVal,SMrp.FrRate,SMrp.ToRateB1,SMrp.ToRateB2,SMrp.BaseRate1,SMrp.BaseRate2,DefaultCurRoundOff);
    SMrp.DebVal = sv;
    SpecialRateCalc(sv,SMrp.BaseRate1,SMrp.BaseRate2,sv);
    sv = Round(sv,DefaultRoundMode);
    SMrp.DebVal2 = sv;
  end else begin
    SpecialRateCalc(SMrp.DebVal,SMrp.BaseRate1,SMrp.BaseRate2,sv);
    sv = Round(sv,DefaultRoundMode);
    SMrp.DebVal2 = sv;
    if (((nonblank(SMrp.ToRateB1)) or (nonblank(SMrp.ToRateB2)))) then begin
      sv = DivRateToBase1(SMrp.CurncyCode,SMrp.DebVal,SMrp.FrRate,SMrp.ToRateB1,SMrp.ToRateB2,SMrp.BaseRate1,SMrp.BaseRate2,DefaultCurRoundOff);
      SMrp.CurDebVal = sv;
    end;
    if ((nonblank(SMrp.DebVal)) and
        ((blank(SMrp.ToRateB1)) and (blank(SMrp.ToRateB2)))) then begin
      tor1 = blankval;
      tor2 = blankval;
      if (SMrp.FrRate==0) then begin // Old Currency Style 
        sv = SMrp.DebVal*100;
        tor1 = sv/SMrp.CurDebVal;
        tor1 = Round(tor1,DefaultRoundMode);
      end else begin
        GetFullCurncyRate(SMrp.CurncyCode,trdat,temp,tor1,tor2,temp,temp);
        sv = SMrp.DebVal/SMrp.CurDebVal;
        sv = sv*SMrp.FrRate;
        SpecialRateCalc(sv,SMrp.BaseRate1,SMrp.BaseRate2,sv);
        sv = Round(sv,DefaultRoundMode);
        if (tor1==0) then begin // Only one is filled at this moment 
          tor2 = sv;
        end else begin
          tor1 = sv;
        end;
      end;
      SMrp.ToRateB1 = tor1;
      SMrp.ToRateB2 = tor2;
    end;
  end;
LSMUpdateDebRows:;  
  RETURN;
END;

procedure SMUpdateDebRows2(var row SMVc SMrp,Date trdat)
BEGIN
  val sv,tor1,tor2;
  val temp;
  
  SMrp.CredVal = sv;
  SMrp.CredVal2 = sv;
  SMrp.CurCredVal = sv;
  SpecialRateCalc(SMrp.DebVal2,SMrp.BaseRate2,SMrp.BaseRate1,sv);
  sv = Round(sv,DefaultRoundMode);
  if (blank(SMrp.DebVal)) then begin
    SMrp.DebVal = sv;
  end;
  if (((nonblank(SMrp.ToRateB1)) or (nonblank(SMrp.ToRateB2)))) then begin
    sv = DivRateToBase2(SMrp.CurncyCode,SMrp.DebVal2,SMrp.FrRate,SMrp.ToRateB1,SMrp.ToRateB2,SMrp.BaseRate1,SMrp.BaseRate2,DefaultCurRoundOff);
    SMrp.CurDebVal = sv;
  end;
  if ((nonblank(SMrp.DebVal2)) and
      ((blank(SMrp.ToRateB1)) and (blank(SMrp.ToRateB2)))) then begin
    tor1 = blankval;
    tor2 = blankval;
    if (SMrp.FrRate!=0) then begin // Old Currency Style 
      GetFullCurncyRate(SMrp.CurncyCode,trdat,temp,tor1,tor2,temp,temp);
      sv = SMrp.DebVal2/SMrp.CurDebVal;
      sv = sv*SMrp.FrRate;
      SpecialRateCalc(sv,SMrp.BaseRate2,SMrp.BaseRate1,sv);
      sv = Round(sv,DefaultRoundMode);
      if (tor1==0) then begin /* Only one is filled at this moment */
        tor2 = sv;
      end else begin
        tor1 = sv;
      end;
    end;
    SMrp.ToRateB1 = tor1;
    SMrp.ToRateB2 = tor2;
  end;
  RETURN;
END;

procedure SMUpdateCredRows2(var row SMVc SMrp,Date trdat)
BEGIN
  val sv,tor1,tor2;
  val temp;

  SMrp.DebVal = sv;
  SMrp.DebVal2 = sv;
  SMrp.CurDebVal = sv;
  SpecialRateCalc(SMrp.CredVal2,SMrp.BaseRate2,SMrp.BaseRate1,sv);
  sv = Round(sv,DefaultRoundMode);
  if (blank(SMrp.CredVal)) then begin
    SMrp.CredVal = sv;
  end;
  if (((nonblank(SMrp.ToRateB1)) or (nonblank(SMrp.ToRateB2)))) then begin
    sv = DivRateToBase2(SMrp.CurncyCode,SMrp.CredVal2,SMrp.FrRate,SMrp.ToRateB1,SMrp.ToRateB2,SMrp.BaseRate1,SMrp.BaseRate2,DefaultCurRoundOff);
    SMrp.CurCredVal = sv;
  end;
  if ((nonblank(SMrp.CredVal2)) and
      ((blank(SMrp.ToRateB1)) and (blank(SMrp.ToRateB2)))) then begin
    tor1 = blankval;
    tor2 = blankval;
    if (SMrp.FrRate!=0) then begin // Old Currency Style 
      GetFullCurncyRate(SMrp.CurncyCode,trdat,temp,tor1,tor2,temp,temp);
      sv = SMrp.CredVal2/SMrp.CurCredVal;
      sv = sv*SMrp.FrRate;
      SpecialRateCalc(sv,SMrp.BaseRate2,SMrp.BaseRate1,sv);
      sv = Round(sv,DefaultRoundMode);
      if (tor1==0) then begin /* Only one is filled at this moment */
        tor2 = sv;
      end else begin
        tor1 = sv;
      end;
    end;
    SMrp.ToRateB1 = tor1;
    SMrp.ToRateB2 = tor2;
  end;
  RETURN;
END;

procedure SMUpdateCredRows(var row SMVc SMrp,Date trdat)
BEGIN
  val sv,tor1,tor2;
  val temp;
  
  SMrp.DebVal = sv;
  SMrp.DebVal2 = sv;
  SMrp.CurDebVal = sv;
  if ((SMrp.CredVal==0) and (SMrp.CredVal2!=0)) then begin
//    goto LUpdateCredRows;
  end;
  if ((blank(SMrp.BaseRate1)) and (blank(SMrp.BaseRate2)) and (blank(SMrp.FrRate))) then begin
    goto LUpdateCredRows;
  end;
  if ((SMrp.CredVal==0) and 
      ((SMrp.ToRateB1!=0) or (SMrp.ToRateB2!=0))) then begin
    sv = MulRateToBase1(SMrp.CurncyCode,SMrp.CurCredVal,SMrp.FrRate,SMrp.ToRateB1,SMrp.ToRateB2,SMrp.BaseRate1,SMrp.BaseRate2,DefaultCurRoundOff);
    SMrp.CredVal = sv;
    SpecialRateCalc(sv,SMrp.BaseRate1,SMrp.BaseRate2,sv);
    sv = Round(sv,DefaultRoundMode);
    SMrp.CredVal2 = sv;
  end else begin
    SpecialRateCalc(SMrp.CredVal,SMrp.BaseRate1,SMrp.BaseRate2,sv);
    sv = Round(sv,DefaultRoundMode);
    SMrp.CredVal2 = sv;
    if (((nonblank(SMrp.ToRateB1)) or (nonblank(SMrp.ToRateB2)))) then begin
      sv = DivRateToBase1(SMrp.CurncyCode,SMrp.CredVal,SMrp.FrRate,SMrp.ToRateB1,SMrp.ToRateB2,SMrp.BaseRate1,SMrp.BaseRate2,DefaultCurRoundOff);
      SMrp.CurCredVal = sv;
    end;

    if ((nonblank(SMrp.CredVal)) and
        ((blank(SMrp.ToRateB1)) and (blank(SMrp.ToRateB2)))) then begin
      tor1 = blankval;
      tor2 = blankval;
      if (SMrp.FrRate==0) then begin // Old Currency Style 
        sv = SMrp.CredVal*100;
        tor1 = sv/SMrp.CurCredVal;
        tor1 = Round(tor1,DefaultRoundMode);
      end else begin
        GetFullCurncyRate(SMrp.CurncyCode,trdat,temp,tor1,tor2,temp,temp);
        sv = SMrp.CredVal/SMrp.CurCredVal;
        sv = sv*SMrp.FrRate;
        SpecialRateCalc(sv,SMrp.BaseRate1,SMrp.BaseRate2,sv);
        sv = Round(sv,DefaultRoundMode);
        if (tor1==0) then begin // Only one is filled at this moment 
          tor2 = sv;
        end else begin
          tor1 = sv;
        end;
      end;
      SMrp.ToRateB1 = tor1;
      SMrp.ToRateB2 = tor2;
    end;
  end;
LUpdateCredRows:;  
  RETURN;
END;

global
procedure SMVc_PasteDebVal(var record SMVc SMp,Integer rownr)
BEGIN
  Integer res;
  record CYBlock CompYear;
  row SMVc SMrr;
  val t;

  BlockLoad(CompYear);
  MatRowGet(SMp,rownr,SMrr);
  SMUpdateDebRows(SMrr,SMp.TransDate);
  if (CompYear.trDoNVTest==1) then begin
    res = Norm2Cont(SMrr.AccNumber,SMrr.DebVal,t);
    if (res!=0) then begin
      MessageBox(res,"");
    end;
  end;
  MatRowPut(SMp,rownr,SMrr);
  SMSumup(SMp);
  RETURN;
END;

global
procedure SMVc_PasteDebVal2(var record SMVc SMp,Integer rownr)
BEGIN
  Integer res;
  record CYBlock CompYear;
  row SMVc SMrr;
  val t;

  BlockLoad(CompYear);
  MatRowGet(SMp,rownr,SMrr);
  SMUpdateDebRows2(SMrr,SMp.TransDate);
  if (CompYear.trDoNVTest==1) then begin
    res = Norm2Cont(SMrr.AccNumber,SMrr.DebVal,t);
    if (res!=0) then begin
      MessageBox(res,"");
    end;
  end;
  MatRowPut(SMp,rownr,SMrr);
  SMSumup(SMp);
  RETURN;
END;

global
procedure SMVc_PasteCredVal(var record SMVc SMp,Integer rownr)
BEGIN
  Integer res;
  record CYBlock CompYear;
  row SMVc SMrr;
  val t;

  BlockLoad(CompYear);
  MatRowGet(SMp,rownr,SMrr);
  SMUpdateCredRows(SMrr,SMp.TransDate);
  if (CompYear.trDoNVTest==1) then begin
    res = Norm2Cont(SMrr.AccNumber,t,SMrr.CredVal);
    if (res!=0) then begin
      MessageBox(res,"");
    end;
  end;
  MatRowPut(SMp,rownr,SMrr);
  SMSumup(SMp);
  RETURN;
END;

global
procedure SMVc_PasteCredVal2(var record SMVc SMp,Integer rownr)
BEGIN
  Integer res;
  record CYBlock CompYear;
  row SMVc SMrr;
  val t;

  BlockLoad(CompYear);
  MatRowGet(SMp,rownr,SMrr);
  SMUpdateCredRows2(SMrr,SMp.TransDate);
  if (CompYear.trDoNVTest==1) then begin
    res = Norm2Cont(SMrr.AccNumber,t,SMrr.CredVal);
    if (res!=0) then begin
      MessageBox(res,"");
    end;
  end;
  MatRowPut(SMp,rownr,SMrr);
  SMSumup(SMp);
  RETURN;
END;

global
procedure SMVc_PasteCurDebVal(var record SMVc SMp,Integer rownr)
BEGIN
  Integer res;
  record CYBlock CompYear;
  row SMVc SMrr;
  val t;
  record BaseCurBlock BCb;

  BlockLoad(BCb);
  BlockLoad(CompYear);
  MatRowGet(SMp,rownr,SMrr);
  SMUpdateDebRows(SMrr,SMp.TransDate);
  if (CompYear.trDoNVTest==1) then begin
    res = Norm2Cont(SMrr.AccNumber,SMrr.DebVal,t);
    if (res!=0) then begin
      MessageBox(res,"");
    end;
  end;
  if (blank(BCb.BaseCur2)) then begin
    SMrr.DebVal2 = blankval;
  end;
  MatRowPut(SMp,rownr,SMrr);
  SMSumup(SMp);
  RETURN;
END;

global
procedure SMVc_PasteCurCredVal(var record SMVc SMp,Integer rownr)
BEGIN
  Integer res;
  record CYBlock CompYear;
  row SMVc SMrr;
  val t;

  BlockLoad(CompYear);
  MatRowGet(SMp,rownr,SMrr);
  SMUpdateCredRows(SMrr,SMp.TransDate);
  if (CompYear.trDoNVTest==1) then begin
    res = Norm2Cont(SMrr.AccNumber,t,SMrr.CredVal);
    if (res!=0) then begin
      MessageBox(res,"");
    end;
  end;
  MatRowPut(SMp,rownr,SMrr);
  SMSumup(SMp);
  RETURN;
END;

global
procedure SMVc_PasteCurncyCode(var record SMVc SMp,Integer rownr)
BEGIN
  Integer res;
  row SMVc SMrr;
  val frrate,torate1,torate2,baserate1,baserate2;

  MatRowGet(SMp,rownr,SMrr);
  GetFullCurncyRate(SMrr.CurncyCode,SMp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
  SMrr.FrRate = frrate;
  SMrr.ToRateB1 = torate1;
  SMrr.ToRateB2 = torate2;
  SMrr.BaseRate1 = baserate1;
  SMrr.BaseRate2 = baserate2;
  MatRowPut(SMp,rownr,SMrr);
  SMSumup(SMp);
  RETURN;
END;

global
procedure SMAccName(var record SMVc SMp,Integer rownr,Boolean fulldataf)
BEGIN
  row SMVc SMrw;
  record AccVc Accr;
  Boolean Accs;
  string 255 tstr,curncy;
  Integer row1;
  val from,to1,to2,bas1,bas2;

  MatRowGet(SMp,rownr,SMrw);
  if (nonblank(SMrw.AccNumber)) then begin
    Accr.AccNumber = SMrw.AccNumber;
    Accs = ReadFirstKey("AccNumber",Accr,1,true);
    if (Accs==false) then begin
      tstr = USetStr(1023);
      SMrw.Comment = tstr;
      MatRowPut(SMp,rownr,SMrw);
    end else begin
      if (fulldataf) or (blank(SMrw.Comment)) then begin
        SMrw.Comment = Accr.Comment;
      end;
      if (fulldataf) or (blank(SMrw.VATCode)) then begin
        SMrw.VATCode = Accr.VATCode;
      end;
      curncy = Accr.Curncy;
      GetFullCurncyRate(curncy,SMp.TransDate,from,to1,to2,bas1,bas2);
      SMrw.CurncyCode = curncy;
      SMrw.FrRate = from;
      SMrw.ToRateB1 = to1;
      SMrw.ToRateB2 = to2;
      SMrw.BaseRate1 = bas1;
      SMrw.BaseRate2 = bas2;
      MatRowPut(SMp,rownr,SMrw);
      if (nonblank(Accr.AutCode)) then begin
        row1 = rownr+1;
        ClearRow(SMp,SMrw,1)
        SMrw.AccNumber = Accr.AutCode;
        MatRowPut(SMp,row1,SMrw);
      end else begin
        if (nonblank(Accr.PeriodCode)) then begin
          row1 = rownr + 1;
          ClearRow(SMp,SMrw,1)
          SMrw.AccNumber = Accr.PeriodCode;
          MatRowPut(SMp,row1,SMrw);
        end;
      end;
    end;
  end else begin
    SMrw.Comment = "";
    MatRowPut(SMp,rownr,SMrw);
  end;
  RETURN;
END;

procedure AddPeriodRow(record SMVc SMp,string accno,record AutSimPerVc ASPp,row SMVc SMrwp)
BEGIN
  row AutSimPerVc ASPrw;
  Integer rwcnt,i;
  Date pdat;
  LongInt months,days;
  val totsum,totsum2,t,base1val,curtot;
  string 255 tstr;
 
  if (SMrwp.DebVal!=0) then begin
    base1val = SMrwp.DebVal;
  end else begin
    base1val = SMrwp.CredVal;
  end;
  if (nonblank(ASPp.Code)) then begin
    rwcnt = MatRowCnt(ASPp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ASPp,i,ASPrw);
      if (blank(ASPrw.Months)) then begin
        months = 0;
      end else begin
        months = StringToLongInt(ASPrw.Months);
      end;
      if (blank(ASPrw.Days)) then begin
        days = 0;
      end else begin
        days = StringToLongInt(ASPrw.Days);
      end;
      pdat = SMp.TransDate;
      if (days!=0) then begin
        pdat = AddDay(pdat,-GetDay(pdat)+1);
      end;
      pdat = AddMonth(pdat,months);
      if (days>0) then begin pdat = AddDay(pdat,days-1); end;
      if (days<0) then begin pdat = AddDay(pdat,days); end;
      tstr = "";
      if (ASPrw.calc=="=") then begin
        t = base1val + totsum;
      end else begin
        tstr = ASPrw.calc;
        if (Mid(tstr,len(tstr)-1,1)=="%") then begin
          tstr = Left(tstr,len(tstr)-1);
        end;
        MulM4ProcVal(StringToVal(tstr,M4Val),base1val,t);
      end;
      if (GetAccName(accno,tstr,60)) then begin end;
      AddEuroCurncySmRow(SMp,pdat,accno,SMrwp.Objects,SMrwp.VATCode,tstr,t,false,false,totsum,SMrwp.CurncyCode,SMrwp.FrRate,SMrwp.ToRateB1,SMrwp.ToRateB2,SMrwp.BaseRate1,SMrwp.BaseRate2,curtot,blankval);
      if (GetAccName(SMrwp.AccNumber,tstr,60)) then begin end;
      AddEuroCurncySmRow(SMp,pdat,SMrwp.AccNumber,SMrwp.Objects,SMrwp.VATCode,tstr,t,false,true,totsum2,SMrwp.CurncyCode,SMrwp.FrRate,SMrwp.ToRateB1,SMrwp.ToRateB2,SMrwp.BaseRate1,SMrwp.BaseRate2,curtot,blankval);
    end;
  end;
  RETURN;
END;

global
function Boolean AutoTransSM(var record SMVc SMp,Integer rownr)
BEGIN
  Boolean res;
  row AutVc Autrw;
  record AutVc Autr;
  Boolean Auts;
  record AutSimPerVc ASPr;
  Integer i,anrows,trow;
  val dval,acval,tval,bv;
  row SMVc OrgRow;
  row SMVc SMrw;
  Boolean backstep;
  string 255 tstr;
  Integer row1;

  ClearRow(SMp,OrgRow,1);
  MatRowGet(SMp,rownr,SMrw);
  Autr.Code = SMrw.AccNumber;
  ASPr.Code = SMrw.AccNumber;
  if (rownr>=1) then begin
    MatRowGet(SMp,rownr-1,SMrw);
    CopyRow(SMp,SMrw,OrgRow);
  end;
  if (blank(Autr.Code)) then begin goto LAutoTransSM; end;
  Auts = ReadFirstMain(Autr,1,true);
  if (Auts==false) then begin
    goto L77AutoTransSM;
  end;
  res = true;
  anrows = MatRowCnt(Autr);
  if (anrows==0) then begin goto LAutoTransSM; end;
  trow = rownr - 1;
  for (i=0;i<anrows;i=i+1) begin
    MatRowGet(Autr,i,Autrw);
    trow = trow + 1;
    if (i==0) then begin
      if (trow>0) then begin
        if (Autrw.AccNumber=="!") then begin
          backstep = true;
          trow = trow - 1;
        end;
      end;
    end;
    if (trow>298) then begin goto L88AutoTransSM; end;
    tstr = Autrw.AccNumber;
    if (trow>=MatRowCnt(SMp)) then begin
      ClearRow(SMp,SMrw,1);
      if (tstr=="#") then begin
        SMrw.CurncyCode = OrgRow.CurncyCode;
        SMrw.FrRate = OrgRow.FrRate;
        SMrw.ToRateB1 = OrgRow.ToRateB1;
        SMrw.ToRateB2 = OrgRow.ToRateB2;
        SMrw.BaseRate1 = OrgRow.BaseRate1;
        SMrw.BaseRate2 = OrgRow.BaseRate2;      
      end;
    end;
    if (tstr=="#") then begin
      tstr = OrgRow.AccNumber;
    end;
    if ((i==0) and (backstep==true)) then begin
      tstr = OrgRow.AccNumber;
    end;
    SMrw.AccNumber = tstr;
    tstr = Autrw.objstr;
    if (tstr=="#") then begin
      tstr = OrgRow.Objects;
    end;
    if ((i==0) and (backstep==true)) then begin
      if (blank(tstr)) then begin 
        tstr = OrgRow.Objects;
      end;
    end;
    AutoObj(tstr);
    SMrw.Objects = tstr;
    tstr = Autrw.comstr;
    if (tstr=="#") then begin
      tstr = OrgRow.Comment;
    end;
    if ((i==0) and (backstep==true)) then begin
      if (blank(tstr)) then begin
        tstr = OrgRow.Comment;
      end;
    end;
    if (blank(tstr)) then begin
      MatRowPut(SMp,trow,SMrw);
      SMAccName(SMp,trow,true);
      MatRowGet(SMp,trow,SMrw);
    end else begin
      SMrw.Comment = tstr;
    end;
    tstr = Autrw.VATCode;
    if (tstr=="#") or (tstr=="!") then begin
      tstr = OrgRow.VATCode;
    end;
    SMrw.VATCode = tstr;
    SMrw.CurncyCode = OrgRow.CurncyCode;
    if ((Autrw.dstr=="=") or (Autrw.cstr=="=")) then begin
      tval = blankval;
      SMrw.DebVal = tval;
      SMrw.CredVal = tval;
      SMrw.DebVal2 = tval;
      SMrw.CredVal2 = tval;
      SMBal(SMp,tval,-1);
      tval = -tval;
      if (tval>=0) then begin
        SMrw.DebVal = tval;
      end else begin          
        bv = -tval;
        SMrw.CredVal = bv;
      end;
    end else begin
      ATransVal(OrgRow.DebVal,OrgRow.CredVal,Autrw.dstr,Autrw.cstr,dval,acval,Autr.DontSwap!=0);
      SMrw.DebVal = dval;
      SMrw.CredVal = acval;
    end;
    MatRowPut(SMp,trow,SMrw);

/*
      if (TrDNewEF==0) then begin
        if (blankstrp(Autrw.AccNumber)) then
          TrDNewEF = sf+nfr*(trow);
        if (blank(Autrw.dstr) and blank(Autrw.cstr)) then
          TrDNewEF = sf+nfr*(trow)+3;
      end;
*/      
  end;
//  if (TrDNewEF==0) then
//    TrDNewEF = sf+nfr*(trow+1);
L77AutoTransSM:;
  if (blank(ASPr.Code)) then begin goto LAutoTransSM; end;
  Auts = ReadFirstMain(ASPr,1,true);
  if (Auts==false) then begin
    goto LAutoTransSM;
  end;
  row1 = rownr-1;
  MatRowDelete(SMp,rownr);
//  ClearRow(SMp,SMrw,1);
//  SMrw.AccNumber = ASPr.PrelAcc;
  AddPeriodRow(SMp,ASPr.PrelAcc,ASPr,OrgRow);
L88AutoTransSM:;
  SMSumup(SMp);
LAutoTransSM:;
  AutoTransSM = res;
  RETURN;
END;

global
function Boolean SMVc_PasteAccNumber(var record SMVc SMp,Integer wnst,Integer rownr,Boolean changedf)
BEGIN
  Boolean res,autof;
  row SMVc SMrw;
  string 255 tstr,t2;

  res = true;
  MatRowGet(SMp,rownr,SMrw);
  if (wnst!=0) then begin//Rs_normal
    if ((changedf) or (blank(SMrw.Comment))) then begin
      if (AutoTransSM(SMp,rownr)) then begin 
        autof = true; 
      end;
      MatRowGet(SMp,rownr,SMrw);   
    end;
    if (changedf) then begin
      if (blank(SMrw.Objects)) then begin
        PasteAccObj(SMrw.AccNumber,tstr);
        SMrw.Objects = tstr;
      end;
    end;
    tstr = USetStr(1023);
    if ((changedf) or (SMrw.Comment==tstr) or (blank(SMrw.Comment))) then begin
      MatRowPut(SMp,rownr,SMrw);
      SMAccName(SMp,rownr,autof==false);
      MatRowGet(SMp,rownr,SMrw);
    end;
    t2 = USetStr(1023);
    if (t2!=tstr) then begin
      res = false;
    end;  
  end;
  MatRowPut(SMp,rownr,SMrw);
  SMVc_PasteAccNumber = res;
  RETURN;
END;

global
updating function Boolean StoreSMOnEnterKey(var record SMVc SMp)
BEGIN
  Boolean res;
  record SMVc dummySMr;
 
  SetRecordCheckVc("SMVc");
  if (SMVcRecordCheck(SMp,dummySMr,1,1)==0) then begin
    if (RecordStore(SMp,false)) then begin 
      RecordNew(SMp);
      res = true;
    end;   
  end;
  StoreSMOnEnterKey = res;
  RETURN;
END;
