external function Boolean GetSVOSerialItem(string,string,record SVOSerVc);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external updating procedure SetPositionStatus(string,Integer);
external function Boolean GetBatchStatus(var record QualConVc,string,string);
external function Boolean ShouldItemUpdateStock(string);
external updating procedure UpdatePosition(string,string,string,val,val,val);
external updating procedure DeleteBatchBestBefore(string,string);
external updating procedure UpdateBatchBestBefore(string,string,string,Date,Date,val,val,val,Integer,Integer,Boolean,
                                                  string,string,string,string,string,string,string,string,
                                                  string,string,string,string,string,string,string,string, string,string);
external updating procedure UpdateSVOSerStock(string,string,string,string,string,string,string,val,val,Date,Date,val,string);
external updating procedure UpdateSVOSerHist(string,string,string,LongInt,Date,string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external updating procedure UpdateSVOSerFromSH(record IVVc,Integer,val);
external procedure CombineStructure(var record SHVc);
external function Boolean ExpandStructItem(string,string,val,var record SHVc);
external updating procedure UpdateSerStock(string,string,string,val,val);
external procedure GetCustName(string,var string);

updating procedure UpdateBatchTextConsigStock(string artcode,string location,string serialnr,Integer status)
begin
  record SerBalVc SerBalr;
  record BatchTextVc btr;
  record BatchTextVc oldbtr;
  Boolean testf;

  SerBalr.Item = artcode;
  SerBalr.Location = location;  
  SerBalr.Serial = serialnr;  
  if (ReadFirstKey("MainKey",SerBalr,3,true)) then begin
    btr.SerialNr = SerBalr.Serial;
    btr.ArtCode = SerBalr.Item;
    if (ReadFirstMain(btr,2,true)) then begin
      testf = true;
      if (btr.ConsigStock==status) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordCopy(oldbtr,btr);
        btr.ConsigStock = status;
        if (RecordUpdate(oldbtr,btr,true)) then begin end;
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateBatchStatus(record PUVc PUr,row PUVc PUrw,Integer action)
begin
  record QualConVc QCr;
  
  switch (action) begin
    case 0:
      RecordNew(QCr);
      QCr.ArtCode = PUrw.ArtCode;
      QCr.SerialNr = PUrw.SerialNr;
      QCr.StatusCode = PUrw.BatchStatus;
      QCr.AnalyseDate = PUr.TransDate;
      QCr.NewBestBefore = PUrw.BestBefore;
//      QCr.NextAnalyseDate = ;
      QCr.TestedBy = CurrentUser;
      QCr.Comment = PUrw.Spec;
      QCr.OKFlag = 1;
      QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");            
      QCr.AgreementNr = -1;
      QCr.RentResSerNo = -1;
      if (QCr.SerNr>0) then begin        
        if (RecordStore(QCr,false)) then begin
        end;
      end;
    case 1:
      if (GetBatchStatus(QCr,PUrw.ArtCode,PUrw.SerialNr)) then begin
        RecordDelete(QCr);
      end;
  end;
  return;
end;

global
updating procedure ProdUpdateSerialNr(record ProdVc Prodp,record ProdVc Prod2p,Boolean negf)
begin
  row ProdVc Prodrw;
  Integer i,rwcnt;
  val q,costp;
  record MainStockBlock MSb;
  string 255 location;
  Boolean intostockf,outofstockf,consignmentstockf;
  Date bd;
  record BatchTextVc BTr;
  record INVc INr;

  if (nonblank(Prodp.Routing)) then begin
    goto LProdUpdateSerialNr;
  end;
  if (Prodp.PRStatusFlag==kPRStatusFinished) or (Prodp.PRStatusFlag==kPRStatusFinishedandDiscarded) then begin
    outofstockf = true;
    intostockf = true;
  end;
/*  
  if (Prodp.PRStatusFlag==2) then begin
    outofstockf = true;
  end;
  if (RecordValid(Prod2p)) then begin
    switch (Prod2p.PRStatusFlag) begin
      case 0:
        if (Prodp.PRStatusFlag==3) or (Prodp.PRStatusFlag==5) then begin
          outofstockf = true;
          intostockf = true;
        end;
      case 2:
        if (Prodp.PRStatusFlag==3) or (Prodp.PRStatusFlag==5) then begin
          intostockf = true;
        end;
    end;
  end else begin
    if (Prodp.PRStatusFlag==3) or (Prodp.PRStatusFlag==5) then begin
      outofstockf = true;
      intostockf = true;
    end;
  end;
*/
  BlockLoad(MSb);
  location = Prodp.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end; 
/*CONSIGN in Prod   
  rwcnt = MatRowCnt(Prodp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodp,i,Prodrw);
    if (Prodrw.InQty!=0) then begin
      if (nonblank(Prodrw.Item)) then begin
        if (ReadFirstItem(Prodrw.Item,INr,true,false)) then begin
          if (INr.ItemType==kItemTypeStocked) then begin
            BTr.ArtCode = Prodrw.Item;
            BTr.SerialNr = Prodrw.SerialNr;
            if (ReadFirstMain(BTr,2,true)) then begin 
              if (BTr.ConsigStock!=0) then begin
                consignmentstockf = true;
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
*/  
  rwcnt = MatRowCnt(Prodp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodp,i,Prodrw);
    if (outofstockf) then begin
      if (Prodrw.InQty!=0) then begin        
        switch (Prodp.RowsHoldActualQty) begin
          case 1: q = -Prodrw.InQty;
          otherwise q = -Prodrw.InQty*Prodp.Qty;
        end;      
        if (negf) then begin
          q = -q;
        end;
        UpdateSerStock(Prodrw.Item,location,Prodrw.SerialNr,q,costp);
      end;
    end;
    if (intostockf) then begin
      if (Prodrw.OutQty!=0) then begin        
        switch (Prodp.RowsHoldActualQty) begin
          case 1: q = Prodrw.OutQty;
          otherwise q = Prodrw.OutQty*Prodp.Qty;
        end;      
        if (negf) then begin
          q = -q;
        end;
        UpdateSerStock(Prodrw.Item,location,Prodrw.SerialNr,q,Prodrw.ItemCost);
/*CONSIGN in Prod   
        if (consignmentstockf) then begin
          if (nonblank(Prodrw.SerialNr)) then begin
            ReadFirstItem(Prodrw.Item,INr,true,false);
            UpdateBatchBestBefore(Prodrw.Item,Prodrw.Comment,Prodrw.SerialNr,bd,bd,Prodrw.UnitXval,Prodrw.UnitYval,Prodrw.UnitZval,1,0,false,"","","","","","","",blankval,blankval,"","","","","","","","","");
          end;
        end;
*/        
      end;
    end;
  end;
LProdUpdateSerialNr:;  
  return;
end;

global
updating procedure ProdOperationUpdateSerialNr(record ProdOperationVc ProdOpr,Boolean negf)
begin
  row ProdOperationVc ProdOprw;
  Integer i,rwcnt;
  val q,costp;
  record MainStockBlock MSb;
  string 255 location;
  Boolean instockf,outstockf;
  record INVc INr;

  if (ProdOpr.PRStatusFlag==kPRStatusFinished) then begin
    outstockf = true;
    instockf = true;
  end;
  if (ProdOpr.PRStatusFlag==kPRStatusFinishedandDiscarded) then begin
    outstockf = true;
    instockf = true;
  end;
  BlockLoad(MSb);
  location = ProdOpr.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;  
  rwcnt = MatRowCnt(ProdOpr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOpr,i,ProdOprw);
    if (ReadFirstItem(ProdOprw.Item,INr,false,false)) then begin end;
    if (INr.ItemType==1) then begin
      if (outstockf) then begin
        if (ProdOprw.InQty!=0) then begin        
          switch (ProdOpr.RowsHoldActualQty) begin
            case 1: q = -ProdOprw.InQty;
            otherwise q = -ProdOprw.InQty*ProdOpr.Qty;
          end;      
          if (negf) then begin 
            q = -q; 
          end;
          UpdateSerStock(ProdOprw.Item,location,ProdOprw.SerialNr,q,costp);
        end;
      end;
      if (instockf) then begin
        if (ProdOprw.OutQty!=0) then begin        
          switch (ProdOpr.RowsHoldActualQty) begin
            case 1: q = ProdOprw.OutQty;
            otherwise q = ProdOprw.OutQty*ProdOpr.Qty;
          end;      
          if (negf) then begin 
            q = -q; 
          end;
          UpdateSerStock(ProdOprw.Item,location,ProdOprw.SerialNr,q,ProdOprw.ItemCost);
        end;
      end;
    end;
  end;
  return;
end;

updating procedure UpdateRentCharge(string chargenumber,LongInt GRNumber,Boolean negf)
begin
  record RentChrgVc RentChrgr;
  record RentChrgVc OldRentChrgr;
  
  RentChrgr.SerNr = chargenumber;
  if (ReadFirstMain(RentChrgr,1,true)) then begin
    RecordCopy(OldRentChrgr,RentChrgr);
    if (negf) then begin
      RentChrgr.GRNumber = -1;
    end else begin
      RentChrgr.GRNumber = GRNumber;
    end;
    if RecordUpdate(OldRentChrgr,RentChrgr,true) then begin
    end;
  end;
  return;
end;

global
updating procedure PurUpdateSerialNr(record PUVc PUp,Boolean importf,Boolean negf)
BEGIN
  record MainStockBlock MSb;
  row PUVc PUrw;
  Integer rwcnt,i;
  string 255 location;
  string 255 thelocation;
  val t,t2,q2,q;
  record INVc INr;
  Date bd;
  record SerNrTrackBlock SNrb;
  string 255 serialnr;
  val qty;

  if (PUp.Invalid!=0) then begin
    goto LPurUpdateSerialNr;
  end;
  BlockLoad(MSb);
  BlockLoad(SNrb);
  location = PUp.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(PUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    if (blank(PUrw.Location)) then begin
      thelocation = location;
    end else begin
      thelocation = PUrw.Location;
    end;
    q = PUrw.Quant;
    if (negf) then begin 
      q = -q; 
    end;
    switch (PUrw.ovst) begin
      case 0:
        if (nonblank(PUrw.SerialNr)) then begin
          ReadFirstItem(PUrw.ArtCode,INr,true,false);
          if (importf==false) then begin
            if ((nonblankdate(PUrw.BestBefore)) or (PUrw.UnitXval==0) or (PUrw.StockType!=kStockTypeNormal) or (PUrw.TREO!=kNonTREO) or (nonblank(PUrw.SuppSerialNr)) or (nonblank(PUrw.MajStoneDet)) or (nonblank(PUrw.Colour)) or (nonblank(PUrw.Clarity)) or (nonblank(PUrw.Cert)) or (nonblank(PUrw.MinStoneDet)) or (nonblank(PUrw.Metal)) or (nonblank(PUrw.RowWeight)) or (nonblank(PUrw.Size)) or (nonblank(PUrw.Length)) or (nonblank(PUrw.WatchBrand)) or (nonblank(PUrw.StyleName)) or (nonblank(PUrw.WatchMetal)) or (nonblank(PUrw.Movement)) or (nonblank(PUrw.BrcStr)) or (nonblank(PUrw.Gender)) or (nonblank(PUrw.Other)) or (nonblank(PUrw.Other2))) then begin
              UpdateBatchBestBefore(PUrw.ArtCode,PUrw.Spec,PUrw.SerialNr,bd,PUrw.BestBefore,PUrw.UnitXval,PUrw.UnitYval,PUrw.UnitZval,PUrw.StockType,PUrw.TREO,negf,PUrw.SuppSerialNr,PUrw.MajStoneDet,PUrw.Colour,PUrw.Clarity,PUrw.Cert,PUrw.MinStoneDet,PUrw.Metal,PUrw.RowWeight,PUrw.Size,PUrw.Length,PUrw.WatchBrand,PUrw.StyleName,PUrw.WatchMetal,PUrw.Movement,PUrw.BrcStr,PUrw.Gender,PUrw.Other,PUrw.Other2);
            end;
          end;
          if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
            qty = blankval;
            serialnr = FirstInRange(PUrw.SerialNr,60);
            while (nonblank(serialnr)) begin
              UpdateSerStock(PUrw.ArtCode,thelocation,serialnr,1.00,PUrw.CostPrice);
              qty = qty + 1;
              serialnr = NextSerialNumber(PUrw.ArtCode,serialnr,SNrb);
              if (qty>=PUrw.Quant) then begin serialnr = ""; end;
            end;
          end else begin          
            UpdateSerStock(PUrw.ArtCode,thelocation,PUrw.SerialNr,q,PUrw.CostPrice);
          end;
        end;
        t2 = PUrw.Quant;
        if (nonblank(PUrw.BatchStatus)) then begin
          if (negf) then begin 
            UpdateBatchStatus(PUp,PUrw,1);
          end else begin
            UpdateBatchStatus(PUp,PUrw,0);
          end;
        end;
      case 1:
        q = 0; 
        if (nonblank(PUrw.SerialNr)) then begin
          if (importf==false) then begin
            if ((nonblankdate(PUrw.BestBefore)) or (PUrw.UnitXval!=0)) then begin
              if (negf==false) then begin 
                DeleteBatchBestBefore(PUrw.ArtCode,PUrw.SerialNr);
              end;
            end;
          end;
          UpdateSerStock(PUrw.ArtCode,thelocation,PUrw.SerialNr,q,PUrw.CostPrice);        
        end;
        if (importf==false) then begin
          t2 = -PUrw.Quant;
        end else begin
          t2 = 0;
        end;
        if (nonblank(PUrw.BatchStatus)) then begin
          if (negf) then begin 
            UpdateBatchStatus(PUp,PUrw,0);
           end else begin
            UpdateBatchStatus(PUp,PUrw,1);
           end;
        end;
    end;
    if (ShouldItemUpdateStock(PUrw.ArtCode)==false) then begin t2 = blankval; end;
    if (MSb.UnitConvCalc==0) then begin
      q2 = t2*PUrw.Coefficient;
    end else begin
      q2 = t2/PUrw.Coefficient;
    end;
    if (negf) then begin 
      t2 = -t2; 
      q2 = -q2; 
    end;
    if (blank(PUrw.PosCode)) then begin
      if (nonblank(PUrw.ToPosCode)) then begin
        UpdatePosition(PUrw.ArtCode,thelocation,PUrw.ToPosCode,t2,q2,t);
        if (negf) then begin 
          SetPositionStatus(PUrw.ToPosCode,0);
        end else begin
          SetPositionStatus(PUrw.ToPosCode,1);
        end;
      end;
    end else begin
      UpdatePosition(PUrw.ArtCode,thelocation,PUrw.PosCode,t2,q2,t);
    end;
    if (importf==false) then begin
      UpdateRentCharge(PUrw.ChargeNumber,PUp.SerNr,negf);
    end;
  end;
LPurUpdateSerialNr:;  
  return;
end;

global
updating procedure RetPUUpdateSerialNr(record RetPUVc RetPUp,Boolean negf)
begin
  record MainStockBlock MSb;
  row RetPUVc RetPUrw;
  Integer rwcnt,i;
  string 10 location;
  val t,costp,q2;
  record SerNrTrackBlock SNrb;
  string 255 serialnr;
  val qty,sum;
  record INVc INr;

  BlockLoad(MSb);
  BlockLoad(SNrb);
  rwcnt = MatRowCnt(RetPUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RetPUp,i,RetPUrw);
    location = RetPUrw.Location;
    if (blank(location)) then begin
      location = RetPUp.Location;
    end;
    if (blank(location)) then begin
      location = MSb.MainStock;
    end;
    t = -RetPUrw.Quant;
    costp = blankval;
    if (negf) then begin 
      t = -t;
    end;
    ReadFirstItem(RetPUrw.ArtCode,INr,true,false);
    if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
      sum = RetPUrw.FIFORowVal/RetPUrw.Quant;
      qty = blankval;
      serialnr = FirstInRange(RetPUrw.SerialNr,60);
      while (nonblank(serialnr)) begin
        UpdateSerStock(RetPUrw.ArtCode,location,serialnr,-1.00,costp);
        qty = qty + 1;
        serialnr = NextSerialNumber(RetPUrw.ArtCode,serialnr,SNrb);
        if (qty>=RetPUrw.Quant) then begin serialnr = ""; end;
      end;
    end else begin          
      UpdateSerStock(RetPUrw.ArtCode,location,RetPUrw.SerialNr,t,costp);
    end;
    if (MSb.UnitConvCalc==0) then begin
      q2 = t*RetPUrw.Coefficient;
    end else begin
      q2 = t/RetPUrw.Coefficient;
    end;
    UpdatePosition(RetPUrw.ArtCode,location,RetPUrw.PosCode,t,q2,blankval);
  end;
  return;
end;

global
updating procedure RetUpdateSerialNr(record RetVc Retp,Boolean negf)
begin
  record INVc INr;
  row RetVc Retrw;
  Integer rwcnt,i;
  string 255 location;
  record MainStockBlock MSb;
  val q2;
  Date bd;
  record SerNrTrackBlock SNrb;
  string 255 serialnr;
  val qty;
  
  if (Retp.UpdStockFlag==0) then begin
    goto LRetUpdateSerialNr;
  end;
  BlockLoad(MSb);
  BlockLoad(SNrb);
  rwcnt = MatRowCnt(Retp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Retp,i,Retrw);
    location = Retrw.Location;
    if (blank(location)) then begin
      location = Retp.Location;
    end;
    if (blank(location)) then begin
      location = MSb.MainStock;
    end;
    if (ReadFirstItem(Retrw.ArtCode,INr,false,false)) then begin end;
    if (INr.ItemType!=1) then begin goto LRetUpdateSerialNrSkipRow; end;    
    if (negf) then begin
      Retrw.Quant = -Retrw.Quant;
    end;
    if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
      qty = blankval;
      serialnr = FirstInRange(Retrw.SerialNr,60);
      while (nonblank(serialnr)) begin
        UpdateSerStock(Retrw.ArtCode,location,serialnr,1.00,Retrw.CostPrice);
        qty = qty + 1;
        serialnr = NextSerialNumber(Retrw.ArtCode,serialnr,SNrb);
        if (qty>=Retrw.Quant) then begin serialnr = ""; end;
        if (nonblankdate(Retrw.BestBefore)) then begin
          UpdateBatchBestBefore(Retrw.ArtCode,"",serialnr,bd,Retrw.BestBefore,blankval,blankval,blankval,0,0,negf,"","","","","","","","","","","","","","","","","","");
        end;
      end;
    end else begin          
      UpdateSerStock(Retrw.ArtCode,location,Retrw.SerialNr,Retrw.Quant,Retrw.CostPrice);
      if (nonblank(Retrw.SerialNr)) then begin
        if (nonblankdate(Retrw.BestBefore)) then begin
          UpdateBatchBestBefore(Retrw.ArtCode,"",Retrw.SerialNr,bd,Retrw.BestBefore,blankval,blankval,blankval,0,0,negf,"","","","","","","","","","","","","","","","","","");
        end;
      end;
    end;
    if (MSb.UnitConvCalc==0) then begin
      q2 = Retrw.Quant*Retrw.Coefficient;
    end else begin
      q2 = Retrw.Quant/Retrw.Coefficient;
    end;
    if (negf) then begin
      q2 = -q2;
    end;
    UpdatePosition(Retrw.ArtCode,location,Retrw.PosCode,Retrw.Quant,q2,blankval);
    if (negf) then begin
      SetPositionStatus(Retrw.PosCode,0);
    end else begin
      SetPositionStatus(Retrw.PosCode,1);
    end;
LRetUpdateSerialNrSkipRow:;
  end;
LRetUpdateSerialNr:;
  return;
end;

updating procedure SDVcUpdatePRrs(record SDVc SDp,Boolean negf)
BEGIN
  record PRrsVc PRrsr;  
  
  if (nonblank(SDp.PRCode)) then begin  
    PRrsr.PRCode = SDp.PRCode;
    PRrsr.Date = SDp.TransDate;
    PRrsr.RecType = 3;
    PRrsr.SerNr = SDp.SerNr;
    if (negf) then begin
      if (ReadFirstMain(PRrsr,0,true)) then begin
        RecordDelete(PRrsr);
      end;
    end else begin
      if (RecordStore(PRrsr,false)) then begin
      end;
    end;
  end;
  RETURN;
END;

updating procedure UpdatePRFromSD(record SDVc SDp,Boolean negf)
BEGIN
  SDVcUpdatePRrs(SDp,negf);
  RETURN;
END;

global
updating procedure SDUpdateSerialNr(record SDVc SDp,Boolean negf,Boolean serstockf)
begin
  record MainStockBlock MSb;
  record SHVc RecSHr;
  row SDVc SDrw;
  row SHVc SH2rw;
  Integer rwcnt,i,j;
  Integer shrwcnt;
  string 10 location,thelocation;
  Boolean isstruct;
  val t,q2,costp;
  record SerNrTrackBlock SNrb;
  string 255 serialnr;
  val qty,sum;
  record INVc INr;

  BlockLoad(MSb);
  BlockLoad(SNrb);
  location = SDp.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(SDp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDp,i,SDrw);
    thelocation = SDrw.Location;
    if (blank(thelocation)) then begin
      thelocation = location;
    end;
    isstruct = ExpandStructItem(SDrw.ArtCode,SDrw.Recepy,SDrw.Qty,RecSHr);
    if (isstruct==false) then begin
      t = -SDrw.Qty;
      costp = blankval;
      if (ShouldItemUpdateStock(SDrw.ArtCode)==false) then begin
        t = blankval;
      end;
      if (MSb.UnitConvCalc==0) then begin
        q2 = t*SDrw.Coefficient;
      end else begin
        q2 = t/SDrw.Coefficient;
      end;
      if (negf) then begin 
        t = -t; 
        q2 = -q2; 
      end;
      if (serstockf) then begin
        ReadFirstItem(SDrw.ArtCode,INr,true,false);
        if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
          sum = SDrw.FIFORowVal/SDrw.Qty;
          qty = blankval;
          serialnr = FirstInRange(SDrw.SerialNr,60);
          while (nonblank(serialnr)) begin
            UpdateSerStock(SDrw.ArtCode,thelocation,serialnr,-1.00,costp);
            qty = qty + 1;
            serialnr = NextSerialNumber(SDrw.ArtCode,serialnr,SNrb);
            if (qty>=SDrw.Qty) then begin serialnr = ""; end;
          end;
        end else begin          
          UpdateSerStock(SDrw.ArtCode,thelocation,SDrw.SerialNr,t,costp);
        end;
      end;
      UpdatePosition(SDrw.ArtCode,thelocation,SDrw.PosCode,t,q2,blankval);
    end;
  end;
  if (serstockf) then begin
    if (nonblank(SDp.PRCode)) then begin
      UpdatePRFromSD(SDp,negf);
    end;
  end;
  return;
end;

global
updating procedure SHUpdateSerialNr(record SHVc SHp,Boolean negf,Boolean serstockf)
begin
  record MainStockBlock MSb;
  record SHVc RecSHr;
  row SHVc SHrw;
  Integer rwcnt,i;
  string 10 location,thelocation;
  Boolean isstruct;
  val t,q2,costp;
  record TRVc TRr;
  record SerNrTrackBlock SNrb;
  string 255 serialnr;
  val qty,sum;
  record INVc INr;
  
  BlockLoad(MSb);
  BlockLoad(SNrb);
  location = SHp.Location;
  if (blank(location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(SHp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    thelocation = SHrw.Location;
    if (blank(thelocation)) then begin
      thelocation = location;
    end;
    isstruct = ExpandStructItem(SHrw.ArtCode,SHrw.Recepy,SHrw.Ship,RecSHr);
    if (isstruct==false) then begin      
      t = -SHrw.Ship;
      costp = blankval;
      if (MSb.UnitConvCalc==0) then begin
        q2 = t*SHrw.Coefficient;
      end else begin
        q2 = t/SHrw.Coefficient;
      end;
      if (negf) then begin 
        t = -t; 
        q2 = -q2; 
      end;
      if (serstockf) then begin
/*
why cons stock should be unticked
        TRr.Number = SHp.SerNr;
        TRr.IntYc = SHYc;
        if (ReadFirstMain(TRr,0,true)) then begin
          UpdateBatchTextConsigStock(SHrw.ArtCode,thelocation,SHrw.SerialNr,0);
        end;
*/        
        ReadFirstItem(SHrw.ArtCode,INr,true,false);
        if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
          sum = SHrw.FIFORowVal/SHrw.Ship;
          qty = blankval;
          serialnr = FirstInRange(SHrw.SerialNr,60);
          while (nonblank(serialnr)) begin
            UpdateSerStock(SHrw.ArtCode,thelocation,serialnr,-1.00,costp);
            qty = qty + 1;
            serialnr = NextSerialNumber(SHrw.ArtCode,serialnr,SNrb);
            if (qty>=SHrw.Ship) then begin serialnr = ""; end;
          end;
        end else begin          
          UpdateSerStock(SHrw.ArtCode,thelocation,SHrw.SerialNr,t,costp);
        end;
      end;
      UpdatePosition(SHrw.ArtCode,thelocation,SHrw.PosCode,t,q2,blankval);
    end;
  end;
  return;
end;

updating procedure StockMovUpdateSerialNr_Out(record StockMovVc StockMovp,string frlocation,record SerNrTrackBlock SNrb,
                                              row StockMovVc StockMovrw,Boolean sentquantf,Boolean negf,record INVc INr)
BEGIN
  string 20 frpos;
  val qty,smquant,costp;
  Date smdate;
  string 255 serialnr;

  if (sentquantf) then begin
    smquant = StockMovrw.SentQuant;
    smdate = StockMovp.SentTransDate;
  end else begin
    smquant = StockMovrw.Quant;
    smdate = StockMovp.TransDate;
  end;
  if (negf) then begin
    smquant = -smquant;
  end;
  if (smquant!=0) then begin
    costp = blankval;
    if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
      qty = blankval;
      serialnr = FirstInRange(StockMovrw.SerialNr,60);
      while (nonblank(serialnr)) begin
        UpdateSerStock(StockMovrw.ArtCode,frlocation,serialnr,-1.00,costp);
        qty = qty + 1;
        serialnr = NextSerialNumber(StockMovrw.ArtCode,serialnr,SNrb);
        if (qty>=smquant) then begin serialnr = ""; end;
      end;
    end else begin          
      qty = -smquant;
      UpdateSerStock(StockMovrw.ArtCode,frlocation,StockMovrw.SerialNr,qty,costp);
    end;
    frpos = StockMovp.FrPos;
    if (blank(frpos)) then begin
      frpos = StockMovrw.FrPosCode;
    end;
  end;
  return;
end;

updating procedure StockMovUpdateSerialNr_In(record StockMovVc StockMovp,string tolocation,record SerNrTrackBlock SNrb,
                                             row StockMovVc StockMovrw,Boolean sentquantf,Boolean negf,record INVc INr)
BEGIN
  string 20 topos;
  val qty,smquant;
  Date smdate;
  string 255 serialnr;

  if (sentquantf) then begin
    smquant = StockMovrw.SentQuant;
    smdate = StockMovp.SentTransDate;
  end else begin
    smquant = StockMovrw.Quant;
    smdate = StockMovp.TransDate;
  end;
  if (negf) then begin
    smquant = -smquant;
  end;
  if (smquant!=0) then begin
    if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
      qty = blankval;
      serialnr = FirstInRange(StockMovrw.SerialNr,60);
      while (nonblank(serialnr)) begin
        UpdateSerStock(StockMovrw.ArtCode,tolocation,serialnr,1.00,StockMovrw.NewPrice);
        qty = qty + 1;
        serialnr = NextSerialNumber(StockMovrw.ArtCode,serialnr,SNrb);
        if (qty>=smquant) then begin serialnr = ""; end;
      end;
    end else begin          
      UpdateSerStock(StockMovrw.ArtCode,tolocation,StockMovrw.SerialNr,smquant,StockMovrw.NewPrice);
    end;
    topos = StockMovp.ToPos;
    if (blank(topos)) then begin
      topos = StockMovrw.ToPosCode;
    end;
  end;
LStockMovUpdateSerialNr_In:;
  return;
end;

global
updating procedure StockMovUpdateSerialNr(record StockMovVc StockMovp,record StockMovVc prevStockMovp,Boolean negf)
BEGIN
  row StockMovVc StockMovrw;
  Integer rwcnt,i;
  record MainStockBlock MSb;
  string 20 frlocation,tolocation;
  Boolean fromf,fromsendf,fromthrouf,tof,tothrouf;
  record SerNrTrackBlock SNrb;
  record INVc INr;

  BlockLoad(SNrb);
  frlocation = StockMovp.FrLocation;
  if (blank(frlocation)) then begin
    frlocation = MSb.MainStock;
  end;
  tolocation = StockMovp.ToLocation;
  if (blank(tolocation)) then begin
    tolocation = MSb.MainStock;
  end;

  if (StockMovp.SentOKFlag==0) then begin
    if (StockMovp.OKFlag!=0) then begin
      fromf = true;
      tof = true;
      if (RecordValid(prevStockMovp)) then begin
        if (prevStockMovp.OKFlag!=0) then begin
          fromf = false;
          tof = false;
        end;
      end;
    end;
  end else begin
    fromsendf = true;
    tothrouf = true;
    if (RecordValid(prevStockMovp)) then begin
      if (prevStockMovp.SentOKFlag!=0) then begin
        fromsendf = false;
        tothrouf = false;
      end;
    end;
    if (StockMovp.OKFlag!=0) then begin
      fromthrouf = true;
      tof = true;
      if (RecordValid(prevStockMovp)) then begin
        if (prevStockMovp.OKFlag!=0) then begin
          fromthrouf = false;
          tof = false;
        end;
      end;
    end;
  end;

  if (fromf==false) and (fromsendf==false) and (tof==false) and (tothrouf==false) and (fromthrouf==false) then begin
    goto LStockMovUpdateItemHist;
  end;
  BlockLoad(MSb);
  rwcnt = MatRowCnt(StockMovp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovp,i,StockMovrw);
    ReadFirstItem(StockMovrw.ArtCode,INr,true,false);
    if (fromsendf) then begin
      if (StockMovrw.SentQuant!=0) then begin
        StockMovUpdateSerialNr_Out(StockMovp,frlocation,SNrb,StockMovrw,true,negf,INr);
      end;
    end else begin
      if (fromf) then begin
        if (StockMovrw.Quant!=0) then begin
          StockMovUpdateSerialNr_Out(StockMovp,frlocation,SNrb,StockMovrw,false,negf,INr);
        end;
      end;
    end;
    if (tothrouf) then begin
      if (StockMovrw.SentQuant!=0) then begin
        StockMovUpdateSerialNr_In(StockMovp,StockMovp.ThrouLocation,SNrb,StockMovrw,true,negf,INr);
      end;
    end;
    if (fromthrouf) then begin
      if (StockMovrw.Quant!=0) then begin
        StockMovUpdateSerialNr_Out(StockMovp,StockMovp.ThrouLocation,SNrb,StockMovrw,false,negf,INr);
      end;
    end;
    if (tof) then begin
      if (StockMovrw.Quant!=0) then begin
        StockMovUpdateSerialNr_In(StockMovp,tolocation,SNrb,StockMovrw,false,negf,INr);
      end;
    end;
  end;
LStockMovUpdateItemHist:;
  return;
end;

global
updating procedure WSUpdateSerialNr(record WSVc WSp,Boolean negf,Boolean serstockf)
begin
  row WSVc WSrw;
  Integer rwcnt,i;
  string 255 thelocation;
  val t,q2,costp;
  record MainStockBlock MSb;
  record INVc INr;
  Boolean isstruct;
  
  if (WSp.UpdStockFlag==0) then begin
    goto LWSUpdateSerialNr;
  end;
  BlockLoad(MSb);
  thelocation = WSp.Location;
  if (blank(thelocation)) then begin
    thelocation = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(WSp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WSp,i,WSrw);
    if (ShouldItemUpdateStock(WSrw.ArtCode)==false) then begin goto L22WSUpdateSerialNr; end;
    if (isstruct==false) then begin
      t = -WSrw.Quant;
      costp = blankval;
      if (MSb.UnitConvCalc==0) then begin
        q2 = t * WSrw.Coefficient;
      end else begin
        q2 = t / WSrw.Coefficient;
      end;
      if (negf) then begin 
        t = -t; 
        q2 = -q2; 
      end;
      if (serstockf) then begin
        UpdateSerStock(WSrw.ArtCode,thelocation,WSrw.SerialNr,t,costp);
      end;
      UpdatePosition(WSrw.ArtCode,thelocation,WSrw.PosCode,t,q2,blankval);
    end;
L22WSUpdateSerialNr:;
  end;
LWSUpdateSerialNr:;  
  return;
end;

global
updating procedure IVCashUpdateSerialNr(record IVCashVc IVCashp)
BEGIN
  val t,costp;
  row IVCashVc IVCashrw;
  Integer rwcnt,i;
  record SHVc RecSHr;
  Boolean isstruct;
  record MainStockBlock MSb;
  string 255 location;
  Date blankd;
  
  BlockLoad(MSb);
  location = IVCashp.Location;
  if (blank(IVCashp.Location)) then begin
    location = MSb.MainStock;
  end;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    if (IVCashrw.stp==1) then begin
      isstruct = ExpandStructItem(IVCashrw.ArtCode,IVCashrw.Recepy,IVCashrw.Quant,RecSHr);
      if (isstruct==false) then begin      
        if (IVCashp.UpdStockFlag!=0) then begin
          t = -IVCashrw.Quant;
          costp = blankval;
          UpdateSerStock(IVCashrw.ArtCode,location,IVCashrw.SerialNr,t,costp);
        end;
        if (MSb.updateSVGM!=0) then begin
          UpdateSVOSerStock(IVCashrw.ArtCode,IVCashrw.Spec,IVCashrw.SerialNr,IVCashrw.SecondarySerialNr,IVCashrw.AlternateDeviceID,IVCashp.CustCode,IVCashp.Addr0,
                            IVCashrw.BasePrice,IVCashrw.Price,IVCashp.TransDate,blankd,t,"");
          UpdateSVOSerHist(IVCashrw.ArtCode,IVCashrw.SerialNr,"IVCashVc",IVCashp.SerNr,IVCashp.TransDate,IVCashp.CustCode,"");
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure IVUpdateSerialNr(record IVVc IVp,Boolean negf,Boolean serstockf)
begin
  val t,costp,q2;
  row IVVc IVrw;
  Integer rwcnt,i;
  record SHVc RecSHr;
  Boolean isstruct;
  string 200 cucode,name;
  record MainStockBlock MSb;
  string 255 location,serialnr;
  val serqty;
  Date blankd;
  record SerNrTrackBlock SNrb;
  record INVc INr;
  
  BlockLoad(MSb);
  BlockLoad(SNrb);
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.NotUpdStockFlag==0) and (IVrw.ovst==0) then begin
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection) then begin
      location = IVrw.Location;
      if (blank(location)) then begin
        location = IVp.Location;
      end;
      if (blank(location)) then begin
        location = MSb.MainStock;
      end;
      ReadFirstItem(IVrw.ArtCode,INr,true,false);
      RecordNew(RecSHr);
      isstruct = false;
      if (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
        isstruct = ExpandStructItem(IVrw.ArtCode,IVrw.Recepy,IVrw.Quant,RecSHr);
        CombineStructure(RecSHr);
      end;
      if (isstruct==false) then begin      
        if (IVp.UpdStockFlag!=0) then begin
//          if ((IVrw.OrdRow==-1) or (IVp.QTNr!=-1)) then begin //why  quotation  ? what if qt crated order ? 
          if (IVrw.OrdRow==-1) then begin
            if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
              t = -IVrw.Quant;
            end else begin
              switch (IVrw.stp) begin
                case 11: t = -IVrw.Quant;
                otherwise t = IVrw.Quant;
              end;              
            end;  
            if (MSb.UnitConvCalc==0) then begin
              q2 = t*IVrw.Coefficient;
            end else begin
              q2 = t/IVrw.Coefficient;
            end;
            if (negf) then begin
              t = -t;
              q2 = -q2;
            end;
            costp = blankval; 
            if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
//              UpdateBatchTextConsigStock(IVrw.ArtCode,location,IVrw.SerialNr,0);//why it should untick cons stock ? 
            end else begin
/*
not sure about it            
              switch (IVrw.stp) begin
                case 11:
                  UpdateBatchTextConsigStock(IVrw.ArtCode,location,IVrw.SerialNr,0);
                otherwise
                  UpdateBatchTextConsigStock(IVrw.ArtCode,location,IVrw.SerialNr,1);                  
              end;              
*/              
            end;
            if (serstockf) then begin
              if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
                if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
                  t = -1.00;
                end else begin
                  switch (IVrw.stp) begin
                    case 11: t = -1.00;
                    otherwise t = 1.00;
                  end;              
                end;  
                if (MSb.UnitConvCalc==0) then begin
                  q2 = t*IVrw.Coefficient;
                end else begin
                  q2 = t/IVrw.Coefficient;
                end;
                if (negf) then begin
                  t = -t;
                  q2 = -q2;
                end;
                serqty = blankval;
                serialnr = FirstInRange(IVrw.SerialNr,60);
                while (nonblank(serialnr)) begin
                  UpdateSerStock(IVrw.ArtCode,location,serialnr,t,costp);
                  serqty = serqty + 1;
                  serialnr = NextSerialNumber(IVrw.ArtCode,serialnr,SNrb);
                  if (serqty>=IVrw.Quant) then begin serialnr = ""; end;
                end;
              end else begin          
                UpdateSerStock(IVrw.ArtCode,location,IVrw.SerialNr,t,costp);
              end;
            end;
            UpdatePosition(IVrw.ArtCode,location,IVrw.PosCode,t,q2,blankval);
          end;
        end;        
      end;
    end;
    end;
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==11) then begin
      if (MSb.updateSVGM!=0) then begin            
        if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
          if (NonBlank(IVp.OrgCust)) then begin
            cucode = IVp.OrgCust;
            GetCustName(cucode,name);
          end else begin
            cucode = IVp.CustCode;
            name = IVp.Addr0;
          end;
          t = IVrw.Quant;
          switch (IVrw.stp) begin
            case 11: t = -t;
          end;
        end else begin
          cucode = "";
          name = "";
          switch (IVrw.stp) begin
            case 11: t = IVrw.Quant;
            otherwise t = -IVrw.Quant;
          end;
        end;  
        if (negf) then begin
          t = -t;
        end;
        if (serstockf) then begin
          if ((IVp.OrderNr==-1) or (IVrw.Quant==1)) then begin
            if (SNrb.BulkSerialNos!=0) and (INr.SerNrf==1) then begin
              if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
                t = 1.00;
                switch (IVrw.stp) begin
                  case 11: t = -t;
                end;
              end else begin
                switch (IVrw.stp) begin
                  case 11: t = 1.00;
                  otherwise t = -1.00;
                end;
              end;  
              if (negf) then begin
                t = -t;
              end;

              serqty = blankval;
              serialnr = FirstInRange(IVrw.SerialNr,60);
              while (nonblank(serialnr)) begin
                UpdateSVOSerStock(IVrw.ArtCode,IVrw.Spec,serialnr,"","",cucode,name,
                                  IVrw.BasePrice,IVrw.Price,IVp.TransDate,blankd,t,"");
                UpdateSVOSerHist(IVrw.ArtCode,serialnr,"IVVc",IVp.SerNr,IVp.TransDate,IVp.CustCode,"");
                serqty = serqty + 1;
                serialnr = NextSerialNumber(IVrw.ArtCode,serialnr,SNrb);
                if (serqty>=IVrw.Quant) then begin serialnr = ""; end;
              end;
            end else begin          
              UpdateSVOSerStock(IVrw.ArtCode,IVrw.Spec,IVrw.SerialNr,IVrw.SecondarySerialNr,IVrw.AlternateDeviceID,cucode,name,
                                IVrw.BasePrice,IVrw.Price,IVp.TransDate,blankd,t,"");
              UpdateSVOSerHist(IVrw.ArtCode,IVrw.SerialNr,"IVVc",IVp.SerNr,IVp.TransDate,IVp.CustCode,"");
            end;
          end else begin
            UpdateSVOSerFromSH(IVp,i,t);
          end;
        end;
      end;    
    end;
  end;
  return;
end;
