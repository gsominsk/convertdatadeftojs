external updating procedure StoreInShopBaskDestInvoice(string,Integer,LongInt,string,string,val,val,val,string,Integer,Integer,string,Integer,string,LongInt,string,val,val,val,val,val);

global
updating function Integer RsrtEventShopBaskVClassSaveRemote(record SoftFVc Softr,var string fieldname,var Integer rownr)
begin
  Integer res;
  row SoftFVc Softrw;
  Integer i,rwcnt;
  record RsrtEventVc REventr;
  row RsrtEventVc REventrw;

  fieldname = "";
  rownr = -1;
  rwcnt = MatRowCnt(Softr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Softr,i,Softrw);
    if (Softrw.Quant==0) then begin
      res = 1058;
      fieldname = "Quant";
      rownr = i;
      goto LRsrtEventShopBaskVClassSaveRemote;
    end;
  end;
  REventr.SerNr = Softr.SerNr;
  if (ReadFirstMain(REventr,1,true)) then begin
    if (Softr.SelectedRow>=0) then begin
      MatRowGet(REventr,Softr.SelectedRow,REventrw);
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Softr,i,Softrw);
      if (REventrw.JobNr>0) and (REventrw.Invoicing==kResortEventOnReservation) then begin
        StoreInShopBaskDestInvoice(Softr.CustCode,kShopBaskOwnerReservation,REventrw.JobNr,Softrw.ArtCode,"",Softrw.Quant,Softrw.Price,Softrw.vRebate,
                                   Softr.Objects,0,0,"",0,"RsrtEventVc",REventr.SerNr,"",blankval,blankval,blankval,blankval,blankval);
      end else begin
        StoreInShopBaskDestInvoice(Softr.CustCode,kShopBaskOwnerRsrtEvent,REventr.SerNr,Softrw.ArtCode,"",Softrw.Quant,Softrw.Price,Softrw.vRebate,
                                   Softr.Objects,0,0,"",0,"RsrtEventVc",REventr.SerNr,"",blankval,blankval,blankval,blankval,blankval);
      end;
    end;
  end;
LRsrtEventShopBaskVClassSaveRemote:;  
  RsrtEventShopBaskVClassSaveRemote = res;
  return;
end;

global
procedure RsrtEventVc_PasteEventType(var record RsrtEventVc REventr)
begin
  record RsrtEventTypeVc RETr;
  
  RETr.Code = REventr.EventType;
  if (ReadFIrstMain(RETr,1,true)) then begin
    REventr.ResLoc = RETr.ResLoc;
    REventr.Comment = RETr.Comment;
  end;
  return;
end;

global
procedure RsrtEventVc_PasteVECode(var record RsrtEventVc REventr)
begin
  record CUVc VEr;
  
  VEr.Code = REventr.VECode;
  if (ReadFIrstMain(VEr,1,true)) then begin
    REventr.VEName = VEr.Name;
  end;
  return;
end;

global
procedure RsrtEventVc_PasteResource(var record RsrtEventVc REventr)
begin
  record ResVc Resr;
  
  Resr.Code = REventr.ResCode;
  if (ReadFIrstMain(Resr,1,true)) then begin
    REventr.MaxPersons = Resr.MaxPersons;
  end;
  return;
end;

global
procedure RsrtEventVc_PasteCustCode(var record RsrtEventVc REventr,string package,string seqnr,Integer rownr)
begin
  record CUVc CUr;
  row RsrtEventVc REventrw;
  record INVc INr;
  record RsrtEventTypeVc RETr;
  
  MatRowGet(REventr,rownr,REventrw);
  CUr.Code = REventrw.CustCode;
  if (ReadFIrstMain(CUr,1,true)) then begin
    RETr.Code = REventr.EventType;
    ReadFirstMain(RETr,1,true);
    INr.Code = RETr.ArtCode;
    ReadFirstMain(INr,1,true);
    REventrw.CustName = CUr.Name;
    REventrw.Price = INr.UPrice1;
    REventrw.RsrtEventTypePack = package;
    REventrw.SequenceNr = StringToLongInt(seqnr);
    MatRowPut(REventr,rownr,REventrw);
  end;
  return;
end;

global
procedure RsrtEventVc_PasteGuestCode(var record RsrtEventVc REventr,string package,string seqnr,Integer rownr)
begin
  record CUVc CUr;
  row RsrtEventVc REventrw;
  
  MatRowGet(REventr,rownr,REventrw);
  CUr.Code = REventrw.GuestCode;
  if (ReadFIrstMain(CUr,1,true)) then begin
    REventrw.CustCode = CUr.Code;
    REventrw.CustName = CUr.Name;
    REventrw.GuestName = CUr.Name;
    REventrw.RsrtEventTypePack = package;
    REventrw.SequenceNr = StringToLongInt(seqnr);
    MatRowPut(REventr,rownr,REventrw);
  end;
  return;
end;

global
procedure RsrtEventScheduleVc_PasteEventType(var record RsrtEventScheduleVc RESr)
begin
  record RsrtEventTypeVc RETr;
  
  RETr.Code = RESr.EventType;
  if (ReadFIrstMain(RETr,1,true)) then begin
    RESr.ResLoc = RETr.ResLoc;
    RESr.Comment = RETr.Comment;
  end;
  return;
end;

global
procedure RsrtEventVc_PasteJobToRsrtEvent(var record RsrtEventVc REventr,Integer rownr)
begin
  record JobVc Jobr;
  record CUVc CUr;
  row RsrtEventVc REventrw;
  
  MatRowGet(REventr,rownr,REventrw);
  Jobr.SerNr = REventrw.JobNr;
  ReadFirstMain(Jobr,1,true);  
  REventrw.CustCode = Jobr.CUCode;
  CUr.Code = REventrw.GuestCode;
  ReadFirstMain(CUr,1,true);
  REventrw.CustName = Jobr.CUName;
  CUr.Code = REventrw.GuestCode;
  ReadFirstMain(CUr,1,true);
  REventrw.CustName = CUr.Name;
  MatRowPut(REventr,rownr,REventrw);
  return;
end;
