external function string 255 DateToStr(Date);
external function Boolean GetFullCurncyRateDate(var string,Date,var val,var val,var val,var val,var val,var Date);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function Boolean FindHCUD(string,Date,string,var record HCUDVc);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external updating procedure UpdateJobFromIV(record IVVc,Boolean,record IVVc,Boolean);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure IVSumup(var record IVVc,Boolean);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external function Boolean PasteCustInInv(var record IVVc);
external procedure IPPastePayMode(var record IPVc);
external procedure GetBaseCurncy(Integer,var string);
external function integer GetGuestsInJob(record JobVc);

global
procedure SetupDownPayReceipt(var Record IPVc IPr,LongInt jobnr,Val Monto,String CustCode)
BEGIN
  Record IPVc Rec;
  Record CUVc CUr;
  Row IPVc IPrw;
  String 10 tstr;

  if (Monto<>0) then begin  
    RecordNew(IPr);
    GetBaseCurncy(1,tstr);    
    ClearRow(IPr,IPrw,1);
    Rec.Comment       =  USetStr(1876) & " ResNr " & jobnr;
    // Rec.PayMode       = "";
    IPPastePayMode(IPr);
    IPr.RecNumber     = "Res "& jobnr; 
    IPr.TransDate     = CurrentDate;
    IPr.CurPayVal     = Monto;     

    IPrw.ChequeNr    =  -1;
    IPrw.InvoiceNr   =  -1;
    IPrw.stp         =  1;
    IPrw.CustCode    =  CustCode;
    CUr.Code = CustCode;
    if readfirstmain(CUr,1,true) then begin
      IPrw.CustName  = CUr.Name;   
    end;
    IPrw.PayMode   = "";
    IPrw.RecVal    = Monto;   
    IPrw.InvVal    = Monto;     
    IPrw.BankVal   = Monto;     
    IPrw.CUPNr     = jobnr;
    MatRowPut(IPr,0,IPrw);
    IPr.SerNr = -1;
  end;
  return;
end;

function val DaughterReservationsTotalSum4(LongInt groupresnr)
begin
  val res;
  record JobVc Jobr;
  Boolean found;
  
  if (groupresnr>0) then begin
    found = true;
    Jobr.Mother = groupresnr;
    while LoopKey("MotherKey",Jobr,1,found) begin
      if (Jobr.Mother!=groupresnr) then begin found = false; end;
      if (found) then begin
        res = res + Jobr.TotalSum4;
      end;
    end;
  end;
  DaughterReservationsTotalSum4 = res;
  return;
end;

function string 255 TimeToString(time t)
begin
  string 255 tstr;
  
  if (nonblanktime(t)) then begin
    if (t.hour<10) then begin
      tstr = "0";
    end;
    tstr = tstr & t.hour;

    tstr = tstr & ":";
    
    if (t.minute<10) then begin
      tstr = tstr & "0";
    end;
    tstr = tstr & t.minute;
  end;
  
  TimeToString = tstr;
  return;
end;

global
procedure ReservationDetailsToInv(record HotelBlock Hotelb,record JobVc Jobr,var record IVVc IVp)
begin
  record ResVc Resr;
  record ResUsageVc ResUsager;
  row IVVc IVrw;
  LongInt pers;
  record JobVc dJobr;
  Boolean found;

  if (nonblank(Jobr.ResCode)) then begin  
    Resr.Code = Jobr.ResCode;
    ReadFirstMain(Resr,1,true);
    if (NonBlank(Resr.Name)) then begin 
      ClearRow(IVp,IVrw,1);
      IVrw.Spec = Resr.Name;
      MatRowPut(IVp,MatRowCnt(IVp),IVrw);
    end;
  end;
  ResUsager.Code = Jobr.ResUsage;
  ReadFirstMain(ResUsager,1,true);
  if (NonBlank(ResUsager.Comment)) then begin 
    ClearRow(IVp,IVrw,1);
    IVrw.Spec = ResUsager.Comment & " ";
    MatRowPut(IVp,MatRowCnt(IVp),IVrw);
  end;
  
  ClearRow(IVp,IVrw,1);
  IVrw.Spec = USetStr(20750) & " " & DateToStr(Jobr.TransDate) & "  " & TimeToString(Jobr.StartTime);
  MatRowPut(IVp,MatRowCnt(IVp),IVrw);

  ClearRow(IVp,IVrw,1);
  IVrw.Spec = USetStr(20751) & " " & DateToStr(Jobr.EndDate) & "  " & TimeToString(Jobr.EndTime);
  MatRowPut(IVp,MatRowCnt(IVp),IVrw);
  
  ClearRow(IVp,IVrw,1);
  pers = GetGuestsInJob(Jobr);
  if (Jobr.Children>0) then begin
    pers = pers + Jobr.Children;    
  end;
  IVrw.Spec = USetStr(20752) & " " & pers;
  if (Jobr.Children>0) then begin
    IVrw.Spec = IVrw.Spec & "  " & USetStr(20753) & " " & Jobr.Children;
  end;  
  MatRowPut(IVp,MatRowCnt(IVp),IVrw);
  if (Hotelb.DownForMotherRsrvIncDaughDet!=0) then begin    
    if (Jobr.SerNr>0) then begin
      found = true;
      dJobr.Mother = Jobr.SerNr;
      while LoopKey("MotherKey",dJobr,1,found) begin
        if (dJobr.Mother!=Jobr.SerNr) then begin found = false; end;
        if (found) then begin
          ReservationDetailsToInv(Hotelb,dJobr,IVp);
        end;
      end;
    end;
  end;
  return;
end;

global
updating function boolean SetupJobDownPayInv(var record IVVc IVp,record JobVc Jobr,String CustCode,boolean webf)
begin
  LongInt newnr;
  val temp,alreadydownpaid;
  record DownPayBlock DPb;
  record HotelBlock Hotelb;
  record INVc INr;
  record CUVc CUr;
  row IVVc IVrw;
  Integer rwcnt;
  string 255 tstr;
  string 10 VATCode;
  string 5 Comment;
  Boolean res,foundf;
  val vatv,t1,amount,TotalSum4;
  record HCUDVc HCUDr;
  record ShopBaskVc ShopBaskr;
  string 2 PrevPayDeal;
  val fr,to1,to2,br1,br2;
  string 255 tocur;
  Date td;
      
  BlockLoad(DPb);
  BlockLoad(Hotelb);
  if blank(DPb.ArtCode) then begin 
    goto LSetupJobDownPayInv;
  end;  

  foundf = true;
  ShopBaskr.Owner = kShopBaskOwnerReservation;
  ShopBaskr.OwnerSerNr = Jobr.SerNr;
  while (LoopKey("OwnerSerNr",ShopBaskr,2,foundf)) begin
    if ((ShopBaskr.OwnerSerNr!=Jobr.SerNr) or (ShopBaskr.Owner!=kShopBaskOwnerReservation)) then begin
      foundf = false;
    end;    
    if (foundf) then begin
      if ((ShopBaskr.CUCode==CustCode) and (ShopBaskr.ItemCode==DPb.ArtCode)) then begin
        if (IVp.CurncyCode==ShopBaskr.CurncyCode) then begin              
          if (ShopBaskr.PriceInCur<>0) then begin
            t1 = ShopBaskr.PriceInCur;      
          end else begin
            Base1ToOther(IVp.CurncyCode,ShopBaskr.Price,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,t1,DefaultCurRoundOff);
          end;
        end else begin
          if (ShopBaskr.PriceInCur<>0) then begin
            t1 = MulRateToBase1(ShopBaskr.CurncyCode,ShopBaskr.PriceInCur,ShopBaskr.FrRate,ShopBaskr.ToRateB1,ShopBaskr.ToRateB2,ShopBaskr.BaseRate1,ShopBaskr.BaseRate2,DefaultCurRoundOff);
            tocur = IVp.CurncyCode;
            td = IVp.InvDate;
            GetFullCurncyRateDate(tocur,td,fr,to1,to2,br1,br2,td); 
            Base1ToOther(tocur,t1,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,t1,DefaultCurRoundOff);  
          end else begin
            Base1ToOther(IVp.CurncyCode,ShopBaskr.Price,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,t1,DefaultCurRoundOff);
          end;
        end;
        alreadydownpaid = alreadydownpaid - t1;      
      end;
    end;
  end;      
  res = false;
  RecordNew(IVp);  
  IVp.CurncyCode = Jobr.CurncyCode;
  IVp.FrRate = Jobr.FrRate;
  IVp.ToRateB1 = Jobr.ToRateB1;
  IVp.ToRateB2 = Jobr.ToRateB2;
  IVp.BaseRate1 = Jobr.BaseRate1;
  IVp.BaseRate2 = Jobr.BaseRate2;
  
  IVp.JobNr     = Jobr.SerNr;  
  IVp.CustCode  = CustCode;
  if PasteCustInInv(IVp) then begin end;
  IVp.InclVAT = Jobr.InclVAT;

  IVp.RefStr = Jobr.RefStr;
  IVp.InvComment = Jobr.Comment;
  IVp.LangCode   = Jobr.LangCode;
  IVp.OurContact = Jobr.CustContact;
  IVp.Objects    = Jobr.Objects;
  IVp.SalesMan   = Jobr.SalesMan;
//  IVp.CurncyCode = Jobr.CurncyCode;
  IVp.PriceList = Jobr.PriceList;
  FindHCUD(IVp.CustCode,Jobr.TransDate,Jobr.ResStatus,HCUDr);
  PrevPayDeal = IVp.PayDeal;
  IVp.PayDeal = HCUDr.DownPayDeal;
  if (blank(IVp.PayDeal) and webf) then begin
    IVp.PayDeal = Hotelb.WebDownPayDeal;
  end;
  if (blank(IVp.PayDeal)) then begin
    IVp.PayDeal = Hotelb.DownPayDeal;
  end;
  if (blank(IVp.PayDeal)) then begin
    IVp.PayDeal = DPb.PayDeal;
  end;
  TotalSum4 = Jobr.TotalSum4;
  if (Hotelb.DownForMotherRsrv!=0) then begin
    TotalSum4 = TotalSum4 + DaughterReservationsTotalSum4(Jobr.SerNr);
  end;
  if (nonblank(HCUDr.DownPercent)) then begin
    amount = (HCUDr.DownPercent/100.00) * TotalSum4;
  end else begin
    if (amount==0 and webf)  then begin
      amount = (Hotelb.WebDownPercent/100) * TotalSum4;
    end;
  end;
  
  if (amount==0)  then begin
    amount = (Hotelb.DownPercent/100) * TotalSum4;
  end;
  if (amount==0)  then begin
    amount = (DPb.Percentage/100) * TotalSum4;
  end;
  if ((amount + alreadydownpaid)>TotalSum4) then begin
    amount = TotalSum4 - alreadydownpaid;    
  end;
  if (amount<=0) then begin
    goto LSetupJobDownPayInv;
  end;
  PastePDInInv(IVp,PrevPayDeal,false);
  IVp.InvType = kInvoiceTypeDownpayment;
  VATCode = DPb.VATCode;
  if (blank(VATCode)) then begin
    GetItemVATCode(DPb.ArtCode,IVp.ExportFlag,VATCode,true);
  end;
//  FindSalesExVat(VATCode,sum,1,t);
  
  ClearRow(IVp,IVrw,5);
  if (nonblank(DPb.TextA)) then begin
    IVrw.Spec = DPb.TextA;
  end else begin
    INr.Code = DPb.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin      
      if (GetItemNameStr(1,tstr,Jobr.LangCode,INr.Name,INr.Code)) then begin end;
      IVrw.Spec = tstr;
    end;  
  end;
  IVrw.Spec = IVrw.Spec & " ";
  IVrw.Spec = IVrw.Spec & Jobr.SerNr;
  GetItemSalesAcc(DPb.ArtCode,IVp.ExportFlag,tstr);
  IVrw.VATCode = VATCode;

  switch (DPb.CalcMode) begin
    case 0:
      IVrw.Sum = amount;
    case 1:
      switch (IVp.InclVAT) begin
        case 0:
          MulVATIV(IVrw.VATCode,amount,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
          IVrw.Sum = amount;
        case 1:
          MulVATIV(IVrw.VATCode,amount,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
          IVrw.Sum = amount - vatv - t1;
        case 2:
          MulVATIV(IVrw.VATCode,amount,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
          IVrw.Sum = amount - vatv;
      end;
  end;

  IVrw.SalesAcc = tstr;
  IVrw.Objects = "";

  MatRowPut(IVp,0,IVrw);
  ReservationDetailsToInv(Hotelb,Jobr,IVp);
    

  IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,false,"");
//  CUr.Code = IVp.CustCode;
//  if (ReadFirstMain(CUr,1,true)) then begin end;
//  IVp.OfficialSerNr = FindNextLegalSerNr(IVp,CUr.Classification);                  //POSN
 
  if ((MatRowCnt(IVp)>0) and (IVp.SerNr!=-1)) then begin
    IVSumup(IVp,true);
    if (RecordInsert(IVp,false)) then begin
      CreateRecordLink(IVp,CurrentCompany,Jobr,CurrentCompany);  
      CreateRecordLink(Jobr,CurrentCompany,IVp,CurrentCompany);  
      res = true;
    end;
  end;  
LSetupJobDownPayInv:;  
  SetupJobDownPayInv = res;
  RETURN;
END;


