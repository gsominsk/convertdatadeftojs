external function Boolean HasMultiCurrency();
external function LongInt DateDiff(Date,Date);

global
procedure BeginCurncyTotals(var Integer curcnt)
begin
  curcnt = 0;
  return;
end;

global
procedure InitCurncyTotals(var array string cur,var array val v1,Integer curcnt)
begin
  Integer i;

  for (i=0;i<curcnt;i=i+1) begin
    cur[i] = "";
    v1[i] = blankval;
  end;
  return;
end;

global
procedure AddCurncyTotals(var array string cur,var array val v1,var Integer curcnt,string curncy,val a)
begin
  record BaseCurBlock bascur;
  Integer i,pos;
  string 20 code;
  Boolean foundf;
  
  foundf = false;
  code = curncy;
  if (blank(code)) then begin
    BlockLoad(bascur);
    code = bascur.BaseCur1;
  end;
  for (i=0;i<curcnt;i=i+1) begin
    if (code==cur[i]) then begin
      pos = i;
      foundf = true;
      i = curcnt;
    end;
  end;
  if (foundf==false) then begin
    pos = curcnt;
    curcnt = curcnt + 1;
    cur[pos] = code;
    v1[pos] = BlankVal;
  end;
  v1[pos] = v1[pos] + a;
  return;
end;

global
procedure PrintCurncyTotalsToFile(array string cur,array val v1,array val v2,array val v3,Integer curcnt,Integer tabcurcol,Integer curcol,
                                  Integer tabscol1,Integer col1,Integer tabscol2,Integer col2,Integer tabscol3,Integer col3,Boolean base,Integer PocketPC)
begin
  Integer i;
  Integer j;
  Boolean testf;

  if (PocketPC == 0) then begin
    for (i=0;i<curcnt;i=i+1) begin
      testf = true;
      if (HasMultiCurrency==false) then begin 
        if (i>1) then begin testf = false; end;
      end;
      if (testf) then begin
      if (blank(cur[i])) then begin
        if (base) then begin
          StartFormat(15);
          for (j=0;j<tabcurcol;j=j+1) begin
            OutString(0,0,"",false);
          end;
          if (curcnt==1) then begin
            OutString(curcol,0,USetStr(2368),false);
          end else begin
            OutString(curcol,0,USetStr(2369),false);
          end;
          for (j=0;j<tabscol1;j=j+1) begin
            OutString(0,0,"",false);
          end;
          if (col1>=0) then begin
            OutVal(col1,0,v1[i],M4Val,true);
          end;
          for (j=0;j<tabscol2;j=j+1) begin
            OutString(0,0,"",false);
          end;
          if (col2>=0) then begin
            OutVal(col2,0,v2[i],M4Val,true);
          end;
          for (j=0;j<tabscol3;j=j+1) begin
            OutString(0,0,"",false);
          end;
          if (col3>=0) then begin
            OutVal(col3,0,v3[i],M4Val,true);
          end;
          EndFormat;
        end;
      end else begin
        StartFormat(15);
        for (j=0;j<tabcurcol;j=j+1) begin
          OutString(0,0,"",false);
        end;
        if (HasMultiCurrency) then begin 
          OutString(curcol,0,cur[i],false);
        end;
        for (j=0;j<tabscol1;j=j+1) begin
          OutString(0,0,"",false);
        end;
        if (col1>=0) then begin
          OutVal(col1,0,v1[i],M4Val,true);
        end;
        for (j=0;j<tabscol2;j=j+1) begin
          OutString(0,0,"",false);
        end;
        if (col2>=0) then begin
          OutVal(col2,0,v2[i],M4Val,true);
        end;
        for (j=0;j<tabscol3;j=j+1) begin
          OutString(0,0,"",false);
        end;
        if (col3>=0) then begin
          OutVal(col3,0,v3[i],M4Val,true);
        end;
        EndFormat;
      end;
      end;
    end;
  end else begin
    for (i=0;i<curcnt;i=i+1) begin
      if (blank(cur[i])) then begin
        if (base) then begin
          StartFormat(15);
          if (curcnt==1) then begin
            OutString(curcol,0,USetStr(2368),false);
          end else begin
            OutString(curcol,0,USetStr(2369),false);
          end;
          if (col2>=0) then begin
            OutVal(col2,0,v1[i],M4Val,true);
          end;
          EndFormat;
        end;
      end else begin
        StartFormat(15);
        OutString(curcol,0,cur[i],false);
        if (col2>=0) then begin
          OutVal(col2,0,v1[i],M4Val,true);
        end else begin
          if (col1>=0) then begin
            OutVal(col1,0,v1[i],M4Val,true);
          end;
        end;
        EndFormat;
      end;
    end;
  end; 
  return;
end;

global
procedure PrintCurncyTotals(array string cur,array val v1,array val v2,array val v3,Integer curcnt,Integer col1,Integer col2,Integer col3,Integer curcol,Boolean base,Integer PocketPC)
begin
  Integer i;
  Boolean testf;

  if (PocketPC == 0) then begin
    for (i=0;i<curcnt;i=i+1) begin
      testf = true;
      if (HasMultiCurrency==false) then begin 
        if (i>1) then begin testf = false; end;
      end;
      if (testf) then begin
      if (blank(cur[i])) then begin
        if (base) then begin
          StartFormat(15);
          if (curcnt==1) then begin
            OutString(curcol,0,USetStr(2368),false);
          end else begin
            OutString(curcol,0,USetStr(2369),false);
          end;
          if (col1>=0) then begin
            if (col1>10) then begin
              OutValBiDi(col1,0,v1[i],M4Val,true,col1+40);
            end else begin
              OutVal(col1,0,v1[i],M4Val,true);
            end;
          end;
          if (col2>=0) then begin
            if (col2>10) then begin
              OutValBiDi(col2,0,v1[i],M4Val,true,col2+40);
            end else begin
              OutVal(col2,0,v2[i],M4Val,true);
            end;
          end;
          if (col3>=0) then begin
            if (col3>10) then begin
              OutValBiDi(col3,0,v1[i],M4Val,true,col3+40);
            end else begin
              OutVal(col3,0,v3[i],M4Val,true);
            end;
          end;
          EndFormat;
        end;
      end else begin
        StartFormat(15);
        if (HasMultiCurrency) then begin 
          OutString(curcol,0,cur[i],false);
        end;
        if (col1>=0) then begin
          if (col1>10) then begin
            OutValBiDi(col1,0,v1[i],M4Val,true,col1+40);
          end else begin
            OutVal(col1,0,v1[i],M4Val,true);
          end;
        end;
        if (col2>=0) then begin
          if (col2>10) then begin
            OutValBiDi(col2,0,v2[i],M4Val,true,col2+40);
          end else begin
            OutVal(col2,0,v2[i],M4Val,true);
          end;
        end;
        if (col3>=0) then begin
          if (col3>10) then begin
            OutValBiDi(col3,0,v3[i],M4Val,true,col3+40);
          end else begin
            OutVal(col3,0,v3[i],M4Val,true);
          end;
        end;
        EndFormat;
      end;
      end;
    end;
  end else begin
    for (i=0;i<curcnt;i=i+1) begin
      if (blank(cur[i])) then begin
        if (base) then begin
          StartFormat(15);
          if (curcnt==1) then begin
            OutString(curcol,0,USetStr(2368),false);
          end else begin
            OutString(curcol,0,USetStr(2369),false);
          end;
          if (col2>=0) then begin
            OutVal(col2,0,v1[i],M4Val,true);
          end;
          EndFormat;
        end;
      end else begin
        StartFormat(15);
        OutString(curcol,0,cur[i],false);
        if (col2>=0) then begin
          OutVal(col2,0,v1[i],M4Val,true);
        end else begin
          if (col1>=0) then begin
            OutVal(col1,0,v1[i],M4Val,true);
          end;
        end;
        EndFormat;
      end;
    end;
  end; 
  return;
end;

global
procedure AddCurncyTotalsToTotalCurncyTotals(array string cur,array val v1,array val v2,array val v3,Integer curcnt,array string totcur,array val totv1,array val totv2,array val totv3,var Integer curtotcnt)
begin
  Integer i,ti;
  Boolean found;

  for (i=0;i<curcnt;i=i+1) begin
    found = false;
    for (ti=0;ti<curtotcnt;ti=ti+1) begin
      if (cur[i]==totcur[ti]) then begin
        totv1[ti] = totv1[ti] + v1[i];
        totv2[ti] = totv2[ti] + v2[i];
        totv2[ti] = totv2[ti] + v2[i];
        found = true;
      end;
    end;
    if (found==false) then begin
      totcur[curtotcnt] = cur[i];
      totv1[curtotcnt] = v1[i];
      totv2[curtotcnt] = v2[i];
      totv3[curtotcnt] = v3[i];
      curtotcnt = curtotcnt + 1;
    end;
  end;
  return;
end;

global
procedure ClearCurncyTotals(array string cur,array val v1,array val v2,array val v3,var Integer curcnt)
begin
  Integer i;

  for (i=0;i<curcnt;i=i+1) begin
    cur[i] = "";
    v1[i] = blankval;
    v2[i] = blankval;
    v3[i] = blankval;
  end;
  curcnt = 0;
  return;
end;

function Boolean IsHolliday(Date tdp,record BHollVc BHp,Boolean ignoreweekdays)
begin
  row BHollVc BHrw;
  Integer i,rwcnt;
  Boolean res;
  
  res = false;
  i = GetDateId(tdp);
  res = false;
  if (ignoreweekdays==false) then begin
    switch(i) begin
      case 1:
        if (BHp.Monday<>0) then begin res = true; end;
      case 2:
        if (BHp.Tuesday<>0) then begin res = true; end;
      case 3:
        if (BHp.Wednesday<>0) then begin res = true; end;
      case 4:
        if (BHp.Thursday<>0) then begin res = true; end;
      case 5:
        if (BHp.Friday<>0) then begin res = true; end;
      case 6:
        if (BHp.Saturday<>0) then begin res = true; end;
      case 7:
        if (BHp.Sunday<>0) then begin res = true; end;
    end;
  end;
  if (res==false) then begin
    rwcnt = MatRowCnt(BHp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(BHp,i,BHrw);
      if (tdp==BHrw.FreeDay) then begin
        res = true;
        goto LIsHolliday;
      end;
    end;
  end;
LIsHolliday:;
  IsHolliday = res;
  return;
end;

function Boolean IsCustHolliday(Date tdp,record BHollCustVc BHp,Boolean ignoreweekdays)
begin
  row BHollCustVc BHrw;
  Integer i,rwcnt;
  Boolean res;
  
  res = false;
  i = GetDateId(tdp);
  res = false;
  if (ignoreweekdays==false) then begin
    switch(i) begin
      case 1:
        if (BHp.Monday<>0) then begin res = true; end;
      case 2:
        if (BHp.Tuesday<>0) then begin res = true; end;
      case 3:
        if (BHp.Wednesday<>0) then begin res = true; end;
      case 4:
        if (BHp.Thursday<>0) then begin res = true; end;
      case 5:
        if (BHp.Friday<>0) then begin res = true; end;
      case 6:
        if (BHp.Saturday<>0) then begin res = true; end;
      case 7:
        if (BHp.Sunday<>0) then begin res = true; end;
    end;
  end;
  if (res==false) then begin
    rwcnt = MatRowCnt(BHp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(BHp,i,BHrw);
      if (tdp==BHrw.FreeDay) then begin
        res = true;
        goto LIsCustHolliday;
      end;
    end;
  end;
LIsCustHolliday:;
  IsCustHolliday = res;
  return;
end;

function Boolean GetBankHoliday(string countrycode,var record BHollVc BHr)
begin
  record CYBlock CompYear;
  string 20 country;
  Boolean res;
  
  BlockLoad(CompYear);
  country = countrycode;
  if (blank(country)) then begin
    country = CompYear.CountryCode;
  end;
  BHr.CountryCode = country;
  res = ReadFirstMain(BHr,1,true);
  if ((res==false) and (country<>CompYear.CountryCode)) then begin
    BHr.CountryCode = CompYear.CountryCode;
    res = ReadFirstMain(BHr,1,true);
  end;
  GetBankHoliday = res;
  return;
end;

function Boolean GetCustBankHoliday(string custcode,var record BHollCustVc BHCr)
begin
  Boolean res;
  
  res = false;
  if (nonblank(custcode)) then begin
    BHCr.CustCode = custcode;
    res = ReadFirstMain(BHCr,1,true);
  end;
  GetCustBankHoliday = res;
  return;
end;

global
procedure GetNextWorkDay(Date tdp,string countrycode,var Date resdat)
begin
  record BHollVc BHr;
  date td;
  
  td = tdp;
  if (GetBankHoliday(countrycode,BHr)) then begin
    while (IsHolliday(td,BHr,false)) begin
      td = AddDay(td,1);
    end;
  end;
  resdat = td;
  return;
end;

global
function Boolean IsBankHolliday(Date tdp,Boolean ignoreweekdays)
begin
  record BHollVc BHr;
  string 20 countrycode;
  Boolean res;
  
  res = false;
  countrycode = "";
  if (GetBankHoliday(countrycode,BHr)) then begin
    if (IsHolliday(tdp,BHr,ignoreweekdays)) begin
      res = true;
    end;
  end;
  IsBankHolliday = res;
  return;
end;

global
function Boolean IsSaturday(Date tdp)
begin
  record BHollVc BHr;
  row BHollCustVc BHrw;
  Integer i,rwcnt;
  string 20 countrycode;
  Boolean res;
  
  res = false;
  countrycode = "";
  if (GetBankHoliday(countrycode,BHr)) then begin
    if (GetDateId(tdp)==6) then begin
      res = true;
      rwcnt = MatRowCnt(BHr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(BHr,i,BHrw);
        if (tdp==BHrw.FreeDay) then begin
          res = false;
          goto LIsSaturday;
        end;
      end;
    end;
  end;
LIsSaturday:;
  IsSaturday = res;
  return;
end;

global
function LongInt CountWorkingDays(Date frdat,Date todat,string custcode,string countrycode)
begin
  record BHollVc BHr;
  record BHollCustVc BHCr;
  LongInt days;
  Date thedat;
  
// day 1/11 to 2/11 is two days, not 1. Each day can be decreased because it is holliday,
// if this should be one, a saturday will be -1 day...
  days = DateDiff(todat,frdat);
  thedat = frdat;
  if (blankdate(thedat)) then begin
    thedat = todat;//otherwise it takes a lot of time
  end;
  if (GetBankHoliday(countrycode,BHr)) then begin
    if (GetCustBankHoliday(custcode,BHCr)) then begin
      while(thedat<todat) begin
        if (IsHolliday(thedat,BHr,true)==false) then begin
          if (IsCustHolliday(thedat,BHCr,false)) then begin
            days = days - 1;
          end;
        end else begin
          days = days - 1;
        end;
        thedat = AddDay(thedat,1);
      end;
    end else begin
      while(thedat<todat) begin
        if (IsHolliday(thedat,BHr,false)) then begin
          days = days - 1;
        end;
        thedat = AddDay(thedat,1);
      end;
    end;
  end else begin
    if (GetCustBankHoliday(custcode,BHCr)) then begin
      while(thedat<todat) begin
        if (IsCustHolliday(thedat,BHCr,false)) then begin
          days = days - 1;
        end;
        thedat = AddDay(thedat,1);
      end;
    end;
  end;
  CountWorkingDays = days;
  return;
end;

global
function Date AddWorkingDays(Date frdat,LongInt days,string custcode,string countrycode)
begin
  Date res;
  LongInt workd;
  
  res = AddDay(frdat,days);
  if (days>0) then begin
    workd = CountWorkingDays(frdat,res,custcode,countrycode);
    while(workd<days) begin
      res = AddDay(res,days-workd);
      workd = CountWorkingDays(frdat,res,custcode,countrycode);
    end;
  end else begin
    workd = CountWorkingDays(res,frdat,custcode,countrycode);
    while(workd<-days) begin
      res = AddDay(res,days+workd);
      workd = CountWorkingDays(res,frdat,custcode,countrycode);
    end;
  end;
  AddWorkingDays = res;
  return;
end;

