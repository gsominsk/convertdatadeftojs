external procedure WSVc_PasteEMCode(var record WSVc,string);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external function val CalculateTotalVATFromTaxMatrix2(record TaxMatrixVc,Integer,Boolean);
external function Boolean UseTaxTemplatesforTaxCalc();
external function roundmode DefaultRoundMode();
external function Integer VATType(string);
remote   function Boolean GetCOSAcc(string,string,string,record AccBlock,record INVc,integer,Boolean,Integer,var string,var string);
external function Date FindDueDateInAccPeriod(Date);
external procedure GetAPAcc(string,var string);
external function LongInt GetCurUserLastNr(string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure GetCurUser(var record UserVc);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetSalesGroup(string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function LongInt NextFreeCashSerNr(row PMBlock,Boolean);
external function Boolean GetPD(var record PDVc);
external procedure PUCalcPerc(val,string,var val);

global
procedure CalcCashDiscount(var record VIVc VIp)
BEGIN
  record PDVc PDr;
  record AccBlock atr;
  val novat,tv;
  
  PDr.Code = VIp.PayDeal;
  if (GetPD(PDr)) then begin
    if (nonblank(PDr.pdvrebt)) then begin
      BlockLoad(atr);
      if ((atr.DiscCashVAT!=0) and (VIp.ExportFlag!=1)) then begin // NEWVAT I don't think this is correct
//      if ((atr.DiscCashVAT!=0) and ((VIp.ExportFlag==0) or (VIp.ExportFlag==3) or (VIp.ExportFlag==4)) then begin
        tv = VIp.CalcVATVal;
        if (VIp.VATVal!=0) then begin
          tv = VIp.VATVal;
        end;
        novat = VIp.PayVal - tv;
        if (atr.DiscCashVAT!=0) then begin
          tv = novat*PDr.pdvrebt;
          tv = tv/100;
          tv = Round(tv,DefaultRoundMode);
        end else begin
          tv = novat*PDr.pdvrebt;
          tv = tv/100;
          tv = Round(tv,DefaultRoundMode);
        end;
        VIp.RebVal = tv;          
        if (atr.DiscCashVAT!=0) then begin
          tv = novat*PDr.pdvrebt2;
          tv = tv/100;
          tv = Round(tv,DefaultRoundMode);
        end else begin
          tv = novat*PDr.pdvrebt2;
          tv = tv/100;
          tv = Round(tv,DefaultRoundMode);
        end;
        VIp.RebVal2 = tv;          
      end else begin
        if (VIp.RebVal==0) then begin
          tv = VIp.PayVal*PDr.pdvrebt;
          tv = tv/100;
          tv = Round(tv,DefaultRoundMode);
          VIp.RebVal = tv;
        end;
        if (VIp.RebVal2==0) then begin
          tv = VIp.PayVal*PDr.pdvrebt2;
          tv = tv/100;
          tv = Round(tv,DefaultRoundMode);
          VIp.RebVal2 = tv;
        end;
      end;
    end;
  end;
  RETURN;
END;

procedure VISumup_TaxTemplate(record VIVc VIp,var val rp)
begin
  row VIVc VIrw;
  Integer i,rwcnt;
  val Bal,vat,nonrevvat,revvat,ret,rowwhtax;
  record TaxMatrixVc TMr;
  record TaxMatrixVc sumTMr;

  Bal = VIp.PayVal;
  UnpackFieldMatrix(VIp,"TaxMatrix",sumTMr);

  rwcnt = MatRowCnt(VIp);
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIp,i,VIrw);
      if (VIrw.ovst==0) then begin
        switch (VIrw.stp) begin
          case kInvoiceRowTypeNormal: 
            if ((VIp.ExportFlag==0) or (VIp.ExportFlag==3) or (VIp.ExportFlag==4)) then begin
              UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
              vat = vat + CalculateTotalVATFromTaxMatrix(TMr,0);
              nonrevvat = nonrevvat + CalculateTotalVATFromTaxMatrix2(TMr,0,false);
            end;
          case kInvoiceRowTypeDownpayment: 
            if ((VIp.ExportFlag==0) or (VIp.ExportFlag==3) or (VIp.ExportFlag==4)) then begin
              UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
              vat = vat + CalculateTotalVATFromTaxMatrix(TMr,0);
              nonrevvat = nonrevvat + CalculateTotalVATFromTaxMatrix2(TMr,0,false);
            end;
        end;          
      end;
    end;
  end;
  if ((VIp.ExportFlag==0) or (VIp.ExportFlag==3) or (VIp.ExportFlag==4)) then begin
    if (vat==0) then begin
      if (blank(VIp.VATVal)) then begin
        Bal = Bal - VIp.CalcVATVal;
      end else begin
        Bal = Bal - VIp.VATVal;
      end;
    end else begin
      Bal = Bal - nonrevvat;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if (VIrw.ovst==0) then begin
      switch (VIrw.stp) begin
        case kInvoiceRowTypeNormal: Bal = Bal - VIrw.Sum;
        case kInvoiceRowTypeDownpayment: Bal = Bal - VIrw.Sum;
        case kInvoiceRowTypeRetention: ret = ret + VIrw.Sum;
        case kInvoiceRowTypeWithholdingTax: rowwhtax = rowwhtax + VIrw.Sum;
      end;
    end;
  end;
  if (rowwhtax>0) then begin
    VIp.WithHoldingTax = rowwhtax;
  end;
//  PackFieldMatrix(VIp,"TaxMatrix",sumTMr);
  Bal = Bal - VIp.TAX1Sum;
  Bal = Bal - ret;
  if (VIp.PayVal!=0) then begin
    rp = Bal;
  end else begin
    rp = Bal;
//    rp = 0;//fixed in VIDDefault
  end;
  if (VIp.TAX1Sum==0) then begin VIp.TAX1Sum = blankval; end;
  return;
end;


global
procedure VISumup(record VIVc VIp,var val rp)
begin
  row VIVc VIrw;
  Integer i,rwcnt;
  val Bal,vat,ret,rowwhtax;
  Integer vt;

  if (UseTaxTemplatesforTaxCalc) then begin
    VISumup_TaxTemplate(VIp,rp);
    goto LVISumup;
  end;
  Bal = VIp.PayVal;
  rwcnt = MatRowCnt(VIp);
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIp,i,VIrw);
      if (VIrw.ovst==0) then begin
//        vt = VATType(VIrw.VATCode);
        switch (VIrw.stp) begin
          case kInvoiceRowTypeNormal: vat = vat + VIrw.VATVal;
          case kInvoiceRowTypeDownpayment: vat = vat + VIrw.VATVal;
        end;          
      end;
    end;
  end;
  if ((VIp.ExportFlag==0) or (VIp.ExportFlag==3) or (VIp.ExportFlag==4)) then begin
    if (vat==0) then begin
      if (blank(VIp.VATVal)) then begin
        Bal = Bal - VIp.CalcVATVal;
      end else begin
        Bal = Bal - VIp.VATVal;
      end;
    end else begin
      Bal = Bal - vat;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if (VIrw.ovst==0) then begin
      switch (VIrw.stp) begin
        case kInvoiceRowTypeNormal: Bal = Bal - VIrw.Sum;
        case kInvoiceRowTypeDownpayment: Bal = Bal - VIrw.Sum;
        case kInvoiceRowTypeRetention: ret = ret + VIrw.Sum;
        case kInvoiceRowTypeWithholdingTax: rowwhtax = rowwhtax + VIrw.Sum;
      end;
    end;
  end;
  if (rowwhtax>0) then begin
    VIp.WithHoldingTax = rowwhtax;
  end;
  Bal = Bal - VIp.TAX1Sum;
  Bal = Bal - ret;
  if (VIp.PayVal!=0) then begin
    rp = Bal;
  end else begin
    rp = Bal;
//    rp = 0;//fixed in VIDDefault
  end;
LVISumup:;  
  if (VIp.TAX1Sum==0) then begin VIp.TAX1Sum = blankval; end;
  return;
end;

// Doesn't return Childno....
global
function LongInt ItemInContract(string itemcode,string serialnumber,Date datp)
BEGIN
  record INSerCOVc INSerr;
  Boolean foundf;
  LongInt res;

  res = -1;
  INSerr.ItemCode = itemcode;
  INSerr.SerialNr = serialnumber;
  foundf = true;
  while (LoopMain(INSerr,2,foundf)) begin
    if ((INSerr.ItemCode!=itemcode) or (INSerr.SerialNr!=serialnumber)) then begin
      foundf = false;
    end;
    if (foundf) then begin
      if (INSerr.StartDate<=datp) then begin
        if (blankdate(INSerr.EndDate)) then begin res = INSerr.CONr; end;
        if (INSerr.EndDate>datp) then begin res = INSerr.CONr; end;
      end;
    end;
  end;
  ItemInContract = res;
  RETURN;
END;

global
procedure SetWOFlags(record WOVc WOp)
BEGIN
  switch (WOp.Closed) begin
    case 0: WOp.Done = 0;
    case 1: WOp.Done = 45;
    case 2: WOp.Done = 43;
    case 3: WOp.Done = 18;
  end;
  RETURN;
END;

global
updating function Boolean PasteWOInWS(var record WOVc WOp,var record WSVc WSp)
BEGIN
  record SVOVc SVOr;
  record MainStockBlock MSb;
  Boolean res,testf;
  string 255 tstr;
  record WOVc oldWOr;
  record AccBlock ARb;
  record CostAccBlock CAb;
  record INVc INr;
  record UserVc USr;
  
  RecordCopy(oldWOr,WOp);
  BlockLoad(MSb);
  BlockLoad(ARb);
  BlockLoad(CAb);
    if (WOp.Closed==3) then begin goto LPasteWOInWS; end;
    testf = true;
    SVOr.SerNr = WOp.SVOSerNr;
    if (ReadFirstMain(SVOr,1,true)==false) then begin
      testf = false;
    end else begin
      if (SVOr.DoneMark!=0) then begin testf = false; end;
    end;
    if (WOp.Closed==1 and WOp.Closed==3) then begin
      testf = false;
    end;
    if (testf) then begin
      USr.Code = WOp.EMCode;
      if (ReadFirstMain(USr,1,true)) then begin end;
      WOp.Closed = 2;
      WSp.Location = USr.Location;
      if (blank(WSp.Location)) then begin
        WSp.Location = MSb.MainStock;
      end;
      WSp.CustCode = WOp.CustCode;
      WSp.Addr0 = WOp.Addr0;
      WSp.CustContact = WOp.CustContact;
      WSp.Objects = WOp.Objects;
      WSp.Phone = WOp.Phone;
      WSp.Fax = WOp.Fax;
      WSp.EMCode = WOp.EMCode;
      WSp.EMName = WOp.EMName;
      WSp.CurncyCode = WOp.CurncyCode;
      WSp.FrRate = WOp.FrRate;
      WSp.ToRateB1 = WOp.ToRateB1;
      WSp.ToRateB2 = WOp.ToRateB2;
      WSp.BaseRate1 = WOp.BaseRate1;
      WSp.BaseRate2 = WOp.BaseRate2;
      WSp.Comment1 = WOp.Comment1;
      WSp.Comment2 = WOp.Comment2;
      WSp.Comment3 = WOp.Comment3;
      WSp.Comment4 = WOp.Comment4;
      WSp.InvoiceToCode = WOp.InvoiceToCode;
      WSp.CustVATCode = SVOr.CustVATCode;
      WSp.CustTaxTemplateCode = SVOr.CustTaxTemplateCode;
      WSp.PriceList = SVOr.PriceList;
      GetSalesGroup(WSp.EMCode,tstr);
      WSp.SalesGroup = tstr;
      WSp.SVONr = WOp.SVOSerNr;
      WSp.WONr = WOp.SerNr;
      WSp.InclVAT = SVOr.InclVAT;
      WSp.ExportFlag = SVOr.ExportFlag;
      WSp.RebCode = SVOr.RebCode;
      SetWOFlags(WOp);    
      if (GetCOSAcc("",WSp.CustCode,WSp.Location,ARb,INr,CAb.ItemGroupAccounts,true,0,WSp.CostAcc,tstr)==false) then begin
      end;
      if (RecordUpdate(oldWOr,WOp,false)==0) then begin end;      
      res = true;
    end;  
LPasteWOInWS:;  
  PasteWOInWS = res;
  RETURN;
END;

global
updating function Boolean PasteSVOInWS(var record SVOVc SVOp,var record WSVc WSp)
BEGIN
  record UserVc USr;
  record MainStockBlock MSb;
  Boolean res,testf;
  string 255 tstr;
  record SVOVc oldSVOr;
  record AccBlock ARb;
  record CostAccBlock CAb;
  record INVc INr;
  record WOVc WOr;
  
  RecordCopy(oldSVOr,SVOp);
  BlockLoad(MSb);
  BlockLoad(ARb);
  BlockLoad(CAb);
  testf = true;
  if (SVOp.DoneMark!=0) then begin
    testf = false;
  end;
    if (testf) then begin
      GetCurUser(USr);
      WSp.Location = USr.Location;
      if (blank(WSp.Location)) then begin
        WSp.Location = MSb.MainStock;
      end;
      WSp.CustCode = SVOp.CustCode;
      WSp.Addr0 = SVOp.Addr0;
      WSp.CustContact = SVOp.CustContact;
      WSp.Objects = SVOp.Objects;
      WSp.Phone = SVOp.Phone;
      WSp.Fax = SVOp.Fax;
      WSp.EMCode = USr.Code;
      WSp.EMName = USr.Name;
      WSVc_PasteEMCode(WSp,SVOp.SalesMan);      
      WSp.LangCode = SVOp.LangCode;
      WSp.CurncyCode = SVOp.CurncyCode;
      WSp.FrRate = SVOp.FrRate;
      WSp.ToRateB1 = SVOp.ToRateB1;
      WSp.ToRateB2 = SVOp.ToRateB2;
      WSp.BaseRate1 = SVOp.BaseRate1;
      WSp.BaseRate2 = SVOp.BaseRate2;
      WSp.Comment1 = SVOp.Comment1;
      WSp.Comment2 = SVOp.Comment2;
      WSp.Comment3 = SVOp.Comment3;
      WSp.Comment4 = SVOp.Comment4;
      WSp.InvoiceToCode = SVOp.InvoiceToCode;
      WSp.CustVATCode = SVOp.CustVATCode;
      WSp.CustTaxTemplateCode = SVOp.CustTaxTemplateCode;
      WSp.PriceList = SVOp.PriceList;
      GetSalesGroup(WSp.EMCode,tstr);
      WSp.SalesGroup = tstr;
      WSp.SVONr = SVOp.SerNr;
      WSp.WONr = -1;
      WSp.ExportFlag = SVOp.ExportFlag;
      WSp.RebCode = SVOp.RebCode;
      WSp.InclVAT = SVOp.InclVAT;
      if (GetCOSAcc("",WSp.CustCode,WSp.Location,ARb,INr,CAb.ItemGroupAccounts,true,0,WSp.CostAcc,tstr)==false) then begin
      end;
//      SetSVOFlags(SVOp);    
      if (RecordUpdate(oldSVOr,SVOp,false)==0) then begin end;      
      res = true;
    end;  
LPasteSVOInWS:;  
  PasteSVOInWS = res;
  RETURN;
END;

