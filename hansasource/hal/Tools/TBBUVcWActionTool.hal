external function Integer TBBUApprovalStatus(record TBBUVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external procedure RowCalculateTaxMatrix_POVc(var record POVc,Integer,row POVc);
external procedure RowCalculateTaxMatrix_ORVc(var record ORVc,Integer,row ORVc);
external procedure ORDchsum(var record ORVc,Integer);
external function Boolean ORDchrsum(var record ORVc,Integer);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external function Boolean POVc_PasteArtCode(var record POVc,Integer,Boolean);
external procedure TBBUVc_ChangeQuantityRecepy(string,val,Integer,var record TBBUVc);
external procedure GetDatePriceBasedOn(string,Date,Date,string,var Date);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external function Boolean GetTimeClassPrice(string,string,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external function Boolean HasSalesmanChanged(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObj(string,var Integer,var string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val DivWithRateToBase1(string,Date,val,roundmode);
external procedure TBBUDchrsum(var record TBBUVc,Integer,Boolean,Integer);
external procedure TBBUSumup(var record TBBUVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external function Boolean TBBUVc_ExplodeRecepy(record INVc,val,record TBBUVc,string,Integer);
external function string 255 FindINObjects(string,string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetProjectPrice(string,string,string,string,string,val,var val,var val,var string,var val,var string);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure GetItemSalesAcc(string,Integer,var string);
external function Boolean PasteCustInOR(var record ORVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure RoundRowSum(string,string,string,var val);
external procedure POSumup(var record POVc);
external procedure ORSumup(var record ORVc);
external function Boolean ORDchrsum(var record ORVc,Integer);
external procedure ORDchsum(var record ORVc,Integer);

function Boolean CheckPOPRITHandle(record INVc INp,Integer ItemType,record PRITHandleBlock PRITRecp)
BEGIN
  Boolean res;
  
  if (ItemType==0) then begin
    if (INp.ItemMaterial==0) then begin
      if (PRITRecp.AllowPO!=0) then begin res = true; end;
    end;
  end;  
  if (ItemType==1) then begin
    if ((PRITRecp.StockItem==1) or (PRITRecp.StockItem==3)) then begin res = true; end;
  end;
  if (ItemType==2) then begin
    if (PRITRecp.AllowPO!=0) then begin res = true; end;
  end;  
  CheckPOPRITHandle = res;
  RETURN;
END;

procedure PutOnPORow2(record POVc POp,row POVc POrwp,var Integer porownr,row TBBUVc TBBUrwp,record TBBUVc TBBUp,record INVc INp,string vevatcode,Integer exportflag,var vector val remqtys)
BEGIN
  string 255 tstr;
  val qty;
  Integer oldstyle;
  record TaxMatrixVc TMr;
  
  if (TBBUrwp.Qty<=remqtys[TBBUrwp.ArtCode]) then begin
    qty = TBBUrwp.Qty;
  end else begin
    qty = remqtys[TBBUrwp.ArtCode];
  end;
  if (qty<=0) then begin
    goto LPutOnPORow2;
  end;
  
  ClearRow(POp,POrwp,1);
  POrwp.ArtCode = TBBUrwp.ArtCode;
  MatRowPut(POp,porownr,POrwp);
  POVc_PasteArtCode(POp,porownr,false);
  MatRowGet(POp,porownr,POrwp);

  POrwp.ArtCode = TBBUrwp.ArtCode;
  POrwp.Spec = TBBUrwp.Comment;
  POrwp.Objects = TBBUrwp.Objects;
  POrwp.PRCode = TBBUp.PRCode;
  POrwp.Quant = qty;
  POrwp.VEQuant = qty;
  if (TBBUrwp.Cost==0) then begin
    if (TypeOfCurncy(TBBUp.CurncyCode,oldstyle)!=1) and (nonblank(TBBUp.CurncyCode)) then begin
      POrwp.Price = MulRateToBase1(TBBUp.CurncyCode,TBBUrwp.Price,TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,DefaultCurRoundOff);
    end else begin
      POrwp.Price = TBBUrwp.Price;
    end;
  end else begin
    POrwp.Price = TBBUrwp.Cost;
  end;
  POrwp.vRebate = blankval;
  POrwp.Sum = TBBUrwp.Sum;
  POrwp.PriceFactor = INp.PriceFactor;
  POrwp.VATCode = vevatcode;
  if (blank(POrwp.VATCode)) then begin
    GetItemVATCode(POrwp.ArtCode,exportflag,tstr,false);
    POrwp.VATCode = tstr;
  end;    
  MatRowPut(POp,porownr,POrwp);
  MatRowGet(POp,porownr,POrwp);
  CalcSum(POrwp.Quant,POrwp.Price,POrwp.PriceFactor,POrwp.vRebate,POrwp.Sum,0);
  RoundRowSum(POp.CurncyCode,POp.PayDeal,"POVc",POrwp.Sum);
  RowCalculateTaxMatrix_POVc(POp,porownr,POrwp);
  MatRowPut(POp,porownr,POrwp);
  porownr = porownr + 1;
  remqtys[TBBUrwp.ArtCode] = remqtys[TBBUrwp.ArtCode] - qty;
LPutOnPORow2:;
  RETURN;
END;

procedure PutOnPORow(record POVc POp,row POVc POrwp,var Integer porownr,row TBBUVc TBBUrwp,record TBBUVc TBBUp,record INVc INp,string vevatcode,Integer exportflag)
begin
  vector val remqtys;
  
  remqtys[TBBUrwp.ArtCode] = TBBUrwp.Qty;
  PutOnPORow2(POp,POrwp,porownr,TBBUrwp,TBBUp,INp,vevatcode,exportflag,remqtys);
end;

procedure PasteTBBUInPOGetRemainingQuantities(record TBBUVc TBBUr,var vector val remqtys)
begin
  row TBBUVc TBBUrw;
  record POVc POr;
  row POVc POrw;
  record RLinkVc RLr;
  Integer i,rwcnt,ponr;
  
  rwcnt = MatRowCnt(TBBUr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (nonblank(TBBUrw.ArtCode)) then begin
      remqtys[TBBUrw.ArtCode] = remqtys[TBBUrw.ArtCode] + TBBUrw.Qty;
    end;
  end;
  
  ponr = 1;
  while (ReadRecordLink(TBBUr,ponr,POr,RLr)) begin
    rwcnt = MatRowCnt(POr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(POr,i,POrw);
      if (nonblank(POrw.ArtCode)) then begin
        remqtys[POrw.ArtCode] = remqtys[POrw.ArtCode] - POrw.Quant;
      end;
    end;
    ponr = ponr + 1;
  end;
end;

global
procedure PasteTBBUInPO(record TBBUVc TBBUp,var record POVc POp)
BEGIN
  Integer rwcnt,i;
  record CUVc VEr;
  row TBBUVc TBBUrw;
  row POVc POrw;
  Integer porownr;
  record PRITHandleBlock PRITRec;
  record INVc INr;
  val t;
  record PRVc PRr;
  vector val remqtys;
  
  BlockLoad(PRITRec);  
  POp.PRCode = TBBUp.PRCode;
  POp.Comment = TBBUp.Comment;
  PRr.Code = TBBUp.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    POp.Objects = PRr.Objects;
  end;
  PasteTBBUInPOGetRemainingQuantities(TBBUp,remqtys);
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);    
    if (blank(VEr.Code)) then begin
      VEr.Code = POp.VECode;
      if (ReadFirstMain(VEr,1,true)) then begin end;
    end;
    INr.Code = TBBUrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (CheckPOPRITHandle(INr,TBBUrw.ItemType,PRITRec)) then begin
        PutOnPORow2(POp,POrw,porownr,TBBUrw,TBBUp,INr,VEr.VEVATCode,POp.ExportFlag,remqtys);
      end;
    end;
  end;     
  POSumup(POp);    
  RETURN;
END;

function Boolean CheckORPRITHandle(string artcode,Integer ItemType,record PRITHandleBlock PRITRecp)
BEGIN
  Boolean res;
  record INVc INr;
  
  if (ItemType==0) then begin
    INr.Code = artcode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (INr.ItemMaterial==0) then begin
        if (PRITRecp.AllowSO!=0) then begin res = true; end;
      end;
    end;
  end;  
  if (ItemType==1) then begin
    if ((PRITRecp.StockItem==0) or (PRITRecp.StockItem==3)) then begin res = true; end;
  end;
  if (ItemType==2) then begin
    if (PRITRecp.AllowSO!=0) then begin res = true; end;
  end;  
  CheckORPRITHandle = res;
  RETURN;
END;

procedure PutOnORORow2(record ORVc ORp,row ORVc ORrwp,row TBBUVc TBBUrwp,string prcode,string CustVATCode,Integer exportflag,var Integer orrownr,var vector val remqtys)
begin
  record INVc INr;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb,qty;
  string 255 curitemname,salesacc,vatcode,tstr,tax2code,location,taxtemplatecode;
  Boolean calcprice;
  Date orddate;
  Boolean dummyf;
  Time blankt;
  record TaxMatrixVc TMr;
  
  if (TBBUrwp.Qty<=remqtys[TBBUrwp.ArtCode]) then begin
    qty = TBBUrwp.Qty;
  end else begin
    qty = remqtys[TBBUrwp.ArtCode];
  end;
  if (qty<=0) then begin
    goto LPutOnORORow2;
  end;

  GetDatePriceBasedOn(ORp.CustCode,ORp.OrdDate,ORp.DespatchDate,ORp.PlanShip,orddate);
  if (GetItemPriceDiscount3(TBBUrwp.ArtCode,qty,INr,ORp.CurncyCode,
                            ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,
                            ORp.LangCode,ORp.CustCat,ORp.PriceList,ORp.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            ORp.ExportFlag,calcprice,orddate,blankt,ORp.CustCode,true,dummyf,ORp.PayDeal,tax2code,tax2prc,ORp.Region,location,taxtemplatecode)) then begin
    ClearRow(ORp,ORrwp,1);
    ORrwp.TaxTemplateCode = FillupTaxMatrix(0,ORp.BranchID,ORp.CustCode,ORp.CustCat,ORp.DelAddrCode,taxtemplatecode,TMr);
    ORrwp.ArtCode = TBBUrwp.ArtCode;
    ORrwp.Spec = TBBUrwp.Comment;
    ORrwp.Objects = TBBUrwp.Objects;
    ORrwp.Quant = qty;
    ORrwp.Price = TBBUrwp.Price;
    ORrwp.vRebate = TBBUrwp.Discount;
    ORrwp.Sum = TBBUrwp.Sum;
    ORrwp.VATCode = CustVATCode;
    ORrwp.BasePrice = TBBUrwp.Cost;
    ORrwp.rowGP = TBBUrwp.GP;
    ORrwp.PriceFactor = INr.PriceFactor;
    GetItemSalesAcc(ORrwp.ArtCode,exportflag,tstr);
    ORrwp.SalesAcc = tstr;
    if (blank(ORrwp.VATCode)) then begin
      GetItemVATCode(ORrwp.ArtCode,exportflag,tstr,true);
      ORrwp.VATCode = tstr;
    end;  

    GetTaxesDiscounts(ORp.CustCode,ORp.OrdDate,ORrwp.VATCode,tax2code,t,tax2reb);
    if (ORp.NoTax2==0) then begin
      ORrwp.TAX2Code = tax2code;
      ORrwp.TAX2Prc = tax2prc;
      ORrwp.TAX2Reb = tax2reb;
      ORrwp.TAX2Acc = GetTax2Acc(ORrwp.TAX2Code);
    end;
    if (ORp.NoTax1==0) then begin
      ORrwp.TAX1Reb = t;
    end;
    PackRowFieldMatrix(ORrwp,"TaxMatrix",TMr);
    MatRowPut(ORp,orrownr,ORrwp);
    RowCalculateTaxMatrix_ORVc(ORp,orrownr,ORrwp);
    MatRowPut(ORp,orrownr,ORrwp);
    if (ORDchrsum(ORp,orrownr)) then begin
      ORDchsum(ORp,orrownr);
    end;
    orrownr = orrownr + 1;
    remqtys[TBBUrwp.ArtCode] = remqtys[TBBUrwp.ArtCode] - qty;
  end;
LPutOnORORow2:;
  return;
end;

procedure PutOnORORow(record ORVc ORp,row ORVc ORrwp,row TBBUVc TBBUrwp,string prcode,string CustVATCode,Integer exportflag,var Integer orrownr)
begin
  vector val remqtys;
  
  remqtys[TBBUrwp.ArtCode] = TBBUrwp.Qty;
  PutOnORORow2(ORp,ORrwp,TBBUrwp,prcode,CustVATCode,exportflag,orrownr,remqtys);
end;

procedure PasteTBBUInORGetRemainingQuantities(record TBBUVc TBBUr,var vector val remqtys)
begin
  row TBBUVc TBBUrw;
  record ORVc ORr;
  row ORVc ORrw;
  record RLinkVc RLr;
  Integer i,rwcnt,ornr;
  
  rwcnt = MatRowCnt(TBBUr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (nonblank(TBBUrw.ArtCode)) then begin
      remqtys[TBBUrw.ArtCode] = remqtys[TBBUrw.ArtCode] + TBBUrw.Qty;
    end;
  end;
  
  ornr = 1;
  while (ReadRecordLink(TBBUr,ornr,ORr,RLr)) begin
    rwcnt = MatRowCnt(ORr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(ORr,i,ORrw);
      if (nonblank(ORrw.ArtCode)) then begin
        remqtys[ORrw.ArtCode] = remqtys[ORrw.ArtCode] - ORrw.Quant;
      end;
    end;
    ornr = ornr + 1;
  end;
end;

global
procedure PasteTBBUInOR(record TBBUVc TBBUp,var record ORVc ORp)
BEGIN
  Integer rwcnt,i;
  row TBBUVc TBBUrw;
  row ORVc ORrw;
  Integer orrownr;
  record PRITHandleBlock PRITRec;
  record PRVc PRr;
  vector val remqtys;
  
  BlockLoad(PRITRec);  
  ORp.CustCode = TBBUp.CustCode;
  if (PasteCustInOR(ORp)) then begin end;
  PRr.Code = TBBUp.PRCode;
  ReadFirstMain(PRr,1,true);
  ORp.Objects = AddObjectToObjectList(ORp.Objects,PRr.Objects);                
  ORp.PRCode = TBBUp.PRCode;
  ORp.Comment = TBBUp.Comment;    
  ORp.CurncyCode = TBBUp.CurncyCode;    
  ORp.FrRate = TBBUp.FrRate;    
  ORp.ToRateB1 = TBBUp.ToRateB1;    
  ORp.ToRateB2 = TBBUp.ToRateB2;    
  ORp.BaseRate1 = TBBUp.BaseRate1;    
  ORp.BaseRate2 = TBBUp.BaseRate2;
  PasteTBBUInORGetRemainingQuantities(TBBUp,remqtys);
  rwcnt = MatRowCnt(TBBUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUp,i,TBBUrw);
    if (CheckORPRITHandle(TBBUrw.ArtCode,TBBUrw.ItemType,PRITRec)) then begin
      PutOnORORow2(ORp,ORrw,TBBUrw,TBBUp.PRCode,ORp.CustVATCode,ORp.ExportFlag,orrownr,remqtys);
    end;
  end;
  ORSumup(ORp);
  RETURN;
END;

procedure TBBUMultiLineText(record TBBUVc TBBUr,record INVc INr,string  langcode,Integer arow)
begin
  row TBBUVc TBBUrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(TBBUr,TBBUrw,1);
    TBBUrw.Comment = tstr;
    MatRowInsert(TBBUr,arow+tcnt-1,TBBUrw);
    tcnt = tcnt + 1;
  end;
  return;
end;

global
procedure TBBURowAddPrice(record TBBUVc TBBUr,row TBBUVc TBBUrw)
begin
  string 255 tstr,markup,markupincur;
  val price,reb,v,priceincur;

  GetProjectPrice(TBBUr.PRCode,TBBUrw.ArtCode,TBBUrw.EMCode,TBBUrw.TimeClass,"",TBBUrw.Qty,price,reb,markup,priceincur,markupincur);    
  TBBUrw.Discount = reb;
  if (priceincur!=0) then begin //assumption price is zero
    TBBUrw.Price = priceincur;
    TBBUrw.Markup = markupincur;
  end else begin
    if (nonblank(TBBUr.CurncyCode)) then begin  
      if (TBBUr.FrRate==0 and TBBUr.ToRateB1==0 and TBBUr.ToRateB2==0 and TBBUr.BaseRate1==0 and TBBUr.BaseRate2==0) then begin
        TBBUrw.Price = DivWithRateToBase1(TBBUr.CurncyCode,CurrentDate,price,DefaultCurRoundOff);
        if (Mid(markup,len(markup)-1,1)!="%") then begin    
          markup = DivWithRateToBase1(TBBUr.CurncyCode,CurrentDate,StringToVal(markup,M4Val),DefaultCurRoundOff);
        end;
      end else begin
        TBBUrw.Price = DivRateToBase1(TBBUr.CurncyCode,price,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
        if (Mid(markup,len(markup)-1,1)!="%") then begin    
          markup = DivRateToBase1(TBBUr.CurncyCode,StringToVal(markup,M4Val),TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
        end;
      end;
    end else begin
      TBBUrw.Price = price;
    end;
    TBBUrw.Markup = markup;
  end;
  if (TBBUrw.Discount==0) then begin TBBUrw.Discount = blankval; end;
  return;
end;

global
function Boolean TBBUVc_PasteArtCode(var record TBBUVc TBBUr,Integer rownr,var string inmsg)
begin
  Boolean res;
  record CUVc CUr;
  row TBBUVc TBBUrw;
  string 255 tstr,markup,markupincur;
  val price,reb,v,priceincur;
  record INVc INr;
  Time blankt;
  val cost,t,s,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tax2code,location,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf;
  Boolean dummyf,varf2;
  record TaxMatrixVc TMr;
  
  inmsg = "";
  MatRowGet(TBBUr,rownr,TBBUrw);
  if (nonblank(TBBUrw.ArtCode)) then begin
    if (GetFirstItem(TBBUrw.ArtCode,INr)) then begin
      TBBUrw.ArtCode = INr.Code;
      if (nonblank(INr.WarnText1)) then begin
        inmsg = INr.WarnText1;
      end;
      if (INr.ItemType==1) then begin        
        TBBUrw.RowType = TBBUr.BudStocked;
      end;    
      if (INr.ItemType==3) then begin        
        TBBUrw.RowType = TBBUr.BudTime;
      end;    
      if ((INr.ItemType!=1) and (INr.ItemType!=3)) then begin
        if (INr.ItemMaterial!=0) then begin
          TBBUrw.RowType = TBBUr.BudMaterial;
        end else begin
          TBBUrw.RowType = TBBUr.BudOther;
        end;      
      end;
      TBBUrw.ItemType = INr.ItemType;
      if (TBBUrw.ItemType==0) then begin 
        if (INr.ItemMaterial!=0) then begin            
          TBBUrw.ItemType = 5;
        end;
      end;      
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        TBBUrw.Recepy = INr.Recepy;
      end else begin
        TBBUrw.Recepy = "";
      end;    
      if (GetItemNameStr(1,tstr,TBBUr.LangCode,INr.Name,INr.Code)) then begin end;
      TBBUrw.Comment = tstr;
      TBBUrw.Objects = FindINObjects(INr.Objects,INr.Group);
      MatRowPut(TBBUr,rownr,TBBUrw);
      if ((INr.ExplodeRec==0) or (blank(TBBUrw.Recepy))) then begin
        TBBUMultiLineText(TBBUr,INr,TBBUr.LangCode,rownr);
      end;          
      res = true;
    end else begin
      res = false;
    end;
    TBBURowAddPrice(TBBUr,TBBUrw);
/*    
    CUr.Code = TBBUr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin 
      if (GetItemPriceDiscount3(INr.Code,1,INr,CUr.CurncyCode,0,0,0,0,0,CUr.LangCode,CUr.CustCat,CUr.PLCode,CUr.RebCode,price,curitemname,reb,vatcode,cost,salesacc,CUr.ExportFlag,calcprice,CurrentDate,blankt,CUr.Code,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
        TBBUrw.Cost = cost;
      end; 
    end;  
*/    
    MatRowPut(TBBUr,rownr,TBBUrw);
  end;
  TBBUVc_PasteArtCode = res;
  return;
end;

global
procedure TBBUVc_PasteEMCode(var record TBBUVc TBBUr,Integer rownr)
begin
  row TBBUVc TBBUrw;
  val price,reb,priceincur;
  string 10 markup,markupincur;
      
  MatRowGet(TBBUr,rownr,TBBUrw);
  TBBURowAddPrice(TBBUr,TBBUrw);
  MatRowPut(TBBUr,rownr,TBBUrw);
  return;
end;

global
function Boolean TBBUVc_PasteQty(var record TBBUVc TBBUr,Integer rownr)
begin
  Boolean res;
  record INVc INr;
  row TBBUVc TBBUrw;
  val price,reb,v;
  string 10 markup;
  
  MatRowGet(TBBUr,rownr,TBBUrw);
  if (nonblank(TBBUrw.ArtCode)) then begin
    INr.Code = TBBUrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (INr.ExplodeRec==0) then begin
        if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
          TBBUrw.Recepy = INr.Recepy;
        end else begin
          TBBUrw.Recepy = "";
        end;
      end;
      if (INr.ExplodeRec!=0) then begin
        if (nonblank(TBBUrw.Recepy)) then begin
          if (TBBUVc_ExplodeRecepy(INr,TBBUrw.Qty,TBBUr,TBBUrw.Recepy,rownr)) then begin end;
          MatRowGet(TBBUr,rownr,TBBUrw);
          TBBUrw.Recepy = "";
        end else begin
          TBBUVc_ChangeQuantityRecepy(TBBUrw.ArtCode,TBBUrw.Qty,rownr,TBBUr);
        end;
      end;
    end;
    TBBURowAddPrice(TBBUr,TBBUrw);
    MatRowPut(TBBUr,rownr,TBBUrw);
    res = true;
  end;
  TBBUVc_PasteQty = res;
  return;
end;
    
global
procedure TBBUGetRate(var record TBBUVc TBBUp)
begin
  val from,to1,to2,base1,base2;
  string 5 crncy;
  Date td;
 
  crncy = TBBUp.CurncyCode;
  td = TBBUp.TransDate;
  if (blankdate(td)) then begin td = CurrentDate; end;
  GetFullCurncyRate(crncy,td,from,to1,to2,base1,base2);
  TBBUp.CurncyCode = crncy;
  TBBUp.FrRate = from;
  TBBUp.ToRateB1 = to1;
  TBBUp.ToRateB2 = to2;
  TBBUp.BaseRate1 = base1;
  TBBUp.BaseRate2 = base2;  
  return;
end;

global
procedure TBBUDUpdatePrices(var record TBBUVc TBBUr,Boolean readf)
begin
  Integer i,rwcnt;
  row TBBUVc TBBUrw;
  record INVc INr;
  val price,reb;
  string 10 markup;
  record GeneralOptionBlock GOb;

  BlockLoad(GOb);
  if (readf) then begin
    if (ReadFirstMain(TBBUr,0,true)) then begin end;  
  end;
  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (nonblank(TBBUrw.ArtCode)) then begin
      INr.Code = TBBUrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        TBBURowAddPrice(TBBUr,TBBUrw);
        MatRowPut(TBBUr,i,TBBUrw);
        TBBUDchrsum(TBBUr,i,true,GOb.UseDiscount);
      end;
    end;
  end;
  TBBUSumup(TBBUr);
  return;
end;
            
global
procedure TBBUVc_PasteCurncyCode(var record TBBUVc TBBUp,string oldcurncy,Boolean newratef)
begin
  val fr,to1,to2,br1,br2;
  row TBBUVc TBBUrw;
  string 10 crncy;
  record ItemSettingBlock ISr;
  Boolean testf;
  
  testf = true;
  if (testf) then begin
    if (TBBUp.CurncyCode!=oldcurncy) or (newratef) then begin
      BlockLoad(ISr);
      SaveExchangeRate(TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,fr,to1,to2,br1,br2);
      TBBUGetRate(TBBUp);
      if ((OtherExchangeRate(TBBUp.FrRate,TBBUp.ToRateB1,TBBUp.ToRateB2,TBBUp.BaseRate1,TBBUp.BaseRate2,fr,to1,to2,br1,br2)) and (ISr.UpdCurPrWithDate!=0)) then begin 
        TBBUDUpdatePrices(TBBUp,false);
      end;
    end;
  end;
  return;
end;

global
procedure TBBUVc_PasteSalesMan(var record TBBUVc TBBUp,string oldsalesmen)
begin 
  record UserVc Userr;
  string 255 salesman;
  Integer pos;

  if (HasSalesmanChanged(TBBUp.SalesMan,oldsalesmen)) then begin
    TBBUp.SalesGroup = "";    
    pos = 0;
    ExtractObj(TBBUp.SalesMan,pos,salesman);
    while (nonblank(salesman)) begin
      Userr.Code = salesman;
      if (ReadFirstMain(Userr,1,true)) then begin
        TBBUp.SalesGroup = AddObjectToObjectList(TBBUp.SalesGroup,Userr.SalesGroup);                
      end;
      ExtractObj(TBBUp.SalesMan,pos,salesman);
    end;
  end;
  return;
end;

global
procedure TBBUVc_PastePRCode(var record TBBUVc TBBUr)
begin 
  record CUVc CUr;
  record PRVc PRr;

  PRr.Code = TBBUr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    TBBUr.PRName = PRr.Name;
    CUr.Code = PRr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      TBBUr.CustCode = PRr.CustCode;
      TBBUr.CustName = PRr.CustName;
      TBBUr.LangCode = PRr.LangCode;
      TBBUr.PRLeader = PRr.Leader;
      TBBUr.SalesMan = PRr.PrSalesMan;
      TBBUr.SalesGroup = PRr.SalesGroup;
      TBBUr.Members = PRr.Members;
      TBBUr.CurncyCode = PRr.CurncyCode;
      TBBUVc_PasteCurncyCode(TBBUr,"",true);    
    end;
  end;
  return;
end;

global
function Boolean TBBUVc_PasteTimeClass(var record TBBUVc TBBUr,Integer rownr)
begin
  Boolean res;
  row TBBUVc TBBUrw;
  val price,cost;
  string 10 markup;
  record GeneralOptionBlock GOb;
  
  BlockLoad(GOb);
  MatRowGet(TBBUr,rownr,TBBUrw);
  if (nonblank(TBBUrw.TimeClass)) then begin
    price = TBBUrw.Price;
    cost = TBBUrw.Cost;
    if (GetTimeClassPrice(TBBUrw.TimeClass,TBBUrw.ArtCode,price,cost)) then begin
      TBBUrw.Price = price;
      TBBUrw.Cost = cost;
      MatRowPut(TBBUr,rownr,TBBUrw);
      TBBURowAddPrice(TBBUr,TBBUrw);
      MatRowPut(TBBUr,rownr,TBBUrw);
      TBBUDchrsum(TBBUr,rownr,false,GOb.UseDiscount);
    end;
  end;
  TBBUSumup(TBBUr);
  TBBUVc_PasteTimeClass = res;
  return;
end;

global
procedure TBBUDClassOnOpenWindowRemote(var record TBBUVc TBBUr,var Integer AcceptanceStatusFlag)
begin
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  if (HasApprovals) then begin
    AcceptanceStatusFlag = TBBUApprovalStatus(TBBUr,Acptr);
  end;
  return;
end;