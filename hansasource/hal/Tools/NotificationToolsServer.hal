external function Boolean InternalServiceRequestAsync(string,string,Boolean,area,string);
external procedure SendEOLParameter(var Area);
external procedure SendTextParameter(string,var Area);
external procedure SendFunctionVersion(string,string,var Area);
external procedure LogAreaToFile(string,area);
external function Boolean AreasAreEqual(area,area);

function Boolean GetMobileDeviceForUser(string usercode,var record MobileDeviceVc MDr,Integer devicetype)
begin
  record UserVc Userr;
  Boolean foundf;

  MDr.Sign = usercode;
  foundf = true;
  while(LoopKey("Sign",MDr,1,foundf)) begin
    if (MDr.Sign!=usercode) then begin foundf = false; end;
    if (foundf) then begin
      if (MDr.DeviceType==devicetype or devicetype==-1) then begin
        goto LGetMobileDeviceForUser;
      end;
    end;
  end;
  foundf = false;
LGetMobileDeviceForUser:;
  GetMobileDeviceForUser = foundf;
end;

global
updating procedure UpdateDeviceTokenForUser(string usercode,string bundleIdentifier,area devicetoken)
begin
  record MobileDeviceVc MDr,oldMDr;
  Boolean foundf;
  
  if (GetAreaLength(devicetoken)==0) then begin goto LUpdateDeviceTokenForUser; end;

  if (GetMobileDeviceForUser(usercode,MDr,kDeviceTypeiPhone)) then begin
    foundf = true;
    RecordCopy(oldMDr,MDr);
  end;
  MDr.BundleIdentifier = bundleIdentifier;
  SetRecordBlob(MDr,"DeviceToken",devicetoken);
  if (foundf) then begin
    RecordUpdate(oldMDr,MDr,false);
  end else begin
    MDr.DeviceType = kDeviceTypeiPhone;
    MDr.ActiveFlag = 1;
    RecordStore(MDr,false);
  end;
  
LUpdateDeviceTokenForUser:;
end;

function string 255 GetApplePushNotificationHost(Boolean livef)
begin
  string 255 res;
  
  if (livef) then begin
    res = "gateway.push.apple.com";
  end else begin
    res = "gateway.sandbox.push.apple.com";
  end;
  
  GetApplePushNotificationHost = res;
end;

function LongInt GetApplePushNotificationPort()
begin
  GetApplePushNotificationPort = 2195;
end;

global
function Boolean SendiOSNotificationToUser(string title,string message,Integer badge,area devicetoken,string bundleidentifier)
begin
  Boolean res;
  area req,a,cert_a;
  string 255 payloadA,payloadB;
  Boolean livef,firstf,endf;
  string 255 certfile,keyfile,keypassword;
  record NotificationCertificateVc NotificationCertificater;
  record Attach2Vc Attach2r;
  record RLinkVc RLr;
  string 255 fname;
  Integer filenr;

  res = false;
  livef = false;
  firstf = true;

  if (GetAreaLength(devicetoken)==0) then begin goto LSendiOSNotificationToUser; end;
  
  NotificationCertificater.BundleIdentifier = bundleidentifier;
  if (ReadFirstMain(NotificationCertificater,1,true)) then begin
    filenr = 1;
    while (ReadRecordLink(NotificationCertificater,filenr,Attach2r,RLr)) begin
      if ((nonblank(Attach2r.FileName)) and (Attach2r.Uploading==0)) then begin
        if (right(Attach2r.FileName,8)=="cert.pem") then begin
          if (Instring(Attach2r.FileName,bundleidentifier)<1) then begin
            certfile = "tmp/" & bundleidentifier & Attach2r.FileName;
          end else begin
            certfile = "tmp/" & Attach2r.FileName;
          end;
          SetAreaZeroSize(cert_a);
          AddAttachFileToArea(Attach2r,cert_a,false);
          Delete_File(certfile);
          WriteAreaToFile(cert_a,certfile,0);
        end;
        if (right(Attach2r.FileName,7)=="key.pem") then begin
          if (Instring(Attach2r.FileName,bundleidentifier)<1) then begin
            keyfile = "tmp/" & bundleidentifier & Attach2r.FileName;
          end else begin
            keyfile = "tmp/" & Attach2r.FileName;
          end;
          SetAreaZeroSize(cert_a);
          AddAttachFileToArea(Attach2r,cert_a,false);
          Delete_File(keyfile);
          WriteAreaToFile(cert_a,keyfile,0);
        end;
      end;
      filenr = filenr + 1;
    end;
    keypassword = NotificationCertificater.KeyPassword;
    if (blank(keyfile) or blank(certfile)) then begin
      LogText(0,"Files not found for bundleidentifier:" & bundleidentifier & " keyfile:" & keyfile & " certfile:" & certfile);
      goto LSendiOSNotificationToUser;
    end;
  end else begin
    LogText(0,"Certificate for bundle identifier not found:" & bundleidentifier);
    goto LSendiOSNotificationToUser;
  end;

  AddByteToArea(1,a);
  AddIntToArea(GetAreaLength(devicetoken),a);
  AddAreaToArea(devicetoken,a);
  
  payloadA = "{""aps"" : ";
  if (nonblank(message) or nonblank(title)) then begin
    payloadA = payloadA & "{""alert"" : { ""title"" : """ & title & """, ""body"" : """;
    payloadB = """}";
    firstf = false;
    endf = true;
  end;
  if (badge!=-1) then begin
    if (firstf) then begin
      payloadB = payloadB & "{";
    end else begin
      payloadB = payloadB & ",";
    end;
    payloadB = payloadB & " ""badge"" : " & badge;
    endf = true;
  end;
  if (endf) then begin
    payloadB = payloadB & " }";
  end;
  payloadB = payloadB & " }";

  AddByteToArea(2,a);
  AddIntToArea(len(payloadA) + len(message) + len(payloadB),a);
  AddTextToArea(payloadA,a);
  AddTextToArea(message,a);
  AddTextToArea(payloadB,a);

  AddByteToArea(3,a);
  AddIntToArea(4,a);
  AddLongToArea(0,a); // Notification id
  
  AddByteToArea(4,a);
  AddIntToArea(4,a);
  AddLongToArea(0,a); // Expiration date
  
  AddByteToArea(5,a);
  AddIntToArea(1,a);
  AddByteToArea(10,a); // Priority
  
  AddByteToArea(2,req);
  AddLongToArea(GetAreaLength(a),req);
  AddAreaToArea(a,req);
  
  SetSSLClientCertificate(certfile);
  SetSSLClientPivateKey(keyfile);
  SetSSLClientPrivateKeyPassword(keypassword);
//  LogAreaToFile("iOSReq.txt",a);
  SendAsyncTCPRequest(GetApplePushNotificationHost(livef),GetApplePushNotificationPort,-1,true,req,6,"SendiOSNotificationToUserReply",20);
  
  res = true;
  
LSendiOSNotificationToUser:;
  SendiOSNotificationToUser = res;
end;

global
procedure SendiOSNotificationToUserReply(area reply,Boolean timedout)
begin
  string 255 statusstr;
  Integer command,status;
  LongInt msgid;
  
  LogText(0,"SendiOSNotificationToUserReply, GetAreaLength(reply) = " & GetAreaLength(reply) & ", timedout = " & timedout);
  
  if (timedout) then begin goto LSendiOSNotificationToUserReply; end;
  if (GetAreaLength(reply)==0) then begin goto LSendiOSNotificationToUserReply; end;
  if (GetAreaLength(reply)!=6) then begin
    LogText(0,"Unexpected length of reply in SendiOSNotificationToUserReply");
    goto LSendiOSNotificationToUserReply;
  end;
  
  command = GetByteFromArea(reply,0);
  status = GetByteFromArea(reply,1);
  msgid = GetLongFromArea(reply,2);
  
  if (command!=8) then begin
    LogText(0,"Unexpected command: " & command & ", in reply in SendiOSNotificationToUserReply");
    goto LSendiOSNotificationToUserReply;
  end;
  
  switch (status) begin
    case 0:   statusstr = "No errors encountered";
    case 1:   statusstr = "Processing error";
    case 2:   statusstr = "Missing device token";
    case 3:   statusstr = "Missing topic";
    case 4:   statusstr = "Missing payload";
    case 5:   statusstr = "Invalid token size";
    case 6:   statusstr = "Invalid topic size";
    case 7:   statusstr = "Invalid payload size";
    case 8:   statusstr = "Invalid token";
    case 10:  statusstr = "Shutdown";
    case 255: statusstr = "None (unknown)";
    otherwise statusstr = "Unknown status";
  end;
  
  if (status!=0) then begin
    LogText(0,"Status: " & statusstr & ", in reply for message with ID " & msgid & " in SendiOSNotificationToUserReply");
  end;
  
LSendiOSNotificationToUserReply:;
end;

function Boolean SendAndroidNotificationToUser(string message)
begin
  Boolean res;
  SendAndroidNotificationToUser = res;
end;

global
updating procedure SendPushNotificationExecute(string title,string message,Integer badge,area devicetoken,string bundleidentifier,Integer devicetype)
begin
  area a_req;
  record InternetEnablerBlock IEb;
  record HTSFileVc HTSFr;

  BlockLoad(IEb);

  SendFunctionVersion("64.0","",a_req);
  SendTextParameter(IEb.CustomerCode,a_req);
  SendTextParameter(title,a_req);
  SendTextParameter(message,a_req);
  SendTextParameter(badge,a_req);
  SendTextParameter(bundleidentifier,a_req);
  SendTextParameter(devicetype,a_req);
  SendEOLParameter(a_req);
  SetRecordBlob(HTSFr,"Math",devicetoken);
  HTSFr.FileName = "Devicetoken";
  AddRecordToArea(HTSFr,"HTSFileVc",a_req);

//  LogAreaToFile("SendPushNotification_req.txt",a_req);
  InternalServiceRequestAsync("PushNotification","",false,a_req,"SendPushNotificationReply")

LSendPushNotificationExecute:;
  return;
end;

global
procedure SendPushNotification(string title,string message,Integer badge,area devicetoken,string bundleidentifier,Integer devicetype)
begin
  queued.SendPushNotificationExecute(title,message,badge,devicetoken,bundleidentifier,devicetype);
  return;
end;


global
function Boolean SendNotificationToUser(string usercode,string message)
begin
  Boolean res;
  record MobileDeviceVc MDr;
  area devicetoken;
  
  res = false;

  if (SendLocalNotificationToUser(usercode,"",message)) then begin
    res = true;
    goto LSendNotificationToUser;
  end;
  if (GetMobileDeviceForUser(usercode,MDr,-1)==false) then begin goto LSendNotificationToUser; end;
  
  switch (MDr.DeviceType) begin
    case kDeviceTypeiPhone:
      GetRecordBlob(MDr,"DeviceToken",devicetoken);
//      res = SendiOSNotificationToUser("",message,-1,devicetoken,MDr.BundleIdentifier);
      SendPushNotification("",message,-1,devicetoken,MDr.BundleIdentifier,kDeviceTypeiPhone);
      res = true; //Should do if successful, in reply
    case kDeviceTypeAndroidPhone:
      res = SendAndroidNotificationToUser(message);
  end;
  
LSendNotificationToUser:;
  SendNotificationToUser = res;
end;


global
updating procedure SendPushNotificationReply(Area a_reply,Area a_replyheader,Boolean timeout)
begin
end;
