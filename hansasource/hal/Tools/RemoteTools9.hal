external function Boolean OYDchrsum(var record OYVc,Integer,Integer);
external procedure OYDchsum(record OYVc,Integer);
external procedure OYSumup(var record OYVc);
external procedure ORDchsum(var record ORVc,Integer);
external function Boolean ORDchrsum(var record ORVc,Integer);
external function Boolean StringContainsAlpha(string);
external function Time TimeDiff(Time,Time);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Boolean FindFormcode(Integer,Integer);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure PasteTBBUInOR(record TBBUVc,var record ORVc);
external procedure PasteTBBUInPO(record TBBUVc,var record POVc);
external procedure ORSumup(var record ORVc);
external procedure POSumup(var record POVc);
external function string 255 FindINObjects(string,string);
external function val GetStockQty(string,string,Date,Boolean);
external procedure StockMovSumUp(var record StockMovVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure IVSumup(var record IVVc,Boolean);
external function LongInt GetCurUserLastNr(string);
external function Boolean PastePOQTInPO(record POQTVc,var record POVc);
external procedure QTDchsum(record QTVc,Integer);
external function Boolean QTDchrsum(var record QTVc,Integer,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure IVDchsum(var record IVVc,Integer);
external function Integer GetStaffNr(var val,record StaffVc);
external procedure QTSumup(var record QTVc);
external procedure NextOfficialSerNr(string,LongInt,Date,string,var string);
external function string 50 NextLegalSerNr(string,LongInt,Date,string,string,string);

function string 255 GetInvoiceFormCode(record IVVc IVr)
begin
  string 255 res;
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  Boolean langf,found;
  string 30 langcode,langcod2;
  Integer intdocnr;
  
  langcode = IVr.LangCode;
  langcod2 = IVr.ShipMode;
  switch (IVr.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      FDr.repname = "CashInvoiceReceiptPRTForm";
      FDr.shortname = "";
      if (ReadFirstMain(FDr,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LGetInvoiceFormCode;
      end;
      rwcnt = MatRowCnt(FDr);
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FDrw.LangCode==langcode) then begin
          i = -1;
          langf = true;
        end;
      end;
      if (langf==false) then begin langcode = ""; end;  
      intdocnr = 1;
LFINDFORMCOCEInvCashInvoiceReceiptPRT:;
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FindFormcode(IVr.OKFlag,FDrw.Typ)) then begin
          if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                          langcode,intdocnr,"IVVc",res)) then
          begin
            goto LGetInvoiceFormCode;
          end;
        end;
      end;
      if (nonblank(langcod2)) then begin
        langcode = langcod2;
        langcod2 = "";
        goto LFINDFORMCOCEInvCashInvoiceReceiptPRT;
      end;  
    case kInvoiceTypeCash:
      FDr.repname = "CashForm";
      FDr.shortname = "";
      if (ReadFirstMain(FDr,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LGetInvoiceFormCode;
      end;
      rwcnt = MatRowCnt(FDr);
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FDrw.LangCode==langcode) then begin
          i = -1;
          langf = true;
        end;
      end;
      if (langf==false) then begin langcode = ""; end;  
      intdocnr = 1;
LFINDFORMCOCEInvCash:;
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FindFormcode(IVr.OKFlag,FDrw.Typ)) then begin
          if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                          langcode,intdocnr,"IVVc",res)) then
          begin
            goto LGetInvoiceFormCode;
          end;
        end;
      end;
      if (nonblank(langcod2)) then begin
        langcode = langcod2;
        langcod2 = "";
        goto LFINDFORMCOCEInvCash;
      end;  
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
      LkInvoiceTypeCredit:;
      FDr.repname = "CredInvForm";
      FDr.shortname = "";
      if (ReadFirstMain(FDr,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LGetInvoiceFormCode;
      end;
      rwcnt = MatRowCnt(FDr);
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FDrw.LangCode==langcode) then begin
          i = -1;
          langf = true;
        end;
      end;
      if (langf==false) then begin langcode = ""; end;  
      intdocnr = 1;
LFINDFORMCOCEInvCredit:;
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FindFormcode(IVr.OKFlag,FDrw.Typ)) then begin
          if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                          langcode,intdocnr,"IVVc",res)) then
          begin
            goto LGetInvoiceFormCode;
          end;
        end;
      end;
      if (nonblank(langcod2)) then begin
        langcode = langcod2;
        langcod2 = "";
        goto LFINDFORMCOCEInvCredit;
      end;  
    case kInvoiceTypeInterest:
      FDr.repname = "IIInvForm";
      FDr.shortname = "";
      if (ReadFirstMain(FDr,1,true)==false) then begin
        MessageBox(1624, " " & USetStr(1623));
        goto LGetInvoiceFormCode;
      end;
      rwcnt = MatRowCnt(FDr);

      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FDrw.LangCode==langcode) then begin
          i = -1;
          langf = true;
        end;
      end;
      if (langf==false) then begin langcode = ""; end;  
      intdocnr = 1;
LFINDFORMCOCEInvInterest:;
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FindFormcode(IVr.OKFlag,FDrw.Typ)) then begin
          if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                          langcode,intdocnr,"IVVc",res)) then
          begin
            goto LGetInvoiceFormCode;
          end;
        end;
      end;
      if (nonblank(langcod2)) then begin
        langcode = langcod2;
        langcod2 = "";
        goto LFINDFORMCOCEInvInterest;
      end;  
    otherwise
      found = false;
      if (nonblank(IVr.PRCode)) then begin        
        FDr.repname = "ProjInvForm";
        FDr.shortname = "";
        found = ReadFirstMain(FDr,1,true);
        rwcnt = MatRowCnt(FDr);
        for (i=rwcnt-1;i>=0;i=i-1) begin
          MatRowGet(FDr,i,FDrw);
          if (FDrw.LangCode==langcode) then begin
            i = -1;
            langf = true;
          end;
        end;
        if (langf==false) then begin langcode = ""; end;  
        intdocnr = 1;
LFINDFORMCOCEInvProj:;
        for (i=rwcnt-1;i>=0;i=i-1) begin
          MatRowGet(FDr,i,FDrw);
          if (FindFormcode(IVr.OKFlag,FDrw.Typ)) then begin
            if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                            langcode,intdocnr,"IVVc",res)) then
            begin
              goto LGetInvoiceFormCode;
            end;
          end;
        end;
        if (nonblank(langcod2)) then begin
          langcode = langcod2;
          langcod2 = "";
          goto LFINDFORMCOCEInvProj;
        end; 
      end;
      if (found==false) then begin
        FDr.repname = "InvForm";
        FDr.shortname = "";
        if (ReadFirstMain(FDr,1,true)==false) then begin
          MessageBox(1624, " " & USetStr(1623));
          goto LGetInvoiceFormCode;
        end;
        rwcnt = MatRowCnt(FDr);
        for (i=rwcnt-1;i>=0;i=i-1) begin
          MatRowGet(FDr,i,FDrw);
          if (FDrw.LangCode==langcode) then begin
            i = -1;
            langf = true;
          end;
        end;
        if (langf==false) then begin langcode = ""; end;  
        intdocnr = 1;
LFINDFORMCOCEInv:;
        for (i=rwcnt-1;i>=0;i=i-1) begin
          MatRowGet(FDr,i,FDrw);
          if (FindFormcode(IVr.OKFlag,FDrw.Typ)) then begin
            if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,IVr.SerNr,FDrw.PrintGroupCode,
                            langcode,intdocnr,"IVVc",res)) then
            begin
              goto LGetInvoiceFormCode;
            end;
          end;
        end;
        if (nonblank(langcod2)) then begin
          langcode = langcod2;
          langcod2 = "";
          goto LFINDFORMCOCEInv;
        end; 
      end; 
  end;
LGetInvoiceFormCode:;
  GetInvoiceFormCode = res;
  return;
end;

global
function Integer CountNumberOfInvoicePrintPages(record IVVc IVr)
begin
  record DocVc Docr;
  string 255 tstr,formcode;
  Integer pm,t;
  Integer DocPageMode,DocRowMax;
  Integer DocRowMaxFirst,DocRowMaxMiddle,DocRowMaxLast;
  Integer rwcnt;
  
  rwcnt = MatRowCnt(IVr);
  Docr.Code = GetInvoiceFormCode(IVr);
  if (ReadFirstMain(Docr,1,true)) then begin
    DocRowMax = 20;
    if (Docr.nrOfMatrixLinesOnly>0) then begin
      DocRowMax = Docr.nrOfMatrixLinesOnly;
    end else begin
      if (Docr.nrOfMatrixLinesOnly==-1) then begin
        DocRowMax = 0;
      end;
    end;
    DocRowMaxFirst = Docr.nrOfMatrixLinesOnly;
    DocRowMaxMiddle = Docr.nrOfMatrixLinesOnly;
    DocRowMaxLast = Docr.nrOfMatrixLinesOnly;
    if (Docr.nrOfMatrixLinesFirst>0) then begin
      DocRowMaxFirst = Docr.nrOfMatrixLinesFirst;
    end else begin
      if (Docr.nrOfMatrixLinesFirst==-1) then begin
        DocRowMaxFirst = 0;
      end;
    end;
    if (Docr.nrOfMatrixLinesLast>0) then begin
      DocRowMaxLast = Docr.nrOfMatrixLinesLast;
    end;
    if (Docr.nrOfMatrixLinesMiddle>0) then begin
      DocRowMaxMiddle = Docr.nrOfMatrixLinesMiddle;
    end;
    pm = 0;
    t = rwcnt - DocRowMaxFirst - DocRowMaxLast;
    if (t<=0) then begin  
      if (DocRowMax>=rwcnt) then begin
        pm = 1;
        goto LNumberofDocumentPages;
      end;
      if (rwcnt<=(DocRowMaxFirst+DocRowMaxLast)) then begin
        pm = 2;
        goto LNumberofDocumentPages;
      end;
      pm = rwcnt / DocRowMax;
      if (Mod(rwcnt,DocRowMax)!=0) then begin
        pm = pm + 1;
      end;
    end else begin
      while (t>0) begin
        t = t - DocRowMaxMiddle;
        if (DocRowMaxMiddle==0) then begin
          goto Lwhile;
        end;
        pm = pm + 1;
      end;
Lwhile:;
      pm = pm + 2;
    end;
LNumberofDocumentPages:;    
  end;
  CountNumberOfInvoicePrintPages = pm;
  return;
end;

global
function string 255 FindNextLegalSerNr(record IVVc IVr,string cuclass)
BEGIN
  string 255 res,tstr;
  record LegalInvNrBlock LegalInvNrRec;
  row LegalInvNrBlock LegalInvNrrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  LongInt invnr;
  Date invdate;  
  record OffSerNrIVVc OffSerNrIVr;
  
  invnr = IVr.SerNr;
  invdate = IVr.InvDate;
  NextOfficialSerNr("IVVc",invnr,invdate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = IVr.SerNr;
    OffSerNrIVr.FileName= "IVVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextLegalSerNr;
    end;

    BlockLoad(LegalInvNrRec);  
    rwcnt = MatRowCnt(LegalInvNrRec);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LegalInvNrRec,i,LegalInvNrrw);
        testf = true;
        if (nonblank(LegalInvNrrw.CClass)) then begin
          if (nonblank(cuclass)) then begin
            if (SetInSet(LegalInvNrrw.CClass,cuclass)==false) then begin testf = false; end;
          end;
        end;
        if (nonblankdate(LegalInvNrrw.EndDate)) then begin
          if (invdate>LegalInvNrrw.EndDate) then begin testf = false; end;
        end;
        if (testf) then begin
          res = NextLegalSerNr("IVVc",invnr,invdate,LegalInvNrrw.Serie,LegalInvNrrw.TSerStart,LegalInvNrrw.TSerEnd);
          if (nonblank(res)) then begin 
            if (LegalInvNrrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LegalInvNrrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LegalInvNrrw.TSerStart),"0",true,tstr);
                tstr = LegalInvNrrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
LFindNextLegalSerNr:;  
  FindNextLegalSerNr = res;
  RETURN;
END;
    
global
procedure GetLegalInvNrRow(string officialsernr,var row LegalInvNrBlock resLINrbrw)
begin    
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  string 255 tstr;
  Boolean testf;
  
  ClearRow(LINrb,resLINrbrw,1);
  BlockLoad(LINrb);  
  rwcnt = MatRowCnt(LINrb);
  if (rwcnt>0) then begin    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      testf = false;
      tstr = Left(officialsernr,len(LINrbrw.Serie));
      tstr = Right(officialsernr,len(officialsernr) - len(tstr));
      if (Left(officialsernr,len(LINrbrw.Serie))==LINrbrw.Serie) then begin
        if (len(StripNonDigits(tstr))==len(tstr)) then begin 
          testf = true;
        end;
      end;
      if (testf) then begin
        tstr = Right(officialsernr,len(officialsernr)-len(LINrbrw.Serie));
        if ((StringContainsAlpha(tstr)) or (StringContainsAlpha(LINrbrw.TSerStart)) or (StringContainsAlpha(LINrbrw.TSerEnd)))  then begin
          if ((tstr>=LINrbrw.TSerStart) and (tstr<=LINrbrw.TSerEnd)) then begin
            CopyRow(LINrb,LINrbrw,resLINrbrw);
            i = rwcnt;
          end;
        end else begin
          if ((StringToLongInt(tstr)>=StringToLongInt(LINrbrw.TSerStart)) and (StringToLongInt(tstr)<=StringToLongInt(LINrbrw.TSerEnd))) then begin
            CopyRow(LINrb,LINrbrw,resLINrbrw);
            i = rwcnt;
          end;
        end;
      end;
    end;
  end;
  return;
end;
    
function Boolean TestNextOfficialSerialNr(row LegalInvNrBlock LINrbrw,string branchid,string cuclass,Integer invtype,Integer taxinvtype)
begin
  Boolean testf;
  
  testf = false;
  switch (LINrbrw.RegType) begin
    case kOfficialNumTypeAllIVVc:
      testf = true;
    case kOfficialNumTypeInterestIVVc:
      if (invtype==kInvoiceTypeInterest or invtype==kInvoiceTypeDebit) then begin testf = true; end;
    case kOfficialNumTypeRecoverdInterestIVVc:
      if (invtype==kInvoiceTypeInterest or invtype==kInvoiceTypeDebit) then begin testf = true; end;
    case kOfficialNumTypeManualInterestIVVc:
      if (invtype==kInvoiceTypeInterest or invtype==kInvoiceTypeDebit) then begin testf = true; end;
    case kOfficialNumTypeCashInvoiceReceiptPRTIVVc:
      if (invtype==kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = true; end;
    case kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc:
      if (invtype==kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = true; end;
    case kOfficialNumTypeManualCashInvoiceReceiptIVVc:
      if (invtype==kInvoiceTypeCashInvoiceReceiptPRT) then begin testf = true; end;
    case kOfficialNumTypeCashIVVc:
      if (invtype==kInvoiceTypeCash) then begin testf = true; end;
    case kOfficialNumTypeManualCashIVVc:
      if (invtype==kInvoiceTypeCash) then begin testf = true; end;
    case kOfficialNumTypeRecoverdCashIVVc:
      if (invtype==kInvoiceTypeCash) then begin testf = true; end;
    case kOfficialNumTypeCreditIVVc:
      if (invtype==kInvoiceTypeCredit or invtype==kInvoiceTypeCreditSpecialSales) then begin testf = true; end;
    case kOfficialNumTypeRecoverdCreditIVVc:
      if (invtype==kInvoiceTypeCredit or invtype==kInvoiceTypeCreditSpecialSales) then begin testf = true; end;
    case kOfficialNumTypeManualCreditIVVc:
      if (invtype==kInvoiceTypeCredit or invtype==kInvoiceTypeCreditSpecialSales) then begin testf = true; end;
    case kOfficialNumTypeIVVc:
      if (invtype==kInvoiceTypeNormal or invtype==kInvoiceTypeDownpayment) and (taxinvtype==kTaxInvTypeNormal) then begin testf = true; end;
    case kOfficialNumTypeLiquidationIVVc:
      if (invtype==kInvoiceTypeNormal or invtype==kInvoiceTypeDownpayment) and (taxinvtype==kTaxInvTypeLiquidation) then begin testf = true; end;
    case kOfficialNumTypeReceiptIVVc:
      if (invtype==kInvoiceTypeNormal or invtype==kInvoiceTypeDownpayment) and (taxinvtype==kTaxInvTypeReceipt) then begin testf = true; end;
    case kOfficialNumTypeManualIVVc:
      if (invtype==kInvoiceTypeNormal or invtype==kInvoiceTypeDownpayment) and (taxinvtype==kTaxInvTypeNormal) then begin testf = true; end;
    case kOfficialNumTypeRecoverdIVVc:
      if (invtype==kInvoiceTypeNormal or invtype==kInvoiceTypeDownpayment) and (taxinvtype==kTaxInvTypeNormal) then begin testf = true; end;
    case kOfficialNumTypeSpecialSalesIVVc:
      if (invtype==kInvoiceTypeNormalSpecialSales) then begin testf = true; end;
  end;
    
/*
  if (LINrbrw.RegType==kOfficialNumTypeAllIVVc) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeInterestIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdInterestIVVc or LINrbrw.RegType==kOfficialNumTypeManualInterestIVVc) and ((invtype==kInvoiceTypeInterest) or (invtype==kInvoiceTypeDebit)) then begin 
    testf = true;
  end;  
  if (LINrbrw.RegType==kOfficialNumTypeCashInvoiceReceiptPRTIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc or LINrbrw.RegType==kOfficialNumTypeManualCashInvoiceReceiptIVVc) and (invtype==kInvoiceTypeCashInvoiceReceiptPRT) then begin 
    testf = true;
  end;  
  if (LINrbrw.RegType==kOfficialNumTypeCashIVVc or LINrbrw.RegType==kOfficialNumTypeManualCashIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCashIVVc) and (invtype==kInvoiceTypeCash) then begin 
    testf = true;
  end;  
  if (LINrbrw.RegType==kOfficialNumTypeCreditIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCreditIVVc or LINrbrw.RegType==kOfficialNumTypeManualCreditIVVc) and (invtype==kInvoiceTypeCredit or invtype==kInvoiceTypeCreditSpecialSales) then begin 
    testf = true;
  end;   
  if (LINrbrw.RegType==kOfficialNumTypeIVVc or LINrbrw.RegType==kOfficialNumTypeManualIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc) and (invtype==kInvoiceTypeNormal or invtype==kInvoiceTypeDownpayment) then begin 
    testf = true;
  end;  
  if (LINrbrw.RegType==kOfficialNumTypeSpecialSalesIVVc) and (invtype==kInvoiceTypeNormalSpecialSales) then begin 
    testf = true;
  end;
*/  
  if (testf==true) then begin 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(branchid)) then begin 
        if (LINrbrw.Branch!=branchid) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    /*
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (IVr.InvDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (IVr.InvDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
    */
  end;
  TestNextOfficialSerialNr = testf;
  return;
end;
    
global
procedure GetLegalInvNrRowForBranch2(string branch,string cuclass,Integer invtype,Integer taxinvtype,var row LegalInvNrBlock resLINrbrw)
begin    
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  string 255 tstr;
  
  ClearRow(LINrb,resLINrbrw,1);
  BlockLoad(LINrb);  
  rwcnt = MatRowCnt(LINrb);
  if (rwcnt>0) then begin    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      if (TestNextOfficialSerialNr(LINrbrw,branch,cuclass,invtype,taxinvtype)) then begin
        CopyRow(LINrb,LINrbrw,resLINrbrw);
        i = rwcnt;
      end;
    end;
  end;
  return;
end;

global
procedure GetLegalInvNrRowForBranch(string branch,string cuclass,Integer invtype,var row LegalInvNrBlock resLINrbrw)
begin    
  GetLegalInvNrRowForBranch2(branch,cuclass,invtype,kTaxInvTypeNormal,resLINrbrw);
  return;
end;

    
procedure CreateITHandle(record RebVc Rebp,Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                         Array val avra0,Array val avra1,Array val avra2,Array val avra3,var Integer acnt)
BEGIN
  row RebVc Rebrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(Rebp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Rebp,i,Rebrw);
    
    aCodeType[acnt] = Rebrw.CodeType;
    aITCode[acnt] = Rebrw.ITCode;
    aStaffCode[acnt] = Rebrw.StaffCode; 
    avra0[acnt] = blankval;
    avra1[acnt] = blankval;
    avra2[acnt] = blankval;
    avra3[acnt] = blankval;
    acnt = acnt + 1;
  end;  
  RETURN;
END;    

function Boolean CheckIfItemDiscountExists(string artcode,
                          Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                          Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  Boolean res;
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (aCodeType[i]==1) then begin  
      if (aITCode[i]==artcode) then begin
        res = true;
        goto LCheckIfItemDiscountExists;
      end;
    end;
  end;
LCheckIfItemDiscountExists:; 
  CheckIfItemDiscountExists = res;
  RETURN;
END;    

procedure AddINtoITHandle(string incode,val qp,val pp,
                          Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                          Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  record INVc INr;
  Integer j;

  if (ReadFirstItem(incode,INr,true,true)) then begin
    for (j=0;j<acnt;j=j+1) begin
      switch (aCodeType[j]) begin
        case 0:
          if (CheckIfItemDiscountExists(INr.Code,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt)==false) then begin
            if ((aITCode[j]==INr.Group) or (blank(aITCode[j]))) then begin
              avra0[j] = avra0[j] + qp*INr.Weight;
              avra1[j] = avra1[j] + qp*INr.Volume;
              avra2[j] = avra2[j] + qp;
              avra3[j] = avra3[j] + qp*pp;
            end;
          end;
        case 1:
          if (aITCode[j]==INr.Code) then begin
            avra0[j] = avra0[j] + qp*INr.Weight;
            avra1[j] = avra1[j] + qp*INr.Volume;
            avra2[j] = avra2[j] + qp;
            avra3[j] = avra3[j] + qp*pp;          
          end;
      end;     
    end;
  end;     
  RETURN;
END;    

procedure AddIVToITHandle(record IVVc IVp,Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                          Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    AddINtoITHandle(IVrw.ArtCode,IVrw.Quant,IVrw.Price,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;
  RETURN;
END;    

procedure AddQTToITHandle(record QTVc QTp,Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                          Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row QTVc QTrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(QTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    AddINtoITHandle(QTrw.ArtCode,QTrw.Quant,QTrw.Price,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;
  RETURN;
END; 

procedure AddORToITHandle(record ORVc ORp,Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                          Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row ORVc ORrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    AddINtoITHandle(ORrw.ArtCode,ORrw.Quant,ORrw.Price,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;
  RETURN;
END; 

procedure FindITHandleRow(string itcode,
                          Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                          Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt,
                          var Integer resCodeType,var string resITCode,var string resStaffCode,
                          var val resvra0,var val resvra1,var val resvra2,var val resvra3)
BEGIN
  Integer j;

  for (j=0;j<acnt;j=j+1) begin
    if (aITCode[j]==itcode) then begin
      resCodeType = aCodeType[j];
      resITCode = aITCode[j];
      resStaffCode = aStaffCode[j];
      resvra0 = avra0[j];
      resvra1 = avra1[j];
      resvra2 = avra2[j];
      resvra3 = avra3[j];
      goto LFindITHandleRow;
    end;
  end;
LFindITHandleRow:;
  RETURN;
END;    

procedure GetStaffRebate(string staffcode,val weightp,val volumep,val qtp,val pricep,
                         row RebVc Rebrw,var val rebvp)
BEGIN
  Integer staffnr;
  record StaffVc StaffR;
  val limval;
  
  staffnr = 0;
  if (nonblank(staffcode)) then begin
    StaffR.Code = staffcode;
    if (ReadFirstMain(StaffR,1,true)) then begin
      switch (StaffR.StaffType) begin
        case 0: limval = pricep;
        case 2: limval = weightp;
        case 3: limval = volumep;
        otherwise limval = qtp;
      end;
      staffnr = GetStaffNr(limval,StaffR);
    end;
  end;
  switch (staffnr) begin
    case 0: rebvp = Rebrw.vra0;
    case 1: rebvp = Rebrw.vra1;
    case 2: rebvp = Rebrw.vra2;
    case 3: rebvp = Rebrw.vra3;
    case 4: rebvp = Rebrw.vra4;
    case 5: rebvp = Rebrw.vra5;
    case 6: rebvp = Rebrw.vra6;
    case 7: rebvp = Rebrw.vra7;
    case 8: rebvp = Rebrw.vra8;
    case 9: rebvp = Rebrw.vra9;
  end;
  RETURN;
END;    

procedure RecalcInvoiceRows(record IVVc IVp,string itcode,val rebvp,Integer UseDiscount,
                            Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                            Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;
  record INVc INr;

  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin     
      if (CheckIfItemDiscountExists(INr.Code,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,-1)==false) then begin
        if ((INr.Group==itcode) or (blank(itcode))) then begin
          IVrw.vRebate = rebvp;
          MatRowPut(IVp,i,IVrw);
          if (IVDchrsum(IVp,i)) then begin IVDchsum(IVp,i); end;
        end;
      end else begin
        if ((INr.Code==itcode) or (blank(itcode))) then begin
          IVrw.vRebate = rebvp;
          MatRowPut(IVp,i,IVrw);
          if (IVDchrsum(IVp,i)) then begin IVDchsum(IVp,i); end;
        end;
      end;  
    end;    
  end;  
  RETURN;
END;    

procedure RecalcIVITHandle(record IVVc IVp,record RebVc Rebp,
                           Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                           Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row RebVc Rebrw;
  Integer i,rwcnt;
  val rebv;
  record GeneralOptionBlock GenOptr;
  Integer CodeType;
  string 20 ITCode;
  string 20 StaffCode;
  val vra0,vra1,vra2,vra3;
  
  BlockLoad(GenOptr);
  rwcnt = MatRowCnt(Rebp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Rebp,i,Rebrw);
    switch (Rebrw.CodeType) begin
      case 0:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                                     CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcInvoiceRows(IVp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
      case 1:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                                     CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcInvoiceRows(IVp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
    end;  
  end;
  RETURN;
END;    

global
procedure RecalcDiscountIVD(var record IVVc IVp)
BEGIN
  record RebVc Rebr;
  Array Integer aCodeType;
  Array string 20 aITCode;
  Array string 20 aStaffCode;
  Array val avra0;
  Array val avra1;
  Array val avra2;
  Array val avra3;
  Integer acnt;

  RecordNew(Rebr);
  Rebr.Code = IVp.RebCode;
  if (ReadFirstMain(Rebr,1,true)) then begin
    CreateITHandle(Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    AddIVToITHandle(IVp,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    RecalcIVITHandle(IVp,Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;   
  IVSumup(IVp,true);   
  RETURN;
END;    

procedure RecalcOrderRows(record ORVc ORp,string itcode,val rebvp,Integer UseDiscount,
                            Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                            Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row ORVc ORrw;
  Integer i,rwcnt;
  record INVc INr;
  record GeneralOptionBlock GenOptr;
  
  BlockLoad(GenOptr);
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ReadFirstItem(ORrw.ArtCode,INr,true,true)) then begin     
      if (CheckIfItemDiscountExists(INr.Code,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,-1)==false) then begin
        if ((INr.Group==itcode) or (blank(itcode))) then begin
          ORrw.vRebate = rebvp;
          MatRowPut(ORp,i,ORrw);
          if (ORDchrsum(ORp,i)) then begin 
            ORDchsum(ORp,i);
            ORSumup(ORp);
          end;
        end;
      end else begin
        if ((INr.Code==itcode) or (blank(itcode))) then begin
          ORrw.vRebate = rebvp;
          MatRowPut(ORp,i,ORrw);
          if (ORDchrsum(ORp,i)) then begin
            ORDchsum(ORp,i);
            ORSumup(ORp);
          end;
        end;
      end;  
    end;    
  end;  
  RETURN;
END;    

procedure RecalcORITHandle(record ORVc ORp,record RebVc Rebp,
                           Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                           Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row RebVc Rebrw;
  Integer i,rwcnt;
  val rebv;
  record GeneralOptionBlock GenOptr;
  Integer CodeType;
  string 20 ITCode;
  string 20 StaffCode;
  val vra0,vra1,vra2,vra3;
  
  BlockLoad(GenOptr);
  rwcnt = MatRowCnt(Rebp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Rebp,i,Rebrw);
    switch (Rebrw.CodeType) begin
      case 0:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                                     CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcOrderRows(ORp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
      case 1:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                        CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcOrderRows(ORp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
    end;  
  end;
  RETURN;
END;

global
procedure RecalcDiscountORD(var record ORVc ORp)
begin
  record RebVc Rebr;
  Array Integer aCodeType;
  Array string 20 aITCode;
  Array string 20 aStaffCode;
  Array val avra0;
  Array val avra1;
  Array val avra2;
  Array val avra3;
  Integer acnt;

  RecordNew(Rebr);
  Rebr.Code = ORp.RebCode;
  if (ReadFirstMain(Rebr,1,true)) then begin
    CreateITHandle(Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    AddORToITHandle(ORp,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    RecalcORITHandle(ORp,Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;   
  ORSumup(ORp);   
  return;
end;    

procedure RecalcQuotationRows(record QTVc QTp,string itcode,val rebvp,Integer UseDiscount,
                            Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                            Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row QTVc QTrw;
  Integer i,rwcnt;
  record INVc INr;
  record GeneralOptionBlock GenOptr;
  
  BlockLoad(GenOptr);
  rwcnt = MatRowCnt(QTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    if (ReadFirstItem(QTrw.ArtCode,INr,true,true)) then begin     
      if (CheckIfItemDiscountExists(INr.Code,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,-1)==false) then begin
        if ((INr.Group==itcode) or (blank(itcode))) then begin
          QTrw.vRebate = rebvp;
          MatRowPut(QTp,i,QTrw);
          if (QTDchrsum(QTp,i,GenOptr.UseDiscount)) then begin 
            QTDchsum(QTp,i);
            QTSumup(QTp);
          end;
        end;
      end else begin
        if ((INr.Code==itcode) or (blank(itcode))) then begin
          QTrw.vRebate = rebvp;
          MatRowPut(QTp,i,QTrw);
          if (QTDchrsum(QTp,i,GenOptr.UseDiscount)) then begin
            QTDchsum(QTp,i);
            QTSumup(QTp);
          end;
        end;
      end;  
    end;    
  end;  
  RETURN;
END;    

procedure RecalcQTITHandle(record QTVc QTp,record RebVc Rebp,
                           Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                           Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row RebVc Rebrw;
  Integer i,rwcnt;
  val rebv;
  record GeneralOptionBlock GenOptr;
  Integer CodeType;
  string 20 ITCode;
  string 20 StaffCode;
  val vra0,vra1,vra2,vra3;
  
  BlockLoad(GenOptr);
  rwcnt = MatRowCnt(Rebp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Rebp,i,Rebrw);
    switch (Rebrw.CodeType) begin
      case 0:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                                     CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcQuotationRows(QTp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
      case 1:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                        CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcQuotationRows(QTp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
    end;  
  end;
  RETURN;
END;

global
procedure RecalcDiscountQTD(var record QTVc QTp)
BEGIN
  record RebVc Rebr;
  Array Integer aCodeType;
  Array string 20 aITCode;
  Array string 20 aStaffCode;
  Array val avra0;
  Array val avra1;
  Array val avra2;
  Array val avra3;
  Integer acnt;

  if (ReadFirstMain(QTp,0,true)) then begin end;  
  RecordNew(Rebr);
  Rebr.Code = QTp.RebCode;
  if (ReadFirstMain(Rebr,1,true)) then begin
    CreateITHandle(Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    AddQTToITHandle(QTp,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    RecalcQTITHandle(QTp,Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;    
  QTSumup(QTp);   
  RETURN;
END;    

procedure RecalcOpportunityRows(record OYVc OYp,string itcode,val rebvp,Integer UseDiscount,
                            Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                            Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
begin
  row OYVc OYrw;
  Integer i,rwcnt;
  record INVc INr;
  record GeneralOptionBlock GenOptr;
  
  BlockLoad(GenOptr);
  rwcnt = MatRowCnt(OYp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    if (ReadFirstItem(OYrw.ArtCode,INr,true,true)) then begin     
      if (CheckIfItemDiscountExists(INr.Code,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,-1)==false) then begin
        if ((INr.Group==itcode) or (blank(itcode))) then begin
          OYrw.vRebate = rebvp;
          MatRowPut(OYp,i,OYrw);
          if (OYDchrsum(OYp,i,GenOptr.UseDiscount)) then begin 
            OYDchsum(OYp,i);
            OYSumup(OYp);
          end;
        end;
      end else begin
        if ((INr.Code==itcode) or (blank(itcode))) then begin
          OYrw.vRebate = rebvp;
          MatRowPut(OYp,i,OYrw);
          if (OYDchrsum(OYp,i,GenOptr.UseDiscount)) then begin
            OYDchsum(OYp,i);
            OYSumup(OYp);
          end;
        end;
      end;  
    end;    
  end;  
  return;
end;    

procedure RecalcOYITHandle(record OYVc OYp,record RebVc Rebp,
                           Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                           Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
begin
  row RebVc Rebrw;
  Integer i,rwcnt;
  val rebv;
  record GeneralOptionBlock GenOptr;
  Integer CodeType;
  string 20 ITCode;
  string 20 StaffCode;
  val vra0,vra1,vra2,vra3;
  
  BlockLoad(GenOptr);
  rwcnt = MatRowCnt(Rebp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Rebp,i,Rebrw);
    switch (Rebrw.CodeType) begin
      case 0:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                                     CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcOpportunityRows(OYp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
      case 1:
        FindITHandleRow(Rebrw.ITCode,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt,
                        CodeType,ITCode,StaffCode,vra0,vra1,vra2,vra3);    
        if (ITCode==Rebrw.ITCode) then begin
          GetStaffRebate(Rebrw.StaffCode,vra0,vra1,vra2,vra3,Rebrw,rebv);
          RecalcOpportunityRows(OYp,ITCode,rebv,GenOptr.UseDiscount,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
        end;
    end;  
  end;
  return;
end;    

procedure AddOYToITHandle(record OYVc OYp,Array Integer aCodeType,Array string aITCode,Array string aStaffCode,
                          Array val avra0,Array val avra1,Array val avra2,Array val avra3,Integer acnt)
BEGIN
  row OYVc OYrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(OYp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    AddINtoITHandle(OYrw.ArtCode,OYrw.Quant,OYrw.Price,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;
  RETURN;
END; 

global
procedure RecalcDiscountOYD(var record OYVc OYp)
begin
  record RebVc Rebr;
  Array Integer aCodeType;
  Array string 20 aITCode;
  Array string 20 aStaffCode;
  Array val avra0;
  Array val avra1;
  Array val avra2;
  Array val avra3;
  Integer acnt;

  if (ReadFirstMain(OYp,0,true)) then begin end;  
  RecordNew(Rebr);
  Rebr.Code = OYp.RebCode;
  if (ReadFirstMain(Rebr,1,true)) then begin
    CreateITHandle(Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    AddOYToITHandle(OYp,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
    RecalcOYITHandle(OYp,Rebr,aCodeType,aITCode,aStaffCode,avra0,avra1,avra2,avra3,acnt);
  end;    
  OYSumup(OYp);   
  return;
end;    

global
updating function LongInt RecordAction_raPastePOQTInPO(var record POQTVc POQTp,var record POVc POp)
BEGIN
  LongInt res,newnr;
  record SRBlock SRRec;
  record POQTVc oldPOQTr;
  
  if (ReadFirstMain(POQTp,0,true)) then begin end;  
  RecordCopy(oldPOQTr,POQTp);
  BlockLoad(SRRec);
  RecordNew(POp);
  if (PastePOQTInPO(POQTp,POp)==false) then begin
    res = -2;
    goto LRecordAction_raPastePOQTInPO;
  end;
  if (POp.SerNr<=0) then begin
    newnr = GetCurUserLastNr("POVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastPurNr;
    end;
    POp.SerNr = NextSerNr("POVc",POp.TransDate,newnr,false,"");
  end;  
  if (POp.SerNr<=0) then begin goto LRecordAction_raPastePOQTInPO; end;  
  if (MatRowCnt(POp)>0) then begin
    if (RecordStore(POp,false)) then begin
      CreateRecordLink(POQTp,CurrentCompany,POp,CurrentCompany);  
      CreateRecordLink(POp,CurrentCompany,POQTp,CurrentCompany);  
      POQTp.PONr = POp.SerNr;        
      if (RecordUpdate(oldPOQTr,POQTp,false)==0) then begin end;    
      res = 1;
    end;
  end;
LRecordAction_raPastePOQTInPO:;
  RecordAction_raPastePOQTInPO = res;
  RETURN;
END;

function val AlreadyMovedForProduction(LongInt stmovnr,LongInt ProdSerNr,string toloc,string artcode)
begin
  val res;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  Boolean found,testf;
  val q;
  
  found = true;
  StockMovr.ProdSerNr = ProdSerNr;
  while (LoopKey("ProdSerNr",StockMovr,1,true)) begin
    if (StockMovr.ProdSerNr!=ProdSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (StockMovr.SerNr==stmovnr) then begin testf = false; end;
//      if (StockMovr.OKFlag==0) then begin testf = false; end;
      if (StockMovr.ToLocation!=toloc) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(StockMovr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(StockMovr,i,StockMovrw);
          if (StockMovrw.ArtCode==artcode) then begin
            q = StockMovrw.Quant;
            if (q==0) then begin
              q = StockMovrw.OrdQuant;            
            end;
            res = res + q;
          end;
        end;
      end;
    end;
  end;
  AlreadyMovedForProduction = res;
  RETURN;
END;

function Integer AddProdToStockMov(record ProdVc Prodp,record StockMovVc StockMovp,Boolean reservef)
begin
  Integer res;
  record INVc INr;
  row ProdVc Prodrw;
  record StockMovVc oldStockMovr;
  row StockMovVc StockMovrw;
  row StockMovVc newStockMovrw;
  record MainStockBlock MSb;
  val instock;
  record ProdSettingsBlock PSb;
  record LocationVc Locr;

  Integer i,rwcnt,stcnt;
  Integer what;
  Boolean testf;
  val rem,qtyp;  

  Locr.Code = Prodp.Location;
  ReadFirstMain(Locr,1,true);

  BlockLoad(MSb);
  BlockLoad(PSb);
  if ((Prodp.PRStatusFlag==0) or (Prodp.PRStatusFlag==2)) then begin 
    StockMovp.FrLocation = MSb.MainStock;
    StockMovp.ToLocation = Prodp.Location;
    what = 1; 
  end;
  if ((Prodp.PRStatusFlag==3) or (Prodp.PRStatusFlag==4)) then begin 
    StockMovp.FrLocation = Prodp.Location;
    StockMovp.ToLocation = Prodp.Location;
    StockMovp.ToPos = Locr.WHMDefProdPosCode;
    what = 2; 
  end;

  StockMovp.FileName = "ProdVc";
  StockMovp.TransNr = Prodp.SerNr;
  StockMovp.ProdSerNr = Prodp.SerNr;
  stcnt = 0;
  rwcnt = MatRowCnt(Prodp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodp,i,Prodrw);
    testf = false;
    if ((Prodrw.InQty!=0) and (what==1)) then begin testf = true; end;
    if ((Prodrw.OutQty!=0) and (what==2)) then begin testf = true; end;
    if (testf) then begin
      if (ReadFirstItem(Prodrw.Item,INr,false,false)) then begin
        if (INr.ItemType!=1) then begin goto LSKIPROW; end;
        ClearRow(StockMovp,StockMovrw,1);   
        StockMovrw.ArtCode = Prodrw.Item;
        if (what==1) then begin
          switch (Prodp.RowsHoldActualQty) begin
            case 1: StockMovrw.Quant = Prodrw.InQty;
            otherwise StockMovrw.Quant = Prodrw.InQty*Prodp.Qty;
          end;            
        end else begin
          switch (Prodp.RowsHoldActualQty) begin
            case 1: StockMovrw.Quant = Prodrw.OutQty;
            otherwise StockMovrw.Quant = Prodrw.OutQty*Prodp.Qty;
          end;                  
        end;
        if (PSb.UpdProdInQtyFromStockMov==0) then begin
          StockMovrw.Quant = StockMovrw.Quant - AlreadyMovedForProduction(StockMovp.SerNr,StockMovp.ProdSerNr,StockMovp.ToLocation,StockMovrw.ArtCode);
        end;
        if (StockMovrw.Quant>0) then begin
          StockMovrw.OrdQuant = StockMovrw.Quant;
          if (reservef) then begin
            StockMovrw.Quant = blankval;
            instock = GetStockQty(StockMovrw.ArtCode,StockMovp.FrLocation,CurrentDate,false);
            if (instock<StockMovrw.OrdQuant) then begin
              StockMovrw.OrdQuant = instock;
            end;
          end else begin
            StockMovrw.Quant = blankval;
          end;
          StockMovrw.Spec = Prodrw.Comment;
          if (PSb.UpdProdInQtyFromStockMov==0) then begin
            StockMovrw.SerialNr = Prodrw.SerialNr;
          end;
          StockMovrw.NewPrice = Prodrw.ItemCost;
          StockMovrw.ExtraSCost = "";
          StockMovrw.OldPrice = Prodrw.ItemCost;
          StockMovrw.BasePrice = INr.UPrice1;
          StockMovrw.BasePrice = blankval;
          StockMovrw.Coefficient = INr.UnitCoefficient;
          StockMovrw.Objects = INr.Objects;
          MatRowPut(StockMovp,stcnt,StockMovrw);
          stcnt = stcnt + 1;
          if (PSb.UpdProdInQtyFromStockMov!=0) then begin
            oldStockMovr.ProdSerNr = Prodp.SerNr;            
            if (ReadFirstKey("ProdSerNr",oldStockMovr,1,true)==false) then begin
              Prodrw.InQty = 0;
              MatRowPut(Prodp,i,Prodrw);
            end;
          end;
        end;
LSKIPROW:;          
      end;
    end;
  end;  
  stcnt = MatRowCnt(StockMovp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovp,i,StockMovrw);
    if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin
      if (nonblank(INr.DefPalletItem)) and (INr.QtyonPallet>0) then begin
        rem = StockMovrw.Quant;
        qtyp = INr.QtyonPallet;
        if (ReadFirstItem(INr.DefPalletItem,INr,true,true)) then begin
          if (rem < qtyp) then begin  
            ClearRow(StockMovp,newStockMovrw,1);
            newStockMovrw.ArtCode = INr.Code;
            newStockMovrw.Spec = INr.Name;
            newStockMovrw.Objects = FindINObjects(INr.Objects,INr.Group);
            newStockMovrw.Quant = 1;
            newStockMovrw.OldPrice = blankval;
            newStockMovrw.FIFORowVal = blankval;
            newStockMovrw.BasePrice = INr.UPrice1;
            newStockMovrw.UnitXval = INr.Width;
            newStockMovrw.UnitYval = INr.Height;
            newStockMovrw.UnitZval = INr.Depth;
            MatRowPut(StockMovp,stcnt,newStockMovrw);
            stcnt = stcnt + 1; 
          end else begin  
            while (rem>=qtyp) begin
              ClearRow(StockMovp,newStockMovrw,1);
              newStockMovrw.ArtCode = INr.Code;
              newStockMovrw.Spec = INr.Name;
              newStockMovrw.Objects = FindINObjects(INr.Objects,INr.Group);
              newStockMovrw.Quant = 1;
              newStockMovrw.OldPrice = blankval;
              newStockMovrw.FIFORowVal = blankval;
              newStockMovrw.BasePrice = INr.UPrice1;
              newStockMovrw.UnitXval = INr.Width;
              newStockMovrw.UnitYval = INr.Height;
              newStockMovrw.UnitZval = INr.Depth;
              MatRowPut(StockMovp,stcnt,newStockMovrw);
              stcnt = stcnt + 1;
              rem = rem - qtyp;
            end;
          end;
        end;
      end;
    end;    
  end;  
  res = 0;
  AddProdToStockMov = res;
  return;
end;

global
function Integer PasteProdInStockMov(var record StockMovVc StockMovp,var record ProdVc Prodr,Boolean reservef)
begin
  Integer res;
  record MainStockBlock MSb;
  string 255 tstr,t2;
  
  if (ReadFirstMain(Prodr,1,true)==false) then begin
    res = 22080;
    goto LPasteProdInStockMov;
  end;
  if (Prodr.PRStatusFlag==4) then begin
    res = 22079;
    goto LPasteProdInStockMov;
  end;
  BlockLoad(MSb);
  if (blank(Prodr.Location)) then begin Prodr.Location = MSb.MainStock;  end;
  if (blank(Prodr.Location)) then begin goto LPasteProdInStockMov;  end;
  res = AddProdToStockMov(Prodr,StockMovp,reservef);
  if (res!=0) then begin
    goto LPasteProdInStockMov;
  end;
  tstr = StockMovp.Comment;
  /*
  if (nonblank(tstr)) then begin
    tstr = tstr & ",";
  end;
  t2 = USetStr(1338);
  tstr = tstr & t2;
  tstr = tstr & Prodr.SerNr;
  */
  if ((nonblank(tstr)) and (nonblank(Prodr.Comment))) then begin
    tstr = tstr & ";";
  end;
  tstr = tstr & Prodr.Comment;
  StockMovp.Comment = tstr;
LPasteProdInStockMov:; 
  PasteProdInStockMov = res;
  return;
end;

global
updating function Integer RecordAction_raPastePRInStockMov(var record StockMovVc StockMovp,var record ProdVc Prodr,Boolean reservef)
begin
  Integer res;
  
  res = 1;
  RecordNew(StockMovp);
  StockMovp.SerNr = -1;
  if (StockMovp.SerNr==-1) then begin
    StockMovp.TransDate = CurrentDate;
    StockMovp.SerNr = NextSerNr("StockMovVc",StockMovp.TransDate,-1,false,"");
    if (StockMovp.SerNr==-1) then begin
      goto LRecordAction_raPastePRInStockMov;
    end;
  end;
  res = PasteProdInStockMov(StockMovp,Prodr,reservef);
  if (res==0) then begin
    if ((MatRowCnt(StockMovp)>0) and (StockMovp.SerNr!=-1)) then begin
      if (reservef) then begin
        StockMovp.Reserved = 1;
      end;
      StockMovSumUp(StockMovp);
      if (RecordInsert(StockMovp,false)) then begin
        CreateRecordLink(StockMovp,CurrentCompany,Prodr,CurrentCompany);  
        CreateRecordLink(Prodr,CurrentCompany,StockMovp,CurrentCompany);  
        res = 0;
      end;
    end;
  end;
LRecordAction_raPastePRInStockMov:;
  RecordAction_raPastePRInStockMov = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteTBBUInPO(record TBBUVc TBBUp,var record POVc POp)
BEGIN
  LongInt res;
  record PRVc PRr;
  
  if (ReadFirstMain(TBBUp,0,true)) then begin end;  
  PRr.Code = TBBUp.PRCode;
  if (ReadFirstMain(PRr,1,true)==false) then begin goto LRecordAction_raPasteTBBUInPO; end;
  if (PRr.Terminated!=0) then begin goto LRecordAction_raPasteTBBUInPO; end;  
  RecordNew(POp);
  PasteTBBUInPO(TBBUp,POp);
  if (POp.SerNr<=0) then begin
    POp.SerNr = NextSerNr("POVc",POp.TransDate,-1,false,"");
  end;  
  if (POp.SerNr<=0) then begin goto LRecordAction_raPasteTBBUInPO; end;  
  if (MatRowCnt(POp)>0) then begin
    POSumup(POp);
    if (RecordStore(POp,false)) then begin
      CreateRecordLink(TBBUp,CurrentCompany,POp,CurrentCompany);  
      CreateRecordLink(POp,CurrentCompany,TBBUp,CurrentCompany);  
      res = 1;
    end;
  end;
LRecordAction_raPasteTBBUInPO:;
  RecordAction_raPasteTBBUInPO = res;
  RETURN;
END;

global
updating function LongInt RecordAction_raPasteTBBUInOR(record TBBUVc TBBUp,var record ORVc ORp)
BEGIN
  LongInt res,newnr;
  record SRBlock SRRec;
  record PRVc PRr;

  if (ReadFirstMain(TBBUp,0,true)) then begin end;    
  PRr.Code = TBBUp.PRCode;
  if (ReadFirstMain(PRr,1,true)==false) then begin goto LRecordAction_raPasteTBBUInOR; end;
  if (PRr.Terminated!=0) then begin goto LRecordAction_raPasteTBBUInOR; end;  
  RecordNew(ORp);
  PasteTBBUInOR(TBBUp,ORp);
  if (ORp.SerNr<=0) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("ORVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastOrdNr;
    end;    
    ORp.SerNr = NextSerNr("ORVc",ORp.OrdDate,newnr,false,"");
  end;  
  if (ORp.SerNr<=0) then begin goto LRecordAction_raPasteTBBUInOR; end;  
  if (MatRowCnt(ORp)>0) then begin
    ORSumup(ORp);
    if (RecordStore(ORp,false)) then begin
      CreateRecordLink(TBBUp,CurrentCompany,ORp,CurrentCompany);  
      CreateRecordLink(ORp,CurrentCompany,TBBUp,CurrentCompany);  
      res = 1;
    end;
  end;
LRecordAction_raPasteTBBUInOR:;
  RecordAction_raPasteTBBUInOR = res;
  RETURN;
END;
