remote function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure SetActTypeValues(record ActVc);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function string 255 FindINObjects(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure NextM4SerialNumber(string,var string);
external function Time TimeDiff(Time,Time);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure NextM4Number(string,var string);
external procedure ReadLastINSer(string,var string);
external procedure ProdOperationFillFIFO(record ProdOperationVc,Boolean);

global
procedure AutoFillProdOperationSerNr(var record ProdOperationVc ProdOperationp)
BEGIN
  Integer i,rwcnt;
  row ProdOperationVc ProdOprw;
  string 255 lastnr,lastitem;
  record INVc INr;
  
  rwcnt = MatRowCnt(ProdOperationp);
  if (rwcnt==0) then begin goto LAutoFillProdOperationSerNr; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOperationp,i,ProdOprw);
    if (ProdOprw.OutQty==0) then begin
      goto L33AutoFillProdOperationSerNr;
    end;
    if (ReadFirstItem(ProdOprw.Item,INr,true,true)==false) then begin
      goto L33AutoFillProdOperationSerNr;
    end;
    if (INr.SerNrf==0) then begin
      goto L33AutoFillProdOperationSerNr;
    end;
    if (blank(lastitem)) then begin
      lastitem = ProdOprw.Item;
    end;
    if (i==0) then begin
      if (blank(ProdOprw.SerialNr)) then begin
        ReadLastINSer(ProdOprw.Item,lastnr);
      end else begin
        lastnr = ProdOprw.SerialNr;
        goto L33AutoFillProdOperationSerNr;
      end;
    end;
    if ((blank(ProdOprw.SerialNr)) and (ProdOprw.Item==lastitem)) then begin
      NextM4SerialNumber(lastnr,lastnr);
      ProdOprw.SerialNr = lastnr;
    end else begin
      lastnr = ProdOprw.SerialNr;
      lastitem = ProdOprw.Item;
      if (blank(ProdOprw.SerialNr)) then begin
        ReadLastINSer(ProdOprw.Item,lastnr);
      end else begin
        lastnr = ProdOprw.SerialNr;
        goto L33AutoFillProdOperationSerNr;
      end;
      NextM4SerialNumber(lastnr,lastnr);
      ProdOprw.SerialNr = lastnr;
    end;
    MatRowPut(ProdOperationp,i,ProdOprw);
L33AutoFillProdOperationSerNr:;
  end;
LAutoFillProdOperationSerNr:;
  RETURN;
END;

global
procedure RecordAction_raProdOperationFillFIFO(var record ProdOperationVc ProdOperationp)
BEGIN
  if (ReadFirstMain(ProdOperationp,0,true)) then begin end;  
  ProdOperationFillFIFO(ProdOperationp,true)
  RETURN;
END;

global
updating function Boolean RecordAction_raProdOperationFromProdOperation(record ProdOperationVc ProdOperationr,var record ProdOperationVc newProdOperationr)
BEGIN
  row ProdOperationVc ProdOprw;
  row ProdOperationVc newProdOprw;
  Integer curcomp;
  Integer i,rwcnt;

  if (ReadFirstMain(ProdOperationr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  RecordCopy(newProdOperationr,ProdOperationr);
  newProdOperationr.SerNr = -1;
  newProdOperationr.ProdDate = CurrentDate;
  newProdOperationr.PRStatusFlag = 0;
  rwcnt = MatRowCnt(newProdOperationr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(newProdOperationr,i);
    rwcnt = MatRowCnt(newProdOperationr);
    i = i-1;
  end;
  rwcnt = MatRowCnt(ProdOperationr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOperationr,i,ProdOprw);
    CopyRow(ProdOperationr,ProdOprw,newProdOprw);
    if (ProdOprw.InQty!=0) then begin
      newProdOprw.OutQty = newProdOprw.InQty;
      newProdOprw.InQty = blankval;
//      newProdOprw.ExtraCost = blankval;
      newProdOprw.RelVal = newProdOprw.OutQty*newProdOprw.ItemCost;
      MatRowPut(newProdOperationr,i,newProdOprw);      
    end;
    if (ProdOprw.OutQty!=0) then begin
      newProdOprw.InQty = newProdOprw.OutQty;
      newProdOprw.OutQty = blankval;
      newProdOprw.RelVal = blankval;
      MatRowInsert(newProdOperationr,0,newProdOprw);      
    end;
  end;
  newProdOperationr.SerNr = NextSerNr("ProdOperationVc",newProdOperationr.ProdDate,-1,false,"");  
  if (RecordStore(newProdOperationr,false)) then begin 
    CreateRecordLink(newProdOperationr,curcomp,ProdOperationr,curcomp);  
    CreateRecordLink(ProdOperationr,curcomp,newProdOperationr,curcomp);  
  end; 
  RETURN;
END;

global
procedure ProdOperationVc_PasteItem(var record ProdOperationVc ProdOpr,Integer rownr)
begin
  record INVc INr;
  row ProdOperationVc ProdOprw;
  Boolean itemfound;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  
  MatRowGet(ProdOpr,rownr,ProdOprw);
  itemfound = GetFirstItem(ProdOprw.Item,INr);
  if (itemfound==false) then begin
    itemfound = ReadFirstItem(ProdOprw.Item,INr,true,true);
    if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
      INr.Code = ProdOprw.Item;
    end;
  end;
  if (itemfound) then begin
    ProdOprw.Coefficient = INr.UnitCoefficient;
    ProdOprw.Item = INr.Code;
    ProdOprw.Comment = INr.Name;
    ProdOprw.Objects = FindINObjects(INr.Objects,INr.Group);
  end;
  MatRowPut(ProdOpr,rownr,ProdOprw);
  RETURN;
END;

global
function Boolean AddLabourProdOperation(var record ProdOperationVc ProdOpr)
BEGIN
  Boolean res;
  record ProdSettingsBlock PSb;
  record ActVc Actr;
  Boolean found,addedf,skiproutingtimef;
  val q;
  row ProdOperationVc ProdOprw;
  record INVc INr;
  Integer i,rwcnt;
  record RoutingVc Routingr;
  row RoutingVc Routingrw;
  record ProdVc Prodr;

  BlockLoad(PSb);
  if (nonblank(PSb.LabourCostItem)) then begin
    found = true;
    Actr.ProdOpSerNr = ProdOpr.SerNr;
    Actr.OKFlag = 1;
    while (LoopKey("ProdOpSerNr",Actr,2,found)) begin
      if (Actr.ProdOpSerNr!=ProdOpr.SerNr) then begin found = false; end;
      if (Actr.OKFlag!=1) then begin found = false; end;
      if (found) begin
        q = q + TimeToVal(Actr.CostTime);        
      end;
    end;
    if (q>0) then begin   
      addedf = false;
      Prodr.SerNr = ProdOpr.ProdNr;
      ReadFirstMain(Prodr,1,true);
      
      Routingr.Code = Prodr.Routing;
      if (ReadFirstMain(Routingr,1,true)) then begin
        rwcnt = MatRowCnt(Routingr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(Routingr,i,Routingrw);
          if (Routingrw.StdOperation==ProdOpr.StdOperation) then begin
            if (nonblankduration(Routingrw.RunTime)) then begin
              skiproutingtimef = true;
            end;
          end;
        end;
      end;


      rwcnt = MatRowCnt(ProdOpr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ProdOpr,i,ProdOprw);
        if (skiproutingtimef) then begin
          if (ProdOprw.Item==PSb.LabourCostItem) then begin
            skiproutingtimef = false;
          end;
        end else begin
          if (ProdOprw.Item==PSb.LabourCostItem) then begin
            addedf = true;
            ProdOprw.InQty = q;
            MatRowPut(ProdOpr,i,ProdOprw);
            res = true;
          end;
        end;
      end;
      if (addedf==false) then begin
        if (ReadFirstItem(PSb.LabourCostItem,INr,false,false)) then begin end;
	  	  ClearRow(ProdOpr,ProdOprw,1);
		    ProdOprw.Item = PSb.LabourCostItem;
		    ProdOprw.InQty = q;
  		  ProdOprw.ItemCost = PSb.WorkCostPerHour;
	  	  ProdOprw.Comment = INr.Name;
		    MatRowPut(ProdOpr,MatRowCnt(ProdOpr),ProdOprw);
		    res = true;
		  end;
		end;
  end;
  AddLabourProdOperation = res;
  return;
end;

global
updating function Boolean MakeActFromProdOperationVc(record ProdOperationVc ProdOpr,var record ActVc Actr)
begin
  Integer curcomp;
  Boolean res;
  record ProdSettingsBlock PSb;
  record ASTBlock ASTb;

  BlockLoad(ASTb);
  if (ReadFirstMain(ProdOpr,0,true)) then begin end;  
  BlockLoad(PSb);
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 0;
  Actr.CalTimeFlag = 1;
  Actr.MainPersons = ProdOpr.Person;
  if (blank(Actr.MainPersons)) then begin
    Actr.MainPersons = CurrentUser;
  end else begin
    if (Actr.MainPersons!=CurrentUser) then begin
      Actr.CCPersons = CurrentUser;
    end;
  end;
  Actr.Comment = ProdOpr.Comment;
  Actr.TransDate = ProdOpr.StartDate;
  Actr.EndDate = ProdOpr.ProdDate;
  Actr.StartTime = ProdOpr.StartTime;
  Actr.EndTime = ProdOpr.EndTime;
  Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);
  Actr.ArtCode = PSb.LabourCostItem;
  Actr.ProdSerNr = ProdOpr.ProdNr;
  Actr.ProdOpSerNr = ProdOpr.SerNr;
  Actr.ActType = ASTb.ProdOperaration;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.ProdOperarationDone;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,ProdOpr,curcomp);  
    CreateRecordLink(ProdOpr,curcomp,Actr,curcomp);  
    res = true;
  end;  
  MakeActFromProdOperationVc = res;
  RETURN;
END;
