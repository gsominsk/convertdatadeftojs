external procedure CODUpdatePrices(var record COVc,Boolean);
external function Boolean GetPD(var record PDVc);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure RowCalculateTaxMatrix_COVc(var record COVc,Integer,row COVc);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);
external procedure CODchrsum(var record COVc,Integer);
external procedure COVc_FillupTaxTemplate(var record COVc);
external procedure RemoveOldUserObjects(string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean HasSalesmanChanged(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure COGetRate(var record COVc);
external procedure CalcPrice(val,val,val,var val,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure GetItemSalesAcc(string,Integer,var string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function LongInt DateDiff(Date,Date);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function string 255 FindINObjects(string,string);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external procedure CalculateFreightWeightCO(record COVc,Boolean);
external function Boolean GetSVOSerialItem(string,string,record SVOSerVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean PasteVEInCO(var record COVc);
external function Boolean PasteFunderInCO(var record COVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean QtyDepPriceL(string);
external procedure COSumup(var record COVc);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure RoundRowSum(string,string,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure COMultiLineText(record COVc,record INVc,string,Integer);
external procedure COVcGetCalcItemPrice(record COVc,Integer,var val);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
procedure PasteCUCODefVal(var record COVc COp)
BEGIN
  record CUCODefValVc CUCODefr;
  record CODefValBlock CODefr;

  CUCODefr.CustCode = COp.CustCode;
  if (ReadFirstMain(CUCODefr,1,true)) then begin
    COp.perType = CUCODefr.perType;
    COp.perLength = CUCODefr.perLength;
    COp.invDtype = CUCODefr.invDtype;
    COp.invDays = CUCODefr.invDays;
    COp.normalFactor = CUCODefr.normalFactor;
    COp.ContractClass = CUCODefr.ContractClass;
  end else begin
    BlockLoad(CODefr);
    COp.perType = CODefr.perType;
    COp.perLength = CODefr.perLength;
    COp.invDtype = CODefr.invDtype;
    COp.invDays = CODefr.invDays;
    COp.normalFactor = CODefr.normalFactor;
    COp.ContractClass = CODefr.ContractClass;
  end;
  RETURN;
END;

// Not used
global
function Boolean PasteCustInCO(var record COVc COr)
BEGIN
  record CUVc CUr;
  Boolean res;
  
  CUr.Code = COr.CustCode;
  res = ReadFirstMain(CUr,1,true);
  if (res) then begin
    COr.Addr0 = CUr.Name;
    COr.Addr1 = CUr.InvAddr0;
    COr.Addr2 = CUr.InvAddr1;
    COr.Addr3 = CUr.InvAddr2;
    COr.InvAddr3 = CUr.InvAddr3;
    COr.InvAddr4 = CUr.InvAddr4;
    COr.ClientContact = CUr.Person;
    COr.CustCat = CUr.CustCat;
    COr.Objects = CUr.Objects;
    COr.CurncyCode = CUr.CurncyCode;
    COr.LangCode = CUr.LangCode;
    COr.ShipDeal = CUr.ShipDeal;
    COr.ShipMode = CUr.ShipMode;
    COr.Department= CUr.Department;
    COr.PriceList = CUr.PLCode;
    COr.RebCode = CUr.RebCode;
    COr.CustVATCode = CUr.VATCode;
    COr.Sorting = CUr.Sorting;
    if (nonblank(CUr.DelAddr0)) then begin
      COr.ShipAddr0 = CUr.Name;
      COr.ShipAddr1 = CUr.DelAddr0;
      COr.ShipAddr2 = CUr.DelAddr1;
      COr.ShipAddr3 = CUr.DelAddr2;
      COr.DelAddr3 = CUr.DelAddr3;
      COr.DelAddr4 = CUr.DelAddr4;
    end;
    COr.VATNr = CUr.VATNr;
    COr.InvComment = CUr.OrderComment;
    COr.InvoiceToCode = CUr.InvoiceToCode;
    PasteCUCODefVal(COr);      
    COr.ExportFlag = CUr.ExportFlag;
    COr.PayDeal = CUr.PayDeal;
  end;  
  PasteCustInCO = res;
END;

global
procedure SetSalesMan(var string ToSalesMan,string FromSalesMan)
BEGIN
  ToSalesMan = CurrentUser;
  if (nonblank(FromSalesMan)) then begin
    if (nonblank(FromSalesMan)) then begin
      ToSalesMan = FromSalesMan;
    end;
  end;    
  RETURN;
END;

global
function Boolean PasteCust2InCO(var record COVc COp,Boolean updatall,var string warntext)
BEGIN
  Boolean found;
  record CUVc CUr;
  record INVc INr;
  val x,pr,bal,limit;
  val t;
  val frrate,to1,to2,br1,br2;
  record FreightBlock FreightRec;
  string 255 tstr,oldvatcode;
  string 10 crncy;
  record GeneralOptionBlock GenOptRec;
  Integer i;
  Boolean limitdaysf;
  Time blankt;
  record UserVc USr;

  BlockLoad(GenOptRec);
  CUr.Code = COp.CustCode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0,limitdaysf)) then begin
    found = true;
    oldvatcode = COp.CustVATCode;
    COp.Addr0 = CUr.Name;
    COp.Addr1 = CUr.InvAddr0;
    COp.Addr2 = CUr.InvAddr1;
    COp.Addr3 = CUr.InvAddr2;
    COp.InvAddr3 = CUr.InvAddr3;
    COp.InvAddr4 = CUr.InvAddr4;
    COp.Region = CUr.Region;
    COp.ClientContact = CUr.Person;
    COp.CustCat = CUr.CustCat;
    COp.Objects = CUr.Objects;
    COp.CurncyCode = CUr.CurncyCode;
    SetSalesMan(tstr,CUr.SalesMan);
    COp.SalesMan = tstr;
    USr.Code = COp.SalesMan;
    ReadFirstMain(USr,1,true);
    COp.Objects = AddObjectToObjectList(COp.Objects,USr.PersObjx);        
    COp.LangCode = CUr.LangCode;
    COp.ShipDeal = CUr.ShipDeal;
    COp.ShipMode = CUr.ShipMode;
    COp.Department = CUr.Department;
    COp.PriceList = CUr.PLCode;
    COp.RebCode = CUr.RebCode;
    COp.CustVATCode = CUr.VATCode;
    if (CUr.TaxTemplateCode!=COp.CustTaxTemplateCode) then begin
      COVc_FillupTaxTemplate(COp);
      COp.CustTaxTemplateCode = CUr.TaxTemplateCode;
    end;
    COp.Phone = CUr.Phone;
    COp.Fax = CUr.Fax;    
    tstr = CUr.PLCode;
    GetPriceList(COp.CustCat,COp.CODate,blankt,tstr,i);
    COp.InclVAT = i;
    COp.PriceList = tstr;
    COp.Sorting = CUr.Sorting;
    if (nonblank(CUr.DelAddr0)) then begin
      COp.ShipAddr0 = CUr.Name;
      COp.ShipAddr1 = CUr.DelAddr0;
      COp.ShipAddr2 = CUr.DelAddr1;
      COp.ShipAddr3 = CUr.DelAddr2;
      COp.DelAddr3 = CUr.DelAddr3;
      COp.DelAddr4 = CUr.DelAddr4;
    end else begin
      COp.ShipAddr0 = "";
      COp.ShipAddr1 = "";
      COp.ShipAddr2 = "";
      COp.ShipAddr3 = "";
      COp.DelAddr3 = "";
      COp.DelAddr4 = "";
    end;

//    COp.ShipDeal = "";
//    COp.ShipMode = "";
    COp.VATNr = CUr.VATNr;
    COp.ExportFlag = CUr.ExportFlag;
    COp.PayDeal = CUr.PayDeal;
    COp.InvComment = CUr.OrderComment;
    COGetRate(COp);
    if (updatall) then begin
      COp.InvoiceToCode = CUr.InvoiceToCode;    
      PasteCUCODefVal(COp);     
      BlockLoad(FreightRec);
      COp.FrItem = FreightRec.FrItem;
      COp.FrGPPercent = FreightRec.FrGPPercent;
      INr.Code = COp.FrItem;
      if (ReadFirstMain(INr,1,true)) then begin
        COp.FrVATCode = CUr.VATCode;
        if (blank(COp.FrVATCode)) then begin
          GetItemVATCode(COp.FrItem,COp.ExportFlag,tstr,true);
          COp.FrVATCode = tstr;
        end;
        GetItemSalesAcc(COp.FrItem,COp.ExportFlag,tstr);
        COp.FrSalesAcc = tstr;
        COp.FrBase = INr.UPrice1;
      end else begin
        COp.FrItem = "";
        COp.FrGPPercent = blankval;
        COp.FrBase = blankval;
        COp.FrPrice = blankval;
        COp.FrGP = blankval;
        COp.FrVATCode = "";
        COp.FrSalesAcc = "";
      end;       
      crncy = COp.CurncyCode;
      GetFullCurncyRate(crncy,COp.CODate,frrate,to1,to2,br1,br2);
      COp.CurncyCode = crncy;
      COp.FrPrice = DivRateToBase1(COp.CurncyCode,COp.FrBase,COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,DefaultCurRoundOff);
      x = 1;
      pr = 100;
      pr = pr - COp.FrGPPercent;
      CalcSum(x,COp.FrBase,0,pr,t,GenOptRec.UseDiscount);
      if (oldvatcode!=COp.CustVATCode) then begin
        CODUpdatePrices(COp,false);
      end;
      COSumup(COp);
      if (nonblank(CUr.WarnText1)) then begin
        warntext = CUr.WarnText1;
      end;
    end;
  end;
  PasteCust2InCO = found;
  RETURN;
END;

global
function Boolean COVc_PasteArtCode(var record COVc COr,Integer rownr,var string inwarning)
BEGIN
  record INVc INr;
  row COVc COrw;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  val t,s,rowsum,price,vreb,baseprice,tax2prc,tax2reb,p;
  Boolean calcpricef;
  record GeneralOptionBlock GenOptRec;
  Boolean res;
  Boolean dummyf;
  record TaxMatrixVc TMr;
  Time blankt;

  BlockLoad(GenOptRec);  
  MatRowGet(COr,rownr,COrw);
  COrw.Price = blankval;
  COrw.vRebate = blankval;
  if (GetItemPriceDiscount3(COrw.ArtCode,COrw.Quant,INr,COr.CurncyCode,
                            COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,
                            COr.LangCode,COr.CustCat,COr.PriceList,COr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            COr.ExportFlag,calcpricef,COr.CODate,blankt,COr.CustCode,true,dummyf,COr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then
  begin
    COrw.TaxTemplateCode = FillupTaxMatrix(0,"",COr.CustCode,COr.CustCat,"",taxtemplatecode,TMr);//COr.BranchID
    inwarning = INr.WarnText1;
    COrw.Price = price;
    COrw.Spec = curitemname;
    COrw.vRebate = vreb;
    if (COrw.vRebate==0) then begin
      COrw.vRebate = blankval;
    end;
    COrw.VATCode = vatcode;
    if (baseprice<>0) then begin
      COrw.BasePrice = baseprice;
    end;
    COrw.SalesAcc = salesacc;
    COrw.ArtCode = INr.Code;
    COrw.Objects = FindINObjects(INr.Objects,INr.Group);
    COrw.PriceFactor = INr.PriceFactor;
    if (nonblank(COr.CustVATCode)) then begin COrw.VATCode = COr.CustVATCode; end;
    MatRowPut(COr,rownr,COrw);
    if (calcpricef) then begin
      price = -1;
      COVcGetCalcItemPrice(COr,rownr,price);
    end;
    if (INr.ExplodeRec==0) then begin
      MatRowPut(COr,rownr,COrw);
      MatRowGet(COr,rownr,COrw);
      COMultiLineText(COr,INr,COr.LangCode,rownr);
    end;
    MatRowGet(COr,rownr,COrw);
    p = COrw.Price; 
    CalcPrice(COrw.BasePrice,COrw.PriceFactor,COrw.vRebate,p,GenOptRec.UseDiscount);
    COrw.Price = p;  
    CalcSum(COrw.Quant,COrw.Price,COrw.PriceFactor,COrw.vRebate,t,GenOptRec.UseDiscount);
    RoundRowSum(COr.CurncyCode,COr.PayDeal,"COVc",t);
    COrw.Sum = t;
    t = COrw.Quant*COrw.BasePrice;
    s = MulRateToBase1(COr.CurncyCode,COrw.Sum,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
    FindSalesExVat(TMr,COrw.VATCode,s,COr.InclVAT,COr.NoTAXonVAT,rowsum);
    COrw.rowGP = rowsum - t;
    PackRowFieldMatrix(COrw,"TaxMatrix",TMr);
    MatRowPut(COr,rownr,COrw);
    COSumup(COr);
    res = true;
  end;
  COVc_PasteArtCode = res;
  RETURN;
END;

global
procedure COVc_PasteQuant(var record COVc COr,Integer rownr)
BEGIN
  record INVc INr;
  row COVc COrw;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  val t,s,rowsum,price,vreb,baseprice,tax2prc,p;
  Boolean calcpricef;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  record FreightBlock FreightRec;
  record TaxMatrixVc TMr;
  Time blankt;

  BlockLoad(GenOptRec);
  MatRowGet(COr,rownr,COrw);
  price = COrw.Price;
  vreb = COrw.vRebate;  
  if (GetItemPriceDiscount3(COrw.ArtCode,COrw.Quant,INr,COr.CurncyCode,
                            COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,
                            COr.LangCode,COr.CustCat,COr.PriceList,COr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            COr.ExportFlag,calcpricef,COr.CODate,blankt,COr.CustCode,true,dummyf,COr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then
  begin
    COrw.Spec = curitemname;
    COrw.vRebate = vreb;
    if (COrw.vRebate==0) then begin
      COrw.vRebate = blankval;
    end;
    if (baseprice<>0) then begin
      COrw.BasePrice = baseprice;
    end;
    COrw.ArtCode = INr.Code;
    COrw.Objects = FindINObjects(INr.Objects,INr.Group);
    COrw.PriceFactor = INr.PriceFactor;
    if (nonblank(COr.PriceList)) then begin
      if (QtyDepPriceL(COr.PriceList)) then begin
        COrw.Price = price;
      end;
    end;
    MatRowPut(COr,rownr,COrw);
    if (calcpricef) then begin
      price = -1;
      COVcGetCalcItemPrice(COr,rownr,price);
    end;
    MatRowGet(COr,rownr,COrw);
    p = COrw.Price; 
    CalcPrice(COrw.BasePrice,COrw.PriceFactor,COrw.vRebate,p,GenOptRec.UseDiscount);
    COrw.Price = p;  
    CalcSum(COrw.Quant,COrw.Price,COrw.PriceFactor,COrw.vRebate,t,GenOptRec.UseDiscount);
    RoundRowSum(COr.CurncyCode,COr.PayDeal,"COVc",t);
    COrw.Sum = t;
    t = COrw.Quant*COrw.BasePrice;
    s = MulRateToBase1(COr.CurncyCode,COrw.Sum,COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,DefaultCurRoundOff);
    FindSalesExVat(TMr,COrw.VATCode,s,COr.InclVAT,COr.NoTAXonVAT,rowsum);
    COrw.rowGP = rowsum - t;
    RowCalculateTaxMatrix_COVc(COr,rownr,COrw);
    MatRowPut(COr,rownr,COrw);
    BlockLoad(FreightRec);
    if (FreightRec.UseWeight!=0) then begin
      CalculateFreightWeightCO(COr,true);
    end;
    COSumup(COr);
  end;    
  RETURN;
END;

/* Not called from anywhere */
global
updating procedure PrintContractIV(var record IVVc IVp)
BEGIN
  record AutoActionBlock AutoActionRec;
  record CUVc CUr;
  Boolean tmpf;
  string 20 docname;

  BlockLoad(AutoActionRec); 
  if (AutoActionRec.COInvoicePrinting==1) then begin    
    CUr.Code = IVp.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.EGOFlag==0) then begin
        docname = "InvForm";
        switch (IVp.InvType) begin
          case kInvoiceTypeCashInvoiceReceiptPRT: docname = "CashInvRecPRTForm";
          case kInvoiceTypeCash: docname = "CashInvForm";
          case kInvoiceTypeCredit: docname = "CredInvForm";
          case kInvoiceTypeInterest: docname = "IIInvForm";
          case kInvoiceTypeCreditSpecialSales: docname = "CredInvForm";
        end;
        if ((IVp.InvType==kInvoiceTypeNormal or IVp.InvType==kInvoiceTypeNormalSpecialSales) or (IVp.InvType==kInvoiceTypeDownpayment)) then begin
          if (nonblank(IVp.PRCode)) then begin    
            docname = "ProjInvForm";
          end;
        end;
        tmpf = PrintDocument(IVp,docname,false);    
      end;
    end;  
  end;  
  RETURN;
END;

global
procedure COGetRate(var record COVc COp)
BEGIN
  val from,to1,to2,base1,base2;
  string 10 curncy
 
  curncy = COp.CurncyCode;
  GetFullCurncyRate(curncy,COp.CODate,from,to1,to2,base1,base2);
  COp.CurncyCode = curncy;
  COp.FrRate = from;
  COp.ToRateB1 = to1;
  COp.ToRateB2 = to2;
  COp.BaseRate1 = base1;
  COp.BaseRate2 = base2;
  RETURN;
END;

global
procedure COVc_PasteCurncyCode(var record COVc COp)
BEGIN
  COGetRate(COp);
  RETURN;
END;

global
function Boolean COVc_PasteFunderCode(var record COVc COp)
BEGIN
  Boolean res;
  
  res = true;
  if (PasteFunderInCO(COp)) then begin
  end else begin
    res = false;
  end;
  COVc_PasteFunderCode = res;
  RETURN;
END;

global
function Boolean COVc_PasteVECode(var record COVc COp)
BEGIN
  Boolean res;
  
  res = true;
  if (PasteVEInCO(COp)) then begin
  end else begin
    res = false;
  end;
  COVc_PasteVECode = res;
  RETURN;
END;

global
procedure COVc_PastePriceList(var record COVc COp)
BEGIN
  record PLDefVc PLDefR;
 
  PLDefR.Code = COp.PriceList;
  if (ReadFirstMain(PLDefR,1,true)) then begin
    COp.InclVAT = PLDefR.InclVAT;
  end;
  RETURN;
END;

global
function Boolean COVc_PasteOrgSerNr(var record COVc COp,Integer rownr)
BEGIN
  Boolean res;
  row COVc COrw;
  record SVOSerVc SVOSerr;
  string 255 warntext;
  record INVc INr;
  
  MatRowGet(COp,rownr,COrw);
  if (GetSVOSerialItem(COrw.ArtCode,COrw.OrgSerNr,SVOSerr)) then begin
    res = true;
    if (blank(COp.CustCode)) then begin
      COp.CustCode = SVOSerr.CustCode;
      if (PasteCust2InCO(COp,true,warntext)) then begin
      end;
    end;
    if ((blank(COrw.ArtCode)) or (blank(COrw.Spec))) then begin
      if (blank(COrw.ArtCode)) then begin
        COrw.OrgArtCode = SVOSerr.ItemCode;
        INr.Code = COrw.OrgArtCode;
        if (ReadFirstMain(INr,1,true)) then begin
          COrw.ArtCode = INr.ContractItem;
        end;
        if (blank(COrw.ArtCode)) then begin
          COrw.ArtCode = SVOSerr.ItemCode;
        end;
        COrw.Quant = 1;
      end;
      MatRowPut(COp,rownr,COrw);
      if (COVc_PasteArtCode(COp,rownr,warntext)) then begin end;
    end;
    if (SVOSerr.WarrantyUntil>=COp.startDate) then begin
      MatRowGet(COp,rownr,COrw);
//      COrw.ItemType = 2;
      MatRowPut(COp,rownr,COrw);
    end;
  end;
  COVc_PasteOrgSerNr = res;
  RETURN;
END;

global
procedure COVc_PasteCODate(var record COVc COr)
begin
  Time blankt;

  GetPriceList(COr.CustCat,COr.CODate,blankt,COr.PriceList,COr.InclVAT);
  COGetRate(COr);
  return;
end;

global
procedure COVc_PasteTaxTemplateCode(var record COVc COr,Integer rownr)
begin
  row COVc COrw;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GOb;
  
  BlockLoad(GOb);
  MatRowGet(COr,rownr,COrw);
  COrw.TaxTemplateCode = OverrideTaxMatrix(COrw.TaxTemplateCode,TMr);
  PackRowFieldMatrix(COrw,"TaxMatrix",TMr);
  MatRowPut(COr,rownr,COrw);
  RowCalculateTaxMatrix_COVc(COr,rownr,COrw);
  MatRowPut(COr,rownr,COrw);
  CODchrsum(COr,rownr);//GOb.UseDiscount
  return;
end;

global
procedure COVc_FillupTaxTemplate(var record COVc COr)
begin
  row COVc COrw;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GenOptRec;
  val t,s,price,vreb,baseprice,tax2prc;
  record INVc INr;
  string 255 tstr,tax2code,location,vatcode,itemtaxtemplatecode,dummystr,curitemname,salesacc;
  Boolean calcpricef;
  Integer exportflag;
  Boolean dummyf;
  Time blankt;

  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(COr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(COr,i,COrw);
    if (nonblank(COrw.ArtCode)) then begin
      if (GetItemPriceDiscount3(COrw.ArtCode,COrw.Quant,INr,COr.CurncyCode,
                            COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,
                            COr.LangCode,COr.CustCat,COr.PriceList,COr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            COr.ExportFlag,calcpricef,COr.CODate,blankt,COr.CustCode,true,dummyf,COr.PayDeal,tax2code,tax2prc,"","",itemtaxtemplatecode)) then
      begin
        COrw.TaxTemplateCode = FillupTaxMatrix(0,"",COr.CustCode,COr.CustCat,"",itemtaxtemplatecode,TMr);//COr.BranchID
        PackRowFieldMatrix(COrw,"TaxMatrix",TMr);
        MatRowPut(COr,i,COrw);
        RowCalculateTaxMatrix_COVc(COr,i,COrw);
        MatRowPut(COr,i,COrw);
        CODchrsum(COr,i);//GOb.UseDiscount
      end;
    end;
  end;
  return;  
end;

global
procedure COVc_PasteSalesMan(var record COVc COr,string oldsalesmen)
begin
  record UserVc Userr;
  string 255 tstr,salesman;
  Integer pos;

  if (HasSalesmanChanged(COr.SalesMan,oldsalesmen)) then begin
    if (COr.OKFlag==0) then begin
      pos = 0;
      ExtractObj(oldsalesmen,pos,salesman);
      while (nonblank(salesman)) begin
        RemoveOldUserObjects(salesman,COr.Objects);
        ExtractObj(oldsalesmen,pos,salesman);
      end;
    end;
//    COr.SalesGroup = "";    

    pos = 0;
    ExtractObj(COr.SalesMan,pos,salesman);
    while (nonblank(salesman)) begin
      Userr.Code = salesman;
      if (ReadFirstMain(Userr,1,true)) then begin
//        COr.SalesGroup = AddObjectToObjectList(COr.SalesGroup,Userr.SalesGroup);                
        if (COr.OKFlag==0) then begin
          COr.Objects = AddObjectToObjectList(COr.Objects,Userr.PersObjx);        
        end;
      end;
      ExtractObj(COr.SalesMan,pos,salesman);
    end;
  end;
  return;
end;

global
procedure CODUpdatePrices(var record COVc COp,Boolean readf)
begin
  Integer i,rwcnt;
  record INVc INr;
  row COVc COrw;
  Boolean calcprice,chsum;
  string 255 tstr;
  string 2 vatcode;
  string 10 salesacc,tax2code,location,taxtemplatecode;
  val price,vrebate,baseprice,tax2prc;
  Boolean dummyf;
  Time blankt;

  if (readf) then begin
    if (ReadFirstMain(COp,0,true)) then begin end;
  end;
  rwcnt = MatRowCnt(COp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(COp,i,COrw);
    if (COrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
      if (nonblank(COrw.ArtCode)) then begin
        location = COp.Location;
        price = COrw.Price;
        vrebate = blankval;
        baseprice = blankval;
        vatcode = "";
        salesacc = "";
        if (GetItemPriceDiscount3(COrw.ArtCode,COrw.Quant,INr,COp.CurncyCode,
          COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,
          COp.LangCode,COp.CustCat,COp.PriceList,COp.RebCode,
          price,tstr,vrebate,vatcode,baseprice,
          salesacc,COp.ExportFlag,calcprice,COp.CODate,blankt,COp.CustCode,true,dummyf,COp.PayDeal,tax2code,tax2prc,COp.Region,location,taxtemplatecode)) then 
        begin
          COrw.Price = price;
          COrw.vRebate = vrebate;
          if (INr.ItemType==kItemTypeStructured and blank(COp.PriceList)) then begin
            COrw.BasePrice = blankval;
          end else begin
            COrw.BasePrice = baseprice;
          end;
          COrw.VATCode = vatcode;
          if (nonblank(COp.CustVATCode)) then begin COrw.VATCode = COp.CustVATCode; end;
          COrw.SalesAcc = salesacc;
          COrw.ArtCode = INr.Code;
          MatRowPut(COp,i,COrw);
          CODchrsum(COp,i);
        end;  
      end;
    end;
  end;
  COSumup(COp);      
  return;
end;

global
procedure COVc_PastePayDeal(var record COVc COr)
begin
  record PDVc PDr;
  
  if (blank(COr.PriceList)) then begin
    PDr.Code = COr.PayDeal;
    if (GetPD(PDr)) then begin
      if (nonblank(PDr.PriceList)) then begin
        if (PDr.PriceList!=COr.PriceList) then begin
          COr.PriceList = PDr.PriceList;
          CODUpdatePrices(COr,false);
        end;
      end;
    end;
  end;    
  return;
end;
