
global
procedure GetHALRulesFileArray(string user, 
                                string local_machine, 
                                var array string files, 
                                var array integer FileOnClient, 
                                var array integer RequireRestart, 
                                var integer cnt)
begin
  record HALRulesVc HALRulesr;
  row HALRulesVc HALRulesrw;
  record UserVc Userr;
  integer rwcnt,i;
  boolean file_on_client,check_access_group;
  
  cnt = 0;
  Userr.Code = CurrentUser;
  if(ReadFirstMain(Userr,1,true)) then begin end;
  
  while(LoopMain(HALRulesr,1,true)) begin
    rwcnt = MatRowCnt(HALRulesr);
    file_on_client = HALRulesr.FileOnClient;
    check_access_group = true;
    for(i=0;i<rwcnt;i=i+1) begin
      MatRowGet(HALRulesr,i,HALRulesrw);
      
      // Local machine, overrides user and access group, if we find a match break the loop
      if((HALRulesrw.Type==1) and (HALRulesrw.Item==local_machine)) then begin /* Client machine code */
        file_on_client = (HALRulesrw.Location==2);  // 2 means that the file should be on both server and client
        goto LNextFile;
      end;  

      // User, overrides access group, if we find a match stop checking access group
      if((HALRulesrw.Type==2) and (HALRulesrw.Item==user)) then begin /* User code */
        file_on_client = (HALRulesrw.Location==2);  // 2 means that the file should be on both server and client
        check_access_group = false;
      end;  

      // Access group, don't check access group if we already found a match on user.
      if(check_access_group) then begin
        if((HALRulesrw.Type==3) and (SetInSet(HALRulesrw.Item,Userr.AccessGroup))) then begin /* Access group */
          file_on_client = (HALRulesrw.Location==2);  // 2 means that the file should be on both client and client
        end;
      end;
      
    end;
LNextFile:;
    files[cnt] = HALRulesr.Filename;
    if (file_on_client) then begin
      FileOnClient[cnt] = 1;
    end else begin
      FileOnClient[cnt] = 0;
    end;
    RequireRestart[cnt] = HALRulesr.RequireRestart;
    cnt = cnt + 1;
  end;
  return;
end;

global
procedure GetMissingFileList(array string aList)
begin
  record HalRulesVc HalRulesr;

  while (LoopMain(HalRulesr,1,true)) begin
    if (FileExists(HalRulesr.Filename)==false) then begin
      aList[aList.length] = HalRulesr.Filename;
    end;
  end;

  return;
end;