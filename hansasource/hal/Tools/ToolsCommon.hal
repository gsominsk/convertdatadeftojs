external function val AbsoluteVal(val);
forward function Integer SecondsToTime(LongInt,var Time);
forward function LongInt TimeToSeconds2(Time);
external procedure LogAreaToFile(string,area);
external function Boolean TimeInRange(Time,Time,Time);
external function roundmode SetRoundModeD(Integer);
external procedure DblDigit(var string,Integer);

global
function LongInt MinutesToTime(LongInt minutes,var Time tim)
begin
  Integer hours;
  Integer mins;
  LongInt res;
  
  res = 0;
  hours = minutes / 60;
  mins = minutes - (hours * 60);
L11MinutesToTime:;
  if (hours>23) then begin
    hours = hours - 24;
    res = res + 1;
    goto L11MinutesToTime;
  end;
  if (blanktime(tim)) then begin
    tim = AddHours(tim,GetHour(tim)+1);      
  end;
  tim = AddHours(tim,-GetHour(tim)+hours);  
  tim = AddMinutes(tim,-GetMinute(tim)+mins);
  MinutesToTime = res;
  return;
end;

/* This function was the Global one, but I think the first one looks 100% correct and better
function LongInt MinutesToTime(LongInt minutes,var Time invda)
BEGIN
  LongInt hours,mins;
  LongInt res;
  Time a;

  res = 0;
  hours = minutes / 60;
  mins = minutes - (hours * 60);
L11:;
  if (hours>23) then begin
    hours = hours - 24;
    res = res + 1;
    goto L11;
  end;
  invda = AddMinutes(a,(hours * 60) + mins);
  MinutesToTime = res;
  return;
end;
*/

global
function LongInt TimeToMinutes(Time invda)
begin
  LongInt mint;
  
  mint = 0;
  if (nonblanktime(invda)) then begin
    mint = GetHour(invda)*60;
    mint = mint + GetMinute(invda);
  end;
  TimeToMinutes = mint;
  return;
end;

global
function LongInt AddM4Time(Time frtim,LongInt add,var Time totim)
begin
  LongInt minutes;
  LongInt days;

  minutes = TimeToMinutes(frtim);
  minutes = minutes + add;
  days = MinutesToTime(minutes,totim);
  AddM4Time = days;
  return;
end;

global
function LongInt AddTime(Time frtim,LongInt add,var Time totim)
BEGIN
  LongInt minutes;

  minutes = TimeToMinutes(frtim) + add;
  AddTime = MinutesToTime(minutes,totim);
  return;
end;

global
function Time DivideTime(Time tt,val q)
begin
  Time res;
  val t;

  res. hour = tt.hour/q;
  res. minute = tt.minute/q;
  res. second = tt.second/q;
  DivideTime = res;
  return;
end;

global
function Time ValToTime(val av)
begin
  Time res;
  val t,v;

  v = AbsoluteVal(av);
  res.hour = v;
  t = v - res.hour;
  res.minute = t*60.00;
  t = v*3600.00 - res.hour*3600.00 - res.minute*60.00;
  res.second = t;
  ValToTime = res;
  return;
end;

global
function Time MultiplyTime(Time tt,val q)
begin
  Time res;
  val t;

/*  
  res.hour = tt.hour*q;
  res.minute = tt.minute*q;
  res.second = tt.second*q;
*/
  res = ValToTime(TimeToVal(tt)*q);
  MultiplyTime = res;
  return;
end;

function LongInt MinutesToTime2(LongInt minutes,var Time invda)
BEGIN
  LongInt hours,mins;
  Time a;

  invda = a;
  hours = minutes / 60;
  mins = minutes - (hours * 60);  
  invda.hour = hours;
  invda.minute = mins;
  invda.second = 0;
  MinutesToTime2 = 0;
  return;
end;

global
function Time AddTime2(Time frtim,LongInt add)
BEGIN
  LongInt minutes;
  LongInt days;
  Time totim;

  minutes = TimeToMinutes(frtim) + add;
  days = MinutesToTime2(minutes,totim);
  AddTime2 = totim;
  return;
end;

global
function Time AddTime3(Time frtim,LongInt addmins)
BEGIN
  LongInt seconds;
  LongInt days;
  Time totim;

  seconds = TimeToSeconds2(frtim) + addmins*60;
  days = SecondsToTime(seconds,totim);
  AddTime3 = totim;
  return;
end;

function time LongIntToTime(LongInt hours,LongInt min,LongInt sec)
begin
  string 60 tstr,tmp;
  
  tmp = hours;
  tstr = "" & tmp;
  tmp = ":" & min;
  tstr = tstr & tmp;
  tmp = ":" & sec;
  tstr = tstr & tmp;
  LongIntToTime = tstr;
  return;
end;

global
function time TimeAddMinute(time T1,val min)
begin
  string 60 tstr;
  LongInt res,resh,resm;
    
  resm = (GetHour(t1) * 60 + GetMinute(t1)) + min;
  resh = 0;
  while (resm>=60) begin
    resm = resm - 60;
    resh = resh + 1;
    if (resh==24) then begin resh = 0; end;
  end;
  tstr = LongIntToTime(resh,resm,0);
  TimeAddMinute = tstr;
  return;
end;

global
function time TimeAdd(time t1,time t2)
begin
  string 60 tstr;
  LongInt res,resh,resm;
  
  resm = GetHour(t1) + GetHour(t2);
  resm = resm * 60;
  resm = resm + GetMinute(t1) + GetMinute(t2);
  resh = 0;
  while (resm>=60) begin
    resm = resm - 60;
    resh = resh + 1;
    if (resh==24) then begin resh = 0; end;
  end;
  tstr = LongIntToTime(resh,resm,0);
  TimeAdd = tstr;
  return;
end;

global
function time TimeSub(time t1,time t2)
begin
  string 60 tstr;
  LongInt res,resh,resm;
    
  resm = (GetHour(t1) - GetHour(t2)) * 60;
  resm = resm + GetMinute(t1) - GetMinute(t2);
  resh = 0;
  while (resm>=60) begin
    resm = resm - 60;
    resh = resh + 1;
    if (resh==24) then begin resh = 0; end;
  end;
  tstr = LongIntToTime(resh,resm,0);
  TimeSub = tstr;
  return;
end;

global
function Time AddTime_Minutes(Time frtim,Time add)
BEGIN
  Time res;
  LongInt minutes,days;

  minutes = TimeToMinutes(frtim) + TimeToMinutes(add);
  days = MinutesToTime(minutes,res);  
  AddTime_Minutes = res;
  return;
end;

global
function LongInt MoveTime(Time atim,Time btim,var Time totim)
begin
  LongInt aminutes,bminutes,cminutes;
  LongInt themin,days;
  Time tm;

  aminutes = TimeToMinutes(atim);
  bminutes = TimeToMinutes(btim);
  themin = TimeToMinutes(totim);
  if (aminutes>bminutes) then begin
    days = 1;
    tm.hour = 24;
    tm.minute = 0;
    tm.second = 0;
    cminutes = TimeToMinutes(tm);
    themin = themin + (cminutes - aminutes) + bminutes;
  end else begin
    days = 0;
    themin = themin + (bminutes - aminutes);
  end;
  MinutesToTime(themin,totim);
  MoveTime = days;
  return;
end;

global
function Integer DateGetIntMonth(Date dp)
BEGIN
  Integer res;
  Integer y;
  
  if (blankdate(dp)) then begin 
    res = 0; 
  end else begin
    y = GetYear(dp);
    res = (y-1980)*12;
    res = res + GetMonth(dp)-1;
  end;  
  DateGetIntMonth = res;
  RETURN;
END;

global
function Date IntMonthToDate(Integer im)
BEGIN
  Date res;
  Integer y,m;
  
  y = im/12;
  m = im - y*12;
  res.year = y+1980;
  res.month = m+1;
  res.day = 1;
  IntMonthToDate = res;
  RETURN;
END;

global
function LongInt DaysInYear(Integer year)
BEGIN
  Integer res;

  res = 365;
  if (IsLeapYear(year)) then begin
    res = res + 1;
  end;  
  DaysInYear = res;
  RETURN;
END;

global
function LongInt CurrentDaysInYear(Date td)
BEGIN
  Integer res,i;

  for (i=1;i<GetMonth(td);i=i+1) begin
    res = res + DaysInMonth(GetYear(td),i);
  end;
  res = res + GetDay(td);
  CurrentDaysInYear = res;
  RETURN;
END;

global
function Integer DaysBeforeMonth(Integer year,Integer month)
BEGIN
  Integer res,t;

  t = month-1;
  if (t>11) then begin
    res = res + 31;
  end;    
  if (t>10) then begin
    res = res + 30;
  end;    
  if (t>9) then begin
    res = res + 31;
  end;    
  if (t>8) then begin
    res = res + 30;
  end;    
  if (t>7) then begin
    res = res + 31;
  end;    
  if (t>6) then begin
    res = res + 31;
  end;    
  if (t>5) then begin
    res = res + 30;
  end;    
  if (t>4) then begin
    res = res + 31;
  end;    
  if (t>3) then begin
    res = res + 30;
  end;    
  if (t>2) then begin
    res = res + 31;
  end;    
  if (t>1) then begin
    res = res + 28;
    if (IsLeapYear(year)) then begin
      res = res + 1;
    end;  
  end;    
  if (t>0) then begin
    res = res + 31;
  end;    
  DaysBeforeMonth = res;
  RETURN;
END;

global
function LongInt DateM42Days(Date dp)
BEGIN
  LongInt res;
  Integer i;

  res = 0;
  for (i=1980; i<GetYear(dp);i=i+1) begin
    res = res + DaysInYear(i);
  end;
  res = res + DaysBeforeMonth(GetYear(dp),GetMonth(dp));
  res = res + GetDay(dp);
  DateM42Days = res;
  RETURN;
END;

global
procedure TimeToSeconds(Time invda,var LongInt hundreds)
begin
  LongInt mint,var3600;
  
  mint = 0;
  var3600 = 3600;
  if (nonblanktime(invda)) then begin
    mint = GetHour(invda)*var3600;
    mint = mint + GetMinute(invda)*60;
    mint = mint + GetSecond(invda);
  end;
  hundreds = mint;
  return;
end;

global
function LongInt TimeToSeconds2(Time invda)
begin
  LongInt hundreds;
  LongInt mint,var3600;
  
  mint = 0;
  var3600 = 3600;
  if (nonblanktime(invda)) then begin
    mint = GetHour(invda)*var3600;
    mint = mint + GetMinute(invda)*60;
    mint = mint + GetSecond(invda);
  end;
  hundreds = mint;
  TimeToSeconds2 = hundreds;
  return;
end;

global
function Integer SecondsToTime(LongInt seconds,var Time tim)
begin
  LongInt hours;
  LongInt mins;
  LongInt res;
  LongInt var3600;
  
  res = 0;
  var3600 = 3600;
  hours = ((seconds / 60) / 60);
  mins = (seconds - hours*var3600)/60;
L11SecondsToTime:;
  if (hours>23) then begin
    hours = hours - 24;
    res = res + 1;
    goto L11SecondsToTime;
  end;
  if (blanktime(tim)) then begin
    tim = AddHours(tim,GetHour(tim)+1);      
  end;
  tim = AddHours(tim,-GetHour(tim)+hours);  
  tim = AddMinutes(tim,-GetMinute(tim)+mins);
  tim = AddSeconds(tim,-GetSecond(tim)+seconds - ((hours * var3600) + (mins * 60)));  
  SecondsToTime = res;
  return;
end;

function LongInt ExactTimeDiff(Time atim,Time btim,var Time totim)
begin
  LongInt aseconds,bseconds,cseconds;
  LongInt thehun,days;
  Time tm;

  TimeToSeconds(atim,aseconds);
  TimeToSeconds(btim,bseconds);
  if (aseconds>bseconds) then begin
    days = 1;
    cseconds = 86400;
    thehun = (cseconds - aseconds) + bseconds;
  end else begin
    days = 0;
    thehun = bseconds - aseconds;
  end;
  days = SecondsToTime(thehun,totim);
  ExactTimeDiff = thehun;
  return;
end;

global
function LongInt TimeDiffInSeconds(Time atim,Time btim)
begin
  LongInt res;
  Time dtime;

  res = ExactTimeDiff(atim,btim,dtime);  
  TimeDiffInSeconds = res;
  return;
end;

function LongInt AddTimeDiff(Time atim,Time btim,var Time totim)
begin
  LongInt aminutes,bminutes,cminutes;
  LongInt themin,days;
  Time tm;
  Integer i;

  aminutes = TimeToMinutes(atim);
  bminutes = TimeToMinutes(btim);
  if (aminutes>bminutes) then begin
    days = 1;
    cminutes = 1440;
    themin = (cminutes - aminutes) + bminutes;
  end else begin
    days = 0;
    themin = bminutes - aminutes;
  end;
  i = MinutesToTime(themin,totim);
  AddTimeDiff = days;
  return;
end;

global
procedure vTimeDiff(Time stta,Time endta,var val res)
BEGIN
  val ominutes,oseconds, tmp1,tmp2;
  
  res = blankval;
  if ((nonblanktime(stta)) or (nonblanktime(endta))) then begin
    tmp1 = GetHour(endta); 
    if (tmp1<0) then begin tmp1 = 0; end;
    tmp2 = GetHour(stta);
    if (tmp2<0) then begin tmp2 = 0; end;
    res = tmp1 - tmp2;
    
    tmp1 = GetMinute(endta);
    tmp2 = GetMinute(stta);
    if (tmp1<0) then begin tmp1 = 0; end;
    if (tmp2<0) then begin tmp2 = 0; end;   
    ominutes = tmp1 - tmp2;
    ominutes = ominutes/60;//100
    res = res + ominutes;
    
    tmp1 = GetSecond(endta);
    tmp2 = GetSecond(stta);
    if (tmp1<0) then begin tmp1 = 0; end;
    if (tmp2<0) then begin tmp2 = 0; end;   
    oseconds = tmp1 - tmp2;
    oseconds = oseconds/3600;//100
    res = res + oseconds;

    res = Round(res,SetRoundModeD(5));
  end;
  RETURN;
END;

global
function Time TimeDiff(Time atim,Time btim)
begin
  Time res;
  LongInt l;
  
  l = AddTimeDiff(atim,btim,res);
  TimeDiff = res;
  return;
end;

global
function LongInt TimeDiffinMinutes(Time atim,Time btim)
begin
  LongInt res;
  LongInt l;
  LongInt aminutes,bminutes,cminutes;
  LongInt themin;
  
  aminutes = TimeToMinutes(atim);
  bminutes = TimeToMinutes(btim);
  res = aminutes - bminutes;
  TimeDiffinMinutes = res;
  return;
end;

global
function LongInt DateDiff(Date invda,Date payda)
begin
  LongInt res;
  LongInt odays1;
  LongInt odays2;

  if ((nonblankdate(invda)) and (nonblankdate(payda))) then begin
    odays1 = DateM42Days(invda);
    odays2 = DateM42Days(payda);
    res = odays1 - odays2;
  end else begin
    res = 0;
  end;
  DateDiff = res;
  return;
end;

global
function LongInt DateDiff2(Date invda,Date payda)
begin
  LongInt res;
  LongInt odays1;
  LongInt odays2;

  if ((nonblankdate(invda)) and (nonblankdate(payda))) then begin
    odays1 = DateM42Days(invda);
    odays2 = DateM42Days(payda);
    res = odays1 - odays2 + 1;
  end else begin
    res = 0;
  end;
  DateDiff2 = res;
  return;
end;

global
function LongInt MonthDiff(Date ia,Date ib)
begin
  Date a;
  LongInt res;
  
  res = 0;
  a = ia;
  while (a<ib) begin
    a = AddMonth(a,1);
    res = res + 1;
  end;
  MonthDiff = res;
  return;
end;

global
function val HoursDiff(Date d1,Time t1,Date d2,Time t2)
begin
  LongInt days;
  Val Qty;
  
  days = DateDiff(d2,d1);
  Qty = days * 24;
  Qty = Qty + TimeToVal(TimeDiff(t1,t2));

  HoursDiff = Qty;
  return;
end;

global
function Boolean DateTimeInsideDateTime(Date frd1,Time frt1,Date tod1,Time tot1,
                                        Date frd2,Time frt2,Date tod2,Time tot2)
begin
  Boolean res;
  Boolean before,after;
  
  res = true;
  before = false;
  after = false;
  if (frd2>tod1) then begin
    after = true;
  end else begin
    if (frd2==tod1) then begin
      if (frt2>tot1) then begin
        after = true;
      end;
    end;
  end;
  if (tod2<frd1) then begin
    before = true;
  end else begin
    if (tod2==frd1) then begin
      if (tot2<frt1) then begin
        before = true;
      end;
    end;
  end;

  if (before or after) then begin
    res = false;
  end;
  DateTimeInsideDateTime = res;
  return;
end;

global
function Boolean DateTimeInsideDateTimeRsrt(Date frd1,Time frt1,Date tod1,Time tot1,
                                        Date frd2,Time frt2,Date tod2,Time tot2)
begin
  Boolean res;
  Boolean before,after;
  
  res = true;
  before = false;
  after = false;
  if (frd2>frd1) then begin
    after = true;
  end else begin
    if (frd2==tod1) then begin
      if (frt2>frt1) then begin
        after = true;
      end;
    end;
  end;
  if (tod2<frd1) then begin
    before = true;
  end else begin
    if (tod2==frd1) then begin
      if (tot2<=frt1) then begin
        before = true;
      end;
    end;
  end;
/*
StartFormat(15);
  OutString(0,0,frd1,false);
  OutString(70,0,frt1,false);
  OutString(140,0,tot1,false);
  OutString(210,0,frd2,false);
  OutString(270,0,frt2,false);
  OutString(340,0,tod2,false);
  OutString(410,0,tot2,false);
  OutString(460,0,before,false);
  OutString(470,0,after,false);
EndFormat;
*/
  if (before or after) then begin
    res = false;
  end;
  DateTimeInsideDateTimeRsrt = res;
  return;
end;

global
function Boolean DateTimeInsidePeriod(Date frd,Time frt,
                                      Date frd2,Time frt2,Date tod2,Time tot2)
begin
  Boolean res;
  
  res = false;
  if (DateInRange(frd,frd2,tod2)) then begin
    if (TimeInRange(frt,frt2,tot2)) then begin
      res = true;
    end;
    if (blanktime(frt2)) or blanktime(tot2) then begin
      res = true;
    end;
  end;
  DateTimeInsidePeriod = res;
  return;
end;

global
function Integer CompareDateAndTime(Date d1,Time t1,Date d2,Time t2)
begin
  Integer res;
  
  if (blankdate(d1) and blankdate(d2)) then begin
    res = 0;
    goto LCompareDateAndTime;
  end;
  if (nonblankdate(d1) and blankdate(d2)) then begin
    res = 1;
    goto LCompareDateAndTime;
  end;
  if (blankdate(d1) and nonblankdate(d2)) then begin
    res = -1;
    goto LCompareDateAndTime;
  end;
  
  if (d1==d2) and (t1==t2) then begin
    res = 0;
    goto LCompareDateAndTime;
  end;
  if (d1>d2) then begin
    res = 1;
  end else begin
    res = -1;
    if (d1==d2) then begin
      if (t1>t2) then begin
        res = 1;
      end;
    end;
  end;
LCompareDateAndTime:;  
  CompareDateAndTime = res;
  return;
end;

global
function Integer GetWeekNr(Date tdp,string countrycode,var LongInt maxweeknrp)
begin
  record WeekVc Wr;
  row WeekVc Wrrw;
  record CYBlock CompYear;
  string 20 country;
  Integer i,rwcnt;
  Integer res;
  Integer year,chkyear;
  LongInt days;
  Boolean foundf;
  
  BlockLoad(CompYear);
  res = 0;
  year = GetYear(tdp);
  chkyear = year;
  country = countrycode;
  if (blank(country)) then begin
    country = CompYear.CountryCode;
  end;
  Wr.CountryCode = country;
  foundf = ReadFirstMain(Wr,1,true);
  if ((foundf==false) and (country!=CompYear.CountryCode)) then begin
    Wr.CountryCode = CompYear.CountryCode;
    foundf = ReadFirstMain(Wr,1,true);
  end;
  if (foundf) then begin
    rwcnt = MatRowCnt(Wr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Wr,i,Wrrw);
      if (Wrrw.Year==year) then begin
        if (Wrrw.FirstDayofW1>tdp) then begin chkyear = chkyear - 1; end;
      end;
      if (Wrrw.Year==year+1) then begin
        if (Wrrw.FirstDayofW1<=tdp) then begin chkyear = chkyear + 1; end;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Wr,i,Wrrw);
      if (Wrrw.Year==chkyear) then begin
        days = DateDiff(tdp,Wrrw.FirstDayofW1);
        res = (days/7)+1;
        maxweeknrp = Wrrw.NrOffWeeks;
      end;
    end;
  end;
  GetWeekNr = res;
  return;
end;

global
function Integer IsBankHoliday(record BHollVc BHollr,Integer calsystem,Date dp)
begin
  Integer res;
  row BHollVc BHollrw;
  Integer i,rwcnt;
  
  switch (calsystem) begin
//    case kCalendarHijri:
    otherwise
  end;
  rwcnt = MatRowCnt(BHollr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BHollr,i,BHollrw);
    if (BHollrw.FreeDay==dp) then begin
      res = 1;
      goto LIsBankHoliday;
    end;
  end;
LIsBankHoliday:;  
  IsBankHoliday = res;
  return;
end;

global
function Integer IsRedDay(Boolean bhollf,record BHollVc BHollr,Integer calsystem,Date dp)
begin
  Integer i,x;
  Integer res;

  i = GetDateID(dp);
  x = Mod((i-1),7) + 1;
  if (bhollf) then begin
    switch (x) begin
      case 1: if (BHollr.Monday!=0) then begin res = 1; end;
      case 2: if (BHollr.Tuesday!=0) then begin res = 1; end;
      case 3: if (BHollr.Wednesday!=0) then begin res = 1; end;
      case 4: if (BHollr.Thursday!=0) then begin res = 1; end;
      case 5: if (BHollr.Friday!=0) then begin res = 1; end;
      case 6: if (BHollr.Saturday!=0) then begin res = 1; end;
      case 7: if (BHollr.Sunday!=0) then begin res = 1; end;
    end;
    if (res==0) then begin
      res = IsBankHoliday(BHollr,calsystem,dp);
    end;
  end else begin
    switch (calsystem) begin
      case kCalendarHijri:
        if (x==4) then begin res = 1; end;
        if (x==5) then begin res = 1; end;
      otherwise
        if (x>=6) then begin res = 1; end;
    end;
  end;
/*  
  if (GetVATLaw()==vatIranian) then begin
    res = 0;
    if (x==4) then begin res = 1; end;
    if (x==5) then begin res = 1; end;
  end;
*/  
  IsRedDay = res;
  return;
end;

global
function Integer DateIsRedDay(Integer calsystem,Date d)
begin
  Integer res;
  Boolean bhollf;
  record BHollVc BHollr;
  record CYBlock CYb;

  BlockLoad(CYb);
  BHollr.CountryCode = CYb.CountryCode;
  bhollf = ReadFirstMain(BHollr,1,true);
  res = IsRedDay(bhollf,BHollr,calsystem,d);
//LogText(0,"DateIsRedDay d " & d & " res " & res & " calsystem " & calsystem);  
  DateIsRedDay = res;
  return;
end;

global
procedure FillHalfYearWClassRemote(Integer calsystem,Date startd,Integer nrofmonths,var Area adhp)
begin
  Boolean bhollf;
  record BHollVc BHollr;
  record CYBlock CYb;
  Integer i,x,t;
  Date td;
  LongInt colour;
  Integer month,daysinm;
  Date startmonthd;
  Integer weeknr;
  LongInt maxweeknr;
  string 255 tstr;

  SetAreaZeroSize(adhp);

  BlockLoad(CYb);
  BHollr.CountryCode = CYb.CountryCode;
  bhollf = ReadFirstMain(BHollr,1,true);

  weeknr = GetWeekNr(startd,CYb.CountryCode,maxweeknr);
  AddLongToArea(weeknr,adhp);
  AddLongToArea(maxweeknr,adhp);
  for (month=0;month<nrofmonths;month=month+1) begin
    startmonthd = AddMonth(startd,month);
    td = startmonthd;
    daysinm = CountDaysInMonth(calsystem,td);
    for (t=1;t<=daysinm;t=t+1) begin
      i = GetDateID(td);
      x = Mod((i-1),7) + 1;
      colour = 0;
      if (bhollf) then begin
        switch (x) begin
          case 1: if (BHollr.Monday!=0) then begin colour = 1; end;
          case 2: if (BHollr.Tuesday!=0) then begin colour = 1; end;
          case 3: if (BHollr.Wednesday!=0) then begin colour = 1; end;
          case 4: if (BHollr.Thursday!=0) then begin colour = 1; end;
          case 5: if (BHollr.Friday!=0) then begin colour = 1; end;
          case 6: if (BHollr.Saturday!=0) then begin colour = 1; end;
          case 7: if (BHollr.Sunday!=0) then begin colour = 1; end;
        end;
        if (colour==0) then begin
          colour = IsBankHoliday(BHollr,calsystem,td);
        end;
      end else begin
        switch (calsystem) begin
          case kCalendarHijri:
            if (x==4) then begin colour = 1; end;
            if (x==5) then begin colour = 1; end;
          otherwise
            if (x>=6) then begin colour = 1; end;
        end;
      end;
      AddLongToArea(colour,adhp);
      td = AddDay(td,1);
    end;
  end;
  return;
end;

global
function Date DateFromString(string datestr,string format)
begin
  Date res;
  Integer sl,i;
  Integer mul;
  Array Integer year;
  Integer ycnt;
  Array Integer month;
  Integer mcnt;
  Array Integer day;
  Integer dcnt;

  if (blank(datestr)) then begin goto LDateFromString; end;
  sl = len(format);
  for (i=0;i<sl;i=i+1) begin
    switch (Mid(format,i,1)) begin
      case "Y": 
        year[ycnt] = StringToInt(Mid(datestr,i,1));
        ycnt = ycnt + 1;
      case "M":
        month[mcnt] = StringToInt(Mid(datestr,i,1));
        mcnt = mcnt + 1;      
      case "D": 
        day[dcnt] = StringToInt(Mid(datestr,i,1));
        dcnt = dcnt + 1;      
    end;
  end;  
  mul = Power(10,(dcnt-1));
  for (i=0;i<dcnt;i=i+1) begin
    res.day = res.day + day[i]*mul;
    mul = mul/10;
  end;
  mul = Power(10,(mcnt-1));
  for (i=0;i<mcnt;i=i+1) begin
    res.month = res.month + month[i]*mul;
    mul = mul/10;
  end;
  if (ycnt==3) then begin ycnt = 2; end;
  mul = Power(10,(ycnt-1));
  for (i=0;i<ycnt;i=i+1) begin
    res.year = res.year + year[i]*mul;
    mul = mul/10;
  end;  
  if (res.year<100) then begin
    if (res.year<80) then begin
      res.year = res.year + 2000;
    end else begin
      res.year = res.year + 1900;
    end;
  end;
LDateFromString:;
  DateFromString = res;
  return;
end;

global
function val ValFromString(string avalstr,string decimalsep,string thousandsep)
begin
  val res;
  Integer i,sl,deccnt;
  Boolean decsepf,thosepf,negf;
  string 255 tstr,ch;
  string 255 valstr;

  if (blank(avalstr)) then begin goto LValFromString; end;
  sl = len(avalstr);
  deccnt = 0;
  for (i=0;i<sl;i=i+1) begin
    ch = Mid(avalstr,i,1);
    if (nonblank(decimalsep)) then begin
      if (decsepf) then begin
        if (Mid(avalstr,i,1)>="0" and Mid(avalstr,i,1)<="9") then begin
          deccnt = deccnt + 1;
        end;
      end;
      if (Mid(avalstr,i,1)==decimalsep) then begin
        decsepf = true;
        ch = DecimalSeparator;
      end;
    end;
    if (nonblank(thousandsep)) then begin
      if (Mid(avalstr,i,1)==thousandsep) then begin
        thosepf = true;
        ch = ThousandSeparator;
      end;
    end;
    if (Mid(avalstr,i,1)=="-") then begin
      negf = true;
      ch = "-";
    end;
    valstr = valstr & ch;
  end;  
  res = StringToVal(StripNonDigits(valstr),M4Val);
  if (decsepf) then begin
    for (i = 0; i<deccnt; i = i + 1) begin
      res = res/10;
    end;
  end;
  if (thosepf) then begin
    res = res/1000;
  end;
  if (negf) then begin
    res = -res;
  end;
LValFromString:;
  ValFromString = res;
  return;
end;

global
function LongInt YearsOld(Date dat)
begin
  LongInt res;
  Date curdat;
  
  curdat = CurrentDate;
  res = curdat.year - dat.year;
  if (curdat.month<dat.month) then begin
    res = res - 1;
  end else begin
    if ((curdat.Month==dat.month) and (curdat.day<dat.Day)) then begin
      res = res - 1;
    end;
  end;
  YearsOld = res;
  return;
end;

global
procedure GetMonthText(string deflangcode,Date td,var string res)
BEGIN
  record UserVc Userr;
  record DNMVc DNMr;
  string 255 langcode;
  
  res = "";
  langcode = deflangcode;
  if (blank(langcode)) then begin
    Userr.Code = CurrentUser;
    if (ReadFirstMain(Userr,1,true)) then begin
      langcode = Userr.LangCode;
    end;
  end;
  if (nonblank(langcode)) then begin
    DNMr.LangCode = langcode;
    if (ReadFirstMain(DNMr,1,true)) then begin
      switch (GetMonth(td)) begin
        case 1: res = DNMr.January;
        case 2: res = DNMr.February;
        case 3: res = DNMr.March;
        case 4: res = DNMr.April;
        case 5: res = DNMr.May;
        case 6: res = DNMr.June;
        case 7: res = DNMr.July;
        case 8: res = DNMr.August;
        case 9: res = DNMr.September;
        case 10: res = DNMr.October;
        case 11: res = DNMr.November;
        case 12: res = DNMr.December;
      end;
    end;
  end;  
  if (blank(res)) then begin
    res = USetStr(2780+GetMonth(td));
  end;
  RETURN;
END;

global
procedure GetDateMonthInWords(Date td,var string res)
BEGIN
  record SysFormatBlock SFb;

  BlockLoad(SFb);
  switch (SFb.dateOrder) begin
    case 0:  
      res = USetStr(2780 + GetMonth(td)); 
      res = res & " ";
      res = res & GetDay(td);
      res = res & " ";
      res = res & GetYear(td); 
    case 2:  
      res = GetYear(td); 
      res = res & " ";
      res = res & USetStr(2780 + GetMonth(td)); 
      res = res & " ";
      res = res & GetDay(td);
    otherwise
      DblDigit(res,GetDay(td));
      res = res & " ";
      res = res & USetStr(2780 + GetMonth(td)); 
      res = res & " ";
      res = res & GetYear(td); 
  end;
  RETURN;
END;

global
function Integer WeekNr(Date td,string tstr)
begin
  Integer res;
  LongInt maxweeknr;
 
  res = GetWeekNr(td,tstr,maxweeknr);
  WeekNr = res;
  return;
end;

global
function string 255 MonthName(Date td)
begin
  string 255 res;
 
  res = USetStr(GetMonth(td) + 2780);
  MonthName = res;
  return;
end;

global
function string 255 MonthShortName(Date td)
begin
  string 255 res;
 
  res = USetStr(GetMonth(td) + 2870);
  MonthShortName = res;
  return;
end;

global
procedure LabelDateRange(Date sDate,Integer towhat,var String tstr)
begin
  switch (towhat) begin
    case 0:  tstr = sDate;
    case 1:  tstr = WeekNr(sDate,"");
    //case 2:  tstr = MonthName(sDate,""); //PDB
    case 2:  tstr = GetMonth(sDate); //PDB
  end;
  return;
end;

global
function Boolean DateOverlaps(Date ps,Date pe,Date rs,Date re) 
begin
  Boolean res;
  
  res = false;
  if (nonblankdate(ps) and nonblankdate(pe) and nonblankdate(rs) and nonblankdate(re)) then begin
    if (re>ps) and (re<pe) then begin res = true; end;
    if (rs>ps) and (rs<pe) then begin res = true; end;
    if (rs<ps) and (re>pe) then begin res = true; end;
    if (ps<rs) and (pe>re) then begin res = true; end;
  end;  
  DateOverlaps = res;
  return;
end;
/*
global
function Boolean DateTimeInRange(Date d,Time t,Date StartDate,Time StartTime,Date EndDate,Time EndTime)
begin
  Boolean res;
  
  res = true;
  if (nonblankdate(StartDate) and d<StartDate) then begin
    res = false;
  end;
  if (nonblankdate(EndDate) and d>EndDate) then begin
    res = false;
  end;
  if (nonblank(StartTime) and t<StartTime and (d==StartDate or blankdate(StartDate))) then begin
    res = false;
  end;
  if (nonblank(EndTime) and t>EndTime and (d==EndDate or blankdate(EndDate))) then begin
    res = false;
  end;
  
  DateTimeInRange = res;
  return;
end;
*/
global
function Boolean DateTimeInRange(Date d,Time t,Date StartDate,Time StartTime,Date EndDate,Time EndTime)
begin
  Boolean res;
  

//LogText(0,"1.DateTimeInRange StartDate=" & StartDate & " StartTime=" & StartTime & " EndDate=" & EndDate & " EndTime=" & EndTime);
  res = true;
  if (nonblankdate(StartDate) and d<StartDate) then begin
    res = false;
  end;
  if (nonblankdate(EndDate) and d>EndDate) then begin
    res = false;
  end;
  if (nonblank(StartTime) and t<StartTime and (d==StartDate or blankdate(StartDate))) then begin
    res = false;
  end;
  if (StartTime<=EndTime) then begin
    if (nonblank(EndTime) and t>EndTime and (d==EndDate or blankdate(EndDate))) then begin
      res = false;
    end;
  end else begin

    if (nonblank(EndTime) and t>EndTime and (d==EndDate or blankdate(EndDate))) then begin
      res = false;
    end;
  end;
  
  DateTimeInRange = res;
  return;
end;

global
function string 255 AddStr(string s1,string s2,string separator)
begin
  string 255 res;
  
  res = s1;
  if (nonblank(s2)) then begin
    if (nonblank(res)) then begin
      res = res & separator;
    end;
    res = res & s2;
  end;
  
  AddStr = res;
  return;
end;

global
procedure SwapStr(var string s1,var string s2)
begin
  string 255 temp;
  
  temp = s2;
  s2 = s1;
  s1 = temp;
  
  return;
end;

global
function Integer StrArrayCnt(array string aStr)
begin
  StrArrayCnt = StringToInt(aStr[0]);
  return;
end;

global
procedure AddToStrArray(string tstr,var array string aStr)
begin
  Integer cnt;
  
  if (nonblank(tstr)) then begin
    cnt = StrArrayCnt(aStr);
    cnt = cnt + 1;
    aStr[cnt] = tstr;
    aStr[0] = cnt;
  end;
  
  return;
end;

global
procedure DisplayStrArray(array string aStr)
begin
  Integer i,cnt;
  
  cnt = StrArrayCnt(aStr);
  for (i=1;i<=cnt;i=i+1) begin
    MessageBox(0,aStr[i]);
  end;
  
  return;
end;

global
procedure SortStrArray(var array string aStr)
begin
  string 255 tstr;
  Boolean Sorted;
  Integer i,cnt;
  
  cnt = StrArrayCnt(aStr);
  Sorted = false;
  while (!Sorted) begin
    Sorted = true;
    for (i=1;i<cnt;i=i+1) begin
      if (aStr[i]>aStr[i+1]) then begin
        tstr = aStr[i];
        aStr[i] = aStr[i+1];
        aStr[i+1] = tstr;
        Sorted = false;
      end;
    end;
  end;
  
  return;
end;

function Date DaysToUTCDate(LongInt days)
begin
  Date dat;
  LongInt res;
  LongInt dir;

  res = days + 1;
  dat.year = 1970;
  dir = DaysInYear(dat.year);
  while (res>dir) begin
    res = res - dir;
    dat.year = dat.year + 1;
    dir = DaysInYear(dat.year);
  end;
  dat.month = 1;
  dir = DaysInMonth(dat.year,dat.month);
  while (res>dir) begin
    res = res - dir;
    dat.month = dat.month + 1;
    dir = DaysInMonth(dat.year,dat.month);
  end;
  dat.day = res;
  DaysToUTCDate = dat;
  return;
end;

function LongInt UTCDateToDays(Date dat)
begin
  LongInt res;
  Integer i;
  LongInt dir;

  res = 0;
  for (i=1970;i<dat.year;i=i+1) begin
    res = res + DaysInYear(i);
  end;
/*  
  switch (dat.month) begin
    case 12: res = res + 30; // nov
    case 11: res = res + 31; // oct
    case 10: res = res + 30; // sep
    case 9:  res = res + 31; // aug
    case 8:  res = res + 31; // jul
    case 7:  res = res + 30; // jun
    case 6:  res = res + 31; // may
    case 5:  res = res + 30; // apr
    case 4:  res = res + 31; // mar
    case 3:  res = res + 28; // feb
             if (IsLeapYear(dat)) then begin res = res + 1; end;
    case 2:  res = res + 31; //jan
    // case 1:
  end;
*/  
  for (i=1;i<dat.month;i=i+1) begin
    res = res + DaysInMonth(dat.Year,i);
  end;
  res = res + dat.day - 1;
  UTCDateToDays = res;
  return;
end;

global
procedure UTCTimeToDate(LongInt seconds,var Date dat,var Time tim)
begin
  LongInt days;
  LongInt secondsinday;
  LongInt timesecs;
  Time blankt;
  LongInt thour,tminute,tsecond;
  
  dat = DateFromString("01.01.1970","DD.MM.YYYY");
  tim = blankt;
  secondsinday = 60*60;
  secondsinday = secondsinday*24;
  days = seconds/secondsinday;

  dat = DaysToUTCDate(UTCDateToDays(dat)+days);
  timesecs = seconds - days*secondsinday;
  thour = timesecs/(60*60);
  tminute = (timesecs - thour*60*60)/60;
  tsecond = timesecs - thour*60*60 - tminute*60;
  while (tsecond>60) begin
    tminute = tminute + 1;
    tsecond = tsecond - 60;
  end;
  while (tminute>60) begin
    thour = thour + 1;
    tminute = tminute - 60;
  end;
  if (thour>23) then begin
    thour = thour - 24;
    dat.day = dat.day + 1;
  end;
  
  tim.hour = thour;
  tim.minute = tminute;
  tim.second = tsecond;
  return;
end;

global
function val DurationToVal(Duration adur)
begin
  val res,t;

  res = adur.hour;
  t = adur.minute;
  res = res + t/60;
  t = adur.second;
  res = res + t/3600;
  res = Round(res,SetRoundModeD(4));
  DurationToVal = res;
  return;
end;

global
function Duration ValToDuration(val v)
begin
  Duration res;
  val t;

  res.hour = v;
  t = v - res.hour;
  res.minute = t*60;
  t = v*3600 - res.hour*3600 - res.minute*60;
  res.second = t;
  ValToDuration = res;
  return;
end;

global
function Duration MultiplyDuration(Duration dd,val q)
begin
  Duration res;
  
  res = ValToDuration(DurationToVal(dd)*q);
  MultiplyDuration = res;
  return;
end;

global
procedure DivPIFactor(val a,val b,var val c)
BEGIN
  val factor;

  if (a==blankval) then begin
    c = blankval;
    goto LDivPIFactor;
  end;
  if (b==0) then begin
    factor = 1;
  end else begin
    factor = b;
  end;  
  c = a/factor;
LDivPIFactor:;
  RETURN;
END;

global
function LongInt DateTimeDiffInSeconds(Date d1,Time t1,Date d2,Time t2)
begin
  LongInt dsecs,msecs,res;

  if (d1!=d2) then begin
    dsecs = DateDiff(d1,d2) * 24 * 3600;
    msecs = (TimeToSeconds2(TimeDiff("00:00:00",t2))+TimeToSeconds2(TimeDiff(t1,"24:00:00")));
    res = dsecs - msecs;
  end else begin
    res = TimeDiffInSeconds(t1,t2);
  end;
  DateTimeDiffInSeconds = res;
  return;
end;
