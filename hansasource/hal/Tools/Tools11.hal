external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure M4PadString(string,Integer,string,Boolean,var string);

global
procedure NextOfficialSerNr(string filename,LongInt sernr,Date td,string langcode,var string offserno)
BEGIN
  record IVOfficialSerBlock IVOSr;
  record IVVc IVr;
  string 255 oldser;
  string 255 tmpoffserno;
  
  offserno = "";
  BlockLoad(IVOSr);
  if (filename=="IVVc") then begin
    if (nonblank(IVOSr.From)) then begin
      IVr.SerNr = 999999999;
      if (ReadLastMain(IVr,1,false)) then begin
        oldser = IVr.OfficialSerNr;
        if (blank(oldser)) then begin
          offserno = IVOSr.From;
          goto LNextOfficialSerNr;
        end;
        if (IVOSr.From>oldser) then begin
          oldser = IVOSr.From;
        end;  
        offserno = NextStrNumber(oldser,true); 
        tmpoffserno = offserno;
        if (len(tmpoffserno)<len(IVOSr.To)) then begin
          M4PadString(tmpoffserno,len(IVOSr.To),"0",true,tmpoffserno);  
        end;
        if (tmpoffserno>IVOSr.To) then begin
          offserno = "";
        end;  
      end;
    end;
  end;
LNextOfficialSerNr:;  
  RETURN;
END;

global
function Boolean RecordSupportExists(string suppfnr,string fnr,LongInt sernr)
BEGIN
  Boolean res;
  record ARVc ARr;
  record APVc APr;
  
  if (fnr=="IVVc") then begin
    ARr.InvoiceNr = sernr;
    if (ReadFirstMain(ARr,1,true)) then begin res = true; end;
  end;
  if (fnr=="VIVc") then begin
    APr.SerNr = sernr;
    if (ReadFirstMain(APr,1,true)) then begin res = true; end;
  end;
  if (fnr=="TRVc") then begin
    if (suppfnr=="IVVc") then begin
      ARr.InvoiceNr = sernr;
      if (ReadFirstMain(ARr,1,true)) then begin res = true; end;
    end;
    if (suppfnr=="VIVc") then begin
      APr.SerNr = sernr;
      if (ReadFirstMain(APr,1,true)) then begin res = true; end;
    end;
  end;
  RecordSupportExists = res;
  RETURN;
END;

function Boolean RecordIsLockedForPeriod(string reg,Date td,Integer action,Boolean tres,boolean otherf)
begin
  Boolean res;
  Integer i,rwcnt;
  record LockExceptBlock DBbl;
  row LockExceptBlock DBrw;
  Boolean unlockf;
  
  res = tres;
  if (res) then begin
    switch (reg) begin
      case "TRVc": if (UserCanAction("LockIgnoreTR",false)) then begin unlockf = true; end;
      case "VIVc": if (UserCanAction("LockIgnoreVI",false)) then begin unlockf = true; end;
      case "IVVc": if (UserCanAction("LockIgnoreIV",false)) then begin unlockf = true; end;
      case "ActVc": if (UserCanAction("LockIgnoreAct",false)) then begin unlockf = true; end;
      otherwise
        if (UserCanAction("LockIgnoreOther",false)) then begin unlockf = true; end;
    end;
    if (unlockf) then begin//if we want to unlock and we have access rights or we just want to lock.
      BlockLoad(DBbl);
      rwcnt = MatRowCnt(DBbl);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(DBbl,i,DBrw);
        if ((DBrw.Register=="All" or reg==DBrw.Register or (otherf and DBrw.Register=="Other")) and DateInRange(td,DBrw.StartDate,DBrw.EndDate)) then begin
          if (action==DBrw.Action) then begin
            res = false;
          end;
        end;
      end;
    end;
  end;
  
  RecordIsLockedForPeriod = res;
  return;
end;

global
function Boolean DateLocked(Date dp,string fnr)
BEGIN
  Boolean res;
  record DBLockBlock DBLockRec;
  Boolean otherf;
  
  BlockLoad(DBLockRec);
  if (fnr=="IVVc") then begin
    if (nonblankdate(DBLockRec.SLLock)) then begin
      if (dp<=DBLockRec.SLLock) then begin res = true; end;
    end;  
  end;
  if (fnr=="VATIVVc") then begin
    if (nonblankdate(DBLockRec.SLLock)) then begin
      if (dp<=DBLockRec.SLLock) then begin res = true; end;
    end;  
  end;
  if (fnr=="VIVc") then begin
    if (nonblankdate(DBLockRec.PLLock)) then begin
      if (dp<=DBLockRec.PLLock) then begin res = true; end;
    end;  
  end;
  if (fnr=="VATVIVc") then begin
    if (nonblankdate(DBLockRec.PLLock)) then begin
      if (dp<=DBLockRec.PLLock) then begin res = true; end;
    end;  
  end;
  if (fnr=="ActVc") then begin
    if (nonblankdate(DBLockRec.ActLock)) then begin
      if (dp<=DBLockRec.ActLock) then begin res = true; end;
    end;  
  end;
  if ((fnr=="IPVc") or
      (fnr=="OPVc") or
      (fnr=="SDVc") or
      (fnr=="SHVc") or
      (fnr=="PUVc") or
      (fnr=="StockMovVc") or
      (fnr=="ProdVc") or
      (fnr=="ExpVc") or
      (fnr=="PPVc") or
      (fnr=="CLInVc") or
      (fnr=="CLOutVc") or
      (fnr=="OwnCheckVc") or
      (fnr=="CheckVc") or
      (fnr=="ChqDepVc") or
      (fnr=="IntIVVc")) then begin
      otherf = true;
      if (nonblankdate(DBLockRec.OtherLock)) then begin
        if (dp<=DBLockRec.OtherLock) then begin res = true; end;
      end;  
  end;
  if ((fnr=="FBVc") or
      (fnr=="SMVc") or
      (fnr=="TRVc")) then begin
      if (nonblankdate(DBLockRec.TRLock)) then begin
        if (dp<=DBLockRec.TRLock) then begin res = true; end;
      end;  
  end;

  res = RecordIsLockedForPeriod(fnr,dp,0,res,otherf);

  DateLocked = res;
  RETURN;
END;

global
function Boolean DateWarned(Date dp,string fnr)
BEGIN
  Boolean res;
  record DBLockBlock DBLockRec;
  Boolean otherf;

  BlockLoad(DBLockRec);
  if (fnr=="IVVc") then begin
    if (nonblankdate(DBLockRec.SLWarn)) then begin
      if (dp<=DBLockRec.SLWarn) then begin res = true; end;
    end;
  end;
  if (fnr=="VIVc") then begin
    if (nonblankdate(DBLockRec.PLWarn)) then begin
      if (dp<=DBLockRec.PLWarn) then begin res = true; end;
    end;
  end;
  if (fnr=="ActVc") then begin
    if (nonblankdate(DBLockRec.ActWarn)) then begin
      if (dp<=DBLockRec.ActWarn) then begin res = true; end;
    end;
  end;
  if ((fnr=="AT2WrofVc") or
      (fnr=="CLOutVc") or
      (fnr=="CLInVc") or
      (fnr=="ExpVc") or
      (fnr=="IPVc") or
      (fnr=="LateCostVc") or
      (fnr=="OPVc") or
      (fnr=="PPVc") or
      (fnr=="ProdVc") or
      (fnr=="PUVc") or      
      (fnr=="SDVc") or
      (fnr=="SHVc") or
      (fnr=="StockMovVc") or
      (fnr=="IntIVVc")) then begin
        otherf = true;
        if (nonblankdate(DBLockRec.OtherWarn)) then begin
          if (dp<=DBLockRec.OtherWarn) then begin res = true; end;
        end;
  end;
  if ((fnr=="SMVc") or
      (fnr=="TRVc")) then begin
      if (nonblankdate(DBLockRec.TRWarn)) then begin
        if (dp<=DBLockRec.TRWarn) then begin res = true; end;
      end;
  end;

  res = RecordIsLockedForPeriod(fnr,dp,1,res,otherf);

  DateWarned = res;
  RETURN;
END;


global
function Boolean Date2Test2(string fnr,Date dp,string fldname,Integer rownr,Boolean disperrf)
begin
  Boolean res;

  res = true;
  if (blankdate(dp)) then begin
    res = false;
    if (disperrf) then begin
      RecordCheckError(1206,"",rownr,fldname);      
    end;
//    MessageBox(1206,"");
    goto LDate2Test;
  end;

  if (res==false) then begin
    RecordCheckError(1047,"",rownr,fldname);      
//    MessageBox(1047,"");
    goto LDate2Test;
  end;
  if (
      (fnr=="BuyBackVc") or
      (fnr=="CLInVc") or
      (fnr=="CLOutVc") or
      (fnr=="ExpVc") or
      (fnr=="IPVc") or
      (fnr=="IVVc") or
      (fnr=="LateCostVc") or
      (fnr=="PPVc") or
      (fnr=="PUVc") or
      (fnr=="OPVc") or
      (fnr=="ProdVc") or
      (fnr=="SDVc") or
      (fnr=="SRVc") or
      (fnr=="SHVc") or
      (fnr=="StockMovVc") or
      (fnr=="VATIVVc") or
      (fnr=="VATVIVc") or
      (fnr=="VIVc") or
      (fnr=="OwnCheckVc") or
      (fnr=="CheckVc") or
      (fnr=="ChqDepVc") or
      (fnr=="LeaveApplicationVc") or
      (fnr=="LeaveTransferVc") or
      (fnr=="ActVc") or
      (fnr=="IntIVVc")
      ) then begin
      if (DateLocked(dp,fnr)) then begin
        RecordCheckError(1046,"",rownr,fldname);      
//        MessageBox(1046,"");
        res = false;
        goto LDate2Test;
      end;
  end;
LDate2Test:;
  Date2Test2 = res;
  RETURN;
END;

global
function Boolean Date2Test(string fnr,Date dp,string fldname,Integer rownr)
begin
  Date2Test = Date2Test2(fnr,dp,fldname,rownr,true);
  return;
end;


function Integer VerifyVATNrParaguay(String vatnr)
begin
  Integer Control;
  Integer Sum,j,a,b,long;
  String 20 NString,CString;
  Integer res;
  
  long = len(vatnr);
  res = 0;
  for (j=0;j<long ;j=j+1) begin 
    if j < 4 then begin
      if not ((asc(mid(vatnr,j,1)) >= 65 and asc(mid(vatnr,j,1)) <= 90) or 
              (asc(mid(vatnr,j,1)) >= 97 and asc(mid(vatnr,j,1)) <= 122)) then begin
        res = 1708;
        goto L99;
      end;
    end;
    if (j > 3) and (j < 10) then begin
      if not (asc(mid(vatnr,j,1)) >= 48 and asc(mid(vatnr,j,1)) <= 57)then begin
        res = 1708;
        goto L99;
      end;
    end;
    if (j == 10) then begin
      if not ((asc(mid(vatnr,j,1)) >= 65 and asc(mid(vatnr,j,1)) <= 90) or 
              (asc(mid(vatnr,j,1)) >= 97 and asc(mid(vatnr,j,1)) <= 122) or
              (asc(mid(vatnr,j,1)) >= 48 and asc(mid(vatnr,j,1)) <= 57)) then begin
        res = 1708;
        goto L99;
      end;
    end;
    if (j > 10) then begin
      res = 1708;
      goto L99;
    end;
    if not (long == 11) then begin
      res = 1708;
      goto L99;
    end;
  end;  
L99:; 
  VerifyVATNrParaguay = res;
  return; 
end;

function Integer VerifyVATNrArgentina(String vatnr)
begin
  Integer res;
  Integer Control;
  String 20 NString,CString;
  Integer Sum,j,a,b,long;
  
  res = 1708;
  if (true) then begin
    CString = "5432765432";    // given control string
    NString = left(vatnr,2) & mid(vatnr,3,8); // remove 
    Control = StringToVal(right(vatnr,1),M4Val);
    Sum = 0;
    for (j=0;j<10;j=j+1) begin 
      a = StringToInt(mid(CString,j,1)); 
      b = StringToInt(mid(NString,j,1));
      Sum = Sum + (a * b);
    end;
     // Modulo 11
    while (Sum > 0) begin
      Sum = Sum - 11;
    end;
    Sum = -1 * Sum;
    if (Sum == Control) then begin
      res = 0;
    end else begin
      res = 1708;
    end;
  end;
  VerifyVATNrArgentina = res;
  return; 
end;

function Integer VerifyVATNr(String vatnr,Integer VATLaw,Integer CustType)
Begin
  Integer res;

  res = 0;
  switch (VATLaw) begin
     case vatArgentinean:
       if (CustType==0) then begin
         res = VerifyVATNrArgentina(vatnr);
       end;
     case vatParaguayan://vatParaguayan
       if (CustType==0) then begin
         res = VerifyVATNrParaguay(vatnr);
       end;
   end;   
   VerifyVATNr = res;
   return;
end;

function Integer MaskOK(string vatnr,string mask,Integer VATLaw,Integer CustType)
BEGIN
  Integer vatlen,i;
  Integer res;

  res = 1705;
  vatlen = len(vatnr);
  if (vatlen!=len(mask)) then begin goto LMaskOK; end;
  for (i=1;i<=vatlen;i=i+1) begin
    switch (asc(Mid(mask,i,1))) begin
      case 35:
        if ((asc(Mid(vatnr,i,1))<asc("0")) or (asc(Mid(vatnr,i,1)))>asc("9")) then begin
          goto LMaskOK;
        end;
      case 63:
      case 94:
//        if (Mid(vatnr,i,1)!=UpperCase(Mid(vatnr,i,1))) then begin, hal does not recognize small chars
        if (asc(Mid(vatnr,i,1))<=64 or asc(Mid(vatnr,i,1))>=97) then begin
          goto LMaskOK;
        end;
      otherwise
        if (Mid(mask,i,1)!=Mid(vatnr,i,1)) then begin
          goto LMaskOK;
        end;  
    end;
  end;
  res = VerifyVATNr(vatnr,VATLaw,CustType);
  
LMaskOK:;
  MaskOK = res;
  RETURN;
END;

global
function Integer CheckVATNrMask(string vatnr,string custcountry,Integer CustType,var string properformat)
begin
  Integer res;
  record VATMaskBlock VATMb;
  row VATMaskBlock VATMbrw;
  Integer rwcnt,i;
  string 20 country;
  record CYBlock CYb;

  res = 0; // You can't have fail by default, what if setting is blank.... and what if setting is filled by not for this country...
  country = custcountry;
  if (blank(country)) then begin
    BlockLoad(CYb);
    country = CYb.CountryCode;
  end;
  BlockLoad(VATMb);
  rwcnt = MatRowCnt(VATMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(VATMb,i,VATMbrw);
    if (country==VATMbrw.CountryCode) then begin
      if ((nonblank(VATMbrw.VATMask)) and (nonblank(vatnr))) then begin
        if (len(properformat) + len(VATMbrw.VATMask) + 2 <= 100) then begin
          if (nonblank(properformat)) then begin
            properformat = properformat & ", ";
          end;
          properformat = properformat & VATMbrw.VATMask;
        end;
        res = MaskOK(vatnr,VATMbrw.VATMask,VATMbrw.VATLaw,CustType);
        if (res==0) then begin
          goto LCheckVATNrMask;
        end;
      end;
    end;
  end;
LCheckVATNrMask:;
  CheckVATNrMask = res;
  return;
end;

global
function Boolean CurncyCodeRegistered(string curncycode)
begin
  record CurncyCodeVc CCr;
  Boolean res;

  if (blank(curncycode)) then begin
    res = true;
    goto LCurncyCodeRegistered;
  end;
  if (nonblank(curncycode)) then begin
    CCr.CurncyCode = curncycode;
    if (ReadFirstMain(CCr,1,true)) begin
      if (CCr.CurncyCode==curncycode) then begin
        res = true;
      end;  
    end;
  end;
LCurncyCodeRegistered:;
  CurncyCodeRegistered = res;
  return;
end;

global
function Boolean VATAccIsClosed(string VATCode,var string account,Integer ac)
begin
  Boolean res;
  record AccVc Accr;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock vcrw;
  Integer rwcnt,i;
 
  account = "";
  BlockLoad(VATCodeRec);
  rwcnt = MatRowCnt(VATCodeRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATCodeRec,i,vcrw);
    if (VATCode==vcrw.VATCode) then begin
      switch (ac) begin
        case 1:
          Accr.AccNumber = vcrw.SalesVATAcc;
        case 2:
          Accr.AccNumber = vcrw.PurchVATAcc;
      end;
      if (ReadFirstMain(Accr,1,true)) then begin
        if (Accr.blockedFlag!=0) then begin
          account = Accr.AccNumber;
          res = true;
        end;  
      end;  
      goto LVATAccIsClosed;            
    end;
  end;  
LVATAccIsClosed:;
  VATAccIsClosed = res;
  RETURN;
END;

global
function Boolean SerialNrEverinStock(string item,string ser)
begin
  record SerBalVc SBr;
  Boolean res;
  
  SBr.Item = item;
  SBr.Serial = ser;
  if (ReadFirstKey("ItemSerial",SBr,2,true)) then begin
    res = true; 
  end;
  SerialNrEverinStock = res;
  return;
end;

global
function Boolean SerialNrAvail(string item,string ser,string location,val q)
BEGIN
  record SerBalVc SBr;
  record MainStockBlock MainStockRec;
  Boolean res;
  
  SBr.Item = item;
  SBr.Serial = ser;
  SBr.Location = location;
  if (blank(location)) then begin
    BlockLoad(MainStockRec);
    SBr.Location = MainStockRec.MainStock;
  end;
  if (ReadFirstMain(SBr,3,true)) then begin
    if (SBr.Quant>=q) then begin 
      res = true; 
    end;
  end;
  SerialNrAvail = res;
  RETURN;
END;

global
function Boolean SerialNrAvail2(string item,string ser,val q)
BEGIN
  record SerBalVc SBr;
  record MainStockBlock MainStockRec;
  Boolean res,found;
  val instock;
  
  found = true;
  SBr.Item = item;
  SBr.Serial = ser;
  SBr.Location = "";
  while (LoopKey("ItemSerial",SBr,2,found)) begin
    if (SBr.Item!=item) then begin
      found = false;
    end;
    if (SBr.Serial!=ser) then begin
      found = false;
    end;
    if (found) then begin
      instock = instock + SBr.Quant;
      if (instock>=q) then begin 
        found = false;
        res = true; 
      end;
    end;
  end;  
  SerialNrAvail2 = res;
  RETURN;
END;

global
function Boolean IsVATCodeDefined(string vatc)
BEGIN
  Boolean res;
  Integer nvt,i;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock vcrw;
 
  BlockLoad(VATCodeRec);
  if (blank(vatc)) then begin goto LIsVATCodeDefined; end;
  nvt = MatRowCnt(VATCodeRec);
  for (i=0;i<nvt;i=i+1) begin
    MatRowGet(VATCodeRec,i,vcrw);
    if (vcrw.VATCode==vatc) then begin
      res = true;
      goto LIsVATCodeDefined;
    end;
  end;
LIsVATCodeDefined:;
  IsVATCodeDefined = res;
  RETURN;
END;

procedure AbsM4Val(val a,var val c)
BEGIN

  c = a;
  if (c<0) then begin
    c = -c;
  end;
  RETURN;
END;

global
function Boolean CorrectM4ValProc(val proc)
BEGIN
  val temp;
  Boolean res;
  
  res = true;
  if (proc>0) then begin
    if (temp>100) then begin
      res = false;
    end;  
  end else begin
  end;
/*  
  AbsM4Val(proc,temp);
  if (temp>100) then begin
    res = false;
  end;  
*/  
  CorrectM4ValProc = res;
  RETURN;
END;

global
function Boolean SLAccTest(string accnumber,Integer slacc)
BEGIN
  Boolean res;
  Integer i,j,rwcnt;
  row SLAccBlock slrw;
  row SLAccBlock sl2rw;
  record SLAccBlock SLAccRec;
  record AccBlock ARAccRec;
  record APAccBlock APAccRec;

  BlockLoad(ARAccRec);
  if (blank(accnumber)) then begin goto LSLAccTest; end;
  BlockLoad(SLAccRec);
  BlockLoad(APAccRec);
  rwcnt = MatRowCnt(SLAccRec);
  if (rwcnt==0) then begin res = false; end;
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(SLAccRec,i,slrw);
    if (accnumber==slrw.AccNumber) then begin
      switch (slrw.stp) begin
        case 1://SLAR
          switch (slacc) begin
            case 2:
              res = false;
              goto LSLAccTestSKIPROW;
            case 0:
              if (ARAccRec.SLAccTest!=0) then begin res = true; end;
            case 1:
              if (ARAccRec.SLAccTest!=0) then begin res = true; end;
          end;                  
        case 2://SLAP
          switch (slacc) begin
            case 1:
              res = false;
              goto LSLAccTestSKIPROW;
            case 0:
              if (APAccRec.SLAccTest!=0) then begin res = true; end;
            case 2:
              if (APAccRec.SLAccTest!=0) then begin res = true; end;
          end;          
      end;
      goto LSLAccTest;
LSLAccTestSKIPROW:;      
    end;
  end;  
LSLAccTest:;
  SLAccTest = res;
  RETURN;
END;

global
function Boolean IsControlAccount(string accnumber,Boolean sales,Boolean default)
BEGIN
  Boolean res; 
  record AccBlock ARAccRec;
  record APAccBlock APAccRec;

  res = default;
  if (nonblank(accnumber)) then begin
    if (sales) then begin
      BlockLoad(ARAccRec);
      if (ARAccRec.SLAccTest!=0) then begin
        res = SLAccTest(accnumber,1);
      end;  
    end else begin
      BlockLoad(APAccRec);
      if (APAccRec.SLAccTest!=0) then begin
        res = SLAccTest(accnumber,2);
      end;  
    end;
  end;
  IsControlAccount = res;
  RETURN;
END;

global
procedure ConvertSalesAcc(var string revacc,Integer aexport)
BEGIN
  record SalesCodeBlock SalesCodeRec;
  row SalesCodeBlock scrw;
  Integer rwcnt,i;
  
  BlockLoad(SalesCodeRec);
  rwcnt = MatRowCnt(SalesCodeRec);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(SalesCodeRec,i,scrw);
    if (revacc==scrw.Code) then begin
      switch (aexport) begin
        case 4: revacc = scrw.SalesAccExp;
        case 3: revacc = scrw.SalesAccEU;
        case 2: revacc = scrw.SalesAccExp;
        case 1: revacc = scrw.SalesAccEU;
        otherwise revacc = scrw.SalesAccDom;
      end;
    end;
  end;
  RETURN;
END;

function
Integer CheckCashSerNrTest(row PMBlock pmrw,LongInt sernr,Boolean clinf,var Boolean gentrans,string vname)
BEGIN
  record IVVc IVr;
  record IPVc IPr;
  record VIVc VIr;
  record OPVc OPr;
  record PPVc PPr;
  record CLInVc CLInr;
  record CLOutVc CLOr;
  Integer res;
  LongInt serstart,serend;

  gentrans = true;
  if (sernr==-1) then begin
    res = 0;
    goto LCheckCashSerNrTest;
  end;
  if (clinf) then begin
    serstart = pmrw.TSerStartIn;
    serend = pmrw.TSerEndIn;
  end else begin
    serstart = pmrw.TSerStartOut;
    serend = pmrw.TSerEndOut;
  end;
  if ((sernr>=serstart) and (sernr<=serend)) then begin
     if (pmrw.DonotGenTrans==1) then begin gentrans = false; end;
     res = 0;
  end else begin
     res = 1557;
     goto LCheckCashSerNrTest;
  end;
  if (clinf) then begin
    if (vname!="CLInVc") then begin
      CLInr.SerNr = sernr;
      if (ReadFirstMain(CLInr,1,true)) then begin
        res = 1547;
        goto LCheckCashSerNrTest;
      end;
    end;
    if (vname!="IVVc") then begin
      IVr.SerNr = sernr;
      if (ReadFirstMain(IVr,1,true)) then begin
        res = 1547;
        goto LCheckCashSerNrTest;
      end;
    end;
    if (vname!="IPVc") then begin
      IPr.SerNr = sernr;
      if (ReadFirstMain(IPr,1,true)) then begin
        res = 1547;
        goto LCheckCashSerNrTest;
      end;
    end;
  end else begin  
    if (vname!="CLOutVc") then begin
      CLOr.SerNr = sernr;
      if (ReadFirstMain(CLOr,1,true)) then begin
        res = 1547;
        goto LCheckCashSerNrTest;
      end;
    end;
    if (vname!="VIVc") then begin
      VIr.SerNr = sernr;
      if (ReadFirstMain(VIr,1,true)) then begin
        res = 1547;
        goto LCheckCashSerNrTest;
      end;
    end;
    if (vname!="OPVc") then begin
      OPr.SerNr = sernr;
      if (ReadFirstMain(OPr,1,true)) then begin
        res = 1547;
        goto LCheckCashSerNrTest;
      end;
    end;
    if (vname!="PPVc") then begin
      PPr.SerNr = sernr;
      if (ReadFirstMain(PPr,1,true)) then begin
        res = 1547;
        goto LCheckCashSerNrTest;
      end;
    end;
  end;  
LCheckCashSerNrTest:;
  CheckCashSerNrTest = res;
  RETURN;
END;

function
Integer CashSerNrTest(val sum,string paydeal,string vname,LongInt sernr,var Boolean gentrans)
BEGIN
  record PMBlock PMRec;
  row PMBlock pmrw;
  Integer rwcnt,i;
  Integer res;
  Integer errstrno;
  val sentsum;
  Boolean clinf;

  res = 1;
  clinf = true;
  sentsum = sum;
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (paydeal==pmrw.Code) then begin
      if ((vname=="IVVc") or (vname=="IPVc") or (vname=="CLInVc")) then begin clinf = true; end;
      if ((vname=="VIVc") or (vname=="OPVc") or (vname=="CLOutVc") or (vname=="PPVc")) then begin clinf = false; end;
      if ((pmrw.TSerStartIn!=-1) and clinf) then begin
         res = 0;
         errstrno = CheckCashSerNrTest(pmrw,sernr,clinf,gentrans,vname);
         if (errstrno!=0) then begin
           if (vname=="IVVc") then begin 
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           if (vname=="VIVc") then begin 
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           if (vname=="OPVc") then begin 
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           if (vname=="IPVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           if (vname=="ExpVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           if (vname=="CLInVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           if (vname=="CLOutVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           if (vname=="PPVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;  
           goto LCashSerNrTest;
         end;
      end;
     
      if ((pmrw.TSerStartOut!=-1) and (clinf==false)) then begin
         res = 0;
         errstrno = CheckCashSerNrTest(pmrw,sernr,clinf,gentrans,vname);
         if (errstrno!=0) then begin
           if (vname=="IVVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           if (vname=="VIVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           if (vname=="OPVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           if (vname=="IPVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           if (vname=="ExpVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           if (vname=="CLInVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           if (vname=="CLOutVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           if (vname=="PPVc") then begin  
             RecordCheckError(errstrno,"",-1,"SerNr");      
             res = -1;           
           end;
           goto LCashSerNrTest;
         end;
      end;
      if (clinf and (pmrw.TSerStartIn==-1)) then begin 
        res = 2;
        goto LCashSerNrTest;        
      end;
      if ((clinf==false) and (pmrw.TSerStartOut==-1)) then begin 
        res = 2;
        goto LCashSerNrTest;        
      end;
      res = 1;
      goto LCashSerNrTest;
    end;
  end;
LCashSerNrTest:;
  CashSerNrTest = res;
  RETURN;
END;

global
function Integer CashSerNumberTest(string paydeal,val sum,string fnrstr,LongInt sernr,var Boolean gentransp)
BEGIN
  record MainCLBlock MainCLRec;
  record PDVc PDr;
  Integer res;
       
  BlockLoad(MainCLRec);
  if (MainCLRec.CommonNoSer!=0) then begin
    PDr.Code = paydeal;
    if (ReadFirstMain(PDr,1,true)==false) then begin
      res = CashSerNrTest(sum,paydeal,fnrstr,sernr,gentransp);
      if (res<0) then begin
        res = 99;
      end;
      if (res==1) then begin
        res = 12;
      end;
      if (res==2) then begin
        res = 0;
      end;
    end;
  end;
  CashSerNumberTest = res;
  RETURN;
END;

global
function Boolean ExpandStructItem(string ArtCode,string recepy,val orqty,var record SHVc SHp)
BEGIN
  Boolean res;
  row SHVc SHrw;
  Integer i;
  record RecVc Recr;
  row RecVc Recrw;
  Boolean found;
  Integer recrwcnt,shrows;
  record INVc INr;
  
  if (nonblank(recepy)) then begin
    ReadFirstItem(ArtCode,INr,true,false);
    if (INr.ItemType!=kItemTypeStructured) then begin //we have kInvoiceRowTypeStructuredItemComponent types with recepy filled in
      goto LExpandStructItem;
    end;
    Recr.Code = recepy;
    found = ReadFirstMain(Recr,1,true);
    if (found==false) then begin
      goto LExpandStructItem;
    end;  
    RecordNew(SHp);//if u have 2 struct items, A and B, and A has more componnents than B ....
    shrows = 0;
    recrwcnt = MatRowCnt(Recr);
    for (i=0;i<recrwcnt;i=i+1) begin
      MatRowGet(Recr,i,Recrw);
      if (Recrw.InQty>0) then begin
        ClearRow(SHp,SHrw,1);
        SHrw.ArtCode = Recrw.Item;
        SHrw.OrdRow = -1;
        SHrw.Spec = Recrw.Comment;
        SHrw.SerialNr = "";
        SHrw.Ordered = orqty*Recrw.InQty;
        SHrw.Ship = orqty*Recrw.InQty;
        SHrw.InStock = blankval;
        MatRowPut(SHp,shrows,SHrw);
        //## This assumes that the items in the recepy are stocked items!!!
        shrows = shrows + 1;
      end;
    end;
    if (shrows>0) then begin
      res = true;
    end;  
  end;
LExpandStructItem:;
  ExpandStructItem = res;
  RETURN;
END;

global
function Integer SerialNrOnThisIV(record IVVc IVp,string ArtCode,string SerialNr)
BEGIN
  row IVVc IVrw;
  Integer rwcnt,i;
  val qty;

  qty = 0;
  rwcnt = MatRowCnt(IVp);
  for (i = 0 ; i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.ArtCode==ArtCode) and (IVrw.SerialNr==SerialNr) then begin
      qty = qty + IVrw.Quant;
    end;  
  end;
  SerialNrOnThisIV = qty;//ValToInt(qty)
  RETURN;
END;

global
function Boolean GetDeliveredQty(LongInt ordernr,LongInt ordrow,val ivquantp,var val quantp,record MainStockBlock MainStockRecp)
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  Boolean res;
  
  quantp = blankval;
  ORr.SerNr = ordernr;
  if (ReadFirstMain(ORr,1,true)) then begin
    MatRowGet(ORr,ordrow,ORrw);
    quantp = ORrw.Shipd2;
    if (ORr.InvBeforeShip!=0) then begin
      if (quantp==blankval) then begin quantp = ORrw.Invd; end;
    end;
    res = true;
  end;      
  GetDeliveredQty = res;
  RETURN;
END;

global
function val TimeToVal2(Time atim)
BEGIN
  val resv,t;

  resv = (GetHour(atim));
  t = GetMinute(atim);
  resv = resv + t/60;
  resv = Round(resv,SetRoundModeD(2));
  TimeToVal2 = resv;
  RETURN;
END;

global
function val TimeToVal3(Time atim)
BEGIN
  val resv,divv;
  LongInt a,b;

  a = 3600;
  divv = 60;
  b = 60;
  resv = (GetHour(atim)*a) + (GetMinute(atim)*b) + GetSecond(atim);
  resv = resv / divv;
  resv = Round(resv,SetRoundModeD(2));
  TimeToVal3 = resv;
  RETURN;
END;

global
function Boolean DisallowFutureDate(Date dp)
begin
  Boolean res;
  record DBLockBlock DBLb;
  
  BlockLoad(DBLb);
  if (DBLb.DisallowFutureDate!=0) then begin
    res = (dp>CurrentDate);
  end;
  DisallowFutureDate = res;
  return;
end;

global
function Boolean DisallowFutureDateCheck(Boolean disperrf,Date dp,string fldname,Integer rownr)
begin
  Boolean res;

  res = DisallowFutureDate(dp);
  if (res and disperrf and Importing==false) then begin
    RecordCheckError(22000,"",rownr,fldname);      
  end;
  DisallowFutureDateCheck = res;
  return;
end;

global
procedure WarnFutureDate(Boolean disperrf,Date dp)
begin
  Boolean res;
  record DBLockBlock DBLb;
  
  BlockLoad(DBLb);
  if (DBLb.WarnFutureDate!=0) then begin
    res = (dp>CurrentDate);
    if (res and disperrf and Importing==false) then begin
      MessageBox(21999,"");
    end;
  end;
  return;
end;

global
function Boolean TestWarnFutureDate(Boolean disperrf,Date dp)
begin
  Boolean res;
  record DBLockBlock DBLb;
  
  BlockLoad(DBLb);
  if (DBLb.WarnFutureDate!=0) then begin
    if (dp>CurrentDate and disperrf and Importing==false) then begin
      res = true;
    end;
  end;
  TestWarnFutureDate = res;
  return;
end;

function Boolean ValidateBrazilianCompanyVATNr(string vatnr,string custcountry)
begin
  Boolean res;
  string 255 stripvatnr,numbers,digits;
  Integer size,i,sum,pos,result;
  res = true;
  
  stripvatnr = StripNonDigits(vatnr);
  if (len(stripvatnr)!=14) then begin
    res = false;
    goto LValidateBrazilianCompanyVATNr;
  end;
  switch (stripvatnr) begin
    case "00000000000000":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "11111111111111":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "22222222222222":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "33333333333333":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "44444444444444":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "55555555555555":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "66666666666666":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "77777777777777":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "88888888888888":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
    case "99999999999999":
      res = false;
      goto LValidateBrazilianCompanyVATNr;
  end;
  size = len(stripvatnr) - 2;
  numbers = left(stripvatnr,size);
  digits = right(stripvatnr,2);
  sum = 0;
  pos = size - 7;
  for (i=size;i>=1;i=i-1) begin
    sum = sum + StringToInt(Mid(numbers,size-i,1)) * pos;
    pos = pos - 1;
    if (pos<2) then begin
      pos = 9;
    end;
  end;
  if (Mod(sum,11)<2) then begin
    result = 0;
  end else begin
    result = 11 - Mod(sum,11);
  end;
  if (result!=StringToInt(Mid(digits,0,1))) then begin
    res = false;
  end;
  size = size + 1;
  numbers = left(stripvatnr,size);
  sum = 0;
  pos = size - 7;
  for (i=size;i>=1;i=i-1) begin
    sum = sum + StringToInt(Mid(numbers,size-i,1)) * pos;
    pos = pos - 1;
    if (pos<2) then begin
      pos = 9;
    end;
  end;    
  if (Mod(sum,11)<2) then begin
    result = 0;
  end else begin
    result = 11 - Mod(sum,11);
  end;
  if (result != StringToInt(Mid(digits,1,1))) then begin
    res = false;
    goto LValidateBrazilianCompanyVATNr;
  end;
  
LValidateBrazilianCompanyVATNr:;
  ValidateBrazilianCompanyVATNr = res;
  return;
end;

global
function Boolean ValidateBrazilianPersonVATNr(string vatnr,string custcountry)
begin
  Boolean res;
  string 255 stripvatnr;
  Integer add,rev,rev1,i;
  res = true;
  
  stripvatnr = StripNonDigits(vatnr);
  if (len(stripvatnr)!=11) then begin
    res = false;
    goto LValidateBrazilianPersonVATNr;
  end;
  switch (stripvatnr) begin
    case "00000000000":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "11111111111":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "22222222222":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "33333333333":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "44444444444":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "55555555555":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "66666666666":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "77777777777":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "88888888888":
      res = false;
      goto LValidateBrazilianPersonVATNr;
    case "99999999999":
      res = false;
      goto LValidateBrazilianPersonVATNr;
  end;
  add = 0;
  for (i=0;i<9;i=i+1) begin
    add = add + StringToInt(Mid(stripvatnr,i,1)) * (10 - i);
  end;
  rev = 11 - Mod(add,11);
  if (rev==10 or rev==11) then begin
    rev = 0;
  end;
  rev1 = StringToInt(Mid(stripvatnr,9,1));
  if (rev!=rev1) then begin
    res = false;
  end;
  
  add = 0;
  for (i=0;i<10;i=i+1) begin
    add = add + StringToInt(Mid(stripvatnr,i,1)) * (11 - i);
  end;
  rev = 11 - Mod(add,11);
  if (rev==10 or rev==11) then begin
    rev = 0;
  end;
  rev1 = StringToInt(Mid(stripvatnr,10,1));
  if (rev!=rev1) then begin
    res = false;
    goto LValidateBrazilianPersonVATNr;
  end;

LValidateBrazilianPersonVATNr:;
  ValidateBrazilianPersonVATNr = res;
  
  return;
end;

global
function Boolean ValidateBrazilianVATNr(string vatnr,string custcountry,Integer CustType)
begin
  Boolean res;
  
  switch (CustType) begin
    case 0:
      res = ValidateBrazilianCompanyVATNr(vatnr,custcountry);
    case 1:
      res = ValidateBrazilianPersonVATNr(vatnr,custcountry);
  end;
  
  ValidateBrazilianVATNr = res;
  return;
end;

function Boolean ValidatePolishCompanyVATNr(string vatnr)
begin
  Boolean res;
  string 255 stripvatnr,numbers,digits;
  Integer size,i,sum,pos,result;
  
  res = true;  
  stripvatnr = StripNonDigits(vatnr);
  if (len(stripvatnr)!=10) then begin
    res = false;
    goto LValidatePolishCompanyVATNr;
  end;
  sum = 0;
  for (i=0;i<len(stripvatnr)-1;i=i+1) begin
    switch (i) begin
      case 0: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 6;
      case 1: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 5;
      case 2: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 7;
      case 3: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 2;
      case 4: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 3;
      case 5: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 4;
      case 6: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 5;
      case 7: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 6;
      case 8: sum = sum + StringToInt(Mid(stripvatnr,i,1)) * 7;
    end;
  end;
  result = Mod(sum,11);
  if (result!= StringToInt(Mid(stripvatnr,9,1))) then begin
    res = false;
    goto LValidatePolishCompanyVATNr;
  end;
  
LValidatePolishCompanyVATNr:;
  ValidatePolishCompanyVATNr = res;
  return;
end;

function Boolean ValidateItalianCompanyVATNr(string vatnr)
begin
  Boolean res;
  string 255 stripvatnr,numbers,digits;
  Integer size,i,sum,pos,result;

  res = true;
/*  
  stripvatnr = StripNonDigits(vatnr);
  if (len(stripvatnr)!=10) then begin
    res = false;
    goto LValidateItalianCompanyVATNr;
  end;
  sum = 0;
  for (i=0;i<9;i=i+2) begin
    sum = sum + StringToInt(Mid(stripvatnr,i,1));
  end;
  
  result = Mod(sum,11);
  if (result!= StringToInt(Mid(stripvatnr,9,1))) then begin
    res = false;
    goto LValidateItalianCompanyVATNr;
  end;
*/  
LValidateItalianCompanyVATNr:;
  ValidateItalianCompanyVATNr = res;
  return;
end;

global
function Boolean ValidateVATNr(string vatnr,string acountry,Integer CustType)
begin
  Boolean res;
  string 255 country;
  
  res = true;
  country = acountry;
  switch (country) begin
    case "":
      if (HasLocalization("POL")) then begin country = "POL"; end;
      if (HasLocalization("ITA")) then begin country = "ITA"; end;
    case "PL": country = "POL";
    case "IT": country = "ITA";
  end;

  switch (country) begin
    case "POL":
      switch (CustType) begin
        case 0:
          res = ValidatePolishCompanyVATNr(vatnr);
      end;
    case "ITA":
      switch (CustType) begin
        case 0:
          res = ValidateItalianCompanyVATNr(vatnr);
      end;
  end;
  
  ValidateVATNr = res;
  return;
end;
