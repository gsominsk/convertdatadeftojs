// Consignment Stock Movement Invoices Remote Tools
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure FindFiscalYear(Date,var Date,var Date);
external function Boolean SerNrTestStockMovInv(LongInt,Date,var Boolean);
external procedure FindNextConsStockMovInvVcOfficialSerialNr(var record StockMovVc,Integer);
external external updating procedure UpdateOffSerNr(LongInt,string,Integer,string,Boolean);
external function string 255 UpdateOfficialSerNrSerie(Integer,Integer,Integer,string,boolean);
external function string 255 GenerateSAFTHash(Integer,string,date,date,time,string,val,string,string);

function longint NextStockMovInvoiceSerNr(record StockMovVc SMp)
begin
  boolean found;
  record StockMovInvSerBlock SMISb;
  row StockMovInvSerBlock SMISrw;
  record StockMovVc SMr;
  longint res;
  integer i,rwcnt;
  
  BlockLoad(SMISb);
  found = true;
  ResetLoop(SMr);
  SMr.InvoiceNr = 9999999999;
  SMr.SerNr = 9999999999;
  if (LoopBackKey("InvoiceNr",SMr,2,true)) then begin
    if (MatRowCnt(SMISb)>0) then begin
      rwcnt = MatRowCnt(SMISb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SMISb,i,SMISrw);
        if (DateInRange(SMp.TransDate,SMISrw.StartDate,SMISrw.EndDate)) then begin
          if (SMr.InvoiceNr==-1) then begin
            res = SMISrw.TSerStart;
          end else begin
            if (SMr.InvoiceNr<SMISrw.TSerEnd) then begin
              res = SMr.InvoiceNr + 1;
            end else begin
              res = -1;
            end;
          end;
          goto LFinish;
        end;
      end;
      res = -1;
    end else begin
      if (SMr.InvoiceNr>0) then begin
        res = SMr.InvoiceNr + 1;
      end else begin
        res = 1;
      end;
    end;
  end else begin
    if (MatRowCnt(SMISb)>0) then begin
      rwcnt = MatRowCnt(SMISb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SMISb,i,SMISrw);
        if (DateInRange(SMp.TransDate,SMISrw.StartDate,SMISrw.EndDate)) then begin
          res = SMISrw.TSerStart;
          goto LFinish;
        end;
      end;
      res = -1;
    end else begin
      res = 1;
    end;
  end;
LFinish:;
  NextStockMovInvoiceSerNr = res;
  return;
end;

function string 255 GetPreviousStockMovInvoiceHash(record StockMovVc curStockMovr)
begin
  record StockMovVc prevStockMovr;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curStockMovr.InvDate,fsd,fed);
  GetLegalInvNrRow(curStockMovr.InvoiceOfficialSerNr,LINrbrw);

//1st invoice in Number series  
  if (curStockMovr.InvoiceOfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
    res = "";
    goto LGetPreviousStockMovInvoiceHash;
  end;
  
//1st invoice in FIscal year  
  ResetLoop(prevStockMovr);
  prevStockMovr.InvDate = curStockMovr.InvDate;
  prevStockMovr.InvRegTime = curStockMovr.InvRegTime;
  if (LoopBackKey("InvDate",prevStockMovr,2,true)) then begin
    if (prevStockMovr.InvoiceNr==curStockMovr.InvoiceNr) then begin
      if (LoopBackKey("InvDate",prevStockMovr,2,true)) then begin
      end;
    end;
    if (prevStockMovr.InvDate<fsd) then begin testf = true; end;
    if (prevStockMovr.InvDate>fed) then begin testf = true; end;
    if (testf) then begin
      res = "";
      goto LGetPreviousStockMovInvoiceHash;
    end;
  end; 
  
  ResetLoop(prevStockMovr);
  prevStockMovr.InvoiceOfficialSerNr = curStockMovr.InvoiceOfficialSerNr;
  if (LoopBackKey("InvoiceOfficialSerNr",prevStockMovr,1,true)) then begin
    if (prevStockMovr.InvoiceNr==curStockMovr.InvoiceNr) then begin
      if (LoopBackKey("InvoiceOfficialSerNr",prevStockMovr,1,true)) then begin
      end;
    end;
    res = prevStockMovr.Hash;
  end;
LGetPreviousStockMovInvoiceHash:;  
  GetPreviousStockMovInvoiceHash = res;
  return;
end;

global
updating procedure RemotePrintStockMovInvoices(var record StockMovVc SMp,var longint errorlongint,var string errormsg,var record RcVc RepSpec)
begin
  boolean res,gentrans;
  record StockMovVc OldSMp;
  record ORVc ORr;
  val orderval;
  
  res = true;
  errorlongint = -1;
  errormsg = "";
  
  res = ReadFirstMain(SMp,1,true);
  if (IsRecordLocked(SMp)) then begin
    errorlongint = 15057;
    res = false;
  end;
  if (res) then begin 
    RecordCopy(OldSMp,SMp);
    SMp.InvoiceNr = NextStockMovInvoiceSerNr(SMp);
    if (SMp.InvoiceNr>0) then begin
      res = SerNrTestStockMovInv(SMp.InvoiceNr,CurrentDate,gentrans);
      if (res==false) then begin 
        errorlongint = 1557;
        goto LRemotePrintStockMovInvoices;
      end; 
    end else begin
      errorlongint = 1557;
      res = false;
      goto LRemotePrintStockMovInvoices;
    end;
  end;
  if (res) then begin 
    SMp.InvDate = CurrentDate;
    SMp.InvRegTime = CurrentTime;
    if (HasLocalization("PRT")) then begin
      FindNextConsStockMovInvVcOfficialSerialNr(SMp,-2);
      if (blank(SMp.InvoiceOfficialSerNr)) then begin
        res = false;
        errorlongint = 39190;
        goto LRemotePrintStockMovInvoices;
      end;
      if (blank(SMp.InvOfficialSerNrSerie)) then begin           
        SMp.InvOfficialSerNrSerie = UpdateOfficialSerNrSerie(Rs_insert,1,1,SMp.InvoiceOfficialSerNr,true);      
      end;
      if (blank(SMp.InvOfficialSerNrSerie)) then begin 
        errorlongint = 39196;
        res = false;
        goto LRemotePrintStockMovInvoices;
      end;
      if (SMp.OrderNr!=-1) then begin 
        ORr.SerNr = SMp.OrderNr;
        res = ReadFirstMain(ORr,1,true);
        if (res) then begin
          orderval = ORr.Sum4;
        end;
      end else begin
        errorlongint = 39197;
        res = false;
        goto LRemotePrintStockMovInvoices;        
      end; 
      SMp.InvoiceHash = GenerateSAFTHash(SMp.StockMovType,"ConsStockMovInvVc",SMp.InvDate,SMp.InvDate,SMp.InvRegTime,
                                         SMp.InvoiceOfficialSerNr,orderval,GetPreviousStockMovInvoiceHash(SMp),"");
      if (blank(SMp.InvoiceHash)) then begin 
        res = false;
        errorlongint = 39195;
        goto LRemotePrintStockMovInvoices;
      end; 
      SMp.InvHashKeyVersion = CryptSAFTHashKeyVersion;
    end;
  end;
  if (res) then begin 
    if (RecordUpdate(OldSMp,SMp,false)==0) then begin
      if (HasLocalization("PRT")) then begin
        queued.UpdateOffSerNr(SMp.InvoiceNr,"ConsStockMovInvVc",SMp.StockMovType,SMp.InvoiceOfficialSerNr,true);  
      end;
      errorlongint = 0;
    end;    
  end; 
LRemotePrintStockMovInvoices:;
  return;
end;