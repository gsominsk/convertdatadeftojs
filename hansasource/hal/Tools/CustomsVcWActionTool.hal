external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure CustomsSumup(var record CustomsVc);
external function string 255 FindINObjects(string,string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure MulM4OneRate(val,val,var val,roundmode,Boolean);
external function Boolean SpecialCharge(string,var string,Integer);
external procedure SplitEclass(string,var Array string);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure GetCustomsFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external function Boolean FindPItem(string,string,var record PIVc,string,Integer);
external function Boolean GetFirstItem(var string,var record INVc);

procedure MulDateCustomsRate(string curcode,Date td,val sum,var val suminb1,var val suminb2,roundmode roundof)
BEGIN
  val fr,to1,to2,br1,br2;
    
  GetCustomsFullCurncyRate(curcode,td,fr,to1,to2,br1,br2);//GetFullCurncyRate
  suminb1 = MulRateToBase1(curcode,sum,fr,to1,to2,br1,br2,roundof);
  suminb2 = MulRateToBase2(curcode,sum,fr,to1,to2,br1,br2,roundof);
  RETURN;
END;

procedure CustomsCurValToOtherCur(Date td,string frcur,val frval,string tocur,var val toval,roundmode roundof)
BEGIN
  val a,b,fr,to1,to2,br1,br2;

  MulDateCustomsRate(frcur,td,frval,a,b,SetRoundModeD(7));
  GetCustomsFullCurncyRate(tocur,td,fr,to1,to2,br1,br2);
  Base1ToOther(tocur,a,fr,to1,to2,br1,br2,toval,roundof);
  RETURN;
END;

global
procedure CustomsSumup(var record CustomsVc Customsp)
BEGIN
  row CustomsVc crw;
  Integer rwcnt,i;
  val totsum,t;
  
  rwcnt = MatRowCnt(Customsp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Customsp,i,crw);
    if (crw.ovst==0) then begin
      crw.Sum = crw.Price*crw.Quant;
//      crw.Sum = Round(crw.Sum,DefaultRoundMode);
      totsum = totsum + crw.Sum;
//      MatRowPut(Customsp,i,crw);
    end;
  end;
  Customsp.SumCostPrice = totsum;
  if (Customsp.InsPrc!=0) then begin
    Customsp.InsCurncy = Customsp.CurncyCode;
    CustomsCurValToOtherCur(Customsp.TransDate,Customsp.ShpCurncy,Customsp.ShpVal,Customsp.InsCurncy,t,DefaultCurRoundOff);
    totsum = totsum + t;
    MulM4OneRate(totsum,Customsp.InsPrc,t,DefaultCurRoundOff,true);//Customsp.SumCostPrice
    Customsp.InsVal = t;
  end;
  RETURN;
END;

global
procedure CustomsVc_PasteArtCode(var record CustomsVc Customsp,Integer rownr)
BEGIN
  record INVc INr;
  record PIVc PIr;
  row CustomsVc Customsrw;
  record CommodityVc Commodityr;
  Boolean testf;

  MatRowGet(Customsp,rownr,Customsrw);
  if (GetFirstItem(Customsrw.ArtCode,INr)) then begin
    testf = FindPItem(INr.Code,"",PIr,Customsp.VECode,0);
    Customsrw.ArtDesc = INr.Name;
    Customsrw.Objects = FindINObjects(INr.Objects,INr.Group);
    Customsrw.VEArtCode = PIr.VEItemCode;//PIView    
    Customsrw.Price = INr.InPrice;  
    Customsrw.Weight = INr.Weight;
    Customsrw.Volume = INr.Volume;
    Customsrw.CommodityCode = INr.EUCodex;
    Commodityr.Number = Customsrw.CommodityCode;
    Customsrw.VATCode = INr.VATCode;
    Customsrw.AlcPrc = INr.AlcPrc;
    if (ReadFirstMain(Commodityr,1,true)) then begin
      Customsrw.CommodityDesc = Commodityr.Comment;
      Customsrw.DutiesCodes = Commodityr.DutiesCodes;
      Customsrw.ChargesCodes = Commodityr.ChargesCodes;
      Customsrw.ATaxPrc = Commodityr.ATaxPrc;     
    end;
    MatRowPut(Customsp,rownr,Customsrw);
  end;
  RETURN;
END;

procedure GetTotalFOBValue(record CustomsVc CUSp,record ShipDealVc SDp,var val localFOBp,var val forrFOBp)
BEGIN
  string 20 curncy;
  val fr,to1,to2,br1,br2;
  val forrfob,locfob;
  val locval,forrval;
  Integer toc,oldstyle;
  
  curncy = CUSp.CurncyCode;
  forrfob = CUSp.SumCostPrice;
  toc = TypeOfCurncy(curncy,oldstyle);
  if ((toc==1) or (toc==3)) then begin
    locfob = forrfob;
  end else begin
    locfob = MulRateToBase1(curncy,forrfob,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,DefaultCurRoundOff);
  end;
  if (SDp.IncInsurance!=0) then begin
    curncy = CUSp.InsCurncy;
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.InsVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    locfob = locfob - locval;
    if (CUSp.CurncyCode==CUSp.InsCurncy) then begin
      forrfob = forrfob - CUSp.InsVal;
    end else begin
//      locval = MulRateToBase1(curncy,locval,fr,to1,to2,br1,br2,DefaultCurRoundOff);      
      Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);  
      forrfob = forrfob - forrval;
    end;
  end;  
  if (SDp.IncFreight!=0) then begin
    curncy = CUSp.ShpCurncy;
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.ShpVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    locfob = locfob - locval;
    if (CUSp.CurncyCode==CUSp.ShpCurncy) then begin
      forrfob = forrfob - CUSp.ShpVal;
    end else begin
//      locval = MulRateToBase1(curncy,locval,fr,to1,to2,br1,br2,DefaultCurRoundOff);      
      Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);  
      forrfob = forrfob - forrval;
    end;
  end;
  if (SDp.IncCost1!=0) then begin
    curncy = CUSp.Div1Curncy;
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.Div1Val,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    locfob = locfob - locval;
    if (CUSp.CurncyCode==CUSp.Div1Curncy) then begin
      forrfob = forrfob - CUSp.Div1Val;
    end else begin
//      locval = MulRateToBase1(curncy,locval,fr,to1,to2,br1,br2,DefaultCurRoundOff);      
      Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);  
      forrfob = forrfob - forrval;
    end;
  end;
  if (SDp.IncCost2!=0) then begin
    curncy = CUSp.Div2Curncy;
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.Div2Val,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    locfob = locfob - locval;
    if (CUSp.CurncyCode==CUSp.Div2Curncy) then begin
      forrfob = forrfob - CUSp.Div2Val;
    end else begin
//      locval = MulRateToBase1(curncy,locval,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);
      forrfob = forrfob - forrval;
    end;
  end;
  localFOBp = locfob;
  forrFOBp = forrfob;
  RETURN;
END;

procedure GetTotalCost(record CustomsVc CUSp,var val totcostp)
BEGIN
  string 20 curncy;
  val fr,to1,to2,br1,br2;
  val locval,forrval;
  val totsum;
  
  totsum = blankval;
  curncy = CUSp.InsCurncy;
  if (curncy==CUSp.CurncyCode) then begin
    totsum = totsum + CUSp.InsVal;
  end else begin
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.InsVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);  
    totsum = totsum + forrval;
  end;
  curncy = CUSp.ShpCurncy;
  if (curncy==CUSp.CurncyCode) then begin
    totsum = totsum + CUSp.ShpVal;
  end else begin
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.ShpVal,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);  
    totsum = totsum + forrval;
  end;
  curncy = CUSp.Div1Curncy;
  if (curncy==CUSp.CurncyCode) then begin
    totsum = totsum + CUSp.Div1Val;
  end else begin
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.Div1Val,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);  
    totsum = totsum + forrval;
  end;

  curncy = CUSp.Div2Curncy;
  if (curncy==CUSp.CurncyCode) then begin
    totsum = totsum + CUSp.Div2Val;
  end else begin
    GetCustomsFullCurncyRate(curncy,CUSp.TransDate,fr,to1,to2,br1,br2);
    locval = MulRateToBase1(curncy,CUSp.Div2Val,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    Base1ToOther(CUSp.CurncyCode,locval,CUSp.FrRate,CUSp.ToRateB1,CUSp.ToRateB2,CUSp.BaseRate1,CUSp.BaseRate2,forrval,DefaultCurRoundOff);  
    totsum = totsum + forrval;
  end;
  totcostp = totsum;
  RETURN;
END;

procedure DoTheCalculation(record ChargesVc Chargep,record CustomsVc CUSp,Integer rownr,var val res)
BEGIN
  record CommDealVc CDr;
  row CustomsVc CUSrw;
  val temp;
  val amount,prc;
  
  MatRowGet(CUSp,rownr,CUSrw);
  res = blankval;
  amount = Chargep.GattAmount;
  prc = Chargep.GattPrc;
  if (nonblank(CUSrw.CommodityCode)) then begin
    CDr.Number = CUSrw.CommodityCode;
    CDr.DutiesCode = Chargep.Code;
    if (ReadFirstMain(CDr,2,true)) then begin
      amount = CDr.GattAmount;
      prc = CDr.GattPrc;
    end;
  end;
  switch(Chargep.CalcMethod) begin
    case 0: res = CUSrw.Quant*amount;    
    case 1: res = CUSrw.Weight*amount;
    case 2: 
      if (prc!=0) then begin
        MulM4OneRate(CUSrw.CustomsVal,prc,res,DefaultCurRoundOff,true);
      end;
    case 3:
      if (prc!=0) then  begin
        MulM4OneRate(CUSrw.CustomsVal,prc,res,DefaultCurRoundOff,false);
        MulM4OneRate(CUSrw.CustomsVal,Chargep.Special,temp,DefaultCurRoundOff,false);
        temp = temp - CUSrw.DutiesVal;
        if (res>temp) then begin
          res = temp;
        end;
      end;
    case 4: res = Chargep.Special;
    case 5:
      if (prc!=0) then  begin
        temp = CUSrw.CustomsVal + CUSrw.DutiesVal;
        MulM4OneRate(temp,prc,res,DefaultCurRoundOff,true);
      end;
    case 6: res = CUSrw.Volume*amount;
    case 7:
      temp = CUSrw.AlcPrc - Chargep.Special;
      temp = CUSrw.Volume*temp;
      res = temp*amount; 
    case 8:
  end;
  RETURN;
END;

procedure DoTheCommodityCalculation(record CommodityVc Commodityp,record CustomsVc CUSp,Integer rownr,var val res)
BEGIN
  row CustomsVc CUSrw;
  val temp;
  val prc;

  MatRowGet(CUSp,rownr,CUSrw);
  res = blankval;
  prc = Commodityp.GattPrc;
  switch (Commodityp.GattBaseQty) begin
    case 1: res = CUSrw.Quant*Commodityp.GattAmount;    
    case 2: res = CUSrw.Weight*Commodityp.GattAmount;
  end;
  if (prc!=0) then  begin
    MulM4OneRate(CUSrw.CustomsVal,prc,temp,DefaultCurRoundOff,true);
    res = res + temp;
  end;
  RETURN;
END;

procedure CalcAllDuties(record CustomsVc CUSp,Integer rownr,var val tempvatval)
BEGIN
  Array string 20 a;
  record ChargesVc Charger;
  record CommodityVc COr;
  row CustomsVc CUSrw;
  val temp,temp2;
  Integer i;
  string 255 tstr;

  MatRowGet(CUSp,rownr,CUSrw);
  CUSrw.DutiesVal = blankval;
  SplitEclass(CUSrw.DutiesCodes,a);
  while(nonblank(a[i])) begin
    Charger.Code = a[i];
    COr.Number = CUSrw.CommodityCode;
    if (ReadFirstMain(COr,1,true)) then begin end;
    if (ReadFirstMain(Charger,1,true)) then begin
      if (SpecialCharge(Charger.Code,tstr,1)) then begin
//        COr.Number = CUSrw.CommodityCode;
//        if (ReadFirstMain(COr,1,true)) then begin
        begin
          if (COr.ATaxPrc!=0) then begin
            MulM4OneRate(CUSrw.CustomsVal,COr.ATaxPrc,temp,DefaultCurRoundOff,true);
          end else begin
            temp = blankval;
          end;
          if (COr.NetweightBased!=0) then begin
            temp2 = CUSrw.Weight*COr.ATaxVal;
          end else begin
            temp2 = CUSrw.Quant*COr.ATaxVal;
          end;
          temp = temp + temp2;
          CUSrw.ATaxVal = temp;
          CUSrw.ATaxPrc = COr.ATaxPrc;
        end;
      end else begin
        DoTheCalculation(Charger,CUSp,rownr,temp);
      end;
      CUSrw.DutiesVal = CUSrw.DutiesVal + temp;
      if (Charger.VATFlag!=0) then begin
        tempvatval = tempvatval + temp;
      end;
      DoTheCommodityCalculation(COr,CUSp,rownr,temp);
      tempvatval = tempvatval + temp;
      CUSrw.DutiesVal = CUSrw.DutiesVal + temp;
    end;
    i = i + 1;
  end;
  if (CUSrw.DutiesVal==0) then begin
    CUSrw.DutiesVal = blankval;
  end;
  MatRowPut(CUSp,rownr,CUSrw);
  RETURN;
END;

procedure AddChargesToRecord(record CalcChargeVc CCp,string code,string comment,var val chval)
BEGIN
  row CalcChargeVc ccrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(CCp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CCp,i,ccrw);
    if (code==ccrw.Code) then begin
      ccrw.CalcVal = ccrw.CalcVal + chval;
      MatRowPut(CCp,i,ccrw);
      goto LAddChargesToRecord;
    end;
  end;
  ccrw.Code = code;
  ccrw.Comment = comment;
  ccrw.CalcVal = chval;
  MatRowPut(CCp,rwcnt,ccrw);
LAddChargesToRecord:;
  RETURN;
END;

procedure CalcAllCharges(record CustomsVc CUSp,Integer rownr,record CalcChargeVc CCp,var val tempvatval)
BEGIN
  Array string 20 a;
  record ChargesVc Charger;
  record CommodityVc COr;
  row CustomsVc CUSrw;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock vatrw;
  val temp,temp1;
  Integer i,rwcnt;

  MatRowGet(CUSp,rownr,CUSrw);
  CUSrw.ChargesVal = blankval;
  SplitEclass(CUSrw.ChargesCodes,a);
  BlockLoad(VATCodeRec);
  while(nonblank(a[i])) begin
    Charger.Code = a[i];
    if (ReadFirstMain(Charger,1,true)) then begin
      DoTheCalculation(Charger,CUSp,rownr,temp);
      CUSrw.ChargesVal = CUSrw.ChargesVal + temp;
      if (Charger.VATFlag!=0) then begin
        tempvatval = tempvatval + temp;
      end;
      AddChargesToRecord(CCp,Charger.Code,Charger.Comment,temp);
    end;
    i = i + 1;
  end;
  tempvatval = tempvatval + CUSrw.CustomsVal;
  if (tempvatval!=0) then begin
    COr.Number = CUSrw.CommodityCode;
    if (ReadFirstMain(COr,1,true)) then begin
      if (nonblank(COr.VATCode)) then begin
        MulVATIV(COr.VATCode,tempvatval,temp,temp1,0,0);
        rwcnt = MatRowCnt(VATCodeRec);
        for (i=0; i<rwcnt;i=i+1) begin
          MatRowGet(VATCodeRec,i,vatrw);
          if (vatrw.VATCode==COr.VATCode) then begin
            i = rwcnt;
          end;
        end;
        CUSrw.ChargesVal = CUSrw.ChargesVal + temp;
        AddChargesToRecord(CCp,COr.VATCode,vatrw.Comment,temp);
      end;
    end;
  end;
  if (CUSrw.ChargesVal==0) then begin
    CUSrw.ChargesVal = blankval;
  end;
  MatRowPut(CUSp,rownr,CUSrw);
  RETURN;
END;

procedure GetCustomTotWeight(var val TotWeight,var val TotVol,record CustomsVc CUSr)
begin
  row CustomsVc CUSrw;
  integer i,rows;
  
  TotWeight = 0;
  TotVol = 0;
  rows = MatRowCnt(CUSr);
  for (i=0;i<rows;i=i+1) begin
    MatRowGet(CUSr,i,CUSrw);
    TotWeight = TotWeight + CUSrw.Weight;
    TotVol    = TotVol    + CUSrw.Volume;
  end;
  return;
end;

global
updating function Boolean CalculateCosts(var record CustomsVc CUSr)
BEGIN
  record ShipDealVc ShipDealr;
  record CalcChargeVc CCr;
  row CustomsVc CUSrw;
  val localFOB,forrFOB;
  val temp,rnd,taxrnd,highval;
  val totcost,tempvatval;
  Integer rwcnt,i;
  Integer highest;
  Boolean res;
  Val TotWeight,TotVol;
  
  localFOB = blankval;
  forrFOB = blankval;
  rnd = blankval;
  taxrnd = blankval;
  highval = blankval;
  totcost = blankval;
  tempvatval = blankval;
  CCr.SerNr = CUSr.SerNr;
  CCr.VECode = CUSr.VECode;
  CCr.Addr0 = CUSr.Addr0;
  ShipDealr.Code = CUSr.ShipDeal;
  if (ReadFirstMain(ShipDealr,1,true)==false) then begin
    goto LCalculateCosts;
  end;
  GetTotalFOBValue(CUSr,ShipDealr,localFOB,forrFOB);
  CUSr.TotFOBLocalVal = localFOB;
  CUSr.TotFOBVal = forrFOB;
  GetTotalCost(CUSr,totcost);
  rwcnt = MatRowCnt(CUSr);
  highest = rwcnt - 1;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CUSr,i,CUSrw);
    GetCustomTotWeight(TotWeight,TotVol,CUSr);
    switch (CUSr.FrightDiv) begin
      case 0 : temp = CUSrw.Sum/CUSr.SumCostPrice;
      case 1 : temp = CUSrw.Weight/TotWeight;
      case 2 : temp = CUSrw.Volume/TotVol;
    end;
    CUSrw.FOBVal = CUSr.TotFOBVal*temp;
    CUSrw.RowCost = totcost*temp;
    CUSrw.FOBVal = Round(CUSrw.FOBVal,DefaultRoundMode);
    CUSrw.RowCost = Round(CUSrw.RowCost,DefaultRoundMode);
    rnd = rnd + CUSrw.FOBVal;
    taxrnd = taxrnd + CUSrw.RowCost;
    if (CUSrw.FOBVal>highval) then begin
      highval = CUSrw.FOBVal;
      highest = i;
    end;
    MatRowPut(CUSr,i,CUSrw);
  end;
  rnd = CUSr.TotFOBVal - rnd;
  taxrnd = totcost - taxrnd;
  if ((rnd!=0) or (taxrnd!=0)) then begin
    MatRowGet(CUSr,highest,CUSrw);
    CUSrw.FOBVal = CUSrw.FOBVal + rnd;
    CUSrw.RowCost = CUSrw.RowCost + taxrnd;
    MatRowPut(CUSr,highest,CUSrw);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CUSr,i,CUSrw);
    temp = CUSrw.FOBVal + CUSrw.RowCost;
    CUSrw.CustomsVal = MulRateToBase1(CUSr.CurncyCode,temp,CUSr.FrRate,CUSr.ToRateB1,CUSr.ToRateB2,CUSr.BaseRate1,CUSr.BaseRate2,DefaultCurRoundOff);
    MatRowPut(CUSr,i,CUSrw);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CUSr,i,CUSrw);
    tempvatval = 0;
    CalcAllDuties(CUSr,i,tempvatval);
    CalcAllCharges(CUSr,i,CCr,tempvatval);
  end;
  CUSr.SumCustoms = blankval;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CUSr,i,CUSrw);
    CUSr.SumCustoms = CUSr.SumCustoms + CUSrw.CustomsVal;
  end;
  if (MatRowCnt(CCr)>0) then begin
    if (RecordStore(CCr,true)) then begin
    end;
  end;
  res = true;
LCalculateCosts:;
  CalculateCosts = res;
  RETURN;
END;

procedure PasteVEInCustoms(string VECode,var record CustomsVc Customsp,Boolean warn)
BEGIN
  record CUVc VEr;
  val fr,to1,to2,br1,br2;
  
  VEr.Code = VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
    if (VEr.blockedFlag==0) then begin
      Customsp.Addr0 = VEr.Name;
      Customsp.Addr1 = VEr.InvAddr0;
      Customsp.Addr2 = VEr.InvAddr1;
      Customsp.Addr3 = VEr.InvAddr2;
      Customsp.InvAddr3 = VEr.InvAddr3;
      Customsp.InvAddr4 = VEr.InvAddr4;
      Customsp.VEContact = VEr.Person;
      Customsp.ExportFlag = VEr.ExportFlag;
      Customsp.CountryCode = VEr.CountryCode;
      Customsp.CurncyCode = VEr.VECurncyCode;
      GetCustomsFullCurncyRate(Customsp.CurncyCode,Customsp.TransDate,fr,to1,to2,br1,br2);
      Customsp.FrRate = fr;
      Customsp.ToRateB1 = to1;
      Customsp.ToRateB2 = to2;
      Customsp.BaseRate1 = br1;      
      Customsp.BaseRate2 = br2;
      Customsp.ShipDeal = VEr.VEShipDeal;
      Customsp.ExportFlag = VEr.ExportFlag;
      if (warn) then begin
        if (nonblank(VEr.VEWarnText1)) then begin
          MessageBox(0,VEr.VEWarnText1);
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure CustomsVc_PasteVECode(var record CustomsVc Customsp)
BEGIN
  PasteVEInCustoms(Customsp.VECode,Customsp,true);
  RETURN;
END;

procedure CustomsGetRate(var record CustomsVc Customsp)
BEGIN
  val fr,to1,to2,br1,br2;
  string 20 curncy;

  curncy = Customsp.CurncyCode;
  GetCustomsFullCurncyRate(curncy,Customsp.TransDate,fr,to1,to2,br1,br2);
  Customsp.CurncyCode = curncy;
  Customsp.FrRate = fr;
  Customsp.ToRateB1 = to1;
  Customsp.ToRateB2 = to2;
  Customsp.BaseRate1 = br1;  
  Customsp.BaseRate2 = br2;
  RETURN;
END;

global
procedure CustomsVc_PasteTransDate(var record CustomsVc Customsp)
BEGIN
  CustomsGetRate(Customsp);
  RETURN;
END;

global
procedure CustomsVc_PasteCurncyCode(var record CustomsVc Customsp)
BEGIN
  CustomsGetRate(Customsp);
  RETURN;
END;

global
function Integer GetPO(LongInt ponr,var record POVc POp,string VECode,Boolean inclclosedf)
BEGIN
  Integer retval;
  
  POp.SerNr = ponr;
  if (ReadFirstMain(POp,1,true)) then begin
    if (POp.OKFlag==0) then begin
      retval = 3;
      goto LGetPO;
    end;
    if (nonblank(VECode)) then begin
      if (VECode!=POp.VECode) then begin
        retval = 2;
        goto LGetPO;
      end;
    end;
    if (inclclosedf==false) then begin
      if (POp.Closed!=0) then begin
        retval = 6;
        goto LGetPO;
      end;
    end;
  end else begin
    retval = 4;
    goto LGetPO;
  end;
LGetPO:;
  GetPO = retval;
  RETURN;
END;

procedure SumupCustomsPO(var record CustomsVc Customsp,Integer retval)
BEGIN
  switch (retval) begin
    case 1: MessageBox(1281,""); 
    case 2: MessageBox(1215,""); 
    case 3: MessageBox(1138,""); 
    case 4: MessageBox(1026,""); 
    case 5: MessageBox(1459,""); 
    case 6: MessageBox(22062,""); 
    otherwise CustomsSumup(Customsp);
  end;
  RETURN;
END;

global
procedure CustomsVc_PastePONr(var record CustomsVc Customsp,Integer rownr)
BEGIN
  row CustomsVc Customsrw;
  record POVc POr;
  Integer retval;
  
  MatRowGet(Customsp,rownr,Customsrw);
  retval = GetPO(Customsrw.PONr,POr,Customsp.VECode,false);
  SumupCustomsPO(Customsp,retval);
  RETURN;
END;

procedure ApplyProperDuties(var string res,string DutiesCodes,string code)
BEGIN
  Array string 20 a;
  record CountryVc Cr;
  Integer i;
  Boolean firstf;
  string 255 tstr;
  
  firstf = true;
  res = "";
  Cr.Code = code;
  if (ReadFirstMain(Cr,1,true)==false) then begin goto LApplyProperDuties; end;
  i = 0;
  SplitEclass(DutiesCodes,a);
  while(nonblank(a[i])) begin
    if ((SetInSet(a[i],Cr.DutiesCodes)) or (SpecialCharge(a[i],tstr,-1)==false)) then begin
      if (firstf==false) then begin
        res = res & ",";
      end;
      firstf = false;
      res = res & a[i];
    end;
    i = i + 1;
  end;  
LApplyProperDuties:;
  RETURN;
END;

function Boolean CopyPOrwToCustomsrw(record POVc POp,record CustomsVc Customsp,string VECode,row POVc POrwp,row CustomsVc Customsrwp)
BEGIN
  record INVc INr;
  record PIVc PIr;
  record CommodityVc CMr;
  Boolean res;
  val theval;
  string 255 tstr;
  
  theval = POrwp.Quant - POrwp.Shipd1;
  if (blank(Customsp.VECode)) then begin
    Customsp.VECode = POp.VECode;
    PasteVEInCustoms(Customsp.VECode,Customsp,false);
    Customsp.ShipDeal = POp.ShipDeal;
    Customsp.ShipMode = POp.ShipMode;
    Customsp.Comment = POp.Comment;
    Customsp.CurncyCode = POp.CurncyCode;
    Customsp.VEContact = POp.VEContact;
    Customsp.FrRate = POp.FrRate;
    Customsp.ToRateB1 = POp.ToRateB1;
    Customsp.ToRateB2 = POp.ToRateB2;
    Customsp.BaseRate1 = POp.BaseRate1;
    Customsp.BaseRate2 = POp.BaseRate2;
  end;
  if (theval>0) then begin
    Customsrwp.ArtCode = POrwp.ArtCode;
    Customsrwp.VEArtCode = POrwp.VEArtCode;
    Customsrwp.ArtDesc = POrwp.Spec;
    Customsrwp.Objects = POrwp.Objects;
    Customsrwp.VATCode = POrwp.VATCode;
    Customsrwp.Quant = theval;
    Customsrwp.VEQuant = POrwp.VEQuant;
    Customsrwp.Price = POrwp.Price;
    Customsrwp.Sum = POrwp.Sum;
    PIr.ItemCode = Customsrwp.ArtCode;
    PIr.VECode = VECode;
    PIr.VEItemCode = Customsrwp.VEArtCode;
    if (ReadFirstMain(PIr,3,true)) then begin
      Customsrwp.CountryCode = PIr.OrgCountry;
    end;
    INr.Code = Customsrwp.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      Customsrwp.Weight = Customsrwp.Quant*INr.Weight;
      Customsrwp.Volume = Customsrwp.Quant*INr.Volume;
      Customsrwp.AlcPrc = INr.AlcPrc;
      
      Customsrwp.CommodityCode = INr.EUCodex;
      CMr.Number = Customsrwp.CommodityCode;
      if (ReadFirstMain(CMr,1,true)) then begin
        Customsrwp.CommodityDesc = CMr.Comment;
        if (nonblank(CMr.LicencesCodes)) then begin
          if (nonblank(Customsrwp.CommodityDesc)) then begin
            Customsrwp.CommodityDesc = Customsrwp.CommodityDesc & ",";
            Customsrwp.CommodityDesc = Customsrwp.CommodityDesc & CMr.LicencesCodes;
          end;
        end;
        if (nonblank(CMr.ProhibitsCodes)) then begin
          if (nonblank(Customsrwp.CommodityDesc)) then begin
            Customsrwp.CommodityDesc = Customsrwp.CommodityDesc & ",";
            Customsrwp.CommodityDesc = Customsrwp.CommodityDesc & CMr.ProhibitsCodes;
          end;
        end;
        Customsrwp.ChargesCodes = CMr.ChargesCodes;
        ApplyProperDuties(tstr,CMr.DutiesCodes,Customsrwp.CountryCode);
        Customsrwp.DutiesCodes = tstr;
      end;
    end;
    res = true;
  end;
  CopyPOrwToCustomsrw = res;
  RETURN;
END;

function Integer PastePOInCustoms(record CustomsVc Customsp,record POVc POp,LongInt PONr,LongInt PORowNr,Integer rownr)
BEGIN
  row POVc POrw;
  row CustomsVc Customsrw;
  Integer porwcnt,cusrowcnt;
  Integer i,currow;
  Boolean firstf;
  Integer retval;
  
  firstf = true;
  retval = GetPO(PONr,POp,Customsp.VECode,false);
  if (retval==0) then begin
    porwcnt = MatRowCnt(POp);
    cusrowcnt = MatRowCnt(Customsp);
    if (PORowNr==-1) then begin
      if (PORowNr>porwcnt) then begin
        retval = 5;
        goto LPastePOInCustoms;
      end;  
      if (((porwcnt+cusrowcnt) > 99) or (PORowNr > porwcnt)) then begin
        retval = 1;
        goto LPastePOInCustoms;
      end;
      currow = rownr;
      for (i=0;i<porwcnt;i=i+1) begin
        ClearRow(Customsp,Customsrw,1);
        MatRowGet(POp,i,POrw);
        Customsrw.PONr = POp.SerNr;
        Customsrw.PORowNr = i + 1;
        if (CopyPOrwToCustomsrw(POp,Customsp,Customsp.VECode,POrw,Customsrw)) then begin
          if (firstf) then begin
             firstf = false;
            MatRowPut(Customsp,currow,Customsrw);
            currow = currow + 1;
          end else begin
            MatRowInsert(Customsp,currow,Customsrw);
            currow = currow + 1;
          end;
        end;
      end;
    end else begin
      if (PORowNr>porwcnt) then begin
        retval = 5;
        goto LPastePOInCustoms;
      end;  
      if (PORowNr<1) then begin
        retval = 5;
        goto LPastePOInCustoms;
      end;
      ClearRow(Customsp,Customsrw,1);
      MatRowGet(POp,PORowNr-1,POrw);
      Customsrw.PONr = POp.SerNr;
      Customsrw.PORowNr = PORowNr;
      if (CopyPOrwToCustomsrw(POp,Customsp,Customsp.VECode,POrw,Customsrw)) then begin
        MatRowPut(Customsp,rownr,Customsrw);
      end;
    end;
  end;
LPastePOInCustoms:;
  PastePOInCustoms = retval;
  RETURN;
END;

global
procedure CustomsVc_PastePORowNr(var record CustomsVc Customsp,Integer rownr,Integer wnst,Boolean changedf)
BEGIN
  row CustomsVc Customsrw;
  record POVc POr;
  Integer retval;

  MatRowGet(Customsp,rownr,Customsrw);
  if (changedf) then begin
    if (Customsrw.PORowNr!=-1) then begin
      retval = PastePOInCustoms(Customsp,POr,Customsrw.PONr,Customsrw.PORowNr,rownr);
      SumupCustomsPO(Customsp,retval);
    end;
  end;
  if (wnst==2) then begin
    if (Customsrw.PORowNr==-1) then begin
      if ((blank(Customsrw.ArtCode)) and (blank(Customsrw.ArtDesc)) and (Customsrw.PONr!=-1)) then begin
        retval = PastePOInCustoms(Customsp,POr,Customsrw.PONr,Customsrw.PORowNr,rownr);
        SumupCustomsPO(Customsp,retval);
      end;
    end;
  end;  
  RETURN;
END;
