external function Boolean EInvoiceForCustomer(Integer,string,record CUVc);
external function Boolean HasEInvoicing();
external outer function string 60 OuterReadSetTrObjectLabel(string);
external function Boolean HasModIN();
external function Boolean HasModPO();
external function Boolean HasModSO();
remote procedure CntNPTSPaymentCurrenciesRemote(string,var Array string,var Array string,var Array Integer,var Array string,var Integer);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetCOSAcc(string,string,string,record AccBlock,record INVc,Integer,Boolean,Integer,var string,var string);
remote function Boolean FillAndPrepareVarCodes(var Array string,Integer,string);
remote function Boolean FillAndPrepareVarTheCodes(var Array string,Integer,string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer CountObjects(string);
external function Boolean AccInRange(string,string);
external function Boolean GetPMRow(string,var row PMBlock);
external function string 20 FindWithHoldAcc(string,string);


function Boolean SetCUDLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  record CUUserLabelBlock cur;
  
  plbl = subset;
  BlockLoad(cur);  
  switch (fldname) begin
    case "InvAddr0": plbl = cur.UserAddr0; res = true;
    case "DelAddr0": plbl = cur.UserAddr0; res = true;
    case "InvAddr1": plbl = cur.UserAddr1; res = true;
    case "DelAddr1": plbl = cur.UserAddr1; res = true;
    case "InvAddr2": plbl = cur.UserAddr2; res = true;
    case "DelAddr2": plbl = cur.UserAddr2; res = true;
    case "InvAddr3": plbl = cur.UserAddr3; res = true;
    case "DelAddr3": plbl = cur.UserAddr3; res = true;
    case "InvAddr4": plbl = cur.UserAddr4; res = true;
    case "DelAddr4": plbl = cur.UserAddr4; res = true;
    case "UserStr1": plbl = cur.UserStr1;
    case "UserStr2": plbl = cur.UserStr2;
    case "UserStr3": plbl = cur.UserStr3;
    case "UserStr4": plbl = cur.UserStr4;
    case "UserStr5": plbl = cur.UserStr5;
    case "UserVal1": plbl = cur.UserVal1;
    case "UserVal2": plbl = cur.UserVal2;
    case "UserVal3": plbl = cur.UserVal3;
    case "UserDate1": plbl = cur.UserDate1;
    case "UserDate2": plbl = cur.UserDate2;
    case "UserDate3": plbl = cur.UserDate3;
  end;
  if (nonblank(plbl)) then begin 
    res = true;
  end;
  SetCUDLabel = res;
  return;
end;

function Boolean SetActDLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  record ActUserLabelBlock actr;
  
  plbl = subset;
  BlockLoad(actr);  
  switch (fldname) begin
    case "UserStr1":  plbl = actr.UserStr1;
    case "UserStr2":  plbl = actr.UserStr2;
    case "UserStr3":  plbl = actr.UserStr3;
    case "UserStr4":  plbl = actr.UserStr4;
    case "UserStr5":  plbl = actr.UserStr5;
    case "UserVal1":  plbl = actr.UserVal1;
    case "UserVal2":  plbl = actr.UserVal2;
    case "UserVal3":  plbl = actr.UserVal3;
    case "UserDate1": plbl = actr.UserDate1;
    case "UserDate2": plbl = actr.UserDate2;
    case "UserDate3": plbl = actr.UserDate3;
  end;
  if (nonblank(plbl)) then begin 
    res = true;
  end;
  SetActDLabel = res;
  return;
end;

function Boolean SetINDLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  record INUserLabelBlock INULr;
  
  plbl = subset;
  BlockLoad(INULr);  
  switch (fldname) begin
    case "UserStr1":  plbl = INULr.UserStr1;
    case "UserStr2":  plbl = INULr.UserStr2;
    case "UserStr3":  plbl = INULr.UserStr3;
    case "UserStr4":  plbl = INULr.UserStr4;
    case "UserStr5":  plbl = INULr.UserStr5;
    case "UserVal1":  plbl = INULr.UserVal1;
    case "UserVal2":  plbl = INULr.UserVal2;
    case "UserVal3":  plbl = INULr.UserVal3;
    case "UserDate1": plbl = INULr.UserDate1;
    case "UserDate2": plbl = INULr.UserDate2;
    case "UserDate3": plbl = INULr.UserDate3;
  end;
  if (nonblank(plbl)) then begin 
    res = true;
  end;
  SetINDLabel = res;
  return;
end;

function Boolean SetAccTLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  record ExtraCostLabelBlock ECLr; //Extra Cost Labels
  
  plbl = subset;
  BlockLoad(ECLr);  
  switch (fldname) begin
    case "PUCost1":  plbl = ECLr.ExtraCost1Label;
    case "PUCost2":  plbl = ECLr.ExtraCost2Label;
    case "PUCost3":  plbl = ECLr.ExtraCost3Label;
    case "PUCost4":  plbl = ECLr.ExtraCost4Label;
    case "PUCost5":  plbl = ECLr.ExtraCost5Label;
  end;
  if (nonblank(plbl)) then begin 
    res = true;
  end;
  SetAccTLabel = res;
  return;
end;

function Boolean GetTRObjsType(string objstr,LongInt snr,var string rstr)
begin
  Boolean res;
  LongInt i;
  LongInt ocnt;
  string 255 ostr;
  Integer pos;
  
  i = 0;
  ocnt = 0;
  pos = 0;
  ocnt = 0;
  rstr = "";
  ExtractObj(objstr,pos,ostr);
  while (nonblank(ostr)) begin
    ocnt = ocnt + 1;
    if (snr==ocnt) then begin
      rstr = ostr;
      res = true;
      goto LGetTRObjsType;
    end;
    ExtractObj(objstr,pos,ostr);
  end;
LGetTRObjsType:;
  GetTRObjsType = res;
  return;
end;

// This should not be necessary, it worked before without this....
// Oh well, this works....
// However, I belive that artcode is also in GetWindowNameArg(wn), which means a lot of code can be replaced with one line...if I'm right.
//before it didnt work like that at all
//there was code in C puting labelas 1,2,3
//GetWindowNameArg is blank cause it is set nowhere
function Boolean SetAssitedVarietyLabel(string what,string fldname,var string plbl)
begin
  Boolean res;
  LongInt snr;
  string 255 typ,artcode;
  record VARGVc VARGr;
  record MinPerLocVc MPLr;
  record ORVc ORr;
  row ORVc ORrw;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  record QTVc QTr;
  row QTVc QTrw;
  record PUVc PUr;
  row PUVc PUrw;
  record POVc POr;
  row POVc POrw;
  record ProdVc Prodr;
  row ProdVc Prodrw;
  record SDVc SDr;
  row SDVc SDrw;
  record SHVc SHr;
  row SHVc SHrw;
  record RecVc Recr;
  row RecVc Recrw;
  record PLVc PLr;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  record BarcodeVc Barcoder;
  record PIVc PIr;
  record AltINVc AltINr;
  record CrossINVc CrossINr;
  record ConvItemBlock ConvItemRec;
  row ConvItemBlock ConvItemrw;
  Integer wn,rownr;
  string 60 sz,msk,mskrep;
  string 200 varsubset,subset;
  
  if (CurWindow<=0) then begin goto LSetAssitedVarietyLabel; end;
  wn = MotherWindow(CurWindow);  
  if (wn<=0) then begin goto LSetAssitedVarietyLabel; end;
  switch (GetWindowClass(wn)) begin
    case "PLDClass":
      GetWindowRecord(wn,PLr);
      artcode = PLr.ArtCode;
    case "MinPerLocDClass":
      GetWindowRecord(wn,MPLr);
      artcode = MPLr.ItemCode;
    case "RecDClass":
      GetWindowRecord(wn,Recr);
      rownr = WindowActiveRow(wn);
      MatRowGet(Recr,rownr,Recrw);
      artcode = Recrw.Item;
    case "PIDClass":
      GetWindowRecord(wn,PIr);
      artcode = PIr.ItemCode;  
    case "BarcodeDClass":
      GetWindowRecord(wn,Barcoder);
      artcode = Barcoder.Itemcode;  
    case "ORDClass":
      GetWindowRecord(wn,ORr);
      rownr = WindowActiveRow(wn);
      MatRowGet(ORr,rownr,ORrw);
      artcode = ORrw.ArtCode;
    case "IVDClass":
      GetWindowRecord(wn,IVr);
      rownr = WindowActiveRow(wn);
      MatRowGet(IVr,rownr,IVrw);
      artcode = IVrw.ArtCode;
    case "QTDClass":
      GetWindowRecord(wn,QTr);
      rownr = WindowActiveRow(wn);
      MatRowGet(QTr,rownr,QTrw);
      artcode = QTrw.ArtCode;
    case "PUDClass":
      GetWindowRecord(wn,PUr);
      rownr = WindowActiveRow(wn);
      MatRowGet(PUr,rownr,PUrw);
      artcode = PUrw.ArtCode;
    case "PODClass":
      GetWindowRecord(wn,POr);
      rownr = WindowActiveRow(wn);
      MatRowGet(POr,rownr,POrw);
      artcode = POrw.ArtCode;
    case "ProdDClass":
      GetWindowRecord(wn,Prodr);
      rownr = WindowActiveRow(wn);
      MatRowGet(Prodr,rownr,Prodrw);
      artcode = Prodrw.Item;
    case "SDDClass":
      GetWindowRecord(wn,SDr);
      rownr = WindowActiveRow(wn);
      MatRowGet(SDr,rownr,SDrw);
      artcode = SDrw.ArtCode;
    case "SHDClass":
      GetWindowRecord(wn,SHr);
      rownr = WindowActiveRow(wn);
      MatRowGet(SHr,rownr,SHrw);
      artcode = SHrw.ArtCode;
    case "StockMovDClass":
      GetWindowRecord(wn,StockMovr);
      rownr = WindowActiveRow(wn);
      MatRowGet(StockMovr,rownr,StockMovrw);
      artcode = StockMovrw.ArtCode;
    case "IVCashDClass":
      GetWindowRecord(wn,IVCashr);
      rownr = WindowActiveRow(wn);
      MatRowGet(IVCashr,rownr,IVCashrw);
      artcode = IVCashrw.ArtCode;
    case "NPTSIVCashDClass":
      GetWindowRecord(wn,IVCashr);
      rownr = WindowActiveRow(wn);
      MatRowGet(IVCashr,rownr,IVCashrw);
      artcode = IVCashrw.ArtCode;
    case "AltINDClass":
      GetWindowRecord(wn,AltINr);
      switch (WindowActiveField(wn)) begin
        case "ItemCode": artcode = AltINr.ItemCode;
        case "AltItemCode": artcode = AltINr.AltItemCode;
      end;
    case "CrossINDClass":
      GetWindowRecord(wn,CrossINr);
      switch (WindowActiveField(wn)) begin
        case "ItemCode": artcode = CrossINr.ItemCode;
        case "CrossItemCode": artcode = CrossINr.CrossItemCode;
      end;
    case "ConvItemTClass":
      GetWindowRecord(wn,ConvItemRec);
      rownr = WindowActiveRow(wn);
      MatRowGet(ConvItemRec,rownr,ConvItemrw);
      artcode = ConvItemrw.OldCode;
    case "TBBUDClass":
      GetWindowRecord(wn,TBBUr);
      rownr = WindowActiveRow(wn);
      MatRowGet(TBBUr,rownr,TBBUrw);
      artcode = TBBUrw.ArtCode;
  end;  
  
  if (FindItemVAR(artcode,sz,msk,mskrep,varsubset)) then begin
  end;
  res = true;
  plbl = subset;
  snr = StringToLongInt(fldname);
  res = GetTRObjsType(msk,snr,typ);
  if (res) then begin
    VARGr.Code = typ;
    if (ReadFirstMain(VARGr,1,true)) then begin
      plbl = VARGr.Comment;
    end;
  end;
LSetAssitedVarietyLabel:; 
  SetAssitedVarietyLabel = res;
  return;
end;

global
procedure ExtractElemFromSet(string mset,integer pos,var string sset)//pos >=1
begin
  integer i,ln,fpos,spos,ccount;
  ln=len(mset);
  fpos=0;
  spos=ln;
  ccount=0;
  for(i=0;i<ln;i=i+1) begin
    if (mid(mset,i,1)==",") then begin
      ccount=ccount+1;
      if (ccount==pos) then begin
        spos=i;i=ln;
      end;
      if (ccount==pos-1) then begin
        fpos=i+1;
      end;
    end;
  end;
  sset=mid(mset,fpos,spos-fpos);
  return;
end;

function Boolean SetCUClassLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  Integer fn,objam;
  string 255 typ;
  record CUVc CUr;
  record CCatVc CCatr;
  integer wn;
  string 60 sset;
  
  res = true;
  plbl = subset; 
  if (CurWindow<=0) then begin goto LSetCUClassLabel; end;
  wn = MotherWindow(CurWindow);  
  if (wn<=0) then begin goto LSetCUClassLabel; end;
  if (GetWindowClass(wn)!="CUDClass") and (GetWindowClass(wn)!="CUGuestDClass") then begin goto LSetCUClassLabel; end;
  GetWindowRecord(wn,CUr);
  if (nonblank(CUr.CustCat)) then begin
    CCatr.Code = CUr.CustCat;
    if (ReadFirstMain(CCatr,1,true)) then begin
      if (nonblank(CCatr.ClassType)) then begin
        fn = StringToLongInt(fldname); 
        if (fn==0) then begin 
          plbl = CUr.CustCat;
        end else begin
          objam = CountObjects(CCatr.ClassType); 
          if (objam>=fn) then begin
            ExtractElemFromSet(CCatr.ClassType,fn,sset);
            plbl = sset;
          end;
        end;
      end;
    end;  
  end;
LSetCUClassLabel:;  
  SetCUClassLabel = res;
  return;
end;

function Boolean SetHWCOClassLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  Integer fn,objam;
  string 255 typ;
  record COCUServiceVc COCUServicer;
  record ContractClassBlock CCb;
  row ContractClassBlock CCbrw;
  Integer i,rwcnt;
  integer wn;
  string 60 sset;
  
  res = true;
  plbl = subset; 
  if (CurWindow<=0) then begin goto LSetHWCOClassLabel; end;
  wn = MotherWindow(CurWindow);  
  if (wn<=0) then begin goto LSetHWCOClassLabel; end;
  if (GetWindowClass(wn)!="COCUServiceDClass") then begin goto LSetHWCOClassLabel; end;
  GetWindowRecord(wn,COCUServicer);
  if (nonblank(COCUServicer.Class)) then begin
    BlockLoad(CCb);
    rwcnt = MatRowCnt(CCb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CCb,i,CCbrw);
      if (CCbrw.Code==COCUServicer.Class) then begin
        if (nonblank(CCbrw.HWCOClassType)) then begin
          fn = StringToLongInt(fldname); 
          if (fn==0) then begin 
            plbl = COCUServicer.Class;
          end else begin
            objam = CountObjects(CCbrw.HWCOClassType); 
            if (objam>=fn) then begin
              ExtractElemFromSet(CCbrw.HWCOClassType,fn,sset);
              plbl = sset;
            end;
          end;

        end;
      end;
    end;
  end;
LSetHWCOClassLabel:;  
  SetHWCOClassLabel = res;
  return;
end;

function Boolean SetDIClassLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  Integer fn,objam;
  string 255 typ;
  record INVc INr;
  record ITVc ITr;
  integer wn;
  string 60 sset;
  
  res = true;
  plbl = subset; 
  if (CurWindow<=0) then begin goto LSetDIClassLabel; end;
  wn = MotherWindow(CurWindow);  
  if (wn<=0) then begin goto LSetDIClassLabel; end;
  if (GetWindowClass(wn)!="INDClass") then begin goto LSetDIClassLabel; end;
  GetWindowRecord(wn,INr);
  if (nonblank(INr.Group)) then begin
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
      if (nonblank(ITr.ClassType)) then begin
        fn = StringToLongInt(fldname); 
        if (fn==0) then begin 
          plbl = INr.Group;
        end else begin
          objam = CountObjects(ITr.ClassType); 
          if (objam>=fn) then begin
            ExtractElemFromSet(ITr.ClassType,fn,sset);
            plbl = sset;
          end;
        end;
      end;
    end;  
  end;
LSetDIClassLabel:;  
  SetDIClassLabel = res;
  return;
end;

function string 60 SetTileLabel(Integer tilenr,var Integer colnr)
begin
  string 60 res;
  record ItemTileLabelBlock itlr;
  row ItemTileLabelBlock itlrw;
  Integer i,rwcnt;
  
  colnr = 20;
  BlockLoad(itlr); 
  rwcnt = MatRowCnt(itlr); 
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(itlr,i,itlrw);    
    if (itlrw.TileNr==tilenr) then begin
      res = itlrw.Label;
      colnr = itlrw.colnr;
      goto LSetTileLabel;
    end;
  end;
LSetTileLabel:;  
  SetTileLabel = res;
  return;
end;

global
function string 60 TileUserDefined(string dclass,Integer tilenr,var Integer colnr)
begin
  string 60 res;

  if (dclass=="IVDClass") then begin
    res = SetTileLabel(tilenr,colnr);
  end;
  if (dclass=="POSPIVCashDClass") then begin
    res = SetTileLabel(tilenr,colnr);
  end;
  if (dclass=="RestAccDClass") then begin
    res = SetTileLabel(tilenr,colnr);
  end;
  if (dclass=="RestAccOldDClass") then begin
    res = SetTileLabel(tilenr,colnr);
  end;
  TileUserDefined = res;
  return;
end;

global
procedure FindOTforAcc(string accstr,var string types)
BEGIN
  Integer i,rwcnt;
  record OTCheckBlock OTCheckr;
  row OTCheckBlock otcrw;
  
  BlockLoad(OTCheckr);
  rwcnt = MatRowCnt(OTCheckr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(OTCheckr,i,otcrw);
    if (AccInRange(accstr,otcrw.Accs)) then begin
      if (nonblank(types)) then begin
        types = types & "," & otcrw.ObjType;
      end else begin
        types = otcrw.ObjType;
      end;
    end;
  end;  
  return;
END;

global
procedure FindOTforPRClass(string accstr,var string types)
BEGIN
  Integer i,rwcnt;
  record PRClassBlock PRClassb;
  row PRClassBlock PRClassrw; 
  
  BlockLoad(PRClassb);
  rwcnt = MatRowCnt(PRClassb);
  types = "";
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(PRClassb,i,PRClassrw);
    if (PRClassrw.Code==accstr) then begin  
      types = PRClassrw.OTType;
      i = rwcnt;
    end;
  end;  
  return;
END;

global
procedure FindClTypeforPRClass(string accstr,var string types)
BEGIN
  Integer i,rwcnt;
  record PRClassBlock PRClassb;
  row PRClassBlock PRClassrw; 
  
  BlockLoad(PRClassb);
  rwcnt = MatRowCnt(PRClassb);
  types = "";
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(PRClassb,i,PRClassrw);
    if (PRClassrw.Code==accstr) then begin  
      types = PRClassrw.PRClType;
      i = rwcnt;
    end;
  end;  
  return;
END;

function Boolean SetAssPRClLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  Integer fn,objam;
  string 255 typ;
  record PRVc PRr;
  record PRClassBlock PRClassb;
  integer wn;
  string 60 sset;
  
  res = true;
  plbl = subset; 
  if (CurWindow<=0) then begin goto LSetAssPRClLabel; end;
  wn = MotherWindow(CurWindow);  
  if (wn<=0) then begin goto LSetAssPRClLabel; end;
  if (GetWindowClass(wn)!="PRDClass") then begin goto LSetAssPRClLabel; end;
  GetWindowRecord(wn,PRr);
  if (nonblank(PRr.PRClass)) then begin
    FindClTypeforPRClass(PRr.PRClass,typ);   
    if (nonblank(typ)) then begin
      fn = StringToLongInt(fldname); 
      if (fn==0) then begin 
        plbl = PRr.PRClass;
      end else begin
        objam = CountObjects(typ); 
        if (objam>=fn) then begin
          ExtractElemFromSet(typ,fn,sset);
          plbl = sset;
        end;
      end;
    end;  
  end;
LSetAssPRClLabel:;  
  SetAssPRClLabel = res;
  return;
end;

function Boolean SetTrObjectLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  string 255 typ;
  record TRVc TRr;
  row TRVc TRrw;
  integer fn,objam,rw,rwcnt,wn,rownr;
  record VIVc VIr;
  row VIVc VIrw;
  record ExpVc Expr;
  row ExpVc Exprw;
  record IVVc IVr;
  row IVVc IVrw;
  record SDVc SDr;
  row SDVc SDrw;
  record SRVc SRr;
  row SRVc SRrw;
  record SHVc SHr;
  row SHVc SHrw;
  record OPVc OPr;
  row OPVc OPrw;
  record IPVc IPr;
  row IPVc IPrw;
  record QTVc QTr;
  row QTVc QTrw;
  record ORVc ORr;
  row ORVc ORrw;
  record WSVc WSr;
  row WSVc WSrw;
  string 60 sset,accnr;
  row PMBlock PMrw;
  record CLInVc CLInr;
  record CLOutVc CLOutr;
  record CostAccBlock CostAccRec;
  record AccBlock ARAccRec;
  record INVc INr;
  string 255 tstr,location;
  record PRVc PRr;
  record Bud1Vc Bud1r;
  record Bud2Vc Bud2r;
    
  res = false;
  plbl = subset;
  if (CurWindow>0) then begin
  wn = MotherWindow(CurWindow);
  if (wn>0) then begin
    if (GetWindowClass(wn)=="TRDClass") then begin 
      GetWindowRecord(wn,TRr);
      rownr = WindowActiveRow(wn);
      MatRowGet(TRr,rownr,TRrw);
      accnr = TRrw.AccNumber;
    end;
    if (GetWindowClass(wn)=="SDDClass") then begin 
      GetWindowRecord(wn,SDr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(SDr,rownr,SDrw);
        accnr = SDrw.CostAcc;
      end;
      if (blank(accnr)) then begin
        accnr = SDr.CostAcc;
      end;
    end;
    if (GetWindowClass(wn)=="SRDClass") then begin 
      GetWindowRecord(wn,SRr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(SRr,rownr,SRrw);
        accnr = SRrw.SRVarAcc;
      end;
      if (blank(accnr)) then begin
        accnr = SRr.SRVarAcc;
      end;
    end;
    if (GetWindowClass(wn)=="OPDClass") then begin 
      GetWindowRecord(wn,OPr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(OPr,rownr,OPrw);
        tstr = OPrw.PayMode;
        if (blank(tstr)) then begin
          tstr = OPr.PayMode;
        end;
        if (GetPMRow(tstr,PMrw)) then begin end;
        accnr = PMrw.AccNr;
      end;
      if (blank(accnr)) then begin
//        accnr = OPr.CostAcc;
      end;
    end;
    if (GetWindowClass(wn)=="IPDClass") then begin 
      GetWindowRecord(wn,IPr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(IPr,rownr,IPrw);
        tstr = IPrw.PayMode;
        if (blank(tstr)) then begin
          tstr = IPr.PayMode;
        end;
        if (GetPMRow(tstr,PMrw)) then begin end;
        accnr = PMrw.AccNr;
      end;
      if (blank(accnr)) then begin
//        accnr = IPr.CostAcc;
      end;
    end;
    if (GetWindowClass(wn)=="SHDClass") then begin 
      GetWindowRecord(wn,SHr);
      rownr = WindowActiveRow(wn);
        if (rownr>=0) then begin
        MatRowGet(SHr,rownr,SHrw);
        BlockLoad(CostAccRec);
        BlockLoad(ARAccRec);
        location = SHrw.Location;
        if (blank(location)) then begin
          location = SHr.Location;
        end;
        if (ReadFirstItem(SHrw.ArtCode,INr,true,true)) then begin end;
        if (GetCOSAcc(SHrw.CostAcc,SHr.CustCode,location,ARAccRec,INr,CostAccRec.ItemGroupAccounts,false,0,accnr,tstr)==false) then begin
        end;
      end;
    end;
    if (GetWindowClass(wn)=="VIDClass") then begin
      GetWindowRecord(wn,VIr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(VIr,rownr,VIrw);
        accnr = VIrw.AccNumber;
      end else begin
        accnr = VIr.APAcc;
        if (VIr.WithHoldingTax<>0) then begin
          accnr = FindWithHoldAcc(VIr.APAcc,VIr.Objects);
        end;  
      end;
    end;
    if (GetWindowClass(wn)=="IVDClass") then begin
      GetWindowRecord(wn,IVr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        accnr = IVrw.SalesAcc;
      end else begin
        accnr = IVr.ARAcc;
      end;
    end;
    if (GetWindowClass(wn)=="QTDClass") then begin
      GetWindowRecord(wn,QTr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(QTr,rownr,QTrw);
        accnr = QTrw.SalesAcc;
      end else begin
        accnr = "";
      end;
    end;
    if (GetWindowClass(wn)=="ORDClass") then begin
      GetWindowRecord(wn,ORr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(ORr,rownr,ORrw);
        accnr = ORrw.SalesAcc;
      end else begin
        accnr = "";
      end;
    end;
    if (GetWindowClass(wn)=="ExpDClass") then begin 
      GetWindowRecord(wn,Expr);
      rownr = WindowActiveRow(wn);
      MatRowGet(Expr,rownr,Exprw);
      accnr = Exprw.AccNumber;
    end;
    if (GetWindowClass(wn)=="CLInDClass") then begin 
      GetWindowRecord(wn,CLInr);
        if (GetPMRow(CLInr.PayMode,PMrw)) then begin end;
      accnr = PMrw.AccNr;
    end;   
    if (GetWindowClass(wn)=="CLOutDClass") then begin 
      GetWindowRecord(wn,CLOutr);
      if (GetPMRow(CLOutr.PayMode,PMrw)) then begin end;
      accnr = PMrw.AccNr;
    end;   
    if (GetWindowClass(wn)=="PRDClass") then begin 
      GetWindowRecord(wn,PRr);
      accnr = PRr.PRClass;
    end;   
    if (GetWindowClass(wn)=="WSDClass") then begin 
      GetWindowRecord(wn,WSr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(WSr,rownr,WSrw);
        accnr = WSrw.CostAcc;
      end;
      if (blank(accnr)) then begin
        accnr = WSr.CostAcc;
      end;
    end;
    if (GetWindowClass(wn)=="Bud1DClass") then begin 
      GetWindowRecord(wn,Bud1r);
      accnr = Bud1r.AccNumber;
    end;
    if (GetWindowClass(wn)=="Bud2DClass") then begin 
      GetWindowRecord(wn,Bud2r);
      accnr = Bud2r.AccNumber;
    end;
    if (blank(accnr)) then begin
      accnr = OuterReadSetTrObjectLabel(accnr);
    end;

//      accnr = GetWindowNameArg(wn);
    fn = StringToLongInt(fldname);
    if (fn==0) then begin 
      plbl = accnr;
      res = true;
    end else begin
      if (GetWindowClass(wn)=="PRDClass") then begin 
        FindOTforPRClass(accnr,typ);
      end else begin
        FindOTforAcc(accnr,typ);
      end;   
      objam = CountObjects(typ); 
      if (objam>=fn) then begin
        ExtractElemFromSet(typ,fn,sset);
        plbl = sset;
        res = true;
      end;    
    end;
  end;
  end;
  SetTrObjectLabel = res;
  return;
end;

function Boolean SetPRDLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  record PrManagerLabelBlock PMLr;
  
  plbl = subset;
  BlockLoad(PMLr);  
  switch (fldname) begin
    case "Leader":  plbl = PMLr.PrManager1Label;
    case "Leader2":  plbl = PMLr.PrManager2Label;
    case "Leader3":  plbl = PMLr.PrManager3Label;
    case "Leader4":  plbl = PMLr.PrManager4Label;
    case "Leader5":  plbl = PMLr.PrManager5Label;
  end;
  if (nonblank(plbl)) then begin 
    res = true;
  end;
  SetPRDLabel = res;
  return;
end;

function Boolean SetLocalMachineLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  record LocalMachineLBlock LMLr;
  
  plbl = subset;
  BlockLoad(LMLr);  
  switch (fldname) begin
    case "UserStr1":  plbl = LMLr.UserStr1Label;
    case "UserStr2":  plbl = LMLr.UserStr2Label;
    case "UserStr3":  plbl = LMLr.UserStr3Label;
    case "UserStr4":  plbl = LMLr.UserStr4Label;
    case "UserStr5":  plbl = LMLr.UserStr5Label;
  end;
  if (nonblank(plbl)) then begin 
    res = true;
  end;
  SetLocalMachineLabel = res;
  return;
end;

function Boolean SetCredManAppDLabel(string subset,string fldname,var string plbl)
begin
  Boolean res;
  record CMAppUserLabelBlock CMAr;
  
  plbl = subset;
  BlockLoad(CMAr);  
  switch (fldname) begin
    case "UserStr01": plbl = CMAr.UserStr01;
    case "UserStr02": plbl = CMAr.UserStr02;
    case "UserStr03": plbl = CMAr.UserStr03;
    case "UserStr04": plbl = CMAr.UserStr04;
    case "UserStr05": plbl = CMAr.UserStr05;
    case "UserStr06": plbl = CMAr.UserStr06;
    case "UserStr07": plbl = CMAr.UserStr07;
    case "UserStr08": plbl = CMAr.UserStr08;
    case "UserStr09": plbl = CMAr.UserStr09;
    case "UserStr10": plbl = CMAr.UserStr10;
    case "UserStr11": plbl = CMAr.UserStr11;
    case "UserStr12": plbl = CMAr.UserStr12;
    case "UserStr13": plbl = CMAr.UserStr13;
    case "UserStr14": plbl = CMAr.UserStr14;
    case "UserStr15": plbl = CMAr.UserStr15;
    case "UserStr16": plbl = CMAr.UserStr16;
    case "UserStr17": plbl = CMAr.UserStr17;
    case "UserStr18": plbl = CMAr.UserStr18;
    case "UserStr19": plbl = CMAr.UserStr19;
    case "UserStr20": plbl = CMAr.UserStr20;
  end;
  if (nonblank(plbl)) then begin 
    res = true;
  end;
  SetCredManAppDLabel = res;
  return;
end;

global
function string 60 UserDefined(string fnr,string fldname)
begin
  string 60 res;
  
  res = "";
  if (fnr=="CUVc") then begin
    if (SetCUDLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="ActVc") then begin
    if (SetActDLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="INVc") then begin
    if (SetINDLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="VARINSClass") then begin
    if (SetAssitedVarietyLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="CUClassSClass") then begin
    if (SetCUClassLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="HWCOClassSClass") then begin
    if (SetHWCOClassLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="TRObjSClass") then begin
    if (SetTrObjectLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="DIClassSClass") then begin
    if (SetDIClassLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="AccBlock") then begin
    if (SetAccTLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="AssPRClSClass") then begin
    if (SetAssPRClLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="PRVc") then begin
    if (SetPRDLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="LocalMachineSetVc") then begin
    if (SetLocalMachineLabel(res,fldname,res)) then begin end;
  end;
  if (fnr=="CredManAppVc") then begin
    if (SetCredManAppDLabel(res,fldname,res)) then begin end;
  end;
  UserDefined = res;
  return;
end;

procedure LoginClassShortcutAction(Integer buttonnr)
begin
  Integer wn;
  Integer i,rwcnt;
  record LocalLoginBlock LocalLoginRec;
  row LocalLoginBlock LocalLoginrw;
  record USRowVc USRowr;
  Boolean found;
  
  wn = CurWindow;
  GetWindowRecord(wn,USRowr);
  WindowDeactivatefield(wn);
  BlockLoad(LocalLoginRec);
  rwcnt = MatRowCnt(LocalLoginRec);
  for (i=0;i<rwcnt;i=i+1) begin
    if (i==(buttonnr-1)) then begin
      MatRowGet(LocalLoginRec,i,LocalLoginrw);
      found = true;
      goto LLoginClassShortcutAction;
    end;
  end;  
LLoginClassShortcutAction:;
  if (found) then begin
    USRowr.Name = LocalLoginrw.Code;    
    PutWindowRecord(wn,USRowr);
    WindowFieldGoto(wn,USRowr,-1,"Password",true);
    ShowFingerprintVerificationUI("HansaWorld Standard ERP","Please verify your identity by using your fingerprint","",false);
  end;
  return;
end;

global
procedure LoginClassShortcut1()
begin
  LoginClassShortcutAction(1);
  return;
end;

global
procedure LoginClassShortcut2()
begin
  LoginClassShortcutAction(2);
  return;
end;

global
procedure LoginClassShortcut3()
begin
  LoginClassShortcutAction(3);
  return;
end;

global
procedure LoginClassShortcut4()
begin
  LoginClassShortcutAction(4);
  return;
end;

global
procedure LoginClassShortcut5()
begin
  LoginClassShortcutAction(5);
  return;
end;

global
procedure LoginClassShortcut6()
begin
  LoginClassShortcutAction(6);
  return;
end;

global
procedure LoginClassShortcut7()
begin
  LoginClassShortcutAction(7);
  return;
end;

global
procedure LoginClassShortcut8()
begin
  LoginClassShortcutAction(8);
  return;
end;

global
procedure LoginClassShortcut9()
begin
  LoginClassShortcutAction(9);
  return;
end;

global
procedure LoginClassShortcut10()
begin
  LoginClassShortcutAction(10);
  return;
end;

global
procedure LoginClassShortcut11()
begin
  LoginClassShortcutAction(11);
  return;
end;

global
procedure LoginClassShortcut12()
begin
  LoginClassShortcutAction(12);
  return;
end;

global
procedure LoginClassShortcut13()
begin
  LoginClassShortcutAction(13);
  return;
end;

global
procedure LoginClassShortcut14()
begin
  LoginClassShortcutAction(14);
  return;
end;

global
procedure LoginClassShortcut15()
begin
  LoginClassShortcutAction(15);
  return;
end;

global
procedure LoginClassShortcut16()
begin
  LoginClassShortcutAction(16);
  return;
end;

global
function Integer MaxVarPasteCnt()
begin
  MaxVarPasteCnt = 40;
  return;
end;

global
function string 60 SetVarietyCode(Integer posx,Integer posy,string itemcode)
begin
  Array string 20 vars;
  string 60 res;

  if (FillAndPrepareVarCodes(vars,posy,itemcode)) then begin
    res = vars[posx];
  end;
  SetVarietyCode = res;
  return;
end;

global
function Integer CntVarietyCode(Integer posy,var Array string vars)
begin
  Integer i;
  Integer wn;

  wn = MotherWindow(CurWindow);
  if (FillAndPrepareVarCodes(vars,posy,GetWindowNameArg(wn))) then begin
    i = 0;
    while(nonblank(vars[i+1])) begin
      i = i + 1;
    end;
  end;
  if (i==0) then begin
    i = 1; // Then we get one line in the matrix of a one variety item.
  end;
  CntVarietyCode = i;
  return;
end;

global
function Integer CntVarietyTheCodes(Integer posy,var Array string vars)
begin
  Integer i;
  Integer wn;

  wn = MotherWindow(CurWindow);
  if (FillAndPrepareVarTheCodes(vars,posy,GetWindowNameArg(wn))) then begin
    i = 0;
    while(nonblank(vars[i+1])) begin
      i = i + 1;
    end;
  end;
  if (i==0) then begin
    i = 1; // Then we get one line in the matrix of a one variety item.
  end;
  CntVarietyTheCodes = i;
  return;
end;

global
function Integer VarietyMatMax(Integer ypos)
begin
  Integer res;
  res = ypos;
  if (GuiType==kGuiWindowsDesktop or GuiType==kGuiCocoa) then begin
    if (ypos>12) then begin
      res = 12;
    end;
  end;
  VarietyMatMax = res;
end;

global
procedure ItemStatusUserSettings(string usercode,var Boolean InStockf,var Boolean OrddOutf,var Boolean POQtyf,var Boolean Shpblef,
                                 var Boolean GPf,var Boolean NotRsrvdf,var Boolean GPPrcf,var Boolean DiscUPrf,var Boolean Instock2f,
                                 var Boolean Varf,var Boolean LeadDatef,var Boolean Statf,var Boolean Locsf,var Boolean CostPricef)
BEGIN
  record ItemStatusSettBlock ISSb;
  record ItemStatUserVc ISUr;
  
  ISUr.Signature = usercode;
  if (ReadFirstMain(ISUr,1,true)) then begin
    InStockf = ISUr.InStock!=0;
    OrddOutf = ISUr.OrddOut!=0;
    POQtyf = ISUr.POQty!=0;
    Shpblef = ISUr.Shpble!=0;
    GPf = ISUr.GP!=0;
    NotRsrvdf = ISUr.NotRsrvd!=0;
    GPPrcf = ISUr.GPPrc!=0;
    DiscUPrf = ISUr.DiscUPr!=0;
    Instock2f = ISUr.Instock2!=0;
    Varf = ISUr.Var!=0;
    LeadDatef = ISUr.LeadDate!=0;
    Statf = ISUr.Statf!=0;
    Locsf = ISUr.Loc!=0;
    CostPricef = ISUr.InPrice!=0;
  end else begin
    BlockLoad(ISSb);
    InStockf = ISSb.InStock!=0 or (HasModIN and IsStandardProduct);
    OrddOutf = ISSb.OrddOut!=0 or (HasModSO and IsStandardProduct);
    POQtyf = ISSb.POQty!=0 or (HasModPO and IsStandardProduct);
    Shpblef = ISSb.Shpble!=0 or (HasModIN and IsStandardProduct);
    GPf = ISSb.GP!=0;
    NotRsrvdf = ISSb.NotRsrvd!=0;
    GPPrcf = ISSb.GPPrc!=0;
    DiscUPrf = ISSb.DiscUPr!=0;
    Instock2f = ISSb.Instock2!=0;
    Varf = ISSb.Var!=0;
    LeadDatef = ISSb.LeadDate!=0;
    Statf = ISSb.Statf!=0;
    Locsf = ISSb.Loc!=0;
    CostPricef = ISSb.InPrice!=0;
  end;
  RETURN;
END;

global
procedure TAccGroupBoxes(var Boolean SCustCodef,var Boolean SVECodef,var Boolean SArtCodef,var Boolean SSpecf,var Boolean SObjectsf,
                         var Boolean SUserCodef,var Boolean SQuantf,var Boolean STextf)
BEGIN
  record TTRVc TTRr;
  record TAccGroupVc TAccGroupr;
  Integer wn;
    
  SCustCodef = false; SVECodef = false; SArtCodef = false; SSpecf = false; SObjectsf = false; SUserCodef = false; SQuantf = false; STextf = false;
  wn = CurWindow;
  if (wn<=0) then begin goto LTAccGroupBoxes; end;
  if (GetWindowClass(wn)!="TTRDClass") then begin goto LTAccGroupBoxes; end;
  GetWindowRecord(wn,TTRr);
  TAccGroupr.Code = TTRr.TAccGroup;
  if (ReadFirstMain(TAccGroupr,1,true)) then begin
/*  
    SCustCodef = TAccGroupr.SCustCode!=0;
    SVECodef = TAccGroupr.SVECode!=0;
    SArtCodef = TAccGroupr.SArtCode!=0;
    SSpecf = TAccGroupr.SSpec!=0;
    SObjectsf = TAccGroupr.SObjects!=0;
    SUserCodef = TAccGroupr.SUserCode!=0;
    SQuantf = TAccGroupr.SDocQuant!=0;
    STextf = TAccGroupr.SText!=0;
*/    
  end;
LTAccGroupBoxes:;  
  RETURN;
END;

global
function Boolean CUVATNrColumn()
begin
  record CustomerSettingBlock CSb;
  
  BlockLoad(CSb);
  CUVATNrColumn = CSb.ShowRegNr1notVATNr==0;
  return;
end;

global
function string 20 GetMenuCode(string menunr)
begin
  record BarMenuSetBlock MenuSetbl;
  string 20 menucode;

  BlockLoad(MenuSetbl);
  Switch (menunr) begin
    case "1": menucode = MenuSetbl.Menu1;
    case "2": menucode = MenuSetbl.Menu2;
    case "3": menucode = MenuSetbl.Menu3;
    case "4": menucode = MenuSetbl.Menu4;
  end;
  GetMenuCode = menucode;
  return;
end;

global
function Boolean ReadPOSButtons(string windowclass,string pbcode,longint page,var string bc1,var string bc2,var string compname,var record POSButtonsVc POSBr,var Integer acnt)
begin
  Boolean res;
  Boolean pbgf;
  Boolean found;
  record BaseCurBlock BCb;
  record CYBlock CYb;
  //longint page;
  
  //page = 1; // should be parameter...
  acnt = 0;
  BlockLoad(BCb);
  bc1 = BCb.BaseCur1;
  bc2 = BCb.BaseCur2;
  BlockLoad(CYb);
  compname = CYb.CompName;
  
  pbgf = true;
  
  //StopAlert("ReadPOSButtons wclass: " & windowclass & " pbcode: " & pbcode & " page: " & page);
  
  POSBr.WindowClass = windowclass;
  POSBr.POSButtonGroupCode = pbcode;
  POSBr.Page = page;
  found = ReadFirstMain(POSBr,3,true);
  
  if (found) then begin
    res = found;
    acnt = acnt + 1;
    goto LReadPOSButtonsout;
  end;
  
  //StopAlert("found==false wclass: " & windowclass & " pbcode: " & pbcode & " page: " & page);
  pbgf = false;
  POSBr.WindowClass = windowclass;
  POSBr.POSButtonGroupCode = "";
  POSBr.Page = page;
  found = ReadFirstMain(POSBr,3,true);
  
  res = found;
  if (found==false) then begin
    res = found;
    acnt = acnt + 1;
    goto LReadPOSButtonsout;
  end;
    
LReadPOSButtonsout:;

//,var record POSButtonsVc POSBr,
//LogText(0,"ReadPosButtons(" &  windowclass & "," & pbcode & "," & page & ") -> " & bc1 & "," & bc2 & "," & compname & "," & acnt);
  ReadPOSButtons = res;
  return;
end;

global
function Boolean TestConfigurationEnabler(string teststr)
begin
  Boolean res;
  record ModuleBlock Modb;
  
  BlockLoad(Modb);
  switch (teststr) begin
    case "ExpensesEnabler": res = Modb.ExpensesEnabler!=0;
    case "CashLedgerEnabler": res = Modb.CashLedgerEnabler!=0;
    case "FixedAsset2Enabler": res = Modb.FixedAsset2Enabler!=0;
    case "ProjectPlaningEnabler": res = Modb.ProjectPlaningEnabler!=0;
    case "StockEnabler": res = Modb.StockEnabler!=0;
    case "EmailEnabler": res = Modb.EmailEnabler!=0;
  end;
  TestConfigurationEnabler = res;
  return;
end;

global
procedure CntPOSCurrencies(var Array string acrncy,var Array Boolean achangecrncyf,var Integer acnt)
begin
  record POSCurrenciesBlock POSb;
  record BaseCurBlock BCb;
  Integer pos;
  string 255 crncy;
  
  BlockLoad(BCb);
  BlockLoad(POSb);
  acnt = 0;
  pos = 0;
  ExtractObj(POSb.Currencies,pos,crncy);
  while (nonblank(crncy)) begin
    acrncy[acnt] = crncy;
    achangecrncyf[acnt] = SetInSet(crncy,POSb.ChangeCurrencies);
    acnt = acnt + 1;
    ExtractObj(POSb.Currencies,pos,crncy);
  end;
  if (SetInSet(BCb.BaseCur1,POSb.Currencies)==false) then begin
    acrncy[acnt] = BCb.BaseCur1;
    achangecrncyf[acnt] = true;
    acnt = acnt + 1;
  end;
  return;
end;

global
procedure CntNPTSPaymentCurrencies(var Array string alabel,var Array string acrncy,var Array Integer apaymenttype,var Array string apaymentmode,var Integer acnt)
begin
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  CntNPTSPaymentCurrenciesRemote(LMb.LocalMachineCode,alabel,acrncy,apaymenttype,apaymentmode,acnt);
  return;
end;

global
function Boolean AllowedInCountry(integer countrycode)
begin 
  Boolean res;
  record CYBlock CYBl;
  
  res = true;
  BlockLoad(CYBl);
  if (CYBl.VATLaw==countrycode) then begin 
    res = false;
  end;
  AllowedInCountry = res;
  return;
end; 

global
function string 255 RemainingEinvoicesQuantity()
begin
  string 255 res;
  record LicensesVc Lr;
  Boolean found;
  val q;
  
  if (IsStandardProduct) then begin
    if (HasLocalization("FIN,NOR,SWE")==false) then begin
      goto LRemainingEinvoicesQuantity; 
    end;
    if (HasEInvoicing==false) then begin
      goto LRemainingEinvoicesQuantity; 
    end;
    /*
    CUr.Code = IVr.CustCode;
    ReadFirstMain(CUr,1,true);

    if (EInvoiceForCustomer(IVr.CAEAFlag,IVr.CurncyCode,CUr)==false) then begin 
      goto LRemainingEinvoicesQuantity; 
    end;
    */
    found = true;
    Lr.Function = "HasEInvoicing";
    while (LoopKey("ActiveFunction",Lr,1,found)) begin 
      if (found) then begin
        q = q + Lr.Qty - Lr.UsedQty;
      end;
    end;
    if (q<0) then begin q = 0; end;
    res = "Available Electronic Invoices to send " & q;
  end;

LRemainingEinvoicesQuantity:;  
  RemainingEinvoicesQuantity = res;
  return;
end; 
