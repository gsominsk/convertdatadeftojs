external function roundmode SetRoundModeD(Integer);
external function LongInt DateDiff(Date,Date);

global
function Boolean FilterSymbs(Integer flags,LongInt symbnr)
begin
  Boolean res;
  
  res = true;
  switch (flags) begin
    case 0: // all
    case 1:
      if (symbnr!=1) then begin res = false; end;
    case 2:
      if (symbnr!=2) then begin res = false; end;
    case 3:
      if (symbnr!=3) then begin res = false; end;
  end;
  FilterSymbs = res;
  return;
end;

global
function LongInt ActPos(Time atim)
BEGIN
  LongInt res;
  
  res = GetHour(atim)*17;
  res = res+(GetMinute(atim)*17.00)/60.00;
  ActPos = res;
  RETURN;
END;

global
function LongInt ActLen(Time stim,Time atim)
BEGIN
  LongInt res;
  
  res = GetHour(atim)*17;
  res = res+(GetMinute(atim)*17.00)/60.00;
  ActLen = res;
  RETURN;
END;

global
function LongInt ResLen(Date dp,Date sdp,Time stp,LongInt maxdays,LongInt rndd,Integer dmode)
begin
  LongInt res;
  val dstep;
  LongInt modstep;
  val min;
  
  dstep = ResourceColumnWidth;
  modstep = 1;
  if ((dmode==2) or (dmode==3)) then begin modstep = 24.00; end;
  res = DateDiff(sdp,dp);
//  if (rndd) then res += 1;
  res = res * dstep * modstep;
  if (GetHour(stp)==-1) then begin
    switch (rndd) begin
      case 1:
        res = res + dstep * modstep;
    end;
  end else begin
    switch (dmode) begin
      case 0:
        switch (rndd) begin
          case 0:
            res = res + (GetHour(stp)*dstep)/24.00;
          case 1:
            res = res + Round((GetHour(stp)*dstep)/24.00,SetRoundModeD(0));
        end;
        res = res + ((GetMinute(stp)*dstep)/60.00)/24.00;
      case 1:
        switch (rndd) begin
          case 0:
            res = res + (GetHour(stp)*dstep)/24.00;
          case 1:
            res = res + Round((GetHour(stp)*dstep)/24.00,SetRoundModeD(0));
        end;
        res = res + ((GetMinute(stp)*dstep)/60.00)/24.00;
      case 2:
        switch (rndd) begin
          case 0:
            res = res + (GetHour(stp)*dstep);
          case 1:
            res = res + Round((GetHour(stp)*dstep),SetRoundModeD(0));
        end;
        res = res + ((GetMinute(stp)*dstep)/60.00);
      case 3:
        switch (rndd) begin
          case 0:
            res = res + (GetHour(stp)*dstep);
          case 1:
            res = res + Round((GetHour(stp)*dstep),SetRoundModeD(0));
        end;
        res = res + ((GetMinute(stp)*dstep)/60.00);
    end;
  end;
  if (res<0) then begin res = 0; end;
//  if (res>=(maxdays*dstep*modstep)) then res = (maxdays*dstep*modstep);
  if (res>=(maxdays*dstep)) then begin res = (maxdays*dstep); end;
  ResLen = res;
  return;
end;
