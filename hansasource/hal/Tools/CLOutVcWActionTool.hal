external procedure WarnFutureDate(Boolean,Date);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function string 255 GetCustomerOnAccountAC(string);
external function string 255 GetSupplierOnAccountAC(string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure CLOutSumup(var record CLOutVc);
external function LongInt DateDiff(Date,Date);
external procedure RemoveOldCustObjects(string,var string);
external procedure PastePMInCLOut(var record CLOutVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure RemoveOldUserObjects(string,var string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean GetPMTAX(string,var val);
external procedure CalcCLOut(record CLOutVc);

global
procedure CLOutVc_PasteTotal(var record CLOutVc CLOutp)
BEGIN
  CalcCLOut(CLOutp);
  RETURN;
END;

global
procedure CLOutVc_PasteVATCode(var record CLOutVc CLOutp)
BEGIN
  CalcCLOut(CLOutp);
  RETURN;
END;

global
procedure CLOutVc_PasteNetVal(var record CLOutVc CLOutp)
BEGIN
  record RoundBlock RoundRec;
  val vatv,t;

  BlockLoad(RoundRec);  
  if (nonblank(CLOutp.VATCode)) then begin
    MulVATIV(CLOutp.VATCode,CLOutp.NetVal,vatv,t,0,0);
    vatv = Round(vatv,GetVATRoundMode(RoundRec));
    CLOutp.TAX1Sum = Round(t,GetVATRoundMode(RoundRec));
  end;
  if (GetPMTAX(CLOutp.PayMode,t)) then begin end;
  if (nonblank(t)) then begin
    t = t*CLOutp.Total;
    CLOutp.TAX1Sum = Round(t/100,GetTotalRoundMode(RoundRec));
  end;
  CLOutp.VATVal = vatv;
  CLOutp.Total = CLOutp.NetVal + CLOutp.VATVal + CLOutp.TAX1Sum;  
  RETURN;
END;

global
procedure CLOutVc_PastePerson(var record CLOutVc CLOutp,Integer wnst,string efstr)
BEGIN
  record UserVc USr;
  string 255 tstr;
  record CUVc UserContactr;

  USr.Code = CLOutp.Person;
  if (ReadFirstMain(USr,1,true)) then begin end;
  UserContactr.Code = USr.CustCode;
  if (ReadFirstMain(UserContactr,1,true)) then begin end;
  CLOutp.CUName = USr.Name;
  CLOutp.SalesGroup = USr.SalesGroup;
  CLOutp.Addr0 = UserContactr.InvAddr0;
  CLOutp.Addr1 = UserContactr.InvAddr1;
  CLOutp.Addr2 = UserContactr.InvAddr2;
  CLOutp.Addr3 = UserContactr.InvAddr3;
  CLOutp.Addr4 = UserContactr.InvAddr4;
  if (wnst!=0) then begin//Rs_normal
    if ((efstr!=CLOutp.Person) and (nonblank(efstr))) then begin
      tstr = CLOutp.Objects;
      RemoveOldUserObjects(efstr,tstr);
      CLOutp.Objects = tstr;
    end;    
  end;
  tstr = CLOutp.Objects;
  if (nonblank(tstr)) then begin tstr = tstr & ","; end;
  CLOutp.Objects = tstr & USr.PersObjx;
  CLOutp.Comment = USr.BankAcc;
  RETURN;
END;

procedure CLOutGetRate(var record CLOutVc CLOutp)
BEGIN
  val from,to1,to2,base1,base2;
  string 10 curncy
 
  curncy = CLOutp.CurncyCode;
  GetFullCurncyRate(curncy,CLOutp.TransDate,from,to1,to2,base1,base2);
  CLOutp.CurncyCode = curncy;
  CLOutp.FrRate = from;
  CLOutp.ToRateB1 = to1;
  CLOutp.ToRateB2 = to2;
  CLOutp.BaseRate1 = base1;
  CLOutp.BaseRate2 = base2;
  RETURN;
END;

global
procedure CLOutVc_PasteCurncyCode(var record CLOutVc CLOutp)
BEGIN
  CLOutGetRate(CLOutp);
  RETURN;
END;

global
procedure CLOutVc_PastePayMode(var record CLOutVc CLOutp)
BEGIN
  val t,t1;
  
  PastePMInCLOut(CLOutp);
  if (GetPMTAX(CLOutp.PayMode,t)) then begin end;
  t = t * CLOutp.Total;
  t = t/100;
  t1 = CLOutp.Total + t;
  CLOutp.Total = t1;
  CLOutp.Total = t1;
  RETURN;
END;

global
procedure CLOutVc_PasteTransDate(var record CLOutVc CLOutp)
BEGIN
  WarnFutureDate(true,CLOutp.TransDate);
  CLOutGetRate(CLOutp);
  RETURN;
END;

global
procedure CLOutVc_PasteCorspCode(var record CLOutVc CLOutp,Integer rownr)
BEGIN
  record CLCorspVc CLCorspr;
  row CLOutVc CLOutrw;
  
  if (rownr<0) then begin
    CLCorspr.Code = CLOutp.CorspCode;
    if (ReadFirstMain(CLCorspr,1,true)) then begin
      CLOutp.CorspComment = CLCorspr.Comment;
    end;
  end else begin
    MatRowGet(CLOutp,rownr,CLOutrw);
    CLCorspr.Code = CLOutrw.CorspCode;
    if (ReadFirstMain(CLCorspr,1,true)) then begin
      CLOutrw.Comment = CLCorspr.Comment;
    end;
    MatRowPut(CLOutp,rownr,CLOutrw);
  end;
  RETURN;
END;

global
function Integer CLOutVc_PasteVECode(var record CLOutVc CLOutp,string efstr,Boolean allf)
begin
  integer res;
  record CUVc VEr; 
  string 255 tstr;
  row PMBlock PMrw;
  record AccVc Accr;
  
  if (allf) then begin
    if ((efstr!=CLOutp.CUCode) and (nonblank(efstr))) then begin
      tstr = CLOutp.Objects;
      RemoveOldCustObjects(efstr,tstr);
      CLOutp.Objects = tstr;
    end;
  end;
  VEr.Code = CLOutp.CUCode;
  if (ReadFirstMain(VEr,1,true)) then begin
    GetPMRow(CLOutp.PayMode,PMrw);
    Accr.AccNumber = PMrw.AccNr;
    ReadFirstMain(Accr,1,true);
    if (nonblank(Accr.Curncy)) and (nonblank(VEr.VECurncyCode)) then begin
      if (Accr.Curncy!=VEr.VECurncyCode) then begin
        res = 20806;
        goto LCLOutVc_PasteVECode;
      end;
    end;
    CLOutp.CUName = VEr.Name;
    CLOutp.Addr0 = VEr.InvAddr0;
    CLOutp.Addr1 = VEr.InvAddr1;
    CLOutp.Addr2 = VEr.InvAddr2;
    CLOutp.Addr3 = VEr.InvAddr3;
    CLOutp.Addr4 = VEr.InvAddr4;
    if (allf) then begin
      if (blank(Accr.Curncy)) then begin
        CLOutp.CurncyCode = VEr.VECurncyCode;      
      end;
      CLOutGetRate(CLOutp);
      tstr = CLOutp.Objects;
      if (nonblank(tstr)) and nonblank(VEr.VEObjects) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & VEr.VEObjects;
      CLOutp.Objects = tstr;
    end;
  end;
LCLOutVc_PasteVECode:;  
  CLOutVc_PasteVECode = res;
  return;
end;

global
procedure CLOutVc_PasteCompany(var record CLOutVc CLOutp,integer rownr,Boolean allf)
BEGIN
  record CUVc VEr; 
  row CLOutVc CLoutrw;
  string 255 tstr;
  
  MatRowGet(CLOutp,rownr,CLOutrw);
  switch (CLOutrw.Type) begin
    case 0: 
       VEr.Code = CLOutrw.Company;
       if (ReadFirstMain(VEr,1,true)) then begin
       end;
       CLOutrw.VEName = VEr.Name;
       MatRowPut(CLOutp,rownr,CLOutrw);
    case 4: 
      CLOutrw.APARAcc = GetSupplierOnAccountAC(CLOutrw.Company);
      MatRowPut(CLOutp,rownr,CLOutrw);
  end;
  if (blank(CLoutp.CUName)) or (MatRowCnt(CLOutp)==1) then begin
    VEr.Code = CLOutrw.Company;
    if (ReadFirstMain(VEr,1,true)) then begin
      CLOutp.CUCode = VEr.Code;
      CLOutp.CUName = VEr.Name;
      CLOutp.Addr0 = VEr.InvAddr0;
      CLOutp.Addr1 = VEr.InvAddr1;
      CLOutp.Addr2 = VEr.InvAddr2;
      CLOutp.Addr3 = VEr.InvAddr3;
      CLOutp.Addr4 = VEr.InvAddr4;
      if (allf) then begin
        CLOutp.CurncyCode = VEr.VECurncyCode;
        CLOutGetRate(CLOutp);
        tstr = CLOutp.Objects;
        if (nonblank(tstr)) then begin
          tstr = tstr & ",";
        end;
        tstr = tstr & VEr.VEObjects;
        CLOutp.Objects = tstr;
      end;
    end;
  end;
  RETURN;
END;

global
function Integer CLOutVc_PasteTransNr(var record CLOutVc CLOutp,Integer rownr)
BEGIN
  record APVc APr;
  record ARVc ARr;  
  record ORVc ORr;  
  record POVc POr;  
  record IVVc IVr;  
  record VIVc VIr;  
  record ARPayVc ARPayr;
  row CLOutVc CLOutrw;
  row CLOutVc CLOut2rw;
  Integer res;
  Integer j;
  val amount,rebv;
  string 100 prepcucode;
  record OwnCheckVc OwnCheckr;
  record CheckVc Checkr;
  record APAccBlock APAccRec;
  record AccBlock ARAccb;  
  Integer i,rwcnt;
  row VIVc VIrw; 
  row POVc POrw; 
  row IVVc IVrw; 
  string 255 tstr;
  record ARPayHistVc ARPHr;
  record CUVc CUr;
  Integer IPBookVAT;
  Integer OPBookVAT;
    
  MatRowGet(CLOutp,rownr,CLOutrw);
  switch (CLOutrw.Type) begin
    case 1: 
      ARr.InvoiceNr = CLOutrw.TransNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        if (ARr.ARCurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (ARr.CustCode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin//only Credit Notes                
          BlockLoad(ARAccb);
          IVr.SerNr = CLOutrw.TransNr;
          ReadFirstMain(IVr,1,true);
          CLOutrw.Sum = -ARr.RVal;        
          CLOutrw.Company = ARr.CustCode;        
          CLOutrw.APARAcc = IVr.ARAcc;
          CLOutp.CUCode = ARr.CustCode;
          CLOutVc_PasteVECode(CLOutp,"",false);
          CUr.Code = CLOutrw.Company;
          ReadFirstMain(CUr,1,true);
          if (HasLocalization("POL")) then begin
            IPBookVAT = IVr.IPBookVAT;
          end else begin
            switch (CUr.IPBookVAT) begin
              case 1:
                IPBookVAT = 1;
              case 2:
                IPBookVAT = 0;
              otherwise
                IPBookVAT = ARAccb.IPBookVAT;
            end;
          end;
          if (IPBookVAT!=0) then begin
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              if (nonblank(IVrw.VATCode)) then begin
                tstr = IVrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLOutp.VATCode = tstr;
          end;
        end;
      end else begin
        IVr.SerNr = CLOutrw.TransNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            if (IVr.CurncyCode!=CLOutp.CurncyCode) then begin
              res = 1;
            end;
            if (nonblank(CLOutp.CUCode)) then begin
              if (IVr.CustCode!=CLOutp.CUCode) then begin
                res = 2;
              end;
            end;
            if (res==0) then begin//only Credit Notes                
              CLOutrw.APARAcc = IVr.ARAcc;
              CLOutrw.Sum = IVr.Sum4;        
              CLOutrw.Company = IVr.CustCode;        
              CLOutp.CUCode = IVr.CustCode;
              if (nonblank(IVr.Objects)) and (nonblank(CLOutp.Objects)) then begin
                CLOutp.Objects = CLOutp.Objects & ",";
              end;
              CLOutp.Objects = CLOutp.Objects & IVr.Objects;
              CLOutVc_PasteVECode(CLOutp,"",false);
              BlockLoad(ARAccb);
              CUr.Code = CLOutrw.Company;
              ReadFirstMain(CUr,1,true);
              if (HasLocalization("POL")) then begin
                IPBookVAT = IVr.IPBookVAT;
              end else begin
                switch (CUr.IPBookVAT) begin
                  case 1:
                    IPBookVAT = 1;
                  case 2:
                    IPBookVAT = 0;
                  otherwise
                    IPBookVAT = ARAccb.IPBookVAT;
                end;
              end;
              if (IPBookVAT!=0) then begin
                rwcnt = MatRowCnt(IVr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(IVr,i,IVrw);
                  if (nonblank(IVrw.VATCode)) then begin
                    tstr = IVrw.VATCode;
                    i = rwcnt;
                  end;
                end;
                CLOutp.VATCode = tstr;
              end;          
            end;
          end;
        end;
      end;
    case 2: 
      APr.SerNr = CLOutrw.TransNr;
      if (ReadFirstMain(APr,1,true)) then begin
        if (APr.CurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (APr.VECode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          BlockLoad(APAccRec);
          VIr.SerNr = CLOutrw.TransNr;
          if (ReadFirstMain(Vir,1,true)) then begin
            if (DateDiff(VIr.RebDate,CLOutp.TransDate)>=0) then begin
              rebv = VIr.RebVal;
            end;
            CUr.Code = Vir.VECode;
            ReadFirstMain(CUr,1,true);
            if (HasLocalization("POL")) then begin
              OPBookVAT = VIr.OPBookVAT;
            end else begin
              switch (CUr.OPBookVAT) begin
                case 1:
                  OPBookVAT = 1;
                case 2:
                  OPBookVAT = 0;
                otherwise
                 OPBookVAT = APAccRec.OPBookVAT;
              end;
            end;
            if (OPBookVAT!=0) then begin
              rwcnt = MatRowCnt(VIr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(VIr,i,VIrw);
                if (nonblank(VIrw.VATCode)) then begin
                  tstr = VIrw.VATCode;
                  i = rwcnt;
                end;
              end;
              CLOutp.VATCode = tstr;
            end;
          end;

          for (j=0;j<rownr;j=j+1) begin
            MatRowGet(CLOutp,j,CLOut2rw);
            if (CLOut2rw.Type==CLOutrw.Type) then begin
              if (CLOut2rw.TransNr==CLOutrw.TransNr) then begin
                amount = amount + CLOut2rw.Sum;
              end;
            end;
          end;
          CLOutrw.Sum = APr.RVal - amount - rebv;        
          CLOutrw.Company = APr.VECode;        
          CLOutp.CUCode = APr.VECode;
          CLOutrw.APARAcc = Vir.APAcc;
          CLOutVc_PasteVECode(CLOutp,"",false);
        end;
      end;
    case 4: 
      POr.SerNr = CLOutrw.OrderNr;//special field for OrderNr
      if (ReadFirstMain(POr,1,true)) then begin
        if (POr.CurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (POr.VECode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          BlockLoad(APAccRec);
          if (APAccRec.PreOPBookVAT!=0) then begin
            rwcnt = MatRowCnt(POr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(POr,i,POrw);
              if (nonblank(POrw.VATCode)) then begin
                tstr = POrw.VATCode;
                i = rwcnt;
              end;
            end;
          end;
          CLOutp.VATCode = tstr;
          CLOutrw.Sum = POr.Sum4;        
          CLOutrw.Company = POr.VECode;        
          CLOutp.CUCode = POr.VECode;
          CLOutVc_PasteVECode(CLOutp,"",false);
        end;
      end;
    case 5: 
      ARPayr.CUPNr = CLOutrw.TransNr;
      if (ReadFirstMain(ARPayr,1,true)) then begin
        amount = ARPayr.RVal;
        prepcucode = ARPayr.CustCode;
      end else begin
        ORr.SerNr = CLOutrw.TransNr;
        if (ReadFirstMain(ORr,1,true)) then begin
          if (ORr.CurncyCode!=CLOutp.CurncyCode) then begin
            res = 1;
          end;
          if (nonblank(CLOutp.CUCode)) then begin
            if (ORr.CustCode!=CLOutp.CUCode) then begin
              res = 2;
            end;
          end;
          amount = ORr.Sum4;
          prepcucode = ORr.CustCode;
        end;
      end;
      if (res==0) then begin
        CLOutrw.Sum = amount;
        CLOutrw.Company = prepcucode;        
        ARPHr.CUPNr = CLOutrw.TransNr;
        ReadFirstMain(ARPHr,1,true);
        CLOutrw.APARAcc = ARPHr.ARAcc;
        if (blank(CLOutrw.APARAcc)) then begin       
          CLOutrw.APARAcc = GetSupplierOnAccountAC(CLOutrw.Company);
        end;
        CLOutp.CUCode = prepcucode;
        CLOutVc_PasteVECode(CLOutp,"",false);
      end;
    case 6: 
      Checkr.SerNr = CLOutrw.TransNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        for (j=0;j<rownr;j=j+1) begin
          MatRowGet(CLOutp,j,CLOut2rw);
          if (CLOut2rw.Type==CLOutrw.Type) then begin
            if (CLOut2rw.TransNr==CLOutrw.TransNr) then begin
              amount = amount + CLOut2rw.Sum;
            end;
          end;
        end;
        CLOutrw.Sum = Checkr.Amount - amount;
        CLOutrw.Company = Checkr.CUCode;        
        CLOutp.CUCode = Checkr.CUCode;
        CLOutVc_PasteVECode(CLOutp,"",false);
        CLOutp.CurncyCode = Checkr.CurncyCode;
        CLOutVc_PasteCurncyCode(CLOutp);
      end;
    case 7: 
      OwnCheckr.SerNr = CLOutrw.TransNr;
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        for (j=0;j<rownr;j=j+1) begin
          MatRowGet(CLOutp,j,CLOut2rw);
          if (CLOut2rw.Type==CLOutrw.Type) then begin
            if (CLOut2rw.TransNr==CLOutrw.TransNr) then begin
              amount = amount + CLOut2rw.Sum;
            end;
          end;
        end;
        CLOutrw.Sum = OwnCheckr.Amount - amount;
        CLOutrw.Company = OwnCheckr.VECode;        
        CLOutp.CUCode = OwnCheckr.VECode;
        CLOutVc_PasteVECode(CLOutp,"",false);
        CLOutp.CurncyCode = OwnCheckr.CurncyCode;
        CLOutVc_PasteCurncyCode(CLOutp);
      end;
  end;  
  MatRowPut(CLOutp,rownr,CLOutrw);
  if (rebv!=0) then begin
    CLOutrw.stp = 2;
    CLOutrw.Sum = rebv;
    MatRowPut(CLOutp,MatRowCnt(CLOutp),CLOutrw);
  end;
  CLOutSumup(CLOutp);
  CLOutVc_PasteTransNr = res;
  RETURN;
END;

global
function Integer CLOutVc_PasteTransOfficialSerNr(var record CLOutVc CLOutp,Integer rownr)
BEGIN
  record APVc APr;
  record ARVc ARr;  
  record ORVc ORr;  
  record POVc POr;  
  record IVVc IVr;  
  record VIVc VIr;  
  record ARPayVc ARPayr;
  row CLOutVc CLOutrw;
  row CLOutVc CLOut2rw;
  Integer res;
  Integer j;
  val amount,rebv;
  string 100 prepcucode;
  record OwnCheckVc OwnCheckr;
  record CheckVc Checkr;
  record APAccBlock APAccRec;
  record AccBlock ARAccb;  
  Integer i,rwcnt;
  row VIVc VIrw; 
  row POVc POrw; 
  row IVVc IVrw; 
  string 255 tstr;
  record ARPayHistVc ARPHr;
  record CUVc CUr;
  Integer IPBookVAT;
  Integer OPBookVAT;
    
  MatRowGet(CLOutp,rownr,CLOutrw);
  switch (CLOutrw.Type) begin
    case 1: 
      ARr.OfficialSerNr = CLOutrw.TransOfficialSerNr;
      if (ReadFirstKey("OfficialSerNr",ARr,1,true)) then begin
        if (ARr.ARCurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (ARr.CustCode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin//only Credit Notes                
          BlockLoad(ARAccb);
          IVr.OfficialSerNr = CLOutrw.TransOfficialSerNr;
          ReadFirstMain(IVr,1,true);
          CLOutrw.TransNr = IVr.SerNr;        
          CLOutrw.Sum = -ARr.RVal;        
          CLOutrw.Company = ARr.CustCode;        
          CLOutrw.APARAcc = IVr.ARAcc;
          CLOutp.CUCode = ARr.CustCode;
          CLOutVc_PasteVECode(CLOutp,"",false);
          CUr.Code = CLOutrw.Company;
          ReadFirstMain(CUr,1,true);
          if (HasLocalization("POL")) then begin
            IPBookVAT = IVr.IPBookVAT;
          end else begin
            switch (CUr.IPBookVAT) begin
              case 1:
                IPBookVAT = 1;
              case 2:
                IPBookVAT = 0;
              otherwise
                IPBookVAT = ARAccb.IPBookVAT;
            end;
          end;
          if (IPBookVAT!=0) then begin
            rwcnt = MatRowCnt(IVr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVr,i,IVrw);
              if (nonblank(IVrw.VATCode)) then begin
                tstr = IVrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLOutp.VATCode = tstr;
          end;
        end;
      end else begin
        IVr.OfficialSerNr = CLOutrw.TransOfficialSerNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            if (IVr.CurncyCode!=CLOutp.CurncyCode) then begin
              res = 1;
            end;
            if (nonblank(CLOutp.CUCode)) then begin
              if (IVr.CustCode!=CLOutp.CUCode) then begin
                res = 2;
              end;
            end;
            if (res==0) then begin//only Credit Notes                
              CLOutrw.APARAcc = IVr.ARAcc;
              CLOutrw.Sum = IVr.Sum4;        
              CLOutrw.Company = IVr.CustCode;        
              CLOutp.CUCode = IVr.CustCode;
              if (nonblank(IVr.Objects)) and (nonblank(CLOutp.Objects)) then begin
                CLOutp.Objects = CLOutp.Objects & ",";
              end;
              CLOutp.Objects = CLOutp.Objects & IVr.Objects;
              CLOutVc_PasteVECode(CLOutp,"",false);
              BlockLoad(ARAccb);
              CUr.Code = CLOutrw.Company;
              ReadFirstMain(CUr,1,true);
              if (HasLocalization("POL")) then begin
                IPBookVAT = IVr.IPBookVAT;
              end else begin
                switch (CUr.IPBookVAT) begin
                  case 1:
                    IPBookVAT = 1;
                  case 2:
                    IPBookVAT = 0;
                  otherwise
                    IPBookVAT = ARAccb.IPBookVAT;
                end;
              end;
              if (IPBookVAT!=0) then begin
                rwcnt = MatRowCnt(IVr);
                for (i=0;i<rwcnt;i=i+1) begin
                  MatRowGet(IVr,i,IVrw);
                  if (nonblank(IVrw.VATCode)) then begin
                    tstr = IVrw.VATCode;
                    i = rwcnt;
                  end;
                end;
                CLOutp.VATCode = tstr;
              end;          
            end;
          end;
        end;
      end;
    case 2: 
      APr.SerNr = CLOutrw.TransNr;
      if (ReadFirstMain(APr,1,true)) then begin
        if (APr.CurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (APr.VECode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          BlockLoad(APAccRec);
          VIr.SerNr = CLOutrw.TransNr;
          if (ReadFirstMain(Vir,1,true)) then begin
            if (DateDiff(VIr.RebDate,CLOutp.TransDate)>=0) then begin
              rebv = VIr.RebVal;
            end;
            CUr.Code = VIr.VECode;
            ReadFirstMain(CUr,1,true);
            if (HasLocalization("POL")) then begin
              OPBookVAT = VIr.OPBookVAT;
            end else begin
              switch (CUr.OPBookVAT) begin
                case 1:
                  OPBookVAT = 1;
                case 2:
                  OPBookVAT = 0;
                otherwise
                 OPBookVAT = APAccRec.OPBookVAT;
              end;
            end;
            if (OPBookVAT!=0) then begin
              rwcnt = MatRowCnt(VIr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(VIr,i,VIrw);
                if (nonblank(VIrw.VATCode)) then begin
                  tstr = VIrw.VATCode;
                  i = rwcnt;
                end;
              end;
              CLOutp.VATCode = tstr;
            end;
          end;

          for (j=0;j<rownr;j=j+1) begin
            MatRowGet(CLOutp,j,CLOut2rw);
            if (CLOut2rw.Type==CLOutrw.Type) then begin
              if (CLOut2rw.TransNr==CLOutrw.TransNr) then begin
                amount = amount + CLOut2rw.Sum;
              end;
            end;
          end;
          CLOutrw.Sum = APr.RVal - amount - rebv;        
          CLOutrw.Company = APr.VECode;        
          CLOutp.CUCode = APr.VECode;
          CLOutrw.APARAcc = Vir.APAcc;
          CLOutVc_PasteVECode(CLOutp,"",false);
        end;
      end;
    case 4: 
      POr.SerNr = CLOutrw.OrderNr;//special field for OrderNr
      if (ReadFirstMain(POr,1,true)) then begin
        if (POr.CurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (POr.VECode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          BlockLoad(APAccRec);
          if (APAccRec.PreOPBookVAT!=0) then begin
            rwcnt = MatRowCnt(POr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(POr,i,POrw);
              if (nonblank(POrw.VATCode)) then begin
                tstr = POrw.VATCode;
                i = rwcnt;
              end;
            end;
          end;
          CLOutp.VATCode = tstr;
          CLOutrw.Sum = POr.Sum4;        
          CLOutrw.Company = POr.VECode;        
          CLOutp.CUCode = POr.VECode;
          CLOutVc_PasteVECode(CLOutp,"",false);
        end;
      end;
    case 5: 
      ARPayr.CUPNr = CLOutrw.TransNr;
      if (ReadFirstMain(ARPayr,1,true)) then begin
        amount = ARPayr.RVal;
        prepcucode = ARPayr.CustCode;
      end else begin
        ORr.SerNr = CLOutrw.TransNr;
        if (ReadFirstMain(ORr,1,true)) then begin
          if (ORr.CurncyCode!=CLOutp.CurncyCode) then begin
            res = 1;
          end;
          if (nonblank(CLOutp.CUCode)) then begin
            if (ORr.CustCode!=CLOutp.CUCode) then begin
              res = 2;
            end;
          end;
          amount = ORr.Sum4;
          prepcucode = ORr.CustCode;
        end;
      end;
      if (res==0) then begin
        CLOutrw.Sum = amount;
        CLOutrw.Company = prepcucode;        
        ARPHr.CUPNr = CLOutrw.TransNr;
        ReadFirstMain(ARPHr,1,true);
        CLOutrw.APARAcc = ARPHr.ARAcc;
        if (blank(CLOutrw.APARAcc)) then begin       
          CLOutrw.APARAcc = GetSupplierOnAccountAC(CLOutrw.Company);
        end;
        CLOutp.CUCode = prepcucode;
        CLOutVc_PasteVECode(CLOutp,"",false);
      end;
    case 6: 
      Checkr.SerNr = CLOutrw.TransNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        for (j=0;j<rownr;j=j+1) begin
          MatRowGet(CLOutp,j,CLOut2rw);
          if (CLOut2rw.Type==CLOutrw.Type) then begin
            if (CLOut2rw.TransNr==CLOutrw.TransNr) then begin
              amount = amount + CLOut2rw.Sum;
            end;
          end;
        end;
        CLOutrw.Sum = Checkr.Amount - amount;
        CLOutrw.Company = Checkr.CUCode;        
        CLOutp.CUCode = Checkr.CUCode;
        CLOutVc_PasteVECode(CLOutp,"",false);
        CLOutp.CurncyCode = Checkr.CurncyCode;
        CLOutVc_PasteCurncyCode(CLOutp);
      end;
    case 7: 
      OwnCheckr.SerNr = CLOutrw.TransNr;
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        for (j=0;j<rownr;j=j+1) begin
          MatRowGet(CLOutp,j,CLOut2rw);
          if (CLOut2rw.Type==CLOutrw.Type) then begin
            if (CLOut2rw.TransNr==CLOutrw.TransNr) then begin
              amount = amount + CLOut2rw.Sum;
            end;
          end;
        end;
        CLOutrw.Sum = OwnCheckr.Amount - amount;
        CLOutrw.Company = OwnCheckr.VECode;        
        CLOutp.CUCode = OwnCheckr.VECode;
        CLOutVc_PasteVECode(CLOutp,"",false);
        CLOutp.CurncyCode = OwnCheckr.CurncyCode;
        CLOutVc_PasteCurncyCode(CLOutp);
      end;
  end;  
  MatRowPut(CLOutp,rownr,CLOutrw);
  if (rebv!=0) then begin
    CLOutrw.stp = 2;
    CLOutrw.Sum = rebv;
    MatRowPut(CLOutp,MatRowCnt(CLOutp),CLOutrw);
  end;
  CLOutSumup(CLOutp);
  CLOutVc_PasteTransOfficialSerNr = res;
  RETURN;
END;

function val CLOutPrepaysum(var record CLOutVc CLOutp,LongInt cupnr,Integer currow)
BEGIN
  Integer i,rwcnt;
  row CLOutVc CLOutrw;
  val isp;
  
  isp = blankval;
  rwcnt = MatRowCnt(CLOutp);
  for (i=0;i<rwcnt;i=i+1) begin
    if (currow!=i) then begin
      MatRowGet(CLOutp,i,CLOutrw);
      switch (CLOutrw.Type) begin
        case 4:
          if (CLOutrw.TransNr==cupnr) then begin isp = isp + CLOutrw.Sum; end;
      end;
    end;  
  end;
  CLOutPrepaysum = isp;
  RETURN;
END;

procedure OPUsedPrepaysum(LongInt VEPNr,var val usedvp,var val usedvatp)
BEGIN
  record APPayHistVc APPayHistr;
  record VIVc VIr;
  row VIVc VIrw;
  Integer i,rwcnt;
  Boolean TrHs;
  
  usedvp = blankval;
  usedvatp = blankval;
  APPayHistr.VEPNr = VEPNr;
  APPayHistr.FileName = "VIVc";
  TrHs = true;
  while (LoopMain(APPayHistr,2,TrHs)) begin  
    if (APPayHistr.VEPNr!=VEPNr) then begin TrHs = false; end;
    if (APPayHistr.FileName!="VIVc") then begin TrHs = false; end;
    if (TrHs) then begin
      VIr.SerNr = APPayHistr.SerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        rwcnt = MatRowCnt(VIr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VIr,i,VIrw);
          if (VIrw.stp==6) then begin
            if (VIrw.VEPNr==VEPNr) then begin
              usedvp = usedvp + VIrw.Sum;
              usedvatp = usedvatp + VIrw.PrepayAmount;
            end;  
          end;
        end;        
      end;  
    end;  
  end;  
  RETURN;
END;

global
function Integer CLOutVc_PasteOrderNr(var record CLOutVc CLOutp,Integer rownr)
BEGIN
  record APVc APr;
  record ARVc ARr;  
  record ORVc ORr;  
  row ORVc ORrw;  
  record POVc POr;  
  row POVc POrw;  
  row CLOutVc CLOutrw;
  Integer res;
  val t,vatused,rv;
  record OPPVc OPPr;
  record AccBlock ARAccb;
  record APAccBlock APAccRec;
  Integer i,rwcnt;
  string 255 tstr,vatcod;
  record CUVc CUr;
  Integer IPBookVAT;
  Integer OPBookVAT;
  string 60 objstr;
  
  BlockLoad(APAccRec);
  MatRowGet(CLOutp,rownr,CLOutrw);
  switch (CLOutrw.Type) begin
    case 4: 
      POr.SerNr = CLOutrw.OrderNr;
      if (ReadFirstMain(POr,1,true)) then begin
        objstr = POr.Objects;
        if (POr.CurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (POr.VECode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          rv = POr.Sum4 - CLOutPrepaysum(CLOutp,CLOutrw.TransNr,rownr);  
          OPPr.SerNr = CLOutrw.TransNr;
          if (ReadFirstMain(OPPr,1,true)) then begin
            rv = rv - OPPr.PPVal;
          end;  
          OPUsedPrepaysum(CLOutrw.TransNr,t,vatused);
          rv = rv - t;      
          CLOutrw.Sum = rv;                     
          CLOutrw.Company = POr.VECode; 
          if (APAccRec.OnAccUseObj!=0) then begin
            CLOutrw.Objects = objstr;
          end;        
          CLOutp.CUCode = POr.VECode;
          rwcnt = MatRowCnt(POr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(POr,i,POrw);
            if (POrw.Sum!=0) then begin
              if (blank(vatcod)) then begin
                vatcod = POrw.VATCode;
              end else begin
                if (vatcod!=POrw.VATCode) then begin
                  i = rwcnt;
                end;
              end;
            end;
          end;

          CLOutp.VATCode = vatcod;
          CLOutVc_PasteVECode(CLOutp,"",false);
          CUr.Code = POr.VECode;
          ReadFirstMain(CUr,1,true);
          switch (CUr.OPBookVAT) begin
            case 1:
              OPBookVAT = 1;
            case 2:
              OPBookVAT = 0;
            otherwise
             OPBookVAT = APAccRec.OPBookVAT;
          end;
          if (OPBookVAT!=0) then begin
            rwcnt = MatRowCnt(POr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(POr,i,POrw);
              if (nonblank(POrw.VATCode)) then begin
                tstr = POrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLOutp.VATCode = tstr;
          end;          
        end;
      end;
    case 5: 
      ORr.SerNr = CLOutrw.OrderNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        if (ORr.CurncyCode!=CLOutp.CurncyCode) then begin
          res = 1;
        end;
        if (nonblank(CLOutp.CUCode)) then begin
          if (ORr.CustCode!=CLOutp.CUCode) then begin
            res = 2;
          end;
        end;
        if (res==0) then begin
          CLOutrw.Sum = ORr.PrepaidAmount;        
          CLOutrw.Company = ORr.CustCode;        
          CLOutp.CUCode = ORr.CustCode;
          CLOutVc_PasteVECode(CLOutp,"",false);
          BlockLoad(ARAccb);
          CUr.Code = CLOutrw.Company;
          ReadFirstMain(CUr,1,true);
          switch (CUr.IPBookVAT) begin
            case 1:
              IPBookVAT = 1;
            case 2:
              IPBookVAT = 0;
            otherwise
              IPBookVAT = ARAccb.IPBookVAT;
          end;
          if (IPBookVAT!=0) then begin
            rwcnt = MatRowCnt(ORr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(ORr,i,ORrw);
              if (nonblank(ORrw.VATCode)) then begin
                tstr = ORrw.VATCode;
                i = rwcnt;
              end;
            end;
            CLOutp.VATCode = tstr;
          end;          
        end;
      end;
  end;  
  MatRowPut(CLOutp,rownr,CLOutrw);
  CLOutSumup(CLOutp);
  CLOutVc_PasteOrderNr = res;
  RETURN;
END;
