external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure CredManSumup(var record CredManVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetCurUser(var record UserVc);
external function LongInt DateDiff(Date,Date);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external procedure RoundRowSum(string,string,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);

external function val GetCredManRate(Integer,string,val,Date);

global
procedure CredManVc_PasteCurncyCode(var record CredManVc CredManr)
begin
  val from,to1,to2,base1,base2;
  string 5 crncy;
 
  crncy = CredManr.CurncyCode;
  GetFullCurncyRate(crncy,CredManr.TransDate,from,to1,to2,base1,base2);
  CredManr.CurncyCode = crncy;
  CredManr.FrRate = from;
  CredManr.ToRateB1 = to1;
  CredManr.ToRateB2 = to2;
  CredManr.BaseRate1 = base1;
  CredManr.BaseRate2 = base2;
  CredManr.BaseTotalSum = MulRateToBase1(CredManr.CurncyCode,CredManr.TotalSum,from,to1,to2,base1,base2,DefaultCurRoundOff);
  return;
end;

global
function Boolean CredManDchrsum(var record CredManVc CredManr,Integer rownr)
BEGIN
  row CredManvc CredManrw;
  val s;
  Boolean res;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  res = false;
  MatRowGet(CredManr,rownr,CredManrw);
  CalcSum(CredManrw.Quant,CredManrw.Price,CredManrw.PriceFactor,CredManrw.vRebate,s,GenOptRec.UseDiscount);
  RoundRowSum(CredManr.CurncyCode,CredManr.PayDeal,"CredManVc",s);
  if (s!=CredManrw.Sum) then begin
    CredManrw.Sum = s;
    MatRowPut(CredManr,rownr,CredManrw);
    res = true;
  end;
  if (CredManrw.Price==0) then begin res = true; end;
  CredManDchrsum = res;
  RETURN;
END;

global
procedure CredManDchsum(var record CredManVc CredManr,Integer rownr)
BEGIN  
  row CredManVc CredManrw;

  if (rownr>=0) then begin
    MatRowGet(CredManr,rownr,CredManrw);
    SendArtStat(CredManrw.ArtCode,"","",0,0,0,CredManr.TransDate,0);
  end;
  RETURN;
END;

global
function Boolean CredManVc_PasteArtCode(var record CredManVc CredManr,Integer rownr)
BEGIN
  Boolean res;
  record INVc INr;
  row CredManVc CredManrw;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tstr,tax2code,taxtemplatecode;
  Boolean calcprice;
  val UnitFactQuant,UnitFactPrice,Quant;
  Date resp;
  Boolean dummyf;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  Time blankt;

  MatRowGet(CredManr,rownr,CredManrw);
  if (CredManrw.Quant<=0) then begin
    CredManrw.Quant = 1;
  end;
  CredManrw.Price = BlankVal;
  CredManrw.Sum = BlankVal;
  curcode = CredManr.CurncyCode;
  GetFullCurncyRate(curcode,CredManr.TransDate,fr,to1,to2,br1,br2);
  if (GetItemPriceDiscount3(CredManrw.ArtCode,CredManrw.Quant,INr,CredManr.CurncyCode,
                            fr,to1,to2,br1,br2,
                            CredManr.LangCode,CredManr.CustCat,CredManr.PriceList,CredManr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            CredManr.ExportFlag,calcprice,resp,blankt,CredManr.CustCode,true,dummyf,CredManr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
    if (vreb==0) then begin
      vreb = blankval;
    end;
    CredManrw.Price = price;
    CredManrw.Comment = curitemname;
    CredManrw.vRebate = vreb;
    CredManrw.ArtCode = INr.Code;
    CredManrw.PriceFactor = INr.PriceFactor;
    MatRowPut(CredManr,rownr,CredManrw);
    if (CredManDchrsum(CredManr,rownr)) then begin
      CredManDchsum(CredManr,rownr);
    end;
    CredManSumup(CredManr);
    res = true;
  end;
  CredManVc_PasteArtCode = res;
  RETURN;
END;

global
procedure CredManVc_PasteQuant(var record CredManVc CredManr,Integer rownr)
BEGIN
  record INVc INr;
  row CredManVc CredManrw;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tstr,tax2code,taxtemplatecode;
  Boolean calcprice;
  val UnitFactQuant,UnitFactPrice,Quant;
  Date resp;
  Boolean dummyf;
  val fr,to1,to2,br1,br2;
  string 10 curcode;
  Time blankt;

  MatRowGet(CredManr,rownr,CredManrw);
  curcode = CredManr.CurncyCode;
  GetFullCurncyRate(curcode,CredManr.TransDate,fr,to1,to2,br1,br2);
  if (GetItemPriceDiscount3(CredManrw.ArtCode,CredManrw.Quant,INr,CredManr.CurncyCode,
                            fr,to1,to2,br1,br2,
                            CredManr.LangCode,CredManr.CustCat,CredManr.PriceList,CredManr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            CredManr.ExportFlag,calcprice,resp,blankt,CredManr.CustCode,true,dummyf,CredManr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
    if (vreb==0) then begin
      vreb = blankval;
    end;
    CredManrw.Price = price;
    CredManrw.Comment = curitemname;
    CredManrw.vRebate = vreb;
    CredManrw.ArtCode = INr.Code;
    CredManrw.PriceFactor = INr.PriceFactor;
    MatRowPut(CredManr,rownr,CredManrw);
    if (CredManDchrsum(CredManr,rownr)) then begin
      CredManDchsum(CredManr,rownr);
    end;
    CredManSumup(CredManr);
  end;
  RETURN;
END;

global
procedure CredManVc_PastevRebate(var record CredManVc CredManr,Integer rownr)
BEGIN
  if (CredManDchrsum(CredManr,rownr)) then begin
    CredManDchsum(CredManr,rownr);
  end;
  CredManSumup(CredManr);
  RETURN;
END;

procedure AddLineToCredMan(var record CredManVc CredManr,string artcode,val qty,string comment,val price,val vreb,val sum,Integer typ,Integer rw)
begin
  row CredManVc CredManrw;
  record INVc INr;
  
  if (nonblank(artcode)) then begin
    CredManrw.ArtCode = artcode;
    CredManrw.Quant = qty;
    CredManrw.ChargeType = typ;
    MatRowPut(CredManr,rw,CredManrw);
    if (ReadFirstItem(CredManrw.ArtCode,INr,false,false)) then begin
      CredManrw.Comment = INr.Name;
    end;
    if (CredManVc_PasteArtCode(CredManr,rw)) then begin
    end;
    MatRowGet(CredManr,rw,CredManrw);
    if (CredManrw.Sum!=sum) then begin
      CredManrw.Price = sum;
      CredManrw.vRebate = vreb;
      CredManrw.Price = price;
      MatRowPut(CredManr,rw,CredManrw);
      if (CredManDchrsum(CredManr,rw)) then begin
        CredManDchsum(CredManr,rw);
      end;
      CredManSumup(CredManr);
    end;
  end else begin
    if (nonblank(comment)) then begin
      ClearRow(CredManr,CredManrw,1);
      CredManrw.Comment = comment;
      MatRowPut(CredManr,rw,CredManrw);
    end;
  end;
  return;
end;

global
procedure AddCredManTypeMatrix(var record CredManVc CredManr,record CredManTypeVc CredManTyper)
begin
  row CredManTypeVc CredManTyperw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(CredManr,0);
  end;
  rwcnt = MatRowCnt(CredManTyper);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManTyper,i,CredManTyperw);
    AddLineToCredMan(CredManr,CredManTyperw.ArtCode,CredManTyperw.Quant,CredManTyperw.Comment,CredManTyperw.Price,CredManTyperw.vRebate,CredManTyperw.Sum,CredManTyperw.ChargeType,MatRowCnt(CredManr));
  end;
  return;
end;

global
procedure CredManUpdate(var record CredManVc CredManr,Integer rownr,string whichone)
begin
  row CredManVc CredManrw;
  
  switch (whichone) begin
    case "DepositSum": CredManr.DepositPrc = BlankVal;
    case "DepositPrc": CredManr.DepositSum = Round(CredManr.DepositPrc/100 * CredManr.InvSum4,SetRoundModeD(2));
    case "InvSum4":
      if (nonblank(CredManr.DepositPrc)) then begin
        CredManr.DepositSum = Round(CredManr.DepositPrc/100 * CredManr.InvSum4,SetRoundModeD(2));
      end;
    case "Price":
      if (rownr>-1 and rownr<MatRowCnt(CredManr)) then begin
        MatRowGet(CredManr,rownr,CredManrw);
        CredManrw.Sum = CredManrw.Price * CredManrw.Quant;
        CredManrw.vRebate = BlankVal;
        MatRowPut(CredManr,rownr,CredManrw);
      end;
    case "Sum":
      if (rownr>-1 and rownr<MatRowCnt(CredManr)) then begin
        MatRowGet(CredManr,rownr,CredManrw);
        CredManrw.Price = CredManrw.Sum / CredManrw.Quant;
        CredManrw.vRebate = BlankVal;
        MatRowPut(CredManr,rownr,CredManrw);
      end;
  end;
  return;
end;

global
procedure CredManUpdateAndSumup(var record CredManVc CredManr,Integer rownr,string whichone)
begin
  CredManUpdate(CredManr,rownr,whichone);
  CredManSumup(CredManr);
  return;
end;

global
function Boolean PasteCustInCredMan(var record CredManVc CredManr)
begin
  record CUVc CUr;
  record UserVc USr;
  Boolean res;
  
  GetCurUser(USr);
  CUr.Code = CredManr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CredManr.Addr0 = CUr.Name;
    CredManr.CustCat = CUr.CustCat;
    CredManr.OurContact = USr.CurOurContact;
    CredManr.ClientContact = CUr.Person;
    CredManr.ExportFlag = CUr.ExportFlag;
    CredManr.PriceList = CUr.PLCode;
    CredManr.RebCode = CUr.RebCode;
    CredManr.Objects = CUr.Objects;
    CredManr.SalesMan = USr.Code;
    CredManr.CurncyCode = CUr.CurncyCode;
    CredManr.LangCode = CUr.LangCode;
    CredManUpdate(CredManr,-1,"");
    CredManSumup(CredManr);
    res = true;
  end;
  PasteCustInCredMan = res;
  return;
end;

global
procedure CredManVc_PasteType(var record CredManVc CredManr)
begin
  record CredManTypeVc CredManTyper;
  
  CredManTyper.Code = CredManr.Type;
  if (ReadFirstMain(CredManTyper,1,true)) then begin
    CredManr.InstalmentType = CredManTyper.InstalmentType;
    CredManr.InstalmentMonths = CredManTyper.InstalmentMonths;
    CredManr.PayDeal = CredManTyper.PayDeal;
    CredManr.DepositSum = CredManTyper.DepositSum;
    CredManr.DepositPrc = CredManTyper.DepositPrc;
    CredManr.LateRateOption = CredManTyper.LateRateOption;
    CredManr.LateFeeDays = CredManTyper.LateFeeDays;
    CredManr.RateType = CredManTyper.RateType;
    CredManr.Instalment = CredManTyper.Instalment;
    CredManr.IntRate = CredManTyper.IntRate;
    CredManr.ChargeMethod = CredManTyper.ChargeMethod;
    AddCredManTypeMatrix(CredManr,CredManTyper);
    if (CredManr.DepositSum==0) then begin
      CredManr.DepositSum = Round(CredManr.DepositPrc/100 * CredManr.InvSum4,SetRoundModeD(2));
    end;
    CredManUpdate(CredManr,-1,"");
    CredManSumup(CredManr);
  end;
  return;
end;

global
procedure CredManSetDates(var record CredManVc CredManr)
begin
  record CredManSetBlock CredManSetb;
  Date startd,finv,fint;
  
  BlockLoad(CredManSetb);
  startd = CredManr.startDate;
  finv = AddMonth(startd,1);
  finv = AddDay(finv,CredManSetb.InvDay - GetDay(finv));
  if (startd.day>CredManSetb.InvDay) then begin
    fint = finv;
    finv = AddMonth(finv,1);
  end else begin
    fint = AddMonth(finv,-1);
  end;
  CredManr.FirstInvDate = finv;
  CredManr.FirstIntDate = fint;
  CredManUpdate(CredManr,-1,"");
  CredManSumup(CredManr);
  return;
end;

global
function Boolean CredManTypeDchrsum(var record CredManTypeVc CredManTyper,Integer rownr)
BEGIN
  row CredManTypevc CredManTyperw;
  val s;
  Boolean res;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  res = false;
  MatRowGet(CredManTyper,rownr,CredManTyperw);
  CalcSum(CredManTyperw.Quant,CredManTyperw.Price,CredManTyperw.PriceFactor,CredManTyperw.vRebate,s,GenOptRec.UseDiscount);
  s = Round(s,DefaultRoundMode);
  if (s!=CredManTyperw.Sum) then begin
    CredManTyperw.Sum = s;
    MatRowPut(CredManTyper,rownr,CredManTyperw);
    res = true;
  end;
  if (CredManTyperw.Price==0) then begin res = true; end;
  CredManTypeDchrsum = res;
  RETURN;
END;

global
procedure CredManTypeDchsum(var record CredManTypeVc CredManTyper,Integer rownr)
BEGIN
  RETURN;
END;

global
function Boolean CredManTypeVc_PasteArtCode(var record CredManTypeVc CredManTyper,Integer rownr)
BEGIN
  record INVc INr;
  row CredManTypeVc CredManTyperw;
  val vreb;
  Boolean res;

  MatRowGet(CredManTyper,rownr,CredManTyperw);
  if (ReadFirstItem(CredManTyperw.ArtCode,INr,true,false)) then begin
    CredManTyperw.Price = INr.UPrice1;
    CredManTyperw.Comment = INr.Name;
    CredManTyperw.vRebate = vreb;
    CredManTyperw.ArtCode = INr.Code;
    CredManTyperw.PriceFactor = INr.PriceFactor;
    MatRowPut(CredManTyper,rownr,CredManTyperw);
    if (CredManTypeDchrsum(CredManTyper,rownr)) then begin
      CredManTypeDchsum(CredManTyper,rownr);
    end;
//    CredManTypeSumup(CredManTyper);
    res = true;
  end;
  CredManTypeVc_PasteArtCode = res;
  RETURN;
END;

global
procedure CredManTypeVc_PasteQuant(var record CredManTypeVc CredManTyper,Integer rownr)
BEGIN
  record INVc INr;
  row CredManTypeVc CredManTyperw;
  val vreb;

  MatRowGet(CredManTyper,rownr,CredManTyperw);
  if (ReadFirstItem(CredManTyperw.ArtCode,INr,true,false)) then begin
    CredManTyperw.Price = INr.UPrice1;
    CredManTyperw.Comment = INr.Name;
    CredManTyperw.vRebate = vreb;
    CredManTyperw.ArtCode = INr.Code;
    CredManTyperw.PriceFactor = INr.PriceFactor;
    MatRowPut(CredManTyper,rownr,CredManTyperw);
    if (CredManTypeDchrsum(CredManTyper,rownr)) then begin
      CredManTypeDchsum(CredManTyper,rownr);
    end;
//    CredManTypeSumup(CredManTyper);
  end;
  RETURN;
END;

global
procedure CredManTypeVc_PastevRebate(var record CredManTypeVc CredManTyper,Integer rownr)
BEGIN
  if (CredManTypeDchrsum(CredManTyper,rownr)) then begin
    CredManTypeDchsum(CredManTyper,rownr);
  end;
//  CredManTypeSumup(CredManTyper);
  RETURN;
END;


global
function Boolean CredManEventVc_PasteArtCode(var record CredManEventVc CredManEventr,Integer rownr)
begin
  Boolean res;
  row CredManEventVc CredManEventrw;
  record INVc INr;

  MatRowGet(CredManEventr,rownr,CredManEventrw);
  if (ReadFirstItem(CredManEventrw.ArtCode,INr,true,false)) then begin
    CredManEventrw.Comment = INr.Name;
    MatRowPut(CredManEventr,rownr,CredManEventrw);
    res = true;
  end;
  CredManEventVc_PasteArtCode = res;
  return;
end;