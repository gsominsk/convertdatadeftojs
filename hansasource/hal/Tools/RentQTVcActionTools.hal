external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure RemoveOldPersObjects(string,var string);
external procedure GetUserObject(string,var string);
external procedure RemoveOldCustObjects(string,var string);
external function Boolean CreateRentQTAdvPriceRow(record RentQTVc,row RentQTVc,var record AdvPriceRecVc,Integer);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external procedure GetPayDealText(string,string,var string);
external procedure FindUserMailboxName(string,var string,var string);
external procedure FindRentINInvItem(string,string,var string,var val,var val,var Boolean);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external procedure SetSalesMan(var string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure RentQTSumup(var record RentQTVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
function Boolean PasteCustInRentQT(var record RentQTVc RentQTp,string efstr,Boolean updatall,var string warntext)
BEGIN
  Boolean found,limitdaysf;
  record CUVc CUr;
  record INVc INr;
  val x,pr,bal,limit;
  val fr,to1,to2,br1,br2;
  record FreightBlock FreightRec;
  string 255 tstr,tstr2,oldSalesMan;
  string 5 crncy;

  if ((efstr!=RentQTp.CustCode) and (nonblank(efstr))) then begin
    tstr = RentQTp.Objects;
    RemoveOldCustObjects(efstr,tstr);
    RentQTp.Objects = tstr;
  end;
  CUr.Code = RentQTp.CustCode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0,limitdaysf)) then begin
    found = true;
    RentQTp.Addr0 = CUr.Name;
    RentQTp.Addr1 = CUr.InvAddr0;
    RentQTp.Addr2 = CUr.InvAddr1;
    RentQTp.Addr3 = CUr.InvAddr2;
    RentQTp.InvAddr3 = CUr.InvAddr3;
    RentQTp.InvAddr4 = CUr.InvAddr4;
    RentQTp.ClientContact = CUr.Person;
    RentQTp.CustCat = CUr.CustCat;
    tstr = RentQTp.Objects;
    if ((nonblank(tstr)) and (nonblank(CUr.Objects))) then begin
      tstr = tstr & ",";
    end;
    tstr = tstr & CUr.Objects;
    RentQTp.Objects = tstr;    
    if (nonblank(CUr.CurncyCode)) then begin
      RentQTp.CurncyCode = CUr.CurncyCode;
      crncy = RentQTp.CurncyCode;
      GetFullCurncyRate(crncy,RentQTp.TransDate,fr,to1,to2,br1,br2);
      RentQTp.CurncyCode = crncy;
      RentQTp.FrRate = fr;
      RentQTp.ToRateB1 = to1; 
      RentQTp.ToRateB2 = to2;
      RentQTp.BaseRate1 = br1;
      RentQTp.BaseRate2 = br2;
    end;
    oldSalesMan = RentQTp.SalesMan;
    SetSalesMan(tstr,CUr.SalesMan);
    RentQTp.SalesMan = tstr;
    GetUserObject(RentQTp.SalesMan,tstr);    
    if ((RentQTp.SalesMan!=oldSalesMan)) then begin
      tstr2 = RentQTp.Objects;
      RemoveOldPersObjects(oldSalesMan,tstr2);
      RentQTp.Objects = tstr2;
      if ((nonblank(RentQTp.Objects)) and (nonblank(tstr))) then begin
        RentQTp.Objects = RentQTp.Objects & ",";
      end;
      RentQTp.Objects = RentQTp.Objects & tstr;
    end;
    RentQTp.LangCode = CUr.LangCode;
    RentQTp.ShipDeal = CUr.ShipDeal;
    RentQTp.ShipMode = CUr.ShipMode;
    RentQTp.PriceList = CUr.PLCode;
    RentQTp.RebCode = CUr.RebCode;
    RentQTp.CustVATCode = CUr.VATCode;
    tstr = RentQTp.PriceList;
    GetPriceList(RentQTp.CustCat,RentQTp.TransDate,RentQTp.StartTime,tstr,RentQTp.InclVAT);
    RentQTp.PriceList = tstr;
    RentQTp.Sorting = CUr.Sorting;
    if (nonblank(CUr.DelAddr0)) then begin
      RentQTp.ShipAddr0 = CUr.Name;
      RentQTp.ShipAddr1 = CUr.DelAddr0;
      RentQTp.ShipAddr2 = CUr.DelAddr1;
      RentQTp.ShipAddr3 = CUr.DelAddr2;
      RentQTp.DelAddr3 = CUr.DelAddr3;
      RentQTp.DelAddr4 = CUr.DelAddr4;
    end else begin
      RentQTp.ShipAddr0 = "";
      RentQTp.ShipAddr1 = "";
      RentQTp.ShipAddr2 = "";
      RentQTp.ShipAddr3 = "";
      RentQTp.DelAddr3 = "";
      RentQTp.DelAddr4 = "";
    end;
    RentQTp.VATNr = CUr.VATNr;
    RentQTp.Phone = CUr.Phone;
    RentQTp.Fax = CUr.Fax;
    RentQTp.eMail = CUr.eMail;
    RentQTp.ExportFlag = CUr.ExportFlag;
    RentQTp.PayDeal = CUr.PayDeal;
    RentQTp.InvComment = CUr.OrderComment;
    if (updatall) then begin
      RentQTp.InvoiceToCode = CUr.InvoiceToCode;    
      if (nonblank(CUr.WarnText1)) then begin
        warntext = CUr.WarnText1;
      end;
    end;
  end;
  PasteCustInRentQT = found;
  RETURN;
END;

global
function Boolean PasteAgreementInRentQT(var record RentQTVc RentQTp,Boolean updatall,var string warntext)
BEGIN
  Boolean found;
  record AgreementVc Agreementr;
  record INVc INr;
  val s0,s1,s2,s3,s4;
  val fr,to1,to2,br1,br2;
  record FreightBlock FreightRec;
  string 255 tstr;
  string 5 crncy;

  Agreementr.SerNr = RentQTp.AgreementNr;
  if (ReadFirstMain(Agreementr,1,true)) then begin
    found = true;
    RentQTp.Addr0 = Agreementr.Addr0;
    RentQTp.Addr1 = Agreementr.Addr1;
    RentQTp.Addr2 = Agreementr.Addr2;
    RentQTp.Addr3 = Agreementr.Addr3;
    RentQTp.InvAddr3 = Agreementr.InvAddr3;
    RentQTp.InvAddr4 = Agreementr.InvAddr4;
    RentQTp.ClientContact = Agreementr.ClientContact;
    RentQTp.CustCode = Agreementr.CustCode;
    RentQTp.CustCat = Agreementr.CustCat;
    RentQTp.Objects = Agreementr.Objects;
    if (nonblank(Agreementr.CurncyCode)) then begin
      RentQTp.CurncyCode = Agreementr.CurncyCode;
      crncy = RentQTp.CurncyCode;
      GetFullCurncyRate(crncy,RentQTp.TransDate,fr,to1,to2,br1,br2);
      RentQTp.CurncyCode = crncy;
      RentQTp.FrRate = fr;
      RentQTp.ToRateB1 = to1; 
      RentQTp.ToRateB2 = to2;
      RentQTp.BaseRate1 = br1;
      RentQTp.BaseRate2 = br2;
    end;
    SetSalesMan(tstr,Agreementr.SalesMan);
    RentQTp.SalesMan = tstr;
    RentQTp.AgreeType = Agreementr.AgreeType;
    RentQTp.LangCode = Agreementr.LangCode;
    RentQTp.ShipDeal = Agreementr.ShipDeal;
    RentQTp.ShipMode = Agreementr.ShipMode;
    RentQTp.PriceList = Agreementr.PriceList;
    RentQTp.RebCode = Agreementr.RebCode;
    RentQTp.CustVATCode = Agreementr.CustVATCode;
    tstr = RentQTp.PriceList;
    GetPriceList(RentQTp.CustCat,RentQTp.TransDate,RentQTp.StartTime,tstr,RentQTp.InclVAT);
    RentQTp.PriceList = tstr;
    RentQTp.Sorting = Agreementr.Sorting;
    RentQTp.ShipAddr0 = Agreementr.ShipAddr0;
    RentQTp.ShipAddr1 = Agreementr.ShipAddr1;
    RentQTp.ShipAddr2 = Agreementr.ShipAddr2;
    RentQTp.ShipAddr3 = Agreementr.ShipAddr3;
    RentQTp.DelAddr3 = Agreementr.DelAddr3;
    RentQTp.DelAddr4 = Agreementr.DelAddr4;
    RentQTp.VATNr = Agreementr.VATNr;
    RentQTp.Phone = Agreementr.Phone;
    RentQTp.Fax = Agreementr.Fax;
    RentQTp.eMail = Agreementr.eMail;
    RentQTp.ExportFlag = Agreementr.ExportFlag;
    RentQTp.PayDeal = Agreementr.PayDeal;
    RentQTp.InvComment = Agreementr.InvComment;
    if (updatall) then begin
      RentQTp.InvoiceToCode = Agreementr.InvoiceToCode;    
    end;
  end;
  PasteAgreementInRentQT = found;
  RETURN;
END;

function Boolean PasteRentQTInvItem(var record RentQTVc RentQTr,Integer rownr,var string inwarning,Boolean forcepricef)
begin
  Boolean res;
  row RentQTVc RentQTrw;
  record RentResVc RentResr;
  record INVc INr;
  record CUVc CUr;
  val s,price,vreb,baseprice,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice;
  record GeneralOptionBlock GenOptRec;
  string 255 tstr;
  val factor;
  Boolean dummyf;
  Date todat;
  Time blankt;

  BlockLoad(GenOptRec);
  MatRowGet(RentQTr,rownr,RentQTrw);
  if (forcepricef==false) then begin
    RentQTrw.Price = BlankVal;
  end;
  RentQTrw.vRebate = BlankVal;
  RentQTrw.Sum = BlankVal;
  if (GetItemPriceDiscount3(RentQTrw.InvItem,RentQTrw.InvQuant,INr,RentQTr.CurncyCode,
                            RentQTr.FrRate,RentQTr.ToRateB1,RentQTr.ToRateB2,RentQTr.BaseRate1,RentQTr.BaseRate2,
                            RentQTr.LangCode,RentQTr.CustCat,RentQTr.PriceList,RentQTr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            RentQTr.ExportFlag,calcprice,RentQTr.TransDate,blankt,RentQTr.CustCode,true,dummyf,RentQTr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
    if (vreb==0) then begin
      vreb = blankval;
    end;
    RentQTrw.InvItemName = curitemname;
    if (nonblank(INr.WarnText1)) then begin
      inwarning = INr.WarnText1;
    end;
    if (forcepricef) then begin
      RentQTrw.vRebate = BlankVal;
    end else begin
      RentQTrw.Price = price;
      RentQTrw.vRebate = vreb;
    end;
    RentQTrw.VATCode = vatcode;
    CalcSum(RentQTrw.InvQuant,RentQTrw.Price,INr.PriceFactor,RentQTrw.vRebate,s,GenOptRec.UseDiscount);
    CalcSum(RentQTrw.Quant,s,factor,0,s,0);
    RentQTrw.Sum = s;
    MatRowPut(RentQTr,rownr,RentQTrw);
    res = true;
  end;
  RentQTSumup(RentQTr);
  PasteRentQTInvItem = res;
  return;
end;

procedure GetRentINNameStr(record RentINVc RentINr,string langcod2,var string comment)
begin
  row RentINVc RentINrw;
  Integer rwcnt,i;

  comment = RentINr.Name;
  rwcnt = MatRowCnt(RentINr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentINr,1,RentINrw);
    if (RentINrw.LangCode==langcod2) then begin
      comment = RentINrw.Text;
    end;
  end;
  return;
end;

function Boolean PasteRentQTItemAndSerial(record RentQTVc RentQTr,Integer rownr,var string inwarning)
begin
  record INVc INr;
  record RentINVc RentINr;
  row RentQTVc RentQTrw;
  row RentQTVc RentQT2rw;
  record AdvPriceRecVc AdvPriceRecr;
  row AdvPriceRecVc AdvPriceRecrw;
  Integer rwcnt,i;
  string 255 tstr;
  Boolean res;
  string 20 langcode;
  Boolean rentinf,forcepricef;
  val q,s;
  string 50 agreetype;
  Boolean midf;
  Integer rowcnt;
  
  res = false;
  MatRowGet(RentQTr,rownr,RentQTrw);
  if (nonblank(RentQTrw.AgreeType)) then begin
    agreetype = RentQTrw.AgreeType;
  end else begin
    agreetype = RentQTr.AgreeType;
  end;
  RentINr.Code = RentQTrw.ArtCode;
  RentINr.SerialNr = RentQTrw.SerialNr;
  rentinf = ReadFirstMain(RentINr,2,true);
  if (rentinf==false) then begin
    RentINr.Code = RentQTrw.ArtCode;
    rentinf = ReadFirstMain(RentINr,1,true);
  end;
  if (nonblank(RentQTrw.SerialNr)) then begin
    if ((rentinf==false) and (blank(RentINr.Code))) then begin
      RentINr.SerialNr = RentQTrw.SerialNr;
      rentinf = ReadFirstKey("SerialNr",RentINr,1,true);
      if (rentinf) then begin
        RentQTrw.ArtCode = RentINr.Code;
        RentQTrw.Quant = 1;
      end;
    end;
  end;
  INr.Code = RentQTrw.ArtCode;
  if (ReadFirstMain(INr,1,true)) then begin
   if (INr.ItemType==0) or (INr.ItemType==3) then begin
      RentQTrw.Type = 4;
    end else begin
      RentQTrw.Type = 0;
    end;
  end;
  if (rentinf) then begin
    GetRentINNameStr(RentINr,RentQTr.LangCode,tstr);
    RentQTrw.Spec = tstr;
    if (blank(RentQTr.Location)) then begin
      RentQTr.Location = RentINr.OrgLocation;
    end;
    if (RentQTrw.Type==0) then begin
      FindRentINInvItem(RentINr.InvItem,agreetype,tstr,q,s,forcepricef);
      RentQTrw.InvItem = tstr;
      RentQTrw.InvQuant = q;
      RentQTrw.Price = s;
      MatRowPut(RentQTr,rownr,RentQTrw);
      res = PasteRentQTInvItem(RentQTr,rownr,inwarning,forcepricef);
    end else begin
      forcepricef = false;
      RentQTrw.InvItem = RentQTrw.ArtCode;
      RentQTrw.InvQuant = 1;
      MatRowPut(RentQTr,rownr,RentQTrw);
      res = PasteRentQTInvItem(RentQTr,rownr,inwarning,forcepricef);
      MatRowGet(RentQTr,rownr,RentQTrw);
      RentQTrw.InvItem = "";
      if (RentQTrw.Type==1) then begin
        RentQTrw.vRebate = 100;
        RentQTrw.Sum = 0;
      end;
      MatRowPut(RentQTr,rownr,RentQTrw);
    end;
    if (rownr==MatRowCnt(RentQTr)-1) then begin
      midf = false;
    end else begin
      midf = true;
    end;
    rwcnt = MatRowCnt(RentQTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RentQTr,i,RentQT2rw);
      if (RentQT2rw.BelongsTo==rownr+1) then begin
        MatRowDelete(RentQTr,i);
        rwcnt = MatRowCnt(RentQTr);
        i = i - 1;
      end;
    end;
    if (CreateRentQTAdvPriceRow(RentQTr,RentQTrw,AdvPriceRecr,rownr)) then begin
        MatRowGet(AdvPriceRecr,1,AdvPriceRecrw);
      rowcnt = rownr + 1;
      rwcnt = MatRowCnt(AdvPriceRecr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(AdvPriceRecr,i,AdvPriceRecrw);
        ClearRow(RentQTr,RentQT2rw,2);
        RentQT2rw.PeriodType = AdvPriceRecrw.PeriodType;
        RentQT2rw.InvBeforeDays = AdvPriceRecrw.InvBeforeDays;
        RentQT2rw.PeriodUnit = AdvPriceRecrw.PeriodUnit;
        RentQT2rw.PerPrice = AdvPriceRecrw.Price;
        RentQT2rw.PerStartDate = AdvPriceRecrw.StartDate;
        RentQT2rw.PerEndDate = AdvPriceRecrw.EndDate;
        RentQT2rw.Length = AdvPriceRecrw.Length;
        RentQT2rw.Comment = AdvPriceRecrw.Comment;
        RentQT2rw.PLCode = AdvPriceRecrw.PLCode;
        RentQT2rw.BelongsTo = rownr+1;
        if (midf) then begin
          MatRowInsert(RentQTr,rowcnt,RentQT2rw);
        end else begin
          MatRowPut(RentQTr,rowcnt,RentQT2rw);
        end;
        rowcnt = rowcnt + 1;
      end;
    end;
    res = true;
  end;
  if (res==false) then begin
    INr.Code = RentQTrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemNameStr(1,tstr,RentQTr.LangCode,INr.Name,INr.Code)) then begin end;
      RentQTrw.Spec = tstr;
      MatRowPut(RentQTr,rownr,RentQTrw);
      res = true;
      inwarning = INr.WarnText1;
    end;
  end;
  RentQTSumup(RentQTr);
  PasteRentQTItemAndSerial = res;
  return;
end;

global
function Boolean RentQTVc_PasteArtCode(var record RentQTVc RentQTr,Integer rownr,var string inwarning)
BEGIN
  Boolean res;
  
  res = PasteRentQTItemAndSerial(RentQTr,rownr,inwarning);
  RentQTVc_PasteArtCode = res;
  return;
end;

global
function Boolean RentQTVc_PasteSerialNr(var record RentQTVc RentQTr,Integer rownr,var string warning)
BEGIN
  Boolean res;
  
  res = PasteRentQTItemAndSerial(RentQTr,rownr,warning);
  RentQTVc_PasteSerialNr = res;
  RETURN;
END;

global
function Boolean RentQTVc_PasteAgreeType(var record RentQTVc RentQTr,Integer rownr,var string inwarning)
BEGIN
  row RentQTVc RentQTrw;
  row RentQTVc RentQT2rw;
  record AdvPriceRecVc AdvPriceRecr;
  row AdvPriceRecVc AdvPriceRecrw;
  Boolean res;
  string 255 tstr;
  val q,s;
  Boolean forcepricef;
  record RentINVc RentINr;
  string 50 agreetype;
  Boolean rentinf;
  Integer rwcnt,i;
  Boolean midf;
  Integer rowcnt;
  
  if (rownr<0) then begin
    rwcnt = MatRowCnt(RentQTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RentQTr,i,RentQTrw);
      if (blank(RentQTrw.AgreeType)) then begin
        if (RentQTVc_PasteAgreeType(RentQTr,i,inwarning)) then begin
        end;
      end;
    end;
    res = true;
  end else begin
    if (rownr<MatRowCnt(RentQTr)) then begin
      MatRowGet(RentQTr,rownr,RentQTrw);
      if (nonblank(RentQTrw.AgreeType)) then begin
        agreetype = RentQTrw.AgreeType;
      end else begin
        agreetype = RentQTr.AgreeType;
      end;
      RentINr.Code = RentQTrw.ArtCode;
      RentINr.SerialNr = RentQTrw.SerialNr;
      rentinf = ReadFirstMain(RentINr,2,true);
      if (rentinf==false) then begin
        RentINr.Code = RentQTrw.ArtCode;
        rentinf = ReadFirstMain(RentINr,1,true);
      end;
      if (rentinf) then begin
        if (RentQTrw.Type==0) then begin
          FindRentINInvItem(RentINr.InvItem,agreetype,tstr,q,s,forcepricef);//RentQTr.InvItem
          RentQTrw.InvItem = tstr;
          RentQTrw.InvQuant = q;
          RentQTrw.Price = s;
          MatRowPut(RentQTr,rownr,RentQTrw);
          res = PasteRentQTInvItem(RentQTr,rownr,inwarning,forcepricef);
        end else begin
          forcepricef = false;
          RentQTrw.InvItem = RentQTrw.ArtCode;
          RentQTrw.InvQuant = 1;
          MatRowPut(RentQTr,rownr,RentQTrw);
          res = PasteRentQTInvItem(RentQTr,rownr,inwarning,forcepricef);
          MatRowGet(RentQTr,rownr,RentQTrw);
          RentQTrw.InvItem = "";
          if (RentQTrw.Type==1) then begin
            RentQTrw.vRebate = 100;
            RentQTrw.Sum = 0;
          end;
          MatRowPut(RentQTr,rownr,RentQTrw);
        end;
        if (rownr==MatRowCnt(RentQTr)-1) then begin
          midf = false;
        end else begin
          midf = true;
        end;
        rwcnt = MatRowCnt(RentQTr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(RentQTr,i,RentQT2rw);
          if (RentQT2rw.BelongsTo==rownr+1) then begin
            MatRowDelete(RentQTr,i);
            rwcnt = MatRowCnt(RentQTr);
            i = i - 1;
          end;
        end;
        if (CreateRentQTAdvPriceRow(RentQTr,RentQTrw,AdvPriceRecr,rownr)) then begin
          rowcnt = rownr + 1;
          rwcnt = MatRowCnt(AdvPriceRecr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(AdvPriceRecr,i,AdvPriceRecrw);
            ClearRow(RentQTr,RentQT2rw,2);
            RentQT2rw.PeriodType = AdvPriceRecrw.PeriodType;
            RentQT2rw.InvBeforeDays = AdvPriceRecrw.InvBeforeDays;
            RentQT2rw.PeriodUnit = AdvPriceRecrw.PeriodUnit;
            RentQT2rw.PerPrice = AdvPriceRecrw.Price;
            RentQT2rw.PerStartDate = AdvPriceRecrw.StartDate;
            RentQT2rw.PerEndDate = AdvPriceRecrw.EndDate;
            RentQT2rw.Length = AdvPriceRecrw.Length;
            RentQT2rw.Comment = AdvPriceRecrw.Comment;
            RentQT2rw.PLCode = AdvPriceRecrw.PLCode;
            RentQT2rw.BelongsTo = rownr+1;
            if (midf) then begin
              MatRowInsert(RentQTr,rowcnt,RentQT2rw);
            end else begin
              MatRowPut(RentQTr,rowcnt,RentQT2rw);
            end;
            rowcnt = rowcnt + 1;
          end;
        end;
      end;
    end;
  end;
  RentQTVc_PasteAgreeType = res;
  return;
end;

global
function Boolean RentQTVc_PasteType(var record RentQTVc RentQTr,Integer rownr,var string inwarning)
BEGIN
  Boolean res;
  
  res = PasteRentQTItemAndSerial(RentQTr,rownr,inwarning);
  RentQTVc_PasteType = res;
  return;
end;

global
function Boolean RentQTVc_PasteInvItem(var record RentQTVc RentQTr,Integer rownr,var string inwarning)
BEGIN
  Boolean res;
  
  res = PasteRentQTInvItem(RentQTr,rownr,inwarning,false);
  RentQTVc_PasteInvItem = res;
  return;
end;

global
procedure RentQTVc_GetCustomerWarning(var record RentQTVc RentQTr,var string cuwarning)
BEGIN
  record CUVc CUr;
  record AgreementVc Agreer;
  
  cuwarning = "";
  if (nonblank(RentQTr.CustCode)) then begin
    CUr.Code = RentQTr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      cuwarning = CUr.WarnText1;
    end;
  end else begin
    Agreer.SerNr = RentQTr.AgreementNr;
    if (ReadFirstMain(Agreer,1,true)) then begin
      CUr.Code = Agreer.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        cuwarning = CUr.WarnText1;
      end;
    end;
  end;
  return;
end;

global
updating function Integer CreateMailFromRentQTD(record RentQTVc RentQTr,var record MailVc Mailr,var string warning,string pdfform)
BEGIN
  Integer res;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;  
  row RentQTVc RentQTrw;  
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  record RentQTMailBlock RentQTMailr;
  Integer line;
  string 255 docname,fname;
  
  res = 0;
  if (ReadFirstMain(RentQTr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromRentQTD;
  end;  
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  BlockLoad(RentQTMailr);
  CUr.Code = RentQTr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  MArw.RowTyp = 0;
  MArw.AddrCode = CUr.eMail;
  if (nonblank(RentQTr.ClientContact)) then begin
    if (FindCustomerRelation(CUr.Code,RentQTr.ClientContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        MArw.AddrCode = ContactCUr.eMail;
      end;
    end;
  end;
  if (blank(MArw.AddrCode)) then begin
    res = 2289;
    warning = CUr.Code;
    goto LCreateMailFromRentQTD;
  end;
  MatRowPut(Mailr,1,MArw);
  Mailr.Header = RentQTMailr.Header & " " & USetStr(2063);
  Mailr.Header = Mailr.Header & RentQTr.SerNr;
  
  LTxtr.Code = RentQTMailr.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = RentQTMailr.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin 
    CreateRecordLink(Mailr,CurrentCompany,RentQTr,CurrentCompany);  
    CreateRecordLink(RentQTr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);
  
  LTxtr.Code = RentQTMailr.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  AddCRToText(Mailr);
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    tstr = RentQTrw.ArtCode & TAB;
    tstr = tstr & ValToString(RentQTrw.Quant,M4UVal,"",".",0) & TAB;
    tstr = tstr & Left(RentQTrw.Spec,60) & TAB;
    tstr = tstr & RentQTrw.Price & TAB;
    if (RentQTrw.vRebate!=0) then begin
      tstr = tstr & "-" & ValToString(RentQTrw.vRebate,M4UVal,"",".",0) & "%" &  TAB;
    end;
    tstr = tstr & RentQTrw.Sum & TAB;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;
  end;
  AddCRToText(Mailr);
  tstr = TAB & TAB & TAB & "=====";
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;

  tstr = TAB & TAB & TAB & USetStr(2685) & TAB & RentQTr.Sum1;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;
  tstr = TAB & TAB & TAB & USetStr(2686) & TAB & RentQTr.Sum3;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;  
  tstr = TAB & TAB & TAB & USetStr(2687) & TAB & RentQTr.Sum4;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;  
  tstr = USetStr(7021) & " " & RentQTr.ValidUntilDate;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;  
  GetPayDealText(RentQTr.PayDeal,RentQTr.LangCode,tstr);
  tstr = USetStr(3060) & " " & tstr;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;  
  LTxtr.Code = RentQTMailr.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "RentQTForm";
  end;
  fname = "tmp/" & USetStr(2061) & " " & RentQTr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(RentQTr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromRentQTD:;  
  CreateMailFromRentQTD = res;
  RETURN;
END;

global
function Boolean SumupRentRecListQT(var record RentQTVc RentQTr)
begin
  record RentINVc RentINr;
  row RentQTVc RentQTrw;
  row RentQTVc theRentQTrw;
  Integer thepos;
  Integer i,rwcnt;
  Boolean rentinf;
  val newprice;
  val factor,s;
  Boolean res;
  
  thepos = -1;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    RentINr.Code = RentQTrw.ArtCode;
    RentINr.SerialNr = RentQTrw.SerialNr;
    rentinf = ReadFirstMain(RentINr,2,true);
    if (rentinf==false) then begin
      RentINr.Code = RentQTrw.ArtCode;
      rentinf = ReadFirstMain(RentINr,1,true);
    end;
    if (rentinf) then begin
      if (RentINr.RecepyItem!=0) then begin
        if (thepos>-1) then begin
          theRentQTrw.Price = Round(newprice/theRentQTrw.Quant,SetRoundModeD(3));
          CalcSum(theRentQTrw.Quant,theRentQTrw.Price,factor,theRentQTrw.vRebate,s,0);
          theRentQTrw.Sum = s;
          theRentQTrw.InvQuant = 1;
          newprice = 0;
          MatRowPut(RentQTr,thepos,theRentQTrw);
        end;
        thepos = i;
        MatRowGet(RentQTr,thepos,theRentQTrw);
      end;
    end;
    if ((thepos>-1) and (RentQTrw.Type==0) and (i!=thepos)) then begin
      newprice = newprice + RentQTrw.Sum;
      RentQTrw.InvItem = "";
      RentQTrw.Price = BlankVal;
      RentQTrw.Sum = BlankVal;
      MatRowPut(RentQTr,i,RentQTrw);
    end;
  end;
  if (thepos>-1) then begin
    theRentQTrw.Price = Round(newprice/theRentQTrw.Quant,DefaultRoundMode);
    CalcSum(theRentQTrw.Quant,theRentQTrw.Price,factor,theRentQTrw.vRebate,s,0);
    theRentQTrw.Sum = s;
    theRentQTrw.InvQuant = 1;
    MatRowPut(RentQTr,thepos,theRentQTrw);
  end;
  if (thepos>-1) then begin
    res = true;
    RentQTSumup(RentQTr);
  end;
  SumupRentRecListQT = res;
  return;
end;

global
procedure RentQTSumup(var record RentQTVc RentQTp)
BEGIN
  row RentQTVc RentQTrw;
  val s,ms,ms2,temp,s2,taxsum;
  Integer i,rwcnt;
  roundmode roundlines,rndtotal,rndvat;
  record SMVc SMr;/*VATBaseRowType*/
  Integer vatcnt; 
  Boolean skiptotal;
  val sum;

  SetupVATBase(SMr,vatcnt);
  rwcnt = MatRowCnt(RentQTp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(RentQTp,i,RentQTrw);
    temp = MulRateToBase1(RentQTp.CurncyCode,RentQTrw.Sum,RentQTp.FrRate,RentQTp.ToRateB1,RentQTp.ToRateB2,RentQTp.BaseRate1,RentQTp.BaseRate2,DefaultCurRoundOff);
    s = s + RentQTrw.Sum;
    s2 = s2 + temp;
    AddVATBase(SMr,RentQTrw.VATCode,RentQTrw.Sum,blankval,vatcnt,RentQTp.InclVAT,0);
    MatRowPut(RentQTp,i,RentQTrw);
    if (nonblank(RentQTrw.AgreeType)) then begin
      if (RentQTrw.AgreeType!=RentQTp.AgreeType) then begin
        skiptotal = true;
      end;
    end;
  end;
  if (skiptotal==false) then begin
    CalcVATBaseVAT(SMr,RentQTp.InclVAT,0,vatcnt,ms,taxsum);
    GetCurncyRoundoff(RentQTp.CurncyCode,RentQTp.PayDeal,"RentQTVc",rndtotal,roundlines,rndvat);
    ms = Round(ms,rndvat);
    if ((RentQTp.ExportFlag==1) or (RentQTp.ExportFlag==2)) then begin
      if (RentQTp.InclVAT>0) then begin
        ms2 = s - ms;
      end else begin
        ms2 = s;
      end;  
      ms = blankval;
    end else begin
    
      if (RentQTp.InclVAT>0) then begin
        ms2 = s;
      end else begin
        ms2 = s + ms;
      end;  
    end;
    ms2 = ms2 + RentQTp.FrPrice;
    if (RentQTp.InclVAT==0) then begin
      ms2 = ms2 + taxsum;
    end;
    ms2 = Round(ms2,rndtotal);
    RentQTp.Sum1 = s;
    RentQTp.Sum3 = ms;
    RentQTp.Sum4 = ms2;
    RentQTp.TAX1Sum = taxsum;
    if (nonblank(RentQTp.CurncyCode)) then begin
      RentQTp.BaseSum4 = MulRateToBase1(RentQTp.CurncyCode,RentQTp.Sum4,RentQTp.FrRate,RentQTp.ToRateB1,RentQTp.ToRateB2,RentQTp.BaseRate1,RentQTp.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  RETURN;
END;

