external procedure DivPIFactor(val,val,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure RoundRowSum(string,string,string,var val);
external procedure PUCalcPerc(val,string,var val);

procedure PUCalcOneRow(record SysFormatBlock SysFormatRec,record PUVc PUr,Integer rownr,roundmode roundoff,val totvalp,val calcvalp,var val rowcalcvalp,var val restp)
BEGIN    
  row PUVc PUrw;
  val temp,rv,uprice,q;
  string 255 tstr;
  record INVc INr;
  
  MatRowGet(PUr,rownr,PUrw);
  DivPIFactor(PUrw.Quant,PUrw.PIFactor,q); //why extra cost should be per supplier unit not ours ? 
  q = PUrw.Quant;
  switch (PUr.ExtraCostsCalculation) begin 
    case 1:
      if (ReadFirstItem(PUrw.ArtCode,INr,false,false)) then begin
        uprice = INr.Weight;
      end;
    otherwise
      uprice = PUrw.UPrice;
      if (uprice==0) then begin
        ReadFirstItem(PUrw.ArtCode,INr,true,false);
        uprice = INr.InPrice;
/*        
        if (uprice==0) then begin
          uprice = 1.00; //?
        end;
*/        
      end;
  end;
  temp = q*uprice;
  temp = temp*calcvalp;
  temp = temp/totvalp;
  rowcalcvalp = temp/q;
  temp = rowcalcvalp*q;
/*  M4ValRound(rowcalcvalp,roundoff,rowcalcvalp);*/
  rowcalcvalp = Round(rowcalcvalp,SetRoundModeD(5));
  if (rowcalcvalp==0) then begin rowcalcvalp = blankval; end;
  /*if this is not here then
  put qty 106, price 1500 shpcost(in header) 10 and will be 9.999 after recalculating
  M4ToStr just cuts 6th and rest digits*/
  tstr = ValToString(rowcalcvalp,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
  rowcalcvalp = StringToVal(tstr,M45Val);
  rv = rowcalcvalp*q;
/*  SubM4Val(&temp,&rv,&rv);*/
  restp = rv + restp;
  RETURN;
END;

procedure PUUnsortByVal(record PUVc PUp,record PUVc PU2p,Integer column)
BEGIN
  row PUVc PUrw;
  row PUVc PU2rw;
  LongInt rownt;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(PU2p);
  if (rwcnt<1) then begin goto LPUUnsortByVal; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PU2p,i,PU2rw);
    MatRowGet(PUp,PU2rw.OrdRow,PUrw);
    if ((PU2rw.stp==3) or (PU2rw.ovst!=0)) then begin
      goto LSKIPPUROW3;
    end;
    if ((PUrw.stp==3) or (PUrw.ovst!=0)) then begin
      goto LSKIPPUROW3;
    end;
    PUrw.Quant = PU2rw.Quant;
    switch (column) begin
      case 0: PUrw.ShipCost = PU2rw.ShipCost; 
      case 1: PUrw.CustomsCost = PU2rw.CustomsCost; 
      case 2: PUrw.RowCost1 = PU2rw.RowCost1; 
      case 3: PUrw.RowCost2 = PU2rw.RowCost2; 
      case 4: PUrw.RowCost3 = PU2rw.RowCost3; 
      case 5: PUrw.RowCost4 = PU2rw.RowCost4; 
      case 6: PUrw.RowCost5 = PU2rw.RowCost5; 
    end;
    MatRowPut(PUp,PU2rw.OrdRow,PUrw);
LSKIPPUROW3:
  end;
LPUUnsortByVal:;
  RETURN;
END;

procedure PUSortByVal(record PUVc PUp,record PUVc PU2p,Integer column)
BEGIN
  row PUVc PUrw;
  val highest,rv;
  LongInt rownr;
  LongInt temp;
  Integer cnt;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(PUp);
  if (rwcnt<1) then begin goto LPUSortByVal; end;
L22PUSortByVal:;
  highest = blankval;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    if ((PUrw.stp==3) or (PUrw.ovst!=0)) then begin
      goto LSKIPPUROW4;
    end;
    if (PUrw.Quant!=blankval) then begin
      switch(column) begin
        case 0: /* Calculate Shipment Cost */
          rv = PUrw.Quant*PUrw.ShipCost; 
        case 1: /* Calculate Customs Cost */
          rv = StringToVal(PUrw.CustomsCost,M45Val);
          rv = PUrw.Quant*rv;
        case 2: /* Calculate Extra Costs */
          rv = PUrw.Quant*PUrw.RowCost1; 
        case 3: /* Calculate Extra Costs */
          rv = PUrw.Quant*PUrw.RowCost2; 
        case 4: /* Calculate Extra Costs */
          rv = PUrw.Quant*PUrw.RowCost3; 
        case 5: /* Calculate Extra Costs */
          rv = PUrw.Quant*PUrw.RowCost4; 
        case 6: /* Calculate Extra Costs */
          rv = PUrw.Quant*PUrw.RowCost5; 
      end;
      if ((rv>highest) or (highest==blankval)) then begin
        rownr = i;
        highest = rv;
      end;
    end;
LSKIPPUROW4:;    
  end;
  if (rownr==-1) then begin goto LPUSortByVal; end;
  if (cnt>=rwcnt) then begin goto LPUSortByVal; end;
  MatRowGet(PUp,rownr,PUrw);
  if ((PUrw.stp!=3) and (PUrw.ovst==0)) then begin
    temp = PUrw.OrdRow;
    PUrw.OrdRow = rownr;
    MatRowPut(PU2p,cnt,PUrw);
    PUrw.Quant = blankval;
    PUrw.OrdRow = temp;
    MatRowPut(PUp,rownr,PUrw);
  end;
  cnt = cnt + 1;
  if (cnt>=rwcnt) then begin goto LPUSortByVal; end;
  rownr = -1;
  goto L22PUSortByVal;
LPUSortByVal:;
  RETURN;
END;

procedure PUCalcOneRow2(record SysFormatBlock SysFormatRec,record PUVc PUp,Integer rownr,roundmode roundoff,Integer column,val realtotp,var val calctotp)
BEGIN
  val rowtot,add,cost,comp,totnotthisrow;
  val diff,rowdiff,q;
  Boolean inc;
  row PUVc PUrw;

  MatRowGet(PUp,rownr,PUrw);
  if (PUrw.Quant==0) then begin goto LPUCalcOneRow2; end;
  if (realtotp>calctotp) then begin
    diff = realtotp - calctotp;
    switch (column) begin
      case 0: add = 0.001; 
      case 1: add = 0.00001;
      case 2: add = 0.001; 
      case 3: add = 0.001; 
      case 4: add = 0.001; 
      case 5: add = 0.001; 
      case 6: add = 0.001;
    end;    
    inc = true;
  end else begin
    diff = calctotp - realtotp;
    switch (column) begin
      case 0: add = -0.001; 
      case 1: add = -0.00001; 
      case 2: add = -0.001; 
      case 3: add = -0.001; 
      case 4: add = -0.001; 
      case 5: add = -0.001; 
      case 6: add = -0.001; 
    end;    
    inc = false;
  end;
  switch (column) begin
    case 0: cost = PUrw.ShipCost; 
    case 1: cost = StringToVal(PUrw.CustomsCost,M45Val); 
    case 2: cost = PUrw.RowCost1; 
    case 3: cost = PUrw.RowCost2; 
    case 4: cost = PUrw.RowCost3; 
    case 5: cost = PUrw.RowCost4; 
    case 6: cost = PUrw.RowCost5; 
  end;
  comp = blankval;
  while (realtotp==comp) begin
    DivPIFactor(PUrw.Quant,PUrw.PIFactor,q); //why extra cost should be per supplier unit not ours ? 
    q = PUrw.Quant;
    rowtot = q*cost;
    rowtot = Round(rowtot,roundoff);
    totnotthisrow = calctotp - rowtot;
    comp = cost + add;
    comp = q*comp;
    comp = Round(comp,roundoff);
    comp = comp + totnotthisrow;
    if (inc==true) then begin
      rowdiff = comp - realtotp;
      if (comp>realtotp) then begin 
//        if (CompM4Val(&diff,&rowdiff)<0) then
          goto L88PUCalcOneRow2;
      end;

    end else begin
      rowdiff = realtotp - comp;
      if (comp<realtotp) then begin
//        if (CompM4Val(&diff,&rowdiff)>0) then
          goto L88PUCalcOneRow2;
      end;
    end;
    calctotp = comp;
    cost = cost + add;
  end;
L88PUCalcOneRow2:;
  switch (column) begin
    case 0: PUrw.ShipCost = cost; 
    case 1: PUrw.CustomsCost = ValToString(cost,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    case 2: PUrw.RowCost1 = cost; 
    case 3: PUrw.RowCost2 = cost; 
    case 4: PUrw.RowCost3 = cost; 
    case 5: PUrw.RowCost4 = cost; 
    case 6: PUrw.RowCost5 = cost; 
  end;
LPUCalcOneRow2:;
  RETURN;
END;

global
procedure PUSetShipCost(var record PUVc PUp,Integer column)
BEGIN
  record PUVc locPUr;
  row PUVc PUrw;
  Integer i,rwcnt;
  val totval,rv,rest;
  val calcval,rowcalcval,uprice,q;
  record SysFormatBlock SysFormatRec;
  record INVc INr;
  
  BlockLoad(SysFormatRec);
  switch (column) begin
    case 0: calcval = PUp.ShipCost;    // Calculate Shipment Cost 
    case 1: calcval = PUp.CustomsCost; // Calculate Customs Cost 
    case 2: calcval = PUp.Cost1; // Calculate Extra Costs 
    case 3: calcval = PUp.Cost2; // Calculate Extra Costs 
    case 4: calcval = PUp.Cost3; // Calculate Extra Costs 
    case 5: calcval = PUp.Cost4; // Calculate Extra Costs 
    case 6: calcval = PUp.Cost5; // Calculate Extra Costs 
    otherwise goto LPUSetShipCost;
  end;
  rwcnt = MatRowCnt(PUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    if ((PUrw.stp!=3) and (PUrw.ovst==0) and (nonblank(PUrw.ArtCode)) and !(column==1 and PUrw.TREO==kTREO)) then begin
      ReadFirstItem(PUrw.ArtCode,INr,true,false);
//      DivPIFactor(PUrw.Quant,PUrw.PIFactor,q); //why extra cost should be per supplier unit not ours ? 
      q = PUrw.Quant;
      rv = blankval;
      switch (PUp.ExtraCostsCalculation) begin 
        case 1:
          rv = q*INr.Weight;
        otherwise
          uprice = PUrw.UPrice;
          if (uprice==0) then begin
            uprice = INr.InPrice;
          end;
          if (uprice==0) then begin
            uprice = 1.00; //?
          end;
          rv = q*uprice;
      end;
      totval = totval + rv;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    if ((PUrw.stp==3) or (PUrw.ovst!=0) or (blank(PUrw.ArtCode)) or (column==1 and PUrw.TREO==kTREO)) then begin
      goto LSKIPPUROW;
    end;
    PUCalcOneRow(SysFormatRec,PUp,i,DefaultCurRoundOff,totval,calcval,rowcalcval,rest);
    switch (column) begin
      case 0: PUrw.ShipCost = rowcalcval; 
      case 1: PUrw.CustomsCost = ValToString(rowcalcval,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      case 2: PUrw.RowCost1 = rowcalcval; 
      case 3: PUrw.RowCost2 = rowcalcval; 
      case 4: PUrw.RowCost3 = rowcalcval; 
      case 5: PUrw.RowCost4 = rowcalcval; 
      case 6: PUrw.RowCost5 = rowcalcval; 
    end;
    MatRowPut(PUp,i,PUrw);
LSKIPPUROW:;
  end;
  
//  PUSortByVal(PUp,locPUr,column);
  rwcnt = MatRowCnt(locPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    if (rest==calcval) then begin goto L88PUSetShipCost; end;
    MatRowGet(locPUr,i,PUrw);
    if ((PUrw.stp==3) or (PUrw.ovst!=0) or (blank(PUrw.ArtCode))) then begin
      goto LSKIPPUROW2;
    end;
    if (rest!=0) then begin
      PUCalcOneRow2(SysFormatRec,locPUr,i,SetRoundModeD(5),column,calcval,rest);
    end;
    MatRowPut(locPUr,i,PUrw);
LSKIPPUROW2:;
  end;
L88PUSetShipCost:;
//  PUUnsortByVal(PUp,locPUr,column);
LPUSetShipCost:;
  RETURN;
END;


global
procedure PrelPUSumUp(var record PrelPUVc PrelPUr)
BEGIN
  row PrelPUVc PrelPUrw;
  Integer i,rwcnt;
  val t,cc,totqty;
  roundmode roundlines,rndtotal,rndvat;
  
  GetCurncyRoundoff(PrelPUr.CurncyCode,"","PrelPUVc",rndtotal,roundlines,rndvat);
  PrelPUr.SumQuant = blankval;
  PrelPUr.SumCostPrice = blankval;
  PrelPUr.ShipCost = blankval;
  PrelPUr.CustomsCost = blankval;
  PrelPUr.ExtraCost = blankval;
  rwcnt = MatRowCnt(PrelPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPUr,i,PrelPUrw);
    totqty = totqty + PrelPUrw.Quant;
    t = PrelPUrw.Quant*PrelPUrw.CostPrice;
    PrelPUr.SumCostPrice = PrelPUr.SumCostPrice + t;
    t = PrelPUrw.Quant*PrelPUrw.ShipCost;
    PrelPUr.ShipCost = t + PrelPUr.ShipCost;
    PUCalcPerc(PrelPUrw.UPrice,PrelPUrw.CustomsCost,cc);
    t = PrelPUrw.Quant*cc;
    PrelPUr.CustomsCost = t + PrelPUr.CustomsCost;
    PUCalcPerc(PrelPUrw.UPrice,PrelPUrw.Extra,cc);
    t = PrelPUrw.Quant*cc;
    PrelPUr.ExtraCost = t + PrelPUr.ExtraCost;
  end;
  PrelPUr.SumQuant = Round(totqty,SetRoundModeD(2));
  PrelPUr.ShipCost = Round(PrelPUr.ShipCost,SetRoundModeD(3));
  PrelPUr.CustomsCost = Round(PrelPUr.CustomsCost,SetRoundModeD(5));
  PrelPUr.ExtraCost = Round(PrelPUr.ExtraCost,DefaultRoundMode);
  PrelPUr.SumCostPrice = Round(PrelPUr.SumCostPrice,rndtotal);
  RETURN;
END;

procedure PrelPUCalcOneRow(record SysFormatBlock SysFormatRec,record PrelPUVc PrelPUr,Integer rownr,roundmode roundoff,val totvalp,val calcvalp,var val rowcalcvalp,var val restp)
BEGIN    
  row PrelPUVc PrelPUrw;
  val temp,rv;
  string 255 tstr;
  
  MatRowGet(PrelPUr,rownr,PrelPUrw);
  temp = PrelPUrw.Quant*PrelPUrw.UPrice;
  temp = temp*calcvalp;
  temp = temp/totvalp;
  rowcalcvalp = temp/PrelPUrw.Quant;
  temp = rowcalcvalp*PrelPUrw.Quant;
/*  M4ValRound(rowcalcvalp,roundoff,rowcalcvalp);*/
  rowcalcvalp = Round(rowcalcvalp,SetRoundModeD(5));
  /*if this is not here then
  put qty 106, price 1500 shpcost(in header) 10 and will be 9.999 after recalculating
  M4ToStr just cuts 6th and rest digits*/
  tstr = ValToString(rowcalcvalp,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
  rowcalcvalp = StringToVal(tstr,M45Val);
  rv = rowcalcvalp*PrelPUrw.Quant;
/*  SubM4Val(&temp,&rv,&rv);*/
  restp = rv + restp;
  RETURN;
END;

procedure PrelPUUnsortByVal(record PrelPUVc PrelPUp,record PrelPUVc PrelPU2p,Integer column)
BEGIN
  row PrelPUVc PrelPUrw;
  row PrelPUVc PrelPU2rw;
  LongInt rownt;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(PrelPU2p);
  if (rwcnt<1) then begin goto LPrelPUUnsortByVal; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPU2p,i,PrelPU2rw);
    MatRowGet(PrelPUp,PrelPU2rw.OrdRow,PrelPUrw);
    PrelPUrw.Quant = PrelPU2rw.Quant;
    switch (column) begin
      case 0: PrelPUrw.ShipCost = PrelPU2rw.ShipCost; 
      case 1: PrelPUrw.CustomsCost = PrelPU2rw.CustomsCost; 
      case 2: PrelPUrw.RowCost1 = PrelPU2rw.RowCost1; 
      case 3: PrelPUrw.RowCost2 = PrelPU2rw.RowCost2; 
      case 4: PrelPUrw.RowCost3 = PrelPU2rw.RowCost3; 
      case 5: PrelPUrw.RowCost4 = PrelPU2rw.RowCost4; 
      case 6: PrelPUrw.RowCost5 = PrelPU2rw.RowCost5; 
    end;
    MatRowPut(PrelPUp,PrelPU2rw.OrdRow,PrelPUrw);
  end;
LPrelPUUnsortByVal:;
  RETURN;
END;

procedure PrelPUSortByVal(record PrelPUVc PrelPUp,record PrelPUVc PrelPU2p,Integer column)
BEGIN
  row PrelPUVc PrelPUrw;
  val highest,rv;
  LongInt rownr;
  LongInt temp;
  Integer cnt;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(PrelPUp);
  if (rwcnt<1) then begin goto LPrelPUSortByVal; end;
L22PrelPUSortByVal:;  
  highest = blankval;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPUp,i,PrelPUrw);
    if (PrelPUrw.Quant!=blankval) then begin
      switch(column) begin
        case 0: /* Calculate Shipment Cost */
          rv = PrelPUrw.Quant*PrelPUrw.ShipCost; 
        case 1: /* Calculate Customs Cost */
          rv = StringToVal(PrelPUrw.CustomsCost,M45Val);
          rv = PrelPUrw.Quant*rv;
        case 2: /* Calculate Extra Costs */
          rv = PrelPUrw.Quant*PrelPUrw.RowCost1; 
        case 3: /* Calculate Extra Costs */
          rv = PrelPUrw.Quant*PrelPUrw.RowCost2; 
        case 4: /* Calculate Extra Costs */
          rv = PrelPUrw.Quant*PrelPUrw.RowCost3; 
        case 5: /* Calculate Extra Costs */
          rv = PrelPUrw.Quant*PrelPUrw.RowCost4; 
        case 6: /* Calculate Extra Costs */
          rv = PrelPUrw.Quant*PrelPUrw.RowCost5; 
      end;
      if ((rv>highest) or (highest==blankval)) then begin
        rownr = i;
        highest = rv;
      end;
    end;
  end;
  if (rownr==-1) then begin goto LPrelPUSortByVal; end;
  if (cnt>=rwcnt) then begin goto LPrelPUSortByVal; end;
  MatRowGet(PrelPUp,rownr,PrelPUrw);
  temp = PrelPUrw.OrdRow;
  PrelPUrw.OrdRow = rownr;
  MatRowPut(PrelPU2p,cnt,PrelPUrw);
  cnt = cnt + 1;
  PrelPUrw.Quant = blankval;
  PrelPUrw.OrdRow = temp;
  MatRowPut(PrelPUp,rownr,PrelPUrw);
  if (cnt>=rwcnt) then begin goto LPrelPUSortByVal; end;
  rownr = -1;
  goto L22PrelPUSortByVal;
LPrelPUSortByVal:;
  RETURN;
END;

procedure PrelPUCalcOneRow2(record SysFormatBlock SysFormatRec,record PrelPUVc PrelPUp,Integer rownr,roundmode roundoff,Integer column,val realtotp,var val calctotp)
BEGIN
  val rowtot,add,cost,comp,totnotthisrow;
  val diff,rowdiff;
  Boolean inc;
  row PrelPUVc PrelPUrw;

  MatRowGet(PrelPUp,rownr,PrelPUrw);
  if (PrelPUrw.Quant==0) then begin goto LPrelPUCalcOneRow2; end;
  if (realtotp>calctotp) then begin
    diff = realtotp - calctotp;
    switch (column) begin
      case 0: add = 0.001; 
      case 1: add = 0.00001;
      case 2: add = 0.001; 
      case 3: add = 0.001; 
      case 4: add = 0.001; 
      case 5: add = 0.001; 
      case 6: add = 0.001;
    end;    
    inc = true;
  end else begin
    diff = calctotp - realtotp;
    switch (column) begin
      case 0: add = -0.001; 
      case 1: add = -0.00001; 
      case 2: add = -0.001; 
      case 3: add = -0.001; 
      case 4: add = -0.001; 
      case 5: add = -0.001; 
      case 6: add = -0.001; 
    end;    
    inc = false;
  end;
  switch (column) begin
    case 0: cost = PrelPUrw.ShipCost; 
    case 1: cost = StringToVal(PrelPUrw.CustomsCost,M45Val); 
    case 2: cost = PrelPUrw.RowCost1; 
    case 3: cost = PrelPUrw.RowCost2; 
    case 4: cost = PrelPUrw.RowCost3; 
    case 5: cost = PrelPUrw.RowCost4; 
    case 6: cost = PrelPUrw.RowCost5; 
  end;
  comp = blankval;
  while (realtotp==comp) begin
    rowtot = PrelPUrw.Quant*cost;
    rowtot = Round(rowtot,roundoff);
    totnotthisrow = calctotp - rowtot;
    comp = cost + add;
    comp = PrelPUrw.Quant*comp;
    comp = Round(comp,roundoff);
    comp = comp + totnotthisrow;
    if (inc==true) then begin
      rowdiff = comp - realtotp;
      if (comp>realtotp) then begin 
//        if (CompM4Val(&diff,&rowdiff)<0) then
          goto L88PrelPUCalcOneRow2;
      end;

    end else begin
      rowdiff = realtotp - comp;
      if (comp<realtotp) then begin
//        if (CompM4Val(&diff,&rowdiff)>0) then
          goto L88PrelPUCalcOneRow2;
      end;
    end;
    calctotp = comp;
    cost = cost + add;
  end;
L88PrelPUCalcOneRow2:;
  switch (column) begin
    case 0: PrelPUrw.ShipCost = cost; 
    case 1: PrelPUrw.CustomsCost = ValToString(cost,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    case 2: PrelPUrw.RowCost1 = cost; 
    case 3: PrelPUrw.RowCost2 = cost; 
    case 4: PrelPUrw.RowCost3 = cost; 
    case 5: PrelPUrw.RowCost4 = cost; 
    case 6: PrelPUrw.RowCost5 = cost; 
  end;
LPrelPUCalcOneRow2:;
  RETURN;
END;

global
procedure PrelPUSetShipCost(var record PrelPUVc PrelPUp,Integer column)
BEGIN
  record PrelPUVc locPrelPUr;
  row PrelPUVc PrelPUrw;
  Integer i,rwcnt;
  val totval,rv,rest;
  val calcval,rowcalcval;
  record SysFormatBlock SysFormatRec;
  
  BlockLoad(SysFormatRec);
  switch( column) begin
    case 0: calcval = PrelPUp.ShipCost;    // Calculate Shipment Cost 
    case 1: calcval = PrelPUp.CustomsCost; // Calculate Customs Cost 
    case 2: calcval = PrelPUp.Cost1; // Calculate Extra Costs 
    case 3: calcval = PrelPUp.Cost2; // Calculate Extra Costs 
    case 4: calcval = PrelPUp.Cost3; // Calculate Extra Costs 
    case 5: calcval = PrelPUp.Cost4; // Calculate Extra Costs 
    case 6: calcval = PrelPUp.Cost5; // Calculate Extra Costs 
    otherwise goto LPrelPUSetShipCost;
  end;
  rwcnt = MatRowCnt(PrelPUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPUp,i,PrelPUrw);
    rv = PrelPUrw.Quant*PrelPUrw.UPrice;
    totval = totval + rv;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPUp,i,PrelPUrw);
    PrelPUCalcOneRow(SysFormatRec,PrelPUp,i,DefaultCurRoundOff,totval,calcval,rowcalcval,rest);
    switch (column) begin
      case 0: PrelPUrw.ShipCost = rowcalcval; 
      case 1: PrelPUrw.CustomsCost = ValToString(rowcalcval,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      case 2: PrelPUrw.RowCost1 = rowcalcval; 
      case 3: PrelPUrw.RowCost2 = rowcalcval; 
      case 4: PrelPUrw.RowCost3 = rowcalcval; 
      case 5: PrelPUrw.RowCost4 = rowcalcval; 
      case 6: PrelPUrw.RowCost5 = rowcalcval; 
    end;
    MatRowPut(PrelPUp,i,PrelPUrw);
  end;
  PrelPUSortByVal(PrelPUp,locPrelPUr,column);
  rwcnt = MatRowCnt(locPrelPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    if (rest==calcval) then begin goto L88PrelPUSetShipCost; end;
    MatRowGet(locPrelPUr,i,PrelPUrw);
    if (rest!=0) then begin
      PrelPUCalcOneRow2(SysFormatRec,locPrelPUr,i,SetRoundModeD(5),column,calcval,rest);
    end;
    MatRowPut(locPrelPUr,i,PrelPUrw);
  end;
L88PrelPUSetShipCost:;
  PrelPUUnsortByVal(PrelPUp,locPrelPUr,column);
LPrelPUSetShipCost:;
  RETURN;
END;

global
procedure CalculatePrelPURowSum(val qtyp,val upricep,string extras,var val costp,val shipcostp,
                            val extra1,val extra2,val extra3,val extra4,val extra5,
                            string customs,var val sump,Boolean backf,string curncycode,
                            val frrat,val to1,val to2,val b1,val b2)
BEGIN
  val v,t,custom,extra;


  if (backf==false) then begin
    v = MulRateToBase1(curncycode,upricep,frrat,to1,to2,b1,b2,SetRoundModeD(5));            
    t = v;
    if (nonblank(extras)) then begin
      PUCalcPerc(upricep,extras,extra);
    end;
    t = t + extra;
    t = t + shipcostp;
    t = t + extra1;
    t = t + extra2;
    t = t + extra3;
    t = t + extra4;
    t = t + extra5;
    if (nonblank(customs)) then begin
      PUCalcPerc(upricep,customs,custom);
    end;
    t = t + custom;
    sump = qtyp*t;
    sump = Round(sump,DefaultRoundMode);
  end else begin
    if (nonblank(customs)) then begin
      PUCalcPerc(sump,customs,custom);
    end;
    t = sump - custom;
    t = sump - shipcostp;
    t = sump - extra1;
    t = sump - extra2;
    t = sump - extra3;
    t = sump - extra4;
    t = sump - extra5;
    if (nonblank(extras)) then begin
      PUCalcPerc(t,extras,extra);
    end;
    t = t - extra;
    costp = t/qtyp;
    costp = costp + custom;
    costp = costp + shipcostp;
    costp = costp + extra1;
    costp = costp + extra2;
    costp = costp + extra3;
    costp = costp + extra4;
    costp = costp + extra5;
    costp = costp + extra;
    RoundRowSum(curncycode,"","",sump);// round row sum is for 2 and sump is M45Val but I think it should be 2
  end;
  RETURN;
END;

global
procedure PrelPUCalcCostPrice(string item,val pricep,Integer InclVAT,string extra,string curncycode,
                        val frrat,val to1,val to2,val b1,val b2,
                        val shipc,val extra1,val extra2,val extra3,val extra4,val extra5,
                        string custc,var val sump,val qtyp,var val rowsump,string vatcode)
BEGIN
  val vat;
  val t,t1,bas;
  string 2 lvatcode;
  
  sump = blankval;
  if ((pricep==blankval) and (blank(extra)) and
      (shipc==blankval) and (blank(custc))) then begin
    goto LPrelPUCalcCostPrice;
  end;
  //DivBaseRate(curncycode,pricep,frrat,to1,to2,b1,b2,&bas,NIL,5);
  bas = MulRateToBase1(curncycode,pricep,frrat,to1,to2,b1,b2,SetRoundModeD(5));
  if (InclVAT==1) then begin
    if (nonblank(vatcode)) then begin
      lvatcode = vatcode;
    end else begin
      GetItemVATCode(item,0,lvatcode,false); // To support old Purchase Orders
    end;
    MulVATIV(lvatcode,bas,vat,t1,InclVAT,0);
    bas = bas - vat;
  end;  
  sump = sump + bas;
  if (nonblank(extra)) then begin
    PUCalcPerc(bas,extra,t);
    sump = sump + t;
  end;
  sump = sump + shipc;
  if (nonblank(custc)) then begin
    PUCalcPerc(bas,custc,t);
    sump = sump + t;
  end;
  CalculatePrelPURowSum(qtyp,pricep,extra,sump,shipc,
                    extra1,extra2,extra3,extra4,extra5,
                    custc,rowsump,false,curncycode,
                    frrat,to1,to2,b1,b2);
  sump = Round(sump,SetRoundModeD(5));  
LPrelPUCalcCostPrice:;
  RETURN;
END;

global
procedure PrelPURecalcCost(var record PrelPUVc PrelPUr)
BEGIN
  row PrelPUVc PrelPUrw;
  Integer rwcnt,i;
  val p,s;
        
  rwcnt = MatRowCnt(PrelPUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrelPUr,i,PrelPUrw);
    if (nonblank(PrelPUrw.ArtCode)) then begin
    PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                    PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                    PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                    PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
    PrelPUrw.CostPrice = p;
    PrelPUrw.Sum = s;                    
    MatRowPut(PrelPUr,i,PrelPUrw);
    end;
  end;
  PrelPUSumUp(PrelPUr);
  RETURN;
END;
