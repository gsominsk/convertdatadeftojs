external procedure PullBookingComStatus();
external function LongInt TimeToSeconds2(Time);
external function Integer SetDateOrder(string);
external procedure LongDateToStr(Date,Integer,var string);
external updating procedure GSXQueueIdleTasksExecute();
external function LongInt TimeDiffInSeconds(Time,Time);
external function time AddTime_Minutes(time,time);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure SetActTypeValues(record ActVc);
external function LongInt TimeToMinutes(Time);
external procedure FindUserMailboxName(string,var string,var string);
external updating function Boolean SendMailFromSystem(string,string,string,string,LongInt,Integer,string);
external updating function Boolean SendSMSFromSystem(string,string,string,string);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean SendNotificationToUser(string,string);

updating procedure SendSMSRemindersForCourse(record CourseEventVc CourseEventr,record CourseReminderBlock CRb)
begin
  record CourseVc Courser;
  record CourseEventVc oldCourseEventr;
  row CourseEventVc CourseEventrw;
  record SMSVc SMSr,SMS2r;
  record LTxtVc STr;
  record CUVc CUr;
  integer i,j,l,rwcnt,pos;
  string 255 tstr,tstr2;
  record BARulesBlock BARb;
  vector boolean custsent;

  if (true or CourseEventr.RemindersSent==0) then begin
    Courser.Code = CourseEventr.CourseCode;
    if (ReadFirstMain(Courser,1,true)) then begin
      STr.Code = Courser.SMSReminderText;
    end;
    if (blank(STr.Code)) then begin
      STr.Code = CRb.SMSReminderText;
    end;
    
    if (nonblank(STr.Code)) then begin
      if (ReadFirstMain(STr,1,true)) then begin end;
      l = SizeTextCnt(STr);
      
      if (l>0) then begin
        BlockLoad(BARb);
        rwcnt = MatRowCnt(CourseEventr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CourseEventr,i,CourseEventrw);
          
          if (CourseEventrw.Status==kCourseEventPaticipantStatusPaying or CourseEventrw.Status==kCourseEventPaticipantStatusNotPaying) then begin
            CUr.Code = CourseEventrw.ContactCode;
            if (blank(CUr.Code)) then begin
              CUr.Code = CourseEventrw.CustCode;
            end;
            if (nonblank(CUr.Code)) then begin
              if (ReadFirstMain(CUr,1,true)) then begin
                if (nonblank(CUr.Mobile) and CUr.NoLetterPosting==0 and CUr.NoMailPosting==0) then begin
                  if (custsent[CUr.Code]==false) then begin

                    RecordNew(SMSr);
                    
                    pos = 0;
                    while (pos<l) begin
                      tstr = StringFromText(STr,pos,1);
                      if (tstr=="%") then begin
                        tstr2 = StringFromText(STr,pos+1,1);
                        switch (tstr2) begin
                          case "d":
                            tstr = CourseEventr.TransDate;
                            pos = pos+1;
                          case "t": 
                            tstr = CourseEventr.StartTime;
                            pos = pos+1;
                          case "c":
                            tstr = CourseEventr.CourseName;
                            pos = pos+1;
                          case "n":
                            tstr = CUr.Person;
                            pos = pos+1;
                          case "%":
                            pos = pos+1;
                        end;
                      end;
                      
                      AddToText(tstr,SMSr);
                      pos = pos + 1;
                    end;

                    custsent[CUr.Code] = true;

                    SMSr.PhoneNo = CUr.Mobile;
                    SMSr.CustCode = CUr.Code;
                    
                    SMSr.FromPhoneNo = BARb.SystemMobile;
                    if (blank(SMSr.FromPhoneNo)) then begin
                      SMSr.FromPhoneNo = SMSr.PhoneNo;
                    end;
                    
                    SMSr.SendFlag = 1;
                    SMSr.SerNr = NextSerNr("SMSVc",SMSr.TransDate,-1,false,"");

                    if (RecordInsert(SMSr,true)==false) then begin end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
    
    RecordCopy(oldCourseEventr,CourseEventr);
    CourseEventr.RemindersSent = 1;
    
    if (RecordUpdate(oldCourseEventr,CourseEventr,false)!=0) then begin
      LogText(0,"Sending reminder for course event " & CourseEventr.SerNr & " in company " & CurrentCompany & " failed.");
    end;
  end;
  
  return;
end;

global
updating procedure SendCourseSMSReminders(string arg)
begin
  integer i,rwcnt,oldcomp;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  boolean treatedf;
  record CourseEventVc CourseEventr;
  record CourseReminderBlock CRb;
  time t;

  BlockLoad(CRb);
  
  treatedf = false;
  oldcomp = CurrentCompany;  
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Compb,i,Comprw);
    if (blank(Comprw.TCPIP)) then begin
      if (SetCompanyCode(Comprw.CompCode,false)) then begin
        CourseEventr.TransDate = AddDay(CurrentDate,CRb.DaysBeforeEvent);
        CourseEventr.RemindersSent = 0;
        CourseEventr.StatusFlag = 0;
        if (ReadFirstKey("RemindersSent",CourseEventr,3,true)) begin
          SendSMSRemindersForCourse(CourseEventr,CRb);
          treatedf = true;
          i = rwcnt;
        end;
      end;
    end;
  end;
  ResetCompany(oldcomp);

  if (treatedf) then begin
    t = CurrentTime;
    t.minute = t.minute + 5;
    NewTimedTask("CourseSMSReminder","Send SMS reminder for upcoming courses","SendCourseSMSReminders","",CurrentDate,t,"","");
  end else begin
    NewTimedTask("CourseSMSReminder","Send SMS reminder for upcoming courses","SendCourseSMSReminders","",AddDay(CurrentDate,1),CRb.ReminderTime,"","");
  end;

  return;
end;

global
procedure InitCourseSMSReminderTask()
begin
  record CourseReminderBlock CRb;
  time t;
  
  BlockLoad(CRb);
  if (CRb.SendReminders==1 and nonblanktime(CRb.ReminderTime) and CRb.DaysBeforeEvent>0) then begin
    if (CRb.ReminderTime < CurrentTime) then begin
      t = CurrentTime;
      t.minute = t.minute + 2;
      CRb.ReminderTime = t;
    end;
    NewTimedTask("CourseSMSReminder","Send SMS reminder for upcoming courses","SendCourseSMSReminders","",CurrentDate,CRb.ReminderTime,"","");
  end;
  return;
end;

updating function Boolean SendMsgs(record AlarmVc Alarmr)
begin
  Boolean res;
  string 255 person;
  Integer pos;
  string 255 mailboxnr,to,recidstr;
  record ActVc Actr;
  Integer oldcomp;
   
  oldcomp = CurrentCompany;
  if (oldcomp!=Alarmr.CompNo) then begin
    if (SetCompany(Alarmr.CompNo,false)) then begin
    end;
  end;
  Actr.SerNr = Alarmr.ActSerNr;
  if (ReadFirstMain(Actr,1,true)) then begin
  end;
  if (oldcomp!=Alarmr.CompNo) then begin
    ResetCompany(oldcomp);
  end;
  recidstr = BuildRecordIdStr(Actr,Alarmr.CompNo);
  
  pos = 0;
  ExtractObj(Alarmr.MainPersons,pos,person);
  while (nonblank(person)) begin
    FindUserMailboxName(person,mailboxnr,to);
    if (nonblank(to)) then begin
      if (SendAlarmMessage(Alarmr.Comment,"",to,recidstr)) then begin
        res = true;
      end;      
    end;
    ExtractObj(Alarmr.MainPersons,pos,person);
  end;  

  pos = 0;
  ExtractObj(Alarmr.CCPersons,pos,person);
  while (nonblank(person)) begin
    FindUserMailboxName(person,mailboxnr,to);
    if (nonblank(to)) then begin
      if (SendAlarmMessage(Alarmr.Comment,"",to,recidstr)) then begin
        res = true;
      end;      
    end;
    ExtractObj(Alarmr.CCPersons,pos,person);
  end;  

  SendMsgs = res;
  return;
end;

global
function string 255 GetUserMobileNr(record UserVc Userr)
begin
  string 255 res;
  record CUVc CUr;
  
  if (nonblank(Userr.CustCode)) then begin
    CUr.Code = Userr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      res = CUr.Mobile;
    end;
  end;
  if (blank(res)) then begin
    res = Userr.Phone1;
  end;
  if (blank(res)) then begin
    res = Userr.Phone2;
  end;
  
  GetUserMobileNr = res;
end;

updating function Boolean SendSMSes(record AlarmVc Alarmr)
begin
  Boolean res;
  string 255 person;
  Integer pos;
  record UserVc Userr;
  string 255 mobile;
  Integer oldcomp;
  
  pos = 0;
  ExtractObj(Alarmr.MainPersons,pos,person);
  while (nonblank(person)) begin
    oldcomp = CurrentCompany;
    if (oldcomp!=Alarmr.CompNo) then begin
      if (SetCompany(Alarmr.CompNo,false)) then begin
      end;
    end;
    Userr.Code = person;
    if (ReadFirstMain(Userr,1,true)) then begin
      mobile = GetUserMobileNr(Userr);
      if (nonblank(mobile)) then begin
        if (SendSMSFromSystem("",mobile,Alarmr.Comment,"")) then begin
          res = true;
        end;      
      end;
    end;
    if (oldcomp!=Alarmr.CompNo) then begin
      ResetCompany(oldcomp);
    end;
    ExtractObj(Alarmr.MainPersons,pos,person);
  end;  

  pos = 0;
  ExtractObj(Alarmr.CCPersons,pos,person);
  while (nonblank(person)) begin
    oldcomp = CurrentCompany;
    if (oldcomp!=Alarmr.CompNo) then begin
      if (SetCompany(Alarmr.CompNo,false)) then begin
      end;
    end;
    Userr.Code = person;
    if (ReadFirstMain(Userr,1,true)) then begin
      mobile = GetUserMobileNr(Userr);
      if (nonblank(mobile)) then begin
        if (SendSMSFromSystem("",mobile,Alarmr.Comment,"")) then begin
          res = true;
        end;      
      end;
    end;
    if (oldcomp!=Alarmr.CompNo) then begin
      ResetCompany(oldcomp);
    end;
    ExtractObj(Alarmr.CCPersons,pos,person);
  end;  

  SendSMSes = res;
  return;
end;

updating function Boolean SendMails(record AlarmVc Alarmr)
begin
  Boolean res;
  string 255 person;
  Integer pos;
  
  pos = 0;
  ExtractObj(Alarmr.MainPersons,pos,person);
  while (nonblank(person)) begin
    if (SendMailFromSystem("",person,Alarmr.Comment,Alarmr.StdTxt,Alarmr.ActSerNr,Alarmr.CompNo,"AlarmVc")) then begin
      res = true;
    end;      
    ExtractObj(Alarmr.MainPersons,pos,person);
  end;  

  pos = 0;
  ExtractObj(Alarmr.CCPersons,pos,person);
  while (nonblank(person)) begin
    if (SendMailFromSystem("",person,Alarmr.Comment,Alarmr.StdTxt,Alarmr.ActSerNr,Alarmr.CompNo,"AlarmVc")) then begin
      res = true;
    end;      
    ExtractObj(Alarmr.CCPersons,pos,person);
  end;  

  SendMails = res;
  return;
end;

updating function Boolean SendNotifications(record AlarmVc Alarmr)
begin
  Boolean res;
  string 255 person;
  Integer pos;
  
  pos = 0;
  ExtractObj(Alarmr.MainPersons,pos,person);
  while (nonblank(person)) begin
    if (SendNotificationToUser(person,Alarmr.Comment)) then begin
      res = true;
    end;
    ExtractObj(Alarmr.MainPersons,pos,person);
  end;
  
  pos = 0;
  ExtractObj(Alarmr.CCPersons,pos,person);
  while (nonblank(person)) begin
    if (SendNotificationToUser(person,Alarmr.Comment)) then begin
      res = true;
    end;
    ExtractObj(Alarmr.CCPersons,pos,person);
  end;
  
  SendNotifications = res;
end;

global
updating function Boolean AlarmIdleTasks()
begin
  Boolean found,updatef,testf;
  record AlarmVc Alarmr;
  record AlarmVc oldAlarmr;
  Time endtime;
  record CYBlock CYb;
  
  BlockLoad(CYb);
  if (CYb.LockedLevel!=0) then begin
    RemoveTask("TreatAlarmIdleTasks");
    goto LAlarmIdleTasks;
  end;
  endtime = CurrentTime;
  endtime.minute = endtime.minute; //+1
  found = true;
  Alarmr.TransDate = CurrentDate;
  while (LoopBackKey("ActDate",Alarmr,1,found)) begin
    if (Alarmr.TransDate>CurrentDate) then begin
      found = false;
    end;
    testf = found;
    if (Alarmr.TransDate==CurrentDate) then begin
      if (Alarmr.TransTime>endtime) then begin //?
        testf = false;
      end;
    end;
    if (testf) then begin
      RecordCopy(oldAlarmr,Alarmr);
      switch (Alarmr.AlarmType) begin
        case kAlarmTypeMessage: updatef = SendMsgs(Alarmr);
        case kAlarmTypeSMS:     updatef = SendSMSes(Alarmr);
        case kAlarmTypeEMail:   updatef = SendMails(Alarmr);
        case kAlarmTypeNotification: updatef = SendNotifications(Alarmr);
      end;
    end;
    if (updatef) then begin
      Alarmr.OKFlag = 1;
      if (RecordUpdate(oldAlarmr,Alarmr,true)) then begin end;
      StepBack(Alarmr);
    end;
  end;
  AlarmIdleTasks = RecordsInIndex("AlarmVc","ActDate");
LAlarmIdleTasks:;  
  return;
end;

global
updating procedure TreatAlarmIdleTasks(string arg)
begin
  if (AlarmIdleTasks) then begin
  end;
  return;
end;

procedure StartSysRun_DueReport(Integer action,Time at)
begin
  Time t;
  Date td;

  t = at;
  td = CurrentDate;
  if (blanktime(t)) then begin
    t.hour = 1;
    t.minute = 0;
    t.second = 0;
  end;

  switch (action) begin
    case 0:
      if (t<CurrentTime) then begin
        td.day = td.day + 1;
      end;
      NewTimedTask("SYSRUN_DUEREPORT","Sys Run Due Report","SysRuns","DueReport",td,t,"","");
    case 1:      
      td.day = td.day + 1;
      NewTimedTask("SYSRUN_DUEREPORT","Sys Run Due Report","SysRuns","DueReport",td,t,"","");
    case 2:         
      RemoveTask("SYSRUN_DUEREPORT");
      if (t<CurrentTime) then begin
        td.day = td.day + 1;
      end;
      NewTimedTask("SYSRUN_DUEREPORT","Sys Run Due Report","SysRuns","DueReport",td,t,"","");
  end;
  return;
end;

global
updating procedure SysRun_DueReportIdleTask(string arg)
begin
  record MailVc Mailr;
  string 255 linkfilename;
  Time t;
  Integer err;
  record Attach2Vc oldAttachr;
  record Attach2Vc Attachr;
  Integer attachnr;
  record RLinkVc RLr;
  record BADueReportBlock BADRb;
  
  Mailr.SerNr = FirstInRange(arg,20);
  if (ReadFirstMain(Mailr,1,true)) then begin
    linkfilename = "tmp/ARRn.obj";
    if (FileExists(linkfilename)) then begin
      if (RecordLinkFile(linkfilename,0,Mailr,0)) then begin end;
      Delete_File(linkfilename);
      attachnr = 1;
      while (ReadRecordLink(Mailr,attachnr,Attachr,RLr)) begin
        if (ReadFirstMain(Attachr,1,true)) then begin
          if (Right(Attachr.FileName,4)==".obj") then begin
            Attachr.Type = kAttachTypeReport;
            RecordStore(Attachr,true);
          end;
        end;
        attachnr = attachnr + 1;
      end;
      BlockLoad(BADRb);
      StartSysRun_DueReport(1,BADRb.TransTime);
    end else begin
      t = CurrentTime;
      t.second = t.second + 10; 
      NewTimedTask("SysRun_DueIdleTask","SysRun_DueReport Idle Task","SysRun_DueReportIdleTask",Mailr.SerNr,CurrentDate,t,"","");
    end;
  end;
  return;
end;

global
updating procedure SysRun_DueReport()
begin
  Boolean res;
  record BADueReportBlock BADueRb;
  record MailSettingsBlock MSb; 
  record MailVc Mailr;
  row MailVc Mailrw;
  record RcVc RepSpec;
  Time t;
  string 255 tstr;

  BlockLoad(BADueRb);
  if (nonblank(BADueRb.Mailbox)) then begin
    BlockLoad(MSb);
    if (nonblank(MSb.FromSystem)) then begin

      RecordNew(Mailr);
      Mailr.TransDate = CurrentDate;
      MatRowGet(Mailr,0,Mailrw);
      Mailrw.AddrCode = MSb.FromSystem;
      MatRowPut(Mailr,0,Mailrw);

      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeTo;
      Mailrw.AddrCode = BADueRb.Mailbox;
      MatRowPut(Mailr,1,Mailrw);
      Mailr.SendFlag = 1;
      Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
      LongDateToStr(Mailr.TransDate,SetDateOrder(""),tstr);
      Mailr.Header = USetStr(32040) & " " & tstr;
      if (Mailr.SerNr>0) then begin
        if (RecordStore(Mailr,false)) then begin
          RecordNew(RepSpec);
          ReportDefaults(RepSpec,"ARRClass");
          RepSpec.Media = mtRepObj;
          RepSpec.flags[0] = 2;
          RepSpec.ArtMode = 2;
          RepSpec.repname = "ARRn";
          RunReport(RepSpec,0); 
          t = CurrentTime;
          t.second = t.second + 10; 
          NewTimedTask("SysRun_DueIdleTask","SysRun_DueReport Idle Task","SysRun_DueReportIdleTask",Mailr.SerNr,CurrentDate,t,"","");
        end;
      end;
    end;
  end;  
  return;
end;

global
updating procedure SysRun_NLReportIdleTask(string arg)
begin
  record MailVc Mailr;
  string 255 linkfilename;
  Time t;
  Integer err;
  record Attach2Vc oldAttachr;
  record Attach2Vc Attachr;
  Integer attachnr;
  record RLinkVc RLr;
  
  Mailr.SerNr = FirstInRange(arg,20);
  if (ReadFirstMain(Mailr,1,true)) then begin
    linkfilename = "tmp/MainRn.obj";
    if (FileExists(linkfilename)) then begin
      err = MoveFile(linkfilename,"tmp",".");
      if (RecordLinkFile(linkfilename,0,Mailr,0)) then begin end;
      err = MoveFile(linkfilename,".","tmp");
      Delete_File(linkfilename);
      attachnr = 1;
      while (ReadRecordLink(Mailr,attachnr,Attachr,RLr)) begin
        if (ReadFirstMain(Attachr,1,true)) then begin
          if (Right(Attachr.FileName,4)==".obj") then begin
            Attachr.Type = kAttachTypeReport;
            RecordStore(Attachr,true);
          end;
        end;
        attachnr = attachnr + 1;
      end;
    end else begin
      t = CurrentTime;
      t.second = t.second + 10; 
      NewTimedTask("SysRun_NLReport","SysRun_NLReport","SysRun_NLReportIdleTask","",CurrentDate,t,Mailr.SerNr,"");
    end;
  end;
  return;
end;

global
updating procedure SysRun_NLReport()
begin
  Boolean res;
  record BADueReportBlock BADueRb;
  record MailSettingsBlock MSb; 
  record MailVc Mailr;
  row MailVc Mailrw;
  record RcVc RepSpec;
  Time t;

  BlockLoad(BADueRb);
  if (nonblank(BADueRb.Mailbox)) then begin
    BlockLoad(MSb);
    if (nonblank(MSb.FromSystem)) then begin

      RecordNew(Mailr);
      MatRowGet(Mailr,0,Mailrw);
      Mailrw.AddrCode = MSb.FromSystem;
      MatRowPut(Mailr,0,Mailrw);

      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeTo;
      Mailrw.AddrCode = BADueRb.Mailbox;
      MatRowPut(Mailr,1,Mailrw);
      Mailr.SendFlag = 1;
      Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
      if (Mailr.SerNr>0) then begin
        if (RecordStore(Mailr,false)) then begin
          RecordNew(RepSpec);
          ReportDefaults(RepSpec,"MainRClass");
          RepSpec.Media = mtRepObj;
          RepSpec.repname = "MainRn";
          RepSpec.UsedOnly = 1;
          RepSpec.flags[21] = 1;
          RepSpec.flags[22] = 1;
          RepSpec.flags[26] = 0;
          RepSpec.flags[11] = 0;
          RepSpec.flags[7] = 2;
          RunReport(RepSpec,0); 
          t = CurrentTime;
          t.second = t.second + 10; 
          NewTimedTask("SysRun_NLIdleTask","SysRun_NLReport Idle Task","SysRun_NLReportIdleTask",Mailr.SerNr,CurrentDate,t,"","");
        end;
      end;
    end;
  end;  
  return;
end;

global
updating procedure SysRun_APReportIdleTask(string arg)
begin
  record MailVc Mailr;
  string 255 linkfilename;
  Time t;
  Integer err;
  record Attach2Vc oldAttachr;
  record Attach2Vc Attachr;
  Integer attachnr;
  record RLinkVc RLr;
  
  Mailr.SerNr = FirstInRange(arg,20);
  if (ReadFirstMain(Mailr,1,true)) then begin
    linkfilename = "tmp/APRn.obj";
    if (FileExists(linkfilename)) then begin
      err = MoveFile(linkfilename,"tmp",".");
      if (RecordLinkFile(linkfilename,0,Mailr,0)) then begin end;
      err = MoveFile(linkfilename,".","tmp");
      Delete_File(linkfilename);
      attachnr = 1;
      while (ReadRecordLink(Mailr,attachnr,Attachr,RLr)) begin
        if (ReadFirstMain(Attachr,1,true)) then begin
          if (Right(Attachr.FileName,4)==".obj") then begin
            Attachr.Type = kAttachTypeReport;
            RecordStore(Attachr,true);
          end;
        end;
        attachnr = attachnr + 1;
      end;
    end else begin
      t = CurrentTime;
      t.second = t.second + 10; 
      NewTimedTask("SysRun_APReport","SysRun_APReport","SysRun_APReportIdleTask","",CurrentDate,t,Mailr.SerNr,"");
    end;
  end;
  return;
end;

global
updating procedure SysRun_APReport()
begin
  Boolean res;
  record BADueReportBlock BADueRb;
  record MailSettingsBlock MSb; 
  record MailVc Mailr;
  row MailVc Mailrw;
  record RcVc RepSpec;
  Time t;

  BlockLoad(BADueRb);
  if (nonblank(BADueRb.Mailbox)) then begin
    BlockLoad(MSb);
    if (nonblank(MSb.FromSystem)) then begin

      RecordNew(Mailr);
      MatRowGet(Mailr,0,Mailrw);
      Mailrw.AddrCode = MSb.FromSystem;
      MatRowPut(Mailr,0,Mailrw);

      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeTo;
      Mailrw.AddrCode = BADueRb.Mailbox;
      MatRowPut(Mailr,1,Mailrw);
      Mailr.SendFlag = 1;
      Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
      if (Mailr.SerNr>0) then begin
        if (RecordStore(Mailr,false)) then begin
          RecordNew(RepSpec);
          ReportDefaults(RepSpec,"APRClass");
          RepSpec.Media = mtRepObj;
          RepSpec.flags[0] = 2;
          RepSpec.ArtMode = 0;
          RepSpec.repname = "APRn";
          RunReport(RepSpec,0); 
          t = CurrentTime;
          t.second = t.second + 10; 
          NewTimedTask("SysRun_APIdleTask","SysRun_APReport Idle Task","SysRun_APReportIdleTask",Mailr.SerNr,CurrentDate,t,"","");
        end;
      end;
    end;
  end;  
  return;
end;

global
updating procedure SysRuns(string arg)
begin

  switch (arg) begin
    case "DueReport": SysRun_DueReport;
    case "NLReport": SysRun_NLReport;
    case "APReport": SysRun_APReport;
  end;
  return;
end;

procedure InitSysRunIdleTasks_Run(Integer action,record BADueReportBlock BADRb)
begin
  if (nonblank(BADRb.Mailbox)) then begin
    StartSysRun_DueReport(action,BADRb.TransTime);
  end;
  return;
end;

global
procedure InitSysRunIdleTasks(Integer action)
begin
  record BADueReportBlock BADRb;

  if (ServerMode or SingleUserMode) then begin
    BlockLoad(BADRb);
    InitSysRunIdleTasks_Run(action,BADRb);
    InitCourseSMSReminderTask;
  end;
//      NewPeriodicTask("SYSRUN_DUEREPORT","Sys Run Due Report","SysRuns","DueReport",40,"");//24*3600
//      NewPeriodicTask("SYSRUN_NLREPORT","Sys Run NL Report","SysRuns","NLReport",40,"");//24*3600
//      NewPeriodicTask("SYSRUN_APREPORT","Sys Run AP Report","SysRuns","APReport",40,"");//24*3600
  return;
end;

global
procedure InitIdleTasks_BADueReportOnOKWindow(record BADueReportBlock BADRb,record BADueReportBlock BADRprevb)
begin
  if (ServerMode or SingleUserMode) then begin
    if (blanktime(BADRprevb.TransTime)) and (nonblanktime(BADRb.TransTime)) or 
       (BADRprevb.TransTime!=BADRb.TransTime) then begin
         InitSysRunIdleTasks_Run(2,BADRb);
    end;
  end;
  return;
end;

global
function Boolean AlarmWClassOpenActRemote(record RcVc RepSpec,var record ActVc Actr)
begin
  Boolean res;
  Integer oldcomp;
  Boolean resetf;
  
  if (RepSpec.flags[0]>=0) then begin
    oldcomp = CurrentCompany;
    if (RepSpec.flags[0]!=oldcomp) then begin
      resetf = true;
      if (SetCompany(RepSpec.flags[0],false)) then begin
      end;
    end;
  end;
  Actr.SerNr = RepSpec.long1;
  res = ReadFirstMain(Actr,1,true);
  if (resetf) then begin
    ResetCompany(oldcomp);
  end;
  AlarmWClassOpenActRemote = res;
  return;
end;

global
updating procedure StopEmailQueueActivity(string user,string comment,string acttype)
begin
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  Integer curcomp;
  record ActVc Actr;

  curcomp = CurrentCompany;
  RecordNew(Actr);
  Actr.TransDate = CurrentDate;
  Actr.EndDate = CurrentDate;
  Actr.StartTime = CurrentTime;
  Actr.EndTime = CurrentTime;

  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  Actr.ActType = acttype;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);

  Actr.OKFlag = 0;
  Actr.Comment = comment;
  Actr.MainPersons = user;

  ATr.Code = Actr.ActType;
  if (ReadFirstMain(ATr,1,true)) then begin
    Actr.ItemCode = ATr.ItemCode;
    ATGRr.Code = ATr.ActTypeGr;
    if (ReadFirstMain(ATGRr,1,true)) then begin
      Actr.CalTimeFlag = ATGRr.DefTimeFlag;
    end;
  end;  
  Actr.TodoFlag = 0;
  Actr.CalTimeFlag = 2;
  Actr.AlarmType = 1;
  Actr.AlarmWhen = 0;
  Actr.AlarmUnits = 1;
  if (Actr.SerNr>0) then begin
    if (RecordStore(Actr,false)) then begin
    end;
  end;
  return;
end; 

global
updating procedure TestEmailQueueStoppedIdleTask(string arg)
begin
  record EMailQueVc EMailQuer;
  LongInt aminutes,bminutes;
  Boolean found,msgf;
  record BASysIntBlock BASysIntb;
  record MailSettingsBlock MailSb;
  record ConfVc Confr;
  
  if (RecordsInIndex("EMailQueVc","SerNr")>0) then begin
    EMailQuer.EMailSent = 0;
    found = ReadFirstKey("Sending",EMailQuer,1,true);
    if (found==false) then begin
      EMailQuer.EMailSent = 2;
      found = ReadFirstKey("Sending",EMailQuer,1,true);
    end;
    if (found) then begin
      if (EMailQuer.TransDate<CurrentDate) then begin
        msgf = true;
      end;
      if (msgf==false) then begin
        aminutes = TimeToMinutes(EMailQuer.TransTime);
        bminutes = TimeToMinutes(CurrentTime);
        if ((bminutes-aminutes)>2) then begin
          msgf = true;
        end;
      end;
      msgf = true;

      if (msgf) then begin      
        BlockLoad(BASysIntb);
        if (BASysIntb.SMSStopEmailQueue!=0) then begin
          SendSMSFromSystem(BASysIntb.SystemMobile,BASysIntb.SMSNumbers,USetStr(20284),BASysIntb.StopEmailQueueLTxtCode);
        end;
        if (BASysIntb.ActStopEmailQueue!=0) then begin
          BlockLoad(MailSb);
          if (nonblank(MailSb.Postmaster)) then begin
            Confr.AddrName = MailSb.Postmaster;
            if (ReadFirstKey("AddrName",Confr,1,true)) then begin
              StopEmailQueueActivity(Confr.AddrCode,USetStr(20284),BASysIntb.StopEmailQueueActType);
            end;
          end;
        end;
      end;
    end;
//    if (RemoveTask("TestEmailQueueStopped")) then begin
//    end;
  end else begin
//    if (RemoveTask("TestEmailQueueStopped")) then begin
//    end;
  end;
  return;
end;

global
updating procedure CloudServicesStoppedAlert(string arg)
begin
  record BASysIntBlock BASysIntb;
  record MailSettingsBlock MailSb;
  record ConfVc Confr;

  BlockLoad(BASysIntb);
  if (BASysIntb.ActStopCloudServices!=0) then begin
    BlockLoad(MailSb);
    if (nonblank(MailSb.Postmaster)) then begin
      Confr.AddrName = MailSb.Postmaster;
      if (ReadFirstKey("AddrName",Confr,1,true)) then begin
        StopEmailQueueActivity(Confr.AddrCode,arg,BASysIntb.StopCloudServicesActType);
      end;
    end;
  end;
  return;
end;

global
updating procedure CloudServicesStoppedTestIdleTask(string arg)
begin
  record EInvoiceBlock EIb;

  BlockLoad(EIb);
  if (EIb.StopEInvoices!=0) then begin
    CloudServicesStoppedAlert(USetStr(20285));
  end else begin
    if (EIb.OutEInvoices!=0) then begin
      if (TaskExists("SendEInvoice")==false) then begin
        CloudServicesStoppedAlert(USetStr(20285) & " " & "SendEInvoice");
      end;
    end;
    if (EIb.RcvEInvoices!=0) then begin
      if (TaskExists("ReceiveEInvoice")==false) then begin
        CloudServicesStoppedAlert(USetStr(20285) & " " & "ReceiveEInvoice");
      end;
    end;
    if (EIb.OutEVat!=0) then begin
      if (TaskExists("GetEVATDeclarationStatuses")==false) then begin
        CloudServicesStoppedAlert(USetStr(20285) & " " & "GetEVATDeclarationStatuses");
      end;
    end;
    if (EIb.OutEPayments!=0) then begin
      if (TaskExists("SendEPayment")==false) then begin
        CloudServicesStoppedAlert(USetStr(20285) & " " & "SendEPayment");
      end;
    end;
    if (EIb.OutEDirDebt!=0) then begin
      if (TaskExists("SendEDirectDebit")==false) then begin
        CloudServicesStoppedAlert(USetStr(20285) & " " & "SendEDirectDebit");
      end;
    end;
  end;
  return;
end;

global
updating procedure POSUpdateStockIdleTasks(string arg)
begin
  record CashierDefBlock CDb;
  record RcVc RepSpec;
  Integer oldcomp;
  Date td;
  Time startt,tt;
  Boolean testf;

  oldcomp = CurrentCompany;  
  if (nonblank(arg)) then begin
    testf = true;
    if (oldcomp!=StringToInt(arg)) then begin
      if (SetCompany(StringToInt(arg),false)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      BlockLoad(CDb);
        
      if (CDb.UpdStockMaint!=0) then begin
        ReportDefaults(RepSpec,"POSUpdStockVClass");  
        RepSpec.sStartDate = CurrentDate;
        RepSpec.sEndDate = CurrentDate;
        RepSpec.Period2Str = RepSpec.sStartDate;
        RepSpec.Period2Str = RepSpec.Period2Str & ":";
        RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
        RepSpec.FirstAcc = "*";
  
        RepSpec.repname = "POSUpdStockMn";
        RepSpec.critname = "POSUpdStockVClass";
        RepSpec.flags[1] = CDb.POSOKSD;
        RunMaintenance(RepSpec);
      end;
      td = CurrentDate;
      startt = CurrentTime;
      tt = startt;
      tt.second = tt.second + 5;
      if (tt<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("StartPOSUpdateStock-InCompany-" & CurrentCompany,"Start Update Stock from POS in Company " & CurrentCompany,"StartPOSUpdateStockIdleTasks",CurrentCompany,td,tt,"","");
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
updating procedure RestaurantUpdateStockIdleTasks(string arg)
begin
  record CashierDefBlock CDb;
  record RcVc RepSpec;
  Integer oldcomp;
  Date td;
  Time startt,tt;
  Boolean testf;

  oldcomp = CurrentCompany;  
  if (nonblank(arg)) then begin
    testf = true;
    if (oldcomp!=StringToInt(arg)) then begin
      if (SetCompany(StringToInt(arg),false)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      BlockLoad(CDb);
      if (CDb.RestUpdStockMaint!=0) then begin
        ReportDefaults(RepSpec,"BarGenSDVClass");  
        RepSpec.sStartDate = CurrentDate;
        RepSpec.sEndDate = CurrentDate;
        RepSpec.Period2Str = RepSpec.sStartDate;
        RepSpec.Period2Str = RepSpec.Period2Str & ":";
        RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
        RepSpec.flags[1] = CDb.RestOKSD;
  
        RepSpec.repname = "BarGenSDMn";
        RepSpec.critname = "BarGenSDVClass";
        RunMaintenance(RepSpec);
      end;
      td = CurrentDate;
      startt = CurrentTime;
      tt = startt;
      tt.second = tt.second + 5;
      if (tt<startt) then begin
        td = AddDay(td,1);
      end;
      NewTimedTask("StartRestaurantUpdateStock-InCompany-" & CurrentCompany,"Start Update Stock from Restaurant in Company " & CurrentCompany,"StartRestaurantUpdateStockIdleTasks",CurrentCompany,td,tt,"","");
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
updating procedure POSCashupIdleTasks(string arg)
begin
  record CashierDefBlock CDb;
  record RcVc RepSpec;
  Integer oldcomp;
  Date td;
  Time startt,tt;
  Boolean testf;
  
  oldcomp = CurrentCompany; 
  if (nonblank(arg)) then begin
    testf = true;
    if (oldcomp!=StringToInt(arg)) then begin
      if (SetCompany(StringToInt(arg),false)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      BlockLoad(CDb);
      if (CDb.CashupMaint!=0) then begin

        ReportDefaults(RepSpec,"CashupVClass");  
        RepSpec.f1 = "";
        RepSpec.f4 = "";
        RepSpec.sStartDate = CurrentDate;
        RepSpec.sEndDate = CurrentDate;
        RepSpec.Period2Str = RepSpec.sStartDate;
        RepSpec.Period2Str = RepSpec.Period2Str & ":";
        RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
        RepSpec.d1 = CurrentDate;
        RepSpec.sStartTime = CurrentTime;
        RepSpec.flags[1] = 1;
        RepSpec.flags[2] = 1;
        RepSpec.flags[3] = 1;

        RepSpec.repname = "CashupMn";
        RepSpec.critname = "CashupVClass";
        RunMaintenance(RepSpec);

        td = CurrentDate;
        startt = CurrentTime;
        tt = startt;
        tt.second = tt.second + 5;
        if (tt<startt) then begin
          td = AddDay(td,1);
        end;
        NewTimedTask("StartPOSCashup-InCompany-" & CurrentCompany,"Start POS Cashup in Company " & CurrentCompany,"StartPOSCashupIdleTasks",CurrentCompany,td,tt,"","");
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure StartPOSCashupIdleTasks(string arg)
begin
  Integer oldcomp;
  record CashierDefBlock CDb;
  Date td;
  Time startt,tt;
  Boolean testf;

  oldcomp = CurrentCompany; 
  if (nonblank(arg)) then begin
    testf = true;
    if (oldcomp!=StringToInt(arg)) then begin
      if (SetCompany(StringToInt(arg),false)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      BlockLoad(CDb);
      if (CDb.CashupMaint!=0) then begin
        td = CurrentDate;
        startt = CurrentTime;
        tt = startt;
        if (nonblanktime(CDb.CashupMaintInterval) and TimeToSeconds2(CDb.CashupMaintInterval)!=0) then begin
          tt = AddMinutes(tt,TimeToSeconds2(CDb.CashupMaintInterval)/60);
        end else begin
          tt = AddMinutes(tt,1);
        end;
        if (tt<startt) then begin
          td = AddDay(td,1);
        end;
        NewTimedTask("Cashup-InCompany-" & CurrentCompany,"Cashup in Company " & CurrentCompany,"POSCashupIdleTasks",CurrentCompany,td,tt,"","");
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure StartPOSUpdateStockIdleTasks(string arg)
begin
  Integer oldcomp;
  record CashierDefBlock CDb;
  Date td;
  Time startt,tt;
  Boolean testf;

  oldcomp = CurrentCompany; 
  if (nonblank(arg)) then begin
    testf = true;
    if (oldcomp!=StringToInt(arg)) then begin
      if (SetCompany(StringToInt(arg),false)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      BlockLoad(CDb);
      if (CDb.UpdStockMaint!=0) then begin
        td = CurrentDate;
        startt = CurrentTime;
        tt = startt;
        if (nonblanktime(CDb.UpdStockMaintTime) and TimeToSeconds2(CDb.UpdStockMaintTime)!=0) then begin
          tt = AddMinutes(tt,TimeToSeconds2(CDb.UpdStockMaintTime)/60);
        end else begin
          tt = AddMinutes(tt,1);
        end;
        if (tt<startt) then begin
          td = AddDay(td,1);
        end;
        NewTimedTask("POSUpdateStock-InCompany-" & CurrentCompany,"Update Stock from POS in Company " & CurrentCompany,"POSUpdateStockIdleTasks",CurrentCompany,td,tt,"","");
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure StartRestaurantUpdateStockIdleTasks(string arg)
begin
  Integer oldcomp;
  record CashierDefBlock CDb;
  Date td;
  Time startt,tt;
  Boolean testf;

  oldcomp = CurrentCompany; 
  if (nonblank(arg)) then begin
    testf = true;
    if (oldcomp!=StringToInt(arg)) then begin
      if (SetCompany(StringToInt(arg),false)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      BlockLoad(CDb);
      if (CDb.RestUpdStockMaint!=0) then begin
        td = CurrentDate;
        startt = CurrentTime;
        tt = startt;
        if (nonblanktime(CDb.RestUpdStockMaintTime) and TimeToSeconds2(CDb.RestUpdStockMaintTime)!=0) then begin
          tt = AddMinutes(tt,TimeToSeconds2(CDb.RestUpdStockMaintTime)/60);
        end else begin
          tt = AddMinutes(tt,1);
        end;
        if (tt<startt) then begin
          td = AddDay(td,1);
        end;
        NewTimedTask("RestUpdateStock-InCompany-" & CurrentCompany,"Update Stock from Restaurant in Company " & CurrentCompany,"RestaurantUpdateStockIdleTasks",CurrentCompany,td,tt,"","");
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure InitPOSIdleTasks()
begin
  record CompaniesBlock Cb;
  row CompaniesBlock Cbrw;
  Integer i,rwcnt;
  Boolean testf;
  Integer oldcomp;
  record CashierDefBlock CDb;
  Date td;
  Time startt,tt;
  
  oldcomp = CurrentCompany;  
  BlockLoad(Cb);
  rwcnt = MatRowCnt(Cb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Cb,i,Cbrw);
    testf = true;
    if (nonblank(Cbrw.TCPIP)) then begin testf = false; end;
    if (testf) then begin
      if (SetServerCompanyCode(Cbrw.CompCode)) then begin
        BlockLoad(CDb);
        if (CDb.UpdStockMaint!=0) then begin
          StartPOSUpdateStockIdleTasks(CurrentCompany);
        end;
        if (CDb.RestUpdStockMaint!=0) then begin
          StartRestaurantUpdateStockIdleTasks(CurrentCompany);
        end;
        if (CDb.CashupMaint!=0) then begin
          StartPOSCashupIdleTasks(CurrentCompany);
        end;
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure UpdateTutorialWClassIdleTask(string arg)
begin
  Time startt,t;
  Integer wn;
  record RcVc RepSpec;

  startt = StringToTime(arg);
  wn = FindWindow("TutorialWClass");
  if (wn==0) then begin
    if (RemoveTask("UpdateTutorialWClass")) then begin
    end;
  end else begin
    if (TimeDiffInSeconds(startt,CurrentTime)>5) then begin
      GetWindowRecord(wn,RepSpec);
      PutWindowString(wn,"TutorialWClassCloseButton","true");
      ReRunWindowDef(wn);
      PutWindowRecord(wn,RepSpec);
    end else begin
      t = CurrentTime;
      t.second = t.second + 1;
      NewTimedTask("UpdateTutorialWClass","Update Tutorial Window","UpdateTutorialWClassIdleTask","",CurrentDate,t,startt,"");
    end;
  end;
  return;
end;

global
updating procedure TutorialWClassClose()
begin
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  LMb.TutorialWClassCnt = -1;
  BlockStore(LMb);
  CloseWindow(CurWindow);
  return;
end;

global
function Boolean TutorialWClassOnClose(Integer wn,Integer wn2)
begin
  TutorialWClassOnClose = true;
  return;
end;

global
updating procedure GSXQueueIdleTasks(string arg)
begin
  Time t,startt;
  Date td;
  record GSXSettingsBlock GSb;
  
  BlockLoad(GSb);
  if (nonblanktime(GSb.AutoEnrollmentInterval)) then begin
  if (GetHour(GSb.AutoEnrollmentInterval)!=0 or GetMinute(GSb.AutoEnrollmentInterval)!=0 or GetSecond(GSb.AutoEnrollmentInterval)!=0) then begin
    GSXQueueIdleTasksExecute;
    startt = CurrentTime;
    t = AddTime_Minutes(startt,GSb.AutoEnrollmentInterval);
    td = CurrentDate;
    if (t<startt) then begin
      td = AddDay(td,1);
    end;
    NewTimedTask("GSXQueueIdleTasks","GSX Queue","GSXQueueIdleTasks","",td,t,"","");
  end;
  end;
  return;
end;

function Boolean ReplaceUpdatePackage(string os,LongInt oldvernr,LongInt newvernr,Boolean backupold)
begin
  Boolean res;
  string 255 filename,oldfilename,newfilename,folder;
  
  res = false;
  folder = "updateclients";
  if (!DirExists(folder)) then begin
    res = true; // Cloud Servers should not have this folder, it's managed by the Cloud Node
    goto LReplaceUpdatePackage;
  end;

  switch (os) begin
    case "windows":
      filename = "windows.ha";
      oldfilename = "windows." & oldvernr & ".ha.BAK";
      newfilename = "windows." & newvernr & ".ha";
    case "macosx":
      filename = "macosx.ha";
      oldfilename = "macosx." & oldvernr & ".ha.BAK";
      newfilename = "macosx." & newvernr & ".ha";
    case "ios":
      filename = "ios.html";
      oldfilename = "ios." & oldvernr & ".html.BAK";
      newfilename = "ios." & newvernr & ".html";
    case "android":
      filename = "android.apk";
      oldfilename = "android." & oldvernr & ".apk.BAK";
      newfilename = "android." & newvernr & ".apk";
    case "windows8":
      filename = "windows8.appx";
      oldfilename = "windows8." & oldvernr & ".appx.BAK";
      newfilename = "windows8." & newvernr & ".appx";
    case "windowsnet":
      filename = "windowsnet.ha";
      oldfilename = "windowsnet." & oldvernr & ".ha.BAK";
      newfilename = "windowsnet." & newvernr & ".ha";
    case "linux":
      filename = "linux.ha";
      oldfilename = "linux." & oldvernr & ".ha.BAK";
      newfilename = "linux." & newvernr & ".ha";
    otherwise
      goto LReplaceUpdatePackage;
  end;
  
  if (FileExists(folder & "/" & filename)) then begin
    if (backupold) then begin
      if (RenameFile(folder & "/" & filename,folder & "/" & oldfilename)!=0) then begin
        goto LReplaceUpdatePackage;
      end;
    end else begin
      Delete_File(folder & "/" & filename);
    end;
  end;
  
  if (FileExists(folder & "/" & newfilename)) then begin
    if (RenameFile(folder & "/" & newfilename,folder & "/" & filename)!=0) then begin
      goto LReplaceUpdatePackage;
    end;
  end else begin
    goto LReplaceUpdatePackage;
  end;
  
  res = true;
  
LReplaceUpdatePackage:;
  ReplaceUpdatePackage = res;
end;

updating procedure DoAvailClientUpdateVersion(string os)
begin
  record AvailClientBlock ACb;
  
  BlockLoad(ACb);
  
  switch (os) begin
    case "windows":
      if (ACb.NextVerNrWindows>=ACb.VerNrWindows) then begin
        if (ReplaceUpdatePackage(os,ACb.VerNrWindows,ACb.NextVerNrWindows,false)) then begin
          ACb.VerNrWindows = ACb.NextVerNrWindows;
          ACb.NextVerNrWindows = -1;
        end;
      end else begin
        ACb.NextVerNrWindows = -1;
      end;
    case "macosx":
      if (ACb.NextVerNrOSXCocoa>=ACb.VerNrOSXCocoa) then begin
        if (ReplaceUpdatePackage(os,ACb.VerNrOSXCocoa,ACb.NextVerNrOSXCocoa,false)) then begin
          ACb.VerNrOSXCocoa = ACb.NextVerNrOSXCocoa;
          ACb.NextVerNrOSXCocoa = -1;
        end;
      end else begin
        ACb.NextVerNrOSXCocoa = -1;
      end;
    case "ios":
      if (ACb.NextVerNriPhone>=ACb.VerNriPhone) then begin
        if (ReplaceUpdatePackage(os,ACb.VerNriPhone,ACb.NextVerNriPhone,false)) then begin
          ACb.VerNriPhone = ACb.NextVerNriPhone;
          ACb.NextVerNriPhone = -1;
        end;
      end else begin
        ACb.NextVerNriPhone = -1;
      end;
    case "android":
      if (ACb.NextVerNrAndroid>=ACb.VerNrAndroid) then begin
        if (ReplaceUpdatePackage(os,ACb.VerNrAndroid,ACb.NextVerNrAndroid,false)) then begin
          ACb.VerNrAndroid = ACb.NextVerNrAndroid;
          ACb.NextVerNrAndroid = -1;
        end;
      end else begin
        ACb.NextVerNrAndroid = -1;
      end;
    case "windows8":
      if (ACb.NextVerNrMetro>=ACb.VerNrMetro) then begin
        if (ReplaceUpdatePackage(os,ACb.VerNrMetro,ACb.NextVerNrMetro,false)) then begin
          ACb.VerNrMetro = ACb.NextVerNrMetro;
          ACb.NextVerNrMetro = -1;
        end;
      end else begin
        ACb.NextVerNrMetro = -1;
      end;
    case "windowsnet":
      if (ACb.NextVerNrWindowsNet>=ACb.VerNrWindowsNet) then begin
        if (ReplaceUpdatePackage(os,ACb.VerNrWindowsNet,ACb.NextVerNrWindowsNet,false)) then begin
          ACb.VerNrWindowsNet = ACb.NextVerNrWindowsNet;
          ACb.NextVerNrWindowsNet = -1;
        end;
      end else begin
        ACb.NextVerNrWindowsNet = -1;
      end;
    case "linux":
      if (ACb.NextVerNrLinux>=ACb.VerNrLinux) then begin
        if (ReplaceUpdatePackage(os,ACb.VerNrLinux,ACb.NextVerNrLinux,false)) then begin
          ACb.VerNrLinux = ACb.NextVerNrLinux;
          ACb.NextVerNrLinux = -1;
        end;
      end else begin
        ACb.NextVerNrLinux = -1;
      end;
  end;
  
  BlockStore(ACb);
end;

global
updating procedure AvailClientUpdateVersions()
begin
  record AvailClientBlock ACb;
  
  BlockLoad(ACb);
  
  if (ACb.NextVerNrWindows>=0) then begin
    DoAvailClientUpdateVersion("windows");
  end;
  
  if (ACb.NextVerNrOSXCocoa>=0) then begin
    DoAvailClientUpdateVersion("macosx");
  end;
  
  if (ACb.NextVerNriPhone>=0) then begin
    DoAvailClientUpdateVersion("ios");
  end;
  
  if (ACb.NextVerNrAndroid>=0) then begin
    DoAvailClientUpdateVersion("android");
  end;
  
  if (ACb.NextVerNrMetro>=0) then begin
    DoAvailClientUpdateVersion("windows8");
  end;
  
  if (ACb.NextVerNrWindowsNet>=0) then begin
    DoAvailClientUpdateVersion("windowsnet");
  end;
  
  if (ACb.NextVerNrLinux>=0) then begin
    DoAvailClientUpdateVersion("linux");
  end;
end;

function Boolean IsAvailClientImportFile(string filename)
begin
  Boolean res;
  
  res = false;
  
  if (Right(filename,12)!=".version.txt") then begin goto LIsAvailClientImportFile; end;
  
  if (Left(filename,8)=="windows." or
      Left(filename,7)=="macosx." or
      Left(filename,4)=="ios." or
      Left(filename,8)=="android." or
      Left(filename,9)=="windows8." or
      Left(filename,11)=="windowsnet." or
      Left(filename,6)=="linux.") then begin
    res = true;
  end;
  
LIsAvailClientImportFile:;
  IsAvailClientImportFile = res;
end;

global
updating procedure AvailClientIdleTask(string arg)
begin
  Time t;
  record AvailClientBlock ACb;
  Integer i,filecnt,rownr;
  LongInt pkgvernr,curvernr,nextvernr;
  string 255 filename,folder,os,tstr;
  area a;
  array string 255 importedfiles;
  Boolean storef,deletef,testf;
  
  LogText2(0,"Checking updateclients for client autoupdate information",kVerbosityDebugDetailed);

  BlockLoad(ACb);
  storef = false;
  tstr = HobFolder;
  tstr = Left(tstr,Len(tstr)-4);
  if (blank(tstr)) then begin
    deletef = true;
    folder = "updateclients";
  end else begin
    folder = tstr & "/updateclients";
  end;
  filecnt = CountFilesInDir(folder);
  if (filecnt==0) then begin
    folder = "updateclients";
    filecnt = CountFilesInDir(folder);
    deletef = true;
  end;
  for (i = 0; i<filecnt; i = i + 1) begin
    curvernr = 0;
    nextvernr = 0;
    filename = GetFileNameInDir(folder,i);
    if (IsAvailClientImportFile(filename)) then begin
      SetAreaZeroSize(a);
      AddFileToArea(folder & "/" & filename,a,false);

      os = GetTabTextFromArea(0,0,a);
      pkgvernr = StringToLongInt(GetTabTextFromArea(1,0,a));

      if (pkgvernr<=0) then begin goto LSkipFile; end;

      switch (os) begin
        case "windows":     curvernr = ACb.VerNrWindows;    nextvernr = ACb.NextVerNrWindows;
        case "macosx":      curvernr = ACb.VerNrOSXCocoa;   nextvernr = ACb.NextVerNrOSXCocoa;
        case "ios":         curvernr = ACb.VerNriPhone;     nextvernr = ACb.NextVerNriPhone;
        case "android":     curvernr = ACb.VerNrAndroid;    nextvernr = ACb.NextVerNrAndroid;
        case "windows8":    curvernr = ACb.VerNrMetro;      nextvernr = ACb.NextVerNrMetro;
        case "windowsnet":  curvernr = ACb.VerNrWindowsNet; nextvernr = ACb.NextVerNrWindowsNet;
        case "linux":       curvernr = ACb.VerNrLinux;      nextvernr = ACb.NextVerNrLinux;
        otherwise
          goto LSkipFile;
      end;

      testf = false;
      if (pkgvernr>curvernr and pkgvernr>nextvernr) then begin testf = true; end;
      if (deletef) then begin
        //if (pkgvernr>=curvernr and pkgvernr>nextvernr) then begin
        testf = true; // Should only be one anyway (deletef is true for CN versions)
        //end;
      end;

      if (testf) then begin
        switch (os) begin
          case "windows":     ACb.NextVerNrWindows = pkgvernr;
          case "macosx":      ACb.NextVerNrOSXCocoa = pkgvernr;
          case "ios":         ACb.NextVerNriPhone = pkgvernr;
          case "android":     ACb.NextVerNrAndroid = pkgvernr;
          case "windows8":    ACb.NextVerNrMetro = pkgvernr;
          case "windowsnet":  ACb.NextVerNrWindowsNet = pkgvernr;
          case "linux":       ACb.NextVerNrLinux = pkgvernr;
        end;
        storef = true;
      end;
      importedfiles[importedfiles.length] = folder & "/" & filename;
    end;

LSkipFile:;
  end;

  if (deletef) then begin
    for (i = 0; i<importedfiles.length; i = i + 1) begin
      Delete_File(importedfiles[i]);
    end;
  end;
  
  if (storef) then begin
    LogText2(0,"Saving new client autoupdate information",kVerbosityDebugDetailed);
    BlockStore(ACb);
    AvailClientUpdateVersions;
  end;
  
  t = CurrentTime;
  t.minute = t.minute + 3;
  NewTimedTask("AvailClientIdleTask","Check for available clients","AvailClientIdleTask","",CurrentDate,t,"","");
end;

global
updating procedure InitAvailClientIdleTask()
begin
  LogText2(0,"Setting up automatic import of client autoupdate information",kVerbosityDebug);
  AvailClientIdleTask("");
end;

global
procedure PullBookingComStatusIdleTask(string arg)
begin
  Integer oldcomp;
  Boolean testf;

  oldcomp = CurrentCompany; 
  if (nonblank(arg)) then begin
    testf = true;
    if (oldcomp!=StringToInt(arg)) then begin
      if (SetCompany(StringToInt(arg),false)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      PullBookingComStatus;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

procedure StartHotelPullBookingComStatusIdleTask(string arg)
begin
  record BookingComBlock BCb;
  Boolean testf;

  if (nonblank(arg)) then begin
    testf = true;
    BlockLoad(BCb);
    if (BCb.Enable==0) then begin testf = false; end;
    if (testf) then begin
      NewPeriodicTask2("PullBookingComStatusIdleTaskInCompany-" & CurrentCompany,"Pull Booking.com Status","PullBookingComStatusIdleTask",CurrentCompany,180,"");        
    end;
  end;
  return;
end;

global
procedure InitHotelIdleTasks()
begin
  record CompaniesBlock Cb;
  row CompaniesBlock Cbrw;
  Integer i,rwcnt;
  Boolean testf;
  Integer oldcomp;
  
  oldcomp = CurrentCompany;  
  BlockLoad(Cb);
  rwcnt = MatRowCnt(Cb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Cb,i,Cbrw);
    testf = true;
    if (nonblank(Cbrw.TCPIP)) then begin testf = false; end;
    if (testf) then begin
      if (SetServerCompanyCode(Cbrw.CompCode)) then begin
        StartHotelPullBookingComStatusIdleTask(CurrentCompany);
      end;
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;
