external outer function string 60 OuterReadObjBTSClassArrayOnOpen(integer);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
remote procedure HWCOClassBTSClassArrayOnOpenRemote(string,var Array string,var Integer);
remote procedure VARsubSClassArrayOnOpenRemote(string,string,string,string,Integer,var Array string,var Integer);
external function Boolean GetCOSAcc(string,string,string,record AccBlock,record INVc,integer,Boolean,Integer,var string,var string); // Can't handle beeing remote...
external function string 10 FindWithHoldAcc(string,string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure ContactSClassOnOpen(Integer,string,Array string,var Integer);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure StripSpace(var string,string);
external function Integer CountObjects(string);
external procedure ExtractElemFromSet(string,integer,var string);
external procedure FindOTforAcc(string,var string);
external function Boolean GetPMRow(string,var row PMBlock);
external function Integer CheckObjs(string,string,var string);
remote procedure ObjBTSClassArrayOnOpenRemote(string,var Array string,var Integer);
remote procedure CClassBTSClassArrayOnOpenRemote(string,string,var Array string,var Integer);
remote procedure DIClassBTSClassArrayOnOpenRemote(string,var Array string,var Integer);
remote procedure PRClBTSClassArrayOnOpenRemote(string,var Array string,var Integer);
external procedure FindClTypeforPRClass(string,var string);
external procedure FindOTforPRClass(string,var string);

global
procedure PRClassSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record PRClassBlock PRClassRec;
  row PRClassBlock PRClassrw;
  Integer i,rwcnt;
  
  BlockLoad(PRClassRec);
  rwcnt = MatRowCnt(PRClassRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRClassRec,i,PRClassrw);
    astr[acnt] = PRClassrw.Code & "     ";
    astr[acnt] = Left(astr[acnt],8);
    astr[acnt] = astr[acnt] & PRClassrw.Comment;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure QuoteClassSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record QuoteClassBlock QuoteClassRec;
  row QuoteClassBlock QuoteClassrw;
  Integer i,rwcnt;
  
  BlockLoad(QuoteClassRec);
  rwcnt = MatRowCnt(QuoteClassRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QuoteClassRec,i,QuoteClassrw);
    astr[acnt] = QuoteClassrw.Code & "     ";
    astr[acnt] = Left(astr[acnt],8);
    astr[acnt] = astr[acnt] & QuoteClassrw.Comment;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure BudgetClassSClassArrayOnOpen(var Array string acode,var Array string acomment)
begin
  record BudgetClassBlock BCb;
  row BudgetClassBlock BCbrw;
  Integer i,rwcnt,acnt;
  
  acnt = 0;
  BlockLoad(BCb);
  rwcnt = MatRowCnt(BCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BCb,i,BCbrw);
    acode[acnt] = BCbrw.Code;
    acomment[acnt] = BCbrw.Comment;
    acnt = acnt + 1;
  end;
  return;
end;

global
procedure PerSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record PeriodBlock PeriodRec;
  row PeriodBlock Periodrw;
  Integer i,rwcnt;
  string 255 tstr,t2;
  
  BlockLoad(PeriodRec);
  rwcnt = MatRowCnt(PeriodRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PeriodRec,i,Periodrw);
    tstr = Periodrw.FromDate;
    tstr = tstr & ":";
    tstr = tstr & Periodrw.ToDate;
    StripSpace(t2,tstr);
    astr[acnt] = t2;
    astr[acnt] = astr[acnt] & "     ";
    astr[acnt] = astr[acnt] & Periodrw.CodeStr;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure ContractClassSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record ContractClassBlock ContractClassRec;
  row ContractClassBlock ContractClassrw;
  Integer i,rwcnt;
  
  BlockLoad(ContractClassRec);
  rwcnt = MatRowCnt(ContractClassRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ContractClassRec,i,ContractClassrw);
    astr[acnt] = ContractClassrw.Code & "     ";
    astr[acnt] = Left(astr[acnt],8);
    astr[acnt] = astr[acnt] & ContractClassrw.Comment;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure PrintGroupSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record PrintGroupBlock PrintGroupRec;
  row PrintGroupBlock PrintGrouprw;
  Integer i,rwcnt;
  
  BlockLoad(PrintGroupRec);
  rwcnt = MatRowCnt(PrintGroupRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PrintGroupRec,i,PrintGrouprw);
    astr[acnt] = PrintGrouprw.PrintGroupCode;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure LangSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record LangBlock LangRec;
  row LangBlock Langrw;
  Integer i,rwcnt;
  
  BlockLoad(LangRec);
  rwcnt = MatRowCnt(LangRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LangRec,i,Langrw);
    astr[acnt] = Langrw.Code & "     ";
    astr[acnt] = Left(astr[acnt],8);
    astr[acnt] = astr[acnt] & Langrw.Comment;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure MachineGroupsSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record MachineGroupsBlock MachineGroupsRec;
  row MachineGroupsBlock MachineGroupsrw;
  Integer i,rwcnt;
  
  BlockLoad(MachineGroupsRec);
  rwcnt = MatRowCnt(MachineGroupsRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(MachineGroupsRec,i,MachineGroupsrw);
    astr[acnt] = MachineGroupsrw.Code & "     " & MachineGroupsrw.Description;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure LocalMachineGroupsSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  record LocalMachineGrBlock LMGr;
  row LocalMachineGrBlock LMGrw;
  Integer i,rwcnt;
  
  BlockLoad(LMGr);
  rwcnt = MatRowCnt(LMGr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LMGr,i,LMGrw);
    astr[acnt] = LMGrw.Code;
    acnt = acnt + 1;
  end;
  RETURN;
END;

global
procedure PRScheduleVc_ContactSClass(Integer wn,Integer mwn)
begin
  record PRScheduleVc PRScheduler;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,PRScheduler);
  ContactSClassOnOpen(wn,PRScheduler.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  return;
end;

global
procedure COCUServiceVc_ContactSClass(Integer wn,Integer mwn)
begin
  record COCUServiceVc COCUServicer;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,COCUServicer);
  ContactSClassOnOpen(wn,COCUServicer.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  return;
end;

global
procedure AgreementVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record AgreementVc Agreementr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,Agreementr);
  ContactSClassOnOpen(wn,Agreementr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure AuthCustVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record AuthCustVc AuthCustr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,AuthCustr);
  ContactSClassOnOpen(wn,AuthCustr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure OffHireVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record OffHireVc OffHirer;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,OffHirer);
  ContactSClassOnOpen(wn,OffHirer.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure DispatchVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record DispatchVc Dispatchr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,Dispatchr);
  ContactSClassOnOpen(wn,Dispatchr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure IVCashVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record IVCashVc IVCashr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,IVCashr);
  ContactSClassOnOpen(wn,IVCashr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure RentResVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record RentResVc RentResr;
  record AgreementVc Agreementr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,RentResr);
  Agreementr.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreementr,1,true)) then begin
    ContactSClassOnOpen(wn,Agreementr.CustCode,acontact,acnt);
    for (i=0;i<acnt;i=i+1) begin
  //    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
    end;
  end;
  RETURN;
END;

global
procedure RentQTVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record RentQTVc RentQTr;
  record AgreementVc Agreementr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,RentQTr);
  if (nonblank(RentQTr.CustCode)) then begin
    ContactSClassOnOpen(wn,RentQTr.CustCode,acontact,acnt);
  end else begin
    Agreementr.SerNr = RentQTr.AgreementNr;
    if (ReadFirstMain(Agreementr,1,true)) then begin
      ContactSClassOnOpen(wn,Agreementr.CustCode,acontact,acnt);
    end;
  end;
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure CClassBTSClassArrayOnOpen(integer wn,integer fn,var Array string astr,var Integer acnt)
BEGIN
  record CClassVc CClassr;
  record RcVc RepSpec;
  record CUVc CUr;
  record CCatVc CCatr;
  string 5 ctype,ctype2;
  boolean TrHs,testf;
  integer cwn;
  Integer objam;
  string 20 sset;
  record HotelBlock Hotelb;
  
  cwn = MotherWindow(wn);
  ctype = "";
  if (wn!=0) then begin
    switch (GetWindowFileName(wn)) begin    
      case "CUVc": // I don't think this code is ever run...
        GetWindowRecord(cwn,CUr);
        if (nonblank(CUr.CustCat)) then begin
          CCatr.Code = CUr.CustCat;
          if (ReadFirstMain(CCatr,1,true)) then begin
            if (nonblank(CCatr.ClassType)) then begin
              objam = CountObjects(CCatr.ClassType); 
              if (objam>=fn) then begin
                ExtractElemFromSet(CCatr.ClassType,fn,ctype);
              end;
            end;
          end;  
        end;
      case "JobVc":
        BlockLoad(Hotelb);
        ctype = Hotelb.CClassDCType;
        ctype2 = Hotelb.CClassDCTypeChild;
      case "ResAvVc":
        BlockLoad(Hotelb);
        ctype = Hotelb.CClassDCType;
      case "RcVc":
        if (GetWindowFileName(cwn)=="CUVc") then begin    
          GetWindowRecord(cwn,CUr);
          if (nonblank(CUr.CustCat)) then begin
            CCatr.Code = CUr.CustCat;
            if (ReadFirstMain(CCatr,1,true)) then begin
              if (nonblank(CCatr.ClassType)) then begin
                objam = CountObjects(CCatr.ClassType); 
                if (objam>=fn) then begin
                  ExtractElemFromSet(CCatr.ClassType,fn,ctype);
                end;
              end;
            end;
          end;  
        end;
    end;
    CClassBTSClassArrayOnOpenRemote(ctype,ctype2,astr,acnt);
  end;
  return;
END;

global
procedure HWCOClassBTSClassArrayOnOpen(integer wn,integer fn,var Array string astr,var Integer acnt)
BEGIN
  record RcVc RepSpec;
  record COCUServiceVc COCUServicer;
  record ContractClassBlock CCb;
  row ContractClassBlock CCbrw;
  Integer i,rwcnt;
  integer cwn;
  Integer objam;
  string 5 ctype;
  
  cwn = MotherWindow(wn);
  ctype = "";
  if (wn!=0) then begin
    switch (GetWindowFileName(cwn)) begin    
      case "COCUServiceVc":
        GetWindowRecord(cwn,COCUServicer);
        if (nonblank(COCUServicer.Class)) then begin
          BlockLoad(CCb);
          rwcnt = MatRowCnt(CCb);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CCb,i,CCbrw);
            if (CCbrw.Code==COCUServicer.Class) then begin
              if (nonblank(CCbrw.HWCOClassType)) then begin
                objam = CountObjects(CCbrw.HWCOClassType); 
                ctype = CCbrw.HWCOClassType;
                i = rwcnt;
              end;
            end;
          end;
        end;
    end;
    HWCOClassBTSClassArrayOnOpenRemote(ctype,astr,acnt);
  end;
  return;
END;

global
procedure DIClassBTSClassArrayOnOpen(integer wn,integer fn,var Array string astr,var Integer acnt)
BEGIN
  record DIVc DIr;
  record INVc INr;
  record ITVc ITr;
  string 5 ctype;
  boolean TrHs,testf;
  integer cwn;
  Integer objam;
  string 20 sset;

  cwn=MotherWindow(wn);
  GetWindowRecord(cwn,INr);
  ctype="";
  if (nonblank(INr.Group)) then begin
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
      if (nonblank(ITr.ClassType)) then begin
        objam = CountObjects(ITr.ClassType); 
        if (objam>=fn) then begin
          ExtractElemFromSet(ITr.ClassType,fn,ctype);
        end;
      end;
    end;  
  end;
  DIClassBTSClassArrayOnOpenRemote(ctype,astr,acnt);
  return;
END;

global
procedure INVc_DIClassSClass(record INVc INr,var record RcVc  RepSpec)
begin
  record ITVc ITr;
  record DIVc DIr;
  integer typeam,i,clam,j;
  string 5 ctype,cclass;
  boolean res,found;
  string 100 classification;
  
  classification = INr.DispGroups;
  if (nonblank(classification)) then begin
    if (nonblank(INr.Group)) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        typeam = CountObjects(ITr.ClassType); 
        clam = CountObjects(classification); 
        for (i=1;i<=clam;i=i+1) begin
          ExtractElemFromSet(classification,i,cclass);
          DIr.Code = cclass;
          found = false;
          if (ReadFirstMain(DIr,1,true)) then begin
            for (j=1;j<=typeam;j=j+1) begin
              ExtractElemFromSet(ITr.ClassType,j,ctype);
              if (DIr.CType==ctype) then begin
                found = true;
                switch (j) begin
                  case 1: RepSpec.f1 = cclass;
                  case 2: RepSpec.f2 = cclass;
                  case 3: RepSpec.f3 = cclass;
                  case 4: RepSpec.f4 = cclass;
                  case 5: RepSpec.f5 = cclass;
                  case 6: RepSpec.ObjStr = cclass;
                  case 7: RepSpec.Stext = cclass;
                  case 8: RepSpec.LastAcc = cclass;
                end;
              end;
            end;
          end;
          if (found == false) then begin
            if (nonblank(RepSpec.f6)) then begin
              RepSpec.f6 = RepSpec.f6 & "," & cclass;
            end else begin
               RepSpec.f6 = cclass;
            end;
          end;
        end;        
      end;      
    end;
  end;
  return;
end;

global
procedure ObjBTSClassArrayOnOpen(integer wn,integer fn,var Array string astr,var Integer acnt)
BEGIN
  record ObjVc OBjr;
  record TRVc TRr;
  row TRVc TRrw;
  record VIVc VIr;
  row VIVc VIrw;
  record ORVc ORr;
  row ORVc ORrw;
  record QTVc QTr;
  row QTVc QTrw;
  record IVVc IVr;
  row IVVc IVrw;
  record ExpVc Expr;
  row ExpVc Exprw;
  record SDVc SDr;
  row SDVc SDrw;
  record SRVc SRr;
  row SRVc SRrw;
  record SHVc SHr;
  row SHVc SHrw;
  record OPVc OPr;
  row OPVc OPrw;
  record IPVc IPr;
  row IPVc IPrw;
  record WSVc WSr;
  row WSVc WSrw;
  record Bud1Vc Bud1r;
  record Bud2Vc Bud2r;
  
  string 5 otype;
  boolean TrHs,testf;
  integer cwn,objam,rwcnt,currow;
  string 20 sset;
  string 200 typ,accnr;
  row PMBlock PMrw;
  record CLInVc CLInr;
  record CLOutVc CLOutr;
  record CostAccBlock CostAccRec;
  record AccBlock ARAccRec;
  record INVc INr;
  string 255 tstr,location;
  record PRVc PRr;
    
  cwn = MotherWindow(wn);
  currow = WindowActiveRow(cwn);
  switch (GetWindowFileName(cwn)) begin    
    case "TRVc":
      GetWindowRecord(cwn,TRr);
      rwcnt = MatRowCnt(TRr);
      if (currow<rwcnt) then begin
        MatRowGet(TRr,currow,TRrw);
        accnr = TRrw.AccNumber;
      end;
    case "VIVc":
      GetWindowRecord(cwn,VIr);
      rwcnt = MatRowCnt(VIr);
      if (currow<rwcnt) and (currow>=0) then begin
        MatRowGet(VIr,currow,VIrw);
        accnr = VIrw.AccNumber;
      end else begin
        accnr = VIr.APAcc;
        if (VIr.WithHoldingTax<>0) then begin
          accnr = FindWithHoldAcc(VIr.APAcc,VIr.Objects);
        end;  
      end;
    case "IVVc":
      GetWindowRecord(cwn,IVr);
      rwcnt = MatRowCnt(IVr);
      if (currow<rwcnt) and (currow>=0) then begin
        MatRowGet(IVr,currow,IVrw);
        accnr = IVrw.SalesAcc;
      end else begin
        accnr = IVr.ARAcc;
      end;
    case "ORVc":
      GetWindowRecord(cwn,ORr);
      rwcnt = MatRowCnt(ORr);
      if (currow<rwcnt) and (currow>=0) then begin
        MatRowGet(ORr,currow,ORrw);
        accnr = ORrw.SalesAcc;
      end else begin
        accnr = "";
      end;
    case "QTVc":
      GetWindowRecord(cwn,QTr);
      rwcnt = MatRowCnt(QTr);
      if (currow<rwcnt) and (currow>=0) then begin
        MatRowGet(QTr,currow,QTrw);
        accnr = QTrw.SalesAcc;
      end else begin
        accnr = "";
      end;
    case "ExpVc":
      GetWindowRecord(cwn,Expr);
      rwcnt = MatRowCnt(Expr);
      if (currow<rwcnt) then begin
        MatRowGet(Expr,currow,Exprw);
        accnr = Exprw.AccNumber;
      end;
    case "CLInVc":
      if (currow>=0) then begin
        GetWindowRecord(cwn,CLInr);
        if (GetPMRow(CLINr.PayMode,PMrw)) then begin end;
        accnr = PMrw.AccNr;
      end;
    case "CLOutVc":
      if (currow>=0) then begin
        GetWindowRecord(cwn,CLOutr);
        if (GetPMRow(CLOutr.PayMode,PMrw)) then begin end;
        accnr = PMrw.AccNr;
      end;
    case "SDVc":
      GetWindowRecord(cwn,SDr);
      if (currow>=0) then begin
        MatRowGet(SDr,currow,SDrw);
        accnr = SDrw.CostAcc;
      end;
      if (blank(accnr)) then begin
        accnr = SDr.CostAcc;
      end;
    case "SRVc":
      GetWindowRecord(cwn,SRr);
      if (currow>=0) then begin
        MatRowGet(SRr,currow,SRrw);
        accnr = SRrw.SRVarAcc;
      end;
      if (blank(accnr)) then begin
        accnr = SRr.SRVarAcc;
      end;
    case "SHVc":
      GetWindowRecord(cwn,SHr);
      if (currow>=0) then begin          
        BlockLoad(CostAccRec);
        BlockLoad(ARAccRec);
        MatRowGet(SHr,currow,SHrw);
        location = SHrw.Location;
        if (blank(location)) then begin
          location = SHr.Location;
        end;
        if (ReadFirstItem(SHrw.ArtCode,INr,true,true)) then begin end;
        if (GetCOSAcc(SHrw.CostAcc,SHr.CustCode,location,ARAccRec,INr,CostAccRec.ItemGroupAccounts,false,0,accnr,tstr)==true) then begin
        end;
      end;
    case "OPVc":
      GetWindowRecord(cwn,OPr);
      if (currow>=0) then begin
        MatRowGet(OPr,currow,OPrw);
        tstr = OPrw.PayMode;
        if (blank(tstr)) then begin
          tstr = OPr.PayMode;
        end;
        if (GetPMRow(tstr,PMrw)) then begin end;
        accnr = PMrw.AccNr;
      end;
    case "IPVc":
      GetWindowRecord(cwn,IPr);
      if (currow>=0) then begin
        MatRowGet(IPr,currow,IPrw);
        tstr = IPrw.PayMode;
        if (blank(tstr)) then begin
          tstr = IPr.PayMode;
        end;
        if (GetPMRow(tstr,PMrw)) then begin end;
        accnr = PMrw.AccNr;
      end;
    case "PRVc":
      GetWindowRecord(cwn,PRr);
      accnr = PRr.PRClass;
    case "WSVc":
      GetWindowRecord(cwn,WSr);
      if (currow>=0) then begin
        MatRowGet(WSr,currow,WSrw);
        accnr = WSrw.CostAcc;
      end;
      if (blank(accnr)) then begin
        accnr = WSr.CostAcc;
      end;
    case "Bud1Vc":
      GetWindowRecord(cwn,Bud1r);
      accnr = Bud1r.AccNumber;
    case "Bud2Vc":
      GetWindowRecord(cwn,Bud2r);
      accnr = Bud2r.AccNumber;
    otherwise
      accnr = OuterReadObjBTSClassArrayOnOpen(cwn);
  end;
  otype = "";
  if (nonblank(accnr)) then begin
    if (GetWindowClass(cwn)=="PRDClass") then begin 
      FindOTforPRClass(accnr,typ);
    end else begin
      FindOTforAcc(accnr,typ);
    end;   
    objam=CountObjects(typ); 
    if (objam>=fn) then begin
      ExtractElemFromSet(typ,fn,otype);
    end;
  end;
  
  ObjBTSClassArrayOnOpenRemote(otype,astr,acnt);
  
  return;
END;

global
function string 40 SHDClassSpecPasteNameObjects(Integer wn)
BEGIN
  record SHVc SHr;
  row SHVc SHrw;
  Integer rownr;
  string 200 typ;
  string 255 psname,accnr;
  record CostAccBlock CostAccRec;
  record AccBlock ARAccRec;
  record INVc INr;
  string 255 tstr,location;

  GetWindowRecord(wn,SHr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(SHr,rownr,SHrw);
    BlockLoad(CostAccRec);
    BlockLoad(ARAccRec);
    if (ReadFirstItem(SHrw.ArtCode,INr,true,true)) then begin end;
    location = SHrw.Location;
    if (blank(location)) then begin
      location = SHr.Location;
    end;
    if (GetCOSAcc(SHrw.CostAcc,SHr.CustCode,location,ARAccRec,INr,CostAccRec.ItemGroupAccounts,true,0,accnr,tstr)==true) then begin
    end;
    FindOTforAcc(accnr,typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  SHDClassSpecPasteNameObjects = psname;
  RETURN;
END;

global
procedure PRClBTSClassArrayOnOpen(integer wn,integer fn,var Array string astr,var Integer acnt)
BEGIN
  record PRClVc PRClr;
  record PRVc PRr;
  string 5 ctype;
  boolean TrHs,testf;
  integer cwn;
  Integer objam;
  string 20 sset;
  string 200 typ;
  
  cwn=MotherWindow(wn);
  GetWindowRecord(cwn,PRr);
  ctype="";
  if (nonblank(PRr.PRClass)) then begin
    FindClTypeforPRClass(PRr.PRClass,typ);
    if (nonblank(typ)) then begin
      objam=CountObjects(typ); 
      if (objam>=fn) then begin
        ExtractElemFromSet(typ,fn,ctype);
      end;
    end;  
  end;
  
  PRClBTSClassArrayOnOpenRemote(ctype,astr,acnt);
  
  return;
END;

global
procedure VARsubSClassArrayOnOpen(integer wn,integer fn,var Array string astr,var Integer acnt)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  VARsubSClassArrayOnOpenRemote(RepSpec.AccStr,RepSpec.f6,RepSpec.FirstAcc,RepSpec.LastAcc,fn,astr,acnt);  
  return;
end;

global
procedure PayModeBankAccSClassArrayOnOpen(var Array string acode,var Array string acomment)
begin
  record PMBlock PMb;
  row PMBlock PMbrw;
  integer i,rwcnt;
  
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    acode[acode.length] = PMbrw.BankNr;
  end;
  return;
end;

global
procedure TaxAuthIDBlockSClassArrayOnOpen(var Array string acode,var Array string acomment)
begin
  record TaxAuthIDBlock TaxAuthIDb;
  row TaxAuthIDBlock TaxAuthIDrw;
  integer i,rwcnt,acnt;
  
  BlockLoad(TaxAuthIDb);
  rwcnt = MatRowCnt(TaxAuthIDb);
  acnt = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TaxAuthIDb,i,TaxAuthIDrw);
    acode[acnt] = TaxAuthIDrw.TaxAuthID;
    acomment[acnt] = TaxAuthIDrw.Comment;
    acnt = acnt + 1;
  end;
  return;
end;
