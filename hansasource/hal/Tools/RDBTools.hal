remote updating procedure RDBDoClearData(LongInt);
remote updating procedure RDBDoBuildData(LongInt);

global
procedure RDBAddRegister()
begin
  Integer wn,wn2;
  record RcVc RepSpec;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  wn2 = OpenWindow("AddRDBRegWClass",0,wn,"","",RepSpec);
  
  return;
end;

global
updating procedure RDBDoAddRegister()
begin
  Integer wn,mwn,i,rwcnt;
  record RcVc RepSpec;
  record RDBRegsBlock RDBr;
  row RDBRegsBlock RDBrw;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  BlockLoad(RDBr);
  
  if (ValidRegisterCode(RepSpec.f1)==false) then begin
    StopAlert("Not a valid register: " & RepSpec.f1);
    goto out;
  end;
  
  rwcnt = MatRowCnt(RDBr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(RDBr,i,RDBrw);
    if (RDBrw.RegCode==RepSpec.f1) then begin
      StopAlert("Register already included: " & RepSpec.f1);
      goto out;
    end;
  end;
  
  RDBrw.RegCode = RepSpec.f1;
  RDBrw.Valid = 0;
  MatRowPut(RDBr,rwcnt,RDBrw);
  BlockStore(RDBr);
  PutWindowRecord(mwn,RDBr);
  
out:;
  CloseWindow(wn);
  return;
end;
  
global
updating procedure RDBRemoveRegister()
begin
  Integer wn,i,rwcnt;
  record RDBRegsBlock RDBr;
  row RDBRegsBlock RDBrw;
  row RDBRegsBlock RDBrw2;
  
  wn = CurWindow;
  GetWindowRecord(wn,RDBr);
  MatRowGet(RDBr,WindowActiveRow(wn),RDBrw);
  
  BlockLoad(RDBr);
  rwcnt = MatRowCnt(RDBr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(RDBr,i,RDBrw2);
    if (RDBrw.RegCode==RDBrw2.RegCode) then begin
      if (RDBrw2.Valid==0) then begin
        goto delrow;
      end else begin
        StopAlert("RDB Data must be cleared first");
        goto out;
      end;
    end;
  end;
  
  goto out;
  
delrow:;
  MatRowDelete(RDBr,i);
  BlockStore(RDBr);
  
out:;
  return;
end;

global
updating procedure RDBClearData()
begin
  Integer wn,i,rwcnt;
  record RDBRegsBlock RDBr;
  
  wn = CurWindow;
  
  RDBDoClearData(WindowActiveRow(wn));
  
  BlockLoad(RDBr);
  PutWindowRecord(wn,RDBr);
  SetWindowState(wn,Rs_normal);
  
  return;
end;

global
updating procedure RDBClearAllData()
begin
  Integer wn,i,rwcnt;
  record RDBRegsBlock RDBr;
  
  wn = CurWindow;
  BlockLoad(RDBr);
  rwcnt = MatRowCnt(RDBr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    RDBDoClearData(i);
  end;
  
  BlockLoad(RDBr);
  PutWindowRecord(wn,RDBr);
  SetWindowState(wn,Rs_normal);
  
  return;
end;

global
updating procedure RDBBuildData()
begin
  Integer wn;
  record RDBRegsBlock RDBr;
  
  wn = CurWindow;

  RDBDoBuildData(WindowActiveRow(wn));
  
  BlockLoad(RDBr);
  PutWindowRecord(wn,RDBr);
  SetWindowState(wn,Rs_normal);
  
  return;
end;

global
updating procedure RDBBuildAllData()
begin
  Integer wn,i,rwcnt;
  record RDBRegsBlock RDBr;
  
  wn = CurWindow;
  BlockLoad(RDBr);
  rwcnt = MatRowCnt(RDBr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    RDBDoBuildData(i);
  end;
  
  BlockLoad(RDBr);
  PutWindowRecord(wn,RDBr);
  SetWindowState(wn,Rs_normal);
  //SetUpdate(wn);
  
  return;
end;
