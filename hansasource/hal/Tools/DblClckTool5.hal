remote procedure RemoteQTPaste(var record QTVc,var string,var LongInt);
external function LongInt QTVcRecordDefaultsClient(LongInt,var record QTVc,record QTVc,LongInt,LongInt);
remote updating function Boolean DblAssignJobCustVc_Remote(record RcVc,LongInt);
external procedure ActVcRecordDefClient(var record ActVc);
remote updating function Boolean DoReleaseIntORRsrvAll(record IntORVc,Integer);
remote updating function Boolean DoAutoReserveIntORAll(record IntORVc,Integer);
remote updating function Integer DoIntORNewReserv(var record StockReservVc,Integer,LongInt,LongInt,Integer);
remote updating function Integer DoIntORNewBackToBackPO(var record StockReservVc,string,LongInt);
remote updating function Integer DoIntORNewReservNext(var record StockReservVc,string,LongInt);
remote updating function Integer DoIntORNewReservStock(var record StockReservVc,string,string,string,LongInt);
remote updating function Boolean DoAutoReserveAll(record ORVc,Integer);
remote updating function Boolean DoReleaseAll(record ORVc,Integer);
remote updating function Integer UnReserveStockRes(record StockReservVc);
remote updating function Integer MoveReserveUp(record StockReservVc);
remote updating function Integer MoveReserveDown(record StockReservVc);
remote updating function Integer DoORNewReserv(var record StockReservVc,Integer,LongInt,LongInt,Integer);
remote updating function Integer DoORNewReservStock(var record StockReservVc,string,string,string,LongInt);
remote updating function Integer DoORNewReservNext(var record StockReservVc,string,string,LongInt);
remote updating function Integer DoORNewBackToBackPO(var record StockReservVc,string,LongInt);
external procedure ReadTXServiceReply(var record TXServiceReplyVc,var Area,Boolean);
external procedure SendFunctionVersion(string,string,var Area);
external procedure SendTextParameter(string,var Area);
external updating function Boolean SendServiceRequest(string,Boolean,area,var Area);
remote function Boolean SendKIReportFileToServer(record HTSFileVc);
external procedure StripSpace(var string,string);
remote updating procedure SetReadFlagHal(LongInt,Integer);
external procedure GetCustAndBasket(string,var string,var LongInt);
external procedure CheckObsRecord(record GuestObserVc);
external procedure RecalculateRepWsm();
external procedure ExtractObj(string,var Integer,var string);
remote function Boolean RestAccVc_PasteResource(var record RestAccVc);
external function val GetPOQty(string,Date,Date,string,Boolean);
remote updating function Boolean CreateBDReminder(string,string,var record ActVc);

global
procedure DblShopBaskVc2(string dblstr,string l,Integer currepwn)
begin
  record ShopBaskVc ShopBaskr;
  Integer wn;
      
  ShopBaskr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(ShopBaskr,1,true)) then begin
    wn = OpenWindow("ShopBaskAuditDClass",1,0,"","",ShopBaskr);
  end;
  return;
end;

global
procedure DblShopBaskVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ShopBaskVc ShopBaskr;

  ShopBaskr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(ShopBaskr,1,true)) then begin
    wn = OpenWindow("ShopBaskDClass",1,0,"","",ShopBaskr);
  end;     
  return;
end;

global
procedure DblShopBaskVcID(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ShopBaskVc ShopBaskr;

  ShopBaskr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(ShopBaskr,1,true)) then begin
    wn = OpenWindow("ShopBaskDClass",1,0,"","",ShopBaskr);
  end;     
  return;
end;

global
procedure DblJobShopBaskVcID(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ShopBaskVc ShopBaskr;

  ShopBaskr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(ShopBaskr,1,true)) then begin
    wn = OpenWindow("JobShopBaskDClass",1,0,"","",ShopBaskr);
  end;     
  return;
end;

global
procedure DblAssignCleanRn(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    ReportDefaults(RepSpec,"AssignCLadyRClass");    
    RepSpec.repname = "AssignCLadyRn";
    RepSpec.d1 = dblstr;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblNewCleanActVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr;

  RecordNew(Actr);
  Actr.CalTimeFlag = 2;
  Actr.TodoFlag = 0;
  Actr.PrivateFlag = 0;
  Actr.Invalid = 0;
  Actr.MainPersons = dblstr;
  Actr.TransDate = StringToDate(l);
  Actr.EndDate = Actr.TransDate;
  wn = OpenWindow("ActDClass",1,0,"","",Actr);
  return;
end;

global
procedure DblMoveFoliotoRsrvs(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
   
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[29] = 1;
  PutWindowRecord(wn,RepSpec);
  RecalculateRepWsm;
  return;
end;

global
procedure DblJobSelVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
   
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.long2 = StringToLongInt(dblstr);
  RepSpec.flags[29] = 2;
  RepSpec.f1 = "";
  PutWindowRecord(wn,RepSpec);
  RecalculateRepWsm;
  MessageBox(0,"You have selected Reservation " & dblstr);
  return;
end;

global
procedure DblJobCustSelVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
   
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.f1         = dblstr;
  PutWindowRecord(wn,RepSpec);
  MessageBox(0,USetStr(12525) & dblstr);
  return;
end;

global
updating procedure DblAssignJobCustVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  Boolean updf;
   
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  
  if (nonblank(l)) then begin
    updf = DblAssignJobCustVc_Remote(RepSpec,StringToLongInt(FirstInRange(l,10)));    
    if (updf) then begin
      RecalculateRepWsm;
    end;
  end;
  return;
end;

global
procedure DblNewJobFolioVc(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  string 255 tstr,t2;
  LongInt nr,lastnr;
  Integer wn,pos,cnt,theone;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  theone = StringToLongInt(l);
  switch (theone) begin
    case 0: t2 = RepSpec.f3;
    case 1: t2 = RepSpec.f4;
    case 2: t2 = RepSpec.f5;
    case 3: t2 = RepSpec.f6;
  end;
  if (nonblank(t2)) then begin
    pos = 0;
    ExtractObj(t2,pos,tstr);
    while (nonblank(tstr)) begin
      lastnr = StringToLongInt(tstr);
      if (lastnr>0) then begin
        nr = lastnr + 1;
      end;
      ExtractObj(t2,pos,tstr);
    end;
  end;
  if (nr<=0) then begin
    nr = 1;
  end;
  if (nonblank(t2)) then begin
    t2 = t2 & ",";
  end;
  t2 = t2 & nr;
  switch (theone) begin
    case 0: RepSpec.f3 = t2;
    case 1: RepSpec.f4 = t2;
    case 2: RepSpec.f5 = t2;
    case 3: RepSpec.f6 = t2;
  end;
  PutWindowRecord(wn,RepSpec);
  RecalculateRepWsm;
  return;
end;

global
procedure DblSHVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SHVc SHr;

  if (nonblank(l)) then begin
    SHr.SerNr = FirstInRange(l,20);
  end else begin
    SHr.SerNr = FirstInRange(dblstr,20);
  end;
  if (ReadFirstMain(SHr,1,true)) then begin  
    wn = OpenWindow("SHDClass",1,0,"","",SHr);
  end; 
  return;
end;

global
procedure DblRetVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RetVc Retr;

  Retr.SerNr = dblstr;
  if (ReadFirstMain(Retr,1,true)) then begin  
    wn = OpenWindow("RetDClass",1,0,"","",Retr);
  end; 
  return;
end;

global
procedure DblProdOrder(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ProdOrderVc ProdOrderr;

  if (nonblank(dblstr)) then begin
    ProdOrderr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(ProdOrderr,1,true)) then begin  
      wn = OpenWindow("ProdOrderDClass",1,0,"","",ProdOrderr);
    end; 
  end;
  return;
end;

global
procedure DblProdPlan(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ProdPlanVc ProdPlanr;

  if (nonblank(dblstr)) then begin
    ProdPlanr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(ProdPlanr,1,true)) then begin  
      wn = OpenWindow("ProdPlanDClass",1,0,"","",ProdPlanr);
    end; 
  end;
  return;
end;

global
procedure DblPOPlan(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POPlanVc POPlanr;

  if (nonblank(dblstr)) then begin
    POPlanr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(POPlanr,1,true)) then begin  
      wn = OpenWindow("POPlanDClass",1,0,"","",POPlanr);
    end; 
  end;
  return;
end;

global
procedure RestBookID(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RestBookingVc RestBookingr;

  if (nonblank(l)) then begin
    RestBookingr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(RestBookingr,1,true)) then begin  
      wn = OpenWindow("RestBookingDClass",1,0,"","",RestBookingr);
    end; 
  end;
  return;
end;

global
procedure RestBookCust(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc prevRepSpec;

  GetWindowRecord(currepwn,prevRepSpec);
  ReportDefaults(RepSpec,"RestPlanningRClass");
  RepSpec.sStartDate = prevRepSpec.sStartDate;
  RepSpec.sEndDate = prevRepSpec.sEndDate;
  RepSpec.Stext = prevRepSpec.Stext;
  RepSpec.repname = "RestPlanningRn";
  RepSpec.f1 = l;
  RepSpec.ArtMode = 1;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblResTypeVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ResTypeVc ResTyper;

  ResTyper.Code = FirstInRange(dblstr,10);
  if (ReadFirstMain(ResTyper,1,true)) then begin
    wn = OpenWindow("ResTypeDClass",1,0,"","",ResTyper);
  end;     
  return;
end;

global
procedure RestBookToRestAcc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  record RestBookingVc RestBookingr;
    
  if (nonblank(l)) then begin
    GetWindowRecord(currepwn,RepSpec);
    if ((RepSpec.UsedOnly!=0) and (WindowValid(RepSpec.UsedOnly))) then begin
      GetWindowRecord(RepSpec.UsedOnly,RestAccr);      
      WindowDeactivateField(RepSpec.UsedOnly);
      RestBookingr.SerNr = FirstInRange(l,10);
      if (ReadFirstMain(RestBookingr,1,true)) then begin  
        RestAccr.Resource = RestBookingr.ResCode;
        if (RestAccVc_PasteResource(RestAccr)) then begin end;
        RestAccr.CUCode = RestBookingr.CUCode;
        RestAccr.CUName = RestBookingr.CUName;
        RestAccr.Comment = RestBookingr.CUName;
        RestAccr.Persons = RestBookingr.Persons;
        RestAccr.CustCode = RestBookingr.Table;
        PutWindowRecord(RepSpec.UsedOnly,RestAccr);
        ActivateTile(RepSpec.UsedOnly,10);        
        SelectWindow(RepSpec.UsedOnly);
      end;
    end;
  end;
  return;
end;

global
procedure DblNewObs(string dblstr,string l,Integer currepwn)
begin
  record GuestObserVc GuestObserr;
  record OBTypeVc OBTyper;
  record RcVc RepSpec;
  record JobVc Jobr;
  row JobVc Jobrw;
  Integer wn;

  GetWindowRecord(currepwn,RepSpec);
  RecordNew(GuestObserr);
  GuestObserr.Guest = l;
  GuestObserr.OBType = dblstr;
  GuestObserr.Person = CurrentUser;
  OBTyper.Code = GuestObserr.OBType;
  if (ReadFirstMain(OBTyper,1,true)) then begin
    GuestObserr.Comment = OBTyper.Comment;
    GuestObserr.Type = OBTyper.Type;
  end;
  CheckObsRecord(GuestObserr);
  Jobr.SerNr = RepSpec.long1;
  if (ReadFirstMain(Jobr,1,true)) then begin
    GuestObserr.StartDate = Jobr.TransDate;
    GuestObserr.EndDate = Jobr.EndDate;
    if (MatRowCnt(Jobr)>0) then begin
      MatRowGet(Jobr,0,Jobrw);
      GuestObserr.Guest = Jobrw.GuestCode;
    end;
  end;
  wn = OpenWindow("GuestObserDClass",0,0,"","",GuestObserr);
  return;
end;

global
procedure DblPurchProgPORep(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  Integer pos,cnt;
  string 255 tstr;

  pos = 0;
  ReportDefaults(RepSpec,"PurchProgRClass");    
  RepSpec.repname = "PurchProgOrdRn";
  ExtractObj(l,pos,tstr);
  RepSpec.f1 = tstr;
  cnt = cnt + 1;
  while (nonblank(tstr)) begin
    ExtractObj(l,pos,tstr);
    cnt = cnt + 1;
    switch (cnt) begin
      case 2: RepSpec.d1 = StringToDate(tstr);
      case 3: RepSpec.d2 = StringToDate(tstr);
      case 4: RepSpec.f2 = tstr;
    end;
  end;  
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblPurchProgOR(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PrelORPUStockVc PORPUr;
   
  PORPUr.ItemCode = FirstInRange(l,20);
  PORPUr.EventDate = LastInRange(l,20);
  PORPUr.FileName = "ORVc";
  if (ReadFirstMain(PORPUr,3,true)) then begin
    wn = OpenWindow("PrelORPUStockDClass",1,0,"","",PORPUr);
  end;
  
  return;
end;

global
procedure DblPurchProgPU(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record INProgVc INProgr;
   
  INProgr.ItemCode = FirstInRange(l,20);
  INProgr.NeededDate = LastInRange(l,20);
  INProgr.FileName = "PUVc";
  if (ReadFirstMain(INProgr,2,true)) then begin
    wn = OpenWindow("INProgDClass",1,0,"","",INProgr);
  end;     
  return;
end;

global
procedure DblPurchProgPO(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PrelORPUStockVc POPrelORPUStockr;
   
  POPrelORPUStockr.ItemCode = FirstInRange(l,20);
  POPrelORPUStockr.EventDate = LastInRange(l,20);
  POPrelORPUStockr.FileName = "POVc";
  if (ReadFirstMain(POPrelORPUStockr,3,true)) then begin
    wn = OpenWindow("PrelORPUStockDClass",1,0,"","",POPrelORPUStockr);
  end;     
  return;
end;

global
procedure DblINProgVc(string dblstr,string l,Integer currepwn)
begin
  record INProgVc INProgr;
  Integer wn;
  Integer pos,cnt;
  string 255 tstr;

  pos = 0;
  ExtractObj(l,pos,tstr);
  INProgr.FileName = tstr;
  cnt = cnt + 1;
  while (nonblank(tstr)) begin
    ExtractObj(l,pos,tstr);
    cnt = cnt + 1;
    switch (cnt) begin
      case 2: INProgr.ItemCode = tstr;
      case 3: INProgr.OrderDate = StringToDate(tstr);
      case 4: if (tstr!="NIL") then begin INProgr.Location = tstr; end;
      case 5: if (tstr!="NIL") then begin INProgr.VECode = tstr; end;
    end;
  end;  
  if (ReadFirstMain(INProgr,0,true)) then begin
    wn = OpenWindow("INProgDClass",1,0,"","",INProgr);
  end;
  return;
end;

global
procedure DblStockTakeVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record StockTakeVc StockTaker;

  StockTaker.SerNr = dblstr;
  if (ReadFirstMain(StockTaker,1,true)) then begin  
    wn = OpenWindow("StockTakeDClass",1,0,"","",StockTaker);
  end; 
  return;
end;

global
procedure DblWSIVVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record WSIVVc WSIVr;
  Integer pos;
  string 255 tstr;  
  Integer cnt;
  
  if (nonblank(l)) then begin
    pos = 0;
    ExtractObj(l,pos,tstr);
    cnt = cnt + 1;
    while (nonblank(tstr)) begin
      switch (cnt) begin              
        case 1: WSIVr.CUCode = tstr;
        case 2: WSIVr.RecType = StringToInt(tstr);
        case 3: WSIVr.SerNr = StringToLongInt(tstr);
        case 4: WSIVr.Row = StringToInt(tstr);
      end;
      ExtractObj(l,pos,tstr);
      cnt = cnt + 1;
    end;  
    if (ReadFirstMain(WSIVr,4,true)) then begin  
      wn = OpenWindow("WSIVDClass",1,0,"","",WSIVr);
    end; 
  end;
  return;
end;

global
procedure DblAccessVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record AccessVc Accessr;
  Integer oldcomp;

  if (nonblank(dblstr)) then begin
    if (nonblank(l)) then begin
      oldcomp = CurrentCompany;
      SetCompanyCode(l,false);
    end;
    Accessr.Code = FirstInRange(dblstr,5);
    if (ReadFirstMain(Accessr,1,true)) then begin  
      wn = OpenWindow("AccessDClass",1,0,"","",Accessr);
    end; 
    if (nonblank(l)) then begin
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
procedure DblTRVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn,IntVc;
  record TRVc TRr;

  IntVc = StringToInt(l);
  TRr.Number = dblstr;
  TRr.IntYc = IntVc;

  if (ReadFirstKey("Number",TRr,2,true)) then begin
    wn = OpenWindow("TRDClass",1,0,"","",TRr);
  end;
  return;
end;

global
procedure DblRentQT(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RentQTVc RentQTr;

  if (nonblank(dblstr)) then begin
    RentQTr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(RentQTr,1,true)) then begin  
      wn = OpenWindow("RentQTDClass",1,0,"","",RentQTr);
    end; 
  end;
  return;
end;

global 
updating procedure DblBDReminder(string dblstr,string l,Integer currepwn)
begin
  record ActVc Actr;
  
  if (CreateBDReminder(dblstr,l,Actr)) then begin
//    MessageBox(10994,"");
    OpenWindow("ActDClass",1,0,"","",Actr);
  end;
  return;
end;

global
procedure DblPosVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PosVc Posr;
  string 20 tstr;

  if (nonblank(l)) then begin tstr = l; end;
  if (blank(tstr)) then begin tstr = dblstr; end;
  if (nonblank(tstr)) then begin
    Posr.Code = FirstInRange(tstr,20);
    if (ReadFirstMain(Posr,1,true)) then begin  
      wn = OpenWindow("PosDClass",1,0,"","",Posr);
    end; 
  end;
  return;
end;

global
procedure DblPosHist(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    ReportDefaults(RepSpec,"PositionHistRClass");    
    RepSpec.repname = "PositionHistRn";
    RepSpec.flags[0] = 0;
    RepSpec.flags[1] = 1;
    RepSpec.f1 = dblstr;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblGuestObserv(string dblstr,string l,Integer currepwn)
begin
  record GuestObserVc GuestObserr;
  Integer wn,wn1;
  
  RecordNew(GuestObserr);
  GuestObserr.Guest = l;
  GuestObserr.Type = 0;
  wn1 = OpenWindow("GuestObserDClass",1,0,"","",GuestObserr);
  return; 
end;

global
procedure DblNewCashier(string dblstr,string l,Integer currepwn)
begin
  record CashierBalVc CashierBalr;
  row CashierBalVc CashierBalrw;
  Integer wn;
  
  RecordNew(CashierBalr);
  CashierBalrw.PMCode = l;
  CashierBalrw.Amount = StringToVal(dblstr,M4Val);
  MatRowPut(CashierBalr,0,CashierBalrw);
  wn = OpenWindow("CashierBalDClass",1,0,"","",CashierBalr);
  return; 
end;

global
procedure DblIntIVVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IntIVVc IntIVr;
  string 20 tstr;

  if (nonblank(l)) then begin tstr = l; end;
  if (blank(tstr)) then begin tstr = dblstr; end;
  if (nonblank(tstr)) then begin
    IntIVr.SerNr = FirstInRange(tstr,20);
    if (ReadFirstMain(IntIVr,1,true)) then begin  
      wn = OpenWindow("IntIVDClass",1,0,"","",IntIVr);
    end; 
  end;
  return;
end;

global
procedure DblWSVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record WSVc WSr; 
   
  WSr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(WSr,1,true)) then begin
    wn = OpenWindow("WSDClass",1,0,"","",WSr);
  end; 
  return;
end;

global
procedure DblNewAct(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr; 
  record CUVc CUr; 
  record ASTBlock ASTRec;
  Integer curcomp;
   
  CUr.Code = FirstInRange(l,20);
  if (ReadFIrstMain(CUr,1,true)) then begin
  end;
  curcomp = CurrentCompany;
  RecordNew(Actr);
  ActVcRecordDefClient(Actr);
  Actr.CUCode = CUr.Code;
  Actr.MainPersons = CurrentUser;
  Actr.CUName = CUr.Name;
  if (blank(Actr.Contact)) then begin Actr.Contact = CUr.Person; end;
  if (blank(Actr.Phone)) then begin Actr.Phone = CUr.Phone; end;
  BlockLoad(ASTRec);
  Actr.TransDate = CurrentDate;
  Actr.TodoFlag = 1;
  wn = OpenWindow("ActDClass",1,0,"","",Actr);
//  WindowFieldGoto(wn,Actr,-1,"Comment",true);
  return;
end;

global
procedure DblRetPUVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RetPUVc RetPUr;

  if (nonblank(l)) then begin
    RetPUr.SerNr = FirstInRange(l,10);
  end else begin
    RetPUr.SerNr = FirstInRange(dblstr,10);
  end;
  if (RetPUr.SerNr>0) then begin
    if (ReadFirstMain(RetPUr,1,true)) then begin  
      wn = OpenWindow("RetPUDClass",1,0,"","",RetPUr);
    end; 
  end;
  return;
end;

global
procedure DblINVarControl(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.ArtMode = 1;
  RepSpec.Media = mtScreen;
  RepSpec.f1 = dblstr;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblProdOrderVc(string dblstr,string l, integer currepwn)
begin
  integer wn;
  record ProdOrderVc ProdOrderr;
  
  ProdOrderr.SerNr = dblstr;
  if (ReadFirstMain(ProdOrderr,1,true)) then begin
    wn = OpenWindow("ProdOrderDClass",1,0,"","",ProdOrderr);
  end;
  return;
end;

updating procedure KrediidiinfoReport(string l,Integer typ)
begin
  record CUVc CUr;
  Area a_req,a_reply;
  string 255 tstr,service,compid;
  Integer send;
  Boolean res;
  record HTSFileVc HTSFiler;
  record RcVc RepSpec;
  record TXServiceReplyVc TXSrvReplyr;
  record InternetEnablerBlock IEb;
    
  CUr.Code = l;
  if (ReadFIrstMain(CUr,1,true)) then begin
    BlockLoad(IEb);
    switch (IEb.RegInCountry) begin
      case 99: 
        switch (CurrentCompany) begin
          case 26:
          case 39: //Sweden
            compid = CUr.RegNr2;
            if (blank(compid)) then begin
              compid = CUr.RegNr1;
            end;
          case 74: compid = CUr.RegNr1;//Estonia
          case 16: compid = CUr.RegNr1;//Estonia
          case 7: compid = CUr.RegNr1;//Estonia
          otherwise
            compid = CUr.RegNr1;
        end;
      case 3: //Sweden
        compid = CUr.RegNr2;
        if (blank(compid)) then begin
          compid = CUr.RegNr1;
        end;
      otherwise
        compid = CUr.RegNr1;//Estonia
    end;

//Sweden

    if (blank(compid)) then begin 
      send = -1; 
    end;  
    switch (CUr.CustType) begin
      case 0:  send = 1;
      case 1:  send = 2;
    end;
    if (send!=0) then begin
      SendFunctionVersion("50.2","",a_req);
      SendTextParameter(send,a_req);
      SendTextParameter(CurrentUser,a_req);
      SendTextParameter(compid,a_req);
      switch (send) begin
        case 1: service = "KREDIIDIINFOCOMPANY";
        case 2: service = "KREDIIDIINFOPERSON";
      end;
                  
      res = SendServiceRequest(service,false,a_req,a_reply); 
      if (res) then begin
        ReadTXServiceReply(TXSrvReplyr,a_reply,true);
        SetRecordBlob(HTSFiler,"Math",a_reply);    
        HTSFiler.FileName = "tmp\\ki-" & CUr.Code & ".xml";
        if (SendKIReportFileToServer(HTSFiler)) then begin
          ReportDefaults(RepSpec,"KrediidiinfoRClass");    
          RepSpec.repname = "KrediidiinfoRn";
          RepSpec.Media = mtScreen;
          RepSpec.f1 = l;
          RepSpec.flags[0] = typ;
          RunReport(RepSpec,0);       
        end;
      end;
    end;
  end;
  return;
end;

global 
updating procedure DblKrediidiinfoPers(string dblstr,string l,Integer currepwn)
begin
  KrediidiinfoReport(l,0);
  return;
end;

global 
updating procedure DblKrediidiinfoComp(string dblstr,string l,Integer currepwn)
begin
  KrediidiinfoReport(l,1);
  return;
end;

/*
global 
updating procedure DblKrediidiinfoComp(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  if (nonblank(l)) then begin
    ReportDefaults(RepSpec,"KrediidiinfoRClass");    
    RepSpec.repname = "KrediidiinfoRn";
    RepSpec.Media = mtScreen;
    RepSpec.f1 = l;
    RepSpec.flags[0] = 0;
    RunReport(RepSpec,0);       
  end;
//FileExists  
  return;
end;

global 
updating procedure DblKrediidiinfoPers(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  if (nonblank(l)) then begin
    ReportDefaults(RepSpec,"KrediidiinfoRClass");    
    RepSpec.repname = "KrediidiinfoRn";
    RepSpec.Media = mtScreen;
    RepSpec.f1 = l;
    RepSpec.flags[0] = 1;
    RunReport(RepSpec,0);       
  end;
  return;
end;
*/

global 
procedure DblConfVc(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record ConfVc Confr;
  Integer nwn;
  
  if (UserModuleAccess("modTC")!=5) then begin
    if (nonblank(l)) then begin
      Confr.SerNr = FirstInRange(l,10);
      if (ReadFirstMain(Confr,1,true)) then begin
        nwn = OpenWindow("ConfDClass",1,0,"","",Confr);
      end;
    end;
  end;
  return;
end;

global
updating procedure DblMailVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record MailVc Mailr;
  
//  if (UserModuleAccess("modTC")!=5) then begin
    if (nonblank(l)) then begin
      Mailr.SerNr = l;
      if (ReadFirstMain(Mailr,1,true)) then begin  
        SetReadFlagHAL(Mailr.SerNr,0);
        wn = OpenWindow("MailDClass",1,0,"","",Mailr);
      end; 
    end;
//  end;
  return;
end;
/*
global
procedure DblMailVc(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record MailVc Mailr;
  Integer nwn;
  
  if (UserModuleAccess("modTC")!=5) then begin
    if (nonblank(l)) then begin
      Mailr.SerNr = FirstInRange(l,10);
      if (ReadFirstMain(Mailr,1,true)) then begin
        nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
      end;
    end;
  end;
  return;
end;
*/
global
procedure DblPLVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PLVc PLr;

  PLr.PLCode = FirstInRange(l,20);
  PLr.ArtCode = LastInRange(l,20);
  if (ReadFirstMain(PLr,2,true)) then begin
    wn = OpenWindow("PLDClass",1,0,"","",PLr);
  end;
  return;
end;

global
procedure DblPIVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PIVc PIr;

  PIr.ItemCode = FirstInRange(l,20);
  PIr.Location = "";
  PIr.VECode = LastInRange(l,20);
  if (ReadFirstMain(PIr,3,true)) then begin
    wn = OpenWindow("PIDClass",1,0,"","",PIr);
  end;
  return;
end;

global
procedure DblPIVc2(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PIVc PIr;

  PIr.ItemCode = dblstr;
  PIr.Location = FirstInRange(l,20);
  PIr.VECode = LastInRange(l,20);
  if (ReadFirstMain(PIr,3,true)) then begin
    wn = OpenWindow("PIDClass",1,0,"","",PIr);
  end;
  return;
end;

global
procedure DblPIVcVEItem(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PIVc PIr;

  PIr.ItemCode = FirstInRange(l,20);
  PIr.VECode = LastInRange(l,20);
  if (ReadFirstKey("Vendor",PIr,2,true)) then begin
    wn = OpenWindow("PIDClass",1,0,"","",PIr);
  end else begin
    DblPIVc(dblstr,l,currepwn);
  end;
  return;
end;

global
procedure DblPrHisSL(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec1;
  record RcVc RepSpec;
  record ARPayHistVc ARPayHistr;
  Integer wn;

  GetWindowRecord(currepwn,RepSpec1);
  ReportDefaults(RepSpec,"PerPayHisSLRClass");    
  RepSpec.repname = "PerPayHisSLRn";
  RepSpec.f1 = l;
  RepSpec.long1 = dblstr;
  ARPayHistr.CUPNr = dblstr;
  if ReadFirstKey("CUPNrTransDate",ARPayHistr,1,true) then begin
    RepSpec.sStartDate = ARPayHistr.TransDate;
  end;
  if blankdate(RepSpec1.d1) then begin
    RepSpec.sEndDate = CurrentDate;
  end else begin    
    RepSpec.sEndDate = RepSpec1.d1;
  end;  
  RepSpec.flags[1] = 0;
  if (RepSpec1.flags[2]==0) then begin
    RepSpec.flags[4] = 1;
  end else begin
    RepSpec.flags[4] = 0;
  end;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0); 
  return;
end;

global
procedure DblPrHisPL(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec1;
  record RcVc RepSpec;
  record APPayHistVc APPayHistr;
  Integer wn;

  GetWindowRecord(currepwn,RepSpec1);
  ReportDefaults(RepSpec,"PerPayHisPLRClass");    
  RepSpec.repname = "PerPayHisPLRn";
  RepSpec.f1 = l;
  RepSpec.long1 = dblstr;
  APPayHistr.VEPNr = dblstr;
  if ReadFirstKey("VEPNrTransDate",APPayHistr,1,true) then begin
    RepSpec.sStartDate = APPayHistr.TransDate;
  end;
  if blankdate(RepSpec1.d1) then begin
    RepSpec.sEndDate = CurrentDate;
  end else begin    
    RepSpec.sEndDate = RepSpec1.d1;
  end;  
  RepSpec.flags[1] = 0;
  if (RepSpec1.flags[2]==0) then begin
    RepSpec.flags[4] = 1;
  end else begin
    RepSpec.flags[4] = 0;
  end;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0); 
  return;
end;

global
procedure DblStockMovVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record StockMovVc StockMovr;

  StockMovr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(StockMovr,1,true)) then begin
    wn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
    goto LDblStockMovVc;
  end; 
  StockMovr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(StockMovr,1,true)) then begin
    wn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
    goto LDblStockMovVc;
  end; 
LDblStockMovVc:; 
  return;
end;

global
procedure DblActPersRn(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc prevRepSpec;
  string 255 tstr,t1,t2;
  Integer pos;

  if (nonblank(l)) then begin
    pos = 0;
    ExtractObj(l,pos,tstr);
    t1 = tstr;
    while (nonblank(tstr)) begin
      ExtractObj(l,pos,tstr);
      t2 = tstr;
      tstr = "";
    end;  
    GetWindowRecord(currepwn,prevRepSpec);
    ReportDefaults(RepSpec,"ActPersRClass");    
    RepSpec.sStartDate = prevRepSpec.sStartDate;
    RepSpec.sEndDate = prevRepSpec.sEndDate;
    RepSpec.repname = "ActPersRn";
    RepSpec.f2 = t2;
    RepSpec.f3 = t1;
    RepSpec.ArtMode = 0;
    RepSpec.flags[1] = prevRepSpec.flags[1];
    RepSpec.flags[2] = prevRepSpec.flags[2];
    RepSpec.flags[3] = 1;
    RepSpec.flags[7] = 1;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblORReserv(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  if (nonblank(l)) then begin
    ReportDefaults(RepSpec,"DblORReservedRClass");    
    RepSpec.repname = "ORReservDrillRn";
    RepSpec.Media = mtScreen;
    RepSpec.f1 = FirstInRange(l,10);
    RepSpec.f2 = LastInRange(l,10);
    RunReport(RepSpec,0);       
  end;
  return;
end;

global
procedure DblPOReserv(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  if (nonblank(l)) then begin
    ReportDefaults(RepSpec,"DblPOReservedRClass");    
    RepSpec.repname = "POReservDrillRn";
    RepSpec.Media = mtScreen;
    RepSpec.f1 = FirstInRange(l,10);
    RepSpec.f2 = LastInRange(l,10);
    RunReport(RepSpec,0);       
  end;
  return;
end;

global
procedure DblStockReservVc(string dblstr,string l,Integer currepwn)
begin
  record StockReservVc StockReservr;
  Integer wn;
      
  StockReservr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(StockReservr,1,true)) then begin
    wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);
  end;
  return;
end;

global
updating procedure DblORNewReserv(string dblstr,string l,Integer currepwn)
begin
  record RcVc prevRepSpec;
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  string 200 tstr;
  Integer i,therow,wn;
  Integer tofilename;
  LongInt fromsernr,tosernr;
  
  i = 0;
  ExtractObj(l,i,tstr);
  tofilename = StringToInt(tstr);
  ExtractObj(l,i,tstr);
  tosernr = StringToLongInt(tstr);
  ExtractObj(l,i,tstr);
  therow = StringToInt(tstr);
  ExtractObj(l,i,tstr);
  fromsernr = StringToLongInt(tstr);
  switch (DoORNewReserv(StockReservr,therow,fromsernr,tosernr,tofilename)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);    
    case 1:
      GetWindowRecord(currepwn,prevRepSpec);
      RecordCopy(RepSpec,prevRepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
    case -1:
       MessageBox(16156,"");
  end;
  return;
end;

global
updating procedure DblORNewReservStock(string dblstr,string l,Integer currepwn)
begin
  record RcVc prevRepSpec;
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  record StockMovVc StockMovr;
  string 200 tstr;
  Integer i,wn;
  LongInt lo;
  string 60 fromlocation,artcode,serialnr;
  LongInt fromsernr;
  
  i = 0;
  ExtractObj(l,i,fromlocation);
  lo = i;
  GetNextSubstring(l,lo,",",artcode);//ExtractObj(l,i,artcode);  
  i = lo;
  ExtractObj(l,i,tstr);
  ExtractObj(l,i,serialnr);
  fromsernr = StringToLongInt(tstr);
  switch (DoORNewReservStock(StockReservr,artcode,serialnr,fromlocation,fromsernr)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);
    case 1:
      GetWindowRecord(currepwn,prevRepSpec);
      RecordCopy(RepSpec,prevRepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
    case 2:
      StockMovr.SerNr = StockReservr.ToSerNr;
      if (ReadFirstMain(StockMovr,1,true)) then begin
        wn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
      end;
  end;
  return;
end;

global
updating procedure DblORNewReservNext(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  string 20 artcode,serialnr,tstr;
  LongInt fromsernr;
  Integer wn;
  Integer pos,fld;
  
  pos = 0;
  ExtractObj(l,pos,tstr);
  while (nonblank(tstr)) begin
    switch (fld) begin
      case 0: artcode = tstr;
      case 1: fromsernr = StringToLongInt(tstr);
      case 2: serialnr = tstr;
    end;
    ExtractObj(l,pos,tstr);
    fld = fld + 1;
  end;
 
  switch (DoORNewReservNext(StockReservr,artcode,serialnr,fromsernr)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);
    case 1:
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
  end;
  return;
end;

global
updating procedure DblORNewBackToBackPO(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  string 20 artcode;
  LongInt fromsernr;
  Integer wn;
  
  artcode = FirstInRange(l,20);
  fromsernr = LastInRange(l,20);
  switch (DoORNewBackToBackPO(StockReservr,artcode,fromsernr)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);
    case 1:
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
  end;
  return;
end;

global
updating procedure DblStockReservRel(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  record StockMovVc StockMovr;
  Integer wn;
  
  StockReservr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(StockReservr,1,true)) then begin
    switch (UnReserveStockRes(StockReservr)) begin
      case 0:
        Beep;
      case 1:
        GetWindowRecord(currepwn,RepSpec);
        CloseWindow(currepwn);
        RunReport(RepSpec,0);   
      case 2:
        StockMovr.SerNr = StockReservr.ToSerNr;
        if (ReadFirstMain(StockMovr,1,true)) then begin
          wn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
        end;
    end;
  end;
  return;
end;

global
updating procedure DblMoveReservUp(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  record StockMovVc StockMovr;
  Integer wn;
  
  StockReservr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(StockReservr,1,true)) then begin
    switch (MoveReserveUp(StockReservr)) begin
      case 0:
        Beep;
      case 1:
        GetWindowRecord(currepwn,RepSpec);
        CloseWindow(currepwn);
        RunReport(RepSpec,0);   
      case 2:
        Beep;
    end;
  end;
  return;
end;

global
updating procedure DblMoveReservDown(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  record StockMovVc StockMovr;
  Integer wn;
  
  StockReservr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(StockReservr,1,true)) then begin
    switch (MoveReserveDown(StockReservr)) begin
      case 0:
        Beep;
      case 1:
        GetWindowRecord(currepwn,RepSpec);
        CloseWindow(currepwn);
        RunReport(RepSpec,0);   
      case 2:
        Beep;
    end;
  end;
  return;
end;

global
updating procedure DblORAutoReserveAll(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record ORVc ORr;
  Integer wn;
  
  ORr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(ORr,1,true)) then begin
    if (DoAutoReserveAll(ORr,-1)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
updating procedure DblORReleaseAll(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record ORVc ORr;
  Integer wn;
  
  ORr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(ORr,1,true)) then begin
    if (DoReleaseAll(ORr,-1)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
updating procedure DblORAutoReserveLine(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record ORVc ORr;
  Integer wn,i;
  
  ORr.SerNr = FirstInRange(l,10);
  I = StringToInt(LastInRange(l,10));
  if (ReadFirstMain(ORr,1,true)) then begin
    if (DoAutoReserveAll(ORr,i)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
updating procedure DblORReleaseLine(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record ORVc ORr;
  Integer wn,i;
  
  ORr.SerNr = FirstInRange(l,10);
  i = StringToInt(LastInRange(l,10));
  if (ReadFirstMain(ORr,1,true)) then begin
    if (DoReleaseAll(ORr,i)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
updating procedure DblORReservStatus(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  Integer wn,i;
  
  ReportDefaults(RepSpec,"ORReservRClass");
  RepSpec.f1 = l;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ORReservRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblINReservDetail(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc prevRepSpec;

  GetWindowRecord(currepwn,prevRepSpec);
  RecordCopy(RepSpec,prevRepSpec);
  RepSpec.ArtMode = 1;
  RepSpec.Media = mtScreen;
  RepSpec.f1 = dblstr;
  RunReport(RepSpec,0);       
  return;
end;

global
procedure DblTTRVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record TTRVc TTRr;

  TTRr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(TTRr,1,true)) then begin
    wn = OpenWindow("TTRDClass",1,0,"","",TTRr);
    goto LDblTTRVc;
  end; 
  TTRr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(TTRr,1,true)) then begin
    wn = OpenWindow("TTRDClass",1,0,"","",TTRr);
    goto LDblTTRVc;
  end; 
LDblTTRVc:; 
  return;
end;

global
procedure DblTAccBalTransRn(string dblstr,string l,Integer currepwn)
begin
  record RcVc prevRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,prevRepSpec);
    ReportDefaults(RepSpec,"TAccBalRClass");    
    RepSpec.repname = "TAccBalTransRn";
    RepSpec.f1 = dblstr;
    RepSpec.sStartDate = prevRepSpec.sStartDate;
    RepSpec.sEndDate = prevRepSpec.sEndDate;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblActClassCUPS(string dblstr,string l,Integer currepwn)
begin
  record RcVc prevRepSpec;
  record RcVc RepSpec;
  string 255 tstr;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,prevRepSpec);
    ReportDefaults(RepSpec,"ActClassRClass");    
    RepSpec.repname = "ActClassRn";
    tstr = dblstr;
    if (dblstr==USetStr(11685)) then begin
      tstr = " ";
    end;
    StripSpace(tstr,tstr);    
    RepSpec.f1 = tstr;
    RepSpec.f2 = l;
    RepSpec.sStartDate = prevRepSpec.sStartDate;
    RepSpec.sEndDate = prevRepSpec.sEndDate;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblSMSVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SMSVc SMSr;

  SMSr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(SMSr,1,true)) then begin
    wn = OpenWindow("SMSDClass",1,0,"","",SMSr);
    goto LDblSMSVc;
  end; 
  SMSr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(SMSr,1,true)) then begin
    wn = OpenWindow("SMSDClass",1,0,"","",SMSr);
    goto LDblSMSVc;
  end; 
LDblSMSVc:; 
  return;
end;

global
procedure DblMaxprodRn(string dblstr,string l,Integer currepwn)
begin
  record RcVc prevRepSpec;
  record RcVc RepSpec;
  string 255 tstr;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,prevRepSpec);
    ReportDefaults(RepSpec,"MaxprodRClass");    
    RepSpec.repname = "MaxprodRn";
    RepSpec.f1 = dblstr;
    RepSpec.sStartDate = prevRepSpec.sStartDate;
    RepSpec.sEndDate = prevRepSpec.sEndDate;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
updating procedure DblIntORNewReserv(string dblstr,string l,Integer currepwn)
begin
  record RcVc prevRepSpec;
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  string 200 tstr;
  Integer i,therow,wn;
  Integer tofilename;
  LongInt fromsernr,tosernr;
  
  i = 0;
  ExtractObj(l,i,tstr);
  tofilename = StringToInt(tstr);
  ExtractObj(l,i,tstr);
  tosernr = StringToLongInt(tstr);
  ExtractObj(l,i,tstr);
  therow = StringToInt(tstr);
  ExtractObj(l,i,tstr);
  fromsernr = StringToLongInt(tstr);
  switch (DoIntORNewReserv(StockReservr,therow,fromsernr,tosernr,tofilename)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);    
    case 1:
      GetWindowRecord(currepwn,prevRepSpec);
      RecordCopy(RepSpec,prevRepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
    case -1:
       MessageBox(16156,"");
  end;
  return;
end;

global
updating procedure DblIntORNewRsrvStock(string dblstr,string l,Integer currepwn)
begin
  record RcVc prevRepSpec;
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  record StockMovVc StockMovr;
  string 200 tstr;
  Integer i,wn;
  string 60 fromlocation,artcode,serialnr;
  LongInt fromsernr;
  
  i = 0;
  ExtractObj(l,i,fromlocation);
  ExtractObj(l,i,artcode);
  ExtractObj(l,i,tstr);
  ExtractObj(l,i,serialnr);
  fromsernr = StringToLongInt(tstr);
  switch (DoIntORNewReservStock(StockReservr,artcode,serialnr,fromlocation,fromsernr)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);
    case 1:
      GetWindowRecord(currepwn,prevRepSpec);
      RecordCopy(RepSpec,prevRepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
    case 2:
      StockMovr.SerNr = StockReservr.ToSerNr;
      if (ReadFirstMain(StockMovr,1,true)) then begin
        wn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
      end;
  end;
  return;
end;

global
updating procedure DblIntORNewRsrvNext(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  string 20 artcode;
  LongInt fromsernr;
  Integer wn;
  
  artcode = FirstInRange(l,20);
  fromsernr = LastInRange(l,20);
  switch (DoIntORNewReservNext(StockReservr,artcode,fromsernr)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);
    case 1:
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
  end;
  return;
end;

global
updating procedure DblIntORNewBToBPO(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record StockReservVc StockReservr;
  string 20 artcode;
  LongInt fromsernr;
  Integer wn;
  
  artcode = FirstInRange(l,20);
  fromsernr = LastInRange(l,20);
  switch (DoIntORNewBackToBackPO(StockReservr,artcode,fromsernr)) begin
    case 0:
      wn = OpenWindow("StockReservBookDClass",1,0,"","",StockReservr);
    case 1:
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);   
  end;
  return;
end;

global
updating procedure DblIntORReservStatus(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  Integer wn,i;
  
  ReportDefaults(RepSpec,"IntORReservRClass");
  RepSpec.f1 = l;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "IntORReservRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblIntORReserv(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  if (nonblank(l)) then begin
    ReportDefaults(RepSpec,"DblIntORReservedRClass");    
    RepSpec.repname = "IntORReservDrillRn";
    RepSpec.Media = mtScreen;
    RepSpec.f1 = FirstInRange(l,10);
    RepSpec.f2 = LastInRange(l,10);
    RunReport(RepSpec,0);       
  end;
  return;
end;

global
updating procedure DblIntORAutoRsrvLine(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record IntORVc IntORr;
  Integer wn,i;
  
  IntORr.SerNr = FirstInRange(l,10);
  I = StringToInt(LastInRange(l,10));
  if (ReadFirstMain(IntORr,1,true)) then begin
    if (DoAutoReserveIntORAll(IntORr,i)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
updating procedure DblIntORReleaseLine(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record IntORVc IntORr;
  Integer wn,i;
  
  IntORr.SerNr = FirstInRange(l,10);
  i = StringToInt(LastInRange(l,10));
  if (ReadFirstMain(IntORr,1,true)) then begin
    if (DoReleaseIntORRsrvAll(IntORr,i)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
updating procedure DblIntORAutoRsrvAll(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record IntORVc IntORr;
  Integer wn;
  
  IntORr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IntORr,1,true)) then begin
    if (DoAutoReserveIntORAll(IntORr,-1)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
updating procedure DblIntORReleaseAll(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record IntORVc IntORr;
  Integer wn;
  
  IntORr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IntORr,1,true)) then begin
    if (DoReleaseIntORRsrvAll(IntORr,-1)) then begin
      GetWindowRecord(currepwn,RepSpec);
      CloseWindow(currepwn);
      RunReport(RepSpec,0);
    end else begin
      Beep;
    end;
  end;
  return;
end;

global
procedure DblARReport(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc newRepSpec;

  GetWindowRecord(currepwn,RepSpec);

  ReportDefaults(newRepSpec,"ARRClass");
  newRepSpec.repname = "ARRn";
  newRepSpec.d1 = StringToDate(dblstr);
  newRepSpec.Media = mtScreen;
  newRepSpec.ArtMode = 0;
  RunReport(newRepSpec,0);
  return;
end;

global
procedure DblARRollFwd(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc newRepSpec;

  GetWindowRecord(currepwn,RepSpec);

  ReportDefaults(newRepSpec,"ARRollFwdRClass");
  newRepSpec.repname = "ARRollFwdRn";
  newRepSpec.d1 = StringToDate(dblstr);
  newRepSpec.f8 = RepSpec.f8;
  newRepSpec.flags[1] = RepSpec.flags[0];
  newRepSpec.Media = mtScreen;
  newRepSpec.flags[1] = RepSpec.flags[0];
  RunReport(newRepSpec,0);
  return;
end;

global
procedure DblAPReport(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc newRepSpec;

  GetWindowRecord(currepwn,RepSpec);

  ReportDefaults(newRepSpec,"APRClass");
  newRepSpec.repname = "APRn";
  newRepSpec.d1 = StringToDate(dblstr);
  newRepSpec.Media = mtScreen;
  newRepSpec.ArtMode = 0;
  RunReport(newRepSpec,0);
  return;
end;

global
procedure DblAPRollFwd(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc newRepSpec;

  GetWindowRecord(currepwn,RepSpec);

  ReportDefaults(newRepSpec,"APRollFwdRClass");
  newRepSpec.repname = "APRollFwdRn";
  newRepSpec.d1 = StringToDate(dblstr);
  newRepSpec.f8 = RepSpec.f8;
  newRepSpec.flags[1] = RepSpec.flags[0];
  newRepSpec.Media = mtScreen;
  newRepSpec.flags[1] = RepSpec.flags[0];
  RunReport(newRepSpec,0);
  return;
end;

global
procedure DblNewQT(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record QTVc QTr,QTrDummy;
  LongInt res,errcode;
  string 255 tstr;
  
  RecordNew(QTr);
  res = QTVcRecordDefaultsClient(0,QTr,QTrDummy,Rs_insert,0);
  QTr.CustCode = FirstInRange(l,20);
  QTr.SalesMan = CurrentUser;
  RemoteQTPaste(QTr,tstr,errcode);
  
  wn = OpenWindow("QTDClass",1,0,"","",QTr);
  WindowFieldGoto(wn,QTr,0,"ArtCode",true);
  if (nonblank(tstr)) then begin 
    MessageBox(0,tstr);
  end;
  return;
end;

global
procedure DblCust2ST(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc newRepSpec;

  GetWindowRecord(currepwn,RepSpec);

  ReportDefaults(newRepSpec,"Cust2STRClass");
  newRepSpec.repname = "Cust2STRn";
  newRepSpec.Media = mtScreen;
  newRepSpec.Period2Str = RepSpec.Period2Str;
  newRepSpec.sStartDate = RepSpec.sStartDate;
  newRepSpec.sEndDate = RepSpec.sEndDate;
  newRepSpec.f11 = dblstr;
  newRepSpec.IncDaughter = 0;
  RunReport(newRepSpec,0);
  return;
end;
