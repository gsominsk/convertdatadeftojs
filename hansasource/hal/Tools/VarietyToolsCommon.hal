external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
remote procedure RemoveInvalidVarietyItems_IVCashVc(var record IVCashVc,var integer);
forward function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean CheckVARSubsets(record VARVc,string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Integer MaxVarPasteCnt();
external procedure AddCharsToString(var string,string,Integer);
external procedure ExtractObj(string,var Integer,var string);
external function string 255 removenextlistitem(var string,string);
external function string 255 GetNextValue(var string);
external function string 255 AddStr(string,string,string);

procedure ExtractSemicolStr(string ostr,var Integer pos,var string rstr)
begin
  Integer i,l;
  string 1 c;
  
  rstr = "";
  l = len(ostr);
  if (pos>l) then begin goto LExtractSemicolStr; end;
  for (i=pos;i<l;i=i+1) begin
    c = Mid(ostr,i,1);
    if (c==";") then begin
      goto LExtractSemicolStr;
    end;
    rstr = rstr & c;
    pos = pos + 1;
  end;
LExtractSemicolStr:;
  pos = pos + 1;
  return;
end;

procedure ExtractSemColStrNr(string ostr,Integer nr,var string rstr)
begin
  Integer pos;
  Integer cnt;
  
  pos = 0;
  cnt = 1;
  ExtractSemicolStr(ostr,pos,rstr);
  while (nonblank(rstr)) begin
    cnt = cnt + 1;
    if (cnt>nr) then begin
      goto LExtractSemColStrNr;
    end;
    ExtractSemicolStr(ostr,pos,rstr);
  end;
  rstr = "";
LExtractSemColStrNr:;
  return;
end;

global
procedure SplitVars(string vars,Array string maskvar,Array string maskvarsz,Array string resclass)
BEGIN
  Integer i,j,k;
  Integer pos,posnlen;
  string 255 tstr;
  LongInt l,itemlen;

  l = 0;
  for (i=0;i<20;i=i+1) begin
    resclass[i] = "";
  end;
  pos = 0;
  for (i=0;i<20;i=i+1) begin
    if (nonblank(maskvar[i])) then begin
      l = FirstInRange(maskvarsz[i],2);
    end;    
    if ((nonblank(maskvar[i])) and (l>0)) then begin
      if (nonblank(maskvar[i])) then begin
        tstr = Left(tstr,l);
        tstr = "";
        posnlen = pos + l;
        for (j=pos;j<posnlen;j=j+1) begin
          tstr = tstr & Mid(vars,pos,1);
          pos = pos + 1;
        end;
        resclass[i] = tstr;
      end else begin
        i = 20;
      end;
    end else begin
      // switch away from using ExtractObj() to cause proper error codes to happen
      ExtractObj(vars,pos,tstr);
      if (nonblank(tstr)) then begin
        resclass[i] = tstr;
      end else begin
        i = 20;
      end;
    end;
    if (i==0) then begin 
      itemlen = l; 
      if (l>0) then begin pos = itemlen; end;
    end;
  end;
  RETURN;
END;

procedure ClearVARclass(Array string maskvar,Array string maskvarsz)
BEGIN
  Integer i;

  for (i=0;i<20;i=i+1) begin
    maskvar[i] = "";
    maskvarsz[i] = "";
  end;
  RETURN;
END;

global
procedure FillMaskVAR(string itemcode,string itemsize,string mask,Array string maskvar,Array string maskvarsz)
BEGIN
  record VARGVc VARGr;
  Array string 20 amsk;
  Integer i;
  LongInt l;
  Array string 5 nilmaskvar;
  Array string 2 nilmaskvarsz;

  ClearVARclass(maskvar,maskvarsz);
  l = FirstInRange(itemsize,2);
  if (l<0) then begin l = 0; end;
  if (l==0) then begin
    SplitVars(itemcode,nilmaskvar,nilmaskvarsz,amsk);
    maskvar[0] = amsk[0];
  end else begin
    maskvar[0] = Left(itemcode,l);
  end;
  
  maskvarsz[0] = itemsize;
  SplitVars(mask,nilmaskvar,nilmaskvarsz,amsk);
  i = 1;

  while (nonblank(amsk[i-1])) begin
    VARGr.Code = amsk[i-1];
    if (ReadFirstMain(VARGr,1,true)) then begin
      maskvar[i] = VARGr.Code;
      maskvarsz[i] = VARGr.VarSize;
    end;
    i = i + 1;
  end;
  RETURN;
END;

/* 
  This is now doing PROPER testing. the amsk and amsk2 will contain the item code and all varieties
  that was written after the item code. It will compare until one doesn't have a variety, which is
  how this function should work.
*/
global
function Boolean TestArtCodeMatch(string teststr,string artcodes)
BEGIN
  Boolean res;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  Array string 20 maskvar2;
  Array string 20 maskvar3;
  Array string 2 maskvarsz2;
  Array string 2 maskvarsz3;
  Array string 20 amsk;
  Array string 20 amsk2;
  Array string 20 amsk3;
  string 255 mask;
  string 10 itemsize;
  string 60 sz,msk,mskrep;  
  string 60 sz2,mask2,mskrep2,varsubset2;
  string 60 sz3,mask3,mskrep3,varsubset3;
  string 200 varsubset;
  Integer i;
  string 255 frartcode,toartcode;
  
  frartcode = FirstInRange(artcodes,20);
  toartcode = LastInRange(artcodes,20);
  res = true;
  if (FindItemVAR(teststr,sz,mask,mskrep,varsubset)) then begin
    FindItemVAR(frartcode,sz2,mask2,mskrep2,varsubset2);
    FindItemVAR(toartcode,sz3,mask3,mskrep3,varsubset3);

    SplitVars(teststr,maskvar,maskvarsz,amsk);
    SplitVars(frartcode,maskvar2,maskvarsz2,amsk2);
    SplitVars(toartcode,maskvar3,maskvarsz3,amsk3);

    if (amsk[0]<amsk2[0]) or (amsk[0]>amsk3[0]) then begin 
      res = false; 
    end;
  end else begin
    if (teststr<frartcode) or (teststr>toartcode) then begin
      res = false; 
    end;
  end;
  TestArtCodeMatch = res;
  RETURN;
END;

global
function Boolean ItemHasVarieties2(string itemcode,string itemsize,string mask,string varieties,Boolean andf)
begin
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  Array string 20 amsk;
  record VARVc VARp;
  string 255 tstr;
  Integer i,j;
  Integer pos;
  Boolean thisvar,firstf;
  Boolean res;

    FillMaskVAR(itemcode,itemsize,mask,maskvar,maskvarsz);
    SplitVars(itemcode,maskvar,maskvarsz,amsk);
    firstf = true;
    pos = 0;
    for (i=0;i<20;i=i+1) begin
      ExtractObj(varieties,pos,tstr);
      if (nonblank(tstr)) then begin
        thisvar = false;
        VARp.Code = tstr;
        if (ReadFirstMain(VARp,1,true)) then begin
          if (VARp.TerminateFlag==0) then begin
            for (j=0;j<20;j=j+1) begin
              if (nonblank(amsk[j])) then begin
                if (amsk[j]==VARp.Code) then begin
                  if (maskvar[j]==VARp.VARGCode) then begin
                    thisvar = true;
                    j = 20;
                  end;
                end;
              end else begin
                j = 20;
              end;
            end;
          end;
        end;
        if (thisvar) then begin
          if (andf) then begin
            if (res==false) then begin
              if (firstf) then begin
                res = true;
              end;
            end;
          end else begin
            res = thisvar;
          end;
        end else begin
          if (andf) then begin
            if (res) then begin
              res = false;
            end;
          end;
        end;
        firstf = false;
      end else begin
        i = 20;
      end;
    end;
  ItemHasVarieties2 = res;
  return;
end;

global
function Boolean ItemHasVarieties(string itemcode,string varieties,Boolean andf)
BEGIN
  Boolean res;
  string 10 itemsize;
  string 255 mask;
  string 200 varsubset,mskrep;

  if (blank(varieties)) then begin
    res = true;
    goto LItemHasVarieties;
  end;
  if (FindItemVAR(itemcode,itemsize,mask,mskrep,varsubset)) then begin
    res = ItemHasVarieties2(itemcode,itemsize,mask,varieties,andf);
  end;
LItemHasVarieties:;
  ItemHasVarieties = res;
  RETURN;
END;

// Only used from Interface, to create paste matrix.
global
procedure FillOneItemOneVAR(string itemcode,string langcode,string varsubset,Array string maskvar,var Array string varp,Integer pos,Boolean putcode)
BEGIN
  record VARVc VARr;
  Integer i;
  Boolean foundf;
  Boolean treatedf;
  string 255 subset;
  string 255 tstr;
  Integer thepos;

  treatedf = false;
  for (i=1;i<MaxVarPasteCnt;i=i+1) begin
    varp[i] = "";
  end;
  i = 1;
  if (nonblank(varsubset)) then begin
    ExtractSemColStrNr(varsubset,pos,subset);
    if (subset=="*") then begin
    end else begin
      thepos = 0;
      ExtractObj(subset,thepos,tstr);
      while (nonblank(tstr)) begin
        VARr.Code = tstr;
        if (ReadFirstMain(VARr,1,true)) then begin
          if ((putcode) or (blank(VARr.Comment))) then begin
            varp[i] = VARr.Code;
          end else begin
            varp[i] = VARr.Comment;
          end;
          i = i + 1;
          if (i>=MaxVarPasteCnt) then begin
            foundf = false;
          end;
        end;
        ExtractObj(subset,thepos,tstr);
      end;
      treatedf = true;
    end;
  end;
  if (treatedf==false) then begin
    foundf = true;
    VARr.VARGCode = maskvar[pos];

//Trace("FillOneItemOneVAR maskvar[pos] " & maskvar[pos]," pos " & pos);  

    while (LoopKey("VARGCode",VARr,1,foundf)) begin
      if (VARr.VARGCode!=maskvar[pos]) then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (VARr.TerminateFlag==0) then begin
          if ((putcode) or (blank(VARr.Comment))) then begin
            varp[i] = VARr.Code;
          end else begin
            varp[i] = VARr.Comment;
          end;
          i = i + 1;
          if (i>=MaxVarPasteCnt) then begin
            foundf = false;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
function Boolean FillAndPrepareVarCodes(var Array string vars,Integer pos,string itemcode)
begin
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  string 255 mask;
  string 10 itemsize;
  string 60 sz,mskrep,litemcode;  
  string 200 varsubset;
  Boolean res;

  litemcode = FirstInRange(itemcode,20);
  if (FindItemVAR(litemcode,sz,mask,mskrep,varsubset)) then begin  
//    FillMaskVAR(itemcode,itemsize,mskrep,maskvar,maskvarsz);// mskrep aint working well
    FillMaskVAR(itemcode,itemsize,mask,maskvar,maskvarsz);    
    FillOneItemOneVAR(itemcode,"",varsubset,maskvar,vars,pos,false);
    res = true;
  end;
  FillAndPrepareVarCodes = res;
  return;
end;

global
function Boolean FillAndPrepareVarTheCodes(var Array string vars,Integer pos,string itemcode)
begin
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  string 255 mask;
  string 10 itemsize;
  string 60 sz,mskrep,litemcode;  
  string 200 varsubset;
  Boolean res;

  litemcode = FirstInRange(itemcode,20);
  if (FindItemVAR(litemcode,sz,mask,mskrep,varsubset)) then begin  
//    FillMaskVAR(itemcode,itemsize,mskrep,maskvar,maskvarsz);// mskrep aint working well
    FillMaskVAR(itemcode,itemsize,mask,maskvar,maskvarsz);    
    FillOneItemOneVAR(itemcode,"",varsubset,maskvar,vars,pos,true);
    res = true;
  end;
  FillAndPrepareVarTheCodes = res;
  return;
end;

global
procedure GetVARVcDescription(string langcode,record VARVc VARr,var string res)
BEGIN
  Integer i,rwcnt;
  row VARVc VARrw;
  
  res = VARr.Comment;
  rwcnt = MatRowCnt(VARr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VARr,i,VARrw);
    if (VARrw.LangCode==langcode) then begin
      res = VARrw.Text;
      goto LGetVARVcDescription;
    end;
  end;
LGetVARVcDescription:;  
  RETURN;
END;

global
procedure FillThisItemVAR(string itemcode,string langcode,string itemsize,Array string maskvar,Array string maskvarsz,Array string varp,Array string varpsz,var string comment)
BEGIN
  record VARVc VARr;
  record VARGVc VARGr;
  Array string 20 amsk;
  Integer i;
  LongInt l;
  string 255 tstr;

  ClearVARclass(varp,varpsz);
  l = FirstInRange(itemsize,2);
  if (l<0) then begin l = 0; end;
  SplitVars(itemcode,maskvar,maskvarsz,amsk);
  if (l==0) then begin
    varp[0] = amsk[0];
  end else begin
    varp[0] = Left(itemcode,l);
  end;
  varpsz[0] = itemsize;
  i = 1;
  
  while (nonblank(amsk[i])) begin
    VARr.Code = amsk[i];
    if (ReadFirstMain(VARr,1,true)) then begin
      if (VARr.TerminateFlag==0) then begin
        GetVARVcDescription(langcode,VARr,tstr);
        comment = comment & ", ";
        comment = comment & tstr;
        VARGr.Code = VARr.VARGCode;
        if (ReadFirstMain(VARGr,1,true)) then begin
          varp[i] = VARGr.Code;
          varpsz[i] = VARGr.VarSize;
        end;
      end;
    end;
    i = i + 1;
  end;
  return;
end;

global
function Boolean CorrectItemVAR(string itemcode,var string theitemcode,var string comment,Boolean forcepropervar)
begin
  Boolean res;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  Array string 20 vars;
  Array string 2 varssz;
  string 255 mask;
  Integer i,pos;
  LongInt varpos;
  string 10 itemsize;
  string 60 sz,msk,mskrep,subset,variety;  
  string 200 varsubset;
  Boolean varf;
  
  res = true;
  comment = "";
  theitemcode = itemcode;
  
  if (FindItemVAR(itemcode,sz,mask,mskrep,varsubset)) then begin
    itemsize = sz;
    FillMaskVAR(itemcode,itemsize,mask,maskvar,maskvarsz);
    FillThisItemVAR(itemcode,"",itemsize,maskvar,maskvarsz,vars,varssz,comment);
    if (nonblank(vars[0])) then begin
      theitemcode = vars[0];
    end;
    for (i=0;i<20;i=i+1) begin    
      if ((nonblank(maskvar[i])) or (nonblank(vars[i]))) then begin
        if (maskvar[i]!=vars[i]) then begin
          res = false;
          i = 20;
        end;
      end else begin
        i = 20;
      end;
    end;
    varf = true;
  end;
  if (forcepropervar==false) then begin
    res = true;
  end else begin
    if (varf) then begin
      if ((right(itemcode,1)==".") or (right(itemcode,1)==",")) then begin
        res = false;
      end;
      if (nonblank(varsubset)) then begin      
        pos = 0;
        varpos = 0;
        
        GetNextSubstring(itemcode,varpos,".,",variety); // eat the item code
        while (GetNextSubstring(itemcode,varpos,".,",variety)) begin
          if (variety=="") then begin
            res = false;
            goto LCorrectItemVAR;
          end;
          ExtractSemicolStr(varsubset,pos,subset);
          if (nonblank(subset)) and (subset!="*") then begin
            if (SetInSet(variety,subset)==false) then begin
              res = false;
              goto LCorrectItemVAR;
            end;
          end;
        end;
      end;
    end;
  end;
LCorrectItemVAR:;
  CorrectItemVAR = res;
  RETURN;
END;

function Boolean ReadFirstItem2(string artcode,var record INVc INp)
BEGIN
  Boolean res;
  string 60 theitemcode;
  string 255 comment,name;  
  
  RecordNew(INp);
  if (nonblank(artcode)) then begin
  if (CorrectItemVAR(artcode,theitemcode,comment,true)) then begin
    INp.Code = theitemcode;
    res = ReadFirstMain(INp,1,true);
    if (true) then begin
      if (artcode!=theitemcode) then begin
        name = INp.Name;
        name = name & comment;
        if (len(name)>100) then begin//100 INp->Name is 100 only in DB
          name = Left(name,100);
        end;
        INp.Name = name;
      end;
    end;
  end;
  end;
  ReadFirstItem2 = res;
  RETURN;
END;

global
function Boolean GetFirstItem(var string ItemCode,var record INVc INr)
begin
  Boolean res;
  string 255 tstr;
  record ItemSettingBlock ISb;
  record BarcodeVc Barcoder;

  BlockLoad(ISb);
//  res = ReadFirstItem(ItemCode,INr,true,false);////makes Variety not working
  if (res==false) then begin
    INr.Code = ItemCode;
    res = ReadFirstMain(INr,1,true);
  end;
  if (res==false) then begin
    if (nonblank(ItemCode)) then begin
      tstr = ItemCode;
      if (ISb.BarCodeLength>0) then begin
        if ( len(tstr) < ISb.BarCodeLength ) then begin
          AddCharsToString(tstr,'0',ISb.BarCodeLength-len(tstr));
        end;  
      end;
      ItemCode = tstr;
      INr.BarCode = ItemCode;
      res = ReadFirstKey("BarCode",INr,1,true);
      if (res) then begin ItemCode = INr.Code; end;
      if (res==false) then begin
//        ItemCode = tstr;
        INr.AlternativeCode = ItemCode;
        res = ReadFirstKey("AlternativeCode",INr,1,true);
        if (res) then begin ItemCode = INr.Code; end;
      end;
    end;
  end;
  if (res==false) then begin
/*
    Barcoder.Barcode = ItemCode;
    if (ReadFirstMain(Barcoder,1,true)) then begin
*/
    Barcoder.Barcode = ItemCode;
    if (ReadFirstKey("Barcode",Barcoder,1,true)) then begin
      ItemCode = Barcoder.Itemcode;
      if (ReadFirstItem2(Barcoder.Itemcode,INr)) then begin // Can't call ReadFirstItem, Risk for eternal loop
        INr.Code = Barcoder.Itemcode;
        INr.BarCode = Barcoder.Barcode;
        res = true;
      end;
    end;
  end;
  if (res==false and nonblank(ItemCode)) then begin
    record PIVc PIr;

    PIr.VEItemCode = ItemCode;
    if ReadFirstKey("VEItemCode",PIr,1,true) then begin
      INr.Code = PIr.ItemCode;
      res = ReadFirstMain(INr,1,true);
    end;
  end;
  if (Importing==false) then begin//close item with some qty in stock, export-import and stock list is wrong  
    if (INr.Terminated!=0) then begin res = false; end;
  end;
  GetFirstItem = res;
  return;
end;  

function Boolean ReadFirstLocalItem2(string artcode,var record LocalINVc LocalINp)
begin
  Boolean res;
  string 60 theitemcode;
  string 255 comment,name;  
  
  RecordClear(LocalINp);
  if (nonblank(artcode)) then begin
  if (CorrectItemVAR(artcode,theitemcode,comment,true)) then begin
    LocalINp.Code = theitemcode;
    res = ReadFirstMain(LocalINp,1,true);
    if (true) then begin
      if (artcode!=theitemcode) then begin
        name = LocalINp.Name;
        name = name & comment;
        if (len(name)>100) then begin
          name = Left(name,100);
        end;
        LocalINp.Name = name;
      end;
    end;
  end;
  end;
  ReadFirstLocalItem2 = res;
  return;
end;

global
function Boolean GetFirstLocalItem(var string ItemCode,var record LocalINVc LocalINr)
begin
  Boolean res;
  string 255 tstr;
  record ItemSettingBlock ISb;
  record BarcodeVc Barcoder;
 record PIVc PIr;

  BlockLoad(ISb);
  LocalINr.Code = ItemCode;
  res = ReadFirstMain(LocalINr,1,true);
  if (res==false) then begin
    if (nonblank(ItemCode)) then begin
      tstr = ItemCode;
      if (ISb.BarCodeLength>0) then begin
        if ( len(tstr) < ISb.BarCodeLength ) then begin
          AddCharsToString(tstr,'0',ISb.BarCodeLength-len(tstr));
        end;  
      end;
      ItemCode = tstr;
      LocalINr.BarCode = ItemCode;
      res = ReadFirstKey("BarCode",LocalINr,1,true);
      if (res) then begin ItemCode = LocalINr.Code; end;
      if (res==false) then begin
        ItemCode = tstr;
        LocalINr.AlternativeCode = ItemCode;
        res = ReadFirstKey("AlternativeCode",LocalINr,1,true);
        if (res) then begin ItemCode = LocalINr.Code; end;
      end;
    end;
  end;
  if (res==false) then begin
/*
    Barcoder.Barcode = ItemCode;
    if (ReadFirstMain(Barcoder,1,true)) then begin
*/
    Barcoder.Barcode = ItemCode;
    if (ReadFirstKey("Barcode",Barcoder,1,true)) then begin
      ItemCode = Barcoder.Itemcode;
      if (ReadFirstLocalItem2(Barcoder.Itemcode,LocalINr)) then begin
        LocalINr.Code = Barcoder.Itemcode;
        LocalINr.BarCode = Barcoder.Barcode;
        res = true;
      end;
    end;
  end;
  if res==false and nonblank(ItemCode) then begin
    PIr.VEItemCode = ItemCode;
    if ReadFirstKey("VEItemCode",PIr,1,true) then begin
      LocalINr.Code = PIr.ItemCode;
      res = ReadFirstMain(LocalINr,1,true);
    end;
  end;
  if (Importing==false) then begin//close item with some qty in stock, export-import and stock list is wrong  
    if (LocalINr.Terminated!=0) then begin res = false; end;
  end;
  GetFirstLocalItem = res;
  return;
end;  

global
function Boolean ReadFirstItem(string artcode,var record INVc INp,Boolean addname,Boolean forcepropervar)
BEGIN
  Boolean res;
  string 60 theitemcode;
  string 255 comment,name;  
  
  RecordClear(INp);
//  INp.Unittext = "";
//  INp.WarrantyLength = 0;
//  INp.SerNrf = 0;
//  INp.Group = "";
  if (nonblank(artcode)) then begin
  if (CorrectItemVAR(artcode,theitemcode,comment,forcepropervar)) then begin
//    res = GetFirstItem(theitemcode,INp);// what if alternative code used oon another item? 
    INp.Code = theitemcode;
    res = ReadFirstMain(INp,1,true);
    if (addname) then begin
      if (artcode!=theitemcode) then begin
        name = INp.Name;
        name = name & comment;
        if (len(name)>100) then begin//100 INp->Name is 100 only in DB
          name = Left(name,100);
        end;
        INp.Name = name;
      end;
    end;
  end;
  end;
  ReadFirstItem = res;
  RETURN;
END;

global
function Boolean ReadFirstLocalItem(string artcode,var record LocalINVc LocalINp,Boolean addname,Boolean forcepropervar)
begin
  Boolean res;
  string 60 theitemcode;
  string 255 comment,name;  
  
  RecordClear(LocalINp);
  if (nonblank(artcode)) then begin
  if (CorrectItemVAR(artcode,theitemcode,comment,forcepropervar)) then begin
    res = GetFirstLocalItem(theitemcode,LocalINp);
    if (addname) then begin
      if (artcode!=theitemcode) then begin
        name = LocalINp.Name;
        name = name & comment;
        if (len(name)>100) then begin//100 INp->Name is 100 only in DB
          name = Left(name,100);
        end;
        LocalINp.Name = name;
      end;
    end;
  end;
  end;
  ReadFirstLocalItem = res;
  return;
end;

global
function Boolean ReadFirstItemInclClosed(string artcode,var record INVc INp,Boolean addname,Boolean forcepropervar)
BEGIN
  Boolean res;
  string 60 theitemcode;
  string 255 comment,name;  
  
  RecordNew(INp);
  if (nonblank(artcode)) then begin
  if (CorrectItemVAR(artcode,theitemcode,comment,forcepropervar)) then begin
    INp.Code = theitemcode;
    res = ReadFirstMain(INp,1,true);
    if (addname) then begin
      if (artcode!=theitemcode) then begin
        name = INp.Name;
        name = name & comment;
        if (len(name)>100) then begin//100 INp->Name is 100 only in DB
          name = Left(name,100);
        end;
        INp.Name = name;
      end;
    end;
  end;
  end;
  ReadFirstItemInclClosed = res;
  RETURN;
END;

global
function Boolean TestArtCode(string teststr,string artcode,record INVc INr)
begin
  Boolean res;
  record INVc testINr;
  
  res = true;
  if (teststr!=artcode) then begin
    if (ReadFirstItem(teststr,testINr,true,false)==false) then begin res = false; end;
    if (res) then begin
      if (testINr.Code!=INr.Code) then begin res = false; end;
    end;
  end;
  TestArtCode = res;
  RETURN;
END;

global
procedure ExplodeItemVAR(string ItemCode,var array string aVAR,var Integer aCnt)
begin
  record INVc INr;
  record VARGVc VARGr;
  string 255 mask,mItemCode,tstr;
  string 60 sz,mskrep;
  string 200 varsubset;
  Integer i,size;
  
  aCnt = 0;
  mItemCode = ItemCode;
  if (FindItemVAR(ItemCode,sz,mask,mskrep,varsubset)) then begin
    size = StringToInt(sz);
    if (size>0) then begin
      aVAR[aCnt] = Left(mItemCode,Len(mItemCode) - size);
      aCnt = aCnt + 1;
      mItemCode = Right(mItemCode,size);
      tstr = GetNextValue(mask);
      while (nonblank(tstr)) begin
        VARGr.Code = tstr;
        ReadFirstMain(VARGr,1,true);
        aVAR[aCnt] = Left(mItemCode,StringToInt(VARGr.VarSize));
        aCnt = aCnt + 1;
        mItemCode = Right(mItemCode,Len(mItemCode) - StringToInt(VARGr.VarSize));
        tstr = GetNextValue(mask);
      end;
    end else begin
      tstr = removenextlistitem(mItemCode,sz);
      while (nonblank(tstr)) begin
        aVAR[aCnt] = tstr;
        aCnt = aCnt + 1;
        tstr = removenextlistitem(mItemCode,sz);
      end;
    end;
  end else begin
    aVAR[aCnt] = ItemCode;
    aCnt = aCnt + 1;
  end;
  
  return;
end;

global
function string 255 GetItemVARDescription(string ItemCode,string langcode)
begin
  string 255 res,tstr;
  array string 20 aVAR;
  Integer i,aCnt;
  record VARVc VARr;
  
  ExplodeItemVAR(ItemCode,aVAR,aCnt);
  for (i=1;i<aCnt;i=i+1) begin
    VARr.Code = aVAR[i];
    ReadFirstMain(VARr,1,true);
    GetVARVcDescription(langcode,VARr,tstr);
    res = AddStr(res,tstr,", ");
  end;
  
  GetItemVARDescription = res;
  return;
end;

global
function Boolean UpdateExistingVarietyRowsf()
begin
  record VarietyBlock VBb;
  
  BlockLoad(VBb);
  UpdateExistingVarietyRowsf = VBb.UseInfoFromRow==1;
end;

global
procedure RemoveInvalidVARItemsNPTSIVCashDClass(integer wn)
begin
  record IVCashVc IVCashr;
  integer rwcnt,rwcnt2;
  
  if (wn>0) then begin 
    GetWindowRecord(wn,IVCashr);
    rwcnt = MatRowCnt(IVCashr); 
    rwcnt2 = rwcnt;
    RemoveInvalidVarietyItems_IVCashVc(IVCashr,rwcnt);
    if (rwcnt2!=rwcnt) then begin 
      PutWindowRecord(wn,IVCashr);
      IVCashDClass_RefreshStringList(wn,IVCashr);
    end; 
  end;     
end;

global
procedure RemoveInvalidVARItemsIVCashDClass(integer wn)
begin
  record IVCashVc IVCashr;
  integer rwcnt,rwcnt2;
  
  if (wn>0) then begin 
    GetWindowRecord(wn,IVCashr);
    rwcnt = MatRowCnt(IVCashr); 
    rwcnt2 = rwcnt;
    RemoveInvalidVarietyItems_IVCashVc(IVCashr,rwcnt);
    if (rwcnt2!=rwcnt) then begin 
      PutWindowRecord(wn,IVCashr);
      DeselectWindow(wn,false);
      WindowFieldGoto(wn,IVCashr,rwcnt,"ArtCode",true);
    end; 
  end;     
end;