external procedure OpenVcFromTR(record TRVc);
external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote function Boolean UserBlockAccs(string);
remote function string 255 UserBlockedAccs(string);
external function Boolean IVCashDClassAfterEditField(Integer,string,Integer,Integer,Integer);

global
procedure DblTransSeqNr(string dblstr,string l,Integer currepwn)
begin
  record TRVc TRr;
  string 255 tstr;
  Integer wn;
 
  tstr = l; 
  if (blank(tstr)) then begin
    tstr = dblstr; 
  end;
  if (nonblank(tstr)) then begin
    TRr.SeqNr = FirstInRange(tstr,10);
    if (ReadFirstKey("SeqNr",TRr,1,true)) then begin  
      wn = OpenWindow("TRDClass",1,0,"","",TRr);
    end; 
  end;
  return;
end;

global
procedure DblTrans(string dblstr,string l,Integer currepwn)
begin
  record TRVc TRr;
  Integer yc1;
  LongInt ser1;
  Integer wn;
  string 255 blockaccs;
  Boolean openf;
  Integer i,rwcnt;
  row TRVc TRrw;
  Integer oldcomp,newcomp;

  if (nonblank(dblstr)) then begin
    ser1 = FirstTransInRange(dblstr);
    yc1 = FirstTransTypeInRange(dblstr);
    oldcomp = CurrentCompany;
    if (nonblank(l)) then begin
      newcomp = StringToLongInt(l);
      if (newcomp!=oldcomp) then begin
        if (SetCompany(newcomp,false)) then begin
        end;
      end;
    end;
    TRr.Number = ser1;
    TRr.IntYc = yc1;
    if (ReadFirstMain(TRr,2,true)) then begin
      openf = true;
      blockaccs = UserBlockedAccs(CurrentUser);
      if (nonblank(blockaccs)) then begin
        rwcnt = MatRowCnt(TRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(TRr,i,TRrw);
          if (SetInSet(TRrw.AccNumber,blockaccs)) then begin
            openf = false;
            i = rwcnt;
          end;
        end;
      end;
      if (openf) then begin
        wn = OpenWindow("TRDClass",1,0,"","",TRr);
      end;
    end;
    if (oldcomp!=CurrentCompany) then begin
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
procedure DblTrans2(string dblstr,string l,Integer currepwn)
begin
  record TRVc TRr;
  Integer yc1;
  LongInt ser1;
  Integer wn;
  string 255 blockaccs;
  Boolean openf;
  Integer i,rwcnt;
  row TRVc TRrw;
  string 255 tstr;
  
  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;  
  if (nonblank(tstr)) then begin
    ser1 = FirstTransInRange(tstr);
    yc1 = FirstTransTypeInRange(tstr);
    TRr.Number = ser1;
    TRr.IntYc = yc1;
    if (ReadFirstMain(TRr,2,true)) then begin
      openf = true;
      blockaccs = UserBlockedAccs(CurrentUser);
      if (nonblank(blockaccs)) then begin
        rwcnt = MatRowCnt(TRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(TRr,i,TRrw);
          if (SetInSet(TRrw.AccNumber,blockaccs)) then begin
            openf = false;
            i = rwcnt;
          end;
        end;
      end;
      if (openf) then begin
        wn = OpenWindow("TRDClass",1,0,"","",TRr);
      end;
    end;
  end;
  return;
end;

global
procedure DblTrans3(string dblstr,string l,Integer currepwn)
begin
  Integer yc1;
  LongInt ser1;
  Integer wn;
  record TRVc TRr;
  string 255 tstr;
  
  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;  
  if (nonblank(tstr)) then begin
    ser1 = FirstTransInRange(tstr);
    yc1 = FirstTransTypeInRange(tstr);
    TRr.Number = ser1;
    TRr.IntYc = yc1;
    if (ReadFirstMain(TRr,2,true)) then begin
      OpenVcFromTR(TRr);
    end;
  end;
  return;
end;

global
procedure DblPersAct(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc curRepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"ActPersRClass");    
    RepSpec.Period2Str = curRepSpec.Period2Str;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RepSpec.repname = "ActPersRn";
    RepSpec.f1 = l;
    RepSpec.f2 = dblstr;
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.flags[1] = 1;
    RepSpec.flags[2] = 1;
    RepSpec.flags[3] = 1;
    RepSpec.flags[4] = 1;
    RepSpec.flags[7] = 1;
    RepSpec.flags[8] = 1;
    RepSpec.flags[9] = 1;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblActRec(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr;

  if (nonblank(l)) then begin
    Actr.SerNr = FirstInRange(l,10);
  end else begin
    Actr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(Actr,1,true)) then begin  
    wn = OpenWindow("ActDClass",1,0,"","",Actr);
  end; 
  return;
end;

global
procedure DblCustAct(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc curRepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    RecordCopy(RepSpec,curRepSpec);
    RepSpec.repname = "ActCURn";
    RepSpec.f1 = dblstr;
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.flags[3] = 0;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblPRSpec(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i;
  Boolean testf,foundf;
  LongInt sernr,rownr;
  Integer pos,ovc;
  string 255 tstr,prcode;
  
  foundf = true;
  pos = 0;
  ExtractObjWithSeparator(";",l,true,pos,tstr);
  sernr = FirstInRange(tstr,10);
  ExtractObjWithSeparator(";",l,true,pos,tstr);
  rownr = StringToInt(tstr);
  ExtractObjWithSeparator(";",l,true,pos,prcode);
  ExtractObjWithSeparator(";",l,true,pos,tstr);
  ovc = StringToInt(tstr);
  TBIVr.SerNr = sernr;
  TBIVr.Row = rownr;
  TBIVr.PRCode = prcode;
  TBIVr.oVc = ovc;
  GetWindowRecord(currepwn,curRepSpec);  
  while(LoopKey("Row",TBIVr,4,foundf)) begin
    if(TBIVr.SerNr!=sernr) then begin foundf = false; end;
    if(TBIVr.Row!=rownr) then begin foundf = false; end;
    if(TBIVr.PRCode!=prcode) then begin foundf = false; end;
    if(TBIVr.oVc!=ovc) then begin foundf = false; end;
    testf = foundf;
    if (nonblank(curRepSpec.f1)) then begin
      if (TBIVr.PRCode!=curRepSpec.f1) then begin
        testf = false;
      end;
    end;
    if(testf) then begin
      RecordCopy(RepSpec,curRepSpec);
      RepSpec.repname = "PRItemSpecRn";
//      RepSpec.repname = "PRItemSIDRn";
      RepSpec.Media = mtScreen;
      RepSpec.stoff = -1;
      RepSpec.f1 = TBIVr.PRCode;
      RepSpec.f2 = TBIVr.ArtCode;
      RepSpec.flags[0] = TBIVr.ItemType;
      RunReport(RepSpec,0);  
      goto LDblPRSpec;
    end; 
  end;
  TBBUr.PRCode = FirstInRange(l,10);
  if (ReadFirstMain(TBBUr,1,true)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    RecordCopy(RepSpec,curRepSpec);
    RepSpec.repname = "PRItemSpecRn";
//      RepSpec.repname = "PRItemSIDRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    i = StringToInt(LastInRange(l,20));
    if (i<MatRowCnt(TBBUr)) then begin
      MatRowGet(TBBUr,i,TBBUrw);
    end;
    RepSpec.f1 = TBBUr.PRCode;
    RepSpec.f2 = TBBUrw.ArtCode;
    RepSpec.flags[0] = TBBUrw.ItemType;
    RunReport(RepSpec,0);  
    goto LDblPRSpec;
  end;
LDblPRSpec:;
  return;
end;

global
procedure DblOPVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record OPVc OPr;
   
  if (nonblank(l)) then begin
    OPr.SerNr = LastInRange(l,10);
  end else begin
    OPr.SerNr = LastInRange(dblstr,10);
  end;
  if (OPr.SerNr>0) then begin
    if (ReadFirstMain(OPr,1,true)) then begin
      wn = OpenWindow("OPDClass",1,0,"","",OPr);
    end;     
  end;
  return;
end;

global
procedure DblTSBud(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record TBBUVc TBBUr;

  TBBUr.PRCode = l;
  if (ReadFirstMain(TBBUr,1,true)) then begin  
    wn = OpenWindow("TBBUDClass",1,0,"","",TBBUr);
  end; 
  return;
end;

global
procedure DblORVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ORVc ORr;

  if (nonblank(dblstr)) then begin
    ORr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(ORr,1,true)) then begin  
      wn = OpenWindow("ORDClass",1,0,"","",ORr);
    end; 
  end;
  return;
end;

global
procedure DblPRVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PRVc PRr;
  string 255 tstr;

  tstr = l; 
  if (blank(tstr)) then begin
    tstr = dblstr; 
  end;
  if (nonblank(tstr)) then begin
    PRr.Code = tstr;
    if (ReadFirstMain(PRr,1,true)) then begin  
      wn = OpenWindow("PRDClass",1,0,"","",PRr);
    end; 
  end;
  return;
end;

global
procedure DblPRCode(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PRVc PRr;

  PRr.Code = dblstr;
  if (ReadFirstMain(PRr,1,true)) then begin  
    wn = OpenWindow("PRDClass",1,0,"","",PRr);
  end; 
  return;
end;

global
procedure DblPrGpTime(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record PRVc PRr;

  PRr.Code = l;
  if (ReadFirstMain(PRr,1,true)) then begin  
    RepSpec.repname = "GPProSpecRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.f1 = PRr.Code;
    RepSpec.flags[0] = 1;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblPrGpCost(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record PRVc PRr;

  PRr.Code = l;
  if (ReadFirstMain(PRr,1,true)) then begin  
    RepSpec.repname = "GPProSpecRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.f1 = PRr.Code;
    RepSpec.flags[0] = 2;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblPrGpMaterial(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record PRVc PRr;

  PRr.Code = l;
  if (ReadFirstMain(PRr,1,true)) then begin  
    RepSpec.repname = "GPProSpecRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.f1 = PRr.Code;
    RepSpec.flags[0] = 3;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblPrGpStocked(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record PRVc PRr;

  PRr.Code = l;
  if (ReadFirstMain(PRr,1,true)) then begin  
    RepSpec.repname = "GPProSpecRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.f1 = PRr.Code;
    RepSpec.f2 = PRr.CustCode;
    RepSpec.flags[0] = 4;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblVIVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record VIVc VIr;

  if (nonblank(l)) then begin
    VIr.SerNr = LastInRange(l,10);
  end else begin
    VIr.SerNr = LastInRange(dblstr,10);
  end;
  if (VIr.SerNr>0) then begin
    if (ReadFirstMain(VIr,1,true)) then begin  
      wn = OpenWindow("VIDClass",1,0,"","",VIr);
    end; 
  end;
  return;
end;

global
procedure DblDropSHVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record DropSHVc DropSHr;

  if (nonblank(l)) then begin
    DropSHr.SerNr = LastInRange(l,10);
  end else begin
    DropSHr.SerNr = LastInRange(dblstr,10);
  end;
  if (DropSHr.SerNr>0) then begin
    if (ReadFirstMain(DropSHr,1,true)) then begin  
      wn = OpenWindow("DropSHDClass",1,0,"","",DropSHr);
    end; 
  end;
  return;
end;

global
procedure DblExpVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ExpVc Expr;

  if (nonblank(l)) then begin
    Expr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(Expr,1,true)) then begin  
      wn = OpenWindow("ExpDClass",1,0,"","",Expr);
      goto LDblExpVc;
    end; 
  end;
  if (nonblank(dblstr)) then begin
    Expr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(Expr,1,true)) then begin  
      wn = OpenWindow("ExpDClass",1,0,"","",Expr);
    end; 
  end;
LDblExpVc:;  
  return;
end;

global
procedure DblPlJob(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record JobVc Jobr;

  if (nonblank(dblstr)) then begin
    Jobr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(Jobr,1,true)) then begin  
      wn = OpenWindow("JobDClass",1,0,"","",Jobr);
    end; 
  end;
  return;
end;

global
procedure DblResAvail(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ResVc Resr;

  if (nonblank(dblstr)) then begin
    Resr.Name = dblstr;
    if (ReadFirstKey("Name",Resr,1,true)) then begin  
      wn = OpenWindow("ResDClass",1,0,"","",Resr);
    end; 
  end;
  return;
end;

global
procedure IVInfoSH(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SHVc SHr;

  if (nonblank(dblstr)) then begin
    SHr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(SHr,1,true)) then begin  
      wn = OpenWindow("SHDClass",1,0,"","",SHr);
    end; 
  end;
  return;
end;

global
procedure DblVePerOP(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record OPVc OPr;

  if (nonblank(dblstr)) then begin
    OPr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(OPr,1,true)) then begin  
      wn = OpenWindow("OPDClass",1,0,"","",OPr);
    end; 
  end;
  return;
end;

global
procedure DblVePerVI(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record VIVc VIr;

  if (nonblank(dblstr)) then begin
    VIr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(VIr,1,true)) then begin  
      wn = OpenWindow("VIDClass",1,0,"","",VIr);
    end; 
  end;
  return;
end;

global
procedure DblCuPerIP(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IPVc IPr;

  if (nonblank(dblstr)) then begin
    IPr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(IPr,1,true)) then begin  
      wn = OpenWindow("IPDClass",1,0,"","",IPr);
    end; 
  end;
  return;
end;

global
procedure DblCredManVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CredManVc CredManr;

  if (nonblank(dblstr)) then begin
    CredManr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(CredManr,1,true)) then begin  
      wn = OpenWindow("CredManDClass",1,0,"","",CredManr);
    end; 
  end;
  return;
end;

global
procedure DblActNew(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr;

  RecordNew(Actr);
  Actr.TodoFlag = 0;
  Actr.PrivateFlag = 0;
  Actr.Invalid = 0;
  wn = OpenWindow("ActDClass",1,0,"","",Actr);
  return;
end;

global
procedure DblTodoNew(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr;

  RecordNew(Actr);
  Actr.TodoFlag = 1;
  Actr.PrivateFlag = 1;
  Actr.Invalid = 0;
  wn = OpenWindow("ActDClass",1,0,"","",Actr);
  return;
end;

global
procedure DblWhoOnline(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  RepSpec.repname = "WhosOnRn";
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblWhoDetailed(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  RepSpec.repname = "WhosOn2Rn";
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblWhoPerCompany(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  RepSpec.repname = "WhosOn3Rn";
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblQuote(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record QTVc QTr;

  if (nonblank(dblstr)) then begin
    QTr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(QTr,1,true)) then begin  
      wn = OpenWindow("QTDClass",1,0,"","",QTr);
    end; 
  end;
  return;
end;

global
procedure DblStockMov(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record StockMovVc StockMovr;
  string 255 tstr;

  tstr = l;
  if (blank(tstr)) then begin tstr = dblstr; end;
  if (nonblank(tstr)) then begin
    StockMovr.SerNr = FirstInRange(tstr,10);
    if (ReadFirstMain(StockMovr,1,true)) then begin  
      wn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
    end; 
  end;
  return;
end;

global
procedure DblPU(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PUVc PUr;

  if (nonblank(dblstr)) then begin
    PUr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(PUr,1,true)) then begin  
      wn = OpenWindow("PUDClass",1,0,"","",PUr);
      goto LDblPU;
    end; 
  end;
  if (nonblank(l)) then begin
    PUr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(PUr,1,true)) then begin  
      wn = OpenWindow("PUDClass",1,0,"","",PUr);
      goto LDblPU;
    end; 
  end;
LDblPU:;  
  return;
end;

global
procedure DblRet(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RetVc Retr;

  if (nonblank(dblstr)) then begin
    Retr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(Retr,1,true)) then begin  
      wn = OpenWindow("RetDClass",1,0,"","",Retr);
    end; 
  end;
  return;
end;

global
procedure DblRetPU(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RetPUVc RetPUr;

  if (nonblank(dblstr)) then begin
    RetPUr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(RetPUr,1,true)) then begin  
      wn = OpenWindow("RetPUDClass",1,0,"","",RetPUr);
      goto LDblRetPU;
    end; 
  end;
  if (nonblank(l)) then begin
    RetPUr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(RetPUr,1,true)) then begin  
      wn = OpenWindow("RetPUDClass",1,0,"","",RetPUr);
      goto LDblRetPU;
    end; 
  end;  
LDblRetPU:;  
  return;
end;

global
procedure DblSD(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SDVc SDr;

  if (nonblank(dblstr)) then begin
    SDr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(SDr,1,true)) then begin  
      wn = OpenWindow("SDDClass",1,0,"","",SDr);
    end; 
  end;
  return;
end;

global
procedure DblSDVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SDVc SDr;

  if (nonblank(l)) then begin
    SDr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(SDr,1,true)) then begin  
      wn = OpenWindow("SDDClass",1,0,"","",SDr);
      goto LDblSDVc;
    end; 
  end;
  if (nonblank(dblstr)) then begin
    SDr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(SDr,1,true)) then begin  
      wn = OpenWindow("SDDClass",1,0,"","",SDr);
    end; 
  end;
LDblSDVc:;  
  return;  
end;

global
procedure DblSRVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SRVc SRr;

  if (nonblank(l)) then begin
    SRr.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(SRr,1,true)) then begin  
      wn = OpenWindow("SRDClass",1,0,"","",SRr);
      goto LDblSRVc;
    end; 
  end;
  if (nonblank(dblstr)) then begin
    SRr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(SRr,1,true)) then begin  
      wn = OpenWindow("SRDClass",1,0,"","",SRr);
    end; 
  end;
LDblSRVc:;  
  return;  
end;

global
procedure DblIVCash(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IVCashVc IVCashr;

  if (nonblank(l)) then begin
    IVCashr.SerNr = FirstInRange(l,10);
  end else begin
    IVCashr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(IVCashr,1,true)) then begin  
    wn = OpenWindow("IVCashDClass",1,0,"","",IVCashr);
  end;
  return;
end;

global
procedure DblCash(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CashVc Cashr;

  if (nonblank(l)) then begin
    Cashr.SerNr = FirstInRange(l,10);
  end else begin
    Cashr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(Cashr,1,true)) then begin  
    wn = OpenWindow("CashDClass",1,0,"","",Cashr);
  end; 
  return;
end;

global
procedure DblWS(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record WSVc WSr;

  if (nonblank(dblstr)) then begin
    WSr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(WSr,1,true)) then begin  
      wn = OpenWindow("WSDClass",1,0,"","",WSr);
    end; 
  end;
  return;
end;

global
procedure DblProd(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ProdVc Prodr;

  if (nonblank(dblstr)) then begin
    Prodr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(Prodr,1,true)) then begin  
      wn = OpenWindow("ProdDClass",1,0,"","",Prodr);
    end; 
  end;
  return;
end;

global
procedure DblProdOperationVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ProdOperationVc ProdOpr;
  string 255 tstr;

  if (nonblank(l)) then begin
    tstr = l;
  end else begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    ProdOpr.SerNr = FirstInRange(tstr,10);
    if (ReadFirstMain(ProdOpr,1,true)) then begin  
      wn = OpenWindow("ProdOperationDClass",1,0,"","",ProdOpr);
    end; 
  end;
  return;
end;

global
procedure DblCUVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CUVc CUr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  integer wnpos;
  string 255 wclass;
  
  if (nonblank(l)) then begin
    CUr.Code = l;
  end else begin
    CUr.Code = dblstr;
  end;
  if (nonblank(CUr.Code)) then begin
    if (ReadFirstMain(CUr,1,true)) then begin  
      GetWindowRecord(currepwn,RepSpec);
      wnpos = RepSpec.UsedOnly;
      
      if (wnpos>0) then begin
        if (WindowValid(wnpos)) then begin
          wclass = GetWindowClass(wnpos);
        end;
      end;
      
      switch (wclass) begin
        case "NPTSIVCashDClass":
          WindowFieldGoto(wnpos,IVCashr,-1,"CustCode",false);
          DeselectWindow(wnpos,false);
          GetWindowRecord(wnpos,IVCashr);
          IVCashr.CustCode = CUr.Code;
          PutWindowRecord(wnpos,IVCashr);
          IVCashDClassAfterEditField(wnpos,"CustCode",0,0,1);
          CloseWindow(currepwn);
        otherwise
          wn = OpenWindow("CUDClass",1,0,"","",CUr);
      end;
    end; 
  end;
  return;
end;

global
procedure DblCUCompVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CUVc CUr;
  string 255 tstr;
  LongInt compno;
  Integer oldcomp;

  tstr = l;
  if (nonblank(tstr)) then begin
    compno = LastInRange(tstr,20);
    if (compno>=0) then begin
      oldcomp = CurrentCompany;  
      SetCompany(compno,false);
    end;
    CUr.Code = FirstInRange(tstr,10);
    if (ReadFirstMain(CUr,1,true)) then begin  
      wn = OpenWindow("CUDClass",1,0,"","",CUr);
    end; 
    if (compno>=0) then begin
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
procedure DblRebVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RebVc Rebr;

  if (nonblank(l)) then begin
    Rebr.Code = l;
  end else begin
    Rebr.Code = dblstr;
  end;
  if (nonblank(Rebr.Code)) then begin
    if (ReadFirstMain(Rebr,1,true)) then begin  
      wn = OpenWindow("RebDClass",1,0,"","",Rebr);
    end; 
  end;
  return;
end;

global
procedure DblStaffVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record StaffVc Staffr;

  if (nonblank(l)) then begin
    Staffr.Code = l;
  end else begin
    Staffr.Code = dblstr;
  end;
  if (nonblank(Staffr.Code)) then begin
    if (ReadFirstMain(Staffr,1,true)) then begin  
      wn = OpenWindow("StaffDClass",1,0,"","",Staffr);
    end; 
  end;
  return;
end;

global
procedure DblPOVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POVc POr;

  if (nonblank(dblstr)) then begin
    POr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(POr,1,true)) then begin  
      wn = OpenWindow("PODClass",1,0,"","",POr);
    end; 
  end;
  return;
end;

global
procedure DblActVcText(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr;

  if (nonblank(dblstr)) then begin
    Actr.Comment = dblstr;
    if (ReadFirstKey("Comment",Actr,1,true)) then begin  
      wn = OpenWindow("ActDClass",1,0,"","",Actr);
    end; 
  end;
  return;
end;

global
procedure DblActVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr;
  string 255 tstr;

  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    Actr.SerNr = FirstInRange(tstr,10);
    if (ReadFirstMain(Actr,1,true)) then begin  
      wn = OpenWindow("ActDClass",1,0,"","",Actr);
    end; 
  end;
  return;
end;

global
procedure DblActStateVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActStateVc ASr;
  string 255 tstr;

  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    ASr.Code = tstr;
    if (ReadFirstMain(ASr,1,true)) then begin  
      wn = OpenWindow("ActStateDClass",1,0,"","",ASr);
    end; 
  end;
  return;
end;

global
procedure DblActTypeVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActTypeVc ATr;
  string 255 tstr;

  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    ATr.Code = tstr;
    if (ReadFirstMain(ATr,1,true)) then begin  
      wn = OpenWindow("ActTypeDClass",1,0,"","",ATr);
    end; 
  end;
  return;
end;

global
updating procedure DblTodoDone(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr,oldActr;
  string 255 tstr;
  record RcVc RepSpec;
  record RcVc curRepSpec;

  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    Actr.SerNr = FirstInRange(tstr,10);
    if (ReadFirstMain(Actr,1,true)) then begin
      RecordCopy(oldActr,Actr);
      Actr.OKFlag = 1;
      if (RecordUpdate(oldActr,Actr,true)) then begin end;
    end;
  end;
  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblActCompVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ActVc Actr;
  string 255 tstr;
  LongInt compno;
  Integer oldcomp;

  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    compno = FirstInRange(tstr,10);
    if (compno>=0) then begin
      oldcomp = CurrentCompany;  
      SetCompany(compno,false);
    end;
    Actr.SerNr = LastInRange(tstr,10);
    if (ReadFirstMain(Actr,1,true)) then begin  
      wn = OpenWindow("ActDClass",1,0,"","",Actr);
    end; 
    if (compno>=0) then begin
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
procedure DblIntORVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IntORVc IntORr;
   
  IntORr.SerNr = dblstr;
  if (ReadFirstMain(IntORr,1,true)) then begin
    wn = OpenWindow("IntORDClass",1,0,"","",IntORr);
  end;     
  return;
end;

global
procedure DblTSVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record TSVc TSr;
  string 255 tstr;

  tstr = l;
  if (blank(tstr)) then begin
    tstr = dblstr;
  end;
  if (nonblank(tstr)) then begin
    TSr.SerNr = FirstInRange(tstr,10);
    if (ReadFirstMain(TSr,1,true)) then begin  
      wn = OpenWindow("TSDClass",1,0,"","",TSr);
    end; 
  end;
  return;
end;

global
procedure DblDetailConnect(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc curRepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.f1 = dblstr;
  RepSpec.ArtMode = 1;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblSlowConnect(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record RcVc curRepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.f1 = FirstInRange(l,20);
  RepSpec.d1 = LastInRange(l,20);
  RepSpec.sStartTime = dblstr;
  RepSpec.repname = "SlowConLogRn";
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblPOQTVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POQTVc POQTr;

  if (nonblank(dblstr)) then begin
    POQTr.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(POQTr,1,true)) then begin  
      wn = OpenWindow("POQTDClass",1,0,"","",POQTr);
    end; 
  end;
  return;
end;

global
procedure DblVATInfEn(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc curRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"VATInfEClass");    
    RepSpec.repname = "VATInfEn";
    RepSpec.Media = mtFile;
    RepSpec.flags[0] = curRepSpec.flags[0];
    RepSpec.flags[1] = curRepSpec.flags[1];
    RepSpec.flags[2] = curRepSpec.flags[2];
    RepSpec.flags[3] = curRepSpec.flags[3];
    RepSpec.flags[4] = curRepSpec.flags[4];
    RepSpec.flags[5] = curRepSpec.flags[5];
    RepSpec.flags[6] = curRepSpec.flags[6];
    RepSpec.flags[7] = curRepSpec.flags[7];
    RepSpec.flags[8] = curRepSpec.flags[8];
    RepSpec.flags[9] = curRepSpec.flags[9];
    RepSpec.Comparison = curRepSpec.Comparison;
    RepSpec.Period2Str = curRepSpec.Period2Str;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RunExport(RepSpec,true);   
  end;
  return;
end;

