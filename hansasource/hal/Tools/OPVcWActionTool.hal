external function string 60 RemoveObjectFromObjectList(string,string);
external function string 60 AddObjectToObjectList(string,string);
external function Boolean GetPMRow(string,var row PMBlock);
remote function Integer OPApprovalStatus(record OPVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external function string 255 GetSupplierOnAccountAC(string);
external function roundmode GetVATRoundMode(record RoundBlock);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure Mul2VAT(string,val,var val,var val,Integer);
external function LongInt NextFreeCashSerNr(row PMBlock,Boolean);
external function LongInt DateDiff(Date,Date);
external procedure GetBaseCurncy(Integer,var string);
external function Integer PMCheckType(string,var string,var string);
external function Boolean GetPM(string,var string,var string);
external procedure OPSumup(var record OPVc,Boolean);
external function Boolean GetAccCur(string,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function Boolean GetPMCurrency(string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure ExtractObj(string,var Integer,var string);
external procedure CutObjectCode(string,var string ,string,Boolean);

global
function string 60 UpdatedeRowObject(string oldobjectstoremove,string newobjectstoadd,string rowobjects)
begin
  string 60 res;
  longint pos;
  string 60 removethisobject,addthisobject,tstr;

  pos = 0;
  tstr = rowobjects;
  while (GetNextSubstring(oldobjectstoremove,pos,",",removethisobject)) begin
    tstr = RemoveObjectFromObjectList(tstr,removethisobject);
  end;
  res = AddObjectToObjectList(tstr,newobjectstoadd);
  UpdatedeRowObject = res;
end;

global
function string 60 GetPayModeObjectsStr(string findpaymentcode)
begin
  integer i,rwcnt;
  record PMBlock PMb;
  row PMBlock PMbrw;
  string 60 res;
  boolean testf;

  testf = true;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  if (blank(findpaymentcode)) then begin testf = false; end;
  if (testf) then begin 
    for (i = 0; i<rwcnt; i=i+1) begin
      MatRowGet(PMb,i,PMbrw);
      if (PMbrw.Code==findpaymentcode) then begin
        res = PMbrw.Objects;
        i = rwcnt;
      end;
    end;  
  end;
  GetPayModeObjectsStr = res;
end;

global
function string 60 FindObjectsOfSameTypesFromObectList(string testfromobjectlist,string objectlist)
begin
  string 60 res,tstr,testfromobjectlist1,fromobjecttype;  
  longint pos,pos2;
  record ObjVc Objr;
  
  pos = 0;
  while (GetNextSubstring(objectlist,pos,",",testfromobjectlist1)) begin
    Objr.Code = testfromobjectlist1;
    fromobjecttype = "";
    if (ReadFirstMain(Objr,1,true)) then begin
      fromobjecttype = Objr.OTCode;
    end;    
    if (nonblank(fromobjecttype)) then begin 
      pos2 = 0;
      while (GetNextSubstring(testfromobjectlist,pos2,",",tstr)) begin
        Objr.Code = tstr;
        if (ReadFirstMain(Objr,1,true)) then begin
          if (Objr.OTCode==fromobjecttype and nonblank(Objr.OTCode)) then begin 
            if (nonblank(res)) then begin 
              res = res & ",";
            end; 
            res = res & testfromobjectlist1;
          end; 
        end;    
      end;    
    end; 
  end;  
  FindObjectsOfSameTypesFromObectList = res;
end;

global
procedure SplitRiigiObjVN(string objstr,var string obj1,var string  obj2)
BEGIN
  record ObjVc Objr;
  record OTVc OTr;
  string 60 ostr,ostr2;
  Integer pos;

  pos = 0;
  obj1 = "";
  obj2 = "";
  ExtractObj(objstr,pos,ostr);
  while (nonblank(ostr)) begin
    Objr.Code = ostr;
    if (ReadFirstMain(Objr,1,true)) then begin
      OTr.Code = Objr.OTCode;
      if (ReadFirstMain(OTr,1,true)) then begin
        if (OTr.Type==3) then begin
          obj1 = ostr;
          CutObjectCode(obj1,ostr,OTr.Start,true);
          obj1 = ostr;
        end;  
        if (OTr.Type==5) then begin
          obj2 = ostr;
          CutObjectCode(obj2,ostr,OTr.Start,true);
          obj2 = ostr;
        end;  
      end;
    end;
    ExtractObj(objstr,pos,ostr);
  end;
  RETURN;
END;

global
procedure MatchOPRowSums(string paymod,string paymodrow,Date td,string invcur,var val invval,var string bankcur,var val bankval,string reccur,var val recval,
                         Boolean changebankcur,Boolean changebankval,Boolean invvalismaster)
BEGIN
  record PMBlock PMb;
  row PMBlock PMbrw;
  Integer rwcnt,i;
  string 5 pmcur;
  string 20 actualpaymod;

  actualpaymod = paymod;
  if (nonblank(paymodrow)) then begin
    actualpaymod = paymodrow;
  end;
  BlockLoad(PMb);
  if (changebankcur) then begin
    rwcnt = MatRowCnt(PMb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PMb,i,PMbrw);
      if (PMbrw.Code==actualpaymod) then begin
        if (GetAccCur(PMbrw.AccNr,pmcur)) then begin end;
      end;
    end;
  end;
  if (invval!=0) then begin
    if (recval==0) then begin recval = invval; end;
    if (bankval==0) then begin bankval = invval; end;
  end;
  if (invvalismaster) then begin
    if (invcur!=reccur) then begin
      CurValToOtherCur(td,invcur,invval,reccur,recval,DefaultCurRoundOff);
    end else begin
      recval = invval;
    end;
  end else begin
    if (invcur!=reccur) then begin
      CurValToOtherCur(td,reccur,recval,invcur,invval,DefaultCurRoundOff);
    end else begin
      invval = recval;
    end;
  end;
  if (changebankval) then begin
    if (invcur!=bankcur) then begin
      CurValToOtherCur(td,invcur,invval,bankcur,bankval,DefaultCurRoundOff);
    end else begin
      bankval = invval;
    end;
  end;
  if (changebankcur) then begin
    if (nonblank(pmcur)) then begin
      if (pmcur!=bankcur) then begin
        CurValToOtherCur(td,bankcur,bankval,pmcur,bankval,DefaultCurRoundOff);
        bankcur = pmcur;
      end;
    end;
  end;
  RETURN;
END;

global
function string 40  GenViitNumber(string objects,LongInt year)
begin
  string 40 tstr;
  string 20 obj1,obj2;
  record RTViiteNumBlock RTr;
  
  BlockLoad(RTr);
  if (year > 0) then begin	
    tstr = year;
    tstr = tstr & ".";
  end;
  tstr = tstr &  RTr.Osa & "." & RTr.Jagu & "." & RTr.Tunnus & ".";
  SplitRiigiObjVN(objects,obj1,obj2);
  if (nonblank(obj1)) then begin
    tstr = tstr & obj1 & ".";
  end;
  if (nonblank(RTr.LTunnus)) then begin
    tstr = tstr & RTr.LTunnus & ".";
  end;
  if (nonblank(obj2)) then begin
    tstr = tstr & obj2 & ".";
  end;
  tstr = tstr & RTr.Object;
  GenViitNumber = tstr;
  return;
end;

procedure GetOPVAT(record VIVc VIp,var val payvp,var val vatvalp,var string vatcode)
BEGIN
  record APAccBlock APAccRec;
  row VIVc VIrw;
  LongInt i,rwcnt;
  val PayVal,v,VATVal;
  record CUVc VEr;
  Integer OPBookVAT;
  
  BlockLoad(APAccRec);
  VEr.Code = VIp.VECode;
  ReadFirstMain(VEr,1,true);
  switch (VEr.OPBookVAT) begin
    case 1:
      OPBookVAT = 1;
    case 2:
      OPBookVAT = 0;
    otherwise
      OPBookVAT = APAccRec.OPBookVAT;
  end;
  vatvalp = blankval;
  vatcode = "";
  PayVal = VIp.PayVal - VIp.HoldSum - VIp.WithHoldingTax;
  payvp = payvp - VIp.HoldSum;
  if (OPBookVAT!=0) then begin
    if (nonblank(VIp.VATVal)) then begin
      VATVal = VIp.VATVal;
    end else begin
      VATVal = VIp.CalcVATVal;
    end;
    if (true) then begin//VIp.VATVal!=0 why is it here, checkbox OPBookVAT should be enough?
      if (PayVal==payvp) then begin
        vatvalp = VATVal;
      end else begin
        v = payvp*VATVal;
        vatvalp = v/PayVal;
      end;
      rwcnt = MatRowCnt(VIp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VIp,i,VIrw);
        if (nonblank(VIrw.VATCode)) then begin
          vatcode = VIrw.VATCode;
          goto LGetOPVAT;
        end;
      end;
    end;
  end;
LGetOPVAT:;
  RETURN;
END;

procedure OPInvsum(record OPVc OPp,LongInt invnr,string curncy,var val isp)
BEGIN
  LongInt rwcnt;
  row OPVc OPrw;
  LongInt i;

  isp = blankval;
  rwcnt = MatRowCnt(OPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    if (OPrw.ovst==0) then begin
      switch (OPrw.stp) begin
        case kPaymentRowTypeNormal:
          if (OPrw.VISerNr==invnr) then begin
            isp = isp + OPrw.PInvVal;
          end;
        case kPaymentRowTypeSettlementDiscount:
          if (OPrw.VISerNr==invnr) then begin
            isp = isp + OPrw.PInvVal;
          end;
        case kPaymentRowTypeBankFee:
          if (OPrw.VISerNr==invnr) then begin
            isp = isp + OPrw.PInvVal;
          end;
      end;
    end;
  end;
  RETURN;
END;

global
function Boolean PasteInvIn2OPr(var record OPVc OPp,Integer rownr,Date TransDate,Integer userebf,val checkamountp,var string warning,Boolean pasteinstf,var Boolean installmentf)
BEGIN
  record APVc APr;
  record CUVc VEr;
  record VIVc VIr;
  record OPrsVc OPrsr;
  record APAccBlock APb;
  record BaseCurBlock bcur;
  row OPVc OPrw;
  row OPVc oprp;
  Boolean vifound;
  Boolean res,chsum;
  string 255 t1,t2,tstr;
  string 2 vatcode;
  val reb2,payv,vatval;
  val fr,to1,to2,br1,br2;
  val tv,remval,t;
  string 20 curncy;
  LongInt rebdays,VISerNr,InstNr;  
  string 20 curncycode,bankcurncy,thepm;
  Integer row1;
  Integer rwcnt,i;
  string 10 invcur,bankcur,reccur;
  val pinvval,bankval,recval;
  record RTViiteNumBlock RTr;
  record WHVEVc WHVEr;
  row WHVEVc WHVErw;
  row WHTaxBlock WHTbrw;
  record APInstallVc APInstallr; 
  record VITBlock VITb; 
  Date RebDate;
  Boolean bankcurncyf;
  row PMBlock PMrw;
  Integer OPBookVAT;

  BlockLoad(RTr);
  BlockLoad(VITb);
  MatRowGet(OPp,rownr,oprp);
  oprp.B1BankVal = blankval;
  oprp.B2BankVal = blankval;
  APInstallr.InstallNr = oprp.InstNr;
  APInstallr.VISerNr = oprp.VISerNr;
  installmentf = ReadFirstKey("InstallNr",APInstallr,2,true);
  if (installmentf==false) then begin
    APInstallr.VISerNr = oprp.VISerNr;
    installmentf = ReadFirstKey("VISerNr",APInstallr,1,true);
  end;
  if (pasteinstf) then begin
    oprp.VISerNr = APInstallr.VISerNr;
  end;  
  VISerNr = oprp.VISerNr;
  InstNr = oprp.InstNr;
  ClearRow(OPp,oprp,1);
  oprp.VISerNr = VISerNr;
  oprp.InstNr = InstNr;
  MatRowPut(OPp,rownr,oprp);
  oprp.PInvVal = blankval;
  BlockLoad(APb);
  curncy = oprp.PInvCurncy;
  remval = blankval;
  OPInvsum(OPp,oprp.VISerNr,curncy,tv);
  tv = tv - oprp.PInvVal;
  if (oprp.VISerNr>0) then begin
    VIr.SerNr = oprp.VISerNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      if (VIr.OKFlag!=0) then begin
        oprp.APAcc = VIr.APAcc;
        oprp.VECode = VIr.VECode;
        oprp.Comment = VIr.VEName;
        curncycode = VIr.CurncyCode;
//      oprp.rkPayNumber = VIr.RefStr;
        oprp.BankRefStr = VIr.RefStr;
        fr = VIr.FrRate;
        to1 = VIr.ToRateB1;
        to2 = VIr.ToRateB2;
        br1 = VIr.BaseRate1;
        br2 = VIr.BaseRate2;
        oprp.PaymentCode = VIr.PaymentCode;
        if (RTr.GenFlag!=0) then begin
          oprp.rkPayNumber = GenViitNumber(VIr.Objects,GetYear(OPp.TransDate));
        end;
        OPBookVAT = VIr.OPBookVAT;
      end else begin
        Beep;
      end;
    end else begin    
      OPrsr.VINr = oprp.VISerNr;
      OPrsr.TransType = kOPrsTransTypeNLTransaction;
      if (ReadFirstKey("VIKey",OPrsr,2,true)) then begin
         APr.SerNr = oprp.VISerNr; 
         if (ReadFirstMain(APr,1,true)) then begin
           oprp.VECode = APr.VECode;
           oprp.Comment = APr.VEName;
           curncycode = APr.CurncyCode;
           GetFullCurncyRate(curncycode,OPrsr.TransDate,fr,to1,to2,br1,br2);
           oprp.APAcc = OPrsr.AccNr;
         end;  
      end else begin
        Beep;
      end;
    end;
  end;
  if (oprp.VISerNr<0) then begin
    oprp.APAcc = GetSupplierOnAccountAC(oprp.VECode);
  end;    
  oprp.PInvCurncy = curncycode;
  oprp.RecCurncy = curncycode;
  oprp.BankCurncy = curncycode;
  if (oprp.VISerNr>0) then begin
  APr.SerNr = oprp.VISerNr;
  if (ReadFirstMain(APr,1,true)) then begin
    reb2 = blankval;
    VIr.SerNr = APr.SerNr;
    vifound = ReadFirstMain(VIr,1,true);
    if (vifound) then begin
      t2 = VIr.BankAcc;
      tstr = VIr.InvoiceNr;
      reb2 = blankval;
      if (userebf!=0) then begin
        rebdays = DateDiff(VIr.RebDate,TransDate);
        if (rebdays>=0) then begin
          reb2 = VIr.RebVal;
          RebDate = APr.RebDate;
        end;
        if (reb2==0) then begin
          rebdays = DateDiff(VIr.RebDate2,TransDate);
          if (rebdays>=0) then begin
            reb2 = VIr.RebVal2;
            RebDate = APr.RebDate2;
          end;
        end;
      end;
      curncy = VIr.CurncyCode;
      VEr.Code = VIr.VECode;
      fr = VIr.FrRate;
      to1 = VIr.ToRateB1;
      to2 = VIr.ToRateB2;
      br1 = VIr.BaseRate1;
      br2 = VIr.BaseRate2;
    end else begin
      curncy = APr.CurncyCode;
      GetFullCurncyRate(curncy,APr.DueDate,fr,to1,to2,br1,br2);
      VEr.Code = APr.VECode;
    end;
    if (ReadFirstMain(VEr,1,true)) then begin
      if (nonblank(tstr)) then begin
        tstr = tstr & ", ";
      end;
      if (nonblank(APr.VEName)) then begin
        tstr = tstr & APr.VEName;
      end else begin
        tstr = tstr & VEr.Name;
      end;
      if (HasLocalization("SWE")) then begin//vatSwedish
        if (blank(t2)) then begin
          if (nonblank(VEr.BankAccount)) then begin
            t2 = VEr.BankAccount;
          end else begin
            t2 = VEr.Bank;
          end;
        end;
      end;
    end;
    if ((pasteinstf==false) or (installmentf==false) or 
        (ProgramType==typFirstOffice) or IsBooks) then begin
      remval = APr.RVal;
    end else begin
      remval = APr.RVal;
//      remval = APInstallr.RVal;
    end;
    if (TransDate<=RebDate) then begin
      payv = remval - reb2;
      payv = payv - tv;
    end else begin
      payv = remval - tv;
      reb2 = blankval;
    end;
    if (pasteinstf) then begin
      if (payv>APInstallr.RVal) then begin
        payv = APInstallr.RVal;
      end;
    end;

    payv = payv - checkamountp;
    res = true;
    if (vifound) then begin
      if (APb.NoPasteVATToOP==0) then begin
        GetOPVAT(VIr,payv,vatval,vatcode);
      end else begin
        payv = payv - VIr.HoldSum;
      end;
      if (APb.APUseObj!=0) then begin
        oprp.Objects = VIr.Objects;
      end;  
      oprp.SortCode = VIr.SortCode;
    end else begin
      vatval = blankval;
      vatcode = "";
    end;
    if (nonblank(oprp.PayMode)) then begin
      thepm = oprp.PayMode;
    end else begin
      thepm = OPp.PayMode;
    end;
    GetPMRow(thepm,PMrw);
    oprp.Objects = AddObjectToObjectList(oprp.Objects,PMrw.Objects);
    GetPMCurrency(thepm,bankcurncy);
    if (bankcurncy!=curncy) and nonblank(bankcurncy) then begin 
      oprp.BankCurncy = bankcurncy;
      bankcurncyf = true;
    end;
    oprp.RecCurncy = curncy;
    oprp.PInvCurncy = curncy;
    oprp.PInvVal = payv;
    oprp.RecVal = payv;
    if (bankcurncy!=curncycode) then begin
      if (oprp.PInvVal==APr.RVal) then begin
        t = APr.BookRVal;
      end else begin
        CurValToOtherCur(OPp.TransDate,curncycode,payv,bankcurncy,t,DefaultCurRoundOff);
      end;
      oprp.BankVal = t;
     end else begin
      oprp.BankVal = payv;
    end;
    invcur = oprp.PInvCurncy;
    pinvval = oprp.PInvVal;
    bankcur = oprp.BankCurncy;
    bankval = oprp.BankVal;
    reccur = oprp.RecCurncy;
    recval = oprp.RecVal;
    MatchOPRowSums(OPp.PayMode,oprp.PayMode,OPp.TransDate,invcur,pinvval,bankcur,bankval,reccur,recval,true,oprp.PInvVal!=APr.RVal,true);
    oprp.PInvCurncy = invcur;
    oprp.PInvVal = pinvval;
    oprp.BankCurncy = bankcur;
    oprp.BankVal = bankval;
    oprp.RecCurncy = reccur;
    oprp.RecVal = recval;
    oprp.BankAcc = t2;
    oprp.VECode = VEr.Code;
    oprp.Comment = tstr;
    if (OPBookVAT!=0 and HasLocalization("POL"))  then begin
    end else begin
      oprp.VATVal = vatval;
      oprp.VATCode = vatcode;
    end;
    oprp.PInvOutstand = remval;
    GetFullCurncyRate(oprp.BankCurncy,OPp.TransDate,oprp.FrRateBankVal,oprp.ToRateB1BankVal,oprp.ToRateB2BankVal,oprp.BaseRate1BankVal,oprp.BaseRate2BankVal);
    if (bankcurncyf) then begin
      CurValToOtherCur(OPp.TransDate,oprp.PInvCurncy,oprp.PInvVal,oprp.BankCurncy,t,DefaultCurRoundOff);
      oprp.BankVal = t;
      GetFullCurncyRate(oprp.BankCurncy,OPp.TransDate,oprp.FrRateBankVal,oprp.ToRateB1BankVal,oprp.ToRateB2BankVal,oprp.BaseRate1BankVal,oprp.BaseRate2BankVal);
    end; 
    MatRowPut(OPp,rownr,oprp);
    if (reb2!=0) then begin
      MatRowGet(OPp,rownr,OPrw);
      row1 = rownr + 1;
      ClearRow(OPp,OPrw,5);
      OPrw.VISerNr = oprp.VISerNr;
      OPrw.BankAcc = t2;
      OPrw.VECode = VEr.Code;
      OPrw.Comment = tstr;
      if (APb.APUseObj!=0) then begin
        OPrw.Comment = VIr.Objects;
      end;  
      OPrw.BankCurncy = bankcurncy;
      OPrw.RecCurncy = curncy;
      OPrw.PInvCurncy = curncy;
      OPrw.PInvVal = reb2;
      OPrw.RecVal = reb2;
      if (bankcurncy!=curncycode) then begin
        CurValToOtherCur(OPp.TransDate,curncycode,reb2,bankcurncy,t,DefaultCurRoundOff);
        OPrw.BankVal = t;
       end else begin
        OPrw.BankVal = reb2;
      end;
      invcur = OPrw.PInvCurncy;
      pinvval = OPrw.PInvVal;
      bankcur = OPrw.BankCurncy;
      bankval = OPrw.BankVal;
      reccur = OPrw.RecCurncy;
      recval = OPrw.RecVal;
      MatchOPRowSums(OPp.PayMode,OPrw.PayMode,OPp.TransDate,invcur,pinvval,bankcur,bankval,reccur,recval,true,true,true);
      OPrw.PInvCurncy = invcur;
      OPrw.PInvVal = pinvval;
      OPrw.BankCurncy = bankcur;
      OPrw.BankVal = bankval;
      OPrw.RecCurncy = reccur;
      OPrw.RecVal = recval;
      if (HasLocalization("POL")) then begin//vatPolish
        BlockLoad(bcur);  
        if ((OPrw.BankCurncy==bcur.BaseCur1) or (blank(OPrw.BankCurncy))) then begin
          OPrw.B1BankVal = OPrw.BankVal;  
        end;
      end;  
      MatRowPut(OPp,row1,OPrw);
    end;
    chsum = true;
  end;
  end;
  if (chsum) then begin
    OPSumup(OPp,true);
  end;  
  if (VITb.CalcWithholdingTax==0) then begin
    WHVEr.VECode = VEr.Code;
    if (ReadFirstMain(WHVEr,1,true)) then begin
      rwcnt = MatRowCnt(WHVEr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(WHVEr,i,WHVErw);
        if (WHVErw.CalculateTax==kCalculateTax) then begin
          GetWHTaxRow(WHVErw.WHTax,WHTbrw);
          if (WHTbrw.PostOPWHTax==0) then begin
            warning = USetStr(20058);
            i = rwcnt;
          end;
        end;
      end;
    end;  
  end;
  PasteInvIn2OPr = res;
  RETURN;  
END;

global
function Boolean PasteInvInOPr(var record OPVc OPp,row OPVc oprp,Integer rownr,Integer rowtype)
BEGIN
  Boolean res;
  record APVc APr;
  record VIVc VIr;
  record CUVc VEr;
  row OPVc oprw2;
  val tv,rv;
  string 20 curncy,bankcurncy,thepm;
  row OPVc OPrw;
  string 10 invcur,bankcur,reccur;
  val pinvval,bankval,recval;

  res = true;
  ClearRow(OPp,OPrw,rowtype);
  MatRowGet(OPp,rownr-1,oprw2);
  OPrw.VISerNr = oprw2.VISerNr;
  VIr.SerNr = oprw2.VISerNr;
  if (ReadFirstMain(VIr,1,true)) then begin
    OPrw.VECode = VIr.VECode;
    OPrw.Comment = VIr.VEName;
    curncy = VIr.CurncyCode;
    OPInvsum(OPp,VIr.SerNr,curncy,tv);
  end else begin
    if (OPrw.stp==kPaymentRowTypeBankFee) then begin
      VEr.Code = oprw2.VECode;
      if (ReadFirstMain(VEr,1,true)) then begin
        OPrw.VECode = VEr.Code;
        OPrw.Comment = VEr.Name;
        curncy = VEr.VECurncyCode;
      end else begin
        res = false;
        goto LPasteInvInOPr;
      end;
    end else begin
      res = false;
      goto LPasteInvInOPr;
    end;
  end;
  if (nonblank(oprw2.PayMode)) then begin
    thepm = oprw2.PayMode;
  end else begin
    thepm = OPp.PayMode;
  end;
  if (GetPMCurrency(thepm,bankcurncy)) then begin end;
  if (OPrw.stp==kPaymentRowTypeBankFee) then begin curncy = bankcurncy; end;  
  APr.SerNr = oprw2.VISerNr;
  OPrw.PInvCurncy = curncy;
  OPrw.RecCurncy = curncy;
  OPrw.BankCurncy = bankcurncy;
  if ((ReadFirstMain(APr,1,true)) or (OPrw.stp==kPaymentRowTypeBankFee)) then begin
    rv = APr.RVal - tv;
    if (OPrw.stp==kPaymentRowTypeBankFee) then begin rv = 0; end; // fee should not work like that    
    oprw2.BankCurncy = bankcurncy;
    oprw2.RecCurncy = curncy;
    oprw2.PInvCurncy = curncy;
    oprw2.PInvVal = rv;
    oprw2.RecVal = rv;
    if (bankcurncy!=curncy) then begin
      CurValToOtherCur(OPp.TransDate,curncy,rv,bankcurncy,tv,DefaultCurRoundOff);
      oprw2.BankVal = tv;
     end else begin
      oprw2.BankVal = rv;
    end;
    invcur = oprw2.PInvCurncy;
    pinvval = oprw2.PInvVal;
    bankcur = oprw2.BankCurncy;
    bankval = oprw2.BankVal;
    reccur = oprw2.RecCurncy;
    recval = oprw2.RecVal;
    MatchOPRowSums(OPp.PayMode,oprw2.PayMode,OPp.TransDate,oprw2.PInvCurncy,oprw2.PInvVal,oprw2.BankCurncy,oprw2.BankVal,oprw2.RecCurncy,oprw2.RecVal,true,true,true);
    oprw2.PInvCurncy = invcur;
    oprw2.PInvVal = pinvval;
    oprw2.BankCurncy = bankcur;
    oprw2.BankVal = bankval;
    oprw2.RecCurncy = reccur;
    oprw2.RecVal = recval;
    
    OPrw.PInvCurncy = oprw2.PInvCurncy;
    OPrw.PInvVal = oprw2.PInvVal;
    OPrw.RecCurncy = oprw2.RecCurncy;
    OPrw.RecVal = oprw2.RecVal;
    OPrw.BankCurncy = oprw2.BankCurncy;
    OPrw.BankVal = oprw2.BankVal;
    OPrw.PInvOutstand = APr.RVal;
    if (OPrw.stp==kPaymentRowTypeBankFee) then begin
//      OPrw.VISerNr = -1;//why is that, not possible to OK Payment if VISerNr blank
    end;
    MatRowInsert(OPp,rownr,OPrw);
  end;
LPasteInvInOPr:;  
  OPSumup(OPp,true);
  PasteInvInOPr = res;
  RETURN;
END;

function LongInt FindCheqNr(record OPVc OPp,row OPVc curOPrw,Integer rownr,LongInt cheqno)
begin
  LongInt res;
  row OPVc OPrw;
  Boolean vef;
  Integer i;

  res = cheqno;
  for (i=0;i<rownr;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    if ((blank(OPrw.PayMode)) or (OPrw.PayMode==OPp.PayMode)) then begin
      if (OPrw.VECode==curOPrw.VECode) then begin
        vef = true;
        goto LFindCheqNr;
      end;
    end;
  end;
LFindCheqNr:;  
  if (vef==false) and (rownr>0) then begin
    res = res + 1;
  end;
  FindCheqNr = res;
  return;
end;

function Boolean AssignCheckNrToAllRows(var record OPVc OPr,LongInt cheqno)
begin
  Boolean res;
  LongInt curcheqno;
  row OPVc OPrw,OP2rw;
  Integer rwcnt,i,j;
  
  curcheqno = cheqno;
  rwcnt = MatRowCnt(OPr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(OPr,i,OPrw);
    if ((blank(OPrw.PayMode) or OPrw.PayMode==OPr.PayMode) and OPrw.ChequeNr==-1) then begin
      OPrw.ChequeNr = curcheqno;
      MatRowPut(OPr,i,OPrw);
      res = true;
      for (j = i + 1; j<rwcnt; j = j + 1) begin
        MatRowGet(OPr,j,OP2rw);
        if (OP2rw.VECode==OPrw.VECode) then begin
          if ((blank(OP2rw.PayMode) or OP2rw.PayMode==OPr.PayMode) and OP2rw.ChequeNr==-1) then begin
            OP2rw.ChequeNr = curcheqno;
            MatRowPut(OPr,j,OP2rw);
          end;
        end;
      end;
      curcheqno = curcheqno + 1;
    end;
  end;
  AssignCheckNrToAllRows = res;
end;

global
function Boolean GetNextChequeNr(var record OPVc OPp)
BEGIN
  record OPVc OPr;
  row OPVc OPrw;
  Boolean foundf;
  LongInt rwcnt,i;
  LongInt cheqno;
  Integer cnt;
  Boolean res;
  string 255 keystr;
  record OPrsVc OPrsr;
  
/*  
  foundf = true;
  OPr.TransDate = CurrentDate;
  while (LoopBackKey("TransDate",OPr,1,foundf)) begin
    if (OPp.PayMode==OPr.PayMode) then begin
      rwcnt = MatRowCnt(OPr);
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(OPr,i,OPrw);
        if (OPrw.ChequeNr!=-1) then begin
          cheqno = OPrw.ChequeNr + 1;
          goto L88GetNextChequeNr;
        end;
      end;
      cnt = cnt + 1;
      if (cnt>10) then begin goto L88GetNextChequeNr; end;
    end;
  end;
 //payment with todays date, yesterdays date and todays again gets incorect cheq nr assigned 
*/

  foundf = true;
  OPrsr.CheckType = 0;
  OPrsr.ChequeNr = 3000000000;
  while (LoopBackKey("ChequeNr",OPrsr,1,foundf)) begin
    if (OPrsr.CheckType!=0) then begin foundf = 0; end;
    if (foundf) then begin
      foundf = false;
    end;
  end;
  cheqno = OPrsr.ChequeNr + 1;
  if (cheqno<=0) then begin cheqno = 1; end;
  
L88GetNextChequeNr:;
  res = AssignCheckNrToAllRows(OPp,cheqno);
  GetNextChequeNr = res;
  RETURN
END;

global
function Boolean CLOutforOPExists(LongInt opnr,string filename,var LongInt cloutser)
BEGIN
  Boolean res;
  record CLOutVIVc CLOutVIr;
  
  CLOutVIr.SerNr = opnr;
  CLOutVIr.FileName = filename;
  res = ReadFirstKey("FileName",CLOutVIr,2,true);
  cloutser = CLOutVIr.CLOutNr;
  CLOutforOPExists = res;
  RETURN;
END;

function val FindTotOPAmount(record OPVc OPr,Date td,string crncycode,var string vecode,var Integer opcnt)
BEGIN
  val res,t;
  row OPVc OPrw;
  Integer i,rwcnt;
  
  vecode = "";
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    CurValToOtherCur(td,OPrw.BankCurncy,OPrw.BankVal,crncycode,t,DefaultCurRoundOff); 
    res = res + t;
    vecode = OPrw.VECode;
  end;
  opcnt = rwcnt;
  if (opcnt>1) then begin
    vecode = "";
  end;
  FindTotOPAmount = res;
  RETURN;
END;

global
updating function Boolean DoCLOutFromOPD(record OPVc OPr,var record CLOutVc CLOutr)
BEGIN
  Boolean res;
  record CUVc VEr;
  LongInt clout;
  record MainCLBlock MainCLRec;
  string 255 tstr;
  val frrate,to1,to2,br1,br2;
  string 20 vecode;
  Integer opcnt;

  if (ReadFirstMain(OPr,0,true)) then begin
    res = true;
    BlockLoad(MainCLRec);
    if (OPr.DoneFlag!=0) then begin
      if (MainCLRec.CashCollection!=0) then begin
        if (PMCheckType(OPr.PayMode,tstr,tstr)!=5) then begin
          res = false;
          goto LDoCLOutFromOPD;
        end;
        if (CLOutforOPExists(OPr.SerNr,"OPVc",clout)) then begin
          res = false;
          goto LDoCLOutFromOPD;
        end;
        CLOutr.RefStr = USetStr(1153) & "." & OPr.SerNr;
      end;
      CLOutr.SerNr = -1;
      CLOutr.NetVal = blankval;
      CLOutr.VATVal = blankval;
      CLOutr.TransDate = CurrentDate;
      CLOutr.PayMode = OPr.PayMode;
      if (GetPM(CLOutr.PayMode,tstr,tstr)==false) then begin
        CLOutr.PayMode = "";
      end;  
      if (blank(CLOutr.PayMode)) then begin
        CLOutr.PayMode = MainCLRec.DefPM;
      end;
      CLOutr.CorspCode = MainCLRec.DefCorspCode;
      CLOutr.Person = "";
    /*    
      CLOutr.CUCode = OPr.CustCode;
      CLOutr.CUName = OPr.Addr0;
      CLOutr.Addr0 = OPr.Addr1;
      CLOutr.Addr1 = OPr.Addr2;
      CLOutr.Addr2 = OPr.Addr3;
      CLOutr.Addr3 = OPr.InvAddr3;
      CLOutr.Addr4 = OPr.InvAddr4;
    */
      CLOutr.Comment = OPr.BankName;
      GetBaseCurncy(1,tstr);
      CLOutr.CurncyCode = tstr;
      CLOutr.FileName = "OPVc";
      CLOutr.FSerNr = OPr.SerNr;  
      GetFullCurncyRate(CLOutr.CurncyCode,CLOutr.TransDate,frrate,to1,to2,br1,br2);
      CLOutr.FrRate = frrate;
      CLOutr.ToRateB1 = to1; 
      CLOutr.ToRateB2 = to2;
      CLOutr.BaseRate1 = br1;
      CLOutr.BaseRate2 = br2;
      CLOutr.Total = FindTotOPAmount(OPr,CLOutr.TransDate,CLOutr.CurncyCode,vecode,opcnt);
      CLOutr.NetVal = CLOutr.Total;
      if (opcnt>1) then begin
        CLOutr.ColFlag = 1;
      end else begin
        VEr.Code = vecode;
        if (ReadFirstMain(VEr,1,true)) then begin
          CLOutr.CUCode = VEr.Code;
          CLOutr.CUName = VEr.Name;
          CLOutr.Addr0 = VEr.InvAddr0;
          CLOutr.Addr1 = VEr.InvAddr1;
          CLOutr.Addr2 = VEr.InvAddr2;
          CLOutr.Addr3 = VEr.InvAddr3;
          CLOutr.Addr4 = VEr.InvAddr4;
         end;
      end;
    end else begin
      res = false;
      goto LDoCLOutFromOPD;
    end;
/*
    CLOutr.SerNr = NextSerNr("CLOutVc",CLOutr.TransDate,-1,false,"");            
    if (CLOutr.SerNr>0) then begin
      if (RecordStore(CLOutr,false)) then begin end;
    end;
*/
  end;
LDoCLOutFromOPD:;
  DoCLOutFromOPD = res;
  RETURN
END;

global
procedure OPVc_PasteBankCurncy(var record OPVc OPp,Integer rownr)
BEGIN
  row OPVc OPrw;
  val v,fr,to1,to2,br1,br2;

  MatRowGet(OPp,rownr,OPrw);
  if (OPrw.PInvCurncy==OPrw.BankCurncy) then begin
    OPrw.BankVal = OPrw.PInvVal;
  end else begin
    CurValToOtherCur(OPp.TransDate,OPrw.PInvCurncy,OPrw.PInvVal,OPrw.BankCurncy,v,DefaultCurRoundOff);
    OPrw.BankVal = v;
    GetFullCurncyRate(OPrw.BankCurncy,OPp.TransDate,OPrw.FrRateBankVal,OPrw.ToRateB1BankVal,OPrw.ToRateB2BankVal,OPrw.BaseRate1BankVal,OPrw.BaseRate2BankVal);
  end;
  MatRowPut(OPp,rownr,OPrw);
  OPSumup(OPp,true);
  return;
end;

global
procedure OPPasteRowPayMode2(var record OPVc OPr,Integer rownr,string prevpaymode)
begin
  Integer i,rwcnt,rn;
  record PMBlock PMb;
  row PMBlock PMbrw;
  row OPVc OPrwp;
  string 10 bankcurncy;
  Boolean bankcurncyf;
  string 255 objectstoremove,objectstoadd;

  MatRowGet(OPr,rownr,OPrwp);
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  rn = 0;
  if (blank(OPrwp.PayMode)) then begin goto L88OPPasteRowPayMode; end;
  for (i = 0; i<rwcnt; i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.Code==OPrwp.PayMode) then begin
      rn = i;
      goto L88OPPasteRowPayMode;
    end;
  end;
L88OPPasteRowPayMode:;
  if (rwcnt>0) then begin
    if (nonblank(PMbrw.Objects) or blank(OPrwp.PayMode) or (OPrwp.PayMode!=prevpaymode)) then begin
      if (OPrwp.PayMode!=prevpaymode) then begin 
        if (blank(prevpaymode)) then begin 
          objectstoremove = GetPayModeObjectsStr(OPr.PayMode);
        end else begin 
          objectstoremove = GetPayModeObjectsStr(prevpaymode);
        end;
      end; 
      if (blank(OPrwp.PayMode)) then begin 
        objectstoadd = GetPayModeObjectsStr(OPr.PayMode);
      end else begin
        objectstoadd = PMbrw.Objects;
      end; 
      OPrwp.Objects = UpdatedeRowObject(objectstoremove,objectstoadd,OPrwp.Objects);    
    end;
    if (GetPMCurrency(PMbrw.Code,bankcurncy)) then begin end;
    if (bankcurncy!=OPrwp.BankCurncy and nonblank(bankcurncy)) then begin
      OPrwp.BankCurncy = bankcurncy;
      bankcurncyf = true;
    end;
  end;
  MatRowPut(OPr,rownr,OPrwp);
  if (bankcurncyf) then begin
    OPVc_PasteBankCurncy(OPr,rownr);
  end;
  return;
end;

global
procedure OPPasteRowPayMode(var record OPVc OPr,Integer rownr)
begin
  OPPasteRowPayMode2(OPr,rownr,"");
end;

global
procedure PastePMInOP(var record OPVc OPp)
BEGIN
  Integer i,rwcnt,rn;
  record MainCLBlock MainCLRec;
  record PMBlock PMb;
  row PMBlock PMbrw;

  BlockLoad(MainCLRec);
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  rn = 0;
  if (blank(OPp.PayMode)) then begin goto L88PastePMInOP; end;
  for (i = 0; i<rwcnt; i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.Code==OPp.PayMode) then begin
      if (MainCLRec.CommonNoSer!=0) then begin
        if (PMbrw.TSerStartOut!=-1) then begin
          OPp.SerNr = NextFreeCashSerNr(PMbrw,false);
        end else begin
          OPp.SerNr = -1;
          if (SingleUserMode) then begin
            OPp.SerNr = NextSerNr("OPVc",OPp.TransDate,-1,false,"");
          end;
        end;
      end;
      rn = i;
      goto L88PastePMInOP;
    end;
  end;

L88PastePMInOP:;
  if (rwcnt>0) then begin
    MatRowGet(PMb,rn,PMbrw);      
    OPp.PayMode = PMbrw.Code;
    OPp.BankAcc = PMbrw.BankNr;
    OPp.BankName = PMbrw.BankName;
    OPp.Objects = PMbrw.Objects;
    OPp.SortCode = PMbrw.SortCode;    
    if (PMbrw.TSerStartOut!=-1) and (MainCLRec.CommonNoSer!=0) then begin
      OPp.SerNr = NextFreeCashSerNr(PMbrw,false);
    end;
  end;
LPastePMInOP:;
  if (OPp.SerNr==-1) then begin
    if (ServingClient==false) then begin
      OPp.SerNr = NextSerNr("OPVc",OPp.TransDate,-1,false,"");
    end;  
  end;
  RETURN;
END;

global
procedure OPPastePayMode2(var record OPVc OPr,string prevpaymode)
begin
  row OPVc OPrw;
  Integer rwcnt,i;
  string 10 pmcode,bankcurncy,objectstoremove,objectstoadd;

  PastePMInOP(OPr);
  if (OPr.PayMode!=prevpaymode) then begin 
    if (blank(prevpaymode)) then begin 
      objectstoremove = GetPayModeObjectsStr(OPr.PayMode);
    end else begin 
      objectstoremove = GetPayModeObjectsStr(prevpaymode);
    end;
  end;   
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    pmcode = OPrw.PayMode;
    if (blank(pmcode)) then begin
      if (blank(pmcode)) then begin 
        objectstoadd = GetPayModeObjectsStr(OPr.PayMode);
      end else begin
        objectstoadd = GetPayModeObjectsStr(pmcode);
      end;     
      OPrw.Objects = UpdatedeRowObject(objectstoremove,objectstoadd,OPrw.Objects);      
      MatRowPut(OPr,i,OPrw);
      pmcode = OPr.PayMode;
    end;
    if (GetPMCurrency(pmcode,bankcurncy)) then begin end;
    if (bankcurncy!=OPrw.BankCurncy) then begin
      OPrw.BankCurncy = bankcurncy;
      MatRowPut(OPr,i,OPrw);
      OPVc_PasteBankCurncy(OPr,i);
    end;
  end;
  return;
end;

global
procedure OPPastePayMode(var record OPVc OPr)
begin
  OPPastePayMode2(OPr,"");
  return;
end;

global
procedure OPVc_PasteVATCode(var record OPVc OPp,Integer rownr)
BEGIN
  row OPVc OPrw;
  val t,rs,t1,v;
  record VIVc VIr;
  string 255 vatcode;
  record AccBlock Accb;
  record RoundBlock Rb;
  record CUVc VEr;
  
  BlockLoad(Rb);  
  MatRowGet(OPp,rownr,OPrw);
  VIr.SerNr = OPrw.VISerNr;
  if (ReadFirstMain(VIr,1,true)) then begin
    vatcode = OPrw.VATCode;
    GetOPVAT(VIr,OPrw.PInvVal,t,vatcode); 
    OPrw.VATVal = t;
  end else begin
    if (nonblank(OPrw.VATCode)) then begin
      if (OPrw.VISerNr<0) then begin
        VEr.Code = OPrw.VECode;
        ReadFirstMain(VEr,1,true);
        BlockLoad(Accb);  
        switch (VEr.ExportFlag) begin
          case 0:
            MulVATIV(OPrw.VATCode,OPrw.PInvVal,t,t1,1,Accb.NoTAXonVAT);
          case 1:
            MulVATIV(OPrw.VATCode,OPrw.PInvVal,t,t1,0,Accb.NoTAXonVAT);
          case 2:
            MulVATIV(OPrw.VATCode,OPrw.PInvVal,t,t1,0,Accb.NoTAXonVAT);
          case 3:
            MulVATIV(OPrw.VATCode,OPrw.PInvVal,t,t1,1,Accb.NoTAXonVAT);
          case 4:
            MulVATIV(OPrw.VATCode,OPrw.PInvVal,t,t1,1,Accb.NoTAXonVAT);
        end;
        OPrw.VATVal = Round(t,GetVATRoundMode(Rb));
        OPrw.TAX1Sum = Round(t1,GetVATRoundMode(Rb));
      end else begin
        VIr.SerNr = OPrw.VISerNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          v = VIr.PayVal;
          if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            v = -v;
          end;
          if (nonblank(VIr.VATVal)) then begin
            t = VIr.VATVal;
          end else begin
            t = VIr.CalcVATVal;
          end;
          if (v==OPrw.PInvVal) then begin
            OPrw.VATVal = t;
            if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              OPrw.VATVal = -OPrw.VATVal;
            end;
          end else begin
            OPrw.VATVal = OPrw.PInvVal*t;
            OPrw.VATVal = OPrw.VATVal/VIr.PayVal;
          end;
        end else begin
          Mul2VAT(OPrw.VATCode,OPrw.PInvVal,t,rs,1);
          OPrw.VATVal = Round(t,GetVATRoundMode(Rb));
        end;
      end;
    end else begin
       OPrw.VATVal = blankval;
       OPrw.TAX1Sum = blankval;
    end;
  end;
/*  
    if (nonblank(OPrw.VATCode)) then begin
       Mul2VAT(OPrw.VATCode,OPrw.PInvVal,t,rs,1);
       OPrw.VATVal = t;
    end else begin
       OPrw.VATVal = blankval;
    end;
*/    
  MatRowPut(OPp,rownr,OPrw);
  RETURN;
END;

global
procedure OPDClassOnOpenWindowRemote(var record OPVc OPr,var Integer AcceptanceStatusFlag)
begin
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  if (HasApprovals) then begin
    AcceptanceStatusFlag = OPApprovalStatus(OPr,Acptr);
  end;
  return;
end;