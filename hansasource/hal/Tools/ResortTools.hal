external function time TimeSub(time,time);
external function time TimeAdd(time,time);

global
Procedure GetStateDesc(Integer i,Var String tstr)
begin
  switch (i) begin
  case 0 : tstr = "Planificado";
  case 1 : tstr = "Pedido";
  case 2 : tstr = "Confirmado";
  case 3 : tstr = "Cerrado";
  case 4 : tstr = "Cancelado";
  end;
  return;
end;


global
procedure PasteInTransferTimes(var record TransferVc Transfer)
begin
  record RouteVc Router;

  Router.Code = Transfer.Route;
  if ReadFirstMain(Router,1,true) then begin
    if (blanktime(Transfer.StartTime) and not blanktime(Transfer.EndTime)) then begin
      Transfer.StartTime = TimeSub(Transfer.EndTime,Router.Duration);
    end;
    if (blanktime(Transfer.EndTime) and not blanktime(Transfer.StartTime)) then begin
      Transfer.EndTime = TimeAdd(Transfer.StartTime,Router.Duration);
    end;
  end;
  return;
end;

global
function Boolean ValidStateChange(Integer NewS,Integer OldS)
begin
  Boolean res;
  res = true;
  
  if (OldS<>NewS) then begin
    switch (OldS) begin
      case 0 : if ((NewS<>1) and (NewS<>4)) then begin res=false; end;
      case 1 : if ((NewS<>2) and (NewS<>4)) then begin res=false; end;
      case 2 : if ((NewS<>3) and (NewS<>4)) then begin res=false; end;
      case 3 : if (NewS<>3) then begin res=false; end;
      case 4 : if (NewS<>4) then begin res=false; end;
    end;
  end;
  ValidStateChange = res;
  return;
end;


updating procedure ExcurCreateActivity(Record ExcursionVc Excur)
begin
  Record ActVc Actr;
  Boolean Res;
  Integer curcomp; 

  curcomp = CurrentCompany;
  Recordnew(Actr);  // Generates new sernr automatically
  Actr.MainPersons   = Excur.MainPersons;
  Actr.Comment       = Excur.Comment;
  Actr.ActType       = Excur.ExcurType;
  Actr.StartTime     = Excur.StartTime;
  Actr.EndTime       = Excur.EndTime;
  Actr.TransDate     = Excur.TransDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
//  Actr.TodoFlag      = 1;
  Actr.PrivateFlag   = 0;
  Actr.CalTimeFlag   = 1;
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,Excur,curcomp);  
  end;
  return;
end;

updating procedure ExcurCreateJob(Record ExcursionVc Excur)
begin
  Record JobVc Jobr;
  Boolean Res;
  record HotelBlock htr;
  Integer curcomp;

  BlockLoad(htr);
  curcomp = CurrentCompany;
  Recordnew(Jobr);  // Generates new sernr automatically
  Jobr.ResCode       = Excur.ResCode;
  Jobr.CUName        = Excur.Comment;
  Jobr.ResStatus     = htr.DefSt;
  Jobr.StartTime     = Excur.StartTime;
  Jobr.EndTime       = Excur.EndTime;
  Jobr.TransDate     = Excur.TransDate;
  Jobr.EndDate       = Excur.TransDate;
  Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,"");
  if (RecordStore(Jobr,false)) then begin 
    CreateRecordLink(Jobr,curcomp,Excur,curcomp);  
  end;
  return;
end;



global
updating procedure LinkExcurToJob(record ExcursionVc Excur)
begin
  record JobVc Jobr;
  record RLinkVc RLinkr;

  if (ReadRecordToLink(Excur,1,Jobr,RLinkr)) then begin
    Jobr.ResCode   = Excur.ResCode;
    if (RecordStore(Jobr,true)) then begin end;
  end else begin
    ExcurCreateJob(Excur);
  end;
  return;
end;

global
updating procedure LinkExcurToAct(record ExcursionVc Excur)
begin
  record ActVc Actr;
  record RLinkVc RLinkr;

  if (ReadRecordToLink(Excur,1,Actr,RLinkr)) then begin
    Actr.MainPersons   = Excur.MainPersons;
    if (RecordStore(Actr,true)) then begin end;
  end else begin
    ExcurCreateActivity(Excur);
  end;
  return;
end;
