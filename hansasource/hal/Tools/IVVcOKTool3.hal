external procedure IVPasteRvrsVATCode(var record IVVc,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetFirstItem(var string,var record INVc);
external function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external function string 60 AddStringToStringList(string,string);
external procedure GetCountryName(string,string,var string);
external procedure IVSumup(var record IVVc,Boolean);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer CountObjects(string);
external procedure ExtractObj(string,var Integer,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure RemoveOldUserObjects(string,var string);
external updating procedure ArtStats(record IVVc,Boolean,Boolean);
external procedure CalcNorCheck(var string,Boolean);
external procedure GetBaseCurncy(Integer,var string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);

global
function val CalcItemRepa(val repaperw,val weight,val qty,var string curncy,val from,val to1,val to2,val base1,val base2,roundmode roundof)
begin
  val res;
  string 10 basecur1;
  
  res = (qty*weight)*repaperw;
  GetBaseCurncy(1,basecur1);
  if (nonblank(curncy)) then begin
    if (curncy!=basecur1) then begin
      res = DivRateToBase1(curncy,res,from,to1,to2,base1,base2,DefaultCurRoundOff);
    end;
  end;
  if (res==0) then begin
    res = BlankVal;
  end;
  CalcItemRepa = res;
  return;
end;

global
updating procedure InvalidateJob(Record IVVc IVr)
BEGIN
  Record ShopBaskVc ShopBaskr;
  Boolean TrHs,res;
  
  TrHs= true;
  ShopBaskr.CUCode= IVr.CustCode;
  ShopBaskr.DestinationNr = IVr.SerNr;
  while(LoopKey("CUCode",ShopBaskr,2,TrHs)) begin
    if ((ShopBaskr.CUCode<>IVr.CustCode) and (IVr.SerNr<>ShopBaskr.DestinationNr)) then begin
      TrHs= false;
    end;
    if (TrHs) then begin
      ShopBaskr.DestinationNr= -1;
      res= RecordStore(ShopBaskr,true);
    end;
  end;
  RETURN;
END;

global
procedure SetSVOFlags(record SVOVc SVOp)
BEGIN
  row SVOVc SVOrw;
  Integer i,rwcnt;
  Integer invf;
  record WSIVVc WSIVr;
  Boolean TrHs;
  
  rwcnt = MatRowCnt(SVOp);
  if (rwcnt>0) then begin invf = 1; end;
  WSIVr.SVONr = SVOp.SerNr;
  WSIVr.Type = 1;
  TrHs = true;
  while (LoopKey("Type",WSIVr,2,TrHs)) begin
    if (WSIVr.Type!=1) then begin TrHs = false; end;
    if (WSIVr.SVONr!=SVOp.SerNr) then begin TrHs = false; end;
    if (TrHs) then begin
      if (WSIVr.InvNr==-1) then begin
        invf = 0;
        goto LBNREAKSetSVOFlags;
      end;
    end;
  end;
LBNREAKSetSVOFlags:;  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SVOp,i,SVOrw);
    if ((SVOrw.Invd==0) and (SVOrw.ItemType<2)) then begin invf = 0; end;
  end;  
  SVOp.InvFlag = invf;
  switch (SVOp.InvFlag) begin
    case 0: SVOp.InvMark = 0;
    case 1: SVOp.InvMark = 18;
  end;
  RETURN;
END;


global
updating procedure IVVcCreateSoldGiftCert(record IVVc IVp)
BEGIN
  Integer i,rwcnt;
  row IVVc IVrw;
  record GCVc GCr;
  record GCVc oldGCr;
  record GCSVc GCSr;
  record GCSVc oldGCSr;
  record GCRVc GCRr;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
      GCr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin
        RecordNew(GCSr);
//        GCSr.TransDate = GCr.TransDate;
        GCSr.TransDate = IVp.TransDate;
        GCSr.ExpiryDate = GCr.ExpiryDate;
        GCSr.Comment = GCr.Comment;
        GCSr.Amount = GCr.Amount;
        GCSr.Balance = GCr.Amount;
        GCSr.SerNr = GCr.SerNr;
        GCSr.BarCode = GCr.BarCode;
        GCSr.InvSerNr = IVp.SerNr;
        GCSr.FileName = "IVVc";
        if (RecordStore(GCSr,false)) then begin
          RecordCopy(oldGCr,GCr);
          GCr.Closed = 1;
          if (RecordUpdate(oldGCr,GCr,true)==0) then begin
          end;
        end;
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
      GCSr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin
        RecordNew(GCRr);
//        GCRr.TransDate = GCSr.TransDate;
        GCRr.TransDate = IVp.TransDate;
        GCRr.ExpiryDate = GCRr.ExpiryDate;
        GCRr.Comment = GCSr.Comment;
        GCRr.Amount = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
        GCRr.SerNr = NextSerNr("GCRVc",GCRr.TransDate,-1,false,"");            
        GCRr.GCSSerNr = GCSr.SerNr;
        GCRr.BarCode = GCSr.BarCode;
        GCRr.InvSerNr = IVp.SerNr;
        GCRr.FileName = "IVVc";
        if (RecordStore(GCRr,false)) then begin
          RecordCopy(oldGCSr,GCSr);
          GCSr.Balance = GCSr.Balance - GCRr.Amount;
          if (GCSr.Balance==0) then begin
            GCSr.Closed = 1;
          end;
          if (RecordUpdate(oldGCSr,GCSr,true)==0) then begin
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
function Boolean IVVcGiftCertificateCheck(record IVVc IVr,Integer rownr,row IVVc IVrw,Integer stp,var val gcval)
BEGIN
  Boolean res;
  record GCVc GCr;
  record GCSVc GCSr;
  record GCRVc GCRr;
  
  res = true;
  switch (stp) begin
    case kInvoiceRowTypeGiftVoucherSold:
      GCr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin
        if (GCr.OKFlag==0) then begin
          RecordCheckError(2187,"",rownr,"GCNr");      
          res = false;
          goto LIVVcGiftCertificateCheck;
        end;
        if (IVr.InvDate>GCr.ExpiryDate) then begin
          RecordCheckError(2185,"",rownr,"GCNr");      
          res = false;
          goto LIVVcGiftCertificateCheck;
        end;
        GCSr.SerNr = IVrw.GCNr;
        if (ReadFirstMain(GCSr,1,true)) then begin
          RecordCheckError(2186,"",rownr,"GCNr");      
          res = false;
          goto LIVVcGiftCertificateCheck;
        end;
        if (IVrw.Sum!=GCr.Amount) then begin
          RecordCheckError(1210,"",rownr,"Sum");      
          res = false;
          goto LIVVcGiftCertificateCheck;
        end;
      end else begin
        RecordCheckError(2184,"",rownr,"GCNr");      
        res = false;
        goto LIVVcGiftCertificateCheck;
      end;
      gcval = gcval + IVrw.Sum;
    case kInvoiceRowTypeGiftVoucherPayment:
      GCSr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin
        if (GCSr.Closed!=0) or (GCSr.Balance<=0) then begin
          RecordCheckError(2189,"",rownr,"GCNr");      
          res = false;
          goto LIVVcGiftCertificateCheck;
        end;
        if (IVrw.Sum>GCSr.Balance) then begin
          RecordCheckError(1210,"",rownr,"Sum");      
          res = false;
          goto LIVVcGiftCertificateCheck;
        end;
      end else begin
        RecordCheckError(2188,"",rownr,"GCNr");      
        res = false;
        goto LIVVcGiftCertificateCheck;
      end;
      gcval = gcval + IVrw.Sum;
  end;
LIVVcGiftCertificateCheck:;
  IVVcGiftCertificateCheck = res;
  RETURN;
END;

global
procedure CreateSwedishChecksum(var string tstr,var string res)
BEGIN
  CalcNorCheck(tstr,true);
  res = right(tstr,1);  //must take the right not the left char
  RETURN;
END;

global
updating procedure UpdateCreditNotesWithLowerNumbers(record IVVc IVp)
begin
  record IVVc credIVr;
  Boolean found;
  
  if (IVp.SerNr>0) then begin
    found = true;
    credIVr.CredInv = IVp.SerNr;
    credIVr.SerNr = IVp.SerNr;
    while (LoopBackKey("CredInv",credIVr,2,found)) begin
      if (credIVr.CredInv!=IVp.SerNr) then begin found = false; end;
      if (credIVr.SerNr>IVp.SerNr) then begin found = false; end;
      if (found) then begin
        if (credIVr.InvType==kInvoiceTypeCredit or credIVr.InvType==kInvoiceTypeCreditSpecialSales) and (credIVr.SerNr!=IVp.SerNr) then begin
          ArtStats(credIVr,false,true);//reverse 1st import when original invoice was not yet imported
          ArtStats(credIVr,false,false);
        end;
      end;
    end;
  end;
  return;
end;

global
function Boolean IsSerialNrCorrect(string serialnr)
begin
  Boolean res;
  Integer i,l;
  string 1 c;
  
  res = true;
  l = len(serialnr);
  for (i=0;i<l;i=i+1) begin
    c = Mid(serialnr,i,1);
    if ((c==",") or (c==";") or (c==":") or (c==" ")) then begin // or c==".") then begin
      res = false;
      goto LIsSerialNrCorrect;
    end;
  end;
LIsSerialNrCorrect:;  
  IsSerialNrCorrect = res;
  return;
end;

global
function Integer CheckCLInAmount(LongInt clin,val sum4,val basesum4,string curncy)
begin
  Integer errcode;
  record CLInVc CLInr;
  
  errcode = 0;
  CLInr.SerNr = clin;
  if (ReadFirstMain(CLInr,1,true)) then begin
    if (CLInr.FSerNr!=-1) then begin
      if (CLInr.Total!=sum4) then begin
         errcode = 2071;
      end;
    end;  
  end;
  CheckCLInAmount = errcode;
  return;
end;

global
updating function Boolean UpdateSVOOrderFromInv_Remove(record IVVc IVp)
BEGIN
  Boolean res;
  record SVOVc SVOr;
  record SVOVc oldSVOr;
  row SVOVc SVOrw;
  record WSIVVc WSIVr;
  record WSIVVc oldWSIVr;
  record WSVc WSr;
  row IVVc IVrw;
  Integer i,rwcnt;
  Integer svi,svcnt;
  string 20 custcode;
  Boolean found,svoupdatedf;
  
  if (IVp.SVONr==-1) then begin goto LUpdateSVOOrderFromInv_Remove; end;
  SVOr.SerNr = IVp.SVONr;
  if (ReadFirstMain(SVOr,1,true)==false) then begin goto LUpdateSVOOrderFromInv_Remove; end;
  if (nonblank(IVp.OrgCust)) then begin
    custcode = IVp.OrgCust;
  end else begin
    custcode = IVp.CustCode;
  end;
  RecordCopy(oldSVOr,SVOr);
  rwcnt = MatRowCnt(IVp);
  svcnt = MatRowCnt(SVOr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (blank(IVrw.ArtCode)) then begin goto L88UpdateSVOOrderFromInv_Remove; end;
    RecordClear(WSIVr);
    WSIVr.InvNr = IVp.SerNr;
    WSIVr.CUCode = custcode;
    WSIVr.Type = 1;
    WSIVr.ArtCode = IVrw.ArtCode;
    found = true;
    ResetLoop(WSIVr);
    while (LoopKey("InvKey",WSIVr,4,found)) begin 
      if (WSIVr.InvNr!=IVp.SerNr) then begin found = false; end;
      if (WSIVr.Type!=1) then begin found = false; end;
      if (WSIVr.CUCode!=custcode) then begin found = false; end;
      if (WSIVr.ArtCode!=IVrw.ArtCode) then begin found = false; end;
      if (found) then begin
        RecordCopy(oldWSIVr,WSIVr);
        if (svoupdatedf==false) then begin
          for (svi=0;svi<svcnt;svi=svi+1) begin
            MatRowGet(SVOr,svi,SVOrw);
            if (WSIVr.MotherNr==SVOrw.SerialNr) then begin
              SVOrw.Invd = SVOrw.Invd - IVrw.Quant;
              if (SVOrw.Invd<=0) then begin SVOrw.Invd = blankval; end;
              MatRowPut(SVOr,svi,SVOrw);
              res = true;   
              svoupdatedf = true;
              svi = svcnt;
            end;
          end;
        end;  
        WSIVr.InvNr = -1;
        if (RecordUpdate(oldWSIVr,WSIVr,false)==0) then begin
        end;
      end;
    end;  
L88UpdateSVOOrderFromInv_Remove:;    
  end;
LUpdateSVOOrderFromInv_Remove:;  
  if (res) then begin
    SetSVOFlags(SVOr);
    if (RecordUpdate(oldSVOr,SVOr,true)==0) then begin
    end;
  end;
  UpdateSVOOrderFromInv_Remove = res;
  RETURN;
END;

global
updating procedure UpdateSVOOrderFromInv(record IVVc IVp,record IVVc IV2p)
begin
  Boolean found;
  record WSIVVc WSIVr;
  record WSIVVc oldWSIVr;

//JJUpdate  
  if (IVp.SVONr==-1) then begin goto LUpdateSVOOrderFromInv; end;
  if (IVp.SerNr==IV2p.SerNr) then begin goto LUpdateSVOOrderFromInv; end;  
  found = true;
  WSIVr.InvNr = IV2p.SerNr;
  while (LoopKey("InvKey",WSIVr,1,found)) begin 
    if (WSIVr.InvNr!=IV2p.SerNr) then begin found = false; end;
    if (found) then begin
      RecordCopy(oldWSIVr,WSIVr);
      WSIVr.InvNr = IVp.SerNr;
      if (RecordUpdate(oldWSIVr,WSIVr,false)==0) then begin
      end;
      StepBack(WSIVr);
    end;
  end;  
LUpdateSVOOrderFromInv:;  
  return;
end;

global
function Boolean HasSalesmanChanged(string newsalesman,string oldsalesman)
begin
  Boolean res;
  string 255 newsm,oldsm;
  Integer pos,oldpos;
  
  if (blank(oldsalesman)) and (nonblank(newsalesman)) then begin res = true; end;
  if (blank(newsalesman)) and (nonblank(oldsalesman)) then begin res = true; end;
  if (CountObjects(oldsalesman)!=CountObjects(newsalesman)) then begin res = true; end;
  if (res==false) then begin
    pos = 0;
    ExtractObj(newsalesman,pos,newsm);
    while (nonblank(newsm)) begin
      res = true;
      oldpos = 0;
      ExtractObj(oldsalesman,oldpos,oldsm);
      while (nonblank(oldsm)) begin
        if (newsm==oldsm) then begin
          res = false;
          goto LNextSalesMan;
        end;
        ExtractObj(oldsalesman,oldpos,oldsm);
      end;      
LNextSalesMan:;      
      if (res) then begin
        goto LHasSalesmanChanged;
      end;
      ExtractObj(newsalesman,pos,newsm);
    end;
  end;
LHasSalesmanChanged:;  
  HasSalesmanChanged = res;
  return;
end;

global
procedure IVVc_PasteSalesMan(var record IVVc IVr,string oldsalesmen)
begin
  record UserVc Userr;
  string 255 tstr,salesman;
  LongInt pos;

  if (HasSalesmanChanged(IVr.SalesMan,oldsalesmen)) then begin
    if (IVr.OKFlag==0) then begin
      pos = 0;
      GetNextSubstring(oldsalesmen,pos,",",salesman);
      while (nonblank(salesman)) begin
        RemoveOldUserObjects(salesman,IVr.Objects);
        GetNextSubstring(oldsalesmen,pos,",",salesman);
      end;
    end;
    IVr.SalesGroup = "";    

    pos = 0;
    GetNextSubstring(IVr.SalesMan,pos,",",salesman);
    while (nonblank(salesman)) begin
      Userr.Code = salesman;
      if (ReadFirstMain(Userr,1,true)) then begin
        IVr.SalesGroup = AddStringToStringList(IVr.SalesGroup,Userr.SalesGroup);                
        if (IVr.OKFlag==0) then begin
          IVr.Objects = AddObjectToObjectList(IVr.Objects,Userr.PersObjx);        
        end;
      end;
      GetNextSubstring(IVr.SalesMan,pos,",",salesman);
    end;
  end;
  return;
end;

global
function Boolean IVVc_CalculateRate(var record IVVc IVp)
begin
  Boolean res;
  val ivsumused;
  val ivrval;
  row IVVc IVrw;
  record IVTBlock IVTb;
  val ofrrate,otorate1,otorate2,obaserate1,obaserate2;
  val totFrRate,totToRateB1,totToRateB2,totBaseRate1,totBaseRate2;
  record ARPayHistVc ARPHr;
  record CLInVc CLInr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  Integer ipi,iprwcnt;
  Boolean found,testf;

  ivsumused = blankval;
  BlockLoad(IVTb);
  switch (IVTb.IVFromORRate) begin
    case kIVRateFromPrepaymentandInvoice:
      GetFullCurncyRate(IVp.CurncyCode,IVp.InvDate,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2);
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
          ResetLoop(ARPHr);
          found = true;
          ARPHr.CUPNr = IVrw.CUPNr;
          while (LoopMain(ARPHr,1,found)) begin
            if (ARPHr.CUPNr!=IVrw.CUPNr) then begin found = false; end;
            if (found) then begin
              testf = false;
              switch (ARPHr.FileName) begin
                case "CLInVc":              
                  CLInr.SerNr = ARPHr.SerNr;
                  if (ReadFirstMain(CLInr,1,true)) then begin 
                    ofrrate = CLInr.FrRate;
                    otorate1 = CLInr.ToRateB1;
                    otorate2 = CLInr.ToRateB2;
                    obaserate1 = CLInr.BaseRate1;
                    obaserate2 = CLInr.BaseRate2;
                    testf = true;        
                  end;      
                case "IPVc":              
                  IPr.SerNr = ARPHr.SerNr;
                  if (ReadFirstMain(IPr,1,true)) then begin 
                    iprwcnt = MatRowCnt(IPr);
                    for (ipi=0;ipi<iprwcnt;ipi=ipi+1) begin
                      MatRowGet(IPr,ipi,IPrw);
                      ofrrate = IPrw.FrRateBankVal;
                      otorate1 = IPrw.ToRateB1BankVal;
                      otorate2 = IPrw.ToRateB2BankVal;
                      obaserate1 = IPrw.BaseRate1BankVal;
                      obaserate2 = IPrw.BaseRate2BankVal;
                      if (ofrrate==0) then begin
                        GetFullCurncyRate(ARPHr.CurncyCode,IPr.TransDate,ofrrate,otorate1,otorate2,obaserate1,obaserate2);
                        ipi = iprwcnt;
                      end;
                    end;
                    testf = true;        
                  end;              
              end;
              if (testf) then begin
                ivsumused = ivsumused + IVrw.Sum;              
                totFrRate = totFrRate + IVrw.Sum*ofrrate;
                totToRateB1 = totToRateB1 + IVrw.Sum*otorate1;
                totToRateB2 = totToRateB2 + IVrw.Sum*otorate2;
                totBaseRate1 = totBaseRate1 + IVrw.Sum*obaserate1;
                totBaseRate2 = totBaseRate2 + IVrw.Sum*obaserate2;
              end;
            end;
          end;
        end;
      end;
      ivrval = IVp.Sum4 - ivsumused;
      if (ivrval<0) then begin ivrval = 0; end;
      IVp.FrRate = (totFrRate + ivrval*IVp.FrRate)/IVp.Sum4;
      IVp.ToRateB1 = (totToRateB1 + ivrval*IVp.ToRateB1)/IVp.Sum4;
      IVp.ToRateB2 = (totToRateB2 + ivrval*IVp.ToRateB2)/IVp.Sum4;
      IVp.BaseRate1 = (totBaseRate1 + ivrval*IVp.BaseRate1)/IVp.Sum4;
      IVp.BaseRate2 = (totBaseRate2 + ivrval*IVp.BaseRate2)/IVp.Sum4;
      res = true;
    case kIVRateFromPrepayment:
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
          ResetLoop(ARPHr);
          found = true;
          ARPHr.CUPNr = IVrw.CUPNr;
          while (LoopMain(ARPHr,1,found)) begin
            if (ARPHr.CUPNr!=IVrw.CUPNr) then begin found = false; end;
            if (found) then begin
              testf = false;
              switch (ARPHr.FileName) begin
                case "CLInVc":              
                  CLInr.SerNr = ARPHr.SerNr;
                  if (ReadFirstMain(CLInr,1,true)) then begin 
                    ofrrate = CLInr.FrRate;
                    otorate1 = CLInr.ToRateB1;
                    otorate2 = CLInr.ToRateB2;
                    obaserate1 = CLInr.BaseRate1;
                    obaserate2 = CLInr.BaseRate2;
                    testf = true;        
                  end;      
                case "IPVc":              
                  IPr.SerNr = ARPHr.SerNr;
                  if (ReadFirstMain(IPr,1,true)) then begin 
                    iprwcnt = MatRowCnt(IPr);
                    for (ipi=0;ipi<iprwcnt;ipi=ipi+1) begin
                      MatRowGet(IPr,ipi,IPrw);
                      ofrrate = IPrw.FrRateBankVal;
                      otorate1 = IPrw.ToRateB1BankVal;
                      otorate2 = IPrw.ToRateB2BankVal;
                      obaserate1 = IPrw.BaseRate1BankVal;
                      obaserate2 = IPrw.BaseRate2BankVal;
                      if (ofrrate==0) then begin
                        GetFullCurncyRate(ARPHr.CurncyCode,IPr.TransDate,ofrrate,otorate1,otorate2,obaserate1,obaserate2);
                        ipi = iprwcnt;
                      end;
                    end;
                    testf = true;        
                  end;              
              end;
              if (testf) then begin
                ivsumused = ivsumused + IVrw.Sum;              
                totFrRate = totFrRate + IVrw.Sum*ofrrate;
                totToRateB1 = totToRateB1 + IVrw.Sum*otorate1;
                totToRateB2 = totToRateB2 + IVrw.Sum*otorate2;
                totBaseRate1 = totBaseRate1 + IVrw.Sum*obaserate1;
                totBaseRate2 = totBaseRate2 + IVrw.Sum*obaserate2;
              end;
            end;
          end;
        end;
      end;
      IVp.FrRate = totFrRate/ivsumused;
      IVp.ToRateB1 = totToRateB1/ivsumused;
      IVp.ToRateB2 = totToRateB2/ivsumused;
      IVp.BaseRate1 = totBaseRate1/ivsumused;
      IVp.BaseRate2 = totBaseRate2/ivsumused;
      if (IVp.FrRate==0) and (IVp.BaseRate1==0) then begin
        GetFullCurncyRate(IVp.CurncyCode,IVp.InvDate,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2);
      end;
      if (IVp.FrRate==0) then begin IVp.FrRate = blankval; end;
      if (IVp.ToRateB1==0) then begin IVp.ToRateB1 = blankval; end;
      if (IVp.ToRateB2==0) then begin IVp.ToRateB2 = blankval; end;
      if (IVp.BaseRate1==0) then begin IVp.BaseRate1 = blankval; end;
      if (IVp.BaseRate2==0) then begin IVp.BaseRate2 = blankval; end;
      res = true;
  end;
  IVVc_CalculateRate = res;
  return;
end;

global
updating procedure DeleteXSrsVcs(record IVVc IVr)
begin
  Boolean found;
  record XSrsVc XSrsr;
  Integer ivi,ivrwcnt;
  Boolean changedf;
  
  XSrsr.TransType = 0;
  XSrsr.ToFileName = "IVVc";
  XSrsr.ToSerNr = IVr.SerNr;

  found = true;
  while (LoopKey("MainKey",XSrsr,3,found)) begin
    if (XSrsr.TransType!=0) then begin found = false; end;
    if (XSrsr.ToFileName!="IVVc") then begin found = false; end;
    if (XSrsr.ToSerNr!=IVr.SerNr) then begin found = false; end;
    if (found) then begin
      RecordDelete(XSrsr);
      StepBack(XSrsr);
    end;
  end;
  return;
end;

global
updating procedure DeleteXSrsVcsforRow(record IVVc IVr,LongInt torownr)
begin
  Boolean found;
  record XSrsVc XSrsr;
  Integer ivi,ivrwcnt;
  Boolean changedf;
  
  XSrsr.TransType = 0;
  XSrsr.ToFileName = "IVVc";
  XSrsr.ToSerNr = IVr.SerNr;
  XSrsr.ToRow = torownr;

  found = true;
  while (LoopKey("MainKey",XSrsr,4,found)) begin
    if (XSrsr.TransType!=0) then begin found = false; end;
    if (XSrsr.ToFileName!="IVVc") then begin found = false; end;
    if (XSrsr.ToSerNr!=IVr.SerNr) then begin found = false; end;
    if (XSrsr.ToRow!=torownr) then begin found = false; end;
    if (found) then begin
      RecordDelete(XSrsr);
      StepBack(XSrsr);
    end;
  end;
  return;
end;

global
updating procedure UpdateXSrsVcs(record IVVc IVr,LongInt torownr,val updateqty)
begin
  Boolean found;
  record XSrsVc XSrsr;
  record XSrsVc oldXSrsr;
  Integer ivi,ivrwcnt;
  Boolean changedf;
  
  XSrsr.TransType = 0;
  XSrsr.ToFileName = "IVVc";
  XSrsr.ToSerNr = IVr.SerNr;
  XSrsr.ToRow = torownr;

  found = true;
  while (LoopKey("MainKey",XSrsr,4,found)) begin
    if (XSrsr.TransType!=0) then begin found = false; end;
    if (XSrsr.ToFileName!="IVVc") then begin found = false; end;
    if (XSrsr.ToSerNr!=IVr.SerNr) then begin found = false; end;
    if (XSrsr.ToRow!=torownr) then begin found = false; end;
    if (found) then begin
      RecordCopy(oldXSrsr,XSrsr);
      XSrsr.FromQty = updateqty;
      RecordUpdate(oldXSrsr,XSrsr,false);
    end;
  end;
  return;
end;

global
updating procedure UpdateXsrsFromInv(record IVVc IVr,record IVVc prevIVr)
begin
  Integer pi,prwcnt;
  Integer i,rwcnt;
  row IVVc prevIVrw;
  row IVVc IVrw;
  Boolean deletef;
  Boolean updatef;
  val updateqty;

  if (IVr.GroupInv==1) then begin
    prwcnt = MatRowCnt(prevIVr);
    rwcnt = MatRowCnt(IVr);
    for (pi=0;pi<prwcnt;pi=pi+1) begin
      MatRowGet(prevIVr,pi,prevIVrw);
      if (prevIVrw.OrdNr>0) then begin
        deletef = true;
        updatef = false;
        updateqty = blankval;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          if (IVrw.OrdNr>0) then begin
            if (IVrw.OrdNr==prevIVrw.OrdNr) and (IVrw.OrdRow==prevIVrw.OrdRow) then begin
              deletef = false;
              if (IVrw.Quant!=prevIVrw.Quant) then begin
                updatef = true;
                updateqty = IVrw.Quant;
              end;
              i = rwcnt;
            end;
          end;
        end;
        if (deletef) then begin
          DeleteXSrsVcsforRow(prevIVr,pi);
        end;
        if (updatef) then begin
          UpdateXSrsVcs(prevIVr,pi,updateqty);
        end;
      end;
    end;
  end;
  
  return;
end;

global
procedure GetFreeTxtData(string custcode,var string vatcode,var string salesacc,Integer aexport)
BEGIN
  record AccBlock ARAccRec;

  BlockLoad(ARAccRec);
  vatcode = "";
  salesacc = "";
  switch (aexport) begin
    case 4:   vatcode = ARAccRec.VATCodeExp;
    case 3:   vatcode = ARAccRec.VATCodeEU;
    case 2:   vatcode = ARAccRec.VATCodeExp;
    case 1:   vatcode = ARAccRec.VATCodeEU;
    otherwise vatcode = ARAccRec.VATCodeDom;
  end;
  switch (aexport) begin
    case 4:   salesacc = ARAccRec.ExpSalesAcc;
    case 3:   salesacc = ARAccRec.EUSalesAcc;
    case 2:   salesacc = ARAccRec.ExpSalesAcc;
    case 1:   salesacc = ARAccRec.EUSalesAcc;
    otherwise salesacc = ARAccRec.DomSalesAcc;
  end;
  RETURN;
END;

procedure CalcUnitPrice(val pricep,val qtyp,val unitqtyp,var val unitpricep)
BEGIN
  val temp;
  
  temp = qtyp/unitqtyp;
  unitpricep = pricep*temp;
  RETURN;
END;

global
procedure IVVc_PastePrice(var record IVVc IVp,record IVVc IV2p,Integer rownr,var string warning)
BEGIN
  row IVVc IVrw;
  row IVVc oldIVrw;
  string 10 salesacc,vatcode;
  val t,oldprice;
  record INVc INr;

  MatRowGet(IVp,rownr,IVrw);
  if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeCorrection)) then begin
    if (nonblank(IVrw.ArtCode)) then begin
      if (GetFirstItem(IVrw.ArtCode,INr)==false) then begin
        ReadFirstItem(IVrw.ArtCode,INr,true,false);
      end;
    end;
    if ((blank(IVrw.ArtCode)) and (IVrw.Price!=0)) then begin
      GetFreeTxtData(IVp.CustCode,vatcode,salesacc,IVp.ExportFlag);
      IVrw.VATCode = vatcode;
      IVrw.SalesAcc = salesacc;
      CalcUnitPrice(IVrw.Price,IVrw.Quant,IVrw.UnitFactQuant,t);
      IVrw.UnitFactPrice = t;      
      MatRowPut(IVp,rownr,IVrw);
    end;
    if (IVDchrsum(IVp,rownr)) then begin
      IVDchsum(IVp,rownr);
    end;  
    if (nonblank(INr.RvrsVATCode)) then begin
      IVPasteRvrsVATCode(IVp,false);
    end;
    IVSumup(IVp,true);      
  end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) and (nonblank(IVp.PRCode)) then begin
    if (RecordValid(IV2p)) then begin
      MatRowGet(IV2p,rownr,oldIVrw);
      if (oldIVrw.Price!=IVrw.Price) then begin
        warning = USetStr(20404);
      end;
    end;
  end;
  RETURN;
END;

global
procedure IVVc_PasteInvCountry(var record IVVc IVp,string oldCountryCode)
begin 
  if (IVp.InvCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(IVp.InvCountry)) then begin 
      GetCountryName(IVp.InvCountry,IVp.LangCode,IVp.InvCountryName);
    end else begin
      IVp.InvCountryName = "";
    end;   
  end;
  return;
end;

global
procedure IVVc_PasteDelCountry(var record IVVc IVp,string oldCountryCode)
begin 
  if (IVp.InvCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(IVp.DelCountry)) then begin 
      GetCountryName(IVp.DelCountry,IVp.LangCode,IVp.DelCountryName);
    end else begin
      IVp.DelCountryName = "";
    end;
  end;
  return;
end;

global
updating procedure CheckCreateSetDefaultCustomCode(var record IVVc IVp)
begin
  record IVTBlock IVb;
  record CUVc CUr;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn,tstr,prevcustname,prevpaydeal;
  record LocalMachineBlock LMb;
  
  if (IsStandardProduct) then begin 
    BlockLoad(IVb);
    if (nonblank(IVb.DefCustCode)) then begin 
      CUr.Code = IVb.DefCustCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        RecordNew(CUr);
        CUr.Code = IVb.DefCustCode;
        CUr.Name = IVb.DefCustName;
        CUr.CUType = 1;
        LogText2(0,"StandardProduct: Creating default customer from Sales Invoice Setting.",kVerbosityDebug);
        if (RecordStore(CUr,false)==false) then begin
          LogText2(0,"StandardProduct: Failed to create default customer record from Sales Invoice Setting",kVerbosityDebug);      
          IVp.CustCode = "";
        end;
      end;
      if (ReadFirstMain(CUr,1,true)) then begin
        IVp.CustCode = CUr.Code;
        if (nonblank(IVp.Addr0)) then begin 
          prevcustname = IVp.Addr0;        
        end; 
        if (nonblank(IVp.PayDeal)) then begin 
          prevpaydeal = IVp.PayDeal;
        end;         
        if (PasteCust2InInv(IVp,LMb,"",true,warning,errstr,prepstr,invdatewarn,transdatewarn)==false) then begin
          LogText2(0,"StandardProduct: Paste Customer error: warning:" & warning & " errstr:" & errstr & " prepstr:" & prepstr & " invdatewarn:" & invdatewarn & " transdatewarn:" & transdatewarn,kVerbosityDebug);
          IVp.CustCode = "";
          IVp.Addr0 = "";
          IVp.PayDeal = "";
        end;
        if (nonblank(prevcustname)) then begin 
          IVp.Addr0 = prevcustname;
        end;   
        if (nonblank(prevpaydeal)) then begin 
          IVp.PayDeal = prevpaydeal;
        end;
      end else begin
        LogText2(0,"StandardProduct: Failed to find default customer from Sales Invoice Setting",kVerbosityDebug);      
        IVp.CustCode = "";
      end; 
    end else begin 
      if (blank(IVp.CustCode)) then begin
        LogText2(1125,"StandardProduct: Field: CustCode, PM to ensure DEFAULT.TXT has Sales Invoice Setting set.",kVerbosityDebug);
      end;
    end;
  end; 
end;