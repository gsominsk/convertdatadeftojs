external function roundmode GetVATRoundMode(record RoundBlock);
external procedure ATransVal(val,val,string,string,var val,var val,Boolean);
external procedure RoundVATSum(string,string,string,var val);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure GetAccountDescription2(string,string,var string);
external procedure PasteAccObj(string,var string);

procedure FEAPAccName(record FEVIVc FEVIp,Integer rownr,Boolean autf)
BEGIN
  row FEVIVc FEVIrw;
  record AccVc Accr;
  record APAccBlock APAccRec;
  Boolean Accs;
  string 255 tstr;
  string 255 vatcode;
  string 10 accnr;
  Integer row1;

  MatRowGet(FEVIp,rownr,FEVIrw);
  accnr = FEVIrw.AccNumber;
  MatRowPut(FEVIp,rownr,FEVIrw);

  if (blank(accnr)) then begin
    FEVIrw.Comment = "";
    goto LFEAPAccName;
  end;
  Accr.AccNumber = accnr;
  Accs = ReadFirstKey("AccNumber",Accr,1,true);
  if (Accs==false) then begin
    FEVIrw.Comment = USetStr(1023);
  end else begin
    GetAccountDescription2(Accr.AccNumber,FEVIp.LangCode,tstr);
    FEVIrw.Comment = tstr;
    vatcode = FEVIp.VEVatCode;
    if (blank(vatcode)) then begin
      vatcode = Accr.VATCode;
    end;
    if (blank(vatcode)) then begin
      BlockLoad(APAccRec);
      switch (FEVIp.ExportFlag) begin
        case 0: vatcode = APAccRec.VATCodeDom;
        case 1: vatcode = APAccRec.VATCodeEU;
        case 2: vatcode = APAccRec.VATCodeExp;
        case 3: vatcode = APAccRec.VATCodeEU;
        case 4: vatcode = APAccRec.VATCodeExp;
      end;
    end;
    FEVIrw.VATCode = vatcode;
    if (autf==false) then begin
      if (nonblank(Accr.AutCode)) then begin
        row1 = rownr + 1;
        MatRowInsert(FEVIp,row1,FEVIrw);
        FEVIrw.AccNumber = Accr.AutCode;
      end;
    end;
  end;
LFEAPAccName:;
  MatRowPut(FEVIp,rownr,FEVIrw);
  RETURN;
END;

global
procedure FEVISumup(record FEVIVc FEVIp,var val rp)
BEGIN
  row FEVIVc FEVIrw;
  Integer i,rwcnt;
  val Bal;

  Bal = FEVIp.PayVal;
  if (FEVIp.ExportFlag!=1) then begin // NEWVAT I don't think this is correct
//  if ((FEVIp.ExportFlag==0) or (FEVIp.ExportFlag==3) or (FEVIp.ExportFlag==4)) then begin
    if (FEVIp.VATVal==blankval) then begin
      Bal = Bal - FEVIp.CalcVATVal;
    end else begin
      Bal = Bal - FEVIp.VATVal;
    end;
  end;
  rwcnt = MatRowCnt(FEVIp);
  for (i = 0 ;i<rwcnt;i=i+1) begin
    MatRowGet(FEVIp,i,FEVIrw);
    switch (FEVIrw.stp) begin
      case 1:
        if (FEVIrw.ovst==0) then begin
          Bal = Bal - FEVIrw.Sum;
        end;
    end;
  end;
  rp = Bal;
  RETURN;
END;

global
procedure FEVICalcVals(record FEVIVc FEVIp)
BEGIN
  record RoundBlock RoundRec;
  row FEVIVc FEVIrw;
  record SMVc VATr;
  Integer rwcnt,i,vcrwcnt;
  val vat,t1;
  roundmode rndtotal;
 
  BlockLoad(RoundRec); 
  SetupVATBase(VATr,vcrwcnt);  
  FEVIp.CalcVATVal = blankval;
  rwcnt = MatRowCnt(FEVIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FEVIp,i,FEVIrw);
    if (FEVIrw.stp==1) then begin
      if (nonblank(FEVIrw.VATCode)) then begin
        AddVATBase(VATr,FEVIrw.VATCode,FEVIrw.Sum,blankval,vcrwcnt,0,0);
      end;
    end;
  end;
  CalcVATBaseVAT(VATr,0,0,vcrwcnt,vat,t1);
  RoundVATSum(FEVIp.CurncyCode,FEVIp.PayDeal,"IVVc",vat);        
  if (FEVIp.ExportFlag!=2) then begin // NEWVAT I don't think this is correct....
//  if ((FEVIp.ExportFlag==0) or (FEVIp.ExportFlag==3) or (FEVIp.ExportFlag==4)) then begin
    rndtotal = GetVATRoundMode(RoundRec);  
    vat = Round(vat,rndtotal);
    FEVIp.CalcVATVal = vat;
  end;
  RETURN;
END;

function Boolean FEAPAutoTrans(record FEVIVc FEVIp,Integer rownr)
BEGIN
  row FEVIVc FEVIrw;
  row AutVc Autrw;
  record AutVc Autr;
  Boolean res;
  Boolean Auts;
  LongInt i;
  LongInt anrows;
  Integer trow;
  val dval,crval,tval;
  row FEVIVc OrgRow;
  Integer sf,nfr;
  Boolean backstep;
  string 255 tstr;
  Integer iv;
  LongInt blnkl;
  val blnkv;
  val od,oc;

//  MatSize(wn,&sf,&nfr);
  OrgRow.Sum = FEVIp.PayVal - FEVIp.VATVal; 
  MatRowGet(FEVIp,rownr,FEVIrw);
  Autr.Code = FEVIrw.AccNumber;
  if (rownr>=1) then begin
    MatRowGet(FEVIp,rownr-1,FEVIrw);
    if (FEVIrw.stp==1) then begin
      CopyRow(FEVIp,FEVIrw,OrgRow);
    end;
  end;
  if (blank(Autr.Code)) then begin goto LFEAPAutoTrans; end;
  Auts = ReadFirstMain(Autr,1,true);
  if (Auts==false) then begin goto LFEAPAutoTrans; end;
  res = true;
  if (MatRowCnt(Autr)==0) then begin goto LFEAPAutoTrans; end;
  res = true;
  anrows = MatRowCnt(Autr);
  trow = rownr-1;
  for (i=0;i<anrows; i=i+1) begin
    MatRowGet(Autr,i,Autrw);
    trow = trow + 1;
    if (i==0) then begin
      if (trow>0) then begin
        if (Autrw.AccNumber=="!") then begin
          backstep = true;
          trow = trow - 1;
        end;
      end;
    end;
 //   if (trow>98) then goto L88; ## get window def 
    if (trow>=MatRowCnt(FEVIp)) then begin
      // clear array
      ClearRow(FEVIp,FEVIrw,1);
    end;
      FEVIrw.stp = 1;
      FEVIrw.ovst = 0;
      blnkl = -1;
      FEVIrw.PrepayNr = blnkl;
      FEVIrw.PrepayAmount = blnkv;
      FEVIrw.VATVal = blnkv;
      tstr = Autrw.AccNumber;
      if (tstr=="#") then begin
        tstr = OrgRow.AccNumber;
      end;
      if ((i==0) and (backstep==true)) then begin
        tstr = OrgRow.AccNumber;
      end;
      FEVIrw.AccNumber = tstr;
      tstr = Autrw.objstr;
      if (tstr=="#") then begin
        tstr = OrgRow.Objects;
      end;
      if ((i==0) and (backstep==true)) then begin
        if (blank(tstr)) then begin
          tstr = OrgRow.Objects;
        end;
      end;
      FEVIrw.Objects = tstr;
      tstr = Autrw.comstr;
      if (tstr=="#") then begin
        tstr = OrgRow.Comment;
      end;
      if ((i==0) and (backstep==true)) then begin
        if (blank(tstr)) then begin
          tstr = OrgRow.Comment;
        end;
      end;
      if (blank(tstr)) then begin
        MatRowPut(FEVIp,trow,FEVIrw);
        FEAPAccName(FEVIp,trow,true);
        MatRowGet(FEVIp,trow,FEVIrw);
      end else begin
        FEVIrw.Comment = tstr;
      end;
      tstr = Autrw.VATCode;
      if (tstr=="#") or (tstr=="!") then begin
        tstr = OrgRow.VATCode;
      end;
      FEVIrw.VATCode = tstr;            
      if ((Autrw.dstr=="=") or (Autrw.cstr=="=")) then begin
        tval = 0;
        FEVIrw.Sum = 0;
        FEVISumup(FEVIp,tval);
        tval = -tval;
        FEVIrw.Sum = tval;
      end else begin
        od = blankval;
        oc = blankval;
        if (OrgRow.Sum>=0) then begin
          od = OrgRow.Sum;
        end else begin
          oc = -OrgRow.Sum;
        end;
        ATransVal(od,oc,Autrw.dstr,Autrw.cstr,dval,crval,Autr.DontSwap!=0);
        tval = dval - crval;
        FEVIrw.Sum = tval;
      end;
      MatRowPut(FEVIp,trow,FEVIrw);      
  end;
  FEVICalcVals(FEVIp);
//  TrDNewEF = sf+nfr*(trow+1);
LFEAPAutoTrans:;
  FEAPAutoTrans = res;
  RETURN;
END;

procedure PasteVendInFEVI(record FEVIVc FEVIp,var string vewarn,string vatcode)
BEGIN
  record APAccBlock APAccRec;
  record CUVc VEr;
  row FEVIVc FEVIrw;
  Boolean found;
 
  BlockLoad(APAccRec);
  VEr.Code = FEVIp.VECode;
  found = ReadFirstMain(VEr,1,true);
  if (found) then begin
    if (VEr.blockedFlag!=0) then begin found = false; end;
  end;
  if (found) then begin
    FEVIp.Comment = VEr.Comment;
    FEVIp.VEName = VEr.Name;
    FEVIp.PayDeal = VEr.VEPayDeal;
    FEVIp.CurncyCode  = VEr.VECurncyCode;
    FEVIp.LangCode  = VEr.LangCode;
    if (blank(vatcode)) then begin
      FEVIp.VEVatCode  = VEr.VEVATCode;
    end else begin
      FEVIp.VEVatCode  = vatcode;
    end;
    FEVIp.VATNr  = VEr.VATNr;
    FEVIp.SortCode  = VEr.SortCode;
    FEVIp.SalesGroup = VEr.SalesGroup;
    FEVIp.SalesMan = VEr.SalesMan;
    FEVIp.ExportFlag = VEr.ExportFlag;
    if (nonblank(VEr.AccCost)) then begin
      ClearRow(FEVIp,FEVIrw,1);
      FEVIrw.AccNumber = VEr.AccCost;
      MatRowPut(FEVIp,0,FEVIrw);
      FEAPAccName(FEVIp,0,false);
    end;
    vewarn = VEr.VEWarnText1;
  end;
  RETURN;
END;

global
procedure FEVIVc_PasteVECode(var record FEVIVc FEVIp,var string vewarn,string vatcode)
BEGIN
  PasteVendInFEVI(FEVIp,vewarn,vatcode);
  RETURN;
END;

global
procedure FEVIVc_PasteAccNumber(var record FEVIVc FEVIp,Integer rownr)
BEGIN
  row FEVIVc virr;
  string 255 tstr,tstr2;

  tstr = USetStr(1023);
  MatRowGet(FEVIp,rownr,virr);   
  if ((blank(virr.Comment)) or (virr.Comment==tstr)) then begin
    if (FEAPAutoTrans(FEVIp,rownr)) then begin end;
    MatRowGet(FEVIp,rownr,virr);   
  end;
  if (blank(virr.Objects)) then begin
    PasteAccObj(virr.AccNumber,tstr);
    virr.Objects = tstr;
  end;
  if (virr.Comment==tstr) then begin
    FEAPAccName(FEVIp,rownr,false);
  end;
  FEVICalcVals(FEVIp);
  RETURN;
END;