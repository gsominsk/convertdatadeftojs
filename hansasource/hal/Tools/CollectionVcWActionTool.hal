external procedure RemoveOldPersObjects(string,var string);
external procedure GetUserObject(string,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure RemoveOldCustObjects(string,var string);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure SetSalesMan(var string,string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure CollectionMultiLineText(record CollectionVc,record INVc,string,Integer);

procedure GetRentINNameStr(record RentINVc RentINr,string langcod2,var string comment)
begin
  row RentINVc RentINrw;
  Integer rwcnt,i;

  comment = RentINr.Name;
  rwcnt = MatRowCnt(RentINr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentINr,1,RentINrw);
    if (RentINrw.LangCode==langcod2) then begin
      comment = RentINrw.Text;
    end;
  end;
  return;
end;

function Boolean PasteCollectionItemAndSerial(record CollectionVc Collectionr,Integer rownr,var string inwarning)
begin
  record INVc INr;
  record PUVc PUr;
  record RentINVc RentINr;
  record CostAccBlock CostAccRec;
  row PUVc PUrw;
  row CollectionVc Collectionrw;
  string 255 tstr;
  Boolean res;
  Integer rwcnt,i;
  string 20 loc2;
  val totval;
  Boolean rentinf;

  res = false;
  MatRowGet(Collectionr,rownr,Collectionrw);
  if (nonblank(Collectionrw.SerialNr)) then begin
    RentINr.Code = Collectionrw.ArtCode;
    RentINr.SerialNr = Collectionrw.SerialNr;
    rentinf = ReadFirstMain(RentINr,2,true);
    if ((rentinf==false) and (blank(Collectionrw.ArtCode))) then begin
      RentINr.SerialNr = Collectionrw.SerialNr;
      rentinf = ReadFirstKey("SerialNr",RentINr,1,true);
      if (rentinf) then begin
        Collectionrw.ArtCode = RentINr.Code;
        Collectionrw.Quant = 1;
      end;
    end;
    if (rentinf) then begin
      GetRentINNameStr(RentINr,Collectionr.LangCode,tstr);
      Collectionrw.Spec = tstr;
      MatRowPut(Collectionr,rownr,Collectionrw);
      res = true;
    end;
  end;
  if (res==false) then begin
    INr.Code = Collectionrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemNameStr(1,tstr,Collectionr.LangCode,INr.Name,INr.Code)) then begin end;
      Collectionrw.Spec = tstr;
      MatRowPut(Collectionr,rownr,Collectionrw);
      res = true;
      if (INr.ExplodeRec==0) then begin
        CollectionMultiLineText(Collectionr,INr,Collectionr.LangCode,rownr);
      end;
      inwarning = INr.WarnText1;
    end;
  end;
  PasteCollectionItemAndSerial = res;
  return;
end;

global
function Boolean CollectionVc_PasteArtCode(var record CollectionVc Collectionr,Integer rownr,var string inwarning)
BEGIN
  Boolean res;
  
  res = PasteCollectionItemAndSerial(Collectionr,rownr,inwarning);
  CollectionVc_PasteArtCode = res;
  return;
end;

global
function Boolean CollectionVc_PasteSerialNr(var record CollectionVc Collectionr,Integer rownr)
BEGIN
  string 200 warning;
  Boolean res;
  
  res = PasteCollectionItemAndSerial(Collectionr,rownr,warning);
  CollectionVc_PasteSerialNr = res;
  RETURN;
END;

global
function Boolean PasteCust2InCollection(var record CollectionVc Collectionr,Boolean updatall,var string warntext)
BEGIN
  Boolean found;
  record CUVc CUr;
  record INVc INr;
  val x,pr,bal,limit;
  string 255 tstr;
  Boolean limitdaysf;

  CUr.Code = Collectionr.CustCode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0,limitdaysf)) then begin
    found = true;
    Collectionr.Addr0 = CUr.Name;
    Collectionr.ClientContact = CUr.Person;
    SetSalesMan(tstr,CUr.SalesMan);
    Collectionr.SalesMan = tstr;
    Collectionr.LangCode = CUr.LangCode;
    Collectionr.ClientContact = CUr.Person;
    if (nonblank(CUr.DelAddr0)) then begin
      Collectionr.Addr0 = CUr.Name;
      Collectionr.Addr1 = CUr.DelAddr0;
      Collectionr.Addr2 = CUr.DelAddr1;
      Collectionr.Addr3 = CUr.DelAddr2;
      Collectionr.DelAddr3 = CUr.DelAddr3;
      Collectionr.DelAddr4 = CUr.DelAddr4;
    end else begin
      Collectionr.Addr0 = CUr.Name;
      Collectionr.Addr1 = CUr.InvAddr0;
      Collectionr.Addr2 = CUr.InvAddr1;
      Collectionr.Addr3 = CUr.InvAddr2;
      Collectionr.DelAddr3 = CUr.InvAddr3;
      Collectionr.DelAddr4 = CUr.InvAddr4;
    end;
    if (updatall) then begin
//      CollectionSumup(Collectionr);
      if (nonblank(CUr.WarnText1)) then begin
        warntext = CUr.WarnText1;
      end;
    end;
  end;
  PasteCust2InCollection = found;
  RETURN;
END;

global
function Boolean PasteCustInAgreement(var record AgreementVc Agreementp,string efstr,Boolean updatall,var string warntext)
BEGIN
  Boolean found;
  record CUVc CUr;
  record INVc INr;
  val x,pr,bal,limit;
  val s0,s1,s2,s3,s4,t;
  val fr,to1,to2,br1,br2;
  record FreightBlock FreightRec;
  string 255 tstr,tstr2;
  string 5 crncy;
  record GeneralOptionBlock GenOptRec;
  Boolean limitdaysf;
  Time blankt;

  BlockLoad(GenOptRec);
  if ((efstr!=Agreementp.CustCode) and (nonblank(efstr))) then begin
    tstr = Agreementp.Objects;
    RemoveOldCustObjects(efstr,Agreementp.Objects);
    if (Agreementp.Objects!=tstr) then begin
      found = true;
    end;
  end;
  CUr.Code = Agreementp.CustCode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0,limitdaysf)) then begin
    found = true;
    Agreementp.Addr0 = CUr.Name;
    Agreementp.Addr1 = CUr.InvAddr0;
    Agreementp.Addr2 = CUr.InvAddr1;
    Agreementp.Addr3 = CUr.InvAddr2;
    Agreementp.InvAddr3 = CUr.InvAddr3;
    Agreementp.InvAddr4 = CUr.InvAddr4;
    Agreementp.ClientContact = CUr.Person;
    Agreementp.CustCat = CUr.CustCat;
    Agreementp.Objects = AddObjectToObjectList(Agreementp.Objects,CUr.Objects);
    if (nonblank(CUr.CurncyCode)) then begin
      Agreementp.CurncyCode = CUr.CurncyCode;
      crncy = Agreementp.CurncyCode;
      GetFullCurncyRate(crncy,Agreementp.TransDate,fr,to1,to2,br1,br2);
      Agreementp.CurncyCode = crncy;
      Agreementp.FrRate = fr;
      Agreementp.ToRateB1 = to1; 
      Agreementp.ToRateB2 = to2;
      Agreementp.BaseRate1 = br1;
      Agreementp.BaseRate2 = br2;
    end;
    SetSalesMan(tstr,CUr.SalesMan);
    tstr2 = Agreementp.Objects;
    RemoveOldPersObjects(Agreementp.SalesMan,tstr2);
    Agreementp.Objects = tstr2;
    Agreementp.SalesMan = tstr;
    GetUserObject(Agreementp.SalesMan,tstr);    
    Agreementp.Objects = AddObjectToObjectList(Agreementp.Objects,tstr);
    Agreementp.LangCode = CUr.LangCode;
    Agreementp.ShipDeal = CUr.ShipDeal;
    Agreementp.ShipMode = CUr.ShipMode;
    Agreementp.PriceList = CUr.PLCode;
    Agreementp.RebCode = CUr.RebCode;
    Agreementp.CustVATCode = CUr.VATCode;
    tstr = Agreementp.PriceList;
    GetPriceList(Agreementp.CustCat,Agreementp.TransDate,blankt,tstr,Agreementp.InclVAT);
    Agreementp.PriceList = tstr;
    Agreementp.Sorting = CUr.Sorting;
    if (nonblank(CUr.DelAddr0)) then begin
      Agreementp.ShipAddr0 = CUr.Name;
      Agreementp.ShipAddr1 = CUr.DelAddr0;
      Agreementp.ShipAddr2 = CUr.DelAddr1;
      Agreementp.ShipAddr3 = CUr.DelAddr2;
      Agreementp.DelAddr3 = CUr.DelAddr3;
      Agreementp.DelAddr4 = CUr.DelAddr4;
    end else begin
      Agreementp.ShipAddr0 = "";
      Agreementp.ShipAddr1 = "";
      Agreementp.ShipAddr2 = "";
      Agreementp.ShipAddr3 = "";
      Agreementp.DelAddr3 = "";
      Agreementp.DelAddr4 = "";
    end;
    Agreementp.VATNr = CUr.VATNr;
    Agreementp.Phone = CUr.Phone;
    Agreementp.Fax = CUr.Fax;
    Agreementp.eMail = CUr.eMail;
    Agreementp.ExportFlag = CUr.ExportFlag;
    Agreementp.PayDeal = CUr.PayDeal;
    Agreementp.InvComment = CUr.OrderComment;
    if (updatall) then begin
      Agreementp.InvoiceToCode = CUr.InvoiceToCode;    
//      AgreementSumup(Agreementp,s0,s1,s2,s3,s4);
//      Agreementp.Sum0 = s0;
//      Agreementp.Sum1 = s1;
//      Agreementp.Sum2 = s2;
//      Agreementp.Sum3 = s3;
//      Agreementp.Sum4 = s4;
      if (nonblank(CUr.WarnText1)) then begin
        warntext = CUr.WarnText1;
      end;
    end;
  end;
  PasteCustInAgreement = found;
  RETURN;
END;

