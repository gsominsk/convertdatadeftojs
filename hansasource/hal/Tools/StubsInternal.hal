global
procedure InternalInitTXIdleTasks()
begin
  return;
end;

global
updating procedure SendValidationEmail(record EmailValidationVc EVr)
begin
  return;
end;

global
function string 255 SamplePriceListFromCurrency(string cuntrycode)
begin
  SamplePriceListFromCurrency = "";
  return;
end;

global
procedure ShowSubscriptionsPossibleInLine_SubINPackages(string type,record WebNGStructVc WSr,record CUVc CUr)
begin
  return;
end;

global
procedure ShowActiveSubscriptionsViewSubsINPackages(string type,record WebNGStructVc WSr,record CUVc CUr)
begin
  return;
end;

global
updating function Integer RedeemIntStdActivCode(string uuids,string custcode)
begin 
  return;
end;

global
procedure ShowSubscriptionsShoppingBasket(record WebNGStructVc WSr,record CUVc CUr)
begin
  return;
end;

global
updating function Boolean DoSubscriptionTransMn(var record RcVc RepSpec)
begin
end;

global
updating function Boolean CreateSubscriptionsFromShoppingBasket(string paymethod,string langcode)
begin
end;

global
procedure WebSubscriptionPriceList()
begin
end;

global
updating procedure DoUpdateSubscriptionFromSubINPackages(Longint achange,string subinpackcode,record CUVc CUr)
begin
end;

global
procedure ShowWebWatchpointIssue()
begin
end;

global
procedure CheckTimedUserLogAction()
begin
end;

global
procedure SubscriptionsApp(record WebNGStructVc WSr,string path)
begin
end;

global
updating procedure ShopRedeemIntStdActivCode2(string paysessionid,string activationcode,string activationcodecustname)
begin
end;

global
updating procedure ShopRedeemIntStdActivCode(string paysessionid,string activationcode)
begin
end;

global
updating procedure SubscribeWithCard2(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear,
                                          string street,string city,string state,string postalcode,string countrycode,string email,string phone,string successlink,string sourcepath)
begin
end;

global
updating procedure SubscribeWithCard(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                          string expirymonth,string expiryyear,
                                          string street,string city,string state,string postalcode,string countrycode,string email,string phone)
begin
end;

global
procedure PasteCustInSubscription(var record SubscriptionVc Sr)
begin
end;

global
procedure PasteSubItemInSubscription(var record SubscriptionVc Sr)
begin
end;

global
procedure MkplSetCurrentCustomerCompany(string custcode)
begin
end;

global
procedure StdIdAccessList(string email,string servicename,var array record StdIdAccessVc SIAarr)
begin
end;

global
procedure MyServerApp2(record WebNGStructVc WSr,string mpath)
begin
return;
end;

global
procedure ShowMyServerAdminMenu(record WebNGElementVc WEr)
begin
return;
end;

global
procedure LaunchHost(record HostingConfigurationVc HCr,record RcVc RepSpec,Integer hptype)
begin
end;

global
function string 255 HansaVersionLClassVersionColumn(var record HansaVersionVc HVr)
begin

  HansaVersionLClassVersionColumn = "";
  return;
end;

global
updating procedure CreateNode(string node_name,record HostingConfigurationVc HCr,Integer hptype,Integer max_capacity,var record CloudNodeVc CNr)
begin
end;

global
procedure DoFileListReload(uuid ident)
begin
end;

global
function Integer TerminateHost(record CloudNodeVc CNr,Boolean aflag,var string astring)
begin
  astring = "";
  TerminateHost = 0;
  return;
end;

global
function Boolean TestServerNotResponding(string server_ip,LongInt server_port)
begin
  TestServerNotResponding = false;
  return;
end;

global
updating procedure CreateStdIDSystemLoginRecord(record HWIDUserVc HWIDUserr,string service,UUID sessionUUID,UUID userUUID,string ServerDBID,string ClientDBID,string email,string usercode,Integer regincountry,Integer LiveFlag,Integer DemoFlag,string product_identifier,Integer vatlaw,Integer paidstat,Integer os)
begin
  return;
end;

global
procedure StdIdAccessList_ServerAll(uuid serverid,var array record StdIdAccessVc SIAarr)
begin
  return;
end;


global
procedure StdIdAccessList2(string email,Integer servicetype,var array record StdIdAccessVc SIAarr)
begin
  return;
end;

global
procedure StdIdAccessListAll(string email,var array record StdIdAccessVc SIAarr)
begin
  return;
end;

global
procedure OpenServerSessionForFileDownload(string email,string fn,string filepath,var uuid fusess,var LongInt fustat)
begin
  return;
end;

global
procedure GetCountryFromExternalIP(var string country,var string externalip)
begin
end;

global
procedure RegisterDownloadDataSession(UUID tuuid,vector string vData)
begin

  return;
end;

global
function string 255 GetDownloadsServerAddress()
begin

  return;
end;

global
procedure UpdateCustomerOnCC(record CUVc CUr,record CUVc CU2r,Boolean insertf)
begin
  return;
end;

global
updating procedure ClearMyStandardSessions()
begin
  return;
end;

global
function Boolean IsTestBuildVersion(string vercode)
begin
  IsTestBuildVersion = false;
  return;
end;

global
procedure PrintMarketplaceSubscriptions(record CUVc CUr)
begin
  return;
end;

global
procedure ShowSingleMPItem(record WebNGElementVc WEr)
begin
  return;
end;

global
procedure ShowIBMLoginWindow()
begin
  return;
end;

global
updating procedure CallService_ConfirmSupplierEInvoiceReceived(LongInt nr)
begin
  return;
end;

global
procedure CloudGetAutomatedSales(string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string functiontag,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesOnLogin(string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesConfirmation(string progvers,string verbld,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,string functiontag,string subnr,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSales2(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string functiontag,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSales3(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string functiontag,string functiontrigger,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesOnLogin2(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesConfirmation2(string bldprodcode,string progvers,string verbld,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,string functiontag,string subnr,var Area rslta)
begin
  return;
end;

global
procedure CloudGetAutomatedSalesConfirmation3(string bldprodcode,string progvers,string verbld,Integer storetype,Integer guityp,Integer trigger,string cucode,string curuser,string standardid,string langcode,string functiontag,string functiontrigger,string subnr,var Area rslta)
begin
  return;
end;

global
function Boolean WebUploadFileToArea(var string filename,var area rfilearea)
begin

  WebUploadFileToArea = false;
  return;
end;

global
function string 255 LetVcDoReplaceTokenResetPassword(record RCVc RepSpec,string field)
begin
  LetVcDoReplaceTokenResetPassword  = "";
  
  return;
end;

global
function Boolean GetiTunesPackageId(string lang,string prod,var string appid)
begin
  GetiTunesPackageId = false;
  return;
end;

global
updating procedure ResetPasswordByMail(string email,var Integer result)
begin
  return;
end;

global
procedure CloudGetExpiringLicenses(string bldprodcode,string progvers,string verbld,string bndlid,Integer storetype,Integer guityp,Integer trigger,string cucode,string user,string standardid,string langcode,var Area result)
begin
  return;
end;

global
procedure GetPartnerCompAccessList(var array Integer comparr,var array string partnerarr,string partner)
begin
return;
end;

global
procedure GetPartnerCustomerList(Integer compno,string partnercode,var array string aCustList)
begin
return;
end;

global
updating procedure CreateLoginSessionToken(UUID session,string email,UUID serverid,Integer company,string custcode,Longint contract,string partner,var UUID token)
begin

  return;
end;

global
procedure GetPartnerDetails(Longint partner,var string partnerno,var string partnername,var string partnercustcode,var string partnercompno)
begin

  return;
end;

global
updating procedure UpdateWebAppRelease(Integer release)
begin
  return;
end;

global
function Integer GetWebAppReleaseType(record WebAvailableApp2Vc WAAr)
begin

  GetWebAppReleaseType = -1;
  return;
end;

global
procedure GetDownloadsServer(var string url,var string key)
begin
  return;
end;

global
procedure StartRemoteFileDownload(UUID serverid,string email,string addr,string key,string filepath,string filename)
begin

  return;
end;

global
updating procedure SubscribeWithCard3(string paysessionid,string cardfirstname,string cardlastname,string cardnumber,string cardtype,string cardcvc,
                                      string expirymonth,string expiryyear,
                                      string street,string city,string state,string postalcode,string countrycode,string email,string phone,string successlink,string sourcepath,
                                      string subscribetosubinpackage)
begin

  return;
end;

global
procedure HansaWorldIDResetPassword()
begin
  return;
end;

global
procedure HansaWorldRegisterApp()
begin
  return;
end;

global
procedure ArabMarketplaceMirroring()
begin
  return;
end;

global
procedure MigrationRegisterApp(record WebNGStructVc WSr,string path)
begin
  return;
end;

global
function Boolean ReadUserKey(var LongInt pos,var string username,var string key)
begin
  ReadUserKey = false;
  return;
end;

global
procedure SetMyStandardUserAccess(UUID serverid,string email,string custcode,Boolean setf,var Integer res)
begin
  return;
end;
