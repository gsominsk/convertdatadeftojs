forward function Boolean PUDchrsum(record PUVc,Integer);
external function Boolean PUDchrsum(record PUVc,Integer);
external function string 255 NextSerialNumber(string,string,record SerNrTrackBlock);
external procedure RowCalculateTaxMatrix_PUVc(var record PUVc,Integer,row PUVc,Integer);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external function roundmode DefaultRoundMode();
external procedure PUCalcPerc(val,string,var val);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure MulVATIVExecute(string,val,var val,var val,Integer,Integer,roundmode);
external function Boolean CalculateOPPrepaymentAvgRate(record PUVc,LongInt,val,var val,var val,var val,var val,var val);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);
external function Boolean TestWarnFutureDate(Boolean,Date);
external procedure PURecalcCost(var record PUVc);
external function roundmode SetRoundModeD(Integer);
external procedure RefillPURows(var record PUVc);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalcExtra(val,string,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Integer GetPO(LongInt,var record POVc,string,Boolean);
external procedure FindPUStockAcc(string,record CostAccBlock,string,string,string,record INVc,Integer,var string,var string,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure MulPIFactor(val,val,var val);
external procedure PUSumUp(var record PUVc);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external procedure CalculatePURowSum(val,val,string,var val,val,
                                     val,val,val,val,val,
                                     string,var val,Boolean,string,
                                     val,val,val,val,val);
external function Integer ArtCodePrimaryCostModel(string);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);
external function Boolean GetItemPurchasePriceDiscount(string,string,Date,string,string,val,string,string,string,string,Integer,Boolean,val,val,val,val,val,
         var record INVc,var record PIVc,var Boolean,var val,var string,var val,var string,var string,var Boolean,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function roundmode GetCostRoundMode(record RoundBlock);
external function string 255 FindINObjects(string,string);
external procedure DivPIFactor(val,val,var val);

global
function Boolean PUCheckifOverstrikeAllowed(record PUVc PUr,Integer rownr)
begin
  Boolean res;
  record MainStockBlock MainStockRec;
  row PUVc PUrw;
  string 10 location;
  record ItemHistVc IHr;
  Boolean noovstf;
  Integer primary;

  BlockLoad(MainStockRec);
  location = PUr.Location;
  if (blank(location)) then begin
    location = MainStockRec.MainStock;
  end;
  noovstf = false;
  MatRowGet(PUr,rownr,PUrw);
  primary = ArtCodePrimaryCostModel(PUrw.ArtCode);  

  switch (primary) begin
    case 0:
    case 9:
    case 3:
      res = true;
      IHr.FileName = "PUVc";
      IHr.ArtCode = PUrw.ArtCode;
      if (ReadFirstKey("FNArtCode",IHr,2,true)) begin
        noovstf = true;
      end;
    otherwise
      res = true;
      IHr.FileName = "PUVc";
      IHr.TransNr = PUr.SerNr;
      IHr.Row = rownr;
      if (ReadFirstKey("FNTransNr",IHr,3,true)) begin
        if (IHr.RemQty!=PUrw.Quant) then begin
          noovstf = true;
        end;
      end else begin
        noovstf = true;
      end;
  end;
  if (noovstf) then begin
    res = false;
  end;
  PUCheckifOverstrikeAllowed = res;
  return;
end;

global
procedure PUVc_PasteLocation(var record PUVc PUp,Integer rownr)
BEGIN
  row PUVc PUrw;
  Integer i,rwcnt;
  string 255 stockacc,purchacc;
  record INVc INr;
  record CostAccBlock CAb;
  
  BlockLoad(CAb);    
  if (rownr<0) then begin
    rwcnt = MatRowCnt(PUp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PUp,i,PUrw);
      ReadFirstItem(PUrw.ArtCode,INr,true,false);
      if (blank(PUrw.Location)) then begin
        FindPUStockAcc(PUp.VECode,CAb,PUrw.CostAcc,PUrw.CredAcc,PUp.Location,INr,PUrw.StockType,stockacc,purchacc,true);
      end else begin
        FindPUStockAcc(PUp.VECode,CAb,PUrw.CostAcc,PUrw.CredAcc,PUrw.Location,INr,PUrw.StockType,stockacc,purchacc,true);
      end;
      PUrw.CostAcc = stockacc;
      PUrw.CredAcc = purchacc;
      MatRowPut(PUp,i,PUrw);
    end;
  end else begin
    MatRowGet(PUp,rownr,PUrw);
    PUrw.CredAcc = "";
    ReadFirstItem(PUrw.ArtCode,INr,true,false);
    if (blank(PUrw.Location)) then begin
      FindPUStockAcc(PUp.VECode,CAb,PUrw.CostAcc,PUrw.CredAcc,PUp.Location,INr,PUrw.StockType,stockacc,purchacc,true);
    end else begin
      FindPUStockAcc(PUp.VECode,CAb,PUrw.CostAcc,PUrw.CredAcc,PUrw.Location,INr,PUrw.StockType,stockacc,purchacc,true);
    end;
    PUrw.CostAcc = stockacc;
    PUrw.CredAcc = purchacc;
    MatRowPut(PUp,rownr,PUrw);
  end;
  return;
end;

global
procedure PUDClassSumEFAfterRemote(var record PUVc PUr,Integer rownr)
begin
  row PUVc PUrw;
  val p,s,up;
  val vat,t1;
  Boolean chsum;

  MatRowGet(PUr,rownr,PUrw);    
  s = PUrw.Sum;
  CalculatePURowSum(PUrw.Quant,up,PUrw.Extra,p,PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                    PUrw.CustomsCost,s,true,PUr.CurncyCode,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
  PUrw.CostPrice = p;
  PUrw.Sum = s;
  PUrw.UPrice = DivRateToBase1(PUr.CurncyCode,PUrw.CostPrice,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
  if (PUr.InclVAT!=0) then begin
    MulVATIV(PUrw.VATCode,p,vat,t1,PUr.InclVAT,0);
    PUrw.CostPrice = PUrw.CostPrice - vat - t1;
  end;    
  chsum = true;
  MatRowPut(PUr,rownr,PUrw);    
  PUDchrsum(PUr,rownr);
  if (chsum) then begin
    PUSumUp(PUr);
  end;
  RETURN;
END;

global  
procedure PUVc_PasteVEQuant(var record PuVc PUr,Integer rownr)
begin
  val t,p;
  row PUVc PUrw;
  
  MatRowGet(PUr,rownr,PUrw);
  MulPIFactor(PUrw.VEQuant,PUrw.PIFactor,t);
  PUrw.Quant = t;    
  CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                    PUrw.CustomsCost,p,false,PUr.CurncyCode,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
  PUrw.Sum = p;
  MatRowPut(PUr,rownr,PUrw);
  PUSumup(PUr);
  return;
end;

global  
procedure PUVc_PasteStockType(var record PUVc PUr,Integer rownr)
begin
  record AccBlock Ab;
  row PUVc PUrw;
  record INVc INr;
  Boolean itemfound;
  string 255 tstr,stockacc,purchacc;
  record CostAccBlock CAb;
  
  if (rownr>=0) then begin
    BlockLoad(Ab);
    BlockLoad(CAb);    
    MatRowGet(PUr,rownr,PUrw);
    itemfound = ReadFirstItem(PUrw.ArtCode,INr,true,false);
    PUrw.CostAcc = "";
    PUrw.CredAcc = "";    
    if (blank(PUrw.Location)) then begin
      FindPUStockAcc(PUr.VECode,CAb,PUrw.CostAcc,PUrw.CredAcc,PUr.Location,INr,PUrw.StockType,stockacc,purchacc,true);
    end else begin
      FindPUStockAcc(PUr.VECode,CAb,PUrw.CostAcc,PUrw.CredAcc,PUrw.Location,INr,PUrw.StockType,stockacc,purchacc,true);
    end;
    PUrw.CostAcc = stockacc;
    PUrw.CredAcc = purchacc;
    MatRowPut(PUr,rownr,PUrw);
  end;
  return;
end;

global
function Boolean PUVc_PastePosCode(string poscode,string artcode,var string deflocarea)
BEGIN
  Boolean res;
  record PosVc Posr;
  record INVc INr;

  res = true;
  if (ReadFirstItem(artcode,INr,true,true)) then begin
    if (nonblank(INr.LocArea)) then begin
      deflocarea = INr.LocArea;
      Posr.Code = poscode;
      if (ReadFirstMain(Posr,1,true)) then begin
        if (Posr.LocArea!=INr.LocArea) then begin
          res = false;
        end;
      end;
    end;
  end;
  PUVc_PastePosCode = res;
  RETURN;
END;

global
function Boolean PUVc_PasteToPosCode(var record PUVc PUr,string poscode,string artcode,val quant,Integer rownr,var string deflocarea)
BEGIN
  Boolean res;
  record PosVc Posr;
  record INVc INr;
  row PUVc nextPUrw;
  record LocationVc Locr;
  record MainStockBlock MainStock;
  Boolean testf;

  res = true;
  if (ReadFirstItem(artcode,INr,true,true)) then begin
    if (nonblank(INr.LocArea)) then begin
      deflocarea = INr.LocArea;
      Posr.Code = poscode;
      if (ReadFirstMain(Posr,1,true)) then begin
        if (Posr.LocArea!=INr.LocArea) then begin
          res = false;
        end;
      end;
    end;
    if (INr.QtyonPallet>0) and (nonblank(INr.DefPalletItem)) then begin
      BlockLoad(MainStock);
      Locr.Code = PUr.Location;
      if (blank(Locr.Code)) then begin
        Locr.Code = MainStock.MainStock;
      end;
      ReadFirstMain(Locr,1,true);
      testf = false;
      if (Locr.RequirePos!=0) then begin testf = true; end;
      if (testf) then begin//quant==INr.QtyonPallet
        if ((rownr+1)<MatRowCnt(PUr)) then begin
          MatRowGet(PUr,rownr+1,nextPUrw);
          if (nextPUrw.ArtCode==INr.DefPalletItem) then begin
            nextPUrw.ToPosCode = poscode;
            MatRowPut(PUr,rownr+1,nextPUrw);
          end;
        end;
      end;
    end;
  end;
LPUVc_PasteToPosCode:;  
  PUVc_PasteToPosCode = res;
  RETURN;
END;

global
function Boolean PUVc_PasteVECode(var record PUVc PUr)      
BEGIN
  Boolean res;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;
      
  VEr.Code = PUr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
    PUr.VEName = VEr.Name;
    PUr.Objects = VEr.VEObjects;
    PUr.CurncyCode = VEr.VECurncyCode;
    curcode = PUr.CurncyCode;
    GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
    PUr.CurncyCode = curcode;
    PUr.FrRate = fr;
    PUr.ToRateB1 = to1; 
    PUr.ToRateB2 = to2;
    PUr.BaseRate1 = br1;
    PUr.BaseRate2 = br2;    
    PUr.ExportFlag = VEr.ExportFlag;
    PUr.VEVATCode = VEr.VEVATCode;
    PUr.LangCode = VEr.LangCode;
    res = true;
  end;
  PUVc_PasteVECode = res;    
  RETURN;
END;

function Boolean CheckIfOnePO(record PUVc PUp,LongInt POSerNr)
BEGIN
  Integer i,rwcnt;
  row PUVc PUrw;
  Boolean res;
  
  res = true;
  rwcnt = MatRowCnt(PUp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUp,i,PUrw);
    if (PUrw.PONr!=POSerNr) then begin
      res = false;
      goto LCheckIfOnePO;
    end;
  end;
LCheckIfOnePO:;  
  CheckIfOnePO = res;
  RETURN;
END;

function Boolean CopyPOrwToPUrw(record POVc POp,record PUVc PUp,string VECode,row POVc POrwp,row PUVc PUrwp)
BEGIN
  row POVc POrw;
  record INVc INr;
  record PIVc PIr;
  Boolean res;
  val rem,p,t,pv,sv,v1,v2,totqty;
  string 255 tstr,extra;
  Integer i,rwcnt;
  
  rem = POrwp.Quant - POrwp.Shipd1;
  if (blank(PUp.VECode)) then begin
    PUp.VECode = POp.VECode;
    if (PUVc_PasteVECode(PUp)) then begin end;
    PUp.Comment = POp.Comment;
    PUp.CurncyCode = POp.CurncyCode;
    PUp.FrRate = POp.FrRate;
    PUp.ToRateB1 = POp.ToRateB1;
    PUp.ToRateB2 = POp.ToRateB2;
    PUp.BaseRate1 = POp.BaseRate1;
    PUp.BaseRate2 = POp.BaseRate2;
    if (((POp.BaseRate1!=0) and (POp.BaseRate2!=0)) or
       ((POp.ToRateB1!=0) or (POp.ToRateB2!=0))) then begin
      PUp.FrRate = POp.FrRate;
      PUp.ToRateB1 = POp.ToRateB1;
      PUp.ToRateB2 = POp.ToRateB2;
      PUp.BaseRate1 = POp.BaseRate1;
      PUp.BaseRate2 = POp.BaseRate2;
    end;    
  end;
  if (CheckIfOnePO(PUp,POp.SerNr)) then begin
    PUp.PONr = POp.SerNr;
  end else begin
    PUp.PONr = -1;
  end;
  if (rem>0) then begin
    rwcnt = MatRowCnt(POp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POp,i,POrw);
      totqty = totqty + POrw.Quant;
    end;
    CalcExtra(POp.Sum1,POp.CostPerUnit,v2);
    v2 = v2/totqty;
    PUrwp.ArtCode = POrwp.ArtCode;
    INr.Code = PUrwp.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin end;        
    PUrwp.UnitCode = POrwp.UnitCode;
    PUrwp.Spec = POrwp.Spec;
    PUrwp.Objects = POrwp.Objects;
    PUrwp.VATCode = POrwp.VATCode;
    PUrwp.PIFactor = POrwp.PIFactor;
    PUrwp.VEUnit = POrwp.VEUnit;
    PUrwp.VEQuant = POrwp.VEQuant;
    PUrwp.Quant = rem;
    p = POrwp.Price;
    if (PUrwp.PIFactor!=0) then begin
      p = p/PUrwp.PIFactor;
    end;
    CalcSum(1,p,0,POrwp.vRebate,t,0);
    PUrwp.UPrice = t;
    PUrwp.Sum = POrwp.Sum;
    PUrwp.RowCost1 = POrwp.RowCost1;
    PUrwp.RowCost2 = POrwp.RowCost2;
    PUrwp.RowCost3 = POrwp.RowCost3;
    PUrwp.RowCost4 = POrwp.RowCost4;
    PUrwp.RowCost5 = POrwp.RowCost5;
    PUrwp.ShipCost = POrwp.ShipCost;
    PUrwp.CustomsCost = POrwp.CustomsCost;
    
    PIr.ItemCode = PUrwp.ArtCode;   
    if (blank(PUrwp.CustomsCost)) then begin
      PIr.VECode = VECode;
      PIr.VEItemCode = POrwp.VEArtCode;
      if (ReadFirstMain(PIr,3,true)) then begin
        extra = PIr.PurchaseCost;
      end;
      if (nonblank(PUp.CurncyCode)) then begin
        t = MulRateToBase1(PUp.CurncyCode,PUrwp.UPrice,PUp.FrRate,PUp.ToRateB1,PUp.ToRateB2,PUp.BaseRate1,PUp.BaseRate2,SetRoundModeD(5));
        CalcExtra(t,extra,v1);
      end else begin
        CalcExtra(PUrwp.UPrice,extra,v1);
      end;
      PUrwp.CustomsCost = Round(v1,SetRoundModeD(5));
    end;
    
    if (blank(PUrwp.ShipCost)) then begin
      PUrwp.ShipCost = Round(v2,SetRoundModeD(5));
    end;
    PUrwp.Extra = INr.ExtraCost;
    PUrwp.CostPrice = blankval;
    PUCalcCostPrice(PUrwp.ArtCode,PUrwp.UPrice,PUp.InclVAT,PUp.NoTAXonVAT,PUrwp.Extra,PUp.CurncyCode,
                    PUp.FrRate,PUp.ToRateB1,PUp.ToRateB2,PUp.BaseRate1,PUp.BaseRate2,
                    PUrwp.ShipCost,PUrwp.RowCost1,PUrwp.RowCost2,PUrwp.RowCost3,PUrwp.RowCost4,PUrwp.RowCost5,
                    PUrwp.CustomsCost,pv,PUrwp.Quant,sv,PUrwp.VATCode,PUp.ExportFlag);
    PUrwp.CostPrice = pv;                                        
    PUrwp.Sum = sv;
    PUrwp.UnitXval = INr.Width;
    PUrwp.UnitYval = INr.Height;
    PUrwp.UnitZval = INr.Depth;
    PUrwp.Coefficient = INr.UnitCoefficient;
    res = true;
  end;
  CopyPOrwToPUrw = res;
  RETURN;
END;

// We have a function called PastePOInPU that are not connected, I renamed this to PastePOInPUClient.
// Since they probably do similar things, they should be calling a common function
function Integer PastePOInPUClient(record PUVc PUp,record POVc POp,LongInt PONr,Integer OrderRow,Integer rownr)
BEGIN
  row POVc POrw;
  row PUVc PUrw;
  Integer porwcnt,purowcnt;
  Integer i,currow;
  Boolean firstf;
  Integer retval,OrdRow;
  record MainStockBlock MSb;
  record POSettingBlock POSetb;
  val remn;
  
  if (OrderRow>0) then begin
    OrdRow = OrderRow  - 1;
  end else begin
    OrdRow = OrderRow;
  end;
  firstf = true;
  retval = GetPO(PONr,POp,PUp.VECode,false);
  if (retval==0) then begin
    BlockLoad(MSb);
    BlockLoad(POSetb);
    porwcnt = MatRowCnt(POp);
    purowcnt = MatRowCnt(PUp);
    currow = rownr;
    if (OrdRow==-1) then begin
      if (((porwcnt+(purowcnt-1)) > 199) or (OrdRow >=porwcnt)) then begin
        retval = 1;
        goto LPastePOInPU;
      end;
      for (i=0;i<porwcnt;i=i+1) begin
        ClearRow(PUp,PUrw,1);
        MatRowGet(POp,i,POrw);
        PUrw.PONr = POp.SerNr;
        PUrw.OrdRow = i;
        if (CopyPOrwToPUrw(POp,PUp,PUp.VECode,POrw,PUrw)) then begin
          if (firstf) then begin
            firstf = false;
            MatRowPut(PUp,currow,PUrw);
            currow = currow + 1;
          end else begin
            MatRowInsert(PUp,currow,PUrw);
            currow = currow + 1;
          end;
        end else begin
//          retval = 5;//just skip received rows
        end;
      end;
    end else begin
      if (OrdRow>=porwcnt) then begin
        retval = 5;
        goto LPastePOInPU;
      end;  
      if (OrdRow<0) then begin
        retval = 5;
        goto LPastePOInPU;
      end;
      ClearRow(PUp,PUrw,1);
      MatRowGet(POp,OrdRow,POrw);
      PUrw.PONr = POp.SerNr;
      PUrw.OrdRow = OrdRow;
      if (CopyPOrwToPUrw(POp,PUp,PUp.VECode,POrw,PUrw)) then begin
        MatRowPut(PUp,currow,PUrw);
      end else begin
        retval = 5;
      end;
    end;
  end;
LPastePOInPU:;
  if (retval==0) then begin
    RefillPURows(PUp);
  end;
  PastePOInPUClient = retval;
  RETURN;
END;

global
function Integer PUVc_PasteOrdRow(var record PUVc PUp,Integer rownr,Integer wnst,Boolean changedf)
BEGIN
  row PUVc PUrw;
  record POVc POr;
  Integer retval;
  LongInt oldponr;
  Integer i,rwcnt;
  
  oldponr = PUp.PONr;
  MatRowGet(PUp,rownr,PUrw);
  if (changedf) then begin
    if (PUrw.OrdRow!=-1) then begin
      retval = PastePOInPUClient(PUp,POr,PUrw.PONr,PUrw.OrdRow,rownr);
      PUSumUp(PUp);
    end;
  end;
  if (wnst>0) then begin
    if (PUrw.OrdRow==-1) then begin
      if ((blank(PUrw.ArtCode)) and (blank(PUrw.Spec)) and (PUrw.PONr!=-1)) then begin
        retval = PastePOInPUClient(PUp,POr,PUrw.PONr,PUrw.OrdRow,rownr);
        PUSumUp(PUp);
      end;
    end;
  end;  
  if (PUp.PONr<=0) then begin
    if (oldponr>0) then begin
      rwcnt = MatRowCnt(PUp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUp,i,PUrw);
        if (PUrw.PONr<=0) then begin
          PUrw.PONr = oldponr;
          MatRowPut(PUp,i,PUrw);
        end;
      end;
    end;
  end;
  PUVc_PasteOrdRow = retval;
  RETURN;
END;

global
function Boolean BulkSerialNos_CalculateQuantityAndSerialNr(record SerNrTrackBlock SNrb,Boolean calcqtyf,string artcode,var string aserialnr,var val qty)
begin
  Boolean res;
  string 255 firstserialnr,endserialnr,serialnr;
  val serqty;

  if (SNrb.BulkSerialNos!=0) then begin
    if (nonblank(aserialnr)) then begin
      if (calcqtyf) then begin
        if (InString(aserialnr,":")!=0) then begin
          qty = StringToLongInt(LastInRange(aserialnr,60)) - StringToLongInt(FirstInRange(aserialnr,60)) + 1;
        end;
      end;
      firstserialnr = FirstInRange(aserialnr,60);
      serialnr = firstserialnr;
      serqty = 1;
      while (nonblank(serialnr)) begin
        serialnr = NextSerialNumber(artcode,serialnr,SNrb);
        if (serqty>=qty) then begin serialnr = ""; end;
        if (nonblank(serialnr)) then begin
          serqty = serqty + 1;
          endserialnr = serialnr;
        end;
      end;
      if (firstserialnr!=endserialnr) then begin
        aserialnr = firstserialnr & ":" & endserialnr;
      end;
      res = true;
    end;
  end;
  BulkSerialNos_CalculateQuantityAndSerialNr = res;
  return;
end;

function Boolean SerialNrInSerialNr(string artcode,string testserialnr,string inserialnr)
begin
  Boolean res;
  string 255 serialnr;
  record SerNrTrackBlock SNrb;

  BlockLoad(SNrb);
  if (SNrb.BulkSerialNos!=0) then begin
    serialnr = FirstInRange(testserialnr,60);
    while (nonblank(serialnr)) begin
      if ((serialnr>=FirstInRange(inserialnr,60)) and (serialnr<=FirstInRange(inserialnr,60))) then begin
        res = true;
        goto LSerialNrInSerialNr;
      end;
      serialnr = NextSerialNumber(artcode,serialnr,SNrb);
      if (serialnr>LastInRange(testserialnr,60)) then begin
        serialnr = "";
      end;
    end;
  end else begin
    res = testserialnr==inserialnr;
  end;
LSerialNrInSerialNr:;
  SerialNrInSerialNr = res;
  return;
end;

global
function Integer PUVc_PasteSerialNr(record PUVc PUr,Integer rownr)
begin
  Integer res;
  row PUVc PU2rw;
  row PUVc PUrw;
  Integer i,rwcnt;
  record INVc INr;
  record SerNrTrackBlock SNrb;

  BlockLoad(SNrb);
  MatRowGet(PUr,rownr,PUrw);
  ReadFirstItem(PUrw.ArtCode,INr,true,false);
  if (nonblank(PUrw.ArtCode)) and (INr.SerNrf==1) then begin
    if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,true,PUrw.ArtCode,PUrw.SerialNr,PUrw.Quant)) then begin
      MatRowPut(PUr,rownr,PUrw);
      MatRowGet(PUr,rownr,PUrw);
    end;
    rwcnt = MatRowCnt(PUr);
    for (i=0;i<rwcnt;i=i+1) begin
      if (i!=rownr) then begin
        MatRowGet(PUr,i,PU2rw);
        if (PU2rw.ArtCode==PUrw.ArtCode and nonblank(PUrw.SerialNr)) then begin
          if (SerialNrInSerialNr(PUrw.ArtCode,PU2rw.SerialNr,PUrw.SerialNr)) or (SerialNrInSerialNr(PUrw.ArtCode,PUrw.SerialNr,PU2rw.SerialNr)) then begin
//          if (PU2rw.SerialNr==PUrw.SerialNr) then begin
            res = 1241;
            i = rwcnt;
          end;
        end;
      end;
    end;
  end;
  PUVc_PasteSerialNr = res;
  return;
end;

global
procedure PUVc_PasteTransDate(var record PUVc PUr,var Boolean datewarnf,var Boolean warnoldrecordsf,var Boolean warnfutdatef)
begin
  string 5 curcode;
  val fr,to1,to2,br1,br2;
  Boolean gotratef;
  record POVc POr;

  datewarnf = DateWarned(PUr.TransDate,"PUVc");
  warnoldrecordsf = WarnOldRecords(PUr.TransDate,"PUVc",PUr.SerNr);
  warnfutdatef = TestWarnFutureDate(true,PUr.TransDate);
  switch (PUr.PUFromPORate) begin
    case kPURateFromPurchaseOrder:
      gotratef = PUr.PONr>0;
    case kPURateOnGoodsReceiptDate:
    case kPURateFromPrepayment:
      if (PUr.PONr>0) then begin
        POr.SerNr = PUr.PONr;
        if (ReadFirstMain(POr,1,true)) then begin
          if (CalculateOPPrepaymentAvgRate(PUr,PUr.PONr,PUr.TotUPrice,fr,to1,to2,br1,br2)) then begin
            gotratef = true;
            PUr.FrRate = fr;
            PUr.ToRateB1 = to1; 
            PUr.ToRateB2 = to2;
            PUr.BaseRate1 = br1;
            PUr.BaseRate2 = br2;    
          end;
        end;
      end;
  end;
  if (gotratef==false) then begin
    curcode = PUr.CurncyCode;
    GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
    PUr.CurncyCode = curcode;
    PUr.FrRate = fr;
    PUr.ToRateB1 = to1; 
    PUr.ToRateB2 = to2;
    PUr.BaseRate1 = br1;
    PUr.BaseRate2 = br2;    
  end;
  PURecalcCost(PUr);
  return;
end;

global
procedure PUVc_PasteCostPrice(var record PUVc PUr,Integer rownr)
begin
  row PUVc PUrw;
  Boolean chsum,chrsum;
  val t,t1,t2,cc,vat,bas,s;
  string 255 tstr;
  string 2 vatcode;
  record SysFormatBlock SysFormatRec;
  roundmode rm;

  BlockLoad(SysFormatRec);
  MatRowGet(PUr,rownr,PUrw);    
  bas = MulRateToBase1(PUr.CurncyCode,PUrw.UPrice,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
  if (PUr.InclVAT==1) then begin
    if (nonblank(PUrw.VATCode)) then begin
      vatcode = PUrw.VATCode;
    end else begin
      GetItemVATCode(PUrw.ArtCode,PUr.ExportFlag,vatcode,false);
    end;
    rm = DefaultRoundMode;
    rm.decimals = 5;
    MulVATIVExecute(vatcode,bas,vat,t1,PUr.InclVAT,0,rm);
//      MulVATIV(vatcode,bas,vat,t1,PUr.InclVAT,0);
    bas = bas - vat;
  end;
  tstr = PUrw.Extra;
  if (Mid(tstr,len(tstr),1)=="%") then begin
    t = PUrw.CostPrice - PUrw.ShipCost;
    t = PUrw.CostPrice - PUrw.RowCost1;
    t = PUrw.CostPrice - PUrw.RowCost2;
    t = PUrw.CostPrice - PUrw.RowCost3;
    t = PUrw.CostPrice - PUrw.RowCost4;
    t = PUrw.CostPrice - PUrw.RowCost5;
    PUCalcPerc(PUrw.UPrice,PUrw.CustomsCost,cc);
    t = t - cc;
    t2 = t*100;
    bas = t2/bas;
    bas = bas - 100;
    PUrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    PUrw.Extra = PUrw.Extra & "%";
  end else begin
    bas = PUrw.CostPrice - bas;
    bas = bas - PUrw.ShipCost;
    bas = bas - PUrw.RowCost1;
    bas = bas - PUrw.RowCost2;
    bas = bas - PUrw.RowCost3;
    bas = bas - PUrw.RowCost4;
    bas = bas - PUrw.RowCost5;
    PUCalcPerc(PUrw.UPrice,PUrw.CustomsCost,cc);
    bas = bas - cc;
    PUrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
  end;
  chrsum = true;
  if (chrsum) then begin
    PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                    PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                    PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                    PUrw.CustomsCost,bas,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
    PUrw.CostPrice = bas;
    PUrw.Sum = s;
//      PUrw.UPrice = DivRateToBase1(PUr.CurncyCode,bas,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
    chsum = true;
  end;
  MatRowPut(PUr,rownr,PUrw);    
  PUDchrsum(PUr,rownr);
  if (chsum) then begin
    PUSumUp(PUr);
  end;
  return;
end;

global
function Boolean PUDchrsum(record PUVc PUp,Integer rownr)
BEGIN
  Boolean res;
  row PUVc PUrwp;
  val s;
  
  if (rownr>=0) then begin
    MatRowGet(PUp,rownr,PUrwp);
/*
  DivPIFactor(PUrw.Quant,PUrw.PIFactor,p);
  PUrw.VEQuant = p;
  CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                    PUrw.CustomsCost,p,false,PUr.CurncyCode,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);

  PUrw.Sum = p;
*/
    RowCalculateTaxMatrix_PUVc(PUp,rownr,PUrwp,PUp.InclVAT);
    MatRowPut(PUp,rownr,PUrwp);
    res = true;
  end;
  PUDchrsum = res;
  RETURN;
END;

global  
procedure PUVc_PasteTaxTemplateCode(var record PUVc PUp,Integer rownr,var Boolean chsum)
BEGIN
  row PUVc PUrwp;
  record TaxMatrixVc TMr;

  MatRowGet(PUp,rownr,PUrwp);
  PUrwp.TaxTemplateCode = OverrideTaxMatrix(PUrwp.TaxTemplateCode,TMr);
  PackRowFieldMatrix(PUrwp,"TaxMatrix",TMr);  
  MatRowPut(PUp,rownr,PUrwp);
  RowCalculateTaxMatrix_PUVc(PUp,rownr,PUrwp,PUp.InclVAT);
  MatRowPut(PUp,rownr,PUrwp);
  chsum = PUDchrsum(PUp,rownr);
  RETURN;
END;

global  
procedure PUVc_PasteTREO(var record PUVc PUp,Integer rownr)
begin
  record APAccBlock APb;
  row PUVc PUrw;
  string 255 vatcode;
  
  if (rownr>=0) then begin
    MatRowGet(PUp,rownr,PUrw);
    switch (PUrw.TREO) begin
      case kNonTREO:
        GetItemVATCode(PUrw.ArtCode,PUp.ExportFlag,vatcode,false);
        PUrw.VATCode = vatcode;
      case kTREO:
        BlockLoad(APb);
        PUrw.VATCode = APb.VATCodeTREO;
    end;
    MatRowPut(PUp,rownr,PUrw);
  end;
  return;
end;

global  
function Boolean PUVc_PasteVEItemCode(var record PUVc PUr,Integer rownr,var string warning,var string inwarn)
begin
  Boolean res,pifound;
  record INVc INr;
  record PIVc PIr;  
  row PIVc PIrw;
  Integer i,rwcnt;
  row PUVc PUrw;
  val price,reb,t,p,t2,s;
  string 255 descstr,vatcode,purchacc,taxtemplatecode;
  Boolean nomoreremotecalls;
  record TaxMatrixVc TMr;
  record CostAccBlock CostAccRec;
  record SysFormatBlock SFb;
  record RoundBlock Roundb;
  record MainStockBlock MSb;
  record LocationVc Locr;
  string 255 tstr,location,pcstr;
  string 20 stockacc;

  MatRowGet(PUr,rownr,PUrw);

  PIr.VEItemCode = PUrw.VEItemCode;
  PIr.VECode = PUr.VECode;
  PIr.ItemCode = PUrw.ArtCode;
  PIr.Location = PUr.Location;
  pifound = ReadFirstKey("VEItemCode",PIr,4,true);
  if (pifound==false) then begin
    if (nonblank(PUr.Location)) then begin
      PIr.VECode = PUr.VECode;
      PIr.VEItemCode = PUrw.VEItemCode;
      if (nonblank(PUrw.ArtCode)) then begin
        PIr.ItemCode = PUrw.ArtCode;
        pifound = ReadFirstKey("VEItemCode",PIr,3,true);
      end else begin
        pifound = ReadFirstKey("VEItemCode",PIr,2,true);
      end;
    end;
  end;
  if (pifound) then begin
    if (PIr.VEItemCode!=PUrw.VEItemCode) then begin pifound = false; end;
  end;
  if (pifound) then begin
    if  (GetItemPurchasePriceDiscount(PUr.VECode,PUr.Location,PUr.TransDate,PUr.CurncyCode,PIr.ItemCode,PUrw.Quant,
                                      PUr.Location,"","","",0,true,
                                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                                      INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtemplatecode))
    then begin
      res = true;
      
      BlockLoad(SFb);
      BlockLoad(CostAccRec);    
      BlockLoad(Roundb);    
      BlockLoad(MSb);
      Locr.Code = PUr.Location;
      if (blank(Locr.Code)) then begin
        Locr.Code = MSb.MainStock;
      end;
      ReadFirstMain(Locr,1,true);
      
      if (nonblank(INr.WarnText1)) then begin
        inwarn = INr.WarnText1;
      end;
      if (INr.ItemType!=kItemTypeStocked) then begin
        warning = USetStr(1301);
      end;
      
      PUrw.Spec = INr.Name;
      if (PIr.CurncyCode==PUr.CurncyCode) then begin
        PUrw.UPrice = PIr.PurPrice;
        p = PIr.PurPrice;
      end else begin
        CurValToOtherCur(PUr.TransDate,PIr.CurncyCode,PIr.PurPrice,PUr.CurncyCode,t,GetCostRoundMode(Roundb));
        PUrw.UPrice = t;  
        p = PUrw.UPrice;
      end;          
      PUrw.CountryOfOrg = PIr.OrgCountry;
      PUrw.CustomsCost = PIr.PurchaseCost;
      PUrw.VEItemCode = PIr.VEItemCode;
      PUrw.VEUnit = PIr.VEUnit;
      PUrw.CountryOfOrg = PIr.OrgCountry;
      if (INr.PriceFactor!=0) then begin
        p = p/INr.PriceFactor;
      end;
      
      PUrw.VATCode = PUr.VEVATCode;    
      if (blank(PUrw.VATCode)) then begin
        GetItemVATCode(PUrw.ArtCode,PUr.ExportFlag,tstr,false);
        PUrw.VATCode = tstr;
      end;
      PUrw.TaxTemplateCode = FillupTaxMatrix(1,PUr.BranchID,PUr.VECode,"","",taxtemplatecode,TMr);
      PUrw.Coefficient = INr.UnitCoefficient;
      PUrw.InPrice = INr.InPrice;
      PUrw.ArtCode = INr.Code;
      PUrw.Spec = INr.Name;
      PUrw.Objects = FindINObjects(INr.Objects,INr.Group);
      PUrw.UPrice = p;
      PUrw.UnitXval = INr.Width;
      PUrw.UnitYval = INr.Height;
      PUrw.UnitZval = INr.Depth;
      PUrw.UnitCode = INr.Unittext;
      location = PUrw.Location;
      if (blank(location)) then begin
        location = PUr.Location;
      end;
      if (Locr.RequirePos!=0) then begin
        PUrw.PosCode = Locr.WHMDefPUPosCode;
      end;
      
      t2 = MulRateToBase1(PUr.CurncyCode,p,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,GetCostRoundMode(Roundb));
      PUCalcPerc(t2,PUrw.CustomsCost,t2);
      pcstr = ValToString(t2,M45Val,SFb.thousSep,SFb.decimalPt,0);
      PUrw.CustomsCost = pcstr;
      PUrw.BasePrice = INr.UPrice1;
      tstr = INr.ExtraCost;
      PUrw.Extra = tstr;
      PUrw.PIFactor = PIr.PIFactor;
      PUrw.StockType = PIr.DefStockType;
      if (PUrw.PIFactor!=0) then begin
        PUrw.UPrice = PUrw.UPrice/PUrw.PIFactor;
      end;
      DivPIFactor(PUrw.Quant,PUrw.PIFactor,t);
      PUrw.VEQuant = t;
      
      if (blank(PUrw.Location)) then begin
        FindPUStockAcc(PUr.VECode,CostAccRec,PUrw.CostAcc,PUrw.CredAcc,PUr.Location,INr,PUrw.StockType,stockacc,purchacc,true);
      end else begin
        FindPUStockAcc(PUr.VECode,CostAccRec,PUrw.CostAcc,PUrw.CredAcc,PUrw.Location,INr,PUrw.StockType,stockacc,purchacc,true);
      end;
      PUrw.CostAcc = stockacc;
      PUrw.CredAcc = purchacc;
      
      PUrw.SuppSerialNr = INr.SuppSerialNr;
      PUrw.MajStoneDet = INr.MajStoneDet;
      PUrw.Colour = INr.Colour;
      PUrw.Clarity = INr.Clarity;
      PUrw.Cert = INr.Cert;
      PUrw.MinStoneDet = INr.MinStoneDet;
      PUrw.Metal = INr.Metal;
      PUrw.RowWeight = INr.RowWeight;
      PUrw.Size = INr.Size;
      PUrw.Length = INr.Length;
      
      PUrw.WatchBrand = INr.WatchBrand;
      PUrw.StyleName = INr.StyleName;
      PUrw.WatchMetal = INr.WatchMetal;
      PUrw.Movement = INr.Movement;
      PUrw.BrcStr = INr.BrcStr;
      PUrw.Gender = INr.Gender;
      PUrw.Other = INr.Other;
      PUrw.Other2 = INr.Other2;
      
      PackRowFieldMatrix(PUrw,"TaxMatrix",TMr);
      
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      MatRowPut(PUr,rownr,PUrw);

      rwcnt = MatRowCnt(PIr);    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PIr,i,PIrw);
        ClearRow(PUr,PUrw,1);
        PUrw.Spec = PUrw.Spec & PIrw.Text;
        MatRowPut(PUr,rownr+i+1,PUrw);
      end;
      
      PUSumup(PUr);                            
    end;
  end;

  PUVc_PasteVEItemCode = res;
  return;
end;
