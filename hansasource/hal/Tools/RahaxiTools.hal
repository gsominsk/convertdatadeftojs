external procedure GetAreaFromFile(Area,string);
remote updating procedure AddRahaxiReceiptNote_IVCashVc(record IVCashVc,Area);
remote updating procedure AddRahaxiReceiptNote_IVVc(record IVVc,Area);
remote updating procedure UpdateCredCardSlip_Rahaxi(string,val,string,string,LongInt,string,Integer,var record NotepadVc,var record NotepadVc,var string);
remote updating procedure StoreCredCardSlip_Rahaxi(string,val,string,string,LongInt,string,Integer,var record NotepadVc,var record NotepadVc,var string);

/*
global
procedure TestRecordLinkFileRClassRun()
begin
  Area nt;
  
  AddTextToArea("Print_Receipt_Copy: 0",nt);
  AddTextToArea(chr(13) & chr(10),nt);
  AddTextToArea(chr(13) & chr(10),nt);
  SendRahaxi(nt);
  return;
end;

global
procedure Get_Terminal_Id()
begin
  Area nt;
  record LocalMachineBlock LMb;  

  BlockLoad(LMb);
  AddTextToArea("Get_Terminal_Id: " & LMb.LocalMachineCode ,nt);
  AddTextToArea(chr(13) & chr(10),nt);
  AddTextToArea(chr(13) & chr(10),nt);
  SendRahaxi(nt);
  return;
end;
*/

global
procedure Rahaxi_Msg_Event_Purchase(val v,Integer card_usage_mode)
begin
  Area nt;
  record LocalMachineBlock LMb;  
  string 255 tstr; 
  record RahaxiBlock Rahaxib; 

  BlockLoad(Rahaxib);
  if (nonblank(Rahaxib.RahaxiServerIP)) and (Rahaxib.RahaxiServerPort) then begin
    BlockLoad(LMb);
    AddTextToArea("pos_id: " & LMb.TerminalID ,nt);//  AddTextToArea("pos_id: " & "00001" ,nt);
    AddTextToArea(chr(13) & chr(10),nt);
    AddTextToArea("ev_type: 1" ,nt);
    AddTextToArea(chr(13) & chr(10),nt);
    
    tstr = ValToString(v,M4Val,"","",1);
    AddTextToArea("amount: " & tstr ,nt);

    AddTextToArea(chr(13) & chr(10),nt);

    switch (card_usage_mode) begin
      case 0:
        AddTextToArea("chip_reader_used: 0" ,nt);
        AddTextToArea(chr(13) & chr(10),nt);
      case 1:
        AddTextToArea("chip_reader_used: 1" ,nt);
        AddTextToArea(chr(13) & chr(10),nt);
      otherwise
        AddTextToArea("chip_reader_used: 0" ,nt);
        AddTextToArea(chr(13) & chr(10),nt);
        AddTextToArea("card_usage_mode: 99" ,nt);// rahaxi will prompt to use chip or magnetic stripe, chip_reader_used 0 for this
        AddTextToArea(chr(13) & chr(10),nt);
    end;

  //  AddTextToArea("internal_magstripereader_used: 0" ,nt);//always 0
  //  AddTextToArea(chr(13) & chr(10),nt);
    AddTextToArea(chr(13) & chr(10),nt);
    SendRahaxi(nt);
  end;
  return;
end;

global
procedure Rahaxi_Msg_Event_Cancel(string CouponNr,val v)
begin
  Area nt;
  record LocalMachineBlock LMb; 
  string 255 tstr; 
  record RahaxiBlock Rahaxib; 

  BlockLoad(Rahaxib);
  if (nonblank(Rahaxib.RahaxiServerIP)) and (Rahaxib.RahaxiServerPort) then begin
    BlockLoad(LMb);
    AddTextToArea("pos_id: " & LMb.TerminalID ,nt);//  AddTextToArea("pos_id: " & "00001" ,nt);
    AddTextToArea(chr(13) & chr(10),nt);
    AddTextToArea("ev_type: 3" ,nt);
    AddTextToArea(chr(13) & chr(10),nt);
    tstr = ValToString(v,M4Val,"","",1);
    AddTextToArea("amount: " & tstr ,nt);
    AddTextToArea(chr(13) & chr(10),nt);
    AddTextToArea("original_filingcode: " & CouponNr ,nt);
    AddTextToArea(chr(13) & chr(10),nt);
    AddTextToArea("card_usage_mode: 99" ,nt);// rahaxi will prompt to use chip or magnetic stripe, chip_reader_used 0 for this
    AddTextToArea(chr(13) & chr(10),nt);
    AddTextToArea(chr(13) & chr(10),nt);
    SendRahaxi(nt);
   end;
  return;
end;

updating procedure ParseRahaxiReply(Area reply,var string errstr,var string ev_type,var string card_aid_name,var string authorizationcode,var val v,
                                    var string field_37,var string field_38,var record NotepadVc merchantNoter,var record NotepadVc Noter)
begin
  LongInt l,i,j;
  string 255 cmd,value,tstr,field_04;
  Integer printreceiptmode;
  Integer receiptmode;
  Integer ev_typei;
  
  l = CountLinesInArea(reply);
  for (i=0;i<l;i=i+1) begin
    tstr = GetLineFromArea(reply,i);
    tstr = Left(tstr,200);
    cmd = FirstInRange(tstr,100);
    switch (cmd) begin
      case "ev_type":
        value = LastInRange(tstr,100);
        ev_type = Left(value,len(value)-2);
        ev_typei = StringToInt(ev_type);
      case "card_aid_name":
        value = LastInRange(tstr,100);
        card_aid_name = Left(value,len(value)-2);
      case "program_internal_statuscode":
        value = LastInRange(tstr,100);
        value = Left(value,len(value)-2);
        switch (value) begin
          case "0000": ;
          otherwise 
            errstr = value;
            goto LParseRahaxiReply;
        end;
      case "field_04":
        value = LastInRange(tstr,100);
        field_04 = Left(value,len(value)-2);
        v = StringToVal(field_04,M4Val)/100;
      case "field_37":
        value = LastInRange(tstr,100);
        field_37 = Left(value,len(value)-2);
        authorizationcode = field_37;
      case "field_38":
        value = LastInRange(tstr,100);
        field_38 = Left(value,len(value)-2);
        if (nonblank(field_38)) then begin
          authorizationcode = field_38;
        end;
      case "field_39":
        value = LastInRange(tstr,100);
        switch (ev_typei) begin
          case 1://Purchase 
            if (Left(value,len(value)-3)=="00") then begin
            end else begin
              errstr = value;
              goto LParseRahaxiReply;
            end;
          case 3://Cancel
            if (Left(value,len(value)-3)=="00") or (Left(value,len(value)-2)=="400") then begin
            end else begin
              errstr = value;
              goto LParseRahaxiReply;
            end;
        end;
      case "field_58":
        j = i;
        goto LParseRahaxiReply_Printing;
    end;
  end;  
LParseRahaxiReply_Printing:;
//code below to be tested before comit
  for (i=j+1;i<l;i=i+1) begin
    tstr = GetLineFromArea(reply,i);
    tstr = Left(tstr,200);
    cmd = FirstInRange(tstr,100);
    if (Left(cmd,2)=="kk") then begin printreceiptmode = 1; end;
    if (Left(cmd,2)=="ak") then begin printreceiptmode = 2; end;
    switch (printreceiptmode) begin
      case 1://merchant
//* we cannot store credit card numbers and AK rows have only 4 digits
//* so pls make sure you have corect settings in Tahaxi software
        value = Right(tstr,len(tstr)-len(cmd) - 2);
        value = Left(value,len(value)-2);
        AddToText(value,merchantNoter);        
        AddToText(chr(13),merchantNoter);
      case 2://customer
        value = Right(tstr,len(tstr)-len(cmd) - 2);
        value = Left(value,len(value)-2);
        AddToText(value,Noter);        
        AddToText(chr(13),Noter);
                        
//        LineTextPut(Noter,LineTextCnt(Noter),value);        looks like smtimes destroying data

    end;
  end;  
//we can print recipt here or read from credit card slip note and print from there  
//  l = GetAreaFromArea(aka,0,GetAreaLength(aka),kka);

LParseRahaxiReply:;  
  return;
end;

global
updating procedure ReceiveRahaxiReply(Area reply)
begin
  string 255 errstr,authorizationcode,card_aid_name,ev_type,field_37,field_38,paymode;
  val v;
  record IVCashVc IVCashr;
  record IVVc IVr;
  row IVVc IVrw;
  Integer rownr,wn;
  transaction Integer gRahaxiWn;
  transaction LongInt gRahaxirecnr;
  transaction string 255 gRahaxifilename;
  transaction string 255 gRahaxifieldname;
  record NotepadVc Noter;
  record NotepadVc merchantNoter;
  Integer ev_typei;

  RecordNew(merchantNoter);  
  RecordNew(Noter);  
  wn = FindWindow("CCPayRahaxiProcessingWClass");
  if (wn>0) then begin
    CloseWindow(wn);
  end;
/*
  CreateFile("ReceiveRahaxiReply.txt");
  CloseFile;
  WriteAreaToFile(reply,"ReceiveRahaxiReply.txt",0);
*/
//GetAreaFromFile(reply,"ReceiveRahaxiReply.txt");//test code

  ParseRahaxiReply(reply,errstr,ev_type,card_aid_name,authorizationcode,v,field_37,field_38,merchantNoter,Noter);
  ev_typei = StringToInt(ev_type);
    
  switch (ev_typei) begin
    case 1://Purchase 
      StoreCredCardSlip_Rahaxi(card_aid_name,v,field_37,field_38,gRahaxirecnr,gRahaxifilename,0,merchantNoter,Noter,paymode);
    case 3://Cancel
      UpdateCredCardSlip_Rahaxi(card_aid_name,v,field_37,field_38,gRahaxirecnr,gRahaxifilename,5,merchantNoter,Noter,paymode);
  end;
  if (nonblank(errstr)) then begin
    MessageBox(20570,errstr);
  end else begin
    switch (ev_typei) begin
      case 1://Purchase 
        if (gRahaxiWn>0) then begin
          DeselectWindow(gRahaxiWn,true);
          switch (gRahaxifilename) begin
            case "IVVc":
              GetWindowRecord(gRahaxiWn,IVr);
              ClearRow(IVr,IVrw,kInvoiceRowTypeCreditCardPayment);  
              IVrw.Sum = v;
              IVrw.AuthorizationCode = authorizationcode;
              IVrw.PayMode = paymode;
              rownr = MatRowCnt(IVr);
              MatRowPut(IVr,rownr,IVrw);
              PutWindowRecord(gRahaxiWn,IVr);
              if (WindowDoOK(gRahaxiWn,0)) then begin
              end;
//              AddRahaxiReceiptNote_IVVc(IVr,aka);
            case "IVCashVc":
              GetWindowRecord(gRahaxiWn,IVCashr);
              switch (gRahaxifieldname) begin
                case "RecValue":
                  IVCashr.RecValue = v;
                  IVCashr.AuthorizationCode = authorizationcode;
                  IVCashr.PayDeal = paymode;
                case "RecValue2":
                  IVCashr.RecValue2 = v;
                  IVCashr.AuthorizationCode2 = authorizationcode;
                  IVCashr.PayDeal2 = paymode;
              end;
              PutWindowRecord(gRahaxiWn,IVCashr);
              if (WindowDoOK(gRahaxiWn,0)) then begin
              end;
//              AddRahaxiReceiptNote_IVCashVc(IVCashr,aka);
           end;
        end;
    end;
  end;
/*
  CreateFile("ReceiveRahaxiReply.txt");
  CloseFile;
  WriteAreaToFile(reply,"ReceiveRahaxiReply.txt",0);
*/  
  return;
end;

procedure ParseSteriaReply(area LocalModeData,var string errstr,integer issuer,var string card_aid_name,var string authorizationcode,var val v,var string cardnumber,var record NotepadVc Noter)
begin
  longint p,l;
  string 255 ch;
  
  switch (issuer) begin
    case 1: card_aid_name = "bankaxept";
    case 3: card_aid_name = "VISA";
    case 4: card_aid_name = "MASTERCARD";
    case 5: card_aid_name = "AMEX";
    case 6: card_aid_name = "DINERS";
    case 9: card_aid_name = "bankaxept";
    case 14: card_aid_name = "MAESTRO";
  end;
  
  p = 4;
  l = 25;
  cardnumber = "";
  ch = GetStringFromArea(LocalModeData,p,1);
  while (ch!=";" and p<l) begin
    cardnumber = cardnumber & ch;
    p = p + 1;
    ch = GetStringFromArea(LocalModeData,p,1);
  end;
  if (ch==";") then begin
    p = p + 14 + 2 + 4 + 6 + 2;
    authorizationcode = GetStringFromArea(LocalModeData,p,6);
    
    p = p + 6 + 6;
    v = StringToLongInt(GetStringFromArea(LocalModeData,p,11));
    v = v/100;
  end;
  
  return;
end;

global
updating procedure SteriaPayOnSteriaReturn(integer result,integer accumulator,integer issuer,area printNormal,area PrintSignature,area LocalModeData)
begin
  string 255 errstr,authorizationcode,card_aid_name,ev_type,field_37,field_38,paymode,cardnumber;
  val v;
  record IVCashVc IVCashr;
  record IVVc IVr;
  row IVVc IVrw;
  Integer rownr,wn;
  transaction Integer gRahaxiWn;
  transaction LongInt gRahaxirecnr;
  transaction string 255 gRahaxifilename;
  transaction string 255 gRahaxifieldname;
  record NotepadVc Noter;
  record NotepadVc merchantNoter;
  row IVCashVc IVCashrw;

  RecordNew(merchantNoter);  
  RecordNew(Noter);  
  wn = FindWindow("CCPayRahaxiProcessingWClass");
  if (wn>0) then begin
    gRahaxiWn = MotherWindow(wn);
    CloseWindow(wn);
  end;

  switch (GetWindowFileName(gRahaxiWn)) begin    
    case "IVVc":  gRahaxifilename= "IVVc";
    case "IVCashVc": gRahaxifilename = "IVCashVc";
  end;

  ParseSteriaReply(LocalModeData,errstr,issuer,card_aid_name,authorizationcode,v,cardnumber,Noter);

  switch (result) begin
    case 32://Purchase 
      StoreCredCardSlip_Rahaxi(card_aid_name,v,field_37,authorizationcode,gRahaxirecnr,gRahaxifilename,0,merchantNoter,Noter,paymode);
    case 33://Rejected
      UpdateCredCardSlip_Rahaxi(card_aid_name,v,field_37,authorizationcode,gRahaxirecnr,gRahaxifilename,5,merchantNoter,Noter,paymode);
    case 34://Additional authoriation required
      UpdateCredCardSlip_Rahaxi(card_aid_name,v,field_37,authorizationcode,gRahaxirecnr,gRahaxifilename,5,merchantNoter,Noter,paymode);
  end;
  if (nonblank(errstr)) then begin
    MessageBox(20570,errstr);
  end else begin
    switch (result) begin
      case 32://Purchase 
        if (gRahaxiWn>0) then begin
          DeselectWindow(gRahaxiWn,true);
          switch (gRahaxifilename) begin
            case "IVVc":
              GetWindowRecord(gRahaxiWn,IVr);
              ClearRow(IVr,IVrw,kInvoiceRowTypeCreditCardPayment);  
              IVrw.Sum = v;
              IVrw.AuthorizationCode = authorizationcode;
              IVrw.PayMode = paymode;
              IVrw.CreditCard = "****" & right(cardnumber,4);
              rownr = MatRowCnt(IVr);
              MatRowPut(IVr,rownr,IVrw);
              PutWindowRecord(gRahaxiWn,IVr);
              if (WindowDoOK(gRahaxiWn,0)) then begin
              end;
            case "IVCashVc":
              GetWindowRecord(gRahaxiWn,IVCashr);
              ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeCreditCardPayment);  
              IVCashrw.Sum = v;
              IVCashrw.AuthorizationCode = authorizationcode;
              IVCashrw.PayMode = paymode;
              IVCashrw.CreditCard = "****" & right(cardnumber,4);
              rownr = MatRowCnt(IVCashr);
              MatRowPut(IVCashr,rownr,IVCashrw);
              PutWindowRecord(gRahaxiWn,IVCashr);
              if (WindowDoOK(gRahaxiWn,0)) then begin
              end;
/*
              GetWindowRecord(gRahaxiWn,IVCashr);
              switch (gRahaxifieldname) begin
                case "RecValue":
                  IVCashr.RecValue = v;
                  IVCashr.AuthorizationCode = authorizationcode;
                  IVCashr.PayDeal = paymode;
                case "RecValue2":
                  IVCashr.RecValue2 = v;
                  IVCashr.AuthorizationCode2 = authorizationcode;
                  IVCashr.PayDeal2 = paymode;
              end;
              PutWindowRecord(gRahaxiWn,IVCashr);
              if (WindowDoOK(gRahaxiWn,0)) then begin
              end;
*/              
           end;
        end;
    end;
  end;

  return;
end;