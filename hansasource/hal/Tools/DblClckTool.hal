remote function Integer ARIInstallNr(LongInt,Date);
external function string 20 FindJobCustomerCode(record JobVc);
external function string 60 FindJobCustomerName(record JobVc);
external procedure ExtractObj(string,var Integer,var string);
external function Boolean ReadFirstItemInclClosed(string,var record INVc,Boolean,Boolean);
external function integer GetGuestsInJob(record JobVc);
remote function Integer JobPasteResCode(var record JobVc,string);

global 
procedure DblINVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record INVc INr;
   string 255 tstr;
   
  tstr = l; 
  if (blank(tstr)) then begin
    tstr = dblstr; 
  end;
  
   if (ReadFirstItemInclClosed(tstr,INr,false,false)) then begin 
     wn = OpenWindow("INDClass",1,0,"","",INr);
   end;
   
   return;
end;

global 
procedure DblVEVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record CUVc VEr;
   
   VEr.Code = dblstr;
   if (ReadFirstMain(VEr,1,true)) then begin
     wn = OpenWindow("CUDClass",1,0,"","",VEr);
   end;   
   return;
end;

global 
procedure DbloldVEVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record VEVc VEr;
   
   VEr.Code = dblstr;
   if (ReadFirstMain(VEr,1,true)) then begin
     wn = OpenWindow("VEDClass",1,0,"","",VEr);
   end;   
   return;
end;

global
procedure DblPPVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record PPVc PPr;
   
  PPr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(PPr,1,true)) then begin
    wn = OpenWindow("PPDClass",1,0,"","",PPr);
  end;     
  return;
end;

global
procedure DblTBBUVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record TBBUVc TBBUr;   
  string 255 tstr;

  tstr = l; 
  if (blank(tstr)) then begin
    tstr = dblstr; 
  end;
  if (nonblank(tstr)) then begin
    TBBUr.PRCode = tstr;
	  if (ReadFirstMain(TBBUr,1,true)) then begin
	    wn = OpenWindow("TBBUDClass",1,0,"","",TBBUr);
	  end;
	end;
  return;
end;

global
procedure DblPRPL(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  
  ReportDefaults(RepSpec,"PRPLDetClass");
  RepSpec.repname = "PRPLDetRn";
  RepSpec.f1 = l;
  RepSpec.Media = mtScreen;
//  RepSpec.flags[1] = 1;
  RunReport(RepSpec,0);   
  return;
end;

// Should not be used anymore...
global
procedure DblContVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ContactVc Contr;
   
  Contr.Name = dblstr;
  Contr.Company = l;
  if (ReadFirstMain(Contr,2,true)) then begin
    wn = OpenWindow("ContactDClass",1,0,"","",Contr);
  end;     
  return;
end;

global
procedure DblContCUVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CUVc ContactCUr;
   
  ContactCUr.Code = l;
  if (ReadFirstMain(ContactCUr,1,true)) then begin
    wn = OpenWindow("CUDClass",1,0,"","",ContactCUr);
  end;     
  return;
end;

global
procedure DblShopJobBask(string dblstr,string l,Integer currepwn)
begin
  record ShopBaskVc ShopBaskr;
  Integer wn;
      
  ShopBaskr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(ShopBaskr,1,true)) then begin
    wn = OpenWindow("JobShopBaskDClass",1,0,"","",ShopBaskr);
  end;
  return;
end;
  
global 
procedure DblResVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record ResVc Resr;
   
   Resr.Code = dblstr;
   if (ReadFirstMain(Resr,1,true)) then begin
     wn = OpenWindow("ResDClass",1,0,"","",Resr);
   end;
   
   return;
end;

global 
procedure DblResVcID(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record ResVc Resr;
   
   if (nonblank(l)) then begin
     Resr.Code = l;
     if (ReadFirstMain(Resr,1,true)) then begin
       wn = OpenWindow("ResDClass",1,0,"","",Resr);
     end;
   end;
   return;
end;

global 
procedure DblJobVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record JobVc Jobr;
   
   Jobr.SerNr = FirstInRange(dblstr,10);
   if (ReadFirstMain(Jobr,1,true)) then begin
     wn = OpenWindow("JobDClass",1,0,"","",Jobr);
   end;
   
   return;
end;

global 
procedure DblProfileVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record CUVc Profiler;
   
   if (nonblank(l)) then begin
     Profiler.Code = l;
     if (ReadFirstMain(Profiler,1,true)) then begin
       wn = OpenWindow("CUGuestDClass",1,0,"","",Profiler); // Can have another edit record
     end;
   end else begin
     Profiler.Code = dblstr;
     if (ReadFirstMain(Profiler,1,true)) then begin
       wn = OpenWindow("CUGuestDClass",1,0,"","",Profiler); // Can have another edit record
     end;
   end;
   return;
end;

global 
procedure DblJobVcID(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record JobVc Jobr;
   
   Jobr.SerNr = FirstInRange(l,10);
   if (ReadFirstMain(Jobr,1,true)) then begin
     wn = OpenWindow("JobDClass",1,0,"","",Jobr);
   end;
   return;
end;

global
procedure DblCOVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record COVc COr;
  Integer keys;
  
  keys = 1;
  if (nonblank(l)) then begin
    keys = 2;
    COr.ChildSerNr = FirstInRange(l,10);
  end;
  COr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(COr,keys,true)) then begin
    wn = OpenWindow("CODClass",1,0,"","",COr);
  end;     
  return;
end;

global
procedure DblCO2Vc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record COVc COr;

  COr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(COr,1,true)) then begin
    wn = OpenWindow("CODClass",1,0,"","",COr);
  end;     
  return;
end;

global
procedure DblCOIDVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record COVc COr;
  Integer keys;
  
  if (nonblank(l)) then begin
    keys = 2;
    COr.SerNr = FirstInRange(l,10);
    COr.ChildSerNr = LastInRange(l,10);
    if (ReadFirstMain(COr,keys,true)) then begin
      wn = OpenWindow("CODClass",1,0,"","",COr);
    end;     
  end;
  return;
end;

global
procedure DblCQVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CQVc CQr;
  
  CQr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(CQr,1,true)) then begin
    wn = OpenWindow("CQDClass",1,0,"","",CQr);
  end;     
  return;
end;

global
procedure DblPR(string dblstr,string l,Integer currepwn)
begin
  record TBIVVc TBIVr;
  Integer wn,pos,fld;
  string 255 tstr;
  
  pos = 0;
  ExtractObj(l,pos,tstr);
  while (nonblank(tstr)) begin
    switch (fld) begin
      case 0: TBIVr.SerNr = StringToLongInt(tstr);
      case 1: TBIVr.Row = StringToInt(tstr);
      case 2: TBIVr.PRCode = tstr;
      case 3: TBIVr.oVc = StringToInt(tstr);
    end;
    ExtractObj(l,pos,tstr);
    fld = fld + 1;
  end;
  if (ReadFirstKey("Row",TBIVr,fld,true)) then begin      
    wn = OpenWindow("TBIVDClass",1,0,"","",TBIVr);
  end;
  
/*  
  TBIVr.SerNr = FirstInRange(l,20);
  TBIVr.Row = StringToInt(LastInRange(l,20));
  if (ReadFirstKey("Row",TBIVr,2,true)) then begin      
    wn = OpenWindow("TBIVDClass",1,0,"","",TBIVr);
  end;
*/  
  return;
end;

procedure DblPrTranRnCommon(record RcVc RepSpec,string dblstr,string l,Integer currepwn)
begin
  Integer wn,pos,fld;
  string 255 tstr;  
  record RcVc curRepSpec;
  record PRVc PRr;
  Date td;
   
  ReportDefaults(RepSpec,"PrTransRClass");
  GetWindowRecord(currepwn,curRepSpec);

  RepSpec.sStartDate = curRepSpec.d1;
  RepSpec.sEndDate = curRepSpec.d2;
  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[9] = 1;
  RepSpec.flags[10] = 1;
  pos = 0;
  ExtractObj(l,pos,tstr);
  while (nonblank(tstr)) begin
    switch (fld) begin
      case 0: RepSpec.f1 = tstr;
      case 1: RepSpec.f2 = tstr;
      case 2: RepSpec.f3 = tstr;
    end;
    ExtractObj(l,pos,tstr);
    fld = fld + 1;
  end;
  if (blankdate(RepSpec.sStartDate) or blankdate(RepSpec.sEndDate)) then begin 
    if nonblank(RepSpec.f1) then begin 
      PRr.Code = RepSpec.f1;
      if ReadFirstMain(PRr,1,true) then begin 
        if (nonblank(PRr.StartDate) and blankdate(RepSpec.sStartDate)) then begin
          RepSpec.sStartDate = PRr.StartDate;
        end;
        if (nonblank(PRr.EndDate) and blankdate(RepSpec.sEndDate)) then begin
          RepSpec.sEndDate = PRr.EndDate;
        end;
      end;   
    end;
  end;  
  if (blankdate(RepSpec.sStartDate) or blankdate(RepSpec.sEndDate)) then begin 
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
  end;
  RepSpec.stoff = -1;
  RepSpec.repname = "PrTranRn";
  RepSpec.Media = mtScreen;
  return;
end;

global
procedure DblPrTranRn(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
   
  DblPrTranRnCommon(RepSpec,dblstr,l,currepwn);
  RepSpec.flags[4] = 1;
  RunReport(RepSpec,0);
  return;
end;
  
global
procedure DblPrTranRnInvd(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
   
  DblPrTranRnCommon(RepSpec,dblstr,l,currepwn);
  RepSpec.flags[5] = 1;
  RunReport(RepSpec,0);
  return;
end;
  
global
procedure DblQTVc(string dblstr,string l,Integer currepwn)
begin
  record QTVc QTr;
  Integer wn;
  
  QTr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(QTr,1,true)) then begin
    wn = OpenWindow("QTDClass",1,0,"","",QTr);
  end;
  return;
end;

global
procedure DblQTVcID(string dblstr,string l,Integer currepwn)
begin
  record QTVc QTr;
  Integer wn;
  
  QTr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(QTr,1,true)) then begin
    wn = OpenWindow("QTDClass",1,0,"","",QTr);
  end;
  return;
end;

global
procedure DblCLInVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CLInVc CLInr;
   
 CLInr.SerNr = FirstInRange(l,10);
  if (CLInr.SerNr<0) then begin
    CLInr.SerNr = FirstInRange(dblstr,10);
  end;
  if (CLInr.SerNr>0) then begin
    if (ReadFirstMain(CLInr,1,true)) then begin
      wn = OpenWindow("CLInDClass",1,0,"","",CLInr);
    end;     
  end;
  return;
end;

global
procedure DblCLInID(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CLInVc CLInr;
   
  CLInr.SerNr = FirstInRange(l,10);
  if (CLInr.SerNr<0) then begin
    CLInr.SerNr = FirstInRange(dblstr,10);
  end;
  if (CLInr.SerNr>0) then begin
    if (ReadFirstMain(CLInr,1,true)) then begin
      wn = OpenWindow("CLInDClass",1,0,"","",CLInr);
    end;     
  end;
  return;
end;

global
procedure DblCLOutVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CLOutVc CLOutr;
  
  CLOutr.SerNr = FirstInRange(l,10);
  if (CLOutr.SerNr<0) then begin
    CLOutr.SerNr = FirstInRange(dblstr,10);
  end;
  if (CLOutr.SerNr>0) then begin
    if (ReadFirstMain(CLOutr,1,true)) then begin
      wn = OpenWindow("CLOutDClass",1,0,"","",CLOutr);
    end;     
  end;
  return;
end;

global
procedure DblIVVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IVVc IVr;
   
  IVr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
    goto LDblIVVc;
  end;     
  IVr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
    goto LDblIVVc;
  end;     
  IVr.OfficialSerNr = FirstInRange(dblstr,30);
  if (ReadFirstKey("OfficialSerNr",IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
    goto LDblIVVc;
  end;     
LDblIVVc:;  
  return;
end;

global
procedure DblIVCashVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IVCashVc IVr;
   
  IVr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVCashDClass",1,0,"","",IVr);
    goto LDblIVCashVc;
  end;     
  IVr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVCashDClass",1,0,"","",IVr);
    goto LDblIVCashVc;
  end;     
LDblIVCashVc:;  
  return;
end;

global
procedure DblNPTSIVCash(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IVCashVc IVr;
   
  IVr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("NPTSIVCashDClass",1,0,"","",IVr);
    goto LDblNPTSIVCashVc;
  end;     
  IVr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("NPTSIVCashDClass",1,0,"","",IVr);
    goto LDblNPTSIVCashVc;
  end;     
LDblNPTSIVCashVc:;  
  return;
end;

global
procedure DblIPVcID(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IPVc IPr;
   
  IPr.SerNr = FirstInRange(l,10);
  if (IPr.SerNr>0) then begin
    if (ReadFirstMain(IPr,1,true)) then begin
      wn = OpenWindow("IPDClass",1,0,"","",IPr);
    end;     
  end;
  return;
end;

global
procedure DblIPVc(string dblstr,string l,Integer currepwn)
begin
  record IPVc IPr;
  Integer wn;
  
  IPr.SerNr = FirstInRange(l,10);
  if (IPr.SerNr<0) then begin
    IPr.SerNr = FirstInRange(dblstr,10);
  end;
  if (IPr.SerNr>0) then begin
    if (ReadFirstMain(IPr,1,true)) then begin
      wn = OpenWindow("IPDClass",1,0,"","",IPr);
    end;
  end;
  return;
end;

global
procedure DblBadCU(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record IVVc IVr;
  record RcVc RepSpec;
   
  IVr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    ReportDefaults(RepSpec,"BadCUVClass")
    wn = OpenWindow("BadCUVClass",0,0,"","",RepSpec);
    DeselectWindow(wn,false);
    RepSpec.repname = "BadCUMn";
    RepSpec.f1 = IVr.CustCode;
    RepSpec.f2 = IVr.SerNr;
    RepSpec.long1 = -StringToLongInt(dblstr);
    if (RepSpec.long1<=0) then begin
      RepSpec.long1 = -1;
    end;
    PutWindowRecord(wn,RepSpec);
  end;     
  return;
end;

global
procedure DblAT2UnitVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record AT2UnitVc AT2Unitr;
   
  AT2Unitr.InventoryNr = dblstr;
  if (ReadFirstMain(AT2Unitr,1,true)) then begin
    wn = OpenWindow("AT2UnitDClass",1,0,"","",AT2Unitr);
  end;     
  return;
end;

global
procedure DblAT2TakeVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record AT2TakeVc AT2Taker;
   
  AT2Taker.SerNr = dblstr;
  if (ReadFirstMain(AT2Taker,1,true)) then begin
    wn = OpenWindow("AT2TakeDClass",1,0,"","",AT2Taker);
  end;     
  return;
end;

global
procedure DblAT2DprVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record AT2DprVc AT2Dprr;
   
  AT2Dprr.SerNr = dblstr;
  if (ReadFirstMain(AT2Dprr,1,true)) then begin
    wn = OpenWindow("AT2DprDClass",1,0,"","",AT2Dprr);
  end;     
  return;
end;

global
procedure DblAT2WrofVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record AT2WrofVc AT2Wrofr;
   
  AT2Wrofr.SerNr = dblstr;
  if (ReadFirstMain(AT2Wrofr,1,true)) then begin
    wn = OpenWindow("AT2WrofDClass",1,0,"","",AT2Wrofr);
  end;     
  return;
end;

global
procedure DblProdVcID(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record ProdVc Prodr;
  
  if (nonblank(l)) then begin
    Prodr.SerNr = FirstInRange(l,10);
  end else begin
    Prodr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(Prodr,1,true)) then begin
    wn = OpenWindow("ProdDClass",1,0,"","",Prodr);
  end;     
  return;
end;

global
procedure DblINEffVcID(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record INEffVc INEffr;
   
  INEffr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(INEffr,1,true)) then begin
    wn = OpenWindow("INEffDClass",1,0,"","",INEffr);
  end;     
  return;
end;

global
procedure DblAT2Vc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record AT2Vc AT2r;
   
  AT2r.Code = dblstr;
  if (ReadFirstMain(AT2r,1,true)) then begin
    wn = OpenWindow("AT2DClass",1,0,"","",AT2r);
  end;     
  return;
end;

global
procedure DblCustomsVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CustomsVc Customsr;
  
  Customsr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(Customsr,1,true)) then begin
    wn = OpenWindow("CustomsDClass",1,0,"","",Customsr);
  end;     
  return;
end;

/* Moved from InvValVarRn.hal */
global
procedure InvValVarDbl(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,RepSpec);
  RepSpec.repname = "InvValVarRn";
  RepSpec.Media = mtScreen;
  RepSpec.f1 = dblstr;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure DblFollowUpVc(string dblstr,string l,Integer currepwn)
begin
  record FollowUpVc FollowUpr;
  Integer wn;
  
  FollowUpr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(FollowUpr,1,true)) then begin
    wn = OpenWindow("FollowUpDClass",1,0,"","",FollowUpr);
  end;
  return;
end;

global
procedure DblResEventTypeVc(string dblstr,string l,Integer currepwn)
begin
  record ResEventTypeVc ResEventTyper;
  Integer wn;
  
  ResEventTyper.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(ResEventTyper,1,true)) then begin
    wn = OpenWindow("ResEventTypeDClass",1,0,"","",ResEventTyper);
  end;
  return;
end;

global
procedure DblTransferVc(string dblstr,string l,Integer currepwn)
begin
  record TransferVc Transfer;
  Integer wn;
  
  Transfer.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(Transfer,1,true)) then begin
    wn = OpenWindow("TransferDClass",1,0,"","",Transfer);
  end;
  return;
end;

global
procedure DblExcursionVc(string dblstr,string l,Integer currepwn)
begin
  record ExcursionVc Excur;
  Integer wn;
  
  Excur.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(Excur,1,true)) then begin
    wn = OpenWindow("ExcursionDClass",1,0,"","",Excur);
  end;
  return;
end;

global
procedure DblResToJob(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  record JobVc Jobr;
  record ResVc Resr;
    
  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,RepSpec);
    if (RepSpec.UsedOnly!=0) then begin
      if (WindowValid(RepSpec.UsedOnly)) then begin
        GetWindowRecord(RepSpec.UsedOnly,Jobr);      
        WindowDeactivatefield(RepSpec.UsedOnly);
        Resr.Code = FirstInRange(dblstr,10);
        if (ReadFirstMain(Resr,1,true)) then begin  
          Jobr.ResCode = Resr.Code;
          Jobr.LTxtCode = Resr.LTxtCode;
          JobPasteResCode(Jobr,"");
          PutWindowRecord(RepSpec.UsedOnly,Jobr);
          SelectWindow(RepSpec.UsedOnly);
          CloseWindow(currepwn);
        end;
      end;
    end;
  end;
  return;
end;

global
procedure DblGuestToRestAcc(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc motherRepSpec;
  record RestAccVc RestAccr;
  Integer fld,pos,i,rowcnt;
  string 255 tstr,guestcode;
  record JobVc Jobr;
  record CUVc CUr;
  row JobVc Jobrw;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,RepSpec);
    if (RepSpec.UsedOnly!=0) then begin
      if (WindowValid(RepSpec.UsedOnly)) then begin
        switch (GetWindowFileName(RepSpec.UsedOnly)) begin
          case "RestAccVc":
            GetWindowRecord(RepSpec.UsedOnly,RestAccr);      
            WindowDeactivatefield(RepSpec.UsedOnly);
            pos = 0;
            fld = 0;
            ExtractObj(l,pos,tstr);
            while (nonblank(tstr)) begin
              switch (fld) begin
                case 0:
                  RestAccr.GuestCode = tstr;
                  CUr.Code = RestAccr.GuestCode;
                  ReadFirstMain(CUr,1,true);
                  RestAccr.GuestName = CUr.Name;
                case 1:
                  Jobr.SerNr = StringToLongInt(tstr);
                  ReadFirstMain(Jobr,1,true);
              end;
              ExtractObj(l,pos,tstr);
              fld = fld + 1;
            end;
            RestAccr.Resource = Jobr.ResCode;
            RestAccr.CUCode = Jobr.CUCode;
            RestAccr.CUName = Jobr.CUName;
            if nonblank(RestAccr.GuestCode) then begin
              rowcnt = MatRowCnt(Jobr);
              for (i=0;i<rowcnt;i=i+1) begin
                MatRowGet(Jobr,i,Jobrw);
                if (Jobrw.GuestCode==RestAccr.GuestCode) then begin
                  RestAccr.PriceList = Jobrw.PriceList;
                  i = rowcnt;
                end;
              end;
            end;
            PutWindowRecord(RepSpec.UsedOnly,RestAccr);
            SelectWindow(RepSpec.UsedOnly);
            CloseWindow(currepwn);
          case "RcVc":
            switch (GetWindowClass(RepSpec.UsedOnly)) begin
              case "OnHotelGuestTouchScreenOClass":
                GetWindowRecord(RepSpec.UsedOnly,motherRepSpec);      
                WindowDeactivatefield(RepSpec.UsedOnly);
                pos = 0;
                fld = 0;
                ExtractObj(l,pos,tstr);
                while (nonblank(tstr)) begin
                  switch (fld) begin
                    case 0:
                      motherRepSpec.f2 = tstr;
                    case 1:
                      Jobr.SerNr = StringToLongInt(tstr);
                      ReadFirstMain(Jobr,1,true);
                  end;
                  ExtractObj(l,pos,tstr);
                  fld = fld + 1;
                end;
                motherRepSpec.f1 = Jobr.ResCode;
                motherRepSpec.f3 = Jobr.CUCode;
                motherRepSpec.long2 = Jobr.SerNr;

                PutWindowRecord(RepSpec.UsedOnly,motherRepSpec);
                SelectWindow(RepSpec.UsedOnly);
                CloseWindow(currepwn);
              otherwise
                pos = 0;
                fld = 0;
                ExtractObj(l,pos,tstr);
                while (nonblank(tstr)) begin
                  switch (fld) begin
                    case 0:
                      guestcode = tstr;
                    case 1:
                  end;
                  ExtractObj(l,pos,tstr);
                  fld = fld + 1;
                end;
                DblProfileVc(guestcode,"",currepwn);            
            end;
        end;
      end;
    end;
  end;
  return;
end;


global
procedure DblDetailBuy(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;

  RepSpec.repname = "SharesDetailBuyRn";
  ReportDefaults(RepSpec,"SharesInfoRClass");
  RepSpec.vals0 = StringToVal(l,M4Val);
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblDetailSell(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;

  RepSpec.repname = "SharesDetailSellRn";
  ReportDefaults(RepSpec,"SharesInfoRClass");
  RepSpec.vals0 = StringToVal(l,M4Val);
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblSharesSellVc(string dblstr,string l,Integer currepwn)
begin
  record SharesSellVc SharesSellr;
  Integer wn;
  
  SharesSellr.UserCode = dblstr;
  if (ReadFirstMain(SharesSellr,1,true)) then begin
    wn = OpenWindow("SharesSellDClass",1,0,"","",SharesSellr);
  end;
  return;
end;

global
procedure DblSharesBuyVc(string dblstr,string l,Integer currepwn)
begin
  record SharesBuyVc SharesBuyr;
  Integer wn;
  
  SharesBuyr.UserCode = dblstr;
  if (ReadFirstMain(SharesBuyr,1,true)) then begin
    wn = OpenWindow("SharesBuyDClass",1,0,"","",SharesBuyr);
  end;
  return;
end;

global
updating procedure DblSharesSellCurVc(string dblstr,string l,Integer currepwn)
begin
  record SharesSellVc SharesSellr;
  Integer wn;
  Integer oldcomp;

  oldcomp = CurrentCompany;
  if (SetCompany(1,false)) then begin end;
  SharesSellr.UserCode = CurrentUser;
  if (ReadFirstMain(SharesSellr,1,true)) then begin
    wn = OpenWindow("SharesSellDClass",1,0,"","",SharesSellr);
  end else begin
    RecordNew(SharesSellr);
    wn = OpenWindow("SharesSellDClass",1,0,"","",SharesSellr);
    if (WindowDoOK(wn,0)) then begin
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
updating procedure DblSharesBuyCurVc(string dblstr,string l,Integer currepwn)
begin
  record SharesBuyVc SharesBuyr;
  Integer wn;
  Integer oldcomp;

  oldcomp = CurrentCompany;
  if (SetCompany(1,false)) then begin end;
  SharesBuyr.UserCode = CurrentUser;
  if (ReadFirstMain(SharesBuyr,1,true)) then begin
    wn = OpenWindow("SharesBuyDClass",1,0,"","",SharesBuyr);
  end else begin
    RecordNew(SharesBuyr);
    wn = OpenWindow("SharesBuyDClass",1,0,"","",SharesBuyr);
    if (WindowDoOK(wn,0)) then begin
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
updating procedure DblShareBuyOrder(string dblstr,string l,Integer currepwn)
begin
  record BuySellRequestVc BuySellRequestr;
  Integer wn;
  Integer oldcomp;

  oldcomp = CurrentCompany;
  if (SetCompany(1,false)) then begin end;
  RecordNew(BuySellRequestr);
  BuySellRequestr.Price = StringToVal(dblstr,M4UVal);
  BuySellRequestr.MaxQty = StringToVal(l,M4UVal);
  BuySellRequestr.Qty = BuySellRequestr.MaxQty;
  BuySellRequestr.SellFlag = 1;
  wn = OpenWindow("BuyRequestDClass",1,0,"","",BuySellRequestr);
  ResetCompany(oldcomp);
  return;
end;

global
updating procedure DblShareSellOrder(string dblstr,string l,Integer currepwn)
begin
  record BuySellRequestVc BuySellRequestr;
  Integer wn;
  Integer oldcomp;

  oldcomp = CurrentCompany;
  if (SetCompany(1,false)) then begin end;
  RecordNew(BuySellRequestr);
  BuySellRequestr.Price = StringToVal(dblstr,M4UVal);
  BuySellRequestr.MaxQty = StringToVal(l,M4UVal);
  BuySellRequestr.Qty = BuySellRequestr.MaxQty;
  BuySellRequestr.SellFlag = 0;
  wn = OpenWindow("SellRequestDClass",1,0,"","",BuySellRequestr);
  ResetCompany(oldcomp);
  return;
end;

global
updating procedure DblBookRest(string dblstr,string l,Integer currepwn)
begin
  Integer wn,nwn;
  record JobVc Jobr;
  record RestBookingVc RestBookingr;
  
  Jobr.SerNr = StringToLongInt(l);
  if (ReadFirstMain(Jobr,1,true)) then begin
    RecordNew(RestBookingr);
    RestBookingr.ResCode = Jobr.ResCode;
    RestBookingr.CUCode = FindJobCustomerCode(Jobr);
    RestBookingr.CUName = FindJobCustomerName(Jobr);
    RestBookingr.Contact = Jobr.CustContact;  
    RestBookingr.Persons = GetGuestsInJob(Jobr);
    nwn = OpenWindow("RestBookingDClass",1,0,"","",RestBookingr);
    DeselectWindow(nwn,false);
    WindowFieldGoto(nwn,RestBookingr,-1,"BookStart",true);
  end;
  return;
end;

global
procedure DblRecalculate(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  record RcVc curRepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  CloseWindow(currepwn);
  RunReport(RepSpec,0);   
  return;
end;

global
procedure DblARInstallVc(string dblstr,string l,Integer currepwn)
begin
  record ARInstallVc ARInstallr;
  Integer wn;
  
  ARInstallr.InvoiceNr = FirstInRange(l,10);
  ARInstallr.DueDate = FirstInRange(dblstr,10);
  if (ReadFirstMain(ARInstallr,2,true)) then begin
    wn = OpenWindow("ARInstallDClass",1,0,"","",ARInstallr);
  end;     
  return;
end;

global
updating procedure DblNewARInstallVc(string dblstr,string l,Integer currepwn)
begin
  record ARInstallVc ARInstallr;
  record IVVc IVr;
  Integer wn;
  
  IVr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    RecordNew(ARInstallr);
    ARInstallr.InvoiceNr = FirstInRange(l,10);
    ARInstallr.DueDate = AddDay(LastInRange(l,10),1);
    ARInstallr.CustCode = IVr.CustCode;
    ARInstallr.InstallNr = 0;
    ARInstallr.BookRVal = 0;
    ARInstallr.RVal = 0;
    ARInstallr.InstallNr = ARIInstallNr(ARInstallr.InvoiceNr,ARInstallr.DueDate);
    if (RecordStore(ARInstallr,false)) then begin
    end;
    DblRecalculate(dblstr,l,currepwn);
  end;
  return;
end;

global
procedure DblLitTaxXmlEn(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc curRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"LitTaxXmlEClass");    
    RepSpec.repname = "LitTaxXmlEn";
    RepSpec.Media = mtFile;
    RepSpec.f1 = curRepSpec.f1;
    RepSpec.f2 = curRepSpec.f2;
    RepSpec.f3 = curRepSpec.f3;
    RepSpec.f4 = curRepSpec.f4;
    RepSpec.f5 = curRepSpec.f5;
    RepSpec.flags[0] = curRepSpec.flags[0];
    RepSpec.flags[1] = curRepSpec.flags[1];
    RepSpec.flags[2] = curRepSpec.flags[2];
    RepSpec.flags[3] = curRepSpec.flags[3];
    RepSpec.flags[7] = curRepSpec.flags[7];
    RepSpec.flags[8] = curRepSpec.flags[8];
    RepSpec.Comparison = curRepSpec.Comparison;
    RepSpec.Period2Str = curRepSpec.Period2Str;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RunExport(RepSpec,true);   
  end;
  return;
end;
