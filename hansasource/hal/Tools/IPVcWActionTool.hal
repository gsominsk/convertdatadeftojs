external procedure IPPasteRowPayMode3(var row IPVc,string,string);
external procedure SpecialVAT2(val,var val);
external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
external function val TaxMatrixVATTotal(record TaxMatrixVc);
external function string 255 GetCustomerOnAccountAC(string);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external procedure RowCalculateTaxMatrix_IPVc(var record IPVc,Integer,row IPVc,Integer);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external function roundmode GetVATRoundMode(record RoundBlock);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure IV2Sumup(record IVVc,record SMVc,Integer,record SMVc,Boolean,Integer,var val,var val,var val,var val,var val,var val);
external function Boolean FindRPCUTax(string,Date,var record RPCUTaxVc);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external procedure WarnFutureDate(Boolean,Date);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external procedure GetFreeTxtData(string,var string,var string,Integer);
external function Boolean GetPM(string,var string,var string);
external function LongInt DateDiff(Date,Date);
external function Boolean WarnOldRecords(Date,string,LongInt);
external function Boolean DateWarned(Date,string);
external procedure Mul2VAT(string,val,var val,var val,Integer);
external function Integer PMCheckType(string,var string,var string);
external procedure GetBaseCurncy(Integer,var string);
external procedure IVSumup(var record IVVc,Boolean);
external function Boolean PasteCustInInv(var record IVVc);
external procedure IPSumup(var record IPVc);
external function Boolean GetAccCur(string,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function Boolean GetPMCurrency(string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

/*
procedure GetIPVAT(record AccBlock ARAb,record IVVc IVp,var val payvp,var val vatvalp,var string vatcode,var string taxtemplatecode)
BEGIN
  Integer i;
  Integer rwcnt;
  row IVVc IVrw;
  val v;
  
  vatvalp = blankval;
  vatcode = "";
  if (ARAb.IPBookVAT!=0) and (ARAb.NoPasteVATToIP==0) then begin
    if (nonblank(IVp.Sum3)) then begin
      v = IVp.Sum4;
      if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
        v = -v;
      end;
      if (v!=payvp) then begin
//        vatvalp = IVp.Sum3;
        v = payvp*IVp.Sum3;
        vatvalp = v/IVp.Sum4;
//if not entire amout is paste then not entire vat is rebooked
      end else begin
//        v = payvp*IVp.Sum4;
//        vatvalp = v/IVp.Sum4;
//if entire amout is paste then entire vat is rebooked
        vatvalp = IVp.Sum3;
      end;
      if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
        vatvalp = -vatvalp;
      end;
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (nonblank(IVrw.VATCode)) then begin
          vatcode = IVrw.VATCode;
          goto LGetIPVAT;
        end;
        if (nonblank(IVrw.TaxTemplateCode)) then begin
          taxtemplatecode = IVrw.TaxTemplateCode;
          goto LGetIPVAT;
        end;
      end;
    end;
  end;
LGetIPVAT:;
  return;
end;
*/

procedure FindPaidAmountPerTaxCode(record IVVc IVp,vector val vpaidexclvat,vector val vpaidinclvat,var val totexvat,var val totinvat)
begin
  record IPrsVc IPrsr;
  Boolean found;
  record IVVc cIVr;
  row IVVc cIVrw;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  
  totexvat = blankval;
  totinvat = blankval;
  found = true;
  IPrsr.IVNr = IVp.SerNr;
  while (LoopKey("IVKey",IPrsr,1,found)) begin
    if (IPrsr.IVNr!=IVp.SerNr) then begin found = false; end;
    if (found) then begin
      switch (IPrsr.TransType) begin
        case kIPrsTransTypeInvoice:
          cIVr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(cIVr,1,true)) then begin 
            if (cIVr.InvType==kInvoiceTypeCredit or cIVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
              rwcnt = MatRowCnt(cIVr);
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(cIVr,i,cIVrw);
                if ((nonblank(cIVrw.VATCode) or nonblank(cIVrw.TaxTemplateCode)) and cIVrw.Sum!=0) then begin
                  vpaidexclvat[cIVrw.VATCode] = vpaidexclvat[cIVrw.VATCode] + cIVrw.Sum;
                  vpaidexclvat[cIVrw.TaxTemplateCode] = vpaidexclvat[cIVrw.TaxTemplateCode] + cIVrw.Sum;

                  vpaidinclvat[cIVrw.VATCode] = vpaidinclvat[cIVrw.VATCode] + cIVrw.Sum;
                  vpaidinclvat[cIVrw.TaxTemplateCode] = vpaidinclvat[cIVrw.TaxTemplateCode] + cIVrw.Sum;
                  totexvat = totexvat + cIVrw.Sum;
                  totinvat = totinvat + cIVrw.Sum;
                end;
              end;
            end;
          end;          
        case kIPrsTransTypeReceipt:
          IPr.SerNr = IPrsr.TransNr;
          if (ReadFirstMain(IPr,1,true)) then begin 
            rwcnt = MatRowCnt(IPr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IPr,i,IPrw);
              if ((nonblank(IPrw.VATCode) or nonblank(IPrw.TaxTemplateCode)) and IPrw.InvVal!=0) then begin
                vpaidexclvat[IPrw.VATCode] = vpaidexclvat[IPrw.VATCode] + (IPrw.InvVal-IPrw.VATVal);
                vpaidexclvat[IPrw.TaxTemplateCode] = vpaidexclvat[IPrw.TaxTemplateCode] + (IPrw.InvVal-IPrw.VATVal);

                vpaidinclvat[IPrw.VATCode] = vpaidinclvat[IPrw.VATCode] + IPrw.InvVal;
                vpaidinclvat[IPrw.TaxTemplateCode] = vpaidinclvat[IPrw.TaxTemplateCode] + IPrw.InvVal;
                totexvat = totexvat + (IPrw.InvVal-IPrw.VATVal);
                totinvat = totinvat + IPrw.InvVal;
              end;
            end;
          end;          
        case kIPrsTransTypeNLTransaction:
//what to do with NL Transaction Receipts
        case kIPrsTransTypePurgeNLTransaction:
        case kIPrsTransTypeCashIn:
//no vat code on Cash In
        case kIPrsTransTypeCashOut:
//no vat code on Cash Out
      end;
    end;
  end;
  return;
end;

procedure AddToTaxMatrixInvoice(record IVVc TaxMatrixIVr,string TaxTemplateCode,val sum,record TaxMatrixVc aTMr)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  record TaxMatrixVc TMr;
  
  rwcnt = MatRowCnt(TaxMatrixIVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TaxMatrixIVr,i,IVrw);
    if (TaxTemplateCode==IVrw.TaxTemplateCode) then begin
      UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);      
      AddRowTaxMatrixToSumTaxMatrix(aTMr,TMr,TaxMatrixIVr.InclVAT);
      PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);  
      IVrw.Sum = IVrw.Sum + Sum;
      MatRowPut(TaxMatrixIVr,i,IVrw);
      goto LAddToTaxMatrixInvoice;
    end;
  end;
  ClearRow(TaxMatrixIVr,IVrw,1);
  IVrw.TaxTemplateCode = TaxTemplateCode;
  IVrw.Sum = Sum;
  PackRowFieldMatrix(IVrw,"TaxMatrix",aTMr);  
  MatRowPut(TaxMatrixIVr,rwcnt,IVrw);
LAddToTaxMatrixInvoice:;
  return;
end;

procedure PasteIPVAT(record AccBlock ARAb,record IVVc IVp,record IPVc IPr,Integer arownr,row IPVc IPrw)
begin
  Integer i;
  Integer rwcnt;
  row IVVc IVrw;
  row IPVc newIPrw;
  Integer rownr;
  record TaxMatrixVc TMr;
  vector val vpaidexclvat,vpaidinclvat;
  vector val vinvexclvat,vinvinclvat;
  val v,sum1,sum4,totexvat,totinvat;
  val tv,vatv,t1,prepv,sum;
  Array string 255 avatcodes;
  Array string 255 ataxcodes;
  Integer avatcnt,ataxcnt;
  vector Boolean avatcodesf;  
  record IVVc TaxMatrixIVr;
  record CUVc CUr;
  Integer IPBookVAT;

  CUr.Code = IVp.CustCode;
  ReadFirstMain(CUr,1,true);
  switch (CUr.IPBookVAT) begin
    case 1:
      IPBookVAT = 1;
    case 2:
      IPBookVAT = 0;
    otherwise
      IPBookVAT = ARAb.IPBookVAT;
  end;
  if (IVp.IPBookVAT!=0) then begin
    IPBookVAT = IVp.IPBookVAT;
  end;
  if (IPBookVAT!=0) and (ARAb.NoPasteVATToIP==0) then begin
    rownr = arownr;
    RecordClear(TaxMatrixIVr);
    
    FindPaidAmountPerTaxCode(IVp,vpaidexclvat,vpaidinclvat,totexvat,totinvat);
    sum1 = IVp.Sum1 - totexvat;
    sum4 = IVp.Sum4 - totinvat;

    rwcnt = MatRowCnt(IVp); 
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
        prepv = prepv + IVrw.Sum;
      end;
    end;
    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal) then begin
        if ((nonblank(IVrw.VATCode) or nonblank(IVrw.TaxTemplateCode)) and IVrw.Sum!=0) then begin
          sum = IVrw.Sum;
          if (nonblank(IVrw.VATCode)) then begin
            MulVATIV(IVrw.VATCode,sum,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
            SpecialVAT2(IVp.pdvrebt,vatv);
            vinvexclvat[IVrw.VATCode] = vinvexclvat[IVrw.VATCode] + sum;
            vinvinclvat[IVrw.VATCode] = vinvinclvat[IVrw.VATCode] + sum;
            if (IVp.InclVAT==0) then begin
              vinvinclvat[IVrw.VATCode] = vinvinclvat[IVrw.VATCode] + vatv;
            end else begin
              vinvexclvat[IVrw.VATCode] = vinvexclvat[IVrw.VATCode] - vatv;
            end;
            if (avatcodesf[IVrw.VATCode]==false) then begin
              avatcodes[avatcnt] = IVrw.VATCode;
              avatcnt = avatcnt + 1;
              avatcodesf[IVrw.VATCode] = true;
            end;
          end;
          if (nonblank(IVrw.TaxTemplateCode)) then begin
            UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
            AddToTaxMatrixInvoice(TaxMatrixIVr,IVrw.TaxTemplateCode,sum,TMr);          
            vinvexclvat[IVrw.TaxTemplateCode] = vinvexclvat[IVrw.TaxTemplateCode] + sum;
            vinvinclvat[IVrw.TaxTemplateCode] = vinvinclvat[IVrw.TaxTemplateCode] + sum + TaxMatrixVATTotal(TMr);
          end;
        end;
      end;
    end;
    for (i=0;i<avatcnt;i=i+1) begin
      ClearRow(IPr,newIPrw,1);
      CopyRow(IPr,IPrw,newIPrw); 
/*         
      if (IVp.InclVAT==0) then begin
        v = vinvinclvat[avatcodes[i]] - vpaidinclvat[avatcodes[i]];
      end else begin 
        v = vinvexclvat[avatcodes[i]] - vpaidexclvat[avatcodes[i]];
      end;
*/      
      v = vinvinclvat[avatcodes[i]] - vpaidinclvat[avatcodes[i]];

      if (v<0) then begin v = 0; end;
              
      newIPrw.InvVal = (IPrw.InvVal*v)/sum4;
      if (newIPrw.InvVal>IPrw.InvVal) then begin newIPrw.InvVal = IPrw.InvVal; end;
      newIPrw.BankVal = (IPrw.BankVal*v)/sum4;
      if (newIPrw.BankVal>IPrw.BankVal) then begin newIPrw.BankVal = IPrw.BankVal; end;
      newIPrw.RecVal = (IPrw.RecVal*v)/sum4;
      if (newIPrw.RecVal>IPrw.RecVal) then begin newIPrw.RecVal = IPrw.RecVal; end;
      newIPrw.InvOutstand = (IPrw.InvOutstand*v)/sum4;
      if (newIPrw.InvOutstand>IPrw.InvOutstand) then begin newIPrw.InvOutstand = IPrw.InvOutstand; end;
      if (newIPrw.InvOutstand!=0) then begin
        newIPrw.VATCode = avatcodes[i];
        Mul2VAT(newIPrw.VATCode,newIPrw.InvVal,vatv,t1,1);
        newIPrw.VATVal = vatv;
        if (rownr==arownr) then begin
          MatRowPut(IPr,rownr,newIPrw);
        end else begin
          MatRowInsert(IPr,rownr,newIPrw);
        end;
        rownr = rownr + 1;
      end;
    end;
        
    rwcnt = MatRowCnt(TaxMatrixIVr); 
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TaxMatrixIVr,i,IVrw);
      UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
      
      ClearRow(IPr,newIPrw,1);
      CopyRow(IPr,IPrw,newIPrw);

      tv = TaxMatrixVATTotal(TMr);
      v = IVrw.Sum + tv - vpaidinclvat[IVrw.TaxTemplateCode];

      if (v<0) then begin
        v = 0;
      end;
              
      newIPrw.InvVal = (IPrw.InvVal*v)/sum4;
      newIPrw.BankVal = (IPrw.BankVal*v)/sum4;
      newIPrw.RecVal = (IPrw.RecVal*v)/sum4;
      newIPrw.InvOutstand = (IPrw.InvOutstand*v)/sum4;
    
      if (newIPrw.InvOutstand!=0) then begin
        newIPrw.TaxTemplateCode = IVrw.TaxTemplateCode;
        PackRowFieldMatrix(newIPrw,"TaxMatrix",TMr);  
        if (rownr==arownr) then begin
          MatRowPut(IPr,rownr,newIPrw);
        end else begin
          MatRowInsert(IPr,rownr,newIPrw);
        end;
        if (nonblank(newIPrw.TaxTemplateCode)) then begin
          MatRowGet(IPr,rownr,newIPrw);
          RowCalculateTaxMatrix_IPVc(IPr,rownr,newIPrw,1);
          UnpackRowFieldMatrix(newIPrw,"TaxMatrix",TMr);
          newIPrw.VATVal = TaxMatrixVATTotal(TMr);
          MatRowPut(IPr,rownr,newIPrw);
        end;
        rownr = rownr + 1;
      end;
    end;
  end;
  return;
end;

global
procedure MatchIPRowSums(string paymod,string paymodrow,Date td,string invcur,var val invval,var string bankcur,var val bankval,string reccur,var val recval,
                         Boolean changebankcur,Boolean changebankval,Boolean invvalismaster)
BEGIN
  record PMBlock PMRec;
  row PMBlock pmrw;
  Integer rwcnt,i;
  string 5 pmcur;
  string 20 actualpaymod;

  actualpaymod = paymod;
  if (nonblank(paymodrow)) then begin
    actualpaymod = paymodrow;
  end;
  BlockLoad(PMRec);
  if (changebankcur) then begin
    rwcnt = MatRowCnt(PMRec);
    for (i = 0; i<rwcnt; i=i+1) begin
      MatRowGet(PMRec,i,pmrw);
      if (pmrw.Code==actualpaymod) then begin
        if (GetAccCur(pmrw.AccNr,pmcur)) then begin
        end;
      end;
    end;
  end;
  if (invval!=0) then begin
    if (recval==0) then begin recval = invval; end;
    if (bankval==0) then begin bankval = invval; end;
  end;
  if (invvalismaster) then begin
    if (invcur!=reccur) then begin
      CurValToOtherCur(td,invcur,invval,reccur,recval,DefaultCurRoundOff);
    end else begin
      recval = invval;
    end;
  end else begin
    if (invcur!=reccur) then begin
      CurValToOtherCur(td,reccur,recval,invcur,invval,DefaultCurRoundOff);
    end else begin
      invval = recval;
    end;
  end;
  if (changebankval) then begin
    if (invcur!=bankcur) then begin
      CurValToOtherCur(td,invcur,invval,bankcur,bankval,DefaultCurRoundOff);
    end else begin
      bankval = invval;
    end;
  end;
  if (changebankcur) then begin
    if (nonblank(pmcur)) then begin
      if (pmcur!=bankcur) then begin
        CurValToOtherCur(td,bankcur,bankval,pmcur,bankval,DefaultCurRoundOff);
        bankcur = pmcur;
      end;
    end;
  end;
  RETURN;
END;

global
procedure IPInvsum(record IPVc IPp,LongInt invnr,string curncy,var val isp)
BEGIN
  LongInt rwcnt;
  row IPVc IPrw;
  LongInt i;

  isp = blankval;
  rwcnt = MatRowCnt(IPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPp,i,IPrw);
    if (IPrw.ovst==0) then begin
      switch (IPrw.stp) begin
        case kReceiptRowTypeNormal:
          if (IPrw.InvoiceNr==invnr) then begin
            isp = isp + IPrw.InvVal;
          end;
        case kReceiptRowTypeSettlementDiscount:
          if (IPrw.InvoiceNr==invnr) then begin
            isp = isp + IPrw.InvVal;
          end;
        case kReceiptRowTypeBankFee:
          if (IPrw.InvoiceNr==invnr) then begin
            isp = isp + IPrw.InvVal;
          end;
        case kReceiptRowTypeWriteoff:
          if (IPrw.InvoiceNr==invnr) then begin
            isp = isp + IPrw.InvVal;
          end;
      end;
    end;
  end;
  return;
end;

global
function Boolean PasteInvIn2IPr(var record IPVc IPp,Integer rownr,Date TransDate,var val checkamountp,Boolean pasteinstf,var Boolean installmentf)
begin
  record APAccBlock APAccb;
  record RoundBlock RoundRec;
  record AccBlock ARAb;
  record BaseCurBlock bcur;
  record IPrsVc IPrsr;
  record ARVc ARr;
  record IVVc IVr;
  row IPVc iprp;
  row IPVc IPrw;
  row IPVc IP2rw;
  row IPVc cheqIPrw;
  Boolean vifound,res;
  string 255 t1,t2,tstr;
  string 2 vatcod,taxtemplatecode;
  string 20 curncy;
  string 20 curncycode,bankcurncy,thepm;
  val tv,rv,rebval,temp,taxv,t;
  val fr,to1,to2,br1,br2;
  val vatval,remval;
  LongInt rebdays;  
  Integer row1;
  string 10 invcur,bankcur,reccur;
  val invval,bankval,recval;
  record ARInstallVc ARInstallr;
  Date ARRebDate,ARRebDate2;
  Boolean rebf;
  LongInt chequenr;
  val chequerecval;

  MatRowGet(IPp,rownr,iprp);
  iprp.B1BankVal = blankval;
  iprp.B2BankVal = blankval;
  if (iprp.ChequeNr>0) then begin
    CopyRow(IPp,iprp,cheqIPrw);
  end;

  if (pasteinstf) then begin
    ARInstallr.InstallNr = iprp.InstNr;
    ARInstallr.InvoiceNr = iprp.InvoiceNr;
    installmentf = ReadFirstKey("InstallNr",ARInstallr,2,true);
    if (installmentf==false) then begin
      ARInstallr.InvoiceNr = iprp.InstNr;
      installmentf = ReadFirstKey("InvoiceNr",ARInstallr,1,true);
      iprp.InstNr = ARInstallr.InstallNr;
    end;
    iprp.InvoiceNr = ARInstallr.InvoiceNr;
    installmentf = false;
  end else begin
    ARInstallr.InvoiceNr = iprp.InvoiceNr;
    installmentf = ReadFirstKey("InvoiceNr",ARInstallr,1,true);
  end;
  
  BlockLoad(RoundRec);  
  BlockLoad(ARAb);
//  BlockLoad(APAccb);
  IPInvsum(IPp,iprp.InvoiceNr,iprp.InvCurncy,tv);
  checkamountp = blankval;
  tv = tv - iprp.InvVal;
  curncycode = iprp.InvCurncy;
  if (iprp.InvoiceNr>0) then begin
    IVr.SerNr = iprp.InvoiceNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      if ((IVr.OKFlag!=0) and (IVr.Invalid==0)) then begin
        iprp.ARAcc = IVr.ARAcc;
        iprp.CustCode = IVr.CustCode;
        iprp.CustName = IVr.Addr0;
        if (ARAb.ARUseObj!=0) then begin
          iprp.Objects = IVr.Objects;
        end;    
        IPPasteRowPayMode3(iprp,IPp.PayMode,"");
        iprp.CredManNr = IVr.CredManNr;
        curncycode = IVr.CurncyCode;
        fr = IVr.FrRate;
        to1 = IVr.ToRateB1;
        to2 = IVr.ToRateB2;
        br1 = IVr.BaseRate1;
        br2 = IVr.BaseRate2;
      end;
    end else begin
      iprp.ARAcc = ARAb.ARAcc;
      IPrsr.IVNr = iprp.InvoiceNr;
      IPrsr.TransType = kOPrsTransTypeNLTransaction;
      if (ReadFirstKey("IVKey",IPrsr,2,true)) then begin
         ARr.InvoiceNr = iprp.InvoiceNr;
         if (ReadFirstMain(ARr,1,true)) then begin
           iprp.CustCode = ARr.CustCode;
           iprp.CustName = ARr.CustName;
           iprp.ARAcc = IPrsr.AccNr;
           curncycode = ARr.ARCurncyCode;
           GetFullCurncyRate(curncycode,IPrsr.TransDate,fr,to1,to2,br1,br2);
         end;  
      end;
    end;
  end;
  iprp.PayDate = TransDate;

  if (iprp.InvoiceNr>0) then begin
    ARr.InvoiceNr = iprp.InvoiceNr;
    if (ReadFirstMain(ARr,1,true)) then begin
      remval = ARr.RVal;
      rv = ARr.RVal - tv;
      if (pasteinstf) then begin
        if (rv>ARInstallr.RVal) then begin
          rv = ARInstallr.RVal;
        end;
      end;
      rv = rv - checkamountp;
      ARRebDate = ARr.ARRebDate;
      ARRebDate2 = ARr.ARRebDate2;
    end;
  end;
  if (iprp.InvoiceNr<0) then begin
    iprp.ARAcc = GetCustomerOnAccountAC(iprp.CustCode);
  end;   

  
  if (IVr.pdvrebt!=0) then begin
    rebdays = DateDiff(ARRebDate,TransDate);
    if (rebdays>=0) then begin
      if (ARAb.DiscCashVAT!=0) then begin
        temp = rv - IVr.Sum3;
        rebval = temp*IVr.pdvrebt;
        rebval = rebval/100;
        rebval = Round(rebval,GetTotalRoundMode(RoundRec));
        rv = temp + IVr.Sum3;
      end else begin
        rebval = rv*IVr.pdvrebt;
        rebval = rebval/100;
        rebval = Round(rebval,GetTotalRoundMode(RoundRec));
      end;
      rv = rv - rebval;
      rebf = true;
    end;
  end;
  if (!rebf) then begin
    if (IVr.pdvrebt2!=0) then begin
      rebdays = DateDiff(ARRebDate2,TransDate);
      if (rebdays>=0) then begin
        if (ARAb.DiscCashVAT!=0) then begin
          temp = rv - IVr.Sum3;
          rebval = temp*IVr.pdvrebt2;
          rebval = rebval/100;
          rebval = Round(rebval,GetTotalRoundMode(RoundRec));
          rv = temp + IVr.Sum3;
        end else begin
          rebval = rv*IVr.pdvrebt2;
          rebval = rebval/100;
          rebval = Round(rebval,GetTotalRoundMode(RoundRec));
        end;
        rv = rv - rebval;
      end;
    end;
  end;
  if (nonblank(iprp.PayMode)) then begin
    thepm = iprp.PayMode;
  end else begin
    thepm = IPp.PayMode;
  end;
  if (GetPMCurrency(thepm,bankcurncy)) then begin end;
  iprp.BankCurncy = bankcurncy;
  iprp.RecCurncy = curncycode;
  iprp.InvCurncy = curncycode;
  iprp.InvVal = rv;
  iprp.RecVal = rv;
  t = rv/IVr.Sum4;
  iprp.TAX1Sum = t*IVr.TAX1Sum;  
  if (iprp.TAX1Sum==0) then begin
    iprp.TAX1Sum = blankval;
  end;
  if (bankcurncy!=curncycode) then begin
    CurValToOtherCur(IPp.TransDate,curncycode,rv,bankcurncy,t,DefaultCurRoundOff);
    iprp.BankVal = t;
   end else begin
    iprp.BankVal = rv;
  end;
  invcur = iprp.InvCurncy;
  invval = iprp.InvVal;
  bankcur = iprp.BankCurncy;
  bankval = iprp.BankVal;
  reccur = iprp.RecCurncy;
  recval = iprp.RecVal;  
  MatchIPRowSums(IPp.PayMode,iprp.PayMode,IPp.TransDate,invcur,invval,bankcur,bankval,reccur,recval,true,true,true);
  iprp.InvCurncy = invcur;
  iprp.InvVal = invval;
  iprp.BankCurncy = bankcur;
  iprp.BankVal = bankval;
  iprp.RecCurncy = reccur;
  iprp.RecVal = recval;
  iprp.InvOutstand = remval;
  iprp.TAX1Sum = iprp.TAX1Sum;
/*  
moved below
  GetIPVAT(ARAb,IVr,rv,vatval,vatcod,taxtemplatecode);
  iprp.VATVal = vatval;
  iprp.VATCode = vatcod;
  iprp.TaxTemplateCode = taxtemplatecode;
*/  
/*
calculated in  GetIPVAT 
  iprp.VATVal = blankval;
  if (nonblank(iprp.VATCode)) then begin
    Mul2VAT(iprp.VATCode,iprp.InvVal,t,rv,1);
    iprp.VATVal = t;
  end;    
*/  
  iprp.rkRecNumber = IVr.RefStr;
  iprp.InvoiceOfficialSerNr = IVr.OfficialSerNr;
  GetFullCurncyRate(iprp.BankCurncy,IPp.TransDate,iprp.FrRateBankVal,iprp.ToRateB1BankVal,iprp.ToRateB2BankVal,iprp.BaseRate1BankVal,iprp.BaseRate2BankVal);
  MatRowPut(IPp,rownr,iprp);
  res = true;  
  if (rebval!=0) then begin
    MatRowGet(IPp,rownr,IP2rw);
    row1 = rownr + 1;
    ClearRow(IPp,IPrw,5);
    IPrw.InvoiceNr = IP2rw.InvoiceNr;
    IPrw.CustCode = IVr.CustCode;
    IPrw.CustName = IVr.Addr0;
    if (ARAb.ARUseObj!=0) then begin
      IPrw.Objects = IVr.Objects;
    end;    
    IPPasteRowPayMode3(IPrw,IPp.PayMode,"");
    IPrw.PayDate = TransDate;
    IPrw.BankCurncy = bankcurncy;
    IPrw.RecCurncy = curncycode;
    IPrw.InvCurncy = curncycode;
    IPrw.InvVal = rebval;
    IPrw.RecVal = rebval;
    if (bankcurncy!=curncycode) then begin
      CurValToOtherCur(IPp.TransDate,curncycode,rebval,bankcurncy,t,DefaultCurRoundOff);
      IPrw.BankVal = t;
     end else begin
      IPrw.BankVal = rebval;
    end;
    invcur = IPrw.InvCurncy;
    invval = IPrw.InvVal;
    bankcur = IPrw.BankCurncy;
    bankval = IPrw.BankVal;
    reccur = IPrw.RecCurncy;
    recval = IPrw.RecVal;  
    MatchIPRowSums(IPp.PayMode,IPrw.PayMode,IPp.TransDate,invcur,invval,bankcur,bankval,reccur,recval,true,true,true);
    IPrw.InvCurncy = invcur;
    IPrw.InvVal = invval;
    IPrw.BankCurncy = bankcur;
    IPrw.BankVal = bankval;
    IPrw.RecCurncy = reccur;
    IPrw.RecVal = recval;  
    if (HasLocalization("POL")) then begin
      BlockLoad(bcur);
      if ((IPrw.BankCurncy==bcur.BaseCur1) or (blank(IPrw.BankCurncy))) then begin
        IPrw.B1BankVal = IPrw.BankVal;  
      end;
    end;  
    MatRowPut(IPp,row1,IPrw);
  end;

  PasteIPVAT(ARAb,IVr,IPp,rownr,iprp);

  if (res) then begin
    IPSumup(IPp);
  end;
  if (cheqIPrw.ChequeNr>0) then begin
    if ((cheqIPrw.RecVal-iprp.RecVal)>0) then begin
      cheqIPrw.RecVal = cheqIPrw.RecVal - iprp.RecVal;
      cheqIPrw.InvoiceNr = -1;
      MatRowPut(IPp,MatRowCnt(IPp),cheqIPrw);
      IPSumup(IPp);
    end;
  end;
  PasteInvIn2IPr = res;
  RETURN;  
END;

global
procedure PastePrepIPInInv(record IPVc IPp,var record IVVc IVp)
BEGIN
  row IPVc IPrw;
  row IVVc IVrw;
  string 255 tstr;
  val fr,to1,to2,br1,br2;
  string 10 curncy,salesacc,vatcode;
  record ORVc ORr;
  
  IVp.InvType = kInvoiceTypePrepayment;
  IVp.UpdStockFlag = 0;
  IVp.TransDate = IPp.TransDate;
  IVp.InvDate = IPp.TransDate;
  MatRowGet(IPp,0,IPrw);
  if (IPrw.OrderNr>0) then begin
    ORr.SerNr = IPrw.OrderNr;
    ReadFirstMain(ORr,1,true);
    IVp.OrgCust = ORr.CustCode;
  end;
  IVp.CustCode = IPrw.CustCode;
  if (PasteCustInInv(IVp)) then begin end;
  curncy = IPrw.InvCurncy;
  GetFullCurncyRate(curncy,IVp.TransDate,fr,to1,to2,br1,br2);
  IVp.CurncyCode = curncy;
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1;
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;
  IVp.PRCode = "";
  IVp.Location = "";
  ClearRow(IVp,IVrw,1);
  IVrw.Spec = USetStr(1288);
  IVrw.Quant = blankval;
  IVrw.Sum = IPrw.InvVal;
  IVrw.VATCode = IPrw.VATCode;
  IVrw.FIFO = blankval;
  IVrw.FIFORowVal = blankval;
  GetFreeTxtData(IVp.CustCode,vatcode,salesacc,IVp.ExportFlag);
  IVrw.SalesAcc = salesacc;
  MatRowPut(IVp,0,IVrw);
  IVp.InclVAT = 1;//must include vat , cause receipt does and roundof problems appear
  IVSumup(IVp,true);
  IVp.Sum3 = IPrw.VATVal; // A bit weak, what if other fields get changed..... 
  IVp.Sum1 = IPrw.InvVal;
  IVp.ReceiptInfo = IPrw.CUPNr & " " & IPp.TransDate;
  RETURN;
END;

procedure PasteInvWriteoffRowInIP(var record IPVc IPp,record IVVc IVr,record AccBlock ARAccb,LongInt InvoiceNr,string vatcode,val writeofv,val vatv,Integer rownr)
begin
  row IPVc IPrw;
  string 20 thepm,bankcurncy;
  string 10 invcur,bankcur,reccur;
  val invval,bankval,recval;
  val tv;

  ClearRow(IPp,IPrw,kReceiptRowTypeWriteOff);
  IPrw.InvoiceNr = InvoiceNr;
  IPrw.WriteOffAcc = ARAccb.WriteOffLossAcc;
  if (blank(IPrw.WriteOffAcc)) then begin
    IPrw.WriteOffAcc = ARAccb.CredAcc;
  end;
  IPrw.ARAcc = IVr.ARAcc;
  IPrw.CustCode = IVr.CustCode;
  IPrw.CustName = IVr.Addr0;
  IPrw.CredManNr = IVr.CredManNr;
  if (ARAccb.ARUseObj!=0) then begin
    IPrw.Objects = IVr.Objects;
  end;    
  IPPasteRowPayMode3(IPrw,IPp.PayMode,"");
  IPrw.PayDate = IPp.TransDate;
  if (nonblank(IPrw.PayMode)) then begin
    thepm = IPrw.PayMode;
  end else begin
    thepm = IPp.PayMode;
  end;
  if (GetPMCurrency(thepm,bankcurncy)) then begin end;
  IPrw.BankCurncy = bankcurncy;
  IPrw.RecCurncy = IVr.CurncyCode;
  IPrw.InvCurncy = IVr.CurncyCode;
  IPrw.VATCode = vatcode;
  IPrw.VATVal = vatv;
  IPrw.InvVal = writeofv;
  IPrw.RecVal = writeofv;
  IPrw.BankVal = writeofv;
  if (bankcurncy!=IVr.CurncyCode) then begin
    CurValToOtherCur(IPp.TransDate,IVr.CurncyCode,writeofv,bankcurncy,tv,DefaultCurRoundOff);
    IPrw.BankVal = tv;
    CurValToOtherCur(IPp.TransDate,IVr.CurncyCode,vatv,bankcurncy,tv,DefaultCurRoundOff);
    IPrw.VATVal = tv;
  end;
  invcur = IPrw.InvCurncy;
  invval = IPrw.InvVal;
  bankcur = IPrw.BankCurncy;
  bankval = IPrw.BankVal;
  reccur = IPrw.RecCurncy;
  recval = IPrw.RecVal;  
  MatchIPRowSums(IPp.PayMode,IPrw.PayMode,IPp.TransDate,invcur,invval,bankcur,bankval,reccur,recval,true,true,true);
  IPrw.InvCurncy = invcur;
  IPrw.InvVal = invval;
  IPrw.BankCurncy = bankcur;
  IPrw.BankVal = bankval;
  IPrw.RecCurncy = reccur;
  IPrw.RecVal = recval;
  MatRowInsert(IPp,rownr,IPrw);
  return;
end;

function Boolean PasteInvWriteoffInIP(var record IPVc IPp,record AccBlock ARAccb,LongInt InvoiceNr,Integer rownr)
begin
  Boolean res;
  row IPVc IPrw;
  record ARVc ARr;
  record IVVc IVr;
  string 20 thepm,bankcurncy;
  val tv,writeofv,vatv,t1;
  record RPCUTaxVc RPCUTaxr;
  Integer vati,vatcnt;
  record SMVc VATr;
  row SMVc VATrw;
  record SMVc Tax2r;
  val s0,s1,s2,s3,s4,TotGP;
  Boolean calcperceppercuf;
  record RoundBlock Roundb;

  IVr.SerNr = InvoiceNr;
  if (ReadFirstMain(IVr,1,true)) then begin  
    if (IVr.Invalid==0) then begin
      BlockLoad(Roundb);
      IPInvsum(IPp,InvoiceNr,IVr.CurncyCode,tv);
      ARr.InvoiceNr = InvoiceNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        writeofv = ARr.RVal - tv;
      end;
      if (writeofv!=0) then begin
        SetupVATBase(VATr,vatcnt);
        calcperceppercuf = FindRPCUTax(IVr.CustCode,IVr.InvDate,RPCUTaxr);
        IV2Sumup(IVr,VATr,vatcnt,Tax2r,calcperceppercuf,0,s0,s1,s2,s3,s4,TotGP);  
    
        for (vati=0;vati<vatcnt;vati=vati+1) begin
          MatRowGet(VATr,vati,VATrw);
          switch (Roundb.VATCalcWay) begin
            case 0:
              if (VATrw.DebVal!=0) then begin
                tv = (VATrw.DebVal*writeofv)/IVr.Sum4;
                MulVATIV(VATrw.VATCode,tv,vatv,t1,IVr.InclVAT,IVr.NoTAXonVAT);
                vatv = Round(vatv,GetVATRoundMode(Roundb));
                tv = tv + vatv;
                PasteInvWriteoffRowInIP(IPp,IVr,ARAccb,InvoiceNr,VATrw.VATCode,tv,vatv,rownr);
              end;
            case 1:
              if (VATrw.CredVal2!=0) then begin
                tv = (VATrw.DebVal*writeofv)/IVr.Sum4;
                vatv = (VATrw.CredVal2*writeofv)/IVr.Sum4;
                tv = tv + vatv;
                PasteInvWriteoffRowInIP(IPp,IVr,ARAccb,InvoiceNr,VATrw.VATCode,tv,vatv,rownr);
              end;
          end;
        end;
        res = true;
      end;
    end else begin
      res = false;
    end;
  end else begin
    res = false;
  end;
  PasteInvWriteoffInIP = res;
  return;
end;

global
function Boolean PasteInvInIPr(var record IPVc IPp,row IPVc iprp,Integer rownr,Integer rowtype)
begin
  Boolean res;
  record ARVc ARr;
  record IVVc IVr;
  row IPVc iprw2;
  record CUVc CUr;
  val tv,rv;
  val fr,to1,to2,br1,br2;
  string 20 curncycode,thepm,bankcurncy;
  row IPVc IPrw;
  record AccBlock ARAccb;
  string 10 invcur,bankcur,reccur;
  val invval,bankval,recval;
  
  res = true;
  ClearRow(IPp,IPrw,rowtype);
  BlockLoad(ARAccb);
  MatRowGet(IPp,rownr-1,iprw2);
  IPrw.InvoiceNr = iprw2.InvoiceNr;
  IPrw.InvoiceOfficialSerNr = iprw2.InvoiceOfficialSerNr;
  if (IPrw.stp==kReceiptRowTypeWriteOff) then begin
    if (ARAccb.PostWriteOffVAT!=0) then begin
      res = PasteInvWriteoffInIP(IPp,ARAccb,IPrw.InvoiceNr,rownr);
      goto LPasteInvInIPr;
    end;
    IPrw.WriteOffAcc = ARAccb.WriteOffLossAcc;
    if (blank(IPrw.WriteOffAcc)) then begin
      IPrw.WriteOffAcc = ARAccb.CredAcc;
    end;
  end;
  IVr.SerNr = iprw2.InvoiceNr;
  if (ReadFirstMain(IVr,1,true)) then begin
    IPInvsum(IPp,iprw2.InvoiceNr,IVr.CurncyCode,tv);
    if (IVr.Invalid==0) then begin
      IPrw.ARAcc = IVr.ARAcc;
      IPrw.CustCode = IVr.CustCode;
      IPrw.CustName = IVr.Addr0;
      IPrw.CredManNr = IVr.CredManNr;
      if (ARAccb.ARUseObj!=0) then begin
        IPrw.Objects = IVr.Objects;
      end;    
      IPPasteRowPayMode3(IPrw,IPp.PayMode,"");
      curncycode = IVr.CurncyCode;
      fr = IVr.FrRate;
      to1 = IVr.ToRateB1;
      to2 = IVr.ToRateB2;
      br1 = IVr.BaseRate1;
      br2 = IVr.BaseRate2;
    end else begin
      res = false;
      goto LPasteInvInIPr;
    end;
  end else begin
    if (IPrw.stp==kReceiptRowTypeBankFee) then begin
      CUr.Code = iprw2.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        IPrw.CustCode = CUr.Code;
        IPrw.Comment = CUr.Name;
        curncycode = CUr.CurncyCode;
      end else begin
        res = false;
        goto LPasteInvInIPr;
      end;
    end else begin
      res = false;
      goto LPasteInvInIPr;
    end;
  end;
  IPrw.PayDate = IPp.TransDate;
  if (nonblank(IPrw.PayMode)) then begin
    thepm = IPrw.PayMode;
  end else begin
    thepm = IPp.PayMode;
  end;
  if (GetPMCurrency(thepm,bankcurncy)) then begin end;
  ARr.InvoiceNr = iprw2.InvoiceNr;
  if (IPrw.stp==kReceiptRowTypeBankFee) then begin curncycode = bankcurncy; end;
  IPrw.BankCurncy = bankcurncy;
  IPrw.RecCurncy = curncycode;
  IPrw.InvCurncy = curncycode;
  if ((ReadFirstMain(ARr,1,true)) or (IPrw.stp==kReceiptRowTypeBankFee)) then begin
    rv = ARr.RVal - tv;
    IPrw.BankCurncy = bankcurncy;
    IPrw.RecCurncy = curncycode;
    IPrw.InvCurncy = curncycode;
    if (IPrw.stp==kReceiptRowTypeBankFee) then begin rv = 0; end;
    IPrw.InvVal = rv;
    IPrw.RecVal = rv;
    if (bankcurncy!=curncycode) then begin
      CurValToOtherCur(IPp.TransDate,curncycode,rv,bankcurncy,tv,DefaultCurRoundOff);
      IPrw.BankVal = tv;
    end else begin
      IPrw.BankVal = rv;
    end;
    invcur = IPrw.InvCurncy;
    invval = IPrw.InvVal;
    bankcur = IPrw.BankCurncy;
    bankval = IPrw.BankVal;
    reccur = IPrw.RecCurncy;
    recval = IPrw.RecVal;  
    MatchIPRowSums(IPp.PayMode,IPrw.PayMode,IPp.TransDate,invcur,invval,bankcur,bankval,reccur,recval,true,true,true);
    IPrw.InvCurncy = invcur;
    IPrw.InvVal = invval;
    IPrw.BankCurncy = bankcur;
    IPrw.BankVal = bankval;
    IPrw.RecCurncy = reccur;
    IPrw.RecVal = recval;
    MatRowInsert(IPp,rownr,IPrw);
  end;
LPasteInvInIPr:;
  PasteInvInIPr = res;
  return;
end;

global
procedure IPDDefault(Integer rownr,string activefield,var record IPVc IPp)
BEGIN
  Integer rwcnt;
  row IPVc IPrw;
  val t;

  rwcnt = MatRowCnt(IPp);
  if ((rownr!=-1) and (rownr<rwcnt)) then begin
    MatRowGet(IPp,rownr,IPrw);
    switch (activefield) begin
      case "RecVal": 
        if (IPrw.InvCurncy!=IPrw.RecCurncy) then begin
          CurValToOtherCur(IPp.TransDate,IPrw.InvCurncy,IPrw.InvVal,IPrw.RecCurncy,t,DefaultCurRoundOff);
          IPrw.RecVal = t;
        end else begin
          IPrw.RecVal = IPrw.InvVal;
        end;
        IPSumup(IPp);
      case "BankVal":
        if (IPrw.InvCurncy!=IPrw.BankCurncy) then begin
          CurValToOtherCur(IPp.TransDate,IPrw.InvCurncy,IPrw.InvVal,IPrw.BankCurncy,t,DefaultCurRoundOff);
          IPrw.BankVal = t;
        end else begin
          IPrw.BankVal = IPrw.InvVal;
        end;
        MatRowPut(IPp,rownr,IPrw);
        IPSumup(IPp);
    end;
  end;
  RETURN;
END;

function Integer PasteARPayInIP(record IPVc IPp,row IPVc IPrwp)
BEGIN
  record ARPayVc ARPayr;
  Integer res;
  string 10 invcur,bankcur,reccur;
  val invval,bankval,recval;
  
  ARPayr.CUPNr = IPrwp.CUPNr;
  if (ReadFirstMain(ARPayr,1,true)) then begin
    if (IPrwp.CustCode==ARPayr.CustCode) then begin
      IPrwp.InvVal = ARPayr.RVal;
      IPrwp.InvCurncy = ARPayr.CurncyCode;
      invcur = IPrwp.InvCurncy;
      invval = IPrwp.InvVal;
      bankcur = IPrwp.BankCurncy;
      bankval = IPrwp.BankVal;
      reccur = IPrwp.RecCurncy;
      recval = IPrwp.RecVal;
      MatchIPRowSums(IPp.PayMode,IPrwp.PayMode,IPp.TransDate,invcur,invval,bankcur,bankval,reccur,recval,true,true,true);
      IPrwp.InvCurncy = invcur;
      IPrwp.InvVal = invval;
      IPrwp.BankCurncy = bankcur;
      IPrwp.BankVal = bankval;
      IPrwp.RecCurncy = reccur;
      IPrwp.RecVal = recval;      
      IPrwp.TAX1Sum = ARPayr.TAX1Sum;
    end else begin
      res = 1218;
    end;
  end else begin
    res = 1253;
  end;
  PasteARPayInIP = res;
  RETURN;
END;

global
function Integer WriteOffPrePayment(Integer rownr,var record IPVc IPp)
BEGIN
  Integer res;
  row IPVc IPrw;
  Integer rwcnt;

  res = 1459;
  rwcnt = MatRowCnt(IPp);
  if ((rownr!=-1) and (rownr<rwcnt)) then begin
    MatRowGet(IPp,rownr,IPrw);
    if (IPrw.InvoiceNr!=-1) then begin goto LWriteOffPrePayment; end;
    if (IPrw.CUPNr==-1) then begin goto LWriteOffPrePayment; end;
    if (blank(IPrw.CustCode)) then begin goto LWriteOffPrePayment; end;
    if (PasteARPayInIP(IPp,IPrw)!=0) then begin goto LWriteOffPrePayment; end;
    IPrw.InvVal = -IPrw.InvVal;
    IPrw.RecVal = -IPrw.RecVal;
    IPrw.BankVal = -IPrw.BankVal;
    MatRowPut(IPp,rownr,IPrw);
    IPSumup(IPp);
    res = 0;
  end;
 LWriteOffPrePayment:; 
  WriteOffPrePayment = res;
  RETURN;
END;

global
function Boolean CLInforIPExists(LongInt ipnr,string filename,var LongInt clinser)
BEGIN
  Boolean res;
  record CLInIVVc CLInIVr;
  
  CLInIVr.SerNr = ipnr;
  CLInIVr.FileName = filename;
  res = ReadFirstKey("FileName",CLInIVr,2,true);
  clinser = CLInIVr.CLInNr;
  CLInforIPExists = res;
  RETURN;
END;

function val FindTotIPAmount(record IPVc IPr,Date td,string crncycode,var string custcode,var Integer ipcnt)
BEGIN
  val res,t;
  row IPVc IPrw;
  Integer i,rwcnt;
  
  custcode = "";
  rwcnt = MatRowCnt(IPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPr,i,IPrw);
    CurValToOtherCur(td,IPrw.BankCurncy,IPrw.BankVal,crncycode,t,DefaultCurRoundOff);
    res = res + t;
    custcode = IPrw.CustCode;
  end;
  ipcnt = rwcnt;
  if (ipcnt>1) then begin
    custcode = "";
  end;
  FindTotIPAmount = res;
  RETURN;
END;

global
function Integer DoCLInFromIPD(var record IPVc IPr,var record CLInVc CLInp,Boolean readf)
BEGIN
  Integer res;
  LongInt clin;
  record MainCLBlock MainCLRec;
  string 255 tstr;
  val frrate,to1,to2,br1,br2;
  Integer ipcnt;
  string 20 custcode;
  record CUVc CUr;
  string 5 crncy;

  if (readf) then begin
    if (ReadFirstMain(IPr,0,true)) then begin end;  
  end;
  BlockLoad(MainCLRec);
  if (IPr.OKFlag!=0) then begin  
    RecordNew(CLInp);
    if (MainCLRec.CashCollection!=0) then begin
      if (PMCheckType(IPr.PayMode,tstr,tstr)!=5) then begin
        res = 1;
        goto LDoCLInFromIPD;
      end;
      if (CLInforIPExists(IPr.SerNr,"IPVc",clin)) then begin
        res = 2;
        goto LDoCLInFromIPD;
      end;
      CLInp.RefStr = USetStr(1151) & "." & IPr.SerNr;
    end;
    CLInp.SerNr = -1;
    CLInp.NetVal = blankval;
    CLInp.VATVal = blankval;
    CLInp.TransDate = CurrentDate;
//either this          
    CLInp.PayMode = IPr.PayMode;
    if (GetPM(CLInp.PayMode,tstr,tstr)==false) then begin
      CLInp.PayMode = "";
    end;  
    if (blank(CLInp.PayMode)) then begin
      CLInp.PayMode = MainCLRec.DefPM;
    end;
//or this      
/*      
    CLInp.PayMode = IPr.PayMode;
    if (GetPM(CLInp.PayMode,tstr,tstr)==false) then begin
      CLInp.PayMode = "";
    end;  
    if (blank(CLInp.PayMode)) then begin
      CLInp.PayMode = MainCLRec.DefPM;
    end;
*/    
    CLInp.CorspCode = MainCLRec.DefCorspCode;
    CLInp.Person = "";
    CLInp.Comment = IPr.Comment;
    GetBaseCurncy(1,tstr);
    CLInp.CurncyCode = tstr;
    CLInp.FileName = "IPVc";
    CLInp.FSerNr = IPr.SerNr;  
    crncy = CLInp.CurncyCode;
    GetFullCurncyRate(crncy,CLInp.TransDate,frrate,to1,to2,br1,br2);
    CLInp.CurncyCode = crncy;
    CLInp.FrRate = frrate;
    CLInp.ToRateB1 = to1; 
    CLInp.ToRateB2 = to2;
    CLInp.BaseRate1 = br1;
    CLInp.BaseRate2 = br2;
    CLInp.Total = FindTotIPAmount(IPr,CLInp.TransDate,CLInp.CurncyCode,custcode,ipcnt);
    if (ipcnt>1) then begin
      CLInp.ColFlag = 1;
    end else begin
      CUr.Code = custcode;
      if (ReadFirstMain(CUr,1,true)) then begin
        CLInp.CUCode = CUr.Code;
        CLInp.CUName = CUr.Name;
        CLInp.Addr0 = CUr.InvAddr0;
        CLInp.Addr1 = CUr.InvAddr1;
        CLInp.Addr2 = CUr.InvAddr2;
        CLInp.Addr3 = CUr.InvAddr3;
        CLInp.Addr4 = CUr.InvAddr4;
       end;
    end;
  end else begin
    res = 3;
  end;
LDoCLInFromIPD:;
  DoCLInFromIPD = res;
  RETURN;
END;

global
procedure IPVc_PasteBankCurncy(var record IPVc IPp,Integer rownr)
BEGIN
  row IPVc IPrw;
  val v,fr,to1,to2,br1,br2;

  MatRowGet(IPp,rownr,IPrw);
  if (IPrw.InvCurncy==IPrw.BankCurncy) then begin
    IPrw.BankVal = IPrw.InvVal;
  end else begin
    CurValToOtherCur(IPp.TransDate,IPrw.InvCurncy,IPrw.InvVal,IPrw.BankCurncy,v,DefaultCurRoundOff);
    IPrw.BankVal = v;
  end;
  MatRowPut(IPp,rownr,IPrw);
  IPSumup(IPp);
  RETURN
END;

procedure UpdateIPRowDate(var record IPVc IPp)
BEGIN
  row IPVc IPrw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(IPp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(IPp,i,IPrw);
    if (IPrw.ovst==0) then begin
      switch (IPrw.stp) begin
        case kReceiptRowTypeNormal: IPrw.PayDate = IPp.TransDate;
        case kReceiptRowTypeSettlementDiscount: IPrw.PayDate = IPp.TransDate;
        case kReceiptRowTypeWriteoff: IPrw.PayDate = IPp.TransDate;
        case kReceiptRowTypeBankFee: IPrw.PayDate = IPp.TransDate;
      end;
    end;
    MatRowPut(IPp,i,IPrw);
  end;
  RETURN
END;

global
procedure IPVc_PasteTransDate(var record IPVc IPp)
BEGIN
  Integer i,rwcnt;
  row IPVc IPrw;
  val fr,to1,to2,br1,br2;

  rwcnt = MatRowCnt(IPp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPp,i,IPrw);
    GetFullCurncyRate(IPrw.RecCurncy,IPp.TransDate,fr,to1,to2,br1,br2); 
    if (OtherExchangeRate(IPrw.FrRateBankVal,IPrw.ToRateB1BankVal,IPrw.ToRateB2BankVal,IPrw.BaseRate1BankVal,IPrw.BaseRate2BankVal,fr,to1,to2,br1,br2)) then begin 
      GetFullCurncyRate(IPrw.RecCurncy,IPp.TransDate,IPrw.FrRateBankVal,IPrw.ToRateB1BankVal,IPrw.ToRateB2BankVal,IPrw.BaseRate1BankVal,IPrw.BaseRate2BankVal); 
      MatRowPut(IPp,i,IPrw);
      IPVc_PasteBankCurncy(IPp,i);
    end;
  end;

  if (DateWarned(IPp.TransDate,"IPVc")) then begin
    MessageBox(1045,"");
  end;
  if (WarnOldRecords(IPp.TransDate,"IPVc",IPp.SerNr)) then begin
    MessageBox(2020,"");
  end;
  WarnFutureDate(true,IPp.TransDate);
  if ((HasLocalization("GBR")) and (IPp.OKFlag==0)) then begin//vatEnglish
    UpdateIPRowDate(IPp);
  end;
  RETURN
END;

global  
procedure IPVc_PasteTaxTemplateCode(var record IPVc IPp,Integer rownr)
begin
  row IPVc IPrw;
  record TaxMatrixVc TMr;

  MatRowGet(IPp,rownr,IPrw);
  IPrw.TaxTemplateCode = FillupTaxMatrix(1,"",IPrw.CustCode,"","",IPrw.TaxTemplateCode,TMr);//IPp.BranchID
  PackRowFieldMatrix(IPrw,"TaxMatrix",TMr);  
  MatRowPut(IPp,rownr,IPrw);
  RowCalculateTaxMatrix_IPVc(IPp,rownr,IPrw,1);
  MatRowPut(IPp,rownr,IPrw);
  MatRowGet(IPp,rownr,IPrw);
  UnpackRowFieldMatrix(IPrw,"TaxMatrix",TMr);
  IPrw.VATVal = CalculateTotalVATFromTaxMatrix(TMr,1);
  MatRowPut(IPp,rownr,IPrw);
  return;
end;

global  
function Boolean IPVc_PasteInvoiceOfficialSerNr(var record IPVc IPr,Integer rownr,var val chk,var Boolean installmentf)
begin
  Boolean res;
  record IVVc IVr;
  row IPVc IPrw;

  MatRowGet(IPr,rownr,IPrw);
  IVr.OfficialSerNr = IPrw.InvoiceOfficialSerNr;
  if (ReadFirstKey("OfficialSerNr",IVr,1,true)) then begin
    IPrw.InvoiceNr = IVr.SerNr;
    MatRowPut(IPr,rownr,IPrw);
    switch (IPrw.stp) begin
      case 1: 
        res = PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf);
        if (installmentf) then begin
          MessageBox(20772,"");
        end;
      case 5: res = PasteInvInIPr(IPr,IPrw,rownr,5);
      case 6: res = PasteInvInIPr(IPr,IPrw,rownr,6);
      case 7: res = PasteInvInIPr(IPr,IPrw,rownr,7);
    end;
  end;
  IPVc_PasteInvoiceOfficialSerNr = res;
  return;
end;
