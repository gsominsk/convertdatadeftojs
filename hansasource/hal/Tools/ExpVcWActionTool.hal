external function Integer ExpApprovalStatus(record ExpVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function roundmode DefaultRoundMode();
external procedure RoundVATSum(string,string,string,var val);
external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external procedure FindUserMailboxName(string,var string,var string);
external function string 60 AddObjectToObjectList(string,string);
forward procedure CalcExpRow(var record ExpVc,Integer);
external procedure GetACShortAccount(string,var string,var string);
external function Boolean GetAccName(string,var string,Integer);
external procedure NormalizeObjstr(var string);
external procedure AutoObj(var string);
external procedure ATransVal(val,val,string,string,var val,var val,Boolean);
external procedure ExpSumup(record ExpVc,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetSalesGroup(string,var string);

global
procedure ExpGetRate(var record ExpVc Expp)
begin
  val from,to1,to2,base1,base2;
 
  GetFullCurncyRate(Expp.CurncyCode,Expp.TransDate,from,to1,to2,base1,base2);
  Expp.FrRate = from;
  Expp.ToRateB1 = to1; 
  Expp.ToRateB2 = to2;
  Expp.BaseRate1 = base1;
  Expp.BaseRate2 = base2;
  return;
end;

global
procedure ExpGetRowRate(var record ExpVc Expp,Integer rownr)
begin
  row ExpVc Exprw;
  Date td;
 
  MatRowGet(Expp,rownr,Exprw);
  td = Exprw.ExpDate;
  if (blankdate(td)) then begin
    td = Expp.TransDate;
  end;
  GetFullCurncyRate(Exprw.BankCurncy,td,Exprw.FrRateBankVal,Exprw.ToRateB1BankVal,Exprw.ToRateB2BankVal,Exprw.BaseRate1BankVal,Exprw.BaseRate2BankVal);
  MatRowPut(Expp,rownr,Exprw);
  return;
end;

function Boolean PastePersonInExp(record ExpVc Expp)
BEGIN
  record UserVc Userr;
  Boolean found;
  string 255 tstr;
 
  Userr.Code = Expp.Person;
  found = ReadFirstMain(Userr,1,true);
  if (found) then begin
    Expp.Name = Userr.Name;
    Expp.Objects = Userr.PersObjx;
    GetSalesGroup(Expp.Person,tstr);
    Expp.SalesGroup = tstr;
  end;
  PastePersonInExp = found;
  RETURN;
END;

global
function Boolean ExpVc_PastePerson(var record ExpVc Expp)
BEGIN
  Boolean res;
  
  if (PastePersonInExp(Expp)) then begin
    ExpGetRate(Expp);
    res = true;
  end;
  ExpVc_PastePerson = res;
  RETURN;
END;

global
procedure ExpAccName(var record ExpVc Expp,Integer rownr)
BEGIN
  row ExpVc Exprw;
  record AccVc Accr;
  Boolean Accs;
  string 255 tstr;
  string 255 vatcode;
  string 10 accnr;
  record APAccBlock APAccRec;
  Integer row1;
  record ACShortVc ACShortr;

  MatRowGet(Expp,rownr,Exprw);
  accnr = Exprw.AccNumber;
  if (blank(accnr)) then begin
    Exprw.Comment = "";
    goto LExpAccName;
  end;
  MatRowPut(Expp,rownr,Exprw);
  Accr.AccNumber = accnr;
  Accs = ReadFirstKey("AccNumber",Accr,1,true);
  if (Accs==false) then begin
    tstr = USetStr(1023);
    Exprw.Comment = tstr;
  end else begin
    if ((nonblank(Exprw.Objects)) and (nonblank(Accr.Objects))) then begin
      Exprw.Objects = Exprw.Objects & ",";
    end;
    Exprw.Objects = Exprw.Objects & Accr.Objects;
    ACShortr.Code = Exprw.ACShort;
    if (ReadFirstMain(ACShortr,1,true)) then begin
      tstr = ACShortr.Comment;
    end else begin
      if (GetAccName(Exprw.AccNumber,tstr,60)) then begin end;
    end;
    Exprw.Comment = tstr;
    vatcode = Accr.VATCode;
    if (blank(vatcode)) then begin
      BlockLoad(APAccRec);
      vatcode = APAccRec.VATCodeDom;
    end;
    if (nonblank(vatcode)) and blank(Exprw.VATCode) then begin
      Exprw.VATCode = vatcode;
    end;
    MatRowPut(Expp,rownr,Exprw);
    if (nonblank(Accr.AutCode)) then begin
      ClearRow(Expp,Exprw,1);
      row1 = rownr+1;
      Exprw.AccNumber = Accr.AutCode;
      MatRowPut(Expp,row1,Exprw);
    end;
  end;
LExpAccName:;
  RETURN;
END;

function Boolean ExpAutoTrans(record ExpVc Expp,Integer rownr)
BEGIN
  row ExpVc Exprw;
  row AutVc Autrw;
  record AutVc Autr;
  Boolean res;
  Boolean Auts;
  LongInt i;
  LongInt anrows;
  Integer trow;
  val dval,crval,tval;
  row ExpVc OrgRow;
  Integer sf,nfr;
  Boolean backstep;
  string 255 tstr,tstrvat;
  Integer iv;
  LongInt blnkl;
  val blnkv;
  val od,oc;
  record AccVc Accr;

//  MatSize(wn,&sf,&nfr);
  ClearRow(Expp,OrgRow,1);
  MatRowGet(Expp,rownr,Exprw);
  Autr.Code = Exprw.AccNumber;
  if (rownr>=1) then begin
    MatRowGet(Expp,rownr-1,Exprw);
    if (Exprw.stp==1) then begin
      CopyRow(Expp,Exprw,OrgRow);
    end;
  end;
  if (blank(Autr.Code)) then begin goto LExpAutoTrans; end;
  Auts = ReadFirstMain(Autr,1,true);
  if (Auts==false) then begin goto LExpAutoTrans; end;
  res = true;
  anrows = MatRowCnt(Autr);
  if (anrows==0) then begin goto LExpAutoTrans; end;
  res = true;
  trow = rownr-1;
  for (i=0;i<anrows; i=i+1) begin
    MatRowGet(Autr,i,Autrw);
    trow = trow + 1;
    if (i==0) then begin
      if (trow>0) then begin
        if (Autrw.AccNumber=="!") then begin
          backstep = true;
          trow = trow - 1;
        end;
      end;
    end;
    if (trow>195) then begin goto LExpAutoTrans; end;
    if (trow>=MatRowCnt(Expp)) then begin
      ClearRow(Expp,Exprw,1);
    end;
      Exprw.stp = 1;
      Exprw.ovst = 0;
      blnkl = -1;
      tstr = Autrw.AccNumber;
      tstrvat = Autrw.VATCode;
      if (tstr=="#") then begin
        tstr = OrgRow.AccNumber;
        tstrvat = OrgRow.VATCode;
      end;
      if ((i==0) and (backstep==true)) then begin
        tstr = OrgRow.AccNumber;
        tstrvat = OrgRow.VATCode;
      end;
      Exprw.AccNumber = tstr;
      Exprw.VATCode = tstrvat;
      tstr = Autrw.objstr;
      if (tstr=="#") then begin
        tstr = OrgRow.Objects;
      end;
      if ((i==0) and (backstep==true)) then begin
        if (blank(tstr)) then begin
          tstr = OrgRow.Objects;
        end;
      end;
      AutoObj(tstr);
      Exprw.Objects = tstr;
      tstr = Autrw.comstr;
      if (tstr=="#") then begin
        tstr = OrgRow.Comment;
      end;
      if ((i==0) and (backstep==true)) then begin
        if (blank(tstr)) then begin
          tstr = OrgRow.Comment;
        end;
      end;
      if (blank(tstr)) then begin
        MatRowPut(Expp,trow,Exprw);
        ExpAccName(Expp,trow);
        MatRowGet(Expp,trow,Exprw);
      end else begin
        Exprw.Comment = tstr;
      end;      
      tstr = Autrw.VATCode;
      if (tstr=="#") or (tstr=="!") then begin
        tstr = OrgRow.VATCode;
      end;
      Exprw.VATCode = tstr;            
      if ((Autrw.dstr=="=") or (Autrw.cstr=="=")) then begin
        tval = 0;
        Exprw.Sum = 0;
        ExpSumup(Expp,tval);
        tval = -tval;
        Exprw.Sum = tval;
      end else begin
        od = blankval;
        oc = blankval;
        if (OrgRow.Sum>=0) then begin
          od = OrgRow.Sum;
        end else begin
          oc = -OrgRow.Sum;
        end;
        ATransVal(od,oc,Autrw.dstr,Autrw.cstr,dval,crval,Autr.DontSwap!=0);
        tval = dval - crval;
        Exprw.Sum = tval;
      end;
      if (blank(Exprw.VATCode)) then begin
        Accr.AccNumber = Exprw.AccNumber;
        ReadFirstMain(Accr,1,true);
        Exprw.VATCode = Accr.VATCode;
      end;
      MatRowPut(Expp,trow,Exprw);      
      CalcExpRow(Expp,trow);
  end;
  ExpSumup(Expp,tval);
//  TrDNewEF = sf+nfr*(trow+1);
LExpAutoTrans:;
  ExpAutoTrans = res;
  RETURN;
END;

global
function Boolean ExpVc_PasteACShort(var record ExpVc Expp,Integer rownr)
BEGIN
  Boolean res;
  row ExpVc Exprw;
  string 100 acc,obj;
  
  MatRowGet(Expp,rownr,Exprw);
  GetACShortAccount(Exprw.ACShort,acc,obj);
  Exprw.AccNumber = acc;
  if ((obj!=Exprw.Objects) or (blank(Exprw.Objects))) then begin
    if (nonblank(Exprw.Objects) and (nonblank(obj))) then begin
      Exprw.Objects = Exprw.Objects & ",";
    end;
  end;
  Exprw.Objects = Exprw.Objects & obj;
  obj = Exprw.Objects;
  NormalizeObjstr(obj);
  Exprw.Objects = obj;
  MatRowPut(Expp,rownr,Exprw);
  if (ExpAutoTrans(Expp,rownr)) then begin end;
  ExpAccName(Expp,rownr);
  res = true;
  ExpVc_PasteACShort = res;
  RETURN;
END;

global
function Boolean ExpVc_PasteAccNumber(var record ExpVc Expp,Integer rownr)
BEGIN
  Boolean res;
  row ExpVc Exprw;
  string 100 acc,obj;
  
  if (ExpAutoTrans(Expp,rownr)) then begin 
    MatRowGet(Expp,rownr,Exprw);
    if (blank(Exprw.Comment) and blank(Exprw.VATCode)) then begin 
      ExpAccName(Expp,rownr);
    end;
  end else begin
    ExpAccName(Expp,rownr);
  end;
  MatRowGet(Expp,rownr,Exprw);
  if (nonblank(Exprw.AccNumber)) then begin
    res = true;
  end;
  ExpVc_PasteAccNumber = res;
  RETURN;
END;

global
function Boolean ExpVc_PastePRCode(var record ExpVc Expp,Integer rownr)
BEGIN
  Boolean res;
  row ExpVc Exprw;
  record PRVc PRr;
  string 255 obj;
  
  MatRowGet(Expp,rownr,Exprw);
  PRr.Code = Exprw.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (nonblank(PRr.Objects)) then begin
      if ((PRr.Objects!=Exprw.Objects) or (blank(Exprw.Objects))) then begin
        if (nonblank(Exprw.Objects) and (nonblank(PRr.Objects))) then begin
          Exprw.Objects = Exprw.Objects & ",";
        end;
        Exprw.Objects = Exprw.Objects & PRr.Objects;
      end;
    end;
  end;
  obj = Exprw.Objects;
  NormalizeObjstr(obj);
  Exprw.Objects = obj;  
  MatRowPut(Expp,rownr,Exprw);
  res = true;
  ExpVc_PastePRCode = res;
  RETURN;
END;

procedure AddRowToCombinedWayList(var record WayListVc cWLr,row WayListVc aWLrw)
begin
  row WayListVc WLrw;
  Integer i,rwcnt;
  Boolean found;

  rwcnt = MatRowCnt(cWLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(cWLr,i,WLrw);
    if (WLrw.PRCode==aWLrw.PRCode) and (WLrw.Objects==aWLrw.Objects) then begin
      found = true;
      WLrw.Endkm = WLrw.Endkm + aWLrw.WDistVal*cWLr.CostPerkm;
      WLrw.WDistVal = WLrw.WDistVal + aWLrw.WDistVal;
      MatRowPut(cWLr,i,WLrw);
    end;
  end;
  if (found==false) then begin
    WLrw.PRCode = aWLrw.PRCode;
    WLrw.Endkm = aWLrw.WDistVal*cWLr.CostPerkm;
    WLrw.WDistVal = aWLrw.WDistVal;
    WLrw.Objects = aWLrw.Objects;
    MatRowPut(cWLr,MatRowCnt(cWLr),WLrw);
  end;
  return;
end;

procedure CombineWayListPerProject(var record WayListVc cWLr)
begin
  record WayListVc WLr;
  row WayListVc WLrw;
  Integer i,rwcnt;
  string 255 prcode,objects;
  
  WLr = cWLr;
  while (MatRowCnt(cWLr)) begin
    MatRowDelete(cWLr,0);
  end;
    
  rwcnt = MatRowCnt(WLr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(WLr,i,WLrw);
    prcode = WLrw.PRCode;
    objects = WLrw.Objects;
    if (blank(prcode)) then begin
      prcode = WLr.PRCode;
      objects = WLr.Objects;
    end;
//    if (nonblank(prcode)) then begin
    if (true) then begin
      WLrw.PRCode = prcode;
      WLrw.Objects = Objects;
      AddRowToCombinedWayList(cWLr,WLrw);
    end;
  end;
  return;
end;

global
function Boolean ExpVc_PasteWayList(var record ExpVc Expp,Integer arownr)
BEGIN
  Boolean res;
  row ExpVc Exprw;
  record WayListVc WayListr;
  row WayListVc WayListrw;
  record WLSettingsBlock WLSettingsr;
  record INVc INr;
  record ITVc ITr;
  record APAccBlock APAccRec;
  string 2 vatcode;
  Integer i,rwcnt,rownr;
  
  rownr = arownr;
  MatRowGet(Expp,rownr,Exprw);
  BlockLoad(WLSettingsr);
  vatcode = "";
  WayListr.SerNr = Exprw.WayList;
  if (ReadFirstMain(WayListr,1,true)) then begin
    CombineWayListPerProject(WayListr);
    if (blank(WLSettingsr.ItemCode)) then begin
      Exprw.PRCode = WayListr.PRCode;   
      Exprw.Objects = WayListr.Objects;
      if (nonblank(WayListr.Purpose)) then begin
        Exprw.Comment = WayListr.Purpose;
      end else begin
        Exprw.Comment = WayListr.Comment;
      end;
      Exprw.AccNumber = WLSettingsr.AccNumber;
      BlockLoad(APAccRec);
      Exprw.VATCode = APAccRec.VATCodeDom;
      Exprw.Sum = WayListr.TotalCost;
      MatRowPut(Expp,rownr,Exprw);
      CalcExpRow(Expp,rownr);
    end else begin
      rwcnt = MatRowCnt(WayListr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(WayListr,i,WayListrw);
        Exprw.PRCode = WayListrw.PRCode;   
        Exprw.Objects = AddObjectToObjectList(WayListr.Objects,WayListrw.Objects);
        INr.Code = WLSettingsr.ItemCode;
        if (ReadFirstMain(INr,1,true)) then begin
          Exprw.Item = WLSettingsr.ItemCode;
          vatcode = INr.VATCode;
        end;
        if (blank(vatcode)) and (nonblank(INr.Group)) then begin
          ITr.Code = INr.Group;
          if (ReadFirstMain(ITr,1,true)) then begin
            vatcode = ITr.VATCodeDom;
          end;
        end;
        if (blank(vatcode)) then begin
          BlockLoad(APAccRec);
          vatcode = APAccRec.VATCodeDom;
        end;
        Exprw.VATCode = vatcode;
        if (nonblank(INr.Name)) then begin
          Exprw.Comment = INr.Name;
        end else begin 
          Exprw.Comment = WLSettingsr.Comment;
        end;
        if (nonblank(INr.CostAcc)) then begin
          Exprw.AccNumber = INr.CostAcc;
        end else begin
          Exprw.AccNumber = WLSettingsr.AccNumber;
        end;
        Exprw.Sum = WayListrw.Endkm;
        Exprw.qty = WayListrw.WDistVal;
        MatRowPut(Expp,rownr,Exprw);
        CalcExpRow(Expp,rownr);
        rownr = rownr + 1;
      end;
    end;
  end;
  res = true;
  ExpVc_PasteWayList = res;
  RETURN;
END;

global
function Boolean ExpVc_PasteVECode(var record ExpVc Expp,Integer rownr)
BEGIN
  Boolean res;
  row ExpVc Exprw;
  record CUVc VEr;
  record APAccBlock APAccb;
  
  MatRowGet(Expp,rownr,Exprw);
  VEr.Code = Exprw.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
    BlockLoad(APAccb);
    Exprw.VEName = VEr.Name;
    Exprw.Identifier = VEr.VATNr;
    if (nonblank(VEr.VEVATCode)) then begin
      Exprw.VATCode = VEr.VEVATCode;
    end else begin
      if (blank(Exprw.VATCode)) then begin
        switch (VEr.ExportFlag) begin
          case 4: Exprw.VATCode = APAccb.VATCodeExp;
          case 3: Exprw.VATCode = APAccb.VATCodeEU;
          case 2: Exprw.VATCode = APAccb.VATCodeExp;
          case 1: Exprw.VATCode = APAccb.VATCodeEU;
          otherwise Exprw.VATCode = APAccb.VATCodeDom;
        end;
      end;
    end;
    MatRowPut(Expp,rownr,Exprw);
    res = true;
  end;
  ExpVc_PasteVECode = res;
  RETURN;
END;

global
updating function Integer CreateMailFromExpD(record ExpVc Expr,var record MailVc Mailr,var string warning,string pdfform)
BEGIN
  Integer res;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;  
  row ExpVc Exprw;  
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  Integer line;
  string 255 docname,fname;
  string 20 custemail;
  row MailTextVc MTrw;
  Integer IgnoreRecordDetails;
  
  res = 0;
  if (ReadFirstMain(Expr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromExpD;
  end;  
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  MailTextRow("ExpVc","","",MTrw,IgnoreRecordDetails);
  Mailr.Header = MTrw.Header;
  Mailr.Header = Mailr.Header & USetStr(1847);
  Mailr.Header = Mailr.Header & Expr.SerNr;
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin
    CreateRecordLink(Mailr,CurrentCompany,Expr,CurrentCompany);  
    CreateRecordLink(Expr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
//  AddCRToText(Mailr); this doesnt work on linux 
  tstr = "";
  LineTextPut(Mailr,line,tstr);
  line = line + 1;
  if (IgnoreRecordDetails==0) then begin
    rwcnt = MatRowCnt(Expr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Expr,i,Exprw);
      tstr = Exprw.AccNumber & TAB;
      tstr = tstr & ValToString(Exprw.Sum,M4UVal,"",".",0) & TAB;
      tstr = tstr & Left(Exprw.Comment,60) & TAB;
      if (Mailr.HtmlFlag==0) then begin
        LineTextPut(Mailr,line,tstr);
      end else begin
        LineTextPutToHtmlRecord(Mailr,tstr,false,true);
      end;
      line = line + 1;
    end;
LExpHIDDENLine:;    
    AddCRToText(Mailr);
    line = line + 1;
    tstr = TAB & TAB & TAB & "=====";
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    tstr = TAB & TAB & TAB & USetStr(2687) & TAB & Expr.PayVal;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    tstr = USetStr(7021) & " " & Expr.TransDate;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
  end;
  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "ExpForm";
  end;
  fname = "tmp/" & USetStr(1820) & Expr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(Expr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromExpD:;  
  CreateMailFromExpD = res;
  RETURN;
END;

global
procedure ExpVc_PasteDANr(var record ExpVc Expr,Integer rownr)
begin
  row ExpVc Exprw;
  record DAVc DAr;
  record PRVc PRr;
  record DABlock DAb;
  
  MatRowGet(Expr,rownr,Exprw);
  BlockLoad(DAb);
  MatRowGet(Expr,rownr,Exprw);
  DAr.SerNr = Exprw.DANr;
  ReadFirstMain(DAr,1,true);
  Exprw.AccNumber = DAb.DAAcc;
  Exprw.VATCode = DAb.VATCode;
  Exprw.Item = DAb.ItemCode;
  Exprw.qty = DAb.DefQuantity;
  Exprw.Comment = DAr.Comment;
  Exprw.Sum = DAr.PayVal;
  Exprw.PRCode = DAr.PRCode;
  PRr.Code = Exprw.PRCode;
  ReadFirstMain(PRr,1,true);
  Exprw.Objects = PRr.Objects;  
  MatRowPut(Expr,rownr,Exprw);
  if (blank(Exprw.Comment)) then begin
    ExpAccName(Expr,rownr);
  end;
  return;
end;

global
procedure ExpVc_PasteCurncyCode(var record ExpVc Expr)
begin
  row ExpVc Exprw;
  Integer i,rwcnt;
  val t;
  
  ExpGetRate(Expr);
  rwcnt = MatRowCnt(Expr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Expr,i,Exprw);
    CalcExpRow(Expr,i);
  end;
  ExpSumup(Expr,t);
  return;
end;

global
procedure GetVAT2Code(string vc,var val vval,var val ivprcp)
begin
  record VATCodeBlock VATb;
  row VATCodeBlock VATbrw;
  Integer rwcnt,i;
 
  BlockLoad(VATb);
  rwcnt = MatRowCnt(VATb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATb,i,VATbrw);
    if (vc==VATbrw.VATCode) then begin
      vval = VATbrw.ExVatpr;
      if (VATbrw.IncVatpr==blankval) then begin
        ivprcp = 100 - ((100/(100+VATbrw.ExVatpr))*100);
      end else begin
        ivprcp = VATbrw.IncVatpr;
      end;
      goto LGetVAT2Code;
    end;
  end;
LGetVAT2Code:;
  return;
end;

global
procedure CalcExpRow(var record ExpVc Expp,Integer rownr)
begin
  row ExpVc Exprw;
  val rval,vval;
  
  MatRowGet(Expp,rownr,Exprw);
  if (Exprw.Sum!=0) then begin
    GetVAT2Code(Exprw.VATCode,rval,vval);
    Exprw.VATSum = Exprw.Sum * vval;
    Exprw.VATSum = Exprw.VATSum / 100;
    Exprw.VATSum = Round(Exprw.VATSum,DefaultRoundMode);
    RoundVATSum(Expp.CurncyCode,"","ExpVc",Exprw.VATSum);
  end;
  if (blank(Exprw.BankCurncy)) then begin
    Exprw.BaseSum = MulRateToBase1(Expp.CurncyCode,Exprw.Sum,Expp.FrRate,Expp.ToRateB1,Expp.ToRateB2,Expp.BaseRate1,Expp.BaseRate2,DefaultCurRoundOff);
  end else begin
    Exprw.BaseSum = MulRateToBase1(Exprw.BankCurncy,Exprw.Sum,Exprw.FrRateBankVal,Exprw.ToRateB1BankVal,Exprw.ToRateB2BankVal,Exprw.BaseRate1BankVal,Exprw.BaseRate2BankVal,DefaultCurRoundOff);
  end;
  if (Exprw.BaseSum!=0) then begin
    GetVAT2Code(Exprw.VATCode,rval,vval);
    Exprw.BaseVATSum = Exprw.BaseSum * vval;
    Exprw.BaseVATSum = Exprw.BaseVATSum / 100;
    Exprw.BaseVATSum = Round(Exprw.BaseVATSum,DefaultRoundMode);
    RoundVATSum(Expp.CurncyCode,"","ExpVc",Exprw.BaseVATSum);
  end;
  MatRowPut(Expp,rownr,Exprw);
  ExpSumup(Expp,vval);
  return;
end;

global
procedure ExpDClassOnOpenWindowRemote(var record ExpVc Expr,var Integer AcceptanceStatusFlag)
begin
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  if (HasApprovals) then begin
    AcceptanceStatusFlag = ExpApprovalStatus(Expr,Acptr);
  end;
  return;
end;