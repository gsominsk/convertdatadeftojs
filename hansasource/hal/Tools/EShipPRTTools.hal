/* EShipPRTTools.hal */
external function val GetStockQty(string,string,Date,Boolean);
external updating function LongInt DoSHVcRecordCheck(var record SHVc,record SHVc,LongInt,LongInt,var LongInt,
                                                    var string,var integer,var string,Boolean);
external updating function LongInt DoRetPUVcRecordCheck(var record RetPUVc,record RetPUVc,LongInt,LongInt,
                                                        var LongInt,var string,var integer,var string,boolean);
external updating function Integer CheckStockMovRecord(var record StockMovVc,record StockMovVc,LongInt,LongInt,Boolean,
                                                      var LongInt,var string,var integer,var string,boolean);

global
updating function Boolean CheckEShipPRTItems_SHVc(record RcVc RepSpec,var LongInt error,var string errorstr,
                                                  var integer rownr,var string fieldstr)
begin
  boolean res;
  record SHVc SHr;
  record SHVc SH2r;
  row SHVc SHrw;  
  LongInt res2,check;
  Boolean UnOKedCheckSerialf;
  
  res = true;
  if (RepSpec.long1>0) then begin 
    SHr.SerNr = RepSpec.long1;
    if (ReadFirstMain(SHr,1,true)==false) then begin
      goto LCheckEShipPRTItems_SHVc;
    end;
  end;
  
  RecordCopy(SH2r,SHr);
  UnOKedCheckSerialf = true;
  check = 1;  
  res2 = DoSHVcRecordCheck(SHr,SH2r,Rs_normal,check,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);

  if (res2!=0) then begin 
    res = false;
  end;  

LCheckEShipPRTItems_SHVc:; 
  CheckEShipPRTItems_SHVc = res;
  return;
end;

global
updating function Boolean CheckEShipPRTItems_StockMovVc(record RcVc RepSpec,var LongInt error,var string errorstr,
                                                        var integer rownr,var string fieldstr)
begin
  boolean res;
  record StockMovVc StockMovr;
  record StockMovVc StockMov2r;  
  row StockMovVc StockMovrw;
  LongInt res2,check;
  Boolean UnOKedCheckSerialf;
  
  res = true;
  if (RepSpec.long1>0) then begin 
    StockMovr.SerNr = RepSpec.long1;
    if (ReadFirstMain(StockMovr,1,true)==false) then begin
      goto LCheckEShipPRTItems_StockMovVc;
    end;
  end;  
  
  RecordCopy(StockMov2r,StockMovr);
  UnOKedCheckSerialf = true;
  check = 1;
  
  res2 = CheckStockMovRecord(StockMovr,StockMov2r,Rs_normal,check,false,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
  if (res2!=0) then begin 
    res = false;
    if (error>0) then begin 
      RecordCheckError(error,errorstr,rownr,fieldstr);
    end;    
  end;    

LCheckEShipPRTItems_StockMovVc:;
  CheckEShipPRTItems_StockMovVc = res;
  return;
end;

global
updating function Boolean CheckEShipPRTItems_RetPUVc(record RcVc RepSpec,var LongInt error,var string errorstr,
                                                     var integer rownr,var string fieldstr)
begin
  boolean res;
  record RetPUVc RetPUr;
  record RetPUVc RetPU2r;
  LongInt res2,check;
  Boolean UnOKedCheckSerialf;
  
  res = true;
  if (RepSpec.long1>0) then begin 
    RetPUr.SerNr = RepSpec.long1;
    if (ReadFirstMain(RetPUr,1,true)==false) then begin
      goto LCheckEShipPRTItems_RetPUVc;
    end;
  end;    
  
  RecordCopy(RetPU2r,RetPUr);
  UnOKedCheckSerialf = true;
  check = 1;
  
  res2 = DoRetPUVcRecordCheck(RetPUr,RetPU2r,Rs_normal,check,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf);
  if (res2!=0) then begin 
    res = false;
  end;      
  
LCheckEShipPRTItems_RetPUVc:;
  CheckEShipPRTItems_RetPUVc = res;
  return;
end;
