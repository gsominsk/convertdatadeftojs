external procedure SendLogAction4(Integer,Integer,Integer,string,string);
external updating procedure UpdateLicesingSrvContact();
external updating procedure ConvertOldProductToStandardAccounts();
external procedure SetProductTags();
external procedure LoadWindowTags();
external function string 50 TimeToString(time,string,boolean); 
//external procedure SubscriptionTransMn(record RcVc);
//external procedure SubscriptionTransPayMn(record RcVc);
external procedure CallRegisterAtPresenceServer();
external updating procedure UpdateSettingsforCountries();
external procedure CheckforStandardOnStartup();
external updating procedure ExpiredMarketPlaceLicenseDisplay();
external function Boolean ProductInDemoMode();
external updating procedure StdLocationsCheck();
external procedure UpdateMasterWClassOnKPIs(string);
external updating procedure InitUniversityCache();
external updating procedure AskForNewUser();
external updating procedure InitIdleTasks();
external procedure InitSysRunIdleTasks(Integer);
external procedure InitTXIdleTasks();
external updating procedure SMSWhenNotProperlyTerminated();
external procedure RegisterAtPresenceServer(string,Integer,Integer,string,Boolean);
external function Boolean UniversityURLCacheNeedsUpdate();
external updating procedure InitAvailClientIdleTask();
external procedure InitSysRunEstIdleTasks();
external function string 255 StringToCode(string);
external procedure UpdateHWLicensesFromCloud();

// Same GetFeatureUsage as in IntEnabCl.hal
updating procedure GetFeatureUsage(record InternetEnablerBlock IEr,Boolean automatic,string hwaddress,Integer hwport,LongInt fcnt)
begin
  area msg;
  area reply;
  record SmartAppVc SmartAppr;
  record RegisterDefinitionVc RegisterDefinitionr;
  record FunctionUsageVc FunctionUsager;
  LongInt res,pos;
  Boolean foundf;
  Integer vers;
  LongInt i,regcnt;
  record FunctionUsageVc tmpFunctionUsager;
  record FunctionUsageVc oldFunctionUsager;
  Boolean testf;
  string 200 thekey;
  string 100 comment,tempst;
  Integer timeout;
  Boolean sendf;
  
  sendf = false;
  timeout = 60;
  if (IEr.HWTimeout>0) then begin
    timeout = IEr.HWTimeout + 10;
  end;
  LogText(14689,"GetFeatureUsage");
  HTSAddInt(msg,0); // Version
  HTSAddInt(msg,IEr.RegInCountry);
  HTSAddString(msg,IEr.CustomerCode);
  HTSAddLong(msg,IEr.Contract);
  HTSAddLong(msg,IEr.EnablerRegistration);
  HTSAddInt(msg,ProgramType);
  HTSAddLong(msg,fcnt);
  HTSAddInt(msg,10); // Number of fields in the send call
  foundf = true;
  FunctionUsager.Function = "";
  while (LoopMain(FunctionUsager,1,foundf)) begin
    comment = "";
    SmartAppr.UUID = FunctionUsager.App;
    if (ReadFirstKey("UUID",SmartAppr,1,true)) then begin
      comment = SmartAppr.Name;
    end;
    if (blank(comment)) then begin
      RegisterDefinitionr.Name = FunctionUsager.SpecFeature;
      thekey = "MainKey:" & FunctionUsager.App;
      if (ReadFirstKey(thekey,RegisterDefinitionr,1,true)) then begin
        comment = RegisterDefinitionr.Description;
      end;
    end;
    regcnt = 0;
    RegisterDefinitionr.Name = "";
    thekey = "MainKey:" & FunctionUsager.App;
    ResetLoop(RegisterDefinitionr);
    while (LoopKey(thekey,RegisterDefinitionr,1,true)) begin
      regcnt = regcnt + 1;
    end;
    HTSAddString(msg,FunctionUsager.Function);
    HTSAddInt(msg,FunctionUsager.FunctionType);
    HTSAddString(msg,FunctionUsager.SpecFeature);
    HTSAddUUID(msg,FunctionUsager.App);
    HTSAddLong(msg,FunctionUsager.TimesUsed);
    HTSAddDate(msg,FunctionUsager.FirstUsed);
    HTSAddLong(msg,FunctionUsager.Key);
    HTSAddString(msg,comment);
    HTSAddLong(msg,regcnt);
    HTSAddString(msg,tempst);
    if (blankdate(FunctionUsager.CanUseUntil)) then begin
      sendf = true;
    end else begin
      if (FunctionUsager.CanUseUntil<AddDay(CurrentDate,10)) then begin
        sendf = true;
      end;
    end;
  end;
  if (sendf) then begin
    res = HTSAreaSend(hwaddress,hwport,"HtsGetFeatureUsage","GetFeatureUsageReply",timeout,true,msg,reply);
    LogText(0,"GetFeatureUsage = " & res);
  end;
  return;
end;

updating procedure CallGetKeyFeature()
begin
  record InternetEnablerBlock IEr;
  string 200 hwaddress;
  Integer hwport;
  LongInt fcnt;
  
  LogText2(14689,"CallGetKeyFeature",kVerbosityDebug);
  BlockLoad(IEr);
  fcnt = CountRecords("FunctionUsageVc");
  if (false and fcnt>0) then begin
    hwaddress = IEr.HWAddress;
    hwport = IEr.HWPort;
    if (nonblank(hwaddress) and hwport>0) then begin
      GetFeatureUsage(IEr,true,hwaddress,hwport,fcnt);
    end;
  end;
  if (IsStandardProduct) then begin
    if (SingleUserMode or ServerMode) then begin
      ConvertOldProductToStandardAccounts;
    end;
  end;
  return;
end;

procedure ExportPublicIPs()
begin
  record PublicIPBlock PIPb;
  row PublicIPBlock PIPbw;
  string 200 tstr;
  Integer i,rwcnt;

  BlockLoad(PIPb);
  rwcnt = MatRowCnt(PIPb);
  if (rwcnt>0) then begin
    CreateFile("hob/serverip.dat");
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PIPb,i,PIPbw);
      tstr = PIPbw.Host;
      if (PIPbw.Port>0) then begin
         tstr = tstr & ":" & PIPbw.Port;
      end;
      ExportPadString(tstr,len(tstr)," ",false);
      NewLine;
    end;
    CloseFile;
  end;
  return;
end;

updating procedure CheckDatabaseID()
begin
  record DBERecordsBlock DBERb;
  
  BlockLoad(DBERb);
  if (nonblank(DBERb.DatabaseID)) then begin
    if (DBERb.DatabaseID!=DatabaseID) then begin
      DBERb.DBStatus = 0;
      DBERb.DatabaseID = "";
      BlockStore(DBERb);
    end;
  end;
  return;
end;

updating procedure ResetRecordStatusesServer()
begin
  record KPIDefVc KPIDefr;
  record KPIDefVc newKPIDefr;
  LongInt rwcnt,oldcomp,i;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  
  oldcomp = CurrentCompany;
  
  DBHold;
  
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(Compb,i,Comprw);
    if (blank(Comprw.TCPIP)) then begin
      if (SetServerCompanyCode(Comprw.CompCode)) then begin
        while (LoopMain(KPIDefr,1,true)) begin
          switch (KPIDefr.Status) begin
            case kKPIStatusInvalid:
            case kKPIStatusValid:
            case kKPIStatusInvalidCalculating:
              RecordCopy(newKPIDefr,KPIDefr);
              newKPIDefr.Status = kKPIStatusInvalid;
              RecordUpdate(KPIDefr,newKPIDefr,false);
            case kKPIStatusValidCalculating:
              RecordCopy(newKPIDefr,KPIDefr);
              newKPIDefr.Status = kKPIStatusValid;
              RecordUpdate(KPIDefr,newKPIDefr,false);
          end;
        end;
      end;
    end;
  end;  
  ResetCompany(oldcomp);
  
  DBFlush;
  return;
end;

updating procedure ResetRecordStatuses()
begin
  DBHold;
  InitUniversityCache; //for client too
  DBFlush;
  return;
end;

// Before Login and before the selection of the startup company. It doesn't KNOW what mode it will become
global
updating procedure OnApplicationStartup()
begin
  AskForNewUser;
  return;
end;

global
updating procedure InitClientIdleTasks()
begin
  date td;
  time t,startt;
    
  t = CurrentTime;
  t.second = t.second + 1;
  NewTimedTask("UpdateTutorialWClass","Update Tutorial Window","UpdateTutorialWClassIdleTask","",CurrentDate,t,CurrentTime,"");
  
//  NewPeriodicTask("UpdateTutorialWClass","Update Tutorial Window","UpdateTutorialWClassIdleTask",CurrentTime,1,"");
  
  if (UseExternalLicenseModel) then begin
    if ((ClientMode==false) or SingleUserMode) then begin
      NewPeriodicTask2("UpdateLicenses","Update Licenses","UpdateLicensesIdleTask","Client",3,"");
    end;
    //NewPeriodicTask2("LicensesOnServer","Move Licenses to Server","LicensesOnServerIdleTask","",3,"");
  end;
  NewPeriodicTask("CopyMessagesToServer","Copy Messages to Server","IdleCopySMSLocToServer","",1,"");

  startt = CurrentTime;
  td = CurrentDate;
  t = AddSeconds(startt,6);
  if (t<startt) then begin
    td = AddDay(td,1);
  end;
  NewTimedTask("UpdateMasterBanner","Update Master Control Banner","UpdateMasterBanner","first",td,t,"","");
  
  startt = CurrentTime;
  if (UniversityURLCacheNeedsUpdate) then begin
    t = AddSeconds(startt,3);
  end else begin
    t = AddSeconds(startt,300);
  end;
  td = CurrentDate;
  if (t<startt) then begin
    td = AddDay(td,1);
  end;
  NewTimedTask("UpdateUniversityCache","UpdateUniversityCache","UpdateUniversityCache","startup",td,t,"","");
  //
  ExpiredMarketPlaceLicenseDisplay;
  if (IsStandardProduct and IsUsingActivationCodes==false) then begin
    UpdateHWLicensesFromCloud;
  end;

  return;
end;

global
procedure InitClientKPIsIdleTask(Boolean kpif)
begin
  Time t;

  if (kpif) then begin
    if (TaskExists("UpdateMasterWClassonKPIsIdleTask")==false) then begin
      t = CurrentTime;
      t.second = t.second + 10;
      NewTimedTask("UpdateMasterWClassonKPIsIdleTask","Master Control on KPIs Idle Task","UpdateMasterWClassOnKPIs","",CurrentDate,t,CurrentTime,"");
    end;
  end;
end;

global
updating procedure StoreCalulatedMetroKPIs(record KPIDefVc newKPIDefr)
begin
  newKPIDefr.SerNr = NextSerNr("KPIDefVc",CurrentDate,-1,false,"");  
  newKPIDefr.Status = kKPIStatusInvalid;
  RecordStore(newKPIDefr,false);
  if (ServerMode) then begin
    AllClientsRemoteAsync.UpdateMasterWClassOnKPIs("");
  end;
  if (SingleUserMode) then begin
    UpdateMasterWClassOnKPIs("");
  end;
  return;
end;

procedure CalulateMetroKPIs()
begin
  record KPIDefVc newKPIDefr;
  record KPIDefVc KPIr;
  Boolean found,storef;
  string 255 tstr,kpitype;
  Integer kpicnt;
  LongInt pos;
  
  kpicnt = 0;
  tstr = StringFromSet(550,kpicnt);
  while (nonblank(tstr) and (len(tstr)>1)) begin
    RecordNew(newKPIDefr);
    pos = 0;
    GetNextSubstring(tstr,pos,",",kpitype);
    GetNextSubstring(tstr,pos,",",kpitype);
    switch (kpitype) begin
      case "kKPITypeAR": newKPIDefr.Type = kKPITypeAR;
      case "kKPITypeAP": newKPIDefr.Type = kKPITypeAP;
      case "kKPITypeARDue": newKPIDefr.Type = kKPITypeARDue;
      case "kKPITypeARDueNoDisputed": newKPIDefr.Type = kKPITypeARDueNoDisputed;
      case "kKPITypeAPDue": newKPIDefr.Type = kKPITypeAPDue;
      case "kKPITypeORNr": newKPIDefr.Type = kKPITypeORNr;
      case "kKPITypeORStock": newKPIDefr.Type = kKPITypeORStock;
      case "kKPITypeQTNr": newKPIDefr.Type = kKPITypeQTNr;
      case "kKPITypeQTStock": newKPIDefr.Type = kKPITypeQTStock;
      case "kKPITypeSalesInclVAT": newKPIDefr.Type = kKPITypeSalesInclVAT;
      case "kKPITypeSalesExclVAT": newKPIDefr.Type = kKPITypeSalesExclVAT;
      case "kKPITypeCost": newKPIDefr.Type = kKPITypeCost;
      case "kKPITypeGPPrc": newKPIDefr.Type = kKPITypeGPPrc;
      case "kKPITypeIP": newKPIDefr.Type = kKPITypeIP;
      case "kKPITypeActivityNr": newKPIDefr.Type = kKPITypeActivityNr;
      case "kKPITypeActivityCostTime": newKPIDefr.Type = kKPITypeActivityCostTime;
    end;
//    newKPIDefr.Sign = CurrentUser;
    newKPIDefr.Sign = "";
    newKPIDefr.PeriodType = kPeriodTypeRolling;
    newKPIDefr.PeriodLength = kPeriodLengthMonth;
    newKPIDefr.PeriodUnits = 1;
    newKPIDefr.AutoCalculated = 1;
    newKPIDefr.OwnTitle = StringFromSet(403,newKPIDefr.Type);
    storef = true;
    found = true;
    while (LoopMain(KPIr,1,found)) begin
//      if ((newKPIDefr.Type==KPIr.Type) and (newKPIDefr.Sign==KPIr.Sign)) then begin
      if (newKPIDefr.Type==KPIr.Type) then begin
        storef = false;
        found = false;
      end;
    end;
    if (storef) then begin
      qupdating.StoreCalulatedMetroKPIs(newKPIDefr);
    end;
    kpicnt = kpicnt + 1;
    tstr = StringFromSet(550,kpicnt);
  end;
  return;
end;

updating
procedure SetupMailNumberSeries()
begin
  record MailSerBlock MSb;
  row MailSerBlock MSrw;
  record SynkGlobalAutoSerVc SGASr;
  row SynkGlobalAutoSerVc SGASrw;
  LongInt i,rwcnt;
  
  BlockLoad(MSb);
  
  if (MatRowCnt(MSb)==0) then begin
    MSrw.TSerStart = 0;
    MSrw.TSerEnd = 999999999; // 1bn mails
    MatRowPut(MSb,0,MSrw);
    BlockStore(MSb);
  end;
  
  SGASr.UserCode = "*";
  SGASr.SalesGroup = "";
  
  if (ReadFirstMain(SGASr,2,true)) then begin
    rwcnt = MatRowCnt(SGASr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(SGASr,i,SGASrw);
      if (SGASrw.FileName=="MailVc") then begin goto LSetupMailNumberSeries_out; end;
    end;
  end else begin
    RecordNew(SGASr);
    SGASr.UserCode = "*";
    rwcnt = 0;
  end;
  
  SGASrw.FileName = "MailVc";
  SGASrw.NumberSeries = 1000000000; // 999'999'999 + 1
  SGASrw.NrsRangeQty = 20;
  SGASrw.NrsMinimum = 30;
  
  MatRowPut(SGASr,rwcnt,SGASrw);
  RecordStore(SGASr,true);
  
LSetupMailNumberSeries_out:;  
end;

global
updating procedure CallRegisterAtPresenceServerIT(string arg)
begin
  CallRegisterAtPresenceServer;
  return;
end;

global
updating procedure StdCreateDefaultUserOnClient(record UserVc Userr,Integer compnr)
begin
  record LocalLoginOptBlock LLOb;

  BlockLoad(LLOb);
  LLOb.LastUserLoggedIn = Userr.Code;
  LLOb.LastUsedCompCode = compnr;
  LLOb.LastEmailUserLoggedIn = Userr.emailAddr;
  LLOb.AutoConToLastActComp = 1;
  BlockStore(LLOb);
//LogText(0,"StdCreateDefaultUserOnClient Userr.Code " & Userr.Code & " compnr " & compnr & "LLOb.AutoConToLastActComp " & LLOb.AutoConToLastActComp);
  return;
end;

global
updating procedure StdCreateDefaultUser()
begin
  record UserVc Userr;
  record LocalLoginOptBlock LLOb;

  if (HasLocalization("PRT")==false) then begin
    if (CountRecords("UserVc")==0) then begin
//check out UserVcRecordUpdateClient and SetupStandardServerInCloud  
      RecordNew(Userr);
      Userr.Code = UpperCase(USetStr(37014)) & "1";
      Userr.Name = USetStr(37014) & " 1";
      BlockLoad(LLOb);
      LLOb.LastUserLoggedIn = Userr.Code;
      LLOb.LastUsedCompCode = CurrentCompany;
      LLOb.LastEmailUserLoggedIn = Userr.emailAddr;
      LLOb.AutoConToLastActComp = 1;
      BlockStore(LLOb);
      if (RecordStore(Userr,false)) then begin
        LoginWithCredentials(Userr.Code,"");
      end;
//LogText(0,"StdCreateDefaultUser Userr.Code " & Userr.Code & " CurrentCompany " & CurrentCompany & "LLOb.AutoConToLastActComp " & LLOb.AutoConToLastActComp);
//      AllClientsRemoteAsync.StdCreateDefaultUserOnClient(Userr,CurrentCompany);
    end;
  end else begin
    BlockLoad(LLOb);
    LLOb.DontAskStorePwdOS = 1;
    LLOb.LastUsedCompCode = CurrentCompany;
    BlockStore(LLOb);
  end;
  return;
end;

global
updating procedure StdCreateRegisteredUser(string custcode,Longint contract,Longint CUCOEnabActSerNr,string compname,string custemail,string personname)
begin
  record InternetEnablerBlock IEb;
  record CYBlock CYb;
  record UserVc Userr;
  record LocalLoginOptBlock LLOb;
  Boolean updf;

  BlockLoad(IEb);
  IEb.CustomerCode = custcode;
  IEb.Contract = contract;
  IEb.EnablerRegistration = CUCOEnabActSerNr;
  BlockStore(IEb);

  updf = false;
  BlockLoad(CYb);
  if (nonblank(compname)) then begin
    CYb.CompName = compname;
    updf = true;
  end;
  if (nonblank(custemail)) then begin
    CYb.emailAddr = custemail;
    updf = true;
  end;
  if (updf) then begin
    BlockStore(CYb);
  end;

  RecordNew(Userr);
  Userr.Code = StringToCode(personname);
  Userr.Name = personname;
  Userr.LoginEmailAddr = custemail;
  RecordStore(Userr,true);

  BlockLoad(LLOb);
  LLOb.LastUserLoggedIn = Userr.Code;
  LLOb.LastUsedCompCode = CurrentCompany;
  LLOb.LastEmailUserLoggedIn = Userr.LoginEmailAddr;
  LLOb.AutoConToLastActComp = 1;
  BlockStore(LLOb);

  return;
end;

updating procedure SetStandardServerProductCode()
begin
  record StandardServerBlock StdSrvb;
  record SetupStatusBlock SetSb;
  record CYBlock CYb;
  
  BlockLoad(StdSrvb);
  if (nonblank(StdSrvb.StdSrvProductCode)) then begin
    SetBuildProductCode(StdSrvb.StdSrvProductCode);
//    BlockStore(StdSrvb); why ? 
    SetProgramType;
    SetProductTags;
    LoadWindowTags;
  end;
  BlockLoad(SetSb);
  if (SetSb.CompanySetup==0) then begin
    BlockLoad(CYb);
//    if ((blank(CYb.CompName) or (Left(CYb.CompName,len(USetStr(37015)))==USetStr(37015))) and blank(CYb.Addr0)) then begin
    if (blank(CYb.CompName) or blank(CYb.Addr0) or CYb.DefaultCompany!=0) then begin
    end else begin
      SetSb.CompanySetup = 1;
      BlockStore(SetSb);
    end;
  end;
  return;
end;

global
updating procedure SetServerBuildProductCode()
begin
  if ((ServerMode or SingleUserMode) and IsStandardProduct) then begin
    SetStandardServerProductCode;
  end;
  return;
end;

updating procedure UpdateEmailQueueSentFlag()
begin
  record EMailQueVc EMQr;
  record EMailQueVc oldEMQr;
  Boolean found;
  
  found = true;
  EMQr.EMailSent = kEMailQueueBeingSent;
  while (LoopKey("Sending",EMQr,1,found)) begin
    if (EMQr.EMailSent!=kEMailQueueBeingSent) then begin found = false; end;
    if (found) then begin
      RecordCopy(oldEMQr,EMQr);
      EMQr.EMailSent = kEMailQueueNotSent;
      RecordUpdate(oldEMQr,EMQr,false);
      //StepBack(EMQr);
    end;
  end;
  return;
end;

// After Login or after the server has been started
global
updating procedure OnApplicationStartupComplete()
begin
  record RcVc RepSpec;
  Integer wn;
  Integer pt;

//CurrentUser is blank here
  if (PresenceWasSuccessful and nonblank(CurrentUser)) then begin
    asyncremote.RegisterAtPresenceServer(CurrentUser,1,1,DeviceOperatingSystem,true);
  end;
  if (ServerMode) then begin
    RegisterAtPresenceServer(CurrentUser,1,0,DeviceOperatingSystem,true);
  end;

  if (ServerMode or SingleUserMode) then begin
    ExportPublicIPs;
    if (LastSesTerminated!=0) then begin
      SMSWhenNotProperlyTerminated;
    end;
    ResetRecordStatusesServer;
    InitTXIdleTasks;//Server
    InitIdleTasks;//Server
    CheckDatabaseID;//Server
    InitSysRunIdleTasks(0);//Server
    StdLocationsCheck;
    InitAvailClientIdleTask;//Server
    UpdateSettingsforCountries;//Server
    UpdateEmailQueueSentFlag;
    if (HasLocalization("EST")) then begin
      InitSysRunEstIdleTasks;
    end;
  end;
  ResetRecordStatuses;  
  if (IsStandardProduct) then begin
    if (ServerMode or SingleUserMode) then begin
      SetStandardServerProductCode;
      UpdateLicesingSrvContact;
      if (SingleUserMode) then begin//for cloud server this is done in StdSetupNewDatabase
        StdCreateDefaultUser;
      end;
    end;
  end;
  if (ClientMode or SingleUserMode) then begin
    InitClientIdleTasks;//Client
    if (IsStandardProduct) then begin
      CheckforStandardOnStartup;//Client side calls
    end;
  end;
  
  CallGetKeyFeature;
  pt = ProgramType;
  /* disabled in all product for now, lvg
  if (ProductInDemoMode and IsBooks==false and pt!=typReports and pt!=typPOS and pt!=typStock and pt!=typSynchronizedPOS and pt!=typMobileRestaurant and pt!=typBusinessOrganizer and pt!=typTravellingSalesman and CompileType!=ctiPad and CompileType!=ctiPhone) then begin
    wn = OpenWindow("DemoCompanyWClass",0,0,"","",RepSpec);
  end;
  */
  if (GuiType==kGuiMetro) then begin
    CalulateMetroKPIs;//Server
  end;
  
  if (ServerMode or SingleUserMode) then begin
    SetupMailNumberSeries;
  end;
  if (HasLocalization("SGP")) then begin
    NewPeriodicTask("CallRegisterAtPresenceServerIT","CallRegisterAtPresenceServerIT","CallRegisterAtPresenceServerIT","",10,"");
  end;
  return;
end;

//Just before shutting down
global
procedure OnApplicationShutdown()
begin
  if (PresenceWasSuccessful) then begin
    if (ServerMode or SingleUserMode) then begin
      asyncremote.RegisterAtPresenceServer("",0,0,DeviceOperatingSystem,false);
    end;
    if (UserActive) and ((SingleUserMode) or (ClientMode)) then begin
      asyncremote.RegisterAtPresenceServer(CurrentUser,0,1,DeviceOperatingSystem,false);
    end;
  end;
  SendLogAction4(kActionLogout,-1,-1,"","Logout");
  return;
end;

// Once converted, it will read one block, set one company and read one access gruop maximum, before exiting. That's fast enough.
updating procedure UpdateOldAcceeGroups()
begin
  record GlobalUserVc GlobalUserr;
  record GlobalUserVc oldGlobalUserr;
  row GlobalUserVc GlobalUserrw;
  record UserVc Userr;
  record UserVc oldUserr;
  record AccessVc Accessr;
  record AccessVc oldAccessr;
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  Integer compnr,oldcomp;
  Integer i,rwcnt;
  Boolean foundf,foundf2,updatef;
  
  oldcomp = CurrentCompany;
  BlockLoad(CompaniesRec);
  rwcnt = MatRowCnt(CompaniesRec);
// This loops sets up the UserVc record ONLY
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if (blank(comprw.TCPIP)) then begin
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        ResetLoop(Accessr);
        foundf = true;
        Accessr.Code = "";
        while (LoopMain(Accessr,1,foundf)) begin
          if (Accessr.StartLevel==2) then begin
            goto LAlreadyConverted;
          end;
          ResetLoop(Userr);
          foundf2 = true;
          Userr.Code = "";
          while (LoopMain(Userr,1,foundf2)) begin
            if (Userr.AccessGroup==Accessr.Code and Accessr.StartLevel==0 and Userr.StartLevel==0) then begin
              RecordCopy(oldUserr,Userr);
              Userr.StartLevel = 1;
              if (RecordUpdate(oldUserr,Userr,false)==0) then begin
              end;
            end;
          end;
        end;
      end;
    end;
  end;
// This loops sets the GlobalUserVc records as well as the actual Access Groups properly
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if (blank(comprw.TCPIP)) then begin
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        ResetLoop(Accessr);
        foundf = true;
        Accessr.Code = "";
        while (LoopMain(Accessr,1,foundf)) begin
          if (Accessr.StartLevel==2) then begin
            goto LAlreadyConverted;
          end;
          ResetLoop(GlobalUserr);
          foundf2 = true;
          GlobalUserr.Code = "";
          while (LoopMain(GlobalUserr,1,foundf2)) begin
            RecordCopy(oldGlobalUserr,GlobalUserr);
            updatef = false;
            if (GlobalUserr.AccessGroup==Accessr.Code and Accessr.StartLevel==0 and GlobalUserr.StartLevel==0) then begin
              GlobalUserr.StartLevel = 1;
              updatef = true;
            end;
            rwcnt = MatRowCnt(GlobalUserr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(GlobalUserr,i,GlobalUserrw);
              if (GlobalUserrw.AccessGroup==Accessr.Code and Accessr.StartLevel==0 and GlobalUserrw.StartLevel==0) then begin
                GlobalUserrw.StartLevel = 1;
                updatef = true;
                MatRowPut(GlobalUserr,i,GlobalUserrw);
              end;
            end;
            if (updatef) then begin
              if (RecordUpdate(oldGlobalUserr,GlobalUserr,false)==0) then begin
              end;
            end;
          end;
          RecordCopy(oldAccessr,Accessr);
          Accessr.StartLevel = 2;
          if (RecordUpdate(oldAccessr,Accessr,false)==0) then begin
          end;
        end;
      end;
    end;
  end;
LAlreadyConverted:;
  ResetCompany(oldcomp);
  return;
end;

updating procedure UpdateAprvlActMaintBlock()
begin
  record AprvlActMaintBlock AAMb;
  
  if (CountRecords("AcceptanceRulesVc")==0) then begin    
    BlockLoad(AAMb);
    AAMb.Done = 1;
    BlockStore(AAMb);
  end;
  return;
end;

global
updating procedure ApplicationImportCompleted(Boolean textbackup,Boolean accesschanged)
begin
  if (textbackup) then begin
    if (accesschanged) Then begin
//IMPORTINGREGISTERTAG!="Access2"
      UpdateOldAcceeGroups;
    end;
    UpdateAprvlActMaintBlock;
  end;
//  OnApplicationStartupComplete;
  return;
end;

global
function Boolean IsOffice(Boolean testf)
BEGIN
  Boolean res;

  res = !testf;
  
  if (ProgramType==4) then begin res = testf; end;
  if (ProgramType==7) then begin res = testf; end;
  if (ProgramType==8) then begin res = testf; end;
  if (ProgramType==9) then begin res = testf; end;
  IsOffice = res;
  RETURN;
END;
