external function LongInt AddTime(Time,LongInt,var Time);
external function LongInt TimeToMinutes(Time);
external function LongInt POSNETHexToLong(string);
external procedure M4PadString(string,Integer,string,Boolean,var string);

global
function LongInt GetMilliTime() 
begin
  time t;
  LongInt tick,res;
  
  t = CurrentTime;
  tick = GetCurTick;
  res = GetHour(t)*3600;
  res = res + GetMinute(t)*60;
  res = res + GetSecond(t);
  res = res * 1000;
  res = res + Mod(tick,1000);

  GetMilliTime = res;
  return;
end;

global
function string 1 HexChr(string Hex) 
begin
  HexChr = uchr(POSNETHexToLong(Hex));
  return;
end;

global
function string 100 HexStrToChrStr(string Hex,boolean reverse) 
begin
  integer slen,i,cnt;
  string 2 byte;
  string 1 c,hc;
  string 100 res;

  slen = len(Hex) - 1;
  for(i=slen;i>=0;i=i-1) begin
    c = Mid(Hex,i,1);
    if(c!=" ") then begin
      byte = c & byte;
      cnt = cnt + 1;
    end;
    if(cnt==2 or i==0) then begin
      hc = HexChr(byte);
      if(!reverse) then begin
        res = hc & res;
      end else begin
        res = res & hc; 
      end;
      byte = "";
      cnt = 0;
    end;
  end;
  
  HexStrToChrStr = res;
  return;
end;


global
function string 255 NumToHexL(LongInt num)
begin
  string 255 res;
  string 16 hexs;
  LongInt l,i;
  string 255 tstr;

  if (num==0) then begin 
    res = "00"; 
  end else begin
    l = num;
    hexs = "0123456789ABCDEF";
    for (i=0;i<2 or l>0;i=i+1) begin
      tstr = tstr & Mid(hexs,BitAnd(l,15),1);
      l = l/16;
    end;
    l = len(tstr);
    for (i=l;i>=0;i=i-1) begin
      res = res & Mid(tstr,i,1);
    end;
    if(Mod(l,2)!=0) then begin
      res = "0" & res;
    end;
  end;
  NumToHexL = res;
  return;
end;

global
function string 255 NumToHex2(string instr,Integer length)
begin
  string 255 res;
  string 16 hexs;
  LongInt l,i;
  string 255 tstr;
  
  res = "";
  l = FirstInRange(instr,10);
  hexs = "0123456789ABCDEF";
  for (i=0;i<length;i=i+1) begin
    tstr = tstr & Mid(hexs,BitAnd(l,15),1);
    l = l/16;
  end;
  for (i=len(tstr);i>=0;i=i-1) begin
    res = res & Mid(tstr,i,1);
  end;
  NumToHex2 = res;
end;

global
function string 255 NumToHex(string instr)
begin
  NumToHex = NumToHex2(instr,4);
end;

global
procedure StrArrayEmpty(var array string StrArr)
begin
  StrArr[0] = "0";
  return;
end;

// to measure performance
global
procedure mp(var longint Start,string LogMessage)
begin    
  if(nonblank(LogMessage)) then begin
    LogText(0,LogMessage & ": " & (GetMilliTime - start) & " msec");
  end;
  Start = GetMilliTime;
  return;
end;

global 
function integer DecimalFromByteByBit(var integer num,integer bitcount) 
begin
  integer res,cnt,pow;
  
  pow = 1;
  for(cnt=0;cnt<bitcount;cnt=cnt+1) begin
    res = res + mod(num,2) * pow;
    num = num/2;
    pow = pow * 2;    
  end;

  DecimalFromByteByBit = res;
  return;
end;

global
procedure AddToIntArray(Integer AddVal,var array integer IntArray) 
begin
  integer cnt;
  // 0: [array element count]
  // 1: [reserved for custom counter/sum]
  if(IntArray[0]==0) then begin IntArray[0] = 1; end;
  IntArray[IntArray[0]+1] = AddVal;
  IntArray[0] = IntArray[0] + 1;
  return;
end;

global
function integer IntArrayCnt(array integer IntArray) 
begin
  IntArrayCnt = IntArray[0];
  return;
end;

global
procedure IntArrayEmpty(var array integer IntArr)
begin
  IntArr[0] = 0;
  return;
end;

// [COMM/] Added length as string length is not quite bytesafe
global
function LongInt UnPackNumber(string PackedNumber,integer pos,integer length) begin
  integer i,pwr,slen;
  LongInt res;
  
  res = 0;
  pwr = 1;
  slen = length+pos-1;
  for(i=slen;i>=pos;i=i-1) begin
    res = res + asc(Mid(PackedNumber,i,1))*pwr;
    pwr = pwr*256;
  end;

  UnPackNumber = res;
  return;
end;

global
function string 50 PackNumber(LongInt i)
begin
  string 50 res;
  LongInt num;

  num = 0;
  if(i>0) then begin num = i; end;
  
  while(true) begin
    res = chr(mod(num,256)) & res;
    if(num<256) then begin wQuit; end;
    num = num/256;
  end;

  PackNumber = res;
  return;
end;

// [COMM/] Returns the string in visual HEX format :: using this for debug
global
function string 255 ChrStrToHexStr(string chrstring,boolean usespace) 
begin
  integer slen,i;
  string 255 res;

  slen = Len(chrstring);
  for(i=0;i<slen;i=i+1) begin
    if(usespace) then begin 
      res = res & " ";
    end;
    res = res & NumToHex(asc(Mid(chrstring,i,1)));
  end;
  
  if(usespace) then begin 
    res = Mid(res,1,255);
  end;

  ChrStrToHexStr = res;
  return;
end;

global
function string 255 ChrStrToDecStr(string chrstring,boolean usespace) 
begin
  integer slen,i;
  string 255 res;

  slen = Len(chrstring);
  for(i=0;i<slen;i=i+1) begin
    if(usespace) then begin 
      res = res & " ";
    end;
    res = res & asc(Mid(chrstring,i,1));
  end;
  
  if(usespace) then begin 
    res = Mid(res,1,255);
  end;

  ChrStrToDecStr = res;
  return;
end;

global
function string 50 IntToBCD(LongInt value,boolean reverse) 
begin
  string 50 res;
  Integer pow,hexval,i;
  LongInt int;

  if(reverse) then begin pow = 16; end else begin pow = 1; end;
  int = value;
  while(int>0) begin
    hexval = hexval + Mod(int,10) * pow;
    if(reverse) then begin pow = 1; end else begin pow = 16; end;
    int = int / 10;
    if(Mod(i,2)==1 and i!=0 or int==0) then begin 
      if(reverse) then begin
        pow = 16;
        res = res & uchr(hexval);
      end else begin
        pow = 1;
        res = uchr(hexval) & res;
      end;
      hexval = 0;
    end;
    i = i + 1;
  end;
  IntToBCD = res;
  return;
end;

global
function string 255 StrReplace(string original,string target,string replacement) 
begin
  string 255 res;
  integer slen,i,tlen;
  string 10 chunk;
  string 1 tc;

  slen = Len(original);
  tlen = Len(target);
  tc = Left(target,1);
  for(i=0;i<slen;i=i+1) begin
    chunk = Mid(original,i,1);
    if(chunk == tc) then begin
      if(Mid(original,i,tlen)==target) then begin
        chunk = replacement;
        i = i + tlen - 1;
      end;
    end; 
    res = res & chunk;
  end;

  StrReplace = res;
  return;
end;

global
function integer StrWordWrap(string text,integer limit,var array string wrapped) 
begin
  string 255 s;
  string 1 c;
  integer l,i,j,lastspace,pos;
  boolean spacefound;
  
  l = len(text);
  for(i=0;i<l;i=i+1) begin
    c = Mid(text,i,1);
    if(c == " " or i+1 == l) then begin
      lastspace = i+1;
      spacefound = true;
    end;
    if(i-pos >= limit or i+1 == l) then begin
      if(!spacefound) then begin lastspace = i; end;
      wrapped[j] = Mid(text,pos,lastspace-pos);
      j = j + 1;
      pos = lastspace;
      spacefound = false;
    end;
  end;
  StrWordWrap = j;
  return;
end;

global
function string 50 TimeToString(time t,string format,boolean ModeBCD) 
begin
  integer flen,i,cnt;
  string 1 c,nc;
  string 50 res,tstr;
  vector integer tval;
  
  flen = len(format);
  tval["H"] = t.hour;
  tval["M"] = t.minute;
  tval["S"] = t.second;
//  tval["h"] = Mod(t.hour,12); can't use h, it will override H, hansa is case insensitive

  for(i=0;i<flen;i=i+1) begin    
    c = Mid(format,i,1);
    nc = Mid(format,i+1,1);
    cnt = cnt + 1; 
    if(nc=="" or c!=nc) then begin
      switch(cnt) begin
        case 1: // binary format time
          if(ModeBCD) then begin 
            res = res & IntToBCD(tval[c],false); 
          end else begin 
            res = res & PackNumber(tval[c]);
          end;
        otherwise
          M4PadString(tval[c],cnt,"0",true,tstr);
          res = res & tstr;
      end;
      cnt = 0;
    end;
  end;
  
  TimeToString = res;
  return;
end;

global
procedure CalculateStockMovArrival(date SendDate,time SendTime,integer DurationDays,time DurationTime,var date ArrDate,var time ArrTime)
begin
  LongInt temp;
  time t;
  integer minutes1,minutes2,minutes3,days;

  ArrDate = AddDay(SendDate,DurationDays);
  minutes1 = TimeToMinutes(SendTime);
  minutes2 = TimeToMinutes(DurationTime);
  minutes3 = minutes1 + minutes2;
  days = minutes3/(24*60);
  ArrDate = AddDay(ArrDate,days);
  temp = AddTime(SendTime,minutes2,t);
  ArrTime = t;
  return;
end;  
