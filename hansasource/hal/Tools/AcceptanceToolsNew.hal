external function Integer CompareDateAndTime(Date,Time,Date,Time);
external function val GetAcceptanceSum_LeaveTransferVc(record LeaveTransferVc);
external function val GetAcceptanceSum_LeaveApplicationVc(record LeaveApplicationVc);
external function val GetAcceptanceSum_OPVc(record OPVc);
external function val GetAcceptanceSum_PUVc(record PUVc);
external function val GetAcceptanceSum_SDVc(record SDVc);
external procedure NormalizeObjstr(var string);
external function string 60 AddObjectToObjectList(string,string);
external function string 60 RemoveObjectFromObjectList(string,string);
external procedure AddWebClientLink(var record ActVc);
external function Boolean FindTheUser(var record UserVc);
external function Boolean PasteCuInAct(var record ActVc,var string);
external function string 255 AddStr(string,string,string);
external procedure FindUserMailboxName(string,var string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadAcceptanceRules(Integer,string,var record AcceptanceRulesVc);
forward function Integer ActApprovalStatus(record ActVc,var record AcceptanceRulesVc);

external outer function Integer OuterReadAcceptanceRulesForFileName(string);
external outer function Boolean OuterSendforNextLevelManualApprovalData(record ActVc,var record AcceptanceRulesVc,var string,var string,var val,var string);
external outer function Boolean OuterApprovalActvityAttachments(record ActVc,var Array record RLinkVc);
external outer function Boolean OuterFindAcceptanceRulesForActivityData(record ActVc,var record AcceptanceRulesVc);
external outer updating procedure OuterCancelApprovalRequest(record AcceptanceRulesVc,string,string);
external outer function Integer OuterCancelApprovalRequestRecordStatus(record AcceptanceRulesVc,string,string,var Integer);
external outer updating procedure OuterCreateNextLevelApprovalTasks(record ActVc,string,string,record AcceptanceRulesVc,row AcceptanceRulesVc);
external outer function Boolean OuterFindNextLevelApprovalTasksData(record ActVc,var record AcceptanceRulesVc,var string,var string,var val,var string);
external outer function Boolean OuterFindAcceptanceRulesAndAmountForActivity(record ActVc,var record AcceptanceRulesVc,var val);
external outer function Boolean OuterApprovalTasksForCurrentLevelDone(string,string,string,string,string,row AcceptanceRulesVc,var Integer);
external outer function Boolean OuterApprovalTasksExistForUsers(string,string,string,row AcceptanceRulesVc,Integer);
external outer updating function Boolean OuterSetOtherPersonsActivityTypestoNoNeed(string,string,record ActVc,record AcceptanceRulesVc,row AcceptanceRulesVc);
external outer updating procedure OuterApprovalTaskRecordLink(record ActVc,string,LongInt);
external outer procedure OuterApprovalTaskCustomer(record ActVc,string,LongInt);
external outer procedure OuterApprovalTaskSubject(record ActVc,string,string,Integer,string,string,val,string,string,record AcceptanceRulesVc,Boolean,string,string,Integer,var record ActVc);
external outer updating function Boolean OuterSetLinkedRecordApprovalStatus(record ActVc);

forward updating function Boolean CreateFYIApprovalTasks(Integer,string,string,string,val,string,string,record AcceptanceRulesVc,row AcceptanceRulesVc,string,string);

global
function Integer ApprovalState(record ActVc Actr,record AcceptanceRulesVc Acptr,Integer curstate,var Integer prevstate)
begin 
  Integer res;
  
  if (Actr.ActType==Acptr.AcceptanceActType) then begin
    prevstate = curstate;
    res = kAcceptanceStatePending;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      if (Actr.OKFlag!=0) then begin
        res = kAcceptanceStateApproved;
      end;
    end;
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      if (Actr.OKFlag!=0) then begin
        res = kAcceptanceStateRejected;
      end;
    end;
    if (Actr.ActResult==Acptr.CancelledActType) then begin
      if (Actr.OKFlag!=0) then begin
        res = kAcceptanceStateNotRequested;
      end;
    end;
    if (Actr.ActResult==Acptr.NotNeededActType) then begin
      if (Actr.OKFlag!=0) then begin
        res = prevstate;
      end;
    end;
    if (Actr.ActResult==Acptr.ForwardedActType) then begin
      if (Actr.OKFlag!=0) then begin
        res = prevstate;
      end;
    end;
  end;
  ApprovalState = res;
  return;
end;

global
function Integer InitialApprovalState(record AcceptanceRulesVc Acptr,val bc1v)
begin
  Integer res;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;
  
  res = kAcceptanceStateNotRequired;
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
      switch (Acptrw.AcceptanceType) begin
        case kAcceptanceTypeNone:
          res = kAcceptanceStateNotRequired;
          i = rwcnt;
        case kAcceptanceTypeUser:
          switch (Acptrw.ActionType) begin
            case kAcceptanceTypeActionByOne:
              res = kAcceptanceStateNotRequested;
              i = rwcnt;
            case kAcceptanceTypeActionByAll:
              res = kAcceptanceStateNotRequested;
              i = rwcnt;
            otherwise
              res = kAcceptanceStateNotRequired;
              i = rwcnt;
          end;
      end;
    end;
  end;
  InitialApprovalState = res;
  return;
end;        

global
function string 255 ApprovalUsers(record AcceptanceRulesVc Acptr,val bc1v)
begin
  string 255 neededusers;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;
  
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
      neededusers = AddObjectToObjectList(neededusers,Acptrw.AcceptanceBy);
      switch (Acptrw.ActionType) begin
        case kAcceptanceTypeActionByOne:
          switch (Acptrw.NextLevel) begin
            case kAcceptanceNextLevelRequired:
            otherwise
              i = rwcnt;
          end;
        case kAcceptanceTypeActionByAll:
          switch (Acptrw.NextLevel) begin
            case kAcceptanceNextLevelRequired:
            otherwise
              i = rwcnt;
          end;
      end;
    end;
  end;
  ApprovalUsers = neededusers;
  return;
end;        
        
global
function Boolean TestAllApprovalUsers(record AcceptanceRulesVc Acptr,Integer approvalstate,val bc1v,string acceptedby)
begin
  Boolean res;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;
  string 255 user;
  Integer pos;
  
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin      
      switch (Acptrw.ActionType) begin
        case kAcceptanceTypeActionByOne:
          pos = 0;
          ExtractObj(Acptrw.AcceptanceBy,pos,user);
          while (nonblank(user)) begin
            if (SetInSet(user,acceptedby)) then begin
              res = true;
              user = "";
            end else begin
              res = false;
              ExtractObj(Acptrw.AcceptanceBy,pos,user);
            end;
          end;
          switch (Acptrw.NextLevel) begin
            case kAcceptanceNextLevelRequired:
            otherwise
              if (approvalstate==kAcceptanceStateApproved) then begin
                res = true;
              end;
              i = rwcnt;
          end;
        case kAcceptanceTypeActionByAll:
          if (SetInSet(Acptrw.AcceptanceBy,acceptedby)) then begin
            res = true;
          end else begin
            res = false;
          end;
          switch (Acptrw.NextLevel) begin
            case kAcceptanceNextLevelRequired:
            otherwise
              i = rwcnt;
          end;
      end;
    end;
  end;
  TestAllApprovalUsers = res;
  return;
end;        
        
global
function Integer POApprovalStatus(record POVc POr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  res = kAcceptanceStateNotRequired;
  if (POr.OKFlag!=0) then begin
    res = kAcceptanceStateApproved;
    goto LPOApprovalStatus;
  end;
  if (ReadAcceptanceRules(kAcceptancePO,POr.VECode,Acptr)) then begin
    bc1v = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);  
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(POr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LPOApprovalStatus:;  
  POApprovalStatus = res;
  return;
end;

global
function Integer POTestApprovalStatus(record POVc POr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (POApprovalStatus(POr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  POTestApprovalStatus = res;
  return;
end;

global
function Integer PUApprovalStatus(record PUVc PUr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  if (PUr.OKFlag!=0) then begin
    if (PUr.Invalid!=0) then begin
      res = kAcceptanceStateRejected;
    end else begin    
      res = kAcceptanceStateApproved;
    end;
    goto LPUApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptancePU,PUr.VECode,Acptr)) then begin
    bc1v = GetAcceptanceSum_PUVc(PUr);
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(PUr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LPUApprovalStatus:;  
  PUApprovalStatus = res;
  return;
end;

global
function Integer PUTestApprovalStatus(record PUVc PUr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (PUApprovalStatus(PUr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  PUTestApprovalStatus = res;
  return;
end;

global
function Integer SDApprovalStatus(record SDVc SDr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  if (SDr.OKFlag!=0) then begin
    if (SDr.Invalid!=0) then begin
      res = kAcceptanceStateRejected;
    end else begin    
      res = kAcceptanceStateApproved;
    end;
    goto LSDApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceSD,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_SDVc(SDr);
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(SDr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LSDApprovalStatus:;  
  SDApprovalStatus = res;
  return;
end;

global
function Integer SDTestApprovalStatus(record SDVc SDr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (SDApprovalStatus(SDr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  SDTestApprovalStatus = res;
  return;
end;

global
function Integer VIApprovalStatus(record VIVc VIr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  if (VIr.OKFlag!=0) then begin
    if (VIr.Invalid!=0) then begin
      res = kAcceptanceStateRejected;
    end else begin    
      res = kAcceptanceStateApproved;
    end;
    goto LVIApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceVI,VIr.VECode,Acptr)) then begin
    bc1v = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);        
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(VIr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LVIApprovalStatus:;  
  VIApprovalStatus = res;
  return;
end;

global
function Integer VITestApprovalStatus(record VIVc VIr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (VIApprovalStatus(VIr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  VITestApprovalStatus = res;
  return;
end;

global
function Integer OPApprovalStatus(record OPVc OPr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  if (OPr.DoneFlag!=0) then begin
    if (OPr.Invalid!=0) then begin
      res = kAcceptanceStateRejected;
    end else begin    
      res = kAcceptanceStateApproved;
    end;
    goto LOPApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceOP,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_OPVc(OPr);
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(OPr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LOPApprovalStatus:;  
  OPApprovalStatus = res;
  return;
end;

global
function Integer OPTestApprovalStatus(record OPVc OPr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (OPApprovalStatus(OPr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  OPTestApprovalStatus = res;
  return;
end;

global
function Integer ExpApprovalStatus(record ExpVc Expr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  record UserVc Userr;
  
  if (Expr.OKFlag!=0) then begin
    if (Expr.Invalid!=0) then begin
      res = kAcceptanceStateRejected;
    end else begin    
      res = kAcceptanceStateApproved;
    end;
    goto LExpApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  Userr.Code = Expr.Person;
  ReadFirstMain(Userr,1,true);
  if (ReadAcceptanceRules(kAcceptanceExp,Userr.CustCode,Acptr)) then begin
    bc1v = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(Expr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LExpApprovalStatus:;  
  ExpApprovalStatus = res;
  return;
end;

global
function Integer ExpTestApprovalStatus(record ExpVc Expr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (ExpApprovalStatus(Expr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  ExpTestApprovalStatus = res;
  return;
end;

global
function Integer TBBUApprovalStatus(record TBBUVc TBBUr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceTBBU,TBBUr.CustCode,Acptr)) then begin
    bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);        
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(TBBUr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
  TBBUApprovalStatus = res;
  return;
end;

global
function Integer TBBUTestApprovalStatus(record TBBUVc TBBUr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (TBBUApprovalStatus(TBBUr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  TBBUTestApprovalStatus = res;
  return;
end;

global
function Integer LAApprovalStatus(record LeaveApplicationVc LAr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  if (LAr.OKFlag!=0) then begin
//    if (LAr.Invalid!=0) then begin
//      res = kAcceptanceStateRejected;
//    end else begin    
      res = kAcceptanceStateApproved;
//    end;
    goto LLAApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceLeaveApplication,LAr.Employee,Acptr)) then begin
    bc1v = GetAcceptanceSum_LeaveApplicationVc(LAr);
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(LAr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LLAApprovalStatus:;  
  LAApprovalStatus = res;
  return;
end;

global
function Integer LATestApprovalStatus(record LeaveApplicationVc LAr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (LAApprovalStatus(LAr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  LATestApprovalStatus = res;
  return;
end;

global
function Integer LTApprovalStatus(record LeaveTransferVc LTr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  if (LTr.OKFlag!=0) then begin
//    if (LTr.Invalid!=0) then begin
//      res = kAcceptanceStateRejected;
//    end else begin    
      res = kAcceptanceStateApproved;
//    end;
    goto LLTApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceLeaveTransfer,LTr.Employee,Acptr)) then begin
    bc1v = GetAcceptanceSum_LeaveApplicationVc(LTr);
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(LTr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LLTApprovalStatus:;  
  LTApprovalStatus = res;
  return;
end;

global
function Integer LTTestApprovalStatus(record LeaveTransferVc LTr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (LTApprovalStatus(LTr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  LTTestApprovalStatus = res;
  return;
end;

global
function Integer QTApprovalStatus(record QTVc QTr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceQT,QTr.CustCode,Acptr)) then begin
    bc1v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);  
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(QTr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
  QTApprovalStatus = res;
  return;
end;

global
function Integer QTTestApprovalStatus(record QTVc QTr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (QTApprovalStatus(QTr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  QTTestApprovalStatus = res;
  return;
end;

global
function Integer OYApprovalStatus(record OYVc OYr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceOY,OYr.CustCode,Acptr)) then begin
    bc1v = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);  
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(OYr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res>=kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
  OYApprovalStatus = res;
  return;
end;

global
function Integer OYTestApprovalStatus(record OYVc OYr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (OYApprovalStatus(OYr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  OYTestApprovalStatus = res;
  return;
end;

global
function Integer ORApprovalStatus(record ORVc ORr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceOR,ORr.CustCode,Acptr)) then begin
    bc1v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);  
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(ORr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
  ORApprovalStatus = res;
  return;
end;

global
function Integer ORTestApprovalStatus(record ORVc ORr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (ORApprovalStatus(ORr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  ORTestApprovalStatus = res;
  return;
end;

global
function Integer IntORApprovalStatus(record IntORVc IntORr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceIntOR,IntORr.OurUser,Acptr)) then begin
    bc1v = IntORr.Total;
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(IntORr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
LIntORApprovalStatus:;  
  IntORApprovalStatus = res;
  return;
end;

global
function Integer IntORTestApprovalStatus(record IntORVc IntORr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (IntORApprovalStatus(IntORr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  IntORTestApprovalStatus = res;
  return;
end;

global
function Integer IVApprovalStatus(record IVVc IVr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  
  if (IVr.OKFlag!=0) then begin
    if (IVr.Invalid!=0) then begin
      res = kAcceptanceStateRejected;
    end else begin    
      res = kAcceptanceStateApproved;
    end;
    goto LIVApprovalStatus;
  end;
  res = kAcceptanceStateNotRequired;
  switch (IVr.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      Acptr.Register = kAcceptanceCashIV;
    case kInvoiceTypeCash:
      Acptr.Register = kAcceptanceCashIV;
    case kInvoiceTypeCredit:
      Acptr.Register = kAcceptanceCredIV;
    case kInvoiceTypeCreditSpecialSales:
      Acptr.Register = kAcceptanceCredIV;
    otherwise
      Acptr.Register = kAcceptanceIV;
  end;
  if (ReadAcceptanceRules(Acptr.Register,IVr.CustCode,Acptr)) then begin
    bc1v = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);  
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(IVr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res==kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
 LIVApprovalStatus:; 
  IVApprovalStatus = res;
  return;
end;

global
function Integer IVTestApprovalStatus(record IVVc IVr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (IVApprovalStatus(IVr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  IVTestApprovalStatus = res;
  return;
end;

global
function Integer NewApprovalStatus(record AcceptanceRulesVc Acptr,val bc1v,Integer curApprovalStatus,var Integer ApproverSelection,var string ApprovalBy,var string AvailApprovers,var string FYIPersons)
begin
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt,resApprovalStatus;

  resApprovalStatus = kAcceptanceStateNotRequired;
  if (true) then begin
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (curApprovalStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resApprovalStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resApprovalStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resApprovalStatus = kAcceptanceStatePending;
            end;
            ApproverSelection = Acptrw.ApproverSelection;
            switch (ApproverSelection) begin
              case kAcceptanceApproverSelectionManual:
                if (blank(ApprovalBy)) then begin
                  resApprovalStatus = curApprovalStatus;
                  AvailApprovers = Acptrw.AcceptanceBy;
                  FYIPersons = Acptrw.FYIPersons;
                end;
              case kAcceptanceApproverSelectionAutomatic:
                ApprovalBy = Acptrw.AcceptanceBy;
                FYIPersons = Acptrw.FYIPersons;
            end;
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resApprovalStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resApprovalStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resApprovalStatus = kAcceptanceStatePending;
            end;
            ApproverSelection = Acptrw.ApproverSelection;
            switch (ApproverSelection) begin
              case kAcceptanceApproverSelectionManual:
                if (blank(ApprovalBy)) then begin
                  resApprovalStatus = curApprovalStatus;
                  AvailApprovers = Acptrw.AcceptanceBy;
                end;
                FYIPersons = Acptrw.FYIPersons;
              case kAcceptanceApproverSelectionAutomatic:
                ApprovalBy = Acptrw.AcceptanceBy;
                FYIPersons = Acptrw.FYIPersons;
            end;
        end;
        i = rwcnt;
      end;
    end;
  end;
  NewApprovalStatus = resApprovalStatus;
  return;
end;

updating function Boolean CreateAccepatanceEMail(string sender,record AcceptanceRulesVc Acptr,string recipient,var array record MailVc aMailr,var Integer acnt)
begin
  Boolean res;
  record MailVc Mailr;  
  row MailVc Mailrw;
  string 255 mailboxnr,mailboxname;
  string 255 user;
  Integer pos;
  Boolean storef;
  record LTxtVc LTxtr;
  Integer i,rwcnt;
  string 255 tstr;

  RecordNew(Mailr);
  pos = 0;
  ExtractObj(sender,pos,user);
  while (nonblank(user)) begin
    FindUserMailboxName(user,mailboxnr,mailboxname);
    if (nonblank(mailboxname)) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeFrom;
      Mailrw.AddrCode = mailboxname;
      mailrw.Mailbox = StringToLongInt(mailboxnr);
      MatRowPut(Mailr,1,Mailrw);
      storef = true;
    end;
    ExtractObj(sender,pos,user);
  end;
  if (storef==false) then begin
    goto LCreateAccepatanceEMail;
  end;
  
  FindUserMailboxName(recipient,mailboxnr,mailboxname);
  if (nonblank(mailboxname)) then begin
    ClearRow(Mailr,Mailrw,1);
    Mailrw.RowTyp = kMailRowTypeTo;
    Mailrw.AddrCode = mailboxname;
    mailrw.Mailbox = StringToLongInt(mailboxnr);
    MatRowPut(Mailr,1,Mailrw);
  end;
  
  Mailr.Header = Mailr.Header & Acptr.Subject;
  LTxtr.Code = Acptr.StdTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end;
    AddCRToText(Mailr);
  end;
  Mailr.SendFlag = 1;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (Mailr.SerNr>0) then begin
    if (RecordStore(Mailr,false)) then begin
      res = true;
      aMailr[acnt] = Mailr;
      acnt = acnt + 1;
    end;
  end;
LCreateAccepatanceEMail:;
  CreateAccepatanceEMail = res;
  return;
end;

updating function Boolean CreateAccepatanceEMails(string sender,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,var array record MailVc aMailr,var Integer acnt)
begin
  Boolean res;
  string 255 user;
  Integer pos;
  Integer i,rwcnt;
  
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    res = CreateAccepatanceEMail(sender,Acptr,user,aMailr,acnt);
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
  
LCreateAccepatanceEMails:;
  CreateAccepatanceEMails = res;
  return;
end;

global
function string 255 ApprovalTaskSubject(string Subject,Integer strid0,string fromsernr,Integer strid1,string contact,Integer strid2,val amount,Integer format,string curncy)
begin
  string 255 res;
  record SysFormatBlock SysFormatRec;
  record CUVc CUr;
  record UserVc Userr;
  
  BlockLoad(SysFormatRec);
  if (blank(Subject)) then begin
    res = USetStr(strid0);
  end else begin
    res = Subject;
  end;
  res = AddStr(res,fromsernr," ");
  res = AddStr(res,USetStr(strid1)," ");
  switch (strid1) begin
    case 22421:
      CUr.Code = contact;
      if (ReadFirstMain(CUr,1,true)) then begin 
        res = AddStr(res,CUr.Name," ");
      end;
    case 22422:
      CUr.Code = contact;
      if (ReadFirstMain(CUr,1,true)) then begin
        res = AddStr(res,CUr.Name," ");
      end;
    otherwise
      res = AddStr(res,contact," ");
  end;
  if (strid0!=22439) then begin
    res = AddStr(res,USetStr(strid2)," ");
    res = AddStr(res,ValToString(amount,format,SysFormatRec.thousSep,SysFormatRec.decimalPt,0)," ");
    res = AddStr(res,curncy," ");
  end;
  ApprovalTaskSubject = res;
  return;
end;

updating procedure ApprovalTaskRecordLink(record ActVc Actr,string fromfilename,LongInt fromsernr)
begin
  record ActVc theActr;
  record ActVc PActr;
  record POVc POr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record OYVc OYr;
  record QTVc QTr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record OPVc OPr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  
  OuterApprovalTaskRecordLink(Actr,fromfilename,fromsernr);
  switch (fromfilename) begin
    case "ActVc": 
      theActr.SerNr = fromsernr;
      if (ReadFirstMain(theActr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,theActr,CurrentCompany);
        CreateRecordLink(theActr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "ProjActVc": 
      PActr.SerNr = fromsernr;
      if (ReadFirstMain(PActr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,PActr,CurrentCompany);
        CreateRecordLink(PActr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "ExpVc": 
      Expr.SerNr = fromsernr;
      if (ReadFirstMain(Expr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,Expr,CurrentCompany);
        CreateRecordLink(Expr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "IntORVc": 
      IntORr.SerNr = fromsernr;
      if (ReadFirstMain(IntORr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,IntORr,CurrentCompany);
        CreateRecordLink(IntORr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "IVVc": 
      IVr.SerNr = fromsernr;
      if (ReadFirstMain(IVr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,IVr,CurrentCompany);
        CreateRecordLink(IVr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "LeaveApplicationVc":
      LAr.SerNr = fromsernr;
      if (ReadFirstMain(LAr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,LAr,CurrentCompany);
        CreateRecordLink(LAr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "LeaveTransferVc":
      LTr.SerNr = fromsernr;
      if (ReadFirstMain(LTr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,LTr,CurrentCompany);
        CreateRecordLink(LTr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "OPVc":
      OPr.SerNr = fromsernr;
      if (ReadFirstMain(OPr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,OPr,CurrentCompany);
        CreateRecordLink(OPr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "ORVc": 
      ORr.SerNr = fromsernr;
      if (ReadFirstMain(ORr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,ORr,CurrentCompany);
        CreateRecordLink(ORr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "POVc": 
      POr.SerNr = fromsernr;
      if (ReadFirstMain(POr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,POr,CurrentCompany);
        CreateRecordLink(POr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "PUVc":
      PUr.SerNr = fromsernr;
      if (ReadFirstMain(PUr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,PUr,CurrentCompany);
        CreateRecordLink(PUr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "QTVc": 
      QTr.SerNr = fromsernr;
      if (ReadFirstMain(QTr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,QTr,CurrentCompany);
        CreateRecordLink(QTr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "OYVc": 
      OYr.SerNr = fromsernr;
      if (ReadFirstMain(OYr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,OYr,CurrentCompany);
        CreateRecordLink(OYr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "SDVc":
      SDr.SerNr = fromsernr;
      if (ReadFirstMain(SDr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,SDr,CurrentCompany);
        CreateRecordLink(SDr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "TBBUVc": 
      TBBUr.PRCode = fromsernr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,TBBUr,CurrentCompany);
        CreateRecordLink(TBBUr,CurrentCompany,Actr,CurrentCompany);  
      end;
    case "VIVc": 
      VIr.SerNr = fromsernr;
      if (ReadFirstMain(VIr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,VIr,CurrentCompany);
        CreateRecordLink(VIr,CurrentCompany,Actr,CurrentCompany);  
      end;
  end;
  return;
end;

function boolean ApprovalTaskCustomer(var record ActVc Actr,string fromfilename,LongInt fromsernr)
begin
  record CUVc CUr;
  record ActVc theActr;
  record ActVc PActr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record IVVc IVr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  record OPVc OPr;
  row OPVc OPrw;
  record ORVc ORr;
  record POVc POr;
  record PUVc PUr;
  record QTVc QTr;
  record QTVc OYr;
  record TBBUVc TBBUr;
  record UserVc Userr;
  record VIVc VIr;
  string 255 warning,vecode,person;
  Integer i,rwcnt;
  Boolean testf;
  LongInt pos;
  
  OuterApprovalTaskCustomer(Actr,fromfilename,fromsernr);  
  switch (fromfilename) begin
    case "ActVc":
      theActr.SerNr = fromsernr;
      if (ReadFirstMain(theActr,1,true)) then begin
        if (nonblank(theActr.MainPersons)) then begin 
          pos = 0;
          GetNextSubstring(theActr.MainPersons,pos,",",person);
          Userr.Code = person;
          if (FindTheUser(Userr)) then begin
            CUr.Code = Userr.CustCode;
            if (ReadFirstMain(CUr,1,true)) then begin
              Actr.CUCode = CUr.Code;
              PasteCuInAct(Actr,warning);
            end;
          end;
        end;
      end;
    case "ProjActVc":
      PActr.SerNr = fromsernr;
      if (ReadFirstMain(PActr,1,true)) then begin
        if (nonblank(PActr.MainPersons)) then begin 
          pos = 0;
          GetNextSubstring(PActr.MainPersons,pos,",",person);
          Userr.Code = person;
          if (FindTheUser(Userr)) then begin
            CUr.Code = Userr.CustCode;
            if (ReadFirstMain(CUr,1,true)) then begin
              Actr.CUCode = CUr.Code;
              PasteCuInAct(Actr,warning);
            end;
          end;
        end;
      end;
    case "ExpVc":
      Expr.SerNr = fromsernr;
      if (ReadFirstMain(Expr,1,true)) then begin
        if (nonblank(Expr.Person)) then begin
          Userr.Code = Expr.Person;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (nonblank(Userr.CustCode)) then begin
              CUr.Code = Userr.CustCode;
              if (ReadFirstMain(CUr,1,true)) then begin
                Actr.CUCode = CUr.Code;
                PasteCuInAct(Actr,warning);
                Actr.Contact = "";
              end;
            end;
          end;
        end;
      end;
    case "IntORVc":
      IntORr.SerNr = fromsernr;
      if (ReadFirstMain(IntORr,1,true)) then begin
        if (nonblank(IntORr.OurUser)) then begin
          Userr.Code = IntORr.OurUser;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (nonblank(Userr.CustCode)) then begin
              CUr.Code = Userr.CustCode;
              if (ReadFirstMain(CUr,1,true)) then begin
                Actr.CUCode = CUr.Code;
                PasteCuInAct(Actr,warning);
                Actr.Contact = "";
              end;
            end;
          end;
        end;
      end;
    case "IVVc":
      IVr.SerNr = fromsernr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (nonblank(IVr.CustCode)) then begin
          CUr.Code = IVr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = IVr.ClientContact;
          end;
        end;
      end;
    case "LeaveApplicationVc":
      LAr.SerNr = fromsernr;
      if (ReadFirstMain(LAr,1,true)) then begin
        if (nonblank(LAr.Employee)) then begin
          CUr.Code = LAr.Employee;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = "";
          end;
        end;
      end;
    case "LeaveTransferVc":
      LTr.SerNr = fromsernr;
      if (ReadFirstMain(LTr,1,true)) then begin
        if (nonblank(LTr.Employee)) then begin
          CUr.Code = LTr.Employee;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = "";
          end;
        end;
      end;
    case "OPVc":
      OPr.SerNr = fromsernr;
      if (ReadFirstMain(OPr,1,true)) then begin
        rwcnt = MatRowCnt(OPr);
        if (rwcnt>0) then begin
          testf = true;
          MatRowGet(OPr,0,OPrw);
          vecode = OPrw.VECode;
          for (i=1;i<rwcnt;i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            if (OPrw.VECode!=vecode) then begin
              testf = false;
              i = rwcnt;
            end;
          end;
          if (testf) then begin
            CUr.Code = vecode;
            if (ReadFirstMain(CUr,1,true)) then begin
              Actr.CUCode = CUr.Code;
              PasteCuInAct(Actr,warning);
            end;
          end;
        end;
      end;
    case "ORVc":
      ORr.SerNr = fromsernr;
      if (ReadFirstMain(ORr,1,true)) then begin
        if (nonblank(ORr.CustCode)) then begin
          CUr.Code = ORr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = ORr.CustContact;
          end;
        end;
      end;
    case "POVc":
      POr.SerNr = fromsernr;
      if (ReadFirstMain(POr,1,true)) then begin
        if (nonblank(POr.VECode)) then begin
          CUr.Code = POr.VECode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = POr.VEContact;
          end;
        end;
      end;
    case "PUVc":
      PUr.SerNr = fromsernr;
      if (ReadFirstMain(PUr,1,true)) then begin
        if (nonblank(PUr.VECode)) then begin
          CUr.Code = PUr.VECode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
          end;
        end;
      end;
    case "QTVc":
      QTr.SerNr = fromsernr;
      if (ReadFirstMain(QTr,1,true)) then begin
        if (nonblank(QTr.CustCode)) then begin
          CUr.Code = QTr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = QTr.CustContact;
          end;
        end;
      end;
    case "OYVc":
      OYr.SerNr = fromsernr;
      if (ReadFirstMain(OYr,1,true)) then begin
        if (nonblank(OYr.CustCode)) then begin
          CUr.Code = OYr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = OYr.CustContact;
          end;
        end;
      end;
    case "TBBUVc":
      TBBUr.PRCode = fromsernr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        if (nonblank(TBBUr.CustCode)) then begin
          CUr.Code = TBBUr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
          end;
        end;
      end;
    case "VIVc":
      VIr.SerNr = fromsernr;
      if (ReadFirstMain(VIr,1,true)) then begin
        if (nonblank(VIr.VECode)) then begin
          CUr.Code = VIr.VECode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
          end;
        end;
      end;
  end;
  
  return;
end;

updating function Boolean CreateApprovalTask(string fromfilename,string fromsernr,Integer task,string sender,string recipient,val amount,val curamount,string curncy,string contact,record AcceptanceRulesVc Acptr,
                                               Boolean fyif,string Subject,string ApprovalActType,Integer todoflag,
                                               var record ActVc curuserActr)
begin
  Boolean res;
  record ActVc Actr;
  record ActTypeVc ActTyper;
  string 255 mailboxnr,mailboxname;
  Integer pos;
  Boolean storef;
  record LTxtVc LTxtr;
  Integer i,rwcnt;
  string 255 tstr;
  transaction string 255 gAlarmVcSender;
  transaction string 255 gAlarmVcStdTxt;
  
  RecordNew(Actr);
  ActTyper.Code = ApprovalActType;
  ReadFirstMain(ActTyper,1,true);
  Actr.MainPersons = recipient;
  switch (task) begin
    case kAcceptanceTaskEMail:
      Actr.AlarmType = kAlarmTypeEMail;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
    case kAcceptanceTaskSMS:
      Actr.AlarmType = kAlarmTypeSMS;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
    case kAcceptanceTaskAlert:
      Actr.AlarmType = kAlarmTypeMessage;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
    case kAcceptanceTaskNotification:
      Actr.AlarmType = kAlarmTypeNotification;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
  end;
  Actr.TodoFlag = todoflag;
  Actr.CalTimeFlag = kCalTimeFlagNoshow;
  Actr.SymbNr = 3;
  Actr.ActType = ApprovalActType;
  Actr.ActTypeComment = ActTyper.Comment;
  Actr.Comment = USetStr(22410);
  ApprovalTaskCustomer(Actr,fromfilename,fromsernr);

  switch (fromfilename) begin
    case "ActVc":
      Actr.Comment = ApprovalTaskSubject(Subject,22438,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "ProjActVc":
      Actr.Comment = ApprovalTaskSubject(Subject,22438,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "POVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22411,fromsernr,22421,contact,22423,curamount,M4Val,curncy);
    case "IVVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22417,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "TBBUVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22418,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "VIVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22411,fromsernr,22421,contact,22423,curamount,M4Val,curncy);
    case "ExpVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22413,fromsernr,22420,contact,22423,curamount,M4Val,curncy);
    case "IntORVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22414,fromsernr,22420,contact,22423,curamount,M4Val,curncy);
    case "QTVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22415,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "OYVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22415,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "ORVc": 
      Actr.Comment = ApprovalTaskSubject(Subject,22416,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "PUVc":
      Actr.Comment = ApprovalTaskSubject(Subject,22419,fromsernr,22421,contact,22423,curamount,M4Val,curncy);
    case "SDVc":
      Actr.Comment = ApprovalTaskSubject(Subject,22425,fromsernr,22420,contact,22423,curamount,M4Val,curncy);
    case "OPVc":
      Actr.Comment = ApprovalTaskSubject(Subject,22427,fromsernr,0,contact,22423,curamount,M4Val,curncy);
    case "LeaveApplicationVc":
      Actr.Comment = ApprovalTaskSubject(Subject,22428,fromsernr,22420,contact,22423,curamount,M4UVal,curncy);
    case "LeaveTransferVc":
      Actr.Comment = ApprovalTaskSubject(Subject,22429,fromsernr,22420,contact,22423,curamount,M4UVal,curncy);
    otherwise
      OuterApprovalTaskSubject(Actr,fromfilename,fromsernr,task,sender,recipient,curamount,curncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,todoflag,curuserActr);
  end;
  Actr.Comment = Left(Actr.Comment,200);
  AddWebClientLink(Actr);  
  gAlarmVcSender = sender;
  gAlarmVcStdTxt = Acptr.StdTxt;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (Actr.SerNr>0) then begin
    if (RecordStore(Actr,false)) then begin
      ApprovalTaskRecordLink(Actr,fromfilename,fromsernr);
      if (fyif==false) then begin
        if (recipient==CurrentUser) then begin
          if (Acptr.AutomaticApprovalforApprover!=0) then begin
            RecordCopy(curuserActr,Actr);
          end;
        end;
      end;
      res = true;
    end;
  end;
LCreateApprovalTask:;  
  CreateApprovalTask = res;
  return;
end;

function Boolean RecipientIsAbsent(string absentActType,string recipient,var string forwardRecipients,var vector Boolean recipientAbsent,var vector Boolean recipientIncluded)
begin
  Boolean testf,TrHs;
  record ActVc Actr;
  string 255 tstr,tstr2;
  Integer pos;
  
  forwardRecipients = "";
  
  if (blank(absentActType)) then begin goto LRecipientIsAbsent; end;
  if (blank(recipient)) then begin goto LRecipientIsAbsent; end;
  if (recipientAbsent[recipient]) then begin goto LRecipientIsAbsent; end;
  
  Actr.ActType = absentActType;
  TrHs = true;
/*todo loop over ALL activities ? */  
  while(LoopKey("ActType",Actr,1,TrHs)) begin
    if (Actr.ActType!=absentActType) then begin TrHs = false; end;
    
    if (TrHs) then begin
      testf = true;
      if (DateInRange(CurrentDate,Actr.TransDate,Actr.EndDate)==false) then begin testf = false; end;
      if (SetInSet(recipient,Actr.MainPersons)==false) then begin testf = false; end;
      
      if (testf) then begin
        recipientAbsent[recipient] = true;
        
        pos = 0;
        ExtractObj(Actr.ApprovalFwdPersons,pos,tstr);
        while (nonblank(tstr)) begin
          if (recipientIncluded[tstr]==false and recipientAbsent[tstr]==false) then begin
            if (RecipientIsAbsent(absentActType,tstr,tstr2,recipientAbsent,recipientIncluded)) then begin
              if (nonblank(tstr2)) then begin
                if (nonblank(forwardRecipients)) then begin
                  forwardRecipients = forwardRecipients & ",";
                end;
                forwardRecipients = forwardRecipients & tstr2;
              end;
            end else begin
              if (nonblank(forwardRecipients)) then begin
                forwardRecipients = forwardRecipients & ",";
              end;
              forwardRecipients = forwardRecipients & tstr;
              recipientIncluded[tstr] = true;
            end;
          end;
          ExtractObj(Actr.ApprovalFwdPersons,pos,tstr);
        end;
        
        goto LRecipientIsAbsent;
      end;
    end;
  end;
  
LRecipientIsAbsent:;
  RecipientIsAbsent = recipientAbsent[recipient];
end;

updating procedure CreateApprovalTasksForAbsentees(Integer task,string fromfilename,string fromsernr,string sender,val amount,string crncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,var string ApprovalBy)
begin
  string 255 recipient,forwardRecipient,forwardRecipients,newApprovalBy;
  Integer pos,pos2;
  record ActVc oldActr;
  record ActVc curuserActr;
  vector Boolean recipientTaskCreated,recipientAbsent,recipientIncluded;
  Boolean res,firstf;
  
  if (blank(Acptr.AbsentActType)) then begin goto LCreateApprovalTasksForAbsentees; end;
  
  RecordClear(curuserActr);
  switch (Acptrw.ActionType) begin
    case kAcceptanceTypeActionByOne:
      pos = 0;
      ExtractObj(ApprovalBy,pos,recipient);
      while (nonblank(recipient)) begin
        if (RecipientIsAbsent(Acptr.AbsentActType,recipient,forwardRecipients,recipientAbsent,recipientIncluded)) then begin
          res = false;
          if (nonblank(forwardRecipients)) then begin
            pos2 = 0;
            ExtractObj(forwardRecipients,pos2,forwardRecipient);
            while (nonblank(forwardRecipient)) begin
              if (recipientTaskCreated[forwardRecipient]==false) then begin
                if (CreateApprovalTask(fromfilename,fromsernr,task,sender,forwardRecipient,amount,blankval,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,kTodoFlagApproval,curuserActr)) then begin
                  recipientTaskCreated[forwardRecipient] = true;
                  res = true;
                end;
              end;
              ExtractObj(forwardRecipients,pos2,forwardRecipient);
            end;
          end;
          if (res and recipientTaskCreated[recipient]==false) then begin
            if (CreateFYIApprovalTasks(task,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,recipient,Acptr.AbsentSubject)) then begin
              recipientTaskCreated[recipient] = true;
            end;
          end;
        end;
        ExtractObj(ApprovalBy,pos,recipient);
      end;
    case kAcceptanceTypeActionByAll:
      pos = 0;
      ExtractObj(ApprovalBy,pos,recipient);
      while (nonblank(recipient)) begin
        if (RecipientIsAbsent(Acptr.AbsentActType,recipient,forwardRecipients,recipientAbsent,recipientIncluded)) then begin
          res = false;
          if (nonblank(forwardRecipients)) then begin
            pos2 = 0;
            ExtractObj(forwardRecipients,pos2,forwardRecipient);
            while (nonblank(forwardRecipient)) begin
              if (recipientTaskCreated[forwardRecipient]==false) then begin
                if (CreateApprovalTask(fromfilename,fromsernr,task,sender,forwardRecipient,amount,blankval,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,kTodoFlagApproval,curuserActr)) then begin
                  recipientTaskCreated[forwardRecipient] = true;
                  res = true;
                end;
              end;
              ExtractObj(forwardRecipients,pos2,forwardRecipient);
            end;
          end;
          if (res and recipientTaskCreated[recipient]==false) then begin
            if (CreateFYIApprovalTasks(task,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,recipient,Acptr.AbsentSubject)) then begin
              recipientTaskCreated[recipient] = true;
            end;
          end;
        end;
        ExtractObj(ApprovalBy,pos,recipient);
      end;
  end;
LCreateApprovalTasksForAbsentees:;  
  if (curuserActr.SerNr>0) then begin
    if (Acptr.AutomaticApprovalforApprover!=0) then begin
      if (ReadFirstMain(curuserActr,0,true)) then begin
        RecordCopy(oldActr,curuserActr);
        curuserActr.OKFlag = 1;
        curuserActr.ActResult = Acptr.AcceptedActType;
        if (RecordUpdate(oldActr,curuserActr,true)) then begin
        end;
      end;
    end;
  end;
  
  pos = 0;
  firstf = true;
  ExtractObj(ApprovalBy,pos,recipient);
  while (nonblank(recipient)) begin
    if (recipientTaskCreated[recipient]==false) then begin
      if (firstf) then begin
        firstf = false;
      end else begin
        newApprovalBy = newApprovalBy & ",";
      end;
      newApprovalBy = newApprovalBy & recipient;
    end;
    ExtractObj(ApprovalBy,pos,recipient);
  end;
  ApprovalBy = newApprovalBy;
end;

updating function Boolean CreateApprovalTasks(Integer task,string fromfilename,string fromsernr,string sender,val amount,val curamount,string crncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,string aApprovalBy)
begin
  Boolean res;
  string 255 recipient;
  Integer pos;
  record ActVc oldActr;
  record ActVc curuserActr;
  string 255 ApprovalBy;

  ApprovalBy = aApprovalBy;
  if (blank(ApprovalBy)) then begin
    ApprovalBy = Acptrw.AcceptanceBy;
  end;
  CreateApprovalTasksForAbsentees(task,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,ApprovalBy);
  RecordClear(curuserActr);
  switch (Acptrw.ActionType) begin
    case kAcceptanceTypeActionByOne:
      pos = 0;
      ExtractObj(ApprovalBy,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateApprovalTask(fromfilename,fromsernr,task,sender,recipient,amount,curamount,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,kTodoFlagApproval,curuserActr);
        ExtractObj(ApprovalBy,pos,recipient);
      end;
    case kAcceptanceTypeActionByAll:
      pos = 0;
      ExtractObj(ApprovalBy,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateApprovalTask(fromfilename,fromsernr,task,sender,recipient,amount,curamount,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,kTodoFlagApproval,curuserActr);
        ExtractObj(ApprovalBy,pos,recipient);
      end;
  end;
LCreateApprovalTasks:;  
  if (curuserActr.SerNr>0) then begin
    if (Acptr.AutomaticApprovalforApprover!=0) then begin
      if (ReadFirstMain(curuserActr,0,true)) then begin
        RecordCopy(oldActr,curuserActr);
        curuserActr.OKFlag = 1;
        curuserActr.ActResult = Acptr.AcceptedActType;
        if (RecordUpdate(oldActr,curuserActr,true)) then begin
        end;
      end;
    end;
  end;

  CreateApprovalTasks = res;
  return;
end;

global
updating function Boolean CreateFYIApprovalTasks(Integer task,string fromfilename,string fromsernr,string sender,val amount,string crncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,string aFYIPersons,string aSubject)
begin
  Boolean res;
  string 255 recipient;
  Integer pos;
  record ActVc oldActr;
  record ActVc curuserActr;
  string 255 FYIPersons,subject;

  FYIPersons = aFYIPersons;
  if (blank(FYIPersons) and Acptrw.ApproverSelection!=kAcceptanceApproverSelectionManual) then begin
    FYIPersons = Acptrw.FYIPersons;
  end;
  subject = aSubject;
  if (blank(subject)) then begin
    subject = Acptr.FYISubject;
  end;
  RecordClear(curuserActr);
  switch (Acptrw.ActionType) begin
    case kAcceptanceTypeActionByOne:
      pos = 0;
      ExtractObj(FYIPersons,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateApprovalTask(fromfilename,fromsernr,task,sender,recipient,blankval,amount,crncy,contact,Acptr,true,subject,Acptr.FYIActType,kTodoFlagToDo,curuserActr);
        ExtractObj(FYIPersons,pos,recipient);
      end;
    case kAcceptanceTypeActionByAll:
      pos = 0;
      ExtractObj(FYIPersons,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateApprovalTask(fromfilename,fromsernr,task,sender,recipient,blankval,amount,crncy,contact,Acptr,true,subject,Acptr.FYIActType,kTodoFlagToDo,curuserActr);
        ExtractObj(FYIPersons,pos,recipient);
      end;
  end;
  CreateFYIApprovalTasks = res;
  return;
end;

global
updating procedure CreateApprovalAlert(string fromfilename,string fromsernr,string sender,val amount,val curamount,string crncy,string contact,
                                      record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,string ApprovalBy,string ApprovalFYI)
begin
  switch (Acptrw.ActionResult) begin
    case kAcceptanceTypeResultNone:
      CreateApprovalTasks(kAcceptanceTaskNone,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,ApprovalBy);
    case kAcceptanceTypeResultEmail:
      CreateApprovalTasks(kAcceptanceTaskEMail,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,ApprovalBy);
    case kAcceptanceTypeResultSMS:
      CreateApprovalTasks(kAcceptanceTaskSMS,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,ApprovalBy);
    case kAcceptanceTypeResultAlert:
      CreateApprovalTasks(kAcceptanceTaskAlert,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,ApprovalBy);
    case kAcceptanceTypeResultNotification:
      CreateApprovalTasks(kAcceptanceTaskNotification,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,ApprovalBy);
  end;
  if (nonblank(Acptrw.FYIPersons)) or (nonblank(ApprovalFYI)) then begin
    switch (Acptrw.FYIActionResult) begin
      case kAcceptanceTypeResultNone:
        CreateFYIApprovalTasks(kAcceptanceTaskNone,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,ApprovalFYI,"");
      case kAcceptanceTypeResultEmail:
        CreateFYIApprovalTasks(kAcceptanceTaskEMail,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,ApprovalFYI,"");
      case kAcceptanceTypeResultSMS:
        CreateFYIApprovalTasks(kAcceptanceTaskSMS,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,ApprovalFYI,"");
      case kAcceptanceTypeResultAlert:
        CreateFYIApprovalTasks(kAcceptanceTaskAlert,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,ApprovalFYI,"");
      case kAcceptanceTypeResultNotification:
        CreateFYIApprovalTasks(kAcceptanceTaskNotification,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,ApprovalFYI,"");
    end;
  end;
  return;
end;

global
updating procedure FindAcptRulesAndCreateApprovalAlert(record AcceptanceRulesVc Acptr,Integer kregister,Integer ApprovalStatus,string fromfilename,string fromsernr,string sender,
                                                       val amount,val curamount,string crncy,string contact,string ApprovalBy,string ApprovalFYI)
begin
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt,err;

  if (Acptr.Register==kregister) then begin
    err = 0;
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (amount<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (ApprovalStatus) begin
          case kAcceptanceStateNotStarted:
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequired:
            err = 22437;
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
    if (err==0) then begin
      CreateApprovalAlert(fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,foundAcptrw,ApprovalBy,ApprovalFYI);
    end;
  end;
  return;
end;

global
updating function Integer RequestApproval_IntORVc(record IntORVc IntORr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = IntORApprovalStatus(IntORr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_IntORVc;
    otherwise
      err = 22400;
      goto LSendForApproval_IntORVc;
  end;
  bc1v = IntORr.Total;
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,IntORr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceIntOR,OldApprovalStatus,"IntORVc",IntORr.SerNr,IntORr.OurUser,bc1v,IntORr.Total,"",IntORr.OurUser,IntORr.AcceptanceBy,IntORr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceIntOR,"IntORVc",IntORr.SerNr,IntORr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_IntORVc:;
  RequestApproval_IntORVc = err;
  return;
end;

global
updating function Integer RequestApproval_POVc(record POVc POr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = POApprovalStatus(POr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_POVc;
    otherwise
      err = 22400;
      goto LSendForApproval_POVc;
  end;
  bc1v = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,POr.AcceptanceBy,AvailApprovers,FYIPersons);
  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptancePO,OldApprovalStatus,"POVc",POr.SerNr,POr.SalesMan,bc1v,POr.Sum4,POr.CurncyCode,POr.VECode,POr.AcceptanceBy,POr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptancePO,"POVc",POr.SerNr,POr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_POVc:;
  RequestApproval_POVc = err;
  return;
end;

global
updating function Integer RequestApproval_PUVc(record PUVc PUr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = PUApprovalStatus(PUr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_PUVc;
    otherwise
      err = 22400;
      goto LSendForApproval_PUVc;
  end;
  bc1v = PUr.PayVal;
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,PUr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptancePU,OldApprovalStatus,"PUVc",PUr.SerNr,CurrentUser,bc1v,bc1v,PUr.CurncyCode,PUr.VECode,PUr.AcceptanceBy,PUr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptancePU,"PUVc",PUr.SerNr,PUr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_PUVc:;
  RequestApproval_PUVc = err;
  return;
end;

global
updating function Integer RequestApproval_VIVc(record VIVc VIr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = VIApprovalStatus(VIr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_VIVc;
    otherwise
      err = 22400;
      goto LSendForApproval_VIVc;
  end;
  bc1v = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,VIr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceVI,OldApprovalStatus,"VIVc",VIr.SerNr,VIr.SalesMan,bc1v,VIr.PayVal,VIr.CurncyCode,VIr.VECode,VIr.AcceptanceBy,VIr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceVI,"VIVc",VIr.SerNr,VIr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_VIVc:;
  RequestApproval_VIVc = err;
  return;
end;

global
updating function Integer RequestApproval_ExpVc(record ExpVc Expr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = ExpApprovalStatus(Expr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_ExpVc;
    otherwise
      err = 22400;
      goto LSendForApproval_ExpVc;
  end;
  bc1v = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,Expr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceExp,OldApprovalStatus,"ExpVc",Expr.SerNr,Expr.Person,bc1v,Expr.PayVal,Expr.CurncyCode,Expr.Person,Expr.AcceptanceBy,Expr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceExp,"ExpVc",Expr.SerNr,Expr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_ExpVc:;
  RequestApproval_ExpVc = err;
  return;
end;

global
updating function Integer RequestApproval_OPVc(record OPVc OPr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = OPApprovalStatus(OPr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_OPVc;
    otherwise
      err = 22400;
      goto LSendForApproval_OPVc;
  end;
  bc1v = GetAcceptanceSum_OPVc(OPr);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,OPr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceOP,OldApprovalStatus,"OPVc",OPr.SerNr,CurrentUser,bc1v,bc1v,"","",OPr.AcceptanceBy,OPr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceOP,"OPVc",OPr.SerNr,OPr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_OPVc:;
  RequestApproval_OPVc = err;
  return;
end;

global
updating function Integer RequestApproval_ActVc(record ActVc PActr,string filename,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  LongInt pos;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons,person,dummystr;
  Integer typ;

  err = 0;
  typ = kAcceptanceAct;
  if (filename=="ProjActVc") then begin
    typ = kAcceptanceProjectAct;
  end;
  OldApprovalStatus = ActApprovalStatus(PActr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LRequestApproval_ActVc;
    otherwise
      err = 22400;
      goto LRequestApproval_ActVc;
  end;
  bc1v = PActr.Value;
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,dummystr,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        pos = 0;
        GetNextSubstring(PActr.MainPersons,pos,",",person);
        FindAcptRulesAndCreateApprovalAlert(Acptr,typ,OldApprovalStatus,filename,PActr.SerNr,person,bc1v,bc1v,"",person,"","");
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        pos = 0;
//        GetNextSubstring(PActr.MainPersons,pos,",",person);
//        CancelApprovalRequestActivities(typ,filename,PActr.SerNr,person);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LRequestApproval_ActVc:;
  RequestApproval_ActVc = err;
  return;
end;

global
updating function Integer RequestApproval_LTVc(record LeaveTransferVc LTr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = LTApprovalStatus(LTr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_LTVc;
    otherwise
      err = 22400;
      goto LSendForApproval_LTVc;
  end;
  bc1v = blankval;
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,LTr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceLeaveTransfer,OldApprovalStatus,"LeaveTransferVc",LTr.SerNr,LTr.Employee,bc1v,bc1v,"",LTr.Employee,LTr.AcceptanceBy,LTr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceLeaveTranfser,"LeaveTransferVc",LTr.SerNr,LTr.Employee);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_LTVc:;
  RequestApproval_LTVc = err;
  return;
end;

global
updating function Integer RequestApproval_LAVc(record LeaveApplicationVc LAr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = LAApprovalStatus(LAr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_LAVc;
    otherwise
      err = 22400;
      goto LSendForApproval_LAVc;
  end;
  bc1v = blankval;
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,LAr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceLeaveApplication,OldApprovalStatus,"LeaveApplicationVc",LAr.SerNr,LAr.Employee,bc1v,bc1v,"",LAr.Employee,LAr.AcceptanceBy,LAr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceLeaveTranfser,"LeaveApplicationVc",LAr.SerNr,LAr.Employee);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_LAVc:;
  RequestApproval_LAVc = err;
  return;
end;

global
updating function Integer RequestApproval_TBBUVc(record TBBUVc TBBUr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = TBBUApprovalStatus(TBBUr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_TBBUVc;
    otherwise
      err = 22400;
      goto LSendForApproval_TBBUVc;
  end;
  bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);        
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,TBBUr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceTBBU,OldApprovalStatus,"TBBUVc",TBBUr.PRCode,TBBUr.SalesMan,bc1v,TBBUr.TotSum,TBBUr.CurncyCode,TBBUr.CustCode,TBBUr.AcceptanceBy,TBBUr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceTBBU,"TBBUVc",TBBUr.SerNr,TBBUr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_TBBUVc:;
  RequestApproval_TBBUVc = err;
  return;
end;

global
updating function Integer RequestApproval_SDVc(record SDVc SDr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = SDApprovalStatus(SDr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_SDVc;
    otherwise
      err = 22400;
      goto LSendForApproval_SDVc;
  end;
  bc1v = GetAcceptanceSum_SDVc(SDr);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,SDr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceSD,OldApprovalStatus,"SDVc",SDr.SerNr,CurrentUser,bc1v,bc1v,"","",SDr.AcceptanceBy,SDr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceSD,"SDVc",SDr.SerNr,SDr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_SDVc:;
  RequestApproval_SDVc = err;
  return;
end;

global
updating function Integer RequestApproval_ORVc(record ORVc ORr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = ORApprovalStatus(ORr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_ORVc;
    otherwise
      err = 22400;
      goto LSendForApproval_ORVc;
  end;
  bc1v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,ORr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceOR,OldApprovalStatus,"ORVc",ORr.SerNr,ORr.SalesMan,bc1v,ORr.Sum4,ORr.CurncyCode,ORr.CustCode,ORr.AcceptanceBy,ORr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceOR,"ORVc",ORr.SerNr,ORr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_ORVc:;
  RequestApproval_ORVc = err;
  return;
end;

global
updating function Integer RequestApproval_OYVc(record OYVc OYr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = OYApprovalStatus(OYr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_OYVc;
    otherwise
      err = 22400;
      goto LSendForApproval_OYVc;
  end;
  bc1v = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,OYr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceOY,OldApprovalStatus,"OYVc",OYr.SerNr,OYr.SalesMan,bc1v,OYr.Sum4,OYr.CurncyCode,OYr.CustCode,OYr.AcceptanceBy,OYr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceOY,"OYVc",OYr.SerNr,OYr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_OYVc:;
  RequestApproval_OYVc = err;
  return;
end;

global
updating function Integer RequestApproval_QTVc(record QTVc QTr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = QTApprovalStatus(QTr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_QTVc;
    otherwise
      err = 22400;
      goto LSendForApproval_QTVc;
  end;
  bc1v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,QTr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,kAcceptanceQT,OldApprovalStatus,"QTVc",QTr.SerNr,QTr.SalesMan,bc1v,QTr.Sum4,QTr.CurncyCode,QTr.CustCode,QTr.AcceptanceBy,QTr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(kAcceptanceQT,"QTVc",QTr.SerNr,QTr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_QTVc:;
  RequestApproval_QTVc = err;
  return;
end;

global
updating function Integer RequestApproval_IVVc(record IVVc IVr,var record RcVc RepSpec,var Integer ApprovalStatusFlag)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection,OldApprovalStatus,ApprovalStatus;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  OldApprovalStatus = IVApprovalStatus(IVr,Acptr);
  ApprovalStatusFlag = OldApprovalStatus;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    case kAcceptanceStateNotRequired:
      err = 22437;
      goto LSendForApproval_IVVc;
    otherwise
      err = 22400;
      goto LSendForApproval_IVVc;
  end;
  switch (IVr.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      Acptr.Register = kAcceptanceCashIV;
    case kInvoiceTypeCash:
      Acptr.Register = kAcceptanceCashIV;
    case kInvoiceTypeCredit:
      Acptr.Register = kAcceptanceCredIV;
    case kInvoiceTypeCreditSpecialSales:
      Acptr.Register = kAcceptanceCredIV;
    otherwise
      Acptr.Register = kAcceptanceIV;
  end;

  bc1v = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  ApprovalStatus = NewApprovalStatus(Acptr,bc1v,OldApprovalStatus,ApproverSelection,IVr.AcceptanceBy,AvailApprovers,FYIPersons);

  switch (ApprovalStatus) begin
    case kAcceptanceStatePending:
      if (OldApprovalStatus!=kAcceptanceStatePending) then begin
        FindAcptRulesAndCreateApprovalAlert(Acptr,Acptr.Register,OldApprovalStatus,"IVVc",IVr.SerNr,IVr.SalesMan,bc1v,IVr.Sum4,IVr.CurncyCode,IVr.CustCode,IVr.AcceptanceBy,IVr.AcceptanceFYI);
      end;
    case kAcceptanceStateNotRequested:
      if (OldApprovalStatus==kAcceptanceStatePending) then begin
//        CancelApprovalRequestActivities(Acptr.Register,"IVVc",IVr.SerNr,IVr.VECode);
      end;
  end;

  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OldApprovalStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    otherwise
      ApprovalStatusFlag = ApprovalStatus;
  end;
LSendForApproval_IVVc:;
  RequestApproval_IVVc = err;
  return;
end;

global
function Boolean ApprovalTasksForCurrentLevelDone(string fromfilename,string FromSerNr,string AcceptanceActType,string AcceptedActType,string ForwardedActType,row AcceptanceRulesVc Acptrw,var Integer actcnt)
begin
  Boolean res;
  record ActVc Actr;
  record ActVc theActr;
  record ActVc PActr;
  Boolean found,testf;
  string 255 index;
  Integer pos;
  string 255 user;
  record RLinkVc RLr;
  Integer actnr;
  record POVc POr;
  record PUVc PUr;
  record VIVc VIr;
  record IVVc IVr;
  record SDVc SDr;
  record TBBUVc TBBUr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record IntORVc IntORr;
  record ExpVc Expr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  record OPVc OPr;
  
  actcnt = 0;
  if (blank(AcceptedActType)) then begin
    res = false;
    goto LApprovalTasksForCurrentLevelDone;
  end;
  if (OuterApprovalTasksForCurrentLevelDone(fromfilename,FromSerNr,AcceptanceActType,AcceptedActType,ForwardedActType,Acptrw,actcnt)) then begin
    goto LApprovalTasksForCurrentLevelDone;
  end;
  res = true;
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    switch (fromfilename) begin
      case "ActVc": 
        theActr.SerNr = fromsernr;
        if (ReadFirstMain(theActr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(theActr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "ProjActVc": 
        PActr.SerNr = fromsernr;
        if (ReadFirstMain(PActr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(PActr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "POVc": 
        POr.SerNr = fromsernr;
        if (ReadFirstMain(POr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(POr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "PUVc": 
        PUr.SerNr = fromsernr;
        if (ReadFirstMain(PUr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(PUr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "VIVc": 
        VIr.SerNr = fromsernr;
        if (ReadFirstMain(VIr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(VIr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "ExpVc": 
        Expr.SerNr = fromsernr;
        if (ReadFirstMain(Expr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(Expr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "OPVc": 
        OPr.SerNr = fromsernr;
        if (ReadFirstMain(OPr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(OPr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "QTVc": 
        QTr.SerNr = fromsernr;
        if (ReadFirstMain(QTr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(QTr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "OYVc": 
        OYr.SerNr = fromsernr;
        if (ReadFirstMain(OYr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(OYr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "ORVc": 
        ORr.SerNr = fromsernr;
        if (ReadFirstMain(ORr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(ORr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "IVVc": 
        IVr.SerNr = fromsernr;
        if (ReadFirstMain(IVr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(IVr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "IntORVc": 
        IntORr.SerNr = fromsernr;
        if (ReadFirstMain(IntORr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(IntORr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "SDVc": 
        SDr.SerNr = fromsernr;
        if (ReadFirstMain(SDr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(SDr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "TBBUVc": 
        TBBUr.PRCode = fromsernr;
        if (ReadFirstMain(TBBUr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(TBBUr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "LeaveApplicationVc": 
        LAr.SerNr = fromsernr;
        if (ReadFirstMain(LAr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(LAr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "LeaveTransferVc": 
        LTr.SerNr = fromsernr;
        if (ReadFirstMain(LTr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(LTr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              if (Actr.OKFlag==0) then begin
                res = false;
                goto LApprovalTasksForCurrentLevelDone;
              end else begin
                if (nonblank(AcceptedActType)) then begin
                  if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                    res = false;
                  end;
                  if (Actr.ActResult==AcceptedActType) then begin
                    res = true;
                  end;
                  found = false;
                end;
              end;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
LApprovalTasksForCurrentLevelDone:;  
  ApprovalTasksForCurrentLevelDone = res;
  return;
end;

global
updating function Boolean CreateNextLevelApprovalTasks(var record ActVc oldActr,record ActSeqVc ActSeqr,var record ActVc newActr)
begin
  Boolean res;
  Boolean nextlevelf;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc Acpt2rw;
  Integer i,rwcnt;
  val bc1v;
  string 255 nextperson,filename,PERSON;
  Integer actcnt;
  Integer lnr;
  Boolean found;
  record RLinkVc RLr;
  string 255 fromfilename,fromsernr;
  record ActVc theActr;
  record ActVc PActr;
  record POVc POr;
  record PUVc PUr;
  record VIVc VIr;
  record IVVc IVr;
  record SDVc SDr;
  record TBBUVc TBBUr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record IntORVc IntORr;
  record ExpVc Expr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  record OPVc OPr;
  LongInt pos;
    
  Acptr.Register = -1;
  if (ReadRecordLink(oldActr,1,theActr,RLr)) then begin
    if (theActr.TodoFlag!=kTodoFlagProject) then begin
      fromfilename = "ActVc";
      fromsernr = theActr.SerNr;
      Acptr.Register = kAcceptanceAct;      
      Acptr.CustCode = theActr.CUCode;
      pos = 0;
      GetNextSubstring(theActr.MainPersons,pos,",",nextperson);
      bc1v = blankval;
      res = true;
      goto Lfound1;
    end;
  end;
  if (ReadRecordLink(oldActr,1,PActr,RLr)) then begin
    if (PActr.TodoFlag==kTodoFlagProject) then begin
      fromfilename = "ProjActVc";
      fromsernr = PActr.SerNr;
      Acptr.Register = kAcceptanceProjectAct;      
      Acptr.CustCode = PActr.CUCode;
      pos = 0;
      GetNextSubstring(PActr.MainPersons,pos,",",nextperson);
      bc1v = blankval;
      res = true;
      goto Lfound1;
    end;
  end;
  if (ReadRecordLink(oldActr,1,POr,RLr)) then begin
    fromfilename = "POVc";
    fromsernr = POr.SerNr;
    nextperson = POr.SalesMan;
    Acptr.Register = kAcceptancePO;      
    Acptr.CustCode = POr.VECode;
    bc1v = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,VIr,RLr)) then begin
    fromfilename = "VIVc";
    fromsernr = VIr.SerNr;
    Acptr.Register = kAcceptanceVI;      
    nextperson = VIr.SalesMan;
    Acptr.CustCode = VIr.VECode;
    bc1v = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,OPr,RLr)) then begin
    fromfilename = "OPVc";
    fromsernr = OPr.SerNr;
    Acptr.Register = kAcceptanceOP;      
    nextperson = OPr.Sign;
    Acptr.CustCode = "";
    bc1v = GetAcceptanceSum_OPVc(OPr); 
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,Expr,RLr)) then begin
    fromfilename = "ExpVc";
    fromsernr = Expr.SerNr;
    Acptr.Register = kAcceptanceExp;      
    nextperson = Expr.Person;
    Acptr.CustCode = Expr.Person;
    bc1v = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,PUr,RLr)) then begin
    fromfilename = "PUVc";
    fromsernr = PUr.SerNr;
    Acptr.Register = kAcceptancePU;      
//    nextperson = PUr.SalesMan;
    Acptr.CustCode = PUr.VECode;
    bc1v = PUr.PayVal;
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,QTr,RLr)) then begin
    fromfilename = "QTVc";
    fromsernr = QTr.SerNr;
    Acptr.Register = kAcceptanceQT;      
    nextperson = QTr.SalesMan;
    Acptr.CustCode = QTr.CustCode;
    bc1v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,OYr,RLr)) then begin
    fromfilename = "OYVc";
    fromsernr = OYr.SerNr;
    Acptr.Register = kAcceptanceOY;      
    nextperson = OYr.SalesMan;
    Acptr.CustCode = OYr.CustCode;
    bc1v = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,ORr,RLr)) then begin
    fromfilename = "ORVc";
    fromsernr = ORr.SerNr;
    Acptr.Register = kAcceptanceOR;      
    nextperson = ORr.SalesMan;
    Acptr.CustCode = ORr.CustCode;
    bc1v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,IVr,RLr)) then begin
    fromfilename = "IVVc";
    fromsernr = IVr.SerNr;
    switch (IVr.InvType) begin
      case kInvoiceTypeCashInvoiceReceiptPRT:
        Acptr.Register = kAcceptanceCashIV;
      case kInvoiceTypeCash:
        Acptr.Register = kAcceptanceCashIV;
      case kInvoiceTypeCredit:
        Acptr.Register = kAcceptanceCredIV;
      case kInvoiceTypeCreditSpecialSales:
        Acptr.Register = kAcceptanceCredIV;
      otherwise
        Acptr.Register = kAcceptanceIV;
    end;
    nextperson = IVr.SalesMan;
    Acptr.CustCode = IVr.CustCode;
    bc1v = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,IntORr,RLr)) then begin
    fromfilename = "IntORVc";
    fromsernr = IntORr.SerNr;
    Acptr.Register = kAcceptanceIntOR;      
    nextperson = IntORr.OurUser;
    Acptr.CustCode = IntORr.OurUser;
    bc1v = IntORr.Total;
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,SDr,RLr)) then begin
    fromfilename = "SDVc";
    fromsernr = SDr.SerNr;
    Acptr.Register = kAcceptanceSD;      
    nextperson = "";
    Acptr.CustCode = "";
    bc1v = GetAcceptanceSum_SDVc(SDr);
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,TBBUr,RLr)) then begin
    fromfilename = "TBBUVc";
    fromsernr = TBBUr.PRCode;
    Acptr.Register = kAcceptanceTBBU;      
    nextperson = TBBUr.SalesMan;
    Acptr.CustCode = TBBUr.CustCode;
    bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);        
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,LAr,RLr)) then begin
    fromfilename = "LeaveApplicationVc";
    fromsernr = LAr.SerNr;
    Acptr.Register = kAcceptanceLeaveApplication;      
    nextperson = LAr.Employee;
    Acptr.CustCode = LAr.Employee;
    bc1v = blankval;
    goto Lfound1;
  end;
  if (ReadRecordLink(oldActr,1,LTr,RLr)) then begin
    fromfilename = "LeaveTransferVc";
    fromsernr = LTr.SerNr;
    Acptr.Register = kAcceptanceLeaveApplication;      
    nextperson = LTr.Employee;
    Acptr.CustCode = LTr.Employee;
    bc1v = blankval;
    goto Lfound1;
  end;
  if (OuterFindNextLevelApprovalTasksData(oldActr,Acptr,fromfilename,fromsernr,bc1v,nextperson)) then begin
    goto Lfound1;
  end;

      
Lfound1:;
  if (Acptr.Register<0) then begin
    goto LCreateNextLevelAcceptanceTasks;
  end;
  
  if (ReadAcceptanceRules(Acptr.Register,Acptr.CustCode,Acptr)) then begin
    if (oldActr.ActResult==Acptr.ForwardedActType) then begin
      rwcnt = MatRowCnt(Acptr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Acptr,i,Acptrw);
        if (SetInSet(oldActr.MainPersons,Acptrw.AcceptanceBy)) then begin
          if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
            if (Acptrw.ApproverSelection==kAcceptanceApproverSelectionManual) then begin
              oldActr.NextApprovers = Acptrw.AcceptanceBy;
              oldActr.NextApprovers = RemoveObjectFromObjectList(oldActr.NextApprovers,oldActr.MainPersons);

              oldActr.NextFYIPersons = Acptrw.FYIPersons;
//              oldActr.NextFYIPersons = RemoveObjectFromObjectList(oldActr.NextFYIPersons,oldActr.MainPersons);

              if (nonblank(oldActr.NextApprovers)) then begin
                oldActr.NextApproversType = kNextApproversTypeForward;
                i = rwcnt;
                res = true;
              end;
            end;
          end;
        end;
      end;
    end;
    if (oldActr.ActResult==Acptr.AcceptedActType) then begin
      rwcnt = MatRowCnt(Acptr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Acptr,i,Acptrw);
        if (SetInSet(oldActr.MainPersons,Acptrw.AcceptanceBy)) then begin
          if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
            switch (Acptrw.NextLevel) begin
              case kAcceptanceNextLevelNone:
                nextlevelf = false;
                switch (Acptrw.ApproverSelection) begin
                  case kAcceptanceApproverSelectionManual:
//                    res = true;// we do not want activity after last level finished          
                     //we do want for originating user
                  otherwise
                    res = !ApprovalTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
                end;
                goto LCreateNextLevelAcceptanceTasks;
              case kAcceptanceNextLevelRequired:
                switch (Acptrw.ActionType) begin
                  case kAcceptanceTypeActionByOne:
                    nextlevelf = true;
                  case kAcceptanceTypeActionByAll:
                    switch (Acptrw.ApproverSelection) begin
                      case kAcceptanceApproverSelectionManual:
                        nextlevelf = true;
                        if ((i+1)<rwcnt) then begin
                          MatRowGet(Acptr,i+1,Acpt2rw);
                          switch (Acpt2rw.ApproverSelection) begin
                            case kAcceptanceApproverSelectionManual:
                              nextlevelf = ApprovalTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
//                              nextlevelf = true;
                            otherwise
                              nextlevelf = ApprovalTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
                          end;        
                        end;
                      otherwise
                        nextlevelf = ApprovalTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
                    end;
                    res = true;
                end;
                goto LNextLevelAcceptance;
            end;
          end;
        end;
        if (nextlevelf) then begin
          if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
            res = true;
            if (Acptrw.ApproverSelection==kAcceptanceApproverSelectionManual) then begin
              oldActr.NextApprovers = Acptrw.AcceptanceBy;
              oldActr.NextFYIPersons = Acptrw.FYIPersons;
              if (nonblank(oldActr.NextApprovers)) then begin
                oldActr.NextApproversType = kNextApproversTypeNextLevel;
              end;
            end else begin
              switch (fromfilename) begin
                case "ActVc":
                  if (ReadRecordLink(oldActr,1,theActr,RLr)) then begin
                    pos = 0;
                    GetNextSubstring(theActr.MainPersons,pos,",",person);
                    CreateApprovalAlert("ActVc",theActr.SerNr,person,theActr.Value,theActr.Value,theActr.CurncyCode,"",Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                  end;
                case "ProjActVc":
                  if (ReadRecordLink(oldActr,1,PActr,RLr)) then begin
                    pos = 0;
                    GetNextSubstring(PActr.MainPersons,pos,",",person);
                    CreateApprovalAlert("ProjActVc",PActr.SerNr,person,PActr.Value,PActr.Value,PActr.CurncyCode,"",Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                  end;
                case "ExpVc": 
                  CreateApprovalAlert("ExpVc",Expr.SerNr,Expr.Person,bc1v,Expr.PayVal,Expr.CurncyCode,Expr.Person,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "IntORVc": 
                  CreateApprovalAlert("IntORVc",IntORr.SerNr,IntORr.OurUser,bc1v,IntORr.Total,"",IntORr.OurUser,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "IVVc": 
                  CreateApprovalAlert("IVVc",IVr.SerNr,IVr.SalesMan,bc1v,IVr.Sum4,IVr.CurncyCode,IVr.CustCode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
//Leavetransfer, leaveapplication
                case "OPVc": 
                  CreateApprovalAlert("OPVc",OPr.SerNr,OPr.Sign,bc1v,OPr.CurPayVal,OPr.PayCurCode,"",Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "ORVc": 
                  CreateApprovalAlert("ORVc",ORr.SerNr,ORr.SalesMan,bc1v,ORr.Sum4,ORr.CurncyCode,ORr.CustCode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "POVc":
                  CreateApprovalAlert("POVc",POr.SerNr,POr.SalesMan,bc1v,POr.Sum4,POr.CurncyCode,POr.VECode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "PUVc": 
                  CreateApprovalAlert("PUVc",PUr.SerNr,CurrentUser,bc1v,PUr.PayVal,PUr.CurncyCode,PUr.VECode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "QTVc": 
                  CreateApprovalAlert("QTVc",QTr.SerNr,QTr.SalesMan,bc1v,QTr.Sum4,QTr.CurncyCode,QTr.CustCode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "OYVc": 
                  CreateApprovalAlert("OYVc",OYr.SerNr,OYr.SalesMan,bc1v,OYr.Sum4,OYr.CurncyCode,OYr.CustCode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "SDVc": 
                  CreateApprovalAlert("SDVc",SDr.SerNr,CurrentUser,blankval,blankval,"","",Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "TBBUVc": 
                  CreateApprovalAlert("TBBUVc",TBBUr.PRCode,TBBUr.SalesMan,bc1v,TBBUr.TotSum,TBBUr.CurncyCode,TBBUr.PRCode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                case "VIVc": 
                  CreateApprovalAlert("VIVc",VIr.SerNr,VIr.Sign,bc1v,VIr.PayVal,VIr.CurncyCode,VIr.VECode,Acptr,Acptrw,Acptrw.AcceptanceBy,Acptrw.FYIPersons);
                otherwise
                  OuterCreateNextLevelApprovalTasks(oldActr,fromfilename,fromsernr,Acptr,Acptrw);
              end;
            end;
            goto LCreateNextLevelAcceptanceTasks;
          end;
        end;
LNextLevelAcceptance:;              
      end;
    end;
  end;
  
LCreateNextLevelAcceptanceTasks:;  
  if (res==false) then begin
    switch (ActSeqr.SetPerson) begin
      case kActSeqSetPersonOriginatingRecord:
        newActr.MainPersons = nextperson;
    end;        
  end;
  CreateNextLevelApprovalTasks = res;
  return;
end;

global
updating procedure SetOtherPersonActivityTypetoNoNeed(string user,record ActVc Actr,string notneeded)
begin
  record ActVc oldActr;
  transaction Boolean gActVcRecordUpdateAfterf;

  if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0) then begin
    if (SetInSet(user,Actr.MainPersons)) then begin
      RecordCopy(oldActr,Actr);
      Actr.OKFlag = 1;
      if (nonblank(notneeded)) then begin
        Actr.ActResult = notneeded;
      end;
      gActVcRecordUpdateAfterf = true;
      if (RecordUpdate(oldActr,Actr,true)==0) then begin
      end;
      gActVcRecordUpdateAfterf = false;
    end;
  end;
  return;
end;

global
updating procedure SetOtherPersonsActivityTypestoNoNeed(string fromfilename,string FromSerNr,record ActVc acceptedActr,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw)
begin
  Integer pos;
  string 255 user;
  record ActVc Actr;
  record ActVc PActr;
  record ActVc theActr;
  Integer actnr;
  record RLinkVc RLr;
  record POVc POr;
  record PUVc PUr;
  record VIVc VIr;
  record OPVc OPr;
  record ExpVc Expr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record IVVc IVr;
  record SDVc SDr;
  record TBBUVc TBBUr;
  record IntORVc IntORr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;

  if (OuterSetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,acceptedActr,Acptr,Acptrw)) then begin
    goto LSetOtherPersonsActivityTypestoNoNeed;
  end;
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    if (SetInSet(user,acceptedActr.MainPersons)==false) then begin
      switch (fromfilename) begin
        case "ActVc": 
          theActr.SerNr = fromsernr;
          if (ReadFirstMain(theActr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(theActr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "ProjActVc": 
          PActr.SerNr = fromsernr;
          if (ReadFirstMain(PActr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(PActr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "POVc": 
          POr.SerNr = fromsernr;
          if (ReadFirstMain(POr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(POr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "PUVc": 
          PUr.SerNr = fromsernr;
          if (ReadFirstMain(PUr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(PUr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "VIVc": 
          VIr.SerNr = fromsernr;
          if (ReadFirstMain(VIr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(VIr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "OPVc": 
          OPr.SerNr = fromsernr;
          if (ReadFirstMain(OPr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(OPr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "ExpVc": 
          Expr.SerNr = fromsernr;
          if (ReadFirstMain(Expr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(Expr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "QTVc": 
          QTr.SerNr = fromsernr;
          if (ReadFirstMain(QTr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(QTr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "OYVc": 
          OYr.SerNr = fromsernr;
          if (ReadFirstMain(OYr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(OYr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "ORVc": 
          ORr.SerNr = fromsernr;
          if (ReadFirstMain(ORr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(ORr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "IVVc": 
          IVr.SerNr = fromsernr;
          if (ReadFirstMain(IVr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(IVr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "SDVc": 
          SDr.SerNr = fromsernr;
          if (ReadFirstMain(SDr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(SDr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "IntORVc": 
          IntORr.SerNr = fromsernr;
          if (ReadFirstMain(IntORr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(IntORr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "LeaveApplicationVc": 
          LAr.SerNr = fromsernr;
          if (ReadFirstMain(LAr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(LAr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "LeaveTransferVc": 
          LTr.SerNr = fromsernr;
          if (ReadFirstMain(LTr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(LTr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
        case "TBBUVc": 
          TBBUr.PRCode = fromsernr;
          if (ReadFirstMain(TBBUr,1,true)) then begin
            actnr = 1;
            while (ReadRecordLink(TBBUr,actnr,Actr,RLr)) begin
              SetOtherPersonActivityTypetoNoNeed(user,Actr,Acptr.NotNeededActType);
              actnr = actnr + 1;
            end;
          end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
LSetOtherPersonsActivityTypestoNoNeed:;
  return;
end;

global
updating procedure SetApprovalTasksRejectedForAllLevels(string fromfilename,string fromsernr,val bc1v,record ActVc Actr,record AcceptanceRulesVc Acptr)
begin
  Boolean testf;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;  
    
  testf = true;
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
      switch (Acptrw.ActionType) begin
        case kAcceptanceTypeActionByOne:
          SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
          goto LSetApprovalTasksRejectedForAllLevels;
        case kAcceptanceTypeActionByAll:
          SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
          goto LSetApprovalTasksRejectedForAllLevels;
      end;
    end;
  end;
LSetApprovalTasksRejectedForAllLevels:;  
  return;
end;

function Boolean ApprovalTasksExistForUsers(string fromfilename,string FromSerNr,string AcceptanceActType,row AcceptanceRulesVc Acptrw,Integer prevlevactcnt)
begin
  Boolean res;
  record ActVc Actr;
  string 255 index;
  Integer pos;
  string 255 user;
  Integer actcnt;
  Integer actnr;
  record RLinkVc RLr;
  record ActVc theActr;
  record ActVc PActr;
  record POVc POr;
  record PUVc PUr;
  record VIVc VIr;
  record OPVc OPr;
  record ExpVc Expr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record IVVc IVr;
  record SDVc SDr;
  record TBBUVc TBBUr;
  record IntORVc IntORr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;

  if (OuterApprovalTasksExistForUsers(fromfilename,FromSerNr,AcceptanceActType,Acptrw,prevlevactcnt)) then begin
    goto LApprovalTasksExistForUsers;
  end;
  actcnt = 0;
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    res = false;
    switch (fromfilename) begin
      case "ActVc": 
        theActr.SerNr = fromsernr;
        if (ReadFirstMain(theActr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(theActr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "ProjActVc": 
        PActr.SerNr = fromsernr;
        if (ReadFirstMain(PActr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(PActr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "POVc": 
        POr.SerNr = fromsernr;
        if (ReadFirstMain(POr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(POr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "PUVc": 
        PUr.SerNr = fromsernr;
        if (ReadFirstMain(PUr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(PUr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "VIVc": 
        VIr.SerNr = fromsernr;
        if (ReadFirstMain(VIr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(VIr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "OPVc": 
        OPr.SerNr = fromsernr;
        if (ReadFirstMain(OPr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(OPr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "ExpVc": 
        Expr.SerNr = fromsernr;
        if (ReadFirstMain(Expr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(Expr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "QTVc": 
        QTr.SerNr = fromsernr;
        if (ReadFirstMain(QTr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(QTr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "OYVc": 
        OYr.SerNr = fromsernr;
        if (ReadFirstMain(OYr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(OYr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "ORVc": 
        ORr.SerNr = fromsernr;
        if (ReadFirstMain(ORr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(ORr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "IVVc": 
        IVr.SerNr = fromsernr;
        if (ReadFirstMain(IVr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(IVr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "SDVc": 
        SDr.SerNr = fromsernr;
        if (ReadFirstMain(SDr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(SDr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "IntORVc": 
        IntORr.SerNr = fromsernr;
        if (ReadFirstMain(IntORr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(IntORr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "TBBUVc": 
        TBBUr.PRCode = fromsernr;
        if (ReadFirstMain(TBBUr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(TBBUr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "LeaveApplicationVc": 
        LAr.SerNr = fromsernr;
        if (ReadFirstMain(LAr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(LAr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
      case "LeaveTransferVc": 
        LTr.SerNr = fromsernr;
        if (ReadFirstMain(LTr,1,true)) then begin
          actnr = 1;
          while (ReadRecordLink(LTr,actnr,Actr,RLr)) begin
            if (Actr.TodoFlag==kTodoFlagApproval and SetInSet(user,Actr.MainPersons)) then begin
              res = true;
              actcnt = actcnt + 1;
            end;
            actnr = actnr + 1;
          end;
        end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
    if (prevlevactcnt>=0) then begin
      switch (Acptrw.ApproverSelection) begin
        case kAcceptanceApproverSelectionManual:
          if (actcnt==prevlevactcnt) then begin
            res = true;
            user = "";
          end;
      end;
    end;
  end;
LApprovalTasksExistForUsers:;  
  ApprovalTasksExistForUsers = res;
  return;
end;

function Boolean ApprovalTasksExistForAllLevels(string fromfilename,string FromSerNr,record AcceptanceRulesVc Acptr,Integer currow,Boolean testdonef,Integer prevlevactcnt)
begin
  Boolean res;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  Integer actcnt,actexcnt;
                            
  res = true;
  rwcnt = MatRowCnt(Acptr);
  for (i=currow;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    actcnt = -1;
    switch (Acptrw.ApproverSelection) begin
      case kAcceptanceApproverSelectionManual:
        res = ApprovalTasksExistForUsers(fromfilename,FromSerNr,Acptr.AcceptanceActType,Acptrw,prevlevactcnt);
        if (res==false) then begin
          goto LApprovalTasksExistForAllLevels;
        end;
        if (testdonef) then begin
          res = ApprovalTasksForCurrentLevelDone(fromfilename,FromSerNr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
          if (res==false) then begin
            goto LApprovalTasksExistForAllLevels;
          end;
        end;
        switch (Acptrw.NextLevel) begin
          case kAcceptanceNextLevelRequired:
            res = ApprovalTasksExistForAllLevels(fromfilename,FromSerNr,Acptr,i+1,testdonef,actcnt);
            if (res==false) then begin
              goto LApprovalTasksExistForAllLevels;
            end;
          case kAcceptanceNextLevelNone:
            goto LApprovalTasksExistForAllLevels;
        end;
      otherwise
        res = ApprovalTasksExistForUsers(fromfilename,FromSerNr,Acptr.AcceptanceActType,Acptrw,prevlevactcnt);
        if (res==false) then begin
          goto LApprovalTasksExistForAllLevels;
        end;
        if (testdonef) then begin
          res = ApprovalTasksForCurrentLevelDone(fromfilename,FromSerNr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
          if (res==false) then begin
            goto LApprovalTasksExistForAllLevels;
          end;
        end;
        switch (Acptrw.NextLevel) begin
          case kAcceptanceNextLevelRequired:
            res = ApprovalTasksExistForAllLevels(fromfilename,FromSerNr,Acptr,i+1,testdonef,actcnt);
            if (res==false) then begin
              goto LApprovalTasksExistForAllLevels;
            end;
          case kAcceptanceNextLevelNone:
            goto LApprovalTasksExistForAllLevels;
        end;
    end;
  end;
LApprovalTasksExistForAllLevels:;  
  ApprovalTasksExistForAllLevels = res;
  return;
end;

global
updating function Boolean ApprovalTasksOKedForAllLevels(string fromfilename,string fromsernr,val bc1v,record ActVc Actr,record AcceptanceRulesVc Acptr)
begin
  Boolean testf;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;  
  Integer actcnt;
  
  if (Actr.ActType==Acptr.AcceptanceActType) then begin
    testf = true;
  end;
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    actcnt = -1;
    switch (Acptrw.ApproverSelection) begin
      case kAcceptanceApproverSelectionManual:
        if (((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) and (SetInSet(Actr.MainPersons,Acptrw.AcceptanceBy))) then begin
/*
//there may be 2nd level being approved while 1st level not approved yet
        if ((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) then begin
*/
          switch (Acptrw.ActionType) begin
            case kAcceptanceTypeActionByOne:
              SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
              switch (Acptrw.NextLevel) begin
                case kAcceptanceNextLevelRequired:
                  testf = ApprovalTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                case kAcceptanceNextLevelNone:
                  i = rwcnt;
                  goto LApprovalTasksOKedForAllLevels;
              end;
              if (testf==false) then begin
                i = rwcnt;
                goto LApprovalTasksOKedForAllLevels;
              end;
            case kAcceptanceTypeActionByAll:
              testf = ApprovalTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
              if (testf==false) then begin
                i = rwcnt;
                goto LApprovalTasksOKedForAllLevels;
              end;
              switch (Acptrw.NextLevel) begin
                case kAcceptanceNextLevelRequired:
                  testf = ApprovalTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                  if (testf==false) then begin
                    i = rwcnt;
                    goto LApprovalTasksOKedForAllLevels;
                  end;
                case kAcceptanceNextLevelNone:
                  i = rwcnt;
                  goto LApprovalTasksOKedForAllLevels;                  
              end;
          end;
        end;
      otherwise
        if ((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) and (SetInSet(Actr.MainPersons,Acptrw.AcceptanceBy)) then begin
          switch (Acptrw.ActionType) begin
            case kAcceptanceTypeActionByOne:
              SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
              switch (Acptrw.NextLevel) begin
                case kAcceptanceNextLevelRequired:
                  testf = ApprovalTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                case kAcceptanceNextLevelNone:
                  i = rwcnt;
                  goto LApprovalTasksOKedForAllLevels;                  
              end;
              i = rwcnt;
              goto LApprovalTasksOKedForAllLevels;
            case kAcceptanceTypeActionByAll:
              testf = ApprovalTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
              if (testf) then begin
                switch (Acptrw.NextLevel) begin
                  case kAcceptanceNextLevelRequired:
                    testf = ApprovalTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                  case kAcceptanceNextLevelNone:
                    i = rwcnt;
                    goto LApprovalTasksOKedForAllLevels;                    
                end;
              end;
              i = rwcnt;
              goto LApprovalTasksOKedForAllLevels;
          end;
        end;
    end;
  end;
LApprovalTasksOKedForAllLevels:;  
  ApprovalTasksOKedForAllLevels = testf;
  return;
end;

global
updating procedure SetLinkedRecordApprovalStatus(record ActVc Actr)
begin
  record ORVc ORr,oldORr;
  record IntORVc IntORr,oldIntORr;
  record QTVc QTr,oldQTr;
  record OYVc OYr,oldOYr;
  record ExpVc Expr,oldExpr;
  record POVc POr,oldPOr;
  record IVVc IVr,oldIVr;
  record VIVc VIr,oldVIr;
  record TBBUVc TBBUr,oldTBBUr;
  record PUVc PUr,oldPUr;
  record SDVc SDr,oldSDr;
  record OPVc OPr,oldOPr;
  record LeaveApplicationVc LAr,oldLAr;
  record LeaveTransferVc LTr,oldLTr;
  record ActVc theActr,oldtheActr;
  record ActVc PActr,oldPActr;
  record AcceptanceRulesVc Acptr;
  Integer i,rwcnt;
  Boolean testf,found;
  val bc1v;
  Integer lnr,status;
  record RLinkVc RLr;
  
  if (Actr.TodoFlag!=kTodoFlagApproval) then begin
    goto LSetLinkedRecordApprovalStatus;
  end;
  if (ReadRecordLink(Actr,1,theActr,RLr)) then begin
    if (theActr.TodoFlag!=kTodoFlagProject) then begin
      status = ActApprovalStatus(theActr,Acptr);
  //    if (status>kAcceptanceStatePending) then begin 
  //      goto LSetLinkedRecordApprovalStatus;
  //    end;        
      bc1v = theActr.Value;
      RecordCopy(oldtheActr,theActr);
      if (Actr.ActResult==Acptr.RejectedActType) then begin
        SetApprovalTasksRejectedForAllLevels("ActVc",theActr.SerNr,bc1v,Actr,Acptr);
      end;
      if (Actr.ActResult==Acptr.AcceptedActType) then begin
        testf = ApprovalTasksOKedForAllLevels("ActVc",theActr.SerNr,bc1v,Actr,Acptr);
        if (testf) then begin
  //        theActr.ApprovedBy = Actr.MainPersons;
          if (Acptr.OKApproved!=0) then begin
            theActr.OKFlag = 1;
          end;
          RecordUpdate(oldtheActr,theActr,true);
        end;
      end;
      goto LSetLinkedRecordApprovalStatus;
    end;
  end;  
  if (ReadRecordLink(Actr,1,PActr,RLr)) then begin
    if (PActr.TodoFlag==kTodoFlagProject) then begin
      status = ActApprovalStatus(PActr,Acptr);
  //    if (status>kAcceptanceStatePending) then begin 
  //      goto LSetLinkedRecordApprovalStatus;
  //    end;        
      bc1v = PActr.Value;
      RecordCopy(oldPActr,PActr);
      if (Actr.ActResult==Acptr.RejectedActType) then begin
        SetApprovalTasksRejectedForAllLevels("ProjActVc",PActr.SerNr,bc1v,Actr,Acptr);
      end;
      if (Actr.ActResult==Acptr.AcceptedActType) then begin
        testf = ApprovalTasksOKedForAllLevels("ProjActVc",PActr.SerNr,bc1v,Actr,Acptr);
        if (testf) then begin
  //        PActr.ApprovedBy = Actr.MainPersons;
  //        HMTravelLogVc_PasteApprovedBy(PActr);
          if (Acptr.OKApproved!=0) then begin
            PActr.OKFlag = 1; 
          end;
          RecordUpdate(oldPActr,PActr,true);
        end;
      end;
      goto LSetLinkedRecordApprovalStatus;
    end;
  end;
  if (ReadRecordLink(Actr,1,POr,RLr)) then begin
    status = POApprovalStatus(POr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldPOr,POr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      POr.OKFlag = 0;
      RecordUpdate(oldPOr,POr,true);
      SetApprovalTasksRejectedForAllLevels("POVc",POr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("POVc",POr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          POr.OKFlag = 1;
          RecordUpdate(oldPOr,POr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;
  if (ReadRecordLink(Actr,1,PUr,RLr)) then begin
    status = PUApprovalStatus(PUr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = GetAcceptanceSum_PUVc(PUr);
    RecordCopy(oldPUr,PUr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      if (PUr.OKFlag==0) then begin
//        PUr.OKFlag = 0;
//        RecordUpdate(oldPUr,PUr,true);
      end;
      SetApprovalTasksRejectedForAllLevels("PUVc",PUr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("PUVc",PUr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          PUr.OKFlag = 1;
          RecordUpdate(oldPUr,PUr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;
  if (ReadRecordLink(Actr,1,SDr,RLr)) then begin
    status = SDApprovalStatus(SDr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = GetAcceptanceSum_SDVc(SDr);
    RecordCopy(oldSDr,SDr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      if (SDr.OKFlag==0) then begin
//        SDr.OKFlag = 0;
//        RecordUpdate(oldSDr,SDr,true);
      end;
      SetApprovalTasksRejectedForAllLevels("SDVc",SDr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("SDVc",SDr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          SDr.OKFlag = 1;
          RecordUpdate(oldSDr,SDr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;
  if (ReadRecordLink(Actr,1,VIr,RLr)) then begin
    status = VIApprovalStatus(VIr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldVIr,VIr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      if (VIr.OKFlag==0) then begin
//        VIr.OKFlag = 0;
//        RecordUpdate(oldVIr,VIr,true);
      end;
      SetApprovalTasksRejectedForAllLevels("VIVc",VIr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("VIVc",VIr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          VIr.OKFlag = 1;
          RecordUpdate(oldVIr,VIr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,Expr,RLr)) then begin
    status = ExpApprovalStatus(Expr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldExpr,Expr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      if (Expr.OKFlag==0) then begin
//        Expr.OKFlag = 0;
//        RecordUpdate(oldExpr,Expr,true);
      end;
      SetApprovalTasksRejectedForAllLevels("ExpVc",Expr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("ExpVc",Expr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          Expr.OKFlag = 1;
          RecordUpdate(oldExpr,Expr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,TBBUr,RLr)) then begin
    status = TBBUApprovalStatus(TBBUr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldTBBUr,TBBUr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
//      RecordUpdate(oldTBBUr,TBBUr,true);
      SetApprovalTasksRejectedForAllLevels("TBBUVc",TBBUr.PRCode,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("TBBUVc",TBBUr.PRCode,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
//          RecordUpdate(oldTBBUr,TBBUr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,IntORr,RLr)) then begin
    status = IntORApprovalStatus(IntORr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = IntORr.Total;
    RecordCopy(oldIntORr,IntORr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
//      RecordUpdate(oldIntORr,IntORr,true);
      SetApprovalTasksRejectedForAllLevels("IntORVc",IntORr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("IntORVc",IntORr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
//          RecordUpdate(oldIntORr,IntORr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,OPr,RLr)) then begin
    status = OPApprovalStatus(OPr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = GetAcceptanceSum_OPVc(OPr);
    RecordCopy(oldOPr,OPr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
//      RecordUpdate(oldOPr,OPr,true);
      SetApprovalTasksRejectedForAllLevels("OPVc",OPr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("OPVc",OPr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          OPr.OrderedFlag = 1;
          OPr.DoneFlag = 1;
          RecordUpdate(oldOPr,OPr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,QTr,RLr)) then begin
    status = QTApprovalStatus(QTr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldQTr,QTr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      QTr.Rejected = 1;
      RecordUpdate(oldQTr,QTr,true);
      SetApprovalTasksRejectedForAllLevels("QTVc",QTr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("QTVc",QTr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          QTr.Rejected = 2;
          RecordUpdate(oldQTr,QTr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,OYr,RLr)) then begin
    status = OYApprovalStatus(OYr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldOYr,OYr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      OYr.Rejected = 1;
      RecordUpdate(oldOYr,OYr,true);
      SetApprovalTasksRejectedForAllLevels("OYVc",OYr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("OYVc",OYr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          OYr.Rejected = 2;
          RecordUpdate(oldOYr,OYr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,ORr,RLr)) then begin
    status = ORApprovalStatus(ORr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldORr,ORr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      ORr.OKFlag = 0;
      RecordUpdate(oldORr,ORr,true);
      SetApprovalTasksRejectedForAllLevels("ORVc",ORr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("ORVc",ORr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          ORr.OKFlag = 1;
          RecordUpdate(oldORr,ORr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;     
  if (ReadRecordLink(Actr,1,IVr,RLr)) then begin
    status = IVApprovalStatus(IVr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    RecordCopy(oldIVr,IVr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
//      RecordUpdate(oldIVr,IVr,true);
      SetApprovalTasksRejectedForAllLevels("IVVc",IVr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("IVVc",IVr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          IVr.OKFlag = 1;
          RecordUpdate(oldIVr,IVr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,LAr,RLr)) then begin
    status = LAApprovalStatus(LAr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = blankval;
    RecordCopy(oldLAr,LAr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      SetApprovalTasksRejectedForAllLevels("LeaveApplicationVc",LAr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("LeaveApplicationVc",LAr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          LAr.OKFlag = 1;
          RecordUpdate(oldLAr,LAr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (ReadRecordLink(Actr,1,LTr,RLr)) then begin
    status = LTApprovalStatus(LTr,Acptr);
//    if (status>kAcceptanceStatePending) then begin 
//      goto LSetLinkedRecordApprovalStatus;
//    end;        
    bc1v = blankval;
    RecordCopy(oldLTr,LTr);
    if (Actr.ActResult==Acptr.RejectedActType) then begin
      SetApprovalTasksRejectedForAllLevels("LeaveTransferVc",LTr.SerNr,bc1v,Actr,Acptr);
    end;
    if (Actr.ActResult==Acptr.AcceptedActType) then begin
      testf = ApprovalTasksOKedForAllLevels("LeaveTransferVc",LTr.SerNr,bc1v,Actr,Acptr);
      if (testf) then begin
        if (Acptr.OKApproved!=0) then begin
          LTr.OKFlag = 1;
          RecordUpdate(oldLTr,LTr,true);
        end;
      end;
    end;
    goto LSetLinkedRecordApprovalStatus;
  end;  
  if (OuterSetLinkedRecordApprovalStatus(Actr)) then begin
    goto LSetLinkedRecordApprovalStatus;
  end;
LSetLinkedRecordApprovalStatus:;  
  return;
end;

updating procedure SetActivityResultAndOKActivity(string acttype,record ActVc Actr)
begin
  record ActVc oldActr;

  RecordCopy(oldActr,Actr);
  Actr.ActResult = acttype;
  Actr.OKFlag = 1;
  RecordUpdate(oldActr,Actr,true);
  return;
end;

global
updating function LongInt CancelApprovalRequest(string fromfilename,string fromsernr,var Integer ApprovalStatusFlag)
begin
  LongInt res;
  record ActVc Actr;
  Boolean found,testf;
  record AcceptanceRulesVc Acptr;
  Integer actnr;
  record RLinkVc RLr;
  record ActVc theActr;
  record ActVc PActr;
  record POVc POr;
  record PUVc PUr;
  record VIVc VIr;
  record ExpVc Expr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record IVVc IVr;
  record IntORVc IntORr;
  record TBBUVc TBBUr;
  record SDVc SDr;
  record OPVc OPr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  
  res = 37503;
  switch (fromfilename) begin
    case "ActVc": 
      theActr.SerNr = fromsernr;
      if (ReadFirstMain(theActr,1,true)) then begin
        ApprovalStatusFlag = ActApprovalStatus(theActr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "ProjActVc": 
      PActr.SerNr = fromsernr;
      if (ReadFirstMain(PActr,1,true)) then begin
        ApprovalStatusFlag = ActApprovalStatus(PActr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "QTVc": 
      QTr.SerNr = fromsernr;
      if (ReadFirstMain(QTr,1,true)) then begin
        ApprovalStatusFlag = QTApprovalStatus(QTr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "OYVc": 
      OYr.SerNr = fromsernr;
      if (ReadFirstMain(OYr,1,true)) then begin
        ApprovalStatusFlag = OYApprovalStatus(OYr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "ORVc": 
      ORr.SerNr = fromsernr;
      if (ReadFirstMain(ORr,1,true)) then begin
        ApprovalStatusFlag = ORApprovalStatus(ORr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "IVVc": 
      IVr.SerNr = fromsernr;
      if (ReadFirstMain(IVr,1,true)) then begin
        ApprovalStatusFlag = IVApprovalStatus(IVr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "IntORVc": 
      IntORr.SerNr = fromsernr;
      if (ReadFirstMain(IntORr,1,true)) then begin
        ApprovalStatusFlag = IntORApprovalStatus(IntORr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "POVc": 
      POr.SerNr = fromsernr;
      if (ReadFirstMain(POr,1,true)) then begin
        ApprovalStatusFlag = POApprovalStatus(POr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "VIVc": 
      VIr.SerNr = fromsernr;
      if (ReadFirstMain(VIr,1,true)) then begin
        ApprovalStatusFlag = VIApprovalStatus(VIr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "ExpVc": 
      Expr.SerNr = fromsernr;
      if (ReadFirstMain(Expr,1,true)) then begin
        ApprovalStatusFlag = ExpApprovalStatus(Expr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "PUVc": 
      PUr.SerNr = fromsernr;
      if (ReadFirstMain(PUr,1,true)) then begin
        ApprovalStatusFlag = PUApprovalStatus(PUr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "SDVc": 
      SDr.SerNr = fromsernr;
      if (ReadFirstMain(SDr,1,true)) then begin
        ApprovalStatusFlag = SDApprovalStatus(SDr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "OPVc": 
      OPr.SerNr = fromsernr;
      if (ReadFirstMain(OPr,1,true)) then begin
        ApprovalStatusFlag = OPApprovalStatus(OPr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "TBBUVc": 
      TBBUr.PRCode = fromsernr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        ApprovalStatusFlag = TBBUApprovalStatus(TBBUr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "LeaveApplicationVc": 
      LAr.SerNr = fromsernr;
      if (ReadFirstMain(LAr,1,true)) then begin
        ApprovalStatusFlag = LAApprovalStatus(LAr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    case "LeaveTransferVc": 
      LTr.SerNr = fromsernr;
      if (ReadFirstMain(LTr,1,true)) then begin
        ApprovalStatusFlag = LTApprovalStatus(LTr,Acptr);
        if (ApprovalStatusFlag!=kAcceptanceStatePending) then begin
          res = 22406;
          goto LCancelApprovalRequest;
        end;
      end;
    otherwise
     res = OuterCancelApprovalRequestRecordStatus(Acptr,fromfilename,fromsernr,ApprovalStatusFlag);
     if (res!=0) then begin
       goto LCancelApprovalRequest;
     end;
  end;
  if (Acptr.CancelApprovalRequest==0) then begin
    res = 22406;
    goto LCancelApprovalRequest;
  end;
  switch (fromfilename) begin
    case "IVVc": 
      actnr = 1;
      while (ReadRecordLink(IVr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "ORVc": 
      actnr = 1;
      while (ReadRecordLink(ORr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "QTVc": 
      actnr = 1;
      while (ReadRecordLink(QTr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "OYVc": 
      actnr = 1;
      while (ReadRecordLink(OYr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "IntORVc": 
      actnr = 1;
      while (ReadRecordLink(IntORr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "POVc": 
      actnr = 1;
      while (ReadRecordLink(POr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "VIVc": 
      actnr = 1;
      while (ReadRecordLink(VIr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "PUVc": 
      actnr = 1;
      while (ReadRecordLink(PUr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "SDVc": 
      actnr = 1;
      while (ReadRecordLink(SDr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "OPVc": 
      actnr = 1;
      while (ReadRecordLink(OPr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "ExpVc": 
      actnr = 1;
      while (ReadRecordLink(Expr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "TBBUVc": 
      actnr = 1;
      while (ReadRecordLink(TBBUr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "LeaveApplicationVc": 
      actnr = 1;
      while (ReadRecordLink(LAr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    case "LeaveTransferVc": 
      actnr = 1;
      while (ReadRecordLink(LTr,actnr,Actr,RLr)) begin
        if (Actr.TodoFlag==kTodoFlagApproval and Actr.OKFlag==0 and Actr.ActType==Acptr.AcceptanceActType) then begin
          SetActivityResultAndOKActivity(Acptr.CancelledActType,Actr);
        end;
        actnr = actnr + 1;
      end;
    otherwise
      OuterCancelApprovalRequest(Acptr,fromfilename,fromsernr);
  end;  
LCancelApprovalRequest:;
  CancelApprovalRequest = res;
  return;
end;

global
updating function Integer SelectFYIWClassOKRemote(record RcVc RepSpec,var record ActVc Actr)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  string 5 crncy;
  val amount;
  string 255 fromfilename,fromsernr,sender;
  Boolean found;
  record RLinkVc RLr;
  record POVc POr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record OPVc OPr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;

//  oldcompnr = CurrentCompany;
//  if (fromcompnr!=oldcompnr) then begin 
//    SetCompany(fromcompnr,false);
//  end;

  err = 0;
  amount = 0.0;
  Acptr.Register = -1;
  sender = "";
  if (ReadRecordLink(Actr,1,POr,RLr)) then begin
    Acptr.Register = kAcceptancePO;
    Acptr.CustCode = POr.VECode;
    crncy = POr.CurncyCode;
    amount = POr.Sum4;
    fromfilename = "POVc";
    fromsernr = POr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,Expr,RLr)) then begin
    Acptr.Register = kAcceptanceExp;
    Acptr.CustCode = Expr.Person;
    crncy = Expr.CurncyCode;
    amount = Expr.PayVal;
    fromfilename = "ExpVc";
    fromsernr = Expr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,IntORr,RLr)) then begin
    Acptr.Register = kAcceptanceIntOR;
    Acptr.CustCode = IntORr.OurUser;
    crncy = "";
    amount = IntORr.Total;
    fromfilename = "IntORVc";
    fromsernr = IntORr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,IVr,RLr)) then begin
    switch (IVr.InvType) begin
      case kInvoiceTypeCredit:
        Acptr.Register = kAcceptanceCredIV;
      case kInvoiceTypeCash:
        Acptr.Register = kAcceptanceCashIV;
      case kInvoiceTypeCreditSpecialSales:
        Acptr.Register = kAcceptanceCashIV;
      otherwise
        Acptr.Register = kAcceptanceIV;
    end;
    Acptr.CustCode = IVr.CustCode;
    crncy = IVr.CurncyCode;
    amount = IVr.Sum4;
    fromfilename = "IVVc";
    fromsernr = IVr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,ORr,RLr)) then begin
    Acptr.Register = kAcceptanceOR;
    Acptr.CustCode = ORr.CustCode;
    crncy = ORr.CurncyCode;
    amount = ORr.Sum4;
    fromfilename = "ORVc";
    fromsernr = ORr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,QTr,RLr)) then begin
    Acptr.Register = kAcceptanceQT;
    Acptr.CustCode = QTr.CustCode;
    crncy = QTr.CurncyCode;
    amount = QTr.Sum4;
    fromfilename = "QTVc";
    fromsernr = QTr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,OYr,RLr)) then begin
    Acptr.Register = kAcceptanceOY;
    Acptr.CustCode = OYr.CustCode;
    crncy = OYr.CurncyCode;
    amount = OYr.Sum4;
    fromfilename = "OYVc";
    fromsernr = OYr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,PUr,RLr)) then begin
    Acptr.Register = kAcceptancePU;
    Acptr.CustCode = PUr.VECode;
    crncy = PUr.CurncyCode;
    amount = PUr.PayVal;
    fromfilename = "PUVc";
    fromsernr = PUr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,SDr,RLr)) then begin
    Acptr.Register = kAcceptanceSD;
    Acptr.CustCode = "";
    crncy = "";
    amount = GetAcceptanceSum_SDVc(SDr);
    fromfilename = "SDVc";
    fromsernr = SDr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,VIr,RLr)) then begin
    Acptr.Register = kAcceptancePU;
    Acptr.CustCode = VIr.VECode;
    crncy = VIr.CurncyCode;
    amount = VIr.PayVal;
    fromfilename = "VIVc";
    fromsernr = VIr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,TBBUr,RLr)) then begin
    Acptr.Register = kAcceptanceTBBU;
    Acptr.CustCode = TBBUr.PRCode;
    crncy = TBBUr.CurncyCode;
    amount = TBBUr.TotSum;
    fromfilename = "TBBUVc";
    fromsernr = TBBUr.PRCode;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,LAr,RLr)) then begin
    Acptr.Register = kAcceptanceLeaveApplication;
    Acptr.CustCode = LAr.Employee;
    crncy = "";
    amount = blankval;
    fromfilename = "LeaveApplicationVc";
    fromsernr = LAr.SerNr;
    goto Lfound2;
  end;
  if (ReadRecordLink(Actr,1,LTr,RLr)) then begin
    Acptr.Register = kAcceptanceLeaveTransfer;
    Acptr.CustCode = LTr.Employee;
    crncy = "";
    amount = blankval;
    fromfilename = "LeaveTransferVc";
    fromsernr = LAr.SerNr;
    goto Lfound2;
  end;
  if (OuterFindNextLevelApprovalTasksData(Actr,Acptr,fromfilename,fromsernr,amount,sender)) then begin
    goto Lfound2;
  end;
Lfound2:;
  if (ReadAcceptanceRules(Acptr.Register,Acptr.CustCode,Acptr)==false) then begin
    err = 22399;
    goto LSelectFYIWClassOKRemote;
  end;
  if (blank(Acptr.FYIActType)) then begin
    err = 22399;
    goto LSelectFYIWClassOKRemote;
  end;
  Acptrw.ActionType = kAcceptanceTypeActionByOne;
  CreateFYIApprovalTasks(kAcceptanceTaskNone,fromfilename,fromsernr,sender,amount,crncy,Acptr.CustCode,Acptr,Acptrw,RepSpec.f1,"");

//    ResetCompany(oldcompnr);
LSelectFYIWClassOKRemote:;
  SelectFYIWClassOKRemote = err;
  return;
end;

global
function Integer ActApprovalStatus(record ActVc theActr,var record AcceptanceRulesVc Acptr) 
begin
  Integer res,prevstate,actnr;
  record ActVc Actr;
  record RLinkVc RLr;
  string 255 actusers,neededusers;
  val bc1v;
  Integer typ;
  
  typ = kAcceptanceAct;
  if (theActr.TodoFlag==kTodoFlagProject) then begin
    typ = kAcceptanceProjectAct;
  end;
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(typ,theActr.CUCode,Acptr)) then begin
    bc1v = blankval;
    res = InitialApprovalState(Acptr,bc1v);
    actnr = 1;
    while (ReadRecordLink(theActr,actnr,Actr,RLr)) begin
      if (Actr.TodoFlag==kTodoFlagApproval and Actr.Invalid==0) then begin
        actusers = AddObjectToObjectList(actusers,Actr.MainPersons);
        res = ApprovalState(Actr,Acptr,res,prevstate);
      end;
      actnr = actnr + 1;
    end;
    if (res>=kAcceptanceStateApproved) then begin
      NormalizeObjstr(actusers);
      if (TestAllApprovalUsers(Acptr,res,bc1v,actusers)==false) then begin
        res = kAcceptanceStatePending;
      end;
    end;
  end;
  ActApprovalStatus = res;
  return;
end;

global
function Integer ActTestApprovalStatus(record ActVc Actr)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  res = 0;
  switch (ActApprovalStatus(Actr,Acptr)) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  ActTestApprovalStatus = res;
  return;
end;

global
function Boolean FindAcceptanceRulesForActivity(record ActVc Actr,var record AcceptanceRulesVc Acptr)
begin
  Boolean res;
  record RLinkVc RLr;
  record ActVc theActr;
  record POVc POr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record OPVc OPr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
    
  res = false;
  Acptr.Register = -1;
  if (ReadRecordLink(Actr,1,theActr,RLr)) then begin
    Acptr.Register = kAcceptanceAct;
    if (theActr.TodoFlag==kTodoFlagProject) then begin
      Acptr.Register = kAcceptanceProjectAct;
    end;
    Acptr.CustCode = theActr.CUCode;
    goto Lfound3;
  end;    
  if (ReadRecordLink(Actr,1,POr,RLr)) then begin
    Acptr.Register = kAcceptancePO;
    Acptr.CustCode = POr.VECode;
    goto Lfound3;
  end;    
  if (ReadRecordLink(Actr,1,PUr,RLr)) then begin
    Acptr.Register = kAcceptancePU;
    Acptr.CustCode = PUr.VECode;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,VIr,RLr)) then begin
    Acptr.Register = kAcceptanceVI;
    Acptr.CustCode = VIr.VECode;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,QTr,RLr)) then begin
    Acptr.Register = kAcceptanceQT;
    Acptr.CustCode = QTr.CustCode;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,OYr,RLr)) then begin
    Acptr.Register = kAcceptanceOY;
    Acptr.CustCode = OYr.CustCode;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,ORr,RLr)) then begin
    Acptr.Register = kAcceptanceOR;
    Acptr.CustCode = ORr.CustCode;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,IVr,RLr)) then begin
    switch (IVr.InvType) begin
      case kInvoiceTypeCredit:
        Acptr.Register = kAcceptanceCredIV;
      case kInvoiceTypeCash:
        Acptr.Register = kAcceptanceCashIV;
      case kInvoiceTypeCreditSpecialSales:
        Acptr.Register = kAcceptanceCashIV;
      otherwise
        Acptr.Register = kAcceptanceIV;
    end;
    Acptr.CustCode = IVr.CustCode;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,Expr,RLr)) then begin
    Acptr.Register = kAcceptanceExp;
    Acptr.CustCode = Expr.Person;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,IntORr,RLr)) then begin
    Acptr.Register = kAcceptanceIntOR;
    Acptr.CustCode = IntORr.OurUser;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,SDr,RLr)) then begin
    Acptr.Register = kAcceptanceSD;
    Acptr.CustCode = "";
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,TBBUr,RLr)) then begin
    Acptr.Register = kAcceptanceTBBU;
    Acptr.CustCode = TBBUr.PRCode;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,LAr,RLr)) then begin
    Acptr.Register = kAcceptanceLeaveApplication;
    Acptr.CustCode = LAr.Employee;
    goto Lfound3;
  end;
  if (ReadRecordLink(Actr,1,LTr,RLr)) then begin
    Acptr.Register = kAcceptanceLeaveTransfer;
    Acptr.CustCode = LTr.Employee;
    goto Lfound3;
  end;
  if (OuterFindAcceptanceRulesForActivityData(Actr,Acptr)) then begin
    goto Lfound3;
  end;

Lfound3:;

  if (ReadAcceptanceRules(Acptr.Register,Acptr.CustCode,Acptr)) then begin
    res = true;
  end;  
  FindAcceptanceRulesForActivity = res;
  return;
end;

global
function Boolean ActivityIsForAcceptanceOrFYI(record ActVc Actr,Boolean acptf,Boolean fyif)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;
     
  res = false;
  if (FindAcceptanceRulesForActivity(Actr,Acptr)) then begin
    res = (acptf and Actr.ActType==Acptr.AcceptanceActType) or (fyif and Actr.ActType==Acptr.FYIActType);
  end;
LActivityIsForAcceptanceOrFYI:;
  ActivityIsForAcceptanceOrFYI = res;
end;

global
function Boolean ActivityIsForAbsence(record ActVc Actr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;
  
  res = false;
  while (LoopMain(Acptr,1,true)) begin
    if (nonblank(Acptr.AbsentActType) and Actr.ActType==Acptr.AbsentActType) then begin
      res = true;
      goto LActivityIsForAbsence;
    end;
  end;
LActivityIsForAbsence:;
  ActivityIsForAbsence = res;
  return;
end;

global
function Boolean ApprovalActvityAttachments(record ActVc Actr,var Array record RLinkVc aRLr)
begin
  Boolean res;
  record POVc POr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record OPVc OPr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  record RLinkVc RLr;
  record Attach2Vc Attachr;
  Integer attnr;

  attnr = 1;
  if (ReadRecordLink(Actr,1,POr,RLr)) then begin
    while (ReadRecordLink(POr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,PUr,RLr)) then begin
    while (ReadRecordLink(PUr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,VIr,RLr)) then begin
    while (ReadRecordLink(VIr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,Expr,RLr)) then begin
    while (ReadRecordLink(Expr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,OPr,RLr)) then begin
    while (ReadRecordLink(OPr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,IntORr,RLr)) then begin
    while (ReadRecordLink(IntORr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,QTr,RLr)) then begin
    while (ReadRecordLink(QTr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,OYr,RLr)) then begin
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,ORr,RLr)) then begin
    while (ReadRecordLink(ORr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,IVr,RLr)) then begin
    while (ReadRecordLink(IVr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,SDr,RLr)) then begin
    while (ReadRecordLink(SDr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,TBBUr,RLr)) then begin
    while (ReadRecordLink(TBBUr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,LAr,RLr)) then begin
    while (ReadRecordLink(LAr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (ReadRecordLink(Actr,1,LTr,RLr)) then begin
    while (ReadRecordLink(LTr,attnr,Attachr,RLr)) begin
      aRLr[aRLr.length] = RLr;
      attnr = attnr + 1;
    end;
    res = true;
    goto LApprovalActvityAttachments;
  end;
  if (OuterApprovalActvityAttachments(Actr,aRLr)) then begin
    res = true;
    goto LApprovalActvityAttachments;
  end;
LApprovalActvityAttachments:;  
  ApprovalActvityAttachments = res;
  return;
end;

global
updating procedure ApproveActivity(var record ActVc Actr,Boolean updf)
begin
  record AcceptanceRulesVc Acptr;
  record ActTypeVc ATr;
  record ActVc oldActr;
  
  if (FindAcceptanceRulesForActivity(Actr,Acptr)==false) then begin
    goto LApproveActivity;
  end;
  ATr.Code = Acptr.AcceptedActType;
  if (ReadFirstMain(ATr,1,true)==false) then begin goto LApproveActivity; end;
  
  if (updf) then begin
    RecordCopy(oldActr,Actr);
  end;
  Actr.ActResult = ATr.Code;
  Actr.OKFlag = 1;
  Actr.EndDate = CurrentDate;
  Actr.EndTime = CurrentTime;
  if (updf) then begin
    RecordUpdate(oldActr,Actr,true);
  end;
  
LApproveActivity:;  
  return;
end;

global
updating procedure DeleteActivity(var record ActVc Actr,Boolean updf)
begin
  record AcceptanceRulesVc Acptr;
  record ActTypeVc ATr;
  
  if (FindAcceptanceRulesForActivity(Actr,Acptr)) then begin
    goto LDeleteActivity;
  end;
  RecordDelete(Actr);  
LDeleteActivity:;  
  return;
end;

global
updating procedure RejectActivity(var record ActVc Actr,Boolean updf)
begin
  record AcceptanceRulesVc Acptr;
  record ActTypeVc ATr;
  record ActVc oldActr;
  
  if (FindAcceptanceRulesForActivity(Actr,Acptr)==false) then begin
    goto LRejectActivity;
  end;
  ATr.Code = Acptr.RejectedActType;
  if (ReadFirstMain(ATr,1,true)==false) then begin goto LRejectActivity; end;
  
  if (updf) then begin
    RecordCopy(oldActr,Actr);
  end;
  Actr.ActResult = ATr.Code;
  Actr.OKFlag = 1;
  Actr.EndDate = CurrentDate;
  Actr.EndTime = CurrentTime;
  if (updf) then begin
    RecordUpdate(oldActr,Actr,true);
  end;
  
LRejectActivity:;  
  return;
end;

global
updating procedure ForwardActivity(var record ActVc Actr,Boolean updf)
begin
  record AcceptanceRulesVc Acptr;
  record ActTypeVc ATr;
  record ActVc oldActr;
  
  if (FindAcceptanceRulesForActivity(Actr,Acptr)==false) then begin
    goto LForwardActivity;
  end;
  ATr.Code = Acptr.ForwardedActType;
  if (ReadFirstMain(ATr,1,true)==false) then begin goto LForwardActivity; end;
  
  if (updf) then begin
    RecordCopy(oldActr,Actr);
  end;
  Actr.ActResult = ATr.Code;
  Actr.OKFlag = 1;
  Actr.EndDate = CurrentDate;
  Actr.EndTime = CurrentTime;
  if (updf) then begin
    RecordUpdate(oldActr,Actr,true);
  end;
  
LForwardActivity:;  
  return;
end;

global
function Boolean FindAcceptanceRulesAndAmountForActivity(record ActVc Actr,var record AcceptanceRulesVc Acptr,var val bc1v)
begin
  Boolean res;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  record RLinkVc RLr;
  record ActVc theActr;
  record ActVc PActr;
  record POVc POr;
  record OPVc OPr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record QTVc QTr;
  record OYVc OYr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  record UserVc Userr;
    
  res = false;
  Acptr.Register = -1;
  bc1v = blankval;
  if (ReadRecordLink(Actr,1,theActr,RLr)) then begin
    Acptr.Register = kAcceptanceAct;
    Acptr.CustCode = theActr.CUCode;
    bc1v = blankval;
    goto Lfound4;
  end;  
  if (ReadRecordLink(Actr,1,PActr,RLr)) then begin
    Acptr.Register = kAcceptanceProjectAct;
    Acptr.CustCode = PActr.CUCode;
    bc1v = blankval;
    goto Lfound4;
  end;  
  if (ReadRecordLink(Actr,1,POr,RLr)) then begin
    Acptr.Register = kAcceptancePO;
    Acptr.CustCode = POr.VECode;
    bc1v = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);  
    goto Lfound4;
  end;    
  if (ReadRecordLink(Actr,1,PUr,RLr)) then begin
    Acptr.Register = kAcceptancePU;
    Acptr.CustCode = PUr.VECode;
    bc1v = PUr.PayVal;
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,VIr,RLr)) then begin
    Acptr.Register = kAcceptanceVI;
    Acptr.CustCode = VIr.VECode;
    bc1v = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,QTr,RLr)) then begin
    Acptr.Register = kAcceptanceQT;
    Acptr.CustCode = QTr.CustCode;
    bc1v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);  
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,OYr,RLr)) then begin
    Acptr.Register = kAcceptanceOY;
    Acptr.CustCode = OYr.CustCode;
    bc1v = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);  
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,ORr,RLr)) then begin
    Acptr.Register = kAcceptanceOR;
    Acptr.CustCode = ORr.CustCode;
    bc1v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,IVr,RLr)) then begin
    switch (IVr.InvType) begin
      case kInvoiceTypeCredit:
        Acptr.Register = kAcceptanceCredIV;
      case kInvoiceTypeCash:
        Acptr.Register = kAcceptanceCashIV;
      case kInvoiceTypeCreditSpecialSales:
        Acptr.Register = kAcceptanceCashIV;
      otherwise
        Acptr.Register = kAcceptanceIV;
    end;
    Acptr.CustCode = IVr.CustCode;
    bc1v = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);                
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,Expr,RLr)) then begin
    Acptr.Register = kAcceptanceExp;
    Userr.Code = Expr.Person;
    ReadFirstMain(Userr,1,true);
    Acptr.CustCode = Userr.CustCode;
    bc1v = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,OPr,RLr)) then begin
    Acptr.Register = kAcceptanceOP;
    Acptr.CustCode = OPr.Sign;
    bc1v = GetAcceptanceSum_OPVc(OPr); 
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,IntORr,RLr)) then begin
    Acptr.Register = kAcceptanceIntOR;
    Acptr.CustCode = IntORr.OurUser;
    bc1v = IntORr.Total;
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,SDr,RLr)) then begin
    Acptr.Register = kAcceptanceSD;
    Acptr.CustCode = "";
    bc1v = GetAcceptanceSum_SDVc(SDr);
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,TBBUr,RLr)) then begin
    Acptr.Register = kAcceptanceTBBU;
    Acptr.CustCode = TBBUr.PRCode;
    bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);        
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,LAr,RLr)) then begin
    Acptr.Register = kAcceptanceLeaveApplication;
    Acptr.CustCode = LAr.Employee;
    bc1v = blankval;
    goto Lfound4;
  end;
  if (ReadRecordLink(Actr,1,LTr,RLr)) then begin
    Acptr.Register = kAcceptanceLeaveTransfer;
    Acptr.CustCode = LTr.Employee;
    bc1v = blankval;
    goto Lfound4;
  end;
  if (OuterFindAcceptanceRulesAndAmountForActivity(Actr,Acptr,bc1v)) then begin
    goto Lfound4;
  end;

Lfound4:;
  if (ReadAcceptanceRules(Acptr.Register,Acptr.CustCode,Acptr)) then begin
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (SetInSet(Actr.MainPersons,Acptrw.AcceptanceBy)) then begin
        res = true;
        i = rwcnt;
      end;
    end;
  end;  
  FindAcceptanceRulesAndAmountForActivity = res;
  return;
end;

/*
global
function Boolean ApprovalActivityForCurrentUser(record ActVc Actr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  val bc1v;
  string 255 neededusers;

  if (FindAcceptanceRulesAndAmountForActivity(Actr,Acptr,bc1v)) then begin
    neededusers = ApprovalUsers(Acptr,bc1v);
    if (SetInSet(Actr.MainPersons,neededusers)) then begin
      res = true;
    end;
  end;
  ApprovalActivityForCurrentUser = res;
  return;
end;
*/

global
updating procedure SendforNextLevelManualApproval(record RcVc RepSpec,record ActVc Actr)
begin
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  string 255 sender,crncy;
  val bc1v,amount;
  record RLinkVc RLr;
  string 255 fromfilename,fromsernr;
  record ActVc theActr;
  record ActVc PActr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record IVVc IVr;
  record OPVc OPr;
  record ORVc ORr;
  record QTVc QTr;
  record OYVc OYr;
  record POVc POr;
  record PUVc PUr;
  record SDVc SDr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  LongInt pos;

  Acptr.Register = -1;
  if (ReadRecordLink(Actr,1,theActr,RLr)) then begin
    if (theActr.TodoFlag!=kTodoFlagProject) then begin
      fromfilename = "ActVc";
      fromsernr = theActr.SerNr;
      Acptr.Register = kAcceptanceAct;      
      Acptr.CustCode = theActr.CUCode;
      pos = 0;
      GetNextSubstring(theActr.MainPersons,pos,",",sender);
      bc1v = blankval;
      goto Lfound5;
    end;
  end;
  if (ReadRecordLink(Actr,1,PActr,RLr)) then begin
    if (PActr.TodoFlag==kTodoFlagProject) then begin
      fromfilename = "ProjActVc";
      fromsernr = PActr.SerNr;
      Acptr.Register = kAcceptanceProjectAct;      
      Acptr.CustCode = PActr.CUCode;
      pos = 0;
      GetNextSubstring(PActr.MainPersons,pos,",",sender);
      bc1v = blankval;
      goto Lfound5;
    end;
  end;
  if (ReadRecordLink(Actr,1,POr,RLr)) then begin
    fromfilename = "POVc";
    fromsernr = POr.SerNr;
    Acptr.Register = kAcceptancePO;      
    sender = POr.SalesMan;
    Acptr.CustCode = POr.VECode;
    bc1v = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);                
    amount = POr.Sum4;
    crncy = POr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,Expr,RLr)) then begin
    fromfilename = "ExpVc";
    fromsernr = Expr.SerNr;
    Acptr.Register = kAcceptanceExp;      
    sender = Expr.Person;
    Acptr.CustCode = Expr.Person;
    bc1v = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
    amount = Expr.PayVal;
    crncy = Expr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,IntORr,RLr)) then begin
    fromfilename = "IntORVc";
    fromsernr = IntORr.SerNr;
    Acptr.Register = kAcceptanceIntOR;      
    sender = IntORr.OurUser;
    Acptr.CustCode = IntORr.OurUser;
    bc1v = IntORr.Total;
    amount = IntORr.Total;
    crncy = "";
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,LAr,RLr)) then begin
    fromfilename = "LeaveApplicationVc";
    fromsernr = LAr.SerNr;
    Acptr.Register = kAcceptanceLeaveApplication;      
    sender = LAr.Employee;
    Acptr.CustCode = LAr.Employee;
    amount = blankval;
    bc1v = blankval;
    crncy = "";
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,LTr,RLr)) then begin
    fromfilename = "LeaveTransferVc";
    fromsernr = LTr.SerNr;
    Acptr.Register = kAcceptanceLeaveApplication;      
    sender = LTr.Employee;
    Acptr.CustCode = LAr.Employee;
    amount = blankval;
    bc1v = blankval;
    crncy = "";
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,IVr,RLr)) then begin
    fromfilename = "IVVc";
    fromsernr = IVr.SerNr;
    switch (IVr.InvType) begin
      case kInvoiceTypeCashInvoiceReceiptPRT:
        Acptr.Register = kAcceptanceCashIV;
      case kInvoiceTypeCash:
        Acptr.Register = kAcceptanceCashIV;
      case kInvoiceTypeCredit:
        Acptr.Register = kAcceptanceCredIV;
      case kInvoiceTypeCreditSpecialSales:
        Acptr.Register = kAcceptanceCredIV;
      otherwise
        Acptr.Register = kAcceptanceIV;
    end;
    sender = IVr.SalesMan;
    Acptr.CustCode = IVr.CustCode;
    bc1v = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);                
    amount = IVr.Sum4;
    crncy = IVr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,OPr,RLr)) then begin
    fromfilename = "OPVc";
    fromsernr = OPr.SerNr;
    Acptr.Register = kAcceptanceOP;      
    sender = CurrentUser;
    Acptr.CustCode = "";
    bc1v = GetAcceptanceSum_OPVc(OPr); 
    amount = OPr.CurPayVal;
    crncy = OPr.PayCurCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,QTr,RLr)) then begin
    fromfilename = "QTVc";
    fromsernr = QTr.SerNr;
    Acptr.Register = kAcceptanceQT;      
    sender = QTr.SalesMan;
    Acptr.CustCode = QTr.CustCode;
    bc1v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);                
    amount = QTr.Sum4;
    crncy = QTr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,OYr,RLr)) then begin
    fromfilename = "OYVc";
    fromsernr = OYr.SerNr;
    Acptr.Register = kAcceptanceOY;      
    sender = OYr.SalesMan;
    Acptr.CustCode = OYr.CustCode;
    bc1v = MulRateToBase1(OYr.CurncyCode,OYr.Sum4,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);                
    amount = OYr.Sum4;
    crncy = OYr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,ORr,RLr)) then begin
    fromfilename = "ORVc";
    fromsernr = ORr.SerNr;
    Acptr.Register = kAcceptanceOR;      
    sender = ORr.SalesMan;
    Acptr.CustCode = ORr.CustCode;
    bc1v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);                
    amount = ORr.Sum4;
    crncy = ORr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,PUr,RLr)) then begin
    fromfilename = "PUVc";
    fromsernr = PUr.SerNr;
    Acptr.Register = kAcceptancePU;      
    sender = CurrentUser;
    Acptr.CustCode = PUr.VECode;
    bc1v = PUr.PayVal;
    amount = PUr.PayVal;
    crncy = PUr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,TBBUr,RLr)) then begin
    fromfilename = "TBBUVc";
    fromsernr = TBBUr.PRCode;
    Acptr.Register = kAcceptanceTBBU;      
    sender = TBBUr.SalesMan;
    Acptr.CustCode = TBBUr.CustCode;
    bc1v = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);        
    amount = TBBUr.TotSum;
    crncy = TBBUr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,VIr,RLr)) then begin
    fromfilename = "VIVc";
    fromsernr = VIr.SerNr;
    Acptr.Register = kAcceptanceVI;      
    sender = VIr.SalesMan;
    Acptr.CustCode = VIr.VECode;
    bc1v = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);                
    amount = VIr.PayVal;
    crncy = VIr.CurncyCode;
    goto Lfound5;
  end;
  if (ReadRecordLink(Actr,1,SDr,RLr)) then begin
    fromfilename = "SDVc";
    fromsernr = SDr.SerNr;
    Acptr.Register = kAcceptanceSD;      
    sender = CurrentUser;
    Acptr.CustCode = "";
    bc1v = GetAcceptanceSum_SDVc(SDr);
    crncy = "";
    goto Lfound5;
  end;
  if (OuterSendforNextLevelManualApprovalData(Actr,Acptr,fromfilename,fromsernr,bc1v,sender)) then begin
    goto Lfound5;
  end;

Lfound5:;  
  if (ReadAcceptanceRules(Acptr.Register,Acptr.CustCode,Acptr)) then begin
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if ((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) and (SetInSet(RepSpec.f1,Acptrw.AcceptanceBy)) then begin
        CreateApprovalAlert(fromfilename,fromsernr,sender,bc1v,amount,crncy,Acptr.CustCode,Acptr,Acptrw,RepSpec.f1,RepSpec.f2);
        goto LSendforNextLevelManualApproval;
      end;
    end;
  end;
LSendforNextLevelManualApproval:;
  return;
end;

global
function Boolean ApprovalRulesExist(string filename,string custcode)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;
  
  switch (FileName) begin
    case "ActVc": 
      res = kAcceptanceAct;
    case "ProjActVc": 
      res = kAcceptanceProjectAct;
    case "ExpVc": 
      Acptr.Register = kAcceptanceExp;
    case "IntORVc": 
      Acptr.Register = kAcceptanceIntOR;
    case "IVVc": 
      Acptr.Register = kAcceptanceIV;
    case "ORVc": 
      Acptr.Register = kAcceptanceOR;
    case "POVc": 
      Acptr.Register = kAcceptancePO;
    case "PUVc": 
      Acptr.Register = kAcceptancePU;
    case "QTVc": 
      Acptr.Register = kAcceptanceQT;
    case "OYVc": 
      Acptr.Register = kAcceptanceOY;
    case "TBBUVc": 
      Acptr.Register = kAcceptanceTBBU;      
    case "VIVc": 
      Acptr.Register = kAcceptanceVI;      
    case "SDVc":
      Acptr.Register = kAcceptanceSD;      
    case "OPVc":
      Acptr.Register = kAcceptanceOP;      
    case "LeaveTransferVc":
      Acptr.Register = kAcceptanceLeaveTransfer;      
    case "LeaveApplicationVc":
      Acptr.Register = kAcceptanceLeaveApplication;      
    otherwise
      Acptr.Register = OuterReadAcceptanceRulesForFileName(FileName);
      if (Acptr.Register<=0) then begin
        goto LApprovalRulesExist;
      end;
  end;

  if (ReadAcceptanceRules(Acptr.Register,custcode,Acptr)) then begin
    res = true;
  end;
LApprovalRulesExist:;  
  ApprovalRulesExist = res;
  return;
end;
