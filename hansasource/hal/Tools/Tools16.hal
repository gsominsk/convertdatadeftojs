external function roundmode GetRowSumRoundMode(record RoundBlock);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode GetTotalRoundMode(record RoundBlock);
external function roundmode DefaultRoundMode();
external function roundmode SetRoundMode(Integer,Integer,Integer,Integer);
external function roundmode SetRoundModeD(Integer);
external function Boolean GetPMCurrency(string,var string);
external procedure OPVc_PasteBankCurncy(var record OPVc,Integer);
external procedure GetItemCreditVATCode(string,Integer,var string,Boolean);
external procedure GetItemCreditSalesAcc(string,Integer,var string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetAccCur(string,var string);
external function LongInt NextFreeCashSerNr(row PMBlock,Boolean);

global
procedure PastePMInCLIn(var record CLInVc CLInp)
BEGIN
  record MainCLBlock MainCLRec;
  record PMBlock PMRec;
  row PMBlock pmrw;
  Integer i,rn,rwcnt;
  LongInt sernr;
  string 10 curcode;
  val fr,to1,to2,br1,br2;

  BlockLoad(MainCLRec);
  BlockLoad(PMRec);
//  CLInp.SerNr = -1; //why ? what if CLIbis being updated ?
  rwcnt = MatRowCnt(PMRec);
  rn = 0;
  if (blank(CLInp.PayMode)) then begin goto L88PastePMInCLIn; end;
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==CLInp.PayMode) then begin 
      if (MainCLRec.CommonNoSer!=0) then begin
        if (pmrw.TSerStartIn!=-1) then begin
          sernr = NextFreeCashSerNr(pmrw,true);
          CLInp.SerNr = sernr;        
        end;
      end;
      rn = i;
      goto L88PastePMInCLIn;
    end;
  end;  
L88PastePMInCLIn:;
  if (rwcnt>0) then begin
    MatRowGet(PMRec,rn,pmrw);      
    if (blank(CLInp.PayMode)) then begin
      CLInp.PayMode = pmrw.Code;
      if (MainCLRec.CommonNoSer!=0) then begin
        if (pmrw.TSerStartIn!=-1) then begin
          sernr = NextFreeCashSerNr(pmrw,true);
          CLInp.SerNr = sernr;        
        end;
      end;
    end;
    if (GetAccCur(pmrw.AccNr,curcode)) then begin end;
  end;
  if (nonblank(curcode)) then begin
    GetFullCurncyRate(curcode,CLInp.TransDate,fr,to1,to2,br1,br2);
    CLInp.CurncyCode = curcode;
    CLInp.FrRate = fr;
    CLInp.ToRateB1 = to1; 
    CLInp.ToRateB2 = to2;
    CLInp.BaseRate1 = br1;
    CLInp.BaseRate2 = br2;
  end;
  if (CLInp.SerNr==-1) then begin
    if (ServingClient==false) then begin
      CLInp.SerNr = NextSerNr("CLInVc",CLInp.TransDate,-1,false,CLInp.LangCode);
    end;  
  end;
  RETURN;
END;

global
procedure PastePMInPP(var record PPVc PPp)
BEGIN
  record MainCLBlock MainCLRec;
  record PMBlock PMRec;
  row PMBlock pmrw;
  Integer i,rn,rwcnt;
  string 10 curcode;
  val fr,to1,to2,br1,br2;
  Boolean clinf;

  BlockLoad(MainCLRec);
  BlockLoad(PMRec);
//  PPp.SerNr = -1;//why ? what if CLIbis being updated ?
  rwcnt = MatRowCnt(PMRec);
  rn = 0;
  if (PPp.PayVal>=0) then begin
    clinf = false;
  end else begin
    clinf = true;
  end;
  if (blank(PPp.PayMode)) then begin goto L88PastePMInPP; end;
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==PPp.PayMode) then begin 
      if (MainCLRec.CommonNoSer!=0) then begin
        if (clinf) then begin
          if (pmrw.TSerStartIn!=-1) then begin
            PPp.SerNr = NextFreeCashSerNr(pmrw,clinf);
          end;
        end else begin
          if (pmrw.TSerStartOut!=-1) then begin
            PPp.SerNr = NextFreeCashSerNr(pmrw,clinf);
          end;
        end;
      end;
      rn = i;
      goto L88PastePMInPP;
    end;
  end;  
L88PastePMInPP:;
  if (rwcnt>0) then begin
    MatRowGet(PMRec,rn,pmrw);      
    if (blank(PPp.PayMode)) then begin
      PPp.PayMode = pmrw.Code;
      if (MainCLRec.CommonNoSer!=0) then begin
        if (clinf) then begin
          if (pmrw.TSerStartIn!=-1) then begin
            PPp.SerNr = NextFreeCashSerNr(pmrw,clinf);
          end;
        end else begin
          if (pmrw.TSerStartOut!=-1) then begin
            PPp.SerNr = NextFreeCashSerNr(pmrw,clinf);
          end;
        end;
      end;
    end;
    PPp.SortCode = pmrw.SortCode;
    PPp.BankAcc = pmrw.BankNr;
    if (GetAccCur(pmrw.AccNr,curcode)) then begin end;
  end;
  if (nonblank(curcode)) then begin
    GetFullCurncyRate(curcode,PPp.TransDate,fr,to1,to2,br1,br2);
    PPp.CurncyCode = curcode;
    PPp.FrRate = fr;
    PPp.ToRateB1 = to1; 
    PPp.ToRateB2 = to2;
    PPp.BaseRate1 = br1;
    PPp.BaseRate2 = br2;
  end;
  if (PPp.SerNr==-1) then begin
    if (ServingClient==false) then begin
      PPp.SerNr = NextSerNr("PPVc",PPp.TransDate,-1,false,"");
    end;  
  end;
  RETURN;
END;

global
procedure PastePMInCLOut(var record CLOutVc CLOutp)
BEGIN
  record MainCLBlock MainCLRec;
  record PMBlock PMRec;
  row PMBlock pmrw;
  Integer i,rn,rwcnt;
  string 10 curcode;
  val fr,to1,to2,br1,br2;

  BlockLoad(MainCLRec);
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  rn = 0;
  if (blank(CLOutp.PayMode)) then begin goto L88PastePMInCLOut; end;
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==CLOutp.PayMode) then begin 
      if (MainCLRec.CommonNoSer!=0) then begin
        if (pmrw.TSerStartIn!=-1) then begin
          CLOutp.SerNr = NextFreeCashSerNr(pmrw,false);
        end else begin
          CLOutp.SerNr = -1;
          if (SingleUserMode) then begin
            CLOutp.SerNr = NextSerNr("CLOutVc",CLOutp.TransDate,-1,false,"");
          end;
        end;
      end;
      rn = i;
      goto L88PastePMInCLOut;
    end;
  end;  
L88PastePMInCLOut:;
  if (rwcnt>0) then begin
    MatRowGet(PMRec,rn,pmrw);      
    if (blank(CLOutp.PayMode)) then begin
      CLOutp.PayMode = pmrw.Code;
      if (MainCLRec.CommonNoSer!=0) then begin
        if (pmrw.TSerStartIn!=-1) then begin
          CLOutp.SerNr = NextFreeCashSerNr(pmrw,false);
        end;
      end;
    end;
    if (GetAccCur(pmrw.AccNr,curcode)) then begin end;
  end;
  if (nonblank(curcode)) then begin
    GetFullCurncyRate(curcode,CLOutp.TransDate,fr,to1,to2,br1,br2);
    CLOutp.CurncyCode = curcode;
    CLOutp.FrRate = fr;
    CLOutp.ToRateB1 = to1; 
    CLOutp.ToRateB2 = to2;
    CLOutp.BaseRate1 = br1;
    CLOutp.BaseRate2 = br2;
  end;
  if (CLOutp.SerNr==-1) then begin
    if (ServingClient==false) then begin
      CLOutp.SerNr = NextSerNr("CLOutVc",CLOutp.TransDate,-1,false,CLOutp.LangCode);
    end;  
  end;
  RETURN;
END;

global
procedure SetupVendPS2Rn(string vecode,record RcVc RepSpec)
BEGIN
  record VEPSVc VEPSr;

  RepSpec.repname = "VEPSRn";
  ReportDefaults(RepSpec,"VendPSRClass");
  RepSpec.UsedOnly = 0;
  RepSpec.Media = mtScreen;
  RepSpec.f1 = vecode;
  RepSpec.f6 = CurrentUser;
  VEPSr.Signature = RepSpec.f6;
  RepSpec.vals0 = 5;
  if (ReadFirstMain(VEPSr,1,true)) then begin
    RepSpec.repname = "VendPSRn";
  end;
  RETURN;
END;

global
function Boolean QtyDepPriceL(string pl)
BEGIN
  Boolean res;
  record PLDefVc PLDefR;
  
  PLDefR.Code = pl;
  if (ReadFirstMain(PLDefR,1,true)) then begin
    if (PLDefR.DepPrice==1) then begin 
      res = true;
    end;
  end;
  QtyDepPriceL = res;
  RETURN;
END;

global
procedure COMultiLineText(record COVc COr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row COVc COrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(COr,COrw,1);
    COrw.Spec = tstr;
    MatRowInsert(COr,arow+tcnt-1,COrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

function roundmode SetRoundoff(row CurncyRoundOffBlock CROrw,string typ)
begin
  roundmode res;

  switch (typ) begin
    case "vat":
      res.decimals = CROrw.RndVATDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = CROrw.RndVATDirec;
      res.mode = CROrw.RndVATMode;
      res.step =  CROrw.RndVATStep;
    case "total":
      res.decimals = CROrw.RndTotalDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = CROrw.RndTotalDirec;
      res.mode = CROrw.RndTotalMode;
      res.step =  CROrw.RndTotalStep;
    case "rowsum":
      res.decimals = CROrw.RndRowsumDecs;      
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = CROrw.RndRowsumDirec;
      res.mode = CROrw.RndRowsumMode;
      res.step =  CROrw.RndRowsumStep;
  end;
  SetRoundoff = res;
  return;
end;

procedure SetRoundoffs(row CurncyRoundOffBlock CROrw,var roundmode roundoff,var roundmode roundlines,var roundmode roundvat)
begin
  roundoff = SetRoundoff(CROrw,"total");
  roundlines = SetRoundoff(CROrw,"rowsum");
  roundvat = SetRoundoff(CROrw,"vat");
  return;
end;

global
procedure GetCurncyRoundoff(string curncycode,string paydeal,string filename,var roundmode roundoff,var roundmode roundlines,var roundmode roundvat)
begin
  record RoundBlock RoundRec;
  record CurncyRoundOffBlock CROr;
  row CurncyRoundOffBlock CROrw;
  Integer i,rwcnt;

  BlockLoad(RoundRec);
  roundoff = GetTotalRoundMode(RoundRec);
  roundlines = GetRowSumRoundMode(RoundRec);
  roundvat = GetVATRoundMode(RoundRec);
  if ((nonblank(curncycode)) or (nonblank(paydeal)) or (nonblank(filename))) then begin

    BlockLoad(CROr);
    rwcnt = MatRowCnt(CROr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CROr,i,CROrw);
      if ((CROrw.CurncyCode==curncycode) and (CROrw.PayDeal==paydeal) and ((StringSetFromString(397,CROrw.VcName)==filename) or (StringSetFromString(397,CROrw.VcName)=="All"))) then begin
        SetRoundoffs(CROrw,roundoff,roundlines,roundvat);
        goto LGetCurncyRoundoff;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CROr,i,CROrw);
      if ((CROrw.CurncyCode==curncycode) and (blank(CROrw.PayDeal)) and ((StringSetFromString(397,CROrw.VcName)==filename) or (StringSetFromString(397,CROrw.VcName)=="All"))) then begin
        SetRoundoffs(CROrw,roundoff,roundlines,roundvat);
        goto LGetCurncyRoundoff;
      end;
    end;
/* No, we should not search for Paydeal only, this is for currency use
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CROr,i,CROrw);
      if (CROrw.PayDeal==paydeal) then begin
        SetRoundoffs(CROrw,roundoff,roundlines,roundvat);
        goto LGetCurncyRoundoff;
      end;
    end;
*/
  end;
LGetCurncyRoundoff:;
  return;
end;

global
procedure PasteCreditSalesAccs(record IVVc IVp)
BEGIN
  Integer i,rwcnt;
  row IVVc IVrw;
  string 255 tstr;
  Boolean putf;

  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;
        putf = true;
        if (nonblank(IVrw.SalesAcc)) then begin
          GetItemCreditSalesAcc(IVrw.ArtCode,IVp.ExportFlag,tstr);    
          IVrw.SalesAcc = tstr;
          putf = true;
        end;
        if (nonblank(IVrw.VATCode)) then begin
          GetItemCreditVATCode(IVrw.ArtCode,IVp.ExportFlag,tstr,true);
          if (nonblank(IVp.CustVATCode)) then begin
            tstr = IVp.CustVATCode;
          end;
          IVrw.VATCode = tstr;
          putf = true;
        end;
        if (putf) then begin
          MatRowPut(IVp,i,IVrw);    
        end;
    end;
  end;
  RETURN;
END;


global
procedure AddBatchText(record IVVc IVp)
BEGIN
  Integer srw;
  row IVVc IVrw;
  record BatchTextVc btp;
  row BatchTextVc BTrw;
  Boolean found;
  Integer i,rwcnt;
  
  srw = MatRowCnt(IVp);
  MatRowGet(IVp,srw-1,IVrw);  
  btp.ArtCode = IVrw.ArtCode;
  btp.SerialNr = IVrw.SerialNr;
  found = ReadFirstMain(btp,2,true);
  if (found==false) then begin
    btp.ArtCode = "";
    btp.SerialNr = IVrw.SerialNr;
    found = ReadFirstMain(btp,2,true);
  end;
  if (found) then begin
    rwcnt = MatRowCnt(btp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(btp,i,BTrw);
      ClearRow(IVp,IVrw,1);
      IVrw.stp = kInvoiceRowTypeNormal;
      IVrw.Spec = BTrw.Spec;
      MatRowPut(IVp,srw,IVrw);
      srw = srw + 1;
    end;
  end;
  RETURN;
END;

global
procedure DispatchMultiLineText(record DispatchVc Dispatchr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row DispatchVc Dispatchrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(Dispatchr,Dispatchrw,1);
    Dispatchrw.Spec = tstr;
    MatRowInsert(Dispatchr,arow+tcnt-1,Dispatchrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

global
procedure OffHireMultiLineText(record OffHireVc OffHirer,record INVc INr,string  langcode,Integer arow)
BEGIN
  row OffHireVc OffHirerw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(OffHirer,OffHirerw,1);
    OffHirerw.Spec = tstr;
    MatRowInsert(OffHirer,arow+tcnt-1,OffHirerw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

global
procedure INTransferMultiLineText(record INTransferVc INTransferr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row INTransferVc INTransferrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(INTransferr,INTransferrw,1);
    INTransferrw.Spec = tstr;
    MatRowInsert(INTransferr,arow+tcnt-1,INTransferrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

global
procedure CollectionMultiLineText(record CollectionVc Collectionr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row CollectionVc Collectionrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(Collectionr,Collectionrw,1);
    Collectionrw.Spec = tstr;
    MatRowInsert(Collectionr,arow+tcnt-1,Collectionrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

global
procedure InternMovMultiLineText(record InternMovVc InternMovr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row InternMovVc InternMovrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(InternMovr,InternMovrw,1);
    InternMovrw.Spec = tstr;
    MatRowInsert(InternMovr,arow+tcnt-1,InternMovrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

