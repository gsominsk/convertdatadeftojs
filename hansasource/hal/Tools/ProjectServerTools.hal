external function val DivWithRateToBase1(string,Date,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetTJGIPrice(record TJGIVc,string,string,var Integer,var val);
external procedure GetTIPrice(record TIVc,string,string,var Integer,var val);
external function Boolean GetTimeClassPrice(string,string,var val,var val);//37
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

function Boolean GetBudgetPrice(string project,string item,string empl,string timeclass,var val price,var val discount,var string markup,
                                var val priceincur,var string markupincur)
BEGIN
  Boolean res;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  Boolean testf;
  
  res = false;
  price = blankval;
  discount = blankval;
  TBBUr.PRCode = project;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.stp==1) then begin
        if (nonblank(TBBUrw.ArtCode)) then begin
          testf = true;
          if (TBBUrw.ArtCode<>item) then begin testf = false; end;
          if (TBBUrw.EMCode<>empl) then begin testf = false; end;
          if (TBBUrw.TimeClass<>timeclass) then begin testf = false; end;
          if (testf) then begin
            price = TBBUrw.Price;
            discount = TBBUrw.Discount;        
            markup = TBBUrw.Markup;        
            res = true;
            i = rwcnt;
            goto LGetBudgetPrice;
          end;
        end;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      testf = true;
      if (TBBUrw.stp==1) then begin
        if (nonblank(TBBUrw.ArtCode)) then begin
          if (TBBUrw.ArtCode<>item) then begin testf = false; end;
          if (nonblank(TBBUrw.EMCode)) then begin testf = false; end;
          if (TBBUrw.TimeClass<>timeclass) then begin testf = false; end;
          if (testf) then begin
            price = TBBUrw.Price;
            discount = TBBUrw.Discount;
            markup = TBBUrw.Markup;        
            res = true;
            i = rwcnt;
            goto LGetBudgetPrice;
          end;
        end;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.stp==1) then begin
        testf = true;
        if (nonblank(TBBUrw.ArtCode)) then begin testf = false; end;
        if (TBBUrw.EMCode<>empl) then begin testf = false; end;
        if (TBBUrw.TimeClass<>timeclass) then begin testf = false; end;
        if (testf) then begin
          price = TBBUrw.Price;
          discount = TBBUrw.Discount;
          markup = TBBUrw.Markup;        
          res = true;
          i = rwcnt;
          goto LGetBudgetPrice;
        end;
      end;
    end;    
LGetBudgetPrice:;
    if (nonblank(TBBUr.CurncyCode)) then begin
      priceincur = price;
      price = blankval;
      
      markupincur = markup;
      markup = blankval;
    end;
  end;
  GetBudgetPrice = res;
  RETURN;
END;

global
function Boolean GetBudgetCostPrice(string project,string item,string empl,string timeclass,var val costprice)
BEGIN
  Boolean res;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  Boolean testf;
  
  res = false;
  costprice = blankval;
  TBBUr.PRCode = project;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      testf = true;
      if (TBBUrw.ArtCode<>item) then begin testf = false; end;
      if (TBBUrw.EMCode<>empl) then begin testf = false; end;
      if (TBBUrw.TimeClass<>timeclass) then begin testf = false; end;
      if (testf) then begin
        costprice = TBBUrw.Cost;
        res = true;
        i = rwcnt;
        goto LGetBudgetCostPrice;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      testf = true;
      if (TBBUrw.ArtCode<>item) then begin testf = false; end;
      if (nonblank(TBBUrw.EMCode)) then begin testf = false; end;
      if (TBBUrw.TimeClass<>timeclass) then begin testf = false; end;
      if (testf) then begin
        costprice = TBBUrw.Cost;
        res = true;
        i = rwcnt;
        goto LGetBudgetCostPrice;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      testf = true;
      if (nonblank(TBBUrw.ArtCode)) then begin testf = false; end;
      if (TBBUrw.EMCode<>empl) then begin testf = false; end;
      if (TBBUrw.TimeClass<>timeclass) then begin testf = false; end;
      if (testf) then begin
        costprice = TBBUrw.Cost;
        res = true;
        i = rwcnt;
        goto LGetBudgetCostPrice;
      end;
    end;
  end;
LGetBudgetCostPrice:;
  GetBudgetCostPrice = res;
  RETURN;
END;

procedure GetCDPrice(string cust,string item,string timeclass,var val price,var val discount)
BEGIN
  record CDVc CDr;
  row CDVc CDrw;
  Integer i,rwcnt;
  Boolean testf;
  
  price = blankval;
  discount = blankval;
  CDr.CustCode = cust;
  if (ReadFirstMain(CDr,1,true)) then begin
      rwcnt = MatRowCnt(CDr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CDr,i,CDrw);
        testf = true;        
        if (CDrw.Item<>item) then begin testf = false; end;
        if (CDrw.TimeClass<>timeclass) then begin testf = false; end;
        if (testf) then begin
          price = CDrw.Price;
          discount = CDrw.Discount;
          goto LGetCDPrice;
        end;
      end;
    end;
LGetCDPrice:;
  RETURN;
END;

function
Integer GetCustPriceList(string cust,var string pricel,var string ccat,var string rebcode)
BEGIN
  record CUVc CUr;
  record CCatVc CCatR;
  Integer res;

  ccat = "";
  pricel = "";
  rebcode = "";
  CUr.Code = cust;
  if (ReadFirstMain(CUr,1,true)) then begin
    rebcode = CUr.RebCode;
    pricel = CUr.PLCode; 
    CCatR.Code = CUr.CustCat;
    if (ReadFirstMain(CCatR,1,true)) then begin
      if ((res<1) or (res>5)) then begin res = 1; end;
      if (blank(pricel)) then begin
        pricel = CCatR.PLCode;
      end;  
      ccat = CCatR.Code;
      if (blank(rebcode)) then begin
        rebcode = CCatR.RebCode;
      end;
    end;
  end;
  res = StringToInt(pricel);
  if (res<=0) then begin
    res = 1;
  end;
  GetCustPriceList = res;
  RETURN;
END;

global
procedure GetProjectPrice(string project,string item,string empl,string timeclass,string crncy,val quant,var val price,var val discount,var string markup,
                          var val priceincur,var string markupincur)
BEGIN
  record PRVc PRr;
  record TIVc TIr;
  record INVc INr;
  record UserVc USr;
  record TJGIVc TJGIr;
  Integer pl;
  string 10 pricel;
  string 5 ccat;
  string 255 rebcode,tstr,blankstr,sc,sp,salesacc,tax2code,taxtemplatecode;  
  Boolean calcprice;
  Boolean infound;
  Boolean usebudget,dummyf;
  val one;  
  val pr,vreb,bp,tax2prc;
  Date td;
  record ProjectBlock PRRec;
  Time blankt;

  BlockLoad(PRRec);
  usebudget = true;
  INr.Code = item;
  infound = ReadFirstMain(INr,1,true);  
  if (PRRec.NoPriceFromTBBU!=0) then begin
    usebudget = false;
  end;
  if (usebudget) then begin
    if (GetBudgetPrice(project,item,empl,timeclass,price,discount,markup,priceincur,markupincur)) then begin goto LGetProjectPrice; end;
  end;  
  price = blankval;
  discount = blankval;
  PRr.Code = project;
  if (ReadFirstMain(PRr,1,true)) then begin
    GetCDPrice(PRr.CustCode,item,timeclass,price,discount);    
    if (price==0) then begin    
      pl = GetCustPriceList(PRr.CustCode,pricel,ccat,rebcode);
      USr.Code = empl;
      if (ReadFirstMain(USr,1,true)) then begin
        TJGIr.Code = USr.JobGroup;
        if (ReadFirstMain(TJGIr,1,true)) then begin
          GetTJGIPrice(TJGIr,item,timeclass,pl,price);
        end;
      end;
      if (price==0) then begin      
        TIr.Code = item;
        if (ReadFirstMain(TIr,1,true)) then begin
          GetTIPrice(TIr,empl,timeclass,pl,price);
        end;
      end;
      if (price==0) then begin      
        if (infound) then begin
          blankstr = "";
          pr = blankval;
          vreb = blankval;
          tstr = "";
          if (GetItemPriceDiscount3(INr.Code,quant,INr,crncy,0,0,0,0,0,blankstr,blankstr,pricel,rebcode,//PRr.CurncyCode
              pr,sp,vreb,sc,one,salesacc,0,calcprice,td,blankt,"",true,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then 
          begin
            if (vreb!=0) then begin
              discount = vreb;
            end;
            one = -1;
            if (nonblank(crncy)) then begin
              priceincur = pr;
              price = blankval;
              if (GetTimeClassPrice(timeclass,INr.Code,priceincur,one)) then begin end;//37
              if (priceincur!=0) then begin
                goto LGetProjectPrice;
              end;
            end else begin
              price = pr;
              if (GetTimeClassPrice(timeclass,INr.Code,price,one)) then begin end;//37
              if (price!=0) then begin
                goto LGetProjectPrice;
              end;
            end;
          end;
        end;
      end;
      if (price==0) then begin      
        if (INr.ItemType==3) then begin
          USr.Code = empl;
          if (ReadFirstMain(USr,1,true)) then begin
            if (USr.PricePrHour>0) then begin
              price = USr.PricePrHour;
              if (GetTimeClassPrice(timeclass,INr.Code,price,one)) then begin end;//37
            end;
          end;
        end;      
      end;
      if (price==0) then begin
        price = INr.InPrice*INr.Markup;
        price = price/100;
        price = price + INr.InPrice;
        price = price + INr.ExtraCost;
        if (INr.Bonus!=0) then begin
          pr = price*INr.Bonus;
          pr = pr /100;
          price = price - pr;
        end;          
        if (GetTimeClassPrice(timeclass,INr.Code,price,one)) then begin end;//37
        if (nonblank(crncy)) then begin
          pr = DivWithRateToBase1(crncy,CurrentDate,INr.InPrice,DefaultCurRoundOff);              
          bp = DivWithRateToBase1(crncy,CurrentDate,INr.ExtraCost,DefaultCurRoundOff);              
          priceincur = pr*INr.Markup;
          priceincur = priceincur/100;
          priceincur = priceincur + pr;
          priceincur = priceincur + bp;
          if (INr.Bonus!=0) then begin
            pr = priceincur*INr.Bonus;
            pr = pr /100;
            priceincur = priceincur - pr;
          end;          
          if (GetTimeClassPrice(timeclass,INr.Code,priceincur,one)) then begin end;//37
        end;
      end;
    end;
  end;
LGetProjectPrice:;
  RETURN;
END;

global
procedure GetPRItemCost(string project,string emcode,string itemcode,string timeclass,Integer itemtype,var val res)
BEGIN
  record UserVc USr;
  record INVc INr;
  record ProjectBlock PRRec;
  val t,oldres;
  Boolean resf;
  
  BlockLoad(PRRec);
  oldres = res;
  if (PRRec.CostPriceFromTBBU!=0) then begin
    if (GetBudgetCostPrice(project,itemcode,emcode,timeclass,res)) then begin 
      if (res!=0) then begin
        resf = true;
        goto LGetPRItemCost; 
      end;
    end;
  end;
  res = blankval;
  if (itemtype==3) then begin
    USr.Code = emcode;
    if (ReadFirstMain(USr,1,true)) then begin
      res = USr.CostPrHour;
      if (res!=0) then begin
        resf = true;
      end;
    end;
    if (res==0) then begin 
      res = PRRec.DefServCostPrice; 
      if (res!=0) then begin
        resf = true;
      end;
    end;
    if (res==0) then begin 
      INr.Code = itemcode;
      if (ReadFirstMain(INr,1,true)) then begin
        res  = INr.InPrice;
        res = res + INr.ExtraCost;
        resf = true;
      end;
    end;
  end else begin
    INr.Code = itemcode;
    if (ReadFirstMain(INr,1,true)) then begin
      res  = INr.InPrice;
      res = res + INr.ExtraCost;
      resf = true;
    end;
  end;  
  if (nonblank(timeclass)) then begin 
    t = -1;
    if (GetTimeClassPrice(timeclass,itemcode,t,res)) then begin resf = true; end;
  end;
LGetPRItemCost:;  
  if (resf==false) then begin
    res = oldres;
  end;
  RETURN;
END;

global
procedure GetProjectPriceAndCost(string prcode,string artcode,string emcode,string timeclass,string crncy,Integer ItemType,
                                 var val price,var val vreb,var string markup,var val baseprice,
                                 var val priceincur,var string markupincur)
BEGIN
  GetProjectPrice(prcode,artcode,emcode,timeclass,crncy,1,price,vreb,markup,priceincur,markupincur);
  GetPRItemCost(prcode,emcode,artcode,timeclass,ItemType,baseprice);
  RETURN;
END;

global
procedure GetItemProjectWIPAcc(record PRAccBlock PRAb,record INVc INr,var string wipacc,var string balacc)
begin
  record ITVc ITr;
  Integer itemtype;
  
  wipacc = "";
  balacc = "";
  itemtype = INr.ItemType;
  if (itemtype==0) then begin
    if (INr.ItemMaterial!=0) then begin
      itemtype = 5;
    end else begin
      itemtype = 0;
    end;
  end;
  switch (itemtype) begin
    case 0:
      wipacc = PRAb.PlainWIPAcc;
      balacc = PRAb.PlainBalAcc;
    case 1:
      wipacc = PRAb.StockWIPAcc;
      balacc = PRAb.StockBalAcc;
    case 3:
      wipacc = PRAb.ServiceWIPAcc;
      balacc = PRAb.ServiceBalAcc;
    case 5:
      wipacc = PRAb.MaterialWIPAcc;
      balacc = PRAb.MaterialBalAcc;
  end;
  /*
  Item group WIP Account is used for Production Operations, make new WIP Account or project
  ITr.Code = INr.Code;
  if (ReadFirstMain(ITr,1,true)) then begin
    wipacc = ITr.WIPAcc;
  end;  
  */
  return;
end;

global
procedure GetProjectWIPAcc(record PRAccBlock PRAb,string artcode,var string wipacc,var string balacc)
begin
  record INVc INr;  

  wipacc = "";
  balacc = "";
  if (ReadFirstItem(artcode,INr,true,false)) then begin
    GetItemProjectWIPAcc(PRAb,INr,wipacc,balacc);
  end;
  return;
end;

global
function Boolean TBIVItemsUsage(record PRVc PRr,record INVc INr,val qty)
begin
  Boolean res;
  Boolean found;
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  val tbivqty,tbbuqty;
  
  if (PRr.TBIVItemsUsage==0) then begin
    goto LTBIVItemsUsage;
  end;
  found = true;
  TBIVr.ArtCode = INr.Code;
  TBIVr.PRCode = PRr.Code;
  while (LoopKey("ArtCode",TBIVr,2,found)) begin
    if (TBIVr.ArtCode!=INr.Code) then begin found = false; end;
    if (TBIVr.PRCode!=PRr.Code) then begin found = false; end;
    if (found) then begin
      tbivqty = tbivqty + TBIVr.Qty;
    end;
  end;
  TBBUr.PRCode = PRr.Code;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.ArtCode==INr.Code) then begin
        tbbuqty = tbbuqty + TBBUrw.Qty;
      end;
    end;
  end;
  if (tbivqty+qty>tbbuqty) then begin
    res = true;
  end;
LTBIVItemsUsage:;  
  TBIVItemsUsage = res;
  return;
end;

global
procedure AddStageToTBIV(var record TBIVVc TBIVr)
begin
  record PRScheduleVc PRScheduler;
  row PRScheduleVc PRSchedulerw;
  Integer i,rwcnt;
  
  PRScheduler.PRCode = TBIVr.PRCode;
  if (ReadFirstKey("ActPRCode",PRScheduler,1,true)) then begin
    rwcnt = MatRowCnt(PRScheduler);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRScheduler,i,PRSchedulerw);
      if (PRSchedulerw.stp==1) then begin
        if (DateInRange(TBIVr.TransDate,PRSchedulerw.StartDate,PRSchedulerw.EndDate)) then begin
          TBIVr.PRStage = PRSchedulerw.PRStage;
        end;
      end;
    end;
  end;
  return;
end;

global
function Boolean IsPRPhaseLocked(string prcode,Date td,var string prphase)
begin
  Boolean res;
  record PRScheduleVc PRScheduler;
  row PRScheduleVc PRSchedulerw;
  Integer i,rwcnt;
  
  prphase = "";
  res = false;
  PRScheduler.PRCode = prcode;
  if (ReadFirstKey("ActPRCode",PRScheduler,1,true)) then begin
    rwcnt = MatRowCnt(PRScheduler);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRScheduler,i,PRSchedulerw);
      if (PRSchedulerw.stp==1) then begin
        if (DateInRange(td,PRSchedulerw.StartDate,PRSchedulerw.EndDate)) then begin
          prphase = PRSchedulerw.PRStage;
          if nonblank(PRSchedulerw.PRStageSign) then begin 
            res = true;
            goto LIsPRPhaseLocked;
          end; 
        end;
      end;
    end;
  end;
LIsPRPhaseLocked:;  
  IsPRPhaseLocked = res;
  return;
end;

