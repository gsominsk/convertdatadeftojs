external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
forward procedure CQVc_FillupTaxTemplate(var record CQVc);
external procedure RowCalculateTaxMatrix_CQVc(var record CQVc,Integer,row CQVc);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure SetSalesMan(var string,string);

function Boolean PasteFunderInCQ(record CQVc CQp)
BEGIN
  record CUVc CUr;
  Boolean found;

  CUr.Code = CQp.FunderCode;
  found = ReadFirstMain(CUr,1,true);
  if (found) then begin
    CQp.FunderName = CUr.Name;
  end;
  PasteFunderInCQ = found;
  RETURN;
END;

global
function Boolean CQVc_PasteFunderCode(var record CQVc CQp)
BEGIN
  Boolean res;
  
  res = true;
  if (PasteFunderInCQ(CQp)) then begin
  end else begin
    res = false;
  end;
  CQVc_PasteFunderCode = res;
  RETURN;
END;

global
function Boolean PasteVEInCQ(var record CQVc CQp)
BEGIN
  record CUVc VEr;
  Boolean found;

  VEr.Code = CQp.VECode;
  found = ReadFirstMain(VEr,1,true);
  if (found) then begin
    if (VEr.blockedFlag!=0) then begin found = false; end;
  end;
  if (found) then begin
    CQp.VEName = VEr.Name;
    CQp.VEContact = VEr.Person;
  end;
  PasteVEInCQ = found;
  RETURN;
END;

global
function Boolean CQVc_PasteArtCode(var record CQVc CQp,Integer rownr)
BEGIN
  record INVc INr;
  row CQVc CQrw;
  Boolean res;
  record TaxMatrixVc TMr;
  string 255 taxtemplatecode;

  MatRowGet(CQp,rownr,CQrw);
  if (ReadFirstItem(CQrw.ArtCode,INr,true,true)) then begin
//    CQrw.TaxTemplateCode = FillupTaxMatrix(0,"",CQp.CustCode,"","",taxtemplatecode,TMr);//COr.BranchID
    CQrw.Spec = INr.Name;
    CQrw.Price = INr.UPrice1;
//    PackRowFieldMatrix(CQrw,"TaxMatrix",TMr);
    MatRowPut(CQp,rownr,CQrw);
    res = true;
  end;
  CQVc_PasteArtCode = res;
  RETURN;
END;

global
function Boolean PasteCustInCQ(var record CQVc CQp,var string cuwarn)
BEGIN
  record CUVc CUr;
  Boolean found;
  val bal;
  val limit;
  string 255 tstr;  
  Boolean limitdaysf;
 
  cuwarn = "";
  CUr.Code = CQp.CustCode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0,limitdaysf)) then begin
    found = true;
    CQp.Name = CUr.Name;
    CQp.Addr0 = CUr.InvAddr0;
    CQp.Addr1 = CUr.InvAddr1;
    CQp.Addr2 = CUr.InvAddr2;
    CQp.InvAddr3 = CUr.InvAddr3;
    CQp.InvAddr4 = CUr.InvAddr4;
    CQp.ClientContact = CUr.Person;
    SetSalesMan(tstr,CUr.SalesMan);
    CQp.SalesMan = tstr;
/*    
    if (CUr.TaxTemplateCode!=CQp.CustTaxTemplateCode) then begin
      CQVc_FillupTaxTemplate(CQp);
      CQp.CustTaxTemplateCode = CUr.TaxTemplateCode;
    end;
*/    
    if (nonblank(CUr.WarnText1)) then begin
      cuwarn = CUr.WarnText1;
    end;
  end;
  PasteCustInCQ = found;
  RETURN;
END;

/*
global
procedure CQVc_PasteTaxTemplateCode(var record CQVc CQr,Integer rownr)
begin
  row CQVc CQrw;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GOb;
  
  BlockLoad(GOb);
  MatRowGet(CQr,rownr,CQrw);
  CQrw.TaxTemplateCode = OverrideTaxMatrix(CQrw.TaxTemplateCode,TMr);
  PackRowFieldMatrix(CQrw,"TaxMatrix",TMr);
  MatRowPut(CQr,rownr,CQrw);
  RowCalculateTaxMatrix_CQVc(CQr,rownr,CQrw);
  MatRowPut(CQr,rownr,CQrw);
//  CQDchrsum(CQr,rownr);//GOb.UseDiscount
  return;
end;

global
procedure CQVc_FillupTaxTemplate(var record CQVc CQr)
begin
  row CQVc CQrw;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GenOptRec;
  val t,s,price,vreb,baseprice,tax2prc;
  record INVc INr;
  string 255 tstr,tax2code,location,vatcode,itemtaxtemplatecode,dummystr,curitemname,salesacc;
  Boolean calcpricef;
  Integer exportflag;
  Boolean dummyf;
  Time blankt;

  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(CQr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CQr,i,CQrw);
    if (nonblank(CQrw.ArtCode)) then begin
//      if (GetItemPriceDiscount3(CQrw.ArtCode,COrw.Quant,INr,COr.CurncyCode,
//                            COr.FrRate,COr.ToRateB1,COr.ToRateB2,COr.BaseRate1,COr.BaseRate2,
//                            COr.LangCode,COr.CustCat,COr.PriceList,COr.RebCode,
//                            price,curitemname,vreb,vatcode,baseprice,salesacc,
//                            COr.ExportFlag,calcpricef,COr.CODate,blankt,COr.CustCode,true,dummyf,COr.PayDeal,tax2code,tax2prc,"","",itemtaxtemplatecode)) then
//      begin
      if (ReadFirstItem(CQrw.ArtCode,INr,true,true)) then begin
        CQrw.TaxTemplateCode = FillupTaxMatrix(0,"",CQr.CustCode,"","",itemtaxtemplatecode,TMr);//COr.BranchID
        PackRowFieldMatrix(CQrw,"TaxMatrix",TMr);
        MatRowPut(CQr,i,CQrw);
        RowCalculateTaxMatrix_CQVc(CQr,i,CQrw);
        MatRowPut(CQr,i,CQrw);
//        CQDchrsum(CQr,i);//GOb.UseDiscount
      end;
    end;
  end;
  return;  
end;   

*/