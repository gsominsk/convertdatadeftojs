external procedure GetStockValue(string,string,var record ItemStatusVc);

global
procedure FindBatchBestBeforeDate(string item,string serialnr,var Date bestbeforep)
begin
  record BatchTextVc btr;
  record QualConVc QualConr;
  Date blankd;
  Boolean found;
  
  if (blank(item)) or (blank(serialnr)) then begin goto LFindBatchBestBeforeDate; end;
  btr.ArtCode = item;
  btr.SerialNr = serialnr;
  if (ReadFirstMain(btr,2,true)) then begin
    bestbeforep = btr.BestBefore;
  end else begin
    bestbeforep = blankd;
  end;
  QualConr.OKFlag = 1;
  QualConr.ArtCode = item;
  QualConr.SerialNr = serialnr;
  found = true;
  while (LoopBackKey("AnalyseDone",QualConr,3,found)) begin
    if (QualConr.OKFlag!=1) then begin found = false; end;
    if (QualConr.ArtCode!=item) then begin found = false; end;
    if (QualConr.SerialNr!=serialnr) then begin found = false; end;
    if (found) then begin
      if (nonblankdate(QualConr.NewBestBefore)) then begin
        bestbeforep = QualConr.NewBestBefore;
        found = false;
      end;
    end;
  end;
LFindBatchBestBeforeDate:;  
  return;
end;

procedure ArtCodeOnThisSH(Integer cnt,record SHVc SHp,string artcode,string serialnr,var val resp,var val thesernrq)
begin
  row SHVc SHrw;
  Integer i;

  resp = blankval;
  thesernrq = blankval;
  for (i = 0 ; i<cnt;i=i+1) begin
    MatRowGet(SHp,i,SHrw);
    if (SHrw.ArtCode==artcode) then begin
//    if (TestArtCode(SHrw.ArtCode,artcode,INr)) then begin//JJ->KH
      resp = resp + SHrw.Ship;
      if (serialnr==SHrw.SerialNr) then begin
        thesernrq = thesernrq + SHrw.Ship;
      end;  
    end;  
  end;
  return;
end;

global
function Boolean PasteBatchSerItems_DemandPosition(var Array record StockMovVc aStockMovr,Integer asmcnt,var record SHVc SHp,var Integer srw)
begin
  Boolean res;
  row SHVc SHrwp;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  Integer ai;
  Integer i,rwcnt,shrow;
  val rem,instock;
  
  shrow = srw;
  MatRowGet(SHp,shrow,SHrwp);
  rem = SHrwp.Ship;
  instock = SHrwp.InStock;
  res = true;
  for (ai=0;ai<asmcnt;ai=ai+1) begin
    StockMovr = aStockMovr[ai];
    rwcnt = MatRowCnt(StockMovr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(StockMovr,i,StockMovrw);
      if (StockMovrw.ArtCode==SHrwp.ArtCode) and (blank(SHrwp.SerialNr)) then begin
        SHrwp.SerialNr = StockMovrw.SerialNr;
        SHrwp.PosCode = StockMovrw.ToPosCode;
        if (StockMovrw.Quant<rem) then begin
          SHrwp.Ship = StockMovrw.Quant; 
        end else begin
          SHrwp.Ship = rem; 
        end;
        SHrwp.Ordered = StockMovrw.Quant;
        SHrwp.InStock = instock;
        rem = rem - SHrwp.Ship;
        instock = instock - SHrwp.Ship;
        if (srw==shrow) then begin
          MatRowPut(SHp,srw,SHrwp);
        end else begin
          MatRowInsert(SHp,srw,SHrwp);
        end;
        srw = srw + 1;
        if (rem<=0) then begin
          goto LSkipStockMov;
        end;
      end;
    end;
LSkipStockMov:;
  end;
  PasteBatchSerItems_DemandPosition = res;
  return;
end;

global 
function Boolean PasteBatchSerItems2(var string cursernr,var Date bestbefore,var Integer srw,var val remnp,record ORVc ORp,Integer orrownr,var record SHVc SHp,Integer shrownr,string mainstock,Integer sortbatchonbestbefore,var longint errmsg)
begin
  Boolean res;
  record SerBalVc SBr;
  record ItemStatusVc ISr;
  row ORVc ORrwp;
  row SHVc SHrwp;
  Boolean firstf,foundf,testf;
  val s,instock,onsh,thesernrq;
  string 10 location,orlocation;
  Date td;
  string 50 ckey;
  Integer keys;

  MatRowGet(ORp,orrownr,ORrwp);
  MatRowGet(SHp,shrownr,SHrwp);
  errmsg = 0;
  res = true;
//  if (nonblank(ORrwp.SerialNr)) then begin goto LPasteBatchSerItems; end;
//cannot be here, create order, delivery, delete delivery, create delivery, this is crappy one

  orlocation = ORrwp.Location;
  if (blank(orlocation)) then begin
    orlocation = ORp.Location;
  end;
  if (blank(orlocation)) then begin
//    orlocation = mainstock;
    orlocation = ";;;";
  end;
  
  SBr.Item = ORrwp.ArtCode;  
  SBr.Location = orlocation;
  if (sortbatchonbestbefore!=0) then begin
    ckey = "ItemBestBefore";
    keys = 3;
    SBr.NewBestBefore = bestbefore;
    if (nonblank(cursernr)) then begin
      if (LoopKey(ckey,SBr,keys,true)) then begin end;
    end;
  end else begin
    ckey = "MainKey";
    keys = 3;
    SBr.Serial = cursernr;
    if (nonblank(cursernr)) then begin
      if (LoopKey(ckey,SBr,keys,true)) then begin end;
    end;
  end;

  firstf = true;
  foundf = true;
  while (LoopKey(ckey,SBr,keys,foundf)) begin
    if (nonblank(ORrwp.ArtCode)) then begin
      if (SBr.Item!=ORrwp.ArtCode) then begin foundf = false; end;
    end;  
    if (nonblank(orlocation)) and (orlocation!=";;;") then begin
      if (SBr.Location!=orlocation) then begin foundf = false; end;
    end;  
    testf = true;
    if (sortbatchonbestbefore!=0) then begin
      if (nonblankdate(SBr.NewBestBefore)) then begin
        if (bestbefore>SBr.NewBestBefore) then begin testf = false; end;
      end;  
    end else begin
      if (nonblank(SBr.Serial)) then begin
        if (cursernr>SBr.Serial) then begin testf = false; end;
      end;  
    end;
    if (foundf and testf) then begin    
      if (firstf and (SBr.Quant!=0)) then begin
        location = SHp.Location;
        if (nonblank(SHrwp.Location)) then begin
          location = SHrwp.Location;
        end;
        GetStockValue(SHrwp.ArtCode,location,ISr);            
//        ArtCodeOnThisSH(srw-1,SHp,SHrwp.ArtCode,SHrwp.SerialNr,onsh,thesernrq);
        ArtCodeOnThisSH(srw-1,SHp,SHrwp.ArtCode,SBr.Serial,onsh,thesernrq);
        SBr.Quant = SBr.Quant - thesernrq;
        instock = SBr.Quant;
        if (instock<=0) then begin
          instock = ISr.Instock - onsh;
        end;
//        if (cursernr!=SBr.Serial) then begin
        if (thesernrq<=SBr.Quant) then begin
          cursernr = SBr.Serial;
          firstf = false;
        end;                
      end;
      if (firstf==false) then begin
        if ((cursernr==SBr.Serial) or (s==0)) then begin        
          s = s + SBr.Quant;
        end;  
      end;
    end;
  end;
  if (s>0) then begin
    SHrwp.InStock = instock;
    SHrwp.Ship = remnp;// - onsh
//    SHrwp.Ordered = remnp;// - onsh it should be as order rather
    SHrwp.SerialNr = cursernr;
    FindBatchBestBeforeDate(SHrwp.ArtCode,SHrwp.SerialNr,td);
    SHrwp.BestBefore = td;
    if (s<remnp) then begin
      SHrwp.Ship = s;
//      SHrwp.Ordered = s;
    end;
    if (SHrwp.InStock<=0) then begin
      SHrwp.Ship = 0;
    end;
    MatRowPut(SHp,srw-1,SHrwp);
    remnp = remnp - s;
    instock = instock - s;
    if (remnp>0) then begin
      res = false;
      goto LPasteBatchSerItems;
    end;
  end else begin
    SHrwp.InStock = 0;
    SHrwp.Ship = 0;
    SHrwp.Ordered = remnp;
    remnp = blankval;
    MatRowPut(SHp,srw-1,SHrwp);
  end;
LPasteBatchSerItems:;  
  if (SHrwp.Ship<=0) then begin
    MatRowDelete(SHp,srw-1);
    srw = srw - 1;    
//    errmsg = 1240;
  end;
  PasteBatchSerItems2 = res;
  return;
end;

global 
function Boolean PasteBatchSerItems(var string cursernr,var Date bestbefore,var Integer srw,var val remnp,record ORVc ORp,Integer orrownr,var record SHVc SHp,Integer shrownr,string mainstock,Integer sortbatchonbestbefore,var integer errmsg)
begin
  longint errmsg2;
  boolean res;

  res = PasteBatchSerItems2(cursernr,bestbefore,srw,remnp,ORp,orrownr,SHp,shrownr,mainstock,sortbatchonbestbefore,errmsg2);
  errmsg = errmsg2;
  PasteBatchSerItems = res;
end;