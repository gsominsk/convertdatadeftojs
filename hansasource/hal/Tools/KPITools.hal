remote procedure RecalculateKPIsClientRefresh(string,string);
external procedure InitClientKPIsIdleTask(Boolean);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean CheckActTypeClass(string,string);
external function Boolean CheckTodoAcessAct(record ActVc,string);
external function date KPIPreviousPeriodEnd(Integer,Integer,Integer);
external function date KPICurrentPeriodEnd(Integer,Integer,Integer);
external function date KPIPeriodStart(Integer,Integer,Integer,Date);
external function Boolean HasKPIs();
external procedure MasterWClassMetroKPIsUpdate(Integer);
external function val GetCUTurnover(record CUVc,string,string,string,Date,Date,string,string,string,string);
external function val KLGetAROnAcc(Integer,Date,Integer,string);
external function val KLGetAPOnAcc(Integer,Date,Integer,string);
external function val KLGetARBal(Integer,Date,string,Boolean,Boolean,Boolean,Integer,Boolean,string);
external function val KLGetAPBal(Integer,Date,string,Boolean,Boolean,Integer,Boolean,string);
external function LongInt DateDiff(Date,Date);
external function LongInt TimeToMinutes(Time);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);

/*
error update window def for master control and dclass
error add icon for "invalid" state
error add recalculate button / function
error add customizable number of minutes to recalculate
*/

function val KLGetTurnover(Date startdate,Date enddate,Integer type,record KPIDefVc KPIr)
begin 
  record CUVc CUr;
  val t,t1;
  boolean found;
  string 20 item;
  string 5 itemgroup;
  string 200 itemclass;
  string 60 forperson;
  
  item = KPIr.ItemCode;
  itemgroup = KPIr.ItemGroup;
  itemclass = KPIr.ItemClass;
  forperson = KPIr.Person;
  
  CUr.Code = "";
  CUr.CUType = 1;
  found = true;
  while (LoopKey("ActCode",CUr,1,found)) begin
    if (CUr.CUType==0) then begin found = false; end;
    if (found==true) then begin 
      switch (type) begin
        case kKPITypeSalesExclVAT:
          t = t + GetCUTurnover(CUr,"","","salesexclvat",startdate,enddate,item,itemgroup,itemclass,forperson);
//          t = t + GetTurnover(CUr,"","","salesexclvat",startdate,enddate);
        case kKPITypeSalesInclVAT:
          t = t + GetCUTurnover(CUr,"","","salesinclvat",startdate,enddate,item,itemgroup,itemclass,forperson);
//          t = t + GetTurnover(CUr,"","","salesinclvat",startdate,enddate);
        case kKPITypeGPPrc:
          t = t + GetCUTurnover(CUr,"","","grossprofit",startdate,enddate,item,itemgroup,itemclass,forperson);
//          t  =  t + GetTurnover(CUr,"","","grossprofit",startdate,enddate);
          t1 = t1 + GetCUTurnover(CUr,"","","salesexclvat",startdate,enddate,item,itemgroup,itemclass,forperson);
//          t1 = t1 + GetTurnover(CUr,"","","salesexclvat",startdate,enddate);
        case kKPITypeCost:
          t = t + GetCUTurnover(CUr,"","","salesexclvat",startdate,enddate,item,itemgroup,itemclass,forperson)-GetCUTurnover(CUr,"","","grossprofit",startdate,enddate,item,itemgroup,itemclass,forperson);
//          t = t + GetTurnover(CUr,"","","salesexclvat",startdate,enddate)-GetTurnover(CUr,"","","grossprofit",startdate,enddate);
      end;    
    end;
  end;  
  if (type==kKPITypeGPPrc) then begin
    t = (t/t1) *100;
  end;  
  KLGetTurnover = t;
  return;
end;  

global
function val KLGetQTVc(Date startdate,Date enddate,Integer type,record KPIDefVc KPIr)
begin 
  record QTVc QTr;
  row QTVc QTrw;
  Integer i,rwcnt;
  boolean TrHs,testf;
  val t;
  vector Boolean vtestf;
  record INVc INr;

  TrHs = true;
  QTr.QTDate = startdate;
  ResetLoop(QTr);
  while LoopKey("QTDate",QTr,1,TrHs) begin 
    testf = true;
    if (QTr.QTDate>enddate) then begin 
      TrHs = false;
      testf = false;
    end;
    if (QTr.Rejected>0) then begin
      testf = false;
    end;
    /*
    if (QTr.Rejected==1) then begin
      testf = false;
    end;
    */
    /*
    if (QTr.Rejected==2) then begin
      testf = false;
    end;
    */
    if (QTr.Closed!=0) then begin
      testf = false;
    end;
    if (nonblank(KPIr.Person)) then begin
      if (SetInSet(QTr.SalesMan,KPIr.Person)==false) then begin testf = false; end;
      if (blank(QTr.SalesMan)) then begin testf = false; end;
    end;
    if (testf) then begin 
      if (nonblank(KPIr.ItemCode) or nonblank(KPIr.ItemGroup) or nonblank(KPIr.ItemClass)) then begin
        rwcnt = MatRowCnt(QTr);
        for (i=0;i<rwcnt;i=i+1) begin
          vtestf["ItemCode"] = false;
          vtestf["ItemGroup"] = false;
          vtestf["ItemClass"] = false;
          MatRowGet(QTr,i,QTrw);
          if (QTrw.stp==kInvoiceRowTypeNormal) and nonblank(QTrw.ArtCode) then begin
            if (nonblank(KPIr.ItemCode)) then begin
              if (QTrw.ArtCode==KPIr.ItemCode) then begin
                vtestf["ItemCode"] = true;
              end;
            end;
            if (nonblank(KPIr.ItemGroup) or nonblank(KPIr.ItemClass)) then begin
              ReadFirstItem(QTrw.ArtCode,INr,true,false);
              if (nonblank(KPIr.ItemGroup)) then begin
                if (INr.Group==KPIr.ItemGroup) then begin
                  vtestf["ItemGroup"] = true;
                end;
              end;
              if (nonblank(KPIr.ItemClass)) then begin
                if (SetINSet(KPIr.ItemClass,INr.DispGroups)) then begin
                  vtestf["ItemClass"] = true;
                end;
              end;
            end;
          end;
          testf = true;
          if (nonblank(KPIr.ItemCode)) then begin
            testf = testf and vtestf["ItemCode"];
          end;
          if (nonblank(KPIr.ItemGroup)) then begin
            testf = testf and vtestf["ItemGroup"];
          end;
          if (nonblank(KPIr.ItemClass)) then begin
            testf = testf and vtestf["ItemClass"];
          end;
          if (testf) then begin
            switch (type) begin
              case kKPITypeQTStock:
                t = t +  MulRateToBase1(QTr.CurncyCode,QTrw.Sum,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
              case kKPITypeQTNr:
                i = rwcnt;
                t = t + 1;
            end;    
          end;  
        end; 
      end else begin
         switch (type) begin
           case kKPITypeQTStock:
             t = t +  MulRateToBase1(QTr.CurncyCode,QTr.Sum1,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
           case kKPITypeQTNr:
             i = rwcnt;   
             t = t + 1;
         end;    
      end;
    end;
  end;
  KLGetQTVc = t;
  return;
end;

global
function val KLGetORVc(Date startdate,Date enddate,Integer type,record KPIDefVc KPIr)
begin 
  record ORVc ORr;
  row ORVc ORrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  val t;
  vector Boolean vtestf;
  record INVc INr;
  record GeneralOptionBlock GOb;
  val rowv,qty;
  
  BlockLoad(GOb);  
  TrHs = true;
  ORr.OrdDate = startdate;
  while LoopKey("OrdDate",ORr,1,TrHs) begin 
    testf = true;
    if (ORr.OrdDate>enddate) then begin 
      TrHs = false;
      testf = false;
    end;
    if (ORr.Closed==1) then begin
      testf = false;
    end;
    if (ORr.ShipMark!=0) and (ORr.InvMark!=0) then begin
      testf = false;
    end;    
    if (nonblank(KPIr.Person)) then begin
      if (SetInSet(ORr.SalesMan,KPIr.Person)==false) then begin testf = false; end;
      if (blank(ORr.SalesMan)) then begin testf = false; end;
    end;
    if (testf) then begin 
      if ((type==kKPITypeORStock) or nonblank(KPIr.ItemCode) or nonblank(KPIr.ItemGroup) or nonblank(KPIr.ItemClass)) then begin
        rwcnt = MatRowCnt(ORr);
        for (i=0;i<rwcnt;i=i+1) begin
          vtestf["ItemCode"] = false;
          vtestf["ItemGroup"] = false;
          vtestf["ItemClass"] = false;
          MatRowGet(ORr,i,ORrw);
          if (ORrw.stp==kInvoiceRowTypeNormal) and nonblank(ORrw.ArtCode) then begin
            if (nonblank(KPIr.ItemCode)) then begin
              if (ORrw.ArtCode==KPIr.ItemCode) then begin
                vtestf["ItemCode"] = true;
              end;
            end;
            if (nonblank(KPIr.ItemGroup) or nonblank(KPIr.ItemClass)) then begin
              ReadFirstItem(ORrw.ArtCode,INr,true,false);
              if (nonblank(KPIr.ItemGroup)) then begin
                if (INr.Group==KPIr.ItemGroup) then begin
                  vtestf["ItemGroup"] = true;
                end;
              end;
              if (nonblank(KPIr.ItemClass)) then begin
                if (SetINSet(KPIr.ItemClass,INr.DispGroups)) then begin
                  vtestf["ItemClass"] = true;
                end;
              end;
            end;
          end;
          testf = true;
          if (nonblank(KPIr.ItemCode)) then begin
            testf = testf and vtestf["ItemCode"];
          end;
          if (nonblank(KPIr.ItemGroup)) then begin
            testf = testf and vtestf["ItemGroup"];
          end;
          if (nonblank(KPIr.ItemClass)) then begin
            testf = testf and vtestf["ItemClass"];
          end;
          if (testf) then begin
            switch (type) begin
              case kKPITypeORStock:
                //same as in OrderStockRn report
                if (ORr.InvBeforeShip==0) then begin
                  if (ORrw.Shipd2 > ORrw.Quant) then begin 
                    qty = ORrw.Shipd2 - ORrw.Invd;       
                  end else begin
                    qty = ORrw.Quant - ORrw.Invd;
                  end;
                end else begin
                  qty = ORrw.Quant - ORrw.Shipd2;
                end; 
                CalcSum(qty,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,rowv,GOb.UseDiscount);
                t = t +  MulRateToBase1(ORr.CurncyCode,rowv,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
              case kKPITypeORNr:
                t = t + 1;
                i = rwcnt;
            end;
          end;  
        end;  
      end else begin
        switch (type) begin
          //case kKPITypeORStock:
            //t = t +  MulRateToBase1(ORr.CurncyCode,ORr.Sum1,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
          case kKPITypeORNr:
            t = t + 1;
        end;
      end;
    end;
  end;
  KLGetORVc = t;
  return;
end;

global
function val KLGetIPVc(Date startdate,Date enddate)
begin
  record IPVc IPr;
  boolean TrHs,testf;
  val t;
  
  TrHs = true;
  IPr.OKFlag = 1;
  IPr.TransDate = startdate;
  while (LoopKey("OKFlagTransDate",IPr,2,TrHs)) begin
    testf = true;
    if (IPr.OKFlag==0) then begin testf = false; end;
    if (DateInRange(IPr.TransDate,startdate,enddate)==false) then begin testf = false; end;
    if (testf) then begin
      t = t +  MulWithRateToBase1(IPr.PayCurCode,IPr.TransDate,IPr.CurPayVal,DefaultCurRoundOff);
    end;
  end;
  KLGetIPVc = t;
  return;
end;

procedure PrintCustAct(record RcVc RepSpec,record UserVc USp,Integer okflag,Integer todoflag,var Boolean printedf,var Integer counter,var val costtimev)
begin
  record CUVc CUr;
  Boolean TrHs,testf;
  record ActVc Actr;
  string 255 ckey;
  string 255 tstr;
  String 5 curuser;  

  ckey = "UserMain:";
  tstr = USp.Code;
  ckey = ckey & tstr;
  Actr.TransDate = RepSpec.sStartDate;
//  Actr.StartTime.hour = -1;
//  Actr.EndTime.hour = -1;
  Actr.OKFlag = okflag;
  Actr.TodoFlag = todoflag;
  TrHs = true;
  while (LoopKey(ckey,Actr,3,TrHs)) begin
    if (TrHs) then begin
      if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
      if (Actr.TodoFlag!=todoflag) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (okflag==1) then begin
        if (Actr.OKFlag==0) then begin testf = false; end;
        if (RepSpec.flags[1]==0) then begin testf = false; end;
      end else begin
        if (Actr.OKFlag==1) then begin testf = false; end;
        if (RepSpec.flags[2]==0) then begin testf = false; end;
      end;
      if (RepSpec.flags[7]==0) then begin 
        if (Actr.CalTimeFlag==1) then begin testf = false; end;
      end;
      if (RepSpec.flags[8]==0) then begin 
        if (Actr.CalTimeFlag==2) then begin testf = false; end;
      end;
      if (RepSpec.flags[9]==0) then begin 
        if (Actr.CalTimeFlag==0) then begin testf = false; end;
      end;
      
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (testf) then begin
        if (nonblank(RepSpec.FirstAcc)) then begin
          if (Actr.ActType<>RepSpec.FirstAcc) then begin testf = false; end;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f3)) then begin
          testf = CheckActTypeClass(RepSpec.f3,Actr.ActType);
        end;
      end;
      if (testf) then begin
        if (Actr.PrivateFlag!=0) then begin
          if ((SetInSet(curuser,Actr.MainPersons)==false) and
              (SetInSet(curuser,Actr.CCPersons)==false)) then begin
            testf = false;
          end;
        end;
      end;      
      if (testf) then begin
        testf = CheckTodoAcessAct(Actr,CurrentUser);
      end;
      if (testf) then begin
        printedf = true;
        counter = counter + 1;
        if (Actr.CalTimeFlag==1 and Actr.TodoFlag==0) then begin
          costtimev = costtimev + TimeToVal(Actr.CostTime);
        end;
      end;
    end;
  end;
  return;
end;

global
function val KLGetActivitiesCount(Integer typ,Date startdate,Date enddate,record KPIDefVc KPIr)
begin
  record UserVc USr;
  Boolean TrHs;
  Boolean printedf;
  Integer counter;
  record RcVc RepSpec;
  val totcounter,costtimev;

  RecordClear(RepSpec);
  RepSpec.sStartDate = startdate;
  RepSpec.sEndDate = enddate;
  RepSpec.f2 = KPIr.Person;
  RepSpec.f3 = KPIr.ActTypeGr;
  RepSpec.FirstAcc = KPIr.ActType;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = 1;
  
  USr.Code = RepSpec.f2;
  Gray_Divider(0,1);
  TrHs = true;    
  while (LoopMain(USr,1,TrHs)) begin
    printedf = false;
    if (nonblank(RepSpec.f2)) then begin
      if (USr.Code!=RepSpec.f2) then begin TrHs = false; end;
    end;  
    if (TrHs) then begin
      PrintCustAct(RepSpec,USr,0,0,printedf,counter,costtimev);
      PrintCustAct(RepSpec,USr,1,0,printedf,counter,costtimev);
      PrintCustAct(RepSpec,USr,0,1,printedf,counter,costtimev);
      PrintCustAct(RepSpec,USr,1,1,printedf,counter,costtimev);
      PrintCustAct(RepSpec,USr,0,2,printedf,counter,costtimev);
      PrintCustAct(RepSpec,USr,1,2,printedf,counter,costtimev);
      PrintCustAct(RepSpec,USr,0,4,printedf,counter,costtimev);
      PrintCustAct(RepSpec,USr,1,4,printedf,counter,costtimev);
      if (printedf) then begin
        switch (typ) begin
          case 0: totcounter = totcounter + counter;
          case 1: totcounter = totcounter + costtimev;
        end;
        counter = 0;
        costtimev = 0;
      end;
    end;
  end;  
  KLGetActivitiesCount = totcounter;
  return;
end;

function val KPIRowPrev(var record KPIDefVc KPIr)
begin
  val res;
  Date startdate,enddate;

  enddate = KPIPreviousPeriodEnd(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits);
  startdate = KPIPeriodStart(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits,enddate);
  switch (KPIr.Type) begin
    case kKPITypeAR:
      res = KLGetAROnAcc(0,enddate,0,KPIr.Person);
    case kKPITypeAP:
      res = KLGetAPOnAcc(0,enddate,0,KPIr.Person);

    //case kKPITypeOverDueSL:
    //  KPIRowPrev = CalcOverDueSL(enddate,5) + 5;
    case kKPITypeARDue:
      res = KLGetARBal(0,enddate,"0",false,false,false,0,true,KPIr.Person);
    case kKPITypeARDueNoDisputed:
      res = KLGetARBal(0,enddate,"0",false,true,false,0,true,KPIr.Person);
    case kKPITypeAPDue:
      res = KLGetAPBal(0,enddate,"0",false,false,0,true,KPIr.Person);
    case kKPITypeORNr:
      res = KLGetORVc(startdate,enddate,kKPITypeORNr,KPIr);
    case kKPITypeORStock:
      res = KLGetORVc(startdate,enddate,kKPITypeORStock,KPIr);
    case kKPITypeQTNr:
      res = KLGetQTVc(startdate,enddate,kKPITypeQTNr,KPIr);
    case kKPITypeQTStock:
      res = KLGetQTVc(startdate,enddate,kKPITypeQTStock,KPIr);
    case kKPITypeSalesInclVAT:
      res = KLGetTurnover(startdate,enddate,kKPITypeSalesInclVAT,KPIr);
    case kKPITypeSalesExclVAT:
      res = KLGetTurnover(startdate,enddate,kKPITypeSalesExclVAT,KPIr);
    case kKPITypeCost:
      res = KLGetTurnover(startdate,enddate,kKPITypeCost,KPIr);
    case kKPITypeGPPrc:
      res = KLGetTurnover(startdate,enddate,kKPITypeGPPrc,KPIr);
    case kKPITypeIP:
      res = KLGetIPVc(startdate,enddate);
    case kKPITypeActivityNr:
      res = KLGetActivitiesCount(0,startdate,enddate,KPIr);
    case kKPITypeActivityCostTime:
      res = KLGetActivitiesCount(1,startdate,enddate,KPIr);
  end;  
  KPIRowPrev = res;  
  return;
end;

function val KPIRowCur(var record KPIDefVc KPIr)
begin
  val res;
  Date startdate,enddate;
  
  enddate = KPICurrentPeriodEnd(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits);
  startdate = KPIPeriodStart(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits,enddate);
  switch (KPIr.Type) begin
    case kKPITypeAR:
      res = KLGetAROnAcc(0,enddate,0,KPIr.Person);
    case kKPITypeAP:
      res = KLGetAPOnAcc(0,enddate,0,KPIr.Person);
    //case kKPITypeOverDueSL:
    //  res = CalcOverDueSL(enddate,5) + 10;
    case kKPITypeARDue:
      res = KLGetARBal(0,enddate,"0",false,false,false,0,true,KPIr.Person);
    case kKPITypeARDueNoDisputed:
      res = KLGetARBal(0,enddate,"0",false,true,false,0,true,KPIr.Person);
    case kKPITypeAPDue:
      res = KLGetAPBal(0,enddate,"0",false,false,0,true,KPIr.Person);
    case kKPITypeORNr:
      res = KLGetORVc(startdate,enddate,kKPITypeORNr,KPIr);
    case kKPITypeORStock:
      res = KLGetORVc(startdate,enddate,kKPITypeORStock,KPIr);
    case kKPITypeQTNr:
      res = KLGetQTVc(startdate,enddate,kKPITypeQTNr,KPIr);
    case kKPITypeQTStock:
      res = KLGetQTVc(startdate,enddate,kKPITypeQTStock,KPIr);
    case kKPITypeSalesInclVAT:
      res = KLGetTurnover(startdate,enddate,kKPITypeSalesInclVAT,KPIr);
    case kKPITypeSalesExclVAT:
      res = KLGetTurnover(startdate,enddate,kKPITypeSalesExclVAT,KPIr);
    case kKPITypeCost:
      res = KLGetTurnover(startdate,enddate,kKPITypeCost,KPIr);
    case kKPITypeGPPrc:
      res = KLGetTurnover(startdate,enddate,kKPITypeGPPrc,KPIr);
    case kKPITypeIP:
      res = KLGetIPVc(startdate,enddate);
    case kKPITypeActivityNr:
      res = KLGetActivitiesCount(0,startdate,enddate,KPIr);
    case kKPITypeActivityCostTime:
      res = KLGetActivitiesCount(1,startdate,enddate,KPIr);
  end;
  
  //LogText(0,"KPIRowCur = " & res & " start " & startdate & " end " & enddate);
  
  KPIRowCur = res;
  return;
end;

global
function string 255 KPIRowPrevText(var record KPIDefVc KPIr)
begin
  KPIRowPrevText = KPIr.Previous; //KPIRowPrev(KPIr);
  return;
end;

global
function string 255 KPIRowCurText(var record KPIDefVc KPIr)
begin
  KPIRowCurText = KPIr.Current; //KPIRowCur(KPIr);
  return;
end;

global
function string 255 KPIRowTrend(var record KPIDefVc KPIr)
begin
  val diff,pct;
  longint res;
  
  diff = KPIr.Current - KPIr.Previous;
  
  if (KPIr.Previous==0 and diff!=0) then begin //div by zero case means infinitely big increase
    pct = 1;
  end else begin
    pct = diff / KPIr.Previous;
  end;
  
  pct = pct * 100;
  
  if (KPIr.ReverseArrowf) then begin
    pct = -pct;
  end;
  
//Trace("prev "& prev," curr " & curr & " diff " & diff);
  
  //stopalert(pct);
  if (pct<-35) then begin
    if (KPIr.ReverseColorf==0) then begin
      res = 1050;
    end else begin
      res = 1093;
    end;
    goto out;
  end;
  
  if (pct<-10) then begin
    if (KPIr.ReverseColorf==0) then begin
      res = 1051;
    end else begin
      res = 1094;
    end;
    goto out;
  end;
  
  if (pct<=10) then begin
    res = 1049;
    goto out;
  end;
  
  if (pct<=35) then begin
    if (KPIr.ReverseColorf==0) then begin
      res = 1048;
    end else begin
      res = 1092;
    end;
    goto out;
  end;
  
  if (KPIr.ReverseColorf==0) then begin
    res = 1047;
  end else begin
    res = 1091;
  end;
  
out:;
  KPIRowTrend = res;
  return;
end;

global
updating procedure StoreOneCalculatedKPI(record KPIDefVc newKPIr)
begin
  record KPIDefVc oldKPIr;
  record KPIDefVc KPIr;
  
  RecordCopy(KPIr,newKPIr);
  
  //LogText(0,"About to store KPI no. " & KPIr.SerNr & " in company " & Currentcompany & " for user " & KPIr.Sign & " of type " & StringFromSet(403,KPIr.Type) & " with " & KPIr.Current & " and " & KPIr.Previous);
  
  if (ReadFirstMain(KPIr,1,true)==false) then begin
    //LogText(0,"StoreOneCalculatedKPI(), ReadFirstMain on KPIr failed!");
    goto out;
  end;
  
  RecordCopy(oldKPIr,KPIr);
  
  KPIr.Current = newKPIr.Current;
  KPIr.Previous = newKPIr.Previous;
  KPIr.Status = kKPIStatusValid;
  KPIr.LastCalcDate = CurrentDate;
  KPIr.LastCalcTime = CurrentTime;
  
  //LogText(0,"Will updated KPI " & " for user " & KPIr.Sign & " with " & KPIr.Current & " and " & KPIr.Previous);
  
  RecordUpdate(oldKPIr,KPIr,false);

  if (KPIr.Previous!=oldKPIr.Previous) or (KPIr.Current!=oldKPIr.Current) then begin
    if (ServerMode) then begin
      AllClientsRemoteAsync.InitClientKPIsIdleTask(true);
    end else begin
      InitClientKPIsIdleTask(true);
    end;
  end;
  
//  RecordUpdate(oldKPIr,KPIr,true);
// this UpdateBrowses is called from StoreOneCalculatedKPI (when doing RecordUpdate(oldKPIr,KPIr,true);)
// which results in flickering of KPI browse in Mater control cause of KPIDefVcRecordUpdateClient
  
  //LogText(0,"Did updated KPI " & " for user " & KPIr.Sign & " with " & KPIr.Current & " and " & KPIr.Previous);
  
out:;
  return;
end;

procedure RecalculateOneKPI(var record KPIDefVc KPIr)
begin
  val cur,prev;
  
  cur = KPIRowCur(KPIr);
  prev = KPIRowPrev(KPIr);
  
  //LogText(0,"Calculated KPI no. " & KPIr.SerNr & " in company " & Currentcompany & " for user " & KPIr.Sign & " of type " & StringFromSet(403,KPIr.Type) & " cur=" & cur & " and prev=" & prev);
  
  if (cur==blankval) then begin cur = 0; end;
  if (prev==blankval) then begin prev = 0; end;
  
  KPIr.Current = cur;
  KPIr.Previous = prev;
  KPIr.Status = kKPIStatusValid;
  KPIr.LastCalcDate = CurrentDate;
  KPIr.LastCalcTime = CurrentTime;
  
  queued.StoreOneCalculatedKPI(KPIr);
  return;
end;

global
function longint DateTimeDiff(date d1,time t1,date d2,time t2)
begin
  longint days;
  longint res;
  
  days = DateDiff(d1,d2);
  res = TimeToMinutes(t1) - TimeToMinutes(t2);
  res = res + (days * 1440);
  
  DateTimeDiff = res;
  return;
end;

global
procedure RecalculateKPIsInCurCompany(string arg,LongInt starttick,string user)
begin
  record KPIDefVc KPIr;
  boolean recalcf;
  longint delay,diff;
  string 255 index;
  Boolean found;
    
  index = "SerNr";
  if (nonblank(user)) then begin
    index = "User";
  end;
  found = true;
  KPIr.Sign = user;
  while (LoopKey(index,KPIr,1,found)) begin
    if (nonblank(user)) then begin
      if (KPIr.Sign!=user) then begin
        found = false;
      end;
    end;
    if (blank(user)) then begin
      if ((GetCurTick-starttick)>1000) then begin found = false; end;
    end;
    if (found) then begin
      recalcf = false;
      
      switch (KPIr.Status) begin
        case kKPIStatusInvalid:
          //stopalert("kKPIStatusInvalid");
          recalcf = true;
        case kKPIStatusValid:
          if (nonblanktime(KPIr.Frequency)) then begin
            delay = TimeToMinutes(KPIr.Frequency);
          end else begin
            if (IsStandardProduct) then begin
              if (SingleUserMode) then begin
                delay = 1;
              end else begin
                delay = 5;
              end;
            end else begin
              delay = 60;
            end;
          end;
          
          diff = DateTimeDiff(CurrentDate,CurrentTime,KPIr.LastCalcDate,KPIr.LastCalcTime);
          
          //stopalert("delay =" & delay & " diff = " & diff);
          
          if (diff>=delay) then begin
            recalcf = true;
          end else begin
            recalcf = false;
          end;
        case kKPIStatusInvalidCalculating:
          //stopalert("kKPIStatusInvalidCalculating");
          recalcf = false;
        case kKPIStatusValidCalculating:
          //stopalert("kKPIStatusValidCalculating");
          recalcf = false;
        otherwise
          //stopalert("KPIr.Status==" & KPIr.Status);
      end;
      
      switch (arg) begin
        //case "startup": recalcf = true;
        case "force": recalcf = true;
        case "kKPIStatusInvalid": recalcf = true;
      end;
      if (recalcf) then begin
        //LogText(0,"Recalculating KPI no. " & KPIr.SerNr & " in company " & Currentcompany & " for user " & KPIr.Sign & " of type " & StringFromSet(403,KPIr.Type));
        RecalculateOneKPI(KPIr);
      end;
    end;
  end;
  
  return;
end;

global
procedure RecalculateKPIs(string arg)
begin
  boolean recalcf;
  date dt;
  time tm;
  LongInt rwcnt,oldcomp,i;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  Integer howoften;
  LongInt starttick,difftick;
  
  oldcomp = CurrentCompany;
  starttick = GetCurTick;
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(Compb,i,Comprw);
    if (blank(Comprw.TCPIP)) then begin
      if (SetCompanyCode(Comprw.CompCode,false)) then begin
        RecalculateKPIsInCurCompany(arg,starttick,"");
      end;
    end;
  end;
  difftick = GetCurTick - starttick;
  difftick = difftick / 1000;
  
  ResetCompany(oldcomp);
  switch (arg) begin
    case "startup":
      //stopalert("startup");
      if (IsStandardProduct) then begin
        howoften = 3 + difftick;
      end else begin
        howoften = 30 + difftick;
      end;
      NewPeriodicTask2("RecalculateKPIs","Recalculate KPIs","RecalculateKPIs","",howoften,"");
    otherwise
      //stopalert("arg==" & arg);
  end;
/*  
done difrent way, InitClientKPIsIdleTask
  if (ClientMode or SingleUserMode) then begin
    if (HasKPIs) then begin
      UpdateBrowses("KPIDefVc");
    end else begin
      if (IsStandardProduct and GuiType==kGuiMetro) then begin
        UpdateBrowses("KPIDefVc");
//        MasterWClassMetroKPIsUpdate(FindWindow("MasterWClass"));
      end;
    end;
  end;
*/  
  return;  
end;

global
procedure RecalculateKPIsForUser(string arg,string user)
begin
  LongInt rwcnt,i;
  record CompaniesBlock Compb;
  row CompaniesBlock Comprw;
  Integer oldcomp;
  LongInt starttick;
  
  starttick = GetCurTick;
  oldcomp = CurrentCompany;
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(Compb,i,Comprw);
    if (blank(Comprw.TCPIP)) then begin
      if (SetCompanyCode(Comprw.CompCode,false)) then begin
        RecalculateKPIsInCurCompany(arg,starttick,user);
      end;
    end;
  end;
  ResetCompany(oldcomp);
  ClientRemoteAsync.RecalculateKPIsClientRefresh(arg,user);
  return;  
end;
