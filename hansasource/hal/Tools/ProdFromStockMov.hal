external function roundmode SetRoundModeD(Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure ProdFillFIFO(record ProdVc,Boolean);
external function Integer MakeTransFromProd(record TRVc,record ProdVc,Boolean);
external updating procedure SaveTrans(record TRVc);

procedure SortAutoProds(var array string sSMItem,var array string sPRItem,var array val vSMQty,integer iNum)
BEGIN
  integer cond,i;
  string 20 sTmpSM;
  string 20 sTmpPR;
  val vTmpQty;

  cond = 1;
  while (cond==1) begin
    cond = 0;
    for (i=0;i<(iNum-1);i=i+1) begin
      if (sPRItem[i] > sPRItem[i+1]) then begin
        cond = 1;
        sTmpSM = sSMItem[i];
        sTmpPR = sPRItem[i];
        vTmpQty = vSMQty[i];
        sSMItem[i] = sSMItem[i+1];
        sPRItem[i] = sPRItem[i+1];
        vSMQty[i] = vSMQty[i+1];
        sSMItem[i+1] = sTmpSM;
        sPRItem[i+1] = sTmpPR;
        vSMQty[i+1] = vTmpQty;
      end;
    end;
  end; 
  RETURN;
END;

procedure NewProd(var record ProdVc Prodr,record StockMovVc StockMovr)
BEGIN
  RecordNew(Prodr);
  Prodr.StartDate = StockMovr.TransDate;
  Prodr.ProdDate  = StockMovr.TransDate;
  Prodr.StartTime = CurrentTime;  
  Prodr.EndTime   = CurrentTime;
  Prodr.Person = CurrentUser;
  Prodr.Location  = StockMovr.ToLocation;
  Prodr.SerNr = NextSerNr("ProdVc",Prodr.ProdDate,-1,false,"");
  Prodr.Recepy = "";
  Prodr.RecName = USetStr(20267) & " " & StockMovr.SerNr;
  Prodr.Comment = USetStr(20267) & " " & StockMovr.SerNr;
  Prodr.PRStatusFlag = 3;
  Prodr.Qty = 1;
  RETURN;
end;  

updating procedure AddOutItem(record ProdVc Prodr,string sOutItem,val vInQty,var integer iProdRows)
BEGIN
  row ProdVc Prodrw;
  record INVc INr;
  record TRVc gTRp;
  integer errcode;
  
  ClearRow(Prodr,Prodrw,1);
  Prodrw.Item = sOutItem;
  if (ReadFirstItem(Prodrw.Item,INr,true,true)) then begin end;
  Prodrw.Comment = INr.Name;
  Prodrw.Objects = INr.Objects;
  Prodrw.OutQty = vInQty;
  Prodrw.Coefficient = INr.UnitCoefficient;
  Prodrw.UnitXval = INr.Width;
  Prodrw.UnitYval = INr.Height;
  Prodrw.UnitZval = INr.Depth;
  Prodrw.Weight = INr.Weight;
  MatRowPut(Prodr,iProdRows,Prodrw);
  iProdRows = iProdRows + 1;
  Prodr.SerNr = NextSerNr("ProdVc",Prodr.ProdDate,-1,false,"");
  if ((Prodr.SerNr<>-1) and (iProdRows>0)) then begin
    ProdFillFIFO(Prodr,true);
    if (RecordStore(Prodr,true)) then begin      
      errcode = MakeTransFromProd(gTRp,Prodr,false);
      if (errcode==0) then begin
        if ((gTRp.Number>0) and (gTRp.IntYc==ProdYc)) then begin
          SaveTrans(gTRp);
        end;    
      end else begin
        //error
      end;
    end;
  end;  
  RETURN;
END;      

updating procedure MakeProdFromStockMov(array string sSMItem,array string sPRItem,array val vSMQty,var integer i,integer iMax,record StockMovVc StockMovr)
BEGIN
  record ProdVc Prodr;
  string 20 sInItem;
  string 20 sOutItem;
  val vInQty;
  row ProdVc Prodrw;
  record INVc INr;
  Integer iProdRows;
  record AutoProdVc AutoProdr;
  
  NewProd(Prodr,StockMovr);
  vInQty = 0;  
  iProdRows = 0;

  i = 0;
  sOutItem = sPRItem[i];
  sInItem = sSMItem[i];
  while (i<iMax) begin
    if (sOutItem == sPRItem[i]) then begin
      ClearRow(Prodr,Prodrw,1);
      Prodrw.Item = sSMItem[i];
      if (ReadFirstItem(Prodrw.Item,INr,true,true)) then begin end;
      Prodrw.Comment = INr.Name;
      Prodrw.Objects = INr.Objects;
      Prodrw.InQty = vSMQty[i];
      AutoProdr.FromItemCode = Prodrw.Item;
      if (ReadFirstMain(AutoProdr,1,true)) then begin
        vInQty = vInQty + Round(vSMQty[i]*AutoProdr.UnitCoefficient,SetRoundModeD(2));
        MatRowPut(Prodr,iProdRows,Prodrw);
        iProdRows = iProdRows + 1;
        i = i + 1;
      end;
    end else begin
      AddOutItem(Prodr,sOutItem,vInQty,iProdRows);
      NewProd(Prodr,StockMovr);
      vInQty = 0;  
      iProdRows = 0;
      sOutItem = sPRItem[i];
      sInItem = sSMItem[i];
    end;   
  end; 
  if (i == iMax) then begin
    AddOutItem(Prodr,sOutItem,vInQty,iProdRows);
  end;  
  RETURN;
END;  

global
updating procedure CreateAutoProduction(record StockMovVc StockMovr)
BEGIN
  row StockMovVc StockMovrw;
  array string 20 sSMItem;
  array string 20 sPRItem;
  array val vSMQty;
  integer iNum,iTot;
  integer i,rwcnt;
  record AutoProdVc AutoProdr;
  record LocationVc Locationr;
  record ProdSettingsBlock PSb;  
  
  BlockLoad(PSb);
  if (PSb.UpdProdInQtyFromStockMov==0) then begin
    Locationr.Code = StockMovr.ToLocation;
    if (ReadFirstMain(Locationr,1,true)) then begin
      if (Locationr.Type==1) then begin
        iNum = 0;
        rwcnt = MatRowCnt(StockMovr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(StockMovr,i,StockMovrw);
          AutoProdr.FromItemCode = StockMovrw.ArtCode;
          if (ReadFirstMain(AutoProdr,1,true)) then begin
            sSMItem[iNum] = StockMovrw.ArtCode;
            sPRItem[iNum] = AutoProdr.ToItemCode;
            vSMQty[iNum] = StockMovrw.Quant;
            iNum = iNum + 1;
          end;
        end;
        if (iNum > 1) then begin
          SortAutoProds(sSMItem,sPRItem,vSMQty,iNum);
        end;
        if (iNum > 0) then begin
          MakeProdFromStockMov(sSMItem,sPRItem,vSMQty,i,iNum,StockMovr);
        end;
      end;
    end;
  end;
  RETURN;
END;  

