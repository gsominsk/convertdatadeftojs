external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
external function Boolean UpdateProdOrderWithNewMachine(var record ProdOrderVc,Boolean);
external function roundmode SetRoundModeD(Integer);
external function Boolean GetFirstItem(var string,var record INVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function string 255 FindINObjects(string,string);
external function string 255 GetMachineGroup(string);
external function val TimeToVal2(Time);
remote function Boolean PasteRecInProd(var record ProdVc);
external function LongInt MinutesToTime(LongInt,var Time);
external function LongInt TimeToMinutes(Time);
external procedure ProdSumup(var record ProdVc);

global
procedure CreateProdFromProdOrder(record ProdOrderVc ProdOr,var record ProdVc Prodr)
begin
  row ProdOrderVc ProdOrw;
  row ProdVc Prodrw;
  record RecVc Recr;
  row RecVc Recrw;
  Integer i,rwcnt;
  Integer j,cnt;
  record AT2UnitVc AT2Unitr;
  record INVc INr;
  Integer rows;
      
  RecordNew(Prodr);
  Prodr.ProdDate = CurrentDate;
  Prodr.SerNr = -1;
  Prodr.RecName = ProdOr.RecName;
  Prodr.Recepy = ProdOr.Recipe;
  Prodr.Comment  = ProdOr.Comment1;
  Prodr.Comment2 = ProdOr.Comment2;
  Prodr.Comment3 = ProdOr.Comment3;
  Prodr.FixAssCode = ProdOr.Machine;
  Prodr.Objects = ProdOr.Objects;
  if (blank(Prodr.Objects)) then begin
    AT2Unitr.InventoryNr = Prodr.FixAssCode;
    if (ReadFirstMain(AT2Unitr,1,true)) then begin
      Prodr.Objects = AT2Unitr.ProdObjects;
    end;
  end;
  Prodr.ProdOrder = ProdOr.SerNr;
  Prodr.Person = ProdOr.Person;
  Prodr.Location = ProdOr.Location;
  Prodr.TotalIdleTime = ProdOr.SetUpTime;
  Prodr.TotalProdOrdQty = ProdOr.Qty;
  Recr.Code = ProdOr.Recipe;
  Prodr.Routing = ProdOr.Routing;
  if (ReadFirstMain(Recr,1,true)) then begin
    if (ProdOr.Qty<=0) then begin
      Prodr.Qty = Recr.StdBatch;
    end else begin
      Prodr.Qty = ProdOr.Qty;
    end;
    if (blank(Prodr.Routing)) then begin
      Prodr.Routing = Recr.DefaultRouting;
    end;
  end;
  if (Prodr.Qty<=0) then begin
    Prodr.Qty = 1;
  end;
//      PasteRecInProd(Prodr);
  rwcnt = MatRowCnt(ProdOr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOr,i,ProdOrw);
    if (ReadFirstItem(ProdOrw.Item,INr,true,true)) then begin end;
    if (INr.SerNrf==1) then begin
      if (ProdOrw.InQty!=0) then begin
        rows = ProdOrw.InQty*Prodr.Qty;
      end else begin
        rows = ProdOrw.OutQty*Prodr.Qty;
      end;
      for (j=0;j<rows;j=j+1) begin            
        ClearRow(Prodr,Prodrw,1);
        Prodrw.Item = ProdOrw.Item;
        Prodrw.Comment = ProdOrw.Comment;
        if (ProdOrw.InQty!=0) then begin
          Prodrw.InQty = 1;
          Prodrw.OutQty = blankval;
        end else begin
          Prodrw.InQty = blankval;
          Prodrw.OutQty = 1;
          Prodrw.RelVal = 1.00/Prodr.Qty;
        end;
        Prodrw.OutBatchStatus = ProdOrw.OutBatchStatus;
        Prodrw.UnitXval = ProdOrw.UnitXval;
        Prodrw.UnitYval = ProdOrw.UnitYval;
        Prodrw.UnitZval = ProdOrw.UnitZval;
        Prodrw.Coefficient = ProdOrw.Coefficient;
        Prodrw.Material = ProdOrw.Material;
        Prodrw.Objects = ProdOrw.Objects;
        if (blank(Prodrw.Objects)) then begin
          Prodrw.Objects = FindINObjects(INr.Objects,INr.Group);
        end;
        Prodrw.Weight = INr.Weight;
        if (nonblank(INr.Width)) then begin 
          if (blank(Prodrw.UnitXval)) then begin Prodrw.UnitXval = INr.Width; end;
        end;
        if (nonblank(INr.Height)) then begin 
          if (blank(Prodrw.UnitYval)) then begin Prodrw.UnitYval = INr.Height; end;
        end;
        if (nonblank(INr.Depth)) then begin 
          if (blank(Prodrw.UnitZval)) then begin Prodrw.UnitZval = INr.Depth; end;
        end;

        MatRowPut(Prodr,cnt,Prodrw);
        cnt = cnt + 1;
      end;
    end else begin
      ClearRow(Prodr,Prodrw,1);
      Prodrw.Item = ProdOrw.Item;
      Prodrw.Comment = ProdOrw.Comment;
      switch (Prodr.RowsHoldActualQty) begin
        case 1: 
          if (ProdOrw.InQty!=0) then begin
            Prodrw.InQty = ProdOrw.InQty*Prodr.Qty;
            Prodrw.OutQty = blankval;
          end;
          if (ProdOrw.OutQty!=0) then begin
            Prodrw.InQty = blankval;
            Prodrw.OutQty = ProdOrw.OutQty*Prodr.Qty;
          end;
        otherwise
          Prodrw.InQty = ProdOrw.InQty;
          Prodrw.OutQty = ProdOrw.OutQty;
      end;
      Prodrw.OutBatchStatus = ProdOrw.OutBatchStatus;
      Prodrw.UnitXval = ProdOrw.UnitXval;
      Prodrw.UnitYval = ProdOrw.UnitYval;
      Prodrw.UnitZval = ProdOrw.UnitZval;
      Prodrw.Coefficient = ProdOrw.Coefficient;
      Prodrw.Material = ProdOrw.Material;
      Prodrw.Objects = ProdOrw.Objects;
      if (blank(Prodrw.Objects)) then begin
        Prodrw.Objects = FindINObjects(INr.Objects,INr.Group);
      end;
      Prodrw.Weight = INr.Weight;
        if (nonblank(INr.Width)) then begin 
          if (blank(Prodrw.UnitXval)) then begin Prodrw.UnitXval = INr.Width; end;
        end;
        if (nonblank(INr.Height)) then begin 
          if (blank(Prodrw.UnitYval)) then begin Prodrw.UnitYval = INr.Height; end;
        end;
        if (nonblank(INr.Depth)) then begin 
          if (blank(Prodrw.UnitZval)) then begin Prodrw.UnitZval = INr.Depth; end;
        end;

      MatRowPut(Prodr,cnt,Prodrw);
      cnt = cnt + 1;
    end;

  end;
  
  cnt = MatRowCnt(Recr);
  rwcnt = MatRowCnt(Prodr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Prodr,i,Prodrw);
    for (j=0;j<cnt;j=j+1) begin
      MatRowGet(Recr,j,Recrw);
      if (Recrw.Item==Prodrw.Item) then begin
        Prodrw.ItemCost = Recrw.ItemCost;
        if (Prodrw.RelVal<=0 and Prodrw.OutQty>0) then begin
          Prodrw.RelVal = Recrw.RelVal;
        end;
        Prodrw.ExtraCost = Recrw.ExtraCost;
        Prodrw.FIFORowVal = Prodrw.InQty * Prodrw.ItemCost;
        Prodrw.FIFORowVal = Round(Prodrw.FIFORowVal,SetRoundModeD(5));
        MatRowPut(Prodr,i,Prodrw);
        j = cnt;
      end;
    end;        
  end;
/*

    Prodrw.RelVal = ProdOrw.RelVal;
    Prodrw.ItemCost = ProdOrw.ItemCost;
    Prodrw.ExtraCost = ProdOrw.ExtraCost;
    Prodrw.SerialNr = ProdOrw.SerialNr;
    Prodrw.BestBefore = ProdOrw.BestBefore;
    Prodrw.FIFORowVal = ProdOrw.FIFORowVal;
    Prodrw.Weight = ProdOrw.Weight;
    Prodrw.PosCode = ProdOrw.PosCode;
*/      
  ProdSumup(Prodr);
  return;
end;

// Here are the rules for how the Time is calculated on a production, make sure these
// variables are NOT used anywhere else in the HAL code. This is the function to use.
global
procedure CalcProdTime(record RecVc Recr,val qty,var val dayqty,var time timeqty)
begin
  LongInt durmin;
  Time durtime;
  val numprod;
  val qtytogo;
  val prodmins;

  qtytogo = qty;
  if (qtytogo<0) then begin
    qtytogo = 0;
  end;
  numprod = Recr.NumProd;
  if (numprod==0) then begin
    numprod = 1;
  end;
  dayqty = Recr.FixedAssembDays;
  if (qtytogo==0) then begin dayqty = 0; end;
  dayqty = dayqty + ((Recr.QtyAssemblyDays * qtytogo) / numprod);
  durmin = TimeToMinutes(Recr.SetUpTime);
  if (qtytogo==0) then begin durmin = 0; end;
  prodmins = Recr.HrsToProd * 60.00;
  if (Recr.MinsToProd>=0) then begin
    prodmins = prodmins + Recr.MinsToProd;
  end;
  if (Recr.SecsToProd>=0) then begin
    prodmins = prodmins + Recr.SecsToProd/60.00;
  end;
  durmin = durmin + (qtytogo * prodmins) / numprod;
  dayqty = dayqty + MinutesToTime(durmin,durtime);
  timeqty = durtime;
  return;
end;

global
procedure CalcPlannedStartDate(string machine,Date shouldstartdp,var val daystoadd,Time timeqty)
BEGIN
  string 255 tstr;
  record MachineHoursVc MHr;
  Integer datid;
  val diff,timev;
  Time ltimeqty;
  val tempdaystoadd;
  
  tstr = GetMachineGroup(machine);
  MHr.Code = tstr;
  if (ReadFirstKey("Code",MHr,1,true)) then begin
    ltimeqty = timeqty;
    if (daystoadd>0) then begin
      ltimeqty.hour = ltimeqty.hour + 24;
      tempdaystoadd = daystoadd - 1;
    end;
    daystoadd = 0;
    datid = GetDateID(shouldstartdp);
Ldatid:;    
    switch (datid) begin
      case 1: diff = MHr.MonEnd;
      case 2: diff = MHr.TueEnd;
      case 3: diff = MHr.WedEnd;
      case 4: diff = MHr.ThuEnd;
      case 5: diff = MHr.FriEnd;
      case 6: diff = MHr.SatEnd;
      case 7: diff = MHr.SunEnd;
    end;
    if (blank(diff)) then begin diff = 24.00; end;
    timev = TimeToVal2(ltimeqty);
    if (timev>diff) then begin
      daystoadd = daystoadd + 1;
      datid = datid - 1;
      if (datid<1) then begin datid = 7; end;
      if (datid>7) then begin datid = 7; end;
      ltimeqty.hour = ltimeqty.hour - diff;
      if ((tempdaystoadd>0) and (GetHour(ltimeqty)<24)) then begin
        ltimeqty.hour = ltimeqty.hour + 24;
        tempdaystoadd = tempdaystoadd - 1;
      end;
      goto Ldatid;
    end;
  end;
  RETURN;
END;

global
procedure CalcProdDuration(var record ProdOrderVc ProdOp)
begin
  record RecVc Recr;
  Time durtime;
  val durdays;

  Recr.Code = ProdOp.Recipe;
  if (ReadFirstMain(Recr,1,true)) then begin
    CalcProdTime(Recr,ProdOp.Qty - ProdOp.Finished,durdays,durtime);
    ProdOp.DurDays = durdays;
    ProdOp.DurTime = durtime;
    if (ProdOp.DurDays==0) then begin
      ProdOp.DurDays = -1;
    end;
  end;
  return;
end;

global
function Boolean PasteRecInProdOrder2(var record ProdOrderVc ProdOp,var string item)
begin
  record RecVc Recr;
  row RecVc Recrw;
  row ProdOrderVc ProdOrw;
  record INVc INr;
  Integer i,j,rwcnt;
  Integer prodrows,rows;
  Boolean res;

//where is multilevel recepies  
  Recr.Code = ProdOp.Recipe;
  res = ReadFirstMain(Recr,1,true);
  if (res) then begin
    while (MatRowCnt(ProdOp)>0) begin
      MatRowDelete(ProdOp,0);
    end;
    if (Recr.Closed!=0) then begin 
      goto LPasteRecInProdOrder2;
    end;
    ProdOp.RecName = Recr.Comment;
    if (ProdOp.Qty==0) then begin
      ProdOp.Qty = Recr.NormProdQty;
    end;
    ProdOp.SetUpTime = Recr.SetUpTime;
    ProdOp.Instr0 = Recr.Instr0;
    ProdOp.Instr1 = Recr.Instr1;
    ProdOp.Instr2 = Recr.Instr2;    
    ProdOp.Routing = Recr.DefaultRouting;
    ProdOp.LangCode = Recr.LangCode;
    ProdOp.ExtraProdQty = Recr.ExtraProdQty;
    rwcnt = MatRowCnt(Recr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Recr,i,Recrw);
      INr.Code = Recrw.Item;
      if (ReadFirstMain(INr,1,true)) then begin end;
      if (INr.SerNrf==1) then begin
        if (Recrw.InQty!=0) then begin
          rows = Recrw.InQty;
          for (j=0;j<rows;j=j+1) begin            
            prodrows = MatRowCnt(ProdOp);
            ClearRow(ProdOp,ProdOrw,1);
            ProdOrw.Item = Recrw.Item;
            ProdOrw.Comment = Recrw.Comment;
            ProdOrw.Objects = FindINObjects(INr.Objects,INr.Group);
            ProdOrw.InQty = 1;
            ProdOrw.OutQty = blankval;
            ProdOrw.Material = Recrw.Material;
            ProdOrw.UnitXval = INr.Width;
            ProdOrw.UnitYval = INr.Height;
            ProdOrw.UnitZval = INr.Depth;
            MatRowPut(ProdOp,prodrows,ProdOrw);
          end;
        end;
        if (Recrw.OutQty!=0) then begin
          rows = Recrw.OutQty;
          for (j=0;j<rows;j=j+1) begin
            prodrows = MatRowCnt(ProdOp);
            ClearRow(ProdOp,ProdOrw,1);
            ProdOrw.Item = Recrw.Item;
            ProdOrw.Comment = Recrw.Comment;
            ProdOrw.Objects = FindINObjects(INr.Objects,INr.Group);
            ProdOrw.OutQty = 1;
            ProdOrw.InQty = blankval;
            ProdOrw.Material = Recrw.Material;
            ProdOrw.UnitXval = INr.Width;
            ProdOrw.UnitYval = INr.Height;
            ProdOrw.UnitZval = INr.Depth;
            MatRowPut(ProdOp,prodrows,ProdOrw);
          end;
        end;
      end else begin
        prodrows = MatRowCnt(ProdOp);
        ClearRow(ProdOp,ProdOrw,1);
        ProdOrw.Item = Recrw.Item;
        ProdOrw.Comment = Recrw.Comment;
        ProdOrw.Objects = FindINObjects(INr.Objects,INr.Group);
        ProdOrw.InQty = Recrw.InQty;
        ProdOrw.OutQty = Recrw.OutQty;
        ProdOrw.Material = Recrw.Material;
        ProdOrw.UnitXval = INr.Width;
        ProdOrw.UnitYval = INr.Height;
        ProdOrw.UnitZval = INr.Depth;
        if (ProdOrw.OutQty>0) then begin
          item = ProdOrw.Item;
        end;
        MatRowPut(ProdOp,prodrows,ProdOrw);
      end;
    end;
  end;
  CalcProdDuration(ProdOp);
LPasteRecInProdOrder2:;  
  PasteRecInProdOrder2 = res;
  return;
end;

global
function string 255 FindMachineforItem(string artcode,string recipe)
begin
  string 255 res;
  record ProdItemVc ProdIr;
  row ProdItemVc ProdIrw;
  Integer i,rwcnt;

  ProdIr.ItemCode = artcode;
  if (ReadFirstMain(ProdIr,1,true)) then begin
    if (blank(ProdIr.DefMachine)) then begin
      rwcnt = MatRowCnt(ProdIr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ProdIr,i,ProdIrw);
        if (ProdIrw.DefRecipe==recipe) then begin
          res = ProdIrw.Machine;
          rwcnt = i;
        end;
      end;
    end else begin
      res = ProdIr.DefMachine;
    end;
  end;
  FindMachineforItem = res;
  return;
end;

global
function Boolean PasteRecInProdOrder(var record ProdOrderVc ProdOp)
begin
  record ProdItemVc pir;
  row ProdItemVc pirw;
  string 20 item;
  Integer i,rwcnt;
  Boolean res;
  
  res = PasteRecInProdOrder2(ProdOp,item);
  pir.ItemCode = item;
  if (ReadFirstMain(pir,1,true)) then begin
    if (blank(pir.DefMachine)) then begin
      rwcnt = MatRowCnt(pir);
      for (i=0;i<rwcnt;i = i + 1) begin
        MatRowGet(pir,i,pirw);
        if (pirw.DefRecipe==ProdOp.Recipe) then begin
          ProdOp.Machine = pirw.Machine;
          rwcnt = i;
        end;
      end;
    end else begin
      ProdOp.Machine = pir.DefMachine;
    end;
  end;
  UpdateProdOrderWithNewMachine(ProdOp,false);
  PasteRecInProdOrder = res;
  return;
end;

global
procedure ProdOrderVc_PasteItem(var record ProdOrderVc ProdOrderr,Integer rownr)
begin
  record INVc INr;
  row ProdOrderVc ProdOrderrw;
  Boolean itemfound;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  
  MatRowGet(ProdOrderr,rownr,ProdOrderrw);
  itemfound = GetFirstItem(ProdOrderrw.Item,INr);
  if (itemfound==false) then begin
    itemfound = ReadFirstItem(ProdOrderrw.Item,INr,true,true);
    if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
      INr.Code = ProdOrderrw.Item;
    end;
  end;
  if (itemfound) then begin
    ProdOrderrw.Coefficient = INr.UnitCoefficient;
    ProdOrderrw.Item = INr.Code;
    ProdOrderrw.Comment = INr.Name;
    ProdOrderrw.Objects = FindINObjects(INr.Objects,INr.Group);
    if (nonblank(INr.Width)) then begin
      ProdOrderrw.UnitXval = INr.Width;
    end;
    if (nonblank(INr.Height)) then begin
      ProdOrderrw.UnitYval = INr.Height;
    end;
    if (nonblank(INr.Depth)) then begin
      ProdOrderrw.UnitZval = INr.Depth;    
    end;
  end;
  MatRowPut(ProdOrderr,rownr,ProdOrderrw);
  return;
end;

global
function Boolean ProdOrderSerNrChangeAllowed(LongInt sernr)
begin
  Boolean res,testf;
  record ProdVc Prodr;
  record ProdOperationVc ProdOpr;

  res = true;
  
  Prodr.ProdOrder = sernr;  
  testf = ReadFirstKey("ProdOrder",Prodr,1,true);
  if (testf==false) then begin
    ProdOpr.ProdOrdNr = sernr;  
    testf = ReadFirstKey("ProdOrdNr",ProdOpr,1,true);
  end;
  res = !testf;
  ProdOrderSerNrChangeAllowed = res;
  return;
end;
