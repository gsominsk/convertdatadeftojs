external function Time AddTime_Minutes(Time,Time);
external function LongInt DateDiff(Date,Date);
external procedure JobPasteNrOfDays(var record JobVc);
external function Integer JobPasteResCode(var record JobVc,string);
external procedure JobPasteTransDate(var record JobVc);
external function Boolean CheckDblRentRes(record RentResVc);
external procedure NormalizePersons(var string,string,Boolean);
external procedure AddPerson(var string,string);
external function Boolean CheckDblReserved(record JobVc);
external function Boolean PasteRecInProdOrder2(var record ProdOrderVc,var string);

enum begin
  kMoveReservationNone = 0,
  kMoveReservationResource = 1,
  kMoveReservationDate = 2,
  kMoveReservationResourceDate = 3
end;

global
function Boolean UpdateProdOrderWithNewMachine(var record ProdOrderVc ProdOrderr,Boolean changerecipef)
begin
  record AT2UnitVc AT2Unitr;
  row ProdOrderVc ProdOrderrw;
  record ProdItemVc ProdItemr;
  row ProdItemVc ProdItemrw;
  record INVc INr;
  string 20 item;
  Integer i,rwcnt;
  Integer j,jrwcnt;
  Boolean testf,res;

  AT2Unitr.InventoryNr = ProdOrderr.Machine;
  if (ReadFirstMain(AT2Unitr,1,true)) then begin
    ProdOrderr.Objects = AT2Unitr.ProdObjects; // could be more clever to replace old Asset Object...
  end;
  testf = true;
  rwcnt = MatRowCnt(ProdOrderr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ProdOrderr,i,ProdOrderrw);
    if (ProdOrderrw.OutQty>0) then begin
      INr.Code = ProdOrderrw.Item;
      if (ReadFirstMain(INr,1,true)) then begin
        ProdItemr.ItemCode = ProdOrderrw.Item;
        if (ReadFirstMain(ProdItemr,1,true)) then begin
          testf = false;
          if (ProdItemr.DefMachine==ProdOrderr.Machine) then begin
            if (changerecipef) then begin
              if (ProdOrderr.Recipe!=INr.Recepy) then begin
                ProdOrderr.Recipe = INr.Recepy;
                res = PasteRecInProdOrder2(ProdOrderr,item);
              end;
            end;
            testf = true;
          end;
          if (testf==false) then begin
            rwcnt = MatRowCnt(ProdItemr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(ProdItemr,i,ProdItemrw);
              if (ProdItemrw.Machine==ProdOrderr.Machine) then begin
                if (nonblank(ProdItemrw.DefRecipe)) then begin
                  if (ProdOrderr.Recipe!=ProdItemrw.DefRecipe) then begin
                    ProdOrderr.Recipe = ProdItemrw.DefRecipe;
                    res = PasteRecInProdOrder2(ProdOrderr,item);
                  end;
                end; 
                testf = true;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  UpdateProdOrderWithNewMachine = testf;
  return;
end;

global
updating function Boolean MoveProdOrder(LongInt sernr,string newmachine)
BEGIN
  record ProdOrderVc lastProdOrderr;
  record ProdOrderVc ProdOrderr;
  record ProdOrderVc oldProdOrderr;
  Boolean movedf;
  Boolean testf,quef;

  // ## Check that target machine exists?
  
  ProdOrderr.SerNr = sernr;
  if (ReadFirstMain(ProdOrderr,1,true)) then begin
    if (ProdOrderr.Machine==newmachine) then begin
      goto LMoveProdOrder;
    end;
    RecordCopy(oldProdOrderr,ProdOrderr);
    ProdOrderr.Machine = newmachine;
    testf = UpdateProdOrderWithNewMachine(ProdOrderr,true);
    if (testf) then begin
      lastProdOrderr.Machine = ProdOrderr.Machine;
      if (ReadLastKey("Queue",lastProdOrderr,1,false)) then begin 
        quef = true;
        if (lastProdOrderr.Machine!=ProdOrderr.Machine) then begin quef = false; end;
//StopAlert("lastProdOrderr.Machine " & lastProdOrderr.Machine & " lastProdOrderr.QueuePos " & lastProdOrderr.QueuePos);        
      end;
      if (quef) then begin
        ProdOrderr.QueuePos = lastProdOrderr.QueuePos + 1;
      end else begin
        ProdOrderr.QueuePos = 1;
      end;
    end;
    if (testf) then begin
      if (RecordUpdate(oldProdOrderr,ProdOrderr,false)==0) then begin
      end;
      movedf = true;
    end;
  end;
LMoveProdOrder:;
  MoveProdOrder = movedf;
  RETURN;
END;

global
updating function Boolean MoveProdOperation(LongInt sernr,string newmachine)
begin
  record ProdOperationVc lastProdOperationr;
  record ProdOperationVc ProdOperationr;
  record ProdOperationVc oldProdOperationr;
  Boolean movedf;
  Boolean testf,quef;
  
  ProdOperationr.SerNr = sernr;
  if (ReadFirstMain(ProdOperationr,1,true)) then begin
    if (ProdOperationr.Machine==newmachine) then begin
      goto LMoveProdOperation;
    end;
    RecordCopy(oldProdOperationr,ProdOperationr);
    ProdOperationr.Machine = newmachine;
    testf = true;
//    testf = UpdateProdOrderWithNewMachine(ProdOperationr,true);
    if (testf) then begin
      if (RecordUpdate(oldProdOperationr,ProdOperationr,false)==0) then begin
      end;
      movedf = true;
    end;
  end;
LMoveProdOperation:;
  MoveProdOperation = movedf;
  return;
end;

function Integer GetJobState(string resstatus)
begin
  Integer res;
  record HotelBlock Hotelb;
  
  BlockLoad(Hotelb);
  if (resstatus==Hotelb.ChOutSt) then begin 
    res = 2;
  end else begin
    if (resstatus==Hotelb.ChInSt) then begin 
      res = 1;
    end else begin
      res = 0;
    end;
  end;
  
  GetJobState = res;
end;

global
updating function Integer MoveReservation(record LocalMachineBlock LMb,LongInt sernr,string newresource,Date newdate)
BEGIN
  Integer nwn;
  record JobVc Jobr;
  record JobVc oldJobr;
  record ResVc Resr;
  LongInt recid;
  Integer movederr;
  Integer action,err;

  movederr = 1;
  Resr.Code = newresource;
  if (ReadFirstMain(Resr,1,true)==false) then begin
    goto LMoveReservation;
  end;
  Jobr.SerNr = sernr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    if (Jobr.RoomChangeFlag!=0) then begin 
      goto LMoveReservation;
    end;
    if (GetJobState(Jobr.ResStatus)>=1) then begin
      goto LMoveReservation;
    end;
    action = kMoveReservationNone;
    if (Jobr.ResCode!=newresource) then begin 
      action = kMoveReservationResource;
    end;
    if (Jobr.TransDate!=newdate) then begin 
      if (UserCanAction("ChangeDateinResourcePlanner",true)==false) then begin
        movederr = 1274;
        goto LMoveReservation;
      end;
      switch (action) begin
        case kMoveReservationResource:
          action = kMoveReservationResourceDate;
        otherwise
          action = kMoveReservationDate;
      end;
    end;
    if (action==kMoveReservationNone) then begin
      goto LMoveReservation;
    end;
    RecordCopy(oldJobr,Jobr);

    switch (action) begin
      case kMoveReservationResource:
        Jobr.ResCode = newresource;
        err = JobPasteResCode(Jobr,LMb.ResLoc);
        if (err!=0) then begin
          MessageBox(err,"");
        end;
      case kMoveReservationDate:
        if (Jobr.NrOfDays<0) then begin
          Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
        end;
        Jobr.TransDate = newdate;
        JobPasteTransDate(Jobr);
      case kMoveReservationResourceDate:
        if (Jobr.NrOfDays<0) then begin
          Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
        end;
        Jobr.TransDate = newdate;
        JobPasteTransDate(Jobr);
        Jobr.ResCode = newresource;
        err = JobPasteResCode(Jobr,LMb.ResLoc);
        if (err!=0) then begin
          MessageBox(err,"");
        end;
    end;
    if (CheckDblReserved(Jobr)==true) then begin
      goto LMoveReservation;
    end;
    Jobr.ResName = Resr.Name;
    Jobr.LTxtCode = Resr.LTxtCode;
    if (RecordUpdate(oldJobr,Jobr,true)==0) then begin
    end;    
    movederr = 0;
LMoveReservation:;
  end;
  MoveReservation = movederr;
  RETURN;
END;

global
updating function Boolean RightEdgeMoveReservation(record LocalMachineBlock LMb,LongInt sernr,string newresource,Date newstartdate)
begin
  Integer nwn;
  record JobVc Jobr;
  record JobVc oldJobr;
  record ResVc Resr;
  LongInt recid;
  Boolean movedf;
  Integer action,err;
  Date newenddate;

  Resr.Code = newresource;
  if (ReadFirstMain(Resr,1,true)==false) then begin
    goto LRightEdgeMoveReservation;
  end;
  Jobr.SerNr = sernr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    if (Jobr.RoomChangeFlag!=0) then begin 
      goto LRightEdgeMoveReservation;
    end;
    if (GetJobState(Jobr.ResStatus)>=1) then begin
      goto LRightEdgeMoveReservation;
    end;
    action = kMoveReservationNone;
    if (Jobr.ResCode!=newresource) then begin 
      action = kMoveReservationResource;
    end;
    if (Jobr.TransDate!=newenddate) then begin 
      switch (action) begin
        case kMoveReservationResource:
          action = kMoveReservationResourceDate;
        otherwise
          action = kMoveReservationDate;
      end;
    end;
    if (action==kMoveReservationNone) then begin
      goto LRightEdgeMoveReservation;
    end;
    RecordCopy(oldJobr,Jobr);

    newenddate = AddDay(newstartdate,1);
    switch (action) begin
      case kMoveReservationResource:
        Jobr.ResCode = newresource;
        err = JobPasteResCode(Jobr,LMb.ResLoc);
        if (err!=0) then begin
          MessageBox(err,"");
        end;
      case kMoveReservationDate:
        Jobr.EndDate = newenddate;
        Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate) - 1;
        JobPasteNrOfDays(Jobr);
      case kMoveReservationResourceDate:
        Jobr.EndDate = newenddate;
        Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate) - 1;
        JobPasteTransDate(Jobr);
        Jobr.ResCode = newresource;
        err = JobPasteResCode(Jobr,LMb.ResLoc);
        if (err!=0) then begin
          MessageBox(err,"");
        end;
        JobPasteNrOfDays(Jobr);
    end;
    if (CheckDblReserved(Jobr)==true) then begin
      goto LRightEdgeMoveReservation;
    end;
    Jobr.ResName = Resr.Name;
    Jobr.LTxtCode = Resr.LTxtCode;
    if (RecordUpdate(oldJobr,Jobr,true)==0) then begin
    end;    
    movedf = true;
LRightEdgeMoveReservation:;
  end;
  RightEdgeMoveReservation = movedf;
  return;
end;

global
updating function Boolean LeftEdgeMoveReservation(record LocalMachineBlock LMb,LongInt sernr,string newresource,Date newstartdate)
begin
  Integer nwn;
  record JobVc Jobr;
  record JobVc oldJobr;
  record ResVc Resr;
  LongInt recid,diff;
  Boolean movedf;
  Integer action,err;

  Resr.Code = newresource;
  if (ReadFirstMain(Resr,1,true)==false) then begin
    goto LLeftEdgeMoveReservation;
  end;
  Jobr.SerNr = sernr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    if (Jobr.RoomChangeFlag!=0) then begin 
      goto LLeftEdgeMoveReservation;
    end;
    if (GetJobState(Jobr.ResStatus)>=1) then begin
      goto LLeftEdgeMoveReservation;
    end;
    action = kMoveReservationNone;
    if (Jobr.ResCode!=newresource) then begin 
      action = kMoveReservationResource;
    end;
    if (Jobr.TransDate!=newstartdate) then begin 
      switch (action) begin
        case kMoveReservationResource:
          action = kMoveReservationResourceDate;
        otherwise
          action = kMoveReservationDate;
      end;
    end;
    if (action==kMoveReservationNone) then begin
      goto LLeftEdgeMoveReservation;
    end;

    diff = DateDiff(Jobr.EndDate,newstartdate);

    RecordCopy(oldJobr,Jobr);

    switch (action) begin
      case kMoveReservationResource:
        Jobr.ResCode = newresource;
        err = JobPasteResCode(Jobr,LMb.ResLoc);
        if (err!=0) then begin
          MessageBox(err,"");
        end;
      case kMoveReservationDate:
        Jobr.TransDate = newstartdate;
        Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
        JobPasteNrOfDays(Jobr);
      case kMoveReservationResourceDate:
        Jobr.TransDate = newstartdate;
        Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
        JobPasteNrOfDays(Jobr);
        Jobr.ResCode = newresource;
        err = JobPasteResCode(Jobr,LMb.ResLoc);
        if (err!=0) then begin
          MessageBox(err,"");
        end;
    end;
    if (CheckDblReserved(Jobr)==true) then begin
      goto LLeftEdgeMoveReservation;
    end;
    Jobr.ResName = Resr.Name;
    Jobr.LTxtCode = Resr.LTxtCode;
    if (RecordUpdate(oldJobr,Jobr,true)==0) then begin
    end;    
    movedf = true;
LLeftEdgeMoveReservation:;
  end;
  LeftEdgeMoveReservation = movedf;
  return;
end;

global
updating function Boolean MoveActivity2(Integer compnr,LongInt sernr,string oldperson,string newperson,Date newdate,Time newtime)
BEGIN
  Boolean movedf;
  Integer nwn;
  record ActVc Actr;
  record ActVc oldActr;
  string 255 tstr;
  LongInt actlend;

  if (compnr!=CurrentCompany) then begin
    MessageBox(2245,"");
    goto LMoveActivity2;
  end;
  Actr.SerNr = sernr;
  if (ReadFirstMain(Actr,1,true)) then begin
    if (Actr.OKFlag!=0) then begin
      MessageBox(23165,"");
      goto LMoveActivity2;
    end;
    RecordCopy(oldActr,Actr);
    if (oldperson==newperson) then begin
      actlend = DateDiff(Actr.EndDate,Actr.TransDate);
      Actr.TransDate = newdate;
      if (nonblanktime(newtime)) then begin
        Actr.StartTime = newtime;
      end;
      if (nonblankdate(Actr.EndDate)) then begin
        Actr.EndDate = newdate;
        Actr.EndDate = AddDay(Actr.EndDate,actlend);
      end;
      Actr.EndTime = AddTime_Minutes(Actr.StartTime,Actr.CostTime);
    end else begin
      tstr = Actr.MainPersons;
      NormalizePersons(tstr,oldperson,true);
      AddPerson(tstr,newperson);
      NormalizePersons(tstr,"",false);
      Actr.MainPersons = tstr;
    end;
    if (RecordUpdate(oldActr,Actr,true)==0) then begin
    end;    
    movedf = true;
  end;
LMoveActivity2:;  
  MoveActivity2 = movedf;
  RETURN;
END;

function Boolean AllowRentResMove(record RentResVc RentResr)
BEGIN
  Boolean res;
  row RentResVc RentResrw;
  Integer rwcnt,i;
  
  res = true;
  if (RentResr.Done!=0) then begin
    res = false;
  end;
  if (RentResr.RentResDel>0) then begin
    res = false;
  end;
  rwcnt = MatRowCnt(RentResr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentResr,i,RentResrw);
    if (RentResrw.Del>0) then begin
      res = false;
    end;
  end;
  AllowRentResMove = res;
  RETURN;
END;

global
updating function Boolean MoveRentRes(LongInt sernr,string newserialno)
BEGIN
  Integer nwn;
  record RentResVc RentResr;
  record RentResVc oldRentResr;
  record RentINVc RentINr;
  Boolean movedf;

  RentResr.SerNr = sernr;
  if (ReadFirstMain(RentResr,1,true)) then begin
    if (RentResr.SerialNr==newserialno) then begin goto LMoveRentRes; end;
    RecordCopy(oldRentResr,RentResr);
    RentResr.SerialNr = newserialno;
    RentINr.Code = RentResr.Code;
    RentINr.SerialNr = newserialno;
    if (ReadFirstMain(RentINr,2,true)) then begin
      if (RentINr.Terminated!=0) then begin
        goto LMoveRentRes;
      end;
      if (nonblankdate(RentINr.PurchaseDate)) then begin
        if (RentINr.PurchaseDate>RentResr.TransDate) then begin
          goto LMoveRentRes;
        end;
      end;
    end;
    if (AllowRentResMove(RentResr)==false) then begin
      goto LMoveRentRes;
    end;
    if (CheckDblRentRes(RentResr)==true) then begin
      goto LMoveRentRes;
    end;
    if (RecordUpdate(oldRentResr,RentResr,true)==0) then begin
    end;    
    movedf = true;
LMoveRentRes:;
  end;
  MoveRentRes = movedf;
  RETURN;
END;

global
updating function Boolean RTWSplitReservationRemote(LongInt resnr)
begin
  Boolean res,oddf;
  record JobVc Jobr;
  record JobVc oldJobr;
  record JobVc newJobr;
  LongInt NrOfDays;
  
  Jobr.SerNr = resnr;
  if (ReadFirstMain(Jobr,1,true)) then begin
    RecordCopy(newJobr,Jobr);
    RecordCopy(oldJobr,Jobr);
    NrOfDays = Jobr.NrOfDays;
    if (mod(NrOfDays,2)!=0) then begin
      oddf = true;
    end;
    Jobr.NrOfDays = NrOfDays/2;
    if (oddf) then begin
      Jobr.NrOfDays = Jobr.NrOfDays + 1;
    end;
    JobPasteNrOfDays(Jobr);
    if (RecordUpdate(oldJobr,Jobr,true)==0) then begin    
      newJobr.TransDate = Jobr.EndDate;
      newJobr.StartTime = Jobr.EndTime;
      newJobr.NrOfDays = NrOfDays/2;
      JobPasteNrOfDays(newJobr);
      newJobr.SerNr = NextSerNr("JobVc",newJobr.TransDate,-1,false,"");            
      RecordStore(newJobr,false);
      res = true;
    end;
  end;
  RTWSplitReservationRemote = res;
  return;
end;