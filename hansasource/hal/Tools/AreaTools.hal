global
procedure AddAreaAfterArea(var area a,area b)
begin
  InsertAreaBeforeArea(a,b); 
  SetAreaZeroSize(a);
  InsertAreaBeforeArea(b,a);   
  return;
end;

global
procedure SliceArea(area orig,LongInt spoint,var area part1,var area part2)
begin
  LongInt aLen;
  
  aLen = GetAreaLength(orig);
  GetAreaFromArea(orig,0,spoint,part1);
  GetAreaFromArea(orig,spoint,aLen-spoint,part2);
  return;
end;

global 
procedure MidArea(var area a,Longint start,Longint length) 
begin
  area dummy;
    
  GetAreaFromArea(a,start,length,dummy);
  SetAreaZeroSize(a);
  InsertAreaBeforeArea(dummy,a);
  return;
end;

global
procedure CutAreaRight(var area a,integer length)
begin 
  area dummy;
  LongInt aLen;
  
  aLen = GetAreaLength(a);
  MidArea(a,0,aLen-length);
  return;
end;

global
procedure CutAreaLeft(var area a,integer length)
begin 
  area dummy;
  LongInt aLen;
  
  aLen = GetAreaLength(a);
  MidArea(a,length,aLen-length);
  return;
end;

global
procedure PopArea(var area org,LongInt ppoint,var area popped)
begin // pop area that comes after slicing point
  area dummy;
    
  SliceArea(org,ppoint,dummy,popped);
  SetAreaZeroSize(org); 
  InsertAreaBeforeArea(dummy,org);   
  return;
end;

global 
function LongInt SearchFromArea(string target,boolean backwards,area a) 
begin
  LongInt aLen,i,increment,cycles;
  LongInt res;
  Integer slen,start;
    
  slen = len(target);
  aLen = GetAreaLength(a);
    
  increment = 1;
  if(backwards) then begin
    increment = -increment;
    start = aLen-slen;
    cycles = slen-1;
  end else begin
    aLen = aLen-slen+1;
  end;
  for(i=start;cycles<aLen;i=i+increment) begin 
    if(GetStringFromArea(a,i,slen)==target) then begin
      res = i;
      cycles = aLen;
    end;
    cycles=cycles+1;
  end;
  SearchFromArea = res;
  return;
end;

global
procedure RemTagFromStart(string tagName,boolean HasEndTag,var area target)
begin
  LongInt aLen,tlen,pos;
    
  tlen = len(tagName);
  pos = SearchFromArea(("<"&tagName),false,target);
  if(pos>=0) then begin
    CutAreaLeft(target,tlen + pos + 1);
    pos = SearchFromArea(">",false,target);
    CutAreaLeft(target,pos + 1);
  end;
  return;
end;

global
procedure RemTagFromEnd(string tagName,boolean HasEndTag,var area target)
begin
  LongInt aLen,tlen,pos;
    
  tlen = len(tagName);
  pos = SearchFromArea(("</"&tagName),true,target);
  if(pos>=0) then begin
    aLen = GetAreaLength(target);
    CutAreaRight(target,aLen-pos);
  end;
  return;
end;

global
procedure GetTagContents(string tagName,var area target)
begin
  RemTagFromStart(tagName,false,target);
  RemTagFromEnd(tagName,false,target);
  return;
end;

// bit-safe base64 encoding // Can't use AreaBase64Encode for reasons that go beyond my knowledge -- so -- I'm cutting corners with this :D
global 
procedure BitSafeBase64EncodeAnArea(var area target) 
begin
  Area encoded,chunk,zero;
  LongInt aLen,i,j;
  LongInt tmp_long;
  Integer cc;
  string 8 fromArea;
  string 70 b64;
  array string 1 b64_arr;

  // for faster flow
  b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  aLen = len(b64);
  for(i=0;i<aLen;i=i+1) begin
    b64_arr[i] = Mid(b64,i,1);
  end;

  aLen = GetAreaLength(target);
  AddTextToArea(chr(0),zero);
  for(i=0;i<aLen;i=i+3) begin
    SetAreaZeroSize(chunk);
    GetAreaFromArea(target,i,3,chunk);
    InsertAreaBeforeArea(zero,chunk); // we want to treat this chunk as unsigned long
    tmp_long = GetLongFromArea(chunk,0);
    for(j=0;j<4;j=j+1) begin
      cc = Mod(tmp_long,64);
      tmp_long = (tmp_long-cc)/64;
      fromArea = b64_arr[cc] & fromArea;
    end;
    AddTextToArea(fromArea,encoded);
    fromArea = "";
  end;

  switch(Mod(aLen,3)) begin
    case 1: // 8 bit final
      fromArea = "==";
    case 2: // 16 bit final
      fromArea = "=";
  end;
  
  AddTextToArea(fromArea,encoded);
  SetAreaZeroSize(target);
  InsertAreaBeforeArea(encoded,target);
  return;
end;
