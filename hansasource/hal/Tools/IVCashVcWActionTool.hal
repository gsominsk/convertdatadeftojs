external function val CalculateDiscountPercentage(val,val,val);
external procedure CurValToOtherCurWithRate(Date,string,val,val,val,val,val,val,string,var val,roundmode);
external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external procedure FindUserMailboxName(string,var string,var string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external procedure GetPayDealText(string,string,var string);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure RowCalculateTaxMatrix_IVCashVc(var record IVCashVc,Integer,row IVCashVc);
forward function Boolean IVCashVc_PasteQuant(var record IVCashVc,Integer);
external procedure IVCashVc_ChangeQuantityRecepy(string,val,Integer,var record IVCashVc);
external function Boolean GetPD(var record PDVc);
external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure AddMultiBuyDiscountItems_IVCashVc(var record IVCashVc);
external procedure IVCashVc_PasteLoyaltyCardNr(var record IVCashVc);
external procedure WarnFutureDate(Boolean,Date);
external procedure GetLCPrices(val,string,var string,var string);
external function Boolean FindLastInvoiceRowForSerial(LongInt,string ,string,var row IVVc);
external procedure RemoveOldCustObjects(string,var string);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function Boolean PasteCustInCashInv(var record IVCashVc,string,string,var string);
external procedure ChangeIVCashSerialNr(Integer,var record IVCashVc);
external procedure IVCashGetRate(var record IVCashVc);
external function string 255 FindPositionWithSerialNr(string,string,string,string);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external function Boolean SerialNrForOneItem(string,var record SerBalVc);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external function Boolean CostPriceForGP(string,string,string,string,var val);
external function Integer CheckSerialStatus(string,string,var string);
external function Boolean GetFirstItem(var string,var record INVc);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure GetPDVRebt(string,var val);
external function string 255 FindINObjects(string,string);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external procedure Base1ToBase2(var val,Date,var val);
external function val FindVAT(string,val,Integer,Integer);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
remote function Boolean PasteCustInOR(var record ORVc);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external function Boolean ORDchrsum(var record ORVc,Integer);
external procedure ORSumup(var record ORVc);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function Boolean IVCashVc_ExplodeRecepy(record INVc,val,record RetVc,string,Integer);
external function Boolean QtyDepPriceL(string);
external function Boolean IVCashDchrsum(record IVCashVc,Integer,Integer);
external procedure IVCashMultiLineText(record IVCashVc,record INVc,string,Integer);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure IVCashVcGetCalcItemPrice(record INVc,record IVCashVc,Integer,var val);
external procedure IVCashDchsum(record IVCashVc,Integer);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
procedure CalculateIVCashVcPoints(var record IVCashVc IVCashr)
begin 
  record LoyaltyPointsVc LPr;
  row LoyaltyPointsVc LPrw;
  Integer li,lrwcnt;
  val t,sum;
  record LocLoyaltyPointsVc LLPr;
  row LocLoyaltyPointsVc LLPrw;
  Boolean found,testf,calculatedf;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  record INVc INr;
  roundmode rnd;
  record GCBlock GCb;

  BlockLoad(GCb);
  IVCashr.Points = blankval;
  if (nonblank(IVCashr.LoyaltyCardNr)) then begin
    rnd = DefaultValRoundoff;
    rnd.decimals = 0;
    rnd.mode = kRoundingModeTruncate;
    
    LLPr.Location = IVCashr.Location;
    LLPr.LCMLevel = IVCashr.LCMLevel;
    found = ReadFirstMain(LLPr,2,true);
    if (found==false) then begin
      LLPr.Location = IVCashr.Location;
      found = ReadFirstMain(LLPr,1,true);
    end;
    rwcnt = MatRowCnt(IVCashr);
    t = MulRateToBase1(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
    for (i=0;i<rwcnt;i=i+1) begin
     MatRowGet(IVCashr,i,IVCashrw);
      if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
        if (GCb.LoyaltyPointsUsageType==0 or GCb.LoyaltyPointsUsageType==3) then begin //None or GV Received only
          t = t - MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff); 
        end;
      end;
      if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
        if GCb.LoyaltyPointsUsageType==0 or GCb.LoyaltyPointsUsageType==2 then begin //None or GV Sold only
          t = t - MulRateToBase1(IVCashr.CurncyCode,IVCashrw.Sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff); 
        end;
      end;
    end;
    if (found) then begin
      if (LLPr.MinAmount>0) then begin
        if (t<LLPr.MinAmount) then begin
          goto LCalculateIVCashVcPoints;
        end;
      end;
      lrwcnt = MatRowCnt(LLPr);
      if (lrwcnt==0) then begin
        IVCashr.Points = (LLPr.Points/LLPr.Amount) * Round(t,rnd);
      end else begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
            sum = IVCashrw.Sum;
            if (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
              sum = -sum;
            end;
            calculatedf = false;
            for (li=0;li<lrwcnt;li=li+1) begin
              MatRowGet(LLPr,li,LLPrw);
              rnd = DefaultValRoundoff;
              rnd.decimals = LLPrw.RndTo;
              rnd.mode = kRoundingModeTruncate;
              testf = false;
              switch (LLPrw.CodeType) begin
                case 0:
                  if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin 
                    if (INr.Group==LLPrw.ITCode) then begin
                      testf = true;
                    end;  
                  end;
                case 1:
                  if (IVCashrw.ArtCode==LLPrw.ITCode) then begin
                    testf = true;
                  end;  
              end;
              if (testf) then begin
                t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                IVCashr.Points = IVCashr.Points + (LLPrw.Points/LLPrw.Amount) * Round(t,rnd);
                li = lrwcnt;
                calculatedf = true;
              end;
            end;
            if (calculatedf==false) then begin
              t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              IVCashr.Points = IVCashr.Points + (LLPr.Points/LLPr.Amount) * Round(t,rnd);
            end;
          end;
        end;
      end;
    end else begin
      LPr.LCMLevel = IVCashr.LCMLevel;
      found = ReadFirstMain(LPr,1,true);
      if (found==false) then begin
        LPr.LCMLevel = "";
        found = ReadFirstMain(LPr,1,true);
      end;
      if (found) then begin
        if (LPr.MinAmount>0) then begin
          if (t<LPr.MinAmount) then begin
            goto LCalculateIVCashVcPoints;
          end;
        end;
        lrwcnt = MatRowCnt(LPr);
        if (lrwcnt==0) then begin    
          IVCashr.Points = (LPr.Points/LPr.Amount) * Round(t,rnd);
        end else begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVCashr,i,IVCashrw);
            if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
              sum = IVCashrw.Sum;
              if (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
                sum = -sum;
              end;
              calculatedf = false;
              for (li=0;li<lrwcnt;li=li+1) begin
                MatRowGet(LPr,li,LPrw);
                rnd = DefaultValRoundoff;
                rnd.decimals = LLPrw.RndTo;
                rnd.mode = kRoundingModeTruncate;
                testf = false;
                switch (LPrw.CodeType) begin
                  case 0:
                    if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin 
                      if (INr.Group==LPrw.ITCode) then begin
                        testf = true;
                      end;  
                    end;
                  case 1:
                    if (IVCashrw.ArtCode==LPrw.ITCode) then begin
                      testf = true;
                    end;  
                end;
                if (testf) then begin
                  t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                  IVCashr.Points = IVCashr.Points + (LPrw.Points/LPrw.Amount) * Round(t,rnd);
                  calculatedf = true;
                  li = lrwcnt;
                end;
              end;
              if (calculatedf==false) then begin
                t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                IVCashr.Points = IVCashr.Points + (LPr.Points/LPr.Amount) * Round(t,rnd);
              end;
            end;
          end;        
        end;
      end;
    end;
  end;  
LCalculateIVCashVcPoints:;  
  return;
end;  

global
procedure IVCashDUpdatePrices(record IVCashVc IVCashp)
BEGIN
  row IVCashVc IVCashrw;
  record INVc INr;
  Integer i,rwcnt;
  Boolean calcprice,dummyf;
  string 255 tstr,tax2code,taxtemplatecode,salesacc,vatcode;
  val price,baseprice,tax2prc,vreb;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    if (nonblank(IVCashrw.ArtCode)) then begin
      price = IVCashrw.Price;
      vreb = blankval;
      baseprice = blankval;
      vatcode = "";
      salesacc = "";
      if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashp.CurncyCode,
        IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,
        IVCashp.LangCode,IVCashp.CustCat,IVCashp.PriceList,IVCashp.RebCode,
        price,tstr,vreb,IVCashrw.VATCode,baseprice,
        salesacc,0,calcprice,IVCashp.TransDate,IVCashp.TransTime,IVCashp.CustCode,true,dummyf,IVCashp.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin end;
      IVCashrw.Price = price;  
      IVCashrw.vRebate = vreb;
      IVCashrw.SalesAcc = salesacc;
      IVCashrw.BasePrice = baseprice;
      IVCashrw.ArtCode = INr.Code;
      IVCashrw.VATCode = vatcode;
      if (nonblank(IVCashp.CustVATCode)) then begin
        IVCashrw.VATCode = IVCashp.CustVATCode;
      end;
      MatRowPut(IVCashp,i,IVCashrw);
      if (IVCashDchrsum(IVCashp,i,GenOptRec.UseDiscount)) then begin
        IVCashDchsum(IVCashp,i);
      end;
    end;
  end;
  if (nonblank(IVCashp.LoyaltyCardNr)) then begin 
    CalculateIVCashVcPoints(IVCashp);
  end;
  RETURN;
END;

global
procedure IVCashVc_PastePriceList(var record IVCashVc IVCashp)
begin
  record PLDefVc PLDefR;
 
  PLDefR.Code = IVCashp.PriceList;
  if (ReadFirstMain(PLDefR,1,true)) then begin
    IVCashp.InclVAT = PLDefR.InclVAT;
  end;
  IVCashDUpdatePrices(IVCashp);
  return;
end;

global
procedure IVCashVc_PasteRebCode(var record IVCashVc IVCashp)
begin
  IVCashDUpdatePrices(IVCashp);
  return;
end;

global
function val CalculateIVCashCashAmount(record IVCashVc IVCashr)
begin
  val t;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  val cash,v;
  record BaseCurBlock bascur;
  Boolean bcurf;

  BlockLoad(bascur);
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if ((IVCashrw.stp==kInvoiceRowTypeGiftVoucherPayment) or (IVCashrw.stp==kInvoiceRowTypeCreditCardPayment) or (IVCashrw.stp==kInvoiceRowTypeChequePayment)) then begin
      cash = cash + IVCashrw.Sum;
    end;
    if ((IVCashrw.stp==kInvoiceRowTypeCashPayment) or (IVCashrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)) then begin 
      if (IVCashrw.CurncyCode!=IVCashr.CurncyCode) then begin  
        if (IVCashr.CurncyCode==bascur.BaseCur1) then begin
          cash = cash + MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (IVCashr.CurncyCode==bascur.BaseCur2) then begin
          cash = cash + MulRateToBase2(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (bcurf==false) then begin
          CurValToOtherCur(IVCashr.InvDate,IVCashrw.CurncyCode,IVCashrw.Sum,IVCashr.CurncyCode,v,DefaultCurRoundOff);
          cash = cash + v;
        end;
      end else begin
        cash = cash + IVCashrw.Sum;
      end;
    end;
  end; 
  CalculateIVCashCashAmount = cash; 
  return;
end;

global
procedure IVCash2Sumup(record IVCashVc IVCashp,record SMVc SMr,Integer vatcnt,var val s0,var val s1,var val s2,var val s3,var val s4,var val TotGP,var string roundofpaymode)
BEGIN
  Integer i,rwcnt;
  record INVc INr;
  row IVCashVc IVCashrw;
  val tax1sum,t,rowsum,tax1reb;
  string 255 cashpaymode,ccpaymode;

  s0 = blankval;
  s1 = blankval;
  s2 = blankval;
  s3 = blankval;
  s4 = blankval;
  IVCashp.TotQty = blankval;
  IVCashp.TotWeight = blankval;
  IVCashp.TotVolume = blankval;
  
  TotGP = 0;
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    rowsum = 0;
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeCashPayment:
        cashpaymode = IVCashrw.PayMode;
      case kInvoiceRowTypeLoyaltyPointsPayment:
        cashpaymode = IVCashrw.PayMode;
      case kInvoiceRowTypeCreditCardPayment:
        ccpaymode = IVCashrw.PayMode;
    end;
    if ((IVCashrw.stp==kInvoiceRowTypeGiftVoucherSold)) then begin
      switch (IVCashp.InclVAT) begin
        case 0:
          t = FindVAT(IVCashrw.VATCode,IVCashrw.Sum,1,0);
          s1 = IVCashrw.Sum + s1 - t;
          if (t==0) then begin
            s2 = IVCashrw.Sum + s2;
          end;  
          AddVATBase(SMr,IVCashrw.VATCode,IVCashrw.Sum - t,tax1reb,vatcnt,1,0);
//          FindTAX2(IVCashrw.TAX2Prc,IVCashrw.Sum,1);          
        otherwise
          s4 = IVCashrw.Sum + s4;
          t = FindVAT (IVCashrw.VATCode,IVCashrw.Sum,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
          s3 = s3 + t;
          AddVATBase(SMr,IVCashrw.VATCode,IVCashrw.Sum,tax1reb,vatcnt,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
          if (t==0) then begin
            s2 = IVCashrw.Sum + s2;
            s1 = IVCashrw.Sum + s1;
          end else begin
            s1 = IVCashrw.Sum + s1;
          end;
      end;
    end;
    if ((IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeMultiBuyDiscount) or (IVCashrw.stp==kInvoiceRowTypeOnAccountPayment)) and (IVCashrw.ovst==0) then begin
/*    
    if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
      if (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
        IVCashrw.Quant = -IVCashrw.Quant;
        IVCashrw.Sum = -IVCashrw.Sum;
      end;
*/      
      TotGP = TotGP + IVCashrw.rowGP;
      if (IVCashrw.DownPaidSum!=0) then begin
        rowsum = IVCashrw.DownPaidSum;
        t = IVCashrw.Quant-IVCashrw.OrdQuant;
        if (t>0) then begin
          rowsum = rowsum + t*IVCashrw.Price;
        end;        
        if (IVCashp.InclVAT==0) then begin
          rowsum = rowsum - FindVAT(IVCashrw.VATCode,rowsum,1,0);
        end;
      end else begin
        rowsum = IVCashrw.Sum;
      end;
      if (IVCashp.InclVAT==0) then begin/* 0-rndoff 1-sumexvat 2-sumnondtbl 3-vat 4-sumtopay */        
        s1 = rowsum + s1;
        t = FindVAT(IVCashrw.VATCode,rowsum,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
        if (t==0) then begin
          s2 = rowsum + s2;
        end;    
        s3 = t + s3;
        AddVATBase(SMr,IVCashrw.VATCode,rowsum,blankval,vatcnt,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
      end else begin/* 0-rndoff 1-sumvatdble(incl) 2-sumnondtbl 3-vat 4-sumtopay */
        s4 = rowsum + s4;
        t = FindVAT (IVCashrw.VATCode,rowsum,IVCashp.InclVAT,IVCashp.NoTAXonVAT);
        s3 = t + s3;
        AddVATBase(SMr,IVCashrw.VATCode,rowsum,blankval,vatcnt,IVCashp.InclVAT,IVCashp.NoTAXonVAT);        
        s1 = rowsum + s1;
        if (t==0) then begin
          s2 = rowsum + s2;
        end;  
      end;
      IVCashp.TotQty = IVCashp.TotQty + IVCashrw.Quant;
      INr.Code = IVCashrw.ArtCode;
      if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin 
        t = IVCashrw.Quant * INr.Volume;
        IVCashp.TotVolume = t + IVCashp.TotVolume;
        t = IVCashrw.Quant * INr.Weight;
        IVCashp.TotWeight = t + IVCashp.TotWeight;
      end;                    
    end;
  end;
  if (IVCashp.TotVolume==0) then begin IVCashp.TotVolume = blankval; end;
  if (IVCashp.TotWeight==0) then begin IVCashp.TotWeight = blankval; end;
  roundofpaymode = ccpaymode;
  if (blank(roundofpaymode)) then begin
    roundofpaymode = cashpaymode;
  end;
  RETURN;  
END;

global
procedure CalculatePOSCashBack(var record IVCashVc IVCashr)
BEGIN
  val t;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  record BaseCurBlock BCb;

  BlockLoad(BCb);
  IVCashr.TendValue = blankval;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.ovst==0) then begin
      switch (IVCashrw.stp) begin
        case kInvoiceRowTypeGiftVoucherPayment:
          goto LInvoiceRowTypeCashPayment;
        case kInvoiceRowTypeCashPayment:
          goto LInvoiceRowTypeCashPayment;
        case kInvoiceRowTypeLoyaltyPointsPayment:
          goto LInvoiceRowTypeCashPayment;
        case kInvoiceRowTypeChequePayment:
          goto LInvoiceRowTypeCashPayment;
        case kInvoiceRowTypeCreditCardPayment:
          goto LInvoiceRowTypeCashPayment;
        case kInvoiceRowTypeCashPayment:
LInvoiceRowTypeCashPayment:;
          if (IVCashr.CurncyCode==IVCashrw.CurncyCode) and (IVCashr.CurncyCode!=BCb.BaseCur1) and (nonblank(IVCashr.CurncyCode)) then begin
            CurValToOtherCurWithRate(IVCashr.InvDate,IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,
                                     IVCashr.CurncyCode,t,DefaultCurRoundOff);    
          end else begin
            t = MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
          end;
          IVCashr.TendValue = IVCashr.TendValue + t;
      end;
    end;
  end;
  IVCashr.TendValue = IVCashr.TendValue + IVCashr.RecValue;
  IVCashr.TendValue = IVCashr.TendValue + IVCashr.RecValue2;
  IVCashr.TendValue = IVCashr.TendValue + IVCashr.CashValue;
  if (IVCashr.CurncyCode==IVCashrw.CurncyCode) and (IVCashr.CurncyCode!=BCb.BaseCur1) and (nonblank(IVCashr.CurncyCode)) then begin
    CurValToOtherCur(IVCashr.InvDate,IVCashr.POSCurncyCode,IVCashr.CashValueCur,IVCashr.CurncyCode,t,DefaultCurRoundOff);
  end else begin
    t = MulWithRateToBase1(IVCashr.POSCurncyCode,IVCashr.InvDate,IVCashr.CashValueCur,DefaultCurRoundOff);
  end;
  IVCashr.TendValue = IVCashr.TendValue + t;
  IVCashr.RetValue = IVCashr.TendValue - IVCashr.Sum4;
  IVCashr.RetValue = Round(IVCashr.RetValue,SetRoundModeD(2));//rndtotal

  t = MulRateToBase2(IVCashr.CurncyCode,IVCashr.RetValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
  IVCashr.RetValueB2 = t;
  t = MulRateToBase2(IVCashr.CurncyCode,IVCashr.CashValue,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
  IVCashr.CashValueB2 = t;

/*  
  if ((IVCashr.RecValue!=0) or (IVCashr.RecValue2!=0) or (IVCashr.CashValue!=0) or (IVCashr.CashValueCur!=0)) then begin
    t = IVCashr.RecValue + IVCashr.RecValue2 + IVCashr.CashValue + MulWithRateToBase1(IVCashr.POSCurncyCode,IVCashr.InvDate,IVCashr.CashValueCur,DefaultCurRoundOff);
    IVCashr.RetValue = t - IVCashr.Sum4; 
    Base1ToBase2(IVCashr.RetValue,IVCashr.InvDate,t); 
    IVCashr.RetValueB2 = t;
    Base1ToBase2(IVCashr.CashValue,IVCashr.InvDate,t); 
    IVCashr.CashValueB2 = t;
  end;
*/  
  RETURN;
END;

procedure IVCashSumup_TaxTemplate(var record IVCashVc IVCashp)
begin
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  record TaxMatrixVc TMr;
  record TaxMatrixVc sumTMr;
  roundmode roundlines,rndtotal,rndvat;
  val t;

  IVCashp.Sum1 = blankval; //Subtotal
  IVCashp.Sum3 = blankval; //VAT
  IVCashp.Sum4 = blankval; //Total
  IVCashp.TotGP = blankval;
  UnpackFieldMatrix(IVCashp,"TaxMatrix",sumTMr);
  RecordClear(sumTMr);
  rwcnt = MatRowCnt(IVCashp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashp,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeInterest:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeRetention:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeCorrection:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeMultiBuyDiscount:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeOnAccountPayment:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;      
        UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
        AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVCashp.InclVAT);
        IVCashp.Sum1 = IVCashp.Sum1 + IVCashrw.Sum;
        IVCashp.TotGP = IVCashp.TotGP + IVCashrw.rowGP;
      case kInvoiceRowTypeGiftVoucherSold:
        UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
        AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVCashp.InclVAT);
        switch (IVCashp.InclVAT) begin
          case kBasePriceNotInclVAT:
            IVCashp.Sum1 = IVCashp.Sum1 + IVCashrw.Sum;
            IVCashp.Sum1 = IVCashp.Sum1 - CalculateTotalVATFromTaxMatrix(TMr,IVCashp.InclVAT);
          case kBasePriceInclVAT:
            IVCashp.Sum1 = IVCashp.Sum1 + IVCashrw.Sum;
        end;
      case kInvoiceRowTypeDownpayment:
        UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
        AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVCashp.InclVAT);
        IVCashp.Sum1 = IVCashp.Sum1 + IVCashrw.Sum;      
      
//  kInvoiceRowTypePrepayment = 6,
//  kInvoiceRowTypeLoan = 7,
//  kInvoiceRowTypeLoanInterest = 8,

//  kInvoiceRowTypeGiftVoucherPayment = 14,
//  kInvoiceRowTypeCashPayment = 15,
//  kInvoiceRowTypeCreditCardPayment = 16,

//  kInvoiceRowTypePreviousDownpayment = 20,
//  kInvoiceRowTypeChequePayment = 21,

//  kInvoiceRowTypePerceptionTax = 22, //how to handle Perception Taxes ?
//  kInvoiceRowTypeWithholdingTax = 24  //how to handle Withholding Taxes ?
    end;
  end;
  IVCashp.Sum3 = CalculateTotalVATFromTaxMatrix(sumTMr,IVCashp.InclVAT);
  PackFieldMatrix(IVCashp,"TaxMatrix",sumTMr);
  GetCurncyRoundoff(IVCashp.CurncyCode,IVCashp.PayDeal,"IVCashVc",rndtotal,roundlines,rndvat);

/*Rounding should be tested carefully*/

  IVCashp.Sum3 = Round(IVCashp.Sum3,rndvat);
  IVCashp.Sum1 = Round(IVCashp.Sum1,rndtotal);
  switch (IVCashp.InclVAT) begin
    case kBasePriceNotInclVAT:
      IVCashp.Sum4 = IVCashp.Sum1 + IVCashp.Sum3;
    case kBasePriceInclVATandTAX:
      IVCashp.Sum4 = IVCashp.Sum1;
    case kBasePriceInclVAT:
      IVCashp.Sum4 = IVCashp.Sum1;
  end;  
  IVCashp.Sum3 = Round(IVCashp.Sum3,rndvat);
  IVCashp.Sum4 = Round(IVCashp.Sum4,rndtotal);
  IVCashp.BaseSum4 = MulRateToBase1(IVCashp.CurncyCode,IVCashp.Sum4,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
  IVCashp.TotGP = Round(IVCashp.TotGP,rndtotal);
  return;
end;

global
procedure IVCashSumup(var record IVCashVc IVCashp,Boolean roundof)
BEGIN
  record SMVc SMr;/*VATBaseRowType*/
  Integer vatcnt;
  val s0,s1,s2,s3,s4,TotGP;
  val tax1sum,t,discountval;
  roundmode roundlines,rndtotal,rndvat;
  string 255 tstr;
  record DefCashBlock DCr;
  string 255 roundofpaymode;
  
  if (UseTaxTemplatesforTaxCalc) then begin
    IVCashSumup_TaxTemplate(IVCashp);
    goto LIVCashSumup;
  end;
  BlockLoad(DCr); // Annoying...
  SetupVATBase(SMr,vatcnt);
  GetPDVRebt(IVCashp.PayDeal,discountval);
  IVCashp.RetValue = blankval;
  s0 = IVCashp.Sum0;
  s1 = IVCashp.Sum1;
  s2 = IVCashp.Sum2;
  s3 = IVCashp.Sum3;
  s4 = IVCashp.Sum4;
  IVCash2Sumup(IVCashp,SMr,vatcnt,s0,s1,s2,s3,s4,TotGP,roundofpaymode);  
  IVCashp.Sum0 = s0;
  IVCashp.Sum1 = s1;
  IVCashp.Sum2 = s2;
  IVCashp.Sum3 = s3;
  IVCashp.Sum4 = s4;
  IVCashp.TotGP = TotGP;  
  CalcVATBaseVAT(SMr,IVCashp.InclVAT,IVCashp.NoTAXonVAT,vatcnt,s3,tax1sum);
  if (blank(roundofpaymode)) then begin
    roundofpaymode = DCr.DefCashPayMode;
  end;
  GetCurncyRoundoff(IVCashp.CurncyCode,roundofpaymode,"IVCashVc",rndtotal,roundlines,rndvat);
  if (roundof) then begin
    s3 = Round(s3,rndvat);
  end else begin
    rndtotal = SetRoundModeD(2);
  end;
  if (IVCashp.InclVAT!=0) then begin
    s4 = tax1sum + s4;
    t = s4;
    s4 = Round(t,rndtotal);
    t = s4 - t;
    IVCashp.Sum0 = t + IVCashp.Sum0;
  end else begin
    s4 = s1 + s3;
    s4 = tax1sum + s4;
    t = s4;
    s4 = Round(t,rndtotal);
    t = s4 - t;
    IVCashp.Sum0 = t + IVCashp.Sum0;
  end;
  IVCashp.Sum0 = Round(IVCashp.Sum0,DefaultRoundMode);
  s1 = Round(s1,DefaultRoundMode);
  s2 = Round(s2,DefaultRoundMode);
  if (nonblank(IVCashp.CurncyCode)) then begin
    IVCashp.BaseSum4 = MulRateToBase1(IVCashp.CurncyCode,s4,IVCashp.FrRate,IVCashp.ToRateB1,IVCashp.ToRateB2,IVCashp.BaseRate1,IVCashp.BaseRate2,DefaultCurRoundOff);
  end;
/*  
  t = IVCashp.RecValue + IVCashp.RecValue2;
  t = t + IVCashp.CashValue;
  t = t + MulWithRateToBase1(IVCashp.POSCurncyCode,IVCashp.InvDate,IVCashp.CashValueCur,DefaultCurRoundOff);
  IVCashp.RetValue = t - IVCashp.Sum4;
  Base1ToBase2(IVCashp.RetValue,IVCashp.InvDate,t);
  IVCashp.RetValueB2 = t;
  Base1ToBase2(IVCashp.CashValue,IVCashp.InvDate,t);
  IVCashp.CashValueB2 = t;
*/
  IVCashp.Sum1 = s1;
  IVCashp.Sum2 = s2;
  IVCashp.Sum3 = s3;
  IVCashp.Sum4 = s4;  
  if ((HasLocalization("FIN")) and (blank(IVCashp.PayDeal)) and (blank(IVCashp.PayDeal2))) then begin//vatFinnish
    IVCashp.Sum4 = Round(IVCashp.Sum4,SetRoundModeD(10));
  end;
LIVCashSumup:;  
  CalculatePOSCashBack(IVCashp);  
  CalculateIVCashVcPoints(IVCashp);
  RETURN;
END;

global
function Boolean IVCashVc_PasteArtCode(var record IVCashVc IVCashr,Integer rownr,Boolean ReturnModef,var string warning,var Integer sernrf)
BEGIN
  Boolean res;
  row IVCashVc IVCashrw;
  record INVc INr;
  string 255 salesacc,vatcode,curitemname,tax2code,taxtemplatecode;
  val vreb,baseprice,price,t,tax2prc;
  Boolean calcpricef;
  Boolean chrsum,chsum;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  record TaxMatrixVc TMr;

  sernrf = 0;
  MatRowGet(IVCashr,rownr,IVCashrw);
  BlockLoad(GenOptRec);
  IVCashrw.Price = blankval;
  IVCashrw.vRebate = blankval;
  vatcode = IVCashrw.VATCode;
  if (GetFirstItem(IVCashrw.ArtCode,INr)) then begin
    IVCashrw.ArtCode = INr.Code;
  end;
  if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashr.CurncyCode,
                          IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                          IVCashr.LangCode,IVCashr.CustCat,IVCashr.PriceList,IVCashr.RebCode,
                          price,curitemname,vreb,vatcode,baseprice,salesacc,
                          0,calcpricef,IVCashr.TransDate,IVCashr.TransTime,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then 
  begin
    res = true;
    IVCashrw.TaxTemplateCode = FillupTaxMatrix(0,IVCashr.BranchID,IVCashr.CustCode,IVCashr.CustCat,IVCashr.DelAddrCode,taxtemplatecode,TMr);

    IVCashrw.Price     = price;
    IVCashrw.BasePrice = baseprice;
    IVCashrw.vRebate   = EvalToVal(vreb);
    IVCashrw.ArtCode   = INr.Code;
    IVCashrw.VATCode = vatcode;
    IVCashrw.SalesAcc = salesacc;
    IVCashrw.Spec = curitemname;
    MatRowPut(IVCashr,rownr,IVCashrw);      
    if (nonblank(INr.WarnText1)) then begin
      warning = INr.WarnText1;
    end;      
    if (calcpricef) then begin
      t = -1;
      IVCashVcGetCalcItemPrice(INr,IVCashr,rownr,t);
    end;    
    MatRowGet(IVCashr,rownr,IVCashrw);
    if (nonblank(IVCashr.CustVATCode)) then begin
      IVCashrw.VATCode = IVCashr.CustVATCode;
    end;
    if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      IVCashrw.Recepy = INr.Recepy;
    end else begin
      IVCashrw.Recepy = "";
    end;  
    if (GetItemNameStr(1,curitemname,IVCashr.LangCode,INr.Name,INr.Code)) then begin
    end;
    IVCashrw.Spec = curitemname;
//?    IVCashVcCheckItemPrice(IVCashr,IVCashrw,false);
    IVCashrw.UnitCode = INr.Unittext;
    IVCashrw.UnitXval = INr.Width;
    IVCashrw.UnitYval = INr.Height;
    IVCashrw.UnitZval = INr.Depth;
    IVCashrw.PriceFactor = INr.PriceFactor;
    IVCashrw.Coefficient = INr.UnitCoefficient;
    IVCashrw.Objects = FindINObjects(INr.Objects,INr.Group);
    PackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
    MatRowPut(IVCashr,rownr,IVCashrw);
    chrsum = true;
    if ((INr.ExplodeRec==1) and (nonblank(IVCashrw.Recepy))) then begin	
      IVCashMultiLineText(IVCashr,INr,IVCashr.LangCode,rownr);
    end;      
    if (nonblank(INr.InvRecepy)) then begin
//?            Do_InvoiceRecepy(IVCashr,&INr,row+1);??
      IVCashDUpdatePrices(IVCashr);
      chsum = true;
    end;       
    sernrf = INr.SerNrf;
    if (INr.SerNrf==2) and (INr.DonotRequireBatchNrOnIVCash!=0) then begin
      sernrf = 0;
    end;
    if (IVCashrw.Quant==0) then begin
      if (ReturnModef) then begin
        IVCashrw.Quant = -1;
      end else begin
        IVCashrw.Quant = 1;
      end;
      MatRowPut(IVCashr,rownr,IVCashrw);
      if (IVCashVc_PasteQuant(IVCashr,rownr)) then begin  
      end;  
    end;
  end;
  if (chrsum) then begin
    chsum = IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount);
  end;
  if (chsum) then begin
    IVCashDchsum(IVCashr,rownr);
    IVCashSumup(IVCashr,true);
  end;   
  AddMultiBuyDiscountItems_IVCashVc(IVCashr);
  IVCashVc_PasteArtCode = res;  
  RETURN;
END;

global
function Boolean IVCashVc_PasteQuant(var record IVCashVc IVCashr,Integer rownr)
BEGIN
  Boolean res;
  record INVc INr;
  string 255 salesacc,vatcode,curitemname,tax2code,taxtemplatecode;
  val vreb,baseprice,price,t,tax2prc;
  Boolean calcpricef;
  Boolean chrsum,chsum;
  record GeneralOptionBlock GenOptRec;
  row IVCashVc IVCashrw;
  Boolean dummyf;

  MatRowGet(IVCashr,rownr,IVCashrw);
  BlockLoad(GenOptRec);
  price = IVCashrw.Price;
//  vreb = IVCashrw.vRebate;  //??
  if (GetItemPriceDiscount3(IVCashrw.ArtCode,IVCashrw.Quant,INr,IVCashr.CurncyCode,
                            IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                            IVCashr.LangCode,IVCashr.CustCat,IVCashr.PriceList,IVCashr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            0,calcpricef,IVCashr.TransDate,IVCashr.TransTime,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then 
  begin
    res = true;
    if (baseprice<>0) then begin
      IVCashrw.BasePrice = baseprice;
    end;
    IVCashrw.vRebate = vreb;
    IVCashrw.ArtCode = INr.Code;
    IVCashrw.VATCode = vatcode;
    IVCashrw.SalesAcc = salesacc;
    IVCashrw.Spec = curitemname;
    IVCashrw.ArtCode = INr.Code;
    if (nonblank(IVCashr.PriceList)) then begin
      if (QtyDepPriceL(IVCashr.PriceList) == true) then begin
        IVCashrw.Price = price;
      end;  
    end;
    MatRowPut(IVCashr,rownr,IVCashrw);
    if (calcpricef) then begin
      t = -1;
      IVCashVcGetCalcItemPrice(INr,IVCashr,rownr,t);
    end;
    MatRowGet(IVCashr,rownr,IVCashrw);
    if (nonblank(IVCashr.CustVATCode)) then begin
      IVCashrw.VATCode = IVCashr.CustVATCode;
    end;
    if (INr.ExplodeRec==0) then begin
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        IVCashrw.Recepy = INr.Recepy;
      end else begin
        IVCashrw.Recepy = "";
      end;
    end;
    MatRowPut(IVCashr,rownr,IVCashrw);
    chrsum = true;
    if (INr.ExplodeRec!=0) then begin
      if (nonblank(IVCashrw.Recepy)) then begin
        if (IVCashVc_ExplodeRecepy(INr,IVCashrw.Quant,IVCashr,IVCashrw.Recepy,rownr)) then begin
          MatRowGet(IVCashr,rownr,IVCashrw);
          IVCashrw.Recepy = "";
          MatRowPut(IVCashr,rownr,IVCashrw);
        end;
      end else begin
        IVCashVc_ChangeQuantityRecepy(IVCashrw.ArtCode,IVCashrw.Quant,rownr,IVCashr);
      end;
    end;
  end;
  if (chrsum) then begin
    chsum = IVCashDchrsum(IVCashr,rownr,GenOptRec.UseDiscount);
  end;
  if (chsum) then begin
    IVCashDchsum(IVCashr,rownr);
    IVCashSumup(IVCashr,true);
  end;       
  AddMultiBuyDiscountItems_IVCashVc(IVCashr);
  IVCashVc_PasteQuant = res;  
  RETURN;
END;

global
updating function Boolean CreateLateDeliveryORFromIVCash(var record IVCashVc IVCashr,var record ORVc ORr)
BEGIN
  Boolean res;
  row ORVc ORrw;
  record IVCashVc oldIVCashr;
  row IVCashVc IVCashrw;
  Integer wn,nwn;
  Integer i,rwcnt,ori;
  val downpaid,t,s,downpaidsum;
  Boolean testf;
  Integer vatcnt;
  roundmode rndline,rndtotal,rndvat;
  record SMVc VATr;

  SetupVATBase(VATr,vatcnt);          
  RecordCopy(oldIVCashr,IVCashr);
  RecordNew(ORr);
  ORr.CustCode = IVCashr.CustCode;
  if (PasteCustInOR(ORr)) then begin end;
  ORr.PayDeal = IVCashr.PayDeal;
  ORr.CreditCard = IVCashr.CreditCard;
  ORr.AuthorizationCode = IVCashr.AuthorizationCode;
  ORr.Sum3 = IVCashr.Sum3;
  ORr.Sum1 = IVCashr.Sum1;
  ORr.Sum4 = IVCashr.Sum4;
  ORr.OrdDate = CurrentDate;
  ORr.OurContact = IVCashr.OurContact;
//    ORr.ClientContact = IVCashr.ClientContact;
  ORr.SalesMan = IVCashr.SalesMan;
  ORr.Location = IVCashr.Location;
  ORr.PriceList = IVCashr.PriceList;
  ORr.RebCode = IVCashr.RebCode;
  ORr.LangCode = IVCashr.LangCode;
  ORr.Comment = IVCashr.InvComment;
  ORr.TotQty = IVCashr.TotQty;
  ORr.TotWeight = IVCashr.TotWeight;
  ORr.TotVolume = IVCashr.TotVolume;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.OrdQuant!=0) then begin
      ClearRow(ORr,ORrw,1);
      ORrw.ArtCode = IVCashrw.ArtCode;
      ORrw.Quant = IVCashrw.OrdQuant;
      ORrw.Spec = IVCashrw.Spec;
      ORrw.SerialNr = IVCashrw.SerialNr;
      ORrw.Price = IVCashrw.Price;
      ORrw.vRebate = CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum);
      ORrw.Sum = IVCashrw.Sum;
      ORrw.VATCode = IVCashrw.VATCode;
      downpaidsum = IVCashrw.DownPaidSum;
      if (downpaidsum!=0) then begin
        if (IVCashr.InclVAT==0) then begin
          downpaidsum = downpaidsum - FindVAT(IVCashrw.VATCode,downpaidsum,1,0);
        end;
        downpaid = downpaid + downpaidsum;
        AddVATBase(VATr,ORrw.VATCode,downpaidsum,blankval,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);      
      end else begin
        downpaid = downpaid + IVCashrw.Sum;
        AddVATBase(VATr,ORrw.VATCode,IVCashrw.Sum,blankval,vatcnt,ORr.InclVAT,ORr.NoTAXonVAT);
      end;
      MatRowPut(ORr,ori,ORrw);
      testf = ORDchrsum(ORr,ori);
      IVCashrw.OrdRow = ori;
      MatRowPut(IVCashr,i,IVCashrw);
      ori = ori + 1;
    end;
  end;
  CalcVATBaseVAT(VATr,ORr.InclVAT,ORr.NoTAXonVAT,vatcnt,s,t);
  GetCurncyRoundoff(ORr.CurncyCode,ORr.PayDeal,"ORVc",rndtotal,rndline,rndvat);
  ORr.Sum3 = Round(s,rndvat);
  ORr.DownPaySent = downpaid;// + ORr.Sum3;
  ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,ORr.LangCode);
  if (ORr.SerNr!=-1) then begin
    ORSumup(ORr);
    if (RecordStore(ORr,false)) then begin
      IVCashr.OrderNr = ORr.SerNr;
      if (RecordUpdate(oldIVCashr,IVCashr,true)==0) then begin
        res = true;
      end;
    end;
  end;
  CreateLateDeliveryORFromIVCash = res;
  RETURN;
END;

function Boolean CheckBaseCurcy(string crncycode)
begin
  Boolean res;
  record BaseCurBlock bascur;
  
  res = true;
  BlockLoad(bascur);
  if (crncycode!=bascur.BaseCur1) then begin
    res = false;
  end;
  CheckBaseCurcy = res;
  return;
end;

global
function Boolean IVCashVc_PasteCustCode(var record IVCashVc IVCashr,string oldcustcode,string DefLocation,string DefPLCode,var Integer err,var string warning)
begin
  Boolean res;
  
  if ((oldcustcode!=IVCashr.CustCode) and (nonblank(oldcustcode))) then begin
    RemoveOldCustObjects(oldcustcode,IVCashr.Objects);
  end;
  if (PasteCustInCashInv(IVCashr,DefLocation,DefPLCode,warning)) then begin
    res = true;
    IVCashGetRate(IVCashr);
    if (ProgramType==typOffLine) then begin           
      if (CheckBaseCurcy(IVCashr.CurncyCode)==false) then begin
        IVCashr.CurncyCode = "";
        IVCashGetRate(IVCashr);
        res = 1978;
      end;
    end;            
    IVCashr.SalesMan = CurrentUser;
  end;
  IVCashVc_PasteCustCode = res;
  return;
end;

global
function Boolean CashPayTouchScreenRemote(record RcVc prevRepSpec,record RcVc RepSpec)
begin
  Boolean res;
  
  if (prevRepSpec.CurncyCode!=RepSpec.CurncyCode) then begin
    CurValToOtherCur(CurrentDate,prevRepSpec.CurncyCode,prevRepSpec.vals0,RepSpec.CurncyCode,RepSpec.vals0,DefaultCurRoundOff);
    res = true;
  end;
  CashPayTouchScreenRemote = res;
  return;
end;

global
function Boolean IVCashVc_PasteSerialNr(var record IVCashVc IVCashr,Integer rownr,Boolean TouchScreenLookf)
begin
  Boolean res;
  row IVCashVc IVCashrw,lastIVCashrw;
  val UnitXval,UnitYval,UnitZval,t;
  string 255 tstr,location;
  Boolean chsum;
  record SerBalVc SBr;
  string 255 inwarning;
  string 30 serial;
  record INVc INr;
  Integer sernrf;

  MatRowGet(IVCashr,rownr,IVCashrw);
  if (blank(IVCashrw.ArtCode)) then begin 
    if (SerialNrForOneItem(IVCashrw.SerialNr,SBr)) then begin
      if (nonblank(SBr.Item)) then begin 
        IVCashrw.ArtCode = SBr.Item;
        if (ReadFirstItem(SBr.Item,INr,false,false)) then begin
          if (INr.SerNrf==1) then begin
            IVCashrw.Quant = 1;
          end;
        end;
//        IVCashrw.Location = SBr.Location;
        serial = IVCashrw.SerialNr;
        IVCashrw.PosCode = FindPositionWithSerialNr(IVCashr.Location,IVCashrw.ArtCode,IVCashrw.SerialNr,"");
        MatRowPut(IVCashr,rownr,IVCashrw);
        if (IVCashVc_PasteArtCode(IVCashr,rownr,false,inwarning,sernrf)) then begin 
        end;
        MatRowGet(IVCashr,rownr,IVCashrw);
        IVCashrw.SerialNr = serial;
        MatRowPut(IVCashr,rownr,IVCashrw);
        res = true;        
      end;  
    end;
  end;
  if (blank(IVCashrw.ArtCode)) then begin 
    if (FindLastInvoiceRowForSerial(IVCashr.SerNr,IVCashr.CustCode,IVCashrw.SerialNr,lastIVCashrw)) then begin 
      if (nonblank(lastIVCashrw.ArtCode)) and (nonblank(IVCashrw.SerialNr)) and (IVCashrw.SerialNr==lastIVCashrw.SerialNr) then begin 
        CopyRow(IVCashr,lastIVCashrw,IVCashrw);
        IVCashrw.Quant = -1;
        MatRowPut(IVCashr,rownr,IVCashrw);
        chsum = IVCashDchrsum(IVCashr,rownr,0);
        IVCashSumup(IVCashr,true); 
        goto LIVCashVc_PasteSerialNr;
      end;  
    end;
  end;
  SerialNrDimensions(IVCashrw.ArtCode,IVCashrw.SerialNr,UnitXval,UnitYval,UnitZval);
  if (UnitXval!=0) then begin IVCashrw.UnitXval = UnitXval; end;
  if (UnitYval!=0) then begin IVCashrw.UnitYval = UnitYval; end;
  if (UnitZval!=0) then begin IVCashrw.UnitZval = UnitZval; end;
  t = IVCashrw.BasePrice;
  chsum = CostPriceForGP(IVCashrw.ArtCode,IVCashrw.SerialNr,IVCashr.PriceList,IVCashr.CustCode,t);
  IVCashrw.BasePrice = t;
  if (CheckSerialStatus(IVCashrw.ArtCode,IVCashrw.SerialNr,tstr)==1) then begin
    MessageBox(0,tstr);
  end;
//  location = IVCashrw.Location;
  if (blank(location)) then begin
    location = IVCashr.Location;
  end;
  IVCashrw.Quant = CalculateSerialNrQuantity(IVCashrw.ArtCode,IVCashrw.SerialNr,location,true,IVCashrw.UnitXval,IVCashrw.UnitYval,IVCashrw.UnitZval,IVCashrw.Quant);  
  MatRowPut(IVCashr,rownr,IVCashrw);
  if (chsum) then begin
    IVCashDchsum(IVCashr,rownr);
    IVCashSumup(IVCashr,true);
  end;
LIVCashVc_PasteSerialNr:;
  IVCashVc_PasteSerialNr = res;
  return;
end;

global
function Integer TouchScreenSplitItemRemote(string artcode,var record SplitINVc resSplitINr)
begin
  Integer res;
  Boolean found;
  Integer cnt;
  record SplitINVc SplitINr;

  SplitINr.FromArtCode = artcode;
  found = true;
  while (LoopMain(SplitINr,1,found)) begin
    if (SplitINr.FromArtCode!=artcode)  then begin found = false; end;
    if (cnt>1) then begin found = false; end;
    if (found) then begin
      cnt = cnt + 1;
      resSplitINr = SplitINr;
    end;
  end;
  res = cnt;
  TouchScreenSplitItemRemote = res;
  return;
end;

global
procedure IVCashVc_PasteLoyaltyCardNr(var record IVCashVc IVCashr)
begin 
  record LoyaltyCardVc LoyaltyCardr;
  record IVCashVc credIVCashr;
  string 255 warning;
  string 5 PLCode,RebCode;
  boolean pricechange;
  boolean testf;
  string 20 oldcust;
  record LocalMachineBlock lmr;
  integer err;

  BlockLoad(lmr);
  pricechange = false;
  LoyaltyCardr.SerNr = IVCashr.LoyaltyCardNr;
  if (ReadFirstMain(LoyaltyCardr,1,true)) then begin 
    testf = true;
    if (LoyaltyCardr.ExpiryDate<IVCashr.InvDate) and nonblank(LoyaltyCardr.ExpiryDate) then begin
      testf = false;
    end;
    if (LoyaltyCardr.StartDate>IVCashr.InvDate)   then begin
      testf = false;
    end;
    if (LoyaltyCardr.Closed!=0) then begin
      testf = false;
    end;
    if (testf) then begin 
      oldcust = IVCashr.CustCode;
      IVCashr.CustCode = LoyaltyCardr.CustCode;
      IVCashr.LCMLevel = LoyaltyCardr.LCMLevel;
      IVCashr.Points = 0;      
      if (IVCashr.CustCode<>oldcust) then begin 
        if (IVCashVc_PasteCustCode(IVCashr,oldcust,lmr.DefLocation,lmr.PLCode,err,warning)) then begin
          if (nonblank(warning)) then begin
            MessageBox(0,warning);
          end;
          if (err!=0) then begin
            MessageBox(0,err);
          end;
        end;
      end;
      IVCashr.LoyaltyCardNr = LoyaltyCardr.SerNr;
      IVCashr.LCMLevel = LoyaltyCardr.LCMLevel;
      IVCashr.Points = 0;      
      //if (LoyaltyCardr.PointsBalance<>0) then begin
        GetLCPrices(LoyaltyCardr.PointsBalance,LoyaltyCardr.LCMLevel,PLCode,RebCode);
        if (nonblank(PLCode) and (IVCashr.PriceList<>PLCode)) then begin 
          IVCashr.PriceList = PLCode;
          pricechange = true;
        end;
        if (nonblank(RebCode) and (IVCashr.RebCode<>RebCode)) then begin 
          IVCashr.RebCode = RebCode;
          pricechange = true;
        end;
        if (MatRowCnt(IVCashr)>0) then begin 
         IVCashDUpdatePrices(IVCashr);
         IVCashSumup(IVCashr,true);
        end;  
      //end;  
    end else begin
      IVCashr.LCMLevel = "";
      IVCashr.Points = 0;
      MessageBox(26434,"");
    end;
  end else begin 
    IVCashr.LCMLevel = "";
    IVCashr.Points = 0;
  end;
  return;
end;
 
global
procedure PasteIVCashInvDate(integer wn,var record IVCashVc IVCashr)
begin 
  WarnFutureDate(true,IVCashr.InvDate);
  IVCashr.PayDate = AddDay(IVCashr.InvDate,IVCashr.pdays);
  IVCashGetRate(IVCashr);
  if (nonblank(IVCashr.LoyaltyCardNr)) then begin
    IVCashVc_PasteLoyaltyCardNr(IVCashr);
  end;
  GetPriceList(IVCashr.CustCat,IVCashr.TransDate,IVCashr.TransTime,IVCashr.PriceList,IVCashr.InclVAT);
  return;
end;  

global
function Boolean PriceLookupVClassIVCashVc_PasteArtCode(var record RcVc RepSpec,record IVCashVc IVCashr)
begin
  Boolean res;
  record INVc INr;
  record SerBalVc SBr;
  string 255 salesacc,vatcode,curitemname,tax2code,taxtemplatecode;
  val vreb,baseprice,price,t,tax2prc;
  Boolean calcpricef,dummyf;
  
  RepSpec.vals0 = blankval;
  if (GetFirstItem(RepSpec.f1,INr)) then begin
    if (GetItemPriceDiscount3(RepSpec.f1,1.00,INr,IVCashr.CurncyCode,
                            IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                            IVCashr.LangCode,IVCashr.CustCat,IVCashr.PriceList,IVCashr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            0,calcpricef,IVCashr.TransDate,IVCashr.TransTime,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then
    begin
      RepSpec.vals0 = price;
      res = true;
    end;
  end else begin
    if (SerialNrForOneItem(RepSpec.f1,SBr)) then begin
      if (nonblank(SBr.Item)) then begin 
        if (GetItemPriceDiscount3(RepSpec.f1,1.00,INr,IVCashr.CurncyCode,
                                IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,
                                IVCashr.LangCode,IVCashr.CustCat,IVCashr.PriceList,IVCashr.RebCode,
                                price,curitemname,vreb,vatcode,baseprice,salesacc,
                                0,calcpricef,IVCashr.TransDate,IVCashr.TransTime,IVCashr.CustCode,true,dummyf,IVCashr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then
        begin
          RepSpec.vals0 = price;
          res = true;
        end;
      end;
    end;    
  end;
  PriceLookupVClassIVCashVc_PasteArtCode = res;
  return;
end;  

global
function Boolean PriceLookupVClassRestAccVc_PasteArtCode(var record RcVc RepSpec,record RestAccVc RestAccr)
begin
  Boolean res;
  record INVc INr;
  record SerBalVc SBr;
  string 255 salesacc,vatcode,curitemname,tax2code,taxtemplatecode;
  val vreb,baseprice,price,t,tax2prc;
  Boolean calcpricef,dummyf;
  Time blankt;
  
  RepSpec.vals0 = blankval;
  if (GetFirstItem(RepSpec.f1,INr)) then begin
    if (GetItemPriceDiscount3(RepSpec.f1,1.00,INr,"",
                            blankval,blankval,blankval,blankval,blankval,
                            "","","","",
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            0,calcpricef,RestAccr.TransDate,blankt,RestAccr.CustCode,true,dummyf,RestAccr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then
    begin
      RepSpec.vals0 = price;
      res = true;
    end;
  end else begin
    if (SerialNrForOneItem(RepSpec.f1,SBr)) then begin
      if (nonblank(SBr.Item)) then begin 
        if (GetItemPriceDiscount3(RepSpec.f1,1.00,INr,"",
                                blankval,blankval,blankval,blankval,blankval,
                                "","","","",
                                price,curitemname,vreb,vatcode,baseprice,salesacc,
                                0,calcpricef,RestAccr.TransDate,blankt,RestAccr.CustCode,true,dummyf,RestAccr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then
        begin
          RepSpec.vals0 = price;
          res = true;
        end;
      end;
    end;    
  end;
  PriceLookupVClassRestAccVc_PasteArtCode = res;
  return;
end;  

global
function Integer CalculateLoyaltyPointsPayment_IVCashVc(record IVCashVc IVCashr,val maxpointstouse,var val PointsBalance,var val totusedpoints,var val totsumb1)
begin
  Integer err;
  row IVCashVc IVCashrw;
  record LoyPointsRedeemVc LPRr;
  row LoyPointsRedeemVc LPRrw;
  Integer i,rwcnt;
  Integer li,lrwcnt;
  record LocLoyPointsRedeemVc LLPRr;
  row LocLoyPointsRedeemVc LLPRrw;
  row LocLoyPointsRedeemVc foundLLPRrw;
  Boolean found,testf,calculatedf;
  val usedpoints,maxpayment,sum,t;
  record BaseCurBlock BCb;
  record INVc INr;
  record LoyaltyCardVc LCr;
  roundmode rnd;

  err = 0;
  LCr.SerNr = IVCashr.LoyaltyCardNr;
  if (ReadFirstMain(LCr,1,true)==false) then begin
    err = 26434;
    goto LCalculateLoyaltyPointsPayment_IVCashVc;
  end;
  if (LCr.Closed!=0) then begin
    err = 26434;
    goto LCalculateLoyaltyPointsPayment_IVCashVc;
  end;
  rwcnt = MatRowCnt(IVCashr);

  PointsBalance = LCr.PointsBalance;
  if (blank(maxpointstouse)==false) then begin
    if (maxpointstouse<PointsBalance) then begin
       PointsBalance = maxpointstouse;
    end;
  end;
  rnd = DefaultValRoundoff;
  rnd.decimals = 0;
  rnd.step = kRoundingStepNone;
  rnd.mode = kRoundingModeHalfUp;

  LLPRr.Location = IVCashr.Location;
  LLPRr.LCMLevel = IVCashr.LCMLevel;
  found = ReadFirstMain(LLPRr,2,true);
  if (found==false) then begin
    LLPRr.Location = IVCashr.Location;
    found = ReadFirstMain(LLPRr,1,true);
  end;

  if (found) then begin
    lrwcnt = MatRowCnt(LLPRr);
    if (lrwcnt==0) then begin
      totsumb1 = MulRateToBase1(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
      maxpayment = PointsBalance/LLPRr.Points;
      maxpayment = maxpayment*LLPRr.Amount;
      if (totsumb1>maxpayment) then begin
        totsumb1 = maxpayment;
        totusedpoints = PointsBalance;
      end else begin
        totusedpoints = Round(((PointsBalance*totsumb1)/maxpayment)+0.49999,rnd);
      end;
    end else begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashr,i,IVCashrw);
        calculatedf = false;
        if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
          sum = IVCashrw.Sum;
          if (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
            sum = -sum;
          end;
          for (li=0;li<lrwcnt;li=li+1) begin
            MatRowGet(LLPRr,li,LLPRrw);
            testf = false;
            switch (LLPRrw.CodeType) begin
              case 0:
                if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin 
                  if (INr.Group==LLPRrw.ITCode) then begin
                    testf = true;
                  end;  
                end;
              case 1:
                if (IVCashrw.ArtCode==LLPRrw.ITCode) then begin
                  testf = true;
                end;  
            end;
            if (testf) then begin
              t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              usedpoints = PointsBalance - totusedpoints;
              maxpayment = usedpoints/LLPRrw.Points;
              maxpayment = maxpayment*LLPRrw.Amount;
              if (t>maxpayment) then begin
                t = maxpayment;
              end;
              totsumb1 = totsumb1 + t;
              if (t<=maxpayment) then begin
                usedpoints = Round(((usedpoints*totsumb1)/maxpayment)+0.49999,rnd);
              end;
              totsumb1 = totsumb1 + t;
              totusedpoints = totusedpoints + usedpoints;
              calculatedf = true;
              li = lrwcnt;
            end;
          end;
          if (calculatedf==false) then begin
            t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
            usedpoints = PointsBalance - totusedpoints;
            maxpayment = usedpoints/LLPRr.Points;
            maxpayment = maxpayment*LLPRr.Amount;
            if (t>maxpayment) then begin
              t = maxpayment;
            end;
            totsumb1 = totsumb1 + t;
            if (t<=maxpayment) then begin
              usedpoints = Round(((usedpoints*totsumb1)/maxpayment)+0.49999,rnd);
            end;
            totsumb1 = totsumb1 + t;
            totusedpoints = totusedpoints + usedpoints;
          end;
        end;
      end;
    end;
  end else begin
    LPRr.LCMLevel = IVCashr.LCMLevel;
    found = ReadFirstMain(LPRr,2,true);
    if (found==false) then begin
      LPRr.LCMLevel = "";
      found = ReadFirstMain(LPRr,1,true);
    end;
    if (found) then begin
      lrwcnt = MatRowCnt(LPRr);
      if (lrwcnt==0) then begin
        totsumb1 = MulRateToBase1(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
        maxpayment = PointsBalance/LPRr.Points;
        maxpayment = maxpayment*LPRr.Amount;
        if (totsumb1>maxpayment) then begin
          totsumb1 = maxpayment;
          totusedpoints = PointsBalance;
        end else begin
          totusedpoints = Round(((PointsBalance*totsumb1)/maxpayment)+0.49999,rnd);
        end;
      end else begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
            sum = IVCashrw.Sum;
            if (IVCashrw.stp==kInvoiceRowTypeVoid) then begin
              sum = -sum;
            end;
            calculatedf = false;
            for (li=0;li<lrwcnt;li=li+1) begin
              MatRowGet(LPRr,li,LPRrw);
              testf = false;
              switch (LPRrw.CodeType) begin
                case 0:
                  if (ReadFirstItem(IVCashrw.ArtCode,INr,true,true)) then begin 
                    if (INr.Group==LPRrw.ITCode) then begin
                      testf = true;
                    end;  
                  end;
                case 1:
                  if (IVCashrw.ArtCode==LPRrw.ITCode) then begin
                    testf = true;
                  end;  
              end;
              if (testf) then begin
                t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
                usedpoints = PointsBalance - totusedpoints;
                maxpayment = usedpoints/LPRrw.Points;
                maxpayment = maxpayment*LPRrw.Amount;
                if (t>maxpayment) then begin
                  t = maxpayment;
                end;
                totsumb1 = totsumb1 + t;
                if (t<=maxpayment) then begin
                  usedpoints = Round(((usedpoints*totsumb1)/maxpayment)+0.49999,rnd);
                end;
                totsumb1 = totsumb1 + t;
                totusedpoints = totusedpoints + usedpoints;
                calculatedf = true;
                li = lrwcnt;
              end;
            end;
            if (calculatedf==false) then begin
              t = MulRateToBase1(IVCashr.CurncyCode,sum,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
              usedpoints = PointsBalance - totusedpoints;
              maxpayment = usedpoints/LPRr.Points;
              maxpayment = maxpayment*LPRr.Amount;
              if (t>maxpayment) then begin
                t = maxpayment;
              end;
              totsumb1 = totsumb1 + t;
              if (t<=maxpayment) then begin
                usedpoints = Round(((usedpoints*totsumb1)/maxpayment)+0.49999,rnd);
              end;
              totsumb1 = totsumb1 + t;
              totusedpoints = totusedpoints + usedpoints;
            end;
          end;
        end;
      end;
    end;
  end;
LCalculateLoyaltyPointsPayment_IVCashVc:;  
  CalculateLoyaltyPointsPayment_IVCashVc = err;
  return;
end;

global
procedure LoyaltyPointsPayment_IVCashVc(var record IVCashVc IVCashr,val maxpointstouse,string paymode)
begin
  Boolean found;
  val totsumb1,totusedpoints;
  record BaseCurBlock BCb;
  row IVCashVc IVCashrw;
  val PointsBalance;

  if (IVCashr.OKFlag==0) and nonblank(IVCashr.LoyaltyCardNr) then begin
      found = CalculateLoyaltyPointsPayment_IVCashVc(IVCashr,maxpointstouse,PointsBalance,totusedpoints,totsumb1)==0;

      if (found) then begin
        BlockLoad(BCb);
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeLoyaltyPointsPayment);        
        IVCashrw.Points = totusedpoints;
        IVCashrw.Sum = totsumb1;
        IVCashrw.CurncyCode = IVCashr.CurncyCode;
        GetFullCurncyRate(IVCashrw.CurncyCode,IVCashr.TransDate,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2);
        CurValToOtherCur(IVCashr.TransDate,BCb.BaseCur1,IVCashrw.Sum,IVCashrw.CurncyCode,IVCashrw.Sum,DefaultCurRoundOff);
        IVCashrw.PayMode = paymode;        
        IVCashrw.Spec = UsetStr(24182);
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
      end;
  end;
  return;
end;  

global
function Integer CustomerSalesPaymentTermType(string custcode)
begin
  Integer res;
  record CUVc CUr;
  record PDVc PDr;
  
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    PDr.Code = CUr.PayDeal;
    if (GetPD(PDr)) then begin
      res = PDr.PDType;
    end;
  end;
  CustomerSalesPaymentTermType = res;
  return;
end;  

global
function Integer IVCashVc_PasteGiftCertificate(var record IVCashVc IVCashr,Integer rownr,Integer stp)
begin
  Integer res;
  record GCVc GCr;
  record GCSVc GCSr;
  record INVc INr;
  row IVCashVc IVCashrw;
  record GCBlock GCRec;
  record DefCashBlock DefCashRec;
  string 20 vatcode,salesacc;
  row PMBlock PMrw;
  Boolean found;
  
  res = 1;
  MatRowGet(IVCashr,rownr,IVCashrw);  
  switch (stp) begin
    case kInvoiceRowTypeGiftVoucherSold://selling
      GCr.SerNr = IVCashrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin found = true; end;
      if (found==false) then begin
        GCr.BarCode = IVCashrw.GCNr;
        GCr.SerNr = -1;
        if (ReadFirstKey("BarCode",GCr,1,true)) then begin found = true; end;
      end;
      if (GCr.ExpiryDate<CurrentDate) then begin 
        found = false; 
        res = 2185;
      end;
      if (found) then begin
        IVCashrw.GCNr = GCr.SerNr;
        IVCashrw.Sum = GCr.Amount;
        BlockLoad(DefCashRec);
        IVCashrw.Spec = GCr.Comment;
        if (blank(IVCashrw.PayMode)) then begin
          IVCashrw.PayMode = DefCashRec.DefGCSPayMode;
        end;
        IVCashrw.VATCode = DefCashRec.DefGCSVATCode;          
        if (GetPMRow(IVCashrw.PayMode,PMrw)) then begin end;
        IVCashrw.SalesAcc = PMrw.AccNr;
        MatRowPut(IVCashr,rownr,IVCashrw);  
        IVCashSumup(IVCashr,true);
        res = 0;
      end;
    case kInvoiceRowTypeGiftVoucherPayment://receiving
      GCSr.SerNr = IVCashrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin found = true; end;
      if (found==false) then begin
        GCSr.BarCode = IVCashrw.GCNr;
        GCSr.SerNr = -1;
        if (ReadFirstKey("BarCode",GCSr,1,true)) then begin found = true; end;
      end;
      if (found) then begin
        IVCashrw.GCNr = GCSr.SerNr;
        IVCashrw.Sum = GCSr.Balance;
        if (IVCashrw.Sum>IVCashr.Sum4) then begin
          IVCashrw.Sum = IVCashr.Sum4;
        end;
        BlockLoad(DefCashRec);
        IVCashrw.PayMode = DefCashRec.DefGCRPayMode;
        IVCashrw.VATCode = DefCashRec.DefGCRVATCode;          
        IVCashrw.Spec = GCSr.Comment;
        if (GetPMRow(IVCashrw.PayMode,PMrw)) then begin end;
        IVCashrw.SalesAcc = PMrw.AccNr;
        MatRowPut(IVCashr,rownr,IVCashrw);  
        IVCashSumup(IVCashr,true);
        res = 0;
      end;   
  end;
LIVCashVc_PasteGiftCertificate:;  
  IVCashVc_PasteGiftCertificate = res;
  return;
end;

global
function Integer SCDiscountCardExecuteRemote(var record IVCashVc IVCashr,record RcVc RepSpec)
begin
  Integer res;
  record CashierDefBlock CDb;
  Integer i,rwcnt;
  Integer sernrf;
  string 255 inwarning;
  row IVCashVc IVCashrw;

  BlockLoad(CDb);
  if (blank(CDb.DiscountItem)) then begin
    res = 24190;
    MessageBox(24190,"");
    goto LSCDiscountCardExecuteRemote;
  end;
  IVCashr.Addr0 = RepSpec.f1;
  IVCashr.DiscountCardNr = RepSpec.f2;
  IVCashr.DiscountFwdBal = RepSpec.vals0;
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    if (IVCashrw.ArtCode==CDb.DiscountItem) then begin
      MatRowDelete(IVCashr,i);
      i = i - 1;
      rwcnt = MatRowCnt(IVCashr);
    end;
  end;
  rwcnt = MatRowCnt(IVCashr);
  ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeNormal);    
  IVCashrw.ArtCode = CDb.DiscountItem;
  MatRowPut(IVCashr,rwcnt,IVCashrw);
  if (IVCashVc_PasteArtCode(IVCashr,rwcnt,false,inwarning,sernrf)) then begin
    IVCashrw.Quant = 1.00;
    MatRowPut(IVCashr,rwcnt,IVCashrw);
    if (IVCashVc_PasteQuant(IVCashr,rwcnt)) then begin    
    end;
  end;
LSCDiscountCardExecuteRemote:;      
  SCDiscountCardExecuteRemote = res;
  return;
end;

procedure FindAlreadyReturnedItems_IVCashVc(LongInt OrgIVNr,var vector val valreadyreturned)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Boolean found,testf;
  string 255 keystr;
  Integer i,rwcnt;
  
  found = true;
  keystr = "OrgIVNr:" & OrgIVNr;
  while (LoopKey(keystr,IVCashr,1,found)) begin
    if (found) then begin
      testf = true;
      if (IVCashr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeNormal:
              valreadyreturned[IVCashrw.ArtCode] = valreadyreturned[IVCashrw.ArtCode] - IVCashrw.Quant;
            case kInvoiceRowTypeStructuredItemComponent:
              valreadyreturned[IVCashrw.ArtCode] = valreadyreturned[IVCashrw.ArtCode] - IVCashrw.Quant;
          end;
        end;
      end;
    end;
  end;
  return;
end;  

global
procedure IVCashDClassTouchScreenReturnRemote(record IVCashVc IVCashr,var record IVCashVc newIVCashr)
begin
  Integer i,rwcnt,rownr;
  row IVCashVc newIVCashrw;
  vector val valreadyreturned;
  record GeneralOptionBlock GOb;
  val retv;

  BlockLoad(GOb);
  FindAlreadyReturnedItems_IVCashVc(IVCashr.SerNr,valreadyreturned);
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,newIVCashrw);
    switch (newIVCashrw.stp) begin
      case kInvoiceRowTypeCreditCardPayment:
        if (blank(newIVCashrw.AuthorizationCode)) then begin
          newIVCashrw.Sum = -(newIVCashrw.Sum-retv);
          newIVCashrw.AuthorizationCode = "";
          newIVCashrw.CreditCard = "";
          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
        end;
      case kInvoiceRowTypeCashPayment:
//          newIVCashrw.Sum = -newIVCashrw.Sum;
//          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
      case kInvoiceRowTypeLoyaltyPointsPayment:
//          newIVCashrw.Sum = -newIVCashrw.Sum;
//          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
      case kInvoiceRowTypeGiftVoucherPayment:
//          newIVCashrw.Sum = -newIVCashrw.Sum;
//          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
      case kInvoiceRowTypeMultiBuyDiscount:
          rownr = MatRowCnt(newIVCashr);
          newIVCashrw.Quant = -newIVCashrw.Quant;
          newIVCashrw.Sum = -newIVCashrw.Sum;
          MatRowPut(newIVCashr,rownr,newIVCashrw);
//          IVCashDchrsum(IVCashr,rownr,GOb.UseDiscount);
//          IVCashDchsum(IVCashr,rownr);
      otherwise
        if (valreadyreturned[newIVCashrw.ArtCode]<newIVCashrw.Quant) then begin
          newIVCashrw.Quant = -newIVCashrw.Quant;
          newIVCashrw.Sum = -newIVCashrw.Sum;
          newIVCashrw.rowGP = -newIVCashrw.rowGP;
          rownr = MatRowCnt(newIVCashr);
          RowCalculateTaxMatrix_IVCashVc(newIVCashr,rownr,newIVCashrw);
          MatRowPut(newIVCashr,rownr,newIVCashrw);
        end else begin
          valreadyreturned[newIVCashrw.ArtCode] = valreadyreturned[newIVCashrw.ArtCode] - newIVCashrw.Quant;
          retv = newIVCashrw.Sum;
        end;
    end;      
  end;
  if (MatRowCnt(newIVCashr)>0) then begin
    if (IVCashr.SerNr!=newIVCashr.SerNr) then begin
      ClearRow(newIVCashr,newIVCashrw,kInvoiceRowTypeReturnIVNr);    
      newIVCashrw.OrgIVNr = IVCashr.SerNr;
      MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
    end;
  end;
  IVCashSumup(newIVCashr,true);

  return;
end;  

global
procedure IVCashDClassTouchScreenCreditNoteRemote(record IVCashVc IVCashr,var record IVCashVc newIVCashr)
begin
  Integer i,rwcnt,rownr;
  row IVCashVc newIVCashrw;
  vector val valreadyreturned;
  record GeneralOptionBlock GOb;
  val retv;

  BlockLoad(GOb);
  FindAlreadyReturnedItems_IVCashVc(IVCashr.SerNr,valreadyreturned);
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,newIVCashrw);
    switch (newIVCashrw.stp) begin
      case kInvoiceRowTypeCreditCardPayment:
        if (blank(newIVCashrw.AuthorizationCode)) then begin
          newIVCashrw.Sum = (newIVCashrw.Sum-retv);
          newIVCashrw.AuthorizationCode = "";
          newIVCashrw.CreditCard = "";
          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
        end;
      case kInvoiceRowTypeCashPayment:
          newIVCashrw.Sum = IVCashr.Sum4;
          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
      case kInvoiceRowTypeLoyaltyPointsPayment:
//          newIVCashrw.Sum = newIVCashrw.Sum;
//          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
      case kInvoiceRowTypeGiftVoucherPayment:
//          newIVCashrw.Sum = newIVCashrw.Sum;
//          MatRowPut(newIVCashr,MatRowCnt(newIVCashr),newIVCashrw);
      case kInvoiceRowTypeMultiBuyDiscount:
          rownr = MatRowCnt(newIVCashr);
          newIVCashrw.Quant = newIVCashrw.Quant;
          newIVCashrw.Sum = newIVCashrw.Sum;
          MatRowPut(newIVCashr,rownr,newIVCashrw);
//          IVCashDchrsum(IVCashr,rownr,GOb.UseDiscount);
//          IVCashDchsum(IVCashr,rownr);
      otherwise
        if (valreadyreturned[newIVCashrw.ArtCode]<newIVCashrw.Quant) then begin
          newIVCashrw.Quant = newIVCashrw.Quant;
          newIVCashrw.Sum = newIVCashrw.Sum;
          newIVCashrw.rowGP = newIVCashrw.rowGP;
          rownr = MatRowCnt(newIVCashr);
          RowCalculateTaxMatrix_IVCashVc(newIVCashr,rownr,newIVCashrw);
          MatRowPut(newIVCashr,rownr,newIVCashrw);
        end else begin
          valreadyreturned[newIVCashrw.ArtCode] = valreadyreturned[newIVCashrw.ArtCode] - newIVCashrw.Quant;
          retv = newIVCashrw.Sum;
        end;
    end;      
  end;
  if (MatRowCnt(newIVCashr)>0) then begin
    if (IVCashr.SerNr!=newIVCashr.SerNr) then begin
      ClearRow(newIVCashr,newIVCashrw,kInvoiceRowTypeReturnIVNr);    
      newIVCashrw.OrgIVNr = IVCashr.SerNr;
      MatRowInsert(newIVCashr,0,newIVCashrw);
    end else begin
      ClearRow(newIVCashr,newIVCashrw,kInvoiceRowTypeReturnIVNr);    
      newIVCashrw.OrgIVNr = "";
      MatRowInsert(newIVCashr,0,newIVCashrw);
    end;
  end;

  return;
end;  

global
updating procedure ProceedEnterRefStrDClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  CloseWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "IVVc":
      GetWindowRecord(mwn,IVr);
      IVr.RefStr = RepSpec.f1;
      PutWindowRecord(mwn,IVr);
    case "IVCashVc":
      GetWindowRecord(mwn,IVCashr);
      IVCashr.RefStr = RepSpec.f1;
      PutWindowRecord(mwn,IVCashr);
    case "RestAccVc":
      GetWindowRecord(mwn,RestAccr);
      RestAccr.RefStr = RepSpec.f1;
      PutWindowRecord(mwn,RestAccr);
  end;
  WindowDoOK(mwn,0); 
  return;
end;

global
updating function Integer CreateExternalMailFromIVCashD(record IVCashVc IVCashr,var string warning,Boolean additemstobodyf,string pdfform)
begin
  Integer res;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  string 255 tstr;
  string 1 TAB;
  record IVMailBlock IVMailr;
  record MailSettingsBlock MSb;
  string 255 docname,fname;

  string 255 emailaddr;
  string 255 subject;
  area body;
  
  res = 0;
  if (ReadFirstMain(IVCashr,0,true)) then begin end;  
  BlockLoad(IVMailr);
  TAB = chr(9);
  CUr.Code = IVCashr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  emailaddr = CUr.eMail;
  if (nonblank(IVCashr.ClientContact)) then begin
    if (FindCustomerRelation(CUr.Code,IVCashr.ClientContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        emailaddr = ContactCUr.eMail;
      end;
    end;
  end;
  LogText(0,"emailaddr: " & emailaddr);
  if (blank(emailaddr)) then begin
    res = 2289;
    warning = CUr.Code;
    goto LCreateExternalMailFromIVCashD;
  end;
  if (nonblank(IVMailr.Header)) then begin
    subject = IVMailr.Header & " ";
  end;
  subject = subject & USetStr(1803) & " ";
  subject = subject & IVCashr.SerNr;
  LogText(0,"subject: " & subject);

  LTxtr.Code = IVMailr.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      AddTextToArea(tstr,body);
      AddTextToArea(chr(13) & chr(10),body);
    end;
  end;
  if (additemstobodyf) then begin
    rwcnt = MatRowCnt(IVCashr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      if (IVCashrw.stp==10) then begin 
        goto LIVHIDDENLine;
      end;
      tstr = IVCashrw.ArtCode & TAB;
      tstr = tstr & ValToString(IVCashrw.Quant,M4UVal,"",".",0) & TAB;
      tstr = tstr & Left(IVCashrw.Spec,60) & TAB;
      tstr = tstr & IVCashrw.Price & TAB;
      if (nonblank(IVCashrw.vRebate)) then begin
        tstr = tstr & "-" & ValToString(CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum),M4UVal,"",".",0) & "%" &  TAB;
      end;
      tstr = tstr & IVCashrw.Sum & TAB;
        AddTextToArea(tstr,body);
        AddTextToArea(chr(13) & chr(10),body);        
    end;
  end;
LIVHIDDENLine:;  
  tstr = TAB & TAB & TAB & "=====";
  AddTextToArea(tstr,body);
  AddTextToArea(chr(13) & chr(10),body);
  tstr = TAB & TAB & TAB & USetStr(2685) & TAB & IVCashr.Sum1;
  AddTextToArea(tstr,body);
  AddTextToArea(chr(13) & chr(10),body);
  tstr = TAB & TAB & TAB & USetStr(2686) & TAB & IVCashr.Sum3;
  AddTextToArea(tstr,body);
  AddTextToArea(chr(13) & chr(10),body);
  tstr = TAB & TAB & TAB & USetStr(2687) & TAB & IVCashr.Sum4;
  AddTextToArea(tstr,body);
  AddTextToArea(chr(13) & chr(10),body);
  GetPayDealText(IVCashr.PayDeal,IVCashr.LangCode,tstr);
  tstr = USetStr(3060) & " " & tstr;
  AddTextToArea(tstr,body);
  AddTextToArea(chr(13) & chr(10),body);
  LTxtr.Code = IVMailr.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      AddTextToArea(tstr,body);
      AddTextToArea(chr(13) & chr(10),body);
    end;    
  end;

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "InvCashForm";
  end;
  fname = "tmp/" & USetStr(1803) & " " & IVCashr.SerNr & ".pdf";
  LogText(0,"fname: " & fname);
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(IVCashr,docname,false);
  SetDocumentFilename("");
  SendExtEmailWithAttach(emailaddr,fname,subject,body);
//  Delete_File(fname);
LCreateExternalMailFromIVCashD:;  
  CreateExternalMailFromIVCashD = res;
  return;
end;

global
updating function Integer CreateMailFromIVCashD(record IVCashVc IVCashr,var record MailVc Mailr,var string warning,Boolean additemstobodyf,string pdfform)
begin
  Integer res;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;
  row IVCashVc IVCashrw;
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  record IVMailBlock IVMailr;
  record MailSettingsBlock MSb;
  string 255 docname,fname;
  string 20 custemail;
  record IVCashVc oldIVCashr;
  row MailTextVc MTrw;
  Integer IgnoreRecordDetails;
  
  res = 0;
  if (ReadFirstMain(IVCashr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    BlockLoad(MSb);
    tstr = MSb.FromSystem;
  end;
  if (blank(tstr)) then begin
    res = 2289;
    warning = CurrentUser;
    goto LCreateMailFromIVCashD;
  end;  
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  BlockLoad(IVMailr);
  CUr.Code = IVCashr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  custemail = CUr.eMail;
  if (nonblank(IVCashr.ClientContact)) then begin
    if (FindCustomerRelation(CUr.Code,IVCashr.ClientContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        MArw.AddrCode = ContactCUr.eMail;
        custemail = ContactCUr.eMail;
      end;
    end;
  end;
  if (AddEMailRecipients(Mailr,CUr.Code,custemail,kMailPOSInvoice)==false) then begin 
    res = 2289;
    warning = CUr.Code;
    goto LCreateMailFromIVCashD;
  end;
  if (nonblank(IVMailr.Header)) then begin
    Mailr.Header = IVMailr.Header & " ";
  end;

  MailTextRow("IVCashVc","",IVCashr.LangCode,MTrw,IgnoreRecordDetails);
  Mailr.Header = MTrw.Header;
  if (blank(Mailr.Header)) then begin
    Mailr.Header = Mailr.Header & USetStr(1803);
  end;
  Mailr.Header = Mailr.Header & " ";
  Mailr.Header = Mailr.Header & IVCashr.SerNr;

  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin 
    CreateRecordLink(Mailr,CurrentCompany,IVCashr,CurrentCompany);  
    CreateRecordLink(IVCashr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);

  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  if (additemstobodyf or IgnoreRecordDetails==0) then begin
    rwcnt = MatRowCnt(IVCashr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      if (IVCashrw.stp==10) then begin 
        goto LIVHIDDENLine;
      end;
      tstr = IVCashrw.ArtCode & TAB;
      tstr = tstr & ValToString(IVCashrw.Quant,M4UVal,"",".",0) & TAB;
      tstr = tstr & Left(IVCashrw.Spec,60) & TAB;
      tstr = tstr & IVCashrw.Price & TAB;
      if (nonblank(IVCashrw.vRebate)) then begin
        tstr = tstr & "-" & ValToString(CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum),M4UVal,"",".",0) & "%" &  TAB;
      end;
      tstr = tstr & IVCashrw.Sum & TAB;
      if (Mailr.HtmlFlag==0) then begin
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end else begin
        LineTextPutToHtmlRecord(Mailr,tstr,false,true);
      end;
    end;
LIVHIDDENLine:;  
    tstr = TAB & TAB & TAB & "=====";
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    tstr = TAB & TAB & TAB & USetStr(2685) & TAB & IVCashr.Sum1;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    tstr = TAB & TAB & TAB & USetStr(2686) & TAB & IVCashr.Sum3;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    tstr = TAB & TAB & TAB & USetStr(2687) & TAB & IVCashr.Sum4;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    GetPayDealText(IVCashr.PayDeal,IVCashr.LangCode,tstr);
    tstr = USetStr(3060) & " " & tstr;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
  end;
  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "InvCashForm";
  end;
  fname = "tmp/" & USetStr(1803) & " " & IVCashr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(IVCashr,docname,false);
  if (FileExists(fname)) then begin
    if (RecordLinkFile(fname,0,Mailr,CurrentCompany)) then begin
      RecordCopy(oldIVCashr,IVCashr);
      IVCashr.Prntdf = 1;
      RecordUpdate(oldIVCashr,IVCashr,false);
    end;
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromIVCashD:;  
  CreateMailFromIVCashD = res;
  return;
end;

global 
procedure QTPasteNPTSSClassRemote(string qtnr,var record IVCashVc IVCashr)
begin
  record QTVc QTr;
  row QTVc QTrw;
  row IVCashVc IVCashrw;
  record CUVc CUr;
  Integer i,rwcnt,rownr;
  Boolean testf;
  string 255 tstr;
  record LoyaltyCardVc LCr;

  QTr.SerNr = StringToLongInt(qtnr);
  if (ReadFirstMain(QTr,1,true)) then begin
    CUr.Code = IVCashr.CustCode;
    ReadFirstMain(CUr,1,true);
    IVCashr.CustCode = QTr.CustCode;
    IVCashr.Addr0 = QTr.Addr0;
    IVCashr.Addr1 = QTr.Addr1;
    IVCashr.Addr2 = QTr.Addr2;
    IVCashr.Addr3 = QTr.Addr3;
    IVCashr.CustCat = QTr.CustCat;
    IVCashr.InclVAT = QTr.InclVAT;
    IVCashr.OurContact = QTr.OurContact;
    IVCashr.ClientContact = QTr.CustContact;
    IVCashr.RefStr = QTr.RefStr;
    IVCashr.SalesMan = QTr.SalesMan;
    IVCashr.PayDeal = QTr.PayDeal;
    IVCashr.Sum0 = QTr.Sum0;
    IVCashr.Sum1 = QTr.Sum1;
    IVCashr.Sum2 = QTr.Sum2;
    IVCashr.Sum3 = QTr.Sum3;
    IVCashr.Sum4 = QTr.Sum4;
    IVCashr.VATNr = QTr.VATNr;
    IVCashr.BaseSum4 = QTr.BaseSum4;
    IVCashr.FrRate = QTr.FrRate;
    IVCashr.ToRateB1 = QTr.ToRateB1;
    IVCashr.ToRateB2 = QTr.ToRateB2;
    IVCashr.BaseRate1 = QTr.BaseRate1;
    IVCashr.BaseRate2 = QTr.BaseRate2;
    IVCashr.CurncyCode = QTr.CurncyCode;
    IVCashr.LangCode = QTr.LangCode;
//    IVCashr.CustOrdNr = QTr.CustOrdNr;
    IVCashr.PriceList = QTr.PriceList;
    IVCashr.CustVATCode = QTr.CustVATCode;
    IVCashr.RebCode = QTr.RebCode;
//    IVCashr.CreditCard = QTr.CreditCard;
//    IVCashr.AuthorizationCode = QTr.AuthorizationCode;
    IVCashr.InvComment = QTr.Comment;
//    IVCashr.pdays = QTr.pdays;
//    IVCashr.pdvrebt = QTr.pdvrebt;
//    IVCashr.pdrdays = QTr.pdrdays;
    IVCashr.TotGP = QTr.TotGP;
    IVCashr.Objects = QTr.Objects;
//    IVCashr.Location = QTr.Location;
//    IVCashr.ARAcc = QTr.ARAcc;
    IVCashr.TotQty = QTr.TotQty;
    IVCashr.TotWeight = QTr.TotWeight;
    IVCashr.TotVolume = QTr.TotVolume;
    IVCashr.InvAddr3 = QTr.InvAddr3;
    IVCashr.InvAddr4 = QTr.InvAddr4;
    IVCashr.DelAddrCode = QTr.DelAddrCode;
    IVCashr.TAX1Sum = QTr.TAX1Sum;
    IVCashr.Region = QTr.TAX1Sum;
    IVCashr.TAX2Sum = QTr.TAX1Sum;
    IVCashr.pdvrebt2 = QTr.TAX1Sum;
    IVCashr.pdrdays2 = QTr.TAX1Sum;
    IVCashr.NoTAXonVAT = QTr.TAX1Sum;
    IVCashr.TotalwoTAX = QTr.TAX1Sum;
    LCr.CustCode = QTr.CustCode;
    if (ReadFirstKey("ActCustCode",LCr,1,true)) then begin
      IVCashr.LoyaltyCardNr = LCr.SerNr;
      IVCashVc_PasteLoyaltyCardNr(IVCashr);
    end;
    IVCashr.CustTaxTemplateCode = QTr.CustTaxTemplateCode;
//    IVCashr.TaxMatrix,M4PackedMatrix,0,TaxMatrixVc);
    IVCashr.RegNr1 = CUr.RegNr1;
    IVCashr.RegNr2 = CUr.RegNr2;

    rownr = MatRowCnt(IVCashr);

    rwcnt = MatRowCnt(QTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QTrw);
      ClearRow(IVCashr,IVCashrw,QTrw.stp);
      IVCashrw.ArtCode = QTrw.ArtCode;
      IVCashrw.Quant = QTrw.Quant;

      IVCashrw.Price = QTrw.Price;
      IVCashrw.Sum = QTrw.Sum;
      IVCashrw.vRebate = QTrw.vRebate;
      IVCashrw.SalesAcc = QTrw.SalesAcc;
      IVCashrw.Objects = QTrw.Objects;
      IVCashrw.BasePrice = QTrw.BasePrice;
      IVCashrw.rowGP = QTrw.rowGP;
      IVCashrw.Spec = QTrw.Spec;
      IVCashrw.VATCode = QTrw.VATCode;
      IVCashrw.Recepy = QTrw.Recepy;
      IVCashrw.SerialNr = QTrw.SerialNr;
      IVCashrw.PriceFactor = QTrw.PriceFactor;
//      IVCashrw.Coefficient = QTrw.Coefficient;
      IVCashrw.UnitCode = QTrw.UnitCode;
      IVCashrw.UnitFactQuant = QTrw.UnitFactQuant;
      IVCashrw.UnitFactPrice = QTrw.UnitFactPrice;
      IVCashrw.UnitXval = QTrw.UnitXval;
      IVCashrw.UnitYval = QTrw.UnitYval;
      IVCashrw.UnitZval = QTrw.UnitZval;
      IVCashrw.OrdQuant = QTrw.Quant;
      IVCashrw.TAX2Code = QTrw.TAX2Code;
      IVCashrw.TAX2Prc = QTrw.TAX2Prc;
      IVCashrw.TAX2Reb = QTrw.TAX2Reb;
      IVCashrw.TAX1Reb = QTrw.TAX1Reb;
      IVCashrw.TAX2Acc = QTrw.TAX2Acc;
//      IVCashrw.MBRCode = QTrw.MBRCode;
//      IVCashrw.Points = QTrw.Points;   
      IVCashrw.TaxTemplateCode = QTrw.TaxTemplateCode;
//  ArrayField(TaxMatrix,M4PackedMatrix,0,TaxMatrixVc);

      IVCashrw.MotherArtCode = QTrw.MotherArtCode;
      IVCashrw.RecipeQuant = QTrw.RecipeQuant;
      IVCashrw.CustArtCode = QTrw.CustArtCode;
      IVCashrw.Salesmen = QTrw.Salesmen;

      MatRowPut(IVCashr,rownr,IVCashrw);

      rownr = rownr + 1;
    end;
    IVCashSumup(IVCashr,true);
  end;
  return;
end;


global 
procedure ORPasteNPTSSClassRemote(string ornr,var record IVCashVc IVCashr)
begin
  record ORVc ORr;
  row ORVc ORrw;
  row IVCashVc IVCashrw;
  record CUVc CUr;
  Integer i,rwcnt,rownr;
  Boolean testf;
  string 255 tstr;
  record LoyaltyCardVc LCr;
  val q;

  ORr.SerNr = StringToLongInt(ornr);
  if (ReadFirstMain(ORr,1,true)) then begin
    CUr.Code = IVCashr.CustCode;
    ReadFirstMain(CUr,1,true);
    IVCashr.CustCode = ORr.CustCode;
    IVCashr.Addr0 = ORr.Addr0;
    IVCashr.Addr1 = ORr.Addr1;
    IVCashr.Addr2 = ORr.Addr2;
    IVCashr.Addr3 = ORr.Addr3;
    IVCashr.CustCat = ORr.CustCat;
    IVCashr.InclVAT = ORr.InclVAT;
    IVCashr.OurContact = ORr.OurContact;
    IVCashr.ClientContact = ORr.CustContact;
    IVCashr.SalesMan = ORr.SalesMan;
    IVCashr.PayDeal = ORr.PayDeal;
    IVCashr.Sum0 = ORr.Sum0;
    IVCashr.Sum1 = ORr.Sum1;
    IVCashr.Sum2 = ORr.Sum2;
    IVCashr.Sum3 = ORr.Sum3;
    IVCashr.Sum4 = ORr.Sum4;
    IVCashr.VATNr = ORr.VATNr;
    IVCashr.BaseSum4 = ORr.BaseSum4;
    IVCashr.FrRate = ORr.FrRate;
    IVCashr.ToRateB1 = ORr.ToRateB1;
    IVCashr.ToRateB2 = ORr.ToRateB2;
    IVCashr.BaseRate1 = ORr.BaseRate1;
    IVCashr.BaseRate2 = ORr.BaseRate2;
    IVCashr.CurncyCode = ORr.CurncyCode;
    IVCashr.LangCode = ORr.LangCode;
    IVCashr.OrderNr = ORr.SerNr;
    IVCashr.CustOrdNr = ORr.CustOrdNr;
    IVCashr.PriceList = ORr.PriceList;
    IVCashr.CustVATCode = ORr.CustVATCode;
    IVCashr.RebCode = ORr.RebCode;
//    IVCashr.CreditCard = ORr.CreditCard;
//    IVCashr.AuthorizationCode = ORr.AuthorizationCode;
    IVCashr.RefStr = ORr.RefStr;
    IVCashr.InvComment = ORr.Comment;
//    IVCashr.pdays = ORr.pdays;
//    IVCashr.pdvrebt = ORr.pdvrebt;
//    IVCashr.pdrdays = ORr.pdrdays;
    IVCashr.TotGP = ORr.TotGP;
    IVCashr.Objects = ORr.Objects;
//    IVCashr.ARAcc = ORr.ARAcc;
    IVCashr.TotQty = ORr.TotQty;
    IVCashr.TotWeight = ORr.TotWeight;
    IVCashr.TotVolume = ORr.TotVolume;
    IVCashr.InvAddr3 = ORr.InvAddr3;
    IVCashr.InvAddr4 = ORr.InvAddr4;
    IVCashr.DelAddrCode = ORr.DelAddrCode;
    IVCashr.TAX1Sum = ORr.TAX1Sum;
    IVCashr.Region = ORr.TAX1Sum;
    IVCashr.TAX2Sum = ORr.TAX1Sum;
    IVCashr.pdvrebt2 = ORr.TAX1Sum;
    IVCashr.pdrdays2 = ORr.TAX1Sum;
    IVCashr.NoTAXonVAT = ORr.TAX1Sum;
    IVCashr.TotalwoTAX = ORr.TAX1Sum;
    LCr.CustCode = ORr.CustCode;
    if (ReadFirstKey("ActCustCode",LCr,1,true)) then begin
      IVCashr.LoyaltyCardNr = LCr.SerNr;
      IVCashVc_PasteLoyaltyCardNr(IVCashr);
    end;
    IVCashr.CustTaxTemplateCode = ORr.CustTaxTemplateCode;
//    IVCashr.TaxMatrix,M4PackedMatrix,0,TaxMatrixVc);
    IVCashr.RegNr1 = CUr.RegNr1;
    IVCashr.RegNr2 = CUr.RegNr2;

    rownr = MatRowCnt(IVCashr);

    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      q = ORrw.Quant - ORrw.Shipd2;
      if (q>0) then begin
        ClearRow(IVCashr,IVCashrw,ORrw.stp);
        IVCashrw.ArtCode = ORrw.ArtCode;
        IVCashrw.Quant = q;

        IVCashrw.Price = ORrw.Price;
        IVCashrw.Sum = ORrw.Sum;
        IVCashrw.vRebate = ORrw.vRebate;
        IVCashrw.SalesAcc = ORrw.SalesAcc;
        IVCashrw.Objects = ORrw.Objects;
        IVCashrw.BasePrice = ORrw.BasePrice;
        IVCashrw.rowGP = ORrw.rowGP;
        IVCashrw.Spec = ORrw.Spec;
        IVCashrw.VATCode = ORrw.VATCode;
        IVCashrw.Recepy = ORrw.Recepy;
        IVCashrw.SerialNr = ORrw.SerialNr;
        IVCashrw.PriceFactor = ORrw.PriceFactor;
    //      IVCashrw.Coefficient = ORrw.Coefficient;
        IVCashrw.UnitCode = ORrw.UnitCode;
        IVCashrw.UnitFactQuant = ORrw.UnitFactQuant;
        IVCashrw.UnitFactPrice = ORrw.UnitFactPrice;
        IVCashrw.UnitXval = ORrw.UnitXval;
        IVCashrw.UnitYval = ORrw.UnitYval;
        IVCashrw.UnitZval = ORrw.UnitZval;
        IVCashrw.OrdQuant = ORrw.Quant;
        IVCashrw.TAX2Code = ORrw.TAX2Code;
        IVCashrw.TAX2Prc = ORrw.TAX2Prc;
        IVCashrw.TAX2Reb = ORrw.TAX2Reb;
        IVCashrw.TAX1Reb = ORrw.TAX1Reb;
        IVCashrw.TAX2Acc = ORrw.TAX2Acc;
        IVCashrw.OrdRow = i;
    //      IVCashrw.MBRCode = ORrw.MBRCode;
    //      IVCashrw.Points = ORrw.Points;   
        IVCashrw.TaxTemplateCode = ORrw.TaxTemplateCode;
    //  ArrayField(TaxMatrix,M4PackedMatrix,0,TaxMatrixVc);

        IVCashrw.MotherArtCode = ORrw.MotherArtCode;
        IVCashrw.RecipeQuant = ORrw.RecipeQuant;
        IVCashrw.CustArtCode = ORrw.CustArtCode;
        IVCashrw.Salesmen = ORrw.Salesmen;

        MatRowPut(IVCashr,rownr,IVCashrw);

        rownr = rownr + 1;
      end;
    end;
    IVCashSumup(IVCashr,true);
  end;
  return;
end;