external updating procedure AddPersColMn(record RcVc);
external procedure IVDUpdatePrices(var record IVVc,Boolean);
external procedure IVVc_PasteCurncyCode(var record IVVc,string,Integer,Boolean,Boolean);
external procedure FindUserMailboxName(string,var string,var string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Time TimeDiff(Time,Time);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external procedure SetActTypeValues(record ActVc);
external function LongInt DateDiff(Date,Date);
external procedure IVVc_PastePriceList(var record IVVc);
external procedure IVVc_PastePrice(var record IVVc,record IVVc,Integer,var string);
external function Boolean IVVc_PasteQuantity(var record IVVc,Integer);
external procedure IVSumup(var record IVVc,Boolean);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external function Boolean PasteCustInInv(var record IVVc);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure ContactSClassOnOpen(Integer,string,var Array string,var Integer);
external function Boolean FindResourceItem(String,String,LongInt,var String,var String,Date,var val,var string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

global
function val GetCoursePrice(var record CourseEventVc CourseEventr, boolean with_discount)
begin
  val res;  
  record INVc INr;
  record PLVc PLr;
  record CUVc CUr;
  row CourseEventVc CourseEventrw;
  boolean found_price_list;
  val price;

  // Price in header
  INr.Code = CourseEventr.ItemCode;
  if (ReadFirstMain(INr,1,true)) then begin
    // search for price without specific customer
    found_price_list = false;
    if (nonblank(CourseEventr.PriceList)) then begin
      PLr.PLCode = CourseEventr.PriceList;
      PLr.ArtCode = CourseEventr.ItemCode;
      PLr.CustCode = "";
      if(ReadFirstMain(PLr,3,true)) then begin
        found_price_list = true;
      end;
    end;
    if (found_price_list) then begin
      price = PLr.ExVatPrice;
    end else begin
      price = INr.UPrice1;
      if (nonblank(CourseEventr.PriceList)) then begin
        price = blankval;
      end;
    end;
  end else begin
    price = blankval;
  end;
  if (with_discount) then begin
    if (CourseEventr.Discount <> blankval) then begin
      price = price * (100 - CourseEventr.Discount) / 100;
    end;
  end;
  GetCoursePrice = price;
  return;
end;

global
function val GetCourseEventRowPrice(var record CourseEventVc CourseEventr, integer rownr, boolean with_discount)
begin
  record CUVc CUr;
  record INVc INr;
  record PLVc PLr;
  row CourseEventVc CourseEventrw;  
  string 20 item_code,price_list;
  string 100 curitemname;  
  string 20 salesacc,vatcode,taxtemplatecode;  
  val price,reb,cost,discount;
  Boolean calcprice,dummyf;    
  string 255 tax2code;
  val tax2prc;
  Time blankt;
  
  MatRowGet(CourseEventr,rownr,CourseEventrw);
  price = CourseEventrw.Price;
  if (price>0) then begin
    goto LGetCourseEventRowPrice;
  end;
  CUr.Code = CourseEventrw.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  item_code = CourseEventrw.ItemCode;
  if (blank(item_code)) then begin
    item_code = CourseEventr.ItemCode;
  end;
  price_list = CourseEventrw.PriceListRow;
  if (blank(price_list)) then begin
    price_list = CourseEventr.PriceList;
  end;
  discount = CourseEventrw.Discount;
  if (blank(discount)) then begin
    discount = CourseEventr.Discount;
  end;
  INr.Code = item_code;
  if (ReadFirstMain(INr,1,true)) then begin
    price = INr.UPrice1;
  end;
  if (GetItemPriceDiscount3(item_code,1,INr,CUr.CurncyCode,0,0,0,0,0,
        CUr.LangCode,CUr.CustCat,price_list,CUr.RebCode,
        price,curitemname,discount,vatcode,cost,salesacc,
        CUr.ExportFlag,calcprice,CurrentDate,blankt,CUr.Code,true,dummyf,CUr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin      
  end else begin
    if (price == 0) then begin
      price = CourseEventr.Price;
    end;
  end;
LGetCourseEventRowPrice:;  
  GetCourseEventRowPrice = price;
  return;
end;

global
procedure CourseEvent_SumUp(var record CourseEventVc CourseEventr)
begin
  row CourseEventVc CourseEventrw;
  integer i,rwcnt,count;
  val sum;
  
  rwcnt = MatRowCnt(CourseEventr);
  for(i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    if (nonblank(CourseEventrw.ContactName)) then begin
      if (CourseEventrw.Price!=0) then begin
        sum = sum + CourseEventrw.Price;
      end else begin
        sum = sum + CourseEventr.Price;
      end;
      if (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) or (CourseEventrw.Status==kCourseEventPaticipantStatusNotPaying) then begin
        count = count + 1;
      end;
    end;
  end;
  CourseEventr.NoOfPersons = count;
  CourseEventr.Sum = sum;
  return;
end;

global
procedure CourseEventVc_UpdatePrice(var record CourseEventVc CourseEventr)
begin  
  CourseEvent_SumUp(CourseEventr);
  return;
end;

global
procedure CourseEvent_PasteCourseCode(var record CourseEventVc CourseEventr)
begin
  record CourseVc Courser; 

  Courser.Code = CourseEventr.CourseCode;
  if (ReadFirstMain(Courser,1,true)) then begin
    CourseEventr.CourseName = Courser.Name;
    CourseEventr.Type = Courser.Type;
    CourseEventr.ItemCode = Courser.ItemCode;
//      CourseEventr.LangCode = Courser.LangCode;
    CourseEventr.ActType = Courser.ActType;
  end else begin
    CourseEventr.CourseName = "";
    CourseEventr.Type = "";
    CourseEventr.ItemCode = "";
    CourseEventr.ActType = "";
  end;  
  CourseEventr.Price = GetCoursePrice(CourseEventr,true);
  CourseEventVc_UpdatePrice(CourseEventr);        
  return;
end;

global
procedure CourseEvent_PasteItemCode(var record CourseEventVc CourseEventr,Integer rownr)
begin
  record INVc INr;
  row CourseEventVc CourseEventrw;

  if (rownr>=0) then begin
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    CourseEventrw.Price = GetCourseEventRowPrice(CourseEventr,rownr,true);
    if (CourseEventrw.Price==0) then begin
      CourseEventrw.Price = GetCoursePrice(CourseEventr,true);
    end;
    MatRowPut(CourseEventr,rownr,CourseEventrw);
  end else begin
    CourseEventr.Price = GetCoursePrice(CourseEventr,true);
  end;
  CourseEventVc_UpdatePrice(CourseEventr);    
  return;
end;

global
procedure CourseEvent_PastePriceListRow(var record CourseEventVc CourseEventr,Integer rownr)
begin
  row CourseEventVc CourseEventrw;

  if (rownr>=0) then begin
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    CourseEventrw.Price = GetCourseEventRowPrice(CourseEventr,rownr,true);
    MatRowPut(CourseEventr,rownr,CourseEventrw);
    CourseEventVc_UpdatePrice(CourseEventr);    
  end;
  return;
end;

global
procedure CourseEvent_PastePriceList(var record CourseEventVc CourseEventr)
begin
  CourseEventr.Price = GetCoursePrice(CourseEventr,true);
  return;
end;

global
procedure CourseEvent_PasteCustCode(var record CourseEventVc CourseEventr,Integer rownr)
begin
  record CUVc CUr;
  row CourseEventVc CourseEventrw;  

  if (rownr>=0) then begin
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    CUr.Code = CourseEventrw.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      CourseEventrw.PriceListRow = CUr.PLCode;
    end;  

    MatRowPut(CourseEventr,rownr,CourseEventrw);
    CourseEventrw.Price = GetCourseEventRowPrice(CourseEventr,rownr,true);
    if ((CourseEventrw.Price == blankval) and (nonblank(CourseEventrw.ContactName))) then begin
      CourseEventrw.Price = CourseEventr.Price;
    end;
    CourseEventrw.BookingDate = CurrentDate;    
    MatRowPut(CourseEventr,rownr,CourseEventrw);
    CourseEventVc_UpdatePrice(CourseEventr);
  end;
  return;
end;

global
procedure CourseEvent_PasteHotel(var record CourseEventVc CourseEventr,Integer rownr)
begin
  row CourseEventVc CourseEventrw;  
  record ResVc Resr;
  record CourseBlock Courseb;
  string 255 artcode,cclassd;
  record INVc INr;
  val t;
  Integer typ;
  string 255 pricerules;

  if (rownr<0) then begin
    Resr.Code = CourseEventr.Hotel;
    if (ReadFirstMain(Resr,1,true)) then begin
      CourseEventr.HotelName = Resr.Name;
    end;
  end else begin 
    BlockLoad(Courseb);   
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    Resr.Code = CourseEventrw.Hotel;      
    if (ReadFirstMain(Resr,1,true)) then begin
      if (FindResourceItem(Resr.Type,Courseb.DefResUsage,CourseEventr.NoOfPersons,artcode,pricerules,CourseEventr.TransDate,t,cclassd)) then begin end;
      INr.Code = artcode;
      if (ReadFirstMain(INr,1,true)) then begin end;
      CourseEventrw.HotelPrice = INr.UPrice1;
    end;
    MatRowPut(CourseEventr,rownr,CourseEventrw);
  end;

  CourseEventVc_UpdatePrice(CourseEventr);    
  return;
end;

global
procedure CourseEvent_PastePrice(var record CourseEventVc CourseEventr,Integer rownr)
begin
  row CourseEventVc CourseEventrw;  
  string 255 artcode;
  val price,discount;

  if (rownr < 0) then begin
    price = GetCoursePrice(CourseEventr,true);
    discount =  CourseEventr.Price/price;
    if((discount < 1) and (discount >= 0) and (discount <> blankval)) then begin
      discount = (1 - discount) * 100;
    end else begin
      discount = blankval;
    end;
    CourseEventr.Discount = discount;
  end else begin
    price = GetCourseEventRowPrice(CourseEventr,rownr,true);
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    discount =  CourseEventrw.Price/price;
    if((discount < 1) and (discount >= 0) and (discount <> blankval)) then begin
      discount = (1 - discount) * 100;
    end else begin
      discount = blankval;
    end;
    CourseEventrw.Discount = discount;
    MatRowPut(CourseEventr,rownr,CourseEventrw);      
  end;
 // CourseEventVc_UpdatePrice(CourseEventr);    
  return;
end;

global
procedure CourseEvent_PasteDiscount(var record CourseEventVc CourseEventr,Integer rownr)
begin
  row CourseEventVc CourseEventrw;
  val price;
  
  if (rownr>=0) then begin
    MatRowGet(CourseEventr,rownr,CourseEventrw);
    CourseEventrw.Price = GetCourseEventRowPrice(CourseEventr,rownr,true);
    CalcSum(1.00,CourseEventrw.Price,blankval,CourseEventrw.Discount,price,0);
    CourseEventrw.Price = price;  
    MatRowPut(CourseEventr,rownr,CourseEventrw);
  end else begin
    CourseEventr.Price = GetCoursePrice(CourseEventr,true);
  end;
  CourseEventVc_UpdatePrice(CourseEventr);    
  return;
end;

global
procedure CourseEventVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record CourseEventVc CourseEventr;
  row CourseEventVc CourseEventrw;
  Array string 60 acontact;
  Integer i,acnt,currow;
  
  GetWindowRecord(mwn,CourseEventr);
  currow = WindowActiveRow(wn);
  if (currow>=0) then begin
    MatRowGet(CourseEventr,currow,CourseEventrw);
  end;
  ContactSClassOnOpen(wn,CourseEventrw.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,60,acontact[i],false);
  end;
  RETURN;
END;

updating procedure CreateActivityFromCourseEvent(var record CourseEventVc CourseEventr,var record ActVc Actr,Date td,Boolean force)
begin
  record ActTypeGrVc ATGRr;
  record ActTypeVc ATr;
  record ASTBlock ASTb;
  Boolean savef;
  Integer curcomp;

  curcomp = CurrentCompany;
  BlockLoad(ASTb);
  RecordNew(Actr);
  if (force==false) then begin
//    if (ASTb.GenContract==0) then begin goto LCreateActFromCourseEventVc; end;
//    if (blank(ASTb.Contract)) then begin goto LCreateActFromCourseEventVc; end;
  end;
  Actr.TransDate = td;
  Actr.EndDate = td;
  Actr.StartTime = CourseEventr.StartTime;
  Actr.EndTime = CourseEventr.EndTime;
  Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);
  
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
//  Actr.Contact = CourseEventr.ClientContact;
  Actr.ActType = CourseEventr.ActType;
  if (blank(Actr.ActType)) then begin
    Actr.ActType = ASTb.CourseEvent;
  end;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.CourseEventDone;
  Actr.Comment = CourseEventr.CourseName;
  Actr.MainPersons = CourseEventr.SalesMan;
  Actr.Resources = CourseEventr.ConferenceLocation;
  savef = true;
LCreateActFromCourseEventVc:;
  if (savef) then begin 
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGRr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGRr,1,true)) then begin
        Actr.CalTimeFlag = ATGRr.DefTimeFlag;
      end;
    end;  
    Actr.TodoFlag = 0;
    //Actr.CalTimeFlag = 2;
    if (RecordStore(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,CourseEventr,curcomp);  
      CreateRecordLink(CourseEventr,curcomp,Actr,curcomp);  
    end;
  end;  
  return;
end;  

global
updating function Integer CreateActFromCourseEventVc(var record CourseEventVc CourseEventr,var record ActVc Actr,Boolean force,Boolean readf)
begin
  Integer res;
  LongInt i,diff;
  Date d;
  
  if (readf) then begin
    if (ReadFirstMain(CourseEventr,0,true)) then begin end;  
  end;
  diff = DateDiff(CourseEventr.EndDate,CourseEventr.TransDate) + 1;
  for (i=0;i<diff;i=i+1) begin
    d = AddDay(CourseEventr.TransDate,i);
    CreateActivityFromCourseEvent(CourseEventr,Actr,d,force);
  end;
  return;
end;  

function Boolean AlreadyCreatedForCustomer(string custcode,Array string acustcode,Integer acnt)
begin
  Boolean res;
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (acustcode[i]==custcode) then begin
      res = true;
      goto LAlreadyCreatedForCustomer;
    end;
  end;
LAlreadyCreatedForCustomer:;  
  AlreadyCreatedForCustomer = res;
  return;
end;  

procedure AddToCreatedForCustomer(string custcode,Array string acustcode,var Integer acnt)
begin
  Boolean res;
  Integer i;
  
  for (i=0;i<acnt;i=i+1) begin
    if (acustcode[i]==custcode) then begin
      goto LAddToCreatedForCustomerr;
    end;    
  end;
  acustcode[acnt] = custcode;
  acnt = acnt + 1;
LAddToCreatedForCustomerr:;  
  return;
end;  

global
procedure AddRowToInvoice(var record IVVc IVr,record CourseEventVc CourseEventr,row CourseEventVc CourseEventrw)
begin
  record IVVc IV2r;
  row IVVc IVrw;
  Integer rwcnt;
  string 255 inwarning;
  val price;
  Integer sernrf;
  
  rwcnt = MatRowCnt(IVr);
  ClearRow(IVr,IVrw,1);
  
  IVrw.ArtCode = CourseEventrw.ItemCode;
  if (blank(IVrw.ArtCode)) then begin
    IVrw.ArtCode = CourseEventr.ItemCode;
  end;
  MatRowPut(IVr,rwcnt,IVrw);
  if (IVVc_PasteArtCode(IVr,rwcnt,inwarning,inwarning,false,sernrf)) then begin    
  end;
  MatRowGet(IVr,rwcnt,IVrw);

  IVrw.Quant = 1;
  IVrw.Spec = USetStr(17004) & ": " & CourseEventrw.ContactName;

  MatRowPut(IVr,rwcnt,IVrw);
  IVVc_PasteQuantity(IVr,rwcnt);        
  MatRowGet(IVr,rwcnt,IVrw);

  price = CourseEventrw.Price;
  if (price==blankval) then begin
    price = CourseEventr.Price;
  end;
  if (CourseEventrw.Discount>0) then begin
    IVrw.Price = (price*100.00)/(100.00-CourseEventrw.Discount);
  end else begin
    IVrw.Price = price;
  end;
  MatRowPut(IVr,rwcnt,IVrw);
  IVVc_PastePrice(IVr,IV2r,rwcnt,inwarning);
  MatRowGet(IVr,rwcnt,IVrw);

  IVrw.vRebate = CourseEventrw.Discount;
  if (blank(IVrw.vRebate)) then begin
    IVrw.vRebate = CourseEventr.Discount;
  end;
  MatRowPut(IVr,rwcnt,IVrw);
    
  if (IVDchrsum(IVr,rwcnt)) then begin
    IVDchsum(IVr,rwcnt);
  end; 
  IVSumup(IVr,true);   
  return;
end;  

updating procedure CreateInvoiceForCustomer(var record CourseEventVc CourseEventr,string custcode)
begin
  row CourseEventVc CourseEventrw;
  record IVVc IVr;
  row IVVc IVrw;
  Integer i,rwcnt,rwcnt1;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn,oldcur;
  boolean invoicestarted;
  
  MatRowPut(IVr,rwcnt,IVrw);
  rwcnt = MatRowCnt(CourseEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    if (CourseEventrw.CustCode==custcode) then begin
      if (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) then begin
        if (invoicestarted==false) then begin 
          invoicestarted = true;
          RecordNew(IVr);
          oldcur = IVr.CurncyCode;
          IVr.CustCode = custcode;
          if (PasteCustInInv(IVr)) then begin end;
          /*
          if (PasteCust2InInv(IVr,"",true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
          end;  
          */
          AddPerceptionTaxesRows_IVVc(IVr);
          AddWithholdingTaxesRows_IVVc(IVr);
          IVr.PriceList = CourseEventr.PriceList;
          IVVc_PastePriceList(IVr);
          rwcnt1 = 0;
          ClearRow(IVr,IVrw,1);        
          IVrw.stp = kInvoiceRowTypeNormal;
          IVrw.Spec = USetStr(17002) & ": " & CourseEventr.CourseName;
          MatRowPut(IVr,rwcnt1,IVrw);
          IVrw.Spec = USetStr(16746) & ": " & CourseEventr.TransDate;
          if (CourseEventr.TransDate <> CourseEventr.EndDate) then begin
            IVrw.Spec = IVrw.Spec & " : " & CourseEventr.EndDate;
          end;
          MatRowPut(IVr,rwcnt1+1,IVrw);
        end;
        AddRowToInvoice(IVr,CourseEventr,CourseEventrw);
      end;
    end;
  end; 
  if (MatRowCnt(IVr)>0) and (invoicestarted) then begin
    if (oldcur!=IVr.CurncyCode) then begin
      IVVc_PasteCurncyCode(IVr,oldcur,-1,false,true);
      IVDUpdatePrices(IVr,false);
    end;
    IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");            
    if (IVr.SerNr>0) then begin
      if (RecordStore(IVr,false)) then begin
        rwcnt = MatRowCnt(CourseEventr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CourseEventr,i,CourseEventrw);
          if (CourseEventrw.CustCode==IVr.CustCode) and (CourseEventrw.InvoiceNo<=0)then begin
            if (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) then begin 
              CourseEventrw.InvoiceNo = IVr.SerNr;
              MatRowPut(CourseEventr,i,CourseEventrw);
            end;  
          end;
        end; 
      end;
    end;
  end;
  return;
end;

global
procedure UpdateInvoicedSum(var record CourseEventVc CourseEventr)
begin 
  record IVVc IVr;
  row CourseEventVc CourseEventrw;
  integer i,rwcnt;
  
  CourseEventr.InvoicedSum = blankval;
  rwcnt = MatRowCnt(CourseEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    if (CourseEventrw.InvoiceNo>0) and (CourseEventrw.Status==kCourseEventPaticipantStatusPaying) then begin
      IVr.SerNr = CourseEventrw.InvoiceNo;
      if ReadFirstMain(IVr,1,true) then begin 
        CourseEventr.InvoicedSum = CourseEventr.InvoicedSum + CourseEventrw.Price;
      end;
    end;
  end;
  
  return;
end;  

global
updating procedure CreateInvFromCourseEventVc(var record CourseEventVc CourseEventr)
begin
  row CourseEventVc CourseEventrw;
  Integer i,rwcnt;
  Array string 255 acustcode;
  Integer acnt;
  
  rwcnt = MatRowCnt(CourseEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    if (CourseEventrw.InvoiceNo<0) then begin
      if (AlreadyCreatedForCustomer(CourseEventrw.CustCode,acustcode,acnt)==false) then begin
        CreateInvoiceForCustomer(CourseEventr,CourseEventrw.CustCode);
        AddToCreatedForCustomer(CourseEventrw.CustCode,acustcode,acnt);
      end;
    end;    
  end;
//      InvoicedSum ??
  UpdateInvoicedSum(CourseEventr);
  CourseEventr.LastTransferDate = CurrentDate;
  return;
end;  

global
updating function Integer CreateMailFromCourseEventD(record CourseEventVc CourseEventr,var record MailVc Mailr,var string warning,string pdfform)
begin
  Integer res;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;  
  row CourseEventVc CourseEventrw;
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  Integer line;
  string 255 docname,fname,email;
  
  res = 0;
  if (ReadFirstMain(CourseEventr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromCourseEventD;
  end;  
  ClearRow(Mailr,MArw,1);
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);

  rwcnt = MatRowCnt(CourseEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    ClearRow(Mailr,MArw,1);
    CUr.Code = CourseEventrw.ContactCode;
    if (ReadFirstMain(CUr,1,true)) then begin end;
    email = CUr.eMail;
    if (blank(email)) then begin
      if (FindCustomerRelation(CourseEventrw.CustCode,CourseEventrw.ContactCode,ContactCUr)) then begin
        if (nonblank(ContactCUr.eMail)) then begin
          email = ContactCUr.eMail;
        end;
      end;
    end;
    if (blank(email)) then begin
      CUr.Code = CourseEventrw.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin end;
      email = CUr.eMail;
    end;
    if (blank(email)) then begin
      res = 2289;
      warning = CourseEventrw.ContactCode;
      goto LCreateMailFromCourseEventD;
    end;
    MArw.RowTyp = 0;
    MArw.AddrCode = email;
    MatRowPut(Mailr,MatRowCnt(Mailr),MArw);
  end;
  Mailr.Header = USetStr(17001) & " " & CourseEventr.SerNr;
LCOCUServiceHIDDENLine:;    
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin
    CreateRecordLink(Mailr,CurrentCompany,CourseEventr,CurrentCompany);  
    CreateRecordLink(CourseEventr,CurrentCompany,Mailr,CurrentCompany);  
  end;

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "CourseEventForm";
  end;
  fname = "tmp/" & USetStr(17001) & CourseEventr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(CourseEventr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromCourseEventD:;  
  CreateMailFromCourseEventD = res;
  return;
end;

global
updating function Integer CreateLetFromCourseEventD(record CourseEventVc CourseEventr,var record LetVc Letr,var string warning)
begin
  integer res;
  record RcVc RepSpec;
  record PersColVc PersColr;
  record PersColListVc PersColListr;
  record CUVc CUr;
  row CourseEventVc CourseEventrw;
  integer i,rwcnt;
  boolean TrHs,firstf;
  string 255 tstr;
  
  res = 0;
  PersColr.Code = "CE" & CourseEventr.SerNr;
  if (ReadFirstMain(PersColr,1,true)==false) then begin
    RecordNew(PersColr);
    PersColr.Code = "CE" & CourseEventr.SerNr;
    PersColr.Comment = "Course Event " & CourseEventr.SerNr;
    RecordStore(PersColr,false);
  end else begin
    TrHs = true;
    PersColListr.PersColCode = PersColr.Code;
    while (LoopMain(PersColListr,1,TrHs)) begin
      if (PersColListr.PersColCode!=PersColr.Code) then begin TrHs = false; end;
      if (TrHs) then begin
        RecordDelete(PersColListr);
        StepBack(PersColListr);
      end;
    end;
  end;
  firstf = true;
  rwcnt = MatRowCnt(CourseEventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CourseEventr,i,CourseEventrw);
    CUr.Code = CourseEventrw.ContactCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (nonblank(CUr.eMail)) then begin
        RecordNew(RepSpec);
        RepSpec.Stext = PersColr.Code;
        RepSpec.f1 = CourseEventrw.ContactCode;
        RepSpec.flags[1] = 0;
        if (CUr.CUType==1) then begin
          RepSpec.ArtMode = 2;
        end;
        if (CUr.GuestType==0 and CUr.VEType==0 and CUr.CUType==0) then begin
          RepSpec.ArtMode = 3;
        end;
        if (CUr.VEType==1) then begin
          RepSpec.ArtMode = 5;
        end;
        AddPersColMn(RepSpec);
        if (firstf) then begin
          firstf = false;
        end else begin
          tstr = tstr & ",";
        end;
        tstr = tstr & CourseEventrw.ContactCode;
      end;
    end;
  end;
  RecordNew(Letr);
  Letr.CustCode = tstr;
  Letr.PersColCode = PersColr.Code;
  Letr.FileName = "CourseEventVc";
  Letr.TransNr = CourseEventr.SerNr;
  if (RecordStore(Letr,false)) then begin
    CreateRecordLink(Letr,CurrentCompany,CourseEventr,CurrentCompany);  
    CreateRecordLink(CourseEventr,CurrentCompany,Letr,CurrentCompany);  
  end;

  CreateLetFromCourseEventD = res;
  return;
end;