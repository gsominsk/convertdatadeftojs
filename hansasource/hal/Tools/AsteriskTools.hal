external procedure ActVcRecordDefServer(var record ActVc);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure SetActTypeValues(record ActVc);

updating procedure AsteriskUserEventCreateActivity(string code,string callerid,string actCode,Boolean donef,string actCompanyCode,string cucode)
begin
  record CUVc CUr;
  record ActVc Actr;
  Integer oldcomp,actCompany;
  record GlobalCRMBlock GCRMb;
  record ContactRelVc ContactRelr;

  BlockLoad(GCRMb);
  oldcomp = CurrentCompany;
  if (nonblank(actCompanyCode)) then begin
    SetCompanyCode(actCompanyCode,false);
  end else begin
    if (nonblank(GCRMb.MainCRMCompany)) then begin
      SetCompanyCode(GCRMb.MainCRMCompany,false)
    end;
  end;
  RecordNew(Actr);
  ActVcRecordDefServer(Actr);
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.SymbNr = kActivitySymbolCall;
  Actr.Comment = code;
  CUr.Code = cucode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    Actr.Contact = CUr.Person;
    Actr.Phone = CUr.Phone;
    if ((CUr.CUType==0) and (CUr.VEType==0)) then begin
      ContactRelr.ContactCode = CUr.Code;
      if (ReadFirstKey("ActContactCode",ContactRelr,1,true)) then begin
        Actr.CUCode = ContactRelr.CustCode;
        Actr.CUName = ContactRelr.CustName;
        Actr.Contact = CUr.Name;
      end;
    end;
  end;
  Actr.Phone = callerid;
  Actr.PBXQueues = code;
  Actr.ActType = actCode;
  if (donef) then begin
    Actr.OKFlag = 1;
  end;
  PasteActTypeInAct("",Actr);
  SetActTypeValues(Actr);
  Actr.AutoGenCallFlag = 1;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  RecordStore(Actr,false);
  ResetCompany(oldcomp);
end;

updating procedure HandleAsteriskIVRTreeEvent(string type,string code,string caller,string cucode)
begin
  record PBXIVRTreeVc PBXIVRTreer;
  string 10 actCode;
  Boolean donef;

  PBXIVRTreer.Code = code;
  if (ReadFirstMain(PBXIVRTreer,1,true)) then begin
    switch (type) begin
      case "Reached":
        actCode = PBXIVRTreer.ActReached;
        donef = PBXIVRTreer.ActReachedDone;
      case "Open":
        actCode = PBXIVRTreer.ActOpen;
        donef = PBXIVRTreer.ActOpenDone;
      otherwise
        LogText(0,"HandleAsteriskIVRTreeEvent unknown type:" & type);
    end;
    if (nonblank(actCode)) then begin
      AsteriskUserEventCreateActivity(code,caller,actCode,donef,PBXIVRTreer.CRMCompany,cucode);
    end;
  end else begin
    LogText(0,"HandleAsteriskIVRTreeEvent unknown code:" & code);
  end;
end;

updating procedure HandleAsteriskQueueEvent(string type,string code,string caller,string cucode)
begin
  record PBXQueueVc PBXQueuer;
  string 10 actCode;
  Boolean donef;

  PBXQueuer.Code = code;
  if (ReadFirstMain(PBXQueuer,1,true)) then begin
    switch (type) begin
      case "Reached":
        actCode = PBXQueuer.ActReached;
        donef = PBXQueuer.ActReachedDone;
      case "Open":
        actCode = PBXQueuer.ActOpen;
        donef = PBXQueuer.ActOpenDone;
      otherwise
        LogText(0,"HandleAsteriskQueueEvent unknown type:" & type);
    end;
    if (nonblank(actCode)) then begin
      AsteriskUserEventCreateActivity(code,caller,actCode,donef,PBXQueuer.CRMCompany,cucode);
    end;
  end else begin
    LogText(0,"HandleAsteriskQueueEvent unknown code:" & code);
  end;
end;


global
updating procedure HandleAsteriskUserEvent(string userevent,string type,string code,string caller,string cucode)
begin
  LogText(0,"HandleAsteriskUserEvent userevent:" & userevent & " type:" & type & " code:" & code & " caller:" & caller);
  switch (userevent) begin
    case "Queue":
      HandleAsteriskQueueEvent(type,code,caller,cucode);
    case "IVRTree":
      HandleAsteriskIVRTreeEvent(type,code,caller,cucode);
  end;
end;
