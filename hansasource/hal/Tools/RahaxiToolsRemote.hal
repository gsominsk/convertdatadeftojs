function string 255 FindPaymentMode(string card_aid_name)
begin
  string 255 res;
  record PMBlock PMb;
  row PMBlock PMbw;
  Integer i,rwcnt;
  
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbw);
    if (PMbw.Comment==card_aid_name) then begin
      res = PMbw.Code;    
      goto LFindPaymentMode;
    end;
  end;
LFindPaymentMode:;  
  FindPaymentMode = res;
  return;
end;

global
updating procedure StoreCredCardSlip_Rahaxi(string card_aid_name,val v,string field_37,string field_38,LongInt ivnr,string filename,Integer status,var record NotepadVc merchantNoter,var record NotepadVc Noter,var string paymode)
begin
  record CouponVc Coupr;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record RestAccVc Restr;
  LongInt i,l;
  Integer fieldnr;
  record DefCashBlock DCb;
  string 255 tstr;

  Coupr.TransDate = CurrentDate;
  Coupr.SerNr = NextSerNr("CouponVc",Coupr.TransDate,-1,false,"");            
  Coupr.CouponNr = field_37;
  Coupr.CreditCardNr = "";
  Coupr.FileName = filename;
  switch (filename) begin
    case "IVVc": Coupr.OriginType = 0;// 0=IVVc, 1==Recibo 2 == IVCash 3 == IVCash2 4 == RestAccVc
    case "IVCashVc": Coupr.OriginType = 2;
    case "RestAccVc": Coupr.OriginType = 4;
  end;
  switch (Coupr.OriginType) begin
    case 0:
      Coupr.IVNr = ivnr;
      IVr.SerNr = ivnr;
      ReadFirstMain(IVr,1,true);
      Coupr.CUCode = IVr.CustCode;
      Coupr.CUName = IVr.Addr0;
      Coupr.Comment = USetStr(1150);
      Coupr.Objects = IVr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
    case 2:
      Coupr.IVNr = ivnr;
      IVCashr.SerNr = ivnr;
      ReadFirstMain(IVCashr,1,true);
      Coupr.CUCode = IVCashr.CustCode;
      Coupr.CUName = IVCashr.Addr0;
      Coupr.Comment = USetStr(1804);
      Coupr.Objects = IVCashr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
    case 5:
      Coupr.IVNr = ivnr;
      Restr.SerNr = ivnr;
      ReadFirstMain(Restr,1,true);
      Coupr.CUCode = Restr.CustCode;
      Coupr.CUName = Restr.Comment;
      Coupr.Comment = USetStr(1923);
      Coupr.Objects = Restr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
  end;
  Coupr.Amount = v;
  Coupr.Status = status;
  Coupr.Direct = 0;
  Coupr.AuthDate = CurrentDate;
  Coupr.AuthorizationCode = field_38;
  switch (card_aid_name) begin
    case "VISA": Coupr.CardType = 1;
    case "MASTERCARD": Coupr.CardType = 2;
    case "AMEX": Coupr.CardType = 3;
    case "DINERS": Coupr.CardType = 4;
    case "SWITCH": Coupr.CardType = 5;
    case "MAESTRO": Coupr.CardType = 5;
  end;
  RecordStore(Coupr,false);
/*  
  Coupr.MachineName,M4Code,5,0);
  Coupr.ConsNr,M4Long,0,IVVc);  
  Coupr.DepDate,M4Date,0,0);
  Coupr.Inst,M4Int,0,0);
  Coupr.CashDate,M4Date,0,0);
  Coupr.BatchNr,M4Int,0,0);
*/
  Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  Noter.Classification = "CUSTOMER";
  if (RecordStore(Noter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,Noter,CurrentCompany);  
  end;
  merchantNoter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  merchantNoter.Classification = "MERCHANT";
  if (RecordStore(merchantNoter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,merchantNoter,CurrentCompany);  
  end;
  paymode = FindPaymentMode(card_aid_name);
  if (blank(paymode)) then begin
    BlockLoad(DCb);
    paymode = DCb.DefCCPayMode;
  end;  
  return;
end;

global
updating procedure StoreCredCardSlip_YomaniBanksys(string CardType,val v,string couponnr,string authorizationcode,string timestamp,string SettlementID,string orgcouponnr,string orgtimestamp,LongInt ivnr,string filename,Integer status,var record NotepadVc merchantNoter,var record NotepadVc Noter)
begin
  record CouponVc Coupr;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record RestAccVc Restr;
  string 255 tstr;
  record CredCardTypeVc CCTr;

  Coupr.TransDate = CurrentDate;
  Coupr.SerNr = NextSerNr("CouponVc",Coupr.TransDate,-1,false,"");            
  Coupr.CouponNr = couponnr;
  Coupr.Timestamp = timestamp;
  Coupr.ReverseCouponNr = orgcouponnr;
  Coupr.ReverseTimestamp = orgtimestamp;
  Coupr.CreditCardNr = "";
  Coupr.Batch = SettlementID;
  Coupr.FileName = filename;
  switch (filename) begin
    case "IVVc": Coupr.OriginType = 0;// 0=IVVc, 1==Recipt 2 == IVCash 3 == IVCash2 4 == RestAccVc
    case "IVCashVc": Coupr.OriginType = 2;
    case "RestAccVc": Coupr.OriginType = 4;
  end;
  switch (Coupr.OriginType) begin
    case 0:
      Coupr.IVNr = ivnr;
      IVr.SerNr = ivnr;
      ReadFirstMain(IVr,1,true);
      Coupr.CUCode = IVr.CustCode;
      Coupr.CUName = IVr.Addr0;
      Coupr.Comment = USetStr(1150);
      Coupr.Objects = IVr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
    case 2:
      Coupr.IVNr = ivnr;
      IVCashr.SerNr = ivnr;
      ReadFirstMain(IVCashr,1,true);
      Coupr.CUCode = IVCashr.CustCode;
      Coupr.CUName = IVCashr.Addr0;
      Coupr.Comment = USetStr(1804);
      Coupr.Objects = IVCashr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
    case 5:
      Coupr.IVNr = ivnr;
      Restr.SerNr = ivnr;
      ReadFirstMain(Restr,1,true);
      Coupr.CUCode = Restr.CustCode;
      Coupr.CUName = Restr.Comment;
      Coupr.Comment = USetStr(1923);
      Coupr.Objects = Restr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
  end;
  Coupr.Amount = v;
  Coupr.Status = status;
  Coupr.Direct = 0;
  Coupr.AuthDate = CurrentDate;
  Coupr.AuthorizationCode = authorizationcode;
  switch (CardType) begin
    case "A": Coupr.CardType = "0";
    case "B": Coupr.CardType = "0";
    case "D": Coupr.CardType = "0";
    case "E": Coupr.CardType = "17";
    case "I": Coupr.CardType = "3";
    case "J": Coupr.CardType = "4";
    case "M": Coupr.CardType = "18";
    case "Q": Coupr.CardType = "6";
    case "U": Coupr.CardType = "0";
    otherwise Coupr.CardType = "0";
  end;
  CCTr.CardType = StringToInt(Coupr.CardType);
  if (ReadFirstKey("CardType",CCTr,1,true)) then begin
    Coupr.CardType = CCTr.Code;
  end;
  RecordStore(Coupr,false);

  Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  Noter.Classification = "CUSTOMER";
  if (RecordStore(Noter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,Noter,CurrentCompany);  
  end;
  merchantNoter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  merchantNoter.Classification = "MERCHANT";
  if (RecordStore(merchantNoter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,merchantNoter,CurrentCompany);  
  end;
  return;
end;

global
updating procedure StoreCredCardSlip_VerifoneBanksys(string CardType,val v,string couponnr,string authorizationcode,string timestamp,string SettlementID,string orgcouponnr,string orgtimestamp,LongInt ivnr,string filename,Integer status,var record NotepadVc merchantNoter,var record NotepadVc Noter)
begin
  record CouponVc Coupr;
  record IVVc IVr;
  record IVCashVc IVCashr;
  record RestAccVc Restr;
  string 255 tstr;
  record CredCardTypeVc CCTr;

  Coupr.TransDate = CurrentDate;
  Coupr.SerNr = NextSerNr("CouponVc",Coupr.TransDate,-1,false,"");            
  Coupr.CouponNr = couponnr;
  Coupr.Timestamp = timestamp;
  Coupr.ReverseCouponNr = orgcouponnr;
  Coupr.ReverseTimestamp = orgtimestamp;
  Coupr.CreditCardNr = "";
  Coupr.Batch = SettlementID;
  Coupr.FileName = filename;
  switch (filename) begin
    case "IVVc": Coupr.OriginType = 0;// 0=IVVc, 1==Recipt 2 == IVCash 3 == IVCash2 4 == RestAccVc
    case "IVCashVc": Coupr.OriginType = 2;
    case "RestAccVc": Coupr.OriginType = 4;
  end;
  switch (Coupr.OriginType) begin
    case 0:
      Coupr.IVNr = ivnr;
      IVr.SerNr = ivnr;
      ReadFirstMain(IVr,1,true);
      Coupr.CUCode = IVr.CustCode;
      Coupr.CUName = IVr.Addr0;
      Coupr.Comment = USetStr(1150);
      Coupr.Objects = IVr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
    case 2:
      Coupr.IVNr = ivnr;
      IVCashr.SerNr = ivnr;
      ReadFirstMain(IVCashr,1,true);
      Coupr.CUCode = IVCashr.CustCode;
      Coupr.CUName = IVCashr.Addr0;
      Coupr.Comment = USetStr(1804);
      Coupr.Objects = IVCashr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
    case 5:
      Coupr.IVNr = ivnr;
      Restr.SerNr = ivnr;
      ReadFirstMain(Restr,1,true);
      Coupr.CUCode = Restr.CustCode;
      Coupr.CUName = Restr.Comment;
      Coupr.Comment = USetStr(1923);
      Coupr.Objects = Restr.Objects;
//    Coupr.CurncyCode,M4Code,5,CurncyCodeVc);
  end;
  Coupr.Amount = v;
  Coupr.Status = status;
  Coupr.Direct = 0;
  Coupr.AuthDate = CurrentDate;
  Coupr.AuthorizationCode = authorizationcode;
  switch (CardType) begin
    case "A": Coupr.CardType = "0";
    case "B": Coupr.CardType = "0";
    case "D": Coupr.CardType = "0";
    case "E": Coupr.CardType = "17";
    case "I": Coupr.CardType = "3";
    case "J": Coupr.CardType = "4";
    case "M": Coupr.CardType = "18";
    case "Q": Coupr.CardType = "6";
    case "U": Coupr.CardType = "0";
    otherwise Coupr.CardType = "0";
  end;
  CCTr.CardType = StringToInt(Coupr.CardType);
  if (ReadFirstKey("CardType",CCTr,1,true)) then begin
    Coupr.CardType = CCTr.Code;
  end;
  RecordStore(Coupr,false);

  Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  Noter.Classification = "CUSTOMER";
  if (RecordStore(Noter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,Noter,CurrentCompany);  
  end;
  merchantNoter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  merchantNoter.Classification = "MERCHANT";
  if (RecordStore(merchantNoter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,merchantNoter,CurrentCompany);  
  end;
  return;
end;

global
updating procedure StoreCredCardSlip_CloudService(integer cardtype,val v,string cardnumber,string authcode,string transid,LongInt ivnr,integer ivrownr,string filename,Integer status)//,var record NotepadVc merchantNoter,var record NotepadVc Noter)
begin
  record CouponVc Coupr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  record RestAccVc Restr;
  LongInt i,l;
  Integer fieldnr;
  record DefCashBlock DCb;
  string 255 tstr;

  Coupr.TransDate = CurrentDate;
  Coupr.SerNr = NextSerNr("CouponVc",Coupr.TransDate,-1,false,"");            
  Coupr.CouponNr = authcode;
  Coupr.CreditCardNr = "****" & right(cardnumber,4);
  Coupr.FileName = filename;
  switch (filename) begin
    case "IVVc": Coupr.OriginType = 0;// 0=IVVc, 1==Recibo 2 == IVCash 3 == IVCash2 4 == RestAccVc
    case "IVCashVc": Coupr.OriginType = 2;
    case "RestAccVc": Coupr.OriginType = 4;
  end;
  switch (Coupr.OriginType) begin
    case 0:
      Coupr.IVNr = ivnr;
      IVr.SerNr = ivnr;
      ReadFirstMain(IVr,1,true);
      Coupr.CUCode = IVr.CustCode;
      Coupr.CUName = IVr.Addr0;
      Coupr.Comment = USetStr(1150);
      Coupr.Objects = IVr.Objects;
      if (ivrownr>=0 and ivrownr<MatRowCnt(IVr)) then begin
        MatRowGet(IVr,ivrownr,IVrw);
        Coupr.CurncyCode = IVrw.CurncyCode;
      end;
      if (blank(Coupr.CurncyCode)) then begin
        Coupr.CurncyCode = IVr.CurncyCode;
      end;
      Coupr.CCTransID = transid;
    case 2:
      Coupr.IVNr = ivnr;
      IVCashr.SerNr = ivnr;
      ReadFirstMain(IVCashr,1,true);
      Coupr.CUCode = IVCashr.CustCode;
      Coupr.CUName = IVCashr.Addr0;
      Coupr.Comment = USetStr(1804);
      Coupr.Objects = IVCashr.Objects;
      Coupr.CCTransID = transid;
    case 5:
      Coupr.IVNr = ivnr;
      Restr.SerNr = ivnr;
      ReadFirstMain(Restr,1,true);
      Coupr.CUCode = Restr.CustCode;
      Coupr.CUName = Restr.Comment;
      Coupr.Comment = USetStr(1923);
      Coupr.Objects = Restr.Objects;
      Coupr.CCTransID = transid;
  end;
  Coupr.Amount = v;
  Coupr.Status = status;
  Coupr.Direct = 0;
  Coupr.AuthDate = CurrentDate;
  Coupr.AuthorizationCode = authcode;
  Coupr.CardType = cardtype;
  RecordStore(Coupr,false);

/* NEEDED? //WNS
  Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  Noter.Classification = "CUSTOMER";
  if (RecordStore(Noter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,Noter,CurrentCompany);  
  end;
  merchantNoter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
  merchantNoter.Classification = "MERCHANT";
  if (RecordStore(merchantNoter,false)) then begin
    CreateRecordLink(Coupr,CurrentCompany,merchantNoter,CurrentCompany);  
  end;
*/
  return;
end;

global
updating procedure UpdateCredCardSlip_Rahaxi(string card_aid_name,val v,string field_37,string field_38,LongInt ivnr,string filename,Integer status,var record NotepadVc merchantNoter,var record NotepadVc Noter,var string paymode)
begin
  record CouponVc Coupr;
  record CouponVc oldCoupr;

  Coupr.CouponNr = field_37;
  if (ReadFirstKey("CouponNr",Coupr,1,true)) then begin
    RecordCopy(oldCoupr,Coupr);
    Coupr.Status = status;
    RecordUpdate(oldCoupr,Coupr,0);
  end else begin
    StoreCredCardSlip_Rahaxi(card_aid_name,v,field_37,field_38,ivnr,filename,5,merchantNoter,Noter,paymode);
  end;
  return;
end;

global
updating procedure PrintCreditCardSlip_EFTPOSRn(record RcVc RepSpec)
begin
  record NotepadVc Noter;
  Integer i,rwcnt;
  
  StartReportJob("");
  EndHeader;
  Noter.SerNr = RepSpec.long1;
  if (ReadFirstMain(Noter,1,true)) then begin
    rwcnt = LineTextCnt(Noter);
    for (i=0;i<rwcnt;i=i+1) begin
      StartFormat(15);
      OutString(0,0,LineTextGet(Noter,i),false); 
      EndFormat;
    end; 
  end;
  EndJob;
end;

procedure PrintCreditCardSlip_EFTPOS(LongInt notesernr)
begin
  record RcVc RepSpec;
  
  RepSpec.repname = "PrintCreditCardSlip_EFTPOSRn";
  RepSpec.long1 = notesernr;
  RepSpec.Media = mtPrinter;
  RunReport(RepSpec,0); 
end;

global
updating procedure StoreCredCardSlip_EFTPOS(integer cardtype,val v,string cardnumber,string authcode,string transid,LongInt ivnr,integer ivrownr,string filename,Integer status,area merchantreceipt,area customerreceipt,boolean printf)
begin
  record CouponVc Coupr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  record RestAccVc Restr;
  LongInt i,al;
  string 255 tstr;
  record NotepadVc merchantNoter;
  record NotepadVc Noter;

  Coupr.TransDate = CurrentDate;
  Coupr.SerNr = NextSerNr("CouponVc",Coupr.TransDate,-1,false,"");            
  Coupr.CouponNr = authcode;
  Coupr.CreditCardNr = "****" & right(cardnumber,4);
  Coupr.FileName = filename;
  switch (filename) begin
    case "IVVc": Coupr.OriginType = 0;// 0=IVVc, 1==Recibo 2 == IVCash 3 == IVCash2 4 == RestAccVc
    case "IVCashVc": Coupr.OriginType = 2;
    case "RestAccVc": Coupr.OriginType = 4;
  end;
  switch (Coupr.OriginType) begin
    case 0:
      Coupr.IVNr = ivnr;
      IVr.SerNr = ivnr;
      ReadFirstMain(IVr,1,true);
      Coupr.CUCode = IVr.CustCode;
      Coupr.CUName = IVr.Addr0;
      Coupr.Comment = USetStr(1150);
      Coupr.Objects = IVr.Objects;
      if (ivrownr>=0 and ivrownr<MatRowCnt(IVr)) then begin
        MatRowGet(IVr,ivrownr,IVrw);
        Coupr.CurncyCode = IVrw.CurncyCode;
      end;
      if (blank(Coupr.CurncyCode)) then begin
        Coupr.CurncyCode = IVr.CurncyCode;
      end;
      Coupr.CCTransID = transid;
    case 2:
      Coupr.IVNr = ivnr;
      IVCashr.SerNr = ivnr;
      ReadFirstMain(IVCashr,1,true);
      Coupr.CUCode = IVCashr.CustCode;
      Coupr.CUName = IVCashr.Addr0;
      Coupr.Comment = USetStr(1804);
      Coupr.Objects = IVCashr.Objects;
      Coupr.CCTransID = transid;
    case 5:
      Coupr.IVNr = ivnr;
      Restr.SerNr = ivnr;
      ReadFirstMain(Restr,1,true);
      Coupr.CUCode = Restr.CustCode;
      Coupr.CUName = Restr.Comment;
      Coupr.Comment = USetStr(1923);
      Coupr.Objects = Restr.Objects;
      Coupr.CCTransID = transid;
  end;
  Coupr.Amount = v;
  Coupr.Status = status;
  Coupr.Direct = 0;
  Coupr.AuthDate = CurrentDate;
  Coupr.AuthorizationCode = authcode;
  Coupr.CardType = cardtype;
  RecordStore(Coupr,false);

  al = GetAreaLength(customerreceipt);
  if (al>7) then begin
    RecordNew(Noter);
    i = 7;
StoreCredCardSlip_EFTPOSReceiptCustText1:;
    if (al-i>255) then begin
      AddToText(GetStringFromArea(customerreceipt,i,255),Noter);
      i = i + 255;
      goto StoreCredCardSlip_EFTPOSReceiptCustText1;
    end else begin
      AddToText(GetStringFromArea(customerreceipt,i,al-i),Noter);
    end;
    Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
    Noter.Classification = "CUSTOMER";
    if (RecordStore(Noter,false)) then begin
      CreateRecordLink(Coupr,CurrentCompany,Noter,CurrentCompany);
      if (printf) then begin
        PrintCreditCardSlip_EFTPOS(Noter.SerNr);
      end;
    end;
  end;

  al = GetAreaLength(merchantreceipt);
  if (al>7) then begin
    RecordNew(merchantNoter);
    i = 7;
StoreCredCardSlip_EFTPOSReceiptCustText2:;
    if (al-i>255) then begin
      AddToText(GetStringFromArea(merchantreceipt,i,255),merchantNoter);
      i = i + 255;
      goto StoreCredCardSlip_EFTPOSReceiptCustText2;
    end else begin
      AddToText(GetStringFromArea(merchantreceipt,i,al-i),merchantNoter);
    end;
    merchantNoter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
    merchantNoter.Classification = "MERCHANT";
    if (RecordStore(merchantNoter,false)) then begin
      CreateRecordLink(Coupr,CurrentCompany,merchantNoter,CurrentCompany);
    end;
  end;

  return;
end;

global
updating procedure PrintCreditCardSlip_BamboraRn(record RcVc RepSpec)
begin
  record NotepadVc Noter;
  Integer i,rwcnt;
  
  StartReportNoHeaderJob("");
  EndHeader;
  Noter.SerNr = RepSpec.long1;
  if (ReadFirstMain(Noter,1,true)) then begin
    rwcnt = LineTextCnt(Noter);
    for (i=0;i<rwcnt;i=i+1) begin
      StartFormat(15);
      OutString(0,0,LineTextGet(Noter,i),false); 
      EndFormat;
    end; 
  end;
  EndJob;
end;

procedure PrintCreditCardSlip_Bambora(LongInt notesernr)
begin
  record RcVc RepSpec;
  
  RepSpec.repname = "PrintCreditCardSlip_BamboraRn";
  RepSpec.long1 = notesernr;
  RepSpec.Media = mtPrinter;
  RunReport(RepSpec,0); 
end;

global
updating function Boolean StoreCredCardSlip_Bambora(string card_product_name,val v,string cardnumber,string authcode,string transid,LongInt ivnr,integer ivrownr,string filename,Integer status,area merchantreceipt,area customerreceipt,boolean printcustomerf,boolean printmerchantf,boolean forcecopyprintf)
begin
  Boolean res;
  record CouponVc Coupr;
  record IVVc IVr;
  row IVVc IVrw;
  record IVCashVc IVCashr;
  record RestAccVc Restr;
  LongInt i,al;
  string 255 tstr;
  record NotepadVc merchantNoter;
  record NotepadVc Noter;
  integer cardtype;

  Coupr.CouponNr = transid;
  if (ReadFirstKey("CouponNr",Coupr,1,true)) then begin
    res = false;
    LogText(0,"StoreCredCardSlip_Bambora Coupr found");
    if (forcecopyprintf==false) then begin
      goto LStoreCredCardSlip_Bambora;
    end;
  end else begin
    res = true;
    Coupr.CouponNr = transid;
    Coupr.TransDate = CurrentDate;
    Coupr.SerNr = NextSerNr("CouponVc",Coupr.TransDate,-1,false,"");
  end;
  Coupr.CreditCardNr = cardnumber;
  Coupr.FileName = filename;
  switch (filename) begin
    case "IVVc": Coupr.OriginType = 0;// 0=IVVc, 1==Recibo 2 == IVCash 3 == IVCash2 4 == RestAccVc
    case "IVCashVc": Coupr.OriginType = 2;
    case "RestAccVc": Coupr.OriginType = 4;
  end;
  switch (Coupr.OriginType) begin
    case 0:
      Coupr.IVNr = ivnr;
      IVr.SerNr = ivnr;
      ReadFirstMain(IVr,1,true);
      Coupr.CUCode = IVr.CustCode;
      Coupr.CUName = IVr.Addr0;
      Coupr.Comment = USetStr(1150);
      Coupr.Objects = IVr.Objects;
      if (ivrownr>=0 and ivrownr<MatRowCnt(IVr)) then begin
        MatRowGet(IVr,ivrownr,IVrw);
        Coupr.CurncyCode = IVrw.CurncyCode;
      end;
      if (blank(Coupr.CurncyCode)) then begin
        Coupr.CurncyCode = IVr.CurncyCode;
      end;
      Coupr.CCTransID = transid;
    case 2:
      Coupr.IVNr = ivnr;
      IVCashr.SerNr = ivnr;
      ReadFirstMain(IVCashr,1,true);
      Coupr.CUCode = IVCashr.CustCode;
      Coupr.CUName = IVCashr.Addr0;
      Coupr.Comment = USetStr(1804);
      Coupr.Objects = IVCashr.Objects;
      Coupr.CCTransID = transid;
    case 5:
      Coupr.IVNr = ivnr;
      Restr.SerNr = ivnr;
      ReadFirstMain(Restr,1,true);
      Coupr.CUCode = Restr.CustCode;
      Coupr.CUName = Restr.Comment;
      Coupr.Comment = USetStr(1923);
      Coupr.Objects = Restr.Objects;
      Coupr.CCTransID = transid;
  end;
  Coupr.Amount = v;
  Coupr.Status = status;
  Coupr.Direct = 0;
  Coupr.AuthDate = CurrentDate;
  Coupr.AuthorizationCode = authcode;
  switch (card_product_name) begin
    case "VISA": cardtype = 1;
    case "MASTERCARD": cardtype = 2;
    case "AMEX": cardtype = 3;
    case "DINERS": cardtype = 4;
    case "SWITCH": cardtype = 5;
    case "MAESTRO": cardtype = 5;
  end;
  if (cardtype==0) then begin
    if (right(card_product_name,4)=="VISA") then begin
      cardtype = 1;
    end;
  end;

  Coupr.CardType = cardtype;
  RecordStore(Coupr,true);

  al = GetAreaLength(customerreceipt);
  if (al>0) then begin
    RecordNew(Noter);
    i = 0;
StoreCredCardSlip_BamboraReceiptCustText1:;
    if (al-i>255) then begin
      AddToText(GetStringFromArea(customerreceipt,i,255),Noter);
      i = i + 255;
      goto StoreCredCardSlip_BamboraReceiptCustText1;
    end else begin
      AddToText(GetStringFromArea(customerreceipt,i,al-i),Noter);
    end;
    Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
    Noter.Classification = "CUSTOMER";
    if (RecordStore(Noter,false)) then begin
      CreateRecordLink(Coupr,CurrentCompany,Noter,CurrentCompany);
      if (printcustomerf) then begin
        PrintCreditCardSlip_Bambora(Noter.SerNr);
      end;
    end;
  end;

  al = GetAreaLength(merchantreceipt);
  if (al>0) then begin
    RecordNew(merchantNoter);
    i = 0;
StoreCredCardSlip_BamboraReceiptCustText2:;
    if (al-i>255) then begin
      AddToText(GetStringFromArea(merchantreceipt,i,255),merchantNoter);
      i = i + 255;
      goto StoreCredCardSlip_BamboraReceiptCustText2;
    end else begin
      AddToText(GetStringFromArea(merchantreceipt,i,al-i),merchantNoter);
    end;
    merchantNoter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
    merchantNoter.Classification = "MERCHANT";
    if (RecordStore(merchantNoter,false)) then begin
      CreateRecordLink(Coupr,CurrentCompany,merchantNoter,CurrentCompany);
      if (printmerchantf) then begin
        PrintCreditCardSlip_Bambora(merchantNoter.SerNr);
      end;
    end;
  end;
LStoreCredCardSlip_Bambora:;
  StoreCredCardSlip_Bambora = res;
  return;
end;

global
updating procedure AddRahaxiReceiptNote_IVVc(record IVVc IVr,Area a)
begin
  record NotepadVc Noter;
  Integer fieldnr;
  LongInt i,l;
  string 255 tstr;
/*
  RecordNew(Noter);  
  l = GetAreaLength(a);
  for (i=0;i<l;i=i+1) begin
    tstr = GetTabTextFromArea(0,fieldnr,a);
    i = i + len(tstr) + 1;
    fieldnr = fieldnr + 1;
    LineTextPut(Noter,LineTextCnt(Noter),tstr);      
  end;
  if (RecordStore(Noter,false)) then begin
    CreateRecordLink(IVr,CurrentCompany,Noter,CurrentCompany);  
  end;
*/  
  return;
end;

global
updating procedure AddRahaxiReceiptNote_IVCashVc(record IVCashVc IVCashr,Area a)
begin
  record NotepadVc Noter;
  Integer fieldnr;
  LongInt i,l;
  string 255 tstr;

/*
  RecordNew(Noter);  
  l = GetAreaLength(a);
  for (i=0;i<l;i=i+1) begin
    tstr = GetTabTextFromArea(0,fieldnr,a);
    i = i + len(tstr) + 1;
    fieldnr = fieldnr + 1;
    LineTextPut(Noter,LineTextCnt(Noter),tstr);      
  end;
  if (RecordStore(Noter,false)) then begin
    CreateRecordLink(IVCashr,CurrentCompany,Noter,CurrentCompany);  
  end;
*/  
  return;
end;
