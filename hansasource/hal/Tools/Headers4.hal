//Headers4.hal
external procedure GetCurncyComment(string,var string);
external function Boolean DateLocked(Date,string);

global
procedure HTStdProb(string args, var string res)
begin
  res = "";
  if (nonblank(args)) then begin
    res = USetStr(7732);
    res = res & ": " & args;
  end;
return;
end;

global
procedure HTWSheet(LongInt a, LongInt b, var string res)
begin
  string 255 tstr;

  if (a==-1 and b==-1) then begin
    res = USetStr(7733);
  end else begin
    if (a==b) then begin
      res = USetStr(7734);
    end else begin
      res = USetStr(7735);
    end;
    res = res & " " & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
return;
end;

global
procedure HTWOrder(LongInt a, LongInt b, var string res)
begin
  string 255 tstr;
  
  if (a==-1 and b==-1) then begin
    res = USetStr(7738);
  end else begin
    if (a==b) then begin
      res = USetStr(7736);
    end else begin
      res = USetStr(7737);
    end;
    res = res & " " & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
return;
end;

global
procedure HTProject(string in,var string tstr)
begin
  string 255 t2;
  
  if (nonblank(in)) then begin
    tstr = USetStr(4852);
    tstr = tstr & in;
  end else begin
    tstr = USetStr(4851);
  end;
return;
end;

global
procedure HTWOrdStatus(Integer canc,Integer fin,Integer notf, var string res)
begin
  string 255 t2;
  
  res = "";
  if (canc==1) then begin
    t2 = USetStr(7739);
    res = res & t2;
  end;
  if (fin==1) then begin
    t2 = USetStr(7740);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
  if (notf==1) then begin
    t2 = USetStr(7741);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
return;
end;

global
procedure HTSOrdStatus(Integer nots,Integer pars,Integer noti, var string res)
begin
  string 255 t2;
  
  res = "";
  if (nots==1) then begin
    t2 = USetStr(7743);
    res = res & t2;
  end;
  if (pars==1) then begin
    t2 = USetStr(7744);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
  if (noti==1) then begin
    t2 = USetStr(7745);
    if (nonblank(res)) then begin
      res = res & " - ";
    end;
    res = res & t2;
  end;
return;
end;

global
procedure HTDeadline(string a,string b, var string res)
begin
 res = USetStr(7742);
 
 res = res & " ";
 res = res & a;
 if (nonblank(b)) then begin
   res = res & " : ";
   res = res & b;
 end;
return;
end;

global
procedure HTPOrdStatus(Integer art,integer flag1, Integer flag3, var string tstr, var string tstr2)
BEGIN
  tstr = "";
  tstr2 = "";
  if (art==0) then begin
    tstr = USetStr(1159); //overview
  end;
  if (art==1) then begin
    tstr = USetStr(1160); //Detailed
  end;
  if (art==2) then begin
    tstr = USetStr(8334);//Commitment
  end;
  if (art==3) then begin
    tstr = USetStr(8334);
  end;
  if ((flag1 == 1) and (flag3 == 0)) then begin
    tstr2 = USetStr(7009) & USetStr(1319) & USetStr(1138); // Closed and oked
  end;
  if ((flag1 == 0) and (flag3 == 1)) then begin
    tstr2 = USetStr(1139);
  end;
  if ((flag1 == 0) and (flag3 == 0)) then begin
    tstr2 = USetStr(1138); //Oked & Not OKed
  end;
  if ((flag1 == 1) and (flag3 == 1)) then begin
    tstr2 = USetStr(7009) & USetStr(1327) & USetStr(8193) & USetStr(1319) & USetStr(2366);
  end;
RETURN;
END;

global
procedure HTOT(string objcode,var string tstr)
BEGIN
  record OTVc OTr;
  tstr = "";
  OTr.Code = objcode;
  if (ReadFirstMain(OTr,1,true)) then begin
    tstr = USetStr(3016);
    tstr = tstr & OTr.Code;
    if (nonblank(OTr.Comment)) then begin
      tstr = tstr & "  ";
      tstr = tstr & OTr.Comment;
    end;
  end;
RETURN;
END;

global
procedure HTObj(string objstr,var string tstr)
BEGIN
  record ObjVc OBr;
  tstr = "";
  OBr.Code = objstr;
  if (ReadFirstMain(OBr,1,true)) then begin
    tstr = USetStr(3015);
    tstr = tstr & OBr.Code;
    if (nonblank(OBr.Comment)) then begin
      tstr = tstr & "  ";
      tstr = tstr & OBr.Comment;
    end;
  end else begin
    tstr = USetStr(3015) & objstr;
  end;
RETURN;
END;

global
procedure HTObjS(string frobj,string toobj,var string tstr)
BEGIN
  tstr = "";
  if (nonblank(frobj)) then begin
    tstr = USetStr(3015);
    tstr = tstr & frobj;
    if (nonblank(toobj)) then begin
      tstr = tstr & " : ";
      tstr = tstr & toobj;
    end;
  end;
RETURN;
END;

global
procedure HTAsset(string args,var string res)
BEGIN
  if (blank(args)) then begin
    res = USetStr(5296);
  end else begin
    res = USetStr(5333);
    res = res & " ";
    res = res & args;
  end;
RETURN;
END;

global
procedure HTAssets(string a,string b,var string res)
BEGIN
  if (blank(a) and blank(b)) then begin
	 res = USetStr(5340);
  end else begin
	 res = USetStr(5333);
	 res = res & " ";
	 res = res & a;
	 if (a <> b) then begin
		res = res & " : " & b;
	 end;
  end;
  RETURN;
END;

global
procedure HT2Per(Date a,Date b, var string tstr)
BEGIN
  string 255 tstr2;
  
  tstr2 = PackStrDate(a);
  tstr = USetStr(3013);
  tstr = tstr & tstr2;
  tstr = tstr & " : ";
  tstr2 = PackStrDate(b);
  tstr = tstr & tstr2;
  RETURN;
END;

global
procedure HT2CompPer(Date a,Date b, var string tstr)
BEGIN
  string 255 tstr2;
  
  tstr2 = PackStrDate(a);
  tstr = USetStr(2472);
  tstr = tstr & "  ";
  tstr = tstr & tstr2;
  tstr = tstr & " : ";
  tstr2 = PackStrDate(b);
  tstr = tstr & tstr2;
RETURN;
END;

global
procedure HT2Per2(Integer sid,Date a,Date b, var string tstr)
begin
  string 255 tstr2;
  
  tstr2 = PackStrDate(a);
  tstr = USetStr(sid) & "  ";
  tstr = tstr & tstr2;
  tstr = tstr & " : ";
  tstr2 = PackStrDate(b);
  tstr = tstr & tstr2;
  return;
end;

global
procedure HTAssetClass(string args,var string res)
BEGIN
  if (blank(args)) then begin
  end else begin
    res = USetStr(5332);
    res = res & " ";
    res = res & args;
  end;
  RETURN;
END;

global
procedure HTOrder(LongInt a,LongInt b,var string res)
begin
  if (a==-1 and b==-1) then begin
    res = USetStr(1823);
  end else begin
    if (a==b) then begin
      res = USetStr(1822);
    end else begin
      res = USetStr(1821);
    end;  
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

global
procedure HTProjects(string a,string b,var string res)
BEGIN
  record PRVc PRr;

  if (blank(a) and blank(b)) then begin
    res = USetStr(4851);
  end else begin
    res = USetStr(4852);
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end else begin
      PRr.Code = a;
      if (ReadFirstMain(PRr,1,true)) then begin
        res = res & " ";
        res = res & PRr.Name;
      end;
    end;
  end;
  RETURN;
END;

global
procedure HTPLDetailLevel(Integer detail,var string res)
BEGIN
  if (detail==0) then begin
     res = USetStr(1160); 
  end;
  if (detail==1) then begin
     res = USetStr(1159); 
  end;
  if (detail==2) then begin
     res = USetStr(1181); 
  end;
  if (detail==3) then begin
     res = USetStr(1182); 
  end;
  if (detail==4) then begin
     res = USetStr(1183); 
  end;
  if (detail==5) then begin
     res = USetStr(1160) & " " & USetStr(1181); 
  end;
  if (detail==6) then begin
     res = USetStr(1183) & " " & USetStr(1160); 
  end;
  RETURN;
END;

global
procedure HTLocations(string a, string b, var string res)
begin
  if (blank(a) and blank(b)) then begin
    res = USetStr(8961);
  end else begin
    res = USetStr(2768);
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

global
procedure HTLocationGroup(string a, string b, var string res)
begin
  if (blank(a) and blank(b)) then begin
    res = USetStr(8964);
  end else begin
    res = USetStr(8965);
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

global
procedure HTLocationClassification(string a, string b, var string res)
begin
  if (blank(a) and blank(b)) then begin
    res = USetStr(8966);
  end else begin
    res = USetStr(8967);
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

global
procedure HTEmployees(string a,string b,var string res)
BEGIN
  record UserVc USr;

  if (blank(a) and blank(b)) then begin
    res = USetStr(6809);
  end else begin
    res = USetStr(6810);
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end else begin
      USr.Code = a;
      if (ReadFirstMain(USr,1,true)) then begin
        res = res & " ";
        res = res & USr.Name;
      end;
    end;
  end;
  RETURN;
END;

global
procedure HTRess(string a,string b,var string res)
BEGIN
  record ResVc Resr;

  if (blank(a) and blank(b)) then begin
    res = USetStr(8192);
  end else begin
    res = USetStr(8176);
    res = res & " ";
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end else begin
      Resr.Code = a;
      if (ReadFirstMain(Resr,1,true)) then begin
        res = res & " ";
        res = res & Resr.Name;
      end;
    end;
  end;
  RETURN;
END;

global
procedure HTRooms(string a,string b,var string res)
BEGIN
  record ResVc Resr;

  if (blank(a) and blank(b)) then begin
    res = USetStr(8192);
  end else begin
    res = USetStr(8176);
    res = res & " ";
    res = res & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end else begin
      Resr.Code = a;
      if (ReadFirstMain(Resr,1,true)) then begin
        res = res & " ";
        res = res & Resr.Name;
      end;
    end;
  end;
  RETURN;
END;

global
procedure ExpBackupString(string comment)
BEGIN
  string 40 tstr;
  
  tstr = comment;
  ExportString("commentstring");
  NewLine; 
  ExportString(tstr);
  NewLine;
  NewLine;
  RETURN;
END;

global
function Boolean DefTest(Date td)
BEGIN
  Boolean res;

  res = false;
  if (DateLocked(td,"TRVc")) then begin res = true; end;
  DefTest = res;
  RETURN;
END;

global
function Boolean DatePrel(Date td)
begin
  Boolean res;
  record DBLockBlock DBLockRec;
  record CYBlock CompYear;

  res = false;
  BlockLoad(CompYear);
  if (CompYear.usePrel==0) then begin
    goto LDatePrel;
  end;
  BlockLoad(DBLockRec);
  if (nonblankdate(DBLockRec.TRNoPrel)) then begin
    if (td>DBLockRec.TRNoPrel) then begin res = true; end;
  end else begin
    res = true;
  end;
LDatePrel:;
  DatePrel = res;
  return;
end;

global
procedure HTDepartments(string a,string b,var string res)
BEGIN
  if (blank(a) and blank(b)) then begin
	 res = USetStr(9736);
  end else begin
	 res = USetStr(1156);
	 res = res & " ";
	 res = res & a;
	 if (a <> b) then begin
		res = res & " : " & b;
	 end;
  end;
  RETURN;
END;

global
procedure HTCategories(string a,string b,var string res)
BEGIN
  if (blank(a) and blank(b)) then begin
	 res = USetStr(9132);
  end else begin
	 res = USetStr(9131);
	 res = res & " ";
	 res = res & a;
	 if (a <> b) then begin
		res = res & " : " & b;
	 end;
  end;
  RETURN;
END;

global
procedure HTClasses(string a,string b,var string res)
BEGIN
  if (blank(a) and blank(b)) then begin
    res = USetStr(8317);
  end else begin
    res = USetStr(8771);
    res = res & a;
    if (a!=b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  RETURN;
END;

global
procedure HTIT(string a,var string res)
BEGIN
  if (blank(a)) then begin
    res = USetStr(9181);
  end else begin
    res = USetStr(1135);
    res = res & a;
  end;
  RETURN;
END;

global
procedure HTModel(Integer Model2,var string res)
BEGIN
  if (Model2==0) then begin
    res = USetStr(5285);
  end else begin
    res = USetStr(5286);
  end;
  RETURN;
END;

global
procedure HTValuesPerMonth(Integer ValuesPerDay,var string res)
BEGIN
  switch (ValuesPerDay) begin
    case 0:
      res = USetStr(5294);
    case 1:
      res = USetStr(5295);
    case 2:
      res = USetStr(5299);
  end;
  RETURN;
END;

global
procedure HTInventoryNrs(string a,string b,var string res)
BEGIN
  if (blank(a) and blank(b)) then begin
    res = USetStr(9636);
  end else begin
    res = USetStr(9637);
    res = res & ": ";
    res = res & a;
    if (a!=b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  RETURN;
END;

global
procedure HTCustZone(Integer dom,Integer eu,Integer noneu,var string res)
BEGIN
  string 255 temp;
  
  res = "";
  if ((dom!=0) and (eu!=0) and (noneu!=0)) then begin
    res = USetStr(5631);
    goto LHTCustZone;
  end;
  if (dom!=0) then begin
    res = USetStr(5626);
  end;
  if (eu!=0) then begin
    if (nonblank(res)) then begin
      temp = USetStr(1319);
      res = res & temp;
      temp = USetStr(5627);
      res = res & temp;
    end else begin
      res = USetStr(5627);
    end;
  end;
  if (noneu!=0) then begin
    if (nonblank(res)) then begin
      temp = USetStr(1319);
      res = res & temp;
      temp = USetStr(5628);
      res = res & temp;
    end else begin
      res = USetStr(5628);
    end;
  end;
LHTCustZone:;
  RETURN;
END;

global
procedure HTComp(Integer comp,Boolean balancef,Integer cur,var string res)
BEGIN
  string 255 tstr;
  
  res = USetStr(1305);
  if (comp==0) then begin
    if (balancef) then begin
      tstr = USetStr(1306);
    end else begin
      tstr = USetStr(1307);
    end;    
  end;
  if (comp==1) then begin
    tstr = USetStr(1308);
  end;
  if (comp==2) then begin
    tstr = USetStr(1309);
  end;
  if (comp==3) then begin
    tstr = USetStr(1310);
  end;
  if (comp==4) then begin
    tstr = USetStr(17870);
  end;
  res = res & tstr;
  if ((cur!=0) and (comp!=4)) then begin
    tstr = USetStr(1311);
  end else begin
    tstr = "";
  end;
  res = res & tstr;
  if (comp==5) then begin
    res = USetStr(17871);
  end;
  RETURN;
END;

global
procedure HTNot(Integer anot,var string res)
BEGIN
  if (anot==0) then begin
    res = USetStr(1313);
  end;  
  if (anot==1) then begin
    res = USetStr(1314);
  end;  
  if (anot==2) then begin
    res = USetStr(1315);
  end;  
  if (anot==3) then begin
    res = USetStr(1316);
  end;  
  if (anot==4) then begin
    res = USetStr(1317);
  end;  
  RETURN;
END;

procedure FindAppRepHeader(string shortname,var string headers)
BEGIN
  if (shortname=="BalRn") then begin
    headers = USetStr(3144);
  end;  
  if (shortname=="ResRn") then begin
    headers = USetStr(3145);
  end;  
  if (shortname=="KeyRn") then begin
    headers = USetStr(3221);
  end;  
  RETURN;
END;


global
procedure FindRepDefHeader(string repname,string shortname,var string headers)
BEGIN
  record RepDefBlock RepDefb;
  row RepDefBlock rdrw;
  Integer i,rwcnt;
  record UserDefRepVc UDRr;

  headers = "";
  BlockLoad(RepDefb);
  rwcnt = MatRowCnt(RepDefb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RepDefb,i,rdrw);
    if (rdrw.shortname==shortname) then begin
      headers = rdrw.header;
      goto LFindRepDefHeader;
    end;
  end;
LFindRepDefHeader:;
  if (blank(headers)) then begin
    FindAppRepHeader(repname,headers);
  end;
  RETURN;
END;

global
procedure HTItem(string item,var string res)
BEGIN
  if (blank(item)) then begin
    res = USetStr(1106);
  end else begin    
    res = USetStr(1107);
    res = res & " ";
    res = res & item;
  end;
  RETURN;
END;

global
procedure HTClass(string clas,var string res)
BEGIN
  if (blank(clas)) then begin
  end else begin    
    res = USetStr(5332);
    res = res & " ";
    res = res & clas;
  end;
  RETURN;
END;
  
global
procedure HTITs(string a,string b,var string res)
BEGIN
  if (blank(a) and blank(b)) then begin
    res = USetStr(1271);
  end else begin
    if (a==b) then begin
      res = USetStr(1135);
    end else begin
      res = USetStr(1135);
    end;
    res = res & " ";
    res = res & a;
    if (a!=b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  RETURN;
END;

global
procedure HTItemHistType(Integer inv,Integer shi,Integer rec,Integer ret,Integer proord,Integer pro,var string res)
BEGIN
  string 255 tstr;

  res = "";
  if (shi==1) then begin
    tstr = USetStr(1334);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (rec==1) then begin
    tstr = USetStr(1335);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (inv==1) then begin
    tstr = USetStr(1330);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (proord==1) then begin
    tstr = USetStr(11697);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (pro==1) then begin
    tstr = USetStr(1338);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (ret==1) then begin
    tstr = USetStr(2057);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  RETURN;
END;  

global
procedure HTItemHistType2(Integer dpr,Integer wsh,Integer stt,Integer stmov,Integer retsupp,var string res)
BEGIN
  string 255 tstr;

  res = "";
  if (retsupp==1) then begin
    tstr = USetStr(11698);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (dpr==1) then begin
    tstr = USetStr(17167);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (stmov==1) then begin
    tstr = USetStr(1336);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (stt==1) then begin
    tstr = USetStr(4999);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  if (wsh==1) then begin
    tstr = USetStr(1792);
    if (nonblank(res)) then begin res = res & ", "; end;  
    res = res & tstr;
  end;
  RETURN;
END;  

global
procedure HTObsTypes(string frtyp,string totyp,var string res)
BEGIN
  record OBTypeVc OBTyper;
  
  res = USetStr(12638);
  if (frtyp==totyp) then begin
    OBTyper.Code = frtyp;
    if (ReadFirstMain(OBTyper,1,true)) then begin
      res = USetStr(12639);
      res = res & " ";
      res = res & OBTyper.Code;
      if (nonblank(OBTyper.Comment)) then begin
        res = res & "  ";
        res = res & OBTyper.Comment;
      end;
    end;
  end else begin
    if (blank(frtyp) and blank(totyp)) then begin
      res = USetStr(12638);
    end else begin
      res = USetStr(12639);
      res = res & " ";
      res = res & frtyp;
      res = res & " : " & totyp;
    end;
  end;  
  RETURN;
END;

global
procedure HTPositions(string a, string b, var string res)
begin
  if (blank(a) and blank(b)) then begin
     res = USetStr(14115);
  end else begin
     res = USetStr(14116);
     res = res & " " & a;
     if (a<>b) then begin
        res = res & " : ";
        res = res & b;
     end;
  end;
  return;
end;

global
procedure HTDispGroup(string a,var string res)
BEGIN
  if (nonblank(a)) then begin
    res = USetStr(4898) & ": " & a;
  end;
  RETURN;
END;

global
function string 255 HTProdOperations(LongInt frprod,LongInt toprod)
begin
  string 255 res;
  
  if ((frprod<0) and (toprod<0)) then begin
    res = USetStr(16462);
  end else begin
    res = USetStr(16461);
    res = res & " " & frprod;
    if (frprod <> toprod) then begin
      res = res & " : " & toprod;
    end;
  end;  
  HTProdOperations = res;
  RETURN;
END;

global
function string 255 HTProds(LongInt frprod,LongInt toprod)
begin
  string 255 res;
  
  if ((frprod<0) and (toprod<0)) then begin
    res = USetStr(16464);
  end else begin
    res = USetStr(16463);
    res = res & " " & frprod;
    if (frprod <> toprod) then begin
      res = res & " : " & toprod;
    end;
  end;  
  HTProds = res;
  RETURN;
END;

global
procedure HTSerialNos(string a,string b,var string res)
begin
  if (blank(a) and blank(b)) then begin
    res = USetStr(22006);
  end else begin
    if (a==b) then begin
      res = USetStr(1141);
    end else begin
      res = USetStr(1141);
    end;
    res = res & " ";
    res = res & a;
    if (a!=b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

global
procedure HTReasons(string a,string b,var string res)
begin
  if (blank(a) and blank(b)) then begin
    res = USetStr(22007);
  end else begin
    if (a==b) then begin
      res = USetStr(22008);
    end else begin
      res = USetStr(22008);
    end;
    res = res & " ";
    res = res & a;
    if (a!=b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

global
procedure HTAssetType(Integer tangible,Integer intangible,Integer investments,Integer shortterm,var string res)
begin
  res = "";
  if (tangible!=0) then begin
    res = res & USetStr(17357);
  end;
  if (intangible!=0) then begin
    if (nonblank(res)) then begin
      res = res & ",";
    end;
    res = res & USetStr(17358);
  end;
  if (investments!=0) then begin
    if (nonblank(res)) then begin
      res = res & ",";
    end;
    res = res & USetStr(17359);
  end;
  if (shortterm!=0) then begin
    if (nonblank(res)) then begin
      res = res & ",";
    end;
    res = res & USetStr(17360);
  end;
  return;
end;

global
procedure HTResLoc(string resloc,var string res)
begin
  if (nonblank(resloc)) then begin
    res = USetStr(17980) & ": " & resloc;
  end else begin
    res = USetStr(17981);
  end;
  return;
end;

global
procedure HTResClass(string resclass,var string res)
begin
  if (nonblank(resclass)) then begin
    res = USetStr(17982) & ": " & resclass;
  end else begin
    res = USetStr(17983);
  end;
  return;
end;

global
procedure HTbasecurncy(Integer basecurncy,var string res)
begin
  record BaseCurBlock BCb;
  
  res = "";
  BlockLoad(BCb);
  res = USetStr(2513);
  if (basecurncy==0) then begin
    res = res & BCb.BaseCur1;
  end;
  if (basecurncy==1) then begin
    res = res & BCb.BaseCur2;
  end;
  return;
end;

global
procedure HTbasecurncy_comment(Integer basecurncy,var string res)
begin
  record BaseCurBlock BCb;
  
  res = "";
  BlockLoad(BCb);
  if (basecurncy==0) then begin
    GetCurncyComment(BCb.BaseCur1,res);
  end;
  if (basecurncy==1) then begin
    GetCurncyComment(BCb.BaseCur2,res);
  end;
  res = USetStr(2513) & res;
  return;
end;

global
procedure HTReconciled(Integer recon,Integer unrecon,var string res)
begin  
  res = "";
  if (recon!=0) then begin
    res = USetStr(6934);
  end;
  if (unrecon!=0) then begin
    if (nonblank(res)) then begin
      res = res & " " & USetStr(22173);
    end;
    res = res & " " & USetStr(6935);
  end;
  return;
end;

global
procedure HTConsigment(Integer consg, var string tstr)
begin
  switch (consg) begin
    case 0: tstr = USetStr(17239);
    case 1: tstr = USetStr(17240);
    case 2: tstr = USetStr(17241);
  end;
  return;
end;

global
procedure HTRoute(string Route,var string tstr)
begin
  tstr = USetStr(26304) & ": " & Route;
  return;
end;

global
procedure HTLocalMachines(string a, string b, var string res)
begin
  if (blank(a) and blank(b)) then begin
     res = USetStr(28107);
  end else begin
     res = USetStr(28108) & " ";
     res = res & a;
     if (a<>b) then begin
        res = res & " : ";
        res = res & b;
     end;
  end;
  return;
end;

global
procedure HTPayModes(string a, string b, var string res)
begin
  if (blank(a) and blank(b)) then begin
     res = USetStr(28109);
  end else begin
     res = USetStr(28110) & " ";
     res = res & a;
     if (a<>b) then begin
        res = res & " : ";
        res = res & b;
     end;
  end;
  return;
end;

global
procedure HTOnHoldCustomers(Integer a,var string res)
begin
  switch (a) begin
    case 0: res = USetStr(5603);
    case 1: res = USetStr(5604);
    case 2: res = USetStr(5605);
  end;
  return;
end;

global
procedure HTReportingExchangeRates(Integer a,var string res)
begin
  if (a==0) then begin
    res = USetStr(3239);
  end else begin
    res = USetStr(3240);
  end;
  return;
end;

global
procedure HTServiceOrder(LongInt a,LongInt b,var string res)
begin
  if (a==-1 and b==-1) then begin
    res = USetStr(7635);
  end else begin
    if (a==b) then begin
      res = USetStr(7629);
    end else begin
      res = USetStr(7636);
    end;  
    res = res  & " " & a;
    if (a<>b) then begin
      res = res & " : ";
      res = res & b;
    end;
  end;
  return;
end;

