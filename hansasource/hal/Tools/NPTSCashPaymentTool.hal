external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetFullCurncyPurchaseRate (var string,Date,var val,var val,var val,var val,var val);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);

global
procedure NPTSCashPaymentonOpenTool(string sumcrncy,val sum4,val v,var Array string acrncy,var Array val acrncytotaldue,var Array val acrncyval,var Integer acrncnt)
begin
  Integer i;
  val fr,to1,to2,br1,br2,temp;
  Array Boolean achangecrncyf;
  string 255 crncy;
  record BaseCurBlock BCb;
  
  BlockLoad(BCb);
  CntPOSCurrencies(acrncy,achangecrncyf,acrncnt);
  for (i=0;i<acrncnt;i=i+1) begin
    if (sumcrncy==BCb.BaseCur1) then begin
      crncy = acrncy[i];
      if (GetFullCurncyPurchaseRate(crncy,CurrentDate,fr,to1,to2,br1,br2)==false) then begin
        GetFullCurncyRate(crncy,CurrentDate,fr,to1,to2,br1,br2);
      end;
      Base1ToOther(acrncy[i],sum4,fr,to1,to2,br1,br2,temp,DefaultCurRoundOff);
      acrncytotaldue[i] = temp;
      Base1ToOther(acrncy[i],-v,fr,to1,to2,br1,br2,temp,DefaultCurRoundOff);
      acrncyval[i] = temp;
    end else begin
      CurValToOtherCur(CurrentDate,sumcrncy,sum4,acrncy[i],temp,DefaultCurRoundOff);
      acrncytotaldue[i] = temp;
      CurValToOtherCur(CurrentDate,sumcrncy,-v,acrncy[i],temp,DefaultCurRoundOff);
      acrncyval[i] = temp;
    end;
  end;
  return;
end;

global
procedure RecalculateNPTSCashPaymentTool(record RcVc RepSpec,Array string acrncy,
                                        var Array val acashreceived,var Array val achangegiven,var Array val aamountdue,var Array val achangedue,
                                        Integer acrncnt,
                                        var val tot_invcur_changedue,var val tot_invcur_changegiven,var val tot_invcur_amountdue,var val tot_invcur_cashreceived)
begin
  Integer i;
  val fr,to1,to2,br1,br2;
  val tempchangegiven,temp2;
  val tempcashreceived;
  string 255 tstr;
  val tot;
  record BaseCurBlock BCb;
  
  BlockLoad(BCb);
  tot_invcur_changedue = blankval;
  tot_invcur_changegiven = blankval;
  tot_invcur_amountdue = blankval;
  tot_invcur_cashreceived = blankval;
  
  for (i=0;i<acrncnt;i=i+1) begin
    tempcashreceived = acashreceived[i];

    if (GetFullCurncyPurchaseRate(acrncy[i],CurrentDate,fr,to1,to2,br1,br2)==false) then begin
      GetFullCurncyRate(acrncy[i],CurrentDate,fr,to1,to2,br1,br2);
    end;

    if (RepSpec.CurncyCode==BCb.BaseCur1) then begin    
      tempcashreceived = MulRateToBase1(acrncy[i],tempcashreceived,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      tot_invcur_cashreceived = tot_invcur_cashreceived + tempcashreceived;    
      Base1ToOther(acrncy[i],-RepSpec.vals0,fr,to1,to2,br1,br2,tempcashreceived,DefaultCurRoundOff);
      aamountdue[i] = tempcashreceived;
    end else begin
      CurValToOtherCur(CurrentDate,acrncy[i],acashreceived[i],RepSpec.CurncyCode,tempcashreceived,DefaultCurRoundOff);
      tot_invcur_cashreceived = tot_invcur_cashreceived + tempcashreceived;    
      CurValToOtherCur(CurrentDate,RepSpec.CurncyCode,-RepSpec.vals0,acrncy[i],tempcashreceived,DefaultCurRoundOff);
      aamountdue[i] = tempcashreceived;
    end;
  end;

  tot = RepSpec.vals0 + tot_invcur_cashreceived;
  for (i=0;i<acrncnt;i=i+1) begin
    tempchangegiven = achangegiven[i];

    if (GetFullCurncyPurchaseRate(acrncy[i],CurrentDate,fr,to1,to2,br1,br2)==false) then begin
      GetFullCurncyRate(acrncy[i],CurrentDate,fr,to1,to2,br1,br2);
    end;

    if (RepSpec.CurncyCode==BCb.BaseCur1) then begin    
      tempchangegiven = MulRateToBase1(acrncy[i],tempchangegiven,fr,to1,to2,br1,br2,DefaultCurRoundOff);
      tot_invcur_changegiven = tot_invcur_changegiven + tempchangegiven;
      Base1ToOther(acrncy[i],tot,fr,to1,to2,br1,br2,tempchangegiven,DefaultCurRoundOff);
      achangedue[i] = tempchangegiven;
    end else begin
      CurValToOtherCur(CurrentDate,acrncy[i],achangegiven[i],RepSpec.CurncyCode,tempchangegiven,DefaultCurRoundOff);
      tot_invcur_changegiven = tot_invcur_changegiven + tempchangegiven;
      CurValToOtherCur(CurrentDate,RepSpec.CurncyCode,tot,acrncy[i],tempchangegiven,DefaultCurRoundOff);
      achangedue[i] = tempchangegiven;
    end;
  end;
  
  
  for (i=0;i<acrncnt;i=i+1) begin
    if (GetFullCurncyPurchaseRate(acrncy[i],CurrentDate,fr,to1,to2,br1,br2)==false) then begin
      GetFullCurncyRate(acrncy[i],CurrentDate,fr,to1,to2,br1,br2);
    end;
    if (RepSpec.CurncyCode==BCb.BaseCur1) then begin    

      temp2 = achangedue[i];
    
      Base1ToOther(acrncy[i],tot_invcur_changegiven,fr,to1,to2,br1,br2,tempchangegiven,DefaultCurRoundOff);    
      temp2 = temp2 - tempchangegiven;    
      if (RepSpec.vals1>0) then begin
        if (temp2<0) then begin temp2 = 0.00; end;
      end else begin
        if (temp2>0) then begin temp2 = 0.00; end;
      end;
      achangedue[i] = temp2;

      temp2 = aamountdue[i];
      Base1ToOther(acrncy[i],tot_invcur_cashreceived,fr,to1,to2,br1,br2,tempcashreceived,DefaultCurRoundOff);    
      temp2 = temp2 - tempcashreceived;    
      if (RepSpec.vals1>0) then begin
        if (temp2<0) then begin temp2 = 0.00; end;
      end else begin
        if (temp2>0) then begin temp2 = 0.00; end;
      end;
      aamountdue[i] = temp2;
    end else begin
      temp2 = achangedue[i];
      CurValToOtherCur(CurrentDate,RepSpec.CurncyCode,tot_invcur_changegiven,acrncy[i],tempchangegiven,DefaultCurRoundOff);      
      temp2 = temp2 - tempchangegiven;    
      if (RepSpec.vals1>0) then begin
        if (temp2<0) then begin temp2 = 0.00; end;
      end else begin
        if (temp2>0) then begin temp2 = 0.00; end;
      end;
      achangedue[i] = temp2;

      temp2 = aamountdue[i];
      CurValToOtherCur(CurrentDate,RepSpec.CurncyCode,tot_invcur_cashreceived,acrncy[i],tempcashreceived,DefaultCurRoundOff);      
      temp2 = temp2 - tempcashreceived;    
      if (RepSpec.vals1>0) then begin
        if (temp2<0) then begin temp2 = 0.00; end;
      end else begin
        if (temp2>0) then begin temp2 = 0.00; end;
      end;
      aamountdue[i] = temp2;
    end;
  end;

  tot_invcur_changedue = tot - tot_invcur_changegiven;

  if (RepSpec.vals1>0) then begin
    if (tot_invcur_changedue<0) then begin tot_invcur_changedue = 0.00; end;
  end else begin
    if (tot_invcur_changedue>0) then begin tot_invcur_changedue = 0.00; end;
  end;
  tot_invcur_amountdue = -RepSpec.vals0 - tot_invcur_cashreceived;
  if (RepSpec.vals1>0) then begin
    if (tot_invcur_amountdue<0) then begin tot_invcur_amountdue = 0.00; end;
  end else begin
    if (tot_invcur_amountdue>0) then begin tot_invcur_amountdue = 0.00; end;
  end;
  return;
end;
