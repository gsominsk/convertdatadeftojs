external procedure SetActTypeValues(record ActVc);
external function Boolean PasteActTypeInAct(string,var record ActVc);
remote function Integer OYApprovalStatus(record OYVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external procedure GetCountryName(string,string,var string);
external function val CalcUnitFactor(string,val);
external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external procedure OYVc_FillupTaxTemplate(var record OYVc);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);
external procedure OYVc_ChangeQuantityRecepy(string,val,Integer,var record OYVc);
external procedure RowCalculateTaxMatrix_OYVc(var record OYVc,Integer,row OYVc);
external procedure AddPerceptionTaxesRows_OYVc(var record OYVc);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure RemoveOldProjectObjects(string,var string);
external function Boolean HasSalesmanChanged(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObj(string,var Integer,var string);
external procedure AddObj(string,var string);
external function Boolean CostPriceForGP(string,string,string,string,var val);
external procedure OYVc_PastePrice(var record OYVc,Integer,var Boolean);
external procedure GetUserObject(string,var string);
external procedure RemoveOldPersObjects(string,var string);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure RemoveOldCustObjects(string,var string);
external procedure SetSalesMan(var string,string);
external function Boolean GetPD(var record PDVc);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function string 255 FindINObjects(string,string);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external procedure OYVc_PasteSalesMan(var record OYVc,string);
external procedure RemoveOldUserObjects(string,var string);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var Integer,var string);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure OYDchsum(record OYVc,Integer);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external function Integer CheckSerialStatus(string,string,var string);
external procedure PasteSalesManInOY(var record OYVc);
external procedure GetBaseCurncy(Integer,var string);
external procedure TBBUSumup(var record TBBUVc);
external procedure GetPRName(string,var string);
external procedure GetPayDealText(string,string,var string);
external procedure FindUserMailboxName(string,var string,var string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetProjectPriceAndCost(string,string,string,string,string,Integer,var val,var val,var string,var val,var val,var string);
external function Boolean SetUnitFactor(string,var val,val,val,val,var val,var val,var val,var string,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean QtyDepPriceL(string);
external procedure OYGetCalcItemPrice(record INVc,record OYVc,Integer,var val);
external function Boolean OYVc_ExplodeRecepy(record INVc,val,var record OYVc,string,Integer);
external function Boolean OYDchrsum(var record OYVc,Integer,Integer);
external procedure OYSumup(var record OYVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean INVc_AllowSales(record INVc,var LongInt);
external function string 20 FindCustRoute(string,string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);

global
procedure OYVc_PasteInvCountry(var record OYVc OYp,string oldCountryCode)
begin 
  if (OYp.InvCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(OYp.InvCountry)) then begin 
      GetCountryName(OYp.InvCountry,OYp.LangCode,OYp.InvCountryName);
    end else begin
      OYp.InvCountryName = "";
    end;   
  end;
  return;
end;

global
procedure OYVc_PasteDelCountry(var record OYVc OYp,string oldCountryCode)
begin 
  if (OYp.DelCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(OYp.DelCountry)) then begin 
      GetCountryName(OYp.DelCountry,OYp.LangCode,OYp.DelCountryName);
    end else begin
      OYp.DelCountryName = "";
    end;
  end;
  return;
end;

global
procedure OYGetRate(var record OYVc OYp)
begin
  val from,to1,to2,base1,base2;
  val sum;
  string 5 crncy;
 
  crncy = OYp.CurncyCode;
  GetFullCurncyRate(crncy,OYp.OYDate,from,to1,to2,base1,base2);
  OYp.CurncyCode = crncy;
  OYp.FrRate = from;
  OYp.ToRateB1 = to1;
  OYp.ToRateB2 = to2;
  OYp.BaseRate1 = base1;
  OYp.BaseRate2 = base2;  
  sum = MulRateToBase1(OYp.CurncyCode,OYp.Sum4,from,to1,to2,base1,base2,DefaultCurRoundOff);
  OYp.BaseSum4 = sum;  
  return;
end;

global
procedure OYVc_PasteInvoiceToCode(var record OYVc OYr)
begin
  record CUVc CUr;
  
  CUr.Code = OYr.InvoiceToCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.PayDeal)) then begin
      OYr.PayDeal = CUr.PayDeal;
    end;
  end;
end;

global
function Boolean PasteCustInOY(var record OYVc OYp,string custcode,string efstr,var string warning,Boolean updateallf)
begin
  record RebVc Rebr;
  record CUVc CUr;
  Boolean res;
  string 255 tstr,tstr2;
  Integer i;
  record PDVc PDr;
  record CCatVc CCatr;
  Time blankt;
  record PLDefVc PLDefR;

  if ((efstr!=OYp.CustCode) and (nonblank(efstr))) then begin
    tstr = OYp.Objects;
    RemoveOldCustObjects(efstr,tstr);
    OYp.Objects = tstr;
  end;  
  warning = "";
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = true;
    CCatr.Code = CUr.CustCat;
    if (ReadFirstMain(CCatr,1,true)) then begin end;
    Rebr.Code = CUr.RebCode;
    if (blank(Rebr.Code)) then begin
      Rebr.Code = CCatr.RebCode;
    end;
    if (ReadFirstMain(Rebr,1,true)) then begin
      OYp.DiscPerc = Rebr.DiscPerc;
    end;
    OYp.Addr0 = CUr.Name;
    OYp.Addr1 = CUr.InvAddr0;
    OYp.Addr2 = CUr.InvAddr1;
    OYp.Addr3 = CUr.InvAddr2;
    OYp.InvAddr3 = CUr.InvAddr3;
    OYp.InvAddr4 = CUr.InvAddr4;
    OYp.InvCountry = CUr.CountryCode;
    if ((nonblank(CUr.DelAddr0)) or (nonblank(CUr.DelAddr1)) or (nonblank(CUr.DelAddr2)) or (nonblank(CUr.DelAddr3)) or (nonblank(CUr.DelAddr4))) then begin
      OYp.ShipAddr0 = CUr.Name;
      OYp.ShipAddr1 = CUr.DelAddr0;
      OYp.ShipAddr2 = CUr.DelAddr1;
      OYp.ShipAddr3 = CUr.DelAddr2;
      OYp.DelAddr3 = CUr.DelAddr3;
      OYp.DelAddr4 = CUr.DelAddr4;
      OYp.DelCountry = CUr.DelCountry;
    end else begin  //BS should blank del address if you switch customer (as on order)
      OYp.ShipAddr0 = "";
      OYp.ShipAddr1 = "";
      OYp.ShipAddr2 = "";
      OYp.ShipAddr3 = "";
      OYp.DelAddr3 = "";
      OYp.DelAddr4 = "";
      OYp.DelCountry = "";
    end;
    OYp.BankCode = CUr.AccOperator;
    OYp.ExportFlag = CUr.ExportFlag;
    OYp.CustCat = CUr.CustCat;
    OYp.PayDeal = CUr.PayDeal;
    OYp.Objects = AddObjectToObjectList(OYp.Objects,CUr.Objects);    
    OYp.CurncyCode = CUr.CurncyCode;
    OYp.LangCode = CUr.LangCode;
    OYp.InvoiceToCode = CUr.InvoiceToCode;
    OYVc_PasteInvoiceToCode(OYp);
    OYp.ShipDeal = CUr.ShipDeal;
    OYp.ShipMode = CUr.ShipMode;
    OYp.Comment = CUr.OrderComment;
    OYp.PriceList = CUr.PLCode;
    if (blank(OYp.PriceList)) then begin
      OYp.PriceList = CCatr.PLCode;
    end;
    OYp.RebCode = CUr.RebCode;
    if (blank(OYp.RebCode)) then begin
      OYp.RebCode = CCatr.RebCode;
    end;
    tstr = OYp.PriceList;
    GetPriceList(OYp.CustCat,OYp.OYDate,blankt,tstr,i);
    OYp.InclVAT = i;
    OYp.NoTax1 = CUr.NoTax1;
    OYp.NoTax2 = CUr.NoTax2;
    if (nonblank(tstr)) then begin
      OYp.PriceList = tstr;
    end;
    if (blank(OYp.PriceList)) then begin
      PDr.Code = OYp.PayDeal;
      if (GetPD(PDr)) then begin
        OYp.PriceList = PDr.PriceList;
        PLDefR.Code = OYp.PriceList;
        if (ReadFirstMain(PLDefR,1,true)) then begin
          OYp.InclVAT = PLDefR.InclVAT;
        end;
      end;
    end;
    OYp.CustVATCode = CUr.VATCode;
    if (CUr.TaxTemplateCode!=OYp.CustTaxTemplateCode) then begin
      OYVc_FillupTaxTemplate(OYp);
      OYp.CustTaxTemplateCode = CUr.TaxTemplateCode;
    end;
    OYp.Phone = CUr.Phone;
    OYp.Fax = CUr.Fax;
    OYp.VATNr = CUr.VATNr;
    OYp.CustVATCode = CUr.VATCode;
    OYp.Region = CUr.Region;
    warning = CUr.WarnText1;
    OYGetRate(OYp);    
    if (updateallf) then begin
      OYp.Sorting = FindCustRoute(OYp.CustCode,OYp.Location,OYp.DelAddrCode);
      OYp.CustContact = CUr.Person;
      SetSalesMan(tstr,CUr.SalesMan);
      tstr2 = OYp.Objects;
      RemoveOldPersObjects(OYp.SalesMan,tstr2);
      OYp.Objects = tstr2;
      OYp.SalesMan = tstr;
      PasteSalesManInOY(OYp);
      GetUserObject(OYp.SalesMan,tstr);    
      OYp.Objects = AddObjectToObjectList(OYp.Objects,tstr);
    end;
    AddPerceptionTaxesRows_OYVc(OYp);
    OYVc_PasteInvCountry(OYp,"");
    OYVc_PasteDelCountry(OYp,"");
  end;  
  PasteCustInOY = res;
  return;
end;

global
procedure OYMultiLineText(record OYVc OYr,record INVc INr,string  langcode,Integer arow)
begin
  row OYVc OYrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(OYr,OYrw,1);
    OYrw.Spec = tstr;
    MatRowInsert(OYr,arow+tcnt-1,OYrw);
    tcnt = tcnt + 1;
  end;
  return;
end;

global
procedure OYVc_PasteQuant(var record OYVc OYr,Integer rownr,Boolean calcuntiqf,var Boolean chsum)
begin
  record INVc INr;
  row OYVc OYrw;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice,chrsum;
  Boolean pritemf;
  string 10 markup;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  Time blankt;

  price = OYrw.Price;
  BlockLoad(GenOptRec);
  chsum = false;
  chrsum = false;
  MatRowGet(OYr,rownr,OYrw);
  price = OYrw.Price;
  vreb = OYrw.vRebate;
  if (GetItemPriceDiscount3(OYrw.ArtCode,OYrw.Quant,INr,OYr.CurncyCode,
                            OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,
                            OYr.LangCode,OYr.CustCat,OYr.PriceList,OYr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            OYr.ExportFlag,calcprice,OYr.OYDate,blankt,OYr.CustCode,false,dummyf,OYr.PayDeal,tax2code,tax2prc,OYr.Region,OYr.Location,taxtemplatecode)) then begin
    if (nonblank(OYr.PriceList)) then begin
      if (QtyDepPriceL(OYr.PriceList)) then begin
        OYrw.Price = price;
      end;
    end;
    if (calcprice) then begin
      MatRowPut(OYr,rownr,OYrw);
      temp = -1;
      OYGetCalcItemPrice(INr,OYr,rownr,temp);
      MatRowGet(OYr,rownr,OYrw);
    end;
    if (INr.ExplodeRec==0) then begin
      if ((INr.ItemType==kItemTypeStructured) and (nonblank(INr.Recepy))) then begin
        OYrw.Recepy = INr.Recepy;
      end else begin
        OYrw.Recepy = "";
      end;
    end;
    OYrw.vRebate = vreb;
    if (INr.ExplodeRec==0) then begin
      if (baseprice<>0) then begin
        OYrw.BasePrice = baseprice;
      end;
    end;
    chrsum = true;
    if (calcuntiqf) then begin
      OYrw.UnitFactQuant = CalcUnitFactor(OYrw.UnitCode,OYrw.Quant);
    end;
    MatRowPut(OYr,rownr,OYrw);
    if (INr.ExplodeRec!=0) then begin
      if (nonblank(OYrw.Recepy)) then begin
        if (OYVc_ExplodeRecepy(INr,OYrw.Quant,OYr,OYrw.Recepy,rownr)) then begin
          MatRowGet(OYr,rownr,OYrw);
          OYrw.Recepy = "";
          OYrw.BasePrice = blankval;
          MatRowPut(OYr,rownr,OYrw);
        end;
      end else begin
        OYVc_ChangeQuantityRecepy(OYrw.ArtCode,OYrw.Quant,rownr,OYr);
      end;
    end;
  end;
  if (chrsum) then begin
    chsum = OYDchrsum(OYr,rownr,GenOptRec.UseDiscount);
  end;
  return;
end;

global
function string 255 CustArtCode(string CustCode,string ArtCode)
begin
  record CUINVc CUINr;

  CUINr.CustCode = CustCode;
  CUINr.ArtCode = ArtCode;
  ReadFirstMain(CUINr,2,true);
  CustArtCode = CUINr.CustArtCode;
  return;
end;

global
function Boolean OYVc_PasteArtCode(var record OYVc OYr,Integer rownr,var string inwarning,var string warning)
begin
  Boolean chsum,res;
  Boolean chrsum;
  record INVc INr;
  row OYVc OYrw;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb,priceincur;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf;
  val UnitFactQuant,UnitFactPrice,Quant;
  string 10 markup,markupincur;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf,varf;
  LongInt ErrorCode;
  record TaxMatrixVc TMr;
  Time blankt;
  string 60 sz,msk,mskrep;
  string 200 varsubset;

  BlockLoad(GenOptRec);
  chsum = false;
  chrsum = false;
  pritemf = true;
  MatRowGet(OYr,rownr,OYrw);
  OYrw.Price = BlankVal;
  OYrw.vRebate = BlankVal;
  OYrw.Sum = BlankVal;
  if (GetItemPriceDiscount3(OYrw.ArtCode,OYrw.Quant,INr,OYr.CurncyCode,
                            OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,
                            OYr.LangCode,OYr.CustCat,OYr.PriceList,OYr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            OYr.ExportFlag,calcprice,OYr.OYDate,blankt,OYr.CustCode,false,dummyf,OYr.PayDeal,tax2code,tax2prc,OYr.Region,OYr.Location,taxtemplatecode)) then begin
    OYrw.TaxTemplateCode = FillupTaxMatrix(0,OYr.BranchID,OYr.CustCode,OYr.CustCat,OYr.DelAddrCode,taxtemplatecode,TMr);
    if (vreb==0) then begin
      vreb = blankval;
    end;
    OYrw.Price = price;
    OYrw.Spec = curitemname;
    OYrw.vRebate = vreb;
    OYrw.VATCode = vatcode;
    OYrw.BasePrice = baseprice;
    OYrw.SalesAcc = salesacc;
    OYrw.ArtCode = INr.Code;
    OYrw.Objects = FindINObjects(INr.Objects,INr.Group);
    OYrw.UnitCode = INr.Unittext;
    OYrw.UnitXval = INr.Width;
    OYrw.UnitYval = INr.Height;
    OYrw.UnitZval = INr.Depth;
    OYrw.PriceFactor = INr.PriceFactor;
    OYrw.Perceptions = INr.Perceptions;
    OYrw.CustArtCode = CustArtCode(OYr.CustCode,OYrw.ArtCode);
    GetTaxesDiscounts(OYr.CustCode,OYr.OYDate,OYrw.VATCode,tax2code,t,tax2reb);
    if (OYr.NoTax2==0) then begin
      OYrw.TAX2Code = tax2code;
      OYrw.TAX2Prc = tax2prc;
      OYrw.TAX2Reb = tax2reb;
      OYrw.TAX2Acc = GetTax2Acc(OYrw.TAX2Code);
    end;
    if (OYr.NoTax1==0) then begin
      OYrw.TAX1Reb = t;
    end;
    if (nonblank(OYrw.UnitCode)) then begin
      price = OYrw.Price;
      Quant = OYrw.Quant;
      chrsum = true;
      if (nonblank(OYrw.UnitCode)) then begin
        chrsum = SetUnitFactor(OYrw.UnitCode,UnitFactQuant,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,UnitFactPrice,Quant,price,OYrw.UnitComment,false);
      end;
      if (chrsum) then begin
        OYrw.UnitFactQuant = UnitFactQuant;
        OYrw.UnitFactPrice = UnitFactPrice;
        OYrw.Quant = Quant;
        OYrw.Price = price;
      end;
    end;
    switch (INr.ItemType) begin
      case 1: OYrw.RowType = OYr.BudStocked;
      case 3: OYrw.RowType = OYr.BudTime;
      otherwise 
        if (INr.ItemMaterial!=0) then begin
          OYrw.RowType = OYr.BudMaterial;
        end else begin
          OYrw.RowType = OYr.BudOther;
        end;  
    end;
    OYrw.ItemType = INr.ItemType;
    if (OYrw.ItemType==0) then begin
      if (INr.ItemMaterial!=0) then begin
        OYrw.ItemType = 5;
      end;
    end;   
    if (nonblank(OYr.PRCode)) then begin 
      GetProjectPriceAndCost(OYr.PRCode,OYrw.ArtCode,OYrw.EMCode,OYrw.TimeClass,OYr.CurncyCode,OYrw.ItemType,
                             price,vreb,markup,baseprice,priceincur,markupincur);
      if (priceincur!=0) then begin
        OYrw.Price = priceincur;
      end;
      if (price!=0) then begin
        OYrw.Price = price;
      end;
      if (vreb!=0) then begin
        OYrw.vRebate = vreb;
      end;
      if (nonblank(markupincur)) then begin
        OYrw.Markup = markupincur;
      end;
      if (nonblank(markup)) then begin
        OYrw.Markup = markup;
      end;
      if (baseprice!=0) then begin
        OYrw.BasePrice = baseprice;
      end;
    end;      
    if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      OYrw.Recepy = INr.Recepy;
    end;
    if (nonblank(OYr.CustVATCode)) then begin
      OYrw.VATCode = OYr.CustVATCode;
    end;
    if (calcprice) then begin
      MatRowPut(OYr,rownr,OYrw);
      temp = -1;
      OYGetCalcItemPrice(INr,OYr,rownr,temp);
      MatRowGet(OYr,rownr,OYrw);
    end;
    PackRowFieldMatrix(OYrw,"TaxMatrix",TMr);
    MatRowPut(OYr,rownr,OYrw);
    chrsum = true;
    OYMultiLineText(OYr,INr,OYr.LangCode,rownr);
    
    if (nonblank(INr.WarnText1)) then begin
      inwarning = INr.WarnText1;
    end;
    if (!INVc_AllowSales(INr,ErrorCode)) then begin
      warning = USetStr(ErrorCode);
    end;
    if (OYDchrsum(OYr,rownr,GenOptRec.UseDiscount)) then begin
      OYDchsum(OYr,rownr);
    end;
    if (GuiType==kGuiiPhone or GuiType==kGuiAndroid or IsBooks) then begin
      if (OYrw.Quant==0) then begin
        if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin//should be taken from GetItemPriceDiscount3
          varf = true;
        end;
        if (varf==false) then begin
          MatRowGet(OYr,rownr,OYrw);
          OYrw.Quant = 1;
          MatRowPut(OYr,rownr,OYrw);
          OYVc_PasteQuant(OYr,rownr,true,chsum);
        end;
      end;
    end;
    if (chrsum) then begin
      chsum = OYDchrsum(OYr,rownr,GenOptRec.UseDiscount);
      if (chsum) then begin
        OYDchsum(OYr,rownr);
      end;
    end;
    OYSumup(OYr);
    MatRowGet(OYr,rownr,OYrw);
    res = true;
  end else begin
    if (nonblank(OYrw.ArtCode)) then begin
      warning = USetStr(1120) & OYrw.ArtCode;
    end;
  end;
  OYVc_PasteArtCode = res;
  return;
end;

global
updating function Integer CreateMailFromOYD(record OYVc OYr,var record MailVc Mailr,var string warning,string pdfform)
begin
  Integer res;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;  
  row OYVc OYrw;  
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  Integer line;
  string 255 docname,fname;
  string 20 custemail;
  row MailTextVc MTrw;
  Integer IgnoreRecordDetails;
  
  res = 0;
  if (ReadFirstMain(OYr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromOYD;
  end;  
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  CUr.Code = OYr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  custemail = CUr.eMail;
  if (nonblank(OYr.CustContact)) then begin
    if (FindCustomerRelation(CUr.Code,OYr.CustContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        custemail = ContactCUr.eMail;
      end;
    end;
  end;
  if (AddEMailRecipients(Mailr,CUr.Code,custemail,kMailQuotation)==false) then begin 
    res = 2289;
    warning = CUr.Code;
    goto LCreateMailFromOYD;
  end;
  MailTextRow("OYVc","",OYr.LangCode,MTrw,IgnoreRecordDetails);
  Mailr.Header = MTrw.Header;
  Mailr.Header = Mailr.Header & USetStr(1199);
  Mailr.Header = Mailr.Header & OYr.SerNr;  
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin
    CreateRecordLink(Mailr,CurrentCompany,OYr,CurrentCompany);  
    CreateRecordLink(OYr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
//  AddCRToText(Mailr); this doesnt work on linux 
  tstr = "";
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;
  if (IgnoreRecordDetails==0) then begin
    rwcnt = MatRowCnt(OYr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OYr,i,OYrw);
      switch (OYrw.stp) begin
        case 10:
          goto LOYHIDDENLine;
        case 17:
          tstr = TAB & TAB & Left(OYrw.Spec,60);
          if (Mailr.HtmlFlag==0) then begin
            LineTextPut(Mailr,line,tstr);
          end else begin
            LineTextPutToHtmlRecord(Mailr,tstr,false,true);
          end;
          line = line + 1;
        case 9:
          tstr = TAB & TAB & Left(OYrw.Spec,60) & TAB;
          tstr = tstr & OYrw.Sum & TAB;
          if (Mailr.HtmlFlag==0) then begin
            LineTextPut(Mailr,line,tstr);
          end else begin
            LineTextPutToHtmlRecord(Mailr,tstr,false,true);
          end;
          line = line + 1;
        otherwise
          tstr = OYrw.ArtCode & TAB;
          tstr = tstr & ValToString(OYrw.Quant,M4UVal,"",".",0) & TAB;
          tstr = tstr & Left(OYrw.Spec,60) & TAB;
          tstr = tstr & OYrw.Price & TAB;
          if (OYrw.vRebate!=0) then begin
            tstr = tstr & "-" & ValToString(OYrw.vRebate,M4UVal,"",".",0) & "%" &  TAB;
          end;
          tstr = tstr & OYrw.Sum & TAB;
          if (Mailr.HtmlFlag==0) then begin
            LineTextPut(Mailr,line,tstr);
          end else begin
            LineTextPutToHtmlRecord(Mailr,tstr,false,true);
          end;
          line = line + 1;
      end;
    end;
  LOYHIDDENLine:;    
    AddCRToText(Mailr);
    line = line + 1;
    tstr = TAB & TAB & TAB & "=====";
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;
  
    tstr = TAB & TAB & TAB & USetStr(2685) & TAB & OYr.Sum1;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;
    tstr = TAB & TAB & TAB & USetStr(2686) & TAB & OYr.Sum3;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    tstr = TAB & TAB & TAB & USetStr(2687) & TAB & OYr.Sum4;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    tstr = USetStr(7021) & " " & OYr.ValidUntilDate;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    GetPayDealText(OYr.PayDeal,OYr.LangCode,tstr);
    tstr = USetStr(3060) & " " & tstr;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
  end;
  
  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "OYForm";
  end;
  fname = "tmp/" & USetStr(1820) & OYr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(OYr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromOYD:;  
  CreateMailFromOYD = res;
  return;
end;

global
updating function Integer CreateQTFromOYD(record OYVc OYr,var record QTVc QTr,var string warning)
begin
  Integer res;
  row OYVc OYrw;  
  row QTVc QTrw;
  Integer i,rwcnt;
  
  res = 0;
  if (ReadFirstMain(OYr,0,true)) then begin end;  
  QTr.CustCode = OYr.CustCode;
  QTr.Addr0 = OYr.Addr0;
  QTr.Addr1 = OYr.Addr1;
  QTr.Addr2 = OYr.Addr2;
  QTr.Addr3 = OYr.Addr3;
  QTr.OurContact = OYr.OurContact;
  QTr.CustContact = OYr.CustContact;
  QTr.ExportFlag = OYr.ExportFlag;
  QTr.PayDeal = OYr.PayDeal;
  QTr.CustCat = OYr.CustCat;
  QTr.Objects = OYr.Objects;
  QTr.ShipMode = OYr.ShipMode;
  QTr.PlanShip = OYr.PlanShip;
  QTr.SalesMan = OYr.SalesMan;
  QTr.Sign = OYr.Sign;
  QTr.ShipDeal = OYr.ShipDeal;
  QTr.ShipAddr0 = OYr.ShipAddr0;
  QTr.ShipAddr1 = OYr.ShipAddr1;
  QTr.ShipAddr2 = OYr.ShipAddr2;
  QTr.ShipAddr3 = OYr.ShipAddr3;
  QTr.CurncyCode = OYr.CurncyCode;
  QTr.LangCode = OYr.LangCode;
  QTr.InvoiceToCode = OYr.InvoiceToCode;
  QTr.ToRateB1 = OYr.ToRateB1;
  QTr.Closed = OYr.Closed;
  QTr.BuildOn = OYr.BuildOn;
  QTr.PRCode = OYr.PRCode;
  QTr.Comment = OYr.Comment;
  QTr.ValidUntilDate = OYr.ValidUntilDate;
  QTr.InvOnlyOnFull = OYr.InvOnlyOnFull;
  QTr.PriceList = OYr.PriceList;
  QTr.InclVAT = OYr.InclVAT;
  QTr.Sum0 = OYr.Sum0;
  QTr.Sum1 = OYr.Sum1;
  QTr.Sum2 = OYr.Sum2;
  QTr.Sum3 = OYr.Sum3;
  QTr.Sum4 = OYr.Sum4;
  QTr.QuoteClass = OYr.QuoteClass;
  QTr.CustVATCode = OYr.CustVATCode;
  QTr.RebCode = OYr.RebCode;
  QTr.VATNr = OYr.VATNr;
  QTr.Phone = OYr.Phone;
  QTr.Fax = OYr.Fax;
  QTr.MakeContactDate = OYr.MakeContactDate;
  QTr.BaseSum4 = OYr.BaseSum4;
  QTr.FrRate = OYr.FrRate; 
  QTr.ToRateB2 = OYr.ToRateB2; 
  QTr.BaseRate1 = OYr.BaseRate1; 
  QTr.BaseRate2 = OYr.BaseRate2; 
  QTr.DiscPerc = OYr.DiscPerc;
  QTr.DiscSum = OYr.DiscSum; 
  QTr.TotGP = OYr.TotGP;
  QTr.DaysToDelivery = OYr.DaysToDelivery;
  QTr.Probability = OYr.Probability;
  QTr.GPProc = OYr.GPProc;
  QTr.SalesGroup = OYr.SalesGroup;
  QTr.Sorting = OYr.Sorting;
  QTr.Location = OYr.Location;
  QTr.TotQty = OYr.TotQty;
  QTr.TotWeight = OYr.TotWeight;
  QTr.TotVolume = OYr.TotVolume;
  QTr.FrPrice = OYr.FrPrice;
  QTr.FrBase = OYr.FrBase;
  QTr.FrItem = OYr.FrItem;
  QTr.FrVATCode = OYr.FrVATCode;
  QTr.FrObjects = OYr.FrObjects;
  QTr.InvAddr3 = OYr.InvAddr3;
  QTr.InvAddr4 = OYr.InvAddr4;
  QTr.DelAddr3 = OYr.DelAddr3;
  QTr.DelAddr4 = OYr.DelAddr4;
  QTr.DelAddrCode = OYr.DelAddrCode;
  QTr.Rejected = OYr.Rejected;
  QTr.RejectDate = OYr.RejectDate;
  QTr.Markup = OYr.Markup;
  QTr.BudTime = OYr.BudTime;
  QTr.SumTime = OYr.SumTime;
  QTr.BudOther = OYr.BudOther;
  QTr.SumOther = OYr.SumOther;
  QTr.BudStocked = OYr.BudStocked;
  QTr.SumStocked = OYr.SumStocked;
  QTr.BudMaterial = OYr.BudMaterial;
  QTr.SumMaterial = OYr.SumMaterial;
  QTr.TAX1Sum = OYr.TAX1Sum;
  QTr.AcceptDate = OYr.AcceptDate;
  QTr.Priority = OYr.Priority;
  QTr.PlanShipDate = OYr.PlanShipDate;
  QTr.Region = OYr.Region;
  QTr.RefStr = OYr.RefStr;
  QTr.TAX2Sum = OYr.TAX2Sum;
  QTr.NoTax1 = OYr.NoTax1;
  QTr.NoTax2 = OYr.NoTax2;
  QTr.BranchID = OYr.BranchID;
  QTr.NoTAXonVAT = OYr.NoTAXonVAT;
  QTr.TotalwoTAX = OYr.TotalwoTAX;
  QTr.OrgCust = OYr.OrgCust;
  QTr.AcceptanceStatus = OYr.AcceptanceStatus;
  QTr.CustTaxTemplateCode = OYr.CustTaxTemplateCode;
  QTr.InvCountry = OYr.InvCountry;
  QTr.DelCountry = OYr.DelCountry;
  QTr.AcceptanceBy = "";
  QTr.DisallowInvoicemorethanQuoted = OYr.DisallowInvoicemorethanQuoted;
  QTr.RegDate = OYr.RegDate;
  QTr.RegTime = OYr.RegTime;
  QTr.LocalMachineCode = OYr.LocalMachineCode;
  QTr.AcceptanceFYI = "";
  QTr.BankCode = OYr.BankCode;
  QTr.Comment2 = OYr.Comment2;
  QTr.Comment3 = OYr.Comment3;
  QTr.Comment4 = OYr.Comment4;
  QTr.InvCountryName = OYr.InvCountryName;
  QTr.DelCountryName = OYr.DelCountryName;  
  QTr.RecipientGLN = OYr.RecipientGLN;
  QTr.DelRecipientGLN = OYr.DelRecipientGLN;
  QTr.IntrastatTransCode = OYr.IntrastatTransCode;
  QTr.ContractStartDate = OYr.ContractStartDate;
  QTr.OYNr = OYr.SerNr;
  QTr.OYDescription = "";
  rwcnt = MatRowCnt(OYr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYr,i,OYrw);

    QTrw.stp = OYrw.stp;
    QTrw.ArtCode = OYrw.ArtCode;
    QTrw.Quant = OYrw.Quant;
    QTrw.Price = OYrw.Price;
    QTrw.Sum = OYrw.Sum;
    QTrw.vRebate = OYrw.vRebate;
    QTrw.SalesAcc = OYrw.SalesAcc;
    QTrw.Objects = OYrw.Objects;
    QTrw.BasePrice = OYrw.BasePrice;
    QTrw.rowGP = OYrw.rowGP;
    QTrw.VATCode = OYrw.VATCode;
    QTrw.PlanShip = OYrw.PlanShip;
    QTrw.SerialNr = OYrw.SerialNr;
    QTrw.PriceFactor = OYrw.PriceFactor;
    QTrw.Spec = OYrw.Spec;
    QTrw.VARList = OYrw.VARList;
    QTrw.Recepy = OYrw.Recepy;
    QTrw.UnitCode = OYrw.UnitCode;
    QTrw.UnitFactQuant = OYrw.UnitFactQuant;
    QTrw.UnitFactPrice = OYrw.UnitFactPrice;
    QTrw.UnitXval = OYrw.UnitXval;
    QTrw.UnitYval = OYrw.UnitYval;
    QTrw.UnitZval = OYrw.UnitZval;
    QTrw.VECode = OYrw.VECode;
    QTrw.EMCode = OYrw.EMCode;
    QTrw.Markup = OYrw.Markup;
    QTrw.TimeClass = OYrw.TimeClass;
    QTrw.InvAfter = OYrw.InvAfter;
    QTrw.Invoiced = OYrw.Invoiced;
    QTrw.InvDate = OYrw.InvDate;
    QTrw.ItemType = OYrw.ItemType;
    QTrw.RowType = OYrw.RowType;
    QTrw.BudType = OYrw.BudType;
    QTrw.JobGroup = OYrw.JobGroup;
    QTrw.TAX2Code = OYrw.TAX2Code;
    QTrw.TAX2Prc = OYrw.TAX2Prc;
    QTrw.TAX2Reb = OYrw.TAX2Reb;
    QTrw.TAX1Reb = OYrw.TAX1Reb;
    QTrw.TAX2Acc = OYrw.TAX2Acc;
    QTrw.PRStage = OYrw.PRStage;
    QTrw.TaxTemplateCode = OYrw.TaxTemplateCode;
    QTrw.Region = OYrw.Region;
    QTrw.Perceptions = OYrw.Perceptions;
    QTrw.MotherArtCode = OYrw.MotherArtCode;
    QTrw.RecipeQuant = OYrw.RecipeQuant;
    QTrw.Invd = OYrw.Invd;
    QTrw.CustArtCode = OYrw.CustArtCode;
    QTrw.Salesmen = OYrw.Salesmen;
    QTrw.UnitComment = OYrw.UnitComment;
    QTrw.DiscApprovedBy = "";
    QTrw.ServiceDelDate = OYrw.ServiceDelDate;
    MatRowPut(QTr,MatRowCnt(QTr),QTrw);
  end;
  
  QTr.QTDate = CurrentDate;
  QTr.SerNr = NextSerNr("QTVc",QTr.QTDate,-1,false,"");
  if (RecordStore(QTr,false)) then begin
    CreateRecordLink(QTr,CurrentCompany,OYr,CurrentCompany);  
    CreateRecordLink(OYr,CurrentCompany,QTr,CurrentCompany);  
  end;
LCreateQTFromOYD:;  
  CreateQTFromOYD = res;
  return;
end;

global
updating function Integer CreateORFromOYD(record OYVc OYr,var record ORVc ORr,var string warning)
begin
  Integer res;
  row OYVc OYrw;  
  row ORVc ORrw;
  Integer i,rwcnt;
  
  res = 0;
  if (ReadFirstMain(OYr,0,true)) then begin end;  
  ORr.CustCode = OYr.CustCode;
  ORr.Addr0 = OYr.Addr0;
  ORr.Addr1 = OYr.Addr1;
  ORr.Addr2 = OYr.Addr2;
  ORr.Addr3 = OYr.Addr3;
  ORr.OurContact = OYr.OurContact;
  ORr.CustContact = OYr.CustContact;
  ORr.ExportFlag = OYr.ExportFlag;
  ORr.PayDeal = OYr.PayDeal;
  ORr.CustCat = OYr.CustCat;
  ORr.Objects = OYr.Objects;
  ORr.ShipMode = OYr.ShipMode;
  ORr.PlanShip = OYr.PlanShip;
  ORr.SalesMan = OYr.SalesMan;
  ORr.Sign = OYr.Sign;
  ORr.ShipDeal = OYr.ShipDeal;
  ORr.ShipAddr0 = OYr.ShipAddr0;
  ORr.ShipAddr1 = OYr.ShipAddr1;
  ORr.ShipAddr2 = OYr.ShipAddr2;
  ORr.ShipAddr3 = OYr.ShipAddr3;
  ORr.CurncyCode = OYr.CurncyCode;
  ORr.LangCode = OYr.LangCode;
  ORr.InvoiceToCode = OYr.InvoiceToCode;
  ORr.ToRateB1 = OYr.ToRateB1;
  ORr.Closed = OYr.Closed;
  ORr.PRCode = OYr.PRCode;
  ORr.Comment = OYr.Comment;
  ORr.PriceList = OYr.PriceList;
  ORr.InclVAT = OYr.InclVAT;
  ORr.Sum0 = OYr.Sum0;
  ORr.Sum1 = OYr.Sum1;
  ORr.Sum2 = OYr.Sum2;
  ORr.Sum3 = OYr.Sum3;
  ORr.Sum4 = OYr.Sum4;
  ORr.OrderClass = OYr.QuoteClass;
  ORr.CustVATCode = OYr.CustVATCode;
  ORr.RebCode = OYr.RebCode;
  ORr.VATNr = OYr.VATNr;
  ORr.Phone = OYr.Phone;
  ORr.Fax = OYr.Fax;
  ORr.BaseSum4 = OYr.BaseSum4;
  ORr.FrRate = OYr.FrRate; 
  ORr.ToRateB2 = OYr.ToRateB2; 
  ORr.BaseRate1 = OYr.BaseRate1; 
  ORr.BaseRate2 = OYr.BaseRate2; 
  ORr.DiscPerc = OYr.DiscPerc;
  ORr.DiscSum = OYr.DiscSum; 
  ORr.TotGP = OYr.TotGP;
  ORr.Probability = OYr.Probability;
  ORr.GPProc = OYr.GPProc;
  ORr.SalesGroup = OYr.SalesGroup;
  ORr.Sorting = OYr.Sorting;
  ORr.Location = OYr.Location;
  ORr.TotQty = OYr.TotQty;
  ORr.TotWeight = OYr.TotWeight;
  ORr.TotVolume = OYr.TotVolume;
  ORr.FrPrice = OYr.FrPrice;
  ORr.FrBase = OYr.FrBase;
  ORr.FrItem = OYr.FrItem;
  ORr.FrVATCode = OYr.FrVATCode;
  ORr.FrObjects = OYr.FrObjects;
  ORr.InvAddr3 = OYr.InvAddr3;
  ORr.InvAddr4 = OYr.InvAddr4;
  ORr.DelAddr3 = OYr.DelAddr3;
  ORr.DelAddr4 = OYr.DelAddr4;
  ORr.DelAddrCode = OYr.DelAddrCode;
  ORr.TAX1Sum = OYr.TAX1Sum;
  ORr.PlanShipDate = OYr.PlanShipDate;
  ORr.Region = OYr.Region;
  ORr.RefStr = OYr.RefStr;
  ORr.TAX2Sum = OYr.TAX2Sum;
  ORr.NoTax1 = OYr.NoTax1;
  ORr.NoTax2 = OYr.NoTax2;
  ORr.BranchID = OYr.BranchID;
  ORr.NoTAXonVAT = OYr.NoTAXonVAT;
  ORr.TotalwoTAX = OYr.TotalwoTAX;
  ORr.InvoiceToCode = OYr.OrgCust;
  ORr.AcceptanceStatus = OYr.AcceptanceStatus;
  ORr.CustTaxTemplateCode = OYr.CustTaxTemplateCode;
  ORr.InvCountry = OYr.InvCountry;
  ORr.DelCountry = OYr.DelCountry;
  ORr.AcceptanceBy = "";
  ORr.RegDate = OYr.RegDate;
  ORr.RegTime = OYr.RegTime;
  ORr.LocalMachineCode = OYr.LocalMachineCode;
  ORr.AcceptanceFYI = "";
  ORr.BankCode = OYr.BankCode;
  ORr.Comment2 = OYr.Comment2;
  ORr.Comment3 = OYr.Comment3;
  ORr.Comment4 = OYr.Comment4;
  ORr.InvCountryName = OYr.InvCountryName;
  ORr.DelCountryName = OYr.DelCountryName;  
  ORr.RecipientGLN = OYr.RecipientGLN;
  ORr.DelRecipientGLN = OYr.DelRecipientGLN;
  ORr.IntrastatTransCode = OYr.IntrastatTransCode;
  ORr.OYNr = OYr.SerNr;
  ORr.OYDescription = "";
  rwcnt = MatRowCnt(OYr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYr,i,OYrw);

    ORrw.stp = OYrw.stp;
    ORrw.ArtCode = OYrw.ArtCode;
    ORrw.Quant = OYrw.Quant;
    ORrw.Price = OYrw.Price;
    ORrw.Sum = OYrw.Sum;
    ORrw.vRebate = OYrw.vRebate;
    ORrw.SalesAcc = OYrw.SalesAcc;
    ORrw.Objects = OYrw.Objects;
    ORrw.BasePrice = OYrw.BasePrice;
    ORrw.rowGP = OYrw.rowGP;
    ORrw.VATCode = OYrw.VATCode;
    ORrw.SerialNr = OYrw.SerialNr;
    ORrw.PriceFactor = OYrw.PriceFactor;
    ORrw.Spec = OYrw.Spec;
    ORrw.VARList = OYrw.VARList;
    ORrw.Recepy = OYrw.Recepy;
    ORrw.UnitCode = OYrw.UnitCode;
    ORrw.UnitFactQuant = OYrw.UnitFactQuant;
    ORrw.UnitFactPrice = OYrw.UnitFactPrice;
    ORrw.UnitXval = OYrw.UnitXval;
    ORrw.UnitYval = OYrw.UnitYval;
    ORrw.UnitZval = OYrw.UnitZval;
    ORrw.VECode = OYrw.VECode;
    ORrw.TAX2Code = OYrw.TAX2Code;
    ORrw.TAX2Prc = OYrw.TAX2Prc;
    ORrw.TAX2Reb = OYrw.TAX2Reb;
    ORrw.TAX1Reb = OYrw.TAX1Reb;
    ORrw.TAX2Acc = OYrw.TAX2Acc;
    ORrw.TaxTemplateCode = OYrw.TaxTemplateCode;
    ORrw.Region = OYrw.Region;
    ORrw.Perceptions = OYrw.Perceptions;
    ORrw.MotherArtCode = OYrw.MotherArtCode;
    ORrw.RecipeQuant = OYrw.RecipeQuant;
    ORrw.CustArtCode = OYrw.CustArtCode;
    ORrw.Salesmen = OYrw.Salesmen;
    ORrw.UnitComment = OYrw.UnitComment;
    ORrw.DiscApprovedBy = "";
    ORrw.ServiceDelDate = OYrw.ServiceDelDate;
    MatRowPut(ORr,MatRowCnt(ORr),ORrw);
  end;
  
  ORr.OrdDate = CurrentDate;
  ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
  if (RecordStore(ORr,false)) then begin
    CreateRecordLink(ORr,CurrentCompany,OYr,CurrentCompany);  
    CreateRecordLink(OYr,CurrentCompany,ORr,CurrentCompany);  
  end;
LCreateORFromOYD:;  
  CreateORFromOYD = res;
  return;
end;

global
updating function Integer CreateIVFromOYD(record OYVc OYr,var record IVVc IVr,var string warning)
begin
  Integer res;
  row OYVc OYrw;  
  row IVVc IVrw;
  Integer i,rwcnt;
  
  res = 0;
  if (ReadFirstMain(OYr,0,true)) then begin end;  
  IVr.CustCode = OYr.CustCode;
  IVr.Addr0 = OYr.Addr0;
  IVr.Addr1 = OYr.Addr1;
  IVr.Addr2 = OYr.Addr2;
  IVr.Addr3 = OYr.Addr3;
  IVr.OurContact = OYr.OurContact;
  IVr.ClientContact = OYr.CustContact;
  IVr.ExportFlag = OYr.ExportFlag;
  IVr.PayDeal = OYr.PayDeal;
  IVr.CustCat = OYr.CustCat;
  IVr.Objects = OYr.Objects;
  IVr.ShipMode = OYr.ShipMode;
  IVr.SalesMan = OYr.SalesMan;
  IVr.Sign = OYr.Sign;
  IVr.ShipDeal = OYr.ShipDeal;
  IVr.ShipAddr0 = OYr.ShipAddr0;
  IVr.ShipAddr1 = OYr.ShipAddr1;
  IVr.ShipAddr2 = OYr.ShipAddr2;
  IVr.ShipAddr3 = OYr.ShipAddr3;
  IVr.CurncyCode = OYr.CurncyCode;
  IVr.LangCode = OYr.LangCode;
  IVr.OrgCust = OYr.InvoiceToCode;
  IVr.ToRateB1 = OYr.ToRateB1;
  IVr.PRCode = OYr.PRCode;
  IVr.InvComment = OYr.Comment;
  IVr.PriceList = OYr.PriceList;
  IVr.InclVAT = OYr.InclVAT;
  IVr.Sum0 = OYr.Sum0;
  IVr.Sum1 = OYr.Sum1;
  IVr.Sum2 = OYr.Sum2;
  IVr.Sum3 = OYr.Sum3;
  IVr.Sum4 = OYr.Sum4;
  IVr.CustVATCode = OYr.CustVATCode;
  IVr.RebCode = OYr.RebCode;
  IVr.VATNr = OYr.VATNr;
  IVr.Phone = OYr.Phone;
  IVr.Fax = OYr.Fax;
  IVr.BaseSum4 = OYr.BaseSum4;
  IVr.FrRate = OYr.FrRate; 
  IVr.ToRateB2 = OYr.ToRateB2; 
  IVr.BaseRate1 = OYr.BaseRate1; 
  IVr.BaseRate2 = OYr.BaseRate2; 
  IVr.DiscPerc = OYr.DiscPerc;
  IVr.DiscSum = OYr.DiscSum; 
  IVr.TotGP = OYr.TotGP;
  IVr.GPProc = OYr.GPProc;
  IVr.SalesGroup = OYr.SalesGroup;
  IVr.Sorting = OYr.Sorting;
  IVr.Location = OYr.Location;
  IVr.TotQty = OYr.TotQty;
  IVr.TotWeight = OYr.TotWeight;
  IVr.TotVolume = OYr.TotVolume;
  IVr.FrPrice = OYr.FrPrice;
  IVr.FrBase = OYr.FrBase;
  IVr.FrItem = OYr.FrItem;
  IVr.FrVATCode = OYr.FrVATCode;
  IVr.FrObjects = OYr.FrObjects;
  IVr.InvAddr3 = OYr.InvAddr3;
  IVr.InvAddr4 = OYr.InvAddr4;
  IVr.DelAddr3 = OYr.DelAddr3;
  IVr.DelAddr4 = OYr.DelAddr4;
  IVr.DelAddrCode = OYr.DelAddrCode;
  IVr.TAX1Sum = OYr.TAX1Sum;
  IVr.Region = OYr.Region;
  IVr.RefStr = OYr.RefStr;
  IVr.TAX2Sum = OYr.TAX2Sum;
  IVr.NoTax1 = OYr.NoTax1;
  IVr.NoTax2 = OYr.NoTax2;
  IVr.BranchID = OYr.BranchID;
  IVr.NoTAXonVAT = OYr.NoTAXonVAT;
  IVr.TotalwoTAX = OYr.TotalwoTAX;
  IVr.AcceptanceStatus = OYr.AcceptanceStatus;
  IVr.CustTaxTemplateCode = OYr.CustTaxTemplateCode;
  IVr.InvCountry = OYr.InvCountry;
  IVr.DelCountry = OYr.DelCountry;
  IVr.AcceptanceBy = "";
  IVr.RegDate = OYr.RegDate;
  IVr.RegTime = OYr.RegTime;
  IVr.MachineName = OYr.LocalMachineCode;
  IVr.AcceptanceFYI = "";
  IVr.BankCode = OYr.BankCode;
  IVr.InvCountryName = OYr.InvCountryName;
  IVr.DelCountryName = OYr.DelCountryName;  
  IVr.RecipientGLN = OYr.RecipientGLN;
  IVr.DelRecipientGLN = OYr.DelRecipientGLN;
  IVr.IntrastatTransCode = OYr.IntrastatTransCode;
  IVr.OYNr = OYr.SerNr;
  IVr.OYDescription = "";
  rwcnt = MatRowCnt(OYr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYr,i,OYrw);

    IVrw.stp = OYrw.stp;
    IVrw.ArtCode = OYrw.ArtCode;
    IVrw.Quant = OYrw.Quant;
    IVrw.Price = OYrw.Price;
    IVrw.Sum = OYrw.Sum;
    IVrw.vRebate = OYrw.vRebate;
    IVrw.SalesAcc = OYrw.SalesAcc;
    IVrw.Objects = OYrw.Objects;
    IVrw.BasePrice = OYrw.BasePrice;
    IVrw.rowGP = OYrw.rowGP;
    IVrw.VATCode = OYrw.VATCode;
//    IVrw.RvrsVATCode = OYrw.RvrsVATCode;
    IVrw.SerialNr = OYrw.SerialNr;
    IVrw.PriceFactor = OYrw.PriceFactor;
    IVrw.Spec = OYrw.Spec;
    IVrw.VARList = OYrw.VARList;
    IVrw.Recepy = OYrw.Recepy;
    IVrw.UnitCode = OYrw.UnitCode;
    IVrw.UnitFactQuant = OYrw.UnitFactQuant;
    IVrw.UnitFactPrice = OYrw.UnitFactPrice;
    IVrw.UnitXval = OYrw.UnitXval;
    IVrw.UnitYval = OYrw.UnitYval;
    IVrw.UnitZval = OYrw.UnitZval;
    IVrw.VECode = OYrw.VECode;
    IVrw.TAX2Code = OYrw.TAX2Code;
    IVrw.TAX2Prc = OYrw.TAX2Prc;
    IVrw.TAX2Reb = OYrw.TAX2Reb;
    IVrw.TAX1Reb = OYrw.TAX1Reb;
    IVrw.TAX2Acc = OYrw.TAX2Acc;
    IVrw.TaxTemplateCode = OYrw.TaxTemplateCode;
    IVrw.Perceptions = OYrw.Perceptions;
    IVrw.MotherArtCode = OYrw.MotherArtCode;
    IVrw.RecipeQuant = OYrw.RecipeQuant;
    IVrw.CustArtCode = OYrw.CustArtCode;
    IVrw.Salesmen = OYrw.Salesmen;
    IVrw.UnitComment = OYrw.UnitComment;
    IVrw.DiscApprovedBy = "";
    IVrw.ServiceDelDate = OYrw.ServiceDelDate;
    MatRowPut(IVr,MatRowCnt(IVr),IVrw);
  end;
  
  IVr.TransDate = CurrentDate;
  IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");
  if (RecordStore(IVr,false)) then begin
    CreateRecordLink(IVr,CurrentCompany,OYr,CurrentCompany);  
    CreateRecordLink(OYr,CurrentCompany,IVr,CurrentCompany);  
  end;
LCreateIVFromOYD:;  
  CreateIVFromOYD = res;
  return;
end;

global
procedure RecalculetWeightVolumeOYVc(var record OYVc OYp)
begin
  record INVc INr;
  row OYVc OYrw;
  Integer i,rwcnt;

  if (ReadFirstMain(OYp,0,true)) then begin end;  
  OYp.TotQty = blankval;
  OYp.TotVolume = blankval;
  OYp.TotWeight = blankval;
  rwcnt = MatRowCnt(OYp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    OYp.TotQty = OYp.TotQty + OYrw.Quant;
    if  (ReadFirstItem(OYrw.ArtCode,INr,false,false)) then begin
      OYp.TotVolume = OYp.TotVolume + OYrw.Quant * INr.Volume;
      OYp.TotWeight = OYp.TotWeight + OYrw.Quant * INr.Weight;
    end;      
  end;
  if (OYp.TotVolume==0) then begin OYp.TotVolume = blankval; end;
  if (OYp.TotWeight==0) then begin OYp.TotWeight = blankval; end;
//  OYSumup(OYp); No point in this, just silly.
  return;
end;    

global
updating function Integer CreateTBBUFromOYD(var record OYVc OYr,var record TBBUVc TBBUr)
begin
  Integer res;
  record CUVc CUr;
  row OYVc OYrw;
  row TBBUVc TBBUrw;
  string 255 tstr;
  Integer i,rwcnt,tbrow;
  record PRVc PRr;
  
  PRr.Code = OYr.PRCode;
  ReadFIrstMain(PRr,1,true);
  TBBUr.PRCode = OYr.PRCode;
  if (nonblank(OYr.CurncyCode)) then begin
    if (nonblank(PRr.CurncyCode)) then begin
      if (PRr.CurncyCode!=OYr.CurncyCode) then begin
        res = 1582;
        goto LCreateTBBUFromOYD;
      end;
    end;
  end;
  if (ReadFirstMain(TBBUr,1,true)==false) then begin 
    RecordNew(TBBUr);
    TBBUr.Members = PRr.Members;
    TBBUr.SalesGroup = OYr.SalesGroup;
    TBBUr.TransDate = OYr.OYDate;
    TBBUr.CustCode = OYr.CustCode;
    CUr.Code = TBBUr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
    end;
    TBBUr.CustName = OYr.Addr0;
    TBBUr.PRLeader = PRr.Leader;
    TBBUr.SalesMan = OYr.SalesMan;
    TBBUr.LangCode = OYr.LangCode;
    TBBUr.PRCode = OYr.PRCode;
    GetPRName(TBBUr.PRCode,tstr);
    TBBUr.PRName = tstr;    
    TBBUr.Comment = OYr.Comment;
    TBBUr.Markup = OYr.Markup;
    TBBUr.BudTime = OYr.BudTime;
    TBBUr.BudOther = OYr.BudOther;
    TBBUr.BudStocked = OYr.BudStocked;
    TBBUr.BudMaterial = OYr.BudMaterial;
    TBBUr.SumTime = OYr.SumTime;
    TBBUr.SumStocked = OYr.SumStocked;
    TBBUr.SumMaterial = OYr.SumMaterial;
    TBBUr.SumOther = OYr.SumOther;
    TBBUr.CurncyCode = OYr.CurncyCode;
    TBBUr.FrRate = OYr.FrRate;
    TBBUr.ToRateB1 = OYr.ToRateB1;
    TBBUr.ToRateB2 = OYr.ToRateB2;
    TBBUr.BaseRate1 = OYr.BaseRate1;
    TBBUr.BaseRate2 = OYr.BaseRate2;
    rwcnt = MatRowCnt(OYr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OYr,i,OYrw);
      if (OYrw.stp==10) then begin goto LSKIPOYROW; end;
      ClearRow(TBBUr,TBBUrw,OYrw.stp);
      TBBUrw.ArtCode = OYrw.ArtCode;
      TBBUrw.Qty = OYrw.Quant;
      TBBUrw.Price = OYrw.Price;
      TBBUrw.Sum = OYrw.Sum;
      TBBUrw.Objects = OYrw.Objects;
      TBBUrw.Comment = OYrw.Spec;
      TBBUrw.Recepy = OYrw.Recepy;
      TBBUrw.MotherArtCode = OYrw.MotherArtCode;
      TBBUrw.RecipeQuant = OYrw.RecipeQuant;
      TBBUrw.EMCode = OYrw.EMCode;
      TBBUrw.Markup = OYrw.Markup;
      TBBUrw.TimeClass = OYrw.TimeClass;
      TBBUrw.InvAfter = OYrw.InvAfter;
      TBBUrw.Invoiced = OYrw.Invoiced;
      TBBUrw.InvDate = OYrw.InvDate;
      TBBUrw.ItemType = OYrw.ItemType;
      TBBUrw.RowType = OYrw.RowType;
      TBBUrw.BudType = OYrw.BudType;
      TBBUrw.Discount = OYrw.vRebate;
      TBBUrw.Cost = OYrw.BasePrice;
      TBBUrw.GP = OYrw.rowGP;
      TBBUrw.GM = TBBUrw.GP*100/TBBUrw.Sum;      
      if (OYrw.stp==17) or (OYrw.stp==9) then begin
        TBBUrw.Comment = "";
        TBBUrw.Spec = OYrw.Spec;
      end;
      TBBUrw.PRStage = OYrw.PRStage;
      MatRowPut(TBBUr,tbrow,TBBUrw);
      tbrow = tbrow + 1;
LSKIPOYROW:;      
    end;
    TBBUSumup(TBBUr);
    if (RecordStore(TBBUr,false)) then begin 
      CreateRecordLink(TBBUr,CurrentCompany,OYr,CurrentCompany);  
      CreateRecordLink(OYr,CurrentCompany,TBBUr,CurrentCompany);  
      if (blankdate(OYr.RejectDate)) then begin
        OYr.RejectDate = CurrentDate;
      end;
      OYr.Rejected = 2;
      OYr.Probability = 100;
      res = 0;
    end;
  end else begin
    res = 2084;
  end;
LCreateTBBUFromOYD:;  
  CreateTBBUFromOYD = res;
  return;
end;    

global
procedure OYVc_PasteSalesMan(var record OYVc OYp,string oldsalesmen)
begin 
  record UserVc Userr;
  string 255 tstr,salesman;
  Integer pos;

  if (HasSalesmanChanged(OYp.SalesMan,oldsalesmen)) then begin
    pos = 0;
    ExtractObj(oldsalesmen,pos,salesman);
    while (nonblank(salesman)) begin
      RemoveOldUserObjects(salesman,OYp.Objects);
      ExtractObj(oldsalesmen,pos,salesman);
    end;
    OYp.SalesGroup = "";    
    pos = 0;
    ExtractObj(OYp.SalesMan,pos,salesman);
    while (nonblank(salesman)) begin
      Userr.Code = salesman;
      if (ReadFirstMain(Userr,1,true)) then begin
        OYp.SalesGroup = AddObjectToObjectList(OYp.SalesGroup,Userr.SalesGroup);                
        OYp.Objects = AddObjectToObjectList(OYp.Objects,Userr.PersObjx);        
      end;
      ExtractObj(OYp.SalesMan,pos,salesman);
    end;
  end;
  return;
end;

global
procedure OYVc_PasteSerialNr(var record OYVc OYp,Integer rownr)
begin
  row OYVc OYrw;
  val UnitXval,UnitYval,UnitZval,t;
  string 255 tstr;
  Boolean chsum;
  
  MatRowGet(OYp,rownr,OYrw);
  SerialNrDimensions(OYrw.ArtCode,OYrw.SerialNr,UnitXval,UnitYval,UnitZval);
  if (UnitXval!=0) then begin OYrw.UnitXval = UnitXval; end;
  if (UnitYval!=0) then begin OYrw.UnitYval = UnitYval; end;
  if (UnitZval!=0) then begin OYrw.UnitZval = UnitZval; end;
  t = OYrw.BasePrice;
  chsum = CostPriceForGP(OYrw.ArtCode,OYrw.SerialNr,OYp.PriceList,OYp.CustCode,t);
  OYrw.BasePrice = t;
  MatRowPut(OYp,rownr,OYrw);
  if (CheckSerialStatus(OYrw.ArtCode,OYrw.SerialNr,tstr)==1) then begin
    MessageBox(0,tstr);
  end;
  if (chsum) then begin
    OYDchsum(OYp,rownr);
    OYSumup(OYp);
  end;    
  return;
end;
 
procedure CalcUnitCode(var record OYVc OYp,Integer rownr)
begin
  row OYVc OYrw;
  val unitqty,unitprice,qty,price;
  string 255 tstr;
  Boolean chrsum,chsum;
  record GeneralOptionBlock GenOptRec;
  
  MatRowGet(OYp,rownr,OYrw);
  unitqty = OYrw.UnitFactQuant;
  unitprice = OYrw.UnitFactPrice;
  qty = OYrw.Quant;
  price = OYrw.Price;
  if (nonblank(OYrw.UnitCode)) then begin
  chrsum = SetUnitFactor(OYrw.UnitCode,unitqty,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,unitprice,qty,price,OYrw.UnitComment,false);  
  if (chrsum) then begin
    OYrw.UnitFactQuant = unitqty;
    OYrw.UnitFactPrice = unitprice;
    OYrw.Quant = qty;
    OYrw.Price = price;
    chrsum = true;
    MatRowPut(OYp,rownr,OYrw);
    OYVc_PasteQuant(OYp,rownr,false,chsum);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GenOptRec);
    chsum = OYDchrsum(OYp,rownr,GenOptRec.UseDiscount);
  end;
  OYDchsum(OYp,rownr);
  OYSumup(OYp);
  return;
end;

global
procedure OYVc_PasteUnitCode(var record OYVc OYp,Integer rownr)
begin
  CalcUnitCode(OYp,rownr);
  return;
end;

global
procedure OYVc_PasteUnitFactQuant(var record OYVc OYp,Integer rownr)
begin
  CalcUnitCode(OYp,rownr);
  return;
end;

/*
procedure ChangeOYRowSum(var record OYVc OYr,Integer rownr,Integer UseDiscount)
begin
  row OYVc OYrw;
  val t,s,rowinbase,tproc;

  MatRowGet(OYr,rownr,OYrw);
  t = OYrw.Quant*OYrw.BasePrice;
  if (OYrw.PriceFactor!=0) then begin
    t = t/OYrw.PriceFactor;
  end;
  s = MulRateToBase1(OYr.CurncyCode,OYrw.Sum,OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,DefaultCurRoundOff);  
  FindSalesExVat(OYrw.VATCode,s,OYr.InclVAT,OYr.NoTAXonVAT,rowinbase);
  OYrw.rowGP = rowinbase - t;
  CalcProc(rowinbase,OYrw.rowGP,tproc);
  CalcSum(OYrw.Quant,OYrw.Price,OYrw.PriceFactor,OYrw.vRebate,s,UseDiscount);
  OYrw.Sum = s;
  MatRowPut(OYr,rownr,OYrw);
  return;        
end;
*/
global 
procedure OYDUpdatePrices(var record OYVc OYr,Boolean readf)
begin
  Integer i,rwcnt;
  record INVc INr;
  row OYVc OYrw;
  Boolean calcprice,chsum;
  string 255 tstr,taxtemplatecode;
  string 2 vatcode;
  string 10 salesacc,markup,tax2code,markupincur;
  val price,vrebate,baseprice,tax2prc,priceincur;
  val subtot;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  Time blankt;

  if (readf) then begin
    if (ReadFirstMain(OYr,0,true)) then begin end;
  end;
  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(OYr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYr,i,OYrw);
    switch (OYrw.stp) begin
      case 1:
        if (nonblank(OYrw.ArtCode)) then begin      
          price = OYrw.Price;
          vrebate = blankval;
          baseprice = blankval;
          vatcode = "";
          salesacc = "";
          markup = "";
          priceincur = blankval;
          markupincur = "";
          if (blank(OYr.PRCode)) then begin
            if (GetItemPriceDiscount3(OYrw.ArtCode,OYrw.Quant,INr,OYr.CurncyCode,
              OYr.FrRate,OYr.ToRateB1,OYr.ToRateB2,OYr.BaseRate1,OYr.BaseRate2,
              OYr.LangCode,OYr.CustCat,OYr.PriceList,OYr.RebCode,
              price,tstr,vrebate,vatcode,baseprice,
              salesacc,OYr.ExportFlag,calcprice,OYr.OYDate,blankt,OYr.CustCode,true,dummyf,OYr.PayDeal,tax2code,tax2prc,OYr.Region,OYr.Location,taxtemplatecode)) then begin
              OYrw.Price = price;
              OYrw.vRebate = vrebate;
              OYrw.BasePrice = baseprice;
              OYrw.VATCode = vatcode;
              OYrw.SalesAcc = salesacc;
              OYrw.ArtCode = INr.Code;
            end;  
          end else begin
            GetProjectPriceAndCost(OYr.PRCode,OYrw.ArtCode,OYrw.EMCode,OYrw.TimeClass,OYr.CurncyCode,OYrw.ItemType,
                                   price,vrebate,markup,baseprice,priceincur,markupincur);
            if (priceincur!=0) then begin
              OYrw.Price = priceincur;
            end;
            if (price!=0) then begin
              OYrw.Price = price;
            end;
            if (vrebate!=0) then begin
              OYrw.vRebate = vrebate;
            end;
            if (nonblank(markupincur)) then begin
              OYrw.Markup = markupincur;
            end;
            if (nonblank(markup)) then begin
              OYrw.Markup = markup;
            end;
            if (baseprice!=0) then begin
              OYrw.BasePrice = baseprice;
            end;
          end;
          MatRowPut(OYr,i,OYrw);
          chsum = OYDchrsum(OYr,i,GenOptRec.UseDiscount);
          OYDchsum(OYr,i);
    //        ChangeOYRowSum(OYr,i,GenOptRec.UseDiscount);
          MatRowGet(OYr,i,OYrw);
          subtot = subtot + OYrw.Sum;
        end;
      case 9:
        OYrw.Sum = subtot;
        subtot = blankval;
        MatRowPut(OYr,i,OYrw);
    end;    
  end;
  OYSumup(OYr);      
  return;
end;

global
procedure OYVc_PasteCurncyCode(var record OYVc OYp,string oldcurncy)
begin
  val fr,to1,to2,br1,br2;
  record ItemSettingBlock ISr;
  
  if (OYp.CurncyCode!=oldcurncy) then begin
    OYGetRate(OYp);
    OYDUpdatePrices(OYp,false);
  end else begin
    BlockLoad(ISr);
    SaveExchangeRate(OYp.FrRate,OYp.ToRateB1,OYp.ToRateB2,OYp.BaseRate1,OYp.BaseRate2,fr,to1,to2,br1,br2);
    OYGetRate(OYp);
    if ((OtherExchangeRate(OYp.FrRate,OYp.ToRateB1,OYp.ToRateB2,OYp.BaseRate1,OYp.BaseRate2,fr,to1,to2,br1,br2)) and (ISr.UpdCurPrWithDate!=0)) then begin
      OYDUpdatePrices(OYp,false);
    end;
  end;
  return;
end;

global
procedure OYVc_FillupTaxTemplate(var record OYVc OYp)
begin
  row OYVc OYrw;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GenOptRec;
  val t,s,price,vreb,baseprice,tax2prc;
  record INVc INr;
  string 255 tstr,tax2code,location,itemtaxtemplatecode,dummystr;
  Boolean calcprice;
  Integer exportflag;
  Boolean dummyf;
  Time blankt;

  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(OYp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OYp,i,OYrw);
    if (nonblank(OYrw.ArtCode)) then begin
      if (GetItemPriceDiscount3(OYrw.ArtCode,OYrw.Quant,INr,OYp.CurncyCode,
                            OYp.FrRate,OYp.ToRateB1,OYp.ToRateB2,OYp.BaseRate1,OYp.BaseRate2,
                            OYp.LangCode,OYp.CustCat,OYp.PriceList,OYp.RebCode,
                            price,tstr,vreb,dummystr,baseprice,dummystr,
                            exportflag,calcprice,OYp.OYDate,blankt,OYp.CustCode,true,dummyf,OYp.PayDeal,
                            tax2code,tax2prc,OYp.Region,location,itemtaxtemplatecode)) then begin
        OYrw.TaxTemplateCode = FillupTaxMatrix(0,OYp.BranchID,OYp.CustCode,OYp.CustCat,OYp.DelAddrCode,itemtaxtemplatecode,TMr);
        PackRowFieldMatrix(OYrw,"TaxMatrix",TMr);
        MatRowPut(OYp,i,OYrw);
        RowCalculateTaxMatrix_OYVc(OYp,i,OYrw);
        MatRowPut(OYp,i,OYrw);
        if (OYDchrsum(OYp,i,GenOptRec.UseDiscount)) then begin
          OYDchsum(OYp,i);
        end;
      end;
    end;
  end;
  return;  
end;   

global
procedure OYVc_PasteDelAddrCode(var record OYVc OYp)
begin
  string 255 name,a0,a1,a2,a3,a4,country,region,oldregion,taxtemplatecode,vatcode;
  row OYVc OYrw;
  Integer i,rwcnt;
  record GeneralOptionBlock GenOptRec;
  
  BlockLoad(GenOptRec);
  SetDelAddr(OYp.CustCode,OYp.DelAddrCode,name,a0,a1,a2,a3,a4,country,region,taxtemplatecode,vatcode,OYp.ExportFlag,OYp.DelRecipientGLN);
  OYp.ShipAddr0 = name;
  OYp.ShipAddr1 = a0;
  OYp.ShipAddr2 = a1;
  OYp.ShipAddr3 = a2;
  OYp.DelAddr3 = a3;
  OYp.DelAddr4 = a4;
  OYp.DelCountry = country;
  OYp.Region = region;
  if (taxtemplatecode!=OYp.CustTaxTemplateCode) then begin
    OYVc_FillupTaxTemplate(OYp);
    OYp.CustTaxTemplateCode = taxtemplatecode;
  end;
  if (vatcode!=OYp.CustVATCode) and (nonblank(vatcode)) then begin
    OYp.CustVATCode = vatcode;
    rwcnt = MatRowCnt(OYp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OYp,i,OYrw);
      OYrw.VATCode = vatcode;
      MatRowPut(OYp,i,OYrw);
      if (OYDchrsum(OYp,i,GenOptRec.UseDiscount)) then begin
        OYDchsum(OYp,i);
      end;
    end;
  end;
  OYp.Sorting = FindCustRoute(OYp.CustCode,OYp.Location,OYp.DelAddrCode);
  OYVc_PasteInvCountry(OYp,"");
  OYVc_PasteDelCountry(OYp,"");
  OYSumup(OYp);   
  return;
end;

global
procedure OYVc_PasteUnitZval(var record OYVc OYr,Integer rownr,var Boolean chsum)
begin
  row OYVc OYrw;
  record GeneralOptionBlock GenOptRec;
  Boolean res,chrsum;
  val unitqty,unitprice,qty,price;
  val t;

  MatRowGet(OYr,rownr,OYrw);
  OYrw.Quant = CalculateSerialNrQuantity(OYrw.ArtCode,"","",false,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,OYrw.Quant);  
  MatRowPut(OYr,rownr,OYrw);
  MatRowGet(OYr,rownr,OYrw);
  unitqty = OYrw.UnitFactQuant;
  unitprice = OYrw.UnitFactPrice;
  qty = OYrw.Quant;
  price = OYrw.Price;
  chrsum = true;
  if (nonblank(OYrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(OYrw.UnitCode,unitqty,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,unitprice,qty,price,OYrw.UnitComment,false)) then begin
    OYrw.UnitFactQuant = unitqty;
    OYrw.UnitFactPrice = unitprice;
    OYrw.Quant = qty;
    OYrw.Price = price;
    CalcSum(1,OYrw.Price,OYrw.PriceFactor,OYrw.vRebate,t,0);
    OYrw.Sum = t;
    chrsum = true;
    MatRowPut(OYr,rownr,OYrw);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GenOptRec);
    chsum = OYDchrsum(OYr,rownr,GenOptRec.UseDiscount);
  end;
  return;
end;

global
procedure OYVc_PasteUnitYval(var record OYVc OYr,Integer rownr,var Boolean chsum)
begin
  row OYVc OYrw;
  record GeneralOptionBlock GenOptRec;
  Boolean res,chrsum;
  val unitqty,unitprice,qty,price;
  val t;

  MatRowGet(OYr,rownr,OYrw);
  OYrw.Quant = CalculateSerialNrQuantity(OYrw.ArtCode,"","",false,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,OYrw.Quant);
  MatRowPut(OYr,rownr,OYrw);
  MatRowGet(OYr,rownr,OYrw);
  unitqty = OYrw.UnitFactQuant;
  unitprice = OYrw.UnitFactPrice;
  qty = OYrw.Quant;
  price = OYrw.Price;
  chrsum = true;
  if (nonblank(OYrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(OYrw.UnitCode,unitqty,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,unitprice,qty,price,OYrw.UnitComment,false)) then begin
    OYrw.UnitFactQuant = unitqty;
    OYrw.UnitFactPrice = unitprice;
    OYrw.Quant = qty;
    OYrw.Price = price;
    CalcSum(1,OYrw.Price,OYrw.PriceFactor,OYrw.vRebate,t,0);
    OYrw.Sum = t;
    chrsum = true;
    MatRowPut(OYr,rownr,OYrw);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GenOptRec);
    chsum = OYDchrsum(OYr,rownr,GenOptRec.UseDiscount);
  end;
  return;
end;

global
procedure OYVc_PasteUnitXval(var record OYVc OYr,Integer rownr,var Boolean chsum)
begin
  row OYVc OYrw;
  record GeneralOptionBlock GenOptRec;
  Boolean res,chrsum;
  val unitqty,unitprice,qty,price;
  val t;

  MatRowGet(OYr,rownr,OYrw);
  OYrw.Quant = CalculateSerialNrQuantity(OYrw.ArtCode,"","",false,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,OYrw.Quant);
  MatRowPut(OYr,rownr,OYrw);
  MatRowGet(OYr,rownr,OYrw);
  unitqty = OYrw.UnitFactQuant;
  unitprice = OYrw.UnitFactPrice;
  qty = OYrw.Quant;
  price = OYrw.Price;
  chrsum = true;
  if (nonblank(OYrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(OYrw.UnitCode,unitqty,OYrw.UnitXval,OYrw.UnitYval,OYrw.UnitZval,unitprice,qty,price,OYrw.UnitComment,false)) then begin
    OYrw.UnitFactQuant = unitqty;
    OYrw.UnitFactPrice = unitprice;
    OYrw.Quant = qty;
    OYrw.Price = price;
    CalcSum(1,OYrw.Price,OYrw.PriceFactor,OYrw.vRebate,t,0);
    OYrw.Sum = t;
    chrsum = true;
    MatRowPut(OYr,rownr,OYrw);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GenOptRec);
    chsum = OYDchrsum(OYr,rownr,GenOptRec.UseDiscount);
  end;
  return;
end;

global
function Boolean OYVc_PastePRCode(var record OYVc OYr,string oldprcode,var string warning)
begin
  Boolean res;
  record PRVc PRr;
  record ProjectBlock PRb;
  string 10 oldsalesman;
  string 60 objs;

  RemoveOldProjectObjects(oldprcode,OYr.Objects);
  PRr.Code = OYr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (OYr.CustCode!=PRr.CustCode) then begin
      RemoveOldCustObjects(OYr.CustCode,OYr.Objects);
      OYr.CustCode = PRr.CustCode;
      if (PasteCustInOY(OYr,OYr.CustCode,"",warning,true)) then begin
        BlockLoad(PRb);
        OYr.BudTime = PRb.BudTime;
        OYr.BudOther = PRb.BudOther;
        OYr.BudStocked = PRb.BudStocked;
        OYr.BudMaterial = PRb.BudMaterial;    
        OYr.Objects = AddObjectToObjectList(OYr.Objects,PRr.Objects);        
        oldsalesman = OYr.SalesMan;
        OYr.SalesMan = PRr.Leader;
        if (nonblank(PRr.PrSalesMan)) then begin
          OYr.SalesMan = PRr.PrSalesMan;
        end;        
        OYVc_PasteSalesMan(OYr,oldsalesman);
        if (nonblank(PRr.CurncyCode)) then begin
          oldsalesman = OYr.CurncyCode;
          OYr.CurncyCode = PRr.CurncyCode;
          OYVc_PasteCurncyCode(OYr,oldsalesman);
        end;
        if (nonblank(PRr.PayDeal)) then begin
          OYr.PayDeal = PRr.PayDeal;
        end;
        res = true;
      end;
    end else begin
      OYr.Objects = AddObjectToObjectList(OYr.Objects,PRr.Objects);        
      res = true;
    end;
  end;  
  OYVc_PastePRCode = res;
  return;
end;    

global
procedure OYVc_PasteLocation(var record OYVc OYr)
begin
  OYr.Sorting = FindCustRoute(OYr.CustCode,OYr.Location,OYr.DelAddrCode);
  return;
end;

global
procedure OYVc_PasteTaxTemplateCode(var record OYVc OYr,Integer rownr,var Boolean chsum)
begin
  row OYVc OYrw;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GenOptRec;
  
  BlockLoad(GenOptRec);
  MatRowGet(OYr,rownr,OYrw);
  OYrw.TaxTemplateCode = OverrideTaxMatrix(OYrw.TaxTemplateCode,TMr);
  PackRowFieldMatrix(OYrw,"TaxMatrix",TMr);
  MatRowPut(OYr,rownr,OYrw);
  RowCalculateTaxMatrix_OYVc(OYr,rownr,OYrw);
  MatRowPut(OYr,rownr,OYrw);
  chsum = OYDchrsum(OYr,rownr,GenOptRec.UseDiscount);
  return;
end;

global
procedure OYVc_PasteRebCode(var record OYVc OYr)
begin
  OYDUpdatePrices(OYr,false);
  return;
end;

global
procedure OYDClassOnOpenWindowRemote(var record OYVc OYr,var Integer AcceptanceStatusFlag)
begin
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  if (HasApprovals) then begin
    AcceptanceStatusFlag = OYApprovalStatus(OYr,Acptr);
  end;
  return;
end;

global
updating function Boolean MakeActFromOY(record OYVc OYr,var record ActVc Actr)
begin
  record ASTBlock ASTb;
  record CUVc CUr;
  Integer curcomp;
  Boolean res;

  if (ReadFirstMain(OYr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = OYr.CustCode;
  Actr.Comment = OYr.Comment;
  Actr.Contact = OYr.CustContact;
  Actr.Phone = OYr.Phone;
  Actr.PRCode = OYr.PRCode;
  CUr.Code = OYr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = CUr.Person;
    end;
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  BlockLoad(ASTb);
  Actr.ActType = ASTb.Quotes;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.QuotesDone;
  if (nonblank(OYr.MakeContactDate)) then begin
    Actr.TransDate = StringToDate(OYr.MakeContactDate);
    Actr.EndDate = StringToDate(OYr.MakeContactDate);
  end else begin
    Actr.TransDate = OYr.OYDate;
  end;  
  SetActTypeValues(Actr);
  Actr.MainPersons = OYr.SalesMan;
  if (OYr.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,OYr,curcomp);  
    CreateRecordLink(OYr,curcomp,Actr,curcomp);
    res = true;  
  end; 
  MakeActFromOY = res;
  return;
end;
