external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
/*
in other files
global
procedure GetItemProjectWIPAcc(record PRAccBlock PRAb,record INVc INr,var string wipacc,var string balacc)
begin
  record ITVc ITr;
  Integer itemtype;
  
  wipacc = "";
  balacc = "";
  itemtype = INr.ItemType;
  if (itemtype==0) then begin
    if (INr.ItemMaterial!=0) then begin
      itemtype = 5;
    end else begin
      itemtype = 0;
    end;
  end;
  switch (itemtype) begin
    case 0:
      wipacc = PRAb.PlainWIPAcc;
      balacc = PRAb.PlainBalAcc;
    case 1:
      wipacc = PRAb.StockWIPAcc;
      balacc = PRAb.StockBalAcc;
    case 3:
      wipacc = PRAb.ServiceWIPAcc;
      balacc = PRAb.ServiceBalAcc;
    case 5:
      wipacc = PRAb.MaterialWIPAcc;
      balacc = PRAb.MaterialBalAcc;
  end;
  ITr.Code = INr.Code;
  if (ReadFirstMain(ITr,1,true)) then begin
    wipacc = ITr.WIPAcc;
  end;  
  return;
end;

global
procedure GetProjectWIPAcc(record PRAccBlock PRAb,string artcode,var string wipacc,var string balacc)
begin
  record INVc INr;  

  wipacc = "";
  balacc = "";
  if (ReadFirstItem(artcode,INr,true,false)) then begin
    GetItemProjectWIPAcc(PRAb,INr,wipacc,balacc);
  end;
  return;
end;

global
function Boolean TBIVItemsUsage(record PRVc PRr,record INVc INr,val qty)
begin
  Boolean res;
  Boolean found;
  record TBIVVc TBIVr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  val tbivqty,tbbuqty;
  
  if (PRr.TBIVItemsUsage==0) then begin
    goto LTBIVItemsUsage;
  end;
  found = true;
  TBIVr.ArtCode = INr.Code;
  TBIVr.PRCode = PRr.Code;
  while (LoopKey("ArtCode",TBIVr,2,found)) begin
    if (TBIVr.ArtCode!=INr.Code) then begin found = false; end;
    if (TBIVr.PRCode!=PRr.Code) then begin found = false; end;
    if (found) then begin
      tbivqty = tbivqty + TBIVr.Qty;
    end;
  end;
  TBBUr.PRCode = PRr.Code;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.ArtCode==INr.Code) then begin
        tbbuqty = tbbuqty + TBBUrw.Qty;
      end;
    end;
  end;
  if (tbivqty+qty>tbbuqty) then begin
    res = true;
  end;
LTBIVItemsUsage:;  
  TBIVItemsUsage = res;
  return;
end;

global
procedure AddStageToTBIV(var record TBIVVc TBIVr)
begin
  record PRScheduleVc PRScheduler;
  row PRScheduleVc PRSchedulerw;
  Integer i,rwcnt;
  
  PRScheduler.PRCode = TBIVr.PRCode;
  if (ReadFirstKey("ActPRCode",PRScheduler,1,true)) then begin
    rwcnt = MatRowCnt(PRScheduler);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRScheduler,i,PRSchedulerw);
      if (PRSchedulerw.stp==1) then begin
        if (DateInRange(TBIVr.TransDate,PRSchedulerw.StartDate,PRSchedulerw.EndDate)) then begin
          TBIVr.PRStage = PRSchedulerw.PRStage;
        end;
      end;
    end;
  end;
  return;
end;

global
function Boolean IsPRPhaseLocked(string prcode,Date td,var string prphase)
begin
  Boolean res;
  record PRScheduleVc PRScheduler;
  row PRScheduleVc PRSchedulerw;
  Integer i,rwcnt;
  
  prphase = "";
  res = false;
  PRScheduler.PRCode = prcode;
  if (ReadFirstKey("ActPRCode",PRScheduler,1,true)) then begin
    res = true;
    rwcnt = MatRowCnt(PRScheduler);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PRScheduler,i,PRSchedulerw);
      if (PRSchedulerw.stp==1) then begin
        if (DateInRange(td,PRSchedulerw.StartDate,PRSchedulerw.EndDate)) then begin
          prphase = PRSchedulerw.PRStage;
          if nonblank(PRSchedulerw.PRStageSign) then begin 
            res = true;
          end; 
          goto LIsPRPhaseLocked;
        end;
      end;
    end;
  end;
LIsPRPhaseLocked:;  
  IsPRPhaseLocked = res;
  return;
end;
*/

procedure TBIVGetRate(var record TBIVVc TBIVp)
begin
  val from,to1,to2,base1,base2;
  string 5 crncy;
 
  crncy = TBIVp.CurncyCode;
  GetFullCurncyRate(crncy,TBIVp.TransDate,from,to1,to2,base1,base2);
  TBIVp.CurncyCode = crncy;
  TBIVp.FrRate = from;
  TBIVp.ToRateB1 = to1;
  TBIVp.ToRateB2 = to2;
  TBIVp.BaseRate1 = base1;
  TBIVp.BaseRate2 = base2;  
  return;
end;

procedure CalcTBIVInCurValues(var record TBIVVc TBIVr)
begin
  val t;

  Base1ToOther(TBIVr.CurncyCode,TBIVr.Price,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,TBIVr.PriceInCur,DefaultCurRoundOff);
  Base1ToOther(TBIVr.CurncyCode,TBIVr.CostPrice,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,TBIVr.CostPriceInCur,DefaultCurRoundOff);
  Base1ToOther(TBIVr.CurncyCode,TBIVr.Sum,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,TBIVr.SumInCur,DefaultCurRoundOff);
  Base1ToOther(TBIVr.CurncyCode,TBIVr.GP,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,TBIVr.GPInCur,DefaultCurRoundOff);
  if (Mid(TBIVr.Markup,len(TBIVr.Markup)-1,1)!="%") then begin    
    t = StringToVal(TBIVr.Markup,M45Val);
    Base1ToOther(TBIVr.CurncyCode,t,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,t,DefaultCurRoundOff);
    TBIVr.MarkupInCur = t;
  end;
  return;
end;

global
procedure AddInCurtoTBIV(var record TBIVVc TBIVr)
begin
  record PRVc PRr;

  PRr.Code = TBIVr.PRCode;
  ReadFirstMain(PRr,1,true);
  if (nonblank(PRr.CurncyCode)) then begin
    TBIVr.CurncyCode = PRr.CurncyCode;
    TBIVGetRate(TBIVr);    
    CalcTBIVInCurValues(TBIVr);
  end;
  return;
end;

procedure CalcTBIVInBaseCurValues(var record TBIVVc TBIVr)
begin
  val t;

  TBIVr.Price = MulRateToBase1(TBIVr.CurncyCode,TBIVr.PriceInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
  TBIVr.CostPrice = MulRateToBase1(TBIVr.CurncyCode,TBIVr.CostPriceInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
  TBIVr.Sum = MulRateToBase1(TBIVr.CurncyCode,TBIVr.SumInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
  TBIVr.GP = MulRateToBase1(TBIVr.CurncyCode,TBIVr.GPInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
  if (Mid(TBIVr.Markup,len(TBIVr.Markup)-1,1)!="%") then begin    
    t = StringToVal(TBIVr.MarkupInCur,M45Val);
    t = MulRateToBase1(TBIVr.CurncyCode,TBIVr.GPInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
    TBIVr.Markup = t;
  end;
  return;
end;

global
procedure AddInBaseCurtoTBIV(var record TBIVVc TBIVr)
begin
  if (nonblank(TBIVr.CurncyCode)) then begin
    TBIVGetRate(TBIVr);    
    CalcTBIVInBaseCurValues(TBIVr);
  end;
  return;
end;

global
procedure AddInCurtoTBIVwithRate(var record TBIVVc TBIVr,string crncy,val fr,val to1,val to2,val br1,val br2)
begin
  record PRVc PRr;
  val t;

  PRr.Code = TBIVr.PRCode;
  ReadFirstMain(PRr,1,true);
  if (nonblank(PRr.CurncyCode)) then begin
    if (PRr.CurncyCode==crncy) then begin
      TBIVr.CurncyCode = crncy;
      TBIVr.FrRate = fr;
      TBIVr.ToRateB1 = to1;
      TBIVr.ToRateB2 = to2;
      TBIVr.BaseRate1 = br1;
      TBIVr.BaseRate2 = br2;
      CalcTBIVInCurValues(TBIVr);
    end else begin
      AddInCurtoTBIV(TBIVr);
    end;
  end;
  return;
end;
