external procedure MulVATIVExecute(string,val,var val,var val,Integer,Integer,roundmode);
external function roundmode GetVATRoundModeRB();
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetVATdouble(string,var val,var val,Integer);
external function Integer InString2(string,string);
external Function val TimeToVal3(Time);
external procedure NextM4Number(string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function LongInt MinutesToTime(LongInt,var Time);

global
function Boolean GetBatchStatus(var record QualConVc QCr,string artno,string serno)
begin
  Boolean res;
  
  QCr.OKFlag = 1;
  QCr.ArtCode = artno;
  QCr.SerialNr = serno;
  res = ReadLastKey("AnalyseDone",QCr,3,false);
  if ((QCr.OKFlag!=1) or (QCr.ArtCode!=artno) or (QCr.SerialNr!=serno)) then begin
    res = false;
  end;
  GetBatchStatus = res;
  return;
end;

global
function Integer CheckSerialStatus(string artno,string serno,var string tstr)
BEGIN
  record QualConVc QCr;
  record BatchStatusVc BSr;
  Integer warnlevel;
    
  tstr = "";
  if (GetBatchStatus(QCr,artno,serno)) then begin
    BSr.Code = QCr.StatusCode;
    if (ReadLastMain(BSr,1,false)) then begin
      if ((QCr.ArtCode==artno) and (QCr.SerialNr==serno)) then begin
        warnlevel = BSr.Warning;
        tstr = BSr.Comment;
      end;
    end;
  end; 
  CheckSerialStatus = warnlevel;
  RETURN;
END;

global
procedure Mul2VAT(string vatc,val vval,var val rval,var val vatprcp,Integer InclVAT)
BEGIN
  val dprc,tax1;
  
  GetVATdouble(vatc,dprc,tax1,InclVAT);
  vatprcp = dprc;
  rval = (vval * dprc)/100.0;
  if (blank(dprc)) or (blank(vval)) then begin
    rval = blankval;
  end;
  rval = Round(rval,GetVATRoundModeRB);
  RETURN;
END;

global
function Boolean GetVAT2(string vatc,var val vval,var Integer rnp,Integer InclVAT)
BEGIN
  Boolean res;
  val vres;
  Integer nvt,i;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATrw;
  Integer rn;
  
  vres = blankval;
  rn = -1;
  BlockLoad(VATCodeRec);
  nvt = MatRowCnt(VATCodeRec);
  if (nvt==0) then begin
    goto LGetVAT2;
  end;  
  rn = 0;
  if (blank(vatc)) then begin
    goto L88GetVAT2;
  end;  
  for (i = 0; i<nvt; i=i+1) begin
    MatRowGet(VATCodeRec,i,VATrw);
    if (VATrw.VATCode==vatc) then begin 
      rn = i;
      res = true;
      goto L88GetVAT2;
    end;
  end;  
L88GetVAT2:
  if (InclVAT!=0) then begin
    if (blank(VATrw.IncVatpr)) then begin      
//      if (nonblank(VATrw.ExVatpr)) then begin
      if (VATrw.ExVatpr!=0) then begin
        vres = (1-(100.00/(100.00+VATrw.ExVatpr)))*100.00;
      end;
    end else begin
      vres = VATrw.IncVatpr;
    end;
  end else begin
    if (blank(VATrw.ExVatpr)) then begin      
//      if (nonblank(VATrw.IncVatpr)) then begin
      if (VATrw.IncVatpr!=0) then begin
        vres = ((100/(100-VATrw.IncVatpr))-1)*100;
      end;
    end else begin
      vres = VATrw.ExVatpr;      
    end;
  end;
LGetVAT2:;
  rnp = rn;
  vval = vres;
  GetVAT2 = res;
  RETURN;
END;

global
function Boolean GetVATincl(string vatc,var val vval,var Integer rnp)
BEGIN
  Boolean res;
  val vres;
  Integer nvt,i;
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATrw;
  Integer rn;
  
  rn = -1;
  BlockLoad(VATCodeRec);
  nvt = MatRowCnt(VATCodeRec);
  if (nvt==0) then begin
    goto LGetVATincl;
  end;  
  rn = 0;
  if (blank(vatc)) then begin
    goto L88GetVATincl;
  end;  
  for (i = 0; i<nvt; i=i+1) begin
    MatRowGet(VATCodeRec,i,VATrw);
    if (VATrw.VATCode==vatc) then begin
      rn = i;
      res = true;
      goto L88GetVATincl;
    end;
  end;
L88GetVATincl:;
  vres = VATrw.IncVatpr;
LGetVATincl:;
  rnp = rn;
  vval = vres;
  GetVATincl = res;
  RETURN;
END;

global
function val MulVAT(string vatc,val vval,Integer InclVAT,Integer TotalwoTAX)
begin
  val rval,t1val;
  Integer rn;
  
  MulVATIV(vatc,vval,rval,t1val,InclVAT,TotalwoTAX);
/*
  if (GetVAT2(vatc,rval,rn,InclVAT)) then begin
  end;

  rval = rval*vval;
  rval = rval/100;
*/  
  rval = Round(rval,SetRoundModeD(5));
  MulVAT = rval;
  return;
end;

global
function val FindVAT(string vatc,val v1,Integer InclVAT,Integer TotalwoTAX)
begin 
  val res;

  res = MulVAT(vatc,v1,InclVAT,TotalwoTAX);
  FindVAT = res;
  return;
end;

global
function val FindTAX1(string vatc,val v1,Integer InclVAT,Integer TotalwoTAX)
begin 
  val vatval,res;

  MulVATIV(vatc,v1,vatval,res,InclVAT,TotalwoTAX);
  FindTAX1 = res;
  return;
end;

global
function val FindTAX2(val tax2prc,val sum,Integer InclVAT)
begin 
  val res;

  res = sum*tax2prc;
  res = res/100;
  res = Round(res,SetRoundModeD(2));
  FindTAX2 = res;
  return;
end;

global
Procedure GetPayType(String i,Var Integer PayType)
Begin
  Record PMBlock PayModes;
  Row PMBlock PayModesrw;
  Integer j,rows;

  Blockload(PayModes);
  rows = MatRowCnt(PayModes);
  for (j=0;j<rows;j=j+1) begin
    MatRowGet(PayModes,j,PayModesrw);
    if (PayModesrw.Code == i) then begin
      PayType = PayModesrw.CheckType;
    end;
  end;
  Return;
End;

global
procedure SaveExchangeRate(val fr,val to1,val to2,val br1,val br2,
                           var val afr,var val ato1,var val ato2,var val abr1,var val abr2)
begin
  afr = fr;
  ato1 = to1;
  ato2 = to2;
  abr1 = br1;
  abr2 = br2;  
  return;
end;

global
function Boolean OtherExchangeRate(val fr,val to1,val to2,val br1,val br2,val afr,val ato1,val ato2,val abr1,val abr2)
begin
  Boolean res;
  
  res = false;
  if ((afr!=fr) or (ato1!=to1) or (ato2!=to2) or (abr1!=br1) or (abr2!=br2)) then begin
    if ((afr!=0) or (ato1!=0) or (ato2!=0)) then begin // Shouldn't happen with Base Currency Records...
      res = true;
    end;
  end;
  OtherExchangeRate = res;
  return;
end;

global
function Boolean GenCouponsf()
BEGIN
  record CheckAccBlock CAr;

  BlockLoad(CAr);    
  GenCouponsf = CAr.GenCoupons!=0;
  return;
end;

global
function Boolean TimeInRange(Time tt,Time st,Time et)
BEGIN
  Boolean res;
  
  res = true;
  if (nonblanktime(st)) then begin
    if (tt<st) then begin res = false; end;
  end;
  if (nonblanktime(et)) then begin
    if (tt>et) then begin res = false; end;
  end;
  if (blanktime(tt)) then begin
    res = true;
  end;
  TimeInRange = res;
  RETURN;
END;

global
function string 255 GetObjectFromRestIT(string machinename)
BEGIN
  string 255 res;
  record RestITVc RestITr;
  
  if (blank(machinename)) then begin
    goto LGetObjectFromRestIT;
  end;
  RestITr.Code = machinename;
  if (ReadFirstMain(RestITr,1,true)) then begin
    res = RestITr.Object;
  end;
LGetObjectFromRestIT:;  
  GetObjectFromRestIT = res;
  RETURN;
END;

global
function Boolean RequireOpenSession(string machinename)
BEGIN
  Boolean res;
  record RestITVc RestITr;
  record CashierDefBlock CDb;
  
  if (blank(machinename)) then begin
    goto LRequireOpenSession;
  end;
  BlockLoad(CDb);
  res = CDb.RequireOpenSession!=0;
  RestITr.Code = machinename;
  if (ReadFirstMain(RestITr,1,true)) then begin
    res = RestITr.RequireOpenSession!=0;
  end;
LRequireOpenSession:;  
  RequireOpenSession = res;
  RETURN;
END;

/*
what the HELL !
global
procedure SeteosPais(var string pais,var string vVATNr,var string vProvName,var string vExtra)
begin

  pais="ar";

  if (pais=="ar") then begin 
    vVATNr = "CUIT";  
    vProvName = "Provincia";
    vExtra = "Contacte +54 11 4326-2089 o www.hansaworld.com para obtener ayuda";

    SetBegin(19);
    SetText(1,"Resp. Insc.");
    SetText(2,"Con. Final");
    SetText(3,"IVA No Resp.");
    SetText(4,"Exento");
    SetText(5,"Resp. No Insc.");
    SetText(6,"Monotributo");
    SetText(7,"Ex. Export");  
    SetText(7,"Ex. Import");  
    EndSet;
    
    SString(966,"+54 11 4326-2089");
    SString(1576,"Falta clave, llame +54 11 4326-2089");
  end;
  if (pais=="cl") then begin
    vVATNr = "RUT";  
    vProvName = "Region";
    vExtra = "Contacte +54 11 4326-2089 o www.hansaworld.com para obtener ayuda";

     
    SetBegin(19);
    SetText(1,"Contribuyente");
    SetText(2,"Exento");
    EndSet;
  end;
  if (pais=="py") then begin 
    vVATNr = "RUC"; 
    vProvName = "Depart. de Py.";
    vExtra = "Contacte +54 11 4326-2089 o www.hansaworld.com para obtener ayuda";
    
    SetBegin(19);
    SetText(1,"Contribuyente IVA");
    SetText(2,"Tributo Unico");
    SetText(3,"Exenta");
    EndSet;
    
    SString(966,"+54 11 4326-2089");
    SString(1576,"Falta clave, llame +54 11 4326-2089");
  end;
  if (pais=="uy") then begin 
    vVATNr = "RUC"; 
    vProvName = "Departemento";
    vExtra = "Contacte +54 11 4326-2089 o www.hansaworld.com para obtener ayuda";
    
    SetBegin(19);
    SetText(1,"Contribuyente");
    SetText(2,"Exento");
    EndSet;
  end;
  if (pais=="hn") then begin 
    vVATNr = "RTN";
    vProvName = "Provincia";
    vExtra = "Contacte +54 11 4326-2089 o  www.hansaworld.com para obtener ayuda";
   
    SetBegin(19);
    SetText(1,"Contribuyente");
    SetText(2,"Exento");
    EndSet;

  end;
  return;
end;

*/

updating procedure CreateVarietyPIr(string itemcode,string vecode)
begin
  record INVc INr;
  row INVc INrw;
  record PIVc PIr;
  row PIVc PIrw;
  record CUVc VEr;
  Integer i,rwcnt;
  record POSettingBlock POSetRec;

  PIr.ItemCode = itemcode;
  if (ReadFirstMain(PIr,1,true)==false) then begin
    INr.Code = itemcode;
    if (ReadFirstMain(INr,1,true)==false) then begin // Then it is a variety item, or a non existing one
      if (ReadFirstItem(itemcode,INr,true,true)) then begin
        RecordNew(PIr);
        BlockLoad(POSetRec);
        PIr.ItemCode = itemcode;
        PIr.VECode = POSetRec.DefaultSupplier;
        if (blank(PIr.VECode)) then begin
          PIr.VECode = vecode;
        end;
        VEr.Code = PIr.VECode;
        if (ReadFirstMain(VEr,1,true)) then begin
          PIr.VEName = VEr.Name;
          PIr.CurncyCode = VEr.VECurncyCode;
        end;
        if (nonblank(PIr.VECode)) then begin
          PIr.DefaultChoice = 1;
        end;
        PIr.Comment = INr.Name;
        PIr.PurPrice = INr.InPrice;
        PIr.PIFactor = blankval;
        PIr.NormPOQty = 1;
        PIr.MinPOQty = 1;
        rwcnt = MatRowCnt(INr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(INr,i,INrw);
          PIrw.Text = INrw.Text;
          MatRowPut(PIr,i,PIrw);
        end;
        if (RecordStore(PIr,false)==false) then begin
        end;
      end;
    end;
  end;
  return;
end;

procedure CalculateBarCodeCheckSum(var string barcode)
begin
  Integer i,slen,chsum;

  chsum = 0;
  slen = len(barcode);
  for (i=1;i<slen;i=i+2) begin
    chsum = chsum + StringToInt(mid(barcode,i,1));
  end;
  chsum = chsum * 3;
  for (i=0;i<slen;i=i+2) begin
    chsum = chsum + StringToInt(mid(barcode,i,1));
  end;
  chsum = mod(chsum,10);
  chsum = 10 - chsum;
  if (chsum==10) then begin
    chsum = 0;
  end;
  barcode = barcode & chr(asc("0") + chsum);
  return;
end;

global
procedure CreateEANBarCode(var record INVc INr,string variety,var record BarcodeVc Barcoder)
begin
  record INVc tempINr;
  record ItemSettingBlock ISr;
  string 100 nextnr;
  string 100 temp;
  string 100 barcode;
  string 100 oldbarcode;

  BlockLoad(ISr);
  barcode = ISr.YourBarCodeDef;
  M4PadString(barcode,ISr.BarCodeLength,"9",false,temp);
  tempINr.BarCode = temp;
  if (ReadLastKey("BarCode",tempINr,1,false)) then begin
    oldbarcode = Right(tempINr.BarCode,len(tempINr.BarCode)-len(ISr.YourBarCodeDef));
    oldbarcode = Left(oldbarcode,len(oldbarcode)-1);
  end;
  Barcoder.BarCodeSerialNo = temp;
  if (ReadLastKey("BarCodeSerialNo",Barcoder,1,false)) then begin
    if (oldbarcode<Barcoder.BarCodeSerialNo) then begin
      oldbarcode = Barcoder.BarCodeSerialNo;
    end;
  end;
  if (nonblank(oldbarcode)) then begin
    NextM4Number(oldbarcode,nextnr);
    if (len(ISr.BarCodeStartFrom) + len(ISr.YourBarCodeDef)<ISr.BarCodeLength) then begin
      nextnr = Right(nextnr,ISr.BarCodeLength - len(ISr.YourBarCodeDef)); //len(ISr.BarCodeStartFrom));
    end else begin
      nextnr = Right(nextnr,len(ISr.BarCodeStartFrom));
    end;
  end else begin
    if (len(ISr.BarCodeStartFrom) + len(ISr.YourBarCodeDef)<ISr.BarCodeLength) then begin
      M4PadString(ISr.BarCodeStartFrom,ISr.BarCodeLength - len(ISr.YourBarCodeDef),"0",true,temp);
      NextM4Number(temp,nextnr);
    end else begin
      nextnr = ISr.BarCodeStartFrom;
    end;
  end;
  RecordNew(Barcoder);
  Barcoder.Itemcode = INr.Code & variety;
  Barcoder.BarCodeSerialNo = nextnr;
  Barcoder.Comment = INr.Name;
  barcode = ISr.YourBarCodeDef & nextnr;
  CalculateBarCodeCheckSum(barcode);
  Barcoder.Barcode = barcode;
  INr.BarCode = barcode;
  return;
end;

updating procedure DoCreateEANBarCode(string itemcode,Boolean addtoitem)
begin
  record INVc INr;
  record INVc oldINr;
  record BarcodeVc Barcoder;
  Boolean testf;
  string 255 variety;

  testf = false;
  if (addtoitem) then begin
    if (ReadFirstItem(itemcode,INr,true,true)) then begin
      if (blank(INr.BarCode)) then begin
        testf = true;
      end;
    end;
  end else begin
    Barcoder.Itemcode = itemcode;
    if (ReadFirstKey("Itemcode",Barcoder,1,true)==false) then begin
      if (ReadFirstItem(itemcode,INr,true,true)) then begin
        testf = true;
      end;
    end;
  end;
  if (testf) then begin
    RecordCopy(oldINr,INr);
    variety = Right(itemcode,len(itemcode)-len(INr.Code));
    CreateEANBarCode(INr,variety,Barcoder);
    if (addtoitem) then begin
      if (RecordUpdate(oldINr,INr,false)==0) then begin
      end;
    end else begin
      if (RecordStore(Barcoder,false)==false) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateVARItemsOR(record ORVc ORr)
begin
  record VarietyBlock VBr;
  row ORVc ORrw;
  Integer i,rwcnt;
  
  BlockLoad(VBr);
  if (VBr.AutoNewPurItem or VBr.AutoNewBarCode) then begin
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (VBr.AutoNewPurItem) then begin
        CreateVarietyPIr(ORrw.ArtCode,"");
      end;
      if (VBr.AutoNewBarCode) then begin
        DoCreateEANBarCode(ORrw.ArtCode,false);
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateVARItemsQT(record QTVc QTr)
begin
  record VarietyBlock VBr;
  row QTVc QTrw;
  Integer i,rwcnt;
  
  BlockLoad(VBr);
  if (VBr.AutoNewPurItem or VBr.AutoNewBarCode) then begin
    rwcnt = MatRowCnt(QTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QTrw);
      if (VBr.AutoNewPurItem) then begin
        CreateVarietyPIr(QTrw.ArtCode,"");
      end;
      if (VBr.AutoNewBarCode) then begin
        DoCreateEANBarCode(QTrw.ArtCode,false);
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateVARItemsOY(record OYVc OYr)
begin
  record VarietyBlock VBr;
  row OYVc OYrw;
  Integer i,rwcnt;
  
  BlockLoad(VBr);
  if (VBr.AutoNewPurItem or VBr.AutoNewBarCode) then begin
    rwcnt = MatRowCnt(OYr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OYr,i,OYrw);
      if (VBr.AutoNewPurItem) then begin
        CreateVarietyPIr(OYrw.ArtCode,"");
      end;
      if (VBr.AutoNewBarCode) then begin
        DoCreateEANBarCode(OYrw.ArtCode,false);
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateVARItemsPO(record POVc POr)
begin
  record VarietyBlock VBr;
  row POVc POrw;
  Integer i,rwcnt;
  
  BlockLoad(VBr);
  if (VBr.AutoNewPurItem or VBr.AutoNewBarCode) then begin
    rwcnt = MatRowCnt(POr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POr,i,POrw);
      if (VBr.AutoNewPurItem) then begin
        CreateVarietyPIr(POrw.ArtCode,POr.VECode);
      end;
      if (VBr.AutoNewBarCode) then begin
        DoCreateEANBarCode(POrw.ArtCode,false);
      end;
    end;
  end;
  return;
end;

global
Function Boolean CustHasEmail(string custcode)
begin
  record CUVc CUr;
  record ContactRelVc ContactRelr;
  record CUVc ContactCUr;
  Boolean foundf;
  Boolean res;
  
  res = false;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.eMail)) then begin
      res = true;
    end;
  end;
  if (res==false) then begin
    foundf = true;
    ContactRelr.CustCode = CUr.Code;
    while(LoopMain(ContactRelr,1,foundf)) begin
      if (ContactRelr.CustCode<>CUr.Code) then begin
        foundf = false;
      end;
      if (foundf) then begin
        if (ContactRelr.Invalid==0) then begin
          ContactCUr.Code = ContactRelr.ContactCode;
          if (ReadFirstMain(ContactCUr,1,true)) then begin
            if (nonblank(ContactCUr.eMail)) then begin
              res = true;
            end;
          end;
        end;
      end;
    end;
  end;
  CustHasEmail = res;
  return;
end;

/* This function can't handle anything but ZERO in from, yet... */
global
Function LongInt HalRandom(LongInt from,LongInt to)
begin
  string 100 ast;
  string 10 tostr,resstr;
  Integer firstval;
  LongInt maxlength,max;
  LongInt pos;
  LongInt step;
  LongInt i,j;
  LongInt res;

  resstr = "";
  pos = 0;
  step = StripNonDigits("" & TimeToVal3(CurrentTime));
  ast = "0123456789";
  tostr = "" & to;
  maxlength = Len(tostr);
  max = Left(tostr,1);
  if (max<1) then begin
    resstr = "0";
    goto HalRandomEnd;
  end;
  for (i=0;i<maxlength;i=i+1) begin
    pos = step + pos;
    while (pos>=max) begin
      pos = pos - max;
    end;
    if (pos<0) then begin
      pos = 0;
    end;
    if (pos>max) then begin
      pos = max;
    end;
    resstr = resstr & Mid(ast,pos,1);
    max = Len(ast);
  end;
HalRandomEnd:;
  res = resstr;
  HalRandom = resstr;
  return;
end;

global
updating procedure LogUserChange(string what,string oldinfo,string newinfo,Boolean allowedf)
begin
  record UserLogVc UserLogr;
  
  UserLogr.User = CurrentUser;
  UserLogr.evDate = CurrentDate;
  UserLogr.evTime = CurrentTime;
  UserLogr.Company = CurrentCompany;
  UserLogr.What = what;
  UserLogr.Oldinfo = oldinfo;
  UserLogr.Newinfo = newinfo;
  if (allowedf) then begin
    UserLogr.Allowedf = 1;
  end else begin
    UserLogr.Allowedf = 0;
  end;
  if (RecordStore(UserLogr,true)) then begin end;
  return;
end;

global
function val FindVATDecimals(string vatc,val v1,Integer InclVAT,Integer TotalwoTAX,integer decimals)
begin 
  val res;
  val rval,t1val,tax1,vval;
  
  MulVATIVExecute(vatc,v1,rval,tax1,InclVAT,TotalwoTAX,SetRoundModeD(decimals));
  
  res = rval;
  FindVATDecimals = res;
  return;
end;

global
function Boolean OpenContactRecord(string contactname,string custcode)
begin
  Boolean res;
  record CUVc Contactr;
  record ContactRelVc CRr;
  
  res = false;
  if (nonblank(contactname)) then begin
    CRr.ContactName = contactname;
    CRr.CustCode = custcode;
    if (ReadFirstKey("ActContact",CRr,2,true)) then begin
      Contactr.Code = CRr.ContactCode;
      if (ReadFirstMain(Contactr,1,true)) then begin
        OpenWindow("CUDClass",0,0,"","",Contactr);    
        res = true;
      end;
    end;
  end;
  
  OpenContactRecord = res;
end;
