external function string 255 CurDrawerCode(string);
external function string 255 StripCharacter(string,string);
external function val ValFromString(string,string,string);
external function Boolean IsDigit(string);
external function string 255 ReplaceCharacterSeries(string,string,string);
external procedure FindFiscalYearBlockRow(Date,row YearBlock);
external function Integer CountObjects(string);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure In2Period(var string,var Date,var Date);
external procedure DefaultPeriod(var string);

global
procedure IVPerHourRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IVPerHourRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;

  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;

  RepSpec.flags[10] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure IVPerLocRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IVPerLocRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;

  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure VEAnaRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date d;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VEAnaRClass");  
  d = CurrentDate;
  d.day = 1;
  RepSpec.sStartDate = d;
  d.day = DaysInMonth(d.year,d.month);
  RepSpec.sEndDate = d;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SearchMailRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SearchMailRClass");  
  td = RepSpec.sStartDate;
  td.year = td.year - 3;
  RepSpec.Stext = td;
  RepSpec.Stext = RepSpec.Stext & ":";
  td = RepSpec.sEndDate;
  RepSpec.Stext = RepSpec.Stext & td;
  RepSpec.ArtMode = 2;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
function Boolean SearchMailRClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  Date d1,d2;
  string 255 tstr;
  
  res = false;
  switch (fieldname) begin
    case "Stext":
      GetWindowRecord(wn,RepSpec);
      In2Period(RepSpec.Stext,d1,d2);
      tstr = d1;
      tstr = tstr & ":";
      tstr = tstr & d2;
      RepSpec.Stext = tstr;
      PutWindowRecord(wn,RepSpec);
  end;
  SearchMailRClassAfterEditField = res;
  return;
end;

global
procedure FredRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"FredRClass");  
  RepSpec.ArtMode = 0;
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure MBA3RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date curYearstartdate,curYearenddate;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MBA3RClass");  
  FindFiscalYear(RepSpec.sStartDate,curYearstartdate,curYearenddate);
  RepSpec.d2 = RepSpec.sStartDate;
  RepSpec.flags[1] = 1;
  RepSpec.flags[9] = 1;
  RepSpec.flags[13] = 1;
  RepSpec.FirstVer = 3;
  RepSpec.ArtMode = 1;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
function Boolean MBARClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  Date d1,d2;
  string 30 tstr;
  record RcVc RepSpec;
  
  res = false;
  switch (fieldname) begin
    case "ObjStr":
      GetWindowRecord(wn,RepSpec);
      if (CountObjects(RepSpec.ObjStr)>1) then begin
        MessageBox(20577,"");
      end;
  end;
  MBARClassAfterEditField = res;
  return;
end;

global
procedure MBARClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date curYearstartdate,curYearenddate;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MBARClass");  
  FindFiscalYear(RepSpec.sStartDate,curYearstartdate,curYearenddate);  
  RepSpec.d2 = RepSpec.sStartDate;
  RepSpec.f4 = 3;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure MBA2RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date curYearstartdate,curYearenddate;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MBA2RClass");  
  FindFiscalYear(RepSpec.sStartDate,curYearstartdate,curYearenddate);
  RepSpec.d2 = RepSpec.sStartDate;
  RepSpec.FirstVer = 3;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure WinEDIEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record WinediBlock Winedib;
  
  BlockLoad(Winedib);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.f2 = Winedib.Path;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END; 

global
procedure RetPUJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RetPUJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure RetJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RetJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure BankStRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BankStRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure AccListRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"AccListRClass");  
  RepSpec.flags[12] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure TransTaxIVRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TransTaxIVRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.vals0 = 3;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PLVATBolRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATBolRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PLVATHonRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATHonRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATHonRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATHonRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATKenRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATKenRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATBolRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATBolRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATHonRepRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATHonRepRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure UpdTransBRateVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"UpdTransBRateVClass");  
  td.year = 2006;
  td.month = 12;
  td.day = 31;
  RepSpec.d1 = td;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure LitVATRegIVEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn, false);
  GetWindowRecord(wn, RepSpec);
  ReportDefaults(RepSpec, "LitVATRegIVEClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn, RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure LitVATRegVIEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn, false);
  GetWindowRecord(wn, RepSpec);
  ReportDefaults(RepSpec, "LitVATRegVIEClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn, RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure VATVIVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VATVIVClass");  
  td = CurrentDate;
  td.day = 1;
  td = AddMonth(td,-1);
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  td = CurrentDate;
  td.day = 1;
  RepSpec.d1 = td; 
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.d2 = td;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure VATIVVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VATIVVClass");  
  td = CurrentDate;
  td.day = 1;
  td = AddMonth(td,-1);
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure DDHansaEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"DDHansaEClass");  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

function string 20 GetCompanyPhone()
begin
  record CYBlock CYbl;
  string 20 res;

  BlockLoad(CYbl);
  res = CYbl.Phone;
  
  GetCompanyPhone = res;
return;
end;

global
procedure LatVATPurchasesEClassReportDefaults(integer wn)
begin
  record RcVc RepSpec;
  record UserVc Userr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  Userr.Code = CurrentUser;
  if (readfirstmain(Userr,1,true)) then begin
    RepSpec.f4 = Userr.Name;
    RepSpec.f2 = Userr.Job;
    RepSpec.f3 = Userr.Phone1;
    if blank(RepSpec.f3) then begin
      RepSpec.f3 = GetCompanyPhone;
    end;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);

  return;
end;

global
procedure PLVAT1ExpEClassReportDefaults(Integer wn)
BEGIN
  record CYBlock CYbl;
  record USerVc USerr;
  record RcVc RepSpec;
  
  Blockload(CYbl);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVAT1ExpEClass");  
  Userr.Code = CurrentUser;
  if (readfirstmain(Userr,1,true)) then begin
    RepSpec.f4 = USerr.Name;
    RepSpec.f2 = Userr.Job;
    RepSpec.f3 = Userr.Phone1;
    if blank(RepSpec.f3) then begin
      RepSpec.f3 = GetCompanyPhone;
    end;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PLVAT2RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVAT2RClass");  
  RepSpec.flags[21] = 1;
  RepSpec.flags[22] = 1;
  RepSpec.flags[23] = 1;
  RepSpec.flags[9] = 1;
  RepSpec.flags[10] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure LatVATSalesEClassReportDefaults(Integer wn)
BEGIN
  record CYBlock CYbl;
  record USerVc USerr;
  record RcVc RepSpec;
  
  Blockload(CYbl);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LatVATSalesEClass");  
  RepSpec.f3 = CYbl.Phone;
  Userr.Code = CurrentUser;
  if (readfirstmain(Userr,1,true)) then begin
    RepSpec.f4 = USerr.Name;
    RepSpec.f2 = Userr.Job;
    RepSpec.f3 = Userr.Phone1;
    if blank(RepSpec.f3) begin
      RepSpec.f3 = GetCompanyPhone;
    end;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PlannedStockRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.d1 = AddDay(CurrentDate,1);
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END; 

global
procedure ServiceUsageRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ServiceUsageRClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END; 

global
procedure BASMSStatusRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BASMSStatusRClass");  
  RepSpec.ArtMode = 0;
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure BuyBackJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BuyBackJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 0;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure AppleGDVSellRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"AppleGDVSellRClass");  

  RepSpec.sStartDate = AddDay(CurrentDate,-GetDateID(CurrentDate)+1);
  RepSpec.sEndDate = AddDay(RepSpec.sStartDate,6);
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
function string 60 AppleGDVSellRClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;
  record VEStoreIDVc VESr;

  VESr.VECode = RepSpec.FirstAcc;
  if (ReadFirstMain(VESr,1,true)) then begin
    res = VESr.VEOurID;
    res = res & "_";
    res = res & VESr.Region;
    res = res & "_";
    res = res & "SLS";
    res = res & "_";
    res = res & DateToString(CurrentDate,"YYYYMMDD");
    res = res & "01";
    res = res & ".txt";
  end;
  AppleGDVSellRClassDefaultFileName = res;  
  return;
end;

global
function string 60 AppleGDVInvRClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;
  record VEStoreIDVc VESr;

  VESr.VECode = RepSpec.FirstAcc;
  if (ReadFirstMain(VESr,1,true)) then begin
    res = VESr.VEOurID;
    res = res & "_";
    res = res & VESr.Region;
    res = res & "_";
    res = res & "INV";
    res = res & "_";
    res = res & DateToString(CurrentDate,"YYYYMMDD");
    res = res & "01";
    res = res & ".txt";
  end;
  AppleGDVInvRClassDefaultFileName = res;  
  return;
end;

global
procedure LatEUSalesEClassReportDefaults(Integer wn)
begin
  record CYBlock CYb;
  record RcVc RepSpec;
  
  BlockLoad(CYb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LatEUSalesEClass");  
  RepSpec.f1 = CYb.ChiefAccountant;
  RepSpec.f2 = CYb.Phone;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure UserHistRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"UserHistRClass");
  RepSpec.flags[0] = 0;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure RecalcStockVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record MainStockBlock MSb;
  
  BlockLoad(MSb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RecalcStockVClass");
  RepSpec.d1 = MSb.StockCorectAfter;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure VIMexEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record MainStockBlock MSb;
  
  BlockLoad(MSb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VIMexEClass");
  RepSpec.vals0 = 15.00;
  RepSpec.vals1 = 10.00;
  RepSpec.vals2 = 0.00;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;


global
function string 60 TRSloEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;

  res = USetStr(18060);
  TRSloEClassDefaultFileName = res;  
  return;
end;

global
function string 60 IVSloEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;

  res = USetStr(18062);
  IVSloEClassDefaultFileName = res;  
  return;
end;

global
function string 60 VISloEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;

  res = USetStr(18061);
  VISloEClassDefaultFileName = res;  
  return;
end;

global
procedure HTSStatArgIVRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HTSStatArgIVRClass");  
  RepSpec.flags[21] = 1;
  RepSpec.flags[22] = 1;
  RepSpec.flags[23] = 1;
  RepSpec.flags[24] = 1;
  
  RepSpec.flags[10] = 1;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.flags[13] = 1;
  RepSpec.flags[14] = 1;
  RepSpec.flags[15] = 1;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure VATPurchMexEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VATPurchMexEClass");  
  RepSpec.vals0 = 15;
  RepSpec.vals1 = 10;
  RepSpec.vals2 = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure IVToMailVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IVToMailVClass");  
  RepSpec.ArtMode = 0;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ActToMailVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ActToMailVClass");  
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure RsrtEventAvailRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RsrtEventAvailRClass");  
  td = CurrentDate;
  td.day = 1;
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure TransRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TransRClass");  
  RepSpec.ArtMode = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure HTSStatIVRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date d1,d2;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HTSStatIVRClass");  
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.flags[14] = 1;
  if (nonblank(RepSpec.Period2Str)) then begin
    d1 = StringToDate(FirstInRange(RepSpec.Period2Str,10));
    d2 = StringToDate(LastInRange(RepSpec.Period2Str,10));
    d1 = AddYear(d1,0);
    d2 = AddYear(d2,0);
    RepSpec.Stext = d1;
    RepSpec.Stext = RepSpec.Stext & ":";
    RepSpec.Stext = RepSpec.Stext & d2;
    if (HasLocalization("FIN")) then begin
      RepSpec.ArtMode = 2;
      RepSpec.flags[10] = 1;
      RepSpec.flags[13] = 1;
      RepSpec.flags[15] = 1;
    end;
  end;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure LatPeriodicVATEClassReportDefaults(Integer wn)
begin
  record UserVc Userr;
  record RcVc RepSpec;
  record CYBlock CYbl;

  BlockLoad(CYbl);
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LatPeriodicVATEClass");
  Userr.Code = CurrentUser;
  if Readfirstmain(Userr,1,true) Then Begin
    RepSpec.f4 = Userr.Name;
    RepSpec.f5 = Userr.Spec;
  End;
  RepSpec.flags[9] = 1;
  RepSpec.flags[10] = 1;
  RepSpec.flags[27] = 3;
  RepSpec.f2 = CYbl.emailAddr;
  RepSpec.f3 = CYbl.Phone;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure BugStatRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Integer dateid;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BugStatRClass");  
  dateid = GetDateID(CurrentDate);
  RepSpec.sStartDate = AddDay(CurrentDate,-(dateid-1));
  RepSpec.sEndDate = AddDay(CurrentDate,7-dateid); 
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure COCUServiceworthRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"COCUServiceworthRClass");  

  td = CurrentDate;
  td.month = 1;
  td.day = 1;
  RepSpec.Period2Str = td;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  td.month = 12;
  td.day = 31;
  RepSpec.Period2Str = RepSpec.Period2Str & td;
  In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ConsCOCUServiceworthRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ConsCOCUServiceworthRClass");  

  td = CurrentDate;
  td.month = 1;
  td.day = 1;
  RepSpec.Period2Str = td;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  td.month = 12;
  td.day = 31;
  RepSpec.Period2Str = RepSpec.Period2Str & td;
  In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
  RepSpec.IncDaughter = 1;
  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;


global
procedure DblConsCOCUSWorthRn(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  integer oldcomp;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.flags[29] = StringToInt(l);
  RepSpec.IncDaughter = 0;
  RunReport(RepSpec,0);   
  
/*  
  oldcomp = CurrentCompany;
  if (SetCompany(StringToInt(l),false)) then begin
    RunReport(RepSpec,0);   
    ResetCompany(oldcomp);
  end;
*/  
  return;
end;

global
procedure Check1TRRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"Check1TRRClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure Check2TRRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"Check2TRRClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PurchB1RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PurchB1RClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END; 

global
procedure CloseINRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PurchB1RClass");  
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
procedure CloseINVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PurchB1RClass");  
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
procedure VATVIRegUkrRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VATVIRegUkrRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
procedure VATIVRegUkrRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VATIVRegUkrRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
procedure VATRepApp5RClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VATRepApp5RClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
procedure ServerLogRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ServerLogRClass");  
  RepSpec.long1 = 100;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
function string 60 VATIVVIRegUkrEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;

  res = "J1201503";
  res = res & "100000";
  res = res & DateToString(RepSpec.sStartDate,"DDMMYYYY");
  res = res & ".xml";
  VATIVVIRegUkrEClassDefaultFileName = res;  
  return;
end;


global
procedure RoyaltyRepRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RoyaltyRepRClass");
  RepSpec.ArtMode = 2;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 2;
  RepSpec.flags[4] = 1;
  RepSpec.IncDaughter = 0;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);

  return;
end;

global
procedure BirthDayRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BirthDayRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure INAttachPictFileVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"INAttachPictFileVClass");
  RepSpec.f2 = "JPG";
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure NightAuditRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record NightAuditPrefVc NightAuditPrefr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"NightAuditRClass");
  NightAuditPrefr.UserCode = CurrentUser;
  if (ReadFirstMain(NightAuditPrefr,1,True)) then begin
    RepSpec.flags[0] = NightAuditPrefr.Sec1Enabled;
    RepSpec.flags[1] = NightAuditPrefr.Sec1RoomDetails;
    RepSpec.flags[2] = NightAuditPrefr.Sec2Enabled;
    RepSpec.AccStr = NightAuditPrefr.Sec2Account;
    RepSpec.ObjStr = NightAuditPrefr.Sec2Obj;
    RepSpec.ObjType = NightAuditPrefr.Sec2ObjType;
    RepSpec.flags[17] = NightAuditPrefr.Sec2PeriodType;
    RepSpec.flags[4] = NightAuditPrefr.Sec3Enabled;
    RepSpec.flags[5] = NightAuditPrefr.Sec3ShowAgents;
    RepSpec.flags[6] = NightAuditPrefr.Sec3ShowGuests;
    RepSpec.flags[7] = NightAuditPrefr.Sec4Enabled;
    RepSpec.flags[8] = NightAuditPrefr.Sec4Detailed;
    RepSpec.f1 = NightAuditPrefr.Sec4Locations;
    RepSpec.flags[9] = NightAuditPrefr.Sec5Enabled;
    RepSpec.flags[10] = NightAuditPrefr.Sec5Detailed;
    RepSpec.f2 = NightAuditPrefr.Sec5Machines;
    RepSpec.flags[11] = NightAuditPrefr.Sec6Enabled;
    RepSpec.flags[12] = NightAuditPrefr.Sec6Detailed;
    RepSpec.flags[13] = NightAuditPrefr.Sec7Enabled;
    RepSpec.flags[14] = NightAuditPrefr.Sec7DoResStatus;
    RepSpec.f3 = NightAuditPrefr.Sec7SalesGroups;
    RepSpec.flags[15] = NightAuditPrefr.Sec7DoSalesGroup;
    RepSpec.f4 = NightAuditPrefr.Sec7Locations;
    RepSpec.flags[16] = NightAuditPrefr.Sec7DoLocations;
  end else begin
    RepSpec.flags[0] = 1;
    RepSpec.flags[2] = 1;
    RepSpec.flags[4] = 1;
    RepSpec.flags[7] = 1;
    RepSpec.flags[9] = 1;
    RepSpec.flags[11] = 1;
    RepSpec.flags[13] = 1;
  end;
  RepSpec.sStartDate = CurrentDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure HRMSkillRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HRMSkillRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure HRMCOListRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HRMCOListRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure HeadCountRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HeadCountRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PortTaxXmlEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PortTaxXmlEClass");
  RepSpec.FirstAcc = LMb.BranchID;
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 3;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PortStockXmlEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PortStockXmlEClass");
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PortTaxXml2EClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PortTaxXml2EClass");
  RepSpec.FirstAcc = LMb.BranchID;
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 3;
  RepSpec.flags[29] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure TripSheetRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TripSheetRClass");
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CUCOSDUpdateVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CUCOSDUpdateVClass");  
  RepSpec.long1 = 60;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END; 

global
procedure CreateCOCUInvVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CreateCOCUInvVClass");  
  RepSpec.flags[14] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure COCUServiceInvRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"COCUServiceInvRClass");  
  RepSpec.flags[14] = 1;
  RepSpec.f7 = "11,1T";
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure COCUServiceStatRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"COCUServiceStatRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.flags[3] = typStandardERP;
  RepSpec.flags[0] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[6] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  return;
end;

global
procedure LoyaltyCardRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LoyaltyCardRClass");
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SuplWithHoldRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SuplWithHoldRClass");
  RepSpec.f3 = USetStr(13870);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ServiceUsageCompRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ServiceUsageCompRClass");
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[9] = 1;
  RepSpec.flags[10] = 2;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;  
end;

global
procedure NoSalesRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"NoSalesRClass");
  if (ProgramType==typFirstContact) then begin
    RepSpec.ArtMode = 3;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;  
end;

global
procedure ChqDepositJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ChqDepositJRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;  
end;

global
procedure CollectionsAnalysisRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CollectionsAnalysisRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;  
end;

global
procedure INPriceListStatRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"INPriceListStatRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;  
end;

global
procedure INMultiBuyStatRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"INMultiBuyStatRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;  
end;

global
procedure ItemstoFi550EClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ItemstoFi550EClass");
  RepSpec.FirstAcc = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure DayRepBookRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  Date td;
  
  BlockLoad(LMb);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"DayRepBookRClass");
  td = CurrentDate;
  td.day = 1;
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.f1 = LMb.LocalMachineCode;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure UnivTestResRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"UnivTestResRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.IncDaughter = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  return;
end;

global
procedure UserRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"UserRClass");  
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure ARCheckRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ARCheckRClass");  
//  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure APCheckRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"APCheckRClass");  
//  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure HTSOPStatRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HTSOPStatRClass");  
  RepSpec.ArtMode = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure ApprovalStatusRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ApprovalStatusRClass");  
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure SRJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SRJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure DirectDebitEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"DirectDebitEClass");  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure IPSuggestionVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IPSuggestionVClass");  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CFDIEInvEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record EInvoiceBlock EIb;
  
  BlockLoad(EIb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CFDIEInvEClass");  
  RepSpec.f2 = EIb.EInvoiceStoragePath;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CFDIEIVCashEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record EInvoiceBlock EIb;
  
  BlockLoad(EIb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CFDIEIVCashEClass");  
  RepSpec.f2 = EIb.EInvoiceStoragePath;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CFDIEInvVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record EInvoiceBlock EIb;
  
  BlockLoad(EIb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CFDIEInvVClass");  
//  RepSpec.f2 = EIb.EInvoiceStoragePath;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ITVATRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ITVATRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CashierStatsRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CashierStatsRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ORPayStatusRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ORPayStatusRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure XMLExportVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"XMLExportVClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ASSubmissionStatRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ASSubmissionStatRClass");  
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 0;
  RepSpec.flags[11] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
function string 60 PortTaxXmlEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 filname;
  record CYBlock CYb;
  row YearBlock Ybrw;

  BlockLoad(CYb);
  FindFiscalYearBlockRow(RepSpec.sStartDate,Ybrw);
  filname = CYb.VATNr;
  if (blank(filname)) then begin
    filname = "PortTaxXmlEn";
  end;  
  filname = filname & "-" & Ybrw.YearCode;
  filname = filname & ".xml";
  PortTaxXmlEClassDefaultFileName = filname;  
  return;
end;

global
function string 60 PRTInventoryEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 filename;
  record CYBlock CYb;
  row YearBlock Ybrw;
  
  BlockLoad(CYb);
  filename = CYb.VATNr;
  if (blank(filename)) then begin
    filename = "PRTTaxXmlEn";
  end;  
  FindFiscalYearBlockRow(RepSpec.d1,Ybrw);
  filename = filename & "-" & Ybrw.YearCode;
  if (RepSpec.flags[0]==0) then begin
    filename = filename & ".xml";
  end else begin
    filename = filename & ".csv";
  end;
  PRTInventoryEClassDefaultFileName = filename;  
  return;
end;

global
function string 60 PortTaxXml2EClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 filname;
  record CYBlock CYb;
  row YearBlock Ybrw;

  BlockLoad(CYb);
  FindFiscalYearBlockRow(RepSpec.sStartDate,Ybrw);
  filname = CYb.VATNr;
  if (blank(filname)) then begin
    filname = "PortTaxXmlEn";
  end;  
  filname = filname & "-" & Ybrw.YearCode;
  filname = filname & ".xml";
  PortTaxXml2EClassDefaultFileName = filname;  
  return;
end;

global
procedure PLVATPARClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATPARClass");
  RepSpec.flags[1]= 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATPARClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATPARClass");
  RepSpec.flags[1]= 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PLVATGTRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATGTRClass");
  RepSpec.long2 = 20; //default value
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATGTRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATGTRClass");
  RepSpec.long2 = 20;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PLVATSLVRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATSLVRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATBaseSLVRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATBaseSLVRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATSLVRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATSLVRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ConsTaxSumRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ConsTaxSumRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure VersionUpdateStatsRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VersionUpdateStatsRClass");
  RepSpec.f1 = CurrentCompany;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure GenIRASEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"GenIRASEClass");
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ItemTurnRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record VarietyBlock Varb;
  
  BlockLoad(Varb);  
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ItemTurnRClass");
  RepSpec.flags[2] = Varb.AutoVarietyDef;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);

  return;
end;


global
procedure PORequireRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record VarietyBlock Varb;
  
  BlockLoad(Varb);  
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PORequireRClass");
  RepSpec.flags[3] = Varb.AutoVarietyDef;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);

  return;
end;


global
procedure ItemSalesRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record VarietyBlock Varb;
  
  BlockLoad(Varb);  
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ItemSalesRClass");
  RepSpec.flags[2] = Varb.AutoVarietyDef;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);

  return;
end;

global
procedure PORequireVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PORequireVClass");  
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
end;

global
procedure WSTransRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"WSTransRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure CustWithHoldRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CustWithHoldRClass");  
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CYearVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CYearVClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
function string 60 FinPeriodicVATEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;

  if (InString(RepSpec.f1,":")==0) then begin
    res = RepSpec.f1;
  end;
  FinPeriodicVATEClassDefaultFileName = res;  
  return;
end;

global
function string 60 PeriodicVATEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;

  if (HasLocalization("HRV")) then begin
    res = USetStr(31399);
    res = res & "-";
    res = res & DateToString(RepSpec.sStartDate,"DDMMYYYY");
    res = res & ".xml";
  end;
  PeriodicVATEClassDefaultFileName = res;  
  return;
end;

global
function string 60 FInvoiceEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 filname;
  
  if (InString(RepSpec.f1,":")==0) then begin
    filname = RepSpec.f1;
  end;
  if (blank(filname)) then begin
    filname = "FInvoiceEn";
  end;  
  filname = filname & ".xml";
  FInvoiceEClassDefaultFileName = filname;     
  return;
end;

global
function string 60 MPEClassDefaultFileName(record RcVc RepSpec)
begin
  record BankFileBlock BFb;
  string 60 filname;
  
  BlockLoad(BFb);
  
  if (BFb.Bank==156) then begin
    filname = USetStr(1751) & " " & RepSpec.f1 & ".xml";
  end else begin
    filname = "";
  end; 
  
  MPEClassDefaultFileName = filname; 
    
  return;
end;

global
procedure ActCalRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ActCalRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure IstaatItemImportEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IstaatItemImportEClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END; 

global
procedure IstaatItemExportEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IstaatItemExportEClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END; 

global
procedure ArgGrIncPercRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ArgGrIncPercRClass");  
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
procedure SAFTtoEmailVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SAFTtoEmailVClass");
  RepSpec.FirstAcc = LMb.BranchID;
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 3;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SMJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SMJRClass");  
  RepSpec.flags[20] = 1;
  RepSpec.ArtMode = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
function string 60 FrenchFECEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 filname,tstr;
  record CYBlock CYb;
  row YearBlock Ybrw;
  date td,sd,ed;
  longint days;
  integer monthint;

  BlockLoad(CYb);
  FindFiscalYearBlockRow(RepSpec.sStartDate,Ybrw);
  tstr = CYb.OrgNr;
  filname = ReplaceCharacterSeries(tstr,"/\|:!@£$%^&*(){}<>?~ ","_");
  filname = filname & "FEC";
  filname = filname & DateToString(Ybrw.EndDate,"YYYYMMDD");
    
  td = RepSpec.sStartDate;
  days = DaysInMonth(td.Year,td.Month);
  sd = AddDay(td,-td.Day+1);
  ed = AddDay(sd,days-1);
  if (DateInRange(RepSpec.sEndDate,sd,ed)) then begin
    monthint = GetMonth(RepSpec.sStartDate);
    if (monthint<10) then begin 
      tstr = "0" & monthint;
    end else begin
      tstr = "" & monthint;
    end;
    filname = filname & "_" & tstr;
  end;
  FrenchFECEClassDefaultFileName = filname;  
  return;
end;

global
procedure PurOrdJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PurOrdJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLEUVATHRVECLassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLEUVATHRVECLass");  
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
function string 60 SLEUVATHRVECLassDefaultFileName(record RcVc RepSpec)
begin
  string 60 filename;

  filename = USetStr(5620);
  filename = filename & ".xml";
  SLEUVATHRVECLassDefaultFileName = filename;  
  return;
end;

global
procedure PLEUVATHRVECLassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLEUVATHRVECLass");  
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end; 

global
function string 60 PLEUVATHRVECLassDefaultFileName(record RcVc RepSpec)
begin
  string 60 filename;

  filename = USetStr(5629);
  filename = filename & ".xml";
  PLEUVATHRVECLassDefaultFileName = filename;  
  return;
end;

global
procedure HWContractRClassReportDefaults(Integer wn)
begin
  record RCVc RepSpec;
  Date td;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HWContractRClass");
  td = CurrentDate;
  td.Day = 1;  
  RepSpec.d1 = td;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);

  return;
end;

global
procedure ItemResourceUsageRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ItemResourceUsageRClass");  
  RepSpec.flags[4] = 2;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);

  return;
end;

global
procedure AvailableAppsRClassReportDefaults(Integer wn)
begin
  record RCVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"AvailableAppsRClass");
  RepSpec.flags[6] = -1;
  RepSpec.flags[5] = -1;
  PutWindowRecord(wn,RepSpec);

  return;
end;

global
procedure SwitchboardCallsRClassReportDefaults(Integer wn)
begin
  record RCVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SwitchboardCallsRClass");
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);

  return;
end;


global
updating function Boolean GenOwnChkVClassOnOKWindow(Integer wn)
begin
  boolean res;
  record RcVc RepSpec;
  Integer nwn;
  record AccVc Accr;
  
  GetWindowRecord(wn,RepSpec);
  if (nonblank(RepSpec.LastAcc)) then begin
    Accr.AccNumber = RepSpec.LastAcc;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      MessageBox(1290,RepSpec.LastAcc);
      WindowFieldGoto(wn,RepSpec,-1,"LastAcc",true);
      goto LGenOwnChkVClassOnOKWindow;
    end;
    if (Accr.blockedFlag!=0) then begin
      MessageBox(1258,RepSpec.LastAcc);
      WindowFieldGoto(wn,RepSpec,-1,"LastAcc",true);
      goto LGenOwnChkVClassOnOKWindow;
    end;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    Accr.AccNumber = RepSpec.AccStr;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      MessageBox(1290,RepSpec.AccStr);
      WindowFieldGoto(wn,RepSpec,-1,"AccStr",true);
      goto LGenOwnChkVClassOnOKWindow;
    end;
    if (Accr.blockedFlag!=0) then begin
      MessageBox(1258,RepSpec.AccStr);
      WindowFieldGoto(wn,RepSpec,-1,"AccStr",true);
      goto LGenOwnChkVClassOnOKWindow;
    end;
  end;
  if (nonblank(RepSpec.f2)) then begin
    Accr.AccNumber = RepSpec.f2;
    if (ReadFirstMain(Accr,1,true)==false) then begin
      MessageBox(1290,RepSpec.f2);
      WindowFieldGoto(wn,RepSpec,-1,"f2",true);
      goto LGenOwnChkVClassOnOKWindow;
    end;
    if (Accr.blockedFlag!=0) then begin
      MessageBox(1258,RepSpec.f2);
      WindowFieldGoto(wn,RepSpec,-1,"f2",true);
      goto LGenOwnChkVClassOnOKWindow;
    end;
  end;
  res = true;
LGenOwnChkVClassOnOKWindow:;  
  GenOwnChkVClassOnOKWindow = res;
  return;
end;

global
procedure ListServerVersionsRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ListServerVersionsRClass");
  RepSpec.NoTimeoutLimit = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ASPListUsedVersionsRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ASPListUsedVersionsRClass");
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
function string 60 GDPdUDataToSimbaEClassDefaultFileName(record RcVc RepSpec)
begin
  string 60 res;

  res = DateToString(RepSpec.sStartDate,"YYYYMMDD") & "-" & DateToString(RepSpec.sEndDate,"YYYYMMDD") & "_GDPdU.scs";
  GDPdUDataToSimbaEClassDefaultFileName = res;  
  return;
end;

global
procedure BankTRIClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record SysFormatBlock SFb;

  BlockLoad(SFb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BankTRIClass");
  RepSpec.flags[0] = 1;
  RepSpec.AccStr = ";";
  switch (SFb.dateOrder) begin
    case 0:
      RepSpec.Stext = "MM-DD-YYYY";
    case 1:
      RepSpec.Stext = "DD-MM-YYYY";
    case 2:
      RepSpec.Stext = "YYYY-MM-DD";
  end;
  RepSpec.FirstAcc = ",";
  RepSpec.LastAcc = "";
  RepSpec.f1 = StringFromSet(621,0); 
  RepSpec.f2 = StringFromSet(621,0); 
  RepSpec.f3 = StringFromSet(621,0); 
  RepSpec.f4 = StringFromSet(621,0); 
  RepSpec.f5 = StringFromSet(621,0); 
  RepSpec.f6 = StringFromSet(621,0); 
  RepSpec.f7 = StringFromSet(621,0); 
  RepSpec.f8 = StringFromSet(621,0); 
  RepSpec.f9 = StringFromSet(621,0); 
  RepSpec.f10 = StringFromSet(621,0); 
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

function string 255 BankTRCSVFileFieldSeparator(string default,string inline)
begin
  string 255 res;
  
  if (InString(inline,""",")) then begin
    res = ",";
  end;
  if (blank(res)) then begin
    if (InString(inline,""";")) then begin
      res = ";";
    end;
  end;
  if (blank(res)) then begin
    if (InString(inline,",")) then begin
      res = ",";
    end;
  end;
  if (blank(res)) then begin
    if (InString(inline,";")) then begin
      res = ";";
    end;
  end;
  if (blank(res)) then begin
    res = default;
  end;
  BankTRCSVFileFieldSeparator = res;
  return;
end;

function string 255 FindBankTRCSVFileDecimalSeparator(string data)
begin
  string 255 res,decsep;
  Integer sp;
  val v;

  sp = InString(data,".");
  if (sp!=0) then begin 
    v = ValFromString(data,".","");
    if (len(ValToString(v,M4Val,"",".",0))==len(data)) then begin
      res = ".";
    end;
  end;
  if (sp<=0) then begin
    sp = InString(data,",");
    if (sp!=0) then begin 
      v = ValFromString(data,",","");
      if (len(ValToString(v,M4Val,"",",",0))==len(data)) then begin
        res = ",";
      end;
    end;
  end;
  FindBankTRCSVFileDecimalSeparator = res;
  return;
end;

function string 255 BankTRCSVFileDecimalSeparator(record RcVc RepSpec,string fsep,string default,string inline)
begin
  string 255 res,data;
  LongInt pos;
  Integer col;
  
  col = 1;
  pos = 0;
  GetNextSubstring(inline,pos,fsep,data);
  while (nonblank(data)) begin
    data = StripCharacter(data,"""");
    res = FindBankTRCSVFileDecimalSeparator(data);
    if (nonblank(res)) then begin
      data = "";
    end else begin
      GetNextSubstring(inline,pos,fsep,data);
      col = col + 1;
    end;
  end;
  switch (col) begin
    case 1: RepSpec.f1 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 2: RepSpec.f2 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 3: RepSpec.f3 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 4: RepSpec.f4 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 5: RepSpec.f5 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 6: RepSpec.f6 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 7: RepSpec.f7 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 8: RepSpec.f8 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 9: RepSpec.f9 = StringFromSet(621,kBankTRFileColumnAmount); 
    case 10: RepSpec.f10 = StringFromSet(621,kBankTRFileColumnAmount); 
  end;
  if (blank(res)) then begin
    res = default;
  end;
  BankTRCSVFileDecimalSeparator = res;
  return;
end;

function string 255 ParseCSVFileDate(record SysFormatBlock SFb,string data,Integer sp,string datesep)
begin
  string 255 res,ch;
  Integer p,d;
  Boolean testf;

  if (nonblank(data)) then begin
    testf = true;
    p = sp - 1;
    if (p>=0 and p<len(data)) then begin
      if (IsDigit(Mid(data,p,1))==false) then begin
        testf = false;
      end;
    end;
    p = sp + 1;
    if (p>=0 and p<len(data)) then begin
      if (IsDigit(Mid(data,p,1))==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      d = 1;
      p = 0;
      ch = Mid(data,p,1);
      while (nonblank(ch)) begin
        if (ch==datesep) then begin
          res = res & ch;
        end else begin
          if (IsDigit(ch)) then begin
            switch (SFb.dateOrder) begin
              case 0:
                switch (d) begin
                  case 1: res = res & "M";
                  case 2: res = res & "M";
                  case 3: res = res & "D";
                  case 4: res = res & "D";
                  case 5: res = res & "Y";
                  case 6: res = res & "Y";
                  case 7: res = res & "Y";
                  case 8: res = res & "Y";
                end;
              case 1:
                switch (d) begin
                  case 1: res = res & "D";
                  case 2: res = res & "D";
                  case 3: res = res & "M";
                  case 4: res = res & "M";
                  case 5: res = res & "Y";
                  case 6: res = res & "Y";
                  case 7: res = res & "Y";
                  case 8: res = res & "Y";
                end;
              case 2:
                switch (d) begin
                  case 1: res = res & "Y";
                  case 2: res = res & "Y";
                  case 3: res = res & "Y";
                  case 4: res = res & "Y";
                  case 5: res = res & "M";
                  case 6: res = res & "M";
                  case 7: res = res & "D";
                  case 8: res = res & "D";
                end;
            end;
            d = d + 1;
          end;
        end;        
        p = p + 1;      
        ch = Mid(data,p,1);
      end;
    end;
  end;
  ParseCSVFileDate = res;
  return;
end;

function string 255 FindBankTRCSVFileDateFormat(record SysFormatBlock SFb,string data)
begin
  string 255 res,datesep;
  Integer sp;

  sp = InString(data,"/");
  if (sp!=0) then begin datesep = "/"; end;
  if (sp<=0) then begin
    sp = InString(data,"-");
    if (sp!=0) then begin datesep = "-"; end;
  end;
  if (sp<=0) then begin
    sp = InString(data,".");
    if (sp!=0) then begin datesep = "."; end;
  end;
  if (sp!=0) then begin
    res = ParseCSVFileDate(SFb,data,sp-1,datesep);
  end;
  FindBankTRCSVFileDateFormat = res;
  return;
end;

function string 255 BankTRCSVFileDateFormat(record RcVc RepSpec,string fsep,string default,string inline)
begin
  string 255 res,data;
  LongInt pos;
  record SysFormatBlock SFb;
  Integer col;

  BlockLoad(SFb);  
  col = 1;
  pos = 0;
  GetNextSubstring(inline,pos,fsep,data);
  while (nonblank(data)) begin
    data = StripCharacter(data,"""");
    res = FindBankTRCSVFileDateFormat(SFb,data);
    if (nonblank(res)) then begin
      data = "";
    end else begin
      GetNextSubstring(inline,pos,fsep,data);
      col = col + 1;
    end;
  end;
  switch (col) begin
    case 1: RepSpec.f1 = StringFromSet(621,kBankTRFileColumnDate); 
    case 2: RepSpec.f2 = StringFromSet(621,kBankTRFileColumnDate); 
    case 3: RepSpec.f3 = StringFromSet(621,kBankTRFileColumnDate); 
    case 4: RepSpec.f4 = StringFromSet(621,kBankTRFileColumnDate); 
    case 5: RepSpec.f5 = StringFromSet(621,kBankTRFileColumnDate); 
    case 6: RepSpec.f6 = StringFromSet(621,kBankTRFileColumnDate); 
    case 7: RepSpec.f7 = StringFromSet(621,kBankTRFileColumnDate); 
    case 8: RepSpec.f8 = StringFromSet(621,kBankTRFileColumnDate); 
    case 9: RepSpec.f9 = StringFromSet(621,kBankTRFileColumnDate); 
    case 10: RepSpec.f10 = StringFromSet(621,kBankTRFileColumnDate); 
  end;
  if (blank(res)) then begin
    res = default;
  end;
  BankTRCSVFileDateFormat = res;
  return;
end;

procedure ParseBankTRCSVFile(record RcVc RepSpec)
begin
  string 255 inline;
  
  if (RepSpec.flags[0]!=0) then begin
    NextImportLine(true);
  end;
  inline = ImportField;

//"EE242200221010625678";"10";"01.08.2015";"";"Algsaldo";"8074,61";"EUR";"K";"";"AS";"";"";  
//06/08/2015,FEE-Fee-Dom Wire,-17.00
  RepSpec.AccStr = BankTRCSVFileFieldSeparator(RepSpec.AccStr,inline);
  RepSpec.Stext = BankTRCSVFileDateFormat(RepSpec,RepSpec.AccStr,RepSpec.Stext,inline);
  RepSpec.FirstAcc = BankTRCSVFileDecimalSeparator(RepSpec,RepSpec.AccStr,RepSpec.FirstAcc,inline);
  return;
end;

global
procedure BankTRFindCSVFileFormat()
begin
  Integer wn;
  record RcVc RepSpec;
  string 255 fname;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  if (OpenFileDialog("CSV",fname)) then begin    
    RepSpec.f1 = StringFromSet(621,0); 
    RepSpec.f2 = StringFromSet(621,0); 
    RepSpec.f3 = StringFromSet(621,0); 
    RepSpec.f4 = StringFromSet(621,0); 
    RepSpec.f5 = StringFromSet(621,0); 
    RepSpec.f6 = StringFromSet(621,0); 
    RepSpec.f7 = StringFromSet(621,0); 
    RepSpec.f8 = StringFromSet(621,0); 
    RepSpec.f9 = StringFromSet(621,0); 
    RepSpec.f10 = StringFromSet(621,0); 
    OpenFile(fname);
    ParseBankTRCSVFile(RepSpec);
    CloseFile;
  end;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure WebSiteInfoRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"WebSiteInfoRClass");
  RepSpec.NoTimeoutLimit = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure WebSiteInfoRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"WebSiteInfoRClass");
  RepSpec.NoTimeoutLimit = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

procedure SetLatIntrastatDefaults(var record RCVc RepSpec)
begin

  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 0;

  return;
end;

global
procedure LatIntrastatPURClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LatIntrastatPURClass");
  SetLatIntrastatDefaults(RepSpec);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure LatIntrastatIVRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LatIntrastatIVRClass");
  SetLatIntrastatDefaults(RepSpec);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure LatIntrastatPUEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LatIntrastatPUEClass");
  SetLatIntrastatDefaults(RepSpec);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure LatIntrastatIVEClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LatIntrastatIVEClass");
  SetLatIntrastatDefaults(RepSpec);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure POSZRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"POSZRClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.FirstAcc = LMb.LocalMachineCode;
  RepSpec.LastAcc = CurDrawerCode(LMb.LocalMachineCode);
  RepSpec.flags[0] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure POSXRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"POSXRClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.FirstAcc = LMb.LocalMachineCode;
  RepSpec.LastAcc = CurDrawerCode(LMb.LocalMachineCode);
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure BIRESalesEClassReportDefaults(Integer wn)
begin
  record CYBlock CYb;
  record RcVc RepSpec;
    
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BIRESalesEClass");  
  BlockLoad(CYb);
  RepSpec.f1 = "POS SALES";
  RepSpec.f1 = RepSpec.f1 & " " & CYb.VATNr;
  RepSpec.f1 = RepSpec.f1 & " " & DateToString(CurrentDate,"MMYYYY");
  RepSpec.f1 = RepSpec.f1 & " " & "F00";
  PutWindowRecord(wn,RepSpec);
  return;
end;

global
procedure RCldSvrNoArchvRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RCldSvrNoArchvRClass");  
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure OPBIRJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"OPBIRJRClass");  
  RepSpec.f2 = USetStr(39260);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure IPBIRJRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IPBIRJRClass");  
  RepSpec.f2 = USetStr(39280);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure VIIntCostCalcRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VIIntCostCalcRClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure ConsCust2STRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ConsCust2STRClass");  
  RepSpec.IncDaughter = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);  
  return;
end;

global
procedure SugarCRMInitVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record SugarCRMBlock SCRMb;
  
  BlockLoad(SCRMb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SugarCRMInitVClass");  
  RepSpec.flags[0] = SCRMb.SendContacts;
  RepSpec.flags[1] = SCRMb.SendItems;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CleanUILogVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CleanUILogVClass");
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

