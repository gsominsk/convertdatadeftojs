external procedure ExtractObj(string,var Integer,var string);
external procedure GetPDVRebt(string,var val);

global
procedure GetObjs(string ot,string ru,var string rstr)
BEGIN
  record ObjVc RUr;
  Boolean found;
  string 255 ostr;
  Integer pos;

  rstr = "";
  pos = 0;
  ExtractObj(ru,pos,ostr);
  while (nonblank(ostr)) begin
    RUr.Code = ostr;
    found = ReadFirstMain(RUr,1,true);
    if (found) then begin
      if (ot==RUr.OTCode) then begin
        if (nonblank(rstr)) then begin rstr = rstr & ","; end;
        rstr = rstr & ostr;
      end;
    end;
    ExtractObj(ru,pos,ostr);
  end;
  RETURN;
END;

global
procedure SpecialVAT(string paydeal,var val res)
BEGIN
  val temp;
  record AccBlock atr;
  val discountval;
  
  BlockLoad(atr);
  if (atr.DiscCashVAT!=0) then begin
    GetPDVRebt(paydeal,discountval);
    if (discountval!=0) then begin
      temp = discountval/100;
      temp = res * temp;
      res = res - temp;
    end;
  end;
  return;
end;

global
procedure SpecialVAT2(val discountval,var val res)
begin
  val temp;
  record AccBlock atr;
  
  BlockLoad(atr);
  if (atr.DiscCashVAT!=0) then begin
    if (discountval!=0) then begin
      temp = discountval/100;
      temp = res * temp;
      res = res - temp;
    end;
  end;
  return;
end;  

global
procedure SwapM4Val(var val a,var val b)
begin
  val temp;
  
  temp = a;
  a = b;
  b = temp;
  return;
end;

global
procedure GetVATRow(string vatc,var row VATCodeBlock res)
begin
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATCoderw;
  integer rwcnt,i;

  BlockLoad(VATCodeRec);
  rwcnt = MatRowCnt(VATCodeRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATCodeRec,i,VATCoderw);
    if (VATCoderw.VATCode==vatc) then begin
      CopyRow(VATCodeRec,VATCoderw,res);
    end;
  end;
  return;
end;

global
procedure GetVATRowFromBlock(string vatc,record VATCodeBlock VATCodeb,var row VATCodeBlock res)
begin
  row VATCodeBlock VATCoderw;
  integer rwcnt,i;

  rwcnt = MatRowCnt(VATCodeb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATCodeb,i,VATCoderw);
    if (VATCoderw.VATCode==vatc) then begin
      CopyRow(VATCodeb,VATCoderw,res);
    end;
  end;
  return;
end;

global
procedure GetVATdouble(string vatc,var val vval,var val tax1val,Integer InclVAT)
BEGIN
  record VATCodeBlock VATCodeRec;
  row VATCodeBlock VATCoderw;
  val res,tax1res,ex,inc;
  Integer i,nvt;
  
  BlockLoad(VATCodeRec);
  nvt = MatRowCnt(VATCodeRec); 
  if (nvt!=0) then begin 
    if (blank(vatc)) then begin 
//      MatRowGet(VATCodeRec,0,VATCoderw);
      goto LGetVATdouble; 
    end else begin
      for (i = 0; i<nvt; i=i+1) begin
        MatRowGet(VATCodeRec,i,VATCoderw);
        if (VATCoderw.VATCode==vatc) then begin 
          i = nvt;
//      goto L88;
        end;
      end;  
    end;  
//L88:
    if (InclVAT!=0) then begin
      if (blank(VATCoderw.IncVatpr)) then begin
        ex = VATCoderw.ExVatpr;
        if (ex!=blankval) then begin
//          res = (1-(100/(100+ex)))*100;
          res = 100-(10000/(100+ex));
        end;
      end else begin
        res = VATCoderw.IncVatpr;
      end;
      ex = VATCoderw.Tax1pr;
      if (InclVAT==2) then begin
        tax1res = VATCoderw.Tax1pr;
      end else begin
        tax1res = (1-(100/(100+VATCoderw.Tax1pr)))*100;
      end;
    end else begin
      if (blank(VATCoderw.ExVatpr)) then begin
        inc = VATCoderw.IncVatpr;        
        if (inc!=blankval) then begin
          res = ((100/(100-inc))-1)*100;
        end;
      end else begin
        res = VATCoderw.ExVatpr;
      end;
      tax1res = VATCoderw.Tax1pr;
    end;
  end;
LGetVATdouble:;  
  vval = res;
  tax1val = tax1res;
  RETURN;
END;

procedure CalcCommisionOneRow(val qtyp,val pricep,val totvalp,val calcvalp,var val rowcalcvalp,var val restp)
BEGIN
  val temp;
  
  temp = qtyp*pricep;
  temp = temp*calcvalp;
  rowcalcvalp = temp/totvalp;
  temp = rowcalcvalp*qtyp;
  restp = restp + temp;
  RETURN;
END;

global
procedure InvoiceCalcCommisionValue(record IVVc IVr,val qtyp,val pricep,var val resp)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;
  val totval,rv,rest;
  val calcval,rowcalcval;

  rowcalcval = blankval;
  calcval = IVr.Commision;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    rv = IVrw.Quant*IVrw.Price;
    totval = rv + totval;
  end;
  CalcCommisionOneRow(qtyp,pricep,totval,calcval,rowcalcval,rest);
  resp = rowcalcval/IVrw.Quant;  
  RETURN;
END;

global
procedure OrderCalcCommisionValue(record ORVc ORr,val qtyp,val pricep,var val resp)
BEGIN
  row ORVc ORrw;
  Integer i,rwcnt;
  val totval,rv,rest;
  val calcval,rowcalcval;

  rowcalcval = blankval;
  calcval = ORr.Commision;
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    rv = ORrw.Quant*ORrw.Price;
    totval = rv + totval;
  end;
  CalcCommisionOneRow(qtyp,pricep,totval,calcval,rowcalcval,rest);
  resp = rowcalcval/ORrw.Quant;  
  RETURN;
END;

global
procedure GetVATCodeRow(string vatcode,row VATCodeBlock VATbrw)
begin
  record VATCodeBlock VATb;
  integer i,rwcnt;
  
  BlockLoad(VATb);
  rwcnt = MatrowCnt(VATb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATb,i,VATbrw);
    if (VATbrw.VATCode==vatcode) then begin
      goto LGetVATCodeRow;
    end;
  end;
LGetVATCodeRow:;  
  return;
end;
