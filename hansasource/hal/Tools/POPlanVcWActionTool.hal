external function Boolean POVc_PasteVEArtCode(var record POVc,Integer);
external function Boolean POVc_PasteArtCode(var record POVc,Integer,Boolean);
external function roundmode SetRoundModeD(Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure RoundRowSum(string,string,string,var val);
external procedure DivPIFactor(val,val,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure POSumup(var record POVc);
external function Boolean PasteVEInPO(var record POVc,Boolean);

procedure NewPO(record POVc POp,string vecode,Date ondat)
begin
  RecordNew(POp);
  POp.TransDate = ondat;
  POp.SerNr = NextSerNr("POVc",POp.TransDate,-1,false,"");
  POp.VECode = vecode;
  if (PasteVEInPO(POp,false)) then begin end;
  return;
end;

procedure AddPORow(record POVc POr,record PIVc PIr,val sugqty)
begin
  Integer rwcnt;
  row POVc POrw;
  string 255 tstr;
  val t;
  
  rwcnt = MatRowCnt(POr);
  ClearRow(POr,POrw,1);
  POrw.ArtCode = PIr.ItemCode;  
  MatRowPut(POr,rwcnt,POrw);

  POVc_PasteArtCode(POr,rwcnt,false);
  MatRowGet(POr,rwcnt,POrw);

  POrw.VEArtCode = PIr.VEItemCode;
  MatRowPut(POr,rwcnt,POrw);
  POVc_PasteVEArtCode(POr,rwcnt);
  MatRowGet(POr,rwcnt,POrw);

  if (nonblank(sugqty)) then begin
    POrw.Quant = POrw.Quant + sugqty;
    if (POrw.Quant<PIr.MinPOQty) then begin
      POrw.Quant = PIr.MinPOQty;
    end;
    POrw.PIFactor = PIr.PIFactor;
    DivPIFactor(POrw.Quant,POrw.PIFactor,t);
    POrw.VEQuant = t;
    CalcSum(POrw.VEQuant,POrw.Price,0,POrw.vRebate,t,0);
    RoundRowSum(POr.CurncyCode,POr.PayDeal,"POVc",t);
    POrw.Sum = t;
  end;
  MatRowPut(POr,rwcnt,POrw);

/*  
  POrw.stp = 1;
  POrw.ovst = 0;
  POrw.WSNr = -1;
  POrw.VEArtCode = PIr.VEItemCode;
  POrw.ArtCode = PIr.ItemCode;
  POrw.Spec = PIr.Comment;
  POrw.Price = PIr.PurPrice;
  POrw.Quant = blankval;
  POrw.Sum = blankval;
  POrw.vRebate = blankval;
  POrw.VATCode = POr.VEVATCode;
  if (blank(POrw.VATCode)) then begin
    GetItemVATCode(POrw.ArtCode,POr.ExportFlag,tstr,false);
    POrw.VATCode = tstr;
  end;
  POrw.Shipd2 = blankval;
  POrw.Shipd1 = blankval;
  POrw.PIFactor = blankval;
  POrw.VEQuant = blankval;    
  if (nonblank(sugqty)) then begin
    POrw.Quant = POrw.Quant + sugqty;
    POrw.PIFactor = PIr.PIFactor;
    DivPIFactor(POrw.Quant,POrw.PIFactor,t);
    POrw.VEQuant = t;
    CalcSum(POrw.VEQuant,POrw.Price,0,POrw.vRebate,t,0);
    RoundRowSum(POr.CurncyCode,POr.PayDeal,"POVc",t);
    POrw.Sum = t;
  end;
  MatRowPut(POr,rwcnt,POrw);
*/  
  return;
end;

updating function LongInt AddToPO(record PIVc PIr,val sugqty,Date ondat,Date neededdat)
begin
  LongInt res;
  record POVc oldPOr;
  record POVc POr;
  Boolean found,testf,newpof;
  Integer rwcnt;
  
  newpof = true;
  POr.VECode = PIr.VECode;
  POr.OKFlag = 0;
  found = true;
  while (LoopKey("VECode",POr,2,found)) begin
    if (POr.VECode!=PIr.VECode) then begin found = false; end;
    if (POr.OKFlag!=0) then begin found = false; end;
    if (found) then begin
      testf = true;
      rwcnt = MatRowCnt(POr);
      if (rwcnt>=199) then begin testf = false; end;
      if (POr.Closed!=0) then begin testf = false; end;
      if (POr.PUFlag!=0) then begin testf = false; end;
      if ((nonblankdate(ondat)) and (POr.TransDate!=ondat)) then begin testf = false; end;
      if ((nonblankdate(neededdat)) and (POr.PlanShipDate<neededdat)) then begin testf = false; end;
      if (testf) then begin
        RecordCopy(oldPOr,POr);
        AddPORow(POr,PIr,sugqty);
        res = POr.SerNr;
        POSumup(POr);
        if (RecordUpdate(oldPOr,POr,false)) then begin end;
        newpof = false;
      end;
    end;
  end;
  if (newpof) then begin
    NewPO(POr,PIr.VECode,ondat);
    POr.PlanShip = neededdat;
    POr.PlanShipDate = neededdat;
    AddPORow(POr,PIr,sugqty);
    if (POr.SerNr>0) then begin
      POSumup(POr);
      if (RecordStore(POr,false)) then begin end;
      res = POr.SerNr;
    end;
  end;
  AddToPO = res;
  return;
end;

function Boolean GetPOPlanPI(string itemcode,string supptop,string supprow,var record PIVc PIr)
begin
  Boolean pifoundf;
  
  pifoundf = false;
  if (nonblank(supprow)) then begin
    PIr.ItemCode = itemcode;
    PIr.Location = "";
    PIr.VECode = supprow;
    pifoundf = ReadFirstMain(PIr,3,true);
  end;
  if (pifoundf==false) then begin
    if (nonblank(supptop)) then begin
      PIr.ItemCode = itemcode;
      PIr.Location = "";
      PIr.VECode = supptop;
      pifoundf = ReadFirstMain(PIr,3,true);
    end;
  end;
  if (pifoundf==false) then begin
    if (blank(supptop)) and (blank(supprow)) then begin
      PIr.DefaultChoice = 1;
      PIr.ItemCode = itemcode;
      PIr.Location = "";
      pifoundf = ReadFirstKey("DefaultChoice",PIr,3,true);
    end;
  end;
  GetPOPlanPI = pifoundf;
  return;
end;

global
updating function Integer CreatePOFromPOPlan(var record POPlanVc POPr,Date frdat,Date todat,var string errstr)
begin
  Integer res;
  record POVc POr;
  row POPlanVc POPlanrw;
  record AutoProdVc AutoProdr;
  record PIVc PIr;
  Integer i,rwcnt;
  Boolean pifoundf,testf;
  string 30 itemtoorder;
  val theqty;
  
  res = 22071;
  if (UserCanAction("POPlanOK",true)==false) then begin
    res = 1274;
    goto LCreatePOFromPOPlan;
  end;
  rwcnt = MatRowCnt(POPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POPr,i,POPlanrw);
    if (blank(POPlanrw.Qty)) then begin
      theqty = POPlanrw.SugQty;
    end else begin
      theqty = POPlanrw.Qty;
    end;
    testf = true;
    if (POPlanrw.PONr>0) then begin
      testf = false;
    end;
    if (theqty<=0) then begin testf = false; end;
    if (nonblankdate(POPlanrw.POOrdDate)) then begin
      if (DateInRange(POPlanrw.POOrdDate,frdat,todat)==false) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (nonblank(POPlanrw.FromItemCode)) then begin
        AutoProdr.ToItemCode = POPlanrw.ItemCode;
        AutoProdr.FromItemCode = POPlanrw.FromItemCode;
        if (ReadFirstKey("ToItemCode",AutoProdr,2,true)) then begin
          itemtoorder = POPlanrw.FromItemCode;
          theqty = round((theqty / AutoProdr.UnitCoefficient)+0.49,SetRoundModeD(0));
        end else begin
          itemtoorder = POPlanrw.ItemCode;
        end;
      end else begin
        itemtoorder = POPlanrw.ItemCode;
      end;
      pifoundf = GetPOPlanPI(itemtoorder,POPr.VECode,POPlanrw.VECode,PIr);
      if (pifoundf) then begin
        POPlanrw.PONr = AddToPO(PIr,theqty,POPlanrw.POOrdDate,POPlanrw.NeededDate);
        res = 0;
      end else begin
        res = 20862;
        errstr = itemtoorder;
      end;
      MatRowPut(POPr,i,POPlanrw);
    end;
  end;
LCreatePOFromPOPlan:;  
  if (res==0) then begin
    POPr.OKFlag = 1;
  end;
  CreatePOFromPOPlan = res;
  return;
end;

procedure GetNewPOOrdDate(string itemcode,string supptop,string supprow,val sugqty,val qty,Date thedat,var val days,var Date dat)
begin
  record PIVc PIr;
  val theqty;
  val t,dayqty;
  Time timeqty;
  Date bldat;
  Boolean pifoundf;
  
  days = 0;
  dat = bldat;
  if (blank(qty)) then begin
    theqty = sugqty;
  end else begin
    theqty = qty;
  end;
  pifoundf = GetPOPlanPI(itemcode,supptop,supprow,PIr);
  if (pifoundf) then begin
    dayqty = PIr.PlannedDelDays;
/*
    if (SFPb.RoundOff==0) then begin
      days = Round(dayqty+0.49,SFPb.RoundOff);
    end else begin
      days = Round(dayqty,SFPb.RoundOff);
    end;
*/
    days = Round(dayqty+0.49,SetRoundModeD(0));
  end;
  if (days<0) then begin
    days = 0;
  end;
  dat = AddDay(thedat,-days);
  return;
end;

global
procedure RecalcPOOrdDate(var record POPlanVc POPlanr,Integer rownr)
begin
  row POPlanVc POPlanrw;
  Integer rwcnt,i;
  record INVc INr;
  record AutoProdVc AutoProdr;
  val days;
  Date dat;
  
  MatRowGet(POPlanr,rownr,POPlanrw);
  if (ReadFirstItem(POPlanrw.ItemCode,INr,false,false)) then begin
    GetNewPOOrdDate(INr.Code,POPlanr.VECode,POPlanrw.VECode,POPlanrw.SugQty,POPlanrw.Qty,POPlanrw.NeededDate,days,dat);
    POPlanrw.DaysToGet = days;
    POPlanrw.POOrdDate = dat;
    if (nonblank(POPlanrw.FromItemCode)) then begin
      AutoProdr.ToItemCode = POPlanrw.ItemCode;
      AutoProdr.Default = 1;
      if (ReadFirstKey("Default",AutoProdr,2,true)) then begin
        POPlanrw.FromItemCode = AutoProdr.FromItemCode;
        if (ReadFirstItem(POPlanrw.FromItemCode,INr,false,false)) then begin
          GetNewPOOrdDate(INr.Code,POPlanr.VECode,POPlanrw.VECode,POPlanrw.SugQty,POPlanrw.Qty,POPlanrw.NeededDate,days,dat);
          POPlanrw.DaysToGet = days;
          POPlanrw.POOrdDate = dat;
        end;
      end;
    end else begin
      AutoProdr.ToItemCode = POPlanrw.ItemCode;
      AutoProdr.FromItemCode = POPlanrw.FromItemCode;
      if (ReadFirstKey("ToItemCode",AutoProdr,2,true)==false) then begin
        AutoProdr.ToItemCode = POPlanrw.ItemCode;
        AutoProdr.Default = 1;
        if (ReadFirstKey("Default",AutoProdr,2,true)) then begin
          POPlanrw.FromItemCode = AutoProdr.FromItemCode;
          if (ReadFirstItem(POPlanrw.FromItemCode,INr,false,false)) then begin
            GetNewPOOrdDate(INr.Code,POPlanr.VECode,POPlanrw.VECode,POPlanrw.SugQty,POPlanrw.Qty,POPlanrw.NeededDate,days,dat);
            POPlanrw.DaysToGet = days;
            POPlanrw.POOrdDate = dat;
          end;
        end;
      end;
    end;
    MatRowPut(POPlanr,rownr,POPlanrw);
  end;
  return;
end;

global
procedure POPlanDClassItemCodeRemote(var record POPlanVc POPlanr,Integer rownr)
begin
  row POPlanVc POPlanrw;
  record INVc INr;
  LongInt pprownr;  
  
  MatRowGet(POPlanr,rownr,POPlanrw);
  if (ReadFirstItem(POPlanrw.ItemCode,INr,false,false)) then begin
    POPlanrw.Spec = INr.Name;
  end;
  MatRowPut(POPlanr,rownr,POPlanrw);
  RecalcPOOrdDate(POPlanr,rownr);
  return;
end;


global
procedure RecalcAllPOOrdDate(var record POPlanVc POPlanr)
begin
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(POPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    RecalcPOOrdDate(POPlanr,i);
  end;
  return;
end;

