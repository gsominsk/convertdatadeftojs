external function roundmode DefaultRoundMode();
external function Boolean ReadTAcc(string,string,Boolean,var record TAccVc);
external function LongInt TRVcRecordCheck(record TRVc,record TRVc,LongInt,LongInt);
external procedure PasteAccObj(string,var string);
external procedure TRSumup(var record TRVc,var val);
external procedure ATransVal(val,val,string,string,var val,var val,Boolean);
external procedure AutoObj(var string);
external procedure GetACShortAccount(string,var string,var string);
external procedure GetAcc2StartBalance(string,string,Date,Integer,Integer,var val,string,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetAccName(string,var string,Integer);

global
procedure TRAccName(var record TRVc TRp,Integer rownr,Boolean autf,Boolean fulldataf)
BEGIN
  row TRVc TRrw;
  record AccVc Accr;
  Boolean Accs;
  string 255 tstr;
  Integer row1;
  val from,to1,to2,bas1,bas2;
  string 20 curncy;
  record TAccVc TAccr;

  MatRowGet(TRp,rownr,TRrw);
  if (nonblank(TRrw.AccNumber)) then begin
    Accr.AccNumber = TRrw.AccNumber;
    Accs = ReadFirstKey("AccNumber",Accr,1,true);
    if (Accs==false) then begin
      tstr = USetStr(1023);
      TRrw.Comment = tstr;
      MatRowPut(TRp,rownr,TRrw);
      Beep;
    end else begin      
      Accs = GetAccName(Accr.AccNumber,tstr,60);
      if (fulldataf) or (blank(TRrw.Comment)) then begin
        TRrw.Comment = tstr;
      end;
      if (fulldataf) or (blank(TRrw.VATCode)) then begin
        TRrw.VATCode = Accr.VATCode;
      end;
      curncy = Accr.Curncy;
      GetFullCurncyRate(curncy,TRp.TransDate,from,to1,to2,bas1,bas2);
      TRrw.Curncy = curncy;
      TRrw.FrRate = from;
      TRrw.ToRateB1 = to1;
      TRrw.ToRateB2 = to2;
      TRrw.BaseRate1 = bas1;
      TRrw.BaseRate2 = bas2;
      if (ReadTAcc(TRrw.TAccNumber,TRrw.Objects,nonblank(TRrw.DebVal),TAccr)) then begin
        TRrw.TAccNumber = TAccr.TAccNumber;
      end;
      
      MatRowPut(TRp,rownr,TRrw);
      if (autf==false) then begin
        if (nonblank(Accr.AutCode)) then begin
          row1 = rownr + 1;
          ClearRow(TRp,TRrw,1);
          TRrw.AccNumber = Accr.AutCode;
          MatRowPut(TRp,row1,TRrw);
        end;
      end;
    end;
  end else begin
    TRrw.Comment = "";
    MatRowPut(TRp,rownr,TRrw);
  end;
  RETURN;
END;

global
function Boolean TRAutoTrans(var record TRVc TRp,Integer rownr,Boolean addinendf,Boolean insertf)
BEGIN
  Boolean res;
  row AutVc Autrw;
  record AutVc Autr;
  Boolean Auts;
  Integer i;
  LongInt anrows;
  Integer trow;
  val dval,acval,tval,temp,bv;
  val b2val,frrate,torate1,torate2,baserate1,baserate2;
  row TRVc OrgRow;
  row TRVc TRrw;
  Integer sf,nfr;
  Boolean backstep,insertedf,testf;
  Integer iv;
  string 255 tstr,tstrvat,firstrowvat;
  string 20 curncy;
  val from,to1,to2,bas1,bas2;
  record AccVc Accr;
  Date bd;
  
  res = false;
  ClearRow(TRp,OrgRow,1);
  MatRowGet(TRp,rownr,TRrw);
  Autr.Code = TRrw.AccNumber;
  curncy = TRrw.Curncy;
  GetFullCurncyRate(curncy,TRp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
  TRrw.Curncy = curncy;
  if (rownr>=1) then begin
    MatRowGet(TRp,rownr-1,TRrw);
    if ((TRrw.stp==1)) then begin
      firstrowvat = TRrw.VATCode;
      CopyRow(TRp,TRrw,OrgRow);
      TRrw.Typ = kTransactionRowTypeManual;
      TRrw.CompCode = "";
      TRrw.SerNr = -1;
      TRrw.DueDate = bd;
    end;
  end;
  if (blank(Autr.Code)) then begin goto LTRAutoTrans; end;
  Auts = ReadFirstMain(Autr,1,true);
  if (Auts==false) then begin goto LTRAutoTrans; end;
  res = true;
  TRSumup(TRp,tval);
  anrows = MatRowCnt(Autr);
  if (anrows==0) then begin goto LTRAutoTrans; end;
  if (addinendf) then begin
    trow = MatRowCnt(TRp) - 1;
  end else begin
    trow = rownr-1;
  end;
  for (i=0;i<anrows;i=i+1) begin
    MatRowGet(Autr,i,Autrw);
    trow = trow + 1;
    if (i==0) then begin
      if (trow>0) then begin
        if (Autrw.AccNumber=="!") then begin
          backstep = true;
          if (addinendf==false) then begin
            trow = trow - 1;
          end;
        end;
      end;
    end;
    if (trow>298) then begin goto L88TRAutoTrans; end;
    tstr = Autrw.AccNumber;
    tstrvat = Autrw.VATCode;
    if (trow>=MatRowCnt(TRp)) then begin
      ClearRow(TRp,TRrw,1);
      if (tstr=="#") then begin
        TRrw.Curncy = OrgRow.Curncy;
        TRrw.FrRate = OrgRow.FrRate;
        TRrw.ToRateB1 = OrgRow.ToRateB1;
        TRrw.ToRateB2 = OrgRow.ToRateB2;
        TRrw.BaseRate1 = OrgRow.BaseRate1;
        TRrw.BaseRate2 = OrgRow.BaseRate2;      
      end;
    end;
    TRrw.stp = 1;
    TRrw.ovst = 0;
    if (tstr=="#") then begin
      tstr = OrgRow.AccNumber;
    end;
    if ((i==0) and (backstep==true)) then begin
      tstr = OrgRow.AccNumber;
    end;
    TRrw.AccNumber = tstr;
    tstr = Autrw.objstr;
    if (tstr=="#") then begin
      tstr = OrgRow.Objects;
    end;
    if ((i==0) and (backstep==true)) then begin
      if (blank(tstr)) then begin 
        tstr = OrgRow.Objects;
      end;
    end;
    AutoObj(tstr);
    TRrw.Objects = tstr;
    tstr = Autrw.comstr;
    if (tstr=="#") then begin
      tstr = OrgRow.Comment;
    end;
    if ((i==0) and (backstep==true)) then begin
      if (blank(tstr)) then begin
        tstr = OrgRow.Comment;
      end;
    end;
    if (OrgRow.Typ==kTransactionRowTypeStock) then begin
      TRrw.Typ = kTransactionRowTypeStock;
    end;
    insertedf = false;
    if (blank(tstr)) then begin
      if ((Autrw.dstr!="=") and (Autrw.cstr!="=")) then begin
        if (insertf) then begin
          MatRowInsert(TRp,trow,TRrw);
          insertedf = true;
        end else begin
          MatRowPut(TRp,trow,TRrw);
        end;     
        TRAccName(TRp,trow,true,true);
        MatRowGet(TRp,trow,TRrw);
      end;
    end else begin
      TRrw.Comment = tstr;
    end;
    if (blank(TRrw.Comment)) then begin 
      GetAccName(TRrw.AccNumber,tstr,60);
      TRrw.Comment = tstr;
    end;
    tstrvat = Autrw.VATCode;
    if (tstrvat=="#") then begin
      tstrvat = OrgRow.VATCode;
    end;
    if ((i==0) and (backstep==true)) then begin
      if (blank(tstrvat)) then begin
        tstrvat = OrgRow.VATCode;
      end;
    end;
    if (blank(tstrvat)) then begin
      tstrvat = Autrw.VATCode;
      if (tstrvat=="#") or (tstrvat=="!") then begin
        tstrvat = OrgRow.VATCode;
      end;
    end;
    TRrw.VATCode = tstrvat;
    if (tstr=="#") or (tstr=="!") then begin
      TRrw.Curncy = OrgRow.Curncy;      
    end;
    if (blank(TRrw.Curncy)) then begin
//        curncy = Accr.Curncy;
      GetFullCurncyRate(curncy,TRp.TransDate,from,to1,to2,bas1,bas2);
      TRrw.Curncy = curncy;
      TRrw.FrRate = from;
      TRrw.ToRateB1 = to1;
      TRrw.ToRateB2 = to2;
      TRrw.BaseRate1 = bas1;
      TRrw.BaseRate2 = bas2;
    end else begin
      GetFullCurncyRate(TRrw.Curncy,TRp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
    end;
    if (OrgRow.Typ==kTransactionRowTypeStock) then begin
      TRrw.Typ = kTransactionRowTypeStock;
    end;
    if ((Autrw.dstr=="=") or (Autrw.cstr=="=")) then begin
      TRrw.DebVal = blankval;
      TRrw.CredVal = blankval;
      TRrw.DebVal2 = blankval;
      TRrw.CredVal2 = blankval;
      TRSumup(TRp,tval);
      tval = -TRp.DiffVal;
      testf = true;
      if (OrgRow.DebVal!=0) then begin
        if ((OrgRow.DebVal-OrgRow.CredVal)<0) then begin
          testf = false;
        end;
      end;
      if (OrgRow.CredVal!=0) then begin
        if ((OrgRow.DebVal-OrgRow.CredVal)>0) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        if (tval>=0) then begin
          if (Autrw.dstr=="=") then begin
            TRrw.DebVal = tval;
            temp = TRrw.BaseRate1/TRrw.BaseRate2;
            b2val = tval/temp;
            b2val = Round(b2val,DefaultRoundMode);          
            TRrw.DebVal2 = b2val;
          end;
          if (Autrw.cstr=="=") then begin
            TRrw.DebVal = OrgRow.CredVal - tval;
            temp = TRrw.BaseRate1/TRrw.BaseRate2;
            b2val = bv/temp;
            b2val = Round(b2val,DefaultRoundMode);
            TRrw.CredVal2 = b2val;
          end;
        end else begin
          if (Autrw.dstr=="=") then begin
            TRrw.DebVal = OrgRow.DebVal + tval;
            temp = TRrw.BaseRate1/TRrw.BaseRate2;
            b2val = tval/temp;
            b2val = Round(b2val,DefaultRoundMode);          
            TRrw.DebVal2 = b2val;
          end;
          if (Autrw.cstr=="=") then begin
            bv = -tval;
            TRrw.CredVal = bv;
            temp = TRrw.BaseRate1/TRrw.BaseRate2;
            b2val = bv/temp;
            b2val = Round(b2val,DefaultRoundMode);
            TRrw.CredVal2 = b2val;
          end;
        end;
      end else begin
        if (tval<=0) then begin
          TRrw.DebVal = tval;
          temp = TRrw.BaseRate1/TRrw.BaseRate2;
          b2val = tval/temp;
          b2val = Round(b2val,DefaultRoundMode);          
          TRrw.DebVal2 = b2val;
        end else begin
          bv = -tval;
          TRrw.CredVal = bv;
          temp = TRrw.BaseRate1/TRrw.BaseRate2;
          b2val = bv/temp;
          b2val = Round(b2val,DefaultRoundMode);
          TRrw.CredVal2 = b2val;
        end;
      end;
      TRrw.FrRate = frrate;
      TRrw.ToRateB1 = torate1;
      TRrw.ToRateB2 = torate2;
      TRrw.BaseRate1 = baserate1;
      TRrw.BaseRate2 = baserate2;
    end else begin
      TRrw.DebVal = blankval;
      TRrw.CredVal = blankval;
      TRrw.DebVal2 = blankval;
      TRrw.CredVal2 = blankval;
      if ((Autrw.dstr=="B") or (Autrw.cstr=="B")) then begin
        acval = blankval; 
        dval = blankval; 
        GetAcc2StartBalance(Autrw.AccNumber,Autrw.objstr,CurrentDate,0,0,bv,"",0);
        if (Autrw.cstr=="B") then begin
          acval = bv; 
        end else begin
          dval = bv;
        end;
      end else begin    
        ATransVal(OrgRow.DebVal,OrgRow.CredVal,Autrw.dstr,Autrw.cstr,dval,acval,Autr.DontSwap!=0);
      end;
      TRrw.FrRate = frrate;
      TRrw.ToRateB1 = torate1;
      TRrw.ToRateB2 = torate2;
      TRrw.BaseRate1 = baserate1;
      TRrw.BaseRate2 = baserate2;
      TRrw.DebVal = dval;
      if (nonblank(dval)) then begin
        temp = TRrw.BaseRate1/TRrw.BaseRate2;
        b2val = dval/temp;
        b2val = Round(b2val,DefaultRoundMode);
        TRrw.DebVal2 = b2val;
      end;

      TRrw.CredVal = acval;
      if (nonblank(acval)) then begin
        temp = TRrw.BaseRate1/TRrw.BaseRate2;
        b2val = acval/temp;
        b2val = Round(b2val,DefaultRoundMode);
        TRrw.CredVal2 = b2val;
      end;
    end; 
    if (OrgRow.Typ==kTransactionRowTypeStock) then begin
      TRrw.Typ = kTransactionRowTypeStock;
    end;
    if (insertf) then begin
      if (insertedf) then begin
        MatRowPut(TRp,trow,TRrw);
      end else begin
        MatRowInsert(TRp,trow,TRrw);
      end;
    end else begin
      MatRowPut(TRp,trow,TRrw);
//      if (blank(TRrw.Comment) or blank(TRrw.VATCode)) then begin //
      if (blank(TRrw.Comment) and blank(TRrw.VATCode)) then begin 
        TRAccName(TRp,trow,true,true);
      end;  
      MatRowGet(TRp,trow,TRrw);
      if (blank(TRrw.VATCode)) then begin
        Accr.AccNumber = TRrw.AccNumber;
        ReadFirstMain(Accr,1,true);
        TRrw.VATCode = Accr.VATCode;
        MatRowPut(TRp,trow,TRrw);
      end;
    end;
    TRSumup(TRp,tval);
  end;
L88TRAutoTrans:;
  TRSumup(TRp,temp);
LTRAutoTrans:;
  TRAutoTrans = res;
  RETURN;
END;

global
function Boolean TRVc_PasteAccNumber(var record TRVc TRp,Integer wnst,Integer rownr,Boolean changedf)
BEGIN
  Boolean res,autof;
  row TRVc TRrw;
  string 255 tstr,t2;

  res = false;
  MatRowGet(TRp,rownr,TRrw);
  if (wnst!=0) then begin//Rs_normal
    if ((changedf) or (blank(TRrw.Comment))) then begin
      if (TRAutoTrans(TRp,rownr,false,false)) then begin 
        autof = true; 
      end;
      res = true;
      MatRowGet(TRp,rownr,TRrw);
    end;
    if (changedf) then begin
      if (blank(TRrw.Objects)) then begin
        PasteAccObj(TRrw.AccNumber,tstr);
        TRrw.Objects = tstr;
        MatRowPut(TRp,rownr,TRrw);
        res = true;
      end;
    end;
    tstr = USetStr(1023);
    if ((changedf) or (TRrw.Comment==tstr) or (blank(TRrw.Comment))) then begin
      TRAccName(TRp,rownr,false,autof==false);
      MatRowGet(TRp,rownr,TRrw);
      res = true;
    end;
    t2 = USetStr(1023);
    if (t2!=tstr) then begin
      res = false;
    end;  
  end;
  MatRowPut(TRp,rownr,TRrw);
  TRVc_PasteAccNumber = res;
  RETURN;
END;

global
function Boolean TRVc_PasteACShort(var record TRVc TRp,Integer wnst,Integer rownr)
BEGIN
  Boolean res;
  string 255 tstr,t2,obj;
  row TRVc TRrw;

  res = true;
  MatRowGet(TRp,rownr,TRrw);
  GetACShortAccount(TRrw.ACShort,tstr,obj);
  TRrw.AccNumber = tstr;
  TRrw.Objects = obj;
  MatRowPut(TRp,rownr,TRrw);
  if (wnst!=0) then begin//Rs_normal
    if (blank(TRrw.Comment)) then begin
      res = TRAutoTrans(TRp,rownr,false,false);
    end;
    MatRowGet(TRp,rownr,TRrw);   
    if (blank(TRrw.Objects)) then begin
      PasteAccObj(TRrw.AccNumber,obj);
      TRrw.Objects = obj;
    end;
    tstr = USetStr(1023);
    if ((TRrw.Comment==tstr) or (blank(TRrw.Comment))) then begin
      MatRowPut(TRp,rownr,TRrw);
      TRAccName(TRp,rownr,false,true);
      MatRowGet(TRp,rownr,TRrw);
    end;
    t2 = USetStr(1023);
    if (t2!=tstr) then begin
      res = false;
    end;
    MatRowPut(TRp,rownr,TRrw);  
  end;
  TRVc_PasteACShort = res;
  RETURN;
END;

global
updating function Boolean StoreTROnEnterKey(var record TRVc TRp)
BEGIN
  Boolean res;
  record TRVc dummyTRr;
  transaction Boolean gTROnEnterKey;
 
  gTROnEnterKey = true;
  SetRecordCheckVc("TRVc");
  if (TRVcRecordCheck(TRp,dummyTRr,1,1)==0) then begin
    if (RecordStore(TRp,false)) then begin 
      RecordNew(TRp);
      res = true;
    end;   
  end;
  gTROnEnterKey = false;
  StoreTROnEnterKey = res;
  RETURN;
END;

global
updating function Boolean UpdateTROnEnterKey(record TRVc oldTRp,var record TRVc TRp)
BEGIN
  Boolean res;
  record TRVc dummyTRr;
  transaction Boolean gTROnEnterKey;
 
  gTROnEnterKey = true;
  SetRecordCheckVc("TRVc");
  if (TRVcRecordCheck(TRp,oldTRp,1,1)==0) then begin
    if (RecordUpdate(oldTRp,TRp,true)==0) then begin 
      RecordNew(TRp);
      res = true;
    end;   
  end;
  gTROnEnterKey = false;
  UpdateTROnEnterKey = res;
  RETURN;
END;
