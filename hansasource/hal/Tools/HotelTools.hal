external procedure CUCreditLimit(record CUVc,Date,string,var val,var LongInt);
external function roundmode DefaultRoundMode();
external function val HoursDiff(Date,Time,Date,Time);
external function Boolean IsBankHolliday(Date,Boolean);
external function Integer IsRedDay(Boolean,record BHollVc,Integer,Date);
external procedure vTimeDiff(Time,Time,var val);
external function LongInt DateDiff(Date,Date);
external function Time TimeDiff(Time,Time);
external procedure PUCalcPerc(val,string,var val);

global
function string 20 FindJobCustomerCode(record JobVc Jobr)
begin
  row JobVc Jobrw;
  Integer i,rwcnt;
  string 20 res;
  
  res = Jobr.CUCode;
  if (blank(res)) then begin
    rwcnt = MatRowCnt(Jobr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Jobr,i,Jobrw);
      if (nonblank(Jobrw.CUCode)) then begin
        res = Jobrw.CUCode;
        goto LFindJobCustomerCode;
      end;
    end;
  end;
LFindJobCustomerCode:;
  FindJobCustomerCode = res;
  return;
end;

global
function string 60 FindJobCustomerName(record JobVc Jobr)
begin
  row JobVc Jobrw;
  Integer i,rwcnt;
  string 60 res;
  
  res = Jobr.CUName;
  if (blank(res)) then begin
    rwcnt = MatRowCnt(Jobr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Jobr,i,Jobrw);
      if (nonblank(Jobrw.CUCode)) then begin
        res = Jobrw.CUName;
        goto LFindJobCustomerName;
      end;
    end;
  end;
LFindJobCustomerName:;
  FindJobCustomerName = res;
  return;
end;

function Boolean FindResourceItemLocal(String RoomTypeCode,String Usage,LongInt NoOfGuests,var String InvItem,var String pricerules,Date thedat,var val t,var Boolean settoone,var string cclassd)
begin
  Record ResArtCodeVc RACr;
  Record ResArtCodeVc tmpRACr;
  Integer daytyp;
  Boolean res;
  record BHollVc BHollr;
  
  t = 1;
  cclassd = "";
  pricerules = "";
  res = false;
  settoone = false;
  RACr.ResType = RoomTypeCode;
  RACr.ResUsageCode = Usage;
  if (NoOfGuests>0) then begin
    RACr.NoOfGuests = NoOfGuests;
  end;
  RecordCopy(tmpRACr,RACr);
  if (nonblankdate(thedat)) then begin
    RACr.WeekPart = GetDateID(thedat)+2;
    res = ReadFirstMain(RACr,4,true);
    if (res) then begin
      InvItem = RACr.ArtCode;
      cclassd = RACr.CClassDCode;
      pricerules = RACr.PriceRules;
    end;
  end;
  if (res==false) then begin
    RecordCopy(RACr,tmpRACr);
    RACr.WeekPart = 0;
    if (nonblankdate(thedat)) then begin
      if (IsRedDay(false,BHollr,0,thedat)==1) then begin
        RACr.WeekPart = 1;
      end;
      if (IsBankHolliday(thedat,true)) then begin
        RACr.WeekPart = 2;
      end;
    end;
    res = ReadFirstMain(RACr,4,true);
    if (res) then begin
      InvItem = RACr.ArtCode;
      cclassd = RACr.CClassDCode;
      pricerules = RACr.PriceRules;
    end;
  end;
  if (res==false) then begin
    RecordCopy(RACr,tmpRACr);
    RACr.WeekPart = 0;
    res = ReadFirstMain(RACr,4,true);
    if (res) then begin
      InvItem = RACr.ArtCode;
      cclassd = RACr.CClassDCode;
      pricerules = RACr.PriceRules;
    end;
  end;
  if (res) then begin
    if (RACr.PriceForWholeRoom==1) then begin
      settoone = true;
    end;
  end;
  FindResourceItemLocal = res;
  return;
end;

global
function Boolean FindResourceItem(String RoomTypeCode,String Usage,LongInt NoOfGuests,var String InvItem,var string pricerules,Date thedat,var val t,var string cclassd)
begin
  Boolean foundf;
  Boolean settoone;
  
  foundf = FindResourceItemLocal(RoomTypeCode,Usage,NoOfGuests,InvItem,pricerules,thedat,t,settoone,cclassd);
  if (foundf==false) then begin
    if (NoOfGuests>0) then begin
      foundf = FindResourceItemLocal(RoomTypeCode,Usage,0,InvItem,pricerules,thedat,t,settoone,cclassd);
      if (foundf) then begin
        if (settoone) then begin
          t = 1;
        end else begin
          t = NoOfGuests;
        end;
      end;
    end;
  end;
  FindResourceItem = foundf;
  return; 
end;

global
function val GetCleverQty(val theqty,String RoomTypeCode,String Usage,LongInt NoOfGuests)
begin
  Record ResArtCodeVc RoomInvItem;
  val res;
  
  RoomInvItem.ResType = RoomTypeCode;
  RoomInvItem.ResUsageCode = Usage;
  RoomInvItem.NoOfGuests = 0;
  RoomInvItem.WeekPart = 0;
  if (ReadFirstMain(RoomInvItem,4,true)) then begin
    res = NoOfGuests;
  end else begin
    res = theqty;
  end;
  GetCleverQty = res;
  return;
end;

global
function Integer RoomDesc2Nr(String RoomDesc)
Begin
    RoomDesc2Nr = StringToInt(RoomDesc);
    If (RoomDesc=="SGL") then begin
       RoomDesc2Nr = 1;
    end;
    If (RoomDesc=="DBL") then begin
       RoomDesc2Nr = 2;
    end;
    If (RoomDesc=="TRP") then begin
       RoomDesc2Nr = 3;
    end;
   Return;
End;

global
procedure Nr2RoomDesc(var String RoomDesc,Integer Nro)
Begin
    RoomDesc = Nro;
    If (Nro ==1) then begin
       RoomDesc="SGL";
    end;
    If (Nro ==2) then begin
       RoomDesc="DBL";
    end;
    If (Nro ==3) then begin
       RoomDesc="TRP";
    end;
   Return;
End;

//  ***********************************
// DESC: Lookup Customer Credit Card
// ***********************************
global
procedure GetCustCredCard(String cliente,var String CC,var string ValidDate,var String SC,var string Tipo)
Begin
   Record CreditCardVc CCr;
   
   CCr.CUCode = cliente;
   if ReadFirstKey("CUCode",CCr,1,true) then
   begin
       CC        = CCr.CreditCardNr;
       ValidDate = CCr.ValidThru;
       SC        = CCr.SecurityCode;
       Tipo      = CCr.CredCardType;
   end;
   Return;
End;

global
procedure GetPList(var String Plist,LongInt ResNr,String cliente)
Begin
  Record CUVc CUr;
  Record JobVc Jobr;
  Row JobVc Jobrw;
  Integer i,rwcnt;
  
  Jobr.SerNr = ResNr;
  if (ReadFirstMain(Jobr,1,true)) then begin 
    if (Jobr.CUCode==cliente) then begin
      Plist = Jobr.PriceList;
    end else begin
      rwcnt = MatRowCnt(Jobr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Jobr,i,Jobrw);
        if (Jobrw.CUCode==cliente) then begin
          Plist = Jobrw.PriceList;
        end;   
      end;  
    end;
  end;
  if blank(Plist) then begin
    CUr.Code = cliente;
    if (ReadFirstMain(CUr,1,true)) then begin 
      Plist = CUr.PLCode;  // buscar en cliente  
    end;
  end;
  
  return;
end;


//  ***********************************
// DESC: Lookup Credit limit of Customer
// IN  : ClientIDCode
global
Function Val GetCustLimit(String i)
Begin
  Record CUVc Clnt;
  Val ret;
  LongInt limitdays;
  
  Clnt.Code = i;
  ret = 0;
   
  if (ReadFirstMain(Clnt,1,true)) then begin
    CUCreditLimit(Clnt,CurrentDate,"sales",ret,limitdays);
  end;
  
  GetCustLimit = ret;
  Return;
End;

//  ***********************************
// DESC: Is the category of this customer 
//       a traveling agency or a company customer
// IN  : ClientIDCode
global
Function Boolean IsSpecialAccount(String i)
Begin
  Record CUVc Clnt;
  Boolean ret;
  record HotelBlock Hotelb;

  Blockload(Hotelb);
  Clnt.Code = i;
  ret = false;         
  if ReadFirstMain(Clnt,1,true) then begin
    if nonblank(Clnt.CustCat) then begin
      if ((Hotelb.CustCat1 == Clnt.CustCat) or (Hotelb.CustCat2 == Clnt.CustCat)) then begin
        ret = true;
      end;
    end;
  end;
  
  IsSpecialAccount = ret;
  Return;
End;

global
procedure GetDefaultJobCust(LongInt Resnr,var String CustCode)
begin
  record JobVc Jobr;
  Jobr.SerNr = Resnr;
  if readfirstmain(Jobr,1,true) then begin
    CustCode = FindJobCustomerCode(Jobr);
  end;
  return;
end; 

//LO Changed: Not based on Customer code anymore but on prepayment number = res nr
global
Function Val GetDownGuest(Record JobVc Jobr)
Begin
  record ARPayVc ARPayr;
  val downpay;
  
  ARPayr.CUPNr = Jobr.SerNr;
  if readfirstmain(ARPayr,1,true) then begin
    downpay = ARPayr.BookRVal;
  end;
  GetDownGuest = downpay;
  Return;
End;

global
function LongInt GetQtyConv(string qtyconv)
BEGIN
  record QtyConvVc QtyConvr;
  LongInt res;
  

  res = 1;
  res = StringToInt(qtyconv);
  QtyConvr.Code = qtyconv;
  if (ReadFirstMain(QtyConvr,1,true)) then begin
    res = QtyConvr.Quantity;
  end;  
  GetQtyConv = res;
  RETURN;
END;

global
function LongInt GetQtyConvImport(string qtyconv)
BEGIN
  record QtyConvVc QtyConvr;
  LongInt res;
  
  res = StringToLongInt(qtyconv);
  QtyConvr.Code = qtyconv;
  if (ReadFirstMain(QtyConvr,1,true)) then begin
    res = QtyConvr.Quantity;
  end;  
  GetQtyConvImport = res;
  RETURN;
END;

global
function val NumberOfStayDays(Date SDate,Date EDate,Time STime,Time ETime,Integer invby)
begin
  record HotelBlock HBr;
  val Quantity,tmp;

  Blockload(HBr);
  if (invby==0) then begin  // hours
    Quantity = HoursDiff(SDate,STime,EDate,ETime);
  end;
// This logic is a bit dodgy...
  If (invby==1) then begin   // days
    Quantity = DateDiff(EDate,SDate);
    if (Quantity==0) then begin
      vTimeDiff(STime,HBr.StartNewDay,tmp);
      if (tmp>0) then begin
        vTimeDiff(HBr.StartNewDay,ETime,tmp);
        if (tmp>0) then begin
          Quantity = Quantity + 1;
        end;
      end;
    end;
    if (ETime>HBr.EndOfDay) then begin
      Quantity = Quantity + 1;
    end;
    if (SDate==EDate) then begin
      if ((STime>HBr.StartNewDay) and (ETime<HBr.EndOfDay)) then begin
        Quantity = Quantity + 1;
      end;
    end;
  end;
  NumberOfStayDays = Quantity;
  return;
end;

global
function LongInt FillFullJobPriceArray(Date theday,LongInt nrofdays,val quant,var array string ainvitems,var array string apricerules,var array string acuclass,var array LongInt adummyqtya,var array LongInt aqty,LongInt NoOfGuests,String JobType,String JobUsage,Boolean sumup)
begin
  record HotelBlock Hotelb;
  String 30 InvoiceItem,cclassd,PriceRules;
  LongInt i,rwcnt;
  LongInt j,arwcnt;
  Date dt;
  Boolean foundf,testf;
  val t;

  BlockLoad(Hotelb);
  dt = theday;
  arwcnt = 0;
  for (i=0;i<nrofdays;i=i+1) begin
    if (FindResourceItem(JobType,JobUsage,NoOfGuests,InvoiceItem,PriceRules,dt,t,cclassd)) then begin end;
    if (blank(cclassd)) then begin
      cclassd = Hotelb.DefCClassDCode;
    end;    
    foundf = false;
    
    if (sumup) then begin
      for (j=0;j<arwcnt;j=j+1) begin
        testf = true;
        if (ainvitems[j]!=InvoiceItem) then begin
          testf = false;
        end;
        if (nonblank(acuclass[j])) then begin
          if (acuclass[j]!=cclassd) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          adummyqtya[j] = adummyqtya[j] + quant;
          aqty[j] = aqty[j] + (quant * t);
          foundf = true;
          j = arwcnt;
        end;
      end;
    end;
    
    if (foundf==false) then begin
      ainvitems[arwcnt] = InvoiceItem;
      apricerules[arwcnt] = PriceRules;
      acuclass[arwcnt] = cclassd;
      adummyqtya[arwcnt] = quant;
      aqty[arwcnt] = (quant * t);
      arwcnt = arwcnt + 1;
    end;
    dt = AddDay(dt,1);
  end;
  FillFullJobPriceArray = arwcnt;
  return;
end;

/*
procedure GetFullJobPrice(Date theday,LongInt nrofdays,val quant,String qtyconv,String JobType,String JobUsage,
                          String PriceList,String CustCode,var val ResPrice,val agreedprice,var val Amount,
                          val qty,var record SMVc SMr,var Integer vatcnt,Integer InclVAT,var val vat)
begin
  record CUVc CUr;
  Record INVc INr;
  LongInt j,arwcnt;
  String 100 CustCat,PList,Reb,Spec;
  Val baseprice,Discperc;
  val price,cost,factor,tax2prc;
  Boolean calcprice;
  String 10 salesacc,vatcode,tstr,tax2code,taxtemplatecode;
  array string 40 items;
  array string 40 cclassds;
  array LongInt qtyl;
  array LongInt pqty;
  Boolean dummyf;
  Time blankt;
  
  PList    = PriceList;
  CUr.Code = CustCode;
  ResPrice = 0;
  Amount = 0;
  if (ReadFirstMain(CUr,1,true)) then begin
    CustCat = CUr.CustCat; 
    Reb = CUr.RebCode;
    if blank(PList) then begin
      PList = CUr.PLCode;
    end;
  end;
  arwcnt = FillFullJobPriceArray(theday,nrofdays,quant,items,cclassds,qtyl,pqty,qtyconv,JobType,JobUsage,true);
  for (j=0;j<arwcnt;j=j+1) begin
    price = 0;
    INr.Code = items[j];
    if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemPriceDiscount3(items[j],pqty[j],INr,CUr.CurncyCode,0,0,0,0,0,
              CUr.LangCode,CUr.CustCat,PList,CUr.RebCode,
              price,Spec,Discperc,vatcode,cost,salesacc,
              CUr.ExportFlag,calcprice,theday,blankt,"",true,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then begin
        price = price * ((100.00 - Discperc)/100.00);
        AddVATBase(SMr,vatcode,price * pqty[j] * qty,blankval,vatcnt,InclVAT,0);
      end;
    end;
    ResPrice = ResPrice + (price * pqty[j]);
    if (agreedprice<>0) then begin
      price = agreedprice;
    end;
    Amount = Amount + (price * pqty[j]);
  end;
  ResPrice = Round(ResPrice / nrofdays,DefaultRoundMode);
  return;
end;
*/

global
updating Procedure UpdateMiles(Record JobVc Jobr) 
Begin
  Record CUVc Profile;
  record HotelBlock Hotelb;
  integer rwcnt,i,hotelnr;
  Row JobVc Jobrw;
  val amount;  

  Blockload(Hotelb);  
  hotelnr = 1;
  amount  = 0;
  switch (hotelnr) begin
    case 0 : amount = DateDiff(Jobr.EndDate,Jobr.TransDate);
    case 1 : amount = DateDiff(Jobr.EndDate,Jobr.TransDate);
  end;
  rwcnt = MatRowCnt(Jobr);
  for (i=0;i<rwcnt;i=i+1) begin 
    MatRowGet(Jobr,i,Jobrw);    
    Profile.Code = Jobrw.GuestCode;
    if (ReadFirstKey("GuestActCode",Profile,1,true)) then begin
// KJELL
/*
       if (Profile.Miles==-1) then begin
         Profile.Miles = 0;
       end;
       Profile.Miles = Profile.Miles + amount;
       if RecordStore(Profile,true) then begin end;
*/
    end;  
  end;
  Return;
End;

procedure GetSumArtCode(String ItemCode,integer SumOption,var String NewItem,var string NewDesc)
begin
  record ITVc ITr;
  record INVc INr;
  record HotelBlock HotelBlockr;
  String 255 tstr;

  INr.Code = ItemCode;
  if ReadFirstMain(INr,1,true) then begin
    switch (SumOption) begin
      case 1: 
        ITr.Code = INr.Group;
        if ReadFirstMain(ITr,1,true) then begin
          NewItem = ITr.Code;
        end;
      case 2: 
        BlockLoad(HotelBlockr);
        NewItem = HotelBlockr.GenItemToInv;
      case 3: 
    end;
    tstr = INr.Name;
  end;
  
  ResetLoop(INr);
  INr.Code = NewItem;
  if ReadFirstMain(INr,1,true) then begin
    NewDesc = INr.Name;
  end else begin
    NewItem = ItemCode;
    NewDesc = tstr;
  end;
  return;
end;
