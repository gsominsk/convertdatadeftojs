external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure RowCalculateTaxMatrix_COVc(var record COVc,Integer,row COVc);
external function roundmode DefaultRoundMode();
remote procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external function val FindVAT(string,val,Integer,Integer);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
remote function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure RoundRowSum(string,string,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalcPrice(val,val,val,var val,Integer);

procedure COSumup_TaxTemplate(var record COVc COp)
begin
  Integer i,rwcnt;
  row COVc COrw;
  record TaxMatrixVc TMr;
  record TaxMatrixVc sumTMr;
  roundmode roundlines,rndtotal,rndvat;
  val t;

  COp.Sum1 = blankval; //Subtotal
  COp.Sum3 = blankval; //VAT
  COp.Sum4 = blankval; //Total
//  COp.TotGP = blankval;
  UnpackFieldMatrix(COp,"TaxMatrix",sumTMr);
  RecordClear(sumTMr);
  rwcnt = MatRowCnt(COp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(COp,i,COrw);
    switch (COrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;      
        if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(COrw,"TaxMatrix",TMr);
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,COp.InclVAT);
        end;
        COp.Sum1 = COp.Sum1 + COrw.Sum;
//        COp.TotGP = COp.TotGP + COrw.rowGP;
      case kInvoiceRowTypeCorrection:
        if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(COrw,"TaxMatrix",TMr);
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,COp.InclVAT);
        end;
        COp.Sum1 = COp.Sum1 + COrw.Sum;
//        COp.TotGP = COp.TotGP + COrw.rowGP;
      case kInvoiceRowTypeGiftVoucherSold:
        if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(COrw,"TaxMatrix",TMr);
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,COp.InclVAT);
        end;
        switch (COp.InclVAT) begin
          case kBasePriceNotInclVAT:
            COp.Sum1 = COp.Sum1 + COrw.Sum;
            if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
              COp.Sum1 = COp.Sum1 - CalculateTotalVATFromTaxMatrix(TMr,COp.InclVAT);
            end;
          case kBasePriceInclVAT:
            COp.Sum1 = COp.Sum1 + COrw.Sum;
        end;
      case kInvoiceRowTypeDownpayment:
        if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(COrw,"TaxMatrix",TMr);
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,COp.InclVAT);
        end;
        COp.Sum1 = COp.Sum1 + COrw.Sum;      
      
//  kInvoiceRowTypePrepayment = 6,
//  kInvoiceRowTypeLoan = 7,
//  kInvoiceRowTypeLoanInterest = 8,

//  kInvoiceRowTypeGiftVoucherPayment = 14,
//  kInvoiceRowTypeCashPayment = 15,
//  kInvoiceRowTypeCreditCardPayment = 16,

//  kInvoiceRowTypePreviousDownpayment = 20,
//  kInvoiceRowTypeChequePayment = 21,

//  kInvoiceRowTypePerceptionTax = 22, //how to handle Perception Taxes ?
//  kInvoiceRowTypeWithholdingTax = 24  //how to handle Withholding Taxes ?
    end;
  end;
  if (COp.FrPrice!=0) then begin
    if (COp.InclVAT==0) then begin
      COp.Sum1 = COp.FrPrice + COp.Sum1;
/*      
      if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
        t = FindVAT (COp.FrVATCode,COp.FrPrice,COp.InclVAT,COp.NoTAXonVAT);
        if (t==0) then begin
          s2 = COp.FrPrice + s2;
        end;  
        COp.Sum3 = t + COp.Sum3;
        AddVATBase(SMr,COp.FrVATCode,COp.FrPrice,tax1reb,vatcnt,COp.InclVAT,COp.NoTAXonVAT);
      end;
*/      
    end else begin
      if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
        COp.Sum4 = COp.FrPrice + COp.Sum4;
/*        
        t = FindVAT (COp.FrVATCode,COp.FrPrice,COp.InclVAT,COp.NoTAXonVAT);
        COp.Sum3 = t + COp.Sum3;
        AddVATBase(SMr,COp.FrVATCode,COp.FrPrice,tax1reb,vatcnt,COp.InclVAT,COp.NoTAXonVAT);
*/        
        if (t==0) then begin
          COp.Sum2 = COp.FrPrice + COp.Sum2;
        end else begin
          COp.Sum1 = COp.FrPrice + COp.Sum1;
        end;  
      end else begin
        COp.Sum4 = COp.FrPrice + COp.Sum4;     
/*         
        t = FindVAT (COp.FrVATCode,COp.FrPrice,COp.InclVAT,COp.NoTAXonVAT);
        COp.Sum3 = t + COp.Sum3;
        AddVATBase(SMr,COp.FrVATCode,COp.FrPrice,tax1reb,vatcnt,COp.InclVAT,COp.NoTAXonVAT);
        COp.Sum4 = COp.Sum4 - t;
        if (t==0) then begin
          COp.Sum2 = COp.FrPrice + COp.Sum2;
        end else begin
          COp.Sum1 = COp.FrPrice + COp.Sum1;
        end;  
*/        
      end;
    end;
//Freight VAT needs  to be added as well
  end;

  if ((COp.ExportFlag==0) or (COp.ExportFlag==3) or (COp.ExportFlag==4)) then begin
    COp.Sum3 = CalculateTotalVATFromTaxMatrix(sumTMr,COp.InclVAT);
  end;
  PackFieldMatrix(COp,"TaxMatrix",sumTMr);
  GetCurncyRoundoff(COp.CurncyCode,COp.PayDeal,"COVc",rndtotal,roundlines,rndvat);

/*Rounding should be tested carefully*/

  COp.Sum3 = Round(COp.Sum3,rndvat);
  COp.Sum1 = Round(COp.Sum1,rndtotal);
  switch (COp.InclVAT) begin
    case kBasePriceNotInclVAT:
      COp.Sum4 = COp.Sum1 + COp.Sum3;
    case kBasePriceInclVATandTAX:
      COp.Sum4 = COp.Sum1;
    case kBasePriceInclVAT:
      COp.Sum4 = COp.Sum1;
  end;  
  COp.Sum3 = Round(COp.Sum3,rndvat);
  COp.Sum4 = Round(COp.Sum4,rndtotal);
//  COp.BaseSum4 = MulRateToBase1(COp.CurncyCode,COp.Sum4,COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,DefaultCurRoundOff);
//  COp.TotGP = Round(COp.TotGP,rndtotal);
  return;
end;

global
procedure COSumup(var record COVc COr)
BEGIN
  record RoundBlock RoundRec;
  row COVc COrw;
  Integer i,rwcnt;
  roundmode roundlines,rndtotal,rndvat;
  val t;
  val s0,s1,s2,s3,s4;

  if (UseTaxTemplatesforTaxCalc) then begin
    COSumup_TaxTemplate(COr);
    goto LCOSumup;
  end;
  s0 = blankval;
  s1 = blankval;
  s2 = blankval;
  s3 = blankval;
  s4 = blankval;
  COr.TotQuant = blankval;
  BlockLoad(RoundRec);
  rwcnt = MatRowCnt(COr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(COr,i,COrw);
    COr.TotQuant = COr.TotQuant + COrw.Quant;
    if ((COrw.stp==5)) then begin    
      if (COr.InclVAT==0) then begin // 0-rndoff 1-sumexvat 2-sumnondtbl 3-vat 4-sumtopay 
        s1 = COrw.Sum + s1;
        if ((COr.ExportFlag==0) or (COr.ExportFlag==3) or (COr.ExportFlag==4)) then begin
          t = FindVAT(COrw.VATCode,COrw.Sum,COr.InclVAT,COr.NoTAXonVAT);
          if (t==0) then begin
            s2 = COrw.Sum + s2;
          end;    
          s3 = t + s3;
        end;
      end else begin// 0-rndoff 1-sumvatdble(incl) 2-sumnondtbl 3-vat 4-sumtopay 
        if ((COr.ExportFlag==0) or (COr.ExportFlag==3) or (COr.ExportFlag==4)) then begin
          s4 = COrw.Sum + s4;
          t = FindVAT(COrw.VATCode,COrw.Sum,COr.InclVAT,COr.NoTAXonVAT);
          s3 = t + s3;
          if (t==0) then begin
            s2 = COrw.Sum + s2;
          end else begin
            s1 = COrw.Sum + s1;
          end;  
        end else begin
          s4 = COrw.Sum + s4;
          t = FindVAT(COrw.VATCode,COrw.Sum,COr.InclVAT,COr.NoTAXonVAT);
          s3 = t + s3;
          s4 = s4 - t;
          if (t==0) then begin
            s2 = COrw.Sum + s2;
          end else begin
            s1 = COrw.Sum + s1;
          end;  
        end;
      end;
    end;
    if ((COrw.stp==1) or (COrw.stp==4)) then begin
      if (COr.InclVAT==0) then begin// 0-rndoff 1-sumexvat 2-sumnondtbl 3-vat 4-sumtopay 
        s1 = COrw.Sum + s1;
        if ((COr.ExportFlag==0) or (COr.ExportFlag==3) or (COr.ExportFlag==4)) then begin
          t = FindVAT(COrw.VATCode,COrw.Sum,COr.InclVAT,COr.NoTAXonVAT);
          if (t==0) then begin
            s2 = COrw.Sum + s2;
          end;  
          s3 = t + s3;
        end;
      end else begin      
        if ((COr.ExportFlag==0) or (COr.ExportFlag==3) or (COr.ExportFlag==4)) then begin
          s4 = COrw.Sum + s4;
          t = FindVAT(COrw.VATCode,COrw.Sum,COr.InclVAT,COr.NoTAXonVAT);
          s3 = t + s3;
          if (t==0) then begin
            s2 = COrw.Sum + s2;
          end else begin
            s1 = COrw.Sum + s1;
          end;  
        end else begin
          s4 = COrw.Sum + s4;
          t = FindVAT(COrw.VATCode,COrw.Sum,COr.InclVAT,COr.NoTAXonVAT);
          s3 = t + s3;
          s4 = s4 - t;
          if (t==0) then begin
            s2 = COrw.Sum + s2;
          end else begin
            s1 = COrw.Sum + s1;
          end;  
        end;        
      end;      
    end;
  end;
  if (COr.InclVAT==0) then  begin
    s1 = COr.FrPrice + s1;
      if ((COr.ExportFlag==0) or (COr.ExportFlag==3) or (COr.ExportFlag==4)) then begin
      t = FindVAT(COr.FrVATCode,COr.FrPrice,COr.InclVAT,COr.NoTAXonVAT);
      if (t==0) then begin
        s2 = COr.FrPrice + s2;
      end;  
      s3 = t + s3;
    end;
  end else begin
    if ((COr.ExportFlag==0) or (COr.ExportFlag==3) or (COr.ExportFlag==4)) then begin
      s4 = COr.FrPrice + s4;
      t = FindVAT(COr.FrVATCode,COr.FrPrice,COr.InclVAT,COr.NoTAXonVAT);
      s3 = t + s3;
      if (t==0) then begin
        s2 = COr.FrPrice + s2;
      end else begin
        s1 = COr.FrPrice + s1;
      end;  
    end else begin
      s4 = COr.FrPrice + s4;
      t = FindVAT(COr.FrVATCode,COr.FrPrice,COr.InclVAT,COr.NoTAXonVAT);
      s3 = t + s3;
      s4 = s4 - t;
      if (t==0) then begin
        s2 = COr.FrPrice + s2;
      end else begin
        s1 = COr.FrPrice + s1;
      end;  
    end;
  end;
    
  GetCurncyRoundoff(COr.CurncyCode,COr.PayDeal,"COVc",rndtotal,roundlines,rndvat);
  s3 = Round(s3,rndvat);
  if (COr.InclVAT>0) then begin
    t = s4;
    s4 = Round(t,rndtotal);
    t = s4 - t;
    s0 = t + s0;
  end else begin
    s4 = s1 + s3;
    t = s4;
    s4 = Round(t,rndtotal);
    t = s4 - t;
    s0 = t + s0;
  end;
  s0 = Round(s0,DefaultRoundMode);
  s1 = Round(s1,DefaultRoundMode);
  s2 = Round(s2,DefaultRoundMode); 
  COr.Sum0 = s0;
  COr.Sum1 = s1;
  COr.Sum2 = s2;
  COr.Sum3 = s3;
  COr.Sum4 = s4;
LCOSumup:;  
  RETURN;
END;      

global
procedure CODchrsum(var record COVc COp,Integer rownr)
BEGIN
  record GeneralOptionBlock GOb;
  row COVc COrw;
  val t,s,rowsum,p;
  record TaxMatrixVc TMr;
  
  BlockLoad(GOb);  
  MatRowGet(COp,rownr,COrw);
  if (GOb.UseDiscount==3) then begin
    p = COrw.Price; 
    CalcPrice(COrw.BasePrice,COrw.PriceFactor,COrw.vRebate,p,GOb.UseDiscount);
    COrw.Price = p;  
  end;
  CalcSum(COrw.Quant,COrw.Price,COrw.PriceFactor,COrw.vRebate,s,GOb.UseDiscount);
  RoundRowSum(COp.CurncyCode,COp.PayDeal,"COVc",s);
  COrw.Sum = s;
  if (nonblank(COrw.ArtCode)) then begin
    t = COrw.Quant * COrw.BasePrice;
    s = MulRateToBase1(COp.CurncyCode,COrw.Sum,COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,DefaultCurRoundOff); /*## sales */
    FindSalesExVat(TMr,COrw.VATCode,s,COp.InclVAT,COp.NoTAXonVAT,rowsum);
    COrw.rowGP = rowsum - t;
    RowCalculateTaxMatrix_COVc(COp,rownr,COrw);
  end else begin
    t = blankval;
    COrw.rowGP = t;
    COrw.BasePrice = t;
  end;
  MatRowPut(COp,rownr,COrw);
  COSumup(COp);
  RETURN;
END;