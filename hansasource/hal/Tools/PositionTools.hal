external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

procedure GetItemSumSizeAtPosition(string poscode,string loccode,var val pwidth,var val pheight,var val pdepth)
BEGIN
  record PISVc PISr;
  record INVc INr;
  Boolean TrHs;
  val m;
  
  pwidth = 0;
  pheight = 0;
  pdepth = 0;
  PISr.Location = loccode;
  PISr.Position = poscode;
  TrHs = true;
  while (LoopKey("Position",PISr,2,TrHs)) begin
    if (PISr.Location!=loccode) then begin
      TrHs = false;
    end;
    if (PISr.Position!=poscode) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (ReadFirstItem(PISr.ArtCode,INr,true,true)) then begin
        m = 0;
        if (INr.QtyonPallet>0) then begin
          m = PISr.LeftQty/INr.QtyonPallet;//poscheckit
        end;
        if (INr.PalletWidth!=0) then begin
          pwidth = pwidth + INr.PalletWidth*m;
        end;
        if (INr.PalletHeight!=0) then begin
          pheight = pheight + INr.PalletHeight*m;
        end;
        if (INr.PalletDepth!=0) then begin
          pdepth = pdepth + INr.PalletDepth*m;
        end;
      end;
    end;
  end;  
  
  RETURN;
END;

global
function Integer CheckPosition(string poscode,string loccode,Integer DemandPosition,val width,val height,val depth)
BEGIN
  record PosVc Posr;
  Integer res;
  val pwidth,pheight,pdepth;
  
  res = 0;
  if (nonblank(poscode) or (DemandPosition!=0)) then begin
    if (nonblank(loccode)) then begin
      Posr.Code = poscode;
      Posr.Location = loccode;
      if (ReadFirstKey("Location",Posr,2,true)==false) then begin
        res = 1120;
        goto LCheckPosition;
      end;  
    end else begin
      Posr.Code = poscode;
      if (ReadFirstKey("MainKey",Posr,1,true)==false) then begin
        res = 1120;
        goto LCheckPosition;
      end;  
    end;
/*occupied is not important, height is important        
    if (Posr.Status==1) then begin 
      res = 1729;
      goto LCheckPosition;
    end;
*/    
    if ((nonblank(Posr.Width)) and (width>=0)) then begin
      if (width>Posr.Width) then begin
        res = 1730;
        goto LCheckPosition;
      end;
    end;
    if ((nonblank(Posr.Height)) and (height>=0)) then begin
      if (height>Posr.Height) then begin
        res = 1731;
        goto LCheckPosition;
      end;
    end;
    if ((nonblank(Posr.Depth)) and (depth>=0)) then begin
      if (depth>Posr.Depth) then begin
        res = 1732;
        goto LCheckPosition;
      end;
    end;
    GetItemSumSizeAtPosition(poscode,loccode,pwidth,pheight,pdepth);
    pwidth = pwidth + width;
    pheight = pheight + height;
    pdepth = pdepth + depth;
    if ((nonblank(Posr.Width)) and (pwidth>=0)) then begin
      if (pwidth>Posr.Width) then begin
        res = 1730;
        goto LCheckPosition;
      end;
    end;
    if ((nonblank(Posr.Height)) and (pheight>=0)) then begin
      if (pheight>Posr.Height) then begin
        res = 1731;
        goto LCheckPosition;
      end;
    end;
    if ((nonblank(Posr.Depth)) and (pdepth>=0)) then begin
      if (pdepth>Posr.Depth) then begin
        res = 1732;
        goto LCheckPosition;
      end;
    end;
  end;
LCheckPosition:;  
  CheckPosition = res;
  RETURN;
END;

global
function string 20 FindFreePositionInLocArea(record INVc INr,string locarea,record LocationVc Locr,string skippos,string oldtoposcode)
BEGIN
  string 20 res;
  Boolean TrHs,testf,oldposf;
  record PosVc Posr;
  record PosVc oldPosr;
  record MainWHMBlock MainWHM;
  
  if (nonblank(oldtoposcode)) then begin
    oldPosr.Code = oldtoposcode;
    if (ReadFirstMain(oldPosr,1,true)) then begin oldposf = true; end;
  end;
  TrHs = true;
  Posr.Location = locarea;
  Posr.LocArea = locarea;
//  Posr.PickOrder = 999999;
  while (LoopKey("LocArea",Posr,2,TrHs)) begin
    testf = true;
    if (Posr.LocArea!=locarea) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Status!=0) then begin testf = false; end;
      if (Posr.Closed!=0) then begin testf = false; end;    
      if (Posr.Code==skippos) then begin testf = false; end;
      if (oldposf) then begin
        if (Posr.Height<oldPosr.Height) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea;
      end;
    end;
  end;
  TrHs = true;
  ResetLoop(Posr);
  Posr.Status = 0;
  while (LoopKey("Status",Posr,1,TrHs)) begin
    if (Posr.Status!=0) then begin TrHs = false; end;
    testf = true;
    if (Posr.Closed!=0) then begin testf = false; end;    
    if (TrHs and testf) then begin
      testf = true;
      if (Posr.Code==skippos) then begin testf = false; end;
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (nonblank(Posr.LocArea)) then begin
        if (locarea!=Locr.WHMDeliveryArea) then begin 
          if (Posr.LocArea==Locr.WHMDeliveryArea) then begin testf = false; end;
        end;
      end;
      if (oldposf) then begin
        if (Posr.Height<oldPosr.Height) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea;
      end;
    end;
  end;
LFindFreePositionInLocArea:;  
  if (blank(res)) then begin
    BlockLoad(MainWHM);
    if (locarea==MainWHM.DeliveryArea) then begin 
      res = MainWHM.DeliveryPosCode;
    end;
  end;
  FindFreePositionInLocArea = res;
  RETURN;
END;

global
function string 20 FindFreePositionInLocArea_ExcPosFromArray(string location,string locarea,val defposheight,record INVc INr,Array string askippos,Integer acnt)
BEGIN
  string 20 res;
  Boolean TrHs,testf;
  record PosVc Posr;
  Integer i; 
  record LocationVc Locr;

  TrHs = true;
  POSr.Location = location;
  Posr.LocArea = locarea;
  Posr.Status = 0;
//  Posr.PickOrder = 999999;
  while (LoopKey("LocAreaStatus",Posr,4,TrHs)) begin
    if (Posr.Location!=location) then begin TrHs = false; end;
    if (Posr.LocArea!=locarea) then begin TrHs = false; end;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
      if (Posr.Closed!=0) then begin testf = false; end;    
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
// Rimpac customization
      if (testf) then begin
        if (defposheight>0) then begin
          testf = false;
          if (Posr.Height<=defposheight) then begin
            if (Posr.Height>INr.PalletHeight) then begin testf = true; end;    
          end;
        end;
      end;
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArray;
      end;
    end;
  end;
  TrHs = true;
  ResetLoop(Posr);
  Posr.Status = 0;
  while (LoopKey("Status",Posr,1,TrHs)) begin
    testf = true;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Posr.Location!=location) then begin testf = false; end;
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
      if (nonblank(Posr.LocArea)) then begin
        if (Posr.LocArea==Locr.WHMDeliveryArea) then begin testf = false; end;
      end;
      if (Posr.Closed!=0) then begin testf = false; end;        
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
// Rimpac customization
      if (testf) then begin
        if (defposheight>0) then begin
          testf = false;
          if (Posr.Height<=defposheight) then begin
            if (Posr.Height>INr.PalletHeight) then begin testf = true; end;    
          end;
        end;
      end;
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArray;
      end;
    end;
  end;
    
  TrHs = true;
  ResetLoop(Posr);
  Posr.Location = location;
  Posr.LocArea = locarea;
  Posr.Status = 0;
//  Posr.PickOrder = 999999;
  while (LoopKey("LocAreaStatus",Posr,4,TrHs)) begin
    if (Posr.Location!=location) then begin TrHs = false; end;
    if (Posr.LocArea!=locarea) then begin TrHs = false; end;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
      if (Posr.Closed!=0) then begin testf = false; end;        
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
//Rimpac Customization
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArray;
      end;
    end;
  end;
  TrHs = true;
  ResetLoop(Posr);
  Posr.Status = 0;
  while (LoopKey("Status",Posr,1,TrHs)) begin
    testf = true;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Posr.Location!=location) then begin testf = false; end;
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
      if (nonblank(Posr.LocArea)) then begin
        if (Posr.LocArea==Locr.WHMDeliveryArea) then begin testf = false; end;
      end;
      if (Posr.Closed!=0) then begin testf = false; end;        
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
//rimpac Customization
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArray;
      end;
    end;
  end;
LFindFreePositionInLocArea_ExcPosFromArray:;  
  FindFreePositionInLocArea_ExcPosFromArray = res;
  RETURN;
END;

global
function string 20 FindFreePositionInLocArea_ExcPosFromArrayBackLoop(string location,string locarea,val defposheight,record INVc INr,Array string askippos,Integer acnt)
BEGIN
  string 20 res;
  Boolean TrHs,testf;
  record PosVc Posr;
  Integer i; 
  record LocationVc Locr;

  TrHs = true;
  Posr.Location = location;
  Posr.LocArea = locarea;
  Posr.Status = 0;
//  Posr.PickOrder = 999999;
  while (LoopBackKey("LocAreaStatus",Posr,4,TrHs)) begin
    if (Posr.Location!=location) then begin TrHs = false; end;
    if (Posr.LocArea!=locarea) then begin TrHs = false; end;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
      if (Posr.Closed!=0) then begin testf = false; end;    
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
//rimpac Customization
      if (testf) then begin
        if (defposheight>0) then begin
          testf = false;
          if (Posr.Height<=defposheight) then begin
            if (Posr.Height>INr.PalletHeight) then begin testf = true; end;    
          end;
        end;
      end;
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArrayBackLoop;
      end;
    end;
  end;
  
  TrHs = true;
  ResetLoop(Posr);
  Posr.Status = 0;
  while (LoopBackKey("Status",Posr,1,TrHs)) begin
    testf = true;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Posr.Location!=location) then begin testf = false; end;
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
      if (nonblank(Posr.LocArea)) then begin
        if (Posr.LocArea==Locr.WHMDeliveryArea) then begin testf = false; end;
      end;
      if (Posr.Closed!=0) then begin testf = false; end;        
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
//rimpac Customization
      if (testf) then begin
        if (defposheight>0) then begin
          testf = false;
          if (Posr.Height<=defposheight) then begin
            if (Posr.Height>INr.PalletHeight) then begin testf = true; end;    
          end;
        end;
      end;
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArrayBackLoop;
      end;
    end;
  end;

  TrHs = true;
  ResetLoop(Posr);
  Posr.Location = location;
  Posr.LocArea = locarea;
  Posr.Status = 0;
//  Posr.PickOrder = 999999;
  while (LoopBackKey("LocAreaStatus",Posr,4,TrHs)) begin
    if (Posr.Location!=location) then begin TrHs = false; end;
    if (Posr.LocArea!=locarea) then begin TrHs = false; end;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Posr.Closed!=0) then begin testf = false; end;    
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
//rimpac Customization
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArrayBackLoop;
      end;
    end;
  end;

  TrHs = true;
  ResetLoop(Posr);
  Posr.Status = 0;
  while (LoopBackKey("Status",Posr,1,TrHs)) begin
    testf = true;
    if (Posr.Status!=0) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Posr.Location!=location) then begin testf = false; end;
      if (Posr.Closed!=0) then begin testf = false; end;        
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (Posr.Code==Locr.WHMDefProdPosCode) then begin testf = false; end;    
      if (Posr.Code==Locr.WHMDefPUPosCode) then begin testf = false; end;    
      if (nonblank(Posr.LocArea)) then begin
        if (Posr.LocArea==Locr.WHMDeliveryArea) then begin testf = false; end;
      end;
//      if (Right(Posr.Code,1)=="1") then begin testf = false; end;    
//rimpac Customization
      if (testf) then begin
        for (i=0;i<acnt;i=i+1) begin
          if (Posr.Code==askippos[i]) then begin 
            testf = false; 
            i = acnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInLocArea_ExcPosFromArrayBackLoop;
      end;
    end;
  end;
LFindFreePositionInLocArea_ExcPosFromArrayBackLoop:;  
  FindFreePositionInLocArea_ExcPosFromArrayBackLoop = res;
  RETURN;
END;

global
function string 20 FindFreePositionInLocArea_ExcludePositionFromArray(string location,string locarea,val defposheight,record INVc INr,Integer HighestPosCodeFirst,Array string askippos,Integer acnt)
BEGIN
  string 20 res;
  
  if (HighestPosCodeFirst==0) then begin
    res = FindFreePositionInLocArea_ExcPosFromArray(location,locarea,defposheight,INr,askippos,acnt);
  end else begin
    res = FindFreePositionInLocArea_ExcPosFromArrayBackLoop(location,locarea,defposheight,INr,askippos,acnt);
  end;
  FindFreePositionInLocArea_ExcludePositionFromArray = res;
  RETURN;
END;

function Boolean NothingLeftAtPosition(string position,string location)
begin
  record PISVc PISr;
  Boolean res,TrHs;  
        
  res = true;
  PISr.Location = location;
  PISr.Position = position;

  TrHs = true;
  while (LoopKey("Position",PISr,2,TrHs)) begin
    if (PISr.Position!=position) then begin TrHs = false; end;
    if (PISr.Location!=location) then begin TrHs = false; end;
    if (TrHs) then begin
      if (PISr.LeftQty>0) then begin
        res = false; 
        TrHs = false; 
      end;
    end;
  end;
  NothingLeftAtPosition = res;
  return;
end;

global
updating procedure SetPositionStatus(string position,Integer status)
BEGIN
  record PosVc Posr;
  record PosVc oldPosr;
  record LocationVc Locr;
  record PosVc emptypalletstockPosr;
  Boolean testf;
  
  if (nonblank(position)) then begin
    Posr.Code = position;
    if (ReadFirstMain(Posr,1,true)) then begin
      Locr.Code = Posr.Location;
      ReadFirstMain(Locr,1,true);
      testf = true;
      if (nonblank(Locr.WHMPalletArea)) then begin
        emptypalletstockPosr.Location = Locr.Code;
        emptypalletstockPosr.LocArea = Locr.WHMPalletArea;
        if (ReadFirstKey("LocArea",emptypalletstockPosr,2,true)) then begin 
          if (emptypalletstockPosr.Code==Posr.Code) then begin testf = false; end;
        end;
        if (Locr.WHMPalletArea==Posr.Code) then begin testf = false; end;
      end;
      if (nonblank(Locr.WHMWraperPosCode)) then begin
        if (Locr.WHMWraperPosCode==Posr.Code) then begin testf = false; end;
      end;
      if (nonblank(Locr.WHMDeliveryPosCode)) then begin
        if (Locr.WHMDeliveryPosCode==Posr.Code) then begin testf = false; end;
      end;
      if (nonblank(Locr.WHMDefPUPosCode)) then begin
        if (Locr.WHMDefPUPosCode==Posr.Code) then begin 
          if (status>1) then begin
            testf = false; 
          end;
        end;
      end;
      if (nonblank(Locr.WHMDefProdPosCode)) then begin
        if (Locr.WHMDefProdPosCode==Posr.Code) then begin testf = false; end;
      end;
      if (status==3) then begin
//        if (Posr.Code=="51") then begin testf = false; end;//specific for Rimpac customization
//rimpac Customization
      end;
      if (testf) then begin
        if (status==0) then begin
          testf = NothingLeftAtPosition(position,Locr.Code);
        end;
        if (testf) then begin
          RecordCopy(oldPosr,Posr);
          Posr.Status = status;
          if (RecordUpdate(oldPosr,Posr,false)==0) then begin end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure AssignDestPositionOnStockMov(string stockmov)
BEGIN
  record StockMovVc oldStockMovr;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  record INVc INr;
  Integer i,rwcnt;
  string 20 toposcode;
  record LocationVc Locr;
  
  StockMovr.SerNr = StringToLongInt(stockmov);
  if (ReadFirstMain(StockMovr,1,true)) then begin
    if (StockMovr.OKFlag==0) then begin
      Locr.Code = StockMovr.ToLocation;
      ReadFirstMain(Locr,1,true);
      RecordCopy(oldStockMovr,StockMovr);
      rwcnt = MatRowCnt(StockMovr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(StockMovr,i,StockMovrw);
        if (ReadFirstItem(StockMovrw.ArtCode,INr,true,true)) then begin end;
        if (blank(toposcode)) then begin
          toposcode = FindFreePositionInLocArea(INr,INr.LocArea,Locr,StockMovrw.FrPosCode,"");      
          SetPositionStatus(toposcode,2);
        end;
        StockMovrw.ToPosCode = toposcode;
        MatRowPut(StockMovr,i,StockMovrw);      
      end;
      if (RecordUpdate(oldStockMovr,StockMovr,false)==0) then begin end;
    end;    
  end;
  RETURN
END;

global
function string 20 FindFreePositionInDeliveryArea(record INVc INr,string location,string skippos,Array string adelpos,Integer adelposcnt)
BEGIN
  string 20 res;
  Boolean TrHs,testf;
  record PosVc Posr;
  record LocationVc Locr;
  Integer i;
  
  Locr.Code = location;
  ReadFirstMain(Locr,1,true);
  if (Locr.RequirePos==0) then begin  
    goto LFindFreePositionInDeliveryArea;
  end;
  if (blank(Locr.WHMDeliveryArea)) then begin
    res = skippos;
    goto LFindFreePositionInDeliveryArea;
  end;
  TrHs = true;
  Posr.Location = Locr.Code;
  Posr.LocArea = Locr.WHMDeliveryArea;
//  Posr.PickOrder = 999999;
  while (LoopKey("LocArea",Posr,2,TrHs)) begin
    testf = true;
    if (Posr.Location!=Locr.Code) then begin TrHs = false; end;
    if (Posr.LocArea!=Locr.WHMDeliveryArea) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (Posr.Status!=0) then begin testf = false; end;
      if (Posr.Closed!=0) then begin testf = false; end;    
      if (Posr.Code==skippos) then begin testf = false; end;
      if (testf) then begin
        for (i=0;i<adelposcnt;i=i+1) begin
          if (Posr.Code==adelpos[i]) then begin 
            testf = false; 
            i = adelposcnt;
          end;
        end;
      end;
      if (testf) then begin
        testf = (CheckPosition(Posr.Code,"",1,INr.PalletWidth,INr.PalletHeight,INr.PalletDepth)==0);
      end;
      if (testf) then begin
        res = Posr.Code;
        goto LFindFreePositionInDeliveryArea;
      end;
    end;
  end;
LFindFreePositionInDeliveryArea:;  
  FindFreePositionInDeliveryArea = res;
  RETURN;
END;

function string 20 FindPositionWithItem_WithQty(string artcode,string warehouse,string areacode,string itempickarea,val qty,string DeliveryArea,string skipposcode)
BEGIN
  string 20 res;
  record PISVc PISr;
  record POSVc POSr;
  Boolean TrHs,testf;
  Integer keys;
  string 20 ckey;
  record LocationVc Locr;
  
  PISr.ArtCode = artcode;
  PISr.Location = warehouse;
  PISr.LeftQty = qty;
//  PISr.PickOrder = 999999;
  ckey = "LeftItem";
  keys = 4;
  if (nonblank(areacode)) then begin
    PISr.LocArea = areacode;
    ckey = "LeftItemLoc";
    keys = 5;
  end;
  TrHs = true;
  while (LoopKey(ckey,PISr,keys,TrHs)) begin
    if (PISr.ArtCode!=artcode) then begin TrHs = false; end;
    if (PISr.Location!=warehouse) then begin TrHs = false; end;
    if (PISr.LeftQty!=qty) then begin TrHs = false; end;
    if (nonblank(areacode)) then begin
      if (PISr.LocArea!=areacode) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      Locr.Code = PISr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;
      if (nonblank(skipposcode)) then begin
        if (PISr.Position==skipposcode) then begin testf = false; end;
      end;
      if (PISr.Position==Locr.WHMDefPUPosCode) then begin testf = false; end; 
      if (PISr.Position==Locr.WHMDefProdPosCode) then begin testf = false; end; 
      if (PISr.Position==Locr.WHMWraperPosCode) then begin testf = false; end; 
      if (testf) then begin
        POSr.Code = PISr.Position;
        if (ReadFirstMain(POSr,1,true)==false) then begin testf = false; end; 
        if (POSr.Status!=1) then begin testf = false; end; 
        if (blank(areacode)) then begin
          if (POSr.LocArea==itempickarea) then begin testf = false; end; 
        end;
        if (nonblank(POSr.LocArea)) then begin
          if (POSr.LocArea==DeliveryArea) then begin testf = false; end; 
        end;        
      end;
      if (testf) then begin
        res = PISr.Position;
        goto LFindPositionWithItem_WithQty;
      end;
    end;
  end;
LFindPositionWithItem_WithQty:;
  FindPositionWithItem_WithQty = res;
  RETURN;
END;

function string 20 FindPositionWithItem_NotFullPallets(string artcode,string warehouse,string itempickarea,val qty,string DeliveryArea,string skipposcode)
BEGIN
  string 20 res;
  record PISVc PISr;
  record POSVc POSr;
  Boolean TrHs,testf;
  Integer keys;
  record LocationVc Locr;

  POSr.Location = warehouse;
  POSr.LocArea = itempickarea;
  POSr.Status = 1;
//  Posr.PickOrder = 999999;
  TrHs = true;
  while (LoopKey("LocAreaStatus",POSr,4,TrHs)) begin
    if (POSr.Location!=warehouse) then begin TrHs = false; end;
    if (POSr.LocArea!=itempickarea) then begin TrHs = false; end;
    if (POSr.Status!=1) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;      

      Locr.Code = PISr.Location;
      ReadFirstMain(Locr,1,true);
      if (Locr.RequirePos==0) then begin testf = false; end;

      PISr.ArtCode = artcode;
      PISr.Position = POSr.Code;
      PISr.Location = warehouse;
      if (ReadFirstMain(PISr,3,true)==false) then begin testf = false; end;
      if (nonblank(skipposcode)) then begin
        if (POSr.Code==skipposcode) then begin testf = false; end;
      end;
      if (PISr.Position==Locr.WHMDefPUPosCode) then begin testf = false; end; 
      if (PISr.Position==Locr.WHMDefProdPosCode) then begin testf = false; end; 
      if (PISr.Position==Locr.WHMWraperPosCode) then begin testf = false; end;       
      if (PISr.LeftQty<=0) then begin testf = false; end;
      if (qty>PISr.LeftQty) then begin testf = false; end;
      if (nonblank(POSr.LocArea)) then begin
        if (POSr.LocArea==DeliveryArea) then begin testf = false; end; 
      end;
      if (testf) then begin        
        res = PISr.Position;
        goto LFindPositionWithItem_NotFullPallets;
      end;
    end;
  end;
  
  ResetLoop(PISr);
  PISr.ArtCode = artcode;
  PISr.Location = warehouse;
//  PISr.PickOrder = 999999;
  TrHs = true;
  while (LoopKey("InstockItemLoc",PISr,3,TrHs)) begin
    if (PISr.ArtCode!=artcode) then begin TrHs = false; end;
    if (PISr.Location!=warehouse) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (PISr.LeftQty<=0) then begin testf = false; end; 
      if (qty>PISr.LeftQty) then begin testf = false; end; 
      if (nonblank(skipposcode)) then begin
        if (PISr.Position==skipposcode) then begin testf = false; end;
      end;
      if (testf) then begin
        POSr.Code = PISr.Position;
        if (ReadFirstMain(POSr,1,true)==false) then begin testf = false; end; 
        if (POSr.Status!=1) then begin testf = false; end; 
        if (nonblank(POSr.LocArea)) then begin
          if (POSr.LocArea==DeliveryArea) then begin testf = false; end; 
        end;
      end;
      if (testf) then begin
        res = PISr.Position;
        goto LFindPositionWithItem_NotFullPallets;
      end;
    end;
  end;
  
LFindPositionWithItem_NotFullPallets:;
  FindPositionWithItem_NotFullPallets = res;
  RETURN;
END;

global
function string 20 FindPositionWithItem(string artcode,string location,val qty,string skipposcode)
BEGIN
  string 20 res;
  record LocationVc LocRec;
  record INVc INr;

  LocRec.Code = location;
  if (ReadFirstMain(LocRec,1,true)) then begin end;
  if (LocRec.RequirePos==0) then begin goto LFindPositionWithItem; end;
  if (ReadFirstItem(artcode,INr,true,true)) then begin
    if (qty==INr.QtyonPallet) then begin
      res = FindPositionWithItem_WithQty(artcode,LocRec.Code,INr.PickArea,"",qty,LocRec.WHMDeliveryArea,skipposcode);
      if (blank(res)) then begin
        res = FindPositionWithItem_WithQty(artcode,LocRec.Code,"",INr.PickArea,qty,LocRec.WHMDeliveryArea,skipposcode);
      end;
    end else begin
      res = FindPositionWithItem_WithQty(artcode,LocRec.Code,INr.PickArea,"",qty,LocRec.WHMDeliveryArea,skipposcode);
      if (blank(res)) then begin
        res = FindPositionWithItem_WithQty(artcode,LocRec.Code,"",INr.PickArea,qty,LocRec.WHMDeliveryArea,skipposcode);
      end;
      if (blank(res)) then begin
        res = FindPositionWithItem_NotFullPallets(artcode,LocRec.Code,INr.PickArea,qty,LocRec.WHMDeliveryArea,skipposcode);
      end;      
      if (blank(res)) then begin
        res = FindPositionWithItem_NotFullPallets(artcode,LocRec.Code,INr.LocArea,qty,LocRec.WHMDeliveryArea,skipposcode);
      end;
    end;
  end;
LFindPositionWithItem:;  
  FindPositionWithItem = res;  
  RETURN;
END;

global
function Integer IsPositionFree(string poscode)
BEGIN
  Integer res;
  record PosVc POSr;

  POSr.Code = poscode;
  if (ReadFirstMain(POSr,1,true)==false) then begin
    res = 1290;
  end else begin
    if (POSr.Status>0) then begin
      res = 1729;
    end;
    if (POSr.Closed!=0) then begin
      res = 1729;
    end;
  end;
  IsPositionFree = res;
  RETURN;
END;
