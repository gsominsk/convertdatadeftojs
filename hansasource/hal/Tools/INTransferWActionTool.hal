external function string 60 AddObjectToObjectList(string,string);
external function Boolean SerialNrForOneItem(string,var record SerBalVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean IsDigit(string);
external function Integer ArtCodeFIFOPerSerialNr(string);
external procedure ReverseString(string,var string);
external function string 255 FindINObjects(string,string);
external procedure INTransferSumUp(record INTransferVc);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure INTransferMultiLineText(record INTransferVc,record INVc,string,Integer);

procedure GetRentINNameStr(record RentINVc RentINr,string langcod2,var string comment)
begin
  row RentINVc RentINrw;
  Integer rwcnt,i;

  comment = RentINr.Name;
  rwcnt = MatRowCnt(RentINr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentINr,1,RentINrw);
    if (RentINrw.LangCode==langcod2) then begin
      comment = RentINrw.Text;
    end;
  end;
  return;
end;

global
function Integer PasteINTransferItemAndSerial(record INTransferVc INTransferr,Integer rownr,var string inwarning)
begin
  record INVc INr;
  record ItemHistVc IHr;
  record PUVc PUr;
  record RentINVc RentINr;
  record CostAccBlock CostAccRec;
  record RentControlBlock RentControlr;
  row PUVc PUrw;
  row INTransferVc INTransferrw;
  string 255 tstr;
  Integer res;
  Integer rwcnt,i;
  string 20 loc2;
  val totval;
  Boolean rentinf,fifofound;
  record SerBalVc SBr;

  BlockLoad(RentControlr);
  res = 1;
  fifofound = false;
  MatRowGet(INTransferr,rownr,INTransferrw);
  if (nonblank(INTransferrw.SerialNr)) then begin
    if (blank(INTransferrw.ArtCode)) then begin 
      if (SerialNrForOneItem(INTransferrw.SerialNr,SBr)) then begin
        if (nonblank(SBr.Item)) then begin 
          INTransferrw.ArtCode = SBr.Item;
        end;
      end;
    end;
    IHr.ArtCode = INTransferrw.ArtCode;
    IHr.SerialNr = INTransferrw.SerialNr;
    IHr.FileName = "PUVc";
    if (ReadFirstKey("ArtCodeSerialNr",IHr,3,true)) then begin
      PUr.SerNr = IHr.TransNr;
      if (ReadFirstMain(PUr,1,true)) then begin
        INTransferrw.VECode = PUr.VECode;
        rwcnt = MatRowCnt(PUr);
        BlockLoad(CostAccRec);
        if (ArtCodeFIFOPerSerialNr(IHr.ArtCode)<>0) then begin
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(PUr,i,PUrw);
            if ((PUrw.ArtCode==IHr.ArtCode) and (PUrw.SerialNr==IHr.SerialNr)) then begin
              INTransferrw.FIFO = PUrw.CostPrice;
              INTransferrw.Value = BlankVal;
              INTransferrw.Status = 0;
              INTransferrw.PurchaseDate = PUr.TransDate;
              fifofound = true;
              res = 0;
            end;
          end;
        end;
      end;
    end;
  end;
  if (true) then begin
    if (ReadFirstItem(INTransferrw.ArtCode,INr,true,false)) then begin
      if (GetItemNameStr(1,tstr,INTransferr.LangCode,INr.Name,INr.Code)) then begin end;
      INTransferrw.Spec = tstr;
      if (fifofound==false) then begin
        INTransferrw.FIFO = INr.InPrice;
        INTransferrw.Value = BlankVal;
        INTransferrw.Status = 0;
        INTransferrw.PurchaseDate = INTransferr.TransDate;
      end;
      INTransferrw.WarrantyUntil = AddMonth(INTransferrw.PurchaseDate,INr.WarrantyLength);
      INTransferrw.Coefficient = INr.UnitCoefficient;
      INTransferrw.Objects = FindINObjects(INr.Objects,INr.Group);
      if (RentControlr.SetSerialNoToAssetNo!=0) then begin
        INTransferrw.InventoryNr = INTransferrw.SerialNr;
      end;
      MatRowPut(INTransferr,rownr,INTransferrw);
      if (INr.ExplodeRec==0) then begin
        INTransferMultiLineText(INTransferr,INr,INTransferr.LangCode,rownr);
      end;
      inwarning = INr.WarnText1;
      res = 0;
    end;
  end;
  PasteINTransferItemAndSerial = res;
  return;
end;

global
function Boolean INTransferVc_PasteArtCode(var record INTransferVc INTransferr,Integer rownr,var string inwarning)
BEGIN
  Boolean res;
  
  res = PasteINTransferItemAndSerial(INTransferr,rownr,inwarning)==0;
  INTransferVc_PasteArtCode = res;
  return;
end;

global
function Boolean INTransferVc_PasteSerialNr(var record INTransferVc INTransferr,Integer rownr)
BEGIN
  string 200 warning;
  Boolean res;
  
  res = PasteINTransferItemAndSerial(INTransferr,rownr,warning)==0;
  INTransferVc_PasteSerialNr = res;
  RETURN;
END;

global
procedure ReadLastINSer(string item,var string lastnr)
begin
  record ItemHistVc IHr;
  Integer i,l,a;
  string 255 tstr,c;
  LongInt li;

  IHr.ArtCode = item;
 /* 
  for (i=0;i<30;i=i+1) begin
    IHr.SerialNr = IHr.SerialNr & chr(125);
  end;
  if (ReadLastKey("ArtCodeSerialNr",IHr,2,false)) then begin
 9 is after 20 .....
*/
  IHr.FileName = "PUVc";  //ProdVc ? StockMovVc ? ProdOperationVc ?
  if (ReadLastKey("FNArtCode",IHr,2,false)) then begin
    if (IHr.ArtCode==item) then begin
      lastnr = IHr.SerialNr;
      l = len(IHr.SerialNr);
      for (i=l-1;i>=0;i=i-1) begin
        c = Mid(IHr.SerialNr,i,1);
        if (IsDigit(c)) then begin
          tstr = tstr & c;
        end else begin
          a = i+1;
          goto LBreakReadLastINSer;
        end;
      end;
LBreakReadLastINSer:;      
      c = "";
      ReverseString(tstr,c);
      if (nonblank(c)) then begin
        li = StringToLongInt(c);
        li = li + 1;
        IHr.ArtCode = item;
        IHr.SerialNr = Left(lastnr,a) & li;
        if (ReadFirstKey("ArtCodeSerialNr",IHr,2,true)) then begin
          lastnr = IHr.SerialNr;
        end;
      end;
    end;
  end;
  return;
end;

Function
Integer SplitLine(record INTransferVc INTransferr,var Integer i)
begin
  row INTransferVc INTransferrw;
  row INTransferVc INTransfer2rw;
  Integer j,rwcnt;

  rwcnt = MatRowCnt(INTransferr);
  MatRowGet(INTransferr,i,INTransferrw);
  INTransfer2rw.ArtCode = INTransferrw.ArtCode;
  INTransfer2rw.Quant = 1;
  INTransfer2rw.SerialNr = "";
  INTransfer2rw.Spec = INTransferrw.Spec;
  INTransfer2rw.Status = INTransferrw.Status;
  INTransfer2rw.FIFO = INTransferrw.FIFO;
  INTransfer2rw.Value = INTransferrw.Value;
  INTransfer2rw.PurchaseDate = INTransferrw.PurchaseDate;
  INTransfer2rw.WarrantyUntil = INTransferrw.WarrantyUntil;
  INTransfer2rw.VECode = INTransferrw.VECode;
  INTransfer2rw.Contact = INTransferrw.Contact;
  INTransfer2rw.Objects = INTransferrw.Objects;
  INTransfer2rw.CostAcc = INTransferrw.CostAcc;
  INTransfer2rw.FIFORowVal = INTransferrw.FIFO;
  INTransfer2rw.Location = INTransferrw.Location;
  INTransfer2rw.Coefficient = INTransferrw.Coefficient;
  INTransfer2rw.InventoryNr = "";
  INTransfer2rw.RentResRow = INTransferrw.RentResRow;
  MatRowPut(INTransferr,i,INTransfer2rw);
  for (j=0;j<INTransferrw.Quant-1;j=j+1) begin
    MatRowInsert(INTransferr,i,INTransfer2rw);
  end;
  i = i + (INTransferrw.Quant-1);
  rwcnt = MatRowCnt(INTransferr);
  SplitLine = rwcnt;
  return;
end;

function
Boolean SerialIsOnThisRecord(record INTransferVc INTransferr,string item,string location,string serial)
begin
  Integer i,rwcnt;
  row INTransferVc INTransferrw;
  Boolean res;

  res = false;
  rwcnt = MatRowCnt(INTransferr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INTransferr,i,INTransferrw);
    if (nonblank(INTransferrw.SerialNr)) then begin
      if ((INTransferrw.ArtCode==item) and (INTransferrw.SerialNr==serial)) then begin
        res = true;
        i = rwcnt;
      end;
    end;
  end;
  SerialIsOnThisRecord = res;
  return;
end;

global
function Boolean INTransferSplitSerNrLines(var record INTransferVc INTransferr)
begin
  record INVc INr;
  row INTransferVc INTransferrw;
  Integer i,rwcnt,ercnt;
  Boolean res;

  res = false;
  ercnt = 0;
  rwcnt = MatRowCnt(INTransferr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INTransferr,i,INTransferrw);
    ercnt = ercnt + 1;
    if (INTransferrw.Quant>1) then begin
      INr.Code = INTransferrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        if (INr.SerNrf==1) then begin
          ercnt = ercnt + (INTransferrw.Quant - 1);
        end;
      end;
    end;
  end;
  if (ercnt<=200) then begin
    res = true;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(INTransferr,i,INTransferrw);
      if (INTransferrw.Quant>1) then begin
        INr.Code = INTransferrw.ArtCode;
        if (ReadFirstMain(INr,1,true)) then begin
          if (INr.SerNrf==1) then begin
            rwcnt = SplitLine(INTransferr,i);
          end;
        end;
      end;
    end;
  end;
  INTransferSplitSerNrLines = res;
  return;
end;

global
procedure INTransferSplitSerNo(var record INTransferVc INTransferr,Integer therow)
begin
  Integer i,rwcnt;
  row INTransferVc INTransferrw;
  record INVc INr;
  record SerBalVc SBr;
  Boolean foundf,testf;
  string 200 Location;
  record MainStockBlock MainStockRec;

  if (INTransferSplitSerNrLines(INTransferr)) then begin
  rwcnt = MatRowCnt(INTransferr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INTransferr,i,INTransferrw);
    if (blank(INTransferrw.SerialNr)) then begin
      INr.Code = INTransferrw.ArtCode;
      if (ReadFirstMain(INr,1,true)) then begin
        if (INr.SerNrf==1) then begin
          Location = INTransferr.FrLocation;
          if (blank(Location)) then begin
            Location = MainStockRec.MainStock;
          end;
          SBr.Item = INTransferrw.ArtCode;
          SBr.Location = Location;
          SBr.Serial = "";
          foundf = true;
          ResetLoop(SBr);
          while (LoopMain(SBr,2,foundf)) begin
            if (nonblank(INTransferrw.ArtCode)) then begin
              if (SBr.Item!=INTransferrw.ArtCode) then begin foundf = false; end;
            end;  
            if (nonblank(Location)) then begin
              if (SBr.Location!=Location) then begin foundf = false; end;
            end;
            testf = true;
            if (foundf==false) then begin
              testf = false;
            end;
            if (nonblank(SBr.Serial)) then begin
              if (SerialIsOnThisRecord(INTransferr,SBr.Item,SBr.Location,SBr.Serial)) then begin
                testf = false;
              end;
            end else begin
              testf = false;
            end;
            if (SBr.Quant<INTransferrw.Quant) then begin
              testf = false;
            end;
            if (testf) then begin
              INTransferrw.SerialNr = SBr.Serial;
              MatRowPut(INTransferr,i,INTransferrw);
              foundf = false;
            end;
          end;
        end;
      end;
    end;
  end;
  end;
  return;
end;

procedure FindAlreadyTransferedItems_PUVc(LongInt PUNr,var vector val valreadytransfered)
begin
  record INTransferVc INTransferr;
  row INTransferVc INTransferrw;
  Boolean found,testf;
  string 255 keystr;
  Integer i,rwcnt;
  
  found = true;
  INTransferr.PUNr = PUNr;
  while (LoopKey("PUNr",INTransferr,1,found)) begin
    if (INTransferr.PUNr!=PUNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (INTransferr.OKFlag==0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(INTransferr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(INTransferr,i,INTransferrw);
          valreadytransfered[INTransferrw.ArtCode & ":" & INTransferrw.PURow] = valreadytransfered[INTransferrw.ArtCode & ":" & INTransferrw.PURow] + INTransferrw.Quant;
        end;
      end;
    end;
  end;
  return;
end;  

global
function Integer PastePUInINTransfer(record PUVc PUr,var record INTransferVc INTransferr)
BEGIN
  record INVc INr;
  row INTransferVc INTransferrw;
  row PUVc PUrw;
  val costprice;
  Integer i,j,q,srw,rwcnt;
  string 200 warning;
  Integer res;
  vector val valreadytransfered;
  string 60 objects;

  srw = 0;
  FindAlreadyTransferedItems_PUVc(PUr.SerNr,valreadytransfered);
  RecordNew(INTransferr);
  INTransferr.PUNr = PUr.SerNr;
  INTransferr.TransDate = PUr.TransDate;
  INTransferr.FrLocation = PUr.Location;
  INTransferr.Objects = PUr.Objects;
  rwcnt = MatRowCnt(PUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    if (nonblank(PUrw.ArtCode)) then begin
      if (valreadytransfered[PUrw.ArtCode & ":" & i]<PUrw.Quant) then begin
        ClearRow(INTransferr,INTransferrw,1);
        INTransferrw.ArtCode = PUrw.ArtCode;
        INTransferrw.Quant = PUrw.Quant;
        INTransferrw.Spec = PUrw.Spec;
        INTransferrw.SerialNr = PUrw.SerialNr;
        INTransferrw.PURow = i;
        if (INTransferrw.Quant!=0) then begin
          MatRowPut(INTransferr,srw,INTransferrw);
          res = PasteINTransferItemAndSerial(INTransferr,srw,warning);
          if (res==1) then begin res = 0; end;
          MatRowGet(INTransferr,srw,INTransferrw);
          INTransferrw.VECode = PUr.VECode;
          INTransferrw.FIFO = PUrw.CostPrice;
          INTransferrw.PurchaseDate = PUr.TransDate;
          objects = INTransferrw.Objects;
          INTransferrw.Objects = AddObjectToObjectList(PUrw.Objects,objects);        
          MatRowPut(INTransferr,srw,INTransferrw);
          srw = srw + 1;
        end;
      end;
      valreadytransfered[PUrw.ArtCode & ":" & i] = valreadytransfered[PUrw.ArtCode & ":" & i] - PUrw.Quant;
    end;
  end;
  if (srw>0) then begin
    INTransferSumUp(INTransferr);
  end else begin
    res = 23301;
  end;
  PastePUInINTransfer = res;
  RETURN;
END;

