// Is this file used at all??

external function LongInt MinutesToTime(LongInt,var Time);
external function LongInt TimeToMinutes(Time);
external procedure ExtractObj(string,var Integer,var string);

// This exists as a Global function as well, silly...
function Boolean GetMachineGroup(string mch,var string grp)
begin
  record MachineGroupsBlock MGb;
  row  MachineGroupsBlock MGr;
  string 20 obj;
  integer pos;
  integer rwcnt;
  integer i;
  Boolean res;
  
  BlockLoad(MGb);
  
  rwcnt = MatRowCnt(MGb);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(MGb,i,MGr);
    pos = 0;
    ExtractObj(MGr.DefStr,pos,obj);
    while (nonblank(obj)) begin
      if (obj==mch) then begin
        grp = MGr.Code;
        res = true;
        goto GetMachineGroupOut;
      end;
    end;
  end;

GetMachineGroupOut:;
  GetMachineGroup = res;
  return;
end;

procedure CorrectForMachineHours(record ProdOrderVc POr)
begin
/*  record MachineHoursVc MHr;
  string 5 group;
  boolean donef;
  date testdate;
  
  if (GetMachineGroup(POr.Machine,group)==true) then begin
    MHr.Code = group;
    if (ReadFirstMain(MHr,1,true)) then begin
      testdate = POr.StartDate;
      
      while (true) begin
        donef = true;

        switch getdateid(testdatre) begin
          case 1:
            starttime = MHr.MonStart;
            endtime = MHr.MonEnd;
          case 2:
            starttime = MHr.TueStart;
            endtime = MHr.TueEnd;
          case 3:
            starttime = MHr.WedStart;
            endtime = MHr.WedEnd;
          case 4:
            starttime = MHr.ThuStart;
            endtime = MHr.ThuEnd;
          case 5:
            starttime = MHr.FriStart;
            endtime = MHr.FriEnd;
          case 6:
            starttime = MHr.SatStart;
            endtime = MHr.SatEnd;
          case 7:
            starttime = MHr.SunStart;
            endtime = MHr.SunEnd;
        end
        
        if NonBlankTime(starttime) then begin
          if testdate gt startdate or starttime gt POr.StartTime
        end;

        if donef then begin
          if testdate>POr.EndDate then begin
            goto LCFMH_out;
          end;
        end;
      end;
    end;
  end;
LCFMH_out:;
*/
end;

global
updating procedure UpdateProdTimes()
begin
  record ProdOrderVc POr;
  record ProdOrderVc OldPOr;
  date prddat;
  time prdtim;
  string 20 oldmch;
  LongInt mins;
  LongInt exdays;
  Integer dummy;

  oldmch = "";
  POr.QueuePos = 0;
  POr.Machine = "";

  while (LoopKey("Queue",POr,2,true)) begin
    if (POr.Machine<>oldmch) then begin
      prddat = CurrentDate;
      prdtim = CurrentTime;
    end;
    RecordCopy(OldPOr,POr);
    POr.StartTime = prdtim;
    POr.StartDate = prddat;

    CorrectForMachineHours(POr);

    dummy = RecordUpdate(OldPOr,POr,true);

    mins = TimeToMinutes(prdtim);
    mins = mins + TimeToMinutes(POr.DurTime);
    mins = mins + TimeToMinutes(POr.SetUpTime);
    exdays = MinutesToTime(mins,prdtim);
    prddat = AddDay(prddat,exdays + POr.DurDays);
  end;
end;

global
function Integer Nr_SequenceProdOperations(record ProdOperationVc curProdOpr)
begin
  Integer res;
  record ProdOperationVc ProdOpr;
  Boolean found;

  ProdOpr.Sequence = curProdOpr.Sequence;
  ProdOpr.ProdNr = curProdOpr.ProdNr;
  found = true;
  while (LoopKey("Sequence",ProdOpr,2,found)) begin
    if (ProdOpr.ProdNr!=curProdOpr.ProdNr) then begin found = false; end;
    if (ProdOpr.Sequence!=curProdOpr.Sequence) then begin found = false; end;
    if (found) then begin
      res = res + 1;
    end;
  end;
  Nr_SequenceProdOperations = res;
  return;
end;