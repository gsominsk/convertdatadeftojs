external procedure AutomatedSales(string,Integer);
external function string 60 AddStringToStringList(string,string);
external procedure FillResourceType(record RcVc,string,string,string,string,Date,LongInt,Integer,LongInt,var Area,var Area);
external procedure FillResourceMonth2(record RcVc,var Area,var Area,var array string,var array val);
remote procedure FillHalfYearWClassRemote(Integer,Date,Integer,var Area);
external procedure MoveReservationWindow(LongInt,string,Date);
external procedure StripSpace(var string,string);
remote updating function Boolean MoveRentRes(LongInt,string);
remote updating function Integer MoveReservation(record LocalMachineBlock,LongInt,string,Date);
remote updating function Boolean LeftEdgeMoveReservation(record LocalMachineBlock,LongInt,string,Date);
remote updating function Boolean RightEdgeMoveReservation(record LocalMachineBlock,LongInt,string,Date);
remote updating function Boolean MoveActivity2(Integer,LongInt,string,string,Date,Time);
remote updating function Boolean MoveProdOrder(LongInt,string);
remote updating function Boolean MoveProdOperation(LongInt,string);

global
updating procedure ResMonMove(Integer compnr,Integer type,LongInt recnr,string old,string new,Date newdate,Time newtime)
BEGIN
  Boolean movedf;
  Integer movederr;
  Integer acclevel;
  record LocalMachineBlock LMb;
    
  switch (type) begin
    case kResourceProdOperationVc:
      acclevel = UserRegisterAccess("ProdOperationVc");
      if (acclevel!=1) then begin
        goto LResMonMove;
      end;
      movedf = MoveProdOperation(recnr,new);
      if (movedf) then begin
        UpdateBrowses("ProdOrderVc");
      end else begin
        Beep;
      end;
    case kResourceProdOrderVc:
      acclevel = UserRegisterAccess("ProdVc");
      if (acclevel!=1) then begin
        goto LResMonMove;
      end;
      movedf = MoveProdOrder(recnr,new);
      if (movedf) then begin
        UpdateBrowses("ProdOrderVc");
      end else begin
        Beep;
      end;
    case kResourceRentResVc:
      acclevel = UserRegisterAccess("RentResVc");
      if (acclevel!=1) then begin
        goto LResMonMove;
      end;    
      movedf = MoveRentRes(recnr,new);
      if (movedf) then begin
        UpdateBrowses("RentResVc");
      end else begin
        Beep;
      end;
    case kResourceJobVc:
      acclevel = UserRegisterAccess("JobVc");
      if (acclevel!=1) then begin
        goto LResMonMove;
      end;
//      BlockLoad(LMb);
//      MoveReservationWindow(recnr,new,newdate);
      
      movederr = MoveReservation(LMb,recnr,new,newdate);
      switch (movederr) begin
        case 0:
          UpdateBrowses("JobVc");
        case 1274:
          MessageBox(1274,StringFromStringSet(3,"ChangeDateinResourcePlanner"));
        otherwise
          Beep;
      end;
    case kResourceActVc:
//      acclevel = UserRegisterAccess("ActVc");
//      if (acclevel!=1) then begin
//        goto LResMonMove;
//      end;    
      movedf = MoveActivity2(compnr,recnr,old,new,newdate,newtime);
      if (movedf) then begin
        UpdateBrowses("ActVc");
      end else begin
        Beep;
      end;
  end;
LResMonMove:;  
  return;
end;

global
updating procedure ResMonRightEdgeMove(Integer compnr,Integer type,LongInt recnr,string old,string new,Date newdate,Time newtime)
begin
  Boolean movedf;
  Integer acclevel;
  record LocalMachineBlock LMb;

  switch (type) begin
    case kResourceJobVc:
      acclevel = UserRegisterAccess("JobVc");
      if (acclevel!=1) then begin
        goto LResMonRightEdgeMove;
      end;    
      if (UserCanAction("ChangeDateinResourcePlanner",true)==false) then begin
        MessageBox(1274,StringFromStringSet(3,"ChangeDateinResourcePlanner"));
        goto LResMonRightEdgeMove;
      end;
      movedf = RightEdgeMoveReservation(LMb,recnr,new,newdate);
      if (movedf) then begin
        UpdateBrowses("JobVc");
      end else begin
        Beep;
      end;
  end;
LResMonRightEdgeMove:;  
  return;
end;

global
updating procedure ResMonLeftEdgeMove(Integer compnr,Integer type,LongInt recnr,string old,string new,Date newdate,Time newtime)
begin
  Boolean movedf;
  Integer acclevel;
  record LocalMachineBlock LMb;

  switch (type) begin
    case kResourceJobVc:
      acclevel = UserRegisterAccess("JobVc");
      if (acclevel!=1) then begin
        goto LResMonLeftEdgeMove;
      end;    
      if (UserCanAction("ChangeDateinResourcePlanner",true)==false) then begin
        MessageBox(1274,StringFromStringSet(3,"ChangeDateinResourcePlanner"));
        goto LResMonLeftEdgeMove;
      end;
      movedf = LeftEdgeMoveReservation(LMb,recnr,new,newdate);
      if (movedf) then begin
        UpdateBrowses("JobVc");
      end else begin
        Beep;
      end;
  end;
LResMonLeftEdgeMove:;  
  return;
end;

global
procedure TrackRTMon(LongInt type,string tstr,record RcVc curRepSpec)
begin
  record RcVc RepSpec;
  Integer nwn;

  RecordCopy(RepSpec,curRepSpec);
  RepSpec.flags[21] = type;
  switch (type) begin
    case kResourceTypeItemClass:
      RepSpec.f1 = tstr;
      RepSpec.Notation = 1;
      nwn = OpenWindow("RTMonWClass",1,0,"","",RepSpec);
    case kResourceTypeAssetDisp:
      RepSpec.f1 = tstr;
      nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
    case kResourceTypeMachineGroupProdOrder:
      RepSpec.f1 = tstr;
      nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
    case kResourceTypeMachineGroupProdOper:
      RepSpec.f1 = tstr;
      nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
    case 10://Como ? 
      RepSpec.f5 = tstr;
      nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
    case kResourceTypeProject:
      RepSpec.f1 = tstr;
      nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
    otherwise
      if (ValuePack(11)==false) then begin
        RepSpec.f1 = tstr;
        nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
      end else begin
        RepSpec.flags[20] = 0;
        RepSpec.f1 = tstr;
        nwn = OpenWindow("ResHotelWClass",1,0,"","",RepSpec);
      end;
  end;
  return;
end;

function Boolean OpenRentalItem(string item,string serialnr)
begin
  record RentINVc Rentr;
  Integer nwn;
  Boolean res;
  string 255 tstr;

  res = false;
  Rentr.Code = item;
  StripSpace(tstr,serialnr);
  Rentr.SerialNr = tstr;
  res = ReadFirstMain(Rentr,2,true);
  if (res) then begin
    nwn = OpenWindow("RentINDClass",1,0,"","",Rentr);
  end; 
  OpenRentalItem = res;
  return;
end;

function Boolean OpenNewReservation(string item,string serialnr)
begin
  record ResVc Resr;
  Integer nwn;
  Boolean res;
  string 255 tstr;

  res = false;
  Resr.Code = item;
  StripSpace(tstr,serialnr);
  Resr.Code = tstr;
  res = ReadFirstMain(Resr,1,true);
  if (res) then begin
    nwn = OpenWindow("ResDClass",1,0,"","",Resr);
  end;
  OpenNewReservation = res;
  return;
end;

global
procedure TrackResMon(LongInt type,string tstr,record RcVc curRepSpec)
begin
  record RcVc RepSpec;
  Integer nwn;

  RecordCopy(RepSpec,curRepSpec);
  RepSpec.flags[21] = type;
  switch (type) begin
    case kResourceMonthAsset:
      RepSpec.f1 = tstr;
      nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
    otherwise
/*should depend on type*/    
      if (OpenRentalItem(RepSpec.f1,tstr)==false) then begin // One extra message to the server
        if (OpenNewReservation(RepSpec.f1,tstr)==false) then begin // Two extra messages to the server
          RepSpec.f1 = tstr;
          nwn = OpenWindow("MonthWClass",1,0,"","",RepSpec);
        end;
      end;
  end;
  RETURN;
END;

global
procedure HalfYearSetRedDays(Integer calsystem,Date startd,Integer nrofmonths,var Area adhp)
begin
  FillHalfYearWClassRemote(calsystem,startd,nrofmonths,adhp);
  return;
end;

procedure ResMonWClass_BIChart(Integer wn,array string arooms,array val aoccup)
begin
  Integer i;
  val totv;

  for (i=0;i<arooms.length;i=i+1) begin
    totv = totv + aoccup[i];
  end;
  
  ChartBegin(wn,"$ResMonWClass_BIChart",kChartTypePie,kChartLegendTypeNone,0,-1);
  ChartTheme("MiamiNice");
  ChartDataSeriesBegin("ResMonWClass_BIChartRoomOccupation");
  for (i=0;i<arooms.length;i=i+1) begin
    ChartDatum(aoccup[i],arooms[i]);  
  end;
  EndChartDataSeries;
  EndChart;
  return;
end;

global
procedure FillResourceMonthClient(record RcVc RepSpec,var Area adhp,var Area ddhp)
begin
  array string 255 arooms;
  array val aoccup;
  Integer i;
  string 255 autmsgfunciontags;
  
  threadremote.FillResourceMonth2(RepSpec,adhp,ddhp,arooms,aoccup);
  ResMonWClass_BIChart(CurWindow,arooms,aoccup);
  if (IsStandardProduct) then begin
    switch (BuildProductCode) begin
      case "StandardHotel": 
        if (GetFeatureState("HasModPP")<=kFeatureTrial) then begin
          autmsgfunciontags = AddStringToStringList(autmsgfunciontags,"HasModPP+Open_ResMon");
        end;
    end;
    AutomatedSales(autmsgfunciontags,kAutomatedSalesTagRandom);
  end;
  return;
end;

global
procedure FillResourceTypeClient(record RcVc RepSpec,string uscode,string location,string item,string asset,Date dp,LongInt maxdays,Integer dmode,
                           LongInt type,var Area adhp,var Area ddhp)
begin
  threadremote.FillResourceType(RepSpec,uscode,location,item,asset,dp,maxdays,dmode,type,adhp,ddhp);
  return;
end;
