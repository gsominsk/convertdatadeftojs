external procedure IVApplyPromotions(record IVVc);
external procedure IVPasteRvrsVATCode(var record IVVc,Boolean);
external function boolean INInvRecepyExists(string);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external procedure IVVc_PasteDelCountry(var record IVVc,string);
external function Boolean CostPriceForGP(string,string,string,string,var val);
external function val CalcUnitFactor(string,val);
external function string 255 CustArtCode(string,string);
external function Boolean BulkSerialNos_CalculateQuantityAndSerialNr(record SerNrTrackBlock,Boolean,string,var string,var val);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure GetVATCodeRow(string,row VATCodeBlock);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure IVVc_ChangeQuantityRecepy(string,val,Integer,var record IVVc);
external procedure RowCalculateTaxMatrix_IVVc(var record IVVc,Integer,row IVVc);
external function Boolean IVVc_CalculateRate(var record IVVc);
external function roundmode SetRoundModeD(Integer);
external function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external procedure AddMultiBuyDiscountItems_IVVc(var record IVVc);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure RegionPerceptionTax(string,string,string,string,var string,var val);
external function Boolean GetWHTaxRow(string,var row WHTaxBlock);
external function Boolean VATIVDchrsum(var record VATIVVc,Integer);
external procedure AddItemWithholdingTaxesRows_IVVc(var record IVVc,Integer,record INVc);
external procedure WarnFutureDate(Boolean,Date);
external function roundmode DefaultRoundMode();
external procedure VATIVSumup(record VATIVVc);
external function Boolean GetPD(var record PDVc);
external function Date FindDueDateInAccPeriod(Date);
external function string 255 FindINObjects(string,string);
external function val GetTax1Discount(string,Date,string);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external function Integer AddPortugueseType();
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure CalculateIVCashBack(var record IVVc);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external function Boolean DateLocked(Date,string);
external procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var Integer,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function LongInt DateDiff(Date,Date);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean GetCuAccUseRow(string,var row CuAccBlock);
external function LongInt GetCurUserLastNr(string);
external procedure PasteCreditSalesAccs(record IVVc);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external function Integer GetPayDealType(string,var LongInt);
external function Boolean DateWarned(Date,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure Do_InvoiceRecepy(record IVVc,record INVc,Integer);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function Boolean SetUnitFactor(string,var val,val,val,val,var val,var val,var val,var string,Boolean);
external procedure IVVcITMultiLineText(record IVVc,record INVc,string,Integer);
external procedure IVMultiLineText(record IVVc,record INVc,string,Integer);
external procedure IVDUpdatePrices(var record IVVc,Boolean);
external procedure IVSumup(var record IVVc,Boolean);
external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure CalculateFreightWeight(record IVVc,Boolean);
external function Boolean IVVc_ExplodeRecepy(record INVc,val,record IVVc,string,Integer);
external function Boolean QtyDepPriceL(string);
external procedure IVVcGetCalcItemPrice(record INVc,record IVVc,Integer,var val);
external function Boolean GetFirstItem(var string,var record INVc);
external function val CalcItemRepa(val,val,val,var string,val,val,val,val,val,roundmode);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean INVc_AllowSales(record INVc,var LongInt);

global
function Integer VATCalcRule(string VATCode)
begin
  row VATCodeBlock VATbrw;

  GetVATCodeRow(VATCode,VATbrw);
  VATCalcRule = VATbrw.CalcRule;
  return;
end;

global
procedure GetLCPrices(val points,string clevel,var string plcode, var string rebcode)
begin 
  record LCMLevelSetBlock LCMLevelSetBl;
  row LCMLevelSetBlock LCMLevelSetrw;
  Integer i,rwcnt;
  
  BlockLoad(LCMLevelSetBl);
  rwcnt = MatRowCnt(LCMLevelSetBl);
  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LCMLevelSetBl,i,LCMLevelSetrw);
    if ((points>=LCMLevelSetrw.FromPoints) and ((points<=LCMLevelSetrw.ToPoints) or (LCMLevelSetrw.ToPoints==0)) and (clevel==LCMLevelSetrw.LCMLevel)) then begin
      plcode = LCMLevelSetrw.PLCode;
      rebcode = LCMLevelSetrw.RebCode;
      i = rwcnt;
    end;
  end;  
  return;
end;  

global
procedure IVVc_PasteLoyaltyCardNr(var record IVVc IVr,record LocalMachineBlock LMb)
begin 
  record LoyaltyCardVc LoyaltyCardr;
  record IVVc credIVr;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  string 5 PLCode,RebCode;
  boolean pricechange;
  boolean testf;
  string 20 oldcust;

  pricechange = false;
  LoyaltyCardr.SerNr = IVr.LoyaltyCardNr;
  if (ReadFirstMain(LoyaltyCardr,1,true)) then begin 
    testf = true;
    if ((LoyaltyCardr.ExpiryDate<IVr.InvDate) and nonblank(LoyaltyCardr.ExpiryDate)) then begin
      testf = false;
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin 
        credIVr.SerNr = IVr.CredInv;
        if (ReadFirstMain(credIVr,1,true)) then begin 
          if not ((LoyaltyCardr.ExpiryDate<IVr.InvDate) and nonblank(LoyaltyCardr.ExpiryDate)) then begin
            testf = true;
          end;  
        end;
      end;   
    end;
    if (LoyaltyCardr.StartDate>IVr.InvDate) then begin
      testf = false;
    end;
    if (LoyaltyCardr.Closed!=0) then begin
      testf = false;
    end;
    if (testf) then begin 
      oldcust = IVr.CustCode;
      IVr.CustCode = LoyaltyCardr.CustCode;
      if (IVr.CustCode!=oldcust) then begin 
        if (PasteCust2InInv(IVr,LMb,oldcust,true,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin 
        end;
      end;  
      IVr.LoyaltyCardNr = LoyaltyCardr.SerNr;
      IVr.LCMLevel = LoyaltyCardr.LCMLevel;
      IVr.Points = 0;
      //if (LoyaltyCardr.PointsBalance<>0) then begin
        GetLCPrices(LoyaltyCardr.PointsBalance,LoyaltyCardr.LCMLevel,PLCode,RebCode);
        if (nonblank(PLCode) and (IVr.PriceList<>PLCode)) then begin 
          IVr.PriceList = PLCode;
          pricechange = true;
        end;
        if (nonblank(RebCode) and (IVr.RebCode<>RebCode)) then begin 
          IVr.RebCode = RebCode;
          pricechange = true;
        end;
        if (MatRowCnt(IVr)>0) then begin 
          IVDUpdatePrices(IVr,false);
        end;  
      //end;
    end else begin
      IVr.LCMLevel = "";
      IVr.Points = 0;
      MessageBox(26434,"");
    end;
  end else begin 
    IVr.LCMLevel = "";
    IVr.Points = 0;
  end;
  return;
end;

global
procedure IVGetRate(var record IVVc IVp)
BEGIN
  val from,to1,to2,base1,base2;
  string 5 crncy;
  record IVTBlock IVTb;
  record ORVc ORp;
  record IVVc tmpIVr;
 
  if (IVp.OrderNr>0) then begin
    BlockLoad(IVTb);
    ORp.SerNr = IVp.OrderNr;
    ReadFirstMain(ORp,1,true);
    switch (IVTb.IVFromORRate) begin
      case kIVRateFromOrder:
        IVp.FrRate = ORp.FrRate;
        IVp.ToRateB1 = ORp.ToRateB1;
        IVp.ToRateB2 = ORp.ToRateB2;
        IVp.BaseRate1 = ORp.BaseRate1;
        IVp.BaseRate2 = ORp.BaseRate2;
      case kIVRateOnInvoiceDate:
        GetFullCurncyRate(IVp.CurncyCode,IVp.InvDate,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2);
      case kIVRateFromPrepaymentandInvoice:
        RecordCopy(tmpIVr,IVp);
        if (IVVc_CalculateRate(tmpIVr)) then begin
          IVp.FrRate = tmpIVr.FrRate;
          IVp.ToRateB1 = tmpIVr.ToRateB1;
          IVp.ToRateB2 = tmpIVr.ToRateB2;
          IVp.BaseRate1 = tmpIVr.BaseRate1;
          IVp.BaseRate2 = tmpIVr.BaseRate2;
        end else begin
          GetFullCurncyRate(IVp.CurncyCode,IVp.InvDate,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2);
        end;
      case kIVRateFromPrepayment:
        RecordCopy(tmpIVr,IVp);
        if (IVVc_CalculateRate(tmpIVr)) then begin
          IVp.FrRate = tmpIVr.FrRate;
          IVp.ToRateB1 = tmpIVr.ToRateB1;
          IVp.ToRateB2 = tmpIVr.ToRateB2;
          IVp.BaseRate1 = tmpIVr.BaseRate1;
          IVp.BaseRate2 = tmpIVr.BaseRate2;
        end else begin
          GetFullCurncyRate(IVp.CurncyCode,IVp.InvDate,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2);
        end;
    end;
  end else begin
    crncy = IVp.CurncyCode;
    GetFullCurncyRate(crncy,IVp.TransDate,from,to1,to2,base1,base2);
    IVp.CurncyCode = crncy;
    IVp.FrRate = from;
    IVp.ToRateB1 = to1;
    IVp.ToRateB2 = to2;
    IVp.BaseRate1 = base1;
    IVp.BaseRate2 = base2;  
    IVp.BaseSum4 = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,from,to1,to2,base1,base2,DefaultCurRoundOff);
  end;
  RETURN;
END;

global
procedure IVVc_PasteVATCode(var record IVVc IVp,Integer rownr,string oldvatcode,var Boolean chsum)
BEGIN  
  row IVVc IVrw;

  MatRowGet(IVp,rownr,IVrw);
//  IVrw.VATCalcRule = VATCalcRule(IVrw.VATCode);
  if (IVp.NoTax1==0) then begin
    IVrw.TAX1Reb = GetTax1Discount(IVp.CustCode,IVp.TransDate,IVrw.VATCode);
  end;
  MatRowPut(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case 7: IVSumup(IVp,true);
    case 8: IVSumup(IVp,true);
    case 5: 
      IVSumup(IVp,true);
      chsum = true;
    case 4: chsum = true;
    case kInvoiceRowTypeNormal:       
      chsum = IVDchrsum(IVp,rownr);
      chsum = chsum or (oldvatcode!=IVrw.VATCode);
    case kInvoiceRowTypeStructuredItemComponent:       
      chsum = IVDchrsum(IVp,rownr);
      chsum = chsum or (oldvatcode!=IVrw.VATCode);
    case kInvoiceRowTypeRetention:       
      chsum = true;
      IVSumup(IVp,true);
    case 11:       
      chsum = IVDchrsum(IVp,rownr);
      chsum = chsum or (oldvatcode!=IVrw.VATCode);
  end;
  RETURN;
END;

global
procedure GetAccAccrual(string account,var string periodcode)
BEGIN
  record AccVc Accr;
  
  periodcode = "";
  Accr.AccNumber = account;
  if (ReadFirstMain(Accr,1,true)) then begin
    periodcode = Accr.PeriodCode;
  end;
  RETURN;
END;

global
procedure IVVc_PasteQuant(var record IVVc IVr,Integer rownr,Boolean calcuntiqf,var Boolean chsum,string defreturnlocation)
BEGIN
  val t,s,price,vreb,baseprice,temp,tax2prc;
  record FreightBlock FreightRec;
  record INVc INr;
  row IVVc IVrw;
  string 255 tstr,tax2code,location,dummystr;
  Boolean calcprice;
  Integer exportflag;
  Boolean dummyf;
  record SerNrTrackBlock SNrb;

  BlockLoad(SNrb);
  MatRowGet(IVr,rownr,IVrw);
  location = IVrw.Location;
  if (blank(location)) then begin
    location = IVr.Location;
  end;
  vreb = IVrw.vRebate;  
  price = IVrw.Price;
  exportflag = IVr.ExportFlag;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    exportflag = exportflag + AddPortugueseType;
  end;  
  if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVr.CurncyCode,
                            IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                            IVr.LangCode,IVr.CustCat,IVr.PriceList,IVr.RebCode,
                            price,tstr,vreb,dummystr,baseprice,dummystr,
                            exportflag,calcprice,IVr.TransDate,IVr.TransTime,IVr.CustCode,true,dummyf,IVr.PayDeal,
                            tax2code,tax2prc,IVr.Region,location,dummystr)) then begin
    IVrw.ArtCode = INr.Code;
    if (nonblank(IVrw.ArtCode)) and (INr.SerNrf==1) then begin
      if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,false,IVrw.ArtCode,IVrw.SerialNr,IVrw.Quant)) then begin
        MatRowPut(IVr,rownr,IVrw);
        MatRowGet(IVr,rownr,IVrw);
      end;
    end;
    if (nonblank(IVr.PriceList)) then begin
      if (QtyDepPriceL(IVr.PriceList)) then begin
        IVrw.Price = price;
      end;
    end;
    if (calcprice) then begin
      MatRowPut(IVr,rownr,IVrw);
      temp = -1;
      IVVcGetCalcItemPrice(INr,IVr,rownr,temp);
      MatRowGet(IVr,rownr,IVrw);
    end;
    if (INr.ExplodeRec==0) then begin
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        IVrw.Recepy = INr.Recepy;
      end else begin
        IVrw.Recepy = "";
      end;
    end;      
    IVrw.vRebate = vreb;
    IVrw.RepaExVAT = CalcItemRepa(INr.RepaPricePerWeight,INr.Weight,IVrw.Quant,IVr.CurncyCode,
                                  IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    if (INr.ExplodeRec==0) then begin
      if (baseprice<>0) then begin
        IVrw.BasePrice = baseprice;
      end;
    end;
    t = IVrw.BasePrice;
    chsum = CostPriceForGP(IVrw.ArtCode,IVrw.SerialNr,IVr.PriceList,IVr.CustCode,t);
    IVrw.BasePrice = t;
    if (blank(IVrw.PeriodCode)) then begin
      GetAccAccrual(IVrw.SalesAcc,tstr);
      IVrw.PeriodCode = tstr;
    end;
    if (calcuntiqf) then begin
      IVrw.UnitFactQuant = CalcUnitFactor(IVrw.UnitCode,IVrw.Quant);
    end;
    MatRowPut(IVr,rownr,IVrw);
    if (INr.ExplodeRec!=0) then begin
      if (nonblank(IVrw.Recepy)) then begin
        if (IVVc_ExplodeRecepy(INr,IVrw.Quant,IVr,IVrw.Recepy,rownr)) then begin
          MatRowGet(IVr,rownr,IVrw);
          IVrw.Recepy = "";
          IVrw.BasePrice = blankval;
          MatRowPut(IVr,rownr,IVrw);
        end;
      end else begin
        IVVc_ChangeQuantityRecepy(IVrw.ArtCode,IVrw.Quant,rownr,IVr);
      end;
    end;
    if (INInvRecepyExists(INr.InvRecepy)) then begin
      Do_InvoiceRecepy(IVr,INr,rownr+1);
      IVDUpdatePrices(IVr,false);
    end;    
    BlockLoad(FreightRec);
    if (FreightRec.UseWeight!=0) then begin
      CalculateFreightWeight(IVr,true);
    end;
    if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin
      if (IVr.UpdStockFlag!=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin
          if (nonblank(defreturnlocation)) then begin
            IVrw.Location = defreturnlocation;
            MatRowPut(IVr,rownr,IVrw);
          end;
        end;
      end;
    end;
  end;
  if (IVDchrsum(IVr,rownr)) then begin
    IVDchsum(IVr,rownr);
  end;
  AddMultiBuyDiscountItems_IVVc(IVr);
  if (nonblank(INr.RvrsVATCode)) then begin
    IVPasteRvrsVATCode(IVr,false);
  end;
  IVApplyPromotions(IVr);
  return;    
end;    

global
function Boolean IVVc_PasteArtCode(var record IVVc IVr,Integer rownr,var string inwarning,var string warning,Boolean touchscreenf,var Integer sernrf)
begin
  Boolean chsum,res;
  Boolean chrsum;
  record INVc INr;
  row IVVc IVrw;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tax2code,tax2acc,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf;
  val UnitFactQuant,UnitFactPrice,Quant;
  Integer exportflag,rwcnt;
  record INVc locINr;
  Boolean dummyf,varf;
  string 255 location;
  LongInt ErrorCode;
  record TaxMatrixVc TMr;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  record AccVc Accr;
  record CUVc CUr;
  
  pritemf = true;
  MatRowGet(IVr,rownr,IVrw);  
  IVrw.Price = BlankVal;
  IVrw.vRebate = BlankVal;
  IVrw.Sum = BlankVal;
  location = IVrw.Location;
  if (blank(location)) then begin
    location = IVr.Location;
  end;
  if (touchscreenf) then begin
    if (GetFirstItem(IVrw.ArtCode,INr)) then begin
      IVrw.ArtCode = INr.Code;
    end;
  end;
  exportflag = IVr.ExportFlag;
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    exportflag = exportflag + AddPortugueseType;
  end;
  if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVr.CurncyCode,
                            IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                            IVr.LangCode,IVr.CustCat,IVr.PriceList,IVr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            exportflag,calcprice,IVr.TransDate,IVr.TransTime,IVr.CustCode,true,dummyf,IVr.PayDeal,
                            tax2code,tax2prc,IVr.Region,location,taxtemplatecode)) then begin
    IVrw.TaxTemplateCode = FillupTaxMatrix(0,IVr.BranchID,IVr.CustCode,IVr.CustCat,IVr.DelAddrCode,taxtemplatecode,TMr);
    CUr.Code = IVr.CustCode;
    ReadFirstMain(CUr,1,true);
    if (vreb==0) then begin
      vreb = blankval;
    end;
    inwarning = INr.WarnText1;
    if (!INVc_AllowSales(INr,ErrorCode)) then begin
      warning = USetStr(ErrorCode);
    end;
    IVrw.Price = price;
    IVrw.Spec = curitemname;
    IVrw.vRebate = vreb;
    if (CUr.RvrsVAT!=0) then begin
      IVrw.RvrsVATCode = INr.RvrsVATCode;
    end;
    IVrw.VATCode = vatcode;
    IVrw.BasePrice = baseprice;
    IVrw.BasePriceB2 = INr.InPriceB2;
    IVrw.SalesAcc = salesacc;
    Accr.AccNumber = IVrw.SalesAcc;
    ReadFirstMain(Accr,1,true);
    IVrw.PeriodCode = Accr.PeriodCode;
    IVrw.ArtCode = INr.Code;
    IVrw.Recepy = "";  
    IVrw.CustArtCode = CustArtCode(IVr.CustCode,IVrw.ArtCode);
    GetTaxesDiscounts(IVr.CustCode,IVr.TransDate,IVrw.VATCode,tax2code,t,tax2reb);
    if (IVr.NoTax2==0) then begin
      IVrw.TAX2Code = tax2code;
      IVrw.TAX2Prc = tax2prc;
      IVrw.TAX2Reb = tax2reb;
      IVrw.TAX2Acc = GetTax2Acc(IVrw.TAX2Code);
    end;
    if (IVr.NoTax1==0) then begin
      IVrw.TAX1Reb = t;
    end;
    if ((INr.ItemType==kItemTypeStructured) and (nonblank(INr.Recepy))) then begin
      IVrw.Recepy = INr.Recepy;
    end else begin
      IVrw.Recepy = "";
    end;
    if (nonblank(IVr.CustVATCode)) then begin
      IVrw.VATCode = IVr.CustVATCode;
    end;
//    IVrw.VATCalcRule = VATCalcRule(IVrw.VATCode);
    if (calcprice) then begin
      MatRowPut(IVr,rownr,IVrw);
      temp = -1;
      IVVcGetCalcItemPrice(INr,IVr,rownr,temp);
      MatRowGet(IVr,rownr,IVrw);
    end;
    IVrw.Objects = FindINObjects(INr.Objects,INr.Group);
    IVrw.UnitCode = INr.Unittext;
    IVrw.UnitXval = INr.Width;
    IVrw.UnitYval = INr.Height;
    IVrw.UnitZval = INr.Depth;
    IVrw.PriceFactor = INr.PriceFactor;
    IVrw.Coefficient = INr.UnitCoefficient;
    IVrw.RepaExVAT = CalcItemRepa(INr.RepaPricePerWeight,INr.Weight,IVrw.Quant,IVr.CurncyCode,
                                  IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
    IVrw.Perceptions = INr.Perceptions;
    if (nonblank(IVrw.UnitCode)) then begin
      price = IVrw.Price;
      Quant = IVrw.Quant;
      chrsum = SetUnitFactor(IVrw.UnitCode,UnitFactQuant,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,UnitFactPrice,Quant,price,IVrw.UnitComment,false);
/*      
      if (touchscreenf) then begin
        if (ReadFirstItem(IVrw.ArtCode,locINr,true,true)) then begin
          if (Quant==0) then begin
            Quant = 1;
          end;
        end;
      end;
done below      
*/      
      if (chrsum) then begin
        IVrw.UnitFactQuant = UnitFactQuant;
        IVrw.UnitFactPrice = UnitFactPrice;
        IVrw.Quant = Quant;
        IVrw.Price = price;
      end;
    end;
    t = IVrw.BasePrice;
    chsum = CostPriceForGP(IVrw.ArtCode,IVrw.SerialNr,IVr.PriceList,IVr.CustCode,t);
    IVrw.BasePrice = t;
    
//    if ((INr.ExplodeRec==0) or (blank(IVrw.Recepy))) then begin
//why
      MatRowPut(IVr,rownr,IVrw);
      MatRowGet(IVr,rownr,IVrw);
      IVMultiLineText(IVr,INr,IVr.LangCode,rownr);
//    end;
    if ((INr.ExplodeRec==0) or (blank(IVrw.Recepy))) then begin
      rwcnt = MatRowCnt(IVr);
      IVVcITMultiLineText(IVr,INr,IVr.LangCode,rwcnt+1);
    end;    
//      curitemname = IVrw.Spec;
//      if (GetItemNameStr(1,curitemname,IVr.LangCode,INr.Name,INr.Code)) then begin end;
    IVrw.Spec = curitemname;
    PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
    MatRowPut(IVr,rownr,IVrw);
    if (INr.ExplodeRec!=0 and IVrw.Quant!=blankval) then begin
      if (nonblank(IVrw.Recepy)) then begin
        if (IVVc_ExplodeRecepy(INr,IVrw.Quant,IVr,IVrw.Recepy,rownr)) then begin
          MatRowGet(IVr,rownr,IVrw);
          IVrw.Recepy = "";
          IVrw.BasePrice = blankval;
          MatRowPut(IVr,rownr,IVrw);
        end;
      end else begin
        IVVc_ChangeQuantityRecepy(IVrw.ArtCode,IVrw.Quant,rownr,IVr);
      end;
    end;
    if (INInvRecepyExists(INr.InvRecepy)) then begin//moved to qty
      Do_InvoiceRecepy(IVr,INr,rownr+1);
      IVDUpdatePrices(IVr,false);
    end;    
    chrsum = true;
    res = true;
  end else begin
    if (nonblank(IVrw.ArtCode)) then begin
      if (INr.Terminated==1) then begin
        warning = USetStr(1266) & IVrw.ArtCode;
      end else begin
        warning = USetStr(1120) & IVrw.ArtCode;
      end;
    end;
  end;
  if (touchscreenf or IsBooks) then begin
    if (IVrw.Quant==0) then begin
      if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin//should be taken from GetItemPriceDiscount3
        varf = true;
      end;
      if (varf==false) then begin
        MatRowGet(IVr,rownr,IVrw);
        IVrw.Quant = 1;
        MatRowPut(IVr,rownr,IVrw);
        IVVc_PasteQuant(IVr,rownr,true,chsum,"");
      end;
    end;
  end;
  if (chrsum) then begin
    chsum = IVDchrsum(IVr,rownr);
    if (chsum) then begin
      IVDchsum(IVr,rownr);
    end;
  end;
  sernrf = INr.SerNrf;
  AddItemWithholdingTaxesRows_IVVc(IVr,rownr,INr);
  AddMultiBuyDiscountItems_IVVc(IVr);
  if (nonblank(INr.RvrsVATCode) and IVrw.Quant>0) then begin
    IVPasteRvrsVATCode(IVr,false);
  end;
  IVApplyPromotions(IVr);
  IVSumup(IVr,true); 
  IVVc_PasteArtCode = res;
  RETURN;
END;    

global
procedure RecalculetWeightVolumeIVVc(var record IVVc IVp,Boolean readf)
BEGIN
  record INVc INr;
  row IVVc IVrw;
  Integer i,rwcnt;

  if (readf) then begin
    if (ReadFirstMain(IVp,0,true)) then begin end;  
  end;
  IVp.TotQty = blankval;
  IVp.TotVolume = blankval;
  IVp.TotWeight = blankval;
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;
        IVp.TotQty = IVp.TotQty + IVrw.Quant;
        if  (ReadFirstItem(IVrw.ArtCode,INr,false,false)) then begin
          IVp.TotVolume = IVp.TotVolume + IVrw.Quant * INr.Volume;
          IVp.TotWeight = IVp.TotWeight + IVrw.Quant * INr.Weight;
        end;
      case kInvoiceRowTypeCorrection:
        IVp.TotQty = IVp.TotQty - IVrw.Quant;
        if  (ReadFirstItem(IVrw.ArtCode,INr,false,false)) then begin
          IVp.TotVolume = IVp.TotVolume - IVrw.Quant * INr.Volume;
          IVp.TotWeight = IVp.TotWeight - IVrw.Quant * INr.Weight;
        end;
    end;
  end;
  if (IVp.TotVolume==0) then begin IVp.TotVolume = blankval; end;
  if (IVp.TotWeight==0) then begin IVp.TotWeight = blankval; end;
  RETURN;
END;    

global
procedure GetVATCodeAccounts(string vatcode,var string svatacc,var string pvatacc,
                             var string corsvatacc,var string corpvatacc)
BEGIN
  record VATCodeBlock VATRec;
  row VATCodeBlock vatrw;
  Integer i,rwcnt;

  BlockLoad(VATRec);
  svatacc = "";  
  pvatacc = "";  
  corsvatacc = "";  
  corpvatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      svatacc = vatrw.SalesVATAcc;
      pvatacc = vatrw.PurchVATAcc;
      corsvatacc = vatrw.CorSalesVATAcc;
      corpvatacc = vatrw.CorPurchVATAcc;
      i = rwcnt;
    end;  
  end;  
  RETURN;
END;

procedure AddToCorVAT(string VATCode,Array string avatcodes,Array string svataccs,Array string corsvataccs,var Integer vatcnt)
BEGIN
  Integer i;
  string 10 svatacc,pvatacc,corsvatacc,corpvatacc;
  
  GetVATCodeAccounts(VATCode,svatacc,pvatacc,corsvatacc,corpvatacc);
  for (i=0;i<=vatcnt;i=i+1) begin
    if (avatcodes[i]==VATCode) then begin
      goto LAddToCorVAT;
    end;
  end;
  svataccs[vatcnt] = svatacc;
  corsvataccs[vatcnt] = corsvatacc;
  avatcodes[vatcnt] = VATCode;
  vatcnt = vatcnt + 1;
LAddToCorVAT:;  
  RETURN;
END;

procedure CopyHeaderIVToVATIV(record IVVc IVr,var record VATIVVc VATIVr)
BEGIN
  Date blankd;

  VATIVr.CustCode = IVr.CustCode;
  VATIVr.Addr0 = IVr.Addr0;
  VATIVr.Addr1 = IVr.Addr1;
  VATIVr.Addr2 = IVr.Addr2;
  VATIVr.Addr3 = IVr.Addr3;
  VATIVr.InvAddr3 = IVr.InvAddr3;
  VATIVr.InvAddr4 = IVr.InvAddr4;
  VATIVr.OurContact = IVr.OurContact;
  VATIVr.ClientContact = IVr.ClientContact;
  VATIVr.ExportFlag = IVr.ExportFlag;
  VATIVr.CreateDate = CurrentDate;
  VATIVr.TransDate = CurrentDate;// blankd;
  VATIVr.IVPayDate = IVr.PayDate;
  VATIVr.IVInvDate = IVr.InvDate;
  VATIVr.IVServiceDelDate = IVr.ServiceDelDate;
  VATIVr.IVTransDate = IVr.TransDate;
  VATIVr.Prntdf = 0;
  VATIVr.OKFlag = 0;
  VATIVr.FiscalFlag = IVr.FiscalFlag;  
  VATIVr.InvType = IVr.InvType;
  VATIVr.IVNr = IVr.SerNr;
  VATIVr.CredInv = IVr.CredInv;
  VATIVr.Objects = IVr.Objects;
  VATIVr.InclVAT = IVr.InclVAT;
  VATIVr.NoTAXonVAT = IVr.NoTAXonVAT;
  VATIVr.TotalwoTAX = IVr.TotalwoTAX;
  VATIVr.InvComment = IVr.InvComment;
  VATIVr.SalesMan = IVr.SalesMan;
  VATIVr.SalesGroup = IVr.SalesGroup;
  VATIVr.LangCode = IVr.LangCode;
  VATIVr.Sign = "";
  VATIVr.FrPrice = IVr.FrPrice;
  VATIVr.FrBase = IVr.FrBase;
  VATIVr.FrItem = IVr.FrItem;
  VATIVr.FrVATCode = IVr.FrVATCode;
  VATIVr.FrObjects = IVr.FrObjects;
  VATIVr.FrGP = IVr.FrGP;
  VATIVr.FrGPPercent = IVr.FrGPPercent;
  VATIVr.Sum0 = IVr.Sum0;
  VATIVr.Sum1 = IVr.Sum1;
  VATIVr.Sum2 = IVr.Sum2;
  VATIVr.Sum3 = IVr.Sum3;
  VATIVr.Sum4 = IVr.Sum4;
  VATIVr.BaseSum4 = IVr.BaseSum4;
  VATIVr.DiscPerc = IVr.DiscPerc;
  VATIVr.DiscSum = IVr.DiscSum;
  VATIVr.TAX1Sum = IVr.TAX1Sum;
  VATIVr.Commision = IVr.Commision;
  VATIVr.SumIncCom = IVr.SumIncCom;
  VATIVr.VATNr = IVr.VATNr;
  VATIVr.FrSalesAcc = IVr.FrSalesAcc;
  VATIVr.CustVATCode = IVr.CustVATCode;
  VATIVr.CalcFinRef = IVr.CalcFinRef;
  VATIVr.Phone = IVr.Phone;
  VATIVr.Fax = IVr.Fax;
  VATIVr.ExportedFlag = 0;
  VATIVr.CurncyCode = IVr.CurncyCode;
  VATIVr.FrRate = IVr.FrRate;
  VATIVr.ToRateB1 = IVr.ToRateB1;
  VATIVr.ToRateB2 = IVr.ToRateB2;
  VATIVr.BaseRate1 = IVr.BaseRate1;
  VATIVr.BaseRate2 = IVr.BaseRate2;
  VATIVr.InvoiceNr = IVr.InvoiceNr;
  VATIVr.Sorting = IVr.Sorting;
  VATIVr.InvType = IVr.InvType;
  VATIVr.ORCONr = IVr.ORCONr;
  VATIVr.RvrsVAT = IVr.RvrsVAT;
  RETURN;
END;

function val GetVATIVSum(LongInt ivnr,LongInt vativnr,Integer rownr)
BEGIN
  val res;
  record VATIVVc VATIVr;
  row VATIVVc VATIVrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  
  TrHs = true;
  VATIVr.IVNr = ivnr;
  while (LoopKey("IVNr",VATIVr,1,TrHs)) begin
    if (VATIVr.IVNr!=ivnr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (VATIVr.SerNr==vativnr) then begin
        testf = false;
      end;
      if (VATIVr.Invalid!=0) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(VATIVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VATIVr,i,VATIVrw);
          if (VATIVrw.IVRow==rownr) then begin
            res = res + VATIVrw.Sum;
          end;
        end;
      end;
    end;
  end;  
LGetVATIVSum:;  
  GetVATIVSum = res;
  return;
end;

function val GetVATIVSum_CUPNr_OrderNr(LongInt OrderNr,LongInt OrdRow,LongInt CUPNr)
begin
  val res;
  Boolean TrHs,testf;
  record VATIVVc VATIVr;
  row VATIVVc VATIVrw;
  Integer i,rwcnt;

  if (CUPNr>0) then begin
    TrHs = true;
    VATIVr.CUPNr = CUPNr;
    while (LoopKey("CUPNr",VATIVr,1,TrHs)) begin
      if (VATIVr.CUPNr!=CUPNr) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        testf = true;
        if (VATIVr.Invalid!=0) then begin
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(VATIVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VATIVr,i,VATIVrw);
            if (VATIVrw.OrdRow==OrdRow) then begin
              res = res + VATIVrw.Sum;
            end;
          end;
        end;
      end;
    end; 
  end; 
  GetVATIVSum_CUPNr_OrderNr = res;
  return;
end;

function val GetVATIVSum_CUPNr(LongInt OrderNr,string artcode,LongInt CUPNr)
begin
  val res;
  Boolean TrHs,testf;
  record VATIVVc VATIVr;
  row VATIVVc VATIVrw;
  Integer i,rwcnt;

  if (CUPNr>0) then begin
    TrHs = true;
    VATIVr.CUPNr = CUPNr;
    while (LoopKey("CUPNr",VATIVr,1,TrHs)) begin
      if (VATIVr.CUPNr!=CUPNr) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        testf = true;
        if (VATIVr.Invalid!=0) then begin
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(VATIVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VATIVr,i,VATIVrw);
            if (VATIVrw.ArtCode==artcode) then begin
              res = res + VATIVrw.Sum;
            end;
          end;
        end;
      end;
    end; 
  end; 
  GetVATIVSum_CUPNr = res;
  return;
end;

function val GetVATIVSum_IP(record IVVc IVr,row IVVc curIVrw)
begin
  val res;
  Integer i,rwcnt;
  row IVVc IVrw;
  
  if (IVr.OrderNr>0) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypePrepayment:
          res = res + GetVATIVSum_CUPNr_OrderNr(IVr.OrderNr,curIVrw.OrdRow,IVrw.CUPNr);
      end;
    end;
  end else begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypePrepayment:
          res = res + GetVATIVSum_CUPNr(IVr.OrderNr,curIVrw.ArtCode,IVrw.CUPNr);
      end;
    end;
  end;
  GetVATIVSum_IP = res;
  return;
end;

global
procedure PasteIVRowToVATIV(record IVVc IVr,var record VATIVVc VATIVr,Integer rownr,var Integer vati,Integer kVATType,
                            var val sum1)
BEGIN
  row IVVc IVrw;
  row VATIVVc VATIVrw;
  Integer i,rwcnt;
  val qty,t,prepayv,rnddiff;
  record GeneralOptionBlock GOb;
  Boolean testf,negativef,calcf;
  record AccBlock ARb;
  record VATIVTBlock VATIVTb;
  
  BlockLoad(ARb);  
  BlockLoad(GOb);
  BlockLoad(VATIVTb);
  rwcnt = MatRowCnt(IVr);
  if (rownr<rwcnt) then begin
    MatRowGet(IVr,rownr,IVrw);
    negativef = false;
    sum1 = blankval;
    testf = true;
    switch (IVrw.stp) begin     
      case kInvoiceRowTypePrepayment: testf = false;
      case kInvoiceRowTypeDownpayment: 
        qty = 1;
        sum1 = IVrw.Sum;
      otherwise  
        if (IVrw.Sum<0) then begin
          negativef = true;
        end;
        sum1 = GetVATIVSum(IVr.SerNr,VATIVr.SerNr,rownr);
        if (ARb.PreIPBookVAT!=0) then begin
          sum1 = sum1 + GetVATIVSum_IP(IVr,IVrw);
        end;
        sum1 = IVrw.Sum - sum1;
        if (negativef) then begin
          if (sum1>=0) then begin
            testf = false;
          end;
        end else begin
          if (sum1<=0) then begin
            testf = false;
          end;
        end;
        if (IVrw.Sum==0) then begin
          testf = false;
        end;
    end;
    if (testf) then begin
      ClearRow(VATIVr,VATIVrw,IVrw.stp);
      VATIVrw.stp = IVrw.stp;
      VATIVrw.ArtCode = IVrw.ArtCode;
      VATIVrw.Quant = IVrw.Quant;
      VATIVrw.Spec = IVrw.Spec;
      VATIVrw.SalesAcc = IVrw.SalesAcc;
      VATIVrw.VATCode = IVrw.VATCode;
      VATIVrw.RvrsVATCode = IVrw.RvrsVATCode;
      switch (IVrw.stp) begin     
        case 5:
          VATIVrw.Sum = sum1;
        otherwise
          switch (VATIVTb.VATIVCalcWhenPrepayment) begin
            case kVATIVWhenPrepaymentCalcPrice:
              VATIVrw.Price = IVrw.Price;
            case kVATIVWhenPrepaymentCalcQuant:
              VATIVrw.Price = IVrw.Price;
            otherwise
              VATIVrw.Price = sum1/VATIVrw.Quant;
          end;
          VATIVrw.vRebate = IVrw.vRebate;      
          if (VATIVrw.vRebate>0) then begin
            VATIVrw.Price = (VATIVrw.Price*100)/(100-VATIVrw.vRebate);
          end;
          VATIVrw.PriceFactor = IVrw.PriceFactor;
          CalcSum(VATIVrw.Quant,VATIVrw.Price,VATIVrw.PriceFactor,VATIVrw.vRebate,t,GOb.UseDiscount);
          VATIVrw.Sum = Round(t,DefaultRoundMode);
          VATIVrw.FIFORowVal = IVrw.FIFORowVal;
          VATIVrw.Objects = IVrw.Objects;
          VATIVrw.CUPNr = IVrw.CUPNr;
          VATIVrw.CuAccCode = IVrw.CuAccCode;
          VATIVrw.PeriodCode = IVrw.PeriodCode;
          VATIVrw.OrdRow = IVrw.OrdRow;
      end;
      VATIVrw.IVRow = rownr;
      MatRowPut(VATIVr,vati,VATIVrw);
      vati = vati + 1;
    end;
  end else begin
    ClearRow(VATIVr,VATIVrw,1);
    MatRowPut(VATIVr,vati,VATIVrw);
  end;
  if (ARb.PostIVVATonVATCorr!=0) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypePrepayment:
          prepayv = prepayv + (IVrw.Sum - IVrw.Price);
//          prepayv = prepayv + IVrw.Sum;
      end;
    end;
    sum1 = IVr.Sum1 - prepayv;
    if (sum1>0) and (prepayv>0) then begin
      rwcnt = MatRowCnt(VATIVr);
      for (i=0;i<rwcnt;i=i+1) begin
        if (i==vati-1) then begin
          MatRowGet(VATIVr,i,VATIVrw);
          calcf = false;
          switch (VATIVTb.VATIVCalcWhenPrepayment) begin
            case kVATIVWhenPrepaymentCalcPrice:
              VATIVrw.Price = (sum1/IVr.Sum1)*VATIVrw.Sum;
              VATIVrw.Price = VATIVrw.Price/VATIVrw.Quant;
              calcf = true;
            case kVATIVWhenPrepaymentCalcQuant:
              t = (sum1/IVr.Sum1)*VATIVrw.Sum;
              VATIVrw.Quant = Round(t/VATIVrw.Price,SetRoundModeD(3));
              calcf = true;
          end;
          if (calcf) then begin
            MatRowPut(VATIVr,i,VATIVrw);
            VATIVDchrsum(VATIVr,i);
            if (VATIVrw.Price<=0) then begin
              MatRowDelete(VATIVr,i);
              rwcnt = MatRowCnt(VATIVr);
            end;
          end;
        end;
      end;
    end;
  end;
  VATIVSumup(VATIVr);
  RETURN;
END;

global
procedure PasteIVToVATIV(record IVVc IVr,var record VATIVVc VATIVr)
begin
  Integer i,rwcnt;
  Integer vati;
  record VATIVTBlock VATIVTb;
  row VATIVVc VATIVrw;
  val sum1,rnddiff;

  BlockLoad(VATIVTb);
  CopyHeaderIVToVATIV(IVr,VATIVr);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    PasteIVRowToVATIV(IVr,VATIVr,i,vati,0,sum1);
  end;
  if (VATIVr.Sum1!=sum1) then begin
    rwcnt = MatRowCnt(VATIVr);
    if (rwcnt>0) then begin
      switch (VATIVTb.VATIVCalcWhenPrepayment) begin
        case kVATIVWhenPrepaymentCalcQuant:
          rnddiff = VATIVr.Sum1 - sum1;
          MatRowGet(VATIVr,rwcnt-1,VATIVrw);
          VATIVrw.Sum = VATIVrw.Sum - rnddiff;
          VATIVrw.Quant = Round(VATIVrw.Sum/VATIVrw.Price,SetRoundModeD(3));
          MatRowPut(VATIVr,rwcnt-1,VATIVrw);
          VATIVDchrsum(VATIVr,rwcnt-1);
      end;
    end;
  end;
  VATIVSumup(VATIVr); 
  return;
end;

procedure CreateVATIV(record IVVc IVr,record VATIVVc VATIVr)
BEGIN
  RecordNew(VATIVr);
  PasteIVToVATIV(IVr,VATIVr);
  RETURN;
END;

function Integer CorrectTRVAT(var record TRVc TRr,Integer trcnt,Array string svataccs,Array string corsvataccs,Integer vatcnt,Integer mode)
BEGIN
  Integer res;
  row TRVc TRrw;
  row TRVc newTRrw;
  Integer i,vati,rcnt;
  string 255 tstr;
  Boolean addupdmarkrowf;
  
  for (vati=0;vati<vatcnt;vati=vati+1) begin
    if (blank(corsvataccs[vati])) then begin
      res = 1921;
      goto LCorrectTRVAT;
    end;
    if (GetAccName(corsvataccs[vati],tstr,60)==false) then begin
      res = 1007;
      goto LCorrectTRVAT;
    end;    
    if (mode==1) then begin//raction
      for (i=0;i<trcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);
        if (TRrw.ovst==0) then begin
        if (TRrw.AccNumber==svataccs[vati]) then begin
          TRrw.ovst = 1;
          MatRowPut(TRr,i,TRrw);
          ClearRow(TRr,newTRrw,1);
          CopyRow(TRr,TRrw,newTRrw);
          newTRrw.ovst = 0;
          newTRrw.AccNumber = corsvataccs[vati];
          if (GetAccName(newTRrw.AccNumber,tstr,60)==false) then begin
            res = 1007;
            goto LCorrectTRVAT;
          end;
          newTRrw.Comment = tstr;
          MatRowPut(TRr,trcnt+rcnt,newTRrw);
          rcnt = rcnt + 1;
          addupdmarkrowf = true;
        end;
        end;
      end;
    end;
  end;
  if (res==0) then begin
    if (addupdmarkrowf) then begin
      ClearRow(TRr,newTRrw,2);
      TRr.RegDate = CurrentDate;
      newTRrw.UpdDate = CurrentDate;
      newTRrw.Sign = CurrentUser;
      newTRrw.OldTransDate = TRr.TransDate;
      MatRowInsert(TRr,trcnt,newTRrw);
    end;
  end; 
LCorrectTRVAT:;   
  CorrectTRVAT = res;
  RETURN;
END;

global
updating function Integer UpdateTRVATIV(record IVVc IVr,var record VATIVVc VATIVr,Integer mode)
BEGIN
  record TRVc oldTRr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer res;
  Integer i,rwcnt;
  Array string 10 corsvataccs;
  Array string 10 svataccs;
  Array string 2 avatcodes;
  Integer vatcnt,err;
  
  res = 22090;
  TRr.Number = IVr.SerNr;
  TRr.IntYc = IVYc;
  if (ReadFirstMain(TRr,2,true)) then begin
    RecordCopy(oldTRr,TRr);
    rwcnt = MatRowCnt(TRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TRr,i,TRrw);
      if ((nonblank(TRrw.VATCode)) and (TRrw.ovst==0)) then begin
        AddToCorVAT(TRrw.VATCode,avatcodes,svataccs,corsvataccs,vatcnt);                
      end;
    end;
    err = CorrectTRVAT(TRr,rwcnt,svataccs,corsvataccs,vatcnt,mode);
    if (err==0) then begin
      switch (mode) begin
        case 0://specmenu
          CreateVATIV(IVr,VATIVr);
          if (MatRowCnt(VATIVr)>0) then begin
            res = 0;
          end else begin
            res = 22091;
          end;
        case 1://raction
          if (RecordUpdate(oldTRr,TRr,true)==0) then begin
            res = 0;
          end;  
        case 2://recordcheck
          res = 0;
      end;
    end else begin
//      MessageBox(0,USetStr(err));
      res = err;
    end;
  end;
  UpdateTRVATIV = res;
  RETURN;
END;

global
procedure IVVc_PasteFrPrice(var record IVVc IVp)
BEGIN
  record GeneralOptionBlock GOb;
  record FreightBlock Fb;
  val pr,t;  

  BlockLoad(GOb);
  BlockLoad(Fb);
  if (Fb.UseWeight!=0) then begin
    CalculateFreightWeight(IVp,false);
  end else begin
    IVp.FrBase = MulRateToBase1(IVp.CurncyCode,IVp.FrPrice,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    pr = 100 - IVp.FrGPPercent;
    CalcSum(1,IVp.FrBase,0,pr,t,GOb.UseDiscount);
    IVp.FrGP = t;
  end;
  IVSumup(IVp,true); 
  RETURN;
END;

global
procedure IVVc_PasteRegion(var record IVVc IVp,string oldregion)
begin 
  Integer i,rwcnt;
  row IVVc IVrw;
  val t,tax2reb,tax2prc;
  string 255 tax2code;
  record INVc INr;
     
  if (IVp.Region!=oldregion) then begin
    if (IVp.NoTax2==0) then begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (ReadFirstItem(IVrw.ArtCode,INr,true,false)) then begin
          RegionPerceptionTax(IVp.CustCode,IVp.Region,INr.EUCodex,INr.Group,tax2code,tax2prc);
          GetTaxesDiscounts(IVp.CustCode,IVp.TransDate,IVrw.VATCode,tax2code,t,tax2reb);
          IVrw.TAX2Code = tax2code;
          IVrw.TAX2Prc = tax2prc;
          IVrw.TAX2Reb = tax2reb;
          IVrw.TAX2Acc = GetTax2Acc(IVrw.TAX2Code);
          MatRowPut(IVp,i,IVrw);
        end;
      end;
      IVSumup(IVp,true); 
    end;
    AddPerceptionTaxesRows_IVVc(IVp);
  end;
  return;
end;

global
procedure IVVc_FillupTaxTemplate(var record IVVc IVp)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;
  val t,s,price,vreb,baseprice,tax2prc;
  record INVc INr;
  string 255 tstr,tax2code,location,itemtaxtemplatecode,dummystr;
  Boolean calcprice;
  Integer exportflag;
  Boolean dummyf;

  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (nonblank(IVrw.ArtCode)) then begin
      if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVp.CurncyCode,
                            IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,
                            IVp.LangCode,IVp.CustCat,IVp.PriceList,IVp.RebCode,
                            price,tstr,vreb,dummystr,baseprice,dummystr,
                            exportflag,calcprice,IVp.TransDate,IVp.TransTime,IVp.CustCode,true,dummyf,IVp.PayDeal,
                            tax2code,tax2prc,IVp.Region,location,itemtaxtemplatecode)) then begin
        IVrw.TaxTemplateCode = FillupTaxMatrix(0,IVp.BranchID,IVp.CustCode,IVp.CustCat,IVp.DelAddrCode,itemtaxtemplatecode,TMr);
        PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
        MatRowPut(IVp,i,IVrw);
        RowCalculateTaxMatrix_IVVc(IVp,i,IVrw);
        MatRowPut(IVp,i,IVrw);
        if (IVDchrsum(IVp,i)) then begin
          IVDchsum(IVp,i);
        end;
      end;
    end;
  end;     
  return;
end;

global
procedure IVVc_PasteDelAddrCode(var record IVVc IVp)
BEGIN
  string 255 name,a0,a1,a2,a3,a4,country,region,oldregion,taxtemplatecode,vatcode;
  row IVVc IVrw;
  Integer i,rwcnt;
  
  oldregion = IVp.Region;
  SetDelAddr(IVp.CustCode,IVp.DelAddrCode,name,a0,a1,a2,a3,a4,country,region,taxtemplatecode,vatcode,IVp.ExportFlag,IVp.DelRecipientGLN);
  IVp.ShipAddr0 = name;
  IVp.ShipAddr1 = a0;
  IVp.ShipAddr2 = a1;
  IVp.ShipAddr3 = a2;
  IVp.DelAddr3 = a3;
  IVp.DelAddr4 = a4;
  IVp.DelCountry = country;
  IVp.Region = region;
  if (taxtemplatecode!=IVp.CustTaxTemplateCode) then begin
    IVVc_FillupTaxTemplate(IVp);
    IVp.CustTaxTemplateCode = taxtemplatecode;
  end;
  if (vatcode!=IVp.CustVATCode) then begin
    IVp.CustVATCode = vatcode;
    if (nonblank(vatcode)) then begin
      IVp.CustVATCode = vatcode;
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        IVrw.VATCode = vatcode;
        MatRowPut(IVp,i,IVrw);
        if (IVDchrsum(IVp,i)) then begin
          IVDchsum(IVp,i);
        end;
      end;
    end else begin
      IVDUpdatePrices(IVp,false);
    end;
  end;
  IVVc_PasteRegion(IVp,oldregion);
  IVVc_PasteDelCountry(IVp,"");
  IVSumup(IVp,true)
  RETURN;
END;

function Boolean IVWarnOldRecords(Date dp,LongInt sernr)
BEGIN
  record DBLockBlock DBLockRec;
  Boolean res;
  record IVVc IVr;

  BlockLoad(DBLockRec);
  if (DBLockRec.WarnOldRecords==0) then begin goto LIVWarnOldRecords; end;
  IVr.TransDate = CurrentDate;
  if (ReadLastKey("TransDate",IVr,1,false)) then begin
    if (sernr!=IVr.SerNr) then begin
      if (dp<IVr.TransDate) then begin res = true; end;
    end;
  end;
LIVWarnOldRecords:;
  IVWarnOldRecords = res;
  RETURN;
END;

global
procedure IVVc_PasteCurncyCode(var record IVVc IVp,string oldcurncy,Integer rownr,Boolean df,Boolean newratef)
BEGIN
  val fr,to1,to2,br1,br2;
  row IVVc IVrw;
  string 10 crncy;
  record ItemSettingBlock ISb;
  Boolean testf;
  
  testf = true;
  if (df) then begin
    if ((IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) and (IVp.CredInv>0)) then begin testf = false; end;
  end;
  if (testf) then begin
    if (rownr==-1) then begin
      if (IVp.CurncyCode!=oldcurncy) or (newratef) then begin
        BlockLoad(ISb);
        SaveExchangeRate(IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,fr,to1,to2,br1,br2);
        IVGetRate(IVp);
        if ((OtherExchangeRate(IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,fr,to1,to2,br1,br2)) and (ISb.UpdCurPrWithDate!=0)) then begin 
          IVDUpdatePrices(IVp,false);
        end;
      end;
    end else begin
      MatRowGet(IVp,rownr,IVrw);
      crncy = IVrw.CurncyCode;
      GetFullCurncyRate(crncy,IVp.TransDate,fr,to1,to2,br1,br2);
      IVrw.CurncyCode = crncy;
      IVrw.FrRate = fr;
      IVrw.ToRateB1 = to1;
      IVrw.ToRateB2 = to2;
      IVrw.BaseRate1 = br1;
      IVrw.BaseRate2 = br2;  
      MatRowPut(IVp,rownr,IVrw);
      IVSumup(IVp,true)
    end;
  end;
  RETURN;
END;

global
procedure IVVc_PasteTransDate(var record IVVc IVp,var Integer err1,var Integer err2)
begin
  if (DateWarned(IVp.TransDate,"IVVc")) then begin
    err1 = 1045;
  end;
  if (IVWarnOldRecords(IVp.TransDate,IVp.SerNr)) then begin
    err2 = 2020;
  end;
  WarnFutureDate(true,IVp.TransDate);
  GetPriceList(IVp.CustCat,IVp.TransDate,IVp.TransTime,IVp.PriceList,IVp.InclVAT);
  IVVc_PasteCurncyCode(IVp,IVp.CurncyCode,-1,true,true);
  RETURN;
END;

procedure IVUpdateTax1Reb(var record IVVc IVp,Date td)
BEGIN
  row IVVc IVrw;
  Integer i,rwcnt;
  record Tax1RebVc Tax1Rebr;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    Tax1Rebr.Code = IVrw.VATCode;
    Tax1Rebr.CustCode = IVp.CustCode;
    if (ReadFirstMain(Tax1Rebr,2,true)) then begin end;
    if (td>=Tax1Rebr.From) then begin
      IVrw.TAX1Reb = Tax1Rebr.TAX1Reb;
    end;
    MatRowPut(IVp,i,IVrw);
  end;
  RETURN;
END;

global
procedure IVVc_PasteInvDate(var record IVVc IVp,record LocalMachineBlock LMb,var Integer err1,var Integer err2)
BEGIN
  Date td;
  LongInt restdays,pdays;
  record AccBlock Accb;
  record OrdSettBlock OSb;
  record IVVc tmpIVr;

  if (DateLocked(IVp.InvDate,"IVVc")) then begin
    err1 = 1046;
  end;
  if (err1==0) then begin
    if (DateWarned(IVp.InvDate,"IVVc")) then begin
      err1 = 1045;
    end;
  end;
  if (IVWarnOldRecords(IVp.InvDate,IVp.SerNr)) then begin
    err2 = 2020;
  end;
  BlockLoad(OSb);
  BlockLoad(Accb);
  if (GetPayDealType(IVp.PayDeal,pdays)==4) then begin
    IVp.pdays = pdays;
    IVp.PayDate = IVp.InvDate;
    td = IVp.InvDate;
    td = AddMonth(td,1);
    if (IVp.pdays==0) then begin td = AddMonth(td,1); end;
    td = AddDay(td,-GetDay(td)+1);
    restdays = DateDiff(td,IVp.InvDate);
    if (IVp.pdays>=0) then begin restdays = restdays -1; end;
    IVp.pdays = IVp.pdays + restdays;
    if (Accb.DueDateBasedOnServDelDate==0) then begin
      IVp.PayDate = AddDay(IVp.InvDate,IVp.pdays);
    end else begin
      IVp.PayDate = AddDay(IVp.ServiceDelDate,IVp.pdays);
    end;
  end else begin
    pdays = IVp.pdays;
    if (pdays<0) then begin pdays = 0; end;
    if (GetPayDealType(IVp.PayDeal,pdays)==6) then begin
      IVp.PayDate = FindDueDateInAccPeriod(IVp.InvDate);
      if (pdays>0) then begin
        IVp.PayDate = AddDay(IVp.PayDate,pdays);
      end;
    end else begin
      pdays = IVp.pdays;
      if (pdays<0) then begin pdays = 0; end;
      if (Accb.DueDateBasedOnServDelDate==0) then begin
        IVp.PayDate = AddDay(IVp.InvDate,pdays);
      end else begin
        IVp.PayDate = AddDay(IVp.ServiceDelDate,pdays);
      end;
    end;
  end;
  if (OSb.SetTransDateToServDelDate==0) then begin
    IVp.TransDate = IVp.InvDate;
  end else begin
    if (IVp.OrderNr<=0) then begin
      IVp.TransDate = IVp.InvDate;
    end;
  end;
  WarnFutureDate(true,IVp.InvDate);
  IVVc_PasteCurncyCode(IVp,IVp.CurncyCode,-1,true,true);
  IVUpdateTax1Reb(IVp,IVp.InvDate);
  IVSumup(IVp,true);
  if (nonblank(IVp.LoyaltyCardNr)) then begin
    IVVc_PasteLoyaltyCardNr(IVp,LMb);
  end;
  RETURN;
END;

global
procedure IVVc_PastePayDeal(var record IVVc IVp,string prevpaydeal,string defreturnlocation)
BEGIN
  string 2 pd;
  record AccBlock ARb;
  record SRBlock SRRec;
  LongInt newnr;
  row IVVc IVrw;
  Integer i,rwcnt;
  record PDSalesAccBlock PDSb;
  record PDVc PDr;
  record INVc INr;
  string 255 salesacc;
  row WHTaxBlock WHTaxrw;
  Boolean testf;
        
  BlockLoad(PDSb);
  pd = IVp.PayDeal;
  PastePDInInv(IVp,prevpaydeal,true);
  if (IVp.PayDeal!=pd) then begin
  end;
  if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
    CalculateIVCashBack(IVp);
  end else begin
    IVp.RetnValue = blankval;
  end;
  switch (IVp.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      goto LkInvoiceTypeCash;
    case kInvoiceTypeCash:
LkInvoiceTypeCash:;    
      BlockLoad(SRRec);
      newnr = SRRec.LastCashInvNr;
      if (newnr>0) then begin
        IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,false,IVp.LangCode);
      end;
      IVp.pdays = 0;
    case kInvoiceTypeCreditSpecialSales: 
      goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
      testf = true;
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypeCredit) then begin
          i = rwcnt;
          testf = false;
        end;
      end;
      if (testf) then begin
        ClearRow(IVp,IVrw,kInvoiceRowTypeCredit);
        MatRowInsert(IVp,0,IVrw);
      end;
      BlockLoad(ARb);    
      if (ARb.CredSalesAccs!=0) then begin
        PasteCreditSalesAccs(IVp);    
      end;
      IVp.DisputedFlag = ARb.SetDisputedFlagsOnCredIV;
      newnr = GetCurUserLastNr("CreditIVVc");
      if (newnr<=0) then begin
        BlockLoad(SRRec);
        newnr = SRRec.LastCredInvNr;
      end;
      if (nonblank(defreturnlocation)) then begin
        IVp.Location = defreturnlocation;
        rwcnt = MatRowCnt(IVp);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVp,i,IVrw);
          if (nonblank(IVrw.Location)) then begin
            IVrw.Location = "";
            MatRowPut(IVp,i,IVrw);
          end;
        end;
      end;
      if (newnr>0) then begin
        IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,true,IVp.LangCode);
      end;
    case kInvoiceTypeInterest:
      BlockLoad(SRRec);
      newnr = SRRec.LastIntNr;
      if (newnr>0) then begin
        IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,false,IVp.LangCode);
      end;
    otherwise
      newnr = GetCurUserLastNr("IVVc");
      if (newnr<=0) then begin
        BlockLoad(SRRec);
        newnr = SRRec.LastInvNr;
      end;
      if (newnr>0) and (IVp.SerNr<=0) then begin
        IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,true,IVp.LangCode);
      end;
  end;
  if (PDSb.UsePDSalesAcc!=0) then begin
    PDr.Code = IVp.PayDeal;
    if (GetPD(PDr)) then begin end;
    if (nonblank(PDr.pdSalesAcc)) then begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        switch (IVrw.stp) begin
          case kInvoiceRowTypeWithholdingTax:
            GetWHTaxRow(IVrw.WHTax,WHTaxrw);
            IVrw.SalesAcc = WHTaxrw.AccNumber;
            MatRowPut(IVp,i,IVrw);
          otherwise
            switch (PDSb.UsePDSalesAcc) begin
              case 1:
                ReadFirstItem(IVrw.ArtCode,INr,false,true);
                salesacc = "";
                switch (IVp.ExportFlag) begin
                  case 1:
                    salesacc = INr.EUSalesAcc;
                  case 2:
                    salesacc = INr.ExpSalesAcc;
                  case 3:
                    salesacc = INr.EUSalesAcc;
                  case 4:
                    salesacc = INr.ExpSalesAcc;
                  otherwise
                    salesacc = INr.SalesAcc;
                end;
                if (blank(salesacc)) then begin
                  IVrw.SalesAcc = PDr.pdSalesAcc;
                  MatRowPut(IVp,i,IVrw);
                end;
              case 2: 
                IVrw.SalesAcc = PDr.pdSalesAcc;
                MatRowPut(IVp,i,IVrw);
            end;
        end;
      end;
    end;
  end else begin
    if (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        switch (IVrw.stp) begin
          case kInvoiceRowTypeWithholdingTax:
            GetWHTaxRow(IVrw.WHTax,WHTaxrw);
            IVrw.SalesAcc = WHTaxrw.AccNumber;
            MatRowPut(IVp,i,IVrw);
        end;
      end;
    end;
  end;
  if (IVp.InvType!=kInvoiceTypeCredit) then begin
    rwcnt = MatRowCnt(IVp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypeCredit:
          MatRowDelete(IVp,i);
          i = i - 1;
      end;
    end;
  end;
  RETURN;
END;

global
procedure IVVc_PastePriceList(var record IVVc IVp)
BEGIN
  record PLDefVc PLDefR;
 
  PLDefR.Code = IVp.PriceList;
  if (ReadFirstMain(PLDefR,1,true)) then begin
    IVp.InclVAT = PLDefR.InclVAT;
  end;
  IVDUpdatePrices(IVp,false);
  RETURN;
END;

global
procedure IVVc_PasteRebCode(var record IVVc IVp)
begin
  IVDUpdatePrices(IVp,false);
  return;
end;

global
procedure IVVc_PastevRebate(var record IVVc IVr,Integer rownr)
begin
  row IVVc IVrw;
  record INVc INr;

  MatRowGet(IVr,rownr,IVrw);
  if (nonblank(IVrw.ArtCode)) then begin
    if (GetFirstItem(IVrw.ArtCode,INr)==false) then begin
      ReadFirstItem(IVrw.ArtCode,INr,true,false);
    end;
  end;
  if (IVrw.vRebate>100.00) then begin
    IVrw.vRebate = blankval;
    MatRowPut(IVr,rownr,IVrw);
    MessageBox(1019,"");
  end;
  switch (IVrw.stp) begin
    case kInvoiceRowTypeInterest: 
      if (IVDchrsum(IVr,rownr)) then begin
        IVDchsum(IVr,rownr);
      end;
    case kInvoiceRowTypeStructuredItemComponent:
      goto LkInvoiceRowTypeNormal2;
    case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
      if (IVDchrsum(IVr,rownr)) then begin
        IVDchsum(IVr,rownr);
      end;
    case kInvoiceRowTypeCorrection: 
      if (IVDchrsum(IVr,rownr)) then begin
        IVDchsum(IVr,rownr);
      end;
  end;
  if (nonblank(INr.RvrsVATCode)) then begin
    IVPasteRvrsVATCode(IVr,false);
  end;
  IVSumup(IVr,true);
  return;
end;

global
procedure IVVc_PasteCuAccCode(var record IVVc IVp,Integer rownr)
BEGIN
  row IVVc IVrw;
  row CuAccBlock CuAccRow;
  record CuAccVc CuAccr;

  MatRowGet(IVp,rownr,IVrw);
  CuAccr.Code = IVrw.CuAccCode;
  if (ReadFirstMain(CuAccr,1,true)) then begin  
    if (GetCuAccUseRow(CuAccr.Objects,CuAccRow)) then begin
      if (IVrw.stp==7) then begin
        IVrw.SalesAcc = CuAccRow.TopayLoanDebAcc;
      end else begin
        IVrw.SalesAcc = CuAccRow.TopayInterestAcc;
      end;
      IVrw.Objects = CuAccr.Objects;
      IVrw.VATCode = CuAccRow.VATCode;
      MatRowPut(IVp,rownr,IVrw);
    end;
  end;
  RETURN;
END;

global
function string 40 IVITDefaultRemote(string default,string curmachine)
BEGIN
  string 40 lsubset;
  record DIVc DIr;
  record RestITVc RestITr;
  row RestITVc RestITrw;
  Integer i,rwcnt;
  Boolean found;
  
  lsubset = default;
  if (nonblank(curmachine)) then begin
    RestITr.Code = curmachine;
    if (ReadFirstMain(RestITr,1,true)) then begin
      rwcnt = MatRowCnt(RestITr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RestITr,i,RestITrw);
        DIr.Code = RestITrw.ITCode;
        if (ReadFirstMain(DIr,1,true)) begin
          lsubset = DIr.Code;
          found = true;
          goto LIVITDefaultRemote;
        end;
      end;
    end;
  end;
  DIr.Code = "";
  ResetLoop(DIr);
  found = true;
  while (LoopMain(DIr,1,found)) begin
    lsubset = DIr.Code;
    goto LIVITDefaultRemote;
  end;
LIVITDefaultRemote:;
  IVITDefaultRemote = lsubset;
  RETURN;
END;
