external function string 255 CurDrawerCode(string);

updating procedure StoreCashupHist(string filename,LongInt transnr,Date td,Time tt,string lm,string drawer)
begin
  record CashupHistVc CaHr;

  CaHr.FileName = filename;
  CaHr.TransDate = td;
  CaHr.TransTime = tt;
  CaHr.LocalMachineCode = lm;
  CaHr.DrawerCode = drawer;
  CaHr.TransNr = transnr;
  CaHr.SerNr = NextSerNr("CashupHistVc",CaHr.TransDate,-1,false,"");
  RecordStore(CaHr,false);
  return;
end;

global
updating procedure POSEventUpdateCashupHist(record POSEventVc POSEp)
begin
  StoreCashupHist("POSEventVc",POSEp.SerNr,POSEp.TransDate,POSEp.TransTime,POSEp.MachineName,POSEp.Drawer);
  return;
end;

global
updating procedure CashUpdateCashupHist(record CashVc Cashp)
begin
  StoreCashupHist("CashVc",Cashp.SerNr,Cashp.TransDate,Cashp.TransTime,Cashp.MachineName,Cashp.Drawer);
  return;
end;

global
updating procedure IVCashUpdateCashupHist(record IVCashVc IVCashp)
begin
  StoreCashupHist("IVCashVc",IVCashp.SerNr,IVCashp.TransDate,IVCashp.TransTime,IVCashp.LocalMachineCode,IVCashp.DrawerCode);
  return;
end;

global
updating procedure IVUpdateCashupHist(record IVVc IVp)
begin
  StoreCashupHist("IVVc",IVp.SerNr,IVp.TransDate,IVp.TransTime,IVp.MachineName,IVp.DrawerCode);
  return;
end;

global
updating procedure RestAccUpdateCashupHist(record RestAccVc RestAccp)
begin
  StoreCashupHist("RestAccVc",RestAccp.SerNr,RestAccp.TransDate,RestAccp.TransTime,RestAccp.MachineName,RestAccp.DrawerCode);
  return;
end;

global
updating procedure IPUpdateCashupHist(record IPVc IPp)
begin
  StoreCashupHist("IPVc",IPp.SerNr,IPp.TransDate,IPp.RegTime,IPp.MachineName,IPp.DrawerCode);
  return;
end;

//POSJournalVc

global
updating procedure StorePOSJournalEntry(string user,string locmach,string drawer,string tid,Integer ac)
begin
  record POSJournalVc POSJr;

  POSJr.TransDate = CurrentDate;
  POSJr.TransTime = CurrentTime;
  POSJr.UserCode = user;
  POSJr.LocalMachineCode = locmach;
  POSJr.DrawerCode = drawer;
  if (blank(POSJr.DrawerCode)) then begin
    POSJr.DrawerCode = CurDrawerCode(locmach);
  end;
  POSJr.Action = ac;
  POSJr.TerminalID = tid;
  POSJr.SerNr = NextSerNr("POSJournalVc",POSJr.TransDate,-1,false,"");
  if (POSJr.SerNr>0) then begin
    RecordStore(POSJr,false);
  end;
  return;
end;

global
updating procedure StorePOSJournalInvoiceEntry(string user,string locmach,string drawer,string tid,string filename,LongInt transnr,Integer ac)
begin
  record POSJournalVc POSJr;

  POSJr.FileName = filename;
  POSJr.TransNr = transnr;
  POSJr.UserCode = user;
  POSJr.LocalMachineCode = locmach;
  POSJr.DrawerCode = drawer;
  if (blank(POSJr.DrawerCode)) then begin
    POSJr.DrawerCode = CurDrawerCode(locmach);
  end;
  POSJr.Action = ac;
  POSJr.TerminalID = tid;
  POSJr.TransDate = CurrentDate;
  POSJr.TransTime = CurrentTime;
  POSJr.SerNr = NextSerNr("POSJournalVc",POSJr.TransDate,-1,false,"");
  if (POSJr.SerNr>0) then begin
    RecordStore(POSJr,false);
  end;
  return;
end;

global
updating procedure StorePOSJournalItemEntry(string user,string locmach,string drawer,string tid,string filename,LongInt transnr,LongInt rownr,
                   string artcode,val q,val p,Integer ovst,Integer ac)
begin
  record POSJournalVc POSJr;
  
  POSJr.FileName = filename;
  POSJr.TransNr = transnr;
  POSJr.RowNr = rownr;
  POSJr.ArtCode = artcode;
  POSJr.Quant = q;
  POSJr.Price = p;
  POSJr.ovst = ovst;
  POSJr.UserCode = user;
  POSJr.LocalMachineCode = locmach;
  POSJr.DrawerCode = drawer;
  if (blank(POSJr.DrawerCode)) then begin
    POSJr.DrawerCode = CurDrawerCode(locmach);
  end;
  POSJr.Action = ac;
  POSJr.TransDate = CurrentDate;
  POSJr.TransTime = CurrentTime;
  POSJr.SerNr = NextSerNr("POSJournalVc",POSJr.TransDate,-1,false,"");
  if (POSJr.SerNr>0) then begin
    RecordStore(POSJr,false);
  end;
  return;
end;

global
updating procedure IVCashUpdatePOSHist(record IVCashVc IVCr,record IVCashVc IVC2r)
begin
  row IVCashVc IVCrw,IVC2rw;
  Integer i,rwcnt,i2,rwcnt2;
  
  rwcnt = MatRowCnt(IVCr);
  rwcnt2 = MatRowCnt(IVC2r);

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);
    switch (IVCrw.stp) begin
      case kInvoiceRowTypeNormal:
        if (IVCr.InvType==kPOSInvoiceTypeCredit) then begin
          IVCrw.Quant = -IVCrw.Quant;
        end;
        if (i<rwcnt2) then begin        
          MatRowGet(IVC2r,i,IVC2rw);
          if (IVC2r.InvType==kPOSInvoiceTypeCredit) then begin
            IVC2rw.Quant = -IVC2rw.Quant;
          end;
          if (IVC2rw.ArtCode!=IVCrw.ArtCode) then begin
            StorePOSJournalItemEntry(CurrentUser,IVCr.LocalMachineCode,IVCr.DrawerCode,IVCr.TerminalID,"IVCashVc",IVCr.SerNr,i,IVCrw.ArtCode,IVCrw.Quant,IVCrw.Price,IVCrw.ovst,kPOSActionDeleteInvoiceRow);
//should never happen, for "Electronic Journal" use Void Row  and not Delete Row
          end else begin
            if (IVC2rw.ovst!=IVCrw.ovst) begin
              StorePOSJournalItemEntry(CurrentUser,IVCr.LocalMachineCode,IVCr.DrawerCode,IVCr.TerminalID,"IVCashVc",IVCr.SerNr,i,IVCrw.ArtCode,IVCrw.Quant,IVCrw.Price,IVCrw.ovst,kPOSActionVoidInvoiceRow);
            end else begin
              if (IVC2rw.Price!=IVCrw.Price) then begin
                StorePOSJournalItemEntry(CurrentUser,IVCr.LocalMachineCode,IVCr.DrawerCode,IVCr.TerminalID,"IVCashVc",IVCr.SerNr,i,IVCrw.ArtCode,IVCrw.Quant,IVCrw.Price,IVCrw.ovst,kPOSActionChangeInvoiceRowPrice);
              end;
            end;
          end;
        end else begin
          StorePOSJournalItemEntry(CurrentUser,IVCr.LocalMachineCode,IVCr.DrawerCode,IVCr.TerminalID,"IVCashVc",IVCr.SerNr,i,IVCrw.ArtCode,IVCrw.Quant,IVCrw.Price,IVCrw.ovst,kPOSActionAddInvoiceRow);
        end;
    end;
  end;
  return;
end;

global
updating procedure IVCashStorePOSHist(record IVCashVc IVCr)
begin
  row IVCashVc IVCrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);
    switch (IVCrw.stp) begin
      case kInvoiceRowTypeNormal:
        StorePOSJournalItemEntry(CurrentUser,IVCr.LocalMachineCode,IVCr.DrawerCode,IVCr.TerminalID,"IVCashVc",IVCr.SerNr,i,IVCrw.ArtCode,IVCrw.Quant,IVCrw.Price,IVCrw.ovst,kPOSActionAddInvoiceRow);
    end;
  end;
  return;
end;

global
updating procedure IVCashDeletePOSHist(record IVCashVc IVCr)
begin
  row IVCashVc IVCrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVCr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCr,i,IVCrw);
    switch (IVCrw.stp) begin
      case kInvoiceRowTypeNormal:
        StorePOSJournalItemEntry(CurrentUser,IVCr.LocalMachineCode,IVCr.DrawerCode,IVCr.TerminalID,"IVCashVc",IVCr.SerNr,i,IVCrw.ArtCode,IVCrw.Quant,IVCrw.Price,IVCrw.ovst,kPOSActionDeleteInvoiceRow);
    end;
  end;
  return;
end;

global
updating procedure RestAccUpdatePOSHist(record RestAccVc RAr,record RestAccVc RA2r)
begin
  row RestAccVc RArw,RA2rw;
  Integer i,rwcnt,i2,rwcnt2;
  
  rwcnt = MatRowCnt(RAr);
  rwcnt2 = MatRowCnt(RA2r);

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RAr,i,RArw);
    switch (RArw.stp) begin
      case kInvoiceRowTypeNormal:
        if (i<rwcnt2) then begin        
          MatRowGet(RA2r,i,RA2rw);
          if (RA2rw.ArtCode!=RArw.ArtCode) then begin
            StorePOSJournalItemEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,i,RArw.ArtCode,RArw.Quant,RArw.Price,RArw.ovst,kPOSActionDeleteInvoiceRow);
//should never happen, for "Electronic Journal" use Void Row  and not Delete Row
          end else begin
            if (RA2rw.ovst!=RArw.ovst) begin
              StorePOSJournalItemEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,i,RArw.ArtCode,RArw.Quant,RArw.Price,RArw.ovst,kPOSActionVoidInvoiceRow);
            end else begin
              if (RA2rw.Price!=RArw.Price) then begin
                StorePOSJournalItemEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,i,RArw.ArtCode,RArw.Quant,RArw.Price,RArw.ovst,kPOSActionChangeInvoiceRowPrice);
              end;
            end;
          end;
        end else begin
          StorePOSJournalItemEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,i,RArw.ArtCode,RArw.Quant,RArw.Price,RArw.ovst,kPOSActionAddInvoiceRow);
        end;
    end;
  end;
  if (RAr.Closed!=0 and RA2r.Closed==0) then begin
    StorePOSJournalInvoiceEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,kPOSActionCloseBarTab);
  end;
  return;
end;

global
updating procedure RestAccStorePOSHist(record RestAccVc RAr)
begin
  row RestAccVc RArw;
  Integer i,rwcnt;
  
  StorePOSJournalInvoiceEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,kPOSActionOpenBarTab);
  rwcnt = MatRowCnt(RAr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RAr,i,RArw);
    switch (RArw.stp) begin
      case kInvoiceRowTypeNormal:
        StorePOSJournalItemEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,i,RArw.ArtCode,RArw.Quant,RArw.Price,RArw.ovst,kPOSActionAddInvoiceRow);
    end;
  end;
  if (RAr.Closed!=0) then begin
    StorePOSJournalInvoiceEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,kPOSActionCloseBarTab);
  end;
  return;
end;

global
updating procedure RestAccDeletePOSHist(record RestAccVc RAr)
begin
  row RestAccVc RArw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(RAr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RAr,i,RArw);
    switch (RArw.stp) begin
      case kInvoiceRowTypeNormal:
        StorePOSJournalItemEntry(CurrentUser,RAr.MachineName,RAr.DrawerCode,RAr.TerminalID,"RestAccVc",RAr.SerNr,i,RArw.ArtCode,RArw.Quant,RArw.Price,RArw.ovst,kPOSActionDeleteInvoiceRow);
    end;
  end;
  return;
end;

global
updating procedure CashStorePOSHist(record CashVc Cr)
begin
//  StorePOSJournalInvoiceEntry(CurrentUser,Cr.MachineName,Cr.Drawer,"","CashVc",Cr.SerNr,kPOSActionCashFloat);
  return;
end;
