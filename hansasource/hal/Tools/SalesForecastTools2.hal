external function Boolean ItemInItemGroupOrClass(string,string,string);
external function LongInt ProdPlanVcRecordCheck(var record ProdPlanVc,record ProdPlanVc,LongInt,LongInt);
external function LongInt POPlanVcRecordCheck(var record POPlanVc,record POPlanVc,LongInt,LongInt);
external function roundmode SetRoundModeD(Integer);
external procedure AddToSerArr(LongInt,var array LongInt,var Integer);
external updating procedure DeleteProdPlanComponents(record ProdPlanVc);
external procedure RecalcPOOrdDate(var record POPlanVc,Integer);
external procedure GetNewProdStart(string,string,val,val,Date,var val,var Date);
external procedure ProdPlanDClassItemCodeRemote(var record ProdPlanVc,Integer);
external procedure ProdPlanDClassSugQtyRemote(var record ProdPlanVc,Integer,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function val GetStockQty(string,string,Date,Boolean);
external function LongInt DateDiff(Date,Date);

global
procedure DebugSelection(record RcVc RepSpec)
begin
  if (RepSpec.flags[19]!=0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(16313),false);
    EndFormat;
  end;
  return;
end;

global
procedure DebugOption(record RcVc RepSpec)
begin
  if (RepSpec.flags[19]==0) then begin
    StartFormat(15);
    OutString(0,"DblDebugForecastRep",USetStr(16312),false);
    EndFormat;
  end;
  return;
end;

global
procedure CopySMArray(array record SMVc aSMr,var array record SMVc aSM2r,Integer asmcnt)
begin
  record SMVc SMr;
  Integer i;
  
  for (i=0;i<asmcnt;i=i+1) begin
    SMr = aSMr[i];
    aSM2r[i] = SMr;
  end;
  return;
end;

global
function LongInt GetStockPolicyMonths()
begin
  record SFPeriodsBlock SFPb;
  LongInt res;
  
  BlockLoad(SFPb);
  res = SFPb.Periods;  
  if (res<=0) then begin
    res = 1;
  end;
  GetStockPolicyMonths = res;
  return;
end;

global
procedure AddToSerArr(LongInt ser,var array LongInt asfsers,var Integer acnt)
begin
  asfsers[acnt] = ser;
  acnt = acnt + 1;
end;

global
function Boolean SerInArr(LongInt ser,array LongInt asfsers,Integer acnt)
begin
  Integer i;
  Boolean res;
  
  res = false;
  for (i=0;i<acnt;i=i+1) begin
    if (asfsers[i]==ser) then begin
      res = true;
      goto LSerInArr;
    end;
  end;
LSerInArr:;
  SerInArr = res;
  return;
end;

global
function val FindItemForecast(record SMVc SMr,string itemcode,Boolean qtyf,Integer rowtype)
begin
  row SMVc SMrw;
  val res;
  Integer i,rwcnt;
  
  res = 0;
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    if (SMrw.RowSimStat==rowtype) then begin
      if (SMrw.Objects==itemcode) then begin
        if (qtyf) then begin
          res = res + SMrw.DebVal;
        end else begin
          res = res + SMrw.CredVal;
        end;
      end;
    end;
  end;
  FindItemForecast = res;
  return;
end;

global
procedure PrintForecastNumbers(Date actualstartdate,array record SMVc aSMr,var Integer asmcnt,array string aitems,array Integer atype,Integer acnt,record RcVc RepSpec,Boolean printstockf,Boolean printnegf,Integer intyp,string debuginfo)
begin
  record SysFormatBlock SysFormatRec;
  record SFPeriodsBlock SFPb;
  record SMVc SMr;
  record INVc INr;
  Integer ai,i;
  Boolean foundf,testf;
  string 20 frin,toin;
  string 20 frit,toit;
  val t;
  Integer arraystartpos;

  BlockLoad(SysFormatRec);
  BlockLoad(SFPb);
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  if (RepSpec.Media==mtScreen) then begin
    if (asmcnt>8) then begin
      asmcnt = 8;
    end;
  end;
  if (printstockf) then begin
    arraystartpos = 0;
  end else begin
    arraystartpos = 1;
  end;
  if (RepSpec.flags[19]!=0) then begin
    Black_Divider(0,1);
    StartFormat(15);
    if (blank(debuginfo)) then begin
      OutString(0,0,"15. " & USetStr(17020),false);
    end else begin
      OutString(0,0,debuginfo,false);
    end;
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
    arraystartpos = 0;
  end;
  StartFormat(15);
  OutString(0,0,USetStr(16321),false);
  OutString(2,0,USetStr(16322),false);
  for (ai=arraystartpos;ai<asmcnt;ai=ai+1) begin
    SMr = aSMr[ai];
    switch (SFPb.PeriodType) begin
      case kForecastPeriodTypeMonths:
        if (printstockf and ai==0) then begin
          OutDate(((ai)*(300/asmcnt)) + 220,0,SMr.TransDate,true); // actualstartdate
        end else begin
          OutString(((ai)*(300/asmcnt)) + 220,0,DateToString(SMr.TransDate,"MM/YY"),true);
        end;
      case kForecastPeriodTypeWeeks:
        if (printstockf and ai==0) then begin
          OutDate(((ai)*(300/asmcnt)) + 220,0,SMr.TransDate,true); // actualstartdate
        end else begin
          OutString(((ai)*(300/asmcnt)) + 220,0,DateToString(SMr.TransDate,"DD/MM"),true);
        end;
    end;
  end;
  EndFormat;
  Gray_Divider(0,1);
  foundf = true;
  for (i=0;i<acnt;i=i+1) begin
    testf = true;
    if (nonblank(toin)) then begin
      if ((aitems[i]<frin) or (aitems[i]>toin)) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      testf = ItemInItemGroupOrClass(aitems[i],"",RepSpec.f2);
    end;
    if (testf) then begin
      if (atype[i]==1) then begin
        if (ReadFirstItem(aitems[i],INr,true,true)) then begin
          switch (intyp) begin
            case 1: if (nonblank(INr.Recepy)) then begin testf = false; end;
            case 2: if (blank(INr.Recepy)) then begin testf = false; end;
          end;
          if (nonblank(RepSpec.f3)) then begin
            if ((INr.Group<frit) or (INr.Group>toit)) then begin
              testf = false;
            end;
          end;
          if (testf) then begin
            StartFormat(15);
            OutString(0,0,INr.Code,false);
            OutString(2,0,INr.Name,false);
/*
            if (printstockf and arraystartpos==1) then begin
              SMr = aSMr[0];
              t = FindItemForecast(SMr,INr.Code,true,1);
              if (t<0) then begin // I want -1.55 round to -1.60
                t = Round(-t,SFPb.RoundOff);
                t = -t;
              end else begin
                t = Round(t,SFPb.RoundOff);
              end;
              OutString(3,0,t,true);
            end;
*/
            for (ai=arraystartpos;ai<asmcnt;ai=ai+1) begin
              SMr = aSMr[ai];
              t = FindItemForecast(SMr,INr.Code,true,1);
              if (t<0) then begin // I want -1.55 round to -1.60
                t = Round(-t,SetRoundModeD(SFPb.RoundOff));
                t = -t;
              end else begin
                t = Round(t,SetRoundModeD(SFPb.RoundOff));
              end;
              if (printnegf==false) then begin
                if (t<0) then begin
                  t = 0;
                end;
              end;
              OutVal(((ai)*(300/asmcnt)) + 220,0,t,M4UVal,true);
            end;
            EndFormat;
          end;
        end;
      end;
    end;
  end;
  Gray_Divider(0,1);
  return;
end;

procedure ResortPOPlan(var record POPlanVc inPOPlanr,Integer sortf)
begin
  record POPlanVc POPlanr;
  row POPlanVc POPlanrw;
  Integer theline,i,rwcnt;
  string 200 topin;
  Date orddatin,bldat;
  
  RecordCopy(POPlanr,inPOPlanr);
  rwcnt = MatRowCnt(inPOPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowDelete(inPOPlanr,0);
  end;
  rwcnt = MatRowCnt(POPlanr);
  while (rwcnt>0) begin
    topin = "";
    orddatin = bldat;
    theline = rwcnt -1;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POPlanr,i,POPlanrw);
      switch (sortf) begin
        case -1:
          if (nonblankdate(orddatin)) then begin
            if (orddatin>POPlanrw.POOrdDate) then begin
              orddatin = POPlanrw.POOrdDate;
              theline = i;
            end;
          end else begin
            orddatin = POPlanrw.POOrdDate;
            theline = i;
          end;
        case 0:
          if (nonblank(orddatin)) then begin
            if (orddatin>POPlanrw.NeededDate) then begin
              orddatin = POPlanrw.NeededDate;
              theline = i;
            end;
          end else begin
            orddatin = POPlanrw.NeededDate;
            theline = i;
          end;
        case 1:
          if (nonblank(topin)) then begin
            if (topin>POPlanrw.ItemCode) then begin
              topin = POPlanrw.ItemCode;
              theline = i;
            end;
          end else begin
            topin = POPlanrw.ItemCode;
            theline = i;
          end;
      end;
    end;
    MatRowGet(POPlanr,theline,POPlanrw);
    MatRowPut(inPOPlanr,MatRowCnt(inPOPlanr),POPlanrw);
    MatRowDelete(POPlanr,theline);
    rwcnt = MatRowCnt(POPlanr);
  end;
  return;
end;

procedure ResetOrderDate(var record POPlanVc POPlanr,LongInt bufferdays)
begin
  row POPlanVc POPlanrw;
  row POPlanVc POPlanrw2;
  Integer j,i,rwcnt;
  string 200 curitem;
  Date enddat;
  
  ResortPOPlan(POPlanr,-1);
  curitem = "";
  rwcnt = MatRowCnt(POPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POPlanr,i,POPlanrw);
    enddat = AddDay(POPlanrw.POOrdDate,bufferdays);
    for (j=i+1;j<rwcnt;j=j+1) begin
      MatRowGet(POPlanr,j,POPlanrw2);
      if (DateInRange(POPlanrw2.POOrdDate,POPlanrw.POOrdDate,enddat)) then begin
        POPlanrw2.POOrdDate = POPlanrw.POOrdDate;
        MatRowPut(POPlanr,j,POPlanrw2);
      end else begin
        i = j-1; // Means, i continues on first line that didn't pass the DateInRange
        j = rwcnt;
      end;
    end;
  end;
  return;
end;

procedure RemoveDuplItems(var record POPlanVc POPlanr)
begin
  row POPlanVc POPlanrw;
  row POPlanVc POPlanrw2;
  Integer j,i,rwcnt;
  string 200 curitem;
  
  ResortPOPlan(POPlanr,0);
  curitem = "";
  rwcnt = MatRowCnt(POPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POPlanr,i,POPlanrw);
    for (j=i+1;j<rwcnt;j=j+1) begin
      MatRowGet(POPlanr,j,POPlanrw2);
      if (POPlanrw2.ItemCode==POPlanrw.ItemCode) then begin
        MatRowDelete(POPlanr,j);
        rwcnt = rwcnt - 1;
        j = j - 1;
      end;
    end;
  end;
  return;
end;

procedure POPlanWriteItemsFromClosedArray(record RcVc RepSpec,record POPlanVc POPlanr,Array string aclosedartcode,Array LongInt aclosedsernr,LongInt aclosedcnt)
begin
  string 20 frin,toin;
  string 20 frit,toit;
  record POPlanVc closedPOPlanr;
  row POPlanVc closedPOPlanrw;
  Integer i,rwcnt;
  LongInt ai;
  Boolean testf;
  record INVc INr;
  
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  for (ai=0;ai<aclosedcnt;ai=ai+1) begin
    testf = true;
    if (nonblank(RepSpec.f1)) then begin
      if (aclosedartcode[ai]>=frin) and (aclosedartcode[ai]<=toin) then begin
        testf = false;
      end;
    end else begin
      if (nonblank(RepSpec.f3)) then begin
        if (ReadFirstItem(aclosedartcode[ai],INr,true,true)) then begin
          if ((INr.Group>=frit) and (INr.Group<=toit)) then begin
            testf = false;
          end;
        end;
      end;
    end;
    if (testf) then begin
      closedPOPlanr.SerNr = aclosedsernr[ai];
      if (ReadFirstMain(closedPOPlanr,1,true)) then begin
        if (closedPOPlanr.StartDate!=POPlanr.StartDate) then begin
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(closedPOPlanr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(closedPOPlanr,i,closedPOPlanrw);
            if (closedPOPlanrw.ItemCode==aclosedartcode[ai]) then begin
              MatRowPut(POPlanr,MatRowCnt(POPlanr),closedPOPlanrw);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

procedure ProdPlanWriteItemsFromClosedArray(record RcVc RepSpec,record ProdPlanVc ProdPlanr,Array string aclosedartcode,Array LongInt aclosedsernr,LongInt aclosedcnt)
begin
  string 20 frin,toin;
  string 20 frit,toit;
  record ProdPlanVc closedProdPlanr;
  row ProdPlanVc closedProdPlanrw;
  Integer i,rwcnt;
  LongInt ai;
  Boolean testf;
  record INVc INr;
  
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);

  for (ai=0;ai<aclosedcnt;ai=ai+1) begin
    testf = true;

    if (nonblank(RepSpec.f1)) then begin
      if (aclosedartcode[ai]>=frin) and (aclosedartcode[ai]<=toin) then begin
        testf = false;
      end;
    end else begin
      if (nonblank(RepSpec.f3)) then begin
        if (ReadFirstItem(aclosedartcode[ai],INr,true,true)) then begin
          if ((INr.Group>=frit) or (INr.Group<=toit)) then begin
            testf = false;
          end;
        end;
      end;
    end;
    if (testf) then begin
      closedProdPlanr.SerNr = aclosedsernr[ai];
      if (ReadFirstMain(closedProdPlanr,1,true)) then begin
        if (closedProdPlanr.StartDate!=ProdPlanr.StartDate) then begin
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(closedProdPlanr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(closedProdPlanr,i,closedProdPlanrw);
            if (closedProdPlanrw.ItemCode==aclosedartcode[ai]) then begin
              MatRowPut(ProdPlanr,MatRowCnt(ProdPlanr),closedProdPlanrw);
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure WriteForecastNumbers(array record SMVc aSMr,var Integer asmcnt,record RcVc RepSpec,Integer intyp,Array string aclosedartcode,Array LongInt aclosedsernr,LongInt aclosedcnt)
begin
  record SFPeriodsBlock SFPb;
  record POPlanVc oldPOPlanr;
  record POPlanVc POPlanr;    // intyp = 1
  row POPlanVc POPlanrw;    // intyp = 1
  record ProdPlanVc Prodr;// intyp = 2
  row ProdPlanVc Prodrw;// intyp = 2
  record ProdPlanVc fakeProdr;// intyp = 2
  record POPlanVc fakePOPlanr;// intyp = 1
  record SMVc SMr;
  record SMVc nextSMr;
  record INVc INr;
  array LongInt asfsers;
  Integer acnt;
  row SMVc SMrw;
  Integer ai,i,rwcnt,rownr;
  Boolean foundf,testf;
  string 20 frin,toin;
  string 20 frit,toit;
  val days;
  Date dat;
  Boolean firstf;

  BlockLoad(SFPb);
  acnt = 0;
  firstf = true;
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  for (ai=1;ai<asmcnt;ai=ai+1) begin
    SMr = aSMr[ai];
    nextSMr = aSMr[ai+1];
    switch (intyp) begin
      case 1:
        if (firstf or SFPb.OneConPOPlan==0) then begin
          RecordNew(POPlanr);
          POPlanr.StartDate = SMr.TransDate;
        end else begin
          RecordCopy(oldPOPlanr,POPlanr);
        end;
        POPlanr.EndDate = AddDay(nextSMr.TransDate,-1);
        rwcnt = MatRowCnt(SMr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMr,i,SMrw);
          testf = true;
          if (nonblank(RepSpec.f1)) then begin
            if ((SMrw.Objects<frin) or (SMrw.Objects>toin)) then begin
              testf = false;
            end;
          end;
          if (SMrw.DebVal<=0) then begin
            testf = false;
          end;
          if (testf) then begin
            if (ReadFirstItem(SMrw.Objects,INr,true,true)) then begin
              if (nonblank(INr.Recepy)) then begin
                testf = false;
              end;
            end else begin
              testf = false;
            end;
          end;
          if (testf) then begin
            if (blank(RepSpec.f1)) then begin
              if (nonblank(RepSpec.f3)) then begin
                if ((INr.Group<frit) or (INr.Group>toit)) then begin
                  testf = false;
                end;
              end;
            end;
          end;
          if (testf) then begin
            rownr = MatRowCnt(POPlanr);
            ClearRow(POPlanr,POPlanrw,1);
            POPlanrw.ItemCode = SMrw.Objects;
            POPlanrw.NeededDate = SMrw.TransDate;
            if (blankdate(POPlanrw.NeededDate)) then begin
              POPlanrw.NeededDate = POPlanr.StartDate;
            end;
            POPlanrw.Spec = INr.Name;
            POPlanrw.SugQty = Round(SMrw.DebVal,SetRoundModeD(SFPb.RoundOff));
            MatRowPut(POPlanr,rownr,POPlanrw);
            RecalcPOOrdDate(POPlanr,rownr);
          end;
        end;
        if (MatRowCnt(POPlanr)>0) then begin
          if (SerInArr(POPlanr.SerNr,asfsers,acnt)==false) then begin
            AddToSerArr(POPlanr.SerNr,asfsers,acnt);
          end;
          if (firstf or SFPb.OneConPOPlan==0) then begin
            POPlanr.SerNr = NextSerNr("POPlanVc",POPlanr.StartDate,-1,false,"");
            if (POPlanr.SerNr>0) then begin
              if (nonblank(RepSpec.f1)) or (nonblank(RepSpec.f3)) then begin
                POPlanWriteItemsFromClosedArray(RepSpec,POPlanr,aclosedartcode,aclosedsernr,aclosedcnt);
              end;
              RecordClear(fakePOPlanr);
              if (POPlanVcRecordCheck(POPlanr,fakePOPlanr,Rs_insert,-1)==0) then begin
                if (RecordStore(POPlanr,false)) then begin end;
                firstf = false;
              end;
            end;
          end else begin
            if (nonblank(RepSpec.f1)) or (nonblank(RepSpec.f3)) then begin
              POPlanWriteItemsFromClosedArray(RepSpec,POPlanr,aclosedartcode,aclosedsernr,aclosedcnt);
            end;
            if (RecordUpdate(oldPOPlanr,POPlanr,false)==0) then begin
            end;
          end;
        end;
      case 2:
        RecordNew(Prodr);
        Prodr.StartDate = SMr.TransDate;
        Prodr.EndDate = AddDay(nextSMr.TransDate,-1);
        rwcnt = MatRowCnt(SMr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SMr,i,SMrw);
          testf = true;
          if (nonblank(RepSpec.f1)) then begin
            if ((SMrw.Objects<frin) or (SMrw.Objects>toin)) then begin
              testf = false;
            end;
          end;
          if (SMrw.DebVal<=0) then begin
            testf = false;
          end;
          if (testf) then begin
            if (ReadFirstItem(SMrw.Objects,INr,true,true)) then begin
              if (blank(INr.Recepy)) then begin
                testf = false;
              end;
            end else begin
              testf = false;
            end;
          end;
          if (testf) then begin
            if (blank(RepSpec.f1)) then begin
              if (nonblank(RepSpec.f3)) then begin
                if ((INr.Group<frit) or (INr.Group>toit)) then begin
                  testf = false;
                end;
              end;
            end;
          end;
          if (testf) then begin
            rownr = MatRowCnt(Prodr);
            ClearRow(Prodr,Prodrw,1);
            Prodrw.ItemCode = SMrw.Objects;
            MatRowPut(Prodr,rownr,Prodrw);
            ProdPlanDClassItemCodeRemote(Prodr,rownr);
            MatRowGet(Prodr,rownr,Prodrw);
            Prodrw.SugQty = Round(SMrw.DebVal,SetRoundModeD(SFPb.RoundOff));
            Prodrw.SugQtyDate = CurrentDate;
//*PPSD            GetNewProdStart(INr.Code,INr.Recepy,Prodrw.SugQty,Prodrw.Qty,Prodr.EndDate,days,dat);
            GetNewProdStart(INr.Code,INr.Recepy,Prodrw.SugQty,Prodrw.Qty,Prodr.StartDate,days,dat);
            Prodrw.ProdDays = days;
            Prodrw.ProdStartDate = dat;
            Prodrw.NeededDate = AddDay(Prodrw.ProdStartDate,days);
            MatRowPut(Prodr,rownr,Prodrw);
            ProdPlanDClassSugQtyRemote(Prodr,rownr,1);
          end;
        end;
        if (MatRowCnt(Prodr)>0) then begin
          Prodr.SerNr = NextSerNr("ProdPlanVc",Prodr.StartDate,-1,false,"");
          if (Prodr.SerNr>0) then begin
            if (nonblank(RepSpec.f1)) or (nonblank(RepSpec.f3)) then begin
              ProdPlanWriteItemsFromClosedArray(RepSpec,Prodr,aclosedartcode,aclosedsernr,aclosedcnt);
            end;
            RecordClear(fakeProdr);
            if (ProdPlanVcRecordCheck(Prodr,fakeProdr,Rs_insert,-1)==0) then begin
              if (RecordStore(Prodr,false)) then begin end;
            end;
          end;
        end;
    end;
  end;
  if ((intyp==1) and ((SFPb.OneConPOPlan!=0) or (SFPb.WhatItemsToPut!=0) or (SFPb.OrderBufferDay>0))) then begin
    for (i=0;i<acnt;i=i+1) begin
      POPlanr.SerNr = asfsers[i];
      if (ReadFirstMain(POPlanr,1,true)) then begin
        RecordCopy(oldPOPlanr,POPlanr);
        if (SFPb.WhatItemsToPut==1) then begin
          RemoveDuplItems(POPlanr);
        end;
        if (SFPb.OrderBufferDay>0) then begin
          ResetOrderDate(POPlanr,SFPb.OrderBufferDay);
        end;
        ResortPOPlan(POPlanr,SFPb.SortPOPlanRow);
        if (RecordUpdate(oldPOPlanr,POPlanr,false)==0) then begin
        end;
      end;
    end;
  end;
  return;
end;

global
procedure DebugInfoSim(string info,record SMVc SMr,record RcVc debugRepSpec)
begin
  record INVc INr;
  row SMVc SMrw;
  Integer i,rwcnt;
  Boolean testf;
  string 20 frin,toin;
  
  if (debugRepSpec.flags[19]!=0) then begin
    frin = FirstInRange(debugRepSpec.f1,20);
    toin = LastInRange(debugRepSpec.f1,20);
    Black_Divider(0,1);
    StartFormat(15);
    OutString(0,0,info,false);
    OutString(480,0,SMr.TransDate,true);
    EndFormat;
    Black_Divider(0,1);
    StartFormat(15);
    EndFormat;
    rwcnt = MatRowCnt(SMr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMr,i,SMrw);
      testf = true;
      if (nonblank(toin)) then begin
        if ((SMrw.Objects<frin) or (SMrw.Objects>toin)) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = ItemInItemGroupOrClass(SMrw.Objects,debugRepSpec.f3,debugRepSpec.f2);
      end;
      if (testf) then begin
        if (ReadFirstItem(SMrw.Objects,INr,true,true)) then begin
          StartFormat(15);
          OutString(0,0,INr.Code,false);
          OutString(2,0,INr.Name,false);
          OutString(300,0,SMrw.DebVal,true);
          OutString(400,0,SMrw.CredVal,true);
          EndFormat;
        end;
      end;
    end;
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure InsertItemInArray(var array string aitems,var array Integer atype,var Integer acnt,string item,Integer rowtype)
begin
  integer i;
  
  for (i=acnt;i>0;i=i-1) begin
    if (aitems[i-1]>item) then begin
      aitems[i] = aitems[i-1];
      atype[i] = atype[i-1];
    end else begin
      aitems[i] = item;
      atype[i] = rowtype;
      goto LInsertItemInArray;
    end;  
  end;
  aitems[0] = item;
  atype[0] = rowtype;
LInsertItemInArray:;
  acnt = acnt +1;
  return;
end;

global
procedure FillItemsArray(record SMVc SMr,var array string aitems,var array Integer atype,var Integer acnt)
begin
  row SMVc SMrw;
  Integer ai,i,rwcnt;
  Boolean addedf;
  
  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    addedf = false;
    for (ai=0;ai<acnt;ai=ai+1) begin
      if (aitems[ai]==SMrw.Objects and atype[ai]==SMrw.RowSimStat) then begin
        addedf = true;
        ai = acnt;
      end else begin
        if (aitems[ai]>SMrw.Objects) then begin
          InsertItemInArray(aitems,atype,acnt,SMrw.Objects,SMrw.RowSimStat);
          addedf = true;
          ai = acnt;
        end;
      end;
    end;
    if (addedf==false) then begin
      aitems[acnt] = SMrw.Objects;
      atype[acnt] = SMrw.RowSimStat;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
procedure BuildTheItemArray(array record SMVc aSMr,Integer asmcnt,var array string aitems,var array Integer atype,var Integer acnt)
begin
  record SMVc SMr;
  Integer i;
  
  for (i=0;i<asmcnt;i=i+1) begin
    SMr = aSMr[i];
    FillItemsArray(SMr,aitems,atype,acnt);
  end;
  return;
end;

global
procedure DebugInfoArray(string info,array record SMVc aSMr,Integer asmcnt,Date actualstartdate,record RcVc debugRepSpec)
begin
  array string 20 aitems;
  array Integer atype;
  Integer acnt;
  Integer i;
  
  if (debugRepSpec.flags[19]!=0) then begin
    BuildTheItemArray(aSMr,asmcnt,aitems,atype,acnt);
    PrintForecastNumbers(actualstartdate,aSMr,asmcnt,aitems,atype,acnt,debugRepSpec,false,true,debugRepSpec.flags[4],info)
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

procedure AddClosedRecordsToItemArray(LongInt sernr,string artcode,Array string aclosedartcode,Array LongInt aclosedsernr,var LongInt aclosedcnt)
begin
  LongInt ai;
  
  for (ai=0;ai<aclosedcnt;ai=ai+1) begin
    if (artcode==aclosedartcode[ai]) and (sernr==aclosedsernr[ai]) then begin
      goto LAddClosedRecordsToItemArray;
    end;
  end;
  aclosedartcode[aclosedcnt] = artcode;
  aclosedsernr[aclosedcnt] = sernr;
  aclosedcnt = aclosedcnt + 1;
LAddClosedRecordsToItemArray:;
  return;
end;

global
updating procedure CloseExistingPOPlans(record RcVc RepSpec,Boolean fillclosedf,Array string aclosedartcode,Array LongInt aclosedsernr,var LongInt aclosedcnt)
begin
  record POPlanVc POPlanr;
  record POPlanVc oldPOPlanr;
  Boolean foundf;
  row POPlanVc POPlanrw;
  Integer i,rwcnt;
  Boolean testf;
  Date frdat,todat;
  string 20 frin,toin;
  string 20 frit,toit;
  record INVc INr;
  
  frdat = RepSpec.sStartDate;
  todat = RepSpec.sEndDate;
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  foundf = true;
  POPlanr.StartDate = frdat;
  while (LoopKey("StartDate",POPlanr,1,foundf)) begin // No check for EndDate, but it should be no problem
    if (POPlanr.StartDate>todat) then begin 
      foundf = false;
    end;
    if (foundf) then begin
      testf = true;
      if (POPlanr.Closed!=0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(POPlanr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(POPlanr,i,POPlanrw);
          if (POPlanrw.PONr>0) then begin
            i = rwcnt;
            testf = false;
          end;                      
        end;
      end;      
      if (testf) then begin
        if (nonblank(RepSpec.f1)) or (nonblank(RepSpec.f3)) then begin
          testf = false;
          rwcnt = MatRowCnt(POPlanr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(POPlanr,i,POPlanrw);
            if (blank(RepSpec.f1)) then begin
              if (nonblank(RepSpec.f3)) then begin
                if (ReadFirstItem(POPlanrw.ItemCode,INr,true,true)) then begin
                  if ((INr.Group>=frit) and (INr.Group<=toit)) then begin
                    testf = true;
                    i = rwcnt;
                  end;
                end;
              end;
            end else begin
              if ((POPlanrw.ItemCode>=frin) and (POPlanrw.ItemCode<=toin)) then begin
                testf = true;
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        RecordCopy(oldPOPlanr,POPlanr);
        if (fillclosedf) then begin
          rwcnt = MatRowCnt(POPlanr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(POPlanr,i,POPlanrw);
            AddClosedRecordsToItemArray(POPlanr.SerNr,POPlanrw.ItemCode,aclosedartcode,aclosedsernr,aclosedcnt);
          end;
        end;
        POPlanr.Closed = 1;
        if (RecordUpdate(oldPOPlanr,POPlanr,false)==0) then begin
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure CloseExistingProdPlans(record RcVc RepSpec,Boolean fillclosedf,Array string aclosedartcode,Array LongInt aclosedsernr,var LongInt aclosedcnt)
begin
  record ProdPlanVc ProdPlanr;
  record ProdPlanVc oldProdPlanr;
  Boolean foundf;
  Integer i,rwcnt;
  row ProdPlanVc ProdPlanrw;
  Boolean testf;
  Date frdat,todat;
  string 20 frin,toin;
  string 20 frit,toit;
  record INVc INr;
  
  frdat = RepSpec.sStartDate;
  todat = RepSpec.sEndDate;
  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  frit = FirstInRange(RepSpec.f3,20);
  toit = LastInRange(RepSpec.f3,20);
  foundf = true;
  ProdPlanr.StartDate = frdat;
  while (LoopKey("StartDate",ProdPlanr,1,foundf)) begin // No check for EndDate, but it should be no problem
    if (ProdPlanr.StartDate>todat) then begin 
      foundf = false;
    end;
    if (foundf) then begin
      testf = true;
      if (ProdPlanr.Closed!=0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(ProdPlanr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(ProdPlanr,i,ProdPlanrw);
          if (ProdPlanrw.ProdOrder>0) then begin
            i = rwcnt;
            testf = false;
          end;
        end;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f1)) or (nonblank(RepSpec.f3)) then begin
          testf = false;
          rwcnt = MatRowCnt(ProdPlanr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(ProdPlanr,i,ProdPlanrw);
            if (ProdPlanrw.stp!=kProdPlanRowTypeSubrecipe) then begin
            if (blank(RepSpec.f1)) then begin
              if (nonblank(RepSpec.f3)) then begin
                if (ReadFirstItem(ProdPlanrw.ItemCode,INr,true,true)) then begin
                  if ((INr.Group>=frit) and (INr.Group<=toit)) then begin
                    testf = true;
                    i = rwcnt;
                  end;
                end;
              end;
            end else begin
              if ((ProdPlanrw.ItemCode>=frin) and (ProdPlanrw.ItemCode<=toin)) then begin
                testf = true;
                i = rwcnt;
              end;
            end;
            end;
          end;
        end;
      end;
      if (testf) then begin
        RecordCopy(oldProdPlanr,ProdPlanr);
        if (fillclosedf) then begin
          rwcnt = MatRowCnt(ProdPlanr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(ProdPlanr,i,ProdPlanrw);
            AddClosedRecordsToItemArray(ProdPlanr.SerNr,ProdPlanrw.ItemCode,aclosedartcode,aclosedsernr,aclosedcnt);
          end;
        end;
        ProdPlanr.Closed = 1;
        if (RecordUpdate(oldProdPlanr,ProdPlanr,false)==0) then begin
        end;
        DeleteProdPlanComponents(ProdPlanr);
      end;
    end;
  end;
  return;
end;

function val DefaultNumberOfDays_TypeWeeks(Date frdat,Date todat)
begin
  val res,t;
  Date ld,temp;
  
  res = 0;
  ld = frdat;
  if (GetDateId(ld)!=1) then begin
    t = 5 - GetDateId(ld) + 1;
    res = res + t;
    ld = AddDay(ld,-GetDateId(ld)+7);// First of next week
  end;
  while (ld<=todat) begin
    temp = AddDay(ld,6);
    if (temp>todat) then begin
      t = 5 - DateDiff(todat,ld) + 1;
      res = res + t;
    end else begin
      res = res + 5.00;
    end;
    ld = AddDay(ld,7);
  end;
  DefaultNumberOfDays_TypeWeeks = res;
  return;
end;

function Boolean FIndSFBHoll(string class,Date td,Integer type,var record SFBHollVc SFBHr,var vector Boolean bhdv)
begin
  Boolean res;
  string 255 index;
  Integer segs;
  row SFBHollVc SFBHrw;
  Integer i,rwcnt;

  res = false;
  index = "YearCode";
  segs = 2;
  if (nonblank(class)) then begin
    index = "ClassYearCode";
    segs = 2;
  end;
  SFBHr.YearCode = td.year;
  SFBHr.Type = type;
  if (ReadFirstKey(index,SFBHr,segs,true)==false) then begin
    goto LFIndSFBHoll;
  end;
  rwcnt = MatRowCnt(SFBHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SFBHr,i,SFBHrw);
    bhdv[SFBHrw.FreeDay] = true;
  end; 
  res = true;
LFIndSFBHoll:;  
  if (nonblank(class)) then begin
    res = FIndSFBHoll("",td,type,SFBHr,bhdv);
  end;
  FIndSFBHoll = res;   
  return;
end;

global
function val SFNumberOfDays_TypeWeeks(string class,Integer type,Date frdat,Date todat)
begin
  val res,t;
  Date ld,temp;
  record SFBHollVc SFBHr;
  vector Boolean bhdv;

  if (CountRecords("SFBHollVc")==0) then begin
    res = DefaultNumberOfDays_TypeWeeks(frdat,todat);
  end else begin
    if (FIndSFBHoll(class,ld,type,SFBHr,bhdv)==false) then begin
      res = DefaultNumberOfDays_TypeWeeks(frdat,todat);
      goto LSFNumberOfDays_TypeWeeks;
    end;

    ld = frdat;
    while (ld<=todat) begin
      switch (GetDateId(ld)) begin
        case 1: if (SFBHr.Monday==0) and (bhdv[ld]==false) then begin res = res + 1; end;          
        case 2: if (SFBHr.Tuesday==0) and (bhdv[ld]==false) then begin res = res + 1; end;
        case 3: if (SFBHr.Wednesday==0) and (bhdv[ld]==false) then begin res = res + 1; end;
        case 4: if (SFBHr.Thursday==0) and (bhdv[ld]==false) then begin res = res + 1; end;
        case 5: if (SFBHr.Friday==0) and (bhdv[ld]==false) then begin res = res + 1; end;
        case 6: if (SFBHr.Saturday==0) and (bhdv[ld]==false) then begin res = res + 1; end;
        case 7: if (SFBHr.Sunday==0) and (bhdv[ld]==false) then begin res = res + 1; end;
      end;
      temp = ld;
      ld = AddDay(ld,1);
      if (temp.year!=ld.year) then begin
        if (FIndSFBHoll(class,ld,type,SFBHr,bhdv)==false) then begin
          res = DefaultNumberOfDays_TypeWeeks(frdat,todat);
          goto LSFNumberOfDays_TypeWeeks;
        end;
      end;
    end;
  end;
LSFNumberOfDays_TypeWeeks:;  
  SFNumberOfDays_TypeWeeks = res;
  return;
end;

function val AddPOs(string incode,Date frdat,Date todat)
begin
  record POVc POr;
  record ItemHistVc IHr;
  Boolean foundf,testf;
  val res;
  
  res = 0;
  IHr.ArtCode = incode;
  IHr.TransDate = frdat;
  IHr.FileName = "Fut1POVc";
  foundf = true;
  ResetLoop(IHr);
  while (LoopKey("FutArtFile",IHr,3,foundf)) begin
    if (IHr.ArtCode!=incode) then begin foundf = false; end;
    if (IHr.TransDate>todat) then begin foundf = false; end;
    if (IHr.FileName!="Fut1POVc") then begin foundf = false; end;
    testf = foundf;
    if (testf) then begin
      POr.SerNr = IHr.TransNr;
      if (ReadFirstMain(POr,1,true)) then begin
        if (POr.Closed!=0) then begin
          testf = false;
        end;
      end;
    end;
    if (testf) then begin
      res = res + IHr.Qty;
    end;
  end;
  AddPOs = res;
  return;
end;

global
procedure AddExistingPOs(array record SMVc aSMr,Integer asmcnt,record RcVc debugRepSpec)
begin
  record SMVc SMr;
  record SMVc SM2r;
  row SMVc SMrw;
  LongInt months;
  Integer i,j;
  Integer si,srwcnt;
  val workdays;
  Boolean maxf;
  Date sd,ed;
  
  for (i=0;i<asmcnt;i=i+1) begin
    SMr = aSMr[i];
    SM2r = aSMr[i+1];
    sd = SMr.TransDate;
    ed = AddDay(SM2r.TransDate,-1);
    srwcnt = MatRowCnt(SMr);
    for (si=0;si<srwcnt;si=si+1) begin
      MatRowGet(SMr,si,SMrw);
      SMrw.DebVal = SMrw.DebVal - AddPOs(SMrw.Objects,sd,ed);
      MatRowPut(SMr,si,SMrw);
      aSMr[i] = SMr;
    end;
  end;
  DebugInfoArray(USetStr(17023),aSMr,asmcnt,debugRepSpec.sStartDate,debugRepSpec);
  return;
end;
