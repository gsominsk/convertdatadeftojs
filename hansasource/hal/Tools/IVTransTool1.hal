external procedure GetARPrepaymentRate(LongInt,var val,var val,var val,var val,var val);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure GetVATRowFromBlock(string,record VATCodeBlock,var row VATCodeBlock);
external function Boolean NegativeAmountsOnIVTrans(Integer,val);
external procedure GetVATRow(string,var row VATCodeBlock);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external function Integer VATType(string);
external procedure SetupVATBase(var record SMVc,var Integer);
external function Integer VIVc_PostRowVAT(record TRVc,record APAccBlock,record RoundBlock,
                         record VIVc,row VIVc,Boolean,Boolean,
                         val,val,val,val,val,var val,var val,var string,val);
external function Boolean GetAccNamVAT(string,var string,var string,Integer);
external procedure IPGetVATCodeTAX1AccNumbers(record VATCodeBlock,string,var string,var string);
external function Boolean CheckTTRPerRow(string,string,string,Boolean,var string,Integer);
external function val FindTAX2(val,val,Integer);
external function string 20 GetTax2Acc(string);
external function string 5 AddVATCodeToVATAccRows(string);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure GetVATCodeAccNumbers(string,var string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroCurncyTrRow(record TRVc,string,string,string,string,val,Boolean,Boolean,var val,string,val,val,val,val,val,val,val,LongInt,Boolean,string);
external function Integer GetAccNamCurVAT(string,var string,var string,Integer,string);
external procedure ConvertSalesAcc(var string,Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetVATCodeSalesVatAcc(string,var string);

procedure FindIPCurncyRate(LongInt prepnr,var val from,var val to1,var Date tdp)// we need BankCurncy in ARPayView and ARPayHistView
BEGIN
  record ARPayHistVc ARPayHistr;
  record BaseCurBlock bcur;
  record IPVc IPr;
  
  BlockLoad(bcur);
  ARPayHistr.FileName = "IPVc";
  ARPayHistr.CUPNr = prepnr;
  if (ReadFirstMain(ARPayHistr,2,true)) then begin
    if (((blank(ARPayHistr.BankCurncy)) or (ARPayHistr.BankCurncy==bcur.BaseCur1)) and (ARPayHistr.CurncyCode!=ARPayHistr.BankCurncy)) then begin
      to1 = ARPayHistr.BookVal/ARPayHistr.Val;//what if rate to base curncy 2
      from = 1;
      tdp = ARPayHistr.TransDate;
    end;
  end;  
  RETURN;
END;     

global     
function Boolean CheckVATLaws()
BEGIN  
  Boolean res;
    
  if (HasLocalization("EST,LIT,LVA,RUS,")==false) then begin
    res = true;
  end;      
  CheckVATLaws = res;
  RETURN;
END;

global
procedure GetVATCodePrelVATAcc(string vatcode,var string vatacc)
BEGIN
  record VATCodeBlock VATRec;
  row VATCodeBlock vatrw;
  Integer i,rwcnt;

  BlockLoad(VATRec);  
  vatacc = "";  
  rwcnt = MatRowCnt(VATRec);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VATRec,i,vatrw);
    if (vatrw.VATCode==vatcode) then begin 
      vatacc = vatrw.PaySalesVATAcc;
      i = rwcnt;
    end;  
  end;  
  return;
end;

global
function Integer AddIVPrePayRow(var record TRVc gTRp,record IVVC IVp,Integer rownr,string object,val ivfrrate,val ivtorate1,val ivtorate2,
                                val ivbaserate1,val ivbaserate2,Boolean dc1,Boolean dc2,var string tstr,var val TotSum,
                                record SMVc VATr,Integer vatcnt,record TRGenBlock TRGenRec,record AccBlock ARAccb)
begin
  record CUVc CUr;
  record CCatVc CCatr;
  record INVc INr;
  record ARPayVc ARPayr;
  record RoundBlock RBr;
  val trev,tvat,btvat,t1,rs;
  row IVVc IVrw;
  string 255 objstr,vatobjstr,taccnumber,psvatacc,tax1acc;
  Boolean infound,foundarp,cuf;
  Integer errstrno;
  string 2 vatcod;
  string 10 vatacc,revacc;
  string 255 tstr2;
  val baseprep,diff,bookrs,coff;
  val pfr,pto1,pto2,pbr1,pbr2;
  val bfrrate,btorate1,btorate2,bbaserate1,bbaserate2;
  Integer gain;
  val nilv;
  Date td,bd;
  Integer err;
  record VATCodeBlock VATCodeb;
  record CYBlock CYb;
  record IVTBlock IVTb;
  record BaseCurBlock BCb;
  Integer IPBookVAT;

  BlockLoad(CYb);
  BlockLoad(VATCodeb);
  BlockLoad(IVTb);
  BlockLoad(BCb);
  nilv = -1;
  errstrno = 1085; // Transaction could not be generated 
  MatRowGet(IVp,rownr,IVrw);
  revacc = IVrw.SalesAcc;
  CUr.Code = IVp.CustCode; 
  cuf = ReadFirstMain(CUr,1,true);
  if (HasLocalization("POL")) then begin
    IPBookVAT = IVp.IPBookVAT;
  end else begin
    switch (CUr.IPBookVAT) begin
      case 1:
        IPBookVAT = 1;
      case 2:
        IPBookVAT = 0;
      otherwise
        IPBookVAT = ARAccb.IPBookVAT;
    end;
  end;
  if (blank(revacc)) then begin
    if (cuf) then begin
      CCatr.Code = CUr.CustCat;
      if (ReadFirstMain(CCatr,1,true)) then begin
        revacc = CCatr.OnAccAcc;
      end;
    end;
  end;
  if (blank(revacc)) then begin
    revacc = ARAccb.OnAccAcc;
  end;  
  vatcod = IVrw.VATCode;
  if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
    ARPayr.CUPNr = IVrw.CUPNr;
    foundarp = ReadFirstMain(ARPayr,1,true);
    GetVATCodeSalesVatAcc(vatcod,vatacc);
    trev = IVrw.Sum;
    MulVATIV(vatcod,trev,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);
    AddVATBase(VATr,vatcod,IVrw.Sum,blankval,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
    objstr = object;
//    GetFullCurncyRate(ARPayr.CurncyCode,ARPayr.PayDate,pfr,pto1,pto2,pbr1,pbr2);
    GetARPrepaymentRate(IVrw.CUPNr,pfr,pto1,pto2,pbr1,pbr2);
    if (CheckVATLaws) then begin
      FindIPCurncyRate(ARPayr.CUPNr,pfr,pto1,td);
    end; 
    baseprep = IVrw.BasePrice;//MulBaseRate(ARPayr.CurncyCode,&trev,&pfr,&pto1,&pto2,&pbr1,&pbr2,&baseprep,NIL,DefaultCurRoundOff);
    if (baseprep==0) then begin
      baseprep = MulRateToBase1(IVp.CurncyCode,trev,pfr,pto1,pto2,pbr1,pbr2,DefaultCurRoundOff);
    end;
    switch (IVTb.IVFromORRate) begin
      case kIVRateFromPrepaymentandInvoice:
        rs = IVrw.BasePrice;
        if (rs==0) then begin
          rs = MulRateToBase1(IVp.CurncyCode,trev,pfr,pto1,pto2,pbr1,pbr2,DefaultCurRoundOff);
        end;
        bfrrate = pfr;
        btorate1 = pto1;
        btorate2 = pto2;
        bbaserate1 = pbr1;
        bbaserate2 = pbr2;
      case kIVRateFromPrepayment:
        rs = IVrw.BasePrice;
        if (rs==0) then begin
          rs = MulRateToBase1(IVp.CurncyCode,trev,pfr,pto1,pto2,pbr1,pbr2,DefaultCurRoundOff);
        end;
        bfrrate = pfr;
        btorate1 = pto1;
        btorate2 = pto2;
        bbaserate1 = pbr1;
        bbaserate2 = pbr2;
      otherwise
        rs = MulRateToBase1(IVp.CurncyCode,trev,ivfrrate,ivtorate1,ivtorate2,ivbaserate1,ivbaserate2,DefaultCurRoundOff);
        bfrrate = ivfrrate;
        btorate1 = ivtorate1;
        btorate2 = ivtorate2;
        bbaserate1 = ivbaserate1;
        bbaserate2 = ivbaserate2;
    end;    
    diff = rs - baseprep;
    if (diff<0) then begin gain = -1; end;
    if (diff>0) then begin gain = 1; end;
    ConvertSalesAcc(revacc,IVp.ExportFlag);
    if (gain!=-1) then begin//tofollow corsp rules
      err = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,59,IVp.CurncyCode);
      
      tstr = tstr & " "; // To get a different comment 
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,objstr,dc1,taccnumber,0)) then begin end;
      if (IVp.ARonTR!=0) then begin
         AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,objstr,vatcod,tstr,rs,blankval,false,dc1,TotSum,
                                 IVp.CurncyCode,bfrrate,btorate1,btorate2,bbaserate1,bbaserate2,trev,nilv,
                                 IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end else begin
        AddEuroCurncyTrRow(gTRp,IVp.ARAcc,objstr,vatcod,tstr,rs,false,dc1,TotSum,IVp.CurncyCode,
                 bfrrate,btorate1,btorate2,bbaserate1,bbaserate2,trev,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
      end;
    end;
    if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
  // make sure it is not needed to have a sales account on every row, only those that contain a sum 
      if (baseprep!=0) then begin
        errstrno = GetAccNamCurVAT(revacc,tstr,tstr2,60,IVp.CurncyCode);
        if (errstrno!=0) then begin
          errstrno = 1901;
          goto LAddIVPrePayRow;
        end;
        if (CheckTTRPerRow("IVVc",revacc,objstr,dc2,taccnumber,0)) then begin end;
        if (IVp.ARonTR!=0) then begin
           AddEuroCurncyNomARTrRow(gTRp,revacc,objstr,vatcod,tstr,baseprep,blankval,false,dc2,TotSum,
                                   ARPayr.CurncyCode,pfr,pto1,pto2,pbr1,pbr2,trev,nilv,
                                   IVp.CustCode,IVp.SerNr,1,nilv,IVp.PayDate,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
        end else begin
          AddEuroCurncyTrRow(gTRp,revacc,objstr,vatcod,tstr,baseprep,false,dc2,TotSum,ARPayr.CurncyCode,
                         pfr,pto1,pto2,pbr1,pbr2,trev,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
        end;

      end;
      btvat = MulRateToBase1(IVp.CurncyCode,tvat,ivfrrate,ivtorate1,ivtorate2,ivbaserate1,ivbaserate2,DefaultCurRoundOff);
      if ((IVp.InclVAT>0) and (ARAccb.RevInclVAT!=0)) then begin
        if (btvat!=0) then begin
          errstrno = GetAccNamCurVAT(ARAccb.VATBAcc,tstr,tstr2,60,IVp.CurncyCode);
          if (errstrno!=0) then begin
            errstrno = 1903;
            goto LAddIVPrePayRow;
          end;
          if (CheckTTRPerRow("IVVc",ARAccb.VATBAcc,"",dc1,taccnumber,0)) then begin end;
          AddEuroCurncyTrRow(gTRp,ARAccb.VATBAcc,"",AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,btvat,false,dc1,TotSum,//vataccadd?
                             IVp.CurncyCode,ivfrrate,ivtorate1,ivtorate2,ivbaserate1,ivbaserate2,tvat,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
        end;
      end;
    end else begin
      if (baseprep!=0) then begin
        errstrno = GetAccNamCurVAT(revacc,tstr,tstr2,60,IVp.CurncyCode);
        if (errstrno!=0) then begin
          errstrno = 1901;
          goto LAddIVPrePayRow;
        end;
        if (CheckTTRPerRow("IVVc",revacc,objstr,dc1,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,revacc,objstr,vatcod,tstr,baseprep,false,dc2,TotSum,ARPayr.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,trev,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
      end;
    end;
    if (gain==-1) then begin//tofollow corsp rules
      err = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,59,IVp.CurncyCode);
      tstr = tstr & " "; // To get a different comment 
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,objstr,dc1,taccnumber,0)) then begin end;
      AddEuroCurncyTrRow(gTRp,IVp.ARAcc,objstr,vatcod,tstr,rs,false,dc1,TotSum,IVp.CurncyCode,
                         ivfrrate,ivtorate1,ivtorate2,ivbaserate1,ivbaserate2,trev,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
    end;
    if (gain==-1) then begin
      if (GetAccName(ARAccb.RateGainAcc,tstr,60)==false) then begin
        errstrno = 1918;
        goto LAddIVPrePayRow;
      end;
      if (IVp.CurncyCode==BCb.BaseCur2) then begin
        AddEuroCurncyNomARTrRow(gTRp,ARAccb.RateGainAcc,"","",tstr,diff,0,true,dc2,TotSum,
            "",blankval,blankval,blankval,ivbaserate1,ivbaserate2,blankval,blankval,
            "",-1,0,blankval,bd,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end else begin
        AddEuroTrRow(gTRp,ARAccb.RateGainAcc,"","",tstr,diff,ivbaserate1,ivbaserate2,false,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end;
    end;
    if (gain==1) then begin
      if (GetAccName(ARAccb.RateLossAcc,tstr,60)==false) then begin
        errstrno = 1917;
        goto LAddIVPrePayRow;
      end;
      if (IVp.CurncyCode==BCb.BaseCur2) then begin
        AddEuroCurncyNomARTrRow(gTRp,ARAccb.RateLossAcc,"","",tstr,diff,0,true,dc2,TotSum,
            "",blankval,blankval,blankval,ivbaserate1,ivbaserate2,blankval,blankval,
            "",-1,0,blankval,bd,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end else begin
        AddEuroTrRow(gTRp,ARAccb.RateLossAcc,"","",tstr,diff,ivbaserate1,ivbaserate2,false,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end;
    end;
    if (ARPayr.VATVal!=0) then begin
      vatobjstr = ""; 
      if (ARAccb.VATUseObj!=0) then begin
        vatobjstr = IVp.Objects;
      end;    
      rs = ARPayr.VATVal;
      bookrs = ARPayr.VATBookVal;
      if (trev<ARPayr.RVal) then begin
        coff = trev/ARPayr.RVal;
        BlockLoad(RBr);
        rs = Round(ARPayr.VATVal*coff,GetVATRoundMode(RBr));
        bookrs = Round(ARPayr.VATBookVal*coff,GetVATRoundMode(RBr));
      end;
      if ((IPBookVAT==0) and (ARAccb.PreIPBookVAT!=0)) or
         ((IPBookVAT!=0) and (ARAccb.PreIPBookVAT!=0)) then begin
        if (GetAccName(ARAccb.OnAccVATAcc,tstr,60)==false) then begin 
          errstrno = 2137;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",ARAccb.OnAccVATAcc,vatobjstr,dc1,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,ARAccb.OnAccVATAcc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,false,dc1,TotSum,IVp.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);

        GetVATCodeSalesVatAcc(ARPayr.VATCode,vatacc);            
        if (GetAccName(vatacc,tstr,60)==false) then begin 
          errstrno = 1903;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",vatacc,vatobjstr,dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,pbr1,pbr2,CYb.TRCheckCorsp==0,dc2,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,bookrs),taccnumber,"","");

/*        
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,ARAccb.PreIPBookVAT,dc2,TotSum,IVp.CurncyCode,//used to be false, Agnieszka says should be true for all, must be true for Ukraine for sure
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
*/                           

      end;
      if ((IPBookVAT!=0) and (ARAccb.PreIPBookVAT==0)) then begin
        GetVATCodePrelVATAcc(ARPayr.VATCode,vatacc);
        if (blank(vatacc)) then begin
          vatacc = ARAccb.VATBAcc;
        end;
        if (GetAccName(vatacc,tstr,60)==false) then begin 
          errstrno = 2137;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",vatacc,vatobjstr,dc1,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,false,dc1,TotSum,IVp.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);

        GetVATCodeSalesVatAcc(ARPayr.VATCode,vatacc);            
        if (GetAccName(vatacc,tstr,60)==false) then begin 
          errstrno = 1903;
          goto LAddIVPrePayRow; 
        end;
        if (CheckTTRPerRow("IVVc",vatacc,vatobjstr,dc2,taccnumber,0)) then begin end;
        AddEuroCurncyTrRow(gTRp,vatacc,vatobjstr,AddVATCodeToVATAccRows(ARPayr.VATCode),tstr,bookrs,false,dc2,TotSum,IVp.CurncyCode,
                           pfr,pto1,pto2,pbr1,pbr2,rs,nilv,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
//jjtodo        
      end;
    end else begin
      if ((IPBookVAT!=0) and (ARAccb.PreIPBookVAT==0)) then begin
//jjtodo        
      end;
    end;

    if (IVrw.TAX1Reb!=0) then begin
      IPGetVATCodeTAX1AccNumbers(VATCodeb,ARPayr.VATCode,tax1acc,psvatacc);
      if (GetAccName(ARAccb.Tax1TmpAcc,tstr,60)==false) then begin 
        errstrno = 2170;
        goto LAddIVPrePayRow;
      end;
      if (CheckTTRPerRow("IVVc",ARAccb.Tax1TmpAcc,"",dc1,taccnumber,0)) then begin end;
      AddEuroTrRow(gTRp,ARAccb.Tax1TmpAcc,"","",tstr,IVrw.TAX1Reb,ivbaserate1,ivbaserate2,false,dc1,TotSum,false,taccnumber,"","");         

      if (GetAccName(tax1acc,tstr,60)==false) then begin 
        errstrno = 20078;
        goto LAddIVPrePayRow;
      end;
      if (CheckTTRPerRow("IVVc",tax1acc,"",dc2,taccnumber,0)) then begin end;
      AddEuroTrRow(gTRp,tax1acc,"","",tstr,IVrw.TAX1Reb,ivbaserate1,ivbaserate2,false,dc2,TotSum,false,taccnumber,"","");         
    end;

  end;
  errstrno = 0;
LAddIVPrePayRow:;
  AddIVPrePayRow = errstrno;
  RETURN;
END;

global
procedure GetInvoicedQty(LongInt curivnr,LongInt OrderNr,Integer rownr,var val resp,record MainStockBlock MainStockRecp)
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs;

  resp = blankval;
  if (OrderNr!=-1) then begin             
    TrHs = true;
    IVr.SerNr = OrderNr;
    while (LoopKey("OrderNr",IVr,1,TrHs)) begin
      if (IVr.OrderNr!=OrderNr) then begin TrHs = false; end;
      if ((TrHs) and (IVr.SerNr!=curivnr)) then begin 
        if (rownr<MatRowCnt(IVr)) then begin
          MatRowGet(IVr,rownr,IVrw);
          resp = resp + IVrw.Quant;
        end;
      end;
    end;  
    ORr.SerNr = OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin    
      if (rownr<MatRowCnt(ORr)) then begin
        MatRowGet(ORr,rownr,ORrw);
        if (ORr.InvBeforeShip!=0) then begin
          resp = resp + ORrw.Invd;
        end else begin
          resp = resp + ORrw.Shipd2;
        end;
      end;
    end;
  end;  
  RETURN;
END;

function Integer IVVc_GiftCertificateReceive(record TRVc gTRp,record AccBlock ARAccRec,record IVVc IVp,row IVVc IVrw,string cuobj,
                                             val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  Integer errstrno;
  string 255 tstr,tstr2;
  val rs,tvat,t1;
  string 255 svatacc,pvatacc,lcuobj,taccnumber;

  errstrno = 1085; // Transaction could not be generated 
  switch (IVp.InvType) begin
//    case 2:
    otherwise
      errstrno = GetAccNamCurVAT(IVp.ARAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        errstrno = 1908;
        goto LIVVc_GiftCertificateReceive;
      end;
      rs = IVrw.Sum;
//      rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);//currency??      
      if (ARAccRec.ARUseObj!=0) then begin
        lcuobj = cuobj;
      end;
      if (CheckTTRPerRow("IVVc",IVp.ARAcc,lcuobj,dc2,taccnumber,1)) then begin end;
      if (IVp.ARonTR!=0) then begin
        AddEuroTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,baserate1,baserate2,true,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end else begin
        AddEuroTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,baserate1,baserate2,true,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end;    
      MulVATIV(IVrw.VATCode,IVrw.Sum,tvat,t1,1,0);
      rs = IVrw.Sum - tvat;
      if (blank(IVrw.SalesAcc)) then begin
        errstrno = 1901;
        goto LIVVc_GiftCertificateReceive;
      end;
      errstrno = GetAccNamCurVAT(IVrw.SalesAcc,tstr,tstr2,60,IVp.CurncyCode);
      if (errstrno!=0) then begin
        errstrno = 1901;
        goto LIVVc_GiftCertificateReceive;
      end;
      if (CheckTTRPerRow("IVVc",IVrw.SalesAcc,cuobj,dc1,taccnumber,1)) then begin end;
      AddEuroTrRow(gTRp,IVrw.SalesAcc,cuobj,"",tstr,rs,baserate1,baserate2,false,dc1,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      if (tvat!=0) then begin
        GetVATCodeAccNumbers(IVrw.VATCode,svatacc,pvatacc);
        if (GetAccName(svatacc,tstr,60)==false) then begin 
          errstrno = 1902;
          goto LIVVc_GiftCertificateReceive;
        end;
        if (CheckTTRPerRow("IVVc",svatacc,cuobj,dc1,taccnumber,1)) then begin end;
        AddEuroTrRow(gTRp,svatacc,cuobj,AddVATCodeToVATAccRows(IVrw.VATCode),tstr,tvat,baserate1,baserate2,false,dc1,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end;
  end;  
  errstrno = 0;
LIVVc_GiftCertificateReceive:;
  IVVc_GiftCertificateReceive = errstrno;
  RETURN;
END;

function Integer IVVc_CASHRow(record TRVc gTRp,record AccBlock ARAccRec,record IVVc IVp,row IVVc IVrw,string cuobj,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  Integer errstrno;
  string 255 tstr,lcuobj,taccnumber;
  row PMBlock PMrw;
  val rs,ors;
  val rs2,ors2;
  val rategain,rategain2,rd,rd2;
  val rateloss,rateloss2;
  record BaseCurBlock bascur;
  Boolean accf;

  BlockLoad(bascur);
  errstrno = 1085; // Transaction could not be generated
  switch (IVrw.stp) begin
    case kInvoiceRowTypeLoyaltyPointsPayment:
      if (GetPMRow(IVrw.PayMode,PMrw)==false) then begin
        errstrno = 2191;
        goto LIVVc_CASHRow;
      end;
    case kInvoiceRowTypeCashPayment:
      if (GetPMRow(IVrw.PayMode,PMrw)==false) then begin
        errstrno = 2191;
        goto LIVVc_CASHRow;
      end;
    case kInvoiceRowTypeCreditCardPayment:
      if (GetPMRow(IVrw.PayMode,PMrw)==false) then begin
        errstrno = 2191;
        goto LIVVc_CASHRow;
      end;
    case kInvoiceRowTypeChequePayment:
      if (GetPMRow(IVrw.PayMode,PMrw)==false) then begin
        errstrno = 2191;
        goto LIVVc_CASHRow;
      end;
  end;
  if (GetAccName(PMrw.AccNr,tstr,60)==false) then begin
    errstrno = 2191;
    goto LIVVc_CASHRow;
  end;
/*  
  if (GetAccName(IVrw.SalesAcc,tstr,60)==false) then begin
    errstrno = 2191;
    goto LIVVc_CASHRow;
  end;
*/  
  rs = MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
  rs2 = MulRateToBase2(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
/*
  if (IVp.ARonTR!=0) then begin
    AddEuroCurncyNomARTrRow(gTRp,PMrw.AccNr,cuobj,"",tstr,rs,blankval,true,dc1,TotSum,
                      IVrw.CurncyCode,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,
                      IVrw.BaseRate2,IVrw.Sum,blankval,
                      IVp.CustCode,IVp.SerNr,1,blankval,IVp.PayDate,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
  end else begin
*/
    AddEuroCurncyTrRow(gTRp,PMrw.AccNr,cuobj,"",tstr,rs,false,dc1,TotSum,
                       IVrw.CurncyCode,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,
                       IVrw.BaseRate2,IVrw.Sum,blankval,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"");
//  end;      
    
  if (GetAccName(IVp.ARAcc,tstr,60)==false) then begin
    errstrno = 1908;
    goto LIVVc_CASHRow;
  end;
  if (ARAccRec.IPTransBankRowPerCU!=0) then begin
    accf = true;
  end;
  ors = MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
  ors2 = MulRateToBase2(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
  if (ARAccRec.ARUseObj!=0) then begin
    lcuobj = cuobj;
  end;
  if (CheckTTRPerRow("IVVc",IVp.ARAcc,lcuobj,dc2,taccnumber,0)) then begin end;
/*
  if (IVp.ARonTR!=0) then begin
    AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,ors,blankval,true,dc2,TotSum,
                            IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                            IVp.BaseRate2,IVrw.Sum,blankval,
                            IVp.CustCode,IVp.SerNr,1,blankval,IVp.PayDate,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");//0
  end else begin
*/  
    AddEuroCurncyTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,ors,true,dc2,TotSum,
                       IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                       IVp.BaseRate2,IVrw.Sum,blankval,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);//0
//  end;

  if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin
    rd = ors - rs;
    rd2 = ors2 - rs2;    
    if (rd<0) then begin
      rategain = rd;
      rategain2 = rd2;
    end;
    if (rd>0) then begin
      rateloss = rd;
      rateloss2 = rd2;
    end;
    if (rategain<0) then begin
      if (GetAccName(ARAccRec.RateGainAcc,tstr,60)==false) then begin
        errstrno = 1917;
        goto LIVVc_CASHRow;
      end;
      AddEuroCurncyTrRow(gTRp,ARAccRec.RateGainAcc,"","",tstr,rategain,true,dc1,TotSum,
                         bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rategain2,blankval,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"");
    end;
    if (rateloss>0) then begin
      if (GetAccName(ARAccRec.RateLossAcc,tstr,60)==false) then begin
        errstrno = 1918;
        goto LIVVc_CASHRow;
      end;
      AddEuroCurncyTrRow(gTRp,ARAccRec.RateLossAcc,"","",tstr,rateloss,true,dc2,TotSum,
                           bascur.BaseCur2,blankval,blankval,blankval,blankval,blankval,rateloss2,blankval,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"");
    end;
/*
    if (TotSum!=0) then begin
      rs = TotSum;
      if (TotSum>0) then begin
        if (GetAccName(ARAccRec.BankRateGainAcc,tstr,60)) then begin
          AddEuroTrRow(gTRp,ARAccRec.BankRateGainAcc,"","",tstr,rs,IVrw.BaseRate1,IVrw.BaseRate2,true,true,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
        end;
      end else begin
        if (GetAccName(ARAccRec.BankRateLossAcc,tstr,60)) then begin
          AddEuroTrRow(gTRp,ARAccRec.BankRateLossAcc,"","",tstr,rs,IVrw.BaseRate1,IVrw.BaseRate2,true,false,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
        end;
      end;
      if (totsum!=0) then begin
        if (GetAccName(ARAccRec.RateRndOffAcc,tstr,60)==false) then begin
          errstrno = 1904;
          goto LIVVc_CASHRow;
        end;
        AddEuroTrRow(gTRp,ARAccRec.RateRndOffAcc,"","",tstr,rs,IVrw.BaseRate1,IVrw.BaseRate2,true,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,"","","");
      end;  
    end;
*/    
  end;
    
  errstrno = 0;
LIVVc_CASHRow:;
  IVVc_CASHRow = errstrno;
  RETURN;
END;

global
function Integer IVVc_AddPaymentRows(record TRVc gTRp,record AccBlock ARAccRec,record IVVc IVp,Integer rownr,string cuobj,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  row IVVc IVrw;
  Integer errstrno;
  
  MatRowGet(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case kInvoiceRowTypeGiftVoucherPayment: errstrno = IVVc_GiftCertificateReceive(gTRp,ARAccRec,IVp,IVrw,cuobj,baserate1,baserate2,dc1,dc2,TotSum);
    case kInvoiceRowTypeCashPayment: errstrno = IVVc_CASHRow(gTRp,ARAccRec,IVp,IVrw,cuobj,dc1,dc2,TotSum);
    case kInvoiceRowTypeCreditCardPayment: errstrno = IVVc_CASHRow(gTRp,ARAccRec,IVp,IVrw,cuobj,dc1,dc2,TotSum);
    case kInvoiceRowTypeChequePayment: errstrno = IVVc_CASHRow(gTRp,ARAccRec,IVp,IVrw,cuobj,dc1,dc2,TotSum);
  end;
  IVVc_AddPaymentRows = errstrno;
  RETURN;
END;

global
function Integer IVVc_Change(record TRVc gTRp,Integer ARUseObj,string defchangeacc,string cuobj,record IVVc IVp,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
BEGIN
  string 255 tstr,lcuobj,taccnumber;
  val rs;
  Integer errstrno;
  Boolean testf,RetValueAddedf;
  Integer i,rwcnt;
  row IVVc IVrw;
  string 255 changeacc;
  row PMBlock PMrw;
  
  changeacc = defchangeacc;
  if (IVp.RetnValue==0) then begin goto LIVVc_Change; end;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeCashPayment:  //1st cash Payemnt
        GetPMRow(IVrw.PayMode,PMrw);
        if (nonblank(PMrw.ChangeAcc)) then begin changeacc = PMrw.ChangeAcc; end;
        i = rwcnt;
    end;
  end;
  rwcnt = MatRowCnt(IVp);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeCashPayment:  //1st cash Payemnt
        GetPMRow(IVrw.PayMode,PMrw);
        if (nonblank(PMrw.ChangeAcc)) then begin changeacc = PMrw.ChangeAcc; end;
        i = rwcnt;
    end;
  end;
  if (GetAccName(IVp.ARAcc,tstr,60)==false) then begin
    errstrno = 2191;
    goto LIVVc_Change;
  end;
  rs = MulRateToBase1(IVp.CurncyCode,IVp.RetnValue,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  if ((IVp.InvType==kInvoiceTypeNormal) or (IVp.InvType==kInvoiceTypeInterest) or (IVp.InvType==kInvoiceTypeCash or IVp.InvType==kInvoiceTypeCash) or (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCashInvoiceReceiptPRT) or (IVp.InvType==kInvoiceTypeDownpayment)) then begin 
    if ((IVp.RetnValue>0 and IVp.Sum4>0) or (IVp.RetnValue<0 and IVp.Sum4<0)) then begin    
      testf = true; 
    end;
  end;
  if (testf) then begin
    if (blank(changeacc)) then begin
      rwcnt = MatRowCnt(IVp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        switch (IVrw.stp) begin
          case kInvoiceRowTypeCashPayment:
            RetValueAddedf = true;
            if (GetPMRow(IVrw.PayMode,PMrw)==false) then begin
              errstrno = 2191;
              goto LIVVc_Change;
            end;
            changeacc = PMrw.AccNr;
            i = rwcnt;
        end;
      end;
      
    end;
    if (ARUseObj!=0) then begin
      lcuobj = cuobj;
    end;
    if (CheckTTRPerRow("IVVc",IVp.ARAcc,lcuobj,dc1,taccnumber,0)) then begin end;
/*    
    if (IVp.ARonTR!=0) then begin
      AddEuroCurncyNomARTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,blankval,true,dc1,TotSum,
                            IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                            IVp.BaseRate2,IVp.RetnValue,blankval,
                            IVp.CustCode,IVp.SerNr,1,blankval,IVp.PayDate,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");//0
    end else begin
*/    
      AddEuroCurncyTrRow(gTRp,IVp.ARAcc,lcuobj,"",tstr,rs,true,dc1,TotSum,
                       IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                       IVp.BaseRate2,IVp.RetnValue,blankval,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);//0
//    end;
    if (GetAccName(changeacc,tstr,60)==false) then begin
      errstrno = 1907;
      goto LIVVc_Change;
    end;
    if (CheckTTRPerRow("IVVc",changeacc,cuobj,dc2,taccnumber,0)) then begin end;
    AddEuroCurncyTrRow(gTRp,changeacc,cuobj,"",tstr,rs,true,dc2,TotSum,
                       IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,
                       IVp.BaseRate2,IVp.RetnValue,blankval,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);//0
  end;
LIVVc_Change:;  
  IVVc_Change = errstrno;
  RETURN;
END;

global
updating procedure CreateCommisionInvoice(record IVVc IVr)
begin
  record CUToCUVc CUToCUr;
  Boolean found;

  found = true;
  CUToCUr.ToCU = IVr.CustCode;  
  while (LoopKey("ToCU",CUToCUr,1,found)) begin
    
  end;
  return;
end;

global
function Integer AddIVWithholdingTaxesRow(record TRVc gTRp,record IVVc IVp,Integer rownr,string cuobj,val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
begin
  row IVVc IVrw;
  Integer errstrno;
  string 255 objstr,taccnumber,tstr;
  val rs;

  MatRowGet(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case kInvoiceRowTypeWithholdingTax:
      if (GetAccName(IVrw.SalesAcc,tstr,60)==false) then begin
        errstrno = 20074;
      end;
      if (errstrno!=0) then begin
        errstrno = 1908;
        goto LAddIVWithholdingTaxesRow;
      end;
      rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      objstr = cuobj;
      if (nonblank(IVrw.Objects)) then begin
        if (nonblank(objstr)) then begin objstr = objstr & ","; end;
        objstr = objstr & IVrw.Objects;
      end;

      if (CheckTTRPerRow("IVVc",IVrw.SalesAcc,objstr,dc2,taccnumber,1)) then begin end;
      if (IVp.ARonTR!=0) then begin
        AddEuroTrRow(gTRp,IVrw.SalesAcc,objstr,"",tstr,rs,baserate1,baserate2,true,dc1,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end else begin
        AddEuroTrRow(gTRp,IVrw.SalesAcc,objstr,"",tstr,rs,baserate1,baserate2,true,dc1,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end;        
  end;
LAddIVWithholdingTaxesRow:;  
  AddIVWithholdingTaxesRow = errstrno;
  return;
end;

function Integer AddIVPercpetionTaxesRow(record TRVc gTRp,record IVVc IVp,Integer rownr,string cuobj,val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,var val TotSum)
begin
  row IVVc IVrw;
  Integer errstrno;
  string 255 objstr,taccnumber,tstr;
  val rs;
  
  MatRowGet(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case kInvoiceRowTypePerceptionTax:
      if (GetAccName(IVrw.SalesAcc,tstr,60)==false) then begin
        errstrno = 20074;
      end;
      if (errstrno!=0) then begin
        errstrno = 1908;
        goto LAddIVPercpetionTaxesRow;
      end;
      rs = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      objstr = cuobj;
      if (nonblank(IVrw.Objects)) then begin
        if (nonblank(objstr)) then begin objstr = objstr & ","; end;
        objstr = objstr & IVrw.Objects;
      end;

      if (CheckTTRPerRow("IVVc",IVrw.SalesAcc,objstr,dc2,taccnumber,1)) then begin end;
      if (IVp.ARonTR!=0) then begin
        AddEuroTrRow(gTRp,IVrw.SalesAcc,objstr,"",tstr,rs,baserate1,baserate2,true,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end else begin
        AddEuroTrRow(gTRp,IVrw.SalesAcc,objstr,"",tstr,rs,baserate1,baserate2,true,dc2,TotSum,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber,"","");
      end;        
  end;
LAddIVPercpetionTaxesRow:;  
  AddIVPercpetionTaxesRow = errstrno;
  return;
end;

global
function Integer AddTAX2Row(var record TRVc gTRp,record IVVc IVp,Integer rownr,string cuobj,
                            val frrate,val torate1,val torate2,val baserate1,val baserate2,
                            Boolean dc1,Boolean dc2,var val TotSum,Boolean calcperceppercuf)
BEGIN
  Integer errstrno;
  row IVVc IVrw;
  string 20 accstr,taccnumber;
  string 255 tstr;
  val t,rs,sum;
  val tvat,t1;
  
  if (calcperceppercuf) then begin
    errstrno = AddIVPercpetionTaxesRow(gTRp,IVp,rownr,cuobj,frrate,torate1,torate2,baserate1,baserate2,dc1,dc2,TotSum);
    if (errstrno!=0) then begin goto LAddTAX2Row; end;
  end else begin
    MatRowGet(IVp,rownr,IVrw);
    if ((IVrw.stp!=kInvoiceRowTypeNormal) and (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent)) then begin goto LAddTAX2Row; end;
    if (IVrw.ovst!=0) then begin goto LAddTAX2Row; end;
    if (blank(IVrw.TAX2Code)) then begin goto LAddTAX2Row; end;
    errstrno = 1085; // Transaction could not be generated 
    accstr = IVrw.TAX2Acc;
    if (blank(accstr)) then begin
      accstr = GetTax2Acc(IVrw.TAX2Code);
    end;  
    if (GetAccName(accstr,tstr,60)==false) then begin
      errstrno = 20074;
      goto LAddTAX2Row;
    end;
    sum = IVrw.Sum;
    switch (IVp.InclVAT) begin
      case 1:
        MulVATIV(IVrw.VATCode,sum,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);
        sum = sum - tvat - t1;
      case 2:
        MulVATIV(IVrw.VATCode,sum,tvat,t1,IVp.InclVAT,IVp.NoTAXonVAT);
        sum = sum - tvat;
    end;
    t = FindTAX2(IVrw.TAX2Prc,sum,IVp.InclVAT);
    if (IVrw.TAX2Reb!=0) then begin
      t = t - (t*IVrw.TAX2Reb)/100;
    end;
    t = Round(t,SetRoundModeD(2));    
    rs = MulRateToBase1(IVp.CurncyCode,t,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
    if (CheckTTRPerRow("IVVc",accstr,"",dc2,taccnumber,0)) then begin end;
    AddEuroCurncyTrRow(gTRp,accstr,"","",tstr,rs,true,dc2,TotSum,
                       IVp.CurncyCode,frrate,torate1,torate2,baserate1,
                       baserate2,t,blankval,-1,IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales,taccnumber);
  end;
  errstrno = 0;
LAddTAX2Row:;                     
  AddTAX2Row = errstrno;
  return;
end;

global
function Integer PostTaxMatrix_IVVc(var record TRVc gTRp,record AccBlock ARb,record VATCodeBlock VATCodeb,record IVVc IVp,string objstr,
                             val frrate,val torate1,val torate2,val baserate1,val baserate2,Boolean dc1,Boolean dc2,Integer posttype,var val TotSum)
begin
  Integer errstrno;
  record TaxMatrixVc TMr;
  row TaxMatrixVc TMrw;
  Integer i,rwcnt;
  string 255 tstr,taccnumber,SalesVATAcc;
  row VATCodeBlock VATCbrw;
  
  UnpackFieldMatrix(IVp,"TaxMatrix",TMr);
  rwcnt = MatRowCnt(TMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TMr,i,TMrw);
    GetVATRowFromBlock(TMrw.VATCode,VATCodeb,VATCbrw);
    switch (posttype) begin
      case 1:
        SalesVATAcc = VATCbrw.HotelWIPAcc;
      otherwise
        SalesVATAcc = VATCbrw.SalesVATAcc;
    end;
    if (GetAccName(SalesVATAcc,tstr,60)==false) then begin 
      if (ARb.PostIVVATonVATCorr!=0) then begin
        errstrno = 1921;
      end else begin
        errstrno = 1902;
      end;
      goto LPostTaxMatrix_IVVc;
    end;
    if (CheckTTRPerRow("IVVc",SalesVATAcc,objstr,dc2,taccnumber,0)) then begin end;
    TMrw.VATSum = MulRateToBase1(IVp.CurncyCode,TMrw.VATSum,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);

    AddEuroTrRow(gTRp,SalesVATAcc,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,false,dc2,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,TMrw.VATSum),
                 taccnumber,"","");
    switch (VATCbrw.InclinTotal) begin
      case kTaxTransInclinTotalNo:
/*      
this is crazy code isnt it? 
we do not need to post it !

        if (GetAccName(VATCbrw.TaxMatrixVariance,tstr,60)==false) then begin 
          errstrno = 22046;
          goto LPostTaxMatrix_IVVc;
        end;
        if (CheckTTRPerRow("IVVc",VATCbrw.TaxMatrixVariance,objstr,dc2,taccnumber,0)) then begin end;
        AddEuroTrRow(gTRp,VATCbrw.TaxMatrixVariance,objstr,AddVATCodeToVATAccRows(VATCbrw.VATCode),tstr,TMrw.VATSum,baserate1,baserate2,false,dc1,TotSum,NegativeAmountsOnIVTrans(IVp.InvType,TMrw.VATSum),
                     taccnumber,"","");
*/                     
    end;
  end;
LPostTaxMatrix_IVVc:;  
  PostTaxMatrix_IVVc = errstrno;
  return;
end;
