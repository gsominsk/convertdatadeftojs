external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObj(string,var Integer,var string);
external function string 60 AddObjectToObjectList(string,string);
external procedure RowCalculateTaxMatrix_IVVc(var record IVVc,Integer,row IVVc);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure AddWithholdingTaxesRows_IVVc(var record IVVc);
external procedure AddPerceptionTaxesRows_IVVc(var record IVVc);
external function Boolean GetGlobalUserMainCompany(string,var string);
external function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);
external function Boolean PasteVEInPO(var record POVc,Boolean);
external procedure GetARAcc(string,var string);
external function string 255 FindINObjects(string,string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external function Boolean CurUserHasMailbox(var string);
external function Boolean InterNetAddrTest(string);
external procedure PasteIntOrdInPO(string,record IntORVc,var record POVc);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Time TimeDiff(Time,Time);
external updating function Boolean PastePOCOInVI(record POCOVc,var record VIVc);
external procedure VISumup(record VIVc,var val);
external function Boolean PastePOCOInPO(record POCOVc,var record POVc);
external procedure PasteIntOrdInSD(record IntORVc,var record SDVc);
external procedure PasteIntOrdInStockMov(record IntORVc,var record StockMovVc);
external procedure SDSumUp(var record SDVc);
external procedure StockMovSumUp(var record StockMovVc);
external procedure GetINCostAcc(record INVc,var string);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external procedure POSumup(var record POVc);
external updating function Boolean PasteWOInWS(var record WOVc,var record WSVc);
external updating function Boolean PasteSVOInWS(var record SVOVc,var record WSVc);
external procedure WSSumup(record WSVc);
external procedure PastePDInInv(var record IVVc,string,Boolean);
external procedure UpdateSVO(record SVOVc,integer,LongInt,Integer,var val);
external updating procedure UpdateWS(LongInt,Integer,var val);
external procedure Do_InvoiceRecepy(record IVVc,record INVc,Integer);
external procedure AddBatchText(record IVVc);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function LongInt GetCurUserLastNr(string);
external procedure SetSVOFlags(record SVOVc);
external procedure IVSumup(var record IVVc,Boolean);
external function Integer TypeOfCurncy(var string,var Integer);
external procedure RecalcProjectInvoice(record IVVc,string);
external function Boolean PasteItemInSVO(var record SVOVc,Integer);
external function Boolean SVO_PasterSerialNr(var record SVOVc,Integer,var string);
external function Boolean PasteCUInSVO(var record SVOVc,string,var string);
external function Boolean WSDchrsum(record WSVc,Integer ,Integer );
external procedure GetSalesGroup(string,var string);
external function Boolean PasteCUInWS(var record WSVc,var string);
external function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetCurUser(var record UserVc);
external procedure IVVc_PasteSalesMan(var record IVVc,string);
external procedure FindUserMailboxName(string,var string,var string);

function Boolean IVRowItemEq(record IVVc IVp,record WSIVVc WSIVp,record INVc INp,string rowobjs,string SalesAcc,var Integer rownr)
begin
  Boolean res;
  row IVVc IVrw;
  Integer i,rwcnt;
  
/*  
  if (ReadFirstMain(INp,1,true)) then begin
    itemexistfp = true;
  end;      
*/
  if (blank(WSIVp.ArtCode)) then begin
    rownr = -1;
    res = false;
    goto LIVRowItemEq;  
  end;  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (INp.SerNrf) begin
      case 0:
        if ((WSIVp.ArtCode==IVrw.ArtCode) and (IVrw.Price==WSIVp.Price) and (IVrw.Objects==rowobjs) and (IVrw.SalesAcc==SalesAcc) and (IVrw.vRebate==WSIVp.Discount))  then begin
           res = true;
           rownr = i;
           goto LIVRowItemEq;  
        end;
      case 1:      
        if ((WSIVp.ArtCode==IVrw.ArtCode) and (IVrw.Price==WSIVp.Price) and (IVrw.Objects==rowobjs) and (IVrw.SalesAcc==SalesAcc) and (IVrw.SerialNr==WSIVp.SerialNr) and (IVrw.vRebate==WSIVp.Discount))  then begin
           res = true;
           rownr = i;
           goto LIVRowItemEq;  
        end;
      case 2:
        if ((WSIVp.ArtCode==IVrw.ArtCode) and (WSIVp.SerialNr==IVrw.SerialNr) and (IVrw.Objects==rowobjs) and (IVrw.SalesAcc==SalesAcc) and (IVrw.vRebate==WSIVp.Discount)) then begin
          rownr = i;
          res = true;
          goto LIVRowItemEq;  
        end;
      case 3:
        if ((WSIVp.ArtCode==IVrw.ArtCode) and (IVrw.Price==WSIVp.Price) and (IVrw.Objects==rowobjs) and (IVrw.SalesAcc==SalesAcc) and (IVrw.vRebate==WSIVp.Discount))  then begin
           res = true;
           rownr = i;
           goto LIVRowItemEq;  
        end;
    end;
  end;  
LIVRowItemEq:;
  IVRowItemEq = res;  
  return;
end;

procedure MakeInvHeader(var record IVVc IVp,record SVOVc SVOp,record AccBlock ARAccRecp)
begin
  record CUVc CUr;
  record INVc INr;
  record SRBlock SRRec;
  string 255 tstr;
  LongInt newnr;
  record SVOAccBlock SVOAb;
  record UserVc USr;

  BlockLoad(SVOAb);

  IVp.TransDate = CurrentDate;
  IVp.UpdStockFlag = ARAccRecp.InvUpdStock;
  IVp.OrderNr = -1;
  if (nonblank(SVOp.InvoiceToCode)) then begin
    CUr.Code = SVOp.InvoiceToCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      IVp.CustCode = CUr.Code;
      IVp.Addr0 = CUr.Name;
      IVp.Addr1 = CUr.InvAddr0;
      IVp.Addr2 = CUr.InvAddr1;
      IVp.Addr3 = CUr.InvAddr2;
      IVp.InvAddr3 = CUr.InvAddr3;
      IVp.InvAddr4 = CUr.InvAddr4;
      IVp.CustCat = CUr.CustCat;
      IVp.OrgCust = SVOp.CustCode;
      IVp.PayDeal = CUr.PayDeal;
      IVp.ExportFlag = CUr.ExportFlag;
      IVp.CustVATCode = CUr.VATCode;
      IVp.FiscalFlag = CUr.FiscalFlag;
    end else begin
      goto L20MakeInvHeader; // if customer is not found then use the original customer 
    end;
  end else begin
L20MakeInvHeader:;
    IVp.CustVATCode = SVOp.CustVATCode;
    IVp.CustCode = SVOp.CustCode;
    IVp.Addr0 = SVOp.Addr0;
    IVp.Addr1 = SVOp.Addr1;
    IVp.Addr2 = SVOp.Addr2;
    IVp.Addr3 = SVOp.Addr3;
    IVp.InvAddr3 = SVOp.InvAddr3;
    IVp.InvAddr4 = SVOp.InvAddr4;
    CUr.Code = SVOp.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      IVp.PayDeal = CUr.PayDeal;
      IVp.VATNr = CUr.VATNr;
      IVp.RegNr1 = CUr.RegNr1;
      IVp.ExportFlag = CUr.ExportFlag;
      IVp.FiscalFlag = CUr.FiscalFlag;
    end;
  end;
  IVp.PriceList = SVOp.PriceList;
  IVp.CustTaxTemplateCode = SVOp.CustTaxTemplateCode;
  IVp.ClientContact = SVOp.CustContact;
  if (SVOAb.WSHeaderObjectOnSVOIV==0) then begin
    IVp.Objects = SVOp.Objects;
  end else begin
    USr.Code = SVOp.SalesMan;
    ReadFirstMain(USr,1,true);
    IVp.Objects = USr.PersObjx;
  end;
  IVp.CustOrdNr = SVOp.CustOrdNr;
  IVp.LangCode = SVOp.LangCode;
  IVp.InclVAT = SVOp.InclVAT;
  if (IVp.NoTAXonVAT<0) then begin
    IVp.NoTAXonVAT = 0;
  end;
//  IVp.NoTAXonVAT = SVOp.NoTAXonVAT;
//  IVp.TotalwoTAX = SVOp.TotalwoTAX;
  IVp.SVONr = SVOp.SerNr;
  GetARAcc(IVp.CustCode,IVp.ARAcc);
  PastePDInInv(IVp,"",false);
  IVp.ShipAddr0 = SVOp.ShipAddr0;
  IVp.ShipAddr1 = SVOp.ShipAddr1;
  IVp.ShipAddr2 = SVOp.ShipAddr2;
  IVp.ShipAddr3 = SVOp.ShipAddr3;
  IVp.DelAddr3 = SVOp.DelAddr3;
  IVp.DelAddr4 = SVOp.DelAddr4;
  IVp.ShipMode = SVOp.ShipMode;
  IVp.ShipDeal = SVOp.ShipDeal;
  if (nonblank(IVp.PayDeal)) then begin
    IVp.PayDeal = SVOp.PayDeal;
    PastePDInInv(IVp,"",false);
  end;  
  IVp.DiscPerc = blankval;
  IVp.DiscSum = blankval;
  IVp.FrGPPercent = blankval;
  IVp.FrBase = blankval;
  IVp.FrGP = blankval;
  IVp.FrPrice = blankval;
  IVp.FrObjects = "";
  IVp.FrVATCode = "";
  IVp.FrSalesAcc = "";
  IVp.CurncyCode = SVOp.CurncyCode;
  IVp.FrRate = SVOp.FrRate;
  IVp.ToRateB1 = SVOp.ToRateB1;
  IVp.ToRateB2 = SVOp.ToRateB2;
  IVp.BaseRate1 = SVOp.BaseRate1;
  IVp.BaseRate2 = SVOp.BaseRate2;
  IVp.SalesMan = SVOp.SalesMan;
  IVVc_PasteSalesMan(IVp,"");
  if (IVp.SerNr<=0) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("IVVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastInvNr;
    end;    
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,false,IVp.LangCode);
  end;
  return;
end;

updating procedure AddRowsFromServiceOrder(record SVOVc SVOp,var record IVVc IVp)
begin
  row SVOVc SVOrw;
  row IVVc IVrw;
  integer i,rwcnt;
  integer j;
  string 255 artcode, spec, serialnr;
  
  rwcnt = MatRowCnt(SVOp);
  for (i=0;i<=0;i=i+1) begin
    MatRowGet(SVOp,i,SVOrw);
    artcode = SVOrw.ArtCode;
    spec = SVOrw.Spec;
    serialnr = SVOrw.SerialNr;
  end;
  ClearRow(IVp,IVrw,1);
  for (j=0;j<=2;j=j+1) begin
    if (j==0) then begin 
      IVrw.stp = kInvoiceRowTypeNormal;
      IVrw.Spec = USetStr(7637) & " " & artcode;
    end;
    if (j==1) then begin 
      IVrw.stp = kInvoiceRowTypeNormal;
      IVrw.Spec = USetStr(7638) & " " & spec;
    end;
    if (j==2) then begin 
      IVrw.stp = kInvoiceRowTypeNormal;
      IVrw.Spec = USetStr(7639) & " " & serialnr;
    end;
    MatRowPut(IVp,j,IVrw);
        
  end;
  return;
end;

updating function Boolean PasteSVOInInv(var record IVVc IVp,var record SVOVc SVOp,Boolean addon)
begin
  record INVc INr;
  record SVOVc SVOr;
  record WSIVVc WSIVr;
  record WSIVVc oldWSIVr;
  record WSVc WSr;
  row WSVc WSrw;
  record SVOVc oldSVOr;
  row IVVc IVrw;
  Boolean infound,TrHs,testf;
  Boolean res,itemexistf;
  Integer srw,rownr,oldstyle,i;
  record AccBlock ARAccRec;
  record CostAccBlock CostAccRec;
  record SVOAccBlock SVOAb;
  val markup,t;
  record GeneralOptionBlock GenOptr;
  string 255 tstr;
  Integer flushcnt;
  val price,vatv,t1;
  string 255 rowobjects,SalesAcc;
  record CUVc CUr;
  record TaxMatrixVc TMr;
  string 255 curitemname,vatcode,tax2code,taxtemplatecode,curcode;
  Boolean calcpricef;
  Time blankt;
  Boolean dummyf;
  val s,rowsum,vreb,baseprice,tax2prc;
  record AccVc Accr;
  string 20 obj;
  Integer pos;
  
  RecordCopy(oldSVOr,SVOp);
  res = false;
  BlockLoad(GenOptr);
  BlockLoad(CostAccRec);
  BlockLoad(ARAccRec);
  BlockLoad(SVOAb);
  MakeInvHeader(IVp,SVOp,ARAccRec);  
  AddRowsFromServiceOrder(SVOp,IVp);
  srw = MatRowCnt(IVp);
  TrHs = true;
  WSIVr.SVONr = SVOp.SerNr;
  while (LoopKey("SVONr",WSIVr,1,TrHs)) begin  
    testf = true;
    if (WSIVr.CUCode!=SVOp.CustCode) then begin testf = false; end;
    if (WSIVr.SVONr!=SVOp.SerNr) then begin TrHs = false; end;
    if (WSIVr.InvNr!=-1) then begin testf = false; end;
    if (TrHs==false) then begin testf = false; end;
    if (testf) then begin
    if ((WSIVr.Type==1) and (WSIVr.InvNr==-1)) then begin//Inoicable
       SVOr.SerNr = WSIVr.SVONr;
       if (ReadFirstMain(SVOr,1,true)) then begin end;
       RecordCopy(oldWSIVr,WSIVr);
       INr.Code = WSIVr.ArtCode;
       ReadFirstMain(INr,1,true);
       itemexistf = false;
       ClearRow(WSr,WSrw,1);
       rowobjects = "";
       SalesAcc = "";
       switch (WSIVr.RecType) begin
         case 0:
           WSr.SerNr = WSIVr.SerNr;
           if (ReadFirstMain(WSr,1,true)) then begin
             MatRowGet(WSr,WSIVr.Row,WSrw);
             if (SVOAb.WSHeaderObjectOnSVOIV!=0) then begin
               rowobjects = WSr.Objects;
             end;             
             rowobjects = AddObjectToObjectList(rowobjects,WSrw.Objects);        
             if (blank(WSrw.Objects)) then begin
               rowobjects = AddObjectToObjectList(rowobjects,INr.Objects);        
             end;
           end;
           if (SVOAb.WSHeaderObjectOnSVOIV==0) then begin
             rowobjects = AddObjectToObjectList(rowobjects,INr.Objects);        
           end;
           SalesAcc = WSrw.SalesAcc;
         case 1:
           rowobjects = INr.Objects;
       end;
       if (IVRowItemEq(IVp,WSIVr,INr,rowobjects,SalesAcc,rownr)==false) then begin
         ClearRow(IVp,IVrw,1);
         IVrw.stp = kInvoiceRowTypeNormal;
         IVrw.ArtCode = WSIVr.ArtCode;
         IVrw.Perceptions = INr.Perceptions;
         IVrw.VATCode = IVp.CustVATCode;
         if (blank(IVp.CustVATCode)) then begin
           GetItemVATCode(INr.Code,IVp.ExportFlag,tstr,true);
           IVrw.VATCode = tstr;
         end;
         IVrw.TaxTemplateCode = IVp.CustTaxTemplateCode;
         if (blank(IVrw.TaxTemplateCode)) then begin
           IVrw.TaxTemplateCode = WSrw.TaxTemplateCode;
         end;
         UnpackRowFieldMatrix(WSrw,"TaxMatrix",TMr);
         IVrw.Objects = rowobjects;
         IVrw.Spec = WSIVr.Comment;
         IVrw.SerialNr = WSIVr.SerialNr;
         IVrw.BasePrice = WSIVr.CostPrice;   
         IVrw.vRebate = WSIVr.Discount;         
         markup = StringToVal(WSIVr.Markup,M4Val);
         t = markup/WSIVr.InvQty;
/*         
         if (SVOr.InclVAT!=0) then begin
           MulVATIV(IVrw.VATCode,WSIVr.Price,vatv,t1,0,0);
           price = WSIVr.Price + vatv;
         end else begin
           price = WSIVr.Price;
         end;
*/         
         price = WSIVr.Price;
         IVrw.Price = price + t;
         switch (WSIVr.RecType) begin
           case kWSIVRecTypeReturnGoods:
             IVrw.Quant = -WSIVr.InvQty;   
           otherwise
             IVrw.Quant = WSIVr.InvQty;   
         end;
         IVrw.rowGP = WSIVr.GP;   
         IVrw.Coefficient = WSIVr.Coefficient;   
         IVrw.PriceFactor = blankval;
         IVrw.FIFO = blankval;
         IVrw.FIFORowVal = blankval;
         switch (WSIVr.RecType) begin
           case 0:
             IVrw.SalesAcc = WSrw.SalesAcc;
             IVrw.FIFO = WSrw.FIFO;
             IVrw.FIFORowVal = WSrw.FIFORowVal;
         end;
         if (blank(IVrw.SalesAcc)) then begin
           GetItemSalesAcc(INr.Code,IVp.ExportFlag,tstr);
           IVrw.SalesAcc = tstr;
         end;
         Accr.AccNumber = IVrw.SalesAcc;
         ReadFirstMain(Accr,1,true);
         IVrw.PeriodCode = Accr.PeriodCode;
         IVrw.UnitCode = INr.Unittext;
         IVrw.UnitXval = INr.Width;
         IVrw.UnitYval = INr.Height;
         IVrw.UnitZval = INr.Depth;
         IVrw.NotUpdStockFlag = 1;
         if (blank(IVrw.TaxTemplateCode)) then begin
           MatRowPut(IVp,srw,IVrw);
           GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,SVOp.CurncyCode,
                                IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,
                                IVp.LangCode,IVp.CustCat,IVp.PriceList,IVp.RebCode,
                                price,curitemname,vreb,vatcode,baseprice,salesacc,
                                IVp.ExportFlag,calcpricef,IVp.TransDate,blankt,IVp.CustCode,true,dummyf,IVp.PayDeal,
                                tax2code,tax2prc,"","",taxtemplatecode);
            IVrw.TaxTemplateCode = FillupTaxMatrix(0,IVp.BranchID,IVp.CustCode,IVp.CustCat,IVp.DelAddrCode,taxtemplatecode,TMr);
            RowCalculateTaxMatrix_IVVc(IVp,srw,IVrw);
         end;
         PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
         MatRowPut(IVp,srw,IVrw);
         if (IVDchrsum(IVp,srw)) then begin
           IVDchsum(IVp,srw);
         end;  
         srw = srw + 1;
         if ((infound) and (nonblank(INr.InvRecepy))) then begin
           Do_InvoiceRecepy(IVp,INr,srw);
           srw = MatRowCnt(IVp);
         end;
         if (nonblank(IVrw.SerialNr)) then begin
           AddBatchText(IVp);
           srw = MatRowCnt(IVp);
         end;
       end else begin
         MatRowGet(IVp,rownr,IVrw);
         switch (WSIVr.RecType) begin
           case kWSIVRecTypeReturnGoods:
             IVrw.Quant = IVrw.Quant - WSIVr.InvQty;
           otherwise
             IVrw.Quant = IVrw.Quant + WSIVr.InvQty;
         end;
         MatRowPut(IVp,rownr,IVrw);
         if (IVDchrsum(IVp,rownr)) then begin
           IVDchsum(IVp,rownr);
         end;  
       end;
       WSIVr.InvNr = IVp.SerNr;
       res = true;
       if (RecordUpdate(oldWSIVr,WSIVr,false)==0) then begin end;
       UpdateWS(WSIVr.SerNr,WSIVr.Row,WSIVr.InvQty);
       UpdateSVO(SVOp,WSIVr.RecType,WSIVr.SerNr,WSIVr.Row,WSIVr.InvQty);
       if (MatRowCnt(IVp)>=300) then begin
          if (IVp.SerNr!=-1) then begin
            AddPerceptionTaxesRows_IVVc(IVp);
            AddWithholdingTaxesRows_IVVc(IVp);
            IVSumup(IVp,true);
            if (RecordStore(IVp,false)) then begin end;
            SetSVOFlags(SVOp);
            if (RecordUpdate(oldSVOr,SVOp,false)==0) then begin end;
            RecordNew(IVp);
            MakeInvHeader(IVp,SVOp,ARAccRec);
            srw = 0;
          end else begin 
            res = false;
            goto LPasteSVOInInv;
          end;   
       end;
    end;
    end;
  end;
  AddPerceptionTaxesRows_IVVc(IVp);
  AddWithholdingTaxesRows_IVVc(IVp);
  IVSumup(IVp,true);
  if (nonblank(SVOp.InvoiceToCode)) then begin
    CUr.Code = SVOp.InvoiceToCode;
    if (ReadFirstMain(CUr,1,true)) then begin end;  
    if (SVOp.CurncyCode!=CUr.CurncyCode) then begin
      i = TypeOfCurncy(CUr.CurncyCode,oldstyle);
      if ((i==0) or (i==2)) then begin
        curcode = IVp.CurncyCode;
        IVp.CurncyCode = CUr.CurncyCode;
        RecalcProjectInvoice(IVp,curcode);
      end;
    end;
  end;  
    
//  IVp.OfficialSerNr = FindNextLegalSerNr(IVp,CUr.Classification); //POSN
LPasteSVOInInv:;
  PasteSVOInInv = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteSVOInInv(var record SVOVc SVOp,var record IVVc IVp)
begin
  LongInt res;
  string 255 tstr;
  record SRBlock SRRec;
  LongInt newnr;
  record SVOVc oldSVOr;
  Boolean testf;
  record CUVc CUr;

  if (ReadFirstMain(SVOp,0,true)) then begin end;  
  RecordNew(IVp);
  IVp.OrderNr = -1;
  IVp.UpdStockFlag = 0;
  IVp.SerNr = -1;
  testf = PasteSVOInInv(IVp,SVOp,false);
  if (testf==false) then begin
    goto LRecordAction_raPasteSVOInIV;
  end;
  if (IVp.SerNr<=0) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("IVVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastInvNr;
    end;    
    IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,newnr,false,IVp.LangCode);
    CUr.Code = IVp.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin end;
//    IVp.OfficialSerNr = FindNextLegalSerNr(IVp,CUr.Classification); //POSN
  end;                    
  if (IVp.SerNr<=0) then begin goto LRecordAction_raPasteSVOInIV; end;
  if (HasLocalization("ARG")) then begin 
    IVp.BranchID = CurBranchID;
    if (blank(IVp.BranchID)) then begin
      IVp.BranchID = SVOp.BranchID;
    end;
  end;
  if (MatRowCnt(IVp)>0) then begin
    if (RecordStore(IVp,false)) then begin
      RecordCopy(oldSVOr,SVOp);
      SetSVOFlags(SVOp);
      if (RecordUpdate(oldSVOr,SVOp,false)==0) then begin
      end;
      CreateRecordLink(SVOp,CurrentCompany,IVp,CurrentCompany);
      CreateRecordLink(IVp,CurrentCompany,SVOp,CurrentCompany);
      res = 1;
    end;
  end;
LRecordAction_raPasteSVOInIV:;
  RecordAction_raPasteSVOInInv = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteWOInWS(var record WOVc WOp,var record WSVc WSp)
begin
  LongInt res;
  Boolean testf;
  Integer curcomp;

  curcomp = CurrentCompany;
  if (ReadFirstMain(WOp,0,true)) then begin end;  
  RecordNew(WSp);
  if (PasteWOInWS(WOp,WSp)) then begin end;
  if (WSp.SerNr<=0) then begin
    WSp.SerNr = NextSerNr("WSVc",WSp.TransDate,-1,false,"");
  end;                      
  if (WSp.SerNr<=0) then begin goto LRecordAction_raPasteWOInWS; end;
  WSSumup(WSp);
  if (RecordStore(WSp,false)) then begin
    CreateRecordLink(WOp,curcomp,WSp,curcomp);
    CreateRecordLink(WSp,curcomp,WOp,curcomp);
    res = 1;
  end;
LRecordAction_raPasteWOInWS:;
  RecordAction_raPasteWOInWS = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteSVOInWS(var record SVOVc SVOp,var record WSVc WSp)
begin
  LongInt res;
  Boolean testf;
  Integer curcomp;

  curcomp = CurrentCompany;
  if (ReadFirstMain(SVOp,0,true)) then begin end;  
  RecordNew(WSp);
  if (PasteSVOInWS(SVOp,WSp)) then begin end;
  if (WSp.SerNr<=0) then begin
    WSp.SerNr = NextSerNr("WSVc",WSp.TransDate,-1,false,"");
  end;                      
  if (WSp.SerNr<=0) then begin goto LRecordAction_raPasteSVOInWS; end;
  WSSumup(WSp);
  if (RecordStore(WSp,false)) then begin
    CreateRecordLink(WSp,curcomp,SVOp,curcomp);
    CreateRecordLink(SVOp,curcomp,WSp,curcomp);
    res = 1;
  end;
LRecordAction_raPasteSVOInWS:;
  RecordAction_raPasteSVOInWS = res;
  return;
end;

global
updating function boolean RecordAction_raPasteSVOInQT(var record QTVc QTr,record SVOVc SVOr)
begin
  boolean res;
  LongInt newnr;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  Integer k,curcomp;
  string 255 tstr;
  record QTSettBlock QTSb;
  record UserVc Userr;
  string 20 curcode;
  val fr,to1,to2,br1,br2;
  row QTVc QTrw;

  BlockLoad(QTSb);
  curcomp = CurrentCompany;

  res = false;
  RecordNew(QTr);
  QTr.SerNr = -1;
  QTr.QTDate = CurrentDate;
  QTr.SerNr = NextSerNr("QTVc",QTr.QTDate,newnr,false,"");
  if (QTr.SerNr==-1) then begin
      goto LRecordAction_raPasteSVOInQT;
  end;
  QTr.CustCode = SVOr.CustCode;
  if (PasteCustInQT(QTr,QTr.CustCode,"",tstr,true)) then begin end;
    
  curcode = QTr.CurncyCode;
  GetFullCurncyRate(curcode,QTr.QTDate,fr,to1,to2,br1,br2);
  QTr.CurncyCode = curcode;
  QTr.FrRate = fr;
  QTr.ToRateB1 = to1; 
  QTr.ToRateB2 = to2;
  QTr.BaseRate1 = br1;
  QTr.BaseRate2 = br2;
  if (QTSb.DefaultValidDays>0) then begin
    QTr.ValidUntilDate = AddDay(QTr.QTDate,QTSb.DefaultValidDays);
  end;

  QTr.Addr0 = SVOr.Addr0;
  QTr.CustContact = SVOr.CustContact;
  Userr.Code = CurrentUser;
  if ReadFirstMain(Userr,1,true) then begin 
    QTr.OurContact = Userr.Name;
  end;
  QTr.PayDeal = SVOr.PayDeal;
  QTr.SVOSerNr = SVOr.SerNr;
  QTr.SalesMan =  CurrentUser;
  Userr.Code = CurrentUser;
  if ReadFirstMain(Userr,1,true) then begin 
    QTr.LangCode = Userr.LangCode;
  end;
  QTr.Rejected = 0;
  QTr.Comment = SVOr.Comment1;
  QTr.Comment2 = SVOr.Comment2;
  QTr.Comment3 = SVOr.Comment3;
  QTr.Comment4 = SVOr.Comment4;
  QTr.ShipAddr0 = SVOr.ShipAddr0;
  QTr.ShipAddr1 = SVOr.ShipAddr1;
  QTr.ShipAddr2 = SVOr.ShipAddr2;
  QTr.ShipAddr3 = SVOr.ShipAddr3;
  QTr.DelAddr3 = SVOr.DelAddr3;
  QTr.DelAddr4 = SVOr.DelAddr4;
  QTr.DelAddrCode = SVOr.DelAddrCode;
  rwcnt = MatRowCnt(SVOr);
  if (rwcnt>0) then begin 
    MatRowGet(SVOr,0,SVOrw);
    ClearRow(QTr,QTrw,1);
    QTrw.Spec = "Item to be repaired: " & SVOrw.Spec;
    MatRowPut(QTr,0,QTrw);
    ClearRow(QTr,QTrw,1);
    QTrw.Spec = "Serial Number: " & SVOrw.SerialNr;
    MatRowPut(QTr,1,QTrw);
  end;  

  if (QTr.SerNr!=-1) then begin
    if (RecordInsert(QTr,false)) then begin
      CreateRecordLink(QTr,curcomp,SVOr,curcomp);  
      CreateRecordLink(SVOr,curcomp,QTr,curcomp);
      res = true;
    end;
  end;
 LRecordAction_raPasteSVOInQT:;
  RecordAction_raPasteSVOInQT = res;
  return;
end;


global
updating function boolean RecordAction_raPasteQTInWS(var record WSVc WSp,record QTVc QTr)
begin
  boolean res;
  LongInt newnr;
  row QTVc QTrw;
  row WSVc WSrw;
  record UserVc USr;
  Integer i,rwcnt;
  Integer k,curcomp;
  string 255 tstr,warning;
  string 20 curcode;
  val fr,to1,to2,br1,br2;
  record MainStockBlock MainStockRec;
  Boolean chsum;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  string 60 nun;
  Integer itemtyp;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code;
  Boolean calcprice,dummyf;
  record INVc INr;
  record GeneralOptionBlock GenOptRec;
  string 255 taxtemplatecode;
  string 20 costacc;

  BlockLoad(GenOptRec);

  curcomp = CurrentCompany;
  res = false;
  RecordNew(WSp);
  
  WSp.Location = QTr.Location;
  WSp.CustCode = QTr.CustCode;
  if (PasteCUInWS(WSp,warning)) then begin
  end;
  WSp.Addr0 = QTr.Addr0;
  WSp.Comment1 = QTr.Comment;
  WSp.Comment2 = QTr.Comment2;
  WSp.Comment3 = QTr.Comment3;
  WSp.Comment4 = QTr.Comment4;
  WSp.SVONr = QTr.SVOSerNr;
  GetCurUser(USr);
  WSp.EMCode = USr.Code;
  WSp.EMName = USr.Name;
  GetSalesGroup(WSp.EMCode,tstr);
  WSp.SalesGroup = tstr;
  WSp.CustContact = QTr.CustContact;
  WSp.Objects = QTr.Objects;
  WSp.CurncyCode = QTr.CurncyCode;
  WSp.FrRate = QTr.FrRate;
  WSp.ToRateB1 = QTr.ToRateB1;
  WSp.ToRateB2 = QTr.ToRateB2;
  WSp.BaseRate1 = QTr.BaseRate1;
  WSp.BaseRate2 = QTr.BaseRate2;
  WSp.InclVAT = QTr.InclVAT;
      
  WSp.WONr = -1;
  SVOr.SerNr = QTr.SVOSerNr;
  if ReadFirstMain(SVOr,1,true) then begin 
    if (MatRowCnt(QTr)>=0) then begin 
      MatRowGet(SVOr,0,SVOrw);
      nun = SVOrw.SerialNr;
      itemtyp = SVOrw.ItemType;
    end;
  end;  

  k = 0;
  rwcnt = MatRowCnt(QTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTr,i,QTrw);
    ClearRow(WSp,WSrw,1);
    WSrw.ArtCode = QTrw.ArtCode;
    WSrw.SerialNr = QTrw.SerialNr;
    WSrw.Quant = QTrw.Quant;
    WSrw.Spec = QTrw.Spec;
    WSrw.Price = QTrw.Price;
    WSrw.vRebate = QTrw.vRebate;
    WSrw.Sum = QTrw.Sum;
    WSrw.VATCode = QTrw.VATCode;
    WSrw.BasePrice = QTrw.BasePrice;
    WSrw.Objects  = QTrw.Objects;
    WSrw.SalesAcc = QTrw.SalesAcc;
    if nonblank(WSrw.ArtCode) then begin 
      if (ReadFirstItem(WSrw.ArtCode,INr,true,true)) then begin
        GetINCostAcc(INr,costacc);
      end;
      WSrw.CostAcc = costacc;
      WSrw.MotherNr = nun;
      WSrw.ItemType = itemtyp;
    end;  
    MatRowPut(WSp,k,WSrw);
    chsum = WSDchrsum(WSp,k,GenOptRec.UseDiscount);
    k = k +1;
  end;  
  WSp.TransDate = CurrentDate;
  WSp.SerNr = NextSerNr("WSVc",WSp.TransDate,-1,false,"");
  if (WSp.SerNr!=-1) then begin
    WSSumup(WSp);  
    if (RecordInsert(WSp,false)) then begin
      CreateRecordLink(WSp,curcomp,QTr,curcomp);  
      CreateRecordLink(QTr,curcomp,WSp,curcomp);
      res = true;
    end;
  end;
  RecordAction_raPasteQTInWS = res;
  return;
end;

function Boolean FindPI(string itemcode,string location,record PIVc PIp)
begin
  Boolean res;
  record POSettingBlock POSb;
  record INVc INr;
  
  res = GetFirstPurchaseItem2(itemcode,location,"",PIp);
  if (res==false) then begin
    if (ReadFirstItem(itemcode,INr,false,false)) then begin end;
    res = GetFirstPurchaseItem2(INr.Code,location,"",PIp);
  end;
  if (res==false) then begin
    BlockLoad(POSb);
    if (nonblank(POSb.DefaultSupplier)) then begin
      RecordNew(PIp);
      PIp.ItemCode = itemcode;
      PIp.VEItemCode = itemcode;
      PIp.VECode = POSb.DefaultSupplier;
      res = true;
    end;
  end;
  FindPI = res;
  return;
end;

procedure CreatePOHeader(string artcode,var record POVc POp,record WOVc WOp)
begin
  record PIVc PIr;
  Boolean testf;
 
  if (POp.WONr<=0) then begin
    POp.TransDate = CurrentDate;
    POp.OSFlag = 0;
    POp.InvFlag = 0;
    POp.PIFlag = 0;
    POp.ExportedFlag = 0;
    POp.OKFlag = 0;
    POp.WONr = WOp.SerNr;
    if (POp.SerNr<=0) then begin
      POp.SerNr = NextSerNr("POVc",POp.TransDate,-1,false,"");
    end;
  end;
  testf = FindPI(artcode,POp.Location,PIr);
  if (blank(POp.VECode)) then begin 
    POp.VECode = PIr.VECode;
    if (PasteVEInPO(POp,false)) then begin end; 
  end else begin
    if (POp.VECode!=PIr.VECode) then begin
      POp.VECode = "";
      if (PasteVEInPO(POp,false)) then begin end; 
    end;
  end;
  return;
end;

procedure AddItemToWOHandle(Array string aArtCode,Array string aSerialNr,Array string aLocation,
                            Array val aOrdered,Array LongInt aOrdRow,var Integer acnt,
                            string artcode,string serialnr,string location,LongInt wsnr,val qtyp)
begin
  Integer i;

  for (i=0;i<acnt;i=i+1) begin
    if ((aOrdRow[i]==wsnr) and (aArtCode[i]==artcode) and ((blank(serialnr)) or (aSerialNr[i]==serialnr))) then begin
      aOrdered[i] = aOrdered[i] + qtyp;
      goto LAddItemToWOHandle;
    end;
  end;
  aArtCode[acnt] = artcode;
  aSerialNr[acnt] = serialnr;
  aLocation[acnt] = location;
  aOrdered[acnt] = qtyp;
  aOrdRow[acnt] = wsnr;
  acnt = acnt + 1;
LAddItemToWOHandle:;
  return;
end;

procedure AddPORowFromWS(string ArtCode,string SerialNr,string Location,val Ordered,LongInt OrdRow,
                         var record POVc POp,val instockp)
begin
  record PIVc PIr;
  record INVc INr;
  row POVc POrw;
  Integer rwcnt;
  string 255 tstr;
  val s;
  
  rwcnt = MatRowCnt(POp);
  ClearRow(POp,POrw,1);
  POrw.stp = 1;
  POrw.ovst = 0;
  if (ReadFirstItem(ArtCode,INr,true,false)==false) then begin end;
  PIr.ItemCode = ArtCode;
  if (ReadFirstMain(PIr,1,true)) then begin
    POrw.VEArtCode = PIr.VEItemCode;
    POrw.Price = PIr.PurPrice;
    POrw.PIFactor = PIr.PIFactor;
  end else begin
    POrw.VEArtCode = "";
    POrw.PIFactor = blankval;
    POrw.Price = INr.InPrice;    
  end;  
  POrw.PriceFactor = INr.PriceFactor;
  POrw.WSNr = OrdRow;
  POrw.ArtCode = ArtCode;
  POrw.Spec = INr.Name;
  GetItemVATCode(INr.Code,POp.ExportFlag,tstr,true);
  POrw.VATCode = tstr;
  GetINCostAcc(INr,tstr);
  POrw.CostAcc = tstr;
  POrw.Objects = FindINObjects(INr.Objects,INr.Group);
  POrw.PRCode = "";
  POrw.Quant = Ordered - instockp;  
  CalcSum(POrw.Quant,POrw.Price,POrw.PriceFactor,POrw.vRebate,s,0);
  POrw.Sum = s;
  MatRowPut(POp,rwcnt,POrw);    
  return;
end;

updating procedure MakePOFromWO(record WOVc WOp,var record POVc POp)
begin
  record INVc INr;
  record ItemStatusVc ISr;
  record WSVc WSr;
  row WSVc WSrw;
  row SHVc tmprwp;
  Boolean TrHs,testf;
  Integer i,acnt,rwcnt;
  Array string 20 aArtCode;
  Array string 30 aSerialNr;
  Array string 10 aLocation;
  Array val aOrdered;
  Array LongInt aOrdRow;
   
  if (WOp.Closed!=2) then begin goto LMakePOFromWO; end;

  TrHs = true;
  WSr.WONr = WOp.SerNr;
  while (LoopKey("WONr",WSr,1,TrHs)) begin
    if (WSr.WONr!=WOp.SerNr) then begin TrHs = false; end;
    if (TrHs)  then begin
       rwcnt = MatRowCnt(WSr);
       for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(WSr,i,WSrw);
          testf = true;
          if (ReadFirstItem(WSrw.ArtCode,INr,true,true)==false) then begin testf = false; end;
          if ((INr.ItemType!=0) and (INr.ItemType!=1)) then begin testf = false; end;
          if (INr.Terminated!=0) then begin testf = false; end;
          if (WSr.OKFlag!=0) then begin testf = false; end;
          if (WSr.PrelOK!=0) then begin testf = false; end;
          if (testf) then begin
            AddItemToWOHandle(aArtCode,aSerialNr,aLocation,aOrdered,aOrdRow,acnt,WSrw.ArtCode,WSrw.SerialNr,WSr.Location,WSr.SerNr,WSrw.Quant);
          end;          
       end;
    end;      
  end;
  if (acnt>0) then begin
    for (i=0;i<acnt;i=i+1) begin
      FindStockValue(aArtCode[i],aLocation[i],ISr);
      if (ISr.Instock<aOrdered[i]) then begin
        CreatePOHeader(aArtCode[i],POp,WOp);
        AddPORowFromWS(aArtCode[i],aSerialNr[i],aLocation[i],aOrdered[i],aOrdRow[i],POp,ISr.Instock);
        if (MatRowCnt(POp)>=180) then begin
          if (POp.SerNr!=-1) then begin
            POSumup(POp);
            if (RecordStore(POp,false)) then begin end;
            RecordNew(POp);
            CreatePOHeader(aArtCode[i],POp,WOp);
          end;
        end;
      end;
    end;
  end;
LMakePOFromWO:;
  return;
end;

global
updating function LongInt RecordAction_raPasteWOInPO(record WOVc WOp,var record POVc POp)
begin
  LongInt res;
  Boolean testf;

  if (ReadFirstMain(WOp,0,true)) then begin end;  
  RecordNew(POp);
  POp.WONr = WOp.SerNr;
  MakePOFromWO(WOp,POp);
  if (POp.SerNr<=0) then begin
    POp.SerNr = NextSerNr("POVc",POp.TransDate,-1,false,"");
  end;                    
  if (POp.SerNr<=0) then begin goto LRecordAction_raPasteWOInPO; end;
  if (MatRowCnt(POp)>0) then begin
    POSumup(POp);
    if (RecordStore(POp,false)) then begin
      res = 1;
    end;
  end;
LRecordAction_raPasteWOInPO:;
  RecordAction_raPasteWOInPO = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteIntOrdInStockMov(var record IntORVc IntORp,var record StockMovVc StockMovp,Boolean readf)
begin
  LongInt res;
  record IntORClassVc IntORClassr;
  record AcceptSetBlock AcceptSet;
  
  if (readf) then begin
    if (ReadFirstMain(IntORp,0,true)) then begin end;  
  end;
  if (nonblank(IntORp.IntORClass)) then begin
    IntORClassr.Code = IntORp.IntORClass;
    if (ReadFirstMain(IntORClassr,1,true)) then begin
      if (IntORClassr.DisallowStockMov==1) then begin
        res = -3;
        goto LRecordAction_raPasteIntOrdInStockMov;
      end;  
    end;  
  end;    
  BlockLoad(AcceptSet) 
  if (IntORp.StatusFlag<>1) and (AcceptSet.ForceAcceptIntOR<>0) then begin
    res = -4;
    goto LRecordAction_raPasteIntOrdInStockMov;
  end;
  RecordNew(StockMovp);
  PasteIntOrdInStockMov(IntORp,StockMovp);
  if (StockMovp.SerNr<=0) then begin
    StockMovp.SerNr = NextSerNr("StockMovVc",StockMovp.TransDate,-1,false,"");
  end;  
  if (StockMovp.SerNr<=0) then begin goto LRecordAction_raPasteIntOrdInStockMov; end;  
  if (MatRowCnt(StockMovp)>0) then begin
    StockMovSumUp(StockMovp);
    if (RecordStore(StockMovp,false)) then begin
      CreateRecordLink(StockMovp,CurrentCompany,IntORp,CurrentCompany);
      CreateRecordLink(IntORp,CurrentCompany,StockMovp,CurrentCompany);
      res = 1;
    end;
  end;
LRecordAction_raPasteIntOrdInStockMov:;
  RecordAction_raPasteIntOrdInStockMov = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteIntOrdInPO(LongInt intornr,string vecode,var record POVc POp)
begin
  LongInt res;
  record IntORVc IntORp;
  record IntORClassVc IntORClassr;
  record AcceptSetBlock AcceptSet;
  
  IntORp.SerNr = intornr;
  if (ReadFirstMain(IntORp,0,true)) then begin end;  
  if nonblank(IntORp.IntORClass) then begin
    IntORClassr.Code = IntORp.IntORClass;
    if (ReadFirstMain(IntORClassr,1,true)) then begin
      if (IntORClassr.DisallowPO==1) then begin
        res = -3;
        goto LRecordAction_raPasteIntOrdInPO;
      end;  
    end;  
  end;  
  BlockLoad(AcceptSet);
  if (IntORp.StatusFlag<>1) and (AcceptSet.ForceAcceptIntOR<>0) then begin
    res = -4;
    goto LRecordAction_raPasteIntOrdInPO;
  end;
  RecordNew(POp);
  PasteIntOrdInPO(vecode,IntORp,POp);
  if (POp.SerNr<=0) then begin
    POp.SerNr = NextSerNr("POVc",POp.TransDate,-1,false,"");
  end;  
  if (POp.SerNr<=0) then begin goto LRecordAction_raPasteIntOrdInPO; end;  
  if (MatRowCnt(POp)>0) then begin
    POSumUp(POp);
    if (RecordStore(POp,false)) then begin
      CreateRecordLink(IntORp,CurrentCompany,POp,CurrentCompany);
      CreateRecordLink(POp,CurrentCompany,IntORp,CurrentCompany);
      res = 1;
    end;
  end;
LRecordAction_raPasteIntOrdInPO:;
  RecordAction_raPasteIntOrdInPO = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteIntOrdInSD(var record IntORVc IntORp,var record SDVc SDp,Boolean readf)
begin
  LongInt res;
  record IntORClassVc IntORClassr;
  record AcceptSetBlock AcceptSet;
  
  if (readf) then begin
    if (ReadFirstMain(IntORp,0,true)) then begin end;  
  end;
  if nonblank(IntORp.IntORClass) then begin
    IntORClassr.Code = IntORp.IntORClass;
    if (ReadFirstMain(IntORClassr,1,true)) then begin
      if (IntORClassr.DisallowSD==1) then begin
        res = -3;
        goto LRecordAction_raPasteIntOrdInSD;
      end;  
    end;  
  end;    
  BlockLoad(AcceptSet); 
  if (IntORp.StatusFlag<>1) and (AcceptSet.ForceAcceptIntOR<>0) then begin
    res = -4;
    goto LRecordAction_raPasteIntOrdInSD;
  end;
  RecordNew(SDp);
  PasteIntOrdInSD(IntORp,SDp);
  if (SDp.SerNr<=0) then begin
    SDp.SerNr = NextSerNr("SDVc",SDp.TransDate,-1,false,"");
  end;  
  if (SDp.SerNr<=0) then begin goto LRecordAction_raPasteIntOrdInSD; end;  
  if (MatRowCnt(SDp)>0) then begin
    SDSumUp(SDp);
    if (RecordStore(SDp,false)) then begin
      res = 1;
    end;
  end;
LRecordAction_raPasteIntOrdInSD:;
  RecordAction_raPasteIntOrdInSD = res;
  return;
end;

// RecordAction_raPasteTBBUInPO and RecordAction_raPasteTBBUInOR moved to RemoteTools9.hal

global
updating function LongInt RecordAction_raPastePOCOInPO(record POCOVc POCOp,var record POVc POp)
begin
  LongInt res,newnr;
  record SRBlock SRRec;
  
  if (ReadFirstMain(POCOp,0,true)) then begin end;  
  RecordNew(POp);
  if (PastePOCOInPO(POCOp,POp)==false) then begin
    res = -2;
    goto LRecordAction_raPastePOCOInPO;
  end;
  if (POp.SerNr<=0) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("POVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastPurNr;
    end;    
    POp.SerNr = NextSerNr("POVc",POp.TransDate,newnr,false,"");
  end;  
  if (POp.SerNr<=0) then begin goto LRecordAction_raPastePOCOInPO; end;  
  if (MatRowCnt(POp)>0) then begin
    POSumup(POp);
    if (RecordStore(POp,false)) then begin
      res = 1;
    end;
  end;
LRecordAction_raPastePOCOInPO:;
  RecordAction_raPastePOCOInPO = res;
  return;
end;

global
updating function LongInt RecordAction_raPastePOCOInVI(var record POCOVc POCOp,var record VIVc VIp)
begin
  LongInt res,newnr;
  record SRBlock SRRec;
  record POCOVc oldPOCOr;
  row POCOVc POCOrw;
  Integer i,rwcnt;
  val t;
  
  if (ReadFirstMain(POCOp,0,true)) then begin end;  
  RecordCopy(oldPOCOr,POCOp);
  RecordNew(VIp);
  if (PastePOCOInVI(POCOp,VIp)==false) then begin
    res = -2;
    goto LRecordAction_raPastePOCOInVI;
  end;
  if (VIp.SerNr<=0) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("VIVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastVINr;
    end;    
    VIp.SerNr = NextSerNr("VIVc",VIp.TransDate,newnr,false,"");
  end;  
  if (VIp.SerNr<=0) then begin goto LRecordAction_raPastePOCOInVI; end;  
  if (MatRowCnt(VIp)>0) then begin
    VISumup(VIp,t);
    if (RecordStore(VIp,false)) then begin
      rwcnt = MatRowCnt(POCOp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POCOp,i,POCOrw);
        if (POCOrw.VINr==-1) then begin
          POCOrw.VINr = VIp.SerNr;
          MatRowPut(POCOp,i,POCOrw);
        end;
      end;
      if (RecordUpdate(oldPOCOr,POCOp,false)==0) then begin end;      
      res = 1;
    end;
  end;
LRecordAction_raPastePOCOInVI:;
  RecordAction_raPastePOCOInVI = res;
  return;
end;

procedure PastCustInAct(var Record ActVc Actr)
begin
  Record CUVc CUr;
  Row ActVc Actrw;
  
  CUr.Code = Actr.CUCode;
  if readfirstmain(CUr,1,true) then begin
    Actr.CUName = CUr.Name;
    Actr.Phone  = CUr.Phone;
    Actr.Contact = CUr.Person;
    Actrw.Text  = "EMail " & CUr.eMail;
    MatRowPut(Actr,0,Actrw);
    Actrw.Text  = "Fax " & CUr.Fax;
    MatRowPut(Actr,1,Actrw);
  end;
  
  return;
end;

global
updating function LongInt SetupFollowUpAct(Record FollowUpVc FollowUpr,String ActType,String CustCode)
begin
  Record ActVc Actr;
  Integer curcomp;
  Longint Serienro;
  
  curcomp = CurrentCompany;
    RecordNew(Actr);
    Actr.TodoFlag     = 2;
    Actr.PrivateFlag  = 0;
    Actr.SymbNr       = kActivitySymbolCall;
    Actr.CalTimeFlag  = 1;
    Actr.TransDate    = FollowUpr.TransDate;
    Actr.EndDate      = FollowUpr.TransDate;
    Actr.ActType      = ActType;
    Actr.StartTime    = CurrentTime;
    Actr.EndTime      = CurrentTime;
    Actr.MainPersons  = FollowUpr.MainPersons;
    Actr.Comment      = FollowUpr.Comment & " Rva. " & FollowUpr.JobNr & " ($" & FollowUpr.Amount &  ")";
    Actr.CUCode       = CustCode;
    PastCustInAct(Actr);
    Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,""); 
    if (RecordInsert(Actr,false)) then begin 
      CreateRecordLink(Actr,curcomp,FollowUpr,curcomp);
    end;

  SetupFollowUpAct = Actr.SerNr;
  return;
end;

global
updating function Boolean MakeActFromOR(var record ORVc ORr,var record ActVc Actr)
begin
  record ASTBlock ASTRec;
  Integer curcomp;
  Boolean res;
  record CUVc CUr;
  record OrderClassVc ORClassr;
  record ActTypeVc ActTyper;
  record ActTypeGrVc ActTypeGrr;

  if (ReadFirstMain(ORr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = ORr.CustCode;
  Actr.Comment = ORr.Comment;
  Actr.Contact = ORr.CustContact;
  CUr.Code = ORr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    Actr.Phone = CUr.Phone;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = ORr.SalesMan;
    end;
  end;
  BlockLoad(ASTRec);
  Actr.ActType = ASTRec.GenSalesOrd;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  ORClassr.Code = ORr.OrderClass;
  if (ReadFirstMain(ORClassr,1,true)) then begin
    if (nonblank(ORClassr.OrderActCode)) then begin
      Actr.ActType = ORClassr.OrderActCode;
      if (PasteActTypeInAct("",Actr)) then begin
      end;
    end;
  end;
  ActTyper.Code = Actr.ActType;
  if (ReadFirstMain(ActTyper,1,true)) then begin
    Actr.ItemCode = ActTyper.ItemCode;
    ActTypeGrr.Code = ActTyper.ActTypeGr;
    if (ReadFirstMain(ActTypeGrr,1,true)) then begin
      Actr.CalTimeFlag = ActTypeGrr.DefTimeFlag;
    end;
  end;  
  Actr.OKFlag = ASTRec.OrderDone;
  Actr.TransDate = CurrentDate;
  Actr.MainPersons = ORr.SalesMan;
  if (ORr.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  Actr.Comment = ORr.Comment;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,ORr,curcomp);  
    CreateRecordLink(ORr,curcomp,Actr,curcomp);  
    res = true;
  end;  
  MakeActFromOR = res;
  return;
end;

global
updating function Boolean MakeActFromCU(record CUVc CUr,var record ActVc Actr,Boolean readf)
begin
  record ASTBlock ASTRec;
  Integer curcomp;
  Boolean res;
  record ContactRelVc ContactRelr;
  
  if (readf) then begin
    if (ReadFirstMain(CUr,0,true)) then begin end;  
  end;
  curcomp = CurrentCompany;
  Actr.MainPersons = CurrentUser;
  Actr.CUCode = CUr.Code;
  Actr.CUName = CUr.Name;
  if ((CUr.CUType==0) and (CUr.VEType==0)) then begin
    ContactRelr.ContactCode = CUr.Code;
    if (ReadFirstKey("ActContactCode",ContactRelr,1,true)) then begin
      Actr.CUCode = ContactRelr.CustCode;
      Actr.CUName = ContactRelr.CustName;
      Actr.Contact = CUr.Name;
    end;
  end;
  if (blank(Actr.Contact)) then begin Actr.Contact = CUr.Person; end;
  if (blank(Actr.Phone)) then begin Actr.Phone = CUr.Phone; end;
  BlockLoad(ASTRec);
  Actr.TransDate = CurrentDate;
  Actr.TodoFlag = 1;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (RecordStore(Actr,false)) then begin
    CreateRecordLink(Actr,curcomp,CUr,curcomp);
    CreateRecordLink(CUr,curcomp,Actr,curcomp);
    res = true;
  end;
  MakeActFromCU = res;
  return;
end;

global
function Boolean MakeMailFromCU(record CUVc CUr,var record MailVc Mailr,Boolean readf)
begin
  record ASTBlock ASTRec;
  Boolean res;
  string 255 tstr;
  row MailVc marw;
  string 255 mailboxnr;
  
  if (readf) then begin
    if (ReadFirstMain(CUr,0,true)) then begin end;  
  end;
  RecordNew(Mailr);

  if ((CurUserHasMailbox(tstr)==false) or (blank(CUr.eMail))) then begin
    MessageBox(2289,"");
    goto LMakeMailFromCU;
  end else begin
    FindUserMailboxName(CurrentUser,mailboxnr,tstr);
    MatRowGet(Mailr,0,marw);
    marw.AddrCode = tstr;
    MatRowPut(Mailr,0,marw);
  end;
  if (InterNetAddrTest(CUr.eMail)==false) then begin
    MessageBox(1353,CUr.eMail);
    goto LMakeMailFromCU;
  end;
  ClearRow(Mailr,marw,1);
  marw.RowTyp = 0;
  marw.AddrCode = CUr.eMail;
  MatRowPut(Mailr,1,marw);
  res = true;
LMakeMailFromCU:;  
  MakeMailFromCU = res;
  return;
end;

global
updating function Boolean MakeActFromPR(record PRVc PRr,var record ActVc Actr)
begin
  Integer curcomp;
  Boolean res;
  record CUVc CUr;

  if (ReadFirstMain(PRr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 0;
  Actr.MainPersons = CurrentUser;
  if (PRr.Leader!=CurrentUser) then begin
    Actr.CCPersons = PRr.Leader;
  end;
  Actr.Comment = PRr.Name;
  Actr.TransDate = PRr.StartDate;
  Actr.EndDate = PRr.EndDate;
  Actr.CostTime = TimeDiff(Actr.StartTime,Actr.EndTime);
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  Actr.PrioLevel = -1;
  Actr.PRCode = PRr.Code;
  Actr.CUCode = PRr.CustCode;
  Actr.Contact = PRr.Contact;
  Actr.CUName = PRr.CustName;
  CUr.Code = PRr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.Phone = CUr.Phone;
  end;
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,PRr,curcomp);  
    CreateRecordLink(PRr,curcomp,Actr,curcomp);  
    res = true;
  end;  
  MakeActFromPR = res;
  return;
end;

global
procedure SetActTypeValues(record ActVc Actr)
begin
  record ActTypeVc ActTyper;
  record ActTypeGrVc ActTypeGrr;
  
  ActTyper.Code = Actr.ActType;
  if (ReadFirstMain(ActTyper,1,true)) then begin
    Actr.ItemCode = ActTyper.ItemCode;
    ActTypeGrr.Code = ActTyper.ActTypeGr;
    if (ReadFirstMain(ActTypeGrr,1,true)) then begin
      Actr.CalTimeFlag = ActTypeGrr.DefTimeFlag;
    end;
  end;
  return;
end;

global
updating function Boolean MakeActFromQT(record QTVc QTr,var record ActVc Actr)
begin
  record ASTBlock ASTRec;
  record CUVc CUr;
  Integer curcomp;
  Boolean res;

  if (ReadFirstMain(QTr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = QTr.CustCode;
  Actr.Comment = QTr.Comment;
  Actr.Contact = QTr.CustContact;
  Actr.Phone = QTr.Phone;
  Actr.PRCode = QTr.PRCode;
  CUr.Code = QTr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = CUr.Person;
    end;
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  BlockLoad(ASTRec);
  Actr.ActType = ASTRec.Quotes;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTRec.QuotesDone;
  if (nonblank(QTr.MakeContactDate)) then begin
    Actr.TransDate = StringToDate(QTr.MakeContactDate);
    Actr.EndDate = StringToDate(QTr.MakeContactDate);
  end else begin
    Actr.TransDate = QTr.QTDate;
  end;  
  SetActTypeValues(Actr);
  Actr.MainPersons = QTr.SalesMan;
  if (QTr.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,QTr,curcomp);  
    CreateRecordLink(QTr,curcomp,Actr,curcomp);
    res = true;  
  end; 
  MakeActFromQT = res;
  return;
end;

global
updating function Boolean MakeActFromRentQT(record RentQTVc RentQTr,var record ActVc Actr)
begin
  record ASTBlock ASTRec;
  record CUVc CUr;
  Integer curcomp;
  Boolean res;

  if (ReadFirstMain(RentQTr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = RentQTr.CustCode;
  Actr.Comment = RentQTr.InvComment;
  Actr.Contact = RentQTr.ClientContact;
  Actr.Phone = RentQTr.Phone;
  CUr.Code = RentQTr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = CUr.Person;
    end;
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  BlockLoad(ASTRec);
  Actr.ActType = ASTRec.RentQT;
  if (blank(Actr.ActType)) then begin
    Actr.ActType = ASTRec.Quotes;
  end;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTRec.RentQTDone;
  if (Actr.OKFlag==0) then begin
    Actr.OKFlag = ASTRec.QuotesDone;
  end;
  if (nonblank(RentQTr.MakeContactDate)) then begin
    Actr.TransDate = StringToDate(RentQTr.MakeContactDate);
    Actr.EndDate = StringToDate(RentQTr.MakeContactDate);
  end else begin
    Actr.TransDate = CurrentDate;
  end;  
  SetActTypeValues(Actr);
  Actr.MainPersons = RentQTr.SalesMan;
  if (RentQTr.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,RentQTr,curcomp);  
    CreateRecordLink(RentQTr,curcomp,Actr,curcomp);
    res = true;  
  end; 
  MakeActFromRentQT = res;
  return;
end;

global
updating function Boolean MakeActFromSVO(record SVOVc SVOr,var record ActVc Actr,Integer activerow)
begin
  record CUVc CUr;
  Integer curcomp;
  Boolean res;
  Integer rownr;
  row SVOVc SVOrw;
  record ASTBlock ASTb;

  if (ReadFirstMain(SVOr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = SVOr.CustCode;
  Actr.Comment = SVOr.Comment1;
  Actr.Contact = SVOr.CustContact;
  Actr.Phone = SVOr.Phone;
  CUr.Code = SVOr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = CUr.Person;
    end;
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  if (nonblank(SVOr.PlanShip)) then begin
    Actr.TransDate = StringToDate(SVOr.PlanShip);
    Actr.EndDate = StringToDate(SVOr.PlanShip);
  end else begin
    Actr.TransDate = SVOr.TransDate;
  end;  
  BlockLoad(ASTb);
  Actr.ActType = ASTb.GenServOrder;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  Actr.OKFlag = ASTb.SVODone;
  SetActTypeValues(Actr);
  Actr.MainPersons = SVOr.SalesMan;
  if (SVOr.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  Actr.SVOSerNr = SVOr.SerNr;
  if (MatRowCnt(SVOr)>0) then begin
    rownr = activerow;
    if (rownr<0) then begin rownr = 0; end;
    MatRowGet(SVOr,rownr,SVOrw);
  end;
  Actr.SerialNr = SVOrw.SerialNr;
  Actr.ArtCode = SVOrw.ArtCode;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,SVOr,curcomp);  
    CreateRecordLink(SVOr,curcomp,Actr,curcomp);  
    res = true;
  end; 
  MakeActFromSVO = res;
  return;
end;

global
updating function Boolean MakeSVOFromSVOSer(record SVOSerVc SVOSerr,var record SVOVc SVOr)
begin
  record CUVc CUr;
  Integer curcomp;
  Boolean res;
  record ASTBlock ASTb;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  string 255 frrlink,torlink,warning;

  BlockLoad(ASTb);
  curcomp = CurrentCompany;

  RecordNew(SVOr);
  ClearRow(SVOr,SVOrw,1);
  i = 0;
  SVOrw.ArtCode = SVOSerr.ItemCode;
  SVOrw.Quant = 1;
  SVOrw.SerialNr = SVOSerr.SerialNr;
  MatRowPut(SVOr,i,SVOrw);
  if (PasteItemInSVO(SVOr,i)) then begin end;
  if (SVO_PasterSerialNr(SVOr,i,warning)) then begin end;
  if (blank(SVOr.CustCode)) then begin
    SVOr.CustCode = SVOSerr.CustCode;
    if (PasteCUInSVO(SVOr,"",warning)) then begin
    end;
  end;
  SVOr.SerNr = NextSerNr("SVOVc",SVOr.TransDate,-1,false,"");

  if (RecordStore(SVOr,false)) then begin 
    res = true;
  end; 
  MakeSVOFromSVOSer = res;
  return;
end;

global
updating function Boolean MakeActFromWO(record WOVc WOr,var record ActVc Actr)
begin
  record ASTBlock ASTb;
  record CUVc CUr;
  Integer curcomp;
  Boolean res;

  if (ReadFirstMain(WOr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = WOr.CustCode;
  Actr.Comment = WOr.Comment1;
  Actr.Contact = WOr.CustContact;
  Actr.Phone = WOr.Phone;
  Actr.SVOSerNr = WOr.SVOSerNr;
  CUr.Code = WOr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = CUr.Person;
    end;
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  BlockLoad(ASTb);
  Actr.ActType = ASTb.GenWorkOrd;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.WorkOrdDone;
  Actr.TransDate = WOr.TransDate;
  Actr.EndDate = WOr.TransDate;
  SetActTypeValues(Actr);
  Actr.MainPersons = WOr.EMCode;
  Actr.Supervisor = CurrentUser;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,WOr,curcomp);  
    CreateRecordLink(WOr,curcomp,Actr,curcomp);
    res = true;
  end; 
  MakeActFromWO = res;
  return;
end;

global
updating function Boolean MakeActFromWS(record WSVc WSr,var record ActVc Actr)
begin
  record ASTBlock ASTb;
  record CUVc CUr;
  Integer curcomp;
  Boolean res;

  if (ReadFirstMain(WSr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = WSr.CustCode;
  Actr.Comment = WSr.Comment1;
  Actr.Contact = WSr.CustContact;
  Actr.Phone = WSr.Phone;
  Actr.SVOSerNr = WSr.SVONr;
  CUr.Code = WSr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = CUr.Person;
    end;
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  BlockLoad(ASTb);
  Actr.ActType = ASTb.GenWorkSheet;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.WorkSheetDone;
  Actr.TransDate = WSr.TransDate;
  Actr.EndDate = WSr.TransDate;
  Actr.StartTime = CurrentTime;
  SetActTypeValues(Actr);
  Actr.MainPersons = WSr.EMCode;
  Actr.Supervisor = CurrentUser;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,WSr,curcomp);  
    CreateRecordLink(WSr,curcomp,Actr,curcomp);
    res = true;
  end; 
  MakeActFromWS = res;
  return;
end;

global
updating function Boolean MakeActFromHRMPA(record HRMPAVc HRMPAr,var record ActVc Actr)
begin
  record ASTBlock ASTb;
  record CUVc CUr;
  Integer curcomp;
  Boolean res;

  if (ReadFirstMain(HRMPAr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  CUr.Code = HRMPAr.Employee;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = CUr.Person;
    end;
    if (blank(Actr.Phone)) then begin
      Actr.Phone = CUr.Phone;
    end;
  end;
  BlockLoad(ASTb);
  Actr.ActType = ASTb.PerformanceAppraisal;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.PerformanceAppraisalDone;
  Actr.TransDate = HRMPAr.TransDate;
  Actr.EndDate = HRMPAr.TransDate;
  Actr.StartTime = CurrentTime;
  SetActTypeValues(Actr);
  Actr.MainPersons = CurrentUser;
//  Actr.Supervisor = CurrentUser;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,HRMPAr,curcomp);  
    CreateRecordLink(HRMPAr,curcomp,Actr,curcomp);
    res = true;
  end; 
  MakeActFromHRMPA = res;
  return;
end;

global
updating function Boolean MakeActFromSVOSer(record SVOSerVc SVOSerr,var record ActVc Actr)
begin
  record CUVc CUr;
  Integer curcomp;
  Boolean res;
  record ASTBlock ASTb;

  BlockLoad(ASTb);
  curcomp = CurrentCompany;
  RecordNew(Actr);
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.SerialNr = SVOSerr.SerialNr;
  Actr.ArtCode = SVOSerr.ItemCode;
  Actr.CUCode = SVOSerr.CustCode;
  Actr.Comment = "";
  CUr.Code = SVOSerr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    Actr.Contact = CUr.Person;
    Actr.Phone = CUr.Phone;
  end;
  Actr.ActType = ASTb.SVOSer;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.SVOSerDone;
  Actr.MainPersons = CurrentUser;
  Actr.CCPersons = "";
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    res = true;
  end; 
  MakeActFromSVOSer = res;
  return;
end;

global
updating function Boolean MakeActOutgoingPhoneCall2(Integer company,string user,string cucode,string person,
                                                    string callerid,var record ActVc Actr,Integer comidtyp)
begin
  record CUVc CUr;
  Boolean res;
  string 20 compcode;
  Integer oldcomp;
  record ContactRelVc ContactRelr;
  record ASTBlock ASTb;
  record ActVc Act2r;

  BlockLoad(ASTb);
  oldcomp = CurrentCompany;
  if (company>-1) then begin
    SetCompany(company,false);
  end else begin
    if (GetGlobalUserMainCompany(CurrentUser,compcode)) then begin
      if (nonblank(compcode)) then begin
        SetCompanyCode(compcode,false);
      end;
    end;
  end;
  RecordNew(Actr);
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.SymbNr = kActivitySymbolCall;
  Actr.CUCode = cucode;
  Actr.Comment = "";
  Actr.CUName = person;
  CUr.Code = cucode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    Actr.Contact = CUr.Person;
    Actr.Phone = CUr.Phone;
    if ((CUr.CUType==0) and (CUr.VEType==0)) then begin
      ContactRelr.ContactCode = CUr.Code;
      if (ReadFirstKey("ActContactCode",ContactRelr,1,true)) then begin
        Actr.CUCode = ContactRelr.CustCode;
        Actr.CUName = ContactRelr.CustName;
        Actr.Contact = CUr.Name;
      end;
    end;
  end;
  if (callerid!="") then begin
    Actr.Phone = callerid;
  end;
  Actr.MainPersons = user;
  Actr.CCPersons = "";
  RecordNew(Act2r);
  RecordCopy(Act2r,Actr);

  switch (comidtyp) begin
    case comIdTypeSkype:
      Actr.ActType = ASTb.SkypeCalls;
      Actr.OKFlag = ASTb.SkypeCallsDone;
    case comIdTypeAsterisk:
      Actr.ActType = ASTb.AsteriskCalls;
      Actr.OKFlag = ASTb.AsteriskCallsDone;
      Act2r.ActType = ASTb.ServerAsteriskCalls;
      Act2r.OKFlag = ASTb.ServerAsteriskCallsDone;
    case comIdTypeTAPI:
      Actr.ActType = ASTb.AsteriskCalls;
      Actr.OKFlag = ASTb.AsteriskCallsDone;
      Act2r.ActType = ASTb.ServerAsteriskCalls;
      Act2r.OKFlag = ASTb.ServerAsteriskCallsDone;
    otherwise
  end;
  PasteActTypeInAct("",Actr);
  SetActTypeValues(Actr);
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (RecordStore(Actr,true)) then begin
/*    if (CurrentCompany==company) then begin //??
      res = true;
    end;*/
    res = true;
  end;
  if (nonblank(ASTb.ServerAsteriskCalls)) then begin
    Act2r.SerNr = NextSerNr("ActVc",Act2r.TransDate,-1,false,"");
    RecordStore(Act2r,true);
  end;
  ResetCompany(oldcomp);
  MakeActOutgoingPhoneCall2 = res;
  return;
end;

global
updating function Boolean MakeActOutgoingPhoneCall3(string cucode,string person,string callerid,var record ActVc Actr,Integer comidtyp,Integer company)
begin
  MakeActOutgoingPhoneCall3 = MakeActOutgoingPhoneCall2(company,CurrentUser,cucode,person,callerid,Actr,comidtyp);
  return;
end;

global
updating function Boolean MakeActOutgoingPhoneCall(Integer curcompany,string curuser,string cucode,string person,
                                                   string callerid,var record ActVc Actr)
begin
  MakeActOutgoingPhoneCall = MakeActOutgoingPhoneCall2(curcompany,curuser,cucode,person,callerid,Actr,comIdTypePhone);
end;

function Boolean GetCallerContactRec(string callerid,record CUVc CUr)
begin
  Boolean res;
  
  res = false;
  CUr.AltPhone = callerid;
  if (ReadFirstKey("AltPhone",CUr,1,true)) then begin
    res = true;
  end else begin
    CUr.Mobile = callerid;
    if (ReadFirstKey("Mobile",CUr,1,true)) then begin
      res = true;
    end else begin
      CUr.SkypeName = callerid;
      if (ReadFirstKey("SkypeName",CUr,1,true)) then begin
        res = true;
      end else begin
        CUr.Phone = callerid;
        if (ReadFirstKey("AllPhones",CUr,1,true)) then begin
          res = true;
        end else begin
          CUr.SIPCode = callerid;
          if (ReadFirstKey("SIPCode",CUr,1,true)) then begin
            res = true;
          end;
        end;
      end;
    end;
  end;
  GetCallerContactRec = res;
  return;
end;

global
updating function Boolean MakeActSMS(record SMSVc SMSr,var record ActVc Actr)
begin
  record CUVc CUr;
  Integer curcomp;
  Boolean res;
  record ASTBlock ASTb;

  BlockLoad(ASTb);
  curcomp = CurrentCompany;
  RecordNew(Actr);
  Actr.SerNr = -1;
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.SymbNr = kActivitySymbolCall;
  Actr.Comment = StringFromText(SMSr,0,60);
  if (blank(Actr.Comment)) then begin
    Actr.Comment = ASTb.SMS;
  end;
  if (GetCallerContactRec(SMSr.PhoneNo,CUr)==false) then begin
    RecordNew(CUr);
  end;
  Actr.CUCode = CUr.Code;
  Actr.CUName = CUr.Name;
  Actr.Contact = CUr.Person;
  Actr.Phone = CUr.Phone;
  if (nonblank(SMSr.PhoneNo)) then begin
    Actr.Phone = SMSr.PhoneNo;
  end;
  if (nonblank(SMSr.Person)) then begin
    Actr.Contact = SMSr.Person;
  end;
  if (nonblank(SMSr.FromPhoneNo)) then begin
    Actr.Phone = SMSr.FromPhoneNo;
  end;
  if (blank(Actr.ActType)) then begin
    Actr.ActType = ASTb.SMS;
  end;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  SetActTypeValues(Actr);
  Actr.OKFlag = ASTb.SMSDone;
  Actr.MainPersons = CurrentUser;
  Actr.CCPersons = "";
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
// These cause crashes in HM....
  if (RecordStore(Actr,false)) then begin
//    CreateRecordLink(Actr,curcomp,SMSr,curcomp);  
//    CreateRecordLink(SMSr,curcomp,Actr,curcomp);
    res = true;
  end;
  MakeActSMS = res;
  return;
end;
global
updating function Boolean MakeActFromRsrtEvent(record RsrtEventVc RsrtEventr,var record ActVc Actr)
begin
  record CUVc CUr;
  Integer curcomp;
  Boolean res;
  Integer rownr;
  record ASTBlock ASTb;

  if (ReadFirstMain(RsrtEventr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  RecordNew(Actr);  
  Actr.Invalid = 0;
  Actr.TodoFlag = 0;
  Actr.CalTimeFlag = 1;
  Actr.Comment = RsrtEventr.Comment;
  Actr.TransDate = RsrtEventr.StartDate;
  Actr.EndDate = RsrtEventr.EndDate;
  Actr.StartTime = RsrtEventr.StartTime;
  Actr.EndTime = RsrtEventr.EndTime;
  Actr.Resources = RsrtEventr.ResCode;

  BlockLoad(ASTb);
  Actr.ActType = ASTb.RsrtEvent;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
//  Actr.OKFlag = ASTb.SVODone;
  SetActTypeValues(Actr);
  Actr.MainPersons = CurrentUser;
  Actr.RsrtEventSerNr = RsrtEventr.SerNr;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,RsrtEventr,curcomp);  
    CreateRecordLink(RsrtEventr,curcomp,Actr,curcomp);  
    res = true;
  end; 
  MakeActFromRsrtEvent = res;
  return;
end;

global
updating function Boolean MakeActFromHRMCO(var record ActVc Actr,record HRMCOVc HRMCOr)
begin
  record CUVc CUr;
  Boolean res;

  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  CUr.Code = HRMCOr.Employee;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    Actr.Phone = CUr.Phone;
    Actr.Contact = CUr.Person;
    Actr.CUCode = CUr.Code;
  end;
  Actr.MainPersons = CurrentUser;
  Actr.TransDate = CurrentDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (RecordStore(Actr,false)) then begin
    CreateRecordLink(Actr,CurrentCompany,HRMCOr,CurrentCompany);
    CreateRecordLink(HRMCOr,CurrentCompany,Actr,CurrentCompany);
    res = true;
  end;  

  MakeActFromHRMCO = res;
  return;
end;

global
updating function Boolean MakeActFromHRMCOChange(var record ActVc Actr,record HRMCOChangeVc HRMCOCr)
begin
  record CUVc CUr;
  Boolean res;

  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  CUr.Code = HRMCOCr.Employee;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actr.CUName = CUr.Name;
    Actr.Phone = CUr.Phone;
    Actr.Contact = CUr.Person;
    Actr.CUCode = CUr.Code;
  end;
  Actr.MainPersons = CurrentUser;
  Actr.TransDate = CurrentDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (RecordStore(Actr,false)) then begin
    CreateRecordLink(Actr,CurrentCompany,HRMCOCr,CurrentCompany);
    CreateRecordLink(HRMCOCr,CurrentCompany,Actr,CurrentCompany);
    res = true;
  end;  

  MakeActFromHRMCOChange = res;
  return;
end;

