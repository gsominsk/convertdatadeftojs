external procedure MkplUpdateCustomerData(record CYBlock);
external function Integer CountObjects(string);
external function Boolean HasServerInCloud();
remote procedure DoLoginClientLogoFileDownloadCheck();
external procedure NormalizeObjstr(var string);
external procedure ExtractObj(string,var Integer,var string);
external function string 255 AddStr(string,string,string);
external function string 255 GetNextValue(var string);
external procedure RoundRowSum(string,string,string,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
remote procedure GetPRItemCost(string,string,string,string,Integer,var val);
forward function Boolean FindLocationAccRow(string,row LocationAccBlock);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetUserIDCode(string,var string);
external procedure GetInappsByImportance();

global
function roundmode DefaultRoundMode()
begin
  roundmode res;

  res = DefaultCurRoundOff;
  DefaultRoundMode = res;
  return;
end;

global
function roundmode SetRoundModeD(Integer decimals)
begin
  roundmode res;

  res.decimals = decimals;
  if (res.decimals>7) then begin res.decimals = 2; end;
  if (res.decimals<-24) then begin res.decimals = 2; end;
  res.direction = kRoundingDirectionToFromPosInf; // kRoundingDirectionToFromZero
  res.mode = kRoundingModeHalfUp; //   kRoundingModeTruncate,kRoundingModeHalfUp,kRoundingModeHalfDown, kRoundingModeToEven, kRoundingModeToOdd,
  res.step =   kRoundingStepNone; // kRoundingStep5, kRoundingStep25
  SetRoundModeD = res;
  return;
end;

global
function roundmode SetRoundMode(Integer decimals,Integer direction,Integer mode,Integer step)
begin
  roundmode res;

  res.decimals = decimals;
  if (res.decimals>7) then begin res.decimals = 2; end;
  if (res.decimals<-24) then begin res.decimals = 2; end;
  res.direction = direction; // kRoundingDirectionToFromPosInf ,kRoundingDirectionToFromZero
  res.mode = mode; //  kRoundingModeTruncate, kRoundingModeHalfUp,kRoundingModeHalfDown, kRoundingModeToEven, kRoundingModeToOdd,
  res.step =   step; // kRoundingStepNone,kRoundingStep5, kRoundingStep25
  SetRoundMode = res;
  return;
end;
 
function roundmode GetRoundMode(record RoundBlock Rb,string typ)
begin
  roundmode res;

  switch (typ) begin
    case "vat":
      res.decimals = Rb.RndVATDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = Rb.RndVATDirec;
      res.mode = Rb.RndVATMode;
      res.step =  Rb.RndVATStep;
    case "total":
      res.decimals = Rb.RndTotalDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = Rb.RndTotalDirec;
      res.mode = Rb.RndTotalMode;
      res.step =  Rb.RndTotalStep;
    case "cost":
      res.decimals = Rb.RndCostDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = Rb.RndCostDirec;
      res.mode = Rb.RndCostMode;
      res.step =  Rb.RndCostStep;
    case "rowsum":
      res.decimals = Rb.RndRowsumDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = Rb.RndRowsumDirec;
      res.mode = Rb.RndRowsumMode;
      res.step =  Rb.RndRowsumStep;
    case "default":
      res.decimals = Rb.RndDefaultDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = Rb.RndDefaultDirec;
      res.mode = Rb.RndDefaultMode;
      res.step =  Rb.RndDefaultStep;
    case "defaultcur":
      res.decimals = Rb.RndDefaultCurDecs;
      if (res.decimals>7) then begin res.decimals = 2; end;
      if (res.decimals<-24) then begin res.decimals = 2; end;
      res.direction = Rb.RndDefaultCurDirec;
      res.mode = Rb.RndDefaultCurMode;
      res.step =  Rb.RndDefaultCurStep;
  end;
  GetRoundMode = res;
  return;
end;

global
function roundmode GetVATRoundMode(record RoundBlock Rb)
begin
  roundmode res;

  res = GetRoundMode(Rb,"vat");
  GetVATRoundMode = res;
  return;
end;

global
function roundmode GetTotalRoundMode(record RoundBlock Rb)
begin
  roundmode res;

  res = GetRoundMode(Rb,"total");
  GetTotalRoundMode = res;
  return;
end;

global
function roundmode GetCostRoundMode(record RoundBlock Rb)
begin
  roundmode res;

  res = GetRoundMode(Rb,"cost");
  GetCostRoundMode = res;
  return;
end;

global
function roundmode GetRowSumRoundMode(record RoundBlock Rb)
begin
  roundmode res;

  res = GetRoundMode(Rb,"rowsum");
  GetRowSumRoundMode = res;
  return;
end;

global
function roundmode GetCostRoundModeRB()
begin
  roundmode res;
  record RoundBlock Rb;

  BlockLoad(Rb);
  res = GetRoundMode(Rb,"cost");
  GetCostRoundModeRB = res;
  return;
end;

global
function roundmode GetVATRoundModeRB()
begin
  roundmode res;
  record RoundBlock Rb;

  BlockLoad(Rb);
  res = GetRoundMode(Rb,"vat");
  GetVATRoundModeRB = res;
  return;
end;

global
function roundmode GetRowSumRoundModeRB()
begin
  roundmode res;
  record RoundBlock Rb;

  BlockLoad(Rb);
  res = GetRoundMode(Rb,"rowsum");
  GetRowSumRoundModeRB = res;
  return;
end;

global
procedure CalcPrice(val cp,val pf,val reb,var val price,Integer UseDiscount)
begin
  val p;
  
  switch (UseDiscount) begin
    case 3:
      if (reb!=0) then begin
        p = cp;
        if (pf!=0) then begin
          p = p / pf;
        end;
        if ((reb>=-100) and (reb<=100)) then begin
          p = p + (p * reb / 100.0);
        end;
        price = p;
      end;
  end;
  return;
end;

global
function val FormulaDiscountCalcPrice(val cp,val pf,val p,string reb)
begin
  val res;
  val vreb;
  record GeneralOptionBlock GOb;
  LongInt pos;
  string 255 discount,sep;
  Boolean found;
  
  BlockLoad(GOb);
  res = p;
  if (GOb.FormulaDiscount!=0) then begin
    if (InString(reb,"+")>0) then begin sep = "+"; end;
    if (InString(reb,"*")>0) then begin sep = "*"; end;
    switch (sep) begin
      case "*":
        switch (GOb.UseDiscount) begin
          case 3:
            if (nonblank(reb)) then begin
              found = true;
              pos = 0;
              GetNextSubstring(reb,pos,sep,discount);
              while (nonblank(discount)) begin            
                vreb = EvalToVal(discount);
                CalcPrice(cp,pf,vreb,res,GOb.UseDiscount);
                GetNextSubstring(reb,pos,sep,discount);
              end;
            end;
        end;
    end;
  end;
  if (found==false) then begin
    vreb = EvalToVal(reb);
    CalcPrice(cp,pf,vreb,res,GOb.UseDiscount);
  end;
  FormulaDiscountCalcPrice = res;
  return;
end;

global
function val CalculateDiscountPercentage2(val q,val p,val s,Boolean blankf)
begin
  val res;
  
  res = q*p - s;
  res = res/(q*p);
  res = res*100.00;
  res = Round(res,SetRoundModeD(1));
  if (blankf) then begin
    if (res==0) then begin res = blankval; end;
  end;
  CalculateDiscountPercentage2 = res;
  return;
end;

global
function val CalculateDiscountPercentage(val q,val p,val s)
begin
  CalculateDiscountPercentage = CalculateDiscountPercentage2(q,p,s,false);
  return;
end;

global
function Boolean DiscountedPrice(var val newp,val rvp,roundmode roundoff,Integer UseDiscount)
begin
  val tpr;
  Boolean res;
  record RoundBlock RoundRec;

  res = false;
  BlockLoad(RoundRec);
  if (RoundRec.Discount==1) then begin
//Trace("1.newp=",ValToString(newp,M45Val,"",".",0));        
    switch (UseDiscount) begin
      case 0:
        tpr = newp * rvp;
        tpr = tpr / 100;
        tpr = newp - tpr;
        tpr = Round(tpr,roundoff);
        newp = tpr;
      case 1:
        tpr = newp * rvp;
        tpr = tpr / 100;
        tpr = Round(tpr,roundoff);
        newp = tpr;
      case 2:
        tpr = newp * rvp;
        tpr = tpr / 100;
        tpr = newp + tpr;
        tpr = Round(tpr,roundoff);
        newp = tpr;
    end;
  
    res = true;
  end;
  DiscountedPrice = res;
  return;
end;

global
procedure CalcExtra(val bp,string extra,var val res)
BEGIN
  string 255 tstr;
  val v;

  res = blankval;
  tstr = extra;
  if (nonblank(tstr)) then begin
    if (Mid(tstr,len(tstr)-1,1)=="%") then begin
      tstr = Left(tstr,len(tstr)-1);
      v = StringToVal(tstr,M4Val);
      res = bp*v;
      res = res/100;
    end else begin
      res = StringToVal(tstr,M4Val);
    end;
  end;
  RETURN;
END;

global
procedure CalcSum(val q,val p,val f,val rvp,var val s,Integer UseDiscount)
begin
  val newp,s2;
  Boolean discountedpricef;

  discountedpricef = false;
  newp = p;
  discountedpricef = DiscountedPrice(newp,rvp,DefaultCurRoundOff,UseDiscount);//3 why , must be setting
  s2 = q * newp;
  if (q==blankval) and (newp==blankval) then begin
    s2 = blankval;
  end;
  if (f<>0) then begin
    s2 = s2 / f;
  end;

  if (discountedpricef==false) then begin
    if (s2<>0) then begin
      if (rvp<>0) then begin
        switch (UseDiscount) begin
          case 0:
//            if ((rvp>=-100) and (rvp<=100)) then begin
            if (rvp<=100) then begin
              s2 = s2 - (s2 * rvp / 100.0);
            end;
          case 1:
//            if ((rvp>=-100) and (rvp<=100)) then begin
            if (rvp<=100) then begin
              s2 = s2 * rvp / 100.0;
            end;
          case 2:
//            if ((rvp>=-100) and (rvp<=100)) then begin
            if (rvp<=100) then begin
              s2 = s2 + (s2 * rvp / 100.0);
            end;
        end;
      end;
    end;
  end;        

  s = s2;
  return;
end;

global
function val FormulaDiscountCalcSum(val q,val ap,val f,string reb)
begin
  val res;
  val vreb,p;
  record GeneralOptionBlock GOb;
  LongInt pos;
  string 255 discount,sep;
  Boolean found;
  
  p = ap;
  BlockLoad(GOb);
  if (GOb.FormulaDiscount!=0) then begin
    if (InString(reb,"+")>0) then begin sep = "+"; end;
    if (InString(reb,"*")>0) then begin sep = "*"; end;
    switch (sep) begin
      case "*":
        found = true;
        pos = 0;
        GetNextSubstring(reb,pos,sep,discount);
        while (nonblank(discount)) begin            
          vreb = EvalToVal(discount);
          CalcSum(q,p,f,vreb,res,GOb.UseDiscount);
          p = res/q;
          GetNextSubstring(reb,pos,sep,discount);
        end;
    end;
  end;
  if (found==false) then begin
    vreb = EvalToVal(reb);
    CalcSum(q,p,f,vreb,res,GOb.UseDiscount);
  end;
  FormulaDiscountCalcSum = res;
  return;
end;

global
function Boolean FindLocationAccRow(string location,row LocationAccBlock LAbrw)
begin
  Boolean res;
  record LocationAccBlock LAb;
  Integer i,rwcnt;
  
  BlockLoad(LAb);
  rwcnt = MatRowCnt(LAb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LAb,i,LAbrw);
    if (LAbrw.Location==location) then begin
      res = true;
      goto LFindLocationAccRow;
    end;
  end;
  ClearRow(LAb,LAbrw,1);
LFindLocationAccRow:;
  FindLocationAccRow = res;
  return;
end;

global
function string 255 GetSalesAcc(string defcostacc,string custcode,string location,record AccBlock ARb,record INVc INr,Integer itemgroupaccount,Boolean findnewf)
begin
  string 255 res;  
  record CUVc CUr;
  record ITVc ITr;
  Integer ctype;
  row LocationAccBlock LAbrw;

  if (findnewf==false) then begin
    res = defcostacc;  
    if (nonblank(res)) then begin
      goto LGetSalesAcc;
    end;
  end;
  CUr.Code = custcode;
  if ReadFirstMain(CUr,1,true) then begin
    if (CUr.ExportFlag==0) then begin
      ctype = 0;
    end;
    if ((CUr.ExportFlag==1) or (CUr.ExportFlag==3)) then begin
      ctype = 1;
    end;
    if (CUr.ExportFlag==2) or (CUr.ExportFlag==4) then begin
      ctype = 2;
    end;  
  end;
  FindLocationAccRow(location,LAbrw);
  switch (ctype) begin
    case 0: res = LAbrw.SalesAcc;
    case 1: res = LAbrw.EUSalesAcc;
    case 2: res = LAbrw.ExpSalesAcc;
  end;
  if (nonblank(res)) then begin
    goto LGetSalesAcc;
  end;
  if (itemgroupaccount!=0) then begin
    if (true) then begin
      ITr.Code = INr.Group;
      if ReadFirstMain(ITr,1,true) then begin
        if (nonblank(ITr.SalesAcc) and (ctype<=0)) then begin
          res = ITr.SalesAcc;
        end;  
        if (nonblank(ITr.EUSalesAcc) and (ctype==1)) then begin
          res = ITr.EUSalesAcc;
        end; 
        if (nonblank(ITr.ExpSalesAcc) and (ctype==2)) then begin
          res = ITr.ExpSalesAcc;
        end; 
      end;  
    end;   
  end else begin
    if (blank(res)) then begin
      ITr.Code = INr.Group;
      if ReadFirstMain(ITr,1,true) then begin
        switch (ctype) begin
          case 0: res = ITr.SalesAcc;
          case 1: res = ITr.EUSalesAcc;
          case 2: res = ITr.ExpSalesAcc;
        end;
      end;  
    end;   
  end; 
  if (blank(res)) then begin  
    switch (ctype) begin
      case 0: res = ARb.DomSalesAcc;
      case 1: res = ARb.EUSalesAcc;
      case 2: res = ARb.ExpSalesAcc;
    end;
  end;   
LGetSalesAcc:;
  GetSalesAcc = res;
  return;
end;

global
procedure GetProjMaterialsUsageAcc(record AccBlock ARb,record INVc INr,Integer itemgroupaccount,var string CostAcc,var string tstr)
begin
  record ITVc ITr;
  
  CostAcc = INr.ProjMaterialsUsageAcc;
  if (blank(CostAcc)) then begin  
    if (itemgroupaccount!=0) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        CostAcc = ITr.ProjMaterialsUsageAcc;
      end;
    end;
  end;
  if (blank(CostAcc)) then begin  
    CostAcc = ARb.ProjMaterialsUsageAcc;
  end;
  return;
end;

global
function Boolean GetCOGSAcc(string defcostacc,string custcode,string location,record AccBlock ARb,record INVc INr,Integer itemgroupaccount,Boolean findnewf,Integer SVOItemType,var string CostAcc,var string tstr)
BEGIN
  record CUVc CUr;
  record ITVc ITr;
  Integer ctype;
  Boolean res;
  row LocationAccBlock LAbrw;
   
  res = true;
  if (findnewf==false) then begin
    CostAcc = defcostacc;  
    if (nonblank(CostAcc)) then begin
      goto LGetCostOfSalesAcc;
    end;
  end;
  if (nonblank(custcode)) then begin
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.ExportFlag==0) then begin
        ctype = 0;
      end;
      if ((CUr.ExportFlag==1) or (CUr.ExportFlag==3)) then begin
        ctype = 1;
      end;
      if (CUr.ExportFlag==2) or (CUr.ExportFlag==4) then begin
        ctype = 2;
      end;  
    end;
  end;
  FindLocationAccRow(location,LAbrw);
  switch (ctype) begin
    case 0: CostAcc = LAbrw.CostAcc;
    case 1: CostAcc = LAbrw.EUCostAcc;
    case 2: CostAcc = LAbrw.ExpCostAcc;
  end;
  if (nonblank(CostAcc)) then begin
    goto LGetCostOfSalesAcc;
  end;
  
// Shouldn't this be below the itemgroups... Shouldn't level be item, itemgroup, account usage....
  switch (ctype) begin
    case 0: CostAcc = INr.CostAcc;
    case 1: CostAcc = INr.EUCostAcc;
    case 2: CostAcc = INr.ExpCostAcc;
  end;
  
  if (itemgroupaccount!=0) then begin
    if (true) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        if (nonblank(ITr.CostAcc) and (ctype<=0)) then begin
          CostAcc = ITr.CostAcc;
        end;  
        if (nonblank(ITr.EUCostAcc) and (ctype==1)) then begin
          CostAcc = ITr.EUCostAcc;
        end; 
        if (nonblank(ITr.ExpCostAcc) and (ctype==2)) then begin
          CostAcc = ITr.ExpCostAcc;
        end; 
      end;  
    end;   
  end else begin
    if (blank(CostAcc)) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        switch (ctype) begin
          case 0: CostAcc = ITr.CostAcc;
          case 1: CostAcc = ITr.EUCostAcc;
          case 2: CostAcc = ITr.ExpCostAcc;
        end;
      end;  
    end;   
  end; 
  if (blank(CostAcc)) then begin  
    switch (ctype) begin
      case 0: CostAcc = ARb.StockCostAcc;
      case 1: CostAcc = ARb.EUStockCostAcc;
      case 2: CostAcc = ARb.ExpStockCostAcc;
    end;
  end;   
LGetCostOfSalesAcc:;  
  if (GetAccName(CostAcc,tstr,60)==false) then begin
    CostAcc = "";
    res = false;
  end;
  GetCOGSAcc = res;
  RETURN;
END;

global
function Boolean GetCOSAcc(string defcostacc,string custcode,string location,record AccBlock ARb,record INVc INr,Integer itemgroupaccount,Boolean findnewf,Integer SVOItemType,var string CostAcc,var string tstr)
begin
  record ITVc ITr;
  Boolean res;

  res = true;
  CostAcc = "";
  if (SVOItemType==0) begin
    res = GetCOGSAcc(defcostacc,custcode,location,ARb,INr,itemgroupaccount,findnewf,SVOItemType,CostAcc,tstr);
  end else begin
    switch (SVOItemType) begin
      case 1: CostAcc = INr.SVOInvbleCostAcc;
      case 2: CostAcc = INr.SVOWarrantyCostAcc;
      case 3: CostAcc = INr.SVOContractCostAcc;
      case 4: CostAcc = INr.SVOGoodwillCostAcc;
    end;
    if (itemgroupaccount!=0) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        switch (SVOItemType) begin
          case 1: if (nonblank(ITr.SVOInvbleCostAcc)) then begin CostAcc = ITr.SVOInvbleCostAcc; end;
          case 2: if (nonblank(ITr.SVOWarrantyCostAcc)) then begin CostAcc = ITr.SVOWarrantyCostAcc; end;
          case 3: if (nonblank(ITr.SVOContractCostAcc)) then begin CostAcc = ITr.SVOContractCostAcc; end;
          case 4: if (nonblank(ITr.SVOGoodwillCostAcc)) then begin CostAcc = ITr.SVOGoodwillCostAcc; end;
        end;
      end;
    end else begin
      if (blank(CostAcc)) then begin
        ITr.Code = INr.Group;
        if (ReadFirstMain(ITr,1,true)) then begin
          switch (SVOItemType) begin
            case 1: if (nonblank(ITr.SVOInvbleCostAcc)) then begin CostAcc = ITr.SVOInvbleCostAcc; end;
            case 2: if (nonblank(ITr.SVOWarrantyCostAcc)) then begin CostAcc = ITr.SVOWarrantyCostAcc; end;
            case 3: if (nonblank(ITr.SVOContractCostAcc)) then begin CostAcc = ITr.SVOContractCostAcc; end;
            case 4: if (nonblank(ITr.SVOGoodwillCostAcc)) then begin CostAcc = ITr.SVOGoodwillCostAcc; end;
          end;
        end;
      end;
    end;
    if (blank(CostAcc)) then begin
      res = GetCOGSAcc(defcostacc,custcode,location,ARb,INr,itemgroupaccount,findnewf,SVOItemType,CostAcc,tstr);
    end;
  end;
  GetCOSAcc = res;
  return;
end;

global
function string 255 GetSVOSalesAcc(record INVc INr,Integer itemgroupaccount,Integer SVOItemType)
begin
  string 255 res;
  record ITVc ITr;
  
  switch (SVOItemType) begin
    case 1: res = INr.SVOInvbleSalesAcc;
    case 2: res = INr.SVOWarrantySalesAcc;
    case 3: res = INr.SVOContractSalesAcc;
    case 4: res = INr.SVOGoodwillSalesAcc;
  end;
  if (itemgroupaccount!=0) then begin
    ITr.Code = INr.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
      switch (SVOItemType) begin
        case 1: if (nonblank(ITr.SVOInvbleSalesAcc)) then begin res = ITr.SVOInvbleSalesAcc; end;
        case 2: if (nonblank(ITr.SVOWarrantySalesAcc)) then begin res = ITr.SVOWarrantySalesAcc; end;
        case 3: if (nonblank(ITr.SVOContractSalesAcc)) then begin res = ITr.SVOContractSalesAcc; end;
        case 4: if (nonblank(ITr.SVOGoodwillSalesAcc)) then begin res = ITr.SVOGoodwillSalesAcc; end;
      end;
    end;
  end else begin
    if (blank(res)) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        switch (SVOItemType) begin
          case 1: if (nonblank(ITr.SVOInvbleSalesAcc)) then begin res = ITr.SVOInvbleSalesAcc; end;
          case 2: if (nonblank(ITr.SVOWarrantySalesAcc)) then begin res = ITr.SVOWarrantySalesAcc; end;
          case 3: if (nonblank(ITr.SVOContractSalesAcc)) then begin res = ITr.SVOContractSalesAcc; end;
          case 4: if (nonblank(ITr.SVOGoodwillSalesAcc)) then begin res = ITr.SVOGoodwillSalesAcc; end;
        end;
      end;
    end;
  end;
  GetSVOSalesAcc = res;
  return;
end;

global
function Boolean GetPMTAX(string paymode,var val taxval)
BEGIN
  Boolean res;
  Integer i,rwcnt;
  record PMBlock PMRec;
  row PMBlock pmrw;
  
  taxval = blankval;
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);  
    if (pmrw.Code==paymode) then begin
      taxval = pmrw.TAX;
      res = true;
      goto LGetPMTAX;
    end;
  end;
LGetPMTAX:;
  GetPMTAX = res;
  RETURN;
END;

global
function Boolean GetPM(string macc,var string accstr,var string comstr)
BEGIN
  Boolean res;
  Integer i,rwcnt;
  record PMBlock PMRec;
  row PMBlock pmrw;
  
  res = true;
  accstr = "";
  comstr = "";
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==macc) then begin
      accstr = pmrw.AccNr;
      comstr = pmrw.Comment;
      goto LGetPM;
    end;
  end;
  res = false;
LGetPM:;
  GetPM = res;
  RETURN;
END;

global
function Boolean GetPMRow(string macc,var row PMBlock pmrw)
begin
  Boolean res;
  Integer i,rwcnt;
  record PMBlock PMRec;
  
  ClearRow(PMRec,pmrw,1);
  res = true;
  BlockLoad(PMRec);
  rwcnt = MatRowCnt(PMRec);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMRec,i,pmrw);
    if (pmrw.Code==macc) then begin
      goto LGetPMRow;
    end;
  end;
  res = false;
LGetPMRow:;
  GetPMRow = res;
  return;
end;

global
function Boolean GetRestPMRow(string macc,var row RestPMBlock rpmrw)
begin
  Boolean res;
  Integer i,rwcnt;
  record RestPMBlock RPMb;
  
  ClearRow(RPMb,rpmrw,1);
  res = true;
  BlockLoad(RPMb);
  rwcnt = MatRowCnt(RPMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(RPMb,i,rpmrw);
    if (rpmrw.PMCode==macc) then begin
      goto LGetRestPMRow;
    end;
  end;
  res = false;
LGetRestPMRow:;
  GetRestPMRow = res;
  return;
end;

global
function Boolean GetAccPMRow(string accnr,var row PMBlock PMrw)
begin
  Boolean res;
  Integer i,rwcnt;
  record PMBlock PMb;
  
  ClearRow(PMb,PMrw,1);
  res = true;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMrw);
    if (PMrw.AccNr==accnr) then begin
      goto LGetAccPMRow;
    end;
  end;
  res = false;
LGetAccPMRow:;
  GetAccPMRow = res;
  return;
end;

global
function Boolean FindStringInString(string a, string b)
begin
  Boolean res;
  Integer i,l;
  string 255 a1,b1,tstr;
  
  res = false;
  if (len(a)>0) and (len(b)==0) then begin
    goto LFindStringInString;
  end;  
  b1 = b;
  a1 = a;
  l = len(a);
  for (i=0;i<=l;i=i+1) begin
    tstr = Right(a1,len(a1) - i);
    if (len(tstr)<len(b)) then begin
      goto LFindStringInString;
    end;
    tstr = Left(tstr,len(b1));
    if (tstr==b1) then begin       
      res = true; 
      goto LFindStringInString;
    end;
  end;
LFindStringInString:;
  FindStringInString = res;
  return;
end;

global
function val CalculateVINettVal(record VIVc VIr,Boolean payalf)
begin
  val res;
  row VIVc VIrw;
  Integer i,rwcnt;  
  
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    res = res + VIrw.Sum; 
  end;
  CalculateVINettVal = res;
  return;
end;

global
function string 40 ObjSClassPasteSpecialWindowClass(string defpsname)
begin
  string 40 psname;
  record LocalMachineBlock LMb;
  
  psname = defpsname;
  BlockLoad(LMb);
  switch (LMb.ObjectPasteSpecial) begin
    case 0:
/*system default    
      BlockLoad(MSb);
      if (nonblank(MSb.StartClass)) then begin
        psname = "Obj2SClass";
      end;
*/      
    case 1:
      psname = "ObjSClass";
    case 2:
      psname = "Obj2SClass";
  end;
    
  ObjSClassPasteSpecialWindowClass = psname;
  return;
end;

global
function string 40 INSClassPasteSpecialWindowClass(string defpsname)
begin
  string 40 psname;
  record MainStockBlock MSb;
  record LocalMachineBlock LMb;
  
  psname = defpsname;
  BlockLoad(LMb);
  switch (LMb.ItemPasteSpecial) begin
    case 0:
      BlockLoad(MSb);
      if (nonblank(MSb.StartClass)) then begin
        psname = "IN2SClass";
      end;
    case 1:
      psname = "INSClass";
    case 2:
      psname = "IN2SClass";
    case 3:
      psname = "IN3SClass";
  end;
  
  if (IsStandardProduct and psname=="INSClass") then begin
    psname = "IN3SClass";
  end;
  
  INSClassPasteSpecialWindowClass = psname;
  return;
end;

global
function string 40 ForSaleINSClassPasteSpecialWindowClass(string defpsname)
begin
  string 40 psname;
  record MainStockBlock MSb;
  record LocalMachineBlock LMb;
  
  psname = defpsname;
  BlockLoad(LMb);
  switch (LMb.ItemPasteSpecial) begin
    case 0:
      BlockLoad(MSb);
      if (nonblank(MSb.StartClass)) then begin
        psname = "ForSaleIN2SClass";
      end;
    case 1:
      psname = "ForSaleINSClass";
    case 2:
      psname = "ForSaleIN2SClass";
    case 3:
      psname = "ForSaleIN3SClass";
  end;
  
  if (IsStandardProduct and psname=="ForSaleINSClass") then begin
    psname = "ForSaleIN3SClass";
  end;
  
  ForSaleINSClassPasteSpecialWindowClass = psname;
  return;
end;

global
function string 40 ActTypeSClassPasteSpecialWindowClass(string defpsname)
begin
  string 40 psname;
  record LocalMachineBlock LMb;
  Integer wn;
  
  wn = CurWindow;
  BlockLoad(LMb);
  psname = defpsname;
  if (GetWindowClass(wn)!="FavActTypeDClass") begin
    switch (LMb.ActTypePastePerClass) begin
      case 1:
        // ActType2SClass not implemented on iOS yet
        if (GuiType!=kGuiiPhone) then begin
          psname = "ActType2SClass";
        end;
      case 2:
        psname = "FavActTypeSClass";
    end;
  end;
  ActTypeSClassPasteSpecialWindowClass = psname;
  return;
end;

global
function string 40 ConfSClassPasteSpecialWindowClass(string defpsname)
begin
  string 40 psname;
  record MainStockBlock MSb;
  record LocalMachineBlock LMb;
  
  psname = defpsname;
 
  BlockLoad(LMb);
  switch (LMb.MailboxPasteSpecial) begin
    case 0:
      psname = "ConfSClass";
    case 1:
      psname = "MailCUSClass";
    case 2:
      psname = "MailVESClass";
    case 3:
      psname = "MailContactRelSClass";
  end;
  
  ConfSClassPasteSpecialWindowClass = psname;
  return;
end;

global
function string 40 AccSClassPasteSpecialWindowClass(string defpsname)
begin
  string 40 psname;
  record CYBlock CYb;
  record LocalMachineBlock LMb;
  
  psname = defpsname;
  BlockLoad(LMb);
  switch (LMb.AccClassPasteSpecial) begin
    case 0:
      BlockLoad(CYb);
      if (nonblank(CYb.AccClass)) then begin
        psname = "Acc2SClass";
      end;
    case 1:
      psname = "AccSClass";
    case 2:
      psname = "Acc2SClass";
  end;
  AccSClassPasteSpecialWindowClass = psname;
  return;
end;

global
procedure RsrtEventSumup(record RsrtEventVc REventr)
begin
  Integer i,rwcnt,cancelled;
  row RsrtEventVc REventrw;
  
  rwcnt = MatRowCnt(REventr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(REventr,i,REventrw);
    if (REventrw.Status>=4) then begin
      cancelled = cancelled + 1;
    end;
  end;
  REventr.TotQty = rwcnt - cancelled;
  return;
end;

procedure DateDigits(Integer v,Integer leadzero,var string tstr)
BEGIN
  tstr = "";
  if (leadzero!=0) then begin
    if (v<10) then begin
      tstr = "0";
    end;
  end;
  tstr = tstr & v;
  RETURN;
END;

global
procedure LongDateToStr2(Date fa,record ClientFormatBlock CFb,Integer dateOrder,var string tstr)
BEGIN
  string 10 daystr;
  string 10 monthstr;
  string 10 yearstr;
  Integer y;
  record SysFormatBlock SysFormatRec;
  integer leadZmonth,leadZday,dateOrdertmp;
  string 10 dateSep;

  if (blankdate(fa)) then begin
    tstr = "";
    goto LLongDateToStr;
  end;
  if (CFb.Usef==1) then begin 
    dateOrdertmp = CFb.dateOrder;
    leadZmonth = CFb.leadZmonth;
    leadZday = CFb.leadZday;
    dateSep = CFb.dateSep; 
    dateOrdertmp = CFb.dateOrder;
  end else begin 
    BlockLoad(SysFormatRec);
    dateOrdertmp = SysFormatRec.dateOrder;
    leadZmonth = SysFormatRec.leadZmonth;
    leadZday = SysFormatRec.leadZday;
    dateSep = SysFormatRec.dateSep;
    if (dateOrder>-1) then begin 
      dateOrdertmp = dateOrder;
    end;
  end;
  y = GetYear(fa);
  DateDigits(y,1,yearstr);
  DateDigits(GetMonth(fa),leadZmonth,monthstr);
  DateDigits(GetDay(fa),leadZday,daystr);  
  switch (dateOrdertmp) begin
    case 0:  
      tstr = monthstr;
      tstr = tstr & dateSep;
      tstr = tstr & daystr;
      tstr = tstr & dateSep;
      tstr = tstr & yearstr;
    case 1:  
      tstr = daystr;
      tstr = tstr & dateSep;
      tstr = tstr & monthstr;
      tstr = tstr & dateSep;
      tstr = tstr & yearstr;
    case 2:  
      tstr = yearstr;
      tstr = tstr & dateSep;
      tstr = tstr & monthstr;
      tstr = tstr & dateSep;
      tstr = tstr & daystr;
    case 3:  
      monthstr = USetStr(2780+GetMonth(fa));
      if (blank(monthstr)) then begin
        DateDigits(GetMonth(fa),leadZmonth,monthstr);
      end;
      tstr = yearstr;
      tstr = tstr & dateSep;
      if (HasLocalization("LVA")) then begin
        tstr = tstr & "gada ";
      end;//LangLatvian
      tstr = tstr & daystr;
      tstr = tstr & dateSep;
      tstr = tstr & monthstr;
  end;
LLongDateToStr:;
  RETURN;
END;

global
procedure LongDateToStr(Date fa,Integer dateOrder,var string tstr)
begin
  record ClientFormatBlock CFb;
  
  CFb.Usef = 0;
  LongDateToStr2(fa,CFb,dateOrder,tstr);
  return;
end;

global
function string 255 DateToStr(Date fa)
begin
  string 10 daystr;
  string 10 monthstr;
  string 10 yearstr;
  Integer y;
  record SysFormatBlock SFb;
  string 255 tstr;

  if (blankdate(fa)) then begin
    tstr = "";
    goto LDateToStr;
  end;
  BlockLoad(SFb);
  switch (SFb.dateOrder) begin
    case 0:  
      tstr = "M";
      if (SFb.leadZmonth) then begin tstr = tstr & "M"; end;
      tstr = tstr & SFb.dateSep;
      tstr = tstr & "D";
      if (SFb.leadZday) then begin tstr = tstr & "D"; end;
      tstr = tstr & SFb.dateSep;
      tstr = tstr & "YY";
      if (SFb.century) then begin tstr = tstr & "YY"; end;
      tstr = DateToString(fa,tstr);      
    case 1:  
      tstr = "D";
      if (SFb.leadZday) then begin tstr = tstr & "D"; end;
      tstr = tstr & SFb.dateSep;
      tstr = tstr & "M";
      if (SFb.leadZmonth) then begin tstr = tstr & "M"; end;
      tstr = tstr & SFb.dateSep;
      tstr = tstr & "YY";
      if (SFb.century) then begin tstr = tstr & "YY"; end;
      tstr = DateToString(fa,tstr);      
    case 2:  
      tstr = "YY";
      if (SFb.century) then begin tstr = tstr & "YY";  end;
      tstr = tstr & SFb.dateSep;
      tstr = tstr & "M";
      if (SFb.leadZmonth) then begin tstr = tstr & "M"; end;
      tstr = tstr & SFb.dateSep;
      tstr = tstr & "D";
      if (SFb.leadZday) then begin tstr = tstr & "D"; end;
      tstr = DateToString(fa,tstr);      
  end;
LDateToStr:;
  DateToStr = tstr;
  return;
end;

global
function string 255 ServerDateFormat()
begin
  string 255 res;
  record SysFormatBlock SFb;
  
  BlockLoad(SFb);
  switch (SFb.dateOrder) begin
    case 0:  
      res = "M";
      if (SFb.leadZmonth) then begin res = res & "M"; end;
      res = res & SFb.dateSep;
      res = res & "D";
      if (SFb.leadZday) then begin res = res & "D"; end;
      res = res & SFb.dateSep;
      res = res & "YY";
      if (SFb.century) then begin res = res & "YY"; end;
    case 1:  
      res = "D";
      if (SFb.leadZday) then begin res = res & "D"; end;
      res = res & SFb.dateSep;
      res = res & "M";
      if (SFb.leadZmonth) then begin res = res & "M"; end;
      res = res & SFb.dateSep;
      res = res & "YY";
      if (SFb.century) then begin res = res & "YY"; end;
    case 2:  
      res = "YY";
      if (SFb.century) then begin res = res & "YY";  end;
      res = res & SFb.dateSep;
      res = res & "M";
      if (SFb.leadZmonth) then begin res = res & "M"; end;
      res = res & SFb.dateSep;
      res = res & "D";
      if (SFb.leadZday) then begin res = res & "D"; end;
  end;
  ServerDateFormat = res;
  return;
end;

global
function Integer TestVATVICorrectionAllowed(record VIVc VIr)
begin
  Integer res;
  row VIVc VIrw;
  Integer i,rwcnt;
  val prepayv;
  record APAccBlock APb;
  
  BlockLoad(APb);
  if (APb.PostVIVATonVATCorr!=0) then begin
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      switch (VIrw.stp) begin
        case kInvoiceRowTypePrepayment:
          prepayv = prepayv + VIrw.Sum;
      end;
    end;
    if (prepayv>=VIr.PayVal) then begin
      res = 22089;
    end;
  end;
  TestVATVICorrectionAllowed = res;
  return;
end;

global
function Integer TestVATIVCorrectionAllowed(record IVVc IVr)
begin
  Integer res;
  row IVVc IVrw;
  Integer i,rwcnt;
  val prepayv;
  record AccBlock ARb;
  
  BlockLoad(ARb);
  if (ARb.PostIVVATonVATCorr!=0) then begin
    switch (IVr.InvType) begin
      case kInvoiceTypeCredit:
      case kInvoiceTypeCreditSpecialSales:
      otherwise
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          switch (IVrw.stp) begin
            case kInvoiceRowTypePrepayment:
              prepayv = prepayv + IVrw.Sum;
          end;
        end;
        if (prepayv>=IVr.Sum4) then begin
          res = 22089;
        end;
    end;
  end;
  TestVATIVCorrectionAllowed = res;
  return;
end;

global
procedure TBBUDchrsum(var record TBBUVc TBBUr,Integer rownr,Boolean pritemf,Integer UseDiscount)
BEGIN
  val t,v,totrowcost,pritcost,s;
  row TBBUVc TBBUrw;

  MatRowGet(TBBUr,rownr,TBBUrw);
  t = TBBUrw.Cost;
  if (pritemf) then begin
    if nonblank(TBBUrw.EMCode) or (blank(t)) then begin
      GetPRItemCost(TBBUr.PRCode,TBBUrw.EMCode,TBBUrw.ArtCode,TBBUrw.TimeClass,TBBUrw.ItemType,t);
    end;
    TBBUrw.Cost = t;
  end;
  totrowcost = TBBUrw.Cost*TBBUrw.Qty;
  if (TBBUrw.Price!=0) then begin
    CalcSum(TBBUrw.Qty,TBBUrw.Price,0,TBBUrw.Discount,t,UseDiscount);
    CalcExtra(t,TBBUrw.Markup,v);
    TBBUrw.Sum = t + v;
    RoundRowSum(TBBUr.CurncyCode,"","TBBUVc",TBBUrw.Sum);
/*    
  if (QTrw.PriceFactor<>0) then begin
    t = t / QTrw.PriceFactor;
  end;
*/  
  end else begin
    if (nonblank(TBBUrw.Markup)) then begin
      CalcExtra(TBBUrw.Cost,TBBUrw.Markup,v);
      TBBUrw.Price = v + TBBUrw.Cost;
      TBBUrw.Price  = DivRateToBase1(TBBUr.CurncyCode,TBBUrw.Price,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
      CalcSum(TBBUrw.Qty,TBBUrw.Price,0,TBBUrw.Discount,t,UseDiscount);
      RoundRowSum(TBBUr.CurncyCode,"","TBBUVc",t);
      TBBUrw.Sum = t;
    end else begin
      TBBUrw.Sum = 0;
    end;
  end;
  s  = MulRateToBase1(TBBUr.CurncyCode,TBBUrw.Sum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
  TBBUrw.GP = s - totrowcost;
  t = TBBUrw.GP*100;
  TBBUrw.GM = t/TBBUrw.Sum;
  MatRowPut(TBBUr,rownr,TBBUrw);
  RETURN;
END;

global
function Boolean VATIVDchrsum(var record VATIVVc VATIVp,Integer rownr)
begin
  row VATIVVc VATIVrw;
  val s;
  Boolean res;
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  MatRowGet(VATIVp,rownr,VATIVrw);
  if ((VATIVrw.stp==1) or (VATIVrw.stp==11)) then begin
      CalcSum(VATIVrw.Quant,VATIVrw.Price,VATIVrw.PriceFactor,VATIVrw.vRebate,s,GenOptRec.UseDiscount);  
      RoundRowSum(VATIVp.CurncyCode,"","IVVc",s);
      if (s!=VATIVrw.Sum) then begin
        VATIVrw.Sum = s;
        res = true;
        MatRowPut(VATIVp,rownr,VATIVrw);
      end;
  end;
  if (VATIVrw.Price==0) then begin res = true; end;
  VATIVDchrsum = res;
  return;
end;

global
procedure ParseT1Data(string t1,var string priacc,var string name,var string expdate,var string scode,var string exdata)
begin
  LongInt pos;
  
  priacc = "";
  name = "";
  expdate = "";
  scode = "";
  exdata = "";
  
  if (mid(t1,0,2)<>"%B") then begin
    goto ParseT1Dataout;
  end;
  
  pos = 2;
  while (mid(t1,pos,1)!="^" and pos<len(t1)) begin
    priacc = priacc & mid(t1,pos,1);
    pos = pos + 1;
  end;
  
  pos = pos + 1;
  
  while (mid(t1,pos,1)!="^" and pos<len(t1)) begin
    name = name & mid(t1,pos,1);
    pos = pos + 1;
  end;
  
  pos = pos + 1;
  
  expdate = mid(t1,pos,4);
  scode = mid(t1,pos+4,3);
  
  pos = pos + 7;
  
  while (mid(t1,pos,1)!="?" and pos<len(t1)) begin
    exdata = exdata & mid(t1,pos,1);
    pos = pos + 1;
  end;
  
  pos = pos + 1;
  
ParseT1Dataout:;
  return;
end;

global
procedure ParseT2Data(string t1,var string priacc,var string expdate,var string scode,var string exdata)
begin
  LongInt pos;
  
  priacc = "";
  expdate = "";
  scode = "";
  exdata = "";
  
  if (mid(t1,0,1)<>";") then begin
    goto ParseT2Dataout;
  end;
  
  pos = 1;
  while (mid(t1,pos,1)!="=" and pos<len(t1)) begin
    priacc = priacc & mid(t1,pos,1);
    pos = pos + 1;
  end;
  
  pos = pos + 1;
  
  if (mid(t1,pos,1)!="=") then begin
    expdate = mid(t1,pos,4);
    pos = pos + 4;
  end else begin
    pos = pos + 1;
  end;
  
  if (mid(t1,pos,1)!="=") then begin
    scode = mid(t1,pos,3);
    pos = pos + 3;
  end else begin
    pos = pos + 1;
  end;
  
  while (mid(t1,pos,1)!="?" and pos<len(t1)) begin
    exdata = exdata & mid(t1,pos,1);
    pos = pos + 1;
  end;
  
  pos = pos + 1;
  
ParseT2Dataout:;
  return;
end;

global
procedure NewLineExport()
begin
  ExportPadString(chr(13) & Chr(10),2,"",false);
  return;
end;

global
procedure RecalcQTSubtotal(var record QTVc QTr)
begin
  row QTVc QTrw;
  Integer i,rwcnt;
  val st;
  
  rwcnt = MatRowCnt(QTr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(QTr,i,QTrw);
    if (QTrw.stp!=9) then begin
      st = st + QTrw.Sum;
    end else begin
      QTrw.Sum = st;
      st = blankval;
      MatRowPut(QTr,i,QTrw);
    end;
  end;
  
  return;
end;

global
procedure RecalcOYSubtotal(var record OYVc OYr)
begin
  row OYVc OYrw;
  Integer i,rwcnt;
  val st;
  
  rwcnt = MatRowCnt(OYr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(OYr,i,OYrw);
    if (OYrw.stp!=9) then begin
      st = st + OYrw.Sum;
    end else begin
      OYrw.Sum = st;
      st = blankval;
      MatRowPut(OYr,i,OYrw);
    end;
  end;
  
  return;
end;

global
function string 60 AddStringToStringList(string strings,string addstrings)
begin
  string 60 res,str;
  LongInt pos;
  
  res = strings;
  pos = 0;
  GetNextSubstring(addstrings,pos,",",str);
  while (nonblank(str)) begin
    if (SetInSet(str,res)==false) then begin
      if ((nonblank(str)) and (nonblank(res))) then begin
        res = res & ",";
      end;
      res = res & str;
    end;
    GetNextSubstring(addstrings,pos,",",str);
  end;
  AddStringToStringList = res;
  return;
end;

global
function string 60 AddObjectToObjectList(string objects,string addobjs)
begin
//returns UPPERCASE string
  string 60 res,aobj;
  Integer pos;
  
  res = objects;
  pos = 0;
  ExtractObj(addobjs,pos,aobj);
  while (nonblank(aobj)) begin
    if (SetInSet(aobj,res)==false) then begin
      if ((nonblank(aobj)) and (nonblank(res))) then begin
        res = res & ",";
      end;
      res = res & aobj;
    end;
    ExtractObj(addobjs,pos,aobj);
  end;
  NormalizeObjstr(res);
  AddObjectToObjectList = res;
  return;
end;

global
function string 60 RemoveObjectFromObjectList(string objstr,string removeobj)
begin
  string 60 res,ostr;
  Integer pos;

  res = "";
  pos = 0;
  ExtractObj(objstr,pos,ostr);
  while (nonblank(ostr)) begin
    if (ostr==removeobj) then begin 
      goto LRemoveObjectFromObjectList;
    end;
    if (nonblank(res)) then begin
      res = res & ",";
    end;
    res = res & ostr;
LRemoveObjectFromObjectList:;
    ExtractObj(objstr,pos,ostr);
  end;    
  RemoveObjectFromObjectList = res;
  return;
end;

global
function string 255 RemoveSetFromSet(string RemoveSet,string FromSet)
begin
  string 255 res,tFromSet,Elem;
  
  tFromSet = FromSet;
  Elem = GetNextValue(tFromSet);
  while (nonblank(Elem)) begin
    if (!SetInSet(Elem,RemoveSet)) then begin
      res = AddStr(res,Elem,",");
    end;
    Elem = GetNextValue(tFromSet);
  end;
  
  RemoveSetFromSet = res;
  return;
end;

global
procedure UninstallRemoveAll()
begin
  Uninstall(1);
end;

global
procedure UninstallKeepData()
begin
  Uninstall(0);
end;

global
function val AbsoluteVal(val t)
begin
  val res;
  
  if (t < 0) then begin
    res = -t;
  end else begin
    res = t;
  end;

  AbsoluteVal = res;
  return;
end;

global
procedure FindFiscalYearBlockRow(Date curdate,row YearBlock Ybrw)
begin
  record YearBlock Yb;
  Integer i,rwcnt;
  
  BlockLoad(Yb);
  rwcnt = MatRowCnt(Yb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Yb,i,Ybrw);
    if (curdate>=Ybrw.StartDate) then begin
      if (curdate<=Ybrw.EndDate) then begin
        goto LFindFiscalYearBlockRow;
      end;
    end;
  end;
LFindFiscalYearBlockRow:;
  return;
end;

procedure CheckUserPersonalID()
begin
  record UserVc Userr;
  record RcVc RepSpec;
  integer wn,mwn;
  string 255 PeronalIDstr;
  
  mwn = MotherWindow(wn);
  if (DoGetCurUser(Userr)) then begin
    RepSpec.f1 = Userr.Code;
    RepSpec.f2 = Userr.Name;
    GetUserIDCode(CurrentUser,PeronalIDstr);
    RepSpec.f3 = PeronalIDstr;
    if (blank(PeronalIDstr)) then begin 
      wn = OpenWindow("StandardPersonalIDWClass",0,mwn,"","",RepSpec);      
    end;
  end;
  return;
end;

procedure CheckSalesInvSettingDefCust()
begin
  record IVTBlock IVb;
  integer wn,mwn;
  
  BlockLoad(IVb);
  mwn = MotherWindow(wn);
  if (blank(IVb.DefCustCode)) then begin 
    wn = OpenWindow("IVTTClass",0,mwn,"","",IVb);
    WindowFieldGoto(wn,IVb,-1,"DefCustCode",true);
    MessageBox(1058,"");
  end;
  return;
end;

global
procedure CheckforStandardOnStartup()
begin
  if (IsStandardProduct) then begin
    if (HasLocalization("HRV")) then begin
      CheckUserPersonalID;
    end;
//CC    CheckSalesInvSettingDefCust;
    if (HasServerInCloud) then begin
      DoLoginClientLogoFileDownloadCheck;
    end;
    GetInappsByImportance;
  end;
  return;
end;

global
function Boolean UserCanChangePendingRecord(Integer rownr)
begin
  Boolean res;
  
  if (rownr<0) then begin
    res = UserCanAction("ChangeRecordHeaderWhenPending",false);
  end else begin
    res = UserCanAction("ChangeRecordMatrixWhenPending",false);
  end;
  
  UserCanChangePendingRecord = res;
end;

global
function Boolean AreasAreEqual(area a1,area a2)
begin
  Boolean res;
  LongInt l,i;
  
  res = false;
  l = GetAreaLength(a1);
  if (l!=GetAreaLength(a2)) then begin goto LAreasAreEqual; end;
  
  for (i = 0; i<l; i = i + 1) begin
    if (GetByteFromArea(a1,i)!=GetByteFromArea(a2,i)) then begin
      goto LAreasAreEqual;
    end;
  end;
  
  res = true;
  
LAreasAreEqual:;
  AreasAreEqual = res;
end;

global
function Boolean AnyClassInSet(string classes,string set)
begin
  Boolean res;
  LongInt pos;
  string 255 class;
  
  pos = 0;
  while (GetNextSubstring(classes,pos,",",class)) begin
    if (SetInSet(class,set)) then begin
      res = true;
      goto LAnyClassInSet;
    end;
  end;
LAnyClassInSet:;  
  AnyClassInSet = res;
  return;
end;

global
procedure FindEndOfTime(var Date dp)
begin
  record YearBlock YearRec;
  row YearBlock Yearrw;
  Integer rwcnt,i;
  Date blankd;
  
  dp = blankd;
  BlockLoad(YearRec);
  rwcnt = MatRowCnt(YearRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(YearRec,i,Yearrw);
    if (dp<Yearrw.EndDate) then begin
      dp = Yearrw.EndDate;
    end;
  end;
  return;
end;

global
function Boolean AllClassesInSet(string classes,string set)
begin
  Boolean res;
  LongInt pos;
  string 255 class;
  
  res = true;
  pos = 0;
  while (GetNextSubstring(classes,pos,",",class)) begin
    if (SetInSet(class,set)==false) then begin
      res = false;
      goto LAllClassesInSet;
    end;
  end;
LAllClassesInSet:;  
  AllClassesInSet = res;
  return;
end;

global
function boolean RecordSerNrInRange(string rangestr,longint sernr)
begin
  boolean res;
  string 255 fr,to;
  longint frlongint,tolongint;
  
  res = true;
  
  fr = FirstInRange(rangestr,20);
  to = LastInRange(rangestr,20);
  
  frlongint = StringToLongInt(fr);
  tolongint = StringToLongInt(to);
  
  if (nonblank(fr)) then begin 
    if (blank(to)) then begin 
      res = (sernr==frlongint);
    end else begin 
      res = ((sernr>=frlongint) and (sernr<=tolongint));
    end;
  end;
  RecordSerNrInRange = res;  
end;

global
function val ValPerSalesMan(val valp,string salesmen)
begin
  val res;
  integer nrofsalesman;
  
  res = valp;
  if (nonblank(salesmen)) then begin 
    nrofsalesman = CountObjects(salesmen);
    if (nrofsalesman!=0) then begin 
      res = valp/nrofsalesman;
    end;
  end;
  ValPerSalesMan = res;
end;

global
updating procedure UpdateLicesingSrvContact()
begin
  record SetupStatusBlock SSb;
  record CYBlock CYb;
  
  BlockLoad(SSb);  
  if (SSb.LicensingSrvContactUpdated==0 and SSb.CompanySetup==1) then begin 
    BlockLoad(CYb);
    MkplUpdateCustomerData(CYb);
  end; 
  return;
end;
