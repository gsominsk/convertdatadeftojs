external function Integer ActApprovalStatus(record ActVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure ClientSideMessageRemote(longint,string);
external function Boolean FindTheUser(var record UserVc);
external procedure GetProgramName(var string);
external function Boolean MakeMailFromCU(record CUVc,var record MailVc,Boolean);
external procedure GetCustEmail(record CUVc,var string);
external procedure FindCurMailboxName(var string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external procedure ExtractObj(string,var Integer,var string);

global
function Boolean PasteCuInAct(var record ActVc Actp,var string warning)
BEGIN
  record CUVc VEr;
  record CUVc CUr;
  Boolean res;
  
  CUr.Code = Actp.CUCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    Actp.CUName = CUr.Name;
    Actp.Contact = CUr.Person;
    Actp.Phone = CUr.Phone;
    if (nonblank(CUr.WarnText1)) then begin
      warning = CUr.WarnText1;
    end;
    res = true;
  end;
  if (res==false) then begin
    VEr.Code = Actp.CUCode;
    if (ReadFirstMain(VEr,1,true)) then begin
      Actp.CUName = VEr.Name;
      Actp.Contact = VEr.Person;
      Actp.Phone = VEr.Phone;
      if (nonblank(VEr.VEWarnText1)) then begin
        warning = VEr.VEWarnText1;
      end;
      res = true;
    end;
  end;
  PasteCuInAct = res;
  RETURN;
END;

function string 20 GetPRShortCode(string user,string prcode)
BEGIN
  string 20 res,usercode;
  Integer i,rwcnt;
  record UserVc Userr;
  row UserVc Userrw;
  Integer pos;

  res = prcode;
  pos = 0;
  ExtractObj(user,pos,usercode);
  Userr.Code = usercode;
  if (ReadFirstMain(Userr,1,true)) then begin
    rwcnt = MatRowCnt(Userr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Userr,i,Userrw);
      if (Userrw.Code==prcode) then begin
        res = Userrw.PRCode;
      end;
    end;
  end;
  GetPRShortCode = res;
  RETURN;
END;

global
function Boolean PastePRInAct(var record ActVc Actp,var string warning)
BEGIN
  record PRVc PRr;
  Boolean res;
  
  Actp.PRCode = GetPRShortCode(Actp.MainPersons,Actp.PRCode);
  PRr.Code = Actp.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    Actp.CUCode = PRr.CustCode;
    if (PasteCuInAct(Actp,warning)) then begin
      Actp.Contact = PRr.Contact;
      res = true;
    end;
    Actp.PRName = PRr.Name;
  end;
  PastePRInAct = res;
  RETURN;
END;

global
function Boolean PasteINInAct2(var record ActVc Actp,var string warning)
begin
  record UserVc UserR;
  record EGVc EGR;
  row EGVc EGrw;
  Integer i,rwcnt;
  Boolean res;
  
  warning = "";
  UserR.Code = Actp.MainPersons;
  if (ReadFirstMain(UserR,1,true)) then begin
     EGR.Code = UserR.JobGroup;
     if (ReadFirstMain(EGR,1,true)) then begin
       rwcnt = MatRowCnt(EGR);
       for (i=0;i<rwcnt;i=i+1) begin
         MatRowGet(EGR,i,EGrw);
         if (EGrw.Code==Actp.ItemCode) then begin
           Actp.ItemCode = EGrw.ArtCode;
           res = true;
         end;
       end;
     end;
  end;
  PasteINInAct2 = res;
  return;
end;

global
function Boolean PasteINInAct(var record ActVc Actp)
begin
  string 255 warning;
  
  PasteINInAct = PasteINInAct2(Actp,warning);
  return;
end;

global
procedure PasteCompTextTypetoAct(string comptexttype,record ActVc Actp)
BEGIN
  record CompTextTypeVc CTTr;
  record TextTypeVc TextTyper;
  row CompTextTypeVc CTTrw;
  row ActVc Actrw;
  Integer i,cttcnt;  
  Integer actcnt;

  CTTr.Code = comptexttype;
  if (ReadFirstMain(CTTr,1,true)) then begin
    cttcnt = MatRowCnt(CTTr);
    actcnt = MatRowCnt(Actp);
    for (i=0;i<cttcnt;i=i+1) begin
      if (actcnt>=199) then begin goto LPasteCompTextTypetoAct; end;
      MatRowGet(CTTr,i,CTTrw);
      ClearRow(Actp,Actrw,1);
      Actrw.TextCode = CTTrw.TextTypeCode;
      Actrw.Text = CTTrw.TextTypeComment;
      MatRowPut(Actp,actcnt,Actrw);      
      actcnt = actcnt + 1;
    end;
  end;
LPasteCompTextTypetoAct:;
  RETURN;
END;

global
procedure DeleteCompTextTypeFromAct(string comptexttype,var record ActVc Actp)
begin
  record CompTextTypeVc CTTr;
  record TextTypeVc TextTyper;
  row CompTextTypeVc CTTrw;
  row ActVc Actrw;
  Integer i,cttcnt;  
  Integer ai,actcnt;

  CTTr.Code = comptexttype;
  if (ReadFirstMain(CTTr,1,true)) then begin
    cttcnt = MatRowCnt(CTTr);
    actcnt = MatRowCnt(Actp);
    for (i=0;i<cttcnt;i=i+1) begin
      MatRowGet(CTTr,i,CTTrw);
      for (ai=0;ai<actcnt;ai=ai+1) begin
        MatRowGet(Actp,ai,Actrw);
        if (Actrw.TextCode==CTTrw.TextTypeCode) then begin
          MatRowDelete(Actp,ai);
          actcnt = MatRowCnt(Actp);
          ai = 0;
        end;
      end;
    end;
  end;
  return;
end;

function Boolean ItemInProjectBudget(string prcode,string itemcode)
begin
  Boolean res;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  
  res = true;
  TBBUr.PRCode = prcode;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    res = false;
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (itemcode==TBBUrw.ArtCode) then begin
        goto LItemInProjectBudget;
        res = true;
      end;
    end;
  end;
LItemInProjectBudget:;  
  ItemInProjectBudget = res;
  return;
end;

global
function Boolean PasteActTypeInAct2(string oldtype,var record ActVc Actp,var string warning)
begin
  record ActTypeVc ATr;
  record ActTypeGrVc ATGRr;
  Boolean res;
  
  warning = "";
  if (nonblank(oldtype)) then begin
    ATr.Code = oldtype;
    if (ReadFirstMain(ATr,1,true)) then begin
      DeleteCompTextTypeFromAct(ATr.CompTextType,Actp);
    end;  
  end;
  ATr.Code = Actp.ActType;
  if (ReadFirstMain(ATr,1,true)) then begin
     Actp.ItemCode = ATr.ItemCode;
     ATGRr.Code = ATr.ActTypeGr;
     if (ReadFirstMain(ATGRr,1,true)) then begin
       Actp.CalTimeFlag = ATGRr.DefTimeFlag;
     end;
     Actp.AlarmType = ATr.AlarmType;
     Actp.AlarmWhen = ATr.AlarmWhen;
     Actp.AlarmUnits = ATr.AlarmUnits;
     if (Actp.AlarmUnits!=0) then begin
       switch (Actp.AlarmWhen) begin
         case 0: Actp.StartTime = AddMinutes(Actp.StartTime,-Actp.AlarmUnits);
         case 1: Actp.StartTime = AddHours(Actp.StartTime,-Actp.AlarmUnits);
         case 2: Actp.TransDate = AddDay(Actp.TransDate,-Actp.AlarmUnits);
         case 3: Actp.StartTime = AddMinutes(Actp.StartTime,Actp.AlarmUnits);
         case 4: Actp.StartTime = AddHours(Actp.StartTime,Actp.AlarmUnits);
         case 5: Actp.TransDate = AddDay(Actp.TransDate,-Actp.AlarmUnits);
       end;
     end;
     Actp.ActTypeComment = ATr.Comment;
     PasteCompTextTypetoAct(ATr.CompTextType,Actp);
     /*achived some other way on record check
     if (nonblank(Actp.PRCode)) then begin
       if (ItemInProjectBudget(Actp.PRCode,Actp.ItemCode)==false) then begin
         warning = USetStr(20399) & ": " & Actp.ItemCode;
       end;
     end;
     */
     res = true;
  end;
  PasteActTypeInAct2 = res;
  return;
end;

global
function Boolean PasteActTypeInAct(string oldtype,var record ActVc Actp)
begin
  string 255 warning;
  
  PasteActTypeInAct = PasteActTypeInAct2(oldtype,Actp,warning);
  return;
end;


global
function Boolean ActVc_PasteSerialNr(var record ActVc Actp)
BEGIN
  Boolean res;
  record SVOSerVc SVOSerr;
  record CUVc CUr;
  
  SVOSerr.ItemCode = Actp.ArtCode;
  SVOSerr.SerialNr = Actp.SerialNr;
  if (ReadFirstMain(SVOSerr,2,true)) then begin
    Actp.CUCode = SVOSerr.CustCode;
    Actp.CUName = SVOSerr.CustName;
    CUr.Code = Actp.CUCode;
    if (ReadFirstMain(CUr,1,true)) then begin end;
    Actp.Phone = CUr.Phone;
    Actp.Contact = CUr.Person;
    res = true;
  end else begin
    SVOSerr.SerialNr = Actp.SerialNr;
    if (ReadFirstMain(SVOSerr,1,true)) then begin
      Actp.ArtCode = SVOSerr.ItemCode;
      Actp.CUCode = SVOSerr.CustCode;
      Actp.CUName = SVOSerr.CustName;
      CUr.Code = Actp.CUCode;
      if (ReadFirstMain(CUr,1,true)) then begin end;
      Actp.Phone = CUr.Phone;
      Actp.Contact = CUr.Person;
      res = true;
    end;
  end;
  ActVc_PasteSerialNr = res;
  RETURN;
END;

global
function Boolean ActVc_ShouldAttachPdfToEMail(record ActVc Actr)
begin
  Boolean res;
  record ActTypeVc ActTyper;
  record ActTypeGrVc ActTypeGrr;
  
  ActTyper.Code = Actr.ActType;
  if (ReadFirstMain(ActTyper,1,true)) then begin
    ActTypeGrr.Code = ActTyper.ActTypeGr;
    if (ReadFirstMain(ActTypeGrr,1,true)) then begin
      if (ActTypeGrr.AttachPdfToEMail!=0) then begin
        res = true;
      end;
    end;
  end;
  ActVc_ShouldAttachPdfToEMail = res;
  return;
end;

global
updating function boolean DoCreateInvitationAndSendRemote(longint ActSerNr,var longint errorcode,var string errorstr)
begin
  boolean res,cur1b;
  Area a;
  Integer wn, i;
  LongInt rwcnt;
  record ActVc Actr;
  row ActVc Actrw;
  record CUVc CUr;
  record CUVc CUr2;
  record UserVc Userr;
  record MailVc Mailr,oldMailr;
  string 255 t2, t3,mboxname;
  String 2 nextline;
  String 255 filename,fname;
  String 255 usremail;
  String 255 guestemail;
  String 255 pgmname;
  
  res = false;
  errorcode = 0;
  
  Actr.SerNr = ActSerNr;
  if (ReadFirstMain(Actr,1,true)==false) then begin
    errorcode = 15057;
    goto LLCreateInvitationAndSend;
  end;
  
  nextline = chr(13) & chr(10);
  fname = ActSerNr & "_invite.ics";
  GetProgramName(pgmname);
  t2 = USetStr(901);
  t3 = USetStr(904);
  Userr.Code = CurrentUser;
  if(FindTheUser(Userr)) then begin
    usremail = Userr.emailAddr;
  end;
  if (FindCustomerRelation(Actr.CUCode,Actr.Contact,CUr)) then begin
    GetCustEmail(CUr,guestemail);
    cur1b = true;
  end else begin
    CUr2.Code = Actr.CUCode;
    if (ReadFirstMain(CUr2,1,true)) then begin
      GetCustEmail(CUr2,guestemail);
      cur1b = false;
    end;
  end;
  if (blank(guestemail)) then begin 
    errorcode = 30221;
    goto LLCreateInvitationAndSend;    
  end;
  FindCurMailboxName(mboxname);

  AddTextToArea("BEGIN:VCALENDAR" & nextline, a);
  AddTextToArea("PRODID:-//"& t3 & "//"& pgmname & " " & t2 &"//EN" & nextline, a); //Todo: Real version number, app name, language
  AddTextToArea("VERSION:2.0" & nextline, a); //iCalendar version
  AddTextToArea("CALSCALE:GREGORIAN" & nextline, a);
  AddTextToArea("METHOD:REQUEST" & nextline, a);
  AddTextToArea("BEGIN:VEVENT" & nextline, a);
  AddTextToArea("DTSTART:" & DateToString(Actr.TransDate,"YYYYMMDD") & "T" & StripNonDigits(Actr.StartTime) & "Z"  & nextline, a);
  AddTextToArea("DTEND:" & DateToString(Actr.EndDate,"YYYYMMDD") & "T" & StripNonDigits(Actr.EndTime) & "Z"  & nextline, a);
  AddTextToArea("DTSTAMP:" & DateToString(CurrentDate,"YYYYMMDD") & "T" & StripNonDigits(CurrentTime) & "Z" & nextline, a);
  AddTextToArea("ORGANIZER;CN=""" & mboxname & """:MAILTO:" & usremail & nextline, a);
  AddTextToArea("UID:" & DatabaseID & "-" & Actr.SerNr & "@hansaworld.com" & nextline, a);

  if (nonblank(usremail)) then begin
    AddTextToArea("ATTENDEE;CUTYPE=INDIVIDUAL;ROLE=REQ-PARTICIPANT;PARTSTAT=ACCEPTED;RSVP=TRUE;X-NUM-GUESTS=0:MAILTO:", a);
    AddTextToArea(usremail & nextline, a);
  end;
  if (nonblank(guestemail)) then begin
    AddTextToArea("ATTENDEE;CUTYPE=INDIVIDUAL;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;X-NUM-GUESTS=0:MAILTO:", a);
    AddTextToArea(guestemail & nextline, a);
  end;
  // COMMENT
  // CLASS:PRIVATE
  AddTextToArea("CREATED:" & DateToString(CurrentDate,"YYYYMMDD") & "T" & StripNonDigits(CurrentTime) & "Z" & nextline, a);
  
  rwcnt = MatRowCnt(Actr);
  if (rwcnt>0) then begin
    AddTextToArea("DESCRIPTION:",a);
    for (i = 0;i<rwcnt;i=i+1) begin
      if (i>0) then begin
        AddTextToArea(" ",a);
      end;
      MatRowGet(Actr,i,Actrw);
      AddTextToArea(Actrw.Text & "\\n" & nextline, a)
    end;
  end;
  
  AddTextToArea("LAST-MODIFIED:" & DateToString(CurrentDate,"YYYYMMDD") & "T" & StripNonDigits(CurrentTime) & "Z" & nextline, a);
  // LOCATION //    AddTextToArea("LOCATION:Götgatan\, Stockholm\, Sweden" & nextline, a);
  AddTextToArea("SEQUENCE:0" & nextline, a); //increased by 1 when DTSTART, DTEND, DUE, RDATE, RRULE, EXDATE, EXRULE, STATUS is changed (and any other changes relevant for atendees to participate in the meeting
  // STATUS:CONFIRMED
  AddTextToArea("SUMMARY:" & Actr.Comment & nextline, a); //TODO: make sure the lines are never longer than 75 bytes (not characters!), and that the automatic linebreak cause one extra leading space to be added to the next line.  This is a SHOULD, not necessary unless there will be problems.
  // TRANSP:OPAQUE
  // URL //    AddTextToArea("URL;VALUE=URI:http://www.hansaworld.com/" & nextline, a); //Could be URL to webserver with generated page containing invitation to the meeting and other info

  AddTextToArea("END:VEVENT" & nextline, a);
  AddTextToArea("END:VCALENDAR" & nextline, a);
  CreateFile(fname);
  CloseFile;
  WriteAreaToFile(a,fname,0);
  if(cur1b) then begin
    if (MakeMailFromCU(CUr,Mailr,false)==false) then begin 
      res = false;
      errorcode = 2234;
      goto LLCreateInvitationAndSend;      
    end;
  end else begin
    if (MakeMailFromCU(CUr2,Mailr,false)==false) then begin 
      res = false;
      errorcode = 2234;
      goto LLCreateInvitationAndSend;      
    end;
  end;
  Mailr.Header = Actr.Comment;
  for (i = 0;i<rwcnt;i=i+1) begin
    MatRowGet(Actr,i,Actrw);
    AddToText(Actrw.Text & nextline, Mailr);
  end;
  
  Mailr.SerNr = NextSerNr("MailVc",CurrentDate,-1,false,"");
  Mailr.TransDate = CurrentDate;
  Mailr.TransTime = CurrentTime;
  res = RecordStore(Mailr,false); 

  res = ReadFirstMain(Mailr,1,true);
  if (res) then begin 
    res = RecordLinkFile(fname,0,Mailr,CurrentCompany);
    if (FileExists(fname)) then begin 
      Delete_File(fname);
    end;
    RecordCopy(oldMailr,Mailr);
    Mailr.SendFlag = 1;
    if (RecordUpdate(oldMailr,Mailr,true)==0) then begin
      errorcode = 2233;
      res = true;
      CreateRecordLink(Actr,CurrentCompany,Mailr,CurrentCompany);
      CreateRecordLink(Mailr,CurrentCompany,Actr,CurrentCompany);
    end else begin
      res = false;
      errorcode = 2232;
    end;    
  end else begin
    errorcode = 2231;
  end;
  
LLCreateInvitationAndSend:;
  DoCreateInvitationAndSendRemote = res;
  return;
end;

global
procedure CreateInvitationAndSendRemote(longint ActSerNr)
begin
  longint errorcode;
  string 255 errorstr;
  
  if (qupdating.DoCreateInvitationAndSendRemote(ActSerNr,errorcode,errorstr)) then begin 
     ClientRemoteAsync2.ClientSideMessageRemote(errorcode,errorstr);
  end else begin 
     ClientRemoteAsync2.ClientSideMessageRemote(errorcode,errorstr);
  end;
end;

global
updating function boolean CreateInvitationAndSend(longint ActSerNr,var longint errorcode,var string errorstr)
begin
  boolean res;
  res =  DoCreateInvitationAndSendRemote(ActSerNr,errorcode,errorstr);
  CreateInvitationAndSend = res;
end;

global
updating function Integer CreateActFromActDsm(record ActVc Actr,var record ActVc wkfActr)
begin
  Integer res;
  Integer wn,nwn;
  Integer curcomp;
  string 255 warning;

  curcomp = CurrentCompany;
  wkfActr.CUCode = Actr.CUCode;
  PasteCuInAct(wkfActr,warning);
  wkfActr.TodoFlag = kTodoFlagTodo;
  wkfActr.SerNr = NextSerNr("ActVc",wkfActr.TransDate,-1,false,"");
  if (RecordStore(wkfActr,false)) then begin
    CreateRecordLink(wkfActr,curcomp,Actr,curcomp);  
    CreateRecordLink(Actr,curcomp,wkfActr,curcomp);  
  end;
  CreateActFromActDsm = res;
  return;
end;

procedure FillProjActSubProjAct(LongInt sernr,var Integer level,var array string aspas,var array LongInt aactnr,var array string astate,var array Integer acolnr)
begin
  record ActVc sActr;
  Boolean found;
  Integer i;
  string 255 tstr;
  record ActStateVc ASr;

  if (sernr<0) then begin
    goto LFillProjActSubProjActOut;
  end;

  found = true;
  while (LoopKey("Comment:" & sernr,sActr,1,found)) begin
    if (found) then begin
      i = aspas.length;
      if (level>0) then begin
        M4PadString("*" & sActr.Comment,len(sActr.Comment)+level," ",true,tstr);
      end else begin
        M4PadString(sActr.Comment,len(sActr.Comment)," ",true,tstr);
      end;
      aspas[i] = tstr;
      aactnr[i] = sActr.SerNr;
      astate[i] = sActr.ActState;
      ASr.Code = sActr.ActState;
      if (ReadFirstMain(ASr,1,true)) then begin
        acolnr[i] = ASr.PipelineColNr;
      end;
      level = level + 2;
      FillProjActSubProjAct(sActr.SerNr,level,aspas,aactnr,astate,acolnr);
      level = level - 2;
    end;
  end;

LFillProjActSubProjActOut:;
  return;
end;

global
procedure ActDClassOnOpenWindowRemote2(var record ActVc Actr,string filename,var Integer AcceptanceStatusFlag,var array string aspas,var array LongInt aactnr,var array string astate,var array Integer acolnr)
begin
  record AcceptanceRulesVc Acptr;
  Integer level;

  if (HasApprovals) then begin
    AcceptanceStatusFlag = ActApprovalStatus(Actr,Acptr);
    if (filename=="ProjActVc") then begin
      level = 0;
      FillProjActSubProjAct(Actr.SerNr,level,aspas,aactnr,astate,acolnr);
    end;
  end;
  return;
end;

global
procedure ActDClassOnOpenWindowRemote(var record ActVc Actr,string filename,var Integer AcceptanceStatusFlag,var array string aspas,var array LongInt aactnr)
begin
  array string 255 astate;
  array Integer acolnr;
  
  ActDClassOnOpenWindowRemote2(Actr,filename,AcceptanceStatusFlag,aspas,aactnr,astate,acolnr);
  return;
end;
