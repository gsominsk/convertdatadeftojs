/* RestKOWActionsRemoteTools.hal */

external function string 255 StrReplace(string,string,string);
external function Boolean SetInSet2(string,string);
external procedure RefreshKOScreen(string);
external function Integer SecondsToTime(LongInt,var Time);
external function LongInt TimeToSeconds2(Time);
external function LongInt TimeDiffInSeconds(Time,Time);
external function LongInt DateDiff(Date,Date);

function longint getDateDiffStr(time t2,time t1,date d2,date d1,var string durationstr, var time durationtime)
begin
  longint t;
  longint days;
  time durtime;
  string 255 daystr;

  days = DateDiff(d1,d2);
  durationstr = "";
  
  t = TimeDiffInSeconds(t2,t1);
  if (days>0) then begin 
    if (days>1) then begin 
      daystr = USetStr(8512);
    end else begin
      daystr = USetStr(9640);
    end;
    durationstr = days & " " & daystr & " "; 
  end;
  SecondsToTime(t,durtime);
  durationtime = durtime;
  durationstr = durationstr & durtime;
  
  t = (days * 86400) + t;
  getDateDiffStr = t;
  return;
end;

global
function string 255 OpenKODetailsButton(integer wn,string class,string value,string KOSerNr)
begin
  string 255 res;

  res = res & "<div id=""OpenKODetailsBtn"">" & chr(10);
//  res = res & "<input type=""button"" value=""" & value & """ ";
//  res = res & "onclick=""HansaWorld.callHal('ClickOpenKODetails','" & wn &"," & KOSerNr & "')"">" & chr(10);
//  res = res & "</input>" & chr(10);
  
  res = res & "<a onclick=""HansaWorld.callHal('ClickOpenKODetails','" & wn &"," & KOSerNr & "')"">";  
  res = res & value;
  res = res & "</a>" & chr(10);  
  
  res = res & "</div>" & chr(10);
  
  OpenKODetailsButton = res;
  return;
end;

global
function string 255 OpenKODeliveredButton(integer wn,string class,string value,string KOSerNr)
begin
  string 255 res;
  
//  res = res & "<form>" & chr(10);
  res = res & "<div id=""OpenKODeliveredBtn"">" & chr(10);
//  res = res & "<input type=""button"" value=""" & value & """ ";
//  res = res & "onclick=""HansaWorld.callHal('ClickOpenKODelivered','" & wn &"," & KOSerNr & "')"">" & chr(10);
//  res = res & "</input>" & chr(10);
  
  res = res & "<a onclick=""HansaWorld.callHal('ClickOpenKODelivered','" & wn &"," & KOSerNr & "')"">";  
  res = res & value;
  res = res & "</a>" & chr(10);    
  
  res = res & "</div>" & chr(10);
//  res = res & "</form>" & chr(10);
  
  OpenKODeliveredButton = res;
  return;
end;

procedure AddPanelRow(var string html)
begin
  
  html = html & "</tr>" & chr(10);
  html = html & "<tr>" & chr(10);
  return;
end;

procedure GetHtmlColour(integer Setint,var string bgcolour,var string fontcolour)
begin

  switch (Setint) begin
    case khtmlColourBlack :             bgcolour =  "#1F1D1D";    //Black
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourRed :               bgcolour =  "#f20c0c";    //Red
                                        fontcolour = "#FFFFFF";   //White          
    case khtmlColourGreen :             bgcolour =  "#008000";    //Green
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourDeepBlue :          bgcolour =  "#2020a1";    //Deep Blue
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourPastelBlue :        bgcolour = "#5b9ab7";     //Pastel Blue
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourPastelPurple :      bgcolour = "#bb5bad";     //Pastel Purple
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourPastelYellowGreen : bgcolour = "#b3ba69";     //Pastel Yellow/G
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourPastelGreen :       bgcolour = "#82ba68";     //Pastel Green
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourLime :              bgcolour =  "#00FF00";    //Lime
                                        fontcolour = "#006600";   //DarkGreen
    case khtmlColourSkyBlue :           bgcolour =  "#6698FF";    //Sky Blue
                                        fontcolour = "#000066";   //DarkBlue
    case khtmlColourBlue :              bgcolour = "#0000FF";     //Blue
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourDeepPurple :        bgcolour = "#800080";     //Deep Purple
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourTiredGold :         bgcolour = "#BBAA44";     //Tired Gold
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourCoffee :            bgcolour = "#AA5303";     //Coffee
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourChocolate :         bgcolour = "#C3690F";     //Chocolate
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourOrange :            bgcolour = "#FFA500";     //Orange
                                        fontcolour = "#664200";   //DarkOrange
    case khtmlColourPlum :              bgcolour = "#B93B8F";     //Plum
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourNightShade :        bgcolour = "#726a7b";     //Night Shade
    		                                fontcolour = "#FFFFFF";   //White 
    case khtmlColourDeepForest :        bgcolour = "#254117";     //Deep Forest
                                        fontcolour = "#FFFFFF";   //White
    case khtmlColourFlamingo :          bgcolour = "#F9A7B0";     //Flamingo
                                        fontcolour = "#4d3336";   //White    
    case khtmlColourGray :              bgcolour = "#808080";     //Gray
                                        fontcolour = "#FFFFFF";   //White
    otherwise                           bgcolour = "#808080";   	//Gray
	                                      fontcolour = "#FFFFFF"; 	//White
  end;
  return;
end;

procedure GetPanelColour(string BranchID,string Department,time durationtime,var string bgcolour,var string fontcolour)
begin
  record RestPanelVc RestPanelr;
  row RestPanelVc RestPanelrw;
  string 255 firstDepartment,tstr;
  LongInt pos;
  integer rwcnt,i,colourNo;
  longint lastDurSecs,durationSecs;
  boolean testf;
  
  colourNo = 100;
  tstr = Department;
  tstr = StrReplace(tstr,"+",",");
  tstr = StrReplace(tstr,"!",",");  
  pos = 0;
  GetNextSubstring(tstr,pos,",",firstDepartment);
  durationSecs = TimeToSeconds2(durationtime);

  RestPanelr.BranchID = BranchID;
  RestPanelr.Department = firstDepartment;
  if (ReadFirstKey("BranchID",RestPanelr,2,true)) then begin    
    rwcnt = MatRowCnt(RestPanelr);
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(RestPanelr,i,RestPanelrw);
      if (i==0) then begin 
        colourNo = RestPanelrw.colnr;
      end;
      lastDurSecs = TimeToSeconds2(RestPanelrw.DurationTime);
      if (lastDurSecs<durationSecs) then begin 
        colourNo = RestPanelrw.colnr;
      end else begin
        i = rwcnt; 
      end;
    end;
  end; 
  GetHtmlColour(colourNo,bgcolour,fontcolour)
  return;
end;

function boolean ItemDepartmentExist(string Departments,record KitchenOrderVc KitchenOrderr)
begin
  row KitchenOrderVc KitchenOrderrw;
  boolean res;
  integer rwcnt,i;
  
  rwcnt = MatRowCnt(KitchenOrderr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(KitchenOrderr,i,KitchenOrderrw);
    if (KitchenOrderrw.Delivered!=1) then begin 
      if (SetInSet2(Departments,KitchenOrderrw.KitchenDepartment) or blank(Departments)) then begin
        res = true;
        i = rwcnt;               
      end;
    end;
  end;
  ItemDepartmentExist = res;
  return;
end;

function boolean AllItemsDelivered(string Departments,record KitchenOrderVc KitchenOrderr)
begin
  row KitchenOrderVc KitchenOrderrw;
  boolean res;
  integer rwcnt,i;
  
  res = true;
  rwcnt = MatRowCnt(KitchenOrderr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(KitchenOrderr,i,KitchenOrderrw);
    if (KitchenOrderrw.Delivered!=1) then begin
      if (SetInSet2(Departments,KitchenOrderrw.KitchenDepartment) or blank(Departments)) then begin
        res = false;
        i = rwcnt;               
      end;
    end;
  end;
  AllItemsDelivered = res;
  return;
end;

procedure DetailedRowHeader(var string html)
begin
  html = html & "<tr id=""DetailedRowHead"">" & chr(10);

  html = html & "<th id=""KODetailedcol1"">" & chr(10);
  html = html & "   <div>" &  USetStr(12002) & chr(10);
  html = html & "   </div>" & chr(10); 
  html = html & "</th>" & chr(10);    

  html = html & "<th id=""KODetailedcol2"">" & chr(10);
  html = html & "   <div>" &  USetStr(12004) & chr(10);
  html = html & "   </div>" & chr(10); 
  html = html & "</th>" & chr(10);    
  
  html = html & "<th id=""KODetailedcol3"">" & chr(10);
  html = html & "   <div>" &  USetStr(12003) & chr(10);
  html = html & "   </div>" & chr(10); 
  html = html & "</th>" & chr(10);      
  
  AddPanelRow(html);
  return;
end;

global
procedure KOrdPopulateHtml(record LocalMachineBlock LMb,record RcVc RepSpec,var string html,string tstr)
begin
  record KitchenOrderVc KitchenOrderr;
  row KitchenOrderVc KitchenOrderrw;
  boolean TrHs,KitchenOrdDetailedf;
  date dt,tmpdate;
  time tm,durtime,curtime;
  boolean newpanelrow,testf,exitReadFistf;
  integer i,rowncnt,horizontal_max,resint,rwcnt;
  longint minutes,durseconds,wn;
  string 255 durationstr,QtyStr;
  time durationtime,blankdurtime;
  string 255 bgcolour,fontcolour,departments;
  string 255 div_main_panel,table_class;
  record SysFormatBlock SysFormatRec;
  
  BlockLoad(SysFormatRec);  
  KitchenOrdDetailedf = RepSpec.flags[2]==1;  // LMb Kitchen order detailed
  if (RepSpec.long1>-1) then begin 
    KitchenOrdDetailedf = true;
  end;
  horizontal_max = RepSpec.flags[0];
  departments = RepSpec.f1;                   // Departments to sort by
  curtime = CurrentTime;
  wn = RepSpec.flags[1];
  
  dt.year = 1980;
  dt.month = 1;
  dt.day = 1;
  tm.hour = 1;
  tm.minute = 1;
  tm.second = 1;
  
  if (KitchenOrdDetailedf) then begin 
    div_main_panel = "div_main_details_panel";
    table_class = "KO_Heading_Details_Tbl";  
  end else begin
    div_main_panel = "div_main_panel";
    table_class = "KO_Heading_Tbl";
  end;
  
  html = html & "<div id=""" & div_main_panel & """>" & chr(10);
  html = html & "<table class=""" & table_class & """>" & chr(10);  
  
  if (KitchenOrdDetailedf) then begin 
    DetailedRowHeader(html);   
  end else begin
    html = html & "<tr>" & chr(10);
  end;  
  
  if (RepSpec.long1>-1) then begin 
    KitchenOrderr.SerNr = RepSpec.long1;
    if (ReadFirstMain(KitchenOrderr,1,true)) then begin
      exitReadFistf = true;
      TrHs = true;
      goto LLReadFirst01;      
    end;
  end;
  
  exitReadFistf = false;
  TrHs = (CountRecords("KitchenOrderVc")>0);
  resetloop(KitchenOrderr);
  KitchenOrderr.OKFlag = 0;
  KitchenOrderr.TransDate = dt;
  KitchenOrderr.TransTime = tm;
  while (LoopKey("OKTransDate",KitchenOrderr,3,TrHs)) begin
LLReadFirst01:;
    testf = true;
    if (KitchenOrderr.OKFlag!=0) then begin 
      TrHs = false;
      testf = false;
    end;
    if (TrHs) then begin 
      testf = false;
      if (nonblank(KitchenOrderr.BranchID) and nonblank(LMb.BranchID)) then begin 
        if (KitchenOrderr.BranchID==LMb.BranchID) then begin 
          testf = true;
        end;
      end;
    end;
    if (testf) then begin 
      testf = false;
      if (ItemDepartmentExist(departments,KitchenOrderr)) then begin 
        testf = true;
      end;
    end;
    if (testf) then begin 
      testf = false;
      if (AllItemsDelivered(departments,KitchenOrderr)==false) then begin 
        testf = true;
      end;
    end;    
    if (TrHs and testf) then begin 
      getDateDiffStr(KitchenOrderr.TransTime,curtime,KitchenOrderr.TransDate,CurrentDate,durationstr,durationtime);
      GetPanelColour(LMb.BranchID,departments,durationtime,bgcolour,fontcolour);
      
      if (KitchenOrdDetailedf) then begin 
        rwcnt = MatRowCnt(KitchenOrderr);
        for (i=0; i<rwcnt; i=i+1) begin
          MatRowGet(KitchenOrderr,i,KitchenOrderrw);
          testf = false;
          if (KitchenOrderrw.Delivered!=1) then begin 
            testf = true;
          end;
          if (testf) then begin
            testf = false;
            if (SetInSet2(departments,KitchenOrderrw.KitchenDepartment) or blank(Departments)) then begin
              testf = true;
            end;
          end;
          if (testf) then begin 
            html = html & "<td class=""ItemCodeClass"" bgcolor=""" & bgcolour & """>" & chr(10);
            html = html & "<font color=""" & fontcolour & """>" & chr(10);
            html = html & "   <div id=""KODetailedLine"">" & KitchenOrderrw.ArtCode & chr(10);
            html = html & "   </div>" & chr(10); 
            html = html & "</font>" & chr(10); 
            html = html & "</td>" & chr(10);       
            html = html & "<td class=""ItemQtyClass"" bgcolor=""" & bgcolour & """>" & chr(10);
            html = html & "<font color=""" & fontcolour & """>" & chr(10);
            QtyStr = ValToString(KitchenOrderrw.Quant,M4Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,1);
            html = html & "   <div id=""KODetailedLine"">" & QtyStr & chr(10);
            html = html & "   </div>" & chr(10); 
            html = html & "</font>" & chr(10); 
            html = html & "</td>" & chr(10);        
            html = html & "<td class=""ItemSpecClass"" bgcolor=""" & bgcolour & """>" & chr(10);
            html = html & "<font color=""" & fontcolour & """>" & chr(10);
            html = html & "   <div id=""KODetailedLine"">" & KitchenOrderrw.Spec & chr(10);
            html = html & "   </div>" & chr(10); 
            html = html & "</font>" & chr(10); 
            html = html & "</td>" & chr(10);                       
            AddPanelRow(html);
          end;
        end;      
      end else begin 
        rowncnt = rowncnt + 1;
        html = html & "<td bgcolor=""" & bgcolour & """>" & chr(10);
        html = html & "<font color=""" & fontcolour & """>" & chr(10);
        html = html & "   <div id=""KOpanelNo"">" &  USetStr(10311) & " " & KitchenOrderr.SerNr & chr(10);
        html = html & "   </div>" & chr(10); 
        html = html & "   <div id=""KOpanelTime"">" & USetStr(10347) & " " & KitchenOrderr.TransTime & chr(10);
        html = html & "   </div>" & chr(10);       
        html = html & "   <div id=""KOpanelDur"">" & USetStr(10155) & " " & durationstr & chr(10);
        html = html & "   </div>" & chr(10); 
        html = html & "</font>" & chr(10); 
        html = html & OpenKODetailsButton(wn,"KODetailsBtn",USetStr(16162),KitchenOrderr.SerNr);
        html = html & OpenKODeliveredButton(wn,"KODeliverBtn",USetStr(10235),KitchenOrderr.SerNr);   

        html = html & "</td>" & chr(10);
      
        if (mod(rowncnt,horizontal_max)==0) then begin 
          AddPanelRow(html);
          rowncnt = 0;
        end;      
      end;
    end;
    
    if (exitReadFistf) then begin 
      goto LLReadFirst02; 
    end;
  end;
  if (mod(rowncnt,horizontal_max)!=0) then begin 
    for (i=0;i<(horizontal_max-rowncnt);i=i+1) begin
      GetPanelColour(LMb.BranchID,departments,blankdurtime,bgcolour,fontcolour);
      html = html & "<td id=""Blankpanel"" bgcolor=""" & bgcolour & """>" & chr(10);
      html = html & "</td>" & chr(10);
    end;
  end;
LLReadFirst02:;
  html = html & "</tr>" & chr(10);
  html = html & "</table>" & chr(10);
  html = html & "</div>" & chr(10);
  return;
end;

global
updating procedure MarkKODelivered(record RcVc RepSpec)
begin
  record KitchenOrderVc KitchenOrderr,KitchenOrderrOld;
  row KitchenOrderVc KitchenOrderrw;
  boolean testf,updatef;
  integer i,rwcnt;
  string 255 Departments;
  
  Departments = RepSpec.f1;
  KitchenOrderr.SerNr = StringToLongInt(RepSpec.f3);
  if (ReadFirstMain(KitchenOrderr,1,true)) then begin
    testf = true;
  end;

  if (testf) then begin 
    RecordCopy(KitchenOrderrOld,KitchenOrderr);
    rwcnt = MatRowCnt(KitchenOrderr);
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(KitchenOrderr,i,KitchenOrderrw);
      if (KitchenOrderrw.Delivered!=1) then begin
        if (SetInSet2(Departments,KitchenOrderrw.KitchenDepartment) or blank(Departments)) then begin 
          KitchenOrderrw.Delivered = 1;
          MatRowPut(KitchenOrderr,i,KitchenOrderrw);
          updatef = true;         
        end;           
      end;
    end;
    if (updatef) then begin 
      RecordUpdate(KitchenOrderrOld,KitchenOrderr,false); 
    end;
  end;
  if (updatef) then begin 
    if (ServerMode) then begin 
      ClientRemoteAsync.RefreshKOScreen("STARTIDLETASK");
    end else begin
      RefreshKOScreen("STARTIDLETASK");
    end;
  end;
  return;
end;
