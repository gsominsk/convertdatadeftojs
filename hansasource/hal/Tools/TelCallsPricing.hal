external function roundmode SetRoundModeD(Integer);
external function boolean FitCntyHeader(String,var string,Var String,Var String);
external function val CalcTelPrice(String,Val);

function val GetDefaultCallPrice(String Type,val Cost,Time durat)
begin
  val res,Mins;
  record CallTypeVc CallTyper;
  
  Mins = gethour(durat) * 60;
  Mins = Mins + getminute(durat);
  Mins = Mins + Round(getsecond(durat)/60,SetRoundModeD(0));
  CallTyper.Code = Type;
  if (ReadFirstMain(CallTyper,1,true)) then begin
    res = Mins * CallTyper.Markup2;
  end;
  GetDefaultCallPrice = res;
  return;
end;

function val GetMicrotelCallPrice(record TelCallsVc TelCallr)
begin
  val res,Mins,cPrice;
  record CallTypeVc CallTyper;
  string 100 Dialed,Prefix,Zone,Desc;

  cPrice = GetDefaultCallPrice(TelCallr.Type,TelCallr.Cost,TelCallr.Duration); 
  if (TelCallr.Type=="DDI") then begin
      
    Mins = gethour(TelCallr.Duration) * 3600;
    Mins = Mins + getminute(TelCallr.Duration) * 60;
    Mins = Mins + getsecond(TelCallr.Duration);
    Dialed = TelCallr.Number;
    Dialed = mid(Dialed,2,len(Dialed));
    if FitCntyHeader(Dialed,Prefix,Zone,Desc) then begin
      cPrice = CalcTelPrice(Zone,Mins);
    end;
  end;
  GetMicrotelCallPrice = cPrice;
  return;
end;

global
function val GetCallPrice(record TelCallsVc TelCallr)
begin
  integer Pricing;
  record CallTypeVc CallTyper;
  val cPrice;

  Pricing = 1;
  switch (Pricing) begin
    
    case 1 : cPrice = GetMicrotelCallPrice(TelCallr);
    case 2 : 
    otherwise   
        cPrice = GetDefaultCallPrice(TelCallr.Type,TelCallr.Cost,TelCallr.Duration); 
  end;
  GetCallPrice = cPrice;
  return;
end;
