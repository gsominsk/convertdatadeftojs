external function roundmode DefaultRoundMode();
external function LongInt FindReservation(string,Date,Time);
external procedure GetPList(var String,LongInt,String);
external procedure GetDefaultJobCust(LongInt,var String);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function val NumberOfStayDays(Date,Date,Time,Time,Integer);
external function Boolean ResAvToJobPrices(record ResAvVc,string,string,Integer,var record JobPriceVc);
external function Boolean JobToJobPrices(record JobVc,string,var record JPr);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure PUCalcPerc(val,string,var val);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

procedure CalcUsageSum(string resusage,string custcode,LongInt persons,string pricelist,Date dt,
                       LongInt days,val Quantity,var val ResPrice,val agreedprice,var val Amount,
                       val qty,var record SMVc SMr,var Integer vatcnt,Integer InclVAT,var val vat,
                       string curncy,val fr,val tob1,val tob2,val br1,val br2)
BEGIN
  record INVc INr;
  record CUVc CUr;
  record ResUsageVc ResUsager;
  row ResUsageVc ResUsagerw;
  Integer i,rwcnt;
  LongInt pos;
  val blankv;
  val price,vreb,baseprice,tax2prc;
  Boolean calcpricef;
  string 255 tstr;
  string 20 vatcode,tax2code,taxtemplatecode;
  Date td;
  LongInt qtyl;
  Boolean dummyf;
  Time blankt;

  ResPrice = 0;
  Amount = 0;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  ResUsager.Code = resusage;
  if (ReadFirstMain(ResUsager,1,true)) then begin
  if (ResUsager.AddItemIncPrice==0) then begin
    rwcnt = MatRowCnt(ResUsager);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ResUsager,i, ResUsagerw);
      price = 0;
      if (ResUsagerw.AddPer==0) then begin
        qtyl = 1;
      end else begin
        qtyl = persons;
      end;
      if (qtyl<0) then begin qtyl = 1; end;
      if (GetItemPriceDiscount3(ResUsagerw.ArtCode,1,INr,curncy,
                              fr,tob1,tob2,br1,br2,
                              "",CUr.CustCat,pricelist,CUr.RebCode,
                              price,tstr,vreb,vatcode,baseprice,tstr,
                              0,calcpricef,dt,blankt,custcode,false,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then begin  
        price = price * ((100.00 - vreb)/100.00);
        switch (ResUsagerw.CodeType) begin
          case 0:
            AddVATBase(SMr,vatcode,price * qtyl * qty,blankval,vatcnt,InclVAT,0);
            ResPrice = ResPrice + (price * qtyl);
            if (agreedprice<>0) then begin
              price = agreedprice;
            end;
            Amount = Amount + (price * qtyl);
          case 1:
            for (pos=0;pos<days;pos=pos+1) begin
              AddVATBase(SMr,vatcode,price * Quantity * qtyl * qty,blankval,vatcnt,InclVAT,0);
              ResPrice = ResPrice + (price * Quantity * qtyl);
              if (agreedprice<>0) then begin
                price = agreedprice;
              end;
              Amount = Amount + (price * Quantity * qtyl);
            end;
          case 2:
            AddVATBase(SMr,vatcode,price * qtyl * qty,blankval,vatcnt,InclVAT,0);
            ResPrice = ResPrice + (price * qtyl);
            if (agreedprice<>0) then begin
              price = agreedprice;
            end;
            Amount = Amount + (price * qtyl);
        end;
      end;
    end;
    ResPrice = Round(ResPrice / (days*Quantity),DefaultRoundMode);
  end;
  end;
  RETURN;
END;

global 
function val AddUsageItems(Date SDate,Date EDate,Time STime,Time ETime,LongInt persons,String JobType,String JobUsage,
                           String PriceList,String CustCode,var val ResPrice,Integer calctype,val qty,val agreedprice,
                           string agreeddisc,string ConfigStr,Integer InclVAT,var val vat,
                           string curncy,val fr,val tob1,val tob2,val br1,val br2)
begin
  Record ResTypeVc RoomType;
  Val Quantity;
  Date dt;
  record HotelBlock htr;
  Time startofday;
  LongInt days;
  val Amount,tmp;
  record SMVc SMr;/*VATBaseRowType*/
  Integer vatcnt,InvoiceBy;
  val taxsum;
  roundmode roundlines,rndtotal,rndvat;

  vat = 0;
  if (agreedprice!=0) then begin
    goto LAddUsageItems;
  end;
  if (IsStandardProduct) then begin
    InvoiceBy = 1;
  end;
  BlockLoad(htr);
  SetupVATBase(SMr,vatcnt);
  startofday = htr.CheckIn;
  if (nonblanktime(htr.StartNewDay)) then begin
    startofday = htr.StartNewDay;
  end;
  if (nonblank(JobType)) then begin
    RoomType.Code = JobType;
    if (not ReadFirstMain(RoomType,1,true)) then begin
      goto LAddUsageItems;
    end;
    InvoiceBy = RoomType.InvoiceBy;
  end;
  dt = SDate;
  if ((calctype!=0) or (RoomType.InvoiceBy==0)) then begin
    days = 1;
    Quantity = NumberOfStayDays(SDate,EDate,STime,ETime,InvoiceBy);
  end else begin
    Quantity = NumberOfStayDays(SDate,EDate,STime,ETime,InvoiceBy);
    if (STime<=startofday) and (nonblanktime(STime)) then begin dt = AddDay(dt,-1); end;
    days = Quantity;
    Quantity = 1;
  end;
  CalcUsageSum(JobUsage,CustCode,persons,PriceList,dt,days,Quantity,ResPrice,agreedprice,Amount,qty,SMr,vatcnt,InclVAT,vat,curncy,fr,tob1,tob2,br1,br2);
  CalcVATBaseVAT(SMr,InclVAT,0,vatcnt,vat,taxsum);  
  GetCurncyRoundoff("","","SMVc",rndtotal,roundlines,rndvat);
  vat = Round(vat,rndvat);
  //PUCalcPerc(Amount,agreeddisc,tmp); //This has NO effect?! The return value (tmp) is nowhere used?!
LAddUsageItems:;     
  AddUsageItems = Amount;
  return;
end;

global
function val ValueStayJob(record JobVc Jobr,string restype,var val price,Integer InclVAT,var val vat,boolean rackratef)
begin
  record JobPriceVc JPr;
  row JobPriceVc JPrw;
  record SMVc SMr;/*VATBaseRowType*/
  Integer vatcnt;
  val taxsum,res,tmp;
  val p,a,totqty;
  Integer rwcnt,i;
  roundmode roundlines,rndtotal,rndvat;
  Integer days;
  Date lastd;
  record INVc INr;
  
  vat = 0;
  SetupVATBase(SMr,vatcnt);
/*  
  if (BuildProductCode=="StandardHotel") then begin
    goto LLValueStayJob;
  end;
*/  
  JPr.RecType = 0;
  JPr.SerNr = Jobr.SerNr;
  JPr.RowNr = 0;
  if (ReadFirstMain(JPr,3,true)) then begin end;
  if (JobToJobPrices(Jobr,restype,JPr)) then begin
    rwcnt = MatRowCnt(JPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(JPr,i,JPrw);
      if (not rackratef) then begin
        /*if (Jobr.AgreedPrice<>0) then begin
          a = a + (Jobr.AgreedPrice*JPrw.Qty);
        end else begin
          a = a + JPrw.Sum;
        end;*/
        //The above is not needed. JPrw.Sum is the correctly calculated (row total) price,
        //including the relevant discounts (AgreedRebate or vRebate).
        a = a + JPrw.Sum;
        p = p + JPrw.Sum;
      end else begin
/*      
        a = a + (JPrw.Price*JPrw.Qty);
        p = p + JPrw.Sum;
*/        
        a = a + (JPrw.RackRatePrice*JPrw.Qty);
        p = p + (JPrw.RackRatePrice*JPrw.Qty);
      end;
      totqty = totqty + JPrw.Qty;
      AddVATBase(SMr,JPrw.VATCode,JPrw.Sum,blankval,vatcnt,InclVAT,0);
      if (lastd!=JPrw.StayDay) then begin
        days = days + 1;
      end;
      lastd = JPrw.StayDay;
    end;
    price = p;
    res = a;
    price = Round(price / days,DefaultRoundMode);
  end;
LLValueStayJob:; 
/* 
  if (BuildProductCode=="StandardHotel") then begin
    INr.Code = Jobr.ResCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (Jobr.AgreedPrice==0) then begin
        Jobr.PLPrice = INr.UPrice1;
        price = INr.UPrice1;
        res = Jobr.NrOfDays * INr.UPrice1;
      end else begin
        Jobr.PLPrice = Jobr.AgreedPrice;
        price = Jobr.AgreedPrice;
        res = Jobr.NrOfDays * Jobr.AgreedPrice;
      end;
      AddVATBase(SMr,INr.VATCode,res,blankval,vatcnt,InclVAT,0);
    end;
  end;  
*/  
  CalcVATBaseVAT(SMr,InclVAT,0,vatcnt,vat,taxsum);
  GetCurncyRoundoff("","","SMVc",rndtotal,roundlines,rndvat);
  vat = Round(vat,rndvat);
  //PUCalcPerc(res,Jobr.AgreedDiscount,tmp); //This has NO effect?! The return value (tmp) is nowhere used?!
  ValueStayJob = res;
  return;
end;

global
function val ValueStayResAv(record ResAvVc ResAvr,string pricelist,string customer,Integer rownr,var val price,Integer InclVAT,var val vat)
begin
  record JobPriceVc JPr;
  row JobPriceVc JPrw;
  record SMVc SMr;/*VATBaseRowType*/
  Integer vatcnt;
  val taxsum,res,tmp;
  val p,a;
  Integer rwcnt,i;
  roundmode roundlines,rndtotal,roundvat;
  
  vat = 0;
  SetupVATBase(SMr,vatcnt);
  JPr.RecType = 1;
  JPr.SerNr = ResAvr.SerNr;
  JPr.RowNr = rownr;
  if (ReadFirstMain(JPr,3,true)) then begin end;
  if (ResAvToJobPrices(ResAvr,pricelist,customer,rownr,JPr)) then begin
    rwcnt = MatRowCnt(JPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(JPr,i,JPrw);
      a = a + JPrw.Sum;
      p = p + JPrw.Sum;
      AddVATBase(SMr,JPrw.VATCode,JPrw.Sum,blankval,vatcnt,InclVAT,0);
    end;
    price = p;
    res = a;
    price = Round(price / rwcnt,DefaultRoundMode);
  end;
  CalcVATBaseVAT(SMr,InclVAT,0,vatcnt,vat,taxsum);
  GetCurncyRoundoff("","","SMVc",rndtotal,roundlines,roundvat);
  vat = Round(vat,roundvat);
  ValueStayResAv = res;
  return;
end;

Function Val CalcShopBaskPrice(Record ShopBaskVc shopb,Boolean bc1f)
Begin
  Val ret;
  Boolean calcprice;
  Record INVc INr;
  Record JobVc Jobr;
  Record CUVc CUr;
  String 20 DefCustCode;
  String 100 CustCat,PList,Spec,CustCode;
  string 10 salesacc,vatcod,tax2code,taxtemplatecode;
  Val baseprice,price,bVal,reb,RPrice,ResSum,vRebate,tax2prc;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  Time blankt;

  BlockLoad(GenOptRec);
  GetDefaultJobCust(shopb.OwnerSerNr,DefCustCode); 
  if blank(shopb.CUCode) then begin
    CustCode = DefCustCode;
  end else begin
    CustCode = shopb.CUCode;
  end;
  reb = BlankVal;
  CUr.Code = CustCode;
  if not (ReadFirstMain(CUr,1,true)) then begin
    goto LCalcShopBaskPrice;
  end;
  GetPList(PList,shopb.OwnerSerNr,CustCode);
  INr.Code = shopb.ItemCode;
  if (ReadFirstMain(INr,1,true)) then begin
    if (GetItemPriceDiscount3(shopb.ItemCode,shopb.Qty,INr,
         shopb.CurncyCode,shopb.FrRate,shopb.ToRateB1,shopb.ToRateB2,shopb.BaseRate1,shopb.BaseRate2,
         "",CUr.CustCat,PList,CUr.RebCode,  
         price,Spec,reb,vatcod,baseprice,salesacc,
         0,calcprice,shopb.TransDate,blankt,CustCode,true,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then begin
    end;
  end;
  if (bc1f) then begin
    price  =  shopb.Price;
  end else begin
    if (shopb.PriceInCur!=blankval) then begin
      price  =  shopb.PriceInCur;
    end else begin
      if (shopb.Price!=blankval) then begin
        price  =  shopb.Price;
      end; 
    end;
  end;
  if (shopb.Discount==BlankVal) then begin
     vRebate = reb;
  end else begin
     vRebate = shopb.Discount;
  end;
  RPrice = price; 
  CalcSum(shopb.Qty,RPrice,1,vRebate,ResSum,GenOptRec.UseDiscount);
    
LCalcShopBaskPrice:;
  CalcShopBaskPrice = ResSum;
  Return;
End;


//LO CHANGED A LOT: Extra parameter
global
function val GetCustAccount(LongInt Resnr,String ResCUCode,Boolean Totalf,Boolean bc1f)
Begin
  record ShopBaskVc shopb;
  record JobVc Jobr;
  record JobVc Job2r;
  Boolean TsHr,testf;
  val Total;
  string 20 CustCode,ckey;
  Record ResUsageVc ResUsager;
  Integer addnegate;
  
  addnegate = 0;
  Total = 0;
  TsHr = true;
  Job2r.SerNr = Resnr;
  if (ReadFirstMain(Job2r,1,true)) then begin
    ResUsager.Code = Job2r.ResUsage;
    if (ReadFirstMain(ResUsager,1,true)) then begin
      addnegate = ResUsager.AddNegateItems;
    end;
  end;
  shopb.OwnerSerNr = Resnr;
  shopb.Owner = kShopBaskOwnerReservation;
  while LoopKey("OwnerSerNr",shopb,2,TsHr) begin
    if (shopb.OwnerSerNr <> Resnr) then begin 
       TsHr = false; 
    end;  
    if (TsHr) begin
      testf = true;
      if blank(Shopb.CUCode) then begin
        GetDefaultJobCust(Resnr,CustCode);
      end else begin
        CustCode = Shopb.CUCode;
      end;
      if (nonblank(ResCUCode) and (ResCUCode<>CustCode)) then begin
        testf = false;
      end;
      if (Shopb.DestinationNr<>-1) then begin
        if (not Totalf) then begin
          testf = false;
        end;
      end;
      if (addnegate!=0) then begin
        if (nonblank(Shopb.NegateItem)) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        Total = Total + CalcShopBaskPrice(Shopb,bc1f);
      end;
    end;
  end;
  
  TsHr = true;
  ckey = "Mother:" & Resnr;
  SetLoopPosition(Jobr,0);
  Jobr.Mother = Resnr;
  while(LoopKey(ckey,Jobr,1,TsHr)) begin
    if (Jobr.Mother==Resnr) then begin
      Total = Total + GetCustAccount(Jobr.SerNr,ResCUCode,Totalf,bc1f);
    end else begin
      TsHr = false;
    end;
  end;
   
  GetCustAccount = Total;
  Return;
End;

global
Function LongInt GetChargeResNr(String Room,Date TDate,Time TTime,LongInt JobNro)
Begin
  LongInt resnr,Father;
  Record JobVc Jobr;
  
  if (JobNro==-1) then begin
    resnr = FindReservation(Room,TDate,TTime);
  end else begin
    resnr = JobNro;
  end;
/*
  while (true) begin
    Jobr.SerNr = resnr;
    if ReadFirstMain(Jobr,1,true) then begin
      if ((Jobr.Mother==-1) or (Jobr.Mother==0)) then begin
        goto L99;
      end else begin
        resnr = Jobr.Mother; 
      end;
    end else begin
       // Give error message: Reservation deleted
      goto L99;
    end;  
  end;
*/ 
L99:;  
  GetChargeResNr = resnr;
  Return;
End;
