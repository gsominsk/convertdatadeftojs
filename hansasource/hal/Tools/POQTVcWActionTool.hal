external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external procedure GetPayDealText(string,string,var string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external procedure FindUserMailboxName(string,var string,var string);
external function val CalcPalletsNr(val,string);
external function Boolean GetItemPurchasePriceDiscount(string,string,Date,string,string,val,string,string,string,string,Integer,Boolean,val,val,val,val,val,
         var record INVc,var record PIVc,var Boolean,var val,var string,var val,var string,var string,var Boolean,var string);
external function roundmode SetRoundModeD(Integer);
external function Boolean GetFirstItem(var string,var record INVc);
external function string 255 FindINObjects(string,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure MulPIFactor(val,val,var val);
external procedure GetINPurchaseControlAcc(record INVc,var string,string,string,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function Boolean FindItemVAR2(string,var string,var string,var string);
external procedure RoundRowSum(string,string,string,var val);
external procedure DivPIFactor(val,val,var val);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure POSumup(var record POVc);

procedure POQTMultiLineText(record POQTVc POQTr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row POQTVc POQTrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(POQTr,POQTrw,1);
    POQTrw.Spec = tstr;
    MatRowInsert(POQTr,arow+tcnt-1,POQTrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

function Boolean GetVEPurchaseItem(string artcode,string location,string vecode,var record PIVc PIr)
begin
  Boolean res;
  
  res = false;
  
  PIr.ItemCode = artcode;
  PIr.Location = location;
  PIr.VECode = vecode;  
  res = ReadFirstMain(PIr,3,true);
  
  if (res) then begin
    goto LGetVEPurchaseItem;
  end;
  if (nonblank(location)) then begin
    PIr.ItemCode = artcode;
    PIr.Location = "";
    PIr.VECode = vecode;  
    res = ReadFirstMain(PIr,3,true); 
    if (res) then begin
      goto LGetVEPurchaseItem;
    end;
  end;

  
  PIr.DefaultChoice = 1;
  PIr.ItemCode = artcode;
  PIr.Location = location;
  PIr.VECode = "";  
  res = ReadFirstKey("DefaultChoice",PIr,4,true);  
  if (res) then begin
    goto LGetVEPurchaseItem;
  end;

  if (nonblank(location)) then begin
    PIr.DefaultChoice = 1;
    PIr.ItemCode = artcode;
    PIr.Location = "";
    PIr.VECode = "";  
    res = ReadFirstKey("DefaultChoice",PIr,4,true);  
    if (res) then begin
      goto LGetVEPurchaseItem;
    end;
  end;
  
LGetVEPurchaseItem:;
  GetVEPurchaseItem = res;
  return;
end;

global
function Boolean PastePOQTInPO(record POQTVc POQTp,var record POVc POp)
BEGIN
  row POVc POrw;
  row POQTVc POQTrw;
  Boolean res,itemfound;
  Integer rwcnt,i;
  record INVc INr;
  record PIVc PIr;
  date deldate;
  
  res = true;
  POp.VECode = POQTp.VECode;
  POp.TransDate = CurrentDate;
  POp.PayDeal = POQTp.PayDeal;
  POp.ExportFlag = POQTp.ExportFlag;
  POp.Addr0 = POQTp.Addr0;
  POp.Addr1 = POQTp.Addr1;
  POp.Addr2 = POQTp.Addr2;
  POp.Addr3 = POQTp.Addr3;
  POp.InvAddr3 = POQTp.InvAddr3;
  POp.InvAddr4 = POQTp.InvAddr4;
  POp.POCQStatNr = POQTp.POCQStatNr;
  POp.POClass = POQTp.POClass;
  POp.ShipAddr0 = POQTp.ShipAddr0;
  POp.ShipAddr1 = POQTp.ShipAddr1;
  POp.ShipAddr2 = POQTp.ShipAddr2;
  POp.ShipAddr3 = POQTp.ShipAddr3;
  POp.DelAddr3 = POQTp.DelAddr3;
  POp.DelAddr4 = POQTp.DelAddr4;
  POp.VEContact = POQTp.VEContact;
  POp.OurContact = POQTp.OurContact;
  POp.ShipMode = POQTp.ShipMode;
  POp.CurncyCode = POQTp.CurncyCode;
  POp.PlanShip = POQTp.PlanShip;
  POp.ShipDeal = POQTp.ShipDeal;
  POp.LangCode = POQTp.LangCode;
  POp.OrdNr = POQTp.OrdNr;
  POp.ToRateB1 = POQTp.ToRateB1;
  POp.Closed = 0;
  POp.CostPerUnit = POQTp.CostPerUnit;
  POp.Sum0 = POQTp.Sum0;
  POp.Sum1 = POQTp.Sum1;
  POp.Sum2 = POQTp.Sum2;
  POp.Sum3 = POQTp.Sum3;
  POp.Sum4 = POQTp.Sum4;
  POp.PRCode = POQTp.PRCode;
  POp.Comment = POQTp.Comment;
  POp.InclVAT = POQTp.InclVAT;
  POp.Location = POQTp.Location;
  POp.VEFactoring = POQTp.VEFactoring;
  POp.InvoiceToCode = POQTp.InvoiceToCode;
  POp.ExportedFlag = 0;
  POp.FrRate = POQTp.FrRate;
  POp.ToRateB2 = POQTp.ToRateB2;
  POp.BaseRate1 = POQTp.BaseRate1;
  POp.BaseRate2 = POQTp.BaseRate2;
  POp.WONr = POQTp.WONr;
  POp.Objects = POQTp.Objects;
  POp.Reference = POQTp.Reference;
  POp.SalesMan = POQTp.SalesMan;
  rwcnt = MatRowCnt(POQTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POQTp,i,POQTrw);
    ClearRow(POP,POrw,1);
    POrw.VEArtCode = POQTrw.VEArtCode;
    POrw.ArtCode = POQTrw.ArtCode;
    itemfound = GetFirstItem(POrw.ArtCode,INr);
    if (itemfound==false) then begin
      itemfound = ReadFirstItem(POrw.ArtCode,INr,true,false);
    end;
    POrw.UnitCode = INr.Unittext;
    POrw.Quant = POQTrw.Quant;
    POrw.Spec = POQTrw.Spec;
    POrw.Price = POQTrw.Price;
    POrw.Sum = POQTrw.Sum;
    POrw.vRebate = POQTrw.vRebate;
    POrw.VATCode = POQTrw.VATCode;
    POrw.Objects = POQTrw.Objects;
    POrw.VEQuant = POQTrw.VEQuant;
    POrw.PIFactor = POQTrw.PIFactor;
    POrw.PriceFactor = POQTrw.PriceFactor;
    POrw.VARList = POQTrw.VARList;
    POrw.PRCode = POQTrw.PRCode;
    POrw.WSNr = POQTrw.WSNr;
    POrw.CostAcc = POQTrw.CostAcc;
    if (GetVEPurchaseItem(POrw.ArtCode,POp.Location,POp.VECode,PIr)) then begin
    	if (PIr.PlannedDelDays<>0) then begin
    	  deldate = AddDay(CurrentDate,PIr.PlannedDelDays);
    		POrw.PlanShipRow = deldate;
    	end else begin
    	  POrw.PlanShipRow = "";
    	end;
    end;
    MatRowPut(POp,i,POrw);
  end;
  POSumup(POp);
  PastePOQTInPO = res;
  RETURN;
END;

global
procedure POQTSumup(var record POQTVc POQTp)
BEGIN
  row POQTVc POQTrw;
  val s,ms,ms2,taxsum;
  Integer i,rwcnt;
  roundmode roundlines,rndtotal,rndvat;
  record SMVc VATr;/*VATBaseRowType*/
  Integer vatcnt;  

  SetupVATBase(VATr,vatcnt);
  rwcnt = MatRowCnt(POQTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POQTp,i,POQTrw);
    s = s + POQTrw.Sum;
    AddVATBase(VATr,POQTrw.VATCode,POQTrw.Sum,blankval,vatcnt,POQTp.InclVAT,POQTp.NoTAXonVAT);
  end;
  CalcVATBaseVAT(VATr,POQTp.InclVAT,POQTp.NoTAXonVAT,vatcnt,ms,taxsum);
  POQTp.TAX1Sum = taxsum;  
  if ((POQTp.ExportFlag==1) or (POQTp.ExportFlag==2)) then begin
    ms = blankval;
  end;  
  GetCurncyRoundoff(POQTp.CurncyCode,POQTp.PayDeal,"POQTVc",rndtotal,roundlines,rndvat);
  ms = Round(ms,rndvat);
  ms2 = s + ms + POQTp.TAX1Sum;
  ms2 = Round(ms2,rndtotal);
  POQTp.Sum1 = s;
  POQTp.Sum3 = ms;
  POQTp.Sum4 = ms2;
  if (POQTp.TAX1Sum==0) then begin POQTp.TAX1Sum = blankval; end;
  RETURN;
END;

global  
procedure POQTGetRate(var record POQTVc POQTp)
BEGIN
  val fr,to1,to2,br1,br2;
  string 10 crncy;
 
  crncy = POQTp.CurncyCode;
  GetFullCurncyRate(crncy,POQTp.TransDate,fr,to1,to2,br1,br2);
  POQTp.CurncyCode = crncy;
  POQTp.FrRate = fr;
  POQTp.ToRateB1 = to1;
  POQTp.ToRateB2 = to2;
  POQTp.BaseRate1 = br1;
  POQTp.BaseRate2 = br2;
  RETURN;
END;

global  
function Boolean POQTVc_PasteVECode(var record POQTVc POQTp,Boolean warnf)
BEGIN
  Boolean res;
  record CUVc VEr;
 
  VEr.Code = POQTp.VECode;
  res = ReadFirstMain(VEr,1,true);
  if (res) then begin
    if (VEr.blockedFlag!=0) then begin res = false; end;
  end;
  if (res) then begin
    POQTp.Addr0 = VEr.Name;
    POQTp.Addr1 = VEr.InvAddr0;
    POQTp.Addr2 = VEr.InvAddr1;
    POQTp.Addr3 = VEr.InvAddr2;
    POQTp.InvAddr3 = VEr.InvAddr3;
    POQTp.InvAddr4 = VEr.InvAddr4;
    POQTp.VEContact = VEr.Person;
    POQTp.PayDeal = VEr.VEPayDeal;
    POQTp.Objects = VEr.VEObjects;
    POQTp.CurncyCode = VEr.VECurncyCode;
    POQTGetRate(POQTp);
    POQTp.LangCode = VEr.LangCode;
    POQTp.ShipMode = VEr.VEShipMode;
    POQTp.ShipDeal = VEr.VEShipDeal;
    POQTp.VEFactoring = VEr.VEFactoring;
    POQTp.InvoiceToCode = VEr.VEInvoiceToCode;
    POQTp.ExportFlag = VEr.ExportFlag;
    POQTp.RebCode = VEr.VERebCode;
    POQTp.VEVATCode = VEr.VEVATCode;
    if (warnf) then begin
      if (nonblank(VEr.VEWarnText1)) then begin
        MessageBox(0,VEr.VEWarnText1);
      end;
    end;
    POQTSumup(POQTp);    
  end;
  POQTVc_PasteVECode = res;
  RETURN;
END;

global
function Boolean POQTDchrsum(record POQTVc POQTp,Integer rownr)
BEGIN
  Boolean res;
  row POQTVc POQTrwp;
  val s;
  
  MatRowGet(POQTp,rownr,POQTrwp);
  CalcSum(POQTrwp.VEQuant,POQTrwp.Price,POQTrwp.PriceFactor,POQTrwp.vRebate,s,0);
  RoundRowSum(POQTp.CurncyCode,POQTp.PayDeal,"POQTVc",s);
  if (s!=POQTrwp.Sum) then begin
    res = true;
    POQTrwp.Sum = s;
  end;
  MatRowPut(POQTp,rownr,POQTrwp);
  POQTDchrsum = res;
  RETURN;
END;

global  
function Boolean POQTVc_PasteArtCode(var record POQTVc POQTp,Integer rownr,Boolean multilinef)
begin
  Boolean res,pifound;
  record INVc INr;
  record PIVc PIr;  
  row PIVc PIrw;
  Integer i,rwcnt;
  row POQTVc POQTrw;
  val price,reb,t;
  string 255 descstr,vatcode,purchacc,taxtempletecode;
  Boolean nomoreremotecalls;
  record POSettingBlock POset;

  MatRowGet(POQTp,rownr,POQTrw);
  if  (GetItemPurchasePriceDiscount(POQTp.VECode,POQTp.Location,POQTp.TransDate,POQTp.CurncyCode,POQTrw.ArtCode,POQTrw.Quant,
                                   POQTp.LangCode,"","",POQTp.RebCode,POQTp.ExportFlag,true,
                                   POQTp.FrRate,POQTp.ToRateB1,POQTp.ToRateB2,POQTp.BaseRate1,POQTp.BaseRate2,
                                   INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtempletecode))
  then begin
    res = true;

    BlockLoad(POset);
    POQTrw.ArtCode = INr.Code;
    POQTrw.Price = price;
    POQTrw.VATCode = vatcode;
    POQTrw.vRebate = reb;
    POQTrw.CostAcc = purchacc;

    if (nonblank(POQTp.VEVATCode)) then begin
      POQTrw.VATCode = POQTp.VEVATCode;
    end;

    POQTrw.PriceFactor = INr.PriceFactor;
    POQTrw.UnitCode = INr.Unittext;
    if (pifound) then begin
      POQTrw.VEArtCode = PIr.VEItemCode;
      POQTrw.CustomsCost = PIr.PurchaseCost;
      POQTrw.StockType = PIr.DefStockType;
      POQTrw.Spec = PIr.Comment;
      POQTrw.VEUnit =  PIr.VEUnit;
      POQTrw.PIFactor = PIr.PIFactor;
      DivPIFactor(POQTrw.Quant,POQTrw.PIFactor,t);
      POQTrw.VEQuant = t;    
    end else begin
      POQTrw.Spec = descstr;
    end;
    POQTrw.Objects = FindINObjects(INr.Objects,INr.Group);
    POQTrw.PalletNr = CalcPalletsNr(POQTrw.Quant,POQTrw.ArtCode);
    MatRowPut(POQTp,rownr,POQTrw);
    if (pifound) then begin
      if (multilinef==false) then begin
        rwcnt = MatRowCnt(PIr);    
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PIr,i,PIrw);
          ClearRow(POQTp,POQTrw,1);
          POQTrw.Spec = POQTrw.Spec & PIrw.Text;
          MatRowPut(POQTp,rownr+i+1,POQTrw);
        end;
      end;
    end else begin
      if (multilinef==false) then begin
        POQTMultiLineText(POQTp,INr,POQTp.LangCode,rownr);
      end;
    end;

    if (POQTDchrsum(POQTp,rownr)) then begin
      POQTSumup(POQTp);
    end;                                   
  end;

  if ((res==true) and (POset.WarnNotDefSup!=0)) then begin
//    varf = FindItemVAR(INr.Code,itsz,mask,mskrep,subsets);
    PIr.DefaultChoice = 1;
    PIr.ItemCode = POQTrw.ArtCode;
    PIr.VECode = POQTp.VECode;
    pifound = ReadFirstKey("DefaultChoice",PIr,3,true);
    pifound = pifound and ((PIr.ItemCode==POQTrw.ArtCode) and (PIr.VECode==POQTp.VECode));
    if (pifound==false) then begin
      PIr.DefaultChoice = 1;
      PIr.ItemCode = INr.Code;
      PIr.VECode = POQTp.VECode;
      pifound = ReadFirstKey("DefaultChoice",PIr,3,true);
      pifound = pifound and ((PIr.ItemCode==INr.Code) and (PIr.VECode==POQTp.VECode));
    end;
    if (pifound==false) then begin
//      if (varf) then begin
//      end;
    end;
    if (pifound==false) then begin
      MessageBox(1933,"");
    end;
  end;

  POQTVc_PasteArtCode = res;
  return;
end;

/*
old version
global  
function Boolean POQTVc_PasteArtCode(var record POQTVc POQTp,Integer rownr)
BEGIN
  Boolean res,itemfound,found;
  row POQTVc POQTrw;
  record POSettingBlock POset;
  record INVc INr;
  record INVc IN2r;
  record PIVc PIr;  
  row PIVc PIrw;
  string 255 itsz,mask,subsets,vatcode;
  Integer rwcnt,i;
  val t,price;
  
  BlockLoad(POset);
  MatRowGet(POQTp,rownr,POQTrw);
  itemfound = ReadFirstItem(POQTrw.ArtCode,INr,true,false);
  if (itemfound) then begin
    POQTrw.PriceFactor = INr.PriceFactor;
  end else begin
    POQTrw.PriceFactor = blankval;
  end;
  PIr.VECode = POQTp.VECode;
  PIr.Location = "";
  PIr.ItemCode = POQTrw.ArtCode;
  found = ReadFirstMain(PIr,3,true);
  if (found==false) then begin
    PIr.VECode = POQTp.VECode;
    PIr.ItemCode = INr.Code;
    PIr.Location = "";
    found = ReadFirstMain(PIr,3,true);
    if (FindItemVAR2(POQTrw.ArtCode,itsz,mask,subsets)) then begin
      if (ReadFirstItem(POQTrw.ArtCode,IN2r,true,true)) then begin
        PIr.Comment = IN2r.Name;
      end;
    end;
  end;
  if (found) then begin
    price = PIr.PurPrice;
    if (PIr.CurncyCode!=POQTp.CurncyCode) then begin
      t = MulWithRateToBase1(PIr.CurncyCode,POQTp.TransDate,PIr.PurPrice,DefaultCurRoundOff);
      price = DivRateToBase1(POQTp.CurncyCode,t,POQTp.FrRate,POQTp.ToRateB1,POQTp.ToRateB2,POQTp.BaseRate1,POQTp.BaseRate2,DefaultCurRoundOff);
    end;
    if (blank(vatcode)) then begin
      GetItemVATCode(POQTrw.ArtCode,POQTp.ExportFlag,vatcode,false);
    end;  
    POQTrw.Price = price;
    POQTrw.VEArtCode = PIr.VEItemCode;
    POQTrw.Spec = PIr.Comment;
    POQTrw.VATCode = vatcode;
    if (itemfound) then begin
      if (blank(POQTrw.Objects)) then begin
        POQTrw.Objects = FindINObjects(INr.Objects,INr.Group);
      end;
    end;
    POQTrw.PIFactor = PIr.PIFactor;
    DivPIFactor(POQTrw.Quant,POQTrw.PIFactor,t);
    POQTrw.VEQuant = t;    
    MatRowPut(POQTp,rownr,POQTrw);
    rwcnt = MatRowCnt(PIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PIr,i,PIrw);
      ClearRow(POQTp,POQTrw,1);
      POQTrw.Spec = PIrw.Text;
      MatRowPut(POQTp,rownr+i+1,POQTrw);
    end;
    MatRowGet(POQTp,rownr,POQTrw);    
    res = true;
  end else begin
    if (itemfound) then begin
      price = DivRateToBase1(POQTp.CurncyCode,INr.InPrice,POQTp.FrRate,POQTp.ToRateB1,POQTp.ToRateB2,POQTp.BaseRate1,POQTp.BaseRate2,DefaultCurRoundOff);
      if (blank(vatcode)) then begin
        GetItemVATCode(POQTrw.ArtCode,POQTp.ExportFlag,vatcode,false);
      end;  
      if (GetItemNameStr(1,mask,POQTp.LangCode,INr.Name,INr.Code)) then begin end;

      POQTrw.Price = price;
      POQTrw.VEArtCode = "";
      POQTrw.Spec = mask;
      POQTMultiLineText(POQTp,INr,POQTp.LangCode,rownr);
      POQTrw.VATCode = vatcode;
      POQTrw.PIFactor = blankval;
      POQTrw.VEQuant = POQTrw.Quant;
      POQTrw.VEQuant = POQTrw.VEQuant;
      INr.Code = POQTrw.ArtCode;
      res = true;
    end else begin
      res = false;
    end;
  end;
  if (res==true) and (POset.WarnNotDefSup!=0) then begin
    PIr.DefaultChoice = 1;
    PIr.ItemCode = POQTrw.ArtCode;
    PIr.VECode = POQTp.VECode;
    found = ReadFirstKey("DefaultChoice",PIr,3,true);
    found = found and ((PIr.ItemCode==POQTrw.ArtCode) and (PIr.VECode==POQTp.VECode));
    if (found == false) then begin // EDS
      MessageBox(1933,"");
    end;
  end;
  POQTrw.Objects = FindINObjects(INr.Objects,INr.Group);
  mask = "";
  GetINPurchaseControlAcc(INr,mask,POQTp.VECode,POQTp.Location,0);
  POQTrw.CostAcc = mask;
  MatRowPut(POQTp,rownr,POQTrw);
  if (POQTDchrsum(POQTp,rownr)) then begin
    POQTSumup(POQTp);
  end;
  POQTVc_PasteArtCode = res;
  RETURN;
END;
*/

global  
function Boolean POQTVc_PasteVEArtCode(var record POQTVc POQTp,Integer rownr)
begin
  Boolean res,pifound;
  record INVc INr;
  record PIVc PIr;  
  row PIVc PIrw;
  Integer i,rwcnt;
  row POQTVc POQTrw;
  val price,reb,t;
  string 255 descstr,vatcode,purchacc,taxtempletecode;
  Boolean nomoreremotecalls;

  MatRowGet(POQTp,rownr,POQTrw);

  PIr.VEItemCode = POQTrw.VEArtCode;
  PIr.VECode = POQTp.VECode;
  PIr.ItemCode = POQTrw.ArtCode;
  PIr.Location = POQTp.Location;
  pifound = ReadFirstKey("VEItemCode",PIr,4,true);
  if (pifound==false) then begin
    if (nonblank(POQTp.Location)) then begin
      PIr.VECode = POQTp.VECode;
      PIr.VEItemCode = POQTrw.VEArtCode;
      if (nonblank(POQTrw.ArtCode)) then begin
        PIr.ItemCode = POQTrw.ArtCode;
        pifound = ReadFirstKey("VEItemCode",PIr,3,true);
      end else begin
        pifound = ReadFirstKey("VEItemCode",PIr,2,true);
      end;
    end;
  end;
  if (pifound) then begin
    if (PIr.VEItemCode!=POQTrw.VEArtCode) then begin pifound = false; end;
  end;
  if (pifound) then begin
    if  (GetItemPurchasePriceDiscount(POQTp.VECode,POQTp.Location,POQTp.TransDate,POQTp.CurncyCode,PIr.ItemCode,POQTrw.Quant,
                                     POQTp.LangCode,"","",POQTp.RebCode,POQTp.ExportFlag,true,
                                     POQTp.FrRate,POQTp.ToRateB1,POQTp.ToRateB2,POQTp.BaseRate1,POQTp.BaseRate2,
                                     INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtempletecode))
    then begin
      res = true;

      POQTrw.Price = price;
      POQTrw.VATCode = vatcode;
      POQTrw.vRebate = reb;
      POQTrw.CostAcc = purchacc;

      if (nonblank(POQTp.VEVATCode)) then begin
        POQTrw.VATCode = POQTp.VEVATCode;
      end;

      POQTrw.ArtCode = PIr.ItemCode;
      POQTrw.PriceFactor = INr.PriceFactor;
      POQTrw.UnitCode = INr.Unittext;
      POQTrw.VEArtCode = PIr.VEItemCode;
      POQTrw.CustomsCost = PIr.PurchaseCost;
      POQTrw.StockType = PIr.DefStockType;
      POQTrw.Spec = PIr.Comment;
      POQTrw.VEUnit =  PIr.VEUnit;
      POQTrw.PIFactor = PIr.PIFactor;
      DivPIFactor(POQTrw.Quant,POQTrw.PIFactor,t);
      POQTrw.VEQuant = t;    
      POQTrw.Objects = FindINObjects(INr.Objects,INr.Group);
      POQTrw.PalletNr = CalcPalletsNr(POQTrw.Quant,POQTrw.ArtCode);
      if (blank(POQTrw.Spec)) then begin
        POQTrw.Spec = descstr;
      end;
      if (blank(POQTrw.Spec)) then begin
        POQTrw.Spec = INr.Name;
      end;
      MatRowPut(POQTp,rownr,POQTrw);

      rwcnt = MatRowCnt(PIr);    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PIr,i,PIrw);
        ClearRow(POQTp,POQTrw,1);
        POQTrw.Spec = POQTrw.Spec & PIrw.Text;
        MatRowPut(POQTp,rownr+i+1,POQTrw);
      end;
      
      if (POQTDchrsum(POQTp,rownr)) then begin
        POQTSumup(POQTp);
      end;                                   
    end;
  end;

  POQTVc_PasteVEArtCode = res;
  return;
end;

/*
old version
global  
function Boolean POQTVc_PasteVEArtCode(var record POQTVc POQTp,Integer rownr)
BEGIN
  Boolean res,itemfound,found;
  row POQTVc POQTrw;
  record INVc INr;
  record PIVc PIr;
  row PIVc PIrw;
  val t,price;
  string 10 vatcode;
  Integer i,rwcnt;
  
  MatRowGet(POQTp,rownr,POQTrw);
  PIr.VECode = POQTp.VECode;
  PIr.VEItemCode = POQTrw.VEArtCode;
  PIr.ItemCode = POQTrw.ArtCode;
  PIr.Location = "";
  found = ReadFirstKey("VEItemCode",PIr,3,false);
  if (found) then begin
    if (PIr.VEItemCode!=POQTrw.VEArtCode) then begin found = false; end;
  end;
  if (found) then begin
    itemfound = ReadFirstItem(PIr.ItemCode,INr,true,false);
    if (itemfound) then begin
      POQTrw.PriceFactor = INr.PriceFactor;
    end else begin
      POQTrw.PriceFactor = blankval;
    end;
    price = PIr.PurPrice;
    GetItemVATCode(POQTrw.ArtCode,POQTp.ExportFlag,vatcode,false);
    POQTrw.ArtCode = PIr.ItemCode;
    if (PIr.CurncyCode!=POQTp.CurncyCode) then begin
      t = MulWithRateToBase1(PIr.CurncyCode,POQTp.TransDate,PIr.PurPrice,DefaultCurRoundOff);
      price = DivRateToBase1(POQTp.CurncyCode,t,POQTp.FrRate,POQTp.ToRateB1,POQTp.ToRateB2,POQTp.BaseRate1,POQTp.BaseRate2,DefaultCurRoundOff);
    end;
    POQTrw.Price = price;
    POQTrw.VEArtCode = PIr.VEItemCode;
    POQTrw.Spec = PIr.Comment;
    POQTrw.VATCode = vatcode;
    POQTrw.PIFactor = PIr.PIFactor;
    DivPIFactor(POQTrw.Quant,POQTrw.PIFactor,t);
    POQTrw.VEQuant = t;    
    MatRowPut(POQTp,rownr,POQTrw);
    rwcnt = MatRowCnt(PIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PIr,i,PIrw);
      if (i <> 0) then begin
        ClearRow(POQTp,POQTrw,1);
      end;
      if (nonblank(POQTrw.Spec)) then begin
        POQTrw.Spec = POQTrw.Spec & ",";
      end;
      POQTrw.Spec = POQTrw.Spec & PIrw.Text;
      MatRowPut(POQTp,rownr+i,POQTrw);
    end;
    MatRowGet(POQTp,rownr,POQTrw);    
    res = true;
  end else begin
    res = false;
  end;  
  MatRowPut(POQTp,rownr,POQTrw);
  if (POQTDchrsum(POQTp,rownr)) then begin
    POQTSumup(POQTp);
  end;
  POQTVc_PasteVEArtCode = res;
  RETURN;
END;
*/

global  
procedure POQTVc_PasteQuant(var record POQTVc POQTp,Integer rownr)
BEGIN
  Boolean res,pifound;
  record INVc INr;
  record PIVc PIr;  
  row PIVc PIrw;
  Integer i,rwcnt;
  row POQTVc POQTrw;
  val price,reb,t;
  string 255 descstr,vatcode,purchacc,taxtempletecode;
  Boolean nomoreremotecalls;
  
  MatRowGet(POQTp,rownr,POQTrw);

  if  (GetItemPurchasePriceDiscount(POQTp.VECode,POQTp.Location,POQTp.TransDate,POQTp.CurncyCode,POQTrw.ArtCode,POQTrw.Quant,
                                   POQTp.LangCode,"","",POQTp.RebCode,POQTp.ExportFlag,true,
                                   POQTp.FrRate,POQTp.ToRateB1,POQTp.ToRateB2,POQTp.BaseRate1,POQTp.BaseRate2,
                                   INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtempletecode))
  then begin   
    POQTrw.vRebate = reb;
    DivPIFactor(POQTrw.Quant,POQTrw.PIFactor,t);
    POQTrw.VEQuant = t;    
    MatRowPut(POQTp,rownr,POQTrw);
    if (POQTDchrsum(POQTp,rownr)) then begin
      POQTSumup(POQTp);
    end;
  end;
  RETURN;
END;

global  
procedure POQTVc_PasteVEQuant(var record POQTVc POQTp,Integer rownr)
BEGIN
  val t;
  row POQTVc POQTrw;
  
  MatRowGet(POQTp,rownr,POQTrw);
  MulPIFactor(POQTrw.VEQuant,POQTrw.PIFactor,t);
  POQTrw.Quant = t;    
  MatRowPut(POQTp,rownr,POQTrw);
  if (POQTDchrsum(POQTp,rownr)) then begin
    POQTSumup(POQTp);
  end;
  RETURN;
END;

global  
procedure POQTVc_PastePrice(var record POQTVc POQTp,Integer rownr)
BEGIN
  if (POQTDchrsum(POQTp,rownr)) then begin
    POQTSumup(POQTp);
  end;
  RETURN;
END;

global  
procedure POQTVc_PastevRebate(var record POQTVc POQTp,Integer rownr)
BEGIN
  if (POQTDchrsum(POQTp,rownr)) then begin
    POQTSumup(POQTp);
  end;
  RETURN;
END;

global  
procedure POQTVc_PasteSum(var record POQTVc POQTp,Integer rownr)
BEGIN
  row POQTVc POQTrw;
  val s;

  MatRowGet(POQTp,rownr,POQTrw);
  if ((nonblank(POQTrw.VEQuant)) and (nonblank(POQTrw.Price))) then begin
    s = POQTrw.Sum/POQTrw.VEQuant;
    s = POQTrw.Price - s;
    s = s*100;
    s = s/POQTrw.Price;
    s = Round(s,SetRoundModeD(1));
    POQTrw.vRebate = s;
  end;  
  MatRowPut(POQTp,rownr,POQTrw);
  if (POQTDchrsum(POQTp,rownr)) then begin
    POQTSumup(POQTp);
  end;
  RETURN;
END;

global  
procedure POQTVc_PasteVATCode(var record POQTVc POQTp,Integer rownr)
BEGIN
  if (POQTDchrsum(POQTp,rownr)) then begin
  end;
  POQTSumup(POQTp);
  RETURN;
END;

global
updating function Integer CreateMailFromPOQTD(record POQTVc POQTr,var record MailVc Mailr,var string warning,string pdfform)
begin
  Integer res;
  record MailVc Mail2r;
  record CUVc VEr;
  record CUVc ContactCUr;  
  row POQTVc POQTrw;  
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  Integer line;
  string 255 docname,fname;
  row MailTextVc MTrw;  
  record LTxtVc LTxtr;
  Integer IgnoreRecordDetails;

  res = 0;
  if (ReadFirstMain(POQTr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromPOQTD;
  end;  
  MArw.RowTyp = kMailRowTypeFrom;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  VEr.Code = POQTr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin end;
  MArw.RowTyp = kMailRowTypeTo;
  MArw.AddrCode = VEr.eMail;
  if (nonblank(POQTr.VEContact)) then begin
    if (FindCustomerRelation(VEr.Code,POQTr.VEContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        MArw.AddrCode = ContactCUr.eMail;
      end;
    end;
  end;
  if (blank(MArw.AddrCode)) then begin
    res = 2289;
    warning = VEr.Code;
    goto LCreateMailFromPOQTD;
  end;
  MatRowPut(Mailr,1,MArw);
  MailTextRow("POQTVc","",POQTr.LangCode,MTrw,IgnoreRecordDetails);
  Mailr.Header = MTrw.Header;
  if (blank(Mailr.Header)) then begin 
    Mailr.Header = USetStr(17951);
    Mailr.Header = Mailr.Header & POQTr.SerNr;
  end;
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin 
    CreateRecordLink(Mailr,CurrentCompany,POQTr,CurrentCompany);  
    CreateRecordLink(POQTr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;  
  AddCRToText(Mailr);
  if (IgnoreRecordDetails==0) then begin
    Line = LineTextCnt(LTxtr);
    rwcnt = MatRowCnt(POQTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POQTr,i,POQTrw);
      tstr = POQTrw.ArtCode & TAB;
      tstr = tstr & ValToString(POQTrw.Quant,M4UVal,"",".",0) & TAB;
      tstr = tstr & Left(POQTrw.Spec,60) & TAB;
      tstr = tstr & POQTrw.Price & TAB;
      if (POQTrw.vRebate!=0) then begin
        tstr = tstr & "-" & ValToString(POQTrw.vRebate,M4UVal,"",".",0) & "%" &  TAB;
      end;
      tstr = tstr & POQTrw.Sum & TAB;
      if (Mailr.HtmlFlag==0) then begin
        LineTextPut(Mailr,line,tstr);
      end else begin
        LineTextPutToHtmlRecord(Mailr,tstr,false,true);
      end;
      line = line + 1;
    end;
    AddCRToText(Mailr);
    tstr = TAB & TAB & TAB & "=====";
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;

    tstr = TAB & TAB & TAB & USetStr(2685) & TAB & POQTr.Sum1;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;
    tstr = TAB & TAB & TAB & USetStr(2686) & TAB & POQTr.Sum3;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    tstr = TAB & TAB & TAB & USetStr(2687) & TAB & POQTr.Sum4;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
  //  line = line + 1;  
  //  tstr = USetStr(7021) & " " & POQTr.ValidUntilDate;
  //  LineTextPut(Mailr,line,tstr);
    line = line + 1;  
    GetPayDealText(POQTr.PayDeal,POQTr.LangCode,tstr);
    tstr = USetStr(3060) & " " & tstr;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1; 
    AddCRToText(Mailr);
  end; 
  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);
  
  docname = pdfform;
  if (blank(docname)) then begin
    docname = "POQTForm";
  end;
  fname = "tmp/" & USetStr(17951) & POQTr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(POQTr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromPOQTD:;  
  CreateMailFromPOQTD = res;
  return;
end;

