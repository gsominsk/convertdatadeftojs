external function Integer SDApprovalStatus(record SDVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external function Boolean BulkSerialNos_CalculateQuantityAndSerialNr(record SerNrTrackBlock,Boolean,string,var string,var val);
external function string 255 FindPositionWithSerialNr(string,string,string,string);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external function Integer CheckSerialStatus(string,string,var string);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external function Boolean SerialNrForOneItem(string,var record SerBalVc);
external function string 255 FindINObjects(string,string);
external function Boolean GetFirstItem(var string,var record INVc);
external procedure FindStockValueAtPosition(string,string,string,var record PISVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure SDSumUp(var record SDVc);
external function Boolean SDVc_ExplodeRecepy(record INVc,val,record SDVc,string,Integer);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
  
global
function Boolean SDVc_PasteArtCode(var record SDVc SDp,Integer rownr,Integer changed,var string inwarning,var string warning)
BEGIN
  Boolean res;
  record INVc INr;
  row SDVc SDrw;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  Boolean itemfound;

  MatRowGet(SDp,rownr,SDrw);  
  if ((changed!=0) or ((blank(SDrw.Spec)) and (nonblank(SDrw.ArtCode)))) then begin
    res = true;
    itemfound = GetFirstItem(SDrw.ArtCode,INr);
    if (itemfound==false) then begin
      itemfound = ReadFirstItem(SDrw.ArtCode,INr,true,true);
      if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin
        INr.Code = SDrw.ArtCode;
      end;
    end;
    if (itemfound) then begin
      if (nonblank(INr.WarnText1)) then begin
        inwarning = INr.WarnText1;
      end;
      if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
        SDrw.Recepy = INr.Recepy;
      end else begin
        SDrw.Recepy = "";
      end;
      SDrw.Coefficient = INr.UnitCoefficient;
      SDrw.ArtCode = INr.Code;
      SDrw.Spec = INr.Name;
      SDrw.BasePrice = INr.UPrice1;
      SDrw.Objects = FindINObjects(INr.Objects,INr.Group);
      SDrw.UnitXval = INr.Width;
      SDrw.UnitYval = INr.Height;
      SDrw.UnitZval = INr.Depth;
      MatRowPut(SDp,rownr,SDrw);
    end else begin
      if (nonblank(SDrw.ArtCode)) then begin
        warning = USetStr(1120) & SDrw.ArtCode;
      end;
    end;
  end;
  SDSumUp(SDp);
  SDVc_PasteArtCode = res;
  RETURN;
END;
    
global
function Boolean SDVc_PasteQty(var record SDVc SDp,Integer rownr)
BEGIN
  Boolean res,testf,itemfoundf;
  record INVc INr;
  row SDVc SDrw,orgSDrw;
  row SDVc palletSDrw;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  Integer lrownr;
  val orgquant;
  record MainStockBlock MainStockRec;
  string 255 tstr;
  record LocationVc LocRec;
  record SerNrTrackBlock SNrb;

  BlockLoad(SNrb);
  lrownr = rownr;
  MatRowGet(SDp,lrownr,SDrw);
  itemfoundf = ReadFirstItem(SDrw.ArtCode,INr,true,true);
  if (nonblank(SDrw.ArtCode)) and (INr.SerNrf==1) then begin
    if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,false,SDrw.ArtCode,SDrw.SerialNr,SDrw.Qty)) then begin
      MatRowPut(SDp,lrownr,SDrw);
      MatRowGet(SDp,lrownr,SDrw);
    end;
  end;

  CopyRow(SDp,SDrw,orgSDrw);    
  orgquant = orgSDrw.Qty;
  BlockLoad(MainStockRec);
LSDVc_PasteQuantAGAIN:;
  LocRec.Code = SDrw.Location;
  if (blank(LocRec.Code)) then begin 
    LocRec.Code = SDp.Location;
  end;
  if (blank(LocRec.Code)) then begin 
    LocRec.Code = MainStockRec.MainStock;
  end;
  if (ReadFirstMain(LocRec,1,true)) then begin end;
  if (LocRec.RequirePos!=0) then begin    
    if (ReadFirstItem(SDrw.ArtCode,INr,true,true)) then begin
      if (nonblank(INr.DefPalletItem)) then begin
        if (INr.QtyonPallet>0) then begin
          if (SDrw.Qty>INr.QtyonPallet) then begin
            SDrw.Qty = INr.QtyonPallet;
            MatRowPut(SDp,lrownr,SDrw);    
          end;
        end;
      end;
    end;
  end;
  if (itemfoundf) then begin
    if ((INr.ExplodeRec!=0) and (nonblank(SDrw.Recepy))) then begin
      if (SDVc_ExplodeRecepy(INr,SDrw.Qty,SDp,SDrw.Recepy,lrownr)) then begin
      end;
      MatRowGet(SDp,lrownr,SDrw);
      SDrw.Recepy = "";
      MatRowPut(SDp,lrownr,SDrw);
    end;
    res = true;
  end;
  SDSumUp(SDp);
  if (res) then begin
    if (LocRec.RequirePos!=0) then begin
      if (nonblank(INr.DefPalletItem)) then begin        
        lrownr = lrownr + 1;
        ClearRow(SDp,palletSDrw,1);
        palletSDrw.PosCode = SDrw.PosCode;
        palletSDrw.ArtCode = INr.DefPalletItem;
        palletSDrw.Qty = 1;
        MatRowInsert(SDp,lrownr,palletSDrw); 
        testf = SDVc_PasteArtCode(SDp,lrownr,1,tstr,tstr);
      end;
      lrownr = lrownr + 1;
      orgquant = orgquant - SDrw.Qty;
      if (orgquant>0) then begin
        CopyRow(SDp,orgSDrw,SDrw);
        SDrw.Qty = orgquant;
        goto LSDVc_PasteQuantAGAIN;
      end;
    end;
  end;    
  SDVc_PasteQty = res;
  RETURN;
END;
    
global
procedure SDVc_PastePosCode(var record SDVc SDp,Integer rownr)
begin
  row SDVc SDrw;
  row SDVc toSDrw;
  record PISVc PISr;
  record MainStockBlock MainStockRec;
  string 255 location;
  val rem;

  MatRowGet(SDp,rownr,SDrw);
  if (nonblank(SDrw.Location)) then begin
    location = SDrw.Location;
  end else begin
    location = SDp.Location;
    if (blank(location)) then begin
      BlockLoad(MainStockRec);
      location = MainStockRec.MainStock;
    end;
  end;  
  FindStockValueAtPosition(SDrw.ArtCode,location,SDrw.PosCode,PISr);
  if (PISr.LeftQty<=0) then begin
  end else begin
    if (SDrw.Qty>PISr.LeftQty) then begin
      rem = SDrw.Qty - PISr.LeftQty;
      SDrw.Qty = PISr.LeftQty;
      MatRowPut(SDp,rownr,SDrw);
      CopyRow(SDp,SDrw,toSDrw);    
      toSDrw.PosCode = "";
      toSDrw.Qty = rem;
      MatRowInsert(SDp,rownr+1,toSDrw);
    end;
  end;
  return;
end;    

global
procedure SDVc_PasteSerialNr(var record SDVc SDr,Integer rownr,var string inwarn)
begin
  row SDVc SDrw;
  val UnitXval,UnitYval,UnitZval,oldquant;
  string 255 tstr;
  Boolean chsum;
  string 20 location;
  record SerBalVc SBr;
  string 30 serial;
  record INVc INr;
  record SerNrTrackBlock SNrb;

  BlockLoad(SNrb);
  MatRowGet(SDr,rownr,SDrw);
  oldquant = SDrw.Qty;
  location = SDrw.Location;
  if (blank(location)) then begin
    location = SDr.Location;
  end;
  if (blank(SDrw.ArtCode)) then begin 
    if (SerialNrForOneItem(SDrw.SerialNr,SBr)) then begin
      if (nonblank(SBr.Item)) then begin 
        SDrw.ArtCode = SBr.Item;
        SDrw.Qty = 1;
        SDrw.Location = SBr.Location;
        serial = SDrw.SerialNr;
        SDrw.PosCode = FindPositionWithSerialNr(SDr.Location,SDrw.ArtCode,SDrw.SerialNr,SDrw.Location);
        MatRowPut(SDr,rownr,SDrw);
        if (SDVc_PasteArtCode(SDr,rownr,1,inwarn,inwarn)) then begin
        end;
        MatRowGet(SDr,rownr,SDrw);
        SDrw.SerialNr = serial;
        MatRowPut(SDr,rownr,SDrw);
      end;
    end;  
  end else begin
    ReadFirstItem(SDrw.ArtCode,INr,true,true);
    if (nonblank(SDrw.ArtCode)) and (INr.SerNrf==1) then begin
      if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,true,SDrw.ArtCode,SDrw.SerialNr,SDrw.Qty)) then begin
        MatRowPut(SDr,rownr,SDrw);
        MatRowGet(SDr,rownr,SDrw);
      end;
    end;
  end;
  if ((SNrb.BulkSerialNos==0) or (InString(SDrw.SerialNr,":")==0)) then begin
    SerialNrDimensions(SDrw.ArtCode,SDrw.SerialNr,UnitXval,UnitYval,UnitZval);
    SDrw.UnitXval = UnitXval;
    SDrw.UnitYval = UnitYval;
    SDrw.UnitZval = UnitZval;
    if (CheckSerialStatus(SDrw.ArtCode,SDrw.SerialNr,tstr)==1) then begin
      MessageBox(0,tstr);
    end;
    SDrw.Qty = CalculateSerialNrQuantity(SDrw.ArtCode,SDrw.SerialNr,location,true,SDrw.UnitXval,SDrw.UnitYval,SDrw.UnitZval,SDrw.Qty);    
  end;
  if (SDrw.Qty!=oldquant) then begin
    chsum = true;
  end;
  MatRowPut(SDr,rownr,SDrw);
  if (chsum) then begin
    SDSumUp(SDr);
  end;    
  return;
end;    

global
procedure SDDClassOnOpenWindowRemote(var record SDVc SDr,var Integer AcceptanceStatusFlag)
begin
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  if (HasApprovals) then begin
    AcceptanceStatusFlag = SDApprovalStatus(SDr,Acptr);
  end;
  return;
end;