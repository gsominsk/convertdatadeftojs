procedure FindAT2Objects(string InventoryNr,var string res)
BEGIN
  record AT2UnitVc ATUnitr;
  
  res = "";
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
    res = ATUnitr.Objects;
  end;
  RETURN;
END;

procedure FindAT2SalesValue(Date tdp,string InventoryNr,var val resp)
BEGIN
  record AT2UnitVc ATUnitr;
  record AT2DprVc ATDprr;
  
  resp = blankval;
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
    resp = ATUnitr.PurchVal;
  end;
  ATDprr.InventoryNr = InventoryNr;
  if (ReadLastKey("InventoryNr",ATDprr,1,true)) then begin
    if (ATDprr.TransDate<=tdp) then begin resp = ATDprr.StartVal; end;
  end;  
  RETURN;
END;

global
procedure AT2WrofVc_PasteInventoryNr(var record AT2WrofVc AT2Wrofr,Integer rownr)
BEGIN
  record AT2UnitVc ATUnitr;
  row AT2WrofVc AT2Wrofrw;
  val t;
  string 255 tstr;
  record InvBalVc InvBalr;
  
  MatRowGet(AT2Wrofr,rownr,AT2Wrofrw);
  ATUnitr.InventoryNr = AT2Wrofrw.InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
    FindAT2SalesValue(AT2Wrofr.TransDate,AT2Wrofrw.InventoryNr,t);
    if (AT2Wrofrw.Qty==0) then begin
      InvBalr.InventoryNr = AT2Wrofrw.InventoryNr;
      if (ReadFirstMain(InvBalr,1,true)) then begin end;
      AT2Wrofrw.Qty = InvBalr.CurQuant;
    end;
    AT2Wrofrw.SalesVal = AT2Wrofrw.Qty*t;
    AT2Wrofrw.Description = ATUnitr.Description;
    t = blankval;
    AT2Wrofrw.DprVal = t;
    FindAT2Objects(AT2Wrofrw.InventoryNr,tstr);
    AT2Wrofrw.Objects = tstr;
    MatRowPut(AT2Wrofr,rownr,AT2Wrofrw);
  end;
  RETURN;
END;

global
procedure AT2WrofVc_PasteQty(var record AT2WrofVc AT2Wrofr,Integer rownr)
BEGIN
  record AT2UnitVc ATUnitr;
  row AT2WrofVc AT2Wrofrw;
  val t;
  string 255 tstr;
  
  MatRowGet(AT2Wrofr,rownr,AT2Wrofrw);
  ATUnitr.InventoryNr = AT2Wrofrw.InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
    FindAT2SalesValue(AT2Wrofr.TransDate,AT2Wrofrw.InventoryNr,t);
    AT2Wrofrw.SalesVal = AT2Wrofrw.Qty*t;
    MatRowPut(AT2Wrofr,rownr,AT2Wrofrw);
  end;
  RETURN;
END;