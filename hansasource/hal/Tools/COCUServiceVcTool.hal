external function Boolean PastePackage(record CUServiceVc,var record SystemUsageSettingVc,Integer,val,string);
external procedure CUServiceSumup(var record CUServiceVc);
external function Boolean CUServiceVc_PasteArtCode(var record CUServiceVc,Integer,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure RoundRowSum(string,string,string,var val);
external procedure RemoveOldCCandClassClass(Integer,var string);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);
external procedure SetSalesMan(var string,string);
external function val CUServiceRebate(record CUServiceVc,row CUServiceVc,Date);

global
function Boolean PasteCustInCOCUService(var record COCUServiceVc COCUServicep,Boolean updatall,var string warntext)
BEGIN
  Boolean found;
  record CUVc CUr;
  record INVc INr;
  val x,pr,bal,limit;
  val s0,s1,s2,s3,s4,t;
  val fr,to1,to2,br1,br2;
  record FreightBlock FreightRec;
  string 255 tstr;
  string 5 crncy;
  record GeneralOptionBlock GenOptRec;
  record COCUServiceBlock COCUServiceb;
  Boolean limitdaysf;
  Time blankt;

  BlockLoad(GenOptRec);
  BlockLoad(COCUServiceb);
  CUr.Code = COCUServicep.CustCode;
  if (GetCustAndBal(CUr,limit,bal,0,0,0,0,0,0,limitdaysf)) then begin
    found = true;
    COCUServicep.Addr0 = CUr.Name;
    COCUServicep.Addr1 = CUr.InvAddr0;
    COCUServicep.Addr2 = CUr.InvAddr1;
    COCUServicep.Addr3 = CUr.InvAddr2;
    COCUServicep.InvAddr3 = CUr.InvAddr3;
    COCUServicep.InvAddr4 = CUr.InvAddr4;
    COCUServicep.ClientContact = CUr.Person;
    COCUServicep.CustCat = CUr.CustCat;
    COCUServicep.Objects = CUr.Objects;
    COCUServicep.CurncyCode = CUr.CurncyCode;
    crncy = COCUServicep.CurncyCode;
    GetFullCurncyRate(crncy,COCUServicep.TransDate,fr,to1,to2,br1,br2);
    COCUServicep.CurncyCode = crncy;
    SetSalesMan(tstr,CUr.SalesMan);
    COCUServicep.SalesMan = tstr;
    COCUServicep.LangCode = CUr.LangCode;
    COCUServicep.ShipDeal = CUr.ShipDeal;
    COCUServicep.ShipMode = CUr.ShipMode;
    COCUServicep.PriceList = CUr.PLCode;
    COCUServicep.RebCode = CUr.RebCode;
    COCUServicep.CustVATCode = CUr.VATCode;
    tstr = COCUServicep.PriceList;
    GetPriceList(COCUServicep.CustCat,COCUServicep.TransDate,blankt,tstr,COCUServicep.InclVAT);
    COCUServicep.PriceList = tstr;
    COCUServicep.Sorting = CUr.Sorting;
    if (nonblank(CUr.DelAddr0)) then begin
      COCUServicep.ShipAddr0 = CUr.Name;
      COCUServicep.ShipAddr1 = CUr.DelAddr0;
      COCUServicep.ShipAddr2 = CUr.DelAddr1;
      COCUServicep.ShipAddr3 = CUr.DelAddr2;
      COCUServicep.DelAddr3 = CUr.DelAddr3;
      COCUServicep.DelAddr4 = CUr.DelAddr4;
    end else begin
      COCUServicep.ShipAddr0 = "";
      COCUServicep.ShipAddr1 = "";
      COCUServicep.ShipAddr2 = "";
      COCUServicep.ShipAddr3 = "";
      COCUServicep.DelAddr3 = "";
      COCUServicep.DelAddr4 = "";
    end;
    COCUServicep.VATNr = CUr.VATNr;
    COCUServicep.Phone = CUr.Phone;
    COCUServicep.Fax = CUr.Fax;
    COCUServicep.eMail = CUr.eMail;
    COCUServicep.ExportFlag = CUr.ExportFlag;
    COCUServicep.PayDeal = CUr.PayDeal;
    if (blank(COCUServicep.PayDeal)) then begin
      COCUServicep.PayDeal = COCUServiceb.DefPayDeal;
    end;
    COCUServicep.InvComment = CUr.OrderComment;
    if (updatall) then begin
      COCUServicep.InvoiceToCode = CUr.InvoiceToCode;    
      if (nonblank(CUr.WarnText1)) then begin
        warntext = CUr.WarnText1;
      end;
    end;
  end;
  PasteCustInCOCUService = found;
  RETURN;
END;

global
function Boolean FindTheContract(Boolean searchf,Integer compnr,LongInt conr,LongInt cochnr,var record COVc COr,var Boolean newcotype,var Integer cofoundincomp)
begin
  record COCUServiceVc COCUServicer;
  Boolean res;
  record COCUServiceBlock COCUSb;
  Integer oldcomp;
  
  BlockLoad(COCUSb);
  newcotype = false;
  if (COCUSb.BlockUsingStdCO!=0) then begin
    res = false;
  end else begin
    if (searchf) then begin
      switch (compnr) begin
        case 26: //Latvia
          oldcomp = CurrentCompany;  
          if (SetCompany(38,false)) then begin
            res = FindTheContract(false,38,conr,cochnr,COr,newcotype,cofoundincomp);
          end;
          ResetCompany(oldcomp);
      end;
    end;
    if (res==false) then begin
      COr.SerNr = conr;
      COr.ChildSerNr = cochnr;
      res = ReadFirstMain(COr,2,true);
    end;
  end;
  if (res==false) then begin
    COCUServicer.SerNr = conr;
    res = ReadFirstMain(COCUServicer,1,true);
    COr.CustCode = COCUServicer.CustCode;
    COr.SerNr = COCUServicer.SerNr;
    COr.ChildSerNr = -1;
//    COr.lastInvDate = CurrentDate; // lastInvDate is not used when new contract is read
    COr.invDtype = COCUServicer.invDtype;
    COr.invDays = COCUServicer.invDays;
    COr.startDate = COCUServicer.startDate;
    COr.endDate = COCUServicer.endDate;
    COr.Accepted = COCUServicer.Accepted;
    COr.OKFlag = COCUServicer.OKFlag;
    COr.VECode = COCUServicer.VECode;
    COr.VEName = COCUServicer.InternalSerialNr;
    COr.BlockedFlag = COCUServicer.BlockedFlag;
    newcotype = true;
  end;
  FindTheContract = res;
  return;
end;

updating procedure CreateSubPackages(LongInt prevCUCOser,LongInt prevCOser,LongInt newCUCOser,record CUServiceVc newCUServicer)
begin
  record CUServiceVc CUServicer;
  record CUServiceVc prevCUServicer;
  Boolean foundf,testf;
  string 60 ckey;
  
  foundf = true;
  ckey = "COCUMasterPackageSerNr:" & prevCUCOser;
  prevCUServicer.Closed = 0;
  prevCUServicer.MasterPackageSerNr = prevCOser;
  while (LoopKey(ckey,prevCUServicer,2,foundf)) begin
    if (prevCUServicer.Closed!=0) then begin
      foundf = false;
    end;
    if (prevCUServicer.MasterPackageSerNr!=prevCOser) then begin
      foundf = false;
    end;
    if (prevCUServicer.SerNr==prevCOser) then begin
      testf = false;
    end;
    if (prevCUServicer.PartOfPackage!=1) then begin
      testf = false;
    end;
    if (testf) then begin
      RecordCopy(CUServicer,prevCUServicer);
      CUServicer.StartDate = newCUServicer.StartDate;
      CUServicer.EndDate = newCUServicer.EndDate;
      CUServicer.FirstChargeDate = newCUServicer.FirstChargeDate;
      CUServicer.SerNr = NextSerNr("CUServiceVc",CUServicer.StartDate,-1,false,"");
      CUServicer.COCUServiceNr = newCUCOser;
      CUServicer.MasterPackageSerNr = newCUServicer.SerNr;
      if (RecordInsert(CUServicer,true)) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure DuplicateContract(var record COCUServiceVc prevCOCUServicer)
begin
  record COCUServiceVc COCUServicer;
  record CUServiceVc prevCUServicer;
  record CUServiceVc CUServicer;
  Boolean foundf,testf;
  Date bldat;
  string 60 ckey;
  
  RecordCopy(COCUServicer,prevCOCUServicer);
  COCUServicer.TransDate = CurrentDate;
  COCUServicer.startDate = AddDay(CurrentDate,-GetDay(CurrentDate)+1);
  COCUServicer.OKFlag = 0;
  COCUServicer.Accepted = 0;
  COCUServicer.FirstChargeDate = bldat;
  COCUServicer.SerNr = NextSerNr("COCUServiceVc",COCUServicer.TransDate,-1,false,"");
  if (RecordInsert(COCUServicer,true)) then begin
  end;
  
  foundf = true;
  ckey = "COCUMasterPackageSerNr:" & prevCOCUServicer.SerNr;
  prevCUServicer.Closed = 0;
  while (LoopKey(ckey,prevCUServicer,1,foundf)) begin
    if (prevCUServicer.Closed!=0) then begin
      foundf = false;
    end;
    testf = foundf;
    if (prevCUServicer.PartOfPackage!=0) then begin
      testf = false;
    end;
    if (testf) then begin
      RecordCopy(CUServicer,prevCUServicer);
      CUServicer.StartDate = COCUServicer.startDate;
      CUServicer.EndDate = bldat;
      CUServicer.FirstChargeDate = bldat;
      CUServicer.COCUServiceNr = COCUServicer.SerNr;
      CUServicer.SerNr = NextSerNr("CUServiceVc",CUServicer.StartDate,-1,false,"");
      CUServicer.MasterPackageSerNr = CUServicer.SerNr;
      if (RecordInsert(CUServicer,true)) then begin
      end;
      CreateSubPackages(prevCOCUServicer.SerNr,prevCUServicer.SerNr,COCUServicer.SerNr,CUServicer);
    end;
  end;
  RecordCopy(prevCOCUServicer,COCUServicer);
  return;
end;

global
updating procedure PenaltyContract(record COCUServiceVc prevCOCUSr,var record COCUServiceVc COCUSr)
begin
  record COCUServiceVc oldCOCUSr;
  record CUServiceVc prevCUSr;
  record CUServiceVc CUSr;
  row CUServiceVc CUSrw;
  Integer i,rwcnt;
  record SystemUsageSettingVc SUSr;
  Boolean foundf,testf;
  Date bldat;
  string 60 ckey,inwarn;
  val tot;
  Date td;
  Integer oldcomp;
  
  oldcomp = CurrentCompany;
  RecordCopy(COCUSr,prevCOCUSr);  
  COCUSr.TransDate = CurrentDate;
  td = prevCOCUSr.startDate;
  td.year = GetYear(CurrentDate);
  COCUSr.startDate = td;
  td = AddMonth(td,2);
  td.day = DaysInMonth(td.year,td.month);
  COCUSr.endDate = td;
  COCUSr.OKFlag = 0;
  COCUSr.Accepted = 0;
  COCUSr.FirstChargeDate = bldat;
  COCUSr.perLength = 3;
  COCUSr.normalFactor = 3;
  if (oldcomp==28) then begin//Lithuania
    SetServerCompany(113);
  end;
  COCUSr.SerNr = NextSerNr("COCUServiceVc",COCUSr.TransDate,-1,false,"");
  if (RecordInsert(COCUSr,false)) then begin
  end;
  RecordCopy(oldCOCUSr,COCUSr);
  
  if (oldcomp!=CurrentCompany) then begin
    SetServerCompany(oldcomp);
  end;
  foundf = true;
  ckey = "COCUMasterPackageSerNr:" & prevCOCUSr.SerNr;
  prevCUSr.Closed = 0;
  while (LoopKey(ckey,prevCUSr,1,foundf)) begin
    if (prevCUSr.Closed!=0) then begin
      foundf = false;
    end;
    testf = foundf;
    if (prevCUSr.PartOfPackage!=0) then begin
      testf = false;
    end;
    if (testf) then begin
      RecordCopy(CUSr,prevCUSr);
      if (Right(CUSr.Package,1)=="2") then begin
        CUSr.StartDate = COCUSr.startDate;
        CUSr.EndDate = COCUSr.endDate;
        CUSr.FirstChargeDate = bldat;
        CUSr.COCUServiceNr = COCUSr.SerNr;
        CUSr.perLength = COCUSr.perLength;
        CUSr.normalFactor = COCUSr.normalFactor;
        CUSr.PackageQty = prevCUSr.PackageQty;
        CUSr.SerNr = NextSerNr("CUServiceVc",CUSr.StartDate,-1,false,"");
        CUSr.MasterPackageSerNr = CUSr.SerNr;
        rwcnt = MatRowCnt(CUSr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CUSr,i,CUSrw);
          CUSrw.vRebate = blankval;
          MatRowPut(CUSr,i,CUSrw);
          CUServiceSumup(CUSr);
/*          
          MatRowGet(CUSr,i,CUSrw);
          CUSrw.vRebate = -50;
          MatRowPut(CUSr,i,CUSrw);
          CUServiceSumup(CUSr);
*/          
        end;
      end else begin
        CUSr.Package = Left(CUSr.Package,len(CUSr.Package)-1) & "2";
        if (PastePackage(CUSr,SUSr,0,1,"")) then begin
          CUSr.StartDate = COCUSr.startDate;
          CUSr.EndDate = COCUSr.endDate;
          CUSr.FirstChargeDate = bldat;
          CUSr.perLength = COCUSr.perLength;
          CUSr.normalFactor = COCUSr.normalFactor;
          CUSr.COCUServiceNr = COCUSr.SerNr;
          CUSr.PackageQty = prevCUSr.PackageQty;
          CUSr.SerNr = NextSerNr("CUServiceVc",CUSr.StartDate,-1,false,"");
          CUSr.MasterPackageSerNr = CUSr.SerNr;
          rwcnt = MatRowCnt(CUSr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(CUSr,i,CUSrw);
            CUSrw.vRebate = blankval;
            MatRowPut(CUSr,i,CUSrw);
            CUServiceSumup(CUSr);
/*          
            MatRowGet(CUSr,i,CUSrw);
            CUSrw.vRebate = -50;
            MatRowPut(CUSr,i,CUSrw);
            CUServiceSumup(CUSr);
*/          
          end;
        end;        
      end;
      CUServiceSumup(CUSr);
      if (oldcomp==28) then begin//Lithuania
        SetServerCompany(113);
      end;
      CUSr.SerNr = NextSerNr("CUServiceVc",CUSr.StartDate,-1,false,"");
      if (RecordInsert(CUSr,false)) then begin
      end;
      tot = tot + CUSr.TotChargePrice;
      if (oldcomp!=CurrentCompany) then begin
        SetServerCompany(oldcomp);
      end;
    end;
  end;
  COCUSr.TotalCOWorth = tot;
  RecordUpdate(oldCOCUSr,COCUSr,false);
  if (oldcomp!=CurrentCompany) then begin
    SetServerCompany(oldcomp);
  end;
  return;
end;

global
updating procedure COCUUpdateCUProdClass(record COCUServiceVc COCUServicer,Integer prevprogtype)
begin
  record CUVc CUr;
  record CUVc oldCUr;
  record CCandClassBlock CCb;
  row CCandClassBlock CCbw;
  string 255 tstr,t2;
  Integer rwcnt,i;
 
  if (prevprogtype==-1 or prevprogtype!=COCUServicer.ProgType) then begin
    CUr.Code = COCUServicer.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      RecordCopy(oldCUr,CUr);
      tstr = CUr.Classification;
      t2 = CUr.Classification;
      RemoveOldCCandClassClass(prevprogtype,t2);
      CUr.Classification = t2;
      BlockLoad(CCb);
      rwcnt = MatRowCnt(CCb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(CCb,i,CCbw);
        if (CCbw.ProgType==COCUServicer.ProgType) then begin
          if (nonblank(CUr.Classification)) Then begin
            CUr.Classification = CUr.Classification & ",";
          end;
          CUr.Classification = CUr.Classification & CCbw.Classification;
          i = rwcnt;
        end;
      end;
      if (tstr!=CUr.Classification) then begin
        if (RecordUpdate(oldCUr,CUr,false)==0) then begin
        end;
      end;
    end;
  end;
  return;
end;

global
procedure RoyaltyExceptionSumup(var record RoyaltyExceptionVc RoyaltyExceptionr)
begin
  row RoyaltyExceptionVc RoyaltyExceptionrw;
  val s1,s2,s3;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(RoyaltyExceptionr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RoyaltyExceptionr,i,RoyaltyExceptionrw);
    s1 = s1 + RoyaltyExceptionrw.Sum;
    s2 = s2 + RoyaltyExceptionrw.NormalSum;
    s3 = s3 + RoyaltyExceptionrw.Royalty;
  end;
  RoyaltyExceptionr.Sum = s1;
  RoyaltyExceptionr.ActualSum = s2;
  RoyaltyExceptionr.RoyaltySum = s3;
  return;
end;

global
updating procedure PasteCOCUServiceInRoyaltyException(var record RoyaltyExceptionVc RoyaltyExceptionr,LongInt ordnr)
begin
  record COCUServiceVc COCUServicer;
  record CUServiceVc CUServicer;
  row CUServiceVc CUServicerw;
  row RoyaltyExceptionVc RoyaltyExceptionrw;
  Boolean foundf,testf;
  val fact,t;
  Integer i,rwcnt;
  record GeneralOptionBlock GenOptr;
  
  BlockLoad(GenOptr);      
  COCUServicer.SerNr = ordnr;
  if (ReadFirstMain(COCUServicer,1,true)) then begin
    RoyaltyExceptionr.CustCode = COCUServicer.CustCode;
    RoyaltyExceptionr.TransDate = CurrentDate;
    RoyaltyExceptionr.COCUServiceNr = COCUServicer.SerNr;
    RoyaltyExceptionr.Addr0 = COCUServicer.Addr0;
    RoyaltyExceptionr.InvComment = COCUServicer.InvComment;
    RoyaltyExceptionr.CurncyCode = COCUServicer.CurncyCode;
//    RoyaltyExceptionr.Objects = COCUServicer.Objects;
//    RoyaltyExceptionr.ARAcc,M4Code,10,AccVc);

    foundf = true;
    CUServicer.COCUServiceNr = COCUServicer.SerNr;
    while (LoopKey("COCUServiceNr",CUServicer,1,foundf)) begin
      if (CUServicer.COCUServiceNr!=COCUServicer.SerNr) then begin foundf = false; end;
      testf = foundf;
      if (CUServicer.Closed!=0) then begin testf = false; end;
      if (CUServicer.PartOfPackage!=0) then begin testf = false; end;
      if (testf) then begin
        rwcnt = MatRowCnt(CUServicer);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(CUServicer,i,CUServicerw);
          RoyaltyExceptionrw.ArtCode = CUServicerw.ArtCode;
          RoyaltyExceptionrw.Quant = CUServicerw.InvoiceQty * CUServicer.PackageQty;
          RoyaltyExceptionrw.Price = CUServicerw.Price;
          //RoyaltyExceptionrw.vRebate = CUServiceRebate(CUServicer,CUServicerw,RoyaltyExceptionr.TransDate);
          
          CalcSum(RoyaltyExceptionrw.Quant,RoyaltyExceptionrw.Price,fact,RoyaltyExceptionrw.vRebate,t,GenOptr.UseDiscount);
          RoundRowSum(RoyaltyExceptionr.CurncyCode,"","RoyaltyExceptionVc",t);
          RoyaltyExceptionrw.Sum = t;
          
          t = RoyaltyExceptionrw.Quant * RoyaltyExceptionrw.Price;
          RoundRowSum(RoyaltyExceptionr.CurncyCode,"","RoyaltyExceptionVc",t);
          RoyaltyExceptionrw.NormalSum = t;
          
          RoyaltyExceptionrw.Spec = CUServicerw.Text;
          RoyaltyExceptionrw.Objects = CUServicer.Objects;
          MatRowPut(RoyaltyExceptionr,MatRowCnt(RoyaltyExceptionr),RoyaltyExceptionrw);
        end;
      end;
    end;
    RoyaltyExceptionSumup(RoyaltyExceptionr);
  end;
  return;
end;

