external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure PUCalcPerc(val,string,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetPurchaseItem(string,string,var record PIVc);
external function Boolean PasteVEInPO(var record POVc,Boolean);
external procedure AddPORow(record POVc,record INVc,LongInt,string,Integer,record PIVc,val,string);
external procedure POSumup(var record POVc);

function Integer FindPO(var array record POVc aPOr,var Integer cnt,string VECode,string Objects)
begin
  Integer res,i;
  record POVc POr;
  Boolean foundf;
  
  for (i=0;i<cnt;i=i+1) begin
    POr = aPOr[i];
    if (POr.VECode==VECode) then begin
      res = i;
      i = cnt;
      foundf = true;
    end;
  end;
  if (!foundf) then begin
    RecordNew(POr);
    POr.VECode = VECode;
    PasteVEInPO(POr,false);
    POr.Objects = Objects;
    aPOr[cnt] = POr;
    res = cnt;
    cnt = cnt + 1;
  end;
  
  FindPO = res;
  return;
end;

function LongInt PasteWSRowToPO(record WSVc WSr,Integer rownr,var array record POVc aPOr,var Integer cnt,var string msg)
begin
  LongInt res;
  row WSVc WSrw;
  record INVc INr;
  record PIVc PIr;
  record POVc POr;
  Integer i;
  
  res = 0;
  MatRowGet(WSr,rownr,WSrw);
  if (ReadFirstItem(WSrw.ArtCode,INr,true,true)) then begin
    if (!GetPurchaseItem(INr.Code,"",PIr)) then begin
      res = 20863;
      msg = " " & WSrw.ArtCode;
      goto LPasteWSRowToPO;
    end;
    i = FindPO(aPOr,cnt,PIr.VECode,WSr.Objects);
    POr = aPOr[i];
    AddPORow(POr,INr,-1,WSrw.ArtCode,0,PIr,WSrw.Quant,WSrw.Objects);
    POSumup(POr);
    aPOr[i] = POr;
  end;
  
LPasteWSRowToPO:;
  PasteWSRowToPO = res;
  return;
end;

global
updating function LongInt RecordAction_raPasteWSInPO(record WSVc WSr,var array record POVc aPOr,var Integer cnt,var string msg)
begin
  LongInt res,r;
  Integer i,rwcnt;
  record POVc POr;
  
  res = 0;
  cnt = 0;
  msg = "";
  rwcnt = MatRowCnt(WSr);
  for (i=0;i<rwcnt;i=i+1) begin
    r = PasteWSRowToPO(WSr,i,aPOr,cnt,msg);
    if (r!=0) then begin
      res = r;
      goto LRecordAction_raPasteWSInPO;
    end;
  end;
  for (i=0;i<cnt;i=i+1) begin
    POr = aPOr[i];
    POr.SerNr = NextSerNr("POVc",POr.TransDate,-1,false,"");
    if (POr.SerNr==-1) then begin 
      res = 1747;
      goto LRecordAction_raPasteWSInPO; 
    end;
    POr.SVONr = WSr.SVONr;
    if (MatRowCnt(POr)>0) then begin
      if (RecordStore(POr,false)) then begin
        CreateRecordLink(POr,CurrentCompany,WSr,CurrentCompany);  
        CreateRecordLink(WSr,CurrentCompany,POr,CurrentCompany);  
      end;
    end;
    aPOr[i] = POr;
  end;
  
LRecordAction_raPasteWSInPO:;
  RecordAction_raPasteWSInPO = res;
  return;
end;

global
procedure RetSumUp(var record RetVc Retp)
BEGIN
  Integer i,rwcnt;
  row RetVc Retrw;
  val totqty,cc,t,extracost,tbase;

  Retp.SumQuant = blankval;
  Retp.ExtraCost = blankval;
  rwcnt = MatRowCnt(Retp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Retp,i,Retrw);
    totqty = totqty + Retrw.Quant;
    tbase = tbase + Retrw.Quant * Retrw.BasePrice;
    PUCalcPerc(Retrw.UPrice,Retrw.Extra,cc);
    t = Retrw.Quant * cc;
    extracost = extracost + t;
  end;
  Retp.ExtraCost = Round(extracost,DefaultRoundMode);
  Retp.SumQuant = Round(totqty,SetRoundModeD(2));
  Retp.Sum4 = Round(tbase,DefaultRoundMode);
  RETURN;
END;
