external function Time TimeDiff(Time,Time);

global
function Integer FindTable(string table,var record RestAccVc RestAccr)
begin
  Integer tablestatus,persons;
  record NeighbourHoodVc Tabler;
  Boolean testf;

  tablestatus = kTableStatusFree;
  RestAccr.CustCode = table;
  if (ReadFIrstKey("OpenTabs:" & CurrentUser,RestAccr,1,true)) then begin
    tablestatus = kTableStatusMineOccupied;
  end;
  if (tablestatus==0) then begin
    RestAccr.CustCode = table;
    if (ReadFIrstKey("OpenTabs",RestAccr,1,true)) then begin
      tablestatus = kTableStatusOtherOccupied;
    end;
  end;
  switch (tablestatus) begin
    case kTableStatusFree:
      testf = true;
      Tabler.Table = table;
      if (ReadFirstMain(Tabler,1,true)) then begin
        if (nonblank(Tabler.Waiter)) then begin
          if (CurrentUser!=Tabler.Waiter) then begin
            testf = false;
            tablestatus = kTableStatusOtherOccupied;
          end;
        end;
        persons = Tabler.Seats;
      end;
      if (testf) then begin
        RecordNew(RestAccr);
        RestAccr.CustCode = table;
        RestAccr.Persons = persons;
      end;
  end;
  FindTable = tablestatus;
  return;
end;

global
procedure FillTableLayoutRemote(record RcVc RepSpec,string branchid,string tableview,var area ap)
begin
  record NeighbourHoodVc Tabler;
  record RestAccVc RestAccr;
  Integer colour;
  Integer tablestatus;
  string 255 text1,text2,text3;
  record RestBlock Restb;
  record CUVc CUr;
  string 255 index;
  Boolean found,testf;

  BlockLoad(Restb);
  index = "Table";
  if (nonblank(branchid)) then begin
    index = "BranchID";
    Tabler.BranchID = branchid;
  end;
  found = true;
  while (LoopKey(index,Tabler,1,found)) begin
    if (nonblank(branchid)) then begin
      if (Tabler.BranchID!=branchid) then begin
        found = false;
      end;
    end;
    if (found) then begin
      testf = true;
      if (nonblank(tableview)) then begin
        if (Tabler.TableViewCode!=tableview) then begin testf = false; end;
      end;
      if (testf) then begin
        text1 = Tabler.Table;
        if (nonblank(Tabler.TableLayoutName)) then begin
          text1 = Tabler.TableLayoutName;
        end;
        text2 = "";
        tablestatus = FindTable(Tabler.Table,RestAccr);
        switch (RepSpec.ArtMode) begin
          case 1:
            switch (tablestatus) begin
              case kTableStatusFree: 
                colour = patM4gray;
              case kTableStatusMineOccupied: 
                if (RepSpec.long1==RestAccr.SerNr) then begin
                  colour = patM4ltBlue;
                end else begin
                  colour = patM4green;
                end;
                text2 = TimeDiff(RestAccr.TransTime,CurrentTime);
                text2 = Left(text2,5);
              case kTableStatusOtherOccupied: 
                colour = patM4yellow;
                text2 = RestAccr.Cashier;
            end;
          otherwise
            switch (tablestatus) begin
              case kTableStatusFree: 
                colour = patM4gray;
              case kTableStatusMineOccupied: 
                colour = patM4green;
                text2 = TimeDiff(RestAccr.TransTime,CurrentTime);
                text2 = Left(text2,5);
              case kTableStatusOtherOccupied: 
                colour = patM4yellow;
                text2 = RestAccr.Cashier;
            end;
        end;
        switch (Restb.TableViewDisplay) begin
          case 0:
          case 1:
            if (nonblank(RestAccr.CUCode)) then begin
              CUr.Code = RestAccr.CUCode;
              ReadFirstMain(CUr,1,true);
              text3 = CUr.CustCat;
            end;
        end;
        AddRestaurantTableToArea(ap,Tabler.YPos,Tabler.XPos,Tabler.Height,Tabler.Width,colour,Tabler.Table,text1,text2,text3);
      end;
    end;
  end;
  
  if (nonblank(branchid)) then begin
    ResetLoop(Tabler);
    found = true;
    Tabler.BranchID = "";
    while (LoopKey(index,Tabler,1,found)) begin
      if (Tabler.BranchID!="") then begin
        found = false;
      end;
      if (found) then begin
        testf = true;
        if (nonblank(tableview)) then begin
          if (Tabler.TableViewCode!=tableview) then begin testf = false; end;
        end;
        if (testf) then begin
          text1 = Tabler.Table;
          if (nonblank(Tabler.TableLayoutName)) then begin
            text1 = Tabler.TableLayoutName;
          end;
          text2 = "";
          tablestatus = FindTable(Tabler.Table,RestAccr);
          switch (RepSpec.ArtMode) begin
            case 1:
              switch (tablestatus) begin
                case kTableStatusFree: 
                  colour = patM4gray;
                case kTableStatusMineOccupied: 
                  if (RepSpec.long1==RestAccr.SerNr) then begin
                    colour = patM4ltBlue;
                  end else begin
                    colour = patM4green;
                  end;
                  text2 = TimeDiff(RestAccr.TransTime,CurrentTime);
                  text2 = Left(text2,5);
                case kTableStatusOtherOccupied: 
                  colour = patM4yellow;
                  text2 = RestAccr.Cashier;
              end;
            otherwise
              switch (tablestatus) begin
                case kTableStatusFree: 
                  colour = patM4gray;
                case kTableStatusMineOccupied: 
                  colour = patM4green;
                  text2 = TimeDiff(RestAccr.TransTime,CurrentTime);
                  text2 = Left(text2,5);
                case kTableStatusOtherOccupied: 
                  colour = patM4yellow;
                  text2 = RestAccr.Cashier;
              end;
          end;
          switch (Restb.TableViewDisplay) begin
            case 0:
            case 1:
              if (nonblank(RestAccr.CUCode)) then begin
                CUr.Code = RestAccr.CUCode;
                ReadFirstMain(CUr,1,true);
                text3 = CUr.CustCat;
              end;
          end;
          AddRestaurantTableToArea(ap,Tabler.YPos,Tabler.XPos,Tabler.Height,Tabler.Width,colour,Tabler.Table,text1,text2,text3);
        end;
      end;
    end;
  end;
  
  AddIntToArea(-1,ap);
  
  return;
end;
