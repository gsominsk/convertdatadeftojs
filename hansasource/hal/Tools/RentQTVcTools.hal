external procedure PasteLTxttoAgreement(record AgreementVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
external updating function LongInt RentResVcRecordUpdateAfter(var record RentResVc,record RentResVc,LongInt,LongInt);
external function LongInt GetCurUserLastNr(string);
external function Boolean RentResVc_PasteSerialNr(var record RentResVc,Boolean);
external function Boolean PasteAgreement(var record RentResVc,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

procedure PasteRentQTInAgreement(record RentQTVc RentQTr,var record AgreementVc Agrerr)
begin
  val fr,to1,to2,br1,br2;
  string 5 crncy;
  string 255 tstr;

  Agrerr.Addr0 = RentQTr.Addr0;
  Agrerr.Addr1 = RentQTr.Addr1;
  Agrerr.Addr2 = RentQTr.Addr2;
  Agrerr.Addr3 = RentQTr.Addr3;
  Agrerr.InvAddr3 = RentQTr.InvAddr3;
  Agrerr.InvAddr4 = RentQTr.InvAddr4;
  Agrerr.ClientContact = RentQTr.ClientContact;
  Agrerr.CustCode = RentQTr.CustCode;
  Agrerr.CustCat = RentQTr.CustCat;
  Agrerr.Objects = RentQTr.Objects;
  Agrerr.startDate = RentQTr.startDate;
  Agrerr.endDate = RentQTr.endDate;
  if (nonblank(RentQTr.CurncyCode)) then begin
    Agrerr.CurncyCode = RentQTr.CurncyCode;
    crncy = Agrerr.CurncyCode;
    GetFullCurncyRate(crncy,Agrerr.TransDate,fr,to1,to2,br1,br2);
    Agrerr.CurncyCode = crncy;
    Agrerr.FrRate = fr;
    Agrerr.ToRateB1 = to1; 
    Agrerr.ToRateB2 = to2;
    Agrerr.BaseRate1 = br1;
    Agrerr.BaseRate2 = br2;
  end;
  Agrerr.SalesMan = RentQTr.SalesMan;
  Agrerr.SalesGroup = RentQTr.SalesGroup;
  Agrerr.AgreeType = RentQTr.AgreeType;
  Agrerr.Site = RentQTr.Site;
  Agrerr.LangCode = RentQTr.LangCode;
  Agrerr.ShipDeal = RentQTr.ShipDeal;
  Agrerr.ShipMode = RentQTr.ShipMode;
  Agrerr.PriceList = RentQTr.PriceList;
  Agrerr.RebCode = RentQTr.RebCode;
  Agrerr.CustVATCode = RentQTr.CustVATCode;
  Agrerr.Sorting = RentQTr.Sorting;
  Agrerr.ShipAddr0 = RentQTr.ShipAddr0;
  Agrerr.ShipAddr1 = RentQTr.ShipAddr1;
  Agrerr.ShipAddr2 = RentQTr.ShipAddr2;
  Agrerr.ShipAddr3 = RentQTr.ShipAddr3;
  Agrerr.DelAddr3 = RentQTr.DelAddr3;
  Agrerr.DelAddr4 = RentQTr.DelAddr4;
  Agrerr.VATNr = RentQTr.VATNr;
  Agrerr.Phone = RentQTr.Phone;
  Agrerr.Fax = RentQTr.Fax;
  Agrerr.eMail = RentQTr.eMail;
  Agrerr.ExportFlag = RentQTr.ExportFlag;
  Agrerr.PayDeal = RentQTr.PayDeal;
  Agrerr.InvComment = RentQTr.InvComment;
  Agrerr.InvoiceToCode = RentQTr.InvoiceToCode;    
  Agrerr.LTxtCode = RentQTr.LTxtCode;
  PasteLTxttoAgreement(Agrerr);
  return;
end;

updating procedure CreateNewRentRes(record RentQTVc RentQTr,row RentQTVc RentQTrw,record AgreementVc Agreementr,var Record RentResVc RentResr,LongInt ponr,Integer rowno)
begin
  record RentINVc RentINr;
  record AdvPriceRecVc AdvPriceRecr;
  record AdvPriceRecVc oldAdvPriceRecr;
  record RentResVc oldRentResr;
  row RentResVc RentResrw;
  Integer wn;
  string 200 warning;
  Date startd,endd,startinvd,endinvd;
  string 20 agreetype;
  Boolean addtoexisting;
  Boolean isserial;
  val rentqty,factor,s;
  Boolean disposable;

  disposable = false;
  if (nonblank(RentQTrw.ArtCode)) then begin
    if (nonblankdate(RentQTrw.startDate)) then begin
      startd = RentQTrw.startDate;
    end else begin
      startd = RentQTr.startDate;
    end;
    if (nonblankdate(RentQTrw.endDate)) then begin
      endd = RentQTrw.endDate;
    end else begin
      endd = RentQTr.endDate;
    end;
    if (nonblankdate(RentQTrw.StartInvoicing)) then begin
      startinvd = RentQTrw.StartInvoicing;
    end else begin
      startinvd = RentQTr.StartInvoicing;
    end;
    if (nonblankdate(RentQTrw.EndInvoicing)) then begin
      endinvd = RentQTrw.EndInvoicing;
    end else begin
      endinvd = RentQTr.EndInvoicing;
    end;
    if (nonblank(RentQTrw.AgreeType)) then begin
      agreetype = RentQTrw.AgreeType;
    end else begin
      agreetype = RentQTr.AgreeType;
    end;
    addtoexisting = false;
    if (RentResr.SerNr!=-1) then begin
      if ((RentResr.TransDate==startd) and (RentResr.EndDate==endd) and
          (RentResr.StartInvoicing==startinvd) and (RentResr.EndInvoicing==endinvd) and
          (RentResr.AgreeType==agreetype) and (blank(RentQTrw.SerialNr)) and
          (RentResr.Site==RentQTr.Site) and /*(RentResr.Objects==RentQTr.Objects) and */ // Not a good idea....
          (blank(RentQTrw.InvItem)) and ((RentQTrw.Sum==0) or (RentQTrw.Type!=0))) then begin
        addtoexisting = true;
      end;
    end;
    isserial = false;
    RentINr.Code = RentQTrw.ArtCode;
    if (ReadFirstMain(RentINr,1,true)) then begin
      if (nonblank(RentINr.SerialNr)) then begin
        isserial = true;
        addtoexisting = false;
      end;
    end;
    if (addtoexisting==false) then begin
      RecordNew(RentResr);
      RentResr.AgreementNr = Agreementr.SerNr;
      if (PasteAgreement(RentResr,warning)) then begin
      end;
      RentResr.SerialNr = RentQTrw.SerialNr;
      RentResr.Code = RentQTrw.ArtCode;
      RentINr.SerialNr = RentQTrw.SerialNr;
      RentINr.Code = RentQTrw.ArtCode;
      if (ReadFirstMain(RentINr,2,true)) then begin
        RentResr.Location = RentINr.OrgLocation;
/*
      end else begin
        RentINr.Code = RentQTrw.ArtCode;
        if (ReadFirstMain(RentINr,1,true)) then begin
        end;
*/
      end;
      if (nonblank(RentQTr.Location)) then begin
        RentResr.Location = RentQTr.Location; // A bit illogical but it works
      end;
      if (isserial) then begin
        rentqty = RentQTrw.Quant;
        RentResr.RentQuant = 1;
      end else begin
        rentqty = 1;
        RentResr.RentQuant = RentQTrw.Quant;
      end;
      if (RentQTrw.Type==1) or  (RentQTrw.Type==2) then begin
        disposable = true;
      end;
      RentResr.SalesMan = RentQTr.SalesMan;
      RentResr.SalesGroup = RentQTr.SalesGroup;
      RentResr.TransDate = startd;
      RentResr.EndDate = endd;
      RentResr.StartInvoicing = startinvd;
      RentResr.EndInvoicing = endinvd;
      RentResr.Site = RentQTr.Site;
      RentResr.ClientContact = RentQTr.ClientContact;
      RentResr.Objects = RentQTr.Objects;
      RentResr.AgreeType = agreetype;
      if (RentResVc_PasteSerialNr(RentResr,disposable)) then begin
      end;
      RentResr.InvItem = RentQTrw.InvItem;
      RentResr.InvItemName = RentQTrw.InvItemName;
      RentResr.InvQuant = RentQTrw.InvQuant;
      RentResr.Price = RentQTrw.Price;
      RentResr.vRebate = RentQTrw.vRebate;
      factor = BlankVal;
      CalcSum(RentResr.InvQuant,RentResr.Price,factor,RentResr.vRebate,s,0);
      RentResr.Sum = s;
      while (rentqty>0) begin
        RentResr.SerNr = NextSerNr("RentResVc",RentResr.TransDate,-1,false,"");
        if (RecordInsert(RentResr,false)==false) then begin end;
        rentqty = rentqty - 1;
      end;
      AdvPriceRecr.SerNr = RentQTr.SerNr;
      AdvPriceRecr.RowNr = rowno;
      AdvPriceRecr.FileName = "RentQTVc";
      if (ReadFirstMain(AdvPriceRecr,3,true)) then begin
        AdvPriceRecr.SerNr = RentResr.SerNr;
        AdvPriceRecr.RowNr = -1;
        AdvPriceRecr.FileName = "RentResVc";
        RecordCopy(oldAdvPriceRecr,AdvPriceRecr);
        if (ReadFirstMain(oldAdvPriceRecr,3,true)) then begin
          if (RecordUpdate(oldAdvPriceRecr,AdvPriceRecr,false)==0) then begin
          end;
        end else begin
          if (RecordInsert(AdvPriceRecr,false)) then begin
          end;
        end;
      end;
    end else begin
      RecordCopy(oldRentResr,RentResr);
      RentResrw.SerialNr = RentQTrw.SerialNr;
      RentResrw.ArtCode = RentQTrw.ArtCode;
      RentResrw.Quant = RentQTrw.Quant;
      RentResrw.Spec = RentQTrw.Spec;
      RentResrw.Type = RentQTrw.Type;
      RentResrw.Del = BlankVal;
      RentResrw.Ret = BlankVal;
      RentResrw.Col = BlankVal;
      RentResrw.Inv = BlankVal;
      MatRowPut(RentResr,MatRowCnt(RentResr),RentResrw);
      if (RecordUpdate(oldRentResr,RentResr,false)==0) then begin
        if (RentResVcRecordUpdateAfter(RentResr,oldRentResr,0,0)==0) then begin end;
      end;
    end;
  end;
  return;
end;

global
updating function Boolean AcceptRentQT(var record AgreementVc Agreementr,record RentQTVc RentQTr)
begin
  Boolean res;
  record RentResVc RentResr;
  row RentQTVc RentQTrw;
  Integer rwcnt,i;
  LongInt newnr;
  
  res = false;
  if (Agreementr.SerNr!=-1) then begin
    if (ReadFirstMain(Agreementr,1,true)==false) then begin
      Agreementr.SerNr = -1;
    end;
  end;
  if (Agreementr.SerNr==-1) then begin
    PasteRentQTInAgreement(RentQTr,Agreementr);
    newnr = GetCurUserLastNr("AgreementVc");
    Agreementr.SerNr = NextSerNr("AgreementVc",Agreementr.TransDate,newnr,false,"");
    if (Agreementr.SerNr==-1) then begin
      goto LAcceptRentQT;
    end;
    if (RecordInsert(Agreementr,false)==false) then begin
      goto LAcceptRentQT;
    end;
  end;
  RentResr.SerNr = -1;
  rwcnt = MatRowCnt(RentQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentQTr,i,RentQTrw);
    CreateNewRentRes(RentQTr,RentQTrw,Agreementr,RentResr,-1,i);
  end;
  res = true;
LAcceptRentQT:;
  AcceptRentQT = res;
  return;
end;
