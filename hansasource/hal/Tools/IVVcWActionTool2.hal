external procedure GetSerialNumberCountryOfOrg(string,LongInt,LongInt,string,string,var string,var string);
external procedure B1ToB2ValRM(val,val,val,var val,roundmode);
external function roundmode GetCostRoundModeRB();
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external function Boolean BulkSerialNos_CalculateQuantityAndSerialNr(record SerNrTrackBlock,Boolean,string,var string,var val);
external procedure RowCalculateTaxMatrix_IVVc(var record IVVc,Integer,row IVVc);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);
external function Boolean IVVc_CalculateRate(var record IVVc);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode SetRoundModeD(Integer);
external function Boolean CostPriceForGP(string,string,string,string,var val);
external procedure B1ToB2Val(val,val,val,var val);
external procedure InvoiceCalcCommisionValue(record IVVc,val,val,var val);
external procedure SwapM4Val(var val,var val);
external function val CalcItemRepa(val,val,val,var string,val,val,val,val,val,roundmode);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external procedure IVVc_PasteQuant(var record IVVc,Integer,Boolean,var Boolean,string);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external function Integer CheckSerialStatus(string,string,var string);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure IVDchsum(var record IVVc,Integer);
remote procedure IVSumup(var record IVVc,Boolean);
external function Boolean IVDchrsum(var record IVVc,Integer);
external function Boolean SetUnitFactor(string,var val,val,val,val,var val,var val,var val,var string,Boolean);
external procedure RoundRowSum(string,string,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean FindLastInvoiceRowForSerial(LongInt,string ,string,var row IVVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

procedure NormalRowPasteSum(var record IVVc IVp,Integer rownr,var Boolean chsum)
BEGIN
  val s,t;
  row IVVc IVrw;
  record GeneralOptionBlock GenOptr;
  
  MatRowGet(IVp,rownr,IVrw);
  if ((IVrw.Quant!=0) and (IVrw.Price!=0)) then begin  
    chsum = true;
    IVrw.vRebate = blankval;
    BlockLoad(GenOptr);      
    CalcSum(IVrw.Quant,IVrw.Price,IVrw.PriceFactor,IVrw.vRebate,t,GenOptr.UseDiscount);
    RoundRowSum(IVp.CurncyCode,IVp.PayDeal,"IVVc",t);
    s = IVrw.Sum;// /IVrw.Quant; not good
    s = t - s;
    s = s*100;
    s = s/t;
    IVrw.vRebate = Round(s,SetRoundModeD(1));
    RowCalculateTaxMatrix_IVVc(IVp,rownr,IVrw);
    if (IVrw.vRebate==0) then begin IVrw.vRebate = blankval; end;
    MatRowPut(IVp,rownr,IVrw);
    IVSumup(IVp,true);
  end;
  return;
end;

global
procedure PasteARPayInIV(record IVVc IVp,row IVVc IVrwp,Integer rownr)
begin
  record ARPayVc ARPayr;
  record RoundBlock RBr;
  row IVVc IVrw;
  Integer rwcnt,i;
  val compv,coff;
  record ARPayHistVc ARPayHistr;
  Boolean found;
  record BaseCurBlock BCb;
  
  if (IVrwp.CUPNr!=-1) then begin
    ARPayr.CUPNr = IVrwp.CUPNr;
    if (ReadFirstMain(ARPayr,1,true)) then begin
//      IVrwp.Sum = blankval;?? we do not allow changing prepaid amount?
      BlockLoad(BCb);
      if (IVp.CurncyCode==ARPayr.CurncyCode) or (blank(IVp.CurncyCode) and ARPayr.CurncyCode==BCb.BaseCur1) then begin
        if (IVp.CustCode==ARPayr.CustCode) then begin
            if (IVrwp.Sum!=0) then begin
              compv = IVrwp.Sum;
            end else begin
              compv = IVp.Sum4;
              rwcnt = MatRowCnt(IVp);
              for (i=0;i<rwcnt;i=i+1) begin
                if (i!=rownr) then begin
                  MatRowGet(IVp,i,IVrw);
                  if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
                    compv = compv - IVrw.Sum;
                  end;
                end;
              end;
            end;
            if ((compv>ARPayr.RVal) or (IVp.Sum4==0)) then begin
              compv = ARPayr.RVal;
            end;
            IVrwp.Sum = compv;
            if (IVrwp.Sum==ARPayr.RVal) then begin
              IVrwp.Price = ARPayr.VATVal;
              IVrwp.BasePrice = ARPayr.BookRVal;
              IVrwp.TAX1Reb = ARPayr.TAX1Sum;
            end else begin
              BlockLoad(RBr);
              IVrwp.Price = Round((ARPayr.VATVal*IVrwp.Sum)/ARPayr.RVal,GetVATRoundMode(RBr));
              IVrwp.BasePrice = Round((ARPayr.BookRVal*IVrwp.Sum)/ARPayr.RVal,GetVATRoundMode(RBr));
              IVrwp.TAX1Reb = Round((ARPayr.TAX1Sum*IVrwp.Sum)/ARPayr.RVal,GetVATRoundMode(RBr));
            end;
            IVrwp.Price = Round(IVrwp.Price,SetRoundModeD(3));
            IVrwp.BasePrice = Round(IVrwp.BasePrice,SetRoundModeD(3));
            IVrwp.TAX1Reb = Round(IVrwp.TAX1Reb,SetRoundModeD(3));
            if (IVrwp.Price==0) then begin IVrwp.Price = blankval; end;
            if (IVrwp.TAX1Reb==0) then begin IVrwp.TAX1Reb = blankval; end;
            IVrwp.Recepy = ARPayr.PayDate;
            IVrwp.VATCode = ARPayr.VATCode;
            ARPayHistr.CUPNr = IVrwp.CUPNr;  
            ARPayHistr.FileName = "IPVc";  
            found = ReadFirstMain(ARPayHistr,2,true);
            if (found==false) then begin
              ARPayHistr.CUPNr = IVrwp.CUPNr;  
              ARPayHistr.FileName = "CLInVc";  
              found = ReadFirstMain(ARPayHistr,2,true);
            end;
            IVrwp.SalesAcc = ARPayHistr.ARAcc;
        end else begin
          MessageBox(1218,"");
        end;
      end else begin
        MessageBox(1217,"");
      end;
    end else begin
      MessageBox(1253,"");
    end;
  end else begin
    IVrwp.Sum = blankval;
    IVrwp.Price = blankval;
    IVrwp.BasePrice = blankval;
    IVrwp.TAX1Reb = blankval;
    IVrwp.VATCode = "";
    IVrwp.Recepy = "";
  end;
  RETURN;
END;

global
function val CalculateIVCashAmount(record IVVc IVr)
BEGIN
  val t;
  row IVVc IVrw;
  Integer i,rwcnt;
  val cash,v;
  record BaseCurBlock bascur;
  Boolean bcurf;

  BlockLoad(bascur);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if ((IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) or (IVrw.stp==kInvoiceRowTypeCreditCardPayment) or (IVrw.stp==kInvoiceRowTypeChequePayment)) then begin
      cash = cash + IVrw.Sum;
    end;
    if ((IVrw.stp==kInvoiceRowTypeCashPayment) or (IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)) then begin 
      if (IVrw.CurncyCode!=IVr.CurncyCode and nonblank(IVrw.CurncyCode)) then begin  
        if (IVr.CurncyCode==bascur.BaseCur1) then begin
          cash = cash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (IVr.CurncyCode==bascur.BaseCur2) then begin
          cash = cash + MulRateToBase2(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (bcurf==false) then begin
          CurValToOtherCur(IVr.InvDate,IVrw.CurncyCode,IVrw.Sum,IVr.CurncyCode,v,DefaultCurRoundOff);
          cash = cash + v;
        end;
      end else begin
        cash = cash + IVrw.Sum;
      end;
    end;
  end; 
  CalculateIVCashAmount = cash; 
  RETURN;
END;

global
function Boolean IVVc_PasteSum(var record IVVc IVp,Integer rownr,var Boolean chsum,Integer changed)
BEGIN
  Boolean res;
  row IVVc IVrw;
  
  if (changed!=0) and (rownr>=0) then begin  
    res = true;
    MatRowGet(IVp,rownr,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeLoan: IVSumup(IVp,true);
      case kInvoiceRowTypeLoanInterest: IVSumup(IVp,true);
      case kInvoiceRowTypePrepayment:
        PasteARPayInIV(IVp,IVrw,rownr);
        MatRowPut(IVp,rownr,IVrw);
        chsum = true;
      case kInvoiceRowTypeDownpayment: chsum = true;
      case kInvoiceRowTypeInterest: chsum = true;
      case kInvoiceRowTypeNormal: NormalRowPasteSum(IVp,rownr,chsum);
      case kInvoiceRowTypeStructuredItemComponent: NormalRowPasteSum(IVp,rownr,chsum);
      case kInvoiceRowTypeCorrection: NormalRowPasteSum(IVp,rownr,chsum);
      case kInvoiceRowTypeGiftVoucherPayment: chsum = true;
      case kInvoiceRowTypeCashPayment: chsum = true;
      case kInvoiceRowTypeLoyaltyPointsPayment: chsum = true;
      case kInvoiceRowTypeCreditCardPayment: chsum = true;
      case kInvoiceRowTypeChequePayment: chsum = true;
    end;
  end;
  if ((IVp.OKFlag==0) and (changed==0) and (rownr>=0)) then begin
    MatRowGet(IVp,rownr,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeLoyaltyPointsPayment:
        if (IVrw.Sum==0) then begin 
          IVrw.Sum = IVp.Sum4 - CalculateIVCashAmount(IVp); 
          MatRowPut(IVp,rownr,IVrw);
          chsum = true;
          res = true;
        end; 
      case kInvoiceRowTypeCashPayment:
        if (IVrw.Sum==0) then begin 
          IVrw.Sum = IVp.Sum4 - CalculateIVCashAmount(IVp); 
          MatRowPut(IVp,rownr,IVrw);
          chsum = true;
          res = true;
        end; 
      case kInvoiceRowTypeCreditCardPayment:
        if (IVrw.Sum==0) then begin 
          IVrw.Sum = IVp.Sum4 - CalculateIVCashAmount(IVp); 
          MatRowPut(IVp,rownr,IVrw);
          chsum = true;
          res = true;
        end; 
      case kInvoiceRowTypeChequePayment:
        if (IVrw.Sum==0) then begin 
          IVrw.Sum = IVp.Sum4 - CalculateIVCashAmount(IVp); 
          MatRowPut(IVp,rownr,IVrw);
          chsum = true;
          res = true;
        end; 
    end;
  end;  
  IVVc_PasteSum = res;
  RETURN;
END;

global
procedure IVVc_PasteCUPNr(var record IVVc IVp,Integer rownr)
BEGIN
  row IVVc IVrw;

  MatRowGet(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case kInvoiceRowTypePrepayment:
      PasteARPayInIV(IVp,IVrw,rownr);
      MatRowPut(IVp,rownr,IVrw);
      IVVc_CalculateRate(IVp);
      IVSumup(IVp,true);
  end;  
  RETURN;
END;

global
procedure IVVc_PasteUnitCode(var record IVVc IVp,Integer rownr)
BEGIN
  row IVVc IVrw;
  val unitqty,unitprice,qty,price,oldqty;
  Boolean chrsum,chsum;

  MatRowGet(IVp,rownr,IVrw);
  unitqty = IVrw.UnitFactQuant;
  unitprice = IVrw.UnitFactPrice;
  oldqty = IVrw.Quant;
  qty = IVrw.Quant;
  price = IVrw.Price;
  chrsum = true;
  if (nonblank(IVrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(IVrw.UnitCode,unitqty,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,unitprice,qty,price,IVrw.UnitComment,false)) then begin
    IVrw.UnitFactQuant = unitqty;
    IVrw.UnitFactPrice = unitprice;
    IVrw.Quant = qty;
    IVrw.Price = price;
    chrsum = true;
    MatRowPut(IVp,rownr,IVrw);
    if (oldqty!=IVrw.Quant) then begin
      IVVc_PasteQuant(IVp,rownr,false,chsum,"");
    end;
  end;    
  end;
  if (chrsum) then begin
    chsum = IVDchrsum(IVp,rownr);
  end;
  IVSumup(IVp,true);   
  RETURN;
END;

global
function Boolean IVVc_PasteUnitFactQuant(var record IVVc IVp,Integer rownr)
BEGIN
  row IVVc IVrw;
  val unitqty,unitprice,qty,price;
  Boolean chrsum,chsum;

  MatRowGet(IVp,rownr,IVrw);
  unitqty = IVrw.UnitFactQuant;
  unitprice = IVrw.UnitFactPrice;
  qty = IVrw.Quant;
  price = IVrw.Price;
  chrsum = true;
  if (nonblank(IVrw.UnitCode)) then begin
    chrsum = false;
    if (SetUnitFactor(IVrw.UnitCode,unitqty,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,unitprice,qty,price,IVrw.UnitComment,false)) then begin
      IVrw.UnitFactQuant = unitqty;
      IVrw.UnitFactPrice = unitprice;
      IVrw.Quant = qty;
      IVrw.Price = price;
      chrsum = true;
      MatRowPut(IVp,rownr,IVrw);
      IVVc_PasteQuant(IVp,rownr,false,chsum,"");
    end;    
  end;
  if (chrsum) then begin
    chsum = IVDchrsum(IVp,rownr);
  end;
  IVVc_PasteUnitFactQuant = chsum;
  RETURN;
END;

global
procedure IVVc_PastePriceFactor(var record IVVc IVp,Integer rownr,var Boolean chsum)
BEGIN  
  row IVVc IVrw;
  
  MatRowGet(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case kInvoiceRowTypeStructuredItemComponent:
      goto LkInvoiceRowTypeNormal1;
    case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
      chsum = IVDchrsum(IVp,rownr);
    case kInvoiceRowTypeCorrection:       
      chsum = IVDchrsum(IVp,rownr);
  end;
  RETURN;
END;

global
function Integer IVVc_PasteGiftCertificate(var record IVVc IVr,Integer rownr,Integer stp)
BEGIN
  Integer res;
  record GCVc GCr;
  record GCSVc GCSr;
  record INVc INr;
  row IVVc IVrw;
  record GCBlock GCRec;
  record DefCashBlock DefCashRec;
  string 20 vatcode,salesacc;
  row PMBlock PMrw;
  Boolean found;
  
  res = 1;
  MatRowGet(IVr,rownr,IVrw);  
  switch (stp) begin
    case kInvoiceRowTypeGiftVoucherSold://selling
      GCr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin found = true; end;
      if (found==false) then begin
        GCr.BarCode = IVrw.GCNr;
        GCr.SerNr = -1;
        if (ReadFirstKey("BarCode",GCr,1,true)) then begin found = true; end;
      end;
      if (found) then begin
        IVrw.GCNr = GCr.SerNr;
        IVrw.Sum = GCr.Amount;
        BlockLoad(DefCashRec);
        IVrw.Spec = GCr.Comment;
        IVrw.PayMode = DefCashRec.DefGCSPayMode;
        IVrw.VATCode = DefCashRec.DefGCSVATCode;          
        if (GetPMRow(IVrw.PayMode,PMrw)) then begin end;
        IVrw.SalesAcc = PMrw.AccNr;
        MatRowPut(IVr,rownr,IVrw);  
        IVSumup(IVr,true);
        res = 0;
      end;
    case kInvoiceRowTypeGiftVoucherPayment://receiving
      GCSr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin found = true; end;
      if (found==false) then begin
        GCSr.BarCode = IVrw.GCNr;
        GCSr.SerNr = -1;
        if (ReadFirstKey("BarCode",GCSr,1,true)) then begin found = true; end;
      end;
      if (IVr.InvDate>GCSr.ExpiryDate) then begin
        res = 2185;
        goto LIVVc_PasteGiftCertificate;
      end;
      if (found) then begin
        IVrw.GCNr = GCSr.SerNr;
        IVrw.Sum = GCSr.Balance;
        if (IVrw.Sum>IVr.Sum4) then begin
          IVrw.Sum = IVr.Sum4;
        end;
        BlockLoad(DefCashRec);
        IVrw.PayMode = DefCashRec.DefGCRPayMode;
        IVrw.VATCode = DefCashRec.DefGCRVATCode;          
        IVrw.Spec = GCSr.Comment;
        if (GetPMRow(IVrw.PayMode,PMrw)) then begin end;
        IVrw.SalesAcc = PMrw.AccNr;
        MatRowPut(IVr,rownr,IVrw);  
        IVSumup(IVr,true);
        res = 0;
      end;   
  end;
LIVVc_PasteGiftCertificate:;  
  IVVc_PasteGiftCertificate = res;
  RETURN;
END;

global
procedure IVVc_PasteUnitFactPrice(var record IVVc IVp,Integer rownr)
BEGIN
  row IVVc IVrw;
  val unitqty,unitprice,qty,price;
  Boolean chrsum,chsum,testf;

  MatRowGet(IVp,rownr,IVrw);
  IVrw.Price = IVrw.UnitFactPrice/(IVrw.Quant/IVrw.UnitFactQuant);
  MatRowPut(IVp,rownr,IVrw);
  chsum = IVDchrsum(IVp,rownr);
  if (chsum) then begin
    IVDchsum(IVp,rownr);
  end;  
  IVSumup(IVp,true);   
  RETURN;
END;

global
procedure RestPMOtherPayRemote_IV(var record IVVc IVp,string pmcode,Integer rowstp)
begin
  row IVVc IVrw;
  string 255 tstr;
  record DefCashBlock DefCashRec;
  val fr,to1,to2,br1,br2;
  Integer rownr;

  BlockLoad(DefCashRec);
  ClearRow(IVp,IVrw,rowstp); 
  IVrw.CurncyCode = IVp.CurncyCode;
  tstr = IVrw.CurncyCode;
  GetFullCurncyRate(tstr,IVp.TransDate,fr,to1,to2,br1,br2);
  IVrw.CurncyCode = tstr;
  IVrw.FrRate = fr;
  IVrw.ToRateB1 = to1; 
  IVrw.ToRateB2 = to2;
  IVrw.BaseRate1 = br1;
  IVrw.BaseRate2 = br2;      
  IVrw.PayMode = pmcode;      
  if (blank(pmcode)) then begin
    IVrw.PayMode = DefCashRec.DefCashPayMode;      
  end;
  rownr = MatRowCnt(IVp);
  MatRowPut(IVp,rownr,IVrw);
  return;
end;

global
procedure ChequeIVsmRemote(var record IVVc IVp,string pmcode,Integer rowstp)
BEGIN
  row IVVc IVrw;
  string 255 tstr;
  record DefCashBlock DefCashRec;
  val fr,to1,to2,br1,br2;
  Integer rownr;

  BlockLoad(DefCashRec);
  if (rowstp==0) then begin
    ClearRow(IVp,IVrw,kInvoiceRowTypeChequePayment); 
  end else begin
    ClearRow(IVp,IVrw,rowstp); 
  end;
  IVrw.CurncyCode = IVp.CurncyCode;
  tstr = IVrw.CurncyCode;
  GetFullCurncyRate(tstr,IVp.TransDate,fr,to1,to2,br1,br2);
  IVrw.CurncyCode = tstr;
  IVrw.FrRate = fr;
  IVrw.ToRateB1 = to1; 
  IVrw.ToRateB2 = to2;
  IVrw.BaseRate1 = br1;
  IVrw.BaseRate2 = br2;      
  IVrw.PayMode = pmcode;    
  if (blank(IVrw.PayMode)) then begin
    IVrw.PayMode = DefCashRec.DefCashPayMode;      
  end;
  rownr = MatRowCnt(IVp);
  MatRowPut(IVp,rownr,IVrw);
  RETURN;
END;

global
procedure CashIVsmRemote(var record IVVc IVp,string pmcode,Integer rowstp)
BEGIN
  row IVVc IVrw;
  string 255 tstr;
  record DefCashBlock DefCashRec;
  val fr,to1,to2,br1,br2;
  Integer rownr;

  BlockLoad(DefCashRec);
  if (rowstp==0) then begin
    ClearRow(IVp,IVrw,kInvoiceRowTypeCashPayment); 
  end else begin
    ClearRow(IVp,IVrw,rowstp); 
  end;
  IVrw.CurncyCode = IVp.CurncyCode;
  tstr = IVrw.CurncyCode;
  GetFullCurncyRate(tstr,IVp.TransDate,fr,to1,to2,br1,br2);
  IVrw.CurncyCode = tstr;
  IVrw.FrRate = fr;
  IVrw.ToRateB1 = to1; 
  IVrw.ToRateB2 = to2;
  IVrw.BaseRate1 = br1;
  IVrw.BaseRate2 = br2;  
  IVrw.PayMode = pmcode;    
  if (blank(IVrw.PayMode)) then begin
    IVrw.PayMode = DefCashRec.DefCashPayMode;      
  end;
  rownr = MatRowCnt(IVp);
  MatRowPut(IVp,rownr,IVrw);
  RETURN;
END;

global
function Boolean SerialNrForOneItem(string serialnr,var record SerBalVc prevSBr)
begin
  Boolean res;
  Boolean found;
  record SerBalVc SBr;

  RecordClear(prevSBr);
  res = false;
  found = true;
  SBr.Serial = serialnr;  
  while (LoopKey("Serial",SBr,1,found)) begin 
    if (SBr.Serial!=serialnr) then begin found = false; end;
    if (found) then begin
      if (SBr.Quant!=0) then begin
        if (nonblank(prevSBr.Serial)) then begin
          if (prevSBr.Item!=SBr.Item) then begin
            res = false;
            found = false;
          end;
        end;
        if (found) then begin
          RecordCopy(prevSBr,SBr);
          res = true;
        end;
      end;
    end;
  end;  
  SerialNrForOneItem = res;
  return;
end;

global
function string 255 FindPositionWithSerialNr(string hLocation,string artcode,string serialnr,string rlocation)
begin
  string 255 res;
  record ItemHistVc IHr;
  Boolean found;
  string 255 location;
  
  location = rlocation;
  if (blank(location)) then begin
    location = hLocation;
  end;
  found = true;
  IHr.ArtCode = artcode;
  IHr.SerialNr = serialnr;
  while (LoopKey("ActiveSerialNr",IHr,2,found)) begin
    if (IHr.ArtCode!=artcode) then begin found = false; end;
    if (IHr.SerialNr!=serialnr) then begin found = false; end;
    if (found) then begin
      if (IHr.Location==location) then begin
        res = IHr.Position;
        found = false;
      end;      
    end;
  end;
  
  FindPositionWithSerialNr = res;
  return;
end;

global
function Boolean IVVc_PasteSerialNr(var record IVVc IVr,Integer rownr,Boolean TouchScreenLookf)
BEGIN
  Boolean res;
  row IVVc IVrw,lastIVrw;
  val UnitXval,UnitYval,UnitZval,t,prevquant;
  string 255 tstr,location;
  Boolean chsum;
  record SerBalVc SBr;
  string 255 inwarning;
  string 30 serial;
  record INVc INr;
  Integer sernrf;
  record SerNrTrackBlock SNrb;

  BlockLoad(SNrb);
  MatRowGet(IVr,rownr,IVrw);
  prevquant = IVrw.Quant;
  location = IVrw.Location;
  if (blank(location)) then begin
    location = IVr.Location;
  end;

  if (blank(IVrw.ArtCode)) then begin 
    if (SerialNrForOneItem(IVrw.SerialNr,SBr)) then begin
      if (nonblank(SBr.Item)) then begin 
        IVrw.ArtCode = SBr.Item;
        if (ReadFirstItem(SBr.Item,INr,false,false)) then begin
          switch (INr.SerNrf) begin
            case 1:
              IVrw.Quant = 1;
            case 2:
              IVrw.Quant = SBr.Quant;
          end;
        end;
        IVrw.Location = SBr.Location;
        serial = IVrw.SerialNr;
        IVrw.PosCode = FindPositionWithSerialNr(IVr.Location,IVrw.ArtCode,IVrw.SerialNr,IVrw.Location);
        MatRowPut(IVr,rownr,IVrw);
        if (IVVc_PasteArtCode(IVr,rownr,inwarning,inwarning,TouchScreenLookf,sernrf)) then begin 
        end;
        MatRowGet(IVr,rownr,IVrw);
        IVrw.SerialNr = serial;
        MatRowPut(IVr,rownr,IVrw);
        res = true;
      end;  
    end;
  end;
  if (blank(IVrw.ArtCode)) then begin 
    if (FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw)) then begin 
      if (nonblank(lastIVrw.ArtCode)) and (nonblank(IVrw.SerialNr)) and (IVrw.SerialNr==lastIVrw.SerialNr) then begin 
        CopyRow(IVr,lastIVrw,IVrw);
        IVrw.Quant = -1;
        MatRowPut(IVr,rownr,IVrw);
        chsum = IVDchrsum(IVr,rownr);
        IVSumup(IVr,true); 
        goto LIVVc_PasteSerialNr;
      end;  
    end;
  end else begin
    ReadFirstItem(IVrw.ArtCode,INr,true,true);
    if (nonblank(IVrw.ArtCode)) and (INr.SerNrf==1) then begin
      if (BulkSerialNos_CalculateQuantityAndSerialNr(SNrb,true,IVrw.ArtCode,IVrw.SerialNr,IVrw.Quant)) then begin
        MatRowPut(IVr,rownr,IVrw);
      end;
    end;
  end;
  MatRowGet(IVr,rownr,IVrw);
  if ((SNrb.BulkSerialNos==0) or (InString(IVrw.SerialNr,":")==0)) then begin
    SerialNrDimensions(IVrw.ArtCode,IVrw.SerialNr,UnitXval,UnitYval,UnitZval);
    if (UnitXval!=0) then begin IVrw.UnitXval = UnitXval; end;
    if (UnitYval!=0) then begin IVrw.UnitYval = UnitYval; end;
    if (UnitZval!=0) then begin IVrw.UnitZval = UnitZval; end;
    t = IVrw.BasePrice;
    chsum = CostPriceForGP(IVrw.ArtCode,IVrw.SerialNr,IVr.PriceList,IVr.CustCode,t);
    IVrw.BasePrice = t;
    B1ToB2Val(IVrw.BasePrice,IVr.BaseRate1,IVr.BaseRate2,t);
    IVrw.BasePriceB2 = t;
    if (CheckSerialStatus(IVrw.ArtCode,IVrw.SerialNr,tstr)==1) then begin
      MessageBox(0,tstr);
    end;
    IVrw.Quant = CalculateSerialNrQuantity(IVrw.ArtCode,IVrw.SerialNr,location,true,IVrw.UnitXval,IVrw.UnitYval,IVrw.UnitZval,IVrw.Quant);  
  end;
  GetSerialNumberCountryOfOrg("IVVc",IVr.SerNr,rownr,IVrw.ArtCode,IVrw.SerialNr,IVrw.CountryOfOrg,tstr);
  MatRowPut(IVr,rownr,IVrw);
  if (IVrw.Quant!=prevquant) then begin
    IVVc_PasteQuant(IVr,rownr,true,chsum,"");
  end;
  if (chsum) then begin
    IVDchsum(IVr,rownr);
    IVSumup(IVr,true);
  end;
LIVVc_PasteSerialNr:;
  IVVc_PasteSerialNr = res;
  RETURN;
END;

global
function Boolean IVVc_PasteOrdRow(var record IVVc IVr,Integer rownr,var string warning)
BEGIN
  Boolean res;
  row IVVc IVrw;
  row IVVc creditIVrw;
  record IVVc orgIVr;
  record IVVc credIVr;
  Boolean TrHs;
  Integer i,rwcnt;
  
  MatRowGet(IVr,rownr,IVrw);
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    orgIVr.SerNr = IVrw.OrdRow;
    if (ReadFirstMain(orgIVr,1,true)) then begin
      IVr.InstallmentInv = orgIVr.InstallmentInv;
      IVr.OrderNr = orgIVr.OrderNr;
      IVr.FrRate = orgIVr.FrRate;
      IVr.ToRateB1 = orgIVr.ToRateB1;
      IVr.ToRateB2 = orgIVr.ToRateB2;
      IVr.BaseRate1 = orgIVr.BaseRate1;
      IVr.BaseRate2 = orgIVr.BaseRate2;
      IVr.CredManNr = orgIVr.CredManNr;
      IVr.ARAcc = orgIVr.ARAcc; // Should it not credit the same account as the original record?
      rwcnt = MatRowCnt(IVr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVr,i,creditIVrw);
        switch (creditIVrw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            goto LkInvoiceRowTypeNormal2;
          case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
            if (creditIVrw.OrdRow>=0) then begin
              creditIVrw.NotUpdStockFlag = 1;
              MatRowPut(IVr,i,creditIVrw);
            end;
          case kInvoiceRowTypePrepayment:
            MatRowDelete(IVr,i);
            rwcnt = MatRowCnt(IVr);
        end;
      end;
      IVSumup(IVr,true);
    end;
    IVr.CredInv = IVrw.OrdRow;
    res = true;

    if (IVrw.OrdRow>0) then begin
      credIVr.CredInv = IVrw.OrdRow;
      TrHs = true;
      while (LoopKey("CredInv",credIVr,1,TrHs)) begin
        if (credIVr.CredInv!=IVrw.OrdRow) then begin TrHs = false; end;
        if (TrHs) then begin
          if (credIVr.SerNr!=IVr.SerNr) then begin
            TrHs = false;
            warning = USetStr(1805) & " " & credIVr.SerNr;
          end;
        end;
      end;
    end;
  end;
  IVVc_PasteOrdRow = res;
  RETURN;
END;

global
function Boolean IVVc_PasteCredOfficialSerNr(var record IVVc IVr,Integer rownr,var string warning)
begin
  Boolean res;
  row IVVc IVrw;
  record IVVc orgIVr;
 
  MatRowGet(IVr,rownr,IVrw);
  if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    orgIVr.OfficialSerNr = IVrw.CredOfficialSerNr;
    if (ReadFirstKey("OfficialSerNr",orgIVr,1,true)) then begin
      IVrw.OrdRow = orgIVr.SerNr;
      MatRowPut(IVr,rownr,IVrw);
      res = IVVc_PasteOrdRow(IVr,rownr,warning);
    end;
  end;
  IVVc_PasteCredOfficialSerNr = res;
  return;
end;

global
function Boolean AddRepaLine(var record IVVc IVr,Boolean touchscl,Integer fromrow,var val orsum)
begin
  record CUVc CUr;
  record RepaBlock RBr;
  row IVVc IVrw;
  row IVVc theIVrw;
  Integer wn,i,rwcnt,sernrf;
  string 200 inwarning;
  Boolean res;
  Boolean chsum;
  Boolean norepa;
  
  res = false;
  norepa = false;
  BlockLoad(RBr);
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    norepa = CUr.NoRepa!=0;
  end;
  rwcnt = MatRowCnt(IVr);
  theIVrw.ArtCode = RBr.RepaItem;
  if (blank(theIVrw.ArtCode)) then begin
    theIVrw.Spec = USetStr(20792);
  end;
  theIVrw.Quant = 1;
  MatRowPut(IVr,rwcnt,theIVrw);
  if (IVVc_PasteArtCode(IVr,rwcnt,inwarning,inwarning,touchscl,sernrf)) then begin
    MatRowGet(IVr,rwcnt,theIVrw);
    theIVrw.Price = BlankVal;
    for (i=fromrow;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      theIVrw.Price = theIVrw.Price + IVrw.RepaExVAT;
    end;
    if (norepa) then begin
      theIVrw.vRebate = 100;
      theIVrw.Sum = 0;
    end;
    MatRowPut(IVr,rwcnt,theIVrw);
    chsum = IVDchrsum(IVr,rwcnt);
    if (chsum) then begin
      IVDchsum(IVr,rwcnt);
    end;
    orsum = orsum + theIVrw.Sum;
    IVSumup(IVr,false);//TaxMatrix roundof , why is it false here, I bet u worng
    res = true;
  end;
LAddRepaLine:;  
  AddRepaLine = res;
  RETURN;
END;

global
procedure InvoiceConvertB1ToB2(record IVVc IVr,string curncycode,val frp,var val to1p,var val to2p,var val br1p,var val br2p)
begin
  row IVVc IVrw;
  Integer rwcnt,i;
  string 20 curncy;
  Boolean base2inv;
  val t;
  
  base2inv = false;
  curncy = curncycode;
  if (curncy==curncycode) then begin base2inv = true; end;
  SwapM4Val(br1p,br2p);
  SwapM4Val(to1p,to2p);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    InvoiceCalcCommisionValue(IVr,IVrw.Quant,IVrw.Price,t);
    IVrw.Price = IVrw.Price + t;            
    B1ToB2Val(IVrw.Price,br1p,br2p,t);
    IVrw.Price = t;    
    IVrw.Sum = IVrw.Quant*IVrw.Price;
    B1ToB2Val(IVrw.rowGP,br1p,br2p,t);
    IVrw.rowGP = t;
    B1ToB2ValRM(IVrw.FIFO,br1p,br2p,t,GetCostRoundModeRB);
    IVrw.FIFO = t;
    B1ToB2Val(IVrw.BasePrice,br1p,br2p,t);
    IVrw.BasePrice = t;
    B1ToB2ValRM(IVrw.FIFORowVal,br1p,br2p,t,GetCostRoundModeRB);
    IVrw.FIFORowVal = t;
    MatRowPut(IVr,i,IVrw);
  end;
  return;  
end;

global
procedure IVDUpdatePrices(var record IVVc IVr,Boolean readf)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  record INVc INr;
  Boolean calcprice;
  string 255 tstr;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,location,taxtemplatecode;
  Boolean dummyf;

  if (readf) then begin
    if (ReadFirstMain(IVr,0,true)) then begin end;  
  end;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
    if (nonblank(IVrw.ArtCode)) then begin
      price = IVrw.Price;
      vreb = blankval;
      baseprice = blankval;
      vatcode = "";
      salesacc = "";
      location = IVrw.Location;
      if (blank(location)) then begin
        location = IVr.Location;
      end;
      if (GetItemPriceDiscount3(IVrw.ArtCode,IVrw.Quant,INr,IVr.CurncyCode,
                              IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,
                              IVr.LangCode,IVr.CustCat,IVr.PriceList,IVr.RebCode,
                              price,curitemname,vreb,vatcode,baseprice,salesacc,
                              IVr.ExportFlag,calcprice,IVr.TransDate,IVr.TransTime,IVr.CustCode,true,dummyf,IVr.PayDeal,tax2code,tax2prc,IVr.Region,location,taxtemplatecode)) then begin
        IVrw.ArtCode = INr.Code;
        IVrw.Price = price;
//        IVrw.Spec = curitemname;//why item name?
        IVrw.vRebate = vreb;
        IVrw.SalesAcc = salesacc;
        IVrw.VATCode = vatcode;
        if (INr.ItemType==kItemTypeStructured and blank(IVr.PriceList)) then begin
          IVrw.BasePrice = blankval;
        end else begin
          IVrw.BasePrice = baseprice;
        end;
        IVrw.RepaExVAT = CalcItemRepa(INr.RepaPricePerWeight,INr.Weight,IVrw.Quant,IVr.CurncyCode,
                                      IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
        if (nonblank(IVr.CustVATCode)) then begin
          IVrw.VATCode = IVr.CustVATCode;
        end;
        MatRowPut(IVr,i,IVrw);
        if (IVDchrsum(IVr,i)) then begin
        end;
        IVDchsum(IVr,i);
      end;
    end;
    end;
  end;
  IVSumup(IVr,true);
  RETURN;
END;

global
procedure IVVc_PasteTaxTemplateCode(var record IVVc IVr,Integer rownr,var Boolean chsum)
begin
  row IVVc IVrw;
  record TaxMatrixVc TMr;
  
  MatRowGet(IVr,rownr,IVrw);
  IVrw.TaxTemplateCode = OverrideTaxMatrix(IVrw.TaxTemplateCode,TMr);
  PackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
  MatRowPut(IVr,rownr,IVrw);
  RowCalculateTaxMatrix_IVVc(IVr,rownr,IVrw);
  MatRowPut(IVr,rownr,IVrw);
  chsum = IVDchrsum(IVr,rownr);
  return;
end;

