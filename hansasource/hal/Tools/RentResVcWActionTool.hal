external updating function LongInt RentResVcRecordUpdate(var record RentResVc,record RentResVc,LongInt,LongInt);
external updating function LongInt RentResVcRecordUpdateAfter(var record RentResVc,record RentResVc,LongInt,LongInt);
external procedure SetRentResStatus(var record RentResVc,record RentControlBlock);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean PasteCustInAgreement(var record AgreementVc,string,Boolean,var string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);

function Boolean PasteRentResInvItem(var record RentResVc RentResr,var string inwarning,Boolean forcepricef,string custcode)
begin
  Boolean res;
  record AgreementVc Agreer;
  record INVc INr;
  record CUVc CUr;
  val s,price,vreb,baseprice,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice,dummyf;
  record GeneralOptionBlock GenOptRec;
  string 255 tstr,tstr2;
  Time blankt;

  BlockLoad(GenOptRec);
  if (forcepricef==false) then begin
    RentResr.Price = BlankVal;
  end;
  RentResr.vRebate = BlankVal;
  RentResr.Sum = BlankVal;
  Agreer.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreer,1,true)==false) then begin
    RecordNew(Agreer);
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      Agreer.CustCode = CUr.Code;
      if (PasteCustInAgreement(Agreer,tstr2,true,tstr)) then begin end;
    end;
  end;
  if (GetItemPriceDiscount3(RentResr.InvItem,RentResr.InvQuant,INr,Agreer.CurncyCode,
                            Agreer.FrRate,Agreer.ToRateB1,Agreer.ToRateB2,Agreer.BaseRate1,Agreer.BaseRate2,
                            RentResr.LangCode,Agreer.CustCat,Agreer.PriceList,Agreer.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            Agreer.ExportFlag,calcprice,RentResr.TransDate,blankt,Agreer.CustCode,true,dummyf,"",tax2code,tax2prc,"","",taxtemplatecode)) then begin
    if (vreb==0) then begin
      vreb = blankval;
    end;
    RentResr.InvItemName = curitemname;
    if (nonblank(INr.WarnText1)) then begin
      inwarning = INr.WarnText1;
    end;
    if (forcepricef) then begin
      RentResr.vRebate = BlankVal;
    end else begin
      if (RentResr.AdvPrActive==0) then begin
        RentResr.Price = price;
        RentResr.vRebate = vreb;
      end;
    end;
    if (RentResr.AdvPrActive==0) then begin
      CalcSum(RentResr.InvQuant,RentResr.Price,INr.PriceFactor,RentResr.vRebate,s,GenOptRec.UseDiscount);
      RentResr.Sum = s;
    end;
    res = true;
  end;
  PasteRentResInvItem = res;
  return;
end;

procedure GetRentINNameStr(record RentINVc RentINr,string langcod2,var string comment)
begin
  row RentINVc RentINrw;
  Integer rwcnt,i;

  comment = RentINr.Name;
  if (nonblank(langcod2)) then begin
    rwcnt = MatRowCnt(RentINr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RentINr,1,RentINrw);
      if (RentINrw.LangCode==langcod2) then begin
        comment = RentINrw.Text;
        i = rwcnt;
      end;
    end;
  end;
  return;
end;

procedure PasteRecInRentRes(record RentResVc RentResr,Boolean disposable)
begin
  record RentControlBlock RCb;
  record INVc INr;
  record RecVc Recr;
  row RecVc Recrw;
  row RentResVc RentResrw;
  Integer rwcnt,i,rentrw;
  val qty;

  BlockLoad(RCb);
  while (MatRowCnt(RentResr)>0) begin
    MatRowDelete(RentResr,0);
  end;
  if (nonblank(RentResr.IncludeRecepy)) then begin
    Recr.Code = RentResr.IncludeRecepy;
    if (ReadFirstMain(Recr,1,true)) then begin
      rentrw = 0;
      rwcnt = MatRowCnt(Recr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Recr,i,Recrw);
        if (RCb.UseInQty==0) then begin
          qty = Recrw.OutQty;
        end else begin
          qty = Recrw.InQty;
        end;
        if (qty<>BlankVal) then begin
          ClearRow(RentResr,RentResrw,1);
          RentResrw.ArtCode = Recrw.Item;
          RentResrw.Spec = Recrw.Comment;
          RentResrw.Quant = qty * RentResr.RentQuant;
          RentResrw.Type = 0;
          if (disposable) then begin
            RentResrw.Type = 1;
          end else begin
            RentResrw.Type = 0;
          end;
          INr.Code = RentResrw.ArtCode;
          if (ReadFirstMain(INr,1,true)) then begin
            if (INr.ItemType<>1) then begin
              RentResrw.Type = 1;
            end;
          end;
          MatRowPut(RentResr,rentrw,RentResrw);
          // If more than one in qty on an item that is serial numbered....
          rentrw = rentrw + 1;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure FindRentINInvItem(string invitem,string agreetype,var string newinvitem,var val qty,var val price,var Boolean forcepricef)
begin
  record RentPriceListVc RentPriceListr;
  
  forcepricef = false;
  qty = 1;
  newinvitem = invitem;
  RentPriceListr.InvItemCode = invitem;
  RentPriceListr.AgreeTypeCode = agreetype;
  if (ReadFirstMain(RentPriceListr,2,true)) then begin
    if (RentPriceListr.UseThisPrice!=0) then begin
      price = RentPriceListr.UseThisPrice;
      forcepricef = true;
    end;
    if (RentPriceListr.UseThisQty!=0) then begin
      qty = RentPriceListr.UseThisQty;
    end;
    if (nonblank(RentPriceListr.UseItemCode)) then begin
      newinvitem = RentPriceListr.UseItemCode;
    end;
  end;
  return;
end;

global
function Boolean PasteRentResItemAndSerial(record RentResVc RentResr,var string inwarning,string custcode,Boolean disposable)
begin
  record AgreementVc Agreer;
  record INVc INr;
  record RentINVc RentINr;
  string 255 tstr;
  Boolean res;
  string 20 langcode;
  Boolean rentinf,forcepricef;
  val q,s;

  res = false;
  langcode = "";
  Agreer.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreer,1,true)) then begin
    langcode = Agreer.LangCode;
  end;
//  if (nonblank(RentResr.SerialNr)) then begin
    RentINr.Code = RentResr.Code;
    RentINr.SerialNr = RentResr.SerialNr;
    rentinf = ReadFirstMain(RentINr,2,true);
    if (nonblank(RentResr.SerialNr)) then begin
      if ((rentinf==false) and (blank(RentINr.Code))) then begin
        RentINr.SerialNr = RentResr.SerialNr;
        rentinf = ReadFirstKey("SerialNr",RentINr,1,true);
        if (rentinf) then begin
          RentResr.Code = RentINr.Code;
          RentResr.RentQuant = 1;
        end;
      end;
    end;
    if (rentinf) then begin
      GetRentINNameStr(RentINr,langcode,tstr);
      RentResr.Name = tstr;
      RentResr.Group = RentINr.Group;
      RentResr.RecepyItem = RentINr.RecepyItem;
      RentResr.Objects = RentINr.Objects;
      if (blank(RentResr.Location)) then begin
        RentResr.Location = RentINr.OrgLocation;
      end;
//      if (nonblank(RentINr.InvItem)) then begin
        FindRentINInvItem(RentINr.InvItem,RentResr.AgreeType,tstr,q,s,forcepricef);
        RentResr.InvItem = tstr;
        RentResr.InvQuant = q;
        if (RentResr.AdvPrActive==0) then begin
          RentResr.Price = s;
        end;
        res = PasteRentResInvItem(RentResr,inwarning,forcepricef,custcode);
//      end;
      if (RentResr.IncludeRecepy<>RentINr.IncludeRecepy) then begin
        RentResr.IncludeRecepy = "";
      end;
      if (blank(RentResr.IncludeRecepy)) then begin
        RentResr.IncludeRecepy = RentINr.IncludeRecepy;
        if (nonblank(RentResr.IncludeRecepy)) then begin
          PasteRecInRentRes(RentResr,disposable);
        end;
      end;
      res = true;
    end else begin
      RentResr.IncludeRecepy = "";
    end;
//  end else begin
//    RentResr.IncludeRecepy = "";
//    PasteRecInRentRes(RentResr);
//  end;
  if (res==false) then begin
    INr.Code = RentResr.Code;
    RentResr.Group = "";
    RentResr.Location = "";
    RentResr.RecepyItem = 0;
    if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemNameStr(1,tstr,langcode,INr.Name,INr.Code)) then begin end;
      RentResr.Name = tstr;
      res = true;
      inwarning = INr.WarnText1;
    end;
  end;
  PasteRentResItemAndSerial = res;
  return;
end;

global
function Boolean RentResVc_PasteCode(var record RentResVc RentResr,var string inwarning)
BEGIN
  Boolean res;
  
  res = PasteRentResItemAndSerial(RentResr,inwarning,"",false);
  RentResVc_PasteCode = res;
  return;
end;

global
function Boolean RentResVc_PasteRentQuant(var record RentResVc RentResr)
BEGIN
  row RentResVc RentResrw;
  Integer i,rwcnt;
  Boolean res;
  string 255 inwarning;
  
// Could be done neater, like only removing lines from the Recepy, but this is safe
  while (MatRowCnt(RentResr)>0) begin
    MatRowDelete(RentResr,0);
  end;
  RentResr.IncludeRecepy = "";
  res = PasteRentResItemAndSerial(RentResr,inwarning,"",false);
  RentResVc_PasteRentQuant = res;
  return;
end;

// Not counting hours...
global
function Boolean RentResVc_PasteCommitedUntil(var record RentResVc RentResr)
BEGIN
  record RentControlBlock RCb;
  record AdvPriceRecVc AdvPriceRecr;
  row AdvPriceRecVc AdvPriceRecrw;
  Integer rwcnt,i,startfrom;
  Boolean res,advpr;
  Date thedat;

  BlockLoad(RCb);
  if (RentResr.CommitedSum!=0) then begin
    RentResr.CommitedSum = BlankVal;
  end;
  thedat = RentResr.TransDate;
  AdvPriceRecr.FileName = "RentResVc";
  AdvPriceRecr.SerNr = RentResr.SerNr;
  AdvPriceRecr.RowNr = -1;
  if (ReadFirstMain(AdvPriceRecr,3,true)) then begin
    rwcnt = MatRowCnt(AdvPriceRecr);
    advpr = true;
    if (RCb.ChrPerAdvPric!=0) then begin
      if (rwcnt>0) then begin
        MatRowGet(AdvPriceRecr,0,AdvPriceRecrw);
        thedat = AdvPriceRecrw.StartDate;
      end;
    end;
  end else begin
    advpr = false;
  end;
  startfrom = 0;
  while (thedat<RentResr.CommitedUntil) begin
    if (advpr) then begin
      for (i=startfrom;i<rwcnt;i=i+1) begin
        MatRowGet(AdvPriceRecr,i,AdvPriceRecrw);
        if (DateInRange(thedat,AdvPriceRecrw.StartDate,AdvPriceRecrw.EndDate)) then begin
          if (AdvPriceRecrw.PeriodType==0) then begin
            RentResr.CommitedSum = RentResr.CommitedSum + AdvPriceRecrw.Price;
            startfrom = i+1;
          end else begin
            RentResr.CommitedSum = RentResr.CommitedSum + AdvPriceRecrw.Price;
          end;
          i = rwcnt;
          res = true;
        end;
      end;
    end else begin
      RentResr.CommitedSum = RentResr.CommitedSum + RentResr.Sum;
      res = true;
    end;
    thedat = AddDay(thedat,1);
  end;
  RentResVc_PasteCommitedUntil = res;
  return;
end;

global
function Boolean RentResVc_PasteSerialNr(var record RentResVc RentResr,Boolean disposable)
BEGIN
  string 200 warning;
  Boolean res;
  
  res = PasteRentResItemAndSerial(RentResr,warning,"",disposable);
  RentResVc_PasteSerialNr = res;
  RETURN;
END;

global
function Boolean RentResVc_PasteInvItem(var record RentResVc RentResr,var string inwarning)
BEGIN
  Boolean res;
  
  res = PasteRentResInvItem(RentResr,inwarning,false,"");
  RentResVc_PasteInvItem = res;
  return;
end;

global
function Boolean RentResVc_PasteAgreeType(var record RentResVc RentResr,var string inwarning)
BEGIN
  Boolean res;
  string 255 tstr;
  val q,s;
  Boolean forcepricef;
  record RentINVc RentINr;
  
  RentINr.Code = RentResr.Code;
  RentINr.SerialNr = RentResr.SerialNr;
  if (ReadFirstMain(RentINr,2,true)) then begin
    FindRentINInvItem(RentINr.InvItem,RentResr.AgreeType,tstr,q,s,forcepricef);//RentResr.InvItem
    RentResr.InvItem = tstr;
    RentResr.InvQuant = q;
    if (RentResr.AdvPrActive==0) then begin
      RentResr.Price = s;
    end;
    res = PasteRentResInvItem(RentResr,inwarning,forcepricef,"");
  end;
  RentResVc_PasteAgreeType = res;
  return;
end;

global
procedure RentResVc_GetCustomerWarning(var record RentResVc RentResr,var string cuwarning)
BEGIN
  record CUVc CUr;
  record AgreementVc Agreer;
  
  cuwarning = "";
  Agreer.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreer,1,true)) then begin
    CUr.Code = Agreer.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      cuwarning = CUr.WarnText1;
    end;
  end;
  return;
end;

global
updating function Boolean RentResNewRent(var record RentResVc RentResr,var record RentResVc NewRentResr)
begin
  Boolean res;
  row RentResVc RentResrw;
  record RentResVc oldRentResr;
  row RentResVc NewRentResrw;
  Integer i,rwcnt,j;
  Date bldat;
  record RentControlBlock RCr;
  
  res = false;
  BlockLoad(RCr);
  RecordCopy(NewRentResr,RentResr);
  RecordCopy(oldRentResr,RentResr);
  NewRentResr.RentQuant = RentResr.RentQuant - RentResr.RentResRet;
  if (RentResr.RentQuant>RentResr.RentResDel) then begin
    RentResr.RentResRet = RentResr.RentResDel;
  end else begin
    RentResr.RentResRet = RentResr.RentQuant;
  end;
  NewRentResr.RentResRet = BlankVal;
  NewRentResr.RentResDel = NewRentResr.RentQuant;
  if (RentResr.RentResDel==0) then begin
    NewRentResr.RentResDel = 0;
  end;
  if (NewRentResr.RentResDel==0) then begin
    NewRentResr.RentResDel = BlankVal;
  end;
  if (RentResr.Done!=0) then begin
    if (NewRentResr.RentQuant==0) then begin
      NewRentResr.RentQuant = RentResr.RentQuant;
    end;
  end;
  while (MatRowCnt(NewRentResr)>0) begin
    MatRowDelete(NewRentResr,0);
  end;
  j = 0;
  rwcnt = MatRowCnt(RentResr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentResr,i,RentResrw);
    MatRowGet(RentResr,i,NewRentResrw);
    if (RentResrw.Type==0) then begin
      if (RentResrw.Quant>RentResrw.Del) then begin // this isn't correct.....has to think about this....
        NewRentResrw.Quant = RentResrw.Quant - RentResrw.Del;
        RentResrw.Ret = RentResrw.Del;
        NewRentResrw.Ret = BlankVal;
        NewRentResrw.Del = BlankVal;
        if (RentResrw.Del==0) then begin
          NewRentResrw.Del = 0;
        end;
      end else begin
        NewRentResrw.Quant = RentResrw.Quant - RentResrw.Ret;
        RentResrw.Ret = RentResrw.Quant;
        NewRentResrw.Ret = BlankVal;
        NewRentResrw.Del = NewRentResrw.Quant;
      end;
      if (NewRentResrw.Del==0) then begin
        NewRentResrw.Del = BlankVal;
      end;
      if (RentResr.Done!=0) then begin
        if (NewRentResrw.Quant==0) then begin
          NewRentResrw.Quant = RentResrw.Quant;
        end;
      end;
      MatRowPut(RentResr,i,RentResrw);
      MatRowPut(NewRentResr,j,NewRentResrw);
      j = j + 1;
    end;
  end;
  if (RentResr.Done!=0) then begin
    NewRentResr.TransDate = AddDay(RentResr.EndDate,1);
  end else begin
    RentResr.EndDate = AddDay(CurrentDate,-1);
    NewRentResr.TransDate = CurrentDate;
  end;
  if (nonblankdate(NewRentResr.StartInvoicing)) then begin
    NewRentResr.StartInvoicing = NewRentResr.TransDate;
  end;
  if (nonblankdate(RentResr.EndInvoicing)) then begin
    RentResr.EndInvoicing = RentResr.EndDate;
  end;
  NewRentResr.LastChargeDate = bldat;
  NewRentResr.LastInvoiceDate = bldat;
  NewRentResr.OriginalSerNr = RentResr.SerNr;
  NewRentResr.Done = 0;
  SetRentResStatus(RentResr,RCr);
  SetRentResStatus(NewRentResr,RCr);
  RentResr.Done = 1;
  NewRentResr.SerNr = NextSerNr("RentResVc",NewRentResr.TransDate,-1,false,"");
  if (RentResVcRecordUpdate(RentResr,oldRentResr,0,0)==0) then begin end;
  if (RecordUpdate(oldRentResr,RentResr,false)==0) then begin
    if (RentResVcRecordUpdateAfter(RentResr,oldRentResr,0,0)==0) then begin end;
    if (RecordInsert(NewRentResr,false)) then begin
      res = true;
    end;
  end;
  RentResNewRent = res;
  return;
end;

global
procedure RecalculateAdvPrices(record AdvPriceRecVc AdrPricer,Boolean rebuildf)
begin
// Kjell
// Select type of record it belongs to and make their respective calcualtions.
  return;
end;

