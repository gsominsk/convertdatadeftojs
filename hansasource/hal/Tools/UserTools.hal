external function string 60 AddObjectToObjectList(string,string);

global
function Integer GetGlobalUserRow(string usercode,string compcode,var string compname,var string accessgroup)
begin
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  record UserVc Userr;
  Integer oldcomp;
  Integer i,rwcnt;
  Integer res;

  res = -1;
  oldcomp = CurrentCompany;  
  BlockLoad(CompaniesRec);
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if ((comprw.CompCode==compcode) and (comprw.ActiveStatus==0)) then begin
      res = 0;
      if (SetCompanyCode(comprw.CompCode,false)) then begin
        compname = comprw.CompName;
        Userr.Code = usercode;
        if (ReadFirstMain(Userr,1,true)) then begin
          accessgroup = Userr.AccessGroup;
          res = 1;
        end else begin
          accessgroup = "";
        end;
      end;
      i = rwcnt;
    end;
  end;
  ResetCompany(oldcomp);
  GetGlobalUserRow = res;
  return;
end;

global
procedure RemoteFillGlobalUserComp(var record GlobalUserVc GlobalUserr)
begin
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  row GlobalUserVc GlobalUserrw;
  Integer i,rwcnt,pos;
  string 60 compname,accessgroup;

  BlockLoad(CompaniesRec);
  while (MatRowCnt(GlobalUserr)>0) begin
    MatRowDelete(GlobalUserr,0);
  end;
  pos = 0;
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if (comprw.ActiveStatus==0) then begin
      if (GetGlobalUserRow(GlobalUserr.Code,comprw.CompCode,compname,accessgroup)>=0) then begin
        GlobalUserrw.CompCode = comprw.CompCode;
        GlobalUserrw.CompName = compname;
        GlobalUserrw.AccessGroup = accessgroup;
        MatRowPut(GlobalUserr,pos,GlobalUserrw);
        pos = pos + 1;
      end;
    end;
  end;
  return;
end;

global
procedure RemoteFillSmartGlobalUserComp(var record GlobalUserVc GlobalUserr)
begin
  record CompaniesBlock CompaniesRec;
  row CompaniesBlock comprw;
  row GlobalUserVc GlobalUserrw;
  Integer i,rwcnt,pos;
  string 60 compname,accessgroup;

  BlockLoad(CompaniesRec);
  while (MatRowCnt(GlobalUserr)>0) begin
    MatRowDelete(GlobalUserr,0);
  end;
  pos = 0;
  rwcnt = MatRowCnt(CompaniesRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CompaniesRec,i,comprw);
    if (comprw.ActiveStatus==0) then begin
      if (GetGlobalUserRow(GlobalUserr.Code,comprw.CompCode,compname,accessgroup)==1) then begin
        GlobalUserrw.CompCode = comprw.CompCode;
        GlobalUserrw.CompName = compname;
        GlobalUserrw.AccessGroup = accessgroup;
        MatRowPut(GlobalUserr,pos,GlobalUserrw);
        pos = pos + 1;
      end;
    end;
  end;
  return;
end;

// This has to change, for main company field
global
function Boolean GetGlobalUserMainCompany(string usercode,var string companycode)
begin
  record GlobalUserVc GlobalUserr;
  row GlobalUserVc GlobalUserrw;
  Boolean res;
  
  res = false;
  companycode = "";
  GlobalUserr.Code = usercode;
  if (ReadFirstMain(GlobalUserr,1,true)) then begin
    companycode = GlobalUserr.MainCRMCompany;
    res = nonblank(companycode);
  end;
  GetGlobalUserMainCompany = res;
  return;
end;

global
function string 255 GetGlobalUserMainCompanies(string usercode)
begin
  record GlobalUserVc GlobalUserr;
  row GlobalUserVc GlobalUserrw;
  string 255 companies;
  record GlobalCRMBlock GCRMb;
  
  BlockLoad(GCRMb);
  companies = "";
  GlobalUserr.Code = usercode;
  if (ReadFirstMain(GlobalUserr,1,true)) then begin
    companies = AddObjectToObjectList(companies,GlobalUserr.MainCRMCompany);
    companies = AddObjectToObjectList(companies,GlobalUserr.ExtraCRMCompanies);
  end else begin
    companies = CurrentCompany;
  end;
  if (blank(GlobalUserr.ExtraCRMCompanies)) then begin
    companies = AddObjectToObjectList(companies,GCRMb.ExtraCRMCompanies);
  end;
  GetGlobalUserMainCompanies = companies;
  return;
end;

global
procedure GetCurrentCompanyCode(var string CompCode)
begin
  Integer i,rwcnt;
  record CompaniesBlock CompRec;
  row CompaniesBlock Comprw;
  
  BlockLoad(CompRec);
  rwcnt = MatRowCnt(CompRec);
  if ((CurrentCompany<rwcnt) and (CurrentCompany>0)) then begin
    MatRowGet(CompRec,CurrentCompany,Comprw);
    CompCode = Comprw.CompCode;
  end;
  return;
end;

global
function Boolean FindTheUser(var record UserVc USr)
begin
  record ModuleBlock MBr;
  record GlobalUserVc GlobalUserr;
  row GlobalUserVc GlobalUserrw;
  Integer rwcnt,i;
  string 100 compcode;
  Boolean res;
  
  BlockLoad(MBr);
  if (MBr.UseGlobalUsers!=0) then begin
    GlobalUserr.Code = USr.Code;
    res = ReadFirstMain(GlobalUserr,1,true);
    if (res) then begin
      if (ReadFirstMain(USr,1,true)==false) then begin
        RecordNew(USr);
      end;
      USr.Code = GlobalUserr.Code;
      USr.Name = GlobalUserr.Name;
      USr.AccessGroup = GlobalUserr.AccessGroup;
      USr.emailAddr = GlobalUserr.emailAddr;
      USr.LoginEmailAddr = GlobalUserr.LoginEmailAddr;
      USr.LangCode = GlobalUserr.LangCode;
      USr.OneFunction = GlobalUserr.OneFunction;
      USr.CustCode = GlobalUserr.CustCode;
      USr.NewPassWord = GlobalUserr.NewPassWord;
      USr.FTPLogin = GlobalUserr.FTPLogin;
      USr.Closed = GlobalUserr.Closed;
      USr.OnlyVoiceLogin = GlobalUserr.OnlyVoiceLogin;
      USr.DateCreated = GlobalUserr.DateCreated;
      USr.TypeOfUser = GlobalUserr.TypeOfUser;
      USr.CanUseOS = GlobalUserr.CanUseOS;
      USr.Magic = GlobalUserr.Magic;
      USr.Newf = GlobalUserr.Newf;
      USr.RegistrationNumber = GlobalUserr.RegistrationNumber;
      USr.StartLevel = GlobalUserr.StartLevel;
      GetCurrentCompanyCode(compcode);
      rwcnt = MatRowCnt(GlobalUserr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(GlobalUserr,i,GlobalUserrw);
        if (GlobalUserrw.CompCode==compcode) then begin
          USr.StartLevel = GlobalUserrw.StartLevel;
          USr.AccessGroup = GlobalUserrw.AccessGroup;
          i = rwcnt;
        end;
      end;
    end else begin
      res = ReadFirstMain(USr,1,true);
    end;
  end else begin
    res = ReadFirstMain(USr,1,true);
  end;
  if (res==false) then begin USr.Name = ""; end;
  FindTheUser = res;
  return;
end;

global
procedure GetCurUser(var record UserVc USr)
begin
  DoGetCurUser(USr);
//  USr.Code = CurrentUser;
//  if (FindTheUser(USr)) then begin
//  end;
  return;
end;

function string 255 GetCompEmailAddress(string code)
begin
  string 255 res,tstr;
  longint pos;
  record UserVc Userr;
  
  Userr.Code = code;
  if (ReadFirstMain(Userr,1,true)) then begin
    tstr = Userr.emailAddr;
    GetNextSubstring(tstr,pos,",",res);
  end;

  GetCompEmailAddress = res;
  return;
end;

global
procedure FindUserMailboxName(string usercode,var string mailboxcode,var string tstr)
BEGIN
  record ConfVc Confr;
  string 255 extaddr;

  tstr = "";
  mailboxcode = "";
  if (blank(usercode)) then begin goto LFindUserMailboxName; end;
  Confr.AddrCode = usercode;
  if (ReadFirstKey("AddrCode",Confr,1,true)) then begin
    tstr = Confr.AddrName;
    extaddr = GetCompEmailAddress(usercode);
    if (nonblank(extaddr)) then begin
      tstr = tstr & " <" & extaddr & ">";
    end;
    mailboxcode = Confr.SerNr;
  end;
LFindUserMailboxName:;
  RETURN;
END;

global
function Boolean CurUserHasMailbox(var string mailboxnr)
BEGIN
  Boolean res;
  string 255 tstr;
  
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (nonblank(mailboxnr)) then begin
    res = true;
  end;
  CurUserHasMailbox = res;
  RETURN;
END;

global
procedure GetUserEmail(string person,var string res)
BEGIN
  record UserVc USr;
  
  res = "";
  USr.Code = person;
  if (FindTheUser(USr)) then begin
    res = USr.emailAddr;
  end;
  RETURN;
END;

global
procedure GetUserIDCode(string person,var string res)
BEGIN
  record UserVc USr;
  
  res = "";
  USr.Code = person;
  if (ReadFirstMain(USr,1,true)) then begin
    res = USr.IDCode;
  end;
  RETURN;
END;

global
procedure GetUserAccessGroup(string person,var string res)
BEGIN
  record UserVc USr;
  
  res = "";
  USr.Code = person;
  if (ReadFirstMain(USr,1,true)) then begin
    res = USr.AccessGroup;
  end;
  RETURN;
END;

global
function Boolean FindCustomerRelation2(string cucode,string contactcode,string contactname,var record CUVc ContactCUr)
begin
  record ContactRelVc CRr;
  Boolean res;
  Integer segs;

  RecordNew(ContactCUr);
  segs = 2;
  CRr.CustCode = cucode;
  CRr.ContactName = contactname;
  if (nonblank(contactcode)) then begin
    CRr.ContactCode = contactcode;
    segs = 3;
  end;
  if (ReadFirstKey("CompKey",CRr,segs,true)) then begin
    ContactCUr.Code = CRr.ContactCode;
    if (ReadFirstMain(ContactCUr,1,true)) then begin
      res = true;
    end;
  end;
  FindCustomerRelation2 = res;
  return;
end;

global
function Boolean FindCustomerRelation(string cucode,string contact,var record CUVc ContactCUr)
begin
  FindCustomerRelation = FindCustomerRelation2(cucode,"",contact,ContactCUr);
  return;
end;

global
procedure ContactPhone(string contact,string cucode,var string res)
BEGIN
  record CUVc CUr;
  
  res = "";
  if (FindCustomerRelation(cucode,contact,CUr)) then begin
    res = CUr.Phone;
  end else begin
    CUr.Code = cucode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.Person==contact) then begin
        res = CUr.Phone;
      end;
    end;
  end;
  RETURN;
END;

global
procedure GetCustName(String i,var String ret)
begin
  record CUVc Clnt;
  Clnt.Code = i;
  ret = "";
  if ReadFirstMain(Clnt,1,true) then begin
      ret = Clnt.Name;
  end;
  return;
end;

global
procedure GetCustCat(string custcode,var string res)
Begin
  record CUVc CUr;
  
  res = "";
  CUr.Code = custcode;
  if ReadFirstMain(CUr,1,true) then begin
    res = CUr.CustCat;
  end;
  Return;
End;

global
procedure GetCountry(string code,var string res)
BEGIN
  record CountryVc Cr;
  
  res = "";
  Cr.Code = code;
  if (ReadFirstMain(Cr,1,true)) then begin
    res = Cr.Comment;
  end;
  RETURN;
END;

global
procedure GetUserName(String i,var String ret)
Begin
  record UserVc Pers;
  
  Pers.Code = i;
  ret = "";
  if (FindTheUser(Pers)) then begin
    ret = Pers.Name;
  end;
  Return;
End;

global
procedure GetUserObject(string person,var string res)
BEGIN
  record UserVc USr;
  
  res = "";
  USr.Code = person;
  if (ReadFirstMain(USr,1,true)) then begin
    res = USr.PersObjx;
  end;
  RETURN;
END;

global
procedure SetupCustPS2Rn(string custcode,var record RcVc RepSpec)
begin
  record CustPSVc CuPSr;
  record CUVc CUr;
  record ContactRelVc ContactRelr;

  CUr.Code = custcode;
  ReadFirstMain(CUr,1,true);
  
  RepSpec.flags[29] = 1;
  RepSpec.repname = "CustPSRn";
  ReportDefaults(RepSpec,"CustPSRClass");
  RepSpec.UsedOnly = 0;
  RepSpec.Media = mtScreen;
  if (CUr.CUType==0) then begin
    ContactRelr.ContactCode = CUr.Code;
    ReadFirstKey("ContactCode",ContactRelr,1,true);
    RepSpec.f1 = ContactRelr.CustCode;
  end else begin
    RepSpec.f1 = custcode;
  end;
  RepSpec.f6 = CurrentUser;
  CuPSr.Signature = RepSpec.f6;
  if (ReadFirstMain(CuPSr,1,true)) then begin
    RepSpec.repname = "CustPS2Rn";
  end;
  return;
end;

global
function Integer ShouldCreateHTMLMail(Integer default)
begin
  Integer res;
  
  res = default;
  
  //SystemSupportsHTMLMail()==false or 
  if (LiveSyncMail and SingleUserMode) then begin
    res = 0;
  end;
  
  ShouldCreateHTMLMail = res;
end;

global
function boolean SalesGroupExistWithinUsersList(string SalesGroups,string SalesPersons)
begin
  boolean res,testf;
  longint i,pos,charpos;
  string 255 salespersonstr;
  record UserVc USr;
  
  testf = true;
  if (blank(SalesGroups)) then begin 
    testf = false;
  end; 
  if (testf) then begin 
    charpos = 0;
    pos = 0;
    while (GetNextSubstring(SalesPersons,charpos,",",salespersonstr)) begin
      if (nonblank(salespersonstr)) then begin
        USr.Code = salespersonstr;
        if (FindTheUser(USr)) then begin 
          if (nonblank(USr.SalesGroup)) then begin 
            if (SetInSet(USr.SalesGroup,SalesGroups)) then begin 
              res = true;
              goto LSGEWUL;
            end;            
          end; 
        end;
      end;
      pos = pos + 1;
    end;
  end; 

LSGEWUL:;  
  SalesGroupExistWithinUsersList = res;
end;