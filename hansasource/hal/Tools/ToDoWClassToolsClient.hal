remote procedure UpdateDueTasksRemote();
external procedure FillToDo(var record RcVc,var Area);
external procedure ActsInDay(string,Date,LongInt,
                             var Area,var Area,var Area,var Area,var Area,var Area,
                             Boolean,Boolean,LongInt,LongInt,LongInt,Integer);
remote function LongInt OverdueTasks();

global
procedure FillToDoClient(var record RcVc RepSpec,var Area thp)
begin
  threadremote.FillToDo(RepSpec,thp);
  return;
end;

global
procedure RecurringFillToDoClient()
begin
  record RcVc RepSpec;
  
  DeselectWindow(CurWindow,false);
  GetWindowRecord(CurWindow,RepSpec);
  RepSpec.flags[3] = kTodoFlagRecurring;
  PutWindowRecord(CurWindow,RepSpec);
  ReRunWindowDef(CurWindow);
  PutWindowRecord(CurWindow,RepSpec);
  UpdateBrowses("ToDoWClass");
  return;
end;

global
procedure NotRecurringFillToDoClient()
begin
  record RcVc RepSpec;

  DeselectWindow(CurWindow,false);
  GetWindowRecord(CurWindow,RepSpec);
  RepSpec.flags[3] = 0;
  PutWindowRecord(CurWindow,RepSpec);
  ReRunWindowDef(CurWindow);
  PutWindowRecord(CurWindow,RepSpec);
  UpdateBrowses("ToDoWClass");
  return;
end;

global
procedure ActsInDayClient(string uscode,Date dp,LongInt maxdays,
                    var Area adhp,var Area thp,var Area ppadhp,var Area ddhp,var Area ttdhp,var Area banhp,
                    Boolean banf,Boolean textf,LongInt aptp,LongInt atp,LongInt maxuser,Integer calsystem)
begin
  threadremote.ActsInDay(uscode,dp,maxdays,adhp,thp,ppadhp,ddhp,ttdhp,banhp,banf,textf,aptp,atp,maxuser,calsystem);
  return;
end;

global
procedure ToDoWFilterTool()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  
  nwn = OpenWindow("ToDoFiltersWClass",0,wn,"","",RepSpec);
  
  return;
end;

global
updating function boolean ToDoFiltersWClassOnOKWindow(integer wn)
begin
  boolean res;
  record RcVc RepSpec;
  integer mwn;
  
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  PutWindowRecord(mwn,RepSpec);
  FillTaskManager(mwn);
  // SetUpdate(wn);
  // SetRs(wn,Rs_normal); //otherwise can't print
  
  CloseWindow(wn);
  res = true;
  
  ToDoFiltersWClassOnOKWindow = res;
  return;
end;

global
procedure UpdateDueTasksCallback(LongInt duecnt,LongInt overduecnt)
begin
  SetDueTaskCnt(duecnt);
  SetOverdueTaskCnt(overduecnt);
  UpdateBrowses("MasterWClass");
end;

global
procedure OpenToDoShowingOverdue()
begin
  record RcVc RepSpec;
  date fromdate;
  date todate;
  
  if (GuiType==kGuiAndroid) then begin
    goto LOpenToDoShowingOverdue;
  end;
  if (UserModuleAccess("modTASK")==kAccessLevelNone) then begin
    goto LOpenToDoShowingOverdue;
  end;
  
  RepSpec.f1 = CurrentUser;
  RepSpec.f3 = "";
  RepSpec.f4 = "";
  
  fromdate.year = 1900;
  fromdate.month = 1;
  fromdate.day = 1;
  
//  todate = AddDay(CurrentDate,-1);//why skipping todays tasks ? 
  todate = AddDay(CurrentDate,0);
  
  RepSpec.sStartDate = fromdate;
  RepSpec.sEndDate = todate;
  RepSpec.Period2Str = fromdate & ":" & todate;
  
  if (GUIType!=kGuiWindowsMobile) then begin
    OpenWindow("ToDoWClass",0,0,"","",RepSpec);
  end;
LOpenToDoShowingOverdue:;
end;

global
procedure UpdateDueTasks()
begin
  //threadremoteasync
  asyncremote.UpdateDueTasksRemote;
end;
