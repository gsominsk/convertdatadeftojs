external function Boolean HasModSO();
external function Boolean IsEnterprise();
external function Boolean HasMultiCurrency();
remote function string 255 CurDrawerCode(string);
external function Boolean ProperVATPeriod(record RcVc);
external function string 40 SerialNrSClassSpecPName(string);
external procedure In2Period(var string,var Date,var Date);
external procedure GetCurUser(var record UserVc);
external procedure FindRepDefHeader(string,string,var string);

global 
procedure RentRevenueRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  date sdate;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RentRevenueRClass");  
  sdate = AddMonth(CurrentDate,-GetMonth(CurrentDate)+1);
  sdate = AddDay(sdate,-GetDay(sdate) + (DaysInMonth(GetYear(CurrentDate),GetMonth(CurrentDate))));
  RepSpec.d1 = sdate;
  RepSpec.f1 = USr.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global 
procedure RentResAvailRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc Userr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RentResAvailRClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    RepSpec.f4 = Userr.Location;
  end;
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure IPRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IPRClass");  
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 1;
  if (HasLocalization("POL")) and (Left(BuildProductCode,23)=="StandardBookkeepingLite") then begin
    RepSpec.flags[16] = 2;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ARSRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ARSRClass");  
  RepSpec.flags[0] = 0;
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 1;
  RepSpec.flags[16] = 1;
  if (HasLocalization("ISL")) then begin
    RepSpec.flags[0] = 0;
    RepSpec.flags[2] = 0;
    RepSpec.flags[3] = 1;
  end;
  if (HasLocalization("POL")) then begin
    RepSpec.flags[2] = 0;
  end;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure DebtLetRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"DebtLetRClass");  
  RepSpec.flags[0] = 0;
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[16] = 1;
  if (HasLocalization("ISL")) then begin
    RepSpec.flags[0] = 0;
    RepSpec.flags[2] = 0;
    RepSpec.flags[3] = 1;
  end;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ARSEmailVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ARSEmailVClass");  
  RepSpec.flags[0] = 0;
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 1;
  RepSpec.flags[16] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure APSRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"APSRClass");  
  RepSpec.flags[16] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  Return;
end;

global
procedure ARS2RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ARS2RClass");  
  RepSpec.flags[0] = 0;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 0;
  RepSpec.flags[4] = 0;
  RepSpec.flags[9] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure Bud1VClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"Bud1VClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure Bud2VClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"Bud2VClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure IBVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IBVClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
function Boolean UserHasLimitedAccess(var string person,var string salesgroup)
BEGIN
  Boolean res;
  record UserVc Userr;
  
  person = "";
  salesgroup = "";
  res = false;
  Userr.Code = CurrentUser;
  if (DoGetCurUser(Userr)) then begin
    switch (Userr.limitedAccess) begin
      case kLimitedAccessUserOnly:
        person = Userr.Code;
        res = true; 
      case kLimitedAccessGroupOnly:
        salesgroup = Userr.SalesGroup;
        if (blank(salesgroup)) then begin
          person = Userr.Code;
        end;
        res = true; 
    end;    
  end;
  UserHasLimitedAccess = res;
  RETURN;
END;

global
procedure KeyEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"KeyEClass");  
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure POOrdStockRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"POOrdStockRClass");  
  RepSpec.flags[0] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[10] = 0;
  RepSpec.f7 = StringFromSet(433,kOrderTypeNormal);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure OrderStockRClassRD(var record RcVc RepSpec)
BEGIN
  RepSpec.flags[0] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[10] = 0;
  RepSpec.flags[7] = 1;
  RepSpec.flags[17] = 1;
  RepSpec.flags[18] = 1;
  RepSpec.Comparison = 1;
  RepSpec.OnlyUnprntd = 1;
  RepSpec.f7 = StringFromSet(433,kOrderTypeNormal);
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.f8)) then begin
  end;
  return;
end;

global
procedure OrderStockRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"OrderStockRClass");  
  OrderStockRClassRD(RepSpec);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure IntORStockRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
    
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IntORStockRClass");  
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  if (UserHasLimitedAccess(RepSpec.TransStr,RepSpec.ObjStr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ORJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ORJRClass");  
  RepSpec.flags[0] = 1;
  if (IsStandardProduct or IsSberbankProduct) then begin
    RepSpec.flags[1] = 1;
  end;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[12] = 0;
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.f3)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SHJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SHJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PUJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PUJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PUListRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PUListRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure InvRowEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"InvRowEClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure IVGPRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IVGPRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.f5)) then begin
  end;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SalesBRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SalesBRClass");  
  RepSpec.vals1 = 20;
  RepSpec.vals2 = 10;
  RepSpec.vals3 = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PurchBRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PurchBRClass");  
  RepSpec.vals1 = 20;
  RepSpec.vals2 = 10;
  RepSpec.vals3 = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure OPJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"OPJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PPRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PPRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure CuPer2RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record CYBlock CYRec;
  
  BlockLoad(CYRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CuPer2RClass");  
  RepSpec.ArtMode = 1;
  if (HasMultiCurrency) then begin 
    RepSpec.flags[2] = 1;
  end;
  RepSpec.flags[7] = CYRec.NegativeAmounts;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SendPerStatVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record CYBlock CYRec;
  record UserVc USr;
  
  GetCurUser(USr);
  BlockLoad(CYRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SendPerStatVClass");  
  RepSpec.ArtMode = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[7] = CYRec.NegativeAmounts;
  RepSpec.f2 = USr.emailAddr;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure VePerRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record CYBlock CYRec;
  
  BlockLoad(CYRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VePerRClass");  
  RepSpec.ArtMode = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = CYRec.NegativeAmounts;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure VePer2RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record CYBlock CYRec;
  
  BlockLoad(CYRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VePer2RClass");  
  RepSpec.ArtMode = 1;
  if (HasMultiCurrency) then begin
    RepSpec.flags[2] = 1;
  end;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = CYRec.NegativeAmounts;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure VEPerEmailVClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record CYBlock CYRec;
  
  BlockLoad(CYRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VEPerEmailVClass");  
  RepSpec.ArtMode = 1;
  if (HasMultiCurrency) then begin
    RepSpec.flags[2] = 1;
  end;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = CYRec.NegativeAmounts;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PersPerRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PersPerRClass");  
  RepSpec.flags[1] = 1;
  if (ProgramType!=typStdExpenses) then begin
    RepSpec.flags[2] = 0;
  end else begin
    RepSpec.flags[2] = 1;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ProStatRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ProStatRClass");  
  RepSpec.d1 = RepSpec.sStartDate; 
  RepSpec.d2 = RepSpec.sEndDate; 
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[11] = 3;
  RepSpec.flags[19] = 1;
  RepSpec.flags[20] = 0;
  if (UserHasLimitedAccess(RepSpec.f2,tstr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ProInvRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ProInvRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.d1 = CurrentDate;
  if (UserHasLimitedAccess(RepSpec.f2,tstr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure GPProRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"GPProRClass");  
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.flags[19] = 1;
  RepSpec.flags[20] = 0;
  if (UserHasLimitedAccess(RepSpec.f2,tstr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PRActBudRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PRActBudRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,tstr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure GTrans2EClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"GTrans2EClass");  
  RepSpec.UsedOnly = 1;
  RepSpec.OKmode = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SORStockRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SORStockRClass");  
  RepSpec.flags[2] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[10] = 2;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ActDocRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ActDocRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure LetInfoRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LetInfoRClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure StockJOutRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"StockJOutRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  if (HasModSO) then begin
    RepSpec.flags[4] = 1;
  end;
  RepSpec.flags[5] = 1;
  if (IsEnterprise) then begin
    RepSpec.flags[6] = 1;
    RepSpec.flags[7] = 1;
    RepSpec.flags[9] = 1;
    RepSpec.flags[11] = 1;
    RepSpec.flags[12] = 1;
    RepSpec.flags[13] = 1;
    RepSpec.flags[14] = 1;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure StockJInRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"StockJInRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  if (IsEnterprise) then begin
    RepSpec.flags[4] = 1;
    RepSpec.flags[5] = 1;
    RepSpec.flags[7] = 1;
    RepSpec.flags[8] = 1;
  end;
  RepSpec.flags[11] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SDJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SDJRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure VeInRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  record VarietyBlock Varb;
  
  BlockLoad(Varb);    
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VeInRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[5] = Varb.AutoVarietyDef;
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.Stext)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure WOrdRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"WOrdRClass");  
  RepSpec.OnlyUnprntd = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTPipelineRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record PlanDeliveryBlock PlanDelRec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTPipelineRClass");  
  if (UserHasLimitedAccess(RepSpec.f2,RepSpec.ObjStr)) then begin
  end;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record PlanDeliveryBlock PDb;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTJRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.ObjStr)) then begin
  end;
  BlockLoad(PDb);
  if (PDb.FieldType==1) then begin
    RepSpec.Stext = RepSpec.Period2Str;
  end;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTStatusRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTStatusRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTStkRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTStkRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.ObjStr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTStatRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;  
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTStatRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.ObjStr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ORGPRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ORGPRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.f5)) then begin
  end;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure InvableRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"InvableRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,RepSpec.f4)) then begin
  end;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ChanceRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ChanceRClass");  
  if (UserHasLimitedAccess(RepSpec.AccStr,tstr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ConsResRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record ConsolidationBlock cr;
  string 255 tstr;
  
  BlockLoad(cr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ConsResRClass");  
  RepSpec.basecurncy = cr.ConsCrncy;
  RepSpec.flags[1] = 1;
  RepSpec.basecurncy = cr.ConsCrncy;
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.IncDaughter = 1;
  RepSpec.Stext = RepSpec.Period2Str;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ConsBalRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ConsBalRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.IncDaughter = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SB2RClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record ConsolidationBlock Consb;
  
  BlockLoad(Consb);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SB2RClass");  
  RepSpec.IncDaughter = 1;
  RepSpec.flags[10] = Consb.ReportingExchangeRates;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure RiigiRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RiigiRClass");  
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure RiigiEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RiigiEClass");  
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure TransListRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TransListRClass");  
  RepSpec.flags[10] = 2;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.flags[13] = 1;
  RepSpec.flags[14] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure GroupInvoiceVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"GroupInvoiceVClass");  
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure BarGenNLVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BarGenNLVClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  RepSpec.f2 = USetStr(1923);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure IntraStaRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IntraStaRClass");  
  RepSpec.LastAcc = USr.Name;
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SLEUVAT2RClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLEUVAT2RClass");  
  RepSpec.flags[2] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure IntraStaPuRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"IntraStaPuRClass");  
  RepSpec.LastAcc = USr.Name;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure UpdateCustAccVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"UpdateCustAccVClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sStartTime = CurrentTime;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure RandomORVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RandomORVClass");  
  RepSpec.sEndDate = RepSpec.sStartDate;
  RepSpec.long2 = 10000;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SysMessVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SysMessVClass");  
  RepSpec.f1 = USetStr(1380);
  RepSpec.f2 = USr.Name;
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PlanRecordsVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PlanRecordsVClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PlanSalesVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PlanSalesVClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  td = RepSpec.sEndDate;
  if (td<CurrentDate) then begin
    td = AddYear(td,1);
  end;
  RepSpec.Period2Str = RepSpec.Period2Str & td;
  In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure CUIntVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record IIBlock IIRec;
  
  BlockLoad(IIRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CUIntVClass");  
  RepSpec.d2 = CurrentDate;
  RepSpec.d2 = AddDay(RepSpec.d2,-GetDay(RepSpec.d2)+1);
  RepSpec.d2 = AddDay(RepSpec.d2,1);
  RepSpec.d2 = AddDay(RepSpec.d2,-2);
  RepSpec.d1 = RepSpec.d2;
  RepSpec.d1 = AddDay(RepSpec.d1,-GetDay(RepSpec.d1)+1);
  RepSpec.ArtMode = 1;  
  RepSpec.flags[1] = 1;
  RepSpec.FirstAcc = "";
  RepSpec.LastAcc = IIRec.IntRate;
  if (HasLocalization("ISL")) then begin
    RepSpec.ArtMode = 2;
  end;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure CUIntRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record IIBlock IIRec;
  
  BlockLoad(IIRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CUIntRClass");  
  RepSpec.d2 = CurrentDate;
  RepSpec.d2 = AddDay(RepSpec.d2,-GetDay(RepSpec.d2)+1);
  RepSpec.d2 = AddDay(RepSpec.d2,1);
  RepSpec.d2 = AddDay(RepSpec.d2,-2);
  RepSpec.d1 = RepSpec.d2;
  RepSpec.d1 = AddDay(RepSpec.d1,-GetDay(RepSpec.d1)+1);
  RepSpec.ArtMode = 1;  
  RepSpec.flags[1] = 1;
  RepSpec.LastAcc = IIRec.IntRate;
  if (HasLocalization("ISL")) then begin
    RepSpec.ArtMode = 2;
  end;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure KeyDRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"KeyDRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.AccSpec = 2;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

procedure KeyConsDRClassRepDef(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"KeyConsDRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.IncDaughter = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure KeyConsDRClassReportDefaults(Integer wn)
BEGIN
  KeyConsDRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"KeyRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.AccSpec = 2;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

procedure KeyConsRClassRepDef(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"KeyConsRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.IncDaughter = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure KeyConsRClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons1RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons2RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons3RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons4RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons5RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons6RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons7RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons8RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons9RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons10RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons11RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons12RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons13RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons14RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure KeyCons15RClassReportDefaults(Integer wn)
BEGIN
  KeyConsRClassRepDef(wn);
  RETURN;
END;

global
procedure BalRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BalRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.AccSpec = 1;
  if (HasLocalization("HRV")) then begin
    RepSpec.flags[20] = 1;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

procedure DoResRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ResRClass");  
  FindRepDefHeader(RepSpec.repname,RepSpec.shortname,tstr);
  RepSpec.f1 = tstr;
  RepSpec.flags[1] = 1;
  RepSpec.Stext = RepSpec.Period2Str;
  RepSpec.AccSpec = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ResRClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res1RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res2RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res3RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res4RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res5RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res6RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res7RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res8RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res9RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res10RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res11RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res12RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res13RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res14RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure Res15RClassReportDefaults(Integer wn)
begin
  DoResRClassReportDefaults(wn);
  return;
end;

global
procedure DayBalRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LocalMachineRec;
  
  BlockLoad(LocalMachineRec);    
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"DayBalRClass");  
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
  In2Period(RepSpec.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);
  RepSpec.AccStr = CurrentUser;
  RepSpec.FirstAcc = LocalMachineRec.LocalMachineCode;
  if (ProgramType==typHansaRaama) then begin
    RepSpec.flags[18] = 1;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure DayBalVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date sStartDate,sEndDate;
  record LocalMachineBlock LocalMachineRec;
  
  BlockLoad(LocalMachineRec);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"DayBalVClass");  
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
  In2Period(RepSpec.Period2Str,sStartDate,sEndDate);
  RepSpec.sStartDate = sStartDate;
  RepSpec.sEndDate = sEndDate;
  RepSpec.AccStr = CurrentUser;
  RepSpec.FirstAcc = LocalMachineRec.LocalMachineCode;
  if (ProgramType==typHansaRaama) then begin
    RepSpec.flags[18] = 1;
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SMFromORVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SMFromORVClass");  
  RepSpec.d1 = CurrentDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure CreateSHsFSOsVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CreateSHsFSOsVClass");  
  RepSpec.d1 = CurrentDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure AssignToForkLiftVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record NT7000PickModeBlock NT7000Pick;
  
  BlockLoad(NT7000Pick);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"AssignToForkLiftVClass");  
  RepSpec.f1 = NT7000Pick.ForkLift;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure AcConsRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"AcConsRClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ArtRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ArtRClass");  
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure TransfJourRClassReportDefaults(Integer wn)
Begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TransfJourRClass");
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
  PutWindowRecord(wn,RepSpec);
  return;
end;

global
procedure CheckInRClassReportDefaults(Integer wn) 
Begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CheckInRClass");
  RepSpec.f3 = LMb.ResLoc;
  RepSpec.f6 = LMb.ResClass;
//  RepSpec.flags[1] = 1;
//  RepSpec.flags[5] = 1;
  RepSpec.d1 = CurrentDate;
  PutWindowRecord(wn,RepSpec);
  return;
end;

global
procedure CheckOutRClassReportDefaults(Integer wn) 
Begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CheckOutRClass");
  RepSpec.f3 = LMb.ResLoc;
  RepSpec.f6 = LMb.ResClass;
//  RepSpec.flags[1] = 1;
//  RepSpec.flags[5] = 1;
  RepSpec.d1 = CurrentDate;
  PutWindowRecord(wn,RepSpec);
  return;
end;


global
procedure TodayResAvailRClassReportDefaults(Integer wn) 
Begin
  record RcVc RepSpec;
  Record HotelBlock HotelBlockr;  
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  BlockLoad(HotelBlockr);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TodayResAvailRClass");
  RepSpec.f4 = LMb.ResLoc;
  RepSpec.f3 = LMb.ResClass;
  PutWindowRecord(wn,RepSpec); 
  return;
end; 

global
procedure TodayRoomAvailRClassReportDefaults(Integer wn) 
Begin
  record RcVc RepSpec;
  Record HotelBlock HotelBlockr;  
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  BlockLoad(HotelBlockr);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TodayRoomAvailRClass");
  RepSpec.f4 = LMb.ResLoc;
  RepSpec.f3 = LMb.ResClass;
  PutWindowRecord(wn,RepSpec); 
  return;
end; 

global
procedure InHouseRClassReportDefaults(Integer wn) 
Begin
  record RcVc RepSpec;
  Record HotelBlock HotelBlockr;  
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  BlockLoad(HotelBlockr);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"InHouseRClass");
  RepSpec.f2 = LMb.ResLoc;
  RepSpec.f1 = LMb.ResClass;
  if (IsEnterprise) then begin 
    RepSpec.flags[4] = 1;
  end else begin
    RepSpec.UsedOnly = 0;   
  end;
//  RepSpec.flags[6] = 1;
//  RepSpec.flags[5] = 1;
//  RepSpec.flags[1] = 1;
  RepSpec.d1         = CurrentDate;
  RepSpec.sStartTime = CurrentTime;
  PutWindowRecord(wn,RepSpec); 
  return;
end; 

global
procedure EventJourRClassReportDefaults(Integer wn)
Begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"EventJourRClass");
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
  PutWindowRecord(wn,RepSpec);
  return;
end;


global
procedure TotJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TotJRClass");  
  RepSpec.ArtMode = 1;
  RepSpec.flags[1] = 0;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.flags[13] = 1;
  RepSpec.flags[14] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure FEIVJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"FEIVRClass");  
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure FEVIJRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"FEVIJRClass");  
  RepSpec.flags[2] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure FEIVBookEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"FEIVBookEClass");  
  RepSpec.flags[2] = 1;
//  RepSpec.FirstAcc = "1";
//  RepSpec.LastAcc = "2";
//  RepSpec.AccStr = "3";
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SLVATRepRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATRepRClass");  
  RepSpec.ArtMode = 0;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  if (IsEnterprise==false) then begin
    if (HasLocalization("POL")) then begin
      RepSpec.flags[6] = 2;
    end;
  end;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 0;
  RepSpec.flags[9] = 0;
  RepSpec.flags[10] = 1;
  if (HasLocalization("ITA")) then begin
    RepSpec.flags[12] = 1;
  end;
  RepSpec.flags[15] = 1;
  RepSpec.flags[17] = 1;
  td = CurrentDate;
  td.day = 1;
  td = AddMonth(td,-1);
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SLVATSerRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATSerRClass");  
  RepSpec.ArtMode = 0;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[9] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PLVATSerRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATSerRClass");  
  RepSpec.ArtMode = 0;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[9] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SLVATHunRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATHunRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure PLVATRepRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATRepRClass");  
  td = CurrentDate;
  td.day = 1;
  td = AddMonth(td,-1);
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  if (IsEnterprise==false) then begin
    if (HasLocalization("POL")) then begin
      RepSpec.flags[6] = 2;
    end;
  end;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 0;
  RepSpec.flags[9] = 0;
  RepSpec.flags[10] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PLVATITARClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATITARClass");  
  td = CurrentDate;
  td.day = 1;
  td = AddMonth(td,-1);
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.ArtMode = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[9] = 1;
  RepSpec.flags[12] = 1;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure SLVATITARClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATITARClass");  
  td = CurrentDate;
  td.day = 1;
  td = AddMonth(td,-1);
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.ArtMode = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[9] = 1;
  RepSpec.flags[12] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure ArgPurchVATRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ArgPurchVATRClass");  
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure SLVATCURClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATCURClass");  
  RepSpec.ArtMode = 0;
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 0;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
function Boolean SLVATRepRClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  
  res = false;
/*  
  switch (fieldname) begin
    case "Period2Str":
    GetWindowRecord(wn,RepSpec);
    if (ProperVATPeriod(RepSpec)==false) then begin
      MessageBox(10693,"");
    end;
  end;
*/  
  SLVATRepRClassAfterEditField = res;
  RETURN;
END;

global
function Boolean PLVATRepRClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  
  res = false;
/*  
  switch (fieldname) begin
    case "Period2Str":
    GetWindowRecord(wn,RepSpec);
    if (ProperVATPeriod(RepSpec)==false) then begin
      MessageBox(10693,"");
    end;
  end;
*/  
  PLVATRepRClassAfterEditField = res;
  RETURN;
END;

global
procedure BarCashupRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"BarCashupRClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure RestBookingRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RestBookingRClass");  
  RepSpec.UsedOnly = 0;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure RestPlanningRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RestPlanningRClass");  
  RepSpec.UsedOnly = 0;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
function string 40 SerialNrRClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  SerialNrRClassSpecPasteName = psname;
  return;
end;

global
procedure ObsPerTypeRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ObsPerTypeRClass");  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;  
  RepSpec.flags[1] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

procedure CashupRClassReportDefaultsDo(var record RcVc RepSpec)
begin
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);  
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = CurrentDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.f1 = LMb.LocalMachineCode;
  RepSpec.f4 = CurDrawerCode(LMb.LocalMachineCode);
  return;
end;

global
procedure CashupRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CashupRClass");  
  CashupRClassReportDefaultsDo(RepSpec);
  RepSpec.flags[29] = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CleanCashCashupRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CleanCashCashupRClass");  
  CashupRClassReportDefaultsDo(RepSpec);
  RepSpec.flags[29] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CashupVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record LocalMachineBlock LocalMachineRec;
  
  BlockLoad(LocalMachineRec);  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.d1 = CurrentDate;
  RepSpec.sStartTime = CurrentTime;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.f1 = LocalMachineRec.LocalMachineCode;
  RepSpec.f4 = CurDrawerCode(LocalMachineRec.LocalMachineCode);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure TransGenRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"TransGenRClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure StdTransGenRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"StdTransGenRClass");  
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.ArtMode = 0;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CollectionStatusRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CollectionStatusRClass");  
  RepSpec.f1 = USr.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure CurRentResRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CurRentResRClass");  
  RepSpec.f5 = USr.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure ItemAtSiteRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"ItemAtSiteRClass");  
  RepSpec.f5 = USr.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure MissedRentOppRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MissedRentOppRClass");  
  RepSpec.vals0 = 90;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure CRentResTransRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"CRentResTransRClass");  
  RepSpec.f1 = USr.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure RentResHistRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"RentResHistRClass");  
  RepSpec.f5 = USr.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure InspectionStatusRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"InspectionStatusRClass");  
  RepSpec.f1 = USr.Code;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure UncOffHireRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"UncOffHireRClass");  
  RepSpec.f5 = USr.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTHistoryRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTHistoryRClass");  
  RepSpec.f2 = USr.Code;
  RepSpec.ObjStr = USr.SalesGroup;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTAccRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTAccRClass");  
  if (UserHasLimitedAccess(RepSpec.f2,RepSpec.ObjStr)) then begin
  end;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTForeCRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTForeCRClass");  
  if (UserHasLimitedAccess(RepSpec.f2,RepSpec.ObjStr)) then begin
  end;  
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure QTSMStatsRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record UserVc USr;
  
  GetCurUser(USr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"QTSMStatsRClass");  
  RepSpec.f2 = USr.Code;
  RepSpec.ObjStr = USr.SalesGroup;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure MoveEmptyPalletsVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record MainWHMBlock MainWHM;

  BlockLoad(MainWHM);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MoveEmptyPalletsVClass");  
  RepSpec.f2 = MainWHM.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure MoveToPickAreaVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record MainWHMBlock MainWHM;

  BlockLoad(MainWHM);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MoveToPickAreaVClass");  
  RepSpec.f3 = MainWHM.Location;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PositionHistRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PositionHistRClass");  
  RepSpec.flags[0] = 1;
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PositionsForSHRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PositionsForSHRClass");  
  RepSpec.flags[1] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure LitIntrastatIVEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LitIntrastatIVEClass");  
  RepSpec.d1 = CurrentDate;

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure LitIntrastatVIEClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LitIntrastatVIEClass");  
  RepSpec.d1 = CurrentDate;
  RepSpec.f3 = "O";

  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global 
procedure LitVATPurchRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"LitVATPurchRClass");  
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global 
procedure SLVATLitRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SLVATLitRClass");  
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  
  RETURN;
END;

global 
procedure PLVATLitRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATLitRClass");  
  RepSpec.flags[5] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[7] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global 
procedure AcceptTodoRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"AcceptanceRClass");  
  RepSpec.AccStr = CurrentUser;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure MonthSalesRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MonthSalesRClass");  
  td = CurrentDate;
  td.day = 1;
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure MonthSalesResRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MonthSalesResRClass");  
  td = CurrentDate;
  td.day = 1;
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure MonthConsultResRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  Date td;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"MonthConsultResRClass");  
  td = CurrentDate;
  td.day = 1;
  RepSpec.sStartDate = td;
  td.day = DaysInMonth(td.year,td.month);
  RepSpec.sEndDate = td;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure PLVATHunRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PLVATHunRClass");  
  RepSpec.AccSpec = 0;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[7] = 1;
  RepSpec.flags[8] = 1;
  RepSpec.flags[9] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure VIFromPOVClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"VIFromPOVClass");  
  RepSpec.flags[0] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure HTSStatRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HTSStatRClass");  
  RepSpec.flags[10] = 1;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
procedure INPosRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  record MainWHMBlock MainWHMr;
  
  BlockLoad(MainWHMr);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec, "INPosRClass");
  RepSpec.f3 = MainWHMr.Location;
  RepSpec.flags[0] = 4;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

global
function string 40 CloseCUVClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "f1":
      switch (RepSpec.flags[0]) begin
        case 0: psname = "CUSClass";
        case 1: psname = "VESClass";
      end;
    case "FirstAcc":
      switch (RepSpec.flags[0]) begin
        case 1: psname = "VGSClass";
        otherwise psname = "CCatSClass";
      end;
  end;
  CloseCUVClassSpecPasteName = psname;
  return;
end;

global
procedure PRRevRecRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"PRRevRecRClass");  
  RepSpec.flags[10] = 1;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.flags[19] = 1;
  RepSpec.flags[20] = 1;
  if (UserHasLimitedAccess(RepSpec.f2,tstr)) then begin
  end;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure HotelStatRClassReportDefaults(Integer wn)
begin
  record RcVc RepSpec;
  string 255 tstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"HotelStatRClass");  
  RepSpec.ArtMode = 1;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;
