external function Boolean HasContactClassification();
external function Boolean HasMultiCurrency();
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure ExtractObj(string,var Integer,var string);
external procedure M4PadString(string,Integer,string,Boolean,var string);

global
function Boolean CClassSClassOnOpenPaste(Integer wn,string find)
begin
  Boolean res;
  record ModuleBlock mtr; 
  
  BlockLoad(mtr);
  res = false;
  if (mtr.SalesSuppEnabler==0) and (mtr.VP1==0) then begin
    res = true;
  end;
  if (HasContactClassification) then begin
    res = false;
  end;
  CClassSClassOnOpenPaste = res;
  return;
end;

global
function Boolean CUClassSClassOnOpenPaste(Integer wn,string find)
begin
  Boolean res;
  record ModuleBlock mtr; 
  
  BlockLoad(mtr);
  res = false;
  if (mtr.SalesSuppEnabler==0) then begin
    res = true;
  end;
  CUClassSClassOnOpenPaste = res;
  return;
end;

global
function Boolean PosSClassOnOpenPaste(Integer wn,string find)
begin
  Boolean res;
  record ModuleBlock mtr; 
  
  BlockLoad(mtr);
  res = false;
  if (mtr.WHMEnabler==0) then begin
    res = true;
  end;
  PosSClassOnOpenPaste = res;
  return;
end;

global
procedure ModulesSClassArrayOnOpen(var Array string astr,var Integer acnt)
BEGIN
  astr[acnt] = USetStr(16201); acnt = acnt + 1;  
  astr[acnt] = USetStr(16202); acnt = acnt + 1;  
  astr[acnt] = USetStr(16203); acnt = acnt + 1;  
  astr[acnt] = USetStr(16204); acnt = acnt + 1;  
  astr[acnt] = USetStr(16205); acnt = acnt + 1;  
  astr[acnt] = USetStr(16206); acnt = acnt + 1;  
  astr[acnt] = USetStr(16207); acnt = acnt + 1;  
  astr[acnt] = USetStr(16208); acnt = acnt + 1;  
  astr[acnt] = USetStr(16209); acnt = acnt + 1;  
  astr[acnt] = USetStr(16210); acnt = acnt + 1;  
  astr[acnt] = USetStr(16211); acnt = acnt + 1;  
  astr[acnt] = USetStr(16212); acnt = acnt + 1;  
  astr[acnt] = USetStr(16213); acnt = acnt + 1;  
  astr[acnt] = USetStr(16214); acnt = acnt + 1;  
  astr[acnt] = USetStr(16215); acnt = acnt + 1;  
  astr[acnt] = USetStr(16216); acnt = acnt + 1;  
  astr[acnt] = USetStr(16217); acnt = acnt + 1;  
  astr[acnt] = USetStr(16218); acnt = acnt + 1;  
  astr[acnt] = USetStr(16219); acnt = acnt + 1;  
  astr[acnt] = USetStr(16220); acnt = acnt + 1;  
  astr[acnt] = USetStr(16221); acnt = acnt + 1;  
  astr[acnt] = USetStr(16222); acnt = acnt + 1;  
  astr[acnt] = USetStr(16223); acnt = acnt + 1;  
  astr[acnt] = USetStr(16224); acnt = acnt + 1;  
  astr[acnt] = USetStr(16225); acnt = acnt + 1;  
  astr[acnt] = USetStr(16226); acnt = acnt + 1;  
  astr[acnt] = USetStr(16227); acnt = acnt + 1;  
  astr[acnt] = USetStr(16228); acnt = acnt + 1;  
  astr[acnt] = USetStr(16229); acnt = acnt + 1;  
  astr[acnt] = USetStr(16230); acnt = acnt + 1;  
  astr[acnt] = USetStr(16231); acnt = acnt + 1;  
  astr[acnt] = USetStr(16232); acnt = acnt + 1;  
  astr[acnt] = USetStr(16233); acnt = acnt + 1;  
  astr[acnt] = USetStr(16234); acnt = acnt + 1;  
  astr[acnt] = USetStr(16235); acnt = acnt + 1;  
  astr[acnt] = USetStr(16236); acnt = acnt + 1;  
  astr[acnt] = USetStr(16237); acnt = acnt + 1;  
  astr[acnt] = USetStr(16238); acnt = acnt + 1;  
  astr[acnt] = USetStr(16239); acnt = acnt + 1;  
  astr[acnt] = USetStr(16240); acnt = acnt + 1;  
  astr[acnt] = USetStr(16241); acnt = acnt + 1;  
  astr[acnt] = USetStr(16242); acnt = acnt + 1;  
  astr[acnt] = USetStr(16243); acnt = acnt + 1;  
  astr[acnt] = USetStr(16244); acnt = acnt + 1;  
  astr[acnt] = USetStr(16245); acnt = acnt + 1;  
  astr[acnt] = USetStr(16246); acnt = acnt + 1;  
  astr[acnt] = USetStr(16247); acnt = acnt + 1;  
  astr[acnt] = USetStr(16248); acnt = acnt + 1;  
  astr[acnt] = USetStr(16249); acnt = acnt + 1;  
  astr[acnt] = USetStr(16250); acnt = acnt + 1;  
  astr[acnt] = USetStr(16251); acnt = acnt + 1;  
  astr[acnt] = USetStr(16252); acnt = acnt + 1;  
  astr[acnt] = USetStr(16253); acnt = acnt + 1;  
  astr[acnt] = USetStr(16254); acnt = acnt + 1;  
  astr[acnt] = USetStr(16255); acnt = acnt + 1;  
  astr[acnt] = USetStr(16256); acnt = acnt + 1;  
  astr[acnt] = USetStr(16257); acnt = acnt + 1;  
  astr[acnt] = USetStr(16258); acnt = acnt + 1;  
/*
  astr[acnt] = "modAT2";
  acnt = acnt + 1;
  astr[acnt] = "modCAL";
  acnt = acnt + 1;
  astr[acnt] = "modCL";
  acnt = acnt + 1;
  astr[acnt] = "modCheck";
  acnt = acnt + 1;
  astr[acnt] = "modCons";
  acnt = acnt + 1;
  astr[acnt] = "modCO";
  acnt = acnt + 1;
  astr[acnt] = "modCRM";
  acnt = acnt + 1;
  astr[acnt] = "modCustom";
  acnt = acnt + 1;
  astr[acnt] = "modDBMain";
  acnt = acnt + 1;  
  astr[acnt] = "modEDI";
  acnt = acnt + 1;  
  astr[acnt] = "modEmail";
  acnt = acnt + 1;
  astr[acnt] = "modExp";
  acnt = acnt + 1;
  astr[acnt] = "modHotel";
  acnt = acnt + 1;
  astr[acnt] = "modIntStock";
  acnt = acnt + 1;
  astr[acnt] = "modTS";
  acnt = acnt + 1;
  astr[acnt] = "modCuAcc";
  acnt = acnt + 1;
  astr[acnt] = "modNL";
  acnt = acnt + 1;
  astr[acnt] = "modDI";
  acnt = acnt + 1;
  astr[acnt] = "modPOS";
  acnt = acnt + 1;
  astr[acnt] = "modPOSOffLine";
  acnt = acnt + 1;
  astr[acnt] = "modProd";
  acnt = acnt + 1;
  astr[acnt] = "modPL";
  acnt = acnt + 1;
  astr[acnt] = "modPO";
  acnt = acnt + 1;
  astr[acnt] = "modPOProg";
  acnt = acnt + 1;
  astr[acnt] = "modQT";
  acnt = acnt + 1;
  astr[acnt] = "modRent";
  acnt = acnt + 1;
  astr[acnt] = "modRepGen";
  acnt = acnt + 1;
  astr[acnt] = "modRsrt";
  acnt = acnt + 1;
  astr[acnt] = "modPP";
  acnt = acnt + 1;
  astr[acnt] = "modRest";
  acnt = acnt + 1;
  astr[acnt] = "modSL";
  acnt = acnt + 1;
  astr[acnt] = "modSO";
  acnt = acnt + 1;
  astr[acnt] = "modSVO";
  acnt = acnt + 1;
  astr[acnt] = "modIN";
  acnt = acnt + 1;
  astr[acnt] = "modSY";
  acnt = acnt + 1;
  astr[acnt] = "modTASK";
  acnt = acnt + 1;
  astr[acnt] = "modTC";
  acnt = acnt + 1;
  astr[acnt] = "modTel";
  acnt = acnt + 1;
  astr[acnt] = "modUserSet";
  acnt = acnt + 1;
  astr[acnt] = "modWebShop";
  acnt = acnt + 1;
  astr[acnt] = "modWHM";
  acnt = acnt + 1;
*/  
  RETURN;
END;

procedure AddToArrayIfNeeded(var Array string astr,var Integer acnt,string str)
begin
  Integer i;
  
  if (blank(str)) then begin goto LAddToArrayIfNeeded; end;
  
  for (i = 0; i<acnt; i = i + 1) begin
    if (astr[i]==str) then begin goto LAddToArrayIfNeeded; end;
  end;
  
  astr[acnt] = str;
  acnt = acnt + 1;
  
LAddToArrayIfNeeded:;
end;

procedure VEBankAccSClassAddToArray(string vecode,var Array string astr,var Integer acnt,var vector Boolean veaddedv)
begin
  record CUVc VEr;
  record BankVc Bankr;
  
  if (blank(vecode)) then begin goto LVEBankAccSClassAddToArray; end;
  if (veaddedv[vecode]) then begin goto LVEBankAccSClassAddToArray; end;
  
  VEr.Code = vecode;  
  if (ReadFirstMain(VEr,1,true)) then begin
    AddToArrayIfNeeded(astr,acnt,VEr.BankAccount);
    AddToArrayIfNeeded(astr,acnt,VEr.Bank);
    AddToArrayIfNeeded(astr,acnt,VEr.IBANCode);
    Bankr.Code = VEr.AccOperator;
    if (ReadFIrstMain(Bankr,1,true)) then begin
      AddToArrayIfNeeded(astr,acnt,Bankr.Nr2);
    end;
    VEBankAccSClassAddToArray(VEr.VEFactoring,astr,acnt,veaddedv);
  end;
  veaddedv[vecode] = true;
  
LVEBankAccSClassAddToArray:;
end;

global
procedure VEBankAccSClassArrayOnOpen(string vecode,var Array string astr,var Integer acnt)
begin
  vector Boolean veaddedv;
  VEBankAccSClassAddToArray(vecode,astr,acnt,veaddedv);
end;

global
procedure ARInstSClassArrayOnOpen(LongInt IVNr,var Array string astr,var Integer acnt)
begin
  record ARInstallVc ARIr;
  Boolean found;
  Integer i,rwcnt;
  
  found = true;
  ARIr.InvoiceNr = IVNr;
  while (LoopMain(ARIr,1,found)) begin
    if (ARIr.InvoiceNr!=IVNr) then begin
      found = false;
    end;
    if (found) then begin
      astr[acnt] = ARIr.InstallNr;
      astr[acnt] = astr[acnt] & "     ";
      astr[acnt] = astr[acnt] & ARIr.DueDate;
      astr[acnt] = astr[acnt] & "     ";
      astr[acnt] = astr[acnt] & ARIr.RVal;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
procedure ARInstallSClassArrayOnOpen(LongInt IVNr,var Array string astr,var Integer acnt)
begin
  record ARInstallVc ARIr;
  Boolean found;
  Integer i,rwcnt;
  string 255 tstr;
  
  found = true;
  ARIr.InvoiceNr = -1;
  while (LoopMain(ARIr,1,found)) begin
    if (found) then begin
      astr[acnt] = ARIr.InvoiceNr;
      astr[acnt] = astr[acnt] & chr(9);
      astr[acnt] = astr[acnt] & ARIr.InstallNr;
      astr[acnt] = astr[acnt] & chr(9);
      astr[acnt] = astr[acnt] & ARIr.DueDate;
      astr[acnt] = astr[acnt] & chr(9);
      astr[acnt] = astr[acnt] & ARIr.CustCode;
      astr[acnt] = astr[acnt] & chr(9);
      M4PadString(ARIr.RVal,18," ",true,tstr);
      astr[acnt] = astr[acnt] & tstr;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
procedure APInstSClassArrayOnOpen(LongInt VINr,var Array string astr,var Integer acnt)
begin
  record APInstallVc APIr;
  Boolean found;
  Integer i,rwcnt;
  
  found = true;
  APIr.VISerNr = VINr;
  while (LoopMain(APIr,1,found)) begin
    if (APIr.VISerNr!=VINr) then begin
      found = false;
    end;
    if (found) then begin
      astr[acnt] = APIr.InstallNr;
      astr[acnt] = astr[acnt] & "     ";
      astr[acnt] = astr[acnt] & APIr.DueDate;
      astr[acnt] = astr[acnt] & "     ";
      astr[acnt] = astr[acnt] & APIr.RVal;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
procedure APInstallSClassArrayOnOpen(LongInt VINr,var Array string astr,var Integer acnt)
begin
  record APInstallVc APIr;
  Boolean found;
  Integer i,rwcnt;
  string 255 tstr;
  
  found = true;
  APIr.VISerNr = -1;
  while (LoopMain(APIr,1,found)) begin
    if (found) then begin
      astr[acnt] = APIr.VISerNr;
      astr[acnt] = astr[acnt] & chr(9);
      astr[acnt] = astr[acnt] & APIr.InstallNr;
      astr[acnt] = astr[acnt] & chr(9);
      astr[acnt] = astr[acnt] & APIr.DueDate;
      astr[acnt] = astr[acnt] & chr(9);
      astr[acnt] = astr[acnt] & APIr.VECode;
      astr[acnt] = astr[acnt] & chr(9);
      M4PadString(APIr.RVal,18," ",true,tstr);
      astr[acnt] = astr[acnt] & tstr;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
procedure ActTypeConseqSClassArrayOnOpen(string acttype,var Array string astr,var Integer acnt)
begin
  record ActSeqVc ASr;
  record ActTypeVc ATr;
  Boolean found;
  Integer i,rwcnt;
  string 255 tstr;
   
  found = true;
  ASr.ActType = acttype;
  while (LoopMain(ASr,1,found)) begin
    if (ASr.ActType!=acttype) then begin found = false; end;
    if (found) then begin
      ATr.Code = ASr.ActResult;
      ReadFirstMain(ATr,1,true);
      tstr = ASr.ActResult;
      if (nonblank(ATr.Comment)) then begin
        tstr = tstr & "     ";
        tstr = tstr & ATr.Comment;
      end;
      astr[acnt] = tstr;
      acnt = acnt + 1;
    end;
  end;
  return;
end;

global
procedure ActTypeConseqDataListSClassArrayOnOpen(string acttype,var Array string acode,var Array string acomment)
begin
  record ActSeqVc ASr;
  record ActTypeVc ATr;
  Boolean found;
  Integer i,rwcnt;
  string 255 tstr;
   
  found = true;
  ASr.ActType = acttype;
  while (LoopMain(ASr,1,found)) begin
    if (ASr.ActType!=acttype) then begin found = false; end;
    if (found) then begin
      ATr.Code = ASr.ActResult;
      ReadFirstMain(ATr,1,true);
      acode[acode.length] = ASr.ActResult;
      acomment[acomment.length] = ATr.Comment;
    end;
  end;
  return;
end;

global
procedure ReservationStatus2SClassArrayOnOpen(string resstatus,var Array string astr,var Integer acnt)
begin
  record ReserSeqVc RSeqr;
  record ReservationStatusVc RSr;
  Boolean found;
  string 255 rstat;    
  string 255 tstr;
  Integer pos;
   
  found = true;
  RSeqr.FromStatus = resstatus;
  while (LoopMain(RSeqr,1,found)) begin
    if (RSeqr.FromStatus!=resstatus) then begin found = false; end;
    if (found) then begin
      pos = 0;
      ExtractObj(RSeqr.StatusAllowed,pos,rstat);
      while (nonblank(rstat)) begin
        RSr.Code = rstat;
        ReadFirstMain(RSr,1,true);
        tstr = rstat;
        M4PadString(tstr,10," ",false,tstr);
        tstr = tstr & RSr.Comment;
        astr[acnt] = tstr;
        acnt = acnt + 1;        
        ExtractObj(RSeqr.StatusAllowed,pos,rstat);
      end;  

    end;
  end;
  return;
end;

global
function Boolean PasteCUGuestNameOnOpenPaste(Integer wn,string find)
begin
  Boolean res;
  record RcVc RepSpec;
  record JobVc Jobr;
  row JobVc Jobrw;
  Integer rownr;
  string 255 guestname;

  res = true;
  switch (GetWindowFileName(wn)) begin
    case "JobVc":
      GetWindowRecord(wn,Jobr);
      rownr = WIndowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(Jobr,rownr,Jobrw);
        guestname = Jobrw.CUName;
      end;
  end;
  if (nonblank(guestname)) then begin
    ReportDefaults(RepSpec,"SearchCURClass");
    RepSpec.f1 = guestname;
    RepSpec.repname = "SearchCuRn";
    RepSpec.critname = "SearchCURClass";
    RepSpec.Media = mtScreen;
    RepSpec.flags[0] = 2;
    RepSpec.UsedOnly = wn;
    RepSpec.AccSpec = rownr;
    RepSpec.f12 = "JobVc";
    RunReport(RepSpec,0);
  end;
  PasteCUGuestNameOnOpenPaste = res;
  return;
end;

global
function Boolean PasteReservationNoOnOpenPaste(Integer wn,string find)
begin
  Boolean res;
  record RcVc RepSpec;
  record RsrtEventVc REr;
  row RsrtEventVc RErw;
  Integer rownr;
  LongInt JobNr;
  record LocalMachineBlock LMb;

  ReportDefaults(RepSpec,"InHouseRClass");  
  res = true;
  switch (GetWindowFIleName(wn)) begin
    case "RsrtEventVc":
      GetWindowRecord(wn,REr);
      rownr = WIndowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(REr,rownr,RErw);
        JobNr = RErw.JobNr;
      end;
      BlockLoad(LMb);
      RepSpec.f2 = LMb.ResLoc;
      RepSpec.f1 = LMb.ResClass;
      RepSpec.d1 = REr.StartDate;
      if (blankdate(RepSpec.d1)) then begin
        RepSpec.d1 = CurrentDate;
      end;
      RepSpec.sStartTime = REr.StartTime;
      RepSpec.flags[4] = 1;
      RepSpec.flags[6] = 1;
      RepSpec.repname = "InHouseRn";
      RepSpec.Media = mtScreen;  
      RepSpec.UsedOnly = wn;
      RepSpec.FirstAcc = "RsrtEventVc";
      RepSpec.AccSpec = rownr;
      RunReport(RepSpec,0);
  end;

  PasteReservationNoOnOpenPaste = res;
  return;
end;

global
procedure ActType3SClassArrayOnOpen(string acttype,var Array string astr,var Integer acnt)
begin
  record ActSeqVc ActSeqr;
  Boolean found;
  string 255 rstat;    
  string 255 tstr;
  Integer pos;
   
  found = true;
  ActSeqr.ActType = acttype;
  while (LoopMain(ActSeqr,1,found)) begin
    if (ActSeqr.ActType!=acttype) then begin found = false; end;
    if (found) then begin
      M4PadString(ActSeqr.ActResult,10," ",false,tstr);
      tstr = tstr & ActSeqr.NextComment;
      astr[acnt] = tstr;
      acnt = acnt + 1;        
    end;
  end;
  return;
end;

global
procedure UserDefRepLinesSClassArrayOnOpen(var Array string astr,var Integer acnt,string shortname)
begin
  record UserDefRepVc UserDefRepr;
  row UserDefRepVc UserDefReprw;
  record UserDefRepLinesVc UserDefRepLinesr;
  Boolean TrHs;
  Integer i,rwcnt;
  
  UserDefRepr.shortname = shortname;
  if (ReadFirstMain(UserDefRepr,1,true)) then begin
    if (UserDefRepr.Type==kUserDefRepBal or UserDefRepr.Type==kUserDefRepRes) then begin
      UserDefRepLinesr.shortname = shortname;
      TrHs = true;
      while (LoopMain(UserDefRepLinesr,1,TrHs)) begin
        if (UserDefRepLinesr.shortname!=shortname) then begin
          TrHs = false;
        end;
        if (TrHs) then begin
          astr[acnt] = UserDefRepLinesr.IdKey & chr(9) & chr(9) & UserDefRepLinesr.Comment;
          acnt = acnt + 1;
        end;
      end;
    end;
    if (UserDefRepr.Type==kUserDefRepKFR or UserDefRepr.Type==kUserDefRepVAT) then begin
      rwcnt = MatRowCnt(UserDefRepr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(UserDefRepr,i,UserDefReprw);
        astr[acnt] = UserDefReprw.Code & chr(9) & chr(9) & UserDefReprw.Comment;
        acnt = acnt + 1;
      end;
    end;
  end;
  
  return;
end;

global
procedure XBRLElementSClassArrayOnOpen(var Array string astr,var Integer acnt,Integer ReportType)
begin
  record XBRLElementVc XBRLEr;
  Boolean TrHs;
  
  XBRLEr.ReportType = ReportType;
  TrHs = true;
  while (LoopKey("ReportType",XBRLEr,1,TrHs)) begin
    if (XBRLEr.ReportType!=ReportType) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      astr[acnt] = XBRLEr.Code & chr(9) & chr(9) & XBRLEr.FieldName;
      acnt = acnt + 1;
    end;
  end;
  
  return;
end;

global
procedure FillARPay2SClass(string index,string sorting,string custcode,Date td,var Array string astr,var Integer acnt)
begin
  record ARPayVc ARPayr;
  Boolean found,testf;
  string 255 tstr,tstr2;
  string 255 ckey;
  Date bd;
  
  ckey = index;
  if (blank(ckey)) then begin
    ckey = "CustCode";
  end;
  found = true;
  if (sorting=="Reverse") then begin
    switch (index) begin    
      case "CustCode":  ARPayr.CustCode = custcode;
      case "CUPNr": ARPayr.CUPNr = 2000000000000;
      case "OrderNr": ARPayr.OrderNr = 2000000000000;
      case "PayDate":  
        ARPayr.PayDate = td;
    end;
    while (LoopBackKey(ckey,ARPayr,1,found)) begin
      switch (index) begin    
        case "CustCode": if (ARPayr.CustCode!=custcode) then begin found = false; end;
        case "CUPNr":
        case "OrderNr":
        case "PayDate": if (ARPayr.PayDate>td) then begin found = false; end;
      end;
      if (found) then begin
        testf = true;
        if (ARPayr.PayDate>td) then begin testf = false; end;
        if (ARPayr.CustCode!=custcode) then begin testf = false; end;
        if (testf) then begin
          M4PadString(ARPayr.CUPNr,11," ",false,tstr);
          if (ARPayr.OrderNr>0) then begin
            M4PadString(ARPayr.OrderNr,11," ",false,tstr2);
          end else begin
            M4PadString("",11," ",false,tstr2);
          end;
          tstr = tstr & tstr2;
          M4PadString(ARPayr.PayDate,12," ",false,tstr2);
          tstr = tstr & tstr2;
/*          
          M4PadString(ARPayr.CustCode,12," ",false,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.CustName,30," ",false,tstr2);
          tstr = tstr & tstr2;
*/          
          M4PadString(ARPayr.VATVal,12," ",true,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.RVal,12," ",true,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.BookRVal,12," ",true,tstr2);
          tstr = tstr & tstr2;
          M4PadString("",1," ",false,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.CurncyCode,3," ",false,tstr2);
          tstr = tstr & tstr2;
          astr[acnt] = tstr;
          acnt = acnt + 1;
        end;
      end;
    end;
  end else begin
    switch (index) begin    
      case "CustCode":  ARPayr.CustCode = custcode;
      case "CUPNr":
      case "OrderNr":
      case "PayDate":  ARPayr.PayDate = bd;
    end;
    while (LoopKey(ckey,ARPayr,1,found)) begin
      switch (index) begin    
        case "CustCode": if (ARPayr.CustCode!=custcode) then begin found = false; end;
        case "CUPNr":
        case "OrderNr":
        case "PayDate": if (ARPayr.PayDate>td) then begin found = false; end;
      end;
      if (found) then begin
        testf = true;
        if (ARPayr.PayDate>td) then begin testf = false; end;
        if (ARPayr.CustCode!=custcode) then begin testf = false; end;
        if (testf) then begin
          M4PadString(ARPayr.CUPNr,11," ",false,tstr);
          if (ARPayr.OrderNr>0) then begin
            M4PadString(ARPayr.OrderNr,11," ",false,tstr2);
          end else begin
            M4PadString("",11," ",false,tstr2);
          end;
          tstr = tstr & tstr2;
          M4PadString(ARPayr.PayDate,12," ",false,tstr2);
          tstr = tstr & tstr2;
/*
          M4PadString(ARPayr.CustCode,12," ",false,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.CustName,30," ",false,tstr2);
          tstr = tstr & tstr2;
*/          
          M4PadString(ARPayr.VATVal,12," ",true,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.RVal,13," ",true,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.BookRVal,12," ",true,tstr2);
          tstr = tstr & tstr2;
          M4PadString("",1," ",false,tstr2);
          tstr = tstr & tstr2;
          M4PadString(ARPayr.CurncyCode,3," ",false,tstr2);
          tstr = tstr & tstr2;
          astr[acnt] = tstr;
          acnt = acnt + 1;
        end;
      end;
    end;
  end;
  return;
end;

procedure FillPPRows(record PPVc PPr,record ExpVc Expr,Integer expactiverow,var Array string astr,var Array string atag,var Integer acnt)
begin
  row ExpVc Exprw;
  row PPVc PPrw;
  Boolean testf;
  val usedpayval;
  Integer i,rwcnt;
  Integer j,jrwcnt;
  string 255 tstr,tstr2;
  val v;

  testf = true;
//  if (PPr.CurncyCode!=Expr.CurncyCode) then begin testf = false; end;
  if (testf) then begin
    rwcnt = MatRowCnt(PPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PPr,i,PPrw);
      testf = true;
      if (PPrw.Person!=Expr.Person) then begin testf = false; end;
      if (PPrw.PayVal<=PPrw.ExpUsedPayVal) then begin testf = false; end;
      if (testf) then begin
        usedpayval = blankval;
        jrwcnt = MatRowCnt(Expr);
        for (j=0;j<jrwcnt;j=j+1) begin
          MatRowGet(Expr,j,Exprw);
          switch (Exprw.stp) begin
            case kExpenseRowTypePersonnelPayment:
              if (Exprw.PPNr==PPr.SerNr) and (Exprw.PPRow==i) and (j!=expactiverow) then begin
                usedpayval = usedpayval + Exprw.Sum; 
              end;
          end;
        end;

        M4PadString(PPr.SerNr,9," ",false,tstr);
        M4PadString(PPr.PayDate,10," ",false,tstr2);
        tstr = tstr & tstr2;
        CurValToOtherCur(Expr.TransDate,PPr.CurncyCode,PPrw.PayVal,Expr.CurncyCode,v,DefaultCurRoundOff);
        M4PadString(v,12," ",true,tstr2);
        tstr = tstr & tstr2;
        v = PPrw.PayVal - PPrw.ExpUsedPayVal - usedpayval;
        CurValToOtherCur(Expr.TransDate,PPr.CurncyCode,v,Expr.CurncyCode,v,DefaultCurRoundOff);
        M4PadString(v,12," ",true,tstr2);
        tstr = tstr & tstr2;
        M4PadString("",1," ",false,tstr2);
        tstr = tstr & tstr2;
        if (HasMultiCurrency) then begin
          M4PadString(PPr.CurncyCode,3," ",false,tstr2);
          tstr = tstr & tstr2;
        end;
        astr[acnt] = tstr;
        atag[acnt] = i & "," & ValToString(v,M4Val,"",".",0);
        acnt = acnt + 1;
      end;
    end;
  end;
  return;
end;

global
procedure FillPPSClass(string index,string sorting,record ExpVc Expr,Integer expactiverow,var Array string astr,var Array string atag,var Integer acnt)
begin
  record PPVc PPr;
  Boolean found;
  string 255 ckey;
  Array string 255 atmpstr,atmptag;
  Integer i,a;
  
  switch (index) begin
    otherwise
      ckey = "OSPerson:" & Expr.Person;     
  end;

  if (sorting=="Reverse") then begin
    found = true;
    while (LoopKey(ckey,PPr,1,found)) begin
      if (PPr.TransDate>Expr.TransDate) then begin
        found = false;
      end;
      if (found) then begin
        FillPPRows(PPr,Expr,expactiverow,atmpstr,atmptag,acnt);
      end;
    end;
    a = 0;
    for (i=acnt-1;i>=0;i=i-1) begin
      astr[a] = atmpstr[i];
      atag[a] = atmptag[i];
      a = a + 1;
    end;
  end else begin
    found = true;
    while (LoopKey(ckey,PPr,1,found)) begin
      if (PPr.TransDate>Expr.TransDate) then begin
        found = false;
      end;
      if (found) then begin
        FillPPRows(PPr,Expr,expactiverow,astr,atag,acnt);
      end;
    end;
  end;
  return;
end;

global
procedure BaggerSClassArrayOnOpen(var Array string astr,var Integer acnt)
begin
  record BaggerBlock Baggerb;
  row BaggerBlock Baggerbrw;
  Integer i,rwcnt;
  
  BlockLoad(Baggerb);
  rwcnt = MatRowCnt(Baggerb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Baggerb,i,Baggerbrw);
    astr[acnt] = Left(Baggerbrw.UserCode & "    ",23);
    astr[acnt] = astr[acnt] & Baggerbrw.UserName;
    acnt = acnt + 1;
  end;
  return;
end;

global
procedure SupervisorSClassArrayOnOpen(var Array string astr,var Integer acnt)
begin
  record SupervisorBlock Supervisorb;
  row SupervisorBlock Supervisorbrw;
  Integer i,rwcnt;
  
  BlockLoad(Supervisorb);
  rwcnt = MatRowCnt(Supervisorb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Supervisorb,i,Supervisorbrw);
    astr[acnt] = Left(Supervisorbrw.UserCode & "    ",23);
    astr[acnt] = astr[acnt] & Supervisorbrw.UserName;
    acnt = acnt + 1;
  end;
  return;
end;

global
procedure UnoccupTableSClassArrayOnOpen(var Array string astr,var Integer acnt)
begin
  record NeighbourHoodVc Tabler;
  Boolean found;
  Boolean testf;
  record RestAccVc RAr;
  
  found = true;
  while (LoopMain(Tabler,1,found)) begin
    if (found) then begin
      testf = true;
      RAr.CustCode = Tabler.Table;
      testf = !ReadFirstKey("OpenTabs",RAr,1,true);
      if (testf) then begin
        astr[acnt] = Tabler.Table;
        acnt = acnt + 1;
      end;
    end;
  end;
  return;
end;

global
procedure ActPrioLevelSClassArrayOnOpen(var Array string astr)
begin
  record ActPrioLevelBlock APLb;
  row ActPrioLevelBlock APLbrw;
  Integer i,rwcnt;
  
  BlockLoad(APLb);
  rwcnt = MatRowCnt(APLb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(APLb,i,APLbrw);
    astr[astr.length] = APLbrw.PrioLevel;
  end;
  return;
end;
