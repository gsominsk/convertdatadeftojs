external procedure VIGetRate(var record VIVc);
external function val ValFromString(string,string,string);
external function Date DateFromString(string,string);
external procedure RowCalculateTaxMatrix_VIVc(var record VIVc,Integer,row VIVc,Integer);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external function Boolean GetOPPrepaymentRate(string,LongInt,var val,var val,var val,var val,var val);
external procedure VATVISumup(var record VATVIVc);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external function Integer VATType(string);
external procedure VIVc_PastePayVal(var record VIVc);
external function Boolean IsDigit(string);
external function Boolean IsCapitalLetter(string);
external procedure VIOpenPrepExists(string);
external function Boolean VIWarnOldRecords(Date,LongInt);
external function Boolean DateWarned(Date,string);
external procedure SetSalesMan(var string,string);
external function Boolean GetPM(string,var string,var string);
external function Boolean CLOutforVIExists(LongInt,string,var LongInt);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external updating procedure VIVcRecordDuplicateDo(var record VIVc);
external procedure VIVc_PastePayDeal(var record VIVc);
external procedure VATVICalcVals(var record VATVIVc);
external procedure PasteAccObj(string,var string);
external procedure GetACShortAccount(string,var string,var string);
external procedure MulM4ProcVal(val,val,var val);
external function Boolean PastePayRecVI(record VIVc,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetAccountDescription2(string,string,var string);
external procedure VICalcEReb(var record VIVc);
external procedure GetVATCodeAccounts(string,var string,var string,var string,var string);
external function Boolean GetAccName(string,var string,Integer);
external procedure RoundRowSum(string,string,string,var val);
external procedure VISumup(record VIVc,var val);
external procedure VICalcVals(var record VIVc);
external function Integer CLOutVc_PasteTransNr(var record CLOutVc,Integer);


global
procedure VIDDefault(Integer rownr,string activefield,var record VIVc VIp)
BEGIN
  Integer fn;
  row VIVc VIrw;
  val ct;
  Integer stp;
  val t,incvatpr,rval,t1;
  Integer vt;
  record TaxMatrixVc TMr;

  stp = 1;
  if (rownr>=0) then begin
    MatRowGet(VIp,rownr,VIrw);
    stp = VIrw.stp;
  end;
  if (rownr>=0) then begin
    switch (stp) begin
      case kInvoiceRowTypeEmployee:
      case kInvoiceRowTypeRetention:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;      
        MatRowGet(VIp,rownr,VIrw);
        vt = VATType(VIrw.VATCode);
        rval = VIrw.Sum;
        VIrw.Sum = 0;
        MatRowPut(VIp,rownr,VIrw);
        VICalcVals(VIp);
        MatRowGet(VIp,rownr,VIrw);
        VISumup(VIp,ct);
        if (activefield=="VATCode") then begin
          ct = rval;
        end else begin
          if (((VIp.ExportFlag==0) or (VIp.ExportFlag==3) or (VIp.ExportFlag==4)) and (vt!=kVATTypeReversed)) then begin
            if (blank(VIp.VATVal)) then begin
              if (UseTaxTemplatesforTaxCalc) then begin
                VIrw.Sum = ct;
                RowCalculateTaxMatrix_VIVc(VIp,rownr,VIrw,1);
                UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
                t = CalculateTotalVATFromTaxMatrix(TMr,1);
              end else begin
                MulVATIV(VIrw.VATCode,ct,t,t1,1,VIp.NoTAXonVAT);
                ct = ct - t - t1;
              end;
              RoundRowSum(VIp.CurncyCode,VIp.PayDeal,"VIVc",ct);
            end;
          end;
        end;
        if (UseTaxTemplatesforTaxCalc==false) then begin
          VIrw.Sum = ct;
        end else begin
          if (nonblank(VIp.VATVal)) then begin
            UnpackFieldMatrix(VIp,"TaxMatrix",TMr);
            t = CalculateTotalVATFromTaxMatrix(TMr,1);
            if (t!=0) then begin
              t = VIp.VATVal - CalculateTotalVATFromTaxMatrix(TMr,1);
            end else begin
              t = blankval;
            end;
            VIrw.Sum = ct - t;
          end else begin
            VIrw.Sum = ct - t;
          end;
        end;
        MatRowPut(VIp,rownr,VIrw);
        VICalcVals(VIp);
    end;
  end else begin
    if (activefield=="PayVal") then begin    
      VIp.PayVal = 0;
      VICalcVals(VIp);      
      VISumup(VIp,ct);
      VIp.PayVal = -ct;
      VIVc_PastePayVal(VIp);
    end;
  end;
  RETURN;
END;

global
updating procedure MakeActFromVIVc(record VIVc VIp,var record ActVc Actp)
BEGIN
  record ASTBlock ASTRec;
  record CUVc VEr;
  Integer curcomp;

  if (ReadFirstMain(VIp,0,true)) then begin end;  
  if (VIp.Invalid==0) then begin
    BlockLoad(ASTRec);

    curcomp = CurrentCompany;
    Actp.SerNr = -1;
    Actp.Invalid = 0;
    Actp.TodoFlag = 1;
    Actp.CUCode = VIp.VECode;
    VEr.Code = VIp.VECode;
    Actp.Comment = VIp.Comment;
//    Actp.Contact = VIp.VEName;
    if (ReadFirstMain(VEr,1,true)) then begin
      Actp.CUName = VEr.Name;
      if (nonblank(VEr.Person)) then begin Actp.Contact = VEr.Person; end;
      Actp.Phone = VEr.Phone;
    end;
    Actp.ActType = ASTRec.PInv;
    Actp.OKFlag = ASTRec.PInvDone;
    Actp.TransDate = VIp.DueDate;
    Actp.MainPersons = CurrentUser;
    Actp.PrioLevel = -1;
    Actp.SerNr = NextSerNr("ActVc",Actp.TransDate,-1,false,"");
    if (RecordStore(Actp,false)) then begin 
      CreateRecordLink(Actp,curcomp,VIp,curcomp);  
    end;
  end;  
  RETURN;
END;

function
Integer CorrectTRVAT(var record TRVc TRr,Integer trcnt,Array string pvataccs,Array string corpvataccs,Integer vatcnt,Integer mode)
BEGIN
  row TRVc TRrw;
  row TRVc newTRrw;
  Integer i,vati,rcnt;
  Integer res;
  string 255 tstr;
  Boolean addupdmarkrowf;
  
  for (vati=0;vati<vatcnt;vati=vati+1) begin
    if (blank(corpvataccs[vati])) then begin
      res = 1922;
      goto LCorrectTRVAT;
      if (GetAccName(corpvataccs[vati],tstr,60)==false) then begin
        res = 1007;
        goto LCorrectTRVAT;
      end;
    end;
    if (mode==1) then begin//raction
      for (i=0;i<trcnt;i=i+1) begin
        MatRowGet(TRr,i,TRrw);      
        if (TRrw.ovst==0) then begin
        if (TRrw.AccNumber==pvataccs[vati]) then begin
          TRrw.ovst = 1;
          MatRowPut(TRr,i,TRrw);
          ClearRow(TRr,newTRrw,1);
          CopyRow(TRr,TRrw,newTRrw);
          newTRrw.ovst = 0;
          newTRrw.AccNumber = corpvataccs[vati];
          if (GetAccName(newTRrw.AccNumber,tstr,60)==false) then begin
            res = 1007;
            goto LCorrectTRVAT;
          end;
          newTRrw.Comment = tstr;
          MatRowPut(TRr,trcnt+rcnt,newTRrw);
          rcnt = rcnt + 1;
          addupdmarkrowf = true;
        end;
        end;
      end;
    end;
  end;
  if (res==0) then begin
    if (addupdmarkrowf) then begin
      ClearRow(TRr,newTRrw,2);
      TRr.RegDate = CurrentDate;
      newTRrw.UpdDate = CurrentDate;
      newTRrw.Sign = CurrentUser;
      newTRrw.OldTransDate = TRr.TransDate;
      MatRowInsert(TRr,trcnt,newTRrw);
    end;
  end; 
LCorrectTRVAT:;   
  CorrectTRVAT = res;
  RETURN;
END;

procedure AddToCorVAT(string VATCode,Array string avatcodes,Array string pvataccs,Array string corpvataccs,var Integer vatcnt)
BEGIN
  Integer i;
  string 10 svatacc,pvatacc,corsvatacc,corpvatacc;
  
  GetVATCodeAccounts(VATCode,svatacc,pvatacc,corsvatacc,corpvatacc);
  for (i=0;i<=vatcnt;i=i+1) begin
//    if (pvataccs[i]==pvatacc) then begin//Vat code can have same account
    if (avatcodes[i]==VATCode) then begin
      goto LAddToCorVAT;
    end;
  end;
  pvataccs[vatcnt] = pvatacc;
  corpvataccs[vatcnt] = corpvatacc;
  avatcodes[vatcnt] = VATCode;
  vatcnt = vatcnt + 1;
LAddToCorVAT:;  
  RETURN;
END;

function
val GetVATVISum(LongInt VInr,LongInt vatVInr,Integer rownr)
BEGIN
  val res;
  record VATVIVc VATVIr;
  row VATVIVc VATVIrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  
  TrHs = true;
  VATVIr.VINr = VInr;
  while (LoopKey("VINr",VATVIr,1,TrHs)) begin
    if (VATVIr.VINr!=VInr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (VATVIr.SerNr==vatVInr) then begin
        testf = false;
      end;
      if (VATVIr.Invalid!=0) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(VATVIr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(VATVIr,i,VATVIrw);
          if (VATVIrw.VIRow==rownr) then begin
            res = res + VATVIrw.Sum;
          end;
        end;
      end;
    end;
  end;  
LGetVATVISum:;  
  GetVATVISum = res;
  RETURN;
END;

function val GetVATVISum_PrepayNr_PONr(LongInt PONr,LongInt OrdRow,LongInt PrepayNr)
begin
  val res;
  Boolean TrHs,testf;
  record VATVIVc VATVIr;
  row VATVIVc VATVIrw;
  Integer i,rwcnt;

  if (PrepayNr>0) then begin
    TrHs = true;
    VATVIr.PrepayNr = PrepayNr;
    while (LoopKey("PrepayNr",VATVIr,1,TrHs)) begin
      if (VATVIr.PrepayNr!=PrepayNr) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        testf = true;
        if (VATVIr.Invalid!=0) then begin
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(VATVIr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VATVIr,i,VATVIrw);
            if (VATVIrw.OrdRow==OrdRow) then begin
              res = res + VATVIrw.Sum;
            end;
          end;
        end;
      end;
    end; 
  end; 
  GetVATVISum_PrepayNr_PONr = res;
  return;
end;

function val GetVATVISum_PrepayNr(string artcode,LongInt PrepayNr)
begin
  val res;
  Boolean TrHs,testf;
  record VATVIVc VATVIr;
  row VATVIVc VATVIrw;
  Integer i,rwcnt;

  if (PrepayNr>0) then begin
    TrHs = true;
    VATVIr.PrepayNr = PrepayNr;
    while (LoopKey("PrepayNr",VATVIr,1,TrHs)) begin
      if (VATVIr.PrepayNr!=PrepayNr) then begin
        TrHs = false;
      end;
      if (TrHs) then begin
        testf = true;
        if (VATVIr.Invalid!=0) then begin
          testf = false;
        end;
        if (testf) then begin
          rwcnt = MatRowCnt(VATVIr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(VATVIr,i,VATVIrw);
            if (VATVIrw.Item==artcode) then begin
              res = res + VATVIrw.Sum;
            end;
          end;
        end;
      end;
    end; 
  end; 
  GetVATVISum_PrepayNr = res;
  return;
end;

function val GetVATVISum_OP(record VIVc VIr,row VIVc curVIrw)
begin
  val res;
  Integer i,rwcnt;
  row VIVc VIrw;
  
  if (VIr.POSerNr>0) then begin
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      switch (VIrw.stp) begin
        case kInvoiceRowTypePrepayment:
          res = res + GetVATVISum_PrepayNr_PONr(VIr.POSerNr,curVIrw.OrdRow,VIrw.PrepayNr);
      end;
    end;
  end else begin
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      switch (VIrw.stp) begin
        case kInvoiceRowTypePrepayment:
          res = res + GetVATVISum_PrepayNr(curVIrw.Item,VIrw.PrepayNr);
      end;
    end;
  end;
  GetVATVISum_OP = res;
  return;
end;

global
procedure PasteVIRowToVATVI(record VIVc VIr,var record VATVIVc VATVIr,Integer rownr,var Integer vati)
BEGIN
  row VIVc VIrw;
  row VATVIVc VATVIrw;
  Integer i,rwcnt;
  val sum,t,prepayv;
  record APAccBlock APAccb;
  
  BlockLoad(APAccb);  
  rwcnt = MatRowCnt(VIr);
  if (rownr<rwcnt) then begin
    MatRowGet(VIr,rownr,VIrw);
    switch (VIrw.stp) begin
      case 1:
        sum = GetVATVISum(VIr.SerNr,VATVIr.SerNr,rownr);
        if (APAccb.PreOPBookVAT!=0) then begin
          sum = sum + GetVATVISum_OP(VIr,VIrw);
        end;
        sum = VIrw.Sum - sum;
        if (sum!=0) and (VIrw.Sum!=0) then begin
          ClearRow(VATVIr,VATVIrw,VIrw.stp);
          VATVIrw.stp = VIrw.stp;
          VATVIrw.ovst = VIrw.ovst;
          VATVIrw.AccNumber = VIrw.AccNumber;
          VATVIrw.Objects = VIrw.Objects;
          VATVIrw.Comment = VIrw.Comment;
          VATVIrw.Sum = sum;


          VATVIrw.PrepayAmount = VIrw.PrepayAmount;
          VATVIrw.VATVal = VIrw.VATVal;
          VATVIrw.qty = VIrw.qty;
          VATVIrw.Item = VIrw.Item;
          VATVIrw.VATCode = VIrw.VATCode;
          VATVIrw.VEPNr = VIrw.VEPNr;
          VATVIrw.PrepayNr = VIrw.PrepayNr;
          VATVIrw.PeriodCode = VIrw.PeriodCode;
          VATVIrw.ACShort = VIrw.ACShort;
          VATVIrw.OrdRow = VIrw.OrdRow;
          VATVIrw.VIRow = rownr;
          MatRowPut(VATVIr,vati,VATVIrw);
          vati = vati + 1;
        end;
    end;
  end else begin
    ClearRow(VATVIr,VATVIrw,1);
    MatRowPut(VATVIr,vati,VATVIrw);
  end;
  if (APAccb.PostVIVATonVATCorr!=0) then begin
    rwcnt = MatRowCnt(VIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      switch (VIrw.stp) begin
        case kInvoiceRowTypePrepayment:
          prepayv = prepayv + (VIrw.Sum - VIrw.VATVal);
      end;
    end;
    if (blank(VIr.VATVal)) then begin
      sum = VIr.PayVal - VIr.CalcVATVal;
    end else begin
      sum = VIr.PayVal - VIr.VATVal;
    end;
    sum = sum - prepayv;
    if (sum>0) and (prepayv>0) then begin
      rwcnt = MatRowCnt(VATVIr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VATVIr,i,VATVIrw);
        VATVIrw.Sum = sum/rwcnt;
        if (VATVIrw.Sum<=0) then begin
          MatRowDelete(VATVIr,i);
          rwcnt = MatRowCnt(VATVIr);
        end else begin
          MatRowPut(VATVIr,i,VATVIrw);
        end;
      end;
    end;
  end;
  VATVICalcVals(VATVIr);
  VATVISumup(VATVIr);
  RETURN;
END;

procedure CopyHeaderVIToVATVI(record VIVc VIr,var record VATVIVc VATVIr)
BEGIN
  Date blankd;
  
  VATVIr.TransDate = CurrentDate;// blankd;
  VATVIr.VINr = VIr.SerNr;
  VATVIr.VIInvDate = VIr.InvDate;
  VATVIr.VIRegDate = VIr.RegDate;
  VATVIr.VIDueDate = VIr.DueDate;
  VATVIr.VIRebDate = VIr.RebDate;
  VATVIr.VIRebDate2 = VIr.RebDate2;
  VATVIr.VITransDate = VIr.TransDate;
  VATVIr.InvoiceNr = VIr.InvoiceNr;
  VATVIr.RefStr = VIr.RefStr;
  VATVIr.VECode = VIr.VECode;
  VATVIr.VEName = VIr.VEName;
  VATVIr.Sign = VIr.Sign;
  VATVIr.OKPersons = VIr.OKPersons;
  VATVIr.PayVal = VIr.PayVal;
  VATVIr.RebVal = VIr.RebVal;
  VATVIr.RebVal2 = VIr.RebVal2;
  VATVIr.VATVal = VIr.VATVal;
  VATVIr.CalcVATVal = VIr.CalcVATVal;
  VATVIr.HoldSum = VIr.HoldSum;
  VATVIr.CurncyCode = VIr.CurncyCode;
  VATVIr.FrRate = VIr.FrRate;
  VATVIr.ToRateB1 = VIr.ToRateB1;
  VATVIr.ToRateB2 = VIr.ToRateB2;
  VATVIr.BaseRate1 = VIr.BaseRate1;
  VATVIr.BaseRate2 = VIr.BaseRate2;
  VATVIr.VATFrRate = VIr.VATFrRate;
  VATVIr.VATToRateB1 = VIr.VATToRateB1;
  VATVIr.VATToRateB2 = VIr.VATToRateB2;
  VATVIr.VATBaseRate1 = VIr.VATBaseRate1;
  VATVIr.VATBaseRate2 = VIr.VATBaseRate2;
  VATVIr.InvType = VIr.InvType;
  VATVIr.ExportFlag = VIr.ExportFlag;
  VATVIr.VEVatCode = VIr.VEVatCode;
  VATVIr.Comment = VIr.Comment;
  VATVIr.Objects = VIr.Objects;
  VATVIr.PrelBook = VIr.PrelBook;
  VATVIr.CredInv = VIr.CredInv;
  VATVIr.CredMark = VIr.CredMark;
  VATVIr.VATNr = VIr.VATNr;
  VATVIr.LangCode = VIr.LangCode;
  VATVIr.SortCode = VIr.SortCode;
  VATVIr.SalesGroup = VIr.SalesGroup;
  VATVIr.SalesMan = VIr.SalesMan;
  VATVIr.InvType = VIr.InvType;
  VATVIr.NoTAXonVAT =  VIr.NoTAXonVAT;
  RETURN;
END;

global
procedure PasteVIToVATVI(record VIVc VIr,var record VATVIVc VATVIr)
BEGIN  
  Integer i,rwcnt;
  Integer vati;
  
  CopyHeaderVIToVATVI(VIr,VATVIr);
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    PasteVIRowToVATVI(VIr,VATVIr,i,vati);
  end;
  RETURN;
END;

procedure CreateVATVI(record VIVc VIr,record VATVIVc VATVIr)
BEGIN
  RecordNew(VATVIr);
  PasteVIToVATVI(VIr,VATVIr);
  RETURN;
END;

global
updating function Integer UpdateTRVATVI(record VIVc VIr,var record VATVIVc VATVIr,Integer mode)
BEGIN
  record TRVc oldTRr;
  record TRVc TRr;
  row TRVc TRrw;
  Integer res;
  Integer i,rwcnt;
  Array string 10 corpvataccs;
  Array string 10 pvataccs;
  Array string 2 avatcodes;
  Integer vatcnt,err;
  
  TRr.Number = VIr.SerNr;
  TRr.IntYc = VIYc;
  if (ReadFirstMain(TRr,2,true)) then begin
    RecordCopy(oldTRr,TRr);
    rwcnt = MatRowCnt(TRr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TRr,i,TRrw);
      if ((nonblank(TRrw.VATCode)) and (TRrw.ovst==0)) then begin
        AddToCorVAT(TRrw.VATCode,avatcodes,pvataccs,corpvataccs,vatcnt);        
      end;
    end;
    err = CorrectTRVAT(TRr,rwcnt,pvataccs,corpvataccs,vatcnt,mode);
    if (err==0) then begin
      switch (mode) begin
        case 0://specmenu
          CreateVATVI(VIr,VATVIr);
          if (MatRowCnt(VATVIr)>0) then begin
            res = 0;
          end else begin
            res = 22091;
          end;
        case 1://raction
          if (RecordUpdate(oldTRr,TRr,true)==0) then begin
            res = 0;
          end;  
        case 2://recordcheck
          res = 0;
      end;
      
    end else begin
//      MessageBox(0,USetStr(err));
      res = err;
    end;
  end;
  UpdateTRVATVI = res;
  RETURN;
END;

procedure APAccName(record VIVc VIp,Integer rownr,Boolean fulldataf)
BEGIN
  row VIVc VIrw;
  record AccVc Accr;
  record APAccBlock APAccRec;
  Boolean Accs;
  string 255 tstr;
  string 255 vatcode;
  string 10 accnr;
  Integer row1;
  string 255 taxtemplatecode;
  record TaxMatrixVc TMr;

  MatRowGet(VIp,rownr,VIrw);
  accnr = VIrw.AccNumber;
  if (blank(accnr)) then begin
    VIrw.Comment = "";
    MatRowPut(VIp,rownr,VIrw);
    goto LAPAccName;
  end;
  Accr.AccNumber = accnr;
  Accs = ReadFirstKey("AccNumber",Accr,1,true);
  if (Accs==false) then begin
    VIrw.Comment = USetStr(1023);
    MatRowPut(VIp,rownr,VIrw);
  end else begin
    BlockLoad(APAccRec);
    if (fulldataf) or (blank(VIrw.Comment)) then begin
      GetAccountDescription2(Accr.AccNumber,VIp.LangCode,tstr);
      VIrw.Comment = tstr;
    end;
    VIrw.PeriodCode = Accr.PeriodCode;
    vatcode = VIp.VEVatCode;
    if (blank(vatcode)) then begin
      vatcode = Accr.VATCode;
    end;
    if (blank(vatcode)) then begin
      switch (VIp.ExportFlag) begin
        case 0: vatcode = APAccRec.VATCodeDom;
        case 1: vatcode = APAccRec.VATCodeEU;
        case 2: vatcode = APAccRec.VATCodeExp;
        case 3: vatcode = APAccRec.VATCodeEU;
        case 4: vatcode = APAccRec.VATCodeExp;
      end;
    end;
    if (nonblank(vatcode)) /*and blank(VIrw.VATCode)*/ then begin
      VIrw.VATCode = vatcode;
    end;
    taxtemplatecode = VIp.VETaxTemplateCode;
    if (blank(taxtemplatecode)) then begin
      taxtemplatecode = Accr.TaxTemplateCode;
    end;
    if (blank(taxtemplatecode)) then begin
      taxtemplatecode = APAccRec.TaxTemplateCode;
      switch (VIp.ExportFlag) begin
        case 1: taxtemplatecode = APAccRec.TaxTemplateCodeEU;
        case 2: taxtemplatecode = APAccRec.TaxTemplateCodeExp;
        case 3: taxtemplatecode = APAccRec.TaxTemplateCodeEU;
        case 4: taxtemplatecode = APAccRec.TaxTemplateCodeExp;
      end;
    end;
    VIrw.TaxTemplateCode = FillupTaxMatrix(2,VIp.BranchID,VIp.VECode,"","",taxtemplatecode,TMr);
    PackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
    MatRowPut(VIp,rownr,VIrw);
    if (fulldataf==false) then begin
      if (nonblank(Accr.AutCode)) then begin
        row1 = rownr + 1;
        ClearRow(VIp,VIrw,1);
        VIrw.AccNumber = Accr.AutCode;
        MatRowPut(VIp,row1,VIrw);
      end;
    end;
  end;
LAPAccName:;
  RETURN;
END;

global
function Boolean PasteVendInVI(record VIVc VIp,var string vewarn,Boolean pasterowf)
BEGIN
  record APAccBlock APAccRec;
  record CUVc VEr;
  row VIVc VIrw;
  Boolean found;
  record VGVc VGr;  
 
  BlockLoad(APAccRec);
  VEr.Code = VIp.VECode;
  found = ReadFirstMain(VEr,1,true);
  if (found) then begin
    if (VEr.blockedFlag!=0) then begin found = false; end;
  end;
  if (found) then begin
    VIp.Comment = VEr.Comment;
    if (HasLocalization("SWE")==false) then begin
      VIp.BankCode = VEr.AccOperator;
    end;
    VIp.BankAcc = VEr.IBANCode;
    if (blank(VIp.BankAcc)) then begin
      VIp.BankAcc = VEr.BankAccount;
    end;
    if (blank(VIp.BankAcc)) then begin
      VIp.BankAcc = VEr.Bank;
    end;
    VIp.VEName = VEr.Name;
    VIp.VEFactoring = VEr.VEFactoring;
    VIp.PayDeal = VEr.VEPayDeal;
    VIp.CurncyCode  = VEr.VECurncyCode;
    VIp.LangCode  = VEr.LangCode;
    VIp.VEVatCode  = VEr.VEVATCode;
    VIp.VETaxTemplateCode  = VEr.VETaxTemplateCode;
    VIp.VATNr  = VEr.VATNr;
    VIp.SortCode  = VEr.SortCode;
    VIp.SalesGroup = VEr.SalesGroup;
    VIp.SalesMan = VEr.SalesMan;
    VIp.ExportFlag = VEr.ExportFlag;
    VIp.SelfBilling = VEr.SelfBilling;
    switch (VEr.OPBookVAT) begin
      case 1:
        VIp.OPBookVAT = VEr.OPBookVAT;
      case 2:
        VIp.OPBookVAT = 0;
      otherwise
        VIp.OPBookVAT = APAccRec.OPBookVAT;
    end;
    VIp.VELegalForm = VEr.LegalForm;
    VIp.RefStr = VEr.RefStr;
    VIp.Region = VEr.Region;
    VIp.Objects = "";
    VIp.Addr1 = VEr.InvAddr0;
    VIp.Addr2 = VEr.InvAddr1;
    VIp.Addr3 = VEr.InvAddr2;
    VIp.InvAddr3 = VEr.InvAddr3;
    VIp.InvAddr4 = VEr.InvAddr4;
    VIp.InvCountry = VEr.CountryCode;
    VIp.Region = VEr.Region;
    VIp.Phone = VEr.Phone;
    VIp.Fax = VEr.Fax;
    VIp.PaymentCode = VEr.PaymentCode;
    if (APAccRec.APUseObj!=0) then begin
      if ((nonblank(VIp.Objects)) and (nonblank(VEr.VEObjects))) then begin
        VIp.Objects = VIp.Objects & ",";
      end;
      VIp.Objects = VIp.Objects & VEr.VEObjects;
    end;
    if (blank(VIp.VEFactoring)) then begin
      if (PastePayRecVI(VIp,VIp.VECode)) then begin end;
    end else begin
      if (PastePayRecVI(VIp,VIp.VEFactoring)) then begin end;
    end;
    if (nonblank(VEr.AccAP)) then begin
      VIp.APAcc = VEr.AccAP;
    end else begin
      if (nonblank(VEr.VECat)) then begin
        VGr.Code = VEr.VECat;
        if (ReadFirstMain(VGr,1,true)) then begin
          if (nonblank(VGr.AccAP)) then begin
            VIp.APAcc = VGr.AccAP;
          end;
        end;
      end;
    end;
    if (nonblank(VEr.AccCost)) then begin
      if (pasterowf) then begin
        ClearRow(VIp,VIrw,1);
        VIrw.AccNumber = VEr.AccCost;
        PasteAccObj(VIrw.AccNumber,VIrw.Objects);
        MatRowPut(VIp,0,VIrw);
        APAccName(VIp,0,false);
      end;
    end;
    vewarn = VEr.VEWarnText1;
    if (DateWarned(VIp.TransDate,"VIVc")) then begin
      MessageBox(1045,"");
    end;
    if (VIWarnOldRecords(VIp.TransDate,VIp.SerNr)) then begin
      MessageBox(2020,"");
    end;
  end;
  PasteVendInVI = found;
  RETURN;
END;

global
procedure ChangeVISerialNr(Integer wnst,record VIVc VIp)
begin
  if (wnst==1) then begin//Rs_insert
    if (SingleUserMode) then begin
      VIp.SerNr = NextSerNr("VIVc",VIp.TransDate,VIp.SerNr,false,VIp.LangCode);
    end;
  end;
  return;
end;

global
procedure VIGetRate(var record VIVc VIp)
BEGIN
  val from,to1,to2,base1,base2;
  string 5 curncycode;
  record VITBlock VITb;
  record POVc POp;
  Boolean ratef;

  if (VIp.POSerNr>0) then begin
    BlockLoad(VITb);
    switch (VITb.VIFromPORate) begin
      case kVIRateFromPurchaseOrder:
        POp.SerNr = VIp.POSerNr;
        if (ReadFirstMain(POp,1,true)) then begin
          VIp.FrRate = POp.FrRate;
          VIp.ToRateB1 = POp.ToRateB1;
          VIp.ToRateB2 = POp.ToRateB2;
          VIp.BaseRate1 = POp.BaseRate1;
          VIp.BaseRate2 = POp.BaseRate2;

          VIp.VATFrRate = POp.FrRate;
          VIp.VATToRateB1 = POp.ToRateB1;
          VIp.VATToRateB2 = POp.ToRateB2;
          VIp.VATBaseRate1 = POp.BaseRate1;
          VIp.VATBaseRate2 = POp.BaseRate2;
        end else begin
          ratef = true;
        end;
      case kVIRateOnPurchaseInvoiceDate:
        curncycode = VIp.CurncyCode;
        GetFullCurncyRate(curncycode,VIp.TransDate,from,to1,to2,base1,base2);
        VIp.CurncyCode = curncycode;
        VIp.FrRate = from;
        VIp.ToRateB1 = to1;
        VIp.ToRateB2 = to2;
        VIp.BaseRate1 = base1;
        VIp.BaseRate2 = base2;

        VIp.VATFrRate = from;
        VIp.VATToRateB1 = to1;
        VIp.VATToRateB2 = to2;
        VIp.VATBaseRate1 = base1;
        VIp.VATBaseRate2 = base2;
      case kVIRateFromPrepaymentandPurchaseInvoice:
/*      
        if (GetOPPrepaymentRate(VIp.CurncyCode,POp.SerNr,from,to1,to2,base1,base2)) then begin
          VIp.FrRate = from;
          VIp.ToRateB1 = to1; 
          VIp.ToRateB2 = to2;
          VIp.BaseRate1 = base1;
          VIp.BaseRate2 = base2;

          VIp.VATFrRate = from;
          VIp.VATToRateB1 = to1; 
          VIp.VATToRateB2 = to2;
          VIp.VATBaseRate1 = base1;
          VIp.VATBaseRate2 = base2;
        end else begin
          VIp.FrRate = POp.FrRate;
          VIp.ToRateB1 = POp.ToRateB1;
          VIp.ToRateB2 = POp.ToRateB2;
          VIp.BaseRate1 = POp.BaseRate1;
          VIp.BaseRate2 = POp.BaseRate2;

          VIp.VATFrRate = POp.FrRate;
          VIp.VATToRateB1 = POp.ToRateB1;
          VIp.VATToRateB2 = POp.ToRateB2;
          VIp.VATBaseRate1 = POp.BaseRate1;
          VIp.VATBaseRate2 = POp.BaseRate2;
        end;
*/        
        GetFullCurncyRate(VIp.CurncyCode,VIp.InvDate,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2);
        GetFullCurncyRate(VIp.CurncyCode,VIp.InvDate,VIp.VATFrRate,VIp.VATToRateB1,VIp.VATToRateB2,VIp.VATBaseRate1,VIp.VATBaseRate2);
    end;
  end else begin
    ratef = true;
  end;
  if (ratef) then begin
    curncycode = VIp.CurncyCode;
    GetFullCurncyRate(curncycode,VIp.TransDate,from,to1,to2,base1,base2);
    VIp.CurncyCode = curncycode;
    VIp.FrRate = from;
    VIp.ToRateB1 = to1;
    VIp.ToRateB2 = to2;
    VIp.BaseRate1 = base1;
    VIp.BaseRate2 = base2;

    VIp.VATFrRate = from;
    VIp.VATToRateB1 = to1;
    VIp.VATToRateB2 = to2;
    VIp.VATBaseRate1 = base1;
    VIp.VATBaseRate2 = base2;
  end;
  RETURN;
END;

global
function Boolean VIVc_PasteVECode(var record VIVc VIp,Integer wnst,Boolean pasterowf,Boolean inclprepf,var string vewarn)
BEGIN
  Boolean res;

  if (PasteVendInVI(VIp,vewarn,pasterowf)) then begin
    if (VIp.SerNr<0) then begin
      ChangeVISerialNr(wnst,VIp);
    end;
    VICalcEReb(VIp);
    VIGetRate(VIp);
    if (inclprepf) then begin
      VIOpenPrepExists(VIp.VECode);
    end;
    res = true;
  end;
  VIVc_PasteVECode = res;
  RETURN;
END;

procedure StripLeadZeros(string tstr,var string res)
BEGIN
  Integer i;
  
  res = "";
  for (i=0;i<=len(tstr);i=i+1) begin
    if ((len(res)!=0) or (Mid(tstr,i,1)!="0")) then begin
      res = res & Mid(tstr,i,1);
    end;
  end;
  RETURN;
END;

function
Date ConvStringToDate(string datestr)
BEGIN
  Date resd;
  LongInt ys,ms,ds;
  
  ys = FirstInRange(Mid(datestr,0,2),2);
  ms = FirstInRange(Mid(datestr,2,2),2);
  ds = FirstInRange(Mid(datestr,4,2),2);

  resd = AddYear(resd,ys+2000);
  resd = AddMonth(resd,-GetMonth(resd)+ms);
  resd = AddDay(resd,-GetDay(resd)+ds);
  ConvStringToDate = resd;
  RETURN;
END;

global
function Boolean VIVc_PasteBarCode(var record VIVc VIp,Integer wnst,var string vewarn)
BEGIN
  Boolean res,vef;
  record CUVc VEr;
  record SysFormatBlock SysFormatRec;
  Integer rwcnt;
  string 255 tstr,tstr2,version;
  
  version = Left(VIp.BarCode,1);
  switch (version) begin
    case "4":
      VEr.IBANCode = "FI" & Mid(VIp.BarCode,1,2);
      VEr.IBANCode = VEr.IBANCode & " " & Mid(VIp.BarCode,3,4);
      VEr.IBANCode = VEr.IBANCode & " " & Mid(VIp.BarCode,7,4);
      VEr.IBANCode = VEr.IBANCode & " " & Mid(VIp.BarCode,11,4);
      VEr.IBANCode = VEr.IBANCode & " " & Mid(VIp.BarCode,15,2);
      vef = ReadFirstKey("ActIBAN",VEr,1,true);
      if (vef==false) then begin
        VEr.IBANCode = "FI" & Mid(VIp.BarCode,1,16);
        vef = ReadFirstKey("ActIBAN",VEr,1,true);
      end;
      if (vef) then begin
        VIp.VECode = VEr.Code;
        if (PasteVendInVI(VIp,vewarn,true)) then begin
          VIp.CurncyCode = "EUR";
          ChangeVISerialNr(wnst,VIp);
          VICalcEReb(VIp);
          VIGetRate(VIp);
          VIOpenPrepExists(VIp.VECode);
          tstr = Mid(VIp.BarCode,17,8);
          VIp.PayVal = ValFromString(tstr,"","")/100.00;
          VICalcVals(VIp);
          VIp.RefStr = Mid(VIp.BarCode,28,20);
          tstr = Mid(VIp.BarCode,48,6);
          VIp.DueDate = DateFromString(tstr,"YYMMDD");
          res = true;
        end;
      end;
    otherwise
      tstr = Mid(VIp.BarCode,1,14);
      VEr.BankAccount = Left(tstr,6) & "-";
      StripLeadZeros(Right(tstr,len(tstr)-6),tstr2);  
      VEr.BankAccount = VEr.BankAccount & tstr2;
      if (ReadFirstKey("BankAccount",VEr,1,true)) then begin
        VIp.VECode = VEr.Code;
        if (PasteVendInVI(VIp,vewarn,true)) then begin
          tstr = Mid(VIp.BarCode,0,1);
          if (tstr=="1") then begin
            VIp.CurncyCode = "FIM";
          end;
          if (tstr=="2") then begin
            VIp.CurncyCode = "EUR";
          end;
          ChangeVISerialNr(wnst,VIp);
          VICalcEReb(VIp);
          VIGetRate(VIp);
          VIOpenPrepExists(VIp.VECode);
          BlockLoad(SysFormatRec);
          tstr = Mid(VIp.BarCode,15,8);
          tstr = Left(tstr,6) & SysFormatRec.decimalPt & Right(tstr,len(tstr)-6);
          VIp.PayVal = StringToVal(tstr,M4Val);
          VICalcVals(VIp);
          VIp.RefStr = Mid(VIp.BarCode,23,20);
          tstr = Mid(VIp.BarCode,43,6);
          VIp.DueDate = ConvStringToDate(tstr);
        end;
      end;  
  end;
  VIVc_PasteBarCode = res;
  RETURN;
END;

function Boolean CheckAndAddFormula(string formula,val orgvalp,var val thisvalp)
begin
  record CalcFormVc CFr;
  row CalcFormVc cfrp;
  val a,b;
  val orgtotal,alreadycalc;
  Integer i,rwcnt;
  Boolean res;

  orgtotal = orgvalp;
  CFr.PayCode = formula;
  if (ReadFirstMain(CFr,1,true)) then begin
    thisvalp = blankval;
    rwcnt = MatRowCnt(CFr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CFr,i,cfrp);
      if (orgtotal>=cfrp.From) then begin
        if ((orgtotal>=cfrp.To) and (nonblank(cfrp.To))) then begin
          a = cfrp.To;
          a = a - alreadycalc;
          alreadycalc = a + alreadycalc;
          a = a*cfrp.Percent;
          a = a/100;
          a = a + cfrp.Amount;
          thisvalp = thisvalp + a;
        end;
        if ((orgtotal<cfrp.To) or (blank(cfrp.To))) then begin
          a = orgtotal - cfrp.From;
          alreadycalc = a + alreadycalc;
          a = a*cfrp.Percent;
          a = a/100;
          a = a + cfrp.Amount;
          thisvalp = thisvalp + a;
        end;
      end;
    end;
    thisvalp = Round(thisvalp,DefaultRoundMode);
    if (rwcnt>0) then begin
      res = true;
    end;
  end;
  CheckAndAddFormula = res;
  return;
end;

global
procedure ATransVal(val odp,val ocp,string DStr,string CStr,var val dvalp,var val cvalp,Boolean dontswapf)
BEGIN
  val DVal,CVal,trval;
  Boolean roundf;
  string 255 tstr;
  record RcVc RepSpec;
  string 60 lDstr,lCstr;

  lDstr = Dstr;
  lCstr = Cstr;
  if (ocp==0) then begin
    trval = odp;
  end else begin
    trval = ocp;
  end;
  if (nonblank(lDstr)) then begin
    if (CheckAndAddFormula(lDstr,trval,DVal)==false) then begin
      if (Mid(lDstr,len(lDstr)-1,1)=="%") then begin
        roundf = false;
        lDstr = Left(lDstr,len(lDstr)-1);
        if (Mid(lDstr,len(lDstr)-1,1)=="%") then begin
          lDstr = Left(lDstr,len(lDstr)-1);
          roundf = true;
        end;
        if (dontswapf) then begin
          if (odp!=0) then begin
            MulM4ProcVal(StringToVal(lDstr,M4Rate),odp,DVal);
            MulM4ProcVal(StringToVal(lDstr,M4Rate),ocp,CVal);
          end else begin
            MulM4ProcVal(StringToVal(lDstr,M4Rate),ocp,DVal);
            MulM4ProcVal(StringToVal(lDstr,M4Rate),odp,CVal);
          end;
        end else begin
          MulM4ProcVal(StringToVal(lDstr,M4Rate),odp,DVal);
          MulM4ProcVal(StringToVal(lDstr,M4Rate),ocp,CVal);
        end;
      end else begin
        RepSpec.sStartDate = CurrentDate;
        RepSpec.sEndDate = CurrentDate;
        tstr = lDstr;
//        if (strPCeq(decimalPt,".")) then
//          Express2_it(tstr,2);
        DVal = StringToVal(tstr,M4Rate);
      end;
    end;
  end;
  if (nonblank(lCstr)) then begin
    if (CheckAndAddFormula(lCstr,trval,CVal)==false) then begin
      if (Mid(lCstr,len(lCstr)-1,1)=="%") then begin
        roundf = false;
        lCstr = Left(lCstr,len(lCstr)-1);
        if (Mid(lCstr,len(lCstr)-1,1)=="%") then begin
          lCstr = Left(lCstr,len(lCstr)-1);
          roundf = true;
        end;
        if (dontswapf) then begin
          if (ocp!=0) then begin
            MulM4ProcVal(StringToVal(lCstr,M4Rate),odp,DVal);
            MulM4ProcVal(StringToVal(lCstr,M4Rate),ocp,CVal);
          end else begin
            MulM4ProcVal(StringToVal(lCstr,M4Rate),ocp,DVal);
            MulM4ProcVal(StringToVal(lCstr,M4Rate),odp,CVal);
          end;
        end else begin
          MulM4ProcVal(StringToVal(lCstr,M4Rate),ocp,DVal);
          MulM4ProcVal(StringToVal(lCstr,M4Rate),odp,CVal);
        end;
      end else begin
        RepSpec.sStartDate = CurrentDate;
        RepSpec.sEndDate = CurrentDate;
        tstr = lCstr;
//        if (strPCeq(decimalPt,".")) then
//          Express2_it(tstr,2);
        CVal = StringToVal(tstr,M4Rate);
      end;
    end;
  end;
  if (roundf) then begin
    dvalp = Round(DVal,SetRoundModeD(0));
    cvalp = Round(CVal,SetRoundModeD(0));
  end else begin
    dvalp = Round(DVal,DefaultRoundMode);
    cvalp = Round(CVal,DefaultRoundMode);
  end;
//Kaido doesn't like this below  
  if (dvalp==0) then begin dvalp = blankval; end;
  if (cvalp==0) then begin cvalp = blankval; end;
  RETURN;
END;

function Boolean APAutoTrans(record VIVc VIp,Integer rownr)
BEGIN
  row VIVc VIrw;
  row AutVc Autrw;
  record AutVc Autr;
  Boolean res;
  Boolean Auts;
  LongInt i;
  LongInt anrows;
  Integer trow;
  val dval,crval,tval;
  row VIVc OrgRow;
  Integer sf,nfr;
  Boolean backstep;
  string 255 tstr;
  Integer iv;
  LongInt blnkl;
  val blnkv;
  val od,oc;
  record AccVc Accr;

//  MatSize(wn,&sf,&nfr);
  OrgRow.Sum = VIp.PayVal - VIp.VATVal; 
  MatRowGet(VIp,rownr,VIrw);
  Autr.Code = VIrw.AccNumber;
  if (rownr>=1) then begin
    MatRowGet(VIp,rownr-1,VIrw);
    if (VIrw.stp==1) then begin
      CopyRow(VIp,VIrw,OrgRow);
      OrgRow.Item = "";
      OrgRow.PRCode = "";
      OrgRow.qty = blankval;
    end;
  end;
  if (blank(Autr.Code)) then begin goto LAPAutoTrans; end;
  Auts = ReadFirstMain(Autr,1,true);
  if (Auts==false) then begin goto LAPAutoTrans; end;
  res = true;
  if (MatRowCnt(Autr)==0) then begin goto LAPAutoTrans; end;
  res = true;
  anrows = MatRowCnt(Autr);
  if (anrows==0) then begin goto LAPAutoTrans; end;
  trow = rownr-1;
  for (i=0;i<anrows; i=i+1) begin
    MatRowGet(Autr,i,Autrw);
    trow = trow + 1;
    if (i==0) then begin
      if (trow>0) then begin
        if (Autrw.AccNumber=="!") then begin
          backstep = true;
          trow = trow - 1;
        end;
      end;
    end;
    if (trow>298) then begin goto LAPAutoTrans; end;
    if (trow>rownr-1) then begin
      ClearRow(VIp,VIrw,1);
    end;
      VIrw.stp = 1;
      VIrw.ovst = 0;
      blnkl = -1;
      VIrw.PrepayNr = blnkl;
      VIrw.PrepayAmount = blnkv;
      VIrw.VATVal = blnkv;
      tstr = Autrw.AccNumber;
      if (tstr=="#") then begin
        tstr = OrgRow.AccNumber;
      end;
      if ((i==0) and (backstep==true)) then begin
        tstr = OrgRow.AccNumber;
      end;
      VIrw.AccNumber = tstr;
      tstr = Autrw.objstr;
      if (tstr=="#") then begin
        tstr = OrgRow.Objects;
      end;
      if ((i==0) and (backstep==true)) then begin
        if (blank(tstr)) then begin
          tstr = OrgRow.Objects;
        end;
      end;
      VIrw.Objects = tstr;
      tstr = Autrw.comstr;
      if (tstr=="#") then begin
        tstr = OrgRow.Comment;
      end;
      if ((i==0) and (backstep==true)) then begin
        if (blank(tstr)) then begin
          tstr = OrgRow.Comment;
        end;
      end;
      if (blank(tstr)) then begin
        MatRowPut(VIp,trow,VIrw);
        APAccName(VIp,trow,true);
        MatRowGet(VIp,trow,VIrw);
      end else begin
        VIrw.Comment = tstr;
      end;
      tstr = Autrw.VATCode;
      if (tstr=="#") or (tstr=="!") then begin
        tstr = OrgRow.VATCode;
      end;
      VIrw.VATCode = tstr; 
      VIrw.TaxTemplateCode = Autrw.TaxTemplateCode;
      if (Autrw.TaxTemplateCode=="#") or (Autrw.TaxTemplateCode=="!") then begin
        VIrw.TaxTemplateCode = OrgRow.TaxTemplateCode;        
      end;
      if ((Autrw.dstr=="=") or (Autrw.cstr=="=")) then begin
        tval = 0;
        VIrw.Sum = 0;
        VISumup(VIp,tval);
//        tval = -tval; how can it balance + 
        VIrw.Sum = tval;
      end else begin
        od = blankval;
        oc = blankval;
        if (OrgRow.Sum>=0) then begin
          od = OrgRow.Sum;
        end else begin
          oc = -OrgRow.Sum;
        end;
        ATransVal(od,oc,Autrw.dstr,Autrw.cstr,dval,crval,Autr.DontSwap!=0);
        tval = dval - crval;
        VIrw.Sum = tval;
      end;
      if (blank(VIrw.VATCode)) then begin
        Accr.AccNumber = VIrw.AccNumber;
        ReadFirstMain(Accr,1,true);
        VIrw.VATCode = Accr.VATCode;
      end;
      if (blank(VIrw.TaxTemplateCode)) then begin
        Accr.AccNumber = VIrw.AccNumber;
        ReadFirstMain(Accr,1,true);
        VIrw.TaxTemplateCode = Accr.TaxTemplateCode;
      end;
      MatRowPut(VIp,trow,VIrw);      
  end;
  VICalcVals(VIp);
LAPAutoTrans:;
  APAutoTrans = res;
  RETURN;
END;

global
function Boolean VIVc_PasteAccNumber(var record VIVc VIp,string prevaccnumber,Boolean changedf,Integer rownr)
BEGIN
  Boolean res,autodonef,fulldataf;
  row VIVc VIrw;
  string 255 tstr;
  record AccVc pAccr;

  res = false;
//  tstr = USetStr(1023);//done below
  MatRowGet(VIp,rownr,VIrw);   
  if (nonblank(prevaccnumber)) then begin
    pAccr.AccNumber = prevaccnumber;
    ReadFirstMain(pAccr,1,true);
  end; 
  if (VIrw.AccNumber!=prevaccnumber) and (nonblank(prevaccnumber)) then begin
//  if (VIrw.AccNumber!=prevaccnumber) then begin
    fulldataf = true; 
  end;
  if ((changedf) or ((blank(VIrw.Comment)) and (nonblank(VIrw.AccNumber)))) then begin
    if (APAutoTrans(VIp,rownr)) then begin 
      autodonef = true; 
    end;
    MatRowGet(VIp,rownr,VIrw);   
    res = true;
  end;
  if (changedf) then begin
    if (blank(VIrw.Objects)) then begin
      PasteAccObj(VIrw.AccNumber,tstr);
      VIrw.Objects = tstr;
      MatRowPut(VIp,rownr,VIrw);  
      res = true;
    end;
  end;
  MatRowGet(VIp,rownr,VIrw);  
  if ((changedf and autodonef==false) or (VIrw.Comment==USetStr(1023)) or ((blank(VIrw.Comment)) and (nonblank(VIrw.AccNumber)))) then begin
    MatRowPut(VIp,rownr,VIrw);
    APAccName(VIp,rownr,fulldataf);
    MatRowGet(VIp,rownr,VIrw);
    res = true;
  end;
  if (changedf) then begin
    VICalcVals(VIp);
  end;  
  VIVc_PasteAccNumber = res;
  RETURN;
END;

global
function Boolean VIVc_PasteInventoryNr(var record VIVc VIr,Integer rownr)
begin
  Boolean res;
  row VIVc VIrw;
  record AT2UnitVc AT2Unitr;
  
  MatRowGet(VIr,rownr,VIrw);
  AT2Unitr.InventoryNr = VIrw.InventoryNr;
  if (ReadFirstMain(AT2Unitr,1,true)) then begin
    VIrw.qty = AT2Unitr.Quantity;
    MatRowPut(VIr,rownr,VIrw);
    res = true;
  end;
  
  VIVc_PasteInventoryNr = res;
  return;
end;

global
procedure VIVc_PasteACShort(var record VIVc VIp,Integer rownr,Boolean changedf)
BEGIN
  row VIVc VIrw;
  string 255 tstr,obj;
  Boolean autof;

  MatRowGet(VIp,rownr,VIrw);
  GetACShortAccount(VIrw.ACShort,tstr,obj);
  VIrw.AccNumber = tstr;
  VIrw.Objects = obj;
  MatRowPut(VIp,rownr,VIrw);
  tstr = USetStr(1023);
  if ((blank(VIrw.Comment)) or (VIrw.Comment==tstr)) then begin
    if (APAutoTrans(VIp,rownr)) then begin 
      autof = true;
    end;
    MatRowGet(VIp,rownr,VIrw);   
  end;
  if (blank(VIrw.Objects)) then begin
    PasteAccObj(VIrw.AccNumber,obj);
    VIrw.Objects = obj;
  end;
  if ((changedf) or (VIrw.Comment==tstr)) then begin  
    APAccName(VIp,rownr,autof==false);
  end;
  VICalcVals(VIp);
  RETURN;
END;

procedure RemoveVISpecialRows(record VIVc credVIr)
begin
  row VIVc credVIrw;
  Integer i,rwcnt;
  Boolean testf;
  
  rwcnt = MatRowCnt(credVIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(credVIr,i,credVIrw);
    testf = false;
    if (credVIrw.stp==kInvoiceRowTypePrepayment) then begin
      testf = true;
    end;
    if (testf) then begin
      MatRowDelete(credVIr,i);
      i = i - 1;
      rwcnt = MatRowCnt(credVIr);
    end;
  end;  
  return;
end;

global
updating function Integer CreateCreditNoteVI(record VIVc VIr,var record VIVc credVIr)
begin
  Integer res;
  Boolean TrHs;
  LongInt lNewNr;
  record SRBlock SRRec;
  record PDVc PDr;
  val fr,to1,to2,br1,br2;
  record APAccBlock APAccb;
  record APVc APr;
   
  res = 0;
  BlockLoad(APAccb);
  if (APAccb.NoOverPayVI!=0) then begin
    APr.SerNr = VIr.SerNr;
    if (ReadFirstMain(APr,1,true)==false) then begin
      res = 20874;
      goto LCreateCreditNoteVI;
    end;
  end;
  RecordCopy(credVIr,VIr);
  credVIr.InvType = kInvoiceTypeCredit;
  credVIr.PayDeal = "";
  VIVcRecordDuplicateDo(credVIr);
  RemoveVISpecialRows(credVIr);
  
  credVIr.InvType = kInvoiceTypeCredit;
  credVIr.CredMark = USetStr(1078);
  credVIr.InvDate = CurrentDate;
  credVIr.TransDate = credVIr.InvDate;
  credVIr.DueDate = credVIr.InvDate;
//  credVIr.SerNr = NextSerNr("VIVc",credVIr.TransDate,-1,false,credVIr.LangCode); // Was using the incorrect number series defined in : Default nubmer serries 
  credVIr.OKFlag = 0;
    
  //find the first Pay.Term with Credit Note type
  credVIr.PayDeal = "";
  TrHs = true;
  while (LoopMain(PDr,1,TrHs)) begin
    if ((PDr.PDType)==3) then begin //credit note
      TrHs = false;
      credVIr.PayDeal = PDr.Code;
      VIVc_PastePayDeal(credVIr);
      res = 0;
    end;
  end;  
  credVIr.InstallmentInv = VIr.InstallmentInv;
  credVIr.POSerNr = VIr.POSerNr;
  credVIr.FrRate = VIr.FrRate;
  credVIr.ToRateB1 = VIr.ToRateB1;
  credVIr.ToRateB2 = VIr.ToRateB2;
  credVIr.BaseRate1 = VIr.BaseRate1;
  credVIr.BaseRate2 = VIr.BaseRate2;

  credVIr.VATFrRate = VIr.VATFrRate;
  credVIr.VATToRateB1 = VIr.VATToRateB1;
  credVIr.VATToRateB2 = VIr.VATToRateB2;
  credVIr.VATBaseRate1 = VIr.VATBaseRate1;
  credVIr.VATBaseRate2 = VIr.VATBaseRate2;
  credVIr.CredInv = VIr.SerNr;    
  credVIr.HoldSum = blankval;
  GetFullCurncyRate(VIr.CurncyCode,VIr.TransDate,fr,to1,to2,br1,br2);
  VIr.FrRate = fr;
  VIr.ToRateB1 = to1; 
  VIr.ToRateB2 = to2;
  VIr.BaseRate1 = br1;
  VIr.BaseRate2 = br2;   

  VIr.VATFrRate = fr;
  VIr.VATToRateB1 = to1; 
  VIr.VATToRateB2 = to2;
  VIr.VATBaseRate1 = br1;
  VIr.VATBaseRate2 = br2;   
LCreateCreditNoteVI:;  
  CreateCreditNoteVI = res;
  return;
end;

global
function Integer DoCLOutFromVIDRemote(record VIVc VIr,var record CLOutVc CLOutr)
begin
  Integer res;
  LongInt clout;
  record CUVc VEr;
  string 255 tstr;
  record MainCLBlock MainCLRec;
  val frrate,to1,to2,br1,br2;
  row CLOutVc CLOutrw;
  Integer rwcnt,err;
  
  BlockLoad(MainCLRec);
  if (MainCLRec.CashCollection!=0) then begin
    if (VIr.InvType!=kInvoiceTypeEmployee and VIr.InvType!=kInvoiceTypeCash and VIr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
      goto LDoCLOutFromVIDRemote;
    end;
    if (CLOutforVIExists(VIr.SerNr,"VIVc",clout)) then begin
      res = 1;
      goto LDoCLOutFromVIDRemote;
    end;
  end;
  CLOutr.RefStr = USetStr(1152) & "." & VIr.SerNr;
  CLOutr.SerNr = -1;
  CLOutr.Total = VIr.PayVal;
//      CLOutr.VATVal = VIr.VATVal;
  if (CLOutr.VATVal==0) then begin
//        CLOutr.VATVal = VIr.CalcVATVal;      
  end;
  CLOutr.NetVal = CLOutr.Total - CLOutr.VATVal;
  CLOutr.TransDate = CurrentDate;
  CLOutr.PayMode = VIr.PayDeal;
  if (GetPM(CLOutr.PayMode,tstr,tstr)==false) then begin
    CLOutr.PayMode = "";
  end;  
  if (blank(CLOutr.PayMode)) then begin
    CLOutr.PayMode = MainCLRec.DefPM;
  end;
  CLOutr.CorspCode = MainCLRec.DefCorspCode;
  SetSalesMan(tstr,VIr.SalesMan);
  CLOutr.Person = tstr;    
  CLOutr.ARonTR = VIr.APonTR;
  CLOutr.CUCode = VIr.VECode;
  CLOutr.CUName = VIr.VEName;
  VEr.Code = CLOutr.CUCode;
  if (ReadFirstMain(VEr,1,true)) then begin      
  end;
  CLOutr.Addr0 = VEr.InvAddr0;
  CLOutr.Addr1 = VEr.InvAddr1;
  CLOutr.Addr2 = VEr.InvAddr2;
  CLOutr.Addr3 = VEr.InvAddr3;
  CLOutr.Addr4 = VEr.InvAddr4;
  CLOutr.Comment = VIr.Comment;
  CLOutr.CurncyCode = VIr.CurncyCode;
  GetFullCurncyRate(CLOutr.CurncyCode,CLOutr.TransDate,frrate,to1,to2,br1,br2);
  CLOutr.FrRate = frrate;
  CLOutr.ToRateB1 = to1; 
  CLOutr.ToRateB2 = to2;
  CLOutr.BaseRate1 = br1;
  CLOutr.BaseRate2 = br2;
  if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    CLOutr.Total = -CLOutr.Total;
    CLOutr.VATVal = -CLOutr.VATVal;
    CLOutr.NetVal = -CLOutr.NetVal;
  end;
  if (MainCLRec.CashCollection==0) then begin
    if (VIr.InvType!=kInvoiceTypeEmployee and VIr.InvType!=kInvoiceTypeCash and VIr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
      ClearRow(CLOutr,CLOutrw,1);
      if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
        CLOutrw.Type = 1;
      end else begin
        CLOutrw.Type = 2;
      end;
      CLOutrw.TransNr = VIr.SerNr;
      CLOutrw.TransOfficialSerNr = VIr.OfficialSerNr;
      rwcnt = MatRowCnt(CLOutr);
      MatRowPut(CLOutr,rwcnt,CLOutrw);
      err = CLOutVc_PasteTransNr(CLOutr,rwcnt);
    end;
    if (err==0) then begin
      CLOutr.FileName = "VIVc";
      CLOutr.FSerNr = VIr.SerNr;  
    end;
  end else begin
    CLOutr.FileName = "VIVc";
    CLOutr.FSerNr = VIr.SerNr;  
  end;
LDoCLOutFromVIDRemote:;
  DoCLOutFromVIDRemote = res;
  return;
end;  

global
function Integer VIVc_CalcRetentionLine(var record VIVc VIr,var val retentionv,var string retentionacc,var string retentionvatcode)
begin
  Integer res;
  record PRVc PRr;
  val v;
  record PRAccBlock PRAb;
  record VEPRRetentionVc VEPRRr;
  
  retentionacc = "";
  retentionv = blankval;
  VEPRRr.PRCode = VIr.PRCode;
  VEPRRr.VECode = VIr.VECode;
  if (ReadFirstMain(VEPRRr,2,true)) then begin
    retentionv = VEPRRr.RetSum - VEPRRr.RetInvd;
  end;
  BlockLoad(PRAb);
  retentionacc = PRAb.APRetentionAcc;
  retentionvatcode = PRAb.APRetentionVATCode;
  if (blank(retentionacc)) then begin
    res = 22083;
  end;
  VIVc_CalcRetentionLine = res;
  return;
end;
