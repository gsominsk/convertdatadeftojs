external procedure ExtractObj(string,var Integer,var string);
remote function Boolean SyncINToLocalIN_NextRecord(string,var LongInt,var LongInt,var record INVc,var LongInt,var record ITVc);
remote function Boolean SyncPLToLocalPL_NextRecord(string,Integer,var LongInt,var LongInt,var record PLVc);
remote function Boolean SyncSPDToLocalSPD_NextRecord(string,var LongInt,var LongInt,var record SerialPortDeviceVc);

procedure CopyITToLocalIT(record ITVc ITr,var record LocalITVc LocalITr)
begin 
  Integer i,rwcnt;
  row ITVc ITrw;
  row LocalITVc LocalITrw;

  LocalITr.Code = ITr.Code;
  LocalITr.Comment = ITr.Comment;
  LocalITr.CostAcc = ITr.CostAcc;
  LocalITr.InvAcc = ITr.InvAcc;
  LocalITr.CostPerc = ITr.CostPerc;
  LocalITr.PrimaryCostModel = ITr.PrimaryCostModel;
  LocalITr.Sign = ITr.Sign;
  LocalITr.SalesAcc = ITr.SalesAcc;
  LocalITr.VATCodeDom = ITr.VATCodeDom;
  LocalITr.VATCodeEU = ITr.VATCodeEU;
  LocalITr.VATCodeExp = ITr.VATCodeExp;
  LocalITr.EUSalesAcc = ITr.EUSalesAcc;
  LocalITr.ExpSalesAcc = ITr.ExpSalesAcc;
  LocalITr.ExclFrLabPr = ITr.ExclFrLabPr;
  LocalITr.Internal = ITr.Internal;
  LocalITr.InclItemFreight = ITr.InclItemFreight;
  LocalITr.FixedFreight = ITr.FixedFreight;
  LocalITr.SwapAccounts = ITr.SwapAccounts;
  LocalITr.PeriodCode = ITr.PeriodCode;
  LocalITr.PurchAcc = ITr.PurchAcc;
  LocalITr.CredSalesAcc = ITr.CredSalesAcc;
  LocalITr.CredEUSalesAcc = ITr.CredEUSalesAcc;
  LocalITr.CredExpSalesAcc = ITr.CredExpSalesAcc;
  LocalITr.CredVATCodeDom = ITr.CredVATCodeDom;
  LocalITr.CredVATCodeEU = ITr.CredVATCodeEU;
  LocalITr.CredVATCodeExp = ITr.CredVATCodeExp;
  LocalITr.EUCodex = ITr.EUCodex;
  LocalITr.WIPAcc = ITr.WIPAcc;
  LocalITr.Type = ITr.Type;
  LocalITr.CompUsage = ITr.CompUsage;
  LocalITr.PriceVarianceAcc = ITr.PriceVarianceAcc;
  LocalITr.UsageVarianceAcc = ITr.UsageVarianceAcc;
  LocalITr.ClassType = ITr.ClassType;
  LocalITr.EUCostAcc = ITr.EUCostAcc;
  LocalITr.ExpCostAcc = ITr.ExpCostAcc;
  LocalITr.EUPurchAcc = ITr.EUPurchAcc;
  LocalITr.ExpPurchAcc = ITr.ExpPurchAcc;
  LocalITr.Objects = ITr.Objects;
  LocalITr.ProdControl = ITr.ProdControl;
  LocalITr.ProdWCostAcc = ITr.ProdWCostAcc;
  LocalITr.QueuedCostModel = ITr.QueuedCostModel;
  LocalITr.FIFOPerSerialNr = ITr.FIFOPerSerialNr;
  LocalITr.FIFOPerLocation = ITr.FIFOPerLocation;
  LocalITr.WAPerLocation = ITr.WAPerLocation;
  LocalITr.CostPricePerLocation = ITr.CostPricePerLocation;
  
  rwcnt = MatRowCnt(ITr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ITr,i,ITrw);
    LocalITrw.LangCode = ITrw.LangCode;
    LocalITrw.Text = ITrw.Text;
    MatRowPut(LocalITr,i,LocalITrw);
  end;  
  return;
end;

procedure CopyPLToLocalPL(record PLVc PLr,var record LocalPLVc LocalPLr)
begin
  LocalPLr.PLCode = PLr.PLCode;
  LocalPLr.Comment = PLr.Comment;
  LocalPLr.ArtCode = PLr.ArtCode;
  LocalPLr.ExVatPrice = PLr.ExVatPrice;
  LocalPLr.SalesAcc = PLr.SalesAcc;
  LocalPLr.CustCode = PLr.CustCode;
  LocalPLr.NoOtherPricing = PLr.NoOtherPricing;
  LocalPLr.VATCode = PLr.VATCode;
  LocalPLr.DonotRecalculate = PLr.DonotRecalculate;
  LocalPLr.CostPrice = PLr.CostPrice;
  LocalPLr.BBGenTrans = PLr.BBGenTrans;
  LocalPLr.BBVarAcc = PLr.BBVarAcc;
  return;
end;

global
updating procedure SyncPLToLocalPL()
begin
  Integer wn;
  record RcVc RepSpec;
  record PLVc PLr;
  record LocalPLVc LocalPLr;
  LongInt seqnr,looppos;
  Boolean found;
  
  if (ClientMode) then begin
    wn = OpenWindow("SyncClass",0,0,"","",RepSpec);
    found = true;
    while (found) begin
      RecordClear(PLr);
      found = SyncPLToLocalPL_NextRecord("PLCode",3,looppos,seqnr,PLr);
      if (found) then begin
        LocalPLr.PLCode = PLr.PLCode;
        LocalPLr.ArtCode = PLr.ArtCode;
        LocalPLr.CustCode = PLr.CustCode;
        ReadFirstMain(LocalPLr,3,true);
        if (LocalPLr.seqnr!=seqnr) then begin
          CopyPLToLocalPL(PLr,LocalPLr);
          LocalPLr.seqnr = seqnr;
          RecordStore(LocalPLr,true);
        end;
      end;
    end;
    UpdateBrowses("LocalPLVc");
    CloseWindow(wn);
  end;  
  return;
end;

updating procedure SyncPLForOneItem(string artcode)
begin
  record PLVc PLr;
  record LocalPLVc LocalPLr;
  Boolean found;
  LongInt seqnr,looppos;

  found = true;
  while (found) begin
    RecordClear(PLr);
    PLr.ArtCode = artcode;
    found = SyncPLToLocalPL_NextRecord("ArtCode",1,looppos,seqnr,PLr);
    if (PLr.ArtCode!=artcode) then begin
      found = false;
    end;
    if (found) then begin
      LocalPLr.PLCode = PLr.PLCode;
      LocalPLr.ArtCode = PLr.ArtCode;
      LocalPLr.CustCode = PLr.CustCode;
      ReadFirstMain(LocalPLr,3,true);
      if (LocalPLr.seqnr!=seqnr) then begin
        CopyPLToLocalPL(PLr,LocalPLr);
        LocalPLr.seqnr = seqnr;
        RecordStore(LocalPLr,true);
      end;
    end;
  end;
  UpdateBrowses("LocalPLVc");
  return;
end;

updating procedure DeletePLForOneItem(string artcode)
begin
  record LocalPLVc LocalPLr;
  Boolean found;
  
  found = true;
  LocalPLr.ArtCode = artcode;
  while (LoopKey("ArtCode",LocalPLr,1,found)) begin
    if (LocalPLr.ArtCode!=artcode) then begin found = false; end;
    if (found) then begin
      RecordDelete(LocalPLr);
      StepBack(LocalPLr);
    end;
  end;
  return;
end;

updating procedure DeleteNotReadItems(Array string areadartcode,Integer acnt)
begin
  record LocalINVc LocalINr;
  record LocalITVc LocalITr;
  Boolean found,testf;
  Integer i;

  RecordClear(LocalINr); 
  found = true;
  while (LoopMain(LocalINr,1,found)) begin
    if (found) then begin
      testf = true;
      for (i=0;i<acnt;i=i+1) begin
        if (areadartcode[i]==LocalINr.Code) then begin
          testf = false;
          i = acnt;
        end;
      end;
      if (testf) then begin
        RecordDelete(LocalINr);
        StepBack(LocalINr);

        DeletePLForOneItem(LocalINr.Code);
        LocalITr.Code = LocalINr.Group;
        if (ReadFirstMain(LocalITr,1,true)) then begin
          RecordDelete(LocalITr);
        end;
      end;
    end;
  end;
  return;
end;


procedure CopyINToLocalIN(record INVc INr,var record LocalINVc LocalINr)
begin
  Integer i,rwcnt;
  row INVc INrw;
  row LocalINVc LocalINrw;

  LocalINr.Code = INr.Code;
  LocalINr.Name = INr.Name;
  LocalINr.Unittext = INr.Unittext;
  LocalINr.MinLevel = INr.MinLevel;
  LocalINr.Objects = INr.Objects;
  LocalINr.SalesAcc = INr.SalesAcc;
  LocalINr.UPrice1 = INr.UPrice1;
  LocalINr.ItemType = INr.ItemType;
  LocalINr.Group = INr.Group;
  LocalINr.InPrice = INr.InPrice;
  LocalINr.InvCode = INr.InvCode;
  LocalINr.ExtraCost = INr.ExtraCost;
  LocalINr.SerNrf = INr.SerNrf;
  LocalINr.Department = INr.Department;
  LocalINr.Weight = INr.Weight;
  LocalINr.Volume = INr.Volume;
  LocalINr.EUCodex = INr.EUCodex;
  LocalINr.InCurncyCode = INr.InCurncyCode;
  LocalINr.Bonus = INr.Bonus;
  LocalINr.Recepy = INr.Recepy;
  LocalINr.Markup = INr.Markup;
  LocalINr.BarCode = INr.BarCode;
  LocalINr.UpdateCost = INr.UpdateCost;
  LocalINr.LastPriceChange = INr.LastPriceChange;
  LocalINr.CalcPrice = INr.CalcPrice;
  LocalINr.VATCode = INr.VATCode;
  LocalINr.PriceFactor = INr.PriceFactor;
  LocalINr.Terminated = INr.Terminated;
  LocalINr.AvgMarkup = INr.AvgMarkup;
  LocalINr.LastPurchPrice = INr.LastPurchPrice;
  LocalINr.LastPurchCurncyCode = INr.LastPurchCurncyCode;
  LocalINr.WeighedAvPrice = INr.WeighedAvPrice; 
  LocalINr.Conversion1 = INr.Conversion1;
  LocalINr.Conversion2 = INr.Conversion2;
  LocalINr.WarrantyLength = INr.WarrantyLength;
  LocalINr.InvRecepy = INr.InvRecepy;
  LocalINr.EUSalesAcc = INr.EUSalesAcc;
  LocalINr.ExpSalesAcc = INr.Code;
  LocalINr.VATCodeEU = INr.VATCodeEU;
  LocalINr.VATCodeExp = INr.VATCodeExp;
  LocalINr.ChangePrice = INr.ChangePrice;
  LocalINr.RebCode = INr.RebCode;
  LocalINr.ExplodeRec = INr.ExplodeRec;
  LocalINr.Unittext2 = INr.Unittext2;
  LocalINr.UnitCoefficient = INr.UnitCoefficient;
  LocalINr.WarnText1 = INr.WarnText1;
  LocalINr.VARList = INr.VARList;
  LocalINr.ItemMaterial = INr.ItemMaterial;
  LocalINr.AlcPrc = INr.AlcPrc;
  LocalINr.DefaultSource = INr.DefaultSource;
  LocalINr.AlternativeCode = INr.AlternativeCode;
  LocalINr.CostAcc = INr.CostAcc;
  LocalINr.DefLocation = INr.DefLocation;
  LocalINr.LastBasePriceChange = INr.LastBasePriceChange;
  LocalINr.MaxLevel = INr.MaxLevel;
  LocalINr.LastPurchPrice2 = INr.LastPurchPrice2;
  LocalINr.Width = INr.Width;
  LocalINr.Height = INr.Height;
  LocalINr.Depth = INr.Depth;
  LocalINr.ContractItem = INr.ContractItem;
  LocalINr.Internal = INr.Internal;
  LocalINr.InclItemFreight = INr.InclItemFreight;
  LocalINr.FixedFreight = INr.FixedFreight;
  LocalINr.DispGroups = INr.DispGroups;
  LocalINr.HazLevCode = INr.HazLevCode;
  LocalINr.Density = INr.Density;
  LocalINr.xClassification = INr.xClassification;
  LocalINr.CredSalesAcc = INr.CredSalesAcc;
  LocalINr.CredEUSalesAcc = INr.CredEUSalesAcc;
  LocalINr.CredExpSalesAcc = INr.CredExpSalesAcc;
  LocalINr.CredVATCode = INr.CredVATCode;
  LocalINr.CredVATCodeEU = INr.CredVATCodeEU;
  LocalINr.CredVATCodeExp = INr.CredVATCodeExp;
  LocalINr.RentalItem = INr.RentalItem;
  LocalINr.CompUsage = INr.CompUsage;
  LocalINr.colnr = INr.colnr;
  LocalINr.VARMask = INr.VARMask;
  LocalINr.VARRepOrder = INr.VARRepOrder;
  LocalINr.VARSubsets = INr.VARSubsets;
  LocalINr.LocArea = INr.LocArea;
  LocalINr.EKNCode = INr.EKNCode;
  LocalINr.DefPalletItem = INr.DefPalletItem;
  LocalINr.QtyonPallet = INr.QtyonPallet;
  LocalINr.PalletWidth = INr.PalletWidth;
  LocalINr.PalletHeight = INr.PalletHeight;
  LocalINr.PalletDepth = INr.PalletDepth;
  LocalINr.Brand = INr.Brand;
  LocalINr.BrandType = INr.BrandType;
  LocalINr.PickArea = INr.PickArea;
  LocalINr.SWWCode = INr.SWWCode;
  LocalINr.RepaPricePerWeight = INr.RepaPricePerWeight;
  LocalINr.PalletsInPickArea = INr.PalletsInPickArea;
  LocalINr.DefPosWidth = INr.DefPosWidth;
  LocalINr.DefPosHeight = INr.DefPosHeight;
  LocalINr.DefPosDepth = INr.DefPosDepth;
  LocalINr.InPriceB2 = INr.InPriceB2;
  LocalINr.WeighedAvPriceB2 = INr.WeighedAvPriceB2;
  LocalINr.EUCostAcc = INr.EUCostAcc; 
  LocalINr.ExpCostAcc = INr.ExpCostAcc; 
  LocalINr.PalletLayers = INr.PalletLayers;
  LocalINr.QtyonPalletLayer = INr.QtyonPalletLayer;
  LocalINr.UserStr1 = INr.UserStr1;
  LocalINr.UserStr2 = INr.UserStr2;
  LocalINr.UserStr3 = INr.UserStr3;
  LocalINr.UserStr4 = INr.UserStr4;
  LocalINr.UserStr5 = INr.UserStr5;
  LocalINr.UserVal1 = INr.UserVal1;
  LocalINr.UserVal2 = INr.UserVal2;
  LocalINr.UserVal3 = INr.UserVal3;
  LocalINr.UserDate1 = INr.UserDate1;
  LocalINr.UserDate2 = INr.UserDate2;
  LocalINr.UserDate3 = INr.UserDate3;
  LocalINr.RentGroup = INr.RentGroup;
  LocalINr.FAGroup = INr.FAGroup;
  LocalINr.NetWeight = INr.NetWeight;
  LocalINr.PrimaryCostModel = INr.PrimaryCostModel;
  LocalINr.QueuedCostModel = INr.QueuedCostModel;
  LocalINr.CostPerc = INr.CostPerc;
  LocalINr.FIFOPerSerialNr = INr.FIFOPerSerialNr;
  LocalINr.FIFOPerLocation = INr.FIFOPerLocation;
  LocalINr.WAPerLocation = INr.WAPerLocation;
  LocalINr.CostPricePerLocation = INr.CostPricePerLocation;
  LocalINr.NotForSales = INr.NotForSales;
  LocalINr.SRUpdateCost = INr.SRUpdateCost;
  LocalINr.SuppSerialNr = INr.SuppSerialNr;
  LocalINr.MajStoneDet = INr.MajStoneDet;
  LocalINr.Colour = INr.Colour;
  LocalINr.Clarity = INr.Clarity;
  LocalINr.Cert = INr.Cert;
  LocalINr.MinStoneDet = INr.MinStoneDet;
  LocalINr.Metal = INr.Metal;
  LocalINr.RowWeight = INr.RowWeight;
  LocalINr.Size = INr.Size;
  LocalINr.Length = INr.Length;
  LocalINr.WatchBrand = INr.WatchBrand;
  LocalINr.StyleName = INr.StyleName;
  LocalINr.WatchMetal = INr.WatchMetal;
  LocalINr.Movement = INr.Movement;
  LocalINr.BrcStr = INr.BrcStr;
  LocalINr.Gender = INr.Gender;
  LocalINr.Other = INr.Other;
  LocalINr.Other2 = INr.Other2;
  LocalINr.Reference = INr.Reference;
  LocalINr.Perceptions = INr.Perceptions;
  rwcnt = MatRowCnt(INr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(INr,i,INrw);
    LocalINrw.LangCode = INrw.LangCode;
    LocalINrw.Text = INrw.Text;
    MatRowPut(LocalINr,i,LocalINrw);
  end;
  return;
end;

updating procedure SyncINToLocalINDo(string ckey,Array string areadartcode,var Integer acnt)
begin
  record INVc INr;
  record ITVc ITr;
  record LocalINVc LocalINr;
  record LocalITVc LocalITr;
  LongInt seqnr,looppos,itseqnr;
  Boolean found;

  found = true;
  while (found) begin
    RecordClear(INr);
    found = SyncINToLocalIN_NextRecord(ckey,looppos,seqnr,INr,itseqnr,ITr);
    if (found) then begin
      LocalINr.Code = INr.Code;
      ReadFirstMain(LocalINr,1,true);
LogText(0,"INr.Code " & INr.Code);      
      if (LocalINr.seqnr!=seqnr) then begin
        CopyINToLocalIN(INr,LocalINr);
        LocalINr.seqnr = seqnr;
        RecordStore(LocalINr,true);
        SyncPLForOneItem(INr.Code);

        LocalITr.Code = ITr.Code
        ReadFirstMain(LocalITr,1,true);
        if (LocalITr.seqnr!=itseqnr) then begin
          CopyITToLocalIT(ITr,LocalITr);
          LocalITr.seqnr = itseqnr;
          RecordStore(LocalITr,true);
        end;
      end;
      areadartcode[acnt] = INr.Code; 
      acnt = acnt + 1;
    end;
  end;
  return;
end;
            
global
updating procedure SyncINToLocalIN()
begin
  Integer wn;
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  string 255 class,ckey;
  Integer pos;
  Array string 255 areadartcode;
  Integer acnt;
  
  if (ClientMode) then begin
    BlockLoad(LMb);
    wn = OpenWindow("SyncClass",0,0,"","",RepSpec);
    if (blank(LMb.SyncINClass)) then begin
      ckey = "Code";
      SyncINToLocalINDo(ckey,areadartcode,acnt);
    end else begin
      pos = 0;
      ExtractObj(LMb.SyncINClass,pos,class);
      while (nonblank(class)) begin
        ckey = "DICode:" & class;
        SyncINToLocalINDo(ckey,areadartcode,acnt);
        ExtractObj(LMb.SyncINClass,pos,class);
      end;      
    end;
//    DeleteNotReadItems(areadartcode,acnt);
    UpdateBrowses("LocalINVc");
    CloseWindow(wn);
  end;  
  SyncPLToLocalPL;
  return;
end;


procedure CopySPDToLocalSPD(record SerialPortDeviceVc SPDr,var record LSerialPortDeviceVc LSPDr)
begin
  LSPDr.Code = SPDr.Code;
  LSPDr.DeviceType = SPDr.DeviceType;
  LSPDr.LocalMachineCode = SPDr.LocalMachineCode;
  LSPDr.Printer = SPDr.Printer;
  LSPDr.Port = SPDr.Port;
  LSPDr.BaudRate = SPDr.BaudRate;
  LSPDr.ByteSize = SPDr.ByteSize;
  LSPDr.Parity = SPDr.Parity;
  LSPDr.StopBits = SPDr.StopBits;
  LSPDr.Codepage = SPDr.Codepage;
  LSPDr.FlowControl = SPDr.FlowControl;
  LSPDr.EscSeqBefore = SPDr.EscSeqBefore;
  LSPDr.EscSeqAfter = SPDr.EscSeqAfter;
  LSPDr.FailureCode = SPDr.FailureCode;
  return;
end;

global
updating procedure SyncSPDToLocalSPD()
begin
  Integer wn;
  record RcVc RepSpec;
  record SerialPortDeviceVc SPDr;
  record LSerialPortDeviceVc LSPDr;
  LongInt seqnr,looppos;
  Boolean found;
  
  if (ClientMode) then begin
    wn = OpenWindow("SyncClass",0,0,"","",RepSpec);
    found = true;
    while (found) begin
      RecordClear(SPDr);
      found = SyncSPDToLocalSPD_NextRecord("Code",looppos,seqnr,SPDr);
      if (found) then begin
        LSPDr.Code = SPDr.Code;
        ReadFirstMain(LSPDr,1,true);
        if (LSPDr.seqnr!=seqnr) then begin
          CopySPDToLocalSPD(SPDr,LSPDr);
          LSPDr.seqnr = seqnr;
          RecordStore(LSPDr,true);
        end;
      end;
    end;
    UpdateBrowses("LSerialPortDeviceVc");
    CloseWindow(wn);
  end;  
  return;
end;
