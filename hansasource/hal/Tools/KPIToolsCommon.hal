global
function date KPIPreviousPeriodEnd(Integer PeriodLength,Integer PeriodType,Integer PeriodUnits)
begin
  date res;
  Integer add; 
  
  res = CurrentDate;
  switch (PeriodLength) begin
    case kPeriodLengthMonth:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddMonth(res,-PeriodUnits);  
        case kPeriodTypeLastFull:
          res = AddMonth(res,-PeriodUnits); 
          res.day = DaysInMonth(res.year,res.month);
        case kPeriodTypeLastUntilSamePoint:
          res = AddMonth(res,-1); 
      end;  
    case kPeriodLengthWeek:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddDay(res,-7 * PeriodUnits);  
        case kPeriodTypeLastFull:
          res = AddDay(res,-7 * PeriodUnits);  
          res = AddDAy(res,(7-GetDateId(res)));
        case kPeriodTypeLastUntilSamePoint:
//          res = AddDay(res,-7); 
          res = AddDay(res,-(7 * PeriodUnits - 1));
      end;  
    case kPeriodLengthQuarter:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddMonth(res,-3 * PeriodUnits);  
        case kPeriodTypeLastFull:
          res = AddMonth(res,-3 * PeriodUnits); 
          switch (Mod(res.month,3)) begin
            case 0: add = 0;
            case 1: add = 2;
            case 2: add = 1;
          end;         
          res = AddMonth(res,add); 
          res.day = DaysInMonth(res.year,res.month);
        case kPeriodTypeLastUntilSamePoint:
          res = AddMonth(res,-3);  
      end;  
    case kPeriodLengthYear:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddMonth(res,-12 * PeriodUnits);  
        case kPeriodTypeLastFull:
          res = AddMonth(res,-12 * PeriodUnits); 
          switch (Mod(res.month,12)) begin
            case 0: add = 0;
            case 1: add = 2;
            case 2: add = 1;
          end;         
          res = AddMonth(res,add); 
          res.day = DaysInMonth(res.year,res.month);
        case kPeriodTypeLastUntilSamePoint:
          res = AddMonth(res,-12);  
      end;  
  end;
//LogText(0,"PreviousPeriodEnd " & res);  
  KPIPreviousPeriodEnd = res;
  return;
end;

global
function date KPICurrentPeriodEnd(Integer PeriodLength,Integer PeriodType,Integer PeriodUnits)
begin
  date res;
  Integer add,m;
  
  res = CurrentDate;
  
  switch (PeriodLength) begin
    case kPeriodLengthWeek:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
        case kPeriodTypeLastFull:
          res = AddDAy(res,(7-GetDateId(res)));
        case kPeriodTypeLastUntilSamePoint:
      end;  
    case kPeriodLengthMonth:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
        case kPeriodTypeLastFull:
          res.day = DaysInMonth(res.year,res.month);
        case kPeriodTypeLastUntilSamePoint:
      end;  
    case kPeriodLengthQuarter:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
        case kPeriodTypeLastFull:          
          switch (Mod(res.month,3)) begin
            case 0: add = 0;
            case 1: add = 2;
            case 2: add = 1;
          end;         
          res = AddMonth(res,add); 
          res.day = DaysInMonth(res.year,res.month);
        case kPeriodTypeLastUntilSamePoint:
      end;  
    case kPeriodLengthYear:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
        case kPeriodTypeLastFull:          
          switch (Mod(res.month,12)) begin
            case 0: add = 0;
            case 1: add = 2;
            case 2: add = 1;
          end;         
          res = AddMonth(res,add); 
          res.day = DaysInMonth(res.year,res.month);
        case kPeriodTypeLastUntilSamePoint:
      end;  
  end;
//LogText(0,"CurrentPeriodEnd " & res);  
  KPICurrentPeriodEnd = res;
  return;
end;

global
function date KPIPeriodStart(Integer PeriodLength,Integer PeriodType,Integer PeriodUnits,Date enddate)
begin
  date res;
  Integer add,m,days;

  res = enddate;
  switch (PeriodLength) begin
    case kPeriodLengthMonth:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddMonth(res,-PeriodUnits);
/*
          days = DateDiff(CurrentDate,enddate);
          if (days==0) then begin
            res = AddMonth(res,-1);
          end else begin
            res = AddDay(res,-days);
          end;
*/
          res = AddDay(res,1);
        case kPeriodTypeLastFull:
//          res = AddMonth(res,-PeriodUnits);
//          res = AddDay(res,1);
          res.day = 1;
        case kPeriodTypeLastUntilSamePoint:
//          res = AddMonth(res,-1);
          res.day = 1;
      end;  
    case kPeriodLengthWeek:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddDay(res,-(7 * PeriodUnits - 1));
        case kPeriodTypeLastFull:
          res = AddDay(res,-(7 * PeriodUnits - 1));
        case kPeriodTypeLastUntilSamePoint:
//          res = AddDay(res,-6);
//          res = AddDAy(res,(-GetDateId(res)+1));
          res = AddDay(res,-(7 * PeriodUnits - 1));
      end;  
    case kPeriodLengthQuarter:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddMonth(res,-3 * PeriodUnits);
          res = AddDay(res,1);
        case kPeriodTypeLastFull:          
          res = AddMonth(res,-3 * PeriodUnits);
          res = AddDay(res,1);
        case kPeriodTypeLastUntilSamePoint:
          res.day = 1;
      end;  
    case kPeriodLengthYear:
      switch (PeriodType) begin
        case kPeriodTypeRolling:
          res = AddMonth(res,-12 * PeriodUnits);
          res = AddDay(res,1);
        case kPeriodTypeLastFull:          
          res = AddMonth(res,-12 * PeriodUnits);
//          res = AddDay(res,1);
          res.day = 1;
        case kPeriodTypeLastUntilSamePoint:
          res.day = 1;
      end;  
  end;
//LogText(0,"PeriodStart " & res & " days " & days);  
  KPIPeriodStart = res;
  return;
end;

