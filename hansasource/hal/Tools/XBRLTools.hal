global
procedure XBRLSettingsVc_PasteXBRLElement(var record XBRLSettingsVc XBRLSr,Integer rownr)
begin
  row XBRLSettingsVc XBRLSrw;
  record XBRLElementVc XBRLEr;
  
  MatRowGet(XBRLSr,rownr,XBRLSrw);
  XBRLEr.Code = XBRLSrw.XBRLElement;
  if (ReadFirstMain(XBRLEr,1,true)) then begin
    XBRLSrw.FieldName = XBRLEr.FieldName;
    XBRLSrw.FieldType = XBRLEr.FieldType;
    MatRowPut(XBRLSr,rownr,XBRLSrw);
  end;
  
  return;
end;

global
function Boolean GetUserDefRepRow(string Code,record UserDefRepVc UserDefRepr,var row UserDefRepVc UserDefReprw)
begin
  Boolean res;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(UserDefRepr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(UserDefRepr,i,UserDefReprw);
    if (UserDefReprw.Code==Code) then begin
      res = true;
      i = rwcnt;
    end;
  end;
  
  GetUserDefRepRow = res;
  return;
end;

global
procedure XBRLSettingsVc_PasteUserDefRepRow(var record XBRLSettingsVc XBRLSr,Integer rownr)
begin
  row XBRLSettingsVc XBRLSrw;
  record UserDefRepVc UserDefRepr;
  row UserDefRepVc UserDefReprw;
  record UserDefRepLinesVc UserDefRepLinesr;
  Integer i,rwcnt;
  
  MatRowGet(XBRLSr,rownr,XBRLSrw);
  UserDefRepr.shortname = XBRLSrw.UserDefRep;
  if (ReadFirstMain(UserDefRepr,1,true)) then begin
    if (UserDefRepr.Type==kUserDefRepBal or UserDefRepr.Type==kUserDefRepRes) then begin
      UserDefRepLinesr.shortname = XBRLSrw.UserDefRep;
      UserDefRepLinesr.IdKey = XBRLSrw.UserDefRepRow;
      if (ReadFirstMain(UserDefRepLinesr,2,true)) then begin
        XBRLSrw.Comment = Trim(UserDefRepLinesr.Comment);
      end;
    end;
    if (UserDefRepr.Type==kUserDefRepKFR or UserDefRepr.Type==kUserDefRepVAT) then begin
      if (GetUserDefRepRow(XBRLSrw.UserDefRepRow,UserDefRepr,UserDefReprw)) then begin
        XBRLSrw.Comment = Trim(UserDefReprw.Comment);
      end;
    end;
  end;
  MatRowPut(XBRLSr,rownr,XBRLSrw);
  
  return;
end;

global
function string 5 GetXBRLElementReportTypeCode(Integer Type)
begin
  string 5 res;
  
  switch (Type) begin
    case kXBRLElementReportTypeI_BAL: res = "I_BAL";
    case kXBRLElementReportTypeD_PL1: res = "D_PL1";
    case kXBRLElementReportTypeD_PL2: res = "D_PL2";
    case kXBRLElementReportTypeD_CF1: res = "D_CF1";
    case kXBRLElementReportTypeD_CF2: res = "D_CF2";
    case kXBRLElementReportTypeD_VAT: res = "D_VAT";
  end;
  
  GetXBRLElementReportTypeCode = res;
  return;
end;

global
function Boolean GetBalancePresentation(record CYBlock CYb,Integer RsType,Integer AccType)
begin
  Boolean negf;
  
  switch (RsType) begin
    case kRsTypeAccounts:
      negf = true;
      switch (AccType) begin
        case kAccTypeAsset:
          if (CYb.NS0[0]==0) then begin
            negf = false;
          end;
        case kAccTypeLiability:
          if (CYb.NS0[1]==0) then begin
            negf = false;
          end;
        case kAccTypeEquity:
          if (CYb.NS0[2]==0) then begin
            negf = false;
          end;
        case kAccTypeIncome:
          if (CYb.NS0[3]==0) then begin
            negf = false;
          end;
        case kAccTypeExpense:
          if (CYb.NS0[4]==0) then begin
            negf = false;
          end;
      end;              
    case kRsTypeSum:
      negf = false;
      switch (AccType) begin
        case kAccTypeAsset:
          if (CYb.NS0[0]!=0) then begin
            negf = true;
          end;
        case kAccTypeLiability:
          if (CYb.NS0[1]!=0) then begin
            negf = true;
          end;
        case kAccTypeEquity:
          if (CYb.NS0[2]!=0) then begin
            negf = true;
          end;
        case kAccTypeIncome:
          if (CYb.NS0[3]!=0) then begin
            negf = true;
          end;
        case kAccTypeExpense:
          if (CYb.NS0[4]!=0) then begin
            negf = true;
          end;
      end;                        
    case kRsTypeText:
    case kRsTypePageBreak:
  end;
  
  GetBalancePresentation = negf;
  return;
end;
