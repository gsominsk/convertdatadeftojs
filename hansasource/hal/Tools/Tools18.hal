external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);

global
updating procedure LockRecipe(string reccode)
BEGIN
  record RecVc Recr;
  
  Recr.Code = reccode;
  if (ReadFirstMain(Recr,1,true)) then begin
    if (Recr.OKFlag==0) then begin
      Recr.OKFlag = 1;
      if (RecordStore(Recr,true)) then begin
      end;
    end;
  end;
  RETURN;
END;

procedure GetCCatARAcc(string custcat,var string aracc)
BEGIN
  record CCatVc CCatr;
  
  aracc = "";
  CCatr.Code = custcat;
  if (ReadFirstMain(CCatr,1,true)) then begin
    if (nonblank(CCatr.ARAcc)) then begin
      aracc = CCatr.ARAcc;
    end;
  end;
  RETURN;
END;

procedure GetCustCategoryReb(string ccat,var string reb)
BEGIN
  record CCatVc CCatr;
  
  if (blank(reb)) then begin
    CCatr.Code = ccat;
    if (ReadFirstMain(CCatr,1,true)) then begin
      reb = CCatr.RebCode;
    end;
  end;  
  RETURN;
END;

global
procedure CalculateFreightWeight(record IVVc IVp,Boolean calcfreighf)
BEGIN
  record FreightWeightBlock frrec;
  row FreightWeightBlock frwrw;
  row IVVc IVrw;
  record INVc INr;
  Integer i,rwcnt;
  val totwt,t;
  
  if (calcfreighf) then begin
    BlockLoad(frrec);
    rwcnt = MatRowCnt(IVp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (ReadFirstItem(IVrw.ArtCode,INr,false,false)) then begin
        t = IVrw.Quant*INr.Weight;
        totwt = totwt + t;
      end;
    end;
    IVp.FrBase = blankval;
    IVp.FrGP = blankval;
    IVp.FrPrice = blankval;
    if (totwt!=0) then begin
      rwcnt = MatRowCnt(frrec);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(frrec,i,frwrw);
        if (frwrw.TotWeight==totwt) then begin
          IVp.FrBase = frwrw.TotFreight;
          IVp.FrGP = frwrw.TotFreight - frwrw.TotFreightCost;
          Base1ToOther(IVp.CurncyCode,IVp.FrBase,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,t,DefaultCurRoundOff);
          IVp.FrPrice = t;
        end;
      end;
    end;
  end;  
  RETURN;
END;

global
procedure CalculateFreightWeightCO(record COVc COp,Boolean calcfreighf)
BEGIN
  record FreightWeightBlock frrec;
  row FreightWeightBlock frwrw;
  row COVc COrw;
  record INVc INr;
  Integer i,rwcnt;
  val totwt,t;
  
  if (calcfreighf) then begin
    BlockLoad(frrec);
    rwcnt = MatRowCnt(COp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(COp,i,COrw);
      if (ReadFirstItem(COrw.ArtCode,INr,false,false)) then begin
        t = COrw.Quant*INr.Weight;
        totwt = totwt + t;
      end;
    end;
    COp.FrBase = blankval;
    COp.FrGP = blankval;
    COp.FrPrice = blankval;
    if (totwt!=0) then begin
      rwcnt = MatRowCnt(frrec);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(frrec,i,frwrw);
        if (frwrw.TotWeight==totwt) then begin
          COp.FrBase = frwrw.TotFreight;
          COp.FrGP = frwrw.TotFreight - frwrw.TotFreightCost;
          Base1ToOther(COp.CurncyCode,COp.FrBase,COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,t,DefaultCurRoundOff);
          COp.FrPrice = t;
        end;
      end;
    end;
  end;  
  RETURN;
END;

global
procedure GetTIPrice(record TIVc TIr,string empl,string timeclass,var Integer pl,var val price)
BEGIN
  record UserVc EMr;
  row TIVc TIrw;
  Integer i,rwcnt;
  Boolean testf;
  
  if (pl<1) then begin pl = 1; end;
  if (pl>6) then begin pl = 1; end;
  EMr.Code = empl;
  if (ReadFirstMain(EMr,1,true)) then begin
    rwcnt = MatRowCnt(TIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TIr,i,TIrw);
      testf = true;
      if (EMr.JobGroup<>TIrw.EMGroup) then begin testf = false; end;
      if (timeclass<>TIrw.TimeClass) then begin testf = false; end;
      if (testf) then begin
        if (pl==1) then begin price = TIrw.price0; end;
        if (pl==2) then begin price = TIrw.price1; end;
        if (pl==3) then begin price = TIrw.price2; end;
        if (pl==4) then begin price = TIrw.price3; end;
        if (pl==5) then begin price = TIrw.price4; end;
        if (pl==6) then begin price = TIrw.price5; end;
        goto LGetTIPrice;
      end;
    end;
  end;
LGetTIPrice:;
  RETURN;
END;

global
procedure GetTJGIPrice(record TJGIVc TJGIr,string item,string timeclass,var Integer pl,var val price)
BEGIN
  row TJGIVc TJGIrw;
  Integer i,rwcnt;
  Boolean testf;
  Boolean firstf;
  
  if (pl<1) then begin pl = 1; end;
  if (pl>6) then begin pl = 1; end;
  firstf = true;
  rwcnt = MatRowCnt(TJGIr);
L22GetTJGIPrice:;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TJGIr,i,TJGIrw);
    testf = true;
    if (firstf) then begin
      if (item<>TJGIrw.ItemCode) then begin testf = false; end;
    end else begin
      if (nonblank(item)) then begin testf = false; end;
    end;
    if (timeclass<>TJGIrw.TimeClass) then begin testf = false; end;
    if (testf) then begin
      if (pl==1) then begin price = TJGIrw.price0; end;
      if (pl==2) then begin price = TJGIrw.price1; end;
      if (pl==3) then begin price = TJGIrw.price2; end;
      if (pl==4) then begin price = TJGIrw.price3; end;
      if (pl==5) then begin price = TJGIrw.price4; end;
      if (pl==6) then begin price = TJGIrw.price5; end;
      goto LGetTJGIPrice;
    end;
  end;
  if (firstf) then begin
    firstf = false;
    goto L22GetTJGIPrice;
    Beep;Beep;
  end;
LGetTJGIPrice:;
  RETURN;
END;

