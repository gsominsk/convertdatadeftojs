external procedure RestBookingVc_PasteResCode(var record RestBookingVc);
external function Integer CheckTodoAcess(string,record ActVc,string);
external function LongInt AddM4Time(Time,LongInt,var Time);
external function LongInt TimeToMinutes(Time);
external procedure ExtractObj(string,var Integer,var string);
external function LongInt ResLen(Date,Date,Time,LongInt,LongInt,Integer);
external function LongInt DateDiff(Date,Date);

global
function Boolean SkipResTest(record ReservationStatusVc rsp,Boolean foravailabilty)
BEGIN
  record HotelBlock HotelSet;
  Boolean res;
  Integer stattype;
  
  BlockLoad(HotelSet);  
  stattype = rsp.StatType;
  if (foravailabilty) then begin
    if (HotelSet.InclPrelAvail==1) then begin
      if ((stattype!=0) and (stattype!=1) and (stattype!=3)) then begin res = true; end;
    end else begin
      if ((stattype!=0) and (stattype!=3)) then begin res = true; end;
    end;
  end else begin
    if (HotelSet.InclPrelOver==1) then begin
      if ((stattype!=0) and (stattype!=1) and (stattype!=3)) then begin res = true; end;
    end else begin
      if ((stattype!=0) and (stattype!=3)) then begin res = true; end;
    end;
  end;
  SkipResTest = res;
  RETURN;
END;

global
function LongInt RTLen(Date dp,Date sdp,Time stp,LongInt maxdays,LongInt rndd)
BEGIN
  LongInt res;
  
  res = DateDiff(sdp,dp);
//  if (rndd) then begin res = res + 1; end;
  if (res<0) then begin res = 0; end;
  if (res>=maxdays) then begin res = maxdays; end;
  RTLen = res;
  RETURN;
END;

global
updating procedure AddToResTypeSupport(record JobVc Jobr,Boolean deletef)
begin
  record ResTypeSupportVc ResTypeSupportr;
  record ResTypeSupportVc tmpResTypeSupportr;
  record ResTypeSupportVc oldResTypeSupportr;
  record ResTypeVc ResTyper;
  record ReservationStatusVc rsr;
  record ResVc Resr;
  record HotelBlock Hotelb;
  string 200 reslocation;
  string 200 restype;
  Time chkout,chkin;
  LongInt startpos,endpos,i;
  LongInt ddif;
  LongInt maxdays;
  
  maxdays = 20;
  BlockLoad(Hotelb);
  chkout = Hotelb.CheckOut;
  chkin = Hotelb.CheckIn;
  rsr.Code = Jobr.ResStatus;
  if (ReadFirstMain(rsr,1,true)) then begin
    if (SkipResTest(rsr,true)) then begin
      goto LAddToResTypeSupport;
    end;
  end;
  reslocation = "";
  restype = Jobr.Type;
  if (nonblank(Jobr.ResCode)) then begin
    Resr.Code = Jobr.ResCode;
    if (ReadFirstMain(Resr,1,true)) then begin
      reslocation = Resr.ResLoc;
      restype = Resr.Type;
    end;
  end else begin
    ResTyper.Code = restype;
    if (ReadFirstMain(ResTyper,1,true)) then begin
      reslocation = ResTyper.ResLoc;
    end;
  end;
  if ((blankdate(Jobr.EndDate)) or (DateDiff(Jobr.EndDate,Jobr.TransDate)>maxdays)) then begin
    if (deletef) then begin
      ResTypeSupportr.JobNr = Jobr.SerNr;
      ResTypeSupportr.Type = 1;
      if (ReadFirstKey("JobNr",ResTypeSupportr,2,true)) then begin
        RecordDelete(ResTypeSupportr);
      end;
    end else begin
      ResTypeSupportr.Date = Jobr.TransDate;
      ResTypeSupportr.EndDate = Jobr.EndDate;
      ResTypeSupportr.StartTime = Jobr.StartTime;
      ResTypeSupportr.EndTime = Jobr.EndTime;
      ResTypeSupportr.JobNr = Jobr.SerNr;
      ResTypeSupportr.Code = restype;
      ResTypeSupportr.ResLoc = reslocation;
      ResTypeSupportr.Qty = 1;
      ResTypeSupportr.Type = 1;
      ResTypeSupportr.SerNr = NextSerNr("ResTypeSupportVc",ResTypeSupportr.Date,-1,false,"");
      RecordInsert(ResTypeSupportr,false);
    end;
  end else begin
    startpos = RTLen(Jobr.TransDate,Jobr.TransDate,Jobr.StartTime,maxdays,0);
    endpos = RTLen(Jobr.TransDate,Jobr.EndDate,Jobr.EndTime,maxdays,1);
    if (chkout!=chkin) then begin
      if (Jobr.StartTime<=chkout) then begin startpos = startpos - 1; end;
      if (Jobr.EndTime<=chkin) then begin endpos = endpos - 1; end;
    end else begin
      if (Jobr.StartTime<=chkout) then begin startpos = startpos - 1; end;
      if (Jobr.EndTime<chkin) then begin endpos = endpos - 1; end;
    end;
    for (i=startpos;i<=endpos;i=i+1) begin
      if (i>=0) then begin
        ResTypeSupportr.Date = AddDay(Jobr.TransDate,i);
        ResTypeSupportr.Code = restype;
        ResTypeSupportr.ResLoc = reslocation;
        ResTypeSupportr.Type = 0;
        RecordCopy(tmpResTypeSupportr,ResTypeSupportr);
        if (ReadFirstKey("CodeDate",tmpResTypeSupportr,4,true)) then begin
          RecordCopy(oldResTypeSupportr,tmpResTypeSupportr);
          if (deletef) then begin
            tmpResTypeSupportr.Qty = tmpResTypeSupportr.Qty - 1;
          end else begin
            tmpResTypeSupportr.Qty = tmpResTypeSupportr.Qty + 1;
          end;
          RecordUpdate(oldResTypeSupportr,tmpResTypeSupportr,false);
        end else begin
          if (deletef==false) then begin
            ResTypeSupportr.Qty = 1;
            ResTypeSupportr.SerNr = NextSerNr("ResTypeSupportVc",ResTypeSupportr.Date,-1,false,"");
            RecordInsert(ResTypeSupportr,false);
          end;
        end;
      end;
    end;
  end;
LAddToResTypeSupport:;
  return;
end;

procedure Do_ReservationsInDayResType(string restype,string reslocation,string resclass,Date dp,
                                      LongInt maxdays,Array LongInt ra,Time chkin,Time chkout,var LongInt readrecs,var LongInt usedrecs)//tmpjarek
begin
  record ResVc Resr;
  record JobVc Jobr;
  Boolean TrHs;
  string 255 ckey;
  Boolean testf;
  LongInt daycnt;
  LongInt startpos;
  LongInt endpos;
  LongInt ddif;
  record ReservationStatusVc rsr;
  Integer lenclass;
  LongInt i;
  Date blankd;

  daycnt = 0;
  ckey = "CalTypeStartTime";
  lenclass = 4;
  while (lenclass>0) begin
    ResetLoop(Jobr);
    Jobr.Type = restype;
    Jobr.LengthClass = lenclass;
    Jobr.TransDate = dp;
    switch (lenclass) begin
      case 4: Jobr.TransDate = blankd;
      case 3: Jobr.TransDate = AddDay(Jobr.TransDate,-366);
      case 2: Jobr.TransDate = AddDay(Jobr.TransDate,-31);
      case 1: Jobr.TransDate = AddDay(Jobr.TransDate,-7);
      case 0: ;
    end;
    TrHs = true;
    while (LoopKey(ckey,Jobr,3,TrHs)) begin
      ddif = DateDiff(Jobr.TransDate,dp);
      if (ddif>=maxdays) then begin TrHs = false; end;
      if (Jobr.LengthClass!=lenclass) then begin TrHs = false; end;
      if (Jobr.Type!=restype) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;
        if (Jobr.EndDate<dp) then begin testf = false; end;
        if (testf) then begin
          rsr.Code = Jobr.ResStatus;
          if (ReadFirstMain(rsr,1,true)) then begin
            if (SkipResTest(rsr,true)) then begin
              testf = false;
            end;
          end;
        end;
        if (testf) then begin
          if (nonblank(Jobr.ResCode)) then begin
            Resr.Code = Jobr.ResCode;
            ReadFirstMain(Resr,1,true);
            readrecs = readrecs + 1;
            usedrecs = usedrecs + 1;
            if (nonblank(reslocation)) then begin
              if (Resr.ResLoc!=reslocation) then begin testf = false; end;
            end;
            if (nonblank(resclass)) then begin
              if (SetInSet(resclass,Resr.Class)==false) then begin testf = false; end;
            end;
          end;
        end;
        if (testf) then begin
          startpos = RTLen(dp,Jobr.TransDate,Jobr.StartTime,maxdays,0);
          endpos = RTLen(dp,Jobr.EndDate,Jobr.EndTime,maxdays,1);
          if (chkout!=chkin) then begin
            if (Jobr.StartTime<=chkout) then begin startpos = startpos - 1; end;
            if (Jobr.EndTime<=chkin) then begin endpos = endpos - 1; end;
          end else begin
            if (Jobr.StartTime<=chkout) then begin startpos = startpos - 1; end;
            if (Jobr.EndTime<chkin) then begin endpos = endpos - 1; end;
          end;
          for (i=startpos;i<=endpos;i=i+1) begin
            if ((i>=0) and (i<maxdays)) then begin
              ra[i] = ra[i] - 1;
            end;
          end;
        end;
      end;
    end;
    lenclass = lenclass - 1;
  end;
  return;
end;

procedure Do_ReservationsInDay2Ra(record ResVc Resr,string restype,string reslocation,string resclass,Boolean restypef,Date dp,
                                  LongInt maxdays,Array LongInt ra,Time chkin,Time chkout,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  record JobVc Jobr;
  Boolean TrHs;
  string 255 ckey;
  Boolean testf;
  LongInt daycnt;
  LongInt startpos;
  LongInt endpos;
  LongInt ddif;
  record ReservationStatusVc rsr;
  Integer lenclass;
  LongInt i;
  Date blankd;
  
  daycnt = 0;
  ckey = "CalResStartTime";
  lenclass = 4;
  while (lenclass>0) begin
    ResetLoop(Jobr);
    Jobr.ResCode = Resr.Code;
    Jobr.LengthClass = lenclass;
    Jobr.TransDate = dp;
    switch (lenclass) begin
      case 4: Jobr.TransDate = blankd;
      case 3: Jobr.TransDate = AddDay(Jobr.TransDate,-366);
      case 2: Jobr.TransDate = AddDay(Jobr.TransDate,-31);
      case 1: Jobr.TransDate = AddDay(Jobr.TransDate,-7);
      case 0: ;
    end;
    TrHs = true;
    while (LoopKey(ckey,Jobr,3,TrHs)) begin
      readrecs = readrecs + 1;
      ddif = DateDiff(Jobr.TransDate,dp);
      if (ddif>=maxdays) then begin TrHs = false; end;
      if (Jobr.LengthClass!=lenclass) then begin TrHs = false; end;
      if (Jobr.ResCode!=Resr.Code) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;
        if (Jobr.EndDate<dp) then begin testf = false; end;
        if (restypef) then begin
          if (Jobr.Type!=restype) then begin testf = false; end;
        end;
        if (testf) then begin
          rsr.Code = Jobr.ResStatus;
          if (ReadFirstMain(rsr,1,true)) then begin
            readrecs = readrecs + 1;
            usedrecs = usedrecs + 1;
            if (SkipResTest(rsr,true)) then begin
              testf = false;
            end;
          end;
        end;
        if (testf) then begin
          if (nonblank(Jobr.ResCode)) then begin
            if (nonblank(reslocation)) then begin
              if (Resr.ResLoc!=reslocation) then begin testf = false; end;
            end;
            if (nonblank(resclass)) then begin
              if (SetInSet(resclass,Resr.Class)==false) then begin testf = false; end;
            end;
          end;
        end;
        if (testf) then begin
          usedrecs = usedrecs + 1;
          startpos = RTLen(dp,Jobr.TransDate,Jobr.StartTime,maxdays,0);
          endpos = RTLen(dp,Jobr.EndDate,Jobr.EndTime,maxdays,1);
          if (chkout!=chkin) then begin
            if (Jobr.StartTime<=chkout) then begin startpos = startpos - 1; end;
            if (Jobr.EndTime<=chkin) then begin endpos = endpos - 1; end;
          end else begin
            if (Jobr.StartTime<=chkout) then begin startpos = startpos - 1; end;
            if (Jobr.EndTime<chkin) then begin endpos = endpos - 1; end;
          end;
          for (i=startpos;i<=endpos;i=i+1) begin
            if ((i>=0) and (i<maxdays)) then begin
              ra[i] = ra[i] - 1;
            end;
          end;
        end;
      end;
    end;
    lenclass = lenclass - 1;
  end;
  return;  
end;

global
function Boolean CntResourceExist(string rescode,Date dp,LongInt maxdays,Array LongInt ra,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  Boolean res,found,foundnext,foundprev;
  record ResExistVc ResExistr;
  record ResExistVc nextResExistr;
  record ResExistVc prevResExistr;
  Integer i;
  LongInt startpos,endpos;
  Date tdp;
  
  res = true;
  tdp = dp;
  for (i=0;i<maxdays;i=i+1) begin
    ra[i] = ra[i] + 1;
  end;
  ResExistr.ResCode = rescode;
  found = LoopMain(ResExistr,1,true);
  readrecs = readrecs + 1;
  if (ResExistr.ResCode!=rescode) then begin found = false; end;
  usedrecs = usedrecs + 1;
  if (found==false) then begin
    res = true;
    goto LCntResourceExist;
  end;  
LCntResourceExistLoop:; 
  ResetLoop(ResExistr);
  ResExistr.ResCode = rescode;
  ResExistr.StartDate = tdp;
  found = LoopMain(ResExistr,2,true);
  readrecs = readrecs + 1;
  if (ResExistr.ResCode!=rescode) then begin found = false; end;
  usedrecs = usedrecs + 1;

  ResetLoop(nextResExistr);
  nextResExistr.ResCode = rescode;
  nextResExistr.StartDate = tdp;
  SetLoopPosition(nextResExistr,GetLoopPosition(ResExistr));
  foundnext = LoopMain(nextResExistr,2,true);
  readrecs = readrecs + 1;
  if (nextResExistr.ResCode!=rescode) then begin foundnext = false; end;
  usedrecs = usedrecs + 1;
  
  ResetLoop(prevResExistr);
  prevResExistr.ResCode = rescode;
  prevResExistr.StartDate = tdp;
  SetLoopPosition(prevResExistr,GetLoopPosition(ResExistr));
  foundprev = LoopBackKey("MainKey",prevResExistr,2,true);
  readrecs = readrecs + 1;
  if (prevResExistr.ResCode!=rescode) then begin foundprev = false; end;
  usedrecs = usedrecs + 1;
  
  if (found) then begin
    endpos = maxdays;
    
    if (ResExistr.OnOffFlag!=0) then begin
      startpos = RTLen(dp,ResExistr.StartDate,ResExistr.StartTime,maxdays,0);    
      if (foundnext) then begin
        endpos = RTLen(dp,nextResExistr.StartDate,nextResExistr.StartTime,maxdays,0);    
      end;
      if (startpos>=0) then begin
        for (i=startpos;i<endpos;i=i+1) begin
          ra[i] = ra[i] - 1;
        end;
      end;
    end else begin
      if (foundprev) then begin
        if (prevResExistr.OnOffFlag!=0) then begin
          startpos = RTLen(dp,prevResExistr.StartDate,prevResExistr.StartTime,maxdays,0);    
          endpos = RTLen(dp,ResExistr.StartDate,ResExistr.StartTime,maxdays,0);    
          for (i=startpos;i<endpos;i=i+1) begin
            ra[i] = ra[i] - 1;
          end;
        end else begin
        end;
      end;
    end;
    if (foundnext) then begin
      tdp = AddDay(nextResExistr.StartDate,1);
      goto LCntResourceExistLoop;
    end;
  end else begin
    if (foundprev) then begin
      if (prevResExistr.OnOffFlag!=0) then begin
        startpos = RTLen(dp,prevResExistr.StartDate,prevResExistr.StartTime,maxdays,0);    
        endpos = maxdays;
        for (i=startpos;i<endpos;i=i+1) begin
          ra[i] = ra[i] - 1;
        end;
      end else begin
      end;
    end;
  end;
LCntResourceExist:;  
  CntResourceExist = res;
  RETURN;
END;

/*
this doesn't work, try to make room not availabel from 10 to 15 and all is crap
global
function Boolean CntResourceExist(string rescode,Date dp,LongInt maxdays,Array LongInt ra,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  Boolean res;
  record ResExistVc ResExistr;
  Boolean curstate;
  Boolean found;
  LongInt startrecnr;
  LongInt startpos;
  LongInt endpos;
  LongInt recnr;
  LongInt LastStartExist;
  LongInt LastPt;
  LongInt ddif;
  Integer i;
  
  LastPt = -1;
  ResExistr.ResCode = rescode;
  if (LoopMain(ResExistr,1,true)==false) then begin
    for (i=0;i<maxdays;i=i+1) begin
      ra[i] = ra[i] + 1;
    end;
    res = true;
    goto LCntResourceExist;
  end;
  ResetLoop(ResExistr);
  ResExistr.ResCode = rescode;
  ResExistr.StartDate = dp;
  found = LoopMain(ResExistr,2,true);
  recnr = GetLoopPosition(ResExistr);
  if (found) then begin
    if (recnr>=2) then begin
      ResetLoop(ResExistr);
      ResExistr.ResCode = rescode;
      if (LoopMain(ResExistr,1,true)) then begin
        if (ResExistr.ResCode==rescode) then begin
          if (ResExistr.OnOffFlag==0) then begin
            curstate = true;
            res = true;
            LastStartExist = 0;
          end;
          startrecnr = recnr;
          goto L22CntResourceExist;
        end else begin
          startrecnr = recnr;
          goto L22CntResourceExist;
        end;
      end;
    end else begin
      curstate = false;
      startrecnr = 1;
    end;
  end else begin
    recnr = CountRecords("ResExistVc")+1;
    ResetLoop(ResExistr);
    ResExistr.ResCode = rescode;;
    if (LoopMain(ResExistr,1,true)) then begin
      if (ResExistr.ResCode==rescode) then begin
        if (ResExistr.OnOffFlag==0) then begin
          curstate = true;
          LastStartExist = 0;
          res = true;
        end;
        startrecnr = recnr;
        goto L22CntResourceExist;
      end;
    end;
  end;
  
L22CntResourceExist:;
  SetLoopPosition(ResExistr,startrecnr-1);
  found = true;
  LastPt = 0;
  ResExistr.ResCode = rescode;
  ResExistr.StartDate = dp;  
  while (LoopMain(ResExistr,2,found)) begin
    if (ResExistr.ResCode!=rescode) then begin found = false; end;
    ddif = DateDiff(ResExistr.StartDate,dp);
    if (ddif>=maxdays) then begin found = false; end;
    if (found) then begin
      if (ResExistr.OnOffFlag==0) then begin
        if (curstate==false) then begin
          startpos = LastPt;
//          LastStartExist = ResLen(dp,ResExistr.StartDate,ResExistr.StartTime,maxdays,1,0);
//        startpos = RTLen(dp,Jobr.TransDate,Jobr.StartTime,maxdays,0);
        LastStartExist = RTLen(dp,ResExistr.StartDate,ResExistr.StartTime,maxdays,0);
       //   AddResLine(-1,-1,startpos,endpos,adhp);
        //  adcnt++;
          curstate = true;
          res = true;
        end;
      end else begin
        if (curstate==true) then begin
          LastPt = ResLen(dp,ResExistr.StartDate,ResExistr.StartTime,maxdays,0,0);
          curstate = false;
          for (i=LastStartExist/ResourceColumnWidth;i<(LastPt-1)/ResourceColumnWidth;i=i+1) begin
            if ((i>=0) and (i<maxdays)) then begin
              ra[i] = ra[i] + 1;
            end;
          end;
        end;
      end;
    end;
  end;
  if (curstate==false) then begin
    endpos = maxdays * ResourceColumnWidth;
//    AddResLine(-1,-1,LastPt,endpos,adhp);
//    adcnt++;
  end else begin
    for (i=LastStartExist/ResourceColumnWidth;i<maxdays;i=i+1) begin
      if ((i>=0) and (i<maxdays)) then begin
        ra[i] = ra[i] + 1;
      end;
    end;
  end;
LCntResourceExist:;
  CntResourceExist = res;
  RETURN;
END;
*/
/*
global
function LongInt Do_ReservationsInDayRa(string restype,string reslocation,string resclass,Date dp,LongInt maxdays,
                                        Array LongInt ra,Array LongInt ra2,Time chkin,Time chkout,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  record ResVc Resr;
  Boolean TrHs;
  string 255 ckey;
  Boolean testf,dummyf;
  LongInt daycnt;
  LongInt uscnt;
  
  daycnt = 0;  
  uscnt = 0;
  if (nonblank(restype)) then begin
    ckey = "Type";
    Resr.Type = restype;
  end else begin
    ckey = "Code";
  end;
  
  TrHs = true;
  while (LoopKey(ckey,Resr,1,TrHs)) begin
    readrecs = readrecs + 1;
    if (nonblank(restype)) then begin
      if (Resr.Type!=restype) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(reslocation)) then begin
        if (Resr.ResLoc!=reslocation) then begin testf = false; end;
       end;
       if (nonblank(resclass)) then begin
         if (SetInSet(resclass,Resr.Class)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        usedrecs = usedrecs + 1;
        dummyf = CntResourceExist(Resr.Code,dp,maxdays,ra2,readrecs,usedrecs);
        Do_ReservationsInDay2Ra(Resr,"",reslocation,resclass,false,dp,maxdays,ra,chkin,chkout,readrecs,usedrecs);//tmpjarek
        uscnt = uscnt + 1;
      end;
    end;
  end;
//not big speed difference  
//  Do_ReservationsInDayResType(restype,reslocation,resclass,dp,maxdays,ra,chkin,chkout);//tmpjarek
 
  if (nonblank(restype)) then begin
    RecordClear(Resr);
    Do_ReservationsInDay2Ra(Resr,restype,reslocation,resclass,true,dp,maxdays,ra,chkin,chkout,readrecs,usedrecs);//tmpjarek
    uscnt = uscnt + 1;
  end;
  Do_ReservationsInDayRa = uscnt;
  RETURN;
END;
*/
procedure ResTypeSupCalc(string restype,string reslocation,string resclass,Date dp,
                                  LongInt maxdays,Array LongInt ra,Time chkin,Time chkout,var LongInt readrecs,var LongInt usedrecs)
begin
  record ResTypeSupportVc ResTypeSupportr;
  Date todat;
  Boolean foundf,testf;
  LongInt startpos,endpos;
  LongInt ddif;
  LongInt i;
  
  foundf = true;
  todat = AddDay(dp,maxdays);
  ResTypeSupportr.Type = 0;
  ResTypeSupportr.Code = restype;
  ResTypeSupportr.Date = dp;
  ResTypeSupportr.ResLoc = reslocation;
  while (LoopKey("CodeDate",ResTypeSupportr,4,foundf)) begin
    readrecs = readrecs + 1;
    if (ResTypeSupportr.Type!=0) then begin
      foundf = false;
    end;
    if (ResTypeSupportr.Code!=restype) then begin
      foundf = false;
    end;
    if (ResTypeSupportr.Date>todat) then begin
      foundf = false;
    end;
    testf = foundf;
    if (nonblank(reslocation)) then begin
      if (ResTypeSupportr.ResLoc!=reslocation) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      i = DateDiff(ResTypeSupportr.Date,dp);
      ra[i] = ra[i] - ResTypeSupportr.Qty;
      usedrecs = usedrecs + 1;
    end;
  end;
  ResetLoop(ResTypeSupportr);
  foundf = true;
  ResTypeSupportr.Type = 1;
  ResTypeSupportr.Code = restype;
  while (LoopKey("CodeDate",ResTypeSupportr,2,foundf)) begin
    readrecs = readrecs + 1;
    if (ResTypeSupportr.Type!=1) then begin
      foundf = false;
    end;
    if (ResTypeSupportr.Code!=restype) then begin
      foundf = false;
    end;
    if (ResTypeSupportr.Date>todat) then begin
      foundf = false;
    end;
    testf = foundf;
    if (nonblank(reslocation)) then begin
      if (ResTypeSupportr.ResLoc!=reslocation) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      startpos = RTLen(dp,ResTypeSupportr.Date,ResTypeSupportr.StartTime,maxdays,0);
      endpos = RTLen(dp,ResTypeSupportr.EndDate,ResTypeSupportr.EndTime,maxdays,1);
      if (chkout!=chkin) then begin
        if (ResTypeSupportr.StartTime<=chkout) then begin startpos = startpos - 1; end;
        if (ResTypeSupportr.EndTime<=chkin) then begin endpos = endpos - 1; end;
      end else begin
        if (ResTypeSupportr.StartTime<=chkout) then begin startpos = startpos - 1; end;
        if (ResTypeSupportr.EndTime<chkin) then begin endpos = endpos - 1; end;
      end;
      for (i=startpos;i<=endpos;i=i+1) begin
        if ((i>=0) and (i<maxdays)) then begin
          ra[i] = ra[i] - 1;
        end;
      end;
      usedrecs = usedrecs + 1;
    end;
  end;
  return;
end;

global
function LongInt Do_ReservationsInDayRa(string restype,string reslocation,string resclass,Date dp,LongInt maxdays,
                                        Array LongInt ra,Array LongInt ra2,Time chkin,Time chkout,var LongInt readrecs,var LongInt usedrecs)
begin
  record ResVc Resr;
  Boolean TrHs;
  string 255 prevtype;
  Boolean testf,dummyf;
  LongInt daycnt;
  LongInt uscnt;
  Boolean loopedf;
  
  daycnt = 0;  
  uscnt = 0;
  
  loopedf = false;
  prevtype = "";
  Resr.Type = restype;
  TrHs = true;
  while (LoopKey("Type",Resr,1,TrHs)) begin
    readrecs = readrecs + 1;
    if (nonblank(restype)) then begin
      if (Resr.Type!=restype) then begin TrHs = false; end;
    end;
    if (TrHs) then begin
      testf = true;
      if (nonblank(reslocation)) then begin
        if (Resr.ResLoc!=reslocation) then begin testf = false; end;
       end;
       if (nonblank(resclass)) then begin
         if (SetInSet(resclass,Resr.Class)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        usedrecs = usedrecs + 1;
        dummyf = CntResourceExist(Resr.Code,dp,maxdays,ra2,readrecs,usedrecs);
        if (prevtype!=Resr.Type) then begin
          ResTypeSupCalc(Resr.Type,reslocation,resclass,dp,maxdays,ra,chkin,chkout,readrecs,usedrecs);
          prevtype = Resr.Type;
          loopedf = true;
        end;
        uscnt = uscnt + 1;
      end;
    end;
  end;
  if (loopedf==false) then begin
    ResTypeSupCalc(restype,reslocation,resclass,dp,maxdays,ra,chkin,chkout,readrecs,usedrecs);
  end;
  Do_ReservationsInDayRa = uscnt;
  RETURN;
END;

// Has proper company set when getting here
global
function LongInt Do_ActsInDay3(string uscode,string item,string acttype,Date dp,LongInt amaxdays,Area adhp,Integer calltime,Integer dmode,string curuser,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  record ActVc Actr;
  Boolean TrHs;
  string 255 ckey,tstr,user;
  Boolean testf;
  LongInt adractsernr;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc , 4 - PRVc, 5 - ProdOperationVc
  LongInt adrStartPos;
  LongInt adractlen;
  LongInt adrcolnr;
  LongInt textcnt;
  LongInt adcnt;
  LongInt ppadcnt;
  LongInt adoff;
  record ActTypeVc atr;
  record ActTypeGrVc atgr;
  LongInt uscnt;
  Integer pos;
  Integer lenclass;
  LongInt startpos;
  LongInt endpos;
  LongInt ddif;
  LongInt colnr;
  LongInt maxdays;
  Date blankd;
  LongInt compno;
  
  ppadcnt = 0;
  adcnt = 0;
  uscnt = 0;
  maxdays = amaxdays;
  if (dmode>=2) then begin
    maxdays = (amaxdays+23) / 24;
  end;
  textcnt = 0;
  pos = 0;
  uscnt = 0;
//  tp = 1;
//  ptp = 0;
  ExtractObj(uscode,pos,user);
  if (blank(user)) then begin goto LDo_ActsInDay3; end;
  compno = CurrentCompany;
  textcnt = 0;
  adcnt = 0;
  ppadcnt = 0;
  adcnt = 0;
  adoff = GetAreaLength(adhp);
  AddLongToArea(adcnt,adhp);    
  AddLongToArea(kResourceMonthUser,adhp);  //7, user 
  if (((dmode==1) or (dmode==3)) and (calltime==1)) then begin
    tstr = "";
    AddStringToArea(tstr,adhp);  
  end else begin
    AddStringToArea(uscode,adhp);  
  end;
  lenclass = 4;
LDo_ActsInDay3BEGIN:;
  ResetLoop(Actr);
  ckey = "CalUserMain:" & user;
  Actr.TodoFlag = 0;
  Actr.TransDate = dp;
  switch (lenclass) begin
    case 4: Actr.TransDate = blankd;
    case 3: Actr.TransDate = AddDay(Actr.TransDate,-366);
    case 2: Actr.TransDate = AddDay(Actr.TransDate,-31);
    case 1: Actr.TransDate = AddDay(Actr.TransDate,-7);
    case 0: ;
  end;
  Actr.LengthClass = lenclass;
  TrHs = true;
  while (LoopKey(ckey,Actr,3,TrHs)) begin
    readrecs = readrecs + 1;
    if (Actr.TodoFlag!=0) then begin TrHs = false; end;//taking this out makes evrything so slow, do not do it pls :)
    if (Actr.LengthClass!=lenclass) then begin TrHs = false; end;    
    ddif = DateDiff(Actr.TransDate,dp);
    if (ddif>=maxdays) then begin TrHs = false; end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (blankdate(Actr.EndDate)) then begin
        if (Actr.TransDate<dp) then begin testf = false; end;
      end else begin
        ddif = DateDiff(Actr.TransDate,dp);
        if (Actr.EndDate<dp) then begin testf = false; end;
      end;
      if (Actr.CalTimeFlag==0) then begin testf = false; end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (Actr.PrivateFlag!=0) then begin
        tstr = curuser;
        if (SetInSet(tstr,Actr.MainPersons)==false) then begin testf = false; end;
      end;
      if (nonblank(item)) then begin
        if (nonblank(Actr.ItemCode)) then begin
          if (item!=Actr.ItemCode) then begin
            testf = false;
          end;
        end;
        if (nonblank(Actr.ArtCode)) then begin
          if (item!=Actr.ArtCode) then begin
            testf = false;
          end;
        end;
        if ((blank(Actr.ItemCode)) and (blank(Actr.ArtCode))) then begin
          testf = false;
        end;
      end;
      if (nonblank(acttype)) then begin
        if (acttype!=Actr.ActType) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        testf = CheckTodoAcess(uscode,Actr,curuser)!=kAccessLevelNone;
      end;
      if (testf) then begin
        usedrecs = usedrecs + 1;
        colnr = 1;
        adrcolnr = 1;
        adrvcnr = kResourceActVc;
        atr.Code = Actr.ActType;
        if (ReadFirstMain(atr,1,true)) then begin
          atgr.Code = atr.ActTypeGr;
          if (ReadFirstMain(atgr,1,true)) then begin
            colnr = atgr.CalColNr;
          end;
        end;
        adractsernr = Actr.SerNr;
        if (calltime==2) then begin
          colnr = -colnr;
        end;
        adrcolnr = colnr;
        if (blankdate(Actr.EndDate)) then begin Actr.EndDate = Actr.TransDate; end;
        if ((dmode==0) or (dmode==1)) then begin
/*
what is logic to make 9 become 0.00 ?           
          if (GetHour(Actr.StartTime)<=9) then begin 
            Actr.StartTime = AddHours(Actr.StartTime,-GetHour(Actr.StartTime)+0); 
            Actr.StartTime = AddMinutes(Actr.StartTime,-GetMinute(Actr.StartTime)+0); 
          end;
*/          
/*
what is logic to make 17.00 become 23.59 ?           
          if (GetHour(Actr.EndTime)>=17) then begin 
            Actr.EndTime = AddHours(Actr.EndTime,-GetHour(Actr.EndTime)+23); 
            Actr.EndTime = AddMinutes(Actr.EndTime,-GetMinute(Actr.EndTime)+59); 
          end;
*/          
        end;        
        startpos = ResLen(dp,Actr.TransDate,Actr.StartTime,amaxdays,0,dmode);
        endpos = ResLen(dp,Actr.EndDate,Actr.EndTime,amaxdays,1,dmode);
        adrStartPos = startpos;
        adractlen = endpos;
        if (Actr.CalTimeFlag==calltime) then begin
          AddLongToArea(adractsernr,adhp);
          AddLongToArea(adrvcnr,adhp);
          AddLongToArea(adrStartPos,adhp);
          AddLongToArea(adractlen,adhp);
          AddLongToArea(adrcolnr,adhp);    
          AddLongToArea(compno,adhp);
          AddStringToArea("",adhp);
          adcnt = adcnt + 1;
        end;
      end;
    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto LDo_ActsInDay3BEGIN; end;
  PutLongInArea(adcnt,adhp,adoff);
  uscnt = uscnt + 1;
LDo_ActsInDay3:;
  Do_ActsInDay3 = uscnt;
  RETURN;
END;

function LongInt Do_RentINInDay2(string incode,string serialnr,Integer status,string restype,Boolean restypef,Date dp,LongInt amaxdays,Integer dmode,Area adhp,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  LongInt res;
  LongInt adcnt ;
  LongInt adoff;
  record RentResBookVc RentBookr;
  record RentResVc RentResr;
  Boolean TrHs;
  string 255 ckey;
  Boolean testf;
  LongInt adractsernr;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc, 4 - PRVc, 5 - ProdOperationVc
  LongInt adrStartPos;
  LongInt adractlen;
  LongInt adrcolnr;
  LongInt daycnt;
  LongInt startpos;
  LongInt endpos;
  LongInt ddif;
  record AgreeStatusVc rsr; // Only reason for AgreeStatusView
  Integer lenclass;
  LongInt maxdays;
  record RentITVc RITr;
  record RentINVc RentINr;
  Date tdat,blankd;
  Boolean ritf;
  record RentControlBlock RentControlr;
  LongInt compno;
  
  compno = CurrentCompany;
  BlockLoad(RentControlr);
  maxdays = amaxdays;
  if (dmode>=2) then begin
    maxdays = (amaxdays+23) / 24;
  end;  
  daycnt = 0;
  res = 0;
  adcnt = 0;
  adcnt = 0;  
  adoff = GetAreaLength(adhp);
  if (restypef==false) then begin
    AddLongToArea(adcnt,adhp);
    AddLongToArea(kResourceMonthRentalItem,adhp);  //8, rent Item
    ckey = "";
    if ((status>0) and (nonblank(serialnr))) then begin
      ckey = ckey & " "; // No serial number can have space in the beginning, I use this as a flag in the client
    end;
    ckey = ckey & serialnr;
    AddStringToArea(ckey,adhp);
    res = 1;
  end;
  ckey = "AgreeStartTime";
  if (nonblank(SerialNr)) then begin
    RentINr.Code = incode;
    RentINr.SerialNr = serialnr;
    if (ReadFirstMain(RentINr,2,true)) then begin
      readrecs = readrecs + 1;
      if (nonblankdate(RentINr.PurchaseDate)) then begin
        if (RentINr.PurchaseDate>dp) then begin
          usedrecs = usedrecs + 1;
          adrvcnr = -1;
          adrcolnr = RentControlr.NotActiveCol;
          startpos = ResLen(dp,dp,RentControlr.StartNewDay,amaxdays,0,dmode); // ?
          tdat = AddDay(RentINr.PurchaseDate,-1);
          endpos = ResLen(dp,tdat,RentControlr.StartNewDay,amaxdays,1,dmode); // ?
          adractsernr = -1;
          adrStartPos = startpos;
          adractlen = endpos;
          if (restypef) then begin
            adcnt = 1;
            AddLongToArea(adcnt,adhp);
            AddLongToArea(kResourceMonthSerialNr,adhp);  //9,serial nr 
            AddStringToArea(serialnr,adhp);
            res = res + 1;
          end;
          AddLongToArea(adractsernr,adhp);
          AddLongToArea(adrvcnr,adhp);
          AddLongToArea(adrStartPos,adhp);
          AddLongToArea(adractlen,adhp);
          AddLongToArea(adrcolnr,adhp);                
          AddLongToArea(compno,adhp);
          AddStringToArea("",adhp);
          adcnt = adcnt + 1;
        end;
      end;
    end;
  end;
  
  lenclass = 4;
LDo_RentINInDay2BEGIN:;
  ResetLoop(RentBookr);
  RentBookr.Code = incode;
  RentBookr.SerialNr = serialnr;
  RentBookr.LengthClass = lenclass;
  RentBookr.TransDate = dp;
  switch (lenclass) begin
    case 4: RentBookr.TransDate = blankd;
    case 3: RentBookr.TransDate = AddDay(RentBookr.TransDate,-366);
    case 2: RentBookr.TransDate = AddDay(RentBookr.TransDate,-31);
    case 1: RentBookr.TransDate = AddDay(RentBookr.TransDate,-7);
    case 0: ;
  end;
  TrHs = true;
  while (LoopKey(ckey,RentBookr,4,TrHs)) begin
    readrecs = readrecs + 1;
    ddif = DateDiff(RentBookr.TransDate,dp);
    if (ddif>=maxdays) then begin TrHs = false; end;
    if (RentBookr.LengthClass!=lenclass) then begin TrHs = false; end;
    if (RentBookr.Code!=incode) then begin TrHs = false; end;
    if (RentBookr.SerialNr!=serialnr) then begin TrHs = false; end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (nonblankdate(RentBookr.EndDate)) then begin
        if (RentBookr.EndDate<dp) then begin testf = false; end;
      end;
      if (testf) then begin
        usedrecs = usedrecs + 1;
        RentResr.SerNr = RentBookr.SerNr;
        if (ReadFirstMain(RentResr,1,true)) then begin
        end;
        RITr.Code = RentResr.Group;
        ritf = ReadFirstMain(RITr,1,true);
        if (ritf) then begin
          if (RITr.DaysBeforef!=0) then begin
            adrvcnr = kResourceRentResVc;
            adrcolnr = RITr.ColourBefore;
            tdat = AddDay(RentBookr.TransDate,-RITr.NoDaysBefore);
            startpos = ResLen(dp,tdat,RentBookr.StartTime,amaxdays,0,dmode);
            tdat = AddDay(RentBookr.TransDate,-1);
            endpos = ResLen(dp,tdat,RentBookr.StartTime,amaxdays,1,dmode);
            adractsernr = RentBookr.SerNr;
            adrStartPos = startpos;
            adractlen = endpos;
            if (restypef) then begin
              adcnt = 1;
              AddLongToArea(adcnt,adhp);
              AddLongToArea(kResourceMonthSerialNr,adhp);  //9, serial nr 
              AddStringToArea(serialnr,adhp);
              res = res + 1;
            end;
            AddLongToArea(adractsernr,adhp);
            AddLongToArea(adrvcnr,adhp);
            AddLongToArea(adrStartPos,adhp);
            AddLongToArea(adractlen,adhp);
            AddLongToArea(adrcolnr,adhp);                
            AddLongToArea(compno,adhp);
            AddStringToArea("",adhp);
            adcnt = adcnt + 1;
          end;
        end;
        adrcolnr = 1;
        adrvcnr = kResourceRentResVc;
        rsr.Code = RentResr.AgreeStatus;
        if (ReadFirstMain(rsr,1,true)) then begin
          if (rsr.CalColNr>0) then begin
            adrcolnr = rsr.CalColNr;
          end;
        end;
        startpos = ResLen(dp,RentBookr.TransDate,RentBookr.StartTime,amaxdays,0,dmode);
        if (blankdate(RentBookr.EndDate)) then begin
          if ((dmode==2) and (dmode==3)) then begin
            endpos = amaxdays*ResourceColumnWidth*24;
          end else begin
            endpos = amaxdays*ResourceColumnWidth;
          end;
        end else begin
          endpos = ResLen(dp,RentBookr.EndDate,RentBookr.EndTime,amaxdays,1,dmode);
        end;
        adractsernr = RentBookr.SerNr;
        adrStartPos = startpos;
        adractlen = endpos;
        if (restypef) then begin
          adcnt = 1;
          AddLongToArea(adcnt,adhp);
          AddLongToArea(kResourceMonthSerialNr,adhp);  //8, serial nr  jjxx
          AddStringToArea(serialnr,adhp);
          res = res + 1;
        end;
        AddLongToArea(adractsernr,adhp);
        AddLongToArea(adrvcnr,adhp);
        AddLongToArea(adrStartPos,adhp);
        AddLongToArea(adractlen,adhp);
        AddLongToArea(adrcolnr,adhp);                
        AddLongToArea(compno,adhp);
        AddStringToArea("",adhp);
        adcnt = adcnt + 1;
        if (ritf) then begin
          if (RITr.DaysAfterf!=0) then begin
            if (nonblankdate(RentBookr.EndDate)) then begin
              adrvcnr = kResourceRentResVc;
              adrcolnr = RITr.ColourAfter;
              tdat = AddDay(RentBookr.EndDate,1);
              startpos = ResLen(dp,tdat,RentBookr.EndTime,amaxdays,0,dmode);
              tdat = AddDay(RentBookr.EndDate,RITr.NoDaysAfter);
              endpos = ResLen(dp,tdat,RentBookr.EndTime,amaxdays,1,dmode);
              adractsernr = RentBookr.SerNr;
              adrStartPos = startpos;
              adractlen = endpos;
              if (restypef) then begin
                adcnt = 1;
                AddLongToArea(adcnt,adhp);
                AddLongToArea(kResourceMonthSerialNr,adhp);  //9, serial nr jjxx
                AddStringToArea(serialnr,adhp);
                res = res + 1;
              end;
              AddLongToArea(adractsernr,adhp);
              AddLongToArea(adrvcnr,adhp);
              AddLongToArea(adrStartPos,adhp);
              AddLongToArea(adractlen,adhp);
              AddLongToArea(adrcolnr,adhp);                              
              AddLongToArea(compno,adhp);
              AddStringToArea("",adhp);
              adcnt = adcnt + 1;
            end;
          end;
        end;
      end;
    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto LDo_RentINInDay2BEGIN; end;
  if (restypef==false) then begin
    PutLongInArea(adcnt,adhp,adoff);
  end;
LDo_RentINInDay2:;  
  Do_RentINInDay2 = res;
  RETURN;
END;

global
function LongInt Do_RentINInDay1(string uscode,string location,Date dp,LongInt maxdays,Integer dmode,Area adhp,var LongInt readrecs,var LongInt usedrecs)
BEGIN
  record RentINVc RentINr;
  Boolean TrHs;
  Boolean testf;
  LongInt uscnt;

  uscnt = 0;
  RentINr.Code = uscode;
  TrHs = true;
  while (LoopMain(RentINr,1,TrHs)) begin
    readrecs = readrecs + 1;
    testf = true;
    if (RentINr.Code!=uscode) then begin TrHs = false; end;
    if (TrHs==false) then begin
      testf = false;
    end;
    if (RentINr.Terminated!=0) then begin testf = false; end;
    if (nonblank(location)) then begin
      if (RentINr.OrgLocation!=location) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      usedrecs = usedrecs + 1;
      uscnt = uscnt + Do_RentINInDay2(RentINr.Code,RentINr.SerialNr,RentINr.RentINStatus,"",false,dp,maxdays,dmode,adhp,readrecs,usedrecs);
    end;
  end;
//  uscnt = uscnt + Do_RentINInDay2(uscode,"",0,"",false,dp,maxdays,dmode,adhp,readrecs,usedrecs); // Don't want it...
  Do_RentINInDay1 = uscnt;
  RETURN;
END;

global
function LongInt ResourceAvail(string restype,Date dp,Time chkin,Time chkout,LongInt maxdays)
begin
  Array LongInt ra;
  Array LongInt ra2;
  LongInt i;
  LongInt res;
  LongInt l,dummy;
  LongInt readrecs,usedrecs;

  res = 0;
  readrecs = 0;
  usedrecs = 0;
  if (maxdays>0) then begin
    res = 999999999;    
    for (i=0;i<maxdays;i=i+1) begin
      ra[i] = 0;
      ra2[i] = 0;
    end;  
    dummy = Do_ReservationsInDayRa(restype,"","",dp,maxdays,ra,ra2,chkin,chkout,readrecs,usedrecs);
    for (i=0;i<maxdays;i=i+1) begin
      l = ra[i] + ra2[i];
      if (l<res) then begin res = l; end;
      if (res==0) then begin i = maxdays; end;
    end;
  end;
  ResourceAvail = res;
  return;
end;

global
procedure RestBookingToolRemote(record RcVc RepSpec,var record RestBookingVc RestBookingr)
begin
  RestBookingr.ResCode = RepSpec.AccStr;
  if (nonblank(RestBookingr.ResCode))  then begin
    RestBookingVc_PasteResCode(RestBookingr);
  end else begin
    RestBookingr.ResLoc = RepSpec.f3;
  end;
  return;
end;
