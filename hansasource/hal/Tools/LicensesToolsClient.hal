external procedure LoadWindowTags();
remote updating function Boolean MoveLicenseToServer(record LicensesVc);
remote function Boolean LicenseShouldBeMovedToServer(record LicensesVc);
remote procedure UpdateLicenseStatusNow();

global
updating procedure UpdateMovedLicense(record LicensesVc Lr)
begin
  record LicensesVc oldLr;
  
  if (ReadFirstMain(Lr,1,true)==false) then begin
    goto LUpdateMovedLicense;
  end;
  
  RecordCopy(oldLr,Lr);
  Lr.Status = kLicItemTransferred;
  Lr.Active = 0;
  RecordUpdate(oldLr,Lr,true);
  
LUpdateMovedLicense:;
end;

global
updating procedure MoveLicenseToServer1(record LicensesVc Lr)
begin
  if (MoveLicenseToServer(Lr)) then begin
    UpdateMovedLicense(Lr);
  end;
end;

global
procedure LicensesOnServerIdleTask(string arg)
begin
  record LicensesVc Lr;
  record LicensesVc oldLr;
  record CurLicensesBlock CLb;
  
  if (ClientMode==false) then begin
    goto LLicensesOnServerIdleTask;
  end;
  
  while (LoopKey("Unused",Lr,1,true)) begin
    if (LicenseShouldBeMovedToServer(Lr)) then begin
      qupdating.MoveLicenseToServer1(Lr);
    end;
  end;
  
LLicensesOnServerIdleTask:;
end;

global
function Boolean FeaturesWClassOnOpenWindow(Integer wn)
begin
  Integer i,acnt,setnr;
  string 255 feature,text,modulename,tstr;
  Boolean fullf,ontrialf,hiddentrialf,purchasef;
  Integer state,defstate;
  string 255 tag;
  record RcVc RepSpec;
  
  setnr = 526;
  i = 0;
  GetWindowRecord(wn,RepSpec);
  tag = RepSpec.f1;
  feature = StringFromStringSetNr(setnr,i);
  
  while (nonblank(feature)) begin
    text = StringFromStringSet(setnr,feature);
    if (blank(text)) then begin goto LNextfeature; end;
    switch (tag) begin
      case "modulesonly": 
        if (Left(feature,6)!="HasMod") then begin goto LNextfeature; end;
        modulename = Right(feature,len(feature)-3);
        modulename = LowerCase(Left(modulename,1)) & Right(modulename,len(modulename)-1);
        defstate = GetDefaultFeatureState(feature);
//        if (ModuleExists(modulename)==false) then begin goto LNextfeature; end;
    end;

    state = GetFeatureState(feature);
    defstate = GetDefaultFeatureState(feature);
    
    fullf = false;
    ontrialf = false;
    hiddentrialf = false;
    purchasef = false;
    
    switch (state) begin
      case kFeatureOff:
        switch (defstate) begin
          case kFeatureUnavailable:
            goto LNextfeature;
          case kFeatureDefaultOn:
            // available, disabled by user
          case kFeatureDefaultTrial:
            hiddentrialf = true;
          case kFeatureDefaultOffTrialAvailable:
            hiddentrialf = true;
          case kFeatureDefaultOffNoTrial:
            purchasef = true;
        end;
      case kFeatureTrial:
        switch (defstate) begin
          case kFeatureDefaultOffNoTrial:
            fullf = true;
          otherwise          
            ontrialf = true;
        end;
      case kFeatureOn:
        fullf = true;
    end;
    AddListRow(wn,"features",1,feature,0);
    AddListData(wn,"features","feature",text);
    AddListData(wn,"features","full",fullf);
    AddListData(wn,"features","ontrial",ontrialf);
    AddListData(wn,"features","hiddentrial",hiddentrialf);
    if (fullf) then begin
      tstr = USetStr(37400);
    end else begin
      if (ontrialf) then begin
        tstr = USetStr(37401);
      end else begin
        if (hiddentrialf) then begin
          tstr = USetStr(37402);
        end else begin
          if (purchasef) then begin
            tstr = USetStr(37403);
          end;
        end;
      end;
    end;
    AddListData(wn,"features","featurestatus",tstr);
    
LNextfeature:;
    i = i + 1;
    feature = StringFromStringSetNr(setnr,i);
  end;
  
  FeaturesWClassOnOpenWindow = false;
  return;
end;

global
procedure OpenFeaturesW()
begin
  Integer nwn;
  record RcVc RepSpec;
  
/*  
  RepSpec.f1 = PushButtonTag;
  nwn = OpenWindow("FeaturesWClass",0,0,"","",RepSpec);
*/
  if (TestEnablerFile("EnAppleInAppPurchase")) then begin
    nwn = OpenWindow("IAPWClass",0,0,"","",RepSpec);
  end else begin
    nwn = OpenWindow("HWStoreWClass",0,0,"","",RepSpec);
  end;
  return;  
end;

// this is for debug
global
procedure OpenFeaturesW2()
begin
  Integer nwn;
  record RcVc RepSpec;
  
  nwn = OpenWindow("UserFeaturePrefTClass",0,0,"","",RepSpec);
end;

global
function Boolean GetFeatureRow(string feature,record UserFeaturePrefBlock UFPb,row UserFeaturePrefBlock UFPrw,var Integer resrownr)
begin
  Integer rwn,rwcnt;
  Boolean res;
  record LicensesVc Lr;
  
  rwcnt = MatRowCnt(UFPb);
  
  for (rwn = 0; rwn<rwcnt; rwn = rwn + 1) begin
    MatRowGet(UFPb,rwn,UFPrw);
    if (UFPrw.Feature==feature) then begin
      res = true;
      goto LGetFeatureRow;
    end;
  end;
  
  res = false;
  rwn = rwcnt;
  ClearRow(UFPb,UFPrw,1);
  UFPrw.Feature = feature;
  
LGetFeatureRow:;
  resrownr = rwn;
  if (res) then begin
//in LoadWindowTagsForStandard we do , 
//1st we set functions based on LicensesVc   , 
//then we ovverride it using UserFeaturePrefBlock , so if some cancells trial mode, purchase never makes sense
    Lr.Function = feature;
    if (ReadFirstKey("ActiveFunction",Lr,1,true)) then begin
      res = false;
      resrownr = -1;
    end;
  end;
  GetFeatureRow = res;
end;

global
updating procedure FeaturesWClassActivate()
begin
  Integer wn,sel,rwn;
  string 255 feature;
  record UserFeaturePrefBlock UFPb;
  row UserFeaturePrefBlock UFPrw;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  sel = SelectedDataListLine(wn);
  feature = GetListTag(wn,sel);
  
  if (feature<>"") then begin
    BlockLoad(UFPb);
    GetFeatureRow(feature,UFPb,UFPrw,rwn);
    UFPrw.WantedStatus = 1; // new set
    MatRowPut(UFPb,rwn,UFPrw);
    BlockStore(UFPb);
    if (ClientMode) then begin
      asyncremote.LoadWindowTags;
    end;
  end;
  ClearStringList(wn);
  LoadWindowTags;
  ReloadUserInterface(true);
  ReRunAllWindowDefs;
  FeaturesWClassOnOpenWindow(wn);
  PutWindowRecord(wn,RepSpec);
end;

global
updating procedure FeaturesWClassDeactivate()
begin
  Integer wn,sel,rwn;
  string 255 feature;
  record UserFeaturePrefBlock UFPb;
  row UserFeaturePrefBlock UFPrw;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  sel = SelectedDataListLine(wn);
  feature = GetListTag(wn,sel);
  
  if (feature<>"") then begin
    BlockLoad(UFPb);
    GetFeatureRow(feature,UFPb,UFPrw,rwn);
    UFPrw.WantedStatus = 0; // new set
    MatRowPut(UFPb,rwn,UFPrw);
    BlockStore(UFPb);
    if (ClientMode) then begin
      asyncremote.LoadWindowTags;
    end;
  end;
  ClearStringList(wn);
  LoadWindowTags;
  ReloadUserInterface(true);
  ReRunAllWindowDefs;
  FeaturesWClassOnOpenWindow(wn);
  PutWindowRecord(wn,RepSpec);
end;

global
updating procedure FeaturesWClassAll()
begin
  Integer wn,sel,rwn;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.f1 = "all";
  PutWindowRecord(wn,RepSpec);
  ClearStringList(wn);
  LoadWindowTags;
  ReloadUserInterface(true);
  ReRunAllWindowDefs;
  FeaturesWClassOnOpenWindow(wn);
  PutWindowRecord(wn,RepSpec);
end;

global
procedure UpdateLicenseStatusNowOnServer()
begin
  UpdateLicenseStatusNow;
end;
