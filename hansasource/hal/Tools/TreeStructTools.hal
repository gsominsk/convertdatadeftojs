global
function Integer TreeFindFirstRecordFromSubTree(array record IVVc aIVr, Integer arraycnt, Integer subroot)
begin
  record IVVc IVr;
  Boolean endf;
  Integer actrec;
  
  endf = false;
  actrec = -1;
  if (arraycnt > 0) and (subroot < arraycnt) then begin
    actrec = subroot;
    while (not endf) begin
      IVr = aIVr [actrec];
      if (IVr.ExportFlag == -1) then begin
        endf = true;
      end else begin
        actrec = IVr.ExportFlag;
      end;
    end;
  end;
  TreeFindFirstRecordFromSubTree = actrec;
  return;
end;

global
function Integer TreeFindLastRecordFromSubTree(array record IVVc aIVr, Integer arraycnt, Integer subroot)
begin
  record IVVc IVr;
  Boolean endf;
  Integer actrec;
  
  endf = false;
  actrec = -1;
  if (arraycnt > 0) and (subroot < arraycnt) then begin
    actrec = subroot;
    while (not endf) begin
      IVr = aIVr [actrec];
      if (IVr.InvType == -1) then begin
        endf = true;
      end else begin
        actrec = IVr.InvType;
      end;
    end;
  end;
  TreeFindLastRecordFromSubTree = actrec;
  return;
end;

global
function Integer TreeFindNextRecord(array record IVVc aIVr, Integer arraycnt, Integer recnum)
begin
  record IVVc IVr;
  Boolean endf;
  Integer actrec, actrecaux, lastrec;
   
  actrec = recnum;
  if (arraycnt > 0) and (recnum < arraycnt) then begin
    IVr = aIVr [actrec];
    if (IVr.InvType == -1) then begin
      if (IVr.InclVAT <> -1) then begin
        lastrec = actrec;
        actrecaux = IVr.InclVAT;
        endf = false;
        while (not endf) begin
          IVr = aIVr[actrecaux];
          if (IVr.ExportFlag == lastrec) then begin
            actrec = actrecaux;
            endf = true;
          end else begin
            if (IVr.InclVAT <> -1) then begin
              lastrec = actrecaux;
              actrecaux = IVr.InclVAT;
            end else begin
              actrec = -1;
              endf = true;
            end;
          end;
        end;
      end;
    end else begin
      actrec = TreeFindFirstRecordFromSubTree(aIVr, arraycnt, IVr.InvType);
    end;
  end;
  if (actrec == recnum) then begin
    actrec = -1;
  end;

  TreeFindNextRecord = actrec;
  return;
end;

global
function Integer TreeFindPrevRecord(array record IVVc aIVr, Integer arraycnt, Integer recnum)
begin
  record IVVc IVr;
  Boolean endf;
  Integer actrec, actrecaux, lastrec;
  
  actrec = recnum;
  if (arraycnt > 0) and (recnum < arraycnt) then begin
    IVr = aIVr [actrec];
    if (IVr.ExportFlag == -1) then begin
      if (IVr.InclVAT <> -1) then begin
        lastrec = actrec;
        actrecaux = IVr.InclVAT;
        endf = false;
        while (not endf) begin
          IVr = aIVr[actrecaux];
          if (IVr.InvType == lastrec) then begin
            actrec = actrecaux;
            endf = true;
          end else begin
            if (IVr.InclVAT <> -1) then begin
              lastrec = actrecaux;
              actrecaux = IVr.InclVAT;
            end else begin
              actrec = -1;
              endf = true;
            end;
          end;
        end;
      end;
    end else begin
      actrec = TreeFindLastRecordFromSubTree(aIVr, arraycnt, IVr.ExportFlag);
    end;
  end;
  if (actrec == recnum) then begin
    actrec = -1;
  end;
  TreeFindPrevRecord = actrec;
  return;
end;

global
function Integer TreeFindFirstRecord(array record IVVc aIVr, Integer arraycnt)
begin
  Integer res;
  
  res  = TreeFindFirstRecordFromSubTree(aIVr, arraycnt, 0);
  TreeFindFirstRecord = res;
  return;
end;

global
function Integer TreeFindLastRecord(array record IVVc aIVr, Integer arraycnt)
begin
  Integer res;
  
  res = TreeFindLastRecordFromSubTree(aIVr, arraycnt, 0);
  TreeFindLastRecord = res;
  return;
end;

global
function Integer TreeFindFirstLastRecord(array record IVVc aIVr, Integer arraycnt, Integer firstlast)
begin
  Integer res;
  
  if (firstlast <> 0) then begin
    res = TreeFindFirstRecordFromSubTree(aIVr, arraycnt, 0);
  end else begin
    res = TreeFindLastRecordFromSubTree(aIVr, arraycnt, 0);
  end;
  TreeFindFirstLastRecord = res;
  return
end;

global
function Integer TreeFindNextPrevRecord(array record IVVc aIVr, Integer arraycnt, Integer recnum, Integer firstlast)
begin
  Integer res;
  
  if (firstlast <> 0) then begin
    res = TreeFindNextRecord(aIVr, arraycnt, recnum);
  end else begin
    res = TreeFindPrevRecord(aIVr, arraycnt, recnum);
  end;
  TreeFindNextPrevRecord = res;
  return;
end;

global
function Integer TreeFindFirstRowFromSubTree(Array record IVVc aIVr, Integer arraycnt, Integer recnum, Integer subroot)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Boolean endf;
  Integer actrow, rows;
  
  endf = false;
  actrow = -1;
  if (arraycnt > 0) and (recnum < arraycnt) then begin
    IVr = aIVr[recnum];
    rows = MatRowCnt(IVr);
    if (rows > 0) and (subroot < rows) then begin
      actrow = subroot;
      while (not endf) begin
        MatRowGet(IVr, actrow, IVrw);
        if (IVrw.UnitXval == -1) then begin
          endf = true;
        end else begin
          actrow = IVrw.UnitXval;
        end;
      end;
    end;
  end;
  TreeFindFirstRowFromSubTree = actrow;
  return;
end;

global
function Integer TreeFindLastRowFromSubTree(Array record IVVc aIVr, Integer arraycnt, Integer recnum, Integer subroot)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Boolean endf;
  Integer actrow, rows;
  
  endf = false;
  actrow = -1;
  if (arraycnt > 0) and (recnum < arraycnt) then begin
    IVr = aIVr[recnum];
    rows = MatRowCnt(IVr);
    if (rows > 0) and (subroot < rows) then begin
      actrow = subroot;
      while (not endf) begin
        MatRowGet(IVr, actrow, IVrw);
        if (IVrw.UnitYval == -1) then begin
          endf = true;
        end else begin
          actrow = IVrw.UnitYval;
        end;
      end;
    end;
  end;
  TreeFindLastRowFromSubTree = actrow;
  return;
end;

global
function Integer TreeFindFirstRow(array record IVVc aIVr,Integer arraycnt, Integer recnum)
begin
  Integer res;
  
  res = TreeFindFirstRowFromSubTree(aIVr,arraycnt, recnum, 0);
  TreeFindFirstRow = res;
  return;
end;

global
function Integer TreeFindLastRow(array record IVVc aIVr,Integer arraycnt, Integer recnum)
begin
  Integer res;
  
  res = TreeFindLastRowFromSubTree(aIVr,arraycnt, recnum, 0);
  TreeFindLastRow = res;
  return;
end;

global
function Integer TreeFindNextRow(array record IVVc aIVr, Integer arraycnt, Integer recnum, Integer rownum)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Boolean endf;
  Integer actrow, actrowaux, lastrow,rows;
  
  actrow = rownum;
  if (arraycnt > 0) and (recnum < arraycnt) then begin
    IVr = aIVr[recnum];
    rows = MatRowCnt(IVr);
    if (rows > 0) and (rownum < rows) then begin
      MatRowGet(IVr, actrow, IVrw);
      if (IVrw.UnitYval == -1) then begin
        if (IVrw.UnitZval <> -1) then begin
          lastrow = actrow;
          actrowaux = IVrw.UnitZval;
          endf = false;
          while (not endf) begin
            MatRowGet(IVr, actrowaux, IVrw)
            if (IVrw.UnitXval == lastrow) then begin
              actrow = actrowaux;
              endf = true;
            end else begin
              if (IVrw.UnitZval <> -1) then begin
                lastrow = actrowaux;
                actrowaux = IVrw.UnitZval;
              end else begin
                actrow = -1;
                endf = true;
              end;
            end;
          end;
        end;
      end else begin
        actrow = TreeFindFirstRowFromSubTree(aIVr, arraycnt, recnum, IVrw.UnitYval);
      end;
    end;
    if (actrow == rownum) then begin
      actrow = -1;
    end;
  end;
  TreeFindNextRow = actrow;
  return;
end;

global
function Integer TreeFindPrevRow(array record IVVc aIVr, Integer arraycnt, Integer recnum, Integer rownum)
begin
  record IVVc IVr;
  row IVVc IVrw;
  Boolean endf;
  Integer actrow, actrowaux, lastrow, rows;
  
  if (arraycnt > 0) and (recnum < arraycnt) then begin
    IVr = aIVr[recnum];
    actrow = rownum;
    rows = MatRowCnt(IVr);
    if (rows > 0) and (rownum < rows) then begin
      MatRowGet(IVr, actrow,IVrw);
      if (IVrw.UnitXval == -1) then begin
        if (IVrw.UnitZval <> -1) then begin
          lastrow = actrow;
          actrowaux = IVrw.UnitZval;
          endf = false;
          while (not endf) begin
            MatRowGet(IVr, actrowaux, IVrw);
            if (IVrw.UnitYval == lastrow) then begin
              actrow = actrowaux;
              endf = true;
            end else begin
              if (IVrw.UnitZval <> -1) then begin
                lastrow = actrowaux;
                actrowaux = IVrw.UnitZval;
              end else begin
                actrow = -1;
                endf = true;
              end;
            end;
          end;
        end;
      end else begin
        actrow = TreeFindLastRowFromSubTree(aIVr, arraycnt, recnum, IVrw.UnitXval);
      end;
    end;
  end;
  if (actrow == rownum) then begin
    actrow = -1;
  end;
  TreeFindPrevRow = actrow;
  return;
end;

global
function Integer TreeFindFirstLastRow(array record IVVc aIVr,Integer arraycnt, Integer recnum, Integer firstlast)
begin
  Integer res;
  if (firstlast <> 0) then begin
    res = TreeFindFirstRowFromSubTree( aIVr, arraycnt, recnum,0);
  end else begin
    res = TreeFindLastRowFromSubTree( aIVr, arraycnt, recnum,0);
  end;
  TreeFindFirstLastRow = res;
  return;
end;

global
function Integer TreeFindNextPrevRow(array record IVVc aIVr, Integer arraycnt, Integer recnum, Integer rownum, Integer firstlast)
begin
  Integer res;
  if (firstlast <> 0) then begin
    res = TreeFindNextRow(aIVr, arraycnt, recnum, rownum);
  end else begin
    res = TreeFindPrevRow(aIVr, arraycnt, recnum, rownum);
  end;
  TreeFindNextPrevRow = res;
  return;
end;

