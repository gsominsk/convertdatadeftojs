external procedure ExtractObjWithSeparator(string,string,Boolean,var Integer,var string);
remote function Val GetPOSBalance(Date,Time,string,string);
external function Integer SecondsToTime(LongInt,var Time);
external procedure ExtractObj(string,var Integer,var string);
external procedure In2Period(var string,var Date,var Date);
external procedure CuArtSTRClassReportDef(var record RcVc);
external procedure MainRClassReportDef(var record RcVc);
external function Integer SetTempCompany(Integer);

global
procedure DblCheckVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CheckVc Checkr; 
   
  Checkr.CheckNr = FirstInRange(dblstr,10);
  if (ReadFirstKey("CheckNr",Checkr,1,true)) then begin
    wn = OpenWindow("CheckDClass",1,0,"","",Checkr);
  end; 
  return;
end;

global
procedure DblCheck2Vc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record CheckVc Checkr; 
   
  Checkr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(Checkr,1,true)) then begin
    wn = OpenWindow("CheckDClass",1,0,"","",Checkr);
  end; 
  return;
end;
global
procedure DblOwnCheckVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record OwnCheckVc OwnCheckr;
  
  if blank(l) then begin
    OwnCheckr.SerNr = FirstInRange(dblstr,10);
  end else begin
    OwnCheckr.SerNr = l;
  end;
  if (ReadFirstMain(OwnCheckr,1,true)) then begin  
    wn = OpenWindow("OwnCheckDClass",1,0,"","",OwnCheckr);
  end; 
  return;
end;

global
procedure DblOwnCheck2Vc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record OwnCheckVc OwnCheckr;

  OwnCheckr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstKey("CheckNr",OwnCheckr,1,true)) then begin  
    wn = OpenWindow("OwnCheckDClass",1,0,"","",OwnCheckr);
  end; 
  return;
end;

procedure DblNLFunc(string dblstr,string l,Integer currepwn,Integer cons)
begin
  Integer wn;
  record RcVc curRepSpec;
  record RcVc RepSpec;
  Integer oldcomp,repcompany;

  if (nonblank(dblstr)) then begin
    GetWIndowRecord(currepwn,curRepSpec);
    oldcomp = CurrentCompany;
    if (nonblank(l)) then begin
      repcompany = StringToInt(l);
    end else begin
      repcompany = oldcomp;
    end;
/*    
on client ? moved to report code MainRn
    if (repcompany!=0) then begin
      if (SetCompany(repcompany,false)) then begin
      end;
    end;
*/    
    ReportDefaults(RepSpec,"MainRClass");    
    MainRClassReportDef(RepSpec);
    RepSpec.repname = "MainRn";
    RepSpec.Media = mtScreen;
    RepSpec.basecurncy = curRepSpec.basecurncy;
    if (curRepSpec.critname=="SB2RClass") then begin
      if (curRepSpec.flags[10]!=0) then begin
//        RepSpec.basecurncy = kReportBCOneConsolidationRate;
      end;
    end;
    
    RepSpec.SimVerf = curRepSpec.SimVerf;
    RepSpec.stoff = -1;
    switch (curRepSpec.repname) begin//excl obj
      case "MBARn":
        RepSpec.f3 = curRepSpec.f3;
      otherwise
        RepSpec.f3 = curRepSpec.f6;
    end;
    RepSpec.f4 = dblstr;//AccStr
    RepSpec.CurncyCode = curRepSpec.CurncyCode;
    RepSpec.Period2Str = curRepSpec.Period2Str;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RepSpec.ObjStr = curRepSpec.ObjStr;
    RepSpec.ObjType = curRepSpec.ObjType;
    if (curRepSpec.repname=="TrialRn") then begin
      RepSpec.flags[8] = curRepSpec.flags[5];
      if (curRepSpec.flags[10]!=0) then begin
        RepSpec.flags[12] = kReportBCOneConsolidationRate;
      end;
    end;
    RepSpec.IncDaughter = cons;
    RepSpec.flags[29] = repcompany;
    RunReport(RepSpec,0);   
/*    
    if (oldcomp!=CurrentCompany) then begin
      ResetCompany(oldcomp);
    end;
*/    
  end;
  return;
end;

global
procedure DblNL(string dblstr,string l,Integer currepwn)
begin
  DblNLFunc(dblstr,l,currepwn,0);
  return;
end;

global
procedure DblNLSpec(string dblstr,string l,Integer currepwn)
begin
  DblNLFunc(dblstr,l,currepwn,1);
  return;
end;

procedure DblKeyNLFunc(string dblstr,string l,Integer currepwn,Integer cons)
begin
  Integer wn;
  record RcVc curRepSpec;
  record RcVc RepSpec;
  Integer oldcomp,repcompany;
  Integer pos;
  string 255 tstr;

  if (nonblank(dblstr)) then begin
    GetWIndowRecord(currepwn,curRepSpec);
    oldcomp = CurrentCompany;
    if (nonblank(l)) then begin
      repcompany = StringToInt(l);
    end else begin
      repcompany = oldcomp;
    end;
    if (repcompany!=0) then begin
      if (SetCompany(repcompany,false)) then begin
      end;
    end;
    ReportDefaults(RepSpec,"MainRClass");    
    MainRClassReportDef(RepSpec);
    RepSpec.repname = "MainRn";
    RepSpec.Media = mtScreen;
    RepSpec.basecurncy = curRepSpec.basecurncy;
    RepSpec.SimVerf = curRepSpec.SimVerf;
    RepSpec.stoff = -1;
    RepSpec.f3 = "";
    RepSpec.f4 = dblstr;//AccStr
    RepSpec.CurncyCode = curRepSpec.CurncyCode;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;

    pos = 0;
    ExtractObjWithSeparator(";",l,false,pos,tstr);
    RepSpec.ObjStr = tstr;
    ExtractObjWithSeparator(";",l,false,pos,tstr);
    RepSpec.f1 = tstr;
    
    RepSpec.ObjType = curRepSpec.ObjType;
    RepSpec.IncDaughter = cons;
    RepSpec.flags[29] = repcompany;
    RunReport(RepSpec,0);   
    if (oldcomp!=CurrentCompany) then begin
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
procedure DblKeyNL(string dblstr,string l,Integer currepwn)
begin
  DblKeyNLFunc(dblstr,l,currepwn,0);
  return;
end;

global
procedure DblCUStat(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"ArtSTRClass");    
    RepSpec.repname = "ArtSTRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RepSpec.f1 = curRepSpec.f2;
    RepSpec.f2 = dblstr;
    RepSpec.ObjStr = curRepSpec.f3;
    RepSpec.AccStr = "";
    RepSpec.ArtMode = 0;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure POCommitDetail(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"POStatRClass");    
    RepSpec.repname = "POCommitDetailRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RepSpec.f1 = curRepSpec.f1;
    RepSpec.f2 = curRepSpec.f2;
    RepSpec.f4 = curRepSpec.f4;
    RepSpec.ObjStr = curRepSpec.ObjStr;
    RepSpec.ObjType = curRepSpec.ObjType;
    RepSpec.AccStr = dblstr;
    RepSpec.flags[1] = curRepSpec.flags[1];
    RepSpec.flags[3] = curRepSpec.flags[3];
    RepSpec.ArtMode = 0;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure ArtSTVarDblClk(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"ArtSTRClass");    
    RepSpec.repname = "ArtSTVarRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RepSpec.RegDate = curRepSpec.RegDate;
    RepSpec.f1 = dblstr;
    RepSpec.f2 = curRepSpec.f2;
    RepSpec.f3 = curRepSpec.f3;
    RepSpec.f4 = curRepSpec.f4;
    RepSpec.ObjStr = curRepSpec.ObjStr;
    RepSpec.ArtMode = curRepSpec.ArtMode;
    RepSpec.basecurncy = curRepSpec.basecurncy;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure CuArtSTVarDblClk(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"ArtSTRClass");    
    CuArtSTRClassReportDef(RepSpec);
    RepSpec.critname = "ArtSTRClass";
    RepSpec.repname = "CuArtSTVarRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RepSpec.RegDate = curRepSpec.RegDate;
    RepSpec.f1 = dblstr;
    RepSpec.f2 = curRepSpec.f1;
    RepSpec.f3 = curRepSpec.f3;
    RepSpec.f4 = curRepSpec.f4;
    RepSpec.Stext = curRepSpec.Stext;
    RepSpec.AccStr = curRepSpec.AccStr;
    RepSpec.TransStr = curRepSpec.TransStr;
    RepSpec.ObjStr = curRepSpec.ObjStr;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure CuArtSTGroupDblClk(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"CuArtSTRClass");    
    CuArtSTRClassReportDef(RepSpec);
    RepSpec.repname = "CuArtSTRn";
    RepSpec.Media = mtScreen;
    RepSpec.stoff = -1;
    RepSpec.sStartDate = curRepSpec.sStartDate;
    RepSpec.sEndDate = curRepSpec.sEndDate;
    RepSpec.RegDate = curRepSpec.RegDate;
    RepSpec.f1 = curRepSpec.f1;
    RepSpec.f2 = curRepSpec.f2;
    RepSpec.f3 = dblstr;
    RepSpec.f4 = curRepSpec.f4;
    RepSpec.Stext = curRepSpec.Stext;
    RepSpec.AccStr = curRepSpec.AccStr;
    RepSpec.TransStr = curRepSpec.TransStr;
    RepSpec.ObjStr = curRepSpec.ObjStr;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblCashBal(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc curRepSpec;
  record RcVc RepSpec;
  Date sStartDate,sEndDate;

  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    ReportDefaults(RepSpec,"DayBalVClass");    
    wn = OpenWindow("DayBalVClass",1,0,"","",RepSpec);
    DeselectWindow(wn,false);
    RepSpec.repname = "DayBalMn";
    RepSpec.Period2Str = curRepSpec.Period2Str;
    RepSpec.vals0 = StringToVal(dblstr,M4Val);
    RepSpec.AccStr = curRepSpec.AccStr;
    RepSpec.FirstAcc = curRepSpec.FirstAcc;
    In2Period(RepSpec.Period2Str,sStartDate,sEndDate);
    RepSpec.sStartDate = sStartDate;
    RepSpec.sEndDate = sEndDate;
    PutWindowRecord(wn,RepSpec);
  end;
  return;
end;

global 
procedure DblWLVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record WayListVc WLr;
   
   WLr.SerNr = dblstr;
   if (ReadFirstMain(WLr,1,true)) then begin
     wn = OpenWindow("WayListDClass",1,0,"","",WLr);
   end;
   return;
end;

global 
procedure DblActDetailed(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;  
  Integer lcompnr;

  lcompnr = SetTempCompany(currepwn);
  GetWindowRecord(currepwn,RepSpec);
  if (RepSpec.ArtMode==0) then begin
    RepSpec.ArtMode = 1;
  end else begin
    RepSpec.ArtMode = 0;
  end;  
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  ResetCompany(lcompnr);
  return;
end;

global 
procedure DblActOKed(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;  
  Integer lcompnr;

  lcompnr = SetTempCompany(currepwn);
  GetWindowRecord(currepwn,RepSpec);
  if (RepSpec.flags[1]==0) then begin
    RepSpec.flags[1] = 1;
  end else begin
    RepSpec.flags[1] = 0;
  end;  
  CloseWindow(currepwn);
  RunReport(RepSpec,0);
  ResetCompany(lcompnr);
  return;
end;

global
procedure DblExcurTypeVc(string dblstr,string l,Integer currepwn)
begin
  record ExcurTypeVc ExcurTyper;
  Integer wn;
  
  ExcurTyper.Code = FirstInRange(dblstr,10);
  if (ReadFirstMain(ExcurTyper,1,true)) then begin
    wn = OpenWindow("ExcurTypeDClass",1,0,"","",ExcurTyper);
  end;
  return;
end;

global
procedure DblPOSBalance(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POSBalanceVc PBr;
  
  if (nonblank(l)) then begin
    PBr.SerNr = FirstInRange(l,10);
  end else begin
    PBr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(PBr,1,true)) then begin
    wn = OpenWindow("POSBalanceDClass",1,0,"","",PBr);
  end;     
  return;
end;

global
procedure DblCreatePOSBal(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POSBalanceVc PBr;
  
  if (nonblank(l)) then begin
    RecordNew(PBr);
    PBr.MachineName = FirstInRange(l,20);
    PBr.Drawer = LastInRange(l,20);
    PBr.Bal = GetPOSBalance(PBr.TransDate,PBr.TransTime,PBr.MachineName,PBr.Drawer);
    wn = OpenWindow("POSBalanceDClass",1,0,"","",PBr);
  end;
  return;
end;

global
procedure DblPOSEvent(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POSEventVc PEr;
  
  if (nonblank(l)) then begin
    PEr.SerNr = FirstInRange(l,10);
  end else begin
    PEr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(PEr,1,true)) then begin
    wn = OpenWindow("POSEventDClass",1,0,"","",PEr);
  end;     
  return;
end;

global
procedure DblOpenSess(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POSEventVc PEr;
  
  if (nonblank(l)) then begin
    RecordNew(PEr);
    PEr.MachineName = FirstInRange(l,20);
    PEr.Drawer = LastInRange(l,20);
    PEr.Event = 1;
    wn = OpenWindow("POSEventDClass",1,0,"","",PEr);
    WindowFieldGoto(wn,PEr,-1,"Drawer",true);
  end;
  return;
end;

global
procedure DblCloseSess(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POSEventVc PEr;
  
  if (nonblank(l)) then begin
    RecordNew(PEr);
    PEr.MachineName = FirstInRange(l,20);
    PEr.Drawer = LastInRange(l,20);
    PEr.Event = 2;
    wn = OpenWindow("POSEventDClass",1,0,"","",PEr);
  end;
  return;
end;

global
procedure DblCashierBal(string dblstr,string l,Integer currepwn)
begin
  record CashierBalVc CashierBalr;
  Date the80s;
  string 20 user,d1,t1;
  Time tim;
  Integer days,pos;
  Integer wn;
  
  if (nonblank(l)) then begin
    the80s.year = 1980;
    the80s.month = 1;
    the80s.day = 1;
    pos = 0;
    ExtractObj(l,pos,user);
    ExtractObj(l,pos,d1);
    ExtractObj(l,pos,t1);
    CashierBalr.UserCode = user;
    CashierBalr.TransDate = AddDay(the80s,d1);
    days = SecondsToTime(t1,tim);
    CashierBalr.TransTime = tim;
    if (ReadFirstmain(CashierBalr,4,true)) then begin
      wn = OpenWindow("CashierBalDClass",1,0,"","",CashierBalr);
    end;
  end;
  return; 
end;

global
procedure DblPrintPMCashupSum(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record POSEventVc PEr;
  record RcVc RepSpec;
  record RcVc curRepSpec;
  Integer pos;
  
  if (nonblank(dblstr)) then begin
    GetWindowRecord(currepwn,curRepSpec);
    RecordCopy(RepSpec,curRepSpec);
    RepSpec.Media = mtScreen;
    RepSpec.ArtMode = 1;
    RepSpec.f5 = dblstr;
    RepSpec.flags[29] = 1;
    RunReport(RepSpec,0);   
  end;
  return; 
end;

procedure DblPrintDetPOSSetRepSpec(string dblstr,string l,Integer currepwn,var record RcVc RepSpec)
begin
  Integer wn;
  record POSEventVc PEr;
  record RcVc curRepSpec;
  Date the80s;
  Time tim,bltim;
  Integer days;
  string 20 d1,d2,t1,t2,tstr;
  Integer pos;

  the80s.year = 1980;
  the80s.month = 1;
  the80s.day = 1;
  pos = 0;
  ExtractObj(l,pos,d1);
  ExtractObj(l,pos,d2);
  ExtractObj(l,pos,t1);
  ExtractObj(l,pos,t2);
  ExtractObj(l,pos,tstr);
  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.Media = mtScreen;
  RepSpec.ArtMode = 1;
  RepSpec.sStartDate = AddDay(the80s,d1);
  RepSpec.sEndDate = AddDay(the80s,d2);
  days = SecondsToTime(t1,tim);
  RepSpec.sStartTime = tim;
  days = SecondsToTime(t2,tim);
  if ((tim.hour==0) and (tim.minute==0) and (tim.second==0)) then begin
    RepSpec.sEndTime = bltim;
  end else begin
    RepSpec.sEndTime = tim;
  end;
  RepSpec.f5 = tstr;
  if (dblstr==USetStr(12567)) then begin
    RepSpec.flags[1] = 1;
    RepSpec.flags[2] = 0;
    RepSpec.flags[3] = 0;
    RepSpec.flags[8] = 0;
  end;
  if (dblstr==USetStr(12566)) then begin
    RepSpec.flags[1] = 0;
    RepSpec.flags[2] = 1;
    RepSpec.flags[3] = 0;
    RepSpec.flags[8] = 0;
  end;
  if (dblstr==USetStr(12568)) then begin
    RepSpec.flags[1] = 0;
    RepSpec.flags[2] = 0;
    RepSpec.flags[3] = 1;
    RepSpec.flags[8] = 0;
  end;
  if (dblstr==USetStr(12793)) then begin
    RepSpec.flags[1] = 0;
    RepSpec.flags[2] = 0;
    RepSpec.flags[3] = 0;
    RepSpec.flags[8] = 1;
  end;
  return; 
end;

global
procedure DblPrintDetPOS(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  if (nonblank(l)) then begin
    DblPrintDetPOSSetRepSpec(dblstr,l,currepwn,RepSpec);
    RepSpec.flags[29] = 0;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblPrintDetPOSCC(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;
  
  if (nonblank(l)) then begin
    DblPrintDetPOSSetRepSpec(dblstr,l,currepwn,RepSpec);
    RepSpec.flags[29] = 1;
    RunReport(RepSpec,0);   
  end;
  return;
end;

global
procedure DblCouponVc(string dblstr,string l,Integer currepwn)
begin
  record CouponVc Couponr;
  Integer wn;
  
  Couponr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(Couponr,1,true)) then begin
    wn = OpenWindow("CouponDClass",1,0,"","",Couponr);
  end;
  return;
end;

global
procedure DblCredCardTypeVc(string dblstr,string l,Integer currepwn)
begin
  record CredCardTypeVc CredCardTyper;
  Integer wn;
  
  CredCardTyper.Code = dblstr; //FirstInRange(dblstr,10);
  if (ReadFirstMain(CredCardTyper,1,true)) then begin
    wn = OpenWindow("CredCardTypeDClass",1,0,"","",CredCardTyper);
  end;
  return;
end;

global
procedure DblCreditCardVc(string dblstr,string l,Integer currepwn)
begin
  record CreditCardVc CreditCardr;
  Integer wn;
  
  CreditCardr.CreditCardNr = dblstr; 
  if (ReadFirstMain(CreditCardr,1,true)) then begin
    wn = OpenWindow("CreditCardDClass",1,0,"","",CreditCardr);
  end;
  return;
end;

global 
procedure Dbl2IVVc(string dblstr,LongInt l,Integer currepwn)  // Entry on dblstr for ID outstring
begin
  Integer wn;
  record IVVc IVr;
   
  IVr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
  end;
  return;
end;

global
procedure DblVI2Vc(string dblstr,string l,Integer currepwn)
begin
  record VIVc VIr;
  Integer wn;
  
  if (nonblank(l)) then begin
    VIr.InvoiceNr = LastInRange(l,10);
  end else begin
    VIr.InvoiceNr = LastInRange(dblstr,10);
  end;
  if (nonblank(VIr.InvoiceNr)) then begin
    if (ReadFirstKey("InvoiceNr",VIr,1,true)) then begin
      wn = OpenWindow("VIDClass",1,0,"","",VIr);
    end;
  end;
  return;
end;

global 
procedure Dbl2VEVc(string dblstr,string l,Integer currepwn)
begin
   Integer wn;
   record CUVc VEr;
   
   VEr.Code = l; //FirstInRange(dblstr,10);
   if (ReadFirstMain(VEr,1,true)) then begin
     wn = OpenWindow("VEDClass",1,0,"","",VEr);
   end;   
   return;
end;

global
procedure DblRestAccVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RestAccVc RestAccr;

  RestAccr.SerNr = FirstInRange(l,10);
  if (RestAccr.SerNr<=0) then begin
    RestAccr.SerNr = FirstInRange(dblstr,10);
  end;
  if (ReadFirstMain(RestAccr,1,true)) then begin
    wn = OpenWindow("RestAccDClass",1,0,"","",RestAccr);
  end;     
  return;
end;

global
procedure DblBIStatItemVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,RepSpec);
  RepSpec.ArtMode = 1;
  RepSpec.f3 = dblstr;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblBIStatBarTabVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,RepSpec);
  RepSpec.ArtMode = 2;
  RepSpec.f1 = dblstr;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblGuestObserVc(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record GuestObserVc GuestObser;
   
  if (nonblank(l)) then begin
    GuestObser.SerNr = FirstInRange(l,10);
    if (ReadFirstMain(GuestObser,1,true)) then begin
      wn = OpenWindow("GuestObserDClass",1,0,"","",GuestObser);
    end;
  end else begin
    GuestObser.SerNr = FirstInRange(dblstr,10);
    if (ReadFirstMain(GuestObser,1,true)) then begin
      wn = OpenWindow("GuestObserDClass",1,0,"","",GuestObser);
    end;
  end;
  return;
end;

global
procedure DblChqDepVc(string dblstr,string l,Integer currepwn)
begin
  record ChqDepVc ChqDepr;
  Integer wn;

  ChqDepr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(ChqDepr,1,true)) then begin
    wn = OpenWindow("ChqDepDClass",1,0,"","",ChqDepr);
  end;
  return;
end;

global
procedure DblStandProblemVc(string dblstr,string l,Integer currepwn)
begin
  record StandProblemVc StandProblemr;
  Integer wn;
  StandProblemr.Code = FirstInRange(dblstr,10);
  if (ReadFirstMain(StandProblemr,1,true)) then begin
    wn = OpenWindow("StandProblemDClass",1,0,"","",StandProblemr);
  end;
  return;
end;

global
procedure DblWOVc(string dblstr,string l,Integer currepwn)
begin
  record WOVc WOr;
  Integer wn;
  WOr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(WOr,1,true)) then begin
    wn = OpenWindow("WODClass",1,0,"","",WOr);
  end;
  return;
end;

global
procedure DblSVGMVc(string dblstr,string l,Integer currepwn)
begin
  record SVGMVc SVGMr;
  Integer wn;
  SVGMr.SerNr = FirstInRange(dblstr,10);
  if (ReadFirstMain(SVGMr,1,true)) then begin
    wn = OpenWindow("SVGMDClass",1,0,"","",SVGMr);
  end;
  return;
end;

global 
procedure DblDebugForecastRep(string dblstr,string l,Integer currepwn)
begin
  record RcVc curRepSpec;
  record RcVc RepSpec;

  GetWindowRecord(currepwn,curRepSpec);
  RecordCopy(RepSpec,curRepSpec);
  RepSpec.flags[19] = 1;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global 
procedure Dbl3IVVc(string dblstr,string l,Integer currepwn)  // Entry on dblstr for ID outstring
begin
  Integer wn;
  record IVVc IVr;
   
  IVr.SerNr = l;
  if (ReadFirstMain(IVr,1,true)) then begin
    wn = OpenWindow("IVDClass",1,0,"","",IVr);
  end;
  return;
end;

