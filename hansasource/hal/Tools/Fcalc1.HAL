external function roundmode SetRoundModeD(Integer);
    
//--------------------------------
external procedure TAX_apdue(Date,string,var Val);
external procedure TAX_ardue(Date,string,var Val);
//external procedure TAX_result(date,date,string,var Val,var Val);
//external procedure  TAX_balance2(date,string,var Val,var Val);
external function val FCALC(string);
external procedure TAX_turnover(date,date,string,var Val,var Val);
external procedure TAX_objturnover(string,date,date,string,var Val,var Val);
external procedure  TAX_turnover2(date,date,string,string,var Val);
external procedure  TAX_objturnover2(string,date,date,string,string,var Val);
external procedure  TAX_balance(date,string,var Val,var Val);
external procedure  TAX_balancePor(date,string,var Val,var Val);
external procedure  TAX_objbalance(string,date,string,var Val,var Val);
external procedure  TAX_vatturnover(string,date,date,string,var Val,var Val);
external procedure  TAX_vatbalance(string,date,string,var Val,var Val);
external procedure  TTR_balance(date,string,var Val);
external procedure TTR_turnover(date,date,string,var Val);


//----------------------------------
function integer getposinstr(string str1,string str2,integer start,boolean skip)
begin
  integer res,ls;
  integer i,s;
 
  res=(-1);
  s=0;
  ls=len(str1);
  for (i=start;i<ls;i=i+1) begin
    if (mid(str1,i,1)=="(") then begin s=s+1;end;
    if (mid(str1,i,1)==")") then begin s=s-1;end;
    if (mid(str1,i,1)==str2) then begin
      if (skip) then begin
        res=i; 
        i=ls+2;
      end else begin
        if (s==0) then begin
          res=i;
          i=ls+2;
        end;
      end;
    end;  
  end;
  getposinstr=res;  
  return;
end;

//---------------ANALYSE-----------------------------------
function val FANALYSE(string exp)
begin
  integer ls,i,delpos,delpos1;
  integer typ; //0-undefined, 1 - number, 3 - function, 2 - variable 
  val res,wv,debres,credres,wv1;
  string 1 fs,ftype;
  string 255 ws,wexp,tstr;
  string 21 accstr,accstr2;
  string 60 objstr;
  string 20 fname;
  date d1,d2;
  string 1 DELIM;
  transaction string 1 gDelimCharacter;
  
  if (blank(gDelimCharacter)) then begin
    DELIM=",";
  end else begin
    DELIM = gDelimCharacter;
  end;
  fs=mid(exp,0,1);
  typ=0;
  ls=len(exp);
 
  //check number
  if (fs>="0") and (fs<="9") then begin
    typ = 1;
    res = StringToVal(exp,M4Val);
  end; 

  //check variable
//  if (typ==0) then begin
//  end;  

  //check function
  if (typ==0) then begin  
    delpos=getposinstr(exp,"(",0,true);
    if (delpos<>(-1)) then begin
      fname=mid(exp,0,delpos);
      wexp=mid(exp,delpos+1,ls-delpos-2);
      ls=len(wexp);
    end;
    fname = UpperCase(fname);
    switch (fname) begin
      case "GETYEAR":
        typ=3;
        ws=wexp;
        delpos=getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        d1=stringtodate(accstr);
        res = GetYear(d1);
      case "SIGN":
        typ=3;
        ws=wexp;
        wv=FCALC(ws);
        if (wv>0) then begin res=1;end;
        if (wv==0) then begin res=0;end;
        if (wv<0) then begin res=(-1);end;        
      case "ABS":
        typ=3;
        ws=wexp;
        wv=FCALC(ws);
        if (wv>0) then begin res=wv;end;
        if (wv<0) then begin res=(-wv);end; 
      case "NOT":
        typ=3;
        ws=wexp;
        wv=FCALC(ws);
        if (wv==0) then begin res=1;end;
        if (wv<>0) then begin res=0;end;   
      case "ROUND":
        typ=3;
        delpos=getposinstr(wexp,DELIM,0,false);
        ws=mid(wexp,0,delpos);
        wv=FCALC(ws);        
        accstr=right(wexp,ls-delpos-1);
        wv1=FCALC(accstr);
        res=Round(wv,SetRoundModeD(wv1)); 
      case "IF":
        typ=3;
        delpos=getposinstr(wexp,DELIM,0,false);
        ws=mid(wexp,0,delpos);
        wv=FCALC(ws);
        if (wv>=0) then begin 
          delpos1=getposinstr(wexp,DELIM,delpos+1,false);
          ws=mid(wexp,delpos+1,delpos1-delpos-1);
          wv=FCALC(ws);
        end else begin
          delpos1=getposinstr(wexp,DELIM,delpos+1,false); 
          ws=right(wexp,ls-delpos1-1);
          wv=FCALC(ws);
        end;
        res=wv;
      case "TO":
        typ=3;
        ws=wexp;
        delpos=getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        d2 = StringToDate(mid(ws,delpos+1,delpos1-delpos-1));
//        d2 = AddDay(d2,-1);//??
        ftype=mid(ws,delpos1+1,1);
        TAX_turnover(d1,d2,accstr,debres,credres);
        if (ftype=="D") then begin res=debres; end;   
        if (ftype=="C") then begin res=credres; end;  
        if (ftype=="A") then begin res=debres-credres; end;  
      case "OTO":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        objstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        accstr=mid(ws,delpos+1,delpos1-delpos-1);
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        d2=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        ftype=mid(ws,delpos1+1,1);
        TAX_objturnover(objstr,d1,d2,accstr,debres,credres);
        if (ftype=="D") then begin res=debres; end;   
        if (ftype=="C") then begin res=credres; end;  
        if (ftype=="A") then begin res=debres-credres; end;  
      case "TO2":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        accstr2=mid(ws,delpos+1,delpos1-delpos-1);
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        d2=stringtodate(Right(ws,ls-delpos1-1));
        TAX_turnover2(d1,d2,accstr,accstr2,debres); 
        res=debres;
      case "OTO2":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        objstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        accstr=mid(ws,delpos+1,delpos1-delpos-1);
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        accstr2=mid(ws,delpos+1,delpos1-delpos-1);
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        d2=stringtodate(Right(ws,ls-delpos1-1));
        TAX_objturnover2(objstr,d1,d2,accstr,accstr2,debres); 
        res=debres;
      case "BALPOR":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        ftype=mid(ws,delpos1+1,1);
        TAX_balancePOR(d1,accstr,debres,credres);
        if (ftype=="D") then begin res=debres; end;   
        if (ftype=="C") then begin res=credres; end;  
        if (ftype=="A") then begin res=debres-credres; end;  
      case "BAL":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        ftype=mid(ws,delpos1+1,1);
        TAX_balance(d1,accstr,debres,credres);
        if (ftype=="D") then begin res=debres; end;   
        if (ftype=="C") then begin res=credres; end;  
        if (ftype=="A") then begin res=debres-credres; end;  
/*      case "BALANCE":
        typ=3;
        ws=wexp;
//        delpos= getposinstr(ws,DELIM,0,true);
//        accstr=mid(ws,0,delpos);
//        ftype=mid(ws,delpos+1,1);
        TAX_balance2(RepSpec.sEndDate,ws,debres,credres);
        res=debres-credres;
//        if (ftype=="D") then begin res=debres; end;   
//        if (ftype=="C") then begin res=credres; end;  
//        if (ftype=="A") then begin res=debres-credres; end;
      case "RESULT":
        typ=3;
        ws=wexp;
//        delpos= getposinstr(ws,DELIM,0,true);
//        accstr=mid(ws,0,delpos);
//        ftype=mid(ws,delpos+1,1);
        TAX_result(RepSpec.sStartDate,RepSpec.sEndDate,ws,debres,credres);
        res=debres-credres;
//        if (ftype=="D") then begin res=debres; end;   
//        if (ftype=="C") then begin res=credres; end;  
//        if (ftype=="A") then begin res=debres-credres; end;*/
      case "ARDUE":
        typ=3;
        ws=wexp;
        delpos=getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        d1=stringtodate(right(wexp,ls-delpos-1));
        TAX_ardue(d1,accstr,res);
      case "APDUE":
        typ=3;
        ws=wexp;
        delpos=getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        d1=stringtodate(right(wexp,ls-delpos-1));
        TAX_apdue(d1,accstr,res);
      case "OBAL":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        objstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        accstr=mid(ws,delpos+1,delpos1-delpos-1);
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        ftype=mid(ws,delpos1+1,1); 
        TAX_objbalance(objstr,d1,accstr,debres,credres);
        if (ftype=="D") then begin res=debres; end;   
        if (ftype=="C") then begin res=credres; end;  
        if (ftype=="A") then begin res=debres-credres; end;      
      case "VBAL":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        objstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        accstr=mid(ws,delpos+1,delpos1-delpos-1);
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        ftype=mid(ws,delpos1+1,1); 
        TAX_vatbalance(objstr,d1,accstr,debres,credres);
        if (ftype=="D") then begin res=debres; end;   
        if (ftype=="C") then begin res=credres; end;  
        if (ftype=="A") then begin res=debres-credres; end;      
      case "VTO":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        objstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        accstr=mid(ws,delpos+1,delpos1-delpos-1);
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        delpos=delpos1;
        delpos1=getposinstr(ws,DELIM,delpos+1,true); 
        d2=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        ftype=mid(ws,delpos1+1,1);
        TAX_vatturnover(objstr,d1,d2,accstr,debres,credres);
        if (ftype=="D") then begin res=debres; end;   
        if (ftype=="C") then begin res=credres; end;  
        if (ftype=="A") then begin res=debres-credres; end;        
      case "TBAL":
        typ=3;
        ws=wexp;
        delpos= getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        d1= StringToDate(Right(ws,ls-delpos-1));
        TTR_balance(d1,accstr,res);
     case "TTO":
        typ=3;
        ws=wexp;
        delpos=getposinstr(ws,DELIM,0,true);
        accstr=mid(ws,0,delpos);
        delpos1=getposinstr(ws,DELIM,delpos+1,true);
        d1=stringtodate(mid(ws,delpos+1,delpos1-delpos-1));
        d2 = StringToDate(Right(ws,ls-delpos1-1));
        TTR_turnover(d1,d2,accstr,res); 
      end;
  end; 
  
  //not defined
  if (typ==0) then begin
    res=0;
  end;
  
  FANALYSE=res; 

  return;
  
end; 

//---------------EXP-----------------------------------
function val FEXP(string exp)
begin
  integer ls,i;
  val res;

  ls = len(exp);
  if (mid(exp,0,1)=="(") and (mid(exp,ls-1,1)==")")  then begin
    res = FCALC(mid(exp,1,ls-2));
  end else begin
    res = FANALYSE(exp); 
  end;
  FEXP = res; 
  return;
end; 

//---------------MULTDIV----------------------------------
function val FMULTDIV(string exp)
begin
  string 250 op1,op2;
  string 1 sym,op;
  integer ls,i,sch;
  val opr1,opr2,res;
  boolean sfound;

  ls = len(exp);
  sch = 0; 
  sfound = false;  
  for (i=ls-1;i>=0;i=i-1) begin
    sym=mid(exp,i,1);
    if (sym=="(") then begin sch = sch + 1; end;
    if (sym==")") then begin sch = sch - 1; end;
    if ((sym=="*") or (sym=="/")) and (sch==0) then begin   
      op1 = left(exp,i);
      op2 = right(exp,ls-i-1); 
      opr1 = FMULTDIV(op1);
      opr2 = FEXP(op2);
      sfound = true;
      if (sym=="*") then begin 
        res = opr1*opr2; 
      end else begin 
        if (opr2!=0) then begin 
          res = Round(opr1/opr2,SetROundModeD(2));//we use M4Val in other places
        end else begin 
          res = 0; 
        end;
      end;
      i = -1;
    end;    
  end;
  if (sfound==false) then begin res = FEXP(exp); end; 
  FMULTDIV = res;
  return;
end; 

//---------------ADDSUB----------------------------------
global function val FADDSUB(string exp)
begin
  string 250 op1,op2;
  string 1 sym,op;
  integer ls,i,sch;
  val opr1,opr2,res;
  boolean sfound;

  ls = len(exp);
  sch = 0; 
  sfound = false;  
  for (i=ls-1;i>=0;i=i-1) begin
    sym = mid(exp,i,1);
    if (sym=="(") then begin sch = sch + 1; end;
    if (sym==")") then begin sch = sch - 1; end;
    if ((sym=="+") or (sym=="-")) and (sch==0) then begin   
      op1 = left(exp,i);
      op2 = right(exp,ls-i-1); 
      if (right(op1,1)=="-") and (sym=="-") then begin
        op1 = left(op1,len(op1)-1);
        sym = "+";
      end;
      opr1 = FADDSUB(op1);      
      opr2 = FMULTDIV(op2);
      sfound=true;
      if (sym=="+") then begin res = opr1 + opr2; end else begin res = opr1 - opr2;  end;
      i=-1;
    end;    
  end;
  if (sfound==false) then begin res = FMULTDIV(exp); end;  
  FADDSUB = res;
  return; 
end; 
