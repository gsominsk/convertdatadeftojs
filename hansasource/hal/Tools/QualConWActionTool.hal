external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);

global
function Boolean PasteQCTemplateToQualCon(var record QualConVc QCr)
begin
  Boolean res;
  row QualConVc QCrw;
  record QCTestVc QCTestr;
  record INVc INr;
  record QCTemplateVc QCTr;
  row QCTemplateVc QCTrw;
  Integer i,rwcnt;
  val v;
  
 QCTr.Code = QCr.QCTemplate;
  if (ReadFirstMain(QCTr,1,true)) then begin
    rwcnt = MatRowCnt(QCTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QCTr,i,QCTrw);
      QCTestr.Code = QCTrw.QCTest;
      if (ReadFirstMain(QCTestr,1,true)) then begin end;
      if (ReadFirstItem(QCr.ArtCode,INr,false,false)) then begin end;
      v = blankval;
      switch (QCTestr.Dimension) begin
        case kQCTestWeight: v = INr.Weight;
        case kQCTestNetWeight: v = INr.NetWeight;
        case kQCTestVolume: v = INr.Volume;
        case kQCTestWidth: v = INr.Width;
        case kQCTestHeight: v = INr.Height;
        case kQCTestDepth: v = INr.Depth;
        case kQCTestDensity: v = INr.Density;
        case kQCTestAlcPrc: v = INr.AlcPrc;
        case kQCTestUserVal1: v = INr.UserVal1;
        case kQCTestUserVal2: v = INr.UserVal2;
        case kQCTestUserVal3: v = INr.UserVal3;
      end;
      ClearRow(QCr,QCrw,1);
      QCrw.QCTest = QCTrw.QCTest;
      QCrw.Comment = QCTrw.Comment;
      QCrw.QCUnit = QCTrw.QCUnit;
      QCrw.From = QCTrw.From;
      QCrw.To = QCTrw.To;
/*      
      QCrw.From = QCTrw.From*v;
      QCrw.To = QCTrw.To*v;
*/      
      MatRowPut(QCr,i,QCrw);      
    end;
    res = true;
  end;
  PasteQCTemplateToQualCon = res;
  return;
end;

global
function Boolean FindQCTemplate(string item,string itgroup,string reason,string location,Integer Vc,Integer OnOKRecord,
                                var string template)
begin
  Boolean res;
  record QCTestRulesBlock QCTRb;
  row QCTestRulesBlock QCTRbrw;
  Integer i,rwcnt;
  Boolean testf;
  record ITVc ITr;
  
  template = "";
  BlockLoad(QCTRb);
  rwcnt = MatRowCnt(QCTRb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QCTRb,i,QCTRbrw);
    testf = true;
    switch (QCTRbrw.CodeType) begin
      case 0: if (itgroup!=QCTRbrw.ITCode) then begin testf = false; end;
      case 1: if (item!=QCTRbrw.ITCode) then begin testf = false; end;
    end;
    if (nonblank(reason)) then begin
      if (reason!=QCTRbrw.Reason) then begin testf = false; end;
    end;
    if (nonblank(location)) then begin
      if (location!=QCTRbrw.Location) then begin testf = false; end;
    end;
    if (Vc!=QCTRbrw.Vc) then begin testf = false; end;
    if (OnOKRecord!=QCTRbrw.OnOKRecord) then begin testf = false; end;
    if (testf) then begin      
      template = QCTRbrw.QCTemplate;
      switch (QCTRbrw.CodeType) begin
        case 1:
          res = true;
          goto LFindQCTemplate;
      end;
    end;
  end;
  if (nonblank(template)) then begin
    res = true;
    goto LFindQCTemplate;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QCTRb,i,QCTRbrw);
    testf = true;
    switch (QCTRbrw.CodeType) begin
      case 0: if (itgroup!=QCTRbrw.ITCode) then begin testf = false; end;
      case 1: if (item!=QCTRbrw.ITCode) then begin testf = false; end;
    end;
    if (nonblank(reason)) then begin
      if (reason!=QCTRbrw.Reason) then begin testf = false; end;
    end;
    if (nonblank(location)) then begin
      if (nonblank(QCTRbrw.Location)) then begin
        if (location!=QCTRbrw.Location) then begin testf = false; end;
      end;
    end;
    if (OnOKRecord!=QCTRbrw.OnOKRecord) then begin testf = false; end;
    if (Vc!=QCTRbrw.Vc) then begin testf = false; end;
    if (testf) then begin
      template = QCTRbrw.QCTemplate;
      switch (QCTRbrw.CodeType) begin
        case 1:
          res = true;
          goto LFindQCTemplate;
      end;
    end;
  end;
  if (nonblank(template)) then begin
    res = true;
    goto LFindQCTemplate;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QCTRb,i,QCTRbrw);
    testf = true;
    switch (QCTRbrw.CodeType) begin
      case 0: if (itgroup!=QCTRbrw.ITCode) then begin testf = false; end;
      case 1: if (item!=QCTRbrw.ITCode) then begin testf = false; end;
    end;
    if (nonblank(reason)) then begin
      if (reason!=QCTRbrw.Reason) then begin testf = false; end;
    end;
    if (nonblank(location)) then begin
      if (nonblank(QCTRbrw.Location)) then begin
        if (location!=QCTRbrw.Location) then begin testf = false; end;
      end;
    end;
    if (OnOKRecord!=QCTRbrw.OnOKRecord) then begin testf = false; end;
    if (QCTRbrw.Vc!=0) then begin
      if (Vc!=QCTRbrw.Vc) then begin testf = false; end;
    end;
    if (testf) then begin
      template = QCTRbrw.QCTemplate;
      switch (QCTRbrw.CodeType) begin
        case 1:
          res = true;
          goto LFindQCTemplate;
      end;
    end;
  end;
  if (nonblank(template)) then begin
    res = true;
    goto LFindQCTemplate;
  end;
LFindQCTemplate:;  
  FindQCTemplate = res;
  return;
end;

global
function Integer CreateQualConFromProd(record ProdVc Prodr,Integer rownr,var record QualConVc QCr,Integer OnOKRecord)
begin
  Integer res;
  row ProdVc Prodrw;
  record INVc INr;
  Date bd;
  Boolean testf;

  res = 22057;
  if (rownr<0) then begin goto LCreateQualConFromProd; end;
  MatRowGet(Prodr,rownr,Prodrw);
  res = 1574;
  if (Prodrw.OutQty<=0) then begin goto LCreateQualConFromProd; end;
  res = 20860;
  if (ReadFirstItem(Prodrw.Item,INr,true,false)==false) then begin  
    goto LCreateQualConFromProd;
  end;
  res = 1953;
  if (INr.SerNrf==0) then begin goto LCreateQualConFromProd; end;
  QCr.ArtCode = Prodrw.Item;
  QCr.SerialNr = Prodrw.SerialNr;
  QCr.StatusCode = "";
  QCr.AnalyseDate = CurrentDate;
  QCr.NewBestBefore = bd;
  QCr.NextAnalyseDate = bd;
  QCr.TestedBy = CurrentUser;
  QCr.Comment = Prodrw.Comment;
  QCr.OKFlag = 0;
  QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");
  QCr.AgreementNr = -1;
  QCr.RentResSerNo = -1;
  QCr.Vc = kQCProdVc;
  QCr.VcSerNr = Prodr.SerNr;
  testf = FindQCTemplate(INr.Code,INr.Group,"",Prodr.Location,kQCProdVc,OnOKRecord,QCr.QCTemplate);
  if (PasteQCTemplateToQualCon(QCr)) then begin
  end;
  res = 0;
LCreateQualConFromProd:;
  CreateQualConFromProd = res;
  return;
end;

global
function Integer CreateQualConFromProdOperation(record ProdOperationVc ProdOpr,Integer rownr,var record QualConVc QCr,Integer OnOKRecord)
begin
  Integer res;
  row ProdOperationVc ProdOprw;
  record INVc INr;
  Date bd;
  Boolean testf;

  res = 22057;
  if (rownr<0) then begin goto LCreateQualConFromProdOperation; end;
  MatRowGet(ProdOpr,rownr,ProdOprw);
  res = 1574;
  if (ProdOprw.OutQty<=0) then begin goto LCreateQualConFromProdOperation; end;
  res = 20860;
  if (ReadFirstItem(ProdOprw.Item,INr,true,false)==false) then begin  
    goto LCreateQualConFromProdOperation;
  end;
  res = 1953;
  if (INr.SerNrf==0) then begin goto LCreateQualConFromProdOperation; end;
  QCr.ArtCode = ProdOprw.Item;
  QCr.SerialNr = ProdOprw.SerialNr;
  QCr.StatusCode = "";
  QCr.AnalyseDate = CurrentDate;
  QCr.NewBestBefore = bd;
  QCr.NextAnalyseDate = bd;
  QCr.TestedBy = CurrentUser;
  QCr.Comment = ProdOprw.Comment;
  QCr.OKFlag = 0;
  QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");
  QCr.AgreementNr = -1;
  QCr.RentResSerNo = -1;
  QCr.Vc = kQCProdOperationVc;
  QCr.VcSerNr = ProdOpr.SerNr;
  testf = FindQCTemplate(INr.Code,INr.Group,"",ProdOpr.Location,kQCProdOperationVc,OnOKRecord,QCr.QCTemplate);
  if (PasteQCTemplateToQualCon(QCr)) then begin
  end;
  res = 0;
LCreateQualConFromProdOperation:;
  CreateQualConFromProdOperation = res;
  return;
end;

global
function Integer CreateQualConFromSD(record SDVc SDr,Integer rownr,var record QualConVc QCr,Integer OnOKRecord)
begin
  Integer res;
  row SDVc SDrw;
  record INVc INr;
  Date bd;
  Boolean testf;

  res = 22057;
  if (rownr<0) then begin goto LCreateQualConFromSD; end;
  MatRowGet(SDr,rownr,SDrw);
  res = 1574;
  if (SDrw.Qty<=0) then begin goto LCreateQualConFromSD; end;
  res = 20860;
  if (ReadFirstItem(SDrw.ArtCode,INr,true,false)==false) then begin  
    goto LCreateQualConFromSD;
  end;
  res = 1953;
  if (INr.SerNrf==0) then begin goto LCreateQualConFromSD; end;
  QCr.ArtCode = SDrw.ArtCode;
  QCr.SerialNr = SDrw.SerialNr;
  QCr.StatusCode = "";
  QCr.AnalyseDate = CurrentDate;
  QCr.NewBestBefore = bd;
  QCr.NextAnalyseDate = bd;
  QCr.TestedBy = CurrentUser;
  QCr.Comment = SDrw.Spec;
  QCr.OKFlag = 0;
  QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");
  QCr.AgreementNr = -1;
  QCr.RentResSerNo = -1;
  QCr.Vc = kQCSDVc;
  QCr.VcSerNr = SDr.SerNr;
  testf = FindQCTemplate(INr.Code,INr.Group,"",SDr.Location,kQCSDVc,OnOKRecord,QCr.QCTemplate);
  if (PasteQCTemplateToQualCon(QCr)) then begin
  end;
  res = 0;
LCreateQualConFromSD:;
  CreateQualConFromSD = res;
  return;
end;

global
function Integer CreateQualConFromPU(record PUVc PUr,Integer rownr,var record QualConVc QCr,Integer OnOKRecord)
begin
  Integer res;
  row PUVc PUrw;
  record INVc INr;
  Date bd;
  Boolean testf;

  res = 22057;
  if (rownr<0) then begin goto LCreateQualConFromPU; end;
  MatRowGet(PUr,rownr,PUrw);
  res = 1574;
  if (PUrw.Quant<=0) then begin goto LCreateQualConFromPU; end;
  res = 20860;
  if (ReadFirstItem(PUrw.ArtCode,INr,true,false)==false) then begin  
    goto LCreateQualConFromPU;
  end;
  res = 1953;
  if (INr.SerNrf==0) then begin goto LCreateQualConFromPU; end;
  QCr.ArtCode = PUrw.ArtCode;
  QCr.SerialNr = PUrw.SerialNr;
  QCr.StatusCode = "";
  QCr.AnalyseDate = CurrentDate;
  QCr.NewBestBefore = bd;
  QCr.NextAnalyseDate = bd;
  QCr.TestedBy = CurrentUser;
  QCr.Comment = PUrw.Spec;
  QCr.OKFlag = 0;
  QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");
  QCr.AgreementNr = -1;
  QCr.RentResSerNo = -1;
  QCr.Vc = kQCPUVc;
  QCr.VcSerNr = PUr.SerNr;
  testf = FindQCTemplate(INr.Code,INr.Group,"",PUr.Location,kQCPUVc,OnOKRecord,QCr.QCTemplate);
  if (PasteQCTemplateToQualCon(QCr)) then begin
  end;
  res = 0;
LCreateQualConFromPU:;
  CreateQualConFromPU = res;
  return;
end;

global
function Integer CreateQualConFromRet(record RetVc Retr,Integer rownr,var record QualConVc QCr,Integer OnOKRecord)
begin
  Integer res;
  row RetVc Retrw;
  record INVc INr;
  Date bd;
  Boolean testf;

  res = 22057;
  if (rownr<0) then begin goto LCreateQualConFromRet; end;
  MatRowGet(Retr,rownr,Retrw);
  res = 1574;
  if (Retrw.Quant<=0) then begin goto LCreateQualConFromRet; end;
  res = 20860;
  if (ReadFirstItem(Retrw.ArtCode,INr,true,false)==false) then begin  
    goto LCreateQualConFromRet;
  end;
  res = 1953;
  if (INr.SerNrf==0) then begin goto LCreateQualConFromRet; end;
  QCr.ArtCode = Retrw.ArtCode;
  QCr.SerialNr = Retrw.SerialNr;
  QCr.StatusCode = "";
  QCr.AnalyseDate = CurrentDate;
  QCr.NewBestBefore = bd;
  QCr.NextAnalyseDate = bd;
  QCr.TestedBy = CurrentUser;
  QCr.Comment = Retrw.Spec;
  QCr.OKFlag = 0;
  QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");
  QCr.AgreementNr = -1;
  QCr.RentResSerNo = -1;
  QCr.Vc = kQCRetVc;
  QCr.VcSerNr = Retr.SerNr;
  testf = FindQCTemplate(INr.Code,INr.Group,"",Retr.Location,kQCRetVc,OnOKRecord,QCr.QCTemplate);
  if (PasteQCTemplateToQualCon(QCr)) then begin
  end;
  res = 0;
LCreateQualConFromRet:;
  CreateQualConFromRet = res;
  return;
end;

global
function Integer CreateQualConFromRetPU(record RetPUVc RetPUr,Integer rownr,var record QualConVc QCr,Integer OnOKRecord)
begin
  Integer res;
  row RetPUVc RetPUrw;
  record INVc INr;
  Date bd;
  Boolean testf;

  res = 22057;
  if (rownr<0) then begin goto LCreateQualConFromRetPU; end;
  MatRowGet(RetPUr,rownr,RetPUrw);
  res = 1574;
  if (RetPUrw.Quant<=0) then begin goto LCreateQualConFromRetPU; end;
  res = 20860;
  if (ReadFirstItem(RetPUrw.ArtCode,INr,true,false)==false) then begin  
    goto LCreateQualConFromRetPU;
  end;
  res = 1953;
  if (INr.SerNrf==0) then begin goto LCreateQualConFromRetPU; end;
  QCr.ArtCode = RetPUrw.ArtCode;
  QCr.SerialNr = RetPUrw.SerialNr;
  QCr.StatusCode = "";
  QCr.AnalyseDate = CurrentDate;
  QCr.NewBestBefore = bd;
  QCr.NextAnalyseDate = bd;
  QCr.TestedBy = CurrentUser;
  QCr.Comment = RetPUrw.Spec;
  QCr.OKFlag = 0;
  QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");
  QCr.AgreementNr = -1;
  QCr.RentResSerNo = -1;
  QCr.Vc = kQCRetPUVc;
  QCr.VcSerNr = RetPUr.SerNr;
  testf = FindQCTemplate(INr.Code,INr.Group,"",RetPUr.Location,kQCRetPUVc,OnOKRecord,QCr.QCTemplate);
  if (PasteQCTemplateToQualCon(QCr)) then begin
  end;
  res = 0;
LCreateQualConFromRetPU:;
  CreateQualConFromRetPU = res;
  return;
end;

global
function Integer CreateQualConFromStockMov(record StockMovVc StockMovr,Integer rownr,var record QualConVc QCr,Integer OnOKRecord)
begin
  Integer res;
  row StockMovVc StockMovrw;
  record INVc INr;
  Date bd;
  Boolean testf;

  res = 22057;
  if (rownr<0) then begin goto LCreateQualConFromStockMov; end;
  MatRowGet(StockMovr,rownr,StockMovrw);
  res = 1574;
  if (StockMovrw.Quant<=0) then begin goto LCreateQualConFromStockMov; end;
  res = 20860;
  if (ReadFirstItem(StockMovrw.ArtCode,INr,true,false)==false) then begin  
    goto LCreateQualConFromStockMov;
  end;
  res = 1953;
  if (INr.SerNrf==0) then begin goto LCreateQualConFromStockMov; end;
  QCr.ArtCode = StockMovrw.ArtCode;
  QCr.SerialNr = StockMovrw.SerialNr;
  QCr.StatusCode = "";
  QCr.AnalyseDate = CurrentDate;
  QCr.NewBestBefore = bd;
  QCr.NextAnalyseDate = bd;
  QCr.TestedBy = CurrentUser;
  QCr.Comment = StockMovrw.Spec;
  QCr.OKFlag = 0;
  QCr.SerNr = NextSerNr("QualConVc",QCr.AnalyseDate,-1,false,"");
  QCr.AgreementNr = -1;
  QCr.RentResSerNo = -1;
  QCr.Vc = kQCStockMovVc;
  QCr.VcSerNr = StockMovr.SerNr;
  testf = FindQCTemplate(INr.Code,INr.Group,"",StockMovr.ToLocation,kQCStockMovVc,OnOKRecord,QCr.QCTemplate);
  if (PasteQCTemplateToQualCon(QCr)) then begin
  end;
  res = 0;
LCreateQualConFromStockMov:;
  CreateQualConFromStockMov = res;
  return;
end;

/*
global
updating procedure CreateQualConFromProdOnSave(record ProdVc Prodr)
begin
  record AccBlock Accb;
  row ProdVc Prodrw;
  Integer i,rwcnt,err;
  record QualConVc QCr;
  
  BlockLoad(Accb);
  if (Accb.QualityControl!=0) then begin
    rwcnt = MatRowCnt(Prodr);
    for (i=0;i<rwcnt;i=i+1) begin
      err = CreateQualConFromProd(Prodr,i,QCr,1);
      if (err==0) then begin
        if (QCr.SerNr>0) then begin
          if (RecordStore(QCr,false)) then begin end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure CreateQualConFromProdOperationOnSave(record ProdOperationVc ProdOpr)
begin
  record AccBlock Accb;
  row ProdOperationVc ProdOprw;
  Integer i,rwcnt,err;
  record QualConVc QCr;
  
  BlockLoad(Accb);
  if (Accb.QualityControl!=0) then begin
    rwcnt = MatRowCnt(ProdOpr);
    for (i=0;i<rwcnt;i=i+1) begin
      err = CreateQualConFromProdOperation(ProdOpr,i,QCr,1);
      if (err==0) then begin
        if (QCr.SerNr>0) then begin
          if (RecordStore(QCr,false)) then begin end;
        end;
      end;
    end;
  end;
  return;
end;

*/