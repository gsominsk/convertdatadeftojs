external function val DivWithRateToBase1(string,Date,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);

procedure LIqInfoSum(Integer type,LongInt transnr,var val lisum,var val libasesum)
begin
  record LIqInfoVc LIr;
  Boolean found;
  
  found = true;
  LIr.IntYc = type;
  LIr.TransNr = transnr;
  found = true;
  while (LoopKey("ActIntYc",LIr,2,found)) begin
    if (LIr.IntYc!=type) then begin found = false; end;
    if (LIr.TransNr!=transnr) then begin found = false; end;   
    if (found) then begin
      lisum = lisum + LIr.Sum;
      libasesum = libasesum + LIr.BaseSum;
    end;
  end;
  return;
end;

global
procedure LiqInfoVc_PasteTransNr(var record LIqInfoVc LIr)
begin
  record IVVc IVr;
  record VIVc VIr;
  record SMVc SMr;
  val lisum,libasesum;
  record ARVc ARr;
  record APVc APr;

  switch (LIr.IntYc) begin
    case IVYc:
      IVr.SerNr = LIr.TransNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        LIr.CUCode = IVr.CustCode;
        LIr.CUName = IVr.Addr0;
        LIr.NewPayDate = IVr.PayDate;
        if (LIr.NewPayDate<CurrentDate) then begin
          LIr.NewPayDate = CurrentDate;
        end;
        LIr.Comment = IVr.InvComment;
        ARr.InvoiceNr = IVr.SerNr;
        if (ReadFirstMain(ARr,1,true)) then begin end;
        LIqInfoSum(LIr.IntYc,LIr.TransNr,lisum,libasesum);        
        LIr.Sum = ARr.RVal - lisum;
        LIr.BaseSum = ARr.BookRVal - libasesum;
      end;
    case VIYc:
      VIr.SerNr = LIr.TransNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        LIr.CUCode = VIr.VECode;
        LIr.CUName = VIr.VEName;
        LIr.NewPayDate = VIr.DueDate;
        if (LIr.NewPayDate<CurrentDate) then begin
          LIr.NewPayDate = CurrentDate;
        end;
        LIr.Comment = VIr.RefStr;
        APr.SerNr = VIr.SerNr;
        if (ReadFirstMain(APr,1,true)) then begin end;
        LIqInfoSum(LIr.IntYc,LIr.TransNr,lisum,libasesum);        
        LIr.Sum = APr.RVal - lisum;
        LIr.BaseSum = APr.BookRVal - libasesum;
//        LIr.BaseSum = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff) - libasesum;
      end;
    case 2:
/*    
      SMr.SerNr = LIr.TransNr;
      if (ReadFirstMain(SMr,1,true)) then begin
        LIr.CUCode = SMr.VECode;
        LIr.CUName = SMr.VEName;
        LIr.Sum = SMr.PayVal - LIqInfoSum(LIr.IntYc,LIr.TransNr);
        LIr.NewPayDate = SMr.DueDate;
      end;
*/      
  end;
  return;
end;

global
procedure LiqInfoVc_PasteSum(var record LIqInfoVc LIr,Integer basesum)
begin
  record IVVc IVr;
  record VIVc VIr;

  switch (LIr.IntYc) begin
    case IVYc:
      IVr.SerNr = LIr.TransNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        switch (basesum) begin
          case 0:
            LIr.BaseSum = MulWithRateToBase1(IVr.CurncyCode,LIr.TransDate,LIr.Sum,DefaultCurRoundOff);
          case 1:
            LIr.Sum = DivWithRateToBase1(IVr.CurncyCode,LIr.TransDate,LIr.BaseSum,DefaultCurRoundOff);
        end;
      end;
    case VIYc:
      VIr.SerNr = LIr.TransNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        switch (basesum) begin
          case 0:
            LIr.BaseSum = MulWithRateToBase1(VIr.CurncyCode,LIr.TransDate,LIr.Sum,DefaultCurRoundOff);
          case 1:
            LIr.Sum = DivWithRateToBase1(VIr.CurncyCode,LIr.TransDate,LIr.BaseSum,DefaultCurRoundOff);
        end;
      end;
  end;
  return;
end;
