remote updating procedure ColumnGridDraggedProjectActivity(Integer,record RcVc,record ActVc,LongInt,LongInt,string);
remote updating procedure ColumnGridDraggedActivity_CreateQuotation(var record ActVc,var record QTVc,string);
remote updating procedure ColumnGridDraggedActivity_CreateOrder(var record ActVc,var record ORVc,string);
external procedure FillPipelineOverview(var record RcVc,var Area);
remote updating function string 255 ColumnGridDraggedActivity2(Integer,record RcVc,record ActVc,LongInt,LongInt,var string);
remote updating procedure ColumnGridDraggedKitchenOrder(Integer,record RcVc,record KitchenOrderVc,LongInt,LongInt,LongInt);
remote updating procedure ColumnGridDraggedOrder(Integer,record RcVc,record ORVc,LongInt,LongInt);
remote updating procedure ColumnGridDraggedQuotation(Integer,record RcVc,record QTVc,LongInt,LongInt);
remote updating procedure ColumnGridDraggedOpportunity(Integer,record RcVc,record QYVc,LongInt,LongInt);

global
procedure FillPipelineOverviewClient(var record RcVc RepSpec,var Area adhp)
begin
  threadremote.FillPipelineOverview(RepSpec,adhp);
  if (RepSpec.long1>0) then begin
    MessageBox(RepSpec.long1,"");
  end;
  return;
end;

global
updating procedure ColumnGridDraggedCell(LongInt wn,LongInt fromRow,LongInt fromCol,LongInt toRow,LongInt toCol)
begin
  LongInt type,sernr;
  string 255 rlink;
  string 255 vcname,newclass,rgrs;
  Integer compnr;
  Integer oldcomp,nwn;
  record ActVc Actr;
  record KitchenOrderVc KOr;
  record ORVc ORr;
  record OYVc OYr;
  record PRVc PRr;
  record QTVc QTr;
  LongInt rownr;
  record RcVc RepSpec;
  
  oldcomp = CurrentCompany;
  GetWindowRecord(wn,RepSpec);
  
  ColumnGridGetCell(wn,fromRow,fromCol,rlink,rownr);
  
  compnr = GetRecordLinkFields(rlink,vcname);

  LogText2(0,"ColumnGridDraggedCell wn=" & wn & ", fromRow=" & fromRow & ", fromCol=" & fromCol & ", toRow=" & toRow & ", toCol=" & toCol,kVerbosityDebugDetailed);


  if (SetCompany(compnr,false)==false) then begin
    LogText2(0,"ColumnGridDraggedCell SetCompany compnr=" & compnr & " failed",kVerbosityDebug);
    goto LColumnGridDraggedCell;
  end;
  
  LogText2(0,"ColumnGridDraggedCell vcname=" & vcname,kVerbosityDebug);
  switch (vcname) begin
    case "ActVc":
      compnr = UnpackRecordLink(rlink,Actr);
      rgrs = ColumnGridDraggedActivity2(compnr,RepSpec,Actr,fromCol,toCol,newclass);
      switch (rgrs) begin
         case "IntProjManActVc":
            if (nonblank(newclass)) then begin
              ColumnGridDraggedProjectActivity(compnr,RepSpec,Actr,fromCol,toCol,newclass);
            end;
         case "ORVc":
           ColumnGridDraggedActivity_CreateOrder(Actr,ORr,newclass);
           nwn = OpenWindow("ORDClass",0,0,"","",ORr);
         case "QTVc":
           ColumnGridDraggedActivity_CreateQuotation(Actr,QTr,newclass);
           nwn = OpenWindow("QTDClass",0,0,"","",QTr);
      end;
    case "KitchenOrderVc":
      compnr = UnpackRecordLink(rlink,KOr);
      ColumnGridDraggedKitchenOrder(compnr,RepSpec,KOr,rownr,fromCol,toCol);
    case "ORVc":
      compnr = UnpackRecordLink(rlink,ORr);
      ColumnGridDraggedOrder(compnr,RepSpec,ORr,fromCol,toCol);
    case "QTVc":
      compnr = UnpackRecordLink(rlink,QTr);
      ColumnGridDraggedQuotation(compnr,RepSpec,QTr,fromCol,toCol);
    case "OYVc":
      compnr = UnpackRecordLink(rlink,OYr);
      ColumnGridDraggedOpportunity(compnr,RepSpec,OYr,fromCol,toCol);
    case "PRVc":
      compnr = UnpackRecordLink(rlink,PRr);
//      ColumnGridDraggedProject(compnr,RepSpec,PRr,fromCol,toCol);
  end;
  
  UpdateBrowses("PipelineWClass");
  
LColumnGridDraggedCell:;
  ResetCompany(oldcomp);
end;
