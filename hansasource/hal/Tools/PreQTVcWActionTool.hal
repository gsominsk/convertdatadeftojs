external function roundmode DefaultRoundMode();
external procedure AddCalcPrice(record INVc,record CPMVc,string,val,string,Integer,var val);
external procedure GetUserObject(string,var string);
external procedure RemoveOldPersObjects(string,var string);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure RemoveOldCustObjects(string,var string);
external procedure SetSalesMan(var string,string);
external function Boolean GetPD(var record PDVc);
external function string 255 FindINObjects(string,string);
external procedure PreQTVc_PasteSalesMan(var record PreQTVc,string,string);
external procedure RemoveOldUserObjects(string,var string);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure PreQTDchsum(record PreQTVc,Integer);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean QTyDepPriceL(string);
external function Boolean PreQTDchrsum(var record PreQTVc,Integer,Integer);
external procedure PreQTSumup(var record PreQTVc);
external procedure GetFullCurncyRate(var string,Date,var val,var val,var val,var val,var val);

global
procedure PreQTGetRate(var record PreQTVc PreQTp)
BEGIN
  val from,to1,to2,base1,base2;
  val sum;
  string 5 crncy;
 
  crncy = PreQTp.CurncyCode;
  GetFullCurncyRate(crncy,PreQTp.QTDate,from,to1,to2,base1,base2);
  PreQTp.CurncyCode = crncy;
  PreQTp.FrRate = from;
  PreQTp.ToRateB1 = to1;
  PreQTp.ToRateB2 = to2;
  PreQTp.BaseRate1 = base1;
  PreQTp.BaseRate2 = base2;  
  sum = MulRateToBase1(PreQTp.CurncyCode,PreQTp.Sum4,from,to1,to2,base1,base2,DefaultCurRoundOff);
  PreQTp.BaseSum4 = sum;  
  RETURN;
END;

procedure PasteSalesManInPreQT(var record PreQTVc PreQTp)
BEGIN
  record UserVc Userr;

  Userr.Code = PreQTp.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin
    PreQTp.SalesGroup = Userr.SalesGroup;
    if ((nonblank(PreQTp.Objects)) and (nonblank(Userr.PersObjx))) then begin
      PreQTp.Objects = PreQTp.Objects & ",";
    end;
    PreQTp.Objects = PreQTp.Objects & Userr.PersObjx;
  end;
  RETURN;
END;

global
function Boolean PasteCustInPreQT(var record PreQTVc PreQTp,string custcode,string efstr,var string warning,Boolean updateallf)
BEGIN
  record RebVc Rebr;
  record CUVc CUr;
  Boolean res;
  string 255 tstr,tstr2;
  Integer i;
  record PDVc PDr;
  Time blankt;

  if ((efstr!=PreQTp.CustCode) and (nonblank(efstr))) then begin
    tstr = PreQTp.Objects;
    RemoveOldCustObjects(efstr,tstr);
    PreQTp.Objects = tstr;
  end;  
  warning = "";
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = true;
    Rebr.Code = CUr.RebCode;
    if (ReadFirstMain(Rebr,1,true)) then begin
      PreQTp.DiscPerc = Rebr.DiscPerc;
    end;
    PreQTp.Addr0 = CUr.Name;
    PreQTp.Addr1 = CUr.InvAddr0;
    PreQTp.Addr2 = CUr.InvAddr1;
    PreQTp.Addr3 = CUr.InvAddr2;
    PreQTp.InvAddr3 = CUr.InvAddr3;
    PreQTp.InvAddr4 = CUr.InvAddr4;
    PreQTp.ExportFlag = CUr.ExportFlag;
    PreQTp.CustCat = CUr.CustCat;
    PreQTp.PayDeal = CUr.PayDeal;
    if ((nonblank(PreQTp.Objects)) and (nonblank(CUr.Objects))) then begin
      PreQTp.Objects = PreQTp.Objects & ",";
    end;
    PreQTp.Objects = PreQTp.Objects & CUr.Objects;
    PreQTp.CurncyCode = CUr.CurncyCode;
    PreQTp.Comment = CUr.OrderComment;
    PreQTp.PriceList = CUr.PLCode;
    PreQTp.RebCode = CUr.RebCode;
    tstr = PreQTp.PriceList;
    GetPriceList(PreQTp.CustCat,PreQTp.QTDate,blankt,tstr,i);
    PreQTp.InclVAT = i;
    PreQTp.PriceList = tstr;
    if (blank(PreQTp.PriceList)) then begin
      PDr.Code = PreQTp.PayDeal;
      if (GetPD(PDr)) then begin
        PreQTp.PriceList = PDr.PriceList;
      end;
    end;
    PreQTp.RebCode = CUr.RebCode;
    PreQTp.CustVATCode = CUr.VATCode;
    PreQTp.Phone = CUr.Phone;
    PreQTp.Fax = CUr.Fax;
    PreQTp.VATNr = CUr.VATNr;
    PreQTp.CustVATCode = CUr.VATCode;
    warning = CUr.WarnText1;
    PreQTGetRate(PreQTp);    
    if (updateallf) then begin
      PreQTp.CustContact = CUr.Person;
      SetSalesMan(tstr,CUr.SalesMan);
      tstr2 = PreQTp.Objects;
      RemoveOldPersObjects(PreQTp.SalesMan,tstr2);
      PreQTp.Objects = tstr2;
      PreQTp.SalesMan = tstr;
      PasteSalesManInPreQT(PreQTp);
      /*
      GetUserObject(PreQTp.SalesMan,tstr);    
      if ((nonblank(PreQTp.Objects)) and (nonblank(tstr))) then begin
        PreQTp.Objects = PreQTp.Objects & ",";
      end;
      PreQTp.Objects = PreQTp.Objects & tstr;
      */
    end;
  end;  
  PasteCustInPreQT = res;
  RETURN;
END;

global
procedure PreQTMultiLineText(record PreQTVc PreQTr,record INVc INr,string langcode,Integer arow)
BEGIN
  row PreQTVc PreQTrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(PreQTr,PreQTrw,1);
    PreQTrw.Spec = tstr;
    MatRowInsert(PreQTr,arow+tcnt-1,PreQTrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

global
procedure PreQTGetCalcItemPrice(record INVc INr,record PreQTVc PreQTp,Integer rownr,var val pricep)
BEGIN
  row PreQTVc PreQTrw;
  record CPMVc CPr;
  Integer i,rwcnt;
  val price;
  
  rwcnt = MatRowCnt(PreQTp);
  MatRowGet(PreQTp,rownr,PreQTrw);
  PreQTrw.Price = blankval;
  MatRowPut(PreQTp,rownr,PreQTrw);
  CPr.Code = INr.CalcPrice;
  if (ReadFirstMain(CPr,1,true)) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PreQTp,i,PreQTrw);
      if (i!=rownr) then begin
        if (PreQTrw.stp==1) then begin
          AddCalcPrice(INr,CPr,PreQTrw.ArtCode,PreQTrw.Sum,PreQTrw.VATCode,PreQTp.InclVAT,price);
        end;
      end;  
    end;
    price = Round(price,DefaultRoundMode);
    MatRowGet(PreQTp,rownr,PreQTrw);
    PreQTrw.Price = price;
    MatRowPut(PreQTp,rownr,PreQTrw);
  end;
  if (pricep!=-1) then begin pricep = price; end;
  RETURN;
END;  

global
procedure PreQTVc_PasteQuant(var record PreQTVc PreQTr,Integer rownr,var Boolean chsum)
BEGIN
  record INVc INr;
  row PreQTVc PreQTrw;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice,chrsum;
  Boolean pritemf;
  string 10 markup;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  Time blankt;

  price = PreQTrw.Price;
  BlockLoad(GenOptRec);
  chsum = false;
  chrsum = false;
  MatRowGet(PreQTr,rownr,PreQTrw);
  price = PreQTrw.Price;
  vreb = PreQTrw.vRebate;
  if (GetItemPriceDiscount3(PreQTrw.ArtCode,PreQTrw.Quant,INr,PreQTr.CurncyCode,
                            PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,
                            "",PreQTr.CustCat,PreQTr.PriceList,PreQTr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            PreQTr.ExportFlag,calcprice,PreQTr.QTDate,blankt,PreQTr.CustCode,false,dummyf,PreQTr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
    if (nonblank(PreQTr.PriceList)) then begin
      if (QtyDepPriceL(PreQTr.PriceList)) then begin
        PreQTrw.Price = price;
      end;
    end;
    if (calcprice) then begin
      MatRowPut(PreQTr,rownr,PreQTrw);
      temp = -1;
      PreQTGetCalcItemPrice(INr,PreQTr,rownr,temp);
      MatRowGet(PreQTr,rownr,PreQTrw);
    end;
    PreQTrw.vRebate = vreb;
    if (baseprice<>0) then begin
      PreQTrw.BasePrice = baseprice;
    end;
    chrsum = true;
    MatRowPut(PreQTr,rownr,PreQTrw);
  end;
  if (chrsum) then begin
    chsum = PreQTDchrsum(PreQTr,rownr,GenOptRec.UseDiscount);
  end;
  RETURN;
END;

global
function Boolean PreQTVc_PasteArtCode(var record PreQTVc PreQTr,Integer rownr,var string inwarning)
BEGIN
  Boolean chsum,res;
  Boolean chrsum;
  record INVc INr;
  row PreQTVc PreQTrw;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf;
  val UnitFactQuant,UnitFactPrice,Quant;
  string 10 markup;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  Time blankt;

  BlockLoad(GenOptRec);
  chsum = false;
  chrsum = false;
  pritemf = true;
  MatRowGet(PreQTr,rownr,PreQTrw);
  PreQTrw.Price = BlankVal;
  PreQTrw.vRebate = BlankVal;
  PreQTrw.Sum = BlankVal;
  if (GetItemPriceDiscount3(PreQTrw.ArtCode,PreQTrw.Quant,INr,PreQTr.CurncyCode,
                            PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,
                            "",PreQTr.CustCat,PreQTr.PriceList,PreQTr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            PreQTr.ExportFlag,calcprice,PreQTr.QTDate,blankt,PreQTr.CustCode,false,dummyf,PreQTr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
    if (vreb==0) then begin
      vreb = blankval;
    end;
    PreQTrw.Price = price;
    PreQTrw.Spec = curitemname;
    PreQTrw.vRebate = vreb;
    PreQTrw.VATCode = vatcode;
    PreQTrw.BasePrice = baseprice;
    PreQTrw.SalesAcc = salesacc;
    PreQTrw.ArtCode = INr.Code;
    PreQTrw.Objects = FindINObjects(INr.Objects,INr.Group);
    PreQTrw.PriceFactor = INr.PriceFactor;
    if (nonblank(PreQTr.CustVATCode)) then begin
      PreQTrw.VATCode = PreQTr.CustVATCode;
    end;
    if (calcprice) then begin
      MatRowPut(PreQTr,rownr,PreQTrw);
      temp = -1;
      PreQTGetCalcItemPrice(INr,PreQTr,rownr,temp);
      MatRowGet(PreQTr,rownr,PreQTrw);
    end;
    MatRowPut(PreQTr,rownr,PreQTrw);
    chrsum = true;
    PreQTMultiLineText(PreQTr,INr,"",rownr);
    if (nonblank(INr.WarnText1)) then begin
      inwarning = INr.WarnText1;
    end;
    if (PreQTDchrsum(PreQTr,rownr,GenOptRec.UseDiscount)) then begin
      PreQTDchsum(PreQTr,rownr);
    end;    
    PreQTSumup(PreQTr);
    MatRowGet(PreQTr,rownr,PreQTrw);
    res = true;
  end;
  PreQTVc_PasteArtCode = res;
  RETURN;
END;

global
procedure PreQTVc_PasteSalesMan(var record PreQTVc PreQTp,string salesmancode,string efstr)
BEGIN 
  record UserVc Userr;
  string 255 tstr;
    
  if ((efstr!=PreQTp.SalesMan) and (nonblank(efstr))) then begin
    tstr = PreQTp.Objects;
    RemoveOldUserObjects(efstr,tstr);
    PreQTp.Objects = tstr;
  end;
  PasteSalesManInPreQT(PreQTp);
  Userr.Code = PreQTp.SalesMan;
  if (ReadFirstMain(Userr,1,true)) then begin end;
  tstr = PreQTp.Objects;
  if ((nonblank(tstr)) and (nonblank(Userr.PersObjx))) then begin
    tstr = tstr & ",";
  end;
  tstr = tstr & Userr.PersObjx;
  PreQTp.Objects = tstr;          
  RETURN;
END;    

procedure PreQTDUpdatePrices(var record PreQTVc PreQTr,Boolean readf)
BEGIN
  Integer i,rwcnt;
  record INVc INr;
  row PreQTVc PreQTrw;
  Boolean calcprice,chsum;
  string 255 tstr;
  string 2 vatcode;
  string 10 salesacc,markup,tax2code,taxtemplatecode;
  val price,vrebate,baseprice,tax2prc;
  val subtot;
  record GeneralOptionBlock GenOptRec;
  Boolean dummyf;
  Time blankt;

  if (readf) then begin
    if (ReadFirstMain(PreQTr,0,true)) then begin end;
  end;
  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(PreQTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PreQTr,i,PreQTrw);
    switch (PreQTrw.stp) begin
      case 1:
    if (nonblank(PreQTrw.ArtCode)) then begin      
      vrebate = PreQTrw.vRebate;
      if (GetItemPriceDiscount3(PreQTrw.ArtCode,PreQTrw.Quant,INr,PreQTr.CurncyCode,
          PreQTr.FrRate,PreQTr.ToRateB1,PreQTr.ToRateB2,PreQTr.BaseRate1,PreQTr.BaseRate2,
          "",PreQTr.CustCat,PreQTr.PriceList,PreQTr.RebCode,
          price,tstr,vrebate,vatcode,baseprice,
          salesacc,PreQTr.ExportFlag,calcprice,PreQTr.QTDate,blankt,PreQTr.CustCode,true,dummyf,PreQTr.PayDeal,tax2code,tax2prc,"","",taxtemplatecode)) then begin
        PreQTrw.Price = price;
        PreQTrw.vRebate = vrebate;
        PreQTrw.BasePrice = baseprice;
        PreQTrw.VATCode = vatcode;
        PreQTrw.SalesAcc = salesacc;
        PreQTrw.ArtCode = INr.Code;
      end;  
      MatRowPut(PreQTr,i,PreQTrw);
      chsum = PreQTDchrsum(PreQTr,i,GenOptRec.UseDiscount);
      PreQTDchsum(PreQTr,i);
      MatRowGet(PreQTr,i,PreQTrw);
      subtot = subtot + PreQTrw.Sum;
    end;
      case 9:
        PreQTrw.Sum = subtot;
        subtot = blankval;
        MatRowPut(PreQTr,i,PreQTrw);
    end;    
  end;
  PreQTSumup(PreQTr);      
  RETURN;
END;

global
procedure PreQTVc_PasteCurncyCode(var record PreQTVc PreQTp,string oldcurncy)
BEGIN
  val fr,to1,to2,br1,br2;
  record ItemSettingBlock ISr;
  
  if (PreQTp.CurncyCode!=oldcurncy) then begin
    PreQTGetRate(PreQTp);
    PreQTDUpdatePrices(PreQTp,false);
  end else begin
    BlockLoad(ISr);
    SaveExchangeRate(PreQTp.FrRate,PreQTp.ToRateB1,PreQTp.ToRateB2,PreQTp.BaseRate1,PreQTp.BaseRate2,fr,to1,to2,br1,br2);
    PreQTGetRate(PreQTp);
    if ((OtherExchangeRate(PreQTp.FrRate,PreQTp.ToRateB1,PreQTp.ToRateB2,PreQTp.BaseRate1,PreQTp.BaseRate2,fr,to1,to2,br1,br2)) and (ISr.UpdCurPrWithDate!=0)) then begin
      PreQTDUpdatePrices(PreQTp,false);
    end;
  end;
  RETURN;
END;

global
procedure PreQTVc_PastevRebate(var record PreQTVc PreQTr,Integer rownr,var Boolean chsum)
BEGIN
  record GeneralOptionBlock GenOptRec;

  BlockLoad(GenOptRec);
  chsum = PreQTDchrsum(PreQTr,rownr,GenOptRec.UseDiscount);
  RETURN;
END;

global
procedure PreQTVc_PasteQTDate(var record PreQTVc PreQTp)
BEGIN
  Time blankt;

  PreQTGetRate(PreQTp);
  GetPriceList(PreQTp.CustCat,PreQTp.QTDate,blankt,PreQTp.PriceList,PreQTp.InclVAT);
  PreQTSumup(PreQTp);
  return;
end;

