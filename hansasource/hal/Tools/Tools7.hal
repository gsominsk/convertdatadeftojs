external function string 255 FindINObjects(string,string);
external function Integer InString2(string,string);
external function Boolean StarMatch(string,string);
external procedure IVMultiLineText(record IVVc,record INVc,string,Integer);
external procedure IVDchsum(var record IVVc,Integer);//37
external function Boolean IVDchrsum(var record IVVc,Integer);
external procedure PUCalcPerc(val,string,var val);

/*
global
function Boolean CheckDepAndDate(record AT2UnitVc ATUnitr,string depcode,Date d1)
BEGIN
  record InvrsVc Invrsr;
  record AT2TakeVc AT2Taker;
  Boolean found,res,testf;

  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.Department = depcode;
  found = true;
  while (LoopKey("Department",Invrsr,3,found)) begin
    if (Invrsr.TransDate>d1) then begin
      found = false;
    end;
    if (Invrsr.Department!=depcode) then begin
      found = false;
    end;
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin
      found = false;
    end;    
    if (found) then begin
      testf = true;
      if (Invrsr.FileName=="AT2TakeVc") then begin
        AT2Taker.SerNr = Invrsr.TransNr;
        if (ReadFirstMain(AT2Taker,1,true)) then begin
          if (AT2Taker.PhysCheckf==0) then begin    
            if (AT2Taker.DepCode==depcode) then begin
              res = true;
              goto LCheckDep;
            end;
          end;
        end;  
      end;    
    end;
  end;  
  if (ATUnitr.PurchaseDate<=d1) then begin
    res = true;
  end;    
  if (nonblank(depcode)) then begin
    if (ATUnitr.DepCode!=depcode) then begin    
      res = false;
    end; 
  end;  
LCheckDep:;  
  CheckDepAndDate = res; 
  RETURN;
END;
*/

global
function Boolean CheckDepAndDate(record AT2UnitVc ATUnitr,string depcode,Date d1)
BEGIN
  record InvrsVc Invrsr;
  record AT2TakeVc AT2Taker;
  Boolean found,res;
  string 20 lastdepcode;
  
  Invrsr.InventoryNr = ATUnitr.InventoryNr;
  Invrsr.FileName = "AT2TakeVc";
  found = true;
  while (LoopKey("FileName",Invrsr,3,found)) begin
    if (Invrsr.InventoryNr!=ATUnitr.InventoryNr) then begin
      found = false;
    end;    
    if (Invrsr.FileName!="AT2TakeVc") then begin
      found = false;
    end;    
    if (Invrsr.TransDate>d1) then begin
      found = false;
    end;
    if (found) then begin
      AT2Taker.SerNr = Invrsr.TransNr;
      if (ReadFirstMain(AT2Taker,1,true)) then begin
        if (AT2Taker.PhysCheckf==0) then begin    
          lastdepcode = AT2Taker.DepCode;
        end;
      end;
    end;
  end;  
  if (nonblank(depcode)) then begin
    if (nonblank(lastdepcode)) then begin
      if (lastdepcode==depcode) then begin
        res = true;
      end;
    end else begin
      if (ATUnitr.PurchaseDate<=d1) then begin
        if (ATUnitr.DepCode==depcode) then begin    
          res = true;
        end;
      end; 
    end;
  end;    
  CheckDepAndDate = res; 
  RETURN;
END;

procedure SplitStarStrs(string tstr,var string t1,var string t2,var LongInt starposp)
BEGIN
  LongInt i,l;
  string 1 c;
  Boolean L22SplitStarStrs,L33SplitStarStrs,L44SplitStarStrs,LSplitStarStrs;
  
  l = len(tstr);
  t1 = "";
  t2 = "";
  starposp = 0;
  i=0;
  while ((i<l) and (L22SplitStarStrs==false)) begin
    c = Mid(tstr,i,1);  
//    if (c=="*") then begin goto L22SplitStarStrs; end;
    if (c=="*") then begin 
      L22SplitStarStrs = true; 
    end else begin
      t1 = t1 & c;
      i = i + 1;
    end;  
  end;
  
  if (L22SplitStarStrs==false) then begin
//    goto LSplitStarStrs;  
    LSplitStarStrs = true;
  end;
//L22SplitStarStrs:;  
  if (LSplitStarStrs==false) then begin
    while ((i<l) and (L33SplitStarStrs==false)) begin
      c = Mid(tstr,i,1);  
//    if (c!="*") then begin goto L33SplitStarStrs; end;
      if (c!="*") then begin 
        L33SplitStarStrs = true; 
      end else begin
        i = i + 1;
      end;
    end;
    if (L33SplitStarStrs==false) then begin
//      goto LSplitStarStrs;
      LSplitStarStrs = true;
    end;  
//L33SplitStarStrs:;
    if (LSplitStarStrs==false) then begin
    
      starposp = i;
      while ((i<=l) and (L44SplitStarStrs==false)) begin
        c = Mid(tstr,i,1);  
//    if (c=="*") then begin goto L44SplitStarStrs; end;
        if (c=="*") then begin 
          L44SplitStarStrs = true; 
        end else begin
          t2 = t2 & c;
          i = i + 1;
        end;
      end;
    end;  
  end;  
//L44SplitStarStrs:;
//LSplitStarStrs:;
  RETURN;
END;

procedure SplitQuestionStrs(string tstr,var string t1,var string t2,var LongInt starposp)
BEGIN
  LongInt i,l;
  string 1 c;
  Boolean L22SplitQuestionStrs,L33SplitQuestionStrs,L44SplitQuestionStrs,LSplitQuestionStrs;
  
  l = len(tstr);
  t1 = "";
  t2 = "";
  starposp = 0;
  i=0;
  while ((i<l) and (L22SplitQuestionStrs==false)) begin
    c = Mid(tstr,i,1);  
//    if (c=="*") then begin goto L22SplitQuestionStrs; end;
    if (c=="?") then begin 
      L22SplitQuestionStrs = true; 
    end else begin
      t1 = t1 & c;
      i = i + 1;
    end;  
  end;
  
  if (L22SplitQuestionStrs==false) then begin
//    goto LSplitQuestionStrs;  
    LSplitQuestionStrs = true;
  end;
//L22SplitQuestionStrs:;  
  if (LSplitQuestionStrs==false) then begin
    while ((i<l) and (L33SplitQuestionStrs==false)) begin
      c = Mid(tstr,i,1);  
//    if (c!="*") then begin goto L33SplitQuestionStrs; end;
      if (c!="?") then begin 
        L33SplitQuestionStrs = true; 
      end else begin
        i = i + 1;
      end;
    end;
    if (L33SplitQuestionStrs==false) then begin
//      goto LSplitQuestionStrs;
      LSplitQuestionStrs = true;
    end;  
//L33SplitQuestionStrs:;
    if (LSplitQuestionStrs==false) then begin
    
      starposp = i;
      while ((i<=l) and (L44SplitQuestionStrs==false)) begin
        c = Mid(tstr,i,1);  
//    if (c=="*") then begin goto L44SplitQuestionStrs; end;
        if (c=="?") then begin 
          L44SplitQuestionStrs = true; 
        end else begin
          t2 = t2 & c;
          i = i + 1;
        end;
      end;
    end;  
  end;  
//L44SplitQuestionStrs:;
//LSplitQuestionStrs:;
  RETURN;
END;

global
function Boolean QuestionMatch(string searchstr,string tstr)
BEGIN
  Boolean res;
  string 255 t0,t1,t2;
  LongInt starpos,i;
  string 1 c;
  
  res = true;
  SplitQuestionStrs(searchstr,t1,t2,starpos);
  
  if (len(t1)>len(tstr)) then begin
    res = false;
    goto LQuestionMatch;
  end;
  t0 = tstr;
  t0 = Left(tstr,len(t1));

  if (t0!=t1) then begin
    res = false;
    goto LQuestionMatch;
  end;  
  t0 = "";
  for (i=starpos-1;i<=len(tstr);i=i+1) begin
    c = Mid(tstr,i,1);  
    t0 = t0 & c;
  end;  
  if (nonblank(t2)) then begin
    if (InString2(t0,t2)<0) then begin  
      res = false;
      goto LQuestionMatch;
    end;
  end;  
LQuestionMatch:;
  QuestionMatch = res;
  RETURN;
END;

global
procedure GetItemGroupDescription(string ingroup,var string res)
BEGIN
  record ITVc ITp;
 
  res = "";
  ITp.Code = ingroup;
  if (ReadFirstMain(ITp,1,true)) then begin
    res = ITp.Comment;
  end;  
  RETURN;
END;

procedure GetITCostCreditAcc(string itcode,var string costacc,var string creditacc)
BEGIN
  record ITVc ITr;
  
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    if (ITr.SwapAccounts==0) then begin
      costacc = ITr.CostAcc;   
      creditacc = ITr.InvAcc;
    end else begin
      creditacc = ITr.CostAcc;
      costacc = ITr.InvAcc;
    end; 
  end;  
  RETURN;
END;

global
procedure GetITName(string itcode,string langcode,var string name)
BEGIN
  record ITVc ITr;
  row ITVc ITrw;
  Integer i,rwcnt;
  
  name = "";
  ITr.Code = itcode;
  if (ReadFirstMain(ITr,1,true)) then begin
    name = ITr.Comment;
    rwcnt = MatRowCnt(ITr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ITr,i,ITrw);
      if (langcode==ITrw.LangCode) then begin
        name = ITrw.Text;
        i = rwcnt;
      end;
    end;
  end;  
  RETURN;
END;

global
procedure GetINCostAcc(record INVc INp,var string costacc)
BEGIN
  string 10 creditacc;
  
  costacc = INp.CostAcc;
  if (blank(costacc)) then begin
    GetITCostCreditAcc(INp.Group,costacc,creditacc);
  end;
  RETURN;
END;

