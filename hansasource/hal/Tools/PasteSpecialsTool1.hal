external function Boolean TouchScreenLook();
external function string 20 FindJobCustomerCode(record JobVc);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
remote procedure FillKnownSerialNr(string,var Array string,var Integer);
remote procedure FillSerialNr2(string,string,var Array string,var Integer);
remote procedure FillSerialNr(string,string,var Array string,var Integer);
external procedure M4PadString(string,Integer,string,Boolean,var string);
remote procedure ContactSClassOnOpenRemote(string,var Array string,var Integer);
remote procedure ContactSClassOnOpenRemote2(string,var Array string,var Integer);
remote procedure ContactCustCodeSClassOnOpenRemote(string,var Array string,var Integer);

global
procedure ContactSClassOnOpen(Integer wn,string custcode,var Array string acontact,var Integer acnt)
begin
  if (blank(custcode)) then begin
    ContactSClassOnOpenRemote2(custcode,acontact,acnt);
  end else begin
    ContactSClassOnOpenRemote(custcode,acontact,acnt);
  end;
  return;
end;

global
procedure CUVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record CUVc CUr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,CUr);
  ContactSClassOnOpen(wn,CUr.Code,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure JobVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record JobVc Jobr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,Jobr);
  if (nonblank(Jobr.Source)) then begin
    ContactSClassOnOpen(wn,Jobr.Source,acontact,acnt);
  end else begin
    ContactSClassOnOpen(wn,FindJobCustomerCode(Jobr),acontact,acnt);
  end;
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure ResAvVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record ResAvVc ResAvr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,ResAvr);
  if (nonblank(ResAvr.SourceCode)) then begin
    ContactSClassOnOpen(wn,ResAvr.SourceCode,acontact,acnt);
  end else begin
    ContactSClassOnOpen(wn,ResAvr.CUCode,acontact,acnt);
  end;
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure CQVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record CQVc CQr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  string 255 custcode;
  
  GetWindowRecord(mwn,CQr);
  switch (WindowActiveField(mwn)) begin
    case "ClientContact": custcode = CQr.CustCode;
    case "VEContact": custcode = CQr.VECode;
  end;
  ContactSClassOnOpen(wn,custcode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure COVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record COVc COr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  string 255 custcode;
  
  GetWindowRecord(mwn,COr);
  switch (WindowActiveField(mwn)) begin
    case "ClientContact": custcode = COr.CustCode;
    case "VEContact": custcode = COr.VECode;
  end;
  ContactSClassOnOpen(wn,custcode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure PRVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record PRVc PRr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,PRr);
  ContactSClassOnOpen(wn,PRr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure ActVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record ActVc Actr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,Actr);
  ContactSClassOnOpen(wn,Actr.CUCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure IVVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record IVVc IVr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,IVr);
  ContactSClassOnOpen(wn,IVr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure ORVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record ORVc ORr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,ORr);
  ContactSClassOnOpen(wn,ORr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure QTVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record QTVc QTr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,QTr);
  ContactSClassOnOpen(wn,QTr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure LetVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record LetVc Letr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,Letr);
  ContactSClassOnOpen(wn,Letr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure SVGMVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record SVGMVc SVGMr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,SVGMr);
  ContactSClassOnOpen(wn,SVGMr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure SVOVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record SVOVc SVOr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,SVOr);
  ContactSClassOnOpen(wn,SVOr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure WOVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record WOVc WOr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,WOr);
  ContactSClassOnOpen(wn,WOr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure WSVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record WSVc WSr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,WSr);
  ContactSClassOnOpen(wn,WSr.CustCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure POVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record POVc POr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,POr);
  ContactSClassOnOpen(wn,POr.VECode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure POCOVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record POCOVc POCOr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,POCOr);
  ContactSClassOnOpen(wn,POCOr.VECode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure POQTVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record POQTVc POQTr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;
  
  GetWindowRecord(mwn,POQTr);
  ContactSClassOnOpen(wn,POQTr.VECode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure JobVc_ResUserSClass(Integer wn,Integer mwn)
BEGIN
  record UserVc USr;
  record ResVc Resr;
  record JobVc Jobr;
  Date sd,ed;
  Time stime,etime;
  LongInt sernr;
  string 255 tstr,t1;
  Boolean found,testf;
  
  GetWindowRecord(mwn,Jobr);

  sd = Jobr.TransDate;
  ed = Jobr.EndDate;
  stime = Jobr.StartTime;
  etime = Jobr.EndTime;
  sernr = Jobr.SerNr;

  found = true;
  while (LoopMain(Resr,1,found)) begin
    testf = true;
    if (Resr.Terminated!=0) then begin testf = false; end;
    if (testf) then begin
      tstr = Resr.Code;
      M4PadString(Resr.Name,65," ",true,t1);
      tstr = tstr & t1;
      M4PadString("R",5," ",true,t1);
      tstr = tstr & t1;
      SetListString(wn,len(tstr),tstr,false);
    end;
  end;  
  
  found = true;
  while (LoopMain(USr,1,found)) begin
    testf = true;
    if (USr.TerminatedFlag!=0) then begin testf = false; end;
    if (testf) then begin
      tstr = USr.Code;
      M4PadString(USr.Name,65," ",true,t1);
      tstr = tstr & t1;
      M4PadString("U",5," ",true,t1);
      tstr = tstr & t1;
      SetListString(wn,len(tstr),tstr,false);
    end;
  end;  

  RETURN;
END;

procedure DelAddrSClassOnOpen(Integer wn,string custcode)
BEGIN
  Boolean found;
  string 255 tstr;
  record DelAddrVc DelAddrr;

  found = true;
  DelAddrr.CustCode = custcode;
  while (LoopKey("CustCode",DelAddrr,1,found)) begin
    if (DelAddrr.CustCode==custcode) then begin
      M4PadString(DelAddrr.DelCode,20," ",false,tstr);
      tstr = tstr & DelAddrr.Comment;
      SetListString(wn,len(tstr),tstr,false);
    end else begin
      found = false;
    end;
  end;
  found = true;
  ResetLoop(DelAddrr);
  DelAddrr.CustCode = "";
  while (LoopKey("CustCode",DelAddrr,1,found)) begin
    if (blank(DelAddrr.CustCode)) then begin
      M4PadString(DelAddrr.DelCode,20," ",false,tstr);
      tstr = tstr & DelAddrr.Comment;
      SetListString(wn,len(tstr),tstr,false);
    end else begin
      found = false;
    end;
  end;
  RETURN;
END;

global
procedure SHVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record SHVc SHr;
  
  GetWindowRecord(mwn,SHr);
  DelAddrSClassOnOpen(wn,SHr.CustCode);
  RETURN;
END;

global
procedure ORVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record ORVc ORr;
  
  GetWindowRecord(mwn,ORr);
  DelAddrSClassOnOpen(wn,ORr.CustCode);
  RETURN;
END;

global
procedure IVVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record IVVc IVr;
  
  GetWindowRecord(mwn,IVr);
  DelAddrSClassOnOpen(wn,IVr.CustCode);
  RETURN;
END;

global
procedure QTVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record QTVc QTr;
  
  GetWindowRecord(mwn,QTr);
  DelAddrSClassOnOpen(wn,QTr.CustCode);
  RETURN;
END;

global
procedure AgreementVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record AgreementVc Agreementr;
  
  GetWindowRecord(mwn,Agreementr);
  DelAddrSClassOnOpen(wn,Agreementr.CustCode);
  RETURN;
END;

global
procedure RentQTVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record RentQTVc RentQTr;
  
  GetWindowRecord(mwn,RentQTr);
  DelAddrSClassOnOpen(wn,RentQTr.CustCode);
  RETURN;
END;

global
procedure RentResVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record AgreementVc Agreementr;
  record RentResVc RentResr;
  
  GetWindowRecord(mwn,RentResr);
  Agreementr.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreementr,1,true)) then begin
    DelAddrSClassOnOpen(wn,Agreementr.CustCode);
  end;
  RETURN;
END;

global
procedure DispatchVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record DispatchVc Dispatchr;
  
  GetWindowRecord(mwn,Dispatchr);
  DelAddrSClassOnOpen(wn,Dispatchr.CustCode);
  RETURN;
END;

global
procedure OffHireVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record OffHireVc OffHirer;
  
  GetWindowRecord(mwn,OffHirer);
  DelAddrSClassOnOpen(wn,OffHirer.CustCode);
  RETURN;
END;

global
procedure RetPUVc_DelAddrSClass(Integer wn,Integer mwn)
BEGIN
  record RetPUVc RetPUr;
  
  GetWindowRecord(mwn,RetPUr);
  DelAddrSClassOnOpen(wn,RetPUr.VECode);
  RETURN;
END;

global
procedure SVOVc_DelAddrSClass(Integer wn,Integer mwn)
begin
  record SVOVc SVOr;
  
  GetWindowRecord(mwn,SVOr);
  DelAddrSClassOnOpen(wn,SVOr.CustCode);
  return;
end;

global
procedure CustRouteVc_DelAddrSClass(Integer wn,Integer mwn)
begin
  record CustRouteVc CustRouter;
  
  GetWindowRecord(mwn,CustRouter);
  DelAddrSClassOnOpen(wn,CustRouter.CustCode);
  return;
end;

global
procedure RetPUVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record RetPUVc RetPUr;
  row RetPUVc RetPUrw;
  Integer rn,rwcnt;
  string 255 location;
  
  GetWindowRecord(mwn,RetPUr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(RetPUr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(RetPUr,rn,RetPUrw);
    location = RetPUrw.Location;
    if (blank(location)) then begin
      location = RetPUr.Location;
    end;
    switch (type) begin
      case 1: FillSerialNr(RetPUrw.ArtCode,location,asernrstr,acnt);
      case 2: FillSerialNr2(RetPUrw.ArtCode,location,asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure ProdOperationVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
begin
  record ProdOperationVc Prodr;
  row ProdOperationVc Prodrw;
  Integer rn,rwcnt;

  GetWindowRecord(mwn,Prodr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(Prodr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(Prodr,rn,Prodrw);
    switch (type) begin
       case 1: FillSerialNr(Prodrw.Item,Prodr.Location,asernrstr,acnt);
       case 2: FillSerialNr2(Prodrw.Item,Prodr.Location,asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure BPCVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record BPCVc BPCr;
  row BPCVc BPCrw;
  Integer rn,rwcnt;
  
  GetWindowRecord(mwn,BPCr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(BPCr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(BPCr,rn,BPCrw);
    switch (type) begin
      case 1: FillSerialNr(BPCrw.ArtCode,"",asernrstr,acnt);
      case 2: FillSerialNr2(BPCrw.ArtCode,"",asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure BatchTextVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record BatchTextVc BatchTextr;
  
  GetWindowRecord(mwn,BatchTextr);
  switch (type) begin
    case 1: FillSerialNr(BatchTextr.ArtCode,"",asernrstr,acnt);
    case 2: FillSerialNr2(BatchTextr.ArtCode,"",asernrstr,acnt);
  end;
  RETURN;
END;

global
procedure IVVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record IVVc IVr;
  row IVVc IVrw;
  Integer rn,rwcnt;
  string 255 location;
  
  GetWindowRecord(mwn,IVr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(IVr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(IVr,rn,IVrw);
    location = IVrw.Location;
    if (blank(location)) then begin
      location = IVr.Location;
    end;
    switch (type) begin
      case 1: FillSerialNr(IVrw.ArtCode,location,asernrstr,acnt);
      case 2: FillSerialNr2(IVrw.ArtCode,location,asernrstr,acnt);
    end;   
  end;  
  RETURN;
END;

global
procedure IVCashVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer rn,rwcnt;
  
  GetWindowRecord(mwn,IVCashr);
  if (TouchScreenLook) then begin
    IVCashrw.ArtCode = GetWindowString(mwn,"touchscreenitem");   
    switch (type) begin
      case 1: FillSerialNr(IVCashrw.ArtCode,IVCashr.Location,asernrstr,acnt);
      case 2: FillSerialNr2(IVCashrw.ArtCode,IVCashr.Location,asernrstr,acnt);
    end;
  end else begin
    switch (GetWindowClass(mwn)) begin
      case "NPTSIVCashDClass":
        rn = SelectedListLine(mwn);
      otherwise
        rn = WindowActiveRow(mwn);
    end;
    rwcnt = MatRowCnt(IVCashr);
    if (rn<=rwcnt) and (rn>=0) then begin
      MatRowGet(IVCashr,rn,IVCashrw);
      switch (type) begin
        case 1: FillSerialNr(IVCashrw.ArtCode,IVCashr.Location,asernrstr,acnt);
        case 2: FillSerialNr2(IVCashrw.ArtCode,IVCashr.Location,asernrstr,acnt);
      end;
    end;
  end;
  return;
end;

global
procedure ORVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  Integer rn,rwcnt;
  
  GetWindowRecord(mwn,ORr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(ORr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(ORr,rn,ORrw);
    switch (type) begin
      case 1: FillSerialNr(ORrw.ArtCode,ORr.Location,asernrstr,acnt);
      case 2: FillSerialNr2(ORrw.ArtCode,ORr.Location,asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure ProdVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record ProdVc Prodr;
  row ProdVc Prodrw;
  Integer rn,rwcnt;
  
  GetWindowRecord(mwn,Prodr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(Prodr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(Prodr,rn,Prodrw);
    switch (type) begin
      case 1: FillSerialNr(Prodrw.Item,Prodr.Location,asernrstr,acnt);
      case 2: FillSerialNr2(Prodrw.Item,Prodr.Location,asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure PUVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record PUVc PUr;
  row PUVc PUrw;
  Integer rn,rwcnt;
  string 20 thelocation;
  
  GetWindowRecord(mwn,PUr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(PUr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(PUr,rn,PUrw);
    if (blank(PUrw.Location)) then begin
      thelocation = PUr.Location;
    end else begin
      thelocation = PUrw.Location;
    end;
    switch (type) begin
      case 1: FillSerialNr(PUrw.ArtCode,thelocation,asernrstr,acnt);
      case 2: FillSerialNr2(PUrw.ArtCode,thelocation,asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure SDVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record SDVc SDr;
  row SDVc SDrw;
  Integer rn,rwcnt;
  string 255 location
  
  GetWindowRecord(mwn,SDr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(SDr);
  location = SDr.Location;
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(SDr,rn,SDrw);
    if (nonblank(SDrw.Location)) then begin
      location = SDrw.Location;
    end;
    switch (type) begin
      case 1: FillSerialNr(SDrw.ArtCode,location,asernrstr,acnt);
      case 2: FillSerialNr2(SDrw.ArtCode,location,asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure SRVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record SRVc SRr;
  row SRVc SRrw;
  Integer rn,rwcnt;
  string 255 location
  
  GetWindowRecord(mwn,SRr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(SRr);
  location = SRr.Location;
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(SRr,rn,SRrw);
    if (nonblank(SRrw.Location)) then begin
      location = SRrw.Location;
    end;
    switch (type) begin
      case 1: FillSerialNr(SRrw.ArtCode,location,asernrstr,acnt);
      case 2: FillSerialNr2(SRrw.ArtCode,location,asernrstr,acnt);
    end;
  end;  
  RETURN;
END;

global
procedure SHVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record SHVc SHr;
  row SHVc SHrw;
  Integer rn,rwcnt;
  string 255 location;
  
  GetWindowRecord(mwn,SHr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(SHr);
  location = SHr.Location;
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(SHr,rn,SHrw);
    if (nonblank(SHrw.Location)) then begin
      location = SHrw.Location;
    end;
    switch (type) begin
      case 1: FillSerialNr(SHrw.ArtCode,location,asernrstr,acnt);
      case 2: FillSerialNr2(SHrw.ArtCode,location,asernrstr,acnt);
    end;    
  end;  
  RETURN;
END;

global
procedure DropSHVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record DropSHVc DropSHr;
  row DropSHVc DropSHrw;
  Integer rn,rwcnt;
  string 255 location;
  record MainStockBlock MSb;
  
  BlockLoad(MSb);
  GetWindowRecord(mwn,DropSHr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(DropSHr);
  location = MSb.MainStock;
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(DropSHr,rn,DropSHrw);
    switch (type) begin
      case 1: FillSerialNr(DropSHrw.ArtCode,location,asernrstr,acnt);
      case 2: FillSerialNr2(DropSHrw.ArtCode,location,asernrstr,acnt);
    end;    
  end;  
  RETURN;
END;

global
procedure StockMovVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  Integer rn,rwcnt;
  
  GetWindowRecord(mwn,StockMovr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(StockMovr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(StockMovr,rn,StockMovrw);
    switch (type) begin
      case 1: FillSerialNr(StockMovrw.ArtCode,StockMovr.FrLocation,asernrstr,acnt);
      case 2: FillSerialNr2(StockMovrw.ArtCode,StockMovr.FrLocation,asernrstr,acnt);
    end;    
  end;  
  RETURN;
END;

global
procedure StockTakeVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record StockTakeVc StockTaker;
  row StockTakeVc StockTakerw;
  Integer rn,rwcnt;
  string 255 location
  
  GetWindowRecord(mwn,StockTaker);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(StockTaker);
  location = StockTaker.Location;
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(StockTaker,rn,StockTakerw);
    if (nonblank(StockTakerw.Location)) then begin
      location = StockTakerw.Location;
    end;
    switch (type) begin
      case 1: FillSerialNr(StockTakerw.ArtCode,location,asernrstr,acnt);
      case 2: FillSerialNr2(StockTakerw.ArtCode,location,asernrstr,acnt);
    end;        
  end;  
  RETURN;
END;

global
procedure COVc_SerialNrSClass(Integer type,Integer wn,Integer mwn,var Array string asernrstr,var Integer acnt)
BEGIN
  record COVc COr;
  row COVc COrw;
  Integer rn,rwcnt;
  
  GetWindowRecord(mwn,COr);
  rn = WindowActiveRow(mwn);
  rwcnt = MatRowCnt(COr);
  if (rn<=rwcnt) and (rn>=0) then begin
    MatRowGet(COr,rn,COrw);    
    if (WindowActiveField(mwn)=="OrgSerNr") then begin
      FillKnownSerialNr(COrw.OrgArtCode,asernrstr,acnt);
    end else begin
      switch (type) begin
        case 1: FillSerialNr(COrw.ArtCode,COr.Location,asernrstr,acnt);
        case 2: FillSerialNr2(COrw.ArtCode,COr.Location,asernrstr,acnt);
      end;
    end;        
  end;  
  RETURN;
END;

global
procedure RestBookingVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record RestBookingVc RestBookingr;
  Array string 60 acontact;
  Integer i,acnt;
  longint pos;
  string 255 namestr,titlestr;

  GetWindowRecord(mwn,RestBookingr);
  ContactSClassOnOpen(wn,RestBookingr.CUCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//    SetListString(wn,60,acontact[i],false);
    pos = 0;
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    AddListRow(wn,"DLPasteContact",1,namestr,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);
  end;
  RETURN;
END;

global
procedure EmailRecipVc_ContactSClass(Integer wn,Integer mwn)
BEGIN
  record EmailRecipVc EmailRecipr;
  Array string 60 acontact;
  Integer i,acnt;
  LongInt pos;
  string 255 namestr,titlestr,custcode;

  GetWindowRecord(mwn,EmailRecipr);
  ContactSClassOnOpen(wn,EmailRecipr.MainContactCode,acontact,acnt);
  for (i=0;i<acnt;i=i+1) begin
//     SetListString(wn,80,acontact[i],false);
    pos = 0;    
    GetNextSubstring(acontact[i],pos,"#",namestr);
    GetNextSubstring(acontact[i],pos,"#",titlestr);
    GetNextSubstring(acontact[i],pos,"#",custcode);
    AddListRow(wn,"DLPasteContact",1,custcode,0);
    AddListData(wn,"DLPasteContact","DLContactName",namestr);
    AddListData(wn,"DLPasteContact","DLContactTitle",titlestr);    
  end;
  RETURN;
END;