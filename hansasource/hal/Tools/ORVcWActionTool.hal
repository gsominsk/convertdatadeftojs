external function Boolean GetFirstItem(var string,var record INVc);
external procedure ORPasteRvrsVATCode(var record ORVc,Boolean);
forward procedure ORVc_PasteCurncyCode(var record ORVc,string);
remote function Integer ORApprovalStatus(record ORVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external procedure GetCountryName(string,string,var string);
external function Boolean CostPriceForGP(string,string,string,string,var val);
external function val CalcUnitFactor(string,val);
external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external function string 255 CustArtCode(string,string);
external function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);
external procedure ORVc_ChangeQuantityRecepy(string,val,Integer,var record ORVc);
external procedure RowCalculateTaxMatrix_ORVc(var record ORVc,Integer,row ORVc);
external procedure AddPerceptionTaxesRows_ORVc(var record ORVc);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure RegionPerceptionTax(string,string,string,string,var string,var val);
external procedure ORVc_PasteSalesMan(var record ORVc,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external procedure ORVc_PasteSum(var record ORVc,Integer,var Boolean);
external procedure GetUserObject(string,var string);
external procedure RemoveOldPersObjects(string,var string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external procedure GetSalesGroup(string,var string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure RemoveOldCustObjects(string,var string);
external procedure SetSalesMan(var string,string);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function string 255 FindINObjects(string,string);
external function val GetTax1Discount(string,Date,string);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external procedure ORDchsum(var record ORVc,Integer);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetPD(var record PDVc);
external procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var Integer,var string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure GetPayDealText(string,string,var string);
external procedure FindUserMailboxName(string,var string,var string);
external procedure ORSumup(var record ORVc);
external function Boolean ORDchrsum(var record ORVc,Integer);
external function Boolean QtyDepPriceL(string);
external function Boolean ORVc_ExplodeRecepy(record INVc,val,record ORVc,string,Integer);
external procedure GetDatePriceBasedOn(string,Date,Date,string,var Date);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean SetUnitFactor(string,var val,val,val,val,var val,var val,var val,var string,Boolean);
external procedure ORMultiLineText(record ORVc,record INVc,string,Integer);
external procedure ORVcGetCalcItemPrice(record INVc,record ORVc,Integer,var val);
external function Boolean INVc_AllowSales(record INVc,var LongInt);
external function string 20 FindCustRoute(string,string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure GetDatePriceBasedOn(string,Date,Date,string,var Date);
external procedure GetPriceList(string,Date,Time,var string,var Integer);

forward procedure ORVc_PasteQuant(var record ORVc,Integer,Boolean,var Boolean);
forward procedure ORVc_GetPriceList(var record ORVc);
forward procedure ORVc_GetPriceList2(var record ORVc,Boolean);
forward procedure ORDUpdatePrices(var record ORVc,Boolean);

global
procedure ORVc_PasteInvCountry(var record ORVc ORp,string oldCountryCode)
begin 
  if (ORp.InvCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(ORp.InvCountry)) then begin 
      GetCountryName(ORp.InvCountry,ORp.LangCode,ORp.InvCountryName);
    end else begin
      ORp.InvCountryName = "";
    end;       
  end;
  return;
end;

global
procedure ORVc_PasteDelCountry(var record ORVc ORp,string oldCountryCode)
begin 
  if (ORp.DelCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(ORp.DelCountry)) then begin 
      GetCountryName(ORp.DelCountry,ORp.LangCode,ORp.DelCountryName);
    end else begin
      ORp.DelCountryName = "";
    end;       
  end;
  return;
end;

global
function Boolean ORVc_PasteArtCode(var record ORVc ORr,Integer rownr,var string inwarning,var string warning,Boolean varf)
begin
  Boolean chsum,res;
  Boolean chrqty;
  record INVc INr;
  row ORVc ORrw;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb;
  string 255 curitemname,salesacc,vatcode,tstr,tax2code,location,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf;
  val UnitFactQuant,UnitFactPrice,Quant;
  Date orddate;
  Boolean dummyf,varf2;
  LongInt ErrorCode;
  record TaxMatrixVc TMr;
  Time blankt;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  record CUVc CUr;

  chsum = false;
  chrqty = false;
  pritemf = true;
  MatRowGet(ORr,rownr,ORrw);
  ORrw.Price = BlankVal;
  ORrw.vRebate = BlankVal;
  ORrw.Sum = BlankVal;
  ORrw.SerialNr = "";
  location = ORrw.Location;
  if (blank(location)) then begin
    location = ORr.Location;
  end;  
  GetDatePriceBasedOn(ORr.CustCode,ORr.OrdDate,ORr.DespatchDate,ORr.PlanShip,orddate);
  if (GetItemPriceDiscount3(ORrw.ArtCode,ORrw.Quant,INr,ORr.CurncyCode,
                            ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                            ORr.LangCode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            ORr.ExportFlag,calcprice,orddate,blankt,ORr.CustCode,true,dummyf,ORr.PayDeal,tax2code,tax2prc,ORr.Region,location,taxtemplatecode)) then begin
    ORrw.TaxTemplateCode = FillupTaxMatrix(0,ORr.BranchID,ORr.CustCode,ORr.CustCat,ORr.DelAddrCode,taxtemplatecode,TMr);
    CUr.Code = ORr.CustCode;
    ReadFirstMain(CUr,1,true);
    if (vreb==0) then begin
      vreb = blankval;
    end;
    if (nonblank(INr.WarnText1)) then begin
      inwarning = INr.WarnText1;
    end;
    if (!INVc_AllowSales(INr,ErrorCode)) then begin
      warning = USetStr(ErrorCode);
    end;
    ORrw.OrderType = kOrderTypeDefault;
    ORrw.Price = price;
    ORrw.Spec = curitemname;
    ORrw.vRebate = vreb;
    if (CUr.RvrsVAT!=0) then begin
      ORrw.RvrsVATCode = INr.RvrsVATCode;
    end;
    ORrw.VATCode = vatcode;
    ORrw.BasePrice = baseprice;
    ORrw.SalesAcc = salesacc;
    ORrw.ArtCode = INr.Code;
    ORrw.Objects = FindINObjects(INr.Objects,INr.Group);
    ORrw.UnitCode = INr.Unittext;
    ORrw.UnitXval = INr.Width;
    ORrw.UnitYval = INr.Height;
    ORrw.UnitZval = INr.Depth;
    ORrw.OrderType = INr.DefOrderType;
    ORrw.Source = INr.DefaultSource;
    ORrw.PriceFactor = INr.PriceFactor;
    ORrw.Perceptions = INr.Perceptions;
    ORrw.CustArtCode = CustArtCode(ORr.CustCode,ORrw.ArtCode);
    GetTaxesDiscounts(ORr.CustCode,ORr.OrdDate,ORrw.VATCode,tax2code,t,tax2reb);
    if (ORr.NoTax2==0) then begin
      ORrw.TAX2Code = tax2code;
      ORrw.TAX2Prc = tax2prc;
      ORrw.TAX2Reb = tax2reb;
      ORrw.TAX2Acc = GetTax2Acc(ORrw.TAX2Code);
    end;
    if (ORr.NoTax1==0) then begin
      ORrw.TAX1Reb = t;
    end;
    if (nonblank(ORrw.UnitCode)) then begin
      price = ORrw.Price;
      Quant = ORrw.Quant;
      chrqty = SetUnitFactor(ORrw.UnitCode,UnitFactQuant,ORrw.UnitXval,ORrw.UnitYval,ORrw.UnitZval,UnitFactPrice,Quant,price,ORrw.UnitComment,false);
      if (chrqty) then begin
        ORrw.UnitFactQuant = UnitFactQuant;
        ORrw.UnitFactPrice = UnitFactPrice;
        ORrw.Quant = Quant;
        ORrw.Price = price;
      end;
    end;
    if (nonblank(INr.DefLocation)) then begin
      ORrw.Location = INr.DefLocation;
    end;
    if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      ORrw.Recepy = INr.Recepy;
    end else begin 
      ORrw.Recepy = "";
    end;
    if (nonblank(ORr.CustVATCode)) then begin
      ORrw.VATCode = ORr.CustVATCode;
    end;
    if (calcprice) then begin
      MatRowPut(ORr,rownr,ORrw);
      temp = -1;
      ORVcGetCalcItemPrice(INr,ORr,rownr,temp);
      MatRowGet(ORr,rownr,ORrw);
    end;
    PackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
    MatRowPut(ORr,rownr,ORrw);

//    if ((INr.ExplodeRec==0) or (blank(ORrw.Recepy))) and (varf==false) then begin
//why
      MatRowGet(ORr,rownr,ORrw);
      ORMultiLineText(ORr,INr,ORr.LangCode,rownr);
//    end;
    
    if (ORDchrsum(ORr,rownr)) then begin
      ORDchsum(ORr,rownr);
    end;
    if (GuiType==kGuiiPhone or GuiType==kGuiAndroid or IsBooks) then begin
      if (ORrw.Quant==0) then begin
        if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin//should be taken from GetItemPriceDiscount3
          varf2 = true;
        end;
        if (varf2==false) then begin
          MatRowGet(ORr,rownr,ORrw);
          ORrw.Quant = 1;
          MatRowPut(ORr,rownr,ORrw);
          ORVc_PasteQuant(ORr,rownr,true,chsum);
        end;
      end;
    end;
    if (chrqty) then begin
      chsum = ORDchrsum(ORr,rownr);
      if (chsum) then begin
        ORDchsum(ORr,rownr);
      end;
    end;
    if (nonblank(INr.RvrsVATCode) and ORrw.Quant>0) then begin
      ORPasteRvrsVATCode(ORr,false);
    end;
    ORSumup(ORr);
    res = true;
  end else begin
    if (nonblank(ORrw.ArtCode)) then begin
      warning = USetStr(1120) & ORrw.ArtCode;
    end;
  end;
  ORVc_PasteArtCode = res;
  return;
end;

global
procedure CalculateFreightWeightOR(record ORVc ORp,Boolean calcfreighf)
begin
  record FreightWeightBlock frrec;
  row FreightWeightBlock frwrw;
  row ORVc ORrw;
  record INVc INr;
  Integer i,rwcnt;
  val totwt,t;
  
  if (calcfreighf) then begin
    BlockLoad(frrec);
    rwcnt = MatRowCnt(ORp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORp,i,ORrw);
      if (ReadFirstItem(ORrw.ArtCode,INr,false,false)) then begin
        t = ORrw.Quant*INr.Weight;
        totwt = totwt + t;
      end;
    end;
    ORp.FrBase = blankval;
    ORp.FrPrice = blankval;
    if (totwt!=0) then begin
      rwcnt = MatRowCnt(frrec);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(frrec,i,frwrw);
        if (frwrw.TotWeight<=totwt) then begin
          ORp.FrBase = frwrw.TotFreight;
          Base1ToOther(ORp.CurncyCode,ORp.FrBase,ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,t,DefaultCurRoundOff);
          ORp.FrPrice = t;
        end;
      end;
    end;
  end;  
  ORp.Sum4 = ORp.Sum4 + ORp.FrPrice;
  ORp.BaseSum4 = ORp.BaseSum4 + ORp.FrBase;  
  RETURN;
END;

global
procedure ORVc_PasteQuant(var record ORVc ORr,Integer rownr,Boolean calcuntiqf,var Boolean chsum)
BEGIN
  record FreightBlock FreightRec;
  record INVc INr;
  row ORVc ORrw;
  string 255 tstr,curitemname,tax2code,location,taxtemplatecode;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  Date orddate;
  Boolean calcprice,chrsum;
  Boolean dummyf;
  Time blankt;

  MatRowGet(ORr,rownr,ORrw);
  location = ORrw.Location;
  if (blank(location)) then begin
    location = ORr.Location;
  end;  
  price = ORrw.Price;
  vreb = ORrw.vRebate;  
  GetDatePriceBasedOn(ORr.CustCode,ORr.OrdDate,ORr.DespatchDate,ORr.PlanShip,orddate);
  if (GetItemPriceDiscount3(ORrw.ArtCode,ORrw.Quant,INr,ORr.CurncyCode,
                            ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,
                            ORr.LangCode,ORr.CustCat,ORr.PriceList,ORr.RebCode,
                            price,curitemname,vreb,tstr,baseprice,tstr,
                            ORr.ExportFlag,calcprice,orddate,blankt,ORr.CustCode,true,dummyf,ORr.PayDeal,tax2code,tax2prc,ORr.Region,location,taxtemplatecode)) then begin
    if (nonblank(ORr.PriceList)) then begin
      if (QtyDepPriceL(ORr.PriceList)) then begin
        ORrw.Price = price;
      end;
    end;
    if (calcprice) then begin
      MatRowPut(ORr,rownr,ORrw);
      ORVcGetCalcItemPrice(INr,ORr,rownr,temp);
      MatRowGet(ORr,rownr,ORrw);
    end;
    if (INr.ExplodeRec==0) then begin
      if ((INr.ItemType==kItemTypeStructured) and (nonblank(INr.Recepy))) then begin
        ORrw.Recepy = INr.Recepy;
      end else begin
        ORrw.Recepy = "";
      end;
    end;
    ORrw.vRebate = vreb;
    if (INr.ExplodeRec==0) then begin
      if (baseprice<>0) then begin
        ORrw.BasePrice = baseprice;
      end;
    end;
    if (calcuntiqf) then begin
      ORrw.UnitFactQuant = CalcUnitFactor(ORrw.UnitCode,ORrw.Quant);
    end;
    t = ORrw.BasePrice;
    chsum = CostPriceForGP(ORrw.ArtCode,ORrw.SerialNr,ORr.PriceList,ORr.CustCode,t);
    ORrw.BasePrice = t;
    MatRowPut(ORr,rownr,ORrw);
    chrsum = true;
    if (INr.ExplodeRec!=0) then begin
      if (nonblank(ORrw.Recepy)) then begin
        if (ORVc_ExplodeRecepy(INr,ORrw.Quant,ORr,ORrw.Recepy,rownr)) then begin
          MatRowGet(ORr,rownr,ORrw);
          ORrw.Recepy = "";
          ORrw.BasePrice = blankval;
          MatRowPut(ORr,rownr,ORrw);
        end;
      end else begin
        ORVc_ChangeQuantityRecepy(ORrw.ArtCode,ORrw.Quant,rownr,ORr);
      end;
    end;
    if (chrsum) then begin
      chsum = ORDchrsum(ORr,rownr);
      ORDchsum(ORr,rownr);
    end;            
    BlockLoad(FreightRec);
    if (FreightRec.UseWeight!=0) then begin
      CalculateFreightWeightOR(ORr,true);
    end;
    if (nonblank(INr.RvrsVATCode)) then begin
      ORPasteRvrsVATCode(ORr,false);
    end;
  end else begin
    if (nonblank(ORrw.ArtCode)) then begin
      MessageBox(1120,ORrw.ArtCode);
    end;
  end;
  RETURN;
END;
    
global 
updating function Integer CreateMailFromORD(record ORVc ORr,var record MailVc Mailr,var string warning,string pdfform)
BEGIN
  Integer res;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;
  row ORVc ORrw;
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  string 255 docname,fname;
  string 10 custemail;
  row MailTextVc MTrw;
  Integer IgnoreRecordDetails;
  
  res = 0;
  if (ReadFirstMain(ORr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromORD;
  end;  
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  CUr.Code = ORr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  custemail = CUr.eMail;
  if (nonblank(ORr.CustContact)) then begin
    if (FindCustomerRelation(CUr.Code,ORr.CustContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        custemail = ContactCUr.eMail;
      end;
    end;
  end;
  if (AddEMailRecipients(Mailr,CUr.Code,custemail,kMailSalesOrder)==false) then begin 
    res = 2289;
    warning = CUr.Code;
    goto LCreateMailFromORD;
  end;

  MailTextRow("ORVc","",ORr.LangCode,MTrw,IgnoreRecordDetails);
  Mailr.Header = MTrw.Header;
  Mailr.Header = Mailr.Header & USetStr(1816) & " ";
  Mailr.Header = Mailr.Header & ORr.SerNr;
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin 
    CreateRecordLink(Mailr,CurrentCompany,ORr,CurrentCompany);  
    CreateRecordLink(ORr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  if (IgnoreRecordDetails==0) then begin
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ORrw.stp==10) then begin 
        goto LORHIDDENLine;
      end;
      tstr = ORrw.ArtCode & TAB;
      tstr = tstr & ValToString(ORrw.Quant,M4UVal,"",".",0) & TAB;
      tstr = tstr & Left(ORrw.Spec,60) & TAB;
      tstr = tstr & ORrw.Price & TAB;
      if (ORrw.vRebate!=0) then begin
        tstr = tstr & "-" & ValToString(ORrw.vRebate,M4UVal,"",".",0) & "%" &  TAB;
      end;
      tstr = tstr & ORrw.Sum & TAB;
      if (LTxtr.HtmlFlag==0) then begin
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end else begin
        LineTextPutToHtmlRecord(Mailr,tstr,false,true);
      end;
    end;
LORHIDDENLine:;    
    tstr = TAB & TAB & TAB & "=====";
    if (LTxtr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    tstr = TAB & TAB & TAB & USetStr(2685) & TAB & ORr.Sum1;
    if (LTxtr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    tstr = TAB & TAB & TAB & USetStr(2686) & TAB & ORr.Sum3;
    if (LTxtr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    tstr = TAB & TAB & TAB & USetStr(2687) & TAB & ORr.Sum4;
    if (LTxtr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    GetPayDealText(ORr.PayDeal,ORr.LangCode,tstr);
    tstr = USetStr(3060) & " " & tstr;
    if (LTxtr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
  end;
  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "OrdForm";
  end;
  fname = "tmp/" & USetStr(1816) & " " & ORr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(ORr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromORD:;  
  CreateMailFromORD = res;
  RETURN;
END;

global
procedure ORGetRate(var record ORVc ORp)
BEGIN
  val from,to1,to2,base1,base2;
  val sum;
  string 5 crncy;
 
  crncy = ORp.CurncyCode;
  GetFullCurncyRate(crncy,ORp.OrdDate,from,to1,to2,base1,base2);
  ORp.CurncyCode = crncy;
  ORp.FrRate = from;
  ORp.ToRateB1 = to1;
  ORp.ToRateB2 = to2;
  ORp.BaseRate1 = base1;
  ORp.BaseRate2 = base2;  
  sum = MulRateToBase1(ORp.CurncyCode,ORp.Sum4,from,to1,to2,base1,base2,DefaultCurRoundOff);
  ORp.BaseSum4 = sum;  
  RETURN;
END;

procedure ORUpdateTax1Reb(var record ORVc ORp,Date td)
BEGIN
  row ORVc ORrw;
  Integer i,rwcnt;
  record Tax1RebVc Tax1Rebr;
  
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    Tax1Rebr.Code = ORrw.VATCode;
    Tax1Rebr.CustCode = ORp.CustCode;
    if (ReadFirstMain(Tax1Rebr,2,true)) then begin end;
    if (td>=Tax1Rebr.From) then begin
      ORrw.TAX1Reb = Tax1Rebr.TAX1Reb;
    end;
    MatRowPut(ORp,i,ORrw);
  end;
  RETURN;
END;

global
procedure ORVc_PasteOrdDate(var record ORVc ORp)
begin
  record OrdSettBlock OSbr;
  LongInt week;

  BlockLoad(OSbr);
  if (OSbr.OrdToDespDate<>0) then begin
    ORp.DespatchDate = ORp.OrdDate;
  end;
  ORVc_PasteCurncyCode(ORp,ORp.CurncyCode);
  ORUpdateTax1Reb(ORp,ORp.OrdDate);
  ORVc_GetPriceList2(ORp,false);
  ORSumup(ORp);
  AddPerceptionTaxesRows_ORVc(ORp);
  return;
end;

procedure ChangeORRowSum(var record ORVc ORr,Integer rownr,Integer UseDiscount)
BEGIN
  row ORVc ORrw;
  val t,s,rowinbase,tproc;
  record TaxMatrixVc TMr;

  MatRowGet(ORr,rownr,ORrw);
  t = ORrw.Quant*ORrw.BasePrice;
  if (ORrw.PriceFactor!=0) then begin
    t = t/ORrw.PriceFactor;
  end;
  s = MulRateToBase1(ORr.CurncyCode,ORrw.Sum,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);  
  UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
  FindSalesExVat(TMr,ORrw.VATCode,s,ORr.InclVAT,ORr.NoTAXonVAT,rowinbase);
  ORrw.rowGP = rowinbase - t;
  CalcProc(rowinbase,ORrw.rowGP,tproc);
  CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,s,UseDiscount);
  ORrw.Sum = s;
//  SendArtStat(ORrw.ArtCode,ORr.Location,"",ORrw.rowGP,tproc,t); not needed I think
  MatRowPut(ORr,rownr,ORrw);
  RETURN;        
END;

global
procedure ORDUpdatePrices(var record ORVc ORp,Boolean readf)
BEGIN
  Integer i,rwcnt;
  record INVc INr;
  row ORVc ORrw;
  Boolean calcprice,chsum;
  string 255 tstr;
  string 2 vatcode;
  string 10 salesacc,tax2code,location,taxtemplatecode;
  val price,vrebate,baseprice,tax2prc;
  Boolean dummyf;
  Time blankt;

  if (readf) then begin
    if (ReadFirstMain(ORp,0,true)) then begin end;
  end;
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin
    if (nonblank(ORrw.ArtCode)) then begin
      location = ORrw.Location;
      if (blank(location)) then begin
        location = ORp.Location;
      end;  
      price = ORrw.Price;
      vrebate = blankval;
      baseprice = blankval;
      vatcode = "";
      salesacc = "";
      if (GetItemPriceDiscount3(ORrw.ArtCode,ORrw.Quant,INr,ORp.CurncyCode,
        ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,
        ORp.LangCode,ORp.CustCat,ORp.PriceList,ORp.RebCode,
        price,tstr,vrebate,vatcode,baseprice,
        salesacc,ORp.ExportFlag,calcprice,ORp.OrdDate,blankt,ORp.CustCode,true,dummyf,ORp.PayDeal,tax2code,tax2prc,ORp.Region,location,taxtemplatecode)) then 
      begin
        ORrw.Price = price;
        ORrw.vRebate = vrebate;
        if (INr.ItemType==kItemTypeStructured and blank(ORp.PriceList)) then begin
          ORrw.BasePrice = blankval;
        end else begin
          ORrw.BasePrice = baseprice;
        end;
        ORrw.VATCode = vatcode;
        if (nonblank(ORp.CustVATCode)) then begin
          ORrw.VATCode = ORp.CustVATCode;
        end;
        ORrw.SalesAcc = salesacc;
        ORrw.ArtCode = INr.Code;
        MatRowPut(ORp,i,ORrw);
        chsum = ORDchrsum(ORp,i);
        ORDchsum(ORp,i);
      end;  
    end;
    end;
  end;
  ORSumup(ORp);      
  RETURN;
END;

procedure ORVc_GetPriceList_Argentinean(var record ORVc ORr,record CUVc CUr)
begin
  record MachineCashVc MCr;
  row MachineCashVc MCrw;
  Integer i,rwcnt;

  MCr.Code = ORr.LocalMachineCode;
  if (ReadFirstMain(MCr,1,true)) then begin
    rwcnt = MatRowCnt(MCr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(MCr,i,MCrw);
      if (MCrw.RegDef==CUr.RegNr2) then begin
        if (MCrw.CUVATRules==3 or MCrw.CUVATRules==4 or MCrw.CUVATRules==5 or MCrw.CUVATRules==7) then begin
          ORr.InclVAT = 2;
          i = rwcnt;
        end;
      end;
    end;
  end;
  return
end;

procedure VATLawORVc_GetPriceList(var record ORVc ORr,record CUVc CUr)
begin
  if (HasLocalization("ARG")) then begin
    ORVc_GetPriceList_Argentinean(ORr,CUr);
  end;
  return
end;

global
procedure ORVc_GetPriceList2(var record ORVc ORr,Boolean foundcupl)
begin
  record CUVc CUr;
  record CCatVc CCatr;
  Date d;
  Time blankt;
  string 255 tstr,oldpricelist;
  
  oldpricelist = ORr.PriceList;
  if (foundcupl) then begin
    CUr.Code = ORr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      ORr.PriceList = CUr.PLCode;
      if (blank(ORr.PriceList)) then begin
        CCatr.Code = CUr.CustCat;
        if (ReadFirstMain(CCatr,1,true)) then begin
          ORr.PriceList = CCatr.PLCode;
        end;
      end;
    end;
  end;
  tstr = ORr.PriceList;
  GetDatePriceBasedOn(ORr.CustCode,ORr.OrdDate,ORr.DespatchDate,ORr.PlanShip,d);
  GetPriceList(ORr.CustCat,d,blankt,tstr,ORr.InclVAT);
  if (nonblank(tstr)) then begin
    ORr.PriceList = tstr;
  end;
  VATLawORVc_GetPriceList(ORr,CUr);
  if (oldpricelist!=ORr.PriceList) then begin
    ORDUpdatePrices(ORr,false);
  end;
  return;
end;

global
procedure ORVc_GetPriceList(var record ORVc ORr)
begin
  ORVc_GetPriceList2(ORr,true);
  return;
end;

global
procedure RecalculateWeightORVc(var record ORVc ORp,Boolean readf)
BEGIN
  row ORVc ORrw;
  Integer rwcnt,i;
  record INVc INr;
  
  if (readf) then begin
    if (ReadFirstMain(ORp,0,true)) then begin end;
  end;
  ORp.TotQty = blankval;
  ORp.TotVolume = blankval;
  ORp.TotWeight = blankval;
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    ORp.TotQty = ORp.TotQty + ORrw.Quant;
    if (ReadFirstItem(ORrw.ArtCode,INr,false,false)) then begin
      ORp.TotVolume = ORp.TotVolume + ORrw.Quant*INr.Volume;
      ORp.TotWeight = ORp.TotWeight + ORrw.Quant*INr.Weight;
    end;          
  end;
  if (ORp.TotVolume==0) then begin ORp.TotVolume = blankval; end;
  if (ORp.TotWeight==0) then begin ORp.TotWeight = blankval; end;
  RETURN;
END;

global
procedure ORVc_PasteFrPrice(var record ORVc ORp)
BEGIN
  record FreightBlock FreightRec;
  val pr,t;  

  BlockLoad(FreightRec);
  if (FreightRec.UseWeight!=0) then begin
    CalculateFreightWeightOR(ORp,false);
  end;
  ORSumup(ORp); 
  RETURN;
END;

global
procedure ORVc_PasteRegion(var record ORVc ORp,string oldregion)
begin 
  Integer i,rwcnt;
  row ORVc ORrw;
  val t,tax2reb,tax2prc;
  string 255 tax2code;
  record INVc INr;
     
  if (ORp.Region!=oldregion) then begin
    if (ORp.NoTax2==0) then begin
      rwcnt = MatRowCnt(ORp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(ORp,i,ORrw);
        if (ReadFirstItem(ORrw.ArtCode,INr,true,false)) then begin
          RegionPerceptionTax(ORp.CustCode,ORp.Region,INr.EUCodex,INr.Group,tax2code,tax2prc);
          GetTaxesDiscounts(ORp.CustCode,ORp.OrdDate,ORrw.VATCode,tax2code,t,tax2reb);
          ORrw.TAX2Code = tax2code;
          ORrw.TAX2Prc = tax2prc;
          ORrw.TAX2Reb = tax2reb;
          ORrw.TAX2Acc = GetTax2Acc(ORrw.TAX2Code);
          MatRowPut(ORp,i,ORrw);
        end;
      end;
    end;
    AddPerceptionTaxesRows_ORVc(ORp);
  end;
  return;
end;

global
procedure ORVc_FillupTaxTemplate(var record ORVc ORp)
begin
  row ORVc ORrw;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;
  val t,s,price,vreb,baseprice,tax2prc;
  record INVc INr;
  string 255 tstr,tax2code,location,itemtaxtemplatecode,dummystr;
  Boolean calcprice;
  Integer exportflag;
  Boolean dummyf;
  Time blankt;

  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (nonblank(ORrw.ArtCode)) then begin
      if (GetItemPriceDiscount3(ORrw.ArtCode,ORrw.Quant,INr,ORp.CurncyCode,
                            ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,
                            ORp.LangCode,ORp.CustCat,ORp.PriceList,ORp.RebCode,
                            price,tstr,vreb,dummystr,baseprice,dummystr,
                            exportflag,calcprice,ORp.OrdDate,blankt,ORp.CustCode,true,dummyf,ORp.PayDeal,
                            tax2code,tax2prc,ORp.Region,location,itemtaxtemplatecode)) then begin
        ORrw.TaxTemplateCode = FillupTaxMatrix(0,ORp.BranchID,ORp.CustCode,ORp.CustCat,ORp.DelAddrCode,itemtaxtemplatecode,TMr);
        PackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
        MatRowPut(ORp,i,ORrw);
        RowCalculateTaxMatrix_ORVc(ORp,i,ORrw);
        MatRowPut(ORp,i,ORrw);
        if (ORDchrsum(ORp,i)) then begin
          ORDchsum(ORp,i);
        end;
      end;
    end;
  end;     
  return;
end;


global
procedure ORVc_PasteDelAddrCode(var record ORVc ORp)
BEGIN
  string 255 name,a0,a1,a2,a3,a4,country,region,oldregion,taxtemplatecode,itemtaxtemplatecode,vatcode,dummystr;
  row ORVc ORrw;
  Integer i,rwcnt;
  
  oldregion = ORp.Region;
  SetDelAddr(ORp.CustCode,ORp.DelAddrCode,name,a0,a1,a2,a3,a4,country,region,taxtemplatecode,vatcode,ORp.ExportFlag,ORp.DelRecipientGLN);
  ORp.ShipAddr0 = name;
  ORp.ShipAddr1 = a0;
  ORp.ShipAddr2 = a1;
  ORp.ShipAddr3 = a2;
  ORp.DelAddr3 = a3;
  ORp.DelAddr4 = a4;
  ORp.DelCountry = country;
  ORp.Region = region;
  if (taxtemplatecode!=ORp.CustTaxTemplateCode) then begin
    ORVc_FillupTaxTemplate(ORp);
    ORp.CustTaxTemplateCode = taxtemplatecode;
  end;
  if (vatcode!=ORp.CustVATCode) and (nonblank(vatcode)) then begin
    ORp.CustVATCode = vatcode;
    rwcnt = MatRowCnt(ORp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORp,i,ORrw);
      ORrw.VATCode = vatcode;
      MatRowPut(ORp,i,ORrw);
      if (ORDchrsum(ORp,i)) then begin
        ORDchsum(ORp,i);
      end;
    end;
  end;
  ORVc_PasteRegion(ORp,oldregion);
  ORp.Sorting = FindCustRoute(ORp.CustCode,ORp.Location,ORp.DelAddrCode);
  ORVc_PasteDelCountry(ORp,"");
  ORSumup(ORp);   
  RETURN;
END;

global
procedure ORVc_PastePayDeal(var record ORVc ORp)
BEGIN
  record PDVc PDr;
  
  //if (blank(ORp.PriceList)) then begin
    PDr.Code = ORp.PayDeal;
    if (ReadFirstMain(PDr,1,true)) then begin
      if (nonblank(PDr.PriceList)) then begin
        if (PDr.PriceList!=ORp.PriceList) then begin
          ORp.PriceList = PDr.PriceList;
          ORDUpdatePrices(ORp,false);
        end;
      end;
    end;
  //end;
  RETURN;
END;

global
procedure ORVc_PasteCurncyCode(var record ORVc ORp,string oldcurncy)
BEGIN
  val fr,to1,to2,br1,br2;
  record ItemSettingBlock ISb;
  
  if (ORp.CurncyCode!=oldcurncy) then begin
    ORGetRate(ORp);
    ORDUpdatePrices(ORp,false);
  end else begin
    BlockLoad(ISb);
    SaveExchangeRate(ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,fr,to1,to2,br1,br2);
    ORGetRate(ORp);
    if ((OtherExchangeRate(ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,fr,to1,to2,br1,br2)) and (ISb.UpdCurPrWithDate!=0)) then begin 
      ORDUpdatePrices(ORp,false);
    end;
  end;
  RETURN;
END;

global
procedure ORVc_PasteVATCode2(var record ORVc ORp,Integer rownr,string oldvatcode,var Boolean chsum)
begin
  row ORVc ORrw;
  
  MatRowGet(ORp,rownr,ORrw);
  if (ORp.NoTax1==0) then begin
    ORrw.TAX1Reb = GetTax1Discount(ORp.CustCode,ORp.OrdDate,ORrw.VATCode);
    MatRowPut(ORp,rownr,ORrw);
  end;
  chsum = ORDchrsum(ORp,rownr) or (oldvatcode!=ORrw.VATCode);
  return;
end;

global
procedure ORVc_PasteVATCode(var record ORVc ORp,Integer rownr,var Boolean chsum)
begin
  return;
end;

global
procedure ORVc_PasteTaxTemplateCode(var record ORVc ORr,Integer rownr,var Boolean chsum)
begin
  row ORVc ORrw;
  record TaxMatrixVc TMr;
  
  MatRowGet(ORr,rownr,ORrw);
  ORrw.TaxTemplateCode = OverrideTaxMatrix(ORrw.TaxTemplateCode,TMr);
  PackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
  MatRowPut(ORr,rownr,ORrw);
  RowCalculateTaxMatrix_ORVc(ORr,rownr,ORrw);
  MatRowPut(ORr,rownr,ORrw);
  chsum = ORDchrsum(ORr,rownr);
  return;
end;

global
procedure ORVc_PastePriceList(var record ORVc ORp)
begin
  record PLDefVc PLDefR;
 
  PLDefR.Code = ORp.PriceList;
  if (ReadFirstMain(PLDefR,1,true)) then begin
    ORp.InclVAT = PLDefR.InclVAT;
  end;
  ORDUpdatePrices(ORp,false);
  return;
end;

global
procedure ORVc_PasteUnitCode(var record ORVc ORp,Integer rownr)
BEGIN
  row ORVc ORrw;
  val unitqty,unitprice,qty,price,oldqty;
  Boolean chrsum,chsum;

  MatRowGet(ORp,rownr,ORrw);
  unitqty = ORrw.UnitFactQuant;
  unitprice = ORrw.UnitFactPrice;
  oldqty = ORrw.Quant;
  qty = ORrw.Quant;
  price = ORrw.Price;
  chrsum = true;
  if (nonblank(ORrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(ORrw.UnitCode,unitqty,ORrw.UnitXval,ORrw.UnitYval,ORrw.UnitZval,unitprice,qty,price,ORrw.UnitComment,false)) then begin
    ORrw.UnitFactQuant = unitqty;
    ORrw.UnitFactPrice = unitprice;
    ORrw.Quant = qty;
    ORrw.Price = price;
    chrsum = true;
    MatRowPut(ORp,rownr,ORrw);
    if (oldqty!=ORrw.Quant) then begin
      ORVc_PasteQuant(ORp,rownr,false,chsum);
    end;
  end;    
  end;
  if (chrsum) then begin
    chsum = ORDchrsum(ORp,rownr);
  end;
  ORSumup(ORp);   
  RETURN;
END;

global
function Boolean ORVc_PasteUnitFactQuant(var record ORVc ORp,Integer rownr)
BEGIN
  row ORVc ORrw;
  val unitqty,unitprice,qty,price;
  Boolean chrsum,chsum;

  MatRowGet(ORp,rownr,ORrw);
  unitqty = ORrw.UnitFactQuant;
  unitprice = ORrw.UnitFactPrice;
  qty = ORrw.Quant;
  price = ORrw.Price;
  chrsum = true;
  if (nonblank(ORrw.UnitCode)) then begin
    chrsum = false;
    if (SetUnitFactor(ORrw.UnitCode,unitqty,ORrw.UnitXval,ORrw.UnitYval,ORrw.UnitZval,unitprice,qty,price,ORrw.UnitComment,false)) then begin
      ORrw.UnitFactQuant = unitqty;
      ORrw.UnitFactPrice = unitprice;
      ORrw.Quant = qty;
      ORrw.Price = price;
      chrsum = true;
      MatRowPut(ORp,rownr,ORrw);
      ORVc_PasteQuant(ORp,rownr,false,chsum);
    end;    
  end;
  ORSumup(ORp);
  ORVc_PasteUnitFactQuant = chsum;
  RETURN;
END;

global
function Boolean PasteCustInOrder(var record ORVc ORp,string custcode,string efstr,var string warning,var string errstr)
BEGIN
  Boolean res;
  record CreditLimitBlock CreditLimitRec;
  record RebVc Rebr;
  record CUVc CUr;
  record UserVc Userr;
  string 255 tstr,tstr2;
  val bal,limit;
  record FreightBlock FreightRec;
  record INVc INr;
  record CCatVc CCatr;
  Boolean limitdaysf;
  string 5 oldpricelist,oldvatcode,oldcurrency;
  
  warning = "";
  errstr = "";
  if ((efstr!=custcode) and (nonblank(efstr))) then begin
    tstr = ORp.Objects;
    RemoveOldCustObjects(efstr,ORp.Objects);
    if (ORp.Objects!=tstr) then begin
      res = true;
    end;
  end;
  oldpricelist = ORp.PriceList;
  oldvatcode = ORp.CustVATCode;
  oldcurrency = ORp.CurncyCode;
  BlockLoad(CreditLimitRec);
  CUr.Code = custcode;
  if (GetCustAndBal(CUr,limit,bal,CreditLimitRec.Base,CreditLimitRec.OwnCheques,CreditLimitRec.ThirdCheques,CreditLimitRec.IOUCheques,CreditLimitRec.ThirdIOUCheques,CreditLimitRec.ORSaveWarn,limitdaysf)) then begin
    BlockLoad(FreightRec);
    res = true;
    CCatr.Code = CUr.CustCat;
    if (ReadFirstMain(CCatr,1,true)) then begin end;
    Rebr.Code = CUr.RebCode;
    if (blank(Rebr.Code)) then begin
      Rebr.Code = CCatr.RebCode;
    end;
    if (ReadFirstMain(Rebr,1,true)) then begin
      ORp.DiscPerc = Rebr.DiscPerc;
    end;
    ORp.Addr0 = CUr.Name;
    ORp.Addr1 = CUr.InvAddr0;
    ORp.Addr2 = CUr.InvAddr1;
    ORp.Addr3 = CUr.InvAddr2;
    ORp.InvAddr3 = CUr.InvAddr3;
    ORp.InvAddr4 = CUr.InvAddr4;
    ORp.InvCountry = CUr.CountryCode;
    ORp.CustContact = CUr.Person;
    ORp.RecipientGLN = CUr.RecipientGLN;
    if ((nonblank(CUr.DelAddr0)) or
        (nonblank(CUr.DelAddr1)) or
        (nonblank(CUr.DelAddr2))) then begin
      ORp.ShipAddr0 = CUr.Name;
      ORp.ShipAddr1 = CUr.DelAddr0;
      ORp.ShipAddr2 = CUr.DelAddr1;
      ORp.ShipAddr3 = CUr.DelAddr2;
      ORp.DelAddr3 = CUr.DelAddr3;
      ORp.DelAddr4 = CUr.DelAddr4;
      ORp.DelCountry = CUr.DelCountry;
    end else begin
      ORp.ShipAddr0 = "";
      ORp.ShipAddr1 = "";
      ORp.ShipAddr2 = "";
      ORp.ShipAddr3 = "";
      ORp.DelAddr3 = "";
      ORp.DelAddr4 = "";
      ORp.DelCountry = "";
    end;
    ORp.Region = CUr.Region;
    ORp.Sorting = FindCustRoute(ORp.CustCode,ORp.Location,ORp.DelAddrCode);
    ORp.InvoiceToCode = CUr.InvoiceToCode;
    ORp.ExportFlag = CUr.ExportFlag;
    ORp.CustCat = CUr.CustCat;
    ORp.PayDeal = CUr.PayDeal;
    ORp.CurncyCode = CUr.CurncyCode;
    ORp.BankCode = CUr.AccOperator;
    ORp.Objects = AddObjectToObjectList(ORp.Objects,CUr.Objects);
    SetSalesMan(tstr,CUr.SalesMan);
    tstr2 = ORp.Objects;
    RemoveOldPersObjects(ORp.SalesMan,tstr2);
    ORp.Objects = tstr2;
    ORp.SalesMan = tstr;
    Userr.Code = ORp.SalesMan;
    if (ReadFirstMain(Userr,1,true)) then begin
      ORp.Objects = AddObjectToObjectList(ORp.Objects,Userr.PersObjx);
      ORp.SalesGroup = Userr.SalesGroup;
    end;   
    ORp.LangCode = CUr.LangCode;
    ORp.ShipDeal = CUr.ShipDeal;
    ORp.ShipMode = CUr.ShipMode;
    ORp.Comment = CUr.OrderComment;
    ORVc_PastePayDeal(ORp);
    ORp.RebCode = CUr.RebCode;
    if (blank(ORp.RebCode)) then begin
      ORp.RebCode = CCatr.RebCode;
    end;
    ORp.CustVATCode = CUr.VATCode;
    if (CUr.TaxTemplateCode!=ORp.CustTaxTemplateCode) then begin
      ORVc_FillupTaxTemplate(ORp);
      ORp.CustTaxTemplateCode = CUr.TaxTemplateCode;
    end;
    ORp.Phone = CUr.Phone;
    ORp.Fax = CUr.Fax;
    ORVc_GetPriceList(ORp);
    ORp.DelRecipientGLN = CUr.RecipientGLN;
    ORp.VATNr = CUr.VATNr;
    ORp.NoTax1 = CUr.NoTax1;
    ORp.NoTax2 = CUr.NoTax2;
    ORGetRate(ORp);    

    ORp.FrItem = FreightRec.FrItem;
    INr.Code = ORp.FrItem;
    if (ReadFirstMain(INr,1,true)) then begin
      ORp.FrVATCode = CUr.VATCode;
      if (blank(ORp.FrVATCode)) then begin
        GetItemVATCode(ORp.FrItem,ORp.ExportFlag,tstr,true);
        ORp.FrVATCode = tstr;
      end;
      ORp.FrBase = INr.UPrice1;
    end else begin
      ORp.FrItem = "";
      ORp.FrBase = blankval;
      ORp.FrPrice = blankval;
      ORp.FrVATCode = "";
    end;
    if (FreightRec.UseWeight!=0) then begin
      CalculateFreightWeightOR(ORp,true);
    end else begin
      ORp.FrPrice = DivRateToBase1(ORp.CurncyCode,ORp.FrBase,ORp.FrRate,ORp.ToRateB1,ORp.ToRateB2,ORp.BaseRate1,ORp.BaseRate2,DefaultCurRoundOff);
    end;    
    if (nonblank(CUr.WarnText1)) then begin
      warning = CUr.WarnText1;
    end;
    if (CreditLimitRec.ORPaste==1) then begin
      if (limitdaysf) then begin
        errstr = USetStr(22260);
      end;
      if (blank(limit)==false) then begin 
        if (bal>limit) then begin
          if (limit==0.001 and CreditLimitRec.Base==kCreditLimitBasedOnOpenInvSuspendOnOverdue) then begin
            errstr = USetStr(39600);
          end else begin
            errstr = USetStr(1164);
          end;
        end;
      end;
    end;
    if (oldpricelist!=ORp.PriceList or oldvatcode!=ORp.CustVATCode or oldcurrency!=ORp.CurncyCode) then begin
      ORDUpdatePrices(ORp,false);
    end;
  end;
  AddPerceptionTaxesRows_ORVc(ORp);
  ORVc_PasteInvCountry(ORp,"");
  ORVc_PasteDelCountry(ORp,"");
  PasteCustInOrder = res;
  RETURN;
END;

global
procedure ORVc_PastePRCode(var record ORVc ORp)
begin
  record PRVc PRr;
  string 255 tstr,warning,errstr;
  string 10 oldsalesman;
  
  PRr.Code = ORp.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (ORp.CustCode!=PRr.CustCode) then begin
      ORp.CustCode = PRr.CustCode;
      if (PasteCustInOrder(ORp,ORp.CustCode,"",warning,errstr)) then begin
        ORp.Objects = AddObjectToObjectList(ORp.Objects,PRr.Objects);        
        oldsalesman = ORp.SalesMan;
        ORp.SalesMan = PRr.Leader;
        if (nonblank(PRr.PrSalesMan)) then begin
          ORp.SalesMan = PRr.PrSalesMan;
        end;        
        ORVc_PasteSalesMan(ORp,oldsalesman);
        if (nonblank(PRr.CurncyCode)) then begin
          tstr = ORp.CurncyCode;
          ORp.CurncyCode = PRr.CurncyCode;
          ORVc_PasteCurncyCode(ORp,tstr);
        end;
      end;
    end;
  end;
  return;
end;

global
procedure ORVc_PastePrice(var record ORVc ORp,Integer rownr,var Boolean chsum)
begin
  row ORVc ORrw;
  record INVc INr;
  
  MatRowGet(ORp,rownr,ORrw);
  if (ORrw.stp==kInvoiceRowTypeNormal or ORrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
    chsum = ORDchrsum(ORp,rownr);
    if (nonblank(ORrw.ArtCode)) then begin
      if (GetFirstItem(ORrw.ArtCode,INr)==false) then begin
        ReadFirstItem(ORrw.ArtCode,INr,true,false);
      end;
      if (nonblank(INr.RvrsVATCode)) then begin
        ORPasteRvrsVATCode(ORp,false);
        ORSumup(ORp);      
      end;
    end;
  end else begin
    chsum = ORDchrsum(ORp,rownr);
  end;
  return;
end;

global
procedure ORVc_PasteUnitFactPrice(var record ORVc ORp,Integer rownr)
begin
  row ORVc ORrw;
  val unitqty,unitprice,qty,price;
  Boolean chrsum,chsum;

  MatRowGet(ORp,rownr,ORrw);
  ORrw.Price = ORrw.UnitFactPrice/(ORrw.Quant/ORrw.UnitFactQuant);
  MatRowPut(ORp,rownr,ORrw);
  ORVc_PastePrice(ORp,rownr,chsum);
  if (chsum) then begin
    ORDchsum(ORp,rownr);
    ORSumup(ORp);
  end;
  return;
end;

global
procedure ORDClassOnOpenWindowRemote(var record ORVc ORr,var Integer AcceptanceStatusFlag)
begin
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  if (HasApprovals) then begin
    AcceptanceStatusFlag = ORApprovalStatus(ORr,Acptr);
  end;
  return;
end;
