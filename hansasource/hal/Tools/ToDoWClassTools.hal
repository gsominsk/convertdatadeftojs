external function Integer IsRedDay(Boolean,record BHollVc,Integer,Date);
external function Boolean HasApprovals();
remote procedure OpenToDoShowingOverdue();
external function string 255 GetGlobalUserMainCompanies(string);
external function Boolean FilterSymbs(Integer,LongInt);
external function Boolean GetGlobalUserMainCompany(string,var string);
external procedure AddActToThp(record ActVc,Area);
external procedure ExtractObj(string,var Integer,var string);
external function LongInt DateDiff(Date,Date);
external function LongInt TODODo_TimedToDos(string,string,string,string,string,string,Integer,Integer,Integer,Integer,Date,Date,Area,Integer,Integer,string);
external procedure UpdateDueTasksCallback(LongInt,LongInt);

global
function Integer CheckTodoAcess(string taskuser,record ActVc Actr,string curuser)
begin
  Integer res;
  record TodoAccessVc TodoAccessr;
  row TodoAccessVc TodoAccessrw;
  string 20 user;
  string 255 actpersons;
  Integer pos;
  Integer rwcnt,i;
  
  if (Actr.TodoFlag==kTodoFlagTodo or Actr.TodoFlag==kTodoFlagTimedTodo or Actr.TodoFlag==kTodoFlagApproval) then begin
    // check only for todo and timed-todos, both OK and non-OKd

    actpersons = Actr.MainPersons;
    if (nonblank(Actr.CCPersons)) then begin
      actpersons = actpersons & ",";
      actpersons = actpersons & Actr.CCPersons;
    end;
    if (SetInSet(taskuser,actpersons)==false) then begin
      res = kAccessLevelNone;
      goto LCheckTodoAcess;
    end;
    pos = 0;
    ExtractObj(taskuser,pos,user);
    while (nonblank(user)) begin
      if (user!=curuser) then begin
        TodoAccessr.Code = user;
        if (ReadFirstMain(TodoAccessr,1,true)) then begin
          res = TodoAccessr.StartLevel;
          rwcnt = MatRowCnt(TodoAccessr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(TodoAccessr,i,TodoAccessrw);
            if (TodoAccessrw.Person==curuser) then begin
              switch (TodoAccessrw.AccFunc) begin
                case 0: // All Activities
                  res = TodoAccessrw.AccLevel;
                case 1: // Private Activities
                  if (Actr.PrivateFlag!=0) then begin
                    res = TodoAccessrw.AccLevel;
                  end;
                  res = TodoAccessrw.AccLevel;
                case 2: // Public Activities
                  if (Actr.PrivateFlag==0) then begin
                    res = TodoAccessrw.AccLevel;
                  end;
              end;
            end;
          end;
        end else begin
          res = kAccessLevelFull;
        end;
      end else begin
        res = kAccessLevelFull;
      end;
      ExtractObj(taskuser,pos,user); // Need to loop
      if (res!=kAccessLevelNone) then begin
        user = "";
      end;
    end;
  end else begin
    res = kAccessLevelFull;
  end;
LCheckTodoAcess:;
  CheckTodoAcess = res;
  return;
end;

global
function Boolean CheckTodoAcessAct(record ActVc Actr,string curuser)
begin
  string 200 tstr;
  Boolean res;
  
  tstr = Actr.MainPersons;
  if (nonblank(tstr) and nonblank(Actr.CCPersons)) then begin
    tstr = tstr & ",";
  end;
  tstr = tstr & Actr.CCPersons;
  res = CheckTodoAcess(tstr,Actr,curuser)!=kAccessLevelNone;
  CheckTodoAcessAct = res;
  return;
end;

global
function Boolean ToDoForRecurringActivityExists2(Date sd,Date ed,string curuser,record ActVc recActr,vector Boolean vactchecked)
begin
  Boolean res;
  record ActVc Actr;
  Boolean found,testf;
  Date dd;
  string 255 index;
  
  index = "UserMain:" & curuser;
  Actr.TodoFlag = kTodoFlagTodo;
  Actr.TransDate = sd;
  found = true;
  while (LoopKey(index,Actr,2,found)) begin
    if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
    if (DateInRange(Actr.TransDate,sd,ed)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Actr.ActType!=recActr.ActType) then begin testf = false; end;
      if (Actr.PRCode!=recActr.PRCode) then begin testf = false; end;
      if (Actr.CUCode!=recActr.CUCode) then begin testf = false; end;
      if (Actr.PrioLevel!=recActr.PrioLevel) then begin testf = false; end;
      if (Actr.PlannedDate!=recActr.TransDate) then begin testf = false; end;
      if (vactchecked[Actr.SerNr]) then begin testf = false; end;
      if (testf) then begin
        res = true;
        found = false;
        vactchecked[Actr.SerNr] = true;
      end;
    end;
  end;

  ToDoForRecurringActivityExists2 = res;
  return;
end;

global
function Boolean ToDoForRecurringActivityExists(Date sd,Date ed,string curuser,record ActVc recActr)
begin
  vector Boolean vactchecked;
  
  ToDoForRecurringActivityExists2(sd,ed,curuser,recActr,vactchecked);
  return;
end;

function Boolean DoFilterToDoW(record RcVc RepSpec,Integer todoflag,record ActVc Actp,string curuser)
begin
  Boolean testf,showrecurringf;
  string 255 tstr;
  LongInt ddiff;
  Date dd,today,blankd;
  string 255 user;
  Integer pos;
  LongInt frprio,toprio;
  record ActTypeVc ActTyper;
  
  pos = 0;
  ExtractObj(RepSpec.f1,pos,user);
  if ((blank(user)) and (blank(RepSpec.f3)) and (blank(RepSpec.f4))) then begin goto LFilterToDoW; end;
  showrecurringf = RepSpec.flags[3]==kTodoFlagRecurring;
  frprio = FirstInRange(RepSpec.LastAcc,10);
  toprio = LastInRange(RepSpec.LastAcc,10);

  testf = true;
  dd = CurrentDate;
  today = CurrentDate;
  switch (RepSpec.flags[1]) begin
    case 1:
      dd = AddMonth(dd,-1);
    case 2:
      dd = AddMonth(dd,-12);
    case 3:
      dd = blankd;
    case 4:
      dd = AddDay(dd,0);
    case 5:
      dd = AddDay(dd,-GetDateId(today)+1);
  end;
  if (nonblank(RepSpec.FirstAcc)) then begin
    if (Actp.PRCode!=RepSpec.FirstAcc) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.LastAcc)) then begin
    if (Actp.PrioLevel<frprio) then begin testf = false; end;
    if (Actp.PrioLevel>toprio) then begin testf = false; end;
  end;;
  if (nonblank(RepSpec.f3)) then begin
    if (SetInSet(Actp.ActType,RepSpec.f3)==false) then begin testf = false; end;
    if (blank(Actp.ActType)) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.AccStr)) then begin
    ActTyper.Code = Actp.ActType;
    ReadFirstMain(ActTyper,1,true);
    if (RepSpec.AccStr!=ActTyper.ActTypeGr) then begin testf = false; end;
  end;
  if (nonblank(RepSpec.f4)) then begin
    if (RepSpec.f4!=Actp.CUCode) then begin testf = false; end;
  end;
  if (Actp.Invalid!=0) then begin testf = false; end;
  
  if (showrecurringf or todoflag==kTodoFlagRecurring) then begin
  end else begin
    if (Actp.TodoFlag==kTodoFlagTimedTodo) then begin
      switch (RepSpec.flags[4]) begin
        case 0:
          if (Actp.OKFlag==0) then begin
            if (RepSpec.flags[1]==0) then begin
              if (Actp.TransDate>CurrentDate) then begin testf = false; end;
            end else begin
              if (Actp.EndDate>CurrentDate) then begin testf = false; end;
            end;
          end;
        case 1:
          if (Actp.OKFlag==0) then begin
            if (RepSpec.flags[1]==0) then begin
              ddiff = DateDiff(Actp.TransDate,CurrentDate);
            end else begin
              ddiff = DateDiff(Actp.EndDate,CurrentDate);
            end;
            if ((ddiff<1) or (ddiff>7)) then begin testf = false; end;
          end;
        case 3:
          if (Actp.OKFlag==0) then begin
            if (RepSpec.flags[1]==0) then begin
              ddiff = DateDiff(Actp.TransDate,CurrentDate);
            end else begin
              ddiff = DateDiff(Actp.EndDate,CurrentDate);
            end;
            if ((ddiff<1) or (ddiff>31)) then begin testf = false; end;
          end;
        case 2: // All
      end;
    end;
    if (Actp.TodoFlag==kTodoFlagTodo or Actp.TodoFlag==kTodoFlagTimedTodo or Actp.TodoFlag==kTodoFlagApproval) then begin
      if (RepSpec.flags[1]==0) then begin
        if (Actp.OKFlag!=0) then begin testf = false; end;
      end else begin
        if (Actp.OKFlag!=0) then begin
  //        if (Actp.TransDate<dd) then begin testf = false; end;
          if (Actp.EndDate<dd) then begin testf = false; end;
        end;
      end;
    end else begin
      if (RepSpec.flags[3]==0) then begin testf = false; end;
    end;
  end;
  if (RepSpec.flags[2]==0) then begin
    if (SetInSet(user,Actp.MainPersons)==false) then begin testf = false; end;
  end;
  if (RepSpec.flags[2]==1) then begin
    if (SetInSet(user,Actp.CCPersons)==false) then begin testf = false; end;
  end;
  if (Actp.PrivateFlag!=0) then begin
    tstr = curuser;
    if (SetInSet(tstr,Actp.MainPersons)==false) then begin testf = false; end;
  end;  
  switch (RepSpec.flags[3]) begin
    case 0: if (Actp.TodoFlag!=kTodoFlagTodo and Actp.TodoFlag!=kTodoFlagApproval and Actp.TodoFlag!=kTodoFlagRecurring) then begin testf = false; end;
    case 1: if (Actp.TodoFlag>kTodoFlagTodo) then begin testf = false; end;
    case 2: if (Actp.TodoFlag!=kTodoFlagTodo and Actp.TodoFlag!=kTodoFlagTimedTodo) then begin testf = false; end;
    case kTodoFlagRecurring: if (Actp.TodoFlag!=kTodoFlagRecurring) then begin testf = false; end;
    case kTodoFlagProject: if (Actp.TodoFlag!=kTodoFlagProject) then begin testf = false; end;
  end;
  if (showrecurringf or todoflag==kTodoFlagRecurring) then begin
  end else begin
    if (RepSpec.flags[1]==0) then begin
      if (DateInRange(Actp.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
    end else begin
      if (DateInRange(Actp.EndDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
    end;
  end;
  if (RepSpec.flags[6]!=0) then begin
    if (Actp.Mother>0) then begin
      testf = false;
    end;
  end;
  if (testf) then begin    
    if (FilterSymbs(RepSpec.flags[5],Actp.SymbNr)==false) then begin testf = false; end;
  end;
  if (testf) then begin
    testf = CheckTodoAcess(RepSpec.f1,Actp,curuser)!=kAccessLevelNone;
  end;
LFilterToDoW:;
  DoFilterToDoW = testf;
  return;
end;

global
function Boolean FilterToDoW(record RcVc RepSpec,record ActVc Actp)
begin
  Boolean testf;
  
  testf = DoFilterToDoW(RepSpec,kTodoFlagTodo,Actp,CurrentUser); // CurrentUser is BLANK in this function!!?!?!?
  FilterToDoW = testf;
  return;
end;

/*
function LongInt Do_ToDo_User(record RcVc RepSpec,Area thp,string curuser)
BEGIN
  LongInt textcnt;
  record ActVc Actr;
  Boolean TrHs;
  string 255 ckey,tstr,user;
  Boolean testf;
  LongInt tp;
  LongInt ptp;
  Integer pos;
  string 20 compcode;
  Integer oldcomp;
  Boolean gucompf;
  
  oldcomp = CurrentCompany;  
  gucompf = RepSpec.flags[29]==0;
  textcnt = 0;
  pos = 0;
  tp = 1;
  ptp = 0;
  ExtractObj(RepSpec.f1,pos,user);
  if ((blank(user)) and (blank(RepSpec.f3)) and (blank(RepSpec.f4))) then begin goto L88Do_ToDo_User; end;
  textcnt = 0;
  if (gucompf) then begin
    if (GetGlobalUserMainCompany(user,compcode)) then begin
      if (nonblank(compcode)) then begin
        if (SetCompanyCode(compcode,false)) then begin
        end;
      end;
    end;
  end;

  ckey = "UserMain:" & user;
  Actr.TodoFlag = 1;
  Actr.TransDate = RepSpec.sStartDate;
  TrHs = true;
  while (LoopKey(ckey,Actr,2,TrHs)) begin
    if (Actr.TodoFlag!=1) then begin TrHs = false; end;
    if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
//    switch (RepSpec.flags[4]) begin
//      case 0: if (Actr.TransDate>CurrentDate) then begin TrHs = false; end;
//    end;    
    testf = false;
    if (TrHs) then begin
      testf = DoFilterToDoW(RepSpec,Actr,curuser);
      if (testf) then begin
        AddActToThp(Actr,thp);
        textcnt = textcnt + 1;
      end;
      if (textcnt>=300) then begin
        RecordNew(Actr);
        Actr.Comment = "ATTENTION! Please make a selection that reduces the number of activities";
        AddActToThp(Actr,thp);
        textcnt = textcnt + 1;
        TrHs = false;
      end;
    end;
  end;
  PutLongInArea(textcnt,thp,0);
L88Do_ToDo_User:;
  if (oldcomp!=CurrentCompany) then begin
    ResetCompany(oldcomp);
  end;
  Do_ToDo_User = textcnt;
  return;
end;
*/

function Date RecurringActOnRedDay(record BHollVc BHr,Boolean bhf,Date td)
begin
  Date res;
  row BHollVc BHrw;
  Integer i,rwcnt;
  vector Boolean vreddays;
  
  if (bhf) then begin
    if (BHr.Monday!=0) then begin
      vreddays[1] = true;
    end;
    if (BHr.Tuesday!=0) then begin
      vreddays[2] = true;
    end;
    if (BHr.Wednesday!=0) then begin
      vreddays[3] = true;
    end;
    if (BHr.Thursday!=0) then begin
      vreddays[4] = true;
    end;
    if (BHr.Friday!=0) then begin
      vreddays[5] = true;
    end;
    if (BHr.Saturday!=0) then begin
      vreddays[6] = true;
    end;
    if (BHr.Sunday!=0) then begin
      vreddays[7] = true;
    end;

    rwcnt = MatRowCnt(BHr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(BHr,i,BHrw);
      if (td==BHrw.FreeDay) then begin
        vreddays[td] = true;
      end;
    end;
  end else begin
    if (GetDateId(td)==6 or GetDateId(td)==7) then begin
      vreddays[GetDateId(td)] = true;
    end;
  end;
  if (vreddays[td]) then begin
    res = td;
    res = AddDay(res,-1);
    res = RecurringActOnRedDay(BHr,bhf,res);
  end else begin
    if (vreddays[GetDateId(td)]) then begin
      res = td;
      res = AddDay(res,-1);
      res = RecurringActOnRedDay(BHr,bhf,res);
    end;
  end;
LRecurringActOnRedDay:;
  RecurringActOnRedDay = res;
  return;
end;

function LongInt Do_ToDo_User_Recurring(record CYBlock CYb,record RcVc RepSpec,Boolean showrecurringf,record ActVc templateActr,var vector Boolean vactchecked,string curuser,Area thp)
begin
  LongInt actcnt;
  record ActVc Actr;
  Date td,ad;
  Boolean loopf,testf;
  record BHollVc BHr;
  Boolean bhf;
  record SysFormatBlock SFb;
  
  actcnt = 0;
  if (showrecurringf) then begin
    RecordCopy(Actr,templateActr);
    AddActToThp(Actr,thp);
    actcnt = actcnt + 1;
  end else begin
    td = templateActr.TransDate;
    if (blankdate(td)) then begin
      td = RepSpec.sStartDate;
    end;
    ad = "01/01/1980";
    if (td==ad) then begin goto LDo_ToDo_User_Recurring; end;
    ad = "01/01/1900";
    if (td==ad) then begin goto LDo_ToDo_User_Recurring; end;

    BlockLoad(SFb);    
    BHr.CountryCode = CYb.CountryCode;
    bhf = ReadFirstMain(BHr,1,true);

    loopf = true;
    while (loopf) begin
      RecordCopy(Actr,templateActr);
      switch (Actr.RecurringType) begin
        case kRecurringTypeDaily: 
          Actr.TransDate = td;
          td = AddDay(td,1);
        case kRecurringTypeWeekly: 
          td = AddDay(td,-GetDateId(td)+1);
          td = AddDay(td,Actr.RecurringWeekDay-1);
          Actr.TransDate = td;
          td = AddDay(td,7);
        case kRecurringTypeMonthly: 
          td.day = Actr.RecurringMonthDay;
          Actr.TransDate = td;
          td = AddMonth(td,1);
        case kRecurringTypeYearly: 
          td.month = Actr.RecurringMonth;
          td.day = Actr.RecurringMonthDay;
          Actr.TransDate = td;
          td = AddMonth(td,1);
        otherwise
          td = AddDay(RepSpec.sEndDate,1);
      end;
      if (GetDay(Actr.TransDate)>DaysInMonth(GetYear(Actr.TransDate),GetMonth(Actr.TransDate))) then begin
        Actr.TransDate = AddDay(Actr.TransDate,-GetDay(Actr.TransDate) + DaysInMonth(GetYear(Actr.TransDate),GetMonth(Actr.TransDate)));
      end;
      testf = true;
      if (nonblankdate(templateActr.TransDate)) then begin
        if (Actr.TransDate<templateActr.TransDate) then begin testf = false; end;
      end;
      if (nonblankdate(templateActr.EndDate)) then begin
        if (Actr.TransDate>templateActr.EndDate) then begin testf = false; end;
      end;
      if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin testf = false; end;
      if (testf) then begin
        if (templateActr.AvoidRedDays!=0) then begin
//          td2 = RecurringActOnRedDay(BHr,bhf,td);//what is this nonsense ? 
          if (IsRedDay(bhf,BHr,SFb.dateOrder,Actr.TransDate)) then begin
            testf = false;
          end;
        end;
      end;
      if (showrecurringf==false and testf) then begin
        testf = ToDoForRecurringActivityExists2(RepSpec.sStartDate,RepSpec.sEndDate,curuser,Actr,vactchecked)==false;
      end;
      if (testf) then begin
        AddActToThp(Actr,thp);
        actcnt = actcnt + 1;
      end;
      loopf = td<=RepSpec.sEndDate;
      if (actcnt>100) then begin loopf = false; end;
    end;
  end;
LDo_ToDo_User_Recurring:;  
  Do_ToDo_User_Recurring = actcnt;
  return;
end;

function LongInt Do_ToDo_User(record RcVc RepSpec,Area thp,string curuser,Integer todoflag)
begin
  LongInt textcnt;
  record ActVc Actr;
  Boolean TrHs;
  string 255 ckey,tstr,user;
  Boolean testf,showrecurringf;
  LongInt tp;
  LongInt ptp;
  Integer pos;
  string 20 compcode;
  Integer oldcomp;
  Boolean gucompf;
  string 255 maincrmcompanies;
  LongInt compno,comppos;
  Date sd;
  Integer segs;
  record CYBlock CYb;
  vector Boolean vactchecked;
  
  oldcomp = CurrentCompany;  
  gucompf = RepSpec.flags[29]==0;
  showrecurringf = RepSpec.flags[3]==kTodoFlagRecurring;
  textcnt = 0;
  pos = 0;
  tp = 1;
  ptp = 0;
  ExtractObj(RepSpec.f1,pos,user);
  if ((blank(user)) and (blank(RepSpec.f3)) and (blank(RepSpec.f4))) then begin goto L88Do_ToDo_User; end;
  textcnt = 0;
  if (GetAreaLength(thp)>4) then begin    
    textcnt = GetLongFromArea(thp,0);
  end;
  comppos = 0;
  if (gucompf) then begin
    maincrmcompanies = GetGlobalUserMainCompanies(user);    
    GetNextSubstring(maincrmcompanies,comppos,",",compcode);    
  end;
LDo_ToDo_UserBEGIN:;  
  if (gucompf) then begin
    if (SetCompanyCode(compcode,false)) then begin
    end;
  end;
  BlockLoad(CYb);
  compno = CurrentCompany;

  ckey = "ActUserMain:" & user;
  Actr.TodoFlag = todoflag;
  Actr.TransDate = RepSpec.sStartDate;
  segs = 2;
  if (todoflag==kTodoFlagRecurring) then begin
    segs = 1;
  end;
  TrHs = true;
  ResetLoop(Actr);
  while (LoopKey(ckey,Actr,segs,TrHs)) begin
    if (Actr.TodoFlag!=todoflag) then begin TrHs = false; end;
    if (todoflag!=kTodoFlagRecurring) then begin
      if (DateInRange(Actr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin TrHs = false; end;
    end;
//    switch (RepSpec.flags[4]) begin
//      case 0: if (Actr.TransDate>CurrentDate) then begin TrHs = false; end;
//    end;    
    testf = false;
    if (TrHs) then begin
      testf = DoFilterToDoW(RepSpec,todoflag,Actr,curuser);
      if (testf) then begin
        switch (todoflag) begin
          case kTodoFlagRecurring:
            textcnt = textcnt + Do_ToDo_User_Recurring(CYb,RepSpec,showrecurringf,Actr,vactchecked,curuser,thp);
          otherwise
            AddActToThp(Actr,thp);
            textcnt = textcnt + 1;
        end;
      end;
      if (textcnt>=300) then begin
        RecordNew(Actr);
        Actr.Comment = "ATTENTION! Please make a selection that reduces the number of activities";
        AddActToThp(Actr,thp);
        textcnt = textcnt + 1;
        TrHs = false;
      end;
    end;
  end;
  
  if (RepSpec.flags[1]!=0) then begin
    sd = RepSpec.sStartDate;
    switch (RepSpec.flags[1]) begin
      case 1:
        sd = AddMonth(sd,-1);
      case 2:
        sd = AddMonth(sd,-12);
      case 3:
        sd = "";
      case 4:
  //      sd = AddDay(sd,0);
      case 5:
        sd = AddDay(sd,-GetDateId(CurrentDate)+1);
    end;
    if (sd>RepSpec.sStartDate) then begin
      sd = RepSpec.sStartDate;
    end;  
    ResetLoop(Actr);
//    ckey = "UserMain:" & user;
    ckey = "EndDateUserMain:" & user;
    Actr.TodoFlag = todoflag;
    Actr.TransDate = sd;
    TrHs = textcnt<300;
    while (LoopKey(ckey,Actr,2,TrHs)) begin
      if (Actr.TodoFlag!=todoflag) then begin TrHs = false; end;
//      if (DateInRange(Actr.TransDate,sd,RepSpec.sEndDate)==false) then begin TrHs = false; end;
      if (DateInRange(Actr.EndDate,sd,RepSpec.sEndDate)==false) then begin TrHs = false; end;
      if (TrHs) then begin
        testf = true;
        if (Actr.OKFlag==0) then begin testf = false; end;
        if (testf) then begin
          testf = DoFilterToDoW(RepSpec,todoflag,Actr,curuser);
          if (testf) then begin
            switch (todoflag) begin
              case kTodoFlagRecurring:
                textcnt = textcnt + Do_ToDo_User_Recurring(CYb,RepSpec,showrecurringf,Actr,vactchecked,curuser,thp);
              otherwise
                AddActToThp(Actr,thp);
                textcnt = textcnt + 1;
            end;
          end;
          if (textcnt>=300) then begin
            RecordNew(Actr);
            Actr.Comment = "ATTENTION! Please make a selection that reduces the number of activities";
            AddActToThp(Actr,thp);
            textcnt = textcnt + 1;
            TrHs = false;
          end;
        end;
      end;
    end;
  end;

  PutLongInArea(textcnt,thp,0);
  if (gucompf) then begin
    if (textcnt<300) then begin
      GetNextSubstring(maincrmcompanies,comppos,",",compcode);
      if (nonblank(compcode)) then begin
        goto LDo_ToDo_UserBEGIN;
      end;
    end;
  end;
L88Do_ToDo_User:;
  if (oldcomp!=CurrentCompany) then begin
    ResetCompany(oldcomp);
  end;
  Do_ToDo_User = textcnt;
  return;
end;

function LongInt Do_ToDo_ActType(record RcVc RepSpec,Area thp,string curuser)
begin
  LongInt textcnt;
  record ActVc Actr;
  Boolean TrHs;
  string 255 ckey,user,acttype;
  Boolean testf;
  Integer pos;
  Date blankd;
  string 20 compcode;
  Integer oldcomp;
  Boolean gucompf;

  oldcomp = CurrentCompany;  
  gucompf = RepSpec.flags[29]==0;
  pos = 0;
  textcnt = 0;
    
  ExtractObj(RepSpec.f1,pos,user);
  if (gucompf) then begin
    if (nonblank(user)) then begin
      if (GetGlobalUserMainCompany(user,compcode)) then begin
        if (nonblank(compcode)) then begin
          if (SetCompanyCode(compcode,false)) then begin
          end;
        end;
      end;
    end;
  end;
  
  pos = 0;
  ExtractObj(RepSpec.f3,pos,acttype);
  while (nonblank(acttype)) begin
    ResetLoop(Actr);
    ckey = "ActType";
    Actr.ActType = RepSpec.f3;
    Actr.TransDate = blankd;
    TrHs = true;
    while (LoopKey(ckey,Actr,2,TrHs)) begin
      if (RepSpec.f3!=Actr.ActType) then begin TrHs = false; end;
      testf = false;
      if (TrHs) then begin
        testf = DoFilterToDoW(RepSpec,kTodoFlagTodo,Actr,curuser);
        if (testf) then begin
          AddActToThp(Actr,thp);
          textcnt = textcnt + 1;
        end;
        if (textcnt>=300) then begin
          RecordNew(Actr);
          Actr.Comment = "ATTENTION! Please make a selection that reduces the number of activities";
          AddActToThp(Actr,thp);
          textcnt = textcnt + 1;
          TrHs = false;
          goto LDo_ToDo_ActType;
        end;
      end;
    end;
    ExtractObj(RepSpec.f3,pos,acttype);
  end;
LDo_ToDo_ActType:;
  PutLongInArea(textcnt,thp,0);
  if (oldcomp!=CurrentCompany) then begin
    ResetCompany(oldcomp);
  end;
  Do_ToDo_ActType = textcnt;
  RETURN;
END;

function LongInt Do_ToDo_CU(record RcVc RepSpec,Date ddp,Area thp,string curuser)
BEGIN
  record ActVc Actr;
  Boolean TrHs;
  string 255 ckey,tstr,user;
  Boolean testf;
  LongInt textcnt;
  Integer pos;
  LongInt ddiff;
  Date blankd;
  string 20 compcode;
  Integer oldcomp;
  Boolean gucompf;

  oldcomp = CurrentCompany;  
  gucompf = RepSpec.flags[29]==0;
  pos = 0;
  textcnt = 0;

  ExtractObj(RepSpec.f1,pos,user);
  if (gucompf) then begin
    if (nonblank(user)) then begin
      if (GetGlobalUserMainCompany(user,compcode)) then begin
        if (nonblank(compcode)) then begin
          if (SetCompanyCode(compcode,false)) then begin
          end;
        end;
      end;
    end;
  end;
  ckey = "CUCode";
  Actr.CUCode = RepSpec.f4;
  Actr.TransDate = blankd;  
  TrHs = true;
  while (LoopKey(ckey,Actr,2,TrHs)) begin
    if (RepSpec.f4!=Actr.CUCode) then begin TrHs = false; end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (Actr.TodoFlag==1) then begin
        switch (RepSpec.flags[4]) begin
          case 0:
            if (Actr.OKFlag==0) then begin
              if (Actr.TransDate>CurrentDate) then begin testf = false; end;
            end;
          case 1:
            if (Actr.OKFlag==0) then begin
              ddiff = DateDiff(Actr.TransDate,CurrentDate);
              if ((ddiff<1) or (ddiff>7)) then begin testf = false; end;
            end;
          case 3:
            if (Actr.OKFlag==0) then begin
              ddiff = DateDiff(Actr.TransDate,CurrentDate);
              if ((ddiff<1) or (ddiff>31)) then begin testf = false; end;
            end;
          case 2: // All
        end;
        if (RepSpec.flags[1]==0) then begin
          if (Actr.OKFlag!=0) then begin testf = false; end;
        end else begin
          if (Actr.OKFlag!=0) then begin
            if (Actr.TransDate<ddp) then begin testf = false; end;
          end;
        end;
      end;
      if (Actr.PrivateFlag!=0) then begin
        tstr = curuser;
        if (SetInSet(tstr,Actr.MainPersons)==false) then begin testf = false; end;
      end;  
      if (nonblank(RepSpec.FirstAcc)) then begin
        if (Actr.PRCode!=RepSpec.FirstAcc) then begin testf = false; end;
      end;
      if (testf) then begin    
        if (FilterSymbs(RepSpec.flags[5],Actr.SymbNr)==false) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = CheckTodoAcess(RepSpec.f1,Actr,curuser)!=kAccessLevelNone;
      end;
      if (testf) then begin
        AddActToThp(Actr,thp);
        textcnt = textcnt + 1;
      end;
      if (textcnt>=300) then begin
        RecordNew(Actr);
        Actr.Comment = "ATTENTION! Please make a selection that reduces the number of activities";
        AddActToThp(Actr,thp);
        textcnt = textcnt + 1;
        TrHs = false;
      end;
    end;
  end;
  PutLongInArea(textcnt,thp,0);
  if (oldcomp!=CurrentCompany) then begin
    ResetCompany(oldcomp);
  end;
  Do_ToDo_CU = textcnt;
  return;
end;

global
procedure FillToDo(var record RcVc RepSpec,var Area thp)
begin
  Date dd;
  Date today;
  Date blankd;
  Integer textcnt;
  LongInt long1;
  Boolean showrecurringf;

  dd = CurrentDate;
  today = CurrentDate;
  switch (RepSpec.flags[1]) begin
    case 1:
      dd = AddMonth(dd,-1);
    case 2:
      dd = AddMonth(dd,-12);
    case 3:
      dd = blankd;
    case 4:
      dd = AddDay(dd,0);
    case 5:
      dd = AddDay(dd,-GetDateId(dd)+1);
  end;
  showrecurringf = RepSpec.flags[3]==kTodoFlagRecurring;
  textcnt = 0;
  AddLongToArea(textcnt,thp);  
  if (nonblank(RepSpec.f1)) then begin
    if (showrecurringf) then begin
      RepSpec.long1 = Do_ToDo_User(RepSpec,thp,RepSpec.f1,kTodoFlagRecurring);
    end else begin
      RepSpec.long1 = 0;
      if (RepSpec.flags[3]!=4) then begin
        RepSpec.long1 = Do_ToDo_User(RepSpec,thp,RepSpec.f1,kTodoFlagTodo);
      end;
      if (HasApprovals) then begin
        if (blank(RepSpec.repname)) then begin
          RepSpec.long1 = Do_ToDo_User(RepSpec,thp,RepSpec.f1,kTodoFlagApproval);//RepSpec.long1 + , we read actcnt in Do_ToDo_User
        end;
      end;
      switch (RepSpec.flags[3]) begin
        case 1: // timed todos
          RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagCalendar,CurrentUser);
        case 2: // timed todos
          RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagTimedTodo,CurrentUser);
        case 3: // both (timed todos)
          RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagCalendar,CurrentUser);
          RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagTimedTodo,CurrentUser);
          RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagProject,CurrentUser);
  //        RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagOther,CurrentUser);
  //      case 4: // approvals
  //        RepSpec.long1 = RepSpec.long1 + Do_ToDo_User(RepSpec,thp,Currentuser,kTodoFlagApproval);
        case kTodoFlagProject:
          RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagProject,CurrentUser);
      end;
      if (nonblank(RepSpec.Period2Str)) then begin
        RepSpec.long1 = RepSpec.long1 + Do_ToDo_User(RepSpec,thp,RepSpec.f1,kTodoFlagRecurring);
      end;
    end;
    goto LFillToDo;
  end else begin
    if (nonblank(RepSpec.FirstAcc)) then begin
      record UserVc Userr;
      Boolean found,testf;
      record RcVc orgRepSpec;
      
      long1 = 0;
      RecordCopy(orgRepSpec,RepSpec);
      found = true;
      while (LoopMain(Userr,1,found)) begin
        if (found) then begin
          testf = true;
          if (Userr.TerminatedFlag!=0) then begin testf = false; end;
          if (testf) then begin
            RecordCopy(RepSpec,orgRepSpec);
            RepSpec.f1 = Userr.Code;
            long1 = long1 + Do_ToDo_User(RepSpec,thp,Currentuser,kTodoFlagTodo);
            long1 = long1 + Do_ToDo_User(RepSpec,thp,Currentuser,kTodoFlagApproval);
            switch (RepSpec.flags[3]) begin
             case 1: // timed todos
                long1 = long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagCalendar,CurrentUser);
              case 2: // timed todos
                long1 = long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagTimedTodo,CurrentUser);
              case 3: // both (timed todos)
                long1 = long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagCalendar,CurrentUser);
                long1 = long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagTimedTodo,CurrentUser);
                long1 = long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagProject,CurrentUser);
//                RepSpec.long1 = RepSpec.long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagOther,CurrentUser);
              case 4: // approvals
//                long1 = long1 + Do_ToDo_User(RepSpec,thp,Currentuser,kTodoFlagApproval);
              case kTodoFlagProject:
                long1 = long1 + TODODo_TimedToDos(RepSpec.f1,RepSpec.f3,RepSpec.f4,RepSpec.FirstAcc,RepSpec.AccStr,RepSpec.LastAcc,RepSpec.flags[1],RepSpec.flags[4],RepSpec.flags[5],RepSpec.flags[2],RepSpec.sStartDate,RepSpec.sEndDate,thp,1,kTodoFlagProject,CurrentUser);
            end;
          end;
        end;
      end;
      RecordCopy(RepSpec,orgRepSpec);
      RepSpec.long1 = long1;
    end;
  end;
  if (nonblank(RepSpec.f3)) then begin
    RepSpec.long1 = Do_ToDo_ActType(RepSpec,thp,CurrentUser);
    goto LFillToDo;
  end;
  if (nonblank(RepSpec.f4)) then begin
    RepSpec.long1 = Do_ToDo_CU(RepSpec,dd,thp,CurrentUser);
    goto LFillToDo;
  end;
LFillToDo:;
  return;
end;

global
function LongInt OpenTasksOfTypeInPeriodInCurComp(date fromdate,date todate,string UserCode,LongInt acttype)
begin
  LongInt res;
  record ActVc Actr;
  Boolean loopf,foundf;
  
  loopf = true;
  res = 0;
  
  // no perfect key, good enough
  while (LoopKey("ActDateTypeUserMain:" & UserCode,Actr,0,loopf)) begin
    foundf = true;
    
    if (Actr.TransDate<fromdate) then begin foundf = false; end;
    if (Actr.TransDate>todate) then begin foundf = false; end;
    if (Actr.TodoFlag<>acttype) then begin foundf = false; end;
    
    if (foundf) then begin
      res = res + 1;
    end;
  end;
  
  OpenTasksOfTypeInPeriodInCurComp = res;
end;

global
function LongInt OpenTasksOfTypeInPeriod(date fromdate,date todate,string UserCode,LongInt acttype)
begin
  string 255 maincrmcompanies;
  string 255 compcode;
  Integer oldcomp;
  Boolean compfoundf;
  LongInt comppos,res;
  
  res = 0;
  oldcomp = CurrentCompany;
  maincrmcompanies = GetGlobalUserMainCompanies(UserCode);
  comppos = 0;
  GetNextSubstring(maincrmcompanies,comppos,",",compcode);
  compfoundf = true;
  
  while (compfoundf) begin
    if (nonblank(compcode)) then begin
      if (SetCompanyCode(compcode,false)==false) then begin
        goto LSkipCompany;
      end;
    end else begin
      compfoundf = false;
    end;
    
    res = res + OpenTasksOfTypeInPeriodInCurComp(fromdate,todate,UserCode,acttype);
LSkipCompany:;    
    GetNextSubstring(maincrmcompanies,comppos,",",compcode);
    compfoundf = blank(compcode)==false;
  end;
  
  ResetCompany(oldcomp);
  
  OpenTasksOfTypeInPeriod = res;
end;

global
function LongInt OpenTasksInPeriod(date fromdate,date todate,string usercode)
begin
  LongInt res;
  record RcVc RepSpec;
  Area dummyarea;
   
  res = 0;
  
//  res = res + OpenTasksOfTypeInPeriod(fromdate,todate,UserCode,1); // -- ToDo
  //res = res + OpenTasksOfTypeInPeriod(fromdate,todate,UserCode,2); // -- Timed ToDo
  RepSpec.f1 = usercode;
  RepSpec.f4 = "";
  RepSpec.flags[1] = 0;
  RepSpec.flags[2] = 0;
  RepSpec.flags[3] = 0;
  RepSpec.flags[5] = 0;
  RepSpec.flags[6] = 1;
  RepSpec.sStartDate = fromdate;
  RepSpec.sEndDate = todate;
  FillToDo(RepSpec,dummyarea);
  res = res + RepSpec.long1;
  OpenTasksInPeriod = res;
end;

global
function LongInt OverdueTasks()
begin
  date fromdate,todate;
  LongInt res;
  
  fromdate.year = 1900;
  fromdate.month = 1;
  fromdate.day = 1;
  
  todate = AddDay(CurrentDate,-1);
  res = OpenTasksInPeriod(fromdate,todate,CurrentUser);
  
  OverdueTasks = res;
end;

global
function LongInt DueTasks()
begin
  date fromdate,todate;
  LongInt res;
  
  fromdate = CurrentDate;
  todate = CurrentDate;
  
  res = OpenTasksInPeriod(fromdate,todate,CurrentUser);
  
  DueTasks = res;
end;
global
procedure UpdateDueTasksRemote()
begin
  if (ClientMode==false) then begin
    clientremoteasync.UpdateDueTasksCallback(DueTasks,OverdueTasks);
  end;
end;

global
procedure OpenToDoIfNeededOnLogin()
begin
  if (OverdueTasks>0) then begin
    clientremoteasync.OpenToDoShowingOverdue;
  end;
end;
