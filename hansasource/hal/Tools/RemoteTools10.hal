external function Boolean GetCOSAcc(string,string,string,record AccBlock,record INVc,Integer,Boolean,Integer,var string,var string);
external function roundmode SetRoundModeD(Integer);
external function val NotOKedReturnForOR(LongInt,Integer);
external function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
external function Boolean PasteCustInOrder(var record ORVc,string,string,var string,var string);
external function val FindCostPrice(string,string,string,val,val,Boolean);
external procedure GetCostModel(record INVc,record CostAccBlock,var record ITVc,var Integer,var Integer,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function LongInt GetCurUserLastNr(string);
external function Boolean RetVc_ExplodeRecepy(record INVc,val,record RetVc,string,Integer);
external procedure RetCalcCostPrice(string,val,Integer,string,string,val,val,val,val,val,var val);
external procedure RetSumUp(var record RetVc);
external function Boolean SerialNrAvail(string,string,string,val);
external procedure FindBatchBestBeforeDate(string,string,var Date);
external function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);
external function LongInt PasteIPInFEIV(var record FEIVVc,record IPVc,Integer);
external function Boolean GetItemStatus(string,string,string,Integer,var val,var val,var val,var val,var val,var val,var val);
external function LongInt PasteVIInFEVI(var record FEVIVc,record VIVc);
external function LongInt PasteOPInFEVI(var record FEVIVc,record OPVc,Integer);
external function LongInt PasteIVInFEIV(var record FEIVVc,record IVVc);

procedure LateCostCalcOneRow(record SysFormatBlock SysFormatRec,record LateCostVc LateCostr,Integer rownr,Integer roundoff,val totvalp,val calcvalp,var val rowcalcvalp,var val restp)
BEGIN    
  row LateCostVc LateCostrw;
  val temp,rv;
  string 255 tstr;
  
  MatRowGet(LateCostr,rownr,LateCostrw);
  temp = LateCostrw.Quant*LateCostrw.UPrice;
  temp = temp*calcvalp;
  temp = temp/totvalp;
  rowcalcvalp = temp/LateCostrw.Quant;
  temp = rowcalcvalp*LateCostrw.Quant;
  rowcalcvalp = Round(rowcalcvalp,SetRoundModeD(5));
  // if this is not here then
  // put qty 106, price 1500 shpcost(in header) 10 and will be 9.999 after recalculating
  // M4ToStr just cuts 6th and rest digits
  tstr = ValToString(rowcalcvalp,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
  rowcalcvalp = StringToVal(tstr,M45Val);
  rv = rowcalcvalp*LateCostrw.Quant;
  restp = rv + restp;
  RETURN;
END;

procedure LateCostCalcOneRow2(record SysFormatBlock SysFormatRec,record LateCostVc LateCostp,Integer rownr,Integer roundoff,Integer column,val realtotp,var val calctotp)
BEGIN
  val rowtot,add,cost,comp,totnotthisrow;
  val diff,rowdiff;
  Boolean inc;
  row LateCostVc LateCostrw;

  MatRowGet(LateCostp,rownr,LateCostrw);
  if (LateCostrw.Quant==0) then begin goto LLateCostCalcOneRow2; end;
  if (realtotp>calctotp) then begin
    diff = realtotp - calctotp;
    switch (column) begin
      case 0: add = 0.001; 
      case 1: add = 0.00001;
      case 2: add = 0.001; 
      case 3: add = 0.001; 
      case 4: add = 0.001; 
      case 5: add = 0.001; 
      case 6: add = 0.001;
    end;    
    inc = true;
  end else begin
    diff = calctotp - realtotp;
    switch (column) begin
      case 0: add = -0.001; 
      case 1: add = -0.00001; 
      case 2: add = -0.001; 
      case 3: add = -0.001; 
      case 4: add = -0.001; 
      case 5: add = -0.001; 
      case 6: add = -0.001; 
    end;    
    inc = false;
  end;
  switch (column) begin
    case 0: cost = LateCostrw.ShipCost; 
    case 1: cost = StringToVal(LateCostrw.CustomsCost,M45Val); 
    case 2: cost = LateCostrw.RowCost1; 
    case 3: cost = LateCostrw.RowCost2; 
    case 4: cost = LateCostrw.RowCost3; 
    case 5: cost = LateCostrw.RowCost4; 
    case 6: cost = LateCostrw.RowCost5; 
  end;
  comp = blankval;
  while (realtotp==comp) begin
    rowtot = LateCostrw.Quant*cost;
    rowtot = Round(rowtot,SetRoundModeD(roundoff));
    totnotthisrow = calctotp - rowtot;
    comp = cost + add;
    comp = LateCostrw.Quant*comp;
    comp = Round(comp,SetRoundModeD(roundoff));
    comp = comp + totnotthisrow;
    if (inc==true) then begin
      rowdiff = comp - realtotp;
      if (comp>realtotp) then begin 
          goto L88LateCostCalcOneRow2;
      end;

    end else begin
      rowdiff = realtotp - comp;
      if (comp<realtotp) then begin
          goto L88LateCostCalcOneRow2;
      end;
    end;
    calctotp = comp;
    cost = cost + add;
  end;
L88LateCostCalcOneRow2:;
  switch (column) begin
    case 0: LateCostrw.ShipCost = cost; 
    case 1: LateCostrw.CustomsCost = ValToString(cost,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    case 2: LateCostrw.RowCost1 = cost; 
    case 3: LateCostrw.RowCost2 = cost; 
    case 4: LateCostrw.RowCost3 = cost; 
    case 5: LateCostrw.RowCost4 = cost; 
    case 6: LateCostrw.RowCost5 = cost; 
  end;
LLateCostCalcOneRow2:;
  RETURN;
END;

procedure LateCostUnsortByVal(record LateCostVc LateCostp,record LateCostVc LateCost2p,Integer column)
BEGIN
  row LateCostVc LateCostrw;
  row LateCostVc LateCost2rw;
  LongInt rownt;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(LateCost2p);
  if (rwcnt<1) then begin goto LLateCostUnsortByVal; end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCost2p,i,LateCost2rw);
    MatRowGet(LateCostp,LateCost2rw.OrdRow,LateCostrw);
    if ((LateCost2rw.stp==3) or (LateCost2rw.ovst!=0)) then begin
      goto LSKIPLateCostROW3;
    end;
    if ((LateCostrw.stp==3) or (LateCostrw.ovst!=0)) then begin
      goto LSKIPLateCostROW3;
    end;
    LateCostrw.Quant = LateCost2rw.Quant;
    switch (column) begin
      case 0: LateCostrw.ShipCost = LateCost2rw.ShipCost; 
      case 1: LateCostrw.CustomsCost = LateCost2rw.CustomsCost; 
      case 2: LateCostrw.RowCost1 = LateCost2rw.RowCost1; 
      case 3: LateCostrw.RowCost2 = LateCost2rw.RowCost2; 
      case 4: LateCostrw.RowCost3 = LateCost2rw.RowCost3; 
      case 5: LateCostrw.RowCost4 = LateCost2rw.RowCost4; 
      case 6: LateCostrw.RowCost5 = LateCost2rw.RowCost5; 
    end;
    MatRowPut(LateCostp,LateCost2rw.OrdRow,LateCostrw);
LSKIPLateCostROW3:
  end;
LLateCostUnsortByVal:;
  RETURN;
END;

procedure LateCostSortByVal(record LateCostVc LateCostp,record LateCostVc LateCost2p,Integer column)
BEGIN
  row LateCostVc LateCostrw;
  val highest,rv;
  LongInt rownr;
  LongInt temp;
  Integer cnt;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(LateCostp);
  if (rwcnt<1) then begin goto LLateCostSortByVal; end;
L22LateCostSortByVal:;
  highest = blankval;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCostp,i,LateCostrw);
    if ((LateCostrw.stp==3) or (LateCostrw.ovst!=0)) then begin
      goto LSKIPLateCostROW4;
    end;
    if (LateCostrw.Quant!=blankval) then begin
      switch(column) begin
        case 0: // Calculate Shipment Cost 
          rv = LateCostrw.Quant*LateCostrw.ShipCost; 
        case 1: // Calculate Customs Cost 
          rv = StringToVal(LateCostrw.CustomsCost,M45Val);
          rv = LateCostrw.Quant*rv;
        case 2: // Calculate Extra Costs 
          rv = LateCostrw.Quant*LateCostrw.RowCost1; 
        case 3: // Calculate Extra Costs 
          rv = LateCostrw.Quant*LateCostrw.RowCost2; 
        case 4: // Calculate Extra Costs 
          rv = LateCostrw.Quant*LateCostrw.RowCost3; 
        case 5: // Calculate Extra Costs 
          rv = LateCostrw.Quant*LateCostrw.RowCost4; 
        case 6: // Calculate Extra Costs 
          rv = LateCostrw.Quant*LateCostrw.RowCost5; 
      end;
      if ((rv>highest) or (highest==blankval)) then begin
        rownr = i;
        highest = rv;
      end;
    end;
LSKIPLateCostROW4:;    
  end;
  if (rownr==-1) then begin goto LLateCostSortByVal; end;
  if (cnt>=rwcnt) then begin goto LLateCostSortByVal; end;
  MatRowGet(LateCostp,rownr,LateCostrw);
  if ((LateCostrw.stp!=3) and (LateCostrw.ovst==0)) then begin
    temp = LateCostrw.OrdRow;
    LateCostrw.OrdRow = rownr;
    MatRowPut(LateCost2p,cnt,LateCostrw);
    LateCostrw.Quant = blankval;
    LateCostrw.OrdRow = temp;
    MatRowPut(LateCostp,rownr,LateCostrw);
  end;
  cnt = cnt + 1;
  if (cnt>=rwcnt) then begin goto LLateCostSortByVal; end;
  rownr = -1;
  goto L22LateCostSortByVal;
LLateCostSortByVal:;
  RETURN;
END;

global
procedure LateCostSetShipCost(var record LateCostVc LateCostp,Integer column)
BEGIN
  record LateCostVc locLateCostr;
  row LateCostVc LateCostrw;
  Integer i,rwcnt;
  val totval,rv,rest;
  val calcval,rowcalcval;
  record SysFormatBlock SysFormatRec;
  
  BlockLoad(SysFormatRec);
  switch( column) begin
    case 0: calcval = LateCostp.ShipCost;    // Calculate Shipment Cost 
    case 1: calcval = LateCostp.CustomsCost; // Calculate Customs Cost 
    case 2: calcval = LateCostp.Cost1; // Calculate Extra Costs 
    case 3: calcval = LateCostp.Cost2; // Calculate Extra Costs 
    case 4: calcval = LateCostp.Cost3; // Calculate Extra Costs 
    case 5: calcval = LateCostp.Cost4; // Calculate Extra Costs 
    case 6: calcval = LateCostp.Cost5; // Calculate Extra Costs 
    otherwise goto LLateCostSetShipCost;
  end;
  rwcnt = MatRowCnt(LateCostp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCostp,i,LateCostrw);
    if ((LateCostrw.stp!=3) and (LateCostrw.ovst==0)) then begin
      rv = LateCostrw.Quant*LateCostrw.UPrice;
      totval = totval + rv;
    end;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCostp,i,LateCostrw);
    if ((LateCostrw.stp==3) or (LateCostrw.ovst!=0)) then begin
      goto LSKIPLateCostROW;
    end;
    LateCostCalcOneRow(SysFormatRec,LateCostp,i,2,totval,calcval,rowcalcval,rest);
    switch (column) begin
      case 0: LateCostrw.ShipCost = rowcalcval; 
      case 1: LateCostrw.CustomsCost = ValToString(rowcalcval,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      case 2: LateCostrw.RowCost1 = rowcalcval; 
      case 3: LateCostrw.RowCost2 = rowcalcval; 
      case 4: LateCostrw.RowCost3 = rowcalcval; 
      case 5: LateCostrw.RowCost4 = rowcalcval; 
      case 6: LateCostrw.RowCost5 = rowcalcval; 
    end;
    MatRowPut(LateCostp,i,LateCostrw);
LSKIPLateCostROW:;
  end;
  LateCostSortByVal(LateCostp,locLateCostr,column);
  rwcnt = MatRowCnt(locLateCostr);
  for (i=0;i<rwcnt;i=i+1) begin
    if (rest==calcval) then begin goto L88LateCostSetShipCost; end;
    MatRowGet(locLateCostr,i,LateCostrw);
    if ((LateCostrw.stp==3) or (LateCostrw.ovst!=0)) then begin
      goto LSKIPLateCostROW2;
    end;
    if (rest!=0) then begin
      LateCostCalcOneRow2(SysFormatRec,locLateCostr,i,5,column,calcval,rest);
    end;
    MatRowPut(locLateCostr,i,LateCostrw);
LSKIPLateCostROW2:;
  end;
L88LateCostSetShipCost:;
  LateCostUnsortByVal(LateCostp,locLateCostr,column);
LLateCostSetShipCost:;
  RETURN;
END;

global
procedure SendArtStatServer(string artcode,string location,string recepy,Integer inclsupersessin,
                            var val stock,var val ord,var val purch,var val shpble,
                            var val unitcoef,var val stock2,var val prodord,var val rsrv,
                            var Date leaddate,var val inprice)
BEGIN
  record MainStockBlock MSb;
  record PIVc PIr;

  BlockLoad(MSb);
  if (nonblank(artcode)) then begin
    if (GetItemStatus(artcode,location,recepy,inclsupersessin,stock,ord,purch,unitcoef,prodord,rsrv,inprice)) then begin
      shpble = stock - ord;
    end;
    if (GetFirstPurchaseItem2(artcode,location,"",PIr)) then begin
      leaddate = AddDay(leaddate,PIr.PlannedDelDays);
    end;
  end else begin
    stock = BlankVal;
    shpble = BlankVal;
    ord = BlankVal;
    purch = BlankVal;
    rsrv = BlankVal;
    inprice = BlankVal;
  end;
    switch (MSb.UnitConvCalc) begin
      case 0: stock2 = stock*unitcoef; 
      case 1: stock2 = stock/unitcoef;
    end;  
  RETURN;
END;

global
procedure SetDelAddr(string cust,string deladdr,var string name,var string a0,var string a1,var string a2,var string a3,var string a4,var string country,var string region,var string taxtemplatecode,var string vatcode,var Integer exportflag,var string delgln)
begin
  record DelAddrVc DAr;
  record CUVc CUr;
  Boolean foundf;
  
  DAr.CustCode = cust;
  DAr.DelCode = deladdr;
  foundf = ReadFirstMain(DAr,2,true);
  if (foundf==false) then begin
    DAr.CustCode = "";
    DAr.DelCode = deladdr;
    foundf = ReadFirstMain(DAr,1,true);
  end;
  if ((foundf) and (nonblank(deladdr))) then begin
    name = DAr.Name;
    a0 = DAr.DelAddr0;
    a1 = DAr.DelAddr1;
    a2 = DAr.DelAddr2;
    a3 = DAr.DelAddr3;
    a4 = DAr.DelAddr4;
    country = DAr.DelCountry;
    region = DAr.Region;
    taxtemplatecode = DAr.TaxTemplateCode;
    vatcode = DAr.VATCode;
    exportflag = DAr.ExportFlag;
    delgln = DAr.RecipientGLN;
  end else begin
    CUr.Code = cust;
    if (ReadFirstMain(CUr,1,true)) then begin
      name = CUr.Name;
      a0 = CUr.DelAddr0;
      a1 = CUr.DelAddr1;
      a2 = CUr.DelAddr2;
      a3 = CUr.DelAddr3;
      a4 = CUr.DelAddr4;
      country = CUr.DelCountry;
      region = CUr.Region;
      taxtemplatecode = CUr.TaxTemplateCode;
      vatcode = CUr.VATCode;
      exportflag = CUr.ExportFlag;
      delgln = CUr.RecipientGLN;
    end;
  end;
  return;
end;

global
updating function LongInt RecordAction_raPasteIVInFEIV(var record FEIVVc FEIVp,LongInt ivnr)
BEGIN
  LongInt res;
  record IVVc IVr;
  
  res = 1;
  IVr.SerNr = ivnr;
  if (ReadFirstMain(IVr,0,true)) then begin
    res = PasteIVInFEIV(FEIVp,IVr);
    if (res!=0) then begin
      goto LRecordAction_raPasteIVInFEIV;
    end;
    if (FEIVp.SerNr<=0) then begin
      FEIVp.SerNr = NextSerNr("FEIVVc",FEIVp.TransDate,-1,false,FEIVp.LangCode);
    end;  
    if (FEIVp.SerNr<=0) then begin goto LRecordAction_raPasteIVInFEIV; end;  
    if (MatRowCnt(FEIVp)>0) then begin
      if (RecordStore(FEIVp,false)) then begin
        res = 0;
      end;
    end;
  end;
LRecordAction_raPasteIVInFEIV:;
  RecordAction_raPasteIVInFEIV = res;
  RETURN;
END;

global
updating function LongInt RecordAction_raPasteOPInFEVI(var record FEVIVc FEVIp,LongInt opnr,Integer rownr)
BEGIN
  LongInt res;
  record OPVc OPr;
  
  res = 1;
  OPr.SerNr = opnr;
  if (ReadFirstMain(OPr,0,true)) then begin
    res = PasteOPInFEVI(FEVIp,OPr,rownr);
    if (res!=0) then begin
      goto LRecordAction_raPasteOPInFEVI;
    end;
    if (FEVIp.SerNr<=0) then begin
      FEVIp.SerNr = NextSerNr("FEVIVc",FEVIp.TransDate,-1,false,FEVIp.LangCode);
    end;  
    if (FEVIp.SerNr<=0) then begin goto LRecordAction_raPasteOPInFEVI; end;  
    if (MatRowCnt(FEVIp)>0) then begin
      if (RecordStore(FEVIp,false)) then begin
        res = 0;
      end;
    end;
  end;
LRecordAction_raPasteOPInFEVI:;
  RecordAction_raPasteOPInFEVI = res;
  RETURN;
END;

global
updating function LongInt RecordAction_raPasteVIInFEVI(var record FEVIVc FEVIp,LongInt VInr)
BEGIN
  LongInt res;
  record VIVc VIr;
  
  res = 1;
  VIr.SerNr = VInr;
  if (ReadFirstMain(VIr,0,true)) then begin
    res = PasteVIInFEVI(FEVIp,VIr);
    if (res!=0) then begin
      goto LRecordAction_raPasteVIInFEVI;
    end;
    if (FEVIp.SerNr<=0) then begin
      FEVIp.SerNr = NextSerNr("FEVIVc",FEVIp.TransDate,-1,false,FEVIp.LangCode);
    end;  
    if (FEVIp.SerNr<=0) then begin goto LRecordAction_raPasteVIInFEVI; end;  
    if (MatRowCnt(FEVIp)>0) then begin
      if (RecordStore(FEVIp,false)) then begin
        res = 0;
      end;
    end;
  end;
LRecordAction_raPasteVIInFEVI:;
  RecordAction_raPasteVIInFEVI = res;
  RETURN;
END;

global
updating function LongInt RecordAction_raPasteIPInFEIV(var record FEIVVc FEIVp,LongInt ipnr,Integer rownr)
BEGIN
  LongInt res;
  record IPVc IPr;
  
  res = 1;
  IPr.SerNr = ipnr;
  if (ReadFirstMain(IPr,0,true)) then begin
    res = PasteIPInFEIV(FEIVp,IPr,rownr);
    if (res!=0) then begin
      goto LRecordAction_raPasteIPInFEIV;
    end;
    if (FEIVp.SerNr<=0) then begin
      FEIVp.SerNr = NextSerNr("FEIVVc",FEIVp.TransDate,-1,false,FEIVp.LangCode);
    end;  
    if (FEIVp.SerNr<=0) then begin goto LRecordAction_raPasteIPInFEIV; end;  
    if (MatRowCnt(FEIVp)>0) then begin
      if (RecordStore(FEIVp,false)) then begin
        res = 0;
      end;
    end;
  end;
LRecordAction_raPasteIPInFEIV:;
  RecordAction_raPasteIPInFEIV = res;
  RETURN;
END;

function Integer CompDateNTime(Date adp,Time atp,Date bdp,Time btp)
BEGIN
  Integer res;

  res = 0;
  if (adp>bdp) then begin
    res = 1;
    goto LCompDateNTime;
  end;
  if (adp<bdp) then begin
    res = -1;
    goto LCompDateNTime;
  end;
  if (res!=0) then begin 
    goto LCompDateNTime;
  end;
  if (atp>btp) then begin
    res = 1;
    goto LCompDateNTime;
  end;
  if (atp<btp) then begin
    res = -1;
    goto LCompDateNTime;
  end;
LCompDateNTime:;
  CompDateNTime = res;
  RETURN;
END;

global
function Integer TestReadFlagHAL(LongInt sernr,LongInt mailboxnr)
BEGIN
  Integer res;
  record MailReadVc mrread;
  record MailReadVc mrcreated;
  record MailReadVc mrupdated;
  record MailReadVc mrunread;
  Boolean rrf;
  Boolean crf; 
  Boolean upf;
  Boolean unrf;

  res = 1;
  mrcreated.mailSerNr = sernr;
  mrcreated.accode = kMailStatusCreated;
  crf = ReadLastKey("accode",mrcreated,2,true);
  mrupdated.mailSerNr = sernr;
  mrupdated.accode = kMailStatusUpdated;
  upf = ReadLastKey("accode",mrupdated,2,true);
  mrread.mailSerNr = sernr;
  mrread.mailBoxNr = mailboxnr;
  mrread.accode = kMailStatusRead;
  rrf = ReadLastKey("userCode",mrread,3,true);
  if (rrf==false) then begin
    mrread.mailSerNr = sernr;
    mrread.mailBoxNr = mailboxnr;
    mrread.accode = kMailStatusPrinted;
    rrf = ReadLastKey("userCode",mrread,3,true);
  end;
  mrunread.mailSerNr = sernr;
  mrunread.mailBoxNr = mailboxnr;
  mrunread.accode = kMailStatusUnread;
  unrf = ReadLastKey("userCode",mrunread,3,true);
  if (rrf) then begin
    if (crf) then begin
      if (CompDateNTime(mrcreated.fDate,mrcreated.fTime,mrread.fDate,mrread.fTime)>=0) then begin
        goto L55TestReadFlag;
      end;
    end;
    if (upf) then begin
      if (CompDateNTime(mrupdated.fDate,mrupdated.fTime,mrread.fDate,mrread.fTime)>=0) then begin
        goto L55TestReadFlag;
      end;;
    end;
    res = 0;
    if ((res==0) and (unrf!=false)) then begin
      if (CompDateNTime(mrunread.fDate,mrunread.fTime,mrread.fDate,mrread.fTime)>=0) then begin
        res = 1;
      end;
    end;
    goto LTestReadFlag;
  end;
L55TestReadFlag:;
  if ((res==0) and (unrf!=false)) then begin
    if (CompDateNTime(mrunread.fDate,mrunread.fTime,mrread.fDate,mrread.fTime)>=0) then begin
      res = 1;
    end;
  end;
  if ((upf==false) and (crf==false)) then begin
    goto LTestReadFlag;
  end;
  if (crf==false) then begin
    if (mrupdated.mailBoxNr==mailboxnr) then begin res = 0; end;
    goto LTestReadFlag;
  end;
  if (upf==false) then begin
    if (mrcreated.mailBoxNr==mailboxnr) then begin res = 0; end;
    goto LTestReadFlag;
  end;
  if (CompDateNTime(mrcreated.fDate,mrcreated.fTime,mrupdated.fDate,mrupdated.fTime)>=0) then begin
    if (mrcreated.mailBoxNr==mailboxnr) then begin res = 0; end;
    goto LTestReadFlag;
  end else begin
    if (mrupdated.mailBoxNr==mailboxnr) then begin res = 0; end;
    goto LTestReadFlag;
  end;
LTestReadFlag:;
  TestReadFlagHAL = res;
  RETURN;
END;

procedure PasteBatchSerialItemonRet(var record RetVc Retp,var Integer srwp,Integer rownr,LongInt ornr,LongInt ordrow)
BEGIN
  record SHVc SHp;
  row SHVc SHrw;
  row RetVc Retrw;  
  Integer i,rwcnt;
  Boolean TrHs;
  row RetVc Retrwp;
  
  MatRowGet(Retp,srwp,Retrwp);
  SHp.OrderNr = ornr;
  TrHs = true;
  while (LoopKey("OrderKey",SHp,1,TrHs)) begin
    if (SHp.OrderNr!=ornr) then begin TrHs = false; end;
    if (TrHs) then begin
      rwcnt = MatRowCnt(SHp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SHp,i,SHrw);
        if (SHrw.OrdRow==ordrow) then begin
          ClearRow(Retp,Retrw,1);
          CopyRow(Retp,Retrwp,Retrw);
          Retrw.Quant = SHrw.Ship;
          Retrw.SerialNr = SHrw.SerialNr;
          if (Retrw.Quant!=0) then begin                        
            MatRowPut(Retp,srwp,Retrw);
            srwp = srwp + 1;          
          end;  
        end;
      end;
    end;  
  end;
  RETURN;
END;

function Integer PasteOrdInRet(var record RetVc Retp,string defreturnlocation)
BEGIN
  Integer res;
  record MainStockBlock MSb;
  record RetGoodsBlock RGb;
  record ORVc ORr;
  record INVc INr;
  row RetVc Retrw;
  row ORVc ORrw;
  Integer i,j,q;
  Integer srw,rwcnt;
  val remn,ordered,stock,t1,t;
  Boolean testf;
  Date td;
  record CostAccBlock CAb;
  record ITVc ITr;
  Integer primary,queuecostmodel;
  string 255 location,tstr;
  record PLDefVc PLDr;
  record AccBlock Accb;

  BlockLoad(CAb);
  ORr.SerNr = Retp.OrdNr;
  BlockLoad(MSb);    
  BlockLoad(RGb);
  BlockLoad(Accb);
  if (ReadFirstMain(ORr,1,true)) then begin
  end;
  t1 = 1;
  PLDr.Code = ORr.PriceList;
  if (ReadFIrstMain(PLDr,1,true)) then begin
    if (PLDr.DepPrice==2) then begin
      res = 20820;
      goto LPasteOrdInRet;
    end;
  end;

  Retp.OrdNr = ORr.SerNr;
  Retp.Type = RGb.ReduceDefault;
  Retp.CustCode = ORr.CustCode;
  Retp.CustName = ORr.Addr0;
  if (blank(defreturnlocation)) then begin
    Retp.Location = ORr.Location;
  end else begin
    Retp.Location = defreturnlocation;
  end;
  Retp.Objects = ORr.Objects; 
  rwcnt = MatRowCnt(ORr);
  srw = 0;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    if (blank(ORrw.ArtCode)) then begin
      goto L22PasteOrdInRet;
    end;
    remn = ORrw.Quant - ORrw.Shipd2;
    ordered = remn;
    testf = false;
    if (ORrw.Shipd2!=blankval) then begin testf = true; end;
    if (ORrw.Sum==0) then begin testf = true; end;
    if (testf) then begin
      stock = blankval;
      ClearRow(Retp,Retrw,1);
      if (blank(defreturnlocation)) then begin
        Retrw.Location = ORrw.Location;
      end else begin
        Retrw.Location = defreturnlocation;
      end;
      Retrw.ArtCode = ORrw.ArtCode;
//      Retrw.Quant = ORrw.Shipd2 - AlreadyReturnedforOR(ORr.SerNr,i);
      Retrw.Quant = ORrw.Shipd2 - NotOKedReturnForOR(ORr.SerNr,i);
      location = Retrw.Location;
      if (blank(location)) then begin
        location = Retp.Location;
      end;

      if (ReadFirstItem(Retrw.ArtCode,INr,false,true)) then begin end;
      if (INr.ItemType==1) then begin
        GetCostModel(INr,CAb,ITr,primary,queuecostmodel,false);  
        testf = true;
        if (CAb.RetCostPriceFromSH==0) then begin 
          switch (primary) begin 
            case 3://WA
              Retrw.UPrice = FindCostPrice(Retrw.ArtCode,location,"",Retrw.Quant,0,false);
              Retrw.UPrice = Retrw.UPrice / Retrw.Quant;
            case 4://Queued
              res = 2300;
              testf = false; 
            otherwise
              Retrw.UPrice = ORrw.BasePrice;          
          end; 
        end;
      end;
      if (testf==false) then begin goto L22PasteOrdInRet; end;      
      Retrw.OrdRow = i;
      Retrw.Spec = ORrw.Spec;
//      Retrw.SerialNr = ORrw.SerialNr;
      Retrw.SerialNr = "";
      Retrw.VARList = ORrw.VARList;
      Retrw.Recepy = ORrw.Recepy;
      Retrw.Objects = ORrw.Objects;      
      Retrw.UnitXval = ORrw.UnitXval;
      Retrw.UnitYval = ORrw.UnitYval;
      Retrw.UnitZval = ORrw.UnitZval;
      FindBatchBestBeforeDate(Retrw.ArtCode,Retrw.SerialNr,td);
      Retrw.BestBefore = td;
      if (ORrw.Quant==blankval) then begin
        Retrw.Quant = blankval;
      end;
      if (SerialNrAvail(Retrw.ArtCode,Retrw.SerialNr,location,Retrw.Quant)) then begin
        Retrw.Quant = 0; // why it is here??, what if someone sells 1 out of batch and gets it back
      end;
      RetCalcCostPrice(Retrw.ArtCode,Retrw.UPrice,Retp.InclVAT,Retrw.Extra,Retp.CurncyCode,
                       Retp.FrRate,Retp.ToRateB1,Retp.ToRateB2,Retp.BaseRate1,Retp.BaseRate2,t);
      Retrw.CostPrice = t;
      Retrw.Coefficient = INr.UnitCoefficient;
      if (INr.PriceFactor!=0) then begin
        Retrw.UPrice = Retrw.UPrice/INr.PriceFactor;
        Retrw.CostPrice = Retrw.CostPrice/INr.PriceFactor;
      end;
      if (MSb.NoSerOnPU==0) then begin
        switch (INr.SerNrf) begin
          case 1:
            q = Retrw.Quant;
            Retrw.Quant = 1;
            for (j=1;j<=q;j=j+1) begin
              MatRowPut(Retp,srw,Retrw);
              srw = srw + 1;
            end;
            Retrw.Quant = 0;
          case 2:
             switch (MSb.DelivSetBatch) begin
               case 0:
                 MatRowPut(Retp,srw,Retrw);
                 srw = srw + 1;
               case 1:
                 MatRowPut(Retp,srw,Retrw);
                 PasteBatchSerialItemonRet(Retp,srw,i,ORr.SerNr,i);
             end;
             Retrw.Quant = 0;
        end;
      end;
      if (Retrw.Quant!=0) then begin              
        if (GetCOSAcc(Retrw.CostAcc,Retp.CustCode,location,Accb,INr,CAb.ItemGroupAccounts,true,0,Retrw.CostAcc,tstr)) then begin
        end;
        MatRowPut(Retp,srw,Retrw);
        srw = srw + 1;
      end;
    end;
L22PasteOrdInRet:;    
  end;
LPasteOrdInRet:;  
  PasteOrdInRet = res;
  RETURN;
END;

global
updating function Integer RecordAction_raPasteOrdInRet(var record RetVc Retp,string defreturnlocation,LongInt ordnr)
BEGIN
  Integer res;
  LongInt newnr;
  record SRBlock SRRec;
  record CostAccBlock CAb;
  
  res = 1;
  BlockLoad(CAb);
  RecordNew(Retp);
  Retp.SerNr = -1;
  Retp.OrdNr = ordnr;
  if (Retp.SerNr==-1) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("RetVc");
    if (newnr!=-1) then begin
      newnr = SRRec.LastShipNr;
    end;
    Retp.SerNr = NextSerNr("RetVc",Retp.TransDate,newnr,false,"");
    if (Retp.SerNr==-1) then begin
      res = 1747;
      goto LRecordAction_raPasteOrdInRet;
    end;
  end;
  res = PasteOrdInRet(Retp,defreturnlocation);
  if (res!=0) then begin
    goto LRecordAction_raPasteOrdInRet;
  end;
  if ((MatRowCnt(Retp)>0) and (Retp.SerNr!=-1)) then begin
    RetSumUp(Retp);
    if (RecordInsert(Retp,false)) then begin
      res = 0;
    end;
  end;
  if (MatRowCnt(Retp)==0) then begin
    res = 1857;
  end;
LRecordAction_raPasteOrdInRet:;
  RecordAction_raPasteOrdInRet = res;
  RETURN;
END;

global
updating function Integer RecordAction_raPasteActInOrder(var record ORVc ORp,var record ActVc Actp)
BEGIN
  Integer res;
  record SRBlock SRRec;
  LongInt newnr;
  string 200 errstr,warning;
  
  res = -1;
  if (ReadFirstMain(Actp,0,true)) then begin end;  
  RecordNew(ORp);
  if (ORp.SerNr==-1) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("ORVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastOrdNr;
    end;    
    ORp.SerNr = NextSerNr("ORVc",ORp.OrdDate,newnr,false,"");
    if (ORp.SerNr==-1) then begin goto LRecordAction_raPasteActInOrder; end;
  end;
  ORp.CustCode = Actp.CUCode;
  if (PasteCustInOrder(ORp,Actp.CUCode,"",warning,errstr)) then begin
    if (RecordStore(ORp,false)) then begin end;
    res = 1;
    CreateRecordLink(ORp,CurrentCompany,Actp,CurrentCompany);
    CreateRecordLink(Actp,CurrentCompany,ORp,CurrentCompany);
  end;
LRecordAction_raPasteActInOrder:;
  RecordAction_raPasteActInOrder = res;
  RETURN;
END;

global
updating function Integer RecordAction_raPasteActInQT(var record QTVc QTp,var record ActVc Actp)
BEGIN
  Integer res;
  record SRBlock SRRec;
  LongInt newnr;
  string 200 errstr,warning;
  
  res = -1;
  if (ReadFirstMain(Actp,0,true)) then begin end;  
  RecordNew(QTp);
  if (QTp.SerNr==-1) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("QTVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastQTNr;
    end;    
    QTp.SerNr = NextSerNr("QTVc",QTp.QTDate,newnr,false,"");
    if (QTp.SerNr==-1) then begin goto LRecordAction_raPasteActInQT; end;
  end;
  QTp.CustCode = Actp.CUCode;
  if (PasteCustInQT(QTp,Actp.CUCode,"",warning,true)) then begin
    if (RecordStore(QTp,false)) then begin end;
    res = 1;
    CreateRecordLink(QTp,CurrentCompany,Actp,CurrentCompany);
    CreateRecordLink(Actp,CurrentCompany,QTp,CurrentCompany);
  end;
LRecordAction_raPasteActInQT:;
  RecordAction_raPasteActInQT = res;
  RETURN;
END;

global
function string 255 GetCClassOfCClassTypeFromCClassList(string CClassList,string CClassCType)
begin
  string 255 res;
  LongInt i,charpos;
  string 255 substr;
  record CClassVc CClassr;
  boolean testf;
  
  if (nonblank(CClassCType) and nonblank(CClassList)) then begin 
    testf = true;
  end;
  if (testf) then begin 
    charpos = 0;
    while (GetNextSubstring(CClassList,charpos,",",substr)) begin
      if (nonblank(substr)) then begin
        CClassr.Code = substr;      
        if (ReadFirstMain(CClassr,1,true)) then begin      
          if (CClassr.CType==CClassCType) then begin 
            res = CClassr.Comment;
            goto LGetCClassOfCClassTypeFromCClassList;
          end; 
        end;
      end;
    end;  
  end; 
LGetCClassOfCClassTypeFromCClassList:;  
  GetCClassOfCClassTypeFromCClassList = res;
  return;
end;
