external procedure VIDDefault(Integer,string,var record VIVc);
external procedure ICPOItemPriceWarning(record POVc,Integer);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure RowCalculateTaxMatrix_VIVc(var record VIVc,Integer,row VIVc,Integer);
external procedure VIVc_PastePayDeal(var record VIVc);
external procedure GetAPAcc(string,var string);
external function Boolean VIVc_PasteVECode(var record VIVc,Integer,Boolean,Boolean,var string);
external procedure VISumup(record VIVc,var val);
external function LongInt GetCurUserLastNr(string);
external function Boolean PasteActTypeInAct(string,var record ActVc);
external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external procedure Base1ToOther(var string,val,val,val,val,val,val,var val,roundmode);
external procedure CurValToOtherCurWithRate(Date,string,val,val,val,val,val,val,string,var val,roundmode);
external function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure RowCalculateTaxMatrix_POVc(var record POVc,Integer,row POVc);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure GetItemTaxTemplateCode(string,Integer,var string,Boolean);
external function Boolean GetItemPurchasePriceDiscount(string,string,Date,string,string,val,string,string,string,string,Integer,Boolean,val,val,val,val,val,
         var record INVc,var record PIVc,var Boolean,var val,var string,var val,var string,var string,var Boolean,var string);
external function roundmode SetRoundModeD(Integer);
external function Integer GetPUPControlAcc(string,string,Integer,string,string,record AccBlock,Integer,var string,var string,Boolean);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure POMultiLineText(record POVc,record INVc,string,Integer);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure RoundRowSum(string,string,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Integer VATType(string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function string 255 FindINObjects(string,string);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure POGetRate(var record POVc);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulWithRateToBase1(var string,Date,val,roundmode);
external function Boolean FindItemVAR2(string,var string,var string,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean GetFirstItem(var string,var record INVc);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external procedure MulPIFactor(val,val,var val);
external procedure DivPIFactor(val,val,var val);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function val FindVAT(string,val,Integer,Integer);
external function Boolean GetAccName(string,var string,Integer);
external procedure GetPayDealText(string,string,var string);
external procedure FindUserMailboxName(string,var string,var string);
external procedure GetITPurchAcc(string,var string,integer);
external procedure PUCalcPerc(val,string,var val);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);

global
function Boolean PODchrsum(record POVc POp,Integer rownr)
begin
  Boolean res;
  row POVc POrwp;
  val s;
  
  MatRowGet(POp,rownr,POrwp);
  CalcSum(POrwp.VEQuant,POrwp.Price,POrwp.PriceFactor,POrwp.vRebate,s,0);
  RoundRowSum(POp.CurncyCode,POp.PayDeal,"POVc",s);
  if (s!=POrwp.Sum) then begin
    res = true;
    POrwp.Sum = s;
  end;
  RowCalculateTaxMatrix_POVc(POp,rownr,POrwp);
  MatRowPut(POp,rownr,POrwp);
  PODchrsum = res;
  return;
end;

global
procedure POSumup_TaxTemplate(var record POVc POp)
begin
  row POVc POrw;
  val s,ms,ms2,taxsum;
  Integer i,rwcnt;
  roundmode roundlines,rndtotal,roundvat;
  Integer vatcnt;  
  val t,cc,uprice;
  Integer vt;
  record TaxMatrixVc TMr;
  record TaxMatrixVc sumTMr;

  POp.TotPalletNr = blankval;
  POp.ShipCost = blankval;
  POp.Cost1 = blankval;
  POp.Cost2 = blankval;
  POp.Cost3 = blankval;
  POp.Cost4 = blankval;
  POp.Cost5 = blankval;
  POp.CustomsCost = blankval;
  rwcnt = MatRowCnt(POp);

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    s = s + POrw.Sum;
    UnpackRowFieldMatrix(POrw,"TaxMatrix",TMr);
    AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,POp.InclVAT);

    POp.TotPalletNr = POp.TotPalletNr + POrw.PalletNr;
    t = POrw.Quant*POrw.ShipCost;
    POp.ShipCost = t + POp.ShipCost;
    t = POrw.Quant*POrw.RowCost1;
    POp.Cost1 = t + POp.Cost1;
    t = POrw.Quant*POrw.RowCost2;
    POp.Cost2 = t + POp.Cost2;
    t = POrw.Quant*POrw.RowCost3;
    POp.Cost3 = t + POp.Cost3;
    t = POrw.Quant*POrw.RowCost4;
    POp.Cost4 = t + POp.Cost4;
    t = POrw.Quant*POrw.RowCost5;
    POp.Cost5 = t + POp.Cost5;

    uprice = MulRateToBase1(POp.CurncyCode,POrw.Price,POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,SetROundModeD(5));
//    PUCalcPerc(uprice,POrw.Extra,cc);//should be in base 1 shouldn't it, PUrw.UPrice
//    t = POrw.Quant*cc;
//    POp.ExtraCost = t + POp.ExtraCost;

//    CalcSum(POrw.VEQuant,POrw.Price,POrw.PriceFactor,blankval,cc,0);

    if (HasLocalization("POL")) then begin
      uprice = uprice + POrw.ShipCost;
      uprice = Round(uprice,SetRoundModeD(0));
    end;
    PUCalcPerc(uprice,POrw.CustomsCost,cc);
    t = POrw.Quant*cc;
    POp.CustomsCost = t + POp.CustomsCost;   
  end;

  ms = CalculateTotalVATFromTaxMatrix(sumTMr,POp.InclVAT);
  POp.TAX1Sum = taxsum;  
  if ((POp.ExportFlag==1) or (POp.ExportFlag==2) or (vt==kVATTypeReversed)) then begin
    ms = blankval;
  end;
  PackFieldMatrix(POp,"TaxMatrix",sumTMr);
  GetCurncyRoundoff(POp.CurncyCode,POp.PayDeal,"POVc",rndtotal,roundlines,roundvat);  
  
  ms = Round(ms,roundvat);
  if (POp.InclVAT>0) then begin
    ms2 = s;
  end else begin
    ms2 = s + ms + POp.TAX1Sum;
  end;    
  ms2 = Round(ms2,rndtotal);
  POp.ShipCost = Round(POp.ShipCost,SetRoundModeD(3));
  POp.Cost1 = Round(POp.Cost1,SetRoundModeD(3));
  POp.Cost2 = Round(POp.Cost2,SetRoundModeD(3));
  POp.Cost3 = Round(POp.Cost3,SetRoundModeD(3));
  POp.Cost4 = Round(POp.Cost4,SetRoundModeD(3));
  POp.Cost5 = Round(POp.Cost5,SetRoundModeD(3));
  POp.CustomsCost = Round(POp.CustomsCost,SetRoundModeD(5));
  POp.Sum1 = s;
  POp.Sum3 = ms;
  POp.Sum4 = ms2;
  if (POp.TAX1Sum==0) then begin POp.TAX1Sum = blankval; end;
LPOSumup_TaxTemplate:;  
  return;
end;

global
procedure POSumup(var record POVc POp)
begin
  row POVc POrw;
  val s,ms,ms2,taxsum,q;
  Integer i,rwcnt;
  roundmode roundlines,rndtotal,roundvat;
  record SMVc SMr;/*VATBaseRowType*/
  Integer vatcnt;  
  val t,cc,uprice;
  Integer vt;

  if (UseTaxTemplatesforTaxCalc) then begin
    POSumup_TaxTemplate(POp);
    goto LPOSumup;
  end;
  SetupVATBase(SMr,vatcnt);
  POp.TotPalletNr = blankval;
  POp.ShipCost = blankval;
  POp.Cost1 = blankval;
  POp.Cost2 = blankval;
  POp.Cost3 = blankval;
  POp.Cost4 = blankval;
  POp.Cost5 = blankval;
  POp.CustomsCost = blankval;
  rwcnt = MatRowCnt(POp);
  if (rwcnt>0) then begin
    MatRowGet(POp,0,POrw);
    vt = VATType(POrw.VATCode);
  end;
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(POp,i,POrw);
    s = s + POrw.Sum;
    AddVATBase(SMr,POrw.VATCode,POrw.Sum,blankval,vatcnt,POp.InclVAT,POp.NoTAXonVAT);

    POp.TotPalletNr = POp.TotPalletNr + POrw.PalletNr;

//    DivPIFactor(POrw.Quant,POrw.PIFactor,q); //why extra cost should be per supplier unit not ours ? 
    q = POrw.Quant;
    t = q*POrw.ShipCost;
    POp.ShipCost = t + POp.ShipCost;
    t = q*POrw.RowCost1;
    POp.Cost1 = t + POp.Cost1;
    t = q*POrw.RowCost2;
    POp.Cost2 = t + POp.Cost2;
    t = q*POrw.RowCost3;
    POp.Cost3 = t + POp.Cost3;
    t = q*POrw.RowCost4;
    POp.Cost4 = t + POp.Cost4;
    t = q*POrw.RowCost5;
    POp.Cost5 = t + POp.Cost5;

    uprice = MulRateToBase1(POp.CurncyCode,POrw.Price,POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,SetROundModeD(5));
//    PUCalcPerc(uprice,POrw.Extra,cc);//should be in base 1 shouldn't it, PUrw.UPrice
//    t = q*cc;
//    POp.ExtraCost = t + POp.ExtraCost;

//    CalcSum(POrw.VEQuant,POrw.Price,POrw.PriceFactor,blankval,cc,0);

    if (HasLocalization("POL")) then begin
      uprice = uprice + POrw.ShipCost;
      uprice = Round(uprice,SetRoundModeD(0));
    end;
    PUCalcPerc(uprice,POrw.CustomsCost,cc);
    t = q*cc;
    POp.CustomsCost = t + POp.CustomsCost;   
  end;
  CalcVATBaseVAT(SMr,POp.InclVAT,POp.NoTAXonVAT,vatcnt,ms,taxsum);
  POp.TAX1Sum = taxsum;  
  if ((POp.ExportFlag==1) or (POp.ExportFlag==2) or (vt==kVATTypeReversed)) then begin
    ms = blankval;
  end;
  GetCurncyRoundoff(POp.CurncyCode,POp.PayDeal,"POVc",rndtotal,roundlines,roundvat);  
  
  ms = Round(ms,roundvat);
  if (POp.InclVAT>0) then begin
    ms2 = s;
  end else begin
    ms2 = s + ms + POp.TAX1Sum;
  end;    
  ms2 = Round(ms2,rndtotal);
  POp.ShipCost = Round(POp.ShipCost,SetRoundModeD(3));
  POp.Cost1 = Round(POp.Cost1,SetRoundModeD(3));
  POp.Cost2 = Round(POp.Cost2,SetRoundModeD(3));
  POp.Cost3 = Round(POp.Cost3,SetRoundModeD(3));
  POp.Cost4 = Round(POp.Cost4,SetRoundModeD(3));
  POp.Cost5 = Round(POp.Cost5,SetRoundModeD(3));
  POp.CustomsCost = Round(POp.CustomsCost,SetRoundModeD(5));
  POp.Sum1 = s;
  POp.Sum3 = ms;
  POp.Sum4 = ms2;
  if (POp.TAX1Sum==0) then begin POp.TAX1Sum = blankval; end;
LPOSumup:;  
  return;
end;

/*
global  
procedure POVc_PasteSum(var record POVc POp,Integer rownr)
begin
  row POVc POrw;
  val s;

  MatRowGet(POp,rownr,POrw);
  if ((nonblank(POrw.VEQuant)) and (nonblank(POrw.Price))) then begin
    s = POrw.Sum/POrw.VEQuant;
    s = POrw.Price - s;
    s = s*100;
    s = s/POrw.Price;
    s = Round(s,SetRoundModeD(1));
    POrw.vRebate = s;
  end;  
  MatRowPut(POp,rownr,POrw);
  if (PODchrsum(POp,rownr)) then begin
  end;
  POSumup(POp);
  return;
end;
//below code is same as Sales Order
*/

global  
procedure POVc_PasteSum(var record POVc POp,Integer rownr)
begin
  row POVc POrw;
  val s,t;
  record GeneralOptionBlock GenOptr;

  MatRowGet(POp,rownr,POrw);
  if ((nonblank(POrw.VEQuant)) and (nonblank(POrw.Price))) then begin
    BlockLoad(GenOptr);      
    POrw.vRebate = blankval;
    CalcSum(POrw.VEQuant,POrw.Price,POrw.PriceFactor,POrw.vRebate,t,GenOptr.UseDiscount);
    RoundRowSum(POp.CurncyCode,POp.PayDeal,"POVc",t);
    s = POrw.Sum;
    s = t - s;
    s = s*100;
    s = s/t;
    POrw.vRebate = Round(s,SetRoundModeD(1));;
    if (POrw.vRebate==0) then begin POrw.vRebate = blankval; end;
    MatRowPut(POp,rownr,POrw);
  end;  
  POSumup(POp);
  return;
end;

global  
procedure POVc_PasteVATCode(var record POVc POp,Integer rownr)
begin
  if (PODchrsum(POp,rownr)) then begin
  end;
  POSumup(POp);
  return;
end;

global  
procedure POVc_PasteTaxTemplateCode(var record POVc POp,Integer rownr,var Boolean chsum)
begin
  row POVc POrwp;
  record TaxMatrixVc TMr;

  MatRowGet(POp,rownr,POrwp);
  POrwp.TaxTemplateCode = OverrideTaxMatrix(POrwp.TaxTemplateCode,TMr);
  PackRowFieldMatrix(POrwp,"TaxMatrix",TMr);  
  MatRowPut(POp,rownr,POrwp);
  RowCalculateTaxMatrix_POVc(POp,rownr,POrwp);
  MatRowPut(POp,rownr,POrwp);
  chsum = PODchrsum(POp,rownr);
  return;
end;

global
function Boolean POVc_PasteLocation(var record POVc POp)
begin
  Boolean res;
  record LocationVc locR;

  locR.Code = POp.Location;
  if (ReadFirstMain(locR,1,true)) then begin
    POp.ShipAddr0 = locR.Name;
    POp.ShipAddr1 = locR.Addr0;
    POp.ShipAddr2 = locR.Addr1;
    POp.ShipAddr3 = locR.Addr2;
    POp.DelAddr3 = locR.Addr3;
    POp.DelAddr4 = locR.Addr4;
    res = true;
  end;
  POVc_PasteLocation = res;
  return;
end;

global
procedure GetINPurchaseControlAcc(record INVc INp,var string purchacc,string vecode,string location,Integer stocktype)
begin
  record CostAccBlock CAb;
  record AccBlock ARb;
  string 255 purchaccname;

  BlockLoad(CAb);
  BlockLoad(ARb);

  GetPUPControlAcc(location,vecode,CAb.ItemGroupAccounts,purchacc,INp.Group,ARb,stocktype,purchacc,purchaccname,true);
/*
  record AccBlock ARAccb;
  record CostAccBlock CostAccRec;
  record CUVc VEp;
  integer ctype;
  
  BlockLoad(ARAccb);
  BlockLoad(CostAccRec);
    
  switch (stocktype) begin
    case kStockTypePurchased:
      VEp.Code = vendor;
      if ReadFirstMain(VEp,1,true) then begin
        if (VEp.ExportFlag == 0) then begin
          ctype = 0;
        end;
        if ((VEp.ExportFlag == 1) or (VEp.ExportFlag == 3)) then begin
          ctype = 1;
        end;
        if (VEp.ExportFlag == 2) or (VEp.ExportFlag == 4) then begin
          ctype = 2;
        end;  
      end;
      if (CostAccRec.ItemGroupAccounts!=0) then begin
        GetITPurchAcc(INp.Group,purchacc,ctype);
        if (nonblank(purchacc)) then begin
          goto LGetINPurchaseControlAcc;
        end;
      end;
      if (ctype <= 0) then begin
        purchacc = ARAccb.PurchAcc;
      end;
      if (ctype == 1) then begin
        purchacc = ARAccb.EUPurchAcc;
      end;
      if (ctype == 2) then begin
       purchacc = ARAccb.ExpPurchAcc;
      end;
    case kStockTypeConsignment:
      purchacc = ARAccb.ConsigPurchAcc;
  end;
*/  
 LGetINPurchaseControlAcc:; 
  return;
end;

global
updating function Integer CreateMailFromPOD(record POVc POr,var record MailVc Mailr,var string warning,string pdfform)
begin
  Integer res;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc VEr;
  record CUVc ContactCUr;
  row POVc POrw;
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  val q;
  record SysFormatBlock SFb;
  string 255 docname,fname;
  string 100 supplemail;
  row MailTextVc MTrw;
  Integer IgnoreRecordDetails;
  
  BlockLoad(SFb);
  res = 0;
  if (ReadFirstMain(POr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromPOD;
  end;  
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  VEr.Code = POr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin end;
  supplemail = VEr.eMail;
  if (nonblank(POr.VEContact)) then begin
    if (FindCustomerRelation(VEr.Code,POr.VEContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        supplemail = ContactCUr.eMail;
      end;
    end;
  end; 
  if (blank(supplemail)) then begin
    supplemail = VEr.eMail;
  end;
  if (AddEMailRecipients(Mailr,VEr.Code,supplemail,kMailPurchaseOrder)==false) then begin 
    res = 2289;
    warning = VEr.Code;
    goto LCreateMailFromPOD;
  end;
  MailTextRow("POVc","",POr.LangCode,MTrw,IgnoreRecordDetails);
  Mailr.Header = MTrw.Header;
  Mailr.Header = Mailr.Header & USetStr(5574) & " ";
  Mailr.Header = Mailr.Header & POr.SerNr;
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (RecordStore(Mailr,false)) then begin 
    CreateRecordLink(Mailr,CurrentCompany,POr,CurrentCompany);  
    CreateRecordLink(POr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  if (IgnoreRecordDetails==1) then begin 
    goto LCreateMailFromPOD01;
  end;
  rwcnt = MatRowCnt(POr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    tstr = POrw.VEArtCode;
    if (blank(tstr)) then begin
      tstr = POrw.ArtCode;
    end;
    tstr = tstr & TAB;
    q = POrw.VEQuant;
    if (q==0) then begin
      q = POrw.Quant;
    end;
    tstr = tstr & ValToString(q,M4UVal,SFb.thousSep,SFb.decimalPt,0) & TAB;
    tstr = tstr & Left(POrw.Spec,60) & TAB;
    tstr = tstr & POrw.Price & TAB;
    if (POrw.vRebate!=0) then begin
      tstr = tstr & "-" & ValToString(POrw.vRebate,M4UVal,"","",0) & "%" &  TAB;
    end;
    tstr = tstr & POrw.Sum & TAB;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
  end;
  tstr = TAB & TAB & TAB & "=====";
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  tstr = TAB & TAB & TAB & USetStr(2685) & TAB & POr.Sum1;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  tstr = TAB & TAB & TAB & USetStr(2686) & TAB & POr.Sum3;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  tstr = TAB & TAB & TAB & USetStr(2687) & TAB & POr.Sum4;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  GetPayDealText(POr.PayDeal,POr.LangCode,tstr);
  tstr = USetStr(3060) & " " & tstr;
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
LCreateMailFromPOD01:;  
  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "POForm";
  end;
  fname = "tmp/" & USetStr(2062) & " " & POr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(POr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromPOD:;  
  CreateMailFromPOD = res;
  return;
end;

global
function val CalcPalletsNr(val Quant,string artcode)
begin
  val res;
  record INVc INr;
  Boolean itemfound;

  itemfound = GetFirstItem(artcode,INr);
  if (itemfound==false) then begin
    itemfound = ReadFirstItem(artcode,INr,true,false);
  end;
  if (itemfound) and (INr.QtyonPallet>0) then begin
    res = Round(Quant/INr.QtyonPallet+49999.00/100000.00,SetRoundModeD(0));
  end;
  CalcPalletsNr = res;
  return;
end;

global  
procedure POVc_PasteVEQuant(var record POVc POp,Integer rownr)
begin
  val t;
  row POVc POrw;
  
  MatRowGet(POp,rownr,POrw);
  MulPIFactor(POrw.VEQuant,POrw.PIFactor,t);
  POrw.Quant = t;    
  POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
  MatRowPut(POp,rownr,POrw);
  if (PODchrsum(POp,rownr)) then begin
    POSumup(POp);
  end;
  return;
end;

global  
procedure POVc_PastePrice(var record POVc POp,Integer rownr)
begin    
  ICPOItemPriceWarning(POp,rownr);
  if (PODchrsum(POp,rownr)) then begin
    POSumup(POp);
  end;
  return;
end;

global  
procedure POVc_PastevRebate(var record POVc POp,Integer rownr)
begin
  if (PODchrsum(POp,rownr)) then begin
    POSumup(POp);
  end;
  return;
end;

global
procedure GetPIPurchseCost(string artcode,string vecode,string veartcode,var val resp)
begin
  record PIVc PIr;
      
  resp = blankval;
  PIr.ItemCode = artcode;
  PIr.Location = "";
  PIr.VECode = vecode;
  PIr.VEItemCode = veartcode;
  if (ReadFirstMain(PIr,4,true)) then begin
    resp = StringToVal(PIr.PurchaseCost,M4Val);
  end;
  return;
end;

procedure GetVITaxCode(record VIVc VIp,Integer ExportFlag,string accnumber,var string vatcode,var string taxtemplatecode)
begin
  record AccVc Accr;
  record APAccBlock APAccRec;
  
  vatcode = "";
  taxtemplatecode = "";
  Accr.AccNumber = accnumber;
  if (ReadFirstMain(Accr,1,true)) then begin end;
  vatcode = Accr.VATCode;
  taxtemplatecode = Accr.TaxTemplateCode;
  BlockLoad(APAccRec);
  if (blank(vatcode)) then begin
    switch (ExportFlag) begin
      case 0: vatcode = APAccRec.VATCodeDom;
      case 1: vatcode = APAccRec.VATCodeEU;
      case 2: vatcode = APAccRec.VATCodeExp;
      case 3: vatcode = APAccRec.VATCodeEU;
      case 4: vatcode = APAccRec.VATCodeExp;
    end;
  end;
  if (blank(taxtemplatecode)) then begin
    switch (ExportFlag) begin
      case 0: taxtemplatecode = APAccRec.TaxTemplateCode;
      case 1: taxtemplatecode = APAccRec.TaxTemplateCodeEU;
      case 2: taxtemplatecode = APAccRec.TaxTemplateCodeExp;
      case 3: taxtemplatecode = APAccRec.TaxTemplateCodeEU;
      case 4: taxtemplatecode = APAccRec.TaxTemplateCodeExp;
    end;
  end;
  return;
end;

global
procedure AddExtraCostRow(record AccBlock ARAccRec,record BaseCurBlock BCb,record VIVc VIp,string costtype,val costamount,Integer InclVAT,Integer ExportFlag,Integer OrgExportFlag,string pocurncy,var record SMVc VATr,Integer vatcnt)
begin
  row VIVc VIrw;
  string 255 tstr;
  val tmp;
  record VarianceStatusVc VarStatr;
  LongInt OrdRow;
  record TaxMatrixVc TMr;
  
  if (costamount!=0) then begin
    ClearRow(VIp,VIrw,1);
    VIrw.stp = 1;
    switch (costtype) begin
      case "pucost1": VIrw.AccNumber = ARAccRec.PUCost1; OrdRow = -2;
      case "pucost2": VIrw.AccNumber = ARAccRec.PUCost2; OrdRow = -3;
      case "pucost3": VIrw.AccNumber = ARAccRec.PUCost3; OrdRow = -4;
      case "pucost4": VIrw.AccNumber = ARAccRec.PUCost4; OrdRow = -5;
      case "pucost5": VIrw.AccNumber = ARAccRec.PUCost5; OrdRow = -6;
      case "customs": VIrw.AccNumber = ARAccRec.PUCustomsAcc; OrdRow = -7;
      case "freight": VIrw.AccNumber = ARAccRec.PUFreightAcc; OrdRow = -8;
    end;
    VarStatr.PONr = VIp.POSerNr;
    VarStatr.OrdRow = OrdRow;
    if (ReadFirstMain(VarStatr,2,true)==false) then begin 
      OrdRow = -1; 
//      goto LAddExtraCostRow; 
    end;

    if (GetAccName(VIrw.AccNumber,tstr,60)==false) then begin goto LAddExtraCostRow; end;
    VIrw.Comment = tstr;
    VIrw.Sum = costamount;
    VIrw.OrdRow = OrdRow; // Row comes from Order, but is not connected to a specific row 
    if (VIp.CurncyCode!=BCb.BaseCur1) then begin
//      VIrw.Sum = DivRateToBase1(pocurncy,VIrw.Sum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
//      CurValToOtherCur(VIp.TransDate,BCb.BaseCur1,VIrw.Sum,VIp.CurncyCode,tmp,DefaultCurRoundOff);  

//      CurValToOtherCurWithRate(VIp.TransDate,BCb.BaseCur1,VIrw.Sum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,
//                               VIp.CurncyCode,tmp,DefaultCurRoundOff);
      Base1ToOther(VIp.CurncyCode,VIrw.Sum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,tmp,DefaultCurRoundOff);
      VIrw.Sum = tmp;
    end;
    GetVITaxCode(VIp,ExportFlag,VIrw.AccNumber,VIrw.VATCode,VIrw.TaxTemplateCode);
    VIrw.TaxTemplateCode = FillupTaxMatrix(1,VIp.BranchID,VIp.VECode,"","",VIrw.TaxTemplateCode,TMr);
    PackRowFieldMatrix(VIrw,"TaxMatrix",TMr);

    if (OrgExportFlag==2) then begin
      AddVATBase(VATr,VIrw.VATCode,VIrw.Sum,blankval,vatcnt,InclVAT,VIp.NoTAXonVAT);
    end else begin
//    VIrw.VATCode = ""; UST: commented out, we need vat code there
//I think VAT Code should be blank cause we do not calcaute VAT on Freight on PO, so below line is not needed
//if peple want Vatcode here we should first calculate VAT in PO
//    AddVATBase(VATr,VIrw.VATCode,VIrw.Sum,blankval,vatcnt,InclVAT,VIp.NoTAXonVAT);
    end;
    if (InclVAT!=0) then begin
      if (nonblank(VIrw.VATCode)) then begin
        tmp = FindVAT(VIrw.VATCode,VIrw.Sum,InclVAT,VIp.NoTAXonVAT);
        VIrw.Sum = VIrw.Sum - tmp;
      end;
    end;
/*
    if (pocurncy!=BCb.BaseCur1) then begin
      VIrw.Sum = DivRateToBase1(pocurncy,VIrw.Sum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
    end;
StopAlert("pocurncy " & pocurncy & " VIp.CurncyCode " & VIp.CurncyCode & " VIrw.Sum " & VIrw.Sum);    
    if (pocurncy!=VIp.CurncyCode) then begin
      VIrw.Sum = DivRateToBase1(VIp.CurncyCode,VIrw.Sum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
//      CurValToOtherCur(VIp.TransDate,pocurncy,VIrw.Sum,VIp.CurncyCode,tmp,DefaultCurRoundOff);  
//      VIrw.Sum = tmp;
    end;
*/    
    MatRowPut(VIp,MatRowCnt(VIp),VIrw);
  end;
LAddExtraCostRow:;  
  return;
end;

global  
procedure POVc_PasteQuant(var record POVc POp,Integer rownr)
begin
  Boolean res,pifound;
  record INVc INr;
  record PIVc PIr;  
  row PIVc PIrw;
  Integer i,rwcnt;
  row POVc POrw;
  val price,reb,t;
  string 255 descstr,vatcode,purchacc,taxtemplatecode;
  Boolean nomoreremotecalls;
  
  MatRowGet(POp,rownr,POrw);

  if  (GetItemPurchasePriceDiscount(POp.VECode,POp.Location,POp.TransDate,POp.CurncyCode,POrw.ArtCode,POrw.Quant,
                                   POp.LangCode,"","",POp.RebCode,POp.ExportFlag,true,
                                   POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,
                                   INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtemplatecode))
  then begin   
    POrw.vRebate = reb;
  end;
  DivPIFactor(POrw.Quant,POrw.PIFactor,t);
  POrw.VEQuant = t;    
  POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
  MatRowPut(POp,rownr,POrw);
  if (PODchrsum(POp,rownr)) then begin
  end;
  POSumup(POp);
  return;
end;

global
procedure PODUpdatePrices(var record POVc POr,Boolean readf)
begin
  Integer i,rwcnt;
  row POVc POrw;
  record PIVc PIr;
  record INVc INr;
  record INVc IN2r;
  string 255 tstr;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  
  Boolean itemfound,found;
  string 255 itsz,mask,subsets,vatcode;

  if (readf) then begin
    if (ReadFirstMain(POr,0,true)) then begin end;  
  end;
  rwcnt = MatRowCnt(POr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POr,i,POrw);
    if (nonblank(POrw.ArtCode)) then begin
      itemfound = GetFirstItem(POrw.ArtCode,INr);
      if (itemfound==false) then begin
        itemfound = ReadFirstItem(POrw.ArtCode,INr,true,false);
      end else begin
        POrw.ArtCode = INr.Code;
      end;
      PIr.VECode = POr.VECode;
      PIr.ItemCode = POrw.ArtCode;
      PIr.Location = POr.Location;
      found = ReadFirstMain(PIr,3,true);
      if (found==false) then begin
        if (nonblank(POr.Location)) then begin
          PIr.VECode = POr.VECode;
          PIr.ItemCode = POrw.ArtCode;
          PIr.Location = "";
          found = ReadFirstMain(PIr,3,true);
        end;
      end;
      if (found==false) then begin
        PIr.VECode = POr.VECode;
        PIr.ItemCode = INr.Code;
        PIr.Location = POr.Location;
        found = ReadFirstMain(PIr,3,true);
        if (found==false) then begin
          if (nonblank(POr.Location)) then begin
            PIr.VECode = POr.VECode;
            PIr.ItemCode = INr.Code;
            PIr.Location = "";
            found = ReadFirstMain(PIr,3,true);
          end;
        end;
        if (FindItemVAR2(POrw.ArtCode,itsz,mask,subsets)) then begin
          if (ReadFirstItem(POrw.ArtCode,IN2r,true,true)) then begin
          end;
        end;
      end;
      if (found) then begin
        price = PIr.PurPrice;
        if (PIr.CurncyCode!=POr.CurncyCode) then begin
          t = MulWithRateToBase1(PIr.CurncyCode,POr.TransDate,PIr.PurPrice,DefaultCurRoundOff);
          price = DivRateToBase1(POr.CurncyCode,t,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
        end;
        POrw.Price = price;
        MatRowPut(POr,i,POrw);
      end else begin
        if (itemfound) then begin
          price = DivRateToBase1(POr.CurncyCode,INr.InPrice,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
          POrw.Price = price;
          MatRowPut(POr,i,POrw);
        end;
      end;
      if (PODchrsum(POr,i)) then begin
      end;
    end;
  end;
  POSumup(POr);
  return;
end;

global
procedure POVc_PasteCurncyCode(var record POVc POr,string oldcurncy,Boolean newratef)
begin
  val fr,to1,to2,br1,br2;
  string 10 crncy;
  
  if (POr.CurncyCode!=oldcurncy) or (newratef) then begin
    SaveExchangeRate(POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,fr,to1,to2,br1,br2);
    POGetRate(POr);
//    if ((OtherExchangeRate(POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,fr,to1,to2,br1,br2))) then begin 
      PODUpdatePrices(POr,false);
//    end;
  end;
  return;
end;

global  
function Boolean POVc_PasteVEArtCode(var record POVc POp,Integer rownr)
begin
  Boolean res,pifound;
  record INVc INr;
  record PIVc PIr;  
  row PIVc PIrw;
  Integer i,rwcnt;
  row POVc POrw;
  val price,reb,t;
  string 255 descstr,vatcode,purchacc,taxtemplatecode;
  Boolean nomoreremotecalls;
  record TaxMatrixVc TMr;

  MatRowGet(POp,rownr,POrw);

  PIr.VEItemCode = POrw.VEArtCode;
  PIr.VECode = POp.VECode;
  PIr.ItemCode = POrw.ArtCode;
  PIr.Location = POp.Location;
  pifound = ReadFirstKey("VEItemCode",PIr,4,true);
  if (pifound==false) then begin
    if (nonblank(POp.Location)) then begin
      PIr.VECode = POp.VECode;
      PIr.VEItemCode = POrw.VEArtCode;
      if (nonblank(POrw.ArtCode)) then begin
        PIr.ItemCode = POrw.ArtCode;
        pifound = ReadFirstKey("VEItemCode",PIr,3,true);
      end else begin
        pifound = ReadFirstKey("VEItemCode",PIr,2,true);
      end;
    end;
  end;
  if (pifound) then begin
    if (PIr.VEItemCode!=POrw.VEArtCode) then begin pifound = false; end;
  end;
  if (pifound) then begin
    if  (GetItemPurchasePriceDiscount(POp.VECode,POp.Location,POp.TransDate,POp.CurncyCode,PIr.ItemCode,POrw.Quant,
                                     POp.LangCode,"","",POp.RebCode,POp.ExportFlag,true,
                                     POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,
                                     INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtemplatecode))
    then begin
      res = true;

      POrw.Price = price;
      POrw.VATCode = vatcode;
      POrw.vRebate = reb;
      POrw.CostAcc = purchacc;

      if (nonblank(POp.VEVATCode)) then begin
        POrw.VATCode = POp.VEVATCode;
      end;

      POrw.ArtCode = PIr.ItemCode;
      POrw.TaxTemplateCode = FillupTaxMatrix(1,POp.BranchID,POp.VECode,"","",taxtemplatecode,TMr);
      POrw.PriceFactor = INr.PriceFactor;
      POrw.UnitCode = INr.Unittext;
      POrw.VEArtCode = PIr.VEItemCode;
      POrw.CustomsCost = PIr.PurchaseCost;
      POrw.StockType = PIr.DefStockType;
      POrw.Spec = PIr.Comment;
      POrw.VEUnit =  PIr.VEUnit;
      POrw.PIFactor = PIr.PIFactor;
      DivPIFactor(POrw.Quant,POrw.PIFactor,t);
      POrw.VEQuant = t;    
      POrw.Objects = FindINObjects(INr.Objects,INr.Group);
      POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
      if (blank(POrw.Spec)) then begin
        POrw.Spec = descstr;
      end;
      if (blank(POrw.Spec)) then begin
        POrw.Spec = INr.Name;
      end;
      MatRowPut(POp,rownr,POrw);

      rwcnt = MatRowCnt(PIr);    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PIr,i,PIrw);
        ClearRow(POp,POrw,1);
        POrw.Spec = POrw.Spec & PIrw.Text;
        MatRowPut(POp,rownr+i+1,POrw);
      end;
      
      if (PODchrsum(POp,rownr)) then begin
        POSumup(POp);
      end;                                   
    end;
  end;

  POVc_PasteVEArtCode = res;
  return;
end;

/*
old versiom
global  
function Boolean POVc_PasteVEArtCode(var record POVc POp,Integer rownr)
begin
  Boolean res,itemfound,found;
  row POVc POrw;
  record INVc INr;
  record PIVc PIr;
  row PIVc PIrw;
  val t,price;
  string 10 vatcode;
  Integer i,rwcnt;
  string 255 tstr;
  
  MatRowGet(POp,rownr,POrw);
  PIr.VEItemCode = POrw.VEArtCode;
  PIr.VECode = POp.VECode;
  PIr.ItemCode = POrw.ArtCode;
  PIr.Location = POp.Location;
  found = ReadFirstKey("VEItemCode",PIr,4,true);
  if (found==false) then begin
    if (nonblank(POp.Location)) then begin
      PIr.VECode = POp.VECode;
      PIr.VEItemCode = POrw.VEArtCode;
      if (nonblank(POrw.ArtCode)) then begin
        PIr.ItemCode = POrw.ArtCode;
        found = ReadFirstKey("VEItemCode",PIr,3,true);
      end else begin
        found = ReadFirstKey("VEItemCode",PIr,2,true);
      end;
    end;
  end;
  if (found) then begin
    if (PIr.VEItemCode!=POrw.VEArtCode) then begin found = false; end;
  end;
  if (found) then begin
    itemfound = ReadFirstItem(PIr.ItemCode,INr,true,false);
    if (itemfound) then begin
      POrw.PriceFactor = INr.PriceFactor;
      POrw.UnitCode = INr.Unittext;
    end else begin
      POrw.PriceFactor = blankval;
    end;
    price = PIr.PurPrice;
    vatcode = POp.VEVATCode;
    if (blank(vatcode)) then begin
      GetItemVATCode(POrw.ArtCode,POp.ExportFlag,vatcode,false);
    end;
    POrw.ArtCode = PIr.ItemCode;
    if (PIr.CurncyCode!=POp.CurncyCode) then begin
      t = MulWithRateToBase1(PIr.CurncyCode,POp.TransDate,PIr.PurPrice,DefaultCurRoundOff);
      price = DivRateToBase1(POp.CurncyCode,t,POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,DefaultCurRoundOff);
    end;
    POrw.Price = price;
    POrw.VEArtCode = PIr.VEItemCode;
    POrw.Spec = PIr.Comment;
    POrw.VATCode = vatcode;
    POrw.PIFactor = PIr.PIFactor;
    POrw.VEUnit = PIr.VEUnit;
    DivPIFactor(POrw.Quant,POrw.PIFactor,t);
    POrw.VEQuant = t;    
    
    POrw.Objects = FindINObjects(INr.Objects,INr.Group);
    POrw.UnitCode = INr.Unittext;
    GetINPurchaseControlAcc(INr,tstr,POp.VECode,POp.Location,POrw.StockType);
    POrw.CostAcc = tstr;
    MatRowPut(POp,rownr,POrw);
    rwcnt = MatRowCnt(PIr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PIr,i,PIrw);
      ClearRow(POp,POrw,1);
      POrw.Spec = POrw.Spec & PIrw.Text;
      MatRowPut(POp,rownr+i+1,POrw);
    end;
    MatRowGet(POp,rownr,POrw);
    res = true;
  end else begin
    res = false;
  end;  
  MatRowPut(POp,rownr,POrw);
  if (PODchrsum(POp,rownr)) then begin
    POSumup(POp);
  end;
  POVc_PasteVEArtCode = res;
  return;
end;
*/

global  
procedure POVc_PasteStockType(var record POVc POp,Integer rownr)
begin
  record AccBlock Ab;
  row POVc POrw;
  record INVc INr;
  Boolean itemfound;
  string 255 tstr;
  
  if (rownr>=0) then begin
    BlockLoad(Ab);
    MatRowGet(POp,rownr,POrw);
    itemfound = ReadFirstItem(POrw.ArtCode,INr,true,false);
    GetINPurchaseControlAcc(INr,tstr,POp.VECode,POp.Location,POrw.StockType);
    POrw.CostAcc = tstr;
    MatRowPut(POp,rownr,POrw);
  end;
  return;
end;

global  
procedure POVc_PasteTREO(var record POVc POp,Integer rownr)
begin
  record APAccBlock APb;
  row POVc POrw;
  record INVc INr;
  Boolean itemfound;
  string 255 vatcode;
  
  if (rownr>=0) then begin
    BlockLoad(APb);
    MatRowGet(POp,rownr,POrw);
    switch (POrw.TREO) begin
      case kNonTREO:
        itemfound = ReadFirstItem(POrw.ArtCode,INr,true,false);
        vatcode = INr.VATCode;
        switch (POp.ExportFlag) begin
          case 1: vatcode = INr.VATCodeEU;
          case 2: vatcode = INr.VATCodeExp;
          case 3: vatcode = INr.VATCodeEU;
          case 4: vatcode = INr.VATCodeExp;
        end;
        if (blank(vatcode)) then begin
          vatcode = APb.VATCodeDom;
          switch (POp.ExportFlag) begin
            case 1: vatcode = APb.VATCodeEU;
            case 2: vatcode = APb.VATCodeExp;
            case 3: vatcode = APb.VATCodeEU;
            case 4: vatcode = APb.VATCodeExp;
          end;
        end;
        POrw.VATCode = vatcode;
      case kTREO:
        POrw.VATCode = APb.VATCodeTREO;
    end;
    MatRowPut(POp,rownr,POrw);
  end;
  return;
end;

global
function string 255 POSerialNrFromPU(LongInt ponr,Integer porow)
begin
  string 255 res,keystr;
  record PUVc PUr;
  row PUVc PUrw;
  Integer i,rwcnt;
  Boolean found;

  PUr.PONr = ponr;
  if (ReadFirstKey("PONr",PUr,1,true)) then begin
    rwcnt = MatRowCnt(PUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(PUr,i,PUrw);
      if (PUrw.OrdRow==porow) then begin
        res = PUrw.SerialNr;
        goto LPOSerialNrFromPU;
      end;
    end;
  end else begin
    keystr = "RowPONr:" & ponr;
    while (LoopKey(keystr,PUr,1,found)) begin
      if (found) then begin
        if (PUr.Invalid==0) then begin
          rwcnt = MatRowCnt(PUr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(PUr,i,PUrw);
            if (PUrw.ovst==0) then begin
              if ((PUrw.OrdRow==porow) and (PUrw.PONr==ponr)) then begin
                res = PUrw.SerialNr;
                goto LPOSerialNrFromPU;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
LPOSerialNrFromPU:;  
  POSerialNrFromPU = res;
  return;
end;

global  
procedure POGetRate(var record POVc POp)
begin
  val fr,to1,to2,br1,br2;
  string 10 crncy;
 
  crncy = POp.CurncyCode;
  GetFullCurncyRate(crncy,POp.TransDate,fr,to1,to2,br1,br2);
  POp.CurncyCode = crncy;
  POp.FrRate = fr;
  POp.ToRateB1 = to1;
  POp.ToRateB2 = to2;
  POp.BaseRate1 = br1;
  POp.BaseRate2 = br2;
  return;
end;

global  
function Boolean POVc_PasteArtCode(var record POVc POp,Integer rownr,Boolean multilinef)
begin
  Boolean res,pifound;
  record INVc INr,orgINr;
  record PIVc PIr;  
  row PIVc PIrw;
  Integer i,rwcnt;
  row POVc POrw;
  val price,reb,t;
  string 255 descstr,vatcode,purchacc,taxtemplatecode,tstr,artcode;
  Boolean nomoreremotecalls,infound;
  record POSettingBlock POset;
  record TaxMatrixVc TMr;

  MatRowGet(POp,rownr,POrw);

  if  (GetItemPurchasePriceDiscount(POp.VECode,POp.Location,POp.TransDate,POp.CurncyCode,POrw.ArtCode,POrw.Quant,
                                   POp.LangCode,"","",POp.RebCode,POp.ExportFlag,true,
                                   POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,
                                   INr,PIr,pifound,price,descstr,reb,vatcode,purchacc,nomoreremotecalls,taxtemplatecode))
  then begin
    res = true;
    artcode = POrw.ArtCode;
    infound = ReadFirstItem(POrw.ArtCode,orgINr,true,false);
    BlockLoad(POset);
    POrw.ArtCode = INr.Code;
    POrw.Price = price;
    POrw.VATCode = vatcode;
    POrw.vRebate = reb;
    POrw.CostAcc = purchacc;

    if (nonblank(POp.VEVATCode)) then begin
      POrw.VATCode = POp.VEVATCode;
    end;

//    GetItemTaxTemplateCode(INr.Code,POp.ExportFlag,taxtemplatecode,false);
    POrw.TaxTemplateCode = FillupTaxMatrix(1,POp.BranchID,POp.VECode,"","",taxtemplatecode,TMr);
    POrw.PriceFactor = INr.PriceFactor;
    POrw.UnitCode = INr.Unittext;
    if (pifound) then begin
      POrw.VEArtCode = PIr.VEItemCode;
      POrw.CustomsCost = PIr.PurchaseCost;
      POrw.StockType = PIr.DefStockType;
      if (PIr.ItemCode==POrw.ArtCode and artcode==POrw.ArtCode) then begin 
        POrw.Spec = PIr.Comment;
      end else begin
        if (PIr.Comment==INr.Name) then begin
          POrw.Spec = descstr;
        end else begin
          POrw.Spec = PIr.Comment & ", " & descstr;
        end;
      end;
      POrw.VEUnit =  PIr.VEUnit;
      POrw.PIFactor = PIr.PIFactor;
    end else begin
      POrw.Spec = descstr;
    end;
    DivPIFactor(POrw.Quant,POrw.PIFactor,t);
    POrw.VEQuant = t;    
    POrw.Objects = FindINObjects(INr.Objects,INr.Group);
    POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
    PackRowFieldMatrix(POrw,"TaxMatrix",TMr);
    MatRowPut(POp,rownr,POrw);
    if (pifound) then begin
      if (multilinef==false) then begin
        rwcnt = MatRowCnt(PIr);    
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PIr,i,PIrw);
          ClearRow(POp,POrw,1);
          POrw.Spec = POrw.Spec & PIrw.Text;
          MatRowPut(POp,rownr+i+1,POrw);
        end;
      end;
    end else begin
      if (multilinef==false) then begin
        POMultiLineText(POp,INr,POp.LangCode,rownr);
      end;
    end;
    ICPOItemPriceWarning(POp,rownr);

    if (PODchrsum(POp,rownr)) then begin
      POSumup(POp);
    end;                                   
  end;

  if ((res==true) and (POset.WarnNotDefSup!=0)) then begin
//    if (FindItemVAR(INr.Code,tstr,tstr,tstr,tstr)==false) then begin
//why no message for variety items ? 
    if (true) then begin
      pifound  = false;
      PIr.DefaultChoice = 1;
      PIr.ItemCode = POrw.ArtCode;
      if (ReadFirstKey("DefaultChoice",PIr,2,true)) then begin
        if (PIr.VECode==POp.VECode) then begin
          pifound = true;
        end;
      end else begin
        PIr.DefaultChoice = 1;
        PIr.ItemCode = orgINr.Code;
        if (ReadFirstKey("DefaultChoice",PIr,2,true)) then begin
          if (PIr.VECode==POp.VECode) then begin
            pifound = true;
          end;
        end;
      end;
      if (pifound==false) then begin
        MessageBox(1933,": " & POrw.ArtCode);
      end;
    end;
  end;

  POVc_PasteArtCode = res;
  return;
end;

/*
old version
global  
function Boolean POVc_PasteArtCode(var record POVc POp,Integer rownr,Boolean multilinef)
begin
  Boolean res,itemfound,found,varf;
  row POVc POrw;
  record POSettingBlock POset;
  record INVc INr;
  record INVc IN2r;
  record PIVc PIr;  
  row PIVc PIrw;
  string 255 itsz,mask,subsets,vatcode,taxtemplatecode;
  Integer rwcnt,i;
  val t,price; 
  string 255 tstr;
  string 255 mskrep;
  record TaxMatrixVc TMr;
  
  BlockLoad(POset);
  MatRowGet(POp,rownr,POrw);
  itemfound = GetFirstItem(POrw.ArtCode,INr);
  if (itemfound==false) then begin
    itemfound = ReadFirstItem(POrw.ArtCode,INr,true,false);
  end else begin
    POrw.ArtCode = INr.Code;
  end;
  if (itemfound) then begin
    POrw.PriceFactor = INr.PriceFactor;
  end else begin
    POrw.PriceFactor = blankval;
  end;
  PIr.VECode = POp.VECode;
  PIr.Location = POp.Location;
  PIr.ItemCode = POrw.ArtCode;
  found = ReadFirstMain(PIr,3,true);
  if (found==false) then begin
    if (nonblank(POp.Location)) then begin
      PIr.VECode = POp.VECode;
      PIr.Location = "";
      PIr.ItemCode = POrw.ArtCode;
      found = ReadFirstMain(PIr,3,true);
    end;
  end;
  if (found==false) then begin
    PIr.VECode = POp.VECode;
    PIr.ItemCode = INr.Code;
    PIr.Location = POp.Location;
    found = ReadFirstMain(PIr,3,true);
    if (found==false) then begin
      if (nonblank(POp.Location)) then begin
        PIr.VECode = POp.VECode;
        PIr.ItemCode = INr.Code;
        PIr.Location = "";
        found = ReadFirstMain(PIr,3,true);
      end;
    end;
    if (FindItemVAR2(POrw.ArtCode,itsz,mask,subsets)) then begin
      if (ReadFirstItem(POrw.ArtCode,IN2r,true,true)) then begin
        PIr.Comment = IN2r.Name;
      end;
    end;
  end;
  if (found) then begin
    price = PIr.PurPrice;
    if (PIr.CurncyCode!=POp.CurncyCode) then begin
      t = MulWithRateToBase1(PIr.CurncyCode,POp.TransDate,PIr.PurPrice,DefaultCurRoundOff);
      price = DivRateToBase1(POp.CurncyCode,t,POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,DefaultCurRoundOff);
    end;
    vatcode = POp.VEVATCode;
    if (blank(vatcode)) then begin
      GetItemVATCode(INr.Code,POp.ExportFlag,vatcode,false);
    end;  

    GetItemTaxTemplateCode(INr.Code,POp.ExportFlag,taxtemplatecode,false);
    POrw.TaxTemplateCode = FillupTaxMatrix(1,POp.BranchID,POp.VECode,"","",taxtemplatecode,TMr);

    POrw.Price = price;
    POrw.VEArtCode = PIr.VEItemCode;
    POrw.CustomsCost = PIr.PurchaseCost;
    POrw.StockType = PIr.DefStockType;
    POrw.Spec = PIr.Comment;
    POrw.VATCode = vatcode;
    POrw.VEUnit =  PIr.VEUnit;
    if (itemfound) then begin
      if (blank(POrw.Objects)) then begin
        POrw.Objects = FindINObjects(INr.Objects,INr.Group);
      end;
    end;
    POrw.PIFactor = PIr.PIFactor;
    DivPIFactor(POrw.Quant,POrw.PIFactor,t);
    POrw.VEQuant = t;    
    MatRowPut(POp,rownr,POrw);
    if (multilinef==false) then begin
      rwcnt = MatRowCnt(PIr);    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PIr,i,PIrw);
        ClearRow(POp,POrw,1);
        POrw.Spec = POrw.Spec & PIrw.Text;
        MatRowPut(POp,rownr+i+1,POrw);
      end;
    end;
    MatRowGet(POp,rownr,POrw);
    res = true;
  end else begin
    if (itemfound) then begin
      price = DivRateToBase1(POp.CurncyCode,INr.InPrice,POp.FrRate,POp.ToRateB1,POp.ToRateB2,POp.BaseRate1,POp.BaseRate2,DefaultCurRoundOff);
      vatcode = POp.VEVATCode;
      if (blank(vatcode)) then begin
        GetItemVATCode(INr.Code,POp.ExportFlag,vatcode,false);
      end;  

      GetItemTaxTemplateCode(INr.Code,POp.ExportFlag,taxtemplatecode,false);
      POrw.TaxTemplateCode = FillupTaxMatrix(1,POp.BranchID,POp.VECode,"","",taxtemplatecode,TMr);
      if (GetItemNameStr(1,mask,POp.LangCode,INr.Name,INr.Code)) then begin end;
//      POrw.ArtCode = INr.Code; // Why? What if POrw has variety item?
      POrw.Price = price;
      POrw.VEArtCode = "";
      POrw.Spec = mask;
      if (multilinef==false) then begin
        POMultiLineText(POp,INr,POp.LangCode,rownr);
      end;
      POrw.VATCode = vatcode;
      POrw.PIFactor = blankval;
      POrw.VEQuant = POrw.Quant;
      POrw.VEQuant = POrw.VEQuant;
      INr.Code = POrw.ArtCode;
      res = true;
    end else begin
      res = false;
    end;
  end;
  if ((res==true) and (POset.WarnNotDefSup!=0)) then begin
    varf = FindItemVAR(INr.Code,itsz,mask,mskrep,subsets);
    PIr.DefaultChoice = 1;
    PIr.ItemCode = POrw.ArtCode;
    PIr.VECode = POp.VECode;
    found = ReadFirstKey("DefaultChoice",PIr,3,true);
    found = found and ((PIr.ItemCode==POrw.ArtCode) and (PIr.VECode==POp.VECode));
    if (found==false) then begin
      PIr.DefaultChoice = 1;
      PIr.ItemCode = INr.Code;
      PIr.VECode = POp.VECode;
      found = ReadFirstKey("DefaultChoice",PIr,3,true);
      found = found and ((PIr.ItemCode==INr.Code) and (PIr.VECode==POp.VECode));
    end;
    if (found==false) then begin
      if (varf) then begin
      end;
    end;
    if (found==false) then begin
      MessageBox(1933,"");
    end;
  end;
  POrw.Objects = FindINObjects(INr.Objects,INr.Group);
  POrw.UnitCode = INr.Unittext;
  GetINPurchaseControlAcc(INr,tstr,POp.VECode,POp.Location,POrw.StockType);
  POrw.CostAcc = tstr;
  POrw.PalletNr = CalcPalletsNr(POrw.Quant,POrw.ArtCode);
  PackRowFieldMatrix(POrw,"TaxMatrix",TMr);
  MatRowPut(POp,rownr,POrw);
  if (PODchrsum(POp,rownr)) then begin
    POSumup(POp);
  end;
  POVc_PasteArtCode = res;
  return;
end;
*/

global  
function Boolean POVc_PasteVECode(var record POVc POp,Boolean warnf)
begin
  Boolean res;
  record CUVc VEr;
  row POVc POrw;
  Integer i,rwcnt;
    
  VEr.Code = POp.VECode;
  res = ReadFirstMain(VEr,1,true);
  if (res) then begin
    if (VEr.blockedFlag!=0) then begin res = false; end;
    if (VEr.VEType==0) then begin res = false; end;
  end;
  if (res) then begin
    POp.Addr0 = VEr.Name;
    POp.Addr1 = VEr.InvAddr0;
    POp.Addr2 = VEr.InvAddr1;
    POp.Addr3 = VEr.InvAddr2;
    POp.InvAddr3 = VEr.InvAddr3;
    POp.InvAddr4 = VEr.InvAddr4;
    POp.VEContact = VEr.Person;
    POp.PayDeal = VEr.VEPayDeal;
    POp.VEVATCode = VEr.VEVATCode;
    POp.VETaxTemplateCode = VEr.VETaxTemplateCode;
    POp.Objects = VEr.VEObjects;
    POp.CurncyCode = VEr.VECurncyCode;
    POGetRate(POp);
    POp.LangCode = VEr.LangCode;
    POp.ShipMode = VEr.VEShipMode;
    POp.ShipDeal = VEr.VEShipDeal;
    POp.VEFactoring = VEr.VEFactoring;
    POp.InvoiceToCode = VEr.VEInvoiceToCode;
    POp.ExportFlag = VEr.ExportFlag;
    POp.Region = VEr.Region;
    POp.RebCode = VEr.VERebCode;
    if (nonblank(VEr.VEVATCode)) then begin
      rwcnt = MatRowCnt(POp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POp,i,POrw);
        if (POrw.VATCode!=VEr.VEVATCode) then begin
          POrw.VATCode = VEr.VEVATCode;
          MatRowPut(POp,i,POrw);
          POVc_PasteVATCode(POp,i);
        end;
      end;
    end;
    if (warnf) then begin
      if (nonblank(VEr.VEWarnText1)) then begin
        MessageBox(0,VEr.VEWarnText1);
      end;
    end;
    POSumup(POp);    
  end;
  POVc_PasteVECode = res;
  return;
end;

function Boolean PUExists(LongInt PONr,Integer porownr)
begin
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  Integer i,rwcnt;
  Boolean found;

  PUr.PONr = PONr;
  found = true;
  while (LoopKey("PONr",PUr,1,found)) begin
    if (PUr.PONr!=PONr) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (PUrw.OrdRow==porownr) then begin
          res = true;
          goto LPUExists;
        end;
      end;
    end;
  end;

  ResetLoop(PUr);
  found = true;
  while (LoopKey("RowPONr:" & PONr,PUr,1,found)) begin
    if (found) then begin
      rwcnt = MatRowCnt(PUr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUr,i,PUrw);
        if (PUrw.OrdRow==porownr) then begin
          res = true;
          goto LPUExists;
        end;
      end;
    end;
  end;
LPUExists:;
  PUExists = res;
  return;
end;

global
function Boolean POShipdTest(record POVc POp,Boolean invdf)
begin
  Boolean res;
  Integer i,rwcnt;
  row POVc POrw;
  
  rwcnt = MatRowCnt(POp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    if (POrw.Shipd1>0) then begin
      res = true;
      goto LPOShipdTest;
    end;
    if (invdf) then begin
      if (POrw.Invd>0) then begin
        res = true;
        goto LPOShipdTest;
      end;
      res = PUExists(POp.SerNr,i);
      if (res) then begin
        goto LPOShipdTest;
      end;      
    end;
  end;
LPOShipdTest:;
  POShipdTest = res;
  return;
end;

global
function Boolean PIVc_PasteVECode(var record PIVc PIr)
begin
  Boolean res; 
  record CUVc VEr;
  
  VEr.Code = PIr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
    PIr.VEName = VEr.Name;
    if (PIr.CurncyCode!=VEr.VECurncyCode) then begin
      CurValToOtherCur(CurrentDate,PIr.CurncyCode,PIr.PurPrice,VEr.VECurncyCode,PIr.PurPrice,DefaultCurRoundOff);
      PIr.CurncyCode = VEr.VECurncyCode;
    end;
    res = true;
  end;
  PIVc_PasteVECode = res;
  return;
end;

global
updating function Boolean MakeActFromPO2(var record POVc POr,var record ActVc Actr,Boolean autof)
begin
  record ASTBlock ASTb;
  Integer curcomp;
  Boolean res;
  record CUVc VEr;
  record POrderClassVc POCr;
  record ActTypeVc ATr;
  record ActTypeGrVc ATGr;

  BlockLoad(ASTb);
  if (autof) then begin
    if (ASTb.GenPurchOrder==0) then begin
      goto LMakeActFromPO;
    end;
  end;
  if (ReadFirstMain(POr,0,true)) then begin end;  
  curcomp = CurrentCompany;
  POCr.Code = POr.POClass;
  if (ReadFirstMain(POCr,1,true)) then begin
  end;
  Actr.MainPersons = POr.SalesMan;
  Actr.TransDate = CurrentDate;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");  
  Actr.Invalid = 0;
  Actr.TodoFlag = 1;
  Actr.CUCode = POr.VECode;
  Actr.Comment = POr.Comment;
  Actr.Contact = POr.VEContact;
  VEr.Code = POr.VECode;
  if (ReadFirstMain(VEr,1,true)) then begin
    Actr.CUName = VEr.Name;
    Actr.Phone = VEr.Phone;
    if (blank(Actr.Contact)) then begin
      Actr.Contact = POr.SalesMan;
    end;
  end;
  Actr.ActType = POCr.ActType;
  if (blank(Actr.ActType)) then begin
    Actr.ActType = ASTb.GenPurchOrd;
  end;
  if (PasteActTypeInAct("",Actr)) then begin
  end;
  ATr.Code = Actr.ActType;
  if (ReadFirstMain(ATr,1,true)) then begin
    Actr.ItemCode = ATr.ItemCode;
    ATGr.Code = ATr.ActTypeGr;
    if (ReadFirstMain(ATGr,1,true)) then begin
      Actr.CalTimeFlag = ATGr.DefTimeFlag;
    end;
  end;  
  Actr.OKFlag = ASTb.PurchOrderDone;
  if (POr.SalesMan!=CurrentUser) then begin
    Actr.CCPersons = CurrentUser;
  end;
  if (RecordStore(Actr,false)) then begin 
    CreateRecordLink(Actr,curcomp,POr,curcomp);  
    CreateRecordLink(POr,curcomp,Actr,curcomp);  
    res = true;
  end;  
LMakeActFromPO:;  
  MakeActFromPO2 = res;
  return;
end;

global
updating function Boolean MakeActFromPO(var record POVc POr,var record ActVc Actr)
begin
  MakeActFromPO = MakeActFromPO2(POr,Actr,false);
  return;
end;

global
updating procedure CreateActFromPO(record POVc POr)
begin
  record ASTBlock ASTb;
  record CUVc VEr;
  record POrderClassVc POCr;
  record ActTypeVc ATr;
  record ActTypeGrVc ATGr;
  record ActVc Actr;
  Integer curcomp; 
  Boolean testf;
  
  testf = false;
  curcomp = CurrentCompany;
  POCr.Code = POr.POClass;
  if (ReadFirstMain(POCr,1,true)) then begin
    switch (POCr.OrderAct) begin
      case 0: 
        testf = true;
        goto LCreateActFromPO;
      case 1: 
        Actr.MainPersons = POr.SalesMan;
      case 2:       
        Actr.MainPersons = POCr.ActMainPerson;
        if (blank(Actr.MainPersons)) then begin
          Actr.MainPersons = POr.SalesMan;
        end;
    end;
    Actr.TransDate = POr.TransDate;
    Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
    Actr.Invalid = 0;
    Actr.TodoFlag = 1;
    Actr.CUCode = POr.VECode;
    Actr.Comment = POr.Comment;
    Actr.Contact = POr.VEContact;
    VEr.Code = POr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
      Actr.CUName = VEr.Name;
      Actr.Phone = VEr.Phone;
      if (blank(Actr.Contact)) then begin Actr.Contact = POr.SalesMan; end;
    end;
    BlockLoad(ASTb);
    Actr.ActType = POCr.ActType;
    if (blank(Actr.ActType)) then begin
      Actr.ActType = ASTb.GenPurchOrd;
    end;
    if (PasteActTypeInAct("",Actr)) then begin
    end;    
    ATr.Code = Actr.ActType;
    if (ReadFirstMain(ATr,1,true)) then begin
      Actr.ItemCode = ATr.ItemCode;
      ATGr.Code = ATr.ActTypeGr;
      if (ReadFirstMain(ATGr,1,true)) then begin
        Actr.CalTimeFlag = ATGr.DefTimeFlag;
      end;
    end;
    Actr.OKFlag = ASTb.PurchOrderDone;
    if (RecordInsert(Actr,false)) then begin
      CreateRecordLink(Actr,curcomp,POr,curcomp);  
      CreateRecordLink(POr,curcomp,Actr,curcomp);  
    end;
    testf = true;
  end; 
LCreateActFromPO:;  
  if (testf==false) then begin
    MakeActFromPO2(POr,Actr,true); 
  end;
  return;
end;

procedure DownPayMul(val a,val b,var val c)
begin
  if (b!=100) then begin
    c = a*b;
    c = c/100;
    c = Round(c,SetRoundModeD(2));//0
  end else begin
    c = a;
  end;
  return;
end;

function string 255 OrdDownPay(record VIVc VIp,LongInt ordnr,var val sum,val perc,var record POVc POr,Integer useRemainPerc)
begin
  string 255 res;
  record PODownPayBlock DPb;
  record INVc INr;
  record CUVc VEr;
  row POVc POrw;
  row VIVc VIrw;
  val t,t2,baseprice;
  val percentage;
  Integer i,rwcnt,rownr;
  string 255 tstr,vewarn;
  string 10 VATCode;
  string 5 ipcurncy;
  record RoundBlock Roundb;
  record TaxMatrixVc TMr;
  val RemainPerc,price,vrebate;
  
  BlockLoad(Roundb);
  ipcurncy = VIp.CurncyCode;
  VIp.POSerNr = ordnr;
  POr.SerNr = VIp.POSerNr;  
  ReadFirstMain(POr,1,true);
  VIp.POSerNr = POr.SerNr;
//  VIp.InclVAT = POr.InclVAT;
  VIp.NoTAXonVAT = POr.NoTAXonVAT;
  if (nonblank(POr.InvoiceToCode)) then begin
    VIp.VECode = POr.InvoiceToCode;
  end else begin
    VIp.VECode = POr.VECode;
  end;
  VIVc_PasteVECode(VIp,0,true,false,vewarn);
  GetAPAcc(VIp.VECode,VIp.APAcc);
  if (nonblank(POr.VEFactoring)) then begin
    VEr.Code = POr.VEFactoring;
    if (ReadFirstMain(VEr,1,true)) then begin
      VIp.VECode = VEr.Code;
      VIp.VEName = VEr.Name;
      VIp.Addr1 = VEr.InvAddr0;
      VIp.Addr2 = VEr.InvAddr1;
      VIp.Addr3 = VEr.InvAddr2;
      VIp.InvAddr3 = VEr.InvAddr3;
      VIp.InvAddr4 = VEr.InvAddr4;
//      VIp.VECat = VEr.VECat;
      VIp.OrgVE = POr.VECode;
      VIp.PayDeal = VEr.PayDeal;
      VIp.ExportFlag = VEr.ExportFlag;
      VIp.InvCountry = VEr.CountryCode;
    end else begin
      goto L20OrdDownPay; 
    end;
  end else begin
L20OrdDownPay:;
    VIp.VECode = POr.VECode;
    VIp.VEName = POr.Addr0;
    VIp.Addr1 = POr.Addr1;
    VIp.Addr2 = POr.Addr2;
    VIp.Addr3 = POr.Addr3;
    VIp.InvAddr3 = POr.InvAddr3;
    VIp.InvAddr4 = POr.InvAddr4;
//    VIp.InvCountry = POr.InvCountry;
//    VIp.VECat = POr.VECat;
    VIp.PayDeal = POr.PayDeal;
    VIp.OrgVE = "";
    VIp.ExportFlag = POr.ExportFlag;
  end;
  VIp.BranchID = POr.BranchID;
/*  
  if (nonblank(POr.ShipAddr0)) then begin
    VIp.ShipAddr0 = POr.ShipAddr0;
  end;
  if (nonblank(POr.ShipAddr1)) then begin
    VIp.ShipAddr1 = POr.ShipAddr1;
  end;
  if (nonblank(POr.ShipAddr2)) then begin
    VIp.ShipAddr2 = POr.ShipAddr2;
  end;
  if (nonblank(POr.ShipAddr3)) then begin
    VIp.ShipAddr3 = POr.ShipAddr3;
  end;
  if (nonblank(POr.DelAddr3)) then begin
    VIp.DelAddr3 = POr.DelAddr3;
  end;
  if (nonblank(POr.DelAddr4)) then begin
    VIp.DelAddr4 = POr.DelAddr4;
  end;
  if (nonblank(POr.DelCountry)) then begin
    VIp.DelCountry = POr.DelCountry;
  end;
*/  
  VIp.Comment = POr.Comment;
  VIp.LangCode = POr.LangCode;
  VIp.Objects = POr.Objects;
  VIp.ExportFlag = POr.ExportFlag;
  VIp.SalesMan = POr.SalesMan;
  VIp.CurncyCode = POr.CurncyCode;
  VIp.PRCode = POr.PRCode;
  VIp.FrRate = POr.FrRate;
  VIp.ToRateB1 = POr.ToRateB1;
  VIp.ToRateB2 = POr.ToRateB2;
  VIp.BaseRate1 = POr.BaseRate1;
  VIp.BaseRate2 = POr.BaseRate2;
  BlockLoad(DPb);
  if (nonblank(DPb.PayDeal)) then begin
    VIp.PayDeal = DPb.PayDeal;
  end;
  VIVc_PastePayDeal(VIp);
  VIp.InvType = kInvoiceTypeDownpayment;
  rownr = 0;
  percentage = perc;
  GetAPAcc(VIp.VECode,VIp.APAcc);
  VATCode = DPb.VATCode;
  if (blank(VATCode)) then begin
    GetItemVATCode(DPb.ArtCode,VIp.ExportFlag,VATCode,true);
  end;
  if (blank(VATCode)) then begin 
    VATCode = VIp.VEVatCode; 
  end;
  if (DPb.DetailsOnVI==0) then begin
    rwcnt = MatRowCnt(POr);
    VATCode = DPb.VATCode;
    if (blank(VATCode)) then begin
      GetItemVATCode(DPb.ArtCode,VIp.ExportFlag,VATCode,true);
    end;
    if (blank(VATCode)) then begin VATCode = VIp.VEVatCode; end;
    INr.Code = DPb.ArtCode;
    ReadFirstMain(INr,1,true);
    baseprice = INr.InPrice + INr.ExtraCost;
    if (sum==0) then begin
      if (percentage==0) then begin
        percentage = DPb.Percentage;
//        GetCustCatPerc(POr.VECode,percentage);
      end;
      switch (DPb.CalcMode) begin
        case 2:
          if (POr.InclVAT!=0) then begin
            t2 = POr.Sum4 - POr.Sum3;
            DownPayMul(t2,percentage,t);
//            DownPayMul(baseprice,percentage,baseprice);
          end else begin
            DownPayMul(POr.Sum1,percentage,t);
//            DownPayMul(baseprice,percentage,baseprice);
          end;
        case 1:
          if (POr.InclVAT!=0) then begin
            t2 = POr.Sum4 - POr.Sum3;
            DownPayMul(t2,percentage,t);
//            DownPayMul(baseprice,percentage,baseprice);
          end else begin
            DownPayMul(POr.Sum1,percentage,t);
//            DownPayMul(baseprice,percentage,baseprice);
          end;
        otherwise
          DownPayMul(POr.Sum4,percentage,t);
//          DownPayMul(baseprice,percentage,baseprice);
      end;
    end else begin
      UnpackFieldMatrix(POr,"TaxMatrix",TMr);
      FindSalesExVat(TMr,VATCode,sum,1,0,t);
    end;
    ClearRow(VIp,VIrw,kInvoiceRowTypeDownpayment);
    VIrw.stp = kInvoiceRowTypeDownpayment;

    if (nonblank(DPb.TextA)) then begin
      VIrw.Comment = DPb.TextA;
    end else begin
      if (GetItemNameStr(1,tstr,POr.LangCode,INr.Name,INr.Code)) then begin end;
      VIrw.Comment = tstr;
    end;
    VIrw.Comment = VIrw.Comment & " ";
    VIrw.Comment = VIrw.Comment & POr.SerNr;
    t = t - POr.DownPaySent;
    if (t<0) then begin t = 0; end;
    VIrw.Sum = t;
    VIrw.Item = DPb.ArtCode;
    GetItemSalesAcc(DPb.ArtCode,VIp.ExportFlag,VIrw.AccNumber);
    VIrw.VATCode = VATCode;
    VIrw.Objects = "";
//    VIrw.BasePrice = baseprice;
    t2 = MulRateToBase1(VIp.CurncyCode,VIrw.Sum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);  
    UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
    FindSalesExVat(TMr,VIrw.VATCode,t2,1,VIp.NoTAXonVAT,t2);
    VIrw.TaxTemplateCode = FillupTaxMatrix(1,VIp.BranchID,VIp.VECode,"","",INr.TaxTemplateCode,TMr);
    PackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
    RowCalculateTaxMatrix_VIVc(VIp,rownr,VIrw,0);
    MatRowPut(VIp,rownr,VIrw);
  end else begin
    if (percentage==0) then begin
      percentage = DPb.Percentage;
    end;
    if (sum!=0) then begin
      percentage = (sum/POr.Sum4)*100;
    end;
    rwcnt = MatRowCnt(POr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POr,i,POrw);
      if (POrw.stp==10) then begin
        goto LOrdDownPay;
      end;
      if (POrw.stp==kInvoiceRowTypeNormal) then begin
        price = blankval;
//        vrebate = POrw.vRebate;
        INr.Code = POrw.ArtCode;
        ReadFirstMain(INr,1,true);
//        baseprice = INr.InPrice + INr.ExtraCost;
        switch (DPb.CalcMode) begin
          case 1:
            if (POr.InclVAT!=0) then begin
              t2 = POrw.Sum - FindVAT(POrw.VATCode,POrw.Sum,POr.InclVAT,POr.NoTAXonVAT);
              DownPayMul(t2,percentage,t);
//              DownPayMul(baseprice,percentage,baseprice);
            end else begin
              DownPayMul(POrw.Sum,percentage,t);
//              DownPayMul(baseprice,percentage,baseprice);
            end;
          otherwise
            switch (Roundb.VATCalcWay) begin
              case 0:
                if (POr.InclVAT!=0) then begin
  //                t2 = POrw.Sum + FindVAT(POrw.VATCode,POrw.Sum,POr.InclVAT,POr.NoTAXonVAT);//wierd stuff, it is already including VAT
                  t2 = POrw.Sum;
                  DownPayMul(t2,percentage,t);
//                  DownPayMul(baseprice,percentage,baseprice);
                end else begin
//                  t2 = POrw.Sum + FindVAT(POrw.VATCode,POrw.Sum,POr.InclVAT,POr.NoTAXonVAT); vat will be calculated per vat code
                  t2 = POrw.Sum;
                  DownPayMul(t2,percentage,t);
//                  DownPayMul(baseprice,percentage,baseprice);
                end;
              case 1:
                if (POr.InclVAT!=0) then begin
                  t2 = POrw.Sum;
                  DownPayMul(t2,percentage,t);
//                  DownPayMul(baseprice,percentage,baseprice);
                end else begin
                  t2 = POrw.Sum + FindVAT(POrw.VATCode,POrw.Sum,POr.InclVAT,POr.NoTAXonVAT);
                  DownPayMul(t2,percentage,t);
//                  DownPayMul(baseprice,percentage,baseprice);
                end;
            end;
        end;
        DownPayMul(POrw.Price,percentage,price);
        
        if (t!=0) then begin
          ClearRow(VIp,VIrw,kInvoiceRowTypeDownpayment);
          VIrw.Sum = t;
          VIrw.Item = POrw.ArtCode;
          VIrw.qty = POrw.Quant;
          VIrw.Comment = POrw.Spec;
          VIrw.AccNumber = POrw.CostAcc;
//          GetItemSalesAccFromOR(POr,tstr);
/*
          if (nonblank(tstr)) then begin
            VIrw.AccNumber = tstr;
          end else begin
            GetItemSalesAcc(DPb.ArtCode,VIp.ExportFlag,tstr);
            if (nonblank(tstr)) then begin
              VIrw.SalesAcc = tstr;
            end;
          end;
*/          
          VIrw.VATCode = DPb.VATCode;
          if (blank(VIrw.VATCode)) then begin
            VIrw.VATCode = POrw.VATCode;
          end;
          VIrw.OrdRow = i;
//          VIrw.Price = price;
//          VIrw.vRebate = vrebate;
//          VIrw.BasePrice = baseprice;
          t2 = MulRateToBase1(VIp.CurncyCode,VIrw.Sum,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);  
          UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
          FindSalesExVat(TMr,VIrw.VATCode,t2,1,VIp.NoTAXonVAT,t2);
          VIrw.TaxTemplateCode = POrw.TaxTemplateCode;
          UnpackRowFieldMatrix(POrw,"TaxMatrix",TMr);
          PackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
          RowCalculateTaxMatrix_VIVc(VIp,rownr,VIrw,0);
          MatRowPut(VIp,rownr,VIrw);
          rownr = rownr + 1;
        end;
      end;
    end;
LOrdDownPay:;
  end;
  VISumup(VIp,t);
  if ((VIp.PayVal+POr.DownPaySent)>POr.Sum4) then begin
    res = USetStr(20406);
    res = res & POr.Sum4 - POr.DownPaySent;
    res = res & ". ";
    res = res & USetStr(20412);
    if ((useRemainPerc == 1) and (POr.DownPaySent < POr.Sum4)) then begin 
      RemainPerc = ((POr.Sum4 - POr.DownPaySent)/POr.Sum4)*100;
      res = OrdDownPay(VIp,ordnr,sum,RemainPerc,POr,0);
    end;  
  end;

  OrdDownPay = res;
  return;
end;

global
updating function Integer RecordAction_POOrdDownPay(LongInt ordnr,val percentage,val prepaidsum,var record VIVc VIp,var string errstr,integer userRemainPerc)
begin
  Integer res;
  LongInt newnr;
  record SRBlock SRb;
  string 255 tstr;
  val temp;
  record POVc POr;
  
  res = -1;
  RecordNew(VIp);
  VIp.SerNr = -1;
  VIp.POSerNr = ordnr;
  if (VIp.SerNr==-1) then begin
    BlockLoad(SRb);
    newnr = GetCurUserLastNr("VIVc");
    if (newnr==-1) then begin
      newnr = SRb.LastPurNr;
    end;
    VIp.SerNr = NextSerNr("VIVc",VIp.TransDate,newnr,false,"");
    if (VIp.SerNr==-1) then begin
      errstr = USetStr(1747);
      goto LRecordAction_POOrdDownPay;
    end;
  end;
  errstr = OrdDownPay(VIp,ordnr,prepaidsum,percentage,POr,userRemainPerc);
  if (blank(errstr)) then begin
    if ((MatRowCnt(VIp)>0) and (VIp.SerNr!=-1)) then begin
      VIDDefault(-1,"PayVal",VIp);
      if (RecordInsert(VIp,false)) then begin
        CreateRecordLink(VIp,CurrentCompany,POr,CurrentCompany);
        CreateRecordLink(POr,CurrentCompany,VIp,CurrentCompany);
        res = 1;
      end;
    end;
  end;
LRecordAction_POOrdDownPay:;
  RecordAction_POOrdDownPay = res;
  return;
end;
