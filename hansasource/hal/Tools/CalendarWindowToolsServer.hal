/*cleararea, disposearea,nilarea*/

external function Boolean ToDoForRecurringActivityExists(Date,Date,string,record ActVc);
external updating procedure DeleteActivity(var record ActVc,Boolean);
external updating procedure ApproveActivity(var record ActVc,Boolean);
external function string 255 GetGlobalUserMainCompanies(string);
external function LongInt ActPos(Time);
external function LongInt ActLen(Time,Time);
external function Boolean FilterSymbs(Integer,LongInt);
external function LongInt ResLen(Date,Date,Time,LongInt,LongInt,Integer);
external function Boolean GetGlobalUserMainCompany(string,var string);
external function Boolean FindTheUser(var record UserVc);
external function Integer IsRedDay(Boolean,record BHollVc,Integer,Date);
external function Integer GetWeekNr(Date,string,var LongInt);
external procedure ExtractObj(string,var Integer,var string);
external function LongInt DateDiff(Date,Date);
external function Integer CheckTodoAcess(string,record ActVc,string);

global
procedure CalcResMonDays(Integer calsystem,LongInt maxdays,Date sdp,Area ddhp)
BEGIN
  LongInt i;
  Date d;
  Integer redf;
  Integer dayid;
  Integer weeknr;
  LongInt maxweek;
  LongInt frd;
  record CYBlock CYb;
  record BHollVc BHollr;
  Boolean bhollf;
  
  BlockLoad(CYb);
  BHollr.CountryCode = CYb.CountryCode;
  bhollf = ReadFirstMain(BHollr,1,true);
  d = sdp;
  frd = 1;
  maxweek = 53;
  for (i=frd;i<=maxdays;i=i+1) begin
    dayid = GetDateId(d);
    AddByteToArea(dayid,ddhp);
    redf = IsRedDay(bhollf,BHollr,calsystem,d);
    AddByteToArea(redf,ddhp);
    weeknr = GetWeekNr(d,"",maxweek); //%% could be done less often
    AddByteToArea(weeknr,ddhp);
    d = AddDay(d,1);
  end;
  RETURN;
END;

function LongInt Do_ActsInDay1(string uscode,var Date dp,LongInt maxdays,Area adhp,Area thp,Area ppadhp,
                               Boolean textf,LongInt aptp,LongInt atp,LongInt maxuser,Integer dmode,string curuser)
begin
  LongInt uscnt;
  record ActVc Actr;
  Boolean TrHs;
  string 255 ckey,tstr,user;
  Boolean testf;
  LongInt textcnt;
  LongInt adcnt;
  LongInt ppadcnt;
  LongInt adoff;
  LongInt ppadoff;
  record ActTypeVc atr;
  record ActTypeGrVc atgr;
  LongInt daycnt;
  LongInt tv; 
  LongInt tp;
  LongInt ptp;
  Integer pos;
  Integer lenclass;
  LongInt startpos;
  LongInt endpos;
  LongInt actleng;
  Date blankd;
  LongInt adractsernr;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc 4 - PRVc, 5 - ProOperationVc
  LongInt adrStartPos;
  LongInt adractlen;
  LongInt adrcolnr;
  string 20 compcode;
  Integer oldcomp;
  LongInt compno,comppos;
  string 255 maincrmcompanies;
  
  oldcomp = CurrentCompany;  
  uscnt = 0;
  textcnt = 0;
  adcnt = 0;
  ppadcnt = 0;
  ppadoff = 0;
  daycnt = 0;
  tp = 1;
  ptp = 0;
  
LDo_ActsInDay1BEGIN:;
  if (SetCompany(oldcomp,false)) then begin
  end;
  pos = 0;
  uscnt = 0;
  tp = 1;
  ptp = 0;
  ExtractObj(uscode,pos,user);
  if (blank(user)) then begin goto LDo_ActsInDay1; end;
  maincrmcompanies = GetGlobalUserMainCompanies(user);
  comppos = 0;
  GetNextSubstring(maincrmcompanies,comppos,",",compcode);
L22Do_ActsInDay1:;
  if (nonblank(compcode)) then begin
    if (SetCompanyCode(compcode,false)) then begin
     end;
  end;
/*  
  if (GetGlobalUserMainCompany(user,compcode)) then begin
    if (nonblank(compcode)) then begin
      if (SetCompanyCode(compcode,false)) then begin
      end;
    end;
  end;
*/  
  compno = CurrentCompany;
  
  adcnt = 0;
  ppadcnt = 0;

//    AddLongToArea(textcnt,thp);
    tv = tp;
    AddLongToArea(tv,adhp);
    adoff = GetAreaLength(adhp);
    AddLongToArea(adcnt,adhp);

    tv = ptp;
    AddLongToArea(tv,ppadhp);

    ppadoff = GetAreaLength(ppadhp);
    AddLongToArea(ppadcnt,ppadhp);
  
  lenclass = 4;
L33Do_ActsInDay1:;
  ResetLoop(Actr);
  ckey = "CalUserMain:";
  ckey = ckey & user;

  Actr.TodoFlag = 0;
  Actr.TransDate = dp;
  switch (lenclass) begin
    case 4: Actr.TransDate = blankd;
    case 3: Actr.TransDate = AddDay(Actr.TransDate,-366);
    case 2: Actr.TransDate = AddDay(Actr.TransDate,-31);
    case 1: Actr.TransDate = AddDay(Actr.TransDate,-7);
    case 0: ;
  end;
  Actr.LengthClass = lenclass;
  TrHs = true;
  while (LoopKey(ckey,Actr,3,TrHs)) begin
    if (Actr.TodoFlag!=0) then begin TrHs = false; end;
    if (Actr.LengthClass!=lenclass) then begin TrHs = false; end;
    if (Actr.TransDate>dp) then begin TrHs = false; end;
//*    if (DateInRange(&Actr.TransDate,dp,dp)==false) then begin TrHs = false; end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (nonblankdate(Actr.EndDate)) then begin
        if (DateInRange(dp,Actr.TransDate,Actr.EndDate)==false) then begin testf = false; end;
      end else begin
        if (dp!=Actr.TransDate) then begin testf = false; end;
      end;
      if (Actr.CalTimeFlag==0) then begin testf = false; end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (Actr.PrivateFlag!=0) then begin
        tstr = curuser;
        if (SetInSet(tstr,Actr.MainPersons)==false) then begin testf = false; end;
      end;  
      if (testf) then begin
        testf = CheckTodoAcess(uscode,Actr,curuser)!=kAccessLevelNone;
      end;
      if (testf) then begin
        adrcolnr = 1;
        adrvcnr = kResourceActVc;
        atr.Code = Actr.ActType;
        if (ReadFirstMain(atr,1,true)) then begin
          atgr.Code = atr.ActTypeGr;
          if (ReadFirstMain(atgr,1,true)) then begin
            adrcolnr = atgr.CalColNr;
          end;
        end;
        adractsernr = Actr.SerNr;
        if (dp==Actr.TransDate) then begin
          startpos = ActPos(Actr.StartTime);
        end else begin
          startpos = 0;
        end;
        if ((dp==Actr.EndDate) or (blankdate(Actr.EndDate))) then begin
          if (GetHour(Actr.EndTime)!=-1) then begin
            actleng = ActPos(Actr.EndTime)-startpos;
          end else begin
            actleng = ActLen(Actr.StartTime,Actr.CostTime);
          end;
        end else begin
          actleng = 24.00*17.00-startpos;
        end;
        adrStartPos = startpos;
        adractlen = actleng;
        if (dmode<2) then begin
          startpos = ResLen(dp,Actr.TransDate,Actr.StartTime,maxdays,0,dmode);
          endpos = ResLen(dp,Actr.EndDate,Actr.EndTime,maxdays,1,dmode);          
          adrStartPos = startpos;
          adractlen = actleng;
        end;
        if (Actr.CalTimeFlag==1) then begin
          AddLongToArea(adractsernr,adhp);
          AddLongToArea(adrvcnr,adhp);
          AddLongToArea(adrStartPos,adhp);
          AddLongToArea(adractlen,adhp);
          AddLongToArea(adrcolnr,adhp);
          AddLongToArea(compno,adhp);
          AddStringToArea(Actr.Comment,adhp);
          adcnt = adcnt + 1;
        end else begin
          AddLongToArea(adractsernr,ppadhp);
          AddLongToArea(adrvcnr,ppadhp);
          AddLongToArea(adrStartPos,ppadhp);
          AddLongToArea(adractlen,ppadhp);
          AddLongToArea(adrcolnr,ppadhp);
          AddLongToArea(compno,ppadhp);
          AddStringToArea(Actr.Comment,ppadhp);
          ppadcnt = ppadcnt + 1;
        end;
        if (textf) then begin
          AddLongToArea(adrStartPos,thp);
          AddStringToArea(Actr.Comment,thp);
          textcnt = textcnt + 1;
        end;
      end;
    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto L33Do_ActsInDay1; end;  
  PutLongInArea(textcnt,thp,0);    
  PutLongInArea(adcnt,adhp,adoff);
  PutLongInArea(ppadcnt,ppadhp,ppadoff);
  
  uscnt = uscnt + 1;
  if (uscnt>=maxuser) then begin goto L77Do_ActsInDay1; end;

  GetNextSubstring(maincrmcompanies,comppos,",",compcode);
  if (nonblank(compcode)) then begin
    goto L22Do_ActsInDay1;
  end;

  ExtractObj(uscode,pos,user);
  if (nonblank(user)) then begin
    ptp = ptp + 2;
    tp = tp + 2;
    comppos = 0;
    maincrmcompanies = GetGlobalUserMainCompanies(user);
    GetNextSubstring(maincrmcompanies,comppos,",",compcode);
    goto L22Do_ActsInDay1;
  end;
L77Do_ActsInDay1:;  
  daycnt = daycnt + 1;
  dp = AddDay(dp,1);
  if (daycnt<maxdays) then begin
    goto LDo_ActsInDay1BEGIN;
  end;
LDo_ActsInDay1:;
  ResetCompany(oldcomp);
  Do_ActsInDay1 = uscnt;
  return;
end;

global
procedure AddActToThp(record ActVc Actp,Area thp)
BEGIN
//when changing, change SortToDo pls
  string 255 tstr;
  LongInt i,rwcnt;
  row ActVc Actrw;
  LongInt compno;
  Boolean newdrawingf;
  
  if (GuiType==kGuiiPhone or CurClientType==kClientiPhone) then begin
    newdrawingf = true;
  end;
  
  if (GuiType==kGuiCocoa or CurClientType==kClientOSXCocoa) then begin
    newdrawingf = true;
  end;
  
  if (GuiType==kGuiAndroid or CurClientType==kClientAndroid) then begin
    newdrawingf = true;
  end;

  if (true) then begin
    compno = CurrentCompany;
    AddLongToArea(0,thp);    
    AddLongToArea(Actp.SerNr,thp);    
    AddLongToArea(Actp.PrioLevel,thp);    
    AddLongToArea(Actp.SymbNr,thp);    
    AddLongToArea(Actp.OKFlag,thp);    
    AddLongToArea(0,thp);    
    
//    if (blank(Actp.Supervisor)) and blank(Actp.Contact) and blank(Actp.CUName) then begin
    if (blank(Actp.Supervisor)) and blank(Actp.PRCode) and blank(Actp.CUName) then begin
      tstr = Actp.Comment;
    end else begin
      if (newdrawingf) then begin
        tstr = Actp.Comment;
      end else begin
        tstr = Left(Actp.Comment,41);
        if (len(Actp.Comment)>41) then begin
          tstr = tstr & "...";
        end;
      end;
    end;
    AddStringToArea(tstr,thp);
//    tstr = Actp.Contact;    
//    if (blank(tstr)) then begin tstr = Actp.CUName; end;
    if (newdrawingf) then begin
      tstr = Actp.CUName;
    end else begin
      tstr = Left(Actp.CUName,18); // This is better, you want to know what customer to call, the name doesn't say anything...
      if (len(Actp.CUName)>18) then begin
        tstr = tstr & "...";
      end;
    end;
    AddStringToArea(tstr,thp);
    AddStringToArea(Actp.Phone,thp);    
    AddDateToArea(Actp.TransDate,thp);    
    AddStringToArea(Actp.Supervisor,thp);
    AddStringToArea(Actp.PRCode,thp);
    AddLongToArea(compno,thp);    
    AddStringToArea(Actp.ActType,thp);
    
    AddTimeToArea(Actp.PlannedTime,thp);    
    AddLongToArea(Actp.TodoFlag,thp);    
    rwcnt = MatRowCnt(Actp);
    AddLongToArea(rwcnt,thp);    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Actp,i,Actrw);
      AddStringToArea(Actrw.TextCode,thp);    
      AddStringToArea(Actrw.Text,thp);    
    end;
  end;
  return;
end;

procedure AddActToTtdhp(record ActVc Actp,Area thp)
begin
  string 255 tstr;
  LongInt i,rwcnt;
  row ActVc Actrw;
  LongInt compno;
  
  if (true) then begin
    compno = CurrentCompany;
    AddLongToArea(Actp.SerNr,thp);    
    AddLongToArea(Actp.SymbNr,thp);    
    AddLongToArea(Actp.OKFlag,thp);    
    AddLongToArea(0,thp);    // triang    
    tstr = Left(Actp.Comment,30);
    AddStringToArea(tstr,thp);    
    tstr = Actp.StartTime;
    tstr = Left(tstr,5);
    AddStringToArea(tstr,thp);     
    tstr = Actp.Contact;
    if (blank(tstr)) then begin tstr = Actp.CUName; end;
    AddStringToArea(tstr,thp);     
    AddStringToArea(Actp.Phone,thp);
    AddLongToArea(compno,thp);
    rwcnt = MatRowCnt(Actp);
    AddLongToArea(rwcnt,thp);    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Actp,i,Actrw);
      AddStringToArea(Actrw.TextCode,thp);    
      AddStringToArea(Actrw.Text,thp);    
    end;
  end;
  return;
end;

global
function LongInt TODODo_TimedToDos(string uscode,string acttypes,string custcode,string prcode,string actclass,string prios,Integer incdone,Integer future,Integer symbnr,Integer persons,Date sdp,Date edp,
                               Area thp,Integer rmod,Integer todoflag,string curuser)
begin
  LongInt textcnt,res;
  record ActVc Actr;
  record ActTypeVc ActTyper;
  Boolean TrHs;
  string 255 ckey,tstr,user;
  Boolean testf; 
  LongInt tp;
  LongInt ptp;
  Integer pos;
  LongInt ddiff;
  Date blankd;
  string 20 compcode;
  Integer oldcomp,segs;
  LongInt frprio,toprio;
  
  frprio = FirstInRange(prios,10);
  toprio = LastInRange(prios,10);
  oldcomp = CurrentCompany;  
  textcnt = 0; 
  res = 0;
  tp = 1;
  ptp = 0;
  if (true==false) then begin goto LTODODo_TimedToDos; end; // When will this be true :-)
  pos = 0;
  tp = 1;
  ptp = 0;
  ExtractObj(uscode,pos,user);
  if (GetAreaLength(thp)<4) then begin    
    AddLongToArea(textcnt,thp);    
  end else begin
    textcnt = GetLongFromArea(thp,0);
  end;  
  if ((blank(user)) and (blank(acttypes)) and (blank(custcode))) then begin goto L88TODODo_TimedToDos; end;
  if (GetGlobalUserMainCompany(user,compcode)) then begin
    if (nonblank(compcode)) then begin
      if (SetCompanyCode(compcode,false)) then begin
      end;
    end;
  end;
  if (incdone==0) then begin
    ckey = "ActUserMain:" & user;
  end else begin
    ckey = "UserMain:" & user;
  end;
  segs = 2;
  if (todoflag==kTodoFlagRecurring) then begin
    segs = 1;
  end;
  Actr.TodoFlag = todoflag;
  Actr.TransDate = sdp;
  TrHs = true;  
  while (LoopKey(ckey,Actr,segs,TrHs)) begin
    if (Actr.TodoFlag!=todoflag) then begin TrHs = false; end;    
    if (todoflag!=kTodoFlagRecurring and Actr.TodoFlag!=kTodoFlagProject) then begin
      if (DateInRange(Actr.TransDate,sdp,edp)==false) then begin TrHs = false; end;
    end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (todoflag==kTodoFlagRecurring) then begin
        switch (Actr.RecurringType) begin
          case kRecurringTypeDaily:
            testf = ToDoForRecurringActivityExists(sdp,edp,uscode,Actr)==false;
          otherwise
            testf = false;
        end;
      end;
      if (nonblank(acttypes)) then begin
        if (SetInSet(Actr.ActType,acttypes)==false) then begin testf = false; end;
      end;
      if (nonblank(actclass)) then begin
        ActTyper.Code = Actr.ActType;
        ReadFirstMain(ActTyper,1,true);
        if (actclass!=ActTyper.ActTypeGr) then begin testf = false; end;
      end;
      if (nonblank(custcode)) then begin
        if (custcode!=Actr.CUCode) then begin testf = false; end;
      end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      switch (future) begin
        case 0:
          if (Actr.OKFlag==0) then begin
            if (incdone==0) then begin
              if (Actr.TransDate>edp) then begin testf = false; end;
            end else begin
              if (Actr.EndDate>edp) then begin testf = false; end;
            end;
          end;
        case 1:
          if (Actr.OKFlag==0) then begin
            if (incdone==0) then begin
              ddiff = DateDiff(Actr.TransDate,edp);
            end else begin
              ddiff = DateDiff(Actr.EndDate,edp);
            end;
            if ((ddiff<1) or (ddiff>7)) then begin testf = false; end;
          end;
        case 3:
          if (Actr.OKFlag==0) then begin
            if (incdone==0) then begin
              ddiff = DateDiff(Actr.TransDate,edp);
            end else begin
              ddiff = DateDiff(Actr.EndDate,edp);
            end;
            if ((ddiff<1) or (ddiff>31)) then begin testf = false; end;
          end;
        case 2: // All
          ;
      end;
      if (incdone==0) then begin
        if (Actr.OKFlag!=0) then begin testf = false; end;
      end else begin
//        if (Actr.OKFlag!=0) then
//          if (DateComp(&Actr.TransDate,ddp)<0) then begin testf = false; end;
      end;
      if (Actr.PrivateFlag!=0) then begin
        tstr = curuser;
        if (SetInSet(tstr,Actr.MainPersons)==false) then begin testf = false; end;
      end;
      if (nonblank(prcode)) then begin
        if (Actr.PRCode!=prcode) then begin testf = false; end;
      end;
      if (testf) then begin    
        if (FilterSymbs(symbnr,Actr.SymbNr)==false) then begin testf = false; end;
      end;
      if (persons==0) then begin
        if (SetInSet(user,Actr.MainPersons)==false) then begin testf = false; end;
      end;
      if (persons==1) then begin
        if (SetInSet(user,Actr.CCPersons)==false) then begin testf = false; end;
      end;
      if (nonblank(prios)) then begin
        if (Actr.PrioLevel<frprio) then begin testf = false; end;
        if (Actr.PrioLevel>toprio) then begin testf = false; end;
      end;
      if (testf) then begin
        testf = CheckTodoAcess(uscode,Actr,curuser)!=kAccessLevelNone;
      end;
      if (testf) then begin  
        switch (rmod) begin
          case 0: AddActToTtdhp(Actr,thp);
          case 1: AddActToThp(Actr,thp);
        end;
        res = res + 1;
      end;
      if (textcnt>=300) then begin
        RecordNew(Actr);
        Actr.Comment = "ATTENTION! Please make a selection that reduces the number of activities";
        switch (rmod) begin
          case 0: AddActToTtdhp(Actr,thp);
          case 1: AddActToThp(Actr,thp);
        end;
        textcnt = textcnt + 1;
        TrHs = false;
      end;
    end;
  end;
  textcnt = textcnt + res;
  PutLongInArea(textcnt,thp,0);
L88TODODo_TimedToDos:;
LTODODo_TimedToDos:;
  ResetCompany(oldcomp);
  TODODo_TimedToDos = res;
  RETURN;
END;

global
procedure FindCalDispGroup(var string str)
BEGIN
  Integer rwcnt,i;
  record CalDispGroupBlock CalDispGroupRec;
  row CalDispGroupBlock CalDispGrouprw;
  
  BlockLoad(CalDispGroupRec);
  rwcnt = MatRowCnt(CalDispGroupRec);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CalDispGroupRec,i,CalDispGrouprw);
    if (str==CalDispGrouprw.Code) then begin
      str = CalDispGrouprw.DefStr;
      goto LFindCalDispGroup;
    end;
  end;
LFindCalDispGroup:;  
  RETURN;
END;

function LongInt Do_BannersInMonth3(string uscode,Date dp,LongInt amaxdays,Area adhp,
                                    Integer acttype,Integer dmode,string curuser)
BEGIN
  LongInt uscnt;
  record ActVc Actr;
  Boolean TrHs;
  string 255 ckey,tstr,user;
  Boolean testf;
  LongInt adractsernr;
  LongInt adrvcnr;  // 0 - ActVc, 1 - JobVc, 2 - RentResVc, 3 - ProdOrderVc, 4 - PRVc, 5 - ProdOperationVc
  LongInt adrStartPos;
  LongInt adractlen;
  LongInt adrcolnr;
  LongInt textcnt;
  LongInt adcnt;
  LongInt ppadcnt;
  LongInt adoff;
  record ActTypeVc atr;
  record ActTypeGrVc atgr;
  Integer pos;
  Integer lenclass;
  LongInt startpos;
  LongInt endpos;
  LongInt ddif;
  LongInt colnr;
  LongInt maxdays;
  Date blankd;
  string 20 compcode;
  Integer oldcomp;
  LongInt compno;
  
  oldcomp = CurrentCompany;  
  maxdays = amaxdays;
  ppadcnt = 0;
  adcnt = 0;
  textcnt = 0;
  uscnt = 0;
  if (dmode>=2) then begin
    maxdays = (amaxdays+23.00) / 24.00;
  end;  
  pos = 0;
  uscnt = 0;
//  tp = 1;
//  ptp = 0;
  ExtractObj(uscode,pos,user);
  if (blank(user)) then begin goto LDo_BannersInMonth3; end;
  if (GetGlobalUserMainCompany(user,compcode)) then begin
    if (nonblank(compcode)) then begin
      if (SetCompanyCode(compcode,false)) then begin
      end;
    end;
  end;
  compno = CurrentCompany;
LDo_BannersInMonth3:;
  ResetLoop(Actr);
  textcnt = 0;
  adcnt = 0;
  ppadcnt = 0;
  adcnt = 0;  
  adoff = GetAreaLength(adhp);
  AddLongToArea(adcnt,adhp);  
  
  if (((dmode==1) or (dmode==3)) and (acttype==1)) then begin
    tstr = "";
    AddStringToArea(tstr,adhp);
  end else begin
    AddStringToArea(uscode,adhp);
  end;
  lenclass = 4;
LDo_BannersInMonth3:;
  ckey = "CalUserMain:" & user;
  Actr.TodoFlag = 3;
  Actr.TransDate = dp;
  switch (lenclass) begin
    case 4: Actr.TransDate = blankd; 
    case 3: Actr.TransDate = AddDay(Actr.TransDate,-366); 
    case 2: Actr.TransDate = AddDay(Actr.TransDate,-31); 
    case 1: Actr.TransDate = AddDay(Actr.TransDate,-7); 
    case 0: ;
  end;
  Actr.LengthClass = lenclass;
  TrHs = true;
  while (LoopKey(ckey,Actr,3,TrHs)) begin
    if (Actr.TodoFlag!=3) then begin TrHs = false; end;
    if (Actr.LengthClass!=lenclass) then begin TrHs = false; end;
    ddif = DateDiff(Actr.TransDate,dp);
    if (ddif>=maxdays) then begin TrHs = false; end;
//    if (DateInRange(&Actr.TransDate,dp,dp)==false) then TrHs = false;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (nonblankdate(Actr.EndDate)) then begin
        if (Actr.TransDate<dp) then begin testf = false; end;
      end else begin
        ddif = DateDiff(Actr.TransDate,dp);
        if (Actr.EndDate<dp) then begin testf = false; end;
      end;
      if (Actr.CalTimeFlag==0) then begin testf = false; end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (Actr.PrivateFlag!=0) then begin
        tstr = curuser;
        if (SetInSet(tstr,Actr.MainPersons)==false) then begin testf = false; end;
      end;  
      if (testf) then begin
        testf = CheckTodoAcess(uscode,Actr,curuser)!=kAccessLevelNone;
      end;
      if (testf) then begin
        colnr = 1;
        adrcolnr = 1;
        adrvcnr = kResourceActVc;
        atr.Code = Actr.ActType;
        if (ReadFirstMain(atr,1,true)) then begin
          atgr.Code = atr.ActTypeGr;
          if (ReadFirstMain(atgr,1,true)) then begin
            colnr = atgr.CalColNr;
          end;
        end;
        adractsernr = Actr.SerNr;
        if (acttype==2) then begin
          colnr = -colnr;
        end;
        adrcolnr = colnr;
        if (nonblankdate(Actr.EndDate)) then begin Actr.EndDate = Actr.TransDate; end;
        if ((dmode==0) or (dmode==1)) then begin
          if (GetHour(Actr.StartTime)<=9) then begin 
            Actr.StartTime = AddHours(Actr.StartTime,-GetHour(Actr.StartTime)+0);
            Actr.StartTime = AddMinutes(Actr.StartTime,-GetMinute(Actr.StartTime)+0);
          end;
          if (GetHour(Actr.EndTime)>=17) then begin 
            Actr.EndTime = AddHours(Actr.EndTime,-GetHour(Actr.EndTime)+24.00);
            Actr.EndTime = AddMinutes(Actr.EndTime,-GetMinute(Actr.EndTime)+0);
          end;
        end;        
        startpos = ResLen(dp,Actr.TransDate,Actr.StartTime,amaxdays,0,dmode);
        endpos = ResLen(dp,Actr.EndDate,Actr.EndTime,amaxdays,1,dmode);
        adrStartPos = startpos;
        adractlen = endpos;
        if (Actr.CalTimeFlag==acttype) then begin
            AddLongToArea(adractsernr,adhp);
            AddLongToArea(adrvcnr,adhp);
            AddLongToArea(adrStartPos,adhp);
            AddLongToArea(adractlen,adhp);
            AddLongToArea(adrcolnr,adhp);
            AddLongToArea(compno,adhp);
            AddStringToArea(Actr.Comment,adhp);
          adcnt = adcnt + 1;
        end else begin
        end;
      end;
    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto LDo_BannersInMonth3; end;
  
  PutLongInArea(adcnt,adhp,adoff);
  uscnt = uscnt + 1;
LDo_BannersInMonth3:;
  ResetCompany(oldcomp);
  Do_BannersInMonth3 = uscnt;
  RETURN;
END;

procedure Do_BannersInMonth(string auscode,Date dp,LongInt maxdays,Integer dmode,Area banhp,string curuser)
BEGIN
  LongInt tv;
  LongInt uscnt;
  record UserVc Userr;
  string 255 user,uscode;
  Integer pos;
  
  uscnt = 0;
  
//  CalcResMonDays(maxdays,dp,ddhp);
  
//  M4DisposeHandle(banhp);
  AddLongToArea(tv,banhp);  
  uscode = auscode;
  FindCalDispGroup(uscode);  
  pos = 0;
L22Do_BannersInMonth:;
  ExtractObj(uscode,pos,user);
  if (blank(user)) then begin goto L77Do_BannersInMonth; end;
  Userr.Code = user;
  if (FindTheUser(Userr)) then begin
    uscnt = uscnt + Do_BannersInMonth3(auscode,dp,maxdays,banhp,1,dmode,curuser);
//##    goto L22Do_BannersInMonth;
  end;
L77Do_BannersInMonth:;
  PutLongInArea(uscnt,banhp,0);
  RETURN;
END;

global
procedure ActsInDay(string uscode,Date dp,LongInt maxdays,
                    var Area adhp,var Area thp,var Area ppadhp,var Area ddhp,var Area ttdhp,var Area banhp,
                    Boolean banf,Boolean textf,LongInt aptp,LongInt atp,LongInt maxuser,Integer calsystem)
begin
  LongInt textcnt;
  LongInt adcnt;
  LongInt ppadcnt;
  LongInt daycnt;
  LongInt tv;
  LongInt uscnt;
  LongInt tp;
  LongInt ptp;
  LongInt l;
  Date sd;
  
  textcnt = 0;
  adcnt = 0;
  ppadcnt = 0;
  daycnt = 0;
  uscnt = 0;
  tp = 1;
  ptp = 0;
  tv = 0;  
  sd = dp;
  
  AddLongToArea(tv,adhp);
  AddLongToArea(tv,ppadhp);
  AddLongToArea(tv,thp);
  
  CalcResMonDays(calsystem,maxdays,dp,ddhp);
    
  uscnt = uscnt + Do_ActsInDay1(uscode,dp,maxdays,adhp,thp,ppadhp,textf,aptp,atp,maxuser,2,CurrentUser);

    PutLongInArea(uscnt,adhp,0);

    PutLongInArea(uscnt,ppadhp,0);

  if (textf) then begin
    l = TODODo_TimedToDos(uscode,"","","","","",3,0,0,2,sd,sd,ttdhp,0,kTodoFlagTimedTodo,CurrentUser);
//    l = l + TODODo_TimedToDos(uscode,"","","","","",3,0,0,2,sd,sd,ttdhp,0,kTodoFlagRecurring,CurrentUser);
  end;
  
//dp has changed here...

  if (banf) then begin
    Do_BannersInMonth(uscode,sd,maxdays,0,banhp,CurrentUser);
  end;
  return;
end;

global
updating procedure UpdateActitivyfromToDoMarkDone(Integer compno,record ActVc Actr)
begin
  record ActVc oldActr;
  Integer oldcomp;

  oldcomp = CurrentCompany;  
  if (compno!=oldcomp) then begin
    if (SetCompany(compno,false)) then begin
    end;
  end;
  RecordCopy(oldActr,Actr);
  Actr.OKFlag = 1;
  if (RecordUpdate(oldActr,Actr,true)) then begin end;
  ResetCompany(oldcomp);
  return
end;

global
updating procedure ToDoMarkDoneWsm(record RcVc RepSpec,Area thp)
begin
  LongInt i,j,nritms;
  LongInt l,sernr,okflag,todoflag,compno,oldcomp;
  LongInt off;
  Integer sz,hundreds;
  string 255 tstr;
  Boolean setokf,recurringf;
  Date td;
  Time pt;
  record ActVc Actr;
  record ActVc oldActr;
  record ActVc newActr;
  uuid bluuid;
  
  recurringf = RepSpec.flags[3]==kTodoFlagRecurring;
  off = 0;
  nritms = GetLongFromArea(thp,off); off = off + 4;
  for (i=0;i<nritms;i=i+1) begin
    l = GetLongFromArea(thp,off); off = off + 4;
    sernr = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    okflag = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    td.day = GetIntFromArea(thp,off); off = off + 2;
    td.month = GetIntFromArea(thp,off); off = off + 2;
    td.year = GetIntFromArea(thp,off); off = off + 2;
    off = off + 2;
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    compno = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    pt.hour = GetByteFromArea(thp,off); off = off + 1;
    pt.minute = GetByteFromArea(thp,off); off = off + 1;
    pt.second = GetByteFromArea(thp,off); off = off + 1;
    hundreds = GetByteFromArea(thp,off); off = off + 1;
    todoflag = GetLongFromArea(thp,off); off = off + 4;      
    l = GetLongFromArea(thp,off); off = off + 4;      
    for (j=0;j<l;j=j+1) begin
      tstr = GetPStrFromArea(thp,off);
      tstr = GetPStrFromArea(thp,off);
    end;
    if (okflag==65536) then begin
      oldcomp = CurrentCompany;  
      if (compno!=oldcomp) then begin
        if (SetCompany(compno,false)) then begin
        end;
      end;
      Actr.SerNr = sernr;
      if (ReadFirstMain(Actr,1,true)) then begin
        if (Actr.TodoFlag==kTodoFlagRecurring) then begin
          if (recurringf==false) then begin
            RecordCopy(newActr,Actr);
            newActr.UUID = bluuid;
            newActr.TodoFlag = kTodoFlagTodo;
            newActr.OKFlag = 1;
            newActr.TransDate = CurrentDate;
            newActr.EndDate = CurrentDate;
            newActr.StartTime = CurrentTime;
            newActr.EndTime = CurrentTime;
            newActr.PlannedDate = td;
            newActr.PlannedTime = pt;
            newActr.RecurringActSerNr = sernr;
            newActr.SerNr = NextSerNr("ActVc",newActr.TransDate,-1,false,"");            
            RecordStore(newActr,false);
          end;
        end else begin
//        queued.UpdateActitivyfromToDoMarkDone(compno,Actr);
        
          RecordCopy(oldActr,Actr);
          Actr.OKFlag = 1;
          if (RecordUpdate(oldActr,Actr,true)) then begin end;
        end;
      end;
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
updating procedure ToDoWApproveActivities(record RcVc RepSpec,Area thp)
begin
//ToDoWApproveActivity

  LongInt i,j,nritms;
  LongInt l,sernr,okflag,todoflag,compno,oldcomp;
  LongInt off;
  Integer sz,hundreds;
  string 255 tstr;
  Boolean setokf;
  Date td;
  record ActVc Actr;
  record ActVc oldActr;
  Time pt;
  
  off = 0;
  nritms = GetLongFromArea(thp,off); off = off + 4;
  for (i=0;i<nritms;i=i+1) begin
    l = GetLongFromArea(thp,off); off = off + 4;
    sernr = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    okflag = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    td.day = GetIntFromArea(thp,off); off = off + 2;
    td.month = GetIntFromArea(thp,off); off = off + 2;
    td.year = GetIntFromArea(thp,off); off = off + 2;
    off = off + 2;
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    compno = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    pt.hour = GetByteFromArea(thp,off); off = off + 1;
    pt.minute = GetByteFromArea(thp,off); off = off + 1;
    pt.second = GetByteFromArea(thp,off); off = off + 1;
    hundreds = GetByteFromArea(thp,off); off = off + 1;
    todoflag = GetLongFromArea(thp,off); off = off + 4;      
    l = GetLongFromArea(thp,off); off = off + 4;      
    for (j=0;j<l;j=j+1) begin
      tstr = GetPStrFromArea(thp,off);
      tstr = GetPStrFromArea(thp,off);
    end;
    if (okflag==65536) then begin
      oldcomp = CurrentCompany;  
      if (compno!=oldcomp) then begin
        if (SetCompany(compno,false)) then begin
        end;
      end;
      Actr.SerNr = sernr;
      if (ReadFirstMain(Actr,1,true)) then begin
        if (Actr.TodoFlag!=kTodoFlagApproval) then begin goto LToDoWApproveActivities; end;
        if (Actr.OKFlag!=0) then begin goto LToDoWApproveActivities; end;
        if (IsRecordLocked(Actr)) then begin goto LToDoWApproveActivities; end;
        ApproveActivity(Actr,true);
LToDoWApproveActivities:;
      end;      
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
updating procedure ToDoWDeleteActivities(record RcVc RepSpec,Area thp)
begin
//ToDoWDeleteActivity

  LongInt i,j,nritms;
  LongInt l,sernr,okflag,todoflag,compno,oldcomp;
  LongInt off;
  Integer sz,hundreds;
  string 255 tstr;
  Boolean setokf;
  Date td;
  record ActVc Actr;
  record ActVc oldActr;
  Time pt;
  
  off = 0;
  nritms = GetLongFromArea(thp,off); off = off + 4;
  for (i=0;i<nritms;i=i+1) begin
    l = GetLongFromArea(thp,off); off = off + 4;
    sernr = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    okflag = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    td.day = GetIntFromArea(thp,off); off = off + 2;
    td.month = GetIntFromArea(thp,off); off = off + 2;
    td.year = GetIntFromArea(thp,off); off = off + 2;
    off = off + 2;
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    compno = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    pt.hour = GetByteFromArea(thp,off); off = off + 1;
    pt.minute = GetByteFromArea(thp,off); off = off + 1;
    pt.second = GetByteFromArea(thp,off); off = off + 1;
    hundreds = GetByteFromArea(thp,off); off = off + 1;
    todoflag = GetLongFromArea(thp,off); off = off + 4;      
    l = GetLongFromArea(thp,off); off = off + 4;      
    for (j=0;j<l;j=j+1) begin
      tstr = GetPStrFromArea(thp,off);
      tstr = GetPStrFromArea(thp,off);
    end;

    if (okflag==65536) then begin
      oldcomp = CurrentCompany;  
      if (compno!=oldcomp) then begin
        if (SetCompany(compno,false)) then begin
        end;
      end;
      Actr.SerNr = sernr;
      if (ReadFirstMain(Actr,1,true)) then begin
        if (Actr.TodoFlag!=kTodoFlagTodo and Actr.TodoFlag!=kTodoFlagTimedTodo) then begin goto LToDoWDeleteActivities; end;
        if (Actr.OKFlag!=0) then begin goto LToDoWDeleteActivities; end;
        if (IsRecordLocked(Actr)) then begin goto LToDoWDeleteActivities; end;
        DeleteActivity(Actr,true);
LToDoWDeleteActivities:;
      end;      
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

updating procedure ToDoSetDateforSubTasks(LongInt Mother,Date newdate)
begin
  record ActVc Actr;
  record ActVc oldActr;
  Boolean found,testf;
  
  found = true;
  Actr.Mother = Mother;
  while (LoopKey("Mother",Actr,1,found)) begin
    if (Actr.Mother!=Mother) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Actr.TransDate==newdate) then begin testf = false; end;
      if (testf) then begin
        RecordCopy(oldActr,Actr);
        Actr.TransDate = newdate;
        Actr.EndDate = newdate;
        if (RecordUpdate(oldActr,Actr,true)) then begin end;
      end;
    end;
  end;
  return;
end;

global
updating procedure ToDoSetDateWsm(record RcVc RepSpec,Area thp)
begin
  LongInt i,j,nritms;
  LongInt l,sernr,okflag,todoflag,compno,oldcomp;
  LongInt off;
  Integer sz,hundreds;
  string 255 tstr;
  Boolean setokf;
  Date td;
  record ActVc Actr;
  record ActVc oldActr;
  Boolean testf;
  Time pt;

  off = 0;
  nritms = GetLongFromArea(thp,off); off = off + 4;
  for (i=0;i<nritms;i=i+1) begin
    l = GetLongFromArea(thp,off); off = off + 4;
    sernr = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;
    okflag = GetLongFromArea(thp,off); off = off + 4;
    l = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    td.day = GetIntFromArea(thp,off); off = off + 2;
    td.month = GetIntFromArea(thp,off); off = off + 2;
    td.year = GetIntFromArea(thp,off); off = off + 2;
    off = off + 2;
    tstr = GetPStrFromArea(thp,off);
    tstr = GetPStrFromArea(thp,off);
    compno = GetLongFromArea(thp,off); off = off + 4;      
    tstr = GetPStrFromArea(thp,off);
    pt.hour = GetByteFromArea(thp,off); off = off + 1;
    pt.minute = GetByteFromArea(thp,off); off = off + 1;
    pt.second = GetByteFromArea(thp,off); off = off + 1;
    hundreds = GetByteFromArea(thp,off); off = off + 1;
    todoflag = GetLongFromArea(thp,off); off = off + 4;      
    l = GetLongFromArea(thp,off); off = off + 4;      
    for (j=0;j<l;j=j+1) begin
      tstr = GetPStrFromArea(thp,off);
      tstr = GetPStrFromArea(thp,off);
    end;
    if (okflag==65536) then begin
      oldcomp = CurrentCompany;  
      if (compno!=oldcomp) then begin
        if (SetCompany(compno,false)) then begin
        end;
      end;
      Actr.SerNr = sernr;
      if (ReadFirstMain(Actr,1,true)) then begin
        testf = true;
        switch (RepSpec.ArtMode) begin
          case 0:
          case 1: if (Actr.Mother>0) then begin testf = false; end;
            if (testf) then begin
              ToDoSetDateforSubTasks(Actr.SerNr,RepSpec.d1);
            end;
          case 2: 
            if (Actr.Mother<=0) then begin testf = false; end;
            ToDoSetDateforSubTasks(Actr.SerNr,RepSpec.d1);
        end;
        if (testf) then begin
          RecordCopy(oldActr,Actr);
          Actr.TransDate = RepSpec.d1;
          Actr.EndDate = RepSpec.d1;
          if (RecordUpdate(oldActr,Actr,true)) then begin end;
        end;
      end;
      ResetCompany(oldcomp);
    end;
  end;
  return;
end;

global
function LongInt ToDoWRowCnt(record RcVc RepSpec,Area thp)
begin
  LongInt res;
  string 255 tstr;
  LongInt triangflag,i,nritms,j,rwcnt,symbnr,off,tl,todoflag;
  Boolean testf;
  Date td;
  Integer compno,sz,hundreds;
  Time pt;
  LongInt pnr;
  
  res = 0;
  off = 0;

  nritms = GetLongFromArea(thp,off); off = off + 4;
  for (i=0;i<nritms;i=i+1) begin
    testf = true;
    tl = GetLongFromArea(thp,off); off = off + 4;
    pnr = GetLongFromArea(thp,off); off = off + 4;
    tl = GetLongFromArea(thp,off); off = off + 4;
    symbnr = GetLongFromArea(thp,off); off = off + 4;
    tl = GetLongFromArea(thp,off); off = off + 4;
    triangflag = GetLongFromArea(thp,off); off = off + 4;
    
    tstr = GetPStrFromArea(thp,off);
    
    tstr = GetPStrFromArea(thp,off);
    
    tstr = GetPStrFromArea(thp,off);
    
    td.day = GetIntFromArea(thp,off); off = off + 2;
    td.month = GetIntFromArea(thp,off); off = off + 2;
    td.year = GetIntFromArea(thp,off); off = off + 2;
    off = off + 2;
    
    tstr = GetPStrFromArea(thp,off);
    
    tstr = GetPStrFromArea(thp,off);
    
    compno = GetLongFromArea(thp,off); off = off + 4;
    
    tstr = GetPStrFromArea(thp,off);
    pt.hour = GetByteFromArea(thp,off); off = off + 1;
    pt.minute = GetByteFromArea(thp,off); off = off + 1;
    pt.second = GetByteFromArea(thp,off); off = off + 1;
    hundreds = GetByteFromArea(thp,off); off = off + 1;
    todoflag = GetLongFromArea(thp,off); off = off + 4;      

    rwcnt = GetLongFromArea(thp,off); off = off + 4;
    
    if (FilterSymbs(RepSpec.flags[5],symbnr)==false) then begin testf = false; end;
    if (testf) then begin res = res + 1; end;
    
    for (j=0;j<rwcnt;j=j+1) begin
      tstr = GetPStrFromArea(thp,off);
      tstr = GetPStrFromArea(thp,off);
      if (triangflag and testf) then begin res = res + 1; end;
    end;
  end;
  
  ToDoWRowCnt = res;
  return;
end;

global
procedure ActsInDayNew(string uscode,Date adp,LongInt maxdays,LongInt maxuser,Integer calsystem,
                       var Array record ActDisp2Vc aADr)
begin
  LongInt uscnt;
  record ActVc Actr;
  string 255 ckey,tstr,user;
  Boolean TrHs,testf;
  record ActTypeVc ATr;
  record ActTypeGrVc atgr;
  LongInt daycnt;
  Integer pos;
  Integer lenclass;
  Date blankd;
  string 20 compcode;
  Integer oldcomp;
  LongInt compno,comppos;
  string 255 maincrmcompanies;
  record ActDisp2Vc ADr;
  Date dp,td;
  
  dp = adp;
//  CalcResMonDays(calsystem,maxdays,dp,ddhp);// week nrs ? bank holidays ? 

  oldcomp = CurrentCompany;  
  daycnt = 0;  

  if (SetCompany(oldcomp,false)) then begin
  end;
  pos = 0;
  ExtractObj(uscode,pos,user);
  if (blank(user)) then begin goto LActsInDayNew; end;
  maincrmcompanies = GetGlobalUserMainCompanies(user);

LActsInDayNewNextDayOrUser:;
  uscnt = 0;

  comppos = 0;
  GetNextSubstring(maincrmcompanies,comppos,",",compcode);

LActsInDayNextCompany:;

  if (nonblank(compcode)) then begin
    if (SetCompanyCode(compcode,false)) then begin
     end;
  end;

  compno = CurrentCompany;  
  lenclass = 4;
LActsInDayNewNextLenclass:;
  ResetLoop(Actr);
  ckey = "CalUserMain:";
  ckey = ckey & user;

  Actr.TodoFlag = 0;
  Actr.TransDate = dp;
  switch (lenclass) begin
    case 4: Actr.TransDate = blankd;
    case 3: Actr.TransDate = AddDay(Actr.TransDate,-366);
    case 2: Actr.TransDate = AddDay(Actr.TransDate,-31);
    case 1: Actr.TransDate = AddDay(Actr.TransDate,-7);
    case 0: ;
  end;
  Actr.LengthClass = lenclass;
  TrHs = true;
  while (LoopKey(ckey,Actr,3,TrHs)) begin
    if (Actr.TodoFlag!=0) then begin TrHs = false; end;
    if (Actr.LengthClass!=lenclass) then begin TrHs = false; end;
    if (Actr.TransDate>dp) then begin TrHs = false; end;
    testf = false;
    if (TrHs) then begin
      testf = true;
      if (nonblankdate(Actr.EndDate)) then begin
        if (DateInRange(dp,Actr.TransDate,Actr.EndDate)==false) then begin testf = false; end;
      end else begin
        if (dp!=Actr.TransDate) then begin testf = false; end;
      end;
      if (Actr.CalTimeFlag==0) then begin testf = false; end;
      if (Actr.Invalid!=0) then begin testf = false; end;
      if (Actr.PrivateFlag!=0) then begin
        tstr = CurrentUser;
        if (SetInSet(tstr,Actr.MainPersons)==false) then begin testf = false; end;
      end;  
      if (testf) then begin
        testf = CheckTodoAcess(uscode,Actr,CurrentUser)!=kAccessLevelNone;
      end;
      if (testf) then begin
        RecordClear(ADr);
        ADr.RecSerNr = Actr.SerNr;
        ADr.VcNr = kResourceActVc;
        ADr.Compnr = CurrentCompany;
        ADr.CalTimeFlag = Actr.CalTimeFlag;
        ADr.FromDate = Actr.TransDate;
        ADr.FromTime = Actr.StartTime;
        ADr.ToDate = Actr.EndDate;
        if (Actr.EndDate>Actr.TransDate) then begin
          ADr.ToTime = "23:59:59";
        end else begin
          ADr.ToTime = Actr.EndTime;
        end;
        ADr.Label = Actr.Comment; 
        switch (ADr.CalTimeFlag) begin
          case kCalTimeFlagProfile:
            ADr.Color = 5;
          otherwise
            ADr.Color = 1;
        end;
        ATr.Code = Actr.ActType;
        if (ReadFirstMain(ATr,1,true)) then begin
          ATgr.Code = ATr.ActTypeGr;
          if (ReadFirstMain(ATgr,1,true)) then begin
            ADr.Color = atgr.CalColNr;
          end;
        end;        
        ADr.Column = user;
        aADr[aADr.length] = ADr;
        if (Actr.EndDate>Actr.TransDate) then begin
          td = AddDay(Actr.TransDate,1);
          while (td<=Actr.EndDate) begin
            ADr.FromDate = td;
            ADr.FromTime = "00:00:00";
            ADr.ToDate = td;
            if (Actr.EndDate>td) then begin
              ADr.ToTime = "23:59:59";
            end else begin
              ADr.ToTime = Actr.EndTime;
            end;
            aADr[aADr.length] = ADr;
            td = AddDay(td,1);
          end;
        end;
      end;
    end;
  end;
  lenclass = lenclass - 1;
  if (lenclass>=0) then begin goto LActsInDayNewNextLenclass; end;  
  

  GetNextSubstring(maincrmcompanies,comppos,",",compcode);
  if (nonblank(compcode)) then begin
    goto LActsInDayNextCompany;
  end;

//  uscnt = uscnt + 1;
//  if (uscnt>=maxuser) then begin goto L77Do_ActsInDayNew; end;

L77Do_ActsInDayNew:;  
  daycnt = daycnt + 1;
  dp = AddDay(dp,1);
  if (daycnt<maxdays) then begin
    goto LActsInDayNewNextDayOrUser;
  end;

  ExtractObj(uscode,pos,user);
  if (nonblank(user)) then begin
    comppos = 0;
    dp = adp;
    daycnt = 0;
    maincrmcompanies = GetGlobalUserMainCompanies(user);
    goto LActsInDayNewNextDayOrUser;
  end;
  
LActsInDayNew:;

  ResetCompany(oldcomp);     
/*??
  if (textf) then begin
    l = TODODo_TimedToDos(uscode,"","","","","",3,0,0,2,sd,sd,ttdhp,0,2,CurrentUser);
  end;  
*/  
  return;
end;

global
procedure FillCalendarRemote(record RcVc RepSpec,Integer maxdays,Integer calsys,var Array record ActDisp2Vc aADr)
begin
  ActsInDayNew(RepSpec.f1,RepSpec.d1,maxdays,3,calsys,aADr);
  return;
end;

procedure InvoicesInDayNew(string custcode,Date adp,LongInt maxdays,LongInt maxuser,Integer calsystem,
                       var Array record ActDisp2Vc aADr)
begin
  LongInt uscnt;
  record IVVc IVr;
  string 255 ckey,tstr,user;
  Boolean TrHs,testf;
  Date blankd;
  record ActDisp2Vc ADr;
  Date dp,td;
  Integer daycnt;
  
  dp = adp;

LDo_InvoicesInDayNew:;
  ckey = "CustDate";
  RecordClear(IVr);
  ResetLoop(IVr);
  IVr.CustCode = custcode;
  IVr.InvDate = dp;
  TrHs = true;

  while (LoopKey(ckey,IVr,2,TrHs)) begin
    if (custcode!=IVr.CustCode or IVr.InvDate!=dp) then begin
      TrHs = false;
    end else begin
      testf = true;
      if (IVr.OKFlag!=1) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordClear(ADr);
        ADr.RecSerNr = IVr.SerNr;
        ADr.VcNr = kResourceIVVc;
        ADr.Compnr = CurrentCompany;
        //ADr.CalTimeFlag = Actr.CalTimeFlag;
        ADr.FromDate = IVr.InvDate;
        ADr.FromTime = IVr.TransTime;
        ADr.ToDate = IVr.InvDate;;
        ADr.ToTime = AddHours(IVr.TransTime,1);
        ADr.Label = IVr.InvComment;
        ADr.Color = 1;
        aADr[aADr.length] = ADr;
       end;
    end;
  end;

  daycnt = daycnt + 1;
  dp = AddDay(dp,1);
  if (daycnt<maxdays) then begin
    goto LDo_InvoicesInDayNew;
  end;

  return;
end;

global
procedure FillCalendarInvoicesRemote(record RcVc RepSpec,Integer maxdays,Integer calsys,var Array record ActDisp2Vc aADr)
begin
  InvoicesInDayNew(RepSpec.f12,RepSpec.d1,maxdays,3,calsys,aADr);
  return;
end;

procedure OrdersInDayNew(string custcode,Date adp,LongInt maxdays,LongInt maxuser,Integer calsystem,
                       var Array record ActDisp2Vc aADr)
begin
  LongInt uscnt;
  record ORVc ORr;
  string 255 ckey,tstr,user;
  Boolean TrHs,testf;
  Date blankd;
  record ActDisp2Vc ADr;
  Date dp,td;
  Integer daycnt;
  
  dp = adp;
LDo_OrdersInDayNew:;
  ckey = "PlanShipDate";
  RecordClear(ORr);
  ResetLoop(ORr);
  ORr.PlanShipDate = dp;
  TrHs = true;

  while (LoopKey(ckey,ORr,1,TrHs)) begin
    if (ORr.PlanShipDate!=dp) then begin
      TrHs = false;
    end else begin
      testf = true;
      if (ORr.OKFlag!=1) then begin
        testf = false;
      end;
      if (custcode!=ORr.CustCode) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordClear(ADr);
        ADr.RecSerNr = ORr.SerNr;
        ADr.VcNr = kResourceORVc;
        ADr.Compnr = CurrentCompany;
        //ADr.CalTimeFlag = Actr.CalTimeFlag;
        ADr.FromDate = ORr.PlanShipDate;
        ADr.FromTime = ORr.RegTime;
        ADr.ToDate = ORr.PlanShipDate;
        ADr.ToTime = AddHours(ORr.RegTime,1);
        ADr.Label = ORr.Comment;
        ADr.Color = 1;
        aADr[aADr.length] = ADr;
       end;
    end;
  end;

  daycnt = daycnt + 1;
  dp = AddDay(dp,1);
  if (daycnt<maxdays) then begin
    goto LDo_OrdersInDayNew;
  end;

  return;
end;

global
procedure FillCalendarOrdersRemote(record RcVc RepSpec,Integer maxdays,Integer calsys,var Array record ActDisp2Vc aADr)
begin
  OrdersInDayNew(RepSpec.f12,RepSpec.d1,maxdays,3,calsys,aADr);
  return;
end;

procedure DeliveriesInDayNew(string custcode,Date adp,LongInt maxdays,LongInt maxuser,Integer calsystem,
                       var Array record ActDisp2Vc aADr)
begin
  LongInt uscnt;
  record SHVc SHr;
  string 255 ckey,tstr,user;
  Boolean TrHs,testf;
  Date blankd;
  record ActDisp2Vc ADr;
  Date dp,td;
  Integer daycnt;
  
  dp = adp;

LDo_OrdersInDayNew:;
  ckey = "CustDate";
  RecordClear(SHr);
  ResetLoop(SHr);
  SHr.CustCode = custcode;
  SHr.ShipDate = dp;
  TrHs = true;

  while (LoopKey(ckey,SHr,2,TrHs)) begin
    if (custcode!=SHr.CustCode or SHr.ShipDate!=dp) then begin
      TrHs = false;
    end else begin
      testf = true;
      /* should we show only oked ones?
      if (SHr.OKFlag!=1) then begin
        testf = false;
      end;
      */
      if (testf) then begin
        RecordClear(ADr);
        ADr.RecSerNr = SHr.SerNr;
        ADr.VcNr = kResourceSHVc;
        ADr.Compnr = CurrentCompany;
        //ADr.CalTimeFlag = Actr.CalTimeFlag;
        ADr.FromDate = SHr.ShipDate;
        ADr.FromTime = SHr.RegTime;
        ADr.ToDate = SHr.ShipDate;;
        ADr.ToTime = AddHours(SHr.RegTime,1);
        ADr.Label = SHr.Comment;
        ADr.Color = 1;
        aADr[aADr.length] = ADr;
       end;
    end;
  end;

  daycnt = daycnt + 1;
  dp = AddDay(dp,1);
  if (daycnt<maxdays) then begin
    goto LDo_OrdersInDayNew;
  end;

  return;
end;

global
procedure FillCalendarDeliveriesRemote(record RcVc RepSpec,Integer maxdays,Integer calsys,var Array record ActDisp2Vc aADr)
begin
  DeliveriesInDayNew(RepSpec.f12,RepSpec.d1,maxdays,3,calsys,aADr);
  return;
end;
