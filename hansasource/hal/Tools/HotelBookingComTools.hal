external function Integer JobPasteType(var record JobVc,string);
external updating procedure DeleteReservationAccount(LongInt);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function string 20 FindJobCustomerCode(record JobVc);
external updating function Integer JobShopBask1VClassSaveRemote(record SoftFVc,var string,var Integer);
external function Integer JobPasteResUsage(var record JobVc,string);
external function Boolean PasteSourceToJob(var record JobVc,string);
external procedure JobPasteTransDate(var record JobVc);
external function Boolean JobToJobPrices(record JobVc,string,var record JobPriceVc);
external function LongInt DateDiff(Date,Date);
external procedure GetAreaFromFile(Area,string);
external procedure LogAreaToFile(string,Area);
external procedure FindCancelledReservationState(var record ReservationStatusVc);
external function Boolean PasteCUCodeToJob(var record JobVc,Integer);
external function Date DateFromString(string,string);
external function Integer JobPasteResCode(var record JobVc,string);
external function Boolean GetNextCustNr(var string);

procedure AddXmlIndent(integer level,var Area a)
begin
  Integer i;
  
  if (level>0) then begin
    for (i=0;i<level-1;i=i+1) begin
      AddTextToArea("  ",a);
    end;
  end;
  return;
end;

procedure AddXmlTagWithAttr(string tag,string attributes,string value,Integer level,var Area a)
begin
  
  AddXmlIndent(level,a);
  AddTextToArea("<",a);
  AddTextToArea(tag,a);
  if (nonblank(attributes)) then begin
    AddTextToArea(" " & attributes,a);  
  end;
  AddTextToArea(">",a);  
  if (nonblank(value)) then begin
    AddTextToArea(value,a);
  end;
  if (Right(attributes,1)!="/") then begin
    AddTextToArea("</",a);
    AddTextToArea(tag,a);
    AddTextToArea(">",a);
  end;
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure AddXmlTag(string tag,string value,Integer level,var Area a)
begin
    
  AddXmlIndent(level,a);
  AddTextToArea("<",a);
  AddTextToArea(tag,a);
  AddTextToArea(">",a);  
  AddTextToArea(value,a);
  AddTextToArea("</",a);
  AddTextToArea(tag,a);
  AddTextToArea(">",a);
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure OpenXmlTagWithAttr(string tag,string attributes,Integer level,var Area a)
begin
  
  AddXmlIndent(level,a);
  AddTextToArea("<" & tag,a);
  if (nonblank(attributes)) then begin
    AddTextToArea(" " & attributes,a);  
  end;
  AddTextToArea(">",a);  
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

procedure OpenXmlTag(string tag,Integer level,var Area a)
begin
  OpenXmlTagWithAttr(tag,"",level,a);
  return;
end;

procedure CloseXmlTag(string tag,Integer level,var Area a)
begin
  AddXmlIndent(level,a);
  AddTextToArea("</" & tag & ">",a);
  AddTextToArea(chr(13) & chr(10),a);
  return;
end;

global
procedure PullBookingComStatus()
begin
  record BookingComBlock BCb;
  Area req;
  Integer level;
     
  BlockLoad(BCb);
  if (BCb.Enable!=0) then begin
    AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>" & chr(13) & chr(10),req);

    OpenXmlTag("request",level,req);
    AddXmlTag("username",BCb.Username,level,req);
    AddXmlTag("password",BCb.Password,level,req);
    AddXmlTag("hotel_id",BCb.HotelID,level,req);
    CloseXmlTag("request",level,req);

    if (BCb.LogCommunication!=0) then begin
      LogAreaToFile("_bookcom_req.xml",req);
    end;
    SendAsyncWebRequest("secure-supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/reservations","text/xml; charset=""utf-8""","",req,"PullBookingComStatusReply",30);
  end;
  return;
end;

function string 255 FindAgentAddonItem(record AgentAddonVc AAr,string type)
begin
  row AgentAddonVc AArw;
  Integer i,rwcnt;
  string 255 res;
  
  rwcnt = MatRowCnt(AAr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(AAr,i,AArw);
    if (AArw.Type==type) then begin
      res = AArw.ArtCode;
      i = rwcnt;
    end;
  end;
  FindAgentAddonItem = res;
  return;
end;

updating procedure AddAgentAddons(record JobVc Jobr,xml x,string roompath)
begin
  record SoftFVc SFr;
  row SoftFVc SFrw;
  Integer cnt;
  string 255 addonpath,tstr;
  record AgentAddonVc AAr;
  record HotelBlock Hotelb;

  BlockLoad(Hotelb);
  AAr.CUCode = Jobr.Source;
  ReadFirstMain(AAr,1,true);
  SFr.SerNr = Jobr.SerNr;
  SFr.CustCode = FindJobCustomerCode(Jobr);
  SFr.Objects = Jobr.Objects;
  SFr.PriceList = Jobr.PriceList;
  SFr.CurncyCode = Jobr.CurncyCode;
  SFr.FrRate = Jobr.FrRate;
  SFr.ToRateB1 = Jobr.ToRateB1;
  SFr.ToRateB2 = Jobr.ToRateB2;
  SFr.BaseRate1 = Jobr.BaseRate1;
  SFr.BaseRate2 = Jobr.BaseRate2;
  SFr.InclVAT = Jobr.InclVAT;

  cnt = 0;
  addonpath = roompath & "/addons/addon[" & cnt & "]";
  while (XmlNodeExists(x,addonpath)) begin
    SFrw.ArtCode = FindAgentAddonItem(AAr,XmlGet(x,addonpath & "/type"));
    if (blank(SFrw.ArtCode)) then begin
      SFrw.ArtCode = Hotelb.GenItemToInv;
    end;
    if (nonblank(SFrw.ArtCode)) then begin
      SFrw.Price = StringToVal(XmlGet(x,addonpath & "/price_per_unit"),M4Val);
      SFrw.Sum = StringToVal(XmlGet(x,addonpath & "/totalprice"),M4Val);
//      SFrw.Quant = StringToVal(XmlGet(x,addonpath & "/nights"),M4Val)*StringToVal(XmlGet(x,addonpath & "/persons"),M4Val);
      SFrw.Quant = SFrw.Sum/SFrw.Price;
      SFrw.Spec = XmlGet(x,addonpath & "/name");
      MatRowPut(SFr,MatRowCnt(SFr),SFrw);
    end;
    cnt = cnt + 1;
    addonpath = roompath & "/addons/addon[" & cnt & "]";
  end;
  if (MatRowCnt(SFr)>0) then begin
    JobShopBask1VClassSaveRemote(SFr,tstr,cnt);
  end;
  return;
end;

updating procedure DeleteReservationBookinComNote(record JobVc Jobr)
begin
  Integer notenr;
  record NotepadVc Noter;
  record RLinkVc RLr;
  
  notenr = 1;
  while (ReadRecordLink(Jobr,notenr,Noter,RLr)) begin
    if (Noter.Classification == "BookingCom") then begin
      RecordDelete(Noter);
    end;
    notenr = notenr + 1;
  end;
  return;
end;

procedure AddBookingComComments(record NotepadVc Noter,xml x,string cupath,string roompath)
begin
  Area a;
  LongInt p,l;
  string 255 tstr;
  
  SetAreaZeroSize(a);
  XmlGetArea(x,cupath & "/remarks",a);
  l = GetAreaLength(a);
  p = 0;
  while (p<l) begin
    tstr = GetStringFromArea(a,p,1);
    AddToText(tstr,Noter);
    p = p + 1;
  end;
  AddToText(chr(10),Noter);
  AddToText(chr(10),Noter);

  SetAreaZeroSize(a);
  XmlGetArea(x,roompath & "/facilities",a);
  l = GetAreaLength(a);
  p = 0;
  while (p<l) begin
    tstr = GetStringFromArea(a,p,1);
    AddToText(tstr,Noter);
    p = p + 1;
  end;
  AddToText(chr(10),Noter);
  AddToText(chr(10),Noter);

  SetAreaZeroSize(a);
  XmlGetArea(x,roompath & "/info",a);
  l = GetAreaLength(a);
  p = 0;
  while (p<l) begin
    tstr = GetStringFromArea(a,p,1);
    AddToText(tstr,Noter);
    p = p + 1;
  end;
  AddToText(chr(10),Noter);
  AddToText(chr(10),Noter);

  SetAreaZeroSize(a);
  XmlGetArea(x,roompath & "/meal_plan",a);
  l = GetAreaLength(a);
  p = 0;
  while (p<l) begin
    tstr = GetStringFromArea(a,p,1);
    AddToText(tstr,Noter);
    p = p + 1;
  end;
  AddToText(chr(10),Noter);
  AddToText(chr(10),Noter);
  return;
end;

updating function LongInt CreateGroupReservation(record HotelBlock Hotelb,record CUVc CUr,Date regdate,string grrsvid)
begin
  record JobVc Jobr;
  
  RecordNew(Jobr);
  Jobr.Objects = "";
  Jobr.ReservationType = kReservationTypeGroup;
  Jobr.RefStr = grrsvid;
  Jobr.RegDate = regdate;
  Jobr.BookDate = Jobr.RegDate;
  Jobr.ConfDate = Jobr.RegDate;
  Jobr.TransDate = Jobr.RegDate;
  Jobr.CUCode = CUr.Code;
  PasteCUCodeToJob(Jobr,-1);
  if (nonblank(Hotelb.WebWaitPayStatus)) then begin
    Jobr.ResStatus = Hotelb.WebWaitPayStatus;
  end;
  Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,"");
  if (Jobr.SerNr) then begin
    RecordStore(Jobr,false);
  end;
  CreateGroupReservation = Jobr.SerNr;
  return;
end;
 
global
updating procedure PullBookingComStatusReply(Area reply,Area replyheader,boolean timeout)
begin
  Area r,a;
  xml x;
  string 255 rsvpath,rsvroompath,cupath,pricepath,tstr,grrsvid;
  record JobVc Jobr;
  record JobVc oldJobr;
  record ReservationStatusVc RSr;
  record CUVc rsrvCUr;
  record CUVc CUr;
  record NotepadVc Noter;
  record AgentRoomVc ARr;
  record ResTypeVc RTr;
  LongInt p,l;
  Integer rescnt,resroomcnt,cnt;
  record BookingComBlock BCb;
  record HotelBlock Hotelb;
  Date regdate;
  Boolean groupreservationf;
  LongInt grrsrv;

  BlockLoad(BCb);
  if (BCb.LogCommunication!=0) then begin
    LogAreaToFile("_bookcom_reply.xml",reply);
  end;


  if (timeout) then begin
    LogText2(39172,"SendBookingComRoomRateAvailable",kVerbosityDebugDetailed);
  end else begin
    BlockLoad(Hotelb);
//    GetAreaFromFile(r,"_bookcom_reply-sample.xml");    
//    x = ParseXmlArea(r);

    x = ParseXmlArea(reply);

    rescnt = 0;
    rsvpath = "reservations/reservation[" & rescnt & "]";

    while (XmlNodeExists(x,rsvpath)) begin
        
      switch (XmlGet(x,rsvpath & "/status")) begin
        case "new":
          cupath = rsvpath & "/customer";
          rsrvCUr.Name = XmlGet(x,cupath & "/first_name") & " " & XmlGet(x,cupath & "/last_name");
          if (ReadFirstKey("Name",rsrvCUr,1,true)==false) then begin
            rsrvCUr.Name = XmlGet(x,cupath & "/first_name") & " " & XmlGet(x,cupath & "/last_name");
            rsrvCUr.Phone = XmlGet(x,cupath & "/telephone");
            rsrvCUr.eMail = XmlGet(x,cupath & "/email");
//            rsrvCUr.RequirementRemarks = XmlGet(x,cupath & "/remarks");
            rsrvCUr.InvAddr0 = XmlGet(x,cupath & "/address");
            rsrvCUr.InvAddr1 = XmlGet(x,cupath & "/zip") & " " & XmlGet(x,cupath & "/city");
            rsrvCUr.CountryCode = XmlGet(x,cupath & "/countrycode");
            rsrvCUr.GuestType = 1;
            GetNextCustNr(rsrvCUr.Code);
            RecordStore(rsrvCUr,false);
          end;
          regdate = DateFromString(XmlGet(x,rsvpath & "/date"),"YYYY-MM-DD");
          grrsvid = XmlGet(x,rsvpath & "/id");
          
          resroomcnt = 0;
          rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
          while (XmlNodeExists(x,rsvroompath)) begin
            resroomcnt = resroomcnt + 1;
            rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
            if (resroomcnt>1) then begin
              groupreservationf = true;
            end;
          end;
          
          if (groupreservationf) then begin
            grrsrv = CreateGroupReservation(Hotelb,rsrvCUr,regdate,grrsvid);
            if (grrsrv<0) then begin
              goto LSKIPCreatingNewReservation;
            end;
          end;

          resroomcnt = 0;
          rsvroompath = rsvpath & "/room[" & resroomcnt & "]";

          while (XmlNodeExists(x,rsvroompath)) begin

            RecordNew(Noter);  
            RecordNew(Jobr);
            Jobr.Objects = "";
            Jobr.Mother = grrsrv;
            Jobr.RegDate = regdate;
            Jobr.BookDate = Jobr.RegDate;
            Jobr.ConfDate = Jobr.RegDate;
            if (nonblank(Hotelb.WebWaitPayStatus)) then begin
              Jobr.ResStatus = Hotelb.WebWaitPayStatus;
            end;

            if (groupreservationf) then begin
              Jobr.RefStr = XmlGet(x,rsvroompath & "/roomreservation_id");
            end else begin
              Jobr.RefStr = grrsvid;
            end;
            
            Jobr.AgentCommision = StringToVal(XmlGet(x,rsvroompath & "/commissionamount"),M4Val);

  //          Jobr.Comment = XmlGet(x,cupath & "/remarks");

            Jobr.ConfComment = XmlGet(x,rsvroompath & "/extra_info");
          
            Jobr.Type = XmlGet(x,rsvroompath & "/id");
            JobPasteType(Jobr,"");
          
            Jobr.Source = BCb.CUCode;
            PasteSourceToJob(Jobr,"");
          
  /*          
            Jobr.ResCode = XmlGet(x,rsvroompath & "/id");
            JobPasteResCode(Jobr,"");
          
            ARr.ResCode = Jobr.ResCode;
            ReadFirstMain(ARr,1,true);
            Jobr.Source = ARr.CUCode;
            PasteSourceToJob(Jobr,"");
            tstr = Jobr.ResUsage;
            Jobr.ResUsage = ARr.ResUsage;
  */

            Jobr.ResUsage = BCb.ResUsage;
            JobPasteResUsage(Jobr,"");
     
            cnt = 0;
            pricepath = rsvroompath & "/price[" & cnt & "]";
            while (XmlNodeExists(x,pricepath)) begin
              Jobr.AgreedPrice = Jobr.AgreedPrice + StringToVal(XmlGet(x,pricepath),M4Val);
              cnt = cnt + 1;
              pricepath = rsvroompath & "/price[" & cnt & "]";
            end;
            if (Jobr.AgreedPrice==0) then begin
              Jobr.AgreedPrice = StringToVal(XmlGet(x,rsvroompath & "/totalprice"),M4Val);
            end;
            Jobr.TransDate = DateFromString(XmlGet(x,rsvroompath & "/arrival_date"),"YYYY-MM-DD");
            Jobr.EndDate = DateFromString(XmlGet(x,rsvroompath & "/departure_date"),"YYYY-MM-DD");
            Jobr.Persons = StringToLongInt(XmlGet(x,rsvroompath & "/numberofguests"));
            Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
            Jobr.AgreedPrice = Jobr.AgreedPrice / Jobr.NrOfDays;
          
            Jobr.BookOrigin = BCb.BookOrigin;
            
            
            RecordCopy(CUr,rsrvCUr);
            CUr.Name = XmlGet(x,rsvroompath & "/guest_name");
            if (CUr.Name!=rsrvCUr.Name) then begin
              if (ReadFirstKey("Name",CUr,1,true)==false) then begin
                RecordCopy(CUr,rsrvCUr);
                CUr.Code = "";
                CUr.Name = XmlGet(x,rsvroompath & "/guest_name");
                CUr.GuestType = 1;
                GetNextCustNr(CUr.Code);
                RecordStore(CUr,false);
              end;
            end;
            
            Jobr.CUCode = CUr.Code;
            PasteCUCodeToJob(Jobr,-1);
 
            Jobr.SerNr = NextSerNr("JobVc",Jobr.TransDate,-1,false,"");            
            RecordStore(Jobr,false);

            AddBookingComComments(Noter,x,cupath,rsvroompath);            

            if (SizeTextCnt(Noter)>0) then begin
              Noter.Classification = "BookingCom";
              Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
              if (RecordStore(Noter,false)) then begin
                CreateRecordLink(Jobr,CurrentCompany,Noter,CurrentCompany);  
              end;
            end;  
            AddAgentAddons(Jobr,x,rsvroompath);

            resroomcnt = resroomcnt + 1;
            rsvroompath = rsvpath & "/room[" & resroomcnt & "]";

          end;
LSKIPCreatingNewReservation:;          
        case "modified":

          resroomcnt = 0;
          rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
          while (XmlNodeExists(x,rsvroompath)) begin
            resroomcnt = resroomcnt + 1;
            rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
            if (resroomcnt>1) then begin
              groupreservationf = true;
            end;
          end;

        
          cupath = rsvpath & "/customer";
          rsrvCUr.Name = XmlGet(x,cupath & "/first_name") & " " & XmlGet(x,cupath & "/last_name");
          if (ReadFirstKey("Name",rsrvCUr,1,true)==false) then begin
            rsrvCUr.Name = XmlGet(x,cupath & "/first_name") & " " & XmlGet(x,cupath & "/last_name");
            rsrvCUr.Phone = XmlGet(x,cupath & "/telephone");
            rsrvCUr.eMail = XmlGet(x,cupath & "/email");
            rsrvCUr.RequirementRemarks = XmlGet(x,cupath & "/remarks");
            rsrvCUr.InvAddr0 = XmlGet(x,cupath & "/address");
            rsrvCUr.InvAddr1 = XmlGet(x,cupath & "/zip") & " " & XmlGet(x,cupath & "/city");
            rsrvCUr.CountryCode = XmlGet(x,cupath & "/countrycode");
            rsrvCUr.GuestType = 1;
            GetNextCustNr(rsrvCUr.Code);
            RecordStore(rsrvCUr,false);
          end;

          resroomcnt = 0;
          rsvroompath = rsvpath & "/room[" & resroomcnt & "]";

          while (XmlNodeExists(x,rsvroompath)) begin
            if (groupreservationf) then begin
              Jobr.RefStr = XmlGet(x,rsvroompath & "/roomreservation_id");
            end else begin
              Jobr.RefStr = XmlGet(x,rsvpath & "/id");       
            end;
            if (ReadFirstKey("NormalRefStr",Jobr,1,true)) then begin
              RecordCopy(oldJobr,Jobr);

              tstr = XmlGet(x,rsvroompath & "/id");
              if (tstr!=Jobr.Type) then begin
                Jobr.Type = tstr;
                JobPasteType(Jobr,"");
              end;
  /*            
              if (tstr!=Jobr.ResCode) then begin
                Jobr.ResCode = tstr;
                JobPasteResCode(Jobr,"");
              end;

              ARr.ResCode = Jobr.ResCode;
              ReadFirstMain(ARr,1,true);
              tstr = Jobr.ResUsage;
              Jobr.ResUsage = ARr.ResUsage;
  */

              tstr = Jobr.ResUsage;
              Jobr.ResUsage = BCb.ResUsage;
              if (Jobr.ResUsage!=tstr) then begin
                JobPasteResUsage(Jobr,tstr);
              end;

              Jobr.AgentCommision = StringToVal(XmlGet(x,rsvpath & "/commissionamount"),M4Val);

              Jobr.AgreedPrice = blankval;
              cnt = 0;
              pricepath = rsvroompath & "/price[" & cnt & "]";
              while (XmlNodeExists(x,pricepath)) begin
                Jobr.AgreedPrice = Jobr.AgreedPrice + StringToVal(XmlGet(x,pricepath),M4Val);
                cnt = cnt + 1;
                pricepath = rsvroompath & "/price[" & cnt & "]";
              end;
              if (Jobr.AgreedPrice==0) then begin
                Jobr.AgreedPrice = StringToVal(XmlGet(x,rsvroompath & "/totalprice"),M4Val);
              end;
              Jobr.TransDate = DateFromString(XmlGet(x,rsvroompath & "/arrival_date"),"YYYY-MM-DD");
              Jobr.EndDate = DateFromString(XmlGet(x,rsvroompath & "/departure_date"),"YYYY-MM-DD");
              Jobr.Persons = StringToLongInt(XmlGet(x,rsvroompath & "/numberofguests"));
              Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
              Jobr.ConfDate = DateFromString(XmlGet(x,rsvroompath & "/date"),"YYYY-MM-DD");
              Jobr.AgreedPrice = Jobr.AgreedPrice / Jobr.NrOfDays;

              Jobr.BookOrigin = BCb.BookOrigin;
              
              RecordCopy(CUr,rsrvCUr);
              CUr.Name = XmlGet(x,rsvroompath & "/guest_name");
              if (CUr.Name!=rsrvCUr.Name) then begin
                if (ReadFirstKey("Name",CUr,1,true)==false) then begin
                  RecordCopy(CUr,rsrvCUr);
                  CUr.Code = "";
                  CUr.Name = XmlGet(x,rsvroompath & "/guest_name");
                  CUr.GuestType = 1;
                  GetNextCustNr(CUr.Code);
                  RecordStore(CUr,false);
                end;
              end;
              Jobr.CUCode = CUr.Code;
              if (CUr.Code!=Jobr.CUCode) then begin
                PasteCUCodeToJob(Jobr,-1);
              end;

              RecordUpdate(oldJobr,Jobr,true);
              DeleteReservationAccount(Jobr.SerNr);
              DeleteReservationBookinComNote(Jobr);
        
        
              AddAgentAddons(Jobr,x,rsvroompath);
              RecordNew(Noter);              
              AddBookingComComments(Noter,x,cupath,rsvroompath);            
              if (SizeTextCnt(Noter)>0) then begin
                Noter.Classification = "BookingCom";
                Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
                if (RecordStore(Noter,false)) then begin
                  CreateRecordLink(Jobr,CurrentCompany,Noter,CurrentCompany);  
                end;
              end;
            end;
            resroomcnt = resroomcnt + 1;
            rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
          end;
        case "cancelled":
          resroomcnt = 0;
          rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
          while (XmlNodeExists(x,rsvroompath)) begin
            resroomcnt = resroomcnt + 1;
            rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
            if (resroomcnt>1) then begin
              groupreservationf = true;
            end;
          end;
          
          resroomcnt = 0;
          rsvroompath = rsvpath & "/room[" & resroomcnt & "]";

          while (XmlNodeExists(x,rsvroompath)) begin
            if (groupreservationf) then begin
              Jobr.RefStr = XmlGet(x,rsvroompath & "/roomreservation_id");
            end else begin
              Jobr.RefStr = XmlGet(x,rsvpath & "/id");       
            end;
            if (ReadFirstKey("NormalRefStr",Jobr,1,true)) then begin
              RecordCopy(oldJobr,Jobr);
              FindCancelledReservationState(RSr);
              Jobr.ResStatus = RSr.Code;
              Jobr.ConfDate = DateFromString(XmlGet(x,rsvroompath & "/date"),"YYYY-MM-DD");
              Jobr.ResCode = "";
              RecordUpdate(oldJobr,Jobr,true);
            end;
            resroomcnt = resroomcnt + 1;
            rsvroompath = rsvpath & "/room[" & resroomcnt & "]";
          end;

/*        
          Jobr.RefStr = XmlGet(x,rsvpath & "/id");       
          if (ReadFirstKey("NormalRefStr",Jobr,1,true)) then begin
            RecordCopy(oldJobr,Jobr);
            FindCancelledReservationState(RSr);
            Jobr.ResStatus = RSr.Code;
            Jobr.ConfDate = DateFromString(XmlGet(x,rsvroompath & "/date"),"YYYY-MM-DD");??
            Jobr.ResCode = "";
            RecordUpdate(oldJobr,Jobr,true);
          end;
*/          
      end;
      rescnt = rescnt + 1;
      rsvpath = "reservations/reservation[" & rescnt & "]";
    end;
  end;
LPullBookingComStatusReply:;  
  return;
end;


procedure SendBookingComRoomRateAvailable()
begin
  Area req;
  record BookingComBlock BCb;
     
  AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>" & chr(13) & chr(10),req);

  AddTextToArea("<request>" & chr(13) & chr(10),req);
  AddTextToArea("  <username>" & "Hansa-Bruna"  & "</username>" & chr(13) & chr(10),req);
  AddTextToArea("  <password>" & "HCH5B*mYz:XYfv/1)MVE^ZhTCO-AJc^lEb0MvW)2"  & "</password>" & chr(13) & chr(10),req);
  AddTextToArea("  <hotel_id>" & "1466037"  & "</hotel_id>" & chr(13) & chr(10),req);
  AddTextToArea("  <version>" & "1.0"  & "</version>" & chr(13) & chr(10),req);
  AddTextToArea("  <number_of_days>" & "1"  & "</number_of_days>" & chr(13) & chr(10),req);
  AddTextToArea("  <start_date>" & DateToString(CurrentDate,"YYYY-MM-DD")  & "</start_date>" & chr(13) & chr(10),req);
  AddTextToArea("  <room_level>" & "1"  & "</room_level>" & chr(13) & chr(10),req);
  AddTextToArea("</request>" & chr(13) & chr(10),req);

  BlockLoad(BCb);
  if (BCb.LogCommunication!=0) then begin
    LogAreaToFile("_bookcom-roomrateavailability.xml",req);
  end;

  SendAsyncWebRequest("supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/roomrateavailability","text/xml; charset=""utf-8""","",req,"SendBookingComRoomRateAvailableReply",30);
  return;
end;

global
procedure SendBookingComRoomRateAvailableReply(Area reply,Area replyheader,boolean timeout)
begin
  record BookingComBlock BCb;

  BlockLoad(BCb);
  if (BCb.LogCommunication!=0) then begin
    LogAreaToFile("_bookcom_reply-roomrateavailability.xml",reply);
  end;

  if (timeout==false) then begin
  end else begin
  end;
  return;
end;

procedure PullBookingComRoomRates()
begin
  Area req;
  record BookingComBlock BCb;
     
  AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>",req);

  AddTextToArea("<request>",req);
  AddTextToArea("  <username>" & "Hansa-Bruna"  & "</username>",req);
  AddTextToArea("  <password>" & "HCH5B*mYz:XYfv/1)MVE^ZhTCO-AJc^lEb0MvW)2"  & "</password>",req);
  AddTextToArea("  <hotel_id>" & "1466037"  & "</hotel_id>",req);
  AddTextToArea("  <version>" & "1.0"  & "</version>",req);
  AddTextToArea("</request>",req);

  BlockLoad(BCb);
  if (BCb.LogCommunication!=0) then begin
    LogAreaToFile("_bookcom-roomrates_req.xml",req);
  end;

  SendAsyncWebRequest("supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/roomrates","text/xml; charset=""utf-8""","",req,"PullBookingComRoomRatesReply",30);
  return;
end;

global
procedure PullBookingComRoomRatesReply(Area reply,Area replyheader,boolean timeout)
begin
  record BookingComBlock BCb;

  BlockLoad(BCb);
  if (BCb.LogCommunication!=0) then begin
    LogAreaToFile("_bookcom_reply-roomrates.xml",reply);
  end;

  if (timeout==false) then begin
  end else begin
  end;
  return;
end;

procedure AddRoomToBookingComRequest(record AgentRoomVc ARr,var Integer level,var Area req)
begin
  Date sd,ed;
  
  OpenXmlTagWithAttr("room","id=""" & ARr.ResCode & """",level,req);
  level = level + 2;

  AddXmlTag("closed",ARr.Closed,level,req);
  AddXmlTag("roomstosell","1",level,req);
  AddXmlTag("minimumstay","1",level,req);
  AddXmlTag("maximumstay","365",level,req);
//  AddXmlTag("price","100",level,req);
//  AddXmlTag("rate id=""5787895","100",level,req);
  sd = ARr.StartDate;
  if (blankdate(sd) or sd<CurrentDate) then begin sd = CurrentDate; end;
  ed = ARr.EndDate;
  if (blankdate(ed) or ed<CurrentDate) then begin ed = CurrentDate; end;
  AddXmlTagWithAttr("date","from =""" & DateToString(sd,"YYYY-MM-DD") & """ to=""" & DateToString(ed,"YYYY-MM-DD") & """","",level,req);

  level = level - 2;
  CloseXmlTag("room",level,req);
  return;
end;

function Boolean AddRoomToBookingComAvailable(record AgentRoomVc ARr,Integer roomstosell,var Integer level,var Area req)
begin
  Boolean res;
  Date sd,ed;
  record JobVc Jobr;    
  record ResVc Resr;
  record ResTypeVc RTr;
  record JobPriceVc JPr;
  row JobPriceVc JPrw;
  Integer i,rwcnt; 
  string 255 tstr;
  record BookingComBlock BCb;

  Resr.Code = ARr.ResCode;
  if (ReadFirstMain(Resr,1,true)) then begin
    BlockLoad(BCb);
    RTr.Code = Resr.Type;
    ReadFirstMain(RTr,1,true);
    
    sd = ARr.StartDate;
    if (blankdate(sd) or sd<CurrentDate) then begin sd = CurrentDate; end;
    ed = ARr.EndDate;
    if (blankdate(ed) or ed<CurrentDate) then begin ed = CurrentDate; end;

    RecordNew(Jobr);
    Jobr.ResCode = Resr.Code;
    JobPasteResCode(Jobr,"");
    Jobr.TransDate = sd;
    JobPasteTransDate(Jobr);
    Jobr.EndDate = ed;
    Jobr.NrOfDays = DateDiff(Jobr.EndDate,Jobr.TransDate);
    Jobr.Persons = RTr.MaxPersons;
    tstr = Jobr.ResUsage;
    Jobr.ResUsage = ARr.ResUsage;
    if (blank(Jobr.ResUsage)) then begin
      Jobr.ResUsage = BCb.ResUsage;
    end;
    if (blank(tstr)) then begin
      Jobr.ResUsage = tstr;
    end;
    if (Jobr.ResUsage!=tstr) then begin
      JobPasteResUsage(Jobr,tstr);
    end;
    if (JobToJobPrices(Jobr,Jobr.Type,JPr)) then begin
      rwcnt = MatRowCnt(JPr);
      if (rwcnt==0) then begin
        MessageBox(39180," " & ARr.ResCode)
      end;
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(JPr,i,JPrw);
        if (nonblankdate(JPrw.StayDay)) then begin
          OpenXmlTagWithAttr("room","id=""" & Resr.Type & """",level,req);
          level = level + 2;
          OpenXmlTagWithAttr("date","from =""" & DateToString(JPrw.StayDay,"YYYY-MM-DD") & """ to=""" & DateToString(AddDay(JPrw.StayDay,1),"YYYY-MM-DD") & """",level,req);
          level = level + 2;
          AddTextToArea("            <rate id=""" & ARr.StdRateID & """/>" & chr(13) & chr(10),req);  
          AddTextToArea("            <price>" & ValToString(JPrw.Price,M4Val,"",".",0)  & "</price>" & chr(13) & chr(10),req);
          AddXmlTag("roomstosell",roomstosell,level,req);
          AddXmlTag("closed",ARr.Closed,level,req);
          AddXmlTag("minimumstay","1",level,req);
          AddXmlTag("maximumstay",DateDiff(ed,sd),level,req);
          level = level - 2;
          CloseXmlTag("date",level,req);
          level = level - 2;
          CloseXmlTag("room",level,req);
          res = true;
        end;
      end;
    end;
  end;
  AddRoomToBookingComAvailable = res;
  return;
end;

procedure AddToPerTypeArray(record AgentRoomVc ARr,array record AgentRoomVc aPerTypeARr,array Integer aroomstosell)
begin
  Integer i;
  record ResVc Resr;
  record ResVc ptResr;
  record AgentRoomVc ptARr;   
  
  for (i=0;i<aPerTypeARr.length;i=i+1) begin
    RecordCopy(ptARr,aPerTypeARr[i]);
    ptResr.Code = ptARr.ResCode;
    ReadFirstMain(ptResr,1,true);
    
    Resr.Code = ARr.ResCode;
    ReadFirstMain(Resr,1,true);
    
    if (Resr.Type==ptResr.Type) then begin
      aPerTypeARr[i] = ptARr;
      aroomstosell[i] = aroomstosell[i] + 1;
      goto LAddToPerTypeArray;
    end;
  end;
  i = aPerTypeARr.length;
  aPerTypeARr[i] = ARr;
  aroomstosell[i] = 1;
LAddToPerTypeArray:;  
  return;
end;

global
procedure EnableRoomsAtBooking(array record AgentRoomVc aARr)
begin
  Integer i;
  record AgentRoomVc ARr;   
  record BookingComBlock BCb;
  Integer level;
  Area req;
  Boolean sendf;
  array record AgentRoomVc aPerTypeARr;
  array Integer aroomstosell;

  level = 0;
  BlockLoad(BCb);
  if (BCb.Enable==0) then begin
    goto LEnableRoomsAtBooking;
  end;
  AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>" & chr(13) & chr(10),req);
  OpenXmlTag("request",level,req);
  level = level + 2;
  AddXmlTag("username",BCb.Username,level,req);
  AddXmlTag("password",BCb.Password,level,req);
  AddXmlTag("hotel_id",BCb.HotelID,level,req);
  AddXmlTag("version","1.0",level,req);

  level = level + 2;
  for (i=0;i<aARr.length;i=i+1) begin
    RecordCopy(ARr,aARr[i]);
    AddToPerTypeArray(ARr,aPerTypeARr,aroomstosell);
  end;
  for (i=0;i<aPerTypeARr.length;i=i+1) begin
    RecordCopy(ARr,aPerTypeARr[i]);
    sendf = AddRoomToBookingComAvailable(ARr,aroomstosell[i],level,req);
  end;
  level = level - 2;
  CloseXmlTag("request",level,req);

  if (BCb.LogCommunication!=0) then begin
    LogAreaToFile("_EnableRoomsAtBooking.xml",req);
  end;
  if (sendf) then begin
    SendAsyncWebRequest("supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/availability","text/xml; charset=""utf-8""","",req,"SendBookingComRoomAvailableReply",30);
  end;
LEnableRoomsAtBooking:;
  return;
end;

global
procedure SendBookingComRoomAvailableReply(Area reply,Area replyheader,boolean timeout)
begin
  xml x;
  string 255 path;
  record BookingComBlock BCb;
  
  BlockLoad(BCb);
  if (BCb.LogCommunication!=0) then begin
    LogAreaToFile("_EnableRoomsAtBooking-reply.xml",reply);
  end;

  if (timeout==false) then begin
    x = ParseXmlArea(reply);
    path = "ok";
    if (XmlNodeExists(x,path)) then begin
      MessageBox(39170,"");
    end else begin
      MessageBox(39171,"");
    end;
  end else begin
    MessageBox(39172,"");
  end;
  return;
end;

global
updating procedure ResBookingComStatusDsm()
begin
  Integer wn;
  record ResVc Resr;   
  Area reply;
  Area replyheader;
  boolean timeout;

  wn = CurWindow;
  GetWindowRecord(wn,Resr);
//  PullBookingComStatus;
  PullBookingComStatusReply(reply,replyheader,false);
  return;
end;


/*

procedure SendBookingComRoomAvailable()
begin
  Area req;
     
  AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>" & chr(13) & chr(10),req);

  AddTextToArea("<request>" & chr(13) & chr(10),req);
  AddTextToArea("  <username>" & "Hansa-Bruna"  & "</username>" & chr(13) & chr(10),req);
  AddTextToArea("  <password>" & "HCH5B*mYz:XYfv/1)MVE^ZhTCO-AJc^lEb0MvW)2"  & "</password>" & chr(13) & chr(10),req);
  AddTextToArea("  <hotel_id>" & "1466037"  & "</hotel_id>" & chr(13) & chr(10),req);
  AddTextToArea("  <version>" & "1.0"  & "</version>" & chr(13) & chr(10),req);
  AddTextToArea("  <room id=""146603702"">" & chr(13) & chr(10),req);
  AddTextToArea("    <date from =""" & DateToString(CurrentDate,"YYYY-MM-DD") & """ to=""2016-02-29"">" & chr(13) & chr(10),req);
  AddTextToArea("    <rate id=""5787895""/>" & chr(13) & chr(10),req);  
  AddTextToArea("    <price>" & "150.00"  & "</price>" & chr(13) & chr(10),req);
  AddTextToArea("    <roomstosell>" & "1"  & "</roomstosell>" & chr(13) & chr(10),req);
  AddTextToArea("    <closed>" & "0"  & "</closed>" & chr(13) & chr(10),req);
//  AddTextToArea("    <date value=""" & DateToString(CurrentDate,"YYYY-MM-DD") & """>" & chr(13) & chr(10),req);
  AddTextToArea("    <minimumstay>" & "1"  & "</minimumstay>" & chr(13) & chr(10),req);
  AddTextToArea("    <maximumstay>" & "21"  & "</maximumstay>" & chr(13) & chr(10),req);
  AddTextToArea("    </date>" & chr(13) & chr(10),req);
  AddTextToArea("  </room>" & chr(13) & chr(10),req);
  AddTextToArea("</request>" & chr(13) & chr(10),req);

  LogAreaToFile("_bookcom-available.xml",req);

  SendAsyncWebRequest("supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/availability","text/xml; charset=""utf-8""","",req,"SendBookingComRoomAvailableReply",30);
  return;
end;

procedure PullBookingComRoomRates()
begin
  Area req;
     
  AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>",req);

  AddTextToArea("<request>",req);
  AddTextToArea("  <username>" & "Hansa-Bruna"  & "</username>",req);
  AddTextToArea("  <password>" & "HCH5B*mYz:XYfv/1)MVE^ZhTCO-AJc^lEb0MvW)2"  & "</password>",req);
  AddTextToArea("  <hotel_id>" & "1466037"  & "</hotel_id>",req);
  AddTextToArea("  <version>" & "1.0"  & "</version>",req);
  AddTextToArea("</request>",req);

  LogAreaToFile("_bookcom-roomrates_req.xml",req);

  SendAsyncWebRequest("supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/roomrates","text/xml; charset=""utf-8""","",req,"PullBookingComRoomRatesReply",30);
  return;
end;

global
procedure PullBookingComRoomRatesReply(Area reply,Area replyheader,boolean timeout)
begin

  LogAreaToFile("_bookcom_reply-roomrates.xml",reply);

  if (timeout==false) then begin
  end else begin
  end;
  return;
end;

global
procedure ResBookingComAvailableDsm()
begin
  Integer wn;
  record ResVc Resr;   

  wn = CurWindow;
  GetWindowRecord(wn,Resr);
//  PullBookingComStatus;
  SendBookingComRoomAvailable;
  SendBookingComRoomRateAvailable;
  PullBookingComRoomRates;
  return;
end;


procedure AddRoomToBookingComRequest(record AgentRoomVc ARr,var Integer level,var Area req)
begin
  Date sd,ed;
  
  OpenXmlTagWithAttr("room","id=""" & ARr.ResCode & """",level,req);
  level = level + 2;

  AddXmlTag("closed",ARr.Closed,level,req);
  AddXmlTag("roomstosell","1",level,req);
  AddXmlTag("minimumstay","1",level,req);
  AddXmlTag("maximumstay","365",level,req);
//  AddXmlTag("price","100",level,req);
//  AddXmlTag("rate id=""5787895","100",level,req);
  sd = ARr.StartDate;
  if (blankdate(sd) or sd<CurrentDate) then begin sd = CurrentDate; end;
  ed = ARr.EndDate;
  if (blankdate(ed) or ed<CurrentDate) then begin ed = CurrentDate; end;
  AddXmlTagWithAttr("date","from =""" & DateToString(sd,"YYYY-MM-DD") & """ to=""" & DateToString(ed,"YYYY-MM-DD") & """","",level,req);

  level = level - 2;
  CloseXmlTag("room",level,req);
  return;
end;

global
procedure EnableRoomsAtBookingLsm()
begin
  Integer i,wn;
  record AgentRoomVc ARr;   
  record BookingComBlock BCb;
  Integer level;
  Area req;

    level = 0;
    BlockLoad(BCb);
    if (BCb.Enable==0) then begin
      goto LEnableRoomsAtBookingLsm;
    end;
    AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>" & chr(13) & chr(10),req);
    OpenXmlTag("request",level,req);
    AddXmlTag("username",BCb.Username,level,req);
    AddXmlTag("password",BCb.Password,level,req);
    AddXmlTag("hotel_id",BCb.HotelID,level,req);
    AddXmlTag("version","1.0",level,req);
    
    wn = CurWindow;
    i = 1;
    while (GetRecordFromBrowse(ARr,wn,i)) begin
      level = level + 2;
      AddRoomToBookingComRequest(ARr,level,req);
      level = level - 2;
      i = i + 1;
    end;
    CloseXmlTag("request",level,req);
  LogAreaToFile("_EnableRoomsAtBookingLsm.xml",req);
  if (i>1) then begin
    SendAsyncWebRequest("supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/availability","text/xml; charset=""utf-8""","",req,"SendBookingComRoomAvailableReply",30);
  end;
LEnableRoomsAtBookingLsm:;
  return;
end;

global
procedure EnableRoomsAtBookingDsm()
begin
  Integer wn;
  record AgentRoomVc ARr;   
  record BookingComBlock BCb;
  Integer level;
  Area req;

    level = 0;
    BlockLoad(BCb);
    if (BCb.Enable==0) then begin
      goto LEnableRoomsAtBookingLsm;
    end;
    AddTextToArea("<?xml version=""1.0"" encoding=""UTF-8""?>" & chr(13) & chr(10),req);
    OpenXmlTag("request",level,req);
    AddXmlTag("username",BCb.Username,level,req);
    AddXmlTag("password",BCb.Password,level,req);
    AddXmlTag("hotel_id",BCb.HotelID,level,req);
    AddXmlTag("version","1.0",level,req);
    
    wn = CurWindow;
    GetWindowRecord(wn,ARr);

    level = level + 2;
    AddRoomToBookingComRequest(ARr,level,req);
    level = level - 2;
    CloseXmlTag("request",level,req);
    LogAreaToFile("_EnableRoomsAtBookingDsm.xml",req);
    SendAsyncWebRequest("supply-xml.booking.com",443,-1,true,"POST","/hotels/xml/availability","text/xml; charset=""utf-8""","",req,"SendBookingComRoomAvailableReply",30);
    
LEnableRoomsAtBookingLsm:;
  return;
end;

*/