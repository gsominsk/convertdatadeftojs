external outer function Integer OuterReadAcceptanceRulesForFileName(string);
external procedure AddWebClientLink(var record ActVc);
external function Boolean FindTheUser(var record UserVc);
external updating function LongInt OPVcRecordCheck(record OPVc,record OPVc,LongInt,LongInt);
external updating function LongInt SDVcRecordCheck(var record SDVc,record SDVc,LongInt,LongInt);
external updating function LongInt PUVcRecordCheck(var record PUVc,record PUVc,LongInt,LongInt);
external function LongInt IntORVcRecordCheck(record IntORVc,record IntORVc,LongInt,LongInt);
external function LongInt QTVcRecordCheck(record QTVc,record QTVc,LongInt,LongInt);
external updating function LongInt ORVcRecordCheck(record ORVc,record ORVc,LongInt,LongInt);
external updating function LongInt VIVcRecordCheck(record VIVc,record VIVc,LongInt,LongInt);
external function LongInt TBBUVcRecordCheck(var record TBBUVc,record TBBUVc,LongInt,LongInt);
external updating function LongInt IVVcRecordCheck(record IVVc,record IVVc,LongInt,LongInt);
external function LongInt POVcRecordCheck(var record POVc,record POVc,LongInt,LongInt);
external function LongInt LeaveTransferVcRecordCheck(var record LeaveTransferVc,record LeaveTransferVc,LongInt,LongInt);
external function LongInt LeaveApplicationVcRecordCheck(var record LeaveApplicationVc,record LeaveApplicationVc,LongInt,LongInt);
external updating function LongInt ExpVcRecordCheck(var record ExpVc,record ExpVc,LongInt,LongInt);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObj(string,var Integer,var string);
external procedure FindUserMailboxName(string,var string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function string 255 AddStr(string,string,string);
external function Boolean PasteCuInAct(var record ActVc,var string);


forward updating function Boolean CreateFYIAcceptanceTasks(Integer,string,string,string,val,string,string,record AcceptanceRulesVc,row AcceptanceRulesVc,string,string);

updating function Boolean CreateAccepatanceEMail(string sender,record AcceptanceRulesVc Acptr,string recipient,var array record MailVc aMailr,var Integer acnt)
begin
  Boolean res;
  record MailVc Mailr;  
  row MailVc Mailrw;
  string 255 mailboxnr,mailboxname;
  string 255 user;
  Integer pos;
  Boolean storef;
  record LTxtVc LTxtr;
  Integer i,rwcnt;
  string 255 tstr;

  RecordNew(Mailr);
  pos = 0;
  ExtractObj(sender,pos,user);
  while (nonblank(user)) begin
    FindUserMailboxName(user,mailboxnr,mailboxname);
    if (nonblank(mailboxname)) then begin
      ClearRow(Mailr,Mailrw,1);
      Mailrw.RowTyp = kMailRowTypeFrom;
      Mailrw.AddrCode = mailboxname;
      mailrw.Mailbox = StringToLongInt(mailboxnr);
      MatRowPut(Mailr,1,Mailrw);
      storef = true;
    end;
    ExtractObj(sender,pos,user);
  end;
  if (storef==false) then begin
    goto LCreateAccepatanceEMail;
  end;
  
  FindUserMailboxName(recipient,mailboxnr,mailboxname);
  if (nonblank(mailboxname)) then begin
    ClearRow(Mailr,Mailrw,1);
    Mailrw.RowTyp = kMailRowTypeTo;
    Mailrw.AddrCode = mailboxname;
    mailrw.Mailbox = StringToLongInt(mailboxnr);
    MatRowPut(Mailr,1,Mailrw);
  end;
  
  Mailr.Header = Mailr.Header & Acptr.Subject;
  LTxtr.Code = Acptr.StdTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    rwcnt = LineTextCnt(LTxtr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(LTxtr,i);
      LineTextPut(Mailr,LineTextCnt(Mailr),tstr);
    end;
    AddCRToText(Mailr);
  end;
  Mailr.SendFlag = 1;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  if (Mailr.SerNr>0) then begin
    if (RecordStore(Mailr,false)) then begin
      res = true;
      aMailr[acnt] = Mailr;
      acnt = acnt + 1;
    end;
  end;
LCreateAccepatanceEMail:;
  CreateAccepatanceEMail = res;
  return;
end;

updating function Boolean CreateAccepatanceEMails(string sender,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,var array record MailVc aMailr,var Integer acnt)
begin
  Boolean res;
  string 255 user;
  Integer pos;
  Integer i,rwcnt;
  
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    res = CreateAccepatanceEMail(sender,Acptr,user,aMailr,acnt);
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
  
LCreateAccepatanceEMails:;
  CreateAccepatanceEMails = res;
  return;
end;

global
function string 255 AcceptanceTaskSubject(string Subject,Integer strid0,string fromsernr,Integer strid1,string contact,Integer strid2,val amount,Integer format,string curncy)
begin
  string 255 res;
  record SysFormatBlock SysFormatRec;
  record CUVc CUr;
  record UserVc Userr;
  
  BlockLoad(SysFormatRec);
  if (blank(Subject)) then begin
    res = USetStr(strid0);
  end else begin
    res = Subject;
  end;
  res = AddStr(res,fromsernr," ");
  res = AddStr(res,USetStr(strid1)," ");
  switch (strid1) begin
    case 22421:
      CUr.Code = contact;
      if (ReadFirstMain(CUr,1,true)) then begin 
        res = AddStr(res,CUr.Name," ");
      end;
    case 22422:
      CUr.Code = contact;
      if (ReadFirstMain(CUr,1,true)) then begin
        res = AddStr(res,CUr.Name," ");
      end;
    otherwise
      res = AddStr(res,contact," ");
  end;
  res = AddStr(res,USetStr(strid2)," ");
  res = AddStr(res,ValToString(amount,format,SysFormatRec.thousSep,SysFormatRec.decimalPt,0)," ");
  res = AddStr(res,curncy," ");
  AcceptanceTaskSubject = res;
  return;
end;

updating procedure AcceptanceTaskRecordLink(record ActVc Actr)
//remember about LinkRecordToActivity
begin
  record POVc POr;
  record IVVc IVr;
  record TBBUVc TBBUr;
  record VIVc VIr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record QTVc QTr;
  record ORVc ORr;
  record PUVc PUr;
  record SDVc SDr;
  record OPVc OPr;
  record LeaveApplicationVc LeaveApplicationr;
  record LeaveTransferVc LeaveTransferr;
  
  switch (Actr.FromFileName) begin
    case "ExpVc": 
      Expr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(Expr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,Expr,CurrentCompany);
      end;
    case "IntORVc": 
      IntORr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IntORr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,IntORr,CurrentCompany);
      end;
    case "IVVc": 
      IVr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,IVr,CurrentCompany);
      end;
    case "LeaveApplicationVc":
      LeaveApplicationr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(LeaveApplicationr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,LeaveApplicationr,CurrentCompany);
      end;
    case "LeaveTransferVc":
      LeaveTransferr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(LeaveTransferr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,LeaveTransferr,CurrentCompany);
      end;
    case "OPVc":
      OPr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,OPr,CurrentCompany);
      end;
    case "ORVc": 
      ORr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,ORr,CurrentCompany);
      end;
    case "POVc": 
      POr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(POr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,POr,CurrentCompany);
      end;
    case "PUVc":
      PUr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(PUr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,PUr,CurrentCompany);
      end;
    case "QTVc": 
      QTr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(QTr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,QTr,CurrentCompany);
      end;
    case "SDVc":
      SDr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(SDr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,SDr,CurrentCompany);
      end;
    case "TBBUVc": 
      TBBUr.PRCode = Actr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,TBBUr,CurrentCompany);
      end;
    case "VIVc": 
      VIr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,VIr,CurrentCompany);
      end;
  end;
  return;
end;

function boolean AcceptanceTaskCustomer(var record ActVc Actr)
begin
  record CUVc CUr;
  record ExpVc Expr;
  record IntORVc IntORr;
  record IVVc IVr;
  record LeaveApplicationVc LeaveApplicationr;
  record LeaveTransferVc LeaveTransferr;
  record OPVc OPr;
  row OPVc OPrw;
  record ORVc ORr;
  record POVc POr;
  record PUVc PUr;
  record QTVc QTr;
  record TBBUVc TBBUr;
  record UserVc Userr;
  record VIVc VIr;
  string 255 warning,vecode;
  integer i,rwcnt;
  boolean testf;
  
  switch (Actr.FromFileName) begin
    case "ExpVc":
      Expr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(Expr,1,true)) then begin
        if (nonblank(Expr.Person)) then begin
          Userr.Code = Expr.Person;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (nonblank(Userr.CustCode)) then begin
              CUr.Code = Userr.CustCode;
              if (ReadFirstMain(CUr,1,true)) then begin
                Actr.CUCode = CUr.Code;
                PasteCuInAct(Actr,warning);
                Actr.Contact = "";
              end;
            end;
          end;
        end;
      end;
    case "IntORVc":
      IntORr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IntORr,1,true)) then begin
        if (nonblank(IntORr.OurUser)) then begin
          Userr.Code = IntORr.OurUser;
          if (ReadFirstMain(Userr,1,true)) then begin
            if (nonblank(Userr.CustCode)) then begin
              CUr.Code = Userr.CustCode;
              if (ReadFirstMain(CUr,1,true)) then begin
                Actr.CUCode = CUr.Code;
                PasteCuInAct(Actr,warning);
                Actr.Contact = "";
              end;
            end;
          end;
        end;
      end;
    case "IVVc":
      IVr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        if (nonblank(IVr.CustCode)) then begin
          CUr.Code = IVr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = IVr.ClientContact;
          end;
        end;
      end;
    case "LeaveApplicationVc":
      LeaveApplicationr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(LeaveApplicationr,1,true)) then begin
        if (nonblank(LeaveApplicationr.Employee)) then begin
          CUr.Code = LeaveApplicationr.Employee;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = "";
          end;
        end;
      end;
    case "LeaveTransferVc":
      LeaveTransferr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(LeaveTransferr,1,true)) then begin
        if (nonblank(LeaveTransferr.Employee)) then begin
          CUr.Code = LeaveTransferr.Employee;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = "";
          end;
        end;
      end;
    case "OPVc":
      OPr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        rwcnt = MatRowCnt(OPr);
        if (rwcnt>0) then begin
          testf = true;
          MatRowGet(OPr,0,OPrw);
          vecode = OPrw.VECode;
          for (i=1;i<rwcnt;i=i+1) begin
            MatRowGet(OPr,i,OPrw);
            if (OPrw.VECode!=vecode) then begin
              testf = false;
              i = rwcnt;
            end;
          end;
          if (testf) then begin
            CUr.Code = vecode;
            if (ReadFirstMain(CUr,1,true)) then begin
              Actr.CUCode = CUr.Code;
              PasteCuInAct(Actr,warning);
            end;
          end;
        end;
      end;
    case "ORVc":
      ORr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        if (nonblank(ORr.CustCode)) then begin
          CUr.Code = ORr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = ORr.CustContact;
          end;
        end;
      end;
    case "POVc":
      POr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(POr,1,true)) then begin
        if (nonblank(POr.VECode)) then begin
          CUr.Code = POr.VECode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = POr.VEContact;
          end;
        end;
      end;
    case "PUVc":
      PUr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(PUr,1,true)) then begin
        if (nonblank(PUr.VECode)) then begin
          CUr.Code = PUr.VECode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
          end;
        end;
      end;
    case "QTVc":
      QTr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(QTr,1,true)) then begin
        if (nonblank(QTr.CustCode)) then begin
          CUr.Code = QTr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
            Actr.Contact = QTr.CustContact;
          end;
        end;
      end;
    case "TBBUVc":
      TBBUr.PRCode = Actr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        if (nonblank(TBBUr.CustCode)) then begin
          CUr.Code = TBBUr.CustCode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
          end;
        end;
      end;
    case "VIVc":
      VIr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        if (nonblank(VIr.VECode)) then begin
          CUr.Code = VIr.VECode;
          if (ReadFirstMain(CUr,1,true)) then begin
            Actr.CUCode = CUr.Code;
            PasteCuInAct(Actr,warning);
          end;
        end;
      end;
  end;
  
  return;
end;

updating function Boolean CreateAcceptanceTask(string fromfilename,string fromsernr,Integer task,string sender,string recipient,val amount,val curamount,string curncy,string contact,record AcceptanceRulesVc Acptr,
                                               Boolean fyif,string Subject,string AcceptanceActType,
                                               var record ActVc curuserActr)
begin
  Boolean res;
  record ActVc Actr;
  record ActTypeVc ActTyper;
  string 255 mailboxnr,mailboxname;
  Integer pos;
  Boolean storef;
  record LTxtVc LTxtr;
  Integer i,rwcnt;
  string 255 tstr;
  transaction string 255 gAlarmVcSender;
  transaction string 255 gAlarmVcStdTxt;
  
  RecordNew(Actr);
  ActTyper.Code = AcceptanceActType;
  ReadFirstMain(ActTyper,1,true);
  Actr.MainPersons = recipient;
  switch (task) begin
    case kAcceptanceTaskEMail:
      Actr.AlarmType = kAlarmTypeEMail;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
    case kAcceptanceTaskSMS:
      Actr.AlarmType = kAlarmTypeSMS;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
    case kAcceptanceTaskAlert:
      Actr.AlarmType = kAlarmTypeMessage;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
    case kAcceptanceTaskNotification:
      Actr.AlarmType = kAlarmTypeNotification;
      Actr.AlarmWhen = ActTyper.AlarmWhen;
      Actr.AlarmUnits = ActTyper.AlarmUnits;
  end;
  Actr.TodoFlag = kTodoFlagTodo;
  Actr.CalTimeFlag = kCalTimeFlagNoshow;
  Actr.SymbNr = kActivitySymbolDeskwork;
  Actr.ActType = AcceptanceActType;
  Actr.ActTypeComment = ActTyper.Comment;
  Actr.Comment = USetStr(22410);
  Actr.FromFileName = fromfilename;
  Actr.FromSerNr = fromsernr;
  Actr.FromCompanyNr = CurrentCompany;
  AcceptanceTaskCustomer(Actr);

  switch (Actr.FromFileName) begin
    case "POVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22411,fromsernr,22421,contact,22423,curamount,M4Val,curncy);
    case "IVVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22417,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "TBBUVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22418,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "VIVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22411,fromsernr,22421,contact,22423,curamount,M4Val,curncy);
    case "ExpVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22413,fromsernr,22420,contact,22423,curamount,M4Val,curncy);
    case "IntORVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22414,fromsernr,22420,contact,22423,curamount,M4Val,curncy);
    case "QTVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22415,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "ORVc": 
      Actr.Comment = AcceptanceTaskSubject(Subject,22416,fromsernr,22422,contact,22423,curamount,M4Val,curncy);
    case "PUVc":
      Actr.Comment = AcceptanceTaskSubject(Subject,22419,fromsernr,22421,contact,22423,curamount,M4Val,curncy);
    case "SDVc":
      Actr.Comment = AcceptanceTaskSubject(Subject,22425,fromsernr,22420,contact,22423,curamount,M4Val,curncy);
    case "OPVc":
      Actr.Comment = AcceptanceTaskSubject(Subject,22427,fromsernr,0,contact,22423,curamount,M4Val,curncy);
    case "LeaveApplicationVc":
      Actr.Comment = AcceptanceTaskSubject(Subject,22428,fromsernr,22420,contact,22423,curamount,M4UVal,curncy);
    case "LeaveTransferVc":
      Actr.Comment = AcceptanceTaskSubject(Subject,22429,fromsernr,22420,contact,22423,curamount,M4UVal,curncy);
  end;
  Actr.Comment = Left(Actr.Comment,200);
  AddWebClientLink(Actr);  
  gAlarmVcSender = sender;
  gAlarmVcStdTxt = Acptr.StdTxt;
  Actr.SerNr = NextSerNr("ActVc",Actr.TransDate,-1,false,"");
  if (Actr.SerNr>0) then begin
    if (RecordStore(Actr,false)) then begin
      AcceptanceTaskRecordLink(Actr);
      if (fyif==false) then begin
        if (recipient==CurrentUser) then begin
          if (Acptr.AutomaticApprovalforApprover!=0) then begin
            RecordCopy(curuserActr,Actr);
          end;
        end;
      end;
      res = true;
    end;
  end;
LCreateAcceptanceTask:;  
  CreateAcceptanceTask = res;
  return;
end;

function Boolean RecipientIsAbsent(string absentActType,string recipient,var string forwardRecipients,var vector Boolean recipientAbsent,var vector Boolean recipientIncluded)
begin
  Boolean testf,TrHs;
  record ActVc Actr;
  string 255 tstr,tstr2;
  Integer pos;
  
  forwardRecipients = "";
  
  if (blank(absentActType)) then begin goto LRecipientIsAbsent; end;
  if (blank(recipient)) then begin goto LRecipientIsAbsent; end;
  if (recipientAbsent[recipient]) then begin goto LRecipientIsAbsent; end;
  
  Actr.ActType = absentActType;
  TrHs = true;
  
  while(LoopKey("ActType",Actr,1,TrHs)) begin
    if (Actr.ActType!=absentActType) then begin TrHs = false; end;
    
    if (TrHs) then begin
      testf = true;
      if (DateInRange(CurrentDate,Actr.TransDate,Actr.EndDate)==false) then begin testf = false; end;
      if (SetInSet(recipient,Actr.MainPersons)==false) then begin testf = false; end;
      
      if (testf) then begin
        recipientAbsent[recipient] = true;
        
        pos = 0;
        ExtractObj(Actr.ApprovalFwdPersons,pos,tstr);
        while (nonblank(tstr)) begin
          if (recipientIncluded[tstr]==false and recipientAbsent[tstr]==false) then begin
            if (RecipientIsAbsent(absentActType,tstr,tstr2,recipientAbsent,recipientIncluded)) then begin
              if (nonblank(tstr2)) then begin
                if (nonblank(forwardRecipients)) then begin
                  forwardRecipients = forwardRecipients & ",";
                end;
                forwardRecipients = forwardRecipients & tstr2;
              end;
            end else begin
              if (nonblank(forwardRecipients)) then begin
                forwardRecipients = forwardRecipients & ",";
              end;
              forwardRecipients = forwardRecipients & tstr;
              recipientIncluded[tstr] = true;
            end;
          end;
          ExtractObj(Actr.ApprovalFwdPersons,pos,tstr);
        end;
        
        goto LRecipientIsAbsent;
      end;
    end;
  end;
  
LRecipientIsAbsent:;
  RecipientIsAbsent = recipientAbsent[recipient];
end;

updating procedure CreateAcceptanceTasksForAbsentees(Integer task,string fromfilename,string fromsernr,string sender,val amount,string crncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,var string AcceptanceBy)
begin
  string 255 recipient,forwardRecipient,forwardRecipients,newAcceptanceBy;
  Integer pos,pos2;
  record ActVc oldActr;
  record ActVc curuserActr;
  vector Boolean recipientTaskCreated,recipientAbsent,recipientIncluded;
  Boolean res,firstf;
  
  if (blank(Acptr.AbsentActType)) then begin goto LCreateAcceptanceTasksForAbsentees; end;
  
  RecordClear(curuserActr);
  switch (Acptrw.ActionType) begin
    case kAcceptanceTypeActionByOne:
      pos = 0;
      ExtractObj(AcceptanceBy,pos,recipient);
      while (nonblank(recipient)) begin
        if (RecipientIsAbsent(Acptr.AbsentActType,recipient,forwardRecipients,recipientAbsent,recipientIncluded)) then begin
          res = false;
          if (nonblank(forwardRecipients)) then begin
            pos2 = 0;
            ExtractObj(forwardRecipients,pos2,forwardRecipient);
            while (nonblank(forwardRecipient)) begin
              if (recipientTaskCreated[forwardRecipient]==false) then begin
                if (CreateAcceptanceTask(fromfilename,fromsernr,task,sender,forwardRecipient,amount,blankval,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,curuserActr)) then begin
                  recipientTaskCreated[forwardRecipient] = true;
                  res = true;
                end;
              end;
              ExtractObj(forwardRecipients,pos2,forwardRecipient);
            end;
          end;
          if (res and recipientTaskCreated[recipient]==false) then begin
            if (CreateFYIAcceptanceTasks(task,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,recipient,Acptr.AbsentSubject)) then begin
              recipientTaskCreated[recipient] = true;
            end;
          end;
        end;
        ExtractObj(AcceptanceBy,pos,recipient);
      end;
    case kAcceptanceTypeActionByAll:
      pos = 0;
      ExtractObj(AcceptanceBy,pos,recipient);
      while (nonblank(recipient)) begin
        if (RecipientIsAbsent(Acptr.AbsentActType,recipient,forwardRecipients,recipientAbsent,recipientIncluded)) then begin
          res = false;
          if (nonblank(forwardRecipients)) then begin
            pos2 = 0;
            ExtractObj(forwardRecipients,pos2,forwardRecipient);
            while (nonblank(forwardRecipient)) begin
              if (recipientTaskCreated[forwardRecipient]==false) then begin
                if (CreateAcceptanceTask(fromfilename,fromsernr,task,sender,forwardRecipient,amount,blankval,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,curuserActr)) then begin
                  recipientTaskCreated[forwardRecipient] = true;
                  res = true;
                end;
              end;
              ExtractObj(forwardRecipients,pos2,forwardRecipient);
            end;
          end;
          if (res and recipientTaskCreated[recipient]==false) then begin
            if (CreateFYIAcceptanceTasks(task,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,recipient,Acptr.AbsentSubject)) then begin
              recipientTaskCreated[recipient] = true;
            end;
          end;
        end;
        ExtractObj(AcceptanceBy,pos,recipient);
      end;
  end;
LCreateAcceptanceTasksForAbsentees:;  
  if (curuserActr.SerNr>0) then begin
    if (Acptr.AutomaticApprovalforApprover!=0) then begin
      if (ReadFirstMain(curuserActr,0,true)) then begin
        RecordCopy(oldActr,curuserActr);
        curuserActr.OKFlag = 1;
        curuserActr.ActResult = Acptr.AcceptedActType;
        if (RecordUpdate(oldActr,curuserActr,true)) then begin
        end;
      end;
    end;
  end;
  
  pos = 0;
  firstf = true;
  ExtractObj(AcceptanceBy,pos,recipient);
  while (nonblank(recipient)) begin
    if (recipientTaskCreated[recipient]==false) then begin
      if (firstf) then begin
        firstf = false;
      end else begin
        newAcceptanceBy = newAcceptanceBy & ",";
      end;
      newAcceptanceBy = newAcceptanceBy & recipient;
    end;
    ExtractObj(AcceptanceBy,pos,recipient);
  end;
  AcceptanceBy = newAcceptanceBy;
end;

updating function Boolean CreateAcceptanceTasks(Integer task,string fromfilename,string fromsernr,string sender,val amount,val curamount,string crncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,string aAcceptanceBy)
begin
  Boolean res;
  string 255 recipient;
  Integer pos;
  record ActVc oldActr;
  record ActVc curuserActr;
  string 255 AcceptanceBy;

  AcceptanceBy = aAcceptanceBy;
  if (blank(AcceptanceBy)) then begin
    AcceptanceBy = Acptrw.AcceptanceBy;
  end;
  CreateAcceptanceTasksForAbsentees(task,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,AcceptanceBy);
  RecordClear(curuserActr);
  switch (Acptrw.ActionType) begin
    case kAcceptanceTypeActionByOne:
      pos = 0;
      ExtractObj(AcceptanceBy,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateAcceptanceTask(fromfilename,fromsernr,task,sender,recipient,amount,curamount,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,curuserActr);
        ExtractObj(AcceptanceBy,pos,recipient);
      end;
    case kAcceptanceTypeActionByAll:
      pos = 0;
      ExtractObj(AcceptanceBy,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateAcceptanceTask(fromfilename,fromsernr,task,sender,recipient,amount,curamount,crncy,contact,Acptr,false,Acptr.Subject,Acptr.AcceptanceActType,curuserActr);
        ExtractObj(AcceptanceBy,pos,recipient);
      end;
  end;
LCreateAcceptanceTasks:;  
  if (curuserActr.SerNr>0) then begin
    if (Acptr.AutomaticApprovalforApprover!=0) then begin
      if (ReadFirstMain(curuserActr,0,true)) then begin
        RecordCopy(oldActr,curuserActr);
        curuserActr.OKFlag = 1;
        curuserActr.ActResult = Acptr.AcceptedActType;
        if (RecordUpdate(oldActr,curuserActr,true)) then begin
        end;
      end;
    end;
  end;

  CreateAcceptanceTasks = res;
  return;
end;

global
updating function Boolean CreateFYIAcceptanceTasks(Integer task,string fromfilename,string fromsernr,string sender,val amount,string crncy,string contact,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,string aFYIPersons,string aSubject)
begin
  Boolean res;
  string 255 recipient;
  Integer pos;
  record ActVc oldActr;
  record ActVc curuserActr;
  string 255 FYIPersons,subject;

  FYIPersons = aFYIPersons;
  if (blank(FYIPersons) and Acptrw.ApproverSelection!=kAcceptanceApproverSelectionManual) then begin
    FYIPersons = Acptrw.FYIPersons;
  end;
  subject = aSubject;
  if (blank(subject)) then begin
    subject = Acptr.FYISubject;
  end;
  RecordClear(curuserActr);
  switch (Acptrw.ActionType) begin
    case kAcceptanceTypeActionByOne:
      pos = 0;
      ExtractObj(FYIPersons,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateAcceptanceTask(fromfilename,fromsernr,task,sender,recipient,amount,blankval,crncy,contact,Acptr,true,subject,Acptr.FYIActType,curuserActr);
        ExtractObj(FYIPersons,pos,recipient);
      end;
    case kAcceptanceTypeActionByAll:
      pos = 0;
      ExtractObj(FYIPersons,pos,recipient);
      while (nonblank(recipient)) begin
        res = CreateAcceptanceTask(fromfilename,fromsernr,task,sender,recipient,amount,blankval,crncy,contact,Acptr,true,subject,Acptr.FYIActType,curuserActr);
        ExtractObj(FYIPersons,pos,recipient);
      end;
  end;
  CreateFYIAcceptanceTasks = res;
  return;
end;

global
updating procedure CreateAcceptanceAlert2(string fromfilename,string fromsernr,string sender,val amount,val curamount,string crncy,string contact,
                                        record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,string AcceptanceBy,string AcceptanceFYI)
begin
  switch (Acptrw.ActionResult) begin
    case kAcceptanceTypeResultNone:
      CreateAcceptanceTasks(kAcceptanceTaskNone,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,AcceptanceBy);
    case kAcceptanceTypeResultEmail:
      CreateAcceptanceTasks(kAcceptanceTaskEMail,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,AcceptanceBy);
    case kAcceptanceTypeResultSMS:
      CreateAcceptanceTasks(kAcceptanceTaskSMS,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,AcceptanceBy);
    case kAcceptanceTypeResultAlert:
      CreateAcceptanceTasks(kAcceptanceTaskAlert,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,AcceptanceBy);
    case kAcceptanceTypeResultNotification:
      CreateAcceptanceTasks(kAcceptanceTaskNotification,fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,Acptrw,AcceptanceBy);
  end;
  if (nonblank(Acptrw.FYIPersons)) or (nonblank(AcceptanceFYI)) then begin
    switch (Acptrw.FYIActionResult) begin
      case kAcceptanceTypeResultNone:
        CreateFYIAcceptanceTasks(kAcceptanceTaskNone,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,AcceptanceFYI,"");
      case kAcceptanceTypeResultEmail:
        CreateFYIAcceptanceTasks(kAcceptanceTaskEMail,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,AcceptanceFYI,"");
      case kAcceptanceTypeResultSMS:
        CreateFYIAcceptanceTasks(kAcceptanceTaskSMS,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,AcceptanceFYI,"");
      case kAcceptanceTypeResultAlert:
        CreateFYIAcceptanceTasks(kAcceptanceTaskAlert,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,AcceptanceFYI,"");
      case kAcceptanceTypeResultNotification:
        CreateFYIAcceptanceTasks(kAcceptanceTaskNotification,fromfilename,fromsernr,sender,amount,crncy,contact,Acptr,Acptrw,AcceptanceFYI,"");
    end;
  end;
  return;
end;

global
updating procedure CreateAcceptanceAlert(string fromfilename,string fromsernr,string sender,val amount,string crncy,string contact,
                                        record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw,string AcceptanceBy,string AcceptanceFYI)
begin                                        
  CreateAcceptanceAlert2(fromfilename,fromsernr,sender,amount,blankval,crncy,contact,Acptr,Acptrw,AcceptanceBy,AcceptanceFYI);
  return;
end;

global
function Boolean ReadAcceptanceRules(Integer kregister,string custcode,var record AcceptanceRulesVc Acptr)
begin
  Boolean res;
  Integer keys;
  
  Acptr.Register = kregister;
  keys = 1;
  if (nonblank(custcode)) then begin
    Acptr.CustCode = custcode;
    keys = 2;
  end;
  res = ReadFirstMain(Acptr,keys,true);
  if (res==false) then begin
    if (nonblank(custcode)) then begin
      res = ReadAcceptanceRules(kregister,"",Acptr);
    end;
  end;
  ReadAcceptanceRules = res;
  return;
end;

global
function Boolean ReadAcceptanceRulesForFileName(string FileName,string FromSerNr,string custcode,var record AcceptanceRulesVc Acptr)
begin
  Boolean res;
  Integer keys;
  Integer acceptanceregister;
  record IVVc IVr;
  
  acceptanceregister = -1;
  switch (FileName) begin
    case "ExpVc": 
      acceptanceregister = kAcceptanceExp;
    case "IntORVc": 
      acceptanceregister = kAcceptanceIntOR;
    case "IVVc": 
      acceptanceregister = kAcceptanceIV;
      IVr.SerNr = StringToLongInt(FromSerNr);
      if (ReadFirstMain(IVr,1,true)) then begin
        switch (IVr.InvType) begin
          case kInvoiceTypeCashInvoiceReceiptPRT:
            acceptanceregister = kAcceptanceCashIV;
          case kInvoiceTypeCash:
            acceptanceregister = kAcceptanceCashIV;
          case kInvoiceTypeCredit:
            acceptanceregister = kAcceptanceCredIV;
          case kInvoiceTypeCreditSpecialSales:
            acceptanceregister = kAcceptanceCredIV;
          otherwise
            acceptanceregister = kAcceptanceIV;
        end;
      end;
    case "ORVc": 
      acceptanceregister = kAcceptanceOR;
    case "POVc": 
      acceptanceregister = kAcceptancePO;
    case "PUVc": 
      acceptanceregister = kAcceptancePU;
    case "QTVc": 
      acceptanceregister = kAcceptanceQT;
    case "OYVc": 
      acceptanceregister = kAcceptanceOY;
    case "TBBUVc": 
      acceptanceregister = kAcceptanceTBBU;      
    case "VIVc": 
      acceptanceregister = kAcceptanceVI;      
    case "OPVc":
      Acptr.Register = kAcceptanceOP;      
    case "SDVc":
      Acptr.Register = kAcceptanceSD;      
    case "LeaveTransferVc":
      Acptr.Register = kAcceptanceLeaveTransfer;      
    case "LeaveApplicationVc":
      Acptr.Register = kAcceptanceLeaveApplication;      
    otherwise
      acceptanceregister = OuterReadAcceptanceRulesForFileName(FileName);
      if (acceptanceregister>0) then begin
        goto LReadAcceptanceRulesForFileName;
      end;
  end;

  Acptr.Register = acceptanceregister;
  keys = 1;
  if (nonblank(custcode)) then begin
    Acptr.CustCode = custcode;
    keys = 2;
  end;
  res = ReadFirstMain(Acptr,keys,true);
  if (res==false) then begin
    if (nonblank(custcode)) then begin
      res = ReadAcceptanceRules(acceptanceregister,"",Acptr);
    end;
  end;

LReadAcceptanceRulesForFileName:;  
  ReadAcceptanceRulesForFileName = res;
  return;
end;

global
function Boolean AcceptanceRulesExists(Integer kregister,string custcode)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;
  
  if (ReadAcceptanceRules(kregister,custcode,Acptr)) then begin
    res = true;
  end;
  AcceptanceRulesExists = res;
  return;
end;

global
function val GetAcceptanceSum_POVc(record POVc POr)
begin
  val res;
  
  res = MulRateToBase1(POr.CurncyCode,POr.Sum4,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_POVc = res;
  return;
end;

global
function val GetAcceptanceSum_IVVc(record IVVc IVr)
begin
  val res;
  
  res = MulRateToBase1(IVr.CurncyCode,IVr.Sum4,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_IVVc = res;
  return;
end;

global
function val GetAcceptanceSum_TBBUVc(record TBBUVc TBBUr)
begin
  val res;
  
  res = MulRateToBase1(TBBUr.CurncyCode,TBBUr.TotSum,TBBUr.FrRate,TBBUr.ToRateB1,TBBUr.ToRateB2,TBBUr.BaseRate1,TBBUr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_TBBUVc = res;
  return;
end;

global
function val GetAcceptanceSum_VIVc(record VIVc VIr)
begin
  val res;
  
  res = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_VIVc = res;
  return;
end;

global
function val GetAcceptanceSum_ORVc(record ORVc ORr)
begin
  val res;
  
  res = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_ORVc = res;
  return;
end;

global
function val GetAcceptanceSum_QTVc(record QTVc QTr)
begin
  val res;
  
  res = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_QTVc = res;
  return;
end;

global
function val GetAcceptanceSum_IntORVc(record IntORVc IntORr)
begin
  val res;
  
  res = IntORr.Total;
  GetAcceptanceSum_IntORVc = res;
  return;
end;

global
function val GetAcceptanceSum_ExpVc(record ExpVc Expr)
begin
  val res;
  
  res = MulRateToBase1(Expr.CurncyCode,Expr.PayVal,Expr.FrRate,Expr.ToRateB1,Expr.ToRateB2,Expr.BaseRate1,Expr.BaseRate2,DefaultCurRoundOff);
  GetAcceptanceSum_ExpVc = res;
  return;
end;

global
function val GetAcceptanceSum_PUVc(record PUVc PUr)
begin
  val res;
  
//  res = MulRateToBase1(PUr.CurncyCode,PUr.PayVal,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
//alraedy in b1
  res = PUr.PayVal;
  GetAcceptanceSum_PUVc = res;
  return;
end;

global
function val GetAcceptanceSum_SDVc(record SDVc SDr)
begin
  val res;
  row SDVc SDrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SDr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SDr,i,SDrw);
    res = res + SDrw.FIFORowVal; 
  end;
  
  GetAcceptanceSum_SDVc = res;
  return;
end;

global
function val GetAcceptanceSum_OPVc(record OPVc OPr)
begin
  val res;
  Integer i,rwcnt;
  row OPVc OPrw;
  
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    res = res + MulRateToBase1(OPrw.BankCurncy,OPrw.BankVal,OPrw.FrRateBankVal,OPrw.ToRateB1BankVal,OPrw.ToRateB2BankVal,OPrw.BaseRate1BankVal,OPrw.BaseRate1BankVal,DefaultCurRoundOff);
  end;
  GetAcceptanceSum_OPVc = res;
  return;
end;

global
function val GetAcceptanceSum_LeaveApplicationVc(record LeaveApplicationVc LAr)
begin
  val res;
  
  GetAcceptanceSum_LeaveApplicationVc = res;
  return;
end;

global
function val GetAcceptanceSum_LeaveTransferVc(record LeaveTransferVc LTr)
begin
  val res;
  
  GetAcceptanceSum_LeaveTransferVc = res;
  return;
end;

global
updating procedure FindAcptRulesAndCreateAcceptanceAlert2(Integer kregister,Integer AcceptanceStatus,string fromfilename,string fromsernr,string sender,
                                                         val amount,val curamount,string crncy,string contact,string AcceptanceBy,string AcceptanceFYI)
begin
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt,err;

  if (ReadAcceptanceRules(kregister,contact,Acptr)) then begin
    err = 0;
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (amount<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
    if (err==0) then begin
      CreateAcceptanceAlert2(fromfilename,fromsernr,sender,amount,curamount,crncy,contact,Acptr,foundAcptrw,AcceptanceBy,AcceptanceFYI);        
    end;
  end;
  return;
end;

global
updating procedure FindAcptRulesAndCreateAcceptanceAlert(Integer kregister,Integer AcceptanceStatus,string fromfilename,string fromsernr,string sender,
                                                         val amount,string crncy,string contact,string AcceptanceBy,string AcceptanceFYI)
begin
  FindAcptRulesAndCreateAcceptanceAlert2(kregister,AcceptanceStatus,fromfilename,fromsernr,sender,amount,blankval,crncy,contact,AcceptanceBy,AcceptanceFYI);
  return;
end;


global
function Integer NewAcceptanceStatus(Integer kregister,string contactcode,val bc1v,Integer curAcceptanceStatus,var Integer ApproverSelection,var string AcceptanceBy,var string AvailApprovers,var string FYIPersons)
begin
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt,resAcceptanceStatus;

  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kregister,contactcode,Acptr)) then begin
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (curAcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            ApproverSelection = Acptrw.ApproverSelection;
            switch (ApproverSelection) begin
              case kAcceptanceApproverSelectionManual:
                if (blank(AcceptanceBy)) then begin
                  resAcceptanceStatus = curAcceptanceStatus;
                  AvailApprovers = Acptrw.AcceptanceBy;
                  FYIPersons = Acptrw.FYIPersons;
                end;
              case kAcceptanceApproverSelectionAutomatic:
                AcceptanceBy = Acptrw.AcceptanceBy;
                FYIPersons = Acptrw.FYIPersons;
            end;
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            ApproverSelection = Acptrw.ApproverSelection;
            switch (ApproverSelection) begin
              case kAcceptanceApproverSelectionManual:
                if (blank(AcceptanceBy)) then begin
                  resAcceptanceStatus = curAcceptanceStatus;
                  AvailApprovers = Acptrw.AcceptanceBy;
                end;
                FYIPersons = Acptrw.FYIPersons;
              case kAcceptanceApproverSelectionAutomatic:
                AcceptanceBy = Acptrw.AcceptanceBy;
                FYIPersons = Acptrw.FYIPersons;
            end;
        end;
        i = rwcnt;
      end;
    end;
  end;
  NewAcceptanceStatus = resAcceptanceStatus;
  return;
end;

global
function Integer SendForAcceptance_POVc(var record POVc POr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (POr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_POVc;
  end;
  bc1v = GetAcceptanceSum_POVc(POr);  
  POr.AcceptanceStatus = NewAcceptanceStatus(kAcceptancePO,POr.VECode,bc1v,POr.AcceptanceStatus,ApproverSelection,POr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (POr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_POVc:;
  SendForAcceptance_POVc = err;
  return;
end;

/*
global
updating function Integer SendForAcceptance_POVc(var record POVc POr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptancePO,POr.VECode,Acptr)) then begin
    bc1v = GetAcceptanceSum_POVc(POr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (POr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  POr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("POVc",POr.SerNr,POr.SalesMan,POr.Sum4,POr.CurncyCode,POr.VECode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_POVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_IVVc(var record IVVc IVr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (IVr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_IVVc;
  end;
  bc1v = GetAcceptanceSum_IVVc(IVr);
  IVr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceIV,IVr.CustCode,bc1v,IVr.AcceptanceStatus,ApproverSelection,IVr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (IVr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_IVVc:;
  SendForAcceptance_IVVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_IVVc(var record IVVc IVr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  switch (IVr.InvType) begin
    case kInvoiceTypeCash:
      Acptr.Register = kAcceptanceCashIV;
    case kInvoiceTypeCredit:
      Acptr.Register = kAcceptanceCredIV;
    case kInvoiceTypeCreditSpecialSales:
      Acptr.Register = kAcceptanceCredIV;
    otherwise
      Acptr.Register = kAcceptanceIV;
  end;
  if (ReadAcceptanceRules(Acptr.Register,IVr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_IVVc(IVr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (IVr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  IVr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("IVVc",IVr.SerNr,IVr.SalesMan,IVr.Sum4,IVr.CurncyCode,IVr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_IVVc = err;
  return;
end;
*/

global
function Integer SendForAcceptance_TBBUVc(var record TBBUVc TBBUr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (TBBUr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_TBBUVc;
  end;
  bc1v = GetAcceptanceSum_TBBUVc(TBBUr);
  TBBUr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceTBBU,TBBUr.CustCode,bc1v,TBBUr.AcceptanceStatus,ApproverSelection,TBBUr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (TBBUr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_TBBUVc:;
  SendForAcceptance_TBBUVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_TBBUVc(var record TBBUVc TBBUr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceTBBU,TBBUr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_TBBUVc(TBBUr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (TBBUr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  TBBUr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("TBBUVc",TBBUr.PRCode,TBBUr.SalesMan,TBBUr.TotSum,TBBUr.CurncyCode,TBBUr.PRCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_TBBUVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_VIVc(var record VIVc VIr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (VIr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_VIVc;
  end;
  bc1v = GetAcceptanceSum_VIVc(VIr);  
  VIr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceVI,VIr.VECode,bc1v,VIr.AcceptanceStatus,ApproverSelection,VIr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (VIr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_VIVc:;
  SendForAcceptance_VIVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_VIVc(var record VIVc VIr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceVI,VIr.VECode,Acptr)) then begin
    bc1v = GetAcceptanceSum_VIVc(VIr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (VIr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  VIr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("VIVc",VIr.SerNr,VIr.Sign,VIr.PayVal,VIr.CurncyCode,VIr.VECode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_VIVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_ORVc(var record ORVc ORr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (ORr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_ORVc;
  end;
  bc1v = GetAcceptanceSum_ORVc(ORr);  
  ORr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceOR,ORr.CustCode,bc1v,ORr.AcceptanceStatus,ApproverSelection,ORr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (ORr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_ORVc:;
  SendForAcceptance_ORVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_ORVc(var record ORVc ORr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceOR,ORr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_ORVc(ORr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (ORr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  ORr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("ORVc",ORr.SerNr,ORr.SalesMan,ORr.Sum4,ORr.CurncyCode,ORr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_ORVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_QTVc(var record QTVc QTr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (QTr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_QTVc;
  end;
  bc1v = GetAcceptanceSum_QTVc(QTr);  
  QTr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceQT,QTr.CustCode,bc1v,QTr.AcceptanceStatus,ApproverSelection,QTr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (QTr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_QTVc:;
  SendForAcceptance_QTVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_QTVc(var record QTVc QTr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceQT,QTr.CustCode,Acptr)) then begin
    bc1v = GetAcceptanceSum_QTVc(QTr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (QTr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  QTr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("QTVc",QTr.SerNr,QTr.SalesMan,QTr.Sum4,QTr.CurncyCode,QTr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_QTVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_IntORVc(var record IntORVc IntORr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (IntORr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_IntORVc;
  end;
  bc1v = GetAcceptanceSum_IntORVc(IntORr);  
  IntORr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceIntOR,"",bc1v,IntORr.AcceptanceStatus,ApproverSelection,IntORr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (IntORr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_IntORVc:;
  SendForAcceptance_IntORVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_IntORVc(var record IntORVc IntORr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceIntOR,"",Acptr)) then begin
//    bc1v = MulRateToBase1(IntORr.CurncyCode,IntORr.Sum4,IntORr.FrRate,IntORr.ToRateB1,IntORr.ToRateB2,IntORr.BaseRate1,IntORr.BaseRate2,DefaultCurRoundOff);
    bc1v = GetAcceptanceSum_IntORVc(IntORr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (IntORr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  IntORr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("IntORVc",IntORr.SerNr,IntORr.OurUser,IntORr.Total,"",IntORr.OurUser,Acptr,foundAcptrw);
  end;
  SendForAcceptance_IntORVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_ExpVc(var record ExpVc Expr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  record UserVc Userr;
  
  err = 0;
  switch (Expr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_ExpVc;
  end;
  bc1v = GetAcceptanceSum_ExpVc(Expr);
  Userr.Code = Expr.Person;
  ReadFirstMain(Userr,1,true);
  Expr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceExp,Userr.CustCode,bc1v,Expr.AcceptanceStatus,ApproverSelection,Expr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (Expr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_ExpVc:;
  SendForAcceptance_ExpVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_ExpVc(var record ExpVc Expr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceExp,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_ExpVc(Expr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (Expr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  Expr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("ExpVc",Expr.SerNr,Expr.Person,Expr.PayVal,Expr.CurncyCode,Expr.Person,Acptr,foundAcptrw);
  end;
  SendForAcceptance_ExpVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_PUVc(var record PUVc PUr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (PUr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_PUVc;
  end;
  bc1v = GetAcceptanceSum_PUVc(PUr);  
  PUr.AcceptanceStatus = NewAcceptanceStatus(kAcceptancePU,PUr.VECode,bc1v,PUr.AcceptanceStatus,ApproverSelection,PUr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (PUr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_PUVc:;
  SendForAcceptance_PUVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_PUVc(var record PUVc PUr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptancePU,PUr.VECode,Acptr)) then begin
    bc1v = GetAcceptanceSum_PUVc(PUr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (PUr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  PUr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("PUVc",PUr.SerNr,"",PUr.PayVal,PUr.CurncyCode,PUr.VECode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_PUVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_SDVc(var record SDVc SDr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (SDr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_SDVc;
  end;
  bc1v = GetAcceptanceSum_SDVc(SDr);  
  SDr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceSD,"",bc1v,SDr.AcceptanceStatus,ApproverSelection,SDr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (SDr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_SDVc:;
  SendForAcceptance_SDVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_SDVc(var record SDVc SDr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceSD,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_SDVc(SDr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (SDr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  SDr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("SDVc",SDr.SerNr,"",GetAcceptanceSum_SDVc(SDr),"","",Acptr,foundAcptrw);
  end;
  SendForAcceptance_SDVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_OPVc(var record OPVc OPr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (OPr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_OPVc;
  end;
  bc1v = GetAcceptanceSum_OPVc(OPr);  
  OPr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceOP,"",bc1v,OPr.AcceptanceStatus,ApproverSelection,OPr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (OPr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_OPVc:;
  SendForAcceptance_OPVc = err;
  return;
end;
/*
global
updating function Integer SendForAcceptance_OPVc(var record OPVc OPr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceOP,"",Acptr)) then begin
    bc1v = GetAcceptanceSum_OPVc(OPr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (OPr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  OPr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
//      CreateAcceptanceAlert("OPVc",OPr.SerNr,OPr.SalesMan,OPr.Sum4,OPr.CurncyCode,OPr.CustCode,Acptr,foundAcptrw);
  end;
  SendForAcceptance_OPVc = err;
  return;
end;
*/

global
function Integer SetAcceptanceStatus(Integer acceptanceregister,string custcode,val bc1v)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  
  res = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(acceptanceregister,custcode,Acptr)) then begin
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (Acptrw.ActionType) begin
          case kAcceptanceTypeActionNone:
            res = kAcceptanceStateNotRequired;
          case kAcceptanceTypeActionByOne:
            res = kAcceptanceStateNotRequested;
          case kAcceptanceTypeActionByAll:
            res = kAcceptanceStateNotRequested;
        end;
        i = rwcnt;
      end;
    end;
  end;
  SetAcceptanceStatus = res;
  return;
end;

global
function Boolean AcceptanceTasksForCurrentLevelDone(string FromFileName,string FromSerNr,string AcceptanceActType,string AcceptedActType,string ForwardedActType,row AcceptanceRulesVc Acptrw,var Integer actcnt)
begin
  Boolean res;
  record ActVc Actr;
  Boolean found,testf;
  string 255 index;
  Integer pos;
  string 255 user;
  
  actcnt = 0;
  if (blank(AcceptedActType)) then begin
    res = false;
    goto LAcceptanceTasksForCurrentLevelDone;
  end;
  res = true;
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    ResetLoop(Actr);
    index = "Acceptance:" & user;  
    Actr.ActType = AcceptanceActType;
    Actr.TodoFlag = kTodoFlagTodo;
    Actr.FromFileName = FromFileName;
    Actr.FromSerNr = FromSerNr;
    found = true;
    while (LoopBackKey(index,Actr,4,found)) begin
      if (Actr.ActType!=AcceptanceActType) then begin found = false; end;
      if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
      if (Actr.FromFileName!=FromFileName) then begin found = false; end;
      if (Actr.FromSerNr!=FromSerNr) then begin found = false; end;
      if (found) then begin
        testf = true;
        if (testf) then begin
          if (Actr.OKFlag==0) then begin
            res = false;
            goto LAcceptanceTasksForCurrentLevelDone;
          end else begin
//if last activity for specific user is in accepted state we can ignore previous rejections
            if (nonblank(AcceptedActType)) then begin
              if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                res = false;
              end;
              if (Actr.ActResult==AcceptedActType) then begin
                res = true;
              end;
              found = false;
            end;
          end;
          actcnt = actcnt + 1;
        end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
LAcceptanceTasksForCurrentLevelDone:;  
  AcceptanceTasksForCurrentLevelDone = res;
  return;
end;

function Boolean AcceptanceTasksExistForUsers(string FromFileName,string FromSerNr,string AcceptanceActType,row AcceptanceRulesVc Acptrw,Integer prevlevactcnt)
begin
  Boolean res;
  record ActVc Actr;
  Boolean found,testf;
  string 255 index;
  Integer pos;
  string 255 user;
  Integer actcnt;

  actcnt = 0;
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    res = false;
    RecordClear(Actr);
    ResetLoop(Actr);
    index = "Acceptance:" & user;  
    Actr.ActType = AcceptanceActType;
    Actr.TodoFlag = kTodoFlagTodo;
    Actr.FromFileName = FromFileName;
    Actr.FromSerNr = FromSerNr;
    found = true;
    while (LoopKey(index,Actr,4,found)) begin
      if (Actr.ActType!=AcceptanceActType) then begin found = false; end;
      if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
      if (Actr.FromFileName!=FromFileName) then begin found = false; end;
      if (Actr.FromSerNr!=FromSerNr) then begin found = false; end;
      if (found) then begin
        testf = true;
        if (testf) then begin
          res = true;
          found = false;
          actcnt = actcnt + 1;
        end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
    if (prevlevactcnt>=0) then begin
      switch (Acptrw.ApproverSelection) begin
        case kAcceptanceApproverSelectionManual:
          if (actcnt==prevlevactcnt) then begin
            res = true;
            user = "";
          end;
      end;
    end;
  end;
LAcceptanceTasksExistForUsers:;  
  AcceptanceTasksExistForUsers = res;
  return;
end;

function Boolean AcceptanceTasksExistForAllLevels(string FromFileName,string FromSerNr,record AcceptanceRulesVc Acptr,Integer currow,Boolean testdonef,Integer prevlevactcnt)
begin
  Boolean res;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  Integer actcnt,actexcnt;
                            
  res = true;
  rwcnt = MatRowCnt(Acptr);
  for (i=currow;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    actcnt = -1;
    switch (Acptrw.ApproverSelection) begin
      case kAcceptanceApproverSelectionManual:
        res = AcceptanceTasksExistForUsers(FromFileName,FromSerNr,Acptr.AcceptanceActType,Acptrw,prevlevactcnt);
        if (res==false) then begin
          goto LAcceptanceTasksExistForAllLevels;
        end;
        if (testdonef) then begin
          res = AcceptanceTasksForCurrentLevelDone(FromFileName,FromSerNr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
          if (res==false) then begin
            goto LAcceptanceTasksExistForAllLevels;
          end;
        end;
        switch (Acptrw.NextLevel) begin
          case kAcceptanceNextLevelRequired:
            res = AcceptanceTasksExistForAllLevels(FromFileName,FromSerNr,Acptr,i+1,testdonef,actcnt);
            if (res==false) then begin
              goto LAcceptanceTasksExistForAllLevels;
            end;
          case kAcceptanceNextLevelNone:
            goto LAcceptanceTasksExistForAllLevels;
        end;
      otherwise
        res = AcceptanceTasksExistForUsers(FromFileName,FromSerNr,Acptr.AcceptanceActType,Acptrw,prevlevactcnt);
        if (res==false) then begin
          goto LAcceptanceTasksExistForAllLevels;
        end;
        if (testdonef) then begin
          res = AcceptanceTasksForCurrentLevelDone(FromFileName,FromSerNr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
          if (res==false) then begin
            goto LAcceptanceTasksExistForAllLevels;
          end;
        end;
        switch (Acptrw.NextLevel) begin
          case kAcceptanceNextLevelRequired:
            res = AcceptanceTasksExistForAllLevels(FromFileName,FromSerNr,Acptr,i+1,testdonef,actcnt);
            if (res==false) then begin
              goto LAcceptanceTasksExistForAllLevels;
            end;
          case kAcceptanceNextLevelNone:
            goto LAcceptanceTasksExistForAllLevels;
        end;
    end;
  end;
LAcceptanceTasksExistForAllLevels:;  
  AcceptanceTasksExistForAllLevels = res;
  return;
end;

updating procedure SetOtherPersonsActivityTypestoNoNeed(string FromFileName,string FromSerNr,record ActVc acceptedActr,record AcceptanceRulesVc Acptr,row AcceptanceRulesVc Acptrw)
begin
  Integer pos;
  string 255 user;
  record ActVc Actr;
  record ActVc oldActr;
  Boolean found,testf;
  string 255 index;

  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    if (SetInSet(user,acceptedActr.MainPersons)==false) then begin
      ResetLoop(Actr);
      index = "Acceptance:" & user;  
      Actr.ActType = Acptr.AcceptanceActType;
      Actr.TodoFlag = kTodoFlagTodo;
      Actr.FromFileName = FromFileName;
      Actr.FromSerNr = FromSerNr;
      found = true;
      while (LoopKey(index,Actr,4,found)) begin
        if (Actr.ActType!=Acptr.AcceptanceActType) then begin found = false; end;
        if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
        if (Actr.FromFileName!=FromFileName) then begin found = false; end;
        if (Actr.FromSerNr!=FromSerNr) then begin found = false; end;
        if (found) then begin
          testf = true;
          if (Actr.OKFlag!=0) then begin testf = false; end;
          if (testf) then begin
            RecordCopy(oldActr,Actr);
            Actr.OKFlag = 1;
            if (nonblank(Acptr.NotNeededActType)) then begin
              Actr.ActResult = Acptr.NotNeededActType;
            end;
            if (RecordUpdate(oldActr,Actr,true)==0) then begin
              StepBack(Actr);
            end;
          end;
        end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
/*
why FYIActType should be set to Rejected or any other type !!
  pos = 0;
  ExtractObj(Acptrw.FYIPersons,pos,user);
  while (nonblank(user)) begin
    if (SetInSet(user,acceptedActr.MainPersons)==false) then begin
      ResetLoop(Actr);
      RecordClear(Actr);
      index = "Acceptance:" & user;  
      Actr.ActType = Acptr.FYIActType;
      Actr.TodoFlag = kTodoFlagTodo;
      Actr.FromFileName = FromFileName;
      Actr.FromSerNr = FromSerNr;
      found = true;
      while (LoopKey(index,Actr,4,found)) begin
        if (Actr.ActType!=Acptr.FYIActType) then begin found = false; end;
        if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
        if (Actr.FromFileName!=FromFileName) then begin found = false; end;
        if (Actr.FromSerNr!=FromSerNr) then begin found = false; end;
        if (found) then begin
          testf = true;
          if (Actr.OKFlag!=0) then begin testf = false; end;
          if (testf) then begin
            RecordCopy(oldActr,Actr);
            Actr.OKFlag = 1;
            if (nonblank(Acptr.RejectedActType)) then begin
              Actr.ActResult = Acptr.RejectedActType;
            end;
            if (RecordUpdate(oldActr,Actr,true)==0) then begin
              StepBack(Actr);
            end;
          end;
        end;
      end;
    end;
    ExtractObj(Acptrw.FYIPersons,pos,user);
  end;
*/
  return;
end;

global
updating function Boolean AcceptanceTasksAcceptedForAllLevels(string fromfilename,string fromsernr,val bc1v,record ActVc Actr,record AcceptanceRulesVc Acptr)
begin
  Boolean testf;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;  
  Integer actcnt;
  
  if (Actr.ActType==Acptr.AcceptanceActType) then begin
    testf = true;
  end;
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    actcnt = -1;
    switch (Acptrw.ApproverSelection) begin
      case kAcceptanceApproverSelectionManual:
        if (((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) and (SetInSet(Actr.MainPersons,Acptrw.AcceptanceBy))) then begin
/*
//there may be 2nd level being approved while 1st level not approved yet
        if ((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) then begin
*/
          switch (Acptrw.ActionType) begin
            case kAcceptanceTypeActionByOne:
              SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
              switch (Acptrw.NextLevel) begin
                case kAcceptanceNextLevelRequired:
                  testf = AcceptanceTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                case kAcceptanceNextLevelNone:
                  i = rwcnt;
                  goto LAcceptanceTasksAcceptedForAllLevels;
              end;
              if (testf==false) then begin
                i = rwcnt;
                goto LAcceptanceTasksAcceptedForAllLevels;
              end;
            case kAcceptanceTypeActionByAll:
              testf = AcceptanceTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
              if (testf==false) then begin
                i = rwcnt;
                goto LAcceptanceTasksAcceptedForAllLevels;
              end;
              switch (Acptrw.NextLevel) begin
                case kAcceptanceNextLevelRequired:
                  testf = AcceptanceTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                  if (testf==false) then begin
                    i = rwcnt;
                    goto LAcceptanceTasksAcceptedForAllLevels;
                  end;
                case kAcceptanceNextLevelNone:
                  i = rwcnt;
                  goto LAcceptanceTasksAcceptedForAllLevels;                  
              end;
          end;
        end;
      otherwise
        if ((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) and (SetInSet(Actr.MainPersons,Acptrw.AcceptanceBy)) then begin
          switch (Acptrw.ActionType) begin
            case kAcceptanceTypeActionByOne:
              SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
              switch (Acptrw.NextLevel) begin
                case kAcceptanceNextLevelRequired:
                  testf = AcceptanceTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                case kAcceptanceNextLevelNone:
                  i = rwcnt;
                  goto LAcceptanceTasksAcceptedForAllLevels;                  
              end;
              i = rwcnt;
              goto LAcceptanceTasksAcceptedForAllLevels;
            case kAcceptanceTypeActionByAll:
              testf = AcceptanceTasksForCurrentLevelDone(fromfilename,fromsernr,Acptr.AcceptanceActType,Acptr.AcceptedActType,Acptr.ForwardedActType,Acptrw,actcnt);
              if (testf) then begin
                switch (Acptrw.NextLevel) begin
                  case kAcceptanceNextLevelRequired:
                    testf = AcceptanceTasksExistForAllLevels(fromfilename,fromsernr,Acptr,i+1,true,actcnt);
                  case kAcceptanceNextLevelNone:
                    i = rwcnt;
                    goto LAcceptanceTasksAcceptedForAllLevels;                    
                end;
              end;
              i = rwcnt;
              goto LAcceptanceTasksAcceptedForAllLevels;
          end;
        end;
    end;
  end;
LAcceptanceTasksAcceptedForAllLevels:;  
  AcceptanceTasksAcceptedForAllLevels = testf;
  return;
end;

global
updating procedure SetAcceptanceTasksRejectedForAllLevels(string fromfilename,string fromsernr,val bc1v,record ActVc Actr,record AcceptanceRulesVc Acptr)
begin
  Boolean testf;
  Integer i,rwcnt;
  row AcceptanceRulesVc Acptrw;  
    
  testf = true;
  rwcnt = MatRowCnt(Acptr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Acptr,i,Acptrw);
    if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
      switch (Acptrw.ActionType) begin
        case kAcceptanceTypeActionByOne:
          SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
          goto LSetAcceptanceTasksRejectedForAllLevels;
        case kAcceptanceTypeActionByAll:
          SetOtherPersonsActivityTypestoNoNeed(fromfilename,fromsernr,Actr,Acptr,Acptrw);
          goto LSetAcceptanceTasksRejectedForAllLevels;
      end;
    end;
  end;
LSetAcceptanceTasksRejectedForAllLevels:;  
  return;
end;

function Boolean IsValidApprovalActType(record ActVc Actr,record AcceptanceRulesVc Acptr)
begin
  boolean res;

  if (Actr.ActType==Acptr.AcceptanceActType) then begin 
    res = true;
  end;
  IsValidApprovalActType = res;
  return;
end;

global
updating procedure SetLinkedRecordAcceptanceStatus(record ActVc Actr)
begin
  record ORVc ORr;
  record ORVc oldORr;
  record IntORVc IntORr;
  record IntORVc oldIntORr;
  record QTVc QTr;
  record QTVc oldQTr;
  record ExpVc Expr;
  record ExpVc oldExpr;
  record POVc POr;
  record POVc oldPOr;
  record IVVc IVr;
  record IVVc oldIVr;
  record VIVc VIr;
  record VIVc oldVIr;
  record TBBUVc TBBUr;
  record TBBUVc oldTBBUr;
  record PUVc PUr,oldPUr;
  record SDVc SDr,oldSDr;
  record OPVc OPr,oldOPr;
  record LeaveApplicationVc LAr;
  record LeaveApplicationVc oldLAr;
  record LeaveTransferVc LTr;
  record LeaveTransferVc oldLTr;
  record AcceptanceRulesVc Acptr;
  Integer i,rwcnt;
  Boolean testf;
  val bc1v;
  
  switch (Actr.FromFileName) begin
    case "LeaveApplicationVc":
      LAr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(LAr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceLeaveApplication,LAr.Employee,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or LAr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;
          bc1v = GetAcceptanceSum_LeaveApplicationVc(LAr);
          RecordCopy(oldLAr,LAr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            LAr.AcceptanceStatus = kAcceptanceStateRejected;
            LAr.OKFlag = 0;
            RecordUpdate(oldLAr,LAr,true);
            SetAcceptanceTasksRejectedForAllLevels("LeaveApplicationVc",LAr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("LeaveApplicationVc",LAr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              LAr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldLAr,LAr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(LAr,1,true);
//                RecordCopy(oldLAr,LAr);
                LAr.OKFlag = 1;
                RecordUpdate(oldLAr,LAr,true);
              end else begin
                RecordUpdate(oldLAr,LAr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "LeaveTransferVc":
      LTr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(LTr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceLeaveTransfer,LTr.Employee,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or LTr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_LeaveTransferVc(LTr);
          RecordCopy(oldLTr,LTr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            LTr.AcceptanceStatus = kAcceptanceStateRejected;
            LTr.OKFlag = 0;
            RecordUpdate(oldLTr,LTr,true);
            SetAcceptanceTasksRejectedForAllLevels("LeaveTransferVc",LTr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("LeaveTransferVc",LTr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              LTr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldLTr,LTr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              
              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(LTr,1,true);
//                RecordCopy(oldLTr,LTr);
                LTr.OKFlag = 1;
                RecordUpdate(oldLTr,LTr,true);
              end else begin
                RecordUpdate(oldLTr,LTr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "POVc":
      POr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(POr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptancePO,POr.VECode,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or POr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_POVc(POr);
          RecordCopy(oldPOr,POr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            POr.AcceptanceStatus = kAcceptanceStateRejected;
            POr.OKFlag = 0;
            RecordUpdate(oldPOr,POr,true);
            SetAcceptanceTasksRejectedForAllLevels("POVc",POr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("POVc",POr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              POr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldPOr,POr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(POr,1,true);
//                RecordCopy(oldPOr,POr);
                POr.OKFlag = 1;
                RecordUpdate(oldPOr,POr,true);
              end else begin
                RecordUpdate(oldPOr,POr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "IVVc":
      IVr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(IVr,1,true)) then begin
        switch (IVr.InvType) begin
          case kInvoiceTypeCashInvoiceReceiptPRT:
            Acptr.Register = kAcceptanceCashIV;
          case kInvoiceTypeCash:
            Acptr.Register = kAcceptanceCashIV;
          case kInvoiceTypeCredit:
            Acptr.Register = kAcceptanceCredIV;
          case kInvoiceTypeCreditSpecialSales:
            Acptr.Register = kAcceptanceCredIV;
          otherwise
            Acptr.Register = kAcceptanceIV;
        end;
        if (ReadAcceptanceRules(Acptr.Register,IVr.CustCode,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or IVr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_IVVc(IVr);
          RecordCopy(oldIVr,IVr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            IVr.AcceptanceStatus = kAcceptanceStateRejected;
            RecordUpdate(oldIVr,IVr,true);
            SetAcceptanceTasksRejectedForAllLevels("IVVc",IVr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("IVVc",IVr.SerNr,bc1v,Actr,Acptr);            
            if (testf) then begin
              IVr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldIVr,IVr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(IVr,1,true);
//                RecordCopy(oldIVr,IVr);
                IVr.OKFlag = 1;
                RecordUpdate(oldIVr,IVr,true);
              end else begin
                RecordUpdate(oldIVr,IVr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "TBBUVc":
      TBBUr.PRCode = Actr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceTBBU,TBBUr.CustCode,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or TBBUr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_TBBUVc(TBBUr);
          RecordCopy(oldTBBUr,TBBUr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            TBBUr.AcceptanceStatus = kAcceptanceStateRejected;
            RecordUpdate(oldTBBUr,TBBUr,true);
            SetAcceptanceTasksRejectedForAllLevels("TBBUVc",TBBUr.PRCode,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("TBBUVc",TBBUr.PRCode,bc1v,Actr,Acptr);
            if (testf) then begin
              TBBUr.AcceptanceStatus = kAcceptanceStateApproved;
              RecordUpdate(oldTBBUr,TBBUr,false);
            end;
          end;
        end;
      end;
    case "VIVc":
      VIr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(VIr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceVI,VIr.VECode,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or VIr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_VIVc(VIr);
          RecordCopy(oldVIr,VIr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            VIr.AcceptanceStatus = kAcceptanceStateRejected;
            VIr.OKFlag = 0;
            RecordUpdate(oldVIr,VIr,true);
            SetAcceptanceTasksRejectedForAllLevels("VIVc",VIr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("VIVc",VIr.SerNr,bc1v,Actr,Acptr);            
            if (testf) then begin
              VIr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldVIr,VIr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(VIr,1,true);
//                RecordCopy(oldVIr,VIr);
                VIr.OKFlag = 1;
                RecordUpdate(oldVIr,VIr,true);
              end else begin
                RecordUpdate(oldVIr,VIr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "ORVc":
      ORr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(ORr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceOR,ORr.CustCode,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or ORr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_ORVc(ORr);
          RecordCopy(oldORr,ORr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            ORr.AcceptanceStatus = kAcceptanceStateRejected;
            ORr.OKFlag = 0;
            RecordUpdate(oldORr,ORr,true);
            SetAcceptanceTasksRejectedForAllLevels("ORVc",ORr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("ORVc",ORr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              ORr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldORr,ORr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(ORr,1,true);
//                RecordCopy(oldORr,ORr);
                ORr.OKFlag = 1;
                RecordUpdate(oldORr,ORr,true);
              end else begin
                RecordUpdate(oldORr,ORr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "QTVc":
      QTr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(QTr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceQT,QTr.CustCode,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or QTr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_QTVc(QTr);
          RecordCopy(oldQTr,QTr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            QTr.AcceptanceStatus = kAcceptanceStateRejected;
            RecordUpdate(oldQTr,QTr,true);
            SetAcceptanceTasksRejectedForAllLevels("QTVc",QTr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("QTVc",QTr.SerNr,bc1v,Actr,Acptr);            
            if (testf) then begin
              QTr.AcceptanceStatus = kAcceptanceStateApproved;
              RecordUpdate(oldQTr,QTr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
            end;
          end;
        end;
      end;
    case "IntORVc":
      IntORr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(IntORr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceIntOR,"",Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or IntORr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
//          bc1v = MulRateToBase1(IntORr.CurncyCode,IntORr.Sum4,IntORr.FrRate,IntORr.ToRateB1,IntORr.ToRateB2,IntORr.BaseRate1,IntORr.BaseRate2,DefaultCurRoundOff);
          bc1v = GetAcceptanceSum_IntORVc(IntORr);
          RecordCopy(oldIntORr,IntORr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            IntORr.AcceptanceStatus = kAcceptanceStateRejected;
            RecordUpdate(oldIntORr,IntORr,true);
            SetAcceptanceTasksRejectedForAllLevels("IntORVc",IntORr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("IntORVc",IntORr.SerNr,bc1v,Actr,Acptr);
            if (testf) then begin
              IntORr.AcceptanceStatus = kAcceptanceStateApproved;
              if (Acptr.OKApproved!=0) then begin
//                IntORr.OKFlag = 1;
              end;
              RecordUpdate(oldIntORr,IntORr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
            end;
          end;
        end;
      end;
    case "ExpVc":
      Expr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(Expr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceExp,"",Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or Expr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_ExpVc(Expr);
          RecordCopy(oldExpr,Expr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            Expr.AcceptanceStatus = kAcceptanceStateRejected;
            Expr.OKFlag = 0;
            RecordUpdate(oldExpr,Expr,true);
            SetAcceptanceTasksRejectedForAllLevels("ExpVc",Expr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("ExpVc",Expr.SerNr,bc1v,Actr,Acptr);
//Trace("Expr.SerNr " & Expr.SerNr," Actr.ActResult " & Actr.ActResult & " testf " & testf);      
            if (testf) then begin
              Expr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldExpr,Expr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(Expr,1,true);
//                RecordCopy(oldExpr,Expr);
                Expr.OKFlag = 1;
                Expr.OKSign = AddObjectToObjectList(Expr.OKSign,Actr.MainPersons);        
                RecordUpdate(oldExpr,Expr,true);
              end else begin
                RecordUpdate(oldExpr,Expr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "PUVc":
      PUr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(PUr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptancePU,PUr.VECode,Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or PUr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_PUVc(PUr);
          RecordCopy(oldPUr,PUr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            PUr.AcceptanceStatus = kAcceptanceStateRejected;
            PUr.OKFlag = 0;
            RecordUpdate(oldPUr,PUr,true);
            SetAcceptanceTasksRejectedForAllLevels("PUVc",PUr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("PUVc",PUr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              PUr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldPUr,PUr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(PUr,1,true);
//                RecordCopy(oldPUr,PUr);
                PUr.OKFlag = 1;
                RecordUpdate(oldPUr,PUr,true);
              end else begin
                RecordUpdate(oldPUr,PUr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "SDVc":
      SDr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(SDr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceSD,"",Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or SDr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_SDVc(SDr);
          RecordCopy(oldSDr,SDr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            SDr.AcceptanceStatus = kAcceptanceStateRejected;
            SDr.OKFlag = 0;
            RecordUpdate(oldSDr,SDr,true);
            SetAcceptanceTasksRejectedForAllLevels("SDVc",SDr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("SDVc",SDr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              SDr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldSDr,SDr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(SDr,1,true);
//                RecordCopy(oldSDr,SDr);
                SDr.OKFlag = 1;
                RecordUpdate(oldSDr,SDr,true);
              end else begin
                RecordUpdate(oldSDr,SDr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
    case "OPVc":
      OPr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(OPr,1,true)) then begin
        if (ReadAcceptanceRules(kAcceptanceOP,"",Acptr)) then begin
          if (IsValidApprovalActType(Actr,Acptr)==false or OPr.AcceptanceStatus>=kAcceptanceStateApproved) then begin 
            goto LLSetLinkedRecordAcceptanceStatus;
          end;        
          bc1v = GetAcceptanceSum_OPVc(OPr);
          RecordCopy(oldOPr,OPr);
          if (Actr.ActResult==Acptr.RejectedActType) then begin
            OPr.AcceptanceStatus = kAcceptanceStateRejected;
            OPr.DoneFlag = 0;
            RecordUpdate(oldOPr,OPr,true);
            SetAcceptanceTasksRejectedForAllLevels("OPVc",OPr.SerNr,bc1v,Actr,Acptr);
          end;
          if (Actr.ActResult==Acptr.AcceptedActType) then begin
            testf = AcceptanceTasksAcceptedForAllLevels("OPVc",OPr.SerNr,bc1v,Actr,Acptr);                        
            if (testf) then begin
              OPr.AcceptanceStatus = kAcceptanceStateApproved;
//              RecordUpdate(oldOPr,OPr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck

              if (Acptr.OKApproved!=0) then begin
//                ReadFirstMain(OPr,1,true);
//                RecordCopy(oldOPr,OPr);
                OPr.OrderedFlag = 1;
                OPr.DoneFlag = 1;
                RecordUpdate(oldOPr,OPr,true);
              end else begin
                RecordUpdate(oldOPr,OPr,false);//no vcrecordupdate triger, if we want vcrecordupdate we need to do recordcheck
              end;
            end;
          end;
        end;
      end;
  end;
LLSetLinkedRecordAcceptanceStatus:;  
  return;
end;

global
updating function Integer TestLinkedRecordCanBeOKed(record ActVc Actr)
begin
  Integer res;
  record LeaveApplicationVc LAr;
  record LeaveApplicationVc dummyLAr;
  record LeaveTransferVc LTr;
  record LeaveTransferVc dummyLTr;
  record POVc POr;
  record POVc dummyPOr;
  record IVVc IVr;
  record IVVc dummyIVr;
  record TBBUVc TBBUr;
  record TBBUVc dummyTBBUr;
  record VIVc VIr;
  record VIVc dummyVIr;
  record ORVc ORr;
  record ORVc dummyORr;
  record QTVc QTr;
  record QTVc dummyQTr;
  record IntORVc IntORr;
  record IntORVc dummyIntORr;
  record ExpVc Expr;
  record ExpVc dummyExpr;
  record PUVc PUr;
  record PUVc dummyPUr;
  record SDVc SDr;
  record SDVc dummySDr;
  record OPVc OPr;
  record OPVc dummyOPr;
  
  switch (Actr.FromFileName) begin
    case "LeaveApplicationVc":
      LAr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(LAr,1,true)) then begin
        SetRecordCheckVc("LeaveApplicationVc");
        RecordCopy(dummyLAr,LAr);
        res = LeaveApplicationVcRecordCheck(LAr,dummyLAr,Rs_update,1);
      end;
    case "LeaveTransferVc":
      LTr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(LTr,1,true)) then begin
        SetRecordCheckVc("LeaveTransferVc");
        RecordCopy(dummyLTr,LTr);
        res = LeaveTransferVcRecordCheck(LTr,dummyLTr,Rs_update,1);
      end;
    case "POVc":
      POr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(POr,1,true)) then begin
        SetRecordCheckVc("POVc");
        RecordCopy(dummyPOr,POr);
        res = POVcRecordCheck(POr,dummyPOr,Rs_update,1);
      end;
    case "IVVc":
      IVr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(IVr,1,true)) then begin
        SetRecordCheckVc("IVVc");
        RecordCopy(dummyIVr,IVr);
        res = IVVcRecordCheck(IVr,dummyIVr,Rs_update,1);
      end;
    case "TBBUVc":
      TBBUr.PRCode = Actr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        SetRecordCheckVc("TBBUVc");
        RecordCopy(dummyTBBUr,TBBUr);
        res = TBBUVcRecordCheck(TBBUr,dummyTBBUr,Rs_update,1);
      end;
    case "VIVc":
      VIr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(VIr,1,true)) then begin
        SetRecordCheckVc("VIVc");
        RecordCopy(dummyVIr,VIr);
        res = VIVcRecordCheck(VIr,dummyVIr,Rs_update,1);
      end;
    case "ORVc":
      ORr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(ORr,1,true)) then begin
        SetRecordCheckVc("ORVc");
        RecordCopy(dummyORr,ORr);
        res = ORVcRecordCheck(ORr,dummyORr,Rs_update,1);
      end;
    case "QTVc":
      QTr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(QTr,1,true)) then begin
        SetRecordCheckVc("QTVc");
        RecordCopy(dummyQTr,QTr);
        res = QTVcRecordCheck(QTr,dummyQTr,Rs_update,1);
      end;
    case "IntORVc":
      IntORr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(IntORr,1,true)) then begin
        SetRecordCheckVc("IntORVc");
        RecordCopy(dummyIntORr,IntORr);
        res = IntORVcRecordCheck(IntORr,dummyIntORr,Rs_update,1);
      end;
    case "ExpVc":
      Expr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(Expr,1,true)) then begin
        SetRecordCheckVc("ExpVc");
        RecordCopy(dummyExpr,Expr);
        res = ExpVcRecordCheck(Expr,dummyExpr,Rs_update,1);
      end;
    case "PUVc":
      PUr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(PUr,1,true)) then begin
        SetRecordCheckVc("PUVc");
        RecordCopy(dummyPUr,PUr);
        res = PUVcRecordCheck(PUr,dummyPUr,Rs_update,1);
      end;
    case "SDVc":
      SDr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(SDr,1,true)) then begin
        SetRecordCheckVc("SDVc");
        RecordCopy(dummySDr,SDr);
        res = SDVcRecordCheck(SDr,dummySDr,Rs_update,1);
      end;
    case "OPVc":
      OPr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(OPr,1,true)) then begin
        SetRecordCheckVc("OPVc");
        RecordCopy(dummyOPr,OPr);
        res = OPVcRecordCheck(OPr,dummyOPr,Rs_update,1);
      end;
  end;
  SetRecordCheckVc("ActVc");
  TestLinkedRecordCanBeOKed = res;
  return;
end;

global
function Integer SendForAcceptance_LeaveTransferVc(var record LeaveTransferVc LTr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (LTr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_LeaveTransferVc;
  end;
  bc1v = GetAcceptanceSum_LeaveTransferVc(LTr);  
  LTr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceLeaveTransfer,LTr.Employee,bc1v,LTr.AcceptanceStatus,ApproverSelection,LTr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (LTr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_LeaveTransferVc:;
  SendForAcceptance_LeaveTransferVc = err;
  return;
end;

/*
global
updating function Integer SendForAcceptance_LeaveTransferVc(var record LeaveTransferVc LTr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  record UserVc Userr;
  
  Userr.CustCode = LTr.Employee;
  if (ReadFirstKey("CustCode",Userr,1,true)==false) then begin
//    ??
//    goto LSendForAcceptance_LeaveTransferVc;
  end;
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceLeaveTransfer,LTr.Employee,Acptr)) then begin
    bc1v = GetAcceptanceSum_LeaveTransferVc(LTr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (LTr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  LTr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("LeaveTransferVc",LTr.SerNr,Userr.Code,blankval,"",LTr.Employee,Acptr,foundAcptrw);
  end;
LSendForAcceptance_LeaveTransferVc:;  
  SendForAcceptance_LeaveTransferVc = err;
  return;
end;
*/
global
function Integer SendForAcceptance_LeaveApplicationVc(var record LeaveApplicationVc LAr,var record RcVc RepSpec)
begin
  Integer err;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  Integer ApproverSelection;
  string 255 AvailApprovers,FYIPersons;
  
  err = 0;
  switch (LAr.AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
    case kAcceptanceStateNotRequested:
    otherwise
      err = 22400;
      goto LSendForAcceptance_LeaveApplicationVc;
  end;
  bc1v = GetAcceptanceSum_LeaveApplicationVc(LAr);  
  LAr.AcceptanceStatus = NewAcceptanceStatus(kAcceptanceLeaveApplication,LAr.Employee,bc1v,LAr.AcceptanceStatus,ApproverSelection,LAr.AcceptanceBy,AvailApprovers,FYIPersons);
  RepSpec.ArtMode = ApproverSelection;
  RepSpec.f11 = FYIPersons;
  RepSpec.f12 = AvailApprovers;
  switch (LAr.AcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
  end;
LSendForAcceptance_LeaveApplicationVc:;
  SendForAcceptance_LeaveApplicationVc = err;
  return;
end;

/*
global
updating function Integer SendForAcceptance_LeaveApplicationVc(var record LeaveApplicationVc LAr)
begin
  Integer err,resAcceptanceStatus;
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  row AcceptanceRulesVc foundAcptrw;
  Integer i,rwcnt;
  val bc1v;
  record UserVc Userr;

  Userr.CustCode = LAr.Employee;
  if (ReadFirstKey("CustCode",Userr,1,true)==false) then begin
//    ??
//    goto LSendForAcceptance_LeaveApplicationVc;
  end;
  resAcceptanceStatus = kAcceptanceStateNotRequired;
  if (ReadAcceptanceRules(kAcceptanceLeaveApplication,LAr.Employee,Acptr)) then begin
    bc1v = GetAcceptanceSum_LeaveApplicationVc(LAr);
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if (bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit)) then begin
        switch (LAr.AcceptanceStatus) begin
          case kAcceptanceStateNotStarted:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          case kAcceptanceStateNotRequested:
            switch (Acptrw.ActionType) begin
              case kAcceptanceTypeActionNone:
                resAcceptanceStatus = kAcceptanceStateNotRequired;
              case kAcceptanceTypeActionByOne:
                resAcceptanceStatus = kAcceptanceStatePending;
              case kAcceptanceTypeActionByAll:
                resAcceptanceStatus = kAcceptanceStatePending;
            end;
            err = 0;
            CopyRow(Acptr,Acptrw,foundAcptrw);
          otherwise
            err = 22400;
        end;
        i = rwcnt;
      end;
    end;
  end;
  LAr.AcceptanceStatus = resAcceptanceStatus;
  switch (resAcceptanceStatus) begin
    case kAcceptanceStateNotRequired:
      err = 22404;
    case kAcceptanceStatePending:
      CreateAcceptanceAlert("LeaveApplicationVc",LAr.SerNr,Userr.Code,LAr.Days,USetStr(22430),LAr.Name,Acptr,foundAcptrw);
  end;
LSendForAcceptance_LeaveApplicationVc:; 
  SendForAcceptance_LeaveApplicationVc = err;
  return;
end;
*/

global
updating procedure CancelApprovalRequestActivities(Integer kregister,string FromFileName,string FromSerNr,string contactcode)
begin
  record ActVc Actr;
  record ActVc oldActr;
  Boolean found,testf;
  record AcceptanceRulesVc Acptr;

  if (ReadAcceptanceRules(kregister,contactcode,Acptr)==false) then begin
    goto LCancelApprovalRequestActivities;
  end;

  Actr.FromFileName = FromFileName;
  Actr.FromSerNr = FromSerNr;
  found = true;
  while (LoopKey("FromFileName",Actr,2,found)) begin
    if (Actr.FromFileName!=FromFileName) then begin found = false; end;
    if (Actr.FromSerNr!=FromSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Actr.ActResult==Acptr.CancelledActType) then begin testf = false; end;
      if ((Actr.ActType!=Acptr.AcceptanceActType) and (Actr.ActType!=Acptr.FYIActType)) then begin testf = false; end;
      if (Actr.OKFlag!=0) then begin testf = false; end;
      if (testf) then begin
        RecordCopy(oldActr,Actr);
        Actr.OKFlag = 1;
        if (nonblank(Acptr.CancelledActType)) then begin
          Actr.ActResult = Acptr.CancelledActType;
        end;
        if (RecordUpdate(oldActr,Actr,false)==0) then begin
        end;
      end;
    end;
  end;
LCancelApprovalRequestActivities:;
  return;
end;

global
function Integer CancelApprovalRequestAllowed(Integer kregister,string FromFileName,string FromSerNr,Integer AcceptanceStatus,string contactcode)
begin
  Integer res;
  record ActVc Actr;
  Boolean found,testf;
  record AcceptanceRulesVc Acptr;
  
  if (AcceptanceStatus!=kAcceptanceStatePending) then begin
    res = 22406;
    goto LCancelApprovalRequestAllowed;
  end;
  if (ReadAcceptanceRules(kregister,contactcode,Acptr)==false) then begin
    res = 22399;
    goto LCancelApprovalRequestAllowed;
  end;
  if (Acptr.CancelApprovalRequest==0) then begin
    res = 22406;
    goto LCancelApprovalRequestAllowed;
  end;

  Actr.FromFileName = FromFileName;
  Actr.FromSerNr = FromSerNr;
  found = true;
  while (LoopKey("FromFileName",Actr,2,found)) begin
    if (Actr.FromFileName!=FromFileName) then begin found = false; end;
    if (Actr.FromSerNr!=FromSerNr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Actr.ActResult==Acptr.CancelledActType) then begin testf = false; end;
      if (Actr.ActType!=Acptr.AcceptanceActType) then begin testf = false; end;
      if (testf) then begin
        if (Actr.OKFlag!=0) then begin 
          res = 22406;
          goto LCancelApprovalRequestAllowed;
        end;
      end;
    end;
  end;
LCancelApprovalRequestAllowed:;
  CancelApprovalRequestAllowed = res;
  return;
end;

global
function Boolean AcceptanceActivityExists(Integer kregister,string FromFileName,string FromSerNr,string contactcode)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  res = false;
  if (ReadAcceptanceRules(kregister,contactcode,Acptr)==false) then begin
    goto LAcceptanceActivityExists;
  end;

  Actr.FromFileName = FromFileName;
  Actr.FromSerNr = FromSerNr;
  res = ReadFirstKey("FromFileName",Actr,2,true);

LAcceptanceActivityExists:;
  AcceptanceActivityExists = res;
  return;
end;

global
function Integer EditingAcceptanceRejectedAllowed(Integer kregister,string FromFileName,string FromSerNr,Integer AcceptanceStatus,string contactcode)
begin
  Integer res;
  record AcceptanceRulesVc Acptr;
  
  if (AcceptanceStatus!=kAcceptanceStateRejected) then begin
    res = 22407;
    goto LEditingAcceptanceRejectedAllowed;
  end;
  if (ReadAcceptanceRules(kregister,contactcode,Acptr)==false) then begin
    res = 22399;
    goto LEditingAcceptanceRejectedAllowed;
  end;
  if (Acptr.EditRejected==0) then begin
    res = 22407;
    goto LEditingAcceptanceRejectedAllowed;
  end;
LEditingAcceptanceRejectedAllowed:;
  EditingAcceptanceRejectedAllowed = res;
  return;
end;

global
updating procedure SendforNextLevelManualAcceptance(record RcVc RepSpec,record ActVc Actr)
begin
  record AcceptanceRulesVc Acptr;
  row AcceptanceRulesVc Acptrw;
  Integer i,rwcnt;
  string 255 contact,sender,crncy;
  val bc1v,amount;
  record ExpVc Expr;
  record IntORVc IntORr;
  record IVVc IVr;
  record OPVc OPr;
  record ORVc ORr;
  record QTVc QTr;
  record POVc POr;
  record PUVc PUr;
  record LeaveApplicationVc LAr;
  record LeaveTransferVc LTr;
  record TBBUVc TBBUr;
  record VIVc VIr;

  switch (Actr.FromFileName) begin
    case "ExpVc": 
      Acptr.Register = kAcceptanceExp;
      Expr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(Expr,1,true)) then begin
        contact = "";
        bc1v = GetAcceptanceSum_ExpVc(Expr);  
        sender = Expr.Person;
        amount = Expr.PayVal;
        crncy = Expr.CurncyCode;
      end;
    case "IntORVc": 
      Acptr.Register = kAcceptanceIntOR;
      IntORr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IntORr,1,true)) then begin
        contact = IntORr.OurUser;
        bc1v = GetAcceptanceSum_IntORVc(IntORr);  
        sender = IntORr.OurUser;
        amount = IntORr.Total;
        crncy = "";
      end;
    case "IVVc": 
      Acptr.Register = kAcceptanceIV;
      IVr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(IVr,1,true)) then begin
        switch (IVr.InvType) begin
          case kInvoiceTypeCashInvoiceReceiptPRT:
            Acptr.Register = kAcceptanceCashIV;
          case kInvoiceTypeCash:
            Acptr.Register = kAcceptanceCashIV;
          case kInvoiceTypeCredit:
            Acptr.Register = kAcceptanceCredIV;
          case kInvoiceTypeCreditSpecialSales:
            Acptr.Register = kAcceptanceCredIV;
          otherwise
            Acptr.Register = kAcceptanceIV;
        end;
        contact = IVr.CustCode;
        bc1v = GetAcceptanceSum_IVVc(IVr);  
        sender = IVr.SalesMan;
        amount = IVr.Sum4;
        crncy = IVr.CurncyCode;
      end;
    case "LeaveApplicationVc": 
      Acptr.Register = kAcceptanceLeaveApplication;
      LAr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(LAr,1,true)) then begin
        contact = "";
        bc1v = GetAcceptanceSum_LeaveApplicationVc(LAr);  
        sender = LAr.Employee;
        amount = blankval;
        crncy = "";
      end;
    case "LeaveTransferVc": 
      Acptr.Register = kAcceptanceLeaveApplication;
      LTr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(LTr,1,true)) then begin
        contact = "";
        bc1v = GetAcceptanceSum_LeaveTransferVc(LTr);  
        sender = LTr.Employee;
        amount = blankval;
        crncy = "";
      end;
    case "OPVc": 
      Acptr.Register = kAcceptanceOP;
      OPr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(OPr,1,true)) then begin
        contact = "";
        bc1v = GetAcceptanceSum_OPVc(OPr);  
        sender = CurrentUser;
        amount = OPr.CurPayVal;
        crncy = OPr.PayCurCode;
      end;
    case "ORVc": 
      Acptr.Register = kAcceptanceOR;
      ORr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        contact = ORr.CustCode;
        bc1v = GetAcceptanceSum_ORVc(ORr);  
        sender = ORr.SalesMan;
        amount = ORr.Sum4;
        crncy = ORr.CurncyCode;
      end;
    case "POVc": 
      Acptr.Register = kAcceptancePO;
      POr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(POr,1,true)) then begin
        contact = POr.VECode;
        bc1v = GetAcceptanceSum_POVc(POr);  
        sender = POr.SalesMan;
        amount = POr.Sum4;
        crncy = POr.CurncyCode;
      end;
    case "PUVc": 
      Acptr.Register = kAcceptancePU;
      PUr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(PUr,1,true)) then begin
        contact = PUr.VECode;
        bc1v = GetAcceptanceSum_PUVc(PUr);  
        sender = "";
        amount = PUr.PayVal;
        crncy = PUr.CurncyCode;
      end;
    case "QTVc": 
      Acptr.Register = kAcceptanceQT;
      QTr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(QTr,1,true)) then begin
        contact = QTr.CustCode;
        bc1v = GetAcceptanceSum_QTVc(QTr);  
        sender = QTr.SalesMan;
        amount = QTr.Sum4;
        crncy = QTr.CurncyCode;
      end;
    case "TBBUVc": 
      Acptr.Register = kAcceptanceTBBU;
      TBBUr.PRCode = Actr.FromSerNr;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        contact = TBBUr.CustCode;
        bc1v = GetAcceptanceSum_TBBUVc(TBBUr);  
        sender = TBBUr.SalesMan;
        amount = TBBUr.TotSum;
        crncy = TBBUr.CurncyCode;
      end;
    case "VIVc": 
      Acptr.Register = kAcceptanceVI;
      VIr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(VIr,1,true)) then begin
        contact = VIr.VECode;
        bc1v = GetAcceptanceSum_VIVc(VIr);  
        sender = VIr.SalesMan;
        amount = VIr.PayVal;
        crncy = VIr.CurncyCode;
      end;
/*
    case "SDVc":
      SDr.SerNr = Actr.FromSerNr;
      if (ReadFirstMain(SDr,1,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,SDr,CurrentCompany);
      end;
*/
  end;
  if (ReadAcceptanceRules(Acptr.Register,contact,Acptr)) then begin
    rwcnt = MatRowCnt(Acptr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Acptr,i,Acptrw);
      if ((bc1v<=Acptrw.Limit) or (blank(Acptrw.Limit))) and (SetInSet(RepSpec.f1,Acptrw.AcceptanceBy)) then begin
        CreateAcceptanceAlert(Actr.FromFileName,Actr.FromSerNr,sender,amount,crncy,contact,Acptr,Acptrw,RepSpec.f1,RepSpec.f2);
        goto LSendforNextLevelManualAcceptance;
      end;
    end;
  end;
LSendforNextLevelManualAcceptance:;
  return;
end;

global
updating procedure OKLinkedRecord_ActVc(record ActVc Actr)
//approval records are oked in other place
begin
  record KitchenOrderVc KOr;
  record KitchenOrderVc oldKOr;
  
  switch (Actr.FromFileName) begin
    case "KitchenOrderVc":
      KOr.SerNr = StringToLongInt(Actr.FromSerNr);
      if (ReadFirstMain(KOr,1,true)) then begin
        RecordCopy(oldKOr,KOr);
        KOr.EndDate = Actr.EndDate;
        if (blankdate(KOr.EndDate)) then begin
          KOr.EndDate = CurrentDate;
        end;
        KOr.EndTime = Actr.EndTime;
        if (blanktime(KOr.EndTime)) then begin
          KOr.EndTime = CurrentTime;
        end;
        KOr.OKFlag = 1;
        RecordUpdate(oldKOr,KOr,true);
      end;
  end;
  return;
end;

global
function Boolean AcceptanceApprovedTasksForCurrentLevelDone(string FromFileName,string FromSerNr,string AcceptanceActType,string AcceptedActType,string ForwardedActType,row AcceptanceRulesVc Acptrw,var Integer actcnt)
begin
  Boolean res;
  record ActVc Actr;
  Boolean found,testf;
  string 255 index;
  Integer pos;
  string 255 user;
  
  actcnt = 0;
  if (blank(AcceptedActType)) then begin
    res = false;
    goto LAcceptanceApprovedTasksForCurrentLevelDone;
  end;
  res = true;
  pos = 0;
  ExtractObj(Acptrw.AcceptanceBy,pos,user);
  while (nonblank(user)) begin
    ResetLoop(Actr);
    index = "Acceptance:" & user;  
    Actr.ActType = AcceptanceActType;
    Actr.TodoFlag = kTodoFlagTodo;
    Actr.FromFileName = FromFileName;
    Actr.FromSerNr = FromSerNr;
    found = true;
    while (LoopBackKey(index,Actr,4,found)) begin
      if (Actr.ActType!=AcceptanceActType) then begin found = false; end;
      if (Actr.TodoFlag!=kTodoFlagTodo) then begin found = false; end;
      if (Actr.FromFileName!=FromFileName) then begin found = false; end;
      if (Actr.FromSerNr!=FromSerNr) then begin found = false; end;
      if (found) then begin
        testf = true;
        if (Actr.OKFlag==1) then begin testf = false; end;
        if (testf) then begin
          if (Actr.OKFlag==0) then begin
            res = false;
            goto LAcceptanceApprovedTasksForCurrentLevelDone;
          end else begin
//if last activity for specific user is in accepted state we can ignore previous rejections
            if (nonblank(AcceptedActType)) then begin
              if (Actr.ActResult!=AcceptedActType) then begin 
                res = false;
                goto LAcceptanceApprovedTasksForCurrentLevelDone;
              end;
              if (Actr.ActResult!=AcceptedActType and Actr.ActResult!=ForwardedActType) then begin
                res = false;
              end;
              if (Actr.ActResult==AcceptedActType) then begin
                res = true;
              end;
//              found = false;              
            end;
          end;
          actcnt = actcnt + 1;
        end;
      end;
    end;
    ExtractObj(Acptrw.AcceptanceBy,pos,user);
  end;
LAcceptanceApprovedTasksForCurrentLevelDone:;  
  AcceptanceApprovedTasksForCurrentLevelDone = res;
  return;
end;

global
function Integer TestAcceptanceStatus(Integer AcceptanceStatus)
begin
  Integer res;
  
  res = 0;
  switch (AcceptanceStatus) begin
    case kAcceptanceStateNotStarted:
      res = 22401;
    case kAcceptanceStateNotRequired:
      ;
    case kAcceptanceStateNotRequested:
      res = 22401;
    case kAcceptanceStatePending:
      res = 22401;
    case kAcceptanceStateApproved:
      ;
    case kAcceptanceStateRejected:
      res = 22402;
  end;
  TestAcceptanceStatus = res;
  return;
end;

global
procedure PrintAcceptanceActivities(Integer kregister,string fromfilename,string fromsernr,string custcode)
begin
  record ActVc Actr;
  Boolean found,testf,firstf;
  record ActTypeVc ActTyper;
  record AcceptanceRulesVc Acptr;

  ReadAcceptanceRules(kregister,custcode,Acptr);

  firstf = true;
  Actr.FromFileName = fromfilename;
  Actr.FromSerNr = fromsernr;
  found = true;
  while (LoopKey("FromFileName",Actr,2,found)) begin
    if (Actr.FromFileName!=fromfilename) then begin found = false; end;
    if (Actr.FromSerNr!=fromsernr) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (Actr.ActType==Acptr.FYIActType) then begin testf = false; end;
      if (testf) then begin 
        testf = false;
        if (Actr.ActType==Acptr.AcceptanceActType) then begin testf = true; end;
        if (Actr.ActType==Acptr.FYIActType) then begin testf = true; end;
        if (Actr.ActType==Acptr.AcceptedActType) then begin testf = true; end;
        if (Actr.ActType==Acptr.RejectedActType) then begin testf = true; end;
        if (Actr.ActType==Acptr.NotNeededActType) then begin testf = true; end;
        if (Actr.ActType==Acptr.CancelledActType) then begin testf = true; end;
        if (Actr.ActType==Acptr.ForwardedActType) then begin testf = true; end;
      end;
      if (testf) then begin
        if (firstf) then begin
           Black_Divider(0,1);
           StartFormat(15);
           EndFormat; 
           StartFormat(15);
           OutString(0,0,USetStr(28340),false);
           EndFormat;
           StartFormat(15);
           OutString(0,0,USetStr(28341),false);
           OutString(80,0,USetStr(28342),false);
           OutString(150,0,USetStr(28343),false);
           OutString(350,0,USetStr(28344),false);
           EndFormat;
           Gray_Divider(0,1);
           firstf = false;
         end;

         StartFormat(15);
         OutDate(0,0,Actr.TransDate,false);
         OutString(80,0,Actr.MainPersons,false);
         if (blank(Actr.ActResult)) or (Actr.OKFlag==0) then begin
           OutString(150,0,USetStr(28345),false);
         end else begin
           ActTyper.Code = Actr.ActResult;
           ReadFirstMain(ActTyper,1,true);
           OutString(150,0,ActTyper.Comment,false);
           OutDate(350,0,Actr.EndDate,false);
         end;
         EndFormat;

      end;
    end;
  end;

  return;
end;