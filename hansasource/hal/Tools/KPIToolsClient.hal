external function Boolean DisplayAdditionalFields();
external function date KPIPreviousPeriodEnd(Integer,Integer,Integer);
external function date KPICurrentPeriodEnd(Integer,Integer,Integer);
external function date KPIPeriodStart(Integer,Integer,Integer,Date);
remote procedure RecalculateKPIsForUser(string,string);
remote procedure RecalculateKPIs(string);

global
procedure RecalculateKPIsClient(string arg)
begin
  if (nonblank(CurrentUser)) then begin
    threadremote.RecalculateKPIsForUser(arg,CurrentUser);
  end else begin
    threadremote.RecalculateKPIs(arg);
  end;
  return;  
end;

global
procedure RecalculateKPIsClientNoArg()
begin
  RecalculateKPIsClient("force");
  return;  
end;

global
procedure RecalculateKPIsClientRefresh(string arg,string user)
begin
  UpdateBrowses("KPIDefVc");
  return;  
end;


global
procedure KPIRunReport(record KPIDefVc KPIr)
begin
  record RcVc RepSpec;
  Date startdate,enddate;
  
//  startdate = KPIPeriodStart(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits,KPIPreviousPeriodEnd(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits));
//why previous preiod and not current ? 
  enddate = KPICurrentPeriodEnd(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits);
  startdate = KPIPeriodStart(KPIr.PeriodLength,KPIr.PeriodType,KPIr.PeriodUnits,enddate);
  
  switch (KPIr.Type) begin
    case kKPITypeAR:
      RepSpec.repname = "ARRn";
      ReportDefaults(RepSpec,"ARRClass");
      RepSpec.f2 = KPIr.Person;
      RepSpec.flags[21] = 1;
    case kKPITypeAP:
      RepSpec.repname = "APRn";
      ReportDefaults(RepSpec,"APRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.flags[21] = 1;
    case kKPITypeARDue:
      RepSpec.repname = "ARRn";
      ReportDefaults(RepSpec,"ARRClass");
      RepSpec.f2 = KPIr.Person;
      RepSpec.d1 = enddate;
    case kKPITypeARDueNoDisputed:
      RepSpec.repname = "ARRn";
      ReportDefaults(RepSpec,"ARRClass");
      RepSpec.f2 = KPIr.Person;
      RepSpec.flags[3] = 1;
    case kKPITypeAPDue:
      RepSpec.repname = "APRn";
      ReportDefaults(RepSpec,"APRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.d1 = enddate;
    case kKPITypeORNr:
      RepSpec.repname = "OrdRn";
      ReportDefaults(RepSpec,"ORJRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.Period2Str = startdate & ":" & enddate;
      RepSpec.sStartDate = startdate;
      RepSpec.sEndDate = enddate;
      RepSpec.LastAcc = KPIr.ItemCode;
      RepSpec.f5 = KPIr.ItemGroup;
      RepSpec.f6 = KPIr.ItemClass;
      RepSpec.flags[4] = 1;
      RepSpec.flags[13] = 1;
      RepSpec.flags[2] = 1;
      RepSpec.flags[9] = 1;
    case kKPITypeORStock:
      RepSpec.repname = "OrderStockRn";
      ReportDefaults(RepSpec,"OrderStockRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.flags[2] = 1;
      RepSpec.flags[7] = 1;
      RepSpec.flags[3] = 1;
      RepSpec.flags[4] = 1;
      RepSpec.LastAcc = KPIr.ItemCode;
      RepSpec.f3 = KPIr.ItemGroup;
      if nonblank(KPIr.ItemGroup) then begin 
        RepSpec.Comparison = 1;
      end;  
      RepSpec.f9 = KPIr.ItemClass;
      RepSpec.flags[17] = 1;
      RepSpec.flags[18] = 1;
    case kKPITypeActivityNr:
      RepSpec.repname = "ActPersRn";
      ReportDefaults(RepSpec,"ActPersRClass");
      RepSpec.f2 = KPIr.Person;
      RepSpec.f3 = KPIr.ActType;
      RepSpec.FirstAcc = KPIr.ActTypeGr;
      RepSpec.Period2Str = startdate & ":" & enddate;
      RepSpec.sStartDate = startdate;
      RepSpec.sEndDate = enddate;
      RepSpec.flags[1] = 1;
      RepSpec.flags[2] = 1;
      RepSpec.flags[3] = 1;
      RepSpec.flags[4] = 1;
      RepSpec.flags[5] = 1;
      RepSpec.flags[10] = 1;      
      RepSpec.flags[7] = 1;
    case kKPITypeActivityCostTime:
      RepSpec.repname = "ActPersRn";
      ReportDefaults(RepSpec,"ActPersRClass");
      RepSpec.f2 = KPIr.Person;
      RepSpec.f3 = KPIr.ActType;
      RepSpec.FirstAcc = KPIr.ActTypeGr;
      RepSpec.Period2Str = startdate & ":" & enddate;
      RepSpec.sStartDate = startdate;
      RepSpec.sEndDate = enddate;
      RepSpec.flags[1] = 1;
      RepSpec.flags[2] = 1;
      RepSpec.flags[3] = 1;
      RepSpec.flags[7] = 1;
    case kKPITypeQTNr:
      RepSpec.repname = "QTJRn";
      ReportDefaults(RepSpec,"QTJRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.Period2Str = startdate & ":" & enddate;
      RepSpec.sStartDate = startdate;
      RepSpec.sEndDate = enddate;
      RepSPec.Stext = RepSpec.Period2Str;
      RepSpec.flags[3] = 1;
      RepSpec.flags[4] = 1;
      RepSpec.f4 = KPIr.ItemCode;
      RepSpec.f3 = KPIr.ItemGroup;
      RepSpec.f5 = KPIr.ItemClass;
    case kKPITypeQTStock:
      RepSpec.repname = "QTPipelineRn";
      ReportDefaults(RepSpec,"QTPipelineRClass");
      RepSpec.f2 = KPIr.Person;
    case kKPITypeSalesInclVAT:
      RepSpec.repname = "InvoiceRn";
      ReportDefaults(RepSpec,"IVJRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.Stext = KPIr.ItemGroup;
      RepSpec.f10 = KPIr.ItemCode;
      RepSpec.Comment = KPIr.ItemClass;
      RepSpec.Period2Str = startdate & ":" & enddate;
      RepSpec.sStartDate = startdate;
      RepSpec.sEndDate = enddate;
      RepSpec.flags[15] = 1;
      RepSpec.flags[2] = 1;
      RepSpec.flags[3] = 1;
      RepSpec.flags[4] = 1;
      RepSpec.flags[5] = 1;
      RepSpec.flags[6] = 1;
      if (nonblank(KPIr.ItemGroup)) or (nonblank(KPIr.ItemCode)) then begin
        RepSpec.ArtMode = 1;
      end;
    case kKPITypeSalesExclVAT:
      RepSpec.repname = "InvoiceRn";
      ReportDefaults(RepSpec,"IVJRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.Stext = KPIr.ItemGroup;
      RepSpec.f10 = KPIr.ItemCode;
      RepSpec.Comment = KPIr.ItemClass;
      RepSpec.Period2Str = startdate & ":" & enddate;
      RepSpec.sStartDate = startdate;
      RepSpec.sEndDate = enddate;
      RepSpec.flags[2] = 1;
      RepSpec.flags[3] = 1;
      RepSpec.flags[4] = 1;
      RepSpec.flags[5] = 1;
      RepSpec.flags[6] = 1;
      if (nonblank(KPIr.ItemGroup)) or (nonblank(KPIr.ItemCode)) then begin
        RepSpec.ArtMode = 1;
      end;
    case kKPITypeGPPrc:
      RepSpec.repname = "IVGPRn";
      ReportDefaults(RepSpec,"IVGPRClass");
      RepSpec.AccStr = KPIr.Person;
      RepSpec.FirstAcc = KPIr.ItemCode;
      RepSpec.LastAcc = KPIr.ItemGroup;
      RepSpec.Period2Str = startdate & ":" & enddate;
      RepSpec.sStartDate = startdate;
      RepSpec.sEndDate = enddate;
      RepSpec.flags[2] = 1;
      RepSpec.flags[3] = 1;
      RepSpec.flags[4] = 1;
      RepSpec.f6 = KPIr.ItemClass;
  end;
  
  if (nonblank(RepSpec.repname)) then begin
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);
  end;
  
  return;
end;

global
function Boolean MasterWClassRLClick(Integer wn,Integer rownr)
begin
  record KPIDefVc KPIr;
  record RcVc RepSpec;
  longint nwn;
  string 255 url;
  
  if (ReadMarkedRecord(wn,KPIr)) then begin
    url = KPIr.URL;
    if (url<>"") then begin
      switch (KPIr.OpenType) begin
        case kNavLinkOpenInline:
          if (Left(url,7)<>"http://") then begin
            url = "http://" & url;
          end;
          nwn = OpenWindow("WebPageClass",1,0,url,"",RepSpec);
        case kNavLinkOpenExternal:
          OpenWebBrowser(url);
      end;
    end else begin
      KPIRunReport(KPIr);
    end;
  end;
end;

global
function Boolean MasterWClassOnClose(Integer wn,Integer wn2)
begin
  Boolean res;

  if (IsStandardProduct) then begin
    res = true;
    if (DisplayAdditionalFields) then begin res = false; end;
  end;
  MasterWClassOnClose = res;
  return;
end;
