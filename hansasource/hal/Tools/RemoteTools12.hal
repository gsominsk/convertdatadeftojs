external procedure NextM4SerialNumber(string,var string);
external function string 255 GetLegalInvoiceNrString(row LegalInvNrBlock,string);
external function string 255 GetLegalInvoiceNrSerie(row LegalInvNrBlock,string);
external procedure LogAreaToFile(string,area);
external procedure YcToStr(Integer,var string);
external procedure FindFiscalYear(Date,var Date,var Date);
external procedure GetLegalInvNrRow(string,var row LegalInvNrBlock);
external procedure NextOfficialSerNr(string,LongInt,Date,string,var string);
external function string 50 NextLegalSerNr(string,LongInt,Date,string,string,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Integer CountNumberOfInvoicePrintPages(record IVVc);
external function string 255 FindINObjects(string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure ReverseString(string,var string);
external procedure ExtractObj(string,var Integer,var string);
external function Integer InString2(string,string);

/*
global
function string 255 GenerateSAFTHash(string filename,date InvoiceDate,date SystemEntryDate,time SystemEntryDateTime,string OfficialSerNr,val GrossTotal,string previousSignature,string timezone)
begin
  string 255 res;
  string 255 journalid,InvoiceNo;
  row LegalInvNrBlock LINrbrw;

  res = DateToString(InvoiceDate,"YYYY-MM-DD");
  res = res & ";";

  res = res & DateToString(SystemEntryDate,"YYYY-MM-DD");
  res = res & "T";
  if (nonblank(SystemEntryDateTime)) then begin
    res = res & SystemEntryDateTime & timezone;
  end else begin
    res = res & "00:00:00" & timezone;
  end;
  res = res & ";";
  GetLegalInvNrRow(OfficialSerNr,LINrbrw);
  switch (filename) begin
    case "SHVc":
      YcToStr(SHYc,journalid);
    case "RetVc":
      YcToStr(RetYc,journalid);
    case "StockMovVc":
      YcToStr(StMovYc,journalid);
    case "ORVc":
      journalid = USetStr(1641);
    case "IVVc":
      YcToStr(IVYc,journalid);
    case "IVCashVc":
      YcToStr(RestAccYc,journalid);
  end;
  InvoiceNo = journalid & " " & GetLegalInvoiceNrSerie(LINrbrw,OfficialSerNr) & "/" & GetLegalInvoiceNr(LINrbrw,OfficialSerNr);
  res = res & InvoiceNo;
  res = res & ";";

  res = res & ValToString(GrossTotal,M4Val,"",".",0);
  res = res & ";";

  if (nonblank(previousSignature)) then begin
    res = res & previousSignature;
  end else begin
    res = res & "";
  end;

  GenerateSAFTHash = CryptSAFTHash(res);
  return;
end;
*/

global
function string 255 GenerateSAFTHash(Integer Type,string filename,date InvoiceDate,date SystemEntryDate,time SystemEntryDateTime,string OfficialSerNr,val GrossTotal,string previousSignature,string timezone)
begin
  string 255 res,tstr;
  Area chain;
  string 255 journalid,InvoiceNo;
  row LegalInvNrBlock LINrbrw;

  AddTextToArea(DateToString(InvoiceDate,"YYYY-MM-DD"),chain);
  AddTextToArea(";",chain);

  tstr = DateToString(SystemEntryDate,"YYYY-MM-DD");
  tstr = tstr & "T";
  if (nonblank(SystemEntryDateTime)) then begin
    tstr = tstr & SystemEntryDateTime & timezone;
  end else begin
    tstr = tstr & "00:00:00" & timezone;
  end;

  AddTextToArea(tstr,chain);
  AddTextToArea(";",chain);
  
  GetLegalInvNrRow(OfficialSerNr,LINrbrw);
  switch (filename) begin
    case "QTVc":
      journalid = "FATPROF";
    case "ProformaQTVc":
//      YcToStr(ProformaQTVc,journalid);
      journalid = "FATPROF";
    case "SHVc":
//      YcToStr(SHYc,journalid);
      journalid = "GREM";
    case "RetVc":
//      YcToStr(RetYc,journalid);
      journalid = "DEVOLU";
    case "RetPUVc":
      journalid = "DEVFF";
    case "StockMovVc":
//      YcToStr(StMovYc,journalid);
      switch (Type) begin
        case kStockMovTypeNormal:
          journalid = "MOVST";
        case kStockMovTypeOwnGoodsTransport:
          journalid = "MOVGA";
        case kStockMovTypeConsigment:
          journalid = "MOVGC";
        case kStockMovTypeThirdEntGoodsTransport:
          journalid = "MOVGT";
        case kStockMovTypeGlobalTransport:
          journalid = "MOVGL";
      end;
    case "ConsStockMovInvVc":
      journalid = "FCCS";      
    case "ORVc":
//      journalid = USetStr(1641);
      journalid = "ENC";
    case "IVVc":
      switch (Type) begin
        case kInvoiceTypeCashInvoiceReceiptPRT:
          journalid = "FR";
          journalid = USetStr(17269);
        case kInvoiceTypeCash:
          journalid = "FC";
          journalid = USetStr(17251);
        case kInvoiceTypeCredit:
          journalid = "FC";
          journalid = USetStr(17252);
        case kInvoiceTypeInterest:
          journalid = "FC";
          journalid = USetStr(17253);
        case kInvoiceTypeCreditSpecialSales:
          journalid = "FC";
          journalid = USetStr(17252);
        otherwise
//          YcToStr(IVYc,journalid);
          journalid = "FC";
          journalid = USetStr(17250);
      end;
    case "IVCashVc":
//      YcToStr(RestAccYc,journalid);
      journalid = "POS";
  end;
  InvoiceNo = journalid & " " & GetLegalInvoiceNrSerie(LINrbrw,OfficialSerNr) & "/" & GetLegalInvoiceNrString(LINrbrw,OfficialSerNr);
  AddTextToArea(InvoiceNo,chain);
  AddTextToArea(";",chain);

  AddTextToArea(ValToString(GrossTotal,M4Val,"",".",0),chain);
  AddTextToArea(";",chain);

  if (nonblank(previousSignature)) then begin
    AddTextToArea(previousSignature,chain);
  end;

//  LogAreaToFile("_GenerateSAFTHash" & OfficialSerNr & ".txt",chain);
  GenerateSAFTHash = CryptSAFTHash(chain);
  return;
end;

global
function string 255 SAFTHashControl(string hash)
begin
  string 255 res;
  
  if (nonblank(hash)) then begin
    res = mid(hash,0,1);
    res = res & "";
    res = res & mid(hash,10,1);
    res = res & "";
    res = res & mid(hash,20,1);
    res = res & "";
    res = res & mid(hash,30,1);
    res = res & "-";
    res = res & USetStr(26700) & " " & USetStr(990) & " /AT " & USetStr(1802);
  end;
  
  SAFTHashControl = res;
  return;
end;

function string 255 GetPreviousORHash(record ORVc curORr)
begin
  record ORVc prevORr;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curORr.OrdDate,fsd,fed);
  GetLegalInvNrRow(curORr.OfficialSerNr,LINrbrw);

//1st invoice in Number series  
  if (curORr.OfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
    res = "";
    goto LGetPreviousORHash;
  end;
  
/*  
//1st invoice in FIscal year  
  ResetLoop(prevORr);
  prevORr.RegDate = curORr.RegDate;
  prevORr.RegTime = curORr.RegTime;
  if (LoopBackKey("RegDate",prevORr,2,true)) then begin
    if (prevORr.SerNr==curORr.SerNr) then begin
      if (LoopBackKey("RegDate",prevORr,2,true)) then begin
      end;
    end;
    if (prevORr.OrdDate<fsd) then begin testf = true; end;
    if (prevORr.OrdDate>fed) then begin testf = true; end;
    if (testf) then begin
      res = "";
      goto LGetPreviousORHash;
    end;
  end;
*/  
  ResetLoop(prevORr);
  prevORr.OfficialSerNr = curORr.OfficialSerNr;
  if (LoopBackKey("OfficialSerNr",prevORr,1,true)) then begin
    if (prevORr.SerNr==curORr.SerNr) then begin
      if (LoopBackKey("OfficialSerNr",prevORr,1,true)) then begin
      end;
    end;
    res = prevORr.Hash;
  end;
LGetPreviousORHash:;  
  GetPreviousORHash = res;
  return;
end;

procedure AddPortugueseSAFTHashToOR(var record ORVc ORr)
begin
  string 255 tstr;
  val v;
  
  if (HasLocalization("PRT")==false) then begin
    goto LAddPortugueseSAFTHashToOR;
  end;
  
  //YcToStr(IVYc,tstr);
  //tstr = tstr & " 1/" & IVr.SerNr;

  v = MulRateToBase1(ORr.CurncyCode,ORr.Sum4,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
  if (blank(v)) then begin v = 0.00; end;

  ORr.Hash = GenerateSAFTHash(1,"ORVc",ORr.OrdDate,ORr.RegDate,ORr.RegTime,ORr.OfficialSerNr,v,GetPreviousORHash(ORr),"");
  ORr.HashKeyVersion = CryptSAFTHashKeyVersion;

LAddPortugueseSAFTHashToOR:;
  return;
end;

function string 255 GetPreviousIVHash(record IVVc curIVr)
begin
  record IVVc prevIVr;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curIVr.InvDate,fsd,fed);
  if (nonblank(curIVr.OfficialSerNr)) then begin
    GetLegalInvNrRow(curIVr.OfficialSerNr,LINrbrw);

//1st invoice in Number series  
    if (curIVr.OfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
      res = "";
      goto LGetPreviousIVHash;
    end;
  end;
    
/*    
//1st invoice in FIscal year  
  ResetLoop(prevIVr);
  prevIVr.RegDate = curIVr.RegDate;
  prevIVr.RegTime = curIVr.RegTime;
  if (LoopBackKey("RegDate",prevIVr,2,true)) then begin
    if (prevIVr.SerNr==curIVr.SerNr) then begin
      if (LoopBackKey("RegDate",prevIVr,2,true)) then begin
      end;
    end;
    if (prevIVr.TransDate<fsd) then begin testf = true; end;
    if (prevIVr.TransDate>fed) then begin testf = true; end;
    if (testf) then begin
      res = "";
      goto LGetPreviousIVHash;
    end;
  end;  
*/
  
  ResetLoop(prevIVr);
  prevIVr.OfficialSerNr = curIVr.OfficialSerNr;
  if (LoopBackKey("OfficialSerNr",prevIVr,1,true)) then begin
    if (prevIVr.SerNr==curIVr.SerNr) then begin
      if (LoopBackKey("OfficialSerNr",prevIVr,1,true)) then begin
      end;
    end;
    if (prevIVr.SerNr!=curIVr.SerNr) then begin
      res = prevIVr.Hash;
    end;
  end;
//LogText(0,"GetPreviousIVHash prevIVr.SerNr " & prevIVr.SerNr);  
LGetPreviousIVHash:;  
  GetPreviousIVHash = res;
  return;
end;

global
procedure AddPortugueseSAFTHashToIV(var record IVVc IVr)
begin
  string 255 tstr;
  val v;
  
  if (HasLocalization("PRT")==false) then begin
    goto LAddPortugueseSAFTHashToIV;
  end;
  
  //YcToStr(IVYc,tstr);
  //tstr = tstr & " 1/" & IVr.SerNr;
  
  if (IVr.InclVAT>0) then begin
    v = MulRateToBase1(IVr.CurncyCode,IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);  //Sum4 excludes some taxes
  end else begin
    v = MulRateToBase1(IVr.CurncyCode,IVr.Sum3+IVr.Sum1,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);  //Sum4 excludes some taxes
  end;
  
  if (blank(v)) then begin v = 0.00; end;

  IVr.Hash = GenerateSAFTHash(IVr.InvType,"IVVc",IVr.InvDate,IVr.RegDate,IVr.RegTime,IVr.OfficialSerNr,v,GetPreviousIVHash(IVr),"");
  IVr.HashKeyVersion = CryptSAFTHashKeyVersion;
LAddPortugueseSAFTHashToIV:;
  return;
end;

function string 255 GetPreviousIVCashHash(record IVCashVc curIVCashr)
begin
  record IVCashVc prevIVCashr;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curIVCashr.InvDate,fsd,fed);
  GetLegalInvNrRow(curIVCashr.OfficialSerNr,LINrbrw);

//1st invoice in Number series  
  if (curIVCashr.OfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
    res = "";
    goto LGetPreviousIVCashHash;
  end;
  
//1st invoice in FIscal year  
  ResetLoop(prevIVCashr);
  prevIVCashr.RegDate = curIVCashr.RegDate;
  prevIVCashr.RegTime = curIVCashr.RegTime;
  if (LoopBackKey("RegDate",prevIVCashr,2,true)) then begin
    if (prevIVCashr.SerNr==curIVCashr.SerNr) then begin
      if (LoopBackKey("RegDate",prevIVCashr,2,true)) then begin
      end;
    end;
    if (prevIVCashr.TransDate<fsd) then begin testf = true; end;
    if (prevIVCashr.TransDate>fed) then begin testf = true; end;
    if (testf) then begin
      res = "";
      goto LGetPreviousIVCashHash;
    end;
  end;
  
  ResetLoop(prevIVCashr);
  prevIVCashr.OfficialSerNr = curIVCashr.OfficialSerNr;
  if (LoopBackKey("OfficialSerNr",prevIVCashr,1,true)) then begin
    if (prevIVCashr.SerNr==curIVCashr.SerNr) then begin
      if (LoopBackKey("OfficialSerNr",prevIVCashr,1,true)) then begin
      end;
    end;
    res = prevIVCashr.Hash;
  end;
LGetPreviousIVCashHash:;  
  GetPreviousIVCashHash = res;
  return;
end;

function string 255 GetPreviousRestAccVcHash(record RestAccVc curRestAccp)
begin
  record RestAccVc prevRestAccp;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curRestAccp.TransDate,fsd,fed);
  GetLegalInvNrRow(curRestAccp.OfficialSerNr,LINrbrw);

//1st invoice in Number series  
  if (curRestAccp.OfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
    res = "";
    goto LGetPreviousRestAccVcHash;
  end;
  
//1st invoice in FIscal year  
  ResetLoop(prevRestAccp);
  prevRestAccp.TransDate = curRestAccp.TransDate;
  prevRestAccp.TransTime = curRestAccp.TransTime;
  if (LoopBackKey("TransDate",prevRestAccp,2,true)) then begin
    if (prevRestAccp.SerNr==curRestAccp.SerNr) then begin
      if (LoopBackKey("TransDate",prevRestAccp,2,true)) then begin
      end;
    end;
    if (prevRestAccp.TransDate<fsd) then begin testf = true; end;
    if (prevRestAccp.TransDate>fed) then begin testf = true; end;
    if (testf) then begin
      res = "";
      goto LGetPreviousRestAccVcHash;
    end;
  end;
  
  ResetLoop(prevRestAccp);
  prevRestAccp.OfficialSerNr = curRestAccp.OfficialSerNr;
  if (LoopBackKey("OfficialSerNr",prevRestAccp,1,true)) then begin
    if (prevRestAccp.SerNr==curRestAccp.SerNr) then begin
      if (LoopBackKey("OfficialSerNr",prevRestAccp,1,true)) then begin
      end;
    end;
    res = prevRestAccp.Hash;
  end;
LGetPreviousRestAccVcHash:;  
  GetPreviousRestAccVcHash = res;
  return;
end;

procedure AddPortugueseSAFTHashToIVCash(var record IVCashVc IVCashr)
begin
  val v;
  
  if (HasLocalization("PRT")==false) then begin
    goto LAddPortugueseSAFTHashToIVCash;
  end;

  v = MulRateToBase1(IVCashr.CurncyCode,IVCashr.Sum4,IVCashr.FrRate,IVCashr.ToRateB1,IVCashr.ToRateB2,IVCashr.BaseRate1,IVCashr.BaseRate2,DefaultCurRoundOff);
  if (blank(v)) then begin v = 0.00; end;

  IVCashr.Hash = GenerateSAFTHash(1,"IVCashVc",IVCashr.InvDate,IVCashr.RegDate,IVCashr.RegTime,IVCashr.OfficialSerNr,v,GetPreviousIVCashHash(IVCashr),"");
  IVCashr.HashKeyVersion = CryptSAFTHashKeyVersion;

LAddPortugueseSAFTHashToIVCash:;  
  return;
end;

procedure AddPortugueseSAFTHashToRestAccVc(var record RestAccVc RestAccp)
begin
  val v;
  
  if (HasLocalization("PRT")==false) then begin
    goto LAddPortugueseSAFTHashToRestAccVc;
  end;

  //v = MulRateToBase1(RestAccp.CurncyCode,RestAccp.Sum4,RestAccp.FrRate,RestAccp.ToRateB1,RestAccp.ToRateB2,RestAccp.BaseRate1,RestAccp.BaseRate2,DefaultCurRoundOff);
  
  // No base rate variables in the header
  v = RestAccp.Sum4;
  if (blank(v)) then begin v = 0.00; end;
  RestAccp.Hash = GenerateSAFTHash(1,"RestAccVc",RestAccp.TransDate,RestAccp.TransDate,RestAccp.TransTime,RestAccp.OfficialSerNr,v,GetPreviousRestAccVcHash(RestAccp),"");
  RestAccp.HashKeyVersion = CryptSAFTHashKeyVersion;

LAddPortugueseSAFTHashToRestAccVc:;  
  return;
end;

function string 255 GetPreviousStockMovHash(record StockMovVc curStockMovr)
begin
  record StockMovVc prevStockMovr;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curStockMovr.TransDate,fsd,fed);
  GetLegalInvNrRow(curStockMovr.OfficialSerNr,LINrbrw);

//1st invoice in Number series  
  if (curStockMovr.OfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
    res = "";
    goto LGetPreviousStockMovHash;
  end;
  
//1st invoice in FIscal year  
  ResetLoop(prevStockMovr);
  prevStockMovr.RegDate = curStockMovr.RegDate;
  prevStockMovr.RegTime = curStockMovr.RegTime;
  if (LoopBackKey("RegDate",prevStockMovr,2,true)) then begin
    if (prevStockMovr.SerNr==curStockMovr.SerNr) then begin
      if (LoopBackKey("RegDate",prevStockMovr,2,true)) then begin
      end;
    end;
    if (nonblank(prevStockMovr.ThrouLocation)) then begin
      if (prevStockMovr.SentTransDate<fsd) then begin testf = true; end;
      if (prevStockMovr.SentTransDate>fed) then begin testf = true; end;
    end else begin
      if (prevStockMovr.TransDate<fsd) then begin testf = true; end;
      if (prevStockMovr.TransDate>fed) then begin testf = true; end;
    end;
    if (testf) then begin
      res = "";
      goto LGetPreviousStockMovHash;
    end;
  end; 
  
  ResetLoop(prevStockMovr);
  prevStockMovr.OfficialSerNr = curStockMovr.OfficialSerNr;
  if (LoopBackKey("OfficialSerNr",prevStockMovr,1,true)) then begin
    if (prevStockMovr.SerNr==curStockMovr.SerNr) then begin
      if (LoopBackKey("OfficialSerNr",prevStockMovr,1,true)) then begin
      end;
    end;
    res = prevStockMovr.Hash;
  end;
LGetPreviousStockMovHash:;  
  GetPreviousStockMovHash = res;
  return;
end;

global
procedure AddPortugueseSAFTHashToStockMov(var record StockMovVc StockMovr)
begin
  val v,sum4;
  row StockMovVc SMrw;
  Integer i,rwcnt;
  
  if (HasLocalization("PRT")==false) then begin
    goto LAddPortugueseSAFTHashToStockMov;
  end;
  if (blank(StockMovr.OfficialSerNr)) then begin
    goto LAddPortugueseSAFTHashToStockMov;
  end;
  rwcnt = MatRowCnt(StockMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(StockMovr,i,SMrw);
    if (nonblank(StockMovr.ThrouLocation)) then begin
      sum4 = sum4 + SMrw.SentFIFORowVal;
    end else begin
      sum4 = sum4 + SMrw.FIFORowVal;
    end;
  end;
    
  v = MulRateToBase1(StockMovr.CurncyCode,sum4,StockMovr.FrRate,StockMovr.ToRateB1,StockMovr.ToRateB2,StockMovr.BaseRate1,StockMovr.BaseRate2,DefaultCurRoundOff);
  if (blank(v)) then begin v = 0.00; end;

  StockMovr.Hash = GenerateSAFTHash(StockMovr.StockMovType,"StockMovVc",StockMovr.TransDate,StockMovr.RegDate,StockMovr.RegTime,StockMovr.OfficialSerNr,0.00,GetPreviousStockMovHash(StockMovr),"");
  StockMovr.HashKeyVersion = CryptSAFTHashKeyVersion;
  
  if (blank(StockMovr.PlanSendDate)) then begin
    StockMovr.PlanSendDate = CurrentDate;
  end;
  if (blank(StockMovr.PlanSendTime)) then begin
    StockMovr.PlanSendTime = CurrentTime;
  end;

LAddPortugueseSAFTHashToStockMov:;  
  return;
end;

function string 255 GetPreviousSHHash(record SHVc curSHr)
begin
  record SHVc prevSHr;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curSHr.ShipDate,fsd,fed);
  GetLegalInvNrRow(curSHr.OfficialSerNr,LINrbrw);

//1st invoice in Number series  
  if (curSHr.OfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
    res = "";
    goto LGetPreviousSHHash;
  end;
  
//1st invoice in FIscal year  
  ResetLoop(prevSHr);
  prevSHr.RegDate = curSHr.RegDate;
  prevSHr.RegTime = curSHr.RegTime;
  if (LoopBackKey("RegDate",prevSHr,2,true)) then begin
    if (prevSHr.SerNr==curSHr.SerNr) then begin
      if (LoopBackKey("RegDate",prevSHr,2,true)) then begin
      end;
    end;
    if (prevSHr.ShipDate<fsd) then begin testf = true; end;
    if (prevSHr.ShipDate>fed) then begin testf = true; end;
    if (testf) then begin
      res = "";
      goto LGetPreviousSHHash;
    end;
  end;
  
  ResetLoop(prevSHr);
  prevSHr.OfficialSerNr = curSHr.OfficialSerNr;
  if (LoopBackKey("OfficialSerNr",prevSHr,1,true)) then begin
    if (prevSHr.SerNr==curSHr.SerNr) then begin
      if (LoopBackKey("OfficialSerNr",prevSHr,1,true)) then begin
      end;
    end;
    res = prevSHr.Hash;
  end;
LGetPreviousSHHash:;  
  GetPreviousSHHash = res;
  return;
end;

global
procedure AddPortugueseSAFTHashToSH(var record SHVc SHr)
begin
  val v;
  row SHVc SHrw;
  Integer i,rwcnt;
  
  if (HasLocalization("PRT")==false) then begin
    goto LAddPortugueseSAFTHashToSH;
  end;
  if (blank(SHr.OfficialSerNr)) then begin
    goto LAddPortugueseSAFTHashToSH;
  end;
  rwcnt = MatRowCnt(SHr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SHr,i,SHrw);
    v = v + SHrw.FIFORowVal;
  end;

  if (blank(v)) then begin v = 0.00; end;

  SHr.Hash = GenerateSAFTHash(1,"SHVc",SHr.ShipDate,SHr.RegDate,SHr.RegTime,SHr.OfficialSerNr,0.00,GetPreviousSHHash(SHr),"");
  SHr.HashKeyVersion = CryptSAFTHashKeyVersion;

LAddPortugueseSAFTHashToSH:;  
  return;
end;

procedure AddLegalInvNrRow(record LegalInvNrBlock LINrb,row LegalInvNrBlock addLINrbrw,Integer loopcnt)
begin
  Integer i,rwcnt;
  row LegalInvNrBlock LINrbrw;
  Boolean addrowf;

  addrowf = true;
  rwcnt = MatRowCnt(LINrb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LINrb,i,LINrbrw);
    if (LINrbrw.Serie==addLINrbrw.Serie) and (LINrbrw.TSerStart==addLINrbrw.TSerStart) and (LINrbrw.TSerEnd==addLINrbrw.TSerEnd) then begin
      addrowf = false;
    end;
  end;
  if (addrowf) then begin
    MatRowPut(LINrb,MatRowCnt(LINrb),addLINrbrw);
  end;
  return;
end;

global
procedure PrepareOfficialSerialNrBlock_IVVc(var record LegalInvNrBlock LINrb)
begin
  record LegalInvNrBlock orgLINrb;
  record LegalInvNrBlock tmpLINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  Boolean testf,loopf;
  Boolean testlocmach,testbranch,testclass;
  Integer loopcnt;
  
  BlockLoad(orgLINrb);  
  rwcnt = MatRowCnt(orgLINrb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(orgLINrb,i,LINrbrw);
    if ((LINrbrw.RegType==kOfficialNumTypeAllIVVc) or 
        (LINrbrw.RegType==kOfficialNumTypeInterestIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeCashIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeCreditIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeSpecialSalesIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeManualIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeManualCashIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeManualPOSIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeRecoverdCashIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeRecoverdPOSIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeRecoverdCreditIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeRecoverdInterestIVVc) or
        (LINrbrw.RegType==kOfficialNumTypeManualCreditIVVc) or 
        (LINrbrw.RegType==kOfficialNumTypeCashInvoiceReceiptPRTIVVc) or 
        (LINrbrw.RegType==kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc) or 
        (LINrbrw.RegType==kOfficialNumTypeManualCashInvoiceReceiptIVVc) or 
        (LINrbrw.RegType==kOfficialNumTypeLiquidationIVVc) or 
        (LINrbrw.RegType==kOfficialNumTypeReceiptIVVc) or 
        (LINrbrw.RegType==kOfficialNumTypeManualInterestIVVc)
        ) 
    then begin 
      MatRowPut(tmpLINrb,MatRowCnt(tmpLINrb),LINrbrw);
    end;
  end;

  rwcnt = MatRowCnt(tmpLINrb);
  
  loopcnt = 1;    
  loopf = true;
  while (loopf) begin
    switch (loopcnt) begin
      case 1:
        testclass = true;
        testlocmach = true;
        testbranch = true;
      case 2:
        testclass = false;
        testlocmach = true;
        testbranch = true;
      case 3:
        testclass = true;
        testlocmach = true;
        testbranch = false;
      case 4:
        testclass = true;
        testlocmach = false;
        testbranch = true;
      case 5:
        testclass = false;
        testlocmach = true;
        testbranch = false;
      case 6:
        testclass = false;
        testlocmach = false;
        testbranch = true;
      case 7:
        testclass = true;
        testlocmach = false;
        testbranch = false;
      case 8:
        testclass = false;
        testlocmach = false;
        testbranch = false;
      otherwise
        loopf = false;
    end;
    if (loopf) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(tmpLINrb,i,LINrbrw);
        testf = true;
        if (testlocmach) then begin
          if (blank(LINrbrw.LocalMachineCode)) then begin
            testf = false;
          end;
        end;
        if (testbranch) then begin
          if (blank(LINrbrw.Branch)) then begin
            testf = false;
          end;
        end;
        if (testclass) then begin
          if (blank(LINrbrw.CClass)) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          AddLegalInvNrRow(LINrb,LINrbrw,loopcnt);
        end;
      end;
    end;
    loopcnt = loopcnt + 1;
  end;
  return;
end;

/*
look in LegalInvNrSClassArrayOnOpen when changing
*/
global
function Boolean TestNextOfficialSerialNr_IVVc(row LegalInvNrBlock LINrbrw,string cuclass,record IVVc IVr,Boolean notmanualf)
begin
  Boolean testf;
  
  testf = false;
  switch (LINrbrw.RegType) begin
    case kOfficialNumTypeAllIVVc:
      testf = true;
    case kOfficialNumTypeInterestIVVc:
      if (IVr.InvType==kInvoiceTypeInterest or IVr.InvType==kInvoiceTypeDebit) and (IVr.Status==kRecordStatusNone) then begin 
        testf = true;
      end;
    case kOfficialNumTypeManualInterestIVVc:
      if  (IVr.InvType==kInvoiceTypeInterest or IVr.InvType==kInvoiceTypeDebit) and (IVr.Status==kRecordStatusManual) then begin 
        testf = true;
      end;
    case kOfficialNumTypeRecoverdInterestIVVc:
      if ((IVr.InvType==kInvoiceTypeInterest) or (IVr.InvType==kInvoiceTypeDebit)) and (IVr.Status==kRecordStatusRecovered) then begin 
        testf = true;
      end;
    case kOfficialNumTypeCashIVVc:
      if (IVr.InvType==kInvoiceTypeCash) and (IVr.Status!=kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeManualCashIVVc:
      if (IVr.InvType==kInvoiceTypeCash) and (IVr.Status!=kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeRecoverdCashIVVc:
      if (IVr.InvType==kInvoiceTypeCash) and (IVr.Status==kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeCashInvoiceReceiptPRTIVVc:
      if (IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.Status!=kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeManualCashInvoiceReceiptIVVc:
      if (IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.Status!=kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc:
      if (IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.Status==kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeCreditIVVc:
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.Status!=kRecordStatusManual) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeRecoverdCreditIVVc:
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.Status!=kRecordStatusManual) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeManualCreditIVVc:
      if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.Status==kRecordStatusManual) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeSpecialSalesIVVc:
      if (IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin testf = true; end;
    case kOfficialNumTypeLiquidationIVVc:
      if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeDownpayment or IVr.InvType==kInvoiceTypePrepayment) and (IVr.TaxInvType==kTaxInvTypeLiquidation) then begin 
        testf = true;
      end;
    case kOfficialNumTypeReceiptIVVc:
      if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeDownpayment or IVr.InvType==kInvoiceTypePrepayment) and (IVr.TaxInvType==kTaxInvTypeReceipt) then begin 
        testf = true;
      end;
    case kOfficialNumTypeIVVc:
      if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeDownpayment or IVr.InvType==kInvoiceTypePrepayment) and (IVr.TaxInvType==kTaxInvTypeNormal)  then begin 
        testf = true;
      end;
    case kOfficialNumTypeManualIVVc:
      if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeDownpayment or IVr.InvType==kInvoiceTypePrepayment) and (IVr.TaxInvType==kTaxInvTypeNormal) then begin 
        testf = true;
      end;
    case kOfficialNumTypeRecoverdIVVc:
      if (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeDownpayment or IVr.InvType==kInvoiceTypePrepayment) and (IVr.TaxInvType==kTaxInvTypeNormal) then begin 
        testf = true;
      end;
  end;

/*
  if (LINrbrw.RegType==kOfficialNumTypeAllIVVc) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeInterestIVVc) and (IVr.InvType==kInvoiceTypeInterest or IVr.InvType==kInvoiceTypeDebit) and (IVr.Status==0) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeManualInterestIVVc) and (IVr.InvType==kInvoiceTypeInterest or IVr.InvType==kInvoiceTypeDebit) and (IVr.Status==kRecordStatusManual) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdInterestIVVc) and ((IVr.InvType==kInvoiceTypeInterest) or (IVr.InvType==kInvoiceTypeDebit)) and (IVr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeCashIVVc or LINrbrw.RegType==kOfficialNumTypeManualCashIVVc) and (IVr.InvType==kInvoiceTypeCash) and (IVr.Status!=kRecordStatusRecovered) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdCashIVVc) and (IVr.InvType==kInvoiceTypeCash) and (IVr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeCashInvoiceReceiptPRTIVVc or LINrbrw.RegType==kOfficialNumTypeManualCashInvoiceReceiptIVVc) and (IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.Status!=kRecordStatusRecovered) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdCashInvoiceReceiptIVVc) and (IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (IVr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeCreditIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCreditIVVc) and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.Status!=kRecordStatusManual) then begin 
    testf = true;
  end; 
  if (LINrbrw.RegType==kOfficialNumTypeManualCreditIVVc) and (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) and (IVr.Status==kRecordStatusManual) then begin 
    testf = true;
  end; 
  if (LINrbrw.RegType==kOfficialNumTypeSpecialSalesIVVc) and (IVr.InvType==kInvoiceTypeNormalSpecialSales) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeIVVc or LINrbrw.RegType==kOfficialNumTypeManualIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc) and (IVr.InvType==kInvoiceTypeNormal or IVr.InvType==kInvoiceTypeDownpayment or IVr.InvType==kInvoiceTypePrepayment) then begin 
    testf = true;
  end;
*/  
  if (testf==true) then begin 
    if (notmanualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (IVr.OKFlag!=1)  then begin 
      testf = false; 
    end; 
/*    
    switch (kLegalInvNrSelectionType) begin
      case -1:
         if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtSendingERecord) then begin 
           testf = false; 
         end; 
      case -2:
      otherwise
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionType) then begin 
          testf = false; 
        end; 
    end;
*/    
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(IVr.BranchID)) then begin 
        if (LINrbrw.Branch!=IVr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(IVr.MachineName)) then begin 
        if (LINrbrw.LocalMachineCode!=IVr.MachineName) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (IVr.InvDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (IVr.InvDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_IVVc = testf;
  return;
end;

global
procedure FindNextIVVcOfficialSerialNr(var record IVVc IVr)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;
//  Integer OutArgEInvoices;

  CUr.Code = IVr.CustCode;
  ReadFirstMain(CUr,1,true);
  
  NextOfficialSerNr("IVVc",IVr.SerNr,IVr.InvDate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = IVr.SerNr;
    OffSerNrIVr.FileName = "IVVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextIVVcOfficialSerialNr;
    end;
    PrepareOfficialSerialNrBlock_IVVc(LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_IVVc(LINrbrw,CUr.Classification,IVr,true);
        if (testf) then begin
          res = NextLegalSerNr("IVVc",IVr.SerNr,IVr.InvDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
//            OutArgEInvoices = LINrbrw.OutArgEInvoices;
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
LFindNextIVVcOfficialSerialNr:; 
  if (nonblank(res)) then begin 
    IVr.OfficialSerNr = res;
    AddPortugueseSAFTHashToIV(IVr);
  end;  
  RETURN;
END;

global
procedure PrepareOfficialSerialNrBlock(Integer kOfficialNumType,var record LegalInvNrBlock LINrb)
begin
  record LegalInvNrBlock orgLINrb;
  record LegalInvNrBlock tmpLINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  Boolean testf,loopf;
  Boolean testlocmach,testbranch,testclass;
  Integer loopcnt;
  
  BlockLoad(orgLINrb);  
  rwcnt = MatRowCnt(orgLINrb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(orgLINrb,i,LINrbrw);
    if (LINrbrw.RegType==kOfficialNumType) then begin 
      MatRowPut(tmpLINrb,MatRowCnt(tmpLINrb),LINrbrw);
    end;
  end;

  rwcnt = MatRowCnt(tmpLINrb);
  
  loopcnt = 1;    
  loopf = true;
  while (loopf) begin
    switch (loopcnt) begin
      case 1:
        testclass = true;
        testlocmach = true;
        testbranch = true;
      case 2:
        testclass = false;
        testlocmach = true;
        testbranch = true;
      case 3:
        testclass = true;
        testlocmach = true;
        testbranch = false;
      case 4:
        testclass = true;
        testlocmach = false;
        testbranch = true;
      case 5:
        testclass = false;
        testlocmach = true;
        testbranch = false;
      case 6:
        testclass = false;
        testlocmach = false;
        testbranch = true;
      case 7:
        testclass = true;
        testlocmach = false;
        testbranch = false;
      case 8:
        testclass = false;
        testlocmach = false;
        testbranch = false;
      otherwise
        loopf = false;
    end;
    if (loopf) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(tmpLINrb,i,LINrbrw);
        testf = true;
        if (testlocmach) then begin
          if (blank(LINrbrw.LocalMachineCode)) then begin
            testf = false;
          end;
        end;
        if (testbranch) then begin
          if (blank(LINrbrw.Branch)) then begin
            testf = false;
          end;
        end;
        if (testclass) then begin
          if (blank(LINrbrw.CClass)) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          AddLegalInvNrRow(LINrb,LINrbrw,loopcnt);
        end;
      end;
    end;
    loopcnt = loopcnt + 1;
  end;
  return;
end;

global
function Boolean TestNextOfficialSerialNr_IVCashVc(row LegalInvNrBlock LINrbrw,string cuclass,record IVCashVc IVCashr,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  switch (LINrbrw.RegType) begin
    case kOfficialNumTypeCreditIVCashVc:
      if (IVCashr.InvType==kPOSInvoiceTypeCredit and IVCashr.Status!=kRecordStatusManual and IVCashr.Status!=kRecordStatusRecovered) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeManualCreditIVCashVc:
      if (IVCashr.InvType==kPOSInvoiceTypeCredit and IVCashr.Status==kRecordStatusManual) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeRecoverdCreditIVCashVc:
      if (IVCashr.InvType==kPOSInvoiceTypeCredit and IVCashr.Status==kRecordStatusRecovered) then begin 
        testf = true;
      end; 
    case kOfficialNumTypePOSIVVc:
      if (HasLocalization("PHL")) then begin
        if (IVCashr.InvType!=kPOSInvoiceTypeCredit and IVCashr.Status!=kRecordStatusRecovered) then begin 
          testf = true;
        end; 
      end else begin
        if (IVCashr.InvType!=kPOSInvoiceTypeCredit and IVCashr.Status!=kRecordStatusManual and IVCashr.Status!=kRecordStatusRecovered) then begin 
          testf = true;
        end; 
      end;
    case kOfficialNumTypeManualPOSIVVc:
      if (IVCashr.InvType!=kPOSInvoiceTypeCredit and IVCashr.Status==kRecordStatusManual) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeRecoverdPOSIVVc:
      if (IVCashr.InvType!=kPOSInvoiceTypeCredit and IVCashr.Status!=kRecordStatusRecovered) then begin 
        testf = true;
      end; 
  end;
  
  if (testf==true) then begin 
    if (manualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (HasLocalization("PHL")) then begin
      if (IVCashr.Status!=kRecordStatusManual) then begin
        if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK)  and  (IVCashr.OKFlag!=1)  then begin 
          testf = false; 
        end; 
      end;
    end else begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK)  and  (IVCashr.OKFlag!=1)  then begin 
        testf = false; 
      end; 
    end;
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(IVCashr.BranchID)) then begin 
        if (LINrbrw.Branch!=IVCashr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(IVCashr.LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=IVCashr.LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (IVCashr.InvDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (IVCashr.InvDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_IVCashVc = testf;
  return;
end;

global
function Boolean TestNextOfficialSerialNr_RestAccVc(row LegalInvNrBlock LINrbrw,string cuclass,record RestAccVc RestAccr,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeRestAccVc) then begin 
    testf = true;
  end;
  if (testf==true) then begin 
    if (manualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK)  and  (RestAccr.Closed!=1)  then begin 
      testf = false; 
    end; 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(RestAccr.BranchID)) then begin 
        if (LINrbrw.Branch!=RestAccr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(RestAccr.MachineName)) then begin 
        if (LINrbrw.LocalMachineCode!=RestAccr.MachineName) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (RestAccr.TransDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (RestAccr.TransDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_RestAccVc = testf;
  return;
end;

global
procedure FindNextRestAccVcOfficialSerialNr(var record RestAccVc RestAccp)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;

  CUr.Code = RestAccp.CustCode;
  ReadFirstMain(CUr,1,true);
  
//  NextOfficialSerNr("RestAccVc",RestAccp.SerNr,RestAccp.InvDate,"",res);
//no code for IVCashVc inside
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = RestAccp.SerNr;
    OffSerNrIVr.FileName = "RestAccVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextRestAccVcOfficialSerialNr;
    end;
    PrepareOfficialSerialNrBlock(kOfficialNumTypeRestAccVc,LINrb);
//    PrepareOfficialSerialNrBlock(kOfficialNumTypePOSIVVc,LINrb);
//    PrepareOfficialSerialNrBlock(kOfficialNumTypeManualPOSIVVc,LINrb);
//    PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdPOSIVVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_RestAccVc(LINrbrw,CUr.Classification,RestAccp,true);
        if (testf) then begin
          res = NextLegalSerNr("RestAccVc",RestAccp.SerNr,RestAccp.TransDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    RestAccp.OfficialSerNr = res;
    AddPortugueseSAFTHashToRestAccVc(RestAccp);
  end;  
LFindNextRestAccVcOfficialSerialNr:;  
  RETURN;
END;

procedure AddLegalInvNr2Row(record LegalInvNr2Block LINrb,row LegalInvNr2Block addLINrbrw,Integer loopcnt)
begin
  Integer i,rwcnt;
  row LegalInvNr2Block LINrbrw;
  Boolean addrowf;

  addrowf = true;
  rwcnt = MatRowCnt(LINrb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LINrb,i,LINrbrw);
    if (LINrbrw.Serie==addLINrbrw.Serie) and (LINrbrw.TSerStart==addLINrbrw.TSerStart) and (LINrbrw.TSerEnd==addLINrbrw.TSerEnd) then begin
      addrowf = false;
    end;
  end;
  if (addrowf) then begin
    MatRowPut(LINrb,MatRowCnt(LINrb),addLINrbrw);
  end;
  return;
end;

global
procedure PrepareOfficialSerialNr2Block(Integer kOfficialNumType,var record LegalInvNr2Block LINrb)
begin
  record LegalInvNr2Block orgLINrb;
  record LegalInvNr2Block tmpLINrb;
  row LegalInvNr2Block LINrbrw;
  Integer i,rwcnt;
  Boolean testf,loopf;
  Boolean testlocmach,testbranch,testclass;
  Integer loopcnt;
  
  BlockLoad(orgLINrb);  
  rwcnt = MatRowCnt(orgLINrb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(orgLINrb,i,LINrbrw);
    if (LINrbrw.RegType==kOfficialNumType) then begin 
      MatRowPut(tmpLINrb,MatRowCnt(tmpLINrb),LINrbrw);
    end;
  end;

  rwcnt = MatRowCnt(tmpLINrb);
  
  loopcnt = 1;    
  loopf = true;
  while (loopf) begin
    switch (loopcnt) begin
      case 1:
        testclass = true;
        testlocmach = true;
        testbranch = true;
      case 2:
        testclass = false;
        testlocmach = true;
        testbranch = true;
      case 3:
        testclass = true;
        testlocmach = true;
        testbranch = false;
      case 4:
        testclass = true;
        testlocmach = false;
        testbranch = true;
      case 5:
        testclass = false;
        testlocmach = true;
        testbranch = false;
      case 6:
        testclass = false;
        testlocmach = false;
        testbranch = true;
      case 7:
        testclass = true;
        testlocmach = false;
        testbranch = false;
      case 8:
        testclass = false;
        testlocmach = false;
        testbranch = false;
      otherwise
        loopf = false;
    end;
    if (loopf) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(tmpLINrb,i,LINrbrw);
        testf = true;
        if (testlocmach) then begin
          if (blank(LINrbrw.LocalMachineCode)) then begin
            testf = false;
          end;
        end;
        if (testbranch) then begin
          if (blank(LINrbrw.Branch)) then begin
            testf = false;
          end;
        end;
        if (testclass) then begin
          if (blank(LINrbrw.CClass)) then begin
            testf = false;
          end;
        end;
        if (testf) then begin
          AddLegalInvNr2Row(LINrb,LINrbrw,loopcnt);
        end;
      end;
    end;
    loopcnt = loopcnt + 1;
  end;
  return;
end;

global
function Boolean TestNextOfficialSerialNr2_RestAccVc(row LegalInvNr2Block LINrbrw,string cuclass,record RestAccVc RestAccr,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeRestAccVc) then begin 
    testf = true;
  end;
  if (testf==true) then begin 
    if (manualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK)  and  (RestAccr.Closed!=1)  then begin 
      testf = false; 
    end; 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(RestAccr.BranchID)) then begin 
        if (LINrbrw.Branch!=RestAccr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(RestAccr.MachineName)) then begin 
        if (LINrbrw.LocalMachineCode!=RestAccr.MachineName) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (RestAccr.TransDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (RestAccr.TransDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr2_RestAccVc = testf;
  return;
end;

global
procedure FindNextRestAccVcOfficialSerialNr2(var record RestAccVc RestAccp)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNr2Block LINrb;
  row LegalInvNr2Block LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;

  CUr.Code = RestAccp.CustCode;
  ReadFirstMain(CUr,1,true);
  
//  NextOfficialSerNr("RestAccVc",RestAccp.SerNr,RestAccp.InvDate,"",res);
//no code for IVCashVc inside
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = RestAccp.SerNr;
    OffSerNrIVr.FileName = "RestAccVc2";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextRestAccVcOfficialSerialNr2;
    end;
    PrepareOfficialSerialNr2Block(kOfficialNumTypeRestAccVc,LINrb);
//    PrepareOfficialSerialNr2Block(kOfficialNumTypePOSIVVc,LINrb);
//    PrepareOfficialSerialNr2Block(kOfficialNumTypeManualPOSIVVc,LINrb);
//    PrepareOfficialSerialNr2Block(kOfficialNumTypeRecoverdPOSIVVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr2_RestAccVc(LINrbrw,CUr.Classification,RestAccp,true);
        if (testf) then begin
          res = NextLegalSerNr("RestAccVc2",RestAccp.SerNr,RestAccp.TransDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    RestAccp.OfficialSerNr2 = res;
//    AddPortugueseSAFTHashToRestAccVc(RestAccp);
  end;  
LFindNextRestAccVcOfficialSerialNr2:;  
  RETURN;
END;

global
procedure FindNextIVCashVcOfficialSerialNr(var record IVCashVc IVCashr)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSNIVr;

  CUr.Code = IVCashr.CustCode;
  ReadFirstMain(CUr,1,true);
  
//  NextOfficialSerNr("IVCashVc",IVCashr.SerNr,IVCashr.InvDate,"",res);
//no code for IVCashVc inside
  if (blank(res)) then begin
    OffSNIVr.IVNr = IVCashr.SerNr;
    OffSNIVr.FileName = "IVCashVc";
    if (ReadFirstKey("MainKey",OffSNIVr,2,true)) then begin
      res = OffSNIVr.OfficialSerNr;
      goto LFindNextIVCashVcOfficialSerialNr;
    end;
    PrepareOfficialSerialNrBlock(kOfficialNumTypePOSIVVc,LINrb);
    PrepareOfficialSerialNrBlock(kOfficialNumTypeManualPOSIVVc,LINrb);
    PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdPOSIVVc,LINrb);
    PrepareOfficialSerialNrBlock(kOfficialNumTypeCreditIVCashVc,LINrb);
    PrepareOfficialSerialNrBlock(kOfficialNumTypeManualCreditIVCashVc,LINrb);
    PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdCreditIVCashVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_IVCashVc(LINrbrw,CUr.Classification,IVCashr,true);
        if (testf) then begin
          res = NextLegalSerNr("IVCashVc",IVCashr.SerNr,IVCashr.InvDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end else begin
      if (HasLocalization("PHL")) then begin
        rwcnt = MatRowCnt(LINrb);
        if (rwcnt>0) then begin
          OffSNIVr.FileName = "IVCashVc";
          if (ReadLastKey("FileNameOfficialSerNr",OffSNIVr,1,false)) then begin
            NextM4SerialNumber(OffSNIVr.OfficialSerNr,res);
          end;
        end;
      end;
    end;
  end;
  if (nonblank(res)) then begin 
    IVCashr.OfficialSerNr = res;
    AddPortugueseSAFTHashToIVCash(IVCashr);
  end;  
LFindNextIVCashVcOfficialSerialNr:;  
  RETURN;
END;

global
function Boolean TestNextOfficialSerialNr2_IVCashVc(row LegalInvNr2Block LINrbrw,string cuclass,record IVCashVc IVCashr,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  switch (LINrbrw.RegType) begin
    case kOfficialNumTypeCreditIVCashVc:
      if (IVCashr.InvType==kPOSInvoiceTypeCredit and IVCashr.Status!=kRecordStatusManual and IVCashr.Status!=kRecordStatusRecovered) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeManualCreditIVCashVc:
      if (IVCashr.InvType==kPOSInvoiceTypeCredit and IVCashr.Status==kRecordStatusManual) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeRecoverdCreditIVCashVc:
      if (IVCashr.InvType==kPOSInvoiceTypeCredit and IVCashr.Status==kRecordStatusRecovered) then begin 
        testf = true;
      end; 
    case kOfficialNumTypePOSIVVc:
      if (IVCashr.InvType!=kPOSInvoiceTypeCredit and IVCashr.Status!=kRecordStatusManual and IVCashr.Status!=kRecordStatusRecovered) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeManualPOSIVVc:
      if (IVCashr.InvType!=kPOSInvoiceTypeCredit and IVCashr.Status==kRecordStatusManual) then begin 
        testf = true;
      end; 
    case kOfficialNumTypeRecoverdPOSIVVc:
      if (IVCashr.InvType!=kPOSInvoiceTypeCredit and IVCashr.Status!=kRecordStatusRecovered) then begin 
        testf = true;
      end; 
  end;
  if (testf==true) then begin 
    if (manualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK)  and  (IVCashr.OKFlag!=1)  then begin 
      testf = false; 
    end; 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(IVCashr.BranchID)) then begin 
        if (LINrbrw.Branch!=IVCashr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(IVCashr.LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=IVCashr.LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (IVCashr.InvDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (IVCashr.InvDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr2_IVCashVc = testf;
  return;
end;

global
procedure FindNextIVCashVcOfficialSerialNr2(var record IVCashVc IVCashr)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNr2Block LINrb;
  row LegalInvNr2Block LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;

  CUr.Code = IVCashr.CustCode;
  ReadFirstMain(CUr,1,true);
  
//  NextOfficialSerNr("IVCashVc",IVCashr.SerNr,IVCashr.InvDate,"",res);
//no code for IVCashVc inside
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = IVCashr.SerNr;
    OffSerNrIVr.FileName = "IVCashVc2";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextIVCashVcOfficialSerialNr2;
    end;
    PrepareOfficialSerialNr2Block(kOfficialNumTypePOSIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeManualPOSIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeRecoverdPOSIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeCreditIVCashVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeManualCreditIVCashVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeRecoverdCreditIVCashVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr2_IVCashVc(LINrbrw,CUr.Classification,IVCashr,true);
        if (testf) then begin
          res = NextLegalSerNr("IVCashVc2",IVCashr.SerNr,IVCashr.InvDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    IVCashr.OfficialSerNr2 = res;
//    AddPortugueseSAFTHashToIVCash(IVCashr);
  end;  
LFindNextIVCashVcOfficialSerialNr2:;  
  RETURN;
END;

function Boolean TestNextOfficialSerialNr2_IVVc(row LegalInvNr2Block LINrbrw,string cuclass,record IVVc IVr,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeAllIVVc or LINrbrw.RegType==kOfficialNumTypeIVVc or LINrbrw.RegType==kOfficialNumTypeManualIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc or LINrbrw.RegType==kOfficialNumTypeLiquidationIVVc or LINrbrw.RegType==kOfficialNumTypeReceiptIVVc) then begin 
    testf = true;
  end;
  if (testf==true) then begin 
    if (manualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK)  and  (IVr.OKFlag!=1)  then begin 
      testf = false; 
    end; 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(IVr.BranchID)) then begin 
        if (LINrbrw.Branch!=IVr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(IVr.MachineName)) then begin 
        if (LINrbrw.LocalMachineCode!=IVr.MachineName) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (IVr.InvDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (IVr.InvDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr2_IVVc = testf;
  return;
end;

global
procedure FindNextIVVcOfficialSerialNr2(var record IVVc IVr)
begin
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNr2Block LINrb;
  row LegalInvNr2Block LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;

  CUr.Code = IVr.CustCode;
  ReadFirstMain(CUr,1,true);
  
//  NextOfficialSerNr("IVVc",IVr.SerNr,IVr.InvDate,"",res);
//no code for IVVc inside
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = IVr.SerNr;
    OffSerNrIVr.FileName = "IVVc2";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextIVVcOfficialSerialNr2;
    end;
    PrepareOfficialSerialNr2Block(kOfficialNumTypeAllIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeManualIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeRecoverdIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeReceiptIVVc,LINrb);
    PrepareOfficialSerialNr2Block(kOfficialNumTypeLiquidationIVVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr2_IVVc(LINrbrw,CUr.Classification,IVr,true);
        if (testf) then begin
          res = NextLegalSerNr("IVVc2",IVr.SerNr,IVr.InvDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    IVr.OfficialSerNr2 = res;
  end;  
LFindNextIVVcOfficialSerialNr2:;  
  return;
end;

global
function Boolean TestNextOfficialSerialNr_StockMovVc(row LegalInvNrBlock LINrbrw,string cuclass,record StockMovVc StockMovr,Boolean notmanualf,Integer kLegalInvNrSelectionType)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeStockMovVc or LINrbrw.RegType==kOfficialNumTypeManualStockMovVc) 
     and (StockMovr.StockMovType==kStockMovTypeNormal) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdStockMovVc) and (StockMovr.StockMovType==kStockMovTypeNormal) 
     and (StockMovr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeOwnGoodsTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeManualOwnGoodsTransStockMovVc) 
      and (StockMovr.StockMovType==kStockMovTypeOwnGoodsTransport) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc) and (StockMovr.StockMovType==kStockMovTypeOwnGoodsTransport) 
     and (StockMovr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;  
  if (LINrbrw.RegType==kOfficialNumTypeGlobalTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeManualGlobalTransStockMovVc) 
     and (StockMovr.StockMovType==kStockMovTypeGlobalTransport) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdGlobalTransStockMovVc) and (StockMovr.StockMovType==kStockMovTypeGlobalTransport) 
     and (StockMovr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;  
  if (LINrbrw.RegType==kOfficialNumTypeConsigmentStockMovVc or LINrbrw.RegType==kOfficialNumTypeManualConsigmentStockMovVc) 
     and (StockMovr.StockMovType==kStockMovTypeConsigment) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdConsigmentStockMovVc) and (StockMovr.StockMovType==kStockMovTypeConsigment) 
     and (StockMovr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;
  
  if (LINrbrw.RegType==kOfficialNumTypeThirdEntGoodsTransStockMovVc or LINrbrw.RegType==kOfficialNumTypeManualThirdEntGoodsTransStockMovVc) 
     and (StockMovr.StockMovType==kStockMovTypeThirdEntGoodsTransport) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc) and (StockMovr.StockMovType==kStockMovTypeThirdEntGoodsTransport) 
     and (StockMovr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;
  
  if (testf==true) then begin 
    if (notmanualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    switch (kLegalInvNrSelectionType) begin
      case -1:
         if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtSendingERecord) then begin 
           testf = false; 
         end; 
      case -2:
      otherwise
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionType) then begin 
          testf = false; 
        end; 
    end;
    if (nonblank(StockMovr.ThrouLocation)) then begin
      if ((LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (StockMovr.SentOKFlag!=1))  then begin 
        testf = false; 
      end; 
    end else begin
      if ((LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (StockMovr.OKFlag!=1))  then begin 
        testf = false; 
      end; 
    end;
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(StockMovr.BranchID)) then begin 
        if (LINrbrw.Branch!=StockMovr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(StockMovr.LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=StockMovr.LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (nonblank(StockMovr.ThrouLocation)) then begin
        if (StockMovr.SentTransDate<LINrbrw.PurchDate) then begin testf = false; end;
      end else begin
        if (StockMovr.TransDate<LINrbrw.PurchDate) then begin testf = false; end;
      end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (nonblank(StockMovr.ThrouLocation)) then begin
        if (StockMovr.SentTransDate>LINrbrw.EndDate) then begin testf = false; end;
      end else begin
        if (StockMovr.TransDate>LINrbrw.EndDate) then begin testf = false; end;
      end;
    end;
  end;
  TestNextOfficialSerialNr_StockMovVc = testf;
  return;
end;

global
function Boolean TestNextOfficialSerialNr_ConsStockMovVcInv(row LegalInvNrBlock LINrbrw,string cuclass,record StockMovVc StockMovr,Boolean notmanualf,Integer kLegalInvNrSelectionType)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeConsignmentInvoiceStockMovVc) then begin 
    testf = true;
  end;
  
  if (testf==true) then begin 
    if (notmanualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    switch (kLegalInvNrSelectionType) begin
      case -1:
         if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtSendingERecord) then begin 
           testf = false; 
         end; 
      case -2:
      otherwise
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionType) then begin 
          testf = false; 
        end; 
    end;
    if (nonblank(StockMovr.ThrouLocation)) then begin
      if ((LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (StockMovr.SentOKFlag!=1))  then begin 
        testf = false; 
      end; 
    end else begin
      if ((LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (StockMovr.OKFlag!=1))  then begin 
        testf = false; 
      end; 
    end;
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(StockMovr.BranchID)) then begin 
        if (LINrbrw.Branch!=StockMovr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(StockMovr.LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=StockMovr.LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (StockMovr.InvDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (StockMovr.InvDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_ConsStockMovVcInv = testf;
  return;
end;


global
procedure FindNextConsStockMovInvVcOfficialSerialNr(var record StockMovVc StockMovr,Integer kLegalInvNrSelectionType)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  Date docdate;  
  record OffSerNrIVVc OffSerNrIVr;

  docdate = StockMovr.InvDate;
 
//   NextOfficialSerNr("StockMovVc",StockMovr.SerNr,docdate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = StockMovr.InvoiceNr;  //    SerNr
    OffSerNrIVr.FileName = "ConsStockMovInvVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextStockMovVcOfficialSerialNr;
    end;
    switch (StockMovr.StockMovType) begin
      case kStockMovTypeConsigment:
        PrepareOfficialSerialNrBlock(kOfficialNumTypeConsignmentInvoiceStockMovVc,LINrb);
    end;
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_ConsStockMovVcInv(LINrbrw,"",StockMovr,true,-2);
        if (testf) then begin
          res = NextLegalSerNr("ConsStockMovInvVc",StockMovr.InvoiceNr,docdate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    StockMovr.InvoiceOfficialSerNr = res;
    StockMovr.InvDate = CurrentDate;
    StockMovr.InvRegTime = CurrentTime;
//    AddPortugueseSAFTHashToStockMov(StockMovr);// must be after FIFO  filled in
  end;  
LFindNextStockMovVcOfficialSerialNr:;  
  RETURN;
END;

global
function Boolean TestNextOfficialSerialNr_ORVc(row LegalInvNrBlock LINrbrw,string cuclass,record ORVc ORr,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeORVc) then begin 
    testf = true;
  end;
  if (testf==true) then begin 
    if (manualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK)  and  (ORr.OKFlag!=1)  then begin 
      testf = false; 
    end; 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(ORr.BranchID)) then begin 
        if (LINrbrw.Branch!=ORr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(ORr.LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=ORr.LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (ORr.OrdDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (ORr.OrdDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_ORVc = testf;
  return;
end;

global
procedure FindNextORVcOfficialSerialNr(var record ORVc ORr)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;
  
  CUr.Code = ORr.CustCode;
  ReadFirstMain(CUr,1,true);
 
  NextOfficialSerNr("ORVc",ORr.SerNr,ORr.OrdDate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = ORr.SerNr;
    OffSerNrIVr.FileName = "ORVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextORVcOfficialSerialNr;
    end;
    PrepareOfficialSerialNrBlock(kOfficialNumTypeORVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_ORVc(LINrbrw,CUr.Classification,ORr,true);
        if (testf) then begin
          res = NextLegalSerNr("ORVc",ORr.SerNr,ORr.OrdDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    ORr.OfficialSerNr = res;
    AddPortugueseSAFTHashToOR(ORr);
  end;  
LFindNextORVcOfficialSerialNr:;  
  RETURN;
END;

global
function Boolean TestNextOfficialSerialNr_IPVc(row LegalInvNrBlock LINrbrw,string cuclass,record IPVc IPp,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeIPVc) then begin 
    testf = true;
  end;
  if (testf==true) then begin 
    if (manualf) then begin
      if (HasLocalization("PRT")) then begin
        if (blank(IPp.OfficialSerNr) and IPp.OKFlag!=0) then begin
        end else begin
          testf = false; 
        end;
      end else begin
        if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
          testf = false; 
        end; 
      end;
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (IPp.OKFlag!=1)  then begin 
      testf = false; 
    end; 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(IPp.BranchID)) then begin 
        if (LINrbrw.Branch!=IPp.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(IPp.MachineName)) then begin 
        if (LINrbrw.LocalMachineCode!=IPp.MachineName) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (IPp.TransDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (IPp.TransDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_IPVc = testf;
  return;
end;

global
procedure FindNextIPVcOfficialSerialNr(var record IPVc IPp)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;
  row IPVc IPrw;
  
  if (MatRowCnt(IPp)>=0) then begin 
    MatRowGet(IPp,0,IPrw);
    if (NonBlank(IPrw.CustCode)) then begin 
      CUr.Code = IPrw.CustCode;
      if (ReadFirstMain(CUr,1,true)==false) then begin
        goto LFindNextIPVcOfficialSerialNr;  
      end;
    end else begin
      goto LFindNextIPVcOfficialSerialNr;     
    end;
  end;  
  NextOfficialSerNr("IPVc",IPp.SerNr,IPp.TransDate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = IPp.SerNr;
    OffSerNrIVr.FileName = "IPVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextIPVcOfficialSerialNr;
    end;
    PrepareOfficialSerialNrBlock(kOfficialNumTypeIPVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_IPVc(LINrbrw,CUr.Classification,IPp,true);
        if (testf) then begin 
          res = NextLegalSerNr("IPVc",IPp.SerNr,IPp.TransDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    IPp.OfficialSerNr = res;
//    AddPortugueseSAFTHashToIP(IPp);
  end;  
LFindNextIPVcOfficialSerialNr:;  
  RETURN;
END;

global
function string 255 FindNextIPVcOfficialSerialNrFromCurrentSerie(var record IPVc IPp)
begin
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  Boolean testf;
  record OffSerNrIVVc OffSNIVr;

  PrepareOfficialSerialNrBlock(kOfficialNumTypeIPVc,LINrb);
  rwcnt = MatRowCnt(LINrb);
  if (rwcnt>0) then begin    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      testf = TestNextOfficialSerialNr_IPVc(LINrbrw,CUr.Classification,IPp,false);
      if (testf) then begin 
        tstr = Left(IPp.OfficialSerNr,len(LINrbrw.Serie));
        testf = LINrbrw.Serie==tstr;
      end;
      if (testf) then begin 
        OffSNIVr.IVNr = IPp.SerNr;
        OffSNIVr.FileName = "IPVc";
        if (ReadLastKey("MainKey",OffSNIVr,2,true)) then begin
          if (OffSNIVr.OfficialSerNr==IPp.OfficialSerNr) then begin
            res = OffSNIVr.OfficialSerNr;
          end else begin
            res = NextLegalSerNr("IPVc",IPp.SerNr,IPp.TransDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          end;
        end else begin
          res = NextLegalSerNr("IPVc",IPp.SerNr,IPp.TransDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
        end;
        if (nonblank(res)) then begin 
          i = rwcnt;
        end;
      end;
    end;
  end;
  FindNextIPVcOfficialSerialNrFromCurrentSerie = res;
  return;
end;

global
function Boolean TestNextOfficialSerialNr_ProformaQTVc(row LegalInvNrBlock LINrbrw,string cuclass,record QTVc QTr,Boolean manualf)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeQTProformaVc) then begin 
    testf = true;
  end;
  if (testf==true) then begin 
    if (manualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
//    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (QTr.Rejected!=2)  then begin 
//      testf = false; 
//    end; 
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(QTr.BranchID)) then begin 
        if (LINrbrw.Branch!=QTr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(QTr.LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=QTr.LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (QTr.QTDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (QTr.QTDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_ProformaQTVc = testf;
  return;
end;

function string 255 GetPreviousQTHash(record QTVc curQTr)
begin
  record QTVc prevQTr;
  string 255 res;
  Date fsd,fed;
  row LegalInvNrBlock LINrbrw;
  Boolean testf;
  
  FindFiscalYear(curQTr.QTDate,fsd,fed);
  GetLegalInvNrRow(curQTr.ProformaOfficialSerNr,LINrbrw);

//1st invoice in Number series  
  if (curQTr.ProformaOfficialSerNr==LINrbrw.Serie & LINrbrw.TSerStart) then begin
    res = "";
    goto LGetPreviousQTHash;
  end;
  
/*  
//1st invoice in FIscal year  
  ResetLoop(prevQTr);
  prevQTr.RegDate = curQTr.RegDate;
  prevQTr.RegTime = curQTr.RegTime;
  if (LoopBackKey("RegDate",prevQTr,2,true)) then begin
    if (prevQTr.SerNr==curQTr.SerNr) then begin
      if (LoopBackKey("RegDate",prevQTr,2,true)) then begin
      end;
    end;
    if (nonblank(prevQTr.ProformaOfficialSerNr)) then begin
      if (prevQTr.QTDate<fsd) then begin testf = true; end;
      if (prevQTr.QTDate>fed) then begin testf = true; end;
    end;
    if (testf) then begin
      res = "";
      goto LGetPreviousQTHash;
    end;
  end;
*/  
  ResetLoop(prevQTr);
  prevQTr.ProformaOfficialSerNr = curQTr.ProformaOfficialSerNr;
  if (LoopBackKey("ProformaOfficialSerNr",prevQTr,1,true)) then begin
    if (prevQTr.SerNr==curQTr.SerNr and nonblank(prevQTr.Hash)) then begin
      if (LoopBackKey("ProformaOfficialSerNr",prevQTr,1,true)) then begin
      end;
    end;
    res = prevQTr.Hash;
  end;
LGetPreviousQTHash:;  
  GetPreviousQTHash = res;
  return;
end;

global
procedure AddPortugueseSAFTHashToProformaQT(var record QTVc QTr)
begin
  string 255 tstr;
  val v;
  
  if (HasLocalization("PRT")==false) then begin
    goto LAddPortugueseSAFTHashToProformaQT;
  end;
  if (blank(QTr.ProformaOfficialSerNr)) then begin
    goto LAddPortugueseSAFTHashToProformaQT;
  end;
  //YcToStr(IVYc,tstr);
  //tstr = tstr & " 1/" & IVr.SerNr;

  v = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
  if (blank(v)) then begin v = 0.00; end;

  QTr.Hash = GenerateSAFTHash(1,"QTVc",QTr.QTDate,QTr.RegDate,QTr.RegTime,QTr.ProformaOfficialSerNr,v,GetPreviousQTHash(QTr),"");
  QTr.HashKeyVersion = CryptSAFTHashKeyVersion;

LAddPortugueseSAFTHashToProformaQT:;
  return;
end;

global
procedure FindNextProformaQTVcOfficialSerialNr(var record QTVc QTr)
BEGIN
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;
  
  CUr.Code = QTr.CustCode;
  ReadFirstMain(CUr,1,true);
 
  NextOfficialSerNr("ProformaQTVc",QTr.SerNr,QTr.QTDate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = QTr.SerNr;
    OffSerNrIVr.FileName = "ProformaQTVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextProformaQTVcOfficialSerialNr;
    end;
    PrepareOfficialSerialNrBlock(kOfficialNumTypeQTProformaVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_ProformaQTVc(LINrbrw,CUr.Classification,QTr,true);
        if (testf) then begin
          res = NextLegalSerNr("ProformaQTVc",QTr.SerNr,QTr.QTDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    QTr.ProformaOfficialSerNr = res;
//   AddPortugueseSAFTHashToProformaQT(QTr);
  end;  
LFindNextProformaQTVcOfficialSerialNr:;  
  RETURN;
END;

global
function Boolean TestNextOfficialSerialNr_SHVc(row LegalInvNrBlock LINrbrw,string cuclass,record SHVc SHr,Boolean notmanualf,Integer kLegalInvNrSelectionType)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeSHVc or LINrbrw.RegType==kOfficialNumTypeManualSHVc or LINrbrw.RegType==kOfficialNumTypeRecoverdSHVc) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeRecoverdSHVc) and (SHr.Status==kRecordStatusRecovered) then begin 
    testf = true;
  end;
  if (testf) then begin 
    if (notmanualf) then begin
      if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeManual) then begin 
        testf = false; 
      end; 
    end;
    if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtOK) and (SHr.OKFlag!=1)  then begin 
      testf = false; 
    end; 
    switch (kLegalInvNrSelectionType) begin
      case -1:
         if (LINrbrw.SelectionType==kLegalInvNrSelectionTypeAtSendingERecord) then begin 
           testf = false; 
         end; 
      case -2:
      otherwise
        if (LINrbrw.SelectionType!=kLegalInvNrSelectionType) then begin 
          testf = false; 
        end; 
    end;
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(SHr.BranchID)) then begin 
        if (LINrbrw.Branch!=SHr.BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(SHr.LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=SHr.LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (SHr.ShipDate<LINrbrw.PurchDate) then begin testf = false; end;
    end;
    if (nonblankdate(LINrbrw.EndDate)) then begin
      if (SHr.ShipDate>LINrbrw.EndDate) then begin testf = false; end;
    end;
  end;
  TestNextOfficialSerialNr_SHVc = testf;
  return;
end;

global
procedure FindNextSHVcOfficialSerialNr(var record SHVc SHr,Integer kLegalInvNrSelectionType)
begin
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  record OffSerNrIVVc OffSerNrIVr;

  CUr.Code = SHr.CustCode;
  ReadFirstMain(CUr,1,true);
 
  NextOfficialSerNr("SHVc",SHr.SerNr,SHr.ShipDate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = SHr.SerNr;
    OffSerNrIVr.FileName = "SHVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextSHVcOfficialSerialNr;
    end;
    PrepareOfficialSerialNrBlock(kOfficialNumTypeSHVc,LINrb);
    PrepareOfficialSerialNrBlock(kOfficialNumTypeManualSHVc,LINrb);
    PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdSHVc,LINrb);
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_SHVc(LINrbrw,CUr.Classification,SHr,true,kLegalInvNrSelectionType);
        if (testf) then begin
          res = NextLegalSerNr("SHVc",SHr.SerNr,SHr.ShipDate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    SHr.OfficialSerNr = res;
//    AddPortugueseSAFTHashToSH(SHr);// must be after FIFO  filled in
  end;  
LFindNextSHVcOfficialSerialNr:;  
  return;
end;

global
function Boolean OfficialSerNrDefined(string filename)
begin
  Boolean res;
  record LegalInvNrBlock LINb;
  row LegalInvNrBlock LINbrw;
  Integer i,rwcnt;

  if (HasLocalization("PRT")==false) then begin
    goto LOfficialSerNrDefined;
  end;
  BlockLoad(LINb);  
  rwcnt = MatRowCnt(LINb);
  if (rwcnt>0) then begin    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINb,i,LINbrw);
      switch (filename) begin
        case "ORVc":
          if (LINbrw.RegType==kOfficialNumTypeORVc) then begin 
            res = true;
            goto LOfficialSerNrDefined;
          end;
      end;
    end;
  end;
LOfficialSerNrDefined:;  
  OfficialSerNrDefined = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_IVVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record IVVc locIVr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locIVr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locIVr,1,false)) then begin
    testf = true;
    if (locIVr.SerNr==testSerNr) then begin testf = false; end;
    if (locIVr.InvDate<=testDate) then begin testf = false; end;
    if (Left(locIVr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locIVr.OfficialSerNr,len(locIVr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locIVr.InvDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_IVVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_QTVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record QTVc locQTr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locQTr.ProformaOfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("ProformaOfficialSerNr",locQTr,1,false)) then begin
    testf = true;
    if (locQTr.SerNr==testSerNr) then begin testf = false; end;
    if (locQTr.QTDate<=testDate) then begin testf = false; end;
    if (Left(locQTr.ProformaOfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locQTr.ProformaOfficialSerNr,len(locQTr.ProformaOfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locQTr.QTDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_QTVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_IVCashVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record IVCashVc locIVCashr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locIVCashr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locIVCashr,1,false)) then begin
    testf = true;
    if (locIVCashr.SerNr==testSerNr) then begin testf = false; end;
    if (locIVCashr.InvDate<=testDate) then begin testf = false; end;
    if (Left(locIVCashr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locIVCashr.OfficialSerNr,len(locIVCashr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locIVCashr.InvDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_IVCashVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_RestAccVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record RestAccVc locRestAccr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locRestAccr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locRestAccr,1,false)) then begin
    testf = true;
    if (locRestAccr.SerNr==testSerNr) then begin testf = false; end;
    if (locRestAccr.TransDate<=testDate) then begin testf = false; end;
    if (Left(locRestAccr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locRestAccr.OfficialSerNr,len(locRestAccr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locRestAccr.TransDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_RestAccVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_ORVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record ORVc locORr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locORr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locORr,1,false)) then begin
    testf = true;
    if (locORr.SerNr==testSerNr) then begin testf = false; end;
    if (locORr.OrdDate<=testDate) then begin testf = false; end;
    if (Left(locORr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locORr.OfficialSerNr,len(locORr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locORr.OrdDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_ORVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_SHVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record SHVc locSHr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locSHr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locSHr,1,false)) then begin
    testf = true;
    if (locSHr.SerNr==testSerNr) then begin testf = false; end;
    if (locSHr.ShipDate<=testDate) then begin testf = false; end;
    if (Left(locSHr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locSHr.OfficialSerNr,len(locSHr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locSHr.ShipDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_SHVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_RetVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record RetVc locRetr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locRetr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locRetr,1,false)) then begin
    testf = true;
    if (locRetr.SerNr==testSerNr) then begin testf = false; end;
    if (locRetr.TransDate<=testDate) then begin testf = false; end;
    if (Left(locRetr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locRetr.OfficialSerNr,len(locRetr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locRetr.TransDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_RetVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_RetPUVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
var Date alloweddate)
begin
  Boolean res,testf;
  record RetPUVc locRetPUr;
  LongInt l,testl;
  Date bd;
  
  alloweddate = bd;
  locRetPUr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locRetPUr,1,false)) then begin
    testf = true;
    if (locRetPUr.SerNr==testSerNr) then begin testf = false; end;
    if (locRetPUr.TransDate<=testDate) then begin testf = false; end;
    if (Left(locRetPUr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locRetPUr.OfficialSerNr,len(locRetPUr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = locRetPUr.TransDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_RetPUVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_StockMovVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record StockMovVc locStockMovr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  locStockMovr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",locStockMovr,1,false)) then begin
    testf = true;
    if (locStockMovr.SerNr==testSerNr) then begin testf = false; end;
    if (nonblank(locStockMovr.ThrouLocation)) then begin
      if (locStockMovr.SentTransDate<=testDate) then begin testf = false; end;
    end else begin
      if (locStockMovr.TransDate<=testDate) then begin testf = false; end;
    end;
    if (Left(locStockMovr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(locStockMovr.OfficialSerNr,len(locStockMovr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      if (nonblank(locStockMovr.ThrouLocation)) then begin
        if (locStockMovr.SentTransDate<=testDate) then begin testf = false; end;
      end else begin
        if (locStockMovr.TransDate<=testDate) then begin testf = false; end;
      end;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_StockMovVc = res;
  return;
end;

function Boolean ValidateOfficialSerialNrChronology_IPVc(row LegalInvNrBlock LINrbrw,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res,testf;
  record IPVc IPr;
  LongInt l,testl;
  Date bd;

  alloweddate = bd;
  IPr.OfficialSerNr = LINrbrw.Serie & LINrbrw.TSerEnd;
  if (ReadLastKey("OfficialSerNr",IPr,1,false)) then begin
    testf = true;
    if (IPr.SerNr==testSerNr) then begin testf = false; end;
    if (IPr.TransDate<=testDate) then begin testf = false; end;
    if (Left(IPr.OfficialSerNr,len(LINrbrw.Serie))!=LINrbrw.Serie) then begin testf = false; end;
    l = StringToLongInt(Right(IPr.OfficialSerNr,len(IPr.OfficialSerNr) - len(LINrbrw.Serie)));
    if (l<StringToLongInt(LINrbrw.TSerStart)) or (l>StringToLongInt(LINrbrw.TSerEnd)) then begin
      testf = false;
    end;
    testl = StringToLongInt(Right(OfficialSerNr,len(OfficialSerNr) - len(LINrbrw.Serie)));
    if (l>testl) then begin testf = false; end;
    if (testf) then begin
      alloweddate = IPr.TransDate;
    end;
  end;
  res = !testf;
  ValidateOfficialSerialNrChronology_IPVc = res;
  return;
end;

global
function Boolean ValidateOfficialSerialNrChronology(string filename,string OfficialSerNr,LongInt testSerNr,Date testDate,
                 var Date alloweddate)
begin
  Boolean res;
  row LegalInvNrBlock LINrbrw;
  
  res = true;
  GetLegalInvNrRow(OfficialSerNr,LINrbrw);
  if (LINrbrw.Chronology!=kLegalInvNrChronologyTypeForced) then begin
    goto LValidateOfficialSerialNrChronology;
  end;
  if (blank(OfficialSerNr)) then begin    
    goto LValidateOfficialSerialNrChronology;
  end;
  switch (filename) begin
    case "IVVc":
      res = ValidateOfficialSerialNrChronology_IVVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "IVCashVc":
      res = ValidateOfficialSerialNrChronology_IVCashVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "RestAccVc":
      res = ValidateOfficialSerialNrChronology_RestAccVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "ORVc":
      res = ValidateOfficialSerialNrChronology_ORVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "SHVc":
      res = ValidateOfficialSerialNrChronology_SHVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "RetVc":
      res = ValidateOfficialSerialNrChronology_RetVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "RetPUVc":
      res = ValidateOfficialSerialNrChronology_RetPUVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "StockMovVc":
      res = ValidateOfficialSerialNrChronology_StockMovVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "IPVc":
      res = ValidateOfficialSerialNrChronology_IPVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
    case "QTVc":
      res = ValidateOfficialSerialNrChronology_QTVc(LINrbrw,OfficialSerNr,testSerNr,testDate,alloweddate);
  end;
LValidateOfficialSerialNrChronology:;  
  ValidateOfficialSerialNrChronology = res;
  return;
end;

function Boolean OfficialSerialNrCanBeBlankPRT_IVVc(row LegalInvNrBlock LINrbrw,string cuclass,string BranchID,string LocalMachineCode,Date td,Integer InvType,Integer Status)
begin
  Boolean testf;
  
  testf = false;
  switch (LINrbrw.RegType) begin
    case kOfficialNumTypeAllIVVc:  
      testf = true;
    case kOfficialNumTypeInterestIVVc:  
      if (InvType==kInvoiceTypeInterest or InvType==kInvoiceTypeDebit) then begin testf = true; end;
    case kOfficialNumTypeCashInvoiceReceiptPRTIVVc:  
      if (InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (Status!=kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeManualCashInvoiceReceiptIVVc:  
      if (InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (Status!=kRecordStatusRecovered) then begin testf = true; end;
    case kOfficialNumTypeCreditIVVc:  
      if (InvType==kInvoiceTypeCredit or InvType==kInvoiceTypeCreditSpecialSales) and (Status!=kRecordStatusManual) then begin testf = true; end;
    case kOfficialNumTypeRecoverdCreditIVVc:  
      if (InvType==kInvoiceTypeCredit or InvType==kInvoiceTypeCreditSpecialSales) and (Status!=kRecordStatusManual) then begin testf = true; end;
//    case kOfficialNumTypeManualCreditIVVc:  
//      if (InvType==kInvoiceTypeCredit or InvType==kInvoiceTypeCreditSpecialSales) and (Status!=kRecordStatusManual) then begin testf = true; end;
    case kOfficialNumTypeSpecialSalesIVVc:  
      if (InvType==kInvoiceTypeNormalSpecialSales) then begin testf = true; end;
    case kOfficialNumTypeIVVc:  
      if (InvType==kInvoiceTypeNormal or InvType==kInvoiceTypeDownpayment or InvType==kInvoiceTypePrepayment) then begin testf = true; end;
    case kOfficialNumTypeIVVc:  
      if (InvType==kInvoiceTypeNormal or InvType==kInvoiceTypeDownpayment or InvType==kInvoiceTypePrepayment) then begin testf = true; end;
    case kOfficialNumTypeManualIVVc:  
      if (InvType==kInvoiceTypeNormal or InvType==kInvoiceTypeDownpayment or InvType==kInvoiceTypePrepayment) then begin testf = true; end;
/*      
    case kOfficialNumTypeLiquidationIVVc:  
      if (InvType==kInvoiceTypeNormal or InvType==kInvoiceTypeDownpayment or InvType==kInvoiceTypePrepayment) and (taxtype==kTaxInvTypeLiquidation) then begin testf = true; end;
    case kOfficialNumTypeReceiptIVVc:  
      if (InvType==kInvoiceTypeNormal or InvType==kInvoiceTypeDownpayment or InvType==kInvoiceTypePrepayment) and (taxtype==kTaxInvTypeReceipt) then begin testf = true; end;
*/      
  end;

/*
  if (LINrbrw.RegType==kOfficialNumTypeAllIVVc) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeInterestIVVc) and (InvType==kInvoiceTypeInterest or InvType==kInvoiceTypeDebit) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeCashInvoiceReceiptPRTIVVc or LINrbrw.RegType==kOfficialNumTypeManualCashInvoiceReceiptIVVc) and (InvType==kInvoiceTypeCashInvoiceReceiptPRT) and (Status!=kRecordStatusRecovered) then begin 
    testf = true;
  end;  
  if (LINrbrw.RegType==kOfficialNumTypeCreditIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdCreditIVVc) and (InvType==kInvoiceTypeCredit or InvType==kInvoiceTypeCreditSpecialSales) and (Status!=kRecordStatusManual) then begin 
    testf = true;
  end;   
  if (LINrbrw.RegType==kOfficialNumTypeSpecialSalesIVVc) and (InvType==kInvoiceTypeNormalSpecialSales) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeIVVc or LINrbrw.RegType==kOfficialNumTypeManualIVVc or LINrbrw.RegType==kOfficialNumTypeRecoverdIVVc) and (InvType==kInvoiceTypeNormal or InvType==kInvoiceTypeDownpayment or InvType==kInvoiceTypePrepayment) then begin 
    testf = true;
  end;  
*/  
  if (testf) then begin
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(BranchID)) then begin 
        if (LINrbrw.Branch!=BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (DateInRange(td,LINrbrw.PurchDate,LINrbrw.EndDate)==false) then begin testf = false; end;
    end;
  end;
  OfficialSerialNrCanBeBlankPRT_IVVc = testf;
  return;
end;

function Boolean OfficialSerialNrCanBeBlankPRT_IPVc(row LegalInvNrBlock LINrbrw,string cuclass,string BranchID,string LocalMachineCode,Date td,Integer InvType,Integer Status)
begin
  Boolean testf;
  
  testf = false;
  /* Should Never possible to have a blank Official Number for Receipts  */
  if (testf) then begin
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(BranchID)) then begin 
        if (LINrbrw.Branch!=BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (DateInRange(td,LINrbrw.PurchDate,LINrbrw.EndDate)==false) then begin testf = false; end;
    end;
  end;
  OfficialSerialNrCanBeBlankPRT_IPVc = testf;
  return;
end;

function Boolean OfficialSerialNrCanBeBlankPRT(string filename,string cuclass,Integer okflag,string officialsernr,string branchid,string lm,Date td,Integer InvType,Integer Status)
begin
  Boolean res,testf,foundf;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  
  res = true;
  if (nonblank(officialsernr)) then begin
    goto LOfficialSerialNrCanBeBlankPRT;
  end;
  if (Status==kRecordStatusManual or Status==kRecordStatusRecovered) then begin
    goto LOfficialSerialNrCanBeBlankPRT;
  end;
  BlockLoad(LINrb);  
  rwcnt = MatRowCnt(LINrb);
  if (rwcnt>0) then begin    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      switch (filename) begin
        case "IVVc":
          testf = OfficialSerialNrCanBeBlankPRT_IVVc(LINrbrw,cuclass,branchid,lm,td,InvType,Status);
          if (testf) then begin
            foundf = true; 
            switch (LINrbrw.SelectionType) begin
              case kLegalInvNrSelectionTypeManual:
                if (okflag!=0) then begin
                  res = false;
                end; 
              case kLegalInvNrSelectionTypeAtOK:
                if (okflag!=0) then begin
                  res = false;
                end;             
              case kLegalInvNrSelectionTypeAtInsert:
                res = false;
            end;
          end;
        case "IPVc":
          testf = OfficialSerialNrCanBeBlankPRT_IPVc(LINrbrw,cuclass,branchid,lm,td,InvType,Status);
          if (testf) then begin
            foundf = true; 
            switch (LINrbrw.SelectionType) begin
              case kLegalInvNrSelectionTypeManual:
                if (okflag!=0) then begin
                  res = false;
                end; 
              case kLegalInvNrSelectionTypeAtOK:
                if (okflag!=0) then begin
                  res = false;
                end;             
              case kLegalInvNrSelectionTypeAtInsert:
                res = false;
            end;
          end;
      end;
    end;
  end;
LOfficialSerialNrCanBeBlankPRT:;  
  if (foundf==false) then begin
    if (okflag!=0) then begin
      res = false;
    end;
  end;
  OfficialSerialNrCanBeBlankPRT = res;
  return;
end;

function Boolean OfficialSerialNrCanBeBlankAGO_IVVc(row LegalInvNrBlock LINrbrw,string cuclass,string BranchID,string LocalMachineCode,Date td,Integer InvType,Integer Status)
begin
  Boolean testf;
  
  testf = false;
  if (LINrbrw.RegType==kOfficialNumTypeAllIVVc) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeInterestIVVc) and (InvType==kInvoiceTypeInterest or InvType==kInvoiceTypeDebit) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeCreditIVVc) and (InvType==kInvoiceTypeCredit or InvType==kInvoiceTypeCreditSpecialSales) then begin 
    testf = true;
  end; 
  if (LINrbrw.RegType==kOfficialNumTypeSpecialSalesIVVc) and (InvType==kInvoiceTypeNormalSpecialSales) then begin 
    testf = true;
  end;
  if (LINrbrw.RegType==kOfficialNumTypeIVVc) and (InvType==kInvoiceTypeNormal or InvType==kInvoiceTypeDownpayment or InvType==kInvoiceTypePrepayment) then begin 
    testf = true;
  end;  
  if (testf) then begin
    if (nonblank(LINrbrw.Branch)) then begin 
      if (nonblank(BranchID)) then begin 
        if (LINrbrw.Branch!=BranchID) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.LocalMachineCode)) then begin 
      if (nonblank(LocalMachineCode)) then begin 
        if (LINrbrw.LocalMachineCode!=LocalMachineCode) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblank(LINrbrw.CClass)) then begin
      if (nonblank(cuclass)) then begin
        if (SetInSet(LINrbrw.CClass,cuclass)==false) then begin 
          testf = false; 
        end;
      end else begin
        testf = false; 
      end;
    end;
    if (nonblankdate(LINrbrw.PurchDate)) then begin
      if (DateInRange(td,LINrbrw.PurchDate,LINrbrw.EndDate)==false) then begin testf = false; end;
    end;
  end;
  OfficialSerialNrCanBeBlankAGO_IVVc = testf;
  return;
end;

function Boolean OfficialSerialNrCanBeBlankAGO(string filename,string cuclass,Integer okflag,string officialsernr,string branchid,string lm,Date td,Integer InvType,Integer Status)
begin
  Boolean res,testf,foundf;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt;
  
  res = true;
  if (nonblank(officialsernr)) then begin
    goto LOfficialSerialNrCanBeBlankAGO;
  end;
  BlockLoad(LINrb);  
  rwcnt = MatRowCnt(LINrb);
  if (rwcnt>0) then begin    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LINrb,i,LINrbrw);
      switch (filename) begin
        case "IVVc":
          testf = OfficialSerialNrCanBeBlankAGO_IVVc(LINrbrw,cuclass,branchid,lm,td,InvType,Status);
          if (testf) then begin
            foundf = true; 
            switch (LINrbrw.SelectionType) begin
              case kLegalInvNrSelectionTypeManual:
                res = false; 
              case kLegalInvNrSelectionTypeAtOK:
                if (okflag!=0) then begin
                  res = false;
                end;             
              case kLegalInvNrSelectionTypeAtInsert:
                res = false;
            end;
          end;
      end;
    end;
  end;
LOfficialSerialNrCanBeBlankAGO:;  
  if (foundf==false) then begin
    if (okflag!=0) then begin
      res = false;
    end;
  end;
  OfficialSerialNrCanBeBlankAGO = res;
  return;
end;

global
function Boolean OfficialSerialNrCanBeBlank(string filename,string cuclass,Integer okflag,string officialsernr,string branchid,string lm,Date td,Integer InvType,Integer Status)
begin
  Boolean res;
  
  if (HasLocalization("PRT")) then begin
    res = OfficialSerialNrCanBeBlankPRT(filename,cuclass,okflag,branchid,lm,officialsernr,td,InvType,Status);
  end;
  if (HasLocalization("AGO")) then begin 
    res = OfficialSerialNrCanBeBlankAGO(filename,cuclass,okflag,branchid,lm,officialsernr,td,InvType,Status);
  end;
  OfficialSerialNrCanBeBlank = res;
  return;
end;

global
function string 255 GetLegalInvoiceNrSerieFromLegalBlock(string OfficialSerNr)
begin
  string 255 res;
  row LegalInvNrBlock LINrbrw;
  
  GetLegalInvNrRow(OfficialSerNr,LINrbrw);
  res = Left(OfficialSerNr,len(LINrbrw.Serie));
  
  GetLegalInvoiceNrSerieFromLegalBlock = res;
  return;
end;

global
function string 255 UpdateOfficialSerNrSerie(Integer stat,Integer OKFlag,Integer OK2Flag,string OfficialSerNr,boolean UpdateSeriesf)
begin
  string 255 res;
  Boolean transf;
  
  transf = false;
  switch (stat) begin
    case Rs_insert: if (OKFlag==1) then begin transf = true; end;
    case Rs_update: 
          if (OK2Flag==1) then begin transf = false; end;
          if (OK2Flag!=1 and OKFlag!=0) then begin transf = true; end; 
  end;
  if (transf) then begin 
    if (UpdateSeriesf and nonblank(OfficialSerNr)) then begin
      res = GetLegalInvoiceNrSerieFromLegalBlock(OfficialSerNr);
    end;       
  end;
  UpdateOfficialSerNrSerie = res;
  return;
end;

global
procedure FindNextStockMovVcOfficialSerialNr(var record StockMovVc StockMovr,Integer kLegalInvNrSelectionType)
begin
  record CUVc CUr;
  string 255 res,tstr;
  record LegalInvNrBlock LINrb;
  row LegalInvNrBlock LINrbrw;
  Integer i,rwcnt,pages;
  Boolean testf;
  Date docdate;  
  record OffSerNrIVVc OffSerNrIVr;

  if (nonblank(StockMovr.ThrouLocation)) then begin
    docdate = StockMovr.SentTransDate;
  end else begin
    docdate = StockMovr.TransDate;
  end;
 
  NextOfficialSerNr("StockMovVc",StockMovr.SerNr,docdate,"",res);
  if (blank(res)) then begin
    OffSerNrIVr.IVNr = StockMovr.SerNr;
    OffSerNrIVr.FileName = "StockMovVc";
    if (ReadFirstKey("MainKey",OffSerNrIVr,2,true)) then begin
      res = OffSerNrIVr.OfficialSerNr;
      goto LFindNextStockMovVcOfficialSerialNr;
    end;
    switch (StockMovr.StockMovType) begin
      case kStockMovTypeNormal:
        PrepareOfficialSerialNrBlock(kOfficialNumTypeStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeManualStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdStockMovVc,LINrb);
      case kStockMovTypeOwnGoodsTransport:
        PrepareOfficialSerialNrBlock(kOfficialNumTypeOwnGoodsTransStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeManualOwnGoodsTransStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdOwnGoodsTransStockMovVc,LINrb);
      case kStockMovTypeGlobalTransport:
        PrepareOfficialSerialNrBlock(kOfficialNumTypeGlobalTransStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeManualGlobalTransStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdGlobalTransStockMovVc,LINrb);
      case kStockMovTypeConsigment:
        PrepareOfficialSerialNrBlock(kOfficialNumTypeConsigmentStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeManualConsigmentStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdConsigmentStockMovVc,LINrb);
      case kStockMovTypeThirdEntGoodsTransport:
        PrepareOfficialSerialNrBlock(kOfficialNumTypeThirdEntGoodsTransStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeManualThirdEntGoodsTransStockMovVc,LINrb);
        PrepareOfficialSerialNrBlock(kOfficialNumTypeRecoverdThirdEntGoodsTransStockMovVc,LINrb);
    end;
    rwcnt = MatRowCnt(LINrb);
    if (rwcnt>0) then begin    
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LINrb,i,LINrbrw);
        testf = TestNextOfficialSerialNr_StockMovVc(LINrbrw,"",StockMovr,true,kLegalInvNrSelectionType);
        if (testf) then begin
          res = NextLegalSerNr("StockMovVc",StockMovr.SerNr,docdate,LINrbrw.Serie,LINrbrw.TSerStart,LINrbrw.TSerEnd);
          if (nonblank(res)) then begin 
            /*
            if (LINrbrw.PerPage==1) then begin
              pages = CountNumberOfInvoicePrintPages(IVr);
              if (pages>1) then begin
                res = res & ":";
                tstr = Right(res,len(LINrbrw.TSerStart));
                tstr = StringToLongInt(tstr) + pages - 1;
                M4PadString(tstr,len(LINrbrw.TSerStart),"0",true,tstr);
                tstr = LINrbrw.Serie & tstr;
                res = res & tstr;
              end;
            end;
            */
            i = rwcnt;
          end;
        end;
      end;
    end;   
  end;
  if (nonblank(res)) then begin 
    StockMovr.OfficialSerNr = res;
//    AddPortugueseSAFTHashToStockMov(StockMovr);// must be after FIFO  filled in
  end;  
LFindNextStockMovVcOfficialSerialNr:;  
  return;
end;

