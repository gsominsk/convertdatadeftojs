external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure WarnFutureDate(Boolean,Date);
external procedure LateCostSumUp(var record LateCostVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure CalculatePURowSum(val,val,string,var val,val,
                                     val,val,val,val,val,
                                     string,var val,Boolean,string,
                                     val,val,val,val,val);
external procedure LateCostSetShipCost(var record LateCostVc,Integer);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);
external procedure PUCalcPerc(val,string,var val);


global
function Boolean LateCostVc_PasteCostPrice(var record LateCostVc LateCostr,Integer rownr)
begin
  row LateCostVc LateCostrw;
  Boolean chsum,chrsum;
  val t,t1,t2,cc,vat,bas,s;
  string 255 tstr;
  string 2 vatcode;
  record SysFormatBlock SysFormatRec;
  
    BlockLoad(SysFormatRec);
    MatRowGet(LateCostr,rownr,LateCostrw);    
    bas = MulRateToBase1(LateCostr.CurncyCode,LateCostrw.UPrice,LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2,DefaultCurRoundOff);
    if (LateCostr.InclVAT==1) then begin
      if (nonblank(LateCostrw.VATCode)) then begin
        vatcode = LateCostrw.VATCode;
      end else begin
        GetItemVATCode(LateCostrw.ArtCode,0,vatcode,false);
      end;
      MulVATIV(vatcode,bas,vat,t1,LateCostr.InclVAT,0);
      bas = bas - vat;
    end;
    tstr = LateCostrw.Extra;
    if (Mid(tstr,len(tstr),1)=="%") then begin
      t = LateCostrw.CostPrice - LateCostrw.ShipCost;
      t = LateCostrw.CostPrice - LateCostrw.RowCost1;
      t = LateCostrw.CostPrice - LateCostrw.RowCost2;
      t = LateCostrw.CostPrice - LateCostrw.RowCost3;
      t = LateCostrw.CostPrice - LateCostrw.RowCost4;
      t = LateCostrw.CostPrice - LateCostrw.RowCost5;
      PUCalcPerc(LateCostrw.UPrice,LateCostrw.CustomsCost,cc);
      t = t - cc;
      t2 = t*100;
      bas = t2/bas;
      bas = bas - 100;
      LateCostrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      LateCostrw.Extra = LateCostrw.Extra & "%";
    end else begin
      bas = LateCostrw.CostPrice - bas;
      bas = bas - LateCostrw.ShipCost;
      bas = bas - LateCostrw.RowCost1;
      bas = bas - LateCostrw.RowCost2;
      bas = bas - LateCostrw.RowCost3;
      bas = bas - LateCostrw.RowCost4;
      bas = bas - LateCostrw.RowCost5;
      PUCalcPerc(LateCostrw.UPrice,LateCostrw.CustomsCost,cc);
      bas = bas - cc;
      LateCostrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    end;
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(LateCostrw.ArtCode,LateCostrw.UPrice,LateCostr.InclVAT,0,LateCostrw.Extra,LateCostr.CurncyCode,
                      LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2,
                      LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                      LateCostrw.CustomsCost,bas,LateCostrw.Quant,s,LateCostrw.VATCode,0);
      LateCostrw.CostPrice = bas;
      LateCostrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(LateCostr,rownr,LateCostrw);    
    if (chsum) then begin
      LateCostSumUp(LateCostr);
    end;
  LateCostVc_PasteCostPrice = true;
  return;
end;

global
procedure LateCostRecalcCost(var record LateCostVc LateCostp)
BEGIN
  row LateCostVc LateCostrw;
  Integer rwcnt,i;
  val p,s;
        
  rwcnt = MatRowCnt(LateCostp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LateCostp,i,LateCostrw);
    if ((LateCostrw.stp==3) or (LateCostrw.ovst!=0)) then begin
      goto LSKIPLateCostROWRecalCost;
    end;
    PUCalcCostPrice(LateCostrw.ArtCode,LateCostrw.UPrice,LateCostp.InclVAT,0,LateCostrw.Extra,LateCostp.CurncyCode,
                    LateCostp.FrRate,LateCostp.ToRateB1,LateCostp.ToRateB2,LateCostp.BaseRate1,LateCostp.BaseRate2,
                    LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                    LateCostrw.CustomsCost,p,LateCostrw.Quant,s,LateCostrw.VATCode,0);
    LateCostrw.CostPrice = p;
    LateCostrw.Sum = s;                    
    MatRowPut(LateCostp,i,LateCostrw);
LSKIPLateCostROWRecalCost:;    
  end;
  LateCostSumUp(LateCostp);
  RETURN;
END;

global
function Integer LateCostVc_PasteTransDate(var record LateCostVc LateCostr)
BEGIN
  Integer res;
  string 5 curcode;
  val fr,to1,to2,br1,br2;
  
  if (DateWarned(LateCostr.TransDate,"LateCostVc")) then begin
    res = 1045;
  end;
  if (WarnOldRecords(LateCostr.TransDate,"LateCostVc",LateCostr.SerNr)) then begin
    res = 2020;
  end;
  curcode = LateCostr.CurncyCode;
  GetFullCurncyRate(curcode,LateCostr.TransDate,fr,to1,to2,br1,br2);
  LateCostr.CurncyCode = curcode;
  LateCostr.FrRate = fr;
  LateCostr.ToRateB1 = to1; 
  LateCostr.ToRateB2 = to2;
  LateCostr.BaseRate1 = br1;
  LateCostr.BaseRate2 = br2;  
  LateCostRecalcCost(LateCostr);
  WarnFutureDate(true,LateCostr.TransDate);
  LateCostVc_PasteTransDate = res;
  RETURN;
END;

global
procedure LateCostVc_PasteShipCost(var record LateCostVc LateCostr,Integer rownr)
BEGIN
  Boolean chsum,chrsum;
  row LateCostVc LateCostrw;
  val p,s;

  if (rownr>=0) then begin
    MatRowGet(LateCostr,rownr,LateCostrw);  
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(LateCostrw.ArtCode,LateCostrw.UPrice,LateCostr.InclVAT,0,LateCostrw.Extra,LateCostr.CurncyCode,
                    LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2,
                    LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                    LateCostrw.CustomsCost,p,LateCostrw.Quant,s,LateCostrw.VATCode,0);
      LateCostrw.CostPrice = p;
      LateCostrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(LateCostr,rownr,LateCostrw);    
  end else begin
    LateCostSetShipCost(LateCostr,0);
    LateCostRecalcCost(LateCostr);
  end;
  if (chsum) then begin
    LateCostSumUp(LateCostr);
  end;
  RETURN;
END;

global
procedure LateCostVc_PasteCost1(var record LateCostVc LateCostr)
BEGIN
  Boolean chsum,chrsum;
  
  LateCostSetShipCost(LateCostr,2);
  LateCostRecalcCost(LateCostr);
  LateCostSumUp(LateCostr);
  RETURN;
END;

global
procedure LateCostVc_PasteCost2(var record LateCostVc LateCostr)
BEGIN
  Boolean chsum,chrsum;
  
  LateCostSetShipCost(LateCostr,3);
  LateCostRecalcCost(LateCostr);
  LateCostSumUp(LateCostr);
  RETURN;
END;

global
procedure LateCostVc_PasteCost3(var record LateCostVc LateCostr)
BEGIN
  Boolean chsum,chrsum;
  
  LateCostSetShipCost(LateCostr,4);
  LateCostRecalcCost(LateCostr);
  LateCostSumUp(LateCostr);
  RETURN;
END;

global
procedure LateCostVc_PasteCost4(var record LateCostVc LateCostr)
BEGIN
  Boolean chsum,chrsum;
  
  LateCostSetShipCost(LateCostr,5);
  LateCostRecalcCost(LateCostr);
  LateCostSumUp(LateCostr);
  RETURN;
END;

global
procedure LateCostVc_PasteCost5(var record LateCostVc LateCostr)
BEGIN
  Boolean chsum,chrsum;
  
  LateCostSetShipCost(LateCostr,6);
  LateCostRecalcCost(LateCostr);
  LateCostSumUp(LateCostr);
  RETURN;
END;

global
procedure LateCostVc_PasteRowCost(var record LateCostVc LateCostr,Integer rownr)
BEGIN
  Boolean chsum,chrsum;
  row LateCostVc LateCostrw;
  val p,s;

  MatRowGet(LateCostr,rownr,LateCostrw);  
  chrsum = true;
  if (chrsum) then begin
    PUCalcCostPrice(LateCostrw.ArtCode,LateCostrw.UPrice,LateCostr.InclVAT,0,LateCostrw.Extra,LateCostr.CurncyCode,
                    LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2,
                    LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                    LateCostrw.CustomsCost,p,LateCostrw.Quant,s,LateCostrw.VATCode,0);
    LateCostrw.CostPrice = p;
    LateCostrw.Sum = s;
    chsum = true;
  end;
  MatRowPut(LateCostr,rownr,LateCostrw);  
  if (chsum) then begin
    LateCostSumUp(LateCostr);
  end;
  RETURN;
END;

global
procedure LateCostVc_PasteCustomsCost(var record LateCostVc LateCostr,Integer rownr)
BEGIN
  Boolean chsum,chrsum;
  row LateCostVc LateCostrw;
  val p,s;

  if (rownr>=0) then begin
    MatRowGet(LateCostr,rownr,LateCostrw);  
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(LateCostrw.ArtCode,LateCostrw.UPrice,LateCostr.InclVAT,0,LateCostrw.Extra,LateCostr.CurncyCode,
                    LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2,
                    LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                    LateCostrw.CustomsCost,p,LateCostrw.Quant,s,LateCostrw.VATCode,0);
      LateCostrw.CostPrice = p;
      LateCostrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(LateCostr,rownr,LateCostrw);    
  end else begin
    LateCostSetShipCost(LateCostr,1);
    LateCostRecalcCost(LateCostr);
  end;
  if (chsum) then begin
    LateCostSumUp(LateCostr);
  end;
  RETURN;
END;

procedure CopyHeaderPUToLateCost(record PUVc PUr,var record LateCostVc LateCostr)
BEGIN
  LateCostr.PUNr = PUr.SerNr;
  LateCostr.Comment = PUr.Comment;
  LateCostr.VECode = PUr.VECode;
  LateCostr.VEName = PUr.VEName;
  LateCostr.PONr = PUr.PONr;
  LateCostr.Location = PUr.Location;
  LateCostr.CurncyCode = PUr.CurncyCode;
  LateCostr.ToRateB1 = PUr.ToRateB1;
  LateCostr.ToRateB2 = PUr.ToRateB2;
  LateCostr.FrRate = PUr.FrRate;
  LateCostr.BaseRate1 = PUr.BaseRate1;
  LateCostr.BaseRate2 = PUr.BaseRate2;
  LateCostr.TransDate = CurrentDate;
  LateCostr.InclVAT = PUr.InclVAT;
  LateCostr.SumCostPrice = PUr.SumCostPrice;
  LateCostr.SumQuant = PUr.SumQuant;
  LateCostr.OKFlag = 0;
  LateCostr.ShipCost = PUr.ShipCost;
  LateCostr.CustomsCost = PUr.CustomsCost;
  LateCostr.ExtraCost = PUr.ExtraCost;  
  LateCostr.ExportedFlag = PUr.ExportedFlag;  
  LateCostr.Objects = PUr.Objects;
  LateCostr.PUClass = PUr.PUClass;
  LateCostr.POCOSerNr = PUr.POCOSerNr;
  LateCostr.Cost1 = PUr.Cost1;
  LateCostr.Cost2 = PUr.Cost2;
  LateCostr.Cost3 = PUr.Cost3;
  LateCostr.Cost4 = PUr.Cost4;
  LateCostr.Cost5 = PUr.Cost5;
  LateCostr.VATVal = PUr.VATVal;
  LateCostr.SubTotal = PUr.SubTotal;
  LateCostr.PayVal = PUr.PayVal;
  LateCostr.VEVATCode = PUr.VEVATCode;
  LateCostr.Invalid = PUr.Invalid;
  RETURN;
END;

function
val GetLateCostQuant(LongInt punr,LongInt latecostnr,Integer rownr)
BEGIN
  val res;
  record LateCostVc LateCostr;
  row LateCostVc LateCostrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  
  TrHs = true;
  LateCostr.PUNr = punr;
  while (LoopKey("PUNr",LateCostr,1,TrHs)) begin
    if (LateCostr.PUNr!=punr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (LateCostr.SerNr==latecostnr) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(LateCostr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(LateCostr,i,LateCostrw);
          if (LateCostrw.PURow==rownr) then begin
            res = res + LateCostrw.Quant;
          end;
        end;
      end;
    end;
  end;  
LGetLateCostQuant:;  
  GetLateCostQuant = res;
  RETURN;
END;

global
procedure PastePURowToLateCost(record PUVc PUr,var record LateCostVc LateCostr,Integer rownr,var Integer rowi)
BEGIN
  row PUVc PUrw;
  row LateCostVc LateCostrw;
  Integer rwcnt;
  val qty,t;

  rwcnt = MatRowCnt(PUr);
  if (rownr<rwcnt) then begin
    MatRowGet(PUr,rownr,PUrw);
    qty = GetLateCostQuant(PUr.SerNr,LateCostr.SerNr,rownr);
    qty = PUrw.Quant - qty;
    if (qty>0) then begin
      ClearRow(LateCostr,LateCostrw,PUrw.stp);
      LateCostrw.stp = PUrw.stp;
      LateCostrw.ovst = PUrw.ovst;
      LateCostrw.PURow = rownr;
      LateCostrw.ArtCode = PUrw.ArtCode;
      LateCostrw.Quant = qty;
      LateCostrw.Spec = PUrw.Spec;      
      LateCostrw.UPrice = PUrw.UPrice;      
      LateCostrw.SerialNr = PUrw.SerialNr;      
      LateCostrw.OrdRow = PUrw.OrdRow;
      LateCostrw.Extra = PUrw.Extra;
      LateCostrw.CostPrice = PUrw.CostPrice;
      LateCostrw.VEItemCode = PUrw.VEItemCode;
      LateCostrw.VARList = PUrw.VARList;
      LateCostrw.ShipCost = PUrw.ShipCost;
      LateCostrw.CustomsCost = PUrw.CustomsCost;
      LateCostrw.BestBefore = PUrw.BestBefore;
      LateCostrw.Coefficient = PUrw.Coefficient;
      LateCostrw.BasePrice = PUrw.BasePrice;
      LateCostrw.Comment = PUrw.Comment;
      LateCostrw.Objects = PUrw.Objects;
      LateCostrw.CostAcc = PUrw.CostAcc;
      LateCostrw.CredAcc = PUrw.CredAcc;
      LateCostrw.CustomsNr = PUrw.CustomsNr;
      LateCostrw.CountryOfOrg = PUrw.CountryOfOrg;
      LateCostrw.PosCode = PUrw.PosCode;
      LateCostrw.BatchStatus = PUrw.BatchStatus;
      LateCostrw.UnitXval = PUrw.UnitXval;
      LateCostrw.UnitYval = PUrw.UnitYval;
      LateCostrw.UnitZval = PUrw.UnitZval;
      LateCostrw.RowCost1 = PUrw.RowCost1;
      LateCostrw.RowCost2 = PUrw.RowCost2;
      LateCostrw.RowCost3 = PUrw.RowCost3;
      LateCostrw.RowCost4 = PUrw.RowCost4;
      LateCostrw.RowCost5 = PUrw.RowCost5;
      LateCostrw.VATCode = PUrw.VATCode;
      LateCostrw.Sign = PUrw.Sign;
      LateCostrw.UpdDate = PUrw.UpdDate;
      CalculatePURowSum(LateCostrw.Quant,LateCostrw.UPrice,LateCostrw.Extra,LateCostrw.CostPrice,LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                        LateCostrw.CustomsCost,t,false,LateCostr.CurncyCode,LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2);
      LateCostrw.Sum = t;      
      MatRowPut(LateCostr,rowi,LateCostrw);
      rowi = rowi + 1;
    end;
  end else begin
    ClearRow(LateCostr,LateCostrw,1);
    MatRowPut(LateCostr,rowi,LateCostrw);
  end;
  RETURN;
END;

global
procedure PastePUToLateCost(record PUVc PUr,var record LateCostVc LateCostr)
BEGIN  
  Integer i,rwcnt;
  Integer rowi;
  
  CopyHeaderPUToLateCost(PUr,LateCostr);
  rwcnt = MatRowCnt(PUr);
  for (i=0;i<rwcnt;i=i+1) begin
    PastePURowToLateCost(PUr,LateCostr,i,rowi);
  end;
  LateCostSumUp(LateCostr);
  RETURN;
END;

