external procedure QTPasteRvrsVATCode(var record QTVc,Boolean);
external function Boolean GetFirstItem(var string,var record INVc);
external function string 60 AddStringToStringList(string,string);
forward procedure QTDUpdatePrices(var record QTVc,Boolean);
external updating function LongInt MailVcRecordCheck(var record MailVc,record MailVc,LongInt,LongInt);
external function Integer QTApprovalStatus(record QTVc,var record AcceptanceRulesVc);
external function Boolean HasApprovals();
external procedure GetCountryName(string,string,var string);
external function val CalcUnitFactor(string,val);
external procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external procedure QTVc_FillupTaxTemplate(var record QTVc);
external function string 255 OverrideTaxMatrix(string,var record TaxMatrixVc);
external procedure QTVc_ChangeQuantityRecepy(string,val,Integer,var record QTVc);
external procedure RowCalculateTaxMatrix_QTVc(var record QTVc,Integer,row QTVc);
external procedure AddPerceptionTaxesRows_QTVc(var record QTVc);
external function string 255 FillupTaxMatrix(Integer,string,string,string,string,string,var record TaxMatrixVc);
external procedure RemoveOldProjectObjects(string,var string);
external function Boolean HasSalesmanChanged(string,string);
external function string 60 AddObjectToObjectList(string,string);
external procedure ExtractObj(string,var Integer,var string);
external procedure AddObj(string,var string);
external function Boolean CostPriceForGP(string,string,string,string,var val);
external procedure GetUserObject(string,var string);
external procedure RemoveOldPersObjects(string,var string);
external procedure GetPriceList(string,Date,Time,var string,var Integer);
external procedure RemoveOldCustObjects(string,var string);
external procedure SetSalesMan(var string,string);
external function Boolean GetPD(var record PDVc);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function string 255 FindINObjects(string,string);
external function string 20 GetTax2Acc(string);
external procedure GetTaxesDiscounts(string,Date,string,string,var val,var val);
external procedure QTVc_PasteSalesMan(var record QTVc,string);
external procedure RemoveOldUserObjects(string,var string);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var Integer,var string);
external procedure SaveExchangeRate(val,val,val,val,val,var val,var val,var val,var val,var val);
external function Boolean OtherExchangeRate(val,val,val,val,val,val,val,val,val,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure QTDchsum(record QTVc,Integer);
external procedure SerialNrDimensions(string,string,var val,var val,var val);
external function Integer CheckSerialStatus(string,string,var string);
external procedure PasteSalesManInQT(var record QTVc);
external procedure GetBaseCurncy(Integer,var string);
external procedure TBBUSumup(var record TBBUVc);
external procedure GetPRName(string,var string);
external procedure GetPayDealText(string,string,var string);
external procedure FindUserMailboxName(string,var string,var string);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
external procedure GetProjectPriceAndCost(string,string,string,string,string,Integer,var val,var val,var string,var val,var val,var string);
external function Boolean SetUnitFactor(string,var val,val,val,val,var val,var val,var val,var string,Boolean);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean QtyDepPriceL(string);
external procedure QTGetCalcItemPrice(record INVc,record QTVc,Integer,var val);
external function Boolean QTVc_ExplodeRecepy(record INVc,val,var record QTVc,string,Integer);
external function Boolean QTDchrsum(var record QTVc,Integer,Integer);
external procedure QTSumup(var record QTVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean INVc_AllowSales(record INVc,var LongInt);
external function string 20 FindCustRoute(string,string,string);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);

global
procedure QTVc_PasteInvCountry(var record QTVc QTp,string oldCountryCode)
begin 
  if (QTp.InvCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(QTp.InvCountry)) then begin 
      GetCountryName(QTp.InvCountry,QTp.LangCode,QTp.InvCountryName);
    end else begin
      QTp.InvCountryName = "";
    end;   
  end;
  return;
end;

global
procedure QTVc_PasteDelCountry(var record QTVc QTp,string oldCountryCode)
begin 
  if (QTp.DelCountry!=oldCountryCode or blank(oldCountryCode)) then begin
    if (nonblank(QTp.DelCountry)) then begin 
      GetCountryName(QTp.DelCountry,QTp.LangCode,QTp.DelCountryName);
    end else begin
      QTp.DelCountryName = "";
    end;
  end;
  return;
end;

global
procedure QTGetRate(var record QTVc QTp)
BEGIN
  val from,to1,to2,base1,base2;
  val sum;
  string 5 crncy;
 
  crncy = QTp.CurncyCode;
  GetFullCurncyRate(crncy,QTp.QTDate,from,to1,to2,base1,base2);
  QTp.CurncyCode = crncy;
  QTp.FrRate = from;
  QTp.ToRateB1 = to1;
  QTp.ToRateB2 = to2;
  QTp.BaseRate1 = base1;
  QTp.BaseRate2 = base2;  
  sum = MulRateToBase1(QTp.CurncyCode,QTp.Sum4,from,to1,to2,base1,base2,DefaultCurRoundOff);
  QTp.BaseSum4 = sum;  
  RETURN;
END;

global
procedure QTVc_PasteInvoiceToCode(var record QTVc QTr)
begin
  record CUVc CUr;
  
  CUr.Code = QTr.InvoiceToCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (nonblank(CUr.PayDeal)) then begin
      QTr.PayDeal = CUr.PayDeal;
    end;
  end;
end;

global
function Boolean PasteCustInQT(var record QTVc QTp,string custcode,string efstr,var string warning,Boolean updateallf)
BEGIN
  record RebVc Rebr;
  record CUVc CUr;
  Boolean res;
  string 255 tstr,tstr2;
  Integer i;
  record PDVc PDr;
  record CCatVc CCatr;
  Time blankt;
  record PLDefVc PLDefR;
  string 5 oldpricelist,oldvatcode,oldcurrency;

  if ((efstr!=QTp.CustCode) and (nonblank(efstr))) then begin
    tstr = QTp.Objects;
    RemoveOldCustObjects(efstr,tstr);
    QTp.Objects = tstr;
  end;  
  warning = "";
  oldpricelist = QTp.PriceList;
  oldvatcode = QTp.CustVATCode;
  oldcurrency = QTp.CurncyCode;
  CUr.Code = custcode;
  if (ReadFirstMain(CUr,1,true)) then begin
    res = true;
    CCatr.Code = CUr.CustCat;
    if (ReadFirstMain(CCatr,1,true)) then begin end;
    Rebr.Code = CUr.RebCode;
    if (blank(Rebr.Code)) then begin
      Rebr.Code = CCatr.RebCode;
    end;
    if (ReadFirstMain(Rebr,1,true)) then begin
      QTp.DiscPerc = Rebr.DiscPerc;
    end;
    QTp.Addr0 = CUr.Name;
    QTp.Addr1 = CUr.InvAddr0;
    QTp.Addr2 = CUr.InvAddr1;
    QTp.Addr3 = CUr.InvAddr2;
    QTp.InvAddr3 = CUr.InvAddr3;
    QTp.InvAddr4 = CUr.InvAddr4;
    QTp.InvCountry = CUr.CountryCode;
    if ((nonblank(CUr.DelAddr0)) or (nonblank(CUr.DelAddr1)) or (nonblank(CUr.DelAddr2)) or (nonblank(CUr.DelAddr3)) or (nonblank(CUr.DelAddr4))) then begin
      QTp.ShipAddr0 = CUr.Name;
      QTp.ShipAddr1 = CUr.DelAddr0;
      QTp.ShipAddr2 = CUr.DelAddr1;
      QTp.ShipAddr3 = CUr.DelAddr2;
      QTp.DelAddr3 = CUr.DelAddr3;
      QTp.DelAddr4 = CUr.DelAddr4;
      QTp.DelCountry = CUr.DelCountry;
    end else begin  //BS should blank del address if you switch customer (as on order)
      QTp.ShipAddr0 = "";
      QTp.ShipAddr1 = "";
      QTp.ShipAddr2 = "";
      QTp.ShipAddr3 = "";
      QTp.DelAddr3 = "";
      QTp.DelAddr4 = "";
      QTp.DelCountry = "";
    end;
    QTp.BankCode = CUr.AccOperator;
    QTp.ExportFlag = CUr.ExportFlag;
    QTp.CustCat = CUr.CustCat;
    QTp.PayDeal = CUr.PayDeal;
    QTp.Objects = AddObjectToObjectList(QTp.Objects,CUr.Objects);    
    QTp.CurncyCode = CUr.CurncyCode;
    QTp.LangCode = CUr.LangCode;
    QTp.InvoiceToCode = CUr.InvoiceToCode;
    QTVc_PasteInvoiceToCode(QTp);
    QTp.ShipDeal = CUr.ShipDeal;
    QTp.ShipMode = CUr.ShipMode;
    QTp.Comment = CUr.OrderComment;
    QTp.PriceList = CUr.PLCode;
    if (blank(QTp.PriceList)) then begin
      QTp.PriceList = CCatr.PLCode;
    end;
    QTp.RebCode = CUr.RebCode;
    if (blank(QTp.RebCode)) then begin
      QTp.RebCode = CCatr.RebCode;
    end;
    tstr = QTp.PriceList;
    GetPriceList(QTp.CustCat,QTp.QTDate,blankt,tstr,i);
    QTp.InclVAT = i;
    QTp.NoTax1 = CUr.NoTax1;
    QTp.NoTax2 = CUr.NoTax2;
    if (nonblank(tstr)) then begin
      QTp.PriceList = tstr;
    end;
    if (blank(QTp.PriceList)) then begin
      PDr.Code = QTp.PayDeal;
      if (GetPD(PDr)) then begin
        QTp.PriceList = PDr.PriceList;
        PLDefR.Code = QTp.PriceList;
        if (ReadFirstMain(PLDefR,1,true)) then begin
          QTp.InclVAT = PLDefR.InclVAT;
        end;
      end;
    end;
    QTp.CustVATCode = CUr.VATCode;
    if (CUr.TaxTemplateCode!=QTp.CustTaxTemplateCode) then begin
      QTVc_FillupTaxTemplate(QTp);
      QTp.CustTaxTemplateCode = CUr.TaxTemplateCode;
    end;
    QTp.Phone = CUr.Phone;
    QTp.Fax = CUr.Fax;
    QTp.VATNr = CUr.VATNr;
    QTp.CustVATCode = CUr.VATCode;
    QTp.Region = CUr.Region;
    warning = CUr.WarnText1;
    QTGetRate(QTp);    
    if (updateallf) then begin
      QTp.Sorting = FindCustRoute(QTp.CustCode,QTp.Location,QTp.DelAddrCode);
      QTp.CustContact = CUr.Person;
      SetSalesMan(tstr,CUr.SalesMan);
      tstr2 = QTp.Objects;
      RemoveOldPersObjects(QTp.SalesMan,tstr2);
      QTp.Objects = tstr2;
      QTp.SalesMan = tstr;
      PasteSalesManInQT(QTp);
      GetUserObject(QTp.SalesMan,tstr);    
      QTp.Objects = AddObjectToObjectList(QTp.Objects,tstr);
    end;
    if (oldpricelist!=QTp.PriceList or oldvatcode!=QTp.CustVATCode or oldcurrency!=QTp.CurncyCode) then begin
      QTDUpdatePrices(QTp,false);
    end;
    AddPerceptionTaxesRows_QTVc(QTp);
    QTVc_PasteInvCountry(QTp,"");
    QTVc_PasteDelCountry(QTp,"");
  end;  
  PasteCustInQT = res;
  RETURN;
END;

global
procedure QTMultiLineText(record QTVc QTr,record INVc INr,string  langcode,Integer arow)
BEGIN
  row QTVc QTrw;
  string 255 tstr;
  Integer tcnt;
 
  tcnt = 2;
  while (GetItemNameStr(tcnt,tstr,langcode,INr.Name,INr.Code)) begin      
    ClearRow(QTr,QTrw,1);
    QTrw.Spec = tstr;
    MatRowInsert(QTr,arow+tcnt-1,QTrw);
    tcnt = tcnt + 1;
  end;
  RETURN;
END;

global
procedure QTVc_PasteQuant(var record QTVc QTr,Integer rownr,Boolean calcuntiqf,var Boolean chsum)
BEGIN
  record INVc INr;
  row QTVc QTrw;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice,chrsum;
  Boolean pritemf;
  string 10 markup;
  record GeneralOptionBlock GOb;
  Boolean dummyf;
  Time blankt;

  price = QTrw.Price;
  BlockLoad(GOb);
  chsum = false;
  chrsum = false;
  MatRowGet(QTr,rownr,QTrw);
  price = QTrw.Price;
  vreb = QTrw.vRebate;
  if (GetItemPriceDiscount3(QTrw.ArtCode,QTrw.Quant,INr,QTr.CurncyCode,
                            QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,
                            QTr.LangCode,QTr.CustCat,QTr.PriceList,QTr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            QTr.ExportFlag,calcprice,QTr.QTDate,blankt,QTr.CustCode,false,dummyf,QTr.PayDeal,tax2code,tax2prc,QTr.Region,QTr.Location,taxtemplatecode)) then begin
    if (nonblank(QTr.PriceList)) then begin
      if (QtyDepPriceL(QTr.PriceList)) then begin
        QTrw.Price = price;
      end;
    end;
    if (calcprice) then begin
      MatRowPut(QTr,rownr,QTrw);
      temp = -1;
      QTGetCalcItemPrice(INr,QTr,rownr,temp);
      MatRowGet(QTr,rownr,QTrw);
    end;
    if (INr.ExplodeRec==0) then begin
      if ((INr.ItemType==kItemTypeStructured) and (nonblank(INr.Recepy))) then begin
        QTrw.Recepy = INr.Recepy;
      end else begin
        QTrw.Recepy = "";
      end;
    end;
    QTrw.vRebate = vreb;
    if (INr.ExplodeRec==0) then begin
      if (baseprice<>0) then begin
        QTrw.BasePrice = baseprice;
      end;
    end;
    chrsum = true;
    if (calcuntiqf) then begin
      QTrw.UnitFactQuant = CalcUnitFactor(QTrw.UnitCode,QTrw.Quant);
    end;
    MatRowPut(QTr,rownr,QTrw);
    if (INr.ExplodeRec!=0) then begin
      if (nonblank(QTrw.Recepy)) then begin
        if (QTVc_ExplodeRecepy(INr,QTrw.Quant,QTr,QTrw.Recepy,rownr)) then begin
          MatRowGet(QTr,rownr,QTrw);
          QTrw.Recepy = "";
          QTrw.BasePrice = blankval;
          MatRowPut(QTr,rownr,QTrw);
        end;
      end else begin
        QTVc_ChangeQuantityRecepy(QTrw.ArtCode,QTrw.Quant,rownr,QTr);
      end;
    end;
  end;
  if (chrsum) then begin
    chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
  end;
  if (nonblank(INr.RvrsVATCode)) then begin
    QTPasteRvrsVATCode(QTr,false);
  end;
  RETURN;
END;

global
function string 255 CustArtCode(string CustCode,string ArtCode)
begin
  record CUINVc CUINr;

  CUINr.CustCode = CustCode;
  CUINr.ArtCode = ArtCode;
  ReadFirstMain(CUINr,2,true);
  CustArtCode = CUINr.CustArtCode;
  return;
end;

global
function Boolean QTVc_PasteArtCode(var record QTVc QTr,Integer rownr,var string inwarning,var string warning)
BEGIN
  Boolean chsum,res;
  Boolean chrsum;
  record INVc INr;
  row QTVc QTrw;
  val t,s,price,vreb,baseprice,temp,tax2prc,tax2reb,priceincur;
  string 255 curitemname,salesacc,vatcode,tax2code,taxtemplatecode;
  Boolean calcprice;
  Boolean pritemf;
  val UnitFactQuant,UnitFactPrice,Quant;
  string 10 markup,markupincur;
  record GeneralOptionBlock GOb;
  Boolean dummyf,varf;
  LongInt ErrorCode;
  record TaxMatrixVc TMr;
  Time blankt;
  string 60 sz,msk,mskrep;
  string 200 varsubset;
  record CUVc CUr;

  BlockLoad(GOb);
  chsum = false;
  chrsum = false;
  pritemf = true;
  MatRowGet(QTr,rownr,QTrw);
  QTrw.Price = BlankVal;
  QTrw.vRebate = BlankVal;
  QTrw.Sum = BlankVal;
  if (GetItemPriceDiscount3(QTrw.ArtCode,QTrw.Quant,INr,QTr.CurncyCode,
                            QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,
                            QTr.LangCode,QTr.CustCat,QTr.PriceList,QTr.RebCode,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            QTr.ExportFlag,calcprice,QTr.QTDate,blankt,QTr.CustCode,false,dummyf,Qtr.PayDeal,tax2code,tax2prc,QTr.Region,QTr.Location,taxtemplatecode)) then begin
    QTrw.TaxTemplateCode = FillupTaxMatrix(0,QTr.BranchID,QTr.CustCode,QTr.CustCat,QTr.DelAddrCode,taxtemplatecode,TMr);
    CUr.Code = QTr.CustCode;
    ReadFirstMain(CUr,1,true);
    if (vreb==0) then begin
      vreb = blankval;
    end;
    QTrw.Price = price;
    QTrw.Spec = curitemname;
    QTrw.vRebate = vreb;
    QTrw.VATCode = vatcode;
    if (CUr.RvrsVAT!=0) then begin
      QTrw.RvrsVATCode = INr.RvrsVATCode;
    end;
    QTrw.BasePrice = baseprice;
    QTrw.SalesAcc = salesacc;
    QTrw.ArtCode = INr.Code;
    QTrw.Objects = FindINObjects(INr.Objects,INr.Group);
    QTrw.UnitCode = INr.Unittext;
    QTrw.UnitXval = INr.Width;
    QTrw.UnitYval = INr.Height;
    QTrw.UnitZval = INr.Depth;
    QTrw.PriceFactor = INr.PriceFactor;
    QTrw.Perceptions = INr.Perceptions;
    QTrw.CustArtCode = CustArtCode(QTr.CustCode,QTrw.ArtCode);
    GetTaxesDiscounts(QTr.CustCode,QTr.QTDate,QTrw.VATCode,tax2code,t,tax2reb);
    if (QTr.NoTax2==0) then begin
      QTrw.TAX2Code = tax2code;
      QTrw.TAX2Prc = tax2prc;
      QTrw.TAX2Reb = tax2reb;
      QTrw.TAX2Acc = GetTax2Acc(QTrw.TAX2Code);
    end;
    if (QTr.NoTax1==0) then begin
      QTrw.TAX1Reb = t;
    end;
    if (nonblank(QTrw.UnitCode)) then begin
      price = QTrw.Price;
      Quant = QTrw.Quant;
      chrsum = true;
      if (nonblank(QTrw.UnitCode)) then begin
        chrsum = SetUnitFactor(QTrw.UnitCode,UnitFactQuant,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,UnitFactPrice,Quant,price,QTrw.UnitComment,false);
      end;
      if (chrsum) then begin
        QTrw.UnitFactQuant = UnitFactQuant;
        QTrw.UnitFactPrice = UnitFactPrice;
        QTrw.Quant = Quant;
        QTrw.Price = price;
      end;
    end;
    switch (INr.ItemType) begin
      case 1: QTrw.RowType = QTr.BudStocked;
      case 3: QTrw.RowType = QTr.BudTime;
      otherwise 
        if (INr.ItemMaterial!=0) then begin
          QTrw.RowType = QTr.BudMaterial;
        end else begin
          QTrw.RowType = QTr.BudOther;
        end;  
    end;
    QTrw.ItemType = INr.ItemType;
    if (QTrw.ItemType==0) then begin
      if (INr.ItemMaterial!=0) then begin
        QTrw.ItemType = 5;
      end;
    end;   
    if (nonblank(QTr.PRCode)) then begin 
      GetProjectPriceAndCost(QTr.PRCode,QTrw.ArtCode,QTrw.EMCode,QTrw.TimeClass,QTr.CurncyCode,QTrw.ItemType,
                             price,vreb,markup,baseprice,priceincur,markupincur);
      if (priceincur!=0) then begin
        QTrw.Price = priceincur;
      end;
      if (price!=0) then begin
        QTrw.Price = price;
      end;
      if (vreb!=0) then begin
        QTrw.vRebate = vreb;
      end;
      if (nonblank(markupincur)) then begin
        QTrw.Markup = markupincur;
      end;
      if (nonblank(markup)) then begin
        QTrw.Markup = markup;
      end;
      if (baseprice!=0) then begin
        QTrw.BasePrice = baseprice;
      end;
    end;      
    if ((INr.ItemType==2) and (nonblank(INr.Recepy))) then begin
      QTrw.Recepy = INr.Recepy;
    end;
    if (nonblank(QTr.CustVATCode)) then begin
      QTrw.VATCode = QTr.CustVATCode;
    end;
    if (calcprice) then begin
      MatRowPut(QTr,rownr,QTrw);
      temp = -1;
      QTGetCalcItemPrice(INr,QTr,rownr,temp);
      MatRowGet(QTr,rownr,QTrw);
    end;
    PackRowFieldMatrix(QTrw,"TaxMatrix",TMr);
    MatRowPut(QTr,rownr,QTrw);
    chrsum = true;
    QTMultiLineText(QTr,INr,QTr.LangCode,rownr);
    
    if (nonblank(INr.WarnText1)) then begin
      inwarning = INr.WarnText1;
    end;
    if (!INVc_AllowSales(INr,ErrorCode)) then begin
      warning = USetStr(ErrorCode);
    end;
    if (QTDchrsum(QTr,rownr,GOb.UseDiscount)) then begin
      QTDchsum(QTr,rownr);
    end;
    if (GuiType==kGuiiPhone or GuiType==kGuiAndroid or IsBooks) then begin
      if (QTrw.Quant==0) then begin
        if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin//should be taken from GetItemPriceDiscount3
          varf = true;
        end;
        if (varf==false) then begin
          MatRowGet(QTr,rownr,QTrw);
          QTrw.Quant = 1;
          MatRowPut(QTr,rownr,QTrw);
          QTVc_PasteQuant(QTr,rownr,true,chsum);
        end;
      end;
    end;
    if (chrsum) then begin
      chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
      if (chsum) then begin
        QTDchsum(QTr,rownr);
      end;
    end;
    if (nonblank(INr.RvrsVATCode) and QTrw.Quant>0) then begin
      QTPasteRvrsVATCode(QTr,false);
    end;
    QTSumup(QTr);
    res = true;
  end else begin
    if (nonblank(QTrw.ArtCode)) then begin
      warning = USetStr(1120) & QTrw.ArtCode;
    end;
  end;
  QTVc_PasteArtCode = res;
  RETURN;
END;

global
updating function Integer CreateMailFromQTD(record QTVc QTr,var record MailVc Mailr,var string warning,string pdfform)
BEGIN
  Integer res;
  record MailVc dummyMailr;
  record MailVc Mail2r;
  record LTxtVc LTxtr;
  record CUVc CUr;
  record CUVc ContactCUr;  
  row QTVc QTrw;  
  row MailVc MArw;
  Integer i,rwcnt;
  string 255 mailboxnr,tstr;
  string 1 TAB;
  Integer line;
  string 255 docname,fname;
  string 20 custemail;
  row MailTextVc MTrw;
  Integer IgnoreRecordDetails;
  LongInt err;
  
  res = 0;
  if (ReadFirstMain(QTr,0,true)) then begin end;  
  TAB = chr(9);
  FindUserMailboxName(CurrentUser,mailboxnr,tstr);
  if (blank(tstr)) then begin
    res = 22010;
    warning = CurrentUser;
    goto LCreateMailFromQTD;
  end;  
  MArw.RowTyp = 1;
  MArw.AddrCode = tstr;
  MatRowPut(Mailr,0,MArw);
  CUr.Code = QTr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  custemail = CUr.eMail;
  if (nonblank(QTr.CustContact)) then begin
    if (FindCustomerRelation(CUr.Code,QTr.CustContact,ContactCUr)) then begin
      if (nonblank(ContactCUr.eMail)) then begin
        custemail = ContactCUr.eMail;
      end;
    end;
  end;
  if (AddEMailRecipients(Mailr,CUr.Code,custemail,kMailQuotation)==false) then begin 
    res = 2289;
    warning = CUr.Code;
    goto LCreateMailFromQTD;
  end;
  MailTextRow("QTVc","",QTr.LangCode,MTrw,IgnoreRecordDetails);
  Mailr.Header = MTrw.Header;
  Mailr.Header = Mailr.Header & USetStr(1199);
  Mailr.Header = Mailr.Header & QTr.SerNr;  
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    Mailr.HtmlFlag = LTxtr.HtmlFlag;
  end;
  if (Mailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.LastTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      Mailr.HtmlFlag = LTxtr.HtmlFlag;
    end;
  end;
  
  Mailr.TransDate = CurrentDate;
  Mailr.SerNr = NextSerNr("MailVc",Mailr.TransDate,-1,false,"");
  RecordCopy(Mail2r,Mailr);
  SetRecordCheckVc("MailVc");
  err = MailVcRecordCheck(Mail2r,dummyMailr,Rs_insert,0);
  if (err!=0) then begin
    res = -1;
    goto LCreateMailFromQTD;
  end;
  if (RecordStore(Mailr,false)) then begin
    CreateRecordLink(Mailr,CurrentCompany,QTr,CurrentCompany);  
    CreateRecordLink(QTr,CurrentCompany,Mailr,CurrentCompany);  
  end;
  RecordCopy(Mail2r,Mailr);
  
  LTxtr.Code = MTrw.FirstTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
//  AddCRToText(Mailr); this doesnt work on linux 
  tstr = "";
  if (Mailr.HtmlFlag==0) then begin
    LineTextPut(Mailr,line,tstr);
  end else begin
    LineTextPutToHtmlRecord(Mailr,tstr,false,true);
  end;
  line = line + 1;
  if (IgnoreRecordDetails==0) then begin
    rwcnt = MatRowCnt(QTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QTrw);
      switch (QTrw.stp) begin
        case 10:
          goto LQTHIDDENLine;
        case 17:
          tstr = TAB & TAB & Left(QTrw.Spec,60);
          if (Mailr.HtmlFlag==0) then begin
            LineTextPut(Mailr,line,tstr);
          end else begin
            LineTextPutToHtmlRecord(Mailr,tstr,false,true);
          end;
          line = line + 1;
        case 9:
          tstr = TAB & TAB & Left(QTrw.Spec,60) & TAB;
          tstr = tstr & QTrw.Sum & TAB;
          if (Mailr.HtmlFlag==0) then begin
            LineTextPut(Mailr,line,tstr);
          end else begin
            LineTextPutToHtmlRecord(Mailr,tstr,false,true);
          end;
          line = line + 1;
        otherwise
          tstr = QTrw.ArtCode & TAB;
          tstr = tstr & ValToString(QTrw.Quant,M4UVal,"",".",0) & TAB;
          tstr = tstr & Left(QTrw.Spec,60) & TAB;
          tstr = tstr & QTrw.Price & TAB;
          if (QTrw.vRebate!=0) then begin
            tstr = tstr & "-" & ValToString(QTrw.vRebate,M4UVal,"",".",0) & "%" &  TAB;
          end;
          tstr = tstr & QTrw.Sum & TAB;
          if (Mailr.HtmlFlag==0) then begin
            LineTextPut(Mailr,line,tstr);
          end else begin
            LineTextPutToHtmlRecord(Mailr,tstr,false,true);
          end;
          line = line + 1;
      end;
    end;
  LQTHIDDENLine:;    
    AddCRToText(Mailr);
    line = line + 1;
    tstr = TAB & TAB & TAB & "=====";
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;
  
    tstr = TAB & TAB & TAB & USetStr(2685) & TAB & QTr.Sum1;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;
    tstr = TAB & TAB & TAB & USetStr(2686) & TAB & QTr.Sum3;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    tstr = TAB & TAB & TAB & USetStr(2687) & TAB & QTr.Sum4;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    tstr = USetStr(7021) & " " & QTr.ValidUntilDate;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
    GetPayDealText(QTr.PayDeal,QTr.LangCode,tstr);
    tstr = USetStr(3060) & " " & tstr;
    if (Mailr.HtmlFlag==0) then begin
      LineTextPut(Mailr,line,tstr);
    end else begin
      LineTextPutToHtmlRecord(Mailr,tstr,false,true);
    end;
    line = line + 1;  
  end;
  
  LTxtr.Code = MTrw.LastTxt;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (Mailr.HtmlFlag==0) then begin
      rwcnt = LineTextCnt(LTxtr);
      for (i=0;i<rwcnt;i=i+1) begin
        tstr = LineTextGet(LTxtr,i);
        LineTextPut(Mailr,line,tstr);
        line = line + 1;
      end;    
      AddCRToText(Mailr);
    end else begin
      if (LTxtr.HtmlFlag==0) then begin
        AddToHtmlRecord(Ltxtr,false,Mailr,true,true);
      end else begin
        AddHtmlRecordToHtmlRecord(Ltxtr,Mailr,true);
      end;
    end;
  end;
  
  RecordUpdate(Mail2r,Mailr,false);

  docname = pdfform;
  if (blank(docname)) then begin
    docname = "QTForm";
  end;
  fname = "tmp/" & USetStr(1820) & QTr.SerNr & ".pdf";
  SetDocumentFilename(fname);
  SetMedia(mtPdf);
  PrintDocument(QTr,docname,false);
  if (FileExists(fname)) then begin
    RecordLinkFile(fname,0,Mailr,CurrentCompany);
  end;
  SetDocumentFilename("");
  Delete_File(fname);

LCreateMailFromQTD:;  
  CreateMailFromQTD = res;
  RETURN;
END;

global
procedure RecalculetWeightVolumeQTVc(var record QTVc QTp)
BEGIN
  record INVc INr;
  row QTVc QTrw;
  Integer i,rwcnt;

  if (ReadFirstMain(QTp,0,true)) then begin end;  
  QTp.TotQty = blankval;
  QTp.TotVolume = blankval;
  QTp.TotWeight = blankval;
  rwcnt = MatRowCnt(QTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    QTp.TotQty = QTp.TotQty + QTrw.Quant;
    if  (ReadFirstItem(QTrw.ArtCode,INr,false,false)) then begin
      QTp.TotVolume = QTp.TotVolume + QTrw.Quant * INr.Volume;
      QTp.TotWeight = QTp.TotWeight + QTrw.Quant * INr.Weight;
    end;      
  end;
  if (QTp.TotVolume==0) then begin QTp.TotVolume = blankval; end;
  if (QTp.TotWeight==0) then begin QTp.TotWeight = blankval; end;
//  QTSumup(QTp); No point in this, just silly.
  RETURN;
END;    

global
updating function Integer CreateTBBUFromQTD(var record QTVc QTr,var record TBBUVc TBBUr)
BEGIN
  Integer res;
  record CUVc CUr;
  row QTVc QTrw;
  row TBBUVc TBBUrw;
  string 255 tstr;
  Integer i,rwcnt,tbrow;
  record PRVc PRr;
  
  PRr.Code = QTr.PRCode;
  ReadFIrstMain(PRr,1,true);
  TBBUr.PRCode = QTr.PRCode;
  if (nonblank(QTr.CurncyCode)) then begin
    if (nonblank(PRr.CurncyCode)) then begin
      if (PRr.CurncyCode!=QTr.CurncyCode) then begin
        res = 1582;
        goto LCreateTBBUFromQTD;
      end;
    end;
  end;
  if (ReadFirstMain(TBBUr,1,true)==false) then begin 
    RecordNew(TBBUr);
    TBBUr.Members = PRr.Members;
    TBBUr.SalesGroup = QTr.SalesGroup;
    TBBUr.TransDate = QTr.QTDate;
    TBBUr.CustCode = QTr.CustCode;
    CUr.Code = TBBUr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
    end;
    TBBUr.CustName = QTr.Addr0;
    TBBUr.PRLeader = PRr.Leader;
    TBBUr.SalesMan = QTr.SalesMan;
    TBBUr.LangCode = QTr.LangCode;
    TBBUr.PRCode = QTr.PRCode;
    GetPRName(TBBUr.PRCode,tstr);
    TBBUr.PRName = tstr;    
    TBBUr.Comment = QTr.Comment;
    TBBUr.Markup = QTr.Markup;
    TBBUr.BudTime = QTr.BudTime;
    TBBUr.BudOther = QTr.BudOther;
    TBBUr.BudStocked = QTr.BudStocked;
    TBBUr.BudMaterial = QTr.BudMaterial;
    TBBUr.SumTime = QTr.SumTime;
    TBBUr.SumStocked = QTr.SumStocked;
    TBBUr.SumMaterial = QTr.SumMaterial;
    TBBUr.SumOther = QTr.SumOther;
    TBBUr.CurncyCode = QTr.CurncyCode;
    TBBUr.FrRate = QTr.FrRate;
    TBBUr.ToRateB1 = QTr.ToRateB1;
    TBBUr.ToRateB2 = QTr.ToRateB2;
    TBBUr.BaseRate1 = QTr.BaseRate1;
    TBBUr.BaseRate2 = QTr.BaseRate2;
    rwcnt = MatRowCnt(QTr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTr,i,QTrw);
      if (QTrw.stp==10) then begin goto LSKIPQTROW; end;
      ClearRow(TBBUr,TBBUrw,QTrw.stp);
      TBBUrw.ArtCode = QTrw.ArtCode;
      TBBUrw.Qty = QTrw.Quant;
      TBBUrw.Price = QTrw.Price;
      TBBUrw.Sum = QTrw.Sum;
      TBBUrw.Objects = QTrw.Objects;
      TBBUrw.Comment = QTrw.Spec;
      TBBUrw.Recepy = QTrw.Recepy;
      TBBUrw.MotherArtCode = QTrw.MotherArtCode;
      TBBUrw.RecipeQuant = QTrw.RecipeQuant;
      TBBUrw.EMCode = QTrw.EMCode;
      TBBUrw.Markup = QTrw.Markup;
      TBBUrw.TimeClass = QTrw.TimeClass;
      TBBUrw.InvAfter = QTrw.InvAfter;
      TBBUrw.Invoiced = QTrw.Invoiced;
      TBBUrw.InvDate = QTrw.InvDate;
      TBBUrw.ItemType = QTrw.ItemType;
      TBBUrw.RowType = QTrw.RowType;
      TBBUrw.BudType = QTrw.BudType;
      TBBUrw.Discount = QTrw.vRebate;
      TBBUrw.Cost = QTrw.BasePrice;
      TBBUrw.GP = QTrw.rowGP;
      TBBUrw.GM = TBBUrw.GP*100/TBBUrw.Sum;      
      if (QTrw.stp==17) or (QTrw.stp==9) then begin
        TBBUrw.Comment = "";
        TBBUrw.Spec = QTrw.Spec;
      end;
      TBBUrw.PRStage = QTrw.PRStage;
      MatRowPut(TBBUr,tbrow,TBBUrw);
      tbrow = tbrow + 1;
LSKIPQTROW:;      
    end;
    TBBUSumup(TBBUr);
    if (RecordStore(TBBUr,false)) then begin 
      CreateRecordLink(TBBUr,CurrentCompany,QTr,CurrentCompany);  
      CreateRecordLink(QTr,CurrentCompany,TBBUr,CurrentCompany);  
      if (blankdate(QTr.RejectDate)) then begin
        QTr.RejectDate = CurrentDate;
      end;
      QTr.Rejected = 2;
      QTr.Probability = 100;
      res = 0;
    end;
  end else begin
    res = 2084;
  end;
LCreateTBBUFromQTD:;  
  CreateTBBUFromQTD = res;
  RETURN;
END;    

global
procedure QTVc_PasteSalesMan(var record QTVc QTp,string oldsalesmen)
begin 
  record UserVc Userr;
  string 255 tstr,salesman;
  Integer pos;

  if (HasSalesmanChanged(QTp.SalesMan,oldsalesmen)) then begin
    pos = 0;
    ExtractObj(oldsalesmen,pos,salesman);
    while (nonblank(salesman)) begin
      RemoveOldUserObjects(salesman,QTp.Objects);
      ExtractObj(oldsalesmen,pos,salesman);
    end;
    QTp.SalesGroup = "";    
    pos = 0;
    ExtractObj(QTp.SalesMan,pos,salesman);
    while (nonblank(salesman)) begin
      Userr.Code = salesman;
      if (ReadFirstMain(Userr,1,true)) then begin
        QTp.SalesGroup = AddStringToStringList(QTp.SalesGroup,Userr.SalesGroup);                
        QTp.Objects = AddObjectToObjectList(QTp.Objects,Userr.PersObjx);        
      end;
      ExtractObj(QTp.SalesMan,pos,salesman);
    end;
  end;
  return;
end;

global
procedure QTVc_PasteSerialNr(var record QTVc QTp,Integer rownr)
BEGIN
  row QTVc QTrw;
  val UnitXval,UnitYval,UnitZval,t;
  string 255 tstr;
  Boolean chsum;
  
  MatRowGet(QTp,rownr,QTrw);
  SerialNrDimensions(QTrw.ArtCode,QTrw.SerialNr,UnitXval,UnitYval,UnitZval);
  if (UnitXval!=0) then begin QTrw.UnitXval = UnitXval; end;
  if (UnitYval!=0) then begin QTrw.UnitYval = UnitYval; end;
  if (UnitZval!=0) then begin QTrw.UnitZval = UnitZval; end;
  t = QTrw.BasePrice;
  chsum = CostPriceForGP(QTrw.ArtCode,QTrw.SerialNr,QTp.PriceList,QTp.CustCode,t);
  QTrw.BasePrice = t;
  MatRowPut(QTp,rownr,QTrw);
  if (CheckSerialStatus(QTrw.ArtCode,QTrw.SerialNr,tstr)==1) then begin
    MessageBox(0,tstr);
  end;
  if (chsum) then begin
    QTDchsum(QTp,rownr);
    QTSumup(QTp);
  end;    
  RETURN;
END;
 
procedure CalcUnitCode(var record QTVc QTp,Integer rownr)
BEGIN
  row QTVc QTrw;
  val unitqty,unitprice,qty,price;
  string 255 tstr;
  Boolean chrsum,chsum;
  record GeneralOptionBlock GOb;
  
  MatRowGet(QTp,rownr,QTrw);
  unitqty = QTrw.UnitFactQuant;
  unitprice = QTrw.UnitFactPrice;
  qty = QTrw.Quant;
  price = QTrw.Price;
  if (nonblank(QTrw.UnitCode)) then begin
  chrsum = SetUnitFactor(QTrw.UnitCode,unitqty,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,unitprice,qty,price,QTrw.UnitComment,false);  
  if (chrsum) then begin
    QTrw.UnitFactQuant = unitqty;
    QTrw.UnitFactPrice = unitprice;
    QTrw.Quant = qty;
    QTrw.Price = price;
    chrsum = true;
    MatRowPut(QTp,rownr,QTrw);
    QTVc_PasteQuant(QTp,rownr,false,chsum);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GOb);
    chsum = QTDchrsum(QTp,rownr,GOb.UseDiscount);
  end;
  QTDchsum(QTp,rownr);
  QTSumup(QTp);
  RETURN;
END;

global
procedure QTVc_PasteUnitCode(var record QTVc QTp,Integer rownr)
BEGIN
  CalcUnitCode(QTp,rownr);
  RETURN;
END;

global
procedure QTVc_PasteUnitFactQuant(var record QTVc QTp,Integer rownr)
BEGIN
  CalcUnitCode(QTp,rownr);
  RETURN;
END;

/*
procedure ChangeQTRowSum(var record QTVc QTr,Integer rownr,Integer UseDiscount)
BEGIN
  row QTVc QTrw;
  val t,s,rowinbase,tproc;

  MatRowGet(QTr,rownr,QTrw);
  t = QTrw.Quant*QTrw.BasePrice;
  if (QTrw.PriceFactor!=0) then begin
    t = t/QTrw.PriceFactor;
  end;
  s = MulRateToBase1(QTr.CurncyCode,QTrw.Sum,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);  
  FindSalesExVat(QTrw.VATCode,s,QTr.InclVAT,QTr.NoTAXonVAT,rowinbase);
  QTrw.rowGP = rowinbase - t;
  CalcProc(rowinbase,QTrw.rowGP,tproc);
  CalcSum(QTrw.Quant,QTrw.Price,QTrw.PriceFactor,QTrw.vRebate,s,UseDiscount);
  QTrw.Sum = s;
  MatRowPut(QTr,rownr,QTrw);
  RETURN;        
END;
*/
global 
procedure QTDUpdatePrices(var record QTVc QTr,Boolean readf)
begin
  Integer i,rwcnt;
  record INVc INr;
  row QTVc QTrw;
  Boolean calcprice,chsum;
  string 255 tstr,taxtemplatecode;
  string 2 vatcode;
  string 10 salesacc,markup,tax2code,markupincur;
  val price,vrebate,baseprice,tax2prc,priceincur;
  val subtot;
  record GeneralOptionBlock GOb;
  Boolean dummyf;
  Time blankt;

  if (readf) then begin
    if (ReadFirstMain(QTr,0,true)) then begin end;
  end;
  BlockLoad(GOb);
  rwcnt = MatRowCnt(QTr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTr,i,QTrw);
    switch (QTrw.stp) begin
      case kInvoiceRowTypeNormal:
        if (nonblank(QTrw.ArtCode)) then begin      
          price = QTrw.Price;
          vrebate = blankval;
          baseprice = blankval;
          vatcode = "";
          salesacc = "";
          markup = "";
          priceincur = blankval;
          markupincur = "";
          if (blank(QTr.PRCode)) then begin
            if (GetItemPriceDiscount3(QTrw.ArtCode,QTrw.Quant,INr,QTr.CurncyCode,
              QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,
              QTr.LangCode,QTr.CustCat,QTr.PriceList,QTr.RebCode,
              price,tstr,vrebate,vatcode,baseprice,
              salesacc,QTr.ExportFlag,calcprice,QTr.QTDate,blankt,QTr.CustCode,true,dummyf,QTr.PayDeal,tax2code,tax2prc,QTr.Region,QTr.Location,taxtemplatecode)) then begin
              QTrw.Price = price;
              QTrw.vRebate = vrebate;
              QTrw.BasePrice = baseprice;
              QTrw.VATCode = vatcode;
              QTrw.SalesAcc = salesacc;
              QTrw.ArtCode = INr.Code;
              if (nonblank(QTr.CustVATCode)) then begin
                QTrw.VATCode = QTr.CustVATCode;
              end;
            end;  
          end else begin
            GetProjectPriceAndCost(QTr.PRCode,QTrw.ArtCode,QTrw.EMCode,QTrw.TimeClass,QTr.CurncyCode,QTrw.ItemType,
                                   price,vrebate,markup,baseprice,priceincur,markupincur);
            if (priceincur!=0) then begin
              QTrw.Price = priceincur;
            end;
            if (price!=0) then begin
              QTrw.Price = price;
            end;
            if (vrebate!=0) then begin
              QTrw.vRebate = vrebate;
            end;
            if (nonblank(markupincur)) then begin
              QTrw.Markup = markupincur;
            end;
            if (nonblank(markup)) then begin
              QTrw.Markup = markup;
            end;
            if (baseprice!=0) then begin
              QTrw.BasePrice = baseprice;
            end;
          end;
          MatRowPut(QTr,i,QTrw);
          chsum = QTDchrsum(QTr,i,GOb.UseDiscount);
          QTDchsum(QTr,i);
    //        ChangeQTRowSum(QTr,i,GOb.UseDiscount);
          MatRowGet(QTr,i,QTrw);
          subtot = subtot + QTrw.Sum;
        end;
      case 9:
        QTrw.Sum = subtot;
        subtot = blankval;
        MatRowPut(QTr,i,QTrw);
    end;    
  end;
  QTSumup(QTr);      
  return;
end;

global
procedure QTVc_PasteCurncyCode(var record QTVc QTp,string oldcurncy)
BEGIN
  val fr,to1,to2,br1,br2;
  record ItemSettingBlock ISr;
  
  if (QTp.CurncyCode!=oldcurncy) then begin
    QTGetRate(QTp);
    QTDUpdatePrices(QTp,false);
  end else begin
    BlockLoad(ISr);
    SaveExchangeRate(QTp.FrRate,QTp.ToRateB1,QTp.ToRateB2,QTp.BaseRate1,QTp.BaseRate2,fr,to1,to2,br1,br2);
    QTGetRate(QTp);
    if ((OtherExchangeRate(QTp.FrRate,QTp.ToRateB1,QTp.ToRateB2,QTp.BaseRate1,QTp.BaseRate2,fr,to1,to2,br1,br2)) and (ISr.UpdCurPrWithDate!=0)) then begin
      QTDUpdatePrices(QTp,false);
    end;
  end;
  RETURN;
END;

global
procedure QTVc_FillupTaxTemplate(var record QTVc QTp)
begin
  row QTVc QTrw;
  Integer i,rwcnt;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GOb;
  val t,s,price,vreb,baseprice,tax2prc;
  record INVc INr;
  string 255 tstr,tax2code,location,itemtaxtemplatecode,dummystr;
  Boolean calcprice;
  Integer exportflag;
  Boolean dummyf;
  Time blankt;

  BlockLoad(GOb);
  rwcnt = MatRowCnt(QTp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(QTp,i,QTrw);
    if (nonblank(QTrw.ArtCode)) then begin
      if (GetItemPriceDiscount3(QTrw.ArtCode,QTrw.Quant,INr,QTp.CurncyCode,
                            QTp.FrRate,QTp.ToRateB1,QTp.ToRateB2,QTp.BaseRate1,QTp.BaseRate2,
                            QTp.LangCode,QTp.CustCat,QTp.PriceList,QTp.RebCode,
                            price,tstr,vreb,dummystr,baseprice,dummystr,
                            exportflag,calcprice,QTp.QTDate,blankt,QTp.CustCode,true,dummyf,QTp.PayDeal,
                            tax2code,tax2prc,QTp.Region,location,itemtaxtemplatecode)) then begin
        QTrw.TaxTemplateCode = FillupTaxMatrix(0,QTp.BranchID,QTp.CustCode,QTp.CustCat,QTp.DelAddrCode,itemtaxtemplatecode,TMr);
        PackRowFieldMatrix(QTrw,"TaxMatrix",TMr);
        MatRowPut(QTp,i,QTrw);
        RowCalculateTaxMatrix_QTVc(QTp,i,QTrw);
        MatRowPut(QTp,i,QTrw);
        if (QTDchrsum(QTp,i,GOb.UseDiscount)) then begin
          QTDchsum(QTp,i);
        end;
      end;
    end;
  end;
  return;  
end;   

global
procedure QTVc_PasteDelAddrCode(var record QTVc QTp)
BEGIN
  string 255 name,a0,a1,a2,a3,a4,country,region,oldregion,taxtemplatecode,vatcode;
  row QTVc QTrw;
  Integer i,rwcnt;
  record GeneralOptionBlock GOb;
  
  BlockLoad(GOb);
  SetDelAddr(QTp.CustCode,QTp.DelAddrCode,name,a0,a1,a2,a3,a4,country,region,taxtemplatecode,vatcode,QTp.ExportFlag,QTp.DelRecipientGLN);
  QTp.ShipAddr0 = name;
  QTp.ShipAddr1 = a0;
  QTp.ShipAddr2 = a1;
  QTp.ShipAddr3 = a2;
  QTp.DelAddr3 = a3;
  QTp.DelAddr4 = a4;
  QTp.DelCountry = country;
  QTp.Region = region;
  if (taxtemplatecode!=QTp.CustTaxTemplateCode) then begin
    QTVc_FillupTaxTemplate(QTp);
    QTp.CustTaxTemplateCode = taxtemplatecode;
  end;
  if (vatcode!=QTp.CustVATCode) and (nonblank(vatcode)) then begin
    QTp.CustVATCode = vatcode;
    rwcnt = MatRowCnt(QTp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(QTp,i,QTrw);
      QTrw.VATCode = vatcode;
      MatRowPut(QTp,i,QTrw);
      if (QTDchrsum(QTp,i,GOb.UseDiscount)) then begin
        QTDchsum(QTp,i);
      end;
    end;
  end;
  QTp.Sorting = FindCustRoute(QTp.CustCode,QTp.Location,QTp.DelAddrCode);
  QTVc_PasteInvCountry(QTp,"");
  QTVc_PasteDelCountry(QTp,"");
  QTSumup(QTp);   
  RETURN;
END;

global
procedure QTVc_PasteUnitZval(var record QTVc QTr,Integer rownr,var Boolean chsum)
BEGIN
  row QTVc QTrw;
  record GeneralOptionBlock GOb;
  Boolean res,chrsum;
  val unitqty,unitprice,qty,price;
  val t;

  MatRowGet(QTr,rownr,QTrw);
  QTrw.Quant = CalculateSerialNrQuantity(QTrw.ArtCode,"","",false,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,QTrw.Quant);  
  MatRowPut(QTr,rownr,QTrw);
  MatRowGet(QTr,rownr,QTrw);
  unitqty = QTrw.UnitFactQuant;
  unitprice = QTrw.UnitFactPrice;
  qty = QTrw.Quant;
  price = QTrw.Price;
  chrsum = true;
  if (nonblank(QTrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(QTrw.UnitCode,unitqty,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,unitprice,qty,price,QTrw.UnitComment,false)) then begin
    QTrw.UnitFactQuant = unitqty;
    QTrw.UnitFactPrice = unitprice;
    QTrw.Quant = qty;
    QTrw.Price = price;
    CalcSum(1,QTrw.Price,QTrw.PriceFactor,QTrw.vRebate,t,0);
    QTrw.Sum = t;
    chrsum = true;
    MatRowPut(QTr,rownr,QTrw);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GOb);
    chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
  end;
  RETURN;
END;

global
procedure QTVc_PasteUnitYval(var record QTVc QTr,Integer rownr,var Boolean chsum)
BEGIN
  row QTVc QTrw;
  record GeneralOptionBlock GOb;
  Boolean res,chrsum;
  val unitqty,unitprice,qty,price;
  val t;

  MatRowGet(QTr,rownr,QTrw);
  QTrw.Quant = CalculateSerialNrQuantity(QTrw.ArtCode,"","",false,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,QTrw.Quant);
  MatRowPut(QTr,rownr,QTrw);
  MatRowGet(QTr,rownr,QTrw);
  unitqty = QTrw.UnitFactQuant;
  unitprice = QTrw.UnitFactPrice;
  qty = QTrw.Quant;
  price = QTrw.Price;
  chrsum = true;
  if (nonblank(QTrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(QTrw.UnitCode,unitqty,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,unitprice,qty,price,QTrw.UnitComment,false)) then begin
    QTrw.UnitFactQuant = unitqty;
    QTrw.UnitFactPrice = unitprice;
    QTrw.Quant = qty;
    QTrw.Price = price;
    CalcSum(1,QTrw.Price,QTrw.PriceFactor,QTrw.vRebate,t,0);
    QTrw.Sum = t;
    chrsum = true;
    MatRowPut(QTr,rownr,QTrw);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GOb);
    chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
  end;
  RETURN;
END;

global
procedure QTVc_PasteUnitXval(var record QTVc QTr,Integer rownr,var Boolean chsum)
BEGIN
  row QTVc QTrw;
  record GeneralOptionBlock GOb;
  Boolean res,chrsum;
  val unitqty,unitprice,qty,price;
  val t;

  MatRowGet(QTr,rownr,QTrw);
  QTrw.Quant = CalculateSerialNrQuantity(QTrw.ArtCode,"","",false,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,QTrw.Quant);
  MatRowPut(QTr,rownr,QTrw);
  MatRowGet(QTr,rownr,QTrw);
  unitqty = QTrw.UnitFactQuant;
  unitprice = QTrw.UnitFactPrice;
  qty = QTrw.Quant;
  price = QTrw.Price;
  chrsum = true;
  if (nonblank(QTrw.UnitCode)) then begin
  chrsum = false;
  if (SetUnitFactor(QTrw.UnitCode,unitqty,QTrw.UnitXval,QTrw.UnitYval,QTrw.UnitZval,unitprice,qty,price,QTrw.UnitComment,false)) then begin
    QTrw.UnitFactQuant = unitqty;
    QTrw.UnitFactPrice = unitprice;
    QTrw.Quant = qty;
    QTrw.Price = price;
    CalcSum(1,QTrw.Price,QTrw.PriceFactor,QTrw.vRebate,t,0);
    QTrw.Sum = t;
    chrsum = true;
    MatRowPut(QTr,rownr,QTrw);
  end;
  end;
  if (chrsum) then begin
    BlockLoad(GOb);
    chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
  end;
  RETURN;
END;

global
function Boolean QTVc_PastePRCode(var record QTVc QTr,string oldprcode,var string warning)
BEGIN
  Boolean res;
  record PRVc PRr;
  record ProjectBlock PRb;
  string 10 oldsalesman;
  string 60 objs;

  RemoveOldProjectObjects(oldprcode,QTr.Objects);
  PRr.Code = QTr.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (QTr.CustCode!=PRr.CustCode) then begin
      RemoveOldCustObjects(QTr.CustCode,QTr.Objects);
      QTr.CustCode = PRr.CustCode;
      if (PasteCustInQT(QTr,QTr.CustCode,"",warning,true)) then begin
        BlockLoad(PRb);
        QTr.BudTime = PRb.BudTime;
        QTr.BudOther = PRb.BudOther;
        QTr.BudStocked = PRb.BudStocked;
        QTr.BudMaterial = PRb.BudMaterial;    
        QTr.Objects = AddObjectToObjectList(QTr.Objects,PRr.Objects);        
        oldsalesman = QTr.SalesMan;
        QTr.SalesMan = PRr.Leader;
        if (nonblank(PRr.PrSalesMan)) then begin
          QTr.SalesMan = PRr.PrSalesMan;
        end;        
        QTVc_PasteSalesMan(QTr,oldsalesman);
        if (nonblank(PRr.CurncyCode)) then begin
          oldsalesman = QTr.CurncyCode;
          QTr.CurncyCode = PRr.CurncyCode;
          QTVc_PasteCurncyCode(QTr,oldsalesman);
        end;
        if (nonblank(PRr.PayDeal)) then begin
          QTr.PayDeal = PRr.PayDeal;
        end;
        res = true;
      end;
    end else begin
      QTr.Objects = AddObjectToObjectList(QTr.Objects,PRr.Objects);        
      res = true;
    end;
  end;  
  QTVc_PastePRCode = res;
  RETURN;
END;    

global
procedure QTVc_PasteLocation(var record QTVc QTr)
begin
  QTr.Sorting = FindCustRoute(QTr.CustCode,QTr.Location,QTr.DelAddrCode);
  return;
end;

global
procedure QTVc_PasteTaxTemplateCode(var record QTVc QTr,Integer rownr,var Boolean chsum)
begin
  row QTVc QTrw;
  record TaxMatrixVc TMr;
  record GeneralOptionBlock GOb;
  
  BlockLoad(GOb);
  MatRowGet(QTr,rownr,QTrw);
  QTrw.TaxTemplateCode = OverrideTaxMatrix(QTrw.TaxTemplateCode,TMr);
  PackRowFieldMatrix(QTrw,"TaxMatrix",TMr);
  MatRowPut(QTr,rownr,QTrw);
  RowCalculateTaxMatrix_QTVc(QTr,rownr,QTrw);
  MatRowPut(QTr,rownr,QTrw);
  chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
  return;
end;

global
procedure QTVc_PasteRebCode(var record QTVc QTr)
begin
  QTDUpdatePrices(QTr,false);
  return;
end;

global
procedure QTDClassOnOpenWindowRemote(var record QTVc QTr,var Integer AcceptanceStatusFlag)
begin
  record AcceptanceRulesVc Acptr;
  record ActVc Actr;
  
  if (HasApprovals) then begin
    AcceptanceStatusFlag = QTApprovalStatus(QTr,Acptr);
  end;
  return;
end;

global
procedure QTVc_PastePrice(var record QTVc QTr,Integer rownr,var Boolean chsum)
begin
  record GeneralOptionBlock GOb;
  row QTVc QTrw;
  record INVc INr;

  BlockLoad(GOb);
  MatRowGet(QTr,rownr,QTrw);
  if (QTrw.stp==kInvoiceRowTypeNormal or QTrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
    chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
    if (nonblank(QTrw.ArtCode)) then begin
      if (GetFirstItem(QTrw.ArtCode,INr)==false) then begin
        ReadFirstItem(QTrw.ArtCode,INr,true,false);
      end;
      if (nonblank(INr.RvrsVATCode)) then begin
        QTPasteRvrsVATCode(QTr,false);
        QTSumup(QTr);      
      end;
    end;
  end else begin
    chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
  end;
  return;
end;

global
procedure QTVc_PasteUnitFactPrice(var record QTVc QTr,Integer rownr)
begin
  row QTVc QTrw;
  Boolean chsum;

  MatRowGet(QTr,rownr,QTrw);
  QTrw.Price = QTrw.UnitFactPrice/(QTrw.Quant/QTrw.UnitFactQuant);
  MatRowPut(QTr,rownr,QTrw);
  QTVc_PastePrice(QTr,rownr,chsum);  
  if (chsum) then begin
    QTDchsum(QTr,rownr);
    QTSumup(QTr);
  end;
  return;
end;

global
procedure QTVc_PastevRebate(var record QTVc QTr,Integer rownr,var Boolean chsum)
begin
  record GeneralOptionBlock GOb;
  row QTVc QTrw;
  record INVc INr;
  
  BlockLoad(GOb);
  MatRowGet(QTr,rownr,QTrw);
  if (nonblank(QTrw.ArtCode)) then begin
    if (GetFirstItem(QTrw.ArtCode,INr)==false) then begin
      ReadFirstItem(QTrw.ArtCode,INr,true,false);
    end;
  end;

  if (QTrw.vRebate>100.00) then begin
    QTrw.vRebate = blankval;
    MatRowPut(QTr,rownr,QTrw);
    MessageBox(1019,"");
  end;
  chsum = QTDchrsum(QTr,rownr,GOb.UseDiscount);
  if (nonblank(INr.RvrsVATCode)) then begin
    QTPasteRvrsVATCode(QTr,false);
  end;
  return;
end;
