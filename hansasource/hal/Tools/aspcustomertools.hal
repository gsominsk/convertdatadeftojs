external function Integer GetCompanyCodeFromCode(Integer);
external procedure SendTextParameter(string,var Area);
external procedure SendEOLParameter(var Area);
external updating function Boolean SendServiceRequest_NoPassport(string,Boolean,area,var Area);
external procedure ReadTXServiceReply(var record TXServiceReplyVc,var Area,Boolean);
external function string 255 removenextlistitem(var string,string);
external function Boolean ParseHTTPHeader(area,string,var Integer,var string,var string);
external function Integer GetTheCompCodeFromVATLaw(Integer);
external updating function Boolean SendServiceRequest_NoPassport_Partner(string,string,Boolean,area,var Area);

procedure AddLineToArea(string line,area req)
begin
  AddTextToArea(line,req);
  AddTextToArea(chr(10),req);
  return;
end;

function string 255 ReadStringFromFile(string filename)
begin
  string 255 res;
  area a;

  AddFileToArea(filename,a,false);
  res = Trim(GetStringFromArea(a,0,GetAreaLength(a)));
  ReadStringFromFile = res;

  return;
end;

function LongInt ReadLongFromFile(string filename)
begin
  LongInt res;
  ReadLongFromFile = StringToLongInt(ReadStringFromFile(filename));
  return;
end;

updating procedure RegisterWithCloudController(string address,var string vserver,var string vport,var string vpath,var Boolean failf,string hostn)
begin
  Area a_req,a_reply,a_pem,a_cert,a_pem_d,a_cert_d;
  LongInt rerror,pemlen,certlen,sp;
  String 255 rerrordesc;
  record TXServiceReplyVc TXSrvReplyr;
  Boolean testf;
  record HostingPartnerBlock HPb;
//  transaction string 255 cnport,cnsslport,cnhttpport,apikey,vcode,cucode;
  transaction string 255 cnport,cnsslport,cnhttpport,lcsport,lcshttpport,lcssslport;
  transaction string 255 cucode,cuname,exename,lcsfolder,lcsbindip;
  transaction string 255 apikey,vcode,sslpwd,pollingport,pollingflag,assignedcncode,assignedccaddr;
  Integer retries;

  BlockLoad(HPb);

LRegisterWithCloudController_TryAgain:;
  failf = false;

  LogText(0,"Registering Cloud Node with address=" & address & ", port=" & cnport);
  SendTextParameter(address,a_req);
  SendTextParameter(cnport,a_req);
  SendTextParameter(cnsslport,a_req);
  SendTextParameter(cucode,a_req);
  SendTextParameter(cuname,a_req);
  SendTextParameter(cnhttpport,a_req);
  SendTextParameter(hostn,a_req);
  SendTextParameter(ProgramPlatform,a_req);
  if (HPb.HostingPartner>0) then begin
    testf = SendServiceRequest_NoPassport_Partner("CLOUDCONTROLLER_REGISTERNODE",HPb.HostingPartner,false,a_req,a_reply);
  end else begin
    //fallback on enabler registration country
    testf = SendServiceRequest_NoPassport("CLOUDCONTROLLER_REGISTERNODE",false,a_req,a_reply);
  end;
  if ((testf==false) and (GetAreaLength(a_reply)<=0)) then begin
    LogText(0,"SendServiceRequest2 timed out or failed to establish a connection, testf=" & testf);
  end;
    
  if ((testf==false) or (GetAreaLength(a_reply)<=0)) then begin
    failf = true;
  end else begin
    ReadTXServiceReply(TXSrvReplyr,a_reply,true);
    rerror = TXSrvReplyr.ErrorCode;
    rerrordesc = TXSrvReplyr.ErrorDescription;
    switch (rerror) begin
      case 0:
      case -1:
        LogText(0,"RegisterWithCloudController failed: Unknown SendServiceRequest2 error");
        failf = true;
      otherwise
        rerrordesc = rerrordesc & USetStr(rerror);
        LogText(0,"RegisterWithCloudController failed with error #" & rerror & ": " & rerrordesc);
        failf = true;
    end;
  end;
    
  if (failf) then begin
    LogText(0,"RegisterWithCloudController failed, retrying...");
    retries = retries + 1;
    if (retries<10) then begin
      goto LRegisterWithCloudController_TryAgain;
    end;
  end;
    
  apikey = GetTabTextFromArea(0,0,a_reply);
  vserver = GetTabTextFromArea(0,1,a_reply);
  vport = GetTabTextFromArea(0,2,a_reply);
  vpath = GetTabTextFromArea(0,3,a_reply);
  vcode = GetTabTextFromArea(0,4,a_reply);
  sslpwd = GetTabTextFromArea(0,5,a_reply);
  pemlen = StringToLongInt(GetTabTextFromArea(0,6,a_reply));
  certlen = StringToLongInt(GetTabTextFromArea(0,7,a_reply));
  pollingport = GetTabTextFromArea(0,8,a_reply);
  pollingflag = GetTabTextFromArea(0,9,a_reply);
  assignedcncode = GetTabTextFromArea(0,10,a_reply);
  assignedccaddr = GetTabTextFromArea(0,11,a_reply);

  sp = GetAreaLength(a_reply) - 3;
  sp = sp - certlen;
  GetAreaFromArea(a_reply,sp,certlen,a_cert);
  sp = sp - pemlen;
  GetAreaFromArea(a_reply,sp,pemlen,a_pem);
  AreaBase64Decode(a_pem,a_pem_d);
  AreaBase64Decode(a_cert,a_cert_d);
  CreateFolder("cloudnode");
  WriteAreaToFile(a_pem_d,"cloudnode/privkey.pem",0);
  WriteAreaToFile(a_cert_d,"cloudnode/cert.pem",0);


//  LogText(0,"RegisterWithCloudController apikey=" & apikey & ", vserver=" & vserver & ", vport=" & vport & ", vpath=" & vpath);

  if (blank(apikey)==true) then begin
    LogText(0,"RegisterWithCloudController failed registering node");
    failf = true;
    goto LRegisterWithCloudController;
  end;

LRegisterWithCloudController:;
  return;
end;

function string 255 NodeEXEName()
begin
  string 255 exefil;

  switch (ProgramPlatform) begin
    case kPlatformUnknown:    exefil = "hansa-debug-optimized-server";
    case kPlatformMac:        exefil = "hansa-macosx-optimized-server";
    case kPlatformWindows32:  exefil = "hansa-windows-optimized-server.exe";
    case kPlatformWindows64:  exefil = "hansa-windows-optimized-server64.exe";
    case kPlatformLinux32:    exefil = "hansa-debug-optimized-server";
    case kPlatformLinux64:    exefil = "hansa-debug-optimized-server64";
  end;

  NodeEXEName = exefil;
  return;
end;

updating procedure MakeAutoStartingCloudNode(string workdir,Boolean startf)
begin
  string 255 arglist;
  LongInt procflags;
  area a_script;

  if (WindowsMode) then begin
    LogText(0,"Installing Windows Service Standard Cloud Node");
    InstallWindowsService("Standard Cloud Node","Standard Cloud Node",CurrentPath & "\\cloudnode\\hansa-cloudnode.exe",true);
    goto LMakeAutoStartingCloudNode;
  end;

  if (FileExists("cloudnode/run-cloudnode.sh")==false) then begin
    LogText(0,"Creating Cloud Node run script");
    AddLineToArea("#!/bin/sh",a_script);
    AddLineToArea("if /usr/bin/tty -s; then",a_script);
    AddLineToArea("  nohup $0 < /dev/null >>run-cloudnode.log &",a_script);
    AddLineToArea("  exit",a_script);
    AddLineToArea("fi;",a_script);
    AddLineToArea("echo $$ > run-cloudnode.pid",a_script);
    AddLineToArea("while true; do",a_script);
    AddLineToArea("  ./hansa-cloudnode",a_script);
    AddLineToArea("  sleep 1",a_script);
    AddLineToArea("done;",a_script);
    WriteAreaToFile(a_script,"cloudnode/run-cloudnode.sh",0);
  end;

  if (FileExists("cloudnode/stop-cloudnode.sh")==false) then begin
    LogText(0,"Creating Cloud Node stop script");
    SetAreaZeroSize(a_script);
    AddLineToArea("#!/bin/sh",a_script);
    AddLineToArea("kill -KILL `cat run-cloudnode.pid`",a_script);
    AddLineToArea("sleep 1",a_script);
    AddLineToArea("kill -INT `cat hansa.pid`",a_script);
    AddLineToArea("rm -f run-cloudnode.pid",a_script);
    WriteAreaToFile(a_script,"cloudnode/stop-cloudnode.sh",0);
  end;

  procflags = 0;
  StartExternalProcess("/bin/chmod","a+x run-cloudnode.sh stop-cloudnode.sh",workdir,"",procflags);
  Sleep(2); // ugly, to make chmod execute before we go ahead

  if (startf) then begin
    LogText(0,"Starting Cloud Node");
    StartExternalProcess(ProgramFolder & "/cloudnode/run-cloudnode.sh","",workdir,"run-cloudnode.sh",procflags);
  end;
LMakeAutoStartingCloudNode:;
end;

updating procedure StopAndRemoveCloudNode()
begin
  string 255 arglist;
  LongInt procflags,pid;

  if (WindowsMode and ServerMode) then begin
    LogText(0,"Removing Cloud Node service");
    procflags = 0;
    arglist = "-remove \"Standard Cloud Node\"";
    StartExternalProcess(CurExeName,arglist,"","hansa-cloudnode",procflags);
    LogText(0,"Removing service for this server");
    RemoveMyWindowsService;
  end;

  pid = ReadLongFromFile("cloudnode/run-cloudnode.pid");
  if (PidIsRunning(pid)==true) then begin
    StopExternalProcess(pid);
  end;

  pid = ReadLongFromFile("cloudnode/hansa.pid");
  if (PidIsRunning(pid)==true) then begin
    LogText(0,"Stopping Cloud Node with process id " & pid);
    StopExternalProcess(pid);
  end;
end;

global
updating procedure StartCloudNode()
begin
  MakeAutoStartingCloudNode("cloudnode/",true);
  return;
end;

updating procedure ConfigureCloudNode(Boolean autostartf,var Boolean failf)
begin
  string 255 exefil;
  string 255 workdir;
  string 255 arglist;
  LongInt procflags;
  transaction string 255 cnport,cnsslport,cnhttpport,lcsport,lcshttpport,lcssslport;
  transaction string 255 cucode,cuname,exename,lcsfolder,lcsbindip;
  transaction string 255 apikey,vcode,sslpwd,pollingport,pollingflag,assignedcncode,assignedccaddr;
  transaction Longint contractno;
  transaction Integer regincountry;
  area a_conf;

  SendTextParameter(vcode,a_conf);
  SendTextParameter(apikey,a_conf);
  SendTextParameter(exename,a_conf);
  SendTextParameter(cuname,a_conf);
  SendTextParameter(cucode,a_conf);
  SendTextParameter(lcsport,a_conf);
  SendTextParameter(lcssslport,a_conf);
  SendTextParameter(lcshttpport,a_conf);
  SendTextParameter(lcsfolder,a_conf);
  SendTextParameter(lcsbindip,a_conf);
  SendTextParameter(sslpwd,a_conf);
  SendTextParameter(cnport,a_conf);
  SendTextParameter(cnsslport,a_conf);
  SendTextParameter(cnhttpport,a_conf);
  SendTextParameter(autostartf,a_conf);
  SendTextParameter(pollingport,a_conf);
  SendTextParameter(pollingflag,a_conf);
  SendTextParameter(assignedcncode,a_conf);
  SendTextParameter(assignedccaddr,a_conf);
  SendTextParameter("",a_conf);//polling ports
  SendTextParameter(regincountry,a_conf);
  SendTextParameter(contractno,a_conf);

  SendEOLParameter(a_conf);
  WriteAreaToFile(a_conf,"cloudnode/cloudnodeconfig.txt",0);

  procflags = 0;
  workdir = "cloudnode/";
  if (WindowsMode) then begin
    exefil = workdir & "hansa-cloudnode.exe";
  end else begin
    exefil = "./hansa-cloudnode";
  end;

  arglist = "--port " & cnport;
  arglist = arglist & " --httpport=" & cnhttpport;
  arglist = arglist & " --httpsport=" & cnsslport;
  arglist = arglist & " --verbosity=debug";
  WriteStringToFile(arglist,"cloudnode/parameters.txt",0);

  arglist = " --autoconfigure-cloudnode";
  
  LogText(0,"Configuring Cloud Node: " & exefil & " " & arglist & " in " & workdir);
  Delete_File("cloudnode/tmp/cloudnode_configured");
  StartExternalProcess(exefil,arglist,workdir,"hansa-cloudnode",procflags);
  while (FileExists("cloudnode/tmp/cloudnode_configured")==false) begin
    Sleep(1);
  end;

  if (autostartf) then begin
    StartCloudNode;
  end else begin
    MakeAutoStartingCloudNode("cloudnode/",false);
  end;

LConfigureCloudNode:;
  return;
end;

procedure ExtractCloudNodePackage()
begin
  string 255 folder,tmpfolder;

  tmpfolder = "cloudnode_temp/";
  folder = "cloudnode/";

  Delete_File(tmpfolder & "/newver/hansa-debug-server");
  Delete_File(tmpfolder & "/newver/hansa-debug-server64");
  Delete_File(tmpfolder & "/newver/hansa-slave");
  Delete_File(tmpfolder & "/newver/hansa-debug-slave");
  Delete_File(tmpfolder & "/newver/hansa-debug-optimized-slave");
  Delete_File(tmpfolder & "/newver/hansa-windows-optimized-slave.exe");
  Delete_File(tmpfolder & "/newver/hansa-macosx-optimized-slave");

  switch (ProgramPlatform) begin
    case kPlatformUnknown:
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server.exe");
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server64.exe");
      Delete_File(tmpfolder & "/newver/hansa-macosx-optimized-server");
      RenameFile(tmpfolder & "/newver/" & NodeEXEName,tmpfolder & "/newver/hansa-cloudnode");
    case kPlatformMac:
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server.exe");
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server64.exe");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server64");
      RenameFile(tmpfolder & "/newver/" & NodeEXEName,tmpfolder & "/newver/hansa-cloudnode");
    case kPlatformWindows32:
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server64.exe");
      Delete_File(tmpfolder & "/newver/hansa-macosx-optimized-server");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server64");
      RenameFile(tmpfolder & "/newver/" & NodeEXEName,tmpfolder & "/newver/hansa-cloudnode.exe");
      Sleep(2);
    case kPlatformWindows64:
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server.exe");
      Delete_File(tmpfolder & "/newver/hansa-macosx-optimized-server");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server64");
      RenameFile(tmpfolder & "/newver/" & NodeEXEName,tmpfolder & "/newver/hansa-cloudnode.exe");
      Sleep(2);
    case kPlatformLinux32:
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server.exe");
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server64.exe");
      Delete_File(tmpfolder & "/newver/hansa-macosx-optimized-server");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server64");
      RenameFile(tmpfolder & "/newver/" & NodeEXEName,tmpfolder & "/newver/hansa-cloudnode");
    case kPlatformLinux64:
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server.exe");
      Delete_File(tmpfolder & "/newver/hansa-windows-optimized-server64.exe");
      Delete_File(tmpfolder & "/newver/hansa-macosx-optimized-server");
      Delete_File(tmpfolder & "/newver/hansa-debug-optimized-server");
      RenameFile(tmpfolder & "/newver/" & NodeEXEName,tmpfolder & "/newver/hansa-cloudnode");
  end;

  MoveFile("privkey.pem",folder,tmpfolder & "/newver");
  MoveFile("cert.pem",folder,tmpfolder & "/newver");
  DeleteFolder(folder);
  CopyFolder(tmpfolder & "/newver",folder);
  DeleteFolder(tmpfolder);
end;

procedure ExtractCloudNodePackage2(Area a_package)
begin
  string 255 tmpfolder;

  tmpfolder = "cloudnode_temp/";

  DeleteFolder(tmpfolder);
  CreateFolderHierarchy(tmpfolder);
  RestoreArchiveFromArea(tmpfolder,a_package);
  ExtractCloudNodePackage;
end;

global
updating procedure AutoSetupCloudNode(string cucode2,Integer cc_country)
begin
  LongInt port;
  string 255 path,vserver,vport,vpath,address;
  area a_req,a_reply;
  Boolean failf,res;
  LongInt old_country;
  record InternetEnablerBlock IEb;
  record HostingPartnerBlock HPb;
  transaction string 255 cnport,cnsslport,cnhttpport,lcsport,lcshttpport,lcssslport;
  transaction string 255 cucode,cuname,exename,lcsfolder,lcsbindip;
  transaction string 255 apikey,vcode,sslpwd,pollingport,pollingflag,assignedcncode,assignedccaddr;

  BlockLoad(IEb);
  BlockLoad(HPb);
  old_country = IEb.RegInCountry;

  cucode = cucode2;
  if (blank(cucode)) then begin
    LogText(0,"Customer Code can't be blank");
    goto LAutoSetupCloudNode;
  end;

  IEb.RegInCountry = GetCompanyCodeFromCode(cc_country);
  if (cucode!="999999999") then begin // Or else there will be no calls to lookup...
    IEb.CustomerCode = cucode;
  end;
  if (HPb.HostingPartner>0) then begin
    LogText(0,"2 Using registration partner " & HPb.HostingPartner & ", customer " & IEb.CustomerCode);
  end else begin
    LogText(0,"2 Using registration country " & cc_country & ", company " & IEb.RegInCountry & ", customer " & IEb.CustomerCode);
  end;
  BlockStore(IEb);

  cnport = "1301"; // ASP hosting std. ports for cloud node
  cnsslport = "499";
  cnhttpport = "1081";

  address = PublicHostName;
  if (HPb.HostingPartner>0) then begin
    LogText(0,"Registering host " & address & " with cloud controller using partner " & HPb.HostingPartner);
  end else begin
    LogText(0,"Registering host " & address & " with cloud controller using country " & cc_country);
  end;
  RegisterWithCloudController(address,vserver,vport,vpath,failf,LocalHostName);

  LogText(0,"Starting download of Cloud Node package http://" & vserver & ":" & vport & vpath);
LAutoSetupCloudNode_TryAgain:;
  res = SendWebRequest(vserver,vport,-1,false,"GET",vpath,"text/xml; charset=""utf-8""","",false,a_req,a_reply,30);
  if (res==true) then begin
    ExtractCloudNodePackage2(a_reply);
    ConfigureCloudNode(false,failf);
  end else begin
    LogText(0,"Failed downloading Cloud Node package http://" & vserver & ":" & vport & vpath & ", retrying");
    goto LAutoSetupCloudNode_TryAgain;
  end;

LAutoSetupCloudNode:;
  IEb.RegInCountry = old_country;
  BlockStore(IEb);
  return;
end;

global
updating procedure AutoSetupCloudNode2(string cucode2,Integer cc_country,Integer svrportno,Integer svrsslportno,Integer svrhttpportno)
begin
  LongInt port;
  string 255 path,vserver,vport,vpath,address;
  area a_req,a_reply;
  Boolean failf,res;
  LongInt old_country;
  record InternetEnablerBlock IEb;
  record HostingPartnerBlock HPb;
  transaction string 255 cnport,cnsslport,cnhttpport,lcsport,lcshttpport,lcssslport;
  transaction string 255 cucode,cuname,exename,lcsfolder,lcsbindip;
  transaction string 255 apikey,vcode,sslpwd,pollingport,pollingflag,assignedcncode,assignedccaddr;
  transaction Longint contractno;
  transaction Integer regincountry;

  BlockLoad(IEb);
  BlockLoad(HPb);
  old_country = IEb.RegInCountry;

  cucode = cucode2;
  if (blank(cucode)) then begin
    LogText(0,"Customer Code can't be blank");
    goto LAutoSetupCloudNode;
  end;

  IEb.RegInCountry = GetCompanyCodeFromCode(cc_country);
  if (cucode!="999999999") then begin // Or else there will be no calls to lookup...
    IEb.CustomerCode = cucode;
  end;
  if (HPb.HostingPartner>0) then begin
    LogText(0,"1 Using registration partner " & HPb.HostingPartner & ", customer " & IEb.CustomerCode);
  end else begin
    LogText(0,"1 Using registration country " & cc_country & ", company " & IEb.RegInCountry & ", customer " & IEb.CustomerCode);
  end;
  BlockStore(IEb);

  cnport = "1301"; // ASP hosting std. ports for cloud node
  cnsslport = "499";
  cnhttpport = "1081";
  lcsport = svrportno;
  lcshttpport = svrsslportno;
  lcssslport = svrhttpportno;
  //cucode = IEb.CustomerCode;
  //cuname = CYb.CompName;
  exename = CurExeName;
  lcsfolder = ProgramFolder;
  //lcsbindip = PSb.BindToAddr;
  regincountry = old_country;
  contractno = IEb.Contract;

  address = PublicHostName;
  if (HPb.HostingPartner>0) then begin
    LogText(0,"Registering host " & address & " with cloud controller using partner " & HPb.HostingPartner);
  end else begin
    LogText(0,"Registering host " & address & " with cloud controller using country " & cc_country);
  end;
  RegisterWithCloudController(address,vserver,vport,vpath,failf,LocalHostName);

  LogText(0,"Starting download of Cloud Node package http://" & vserver & ":" & vport & vpath);
  LAutoSetupCloudNode_TryAgain:;
  res = SendWebRequest(vserver,vport,-1,false,"GET",vpath,"text/xml; charset=""utf-8""","",false,a_req,a_reply,30);
  if (res==true) then begin
    ExtractCloudNodePackage2(a_reply);
    ConfigureCloudNode(false,failf);
  end else begin
    LogText(0,"Failed downloading Cloud Node package http://" & vserver & ":" & vport & vpath & ", retrying");
    goto LAutoSetupCloudNode_TryAgain;
  end;

  LAutoSetupCloudNode:;
  IEb.RegInCountry = old_country;
  BlockStore(IEb);
  return;
end;

global
updating procedure SetupCloudNodeAtServer(Integer cnportno,Integer cnsslportno,Integer cnhttpportno,Integer svrportno,Integer svrsslportno,Integer svrhttpportno,string svripaddr)
begin
  string 255 server;
  LongInt port;
  string 255 path,vserver,vpath,vdestpath,vport;
  area a_req;
  Boolean failf;
  record InternetEnablerBlock IEb;
  record CYBlock CYb;
  record ProgramStatusBlock PSb;
  transaction string 255 cnport,cnsslport,cnhttpport,lcsport,lcshttpport,lcssslport;
  transaction string 255 cucode,cuname,exename,lcsfolder,lcsbindip;
  transaction string 255 apikey,vcode,sslpwd;
  transaction Longint contractno;
  transaction Integer regincountry;

  BlockLoad(IEb);
  BlockLoad(CYb);
  BlockLoad(PSb);

  StopAndRemoveCloudNode;

  cnport = cnportno;
  cnsslport = cnsslportno;
  cnhttpport = cnhttpportno;
  lcsport = svrportno;
  lcshttpport = svrsslportno;
  lcssslport = svrhttpportno;
  cucode = IEb.CustomerCode;
  cuname = CYb.CompName;
  exename = CurExeName;
  lcsfolder = ProgramFolder;
  lcsbindip = PSb.BindToAddr;
  regincountry = IEb.RegInCountry;
  contractno = IEb.Contract;

//address = svripaddr;

  vdestpath = "cloudnode_temp";
  DeleteFolder(vdestpath);
  CreateFolder(vdestpath);

  RegisterWithCloudController(svripaddr,vserver,vport,vpath,failf,"");

  LogText(0,"Starting download of Cloud Node package http://" & vserver & ":" & vport & vpath);
  HttpAsyncDownloadHA(vserver,StringToInt(vport),vpath,30,vdestpath,"SetupCloudNodeAtServerReply");
  return;
end;

global
updating procedure SetupCloudNodeAtServerReply(Boolean successf,LongInt httpres,Boolean timeout,string indir)
begin
  Integer status;
  string 255 comment,result;
  Boolean failf;
  transaction string 255 cnport,cnsslport,cnhttpport,lcsport,lcshttpport,lcssslport;
  transaction string 255 cucode,cuname,exename,lcsfolder,lcsbindip;
  transaction string 255 apikey,vcode,sslpwd,pollingport,pollingflag,assignedcncode,assignedccaddr;

  if (timeout==true) then begin
    LogText(0,"SetupCloudNodeAtServerReply timed out attempting to download Cloud Node package");
    goto LSetupCloudNodeAtServerReply;
  end;

  switch (httpres) begin
    case kHttpStatusNotFound:
      LogText(0,"SetupCloudNodeAtServerReply failed downloading Cloud Node package (status=404 not found)");
      goto LSetupCloudNodeAtServerReply;
    case kHttpStatusOK:
      if (successf!=true) then begin
        LogText(0,"SetupCloudNodeAtServerReply failed downloading Cloud Node package (successf==false)");
        goto LSetupCloudNodeAtServerReply;
      end;
    otherwise
      LogText(0,"SetupCloudNodeAtServerReply failed downloading Cloud Node package (status=" & httpres & ")");
      goto LSetupCloudNodeAtServerReply;
  end;

  LogText(0,"Extracting Cloud Node package");
  ExtractCloudNodePackage;
  LogText(0,"Configuring Cloud Node");
  ConfigureCloudNode(true,failf);
  QuitApplication(0,false);

LSetupCloudNodeAtServerReply:;
  return;
end;

global
function Integer IsCloudNodeInstalled()
begin
  Integer res; // 0 = not installed, 1 = installed but not running, 2 = installed and running

  if (DirExists("cloudnode")==false) then begin goto LIsCloudNodeInstalled; end;
//  if (FileExists("cloudnode/HANSA.HDB")==false) then begin goto LIsCloudNodeInstalled; end;
  if (FileExists("cloudnode/cloudnodeconfig.txt")==false) then begin goto LIsCloudNodeInstalled; end;

  res = 1;
  if (FileExists("cloudnode/hansa.pid")==false) then begin goto LIsCloudNodeInstalled; end;
  if (PidIsRunning(ReadLongFromFile("cloudnode/hansa.pid"))==false) then begin goto LIsCloudNodeInstalled; end;

  res = 2;

LIsCloudNodeInstalled:;
  IsCloudNodeInstalled = res;
  return;
end;

global
procedure RunRecCntRnEnablerAction()
begin
  record RcVc RepSpec;

  Delete_File("RecCntRn.TXT");

  RepSpec.Media = mtFile;
  RepSpec.repname = "RecCntRn";
  RepSpec.f1 = ""; // register
  RepSpec.long1 = 0; // min no. of records
  RepSpec.flags[0] = 0; // include simple registers
  RepSpec.IncDaughter = 1; // include all companies

  RunReport(RepSpec,0);
end;
