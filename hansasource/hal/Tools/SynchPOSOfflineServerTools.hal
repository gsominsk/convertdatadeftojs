external procedure IVSumup(var record IVVc,Boolean);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure IVVc_PastePayDeal(var record IVVc,string,string);
external function Boolean IVVc_PasteSum(var record IVVc,Integer,var Boolean,Integer);
external function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external function Integer PUVc_PasteQuant(var record PUVc,Integer);
external function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external function Boolean PUVc_PasteVECode(var record PUVc);
external procedure IVDchsum(var record IVVc,Integer);
external updating procedure SynkMachineRegisterCallback(Boolean,record SynkDBIDRegVc,record LocalMachineSetVc,record LocalMachineLoginVc);
external updating procedure SynkGlobalMachineRegisterCallback(Boolean,record SynkGlobalDBIDRegVc);

global 
function Boolean CTypeVcRecordShouldBeSynchronised(record CTypeVc CTyper,string tagstr)
begin
  Boolean res;
  
  res = true;
  CTypeVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean CTypeVcRecordSync(record CTypeVc CTyper,string tagstr)
begin
  Boolean res;
  
  res = true;
  CTypeVcRecordSync = res;
  return;
end;

global 
function Boolean PLQVcRecordShouldBeSynchronised(record PLQVc PLQr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLQVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean PLQVcRecordSync(record PLQVc PLQr,string tagstr)
begin
  Boolean res;
  
  res = true;
  PLQVcRecordSync = res;
  return;
end;

global 
function Boolean UnitVcRecordShouldBeSynchronised(record UnitVc Unitr,string tagstr)
begin
  Boolean res;
  
  res = true;
  UnitVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean UnitVcRecordSync(record UnitVc Unitr,string tagstr)
begin
  Boolean res;
  
  res = true;
  UnitVcRecordSync = res;
  return;
end;

global 
function Boolean ItemStatusVcRecordShouldBeSynchronised(record ItemStatusVc ItemStatusr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ItemStatusVcRecordShouldBeSynchronised = res;
  return;
end;

global 
function Boolean ItemStatusVcRecordSync(record ItemStatusVc ItemStatusr,string tagstr)
begin
  Boolean res;
  
  res = true;
  ItemStatusVcRecordSync = res;
  return;
end;

global
updating procedure POSServToOffLine_SynchBefSettings(Integer servcomp,Integer offlinecomp,
   var LongInt AccVcSeqNr,var LongInt OTVcSeqNr,var LongInt ObjVcSeqNr,var LongInt LocationVcSeqNr,
   var LongInt AccessVcSeqNr,var LongInt DocVcSeqNr,var LongInt CCatVcSeqNr,var LongInt VEVcSeqNr,
   var LongInt CurncyCodeVcSeqNr,var LongInt ModifiersVcSeqNr,var LongInt PDVcSeqNr)
begin  
  LongInt dummy,dummyr;

  CurncyCodeVcSeqNr = SynchroniseRegister("CurncyCodeVc",servcomp,offlinecomp,CurncyCodeVcSeqNr,"");
  AccVcSeqNr = SynchroniseRegister("AccVc",servcomp,offlinecomp,AccVcSeqNr,"");
  OTVcSeqNr = SynchroniseRegister("OTVc",servcomp,offlinecomp,OTVcSeqNr,"");
  ObjVcSeqNr = SynchroniseRegister("ObjVc",servcomp,offlinecomp,ObjVcSeqNr,"");
  LocationVcSeqNr = SynchroniseRegister("LocationVc",servcomp,offlinecomp,LocationVcSeqNr,"");
  AccessVcSeqNr = SynchroniseRegister("AccessVc",servcomp,offlinecomp,AccessVcSeqNr,"");
  DocVcSeqNr = SynchroniseRegister("DocVc",servcomp,offlinecomp,DocVcSeqNr,"");
  PDVcSeqNr = SynchroniseRegister("PDVc",servcomp,offlinecomp,PDVcSeqNr,"");
  CCatVcSeqNr = SynchroniseRegister("CCatVc",servcomp,offlinecomp,CCatVcSeqNr,"");
  VEVcSeqNr = SynchroniseRegister("VEVc",servcomp,offlinecomp,VEVcSeqNr,"");
  ModifiersVcSeqNr = SynchroniseRegister("ModifiersVc",servcomp,offlinecomp,ModifiersVcSeqNr,"");  

  return;
end;

global
updating procedure POSServToOffLine_SynchRegisters(Integer servcomp,Integer offlinecomp,
   var LongInt DIVcSeqNr,var LongInt UnitVcSeqNr,var LongInt PLQVcSeqNr,var LongInt RebVcSeqNr,
   var LongInt ITVcSeqNr,var LongInt PLVcSeqNr,var LongInt INVcSeqNr,var LongInt CUVcSeqNr,
   var LongInt PLDefVcSeqNr,var LongInt UserVcSeqNr,var LongInt CTypeVcSeqNr,var LongInt StyleVcSeqNr,
   var LongInt ArtUpdStockVcSeqNr,var LongInt RecVcSeqNr,var LongInt DrawerVcSeqNr,
   var LongInt ItemStatusVcSeqNr,var LongInt Custom1VcSeqNr,var LongInt Custom2VcSeqNr,
   var LongInt Custom3VcSeqNr,var LongInt Custom4VcSeqNr,var LongInt Custom5VcSeqNr,
   var LongInt Custom6VcSeqNr,var LongInt Custom7VcSeqNr,var LongInt Custom8VcSeqNr,
   var LongInt Custom9VcSeqNr,var LongInt Custom10VcSeqNr)
begin
  UnitVcSeqNr = SynchroniseRegister("UnitVc",servcomp,offlinecomp,UnitVcSeqNr,"");    
  PLQVcSeqNr = SynchroniseRegister("PLQVc",servcomp,offlinecomp,PLQVcSeqNr,"");    
  RebVcSeqNr = SynchroniseRegister("RebVc",servcomp,offlinecomp,RebVcSeqNr,"");    
  ITVcSeqNr = SynchroniseRegister("ITVc",servcomp,offlinecomp,ITVcSeqNr,"");
  INVcSeqNr = SynchroniseRegister("INVc",servcomp,offlinecomp,INVcSeqNr,"");
  RecVcSeqNr = SynchroniseRegister("RecVc",servcomp,offlinecomp,RecVcSeqNr,"");
  CUVcSeqNr = SynchroniseRegister("CUVc",servcomp,offlinecomp,CUVcSeqNr,"");
  DIVcSeqNr = SynchroniseRegister("DIVc",servcomp,offlinecomp,DIVcSeqNr,"");
  PLDefVcSeqNr = SynchroniseRegister("PLDefVc",servcomp,offlinecomp,PLDefVcSeqNr,"");
  PLVcSeqNr = SynchroniseRegister("PLVc",servcomp,offlinecomp,PLVcSeqNr,"");
  UserVcSeqNr = SynchroniseRegister("UserVc",servcomp,offlinecomp,UserVcSeqNr,"");
  CTypeVcSeqNr = SynchroniseRegister("CTypeVc",servcomp,offlinecomp,CTypeVcSeqNr,"");  
  StyleVcSeqNr = SynchroniseRegister("StyleVc",servcomp,offlinecomp,StyleVcSeqNr,"");    
  ArtUpdStockVcSeqNr = SynchroniseRegister("ArtUpdStockVc",servcomp,offlinecomp,ArtUpdStockVcSeqNr,"");    
  DrawerVcSeqNr = SynchroniseRegister("DrawerVc",servcomp,offlinecomp,DrawerVcSeqNr,"");
  ItemStatusVcSeqNr = SynchroniseRegister("ItemStatusVc",servcomp,offlinecomp,ItemStatusVcSeqNr,"");  
  return;
end;

global
procedure POSServToOffLine_ReadLocalMachineSettings(string localmachinecode,var record LocalMachineIBVc LMIBr,var record LocalMachineITLVc LMITLr,var record LocalMachineLoginVc LMLr,
                           var record LocalMachineSetVc LMSr,var record LocalMachineSPVc LMSPr,var record LocalMachineVc LMr)
begin  
  LMIBr.LocalMachine = localmachinecode;
  if (ReadFirstMain(LMIBr,1,true)) then begin
  end;
  LMITLr.LocalMachine = localmachinecode;
  if (ReadFirstMain(LMITLr,1,true)) then begin
  end;
  LMLr.LocalMachine = localmachinecode;
  if (ReadFirstMain(LMLr,1,true)) then begin
  end;
  LMSr.LocalMachine = localmachinecode;
  if (ReadFirstMain(LMSr,1,true)) then begin
  end;
  LMSPr.LocalMachine = localmachinecode;
  if (ReadFirstMain(LMSPr,1,true)) then begin
  end;
  LMr.Code = localmachinecode;
  if (ReadFirstMain(LMr,1,true)) then begin
  end;
  return;
end;

procedure NewInvoice(var record IVVc IVr,string custcode,string localmachine,string location,string possalesnr,Date transdate,record DefCashBlock DCb,Integer InvType)
begin
  string 255 warning,errstr,prepstr,transdatewarn,invdatewarn;
  record CashierDefBlock CDb;
  record CUVc CUr;
  record LocalMachineBlock LMb;
  
  RecordNew(IVr);
/*lookhere*/
//  IVr.InclVAT = 1;

  IVr.InvType = InvType;
  IVr.CustCode = custcode;
  if (PasteCust2InInv(IVr,LMb,"",false,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin end;
  IVr.Addr0 = IVr.Addr0;
  IVr.Location = location;
  IVr.TransDate = transdate;
  IVr.InvDate = transdate;
  
  /*lookhere
there is diffrent customer pasted above !
  BlockLoad(CDb);    
  CUr.Code = CDb.DefCustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  IVr.PriceList = CUr.PLCode;
  IVVc_PastePriceList(IVr);
  */
  
  IVr.CustOrdNr = possalesnr;
  IVr.Sorting = localmachine;
  IVr.UpdStockFlag = 1;
  
  IVr.PayDeal = DCb.DefCashPayDeal;
  IVVc_PastePayDeal(IVr,"","");
  return;
end;

procedure NewGoodsReceipt(var record PUVc PUr,string custcode,string localmachine,string location,string possalesnr,Date transdate)
begin
  string 255 warning,errstr,prepstr,transdatewarn,invdatewarn;
  record CUVc CUr;
  
  RecordNew(PUr);
  PUr.VECode = custcode;
  if (PUVc_PasteVECode(PUr)) then begin end;
  PUr.Location = location;
  PUr.TransDate = transdate;
  PUr.Comment = possalesnr;
  PUr.Sorting = localmachine;
  return;
end;

global
updating procedure CreateInvoiceFromPOSSales_OnServer(record POSSalesVc POSSalesr,record POSSalesVc POSReturnr,string custcode,string DefReturnLocation,Integer servcomp,Integer offlinecomp)
begin
  record IVVc IVr;
  record IVVc credIVr;
  row IVVc IVrw;
  record PUVc PUr;
  row PUVc PUrw;
  row POSSalesVc POSSalesrw;
  row POSSalesVc POSReturnrw;
  Integer i,rwcnt;
  Integer ivrwcnt,purwcnt;
  string 255 tstr;
  Boolean chsum;
  val cashsum,writeofsum,totalsum,ivsum;
  val fr,to1,to2,br1,br2;
  record DefCashBlock DCb;
  Integer curcomp,sernrf;
  record OffLineSetBlock OffLb;
  
  curcomp = CurrentCompany;
  SetServerCompany(servcomp);
  BlockLoad(DCb);
  BlockLoad(OffLb);
  NewInvoice(IVr,custcode,POSSalesr.LocalMachineCode,POSSalesr.Location,POSSalesr.SerNr,POSSalesr.TransDate,DCb,1);
  NewInvoice(credIVr,custcode,POSReturnr.LocalMachineCode,DefReturnLocation,POSReturnr.SerNr,POSReturnr.TransDate,DCb,3);
//  NewGoodsReceipt(PUr,custcode,POSSalesr.LocalMachineCode,DefReturnLocation,POSSalesr.SerNr,POSSalesr.TransDate);
  rwcnt = MatRowCnt(POSSalesr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSSalesr,i,POSSalesrw);
    ivrwcnt = MatRowCnt(IVr);

    if ((IVr.Sum4>0) and (MatRowCnt(IVr)>19)) then begin
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");    
      IVr.OKFlag = OffLb.OKInvoice;
      if (IVr.SerNr>0) then begin
        if (RecordStore(IVr,false)) then begin 
/*lookhere*/
//      POSSalesr.InvNo = IVr.SerNr;, not used ever
//          if (RecordStore(POSSalesr,true)) then begin end;
        end;
      end;   
      ivrwcnt = 0;
      NewInvoice(IVr,custcode,POSSalesr.LocalMachineCode,POSSalesr.Location,POSSalesr.SerNr,POSSalesr.TransDate,DCb,1);
    end;
    ClearRow(IVr,IVrw,1);
    IVrw.ArtCode = POSSalesrw.ArtCode;
    MatRowPut(IVr,ivrwcnt,IVrw);
    if (IVVc_PasteArtCode(IVr,ivrwcnt,tstr,tstr,false,sernrf)==false) then begin
      MatRowGet(IVr,ivrwcnt,IVrw);
      IVrw.Spec = USetStr(1233);
      MatRowPut(IVr,ivrwcnt,IVrw);
    end;
    MatRowGet(IVr,ivrwcnt,IVrw);
    IVrw.NotUpdStockFlag = POSSalesrw.NotUpdStockFlag;
    IVrw.Quant = POSSalesrw.Quant;
    IVrw.Price = POSSalesrw.Price;
    IVrw.Sum = POSSalesrw.Sum;
/*lookhere*/    
// Wierd, but it HAS to take the VAT code from the item, and it seems it doesn't get proper one in the POSSales record
    IVrw.VATCode = POSSalesrw.VATCode;
    MatRowPut(IVr,ivrwcnt,IVrw);
    if (IVVc_PasteSum(IVr,ivrwcnt,chsum,1)) then begin 
      if (chsum) then begin
        IVDchsum(IVr,ivrwcnt);
      end;
    end;
  end;
  cashsum = POSSalesr.CashValue - POSSalesr.RetValue;  
  totalsum = cashsum + POSSalesr.RecValue;
  if (POSSalesr.RecValue!=0) then begin  
    ClearRow(IVr,IVrw,16);
    IVrw.Sum = POSSalesr.RecValue;
    IVrw.Spec = USetStr(20801);
    tstr = IVrw.CurncyCode;
    GetFullCurncyRate(tstr,IVr.TransDate,fr,to1,to2,br1,br2);
    IVrw.CurncyCode = tstr;
    IVrw.FrRate = fr;
    IVrw.ToRateB1 = to1; 
    IVrw.ToRateB2 = to2;
    IVrw.BaseRate1 = br1;
    IVrw.BaseRate2 = br2;
    IVrw.PayMode =  DCb.DefCCPayMode;
    MatRowInsert(IVr,0,IVrw);
  end;
  if (cashsum!=0) then begin
    ClearRow(IVr,IVrw,15);
    IVrw.Sum = cashsum;
    IVrw.Spec = USetStr(20800);
    tstr = IVrw.CurncyCode;
    GetFullCurncyRate(tstr,IVr.TransDate,fr,to1,to2,br1,br2);
    IVrw.CurncyCode = tstr;
    IVrw.FrRate = fr;
    IVrw.ToRateB1 = to1; 
    IVrw.ToRateB2 = to2;
    IVrw.BaseRate1 = br1;
    IVrw.BaseRate2 = br2;    
    IVrw.PayMode = DCb.DefCashPayMode;      
    MatRowInsert(IVr,0,IVrw);
  end;  
  IVSumup(IVr,true);  
  if ((IVr.Sum4 > 0) or (MatRowCnt(IVr)>0)) then begin
    IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,"");    
    IVr.OKFlag = OffLb.OKInvoice;
    if (IVr.SerNr>0) then begin
      if (RecordStore(IVr,false)) then begin 
/*lookhere*/
//      POSSalesr.InvNo = IVr.SerNr;, not used ever
//        if (RecordStore(POSSalesr,true)) then begin end;
      end;
    end;
  end;


  rwcnt = MatRowCnt(POSReturnr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSReturnr,i,POSReturnrw);
    ivrwcnt = MatRowCnt(credIVr);

    if ((credIVr.Sum4>0) and (MatRowCnt(credIVr)>198)) then begin
      credIVr.SerNr = NextSerNr("IVVc",credIVr.TransDate,-1,false,"");    
      credIVr.OKFlag = OffLb.OKInvoice;
      if (credIVr.SerNr>0) then begin
        if (RecordStore(credIVr,false)) then begin 
/*lookhere*/
//      POSReturnr.InvNo = credIVr.SerNr;, not used ever
//          if (RecordStore(POSReturnr,true)) then begin end;
        end;
      end;   
      ivrwcnt = 0;
      NewInvoice(credIVr,custcode,POSReturnr.LocalMachineCode,DefReturnLocation,POSReturnr.SerNr,POSReturnr.TransDate,DCb,3);
    end;
    ClearRow(credIVr,IVrw,1);
    IVrw.ArtCode = POSReturnrw.ArtCode;
    MatRowPut(credIVr,ivrwcnt,IVrw);
    if (IVVc_PasteArtCode(credIVr,ivrwcnt,tstr,tstr,false,sernrf)==false) then begin
      MatRowGet(credIVr,ivrwcnt,IVrw);
      IVrw.Spec = USetStr(1233);
      MatRowPut(credIVr,ivrwcnt,IVrw);
    end;
    MatRowGet(credIVr,ivrwcnt,IVrw);
    IVrw.NotUpdStockFlag = POSReturnrw.NotUpdStockFlag;
    IVrw.Quant = -POSReturnrw.Quant;
    IVrw.Price = POSReturnrw.Price;
    IVrw.Sum = POSReturnrw.Sum;
/*lookhere*/    
// Wierd, but it HAS to take the VAT code from the item, and it seems it doesn't get proper one in the POSSales record
    IVrw.VATCode = POSReturnrw.VATCode;
    MatRowPut(credIVr,ivrwcnt,IVrw);
    if (IVVc_PasteSum(credIVr,ivrwcnt,chsum,1)) then begin 
      if (chsum) then begin
        IVDchsum(credIVr,ivrwcnt);
      end;
    end;
  end;
  cashsum = POSReturnr.CashValue - POSReturnr.RetValue;  
  totalsum = cashsum + POSReturnr.RecValue;
  if (POSReturnr.RecValue!=0) then begin  
    ClearRow(credIVr,IVrw,16);
    IVrw.Sum = POSReturnr.RecValue;
    IVrw.Spec = USetStr(20801);
    tstr = IVrw.CurncyCode;
    GetFullCurncyRate(tstr,credIVr.TransDate,fr,to1,to2,br1,br2);
    IVrw.CurncyCode = tstr;
    IVrw.FrRate = fr;
    IVrw.ToRateB1 = to1; 
    IVrw.ToRateB2 = to2;
    IVrw.BaseRate1 = br1;
    IVrw.BaseRate2 = br2;
    IVrw.PayMode =  DCb.DefCCPayMode;
    MatRowInsert(credIVr,0,IVrw);
  end;
  if (cashsum!=0) then begin
    ClearRow(credIVr,IVrw,15);
    IVrw.Sum = cashsum;
    IVrw.Spec = USetStr(20800);
    tstr = IVrw.CurncyCode;
    GetFullCurncyRate(tstr,credIVr.TransDate,fr,to1,to2,br1,br2);
    IVrw.CurncyCode = tstr;
    IVrw.FrRate = fr;
    IVrw.ToRateB1 = to1; 
    IVrw.ToRateB2 = to2;
    IVrw.BaseRate1 = br1;
    IVrw.BaseRate2 = br2;    
    IVrw.PayMode = DCb.DefCashPayMode;      
    MatRowInsert(credIVr,0,IVrw);
  end;  
  ClearRow(credIVr,IVrw,3);
  MatRowInsert(credIVr,0,IVrw);
 
  IVSumup(credIVr,true);  

  if ((credIVr.Sum4 > 0) and (MatRowCnt(credIVr)>0)) then begin
    credIVr.SerNr = NextSerNr("IVVc",credIVr.TransDate,-1,false,"");    
    credIVr.OKFlag = OffLb.OKInvoice;
    if (credIVr.SerNr>0) then begin
      if (RecordStore(credIVr,false)) then begin 
/*lookhere*/
//      POSReturnr.InvNo = credIVr.SerNr;, not used ever
//        if (RecordStore(POSReturnr,true)) then begin end;
      end;
    end;
  end;
  
/*  
  rwcnt = MatRowCnt(POSReturnr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POSReturnr,i,POSReturnrw);  
    if (POSReturnrw.NotUpdStockFlag==0) then begin
      purwcnt = MatRowCnt(PUr);
      if (MatRowCnt(PUr)>199) then begin
        PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");    
//        PUr.OKFlag = 1;
        if (PUr.SerNr>0) then begin
          if (RecordStore(PUr,false)) then begin 
  lookhere
  //      POSReturnr.InvNo = IVr.SerNr;, not used ever
//            if (RecordStore(POSReturnr,true)) then begin end;
          end;
        end;   
        purwcnt = 0;
        NewGoodsReceipt(PUr,custcode,POSSalesr.LocalMachineCode,DefReturnLocation,POSSalesr.SerNr,POSSalesr.TransDate);
      end;

      ClearRow(PUr,PUrw,1);
      PUrw.ArtCode = POSReturnrw.ArtCode;
      MatRowPut(PUr,purwcnt,PUrw);
      if (PUVc_PasteArtCode(PUr,purwcnt,tstr,tstr)==false) then begin
        MatRowGet(PUr,purwcnt,PUrw);
        PUrw.Spec = USetStr(1233);
        MatRowPut(PUr,purwcnt,PUrw);
      end;
      MatRowGet(PUr,purwcnt,PUrw);
      PUrw.Quant = -POSReturnrw.Quant;
      PUrw.UPrice = POSReturnrw.Price;
      PUrw.Sum = POSReturnrw.Sum;
      PUrw.VATCode = POSReturnrw.VATCode;
      MatRowPut(PUr,purwcnt,PUrw);
      if (PUVc_PasteQuant(PUr,purwcnt)) then begin 
      end;
    end;
  end;
  if (MatRowCnt(PUr)>0) then begin
    PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");    
//    PUr.OKFlag = 1;
    if (PUr.SerNr>0) then begin
      if (RecordStore(PUr,false)) then begin 
/lookhere
//      POSReturnr.InvNo = IVr.SerNr; not used ever
//        if (RecordStore(POSReturnr,true)) then begin end;
      end;
    end;
  end;
*/  
  SetServerCompany(curcomp);
  return;
end;

procedure GetSynkMachineRange(string filename,LongInt nrser,LongInt qty,var LongInt fr,var LongInt to)
begin
  record SynkDBIDTakenSerVc SynkDBIDTakenSer;
  
  fr = -1;
  to = -1;
  SynkDBIDTakenSer.FileName = filename;
  //SynkDBIDTakenSer.To = 999999999;
  SynkDBIDTakenSer.To = 2147483647;
  if (ReadLastKey("BlockNameTo",SynkDBIDTakenSer,2,false)) then begin
    if (SynkDBIDTakenSer.FileName==filename) then begin
      fr = SynkDBIDTakenSer.To+1;
      to = fr + qty - 1;
    end;
  end;
  if (fr==-1 and to==-1) then begin
    fr = nrser;
    to = fr + qty - 1;
  end;
  return;
end;

procedure GetSynkGlobalMachineRange(string filename,LongInt nrser,LongInt qty,var LongInt fr,var LongInt to)
begin
  record SynkGlobalDBIDTakenSerVc SynkGlobalDBIDTakenSer;
  
  fr = -1;
  to = -1;
  SynkGlobalDBIDTakenSer.FileName = filename;
  SynkGlobalDBIDTakenSer.To = 2147483647;
  if (ReadLastKey("BlockNameTo",SynkGlobalDBIDTakenSer,2,false)) then begin
    if (SynkGlobalDBIDTakenSer.FileName==filename) then begin
      fr = SynkGlobalDBIDTakenSer.To+1;
      to = fr + qty - 1;
    end;
  end;
  if (fr==-1 and to==-1) then begin
    fr = nrser;
    to = fr + qty - 1;
  end;
  return;
end;

procedure updating UpdateMachineTakenSer(record SynkDBIDRegVc SynkDBIDRegr)
begin
  row SynkDBIDRegVc SynkDBIDRegrw;
  record SynkDBIDTakenSerVc SynkDBIDTakenSer;
  record SynkDBIDTakenSerVc oldSynkDBIDTakenSer;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(SynkDBIDRegr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SynkDBIDRegr,i,SynkDBIDRegrw);
    SynkDBIDTakenSer.DBIDCode = SynkDBIDRegr.DBIDCode;
    SynkDBIDTakenSer.FileName = SynkDBIDRegrw.FileName;
    SynkDBIDTakenSer.From = SynkDBIDRegrw.From;
    if (ReadFirstMain(SynkDBIDTakenSer,3,true)) then begin
      RecordCopy(oldSynkDBIDTakenSer,SynkDBIDTakenSer);
      SynkDBIDTakenSer.LastNumber = -1;
      if (RecordUpdate(oldSynkDBIDTakenSer,SynkDBIDTakenSer,false)==0) then begin
      end;
    end else begin
      RecordNew(SynkDBIDTakenSer);
      SynkDBIDTakenSer.DBIDCode = SynkDBIDRegr.DBIDCode;
      SynkDBIDTakenSer.FileName = SynkDBIDRegrw.FileName;
      SynkDBIDTakenSer.From = SynkDBIDRegrw.From;
      SynkDBIDTakenSer.To = SynkDBIDRegrw.To;
      SynkDBIDTakenSer.LastNumber = -1;
      if (RecordStore(SynkDBIDTakenSer,false)) then begin
      end;
    end;
  end;
  
  return;
end;

procedure updating UpdateGlobalMachineTakenSer(record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr)
begin
  row SynkGlobalDBIDRegVc SynkGlobalDBIDRegrw;
  record SynkGlobalDBIDTakenSerVc SynkGlobalDBIDTakenSer;
  record SynkGlobalDBIDTakenSerVc oldSynkGlobalDBIDTakenSer;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SynkGlobalDBIDRegr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SynkGlobalDBIDRegr,i,SynkGlobalDBIDRegrw);
    SynkGlobalDBIDTakenSer.DBIDCode = SynkGlobalDBIDRegr.DBIDCode;
    SynkGlobalDBIDTakenSer.FileName = SynkGlobalDBIDRegrw.FileName;
    SynkGlobalDBIDTakenSer.From = SynkGlobalDBIDRegrw.From;
    if (ReadFirstMain(SynkGlobalDBIDTakenSer,3,true)) then begin
      RecordCopy(oldSynkGlobalDBIDTakenSer,SynkGlobalDBIDTakenSer);
      SynkGlobalDBIDTakenSer.LastNumber = -1;
      if (RecordUpdate(oldSynkGlobalDBIDTakenSer,SynkGlobalDBIDTakenSer,false)==0) then begin
      end;
    end else begin
      RecordNew(SynkGlobalDBIDTakenSer);
      SynkGlobalDBIDTakenSer.DBIDCode = SynkGlobalDBIDRegr.DBIDCode;
      SynkGlobalDBIDTakenSer.FileName = SynkGlobalDBIDRegrw.FileName;
      SynkGlobalDBIDTakenSer.From = SynkGlobalDBIDRegrw.From;
      SynkGlobalDBIDTakenSer.To = SynkGlobalDBIDRegrw.To;
      SynkGlobalDBIDTakenSer.LastNumber = -1;
      if (RecordStore(SynkGlobalDBIDTakenSer,false)) then begin
      end;
    end;
  end;
  
  return;
end;

procedure updating UpdateMachineGlobalTakenSer(record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr)
begin
  row SynkGlobalDBIDRegVc SynkGlobalDBIDRegrw;
  record SynkGlobalDBIDTakenSerVc SynkGlobalDBIDTakenSer;
  record SynkGlobalDBIDTakenSerVc oldSynkGlobalDBIDTakenSer;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(SynkGlobalDBIDRegr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SynkGlobalDBIDRegr,i,SynkGlobalDBIDRegrw);
    SynkGlobalDBIDTakenSer.DBIDCode = SynkGlobalDBIDRegr.DBIDCode;
    SynkGlobalDBIDTakenSer.FileName = SynkGlobalDBIDRegrw.FileName;
    SynkGlobalDBIDTakenSer.From = SynkGlobalDBIDRegrw.From;
    if (ReadFirstMain(SynkGlobalDBIDTakenSer,3,true)) then begin
      RecordCopy(oldSynkGlobalDBIDTakenSer,SynkGlobalDBIDTakenSer);
      SynkGlobalDBIDTakenSer.LastNumber = -1;
      if (RecordUpdate(oldSynkGlobalDBIDTakenSer,SynkGlobalDBIDTakenSer,false)==0) then begin
      end;
    end else begin
      RecordNew(SynkGlobalDBIDTakenSer);
      SynkGlobalDBIDTakenSer.DBIDCode = SynkGlobalDBIDRegr.DBIDCode;
      SynkGlobalDBIDTakenSer.FileName = SynkGlobalDBIDRegrw.FileName;
      SynkGlobalDBIDTakenSer.From = SynkGlobalDBIDRegrw.From;
      SynkGlobalDBIDTakenSer.To = SynkGlobalDBIDRegrw.To;
      SynkGlobalDBIDTakenSer.LastNumber = -1;
      if (RecordStore(SynkGlobalDBIDTakenSer,false)) then begin
      end;
    end;
  end;
  
  return;
end;

global
updating procedure SynkGlobalMachineRegister(string usercode,var record SynkGlobalDBIDRegVc SynkGlobalDBIDRegr,string localmachine)
begin
  record SynkGlobalDBIDRegVc oldSynkGlobalDBIDRegr;
  record SynkGlobalAutoSerVc SynkGlobalAutoSerr;
  row SynkGlobalAutoSerVc SynkGlobalAutoSerrw;
  row SynkGlobalDBIDRegVc SynkGlobalDBIDRegrw;
  Integer i,rwcnt;
  Integer ai,arwcnt;
  LongInt fr,to,cnt;
  record UserVc Userr;
  Boolean res;
  Boolean userf;
  
//  LogText(0,"00.SynkGlobalMachineRegister");
  
  res = false;
  Userr.Code = usercode;
  userf = ReadFirstMain(Userr,1,true);
  SynkGlobalAutoSerr.UserCode = usercode;
  if (ReadFirstMain(SynkGlobalAutoSerr,1,true)==false) then begin
    SynkGlobalAutoSerr.SalesGroup = Userr.SalesGroup;
    if (userf==false or ReadFirstKey("SalesGroup",SynkGlobalAutoSerr,1,true)==false) then begin
      SynkGlobalAutoSerr.UserCode = "";
      if (ReadFirstMain(SynkGlobalAutoSerr,1,true)) then begin
        res = true;
      end else begin
        SynkGlobalAutoSerr.UserCode = "*";
        if (ReadFirstMain(SynkGlobalAutoSerr,1,true)) then begin
          res = true;
        end;
      end;
    end else begin
      res = true;
    end;
  end else begin
    res = true;
  end;
  if (res) then begin
//    LogText(0,"01.SynkGlobalMachineRegister");
    rwcnt = MatRowCnt(SynkGlobalDBIDRegr);
    if (rwcnt>0) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SynkGlobalDBIDRegr,i,SynkGlobalDBIDRegrw);
        if (SynkGlobalDBIDRegrw.LastNumber>0) then begin
          if (SynkGlobalDBIDRegrw.LastNumber>=SynkGlobalDBIDRegrw.To) then begin
            MatRowDelete(SynkGlobalDBIDRegr,i);
            i = i -1;
          end;
        end;
      end;
      arwcnt = MatRowCnt(SynkGlobalAutoSerr);
      rwcnt = MatRowCnt(SynkGlobalDBIDRegr);
      for (ai=0;ai<arwcnt;ai=ai+1) begin
        cnt = 0;
        MatRowGet(SynkGlobalAutoSerr,ai,SynkGlobalAutoSerrw);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SynkGlobalDBIDRegr,i,SynkGlobalDBIDRegrw);
          if (SynkGlobalAutoSerrw.FileName==SynkGlobalDBIDRegrw.FileName) then begin
            if (SynkGlobalDBIDRegrw.LastNumber>0) then begin
              cnt = cnt + SynkGlobalDBIDRegrw.To - SynkGlobalDBIDRegrw.LastNumber;
            end else begin
              cnt = cnt + SynkGlobalDBIDRegrw.To - SynkGlobalDBIDRegrw.From + 1;
            end;
          end;
        end;
        
        if ((cnt>0) and (cnt<SynkGlobalAutoSerrw.NrsMinimum)) then begin
//          LogText(0,"02.SynkGlobalMachineRegister");
          
          SynkGlobalDBIDRegrw.FileName = SynkGlobalAutoSerrw.FileName;
          GetSynkGlobalMachineRange(SynkGlobalAutoSerrw.FileName,SynkGlobalAutoSerrw.NumberSeries,SynkGlobalAutoSerrw.NrsRangeQty,fr,to);
          SynkGlobalDBIDRegrw.From = fr;
          SynkGlobalDBIDRegrw.To = to;
          SynkGlobalDBIDRegrw.LastNumber = -1;
          MatRowPut(SynkGlobalDBIDRegr,rwcnt,SynkGlobalDBIDRegrw);
          rwcnt = rwcnt + 1;
        end;
      end;
    end else begin
      arwcnt = MatRowCnt(SynkGlobalAutoSerr);
      for (ai=0;ai<arwcnt;ai=ai+1) begin
//        LogText(0,"03.SynkGlobalMachineRegister");
        MatRowGet(SynkGlobalAutoSerr,ai,SynkGlobalAutoSerrw);
        SynkGlobalDBIDRegrw.FileName = SynkGlobalAutoSerrw.FileName;
        GetSynkGlobalMachineRange(SynkGlobalAutoSerrw.FileName,SynkGlobalAutoSerrw.NumberSeries,SynkGlobalAutoSerrw.NrsRangeQty,fr,to);
        SynkGlobalDBIDRegrw.From = fr;
        SynkGlobalDBIDRegrw.To = to;
        SynkGlobalDBIDRegrw.LastNumber = -1;
        MatRowPut(SynkGlobalDBIDRegr,rwcnt,SynkGlobalDBIDRegrw);
        rwcnt = rwcnt + 1;
      end;
    end;
    SynkGlobalDBIDRegr.LastSeenDate = CurrentDate;
    SynkGlobalDBIDRegr.LastSeenTime = CurrentTime;
    SynkGlobalDBIDRegr.LocalMachineCode = localmachine;
    
//    LogText(0,"04.SynkGlobalMachineRegister");
    
    oldSynkGlobalDBIDRegr.DBIDCode = SynkGlobalDBIDRegr.DBIDCode;
    if (ReadFirstMain(oldSynkGlobalDBIDRegr,1,true)) then begin
      if (RecordUpdate(oldSynkGlobalDBIDRegr,SynkGlobalDBIDRegr,false)==0) then begin
      end;
    end else begin
      if (RecordStore(SynkGlobalDBIDRegr,false)) then begin
      end;
    end;
    UpdateGlobalMachineTakenSer(SynkGlobalDBIDRegr);
  end;
  
  clientremoteasync.SynkGlobalMachineRegisterCallback(res,SynkGlobalDBIDRegr);
  
  return;
end;

global
updating procedure SynkMachineRegister(string usercode,var record SynkDBIDRegVc SynkDBIDRegr,string localmachine)
begin
  record SynkDBIDRegVc oldSynkDBIDRegr;
  record SynkAutoSerVc SynkAutoSerr;
  row SynkAutoSerVc SynkAutoSerrw;
  row SynkDBIDRegVc SynkDBIDRegrw;
  record LocalMachineSetVc LMSr;
  record LocalMachineLoginVc LMLr;
  Integer i,rwcnt;
  Integer ai,arwcnt;
  LongInt fr,to,cnt;
  record UserVc Userr;
  Boolean res;
  Boolean userf;
  
  res = false;
  Userr.Code = usercode;
  userf = ReadFirstMain(Userr,1,true);
  SynkAutoSerr.UserCode = usercode;
  if (ReadFirstMain(SynkAutoSerr,1,true)==false) then begin
    SynkAutoSerr.SalesGroup = Userr.SalesGroup;
    if (userf==false or ReadFirstKey("SalesGroup",SynkAutoSerr,1,true)==false) then begin
      SynkAutoSerr.UserCode = "";
      if (ReadFirstMain(SynkAutoSerr,1,true)) then begin
        res = true;
      end else begin
        SynkAutoSerr.UserCode = "*";
        if (ReadFirstMain(SynkAutoSerr,1,true)) then begin
          res = true;
        end;
      end;
    end else begin
      res = true;
    end;
  end else begin
    res = true;
  end;
  if (res) then begin
    rwcnt = MatRowCnt(SynkDBIDRegr);
    if (rwcnt>0) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SynkDBIDRegr,i,SynkDBIDRegrw);
        if (SynkDBIDRegrw.LastNumber>0) then begin
          if (SynkDBIDRegrw.LastNumber>=SynkDBIDRegrw.To) then begin
            MatRowDelete(SynkDBIDRegr,i);
            i = i -1;
          end;
        end;
      end;
      arwcnt = MatRowCnt(SynkAutoSerr);
      rwcnt = MatRowCnt(SynkDBIDRegr);
      for (ai=0;ai<arwcnt;ai=ai+1) begin
        cnt = 0;
        MatRowGet(SynkAutoSerr,ai,SynkAutoSerrw);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(SynkDBIDRegr,i,SynkDBIDRegrw);
          if (SynkAutoSerrw.FileName==SynkDBIDRegrw.FileName) then begin
            if (SynkDBIDRegrw.LastNumber>0) then begin
              cnt = cnt + SynkDBIDRegrw.To - SynkDBIDRegrw.LastNumber;
            end else begin
              cnt = cnt + SynkDBIDRegrw.To - SynkDBIDRegrw.From + 1;
            end;
          end;
        end;
        
        if ((cnt>0) and (cnt<SynkAutoSerrw.NrsMinimum)) then begin
          SynkDBIDRegrw.FileName = SynkAutoSerrw.FileName;
          GetSynkMachineRange(SynkAutoSerrw.FileName,SynkAutoSerrw.NumberSeries,SynkAutoSerrw.NrsRangeQty,fr,to);
          SynkDBIDRegrw.From = fr;
          SynkDBIDRegrw.To = to;
          SynkDBIDRegrw.LastNumber = -1;
          MatRowPut(SynkDBIDRegr,rwcnt,SynkDBIDRegrw);
          rwcnt = rwcnt + 1;
        end;
      end;
    end else begin
      arwcnt = MatRowCnt(SynkAutoSerr);
      for (ai=0;ai<arwcnt;ai=ai+1) begin
        MatRowGet(SynkAutoSerr,ai,SynkAutoSerrw);
        SynkDBIDRegrw.FileName = SynkAutoSerrw.FileName;
        GetSynkMachineRange(SynkAutoSerrw.FileName,SynkAutoSerrw.NumberSeries,SynkAutoSerrw.NrsRangeQty,fr,to);
        SynkDBIDRegrw.From = fr;
        SynkDBIDRegrw.To = to;
        SynkDBIDRegrw.LastNumber = -1;
        MatRowPut(SynkDBIDRegr,rwcnt,SynkDBIDRegrw);
        rwcnt = rwcnt + 1;
      end;
    end;
    SynkDBIDRegr.LastSeenDate = CurrentDate;
    SynkDBIDRegr.LastSeenTime = CurrentTime;
    SynkDBIDRegr.LocalMachineCode = localmachine;

    oldSynkDBIDRegr.DBIDCode = SynkDBIDRegr.DBIDCode;
    if (ReadFirstMain(oldSynkDBIDRegr,1,true)) then begin
      if (RecordUpdate(oldSynkDBIDRegr,SynkDBIDRegr,false)==0) then begin
      end;
    end else begin
      if (RecordStore(SynkDBIDRegr,false)) then begin
      end;
    end;
    UpdateMachineTakenSer(SynkDBIDRegr);
  end;
  LMSr.LocalMachine = localmachine;
  if (ReadFirstMain(LMSr,1,true)) then begin
  end;
  LMLr.LocalMachine = localmachine;
  if (ReadFirstMain(LMLr,1,true)) then begin
  end;
  
  clientremoteasync.SynkMachineRegisterCallback(res,SynkDBIDRegr,LMSr,LMLr);
  
  return;
end;

global
procedure POSOffLineToServ_SynchRegisters_AreIVCashsStored(Array LongInt delinvarr,var Array Boolean delinvarrf,var Integer dinvacnt)
begin
  record IVCashVc IVCashr;
  Integer di;

  for (di=0;di<dinvacnt;di=di+1) begin 
    IVCashr.SerNr = delinvarr[di];
    delinvarrf[di] = ReadFirstMain(IVCashr,1,true);
  end;
  return;
end;
