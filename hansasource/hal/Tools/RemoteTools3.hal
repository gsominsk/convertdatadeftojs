external function boolean AddEMailRecipients(var record MailVc,string,string,integer);
external procedure RecalcProjectInvoice(record IVVc,string);
external updating function Integer PastePOInDropSH(record POVc,var record DropSHVc,Integer);
external function Integer TypeOfCurncy(var string,var Integer);
external function Boolean InterNetAddrTest(string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external Procedure GetUserName(String ,var String);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
external function string 255 FindNextLegalSerNr(record IVVc,string);
external procedure FindCurMailboxName(var string);
external updating procedure SetReadFlagHal(LongInt,Integer);
external updating function Integer PastePOInPU(record POVc,record PUVc,Integer);
external updating procedure DoOP2DForm(record RcVc,var record OPVc);
external procedure GetBaseCurncy(Integer,var string);
external function Boolean PasteCustInInv(var record IVVc);
external updating procedure UpdatePRFromIV(record IVVc,Boolean,record IVVc,Boolean);
external procedure IVSumup(var record IVVc,Boolean);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure GetItemSalesAcc(string,Integer,var string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function LongInt GetCurUserLastNr(string);
external updating procedure PPrsStats(record PPVc,Boolean);
external updating function LongInt PPVcRecordCheck(var record PPVc,record PPVc,LongInt,LongInt);
external updating function LongInt ExpVcRecordCheck(var record ExpVc,record ExpVc,LongInt,LongInt);
external updating procedure ExprsStats(record ExpVc,Boolean);
external updating function LongInt UpdatePPOKNr(LongInt);
external procedure Bud2AccObjCalc(var record Bud2Vc);
external procedure Bud2Sumup(var record Bud2Vc);
external updating procedure AssignStockResFromPO(record POVc);
external function Boolean ActVc_ShouldAttachPdfToEMail(record ActVc);
external procedure GetMailFormattingSettings(record MailVc,var record ConfVc);
external procedure FindUserMailboxName(string,var string,var string);

global
procedure PasteInvInEDIInv(var record EDIIVVc EDIIVp,record IVVc IVp)
BEGIN
  Integer i,rwcnt,edicnt ,acted,j;
  record CUVc CUr;
  row IVVc IVrw;
  row EDIIVVc EDIIVrw;
  record EDIIVVc locEDIIVr;
  record EDIFileBlock EDIsett;

  locEDIIVr.SerNr = IVp.SerNr;
  if (ReadFirstMain(locEDIIVr,1,true)) then begin
    goto LPasteInvInEDIInv;
  end;  
  if (IVp.OKFlag==0) then begin 
    goto LPasteInvInEDIInv;    
  end;  
  CUr.Code = IVp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.EDIFlag==0) then begin 
      goto LPasteInvInEDIInv;
    end;  
  end;
  BlockLoad(EDIsett);
  if (EDIsett.SkipCreditInv==1) then begin
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin 
      goto LPasteInvInEDIInv;
    end;  
  end;
  
  EDIIVp.SerNr = IVp.SerNr;
  EDIIVp.InvDate = CurrentDate;
  EDIIVp.CustCode = IVp.CustCode;
  EDIIVp.PayDate = IVp.PayDate;
  EDIIVp.Addr0 = IVp.Addr0;  
  EDIIVp.Addr1 = IVp.Addr1;
  EDIIVp.Addr2 = IVp.Addr2;
  EDIIVp.Addr3 = IVp.Addr3;
  EDIIVp.InvAddr3 = IVp.InvAddr3;
  EDIIVp.InvAddr4 = IVp.InvAddr4;
  EDIIVp.OurContact = IVp.OurContact;
  EDIIVp.ClientContact = IVp.ClientContact;
  EDIIVp.ExportFlag = IVp.ExportFlag;
  EDIIVp.PayDeal = IVp.PayDeal;
  EDIIVp.OrderNr = IVp.OrderNr;
  EDIIVp.Prntdf = 0;
  EDIIVp.BatchNr = 0;  
  EDIIVp.OKFlag = IVp.OKFlag;
  EDIIVp.pdays = IVp.pdays;
  EDIIVp.pdvrebt = IVp.pdvrebt;
  EDIIVp.pdrdays = IVp.pdrdays;
  EDIIVp.pdvrebt2 = IVp.pdvrebt2;
  EDIIVp.pdrdays2 = IVp.pdrdays2;
  EDIIVp.CustCat = IVp.CustCat;
  EDIIVp.pdComment = IVp.pdComment;
  EDIIVp.InvType = IVp.InvType;
  EDIIVp.xStatFlag = 0;
  EDIIVp.PriceList = IVp.PriceList;
  EDIIVp.Objects = IVp.Objects;
  EDIIVp.InclVAT = IVp.InclVAT;
  EDIIVp.NoTAXonVAT = IVp.NoTAXonVAT;
  EDIIVp.TotalwoTAX = IVp.TotalwoTAX;
  EDIIVp.Objects = IVp.Objects;
  EDIIVp.ARAcc = IVp.ARAcc;
  EDIIVp.InvComment = IVp.InvComment;
  EDIIVp.CredInv = IVp.CredInv;
  EDIIVp.CredMark = IVp.CredMark;
  EDIIVp.SalesMan = IVp.SalesMan;
  EDIIVp.ToRateB1 = IVp.ToRateB1;
  EDIIVp.TransDate = IVp.TransDate;
  EDIIVp.CurncyCode = IVp.CurncyCode;
  EDIIVp.LangCode = IVp.LangCode;
  EDIIVp.UpdStockFlag = IVp.UpdStockFlag;
  EDIIVp.LastRemndr = IVp.LastRemndr;
  EDIIVp.LastRemDate = IVp.LastRemDate;
  EDIIVp.Sign = IVp.Sign;
  EDIIVp.FrPrice = IVp.FrPrice;
  EDIIVp.FrBase = IVp.FrBase;
  EDIIVp.FrItem = IVp.FrItem;
  EDIIVp.FrVATCode = IVp.FrVATCode;
  EDIIVp.FrObjects = IVp.FrObjects;
  EDIIVp.OrgCust = IVp.OrgCust;
  EDIIVp.FrGP = IVp.FrGP;
  EDIIVp.FrGPPercent = IVp.FrGPPercent;
  EDIIVp.Sum0 = IVp.Sum0;
  EDIIVp.Sum1 = IVp.Sum1;
  EDIIVp.Sum2 = IVp.Sum2;
  EDIIVp.Sum3 = IVp.Sum3;
  EDIIVp.Sum4 = IVp.Sum4;
  EDIIVp.VATNr = IVp.VATNr;
  EDIIVp.ShipDeal = IVp.ShipDeal;
  EDIIVp.ShipAddr0 = IVp.ShipAddr0;
  EDIIVp.ShipAddr1 = IVp.ShipAddr1;
  EDIIVp.ShipAddr2 = IVp.ShipAddr2;
  EDIIVp.ShipAddr3 = IVp.ShipAddr3;
  EDIIVp.DelAddr3 = IVp.DelAddr3;
  EDIIVp.DelAddr4 = IVp.DelAddr4;
  EDIIVp.ShipMode = IVp.ShipMode;
  EDIIVp.Location = IVp.Location;
  EDIIVp.PRCode = IVp.PRCode;
  EDIIVp.FrSalesAcc = IVp.FrSalesAcc;
  EDIIVp.TAX1Sum = IVp.TAX1Sum;
  EDIIVp.CustVATCode = IVp.CustVATCode;
  EDIIVp.RebCode = IVp.RebCode;
  EDIIVp.CalcFinRef = IVp.CalcFinRef;
  EDIIVp.Phone = IVp.Phone;
  EDIIVp.Fax = IVp.Fax;
  EDIIVp.IntCode = IVp.IntCode;
  EDIIVp.ARonTR = IVp.ARonTR;
  EDIIVp.CustOrdNr = IVp.CustOrdNr;
  EDIIVp.ExportedFlag = 0;
  EDIIVp.BaseSum4 = IVp.BaseSum4;
  EDIIVp.FrRate = IVp.FrRate;
  EDIIVp.ToRateB2 = IVp.ToRateB2;
  EDIIVp.BaseRate1 = IVp.BaseRate1;
  EDIIVp.BaseRate2 = IVp.BaseRate2;
  EDIIVp.InvoiceNr = IVp.InvoiceNr;
  EDIIVp.DiscPerc = IVp.DiscPerc;
  EDIIVp.DiscSum = IVp.DiscSum;
  EDIIVp.TotGP = IVp.TotGP;
  EDIIVp.LocOKNr = IVp.LocOKNr;
  EDIIVp.Invalid = 0;
  EDIIVp.CreditCard = IVp.CreditCard;
  EDIIVp.AuthorizationCode = IVp.AuthorizationCode;
  rwcnt = MatRowCnt(IVp);
  if (EDIsett.ConsEDIInvRows==1) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      acted = -1;
      for (j=0;j<edicnt;j=j+1) begin
        MatRowGet(EDIIVp,j,EDIIVrw);
        if ((EDIIVrw.ArtCode==IVrw.ArtCode) and 
            (EDIIVrw.Price==IVrw.Price) and 
            (EDIIVrw.vRebate==IVrw.vRebate) and
            (EDIIVrw.BasePrice==IVrw.BasePrice) and
            (EDIIVrw.FIFO==IVrw.FIFO) and
            (EDIIVrw.PriceFactor==IVrw.PriceFactor) and
            (EDIIVrw.Coefficient==IVrw.Coefficient) and
            (EDIIVrw.VATCode==IVrw.VATCode) and
            (EDIIVrw.SerialNr==IVrw.SerialNr) and
            (EDIIVrw.VARList==IVrw.VARList)) then begin
          acted = j;
          j = edicnt;
        end;
      end;
      if (acted==-1) then begin
        edicnt = edicnt + 1;
        acted = edicnt;
        EDIIVrw.stp = IVrw.stp;
        ClearRow(EDIIVp,EDIIVrw,EDIIVrw.stp);
        EDIIVrw.Quant = blankval;
        EDIIVrw.Sum = blankval;
        EDIIVrw.rowGP = blankval;
        EDIIVrw.FIFORowVal = blankval;
        EDIIVrw.ArtCode = IVrw.ArtCode;
        EDIIVrw.Price = IVrw.Price;
        EDIIVrw.vRebate = IVrw.vRebate;
        EDIIVrw.VATCode = IVrw.VATCode;
        EDIIVrw.SerialNr = IVrw.SerialNr;
        EDIIVrw.VARList = IVrw.VARList;
        EDIIVrw.BasePrice = IVrw.BasePrice;
        EDIIVrw.FIFO = IVrw.FIFO;
        EDIIVrw.PriceFactor = IVrw.PriceFactor;
        EDIIVrw.Coefficient = IVrw.Coefficient;
        EDIIVrw.OrdRow = -1;
        EDIIVrw.CUPNr = -1;
        EDIIVrw.Objects = IVrw.Objects;
        EDIIVrw.SalesAcc = IVrw.SalesAcc;
        EDIIVrw.Spec = IVrw.Spec;
        EDIIVrw.Recepy = IVrw.Recepy;
        EDIIVrw.CuAccCode = IVrw.CuAccCode;
      end else begin
        MatRowGet(EDIIVp,acted,EDIIVrw);
      end;
      EDIIVrw.Quant = EDIIVrw.Quant + IVrw.Quant;
      EDIIVrw.Sum = EDIIVrw.Sum + IVrw.Sum;
      EDIIVrw.rowGP = EDIIVrw.rowGP + IVrw.rowGP;
      EDIIVrw.FIFORowVal = EDIIVrw.FIFORowVal + IVrw.FIFORowVal;
      MatRowPut(EDIIVp,acted,EDIIVrw);
    end;
  end else begin
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      EDIIVrw.stp = IVrw.stp;
      ClearRow(EDIIVp,EDIIVrw,EDIIVrw.stp);
      EDIIVrw.ArtCode = IVrw.ArtCode;
      EDIIVrw.Quant = IVrw.Quant;
      EDIIVrw.Price = IVrw.Price;
      EDIIVrw.Sum = IVrw.Sum;
      EDIIVrw.vRebate = IVrw.vRebate;
      EDIIVrw.SalesAcc = IVrw.SalesAcc;
      EDIIVrw.Objects = IVrw.Objects;
      EDIIVrw.OrdRow = IVrw.OrdRow;
      EDIIVrw.BasePrice = IVrw.BasePrice;
      EDIIVrw.rowGP = IVrw.rowGP;
      EDIIVrw.FIFO = IVrw.FIFO;
      EDIIVrw.Spec = IVrw.Spec;
      EDIIVrw.VATCode = IVrw.VATCode;
      EDIIVrw.Recepy = IVrw.Recepy;
      EDIIVrw.SerialNr = IVrw.SerialNr;
      EDIIVrw.PriceFactor = IVrw.PriceFactor;
      EDIIVrw.VARList = IVrw.VARList;
      EDIIVrw.CUPNr = IVrw.CUPNr;
      EDIIVrw.FIFORowVal = IVrw.FIFORowVal;
      EDIIVrw.Coefficient = IVrw.Coefficient;
      EDIIVrw.CuAccCode = IVrw.CuAccCode;
      MatRowPut(EDIIVp,edicnt,EDIIVrw);
      edicnt = edicnt + 1;
    end;
  end;  
LPasteInvInEDIInv:;
  RETURN;
END;

global 
updating procedure RraPasteInvInEDIInv(var record EDIIVVc EDIIVp,var LongInt res)
BEGIN
  LongInt ordnr;  
  record IVVc IVr;
  record CUVc CUr;

  res = -1;
  ordnr = EDIIVp.SerNr;
  RecordNew(EDIIVp);
  IVr.SerNr = ordnr;  
  if (ReadFirstMain(IVr,1,true)) then begin
    CUr.Code = IVr.CustCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      if (CUr.EDIFlag==0) then begin goto LRraPasteInvInEDIInv; end;
    end;
    PasteInvInEDIInv(EDIIVp,IVr);
    if ((MatRowCnt(EDIIVp)>0) and (EDIIVp.SerNr!=-1)) then begin
      if (RecordInsert(EDIIVp,false)) then begin
        res = 1;
      end;
    end;
  end;
LRraPasteInvInEDIInv:;  
  RETURN;
END;

global
procedure RecAction_raBud2Sumup(var record Bud2Vc Bud2r)
BEGIN
  Bud2Sumup(Bud2r);
  RETURN;
END;

global
procedure RecAction_raBud2AccObjCalc(var record Bud2Vc Bud2r)
BEGIN
  Bud2AccObjCalc(Bud2r);
  RETURN;
END;

global
updating function Boolean RecordAction_rlVILOK(var record VIVc VIp)
BEGIN
  Boolean res;
  record VITBlock VITRec;
  record VIVc oldVIp;
  Integer updatemode;
  
  updatemode = 2;//Rs_update
  if (IsRecordLocked(VIp)==false) then begin
    if (ReadFirstMain(VIp,0,true)) then begin end;  
    if (VIp.OKFlag==0) then begin
      RecordCopy(oldVIp,VIp);
      VIp.OKFlag = 1;
      if (RecordUpdate(oldVIp,VIp,true)==0) then begin
        res = true;
      end;
    end;
  end;
LRecordAction_rlVILOK:;
  RecordAction_rlVILOK = res;
  RETURN;
END;

global
updating function Boolean RecordAction_rlOPLOK(var record OPVc OPp)
BEGIN
  Boolean res;
  record OPVc oldOPp;
  Integer updatemode;

  updatemode = 2;//Rs_update
  if (IsRecordLocked(OPp)==false) then begin
    if (ReadFirstMain(OPp,0,true)) then begin end;  
    if ((OPp.DoneFlag==0) and (OPp.OrderedFlag!=0)) then begin
      RecordCopy(oldOPp,OPp);
      OPp.DoneFlag = 1;
      if (RecordUpdate(oldOPp,OPp,true)==0) then begin
        res = true;
      end;
    end;    
  end;
LRecordAction_rlOPLOK:;
  RecordAction_rlOPLOK = res;
  RETURN;
END;

global
updating function Boolean RecordAction_rlOPLOrder(var record OPVc OPp)
BEGIN
  Boolean res;
  record OPVc oldOPp;

  if (IsRecordLocked(OPp)==false) then begin
    if (ReadFirstMain(OPp,0,true)) then begin end;  
    if (OPp.OrderedFlag==0) then begin
      RecordCopy(oldOPp,OPp);
      OPp.OrderedFlag = 1;
      if (RecordUpdate(oldOPp,OPp,true)==0) then begin
        res = true;
      end;
    end;  
  end;
LRecordAction_rlOPLOrder:;
  RecordAction_rlOPLOrder = res;
  RETURN;
END;

global
updating function Boolean RecordAction_rlIPLOK(var record IPVc IPp)
BEGIN
  Boolean res;
  record IPVc oldIPp;
  Integer updatemode;

  updatemode = 2;//Rs_update
  if (IsRecordLocked(IPp)==false) then begin
    if (ReadFirstMain(IPp,0,true)) then begin end;  
    if (IPp.OKFlag==0) then begin
      RecordCopy(oldIPp,IPp);
      IPp.OKFlag = 1;
      if (RecordUpdate(oldIPp,IPp,true)==0) then begin
        res = true;
      end;
    end;
  end;
LRecordAction_rlIPLOK:;
  RecordAction_rlIPLOK = res;
  RETURN;
END;

global
updating function Boolean RecordAction_rlExpLOK(var record ExpVc Expp)
BEGIN
  Boolean res;
  record ExpVc oldExpp;
  Integer updatemode;

  updatemode = 2;//Rs_update
  if (IsRecordLocked(Expp)==false) then begin
    if (ReadFirstMain(Expp,0,true)) then begin end;  
    if (Expp.OKFlag==0) then begin
      RecordCopy(oldExpp,Expp);
      Expp.OKFlag = 1;
/*
      if (ExpVcRecordCheck(Expp,oldExpp,updatemode,1)==0) then begin      
        Expp.OKFlag = 1;
        Expp.PPOKNr = UpdatePPOKNr(Expp.PPOKNr);
        ExpUpdatePR(Expp,oldExpp,false);
        ExprsStats(Expp,false);
        if (RecordUpdate(oldExpp,Expp,false)==0) then begin
        end;
      end;
*/
      if (RecordUpdate(oldExpp,Expp,true)==0) then begin
        res = true;
      end;
    end;
  end;
LRecordAction_rlExpLOK:;
  RecordAction_rlExpLOK = res;
  RETURN;
END;

global
updating function Boolean RecordAction_rlPPLOK(var record PPVc PPp)
BEGIN
  Boolean res;
  record PPVc oldPPp;
  Integer updatemode;

  updatemode = 2;//Rs_update
  if (IsRecordLocked(PPp)==false) then begin
    if (ReadFirstMain(PPp,0,true)) then begin end;  
    if ((PPp.DoneFlag==0) and (PPp.OrderedFlag!=0)) then begin
      RecordCopy(oldPPp,PPp);
      PPp.DoneFlag = 1;
/*
      if (PPVcRecordCheck(PPp,oldPPp,updatemode,1)==0) then begin      
        PPp.DoneFlag = 1;
        PPp.PPOKNr = UpdatePPOKNr(PPp.PPOKNr);
        PPrsStats(PPp,false);
        if (RecordUpdate(oldPPp,PPp,false)==0) then begin
        end;
      end;
*/
      if (RecordUpdate(oldPPp,PPp,true)==0) then begin
        res = true;
      end;
    end;
  end;
LRecordAction_rlPPLOK:;
  RecordAction_rlPPLOK = res;
  RETURN;
END;

global
updating function Boolean RecordAction_rlPPLOrder(var record PPVc PPp)
BEGIN
  Boolean res;
  record PPVc oldPPp;
  Integer updatemode;

  updatemode = 2;//Rs_update
  if (IsRecordLocked(PPp)==false) then begin
    if (ReadFirstMain(PPp,0,true)) then begin end;  
    if (PPp.OrderedFlag==0) then begin
      RecordCopy(oldPPp,PPp);
      PPp.OrderedFlag = 1;
      if (RecordUpdate(oldPPp,PPp,true)==0) then begin
        res = true;
      end;
    end;
  end;
LRecordAction_rlPPLOrder:;
  RecordAction_rlPPLOrder = res;
  RETURN;
END;

global
updating function LongInt RecordAction_raPastePOInPU(var record POVc POp,var record PUVc PUp)
BEGIN
  LongInt res,ponr,newnr;
  record SRBlock SRRec;
      
  if (ReadFirstMain(POp,0,true)) then begin end;  
  if (POp.OrderType!=kOrderTypeNormal) then begin 
    res = 22075;
    goto LRecordAction_raPastePOInPU;
  end;
  ponr = PUp.PONr;
  RecordNew(PUp);
  PUp.PONr = ponr;
  if (PUp.SerNr==-1) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("PUVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastPurNr;      
    end;    
    PUp.SerNr = NextSerNr("PUVc",PUp.TransDate,newnr,false,"");
    if (PUp.SerNr==-1) then begin 
      res = 1747;
      goto LRecordAction_raPastePOInPU; 
    end;
  end;
  AssignStockResFromPO(POp);
  res = PastePOInPU(POp,PUp,199);
  if (res!=0) then begin
    goto LRecordAction_raPastePOInPU;
  end;
  if ((MatRowCnt(PUp)>0) and (PUp.SerNr!=-1)) then begin
    if (RecordStore(PUp,false)) then begin 
      CreateRecordLink(PUp,CurrentCompany,POp,CurrentCompany);  
      CreateRecordLink(POp,CurrentCompany,PUp,CurrentCompany);  
    end;
    res = 0;
  end;
LRecordAction_raPastePOInPU:;  
  RecordAction_raPastePOInPU = res;
  RETURN;
END;

global
updating function LongInt RecordAction_raPastePOInDropSH(var record POVc POp,var record DropSHVc DropSHp)
begin
  LongInt res,newnr;
  record SRBlock SRb;
      
  if (ReadFirstMain(POp,0,true)) then begin end;  
/*  JJDS
  if (POp.OrderType!=kOrderTypeDropShip) then begin 
    res = 22075;
    goto LRecordAction_raPastePOInDropSH;
  end;
*/  
  RecordNew(DropSHp);
  if (DropSHp.SerNr==-1) then begin
    BlockLoad(SRb);
    newnr = GetCurUserLastNr("DropSHVc");
    if (newnr==-1) then begin
      newnr = SRb.LastDropSHNr;      
    end;    
    DropSHp.SerNr = NextSerNr("DropSHVc",DropSHp.ShipDate,newnr,false,"");
    if (DropSHp.SerNr==-1) then begin 
      res = 1747;
      goto LRecordAction_raPastePOInDropSH; 
    end;
  end;
  res = PastePOInDropSH(POp,DropSHp,199);
  if (res!=0) then begin
    goto LRecordAction_raPastePOInDropSH;
  end;
  if ((MatRowCnt(DropSHp)>0) and (DropSHp.SerNr!=-1)) then begin
    if (RecordStore(DropSHp,false)) then begin 
      CreateRecordLink(DropSHp,CurrentCompany,POp,CurrentCompany);  
      CreateRecordLink(POp,CurrentCompany,DropSHp,CurrentCompany);  
    end;
    res = 0;
  end;
LRecordAction_raPastePOInDropSH:;  
  RecordAction_raPastePOInDropSH = res;
  return;
end;

/*
global
updating function LongInt RecordAction_raPastePOInVI(var record POVc POp,var record VIVc VIp)
BEGIN
  LongInt res,newnr;
  record SRBlock SRRec;
      
  if (ReadFirstMain(POp,0,true)) then begin end;  
  RecordNew(VIp);
  res = PastePOInVI(POp,VIp);
  if (res!=0) then begin
    goto LRecordAction_raPastePOInVI;
  end;
  if (VIp.SerNr==-1) then begin
    BlockLoad(SRRec);
    newnr = GetCurUserLastNr("VIVc");
    if (newnr==-1) then begin
      newnr = SRRec.LastVINr;      
    end;    
    VIp.SerNr = NextSerNr("VIVc",VIp.TransDate,newnr,false,"");
    if (VIp.SerNr==-1) then begin goto LRecordAction_raPastePOInVI; end;
  end;
  if ((MatRowCnt(VIp)>0) and (VIp.SerNr!=-1)) then begin
    if (RecordStore(VIp,false)) then begin 
      CreateRecordLink(VIp,CurrentCompany,POp,CurrentCompany);  
      CreateRecordLink(POp,CurrentCompany,VIp,CurrentCompany);  
    end;
  end else begin
    res = -1;
  end;
LRecordAction_raPastePOInVI:;  
  RecordAction_raPastePOInVI = res;
  RETURN;
END;
*/
/*
function Boolean acActLOK(var record ActVc Actp)
BEGIN
  Boolean res;
  
  if (Actp.OKFlag==0) then begin
    Actp.OKFlag = 1;
    res = true;
  end;
  acActLOK = res;
  RETURN;
END;
*/
global
updating function Boolean RecordAction_rlActLOK(var record ActVc Actr)
BEGIN
  Boolean res;
  record ActVc oldActr;

  if (IsRecordLocked(Actr)==false) then begin
    if (ReadFirstMain(Actr,0,true)) then begin end;  
    RecordCopy(oldActr,Actr);
//    res = acActLOK(Actr);
//    if (res) then begin
    if (Actr.OKFlag==0) then begin
      Actr.OKFlag = 1;
      if (RecordUpdate(oldActr,Actr,true)==0) then begin
        res = true;
      end;    
    end;
  end;
  RecordAction_rlActLOK = res;
  RETURN;
END;
/*
function Boolean acCOLOK(record COVc COp)
BEGIN
  Boolean res;
  
  if (COp.OKFlag==0) then begin
    COp.OKFlag = 1;
    res = true;
  end;
  acCOLOK = res;
  RETURN;
END;
*/
global
updating function Boolean RecordAction_rlCOLOK(var record COVc COr)
BEGIN
  Boolean res;
  record COVc oldCOr;

  if (IsRecordLocked(COr)==false) then begin
    if (ReadFirstMain(COr,0,true)) then begin end;  
    RecordCopy(oldCOr,COr);
//    res = acCOLOK(COr);
//    if (res) then begin
    if (COr.OKFlag==0) then begin
      COr.OKFlag = 1;
      if (RecordUpdate(oldCOr,COr,true)==0) then begin
        res = true;
      end;    
    end;
  end;
  RecordAction_rlCOLOK = res;
  RETURN;
END;

global
updating procedure UpdatePRRetRow(record PRVc PRp,LongInt invnr,val retinvp,Boolean updatef)
BEGIN
/*
code changed
  record PRVc oldPRr;
  row PRVc PRrw;
  Integer i,rwcnt;
  val retsum,t;

  RecordCopy(oldPRr,PRp);
  rwcnt = MatRowCnt(PRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PRp,i,PRrw);
    if ((PRrw.InvNr==-1) and (PRrw.InvFlag==2) and (retsum<retinvp)) then begin
      PRrw.InvNr = invnr;
      if (blank(PRrw.Person)) then begin PRrw.Person = CurrentUser; end;
      MatRowPut(PRp,i,PRrw);
      retsum = retsum + StringToVal(PRrw.ValStr,M4Val);
      if (updatef) then begin
        if (RecordUpdate(oldPRr,PRp,false)==0) then begin
        end;
      end;
    end;
  end;  
*/  
  RETURN;
END;

// rownr varaiable is VERY wierd in this function...
function Integer ProInvHead(var record IVVc IVp,record PRVc PRp)
BEGIN
  record CUVc CUr;
  record ProjectBlock PRRec;
  Integer i,rownr;
  Integer firstrow;
  row IVVc IVrw;
  record SRBlock SRRec;
  string 255 tstr;
  val fr,to1,to2,br1,br2;
  string 10 curncy;  
  Integer res;

  BlockLoad(SRRec);
  RecordNew(IVp);
  IVp.InvType = kInvoiceTypeNormal;
  IVp.PRCode = PRp.Code;
  IVp.LangCode = PRp.LangCode;
  IVp.InvDate = CurrentDate;
  IVp.TransDate = CurrentDate;
  IVp.CurncyCode = PRp.CurncyCode;
  curncy = IVp.CurncyCode;
  GetFullCurncyRate(curncy,IVp.TransDate,fr,to1,to2,br1,br2);
  IVp.CurncyCode = curncy;
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1; 
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;
  IVp.Prntdf = 0;
  IVp.OrderNr = -1;
  IVp.SVONr = -1;
  IVp.OKFlag = 0;
  IVp.OurContact = "";
  IVp.InvComment = "";
  IVp.Sum0 = blankval;
  IVp.Sum1 = blankval;
  IVp.Sum2 = blankval;
  IVp.Sum3 = blankval;
  IVp.Sum4 = blankval;
  IVp.OurContact = PRp.LeaderName;
  IVp.ClientContact = PRp.Contact;
  IVp.DeliverySiteCode = PRp.DeliverySiteCode;
  IVp.WorkSiteNumber = PRp.WorkSiteNumber;
  if (nonblank(PRp.PrSalesMan)) then begin
    IVp.SalesMan = PRp.PrSalesMan;
  end;
  IVp.InclVAT = 0;
  CUr.Code = PRp.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  if (nonblank(CUr.InvoiceToCode)) then begin
    IVp.CustCode = CUr.InvoiceToCode;
  end else begin
    IVp.CustCode = CUr.Code;
  end;
  if (PasteCustInInv(IVp)) then begin end;
  if (nonblank(PRp.PayDeal)) then begin
    IVp.PayDeal = PRp.PayDeal;
  end;
  if (nonblank(PRp.CustOrdNr)) then begin
    IVp.CustOrdNr = PRp.CustOrdNr;
  end;
  if (blank(IVp.CurncyCode)) then begin
    GetBaseCurncy(1,tstr);
    IVp.CurncyCode = tstr;
  end;
  GetFullCurncyRate(IVp.CurncyCode,IVp.InvDate,fr,to1,to2,br1,br2);
  IVp.FrRate = fr;
  IVp.ToRateB1 = to1; 
  IVp.ToRateB2 = to2;
  IVp.BaseRate1 = br1;
  IVp.BaseRate2 = br2;
  IVp.SerNr = NextSerNr("IVVc",IVp.TransDate,-1,false,IVp.LangCode);

  SRRec.LastInvNr = IVp.SerNr;
  if (IVp.SerNr<=-1) then begin 
    res = 1747;
    goto LProInvHead; 
  end;
  tstr = IVp.Objects;
  if (nonblank(tstr)) then begin
    if (nonblank(PRp.Objects)) then begin
      tstr = tstr & ",";
    end;
  end;
  tstr = tstr & PRp.Objects;
  IVp.Objects = tstr;
  firstrow = MatRowCnt(IVp);
  rownr = firstrow;
  BlockLoad(PRRec);
  if (firstrow!=0) then begin 
    rownr = rownr + 1; 
    rownr = rownr + 1; 
  end;
  if ((PRp.PRCodeOnInv!=0) or (PRp.PRContOnInv!=0) or (PRp.PRLeaderOnInv!=0) or (PRp.PRNameOnInv!=0)) then begin
      rownr = rownr + 1;
  end;
  if (PRp.PRCodeOnInv!=0) then begin rownr = rownr + 1; end;
  if (PRp.PRNameOnInv!=0) then begin rownr = rownr + 1; end;
  if (PRp.PRContOnInv!=0) then begin rownr = rownr + 1; end;
  if (PRp.PRLeaderOnInv!=0) then begin rownr = rownr + 1; end;
  if (PRp.PRTextOnInv!=0) then begin
    if (nonblank(PRp.Desc2)) then begin 
      rownr = rownr + 4;
    end else begin
      if (nonblank(PRp.Desc1)) then begin
        rownr = rownr + 3;
      end else begin
        if (nonblank(PRp.Desc0)) then begin rownr = rownr + 2; end;
      end;
    end;
  end;
  for (i=firstrow;i<rownr;i=i+1) begin
    ClearRow(IVp,IVrw,1);
    IVrw.Spec = " ";
    MatRowPut(IVp,i,IVrw);
  end;
  rownr = firstrow;
  if (firstrow!=0) then begin 
    rownr = rownr + 1; 
    rownr = rownr + 1; 
  end;
  if (PRp.PRCodeOnInv!=0) then begin
    MatRowGet(IVp,rownr,IVrw);
    IVrw.Spec = PRRec.DescInv;
    if (nonblank(IVrw.Spec)) then begin
      IVrw.Spec = IVrw.Spec & " ";
    end;
    IVrw.Spec = IVrw.Spec & PRp.Code;
    MatRowPut(IVp,rownr,IVrw);
    rownr = rownr + 1;
    if ((PRp.PRNameOnInv==0) and (PRp.PRContOnInv==0) and (PRp.PRLeaderOnInv==0)) then begin
      rownr = rownr + 1; 
    end;
  end;
  if (PRp.PRNameOnInv!=0) then begin
    if (nonblank(PRp.Name)) then begin
      MatRowGet(IVp,rownr,IVrw);
      IVrw.Spec = PRp.Name;
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    if ((PRp.PRContOnInv==0) and (PRp.PRLeaderOnInv==0) and (PRp.PRCodeOnInv==0)) then begin
      rownr = rownr + 1; 
    end;
  end;
  if (PRp.PRContOnInv!=0) then begin
    if (nonblank(PRp.Contact)) then begin
      MatRowGet(IVp,rownr,IVrw);
      IVrw.Spec = PRp.Contact;
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    rownr = rownr + 1; 
  end;
  if (PRp.PRLeaderOnInv!=0) then begin
    if (nonblank(PRp.Leader)) then begin
      GetUserName(PRp.Leader,tstr);
      if (nonblank(tstr)) then begin
        MatRowGet(IVp,rownr,IVrw);
        IVrw.Spec = tstr;
        MatRowPut(IVp,rownr,IVrw);
        rownr = rownr + 1;
      end;
    end;
    rownr = rownr + 1; 
  end;
  if (PRp.PRTextOnInv!=0) then begin
    if (nonblank(PRp.Desc0)) then begin
      MatRowGet(IVp,rownr,IVrw);
      IVrw.Spec = PRp.Desc0;
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    if (nonblank(PRp.Desc1)) then begin
      MatRowGet(IVp,rownr,IVrw);
      IVrw.Spec = PRp.Desc1;
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    if (nonblank(PRp.Desc2)) then begin
      MatRowGet(IVp,rownr,IVrw);
      IVrw.Spec = PRp.Desc2;
      MatRowPut(IVp,rownr,IVrw);
      rownr = rownr + 1;
    end;
    rownr = rownr + 1;
  end;
LProInvHead:;
  ProInvHead = res;
  RETURN;
END;

function val PRrwStringToVal(string prrwstr,val tbbusum)
begin
  val res;
  
  if (Right(prrwstr,1)=="%") then begin
    res = (StringToVal(prrwstr,M4Val) / 100.0) * tbbusum;
  end else begin
    res = StringToVal(prrwstr,M4Val);
  end;
  
  PRrwStringToVal = res;
end;

global
updating function Integer PRDownPayInvoice(record RcVc RepSpec,var record IVVc IVr,var record PRVc PRp)
BEGIN
  record ProjectBlock PRRec;
  record PRVc oldPRr;
  record PRVc lPRr;
//  record IVVc IVr;
  record IVVc fakeIVr;
  val t,tot,rettot;
  row PRVc prrw;
  row IVVc IVrw;
  Integer i,rwcnt,prrwcnt;
  string 255 comment,tstr;
  Boolean  testf;
  Integer res,oldstyle;
  record CUVc CUr;
  record TBBUVc TBBUr;
  
  res = 0;
  BlockLoad(PRRec);
  lPRr.Code = PRp.Code;
  if (ReadFirstMain(lPRr,1,true)) then begin
    RecordCopy(oldPRr,lPRr);
    TBBUr.PRCode = lPRr.Code;
    ReadFirstMain(TBBUr,1,true);
    prrwcnt = MatRowCnt(lPRr);
    for (i=0;i<prrwcnt;i=i+1) begin
      MatRowGet(lPRr,i,prrw);
      testf = true;
      if (prrw.RowType!=0) then begin testf = false; end;
      if (prrw.InvFlag!=2) then begin
        if (IsMAINTENANCE==false) then begin
          if (prrw.PlanDate>CurrentDate) then begin testf = false; end;
        end else begin
          if (nonblankdate(RepSpec.d1))  then begin
            if (prrw.PlanDate>RepSpec.d1) then begin testf = false; end;
          end else begin
            if (prrw.PlanDate>CurrentDate) then begin testf = false; end;
          end;
        end;
      end;
      if (testf) then begin
        switch (prrw.InvFlag) begin
          case 0:
            tot = tot + PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
            comment = prrw.Comment;
          case 1:
            tot = tot + PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
          case 2:
//            if (prrw.InvNr==-1) then begin
              if (IsMAINTENANCE==false) then begin
                if (prrw.PlanDate>CurrentDate) then begin 
                  if (prrw.InvNr==-1) then begin
                    rettot = rettot + PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
                  end;
                end else begin
                  if (prrw.InvNr!=-1) then begin
                    rettot = rettot - PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
                  end;
                end;
              end else begin
                if (nonblankdate(RepSpec.d1))  then begin
                  if (prrw.PlanDate>RepSpec.d1) then begin
                    if (prrw.InvNr==-1) then begin
                      rettot = rettot + PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
                    end;
                  end else begin
                    if (prrw.InvNr!=-1) then begin
                      rettot = rettot - PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
                    end;
                  end;
                end else begin
                  if (prrw.PlanDate>CurrentDate) then begin
                    if (prrw.InvNr==-1) then begin
                      rettot = rettot + PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
                    end;
                  end else begin
                    if (prrw.InvNr!=-1) then begin
                      rettot = rettot - PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
                    end;
                  end;
                end;
              end;
              rettot = rettot + PRrwStringToVal(prrw.ValStr,TBBUr.TotSum);
//            end;
        end;
      end;
    end;
    tot = tot - lPRr.DownPaySent;
    if (tot>0) then begin
      res = 1;
      res = ProInvHead(IVr,lPRr);
      if (res!=0) then begin
        goto LPRDownPayInvoice;
      end;
      IVr.InvType = kInvoiceTypeDownpayment;
      rwcnt = MatRowCnt(IVr);
      ClearRow(IVr,IVrw,1);
      IVrw.Spec = " ";
      MatRowPut(IVr,rwcnt,IVrw);
      ClearRow(IVr,IVrw,5);
      IVrw.Sum = tot;
      IVrw.ArtCode = PRRec.Item;
/*      
      if (TypeOfCurncy(IVr.CurncyCode,oldstyle)) then begin
        IVrw.Sum = DivRateToBase1(IVr.CurncyCode,tot,IVr.FrRate,IVr.ToRateB1,IVr.ToRateB2,IVr.BaseRate1,IVr.BaseRate2,DefaultCurRoundOff);
//why ?         
      end else begin
        IVrw.Sum = tot;
      end;
*/      
      GetItemSalesAcc(PRRec.Item,IVr.ExportFlag,tstr);
      IVrw.SalesAcc = tstr;
      GetItemVATCode(PRRec.Item,IVr.ExportFlag,tstr,true);
      IVrw.VATCode = tstr;
      if (nonblank(IVr.CustVATCode)) then begin
        IVrw.VATCode = IVr.CustVATCode;
      end;
// Do not add any vat calculating.
      IVrw.Spec = comment;
      MatRowPut(IVr,rwcnt+1,IVrw);
      rwcnt = rwcnt + 1;
      if (rettot>0) then begin
        ClearRow(IVr,IVrw,12);
        if (rettot>tot) then begin
          rettot = tot;
        end;
        IVrw.Sum = rettot;
        GetItemSalesAcc(PRRec.RetentionItem,IVr.ExportFlag,tstr);
        IVrw.SalesAcc = tstr;
        GetItemVATCode(PRRec.RetentionItem,IVr.ExportFlag,tstr,true);
        IVrw.VATCode = tstr;
        if (nonblank(IVr.CustVATCode)) then begin
          IVrw.VATCode = IVr.CustVATCode;
        end;
        IVrw.Spec = comment;
        MatRowPut(IVr,rwcnt+1,IVrw);
        rwcnt = rwcnt + 1;
      end;
      IVSumup(IVr,true);
      if (IVr.Sum4!=0) then begin
        CUr.Code = PRp.CustCode;
        if (ReadFirstMain(CUr,1,true)) then begin end;
//        IVr.OfficialSerNr = FindNextLegalSerNr(IVr,CUr.Classification);// POSN
        if (RecordStore(IVr,false)) then begin end;
        for (i=0;i<prrwcnt;i=i+1) begin
          MatRowGet(lPRr,i,prrw);
          if ((prrw.InvNr==-1) and (prrw.InvFlag==0)) then begin
            testf = true;
            if (IsMAINTENANCE==false) then begin
              if (prrw.PlanDate>CurrentDate) then begin testf = false; end;
            end else begin
              if (nonblankdate(RepSpec.d1))  then begin
                if (prrw.PlanDate>RepSpec.d1) then begin testf = false; end;
              end else begin
                if (prrw.PlanDate>CurrentDate) then begin testf = false; end;
              end;
            end;
            if (testf) then begin
              prrw.InvNr = IVr.SerNr;
              if (blank(prrw.Person)) then begin
                prrw.Person = CurrentUser;
              end;
              MatRowPut(lPRr,i,prrw);
            end;
          end;
        end;
        UpdatePRRetRow(lPRr,IVr.SerNr,rettot,false);
      end;
    end;
    if (RecordUpdate(oldPRr,lPRr,false)==0) then begin
    end;

    testf = false;
    if (nonblank(CUr.InvoiceToCode)) then begin
      CUr.Code = CUr.InvoiceToCode;
      if (ReadFirstMain(CUr,1,true)) then begin
      end;
    end;
    if (PRp.CurncyCode!=CUr.CurncyCode) then begin
      testf = true;
    end;
    if (testf) then begin
      i = TypeOfCurncy(CUr.CurncyCode,oldstyle);
      if ((i==0) or (i==2)) then begin
        IVr.CurncyCode = CUr.CurncyCode;
        RecalcProjectInvoice(IVr,PRp.CurncyCode);
      end;
    end;

    UpdatePRFromIV(IVr,true,fakeIVr,false);
  end;
LPRDownPayInvoice:;  
  PRDownPayInvoice = res;
  RETURN;
END;

global
updating function Integer RecordAction_raProDownPay(record RcVc RepSpec,var record IVVc IVr,var record PRVc PRr)
BEGIN
  Integer r;
  
  if (ReadFirstMain(PRr,0,true)) then begin end;  
  r = PRDownPayInvoice(RepSpec,IVr,PRr);
  RecordAction_raProDownPay = r;
  RETURN;
END;

global
updating function LongInt MailFromActDsmRemote(record ActVc Actr,var record MailVc Mailr,string pdfform)
BEGIN
  LongInt res;
  row ActVc Actrw;
  row MailVc marw;
  record CUVc ContactCUr;
  record CUVc CUr;
  Integer i,rwcnt,line,curcomp;
  string 255 tstr;
  string 255 docname,fname;
  record ConfVc Confr;
  string 255 mailboxnr;


  if (IsRecordLocked(Actr)==false) then begin

    RecordNew(Mailr);
    FindUserMailboxName(CurrentUser,mailboxnr,tstr);
    ClearRow(Mailr,marw,1);
    marw.RowTyp = 1;
    marw.AddrCode = tstr;
    MatRowPut(Mailr,0,marw);
    
    tstr = "";
    if (FindCustomerRelation(Actr.CUCode,Actr.Contact,ContactCUr)) then begin
      tstr = ContactCUr.eMail;
    end else begin
      CUr.Code = Actr.CUCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        tstr = CUr.eMail;
      end;
    end;
    if (AddEMailRecipients(Mailr,CUr.Code,tstr,kMailActivity)==true) then begin 
    end;
    
    GetMailFormattingSettings(Mailr,Confr);
    if (Confr.SerNr>0) then begin
      Mailr.HtmlFlag = Confr.DefaultHtmlFlag;
    end;
    
    Mailr.Header = Actr.Comment;
    rwcnt = MatRowCnt(Actr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Actr,i,Actrw);
      LineTextPut(Mailr,line,Actrw.Text);
      line = line + 1;
    end;
    curcomp = CurrentCompany;
    if (RecordStore(Mailr,false)) then begin
      CreateRecordLink(Actr,curcomp,Mailr,curcomp);  
      CreateRecordLink(Mailr,curcomp,Actr,curcomp);  
    end;

    if (ActVc_ShouldAttachPdfToEMail(Actr)) then begin
      docname = pdfform;
      if (blank(docname)) then begin
        docname = "ActDocForm";
      end;
      fname = "tmp/" & USetStr(1845) & " " & Actr.SerNr & ".pdf";
      SetDocumentFilename(fname);
      SetMedia(mtPdf);
      PrintDocument(Actr,docname,false);
      if (FileExists(fname)) then begin
        RecordLinkFile(fname,0,Mailr,CurrentCompany);
      end;
      SetDocumentFilename("");
      Delete_File(fname);
    end;

    res = 0;
  end;
  MailFromActDsmRemote = res;
  RETURN;
END;

procedure TextMailToEMailQue(record MailVc Mailp,record EMailQueVc EMailQuep)
BEGIN
  string 255 tstr;
  Integer pos,textsize;

  textsize = SizeTextCnt(Mailp);
  while (pos<textsize) begin
    tstr = StringFromText(Mailp,pos,255);
    pos = pos + len(tstr);
    if (len(tstr)==0) then begin
      pos = pos + 1;
    end;
    AddToText(tstr,EMailQuep);
  end;
  RETURN;
END;

updating procedure CopyMailFilesToEMailQue(record MailVc Mailp,record EMailQueVc EMailQuep)
BEGIN
  Integer notenr;
  record RLinkVc RLinkr;
  record Attach2Vc Attachr;
  
  notenr = 1;
  while (ReadRecordLink(Mailp,notenr,Attachr,RLinkr)) begin
    CreateRecordLink(EMailQuep,CurrentCompany,Attachr,CurrentCompany);
    notenr = notenr + 1;
  end;
  RETURN;
END;

function Boolean CheckAttachedFilesSize(record MailVc Mailp)
BEGIN
  Boolean res;
  Integer notenr;
  record RLinkVc RLinkr;
  record Attach2Vc Attachr;
  record EmailBlock emailblock;
  
  res = true;
  BlockLoad(emailblock);
  if (emailblock.MaxFileSize<=0) then begin
    goto LCheckAttachedFilesSize;
  end;    
  notenr = 1;
  while (ReadRecordLink(Mailp,notenr,Attachr,RLinkr)) begin
    if (ReadFirstMain(Attachr,0,true)) begin
      if ((nonblank(Attachr.FileName)) and (Attachr.Uploading==0)) then begin
        if (Attachr.FileSize>emailblock.MaxFileSize) then begin
          res = false;
          goto LCheckAttachedFilesSize;
        end;
      end;
    end;
    notenr = notenr + 1;
  end;
LCheckAttachedFilesSize:;  
  CheckAttachedFilesSize = res;
  RETURN;
END;

global
function Boolean TestMailToEMailQue(record MailVc Mailr)
begin
  Boolean res;
  
  if (IsRecordLocked(Mailr)==false and CheckAttachedFilesSize(Mailr)) then begin
    res = true;
  end;
  TestMailToEMailQue = res;
  return;
end;

global
updating function Boolean RecordAction_raEMailQue(var record MailVc Mailp,Boolean readf)
BEGIN
  Boolean res;
  record EMailQueVc EMailQuer;
  row MailVc Mailrw;
  row EMailQueVc EMailQuerw;
  Integer i,rwcnt;
  Boolean esent;
  
  if (IsRecordLocked(Mailp)) then begin goto LRecordAction_raEMailQue;; end;
  if (readf) then begin
    if (ReadFirstMain(Mailp,0,true)) then begin end;  
  end;
  if (CheckAttachedFilesSize(Mailp)==false) then begin goto LRecordAction_raEMailQue; end;
  RecordNew(EMailQuer);
  rwcnt = MatRowCnt(Mailp);
  for (i=0;i<rwcnt;i=i+1)  begin
    MatRowGet(Mailp,i,Mailrw);
    if ((Mailrw.RowTyp==0) or (Mailrw.RowTyp==3) or (Mailrw.RowTyp==4)) then begin
      if (InterNetAddrTest(Mailrw.AddrCode)) then begin
        esent = true;
      end;
    end;
    ClearRow(EMailQuer,EMailQuerw,0);
    EMailQuerw.RowTyp = Mailrw.RowTyp;
    EMailQuerw.AddrCode = Mailrw.AddrCode;
    MatRowPut(EMailQuer,i,EMailQuerw);
  end;
  if (esent) then begin
    TextMailToEMailQue(Mailp,EMailQuer);
    EMailQuer.SerNr = Mailp.SerNr;
    EMailQuer.OrgSerNr = Mailp.SerNr;
    EMailQuer.FileName = "MailVc";
    EMailQuer.Header = Mailp.Header;
    EMailQuer.MessageID = Mailp.MessageID;
    EMailQuer.TransDate = Mailp.TransDate;
    EMailQuer.TransTime = Mailp.TransTime;
    EMailQuer.HasFileAtt = Mailp.HasFileAtt;
    EMailQuer.HasRecAtt = Mailp.HasRecAtt;
    EMailQuer.Priority = Mailp.Priority;
    EMailQuer.EMailSent = 0;
    EMailQuer.Lifespan = 0;
    EMailQuer.QueDate = CurrentDate;
    EMailQuer.QueTime = CurrentTime;
    EMailQuer.HtmlFlag = Mailp.HtmlFlag;
    EMailQuer.HtmlTemplate = Mailp.HtmlTemplate;
    if (RecordInsert(EMailQuer,false)) then begin 
      SetReadFlagHal(Mailp.SerNr,5);
//      CopyRecordLinks(Mailp,EMailQuer); 
//this one copies all links including archive links so email 
//que pops up in archive window and one can read all emailques records....
//only think we need really is files
      CopyMailFilesToEMailQue(Mailp,EMailQuer);
    end;
    res = true;
  end;
LRecordAction_raEMailQue:;  
  RecordAction_raEMailQue = res;
  RETURN;
END;

function Boolean CheckAttachedFilesSizeLocal(record LocalMailVc LocalMailp)
BEGIN
  Boolean res;
  Integer notenr;
  record RLinkVc RLinkr;
  record Attach2Vc Attachr;
  record EmailBlock emailblock;
  
  res = true;
  BlockLoad(emailblock);
  if (emailblock.MaxFileSize<=0) then begin
    goto LCheckAttachedFilesSizeLocal;
  end;    
  notenr = 1;
  while (ReadRecordLink(LocalMailp,notenr,Attachr,RLinkr)) begin
    if (ReadFirstMain(Attachr,0,true)) begin
      if ((nonblank(Attachr.FileName)) and (Attachr.Uploading==0)) then begin
        if (Attachr.FileSize>emailblock.MaxFileSize) then begin
          res = false;
          goto LCheckAttachedFilesSizeLocal;
        end;
      end;
    end;
    notenr = notenr + 1;
  end;
LCheckAttachedFilesSizeLocal:;  
  CheckAttachedFilesSizeLocal = res;
  RETURN;
END;

global
updating function Boolean RecordAction_raEMailQueLocalMail(var record LocalMailVc LocalMailp)
BEGIN
  Boolean res;
  record EMailQueVc EMailQuer;
  row LocalMailVc LocalMailrw;
  row EMailQueVc EMailQuerw;
  Integer i,rwcnt;
  Boolean esent;
  
  if (IsRecordLocked(LocalMailp)) then begin goto LRecordAction_raEMailQueLocalMail;; end;
  if (ReadFirstMain(LocalMailp,0,true)) then begin end;  
  if (CheckAttachedFilesSize(LocalMailp)==false) then begin goto LRecordAction_raEMailQueLocalMail; end;
  RecordNew(EMailQuer);
  rwcnt = MatRowCnt(LocalMailp);
  for (i=0;i<rwcnt;i=i+1)  begin
    MatRowGet(LocalMailp,i,LocalMailrw);
    if (LocalMailrw.RowTyp==0) then begin
      if (InterNetAddrTest(LocalMailrw.AddrCode)) then begin
        esent = true;
      end;
    end;
    ClearRow(EMailQuer,EMailQuerw,0);
    EMailQuerw.RowTyp = LocalMailrw.RowTyp;
    EMailQuerw.AddrCode = LocalMailrw.AddrCode;
    MatRowPut(EMailQuer,i,EMailQuerw);
  end;
  if (esent) then begin
    TextMailToEMailQue(LocalMailp,EMailQuer);
    EMailQuer.SerNr = LocalMailp.SerNr;
    EMailQuer.OrgSerNr = LocalMailp.SerNr;
    EMailQuer.FileName = "LocalMailVc";
    EMailQuer.Header = LocalMailp.Header;
    EMailQuer.MessageID = LocalMailp.MessageID;
    EMailQuer.TransDate = LocalMailp.TransDate;
    EMailQuer.TransTime = LocalMailp.TransTime;
    EMailQuer.HasFileAtt = LocalMailp.HasFileAtt;
    EMailQuer.HasRecAtt = LocalMailp.HasRecAtt;
    EMailQuer.Priority = LocalMailp.Priority;
    EMailQuer.EMailSent = 0;
    EMailQuer.Lifespan = 0;
    EMailQuer.QueDate = CurrentDate;
    EMailQuer.QueTime = CurrentTime;
    if (RecordInsert(EMailQuer,false)) then begin 
      SetReadFlagHal(LocalMailp.SerNr,5);
      CopyRecordLinks(LocalMailp,EMailQuer);
    end;
    res = true;
  end;
LRecordAction_raEMailQueLocalMail:;  
  RecordAction_raEMailQueLocalMail = res;
  RETURN;
END;

global
procedure GetCustEmail(record CUVc CUr,var string emailaddr)
begin
  record CUVc ContactCUr;

  emailaddr = CUr.eMail;
  if (InterNetAddrTest(emailaddr)==false) then begin
    emailaddr = "";
  end;
  if (blank(emailaddr)) then begin
    if (FindCustomerRelation(CUr.Code,CUr.Person,ContactCUr)) then begin
      emailaddr = ContactCUr.eMail;
    end;  
  end;
  if (InterNetAddrTest(emailaddr)==false) then begin
    emailaddr = "";
  end;
  return;
end;

procedure AddMailTextToLet(record MailVc Mailr,var record LetVc Letr)
begin
  Integer i,rwcnt;
  string 255 tstr;
  
  if (Mailr.HtmlFlag==0) then begin
    rwcnt = LineTextCnt(Mailr);
    for (i=0;i<rwcnt;i=i+1) begin
      tstr = LineTextGet(Mailr,i);
      LineTextPut(Letr,LineTextCnt(Letr),tstr);
    end;    
    AddCRToText(Letr);
  end else begin
    AddHtmlRecordToText(Mailr,Letr);
  end;
end;

global
updating function LongInt LetFromActDsmRemote(record ActVc Actr,var record LetVc Letr,Boolean quotef)
BEGIN
  LongInt res;
  row ActVc Actrw;
  record CUVc ContactCUr;
  record CUVc CUr;
  record MailVc Mailr;
  record RLinkVc RLr;
  Integer i,rwcnt,line,curcomp;
  string 255 tstr;
  
  if (IsRecordLocked(Actr)==false) then begin
    RecordNew(Letr);    
    Letr.CustCode = Actr.CUCode;
    Letr.Name = Actr.CUName;
    Letr.Contact = Actr.Contact;    
    Letr.Header = Actr.Comment;
    rwcnt = MatRowCnt(Actr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(Actr,i,Actrw);
      LineTextPut(Letr,line,Actrw.Text);
      line = line + 1;
    end;
    if (quotef) then begin
      if (ReadRecordLink(Actr,1,Mailr,RLr)) then begin
        AddMailTextToLet(Mailr,Letr);
      end;
    end;
    curcomp = CurrentCompany;
    if (RecordStore(Letr,false)) then begin
      CreateRecordLink(Actr,curcomp,Letr,curcomp);  
      CreateRecordLink(Letr,curcomp,Actr,curcomp);  
    end;
    res = 0;
  end;
  LetFromActDsmRemote = res;
  RETURN;
END;
