external procedure GetCustomsDeclarationNumber(string,LongInt,LongInt,string,string,Integer,var string);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external updating procedure UpdateWSIVFromRet(record RetVc);
external updating procedure ARPayAdd2(record IPVc,row IPVc,val,Boolean,Boolean);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external updating procedure UpdateOrderFromProj(record TBIVVc,Boolean);
external updating procedure UpdateBuyBackFromSH(record SHVc);
external function string 255 FindTaxAuthID(string,record IVVc);
external function string 255 FindTaxAuthIDControlCode(string,record IVVc);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external updating procedure IVUpdateSerialNr(record IVVc,Boolean,Boolean);
external updating procedure IVUpdateItemHist(record IVVc);
external updating procedure CreateCOIVFromOrd(record ORVc,record IVVc);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function val FindVAT(string,val,Integer,Integer);
external updating procedure StoreInShopBask(Integer,LongInt,String,String,Val,Val,Val,String,String,LongInt,String,Boolean,string,string,longint,string,val,val,val,val,val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external updating procedure SalesmanStats(record IVVc,record IVVc,Boolean);
external updating procedure IVUpdateStock(record IVVc,Boolean);
external updating procedure InvOK(record IVVc,Boolean,Boolean);
external procedure GetCurUser(var record UserVc);
external procedure SetORFlags(record ORVc);
external updating procedure ARAdd1(record IVVc,LongInt,val,Date,Date,Date,Boolean,Boolean,Boolean);
external function val CalcItemRepa(val,val,val,var string,val,val,val,val,val,roundmode);

procedure InvDownPaySum(record IVVc IVp,var val possump,var val negsump,var val pretsump,var val nretsump,var Boolean invt,Boolean addvat,Boolean mulrate)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  val pt,nt,prt,nrt;
  record PDVc PDr;
  val vatv,t1;
  roundmode roundlines,rndtotal,rndvat;
    
  invt = true;
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin
      if (IVrw.Sum>=0) then begin
        if (mulrate) then begin
          pt = pt + Round(MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff),SetRoundModeD(0));
        end else begin
          pt = pt + IVrw.Sum;
        end;
        if (addvat) then begin
          if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
            if (IVp.InclVAT==0) then begin//vat as in OnSaveInvoice
              MulVATIV(IVrw.VATCode,IVrw.Sum,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
              pt = pt + vatv + t1;
            end;
          end;
        end;
      end else begin
        if (mulrate) then begin
          nt = nt + Round(MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff),SetRoundModeD(0));
        end else begin
          nt = nt + IVrw.Sum;
        end;
        if (addvat) then begin
          if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
            if (IVp.InclVAT==0) then begin//vat as in OnSaveInvoice
              MulVATIV(IVrw.VATCode,IVrw.Sum,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
              nt = nt + vatv + t1;
            end;
          end;
        end;
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeRetention) then begin
      if (IVrw.Sum>=0) then begin
        prt = prt + IVrw.Sum;
      end else begin
        nrt = nrt + IVrw.Sum;
      end;
/*    
      if (mulrate) then begin
        prt = prt + Round(MulRateToBase1(IVp.CurncyCode,IVrw.Sum + FindVAT(IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT),IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff),SetRoundModeD(0));
      end else begin
        prt = prt + IVrw.Sum + FindVAT(IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
      end;
      prt = prt + IVrw.Sum;
      if (addvat) then begin
        if (IVp.InclVAT==0) then begin//vat as in OnSaveInvoice
          MulVATIV(IVrw.VATCode,IVrw.Sum,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);
          prt = prt + vatv + t1;
        end;
      end;
*/      
    end;
  end;
  /*Have to find PDType == 3, since both
  the On Account and the credit of On Account will be InvType 6
I think it is not true
  */
  GetCurncyRoundoff(IVp.CurncyCode,IVp.PayDeal,"IVVc",rndtotal,roundlines,rndvat);
  pt = Round(pt,rndtotal); 
  nt = Round(nt,rndtotal);   
  if (IVp.InvType==kInvoiceTypeDownpayment) then begin
    PDr.Code = IVp.PayDeal; 
    if (ReadFirstMain(PDr,1,true)) then begin
      if (PDr.PDType==kInvoiceTypeCredit) then begin 
        pt = -pt;
        nt = -nt;
        prt = -prt;
        nrt = -nrt;
        invt = false;
      end;
    end;
  end;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    pt = -pt;
    nt = -nt;
    prt = -prt;
    nrt = -nrt;
//    invt = false; why not updating downpayment from credit note ? how to update downpayed amount on order or project then ? 
  end;
  possump = possump + pt;
  negsump = negsump + nt;
  pretsump = pretsump + prt;
  nretsump = nretsump + nrt;
  return;
end;

procedure UpdateOrderRowsFromInv(record ORVc ORr,record IVVc IVp,Boolean negf)
BEGIN
  Integer orcnt,ivcnt,i;
  row ORVc ORrw;
  row IVVc IVrw;
  record OrdSettBlock OSb;
  
  BlockLoad(OSb);  
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    if (OSb.CredIVUpdateOR==0) then begin
      goto LUpdateOrderRowsFromInv;
    end;
  end;
  if (nonblank(ORr.PRCode)) then begin
    goto LUpdateOrderRowsFromInv;
  end;
  orcnt = MatRowCnt(ORr);
  ivcnt = MatRowCnt(IVp);
  for (i=0;i<ivcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.OrdRow==-1) then begin goto L11UpdateOrderRowsFromInv; end;
    if (IVrw.OrdRow<orcnt) then begin
      MatRowGet(ORr,IVrw.OrdRow,ORrw);
      if ((IVrw.stp==kInvoiceRowTypeNormal or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent)) and (IVrw.ArtCode==ORrw.ArtCode)) then begin
        if (negf) then begin
          if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
            ORrw.Invd = ORrw.Invd + IVrw.Quant;
/*            
            if (IVp.OKFlag!=0) and (IVp.UpdStockFlag!=0) then begin
              if (IVrw.NotUpdStockFlag==0) then begin
                ORrw.Shipd1 = ORrw.Shipd1 + IVrw.Quant;
                ORrw.Shipd2 = ORrw.Shipd2 + IVrw.Quant;
              end;
            end;
*/
          end else begin
            ORrw.Invd = ORrw.Invd - IVrw.Quant;
          end;
        end else begin
          if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
            ORrw.Invd = ORrw.Invd - IVrw.Quant;
            if (IVp.OKFlag!=0) and (IVp.UpdStockFlag!=0) then begin
              if (IVrw.NotUpdStockFlag==0) then begin
                ORrw.Shipd1 = ORrw.Shipd1 - IVrw.Quant;
                ORrw.Shipd2 = ORrw.Shipd2 - IVrw.Quant;
              end;
            end;
          end else begin
            ORrw.Invd = ORrw.Invd + IVrw.Quant;
          end;
        end;
        if (ORrw.Invd==0) then begin
          ORrw.Invd = BlankVal;
        end;
        if (ORrw.Shipd2==0) then begin
          ORrw.Shipd2 = BlankVal;
        end;
        MatRowPut(ORr,IVrw.OrdRow,ORrw);
      end;    
      if ((IVrw.stp==kInvoiceRowTypeCorrection) and (IVrw.ArtCode==ORrw.ArtCode)) then begin
        if (negf) then begin
          if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
            ORrw.Invd = ORrw.Invd - IVrw.Quant;
          end;
          if (ORrw.Invd==0) then begin
            ORrw.Invd = BlankVal;
          end;
        end else begin
          if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
            ORrw.Invd = ORrw.Invd + IVrw.Quant;
            if (IVp.OKFlag!=0) and (IVp.UpdStockFlag!=0) then begin
              if (IVrw.NotUpdStockFlag==0) then begin
                ORrw.Shipd1 = ORrw.Shipd1 + IVrw.Quant;
                ORrw.Shipd2 = ORrw.Shipd2 + IVrw.Quant;
              end;
            end;
          end;
          if (ORrw.Invd==0) then begin
            ORrw.Invd = BlankVal;
          end;
          if (ORrw.Shipd2==0) then begin
            ORrw.Shipd2 = BlankVal;
          end;
        end;
        MatRowPut(ORr,IVrw.OrdRow,ORrw);
      end;      
    end;
L11UpdateOrderRowsFromInv:;
  end;
LUpdateOrderRowsFromInv:;  
  RETURN;
END;

global
updating procedure UpdateOrderFromInvalidatedInv(record IVVc IVp)
BEGIN
  val down2payval;
  val t,prt,nrt;
  record ORVc oldORr;
  record ORVc ORr;
  Boolean invt;
  
  invt = true;
  InvDownPaySum(IVp,down2payval,t,prt,nrt,invt,true,false);
  down2payval = down2payval - t;
  ORr.SerNr = IVp.OrderNr;
  if (ReadFirstMain(ORr,1,true)) then begin
    RecordCopy(oldORr,ORr);
    ORr.DownPaySent = ORr.DownPaySent - down2payval;
//    ORr.DownPayRedcd = ORr.DownPayRedcd - down2payval;
//    UpdateOrderRowsFromInv(ORr,IVp);
    SetORFlags(ORr);
    if (RecordUpdate(oldORr,ORr,true)==0) then begin
    end;
  end;
  RETURN;
END;

updating procedure UpdateShipmentFromInv(LongInt orsernr,record IVVc IVr,Boolean negf)
BEGIN
  record SHVc SHr;
  record SHVc oldSHr;
  Boolean foundf,testf;
  record OrdSettBlock OSb;
  row IVVc IVrw;
  Integer i,rwcnt;
  
  foundf = true;
  if (IVr.SerNr<=0) then begin
    goto LUpdateShipmentFromInv;
  end;
  BlockLoad(OSb);
  if (OSb.IVBasedOnSH!=0) then begin
/*  
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.SHNr>0) then begin
      end;
    end;
*/    
  end else begin  
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.SHNr>0) and (IVrw.SHRow>=0) then begin
        goto LUpdateShipmentFromInv;
      end;
    end;
  
    if (negf) then begin
LAgainUpdateShipmentFromInv:;
      ResetLoop(SHr);
      SHr.InvoiceNr = IVr.SerNr;
      while (LoopKey("InvoiceNr",SHr,1,foundf)) begin
        if (SHr.InvoiceNr!=IVr.SerNr) then begin
          foundf = false;
        end;
        testf = foundf;
        if (SHr.OrderNr!=orsernr) then begin
          testf = false;
        end;
        if (testf) then begin
          RecordCopy(oldSHr,SHr);
          SHr.InvoiceNr = -1;
          if (RecordUpdate(oldSHr,SHr,false)) then begin
          end;
          UpdateBuyBackFromSH(SHr);
          goto LAgainUpdateShipmentFromInv;
        end;
      end;
    end else begin
      SHr.OrderNr = orsernr;
      while (LoopKey("OrderKey",SHr,1,foundf)) begin
        if (SHr.OrderNr!=orsernr) then begin
          foundf = false;
        end;
        testf = foundf;
        if (SHr.InvoiceNr>0) then begin
          testf = false;
        end;
        if (testf) then begin
          RecordCopy(oldSHr,SHr);
          SHr.InvoiceNr = IVr.SerNr;
          if (RecordUpdate(oldSHr,SHr,false)) then begin
          end;
          UpdateBuyBackFromSH(SHr);
        end;
      end;
    end;
  end;
LUpdateShipmentFromInv:;
  RETURN;
END;

updating procedure UpdateShipmentRowsFromInv(record IVVc IVp,Boolean anegf)
begin
  record SHVc SHr;
  record SHVc oldSHr;
  row SHVc SHrw;
  Boolean shfoundf;
  row IVVc IVrw;
  Integer i,rwcnt;
  Boolean negf;

  negf = anegf;
  if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
    negf = !negf;
  end;
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.SHNr>0) and (IVrw.SHRow>=0) then begin
      SHr.SerNr = IVrw.SHNr; 
      shfoundf = ReadFirstMain(SHr,1,true);
      if (shfoundf) then begin
        RecordCopy(oldSHr,SHr);
        if (IVrw.SHRow<MatRowCnt(SHr)) then begin
          MatRowGet(SHr,IVrw.SHRow,SHrw);
          if (negf) then begin
            SHrw.Invd = SHrw.Invd - IVrw.Quant;
          end else begin
            SHrw.Invd = SHrw.Invd + IVrw.Quant;
          end;
          if (SHrw.Invd==0) then begin SHrw.Invd = blankval; end;
          MatRowPut(SHr,IVrw.SHRow,SHrw);
        end;
        RecordUpdate(oldSHr,SHr,false);
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateRetFromInv(LongInt orsernr,record IVVc IVr,Boolean negf)
begin
  record RetVc Retr;
  record RetVc oldRetr;
  Boolean foundf,testf;
  row RetVc Retrw;
  row IVVc IVrw;
  Integer i,retcnt,ivcnt;

  Retr.SerNr = IVr.RetNr;
  if (ReadFirstMain(Retr,1,true)) then begin
    RecordCopy(oldRetr,Retr);
    Retr.InvoiceNr = IVr.SerNr;//only 1 !

    retcnt = MatRowCnt(Retr);
    ivcnt = MatRowCnt(IVr);
    for (i=0;i<ivcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.RetRow==-1) then begin goto LUpdateRetFromInv; end;
      if (IVrw.RetRow<retcnt) then begin
        MatRowGet(Retr,IVrw.RetRow,Retrw);
        if ((IVrw.stp==kInvoiceRowTypeNormal or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent)) and (IVrw.ArtCode==Retrw.ArtCode)) then begin
          if (negf) then begin
            Retrw.Invd = Retrw.Invd - IVrw.Quant;
          end else begin
            Retrw.Invd = Retrw.Invd + IVrw.Quant;
          end;
          MatRowPut(Retr,IVrw.RetRow,Retrw);
        end;
      end;
LUpdateRetFromInv:;
    end;
    if (RecordUpdate(oldRetr,Retr,false)==0) then begin
      UpdateWSIVFromRet(Retr);
    end;
  end;
  return;
end;

/*
global
updating procedure UpdateRetFromInv(LongInt orsernr,record IVVc IVr,LongInt ivsernr,Boolean negf)
begin
  record RetVc Retr;
  record RetVc oldRetr;
  Boolean foundf,testf;
  row RetVc Retrw;
  row IVVc IVrw;
  Integer i,rwcnt;
  Integer ri,rrwcnt;
  
  foundf = true;
  if (ivsernr<=0) then begin
    goto LUpdateRetFromInv;
  end;
  if (negf) then begin
LAgain:;
    ResetLoop(Retr);
    Retr.InvoiceNr = ivsernr;
    while (LoopKey("InvoiceNr",Retr,1,foundf)) begin
      if (Retr.InvoiceNr!=ivsernr) then begin
        foundf = false;
      end;
      testf = foundf;
      if (Retr.OrdNr!=orsernr) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordCopy(oldRetr,Retr);
        Retr.InvoiceNr = -1;
        rrwcnt = MatRowCnt(Retr);
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          for (ri=0;ri<rrwcnt;ri=ri+1) begin
            MatRowGet(Retr,ri,Retrw);
            if (IVrw.RetRow==ri) then begin
              Retrw.Invd = Retrw.Invd - IVrw.Quant;
              MatRowPut(Retr,ri,Retrw);
            end;
          end;
        end;
        if (RecordUpdate(oldRetr,Retr,false)==0) then begin
          UpdateWSIVFromRet(Retr);
        end;
        goto LAgain;
      end;
    end;
  end else begin
    Retr.OrdNr = orsernr;
    while (LoopKey("OrdNr",Retr,1,foundf)) begin
      if (Retr.OrdNr!=orsernr) then begin
        foundf = false;
      end;
      testf = foundf;
      if (Retr.InvoiceNr>0) then begin
        testf = false;
      end;
      if (testf) then begin
        RecordCopy(oldRetr,Retr);
        Retr.InvoiceNr = ivsernr;
        rrwcnt = MatRowCnt(Retr);
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          for (ri=0;ri<rrwcnt;ri=ri+1) begin
            MatRowGet(Retr,ri,Retrw);
            if (IVrw.RetRow==ri) then begin
              Retrw.Invd = Retrw.Invd + IVrw.Quant;
              MatRowPut(Retr,ri,Retrw);
            end;
          end;
        end;
        if (RecordUpdate(oldRetr,Retr,false)==0) then begin
          UpdateWSIVFromRet(Retr);
        end;
      end;
    end;
  end;
LUpdateRetFromInv:;
  return;
end;
*/

global
updating procedure UpdateSHFromInv(record IVVc IVr)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  record SHVc SHr;
  record SHVc oldSHr;
  
  if (IVr.OKFlag>0) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.SHNr>0 and IVrw.SHRow>=0) then begin
        SHr.SerNr = IVrw.SHNr;
        if (ReadFirstMain(SHr,1,true)) then begin
          RecordCopy(oldSHr,SHr);
          SHr.InvoiceNr = IVr.SerNr;
          RecordUpdate(oldSHr,SHr,false);
        end;
      end;
    end;
  end;
  return;
end;

// I rewrote the code to be way faster, but unfortunatly, it was not correct :)
// Anyway, this code should be possible to write with a LOT less reads and writes.
global
updating procedure UpdateOrderFromInv(record IVVc IVp,Boolean ivf,record IVVc IV2p,Boolean iv2f)
BEGIN
  record ORVc oldORr;
  record ORVc ORr;
  val downpaydecd,down2paydecd,prt,nrt,t;
  val downpayval;
  val down2payval;
  Integer ivcnt,i,orcnt;
  row ORVc ORrw;
  row IVVc IVrw;
  Boolean invt;
  
  invt = true;
  if (iv2f) then begin
    InvDownPaySum(IV2p,down2payval,down2paydecd,prt,nrt,invt,true,false);
  end;
  t = 0;
  if (ivf) then begin
    InvDownPaySum(IVp,downpayval,downpaydecd,prt,nrt,invt,true,false);
  end;
  if ((iv2f) and (ivf==false)) then begin
    if (IV2p.Invalid!=0) then begin
      down2payval = - down2payval;
    end;
  end;
  if (downpayval!=down2payval) or (downpaydecd!=down2paydecd) then begin
    if (ivf) then begin
      ORr.SerNr = IVp.OrderNr;
    end else begin
      ORr.SerNr = IV2p.OrderNr;
    end;
    if (ReadFirstMain(ORr,1,true)) then begin
      RecordCopy(oldORr,ORr);
      ORr.DownPaySent = ORr.DownPaySent - down2payval;
      ORr.DownPayRedcd = ORr.DownPayRedcd + down2paydecd;
      ORr.DownPaySent = ORr.DownPaySent + downpayval;
      ORr.DownPayRedcd = ORr.DownPayRedcd - downpaydecd;
      if (ORr.DownPaySent==0) then begin ORr.DownPaySent = blankval; end;
//      SetORFlags(ORr); //Downpay dont change OSFlag
      if (RecordUpdate(oldORr,ORr,false)==0) then begin
      end;
    end;
  end;
  if (iv2f) then begin
    ORr.SerNr = IV2p.OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin
      UpdateOrderRowsFromInv(ORr,IV2p,true);
      SetORFlags(ORr);
      if (RecordStore(ORr,true)) then begin
      end;
      UpdateShipmentFromInv(ORr.SerNr,IV2p,true);
      UpdateShipmentRowsFromInv(IV2p,true);
    end;
//    UpdateRetFromInv(ORr.SerNr,IV2p,true); //Done in IVVcRecrodUpdate
  end;  
  if (ivf) then begin
    ORr.SerNr = IVp.OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin
      UpdateOrderRowsFromInv(ORr,IVp,false);
      CreateCOIVFromOrd(ORr,IVp);
      SetORFlags(ORr);
      if (RecordStore(ORr,true)) then begin
      end;
      UpdateShipmentFromInv(ORr.SerNr,IVp,false);
      UpdateShipmentRowsFromInv(IVp,false);
    end;
//    UpdateRetFromInv(ORr.SerNr,IVp,false);//Done in IVVcRecrodUpdate
  end;  
  RETURN;
END;
/* Here is the rewrite...needs to be fixed to improve speed
global
updating procedure UpdateOrderFromInv(record IVVc IVp,Boolean ivf,record IVVc IV2p,Boolean iv2f)
BEGIN
  record ORVc oldORr;
  record ORVc ORr;
  val downpaydecd,down2paydecd,prt,nrt;
  val downpayval;
  val down2payval;
  Integer ivcnt,i,orcnt;
  row ORVc ORrw;
  row IVVc IVrw;
  Boolean invt;
  
  invt = true;
  if (iv2f) then begin
    InvDownPaySum(IV2p,down2payval,down2paydecd,prt,nrt,invt,true,false);
    if (ivf==false) then begin // ??
      down2payval = - down2payval;
    end;
    ORr.SerNr = IV2p.OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin
      if (downpayval!=down2payval) or (downpaydecd!=down2paydecd) then begin
        ORr.DownPaySent = ORr.DownPaySent - down2payval;
        ORr.DownPayRedcd = ORr.DownPayRedcd + down2paydecd;
        ORr.DownPaySent = ORr.DownPaySent + downpayval;
        ORr.DownPayRedcd = ORr.DownPayRedcd - downpaydecd;
      end;
      if (ORr.DownPaySent==0) then begin ORr.DownPaySent = blankval; end;
      UpdateOrderRowsFromInv(ORr,IV2p,true);
      SetORFlags(ORr);
      if (RecordStore(ORr,true)) then begin
      end;
    end;
  end;  
  if (ivf) then begin
    InvDownPaySum(IVp,downpayval,downpaydecd,prt,nrt,invt,true,false);
    if (IVp.OrderNr>0) then begin
      ORr.SerNr = IVp.OrderNr;
      if (ReadFirstMain(ORr,1,true)) then begin
        if (downpayval!=down2payval) or (downpaydecd!=down2paydecd) then begin
          ORr.DownPaySent = ORr.DownPaySent - down2payval;
          ORr.DownPayRedcd = ORr.DownPayRedcd + down2paydecd;
          ORr.DownPaySent = ORr.DownPaySent + downpayval;
          ORr.DownPayRedcd = ORr.DownPayRedcd - downpaydecd;
        end;
        if (ORr.DownPaySent==0) then begin ORr.DownPaySent = blankval; end;
        UpdateOrderRowsFromInv(ORr,IVp,false);
        CreateCOIVFromOrd(ORr,IVp);
        SetORFlags(ORr);
        if (RecordStore(ORr,true)) then begin
        end;
      end;
    end;
  end;  
LUpdateOrderFromInv:;
  RETURN;
END;
*/

global
updating procedure UpdatePRFromIV(record IVVc IVp,Boolean ivf,record IVVc IV2p,Boolean iv2f)
BEGIN
  record PRVc oldPRr;
  record PRVc PRr;
  string 255 pr1;
  string 255 pr2;
  val prsum1;
  val prnegsum1;
  val prsum2;
  val prnegsum2;
  val pt,nt,prt,nrt;
  val ptp;
  val ntp;
  val rtsum,nrtsum,rtsumprev,nrtsumprev;  
  row PRVc PRrw;
  Integer rwcnt,i;
  Boolean invt,updf;
  
  invt = true;
  if (ivf) then  begin
    if (nonblank(IVp.PRCode)) then begin
      pr1 = IVp.PRCode;
      PRr.Code = pr1;
      ReadFirstMain(PRr,1,true);
      InvDownPaySum(IVp,pt,nt,prt,nrt,invt,false,blank(PRr.CurncyCode));
      prsum1 = prsum1 + pt;
      prnegsum1 = prnegsum1 + nt;
      rtsum = rtsum + prt;
      nrtsum = nrtsum + nrt;
    end;
  end;
  if (iv2f) then begin
    if (nonblank(IV2p.PRCode)) then begin
      if (pr1==IV2p.PRCode) then begin
        ptp = prsum1;
        ntp = prnegsum1;
      end else begin
        pr2 = IV2p.PRCode;
        ptp = prsum2;
        ntp = prnegsum2;
      end;
      PRr.Code = IV2p.PRCode;
      ReadFirstMain(PRr,1,true);
      pt = blankval;
      nt = blankval;
      prt = blankval;
      nrt = blankval;
      InvDownPaySum(IV2p,pt,nt,prt,nrt,invt,false,blank(PRr.CurncyCode));
      ptp = ptp - pt;
      ntp = ntp - nt;
      rtsumprev = rtsumprev + prt;
      nrtsumprev = nrtsumprev + nrt;
      if (pr1==IV2p.PRCode) then begin
        prsum1 = ptp;
        prnegsum1 = ntp;
      end else begin
        prsum2 = ptp;
        prnegsum2 = ntp;
      end;      
    end;
  end;  
  if (nonblank(pr1)) then begin
   /* can not update DownPaySent if amount is < 0. Creates problem
    with the project. 
   */
    if (invt) then begin
      if ((prsum1!=0) or (prnegsum1!=0)) then begin
        PRr.Code = pr1;
        if (ReadFirstMain(PRr,1,true)) then begin
          RecordCopy(oldPRr,PRr);
          PRr.DownPaySent = PRr.DownPaySent + prsum1;
          PRr.DownPayRedcd = PRr.DownPayRedcd + prnegsum1;        
          if (RecordUpdate(oldPRr,PRr,false)==0) then begin
          end;        
        end;
      end;
    end;
  end;
  if (ivf) then begin
    if (IVp.OKFlag!=0) then begin updf = true; end;
  end;
  if (iv2f) then begin
    if (IV2p.OKFlag!=0) then begin updf = true; end;
  end;
  if (updf) then begin
    if ((rtsum!=0) or (nrtsum!=0)) then begin
      PRr.Code = pr1;
      if (ReadFirstMain(PRr,1,true)) then begin
        RecordCopy(oldPRr,PRr);
  /*
  ?      
        PRr.RetInvd = PRr.RetInvd + rtsum;
        if (iv2f) then begin
          if (nonblank(IV2p.PRCode)) then begin
            if (pr1==IV2p.PRCode) then begin      
              PRr.RetInvd = PRr.RetInvd - rtsum2;
            end;
          end;
        end;
  */      
        PRr.RetSum = PRr.RetSum - nrtsum;
        PRr.RetInvd = PRr.RetInvd + rtsum;
        if (PRr.RetSum==0) then begin PRr.RetSum = blankval; end;
        if (PRr.RetInvd==0) then begin PRr.RetInvd = blankval; end;
        if (RecordUpdate(oldPRr,PRr,false)==0) then begin
        end;
      end;    
    end;
  end;
  if (nonblank(pr2)) then begin
    PRr.Code = pr2;
    if (ReadFirstMain(PRr,1,true)) then begin
      RecordCopy(oldPRr,PRr);
      if ((iv2f) and (ivf==false)) then begin
        rwcnt = MatRowCnt(PRr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(PRr,i,PRrw);
          if (PRrw.InvNr==IV2p.SerNr) then begin
            PRrw.InvNr = -1;
            MatRowPut(PRr,i,PRrw);
          end;
        end;
      end;  
      PRr.DownPaySent = PRr.DownPaySent + prsum2;
      PRr.DownPayRedcd = PRr.DownPayRedcd + prnegsum2;
      if (PRr.DownPaySent==0) then begin PRr.DownPaySent = blankval; end;
      if (PRr.DownPayRedcd==0) then begin PRr.DownPayRedcd = blankval; end;

      if (IV2p.OKFlag!=0) then begin
        PRr.RetSum = PRr.RetSum + nrtsumprev;
        PRr.RetInvd = PRr.RetInvd - rtsumprev;
        if (PRr.RetSum==0) then begin PRr.RetSum = blankval; end;
        if (PRr.RetInvd==0) then begin PRr.RetInvd = blankval; end;
      end;
      if (RecordUpdate(oldPRr,PRr,false)==0) then begin
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure UpdateQTFromIV(record IVVc IVp,Boolean ivf,record IVVc IV2p,Boolean iv2f)
BEGIN
  record QTVc oldQTr;
  record QTVc QTr;
  row QTVc QTrw;
  row IVVc IVrw;
  Integer ivi,ivcnt;
  Integer qti,qtcnt;
  Date blankd;

  if (iv2f) then begin//remove,update
    if (IV2p.QTNr==-1) then begin goto LUpdateQTFromIV; end;
    QTr.SerNr = IV2p.QTNr;
    if (ReadFirstMain(QTr,1,true)==false) then begin goto LUpdateQTFromIV; end;
    RecordCopy(oldQTr,QTr);  
    qtcnt = MatRowCnt(QTr);
    for (qti=0;qti<qtcnt;qti=qti+1) begin
      MatRowGet(QTr,qti,QTrw);
      if (QTrw.Invoiced==IV2p.SerNr) then begin
        QTrw.Invoiced = -1;
        QTrw.InvDate = blankd;
        MatRowPut(QTr,qti,QTrw);
      end;
    end;
    ivcnt = MatRowCnt(IV2p);
    for (ivi=0;ivi<ivcnt;ivi=ivi+1) begin
      MatRowGet(IV2p,ivi,IVrw);
      if ((IVrw.QTRow<qtcnt) and (IVrw.QTRow>-1)) then begin
        MatRowGet(QTr,IVrw.QTRow,QTrw);
        if (IV2p.InvType==kInvoiceTypeCredit or IV2p.InvType==kInvoiceTypeCreditSpecialSales) then begin
          QTrw.Invd = QTrw.Invd + IVrw.Quant;
        end else begin
          QTrw.Invd = QTrw.Invd - IVrw.Quant;
        end;
        if (QTrw.Invd==0) then begin QTrw.Invd = BlankVal; end;
        MatRowPut(QTr,IVrw.QTRow,QTrw);
      end;
    end;
    if (RecordUpdate(oldQTr,QTr,false)==0) then begin
    end;
  end;
  if (ivf) then begin//save,import,update
    if (IVp.QTNr==-1) then begin goto LUpdateQTFromIV; end;
    QTr.SerNr = IVp.QTNr;
    if (ReadFirstMain(QTr,1,true)==false) then begin goto LUpdateQTFromIV; end;
    RecordCopy(oldQTr,QTr);  
    qtcnt = MatRowCnt(QTr);
    ivcnt = MatRowCnt(IVp);
    for (ivi=0;ivi<ivcnt;ivi=ivi+1) begin
      MatRowGet(IVp,ivi,IVrw);
      if ((IVrw.QTRow<qtcnt) and (IVrw.QTRow>-1)) then begin
        MatRowGet(QTr,IVrw.QTRow,QTrw);
        QTrw.Invoiced = IVp.SerNr;
        QTrw.InvDate = IVp.InvDate;
        if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
          QTrw.Invd = QTrw.Invd - IVrw.Quant;
        end else begin
          QTrw.Invd = QTrw.Invd + IVrw.Quant;
        end;
        if (QTrw.Invd==0) then begin QTrw.Invd = BlankVal; end;
        MatRowPut(QTr,IVrw.QTRow,QTrw);
      end;
    end;
    if (RecordUpdate(oldQTr,QTr,false)==0) then begin
    end;
  end;
LUpdateQTFromIV:;
  RETURN;
END;

global
updating procedure UpdateJobFromIV(record IVVc IVp,Boolean ivf,record IVVc IV2p,Boolean iv2f)
BEGIN
  record ShopBaskVc oldShopBaskr;
  record ShopBaskVc ShopBaskr;
  record DownPayBlock DPb;
  row IVVc IVrw;
  Boolean foundf;
  Integer rwcnt,i;
  val thesum;

  BlockLoad(DPb);
  if (iv2f) then begin//remove,update
    if (IV2p.JobNr==-1) then begin goto LUpdateJobFromIV; end;
    rwcnt = MatRowCnt(IV2p);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IV2p,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin
        switch (IV2p.InclVAT) begin
          case 0:
            thesum = -Round((IVrw.Sum + FindVAT(IVrw.VATCode,IVrw.Sum,IV2p.InclVAT,IV2p.NoTAXonVAT)),DefaultRoundMode);
          otherwise
            thesum = -Round(IVrw.Sum,DefaultRoundMode);
        end;
        if (IV2p.InvType==kInvoiceTypeCredit or IV2p.InvType==kInvoiceTypeCreditSpecialSales) then begin
          thesum = -thesum;
        end;
        i = rwcnt;
      end;
    end;

    foundf = true;
    ShopBaskr.Owner = kShopBaskOwnerReservation;
    ShopBaskr.OwnerSerNr = IV2p.JobNr;
    while (LoopKey("OwnerSerNr",ShopBaskr,2,foundf)) begin
      if ((ShopBaskr.OwnerSerNr!=IV2p.JobNr) or (ShopBaskr.Owner!=kShopBaskOwnerReservation)) then begin
        foundf = false;
      end;
      if ((ShopBaskr.CUCode==IV2p.CustCode) and (ShopBaskr.Price==thesum) and (ShopBaskr.ItemCode==DPb.ArtCode)) then begin
        RecordDelete(ShopBaskr);
        foundf = false;
      end;
    end;
  end;
  if (ivf) then begin//save,import,update
    if (IVp.JobNr==-1) then begin goto LUpdateJobFromIV; end;
    rwcnt = MatRowCnt(IVp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin      
        switch (IVp.InclVAT) begin
          case 0:
            thesum = -Round(IVrw.Sum+FindVAT(IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT),DefaultRoundMode);
          otherwise
            thesum = -Round(IVrw.Sum,DefaultRoundMode);
        end;
        if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
          thesum = -thesum;
        end;
        StoreInShopBask(1,IVp.JobNr,DPb.ArtCode,IVrw.Spec,1,thesum,blankval,IVp.CustCode,"",IVp.SerNr,"",false,"","",IVrw.CUPNr,IVp.CurncyCode,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2);
      end;
    end;
  end;
LUpdateJobFromIV:;
  RETURN;
END;

global
updating procedure PRInvoiceRemoved(record IVVc IVp)
BEGIN
  record TBIVVc oldTBIVr;
  record TBIVVc TBIVr;
  record XSVc XSr;
  record ORVc oldORr;
  record ORVc ORr;
  row XSVc XSrw;
  row ORVc ORrw;
  record TBBUVc oldTBBUr;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Boolean found,save;
  Integer rwcnt,i;
  Date bd;
  
  TBIVr.Invoice = IVp.SerNr;
  found = true;
  while (LoopKey("InvKey",TBIVr,1,found)) begin
    RecordCopy(oldTBIVr,TBIVr);
    if (TBIVr.Invoice!=IVp.SerNr) then begin
      found = false;
    end;
    if (found) then begin
      UpdateOrderFromProj(TBIVr,true);
      TBIVr.Invoice = -1;
      TBIVr.InvDate = bd;
      if (RecordUpdate(oldTBIVr,TBIVr,true)==0) then begin
      end;
    end;
  end;
  XSr.FileName = "IVVc";
  XSr.SerNr = IVp.SerNr;
  if (ReadFirstMain(XSr,2,true)) then begin
    rwcnt = MatRowCnt(XSr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(XSr,i,XSrw);
      if (XSrw.FromFileName=="ORVc") then begin
        ORr.SerNr = XSrw.xSerNr;
        if (ReadFirstMain(ORr,1,true)) then begin
          RecordCopy(oldORr,ORr);
          MatRowGet(ORr,XSrw.Row,ORrw);
          ORrw.Invd = ORrw.Invd - XSrw.Qty;
          MatRowPut(ORr,XSrw.Row,ORrw);
          SetORFlags(ORr);
          if (RecordUpdate(oldORr,ORr,true)==0) then begin
          end;
        end;
      end;
    end;
    RecordDelete(XSr);
  end;
  TBBUr.PRCode = IVp.PRCode;
  save = false;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    RecordCopy(oldTBBUr,TBBUr);
    rwcnt = MatRowCnt(TBBUr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBBUr,i,TBBUrw);
      if (TBBUrw.Invoiced==IVp.SerNr) then begin
        save = true;
        TBBUrw.Invoiced = -1;
        TBBUrw.InvDate = bd;
        MatRowPut(TBBUr,i,TBBUrw);
      end;
    end;
    if (save) then begin
      if (RecordUpdate(oldTBBUr,TBBUr,true)==0) then begin
      end;
    end;
  end;
  RETURN;
END;

// Moved to COTool.hal

global
updating procedure DeleteRentIVs(LongInt ivnr)
BEGIN
  Boolean TrHs;
  record RentChrgVc RentChrg;
  record RentChrgVc oldRentChrg;

  TrHs = true;
  RentChrg.InvNr = ivnr;
  while (LoopKey("FillUpCharge",RentChrg,1,TrHs)) begin
    if (RentChrg.InvNr <> ivnr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin 
      RecordCopy(oldRentChrg,RentChrg);
      RentChrg.InvNr = -1;
      if (RecordUpdate(oldRentChrg,RentChrg,false)==0) then begin
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure UpdateTBIVFromCredInv(record IVVc IVp)
BEGIN
  record IVVc orgIVr;
  record XSVc XSr;
  record TBIVVc TBIVr;
  record TBIVVc oldTBIVr;
  record ProjectBlock PRRec;
  record TBBUVc TBr;
  record TBBUVc oldTBr;
  row TBBUVc TBrw;
  Boolean found;
  Date blankd;
  Integer i,rwcnt;
  Boolean save;
  
  orgIVr.SerNr = IVp.CredInv;
  if (ReadFirstMain(orgIVr,1,true)) then begin 
    if (orgIVr.Sum4!=IVp.Sum4) then begin 
      goto LUpdateTBIVFromCredInv;
    end;
  end; 
  BlockLoad(PRRec);
  if (PRRec.CredInvUpdTBIV!=0) then begin
    TBIVr.Invoice = IVp.CredInv;
    found = true;
    while (LoopKey("InvKey",TBIVr,1,found)) begin
      if (TBIVr.Invoice!=IVp.CredInv) then begin found = false; end;
      if (found) then begin
        RecordCopy(oldTBIVr,TBIVr);
        TBIVr.Invoice = -1;
        TBIVr.InvDate = blankd;
        if (RecordUpdate(oldTBIVr,TBIVr,true)==0) then begin
        end;
        XSr.FileName = "IVVc";
        XSr.SerNr = IVp.CredInv;
        if (ReadFirstMain(XSr,0,true)) then begin
          RecordDelete(XSr);   
        end;
      end;
    end;
  end;
  TBr.PRCode = IVp.PRCode;
  save = false;
  if (ReadFirstMain(TBr,1,true)) then begin
    RecordCopy(oldTBr,TBr);
    rwcnt = MatRowCnt(TBr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(TBr,i,TBrw);
      if (TBrw.Invoiced == IVp.CredInv) then begin
        save = true;
        TBrw.Invoiced = -1;
        MatRowPut(TBr,i,TBrw);
     end;
    end;
    if (save) then begin
      if (RecordUpdate(oldTBr,TBr,false)==0) then begin
      end;
    end;
  end;
LUpdateTBIVFromCredInv:;  
  return;
end;

global
updating procedure OnSaveInvoice(record IVVc IVp)
begin
  record ORVc oldORr;
  record ORVc ORr;
  record UserVc USr;
  row ORVc ORrw;
  row IVVc IVrw;
  Integer orw,orcnt;
  Integer i,rwcnt,vatcnt;
  val downpayval;
  val vatv,t1,vatval;
  record OrdSettBlock OSb;
  roundmode roundlines,rndtotal,roundvat;
  record RetVc oldRetr;
  record RetVc Retr;
  row RetVc Retrw;
  record SMVc VATr;
  row SMVc VATrw;
  record INVc INr;
  Boolean putf;
  record IVVc orgIVr;
  
  BlockLoad(OSb);
  RecordClear(VATr);
  SetupVATBase(VATr,vatcnt);
  GetCurncyRoundoff(IVp.CurncyCode,IVp.PayDeal,"IVVc",rndtotal,roundlines,roundvat);
  GetCurUser(USr);
  if (blank(IVp.Location)) then begin
    IVp.Location = USr.Location;
  end;
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      if (ReadFirstItem(IVrw.ArtCode,INr,false,true)) then begin
        if (INr.SerNrf!=0) then begin
          putf = true;
          if (blank(IVrw.CustomsNr)) then begin
            GetCustomsDeclarationNumber("IVVc",IVp.SerNr,i,IVrw.ArtCode,IVrw.SerialNr,0,IVrw.CustomsNr);
            putf = nonblank(IVrw.CustomsNr) and putf;
          end;
          if (blank(IVrw.CountryOfOrg)) then begin
            GetCustomsDeclarationNumber("IVVc",IVp.SerNr,i,IVrw.ArtCode,IVrw.SerialNr,2,IVrw.CountryOfOrg);
            putf = nonblank(IVrw.CountryOfOrg) and putf;
          end;
          if (putf) then begin
            MatRowPut(IVp,i,IVrw);
          end;
        end;
      end;
    end;
  end;
  IVp.Prntdf = 1;
  if (HasLocalization("PRT")==false) then begin
    IVp.TaxAuthID = FindTaxAuthID("",IVp);
  end;
  if (HasLocalization("BOL")) then begin
    if (blank(IVp.TaxAuthIDCC)) then begin
      IVp.TaxAuthIDCC = FindTaxAuthIDControlCode("",IVp);
    end;
  end;
  if (IVp.OrderNr<=0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
        if (IVp.OrderNr<=0) and (IVrw.OrdNr<=0) then begin
          IVrw.OrdRow = -1;
          if (blank(IVp.PRCode)) then begin
            IVrw.SHNr = -1;
            IVrw.SHRow = -1;
          end;
          MatRowPut(IVp,i,IVrw);
        end;
      end;
    end;
  end;
  if (IVp.QTNr<=0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
        IVrw.QTRow = -1;
        MatRowPut(IVp,i,IVrw);
      end;
    end;
  end;
  if (IVp.OKFlag==1) then begin
    IVp.Prntdf = 0;
    if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) or (IVp.CredInv<=0) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        IVrw.CreditedRow = -1;
        MatRowPut(IVp,i,IVrw);
      end;
    end;
    InvOK(IVp,true,true);
  end;
  if (IVp.OrderNr>0) then begin  
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (IVp.UpdStockFlag!=0) then begin
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVp,i,IVrw);
          if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
            if (IVrw.OrdRow<0) then begin
              IVrw.NotUpdStockFlag = 0;
              MatRowPut(IVp,i,IVrw);
            end;
          end;
        end;
      end;
      if (IVp.CredInv>0) then begin
        orgIVr.SerNr = IVp.CredInv;
        ReadFirstMain(orgIVr,1,true);
        if (orgIVr.InvType!=kInvoiceTypeDownpayment) then begin
          if (OSb.CredIVUpdateOR==0) then begin
            goto LOnSaveInvoice;
          end;      
        end;
      end else begin
        if (OSb.CredIVUpdateOR==0) then begin
          goto LOnSaveInvoice;
        end;      
      end;
    end;
    ORr.SerNr = IVp.OrderNr;
    if (ReadFirstMain(ORr,1,true)) then begin
      RecordCopy(oldORr,ORr);
      orcnt = MatRowCnt(ORr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
          if (IVrw.OrdRow>-1) then begin
            orw = IVrw.OrdRow;
            if (orw<orcnt) then begin
              MatRowGet(ORr,orw,ORrw);
              if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
                ORrw.Invd = ORrw.Invd + IVrw.Quant;
              end else begin
                if (IVp.OKFlag!=0) and (IVp.UpdStockFlag!=0) then begin
                  if (IVrw.NotUpdStockFlag==0) then begin
                    ORrw.Shipd1 = ORrw.Shipd1 - IVrw.Quant;
                    ORrw.Shipd2 = ORrw.Shipd2 - IVrw.Quant;
                  end;
                end;
                ORrw.Invd = ORrw.Invd - IVrw.Quant;
              end;
              MatRowPut(ORr,orw,ORrw);
            end;
          end;
        end;
        if (IVrw.stp==kInvoiceRowTypeCorrection) then begin
          if (IVrw.OrdRow!=-1) then begin
            orw = IVrw.OrdRow;
            if (orw<orcnt) then begin
              MatRowGet(ORr,orw,ORrw);
              if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
                ORrw.Invd = ORrw.Invd - IVrw.Quant;
              end else begin
                IVrw.NotUpdStockFlag = 0;
                ORrw.Invd = ORrw.Invd + IVrw.Quant;
                if (IVp.OKFlag!=0) and (IVp.UpdStockFlag!=0) then begin
                  if (IVrw.NotUpdStockFlag==0) then begin
                    ORrw.Shipd1 = ORrw.Shipd1 + IVrw.Quant;
                    ORrw.Shipd2 = ORrw.Shipd2 + IVrw.Quant;
                  end;
                end;
              end;
              MatRowPut(ORr,orw,ORrw);
            end;
          end;
        end;        
        if (IVrw.stp==kInvoiceRowTypeDownpayment) then begin
          downpayval = downpayval + IVrw.Sum;
          if (IVp.InclVAT==0) then begin
            AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);            
//            MulVATIV(IVrw.VATCode,IVrw.Sum,vatv,t1,IVp.InclVAT,IVp.NoTAXonVAT);//vat as in InvDownPaySum
//            downpayval = downpayval + vatv + t1;
          end;
        end;
        MatRowPut(IVp,i,IVrw);
      end;
      if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
        if (IVp.InclVAT==0) then begin 
          CalcVATBaseVAT(VATr,IVp.InclVAT,IVp.NoTAXonVAT,vatcnt,vatv,t1);
          downpayval = downpayval + vatv + t1;
        end;
      end;
      downpayval = Round(downpayval,rndtotal);
      if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
        if (downpayval>=0) then begin
          ORr.DownPaySent = ORr.DownPaySent - downpayval;
        end else begin
          ORr.DownPayRedcd = ORr.DownPayRedcd + downpayval;
        end;        
      end else begin
        if (downpayval>=0) then begin
          ORr.DownPaySent = ORr.DownPaySent + downpayval;
        end else begin
          ORr.DownPayRedcd = ORr.DownPayRedcd - downpayval;
        end;        
      end;
      SetORFlags(ORr);
      if (ORr.DownPaySent==0) then begin ORr.DownPaySent = blankval; end;
      if (RecordUpdate(oldORr,ORr,false)==0) then begin
      end;
      UpdateShipmentRowsFromInv(IVp,false);
    end;

    Retr.SerNr = IVp.RetNr;
    if (ReadFirstMain(Retr,1,true)) then begin
      RecordCopy(oldRetr,Retr);
      Retr.InvoiceNr = IVp.SerNr;
      orcnt = MatRowCnt(Retr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVp,i,IVrw);
        if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
          if (IVrw.RetRow>-1) then begin
            orw = IVrw.RetRow;
            if (orw<orcnt) then begin
              MatRowGet(Retr,orw,Retrw);
              if (IVp.InvType!=kInvoiceTypeCredit and IVp.InvType!=kInvoiceTypeCreditSpecialSales) then begin
                Retrw.Invd = Retrw.Invd - IVrw.Quant;
              end else begin
                Retrw.Invd = Retrw.Invd + IVrw.Quant;
              end;
              MatRowPut(Retr,orw,Retrw);
            end;
          end;
        end;
      end;
      if (RecordUpdate(oldRetr,Retr,false)==0) then begin
      end;
    end;
  end else begin
  end;
LOnSaveInvoice:;
  return;
end;

global
updating procedure IVrsStats(record IVVc IVp)
begin
  record IPrsVc mainr;
  
  mainr.CustCode = IVp.CustCode;
  mainr.TransDate = IVp.TransDate;
  mainr.CustDate = IVp.InvDate;
  mainr.TransNr = IVp.SerNr;
  mainr.TransType = kIPrsTransTypeInvoice;
  mainr.AccNr = IVp.ARAcc;
  switch (IVp.InvType) begin
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
      LkInvoiceTypeCredit:;
      if (IVp.CredInv!=-1) then begin
        mainr.IVNr = IVp.CredInv;
      end else begin
        mainr.IVNr = IVp.SerNr;
      end;
    otherwise
      mainr.IVNr = IVp.SerNr;
  end;
  if (RecordStore(mainr,false)) then begin
  end;
  RETURN;
END;

global
updating procedure DeleteIVrsStats(record IVVc IVp)
BEGIN
  record IPrsVc mainr;
  
  mainr.CustCode = IVp.CustCode;
  mainr.TransDate = IVp.TransDate;
  mainr.CustDate = IVp.InvDate;
  mainr.TransNr = IVp.SerNr;
  mainr.TransType = kIPrsTransTypeInvoice;
  mainr.AccNr = IVp.ARAcc;
  switch (IVp.InvType) begin
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
      LkInvoiceTypeCredit:;
      if (IVp.CredInv!=-1) then begin
        mainr.IVNr = IVp.CredInv;
      end else begin
        mainr.IVNr = IVp.SerNr;
      end;
    otherwise
      mainr.IVNr = IVp.SerNr;
  end;
  if (ReadFirstMain(mainr,0,true)) then begin
    RecordDelete(mainr);
  end;
  RETURN;
END;

global
updating procedure TestCust(record IVVc IVp)
BEGIN
  record CUVc CUr;
  record CUVc testCUr;
  
  CUr.Code = IVp.CustCode;
  if (nonblank(CUr.Code)) then begin
  testCUr.Code = CUr.Code;
  if (ReadFirstMain(testCUr,1,true)==false) then begin
    RecordNew(CUr);
    CUr.Code = IVp.CustCode;
    CUr.Name = IVp.Addr0;
    CUr.InvAddr0 = IVp.Addr1;
    CUr.InvAddr1 = IVp.Addr2;
    CUr.InvAddr2 = IVp.Addr3;
    CUr.InvAddr3 = IVp.InvAddr3;
    CUr.InvAddr4 = IVp.InvAddr4;
    CUr.DelAddr0 = "";
    CUr.DelAddr1 = "";
    CUr.DelAddr2 = "";
    CUr.DelAddr3 = "";
    CUr.DelAddr4 = "";
    CUr.Phone = "";
    CUr.Person = IVp.ClientContact;
    CUr.Fax = "";
    CUr.Comment = "";
    CUr.InvoiceToCode = "";
    CUr.SearchKey = "";
    CUr.ExportFlag = IVp.ExportFlag;
    CUr.AccFlag = 0;
    CUr.PayDeal = IVp.PayDeal;
    CUr.CustCat = IVp.CustCat;
    CUr.Objects = "";
//    impCustomers = true;//HAL
    if (RecordStore(CUr,false)) then begin end;
  end;
  end;
  RETURN;
END;

global
updating procedure TestArts(record IVVc IVp)
BEGIN
  record INVc INr;
  Integer rwcnt,i;
  row IVVc IVrw;
  val t,s,rowsum;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;
        INr.Code = IVrw.ArtCode;
        if (nonblank(INr.Code)) then begin
        if (ReadFirstItem(IVrw.ArtCode,INr,false,true)==false) then begin
          RecordNew(INr);
          INr.Code = IVrw.ArtCode;
          INr.Name = IVrw.Spec;
          INr.Unittext = "";
          INr.UPrice1 = blankval;
          INr.MinLevel = blankval;
          INr.SalesAcc = "";
          INr.ItemType = 0;
          INr.Group = "";
//          impItems = true;//HAL
          INr.UPrice1 = IVrw.Price;
          INr.SalesAcc = IVrw.SalesAcc;
          INr.PriceFactor = blankval;
          if (RecordStore(INr,false)) then begin end;
        end else begin
/*
          if (IVrw.BasePrice==0) then begin
            IVrw.BasePrice = INr.InPrice + INr.ExtraCost;
            t = IVrw.Quant * IVrw.BasePrice;
            if (IVrw.PriceFactor!=0) then begin
              t = t / IVrw.PriceFactor;
            end;
            s =  MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
            FindSalesExVat(IVrw.VATCode,s,IVp.InclVAT,IVp.NoTAXonVAT,rowsum);
            IVrw.rowGP = rowsum - t;  
            MatRowPut(IVp,i,IVrw);
          end;
*/
        end;
        end;
    end;
  end;
  RETURN;
END;

global
updating procedure TestSalesPerson(record IVVc IVp)
BEGIN
  record UserVc USr;
  
  if (CountRecords("UserVc")==0) then begin goto LTestSalesPerson; end;
  USr.Code = IVp.SalesMan;
  if (nonblank(USr.Code)) then begin
  if (ReadFirstMain(USr,1,true)==false) then begin
    RecordNew(USr);
    USr.Code = IVp.SalesMan;
    USr.NewPassWord = -1;
//    ImportChangedAccess = true;//HAL
    if (RecordStore(USr,false)) then begin end;
  end;
  end;
LTestSalesPerson:;
  RETURN;
END;

updating procedure ReCreateIVPrePayment(record IVVc IVp)
BEGIN
  record ARPayVc ARPayr;
  record ARPayVc oldARPayr;
  record ARPayHistVc ARPayHistr;
  row IVVc IVrw;
  Integer i,rwcnt;
  record IPVc IPr;
  row IPVc IPrw;
  Integer ipi,iprwcnt;

  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypePrepayment) then begin
      ARPayHistr.CUPNr = IVrw.CUPNr;
      ARPayHistr.SerNr = IVp.SerNr;
      ARPayHistr.FileName = "IVVc";
      if (ReadFirstMain(ARPayHistr,3,true)) then begin
        ARPayr.CUPNr = ARPayHistr.CUPNr;
        if (ReadFirstMain(ARPayr,1,true)) then begin
          RecordCopy(oldARPayr,ARPayr);
          ARPayr.OrderNr = ARPayHistr.OrderNr;
          if (RecordUpdate(oldARPayr,ARPayr,false)==0) then begin
          end;
          RecordDelete(ARPayHistr);
        end else begin
          RecordDelete(ARPayHistr);
          ARPayHistr.CUPNr = IVrw.CUPNr;
          ARPayHistr.FileName = "IPVc";
          if (ReadFirstMain(ARPayHistr,2,true)) then begin
            IPr.SerNr = ARPayHistr.SerNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              iprwcnt = MatRowCnt(IPr);
              for (ipi=0;ipi<iprwcnt;ipi=ipi+1) begin
                MatRowGet(IPr,ipi,IPrw);              
                if (IPrw.CUPNr==IVrw.CUPNr) then begin
                  ARPayAdd2(IPr,IPrw,IVrw.Sum,false,false);
                  ipi = iprwcnt;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure IVVcCreateSoldGiftCert_Invalidate(record IVVc IVp)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  record GCVc GCr;
  record GCVc oldGCr;
  record GCSVc GCSr;
  record GCSVc oldGCSr;
  record GCRVc GCRr;
  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
      GCSr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin
        RecordDelete(GCSr);
      end;
      GCr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCr,1,true)) then begin
        RecordCopy(oldGCr,GCr);
        GCr.Closed = 0;
        if (RecordUpdate(oldGCr,GCr,true)==0) then begin
        end;
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
      GCRr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCRr,1,true)) then begin
        RecordDelete(GCRr);
      end;
      GCSr.SerNr = IVrw.GCNr;
      if (ReadFirstMain(GCSr,1,true)) then begin
        RecordCopy(oldGCSr,GCSr);
        GCSr.Closed = 0;
        GCSr.Balance = GCSr.Balance + IVrw.Sum;
        if (RecordUpdate(oldGCSr,GCSr,true)==0) then begin
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure ReverseInvoice(record IVVc IVp)
BEGIN
  record IVVc lIVr;
  val t;
  Date RebDate,RebDate2,blankd;
  Integer oldinvtype;

  switch (IVp.InvType) begin
    case kInvoiceTypeCashInvoiceReceiptPRT:
      IVVcCreateSoldGiftCert_Invalidate(IVp);
      ReCreateIVPrePayment(IVp);
    case kInvoiceTypeCash:
      IVVcCreateSoldGiftCert_Invalidate(IVp);
      ReCreateIVPrePayment(IVp);
    case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
    case kInvoiceTypeCredit:
      LkInvoiceTypeCredit:;
      t = IVp.Sum4;
      RebDate = blankd;
      if (IVp.CredInv!=-1) then begin
        lIVr.SerNr = IVp.CredInv;
        if (ReadFirstMain(lIVr,1,true)==false) then begin goto L77ReverseInvoice; end;
        if (lIVr.InvType!=kInvoiceTypeCash and lIVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
          ARAdd1(IVp,IVp.CredInv,t,IVp.PayDate,RebDate,RebDate2,true,false,true);
        end;
      end else begin
        ARAdd1(IVp,IVp.SerNr,t,IVp.PayDate,RebDate,RebDate2,false,false,true);
      end;
    otherwise
      if (IVp.pdrdays==-1) then begin
        RebDate = IVp.PayDate;
      end else begin
        RebDate = AddDay(IVp.InvDate,IVp.pdrdays);
      end;
      if (IVp.pdrdays2==-1) then begin
        RebDate2 = IVp.PayDate;
      end else begin
        RebDate2 = AddDay(IVp.InvDate,IVp.pdrdays2);
      end;
      t = -IVp.Sum4;
      if (t!=0) then begin
        ARAdd1(IVp,IVp.SerNr,t,IVp.PayDate,RebDate,RebDate2,false,false,true);
      end;
      ReCreateIVPrePayment(IVp);
      IVVcCreateSoldGiftCert_Invalidate(IVp);
  end;
L77ReverseInvoice:;
// Must update all the support regs as well 
/*
  oldinvtype = IVp.InvType;
  if (IVp.InvType!=3) then begin
    IVp.InvType = 3;
  end else begin
    IVp.InvType = 1;
  end;
  IVUpdateStock(IVp,negf);
  IVp.InvType = oldinvtype;
code doen inside  
*/  
  IVUpdateStock(IVp,true);  
  IVUpdateSerialNr(IVp,true,true);
  if (IVp.Invalid!=0) or (IVp.UpdStockFlag==0) then begin
    IVUpdateItemHist(IVp);
  end;
  SalesmanStats(IVp,lIVr,false);
  RETURN;
END;

global
updating procedure UpdatePRFromIV2(record IVVc IVp,record IVVc IV2p)
BEGIN
  record PRVc PRr;
  record PRVc oldPRr;
  row PRVc PRrw;
  Integer i,rwcnt;
  record TBIVVc TBIVr;
  record TBIVVc oldTBIVr;
  Boolean found;
  record TBBUVc TBBUr;
  record TBBUVc oldTBBUr;
  row TBBUVc TBBUrw;

  if ((RecordValid(IVp)) and (RecordValid(IV2p))) then begin
    if (nonblank(IVp.PRCode)) then begin
    if (IVp.SerNr!=IV2p.SerNr or (IVp.InvType==kInvoiceTypeDownpayment and IVp.OKFlag!=IV2p.OKFlag)) then begin
      if (IVp.InvType==kInvoiceTypeDownpayment) then begin    
        PRr.Code = IVp.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          RecordCopy(oldPRr,PRr);
          rwcnt = MatRowCnt(PRr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(PRr,i,PRrw);
            if (PRrw.InvNr==IV2p.SerNr) then begin
              PRrw.InvNr = IVp.SerNr;
              if (IVp.OKFlag==0) then begin
                PRrw.InvFlag = 0;
              end else begin
                PRrw.InvFlag = 1;
              end;
              MatRowPut(PRr,i,PRrw);
            end;
          end;
          if (RecordUpdate(oldPRr,PRr,false)==0) then begin
          end;
        end;
      end;
      found = true;
      TBIVr.Invoice = IV2p.SerNr;
      TBIVr.PRCode = IVp.PRCode;
      while (LoopKey("InvKey",TBIVr,2,found)) begin
        if (TBIVr.Invoice!=IV2p.SerNr) then begin found = false; end;
        if (TBIVr.PRCode!=IVp.PRCode) then begin found = false; end;
        if (found) then begin
          RecordCopy(oldTBIVr,TBIVr);
          TBIVr.Invoice = IVp.SerNr;
          if (RecordUpdate(oldTBIVr,TBIVr,false)) then begin end;
//          StepBack(TBIVr); stops loop too quickly
        end;
      end;
      TBBUr.PRCode = IVp.PRCode;
      if (ReadFirstMain(TBBUr,1,true)) then begin
        RecordCopy(oldTBBUr,TBBUr);
        rwcnt = MatRowCnt(TBBUr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(TBBUr,i,TBBUrw);
          if (TBBUrw.Invoiced==IV2p.SerNr) then begin
            TBBUrw.Invoiced = IVp.SerNr;
            MatRowPut(TBBUr,i,TBBUrw);
          end;
        end;
        if (RecordUpdate(oldTBBUr,TBBUr,false)==0) then begin
        end;
      end;
    end;   
    end; 
  end;
  RETURN;
END;


