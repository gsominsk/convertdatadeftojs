external procedure GetAssetCurDepartment(string,var string);
external function Integer GetIntYc(Date);


global 
updating procedure UpdateATTransRec(string invnr,date transdate,val sum,longint transnr,integer type)
begin
  record AT2UnitVc AT2Unitr;
  record AT2TransVc AT2Transr;
  boolean testf;
  
  AT2Unitr.InventoryNr = invnr;;
  if (ReadFirstMain(AT2Unitr,1,true)) then begin
    recordNew(AT2Transr);
    AT2Transr.InventoryNr = At2Unitr.InventoryNr;
    AT2Transr.Name = AT2Unitr.Description;
    AT2Transr.Type = type;
    AT2Transr.TransNr = TransNr;
    AT2Transr.Sum = sum;
    AT2Transr.TransDate = transdate;
    if (type!=1) then begin
      AT2Transr.IntYc = GetIntYc(transdate);
    end
    else begin
      AT2Transr.IntYc = 227;
    end;
    testf = recordstore(AT2Transr,false);
  end;
return;
end;

global 
updating procedure UpdateWrofTransRec(record AT2WrofVc ATWrofr,record TrVc TRr)
begin
  row AT2WrofVc ATWrofrw;
  integer rw,rwc;
  
  rwc = matrowcnt(ATWrofr);
  for (rw = 0; rw < rwc; rw =rw + 1) begin
    matrowget(ATWrofr,rw,ATWrofrw);
    UpdateATTransRec(ATWrofrw.InventoryNr,ATWrofr.TransDate,ATWrofrw.DprVal,ATWrofr.SerNr,1)
  end;
return;
end;

global 
updating procedure DeleteWrofTransRec(record AT2WrofVc ATWrofr,longint trnr)
begin
  record AT2TransVc AT2Transr;
  row AT2WrofVc ATWrofrw;
  integer rw,rwc;
  rwc = matrowcnt(ATWrofr);
  for (rw = 0; rw < rwc; rw =rw + 1) begin
    matrowget(ATWrofr,rw,ATWrofrw);
    AT2Transr.InventoryNr = ATWrofrw.InventoryNr;
    AT2Transr.TransNr = trnr;
    RecordDelete(ATWrofr);
  end;
return;
end;

global 
updating procedure UpdateATTransRecArray(record TrVc TRr,array string atunits,array val atvals,integer size,integer type)
begin
  record AT2TransVc AT2Transr;
  record AT2UnitVc AT2Unitr;
  integer rw,rwc,i;
  boolean testf;

  for (i = 0; i < size; i = i + 1) begin;
    if (atvals[i]>0) then begin
      UpdateATTransRec(ATUnits[i],TRr.TransDate,atvals[i],TRr.Number,type);
    end;
  end;
return;
end;

global
updating procedure UpdateInvrs(string InventoryNr,string DepCode,LongInt sernr,Date tdp,string FileName,Integer rownr,string legalcode)
BEGIN
  record InvrsVc Invrsr;
  record AT2UnitVc ATUnitr;
  
  if (len(FileName)==0) then begin goto LUpdateInvrs; end;
  if (sernr==-1) then begin goto LUpdateInvrs; end;
  if (blank(InventoryNr)) then begin goto LUpdateInvrs; end;
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
    Invrsr.AT2Code = ATUnitr.AT2Code;
  end;  
  Invrsr.InventoryNr = InventoryNr;
  Invrsr.Department = DepCode;
  Invrsr.FileName = FileName;
  Invrsr.LegalCode = legalcode;
  Invrsr.TransNr = sernr;
  Invrsr.TransDate = tdp;
  Invrsr.Row = rownr;  
  if (RecordStore(Invrsr,false)) then begin
  end;
LUpdateInvrs:;  
  RETURN;
END;

global
updating procedure DeleteInvrs(string InventoryNr,string DepCode,LongInt sernr,Date tdp,string FileName,Integer rownr)
begin
  record InvrsVc Invrsr;

  Invrsr.InventoryNr = InventoryNr;
  Invrsr.TransDate = tdp;
  Invrsr.FileName = FileName;
  Invrsr.Department = DepCode;
  Invrsr.TransNr = sernr;
  Invrsr.Row = rownr;  
  if (ReadFirstMain(Invrsr,0,true)) then begin
    RecordDelete(Invrsr);
  end;
  return;
end;

global
updating procedure UpdateInvBal(string InventoryNr,string DepCode,string Person,string FileName,LongInt TransNr,val qtyp,Integer action)
BEGIN
  record InvBalVc InvBalr;
  record InvBalVc oldInvBalr;
  val q;
  Boolean found;
  
  InvBalr.InventoryNr = InventoryNr;
  InvBalr.CurDepartment = DepCode;
  found = ReadFirstMain(InvBalr,2,true);  
  if (found==false) then begin
    InvBalr.InventoryNr = InventoryNr;
    found = ReadFirstMain(InvBalr,1,true);  
  end;
  if (found==false) then begin
    InvBalr.InventoryNr = InventoryNr;
    InvBalr.CurDepartment = DepCode;
    InvBalr.CurQuant = 0;
  end;
  RecordCopy(oldInvBalr,InvBalr);
  if (nonblank(DepCode)) then begin
    InvBalr.CurDepartment = DepCode;
  end;
  if (FileName!="AT2WrofVc") then begin
    if (nonblank(Person)) then begin
      InvBalr.CurPerson = Person;
    end;
  end;
  switch (action) begin
    case 0:
      InvBalr.CurQuant = InvBalr.CurQuant + qtyp;
    case 1:
      InvBalr.CurQuant = InvBalr.CurQuant - qtyp;
    case 2:
      InvBalr.CurQuant = qtyp;
    case 3:
  end;
/*
if (InventoryNr=="VW20004") then begin
LogText(0,"InventoryNr " & InventoryNr & " FileName " & FileName & " TransNr " & TransNr & " q " & q & " CurQuant " & InvBalr.CurQuant & " CurPerson " & InvBalr.CurPerson & " CurDepartment " & InvBalr.CurDepartment & " DepCode " & DepCode);
end;
*/
  if (found) then begin
    if (RecordUpdate(oldInvBalr,InvBalr,found)==0) then begin
    end;
  end else begin
    if (RecordStore(InvBalr,false)) then begin
    end;
  end;
  RETURN;
END;

global
updating procedure DeleteInvBal(string InventoryNr,string DepCode)
BEGIN
  record InvBalVc InvBalr;
  
  InvBalr.InventoryNr = InventoryNr;
  InvBalr.CurDepartment = DepCode;
  if (ReadFirstMain(InvBalr,0,true)) then begin
    RecordDelete(InvBalr);
  end;
  RETURN;
END;

global
updating procedure AT2WrofOK(record AT2WrofVc ATWrofp)
BEGIN
  Integer i,rwcnt;
  row AT2WrofVc ATWrofrw;
  string 20 depcode;
  
  rwcnt = MatRowCnt(ATWrofp);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ATWrofp,i,ATWrofrw);
    depcode = ATWrofp.DepCode;
    if (blank(depcode)) then begin
      GetAssetCurDepartment(ATWrofrw.InventoryNr,depcode);
    end;
    UpdateInvBal(ATWrofrw.InventoryNr,depcode,"","AT2WrofVc",ATWrofp.SerNr,ATWrofrw.Qty,1);
    UpdateInvrs(ATWrofrw.InventoryNr,depcode,ATWrofp.SerNr,ATWrofp.TransDate,"AT2WrofVc",i,"");   
  end;  
  RETURN;
END;

global
updating procedure AT2WrofInvalidate(record AT2WrofVc ATWrofp)
BEGIN
  Integer i,rwcnt;
  row AT2WrofVc ATWrofrw;
  string 20 depcode;
  
  if (ATWrofp.OKFlag!=0) then begin
    rwcnt = MatRowCnt(ATWrofp);  
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ATWrofp,i,ATWrofrw);
      MatRowGet(ATWrofp,i,ATWrofrw);
      depcode = ATWrofp.DepCode;
      if (blank(depcode)) then begin
        GetAssetCurDepartment(ATWrofrw.InventoryNr,depcode);
      end;
      DeleteInvBal(ATWrofrw.InventoryNr,depcode);
      DeleteInvrs(ATWrofrw.InventoryNr,depcode,ATWrofp.SerNr,ATWrofp.TransDate,"AT2WrofVc",i);   
    end;  
  end;
  RETURN;
END;

global
updating procedure AT2WrofUnOK(record AT2WrofVc ATWrofp)
BEGIN
  Integer i,rwcnt;
  row AT2WrofVc ATWrofrw;
  string 20 depcode;
  
  rwcnt = MatRowCnt(ATWrofp);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ATWrofp,i,ATWrofrw);
    depcode = ATWrofp.DepCode;
    if (blank(depcode)) then begin
      GetAssetCurDepartment(ATWrofrw.InventoryNr,depcode);
    end;
    UpdateInvBal(ATWrofrw.InventoryNr,depcode,"","AT2WrofVc",ATWrofp.SerNr,ATWrofrw.Qty,0);
    DeleteInvrs(ATWrofrw.InventoryNr,depcode,ATWrofp.SerNr,ATWrofp.TransDate,"AT2WrofVc",i);   
  end;  
  RETURN;
END;

global
updating procedure AT2TakeOK(record AT2TakeVc ATTakep)
BEGIN
  Integer i,rwcnt;
  row AT2TakeVc ATTakerw;
  string 5 person;
  record AT2UnitVc AT2Unitr;
  
  rwcnt = MatRowCnt(ATTakep);  
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(ATTakep,i,ATTakerw);
    if (ATTakep.PhysCheckf!=2) then begin
      if (nonblank(ATTakerw.LoanPerson)) then begin
        person = ATTakerw.LoanPerson;
      end else begin
        person = ATTakep.RespPerson;
      end;  
      UpdateInvBal(ATTakerw.InventoryNr,ATTakep.DepCode,person,"AT2TakeVc",ATTakep.SerNr,blankval,3);
    end else begin
      person = "";
//      UpdateInvBal(ATTakerw.InventoryNr,ATTakep.DepCode,ATTakep.RespPerson,"AT2TakeVc",ATTakep.SerNr,ATTakerw.Qty,2);
//INventory Balance only from Asset and writeof
//Stocktaking should not update , as in stock 
    end;  
    UpdateInvrs(ATTakerw.InventoryNr,ATTakep.DepCode,ATTakep.SerNr,ATTakep.TransDate,"AT2TakeVc",i,person);   
  end;  
  RETURN;
END;

global
updating procedure AT2TakeUnOK(record AT2TakeVc ATTakep)
BEGIN
  Integer i,rwcnt;
  row AT2TakeVc ATTakerw;
  string 5 person;
  
  rwcnt = MatRowCnt(ATTakep);  
  for (i=0; i<rwcnt;i=i+1) begin
    MatRowGet(ATTakep,i,ATTakerw);
    DeleteInvBal(ATTakerw.InventoryNr,ATTakep.DepCode);
    DeleteInvrs(ATTakerw.InventoryNr,ATTakep.DepCode,ATTakep.SerNr,ATTakep.TransDate,"AT2TakeVc",i);   
  end;  
  RETURN;
END;

global
updating procedure AT2DprOK(record AT2DprVc ATDprp,record AT2DprVc ATDpr2p,Boolean atdprf,Boolean atdpr2f,Boolean deletef)
BEGIN
  record InvrsVc Invrsr;
  
  if (atdpr2f) then begin
    Invrsr.InventoryNr = ATDpr2p.InventoryNr;
    Invrsr.Department = "";
    Invrsr.FileName = "AT2DprVc";
    Invrsr.TransNr = ATDpr2p.SerNr;
    Invrsr.TransDate = ATDpr2p.TransDate;
    Invrsr.Row = 0;
    if (ReadFirstMain(Invrsr,0,true)) then begin
      RecordDelete(Invrsr);           
    end;  
  end;
  if (atdprf) then begin
    if (deletef==false) then begin
      UpdateInvrs(ATDprp.InventoryNr,"",ATDprp.SerNr,ATDprp.TransDate,"AT2DprVc",0,ATDprp.LegalCode);
    end;
  end;
  RETURN;
END;
