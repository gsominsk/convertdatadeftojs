external procedure TRGetSerRange(LongInt,var LongInt,var LongInt);
external function Integer GetIntYc(Date);
external function Boolean WarnOldRecords(Date,string,LongInt);
external function Boolean DateWarned(Date,string);
external function Boolean DateLocked(Date,string);
external procedure GetAPOnAccAcc(string,var string);
external procedure GetAROnAccAcc(string,var string);
external procedure TRUpdateDebRows(var row TRVc,Date);
external procedure TRUpdateCredRows(var row TRVc,Date);
external procedure TRUpdateDebRows2(var row TRVc,Date);
external procedure TRUpdateCredRows2(var row TRVc,Date);
external procedure TRSumup(var record TRVc,var val);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure TRAccName(var record TRVc,Integer,Boolean,Boolean);
external function Integer Norm2Cont(string,val,val);
external procedure GetAPAcc(string,var string);
external procedure GetARAcc(string,var string);
external procedure AutoObj(var string);
external procedure PasteAccObj(string,var string);
external function Boolean GetAccName(string,var string,Integer);
external procedure AddEuroTrRow(record TRVc,string,string,string,string,val,val,val,Boolean,Boolean,var val,Boolean,string,string,string);
external procedure AddEuroCurncyNomARTrRow(record TRVc,string,string,string,string,val,val,Boolean,
                                  Boolean,var val,string,val,val,val,val,val,
                                  val,val,string,LongInt,Integer,val,Date,LongInt,Boolean,string,string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

procedure TheInvoiceAmounts(record TRVc TRp,row TRVc TRrw,var val rval,var val bookrval)
BEGIN
  Integer i,rwcnt;
  row TRVc TR2rw;
  
  bookrval = blankval;
  rval = blankval;
  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TR2rw);
    if (TR2rw.Typ==TRrw.Typ) then begin
      if (TR2rw.SerNr==TRrw.SerNr) then begin
        if (TRrw.Typ==1) then begin
          bookrval = bookrval + (TR2rw.CredVal-TR2rw.DebVal);
          rval = rval + (TR2rw.CurCredVal-TR2rw.CurDebVal);
        end;
        if (TRrw.Typ==2) then begin
          bookrval = bookrval + (TR2rw.DebVal-TR2rw.CredVal);
          rval = rval + (TR2rw.CurDebVal-TR2rw.CurCredVal);
        end;
      end;
    end;
  end;
  RETURN;
END;

global
function Boolean PasteSerNrInTRrw(var record TRVc TRp,Integer rownr)
BEGIN
  Boolean res;
  record TRVc locTRr;
  row TRVc TRrw;  
  row TRVc oldTRrw;  
  record IVVc IVr;
  record VIVc VIr;
  record ARVc ARr;  
  record APVc APr;  
  val frrate,torate1,torate2,baserate1,baserate2;
  val theval,thebaseval,totsum,base2val;
  val rd,rs,ors;
  Boolean updateline;
  Boolean dc1,dc2,gainf;
  Integer i;
  string 255 tstr;
  Date td;
  record CYBlock CYRec;
  record BaseCurBlock bcur;
  record NLRateBlock NLRateRec;
  record APAccBlock APAccb;
  record AccBlock ARAccb;
  string 20 Curncy;
  val rval,bookrval;
 
  MatRowGet(TRp,rownr,TRrw);  
  RecordNew(locTRr);
  if (TRrw.SerNr==-1) then begin goto LPasteSerNrInTRrw; end;
  BlockLoad(CYRec);
  switch (TRrw.Typ) begin
    case 0: ;
    case 1:      
      BlockLoad(ARAccb);
      ARr.InvoiceNr = TRrw.SerNr;
      if (ReadFirstMain(ARr,1,true)) then begin
        updateline = true;
        td = TRp.TransDate;
        IVr.SerNr = TRrw.SerNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          TRrw.DueDate = IVr.PayDate;
          TRrw.CompCode = IVr.CustCode;
          TRrw.AccNumber = IVr.ARAcc;
          if (ARAccb.ARUseObj!=0) then begin
            TRrw.Objects = IVr.Objects;
          end;
          td = IVr.TransDate;
          curncy = ARr.ARCurncyCode;
          frrate = IVr.FrRate;
          torate1 = IVr.ToRateB1;
          torate2 = IVr.ToRateB2;
          baserate1 = IVr.BaseRate1;
          baserate2 = IVr.BaseRate2;
        end else begin
          curncy = ARr.ARCurncyCode;
          GetFullCurncyRate(curncy,td,frrate,torate1,torate2,baserate1,baserate2);
        end;
        TRrw.DueDate = ARr.DueDate;
        TRrw.CompCode = ARr.CustCode;
        
        TRrw.Curncy = curncy;
        TRrw.FrRate = frrate;
        TRrw.ToRateB1 = torate1;
        TRrw.ToRateB2 = torate2;
        TRrw.BaseRate1 = baserate1;
        TRrw.BaseRate2 = baserate2;
        if (blank(TRrw.AccNumber)) then begin
          GetARAcc(TRrw.CompCode,tstr);
          TRrw.AccNumber = tstr;
        end;
        TheInvoiceAmounts(TRp,TRrw,rval,bookrval);
        if (ARr.RVal>0) then begin
          theval = ARr.RVal - rval;
          thebaseval = ARr.BookRVal - bookrval;
          dc1 = false;
          dc2 = true;
        end else begin
          theval = -(ARr.RVal - rval);
          thebaseval = -(ARr.BookRVal - bookrval);
          dc1 = true;
          dc2 = false;          
        end;
        TRrw.Comment = TRrw.SerNr;
        TRrw.Comment = TRrw.Comment & " " & TRrw.CompCode & " " & IVr.Addr0;
        res = true;
      end else begin
        res = false;
      end;
    case 2:
      BlockLoad(APAccb);
      APr.SerNr = TRrw.SerNr;
      if (ReadFirstMain(APr,1,true)) then begin
        updateline = true;
        td = TRp.TransDate;
        TRrw.DueDate = APr.DueDate;
        APr.InvoiceNr = "";
        VIr.SerNr = TRrw.SerNr;
        if (ReadFirstMain(VIr,1,true)) then begin
          TRrw.DueDate = VIr.DueDate;
          TRrw.CompCode = VIr.VECode;
          TRrw.AccNumber = VIr.APAcc;
          if (APAccb.APUseObj!=0) then begin
            TRrw.Objects = VIr.Objects;
          end;  
          td = VIr.TransDate;
          curncy = APr.CurncyCode;
          frrate = VIr.FrRate;
          torate1 = VIr.ToRateB1;
          torate2 = VIr.ToRateB2;
          baserate1 = VIr.BaseRate1;
          baserate2 = VIr.BaseRate2;
        end else begin
          curncy = APr.CurncyCode;
          GetFullCurncyRate(curncy,td,frrate,torate1,torate2,baserate1,baserate2);
        end;
        TRrw.CompCode = APr.VECode;
        TRrw.Curncy = curncy;
        TRrw.FrRate = frrate;
        TRrw.ToRateB1 = torate1;
        TRrw.ToRateB2 = torate2;
        TRrw.BaseRate1 = baserate1;
        TRrw.BaseRate2 = baserate2;
        if (blank(TRrw.AccNumber)) then begin
          GetAPAcc(TRrw.CompCode,tstr);
          TRrw.AccNumber = tstr;
        end;
        TheInvoiceAmounts(TRp,TRrw,rval,bookrval);
        if (APr.RVal>0) then begin        
          theval = APr.RVal - rval;
          thebaseval = APr.BookRVal - bookrval;
          dc1 = true;
          dc2 = false;
        end else begin
          theval = -(APr.RVal - rval);
          thebaseval = -(APr.BookRVal - bookrval);
          dc1 = false;
          dc2 = true;
        end;
        TRrw.Comment = TRrw.SerNr;
        TRrw.Comment = TRrw.Comment & " " & TRrw.CompCode & " " & VIr.VEName;
        res = true;
      end else begin
        res = false;
      end;
  end;
  if (updateline) then begin
    AddEuroCurncyNomARTrRow(locTRr,TRrw.AccNumber,TRrw.Objects,TRrw.VATCode,TRrw.Comment,thebaseval,blankval,false,dc1,totsum,
                            TRrw.Curncy,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,
                            theval,blankval,TRrw.CompCode,TRrw.SerNr,TRrw.Typ,blankval,TRrw.DueDate,-1,false,"","","");
    i = MatRowCnt(locTRr);
    if (i>=0) then begin
      MatRowGet(locTRr,i-1,TRrw);
      MatRowPut(TRp,rownr,TRrw);
    end;
    if (CYRec.CalculateRateDiff!=0) then begin
      BlockLoad(bcur);
      BlockLoad(NLRateRec);
      i = MatRowCnt(locTRr);
      if (i<1) then begin goto LPasteSerNrInTRrw; end;      
      MatRowGet(locTRr,i-1,TRrw);
      CopyRow(locTRr,TRrw,oldTRrw);
      RecordNew(locTRr);
      ClearRow(locTRr,TRrw,1);
      curncy = oldTRrw.Curncy;
      GetFullCurncyRate(curncy,TRp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
      if ((curncy==bcur.BaseCur1) or (blank(curncy))) then begin
        rs = MulRateToBase1(curncy,theval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      end else begin
        rs = MulRateToBase1(curncy,theval,frrate,torate1,torate2,baserate1,baserate2,DefaultCurRoundOff);
      end;
      ors = MulRateToBase1(curncy,theval,oldTRrw.FrRate,oldTRrw.ToRateB1,oldTRrw.ToRateB2,oldTRrw.BaseRate1,oldTRrw.BaseRate2,DefaultCurRoundOff);
      rd = ors - rs;
      switch (oldTRrw.Typ) begin
        case kTransactionRowTypeCustomer:
          if (rd>0) then begin
            gainf = false;
          end else begin
            gainf = true;
          end;
        case kTransactionRowTypeSupplier:
          if (rd>0) then begin
            gainf = true;
          end else begin
            gainf = false;
          end;
        otherwise
      end;
      if (gainf==true) then begin
        if (GetAccName(NLRateRec.RateGainAcc,tstr,60)==false) then begin
          MessageBox(1919,"");
          goto LPasteSerNrInTRrw;
        end;
        AddEuroTrRow(locTRr,NLRateRec.RateGainAcc,"","",tstr,rd,baserate1,baserate2,true,dc2,totsum,false,"","","");
      end;
      if (gainf==false) then begin
        if (GetAccName(NLRateRec.RateLossAcc,tstr,60)==false) then begin
           MessageBox(1919,"");
           goto LPasteSerNrInTRrw;;
        end;
        AddEuroTrRow(locTRr,NLRateRec.RateLossAcc,"","",tstr,rd,baserate1,baserate2,true,dc2,totsum,false,"","","");
      end;
      i = MatRowCnt(locTRr);
      if (i>0) then begin
        MatRowGet(locTRr,i-1,TRrw);
        MatRowPut(TRp,MatRowCnt(TRp),TRrw);
      end;                  
    end;
  end;
LPasteSerNrInTRrw:;
  PasteSerNrInTRrw = res;
  RETURN;
END;

global
procedure UpdateTransRows(var record TRVc TRp)
BEGIN
  row TRVc TRrr;
  Integer rwcnt,i;
  val from,to1,to2,bas1,bas2,t;
  record BaseCurBlock bascur;
  string 20 curncy;

  BlockLoad(bascur);
  rwcnt = MatRowCnt(TRp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TRrr);
    if ((TRrr.stp==1) and (nonblank(TRrr.AccNumber))) then begin
      curncy = TRrr.Curncy;
      GetFullCurncyRate(TRrr.Curncy,TRp.TransDate,from,to1,to2,bas1,bas2);
      TRrr.Curncy = curncy;
      TRrr.FrRate = from;
      TRrr.ToRateB1 = to1;
      TRrr.ToRateB2 = to2;
      TRrr.BaseRate1 = bas1;
      TRrr.BaseRate2 = bas2;
      if (bascur.BaseCur2!=TRrr.Curncy) then begin // All except base 2
        if (blank(TRrr.CredVal)) then begin
          TRrr.DebVal2 = blankval;
          TRUpdateDebRows(TRrr,TRp.TransDate);
        end else begin
          TRrr.CredVal2 = blankval;
          TRUpdateCredRows(TRrr,TRp.TransDate);
        end;
      end else begin
        if (blank(TRrr.CredVal)) then begin
          TRUpdateDebRows2(TRrr,TRp.TransDate);
        end else begin
          TRUpdateCredRows2(TRrr,TRp.TransDate);
        end;
      end;
      MatRowPut(TRp,i,TRrr);
    end;
  end;
  TRSumup(TRp,t);
  RETURN;
END;

global
procedure CalcTRField(var record TRVc TRp,Integer rownr,string fieldname)
BEGIN
  Integer rwcnt,stp;
  row TRVc TRrw;
  string 10 crncy;
  val ct;

  rwcnt = MatRowCnt(TRp);
  stp = 1;
  if ((rownr!=-1) and (rownr<rwcnt)) then begin
    MatRowGet(TRp,rownr,TRrw);
    stp = TRrw.stp;
    switch (stp) begin
      case 1: 
        switch (fieldname) begin
          case "DebVal":
            ct = MulRateToBase1(TRrw.Curncy,TRrw.CurDebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            TRrw.DebVal = ct;
          case "DebVal2":
            ct = MulRateToBase2(TRrw.Curncy,TRrw.CurDebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            if (ct==0) then begin
              crncy = "";
              ct = MulRateToBase2(crncy,TRrw.DebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            end;
            TRrw.DebVal2 = ct;
          case "CredVal":
            ct = MulRateToBase1(TRrw.Curncy,TRrw.CurCredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            TRrw.CredVal = ct;
          case "CredVal2":
            ct = MulRateToBase2(TRrw.Curncy,TRrw.CurCredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            if (ct==0) then begin
              crncy = "";
              ct = MulRateToBase2(crncy,TRrw.CredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            end;
            TRrw.CredVal2 = ct;
          case "CurDebVal":
            ct = DivRateToBase1(TRrw.Curncy,TRrw.DebVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            TRrw.CurDebVal = ct;
          case "CurCredVal":
            ct = DivRateToBase1(TRrw.Curncy,TRrw.CredVal,TRrw.FrRate,TRrw.ToRateB1,TRrw.ToRateB2,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
            TRrw.CurCredVal = ct;
      end;
    end;
    MatRowPut(TRp,rownr,TRrw);    
    TRSumup(TRp,ct);
  end;
  RETURN;
END;

global
function Boolean TRVc_BeforeAccNumber(var record TRVc TRp,Integer rownr)
BEGIN
  Boolean res;
  record AutVc Autr;
  row TRVc TRrw;

  if (true) then begin
    MatRowGet(TRp,rownr,TRrw);
    switch (TRrw.stp) begin
      case 1:
        if (nonblank(TRrw.AccNumber)) then begin
          Autr.Code = TRrw.AccNumber;
          if (ReadFirstMain(Autr,1,true)) then begin
            res = true;
          end;
        end;      
    end;  
  end;
  TRVc_BeforeAccNumber = res;
  RETURN;
END;

global
function Boolean TRVc_PasteCompCode(var record TRVc TRp,Integer rownr)
BEGIN
  Boolean res;
  row TRVc TRrr;
  string 255 account;
  record CUVc VEr;
  record CUVc CUr;
  val from,to1,to2,bas1,bas2;
  string 20 curncy;

  MatRowGet(TRp,rownr,TRrr);
  if (blank(TRrr.AccNumber)) then begin        
    switch (TRrr.Typ) begin
      case 0: ;
      case 1: 
        if (TRrr.SerNr>0) then begin
          GetARAcc(TRrr.CompCode,account);
        end else begin
          GetAROnAccAcc(TRrr.CompCode,account);
        end;
      case 2: 
        if (TRrr.SerNr>0) then begin
           GetAPAcc(TRrr.CompCode,account);
         end else begin
           GetAPOnAccAcc(TRrr.CompCode,account);
         end;
    end;
    if (TRrr.Typ!=0) then begin
      if (nonblank(account)) then begin
        TRrr.AccNumber = account;
        MatRowPut(TRp,rownr,TRrr);
        TRAccName(TRp,rownr,false,true);
        res = true;
      end;
      switch (TRrr.Typ) begin
        case 0: ;
        case 1:   
            CUr.Code = TRrr.CompCode;
            if (ReadFirstMain(CUr,1,true)) then begin
              if (CUr.CUType!=0) then begin
	              curncy = CUr.CurncyCode;
	              GetFullCurncyRate(curncy,TRp.TransDate,from,to1,to2,bas1,bas2);
	              TRrr.Curncy = curncy;
	              TRrr.FrRate = from;
	              TRrr.ToRateB1 = to1;
	              TRrr.ToRateB2 = to2;
	              TRrr.BaseRate1 = bas1;
	              TRrr.BaseRate2 = bas2;
	              if (nonblank(TRrr.Comment)) then begin
	                TRrr.Comment = TRrr.Comment & ",";
	              end;
	              if ((len(TRrr.Comment)+len(CUr.Name))<60) then begin
	                TRrr.Comment = TRrr.Comment & CUr.Name;
	              end;
	              res = true;              
	            end;
            end;
        case 2: 
            VEr.Code = TRrr.CompCode;
            if (ReadFirstMain(VEr,1,true)) then begin
              if (VEr.VEType!=0) then begin
	              curncy = VEr.VECurncyCode;
	              GetFullCurncyRate(curncy,TRp.TransDate,from,to1,to2,bas1,bas2);
	              TRrr.Curncy = curncy;
	              TRrr.FrRate = from;
	              TRrr.ToRateB1 = to1;
	              TRrr.ToRateB2 = to2;
	              TRrr.BaseRate1 = bas1;
	              TRrr.BaseRate2 = bas2;
	              if (nonblank(TRrr.Comment)) then begin
	                TRrr.Comment = TRrr.Comment & ",";
	              end;
	              if ((len(TRrr.Comment)+len(VEr.Name))<60) then begin
	                TRrr.Comment = TRrr.Comment & VEr.Name;
	              end;
	              res = true;
	            end;
            end;
      end;
    end;
  end;
  MatRowPut(TRp,rownr,TRrr);
  TRVc_PasteCompCode = res;
  RETURN;
END;

global
function Boolean TRVc_PasteObjects(var record TRVc TRp,Integer rownr)
BEGIN
  Boolean res;
  string 255 objstr;
  row TRVc TRrr;

  MatRowGet(TRp,rownr,TRrr);
  objstr = TRrr.Objects;
  AutoObj(objstr);
  TRrr.Objects = objstr;
  MatRowPut(TRp,rownr,TRrr);
  res = true;
  TRVc_PasteObjects = res;
  RETURN;
END;

global
procedure TRVc_PasteCurncy(var record TRVc TRp,Integer rownr)
BEGIN
  Integer res;
  row TRVc TRrr;
  string 20 curncy;
  val frrate,torate1,torate2,baserate1,baserate2;

  MatRowGet(TRp,rownr,TRrr);
  curncy = TRrr.Curncy;
  GetFullCurncyRate(curncy,TRp.TransDate,frrate,torate1,torate2,baserate1,baserate2);
  TRrr.Curncy = curncy;
  TRrr.FrRate = frrate;
  TRrr.ToRateB1 = torate1;
  TRrr.ToRateB2 = torate2;
  TRrr.BaseRate1 = baserate1;
  TRrr.BaseRate2 = baserate2;
  MatRowPut(TRp,rownr,TRrr);
  TRSumup(TRp,frrate);
  RETURN;
END;

global
function Integer TRVc_PasteNumber(var record TRVc TRr,var string errstr)
begin
  Integer res;
  record TRVc oldTRr;
  LongInt serstart,serend;
  
  errstr = "";
  if (DateLocked(TRr.TransDate,"TRVc")) then begin
    res = 1046;
    goto LTRVc_PasteNumber;
  end;
  if (DateWarned(TRr.TransDate,"TRVc")) then begin
    res = 1045;
    goto LTRVc_PasteNumber;
  end;
  if (WarnOldRecords(TRr.TransDate,"TRVc",TRr.Number)) then begin
    res = 2020;
    goto LTRVc_PasteNumber;
  end;
  if (TRr.Number>0) then begin
    TRGetSerRange(TRr.Number,serstart,serend);
    if (TRr.Number!=serstart) then begin
      oldTRr.Number = serend;
      oldTRr.IntYc = GetIntYc(TRr.TransDate);
      if (ReadLastMain(oldTRr,2,false)) then begin
        if (oldTRr.Number>serstart) then begin      	      
          if ((oldTRr.Number+1)!=TRr.Number) then begin
            res = 20771;
            errstr = " " & oldTRr.Number+1;
            goto LTRVc_PasteNumber;
          end;
        end else begin
          if (TRr.Number!=serstart) then begin
            if ((oldTRr.Number+1)!=TRr.Number) then begin
              if (oldTRr.Number>=serstart) then begin
                res = 20771;
                errstr = " " & serstart + 1;
                goto LTRVc_PasteNumber;
              end else begin
                res = 20771;
                errstr = " " & serstart;
                goto LTRVc_PasteNumber;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
LTRVc_PasteNumber:;  
  TRVc_PasteNumber = res;
  return;
end;
