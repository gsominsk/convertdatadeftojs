external procedure SendLogAction(Integer,Integer,Integer,string,string);
external procedure AutomatedSales(string,Integer);
external procedure OnLoginAutomatedSales();
external updating procedure LiveDBBlessWClass();
external procedure OpenHWStore();
external updating function Integer MarketplacePaymentFailed();
external function string 60 AddObjectToObjectList(string,string);
remote updating function Boolean OnLoginRemote2(var Boolean,var Boolean,var Boolean,Boolean,Date,Time,string,var Integer,var Integer,
                                                var array LongInt,var array LongInt,var string,var Boolean,var record RcVc,var string,var string);
external function Boolean HasModCRM();
external procedure UpdateLicenseStatusNow();
remote updating procedure SetServerBuildProductCode();
external function Boolean ProductInDemoMode();
external updating procedure WelcomeWClassNewInstallClient();
remote procedure OpenToDoIfNeededOnLogin();
remote procedure OnLoginReadCurLicenses();
external updating procedure DoUpdateLicenseStatus(record CurLicensesBlock);
external procedure OpenTableLayoutCLass(Integer,string,LongInt,Integer);
external procedure ActVcRecordDefClient(var record ActVc);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
remote procedure IVCashVcRecordDefaultsClientRemote(var record IVCashVc,record LocalMachineBlock);
external function LongInt RestAccVcRecordDefaultsClient(LongInt,var record RestAccVc,record RestAccVc,LongInt,LongInt);
remote function Boolean PasteCustInCashInv(var record IVCashVc,string,string,var string);
external updating function Boolean ReopenSavedWindows();
external procedure OnLogin2();
external function Integer OpenToDoWClass(string,string,record RcVc);
external function Integer OpenMasterWClass();
external function Integer OpenMasterWClass2(string,string);
remote updating function Integer ClockOutWClassDoRemote(record RcVc,string,Date,Time,Boolean);
remote updating function Integer ClockInWClassDoRemote(string,Date,Time);
external function Boolean IsOffice(Boolean);
external updating procedure AutoSearchForNewerVersion();
remote updating function Boolean OnLoginRemote(var Boolean,var Boolean,var Boolean,Boolean,Date,Time,string,var Integer,var Integer,var LongInt,var string,var Boolean,var record RcVc,var string,var string);
remote updating function Boolean OnLoginRemote_IV(Boolean,var record IVVc,var Boolean,var Boolean,var Boolean,Boolean,Date,Time,string,var Integer,var Integer,var LongInt,var string,var string,var string);
remote updating function Boolean OnLoginRemote_RestAcc(var record RestAccvc,var Boolean,var Boolean,var Boolean,Boolean,Date,Time,string,var Integer,var Integer,var LongInt,var string,var string,var string);
external procedure RegisterAtPresenceServer(string,Integer,Integer,string,Boolean);
remote updating function Boolean OnLogoutRemote(string);
external function Boolean TouchScreenLook();
external function Boolean CheckIfOfflineCompanyExists(Integer);
external function LongInt IVDefaultsClient(var record IVVc,record IVVc,LongInt,LongInt);
remote updating procedure SilentlyActivatePersDesktop();
external updating procedure UpdateLocalUserChargeFields();
external updating procedure UpdateLocalCompaniesChargeFields();
external updating procedure InitMarketPlaceLicenseCopytoClient();
external updating function Boolean UserLicensesExpired();
external procedure LogoutHansaWorldID();
external procedure SendHansaWorldIDUserTask2(string,string,Integer);

global
function Integer GetPOSOffLineCompNo()
begin 
  Integer res;
  record OffLineSetBlock OffLb;
  
  BlockLoad(OffLb);
  res = StringToInt(OffLb.OffLineComp);
  GetPOSOffLineCompNo = res;
  return;
end;

global
function Boolean CheckOffLineRecords(Boolean openf)
begin
  Boolean res;
  Integer offlinecomp,curcomp,wn;
  record IVCashVc IVCashr;
  record RcVc RepSpec;
  record LocalMachineBlock LocalMachineRec;
  record OffLineSetBlock OffLb;
  
  BlockLoad(OffLb);  
  res = false;
  offlinecomp = GetPOSOffLineCompNo;
  if (offlinecomp<=0) then begin goto LCheckOffLineRecords; end;
  if (CheckIfOfflineCompanyExists(offlinecomp)==false) then begin goto LCheckOffLineRecords; end;
  if (openf) then begin
    BlockLoad(LocalMachineRec);
    if (blank(LocalMachineRec.LocalMachineCode)) then begin
      MessageBox(1770,"");
      goto LCheckOffLineRecords;  
    end;  
  end;
  curcomp = CurrentCompany;
  SetServerCompany(offlinecomp);
  switch (OffLb.SyncSumPOS) begin
    case 0:
      IVCashr.SerNr = 9999999999;
      if (ReadLastKey("SerNr",IVCashr,1,false)) then begin
        if (openf) then begin
          wn = OpenWindow("OffLineAClass",0,0,"","",RepSpec);
          SelectWindow(wn);
        end;
        res = true;
      end;
    case 1:
      IVCashr.POSSalesNo = -1;
      if (ReadFirstKey("POSSalesNo",IVCashr,1,true)) then begin
        if (openf) then begin
          wn = OpenWindow("OffLineAClass",0,0,"","",RepSpec);
          SelectWindow(wn);
        end;
        res = true;
      end;
  end;
  if (openf) then begin
    if (OffLb.SyncSettings!=0) then begin
      wn = OpenWindow("OffLineFromAClass",0,0,"","",RepSpec);
      SelectWindow(wn);
      res = true;
    end;
  end;
  SetServerCompany(curcomp);
LCheckOffLineRecords:;    
  CheckOffLineRecords = res;
  RETURN;
END;

global
updating procedure ClockOutWClassDo(Boolean automaticclockoutf,Boolean createclockinf)
begin
  Integer err;
  record RcVc RepSpec;
  Integer wn;
  
  if (automaticclockoutf) then begin
    err = ClockOutWClassDoRemote(RepSpec,CurrentUser,CurrentDate,CurrentTime,createclockinf);
    if (err!=0) then begin
      MessageBox(err,"");
    end else begin
      LogoutUser(CurWindow,true);
    end;
  end else begin
    GetWindowRecord(CurWindow,RepSpec);
    err = ClockOutWClassDoRemote(RepSpec,CurrentUser,CurrentDate,CurrentTime,createclockinf);
    if (err!=0) then begin
      MessageBox(err,"");
    end else begin
      switch (RepSpec.ArtMode) begin
        case 1:
          CloseWindow(CurWindow);
          wn = OpenMasterWClass;
        otherwise
          LogoutUser(CurWindow,true);
      end;
    end;
  end;
  return;
end;

global
updating procedure ClockOutWClassAccept()
begin
  ClockOutWClassDo(false,true);
  return;
end;

procedure RunLoginAction(record LoginActionVc LAr)
begin
  Integer linknr,wn;
  record RLinkVc RLr;
  
  wn = FindWindow("MasterWClass");
  switch (LAr.Action) begin
    case kOpenAttachedWindow:
      linknr = 1;
      while (ReadAnyRecordLink(LAr,linknr,RLr)) begin   
        OpenRecordLink(wn,RLr.ToRecidStr,0);
        linknr = linknr + 1;
      end;
  end;
  
end;

global
updating function Boolean OnLogin()
begin
  record IVVc IVr;
  record IVCashVc IVCashr;
  record RestAccVc RestAccr;
  record RestAccVc RestAcc2r;
  record RcVc RepSpec;
  record UserVc Userr;
  record CUVc CUr;
  Integer nwn;
  Boolean res,newf,openmaster;
  record LocalLoginBlock LLb;
  row LocalLoginBlock LLbrw;
  Integer i,rwcnt,onloginaction;
  Boolean resve,rescont,resoffl,reshot;
  string 255 tstr;
  record CashierDefBlock CashDefRec;
  Boolean cleanmail;
  Integer forcestockmaint;
  record LocalLoginOptBlock LLOb;
  record CostAccBlock CAb;
  Integer DBStatus;
  record LocalMachineBlock LMb;
  Boolean savef;
  LongInt VEIVNr;
  array LongInt aVEIVNr,aVEIVComp;  
  string 255 clockinaction,warning;
  Boolean accpetancef;
  record RcVc acptRepSpec;
  string 255 mailboxnr,mailboxname;
  record ActVc Actr;
  record CYBlock CYb;
  record SelCountryBlock SCb;
  record StandardServerBlock StdSrvb;
  Boolean SetServerBuildProductCodef;
  record CurLicensesBlock CLb;
  record AprvlActMaintBlock AAMb;
  
  if (IsStandardProduct) then begin
    if (ClientMode) then begin
      BlockLoad(StdSrvb);
      BlockLoad(CYb);
      if (CYb.CompName==USetStr(20449)) then begin
        BlockLoad(SCb);
        if (SCb.VATLaw>=0) then begin
          CYb.VATLaw = SCb.VATLaw;
          BlockStore(CYb);
        end;
        res = false;
        WelcomeWClassNewInstallClient;
        goto LOnLogin;
      end;
      if (nonblank(StdSrvb.StdSrvProductCode)) then begin
        if (StdSrvb.StdSrvProductCode!=BuildProductCode) then begin
          MessageBox(20448," " & StdSrvb.StdSrvProductCode & " " & BuildProductCode);
          QuitApplication(0,false);
        end;
      end else begin
        StdSrvb.StdSrvProductCode = BuildProductCode;
        BlockStore(StdSrvb);
        SetServerBuildProductCodef = true;
      end;
    end;

    if (ServerMode==false) then begin
      switch (MarketplacePaymentFailed) begin
        case 1:
          MessageBox(37010,"");
//          MessageBox(37010," " & USetStr(37007));
//          OpenHWStore;
        case 2:
//          MessageBox(37011,"");//no needs any more
      end; 
    end;
  end;
  BlockLoad(AAMb);
  BlockLoad(LMb);
  savef = true;
  if (CompileType!=ctWindowsCE and CompileType!=ctSeries80 and CompileType!=ctSeries60 and CompileType!=ctNokiaE90 and CompileType!=ctBPadCE and CompileType!=ctWindowsCELandscape) then begin
/*
    if (PresenceWasSuccessful) then begin // Means that this is called firsttime in OnApplicationStartupComplete, which is CORRECT
// but OnLogin is called Before OnApplicationStartupComplete so that code below is never executed
//and CurrentUser is blank in OnApplicationStartupComplete
//so i swapped that around 
      asyncremote.RegisterAtPresenceServer(CurrentUser,1,1,DeviceOperatingSystem,false);
    end;
*/
    asyncremote.RegisterAtPresenceServer(CurrentUser,1,1,DeviceOperatingSystem,true);
    SendLogAction(kActionLogin,-1,-1,"","Login");
    asyncremote.SendHansaWorldIDUserTask2(CurrentUser,DatabaseID,GuiType);

  end;
  BlockLoad(LLb);
/* This is wierd, if it crashing on Symbian, but I don't see the need for it anyway
  for (i=1;i<=100;i=i+1) begin
    if (GetWindowClass(i)=="DayWClass") then begin
      UpdateBrowses("ActVc");
    end;
  end;
*/
  rwcnt = MatRowCnt(LLb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(LLb,i,LLbrw);
    if (LLbrw.Code==CurrentUser) then begin
      onloginaction = LLbrw.OnLoginWindow;
      i = rwcnt;
    end;
  end;
  if (GatewayMode or ServerMode or SingleUserMode) then begin // Not for normal clients
    cleanmail = true;
  end else begin
    cleanmail = false;
  end;
  
  if (SingleUserMode) then begin
//    AutoSearchForNewerVersion; // This seems to cause crashes when it is sending TX functions...
    BlockLoad(CLb);
    UpdateLicenseStatusNow;
    DoUpdateLicenseStatus(CLb);
  end;
  if (ClientMode) then begin
    InitMarketPlaceLicenseCopytoClient;
    if (LicenseMode==kLicenseModeServer) then begin
      if (SetServerBuildProductCodef) then begin
        SetServerBuildProductCode;
      end;
      asyncremote.OnLoginReadCurLicenses;
    end else begin    
      UpdateLocalUserChargeFields;
      UserLicensesExpired;
      UpdateLocalCompaniesChargeFields;
    end;
  end;
  DBStatus = 1;

  if (IsDoingManagerOverride==false) then begin
  switch (onloginaction) begin  
    case 1:
      reshot = OnLoginRemote_RestAcc(RestAccr,newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,VEIVNr,clockinaction,mailboxnr,mailboxname);
      if (newf) then begin
        nwn = OpenWindow("RestAccDClass",1,0,"","",RestAccr);    
        RestAccVcRecordDefaultsClient(nwn,RestAccr,RestAcc2r,0,0);
        DeselectWindow(nwn,false);
        WindowFieldGoto(nwn,RestAccr,-1,"CustCode",true);
      end else begin
        nwn = OpenWindow("RestAccDClass",1,0,"","",RestAccr);    
        RestAccVcRecordDefaultsClient(nwn,RestAccr,RestAcc2r,0,0);
        WindowFieldGoto(nwn,RestAccr,-1,"CustCode",true);
      end;
      reshot = false;      
    case 2:
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      if ((UserModuleAccess("modHotel")) or (UserModuleAccess("modPP"))) then begin
        RepSpec.d1 = CurrentDate;
        RepSpec.sStartDate = RepSpec.d1;
        RepSpec.LastVer = 1;
        RepSpec.f1 = "";
        RepSpec.f3 = LMb.ResLoc;
        RepSpec.f6 = LMb.ResClass;
        nwn = OpenWindow("ResHotelWClass",1,0,"","",RepSpec);
        if (nwn==0) then begin
          RepSpec.d1 = CurrentDate;
          RepSpec.sStartDate = RepSpec.d1;
          RepSpec.LastVer = 1;
          RepSpec.f1 = "";
          RepSpec.f3 = LMb.ResLoc;
          RepSpec.f6 = LMb.ResClass;
          nwn = OpenWindow("RTMonWClass",1,0,"","",RepSpec);
        end;
        if (nwn!=0) then begin
          reshot = true;
        end;
      end;
      DeselectWindow(nwn,false);
      reshot = false;      
    case 3:
      if (TouchScreenLook) then begin    
        reshot = OnLoginRemote_IV(TouchScreenLook,IVr,newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,VEIVNr,clockinaction,mailboxnr,mailboxname);
        if (newf) then begin
          RecordNew(IVr);
          if (IVDefaultsClient(IVr,IVr,-1,-1)) then begin end;          
          nwn = OpenWindow("IVDClass",1,0,"","",IVr);    
          DeselectWindow(nwn,false);
          if (blank(IVr.CustCode)) then begin
            WindowFieldGoto(nwn,IVr,-1,"CustCode",true);
          end else begin
            WindowFieldGoto(nwn,IVr,0,"ArtCode",true);
          end;
        end else begin
          nwn = OpenWindow("IVDClass",1,0,"","",IVr);    
          if (blank(IVr.CustCode)) then begin
            WindowFieldGoto(nwn,IVr,-1,"CustCode",true);
          end else begin
            WindowFieldGoto(nwn,IVr,0,"ArtCode",true);
          end;
        end;
      end else begin
        goto LOtherwise01;     
      end;
      reshot = false;      
    case 4:
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      OpenTableLayoutCLass(0,"",-1,0);
//      nwn = OpenWindow("TableLayoutClass",1,0,"","",RepSpec);    
      reshot = false;      
    case 5:
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      RepSpec.AccStr = CurrentUser;
      nwn = OpenWindow("ProdRegTimeOClass",1,0,"","",RepSpec);    
      DeselectWindow(nwn,false);
      reshot = false;
    case 6:
      if (ReopenSavedWindows) then begin
        reshot = false;
      end else begin
        accpetancef = false;
        reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
        BlockLoad(LMb);
        RecordNew(IVCashr);
//      IVCashr.CustCode = LMb.DefCustCode;
        IVCashVcRecordDefaultsClientRemote(IVCashr,LMb);
        nwn = OpenWindow("POSPIVCashDClass",1,0,"","",IVCashr);    
        DeselectWindow(nwn,false);
        //WindowFieldGoto(nwn,IVCashr,-1,"ivcashcommand",false);
        WindowFieldGotoForTouchScreen(nwn,-1,"ivcashcommand",false);
      end;
    case 7:
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
//      nwn = OpenWindow("TablesViewWClass",1,0,"","",RepSpec);    
      OpenTableLayoutCLass(0,"",-1,0);
      reshot = false;      
    case 8:
      if (ReopenSavedWindows) then begin
        reshot = false;
      end else begin
        accpetancef = false;
        reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
        RecordNew(IVCashr);
        BlockLoad(LMb);
        IVCashVcRecordDefaultsClientRemote(IVCashr,LMb);
//      if (nonblank(LMb.DefCustCode)) then begin
//        IVCashr.CustCode = LMb.DefCustCode;
//        if (PasteCustInCashInv(IVCashr,LMb.DefLocation,LMb.PLCode,warning)) then begin end;
//      end;
        nwn = OpenWindow("NPTSIVCashDClass",1,0,"","",IVCashr);    
        if (nwn>0) then begin
          DeselectWindow(nwn,false);
        //WindowFieldGoto(nwn,IVCashr,-1,"ivcashcommand",false);
          WindowFieldGotoForTouchScreen(nwn,-1,"ivcashcommand",false);
        end else begin
          reshot = true;
        end;
      end;
    case 9:
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      RecordNew(Actr);
      ActVcRecordDefClient(Actr);
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);    
      DeselectWindow(nwn,false);
      WindowFieldGoto(nwn,Actr,-1,"Comment",false);
    case 10:
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      nwn = OpenWindow("CULClass",1,0,"","",CUr);    
    case 11:
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      nwn = OpenMasterWClass2(mailboxnr,mailboxname);
      nwn = OpenWindow("ToDoWClass",1,0,"",mailboxname,RepSpec);
      acptRepSpec.f1 = CurrentUser;
      PutWindowRecord(nwn,acptRepSpec);
    case 12:   
      accpetancef = false;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      nwn = OpenMasterWClass2(mailboxnr,mailboxname);
      nwn = OpenWindow("BusinessPhoneWClass",1,0,"","",CUr);
      PutWindowString(nwn,"AddressBook",";Company");
      DeselectWindow(nwn,false);  
    otherwise
LOtherwise01:;    
      accpetancef = true;
      reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
      reshot = true;      
      if (accpetancef) then begin
        nwn = OpenMasterWClass2(mailboxnr,mailboxname);
        nwn = OpenToDoWClass(mailboxnr,mailboxname,acptRepSpec);    
      end;
  end;
  end else begin
    accpetancef = true;
    reshot = OnLoginRemote2(newf,resve,rescont,cleanmail,CurrentDate,CurrentTime,CurrentUser,forcestockmaint,DBStatus,aVEIVNr,aVEIVComp,clockinaction,accpetancef,acptRepSpec,mailboxnr,mailboxname);
    reshot = true;      
    if (accpetancef) then begin
      nwn = OpenMasterWClass2(mailboxnr,mailboxname);
      nwn = OpenToDoWClass(mailboxnr,mailboxname,acptRepSpec);    
    end;
  end;
  if (CurrentUser=="$MASTER") then begin
    RecordNew(Userr);
    Userr.Closed = 1;
//    nwn = OpenWindow("US3DClass",1,0,"","",Userr);
    nwn = OpenWindow("NewUserWClass",1,0,"","",Userr);
    savef = false;
    reshot = false;
  end;
  if (resve==false) then begin
    MessageBox(1761,"");
  end;
  if (AAMb.Done==0) then begin
    if (CountRecords("AcceptanceRulesVc")>0) then begin
      MessageBox(37502,"");
    end;
  end;
  if (rescont==false) then begin
    MessageBox(1764,"");
  end;
  if (DBStatus==0) then begin
    if (CurrentUserIsAdmin) then begin
      if (nonblank(CurrentUser) and IsStandardProduct==false and ProductInDemoMode==false) then begin
        nwn = OpenWindow("DBBlessWClass",1,0,"","",RepSpec);
      end else begin
        LiveDBBlessWClass;
      end;
      reshot = false;
    end;
  end;
  if (forcestockmaint>0) then begin
    if ((ProgramType!=typFirstOffice) and 
        (IsBooks==false)) then begin
    MessageBox(1765,"");
/*
    if (forcestockmaint==1) then begin
      ReportDefaults(RepSpec,"RebuildStockVClass");
      RepSpec.repname = "RebuildStockMn";
      nwn = OpenWindow("RebuildStockVClass",1,0,"","",RepSpec);
    end else begin
      BlockLoad(CAb);
      nwn = OpenWindow("CostAccTClass",1,0,"","",CAb);    
    end;
*/
    end;
  end;
  if (aVEIVNr.length>0) then begin
//    RepSpec.f1 = USetStr(20937) & ": " & aVEIVNr[0];
//    RepSpec.long1 = aVEIVComp[0];
    for (i=0;i<aVEIVNr.length;i=i+1) begin
      if (nonblank(RepSpec.f11)) then begin RepSpec.f11 = RepSpec.f11 & ","; end;
      RepSpec.f11 = RepSpec.f11 & aVEIVNr[i];
      if (nonblank(RepSpec.f12)) then begin RepSpec.f12 = RepSpec.f12 & ","; end;
      RepSpec.f12 = RepSpec.f12 & aVEIVComp[i];
    end;
    nwn = OpenWindow("VEIVWClass",1,0,"","",RepSpec);
    reshot = false;
  end;
  if (IsDoingManagerOverride) then begin
    savef = false;
  end;
  if (savef) then begin
    if (nonblank(CurrentUser)) then begin
      BlockLoad(LLOb);
      LLOb.LastUserLoggedIn = CurrentUser;
      BlockStore(LLOb);
    end;
  end;
  
  if (IsOffice(true)) then begin
    SilentlyActivatePersDesktop;
  end;
  if (IsDoingManagerOverride==false) then begin
  switch (clockinaction) begin
    case "clockinactivityexists":
      if (UserCanAction("AllowNoClockInOut",true)==false) and (TypeOfUser==kTypeOfUserTimekeeper) then begin
        ClockOutWClassDo(true,false);
        reshot = false; resoffl = false;
        goto LOnLogin;
      end;
    case "clockinactivityexists_inpast":
      RepSpec.ArtMode = 1;
      nwn = OpenWindow("ClockOutWClass",1,0,"","",RepSpec);
      reshot = false; resoffl = false;
    case "clockinactivitycreated":
      if (UserCanAction("AllowNoClockInOut",true)==false) then begin
        LogoutUser(CurWindow,true);
        reshot = false; resoffl = false;
        goto LOnLogin;
      end else begin
        nwn = OpenWindow("ClockedInWClass",1,0,"","",RepSpec);
        reshot = false; resoffl = false;
      end;
  end;
  resoffl = !CheckOffLineRecords(true);
  end;
LOnLogin:;  
  res = (reshot) and (resoffl);
  if (accpetancef) then begin
    res = false;
  end;
  if (ReopenSavedWindows) then begin
    res = false;
  end;
  if (UseAppStoreEnabler) then begin
    if (LMb.DontShowRateProductWindow==0 and nonblank(StoreID) and ProductInDemoMode==false) then begin
      if (blankdate(LMb.ShowRateProductWindowDate)) then begin
        LMb.ShowRateProductWindowDate = AddDay(CurrentDate,7);
        BlockStore(LMb);
      end;
      if (LMb.ShowRateProductWindowDate<CurrentDate) then begin
        nwn = OpenWindow("RateProductWClass",1,0,"","",RepSpec);
        SelectButton(nwn,"RateProductWClassRate");
      end;
    end;
  end;
/*
not ready yet
  if (IsStandardProduct and GuiType!=kGuiiPhone) then begin
    if (LMb.TutorialWClassCnt>=0) then begin
      RecordClear(RepSpec);
      nwn = OpenWindow("TutorialWClass",1,0,"","",RepSpec);    
      LMb.TutorialWClassCnt = LMb.TutorialWClassCnt + 1;
      BlockStore(LMb);
      if (LMb.TutorialWClassCnt>2) then begin
        PutWindowString(nwn,"TutorialWClassShowOnStartup","true");
      end;
    end;
  end;
*/
  
//  OnLogin2;
LOnLogin:;
  OnLogin = res/* and (forcestockmaint==0)*/;//when offline records it should not open Master Control
  RETURN;
END;

global
procedure OnLoginUpdateCurLicenses(record CurLicensesBlock CLb)
begin
  record CurLicensesBlock oldCLb;
  
  BlockLoad(oldCLb);
  if (ComparePosts(CLb,oldCLb)==false) then begin
    queued.DoUpdateLicenseStatus(CLb); // meybe doesn't need queued
  end;
end;

global
procedure OnLoginAfterMaster()
begin
  record LoginActionVc LAr;
  
  if (HasModCRM) then begin
    if (OpenToDoWasSUCCESSFUL==false) then begin
      SETOpenToDoSUCCESSFUL(true);
      if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
        asyncremote.OpenToDoIfNeededOnLogin;
      end;
    end;
  end;
  
  switch (GuiType) begin
    case kGuiWindowsMobile:
    case kGuiiPhone:
    case kGuiMaemo:
    case kGuiAndroid:
    case kGuiMetro:
    otherwise
      goto LOnLoginAfterMaster99;
  end;
  
  if (IsDoingManagerOverride==false) then begin
    while (LoopMain(LAr,0,true)) begin
      if (SetInSet(CurrentUser,LAr.Users) or LAr.Users=="*") then begin
        RunLoginAction(LAr);
      end;
    end;
  end;
  
LOnLoginAfterMaster99:;
  OnLoginAutomatedSales;
  if (IsStandardProduct) then begin
    if (CountRecords("UserVc")>=2) then begin
      queued.AutomatedSales("HasAccessGroups",kAutomatedSalesTagRandom);
    end;
  end;
end;

global
updating function Boolean OnLogout(string user)
BEGIN
  Boolean res;
  string 255 userstr;
  record SyncStatusBlock SSb;
// called on CLIENT
   
  if (PresenceWasSuccessful) then begin
    userstr = user;
    if (blank(userstr)) then begin
      userstr = CurrentUser;
    end;
    if (UserActive) and ((SingleUserMode) or (ClientMode)) then begin
      asyncremote.RegisterAtPresenceServer(user,0,1,DeviceOperatingSystem,false);
    end;
  end;
  res = OnLogoutRemote(user);
  if (ClientMode) then begin
    asyncremote.LogoutHansaWorldID;
  end;
  
  if (IsLiveSyncPOS and CompanyProgramMode==kProgramModeLiveSync) then begin
    BlockLoad(SSb);
    if ((SSb.InitialSyncDone==1) and (OpenLoginAfterLogout==false)) then begin
      SynchronizeWithServer;
    end;
  end;
  
  OnLogout = true;
  RETURN;  
END;

global
updating procedure ClockOutMasterWsm()
begin
  ClockOutWClassDo(false,false);
  return;
end;

global
updating procedure ClockInWClassDo()
begin
  Integer err;
  
  err = ClockInWClassDoRemote(CurrentUser,CurrentDate,CurrentTime);
  if (err!=0) then begin
    MessageBox(err,"");
  end;
  return;
end;

global
updating procedure ClockInMasterWsm()
begin
  ClockInWClassDo;
  return;
end;

global
procedure ClockOutWClassCancel()
begin
  Integer wn;
  CloseWindow(CurWindow);
  wn = OpenMasterWClass;
  return;
end;

global
procedure ClockedInWClassClose()
begin
  Integer wn;
  
  CloseWindow(CurWindow);
  wn = OpenMasterWClass;
  return;
end;

global
updating procedure OpenBackgroundMasterWsm()
begin
  record LocalMachineBlock LMb;
  
  LMb.NoBackGround = 0;
  BlockStore(LMb);
  OpenMasterWClass;
  return;
end;

updating procedure RateProductWClassExecute(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  GetWindowRecord(wn,RepSpec);
  CloseWindow(wn);
  BlockLoad(LMb);
  if (RepSpec.ArtMode!=0) then begin
    LMb.DontShowRateProductWindow = 1;
  end;
  LMb.ShowRateProductWindowDate = AddDay(CurrentDate,30);
  BlockStore(LMb);
  return;
end;

global
updating procedure RateProductWClassRate()
begin
  RateProductWClassExecute(CurWindow);
  if (UseAppStoreEnabler) then begin
    if (GuiType==kGuiCocoa) then begin
      OpenWebBrowser("macappstore://itunes.apple.com/app/id" & StoreID & "?mt=12");
    end;
    if (GuiType==kGuiiPhone) then begin
//      OpenWebBrowser("itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&id=" & StoreID);
      OpenWebBrowser("https://userpub.itunes.apple.com/WebObjects/MZUserPublishing.woa/wa/addUserReview?id=" & StoreID & "&type=Purple+Software");
    end;
  end;
  return;
end;

global
updating procedure RateProductWClassClose()
begin
  RateProductWClassExecute(CurWindow);
  return;
end;

global
updating function boolean RateProductWClassOnOKWindow(integer wn)
begin
  Boolean res;

  RateProductWClassExecute(CurWindow);
  RateProductWClassOnOKWindow = res;
  return;
end;
