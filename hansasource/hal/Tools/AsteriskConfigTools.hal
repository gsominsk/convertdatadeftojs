external function Integer IsBankHoliday(record BHollVc,Integer,Date);

procedure AddLineToArea(string line,area req)
begin
  AddTextToArea(line,req);
  AddTextToArea(chr(10),req);
  return;
end;

global
function string 255 MakeTrailingSlash(string path)
begin
  string 255 res;
  if (right(path,1)=="/" or right(path,1)=="\\") then begin
    res = path;
  end else begin
    res = path & "/";
  end;
  MakeTrailingSlash = res;
  return;
end;

global
function string 255 SoundFileName(string queueName,Integer es)
begin
  string 255 res;
  
  res = "snd_" & queueName & "_";
  switch (es) begin
    case kAsteriskEventSoundWelcome:
      res = res & "Welcome";
    case kAsteriskEventSoundLineClosed:
      res = res & "LineClosed";
    case kAsteriskEventSoundQueueStart:
      res = res & "QueueStart";
    case kAsteriskEventSoundIVRStart:
      res = res & "IVRStart";
    case kAsteriskEventSoundLineBusy:
      res = res & "LineBusy";
    case kAsteriskEventSoundMusicOnHold:
      res = res & "MusicOnHold";
    case kAsteriskEventSoundIVRClosed:
      res = res & "IVRClosed";
  end;
  SoundFileName = res;
end;

global
procedure MoveFileInPlaceRemote(area afile,string path)
begin
  //Check sanity
  WriteAreaToFile(afile,path,0);
end;

global
procedure MoveAsteriskDirInPlace(string servcode,string localdir)
begin
  record PBXConnectionVc PBXCr;
  Integer i,filecnt;
  area afile;
  string 255 args,remotepath,remoteuser,filename;

  PBXCr.Code = servcode;
  if (ReadFirstMain(PBXCr,1,true)) then begin
    remotepath = MakeTrailingSlash(PBXCr.RemoteConfigDir);
    if (blank(remotepath)) then begin
      remotepath = "/Servers/Asterisk/etc/asterisk/";
    end;
    if (blank(PBXCr.AsteriskController)) then begin
      remoteuser = PBXCr.RemoteUser;
      if (blank(remoteuser)) then begin
        remoteuser = "asterisk";
      end;
      if (nonblank(remoteuser)) then begin
        remoteuser = remoteuser & "@";
      end;
      args = "-avze ""ssh -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o StrictHostKeyChecking=no -o PasswordAuthentication=no"" --partial " & localdir & " " & remoteuser & PBXCr.PBXHost & ":" & remotepath;
      RunProgram("/usr/bin/rsync",args);
    end else begin
      filecnt = CountFilesInDir(localdir);
      for (i = 0; i<filecnt; i = i + 1) begin
        filename = GetFileNameInDir(localdir,i);
        AddFileToArea(MakeTrailingSlash(localdir) & filename,afile,false);
        CallService2(PBXCr.AsteriskController,PBXCr.AsteriskControllerKey).MoveFileInPlaceRemote(afile,MakeTrailingSlash(remotepath) & filename);
      end;
    end;
  end else begin
    LogText(0,"Asterisk server not found: " & servcode);
  end;
end;

global
procedure MoveAsteriskSoundDirInPlace(record PBXConnectionVc PBXCr,string localdir,string remotepath)
begin
  Integer i,filecnt;
  area afile;
  string 255 args,remoteuser,filename;

  if (blank(PBXCr.AsteriskController)) then begin
    remoteuser = PBXCr.RemoteUser;
    if (blank(remoteuser)) then begin
      remoteuser = "asterisk";
    end;
    if (nonblank(remoteuser)) then begin
      remoteuser = remoteuser & "@";
    end;
    args = "-avze ""ssh -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60 -o StrictHostKeyChecking=no -o PasswordAuthentication=no"" --partial " & localdir & " " & remoteuser & PBXCr.PBXHost & ":" & remotepath;
    RunProgram("/usr/bin/rsync",args);
  end else begin
    filecnt = CountFilesInDir(localdir);
    for (i = 0; i<filecnt; i = i + 1) begin
      filename = GetFileNameInDir(localdir,i);
      AddFileToArea(MakeTrailingSlash(localdir) & filename,afile,false);
      CallService2(PBXCr.AsteriskController,PBXCr.AsteriskControllerKey).MoveFileInPlaceRemote(afile,MakeTrailingSlash(remotepath) & filename);
    end;
  end;
end;

global
procedure MoveAsteriskFileInPlace(string servcode,string localfile,string remotefile)
begin
  area afile;
  record PBXConnectionVc PBXCr;
  string 255 args,remotepath,remoteuser;

  PBXCr.Code = servcode;
  if (ReadFirstMain(PBXCr,1,true)) then begin
    remotepath = MakeTrailingSlash(PBXCr.RemoteConfigDir);
    if (blank(remotepath)) then begin
      remotepath = "/Servers/Asterisk/etc/asterisk/";
    end;
    if (blank(PBXCr.AsteriskController)) then begin
      remoteuser = PBXCr.RemoteUser;
      if (blank(remoteuser)) then begin
        remoteuser = "asterisk";
      end;
      if (nonblank(remoteuser)) then begin
        remoteuser = remoteuser & "@";
      end;
      args = localfile & " " & remoteuser & PBXCr.PBXHost & ":" & remotepath & remotefile;
      RunProgram("/usr/bin/scp",args);
    end else begin
      AddFileToArea(localfile,afile,false);
      CallService2(PBXCr.AsteriskController,PBXCr.AsteriskControllerKey).MoveFileInPlaceRemote(afile,remotepath & remotefile);
    end;
  end else begin
    LogText(0,"Asterisk server not found: " & servcode);
  end;
end;

global
procedure MoveAsteriskSoundFileInPlace(record PBXConnectionVc PBXCr,string localfile,string remotefile)
begin
  string 255 args,remoteuser;

  remoteuser = PBXCr.RemoteUser;
  if (blank(remoteuser)) then begin
    remoteuser = "asterisk";
  end;
  if (nonblank(remoteuser)) then begin
    remoteuser = remoteuser & "@";
  end;
  args = localfile & " " & remoteuser & PBXCr.PBXHost & ":" & remotefile;
  RunProgram("/usr/bin/scp",args);
end;


global
procedure ReloadAsterisk(string arg)
begin
  LongInt pos;
  String 255 fname,code,astmod;

  pos = -1;
  GetNextSubstring(arg,pos,":",fname);
  GetNextSubstring(arg,pos,":",code);
  GetNextSubstring(arg,pos,":",astmod);
  ReloadAsteriskConfig(code,astmod);
  if (nonblank(fname)) then begin
    Delete_File(fname);
  end;
end;

function string 255 AsteriskHomeDir(record PBXConnectionVc PBXCr,Boolean localf)
begin
  record LocalAsteriskBlock LocalAsteriskr;
  string 255 res;
  string 255 remotepath;

  if (localf) then begin
    BlockLoad(LocalAsteriskr);
    res = MakeTrailingSlash(LocalAsteriskr.LocalAsteriskDir);
  end else begin
    remotepath = MakeTrailingSlash(PBXCr.RemoteConfigDir);
    res = left(remotepath,len(remotepath)-len("etc/asterisk/"));
    if (blank(res)) then begin
      res = "/";
    end;
  end;
  AsteriskHomeDir = res;
  return;
end;

global
function string 255 AsteriskConfigBaseDir(record PBXConnectionVc PBXCr,Boolean localf)
begin
  string 255 res;

  if (localf) then begin
    res = AsteriskHomeDir(PBXCr,true);
  end else begin
    res = "tmp/" & PBXCr.Code & "/";
  end;
  AsteriskConfigBaseDir = res;
end;

function string 255 AsteriskVarBaseDir(record PBXConnectionVc PBXCr,Boolean localf)
begin
  string 255 res;
  string 255 remotepath;

  if (localf) then begin
    res = AsteriskHomeDir(PBXCr,true);
  end else begin
    remotepath = MakeTrailingSlash(PBXCr.RemoteConfigDir);
    if (remotepath=="/etc/asterisk/") then begin
      res = "/";
    end else begin
      res = left(remotepath,len(remotepath)-len("etc/asterisk/"));
    end;
  end;
  AsteriskVarBaseDir = res;
end;

function string 255 AsteriskLibBaseDir(record PBXConnectionVc PBXCr,Boolean localf)
begin
  string 255 res;
  string 255 remotepath;

  if (localf) then begin
    res = AsteriskHomeDir(PBXCr,true);
  end else begin
    remotepath = MakeTrailingSlash(PBXCr.RemoteConfigDir);
    if (remotepath=="/etc/asterisk/") then begin
      res = "/usr/";
    end else begin
      res = left(remotepath,(len(remotepath)-len("etc/asterisk/")));
    end;
  end;
  AsteriskLibBaseDir = res;
end;


function string 255 AsteriskLocalHomeDir()
begin
  record PBXConnectionVc PBXCr;
  AsteriskLocalHomeDir = AsteriskHomeDir(PBXCr,true);
end;

function string 255 AsteriskPidFile()
begin
  string 255 res;

  res = AsteriskLocalHomeDir & "var/run/asterisk/asterisk.pid";
  //LogText(0,"AsteriskPidFile: " & res);

  AsteriskPidFile = res;
  return;
end;

global
function LongInt AsteriskPid()
begin
  LongInt res;
  LongInt lpid;
  string 255 pid_file;
  Boolean oldwrwi;

  res = -1;
  pid_file = AsteriskPidFile();

  SetFileOnServer(true);
  oldwrwi = SetWebRequestsWhileImporting(true);
  OpenFile(pid_file);
  lpid = StringToLongInt(ImportField);
  CloseFile;
  SetWebRequestsWhileImporting(oldwrwi);
  SetFileOnServer(false);

  if (PidIsRunning(lpid)) then begin
    res = lpid;
  end;
  AsteriskPid = res;
  return;
end;

global
procedure StartAsteriskIfNeeded()
begin
  LongInt lpid;
  string 255 cmd,args;

  lpid = AsteriskPid;
  if (lpid==-1) then begin
    cmd = AsteriskLocalHomeDir & "sbin/asterisk";
    args = "-C " & AsteriskLocalHomeDir & "etc/asterisk/asterisk.conf";
    LogText(0,"Starting Asterisk with command " & cmd & " " & args);
    StartExternalProcess(cmd,args,CurrentPath,"asterisk",0);
  end else begin
      LogText(0,"Asterisk process running, pid:" & lpid);
  end;
end;

global
procedure StopAsterisk()
begin
  LongInt lpid;

  lpid = AsteriskPid;
  if (lpid>0) then begin
    LogText(0,"Stopping Asterisk process " & lpid);
    StopExternalProcess(lpid);
  end;
end;

function string 255 AsteriskAMIUser(record PBXConnectionVc PBXCr)
begin
  AsteriskAMIUser = PBXCr.PBXUser;
  return;
end;

function string 255 AsteriskAMIPassword(record PBXConnectionVc PBXCr)
begin
  AsteriskAMIPassword = PBXCr.PBXPassword;
  return;
end;

function string 255 AsteriskIAXPassword(record PBXConnectionVc PBXCr)
begin
  AsteriskIAXPassword = PBXCr.IAXPassword;
  return;
end;


global
updating procedure CreateAsteriskConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/asterisk.conf";
  AddLineToArea("[directories]",a_conf);
  AddLineToArea("astetcdir => " & AsteriskHomeDir(PBXCr,localf) & "etc/asterisk",a_conf);
  AddLineToArea("astmoddir => " & AsteriskLibBaseDir(PBXCr,localf) & "lib/asterisk/modules",a_conf);
  AddLineToArea("astvarlibdir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/lib/asterisk",a_conf);
  AddLineToArea("astdbdir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/lib/asterisk",a_conf);
  AddLineToArea("astkeydir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/lib/asterisk",a_conf);
  AddLineToArea("astdatadir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/lib/asterisk",a_conf);
  AddLineToArea("astagidir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/lib/asterisk/agi-bin",a_conf);
  AddLineToArea("astspooldir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/spool/asterisk",a_conf);
  AddLineToArea("astrundir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/run/asterisk",a_conf);
  AddLineToArea("astlogdir => " & AsteriskVarBaseDir(PBXCr,localf) & "var/log/asterisk",a_conf);
  AddLineToArea("",a_conf);
  AddLineToArea("[options]",a_conf);
  AddLineToArea("verbose = 10",a_conf);
  AddLineToArea(";debug = 3",a_conf);
  AddLineToArea(";quiet = yes",a_conf);
  AddLineToArea("timestamp = yes",a_conf);
  AddLineToArea("dumpcore = yes",a_conf);
  AddLineToArea("autosystemname = yes",a_conf);
  AddLineToArea(";maxcalls = 100",a_conf);
  AddLineToArea("minmemfree = 5",a_conf);
  AddLineToArea("cache_record_files = yes",a_conf);
  AddLineToArea("record_cache_dir = /tmp",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateCDRConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/cdr.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("enable=yes",a_conf);
  AddLineToArea("unanswered=yes",a_conf);
  AddLineToArea("batch=yes",a_conf);
  AddLineToArea("size=100",a_conf);
  AddLineToArea("time=300",a_conf);
  AddLineToArea("safeshutdown=yes",a_conf);
  AddLineToArea("[csv]",a_conf);
  AddLineToArea("usegmtime=yes",a_conf);
  AddLineToArea("loguniqueid=yes",a_conf);
  AddLineToArea("loguserfield=yes",a_conf);
  AddLineToArea("accountlogs=yes",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateCLIAliasesConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/cli_aliases.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("template=friendly",a_conf);
  AddLineToArea("[friendly]",a_conf);
  AddLineToArea("hangup request=channel request hangup",a_conf);
  AddLineToArea("originate=channel originate",a_conf);
  AddLineToArea("help=core show help",a_conf);
  AddLineToArea("pri intense debug span=pri set debug 2 span",a_conf);
  AddLineToArea("reload=module reload",a_conf);
//  AddLineToArea("[asterisk12](asterisk12_tpl)",a_conf);
//  AddLineToArea("[asterisk14](asterisk14_tpl)",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateCLIPermissionsConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/cli_permissions.conf";
  AddLineToArea("[general]",a_conf);
//  AddLineToArea("[@asterisk]",a_conf); //Only useful if there's a group "asterisk"
//  AddLineToArea("deny=all",a_conf);
//  AddLineToArea("permit=queue show *",a_conf);
  AddLineToArea("[root]",a_conf);
  AddLineToArea("permit=all",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateCodecsConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/codecs.conf";
  AddLineToArea("[speex]",a_conf);
  AddLineToArea("quality => 3",a_conf);
  AddLineToArea("complexity => 2",a_conf);
  AddLineToArea("enhancement => true",a_conf);
  AddLineToArea("vad => true",a_conf);
  AddLineToArea("vbr => true",a_conf);
  AddLineToArea("abr => 0",a_conf);
  AddLineToArea("vbr_quality => 4",a_conf);
  AddLineToArea("dtx => false",a_conf);
  AddLineToArea("preprocess => false",a_conf);
  AddLineToArea("pp_vad => false",a_conf);
  AddLineToArea("pp_agc => false",a_conf);
  AddLineToArea("pp_agc_level => 8000",a_conf);
  AddLineToArea("pp_denoise => false",a_conf);
  AddLineToArea("pp_dereverb => false",a_conf);
  AddLineToArea("pp_dereverb_decay => 0.4",a_conf);
  AddLineToArea("pp_dereverb_level => 0.3",a_conf);
  AddLineToArea("[plc]",a_conf);
  AddLineToArea("genericplc => true",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateDNSMgrConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/dnsmgr.conf";
  AddLineToArea("[general]",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateExtConfigConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/extconfig.conf";
  AddLineToArea("[settings]",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateFeaturesConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/features.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("parkext => 700",a_conf);
  AddLineToArea("parkpos => 701-720",a_conf);
  AddLineToArea("context => parkedcalls",a_conf);
  AddLineToArea("parkinghints=yes",a_conf);
  AddLineToArea("parkingtime => 45",a_conf);
  AddLineToArea("comebacktoorigin=yes",a_conf);
  AddLineToArea("parkedplay=caller",a_conf);
  AddLineToArea("parkedcalltransfers=both",a_conf);
  AddLineToArea("parkedcallreparking=both",a_conf);
  AddLineToArea("parkedmusicclass=HW",a_conf);          //HWASTSPECIAL see CreateMusicOnHoldConf
  AddLineToArea("transferdigittimeout => 3",a_conf);
  AddLineToArea("xfersound=beep",a_conf);
  AddLineToArea("xferfailsound=beeperr",a_conf);
  AddLineToArea("pickupexten=*8",a_conf);
  AddLineToArea("pickupsound=beep",a_conf);
  AddLineToArea("pickupfailsound=beeperr",a_conf);
  AddLineToArea("featuredigittimeout=2000",a_conf);
  AddLineToArea("atxfernoanswertimeout=15",a_conf);
  AddLineToArea("atxferdropcall=yes",a_conf);
  AddLineToArea("atxfercallbackretries=2",a_conf);
  AddLineToArea("[featuremap]",a_conf);
  AddLineToArea("blindxfer => *52",a_conf);
  AddLineToArea("atxfer => *62",a_conf);
  AddLineToArea("parkcall => *72",a_conf);
  AddLineToArea("[applicationmap]",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateIAXConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;
  record PBXConnectionVc PBXC2r;
  record SipTrunk2Vc STr;
  boolean testf,foundf;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/iax.conf";      //HWASTSPECIAL
  AddLineToArea("[general]",a_conf);
  AddLineToArea("bindport=4569",a_conf);
  AddLineToArea("delayreject=yes",a_conf);
  AddLineToArea("srvlookup=yes",a_conf);
  AddLineToArea("language=en",a_conf);
  AddLineToArea("mohinterpret=HW",a_conf);
  AddLineToArea("mohsuggest=HW",a_conf);
  AddLineToArea("bandwidth=low",a_conf);
  AddLineToArea("disallow=all",a_conf);
  AddLineToArea("allow=alaw",a_conf);
  AddLineToArea("allow=ulaw",a_conf);
  AddLineToArea("allow=gsm",a_conf);
  AddLineToArea("allow=g729",a_conf);
  AddLineToArea("jitterbuffer=no",a_conf);
  AddLineToArea("forcejitterbuffer=no",a_conf);
  AddLineToArea("encryption = yes",a_conf);
  AddLineToArea("authdebug=no",a_conf);
  AddLineToArea("autokill=yes",a_conf);

  AddLineToArea("[HW_IAX_USER]",a_conf);
  AddLineToArea("type=user",a_conf);
  AddLineToArea("auth=md5",a_conf);
  AddLineToArea("secret=" & AsteriskIAXPassword(PBXCr),a_conf);
  AddLineToArea("context=HW_IAX_CTX",a_conf);                    //HWASTSPECIAL, see CreateExtensionsConf
  AddLineToArea("requirecalltoken=auto",a_conf);
  AddLineToArea("deny=0.0.0.0/0.0.0.0",a_conf);

  while (LoopMain(PBXC2r,1,true)) begin
    testf = true;
    if (PBXC2r.Closed!=0) then begin testf = false; end;
    if (IsAsteriskPbxType(PBXC2r.PBXType)==false) then begin testf = false; end;
    if (PBXC2r.Code==PBXCr.Code) then begin testf = false; end;
    if (PBXC2r.IAXf==0) then begin testf = false; end;
    if (blank(PBXC2r.PBXHostIP)) then begin testf = false; end;
    if (testf==true) then begin
      AddLineToArea("permit=" & PBXC2r.PBXHostIP,a_conf);
    end;
  end;

  RecordClear(PBXC2r);
  ResetLoop(PBXC2r);
  while (LoopMain(PBXC2r,1,true)) begin
    testf = true;
    if (PBXC2r.Closed!=0) then begin testf = false; end;
    if (IsAsteriskPbxType(PBXC2r.PBXType)==false) then begin testf = false; end;
    if (PBXC2r.Code==PBXCr.Code) then begin testf = false; end;
    if (PBXC2r.IAXf==0) then begin testf = false; end;
    if (testf==true) then begin
      AddLineToArea("[HW_IAX_" & PBXC2r.Code & "]",a_conf); //## was HWUK //here
      AddLineToArea("type=peer",a_conf);
      AddLineToArea("requirecalltoken=yes",a_conf);
      AddLineToArea("host=" & PBXC2r.PBXHostIP,a_conf);
      AddLineToArea("username=HW_IAX_USER",a_conf);
      AddLineToArea("secret=" & AsteriskIAXPassword(PBXC2r),a_conf);
      AddLineToArea("auth=md5",a_conf);
      AddLineToArea("qualify=yes",a_conf);
    end;
  end;

  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (STr.IAXf==0) then begin testf = false; end;
    if (testf) then begin
      AddLineToArea("[" & STr.Username & "]",a_conf);
      AddLineToArea("disallow=all",a_conf);
      AddLineToArea("allow=ulaw",a_conf);
      AddLineToArea("allow=alaw",a_conf);
      AddLineToArea("allow=gsm",a_conf);
      AddLineToArea("allow=g729",a_conf);
      AddLineToArea("context=inboundgw",a_conf);
      AddLineToArea("sendrpid=no",a_conf);
      AddLineToArea("qualify=yes",a_conf);
      AddLineToArea("dtmfmode=rfc2833",a_conf);
      AddLineToArea("insecure=very",a_conf);
      AddLineToArea("nat=yes",a_conf);
      AddLineToArea("canreinvite=no",a_conf);
      AddLineToArea("notransfer=no",a_conf);
      AddLineToArea("auth=plaintext",a_conf);
      AddLineToArea("tos=none",a_conf);
      AddLineToArea("type=friend",a_conf);
      AddLineToArea("host=" & STr.Host,a_conf);
      AddLineToArea("secret=" & STr.Password,a_conf);
      AddLineToArea("register=no",a_conf);
      AddLineToArea("username=" & STr.Username,a_conf);
      AddLineToArea("requirecalltoken=no",a_conf);
    end;
  end;
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateIndicationsConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/indications.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("country=us",a_conf);
  AddLineToArea("[at]",a_conf);
  AddLineToArea("description=Austria",a_conf);
  AddLineToArea("ringcadence=1000,5000",a_conf);
  AddLineToArea("dial=420",a_conf);
  AddLineToArea("busy=420/400,0/400",a_conf);
  AddLineToArea("ring=420/1000,0/5000",a_conf);
  AddLineToArea("congestion=420/200,0/200",a_conf);
  AddLineToArea("callwaiting=420/40,0/1960",a_conf);
  AddLineToArea("dialrecall=420",a_conf);
  AddLineToArea("record=1400/80,0/14920",a_conf);
  AddLineToArea("info=950/330,1450/330,1850/330,0/1000",a_conf);
  AddLineToArea("stutter=380+420",a_conf);
  AddLineToArea("[au]",a_conf);
  AddLineToArea("description=Australia",a_conf);
  AddLineToArea("ringcadence=400,200,400,2000",a_conf);
  AddLineToArea("dial=413+438",a_conf);
  AddLineToArea("busy=425/375,0/375",a_conf);
  AddLineToArea("ring=413+438/400,0/200,413+438/400,0/2000",a_conf);
  AddLineToArea("congestion=425/375,0/375,420/375,0/375",a_conf);
  AddLineToArea("callwaiting=425/200,0/200,425/200,0/4400",a_conf);
  AddLineToArea("dialrecall=413+438",a_conf);
  AddLineToArea("record=!425/1000,!0/15000,425/360,0/15000",a_conf);
  AddLineToArea("info=425/2500,0/500",a_conf);
  AddLineToArea("std=!525/100,!0/100,!525/100,!0/100,!525/100,!0/100,!525/100,!0/100,!525/100",a_conf);
  AddLineToArea("facility=425",a_conf);
  AddLineToArea("stutter=413+438/100,0/40",a_conf);
  AddLineToArea("ringmobile=400+450/400,0/200,400+450/400,0/2000",a_conf);
  AddLineToArea("[bg]",a_conf);
  AddLineToArea("description=Bulgaria",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/250,0/250",a_conf);
  AddLineToArea("callwaiting=425/150,0/150,425/150,0/4000",a_conf);
  AddLineToArea("dialrecall=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("record=1400/425,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=425/1500,0/100",a_conf);
  AddLineToArea("[br]",a_conf);
  AddLineToArea("description=Brazil",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/250,0/250",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/250,0/250,425/750,0/250",a_conf);
  AddLineToArea("callwaiting=425/50,0/1000",a_conf);
  AddLineToArea("dialrecall=350+440",a_conf);
  AddLineToArea("record=425/250,0/250",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330",a_conf);
  AddLineToArea("stutter=350+440",a_conf);
  AddLineToArea("[be]",a_conf);
  AddLineToArea("description=Belgium",a_conf);
  AddLineToArea("ringcadence=1000,3000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/3000",a_conf);
  AddLineToArea("congestion=425/167,0/167",a_conf);
  AddLineToArea("callwaiting=1400/175,0/175,1400/175,0/3500",a_conf);
  AddLineToArea("dialrecall=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=900/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=425/1000,0/250",a_conf);
  AddLineToArea("[ch]",a_conf);
  AddLineToArea("description=Switzerland",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=425/200,0/200,425/200,0/4000",a_conf);
  AddLineToArea("dialrecall=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("record=1400/80,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=425+340/1100,0/1100",a_conf);
  AddLineToArea("[cl]",a_conf);
  AddLineToArea("description=Chile",a_conf);
  AddLineToArea("ringcadence=1000,3000",a_conf);
  AddLineToArea("dial=400",a_conf);
  AddLineToArea("busy=400/500,0/500",a_conf);
  AddLineToArea("ring=400/1000,0/3000",a_conf);
  AddLineToArea("congestion=400/200,0/200",a_conf);
  AddLineToArea("callwaiting=400/250,0/8750",a_conf);
  AddLineToArea("dialrecall=!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,400",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/333,1400/333,1800/333,0/1000",a_conf);
  AddLineToArea("stutter=!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,400",a_conf);
  AddLineToArea("[cn]",a_conf);
  AddLineToArea("description=China",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=450",a_conf);
  AddLineToArea("busy=450/350,0/350",a_conf);
  AddLineToArea("ring=450/1000,0/4000",a_conf);
  AddLineToArea("congestion=450/700,0/700",a_conf);
  AddLineToArea("callwaiting=450/400,0/4000",a_conf);
  AddLineToArea("dialrecall=450",a_conf);
  AddLineToArea("record=950/400,0/10000",a_conf);
  AddLineToArea("info=450/100,0/100,450/100,0/100,450/100,0/100,450/400,0/400",a_conf);
  AddLineToArea("stutter=450+425",a_conf);
  AddLineToArea("[cz]",a_conf);
  AddLineToArea("description=Czech Republic",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425/330,0/330,425/660,0/660",a_conf);
  AddLineToArea("busy=425/330,0/330",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/165,0/165",a_conf);
  AddLineToArea("callwaiting=425/330,0/9000",a_conf);
  AddLineToArea("dialrecall=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425/330,0/330,425/660,0/660",a_conf);
  AddLineToArea("record=1400/500,0/14000",a_conf);
  AddLineToArea("info=950/330,0/30,1400/330,0/30,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=425/450,0/50",a_conf);
  AddLineToArea("[de]",a_conf);
  AddLineToArea("description=Germany",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/480,0/480",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/240,0/240",a_conf);
  AddLineToArea("callwaiting=!425/200,!0/200,!425/200,!0/5000,!425/200,!0/200,!425/200,!0/5000,!425/200,!0/200,!425/200,!0/5000,!425/200,!0/200,!425/200,!0/5000,!425/200,!0/200,!425/200,0",a_conf);
  AddLineToArea("dialrecall=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("record=1400/80,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=425+400",a_conf);
  AddLineToArea("[dk]",a_conf);
  AddLineToArea("description=Denmark",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=!425/200,!0/600,!425/200,!0/3000,!425/200,!0/200,!425/200,0",a_conf);
  AddLineToArea("dialrecall=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("record=1400/80,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=425/450,0/50",a_conf);
  AddLineToArea("[ee]",a_conf);
  AddLineToArea("description=Estonia",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/300,0/300",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=950/650,0/325,950/325,0/30,1400/1300,0/2600",a_conf);
  AddLineToArea("dialrecall=425/650,0/25",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/650,0/325,950/325,0/30,1400/1300,0/2600",a_conf);
  AddLineToArea("stutter=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("[es]",a_conf);
  AddLineToArea("description=Spain",a_conf);
  AddLineToArea("ringcadence=1500,3000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/200,0/200",a_conf);
  AddLineToArea("ring=425/1500,0/3000",a_conf);
  AddLineToArea("congestion=425/200,0/200,425/200,0/200,425/200,0/600",a_conf);
  AddLineToArea("callwaiting=425/175,0/175,425/175,0/3500",a_conf);
  AddLineToArea("dialrecall=!425/200,!0/200,!425/200,!0/200,!425/200,!0/200,425",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/330,0/1000",a_conf);
  AddLineToArea("dialout=500",a_conf);
  AddLineToArea("[fi]",a_conf);
  AddLineToArea("description=Finland",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/300,0/300",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=425/150,0/150,425/150,0/8000",a_conf);
  AddLineToArea("dialrecall=425/650,0/25",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/650,0/325,950/325,0/30,1400/1300,0/2600",a_conf);
  AddLineToArea("stutter=425/650,0/25",a_conf);
  AddLineToArea("[fr]",a_conf);
  AddLineToArea("description=France",a_conf);
  AddLineToArea("ringcadence=1500,3500",a_conf);
  AddLineToArea("dial=440",a_conf);
  AddLineToArea("busy=440/500,0/500",a_conf);
  AddLineToArea("ring=440/1500,0/3500",a_conf);
  AddLineToArea("congestion=440/250,0/250",a_conf);
  AddLineToArea("callwait=440/300,0/10000",a_conf);
  AddLineToArea("dialrecall=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330",a_conf);
  AddLineToArea("stutter=!440/100,!0/100,!440/100,!0/100,!440/100,!0/100,!440/100,!0/100,!440/100,!0/100,!440/100,!0/100,440",a_conf);
  AddLineToArea("[gr]",a_conf);
  AddLineToArea("description=Greece",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425/200,0/300,425/700,0/800",a_conf);
  AddLineToArea("busy=425/300,0/300",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=425/150,0/150,425/150,0/8000",a_conf);
  AddLineToArea("dialrecall=425/650,0/25",a_conf);
  AddLineToArea("record=1400/400,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,0",a_conf);
  AddLineToArea("stutter=425/650,0/25",a_conf);
  AddLineToArea("[hu]",a_conf);
  AddLineToArea("description=Hungary",a_conf);
  AddLineToArea("ringcadence=1250,3750",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/300,0/300",a_conf);
  AddLineToArea("ring=425/1250,0/3750",a_conf);
  AddLineToArea("congestion=425/300,0/300",a_conf);
  AddLineToArea("callwaiting=425/40,0/1960",a_conf);
  AddLineToArea("dialrecall=425+450",a_conf);
  AddLineToArea("record=1400/400,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,0",a_conf);
  AddLineToArea("stutter=350+375+400",a_conf);
  AddLineToArea("[il]",a_conf);
  AddLineToArea("description=Israel",a_conf);
  AddLineToArea("ringcadence=1000,3000",a_conf);
  AddLineToArea("dial=414",a_conf);
  AddLineToArea("busy=414/500,0/500",a_conf);
  AddLineToArea("ring=414/1000,0/3000",a_conf);
  AddLineToArea("congestion=414/250,0/250",a_conf);
  AddLineToArea("callwaiting=414/100,0/100,414/100,0/100,414/600,0/3000",a_conf);
  AddLineToArea("dialrecall=!414/100,!0/100,!414/100,!0/100,!414/100,!0/100,414",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=1000/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,!414/160,!0/160,414",a_conf);
  AddLineToArea("[in]",a_conf);
  AddLineToArea("description=India",a_conf);
  AddLineToArea("ringcadence=400,200,400,2000",a_conf);
  AddLineToArea("dial=400*25",a_conf);
  AddLineToArea("busy=400/750,0/750",a_conf);
  AddLineToArea("ring=400*25/400,0/200,400*25/400,0/2000",a_conf);
  AddLineToArea("congestion=400/250,0/250",a_conf);
  AddLineToArea("callwaiting=400/200,0/100,400/200,0/7500",a_conf);
  AddLineToArea("dialrecall=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,0/1000",a_conf);
  AddLineToArea("stutter=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("[it]",a_conf);
  AddLineToArea("description=Italy",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425/200,0/200,425/600,0/1000",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=425/400,0/100,425/250,0/100,425/150,0/14000",a_conf);
  AddLineToArea("dialrecall=470/400,425/400",a_conf);
  AddLineToArea("record=1400/400,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,0",a_conf);
  AddLineToArea("stutter=470/400,425/400",a_conf);
  AddLineToArea("[lt]",a_conf);
  AddLineToArea("description=Lithuania",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/350,0/350",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=425/150,0/150,425/150,0/4000",a_conf);
  AddLineToArea("dialrecall=425/500,0/50",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,0",a_conf);
  AddLineToArea("stutter=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("[jp]",a_conf);
  AddLineToArea("description=Japan",a_conf);
  AddLineToArea("ringcadence=1000,2000",a_conf);
  AddLineToArea("dial=400",a_conf);
  AddLineToArea("busy=400/500,0/500",a_conf);
  AddLineToArea("ring=400+15/1000,0/2000",a_conf);
  AddLineToArea("congestion=400/500,0/500",a_conf);
  AddLineToArea("callwaiting=400+16/500,0/8000",a_conf);
  AddLineToArea("dialrecall=!400/200,!0/200,!400/200,!0/200,!400/200,!0/200,400",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,0",a_conf);
  AddLineToArea("stutter=!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,400",a_conf);
  AddLineToArea("[mx]",a_conf);
  AddLineToArea("description=Mexico",a_conf);
  AddLineToArea("ringcadence=2000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/250,0/250",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/250,0/250",a_conf);
  AddLineToArea("callwaiting=425/200,0/600,425/200,0/10000",a_conf);
  AddLineToArea("dialrecall=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/330,0/30,1400/330,0/30,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("[my]",a_conf);
  AddLineToArea("description=Malaysia",a_conf);
  AddLineToArea("ringcadence=2000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/400,0/200",a_conf);
  AddLineToArea("congestion=425/500,0/500",a_conf);
  AddLineToArea("[nl]",a_conf);
  AddLineToArea("description=Netherlands",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/250,0/250",a_conf);
  AddLineToArea("callwaiting=425/500,0/9500",a_conf);
  AddLineToArea("dialrecall=425/500,0/50",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=425/500,0/50",a_conf);
  AddLineToArea("[no]",a_conf);
  AddLineToArea("description=Norway",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=425/200,0/600,425/200,0/10000",a_conf);
  AddLineToArea("dialrecall=470/400,425/400",a_conf);
  AddLineToArea("record=1400/400,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,0",a_conf);
  AddLineToArea("stutter=470/400,425/400",a_conf);
  AddLineToArea("[nz]",a_conf);
  AddLineToArea("description=New Zealand",a_conf);
  AddLineToArea("ringcadence=400,200,400,2000",a_conf);
  AddLineToArea("dial=400",a_conf);
  AddLineToArea("busy=400/250,0/250",a_conf);
  AddLineToArea("ring=400+450/400,0/200,400+450/400,0/2000",a_conf);
  AddLineToArea("congestion=400/375,0/375",a_conf);
  AddLineToArea("callwaiting=!400/200,!0/3000,!400/200,!0/3000,!400/200,!0/3000,!400/200",a_conf);
  AddLineToArea("dialrecall=!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,400",a_conf);
  AddLineToArea("record=1400/425,0/15000",a_conf);
  AddLineToArea("info=400/750,0/100,400/750,0/100,400/750,0/100,400/750,0/400",a_conf);
  AddLineToArea("stutter=!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,!400/100,!0/100,400",a_conf);
  AddLineToArea("unobtainable=400/75,0/100,400/75,0/100,400/75,0/100,400/75,0/400",a_conf);
  AddLineToArea("[ph]",a_conf);
  AddLineToArea("description=Philippines",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=480+620/500,0/500",a_conf);
  AddLineToArea("ring=425+480/1000,0/4000",a_conf);
  AddLineToArea("congestion=480+620/250,0/250",a_conf);
  AddLineToArea("callwaiting=440/300,0/10000",a_conf);
  AddLineToArea("dialrecall=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,0",a_conf);
  AddLineToArea("stutter=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("[pl]",a_conf);
  AddLineToArea("description=Poland",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/500,0/500",a_conf);
  AddLineToArea("callwaiting=425/150,0/150,425/150,0/4000",a_conf);
  AddLineToArea("dialrecall=425/500,0/50",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000,!950/330,!1400/330,!1800/330,!0/1000",a_conf);
  AddLineToArea("stutter=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("[pt]",a_conf);
  AddLineToArea("description=Portugal",a_conf);
  AddLineToArea("ringcadence=1000,5000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/5000",a_conf);
  AddLineToArea("congestion=425/200,0/200",a_conf);
  AddLineToArea("callwaiting=440/300,0/10000",a_conf);
  AddLineToArea("dialrecall=425/1000,0/200",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("stutter=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("[ru]",a_conf);
  AddLineToArea("description=Russian Federation / ex Soviet Union",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/350,0/350",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/175,0/175",a_conf);
  AddLineToArea("callwaiting=425/200,0/5000",a_conf);
  AddLineToArea("record=1400/400,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("dialrecall=425/400,0/40",a_conf);
  AddLineToArea("stutter=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("[se]",a_conf);
  AddLineToArea("description=Sweden",a_conf);
  AddLineToArea("ringcadence=1000,5000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("busy=425/250,0/250",a_conf);
  AddLineToArea("ring=425/1000,0/5000",a_conf);
  AddLineToArea("congestion=425/250,0/750",a_conf);
  AddLineToArea("callwaiting=425/200,0/500,425/200,0/9100",a_conf);
  AddLineToArea("dialrecall=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/332,!0/24,!1400/332,!0/24,!1800/332,!0/2024,!950/332,!0/24,!1400/332,!0/24,!1800/332,!0/2024,!950/332,!0/24,!1400/332,!0/24,!1800/332,!0/2024,!950/332,!0/24,!1400/332,!0/24,!1800/332,!0/2024,!950/332,!0/24,!1400/332,!0/24,!1800/332,0",a_conf);
  AddLineToArea("stutter=!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,!425/100,!0/100,425",a_conf);
  AddLineToArea("[sg]",a_conf);
  AddLineToArea("description=Singapore",a_conf);
  AddLineToArea("ringcadence=400,200,400,2000",a_conf);
  AddLineToArea("dial=425",a_conf);
  AddLineToArea("ring=425*24/400,0/200,425*24/400,0/2000",a_conf);
  AddLineToArea("busy=425/750,0/750",a_conf);
  AddLineToArea("congestion=425/250,0/250",a_conf);
  AddLineToArea("callwaiting=425*24/300,0/200,425*24/300,0/3200",a_conf);
  AddLineToArea("stutter=!425/200,!0/200,!425/600,!0/200,!425/200,!0/200,!425/600,!0/200,!425/200,!0/200,!425/600,!0/200,!425/200,!0/200,!425/600,!0/200,425",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/1000",a_conf);
  AddLineToArea("dialrecall=425*24/500,0/500,425/500,0/2500",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("nutone=425/2500,0/500",a_conf);
  AddLineToArea("intrusion=425/250,0/2000",a_conf);
  AddLineToArea("warning=425/624,0/4376",a_conf);
  AddLineToArea("acceptance=425/125,0/125",a_conf);
  AddLineToArea("holdinga=!425*24/500,!0/500",a_conf);
  AddLineToArea("holdingb=!425/500,!0/2500",a_conf);
  AddLineToArea("[th]",a_conf);
  AddLineToArea("description=Thailand",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=400*50",a_conf);
  AddLineToArea("busy=400/500,0/500",a_conf);
  AddLineToArea("ring=420/1000,0/5000",a_conf);
  AddLineToArea("congestion=400/300,0/300",a_conf);
  AddLineToArea("callwaiting=1000/400,10000/400,1000/400",a_conf);
  AddLineToArea("dialrecall=400*50/400,0/100,400*50/400,0/100",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330",a_conf);
  AddLineToArea("stutter=!400/200,!0/200,!400/600,!0/200,!400/200,!0/200,!400/600,!0/200,!400/200,!0/200,!400/600,!0/200,!400/200,!0/200,!400/600,!0/200,400",a_conf);
  AddLineToArea("[uk]",a_conf);
  AddLineToArea("description=United Kingdom",a_conf);
  AddLineToArea("ringcadence=400,200,400,2000",a_conf);
  AddLineToArea("dial=350+440",a_conf);
  AddLineToArea("specialdial=350+440/750,440/750",a_conf);
  AddLineToArea("busy=400/375,0/375",a_conf);
  AddLineToArea("congestion=400/400,0/350,400/225,0/525",a_conf);
  AddLineToArea("specialcongestion=400/200,1004/300",a_conf);
  AddLineToArea("unobtainable=400",a_conf);
  AddLineToArea("ring=400+450/400,0/200,400+450/400,0/2000",a_conf);
  AddLineToArea("callwaiting=400/100,0/4000",a_conf);
  AddLineToArea("specialcallwaiting=400/250,0/250,400/250,0/250,400/250,0/5000",a_conf);
  AddLineToArea("creditexpired=400/125,0/125",a_conf);
  AddLineToArea("confirm=1400",a_conf);
  AddLineToArea("switching=400/200,0/400,400/2000,0/400",a_conf);
  AddLineToArea("info=950/330,0/15,1400/330,0/15,1800/330,0/1000",a_conf);
  AddLineToArea("record=1400/500,0/60000",a_conf);
  AddLineToArea("stutter=350+440/750,440/750",a_conf);
  AddLineToArea("[us]",a_conf);
  AddLineToArea("description=United States / North America",a_conf);
  AddLineToArea("ringcadence=2000,4000",a_conf);
  AddLineToArea("dial=350+440",a_conf);
  AddLineToArea("busy=480+620/500,0/500",a_conf);
  AddLineToArea("ring=440+480/2000,0/4000",a_conf);
  AddLineToArea("congestion=480+620/250,0/250",a_conf);
  AddLineToArea("callwaiting=440/300,0/10000",a_conf);
  AddLineToArea("dialrecall=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,0",a_conf);
  AddLineToArea("stutter=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("[us-old]",a_conf);
  AddLineToArea("description=United States Circa 1950/ North America",a_conf);
  AddLineToArea("ringcadence=2000,4000",a_conf);
  AddLineToArea("dial=600*120",a_conf);
  AddLineToArea("busy=500*100/500,0/500",a_conf);
  AddLineToArea("ring=420*40/2000,0/4000",a_conf);
  AddLineToArea("congestion=500*100/250,0/250",a_conf);
  AddLineToArea("callwaiting=440/300,0/10000",a_conf);
  AddLineToArea("dialrecall=!600*120/100,!0/100,!600*120/100,!0/100,!600*120/100,!0/100,600*120",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,0",a_conf);
  AddLineToArea("stutter=!600*120/100,!0/100,!600*120/100,!0/100,!600*120/100,!0/100,!600*120/100,!0/100,!600*120/100,!0/100,!600*120/100,!0/100,600*120",a_conf);
  AddLineToArea("[tw]",a_conf);
  AddLineToArea("description=Taiwan",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=350+440",a_conf);
  AddLineToArea("busy=480+620/500,0/500",a_conf);
  AddLineToArea("ring=440+480/1000,0/2000",a_conf);
  AddLineToArea("congestion=480+620/250,0/250",a_conf);
  AddLineToArea("callwaiting=350+440/250,0/250,350+440/250,0/3250",a_conf);
  AddLineToArea("dialrecall=300/1500,0/500",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1400/330,!1800/330,0",a_conf);
  AddLineToArea("stutter=!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,!350+440/100,!0/100,350+440",a_conf);
  AddLineToArea("[ve]",a_conf);
  AddLineToArea("description=Venezuela / South America",a_conf);
  AddLineToArea("ringcadence=1000,4000",a_conf);
  AddLineToArea("dial=425",a_conf); 
  AddLineToArea("busy=425/500,0/500",a_conf);
  AddLineToArea("ring=425/1000,0/4000",a_conf);
  AddLineToArea("congestion=425/250,0/250",a_conf);
  AddLineToArea("callwaiting=400+450/300,0/6000",a_conf);
  AddLineToArea("dialrecall=425",a_conf);
  AddLineToArea("record=1400/500,0/15000",a_conf);
  AddLineToArea("info=!950/330,!1440/330,!1800/330,0/1000",a_conf);
  AddLineToArea("[za]",a_conf);
  AddLineToArea("description=South Africa",a_conf);
  AddLineToArea("ringcadence=400,200,400,2000",a_conf);
  AddLineToArea("dial=400*33",a_conf);
  AddLineToArea("ring=400*33/400,0/200,400*33/400,0/2000",a_conf);
  AddLineToArea("callwaiting=400*33/250,0/250,400*33/250,0/250,400*33/250,0/250,400*33/250,0/250",a_conf);
  AddLineToArea("congestion=400/250,0/250",a_conf);
  AddLineToArea("busy=400/500,0/500",a_conf);
  AddLineToArea("dialrecall=350+440",a_conf);
  AddLineToArea("record=1400/500,0/10000",a_conf);
  AddLineToArea("info=950/330,1400/330,1800/330,0/330",a_conf);
  AddLineToArea("stutter=!400*33/100,!0/100,!400*33/100,!0/100,!400*33/100,!0/100,!400*33/100,!0/100,!400*33/100,!0/100,!400*33/100,!0/100,400*33",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateLoggerConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/logger.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("dateformat=%F %T",a_conf);
  AddLineToArea("[logfiles]",a_conf);
  AddLineToArea("console => notice,warning,error",a_conf);
  AddLineToArea("messages => notice,warning,error",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;


global
updating procedure CreateManagerConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  record PBXExtraMngrsBlock PBXExtraMngrsb;
  row PBXExtraMngrsBlock PBXExtraMngrsrw;
  area a_conf;
  string 255 conf_file;
  Integer i,rwcnt;

  BlockLoad(PBXExtraMngrsb);
  rwcnt = MatRowCnt(PBXExtraMngrsb);

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/manager.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("enabled=yes",a_conf);
  AddLineToArea("port=" & PBXCr.PBXPort,a_conf);
  AddLineToArea("bindaddr=0.0.0.0",a_conf);           //##
  AddLineToArea("allowmultiplelogin=yes",a_conf);
  AddLineToArea("displayconnects=yes",a_conf);                  
  AddLineToArea("timestampevents=yes",a_conf);
  AddLineToArea("[" & AsteriskAMIUser(PBXCr) & "]",a_conf);
  AddLineToArea("secret=" & AsteriskAMIPassword(PBXCr),a_conf);
  AddLineToArea("deny=0.0.0.0/0.0.0.0",a_conf);
  if (nonblank(PBXCr.PBXHostIP)) then begin
    AddLineToArea("permit=" & PBXCr.PBXHostIP,a_conf);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PBXExtraMngrsb,i,PBXExtraMngrsrw);
    AddLineToArea("permit=" & PBXExtraMngrsrw.IP,a_conf);
  end;
  AddLineToArea("read=system,call,originate,user",a_conf);
  AddLineToArea("write=system,call,originate,user",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateModulesConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/modules.conf";
  AddLineToArea("[modules]",a_conf);
  AddLineToArea("autoload=yes",a_conf);
  AddLineToArea("noload => res_odbc.so",a_conf);
  AddLineToArea("noload => res_config_odbc.so",a_conf);
  AddLineToArea("noload => pbx_gtkconsole.so",a_conf);
  AddLineToArea("noload => chan_alsa.so",a_conf);
  AddLineToArea("noload => chan_console.so",a_conf);
  AddLineToArea("noload => res_config_curl.so",a_conf);
  AddLineToArea("noload => res_config_ldap.so",a_conf);
  AddLineToArea("noload => res_config_mysql.so",a_conf);
  AddLineToArea("noload => res_config_pgsql.so",a_conf);
  AddLineToArea("noload => res_config_sqlite.so",a_conf);
  AddLineToArea("noload => res_adsi.so",a_conf);
  AddLineToArea("noload => app_adsiprog.so",a_conf);
  AddLineToArea("noload => res_ais.so",a_conf);
  AddLineToArea("noload => res_ael_share.so",a_conf);
  AddLineToArea("noload => res_agi.so",a_conf);
  AddLineToArea("noload => app_alarmreceiver.so",a_conf);
  AddLineToArea("noload => app_amd.so",a_conf);
  AddLineToArea("noload => res_calendar_ews.so",a_conf);
  AddLineToArea("noload => app_image.so",a_conf);
  AddLineToArea("noload => app_ivrdemo.so",a_conf);
  AddLineToArea("noload => app_macro.so",a_conf);
  AddLineToArea("noload => app_milliwatt.so",a_conf);
  AddLineToArea("noload => res_calendar_caldav.so",a_conf);
  AddLineToArea("noload => res_calendar_icalendar.so",a_conf);
  AddLineToArea("noload => res_calendar_exchange.so",a_conf);
  AddLineToArea("noload => app_followme.so",a_conf);
  AddLineToArea("noload => res_calendar.so",a_conf);
  AddLineToArea("noload => cdr_custom.so",a_conf);
  AddLineToArea("noload => cdr_manager.so",a_conf);
  AddLineToArea("noload => cdr_odbc.so",a_conf);
  AddLineToArea("noload => cdr_syslog.so",a_conf);
  AddLineToArea("noload => cdr_mysql.so",a_conf);
  AddLineToArea("noload => cdr_pgsql.so",a_conf);
  AddLineToArea("noload => cdr_radius.so",a_conf);
  AddLineToArea("noload => cdr_sqlite.so",a_conf);
  AddLineToArea("noload => app_ices.so",a_conf);
  AddLineToArea("noload => cdr_sqlite3_custom.so",a_conf);
  AddLineToArea("noload => cdr_syslog.so",a_conf);
  AddLineToArea("noload => cdr_tds.so",a_conf);
  AddLineToArea("noload => cel_custom.so",a_conf);
  AddLineToArea("noload => app_controlplayback.so",a_conf);
  AddLineToArea("noload => app_dahdiras.so",a_conf);
  AddLineToArea("noload => app_fax.so",a_conf);
  AddLineToArea("noload => app_getcpeid.so",a_conf);
  AddLineToArea("noload => app_db.so",a_conf);
  AddLineToArea("noload => app_dictate.so",a_conf);
  AddLineToArea("noload => app_disa.so",a_conf);
  AddLineToArea("noload => app_dumpchan.so",a_conf);
  AddLineToArea("noload => app_externalivr.so",a_conf);
  AddLineToArea("noload => app_dahdibarge.so",a_conf);
  AddLineToArea("noload => app_confbridge.so",a_conf);
  AddLineToArea("noload => app_flash.so",a_conf);
  AddLineToArea("noload => app_chanspy.so",a_conf);
  AddLineToArea("noload => app_channelredirect.so",a_conf);
  AddLineToArea("noload => cel_pgsql.so",a_conf);
  AddLineToArea("noload => cel_radius.so",a_conf);
  AddLineToArea("noload => app_playtones.so",a_conf);
  AddLineToArea("noload => app_readexten.so",a_conf);
  AddLineToArea("noload => app_readfile.so",a_conf);
  AddLineToArea("noload => app_record.so",a_conf);
  AddLineToArea("noload => app_rpt.so",a_conf);
  AddLineToArea("noload => app_saycountpl.so",a_conf);
  AddLineToArea("noload => cel_sqlite3_custom.so",a_conf);
  AddLineToArea("noload => cel_tds.so",a_conf);
  AddLineToArea("noload => app_chanisavail.so",a_conf);
  AddLineToArea("noload => app_celgenuserevent.so",a_conf);
  AddLineToArea("noload => cel_manager.so",a_conf);
  AddLineToArea("noload => cel_odbc.so",a_conf);
  AddLineToArea("noload => res_clioriginate.so",a_conf);
  AddLineToArea("noload => func_enum.so",a_conf);
  AddLineToArea("noload => app_festival.so",a_conf);
  AddLineToArea("noload => chan_gtalk.so",a_conf);
  AddLineToArea("noload => chan_dahdi.so",a_conf);
  AddLineToArea("noload => app_morsecode.so",a_conf);
  AddLineToArea("noload => app_nbscat.so",a_conf);
  AddLineToArea("noload => app_osplookup.so",a_conf);
  AddLineToArea("noload => app_mysql.so",a_conf);
  AddLineToArea("noload => app_parkandannounce.so",a_conf);
  AddLineToArea("noload => app_page.so",a_conf);
  AddLineToArea("noload => res_http_post.so",a_conf);
  AddLineToArea("noload => res_jabber.so",a_conf);
  AddLineToArea("noload => chan_jingle.so",a_conf);
  AddLineToArea("noload => app_meetme.so",a_conf);
  AddLineToArea("noload => chan_mgcp.so",a_conf);
  AddLineToArea("noload => app_minivm.so",a_conf);
  AddLineToArea("noload => chan_oss.so",a_conf);
  AddLineToArea("noload => chan_mobile.so",a_conf);
  AddLineToArea("noload => chan_phone.so",a_conf);
  AddLineToArea("noload => res_phoneprov.so",a_conf);
  AddLineToArea("noload => res_phoneprov.so",a_conf);
  AddLineToArea("noload => res_curl.so",a_conf);
  AddLineToArea("noload => res_fax.so",a_conf);
  AddLineToArea("noload => res_stun_monitor.so",a_conf);
  AddLineToArea("noload => app_sayunixtime.so",a_conf);
  AddLineToArea("noload => app_sendtext.so",a_conf);
  AddLineToArea("noload => app_setcallerid.so",a_conf);
  AddLineToArea("noload => app_skel.so",a_conf);
  AddLineToArea("noload => app_sms.so",a_conf);
  AddLineToArea("noload => app_speech_utils.so",a_conf);
  AddLineToArea("noload => app_talkdetect.so",a_conf);
  AddLineToArea("noload => app_test.so",a_conf);
  AddLineToArea("noload => app_voicemail.so",a_conf);
  AddLineToArea("noload => app_waitforring.so",a_conf);
  AddLineToArea("noload => bridge_builtin_features.so",a_conf);
  AddLineToArea("noload => bridge_multiplexed.so",a_conf);
  AddLineToArea("noload => bridge_simple.so",a_conf);
  AddLineToArea("noload => bridge_softmix.so",a_conf);
  AddLineToArea("noload => chan_skinny.so",a_conf);
  AddLineToArea("noload => res_smdi.so",a_conf);
  AddLineToArea("noload => chan_unistim.so",a_conf);
  AddLineToArea("noload => res_mutestream.so",a_conf);
  AddLineToArea("noload => res_pktccops.so",a_conf);
  AddLineToArea("noload => res_realtime.so",a_conf);
  AddLineToArea("noload => res_snmp.so",a_conf);
  AddLineToArea("noload => res_speech.so",a_conf);
  AddLineToArea("noload => res_timing_kqueue.so",a_conf);
  AddLineToArea("noload => res_timing_pthread.so",a_conf);
  AddLineToArea("noload => pbx_ael.so",a_conf);
  AddLineToArea("noload => pbx_dundi.so",a_conf);
  AddLineToArea("noload => pbx_loopback.so",a_conf);
  AddLineToArea("noload => pbx_lua.so",a_conf);
  AddLineToArea("noload => pbx_realtime.so",a_conf);
  AddLineToArea("noload => pbx_spool.so",a_conf);
  AddLineToArea("noload => cdr_odbc.so",a_conf);
  AddLineToArea("noload => cdr_adaptive_odbc.so",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateMusicOnHoldConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/musiconhold.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("[default]",a_conf);
  AddLineToArea("mode=files",a_conf);
  AddLineToArea("directory=" & AsteriskVarBaseDir(PBXCr,localf) & "var/lib/asterisk/moh",a_conf);
  AddLineToArea("[HW]",a_conf);                 //HWASTSPECIAL
  AddLineToArea("mode=files",a_conf);
  AddLineToArea("directory=" & AsteriskVarBaseDir(PBXCr,localf) & "var/lib/asterisk/moh/HW",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateRTPConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/rtp.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("rtpstart=10000",a_conf);   //##
  AddLineToArea("rtpend=20000",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateQueuesConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;
  record PBXQueueVc PBXQr;
  record SipTrunk2Vc STr;
  boolean testf,foundf,found2f,test2f;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/queues.conf";

  AddLineToArea("[general]",a_conf);
  AddLineToArea("persistentmembers=yes",a_conf);
  AddLineToArea("autofill=yes",a_conf);
  AddLineToArea("monitor-type=MixMonitor",a_conf);
  AddLineToArea("shared_lastcall=no",a_conf);

  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      ResetLoop(PBXQr);
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          AddLineToArea("[HWQUEUE" & PBXQr.Code & "]",a_conf); //was Poland Support
          AddLineToArea("strategy=ringall",a_conf);
          AddLineToArea("joinempty=unavailable,invalid,wrapup",a_conf);
          AddLineToArea("musicclass=HW",a_conf);                        //HWASTSPECIAL see CreateMusicOnHoldConf
          AddLineToArea("wrapuptime=15",a_conf);
          AddLineToArea("ringinuse=no",a_conf);
          AddLineToArea("leavewhenempty=yes,wrapup",a_conf);
          AddLineToArea("eventwhencalled=yes",a_conf);
          AddLineToArea("timeout=30",a_conf);
          AddLineToArea("setinterfacevar=yes",a_conf);
          AddLineToArea("setqueuevar=yes",a_conf);
        end;
      end;
    end;
  end;

/*
  AddLineToArea("[Poland Support]",a_conf);
  AddLineToArea("strategy=ringall",a_conf); //== setting?
  AddLineToArea("joinempty=unavailable,invalid,wrapup",a_conf); //==
  AddLineToArea("musicclass=HW",a_conf); //== ##
  AddLineToArea("wrapuptime=15",a_conf); //== setting?
  AddLineToArea("ringinuse=no",a_conf); //==
  AddLineToArea("leavewhenempty=yes,wrapup",a_conf);
  AddLineToArea("eventwhencalled=yes",a_conf);
  AddLineToArea("timeout=30",a_conf);
  AddLineToArea("setinterfacevar=yes",a_conf);
  AddLineToArea("setqueuevar=yes",a_conf);
*/
  WriteAreaToFile(a_conf,conf_file,0);
end;

updating procedure AddOneUserToSipConf(string UserName,string Password,string CallerIdName,string CallerIdNumber,area a_conf)
begin
  AddLineToArea("[" & UserName & "](HW_USERS)",a_conf);
  AddLineToArea("secret=" & Password,a_conf);
  AddLineToArea("callerid=""" & CallerIdName & """ <" & CallerIdNumber & ">",a_conf);
end;

global
updating procedure CreateSIPConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;
  record SipTrunk2Vc STr;
  row SipTrunk2Vc STrw;
  boolean foundf,testf,test2f;
  Integer i,rwcnt;
  record AsteriskUser2Vc AsteriskUserr;
  record UserVc Userr;
  record GlobalUserVc GUserr;
  string 255 tstr;
  LongInt pos;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/sip.conf";
  AddLineToArea("[general] ",a_conf);
  AddLineToArea("context=inboundgw",a_conf);
  AddLineToArea("srvlookup=yes",a_conf);
  AddLineToArea("defaultexpirey=300 ",a_conf);
  AddLineToArea("allowoverlap=yes",a_conf);
  //AddLineToArea("language=pl",a_conf);              // Skip for now, should work anyway
  AddLineToArea("dtmfmode=auto",a_conf);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  test2f = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (STr.Type!=kAsteriskTrunkTypeOutbound) then begin testf = false; end;
    if (testf) then begin
      if (STr.AllowGuestf) then begin test2f = false; end;
    end;
  end;
  if (test2f) then begin
    AddLineToArea("allowguest=no",a_conf);
  end;
  AddLineToArea("bindport=5060",a_conf);
  AddLineToArea("bindaddr=0.0.0.0",a_conf);
  AddLineToArea("externip=" & PBXCr.PBXHostIP,a_conf);
  AddLineToArea("realm=" & PBXCr.PBXHost,a_conf);
  AddLineToArea("localnet=127.0.0.1",a_conf);
  AddLineToArea("udpbindaddr=0.0.0.0",a_conf);
  AddLineToArea("tcpbindaddr=0.0.0.0",a_conf);
  AddLineToArea("tcpenable=yes",a_conf);
  AddLineToArea("videosupport=no",a_conf);
  AddLineToArea("directmedia=no",a_conf);
  AddLineToArea("autodomain=no",a_conf);
  AddLineToArea("allowexternaldomains=yes",a_conf);
  AddLineToArea("disallow=all",a_conf);
  AddLineToArea("allow=ulaw",a_conf);
  AddLineToArea("allow=alaw",a_conf);
  AddLineToArea("allow=gsm",a_conf);
  AddLineToArea("allow=g729",a_conf);
  AddLineToArea("mohinterpret=default",a_conf);
  AddLineToArea("mohsuggest=default",a_conf);
  AddLineToArea("musicclass=default",a_conf);
  AddLineToArea("callevents=yes",a_conf);
  AddLineToArea("authfailureevents=yes",a_conf);
  AddLineToArea("forwardloopdetected=yes",a_conf);
  AddLineToArea("notifyringing=no",a_conf);
  AddLineToArea("busylevel=2",a_conf);
  AddLineToArea("callcounter=yes",a_conf);
  AddLineToArea("alwaysauthreject=yes",a_conf);
  AddLineToArea("canreinvite=no",a_conf);
  AddLineToArea("nat=yes",a_conf);                    //## Should be OK to always have on
  AddLineToArea("rtcachefriends=yes",a_conf);
  AddLineToArea("rtsavesysname=yes",a_conf);
  AddLineToArea("rtupdate=yes",a_conf);
  AddLineToArea("rtautoclear=yes",a_conf);
  AddLineToArea("subscribecontext=hints",a_conf);

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (STr.Type!=kAsteriskTrunkTypeOutbound) then begin testf = false; end;
    if (testf) then begin
      rwcnt = MatRowCnt(STr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(STr,i,STrw);
        tstr = "register => " & STrw.Username & ":" & STrw.Password;
        if (nonblank(STrw.AuthUsername)) then begin
          tstr = tstr & ":" & STrw.AuthUsername;
        end;
        tstr = tstr & "@" & STrw.Domain;
        if (nonblank(STrw.Extension)) then begin
          tstr = tstr & "/" & STrw.Extension;
        end;
        AddLineToArea(tstr,a_conf);
      end;
    end;
  end;

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (STr.IAXf!=0) then begin testf = false; end;
    if (testf) then begin
      AddLineToArea("[HW_SIPTRUNK_" & STr.Code & "] ",a_conf); //was POLSIPTRUNK
      if (STr.Type==kAsteriskTrunkTypeOutbound) then begin
        AddLineToArea("type=peer",a_conf); // peer == outbound
      end else begin
        AddLineToArea("type=friend",a_conf); // friend == outbound + inbound
      end;
      AddLineToArea("context=inboundgw ",a_conf);
      //AddLineToArea("fromuser=224273620 ",a_conf);          // Skip for now, should work anyway
      AddLineToArea("defaultuser=" & STr.Username,a_conf);    // username,defaultuser, same thing, username for "fromdomain" and "secret"
      AddLineToArea("fromuser=" & STr.Username,a_conf);    // username,defaultuser, same thing, username for "fromdomain" and "secret"
      AddLineToArea("secret=" & STr.Password,a_conf);         // secret, new name is remotesecret
      AddLineToArea("host=" & STr.Host,a_conf);
      if (nonblank(STr.Domain)) then begin
        AddLineToArea("fromdomain=" & STr.Domain,a_conf);
      end;
      AddLineToArea("canreinvite=no ",a_conf);
      AddLineToArea("disallow=all ",a_conf);
      AddLineToArea("allow=alaw ",a_conf);
      AddLineToArea("allow=ulaw ",a_conf);
      AddLineToArea("allow=gsm",a_conf);
      AddLineToArea("allow=g729",a_conf);
      AddLineToArea("nat=yes ",a_conf);                       //## Should be OK to always have on
      if (nonblank(STr.Insecure)) then begin
        AddLineToArea("insecure=" & STr.Insecure,a_conf);
      end else begin
        AddLineToArea("insecure=port,invite",a_conf);
      end;
      if (nonblank(STr.Domain)) then begin
        AddLineToArea("realm=" & STr.Domain,a_conf);
      end;
      //AddLineToArea("language=pl",a_conf);                  // Skip for now
      AddLineToArea("qualify=yes",a_conf);
      if (STr.AllowGuestf) then begin
        AddLineToArea("allowguest=yes",a_conf);
      end else begin
        AddLineToArea("allowguest=no",a_conf);
      end;
      if (nonblank(STr.AllowedIPs)) then begin
        AddLineToArea("deny=0.0.0.0/0.0.0.0",a_conf);
        pos = 0;
        while (GetNextSubstring(STr.AllowedIPs,pos,",",tstr)) begin
          AddLineToArea("permit=" & tstr,a_conf);
        end;
      end;
    end;
  end;

  AddLineToArea("[basic-options](!)",a_conf);
  AddLineToArea("type=friend",a_conf);
  AddLineToArea("host=dynamic",a_conf);
  AddLineToArea("qualify=yes",a_conf);
  AddLineToArea("transport=tcp,udp",a_conf);
  AddLineToArea("callcounter=yes",a_conf);
  AddLineToArea("notifyringing=no",a_conf);
  AddLineToArea("busylevel=3",a_conf);
  AddLineToArea("[HW_USERS](!,basic-options)",a_conf); //was hwpoluser
  AddLineToArea("context=HW_EXTENSIONS",a_conf); //## was HWPOL
  AddLineToArea("setvar=IAXVAR(GROUPID)=HW_EXTENSIONS",a_conf);
  AddLineToArea("nat=yes",a_conf);                            //## Should be OK to always have on
  AddLineToArea("qualifyfreq=10",a_conf);
  while (LoopMain(AsteriskUserr,1,true)) begin
    test2f = false;
    if (AsteriskUserr.Closedf==0) then begin
      if (blank(AsteriskUserr.PBXConnection)) then begin test2f = true; end;
      pos = 0;
      while (GetNextSubstring(AsteriskUserr.PBXConnection,pos,",",tstr)) begin
        if (tstr==PBXCr.Code) then begin
          test2f = true;
        end;
      end;
    end;
    if (test2f) then begin
      AddOneUserToSipConf(AsteriskUserr.UserName,AsteriskUserr.Password,AsteriskUserr.CallerIdName,AsteriskUserr.CallerIdNumber,a_conf);
    end;
  end;
  while (LoopMain(GUserr,1,true)) begin
    test2f = false;
    if (GUserr.Closed==0) then begin
      if (blank(GUserr.AstPBXConnection)) then begin test2f = true; end;
      pos = 0;
      while (GetNextSubstring(GUserr.AstPBXConnection,pos,",",tstr)) begin
        if (tstr==PBXCr.Code) then begin
          test2f = true;
        end;
      end;
    end;
    if (blank(GUserr.AstUserName)) then begin
      test2f = false;
    end;
    if (test2f) then begin
      AddOneUserToSipConf(GUserr.AstUserName,GUserr.AstPassword,GUserr.Name,GUserr.AstCallerIdNumber,a_conf);
    end;
  end;
  while (LoopMain(Userr,1,true)) begin
    test2f = false;
    if (Userr.Closed==0) then begin
      if (blank(Userr.AstPBXConnection)) then begin test2f = true; end;
      pos = 0;
      while (GetNextSubstring(Userr.AstPBXConnection,pos,",",tstr)) begin
        if (tstr==PBXCr.Code) then begin
          test2f = true;
        end;
      end;
    end;
    if (blank(Userr.AstUserName)) then begin
      test2f = false;
    end;
    if (test2f) then begin
      AddOneUserToSipConf(Userr.AstUserName,Userr.AstPassword,Userr.Name,Userr.AstCallerIdNumber,a_conf);
    end;
  end;
  WriteAreaToFile(a_conf,conf_file,0);
end;

function string 255 AstMonthName(Integer monthno)
begin
  string 255 res;
  switch (monthno) begin
    case 1:
      res = "jan";
    case 2:
      res = "feb";
    case 3:
      res = "mar";
    case 4:
      res = "apr";
    case 5:
      res = "may";
    case 6:
      res = "jun";
    case 7:
      res = "jul";
    case 8:
      res = "aug";
    case 9:
      res = "sep";
    case 10:
      res = "oct";
    case 11:
      res = "nov";
    case 12:
      res = "dec";
  end;
  AstMonthName = res;
end;

updating procedure AddBankHolidays(string qcode,string company,area a_conf)
begin
  record CYBlock CYb;
  record BHollVc BHollr;
  Integer oldcomp,compno,i;
  Date d,dp;
  string 4 daystr;

  compno = StringToLongInt(company);
  oldcomp = CurrentCompany;
  dp = CurrentDate;
  if (company!="" and compno>-1) then begin
    SetCompany(compno,false);
  end;
  BlockLoad(CYb);
  RecordClear(BHollr);
  ResetLoop(BHollr);
  BHollr.CountryCode = CYb.CountryCode;
  if (ReadFirstMain(BHollr,1,true)) then begin
    for (i = 0;i<365;i=i+1) begin
      d = AddDay(dp,i);
      if (IsBankHoliday(BHollr,0,d)) then begin
        AddLineToArea(",GotoIfTime(*,*," & d.day & "," & AstMonthName(d.month) & "?" & qcode & ")",a_conf);
        AddTextToArea("same => n",a_conf);
      end;
    end;
  end;
  ResetCompany(oldcomp);
end;


global
updating procedure CreateExtensionsConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;
  record PBXQueueVc PBXQr;
  record SipTrunk2Vc STr;
  record PBXConnectionVc PBXC2r;
  record AsteriskUser2Vc AsteriskUserr;
  record UserVc Userr;
  record GlobalUserVc GUserr;
  record PBXIVRTreeVc PBXIVRTreer;
  row PBXIVRTreeVc PBXIVRTreerw;
  row SipTrunk2Vc STrw;
  boolean foundf,testf,found2f,test2f,test3f,notfirstf;
  Integer i,rwcnt;
  LongInt pos;
  string 255 tstr;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/extensions.conf";
  AddLineToArea("[general]",a_conf);
  AddLineToArea("static=yes",a_conf);
  AddLineToArea("writeprotect=yes",a_conf);
  AddLineToArea("autofallthrough=yes",a_conf);
  AddLineToArea("clearglobalvars=no",a_conf);
  AddLineToArea("priorityjumping=yes",a_conf);
  AddLineToArea("userscontext=hwusers",a_conf);       //HWASTSPECIAL
  AddLineToArea("[globals]",a_conf);

  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      if (STr.IAXf) then begin
        AddLineToArea("HW_SIPTRUNKVAR_" & STr.Code & "=IAX2/" & STr.Username,a_conf);
      end else begin
        AddLineToArea("HW_SIPTRUNKVAR_" & STr.Code & "=SIP/HW_SIPTRUNK_" & STr.Code,a_conf); //was POLAND //was POLSIPTRUNK
      end;
    end;
  end;

  RecordClear(PBXC2r);
  ResetLoop(PBXC2r);
  while (LoopMain(PBXC2r,1,true)) begin
    testf = true;
    if (PBXC2r.Closed!=0) then begin testf = false; end;
    if (IsAsteriskPbxType(PBXC2r.PBXType)==false) then begin testf = false; end;
    if (PBXC2r.Code==PBXCr.Code) then begin testf = false; end;
    if (PBXC2r.IAXf==0) then begin testf = false; end;
    if (testf==true) then begin
      AddLineToArea("HW_IAXVAR_" & PBXC2r.Code & "=IAX2/HW_IAX_" & PBXC2r.Code,a_conf); //was UK //was HWUK
    end;
  end;

  AddLineToArea("[HW_IAX_CTX]",a_conf);                    //HWASTSPECIAL, see CreateExtensionsConf
  AddLineToArea("include => HW_NUMBERS",a_conf); //was hwpolnumbers
  AddLineToArea("include => HW_TRUNK",a_conf);             //HWASTSPECIAL, see CreateTrunksConf
  AddLineToArea("[HansaWorld]",a_conf);;                   //HWASTSPECIAL, required for our Asterisk call integration
  AddLineToArea("include => HW_IAX_CTX",a_conf);;          //HWASTSPECIAL, see CreateExtensionsConf
  AddLineToArea("include => parkedcalls",a_conf);
  AddLineToArea("include => queueloginout",a_conf);
  AddLineToArea("[hints]",a_conf);

  while (LoopMain(AsteriskUserr,1,true)) begin
    test3f = false;
    if (AsteriskUserr.Closedf==0) then begin
      if (blank(AsteriskUserr.PBXConnection)) then begin test3f = true; end;
      pos = 0;
      while (GetNextSubstring(AsteriskUserr.PBXConnection,pos,",",tstr)) begin
        if (tstr==PBXCr.Code) then begin
          test3f = true;
        end;
      end;
      if (test3f) then begin
        AddLineToArea("exten => " & AsteriskUserr.UserName & ",hint,SIP/" & AsteriskUserr.UserName,a_conf);
      end;
    end;
  end;
  while (LoopMain(GUserr,1,true)) begin
    test3f = false;
    if (GUserr.Closed==0) then begin
      if (blank(GUserr.AstPBXConnection)) then begin test3f = true; end;
      pos = 0;
      while (GetNextSubstring(GUserr.AstPBXConnection,pos,",",tstr)) begin
        if (tstr==PBXCr.Code) then begin
          test3f = true;
        end;
      end;
      if (blank(GUserr.AstUserName)) then begin
        test3f = false;
      end;
      if (test3f) then begin
        AddLineToArea("exten => " & GUserr.AstUserName & ",hint,SIP/" & GUserr.AstUserName,a_conf);
      end;
    end;
  end;
  while (LoopMain(Userr,1,true)) begin
    test3f = false;
    if (Userr.Closed==0) then begin
      if (blank(Userr.AstPBXConnection)) then begin test3f = true; end;
      pos = 0;
      while (GetNextSubstring(Userr.AstPBXConnection,pos,",",tstr)) begin
        if (tstr==PBXCr.Code) then begin
          test3f = true;
        end;
      end;
      if (blank(Userr.AstUserName)) then begin
        test3f = false;
      end;
      if (test3f) then begin
        AddLineToArea("exten => " & Userr.AstUserName & ",hint,SIP/" & Userr.AstUserName,a_conf);
      end;
    end;
  end;
  AddLineToArea("[HW_EXTENSIONS]",a_conf); //was HWPOL
  AddLineToArea("include => HW_NUMBERS",a_conf); //was hwpolnumbers
  AddLineToArea("include => queueloginout",a_conf);
  AddLineToArea("include => HW_TRUNK",a_conf);         //HWASTSPECIAL, see CreateTrunksConf
  AddLineToArea("[HW_NUMBERS]",a_conf); //was hwpolnumbers

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      ResetLoop(PBXQr);
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.Extension=="") then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          pos = 0;
          while (GetNextSubstring(PBXQr.Extension,pos,",",tstr)) begin
            AddLineToArea("exten => _" & tstr & ",1,Goto(HW_Q_" & PBXQr.Code & ",s,1)",a_conf); //was hwpolofficequeue
          end;
        end;
      end;
      ResetLoop(PBXIVRTreer);
      PBXIVRTreer.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXIVRTreer,1,found2f)) begin
        test2f = true;
        if (PBXIVRTreer.Closed!=0) then begin test2f = false; end;
        if (PBXIVRTreer.Extension=="") then begin test2f = false; end;
        if (PBXIVRTreer.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          pos = 0;
          while (GetNextSubstring(PBXIVRTreer.Extension,pos,",",tstr)) begin
            AddLineToArea("exten => _" & tstr & ",1,Goto(HW_IVR_" & PBXIVRTreer.Code & ",s,1)",a_conf);
          end;
        end;
      end;
    end;
  end;

  //AddLineToArea("exten => 525841305,1,Playback(pl/wmfax-new)",a_conf);  //##
  //AddLineToArea("exten => 224013403,1,Playback(pl/wmfax-new)",a_conf);  //##
  //## should ring all if no queue

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      ResetLoop(PBXQr);
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          AddLineToArea("[HW_Q_" & PBXQr.Code & "]",a_conf); //was hwpolofficequeue
          AddLineToArea("exten => s,1,Answer()",a_conf);
          AddLineToArea("same => n,Set(CALLERID(num-pres)=allowed)",a_conf);
          AddLineToArea("same => n,MSet(Q=" & PBXQr.Code & ",L=" & PBXQr.Code & ")",a_conf); //was Q=HW POL Sales
          AddLineToArea("same => n,Set(CALLERID(all)=""${Q} ${L}: ${CALLERID(num)}<${CALLERID(num)}>"")",a_conf);
          AddLineToArea("same => n,Ringing",a_conf);
          AddLineToArea("same => n,UserEvent(Queue,Type: Reached,Code: " & PBXQr.Code & ",Caller: ${CALLERID(num)})",a_conf)
          AddLineToArea("same => n,Wait(2)",a_conf);
          AddLineToArea("same => n,GoTo(HW_QUEUE_TIMES,s,HW_JUMP_Q_" & PBXQr.Code & ")",a_conf); //was polopenclosed
          AddLineToArea("same => n(o),Verbose(0,Playing Queue Start Message...)",a_conf);
          AddLineToArea("same => n,UserEvent(Queue,Type: Open,Code: " & PBXQr.Code & ",Caller: ${CALLERID(num)})",a_conf)
          AddLineToArea("same => n(QueueStart),Playback(" & SoundFileName(PBXQr.Code,kAsteriskEventSoundQueueStart) & ")",a_conf);   //was pl/general_pol
          AddLineToArea("same => n,NoOp(SIPCALLID: ${SIPCALLID})",a_conf);
          AddLineToArea("same => n,Verbose(0,Incoming call [${UNIQUEID}] to ${Q} from number: ${CALLERID(num)})",a_conf);
          AddLineToArea("same => n,Verbose(0,...trying ${L} queue...)",a_conf);
          AddLineToArea("same => n(queue),Queue(HWQUEUE" & PBXQr.Code & ",Rtk,,,30,,,agent,)",a_conf); //was Poland Support
          AddLineToArea("same => n,ExecIf($[""${QUEUESTATUS}"" = ""JOINEMPTY""]?Verbose(0,Nobody is available (incl. wrapup time) in ${Q}):Verbose(0,Increase verbosity to check what goes wrong with adding calls to ${Q} queue!))",a_conf);
          AddLineToArea("same => n,GosubIf($[""${QUEUESTATUS}"" = ""JOINEMPTY""]?HW_QUEUE_FALLBACK_" & PBXQr.Code & ",s,1)",a_conf);
//          AddLineToArea("same => n,ExecIf($[""${size}"" > ""1""]?Verbose(0,Call forwarding for ${L} line seems to be activated, trying ${number}...))",a_conf);
//          AddLineToArea("same => n,ExecIf($[""${size}"" > ""1""]?Dial(${trunk}/${number}):Verbose(0,Call forwarding for ${L} line is inactive...))",a_conf);
          AddLineToArea("same => n,NoOp(${DIALSTATUS})",a_conf);
          AddLineToArea("same => n,Verbose(0,...nobody available, playing music on hold...)",a_conf);
          AddLineToArea("same => n,Playback(" & SoundFileName(PBXQr.Code,kAsteriskEventSoundLineBusy) & ")",a_conf);  //was pl/line_busy_pol
          AddLineToArea("same => n,MusicOnHold(HW,20)",a_conf);               //HWASTSPECIAL
          AddLineToArea("same => n,Verbose(0,...trying ${L} queue...) ",a_conf);
          AddLineToArea("same => n,Goto(queue)",a_conf);
          AddLineToArea("same => n,Hangup()",a_conf);
        end;
      end;
      ResetLoop(PBXIVRTreer);
      PBXIVRTreer.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXIVRTreer,1,found2f)) begin
        test2f = true;
        if (PBXIVRTreer.Closed!=0) then begin test2f = false; end;
        if (PBXIVRTreer.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          AddLineToArea("[HW_IVR_" & PBXIVRTreer.Code & "]",a_conf);
          AddLineToArea("exten => s,1,Answer()",a_conf);
          AddLineToArea("same => n,MSet(Q=" & PBXIVRTreer.Code & ",L=" & PBXIVRTreer.Code & ")",a_conf);
          AddLineToArea("same => n,Set(CALLERID(all)=""${Q} ${L}: ${CALLERID(num)}<${CALLERID(num)}>"")",a_conf);
          AddLineToArea("same => n,Ringing",a_conf);
          AddLineToArea("same => n,UserEvent(IVRTree,Type: Reached,Code: " & PBXIVRTreer.Code & ",Caller: ${CALLERID(num)})",a_conf)
          AddLineToArea("same => n,Wait(2)",a_conf);
          AddLineToArea("same => n,GoTo(HW_QUEUE_TIMES,s,HW_JUMP_IVR_" & PBXIVRTreer.Code & ")",a_conf);
          AddLineToArea("same => n(o),Verbose(0,Playing IVR...)",a_conf);
          AddLineToArea("same => n,UserEvent(IVRTree,Type: Open,Code: " & PBXIVRTreer.Code & ",Caller: ${CALLERID(num)})",a_conf)
          AddLineToArea("same => n(IVRstart),BackGround(" & SoundFileName(PBXIVRTreer.Code,kAsteriskEventSoundIVRStart) & ")",a_conf);
          if (PBXIVRTreer.Interval>0) then begin
            AddLineToArea("same => n,Verbose(0,  [${UNIQUEID}] Waiting for caller input...)",a_conf);
            AddLineToArea("same => n,WaitExten(" & PBXIVRTreer.Interval & ")",a_conf);
          end else begin
            AddLineToArea("same => n,Verbose(0,  [${UNIQUEID}] Waiting for caller input...)",a_conf);
            AddLineToArea("same => n,WaitExten(3)",a_conf);
          end;
          AddLineToArea("same => n,Verbose(0,  [${UNIQUEID}] Caller did not select anything, restarting IVR...)",a_conf);
          AddLineToArea("same => n,GoTo(IVRstart)",a_conf);
          rwcnt = MatRowCnt(PBXIVRTreer);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(PBXIVRTreer,i,PBXIVRTreerw);
            if (nonblank(PBXIVRTreerw.Queue)) then begin
              AddLineToArea("exten => " & PBXIVRTreerw.Number & ",1,Set(L=" & PBXIVRTreerw.Queue & ")",a_conf);
              AddLineToArea("same => n,Verbose(0,  [${UNIQUEID}] Caller selected """& PBXIVRTreerw.Number & """, continuing to ${Q} ${L}...)",a_conf);
              AddLineToArea("same => n,GoTo(HW_Q_" & PBXIVRTreerw.Queue & ",s,1)",a_conf);
            end else begin
              AddLineToArea("exten => " & PBXIVRTreerw.Number & ",1,Set(L=" & PBXIVRTreerw.Menu & ")",a_conf);
              AddLineToArea("same => n,Verbose(0,  [${UNIQUEID}] Caller selected """& PBXIVRTreerw.Number & """, continuing to ${Q} ${L}...)",a_conf);
              AddLineToArea("same => n,GoTo(HW_IVR_" & PBXIVRTreerw.Menu & ",s,1)",a_conf);
            end;
          end;
        end;
      end;
    end;
  end;
  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      ResetLoop(PBXQr);
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          AddLineToArea("[HW_QUEUE_FALLBACK_" & PBXQr.Code & "]",a_conf);
          AddLineToArea("exten => s,1,Wait(0.5)",a_conf);
          if (PBXQr.NoGeneralSIPFallback==0) then begin
            notfirstf = false;
            AsteriskUserr.SerNr = -1;
            ResetLoop(AsteriskUserr);
            while (LoopMain(AsteriskUserr,1,true)) begin
              test3f = false;
              if (AsteriskUserr.Closedf==0 and AsteriskUserr.ExcludeQueueFallbackf==0) then begin
                if (blank(AsteriskUserr.PBXConnection)) then begin test3f = true; end;
                pos = 0;
                while (GetNextSubstring(AsteriskUserr.PBXConnection,pos,",",tstr)) begin
                  if (tstr==STr.PBXConnection) then begin
                    test3f = true;
                  end;
                end;
                if (test3f) then begin
                  if (notfirstf) then begin
                    AddTextToArea("&",a_conf);
                  end else begin
                    AddTextToArea("same => n,Dial(",a_conf);
                  end;
                  notfirstf = true;
                  AddTextToArea("SIP/" & AsteriskUserr.UserName,a_conf);
                end;
              end;
            end;
            RecordClear(GUserr);
            ResetLoop(GUserr);
            while (LoopMain(GUserr,1,true)) begin
              test3f = false;
              if (GUserr.Closed==0 and GUserr.ExcludeQueueFallbackf==0) then begin
                if (blank(GUserr.AstPBXConnection)) then begin test3f = true; end;
                pos = 0;
                while (GetNextSubstring(GUserr.AstPBXConnection,pos,",",tstr)) begin
                  if (tstr==PBXCr.Code) then begin
                    test3f = true;
                  end;
                end;
                if (blank(GUserr.AstUserName)) then begin
                  test3f = false;
                end;
                if (test3f) then begin
                  if (notfirstf) then begin
                    AddTextToArea("&",a_conf);
                  end else begin
                    AddTextToArea("same => n,Dial(",a_conf);
                  end;
                  notfirstf = true;
                  AddTextToArea("SIP/" & GUserr.AstUserName,a_conf);
                end;
              end;
            end;
            RecordClear(Userr);
            ResetLoop(Userr);
            while (LoopMain(Userr,1,true)) begin
              test3f = false;
              if (Userr.Closed==0 and Userr.ExcludeQueueFallbackf==0) then begin
                if (blank(Userr.AstPBXConnection)) then begin test3f = true; end;
                pos = 0;
                while (GetNextSubstring(Userr.AstPBXConnection,pos,",",tstr)) begin
                  if (tstr==PBXCr.Code) then begin
                    test3f = true;
                  end;
                end;
                if (blank(Userr.AstUserName)) then begin
                  test3f = false;
                end;
                if (test3f) then begin
                  if (notfirstf) then begin
                    AddTextToArea("&",a_conf);
                  end else begin
                    AddTextToArea("same => n,Dial(",a_conf);
                  end;
                  notfirstf = true;
                  AddTextToArea("SIP/" & Userr.AstUserName,a_conf);
                end;
              end;
            end;
            if (notfirstf) then begin
              AddTextToArea(",30)" & chr(10),a_conf);
            end;
          end;
          if (nonblank(PBXQr.FallBackNumber)) then begin
            AddLineToArea("same => n,Goto(HW_TRUNK," & PBXQr.FallBackNumber & ",1)",a_conf);
          end;
          AddLineToArea("same => n,Return",a_conf);
        end;
      end;
    end;
  end;
  AddLineToArea("[HW_QUEUE_TIMES]",a_conf); //was polopenclosed
  AddLineToArea("exten => s,1,Wait(0.5)",a_conf);

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      ResetLoop(PBXQr);
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          // "same => n(HW_JUMP_Q_" & PBXQr.Code & "),GotoIfTime(08:00-17:00,mon-fri,*,*?[HW_Q_" & PBXQr.Code & "],s,o)"
          //## Add days and timezone
          AddTextToArea("same => n(HW_JUMP_Q_" & PBXQr.Code & ")",a_conf);
          if (PBXQr.ExcludeBankHolidaysf) then begin
            AddBankHolidays("HW_JUMP_Q_" & PBXQr.Code & "_CLOSED",PBXQr.CRMCompany,a_conf);
          end;
          if (PBXQr.AlwaysClosedf==0) then begin
            if (blanktime(PBXQr.OpenTime) or blanktime(PBXQr.CloseTime)) then begin
              AddLineToArea(",GotoIfTime(*,*,*,*?HW_Q_" & PBXQr.Code & ",s,o)",a_conf); //was hwpolofficequeue
            end else begin
              AddLineToArea(",GotoIfTime(" & PBXQr.OpenTime & "-" & PBXQr.CloseTime & ",mon-fri,*,*?HW_Q_" & PBXQr.Code & ",s,o)",a_conf); //was hwpolofficequeue
              if (nonblanktime(PBXQr.OpenTime2) and nonblanktime(PBXQr.CloseTime2)) then begin
                AddLineToArea("same => n,GotoIfTime(" & PBXQr.OpenTime2 & "-" & PBXQr.CloseTime2 & ",mon-fri,*,*?HW_Q_" & PBXQr.Code & ",s,o)",a_conf);
              end;
            end;
          end;
          AddLineToArea("same => n(HW_JUMP_Q_" & PBXQr.Code & "_CLOSED),Verbose(0,${Q} line is closed, playing ""office closed"" message and hanging up...)",a_conf);
          AddLineToArea("same => n,Background(" & SoundFileName(PBXQr.Code,kAsteriskEventSoundLineClosed) & ")",a_conf); //was pl/office_closed_pol
          AddLineToArea("same => n,Hangup()",a_conf);
        end;
      end;
      ResetLoop(PBXIVRTreer);
      PBXIVRTreer.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXIVRTreer,1,found2f)) begin
        test2f = true;
        if (PBXIVRTreer.Closed!=0) then begin test2f = false; end;
        if (PBXIVRTreer.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          AddTextToArea("same => n(HW_JUMP_IVR_" & PBXIVRTreer.Code & ")",a_conf);
          if (PBXIVRTreer.ExcludeBankHolidaysf) then begin
            AddBankHolidays("HW_JUMP_IVR_" & PBXIVRTreer.Code & "_CLOSED",PBXQr.CRMCompany,a_conf);
          end;
          if (PBXIVRTreer.AlwaysClosedf==0) then begin
            if (blanktime(PBXIVRTreer.OpenTime) or blanktime(PBXIVRTreer.CloseTime)) then begin
              AddLineToArea(",GotoIfTime(*,*,*,*?HW_IVR_" & PBXIVRTreer.Code & ",s,o)",a_conf); //was hwpolofficequeue
            end else begin
              AddLineToArea(",GotoIfTime(" & PBXIVRTreer.OpenTime & "-" & PBXIVRTreer.CloseTime & ",mon-fri,*,*?HW_IVR_" & PBXIVRTreer.Code & ",s,o)",a_conf); //was hwpolofficequeue
              if (nonblanktime(PBXIVRTreer.OpenTime2) and nonblanktime(PBXIVRTreer.CloseTime2)) then begin
                AddLineToArea("same => n,GotoIfTime(" & PBXIVRTreer.OpenTime2 & "-" & PBXIVRTreer.CloseTime2 & ",mon-fri,*,*?HW_IVR_" & PBXIVRTreer.Code & ",s,o)",a_conf);
              end;
            end;
          end;
          AddLineToArea("same => n(HW_JUMP_IVR_" & PBXIVRTreer.Code & "_CLOSED),Verbose(0,${Q} line is closed, playing ""office closed"" message and hanging up...)",a_conf);
          AddLineToArea("same => n,Background(" & SoundFileName(PBXIVRTreer.Code,kAsteriskEventSoundIVRClosed) & ")",a_conf); //was pl/office_closed_pol
          AddLineToArea("same => n,Hangup()",a_conf);
        end;
      end;
    end;
  end;

  AddLineToArea("[agent]",a_conf);
  AddLineToArea("exten => s,1,Verbose(0,Call from number ${CALLERID(num)} was answered by agent ${MEMBERNAME} in ${QUEUENAME} queue)",a_conf);

  AddLineToArea("[queueloginout]",a_conf);
  AddLineToArea("#include queuemembers.conf",a_conf);

  AddLineToArea("[HW_TRUNK]",a_conf);
  AddLineToArea("#include trunks.conf",a_conf);

  AddLineToArea("[inboundgw]",a_conf);

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      rwcnt = MatRowCnt(STr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(STr,i,STrw);
        if (nonblank(STrw.Extension)) then begin
          AddLineToArea("exten => _" & STrw.Extension & ",1,Verbose(0,Setting up an inbound call [ CALLID: ${UNIQUEID} ] from [ ${CALLERID(num)} ] to [ ${EXTEN} ] on channel [ ${CHANNEL(peername)} ])",a_conf);
          AddLineToArea("same => n,Goto(HW_JUMP_" & STr.Code & ")",a_conf);
        end;
      end;
    end;
  end;
  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      ResetLoop(PBXQr);
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.Extension=="") then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          pos = 0;
          while (GetNextSubstring(PBXQr.Extension,pos,",",tstr)) begin
            AddLineToArea("exten => _" & tstr & ",1,Verbose(0,Setting up an inbound call [ CALLID: ${UNIQUEID} ] from [ ${CALLERID(num)} ] to [ ${EXTEN} ] on channel [ ${CHANNEL(peername)} ])",a_conf);
            AddLineToArea("same => n,Goto(HW_JUMP_" & STr.Code & ")",a_conf);
          end;
        end;
      end;
      ResetLoop(PBXIVRTreer);
      PBXIVRTreer.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXIVRTreer,1,found2f)) begin
        test2f = true;
        if (PBXIVRTreer.Closed!=0) then begin test2f = false; end;
        if (PBXIVRTreer.Extension=="") then begin test2f = false; end;
        if (PBXIVRTreer.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          pos = 0;
          while (GetNextSubstring(PBXIVRTreer.Extension,pos,",",tstr)) begin
            AddLineToArea("exten => _" & tstr & ",1,Verbose(0,Setting up an inbound call [ CALLID: ${UNIQUEID} ] from [ ${CALLERID(num)} ] to [ ${EXTEN} ] on channel [ ${CHANNEL(peername)} ])",a_conf);
            AddLineToArea("same => n,Goto(HW_JUMP_" & STr.Code & ")",a_conf);
          end;
        end;
      end;
    end;
  end;
  AddLineToArea("exten => _X.,1,Verbose(0,Setting up an inbound call [ CALLID: ${UNIQUEID} ] from [ ${CALLERID(num)} ] to [ ${EXTEN} ] on channel [ ${CHANNEL(peername)} ])",a_conf);

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      AddLineToArea("same => n,GotoIf($[""${CHANNEL(peername)}"" = ""HW_SIPTRUNK_" & STr.Code & """]?HW_JUMP_" & STr.Code & ")",a_conf); //was POLSIPTRUNK //was poland
    end;
  end;

  AddLineToArea("same => n,Goto(denied)",a_conf);

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      AddLineToArea("same => n(HW_JUMP_" & STr.Code & "),Set(IAXVAR(GROUPID)=HW_EXTENSIONS)",a_conf); //was poland //was HWPOL
      AddLineToArea("same => n,Gosub(allowed)",a_conf);
      AddLineToArea("same => n,Goto(HW_NUMBERS,${EXTEN},1)",a_conf); //was hwpolnumbers
    end;
  end;

  AddLineToArea("same => n(allowed),Verbose(0,Channel source [${CHANNEL(peername)}] of the call [${UNIQUEID}] authenticated, attempting to connect caller to extension: ""${EXTEN}"")",a_conf);
  AddLineToArea("same => n,Return",a_conf);
  AddLineToArea("same => n(denied),Verbose(0,Inbound call forbidden. Hanging up)",a_conf);
  AddLineToArea("same => n,Hangup()",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateTrunksConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;
  record SipTrunk2Vc STr;
  record PBXConnectionVc PBXC2r;
  boolean testf,foundf;
  string 255 defcallid;
  Integer l;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/trunks.conf";

  defcallid = "";
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (STr.CountryCode!=PBXCr.CountryCode) then begin testf = false; end;
    if (testf) then begin
      defcallid = STr.DefaultCallerId;
    end;
  end;
  AddLineToArea("exten => _XX.,1,Set(DIALEXTEN=${FILTER(0-9,${EXTEN})})",a_conf);
  AddLineToArea("same => n,Gosub(groupgw,s,1)",a_conf);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  if (nonblank(defcallid)) then begin
    AddLineToArea("same => n,Set(CALLERID(num)=" & defcallid & ")",a_conf);
  end;
  AddLineToArea("same => n,Dial(${DIALCOUNTRY}/${DIALEXTEN})",a_conf);
  AddLineToArea("same => n,Hangup",a_conf);
  AddLineToArea("exten => _00XX.,1,Set(DIALEXTEN=${FILTER(0-9,${EXTEN})})",a_conf);
  AddLineToArea("same => n,Gosub(groupgw,s,1)",a_conf);
  if (nonblank(defcallid)) then begin
    AddLineToArea("same => n,Set(CALLERID(num)=" & defcallid & ")",a_conf);
  end;
  AddLineToArea("same => n,Dial(${DIALCOUNTRY}/${DIALEXTEN})",a_conf);
  AddLineToArea("same => n,Hangup",a_conf);
  AddLineToArea("exten => _[+]XX.,1,Set(DIALEXTEN=${FILTER(0-9+,${EXTEN})})",a_conf);
  AddLineToArea("same => n,Gosub(groupgw,s,1)",a_conf);
  AddLineToArea("same => n,ExecIf($[""${GOSUB_RETVAL}"" = ""HW_USERS""]?Set(DIALEXTEN=${DIALEXTEN:1}))",a_conf); //was hwpoluser
  if (nonblank(defcallid)) then begin
    AddLineToArea("same => n,Set(CALLERID(num)=" & defcallid & ")",a_conf);
  end;
  AddLineToArea("same => n,Dial(${DIALCOUNTRY}/${DIALEXTEN})",a_conf);
  AddLineToArea("same => n,Hangup",a_conf);

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      l = len(STr.CountryCode);
      AddLineToArea("exten => _[+]" & STr.CountryCode & "XX.,1,Set(DIALEXTEN=" & STr.SkipDigit & "${FILTER(0-9,${EXTEN:" & (l+1) & "})})",a_conf); //was 48
      AddLineToArea("same => n,Gosub(groupgw,s,1)",a_conf);
      AddLineToArea("same => n,Set(CALLERID(num)=" & STr.DefaultCallerId & ")",a_conf); //was +48224273620
      AddLineToArea("same => n,Dial(${HW_SIPTRUNKVAR_" & STr.Code & "}/${DIALEXTEN})",a_conf); //was POLAND
      AddLineToArea("same => n,Hangup",a_conf);
      AddLineToArea("exten => _00" & STr.CountryCode & "XX.,1,Set(DIALEXTEN=" & STr.SkipDigit & "${FILTER(0-9,${EXTEN:" & (l+2) & "})})",a_conf); //was 48
      AddLineToArea("same => n,Gosub(groupgw,s,1)",a_conf);
      AddLineToArea("same => n,Set(CALLERID(num)=" & STr.DefaultCallerId & ")",a_conf); //was +48224273620
      AddLineToArea("same => n,Dial(${HW_SIPTRUNKVAR_" & STr.Code & "}/${DIALEXTEN})",a_conf);
      AddLineToArea("same => n,Hangup",a_conf);
    end;
  end;

  while (LoopMain(PBXC2r,1,true)) begin
    testf = true;
    if (PBXC2r.Closed!=0) then begin testf = false; end;
    if (IsAsteriskPbxType(PBXC2r.PBXType)==false) then begin testf = false; end;
    if (PBXC2r.Code==PBXCr.Code) then begin testf = false; end;
    if (PBXC2r.IAXf==0) then begin testf = false; end;
    if (testf==true) then begin
      AddLineToArea("exten => _[+]" & PBXC2r.CountryCode & "XX.,1,Set(DIALEXTEN=+${FILTER(0-9,${EXTEN})})",a_conf); //was 44
      AddLineToArea("same => n,Gosub(groupgw,s,1)",a_conf);
      AddLineToArea("same => n,Dial(${HW_IAXVAR_" & PBXC2r.Code & "}/${DIALEXTEN})",a_conf); //was UK
      AddLineToArea("same => n,Hangup",a_conf);
      AddLineToArea("exten => _00" & PBXC2r.CountryCode & "XX.,1,Set(DIALEXTEN=${FILTER(0-9,${EXTEN})})",a_conf); //was 44
      AddLineToArea("same => n,Gosub(groupgw,s,1)",a_conf);
      AddLineToArea("same => n,Dial(${HW_IAXVAR_" & PBXC2r.Code & "}/${DIALEXTEN})",a_conf); //was UK
      AddLineToArea("same => n,Hangup",a_conf);
    end;
  end;

  AddLineToArea("exten => _[a-zA-Z].,1,Verbose(0,Setting up SIP-to-SIP call from ${CALLERID(name)} to extension address: ${EXTEN})",a_conf);
  AddLineToArea("same => n,MSet(todomain=${EXTEN},toexten=${EXTEN})",a_conf);
  AddLineToArea("same => n,MSet(todomain=${CUT(todomain,@,2)},toexten=${CUT(toexten,@,1)})",a_conf);
  AddLineToArea("same => n,ExecIf($[""${todomain}"" = """"]?Dial(SIP/${toexten},,TtKk)",a_conf);
  AddLineToArea("same => n,ExecIf($[""${todomain}"" = """ & PBXCr.PBXHost & """]?Dial(SIP/${toexten},,TtKk)",a_conf); //was sip.pol.hansaworld.com

  RecordClear(PBXC2r);
  ResetLoop(PBXC2r);
  while (LoopMain(PBXC2r,1,true)) begin
    testf = true;
    if (PBXC2r.Closed!=0) then begin testf = false; end;
    if (IsAsteriskPbxType(PBXC2r.PBXType)==false) then begin testf = false; end;
    if (PBXC2r.Code==PBXCr.Code) then begin testf = false; end;
    if (PBXC2r.IAXf==0) then begin testf = false; end;
    if (testf==true) then begin
      AddLineToArea("same => n,ExecIf($[""${todomain}"" = """ & PBXC2r.PBXHost & """]?Dial(${HW_IAXVAR_" & PBXC2r.Code & "}/${toexten},,TtKk)",a_conf); //was sip.uk.hansaworld.com //was UK
    end;
  end;

  AddLineToArea("same => n,Verbose(0,[${UNIQUEID}] [!] SIP-to-SIP call to extension ""${EXTEN}"" ended with status: ${DIALSTATUS})",a_conf);
  AddLineToArea("same => n,ExecIf($[""${DIALSTATUS}"" = ""CHANUNAVAIL""]?Playback(silence/1&descending-2tone))",a_conf);
  AddLineToArea("exten => h,1,Hangup()",a_conf);

  AddLineToArea("[groupgw]",a_conf);
  AddLineToArea("exten => s,1,Verbose(0,Setting up an outbound call by ${CALLERID(name)} to number: ${DIALEXTEN} [CALLID: ${UNIQUEID}])",a_conf);
  AddLineToArea("same => n,GoToIf($[""${IAXVAR(GROUPID)}"" = """"]?nogroup)",a_conf);
  AddLineToArea("same => n,Verbose(0,Caller belongs to group ""${IAXVAR(GROUPID)}"", continuing...)",a_conf);
  AddLineToArea("same => n,MSet(GROUP(outbound)=${IAXVAR(GROUPID)},COUNT=${GROUP_COUNT(${IAXVAR(GROUPID)}@outbound)})",a_conf);
  AddLineToArea("same => n,ExecIfTime(*,*,*,*?Set(LIMIT=2))",a_conf);
  AddLineToArea("same => n,ExecIfTime(09:00-20:00,mon-fri,*,*?Set(LIMIT=10))",a_conf);
  AddLineToArea("same => n,GotoIf($[${COUNT} > ${LIMIT}]?denied:continue)",a_conf);
  AddLineToArea("same => n(denied),Verbose(0,[!] Outbound call limit reached for ${IAXVAR(GROUPID)} user [ ${COUNT}/${LIMIT} ] - hanging up..)",a_conf);
  AddLineToArea("same => n,HangUp()",a_conf);
  AddLineToArea("same => n(continue),Verbose(0,  [${UNIQUEID}] Outbound call limit for ${IAXVAR(GROUPID)} user not reached [ ${COUNT}/${LIMIT} ], continuing...)",a_conf);

  AddLineToArea("same => n,GoToIf($[""${IAXVAR(GROUPID)}"" = ""HW_EXTENSIONS""]?HW_USERS,s,1)",a_conf); //was HWPOL //was hwpoluser

  RecordClear(PBXC2r);
  ResetLoop(PBXC2r);
  while (LoopMain(PBXC2r,1,true)) begin
    testf = true;
    if (PBXC2r.Closed!=0) then begin testf = false; end;
    if (IsAsteriskPbxType(PBXC2r.PBXType)==false) then begin testf = false; end;
    if (PBXC2r.Code==PBXCr.Code) then begin testf = false; end;
    if (PBXC2r.IAXf==0) then begin testf = false; end;
    if (testf==true) then begin
      AddLineToArea("same => n,GoToIf($[""${IAXVAR(GROUPID)}"" = ""HW_IAX_" & PBXC2r.Code & """]?hwiaxuser)",a_conf); //was HWUK
    end;
  end;

  AddLineToArea("same => n(nogroup),Verbose(0,This caller is not allowed to make outbound calls, hanging up...)",a_conf);
  AddLineToArea("same => n,Hangup()",a_conf);
  AddLineToArea("same => n(hwiaxuser),Set(CDR(accountcode)=${IAXVAR(GROUPID)})",a_conf); //HWASTSPECIAL
  AddLineToArea("same => n,Return",a_conf);

  AddLineToArea("[HW_USERS]",a_conf); //was hwpoluser
  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      AddLineToArea("exten => s,1,MSet(CDR(accountcode)=${IAXVAR(GROUPID)},DIALCOUNTRY=${HW_SIPTRUNKVAR_" & STr.Code & "})",a_conf); //was POLAND
    end;
  end;

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (STr.CountryCode!=PBXCr.CountryCode) then begin testf = false; end;
    if (testf) then begin
      AddLineToArea("same => n,Set(CALLERID(all)=""" & STr.Comment & """ <" & STr.DefaultCallerId & ">)",a_conf); //was +48224273620
      AddLineToArea("same => n,Set(DIALCOUNTRY=${HW_SIPTRUNKVAR_" & STr.Code & "})",a_conf); //was POLAND
    end;
  end;

  AddLineToArea("same => n,Return",a_conf);

  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure CreateQueueMembersConf(record PBXConnectionVc PBXCr,Boolean localf)
begin
  area a_conf;
  string 255 conf_file;
  record SipTrunk2Vc STr;
  record PBXQueueVc PBXQr;
  boolean testf,foundf,test2f,found2f,firstf,found3f;

  conf_file = AsteriskConfigBaseDir(PBXCr,localf) & "etc/asterisk/queuemembers.conf";

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      ResetLoop(PBXQr);
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          AddLineToArea("exten => *" & STr.CountryCode & "*" & PBXQr.QueueID & "1,1,AddQueueMember(HWQUEUE" & PBXQr.Code & ",,,,${CALLERID(name)},)",a_conf); //was 48  //was 11 //was Poland Support
          AddLineToArea("same => n,Wait(1)",a_conf);
          AddLineToArea("same => n,GoToIf($[""${AQMSTATUS}"" = ""ADDED""]?memberloginok,s,1)",a_conf);
          AddLineToArea("same => n,GoToIf($[""${AQMSTATUS}"" = ""MEMBERALREADY""]?memberalreadythere,s,1)",a_conf);
          AddLineToArea("same => n,Wait(1)",a_conf);
          AddLineToArea("same => n,Hangup()",a_conf);
          AddLineToArea("exten => *" & STr.CountryCode & "*" & PBXQr.QueueID & "0,1,RemoveQueueMember(HWQUEUE" & PBXQr.Code & ",)",a_conf);
          AddLineToArea("same => n,Wait(1)",a_conf);
          AddLineToArea("same => n,GoToIf($[""${RQMSTATUS}"" = ""REMOVED""]?memberlogoffok,s,1)",a_conf);
          AddLineToArea("same => n,Wait(1)",a_conf);
          AddLineToArea("same => n,Hangup()",a_conf);
        end;
      end;
    end;
  end;

  ResetLoop(STr);
  STr.PBXConnection = PBXCr.Code;
  foundf = true;
  while (LoopKey("PBXConnection",STr,1,foundf)) begin
    testf = foundf;
    if (STr.Closedf!=0) then begin testf = false; end;
    if (STr.PBXConnection!=PBXCr.Code) then begin testf = false; end;
    if (testf) then begin
      found3f = false;
      firstf = true;
      ResetLoop(PBXQr);
      PBXQr.SipTrunk = STr.Code;
      found2f = true;
      while (LoopKey("SipTrunk",PBXQr,1,found2f)) begin
        test2f = true;
        if (PBXQr.Closed!=0) then begin test2f = false; end;
        if (PBXQr.SipTrunk!=STr.Code) then begin test2f = false; end;
        if (test2f==true) then begin
          if (firstf) then begin
            firstf = false;
            found3f = true;
            AddLineToArea("exten => *" & STr.CountryCode & "*00,1,RemoveQueueMember(HWQUEUE" & PBXQr.Code & ",)",a_conf); //was 48  //was Poland Support
          end else begin
            AddLineToArea("same => n,RemoveQueueMember(HWQUEUE" & PBXQr.Code & ",)",a_conf);  //was Poland Support
          end;
        end;
      end;
      if (found3f) then begin
        AddLineToArea("same => n,GoTo(memberlogoffok,s,1)",a_conf);
      end;
    end;
  end;

  AddLineToArea("[memberloginok]",a_conf);
  AddLineToArea("exten => s,1,Playback(agent-loginok)",a_conf);
  AddLineToArea("same => n,NoCDR()",a_conf);
  AddLineToArea("same => n,Wait(1)",a_conf);
  AddLineToArea("same => n,Hangup()",a_conf);

  AddLineToArea("[memberlogoffok]",a_conf);
  AddLineToArea("exten => s,1,Playback(silence/1&agent-loggedoff)",a_conf);
  AddLineToArea("same => n,NoCDR()",a_conf);
  AddLineToArea("same => n,Wait(1)",a_conf);
  AddLineToArea("same => n,Hangup()",a_conf);

  AddLineToArea("[memberalreadythere]",a_conf);
  AddLineToArea("exten => s,1,Wait(1)",a_conf);
  AddLineToArea("same => n,NoCDR()",a_conf);
  AddLineToArea("same => n,Wait(1)",a_conf);
  AddLineToArea("same => n,Playback(silence/1&agent-alreadyon)",a_conf);
  AddLineToArea("same => n,Wait(1)",a_conf);
  AddLineToArea("same => n,Hangup()",a_conf);
  WriteAreaToFile(a_conf,conf_file,0);
end;

global
updating procedure GenerateSoundFiles(record PBXConnectionVc PBXCr,Boolean localf)
begin
  record PBXSoundVc PBXSr;
  record Attach2Vc Attach2r;
  record RLinkVc RLr;
  string 255 fname;
  Area a;
  Integer filenr;

  CreateFolderHierarchy(AsteriskConfigBaseDir(PBXCr,localf) & "var/lib/asterisk/sounds/");
  while (LoopMain(PBXSr,1,true)) begin
    if (PBXSr.Event==kAsteriskEventSoundMusicOnHold) then begin
      fname = AsteriskConfigBaseDir(PBXCr,localf) & "var/lib/asterisk/moh/HW/"; //Fix path
      CreateFolderHierarchy(fname);
      filenr = 1;
      while (ReadRecordLink(PBXSr,filenr,Attach2r,RLr)) begin
        if ((nonblank(Attach2r.FileName)) and (Attach2r.Uploading==0)) then begin
          fname = AsteriskConfigBaseDir(PBXCr,localf) & "var/lib/asterisk/moh/HW/" & Attach2r.FileName; //Fix path
          SetAreaZeroSize(a);
          AddAttachFileToArea(Attach2r,a,false);
          Delete_File(fname);
          WriteAreaToFile(a,fname,0);
        end;
        filenr = filenr + 1;
      end;
    end else begin
      fname = AsteriskConfigBaseDir(PBXCr,localf) & "var/lib/asterisk/sounds/" & SoundFileName(PBXSr.Queue,PBXSr.Event) & ".wav"; //Fix path
      filenr = 1;
      while (ReadRecordLink(PBXSr,filenr,Attach2r,RLr)) begin
        if ((nonblank(Attach2r.FileName)) and (Attach2r.Uploading==0)) then begin
          SetAreaZeroSize(a);
          AddAttachFileToArea(Attach2r,a,false);
          Delete_File(fname);
          WriteAreaToFile(a,fname,0);
        end;
        filenr = filenr + 1;
      end;
    end;
  end;
end;
