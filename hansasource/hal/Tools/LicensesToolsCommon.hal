external function Integer InString2(string,string);
external function Boolean ProductInDemoMode();
external procedure SetProductTagModuleBlock(record ModuleBlock);
external function LongInt DateDiff(Date,Date);
external procedure LoadWindowTags();
remote function Boolean LicenseShouldBeMovedToServer(record LicensesVc);
external updating procedure UpdateLocalUserChargeFields();
external updating procedure UpdateLocalCompaniesChargeFields();
remote function Integer GetNrOfActiveUsers();
remote updating procedure UpdateRemoteUserChargeFields();
remote updating procedure UpdateRemoteCompaniesChargeFields();
forward updating function Boolean UserLicensesExpired();

//many_functiontags_in_AddInAppSKU
global
procedure GetSKUDataForLr(record LicensesVc Lr,var string functiontags,var LongInt months,var Integer type)
begin
  Integer setno;
  string 255 tstr,datastr;
  LongInt pos;
  
  switch (Lr.Source) begin
    case kLicItemSourceMacAppStore:
      setno = 536;
    case kLicItemSourceiTunesStore:
      setno = 537;
    case kLicItemSourceAndroidMarket:
      setno = 538;
    case kLicItemSourceCromeWebStore:
      setno = 539;
    case kLicItemSourceWindowsMarketplace:
      setno = 540;
    case kLicItemSourceHansaWorld:
      setno = 541;
  end;
  
  datastr = StringFromStringSet(setno,Lr.StoreSKU);

//  if (TestEnabler and datastr==Lr.StoreSKU) then begin
//    StopAlert("GetSKUDataForLr sku: " & Lr.StoreSKU & " is missing from set no. " & setno);
//  end;

  GetNextSubstring(datastr,pos,":",functiontags);
  
  GetNextSubstring(datastr,pos,":",tstr);
  
  if (SystemMode==kSystemModeDemo) then begin
    type = kLicItemTypeDemo;
  end else begin
    switch (right(tstr,1)) begin
      case "+":
        type = kLicItemTypeRecurring;
        tstr = left(tstr,len(tstr) - 1);
      case "=":
        type = kLicItemTypePermanent;
        tstr = left(tstr,len(tstr) - 1);
      case "<":
        type = kLicItemTypeLimited;
        tstr = left(tstr,len(tstr) - 1);
      otherwise
        type = kLicItemTypeExpiring;
    end;
  end;
  
  months = StringToLongInt(tstr);
end;


global
procedure SetLicenseFunction(var record LicensesVc Lr)
begin
  string 255 functiontags;
  LongInt months;
  Integer type;
  
  if (Lr.Source==kLicItemSourceHansaWorld) then begin
    goto LSetLicenseFunction;
  end;
  
//many_functiontags_in_AddInAppSKU in LicensesVcRecordSaveAfter
  if (blank(Lr.Function)) then begin
    GetSKUDataForLr(Lr,functiontags,months,type);
    Lr.Function = functiontags;
  end;
  
//  Lr.Type = kLicItemTypeExpiring; // should come from string set
//  if (Lr.Type==kLicItemTypeExpiring) then begin
//    //## should be "LastTransDate" if filled and type == recurring
//    Lr.EndDate = AddMonth(Lr.StartDate,StringToInt(tstr));
//  end;
LSetLicenseFunction:;
end;

procedure SetCurLicensesFlag(record LicensesVc Lr,var record CurLicensesBlock CLb)
begin
//look at SetDefaultWindowTags
//  LogText(0,"SetCurLicensesFlag dates: " & Lr.StartDate & " - " & CurrentDate & " - " & Lr.EndDate);
  
//  if (nonblank(Lr.UserCode) and Lr.UserCode!=CurrentUser) then begin
//    if (ServerMode or Lr.UserCode!=ClientLastLoggedInUser) then begin
//      goto LSetCurLicensesFlags;
//    end;
//  end;

  switch (Lr.Type) begin
    case kLicItemTypePermanent:
      // nothing
    case kLicItemTypeExpiring:
      if (CurrentDate<Lr.StartDate) then begin goto LSetCurLicensesFlags; end;
      if (CurrentDate>Lr.EndDate) then begin goto LSetCurLicensesFlags; end;
    case kLicItemTypeRecurring:
      if (CurrentDate<Lr.StartDate) then begin goto LSetCurLicensesFlags; end;
      if (CurrentDate>Lr.EndDate) and (nonblankdate(Lr.EndDate)) then begin goto LSetCurLicensesFlags; end;
    case kLicItemTypeLimited:
      if (Lr.UsedQty>=Lr.Qty) then begin goto LSetCurLicensesFlags; end;
  end;
  
  // should really compare "before" and "after" blocks instead
  // LogText(0,"SetCurLicensesFlag: " & Lr.Function & " type: " & Lr.Type);  
  
  if (Lr.Function!="Company") and (Lr.Function!="User") then begin
    switch (Lr.Type) begin
      case kLicItemTypeDemo:
        SetDefaultFeatureState(Lr.Function,kFeatureDefaultTrial);
        SetFieldValueByName(CLb,Lr.Function,kFeatureTrial,-1);
        SetFeatureStateFromField(Lr.Function,CLb);
      otherwise
        SetFieldValueByName(CLb,Lr.Function,kFeatureOn,-1);
        SetFeatureStateFromField(Lr.Function,CLb);
    end;
  end;

LSetCurLicensesFlags:;
end;

global
procedure SetCurLicensesFlags(record CurLicensesBlock CLb)
begin
  record LicensesVc Lr;
  Boolean found;
  
  if (CurrentCompany>0) then begin
  Lr.Function = "";
  ResetLoop(Lr);
  while (LoopKey("ActiveFunction",Lr,1,true)) begin
    if (SystemMode==kSystemModeDemo) then begin
      if (Lr.Type==kLicItemTypeDemo) then begin
        SetCurLicensesFlag(Lr,CLb);
      end;
    end else begin
      if ((Lr.Type!=kLicItemTypePermanent and Lr.Type!=kLicItemTypeDemo) and (nonblank(Lr.EndDate) and Lr.EndDate<CurrentDate)) then begin
      end else begin
        if (Lr.Type!=kLicItemTypeDemo) then begin
          SetCurLicensesFlag(Lr,CLb);
        end;
      end;
    end;
  end;
  end;
end;

global
updating procedure DoUpdateLicenseStatus(record CurLicensesBlock CLb)
begin
  record CurLicensesBlock oldCLb;

  BlockLoad(oldCLb);

  // only need to compare fields that affect the UI
  oldCLb.NrUsersToCharge = CLb.NrUsersToCharge;

  if (ComparePosts(oldCLb,CLb)) then begin
    goto LDoUpdateLicenseStatus;
  end;

  BlockStore(CLb);
  if (LicenseMode!=kLicenseModeServer) then begin
    UpdateLocalUserChargeFields;
    UpdateLocalCompaniesChargeFields;
    UserLicensesExpired;
  end;
  LoadWindowTags;
  ReloadUserInterface(true);
  ReRunAllWindowDefs;
LDoUpdateLicenseStatus:;
  SetGlobalBoolean("ReloadLicencesTestf",false);
end;

global
updating procedure DoUpperUpdateLicenseStatus(record CurLicensesBlock CLb)
begin
  if (ServerMode and LicenseMode==kLicenseModeServer) then begin
    AllClientsRemoteAsync.DoUpdateLicenseStatus(CLb);
  end else begin
    qupdating.DoUpdateLicenseStatus(CLb);
  end;   
end;

global
updating procedure DoUpdateLicenseStatusModuleBlock(record CurLicensesBlock CLb)
begin
  BlockStore(CLb);
  ReloadUserInterface(true);
  ReRunAllWindowDefs;
  AllClientsRemoteAsync.DoUpdateLicenseStatusModuleBlock(CLb);
end;

global
updating procedure SetUserEndDate(record LicensesVc Lr)
begin
  record UserVc oldUSr;
  record UserVc USr;
  record GlobalUserVc oldGUSr;
  record GlobalUserVc GUSr;

  GUSr.Code = Lr.UserCode;

  if (ReadFirstMain(GUSr,1,true)) begin
    if (GUSr.ExpiryDate<Lr.EndDate) then begin
      RecordCopy(oldGUSr,GUSr);
      GUSr.ExpiryDate = Lr.EndDate;
      RecordUpdate(oldGUSr,GUSr,true);
      goto LSetUserEndDate;
    end;
  end;
  
  USr.Code = Lr.UserCode;
  
  if (ReadFirstMain(USr,1,true)) begin
    if (USr.ExpiryDate<Lr.EndDate) then begin
      RecordCopy(oldUSr,USr);
      USr.ExpiryDate = Lr.EndDate;
      RecordUpdate(oldUSr,USr,true);
      goto LSetUserEndDate;
    end;
  end;

  LogText(0,"No new user found");
LSetUserEndDate:;
end;

global
function date CalculateLicenseEndDate(Date startdate,Integer months,string licfunc,Integer type)
begin
  date enddate;
  date testdate;
//function returning date crashes somtimes
  
  if (type==kLicItemTypePermanent or type==kLicItemTypeLimited or licfunc=="ServerSlot") then begin
    enddate = AddYear(CurrentDate,1000);
    goto LCalculateLicenseEndDate;
  end;
  enddate = startdate;
  enddate.day = 1;
  enddate = AddDay(AddMonth(enddate,months),-1);

  testdate = startdate;
  testdate.day = DaysInMonth(testdate.year,testdate.month);

//  if (DateDiff(enddate,startdate)<8) then begin //not good for yearly...
  if (DateDiff(testdate,startdate)<8) then begin
    enddate = AddMonth(enddate,1);
    enddate.day = DaysInMonth(enddate.year,enddate.month);
  end;
LCalculateLicenseEndDate:;
  CalculateLicenseEndDate = enddate;
  return;
end;

procedure ActivateLicense(var record LicensesVc Lr)
begin
  record LicensesVc lastActLr;
  string 255 functiontags;
  LongInt months;
  Integer type;
  
//  LogText(0,"ActivateLicense no. " & Lr.SerNr & " - " & Lr.Function);

  Lr.Status = kLicItemUsedLocally;
  Lr.Active = 1;
  
  lastActLr.Function = Lr.Function;
  
  //  kLicItemUnused = 0,
  // kLicItemUsedLocally = 1,
  // kLicItemTransferred = 2

/*
  if (ReadLastKey("ActiveFunction",lastActLr,1,true)) then begin
    if (Lr.SerNr!=lastActLr.SerNr) then begin//last purchased module is inactive
      Lr.StartDate = AddDay(lastActLr.EndDate,1);
    end;
  end else begin
    Lr.StartDate = CurrentDate;
  end;
*/  
//this above code cannot be right ! if u have paid for 2 months u get licenses for future

  if (Lr.StartDate<CurrentDate) and (Lr.EndDate>CurrentDate) then begin
    Lr.StartDate = CurrentDate;
  end;
  
  GetSKUDataForLr(Lr,functiontags,months,type);
  if (Lr.Source!=kLicItemSourceHansaWorld) then begin
    Lr.Type = type; // should come from string set
  end;
  
  if (months>0 and Lr.TrialFlag==0) then begin
    Lr.EndDate = CalculateLicenseEndDate(Lr.StartDate,months,Lr.Function,Lr.Type);
//    Lr.EndDate = AddDay(AddMonth(Lr.StartDate,months),-1);
  end;
end;

function Integer NumberOfUsers_LicenseModeServer()
begin
  record LicensesVc Licr;
  boolean found,testf;
  Integer res;

  res = 1;
  found = true;
  ResetLoop(Licr);
  Licr.Active = 1;
  Licr.Function = "User";
  while (LoopKey("ActiveFunction",Licr,2,found)) begin
    testf = true;
    if (Licr.Function!="User") then begin testf = false; found = false; end;
    if (Licr.Active==0) then begin testf = false; found = false; end;
    if (testf) then begin
      res = res + Licr.Qty - Licr.UsedQty;
    end;
  end;
  NumberOfUsers_LicenseModeServer = res;
  return;
end;

global
updating procedure DoActivateLicense(record LicensesVc Lr)
begin
  record LicensesVc oldLr;
  record ModuleBlock Modb;
  Integer nrofus;
  
  if (ReadFirstMain(Lr,1,true)==false) then begin goto LDoActivateLicense; end;
    
  RecordCopy(oldLr,Lr);
  ActivateLicense(Lr);
//comment out when ModuleBlockCheck code in  
  if (LicenseMode==kLicenseModeServer) then begin
    switch (Lr.Function) begin//set 526 
      case "User":
        BlockLoad(Modb);
        nrofus = NumberOfUsers_LicenseModeServer;
        if (nrofus!=Modb.NumberOfUsers or nrofus!=Modb.ConcurrentUserNo) then begin
          Modb.NumberOfUsers = nrofus;
          Modb.ConcurrentUserNo = Modb.NumberOfUsers;
          BlockStore(Modb);
        end;
    end;
  end;
  RecordUpdate(oldLr,Lr,true);
  
LDoActivateLicense:;
end;

global
updating procedure DoDeActivateLicense(record LicensesVc Lr)
begin
  record LicensesVc oldLr;
  record ModuleBlock Modb;
  Integer nrofus;
  
  if (ReadFirstMain(Lr,1,true)==false) then begin goto LDoDeActivateLicense; end;
  
  RecordCopy(oldLr,Lr);
  Lr.Active = 0;
  RecordUpdate(oldLr,Lr,true);

  if (LicenseMode==kLicenseModeServer) then begin
    switch (Lr.Function) begin//set 526 
      case "User":
        BlockLoad(Modb);
        nrofus = NumberOfUsers_LicenseModeServer;
        if (nrofus!=Modb.NumberOfUsers) then begin
          Modb.NumberOfUsers = nrofus;
          if (Modb.NumberOfUsers<=0) then begin Modb.NumberOfUsers = 1; end;
          Modb.ConcurrentUserNo = Modb.NumberOfUsers;
          BlockStore(Modb);
        end;
    end;
  end;
  
LDoDeActivateLicense:;
end;

global
procedure SetDefaultWindowTags(var record CurLicensesBlock CLb)
begin
//look at SetCurLicensesFlag
  Integer i,max;
  string 255 functiontag;
  
  i = 0;
  max = StringToInt(SetFromString(545,"HasFunctionTagsMax"));
  functiontag = StringFromSet(545,i);
  while (nonblank(functiontag) and i < max) begin
    if (functiontag!="Company") and (functiontag!="User") then begin
      switch (GetDefaultFeatureState(functiontag)) begin
        case kFeatureUnavailable:
          SetFieldValueByName(CLb,functiontag,kFeatureOff,-1);
        case kFeatureDefaultOn: // if user disabled feature, turn off
          SetFieldValueByName(CLb,functiontag,kFeatureOn,-1);
        case kFeatureDefaultTrial:  // if user disabled feature, turn off
          SetFieldValueByName(CLb,functiontag,kFeatureTrial,-1);
        case kFeatureDefaultOffTrialAvailable:  // if user enabled trial, turn to trial
          SetFieldValueByName(CLb,functiontag,kFeatureOff,-1);
        case kFeatureDefaultOffNoTrial:  // if user enabled trial, turn to trial
          SetFieldValueByName(CLb,functiontag,kFeatureOff,-1);
      end;
    end;
    if (GetGlobalBoolean("proddef_" & functiontag)) then begin    //only needed unitl DefaultFeatureState fully implemented
      if (functiontag!="Company") and (functiontag!="User") then begin
        SetFieldValueByName(CLb,functiontag,"1",-1);
      end;
    end;
    i = i + 1;
    functiontag = StringFromSet(545,i);
  end;
  return;
end;

global
procedure UpdateLicenseStatusNow()
begin
  record LicensesVc Lr;
  record LicensesVc oldLr;
  record CurLicensesBlock CLb;
  record CurLicensesBlock oldCLb;
  Boolean found,testf;
  Integer i;
  string 255 flag;
  record ModuleBlock MBb;
  
/*  
  if (IsUsingActivationCodes and LicenseMode!=kLicenseModeServer) then begin
    BlockLoad(MBb);
    SetProductTagModuleBlock(MBb);
    goto LUpdateLicenseStatusNow;
  end;
*/

  if (UseExternalLicenseModel==false) then begin
    //LogText(0,"0.UpdateLicenseStatusNow UseExternalLicenseModel " & UseExternalLicenseModel);
    goto LUpdateLicenseStatusNowEnd;
  end;

/*
  if (ClientMode) then begin
    //LogText(0,"1.UpdateLicenseStatusNow ClientMode " & ClientMode);
  end;
  if (ServerMode) then begin
    //LogText(0,"1.UpdateLicenseStatusNow ServerMode " & ServerMode);
  end;
*/
  if (LicenseMode==kLicenseModeServer and ClientMode) then begin
/*
  if (ClientMode) then begin
    //LogText(0,"2.UpdateLicenseStatusNow ClientMode " & ClientMode);
  end;
  if (ServerMode) then begin
    //LogText(0,"2.UpdateLicenseStatusNow ServerMode " & ServerMode);
  end;
*/
    goto LUpdateLicenseStatusNow;
  end;
  if (IsUsingActivationCodes) then begin
    BlockLoad(MBb);
    SetProductTagModuleBlock(MBb);
    goto LUpdateLicenseStatusNow;
  end;
  
  BlockLoad(oldCLb);
  
  CLb.LastCurLicRunDate = oldCLb.LastCurLicRunDate;
  CLb.LastCurLicRunTime = oldCLb.LastCurLicRunTime;
  
  if (SystemMode==kSystemModeDemo or TestEnablerFile("EnWindowTags")) then begin
    if (LicenseMode!=kLicenseModeServer) then begin
      BlockLoad(CLb);
    end;
  end;
//  if (LicenseMode==kLicenseModeClient) then begin
    SetDefaultWindowTags(CLb);
//  end;
  
  if (LicenseMode==kLicenseModeServer) then begin  //on server
    while (LoopKey("Unused",Lr,1,true)) begin      
      //LogText(0,"UpdateLicenseStatusNow" & Lr.SerNr & "-" & LicenseShouldBeMovedToServer(Lr) & SingleUserMode & ClientMode & (ServerMode or CurrentModule=="modServ"));
      qupdating.DoActivateLicense(Lr);
      if (ThisIsMainThread) then begin
        StepBack(Lr);
      end;
    end;
  end else begin
    CLb.NrUsersToCharge = oldCLb.NrUsersToCharge;
    CLb.NrUsersChargedForCurPeriod = oldCLb.NrUsersChargedForCurPeriod;
    CLb.AvailableMonths = oldCLb.AvailableMonths;
    CLb.TotalUserMonths = oldCLb.TotalUserMonths;
    CLb.CurPeriodEndDate = oldCLb.CurPeriodEndDate;
 
    CLb.NrCompaniesToCharge = oldCLb.NrCompaniesToCharge;
    CLb.NrCompaniesChargedForCurPeriod = oldCLb.NrCompaniesChargedForCurPeriod;
    CLb.CompaniesAvailableMonths = oldCLb.CompaniesAvailableMonths;
    CLb.TotalCompaniesMonths = oldCLb.TotalCompaniesMonths;
    while (LoopKey("Unused",Lr,1,true)) begin
      // LogText(0,"1.UpdateLicenseStatusNow" & Lr.SerNr & "-" & LicenseShouldBeMovedToServer(Lr) & SingleUserMode & ClientMode & (ServerMode or CurrentModule=="modServ"));
      if ((ClientMode or SingleUserMode) and (LicenseShouldBeMovedToServer(Lr)==false)) then begin
        qupdating.DoActivateLicense(Lr);
        if (ThisIsMainThread) then begin
          StepBack(Lr);
        end;
      end;

      if ((ServerMode or CurrentModule=="modServ") and LicenseShouldBeMovedToServer(Lr)) then begin
        qupdating.DoActivateLicense(Lr);
        if (ThisIsMainThread) then begin
          StepBack(Lr);
        end;
      end;
    end;
  end;
  Lr.Function = "";
  ResetLoop(Lr);
  while (LoopKey("ActiveFunction",Lr,1,true)) begin
    if (SystemMode==kSystemModeDemo) then begin
      if (Lr.Type==kLicItemTypeDemo) then begin
        //StopAlert("ULSN " & Lr.Function & " demo!");
        SetCurLicensesFlag(Lr,CLb);
      end;
    end else begin
      if ((Lr.Type!=kLicItemTypePermanent and Lr.Type!=kLicItemTypeDemo) and (nonblank(Lr.EndDate) and Lr.EndDate<CurrentDate)) then begin
        qupdating.DoDeActivateLicense(Lr);
        if (ThisIsMainThread) then begin
          StepBack(Lr);
        end;
      end else begin
        if (Lr.Type!=kLicItemTypeDemo) then begin
          SetCurLicensesFlag(Lr,CLb);
        end;
      end;
    end;
  end;
    
  if (LicenseMode!=kLicenseModeServer) then begin
    Clb.NumberOfCompanies = GetGlobalLongInt("NumberOfCompanies");
  end;
  
  if (ComparePosts(CLb,oldCLb)==false or GetGlobalBoolean("ReloadLicencesTestf")) then begin  //ComparePosts(  alwasy seems to returns false
    if (GetGlobalBoolean("ReloadLicencesTestf")) then begin 
      qupdating.DoUpperUpdateLicenseStatus(CLb);
      SetGlobalBoolean("ReloadLicencesTestf",false);
    end;
  end;
  
LUpdateLicenseStatusNow:;
  if (LicenseMode==kLicenseModeServer and GetGlobalBoolean("ReloadLicencesTestf")) or (IsUsingActivationCodes) then begin
//    BlockLoad(CLb); updated abpove and DefaultFunctionTags cannot be after SetCurLicensesFlag called
//    SetDefaultWindowTags(CLb);
    if (ClientMode) then begin
      qupdating.DoUpperUpdateLicenseStatus(CLb);
    end else begin
      LoadWindowTags;
    end;
    SetGlobalBoolean("ReloadLicencesTestf",false);
  end;
LUpdateLicenseStatusNowEnd:;
end;

global
procedure UpdateLicensesIdleTask(string arg)
begin
  UpdateLicenseStatusNow;
end;

global
function Date GetLicenseEndDate(string functiontag)
begin
  record LicensesVc Lr;
  Date res;
  
  Lr.Function = functiontag;
  while (LoopKey("ActiveFunction",Lr,1,true)) begin
    if (Lr.Function<>functiontag) then begin
      goto LGetLicenseEndDate;
    end;
    
    if (res<Lr.EndDate) then begin
      res = Lr.EndDate;
    end;
  end;
  
LGetLicenseEndDate:;
  GetLicenseEndDate = res;
end;

global
function LongInt GetLicenseQty(string storesku,string functiontags)
begin
  record LicensesVc Lr;
  LongInt res;
  string 255 functiontag;
  LongInt pos;
  Boolean testf;
  
  res = 0;

  pos = 0;
  GetNextSubstring(functiontags,pos,"|",functiontag);
  
  Lr.Function = functiontag;
  while (LoopKey("ActiveFunction",Lr,1,true)) begin
    //LogText(0,"GetLicenseQty: " & Lr.Function & " - " & Lr.StartDate & " - " & Lr.EndDate);
    testf = true;
    if (nonblank(storesku)) then begin
      if (Lr.StoreSKU!=storesku) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      if (Lr.Function<>functiontag) then begin
        goto LGetLicenseQty;
      end;
    
      if (Lr.StartDate<=CurrentDate and CurrentDate<=Lr.EndDate) then begin
        res = res + Lr.Qty;
      end;
    end;
  end;
  
LGetLicenseQty:;
//  if (res==0) then begin
//    res = -1;
//  end;
  
  GetLicenseQty = res;
end;

global
function LongInt GetSKUQty(string storesku)
begin
  record LicensesVc Lr;
  LongInt res;
  
  res = 0;
  Lr.StoreSKU = storesku;
  while (LoopKey("ActiveStoreSKU",Lr,1,true)) begin
    //LogText(0,"GetLicenseQty: " & Lr.Function & " - " & Lr.StartDate & " - " & Lr.EndDate);
    if (Lr.StoreSKU!=storesku) then begin
      goto LGetSKUQty;
    end;
    
    if (Lr.StartDate<=CurrentDate and CurrentDate<=Lr.EndDate) then begin
      res = res + Lr.Qty;
    end;
  end;
  
LGetSKUQty:;
//  if (res==0) then begin
//    res = -1;
//  end;
  
  GetSKUQty = res;
end;

global
updating function Boolean UserLicensesExpired()
begin
  Boolean res;
  record CurLicensesBlock CLb;
  LongInt NrUsersChargedForCurPeriod;

  res = false;
  
//LogText(0,"1.UserLicensesExpired UserExpired " & UserExpired);
  
  if (UseExternalLicenseModel==false) or (LicenseMode==kLicenseModeServer) then begin
    goto LUserLicensesExpired;
  end;
  
  if (ServerMode==false and CurrentModule!="modServ") then begin
    UpdateRemoteUserChargeFields;//??
    UpdateRemoteCompaniesChargeFields;//??
  end;
  
  BlockLoad(CLb);
  
//LogText(0,"2.UserLicensesExpired ClientMode " & ClientMode & " ServerMode " & ServerMode);

  NrUsersChargedForCurPeriod = CLb.NrUsersChargedForCurPeriod;
  if (NrUsersChargedForCurPeriod<=0) then begin NrUsersChargedForCurPeriod = 1; end;

  if (NrUsersChargedForCurPeriod<CLb.NrUsersToCharge) then begin
    res = true;
    if (ClientMode) then begin
      Trace(USetStr(31333),"");
    end;
  end;
  /*
  if (res==false) then begin
    if (NrUsersChargedForCurPeriod<GetNrOfActiveUsers) then begin
      res = true;
      if (ClientMode) then begin
        Trace(USetStr(31334),"");
      end;
    end;
  end;
  */

  if (res==false) then begin
    if (CLb.NrCompaniesChargedForCurPeriod<CLb.NrCompaniesToCharge) then begin
      res = true;
      if (ClientMode) then begin
        Trace(USetStr(31333),"");
      end;
    end;
  end;
/*  
  if (CLb.NrCompaniesChargedForCurPeriod<GetNrOfActiveUsers) then begin
    res = true;
    if (ClientMode) then begin
      Trace(USetStr(31334),"");
    end;
  end;
*/  

//LogText(0,"2.UserLicensesExpired ClientMode " & ClientMode & " res " & res & " UserExpired " & UserExpired);

  if (ClientMode) then begin
    if (res!=UserExpired) then begin
      SetUserExpired(res);
      ReRunAllWindowDefs;
    end;
  end;
  
LUserLicensesExpired:;
  UserLicensesExpired = res;
end;
