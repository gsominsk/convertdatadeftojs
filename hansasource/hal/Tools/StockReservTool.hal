external function Boolean FindItemVAR(string,var string,var string,var string,var string);
external function Boolean TestArtCodeMatch(string,string);
external procedure FindStockValueInclEntireStockReserv(string,string,string,var record ItemStatusVc,var val);
external procedure FindStockValueInclStockReserv(LongInt,string,string,string,var record ItemStatusVc,var val);
external procedure FindStockValue(string,string,var record ItemStatusVc);
external updating function Integer CheckStockMovRecord(var record StockMovVc,record StockMovVc,LongInt,LongInt,Boolean,
                                                      var LongInt,var string,var integer,var string,boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure StockMovSumUp(var record StockMovVc);
external function Boolean StockMovVc_PasteArtCode(var record StockMovVc,Integer,Integer,var array string);
external procedure GetCurUser(var record UserVc);
external function Integer StockReservVcCheck(record StockReservVc,var string);
external function val GetStockQty(string,string,Date,Boolean);

global
procedure GetRegisterToStrings(Integer filenam,LongInt sernr,var string comment,var string dblstr,var string plandel)
begin
  record POVc POr;
  record PUVc PUr;
  record SHVc SHr;
  
  dblstr = "";
  plandel = "";
  switch (filenam) begin
    case kResTypeUndefined:
      comment = USetStr(16148);
    case kResTypeExistingPO:
      comment = USetStr(16149);
      dblstr = "DblPOVc";
      POr.SerNr = sernr;
      if (ReadFirstMain(POr,1,true)) then begin
        plandel = POr.PlanShip;
      end;
    case kResTypeMakeNewPO:
      comment = USetStr(16150);
      dblstr = "DblPOVc";
//    case 3:
//      comment = USetStr(16151);
//      dblstr = "DblProdVc";
    case kResTypeStock:
      comment = USetStr(16159);
      dblstr = "DblStockMov";
    case kResTypeNextStockIn:
      comment = USetStr(16152);
  end;
  return;
end;

global
procedure GetReservRegisterFromStrings(Integer filenam,LongInt sernr,var string comment,var string dblstr,var string plandel)
begin
  record ORVc ORr;
  
  dblstr = "";
  plandel = "";
  switch (filenam) begin
    case kResTypeSalesOrder:
      comment = USetStr(16155);
      dblstr = "DblORVc";
      ORr.SerNr = sernr;
      if (ReadFirstMain(ORr,1,true)) then begin
        plandel = ORr.PlanShip;
      end;
    case kResTypeInternalOrder:
      comment = USetStr(16151);
      dblstr = "DblIntORVc";
  end;
  return;
end;

// This is done with the old method, but this is only for the Location type reservation anyway, so no problem.
function Boolean EarlierReservationRowsExists(record ORVc ORr,row ORVc ORrw)
begin
  record StockReservVc StockReservr;
  Boolean res,foundf;
  string 40 location;
  
  res = false;
  location = ORr.Location;
  if (nonblank(ORrw.Location)) then begin
    location = ORrw.Location;
  end;
  StockReservr.Donef = 0;
  StockReservr.IntoLocation = location;
  StockReservr.ArtCode = ORrw.ArtCode;
  StockReservr.FromFileName = kResTypeSalesOrder;
  StockReservr.FromSerNr = -1;
  foundf = true;
  while (LoopKey("EarlierReserved",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.IntoLocation!=location) then begin foundf = false; end;
    if (StockReservr.ArtCode!=ORrw.ArtCode) then begin foundf = false; end;
    if (StockReservr.FromFileName!=kResTypeSalesOrder) then begin foundf = false; end;
    if (StockReservr.FromSerNr>ORr.SerNr) then begin foundf = false; end;
    if (foundf) then begin
      if (StockReservr.FromSerNr<ORr.SerNr) then begin
        res = true;
        foundf = false;
      end;
    end;
  end;
  EarlierReservationRowsExists = res;
  return;
end;

global
function Boolean EarlierReservationsExists(record ORVc ORr)
begin
  Boolean res;
  Integer rwcnt,i;
  row ORVc ORrw;
  record StockReservBlock SRb;

  BlockLoad(SRb);
  res = false;
  if (SRb.ReservationType==0) then begin
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (EarlierReservationRowsExists(ORr,ORrw)) then begin
        res = true;
        i = rwcnt;
      end;
    end;
  end;
  EarlierReservationsExists = res;
  return;
end;

procedure ListUnAssignedStockResRow(record POVc POp,row POVc POrw)
begin
  record StockReservVc StockReservr;
  record StockReservVc oldStockReservr;
  string 200 comment,dblstr,plandel;
  Boolean foundf,firstf;
  
  StockReservr.Donef = 0;
  StockReservr.ToFileName = kResTypeNextStockIn;
  StockReservr.ToSerNr = -1;
  StockReservr.ArtCode = POrw.ArtCode;
  firstf = true;
  foundf = true;
  while (LoopKey("ToItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=kResTypeNextStockIn) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=-1) then begin foundf = false; end;
    if (StockReservr.ArtCode!=POrw.ArtCode) then begin foundf = false; end;
    if (foundf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(16164),false);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(16142),false);
          OutString(80,0,USetStr(16143),false);
          OutString(170,0,USetStr(16158),false);
//          OutString(250,0,USetStr(16158),false);
          OutString(380,0,USetStr(16160),true);
          OutString(1,0,USetStr(16146),true);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;
        GetReservRegisterFromStrings(StockReservr.FromFileName,StockReservr.FromSerNr,comment,dblstr,plandel);
        StartFormat(15);
        OutString(0,"DblStockReservVc",StockReservr.SerNr,false);
        OutString(80,0,comment,false);
        OutString(170,0,StockReservr.IntoLocation,false);
//        OutString(250,0,plandel,false);
        OutVal(380,0,StockReservr.QuantDone,M4UVal,true);
        OutVal(1,0,StockReservr.Quant,M4UVal,true);
        EndFormat;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  return;
end;

global
procedure ListUnAssignedStockRes(record POVc POp)
BEGIN
  row POVc POrw;
  Integer i,rwcnt;
  Integer orw,orcnt;
  
  rwcnt = MatRowCnt(POp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    ListUnAssignedStockResRow(POp,POrw);
  end;
  RETURN;
END;

global
function val GetORRowReserv2(LongInt ordr,string artcode,string serialnr,var val ordqty,var string comment,var string location,Boolean printf,var val quantdone,Boolean incldonef)
begin
  record StockReservVc StockReservr;
  record StockReservBlock SRb;
  record UserVc Userr;
  record ORVc ORr;
  row ORVc ORrw;
  string 200 regnam,dblstr,plandel;
  Boolean firstf;
  Boolean foundf,testf;
  Integer i,rwcnt;
  val res;

  BlockLoad(SRb);
  ordqty = 0;
  quantdone = blankval;
  location = "";
  ORr.SerNr = ordr;
  if (ReadFirstMain(ORr,1,true)) then begin
    rwcnt = MatRowCnt(ORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw);
      if (ORrw.ArtCode==artcode and ORrw.SerialNr==serialnr) then begin
        ordqty = ordqty + ORrw.Quant - ORrw.Shipd1;
      end;
    end;
    comment = ORr.Addr0;
    if (SRb.UseOrderLocation==1 or SRb.ReservationType!=0) then begin
      location = ORr.Location;
    end;
  end;
  if (SRb.UseOrderLocation==2 and SRb.ReservationType==0) then begin
    GetCurUser(Userr);
    location = Userr.ReservLocation;
  end;
  StockReservr.Donef = 0;
  StockReservr.FromFileName = kResTypeSalesOrder;
  StockReservr.FromSerNr = ordr;
  StockReservr.ArtCode = artcode;
  foundf = true;
  firstf = true;
  while (LoopKey("FromItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.FromFileName!=kResTypeSalesOrder) then begin foundf = false; end;
    if (StockReservr.FromSerNr!=ordr) then begin foundf = false; end;
    if (StockReservr.ArtCode!=artcode) then begin foundf = false; end;
    testf = foundf;
    if (nonblank(serialnr)) then begin
      if (StockReservr.SerialNr!=serialnr) then begin testf = false; end;
    end;
    if (testf) then begin
      if (StockReservr.Donef!=0) then begin
        res = res + StockReservr.Quant - StockReservr.QuantDone;
      end else begin
        res = res + StockReservr.Quant;
      end;
      if (StockReservr.ToFileName!=kResTypeStock) then begin
        quantdone = quantdone + StockReservr.QuantDone;
      end;
      if (printf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(16147),false);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(16142),false);
          OutString(2,0,USetStr(16143),false);
          OutString(4,0,USetStr(16144),false);
          OutString(8,0,USetStr(16145),false);
          OutString(6,0,USetStr(16160),true);
          OutString(7,0,USetStr(16146),true);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;
        GetRegisterToStrings(StockReservr.ToFileName,StockReservr.ToSerNr,regnam,dblstr,plandel);
        StartFormat(15);
        OutString(0,"DblStockReservVc",StockReservr.SerNr,false);
        OutString(2,0,regnam,false);
        OutLongInt(4,dblstr,StockReservr.ToSerNr,false);
        if (StockReservr.ToFileName==kResTypeStock) then begin
          OutString(8,0,StockReservr.SerialNr,false);
        end else begin
          OutString(8,0,plandel,false);
        end;
        OutVal(6,0,StockReservr.QuantDone,M4UVal,true);
        OutVal(7,0,StockReservr.Quant,M4UVal,true);
        OutStringID(1,"DblStockReservRel",USetStr(16169),true,StockReservr.SerNr);
        EndFormat;
      end;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  if (incldonef) then begin
    ResetLoop(StockReservr);
    StockReservr.Donef = 1;
    StockReservr.FromFileName = kResTypeSalesOrder;
    StockReservr.FromSerNr = ordr;
    StockReservr.ArtCode = artcode;
    foundf = true;
    firstf = true;
    while (LoopKey("FromItem",StockReservr,4,foundf)) begin
      if (StockReservr.Donef!=1) then begin foundf = false; end;
      if (StockReservr.FromFileName!=kResTypeSalesOrder) then begin foundf = false; end;
      if (StockReservr.FromSerNr!=ordr) then begin foundf = false; end;
      if (StockReservr.ArtCode!=artcode) then begin foundf = false; end;
      testf = foundf;
      if (nonblank(serialnr)) then begin
        if (StockReservr.SerialNr!=serialnr) then begin testf = false; end;
      end;
      if (testf) then begin
        quantdone = quantdone + StockReservr.QuantDone;
      end;
    end;
  end;
  if (res>ordqty) then begin res = ordqty; end;  
  if (quantdone>ordqty) then begin 
    quantdone = ordqty; 
    res = ordqty;
  end;
  GetORRowReserv2 = res;
  return;
end;

global
function val GetORRowReserv(LongInt ordr,string artcode,string serialnr,var val ordqty,var string comment,var string location,Boolean printf)
begin
  val quantdone;
  
  GetORRowReserv = GetORRowReserv2(ordr,artcode,serialnr,ordqty,comment,location,printf,quantdone,false);
  return;
end;

global
function val FindReseverdQty(string artcode,string serialnr,string location)
begin
  record StockReservVc SRr;
  Boolean foundf,testf;
  val res;
  string 60 sz,msk,mskrep;
  string 200 varsubset,variety;
  record INVc INr;
  Boolean varf;
  
  if (FindItemVAR(artcode,sz,msk,mskrep,varsubset)) then begin
    ReadFirstItem(artcode,INr,false,false);
    varf = artcode!=INr.Code;
  end;
  res = 0;
  SRr.Donef = 0;
  SRr.ArtCode = artcode;
  foundf = true;
  while (LoopKey("ArtCode",SRr,2,foundf)) begin
    if (SRr.Donef!=0) then begin foundf = false; end;
    if (varf) then begin
      if (SRr.ArtCode!=artcode) then begin
        foundf = false;
      end;
    end else begin
      if (TestArtCodeMatch(SRr.ArtCode,artcode)==false) then begin
        foundf = false;
      end;
    end;
//    if (SRr.ArtCode!=artcode) then begin foundf = false; end;
    testf = foundf;
    if (SRr.FromLocation!=location) then begin testf = false; end;
    if (nonblank(serialnr)) then begin
      if (SRr.SerialNr!=serialnr) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      res = res + SRr.Quant - SRr.QuantDone;
    end;
  end;
  FindReseverdQty = res;
  return;
end;

function val GetPOReserv2(LongInt ordr,string artcode,var val ordqty,Boolean printf,var Boolean firstf,Integer tofilename)
begin
  record StockReservVc StockReservr;
  string 200 comment,dblstr,plandel;
  Boolean foundf;
  val res;
  
  res = 0;
  StockReservr.Donef = 0;
  StockReservr.ToFileName = tofilename;
  StockReservr.ToSerNr = ordr;
  StockReservr.ArtCode = artcode;
  foundf = true;
  firstf = true;
  while (LoopKey("ToItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=tofilename) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=ordr) then begin foundf = false; end;
    if (StockReservr.ArtCode!=artcode) then begin foundf = false; end;
    if (foundf) then begin
      res = res + StockReservr.Quant - StockReservr.QuantDone;
      if (printf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(16147),false);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(16142),false);
          OutString(80,0,USetStr(16143),false);
          OutString(170,0,USetStr(16144),false);
          OutString(250,0,USetStr(16145),false);
          OutString(380,0,USetStr(16160),true);
          OutString(1,0,USetStr(16146),true);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;
        GetReservRegisterFromStrings(StockReservr.FromFileName,StockReservr.FromSerNr,comment,dblstr,plandel);
        StartFormat(15);
        OutString(0,"DblStockReservVc",StockReservr.SerNr,false);
        OutString(80,0,comment,false);
        OutLongInt(170,dblstr,StockReservr.FromSerNr,false);
        OutString(250,0,plandel,false);
        OutVal(380,0,StockReservr.QuantDone,M4UVal,true);
        OutVal(1,0,StockReservr.Quant,M4UVal,true);
        EndFormat;
      end;
    end;
  end;
  GetPOReserv2 = res;
  return;
end;

global
function val GetPORowReserv(LongInt ordr,string artcode,var val ordqty,Boolean printf)
begin
  record POVc POr;
  row POVc POrw;
  Boolean firstf;
  Integer i,rwcnt;
  val res;
  
  ordqty = 0;
  POr.SerNr = ordr;
  if (ReadFirstMain(POr,1,true)) then begin
    rwcnt = MatRowCnt(POr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POr,i,POrw);
      if (POrw.ArtCode==artcode) then begin
        ordqty = ordqty + POrw.Quant-POrw.Shipd1;
      end;
    end;
  end;
  res = 0;
  res = res + GetPOReserv2(ordr,artcode,ordqty,printf,firstf,kResTypeExistingPO);
  res = res + GetPOReserv2(ordr,artcode,ordqty,printf,firstf,kResTypeMakeNewPO);
  if (firstf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  GetPORowReserv = res;
  return;
end;

function val PrintIncorrectPOReserv2(record POVc POr,var Boolean firstf,Integer tofilename)
begin
  record StockReservVc StockReservr;
  string 200 comment,dblstr,plandel;
  Boolean foundf,testf;
  row POVc POrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(POr);
  StockReservr.Donef = 0;
  StockReservr.ToFileName = tofilename;
  StockReservr.ToSerNr = POr.SerNr;
  foundf = true;
  firstf = true;
  while (LoopKey("ToItem",StockReservr,3,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=tofilename) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=POr.SerNr) then begin foundf = false; end;
    testf = foundf;
    if (testf) then begin
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POr,i,POrw);
        if (POrw.ArtCode==StockReservr.ArtCode) then begin
          testf = false;
          i = rwcnt;
        end;
      end;
    end;
    if (testf) then begin
      if (firstf) then begin
        StartFormat(15);
        EndFormat;
        StartFormat(15);
        OutString(0,0,USetStr(16191),false);
        EndFormat;
        StartFormat(15);
        OutString(2,0,USetStr(16136),false);
        OutString(3,0,USetStr(16142),true);
        OutString(4,0,USetStr(16138),false);
        OutString(5,0,USetStr(16139),true);
        OutString(6,0,USetStr(16146),true);
        EndFormat;
        Gray_Divider(0,1);
        firstf = false;
      end;
      GetReservRegisterFromStrings(StockReservr.FromFileName,StockReservr.FromSerNr,comment,dblstr,plandel);
      StartFormat(15);
      OutString(2,"DblINVc",StockReservr.ArtCode,false);
      OutString(3,"DblStockReservVc",StockReservr.SerNr,true);
      OutString(4,0,comment,false);
      OutLongInt(5,dblstr,StockReservr.FromSerNr,false);
      OutVal(6,0,StockReservr.Quant,M4UVal,true);
      EndFormat;
    end;
  end;
  return;
end;

global
procedure PrintIncorrectPOReserv(record POVc POr)
begin
  Boolean firstf;

  PrintIncorrectPOReserv2(POr,firstf,kResTypeExistingPO);
  PrintIncorrectPOReserv2(POr,firstf,kResTypeMakeNewPO);
  return;
end;

updating procedure AssignStockResFromPORow(record POVc POp,row POVc POrw)
begin
  record StockReservVc StockReservr;
  record StockReservVc oldStockReservr;
  val remain,t,poresrv,poordqty,blv;
  Boolean foundf;
  Boolean testf;
  
  poresrv = GetPORowReserv(POp.SerNr,POrw.ArtCode,poordqty,false);
  remain = POrw.Quant-POrw.Shipd1-poresrv;
LStartLoop:;
  ResetLoop(StockReservr);
  StockReservr.Donef = 0;
  StockReservr.ToFileName = kResTypeNextStockIn;
  StockReservr.ToSerNr = -1;
  StockReservr.ArtCode = POrw.ArtCode;
  foundf = true;
  while (LoopKey("ToItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=kResTypeNextStockIn) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=-1) then begin foundf = false; end;
    if (StockReservr.ArtCode!=POrw.ArtCode) then begin foundf = false; end;
    testf = foundf;
    if (POp.Location!=StockReservr.IntoLocation) then begin testf = false; end;
    if (testf) then begin
      RecordCopy(oldStockReservr,StockReservr);
      if (StockReservr.Quant-StockReservr.QuantDone<remain) then begin
        StockReservr.ToFileName = kResTypeExistingPO;
        StockReservr.ToSerNr = POp.SerNr;
        remain = remain - StockReservr.Quant-StockReservr.QuantDone;
        if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
        end;
        if (remain>0) then begin
          goto LStartLoop;
        end;
      end else begin
        t = (StockReservr.Quant-StockReservr.QuantDone) - remain;
        StockReservr.Quant = remain;
        remain = 0;
        StockReservr.ToSerNr = POp.SerNr;
        StockReservr.ToFileName = kResTypeExistingPO;
        if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
        end;
        if (t>0) then begin
          StockReservr.Quant = t;
          StockReservr.QuantDone = blv;
          StockReservr.ToFileName = kResTypeNextStockIn;
          StockReservr.ToSerNr = -1;
          StockReservr.SerNr = NextSerNr("StockReservVc",StockReservr.TransDate,-1,false,"");
          if (RecordStore(StockReservr,false)) then begin
          end;
        end;
      end;
      if (remain<=0) then begin
        foundf = false;
      end;
    end;
  end;
  return;
end;

global
updating procedure AssignStockResFromPO(record POVc POp)
BEGIN
  row POVc POrw;
  Integer i,rwcnt;
  Integer orw,orcnt;
  
  if (POp.OKFlag!=0) then begin
    rwcnt = MatRowCnt(POp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POp,i,POrw);
      AssignStockResFromPORow(POp,POrw);
    end;
  end;
  RETURN;
END;

updating procedure UpdateStockResFromPURow(record PUVc PUp,row PUVc PUrw,LongInt PONr)
begin
  record StockReservVc StockReservr;
  record StockReservVc oldStockReservr;
  record StockReservVc stockStockReservr;
  val remain,treated;
  Boolean foundf;
  Boolean testf;
  record StockReservBlock SRb;
  array LongInt stra;
  LongInt acnt,i;
  
  acnt = 0;
  BlockLoad(SRb);
  StockReservr.Donef = 0;
  StockReservr.ToFileName = kResTypeExistingPO;
  StockReservr.ToSerNr = PONr;
  StockReservr.ArtCode = PUrw.ArtCode;
  foundf = true;
  remain = PUrw.Quant;
  while (LoopKey("ToItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=kResTypeExistingPO) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=PONr) then begin foundf = false; end;
    if (StockReservr.ArtCode!=PUrw.ArtCode) then begin foundf = false; end;
    testf = foundf;
/* If you receive to other location... if the StockReservation is not properly updated even if the PO is fully received, we have a problem
    if (StockReservr.IntoLocation!=PUrw.Location) then begin
      testf = false;
    end;
*/
    if (testf) then begin
      RecordCopy(oldStockReservr,StockReservr);
      if (StockReservr.Quant-StockReservr.QuantDone<remain) then begin
        remain = remain - (StockReservr.Quant - StockReservr.QuantDone);
        StockReservr.QuantDone = StockReservr.Quant;
      end else begin
        StockReservr.QuantDone = StockReservr.QuantDone + remain;
        remain = 0;
      end;
      treated = StockReservr.QuantDone - oldStockReservr.QuantDone;
      if ((StockReservr.QuantDone-StockReservr.Quant)==0) then begin StockReservr.Donef = 1; end;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
      if (StockReservr.QuantDone==StockReservr.Quant) then begin
        if (StockReservr.ToFileName!=kResTypeExistingPO) then begin
          stra[acnt] = StockReservr.SerNr;
          acnt = acnt + 1;
        end;
      end;
      if (remain<=0) then begin
        foundf = false;
      end;
      if (treated>0 and SRb.ReservationType!=0) then begin
        RecordCopy(stockStockReservr,StockReservr);
        stockStockReservr.Donef = 0;
        stockStockReservr.ToFileName = kResTypeStock;
        stockStockReservr.ToSerNr = PUp.SerNr;
        stockStockReservr.Quant = treated;
        stockStockReservr.QuantDone = treated;
        stockStockReservr.SerialNr = PUrw.SerialNr;
        stockStockReservr.SerNr = NextSerNr("StockReservVc",stockStockReservr.TransDate,-1,false,"");
        if (RecordStore(stockStockReservr,false)) then begin
        end;
      end;
    end;
  end;
  ResetLoop(StockReservr);
  StockReservr.Donef = 0;
  StockReservr.ToFileName = kResTypeMakeNewPO;
  StockReservr.ToSerNr = PONr;
  StockReservr.ArtCode = PUrw.ArtCode;
  foundf = true;
  while (LoopKey("ToItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=kResTypeMakeNewPO) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=PONr) then begin foundf = false; end;
    if (StockReservr.ArtCode!=PUrw.ArtCode) then begin foundf = false; end;
    testf = foundf;
/* If you receive to other location... if the StockReservation is not properly updated even if the PO is fully received, we have a problem
    if (StockReservr.IntoLocation!=PUrw.Location) then begin
      testf = false;
    end;
*/
    if (testf) then begin
      RecordCopy(oldStockReservr,StockReservr);
      if (StockReservr.Quant-StockReservr.QuantDone<remain) then begin
        remain = remain - (StockReservr.Quant - StockReservr.QuantDone);
        StockReservr.QuantDone = StockReservr.Quant;
      end else begin
        StockReservr.QuantDone = StockReservr.QuantDone + remain;
        remain = 0;
      end;
      treated = StockReservr.QuantDone - oldStockReservr.QuantDone;
      if ((StockReservr.QuantDone-StockReservr.Quant)==0) then begin StockReservr.Donef = 1; end;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
      if (StockReservr.QuantDone==StockReservr.Quant) then begin
        if (StockReservr.ToFileName!=kResTypeExistingPO) then begin
          stra[acnt] = StockReservr.SerNr;
          acnt = acnt + 1;
        end;
      end;
      if (remain<=0) then begin
        foundf = false;
      end;
      if (treated>0 and SRb.ReservationType!=0) then begin
        RecordCopy(stockStockReservr,StockReservr);
        stockStockReservr.Donef = 0;
        stockStockReservr.ToFileName = kResTypeStock;
        stockStockReservr.ToSerNr = PUp.SerNr;
        stockStockReservr.Quant = treated;
        stockStockReservr.QuantDone = treated;
        stockStockReservr.SerialNr = PUrw.SerialNr;
        stockStockReservr.SerNr = NextSerNr("StockReservVc",stockStockReservr.TransDate,-1,false,"");
        if (RecordStore(stockStockReservr,false)) then begin
        end;
      end;
    end;
  end;
  for (i=0;i<acnt;i=i+1) begin
    StockReservr.SerNr = stra[i];
    if (ReadFirstMain(StockReservr,1,true)) begin
      RecordCopy(oldStockReservr,StockReservr);
      StockReservr.Donef = 1;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateStockResFromPU(record PUVc PUp,record PUVc PU2p)
BEGIN
  row PUVc PUrw;
  Integer i,rwcnt;
  Integer orw,orcnt;
  
  if ((PUp.Invalid==0) and (PUp.OKFlag!=0) and (PU2p.OKFlag==0)) then begin
    if (CountRecords("StockReservVc")>0) then begin
      rwcnt = MatRowCnt(PUp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(PUp,i,PUrw);
        if (PUrw.OrdRow!=-1) then begin
          UpdateStockResFromPURow(PUp,PUrw,PUp.PONr);
        end;
      end;
    end;
  end;
  RETURN;
END;

updating procedure UpdateStockResFromStockMovRow(record StockMovVc StockMovp,row StockMovVc StockMovrw)
begin
  record StockReservVc StockReservr;
  record StockReservVc oldStockReservr;
  val remain;
  Boolean foundf;
  Boolean testf;
  
  StockReservr.Donef = 0;
  StockReservr.FromFileName = kResTypeInternalOrder;
  StockReservr.FromSerNr = StockMovp.IntORNo;
  StockReservr.ArtCode = StockMovrw.ArtCode;
  foundf = true;
  remain = StockMovrw.Quant;
  while (LoopKey("FromItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.FromFileName!=kResTypeInternalOrder) then begin foundf = false; end;
    if (StockReservr.FromSerNr!=StockMovp.IntORNo) then begin foundf = false; end;
    if (StockReservr.ArtCode!=StockMovrw.ArtCode) then begin foundf = false; end;
    testf = foundf;
/* If you receive to other location... if the StockReservation is not properly updated even if the PO is fully received, we have a problem
    if (StockReservr.IntoLocation!=StockMovp.ToLocation) then begin
      testf = false;
    end;
*/
    if (testf) then begin
      RecordCopy(oldStockReservr,StockReservr);
      if (StockReservr.Quant-StockReservr.QuantDone<remain) then begin
        remain = remain - (StockReservr.Quant - StockReservr.QuantDone);
        StockReservr.QuantDone = StockReservr.Quant;
      end else begin
        StockReservr.QuantDone = StockReservr.QuantDone + remain;
        remain = 0;
      end;
      if (StockReservr.QuantDone>=StockReservr.Quant) then begin
        StockReservr.Donef = 1;
      end;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
      if (remain<=0) or (StockReservr.Donef!=0) then begin
        foundf = false;
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateStockResFromStockMov(record StockMovVc StockMovp)
BEGIN
  row StockMovVc StockMovrw;
  Integer i,rwcnt;
  Integer orw,orcnt;
  
  if (StockMovp.OKFlag!=0) then begin
    if (CountRecords("StockReservVc")>0) then begin
      rwcnt = MatRowCnt(StockMovp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(StockMovp,i,StockMovrw);
        UpdateStockResFromStockMovRow(StockMovp,StockMovrw);
      end;
    end;
  end;
  RETURN;
END;

updating procedure UpdateStockResFromSHRow(record SHVc SHp,row SHVc SHrw)
begin
  record StockReservVc StockReservr;
  record StockReservVc oldStockReservr;
  Boolean foundf;
  Boolean testf;
  array LongInt stra;
  LongInt acnt,i;
  val remain;
  
  acnt = 0;
  StockReservr.Donef = 0;
  StockReservr.FromFileName = kResTypeSalesOrder;
  StockReservr.FromSerNr = SHp.OrderNr;
  StockReservr.ArtCode = SHrw.ArtCode;
  remain = SHrw.Ship;
  foundf = true;
  while (LoopKey("FromItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.FromFileName!=kResTypeSalesOrder) then begin foundf = false; end;
    if (StockReservr.FromSerNr!=SHp.OrderNr) then begin foundf = false; end;
    if (StockReservr.ArtCode!=SHrw.ArtCode) then begin foundf = false; end;
    if (remain<=0) then begin foundf = false; end;
    if (foundf) then begin
      RecordCopy(oldStockReservr,StockReservr);
      if (remain<(StockReservr.Quant - StockReservr.QuantDone)) then begin
        StockReservr.QuantDone = StockReservr.QuantDone + SHrw.Ship;
        remain = remain - SHrw.Ship;
      end else begin
        remain = remain - (StockReservr.Quant - StockReservr.QuantDone);
        StockReservr.Quant = StockReservr.QuantDone;
      end;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
      if (StockReservr.QuantDone==StockReservr.Quant) then begin
        stra[acnt] = StockReservr.SerNr;
        acnt = acnt + 1;
      end;
    end;
  end;
  for (i=0;i<acnt;i=i+1) begin
    StockReservr.SerNr = stra[i];
    if (ReadFirstMain(StockReservr,1,true)) begin
      RecordCopy(oldStockReservr,StockReservr);
      StockReservr.Donef = 1;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateStockResFromSH(record SHVc SHp)
BEGIN
  row SHVc SHrw;
  Integer i,rwcnt;
  Integer orw,orcnt;
  
  if (SHp.OKFlag!=0) then begin
    if (CountRecords("StockReservVc")>0) then begin
      rwcnt = MatRowCnt(SHp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SHp,i,SHrw);
        UpdateStockResFromSHRow(SHp,SHrw);
      end;
    end;
  end;
  return;
end;

global
procedure BuildReservationArray(LongInt ordr,string artcode,var array val aqty,var array string aloc,var Integer acnt)
begin
  record StockReservVc StockReservr;
  Boolean foundf;
  record StockReservBlock SResb;
  
  BlockLoad(SResb);
  acnt = 0;
  StockReservr.Donef = 0;
  StockReservr.ToFileName = kResTypeExistingPO;
  StockReservr.ToSerNr = ordr;
  StockReservr.ArtCode = artcode;
  foundf = true;
  while (LoopKey("ToItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=kResTypeExistingPO) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=ordr) then begin foundf = false; end;
    if (StockReservr.ArtCode!=artcode) then begin foundf = false; end;
    if (foundf) then begin
      if ((StockReservr.Quant - StockReservr.QuantDone) > 0) then begin
        aqty[acnt] = StockReservr.Quant - StockReservr.QuantDone;
        if (SResb.ReservationType==0) then begin
          aloc[acnt] = StockReservr.IntoLocation;
        end;
        acnt = acnt + 1;
      end;
    end;
  end;
  return;
end;

global
updating function Integer DoORNewReserv(var record StockReservVc StockReservr,Integer therow,LongInt fromsernr,LongInt tosernr,Integer tofilename)
begin
  record StockReservBlock SRb;
  record POVc POr;
  row POVc POrw;
  Integer rwcnt;
  Array string 20 ac;
  string 200 tstr;
  string 60 comment,location;
  val resrv,ordqty;
  val poresrv,poordqty;
  Integer res;
  
  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromSerNr = fromsernr;
  StockReservr.ToSerNr = tosernr;
  StockReservr.ToFileName = tofilename;
  StockReservr.FromFileName = kResTypeSalesOrder;
  switch (StockReservr.ToFileName) begin
    case kResTypeExistingPO:
      POr.SerNr = StockReservr.ToSerNr;
      if (ReadFirstMain(POr,1,true)) then begin
        rwcnt = MatRowCnt(POr);
        if (therow<rwcnt) then begin
          MatRowGet(POr,therow,POrw);
          StockReservr.ArtCode = POrw.ArtCode;
          resrv = GetORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,location,false);
          StockReservr.Comment = comment;
          StockReservr.FromLocation = location;
          StockReservr.IntoLocation = location;
          poresrv = GetPORowReserv(StockReservr.ToSerNr,StockReservr.ArtCode,poordqty,false);
          if (poresrv>=poordqty) then begin
            res = -1;
          end else begin
            if ((ordqty-resrv)>poordqty-poresrv) then begin
              StockReservr.Quant = poordqty-poresrv;
            end else begin
              StockReservr.Quant = ordqty-resrv;
            end;
            if (SRb.AutoLevel==1) then begin
              if (StockReservVcCheck(StockReservr,tstr)==0) then begin
                if (RecordStore(StockReservr,true)) then begin
                  res = 1;
                end;
              end;
            end;
          end;
        end;
      end;
  end;
  DoORNewReserv = res;
  return;
end;

global
updating function Integer DoORNewReservStock(var record StockReservVc StockReservr,string artcode,string serialnr,string fromlocation,LongInt fromsernr)
begin
  record StockMovVc StockMovr;
  record StockReservBlock SRb;
  record ItemStatusVc ISr;
  Array string 20 ac;
  string 200 tstr;
  string 60 comment,location;
  val resrv,ordqty;
  val instock,stockreservq;
  Integer wn;
  Date bldat;
  Integer res;

  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromFileName = kResTypeSalesOrder;
  StockReservr.ToFileName = kResTypeStock;
  StockReservr.FromLocation = fromlocation;
  StockReservr.ArtCode = artcode;
  StockReservr.SerialNr = serialnr;
  StockReservr.FromSerNr = fromsernr;
  instock = GetStockQty(StockReservr.ArtCode,StockReservr.FromLocation,bldat,false);
  FindStockValueInclEntireStockReserv(StockReservr.ArtCode,StockReservr.SerialNr,StockReservr.FromLocation,ISr,stockreservq);
//  FindStockValue(StockReservr.ArtCode,StockReservr.FromLocation,ISr);
//  stockreservq = ISr.StockRsrvQty;
  instock = ISr.Instock - stockreservq;
  resrv = GetORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,location,false);
  StockReservr.Comment = comment;
  StockReservr.IntoLocation = location;
  if ((ordqty-resrv)>instock) then begin
    StockReservr.Quant = instock;
  end else begin
    StockReservr.Quant = ordqty-resrv;
  end;
  if (SRb.AutoLevel==1 and StockReservr.Quant>0) then begin
    if (StockReservVcCheck(StockReservr,tstr)==0) then begin
      if (RecordStore(StockReservr,true)) then begin
        res = 1;
        if (StockReservr.ToFileName==kResTypeStock) then begin
          StockMovr.SerNr = StockReservr.ToSerNr;
          if (ReadFirstMain(StockMovr,1,true)) then begin
            if (StockMovr.OKFlag==0) then begin
              res = 2;
            end;
          end;
        end;
      end;
    end;
  end;
  DoORNewReservStock = res;
  return;
end;

global
updating function Integer DoORNewReservNext(var record StockReservVc StockReservr,string artcode,string serialnr,LongInt fromsernr)
begin
  record StockReservBlock SRb;
  string 200 tstr;
  string 60 comment,location;
  val resrv,ordqty;
  Integer res;
  
  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromFileName = kResTypeSalesOrder;
  StockReservr.ToFileName = kResTypeNextStockIn;
  StockReservr.ToSerNr = -1;
  StockReservr.ArtCode = artcode;
  StockReservr.SerialNr = serialnr;
  StockReservr.FromSerNr = fromsernr;
  resrv = GetORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,location,false);
  StockReservr.Comment = comment;
  StockReservr.FromLocation = location;
  StockReservr.IntoLocation = location;
  StockReservr.Quant = ordqty-resrv;
  if (StockReservr.Quant>0) then begin
    if (SRb.AutoLevel==1) then begin
      if (StockReservVcCheck(StockReservr,tstr)==0) then begin
        if (RecordStore(StockReservr,true)) then begin
          res = 1;
        end;
      end;
    end;
  end;
  DoORNewReservNext = res;
  return;
end;

global
updating function Integer DoORNewBackToBackPO(var record StockReservVc StockReservr,string artcode,LongInt fromsernr)
begin
  record StockReservBlock SRb;
  string 200 tstr;
  string 60 comment,location;
  val resrv,ordqty;
  Integer res;
  
  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromFileName = kResTypeSalesOrder;
  StockReservr.ToFileName = kResTypeMakeNewPO;
  StockReservr.ToSerNr = -1;
  StockReservr.ArtCode = artcode;
  StockReservr.FromSerNr = fromsernr;
  resrv = GetORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,location,false);
  StockReservr.Comment = comment;
  StockReservr.FromLocation = location;
  StockReservr.IntoLocation = location;
  StockReservr.PrioLevel = 500;
  StockReservr.Quant = ordqty-resrv;
  if (StockReservr.Quant>0) then begin
    if (SRb.AutoLevel==1) then begin
      if (StockReservVcCheck(StockReservr,tstr)==0) then begin
        if (RecordStore(StockReservr,true)) then begin
          res = 1;
        end;
      end;
    end;
  end;
  DoORNewBackToBackPO = res;
  return;
end;

global
updating function LongInt StockReservMakeStockMov(record StockReservVc StockReservr)
BEGIN
  record StockReservBlock SRb;
  record StockMovVc oldStockMovr;
  record StockMovVc StockMovr;
  row StockMovVc StockMovrw;
  record INVc INr;
  Boolean perunitf;
  Integer rwcnt,i,rownr;
  LongInt res,error;
  Integer updatemode;
  array string 255 aWarning;
  string 255 errorstr,fieldstr;
  Boolean UnOKedCheckSerialf;

  BlockLoad(SRb);
  if (SRb.ReservationType!=0) then begin
    goto LStockReservMakeStockMov;
  end;
  updatemode = 2;
  res = -1;
  RecordNew(StockMovr);  
  StockMovr.FrLocation = StockReservr.FromLocation;
  StockMovr.ToLocation = StockReservr.IntoLocation;
  StockMovr.ToForkLiftQue = 0;
  StockMovr.TransNr = StockReservr.SerNr;
  StockMovr.FileName = "StockReservVc";
  StockMovr.TransDate = CurrentDate;
  StockMovr.Comment = USetStr(16142) & " " & StockReservr.Comment;
  StockMovr.SerNr = NextSerNr("StockMovVc",StockMovr.TransDate,-1,false,"");
  ClearRow(StockMovr,StockMovrw,1);
  if (ReadFirstItem(StockReservr.ArtCode,INr,true,false)) then begin
    if (INr.SerNrf==1) then begin
      perunitf = true;
    end;
  end;
  if (perunitf) then begin
    rwcnt = StockReservr.Quant-StockReservr.QuantDone;
    for (i=0;i<rwcnt;i=i+1) begin
      StockMovrw.ArtCode = StockReservr.ArtCode;
      StockMovrw.Quant = 1;
      StockMovrw.SerialNr = StockReservr.SerialNr;
      MatRowPut(StockMovr,MatRowCnt(StockMovr),StockMovrw);
      if (StockMovVc_PasteArtCode(StockMovr,MatRowCnt(StockMovr)-1,1,aWarning)) then begin end;
    end;
  end else begin
    StockMovrw.ArtCode = StockReservr.ArtCode;
    StockMovrw.Quant = StockReservr.Quant-StockReservr.QuantDone;
    MatRowPut(StockMovr,MatRowCnt(StockMovr),StockMovrw);
    if (StockMovVc_PasteArtCode(StockMovr,MatRowCnt(StockMovr)-1,1,aWarning)) then begin end;
  end;
  if (MatRowCnt(StockMovr)>0) then begin
    StockMovSumUp(StockMovr);    
    if (RecordStore(StockMovr,false)) then begin
    end;
    res = StockMovr.SerNr;
    if (SRb.AutoLevel==1 and SRb.ReservationType==0) then begin
      RecordCopy(oldStockMovr,StockMovr);
      StockMovr.OKFlag = 1;
      UnOKedCheckSerialf = false;
      if (CheckStockMovRecord(StockMovr,oldStockMovr,updatemode,1,false,error,errorstr,rownr,fieldstr,UnOKedCheckSerialf)==0) then begin
        if (RecordUpdate(oldStockMovr,StockMovr,true)==0) then begin end;
      end;
    end;
  end;
LStockReservMakeStockMov:;
  StockReservMakeStockMov = res;
  RETURN;
END;

updating procedure FindAndDoORNewReserv(var record StockReservVc StockReservr,string artcode,string location,LongInt ordnr,var val remq)
begin
  record POVc POr;
  row POVc POrw;
  Integer rwcnt,i;
  Boolean foundf;
  Boolean firstf;
  val resrv,ordqty;
  
  POr.PUFlag = 0;
  foundf = true;
  firstf = true;
  while (LoopKey("PUFlag",POr,1,foundf)) begin
    if (POr.PUFlag!=0) then begin
      foundf = false;
    end;
    if (foundf) then begin
      rwcnt = MatRowCnt(POr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POr,i,POrw);
        if (POrw.ArtCode==artcode) then begin
          if (POrw.Quant>POrw.Shipd1) then begin
            resrv = GetPORowReserv(POr.SerNr,POrw.ArtCode,ordqty,false);
            if (resrv<POrw.Quant-POrw.Shipd1) then begin
              DoORNewReserv(StockReservr,i,ordnr,POr.SerNr,1);
              remq = remq - StockReservr.Quant;
              if (remq<=0) then begin
                foundf = false;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating function Boolean DoAutoReserveAll(record ORVc ORr,Integer ln)
begin
  Boolean res;
  record StockReservVc StockReservr;
  record StockReservBlock SRb;
  row ORVc ORrw;
  row ORVc ORrw2;
  Integer i,j,rwcnt;
  Boolean foundf,testf;
  LongInt fror,toor;
  val resrv,ordqty,remq;
  string 60 comment,location;
  
  BlockLoad(SRb);
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);
    testf = true;
    if (ln<0) then begin
      for (j=0;j<i;j=j+1) begin
        MatRowGet(ORr,j,ORrw2);
        if (ORrw.ArtCode==ORrw2.ArtCode and ORrw.SerialNr==ORrw2.SerialNr) then begin
          testf = false;
          j = i;
        end;
      end;
    end else begin
      if (i!=ln) then begin
        testf = false;
      end;
    end;
    if (ORrw.stp==1 and testf) then begin
      resrv = GetORRowReserv(ORr.SerNr,ORrw.ArtCode,ORrw.SerialNr,ordqty,comment,location,false);
      if (DoORNewReservStock(StockReservr,ORrw.ArtCode,ORrw.SerialNr,location,ORr.SerNr)<2) then begin
        remq = ordqty - resrv - StockReservr.Quant;
        if (remq>0) then begin
          FindAndDoORNewReserv(StockReservr,ORrw.ArtCode,location,ORr.SerNr,remq);
        end;
        if (remq>0) then begin
          DoORNewReservNext(StockReservr,ORrw.ArtCode,ORrw.SerialNr,ORr.SerNr);
        end;
        res = true;
      end;
    end;
  end;
  DoAutoReserveAll = res;
  return;
end;

global
function val GetIntORRowReserv(LongInt ordr,string artcode,string serialnr,var val ordqty,var string comment,var string frlocation,var string tolocation,Boolean printf)
begin
  record StockReservVc StockReservr;
  record StockReservBlock SRb;
  record UserVc Userr;
  record IntORVc IntORr;
  row IntORVc IntORrw;
  string 200 regnam,dblstr,plandel;
  Boolean firstf;
  Boolean foundf,testf;
  Integer i,rwcnt;
  val res;

  BlockLoad(SRb);
  ordqty = 0;
  frlocation = "";
  tolocation = "";
  IntORr.SerNr = ordr;
  if (ReadFirstMain(IntORr,1,true)) then begin
    tolocation = IntORr.Location;
    rwcnt = MatRowCnt(IntORr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IntORr,i,IntORrw);
      if (IntORrw.ArtCode==artcode and IntORrw.SerialNr==serialnr) then begin
        ordqty = ordqty + IntORrw.Quant-IntORrw.Shipd2;
      end;
    end;
    comment = IntORr.Name;
    if (SRb.UseOrderLocation==1 or SRb.ReservationType!=0) then begin
      frlocation = IntORr.FrLocation;
    end;
  end;
  if (SRb.UseOrderLocation==2 and SRb.ReservationType==0) then begin
    GetCurUser(Userr);
    frlocation = Userr.ReservLocation;
  end;
  StockReservr.Donef = 0;
  StockReservr.FromFileName = kResTypeInternalOrder;
  StockReservr.FromSerNr = ordr;
  StockReservr.ArtCode = artcode;
  foundf = true;
  firstf = true;
  while (LoopKey("FromItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.FromFileName!=kResTypeInternalOrder) then begin foundf = false; end;
    if (StockReservr.FromSerNr!=ordr) then begin foundf = false; end;
    if (StockReservr.ArtCode!=artcode) then begin foundf = false; end;
    testf = foundf;
    if (StockReservr.SerialNr!=serialnr) then begin testf = false; end;
    if (nonblank(frlocation)) then begin
      if (StockReservr.FromLocation!=frlocation) then begin testf = false; end;
    end;
    if (testf) then begin
      res = res + StockReservr.Quant - StockReservr.QuantDone;
      if (printf) then begin
        if (firstf) then begin
          StartFormat(15);
          OutString(0,0,USetStr(16147),false);
          EndFormat;
          StartFormat(15);
          OutString(0,0,USetStr(16142),false);
          OutString(2,0,USetStr(16143),false);
          OutString(4,0,USetStr(16144),false);
          OutString(8,0,USetStr(16145),false);
          OutString(6,0,USetStr(16160),true);
          OutString(7,0,USetStr(16146),true);
          EndFormat;
          Gray_Divider(0,1);
          firstf = false;
        end;
        GetRegisterToStrings(StockReservr.ToFileName,StockReservr.ToSerNr,regnam,dblstr,plandel);
        StartFormat(15);
        OutString(0,"DblStockReservVc",StockReservr.SerNr,false);
        OutString(2,0,regnam,false);
        OutLongInt(4,dblstr,StockReservr.ToSerNr,false);
        if (StockReservr.ToFileName==kResTypeStock) then begin
          OutString(8,0,StockReservr.SerialNr,false);
        end else begin
          OutString(8,0,plandel,false);
        end;
        OutVal(6,0,StockReservr.QuantDone,M4UVal,true);
        OutVal(7,0,StockReservr.Quant,M4UVal,true);
        OutStringID(1,"DblStockReservRel",USetStr(16169),true,StockReservr.SerNr);
        EndFormat;
      end;
    end;
  end;
  if (firstf==false) then begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;
  GetIntORRowReserv = res;
  return;
end;

global
updating function Integer DoIntORNewReserv(var record StockReservVc StockReservr,Integer therow,LongInt fromsernr,LongInt tosernr,Integer tofilename)
begin
  record StockReservBlock SRb;
  record POVc POr;
  row POVc POrw;
  Integer rwcnt;
  Array string 20 ac;
  string 200 tstr;
  string 60 comment,frlocation,tolocation;
  val resrv,ordqty;
  val poresrv,poordqty;
  Integer res;
  
  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromSerNr = fromsernr;
  StockReservr.ToSerNr = tosernr;
  StockReservr.ToFileName = tofilename;
  StockReservr.FromFileName = kResTypeInternalOrder;
  switch (StockReservr.ToFileName) begin
    case kResTypeExistingPO:
      POr.SerNr = StockReservr.ToSerNr;
      if (ReadFirstMain(POr,1,true)) then begin
        rwcnt = MatRowCnt(POr);
        if (therow<rwcnt) then begin
          MatRowGet(POr,therow,POrw);
          StockReservr.ArtCode = POrw.ArtCode;
          resrv = GetIntORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,frlocation,tolocation,false);
          StockReservr.Comment = comment;
          StockReservr.FromLocation = frlocation;
          StockReservr.IntoLocation = tolocation;
          poresrv = GetPORowReserv(StockReservr.ToSerNr,StockReservr.ArtCode,poordqty,false);
          if (poresrv>=poordqty) then begin
            res = -1;
          end else begin
            if ((ordqty-resrv)>poordqty-poresrv) then begin
              StockReservr.Quant = poordqty-poresrv;
            end else begin
              StockReservr.Quant = ordqty-resrv;
            end;
            if (SRb.AutoLevel==1) then begin
              if (StockReservVcCheck(StockReservr,tstr)==0) then begin
                if (RecordStore(StockReservr,true)) then begin
                  res = 1;
                end;
              end;
            end;
          end;
        end;
      end;
  end;
  DoIntORNewReserv = res;
  return;
end;

global
updating function Integer DoIntORNewReservStock(var record StockReservVc StockReservr,string artcode,string serialnr,string fromlocation,LongInt fromsernr)
begin
  record StockMovVc StockMovr;
  record StockReservBlock SRb;
  record ItemStatusVc ISr;
  Array string 20 ac;
  string 200 tstr;
  string 60 comment,frlocation,tolocation;
  val resrv,ordqty;
  val instock,stockreservq;
  Integer wn;
  Date bldat;
  Integer res;

  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromFileName = kResTypeInternalOrder;
  StockReservr.ToFileName = kResTypeStock;
  StockReservr.FromLocation = fromlocation;
  StockReservr.ArtCode = artcode;
  StockReservr.SerialNr = serialnr;
  StockReservr.FromSerNr = fromsernr;
  instock = GetStockQty(StockReservr.ArtCode,StockReservr.FromLocation,bldat,false);
  FindStockValueInclEntireStockReserv(StockReservr.ArtCode,StockReservr.SerialNr,StockReservr.FromLocation,ISr,stockreservq);
//  FindStockValue(StockReservr.ArtCode,StockReservr.FromLocation,ISr);
//  stockreservq = ISr.StockRsrvQty;
  instock = ISr.Instock - stockreservq;
  resrv = GetIntORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,frlocation,tolocation,false);
  StockReservr.Comment = comment;
  StockReservr.FromLocation = frlocation;
  StockReservr.IntoLocation = tolocation;
  if ((ordqty-resrv)>instock) then begin
    StockReservr.Quant = instock;
  end else begin
    StockReservr.Quant = ordqty-resrv;
  end;
  if (SRb.AutoLevel==1 and StockReservr.Quant>0) then begin
    if (StockReservVcCheck(StockReservr,tstr)==0) then begin
      if (RecordStore(StockReservr,true)) then begin
        res = 1;
        if (StockReservr.ToFileName==kResTypeStock) then begin
          StockMovr.SerNr = StockReservr.ToSerNr;
          if (ReadFirstMain(StockMovr,1,true)) then begin
            if (StockMovr.OKFlag==0) then begin
              res = 2;
            end;
          end;
        end;
      end;
    end;
  end;
  DoIntORNewReservStock = res;
  return;
end;

global
updating function Integer DoIntORNewReservNext(var record StockReservVc StockReservr,string artcode,LongInt fromsernr)
begin
  record StockReservBlock SRb;
  string 200 tstr;
  string 60 comment,frlocation,tolocation;
  val resrv,ordqty;
  Integer res;
  
  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromFileName = kResTypeInternalOrder;
  StockReservr.ToFileName = kResTypeNextStockIn;
  StockReservr.ToSerNr = -1;
  StockReservr.ArtCode = artcode;
  StockReservr.FromSerNr = fromsernr;
  resrv = GetIntORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,frlocation,tolocation,false);
  StockReservr.Comment = comment;
  StockReservr.FromLocation = frlocation;
  StockReservr.IntoLocation = tolocation;
  StockReservr.Quant = ordqty-resrv;
  if (StockReservr.Quant>0) then begin
    if (SRb.AutoLevel==1) then begin
      if (StockReservVcCheck(StockReservr,tstr)==0) then begin
        if (RecordStore(StockReservr,true)) then begin
          res = 1;
        end;
      end;
    end;
  end;
  DoIntORNewReservNext = res;
  return;
end;

global
updating function Integer DoIntORNewBackToBackPO(var record StockReservVc StockReservr,string artcode,LongInt fromsernr)
begin
  record StockReservBlock SRb;
  string 200 tstr;
  string 60 comment,frlocation,tolocation;
  val resrv,ordqty;
  Integer res;
  
  res = 0;
  BlockLoad(SRb);
  RecordNew(StockReservr);
  StockReservr.FromFileName = kResTypeInternalOrder;
  StockReservr.ToFileName = kResTypeMakeNewPO;
  StockReservr.ToSerNr = -1;
  StockReservr.ArtCode = artcode;
  StockReservr.FromSerNr = fromsernr;
  resrv = GetIntORRowReserv(StockReservr.FromSerNr,StockReservr.ArtCode,StockReservr.SerialNr,ordqty,comment,frlocation,tolocation,false);
  StockReservr.Comment = comment;
  StockReservr.FromLocation = frlocation;
  StockReservr.IntoLocation = tolocation;
  StockReservr.PrioLevel = 500;
  StockReservr.Quant = ordqty-resrv;
  if (StockReservr.Quant>0) then begin
    if (SRb.AutoLevel==1) then begin
      if (StockReservVcCheck(StockReservr,tstr)==0) then begin
        if (RecordStore(StockReservr,true)) then begin
          res = 1;
        end;
      end;
    end;
  end;
  DoIntORNewBackToBackPO = res;
  return;
end;

updating procedure FindAndDoIntORNewReserv(record StockReservVc StockReservr,string artcode,string location,LongInt ordnr,var val remq)
begin
  record POVc POr;
  row POVc POrw;
  Integer rwcnt,i;
  Boolean foundf;
  Boolean firstf;
  val resrv,ordqty;
  
  POr.PUFlag = 0;
  foundf = true;
  firstf = true;
  while (LoopKey("PUFlag",POr,1,foundf)) begin
    if (POr.PUFlag!=0) then begin
      foundf = false;
    end;
    if (foundf) then begin
      rwcnt = MatRowCnt(POr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(POr,i,POrw);
        if (POrw.ArtCode==artcode) then begin
          if (POrw.Quant>POrw.Shipd1) then begin
            resrv = GetPORowReserv(POr.SerNr,POrw.ArtCode,ordqty,false);
            if (resrv<POrw.Quant-POrw.Shipd1) then begin
              DoIntORNewReserv(StockReservr,i,ordnr,POr.SerNr,1);
              remq = remq - StockReservr.Quant;
              if (remq<=0) then begin
                foundf = false;
              end;
            end;
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
updating function Boolean DoAutoReserveIntORAll(record IntORVc IntORr,Integer ln)
begin
  Boolean res;
  record StockReservVc StockReservr;
  record StockReservBlock SRb;
  row IntORVc IntORrw;
  row IntORVc IntORrw2;
  Integer i,j,rwcnt;
  Boolean foundf,testf;
  LongInt fror,toor;
  val resrv,ordqty,remq;
  string 60 comment,frlocation,tolocation;
  
  BlockLoad(SRb);
  rwcnt = MatRowCnt(IntORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntORr,i,IntORrw);
    testf = true;
    if (ln<0) then begin
      for (j=0;j<i;j=j+1) begin
        MatRowGet(IntORr,j,IntORrw2);
        if (IntORrw.ArtCode==IntORrw2.ArtCode and IntORrw.SerialNr==IntORrw2.SerialNr) then begin
          testf = false;
          j = i;
        end;
      end;
    end else begin
      if (i!=ln) then begin
        testf = false;
      end;
    end;
    if (testf) then begin
      resrv = GetIntORRowReserv(IntORr.SerNr,IntORrw.ArtCode,IntORrw.SerialNr,ordqty,comment,frlocation,tolocation,false);
      if (DoIntORNewReservStock(StockReservr,IntORrw.ArtCode,IntORrw.SerialNr,frlocation,IntORr.SerNr)<2) then begin
        remq = ordqty - resrv - StockReservr.Quant;
        if (remq>0) then begin
          FindAndDoIntORNewReserv(StockReservr,IntORrw.ArtCode,frlocation,IntORr.SerNr,remq);
        end;
        if (remq>0) then begin
          DoIntORNewReservNext(StockReservr,IntORrw.ArtCode,IntORr.SerNr)
        end;
        res = true;
      end;
    end;
  end;
  DoAutoReserveIntORAll = res;
  return;
end;

updating procedure UpdateStockResFromSDRow(record SDVc SDp,row SDVc SDrw)
begin
  record StockReservVc StockReservr;
  record StockReservVc oldStockReservr;
  Boolean foundf;
  Boolean testf;
  array LongInt stra;
  LongInt acnt,i;
  
  acnt = 0;
  StockReservr.Donef = 0;
  StockReservr.FromFileName = kResTypeInternalOrder;
  StockReservr.FromSerNr = SDp.IntORNo;
  StockReservr.ArtCode = SDrw.ArtCode;
  foundf = true;
  while (LoopKey("FromItem",StockReservr,4,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.FromFileName!=kResTypeInternalOrder) then begin foundf = false; end;
    if (StockReservr.FromSerNr!=SDp.IntORNo) then begin foundf = false; end;
    if (StockReservr.ArtCode!=SDrw.ArtCode) then begin foundf = false; end;
    if (foundf) then begin
      RecordCopy(oldStockReservr,StockReservr);
      StockReservr.QuantDone = StockReservr.QuantDone + SDrw.Qty;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
      if (StockReservr.QuantDone==StockReservr.Quant) then begin
        stra[acnt] = StockReservr.SerNr;
        acnt = acnt + 1;
      end;
    end;
  end;
  for (i=0;i<acnt;i=i+1) begin
    StockReservr.SerNr = stra[i];
    if (ReadFirstMain(StockReservr,1,true)) begin
      RecordCopy(oldStockReservr,StockReservr);
      StockReservr.Donef = 1;
      if (RecordUpdate(oldStockReservr,StockReservr,false)==0) then begin
      end;
    end;
  end;
  return;
end;

global
updating procedure UpdateStockResFromSD(record SDVc SDp)
BEGIN
  row SDVc SDrw;
  Integer i,rwcnt;
  Integer orw,orcnt;
  
  if (SDp.OKFlag!=0) then begin
    if (CountRecords("StockReservVc")>0) then begin
      rwcnt = MatRowCnt(SDp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SDp,i,SDrw);
        UpdateStockResFromSDRow(SDp,SDrw);
      end;
    end;
  end;
  return;
end;