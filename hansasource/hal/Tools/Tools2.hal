external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindTAX1(string,val,Integer,Integer);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function val FindVAT(string,val,Integer,Integer);

global
function Boolean CheckPlanShip(string selection,string planlev)
BEGIN
  string 255 fr,to;
  LongInt lfr,lto,l;
  Date dfr,dto,d;
  Boolean res;
  record PlanDeliveryBlock PlanDelRec;
  
  res = true;
  fr = FirstInRange(selection,20);
  to = LastInRange(selection,20);  
  BlockLoad(PlanDelRec);
  if (PlanDelRec.FieldType==0) then begin
      if (fr>planlev) then begin res = false; end;
      if (to<planlev) then begin res = false; end;
  end;
  if (PlanDelRec.FieldType==1) then begin
      dfr = StringToDate(fr);
      dto = StringToDate(to);
      d = StringToDate(planlev);
//      if (d>dfr) then begin res = false; end;
//      if (d<dto) then begin res = false; end;
      if (d<dfr) then begin res = false; end;
      if (d>dto) then begin res = false; end;
  end;
  if ((PlanDelRec.FieldType==2) or (PlanDelRec.FieldType==3)) then begin
      lfr = FirstInRange(fr,10);
      lto = FirstInRange(to,10);
      l = FirstInRange(planlev,10);
      if (l>lfr) then begin res = false; end;
      if (l<lto) then begin res = false; end;
  end;
  CheckPlanShip = res;
  return;
END;

global
function Boolean CheckPlanShipRows(string plandel,record ORVc ORp)
BEGIN
  Boolean res;
  row ORVc ORrw;
  Integer i,rwcnt;
  
  if (CheckPlanShip(plandel,ORp.PlanShip)) then begin
    res = true; 
  end else begin
    rwcnt = MatRowCnt(ORp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(ORp,i,ORrw);
      if (nonblankdate(ORrw.PlanShipRow)) then begin
        if (CheckPlanShip(plandel,ORrw.PlanShipRow)) then begin 
          res = true; 
          goto LCheckPlanShipRows;
        end;
      end;
    end;
  end;  
LCheckPlanShipRows:;
  CheckPlanShipRows = res;
  RETURN;
END;

global
function Boolean POCheckPlanShipRows(string plandel,record POVc POp)
BEGIN
  Boolean res;
  row POVc POrw;
  Integer i,rwcnt;
  
  if (CheckPlanShip(plandel,POp.PlanShip)) then begin
    res = true; 
  end else begin
    rwcnt = MatRowCnt(POp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(POp,i,POrw);
      if (nonblankdate(POrw.PlanShipRow)) then begin
        if (CheckPlanShip(plandel,POrw.PlanShipRow)) then begin 
          res = true; 
          goto LPOCheckPlanShipRows;
        end;
      end;
    end;
  end;  
LPOCheckPlanShipRows:;
  POCheckPlanShipRows = res;
  RETURN;
END;

global
function Boolean InvableOrder(record ORVc ORp)
BEGIN
  Boolean res;
  row ORVc ORrw;
  Integer i,rwcnt;
  val t;
  
  res = false;
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    if (ORrw.stp==1) then begin
      if (nonblank(ORrw.ArtCode)) then begin
        if (ORp.InvBeforeShip!=0) then begin
          t = ORrw.Quant - ORrw.Invd;
        end else begin
          t = ORrw.Shipd2 - ORrw.Invd;
        end;
        if (t!=0) then begin
          res = true;
          i = rwcnt;
        end;
      end;
    end;
  end;
  InvableOrder = res;
  RETURN;
END;

global
procedure FindSalesExVat(record TaxMatrixVc TMr,string VATCode, val sum,Integer IncVAT,Integer NoTAXonVAT,var val resv)
begin
  val vat;

  if (IncVAT>0) then begin
    if (UseTaxTemplatesforTaxCalc==false) then begin
      switch (IncVAT) begin
        case kBasePriceInclVAT:
          switch (NoTAXonVAT) begin
            case 2:
              vat = FindVAT(VATCode,sum,IncVAT,0);
//VAT form TAX not included in VAT for GP calcualtion
            otherwise
              vat = FindVAT(VATCode,sum,IncVAT,NoTAXonVAT);
          end;
        otherwise
          vat = FindVAT(VATCode,sum,IncVAT,NoTAXonVAT);
      end;
      resv = sum - vat;
      if (IncVAT==kBasePriceInclVATandTax) then begin
        vat = FindTAX1(VATCode,sum,IncVAT,NoTAXonVAT);
        resv = resv - vat;
      end;
    end else begin
      vat = CalculateTotalVATFromTaxMatrix(TMr,IncVAT);
      resv = sum - vat;
    end;
  end else begin
    resv = sum;         
  end;
  return;
end;

global
procedure SubPrePayments(record IVVc IVp,var val rvalp,var val rvalb1p)
BEGIN
  row IVVc IVrw;
  Integer rwcnt,i;
  
  if (IVp.InvType!=kInvoiceTypeCash and IVp.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin
    rwcnt = MatRowCnt(IVp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.stp==6) then begin
        rvalp = rvalp - IVrw.Sum;
        rvalb1p = rvalb1p - MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
      end;
    end;
  end;
  RETURN;
END;

global
procedure SubCashRows_IVVc(record IVVc IVp,Boolean addinvsumf,var val rvalp,var val rvalb1p)
BEGIN
/*update ARPaymentRowSub*/
  row IVVc IVrw;
  Integer rwcnt,i;
  val t;
  record IVVc IVr;
  Boolean found;
    
  if (addinvsumf) then begin
    rvalp = blankval;
    rvalb1p = blankval;
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      rvalp = rvalp - IVp.Sum4;
      rvalb1p = rvalb1p - MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end else begin
      rvalp = rvalp + IVp.Sum4;
      rvalb1p = rvalb1p + MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end;  
  end;
  if (IVp.RetnValue<0 and IVp.Sum4<0) then begin
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      rvalp = rvalp - IVp.RetnValue;
      rvalb1p = rvalb1p - MulRateToBase1(IVp.CurncyCode,IVp.RetnValue,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end else begin
      rvalp = rvalp + IVp.RetnValue;
      rvalb1p = rvalb1p + MulRateToBase1(IVp.CurncyCode,IVp.RetnValue,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  if (IVp.RetnValue>0 and IVp.Sum4>0) then begin
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      rvalp = rvalp - IVp.RetnValue;
      rvalb1p = rvalb1p - MulRateToBase1(IVp.CurncyCode,IVp.RetnValue,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end else begin
      rvalp = rvalp + IVp.RetnValue;
      rvalb1p = rvalb1p + MulRateToBase1(IVp.CurncyCode,IVp.RetnValue,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end;
  end;
/*  
  if (IVp.RetnValue>0 and IVp.Sum4<0) then begin
//this cannot be right , if u have negative invoice and u recived money ?  
//    rvalp = rvalp + IVp.RetnValue;
//    rvalb1p = rvalb1p + MulRateToBase1(IVp.CurncyCode,IVp.RetnValue,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  end;
*/  
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    t = 0;
    if (IVrw.stp==kInvoiceRowTypeGiftVoucherPayment) then begin
      t = IVrw.Sum;
      if (IVrw.CurncyCode!=IVp.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
        CurValToOtherCur(IVp.TransDate,IVrw.CurncyCode,IVrw.Sum,IVp.CurncyCode,t,DefaultCurRoundOff);  
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin
      t = IVrw.Sum;
      if (IVrw.CurncyCode!=IVp.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
        CurValToOtherCur(IVp.TransDate,IVrw.CurncyCode,IVrw.Sum,IVp.CurncyCode,t,DefaultCurRoundOff);  
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment) then begin
      t = IVrw.Sum;
      if (IVrw.CurncyCode!=IVp.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
        CurValToOtherCur(IVp.TransDate,IVrw.CurncyCode,IVrw.Sum,IVp.CurncyCode,t,DefaultCurRoundOff);  
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeChequePayment) then begin
      t = IVrw.Sum;
      if (IVrw.CurncyCode!=IVp.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
        CurValToOtherCur(IVp.TransDate,IVrw.CurncyCode,IVrw.Sum,IVp.CurncyCode,t,DefaultCurRoundOff);  
      end;
    end;
    if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
      t = IVrw.Sum;
      if (IVrw.CurncyCode!=IVp.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
        CurValToOtherCur(IVp.TransDate,IVrw.CurncyCode,IVrw.Sum,IVp.CurncyCode,t,DefaultCurRoundOff);  
      end;
    end;
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      rvalp = rvalp + t;
      rvalb1p = rvalb1p + MulRateToBase1(IVp.CurncyCode,t,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end else begin
      rvalp = rvalp - t;
      rvalb1p = rvalb1p - MulRateToBase1(IVp.CurncyCode,t,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
    end;
  end;
  if (IVp.SerNr>0) then begin
    found = true;
    IVr.CredInv = IVp.SerNr;
    while (LoopKey("CredInv",IVr,1,found)) begin
      if (IVr.CredInv!=IVp.SerNr) then begin found = false; end;
      if (found) then begin
        rwcnt = MatRowCnt(IVr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVr,i,IVrw);
          t = 0;
          if (IVrw.stp==14) then begin
            t = IVrw.Sum;
            if (IVrw.CurncyCode!=IVr.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
              CurValToOtherCur(IVr.TransDate,IVrw.CurncyCode,IVrw.Sum,IVr.CurncyCode,t,DefaultCurRoundOff);  
            end;
          end;
          if (IVrw.stp==15) then begin
            t = IVrw.Sum;
            if (IVrw.CurncyCode!=IVr.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
              CurValToOtherCur(IVr.TransDate,IVrw.CurncyCode,IVrw.Sum,IVr.CurncyCode,t,DefaultCurRoundOff);  
            end;
          end;
          if (IVrw.stp==16) then begin
            t = IVrw.Sum;
            if (IVrw.CurncyCode!=IVr.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
              CurValToOtherCur(IVr.TransDate,IVrw.CurncyCode,IVrw.Sum,IVr.CurncyCode,t,DefaultCurRoundOff);  
            end;
          end;
          if (IVrw.stp==kInvoiceRowTypeChequePayment) then begin
            t = IVrw.Sum;
            if (IVrw.CurncyCode!=IVr.CurncyCode) and nonblank(IVrw.CurncyCode) then begin
              CurValToOtherCur(IVr.TransDate,IVrw.CurncyCode,IVrw.Sum,IVr.CurncyCode,t,DefaultCurRoundOff);  
            end;
          end;
          if (IVr.InvType==kInvoiceTypeCredit or IVr.InvType==kInvoiceTypeCreditSpecialSales) then begin
            rvalp = rvalp + t;
            rvalb1p = rvalb1p + MulRateToBase1(IVp.CurncyCode,t,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
          end else begin
            rvalp = rvalp - t;
            rvalb1p = rvalb1p - MulRateToBase1(IVp.CurncyCode,t,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
          end;
        end;

      end;
    end;
  end;
  RETURN;
END;

global
procedure SumNoDownPay(record IVVc IVp,var val sum1,var val sum2,var val sum3,var val sum4,var val downpaidp,var val downpvatp)
BEGIN
  row IVVc IVrw;
  Integer rwcnt,i;
  val downpaid,downpvat;
  val temp,t1;
  record SMVc VATr;
  Integer vatcnt;
  
  RecordNew(VATr);
  SetupVATBase(VATr,vatcnt);          
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    if (IVrw.stp==5) then begin
      downpaid = downpaid - IVrw.Sum;
      AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
    end;
    if (IVrw.stp==6) then begin
      downpaid = downpaid - IVrw.Sum + IVrw.Price;
      downpvat = downpvat + IVrw.Price;
//      AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,blankval,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
    end;  
  end;
  CalcVATBaseVAT(VATr,IVp.InclVAT,IVp.NoTAXonVAT,vatcnt,temp,t1);
  downpvat = downpvat + temp;
  downpvat = -Round(downpvat,SetRoundModeD(2));
  sum1 = IVp.Sum1 + downpaid;
  sum3 = IVp.Sum3 + downpvat;
  sum4 = IVp.Sum4 + downpvat + downpaid;
  downpaidp = downpaid;
  downpvatp = downpvat;
  RETURN;
END;

global
procedure GetEmplName(string emcode,var string res)
BEGIN
  record UserVc USr;
  
  res = emcode;
  USr.Code = emcode;
  if (ReadFirstMain(USr,1,true)) then begin
    res = USr.Name;
  end;
  RETURN;
END;

global
procedure GetPRItemName(string code,string comment,var string name)
BEGIN
  record INVc INr;
  
  name = "";
  INr.Code = code;
  if (ReadFirstMain(INr,1,true)) then begin
    name = INr.Name;
    if (nonblank(comment)) then begin name = name & ", "; end;
  end;
  if (nonblank(comment)) then begin name = name & comment; end;
  RETURN;
END;

global
procedure GetItemSalesAcc(string item,Integer aexport,var string salesacc)
BEGIN
  record ITVc ITr;
  record INVc INr;
  record AccBlock ARAccRec;

  BlockLoad(ARAccRec);  
  salesacc ="";
  INr.Code = item;
  if (ReadFirstMain(INr,1,true)) then begin
    switch (aexport) begin
      case 4: salesacc = INr.ExpSalesAcc;
      case 3: salesacc = INr.EUSalesAcc; 
      case 2: salesacc = INr.ExpSalesAcc;
      case 1: salesacc = INr.EUSalesAcc; 
      otherwise salesacc = INr.SalesAcc;
    end;  
    if (blank(salesacc)) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        switch (aexport) begin
          case 4: salesacc = ITr.ExpSalesAcc;
          case 3: salesacc = ITr.EUSalesAcc; 
          case 2: salesacc = ITr.ExpSalesAcc;
          case 1: salesacc = ITr.EUSalesAcc; 
          otherwise salesacc = ITr.SalesAcc;
        end;  
      end;
    end;
  end;
  if (blank(salesacc)) then begin
    switch (aexport) begin
      case 4: salesacc = ARAccRec.ExpSalesAcc;
      case 3: salesacc = ARAccRec.EUSalesAcc;
      case 2: salesacc = ARAccRec.ExpSalesAcc;
      case 1: salesacc = ARAccRec.EUSalesAcc;
      otherwise salesacc = ARAccRec.DomSalesAcc;
    end;
    if (blank(salesacc)) then begin
      salesacc = ARAccRec.DomSalesAcc;
    end;
  end;
  RETURN;
END;

global
procedure GetItemCreditSalesAcc(string item,Integer aexport,var string salesacc)
BEGIN
  record ITVc ITr;
  record INVc INr;
  record AccBlock ARAccRec;

  BlockLoad(ARAccRec);  
  salesacc ="";
  INr.Code = item;
  if (ReadFirstMain(INr,1,true)) then begin
    switch (aexport) begin
      case 4: salesacc = INr.CredExpSalesAcc;
      case 3: salesacc = INr.CredEUSalesAcc; 
      case 2: salesacc = INr.CredExpSalesAcc;
      case 1: salesacc = INr.CredEUSalesAcc; 
      otherwise salesacc = INr.CredSalesAcc;
    end;  
    if (blank(salesacc)) then begin
      ITr.Code = INr.Group;
      if (ReadFirstMain(ITr,1,true)) then begin
        switch (aexport) begin
          case 4: salesacc = ITr.CredExpSalesAcc;
          case 3: salesacc = ITr.CredEUSalesAcc; 
          case 2: salesacc = ITr.CredExpSalesAcc;
          case 1: salesacc = ITr.CredEUSalesAcc; 
          otherwise salesacc = ITr.CredSalesAcc;
        end;  
      end;
    end;
  end;
  if (blank(salesacc)) then begin
    switch (aexport) begin
      case 4: salesacc = ARAccRec.CredExpSalesAcc;
      case 3: salesacc = ARAccRec.CredEUSalesAcc; 
      case 2: salesacc = ARAccRec.CredExpSalesAcc;
      case 1: salesacc = ARAccRec.CredEUSalesAcc; 
      otherwise salesacc = ARAccRec.CredDomSalesAcc;
    end;  
    if (blank(salesacc)) then begin
      salesacc = ARAccRec.DomSalesAcc;
    end;
  end;
  RETURN;
END;

global
procedure AdjustTBPrice(var val ivpricep,var val tbpricep)
BEGIN
  val two;
  
  two = 2;
  if (ivpricep<>0) then begin
    if (tbpricep<>ivpricep) then begin
      ivpricep = ivpricep + tbpricep;
      ivpricep = ivpricep/two;
      ivpricep = Round(ivpricep,DefaultRoundMode);
    end;
  end else begin
    ivpricep = tbpricep;
  end;
  RETURN;
END;

global
function Boolean BaseCurncy1Match(string curncy,Boolean pmatchf)
BEGIN
  record BaseCurBlock BaseCurRec;
  Boolean res;
  
  res = true;
  BlockLoad(BaseCurRec);
  if (blank(curncy)) then begin 
    if (pmatchf) then begin 
      res = false;
    end;
    goto L99;
  end;
  if (BaseCurRec.BaseCur1<>curncy) then begin
    res = false;
  end;
L99:;  
  BaseCurncy1Match = res;
  RETURN;
END;
