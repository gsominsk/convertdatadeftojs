global
function val GetOfficialShareValue(Date thedate)
begin
  record OfficialValueVc OVr;
  val res;

  res = BlankVal;
  OVr.TransDate = thedate;
  if (ReadLastMain(OVr,1,false)) then begin
    res = OVr.ValuePerShare;
  end;
  GetOfficialShareValue = res;
  return;
end;

global
function val GetMainShareHoldValue(Date thedate)
begin
  record MainShareHoldValueVc MSr;
  val res;

  res = BlankVal;
  MSr.TransDate = thedate;
  if (ReadLastMain(MSr,1,false)) then begin
    res = MSr.ValuePerShare;
  end;
  GetMainShareHoldValue = res;
  return;
end;

global
function val GetCompanyShareValue(Date thedate)
begin
  record CompanyValueVc CVr;
  val res;

  res = BlankVal;
  CVr.TransDate = thedate;
  if (ReadLastMain(CVr,1,false)) then begin
    res = CVr.ValuePerShare;
  end;
  GetCompanyShareValue = res;
  return;
end;

global
function val GetNumberOfShares(string usercode,Date backdat)
begin
  record SharesVc Sharesr;
  Boolean foundf,testf;
  val res;

  res = BlankVal;
  Sharesr.UserCode = usercode;
  foundf = true;
  while (LoopKey("UserCode",Sharesr,1,foundf)) begin
    if (Sharesr.UserCode!=usercode) then begin
      foundf = false;
    end;
    if (Sharesr.TransDate>backdat) then begin
      foundf = false;
    end;
    testf = foundf;
    if (Sharesr.Closed!=0) then begin
      testf = false;
    end;
    if (testf) then begin
      res = res + Sharesr.TotQty;
    end;
  end;
  GetNumberOfShares = res;
  return;
end;

global
function val GetNumberOfSellRequest(LongInt sernr,string usercode,Date backdat)
begin
  record BuySellRequestVc BuySellRequestr;
  Boolean foundf,testf;
  val res;

  res = BlankVal;
  BuySellRequestr.UserCode = usercode;
  BuySellRequestr.OKFlag = 0;
  foundf = true;
  while (LoopKey("UserCode",BuySellRequestr,1,foundf)) begin
    if (BuySellRequestr.UserCode!=usercode) then begin
      foundf = false;
    end;
    if (BuySellRequestr.OKFlag>0) then begin
      foundf = false;
    end;
    testf = foundf;
    if (BuySellRequestr.SerNr==sernr) then begin
      testf = false;
    end;
    if (testf) then begin
      if (BuySellRequestr.SellFlag==0) then begin
        res = res + BuySellRequestr.Qty;
      end;
    end;
  end;
  GetNumberOfSellRequest = res;
  return;
end;

global
function val GetNumberOfBuyRequest(LongInt sernr,string usercode,Date backdat)
begin
  record BuySellRequestVc BuySellRequestr;
  Boolean foundf,testf;
  val res;

  res = BlankVal;
  BuySellRequestr.UserCode = usercode;
  BuySellRequestr.OKFlag = 0;
  foundf = true;
  while (LoopKey("UserCode",BuySellRequestr,1,foundf)) begin
    if (BuySellRequestr.UserCode!=usercode) then begin
      foundf = false;
    end;
    if (BuySellRequestr.OKFlag>0) then begin
      foundf = false;
    end;
    testf = foundf;
    if (BuySellRequestr.SerNr==sernr) then begin
      testf = false;
    end;
    if (testf) then begin
      if (BuySellRequestr.SellFlag==1) then begin
        res = res + BuySellRequestr.Qty;
      end;
    end;
  end;
  GetNumberOfBuyRequest = res;
  return;
end;

global
procedure SharesSellSumup(var record SharesSellVc SharesSellr)
begin
  row SharesSellVc SharesSellrw;
  Integer i,rwcnt;

  SharesSellr.RemQty = SharesSellr.RegQty;
  SharesSellr.TotQty = 0;
  rwcnt = MatRowCnt(SharesSellr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesSellr,i,SharesSellrw);
    SharesSellr.TotQty = SharesSellr.TotQty + SharesSellrw.Qty;
  end;
  SharesSellr.RemQty = SharesSellr.RemQty - SharesSellr.TotQty;
  if (SharesSellr.RemQty==0) then begin
    SharesSellr.RemQty = BlankVal;
  end;
  if (SharesSellr.TotQty==0) then begin
    SharesSellr.TotQty = BlankVal;
  end;
  return;
end;

global
procedure SharesSellServerSumup(var record SharesSellVc SharesSellr,Boolean addrowf)
begin
  row SharesSellVc SharesSellrw;
  Integer i,rwcnt;
  Boolean treatedf;
  
  SharesSellr.RegQty = GetNumberOfShares(SharesSellr.UserCode,CurrentDate);
  SharesSellSumup(SharesSellr);
  if ((addrowf) and (SharesSellr.RemQty<>0)) then begin
    treatedf = false;
    rwcnt = MatRowCnt(SharesSellr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SharesSellr,i,SharesSellrw);
      if (SharesSellrw.SellAgreement==1) then begin
        SharesSellrw.Qty = SharesSellrw.Qty + SharesSellr.RemQty;
        if (SharesSellrw.Qty>0) then begin
          SharesSellr.RemQty = 0;
          MatRowPut(SharesSellr,i,SharesSellrw);
        end;
        treatedf = true;
      end;
    end;
    if (treatedf==false) then begin
      SharesSellrw.Qty = SharesSellr.RemQty;
      if (SharesSellrw.Qty>0) then begin
        SharesSellrw.SellForPrice = BlankVal;
        SharesSellrw.SellAgreement = 1;
        SharesSellrw.Comment = "";
        MatRowPut(SharesSellr,rwcnt,SharesSellrw);
        SharesSellr.RemQty = 0;
      end;
    end;
    SharesSellSumup(SharesSellr);
  end;
  return;
end;

global
procedure SharesBuySumup(var record SharesBuyVc SharesBuyr)
begin
  row SharesBuyVc SharesBuyrw;
  Integer i,rwcnt;

  SharesBuyr.TotQty = 0;
  rwcnt = MatRowCnt(SharesBuyr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesBuyr,i,SharesBuyrw);
    SharesBuyr.TotQty = SharesBuyr.TotQty + SharesBuyrw.Qty;
  end;
  if (SharesBuyr.TotQty==0) then begin
    SharesBuyr.TotQty = BlankVal;
  end;
  return;
end;

global
procedure SharesTranSumup(var record SharesTranVc SharesTranr)
begin
  row SharesTranVc SharesTranrw;
  Integer i,rwcnt;

  SharesTranr.TotQty = 0;
  SharesTranr.TotSum = 0;
  rwcnt = MatRowCnt(SharesTranr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SharesTranr,i,SharesTranrw);
    SharesTranrw.Sum = SharesTranrw.Qty * SharesTranrw.Price;
    MatRowPut(SharesTranr,i,SharesTranrw);
    SharesTranr.TotQty = SharesTranr.TotQty + SharesTranrw.Qty;
    SharesTranr.TotSum = SharesTranr.TotSum + SharesTranrw.Sum;
  end;
  if (SharesTranr.TotQty==0) then begin
    SharesTranr.TotQty = BlankVal;
  end;
  if (SharesTranr.TotSum==0) then begin
    SharesTranr.TotSum = BlankVal;
  end;
  return;
end;

