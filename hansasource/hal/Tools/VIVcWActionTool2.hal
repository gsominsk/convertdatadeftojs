external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure VICalcEReb1(var record VIVc,boolean);
external function val ValFromString(string,string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure WarnFutureDate(Boolean,Date);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external procedure SetupVATBase(var record SMVc,var Integer);
external function Integer VATType(string);
external procedure IntIVSumup(record IntIVVc);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure FEVICalcVals(record FEVIVc);
external procedure FEVISumup(record FEVIVc,var val);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure RoundVATSum(string,string,string,var val);
external procedure MulM4ProcVal(val,val,var val);
external function Boolean PastePayRecVI(record VIVc,string);
external procedure VICalcEReb(var record VIVc);
external procedure VIGetRate(var record VIVc);
external function Boolean DateWarned(Date,string);
external procedure CalcSum(val,val,val,val,var val,Integer);

procedure CopyHeaderVIToFEVI(record VIVc VIr,var record FEVIVc FEVIr)
BEGIN
  record VIVc orgVIr;
  Date blankd;
  
  if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
    orgVIr.SerNr = VIr.CredInv;
    if (ReadFirstMain(orgVIr,1,true)) then begin
    end;
  end;
  FEVIr.VEEventDate = VIr.TransDate;
  FEVIr.TransDate = VIr.TransDate;
  FEVIr.VINr = VIr.SerNr;
  FEVIr.VIInvDate = VIr.InvDate;
  FEVIr.VIRegDate = VIr.RegDate;
  FEVIr.VIDueDate = VIr.DueDate;
  FEVIr.VIRebDate = VIr.RebDate;
  FEVIr.VIRebDate2 = VIr.RebDate2;
  FEVIr.VITransDate = VIr.TransDate;
  FEVIr.InvoiceNr = VIr.InvoiceNr;
  FEVIr.OrderNr = VIr.POSerNr;
  if (FEVIr.OrderNr==-1) then begin
    if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      FEVIr.OrderNr = orgVIr.POSerNr;
    end;
  end;
  FEVIr.RefStr = VIr.RefStr;
  FEVIr.VECode = VIr.VECode;
  FEVIr.VEName = VIr.VEName;
  FEVIr.Sign = VIr.Sign;
  FEVIr.OKPersons = VIr.OKPersons;
  FEVIr.PayVal = VIr.PayVal;
  FEVIr.RebVal = VIr.RebVal;
  FEVIr.RebVal2 = VIr.RebVal2;
  FEVIr.VATVal = VIr.VATVal;
  FEVIr.CalcVATVal = VIr.CalcVATVal;
  FEVIr.HoldSum = VIr.HoldSum;
  FEVIr.CurncyCode = VIr.CurncyCode;
  FEVIr.FrRate = VIr.FrRate;
  FEVIr.ToRateB1 = VIr.ToRateB1;
  FEVIr.ToRateB2 = VIr.ToRateB2;
  FEVIr.BaseRate1 = VIr.BaseRate1;
  FEVIr.BaseRate2 = VIr.BaseRate2;
  FEVIr.InvType = VIr.InvType;
  FEVIr.ExportFlag = VIr.ExportFlag;
  FEVIr.VEVatCode = VIr.VEVatCode;
  FEVIr.Comment = VIr.Comment;
  FEVIr.Objects = VIr.Objects;
  FEVIr.PrelBook = VIr.PrelBook;
  FEVIr.CredInv = VIr.CredInv;
  FEVIr.CredMark = VIr.CredMark;
  FEVIr.VATNr = VIr.VATNr;
  FEVIr.LangCode = VIr.LangCode;
  FEVIr.SortCode = VIr.SortCode;
  FEVIr.SalesGroup = VIr.SalesGroup;
  FEVIr.SalesMan = VIr.SalesMan;
  RETURN;
END;

function
val FEVISum(LongInt VInr,LongInt FEVInr,Integer rownr)
BEGIN
  val res;
  record FEVIVc FEVIr;
  row FEVIVc FEVIrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  
  TrHs = true;
  FEVIr.VINr = VInr;
  while (LoopKey("VINr",FEVIr,1,TrHs)) begin
    if (FEVIr.VINr!=VInr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (FEVIr.SerNr==FEVInr) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(FEVIr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(FEVIr,i,FEVIrw);
          if (FEVIrw.VIRow==rownr) then begin
            res = res + FEVIrw.Sum;
          end;
        end;
      end;
    end;
  end;  
LFEVISum:;  
  FEVISum = res;
  RETURN;
END;

function
val FEVISumOrder(LongInt POSerNr,LongInt FEVInr,Integer rownr)
BEGIN
  val res;
  record FEVIVc FEVIr;
  row FEVIVc FEVIrw;
  Integer i,rwcnt;
  Boolean TrHs,testf;
  
  TrHs = true;
  FEVIr.OrderNr = POSerNr;
  while (LoopKey("OrderNr",FEVIr,1,TrHs)) begin
    if (FEVIr.OrderNr!=POSerNr) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      testf = true;
      if (FEVIr.SerNr==FEVInr) then begin
        testf = false;
      end;
      if (testf) then begin
        rwcnt = MatRowCnt(FEVIr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(FEVIr,i,FEVIrw);
          if (i==rownr) then begin
            res = res + FEVIrw.Sum;
          end;
        end;
      end;
    end;
  end;  
LFEVISumOrder:;  
  FEVISumOrder = res;
  RETURN;
END;

procedure PasteVIRowToFEVI(record VIVc VIr,var record FEVIVc FEVIr,Integer rownr,var Integer vati)
BEGIN
  row VIVc VIrw;
  row FEVIVc FEVIrw;
  Integer rwcnt;
  val sum,t;

  rwcnt = MatRowCnt(VIr);
  if (rownr<rwcnt) then begin
    MatRowGet(VIr,rownr,VIrw);
    if (VIrw.stp!=1) and (VIrw.stp!=3) then begin 
      goto LPasteVIRowToFEVI;
    end;
    if (VIr.POSerNr==-1) then begin
      sum = FEVISum(VIr.SerNr,FEVIr.SerNr,rownr);
    end else begin
//      sum = FEVISumOrder(VIr.POSerNr,FEVIr.SerNr,rownr);// we just trust people do right things
      sum = FEVISum(VIr.SerNr,FEVIr.SerNr,rownr);
    end;
    sum = VIrw.Sum - sum;
    if (sum<=0) then begin goto LPasteVIRowToFEVI; end;  
    ClearRow(FEVIr,FEVIrw,VIrw.stp);
    FEVIrw.stp = VIrw.stp;
    FEVIrw.ovst = VIrw.ovst;
    FEVIrw.AccNumber = VIrw.AccNumber;
    FEVIrw.Objects = VIrw.Objects;
    FEVIrw.Comment = VIrw.Comment;
    FEVIrw.Sum = sum;
    FEVIrw.PrepayAmount = VIrw.PrepayAmount;
    FEVIrw.VATVal = VIrw.VATVal;
    FEVIrw.qty = VIrw.qty;
    FEVIrw.Item = VIrw.Item;
    FEVIrw.VATCode = VIrw.VATCode;
    FEVIrw.PrepayNr = VIrw.PrepayNr;
    FEVIrw.ACShort = VIrw.ACShort;
    FEVIrw.OrdRow = VIrw.OrdRow;
    FEVIrw.VIRow = rownr;
    MatRowPut(FEVIr,vati,FEVIrw);
    vati = vati + 1;
  end else begin
    ClearRow(FEVIr,FEVIrw,1);
    MatRowPut(FEVIr,vati,FEVIrw);
  end;
LPasteVIRowToFEVI:;  
  RETURN;
END;

procedure PasteInvInFEVI(var record FEVIVc FEVIp,record VIVc VIp)
BEGIN
  Integer i,rwcnt;
  Integer vati;
  record FEVIVc lFEVIr;
  val t;
  
  lFEVIr.VINr = VIp.SerNr;
  if (ReadFirstKey("VINr",lFEVIr,1,true)) then begin
    goto LPasteInvInFEVI;
  end;
  CopyHeaderVIToFEVI(VIp,FEVIp);
  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    PasteVIRowToFEVI(VIp,FEVIp,i,vati);
  end;
  FEVIp.PayVal = 0;
  FEVICalcVals(FEVIp);
  FEVISumup(FEVIp,t);
  FEVIp.PayVal = -t;
LPasteInvInFEVI:;  
  RETURN;
END;

procedure CheckQuantFract(record FEVIVc FEVIp,Array val asum,Array string aaccnr,var Integer acnt,LongInt PrepaymentNr,Boolean prepf)
BEGIN
  record FEVIVc lFEVIr;
  row FEVIVc lFEVIrw;
  row FEVIVc FEVIrw;
  Integer li,lrwcnt;
  Integer i,rwcnt,ai;
  
  if (prepf) then begin
    lFEVIr.PrepaymentNr = PrepaymentNr;
    if (ReadFirstKey("PrepaymentNr",lFEVIr,1,true)==false) then begin
      goto LCheckQuantFract;
    end;
  end else begin
    lFEVIr.VINr = PrepaymentNr;
    if (ReadFirstKey("VINr",lFEVIr,1,true)==false) then begin
      goto LCheckQuantFract;
    end;
  end;  
    lrwcnt = MatRowCnt(lFEVIr);
    rwcnt = MatRowCnt(FEVIp);
    for (li=0;li<lrwcnt;li=li+1) begin
      MatRowGet(lFEVIr,li,lFEVIrw);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(FEVIp,i,FEVIrw);
        if (lFEVIrw.AccNumber==FEVIrw.AccNumber) then begin
          for (ai=0;ai<acnt;ai=ai+1) begin
            if (lFEVIrw.AccNumber==aaccnr[ai]) then begin
              asum[ai] = asum[ai] + lFEVIrw.Sum;
//          StopAlert("asum[ai] = " & asum[ai]);
              goto LSKIPNEWACC;
            end;
          end;
          aaccnr[acnt] = lFEVIrw.AccNumber;
          asum[acnt] = lFEVIrw.Sum;
//          StopAlert("asum[acnt] = " & asum[acnt]);
          acnt = acnt + 1;
LSKIPNEWACC:;          
//          StopAlert("1 - i " & i & " asum[i] " & asum[i]);
        end;
      end;
    end;
LCheckQuantFract:;
  RETURN;
END;

function val GetFEVIAccAmount(string feviaccnr,Array val asum,Array string aaccnr,Integer acnt)
BEGIN
  Integer i;
  val res;

  for (i=0;i<acnt;i=i+1) begin
    if (feviaccnr==aaccnr[i]) then begin
      res = res + asum[i];
    end;
  end;
  GetFEVIAccAmount = res;
  RETURN;
END;

procedure ChangeQuantFract(record FEVIVc FEVIp,Array val asum,Array string aaccnr,Integer acnt)
BEGIN
  Integer i,rwcnt;
  row FEVIVc FEVIrw;
  val t;
  record GeneralOptionBlock GenOptRec;

  FEVIp.PayVal = blankval;
  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(FEVIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FEVIp,i,FEVIrw);
//          StopAlert("2 - i " & i & " aqfract[i] " & aqfract[i]);
    FEVIrw.Sum = FEVIrw.Sum - GetFEVIAccAmount(FEVIrw.AccNumber,asum,aaccnr,acnt);
    MatRowPut(FEVIp,i,FEVIrw);
    FEVIp.PayVal = FEVIp.PayVal + FEVIrw.Sum;
  end;
  FEVICalcVals(FEVIp);
  FEVIp.PayVal = FEVIp.PayVal + FEVIp.CalcVATVal;
  FEVIp.PayVal = Round(FEVIp.PayVal,DefaultRoundMode);  
  FEVISumup(FEVIp,t);
  RETURN;
END;

procedure PasteInvInFEVIPrep(var record FEVIVc FEVIp,record VIVc VIp)
BEGIN
  row VIVc VIrw;
  Integer i,rwcnt,acnt;
  Array val asum;
  Array string 10 aaccnr;

  PasteInvInFEVI(FEVIp,VIp);
  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if ((VIrw.stp==6) and (VIrw.PrepayNr!=-1)) then begin
      CheckQuantFract(FEVIp,asum,aaccnr,acnt,VIrw.PrepayNr,true);
    end;
  end;
  CheckQuantFract(FEVIp,asum,aaccnr,acnt,VIp.SerNr,false);
  ChangeQuantFract(FEVIp,asum,aaccnr,acnt);
  RETURN;
END;

procedure CheckQuantFractPO(Array val asum,Array string aaccnr,Array string aitem,var Integer acnt,LongInt PrepaymentNr)
BEGIN
  record FEVIVc lFEVIr;
  row FEVIVc lFEVIrw;
  row FEVIVc FEVIrw;
  Integer li,lrwcnt;
  Integer ai;
  Boolean TrHs;
  
  TrHs = true;
  lFEVIr.PrepaymentNr = PrepaymentNr;  
  while (LoopKey("PrepaymentNr",lFEVIr,1,TrHs)) begin
    if (lFEVIr.PrepaymentNr!=PrepaymentNr) then begin TrHs = false; end;
    if (TrHs) then begin
      lrwcnt = MatRowCnt(lFEVIr);
      for (li=0;li<lrwcnt;li=li+1) begin
        MatRowGet(lFEVIr,li,lFEVIrw);
        for (ai=0;ai<acnt;ai=ai+1) begin
          if ((lFEVIrw.AccNumber==aaccnr[ai]) and ((lFEVIrw.Item==aitem[ai]) or (blank(lFEVIrw.Item)))) then begin
            asum[ai] = asum[ai] + lFEVIrw.Sum;
//        StopAlert("asum[ai] = " & asum[ai]);
            goto LSKIPNEWACCPO;
          end;
        end;
        aaccnr[acnt] = lFEVIrw.AccNumber;
        aitem[acnt] = lFEVIrw.Item;
        asum[acnt] = lFEVIrw.Sum;
//        StopAlert("asum[acnt] = " & asum[acnt]);
        acnt = acnt + 1;
LSKIPNEWACCPO:;          
//          StopAlert("1 - i " & i & " asum[i] " & asum[i]);
      end;
    end;
  end;     
  RETURN;
END;

function val GetFEVIAccAmountPO(string feviaccnr,string item,Array val asum,Array string aaccnr,Array string aitem,Integer acnt)
BEGIN
  Integer i;
  val res;

  for (i=0;i<acnt;i=i+1) begin
    if ((feviaccnr==aaccnr[i]) and ((item==aitem[i]) or (blank(item)))) then begin
      res = res + asum[i];
//      StopAlert("res " & res);
    end;
  end;
  GetFEVIAccAmountPO = res;
  RETURN;
END;

procedure ChangeQuantFractPO(record FEVIVc FEVIp,Array val asum,Array string aaccnr,Array string aitem,Integer acnt)
BEGIN
  Integer i,rwcnt;
  row FEVIVc FEVIrw;
  val t;
  record GeneralOptionBlock GenOptRec;

  FEVIp.PayVal = blankval;
  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(FEVIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FEVIp,i,FEVIrw);
    FEVIrw.Sum = FEVIrw.Sum - GetFEVIAccAmountPO(FEVIrw.AccNumber,FEVIrw.Item,asum,aaccnr,aitem,acnt);
    MatRowPut(FEVIp,i,FEVIrw);
    FEVIp.PayVal = FEVIp.PayVal + FEVIrw.Sum;
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(FEVIp,i,FEVIrw);
    if (FEVIrw.Sum<0.01) then begin
      MatRowDelete(FEVIp,i);
      i = i - 1 ;
      rwcnt = MatRowCnt(FEVIp);
    end;
  end;  
  FEVICalcVals(FEVIp);
  FEVIp.PayVal = FEVIp.PayVal + FEVIp.CalcVATVal;
  FEVIp.PayVal = Round(FEVIp.PayVal,DefaultRoundMode);  
  FEVISumup(FEVIp,t);
  RETURN;
END;

function LongInt PasteInvInFEVIOrder(var record FEVIVc FEVIp,record VIVc VIp)
BEGIN
  LongInt res;
  row VIVc VIrw;
  Integer i,rwcnt,acnt;
  Array val asum;
  Array Integer aporow;
  Array string 10 aaccnr;
  Array string 20 aitem;
  record FEVIVc lFEVIr;

  res = 0;
  PasteInvInFEVI(FEVIp,VIp);
  rwcnt = MatRowCnt(VIp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIp,i,VIrw);
    if ((VIrw.stp==6) and (VIrw.PrepayNr!=-1)) then begin
      lFEVIr.PrepaymentNr = VIrw.PrepayNr;
      if (ReadFirstKey("PrepaymentNr",lFEVIr,1,true)==false) then begin
        RecordNew(FEVIp);
        res = 2180;
        goto LPasteInvInFEVIPrep;
      end;
      CheckQuantFractPO(asum,aaccnr,aitem,acnt,VIrw.PrepayNr);
    end;
  end;
  ChangeQuantFractPO(FEVIp,asum,aaccnr,aitem,acnt);
LPasteInvInFEVIPrep:;  
  PasteInvInFEVIOrder = res;  
  RETURN;
END;

global
function LongInt PasteVIInFEVI(var record FEVIVc FEVIp,record VIVc VIr)
BEGIN
  LongInt res;
  row VIVc VIrw;
  Integer i,rwcnt;
  Boolean prepf;
  
  res = 0;
  RecordNew(FEVIp);
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if ((VIrw.stp==6) and (VIrw.PrepayNr!=-1)) then begin
      prepf = true;
      goto LSTOP;
    end;
  end;
LSTOP:;  
  if (prepf) then begin
    if (VIr.POSerNr==-1) then begin
//      PasteInvInFEVIPrep(FEVIp,VIr); not allowed
    end else begin
      res = PasteInvInFEVIOrder(FEVIp,VIr);
    end;
  end else begin
    PasteInvInFEVI(FEVIp,VIr);
  end;
  if (MatRowCnt(FEVIp)==0) or (FEVIp.PayVal==0) then begin
    res = 1;
  end;
  PasteVIInFEVI = res;
  RETURN
END; 

global
function Boolean VIWarnOldRecords(Date dp,LongInt sernr)
BEGIN
  record DBLockBlock DBLockRec;
  Boolean res;
  record VIVc VIr;

  BlockLoad(DBLockRec);
  if (DBLockRec.WarnOldRecords==0) then begin goto LVIWarnOldRecords; end;
  VIr.TransDate = CurrentDate;
  if (ReadLastKey("TransDate",VIr,1,false)) then begin
    if (sernr!=VIr.SerNr) then begin
      if (dp<VIr.TransDate) then begin res = true; end;
    end;
  end;
LVIWarnOldRecords:;
  VIWarnOldRecords = res;
  RETURN;
END;

global
procedure VIVc_PasteTransDate(var record VIVc VIp)
BEGIN
  if (blankdate(VIp.TransDate)) then begin
    VIp.TransDate = VIp.InvDate;
  end;  
  if (DateWarned(VIp.TransDate,"VIVc")) then begin
    MessageBox(1045,"");
  end;
  if (VIWarnOldRecords(VIp.TransDate,VIp.SerNr)) then begin
    MessageBox(2020,"");
  end;
  WarnFutureDate(true,VIp.TransDate);
  if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) and (VIp.CredInv>0) then begin
  end else begin
    VIGetRate(VIp);
  end;
  RETURN;
END;

global
procedure VIVc_PastePayDeal(var record VIVc VIp)
begin
  row VIVc VIrw;

  VICalcEReb(VIp);
  switch (VIp.InvType) begin
    case kInvoiceTypeEmployee:
      ClearRow(VIp,VIrw,kInvoiceRowTypeEmployee);
      MatRowInsert(VIp,0,VIrw);
      VIp.APAcc = "";
      VIp.CredMark = "";
  end;
  return;
end;

procedure PastePRCode(var record VIVc VIp,Integer rownr)
BEGIN
  row VIVc VIrw;
  record PRVc PRr;
  
  MatRowGet(VIp,rownr,VIrw);
  PRr.Code = VIrw.PRCode;
  if (ReadFirstMain(PRr,1,true)) then begin
    if (nonblank(PRr.Objects)) then begin
      if ((PRr.Objects!=VIrw.Objects) or (blank(VIrw.Objects))) then begin
        if (nonblank(VIrw.Objects) and (nonblank(PRr.Objects))) then begin
          VIrw.Objects = VIrw.Objects & ",";
        end;
        VIrw.Objects = VIrw.Objects & PRr.Objects;
      end;
    end;
  end;
  MatRowPut(VIp,rownr,VIrw);  
  RETURN;
END;

global
procedure VIVc_PasteVEFactoring(var record VIVc VIp,Integer rownr)
BEGIN
  if (rownr<0) then begin
    if (blank(VIp.VEFactoring)) then begin
      if (PastePayRecVI(VIp,VIp.VECode)) then begin end;
    end else begin
      if (PastePayRecVI(VIp,VIp.VEFactoring)) then begin end;
    end;
  end else begin
    PastePRCode(VIp,rownr);
  end;
  RETURN;
END;

global
procedure VIVc_PastePRCode(var record VIVc VIp,Integer rownr)
begin
  if (rownr>=0) then begin
    PastePRCode(VIp,rownr);
  end;
  return;
end;

procedure CalcAutoVAT(var record VIVc VIp)
BEGIN
  record VITBlock VITb;
  val t;
  Integer rwcnt;
  row VIVc VIrw;
  Integer vt;

  BlockLoad(VITb);
  if (VITb.autoVATflag!=0) then begin
    rwcnt = MatRowCnt(VIp);
    if (rwcnt>0) then begin
      MatRowGet(VIp,0,VIrw);
      vt = VATType(VIrw.VATCode);
//TaxTemplateCode
    end;
    if ((VIp.ExportFlag==0) or (VIp.ExportFlag==3) or (VIp.ExportFlag==4)) and (vt!=kVATTypeReversed) then begin
      MulM4ProcVal(StringToVal(VITb.autoVATVal,M4Rate),VIp.PayVal,t);
      RoundVATSum(VIp.CurncyCode,VIp.PayDeal,"VIVc",t);      
      VIp.VATVal = t;
//      VIp.PayVal = VIp.PayVal + VIp.VATVal; //?
    end;
  end;
  RETURN;
END;

global
procedure VIVc_PastePayVal(var record VIVc VIp)
BEGIN
  CalcAutoVAT(VIp);
  VICalcEReb1(VIp,false);
  RETURN;
END;

global
procedure VIVc_PasteInvDate(var record VIVc VIp)
BEGIN
  VIp.TransDate = VIp.InvDate;
  VICalcEReb(VIp);
  if (DateWarned(VIp.TransDate,"VIVc")) then begin
    MessageBox(1045,"");
  end;
  if (VIWarnOldRecords(VIp.TransDate,VIp.SerNr)) then begin
    MessageBox(2020,"");
  end;
  WarnFutureDate(true,VIp.TransDate);
  if (VIp.InvType==kInvoiceTypeCredit or VIp.InvType==kInvoiceTypeCreditSpecialSales) and (VIp.CredInv>0) then begin
  end else begin
    VIGetRate(VIp);
  end;
  RETURN;
END;

global
function Boolean VIVc_CalculateRate(var record VIVc VIp,Integer rownr)
begin
  Boolean res;
  val vipayused;
  val virval;
  row VIVc VIrw;
  record VITBlock VITb;
  val ofrrate,otorate1,otorate2,obaserate1,obaserate2;
  val totFrRate,totToRateB1,totToRateB2,totBaseRate1,totBaseRate2;
  record APPayHistVc APPHr;
  record CLOutVc CLOutr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  Integer opi,oprwcnt;
  Boolean found,testf;

  vipayused = blankval;
  BlockLoad(VITb);
  switch (VITb.VIFromPORate) begin
    case kVIRateFromPrepaymentandPurchaseInvoice:
      GetFullCurncyRate(VIp.CurncyCode,VIp.InvDate,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2);
      rwcnt = MatRowCnt(VIp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VIp,i,VIrw);
        if (VIrw.stp==kInvoiceRowTypePrepayment) then begin
          ResetLoop(APPHr);
          found = true;
          APPHr.VEPNr = VIrw.PrepayNr;
          while (LoopMain(APPHr,1,found)) begin
            if (APPHr.VEPNr!=VIrw.PrepayNr) then begin found = false; end;
            if (found) then begin
              testf = false;
              switch (APPHr.FileName) begin
                case "CLOutVc":              
                  CLOutr.SerNr = APPHr.SerNr;
                  if (ReadFirstMain(CLOutr,1,true)) then begin 
                    ofrrate = CLOutr.FrRate;
                    otorate1 = CLOutr.ToRateB1;
                    otorate2 = CLOutr.ToRateB2;
                    obaserate1 = CLOutr.BaseRate1;
                    obaserate2 = CLOutr.BaseRate2;
                    testf = true;        
                  end;              
                case "OPVc":              
                  OPr.SerNr = APPHr.SerNr;
                  if (ReadFirstMain(OPr,1,true)) then begin 
                    oprwcnt = MatRowCnt(OPr);
                    for (opi=0;opi<oprwcnt;opi=opi+1) begin
                      MatRowGet(OPr,opi,OPrw);
                      ofrrate = OPrw.FrRateBankVal;
                      otorate1 = OPrw.ToRateB1BankVal;
                      otorate2 = OPrw.ToRateB2BankVal;
                      obaserate1 = OPrw.BaseRate1BankVal;
                      obaserate2 = OPrw.BaseRate2BankVal;
                      if (ofrrate==0) then begin
                        GetFullCurncyRate(APPHr.CurncyCode,OPr.TransDate,ofrrate,otorate1,otorate2,obaserate1,obaserate2);
                      end;
                    end;
                    testf = true;        
                  end;              
              end;
              if (testf) then begin
                vipayused = vipayused + VIrw.PrepayAmount;              
                totFrRate = totFrRate + VIrw.PrepayAmount*ofrrate;
                totToRateB1 = totToRateB1 + VIrw.PrepayAmount*otorate1;
                totToRateB2 = totToRateB2 + VIrw.PrepayAmount*otorate2;
                totBaseRate1 = totBaseRate1 + VIrw.PrepayAmount*obaserate1;
                totBaseRate2 = totBaseRate2 + VIrw.PrepayAmount*obaserate2;
              end;
            end;
          end;
        end;
      end;
      virval = VIp.PayVal - vipayused;
      if (virval<0) then begin virval = 0; end;
      VIp.FrRate = (totFrRate + virval*VIp.FrRate)/VIp.PayVal;
      VIp.ToRateB1 = (totToRateB1 + virval*VIp.ToRateB1)/VIp.PayVal;
      VIp.ToRateB2 = (totToRateB2 + virval*VIp.ToRateB2)/VIp.PayVal;
      VIp.BaseRate1 = (totBaseRate1 + virval*VIp.BaseRate1)/VIp.PayVal;
      VIp.BaseRate2 = (totBaseRate2 + virval*VIp.BaseRate2)/VIp.PayVal;
      res = true;
    case kVIRateFromPrepayment:
      rwcnt = MatRowCnt(VIp);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VIp,i,VIrw);
        if (VIrw.stp==kInvoiceRowTypePrepayment) then begin
          ResetLoop(APPHr);
          found = true;
          APPHr.VEPNr = VIrw.PrepayNr;
          while (LoopMain(APPHr,1,found)) begin
            if (APPHr.VEPNr!=VIrw.PrepayNr) then begin found = false; end;
            if (found) then begin
              testf = false;
              switch (APPHr.FileName) begin
                case "CLOutVc":              
                  CLOutr.SerNr = APPHr.SerNr;
                  if (ReadFirstMain(CLOutr,1,true)) then begin 
                    ofrrate = CLOutr.FrRate;
                    otorate1 = CLOutr.ToRateB1;
                    otorate2 = CLOutr.ToRateB2;
                    obaserate1 = CLOutr.BaseRate1;
                    obaserate2 = CLOutr.BaseRate2;
                    testf = true;        
                  end;              
                case "OPVc":              
                  OPr.SerNr = APPHr.SerNr;
                  if (ReadFirstMain(OPr,1,true)) then begin 
                    oprwcnt = MatRowCnt(OPr);
                    for (opi=0;opi<oprwcnt;opi=opi+1) begin
                      MatRowGet(OPr,opi,OPrw);
                      ofrrate = OPrw.FrRateBankVal;
                      otorate1 = OPrw.ToRateB1BankVal;
                      otorate2 = OPrw.ToRateB2BankVal;
                      obaserate1 = OPrw.BaseRate1BankVal;
                      obaserate2 = OPrw.BaseRate2BankVal;
                      if (ofrrate==0) then begin
                        GetFullCurncyRate(APPHr.CurncyCode,OPr.TransDate,ofrrate,otorate1,otorate2,obaserate1,obaserate2);
                      end;
                    end;
                    testf = true;        
                  end;              
              end;
              if (testf) then begin
                vipayused = vipayused + VIrw.PrepayAmount;              
                totFrRate = totFrRate + VIrw.PrepayAmount*ofrrate;
                totToRateB1 = totToRateB1 + VIrw.PrepayAmount*otorate1;
                totToRateB2 = totToRateB2 + VIrw.PrepayAmount*otorate2;
                totBaseRate1 = totBaseRate1 + VIrw.PrepayAmount*obaserate1;
                totBaseRate2 = totBaseRate2 + VIrw.PrepayAmount*obaserate2;
              end;
            end;
          end;
        end;
      end;
      VIp.FrRate = totFrRate/vipayused;
      VIp.ToRateB1 = totToRateB1/vipayused;
      VIp.ToRateB2 = totToRateB2/vipayused;
      VIp.BaseRate1 = totBaseRate1/vipayused;
      VIp.BaseRate2 = totBaseRate2/vipayused;
      if (VIp.FrRate==0) and (VIp.BaseRate1==0) then begin
        GetFullCurncyRate(VIp.CurncyCode,VIp.InvDate,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2);
      end;
      if (VIp.FrRate==0) then begin VIp.FrRate = blankval; end;
      if (VIp.ToRateB1==0) then begin VIp.ToRateB1 = blankval; end;
      if (VIp.ToRateB2==0) then begin VIp.ToRateB2 = blankval; end;
      if (VIp.BaseRate1==0) then begin VIp.BaseRate1 = blankval; end;
      if (VIp.BaseRate2==0) then begin VIp.BaseRate2 = blankval; end;
      VIp.VATFrRate = VIp.FrRate;
      VIp.VATToRateB1 = VIp.ToRateB1;
      VIp.VATToRateB2 = VIp.ToRateB2;
      VIp.VATBaseRate1 = VIp.BaseRate1;
      VIp.VATBaseRate2 = VIp.BaseRate2;
      res = true;
  end;
  VIVc_CalculateRate = res;
  return;
end;

global
procedure VIVc_PastePrepayNr(var record VIVc VIp,Integer rownr)
BEGIN
  row VIVc VIrw;
  row VIVc VI2rw;
  record OPPVc OPPr;
  string 255 t1;
  val vatt,coff,bookrval,ppval;
  Integer i,rwcnt,vcrwcnt;
  val vibookrval,vipayval,prepval;
  val virval;
  val vipayval_vat;
  val vat,tax1;
  record SMVc VATr;
  Boolean found;
  record APPayHistVc APPayHistr;
            
  SetupVATBase(VATr,vcrwcnt);  
  MatRowGet(VIp,rownr,VIrw);
  if (blank(VIp.VECode)) then begin
    VIrw.PrepayNr = -1;
  end;
  if (VIrw.PrepayNr!=-1) then begin

//PREPVIPL , those 3 places should be same  

    OPPr.VECode = VIp.VECode;
    OPPr.SerNr = VIrw.PrepayNr;
    if (ReadFirstMain(OPPr,2,true)==false) then begin
      t1 = USetStr(1215);
      MessageBox(0,t1 & " " & OPPr.VECode); 
      prepval = blankval;
      VIrw.PrepayAmount = prepval;
      VIrw.VATVal = prepval;
    end else begin
      if (OPPr.CurncyCode!=VIp.CurncyCode) then begin
        MessageBox(1366,"");
      end;
      APPayHistr.VEPNr = VIrw.PrepayNr;  
      APPayHistr.FileName = "OPVc";  
      found = ReadFirstMain(APPayHistr,2,true);
      if (found==false) then begin
        APPayHistr.VEPNr = VIrw.PrepayNr;  
        APPayHistr.FileName = "CLOutVc";  
        found = ReadFirstMain(APPayHistr,2,true);
      end;
      vipayval = VIp.PayVal - VIp.WithHoldingTax;
      rwcnt = MatRowCnt(VIp);
      for (i=0;i<rwcnt;i=i+1) begin
        if (i!=rownr) then begin
          MatRowGet(VIp,i,VI2rw);
          if (VI2rw.stp==kInvoiceRowTypePrepayment) then begin
//            CurValToOtherCur(VIp.TransDate,OPPr.CurncyCode,ppval,VIp.CurncyCode,prepval,DefaultCurRoundOff);
            vipayval = vipayval - VI2rw.PrepayAmount;
          end else begin
            if (VI2rw.VATCode==OPPr.VATCode) then begin
              vipayval_vat = vipayval_vat + VI2rw.Sum;
              AddVATBase(VATr,VI2rw.VATCode,VI2rw.Sum,blankval,vcrwcnt,0,VIp.NoTAXonVAT);
            end;
          end;
        end;
      end;
      CalcVATBaseVAT(VATr,0,VIp.NoTAXonVAT,vcrwcnt,vat,tax1);
      vipayval_vat = vipayval_vat + vat;
      vibookrval = MulRateToBase1(VIp.CurncyCode,vipayval,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);
      if (vibookrval>=OPPr.BookRVal) then begin
        CurValToOtherCur(VIp.TransDate,OPPr.CurncyCode,OPPr.PPVal,VIp.CurncyCode,prepval,DefaultCurRoundOff);
        vatt = OPPr.VATVal;        
        bookrval = OPPr.BookRVal;
      end else begin
        CurValToOtherCur(VIp.TransDate,VIp.CurncyCode,vipayval,OPPr.CurncyCode,ppval,DefaultCurRoundOff);
        CurValToOtherCur(VIp.TransDate,OPPr.CurncyCode,ppval,VIp.CurncyCode,prepval,DefaultCurRoundOff);
        if (vipayval_vat>prepval) then begin
          vipayval_vat = prepval;
        end;
        if (VIp.CurncyCode!=OPPr.CurncyCode) then begin
          vatt = (OPPr.VATVal*vibookrval)/OPPr.BookRVal;
//        bookrval = MulRateToBase1(VIp.CurncyCode,prepval,VIp.FrRate,VIp.ToRateB1,VIp.ToRateB2,VIp.BaseRate1,VIp.BaseRate2,DefaultCurRoundOff);        
          bookrval = (OPPr.BookRVal*prepval)/OPPr.PPVal;
        end else begin
//          vatt = (OPPr.VATVal*vipayval_vat)/OPPr.BookRVal;
          vatt = (OPPr.VATVal*vipayval)/OPPr.BookRVal;
          if (vatt>OPPr.VATVal) then begin
            vatt = OPPr.VATVal;
          end;
//          bookrval = vibookrval;//how come ? 
          bookrval = (OPPr.BookRVal*prepval)/OPPr.PPVal;
        end;
      end;      
      if (bookrval>OPPr.BookRVal) then begin
        bookrval = OPPr.BookRVal;
      end;
      VIrw.VATCode = OPPr.VATCode;
      VIrw.PrepayAmount = prepval;
      VIrw.VATVal = vatt;
      VIrw.Sum = Round(bookrval,SetRoundModeD(2));
      VIrw.AccNumber = APPayHistr.APAcc;
    end;
  end else begin
    prepval = blankval;
    VIrw.PrepayAmount = prepval;
    VIrw.VATVal = prepval;
  end;
  MatRowPut(VIp,rownr,VIrw);
  VIVc_CalculateRate(VIp,rownr);
  RETURN;
END;

global
procedure VIVc_PastePrepayAmount(var record VIVc VIp,Integer rownr)
BEGIN
  row VIVc VIrw,VI2rw;
  record OPPVc OPPr;
  string 255 t1;
  val t,vatt,coff,bookrval,ppval;
  Integer i,rwcnt;
            
  MatRowGet(VIp,rownr,VIrw);
  if (blank(VIp.VECode)) then begin
    VIrw.PrepayNr = -1;
  end;
  if (VIrw.PrepayNr!=-1) then begin
    OPPr.VECode = VIp.VECode;
    OPPr.SerNr = VIrw.PrepayNr;
    if (ReadFirstMain(OPPr,2,true)==false) then begin
      t1 = USetStr(1215);
      MessageBox(0,t1 & " " & OPPr.VECode); 
      t = blankval;
      VIrw.PrepayAmount = t;
      VIrw.VATVal = t;
    end else begin
      if (OPPr.CurncyCode!=VIp.CurncyCode) then begin
        MessageBox(1366,"");
      end;
      if (VIrw.PrepayAmount!=0) then begin
        t = VIrw.PrepayAmount;
      end else begin
        if (OPPr.CurncyCode!=VIp.CurncyCode) then begin
          t = OPPr.PPVal;
        end else begin
          t = VIp.PayVal;
        end;
        rwcnt = MatRowCnt(VIp);
        for (i=0;i<rwcnt;i=i+1) begin
          if (i!=rownr) then begin
            MatRowGet(VIp,i,VI2rw);
            if (VI2rw.stp==6) then begin
              t = t - VI2rw.PrepayAmount;
            end;
          end;
        end;
        if ((t>OPPr.PPVal) or (VIp.PayVal==0)) then begin
          t = OPPr.PPVal;
        end;
      end;
      CurValToOtherCur(OPPr.PayDate,OPPr.CurncyCode,t,VIp.CurncyCode,ppval,DefaultCurRoundOff);
      if (ppval==VIp.PayVal) then begin
        t = ppval;
        vatt = OPPr.VATVal;
        bookrval = OPPr.BookRVal;
      end else begin
        if (ppval>VIp.PayVal) then begin
          CurValToOtherCur(OPPr.PayDate,VIp.CurncyCode,VIp.PayVal,OPPr.CurncyCode,t,DefaultCurRoundOff);
        end;
        coff = t/OPPr.PPVal;          
        vatt = (OPPr.VATVal*t)/OPPr.PPVal;
        CurValToOtherCur(OPPr.PayDate,OPPr.CurncyCode,vatt,VIp.CurncyCode,vatt,DefaultCurRoundOff);
        bookrval = (OPPr.BookRVal*t)/OPPr.PPVal;
        bookrval = Round(bookrval,DefaultRoundMode);
        CurValToOtherCur(OPPr.PayDate,OPPr.CurncyCode,t,VIp.CurncyCode,t,DefaultCurRoundOff);
      end;
      VIrw.VATCode = OPPr.VATCode;
      VIrw.PrepayAmount = t;
      VIrw.VATVal = vatt;
      VIrw.Sum = bookrval;
    end;
  end else begin
    t = blankval;
    VIrw.PrepayAmount = t;
    VIrw.VATVal = t;
  end;
  MatRowPut(VIp,rownr,VIrw);
  RETURN;
END;

global
procedure PasteAccObj(string AccNumber,var string Objects)
BEGIN
  record AccVc Accr;
  
  Accr.AccNumber = AccNumber;
  if (ReadFirstKey("AccNumber",Accr,1,true)) then begin
    Objects = Accr.Objects;
  end;
  return;
end;

global 
procedure IntIVFromVI(record VIVc VIr,var record IntIVVc IntIVr)
BEGIN
  row VIVc VIrw;
  Integer i,rwcnt,inti;
  row IntIVVc IntIVrw;
  record INVc INr;

  IntIVr.VISerNr = VIr.SerNr;
  if (ReadFirstKey("VISerNr",IntIVr,1,true)) then begin 
    goto LIntIVFromVI;
  end;
  RecordNew(IntIVr);
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (VIrw.stp!=1) then begin
      goto LSKIPVIROW;
    end;
    ClearRow(IntIVr,IntIVrw,1);    
    IntIVrw.ArtCode = VIrw.Item;
    IntIVrw.Quant = VIrw.qty;
    IntIVrw.Spec = VIrw.Comment;
    INr.Code = IntIVrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      IntIVrw.Spec = INr.Name;
    end;
    IntIVrw.VATCode = VIrw.VATCode;
//TaxTemplateCode
//    if (blank(IntIVrw.VATCode)) then begin
//    IntIVrw.VATCode = INr.VATCode;    
    GetItemVATCode(INr.Code,VIr.ExportFlag,IntIVrw.VATCode,false);
//end;    
    IntIVrw.Sum = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
    IntIVrw.Price = IntIVrw.Sum/IntIVrw.Quant;

    if (VIr.InvType==kInvoiceTypeCredit or VIr.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (VIrw.Sum<0) then begin
        IntIVrw.Sum = -IntIVrw.Sum;
      end else begin
        IntIVrw.Sum = -IntIVrw.Sum;
      end;
      if (IntIVrw.Quant<0) then begin
        IntIVrw.Quant = -IntIVrw.Quant;
      end;
      if (IntIVrw.Price<0) then begin
        IntIVrw.Price = -IntIVrw.Price;
      end;
    end;    
    MatRowPut(IntIVr,inti,IntIVrw);
    inti = inti + 1;
LSKIPVIROW:;    
  end;
  IntIVSumup(IntIVr);
  IntIVr.ExportFlag = VIr.ExportFlag;
  IntIVr.VISerNr = VIr.SerNr;
LIntIVFromVI:;  
  RETURN;
END;
