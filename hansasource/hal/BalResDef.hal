/* A Programmable Profit & Loss and Balance Sheet Definition */

/* Some function headers */
external procedure BalRn(record RcVc);
external procedure Bal1Rn(record RcVc);
external procedure Bal2Rn(record RcVc);
external procedure Bal3Rn(record RcVc);
external procedure Bal4Rn(record RcVc);
external procedure Bal5Rn(record RcVc);
external procedure ResRn(record RcVc);
external procedure Res1Rn(record RcVc);
external procedure Res2Rn(record RcVc);
external procedure Res3Rn(record RcVc);
external procedure Res4Rn(record RcVc);
external procedure Res5Rn(record RcVc);

/* The Window Description */
event startup
begin

  SetLangMode(LangEnglish,"ENG",0);

/* This is a sample selection windows for the HAL definable Balance Sheet */
  Report("Balance Sheet (HAL Defineable)",BalHalRClass,BalHalRn,0,modNL);
  Report("Profit & Loss (HAL Defineable)",ResHalRClass,ResHalRn,0,modNL);

  return;
end;

event DefineWindows
begin
  real x,h,h1,h2,h3,h4,h5,h6,h7,hs,v,v2,l,vs,vm,f,t;

  SetLangMode(LangEnglish,"ENG",0);

/* This is a sample selection windows for the HAL definable Balance Sheet */
  WindowBegin("Specify Balance Sheet (HAL)",BalHalRClass,CGRcW,RcType);
  SetWRect(20,80,527,360);
  PeriodField(h=100,v=6,"Period");
  EditFieldTL(h,v+=20,250,"Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=20,50,"Object Type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  CheckBox(180,v,0,"Including unspecified",flags[2]);
  EditField(h,v+=20,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=20,50,"Language",Normal,Language,false,LangSClass);
  ButtonFrame(h=12,vm=(v+=41),123,4,"Accounts");
  RadioButton(h,v,0,0,"A_ll",AccSpec);
  RadioButton(h,v+=16,1,0,"Used Only",AccSpec);
  RadioButton(h,v+=16,2,0,"Groups Only",AccSpec);
  RadioButton(h,v+=16,3,0,"Used Groups Only",AccSpec);
  ButtonFrame(h+=148,v=vm,123,5,"Notation");
  RadioButton(h,v,0,0,"Exact",Notation);
  RadioButton(h,v+=16,4,0,"No Decimals",Notation);
  RadioButton(h,v+=16,1,0,"Thousands",Notation);
  RadioButton(h,v+=16,2,0,"Millions",Notation);
  CheckBox(h,v+=16,0,"Comparison in %",flags[1]);
  ButtonFrame(h,v+=40,123,2,"Values in");
  RadioButton(h,v,0,0,"Base Currency 1",basecurncy);
  RadioButton(h,v+=16,1,0,"Base Currency 2",basecurncy);
  CheckBox(12,v=vm+100,0,"Including _Simulations",SimVerf);
  CheckBox(12,v+=16,0,"List Transaction Nos",flags[4]);
  CheckBox(12,v+=16,0,"No Header",flags[5]);
  EndWindow;

/* This is a sample selection windows for the HAL definable Profit & Loss */
  WindowBegin("Specify Profit & Loss (HAL)",ResHalRClass,CGRcW,RcType);
  SetWRect(20,80,527,380);
  PeriodField(h=100,v=6,"Period");
  EditFieldTL(h,v+=20,250,"Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
  EditFieldTL(h,v+=20,50,"Object Type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  CheckBox(180,v,0,"Including unspecified",flags[2]);
  EditField(h,v+=20,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=20,50,"Language",Normal,Language,false,LangSClass);  
  ButtonFrame(h=12,vm=(v+=41),123,4,"Accounts");
  RadioButton(h,v,0,0,"A_ll",AccSpec);
  RadioButton(h,v+=16,1,0,"Used Only",AccSpec);
  RadioButton(h,v+=16,2,0,"Groups Only",AccSpec);
  RadioButton(h,v+=16,3,0,"Used Groups Only",AccSpec);
  ButtonFrame(h+=148,v=vm,123,6,"Notation");
  RadioButton(h,v,0,0,"Exact",Notation);
  RadioButton(h,v+=16,4,0,"No Decimals",Notation);
  RadioButton(h,v+=16,1,0,"Thousands",Notation);
  RadioButton(h,v+=16,2,0,"Millions",Notation);
  RadioButton(h,v+=16,3,0,"% _Turnover",Notation);
  CheckBox(h,v+=16,0,"Comparison in %",flags[1]);
  ButtonFrame(h,v+=40,123,2,"Values in");
  RadioButton(h,v,0,0,"Base Currency 1",basecurncy);
  RadioButton(h,v+=16,1,0,"Base Currency 2",basecurncy);
  CheckBox(12,v=213,0,"Including _Simulations",SimVerf);
  CheckBox(12,v+=16,0,"List Transaction Nos",flags[4]);
  CheckBox(12,v+=16,0,"No Header",flags[5]);
  EndWindow;

  return;
end;

procedure GetNotStr(Integer n,var string notstr)
begin
  notstr = "";
  if (n==1) then begin notstr = USetStr(3001); end;
  if (n==2) then begin notstr = USetStr(3002); end;
  if (n==3) then begin notstr = USetStr(3003); end;
  /* 0 and 4 is blank */
  return;
end;

/* Balance Sheet */
global
procedure BalHalRn(record RcVc RepSpec)
begin
  record RcVc repsp;
  string 200 tstr;

/* Copy the Selection of the RepSpec, no fields are mandatory but.... */
  RecordCopy(repsp,RepSpec);
  repsp.Period2Str = RepSpec.Period2Str;
  repsp.sStartDate = RepSpec.sStartDate;
  repsp.sEndDate = RepSpec.sEndDate;
  repsp.ObjStr = RepSpec.ObjStr;
  repsp.ObjType = RepSpec.ObjType;
  repsp.flags[2] = RepSpec.flags[2];
  repsp.CurncyCode = RepSpec.CurncyCode;
  repsp.Language = RepSpec.Language;
  repsp.f1 = RepSpec.f1;
  repsp.AccSpec = RepSpec.AccSpec;
  repsp.Notation = RepSpec.Notation;
  repsp.flags[1] = RepSpec.flags[1];
  repsp.Comparison = RepSpec.Comparison;
  repsp.basecurncy = RepSpec.basecurncy;
  repsp.SimVerf = RepSpec.SimVerf;
  repsp.flags[4] = RepSpec.flags[4];
  repsp.flags[5] = RepSpec.flags[5];

/* You can set any of them manually instead of using the Selection window */
/* The comparison is one of them, if you want more columns it is difficult */
/* to have such a selection. */

  repsp.Comparison = -1;   /* It has a special meaning, it uses your definitions in here  */
  repsp.repname = "BalRn"; /* What Report Definition should be used */
                           /* If you use another one, please call the proper function in the end of this one */


/* Column Codes */
/* 1 = Start Balance */
/* 2 = Turnover */
/* 3 = End Balance */
/* 4 = To Budget */
/* 5 = To Rev Budget */
/* 6 = Previous Year Start Balance */
/* 7 = Previous Year Turnover */
/* 8 = Previous Year End Balance */
/* 10 = Column 1 - Column 2   (only for column three) */
/* 11 = Column 1 - Column 2 % (only for column three) */
/* 12 = Column 4 - Column 5   (only for column six) */
/* 13 = Column 4 - Column 5 % (only for column six) */
/* 15 = Start Balance this year */
/* 16 = Turnover this year */
/* 17 = End Balance this year */
/* 18 = To Budget */
/* 19 = To Rev Budget this year */

  repsp.flags[11] = 2; /* Column one */
  repsp.flags[12] = 7; /* Column two */
  repsp.flags[13] = 10; /* Column three */
  repsp.flags[14] = 5; /* Column four */
  repsp.flags[15] = 7; /* Column five */
  repsp.flags[16] = 13; /* Column six */
  
  repsp.flags[20] = 6;  /* How many columns, if 5 then RepCol 9 is not used etc. Max 6 */


  StartReportJob("6 Column Balance Sheet");

/* Header is up to you */

  EndHeader;
  SetRepCol(2,30);
  SetRepCol(3,200); /* Column one */
  SetRepCol(4,255); /* Column two */
  SetRepCol(5,310); /* Column three */
  SetRepCol(6,15);
  SetRepCol(7,365); /* Column four */
  SetRepCol(8,420); /* Column five */
  SetRepCol(9,480); /* Column six */
  
  GetNotStr(repsp.Notation,tstr);

  StartFormat(15);
  OutString(11,0,"",true); /* To make report to file look better */
  OutString(20,0,"",true);
  OutString(3,0,USetStr(3147) & tstr,true);
  OutString(4,0,USetStr(3148) & tstr,true);
  OutString(5,0,USetStr(3152) & tstr,true);
  OutString(7,0,USetStr(3155)  tstr,true);
  OutString(8,0,"Previous Year" & tstr,true);
  OutString(9,0,USetStr(3149) & tstr,true);
  EndFormat;
  Gray_Divider(0,1);
  
  repsp.CalledFromHAL = 1;

  BalRn(repsp);

  EndJob;
  return;
end;

/* Profit and Loss */
global
procedure ResHalRn(record RcVc RepSpec)
begin
  record RcVc repsp;
  string 200 tstr;

/* Copy the Selection of the RepSpec, no fields are mandatory but.... */
  repsp.Period2Str = RepSpec.Period2Str;
  repsp.sStartDate = RepSpec.sStartDate;
  repsp.sEndDate = RepSpec.sEndDate;
  repsp.ObjStr = RepSpec.ObjStr;
  repsp.ObjType = RepSpec.ObjType;
  repsp.flags[2] = RepSpec.flags[2];
  repsp.CurncyCode = RepSpec.CurncyCode;
  repsp.Language = RepSpec.Language;
  repsp.f1 = RepSpec.f1;
  repsp.AccSpec = RepSpec.AccSpec;
  repsp.Notation = RepSpec.Notation;
  repsp.flags[1] = RepSpec.flags[1];
  repsp.Comparison = RepSpec.Comparison;
  repsp.basecurncy = RepSpec.basecurncy;
  repsp.SimVerf = RepSpec.SimVerf;
  repsp.flags[4] = RepSpec.flags[4];
  repsp.flags[5] = RepSpec.flags[5];

/* You can set any of them manually instead of using the Selection window */
/* The comparison is one of them, if you want more columns it is difficult */
/* to have such a selection. */

  repsp.Comparison = -1;   /* It has a special meaning, it uses your definitions in here  */
  repsp.repname = "ResRn"; /* What Report Definition should be used */


/* Column Codes */
/* 1 = Accumulated */
/* 2 = Accumulated Inc Some sort of other Accum.. */
/* 3 = Previous Year */
/* 4 = To Budget */
/* 5 = To Rev Budget */
/* 6 = Previous Year Result (YTD-1) */
/* 10 = Column 1 - Column 2   (only for column three) */
/* 11 = Column 1 - Column 2 % (only for column three) */
/* 12 = Column 4 - Column 5   (only for column six) */
/* 13 = Column 4 - Column 5 % (only for column six) */
/* 15 = Accumulated this year (YTD) */
/* 16 = To Budget this year (YTD) */
/* 17 = To Rev Budget this year (YTD)*/

  repsp.flags[11] = 1; /* Column one */
  repsp.flags[12] = 4; /* Column two */
  repsp.flags[13] = 11; /* Column three */
  repsp.flags[14] = 15; /* Column four */
  repsp.flags[15] = 16; /* Column five */
  repsp.flags[16] = 13; /* Column six */
  
  repsp.flags[20] = 6;  /* How many columns, if 5 then RepCol 9 is not used etc. Max 6 */


  StartReportJob("6 Column Profit and Loss");

/* Header is up to you */

  EndHeader;
  SetRepCol(2,30);
  SetRepCol(3,200); /* Column one */
  SetRepCol(4,255); /* Column two */
  SetRepCol(5,310); /* Column three */
  SetRepCol(6,15);
  SetRepCol(7,365); /* Column four */
  SetRepCol(8,420); /* Column five */
  SetRepCol(9,480); /* Column six */
  
  GetNotStr(repsp.Notation,tstr);

  StartFormat(15);
  OutString(11,0,"",true); /* To make report to file look better */
  OutString(20,0,"",true);
  OutString(3,0,"This Period" & tstr,true);
  OutString(4,0,"Budget" & "2"  & tstr,true);
  OutString(5,0,"%" & tstr,true);
  OutString(7,0,"Accum." & tstr,true);
  OutString(8,0,"Budget" & tstr,true);
  OutString(9,0,"%" & tstr,true);
  EndFormat;
  Gray_Divider(0,1);
  
  repsp.CalledFromHAL = 1;

  ResRn(repsp);

  EndJob;
  return;
end;

