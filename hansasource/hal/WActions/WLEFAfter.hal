external procedure WayListVc_PastePRCode(var record WayListVc,Integer);

global
procedure WLTotalsCalc(var record WayListVc WayListr)
begin
  row WayListVc WayListrw;
  integer ar,i;
  val totkm,totl;
  
  ar=MatRowCnt(WayListr);
  totkm=0;
  for (i=0;i<ar;i=i+1) begin
    MatRowGet(WayListr,i,WayListrw); 
    totkm = totkm + WayListrw.WDistVal; 
  end;
  WayListr.Totalkm = totkm;
  if (WayListr.CostPerkm>0) then begin
    WayListr.TotalCost = totkm * WayListr.CostPerkm;
  end else begin
    WayListr.TotalCost = 0;
  end;	 
  if (WayListr.RealAmount>0) then begin
    WayListr.Totall = totkm * WayListr.RealAmount / 100;
  end else begin
    WayListr.Totall = 0;
  end;
  return;  
end;

global
procedure WayListVc_PasteCarCode(var record WayListVc WayListr)
begin
  row WayListVc WayListrw;
  record WLCarVc WLCarr;
  record WayListVc WayList2r;
  row WayListVc WayList2rw;
  Record WLSettingsBlock WLSetr;
  
  BlockLoad(WLSetr);
  WLCarr.CarCode = WayListr.CarCode;
  if (ReadFirstMain(WLCarr,1,true)) then begin
    WayListr.Driver = WLCarr.Driver;
    WayListr.UsedBy = WLCarr.UsedBy;
    WayListr.PetroilCode = WLCarr.PetroilCode;
    WayListr.NormAmount = WLCarr.NormAmount;
    WayListr.RealAmount = WLCarr.NormAmount;
    WayListr.CarNumber = WLCarr.CarNumber;
    WayListr.CarName = WLCarr.CarName;
    if (ProgramType==typDriveLog) then begin
      if (WLSetr.ContinuousDrive!=0) then begin
        if (MatRowCnt(WayListr)>0) then begin
          WayList2r.CarCode = WayListr.CarCode;
          if (ReadLastKey("CarCode",WayList2r,1,true)) then begin
            if (MatRowCnt(WayList2r)>0) then begin
              MatRowGet(WayList2r,0,WayList2rw);
              MatRowGet(WayListr,0,WayListrw);
              WayListrw.Stkm = WayList2rw.Endkm;
              MatRowPut(WayListr,0,WayListrw);
            end;
          end;
        end;
      end;
    end;
    WLTotalsCalc(WayListr);
  end; 
  
  return;
end;

function Boolean WayListDClassCarCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    WayListVc_PasteCarCode(WayListr);
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassCarCodeEFAfter = res;
  return;
end;

function Boolean WayListDClassPurposeCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  record WLPurposeVc WLPurposer;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    WLPurposer.PCode = WayListr.PurposeCode;
    if (ReadFirstMain(WLPurposer,1,true)) then begin
      WayListr.Purpose = WLPurposer.Purpose;
    end; 
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassPurposeCodeEFAfter = res;
  return;
end;

function Boolean WayListDClassRealAmountEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    WLTotalsCalc(WayListr);
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassRealAmountEFAfter = res;
  return;
end;

function Boolean WayListDClassWDistCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  row WayListVc WayListrw;
  record WLDistVc WLDistr;
  record PRVc PRr;

  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    MatRowGet(WayListr,rownr,WayListrw);  
    WLDistr.DistCode = WayListrw.WDistCode;
    if (ReadFirstMain(WLDistr,1,true)) then begin
      WayListrw.WComment = WLDistr.DistName;
      WayListrw.WDistVal = WLDistr.DistVal;
      WayListrw.Endkm = WayListrw.Stkm + WLDistr.DistVal;
    end; 
    WLTotalsCalc(WayListr);
    if (nonblank(WayListr.PRCode)) then begin
      PRr.Code = WayListr.PRCode;
      if (ReadFirstMain(PRr,1,true)) then begin
        WayListrw.CUCode = PRr.CustCode;
        WayListrw.CUName = PRr.CustName;
      end;
    end;  
    MatRowPut(WayListr,rownr,WayListrw);  
    WLTotalsCalc(WayListr);
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassWDistCodeEFAfter = res;
  return;
end;

function Boolean WayListDClassWDistValEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  row WayListVc WayListrw;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    if (rownr>=0) then begin
      MatRowGet(WayListr,rownr,WayListrw);  
      if nonblank(WayListrw.Stkm) and nonblank(WayListrw.WDistVal) then begin
        WayListrw.Endkm = WayListrw.WDistVal + WayListrw.Stkm;
        MatRowPut(WayListr,rownr,WayListrw);  
      end;  
    end;
    WLTotalsCalc(WayListr);
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassWDistValEFAfter = res;  
  return;
end;

function Boolean WayListDClassCostPerkmEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    WLTotalsCalc(WayListr);
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassCostPerkmEFAfter = res;  
  return;
end;

global
function Boolean WayListDClassOnOverStrike(Integer wn,Integer rownr)
begin
  Boolean res;
  record WayListVc WayListr;
  
  res = true; 
  GetWindowRecord(wn,WayListr);
  WLTotalsCalc(WayListr);
  PutWindowRecord(wn,WayListr);
  WayListDClassOnOverStrike = res;
  return;
end;

function Boolean WayListDClassCUCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  row WayListVc WayListrw;
  record CUVc CUr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    MatRowGet(WayListr,rownr,WayListrw);    
    CUr.Code = WayListrw.CUCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      WayListrw.CUName = CUr.Name;
      MatRowPut(WayListr,rownr,WayListrw);  
    end;  
    PutWindowRecord(wn,WayListr); 
  end;
  WayListDClassCUCodeEFAfter = res;
  return;
end;

function Boolean WayListDClassPRCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record WayListVc WLr;
  
  if (changedf) then begin
    GetWindowRecord(wn,WLr);
    WayListVc_PastePRCode(WLr,rownr);
    PutWindowRecord(wn,WLr); 
  end;
  WayListDClassPRCodeEFAfter = res;
  return;
end;

function Boolean WayListDClassStkmEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  row WayListVc WayListrw;

  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    if (rownr>=0) then begin
      MatRowGet(WayListr,rownr,WayListrw);  
      if nonblank(WayListrw.Endkm) and nonblank(WayListrw.Stkm) then begin
        WayListrw.WDistVal = WayListrw.Endkm - WayListrw.Stkm;
        MatRowPut(WayListr,rownr,WayListrw);  
      end;  
    end;
    WLTotalsCalc(WayListr);
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassStkmEFAfter= res;
  return;
end;

function Boolean WayListDClassEndkmEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WayListr;
  row WayListVc WayListrw;

  if (changed!=0) then begin
    GetWindowRecord(wn,WayListr);
    if (rownr>=0) then begin
      MatRowGet(WayListr,rownr,WayListrw);  
      if nonblank(WayListrw.Endkm) and nonblank(WayListrw.Stkm) then begin
        WayListrw.WDistVal = WayListrw.Endkm - WayListrw.Stkm;
        MatRowPut(WayListr,rownr,WayListrw);  
      end;  
    end;
    WLTotalsCalc(WayListr);
    PutWindowRecord(wn,WayListr);
  end;
  WayListDClassEndkmEFAfter= res;
  return;
end;

global
function Boolean WayListDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "CUCode": res = WayListDClassCUCodeEFAfter(wn,fn,rownr,changed);
    case "WDistCode": res = WayListDClassWDistCodeEFAfter(wn,fn,rownr,changed);
    case "RealAmount": res = WayListDClassRealAmountEFAfter(wn,fn,rownr,changed);
    case "PurposeCode": res = WayListDClassPurposeCodeEFAfter(wn,fn,rownr,changed);
    case "CarCode": res = WayListDClassCarCodeEFAfter(wn,fn,rownr,changed);
    case "WDistVal": res = WayListDClassWDistValEFAfter(wn,fn,rownr,changed);
    case "CostPerkm": res = WayListDClassCostPerkmEFAfter(wn,fn,rownr,changed);
    case "Stkm": res = WayListDClassStkmEFAfter(wn,fn,rownr,changed);
    case "Endkm": res = WayListDClassEndkmEFAfter(wn,fn,rownr,changed);
    case "PRCode": res = WayListDClassPRCodeEFAfter(wn,rownr,changed!=0);
  end;
  WayListDClassAfterEditField = res;
  return;
end;

global
function Boolean WayListDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record WayListVc WLr;
  row WayListVc WLrw;
  
  res = false;
  GetWindowRecord(wn,WLr);
  if (WLr.OKFlag==0) then begin
    res = true;
  end;
  if (res) then begin
    switch (fieldname) begin
      case "CUCode":
        if (rownr>=0) then begin
          MatRowGet(WLr,rownr,WLrw);
          res = blank(WLrw.PRCode);
        end;
      case "CUName":
        if (rownr>=0) then begin
          MatRowGet(WLr,rownr,WLrw);
          res = blank(WLrw.PRCode);
        end;
    end;
  end;
  WayListDClassActiveEditField = res;
  return;
end;

global
function Boolean WayListDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record WayListVc WayListr;
  
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,WayListr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,WayListr);
  end;  
  if (WayListr.OKFlag!=0) then begin
    res = false;
  end;
  WayListDClassOKFlagButtonAction = res;
  return;
end;
