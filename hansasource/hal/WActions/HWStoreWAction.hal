external procedure StdRegisterForMarketplace();
external function string 255 ActiveFreemiumTags();
external function Boolean ProductInDemoMode();
external function string 10 CurrentWebLang();
external function Integer InString2(string,string);
external function Boolean FindTheUser(var record UserVc);
remote function string 255 ActiveFreemiumCnt();
external updating procedure StoreCustomerHWAsync(Boolean);
external updating procedure UpdateStdRegDataBeforeRegistration();
external function Boolean PingToHWStore();
forward procedure OpenHWStore();

function string 255 DownloadServerButton1(string value)
begin
  string 255 res;
  
  res = "<div id=""DSBtn""><a href=""http://standardinstall.com/""><input type=""button"" value=""" & value & """></a></div>";
  
  DownloadServerButton1 = res;
  return;
end;

procedure NoHWStore(integer wn,integer reason)
begin
  string 255 html,button;
/*
  html = html & "<div id=""sku_description"">" & USetStr(7518) & "</div>";
  
  switch (reason) begin
    case 1: //User can't make payments
      html = html & "<div id=""header3"">" & USetStr(7519) & "</div>";
    case 2: //Hasn't yet gotten product info back from the App Store
      if (NoProductsRegistered) then begin
        html = html & "<div id=""header3"">" & USetStr(7545) & "</div>";
      end else begin
        html = html & "<div id=""header3"">" & USetStr(7520) & "</div>";
        button = BackButton(wn,"ErrorPage",USetStr(7521));
      end;
    case 3: //User hasn't registered
      html = html & "<div id=""header3"">" & USetStr(7522) & "</div>";
      button = BackButton(wn,"RegErrorPage",USetStr(7542));
  end;
  SetWebPageData(wn,"$HWStore",PageStart1 & PageStart2 & PageStart3(false) & html & button & PageEnd);
*/
  return;
end;

global
function string 255 HWStoreUrl()
begin
  string 255 server,res;
  LongInt port;
  record InternetEnablerBlock IEb;
  
  if (IsStandardProduct) then begin
    if (TestEnabler) then begin  // Should be either MarketplaceTestEnabler, or a lookup call
      if (TestEnablerServer<>"") then begin
        server = TestEnablerServer;
      end else begin
        server = "127.0.0.1";
      end;
      port = TestEnablerHttpsPort;
      
      if (port<=0) then begin
        port = TestEnablerPort;
        if (port>0) then begin
          port = port + 1;
        end;
      end;
      if (port<=0) then begin
        port = 1081;
      end;
      res = server & ":" & port;
    end else begin
      res = "marketplace.standard-accounts.com:443";
    end;
  end else begin
    if (TestEnabler) then begin  // Should be either MarketplaceTestEnabler, or a lookup call
      if (TestEnablerServer<>"") then begin
        server = TestEnablerServer;
      end else begin
        server = "127.0.0.1";
        port = 1081;
      end;
    
      if (TestEnablerPort>0) then begin
        port = TestEnablerHttpsPort;
      end else begin
        port = 1081;
      end;
      res = server & ":" & port;
    end else begin
      BlockLoad(IEb);
      res = IEb.HWAddress & ":443";
    end;
  end;
  
  //LogText(0,"HWStoreUrl: " & res);
  HWStoreUrl = res;  
  return;
end;

global
function string 255 GetCurrentUserEmail()
begin
  string 255 res;
  record UserVc Userr;

  Userr.Code = CurrentUser;
  if (FindTheUser(Userr)) then begin
    res = Userr.LoginEmailAddr;
  end;

  GetCurrentUserEmail = res;
  return;
end;

function string 255 GoToHWStore(string tagstr,string pagestr)
begin
  string 255 res,usermail;
  record InternetEnablerBlock IEr;
  record CYBlock CYb;
  Integer custcode,enabregno;
  
  BlockLoad(IEr);
  usermail = urlencode(GetCurrentUserEmail);
  if (IsStandardProduct) then begin
    if (ProductInDemoMode==false) then begin
      res = "https://" & HWStoreUrl & "/doremotelogin?custcode=" & IEr.CustomerCode & "&enabregno=" & IEr.EnablerRegistration & "&usercode=" & UrlEncode(CurrentUser) & "&usermail=" & usermail & "&demof=0" & "&prog_lang=" & CurrentLanguage & "&prog_productcode=" & BuildProductCode & "&prog_LicenseMode=" & LicenseMode & "&btntype=market" & "&freemiumtags=" & ActiveFreemiumTags & "&freemiumcnt=" & ActiveFreemiumCnt
          & "&functiontag=" & tagstr & "&os=" & URLEncode(DeviceOperatingSystem) & "&page=" & pagestr & "&version=" & URLEncode(USetStr(901) & " " & VersionBuild);

//      res = "http://" & "update.marketplace.standard-accounts.com:1082" & "/doremotelogin?custcode=" & IEr.CustomerCode & "&enabregno=" & IEr.EnablerRegistration & "&usercode=" & UrlEncode(CurrentUser) & "&usermail=" & usermail & "&demof=0" & "&prog_lang=" & CurrentLanguage & "&prog_productcode=" & BuildProductCode & "&prog_LicenseMode=" & LicenseMode & "&btntype=market" & "&freemiumtags=" & ActiveFreemiumTags & "&freemiumcnt=" & ActiveFreemiumCnt
//          & "&functiontag=" & tagstr & "&page=" & pagestr & "&version=" & URLEncode(USetStr(901) & " " & VersionBuild);

//      res = "http://" & "127.0.0.1:1080" & "/doremotelogin?custcode=" & IEr.CustomerCode & "&enabregno=" & IEr.EnablerRegistration & "&usercode=" & UrlEncode(CurrentUser) & "&usermail=" & usermail & "&demof=0" & "&prog_lang=" & CurrentLanguage & "&prog_productcode=" & BuildProductCode & "&prog_LicenseMode=" & LicenseMode & "&btntype=market" & "&freemiumtags=" & ActiveFreemiumTags & "&freemiumcnt=" & ActiveFreemiumCnt
//          & "&functiontag=" & tagstr & "&page=" & pagestr & "&version=" & URLEncode(USetStr(901) & " " & VersionBuild);

//      res = "http://" & "192.168.1.139:1234" & "/doremotelogin?custcode=" & IEr.CustomerCode & "&enabregno=" & IEr.EnablerRegistration & "&usercode=" & CurrentUser & "&demof=0" & "&prog_lang=" & CurrentLanguage & "&prog_productcode=" & BuildProductCode & "&prog_LicenseMode=" & LicenseMode & "&btntype=market" & "&freemiumtags=" & ActiveFreemiumTags & "&freemiumcnt=" & ActiveFreemiumCnt &  "&functiontag=" & tagstr & "&version=" & URLEncode(USetStr(901) & " " & VersionBuild);
//dologinwithenab
    end else begin
      BlockLoad(CYb);
      if (TestEnabler) then begin
        custcode = 98;
        enabregno = 97;
      end else begin
        custcode = 86;
        enabregno = 85;
      end;
      res = "https://" & HWStoreUrl & "/doremotelogin?custcode=" & custcode & "&enabregno=" & enabregno & "&demof=1&prog_lang=" & CurrentLanguage & "&prog_productcode=" & BuildProductCode & "&prog_LicenseMode=" & LicenseMode & "&btntype=market"  & "&prog_cntry=" & StringFromSet(534,CYb.VATLaw) & "&freemiumtags=" & ActiveFreemiumTags & "&freemiumcnt=" & ActiveFreemiumCnt & "&os=" & URLEncode(DeviceOperatingSystem) & "&version=" & URLEncode(USetStr(901) & " " & VersionBuild);
//dologinwithenab      
    end;
  end else begin
    res = "https://" & HWStoreUrl & "/dologinwithenab?custcode=" & IEr.CustomerCode & "&enabregno=" & IEr.EnablerRegistration & "&usercode=" & CurrentUser & "&usermail=" & usermail & "&prog_lang=" & CurrentLanguage & "&prog_productcode=" & BuildProductCode & "&btntype=market" & "&functiontag=" & tagstr & "&os=" & URLEncode(DeviceOperatingSystem) & "&version=" & URLEncode(USetStr(901) & " " & VersionBuild);
  end;
//  LogText(0,"GoToHWStore " & res);
  //SetupEnabVars
//Trace("GoToHWStore " & res,"");  
  GoToHWStore = res;  
  return;
end;

procedure GetHWStoreHtml(var area html)
begin
  area msg;
  record InternetEnablerBlock IEr;
  string 255 tstr,hostname;
  LongInt port,httpport;
  Integer pos;
  
  BlockLoad(IEr);
  tstr = HWStoreUrl;
  pos = Instring2(tstr,":");
  hostname = Left(tstr,pos);
  port = StringToLongInt(Right(tstr,Len(tstr)-pos-1));
//  httpport = StringToLongInt(Right(tstr,Len(tstr)-pos-1));
  SendWebRequest(hostname,port,httpport,true,"GET","/HTSGetHWStoreHtml.hal?custcode=" & IEr.CustomerCode & "&enabregno=" & IEr.EnablerRegistration & "&usercode=" & CurrentUser & "&prog_lang=" & CurrentLanguage & "&os=" & DeviceOperatingSystem & "&prog_productcode=" & BuildProductCode,"","",false,msg,html,200);
  
  return;
end;

procedure MetroHWStoreMainWindow()
begin
  xml x;
  area html;
  string 255 path,path2,path3;
  Integer i,i2,i3;
  
  GetHWStoreHtml(html);
//  WriteAreaToFile(html,"marketplace.html",0);
  x = ParseXMLArea(html);
  
  i = 0;
  path = "html/body/div/div[1]/div[" & i & "]";
  while (XMLNodeExists(x,path)) begin
    switch (XMLGetAttribute(x,path,"id")) begin
      case "active_subscriptions":
        LogText(0,path & "/h2: " & XMLGet(x,path & "/h2"));
        i2 = 0;
        path2 = path & "/table/tr[" & i2 & "]";
        
        while (XMLNodeExists(x,path2)) begin
          i3 = 0;
          path3 = path2 & "/td[0]/div[" & i3 & "]";
          
          while (XMLNodeExists(x,path3)) begin
            switch (XMLGetAttribute(x,path3,"id")) begin
              case "function":
                LogText(0,path3 & "/label: " & XMLGet(x,path3 & "/label"));
                LogText(0,path3 & "/div: " & XMLGet(x,path3 & "/div"));
              case "qty":
                LogText(0,path3 & "/label: " & XMLGet(x,path3 & "/label"));
                LogText(0,path3 & "/div: " & XMLGet(x,path3 & "/div"));
              case "paid_until":
                LogText(0,path3 & "/label: " & XMLGet(x,path3 & "/label"));
                LogText(0,path3 & "/div: " & XMLGet(x,path3 & "/div"));
            end;
            i3 = i3 + 1;
            path3 = path2 & "/td[0]/div[" & i3 & "]";
          end;
          
          i3 = 0;
          path3 = path2 & "/td[1]/div[" & i3 & "]";
          
          while (XMLNodeExists(x,path3)) begin
            switch (XMLGetAttribute(x,path3,"class")) begin
              case "currency":
                LogText(0,path3 & ": " & XMLGet(x,path3));
              case "price":
                LogText(0,path3 & ": " & XMLGet(x,path3));
              case "text":
                LogText(0,path3 & ": " & XMLGet(x,path3));
            end;
            
            i3 = i3 + 1;
            path3 = path2 & "/td[1]/div[" & i3 & "]";
          end;
          
          LogText(0,path2 & "/td[1]/button: " & XMLGet(x,path2 & "/td[1]/button"));
          LogText(0,path2 & "/td[1]/button onclick: " & XMLGetAttribute(x,path2 & "/td[1]/button","onclick"));
          i2 = i2 + 1;
          path2 = path & "/table/tr[" & i2 & "]";
        end;
      case "possible_subscriptions":
        LogText(0,path & "/h2: " & XMLGet(x,path & "/h2"));
        i2 = 0;
        path2 = path & "/table/tr[" & i2 & "]";
        
        while (XMLNodeExists(x,path2)) begin
          i3 = 0;
          path3 = path2 & "/td[0]/div[" & i3 & "]";
          
          while (XMLNodeExists(x,path3)) begin
            switch (XMLGetAttribute(x,path3,"class")) begin
              case "item":
                LogText(0,path3 & "/label: " & XMLGet(x,path3 & "/label"));
                LogText(0,path3 & "/div: " & XMLGet(x,path3 & "/div"));
              case "text":
                LogText(0,path3 & ": " & XMLGet(x,path3));
            end;
            
            i3 = i3 + 1;
            path3 = path2 & "/td[0]/div[" & i3 & "]";
          end;
          
          LogText(0,path2 & "/td[1]/button: " & XMLGet(x,path2 & "/td[1]/button"));
          LogText(0,path2 & "/td[1]/button onclick: " & XMLGetAttribute(x,path2 & "/td[1]/button","onclick"));
          i2 = i2 + 1;
          path2 = path & "/table/tr[" & i2 & "]";
        end;
    end;
    
    i = i + 1;
    path = "html/body/div/div[1]/div[" & i & "]";
  end;
  
  return;
end;

procedure SendDemoLicensesV1Vc()
begin
  area msg;
  record LicensesVc Licr;
  record LicensesV1Vc Lic1r;
  array record LicensesV1Vc Lica;
  string 255 tstr,hostname;
  LongInt port,httpport;
  Integer pos,i;
  
  AddLongToArea(1,msg); //Version
  AddStringToArea(DataBaseID,msg);
  
  while (LoopKey("ActiveFunction",Licr,1,true)) begin
    RecordNew(Lic1r);
    Lic1r.StoreTransId = Licr.StoreTransId;
    Lic1r.Function = Licr.Function;
    Lic1r.Type = Licr.Type;
    Lic1r.StartDate = Licr.StartDate;
    Lic1r.EndDate = Licr.EndDate;
    Lic1r.Source = Licr.Source;
    Lic1r.Qty = Licr.Qty;
    Lic1r.StoreSKU = Licr.StoreSKU;
    Lica[Lica.length] = Lic1r;
  end;
  
  AddLongToArea(Lica.length,msg);
  
  for (i=0;i<Lica.length;i=i+1) begin
    AddRecordToArea(Lica[i],"LicensesV1Vc",msg);
  end;
  
  tstr = HWStoreUrl;
  pos = Instring2(tstr,":");
  hostname = Left(tstr,pos);
  port = StringToLongInt(Right(tstr,Len(tstr)-pos-1));
//  httpport = StringToLongInt(Right(tstr,Len(tstr)-pos-1));
  SendAsyncWebRequest(hostname,port,httpport,true,"POST","/HTSReceiveDemoLicensesV1Vc.hal","","",msg,"SendDemoLicensesV1VcReply",0);
  
  return;
end;

global
procedure SendDemoLicensesV1VcReply(area reply,area replyheader,Boolean timedout)
begin
end;

global
procedure HWStoreMainWindow(integer wn)
begin
  string 255 head,tstr,html,allhtml,prodhtml;
  record ModuleBlock MBb;
  integer nrofcat;
  LongInt base;
  record RcVc RepSpec;

/*  
  nrofcat = 0;
  BlockLoad(MBb);
  
  if (GuiType!=kGuiiPhone) then begin
    head = head & "<div id=""header1"">" & USetStr(7500) & "</div>";
    head = head & "<div id=""header9"">" & USetStr(7540) & "</div>";
  end;
//  head = head & "<div id=""sku_description"">" & USetStr(7501) & "</div>";
//  head = head & "<div id=""header3"">" & USetStr(7502) & "</div>";
  
  for (base = 29000; base<30000; base = base + 20) begin
//    if (GuiType==kGuiiPhone) then begin
//      AddProductLine(base,nrofcat,wn);
//    end else begin
      prodhtml = GetProductHTML(base,nrofcat,wn);
      if (prodhtml<>"") then begin
        html = html & prodhtml;
        WriteStringToFile(prodhtml,"prodhtml" &  base & ".html",0);
      end;
//    end;
  end;
  
  if (nrofcat>=1) then begin
    allhtml = PageStart1 & PageStart2 & PageStart3(true) & head & html & PageEnd;
    WriteStringToFile(allhtml,"mainwindow.html",0);
    SetWebPageData(wn,"$HWStore",allhtml);
  end else begin
    NoHWStore(wn,2);
  end;
*/  
//  SetWebPageURL(wn,"$HWStore","http://www.gazeta.pl");
//Trace("GoToHWStore " & GoToHWStore,"");
  GetWindowRecord(wn,RepSpec);
  if (PingToHWStore) then begin
    SetWebPageURL(wn,"$HWStore",GoToHWStore(RepSpec.f1,RepSpec.f2));
  end else begin
    html = "<html><body><div style='text-align:center;margin-top:25%;font:14px Helvetica Neue, Helvetica, Arial, sans-serif;'>" & UsetStr(37013) & "</div></body></html>";
    SetWebPageData(wn,"$HWStore",html);
  end;
  return;
end;

global
function string 255 HWStoreWClassWindowSubsetDefault(string defsubset)
begin
  string 255 res
  
//  res = "http://www.gazeta.pl";
  res = GoToHWStore("","");
  HWStoreWClassWindowSubsetDefault = res;
  return;
end;

global
procedure OpenHWStoreMainWindow(string wn)
begin
  HWStoreMainWindow(StringToInt(wn));
  return;
end;

procedure OpenHWStoreBlockRecursion(Boolean blockrecursionf)
begin
  record RcVc RepSpec;
  transaction Boolean gIAPWClassOnOpenWindowf;

  if (gIAPWClassOnOpenWindowf) then begin
    goto LOpenHWStoreBlockRecursion;
  end;
  if (ServerMode) then begin
    ClientRemoteAsync.OpenHWStore;
  end else begin
    if (UserCanAction("OpenMarketplace",true)) then begin
      if (TestEnablerFile("EnAppleInAppPurchase")) then begin
        OpenWindow("IAPWClass",0,0,"","",RepSpec);
      end else begin
        if (blockrecursionf==false) then begin
          OpenWindow("HWStoreWClass",0,0,"","",RepSpec);
        end;
      end;
    //OpenWindow("HWStoreWClass",0,NIL,false,0);
    end else begin
//      OpenWebBrowser(GoToHWStore);
    end;
  end;
LOpenHWStoreBlockRecursion:;  
end;

global
procedure OpenHWStore()
begin
  OpenHWStoreBlockRecursion(false);
end;

global
procedure OpenHWStoreWithTag(string tagid)
begin
  record RcVc RepSpec;
  
  if (ServerMode) then begin
    ClientRemoteAsync.OpenHWStoreWithTag(tagid);
  end else begin
    if (UserCanAction("OpenMarketplace",true)) then begin
      if (TestEnablerFile("EnAppleInAppPurchase")) then begin
        OpenWindow("IAPWClass",0,0,"","",RepSpec);
      end else begin
        RepSpec.f1 = tagid;
        OpenWindow("HWStoreWClass",0,0,"","",RepSpec);
      end;
    //OpenWindow("HWStoreWClass",0,NIL,false,0);
    end else begin
//      OpenWebBrowser(GoToHWStore);
    end;
  end;
end;

global
procedure OpenHWStoreWithLandingPage(string page)
begin
  record RcVc RepSpec;

  if (ServerMode) then begin
    ClientRemoteAsync.OpenHWStoreWithLandingPage(page);
  end else begin
    if (UserCanAction("OpenMarketplace",true)) then begin
      if (TestEnablerFile("EnAppleInAppPurchase")) then begin
        OpenWindow("IAPWClass",0,0,"","",RepSpec);
      end else begin
        RepSpec.f2 = page;
        OpenWindow("HWStoreWClass",0,0,"","",RepSpec);
      end;
      // OpenWindow("HWStoreWClass",0,NIL,false,0);
    end else begin
      // OpenWebBrowser(GoToHWStore);
    end;
  end;
end;

global
function boolean HWStoreWClassOnOpenWindow(Integer wn)
begin
  record InternetEnablerBlock IEr;
  record RcVc RepSpec;
  record StdRegDataBlock SRDb;
  record CYBlock CYb;
  Integer wn2;

  if (GuiType!=kGuiMetro) then begin
  BlockLoad(IEr);
  BlockLoad(SRDb);
//  if (CanMakeInAppPurchase) then begin
    if (nonblank(IEr.CustomerCode) and ProductInDemoMode==false) then begin
      HWStoreMainWindow(wn);
    end else begin
      if (ProductInDemoMode) then begin
        SendDemoLicensesV1Vc;
        HWStoreMainWindow(wn);
      end else begin
        CloseWindow(wn);
        if (blank(SRDb.CompName) or (blank(SRDb.MarketUserName) or blank(SRDb.MarketUserPassword)) or (IEr.HasDeclinedReg==1)) then begin
            qupdating.UpdateStdRegDataBeforeRegistration;
            qupdating.StoreCustomerHWAsync(false);
            OpenHWStoreBlockRecursion(true);
            //HWStoreMainWindow(wn);

          if (SingleUserMode==false) then begin
            //Trace(USetStr(7547),"");
            //StdRegisterForMarketplace;//dirtonavcent
/*            
            BlockLoad(CYb);
            RecordNew(RepSpec);
            RepSpec.f1 = CYb.CompName;
            RepSpec.f2 = CYb.Addr0;
            RepSpec.f3 = CYb.Addr1;
            RepSpec.f4 = CYb.Addr2;
            RepSpec.f5 = CYb.Addr3;
            RepSpec.f6 = CYb.Addr4;
            RepSpec.f7 = CYb.Phone;
            RepSpec.f8 = CYb.emailAddr;
            RepSpec.f9 = CYb.OrgNr;
            RepSpec.f10 = CYb.VATNr;
            RepSpec.f12 = CYb.OrgNr2;
            RepSpec.AccStr = CYb.HomeCommunity;
            RepSpec.Stext = SRDb.MarketUserName;
            RepSpec.ArtMode = 1;
            RepSpec.Comment = StringFromSet(543,0);
            wn2 = OpenWindow("RegisterCompanyWClass",0,0,"","",RepSpec);
            if (wn2>0) then begin
              PutWindowString(wn2,"BusinessName",CYb.BusinessName);
              PutWindowString(wn2,"Manager",CYb.Manager);
              PutWindowString(wn2,"ChiefAccountant",CYb.ChiefAccountant);
  //            PutWindowString(wn2,"MarketPassword",CYb.UserName);
              PutWindowRecord(wn2,RepSpec);
            end;
*/            
          end else begin
            //Trace(USetStr(7547),"");
            //StdRegisterForMarketplace;//dirtonavcent
/*            
            wn2 = OpenWindow("DemoMsgWClass",0,0,"","",RepSpec);
            RepSpec.Comment = StringFromSet(543,0);
            PutWindowRecord(wn2,RepSpec);
*/            
          end;
        end else begin
          Trace(USetStr(7550),"");
        end;
//        NoHWStore(wn,3);
      end;
    end;
/*    
  end else begin
    NoHWStore(wn,1);
  end;
*/  
  end;
  HWStoreWClassOnOpenWindow = false;
  return;
end;


global
function Boolean HWStoreWClassOnOKWindow(Integer wn)
begin
  LongInt l, mwn;
  string 255 subset;
  string 255 prodbase;
  record RcVc RepSpec;
    
  l = SelectedListLine(wn);
  if (l>=0) then begin
//    prodbase = GetListTag(wn,l);
//    mwn = OpenWindow("HWStoreItemWClass",0,0,"","",RepSpec);
//    OpenHWStoreItemWindow("" & mwn & "," & prodbase);
  end;
  HWStoreWClassOnOKWindow = true;
  return;
end;
