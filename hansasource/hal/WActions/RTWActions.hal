remote function Integer JobPasteResCode(var record JobVc,string);
external function Boolean IsEnterprise();
external procedure NewActivityTool();
remote procedure RTWNewResWithArgsRemote(record RcVc,Integer,Integer,string,string,Date,Date,var record ResAvVc);
remote procedure ResTypeAvailNewResRemote(record RcVc,string,var record JobVc);
remote procedure RTWNewResRemote(record RcVc,var record JobVc);
remote procedure RTWNewResRemote2(record RcVc,var record JobVc,Integer);
remote updating function Boolean RTWSplitReservationRemote(LongInt);
external function string 40 ResTypeSClassSpecPName(string);
remote procedure RestBookingToolRemote(record RcVc,var record RestBookingVc);
external function LongInt DateDiff(Date,Date);


global
procedure CheckInTool()
begin
  record RcVc RepSpec;
  record RcVc frRepSpec;
  Integer wn;
  record LocalMachineBlock LMb;
  
  wn = CurWindow;
  ReportDefaults(RepSpec,"CheckInRClass");  
  switch (GetWindowFileName(wn)) begin
    case "RcVc":
      GetWindowRecord(wn,frRepSpec);
      RepSpec.f3 = frRepSpec.f3;
      
      RepSpec.f6 = frRepSpec.f6;
    case "JobVc":
      BlockLoad(LMb);
      RepSpec.f3 = LMb.ResLoc;
      RepSpec.f6 = LMb.ResClass;
  end;
  RepSpec.d1 = CurrentDate;
  RepSpec.flags[1]= 0;
  RepSpec.flags[5]= 0;  
  RepSpec.flags[6]= 1;  
  RepSpec.repname = "CheckInRn";
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure RestBookingTool()
begin
  Integer wn,nwn;
  record RestBookingVc RestBookingr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RecordNew(RestBookingr);
  RestBookingToolRemote(RepSpec,RestBookingr);
  nwn = OpenWindow("RestBookingDClass",1,0,"","",RestBookingr);
  DeselectWindow(wn,false);
  WindowFieldGoto(nwn,RestBookingr,-1,"BookStart",true);
  return;
end;

global
procedure StayingTool()
begin
  record RcVc RepSpec;
  Integer wn;
  record RcVc frRepSpec;
  record LocalMachineBlock LMb;

  wn = CurWindow;  
  ReportDefaults(RepSpec,"InHouseRClass");  
  switch (GetWindowFileName(wn)) begin
    case "RcVc":
      switch (GetWindowClass(wn)) begin
        case "OnHotelGuestTouchScreenOClass":
          RepSpec.f1 = "";
          RepSpec.f2 = "";
          RepSpec.f3 = "";
        otherwise
          GetWindowRecord(wn,frRepSpec);
          RepSpec.f2 = frRepSpec.f3;
          RepSpec.f1 = frRepSpec.f6;
      end;
    case "JobVc":
      BlockLoad(LMb);
      RepSpec.f2 = LMb.ResLoc;
      RepSpec.f1 = LMb.ResClass;
  end;
  
  RepSpec.UsedOnly = 0;   
  if (IsEnterprise) then begin 
    RepSpec.flags[4]   = 1;
    RepSpec.UsedOnly = wn;    
  end;
  RepSpec.flags[6] = 1;
  RepSpec.d1         = CurrentDate;
  RepSpec.sStartTime = CurrentTime;
  RepSpec.repname = "InHouseRn";
  RepSpec.Media = mtScreen;  

  RunReport(RepSpec,0);
  return;
end;

// Not used
global
procedure AvailTool()
begin
  record RcVc RepSpec;
  Integer wn;
  record RcVc frRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,frRepSpec);
  ReportDefaults(RepSpec,"TodayResAvailRClass");  
  RepSpec.f4 = frRepSpec.f3;
  RepSpec.f3 = frRepSpec.f6;
  RepSpec.repname = "TodayResAvailRn";
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure CheckOutTool()
begin
  record RcVc RepSpec;
  Integer wn;
  record RcVc frRepSpec;
  record LocalMachineBlock LMb;
  
  wn = CurWindow;
  ReportDefaults(RepSpec,"CheckOutRClass");  
  switch (GetWindowFileName(wn)) begin
    case "RcVc":
      GetWindowRecord(wn,frRepSpec);
      RepSpec.f3 = frRepSpec.f3;
      RepSpec.f6 = frRepSpec.f6;
    case "JobVc":
      BlockLoad(LMb);
      RepSpec.f3 = LMb.ResLoc;
      RepSpec.f6 = LMb.ResClass;
  end;  
  RepSpec.d1= CurrentDate;
  RepSpec.flags[1]= 0;
  RepSpec.flags[5]= 0;  
  RepSpec.repname = "CheckOutRn";
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure PlannedStaysm()
begin 
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  ReportDefaults(RepSpec,"PlannedStayRClass");  
  RepSpec.d1= CurrentDate;
  RepSpec.repname = "PlannedStayRn";
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure RTWFindReservation()
BEGIN
  record RcVc RepSpec;
  Integer wn;
  
  ReportDefaults(RepSpec,"FindJobRClass");  
  wn = OpenWindow("FindJobRClass",1,0,"","",RepSpec);
  DeselectWindow(wn,false);  
  RepSpec.Media = mtScreen;
  RepSpec.repname = "FindJobRn";
  PutWindowRecord(wn,RepSpec);
  RETURN;
END;

global
procedure RTWResTypeAvail()
BEGIN
  record RcVc RepSpec;
  record RcVc frRepSpec;
  Integer wn;
  record LocalMachineBlock LMb;
  
  wn = CurWindow;
  ReportDefaults(RepSpec,"CheckOutRClass");  
  switch (GetWindowFileName(wn)) begin
    case "RcVc":
      GetWindowRecord(wn,frRepSpec);
      RepSpec.sStartDate = frRepSpec.sStartDate;
      RepSpec.sEndDate = AddDay(frRepSpec.sStartDate,1);
      RepSpec.f3 = frRepSpec.f3;
      RepSpec.f6 = frRepSpec.f6;
      RepSpec.f1 = frRepSpec.f1;
      RepSpec.d2 = frRepSpec.d2;
    case "JobVc":
      BlockLoad(LMb);
      RepSpec.f3 = LMb.ResLoc;
      RepSpec.f6 = LMb.ResClass;
  end;  
  RepSpec.Media = mtScreen;
  RepSpec.flags[29] = 1;
  RepSpec.repname = "ResTypeAvailRn";
  RunReport(RepSpec,0);
  RETURN;
END;

//ClientServer
global
procedure ResTypeAvailNewRes(string dblstr,string l,Integer currepwn)
BEGIN
  record JobVc Jobr;
  record RcVc RepSpec;
  Integer wn,pos;
  record ResArtCodeVc ResArtCoder;
  record ResTypeVc ResTyper;
  Record ResUsageVc ResUsager;
  record INVc INr;
  string 255 tstr;
  string 60 objs;
  record HotelBlock htr;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  ResTypeAvailNewResRemote(RepSpec,l,Jobr);
  wn = OpenWindow("JobDClass",1,0,"","",Jobr);  
  RETURN;
END;

/*
global
procedure RTWResTypeAvailPaste(string dblstr,string l,Integer currepwn)
BEGIN
  record RcVc curRepSpec;
  record RcVc RepSpec;
  Integer pos;
  string 255 tstr;

  if (nonblank(l)) then begin    
    GetWindowRecord(currepwn,curRepSpec);
    if (curRepSpec.UsedOnly>0) then begin
      GetWindowRecord(curRepSpec.UsedOnly,RepSpec);
      pos = 0;
      ExtractObj(l,pos,tstr);
      RepSpec.f1 = tstr;
      while (nonblank(tstr)) begin
        ExtractObj(l,pos,tstr);
        RepSpec.f2 = tstr;
        goto LBREAKRTW;
      end;
LBREAKRTW:;
      PutWindowRecord(curRepSpec.UsedOnly,RepSpec);
    end;
  end;
  RETURN;
END;
*/

global
procedure RTWNewRes()
begin
  record JobVc Jobr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RTWNewResRemote(RepSpec,Jobr);
  wn = OpenWindow("JobDClass",1,0,"","",Jobr);  
  WindowFieldGoto(wn,Jobr,-1,"Persons",true);
  return;
end;

global
procedure RTWNewGroupRes()
begin
  record JobVc Jobr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RTWNewResRemote2(RepSpec,Jobr,kReservationTypeGroup);
  wn = OpenWindow("GroupJobDClass",1,0,"","",Jobr);  
  WindowFieldGoto(wn,Jobr,-1,"Persons",true);
  return;
end;

global
procedure RTWNewResWithArgs(Integer compnr,Integer type,string firstres,string lastres,Date startdate,Date enddate)
begin
  record RcVc RepSpec;
  Integer wn,nwn;
  record ResAvVc ResAvr;
  row ResAvVc ResAvrw;
  record JobVc Jobr;

  GetWindowRecord(CurWindow,RepSpec);
  RTWNewResWithArgsRemote(RepSpec,compnr,type,firstres,lastres,startdate,enddate,ResAvr);
  if (MatRowCnt(ResAvr)==1) then begin
    MatRowGet(ResAvr,0,ResAvrw);
    RecordNew(Jobr);
    Jobr.TransDate = ResAvr.TransDate;
    Jobr.EndDate = ResAvr.EndDate;
    Jobr.NrOfDays = ResAvr.NrOfDays;
    Jobr.StartTime = ResAvr.StartTime;
    Jobr.EndTime = ResAvr.EndTime;
    Jobr.VisitPurpose = ResAvr.VisitPurpose;
    Jobr.ResLoc = ResAvr.ResLoc;
    Jobr.ResCode = ResAvrw.ResCode;
    JobPasteResCode(Jobr,Jobr.ResLoc);
    Jobr.ResUsage = ResAvrw.Usage;
    nwn = OpenWindow("JobDClass",1,CurWindow,"","",Jobr);
  end else begin
    nwn = OpenWindow("GroupJobSubOClass",1,CurWindow,"","",ResAvr);
    WindowFieldGoto(nwn,ResAvr,-1,"SourceCode",true);
  end;
  return;
end;

procedure DoNewRentRes(Integer wn,string itemcode)
BEGIN
  record RentResVc RentResr;
  Integer nwn;

  RecordNew(RentResr);
  nwn = OpenWindow("RentResDClass",1,0,"","",RentResr);  
  RETURN;
END;

global
function Boolean ResMonWClassCommandNew(Integer wn)
BEGIN
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  if (RepSpec.Notation==1) then begin
    DoNewRentRes(wn,RepSpec.f1);
  end else begin

    switch (RepSpec.flags[21]) begin
      case kResourceTypeProject:
        NewActivityTool;
      case kResourceTypeDispGroup:
        NewActivityTool;
      otherwise
        RTWNewRes;
    end;
  end;
  ResMonWClassCommandNew = true;
  RETURN;
END;

global
function Boolean RTMonWClassCommandNew(Integer wn)
BEGIN
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  switch (RepSpec.flags[21]) begin
    case kResourceTypeProject:
      NewActivityTool;
    case kResourceTypeDispGroup:
      NewActivityTool;
    otherwise
      RTWNewRes;
  end;
  RTMonWClassCommandNew = true;
  RETURN;
END;

global
function Boolean ResDayWClassCommandNew(Integer wn)
BEGIN
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  if (RepSpec.Notation==1) then begin
    DoNewRentRes(wn,RepSpec.f1);
  end else begin
    RTWNewRes;
  end;
  ResDayWClassCommandNew = true;
  RETURN;
END;

global
procedure RTWNewResAv()
BEGIN
  record ResAvVc ResAvr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  RecordNew(ResAvr);
  GetWindowRecord(wn,RepSpec);
  wn = OpenWindow("ResAvDClass",1,0,"","",ResAvr);  
  RETURN;
END;

global
procedure RTWNewLetter()
BEGIN
  record LetVc Letr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  RecordNew(Letr);
  GetWindowRecord(wn,RepSpec);
  wn = OpenWindow("LetDClass",1,0,"","",Letr);  
  RETURN;
END;

global
updating procedure RTWSplitReservation()
BEGIN
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.long2>0) then begin
    if (RTWSplitReservationRemote(RepSpec.long2)) then begin
      PutWindowRecord(wn,RepSpec);
      UpdateNamedWindow("ResHotelWClass");
    end;
  end;
  RETURN;
END;

global
function Boolean RTMonWClassOnOpenWindow(Integer wn)
begin
  record RcVc RepSpec;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  GetWindowRecord(wn,RepSpec);
  RepSpec.d1 = CurrentDate;
  RepSpec.f3 = LMb.ResLoc;
  RepSpec.f6 = LMb.ResClass;
  PutWindowRecord(wn,RepSpec);
  UpdateNamedWindow("RTMonWClass");
  WindowFieldGoto(wn,RepSpec,-1,"LastVer",true);
//  KeyPadEnter(wn);// makes it painting 2nd
  RTMonWClassOnOpenWindow = true;
  return;
end;

global
function Boolean ResHotelWClassOnOpenWindow(Integer wn)
begin
  record RcVc RepSpec;  

  GetWindowRecord(wn,RepSpec);  
  PutWindowRecord(wn,RepSpec);
  UpdateNamedWindow("ResHotelWClass");
  WindowFieldGoto(wn,RepSpec,-1,"LastVer",true);
  ResHotelWClassOnOpenWindow = true;
  return;
end;

global
function Boolean ResMonWClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  record RcVc RepSpec;
  
  switch (fieldname) begin
    case "d1":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          if (RepSpec.LastVer!=-1) then begin
            RepSpec.d2 = AddDay(RepSpec.d1,RepSpec.LastVer);
          end;
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("ResMonWClass");
        end;
      end;
    case "LastVer":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          if (RepSpec.LastVer!=-1) then begin
            RepSpec.d2 = AddDay(RepSpec.d1,RepSpec.LastVer);
          end;
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("ResMonWClass");
        end;
      end;
    case "d2":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          RepSpec.LastVer = DateDiff(RepSpec.d2,RepSpec.d1);
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("ResMonWClass");
        end;
      end;
    otherwise
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        PutWindowRecord(wn,RepSpec);
        UpdateNamedWindow("ResMonWClass");
      end;
  end;
  ResMonWClassAfterEditField = false;//must be false
  RETURN;
END;  

global
function Boolean ResHotelWClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  record RcVc RepSpec;
  
  switch (fieldname) begin
    case "d1":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          if (RepSpec.LastVer!=-1) then begin
            RepSpec.d2 = AddDay(RepSpec.d1,RepSpec.LastVer);
          end;
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("ResHotelWClass");
        end;
      end;
    case "LastVer":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          if (RepSpec.LastVer!=-1) then begin
            RepSpec.d2 = AddDay(RepSpec.d1,RepSpec.LastVer);
          end;
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("ResHotelWClass");
        end;
      end;
    case "d2":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          RepSpec.LastVer = DateDiff(RepSpec.d2,RepSpec.d1);
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("ResHotelWClass");
        end;
      end;
    otherwise
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        PutWindowRecord(wn,RepSpec);
        UpdateNamedWindow("ResHotelWClass");
      end;
  end;
  ResHotelWClassAfterEditField = false;//must be false
  RETURN;
END;  

global
function Boolean RTMonWClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer ef)
begin
  Boolean res;
  record RcVc RepSpec;

  res = true;
  switch (fieldname) begin
    case "f3": res = UserCanAction("AllowResLocRTMonChanging",true);
    case "f6": res = UserCanAction("AllowResClassRTMonChanging",true);
  end;
  RTMonWClassActiveEditField = res;
  return;
end;

global
function Boolean ResHotelWClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer ef)
begin
  Boolean res;
  record RcVc RepSpec;

  res = true;
  switch (fieldname) begin
    case "f3": res = UserCanAction("AllowResLocRTMonChanging",true);
    case "f6": res = UserCanAction("AllowResClassRTMonChanging",true);
  end;
  ResHotelWClassActiveEditField = res;
  return;
end;

global
function string 40 ResHotelWClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "f1": psname = ResTypeSClassSpecPName(defpsname);
  end;
  ResHotelWClassSpecPasteName = psname;
  return;
end;

global
function string 40 RTMonWClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "f1": psname = ResTypeSClassSpecPName(defpsname);
  end;
  RTMonWClassSpecPasteName = psname;
  return;
end;

global
function string 40 ResMonWClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "f1": psname = ResTypeSClassSpecPName(defpsname);
  end;
  ResMonWClassSpecPasteName = psname;
  return;
end;

global
function Boolean RTMonWClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  record RcVc RepSpec;
  
  switch (fieldname) begin
    case "d1":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          if (RepSpec.LastVer!=-1) then begin
            RepSpec.d2 = AddDay(RepSpec.d1,RepSpec.LastVer);
          end;
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("RTMonWClass");
        end;
      end;
    case "LastVer":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          if (RepSpec.LastVer!=-1) then begin
            RepSpec.d2 = AddDay(RepSpec.d1,RepSpec.LastVer);
          end;
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("RTMonWClass");
        end;
      end;
    case "d2":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblankdate(RepSpec.d1)) then begin
          RepSpec.sStartDate = RepSpec.d1;
          RepSpec.LastVer = DateDiff(RepSpec.d2,RepSpec.d1);
          PutWindowRecord(wn,RepSpec);
          UpdateNamedWindow("RTMonWClass");
        end;
      end;
    case "f1":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        PutWindowRecord(wn,RepSpec);
        UpdateNamedWindow("RTMonWClass");
      end;
    case "f3":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        PutWindowRecord(wn,RepSpec);
        UpdateNamedWindow("RTMonWClass");
      end;
    case "f6":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        PutWindowRecord(wn,RepSpec);
        UpdateNamedWindow("RTMonWClass");
      end;
  end;
  RTMonWClassAfterEditField = false;//must be false
  RETURN;
END;  

global
procedure ResHotelW_M()
begin
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[20] = 0;
  PutWindowRecord(wn,RepSpec);
  UpdateNamedWindow(GetWindowClass(wn));
  return;
end;

global
procedure ResHotelW_W()
begin
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[20] = 1;
  PutWindowRecord(wn,RepSpec);
  UpdateNamedWindow(GetWindowClass(wn));
  return;
end;

global
procedure ResHotelW_D()
begin
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[20] = 2;
  PutWindowRecord(wn,RepSpec);
  UpdateNamedWindow(GetWindowClass(wn));
  return;
end;

global
procedure ResHotelW_H()
begin
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[20] = 3;
  PutWindowRecord(wn,RepSpec);
  UpdateNamedWindow(GetWindowClass(wn));
  return;
end;

global
procedure DayWClass_X()
begin
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[20] = 1;
  PutWindowRecord(wn,RepSpec);
  ReloadUserInterface(true);
  UpdateBrowses("ActVc");
  return;
end;

global
procedure DayWClass_M()
begin
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[20] = 0;
  PutWindowRecord(wn,RepSpec);
  ReloadUserInterface(true);
  UpdateBrowses("ActVc");
  return;
end;

global
function Boolean ResMonWClassZoomWindow(Integer wn,Integer act)
begin
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  RepSpec.flags[20] = RepSpec.flags[20] - act;
  if (RepSpec.flags[20]<0) then begin RepSpec.flags[20] = 0; end;
  if (RepSpec.flags[20]>3) then begin RepSpec.flags[20] = 3; end;
  PutWindowRecord(wn,RepSpec);
  UpdateNamedWindow("ResMonWClass");
  ResMonWClassZoomWindow = false;
  return;
end;

global
procedure ResoucePlannerOffWClassOK()
begin
  CloseWindow(CurWindow);
  return;
end;