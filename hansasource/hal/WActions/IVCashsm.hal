external function val CalculateDiscountPercentage(val,val,val);
external function integer GetSelectedPOSItemRowIndex(integer);
remote updating function Integer CreateMailFromIVCashD(record IVCashVc,var record MailVc,var string,Boolean,string);
external updating function Integer CreateExternalMailFromIVCashD(record IVCashVc,var string,Boolean,string);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external updating function Boolean IVCashVc_PrintToFiscalControlUnit(var record IVCashVc);
external procedure OpenCashDrawer_IVCashVc(record IVCashVc);
//external updating function Boolean DoCreditCardPurchasePOS(string,string,string,string,string,string,string,string,string);
external procedure GetCurUser(var record UserVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external updating procedure IVCashVc_PrintToFiscalPrinter(var record IVCashVc,Boolean);
remote updating function Boolean CreateLateDeliveryORFromIVCash(var record IVCashVc,var record ORVc);
remote updating function Boolean RecordAction_rlIVCashLOK(var record IVCashVc);
external updating procedure RecordActionIVCash_Print2(var record IVCashVc,string,string,Boolean);
remote function Boolean PasteCustInInv(var record IVVc);
remote function Boolean PasteCustInOR(var record ORVc);
remote procedure IVSumup(var record IVVc,Boolean);
remote procedure IVCashSumup(var record IVCashVc,Boolean);

global
updating procedure IVCashToORsm()
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer wn,nwn;
  Integer i,rwcnt;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
    RecordNew(ORr);
    ORr.CustCode = IVCashr.CustCode;
    if (PasteCustInOR(ORr)) then begin end;
    ORr.PayDeal = IVCashr.PayDeal;
    ORr.CreditCard = IVCashr.CreditCard;
    ORr.Objects = IVCashr.Objects;
    ORr.AuthorizationCode = IVCashr.AuthorizationCode;
    ORr.Sum3 = IVCashr.Sum3;
    ORr.Sum1 = IVCashr.Sum1;
    ORr.Sum4 = IVCashr.Sum4;
    ORr.OrdDate = CurrentDate;
    ORr.OurContact = IVCashr.OurContact;
//    ORr.ClientContact = IVCashr.ClientContact;
    ORr.SalesMan = IVCashr.SalesMan;
    ORr.Location = IVCashr.Location;
    ORr.PriceList = IVCashr.PriceList;
    ORr.RebCode = IVCashr.RebCode;
    ORr.LangCode = IVCashr.LangCode;
    ORr.Comment = IVCashr.InvComment;
    ORr.TotQty = IVCashr.TotQty;
    ORr.TotWeight = IVCashr.TotWeight;
    ORr.TotVolume = IVCashr.TotVolume;
    rwcnt = MatRowCnt(IVCashr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      ClearRow(ORr,ORrw,1);
      ORrw.ArtCode = IVCashrw.ArtCode;
      ORrw.Quant = IVCashrw.Quant;
      ORrw.Spec = IVCashrw.Spec;
      ORrw.SerialNr = IVCashrw.SerialNr;
      ORrw.Price = IVCashrw.Price;
      ORrw.vRebate = CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum);
      ORrw.Sum = IVCashrw.Sum;
      ORrw.Objects = IVCashrw.Objects;
      ORrw.BasePrice = IVCashrw.BasePrice;
      ORrw.VATCode = IVCashrw.VATCode;
      ORRw.SalesAcc = IVCashrw.SalesAcc;
      MatRowPut(ORr,i,ORrw);
    end;
    if (RecordStore(ORr,false)) then begin
      CloseWindow(wn);      
      RecordDelete(IVCashr);
      UpdateBrowses("IVCashVc");
      nwn = OpenWindow("ORDClass",0,0,"","",ORr);  
    end;  
  end;
  RETURN;
END;

procedure IVToCredit(string wname)
BEGIN
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer wn,nwn;
  Integer i,rwcnt;
  record ModuleBlock Mb;
  record LocalMachineBlock LMb;
  record UserVc USr;
  record AccBlock ARb;
  Date blankd;
  string 20 curcode;
  val frrate,to1,to2,br1,br2;
  uuid bluuid;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.OKFlag<>0) then begin
    BlockLoad(LMb);
    BlockLoad(Mb);
    BlockLoad(ARb);
    rwcnt = MatRowCnt(IVCashr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      IVCashrw.Quant = -IVCashrw.Quant;
      IVCashrw.Price = -IVCashrw.Price;
      IVCashrw.Sum = -IVCashrw.Sum;
      MatRowPut(IVCashr,i,IVCashrw);
    end;
    IVCashSumup(IVCashr,true);
    IVCashr.SerNr = -1;
    IVCashr.UUID = bluuid;
    IVCashr.OfficialSerNr = "";
    IVCashr.OfficialSerNr2 = "";
    IVCashr.OKFlag = 0;
    IVCashr.CashValue = IVCashr.Sum4;
    IVCashr.RetValue = 0;
    IVCashr.PayDeal = "";
    IVCashr.PayDeal2 = "";
    IVCashr.RecValue = BlankVal;
    IVCashr.RecValue2 = BlankVal;
    IVCashr.ARonTR = ARb.ARonTR;
    IVCashr.TransTime = CurrentTime;
    IVCashr.InvDate = CurrentDate;
    IVCashr.TransDate = CurrentDate;
    IVCashr.PayDate = blankd;
    IVCashr.Prntdf = 0;
    IVCashr.OKFlag = 0;
    IVCashr.NLFlag = 0;
    IVCashr.ExportedFlag = 0;
/*
    
    IVCashr.InclVAT = ARb.BasePriceInclVAT;
    IVCashr.NoTAXonVAT = ARb.NoTAXonVAT;
    IVCashr.TotalwoTAX = ARb.TotalwoTAX;
*/    
    IVCashr.ARAcc = ARb.ARAcc;
    GetCurUser(USr);
    IVCashr.Objects = USr.PersObjx;
    curcode = IVCashr.CurncyCode;
    GetFullCurncyRate(curcode,CurrentDate,frrate,to1,to2,br1,br2);
    IVCashr.CurncyCode = curcode;
    IVCashr.FrRate = frrate;
    IVCashr.ToRateB1 = to1;
    IVCashr.ToRateB2 = to2;
    IVCashr.BaseRate1 = br1;
    IVCashr.BaseRate2 = br2;
    IVCashr.OurContact = USr.CurOurContact;
    if (nonblank(LMb.DefReturnLocation)) then begin
      IVCashr.Location = LMb.DefReturnLocation;
    end;
    if (nonblank(USr.Location)) then begin
      IVCashr.Location = USr.Location;
    end;
    IVCashr.POSSalesNo = -1;
    IVCashr.CashValue = blankval;
    
    if (IVCashr.UpdStockFlag==1) then begin
      // IVCashr.UpdStockFlag = Mb.CredUpdStock;
    end;
    nwn = OpenWindow(wname,1,0,"","",IVCashr);
  end else begin
    MessageBox(2072,"");
  end;
  RETURN;
end;

global
procedure IVCashToCredit()
BEGIN
  IVToCredit("IVCashDClass");
  RETURN;
END;

global
procedure POSIVCashToCredit()
BEGIN
  IVToCredit("POSPIVCashDClass");
  RETURN;
END;

global
updating procedure IVCashToIVDsm()
BEGIN
  Integer wn,nwn;
  record IVVc IVr;//IVView
  row IVVc IVrw;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
    RecordNew(IVr);
    IVr.CustCode = IVCashr.CustCode;
    if (PasteCustInInv(IVr)) then begin
    end;
    IVr.InvDate = IVCashr.InvDate;
//    IVr.PayDate = IVCashr.PayDate;
    rwcnt = MatRowCnt(IVCashr);
    IVr.Addr0 = IVCashr.Addr0;
    IVr.Addr1 = IVCashr.Addr1;
    IVr.Addr2 = IVCashr.Addr2;
    IVr.Addr3 = IVCashr.Addr3;
    IVr.OurContact = IVCashr.OurContact;
    IVr.FiscalFlag = IVCashr.FiscalFlag;    
    IVr.ClientContact = IVCashr.ClientContact;
    IVr.ExportFlag = 0;
//    IVr.PayDeal = IVCashr.PayDeal;
    IVr.OrderNr = -1;
    IVr.Prntdf = 0;
    IVr.OKFlag = 0;
//    IVr.pdays = IVCashr.pdays;
//    IVr.pdvrebt = IVCashr.pdvrebt;
//    IVr.pdrdays = IVCashr.pdrdays;
    IVr.CustCat = IVCashr.CustCat;
//    IVr.pdComment = IVCashr.pdComment;
    IVr.InvType = kInvoiceTypeNormal;
    IVr.PriceList = IVCashr.PriceList;
    IVr.Objects = IVCashr.Objects;
    IVr.InclVAT = IVCashr.InclVAT;
    IVr.NoTAXonVAT = IVCashr.NoTAXonVAT;
    IVr.TotalwoTAX = IVCashr.TotalwoTAX;
//    IVr.ARAcc = IVCashr.ARAcc;
    IVr.InvComment = IVCashr.InvComment;
    IVr.CredInv = -1;
    IVr.CredMark = "";
    IVr.SalesMan = IVCashr.SalesMan;
    IVr.ToRateB1 = IVCashr.ToRateB1;
    IVr.TransDate = IVCashr.TransDate;
    IVr.CurncyCode = IVCashr.CurncyCode;
    IVr.LangCode = IVCashr.LangCode;
    IVr.LastRemndr = -1;
//    IVr.LastRemDate = IVCashr.TransDate;
    IVr.Sign = CurrentUser;
//    IVr.FrPrice = IVCashr.FrPrice;
//    IVr.FrBase = IVCashr.FrBase;
//    IVr.FrItem = IVCashr.FrItem;
//    IVr.FrVATCode = IVCashr.FrVATCode;
//    IVr.FrObjects = IVCashr.FrObjects;
//    IVr.OrgCust = IVCashr.OrgCust;
//    IVr.FrGP = IVCashr.FrGP;
//    IVr.FrGPPercent = IVCashr.FrGPPercent;
    IVr.Sum0 = IVCashr.Sum0;
    IVr.Sum1 = IVCashr.Sum1;
    IVr.Sum2 = IVCashr.Sum2;
    IVr.Sum3 = IVCashr.Sum3;
    IVr.Sum4 = IVCashr.Sum4;
    IVr.Location = IVCashr.Location;
    IVr.TAX1Sum = IVCashr.TAX1Sum;
    IVr.CustVATCode = IVCashr.CustVATCode;
    IVr.RebCode = IVCashr.RebCode;
    IVr.ARonTR = IVCashr.ARonTR;
    IVr.CustOrdNr = IVCashr.CustOrdNr;
    IVr.ExportedFlag = 0;
    IVr.BaseSum4 = IVCashr.BaseSum4;
    IVr.FrRate = IVCashr.FrRate;
    IVr.ToRateB2 = IVCashr.ToRateB2;
    IVr.BaseRate1 = IVCashr.BaseRate1;
    IVr.BaseRate2 = IVCashr.BaseRate2;
    IVr.TotGP = IVCashr.TotGP;
    IVr.LocOKNr = blankval;
    IVr.Invalid = 0;
    IVr.CreditCard = IVCashr.CreditCard;
    IVr.AuthorizationCode = IVCashr.AuthorizationCode;
    IVr.SVONr = -1;
    IVr.TotQty = IVCashr.TotQty;
    IVr.TotWeight = IVCashr.TotWeight;
    IVr.TotVolume = IVCashr.TotVolume;
    IVr.InvAddr3 = IVCashr.InvAddr3;
    IVr.InvAddr4 = IVCashr.InvAddr4;
    IVr.DelAddrCode = IVCashr.DelAddrCode;
    IVr.Region = IVCashr.Region;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      ClearRow(IVr,IVrw,1);
      IVrw.ArtCode = IVCashrw.ArtCode;
      IVrw.Quant = IVCashrw.Quant;
      IVrw.Price = IVCashrw.Price;
      IVrw.Sum = IVCashrw.Sum;
      IVrw.vRebate = CalculateDiscountPercentage(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum);
      IVrw.SalesAcc = IVCashrw.SalesAcc;
      IVrw.Objects = IVCashrw.Objects;
      IVrw.OrdRow = -1;
      IVrw.BasePrice = IVCashrw.BasePrice;
      IVrw.rowGP = IVCashrw.rowGP;
      IVrw.Spec = IVCashrw.Spec;
      IVrw.VATCode = IVCashrw.VATCode;
      IVrw.Recepy = IVCashrw.Recepy;
      IVrw.MotherArtCode = IVCashrw.MotherArtCode;
      IVrw.RecipeQuant = IVCashrw.RecipeQuant;
      IVrw.SerialNr = IVCashrw.SerialNr;
      IVrw.PriceFactor = IVCashrw.PriceFactor;
      IVrw.CUPNr = -1;
      IVrw.Coefficient = IVCashrw.Coefficient;
      IVrw.UnitCode = IVCashrw.UnitCode;
      IVrw.UnitFactQuant = IVCashrw.UnitFactQuant;
      IVrw.UnitFactPrice = IVCashrw.UnitFactPrice;
      IVrw.UnitXval = IVCashrw.UnitXval;
      IVrw.UnitYval = IVCashrw.UnitYval;
      IVrw.UnitZval = IVCashrw.UnitZval;
      MatRowPut(IVr,i,IVrw);
    end;
    IVSumup(IVr,true);
    IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,IVr.LangCode);
    if (RecordStore(IVr,false)) then begin
      if (WindowState(wn)==Rs_insert) then begin
        RecordNew(IVCashr);
        PutWindowRecord(wn,IVCashr);
      end else begin
        RecordRemove(IVCashr);
      end;
      CloseWindow(wn);
      UpdateBrowses("IVCashVc");
      nwn = OpenWindow("IVDClass",0,0,"","",IVr);  
    end;  
  end;
  RETURN;
END;

global
updating procedure PrintIVCashL(Integer wn,Boolean previewf)
BEGIN
  record IVCashVc IVCashr;
  Integer i;
  string 255 docname;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(IVCashr,wn,i)) begin
    switch (IVCashr.InvType) begin
      case kPOSInvoiceTypeCredit: docname = "InvCashRetForm";
      otherwise docname = "InvCashForm";
    end;
    RecordActionIVCash_Print2(IVCashr,docname,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
updating function Boolean IVCashDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record IVCashVc IVCashr;
  Integer normalmode,tf;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  string 255 docname;

  BlockLoad(LMb); 
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVCashr);  
  switch (IVCashr.InvType) begin
    case kPOSInvoiceTypeCredit: docname = "InvCashRetForm";
    otherwise docname = "InvCashForm";
  end;
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalControlUnit,40,LMb.LocalMachineCode,LSPDr)==false) then begin    
    if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
      RecordActionIVCash_Print2(IVCashr,docname,false,true);
    end else begin
      tf = IVCashr.OKFlag;
      if (previewf==false) then begin
        IVCashr.OKFlag = 0;
      end else begin
        IVCashr.OKFlag = 1;
      end;
      if (HasLocalization("PRT")) then begin
        if (IVCashr.OKFlag==0) then begin
          MessageBox(23637,"");
        end else begin
          if (PrintDocument(IVCashr,docname,true)) then begin end;
        end;
      end else begin      
        if (PrintDocument(IVCashr,docname,true)) then begin end;
      end;
      IVCashr.OKFlag = tf;  
    end;
  end;
  IVCashDClassPrint = true;
  return;
end;

global
updating procedure OKIVCashLsm()
BEGIN
  Integer wn;
  record IVCashVc IVCashr;
  LongInt i;

  wn = CurWindow;
  if (UserCanAction("InvOK",true)) then begin
    i = 1;
    while (GetRecordFromBrowse(IVCashr,wn,i)) begin
      if (RecordAction_rlIVCashLOK(IVCashr)) then begin      
      end;
      i = i + 1;
    end;  
    UpdateBrowses("IVCashVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"InvOK"));
  end;
  
  RETURN;
END;

global
updating procedure OKIVCashDsm()
begin
  Integer wn;
  record IVCashVc IVCashr;
  LongInt i;

  wn = CurWindow;
  if (UserCanAction("InvOK",true)) then begin
    GetWindowRecord(wn,IVCashr);
    if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
      IVCashr.OKFlag = 1;
      PutWindowRecord(wn,IVCashr);
      if (WindowDoOK(wn,0)) then begin
      end;
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"InvOK"));
  end;  
  return;
end;

global
updating procedure IVCashToLateDelivORsm()
BEGIN
  record IVCashVc IVCashr;
  record ORVc ORr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin
    GetWindowRecord(wn,IVCashr);
    if ((IVCashr.OKFlag!=0) and (IVCashr.OrderNr==-1)) then begin
      if (CreateLateDeliveryORFromIVCash(IVCashr,ORr)) then begin
        CloseWindow(wn);      
        nwn = OpenWindow("ORDClass",1,0,"","",ORr);  
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure PrintToFiscPrntIVCashDsm()
BEGIN
  Integer wn;
  record IVCashVc IVCashr;
  record IVCashVc oldIVCashr;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,IVCashr);
    if (UserCanAction("PrintToFiscPrnt",true)) then begin
      if (IVCashr.FiscalFlag!=0) then begin
/*      
        if (IVCashr.Prntdf!=0) then begin
          IVCashr.Prntdf = 0;
          RecordCopy(oldIVCashr,IVCashr);
          if (RecordUpdate(oldIVCashr,IVCashr,false)==0) then begin end;
        end;
*/        
        IVCashVc_PrintToFiscalPrinter(IVCashr,true);
        if (IVCashVc_PrintToFiscalControlUnit(IVCashr)) then begin
          PutWindowRecord(wn,IVCashr);
        end;
      end else begin
        if (IVCashVc_PrintToFiscalControlUnit(IVCashr)) then begin
          PutWindowRecord(wn,IVCashr);
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"PrintToFiscPrnt"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

/*
not used
global 
updating procedure PayIVCashDsm()
begin
  Integer wn;
  record IVCashVc IVCashr;
  string 255 tstr,tstr2;
  record CYBlock CYRec;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin
    BlockLoad(CYRec);
    DeselectWindow(wn,false);  
    GetWindowRecord(wn,IVCashr);

    tstr = ValToString(IVCashr.Sum4,M4Val,"","",0);
    tstr2 = IVCashr.InvComment;
    if (blank(tstr2)) then begin tstr2 = CYRec.CompName; end;
  //  if (DoCreditCardPurchasePOS(IVCashr.SerNr,"Test A/S","Test A/S",tstr,"VISA","4925000000000004","06","11","123")) then begin
    if (DoCreditCardPurchasePOS(IVCashr.SerNr,tstr2,CYRec.CompName,tstr,"VISA","4925000000000004","06","11","123")) then begin
    end;
  end;
  RETURN;
END;

*/

updating function Boolean IVCashFinish(Integer wn,var record IVCashVc IVCashr)
begin
  Integer nwn;
  Boolean res;
  record IVCashVc IVCash2r;
  string 255 windowclass;

  res = false;
  if (IVCashr.OKFlag!=0) then begin goto LIVCashFinish; end;
  if (IVCashr.Invalid!=0) then begin goto LIVCashFinish; end;
  if (WindowState(wn)==0) then begin
    PutWindowRecord(wn,IVCashr);
  end;
  windowclass = GetWindowClass(wn);
  IVCashSumup(IVCashr,true);
  IVCashr.OKFlag = 1;
  PutWindowRecord(wn,IVCashr);
  if (WindowDoOK(wn,0)) then begin
    GetWindowRecord(wn,IVCashr);
    UpdateBrowses("IVCashVc");
    OpenCashDrawer_IVCashVc(IVCashr);
    CloseWindow(wn);
    RecordNew(IVCash2r);
    nwn = OpenWindow(windowclass,1,0,"","",IVCash2r);
    WindowFieldGoto(nwn,IVCash2r,-1,"CustCode",true);
    res = true;
  end else begin
    IVCashr.OKFlag = 0;
    PutWindowRecord(wn,IVCashr);
  end;
LIVCashFinish:;
  IVCashFinish = res;
  return;
end;

global
updating procedure IVCashFinishAndPrint()
begin
  Integer wn;
  record IVCashVc IVCashr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.Invalid==0) then begin
    if (IVCashr.OKFlag!=0) then begin
//      RestAccReceiptPrint(IVCashr,true,false);
    end else begin    
      if (IVCashFinish(wn,IVCashr)) then begin
  //      RestAccReceiptPrint(IVCashr,true,true);
      end;
    end;
  end;
  return;
end;

procedure OpenVatMatrixIVCash(LongInt arownr)
begin
  record TaxMatrixVc TMr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  rowno = arownr;
  if (rowno<0) then begin
    rowno = WindowActiveRow(wn);
  end;
  
  if (rowno>=0) then begin
    MatRowGet(IVCashr,rowno,IVCashrw);
    UnpackRowFieldMatrix(IVCashrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(IVCashr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
procedure OpenVatMatrixIVCashDsm()
begin
  OpenVatMatrixIVCash(-1);
  return;
end;

global
procedure IVCashDClassTouchScreenOpenTaxMatrix()
begin
  OpenVatMatrixIVCash(GetSelectedPOSItemRowIndex(CurWindow));
  return;
end;

global 
updating procedure CreateMailFromIVCashDsm()
begin
  Integer wn,nwn;
  record MailVc Mailr;
  record IVCashVc IVCashr;
  Integer err;
  string 255 tstr,docname;
  record MailSettingsBlock MSb;
  Boolean testf;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normalstate
    testf = true;
    GetWindowRecord(wn,IVCashr); 
    if (testf) then begin
      BlockLoad(MSb);
      if (MSb.UseExternalMail) then begin
        err = CreateExternalMailFromIVCashD(IVCashr,tstr,true,WindowFormName(wn));      
      end else begin
        err = CreateMailFromIVCashD(IVCashr,Mailr,tstr,true,WindowFormName(wn));
        if (err!=0) then begin
          MessageBox(err,": " & tstr);
        end else begin
          nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
        end;
      end;
    end;
  end;
  return;
end;
