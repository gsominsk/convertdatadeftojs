remote procedure AutoDistributeSums(var record IPVc,Integer);
remote function Boolean PasteCredManInIP(var record IPVc,Integer,LongInt,LongInt,string);
remote procedure IPVc_PasteRecVal(var record IPVc,Integer);
remote procedure IPVc_PasteRecCurncy(var record IPVc,Integer);
remote procedure IPVc_PasteTransDate(var record IPVc);
remote procedure IPVc_PasteBankCurncy(var record IPVc,Integer);
remote function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);
remote function Boolean PasteInvInIPr(var record IPVc,row IPVc,Integer,Integer);
remote procedure IPPastePayMode(var record IPVc);
external procedure IPSumup(var record IPVc);
external function Boolean IPDClassCustNameEFAfter(Integer,Integer,Integer,Boolean);
external procedure IPPasteRowPayMode(var row IPVc);

//ROWS
function Boolean CredManIPDClassInvoiceNrEFAfter(Integer wn, Integer rownr,Integer changed,Integer fn)
BEGIN
  Boolean res,testf,installmentf;
  record IPVc IPr;
  row IPVc IPrw;
  val chk;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,IPr);
    if (rownr>-1) then begin
      MatRowGet(IPr,rownr,IPrw);
      switch (IPrw.stp) begin
        case 1: 
          testf = PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf);
          if (installmentf) then begin
            MessageBox(20772,"");
          end;
        case 5: testf = PasteInvInIPr(IPr,IPrw,rownr,5);
        case 6: testf = PasteInvInIPr(IPr,IPrw,rownr,6);
        case 7: testf = PasteInvInIPr(IPr,IPrw,rownr,7);
      end;
      if (testf) then begin
        PutWindowRecord(wn,IPr);    
      end else begin
        Beep;
      end;
    end;
  end;
  CredManIPDClassInvoiceNrEFAfter = res;
  RETURN;
END;


function Boolean CredManIPDClassBankCurncyEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record IPVc IPr;

  res = true;
  if ((changed!=0) and (rownr>-1)) then begin
    GetWindowRecord(wn,IPr);
    IPVc_PasteBankCurncy(IPr,rownr);
    PutWindowRecord(wn,IPr);
  end;
  CredManIPDClassBankCurncyEFAfter = res;
  RETURN;
END;

function Boolean CredManIPDClassTransDateEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record IPVc IPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,IPr);
    IPVc_PasteTransDate(IPr);
    PutWindowRecord(wn,IPr);
  end;
  CredManIPDClassTransDateEFAfter = res;
  RETURN;
END;

function Boolean CredManIPDClassPayModeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record IPVc IPr;
  row IPVc IPrw;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,IPr);
    if (rownr<0) then begin
      IPPastePayMode(IPr);
    end else begin
      MatRowGet(IPr,rownr,IPrw);
      IPPasteRowPayMode(IPrw);
      MatRowPut(IPr,rownr,IPrw);
    end;
    PutWindowRecord(wn,IPr);
  end;
  CredManIPDClassPayModeEFAfter = res;
  RETURN;
END;

function Boolean CredManIPDClassCustCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record IPVc IPr;
  row IPVc IPrw;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,IPr);
    MatRowGet(IPr,rownr,IPrw);
    if (PasteCredManInIP(IPr,rownr,-1,IPrw.InvoiceNr,IPrw.CustCode)) then begin
      PutWindowRecord(wn,IPr);
    end else begin
      Beep;
    end;
  end;
  CredManIPDClassCustCodeEFAfter = res;
  RETURN;
END;

function Boolean CredManIPDClassCredManNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record IPVc IPr;
  row IPVc IPrw;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,IPr);
    MatRowGet(IPr,rownr,IPrw);
    if (PasteCredManInIP(IPr,rownr,IPrw.CredManNr,IPrw.InvoiceNr,"")) then begin
      PutWindowRecord(wn,IPr);
    end else begin
      Beep;
    end;
  end;
  CredManIPDClassCredManNrEFAfter = res;
  RETURN;
END;

function Boolean CredManIPDClassRecCurncyEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record IPVc IPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,IPr);
    IPVc_PasteRecCurncy(IPr,rownr);
    PutWindowRecord(wn,IPr);
  end;
  CredManIPDClassRecCurncyEFAfter = res;
  RETURN;
END;

function Boolean CredManIPDClassRecValEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record IPVc IPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,IPr);
    AutoDistributeSums(IPr,rownr);
    PutWindowRecord(wn,IPr);
  end;
  CredManIPDClassRecValEFAfter = res;
  RETURN;
END;

global
function Boolean CredManIPDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CredManNr": res = CredManIPDClassCredManNrEFAfter(wn,rownr,changed!=0);
    case "CustCode": res = CredManIPDClassCustCodeEFAfter(wn,rownr,changed!=0);
    case "InvoiceNr": res = CredManIPDClassInvoiceNrEFAfter(wn,rownr,changed,fn);
    case "BankCurncy": res = CredManIPDClassBankCurncyEFAfter(wn,rownr,changed);
    case "TransDate": res = CredManIPDClassTransDateEFAfter(wn,changed!=0);
    case "PayMode": res = CredManIPDClassPayModeEFAfter(wn,rownr,changed!=0);
    case "RecCurncy": res = CredManIPDClassRecCurncyEFAfter(wn,rownr,changed!=0);
    case "RecVal": res = CredManIPDClassRecValEFAfter(wn,rownr,changed!=0);
  end;
  CredManIPDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean CredManIPDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IPVc IPr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IPr);
    if (IPr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IPr);
    if (IPr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
//if (IPButActSpec(IPp,IP2p,WindowState(wn),*(Integer*)ap2)==false) then res = false;//I think it is not needed
  CredManIPDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean CredManIPDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record IPVc IPr;
  
  res = true;
  GetWindowRecord(wn,IPr);
  if (IPr.OKFlag!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;    
  end;
  CredManIPDClassUpdateTest = res;
  RETURN;
END;

global
function Boolean CredManIPDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record IPVc IPr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,IPr);    
    IPSumUp(IPr);
    PutWindowRecord(wn,IPr);    
  end;
  CredManIPDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean CredManIPDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record IPVc IPr;
  Boolean res;
  Integer updatemode;

  res = true;
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IPr);
    if (IPr.ReceivedFlag!=0) then begin res = false; end;
    if (IPr.OKFlag!=0) then begin res = false; end;
  end;
  CredManIPDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean CredManIPDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record IPVc IPr;
  Boolean res;
  Integer updatemode;

  res = true;
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IPr);
    if (IPr.ReceivedFlag!=0) then begin res = false; end;
    if (IPr.OKFlag!=0) then begin res = false; end;
  end;
  CredManIPDClassOverStrikeTest = res;
  return;
end;

global
function Boolean CredManIPDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record IPVc IPr;
  record CYBlock CYRec;
  
  res = true;
  if (wnst!=Rs_update) then begin
    GetWindowRecord(wn,IPr);
  end else begin
    GetPrevWindowRecord(wn,IPr);
  end;
  if (IPr.OKFlag!=0) then begin
    res = false;
  end;
LCredManIPDClassActiveEditField:;  
  CredManIPDClassActiveEditField = res;
  RETURN;
END;

