procedure QCTestRulesTClassSpecPasteNameITCode(Integer wn,var string psname)
begin
  record QCTestRulesBlock QCTRb;
  row QCTestRulesBlock QCTRbw;
  Integer rownr;

  GetWindowRecord(wn,QCTRb);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(QCTRb,rownr,QCTRbw);
  end;
  switch (QCTRbw.CodeType) begin
    case 0: psname = "ITSClass";
    case 1: psname = "INSClass";
    otherwise psname = "";
  end;
  return;
end;

global
function string 40 QCTestRulesTClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ITCode": QCTestRulesTClassSpecPasteNameITCode(wn,psname);
  end;
  QCTestRulesTClassSpecPasteName = psname;
  return;
end;

function Boolean QCTestRulesTClassITCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record QCTestRulesBlock QCTRb;
  row QCTestRulesBlock QCTRbw;
  Integer rownr;
  record ITVc ITr;
  record INVc INr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,QCTRb);
    MatRowGet(QCTRb,rownr,QCTRbw);
    switch (QCTRbw.CodeType) begin
      case 0: 
        ITr.Code = QCTRbw.ITCode;
        if (ReadFirstMain(ITr,1,true)) then begin
          QCTRbw.Comment = ITr.Comment;
        end;
      case 1: 
        INr.Code = QCTRbw.ITCode;
        if (ReadFirstMain(INr,1,true)) then begin
          QCTRbw.Comment = INr.Name;
        end;
    end;
    MatRowPut(QCTRb,rownr,QCTRbw);
    PutWindowRecord(wn,QCTRb);        
  end;
  QCTestRulesTClassITCodeEFAfter = res;
  return;
end;

global
function Boolean QCTestRulesTClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ITCode": res = QCTestRulesTClassITCodeEFAfter(wn,changed!=0);
  end;
  QCTestRulesTClassAfterEditField = res;
  return;
end;

