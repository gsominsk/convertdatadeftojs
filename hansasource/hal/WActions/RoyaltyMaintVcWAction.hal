remote function Boolean RoyaltyMaintVc_PasteArtCode(var record RoyaltyMaintVc,Integer,var string);
remote function Boolean RoyaltyMaintVc_PasteQuant(var record RoyaltyMaintVc,Integer);
remote function Boolean RoyaltyMaintDchrsum(var record RoyaltyMaintVc,Integer,Integer,Boolean);
remote function Boolean RoyaltyMaintVc_PasteCOCUServiceNr(var record RoyaltyMaintVc,Integer);
remote procedure RoyaltyMaintSumup(var record RoyaltyMaintVc);

global
procedure RoyaltyRepSumup(var record RoyaltyRepVc RoyaltyRepr)
begin
  row RoyaltyRepVc RoyaltyReprw;
  Integer i,rwcnt;

  RoyaltyRepr.Sum = blankval;
  RoyaltyRepr.ActualSum = blankval;
  RoyaltyRepr.RoyaltySum = blankval;
  rwcnt = MatRowCnt(RoyaltyRepr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(RoyaltyRepr,i,RoyaltyReprw);
    RoyaltyRepr.Sum = RoyaltyRepr.Sum + RoyaltyReprw.Sum;
    RoyaltyRepr.ActualSum = RoyaltyRepr.ActualSum + RoyaltyReprw.ActualSum;
    RoyaltyRepr.RoyaltySum = RoyaltyRepr.RoyaltySum + RoyaltyReprw.Royalty;
  end;
  return;
end;

global
procedure RoyaltyMaintSumup(var record RoyaltyMaintVc RMr)
begin
  row RoyaltyMaintVc RMrw;
  Integer i,rwcnt;

  RMr.Sum = blankval;
  RMr.ActualSum = blankval;
  RMr.RoyaltySum = blankval;
  rwcnt = MatRowCnt(RMr);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(RMr,i,RMrw);
    if (RMrw.ovst==0) then begin
      RMr.Sum = RMr.Sum + RMrw.Sum;
      RMr.ActualSum = RMr.ActualSum + RMrw.ActualSum;
      RMr.RoyaltySum = RMr.RoyaltySum + RMrw.Royalty;
    end;
  end;
  return;
end;

global
procedure RoyaltyMaintDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  duplOK = false;
  newOK = false;
  return;
end;

global
procedure RoyaltyMaintLClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  duplOK = false;
  newOK = false;
  return;
end;

function Boolean RoyaltyMaintDClassCOCUServiceNrEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
  row RoyaltyMaintVc RoyaltyMaintrw;
  record COCUServiceVc COCUServicer;
  
  res = true;
  if (changedf) then begin
    res = false;
    GetWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintVc_PasteCOCUServiceNr(RoyaltyMaintr,rownr)) then begin
      PutWindowRecord(wn,RoyaltyMaintr);
      res = true;
    end;
  end;
  RoyaltyMaintDClassCOCUServiceNrEFAfter = res;
  return;
end;

function Boolean RoyaltyMaintDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
  string 200 inwarn;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintVc_PasteArtCode(RoyaltyMaintr,rownr,inwarn)) then begin
      if (nonblank(inwarn)) then begin
        MessageBox(0,inwarn)
      end;
      PutWindowRecord(wn,RoyaltyMaintr);
    end else begin
      Beep;
    end;
  end;
  RoyaltyMaintDClassArtCodeEFAfter = res;
  return;
end;

function Boolean RoyaltyMaintDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
  string 200 inwarn;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintVc_PasteQuant(RoyaltyMaintr,rownr)) then begin
      PutWindowRecord(wn,RoyaltyMaintr);
    end else begin
      Beep;
    end;
  end;
  RoyaltyMaintDClassQuantEFAfter = res;
  return;
end;

function Boolean RoyaltyMaintDClassvRebateEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
  record GeneralOptionBlock GenOptRec;

  res = true;
  if (changedf) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintDchrsum(RoyaltyMaintr,rownr,GenOptRec.UseDiscount,false)) then begin
//      RoyaltyMaintDchsum(RoyaltyMaintr,rownr);
    end;
    RoyaltyMaintSumup(RoyaltyMaintr);
    PutWindowRecord(wn,RoyaltyMaintr);
  end;
  RoyaltyMaintDClassvRebateEFAfter = res;
  return;
end;

function Boolean RoyaltyMaintDClassRoyPercEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
  record GeneralOptionBlock GenOptRec;
  
  if (changed!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintDchrsum(RoyaltyMaintr,rownr,GenOptRec.UseDiscount,false)) then begin
//      RoyaltyMaintDchsum(RoyaltyMaintr,rownr);
    end;
    RoyaltyMaintSumup(RoyaltyMaintr);
    PutWindowRecord(wn,RoyaltyMaintr);
  end;
  RoyaltyMaintDClassRoyPercEFAfter = res;
  return;
end;

global
function Boolean RoyaltyMaintDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "COCUServiceNr": res = RoyaltyMaintDClassCOCUServiceNrEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = RoyaltyMaintDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "Quant": res = RoyaltyMaintDClassQuantEFAfter(wn,fn,rownr,changed);
    case "vRebate": res = RoyaltyMaintDClassvRebateEFAfter(wn,fn,rownr,changed);
    case "ApprovedvRebate": res = RoyaltyMaintDClassvRebateEFAfter(wn,fn,rownr,changed);
    case "RoyaltyPercentage": res = RoyaltyMaintDClassRoyPercEFAfter(wn,fn,rownr,changed);
  end;
  RoyaltyMaintDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean RoyaltyMaintDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
  
  res = true;
  if (fieldname=="CUServiceNr") then begin
    res = false;
  end;
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintr.Invalid!=0 or RoyaltyMaintr.Approved!=0) then begin
      res = false;
    end else begin
      if (RoyaltyMaintr.OKFlag!=0) then begin
        res = false;
      end;
      switch (fieldname) begin
        case "Price":
          if (RoyaltyMaintr.OKFlag==0) then begin
            res = UserCanAction("RoyaltyAdmin",false);
          end;
        case "ActualSum": res = UserCanAction("RoyaltyAdmin",false);
        case "Royalty": res = false;
        case "ApprovedvRebate": res = UserCanAction("RoyaltyAdmin",false);
      end;
    end;
  end else begin
    GetWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintr.Invalid!=0 or RoyaltyMaintr.Approved!=0) then begin
      res = false;
    end else begin
      if (RoyaltyMaintr.OKFlag!=0) then begin
        res = false;
      end;
      switch (fieldname) begin
        case "Price":
          if (RoyaltyMaintr.OKFlag==0) then begin
            res = UserCanAction("RoyaltyAdmin",false);
          end;
        case "ActualSum": res = UserCanAction("RoyaltyAdmin",false);
        case "Royalty": res = false;
        case "ApprovedvRebate": res = UserCanAction("RoyaltyAdmin",false);
      end;
    end;
  end;
  RoyaltyMaintDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean RoyaltyMaintDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record RoyaltyMaintVc RoyaltyMaintr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,RoyaltyMaintr);    
    RoyaltyMaintSumup(RoyaltyMaintr);
    PutWindowRecord(wn,RoyaltyMaintr);    
  end;
  RoyaltyMaintDClassOnOverStrike = true;
  return;
end;

global
function Boolean RoyaltyMaintDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
 
  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintr.OKFlag!=0) then begin
      res = false;
    end;
    if (RoyaltyMaintr.Approved!=0) then begin
      res = false;
    end else begin
      if (UserCanAction("UnOKAll",false) /*or UserCanAction("RoyaltyAdmin",false)*/) then begin
        res = true;
      end; 
    end;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RoyaltyMaintr);
    if (RoyaltyMaintr.OKFlag!=0) then begin
      res = false;
    end;
    if (RoyaltyMaintr.Approved!=0) then begin
      res = false;
    end else begin
      if (UserCanAction("UnOKAll",false) /*or UserCanAction("RoyaltyAdmin",false)*/) then begin
        res = true;
      end; 
    end;
  end;  
  RoyaltyMaintDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean RoyaltyMaintDClassApprovedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record RoyaltyMaintVc RoyaltyMaintr;
 
  res = false;
  if (UserCanAction("RoyaltyRepApprove",false)) then begin
    res = true;
    if (WindowState(wn)==Rs_update) then begin
      GetPrevWindowRecord(wn,RoyaltyMaintr);
      if (RoyaltyMaintr.Approved!=0) then begin
        res = false;
//        if (UserCanAction("UnOKAll",false)) then begin
//          res = true;
//        end;
      end;
    end;
    if (WindowState(wn)==Rs_normal) then begin
      GetWindowRecord(wn,RoyaltyMaintr);
      if (RoyaltyMaintr.Approved!=0) then begin
        res = false;
//        if (UserCanAction("UnOKAll",false)) then begin
//          res = true;
//        end;
      end;
    end;
  end;  
  RoyaltyMaintDClassApprovedButtonAction = res;
  return;
end;

global 
function Boolean RoyaltyMaintDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record RoyaltyMaintVc RoyaltyMaintr;
  Boolean res;

  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,RoyaltyMaintr);
      if (RoyaltyMaintr.Invalid!=0 or RoyaltyMaintr.OKFlag!=0 or RoyaltyMaintr.Approved!=0) then begin res = false; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,RoyaltyMaintr);
      if (RoyaltyMaintr.Invalid!=0 or RoyaltyMaintr.OKFlag!=0 or RoyaltyMaintr.Approved!=0) then begin res = false; end;
  end;
  
  RoyaltyMaintDClassDeleteRowTest = res;
  
  return;
end;

global 
function Boolean RoyaltyMaintDClassInsertRowTest(Integer wn, Integer rownr)
begin
  RoyaltyMaintDClassInsertRowTest = RoyaltyMaintDClassDeleteRowTest(wn,rownr);
  return;
end;

global
updating procedure RoyaltyMaintInvoicesm()
begin
/*  record RoyaltyRepVc RoyaltyRepr;
  record IVVc IVr;
  Integer wn,r,nwn;
  record RoyaltyPrcBlock RPb;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RoyaltyRepr);
    BlockLoad(RPb);
    if ((RoyaltyRepr.OKFlag!=0) and (RoyaltyRepr.Approved!=0)) then begin
      if (UserCanAction("RoyaltyRepToIV",false)) then begin
        r = RecordAction_raRoyaltyRepToIV(IVr,RoyaltyRepr.SerNr,RPb);
        if (r!=-1) then begin
          if (MatRowCnt(IVr)!=0) then begin
            MessageBox(0,"Invoice was created in proper company with serial number " & IVr.SerNr);
          end else begin
            Beep;
          end;
        end else begin
          Beep;
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"RoyaltyRepToIV"));
      end;
    end else begin
      MessageBox(0,"Royalty Report must be approved");
    end;
  end else begin
    Beep;
  end;*/
  return;
end;

global
procedure RoyaltyMaintRefreshPercentagesm()
begin
  record GeneralOptionBlock GenOptRec;
  record RoyaltyMaintVc RoyaltyMaintr;
  integer wn;
  integer i,rwcnt;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RoyaltyMaintr);

  if (RoyaltyMaintr.Approved==0) then begin
    BlockLoad(GenOptRec);

    rwcnt = MatRowCnt(RoyaltyMaintr);
    for (i=0;i<rwcnt;i=i+1) begin
      if (RoyaltyMaintDchrsum(RoyaltyMaintr,i,GenOptRec.UseDiscount,true)) then begin
//      RoyaltyMaintDchsum(RoyaltyMaintr,i);
      end;
    end;
    RoyaltyMaintSumup(RoyaltyMaintr);
    PutWindowRecord(wn,RoyaltyMaintr);
  end;
  
  return;
end;

global
updating procedure RoyaltyMaintClearDiscountsm()
begin
  record GeneralOptionBlock GenOptRec;
  record RoyaltyMaintVc RoyaltyMaintr;
  row RoyaltyMaintVc RoyaltyMaintrw;
  integer wn;
  integer i,rwcnt;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RoyaltyMaintr);

  if (RoyaltyMaintr.Approved==0) then begin
    BlockLoad(GenOptRec);

    rwcnt = MatRowCnt(RoyaltyMaintr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RoyaltyMaintr,i,RoyaltyMaintrw);
      RoyaltyMaintrw.ApprovedvRebate = blankval;
      MatRowPut(RoyaltyMaintr,i,RoyaltyMaintrw);
      if (RoyaltyMaintDchrsum(RoyaltyMaintr,i,GenOptRec.UseDiscount,true)) then begin
//      RoyaltyMaintDchsum(RoyaltyMaintr,i);
      end;
    end;
    RoyaltyMaintSumup(RoyaltyMaintr);
    PutWindowRecord(wn,RoyaltyMaintr);
  end;
  
  return;
end;

global
procedure RoyaltyMaintInvalidatesm()
begin
  record RoyaltyMaintVc RoyaltyMaintr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RoyaltyMaintr);
  if (WindowState(wn)!=Rs_insert and RoyaltyMaintr.Invalid==0 and RoyaltyMaintr.OKFlag!=0 and RoyaltyMaintr.Approved!=0) then begin
    SetWindowState(wn,Rs_update);
    RoyaltyMaintr.Invalid = 1;
    PutWindowRecord(wn,RoyaltyMaintr);
  end;
  
  return;
end;

global
function Boolean RoyaltyMaintDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record RoyaltyMaintVc RMr;
  val t;

  if (rownr>=0) then begin
    GetWindowRecord(wn,RMr);    
    RoyaltyMaintSumup(RMr);
    PutWindowRecord(wn,RMr);    
  end;
  RoyaltyMaintDClassOnOverStrike = true;
  return;
end;

global 
function Boolean RoyaltyMaintDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record RoyaltyMaintVc RMr;
  row RoyaltyMaintVc RMrw;
  Boolean res;

  if (rownr<0) then begin
    goto LRoyaltyMaintDClassOverStrikeTest;
  end;

  res = UserCanAction("RoyaltyAdmin",false);
  if (res==false) then begin
    goto LRoyaltyMaintDClassOverStrikeTest;
  end;

  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,RMr);
      if (RMr.Invalid==0 and (RMr.OKFlag!=0 or RMr.Approved!=0)) then begin res = true; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,RMr);
      if (RMr.Invalid==0 and (RMr.OKFlag!=0 or RMr.Approved!=0)) then begin res = true; end;
  end;

  if (res==false) then begin
    goto LRoyaltyMaintDClassOverStrikeTest;
  end;

  MatRowGet(RMr,rownr,RMrw);
  if (RMrw.ovst!=0) then begin
    goto LRoyaltyMaintDClassOverStrikeTest;
  end;
  if (rownr<WindowOldRowcnt(wn)) then begin res = true; end;  
  
LRoyaltyMaintDClassOverStrikeTest:;
  RoyaltyMaintDClassOverStrikeTest = res;
  return;
end;