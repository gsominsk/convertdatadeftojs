external procedure AutomatedSalesOrderly(string);
remote function string 255 UpWindDI_Acc2SClass(string,Integer);
remote function string 255 GetSelDI_Acc2SClass(string,LongInt,var Array string,var Integer);
 
function Boolean AccDClassAccNumberEFActive(Integer wn,Integer fn,Integer wnst,Integer rownr,Integer ef)
begin
  Boolean res;
  record AccVc Accr;
  
  res = true;
  if (wnst==2) then begin//updatemode Rs_update
    res = false;
  end;
  AccDClassAccNumberEFActive = res;
  return;
end;

global
function Boolean AccDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "AccNumber": res = AccDClassAccNumberEFActive(wn,fn,wnst,rownr,changed);
  end;
  AccDClassActiveEditField = res;
  RETURN;
END;

/*
some other trigger needed
global
function Boolean Acc2SClassOnOpenPaste(Integer wn,string find)
begin
  Boolean res;
  record CYBlock CYb; 
  
  BlockLoad(CYb);
  res = false;
  SetWindowSubset(wn,CYb.AccClass);
Trace("subset " & GetWindowSubSet(wn),"");  
  Acc2SClassOnOpenPaste = false;
  return;
end;
*/
global
function Boolean Acc2SClassOnOpenWindow(Integer wn)
BEGIN
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  
  l = SelectedListLine(wn);
  subset = GetSelDI_Acc2SClass(GetWindowSubset(wn),l,adi,acnt);
  ClearStringList(wn);
//  Acc2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  Acc2SClassOnOpenWindow = true;
  RETURN;
END;

global
function Boolean Acc2SClassOnOKWindow(Integer wn)
begin  
  LongInt l;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
    
  l = SelectedListLine(wn);
  subset = GetSelDI_Acc2SClass(GetWindowSubset(wn),l,adi,acnt);
  ClearStringList(wn);
//  Acc2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  Acc2SClassOnOKWindow = true;
  return;
end;

global
procedure Acc2SClassTop()
begin
  Integer wn;
  string 255 subset;
  LongInt l;
  Array string 255 adi;
  Integer i,acnt;
  
  wn = CurWindow;
  subset = UpWindDI_Acc2SClass(GetWindowSubset(wn),0);
  subset = GetSelDI_Acc2SClass(subset,l,adi,acnt);
  ClearStringList(wn);
//  Acc2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  return;
end;

global
procedure Acc2SClassBack()
begin
  Integer wn;
  string 255 subset;
  Array string 255 adi;
  Integer i,acnt;
  LongInt l;
  
  wn = CurWindow;
  subset = UpWindDI_Acc2SClass(GetWindowSubset(wn),1);
  subset = GetSelDI_Acc2SClass(subset,l,adi,acnt);
  ClearStringList(wn);
//  Acc2SClassOnOKWindowDo(subset,adi,acnt);
  for (i=0;i<acnt;i=i+1) begin
    SetListString(wn,i,adi[i],false);  
  end;
  SetWindowSubset(wn,subset);
  i = SelectedListLine(wn);
  UpdateBrowses("");
  return;
end;

global
function Boolean AccSClassOnOpenWindow(Integer wn)
begin
  AutomatedSalesOrderly("HasIntegratedNL");
  AccSClassOnOpenWindow = false;
  return;
end;

/*
global
function Boolean AccSClassOnOpenWindow(Integer wn)
begin
  Integer mwn;
  record UserDefRepICACLVc UDRICACLr;
  
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    switch (GetWindowClass(mwn)) begin
      case "UserDefRepICACLinesDClass":
        GetWindowRecord(mwn,UDRICACLr);
        if (nonblank(UDRICACLr.CompCode)) then begin
          PutWindowString(wn,"CurrentCompany",CurrentCompany);
          SetCompanyCode(UDRICACLr.CompCode,false);
Trace("UDRICACLr.CompCode " & " UDRICACLr.CompCode "," CurrentCompany " & CurrentCompany)          
        end;
    end;
  end;
  AutomatedSalesOrderly("HasIntegratedNL");
  AccSClassOnOpenWindow = false;
  return;
end;

global
function Boolean AccSClassOnClose(Integer wn,Integer wn2)
begin
  Trace("","c " & GetWindowString(wn,"CurrentCompany"));
  AccSClassOnClose = false;
  return;
end;
*/

global
procedure AccListLsm()
begin
  record AccVc Accr;
  record RcVc RepSpec;
  Integer wn,i;
  string 255 tstr;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(Accr,wn,i)) begin
    if (i==1) then begin
      tstr = Accr.AccNumber;
    end;
    i = i + 1;
  end;
  if (tstr!=Accr.AccNumber) then begin
    tstr = tstr & ":" & Accr.AccNumber;
  end;
  if (nonblank(tstr)) then begin
    ReportDefaults(RepSpec,"AccListRClass"); 
    RepSpec.Media = mtScreen;
    RepSpec.f1 = tstr;
    RepSpec.flags[12] = 1;
    RepSpec.flags[3] = 1;
    RepSpec.repname = "AccListRn";
    RunReport(RepSpec,0);
  end;
  return;
end;
