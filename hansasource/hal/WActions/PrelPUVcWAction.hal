external procedure RecordActionPrelPU_Print(var record PrelPUVc,string);
external procedure PrelPUSetShipCost(var record PrelPUVc,Integer);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);
external procedure PrelPURecalcCost(var record PrelPUVc);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);

/*
 no remote calls
*/

global 
function Boolean PrelPUDClassVECodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    VEr.Code = PrelPUr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
      PrelPUr.VEName = VEr.Name;
      PrelPUr.Objects = VEr.VEObjects;
      PrelPUr.CurncyCode = VEr.VECurncyCode;
      curcode = PrelPUr.CurncyCode;
      GetFullCurncyRate(curcode,PrelPUr.TransDate,fr,to1,to2,br1,br2);
      PrelPUr.CurncyCode = curcode;
      PrelPUr.FrRate = fr;
      PrelPUr.ToRateB1 = to1; 
      PrelPUr.ToRateB2 = to2;
      PrelPUr.BaseRate1 = br1;
      PrelPUr.BaseRate2 = br2;      
    end;    
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassVECodeEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassTransDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    /*
    if (DateWarned(PrelPUr.TransDate,"PUVc")) then begin
      MessageBox(1045,"");
    end;
    */
    if (WarnOldRecords(PrelPUr.TransDate,"PrelPUVc",PrelPUr.SerNr)) then begin
      MessageBox(2020,"");
    end;
    curcode = PrelPUr.CurncyCode;
    GetFullCurncyRate(curcode,PrelPUr.TransDate,fr,to1,to2,br1,br2);
    PrelPUr.CurncyCode = curcode;
    PrelPUr.FrRate = fr;
    PrelPUr.ToRateB1 = to1; 
    PrelPUr.ToRateB2 = to2;
    PrelPUr.BaseRate1 = br1;
    PrelPUr.BaseRate2 = br2;    
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassTransDateEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCurncyCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    curcode = PrelPUr.CurncyCode;
    GetFullCurncyRate(curcode,PrelPUr.TransDate,fr,to1,to2,br1,br2);
    PrelPUr.CurncyCode = curcode;
    PrelPUr.FrRate = fr;
    PrelPUr.ToRateB1 = to1; 
    PrelPUr.ToRateB2 = to2;
    PrelPUr.BaseRate1 = br1;
    PrelPUr.BaseRate2 = br2;    
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCurncyCodeEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassFrRateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassFrRateEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassToRateB1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassToRateB1EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassToRateB2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassToRateB2EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassBaseRate1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassBaseRate1EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassBaseRate2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassBaseRate2EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPUSetShipCost(PrelPUr,2);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCost1EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCost2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPUSetShipCost(PrelPUr,3);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCost2EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCost3EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPUSetShipCost(PrelPUr,4);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCost3EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCost4EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPUSetShipCost(PrelPUr,5);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCost4EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCost5EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    PrelPUSetShipCost(PrelPUr,6);
    PrelPURecalcCost(PrelPUr);
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCost5EFAfter = true;
  return;
end;

global
procedure PrelPUGenPUDsm()
BEGIN
  record PrelPUVc PrelPUr;
  record RcVc RepSpec;
  Integer nwn,wn;
  
  wn = CurWindow;
  GetWindowrecord(wn,PrelPUr);
  nwn = OpenWindow("PUPrelPUVClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.f1 = PrelPUr.SerNr;
  RepSpec.repname = "PrelPUGenPUMn";  
  PutWindowRecord(nwn,RepSpec);  
  SelectWindow(nwn);
  RETURN;
END;

global
procedure PrintPrelPUL(Integer wn,Boolean previewf)
BEGIN
  record PrelPUVc PrelPUr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(PrelPUr,wn,i)) begin
    RecordActionPrelPU_Print(PrelPUr,previewf);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;
