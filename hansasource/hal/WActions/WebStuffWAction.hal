//remote's are only used in code meant for testing
remote function string 255 FormatSimpleLinkWithArg(string,string,boolean);
remote function string 255 GetLinkToContentItem(longint,boolean);
remote function string 255 GetLinkToStruct(LongInt,boolean);
//std
remote function Boolean GetItemNameStr(Integer,var string,string,string,string);    

//SECTION: TOOLS FOR TESTING
function string 255 GetHostNameForTesting()
begin
  record ProgramStatusBlock PSb;
  record WebNGTestBlock WTb;
  string 255 res;
  
  BlockLoad(WTb);
  if (nonblank(WTb.LinkHost)) begin
    res = WTb.LinkHost;
    if (InString(res,"://")==0) then begin
      res = "http://" & res;
    end;
  end else begin
    BlockLoad(PSb);
    res = "http://localhost";
    if (nonblank(PSb.httpPort) and PSb.httpPort!=80) then begin
      res = res & ":" & PSb.httpPort;
    end;
  end;
  
  GetHostNameForTesting = res;
  return;
end;

global
function string 255 FormatLinkForBrowser(string inurl,boolean testlink,string forcelang,boolean callfromweb)
begin
  record WebNGTestBlock WTb;
  string 255 host,url,args;
  boolean testf;

  url = inurl;
  if (nonblank(url)) then begin
    host = GetHostNameForTesting;
    if (right(host,1)=="/") then begin
      host = mid(host,0,len(host)-1);
    end;

    if (left(url,1)!="/") then begin
      url = "/" & url;
    end;
    url = host & url;
    args = "";
    if (testlink) then begin
      testf = false;
      BlockLoad(WTb);
      if (WTb.UseLangOfTranslation==1 and nonblank(forcelang)) then begin
        testf = true;
        args = args & "&lc=" & forcelang;
      end else begin
        if (nonblank(WTb.Language)) then begin
          testf = true;
          args = args & "&lc=" & WTb.Language;
        end;
      end;
      if (nonblank(WTb.Country)) then begin
        testf = true;
        args = args & "&cc=" & WTb.Country;
      end;
      if (testf) then begin
        args = "?test=true" & args;
      end;
    end;
    url = FormatSimpleLinkWithArg(url,args,callfromweb);
  end;
    
  FormatLinkForBrowser = url;
  return;
end;

global
function string 255 FormatLinkToStructForBrowser(longint sernr,boolean testlink,string forcelang,boolean callfromweb)
begin
  string 255 url;

  url = GetLinkToStruct(sernr,callfromweb);
  url = FormatLinkForBrowser(url,testlink,forcelang,callfromweb);

  FormatLinkToStructForBrowser = url;
  return;
end;

global
function string 255 FormatLinkToContentForBrowser(longint sernr,boolean testlink,string forcelang,boolean callfromweb)
begin
  string 255 url;

  url = GetLinkToContentItem(sernr,callfromweb);
  url = FormatLinkForBrowser(url,testlink,forcelang,callfromweb);

  FormatLinkToContentForBrowser = url;
  return;
end;

//SECTION: WINDOWACTIONS
global
function Boolean WebNGStructDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record WebNGStructVc WebNGStructr;
  
  GetWindowRecord(wn,WebNGStructr);
  subsetname = WebNGStructr.SerNr;
  WebNGStructDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean WebNGElementDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record WebNGElementVc WebNGElementr;
  
  GetWindowRecord(wn,WebNGElementr);
  subsetname = WebNGElementr.Code;
  WebNGElementDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean WebNGContentDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record WebNGContentVc WebNGContentr;
  
  GetWindowRecord(wn,WebNGContentr);
  subsetname = WebNGContentr.SerNr;
  WebNGContentDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean WebNGPageDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record WebNGPageVc WebNGPager;
  
  GetWindowRecord(wn,WebNGPager);
  subsetname = WebNGPager.Code;
  WebNGPageDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean WebNGProductDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record WebNGProductVc WebNGProductr;
  
  GetWindowRecord(wn,WebNGProductr);
  subsetname = WebNGProductr.Code;
  WebNGProductDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean WebNGStructDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record WebNGStructVc WebNGStructr;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,WebNGStructr)) then begin
      mwn = OpenWindow("WebNGStructDClass",1,0,"","",WebNGStructr);    
    end;
  end;
  WebNGStructDClassOnOKWindow = true;
  return;
end;

global
procedure WebNGStructDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;
 
global
function Boolean WebNGElementDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record WebNGTranslateVc WebNGTranslater;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,WebNGTranslater)) then begin
      mwn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
    end;
  end;
  WebNGElementDClassOnOKWindow = true;
  return;
end;

global
procedure WebNGElementDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;
 
global
function Boolean WebNGContentDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record WebNGTranslateVc WebNGTranslater;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,WebNGTranslater)) then begin
      mwn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
    end;
  end;
  WebNGContentDClassOnOKWindow = true;
  return;
end;

global
procedure WebNGContentDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;
 
global
function Boolean WebNGProductDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record WebNGTranslateVc WebNGTranslater;

  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,WebNGTranslater)) then begin
      mwn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
    end;
  end;
  WebNGProductDClassOnOKWindow = true;
  return;
end;

global
function Boolean WebNGPageDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record WebNGTranslateVc WebNGTranslater;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,WebNGTranslater)) then begin
      mwn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
    end;
  end;
  WebNGPageDClassOnOKWindow = true;
  return;
end;

global
procedure WebNGPageDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
procedure WebNGProductDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
function Boolean WebNGMenuDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record WebNGMenuVc WNGMr;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,WNGMr)) then begin
      mwn = OpenWindow("WebNGMenuDClass",1,0,"","",WNGMr);    
    end;
  end;
  WebNGMenuDClassOnOKWindow = true;
  return;
end;

global
procedure WebNGMenuDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin // Temporary fix for the RecordList
  saveOK = true;
  return;
end;

global
procedure NewElementTranslationDsm()
begin
  record WebNGElementVc WebNGElementr;
  record WebNGTranslateVc WebNGTranslater;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,WebNGElementr);
  RecordNew(WebNGTranslater);
  WebNGTranslater.Code = WebNGElementr.Code;
  WebNGTranslater.Comment = WebNGElementr.Comment;
  WebNGTranslater.FileName = 0;
  wn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
  return;
end;

global
procedure NewContentTranslationDsm()
begin
  record WebNGContentVc WebNGContentr;
  record WebNGTranslateVc WebNGTranslater;
  row WebNGTranslateVc WebNGTranslaterw;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,WebNGContentr);
  RecordNew(WebNGTranslater);
  WebNGTranslater.Code = WebNGContentr.SerNr;
  WebNGTranslater.Comment = WebNGContentr.Comment;
  WebNGTranslaterw.OverviewText = WebNGContentr.Comment;
  MatRowPut(WebNGTranslater,0,WebNGTranslaterw);
  WebNGTranslater.FileName = 1;
  wn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
  return;
end;

global
procedure NewProductTranslationDsm()
begin
  record WebNGProductVc WebNGProductr;
  record WebNGTranslateVc WebNGTranslater;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,WebNGProductr);
  RecordNew(WebNGTranslater);
  WebNGTranslater.Code = WebNGProductr.Code;
  WebNGTranslater.Comment = WebNGProductr.Comment;
  WebNGTranslater.FileName = 2;
  wn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
  return;
end;

global
procedure NewComponentTranslationDsm()
begin
  record WebNGComponentVc WebNGComponentr;
  record WebNGTranslateVc WebNGTranslater;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,WebNGComponentr);
  RecordNew(WebNGTranslater);
  WebNGTranslater.Code = WebNGComponentr.Code;
  WebNGTranslater.Comment = WebNGComponentr.Comment;
  WebNGTranslater.FileName = 3;
  wn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
  return;
end;

global
procedure TWebNGStructNewChildnodeDsm()
begin
  record WebNGStructVc WSr,WSNewr;
  integer wn,nwn;
  
  wn = CurWindow;

  GetWindowRecord(wn,WSr);

  RecordNew(WSNewr);
  WSNewr.Mother = WSr.SerNr;
  
  nwn = OpenWindow("WebNGStructDClass",1,0,"","",WSNewr);
  return;
end;

global
procedure TWebNGStructNewChildnodeLsm()
begin
  record WebNGStructVc WSr,WSNewr;
  integer wn,nwn;
  
  wn = CurWindow;

  if (GetRecordFromBrowse(WSr,wn,1)) then begin
    RecordNew(WSNewr);
    WSNewr.Mother = WSr.SerNr;
  
    nwn = OpenWindow("WebNGStructDClass",1,0,"","",WSNewr);
  end;
  return;
end;

procedure OpenStructNodeInWebBrowser(record WebNGStructVc WSr)
begin
  string 255 url;

  if (WSr.Type!=kStructTypeFolder) then begin // folder
    url = FormatLinkToStructForBrowser(WSr.SerNr,true,"",false);
    if (nonblank(url)) then begin
      OpenWebBrowser(url);
    end else begin
      MessageBox(22900,"");
    end;
  end else begin
    MessageBox(22901,"");
  end;

  return;
end;

global
procedure TWebNGStructOpenNodeInBrowserDsm()
begin
  record WebNGStructVc WSr;
  integer wn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin //Rs_normal
    GetWindowRecord(wn,WSr);
    OpenStructNodeInWebBrowser(WSr);
  end else begin
    MessageBox(22902,"");
  end;
  return;
end;

global
procedure TWebNGStructOpenNodeInBrowserLsm()
begin
  record WebNGStructVc WSr;
  integer wn;
  
  wn = CurWindow;
  if (GetRecordFromBrowse(WSr,wn,1)) then begin
    OpenStructNodeInWebBrowser(WSr);
  end;
  return;
end;

global
procedure TWebNGPageShowNodesShowingPageDsm()
begin
  record RcVc RepSpec;
  record WebNGPageVc WPr;

  if (WindowState(CurWindow)==0) then begin //Rs_normal
    GetWindowRecord(CurWindow,WPr);
    RepSpec.f1 = WPr.Code;

    RepSpec.Media = mtScreen;
    RepSpec.repname = "NodeLinkListFromWebPageRn";
    RunReport(RepSpec,0);
  end else begin
    MessageBox(22902,"");
  end;
  return;
end;

global
procedure TWebNGPageShowNodesShowingPageLsm()
begin
  record RcVc RepSpec;
  record WebNGPageVc WPr;

  if (GetRecordFromBrowse(WPr,CurWindow,1)) then begin
    RepSpec.f1 = WPr.Code;

    RepSpec.Media = mtScreen;
    RepSpec.repname = "NodeLinkListFromWebPageRn";
    RunReport(RepSpec,0);
  end;
  return;
end;

global
procedure TWebNGPageShowNodesShowingElementsDsm()
begin
  record RcVc RepSpec;
  record WebNGElementVc WEr;

  if (WindowState(CurWindow)==0) then begin //Rs_normal
    GetWindowRecord(CurWindow,WEr);
    RepSpec.f1 = WEr.Code;

    RepSpec.Media = mtScreen;
    RepSpec.repname = "NodeLinkListFromWebElementRn";
    RunReport(RepSpec,0);
  end else begin
    MessageBox(22902,"");
  end;
  return;
end;

global
procedure TWebNGPageShowNodesShowingElementsLsm()
begin
  record RcVc RepSpec;
  record WebNGElementVc WEr;

  if (GetRecordFromBrowse(WEr,CurWindow,1)) then begin
    RepSpec.f1 = WEr.Code;

    RepSpec.Media = mtScreen;
    RepSpec.repname = "NodeLinkListFromWebElementRn";
    RunReport(RepSpec,0);
  end;
  return;
end;

procedure OpenContentInWebBrowser(longint sernr,string forcelang)
begin
  record WebNGContentVc WCr;
  string 255 url;

  url = FormatLinkToContentForBrowser(sernr,true,forcelang,false);
  if (nonblank(url)) then begin
    //StopAlert(url);
    OpenWebBrowser(url);
  end else begin
    MessageBox(22903,"");
  end;
  return;
end;

global
procedure ShowWebNGContentInBrowserDsm()
begin
  record WebNGContentVc WCr;

  if (WindowState(CurWindow)==0) then begin //Rs_normal
    GetWindowRecord(CurWindow,WCr);
    OpenContentInWebBrowser(WCr.SerNr,"");
  end else begin
    MessageBox(22902,"");
  end;
  return;
end;

global
procedure ShowWebNGContentInBrowserLsm()
begin
  record WebNGContentVc WCr;

  if (GetRecordFromBrowse(WCr,CurWindow,1)) then begin
    OpenContentInWebBrowser(WCr.SerNr,"");    
  end;
  return;
end;

global
procedure TWebNGOpenShopInBrowserTsm()
begin
  record WebNGShopBlock WSb;
  string 255 url;
  
  GetWindowRecord(CurWindow,WSb);
  if (nonblank(WSb.NodeToShopApp)) then begin
    url = FormatLinkToStructForBrowser(WSb.NodeToShopApp,true,"",false);
    if (nonblank(url)) then begin
      OpenWebBrowser(url);
    end;
  end;
  
  return;
end;

procedure ShowTranslationInBrowserOrReport(record WebNGTranslateVc WTr)
begin
  record WebNGTestBlock WTb;
  record RcVc RepSpec;
  longint sernr;
  switch (WTr.FileName) begin
    case 0: //Element
      RepSpec.f1 = WTr.Code;
      if (nonblank(WTr.LangCode)) then begin
        BlockLoad(WTb);
        if (WTb.UseLangOfTranslation==1) then begin
          RepSpec.f1 = RepSpec.f1 & "/" & WTr.LangCode;
        end;
      end;
      RepSpec.Media = mtScreen;
      RepSpec.repname = "NodeLinkListFromWebElementRn";
      RunReport(RepSpec,0);
    case 1: //Content item
      sernr = StringToLongint(WTr.Code);
      OpenContentInWebBrowser(sernr,WTr.LangCode);
    otherwise
      MessageBox(22904,"");
  end;
  return;
end;

global
procedure ShowWebNGTranslationInBrowserDsm()
begin
  record WebNGTranslateVc WTr;

  if (WindowState(CurWindow)==0) then begin //Rs_normal
    GetWindowRecord(CurWindow,WTr);
    ShowTranslationInBrowserOrReport(WTr);
  end else begin
    MessageBox(22902,"");
  end;
  return;
end;

global
procedure ShowWebNGTranslationInBrowserLsm()
begin
  record WebNGTranslateVc WTr;

  if (GetRecordFromBrowse(WTr,CurWindow,1)) then begin
    ShowTranslationInBrowserOrReport(WTr);
  end;

  return;
end;

function boolean WebNGCompCountryDClassCompanyNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin
  record WebNGCompCountryVc WCCr;
  record CompaniesBlock Cb;
  row CompaniesBlock Cbrw;
  boolean res;
  Integer rowtofind;
  
  res = true;
  if (changed==1) then begin
    GetWindowRecord(wn,WCCr);
    if (WCCr.CompanyNr>0) then begin
      BlockLoad(Cb);
      rowtofind = WCCr.CompanyNr-1;
      if (rowtofind <= MatRowCnt(Cb)) then begin
        MatRowGet(Cb,rowtofind,Cbrw);
        if (nonblank(Cbrw.CompName)) then begin
          WCCr.Comment = Cbrw.CompName;
          PutWindowRecord(wn,WCCr);
        end;
      end;
    end;
  end;
  WebNGCompCountryDClassCompanyNrEFAfter = res;
  return;
end;

global
function boolean WebNGCompCountryDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "CompanyNr": res = WebNGCompCountryDClassCompanyNrEFAfter(wn,fn,rownr,changed);
  end;
  WebNGCompCountryDClassAfterEditField = res;
  RETURN;
END;

procedure ChooseParamPasteSpecial(Integer wn,var string psname)
begin
  record WebNGElementVc WEr;
  record WebNGStructVc WSr;

  psname = "0"; //dont show anything (works because this is the same as specifying 0 for PasteSpecWindow on EditField function in Windowdef)
  if (GetWindowClass(wn)=="WebNGElementDClass") then begin
    GetWindowRecord(wn,WEr);
    switch (WEr.Type) begin
      case kElementTypeWebMenu: //webmenu
        psname = "WebNGMenuSClass";
      case kElementTypeContentList: //contentlist
        psname = "WebNGContentStyleSClass";
      case kElementTypeCreateMailForm:
        psname = "ConfSClass";
    end;
  end else begin
    if (GetWindowClass(wn)=="WebNGStructDClass") then begin
      GetWindowRecord(wn,WSr);
      switch (WSr.Type) begin
        case kStructTypeContentHandlerApp: //content handler app
          psname = "WebNGContentStyleSClass";
      end;
    end;
  end;
  return;
end;

global
function string 40 WebNGElementDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "HALFunc": ChooseParamPasteSpecial(wn,psname);
  end;
  WebNGElementDClassSpecPasteName = psname;
  return;
end;

global
function string 40 WebNGStructDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "HALFunc": ChooseParamPasteSpecial(wn,psname);
  end;
  WebNGStructDClassSpecPasteName = psname;
  return;
end;

function boolean WebNGProductDClassCodeEFAfter(Integer wn,Integer fn,Integer rownr,boolean changed)
begin
  record WebNGProductVc WPr;
  record INVc INr;
  string 255 tstr;
  
  if (changed) then begin
    GetWindowRecord(wn,WPr);
    INr.Code = WPr.Code;
    if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemNameStr(1,tstr,"",INr.Name,INr.Code)) then begin end;
      WPr.Comment = tstr;
      PutWindowRecord(wn,WPr);
    end;
  end;
  return;
end;

function boolean WebNGProductDClassComponentCodeEFAfter(Integer wn,Integer fn,Integer rownr,boolean changed)
begin
  record WebNGProductVc WPr;
  row WebNGProductVc WPrw;
  record INVc INr;
  string 255 tstr;
  
  if (changed and rownr!=-1) then begin
    GetWindowRecord(wn,WPr);
    MatRowGet(WPr,rownr,WPrw);
    INr.Code = WPrw.ComponentCode;
    if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemNameStr(1,tstr,"",INr.Name,INr.Code)) then begin end;
      WPrw.ComponentName = tstr;
      MatRowPut(WPr,rownr,WPrw);
      PutWindowRecord(wn,WPr);
    end;
  end;
  return;
end;

global
function boolean WebNGProductDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  switch (fieldname) begin
    case "code": WebNGProductDClassCodeEFAfter(wn,fn,rownr,changed==1);
    case "componentcode": WebNGProductDClassComponentCodeEFAfter(wn,fn,rownr,changed==1);
  end;
  return;
end;

function boolean WebNGComponentDClassCodeEFAfter(Integer wn,Integer fn,Integer rownr,boolean changed)
begin
  record WebNGComponentVc WCr;
  record INVc INr;
  string 255 tstr;
  
  if (changed) then begin
    GetWindowRecord(wn,WCr);
    INr.Code = WCr.Code;
    if (ReadFirstMain(INr,1,true)) then begin
      if (GetItemNameStr(1,tstr,"",INr.Name,INr.Code)) then begin end;
      WCr.Comment = tstr;
      PutWindowRecord(wn,WCr);
    end;
  end;
  return;
end;

global
function boolean WebNGComponentDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  switch (fieldname) begin
    case "code": WebNGComponentDClassCodeEFAfter(wn,fn,rownr,changed==1);
  end;
  return;
end;

procedure ProductComponentPasteSpecial(integer wn,var string psname)
begin
  record WebNGProductVc WPr;
  row WebNGProductVc WPrw;
  integer rownr;

  psname = "0";
  if (GetWindowClass(wn)=="WebNGProductDClass") then begin
    GetWindowRecord(wn,WPr);
    rownr = WindowActiveRow(wn);
    if (rownr!=-1) then begin
      MatRowGet(WPr,rownr,WPrw);
      switch (WPrw.SelectionType) begin
        case 0: //product
          psname = "WebNGProductSClass";
//        case 1: //group
//          psname = "WebNGComponentSClass";
      end;
    end;
  end;
  return;
end;

global
function string 40 WebNGProductDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ComponentCode": ProductComponentPasteSpecial(wn,psname);
  end;
  
  WebNGProductDClassSpecPasteName = psname;
  return;
end;

procedure TWebDefaultSearch(Integer type)
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("WebNGSearchRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"WebNGSearchRClass");
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ToolWebNGSearchRn";
  RepSpec.critname = "WebNGSearchRClass";
  RepSpec.flags[1] = type;
  PutWindowRecord(nwn,RepSpec);  
  return;
end;

global
procedure TWebNGContSearchDsm()
begin
  TWebDefaultSearch(1);
  return;
end;

global
procedure TWebNGTransSearchDsm()
begin
  TWebDefaultSearch(2);
  return;
end;

global
procedure TWebNGWebPageSearchDsm()
begin
  TWebDefaultSearch(3);
  return;
end;

global
procedure TWebNGElementsSearchDsm()
begin
  TWebDefaultSearch(4);
  return;
end;

global
procedure DblWebNGTranslateVc(string dblstr,string l,Integer currepwn)
begin
  record WebNGTranslateVc WebNGTranslater;
  Integer wn;
  
  WebNGTranslater.Code = FirstInRange(l,20);
  WebNGTranslater.LangCode = LastInRange(l,2);
  if (ReadFirstMain(WebNGTranslater,2,true)) then begin
    wn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);
  end;
  return;
end;

global
procedure DblWebNGContentVc(string dblstr,string l,Integer currepwn)
begin
  record WebNGContentVc WebNGContentr;
  Integer wn;
  
  WebNGContentr.SerNr = FirstInRange(l,10);
  if (ReadFirstMain(WebNGContentr,1,true)) then begin
    wn = OpenWindow("WebNGContentDClass",1,0,"","",WebNGContentr);
  end;
  return;
end;

//WebNGMenuDClassOnOpenWindow
//WebNGMenuDClassOnOKWindow

global
function Boolean WebNGMenuDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record WebNGMenuVc WNGMr;
  
  GetWindowRecord(wn,WNGMr);
  subsetname = WNGMr.Code;
  
  if (subsetname=="") then begin
    subsetname = "***nothing***";
  end;
  WebNGMenuDClassUpdateWindowSubset = true;
  return;
end;

global
function boolean WebNGTranslateLClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;

  res = false;
  switch (fieldname) begin
    case "BaseLang":
      SetWindowSubset(wn,GetWindowString(wn,"BaseLang"));
    case "ToLang":
      SetWindowSubset(wn,GetWindowSubset(wn)); // to make record list reload
  end;

  WebNGTranslateLClassAfterEditField = res;
  return;
end;

global
function Integer WebNGTranslateLClassRowColor(record WebNGTranslateVc WebNGTranslater)
begin
  Integer res;
  transaction string 255 BaseLang;
  transaction string 255 ToLang;
  record WebNGTranslateVc WebNGTranslate2r;

  res = kRowColorNone;
  if (BaseLang=="") then begin  goto LWebNGTranslateLClassRowColor; end;
  if (ToLang=="") then begin goto LWebNGTranslateLClassRowColor; end;

  WebNGTranslate2r.Code = WebNGTranslater.Code;
  WebNGTranslate2r.LangCode = ToLang;
  WebNGTranslate2r.Sorting = WebNGTranslater.Sorting;
  WebNGTranslate2r.FileName = WebNGTranslater.FileName;

  if (ReadFirstMain(WebNGTranslate2r,4,true)==false) then begin
    res = kRowColorRed;
  end else begin
    if (WebNGTranslate2r.LastChanged<WebNGTranslater.LastChanged) then begin
      res = kRowColorYellow;
    end else begin
      res = kRowColorGreen;
    end;
  end;

LWebNGTranslateLClassRowColor:;
  WebNGTranslateLClassRowColor = res;
  return;
end;

global
procedure WebNGTranslateLClassTranslate()
begin
  Integer wn,nwn,rs;
  string 255 baselang;
  string 255 tolang;
  record WebNGTranslateVc WebNGTranslater;

  baselang = GetWindowString(wn,"BaseLang");
  tolang = GetWindowString(wn,"ToLang");

  wn = CurWindow;

  if (baselang<>"") then begin
    if (GetRecordFromBrowse(WebNGTranslater,wn,1)) then begin
      if (WebNGTranslater.LangCode<>tolang) then begin
        WebNGTranslater.LangCode = tolang;
        if (ReadFirstMain(WebNGTranslater,4,true)) then begin
          rs = Rs_normal;
        end else begin
          rs = Rs_insert;
        end;
        nwn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);
        SetWindowState(nwn,rs);
      end;
    end;
  end;

  return;
end;
