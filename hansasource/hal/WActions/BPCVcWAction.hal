external function Boolean UseTaxTemplatesforTaxCalc();
external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
remote procedure BPCchrsum(var record BPCVc,Integer,string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean BPCVc_PasteArtCode(var record BPCVc,Integer,var string);
remote procedure BPCVc_PasteTaxTemplateCode(var record BPCVc,Integer);

procedure BPCSumUp_TaxTemplate(var record BPCVc BPCp)
begin
  Integer i,rwcnt;
  row BPCVc BPCrw;
  val totqty,totpb,totpa;
  record TaxMatrixVc TMr;
  record TaxMatrixVc sumTMr;
  
  UnpackFieldMatrix(BPCp,"TaxMatrix",sumTMr);
  RecordClear(sumTMr);
  BPCp.TotQty = blankval;
  rwcnt = MatRowCnt(BPCp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BPCp,i,BPCrw);
    totqty = totqty + BPCrw.Qty;
    totpa = totpa + BPCrw.BasePriceAfter;
    totpb = totpb + BPCrw.BasePriceBefore;
    UnpackRowFieldMatrix(BPCrw,"TaxMatrix",TMr);
    AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,BPCp.InclVAT);
  end;
  PackFieldMatrix(BPCp,"TaxMatrix",sumTMr);
  BPCp.TotQty = Round(totqty,SetRoundModeD(2));
  BPCp.TotPriceAfter = Round(totpa,DefaultRoundMode);
  BPCp.TotPriceBefore = Round(totpb,DefaultRoundMode);
  return;
end;

procedure BPCSumUp(var record BPCVc BPCp)
begin
  Integer i,rwcnt;
  row BPCVc BPCrw;
  val totqty,totpb,totpa;
  
  if (UseTaxTemplatesforTaxCalc) then begin
    BPCSumUp_TaxTemplate(BPCp);
    goto LBPCSumUp;
  end;
  BPCp.TotQty = blankval;
  rwcnt = MatRowCnt(BPCp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BPCp,i,BPCrw);
    totqty = totqty + BPCrw.Qty;
    totpa = totpa + BPCrw.BasePriceAfter;
    totpb = totpb + BPCrw.BasePriceBefore;
  end;
  BPCp.TotQty = Round(totqty,SetRoundModeD(2));
  BPCp.TotPriceAfter = Round(totpa,DefaultRoundMode);
  BPCp.TotPriceBefore = Round(totpb,DefaultRoundMode);
LBPCSumUp:;  
  return;
end;

global 
function Boolean BPCDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record BPCVc BPCr;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetWindowRecord(wn,BPCr);
    if (BPCr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  BPCDClassDeleteRowTest = res;
  RETURN;
END;

global
function Boolean BPCDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record BPCVc BPCr;

  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,BPCr);
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,BPCr);
  end;  
  if (BPCr.OKFlag!=0) then begin
    res = false;
  end;
  BPCDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean BPCDClassInclVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  BPCDClassInclVATButtonAction = res;
  return;
end;


global
function Boolean BPCDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record BPCVc BPCr;
  row BPCVc BPCrw;
  
  res = false;
  GetWindowRecord(wn,BPCr);
  if (BPCr.OKFlag!=0) then begin  
    switch (fieldname) begin
      case "Comment0": res = true;
      case "Comment1": res = true;
      case "Comment2": res = true;
      case "Comment3": res = true;
    end;
  end else begin
    res = true;
    switch (fieldname) begin
      case "BasePriceBefore": res = false;
      case "VATSum": res = false;
    end;
  end;
  BPCDClassActiveEditField = res;
  RETURN;
END;

function Boolean BPCDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BPCVc BPCr;
  row BPCVc BPCrw;
  string 255 warnstr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,BPCr);
  MatRowGet(BPCr,rownr,BPCrw);  
  if (changedf!=0) or ((blank(BPCrw.Spec)) and nonblank(BPCrw.ArtCode)) then begin
    if (BPCVc_PasteArtCode(BPCr,rownr,warnstr)) then begin end;
    BPCSumUp(BPCr); 
    if (nonblank(warnstr)) then begin
      MessageBox(0,warnstr);
    end; 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassArtCodeEFAfter = true;
  return;
end;

function Boolean BPCDClassQtyEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BPCVc BPCr;
  
  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"BasePriceAfter");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassQtyEFAfter = true;
  return;
end;

function Boolean BPCDClassBasePriceAfterEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record BPCVc BPCr;
  
  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"BasePriceAfter");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassBasePriceAfterEFAfter = true;
  return;
end;

function Boolean BPCDClassPurPriceEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record BPCVc BPCr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"PurPrice");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassPurPriceEFAfter = true;
  return;
end;

function Boolean BPCDClassPurExtraCostEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record BPCVc BPCr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"PurExtraCost");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassPurExtraCostEFAfter = true;
  return;
end;

function Boolean BPCDClassMarginPercEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record BPCVc BPCr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"MarginPerc");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassMarginPercEFAfter = true;
  return;
end;

function Boolean BPCDClassBasePriceAfterInclVATEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record BPCVc BPCr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"BasePriceAfterInclVAT");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassBasePriceAfterInclVATEFAfter = true;
  return;
end;

function Boolean BPCDClassBasePriceAfterSumInclVATEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record BPCVc BPCr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"BasePriceAfterSumInclVAT");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassBasePriceAfterSumInclVATEFAfter = true;
  return;
end;

function Boolean BPCDClassBasePriceAfterSumEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record BPCVc BPCr;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,BPCr);
    BPCchrsum(BPCr,rownr,"BasePriceAfterSum");
    BPCSumUp(BPCr); 
    PutWindowRecord(wn,BPCr);
    SelectWindow(wn);
  end;
  BPCDClassBasePriceAfterSumEFAfter = true;
  return;
end;

global
function Boolean BPCDClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record BPCVc BPCr;
  Boolean chsum;

  if (changedf) then begin  
    GetWindowRecord(wn,BPCr);
    BPCVc_PasteTaxTemplateCode(BPCr,rownr);
    BPCchrsum(BPCr,rownr,"");
    BPCSumup(BPCr);
    PutWindowRecord(wn,BPCr);
  end;  
  BPCDClassTaxTemplateCodeEFAfter = true;
  return;
end;

global
function Boolean BPCDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res =  BPCDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "Qty": res =  BPCDClassQtyEFAfter(wn,fn,rownr,changed);
    case "TaxTemplateCode": res = BPCDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    case "BasePriceAfter": res =  BPCDClassBasePriceAfterEFAfter(wn,fn,rownr,changed);

    case "PurPrice": res =  BPCDClassPurPriceEFAfter(wn,rownr,changed!=0);
    case "PurExtraCost": res =  BPCDClassPurExtraCostEFAfter(wn,rownr,changed!=0);
    case "MarginPerc": res =  BPCDClassMarginPercEFAfter(wn,rownr,changed!=0);
    case "BasePriceAfterInclVAT": res = BPCDClassBasePriceAfterInclVATEFAfter(wn,rownr,changed!=0);
    case "BasePriceAfterSumInclVAT": res = BPCDClassBasePriceAfterSumInclVATEFAfter(wn,rownr,changed!=0);
    case "BasePriceAfterSum": res =  BPCDClassBasePriceAfterSumEFAfter(wn,rownr,changed!=0);

  end;
  BPCDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean BPCDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record BPCVc BPCr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,BPCr);    
    BPCSumUp(BPCr);
    PutWindowRecord(wn,BPCr);    
  end;
  res = true;
  BPCDClassOnOverStrike = true;
  RETURN;
END;

global
function string 40 BPCDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  BPCDClassSpecPasteName = psname;
  return;
end;

global
procedure OpenVatMatrixBPCDsm()
begin
  record TaxMatrixVc TMr;
  record BPCVc BPCr;
  row BPCVc BPCrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,BPCr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(BPCr,rowno,BPCrw);
    UnpackRowFieldMatrix(BPCrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(BPCr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;
