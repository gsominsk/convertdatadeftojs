external procedure ActVcRecordDefClient(var record ActVc);
remote procedure LetVc_PasteShortSign(var record LetVc);
remote procedure LetVc_PasteContact(var record LetVc);
remote procedure LetVc_PasteCustCode(var record LetVc);
remote updating procedure MakeActFromLetVc(var record LetVc,var record ActVc);
external updating procedure RecordActionLet_Print(var record LetVc,string);
remote function Integer CustMainLet(record LetVc,Integer,Integer,Boolean);

function Boolean ShouldUseHtmlEditor(record LetVc Letr,Boolean newf)
begin
  Boolean res;
  res = false;
  
  if (SystemSupportsHTMLLetters()==false) then begin
    goto LShouldUseHtmlEditor;
  end;
    
  if (newf) then begin
    res = true;
  end;
  
  if (Letr.HtmlFlag!=0) then begin
    res = true;
  end;

LShouldUseHtmlEditor:;
  ShouldUseHtmlEditor = res;
end;

global
function string 255 LetDClassOverrideClass(record LetVc Letr,Boolean newf)
begin
  string 255 res;
  Boolean htmlf;
  
  htmlf = ShouldUseHtmlEditor(Letr,newf);
  if (htmlf==true) then begin
    res = "HtmlLetDClass";
  end;
  
LLetDClassOverrideClass:
  LetDClassOverrideClass = res;
  return;
end;

global
function string 255 HtmlLetDClassOverrideClass(record LetVc Letr,Boolean newf)
begin
  string 255 res;
  Boolean htmlf;
  
  htmlf = ShouldUseHtmlEditor(Letr,newf);
  if (htmlf==false) then begin
    res = "LetDClass";
  end;

LHtmlLetDClassOverrideClass:
  HtmlLetDClassOverrideClass = res;
  return;
end;

global
procedure GetLetterSelection(record LetVc Letp,var Integer keysp)
BEGIN
  Integer mainkey;
  Integer secondkey;
  
  if (nonblank(Letp.CustCode)) then begin mainkey = 1; end;
  if (mainkey==0) then begin  
    if (nonblank(Letp.CustCat)) then begin mainkey = 2; end;
  end;  
  if (mainkey==0) then begin 
    if (nonblank(Letp.Classification)) then begin mainkey = 3; end;
  end;  
  if (mainkey==0) then begin 
    if (Letp.AllCont!=kAllContCustomerEmail) then begin
      mainkey = 4;
      secondkey = 1;
    end;
  end;  
  if (mainkey==0) then begin 
    if (nonblank(Letp.JobDesc)) then begin
      mainkey = 4;
      if (nonblank(Letp.Contact)) then begin 
        secondkey = 1;
      end;  
    end;
  end;  
  if (mainkey==0) then begin 
    if (nonblank(Letp.Contact)) then begin
      mainkey = 4;
      secondkey = 3;
    end;
  end;  
  if (mainkey<4) then begin
    if (Letp.AllCont!=kAllContCustomerEmail) then begin 
      secondkey = 1;
    end;  
    if (secondkey==0) then begin 
      if (nonblank(Letp.JobDesc)) then begin secondkey = 2; end;
    end;  
    if (secondkey==0) then begin 
      if (nonblank(Letp.Contact)) then begin secondkey = 3; end;
    end;  
  end;
  keysp = secondkey;
  RETURN;
END;

global
procedure PasteLTxttoLet(record LetVc Letr)
BEGIN
  record LTxtVc LTxtr;
  string 255 tstr;
  Integer pos,textsize;

  LTxtr.Code = Letr.LTxtCode;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    textsize = SizeTextCnt(LTxtr);
    while (pos<textsize) begin
      tstr = StringFromText(LTxtr,pos,80);
      pos = pos + len(tstr);
      if (len(tstr)==0) then begin
        pos = pos + 1;
      end;
      AddToText(tstr,Letr);
    end;
  end;  
  RETURN;
END;

global
procedure PasteLTxtTemplatetoLet(Integer wn,record LetVc Letr)
BEGIN
  record LTxtVc LTxtr;
  string 255 tstr;
  Integer pos,textsize;

  LTxtr.Code = Letr.LTxtCode;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    if (nonblank(LTxtr.HtmlTemplate)) then begin
      Letr.HtmlTemplate = LTxtr.HtmlTemplate;
      SetHTMLTemplate(wn,Letr.HtmlTemplate);
    end;
    if (LTxtr.HtmlFlag!=0) then begin
      AddTextToHtml(wn,LTxtr,true);
    end else begin
      PasteLTxttoLet(Letr);
    end;
    PutWindowRecord(wn,Letr);
  end;  
  RETURN;
END;

function Boolean LetDClassLTxtCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record LetVc Letr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Letr);
    PasteLTxttoLet(Letr);
    PutWindowRecord(wn,Letr);
  end;
  LetDClassLTxtCodeEFAfter = res;
  RETURN;
END;

function Boolean HtmlLetDClassLTxtCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record LetVc Letr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Letr);
    PasteLTxtTemplatetoLet(wn,Letr);
  end;
  HtmlLetDClassLTxtCodeEFAfter = res;
  RETURN;
END;

function Boolean LetDClassCustCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record LetVc Letr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Letr);
    LetVc_PasteCustCode(Letr);
    PutWindowRecord(wn,Letr);
  end;
  LetDClassCustCodeEFAfter = res;
  RETURN;
END;

function Boolean HtmlLetDClassCustCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  HtmlLetDClassCustCodeEFAfter = LetDClassCustCodeEFAfter(wn,fn,rownr,changed);
  RETURN;
END;

function Boolean LetDClassContactEFAfter(Integer wn,Integer changed)
BEGIN
  record LetVc Letr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Letr);
    LetVc_PasteContact(Letr);
    PutWindowRecord(wn,Letr);
  end;
  LetDClassContactEFAfter = res;
  RETURN;
END;

function Boolean HtmlLetDClassContactEFAfter(Integer wn,Integer changed)
BEGIN
  HtmlLetDClassContactEFAfter = LetDClassContactEFAfter(wn,changed);
  RETURN;
END;

function Boolean LetDClassShortSignEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record LetVc Letr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,Letr);
    LetVc_PasteShortSign(Letr);
    PutWindowRecord(wn,Letr);
  end;
  LetDClassShortSignEFAfter = res;
  RETURN;
END;

function Boolean HtmlLetDClassShortSignEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  HtmlLetDClassShortSignEFAfter = LetDClassShortSignEFAfter(wn,fn,rownr,changed);
  RETURN;
END;

function Boolean HtmlLetDClassHtmlTemplateEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record LetVc Letr;
  record LetVc PrevLetr;
  Integer nwn,mwn;
  string 255 subset;
  
  if (changed!=0) then begin
    if (Letr.OKFlag!=0) then begin
      res = false;
      goto LHtmlLetDClassHtmlTemplateEFAfter;
    end;
    if (SystemSupportsHTMLLetters()) then begin
      res = true;
      GetWindowRecord(wn,Letr);
      SetHTMLTemplate(wn,Letr.HtmlTemplate);
    end else begin
      // Show error message as well
      res = false;
    end;
  end;
  
LHtmlLetDClassHtmlTemplateEFAfter:;
  HtmlLetDClassHtmlTemplateEFAfter = res;
  return;
end;

global
function Boolean LetDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CustCode": res = LetDClassCustCodeEFAfter(wn,fn,rownr,changed);
    case "LTxtCode": res = LetDClassLTxtCodeEFAfter(wn,fn,rownr,changed);
    case "Contact": res = LetDClassContactEFAfter(wn,changed);
    case "ShortSign": res = LetDClassShortSignEFAfter(wn,fn,rownr,changed);
  end;
  LetDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean HtmlLetDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CustCode": res = HtmlLetDClassCustCodeEFAfter(wn,fn,rownr,changed);
    case "LTxtCode": res = HtmlLetDClassLTxtCodeEFAfter(wn,fn,rownr,changed);
    case "Contact": res = HtmlLetDClassContactEFAfter(wn,changed);
    case "ShortSign": res = HtmlLetDClassShortSignEFAfter(wn,fn,rownr,changed);
    case "HtmlTemplate": res = HtmlLetDClassHtmlTemplateEFAfter(wn,changed);
  end;
  HtmlLetDClassAfterEditField = res;
  RETURN;
END;

global
procedure LetInfoLetDsm()
BEGIN
  record LetVc Letr;
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,Letr);
/*
  if (blank(Letr.CustCode)) then begin
    MessageBox(6715,"");
    goto LLetInfoLetDsm;
  end;
*/
  RepSpec.Media = mtScreen;
  RepSpec.f1 = Letr.SerNr;
  RepSpec.flags[1] = 1;
  RepSpec.repname = "LetInfoRn";
  RunReport(RepSpec,0);
LLetInfoLetDsm:;  
  RETURN;
END;

global
procedure SentEmailLetDsm()
BEGIN
  record LetVc Letr;
  record RcVc RepSpec;
  Integer wn,nwn,keys;
  
  wn = CurWindow;
  GetWindowRecord(wn,Letr);
/*
  if (blank(Letr.CustCode)) then begin
    MessageBox(6715,"");
    goto LSentEmailLetDsm;
  end;
*/
  nwn = OpenWindow("MaintWClass",1,0,"","",RepSpec);
  GetLetterSelection(Letr,keys);
  if (CustMainLet(Letr,keys,2,false)==0) then begin end;
  CloseWindow(nwn);
LSentEmailLetDsm:;  
  RETURN;
END;

global
function Boolean LetDClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res;
  Integer normalmode;
  record LetVc Letr;
  record RcVc RepSpec;
  
  normalmode = 0;//Rs_normal
  if (WindowState(wn)==normalmode) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Letr);
    RepSpec.Media = mtPrinter;
    RepSpec.f1 = Letr.SerNr;
    if (previewf) then begin//tohal
      RepSpec.IncDaughter = 1;
    end else begin
      RepSpec.IncDaughter = 0;
    end;
    if (previewf) then begin//tohal
      RepSpec.AccSpec = 1;
    end else begin
      RepSpec.AccSpec = 0;
    end;
    RepSpec.repname = "LetForm";
    RepSpec.FirstAcc = "";
    RepSpec.LastAcc = "";
    RepSpec.flags[1] = 1;
    if (RepSpec.AccSpec!=0) then begin
      RepSpec.Media = mtScreen;
    end;
    RunReport(RepSpec,0);
  end;    
  LetDClassPrint = res;
  RETURN;
END;

global
function Boolean HtmlLetDClassPrint(Integer wn,Boolean previewf)
BEGIN
  HtmlLetDClassPrint = LetDClassPrint(wn,previewf);
  RETURN;
END;

global
updating procedure PrintLetL(Integer wn,Boolean previewf)
BEGIN
  record LetVc Letr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(Letr,wn,i)) begin
    RecordActionLet_Print(Letr,previewf);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
updating procedure ActFromLetDsm()
BEGIN
  record LetVc Letr;
  record ActVc Actr;
  Integer wn,nwn;
  record RcVc RepSpec;
  Integer keys;
  
  wn = CurWindow;
  GetWindowRecord(wn,Letr);
  if (nonblank(Letr.CustCode)) and ((InString(Letr.CustCode,":")==0) and (InString(Letr.CustCode,"*")==0)) then begin  
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    MakeActFromLetVc(Letr,Actr);
    nwn = OpenWindow("ActDClass",1,0,"","",Actr);
    SetRLink(wn,true);  
  end else begin
    nwn = OpenWindow("MaintWClass",1,0,"","",RepSpec);
    GetLetterSelection(Letr,keys);
    if (CustMainLet(Letr,keys,3,false)==0) then begin end;
    CloseWindow(nwn);
  end;
  RETURN;
END;

global
updating procedure LetVcCreateActivity()
begin
  ActFromLetDsm;
  return;
end;

global
function Boolean LetDClassHtmlFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record LetVc Letr;

  res = true;
  GetWindowRecord(wn,Letr);
  if (Letr.OKFlag!=0) then begin
    res = false;
    goto LHtmlFlagButtonAction;
  end;
    
  if (SystemSupportsHTMLLetters()==false) then begin
    res = false;
    goto LHtmlFlagButtonAction;
  end;
/*  
  GetMailFormattingSettings(Mailr,Confr);
  if (Confr.SerNr>0) then begin
    if (Confr.DefaultHtmlFlag==0 and Confr.ForceHtmlFlag!=0) then begin
      res = false;
      goto LHtmlFlagButtonAction;
    end;
  end;
*/  
  if (Letr.HtmlFlag!=0 and WindowState(wn)!=Rs_normal) then begin
    res = false;
    MessageBox(25459,"");
    goto LHtmlFlagButtonAction;
  end;
  
LHtmlFlagButtonAction:;
  LetDClassHtmlFlagButtonAction = res;
  return;
end;

global
function Boolean HtmlLetDClassHtmlFlagButtonAction(Integer wn,Integer value)
begin
  HtmlLetDClassHtmlFlagButtonAction = LetDClassHtmlFlagButtonAction(wn,value);
  return;
end;

global
function Boolean LetDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record LetVc Letr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Letr);
    if (Letr.HtmlFlag!=0 and SystemSupportsHTMLLetters()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,true);
    end;
  end;
  LetDClassHtmlFlagButtonAfter = res;
  return;
end;

global
function Boolean HtmlLetDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record LetVc Letr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Letr);
    if (Letr.HtmlFlag==0 and SystemSupportsHTMLLetters()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,false);
    end;
  end;
  HtmlLetDClassHtmlFlagButtonAfter = res;
  return;
end;

global
function Boolean LetDClassAllContButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record LetVc Letr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Letr);
    if (Letr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Letr);
    if (Letr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  LetDClassAllContButtonAction = res;
  return;
end;

global
function Boolean HtmlLetDClassAllContButtonAction(Integer wn,Integer value)
begin
  HtmlLetDClassAllContButtonAction = LetDClassAllContButtonAction(wn,value);
  return;
end;

global
function Boolean LetDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record LetVc Letr;
  record LetVc Let2r;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetWindowRecord(wn,Letr);    
    GetPrevWindowRecord(wn,Let2r);    
    if ((Let2r.OKFlag!=0) and (Letr.OKFlag!=0)) then begin res = false; end;
    switch (fieldname) begin
      case "SerNr": res = false;
    end;
  end;
  LetDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean HtmlLetDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  HtmlLetDClassActiveEditField = LetDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  RETURN;
END;

global
function string 40 LetDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record LetVc Letr;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Contact": 
      GetWindowRecord(wn,Letr);
      if (blank(Letr.CustCode)) then begin
        psname = "ContactSClass";
      end;
  end;
  LetDClassSpecPasteName = psname;
  return;
end;

global
function string 40 HtmlLetDClassSpecPasteName(Integer wn,string defpsname)
begin
  HtmlLetDClassSpecPasteName = LetDClassSpecPasteName(wn,defpsname);
  return;
end;

global
procedure LetSearchLsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("SearchLetRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchLetRClass");
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchLetRn";
  RepSpec.critname = "SearchLetRClass";
  RepSpec.Media = 6;
  RepSpec.flags[0] = 0;
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  return;
end;

global
function Boolean LetDClassOnOpenWindow(Integer wn)
begin
  record LetVc Letr;
  string 255 folder;

  GetWindowRecord(wn,Letr);
  if (SystemSupportsHTMLLetters()==false and Letr.HtmlFlag!=0) then begin
    MessageBox(25458,""); 
  end;
  
  return;
end;

global
function Boolean HtmlLetDClassOnOpenWindow(Integer wn)
begin
  HtmlLetDClassOnOpenWindow = LetDClassOnOpenWindow(wn);
  return;
end;

global
procedure LetDClassOnWindowRecordChange(Integer wn)
begin
  record LetVc Letr;
  Integer nwn;

  if (SystemSupportsHTMLLetters()==true) then begin
    GetWindowRecord(wn,Letr);
    nwn = ReOpenHtmlEditorWindow(wn,Letr.HtmlFlag);
  end;
  return;
end;


global
procedure HtmlLetDClassOnWindowRecordChange(Integer wn)
begin
  record LetVc Letr;
  Integer nwn;

  GetWindowRecord(wn,Letr);
  nwn = ReOpenHtmlEditorWindow(wn,Letr.HtmlFlag);
  return;
end;
