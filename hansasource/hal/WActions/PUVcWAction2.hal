remote function Boolean PUDchrsum(record PUVc,Integer);
remote function Boolean GetSVOSerialItem(string,string,record SVOSerVc);
remote function Boolean GetFirstItem(var string,var record INVc);
remote procedure PUVc_InclVATButtonAction(var record PUVc);
remote procedure PUDClassSumEFAfterRemote(var record PUVc,Integer);
remote function Integer PUVc_PasteQuant(var record PUVc,Integer);
remote function Boolean PUVc_PasteToPosCode(var record PUVc,string,string,val,Integer,var string);
remote function Boolean PUVc_PastePosCode(string,string,var string);
external function Boolean PUDClassSwitchRow(Integer,Integer);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
remote function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
remote procedure PURecalcCost(var record PUVc);
remote procedure PUSetShipCost(var record PUVc,Integer);
remote procedure PUSumUp(var record PUVc);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);

global 
function Boolean PUDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  row PUVc PUrw;
  string 255 warning,inwarn;
      
  GetWindowRecord(wn,PUr);
  MatRowGet(PUr,rownr,PUrw);    
  if (changedf!=0) then begin
    if (PUVc_PasteArtCode(PUr,rownr,warning,inwarn)) then begin
      PutWindowRecord(wn,PUr);     
    end;
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    if (PUDClassSwitchRow(wn,rownr)) then begin end;
  end;
  PUDClassArtCodeEFAfter = true;
  return;
end;

global 
function Boolean PUDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  Integer res;
  record POVc POr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    POr.SerNr = -2;
    res = PUVc_PasteQuant(PUr,rownr);
    if (res==0) then begin
      PutWindowRecord(wn,PUr);
    end else begin
      MessageBox(res,"");
    end;
  end;
  PUDClassQuantEFAfter = true;
  return;
end;

global 
function Boolean PUDClassSumEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    PUDClassSumEFAfterRemote(PUr,rownr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassSumEFAfter = true;
  return;
end;

global 
function Boolean PUDClassUPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    
    if (PUr.ShipCost>0) then begin PUSetShipCost(PUr,0); end;
    if (PUr.CustomsCost>0) then begin PUSetShipCost(PUr,1); end;
    if (PUr.Cost1>0) then begin PUSetShipCost(PUr,2); end;
    if (PUr.Cost1>0) then begin PUSetShipCost(PUr,2); end;
    if (PUr.Cost2>0) then begin PUSetShipCost(PUr,3); end;
    if (PUr.Cost3>0) then begin PUSetShipCost(PUr,4); end;
    if (PUr.Cost4>0) then begin PUSetShipCost(PUr,5); end;
    if (PUr.Cost5>0) then begin PUSetShipCost(PUr,6); end;
    PURecalcCost(PUr);

    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassUPriceEFAfter = true;
  return;
end;

global 
function Boolean PUDClassShipCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);    
      chrsum = true;
      if (chrsum) then begin
        PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
        PUrw.CostPrice = p;
        PUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PUr,rownr,PUrw);    
    end else begin
      PUSetShipCost(PUr,0);
      PURecalcCost(PUr);
    end;
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassShipCostEFAfter = true;
  return;
end;

global 
function Boolean PUDClassCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);    
      chrsum = true;
      if (chrsum) then begin
        PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
        PUrw.CostPrice = p;
        PUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PUr,rownr,PUrw);    
    end else begin
      PUSetShipCost(PUr,2);
      PURecalcCost(PUr);
    end;
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCost1EFAfter = true;
  return;
end;

global 
function Boolean PUDClassCost2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);    
      chrsum = true;
      if (chrsum) then begin
        PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
        PUrw.CostPrice = p;
        PUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PUr,rownr,PUrw);    
    end else begin
      PUSetShipCost(PUr,3);
      PURecalcCost(PUr);
    end;
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCost2EFAfter = true;
  return;
end;

global 
function Boolean PUDClassCost3EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);    
      chrsum = true;
      if (chrsum) then begin
        PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
        PUrw.CostPrice = p;
        PUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PUr,rownr,PUrw);    
    end else begin
      PUSetShipCost(PUr,4);
      PURecalcCost(PUr);
    end;
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCost3EFAfter = true;
  return;
end;

global 
function Boolean PUDClassCost4EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);    
      chrsum = true;
      if (chrsum) then begin
        PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
        PUrw.CostPrice = p;
        PUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PUr,rownr,PUrw);    
    end else begin
      PUSetShipCost(PUr,5);
      PURecalcCost(PUr);
    end;
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCost4EFAfter = true;
  return;
end;

global 
function Boolean PUDClassCost5EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);    
      chrsum = true;
      if (chrsum) then begin
        PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
        PUrw.CostPrice = p;
        PUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PUr,rownr,PUrw);    
    end else begin
      PUSetShipCost(PUr,6);
      PURecalcCost(PUr);
    end;
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCost5EFAfter = true;
  return;
end;

global 
function Boolean PUDClassRowCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassRowCost1EFAfter = true;
  return;
end;

global 
function Boolean PUDClassRowCost2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassRowCost2EFAfter = true;
  return;
end;

global 
function Boolean PUDClassRowCost3EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassRowCost3EFAfter = true;
  return;
end;

global 
function Boolean PUDClassRowCost4EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassRowCost4EFAfter = true;
  return;
end;

global 
function Boolean PUDClassRowCost5EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassRowCost5EFAfter = true;
  return;
end;

global 
function Boolean PUDClassExtraEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassExtraEFAfter = true;
  return;
end;

global 
function Boolean PUDClassCustomsCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PUVc PUr;
  row PUVc PUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);    
      chrsum = true;
      if (chrsum) then begin
        PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
        PUrw.CostPrice = p;
        PUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PUr,rownr,PUrw);    
    end else begin
      PUSetShipCost(PUr,1);
      PURecalcCost(PUr);
    end;
    PUDchrsum(PUr,rownr);
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCustomsCostEFAfter = true;
  return;
end;

global
function Boolean PUDClassExtraCostsCalculationButtonAfter(Integer wn,Boolean changedf)
begin        
  record PUVc PUr;  
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,PUr);
    PUSetShipCost(PUr,0);
    PUSetShipCost(PUr,1);
    PUSetShipCost(PUr,2);
    PUSetShipCost(PUr,3);
    PUSetShipCost(PUr,4);
    PUSetShipCost(PUr,5);
    PUSetShipCost(PUr,6);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassExtraCostsCalculationButtonAfter = res;  
  return;
end;

global 
function Boolean PUDClassVATCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    PUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassVATCodeEFAfter = true;
  return;
end;

global 
function Boolean PUDClassPosCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  row PUVc PUrw;
  string 255 tstr;
  
  GetWindowRecord(wn,PUr);
  MatRowGet(PUr,rownr,PUrw);    
  if (changedf) then begin
    if (PUVc_PastePosCode(PUrw.PosCode,PUrw.ArtCode,tstr)==false) then begin
      MessageBox(1396," " & tstr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassPosCodeEFAfter = true;
  return;
end;

global 
function Boolean PUDClassToPosCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  row PUVc PUrw;
  string 255 tstr;
  
  GetWindowRecord(wn,PUr);
  MatRowGet(PUr,rownr,PUrw);    
  if (changedf) then begin
    if (PUVc_PasteToPosCode(PUr,PUrw.ToPosCode,PUrw.ArtCode,PUrw.Quant,rownr,tstr)==false) then begin
      MessageBox(1396," " & tstr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassToPosCodeEFAfter = true;
  return;
end;

global
procedure PUDClassBarcodeData(Integer wn,string bcdata)
begin
  record INVc INr;
  record PUVc PUr;
  row PUVc PUrw;
  LongInt i,rwcnt;
  string 255 sernr;
  string 255 warning,inwarn;
  
  if (GetFirstItem(bcdata,INr)==true) then begin
    goto LPUDClassBarcodeDataDo;
  end;
      
  goto LPUDClassBarcodeDataOut;
  
LPUDClassBarcodeDataDo:;
  GetWindowRecord(wn,PUr);
  rwcnt = MatRowCnt(PUr);
  
  if (sernr=="") then begin
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(PUr,i,PUrw);
      if (PUrw.ArtCode==INr.Code) then begin
        PUrw.Quant = PUrw.Quant + 1;
        MatRowPut(PUr,i,PUrw);
        PutWindowRecord(wn,PUr);
//        PUDClassEditRow(wn,i);
        goto LPUDClassBarcodeDataOut;
      end;
    end;
  end;
  
  ClearRow(PUr,PUrw,1);
  PUrw.ArtCode = INr.Code;
  PUrw.SerialNr = sernr;
  PUrw.Quant = 1;
  MatRowPut(PUr,rwcnt,PUrw);
  
  if (PUVc_PasteArtCode(PUr,rwcnt,warning,inwarn)) then begin
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    
    MatRowGet(PUr,rwcnt,PUrw);
    
    PutWindowRecord(wn,PUr);
    if (PUDClassSwitchRow(wn,rwcnt)) then begin end;
    
    //MatRowGet(PUr,rwcnt,PUrw);
    //PUrw.Qty = 1;
    //MatRowPut(PUr,rwcnt,PUrw);
    //PutWindowRecord(wn,PUr);
  end else begin
    PutWindowRecord(wn,PUr);
    Beep;
  end;

//  PUDClassEditRow(wn,rwcnt);
  
LPUDClassBarcodeDataOut:;
  return;
end;
