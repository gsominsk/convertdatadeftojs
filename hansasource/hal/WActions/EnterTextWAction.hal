external function LongInt CheckIfOpenTabforTable(record RestAccVc);


global
procedure CorrectClassToolEnterText()
begin
  Integer nwn;
  record RcVc RepSpec;
  
  RepSpec.f1 = "";
  nwn = OpenWindow("EnterTextWClass",0,CurWindow,"","",RepSpec);
  return;
end;

global
procedure IVDClassToolEnterText()
begin
  Integer nwn;
  record RcVc RepSpec;
  
  RepSpec.f1 = "";
  nwn = OpenWindow("EnterTextWClass",0,CurWindow,"","",RepSpec);
  return;
end;

global
procedure RestAccToolEnterText()
begin
  Integer nwn;
  record RcVc RepSpec;
  
  RepSpec.f1 = "";
  nwn = OpenWindow("EnterTextWClass",0,CurWindow,"","",RepSpec);
  return;
end;

procedure ToolKeyPad_Numbers(string numberstr)
begin
  Integer wn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  PasteString(wn,numberstr);
  RepSpec.f1 = RepSpec.f1 & numberstr;
  PutWindowRecord(wn,RepSpec);
  DeselectWindow(wn,false);
  return;
end;

global
procedure EnterTextToolKeyPad0()
begin
  ToolKeyPad_Numbers("0");
  return;
end;

global
procedure EnterTextToolKeyPad1()
begin
  ToolKeyPad_Numbers("1");
  return;
end;

global
procedure EnterTextToolKeyPad2()
begin
  ToolKeyPad_Numbers("2");
  return;
end;

global
procedure EnterTextToolKeyPad3()
begin
  ToolKeyPad_Numbers("3");
  return;
end;

global
procedure EnterTextToolKeyPad4()
begin
  ToolKeyPad_Numbers("4");
  return;
end;

global
procedure EnterTextToolKeyPad5()
begin
  ToolKeyPad_Numbers("5");
  return;
end;

global
procedure EnterTextToolKeyPad6()
begin
  ToolKeyPad_Numbers("6");
  return;
end;

global
procedure EnterTextToolKeyPad7()
begin
  ToolKeyPad_Numbers("7");
  return;
end;

global
procedure EnterTextToolKeyPad8()
begin
  ToolKeyPad_Numbers("8");
  return;
end;

global
procedure EnterTextToolKeyPad9()
begin
  ToolKeyPad_Numbers("9");
  RETURN;
END;

global
procedure EnterTextToolKeyPadPoint()
begin
  ToolKeyPad_Numbers(".");
  RETURN;
END;

global
procedure EnterTextToolKeyEnter()
begin
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  record RestAccVc OldRestAccr;
  Integer mwn,wn;
  LongInt oldbartab;
  string 255 activefield;
    
  wn = CurWindow;
  WindowDeactivateField(wn);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  CloseWindow(wn);
  if (mwn>0) then begin
    activefield = WindowActiveField(mwn);
    PasteString(mwn,RepSpec.f1);
    KeyPadEnter(mwn);
    if (WindowValid(mwn)) then begin
      switch (GetWindowFileName(mwn)) begin
        case "RestAccVc":
          if ((WindowActiveField(mwn)=="Resource") or
              (WindowActiveField(mwn)=="Persons") or
              (WindowActiveField(mwn)=="CustCode")) then begin
            GetWindowRecord(mwn,RestAccr);
            oldbartab = CheckIfOpenTabforTable(RestAccr);
            if (oldbartab==-1) then begin
//not needed
//            RepSpec.f1 = "";
//              wn = OpenWindow("EnterTextWClassEnterTextWClass",0,mwn,"","",RepSpec);
            end;
          end;
      end;
      switch (GetWindowClass(mwn)) begin
        case "ForkLiftDriverWClass":
          WindowFieldGoto(mwn,RepSpec,-1,activefield,true);
      end;
    end;
/*
    if (GetWindowFileName(mwn)=="RestAccVc") then begin
      if ((WindowActiveField(mwn)=="Resource") or
          (WindowActiveField(mwn)=="Persons") or
          (WindowActiveField(mwn)=="CustCode")) then begin
        GetWindowRecord(mwn,RestAccr);
        oldbartab = CheckIfOpenTabforTable(RestAccr);
        if (oldbartab==-1) then begin
//not needed
//          RepSpec.f1 = "";
//          wn = OpenWindow("EnterTextWClassEnterTextWClass",0,mwn,"","",RepSpec);
        end;
      end;
    end;
    if (GetWindowClass(mwn)=="ForkLiftDriverWClass") then begin
      WindowFieldGoto(mwn,RepSpec,-1,activefield,true);
    end;
*/    
  end;
  RETURN;
END;

global
procedure EnterTextToolKeyPadBar()
BEGIN
  ToolKeyPad_Numbers("BAR");
  RETURN;
END; 

global
procedure EnterTextToolKeyDel()
BEGIN
  record RcVc RepSpec;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.f1 = Left(RepSpec.f1,len(RepSpec.f1)-1);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  return;
end;

global
procedure CashPayTouchScreenKeypad()
begin
  record RcVc RepSpec;
  record RcVc newRepSpec;
  Integer wn,nwn;
  val v;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  switch (GetWindowClass(wn)) begin
    case "NPTSPaymentTClass":
    case "NPTSCashPaymentTClass":
    otherwise
      newRepSpec.f1 = RepSpec.vals0;
  end;
  nwn = OpenWindow("EnterTextWClass",0,wn,"","",newRepSpec);
  return;
end;

procedure NPTSPaymentToolKeyPad_Numbers(string anumberstr)
begin
  Integer wn;
  record RcVc RepSpec;
  string 255 tstr;
  string 255 pmfield,numberstr,activefield;
  val sign;
  
  wn = CurWindow;
  activefield = WindowActiveField(wn);
  numberstr = anumberstr;
  pmfield = GetWindowString(wn,"PLUSorMINUS");
  tstr = GetWindowString(wn,activefield);
  if (nonblank(tstr)) then begin
    pmfield = "";
  end;
  numberstr = pmfield & numberstr;
  tstr = GetWindowString(wn,activefield) & numberstr;
  PutWindowString(wn,activefield,tstr);
//  tstr = GetWindowString(wn,activefield);
  PasteStringNoSeparator(wn,tstr);
  return;
end;

global
procedure NPTSPaymentToolKeyPadDecimalSeprator()
begin
  NPTSPaymentToolKeyPad_Numbers(DecimalSeparator);
  return;
end;

global
procedure NPTSPaymentToolKeyPad0()
begin
  NPTSPaymentToolKeyPad_Numbers("0");
  return;
end;

global
procedure NPTSPaymentToolKeyPad1()
begin
  NPTSPaymentToolKeyPad_Numbers("1");
  return;
end;

global
procedure NPTSPaymentToolKeyPad2()
begin
  NPTSPaymentToolKeyPad_Numbers("2");
  return;
end;

global
procedure NPTSPaymentToolKeyPad3()
begin
  NPTSPaymentToolKeyPad_Numbers("3");
  return;
end;

global
procedure NPTSPaymentToolKeyPad4()
begin
  NPTSPaymentToolKeyPad_Numbers("4");
  return;
end;

global
procedure NPTSPaymentToolKeyPad5()
begin
  NPTSPaymentToolKeyPad_Numbers("5");
  return;
end;

global
procedure NPTSPaymentToolKeyPad6()
begin
  NPTSPaymentToolKeyPad_Numbers("6");
  return;
end;

global
procedure NPTSPaymentToolKeyPad7()
begin
  NPTSPaymentToolKeyPad_Numbers("7");
  return;
end;

global
procedure NPTSPaymentToolKeyPad8()
begin
  NPTSPaymentToolKeyPad_Numbers("8");
  return;
end;

global
procedure NPTSPaymentToolKeyPad9()
begin
  NPTSPaymentToolKeyPad_Numbers("9");
  return;
end;

procedure NPTSPaymentToolKeyPad_AddNumbers(string anumberstr)
begin
  Integer wn;
  record RcVc RepSpec;
  string 255 tstr;
  string 255 pmfield,numberstr,activefield;
  val sign;
  
  wn = CurWindow;
  activefield = WindowActiveField(wn);
  numberstr = anumberstr;
  pmfield = GetWindowString(wn,"PLUSorMINUS");
  tstr = GetWindowString(wn,activefield);
  if (nonblank(tstr)) then begin
    pmfield = "";
  end;
  numberstr = pmfield & numberstr;
  tstr = StringToVal(GetWindowString(wn,activefield),M4Val) + StringToVal(numberstr,M4Val);
  
  PutWindowString(wn,activefield,tstr);
  tstr = GetWindowString(wn,activefield);
  PasteStringNoSeparator(wn,tstr);
  return;
end;

global
procedure NPTSPaymentToolKeyPad10()
begin
  NPTSPaymentToolKeyPad_AddNumbers("10");
  return;
end;

global
procedure NPTSPaymentToolKeyPad20()
begin
  NPTSPaymentToolKeyPad_AddNumbers("20");
  return;
end;

global
procedure NPTSPaymentToolKeyPad50()
begin
  NPTSPaymentToolKeyPad_AddNumbers("50");
  return;
end;

global
procedure NPTSPaymentToolKeyPadPoint()
begin
  NPTSPaymentToolKeyPad_Numbers(DecimalSeparator);
  return;
end;

global
procedure NPTSPaymentToolKeyEnter()
begin
  Integer mwn,wn;
    
  wn = CurWindow;
  KeyPadEnter(wn);
  return;
end;

global
procedure NPTSPaymentToolSoftFieldKeyDel()
begin
  record RcVc RepSpec;
  Integer wn;
  string 255 tstr,activefield;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  activefield = WindowActiveField(wn);
  tstr = GetWindowString(wn,activefield);
  DeselectWindow(wn,false);
  tstr = Left(tstr,len(tstr)-1);
  PutWindowString(wn,activefield,tstr);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  WindowFieldGoto(wn,RepSpec,-1,activefield,true);
  return;
end;

global
procedure NPTSPaymentToolKeyDel()
begin
  record RcVc RepSpec;
  Integer wn;
  string 255 tstr,activefield;
  
  wn = CurWindow;
  activefield = WindowActiveField(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  tstr = GetFieldValueByName(RepSpec,activefield,-1);
  switch (activefield) begin
    case "vals0": tstr = "";
    case "vals1": tstr = "";
    case "vals2": tstr = "";
    case "vals3": tstr = "";
    otherwise
      tstr = Left(tstr,len(tstr)-1);
  end;
  SetFieldValueByName(RepSpec,activefield,tstr,-1);
  PutWindowRecord(wn,RepSpec);
  DeselectWindow(wn,true);
  SelectWindow(wn);
  PutWindowString(wn,activefield,tstr);
  WindowFieldGoto(wn,RepSpec,-1,activefield,true);
  return;
end;

global
procedure NPTSGCDToolKeyDel()
begin
  record GCVc GCr;
  Integer wn;
  string 255 tstr,activefield;
  
  wn = CurWindow;
  activefield = WindowActiveField(wn);
/*  
  DeselectWindow(wn,true);
  GetWindowRecord(wn,GCr);
*/  
//  tstr = GetFieldValueByName(GCr,activefield,-1);
/*
  switch (activefield) begin
    case "Amount": tstr = GCr.Amount;
    case "TransDate": tstr = GCr.TransDate;
    case "ExpiryDate": tstr = GCr.ExpiryDate;
    case "Comment": tstr = GCr.Comment;
    case "BarCode": tstr = GCr.BarCode;
    case "Type": tstr = GCr.Type;
  end;
*/  
  tstr = Left(tstr,len(tstr)-1);
  PutWindowString(wn,activefield,tstr);
  PasteStringNoSeparator(wn,tstr);
/*  
  SetFieldValueByName(GCr,activefield,tstr,-1);
  PutWindowRecord(wn,GCr);
  SelectWindow(wn);
  WindowFieldGoto(wn,GCr,-1,activefield,true);
*/  
  return;
end;

global
procedure NPTSPaymentToolKeyPadClear()
begin
  record RcVc RepSpec;
  Integer wn;
  string 255 tstr,activefield;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  activefield = WindowActiveField(wn);
  tstr = GetWindowString(wn,activefield);
  DeselectWindow(wn,false);
  tstr = "";
  PutWindowString(wn,activefield,tstr);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  WindowFieldGoto(wn,RepSpec,-1,activefield,true);
  return;
end;

global
procedure NPTSPaymentToolKeyPM()
BEGIN
  record RcVc RepSpec;
  Integer wn;
  string 255 tstr,activefield,pmfield;
  val sign;
  
  wn = CurWindow;
  activefield = WindowActiveField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  pmfield = GetWindowString(wn,"PLUSorMINUS");
  if (pmfield=="+") or (blank(pmfield)) then begin
    pmfield = "-";
  end else begin
    pmfield = "+";
  end;
  sign = -1.00;
  switch (activefield) begin
    case "vals0": RepSpec.vals0 = sign*RepSpec.vals0;
    case "vals1": RepSpec.vals1 = sign*RepSpec.vals1;
    case "vals2": RepSpec.vals2 = sign*RepSpec.vals2;
    case "vals3": RepSpec.vals3 = sign*RepSpec.vals3;
    case "vals4": RepSpec.vals4 = sign*RepSpec.vals4;
    otherwise
      tstr = GetWindowString(wn,activefield);
      if (Left(tstr,1)=="-") then begin
        tstr = Right(tstr,len(tstr)-1);
      end else begin
        tstr = "-" & tstr;
      end;
      PutWindowString(wn,activefield,tstr);
  end;
  PutWindowString(wn,"PLUSorMINUS",pmfield);
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  WindowFieldGoto(wn,RepSpec,-1,activefield,true);
  PutWindowString(wn,activefield,"");  
  ReRunWindowDef(wn);
  return;
end;
