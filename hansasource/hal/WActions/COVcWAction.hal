remote procedure COVc_PastePayDeal(var record COVc);
external procedure ActVcRecordDefClient(var record ActVc);
remote procedure COSumup(var record COVc);
remote procedure CODchrsum(var record COVc,Integer);
remote procedure COVc_PasteTaxTemplateCode(var record COVc,Integer);
remote procedure COVc_PasteSalesMan(var record COVc,string);
remote procedure COVc_PasteCODate(var record COVc);
external function roundmode DefaultRoundMode();
external procedure CalcPrice(val,val,val,var val,Integer);
external procedure RemoveOldContractClassObjects(string,var string);
external function val FindVAT(string,val,Integer,Integer);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external procedure CalcSum(val,val,val,val,var val,Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
remote function Boolean COVc_PasteOrgSerNr(var record COVc,Integer);
external function string 40 SerialNrSClassSpecPName(string);
remote procedure COVc_PastePriceList(var record COVc);
remote function Boolean COVc_PasteVECode(var record COVc);
remote function Boolean COVc_PasteFunderCode(var record COVc);
remote procedure COVc_PasteCurncyCode(var record COVc);
external updating procedure PrintContractIV(var record IVVc);
remote updating procedure COSetStatus(var record COVc,var record COVc,Boolean);
remote updating procedure CreateActFromCOVc(var record COVc,var record ActVc,Boolean,Boolean);
external procedure SetupCustPS2Rn(string,var record RcVc);
remote updating function Integer RecordAction_raPasteCOInInv(var record IVVc,var record ORVc,LongInt,var Boolean);
remote function Boolean PasteCust2InCO(var record COVc,Boolean,var string);
external procedure RecordActionCO_Print(var record COVc,string,Boolean);
remote updating function Boolean RecordAction_rlCOLAct(var record COVc,var record ActVc,Boolean,Boolean);
remote updating function Boolean RecordAction_rlCOLOK(var record COVc);
remote function Boolean COVc_PasteArtCode(var record COVc,Integer,var string);
remote procedure COVc_PasteQuant(var record COVc,Integer);
external procedure RoundRowSum(string,string,string,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);

procedure COVc_PastePrice(var record COVc COp,Integer rownr)
BEGIN
  CODchrsum(COp,rownr);
  RETURN;
END;

procedure COVc_PastePriceFactor(var record COVc COp,Integer rownr)
BEGIN
  CODchrsum(COp,rownr);
  RETURN;
END;

procedure COVc_PastevRebate(var record COVc COp,Integer rownr)
BEGIN
  CODchrsum(COp,rownr);
  RETURN;
END;

procedure COVc_PasteFrPrice(var record COVc COp)
BEGIN
  record GeneralOptionBlock GenOptr;
  val pr,t;  

  BlockLoad(GenOptr);
  COp.FrBase = MulRateToBase1(COp.CurncyCode,COp.FrPrice,COp.FrRate,COp.ToRateB1,COp.ToRateB2,COp.BaseRate1,COp.BaseRate2,DefaultCurRoundOff);
  pr = 100 - COp.FrGPPercent;
  CalcSum(1,COp.FrBase,0,pr,t,GenOptr.UseDiscount);
  COp.FrGP = t;
  COSumup(COp); 
  RETURN;
END;

function Boolean CODClassVATCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record COVc COr;
 
  if (changedf) then begin
    GetWindowRecord(wn,COr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;
  CODClassVATCodeEFAfter = true;
  return;
end;

function Boolean CODClassContractClassEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record COVc COr;
  record ContractClassBlock CCb;
  row ContractClassBlock CCbw;
  string 255 tstr,t2;
  Integer rwcnt,i;
 
  if (changedf) then begin
    GetWindowRecord(wn,COr);
    tstr = WindEFstr(wn);
    if ((tstr!=COr.ContractClass) and (nonblank(tstr))) then begin
      t2 = COr.Objects;
      RemoveOldContractClassObjects(tstr,t2);
      COr.Objects = t2;
    end;
    BlockLoad(CCb);
    rwcnt = MatRowCnt(CCb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CCb,i,CCbw);
      if (CCbw.Code==COr.ContractClass) then begin
        if (nonblank(COr.Objects)) Then begin
          COr.Objects = COr.Objects & ",";
        end;
        COr.Objects = COr.Objects & CCbw.DefObject;
      end;
    end;
    PutWindowRecord(wn,COr);
  end;
  CODClassContractClassEFAfter = true;
  return;
end;

function Boolean CODClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record COVc COr;
  row COVc COrw;
  string 255 inwarning;
 
  GetWindowRecord(wn,COr);
  MatRowGet(COr,rownr,COrw);
  if ((changedf!=0) or ((blank(COrw.Spec)) and (nonblank(COrw.ArtCode)))) then begin
    GetWindowRecord(wn,COr);
    if (COVc_PasteArtCode(COr,rownr,inwarning)) then begin
      PutWindowRecord(wn,COr);
      if (nonblank(inwarning)) then begin
          MessageBox(0,inwarning);
      end;
    end else begin
      Beep;
    end;
  end;
  CODClassArtCodeEFAfter = true;
  return;
end;

function Boolean CODClassOrgSerNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record COVc COr;
 
  GetWindowRecord(wn,COr);
  if (changedf!=0) then begin
    GetWindowRecord(wn,COr);
    if (COVc_PasteOrgSerNr(COr,rownr)) then begin
      PutWindowRecord(wn,COr);
    end else begin
      Beep;
    end;
  end;
  CODClassOrgSerNrEFAfter = true;
  return;
end;
 
function Boolean CODClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record COVc COr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,COr);
    COVc_PasteQuant(COr,rownr);
    //COSumup(COr);
    PutWindowRecord(wn,COr);
  end;
  CODClassQuantEFAfter = true;
  return;
end;

function Boolean CODClassCODateEFAfter(Integer wn,Boolean changedf)
begin
  record COVc COr;
 
  if (changedf) then begin
    GetWindowRecord(wn,COr);
    COVc_PasteCODate(COr);
    PutWindowRecord(wn,COr);
  end;
  CODClassCODateEFAfter = true;
  return;
end;

function Boolean CODClassCustCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record COVc COr;
  string 255 warning;

  GetWindowRecord(wn,COr);    
  if ((changed!=0) or ((blank(COr.Addr0)) and (nonblank(COr.CustCode)))) then begin
    GetWindowRecord(wn,COr);    
    if (PasteCust2InCO(COr,true,warning)) then begin
      PutWindowRecord(wn,COr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  CODClassCustCodeEFAfter = true;
  return;
end;

function Boolean CODClassCurncyCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record COVc COr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,COr);
    COVc_PasteCurncyCode(COr);
    PutWindowRecord(wn,COr);
  end;
  CODClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean CODClassBaseRate2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,COr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassBaseRate2EFAfter = true;
  return;
end;

function Boolean CODClassBaseRate1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,COr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassBaseRate1EFAfter = true;
  return;
end;

function Boolean CODClassFrRateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,COr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassFrRateEFAfter = true;
  return;
end;

function Boolean CODClassToRateB1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,COr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassToRateB1EFAfter = true;
  return;
end;

function Boolean CODClassToRateB2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,COr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassToRateB2EFAfter = true;
  return;
end;

function Boolean CODClassFrPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;
  val t;

  if (changed!=0) then begin  
    GetWindowRecord(wn,COr);
    COVc_PasteFrPrice(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassFrPriceEFAfter = true;
  return;
end;

function Boolean CODClassFunderCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;
  val t;

  GetWindowRecord(wn,COr);
  if ((changed!=0) or ((blank(COr.FunderName)) and (nonblank(COr.FunderCode)))) then begin
    if (COVc_PasteFunderCode(COr)) then begin
      PutWindowRecord(wn,COr);
    end else begin
      Beep;
    end;
  end;  
  CODClassFunderCodeEFAfter = true;
  return;
end;

function Boolean CODClassVECodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;
  val t;

  GetWindowRecord(wn,COr);
  if ((changed!=0) or ((blank(COr.VEName)) and (nonblank(COr.VECode)))) then begin
    if (COVc_PasteVECode(COr)) then begin
      PutWindowRecord(wn,COr);
    end else begin
      Beep;
    end;
  end;  
  CODClassVECodeEFAfter = true;
  return;
end;

function Boolean CODClassPriceListEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,COr);
    COVc_PastePriceList(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassPriceListEFAfter = true;
  return;
end;

function Boolean CODClassPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,COr);
    COVc_PastePrice(COr,rownr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassPriceEFAfter = true;
  return;
end;

function Boolean CODClassvRebateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,COr);
    COVc_PastevRebate(COr,rownr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassvRebateEFAfter = true;
  return;
end;

function Boolean CODClassPriceFactorEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,COr);
    COVc_PastePriceFactor(COr,rownr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassPriceFactorEFAfter = true;
  return;
end;

function Boolean CODClassSumEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record COVc COr;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,COr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassSumEFAfter = true;
  return;
end;

function Boolean CODClassSalesManEFAfter(Integer wn,Boolean changedf)
begin  
  record COVc COr;

  if (changedf) then begin  
    GetWindowRecord(wn,COr);
    COVc_PasteSalesMan(COr,WindEFstr(wn));    
    PutWindowRecord(wn,COr);
  end;
  CODClassSalesManEFAfter = true;
  return;
end;

global
function Boolean CODClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record COVc COr;
  Boolean chsum;

  if (changedf) then begin  
    GetWindowRecord(wn,COr);
    COVc_PasteTaxTemplateCode(COr,rownr);
    COSumup(COr);
    PutWindowRecord(wn,COr);
  end;  
  CODClassTaxTemplateCodeEFAfter = true;
  return;
end;

function Boolean CODClassPayDealEFAfter(Integer wn,Boolean changedf)
begin
  record COVc COr;
  record PDVc PDr;
  
  if (changedf) then begin
    GetWindowRecord(wn,COr);    
    COVc_PastePayDeal(COr);    
    PutWindowRecord(wn,COr);    
  end; 
  CODClassPayDealEFAfter = true;
  return;
end;

global
function Boolean CODClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Price": res = CODClassPriceEFAfter(wn,fn,rownr,changed);
    case "vRebate": res = CODClassvRebateEFAfter(wn,fn,rownr,changed);
    case "PriceFactor": res = CODClassPriceFactorEFAfter(wn,fn,rownr,changed);
    case "Sum": res = CODClassSumEFAfter(wn,fn,rownr,changed);
    case "PriceList": res = CODClassPriceListEFAfter(wn,fn,rownr,changed);
    case "VECode": res = CODClassVECodeEFAfter(wn,fn,rownr,changed);
    case "FunderCode": res = CODClassFunderCodeEFAfter(wn,fn,rownr,changed);
    case "FrPrice": res = CODClassFrPriceEFAfter(wn,fn,rownr,changed);
    case "FrRate": res = CODClassFrRateEFAfter(wn,fn,rownr,changed);
    case "ToRateB1": res = CODClassToRateB1EFAfter(wn,fn,rownr,changed);
    case "ToRateB2": res = CODClassToRateB2EFAfter(wn,fn,rownr,changed);
    case "BaseRate1": res = CODClassBaseRate1EFAfter(wn,fn,rownr,changed);
    case "BaseRate2": res = CODClassBaseRate2EFAfter(wn,fn,rownr,changed);

    case "CurncyCode": res = CODClassCurncyCodeEFAfter(wn,fn,rownr,changed);
    case "Quant": res = CODClassQuantEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = CODClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "CustCode": res = CODClassCustCodeEFAfter(wn,fn,rownr,changed);
    case "OrgSerNr": res = CODClassOrgSerNrEFAfter(wn,rownr,changed);
    case "VATCode": res = CODClassVATCodeEFAfter(wn,rownr,changed!=0);
    case "TaxTemplateCode": res = CODClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    case "ContractClass": res = CODClassContractClassEFAfter(wn,rownr,changed!=0);
    case "CODate": res = CODClassCODateEFAfter(wn,changed!=0);
    case "SalesMan": res = CODClassSalesManEFAfter(wn,changed!=0);
    case "PayDeal": res = CODClassPayDealEFAfter(wn,changed!=0);
  end;
  CODClassAfterEditField = res;
  return;
end;

global
updating procedure OKCOLsm()
begin
  record COVc COr;
  Integer wn,i;
  
  wn = CurWindow;  
  i = 1;
  while (GetRecordFromBrowse(COr,wn,i)) begin
    if (RecordAction_rlCOLOK(COr)) then begin
    end;
    i = i + 1;
  end;  
  UpdateBrowses("COVc");
  RETURN;
END;

global
updating procedure CreateActCOLsm()
BEGIN
  record COVc COr;
  Integer wn,i,nwn;
  record ActVc Actr;

  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(COr,wn,i)) begin
    if (RecordAction_rlCOLAct(COr,Actr,true,true)) then begin
      if (i==1) then begin
        nwn = OpenWindow("ActDClass",1,0,"","",Actr);  
      end;
    end;
    i = i+ 1;
  end;
  UpdateBrowses("COVc");
  RETURN;
END;

global
procedure PrintCOL(Integer wn,Boolean previewf)
BEGIN
  record COVc COr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(COr,wn,i)) begin
    RecordActionCO_Print(COr,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
updating procedure IVFromCODsm()
BEGIN
  Integer wn,nwn;
  Integer normalmode,r;
  record COVc COr;
  record IVVc IVr;
  record ORVc ORr;
  Boolean orderf;
  
  wn = CurWindow;
  if (WindowState(wn)==normalmode) then begin//Rs_normal
    GetWindowRecord(wn,COr);
    IVr.OrderNr = COr.SerNr;
    if (UserCanAction("COToInv",true)) then begin
      r = RecordAction_raPasteCOInInv(IVr,ORr,COr.SerNr,orderf);
      if (r!=0) then begin
        if (orderf) then begin
          nwn = OpenWindow("ORDClass",1,0,"","",ORr);  
          UpdateBrowses("ORVc");
        end else begin
          nwn = OpenWindow("IVDClass",1,0,"","",IVr);  
          UpdateBrowses("IVVc");
//          PrintContractIV(IVr); // Shouldn't do more than creating the Invoice.
        end;
      end else begin
        MessageBox(20563,"");
        Beep;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"COToInv"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure CUStatusCOLsm()
BEGIN
  record COVc COr;
  record RcVc RepSpec;
  Integer wn,i;
  string 20 firstcu;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(COr,wn,i)) begin
    if (i==1) then begin
      firstcu = COr.CustCode;
    end;
    i = i + 1;
  end;  
  SetupCustPS2Rn(firstcu,RepSpec);
  if (nonblank(RepSpec.f1)) then begin
    RepSpec.f1 = RepSpec.f1 & ":";
  end;
  RepSpec.f1 = RepSpec.f1 & COr.CustCode;  
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure COStatusCUDsm()
BEGIN
  record COVc COr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,COr);
  SetupCustPS2Rn(COr.CustCode,RepSpec);
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure CreateActCODsm()
BEGIN
  record COVc COr;
  record ActVc Actr;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,COr);
  RecordNew(Actr);
  ActVcRecordDefClient(Actr);
  CreateActFromCOVc(COr,Actr,true,true);
  nwn = OpenWindow("ActDClass",1,0,"","",Actr);
  SetRLink(wn,true);  
  RETURN;
END;

global
updating procedure COVcCreateActivity()
begin
  CreateActCODsm;
  return;
end;

global
procedure OpenCOCQStatCODsm()
BEGIN
  record COVc COr;
  record COCQStatVc COCQr;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,COr);
  COCQr.COSerNr = COr.SerNr;
  COCQr.COChildNr = COr.ChildSerNr;
  if (ReadFirstKey("COSerNr",COCQr,2,true)) then begin
    nwn = OpenWindow("COCQStatDClass",1,0,"","",COCQr);  
  end;
  RETURN;
END;

global
updating procedure UpdateCOCQStatCODsm()
BEGIN
  record COVc COr;
  record COVc CO2r;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,COr);
  GetPrevWindowRecord(wn,CO2r);
  COSetStatus(COr,CO2r,true);
  RETURN;
END;

global
function Boolean CODClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  if (HasLocalization("ISL")==false) then begin//vatIcelandic
    res = false;
  end;
  CODClassExportFlagButtonAction = res;
  RETURN;
END;

global 
function Boolean CODClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record COVc COr;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,COr);
      if (COr.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,COr);
      if (COr.OKFlag!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  CODClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean CODClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record COVc COr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,COr);    
    if (COr.OKFlag!=0) then begin res = false; end;
  end;
LCODClassDeleteRowTest:;  
  CODClassDeleteRowTest = res;
  return;
end;

global
function Boolean CODClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record COVc COr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,COr);    
    COSumup(COr);
    PutWindowRecord(wn,COr);    
  end;
  CODClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean CODClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record COVc COr;
  record COVc curCOr;
  row COVc COrw;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetWindowRecord(wn,curCOr);
    GetPrevWindowRecord(wn,COr);
    if (COr.OKFlag!=0) then begin // If contract was unoked and saved as such, then you can change stuff on it. That's how it should be
      res = false;
      switch (fieldname) begin
        case "SerNr": res = false;
        case "ChildSerNr": res = false;
      end;
    end;
  end;
  switch (fieldname) begin
    case "Spec":
      if (HasLocalization("PRT")) then begin
        GetWindowRecord(wn,COr);
        MatRowGet(COr,rownr,COrw);
        if (nonblank(COrw.ArtCode)) then begin
          res = false;
        end;
      end;
  end;
  CODClassActiveEditField = res;
  RETURN;
END;

global
function string 40 CODClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  CODClassSpecPasteName = psname;
  return;
end;

global
procedure OpenVatMatrixCODsm()
begin
  record TaxMatrixVc TMr;
  record COVc COr;
  row COVc COrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,COr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(COr,rowno,COrw);
    UnpackRowFieldMatrix(COrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(COr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;
