remote procedure OPDClassOnOpenWindowRemote(var record OPVc,var Integer);
remote function Integer OPTestApprovalStatus(record OPVc);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
remote function Boolean OPVc_PasteToRateB1BankVal(var record OPVc,Integer);
external function Boolean DateWarned(Date,string);
external function Boolean DateLocked(Date,string);
external function roundmode DefaultRoundMode();
remote procedure OPVc_PasteVATCode(var record OPVc,Integer);
external procedure Mul2VAT(string,val,var val,var val,Integer);
external procedure FindOTforAcc(string,var string);
external function Boolean GetPM(string,var string,var string);
external function Integer PMCheckType(string,var string,var string);
remote procedure OPVc_PasteOrderNr(var record OPVc,Integer);
remote procedure OPVc_PastePrepayNr(var record OPVc,Integer);
remote function Boolean OPVc_PasteChequeNr(var record OPVc,Integer);
remote procedure OPVc_PasteBankFeeVal(var record OPVc,Integer);
remote procedure OPVc_PasteBankVal(var record OPVc,Integer);
remote procedure OPVc_PasteRecVal(var record OPVc,Integer);
remote procedure OPVc_PasteRecCurncy(var record OPVc,Integer);
remote procedure OPVc_PasteVECode(var record OPVc,Integer);
remote procedure OPVc_PasteCurPayVal(var record OPVc);
remote procedure OPVc_PastePayCurCode(var record OPVc);
remote procedure OPVc_PasteTransDate(var record OPVc);
remote procedure OPPasteRowPayMode2(var record OPVc,Integer,string);
remote procedure OPPastePayMode2(var record OPVc,string);
remote procedure PastePMInOP(var record OPVc);
external updating procedure RecLAction_rlOPDPrint(record RcVc,var record OPVc,Integer,Boolean,Boolean);
remote function Boolean PasteInvIn2OPr(var record OPVc,Integer,Date,Integer,val,var string,Boolean,var Boolean);
remote procedure OPVc_PasteBankCurncy(var record OPVc,Integer);

global
procedure OPSumup(var record OPVc OPp,Boolean addfeef)
BEGIN
  row OPVc OPrw;
  Integer i,rwcnt,cnt;
  Boolean onecurncy,testf;
  string 5 curncy;
  val curval;  

  onecurncy = false;
  rwcnt = MatRowCnt(OPp);
  for (i = 0 ; i<rwcnt ;i=i+1) begin
    MatRowGet(OPp,i,OPrw);
    if (OPrw.ovst==0) then begin
      testf = true;
      if (OPrw.stp==kPaymentRowTypeSettlementDiscount) then begin testf = false; end;
      if (addfeef==false) then begin
        if (OPrw.stp==kPaymentRowTypeBankFee) then begin testf = false; end;
      end;
      if (testf) then begin // 5 - Cash Disc ,7 - Fee
        if ((nonblank(OPrw.VECode)) or (OPrw.VISerNr!=-1) or (OPrw.PInvVal!=blankval)) then begin
          if (cnt==0) then begin
            curncy = OPrw.BankCurncy;
            onecurncy = true;
            cnt = cnt + 1;
          end;
          if (curncy!=OPrw.BankCurncy) then begin
            onecurncy = false;
          end;  
          curval = curval + OPrw.BankVal;
          curval = curval + OPrw.BankFeeVal;
        end;
      end;
    end;
  end;
  if (onecurncy==false) then begin
    curncy = "";
    curval = blankval;
  end;
  OPp.CurPayVal = curval;
  OPp.PayCurCode = curncy;
  RETURN; 
END;

//ROWS
function Boolean OPDClassVISerNrEFAfter(Integer wn,Integer rownr,Integer changed,Integer fn)
BEGIN
  Boolean res,installmentf;
  record OPVc OPr;
  val chk;
  string 255 warning;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,OPr);
    if (rownr>-1) then begin
      if (PasteInvIn2OPr(OPr,rownr,OPr.TransDate,1,chk,warning,false,installmentf)) then begin
        if (installmentf) then begin
          MessageBox(20772,"");
        end;
        PutWindowRecord(wn,OPr);    
      end else begin
        Beep;
      end;
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end;
  end;
  OPDClassVISerNrEFAfter = res;
  RETURN;
END;

function Boolean OPDClassInstNrEFAfter(Integer wn,Integer rownr,Integer changed,Integer fn)
BEGIN
  Boolean res,installmentf;
  record OPVc OPr;
  val chk;
  string 255 warning;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,OPr);
    if (rownr>-1) then begin
      if (PasteInvIn2OPr(OPr,rownr,OPr.TransDate,1,chk,warning,true,installmentf)) then begin
        if (installmentf) then begin
//          MessageBox(20772,"");
        end;
        PutWindowRecord(wn,OPr);    
      end else begin
        Beep;
      end;
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end;
  end;
  OPDClassInstNrEFAfter = res;
  RETURN;
END;

function Boolean OPDClassBankCurncyEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if ((changed!=0) and (rownr>-1)) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteBankCurncy(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassBankCurncyEFAfter = res;
  RETURN;
END;

function Boolean OPDClassPayModeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OPr);    
    if (rownr<0) then begin
      OPPastePayMode2(OPr,WindEFstr(wn));    
    end else begin
      OPPasteRowPayMode2(OPr,rownr,WindEFstr(wn));    
    end;
    PutWindowRecord(wn,OPr);
  end;
  OPDClassPayModeEFAfter = res;
  RETURN;
END;

function Boolean OPDClassTransDateEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteTransDate(OPr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassTransDateEFAfter = res;
  RETURN;
END;

function Boolean OPDClassPayDateEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPr.TransDate = OPr.PayDate;
    OPVc_PasteTransDate(OPr);
    PutWindowRecord(wn,OPr);
    if (DateLocked(OPr.TransDate,"OPVc")) then begin
      MessageBox(1046,"");
    end else begin
      if (DateWarned(OPr.TransDate,"OPVc")) then begin
        MessageBox(1045,"");
      end;
    end;    
  end;
//JJCS  
  OPDClassPayDateEFAfter = res;
  RETURN;
END;

function Boolean OPDClassPayCurCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PastePayCurCode(OPr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassPayCurCodeEFAfter = res;
  RETURN;
END;

function Boolean OPDClassCurPayValEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteCurPayVal(OPr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassCurPayValEFAfter = res;
  RETURN;
END;

function Boolean OPDClassCoefEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;
  row OPVc OPrw;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    MatRowGet(OPr,rownr,OPrw);
    OPrw.BankVal = OPrw.RecVal/OPrw.Coef;
    MatRowPut(OPr,rownr,OPrw);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassCoefEFAfter = res;
  RETURN;
END;

function Boolean OPDClassVECodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteVECode(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassVECodeEFAfter = res;
  RETURN;
END;

function Boolean OPDClassRecCurncyEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteRecCurncy(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassRecCurncyEFAfter = res;
  RETURN;
END;

function Boolean OPDClassRecValEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteRecVal(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassRecValEFAfter = res;
  RETURN;
END;

function Boolean OPDClassBankValEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteBankVal(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassBankValEFAfter = res;
  return;
end;

function Boolean OPDClassB1BankValEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record OPVc OPr;
  row OPVc OPrw;
  record BaseCurBlock BCb;

  res = true;
  if (changedf) then begin
    BlockLoad(BCb);
    
    GetWindowRecord(wn,OPr);
    MatRowGet(OPr,rownr,OPrw);
    if (OPrw.BankCurncy==BCb.BaseCur1) then begin
      OPrw.BankVal = OPrw.B1BankVal;
      MatRowPut(OPr,rownr,OPrw);
      PutWindowRecord(wn,OPr);
    end;
  end;
  OPDClassB1BankValEFAfter = res;
  return;
end;

function Boolean OPDClassBankFeeValEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteBankFeeVal(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassBankFeeValEFAfter = res;
  RETURN;
END;

function Boolean OPDClassVATCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteVATCode(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassVATCodeEFAfter = res;
  RETURN;
END;

function Boolean OPDClassChequeNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    if (OPVc_PasteChequeNr(OPr,rownr)) then begin
      PutWindowRecord(wn,OPr);
    end else begin
      Beep;
    end;
  end;
  OPDClassChequeNrEFAfter = res;
  RETURN;
END;

function Boolean OPDClassPrepayNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PastePrepayNr(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassPrepayNrEFAfter = res;
  RETURN;
END;

function Boolean OPDClassOrderNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    OPVc_PasteOrderNr(OPr,rownr);
    PutWindowRecord(wn,OPr);
  end;
  OPDClassOrderNrEFAfter = res;
  RETURN;
END;

function Boolean OPDClassToRateB1BankValEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record OPVc OPr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,OPr);
    if (OPVc_PasteToRateB1BankVal(OPr,rownr)) then begin
      PutWindowRecord(wn,OPr);
    end;
  end;
  OPDClassToRateB1BankValEFAfter = res;
  RETURN;
END;

global
function Boolean OPDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "VISerNr": res = OPDClassVISerNrEFAfter(wn,rownr,changed,fn);
    case "InstNr": res = OPDClassInstNrEFAfter(wn,rownr,changed,fn);
    case "BankCurncy": res = OPDClassBankCurncyEFAfter(wn,rownr,changed);
    case "PayMode": res = OPDClassPayModeEFAfter(wn,rownr,changed!=0);
    case "TransDate": res = OPDClassTransDateEFAfter(wn,changed!=0);
    case "PayDate": res = OPDClassPayDateEFAfter(wn,changed!=0);
    case "PayCurCode": res = OPDClassPayCurCodeEFAfter(wn,changed!=0);
    case "CurPayVal": res = OPDClassCurPayValEFAfter(wn,changed!=0);

    case "Coef": res = OPDClassCoefEFAfter(wn,rownr,changed!=0);
    case "VECode": res = OPDClassVECodeEFAfter(wn,rownr,changed!=0);
    case "RecCurncy": res = OPDClassRecCurncyEFAfter(wn,rownr,changed!=0);
    case "RecVal": res = OPDClassRecValEFAfter(wn,rownr,changed!=0);
    case "BankVal": res = OPDClassBankValEFAfter(wn,rownr,changed!=0);
    case "B1BankVal": res = OPDClassB1BankValEFAfter(wn,rownr,changed!=0);
    case "BankFeeVal": res = OPDClassBankFeeValEFAfter(wn,rownr,changed!=0);
    case "VATCode": res = OPDClassVATCodeEFAfter(wn,rownr,changed!=0);
    case "ChequeNr": res = OPDClassChequeNrEFAfter(wn,rownr,changed!=0);
//    case "PrepayNr": res = OPDClassPrepayNrEFAfter(wn,rownr,changed!=0);//Mladen aint like it
    case "OrderNr": res = OPDClassOrderNrEFAfter(wn,rownr,changed!=0);
    case "FrRateBankVal": res = OPDClassToRateB1BankValEFAfter(wn,rownr,changed!=0);
    case "ToRateB1BankVal": res = OPDClassToRateB1BankValEFAfter(wn,rownr,changed!=0);
    case "ToRateB2BankVal": res = OPDClassToRateB1BankValEFAfter(wn,rownr,changed!=0);
    case "BaseRate1BankVal": res = OPDClassToRateB1BankValEFAfter(wn,rownr,changed!=0);
    case "BaseRate2BankVal": res = OPDClassToRateB1BankValEFAfter(wn,rownr,changed!=0);
  end;
  OPDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean OPDClassDoneFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record OPVc OPr;
  record OPVc OP2r;
  Integer err;
 
  res = true;
  GetWindowRecord(wn,OPr);
  err = OPTestApprovalStatus(OPr);
  if (err!=0) then begin
    MessageBox(err,"");
    res = false;
    goto LOPDClassDoneFlagButtonAction;
  end;
  if (WindowState(wn)==Rs_normal) then begin
/* Normal mode means that the Second record doesn't exist.
    GetPrevWindowRecord(wn,OP2r);
    if ((OPr.OrderedFlag==0) or (OP2r.OrderedFlag==0)) then begin
      res = false;
    end;    
*/
    if (OPr.Invalid!=0) then begin res = false; end;
    if (OPr.DoneFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_insert) then begin
    if (OPr.OrderedFlag==0) then begin
      res = false;
    end;    
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,OP2r);
    if (OPr.OrderedFlag==0) then begin
      res = false;
    end;    
    if ((OPr.DoneFlag!=0) and (OP2r.DoneFlag!=0)) then begin
      res = false;
    end;
    if (OP2r.Invalid!=0) then begin res = false; end;
  end;  
  if (HasLocalization("ARG")) then begin
    if (OPr.DoneFlag!=0 and res) then begin
      MessageBox(21560,"");
    end;
  end;
//if (OPButActSpec(OPp,OP2p,WindowState(wn),*(Integer*)ap2)==false) then res = false;//I think it is not needed
LOPDClassDoneFlagButtonAction:;
  OPDClassDoneFlagButtonAction = res;
  RETURN;
END;

global
function Boolean OPDClassOrderedFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record OPVc OPr;
  Integer normalmode;
  Integer err;
 
  res = true;
  normalmode = 0;//Rs_normal
  GetWindowRecord(wn,OPr);
  err = OPTestApprovalStatus(OPr);
  if (err!=0) then begin
    MessageBox(err,"");
    res = false;
    goto LOPDClassOrderedFlagButtonAction;
  end;
  if (WindowState(wn)==normalmode) then begin
    if (OPr.OrderedFlag!=0) then begin
      res = false;
      if (OPr.DoneFlag==0) then begin
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,OPr);
    if (OPr.OrderedFlag!=0) then begin
      res = false;
    end;
  end;  
//if (OPButActSpec(OPp,OP2p,WindowState(wn),*(Integer*)ap2)==false) then res = false;//I think it is not needed
LOPDClassOrderedFlagButtonAction:;
  OPDClassOrderedFlagButtonAction = res;
  RETURN;
END;

global
function Boolean OPDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record OPVc OPr;
  
  res = true;
  GetWindowRecord(wn,OPr);
  if (OPr.DoneFlag!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;    
  end;
  OPDClassUpdateTest = res;
  RETURN;
END;

global
updating function Boolean OPDClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res,testf;
  Integer err;
  record OPVc OPr;
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,OPr);
  
  testf = true;
  if (UserCanAction("PrintPreviewNotApproved",false)==false) then begin
    err = OPTestApprovalStatus(OPr);
  end;
  if (err!=0) then begin
    MessageBox(err,"");
    testf = false;
  end;  
  if (testf) then begin 
    if ((WindowState(wn)==Rs_normal) and (previewf==false)) then begin
      RecLAction_rlOPDPrint(RepSpec,OPr,1,true,true);
    end else begin
      testf = PrintDocument(OPr,"OPDForm",true);
    end; 
  end;
  res = true;
  OPDClassPrint = res;
  RETURN;
END;

global 
function Boolean OPDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record OPVc OPr;
  Boolean res;

  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,OPr);
    if (OPr.OrderedFlag!=0) then begin res = false; end;
  end;
  OPDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean OPDClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record OPVc OPr;
  row OPVc OPrw;

  res = true;  
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,OPr);
      if (OPr.DoneFlag!=0) then begin res = false; end;
      if (OPr.OrderedFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,OPr);
      if (OPr.DoneFlag!=0) then begin res = false; end;      
      if (OPr.OrderedFlag!=0) then begin res = false; end;
  end;
  if (res) then begin
    GetWindowRecord(wn,OPr);
    if (rownr>0) then begin
      MatRowGet(OPr,rownr,OPrw);
      if (OPrw.stp!=kPaymentRowTypeNormal) then begin res = false; end;
    end;
  end;
  OPDClassInsertRowTest = res;
  return;
end;

global 
function Boolean OPDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record OPVc OPr;
  Boolean res;

  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,OPr);
    if (OPr.DoneFlag!=0) then begin res = false; end;
  end;
  OPDClassOverStrikeTest = res;
  return;
end;

global
function Boolean OPDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record OPVc OPr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,OPr);    
    OPSumup(OPr,true);
    PutWindowRecord(wn,OPr);    
  end;
  OPDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean OPDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res,testf,whtaxcalculatedf;
  record OPVc OPr;
  record OPVc OP2r;
  row OPVc OPrw;
  Integer i,rwcnt;
  record CYBlock CYb;
  Integer nwn;
  
  res = true;
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LOPDClassActiveEditField;
    end;
  end;
  GetWindowRecord(wn,OPr);    
  if (HasLocalization("ARG")) then begin
    rwcnt = MatRowCnt(OPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      if (nonblank(OPrw.WHTax)) then begin
        whtaxcalculatedf = true;
        i = rwcnt;        
      end;
    end;
  end;

  if (rownr<0) then begin
    switch (fieldname) begin
      case "PayDate": 
        if (HasLocalization("ARG")) then begin
          if (whtaxcalculatedf) then begin
            res = false;
            goto LOPDClassActiveEditField;
          end;
        end;
      case "TransDate": 
        if (HasLocalization("ARG")) then begin
          if (whtaxcalculatedf) then begin
            res = false;
            goto LOPDClassActiveEditField;
          end;
        end;
        if (res) then begin
          BlockLoad(CYb);
          if (CYb.AllowTransDateEdit==0) then begin
            res = false;
            goto LOPDClassActiveEditField;
          end;
        end;
    end;
  end;
  GetPrevWindowRecord(wn,OP2r);    
  switch (WindowState(wn)) begin
    case Rs_insert:
      if (rownr>=0) then begin
        switch (fieldname) begin
          case "BankVal": 
            if (HasLocalization("ARG")) then begin
              MatRowGet(OPr,rownr,OPrw);
              if (nonblank(OPrw.WHTax)) then begin
                res = false;
                goto LOPDClassActiveEditField;
              end;
            end;
          case "RecVal": 
            if (HasLocalization("ARG")) then begin
              MatRowGet(OPr,rownr,OPrw);
              if (nonblank(OPrw.WHTax)) then begin
                res = false;
                goto LOPDClassActiveEditField;
              end;
            end;
        end;
      end;
    case Rs_update:
      testf = false;
      if (OP2r.DoneFlag!=0) then begin 
        res = false;
        goto LOPDClassActiveEditField; 
      end;
      if (OP2r.Invalid!=0) then begin
        res = false;
        goto LOPDClassActiveEditField; 
      end;
      if (rownr>=0) then begin
        switch (fieldname) begin
          case "BankVal": 
            if (HasLocalization("ARG")) then begin
              MatRowGet(OPr,rownr,OPrw);
              if (nonblank(OPrw.WHTax)) then begin
                res = false;
                goto LOPDClassActiveEditField;
              end;
            end;
          case "RecVal": 
            if (HasLocalization("ARG")) then begin
              MatRowGet(OPr,rownr,OPrw);
              if (nonblank(OPrw.WHTax)) then begin
                res = false;
                goto LOPDClassActiveEditField;
              end;
            end;
        end;
      end;
      if (OP2r.OrderedFlag!=0) then begin
        if (rownr>=0) then begin
          switch (fieldname) begin
            case "BankVal": res = true;
            case "BankCurncy": res = true;
            case "Comment": res = true;
            case "Objects": res = true;
            case "RecVal":
              MatRowGet(OPr,rownr,OPrw);
              if (OPrw.stp==kPaymentRowTypeNormal) then begin
                res = false;
                goto LOPDClassActiveEditField;
              end;
            case "RecCurncy":
              MatRowGet(OPr,rownr,OPrw);
              if (OPrw.stp==kPaymentRowTypeNormal) then begin
                res = false;
                goto LOPDClassActiveEditField;
              end;
            otherwise
              res = false;
              goto LOPDClassActiveEditField;
          end;
        end else begin
          switch (fieldname) begin
            case "PayCurCode": res = true;
            case "CurPayVal": res = true;
            case "TransDate": res = true;
            case "PayDate": res = true;
            otherwise testf = true;
          end;
        end;
      end;    
  end;
  res = true;
  if (rownr>=0) then begin
    switch (fieldname) begin
      case "PInvCurncy": res = false;
      case "PInvVal": res = false;
      case "PInvOutstand": res = false;
      case "WHTax": res = false;
      case "WHTaxBase": res = false;
    end;
  end;
  
LOPDClassActiveEditField:;  
  switch (fieldname) begin
    case "LangCode": res = true;
  end;
  OPDClassActiveEditField = res;
  RETURN;
END;

function string 40 OPDClassSpecPasteNameObjects(Integer wn)
BEGIN
  record OPVc OPr;
  row OPVc OPrw;
  Integer rownr;
  string 200 typ,tstr;
  string 255 psname,accnr;

  GetWindowRecord(wn,OPr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(OPr,rownr,OPrw);
    tstr = OPrw.PayMode;
    if (blank(tstr)) then begin
      tstr = OPr.PayMode;
    end;
    if (GetPM(tstr,accnr,tstr)==false) then begin
    end;    
    FindOTforAcc(accnr,typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  OPDClassSpecPasteNameObjects = psname;
  RETURN;
END;

function string 40 OPDClassSpecPasteNameInstNr(Integer wn)
begin
  record OPVc OPr;
  row OPVc OPrw;
  Integer rownr;
  string 200 typ,tstr;
  string 255 psname,accnr;

  GetWindowRecord(wn,OPr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(OPr,rownr,OPrw);
  end;
  if (OPrw.VISerNr>0) then begin
    psname = "APInstSClass";
  end else begin    
    psname = "APInstallSClass";
  end;
  OPDClassSpecPasteNameInstNr = psname;
  return;
end;

global
function string 40 OPDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record OPVc OPr;
  row OPVc OPrw;
  Integer rownr,cht;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ChequeNr":
      GetWindowRecord(wn,OPr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(OPr,rownr,OPrw);
      end;
      if (nonblank(OPrw.PayMode)) then begin
        cht = PMCheckType(OPrw.PayMode,psname,psname);
      end else begin
        cht = PMCheckType(OPr.PayMode,psname,psname);
      end;    
      switch (cht) begin
        case 0: psname = "";
        case 1: psname = "CheckSClass";
        case 2: psname = "OwnCheckSClass";
        otherwise psname = "";
      end;
    case "Objects": psname = OPDClassSpecPasteNameObjects(wn);
    case "InstNr": psname = OPDClassSpecPasteNameInstNr(wn);
    case "PayMode": psname = "PMBSClass";
  end;
  OPDClassSpecPasteName = psname;
  return;
end;

global
function Boolean OPDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record OPVc OPr;
  row OPVc OPrw;
  Integer nwn,cht;
  string 255 tstr,thepm;
  record CheckVc Checkr;
  record OwnCheckVc OwnCheckr;
  
  switch (fieldname) begin
    case "ChequeNr":
      GetWindowRecord(wn,OPr);  
      MatRowGet(OPr,rownr,OPrw);
      if (OPrw.ChequeNr!=-1) then begin
        thepm = OPrw.PayMode;
        if (blank(thepm)) then begin
          thepm = OPr.PayMode; 
        end;
        cht = PMCheckType(thepm,tstr,tstr);
        switch (cht) begin
          case kPayModeTypeCheque:
            Checkr.SerNr = OPrw.ChequeNr;
            if (ReadFirstMain(Checkr,1,true)) then begin
              nwn = OpenWindow("CheckDClass",0,0,"","",Checkr);    
            end;
          case kPayModeTypeOwnCheque:
            OwnCheckr.SerNr = OPrw.ChequeNr;
            if (ReadFirstMain(OwnCheckr,1,true)) then begin
              nwn = OpenWindow("OwnCheckDClass",0,0,"","",OwnCheckr);    
            end;
        end;        
      end;
  end;
  OPDClassOpenRecord = res;
  return;
end;

global
function Boolean OPDClassOnOpenWindow(Integer wn)
begin
  record OPVc OPr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,OPr);
  OPDClassOnOpenWindowRemote(OPr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  OPDClassOnOpenWindow = false;
  return;
end;

global
procedure OPDClassOnWindowRecordChange(Integer wn)
begin
  record OPVc OPr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,OPr);
  OPDClassOnOpenWindowRemote(OPr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
