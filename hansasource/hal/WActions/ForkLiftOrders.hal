remote function LongInt FindSHNrForkLiftQueueArray(var LongInt,var string,LongInt,LongInt,string);
external procedure RestAccToolEnterText();
remote updating function Integer ScanPalletBarCodeWClassStockMov(LongInt,string);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);
remote updating function Integer NT7000PickingConfirmRemote(LongInt,string);
remote updating procedure NT7000PickingCancelRemote(LongInt);
remote updating procedure NT7000PickingFinishRemote(string,LongInt);
remote updating procedure NT7000PickingGoOutRemote(LongInt);
remote updating procedure NT7000PickingGotoWraperRemote(LongInt);
remote updating function LongInt NT7000PickingTakePalletRemote(string,LongInt);
remote updating procedure NT7000PickingOrderRemote(LongInt,LongInt);
remote procedure SendQMessageToNT7000(Integer,Integer,Integer,string,string,string,Integer);

global
procedure ReconnectToNt7000()
BEGIN
  SendQMessageToNT7000(99,0,0,"","","",1);
  RETURN;
END;

global
updating procedure NT7000PickingPrintLabel()
BEGIN
  Integer wn;
  record RcVc RepSpec;
  string 255 tstr;
  LongInt shnr;
  Boolean tmpf;
  record NT7000PickModeBlock NT7000PickModeRec;

  tstr = GetWindowString(CurWindow,"deliverynr");
  shnr = StringToLongInt(tstr);
  if (shnr>0) then begin
    BlockLoad(NT7000PickModeRec);    
    RepSpec.f4 = shnr;
    RepSpec.Language = "DELLA";
    RepSpec.long1 = NT7000PickModeRec.PalletCnt + 1;
    RepSpec.repname = "PalletLabForm";
    tmpf = PrintDocument(RepSpec,"PalletLabForm",false);
    if (tmpf) then begin
      NT7000PickModeRec.PalletCnt = NT7000PickModeRec.PalletCnt + 1;
      BlockStore(NT7000PickModeRec);
    end;
  end;  
  RETURN;
END;

global 
procedure NT7000PickingClose()
BEGIN
  CloseWindow(CurWindow);      
  RETURN;
END;

global
procedure UpdateForkLiftDriverW()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;  
  CloseWindow(wn);      
  nwn = OpenWindow("ForkLiftDriverWClass",1,0,"","",RepSpec);
  RETURN;
END;

function Boolean CheckIfCurrentConfirmed(LongInt forkliftquenr,LongInt curforkliftquenr)
BEGIN
  Boolean res;
  record LocationVc Locr;
  record ForkLiftQueVc curForkLiftQuer;
  
  res = true;
  if (forkliftquenr!=curforkliftquenr) then begin
    curForkLiftQuer.SerNr = curforkliftquenr;
    Locr.Code = curForkLiftQuer.FrLocation;
    ReadFirstMain(Locr,1,true);
    if (Locr.WHMForkLiftSystem==2) then begin
      if (ReadFirstMain(curForkLiftQuer,1,true)) then begin
        if (curForkLiftQuer.Status==1) then begin
          if (curForkLiftQuer.Done==0) then begin res = false; end;
        end;
      end;
    end;
  end;
  CheckIfCurrentConfirmed = res;
  RETURN;
END;

updating procedure SetNT7000PickModecurforkliftquenr(LongInt fknr)
BEGIN
  record NT7000PickModeBlock NT7000PickModeRec;

  BlockLoad(NT7000PickModeRec);
  NT7000PickModeRec.ActiveForkLiftQueNr = fknr;
  BlockStore(NT7000PickModeRec);
  RETURN;
END;

global
updating procedure NT7000PickingOrder0()
BEGIN
  string 255 tstr;
  LongInt forkliftquenr,shnr,curforkliftquenr;
  record RcVc RepSpec;

  tstr = GetWindowString(CurWindow,"forkliftque0");
  forkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  curforkliftquenr = StringToLongInt(tstr);
  
  tstr = GetWindowNameArg(CurWindow);
  shnr = StringToLongInt(tstr);
  if (forkliftquenr>0) then begin
    if (CheckIfCurrentConfirmed(forkliftquenr,curforkliftquenr)) then begin
      NT7000PickingOrderRemote(forkliftquenr,curforkliftquenr);
      WindowFieldGoto(CurWindow,RepSpec,-1,"qty0",true);
      tstr = forkliftquenr;
      PutWindowString(CurWindow,"curforkliftquenr",tstr);
      SetNT7000PickModecurforkliftquenr(forkliftquenr);
    end else begin
      MessageBox(0,USetStr(1736));
    end;
  end;  
  RETURN;
END;

global
updating procedure NT7000PickingOrder1()
BEGIN
  string 255 tstr;
  LongInt forkliftquenr,shnr,curforkliftquenr;
  record RcVc RepSpec;

  tstr = GetWindowString(CurWindow,"forkliftque1");
  forkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  curforkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowNameArg(CurWindow);
  shnr = StringToLongInt(tstr);
  if (forkliftquenr>0) then begin
    if (CheckIfCurrentConfirmed(forkliftquenr,curforkliftquenr)) then begin
      NT7000PickingOrderRemote(forkliftquenr,curforkliftquenr);
      WindowFieldGoto(CurWindow,RepSpec,-1,"qty1",true);
      tstr = forkliftquenr;
      PutWindowString(CurWindow,"curforkliftquenr",tstr);
      SetNT7000PickModecurforkliftquenr(forkliftquenr);
    end else begin
      MessageBox(0,USetStr(1736));
    end;
  end;
  RETURN;
END;

global
updating procedure NT7000PickingOrder2()
BEGIN
  string 255 tstr;
  LongInt forkliftquenr,shnr,curforkliftquenr;
  record RcVc RepSpec;

  tstr = GetWindowString(CurWindow,"forkliftque2");
  forkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  curforkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowNameArg(CurWindow);
  shnr = StringToLongInt(tstr);
  if (forkliftquenr>0) then begin
    if (CheckIfCurrentConfirmed(forkliftquenr,curforkliftquenr)) then begin
      NT7000PickingOrderRemote(forkliftquenr,curforkliftquenr);
      WindowFieldGoto(CurWindow,RepSpec,-1,"qty2",true);
      tstr = forkliftquenr;
//StopAlert("NT7000PickingOrder2 tstr= " & tstr & " curforkliftquenr " & curforkliftquenr);
      PutWindowString(CurWindow,"curforkliftquenr",tstr);
      SetNT7000PickModecurforkliftquenr(forkliftquenr);
    end else begin
      MessageBox(0,USetStr(1736));
    end;
  end;
  RETURN;
END;

global
updating procedure NT7000PickingOrder3()
BEGIN
  string 255 tstr;
  LongInt forkliftquenr,shnr,curforkliftquenr;
  record RcVc RepSpec;

  tstr = GetWindowString(CurWindow,"forkliftque3");
  forkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  curforkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowNameArg(CurWindow);
  shnr = StringToLongInt(tstr);
  if (forkliftquenr>0) then begin
    if (CheckIfCurrentConfirmed(forkliftquenr,curforkliftquenr)) then begin
      NT7000PickingOrderRemote(forkliftquenr,curforkliftquenr);
      WindowFieldGoto(CurWindow,RepSpec,-1,"qty3",true);
      tstr = forkliftquenr;
//StopAlert("NT7000PickingOrder3 tstr= " & tstr & " curforkliftquenr " & curforkliftquenr);
      PutWindowString(CurWindow,"curforkliftquenr",tstr);
      SetNT7000PickModecurforkliftquenr(forkliftquenr);
    end else begin
      MessageBox(0,USetStr(1736));
    end;
  end;
  RETURN;
END;

global
updating procedure NT7000PickingOrder4()
BEGIN
  string 255 tstr;
  LongInt forkliftquenr,shnr,curforkliftquenr;
  record RcVc RepSpec;

  tstr = GetWindowString(CurWindow,"forkliftque4");
  forkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  curforkliftquenr = StringToLongInt(tstr);
  tstr = GetWindowNameArg(CurWindow);
  shnr = StringToLongInt(tstr);
  if (forkliftquenr>0) then begin
    if (CheckIfCurrentConfirmed(forkliftquenr,curforkliftquenr)) then begin
      NT7000PickingOrderRemote(forkliftquenr,curforkliftquenr);
      WindowFieldGoto(CurWindow,RepSpec,-1,"qty4",true);
      tstr = forkliftquenr;
//StopAlert("NT7000PickingOrder4 tstr= " & tstr & " curforkliftquenr " & curforkliftquenr);
      PutWindowString(CurWindow,"curforkliftquenr",tstr);
      SetNT7000PickModecurforkliftquenr(forkliftquenr);
    end else begin
      MessageBox(0,USetStr(1736));
    end;
  end;
  RETURN;
END;

global
updating procedure NT7000PickingCancel()
BEGIN
  string 255 tstr;
  LongInt shnr;

  tstr = GetWindowString(CurWindow,"deliverynr");
  shnr = StringToLongInt(tstr);
  if (shnr>0) then begin
    NT7000PickingCancelRemote(shnr);
  end;
  RETURN;
END;

updating procedure SetNT7000PickModeBlock(LongInt shnr,LongInt fknr,Integer palletcnt)
BEGIN
  record NT7000PickModeBlock NT7000PickModeRec;

  BlockLoad(NT7000PickModeRec);
  NT7000PickModeRec.ActiveSHNr = shnr;
  NT7000PickModeRec.ActiveForkLiftQueNr = fknr;
  if (palletcnt!=-1) then begin
    NT7000PickModeRec.PalletCnt = palletcnt;
  end;
  BlockStore(NT7000PickModeRec);
  RETURN;
END;

global
updating procedure NT7000PickingFinish()
BEGIN
  string 255 tstr;
  LongInt shnr,curforkliftquenr;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  tstr = GetWindowString(CurWindow,"deliverynr");
  shnr = StringToLongInt(tstr);
  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  curforkliftquenr = StringToLongInt(tstr);

  if (shnr>0) then begin
    NT7000PickingFinishRemote(LMb.DefLocation,shnr);
    SetNT7000PickModeBlock(-1,-1,0);
  end;
  CloseWindow(CurWindow);
  RETURN;
END;

global
updating procedure NT7000PickingTakePallet()
BEGIN
  string 255 tstr;
  LongInt shnr,forkliftquenr;
  record LocalMachineBlock LMb;

  BlockLoad(LMb);
  forkliftquenr = GetWindowString(CurWindow,"curforkliftquenr");
//StopAlert("NT7000PickingTakePallet shnr= " & shnr & " forkliftquenr=" & forkliftquenr);
  if (true) then begin//forkliftquenr<=0 , how to protect? ??
    tstr = GetWindowNameArg(CurWindow);
    shnr = StringToLongInt(tstr);
    if (shnr>0) then begin
      forkliftquenr = NT7000PickingTakePalletRemote(LMb.DefLocation,shnr);
      tstr = forkliftquenr;
      PutWindowString(CurWindow,"curforkliftquenr",tstr);
//StopAlert("NT7000PickingTakePallet shnr= " & shnr & " forkliftquenr=" & forkliftquenr);
    end;
  end else begin
//StopAlert("Action cannot be performed ");
  end;
  RETURN;
END;

global
updating procedure NT7000PickingGotoWraper()
BEGIN
  string 255 tstr;
  LongInt forkliftquenr;
  record ForkLiftQueVc curForkLiftQuer;
  record ForkLiftQueVc nextForkLiftQuer;

  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  forkliftquenr = StringToLongInt(tstr);
//StopAlert("NT7000PickingGoOut or to Wraper forkliftquenr " & forkliftquenr);  
  if (forkliftquenr>0) then begin
    curForkLiftQuer.SerNr = forkliftquenr;
    if (ReadFirstMain(curForkLiftQuer,1,true)) then begin end;

    NT7000PickingGotoWraperRemote(forkliftquenr);

    nextForkLiftQuer.QueType = 0;
    nextForkLiftQuer.Status = 2;
    if (ReadLastKey("QueTypeStatusSH",nextForkLiftQuer,2,true)) then begin  
      if (nextForkLiftQuer.SHNr==curForkLiftQuer.SHNr) then begin
        UpdateForkLiftDriverW;
      end;
    end;
    SetNT7000PickModeBlock(-1,-1,0);
  end;
  RETURN;
END;

global
updating procedure NT7000PickingGoOut()
BEGIN
  string 255 tstr;
  LongInt forkliftquenr;

  NT7000PickingGotoWraper;
/*  
  tstr = GetWindowString(CurWindow,"curforkliftquenr");
  forkliftquenr = StringToLongInt(tstr);  
StopAlert("NT7000PickingGoOut forkliftquenr " & forkliftquenr);  
  if (forkliftquenr>0) then begin
    NT7000PickingGoOutRemote(forkliftquenr);
  end;
*/  
  RETURN;
END;

global
updating procedure NT7000PickingConfirm()
BEGIN
  Integer res;
  val v;
  string 255 qtys,tstr;
  LongInt curforkliftquenr,forkliftque0,forkliftque1,forkliftque2,forkliftque3,forkliftque4;
  Integer wn,what;
  LongInt shnr;
  record RcVc RepSpec;
  Boolean testf;
  record ForkLiftQueVc curForkLiftQuer;
  record ForkLiftQueVc nextForkLiftQuer;
      
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  shnr = StringToLongInt(GetWindowNameArg(wn));
  if (shnr<=0) then begin
    goto LNT7000PickingConfirm;
  end;
  curforkliftquenr = GetWindowString(CurWindow,"curforkliftquenr");
  
  
  forkliftque0 = StringToLongInt(GetWindowString(wn,"forkliftque0"));
  forkliftque1 = StringToLongInt(GetWindowString(wn,"forkliftque1"));
  forkliftque2 = StringToLongInt(GetWindowString(wn,"forkliftque2"));
  forkliftque3 = StringToLongInt(GetWindowString(wn,"forkliftque3"));
  forkliftque4 = StringToLongInt(GetWindowString(wn,"forkliftque4"));
  
  
  if (curforkliftquenr==forkliftque0) then begin 
    qtys = GetWindowString(wn,"qty0");
    if (nonblank(qtys)) then begin testf = true; end;
    what = 0;
    goto LNT7000PickingConfirmDo;
  end;
  if (curforkliftquenr==forkliftque1) then begin 
    qtys = GetWindowString(wn,"qty1");
    if (nonblank(qtys)) then begin testf = true; end;
    what = 1;
    goto LNT7000PickingConfirmDo;
  end;
  if (curforkliftquenr==forkliftque2) then begin 
    qtys = GetWindowString(wn,"qty2");
    if (nonblank(qtys)) then begin testf = true; end;
    what = 2;
    goto LNT7000PickingConfirmDo;
  end;
  if (curforkliftquenr==forkliftque3) then begin 
    qtys = GetWindowString(wn,"qty3");
    if (nonblank(qtys)) then begin testf = true; end;
    what = 3;
    goto LNT7000PickingConfirmDo;
  end;
  if (curforkliftquenr==forkliftque4) then begin 
    qtys = GetWindowString(wn,"qty4");
    if (nonblank(qtys)) then begin testf = true; end;
    what = 4;
    goto LNT7000PickingConfirmDo;
  end;
LNT7000PickingConfirmDo:;  
  if (testf) then begin
//StopAlert("NT7000PickingConfirm" & " curforkliftquenr=" & curforkliftquenr);
    res = NT7000PickingConfirmRemote(curforkliftquenr,qtys);
    switch (res) begin
      case 1: MessageBox(0,USetStr(1737));
      case 2: MessageBox(0,USetStr(1738));
      case 3: MessageBox(0,USetStr(1739));
      case 4: MessageBox(0,USetStr(1740));
    end;
    PutWindowString(wn,"qty" & what,"");

    PutWindowRecord(wn,RepSpec);
    tstr = GetWindowString(wn,"nrofbuttons");
    UpdateForkLiftDriverW;

/*
    shnr = StringToLongInt(tstr);

    if (shnr==1) then begin
      curForkLiftQuer.ForkLiftSystemID = curforkliftquenr;
      if (ReadFirstMain(curForkLiftQuer,2,true)) then begin end;
      
      nextForkLiftQuer.ForkLiftSystemID = curForkLiftQuer.ForkLiftSystemID;
      if (ReadLastKey("ForkLiftSystemID",nextForkLiftQuer,2,true)) then begin end;
      if (curForkLiftQuer.SerNr!=nextForkLiftQuer.SerNr) then begin shnr = 2; end;
    end;
    
    if (shnr>1) then begin  
      UpdateForkLiftDriverW;
    end;
*/    
  end else begin
    MessageBox(0,USetStr(1741));
    WindowFieldGoto(CurWindow,RepSpec,-1,"qty" & what,true);
  end;
LNT7000PickingConfirm:;
  RETURN;
END;

global
updating function Boolean ForkLiftDriverWClassOnOpenWindow(Integer wn)
begin
  Array string 40 alabel;
  Array string 40 aartcode;
  Array string 40 alocarea;
  Array val aqty;
  Array Integer afullpallet;
  Array string 20 aforkliftnr;
  Array string 255 aartcodename;
  Integer i,acnt;
  string 255 tstr;
  record RcVc RepSpec;
  Boolean TrHs,found;
  record NT7000PickModeBlock NT7000PickModeRec;
  LongInt SHNr,actforkliftquenr;
  string 5 forklift;
  record LocalMachineBlock LMb;
  
  BlockLoad(NT7000PickModeRec);
  BlockLoad(LMb);
  SHNr = FindSHNrForkLiftQueueArray(actforkliftquenr,forklift,NT7000PickModeRec.ActiveSHNr,NT7000PickModeRec.ActiveForkLiftQueNr,NT7000PickModeRec.ForkLift);
  if (SHNr>0) then begin
    TrHs = true;
    if (TrHs) then begin
      if (true) then begin
        if (true) then begin
          SetWindowNameArg(wn,SHNr);
          ForkLiftQueueArray(LMb.DefLocation,forklift,alabel,aartcode,aartcodename,alocarea,aqty,afullpallet,aforkliftnr,acnt,false,NT7000PickModeRec.ActiveSHNr,NT7000PickModeRec.ActiveForkLiftQueNr,NT7000PickModeRec.ForkLift);
          for (i=0;i<acnt;i=i+1) begin
            tstr = aforkliftnr[i];
            PutWindowString(wn,"forkliftque" & i,tstr);//here
            if (i==5) then begin i = acnt; end;
            if (blank(alabel[i])) then begin
              WindowFieldGoto(wn,RepSpec,-1,"qty0",true);
            end;
          end;
          tstr = SHNr;
          PutWindowString(wn,"deliverynr",tstr);
          tstr = acnt;
          PutWindowString(wn,"nrofbuttons",tstr);
          tstr = actforkliftquenr;
          PutWindowString(CurWindow,"curforkliftquenr",tstr);          
          TrHs = false;
          if (NT7000PickModeRec.ActiveForkLiftQueNr<=0) or (NT7000PickModeRec.ActiveSHNr<=0) then begin
            SetNT7000PickModeBlock(SHNr,actforkliftquenr,-1);
          end;
          for (i=0;i<acnt;i=i+1) begin
            tstr = aforkliftnr[i];
            if (StringToLongInt(aforkliftnr[i])==actforkliftquenr) then begin
              WindowFieldGoto(wn,RepSpec,-1,"qty" & i,true);
              i = acnt;
            end;
          end;          
        end;
      end;
    end;
  end;
LForkLiftDriverWClassOnOpenWindow:;  
  ForkLiftDriverWClassOnOpenWindow = false;
  return;
end;

global
updating function Boolean ForkLiftDriverWClassOnClose(Integer wn,Integer wn2)
begin
  ForkLiftDriverWClassOnClose = false;
  return;
end;

global
procedure OpenScanPallePUW()
BEGIN
  Integer nwn;
  record RcVc RepSpec;
  
  nwn = OpenWindow("ScanPalletBarCodePUWClass",1,0,"","",RepSpec);
//  RestAccToolEnterText;
  return;
end;

global
procedure OpenScanPalleProdW()
BEGIN
  Integer nwn;
  record RcVc RepSpec;
  
  nwn = OpenWindow("ScanPalletBarCodeProdWClass",1,0,"","",RepSpec);
  return;
end;

global
procedure OpenPickingW()
BEGIN
  Integer nwn;
  record RcVc RepSpec;
  
  RepSpec.repname = "PositionsForSHRn";
  RepSpec.Media = mtScreen;
  nwn = OpenWindow("PositionsForSHRClass",1,0,"","",RepSpec);
  RestAccToolEnterText;
  return;
end;

updating function Boolean ScanPalletPUf1EFAfter(Integer wn,Boolean  changedf)
begin  
  Integer res;
  record RcVc rcr;
  LongInt l;

  if (changedf) then begin  
    GetWindowRecord(wn,rcr);    
    if (nonblank(rcr.f1)) then begin
      l = StringToLongInt(rcr.f1);
      if (l>0) then begin
        res = ScanPalletBarCodeWClassStockMov(l,"PUVc");
      end;  
      if (res!=0) then begin
        MessageBox(res,"");
      end else begin
        rcr.f1 = "";
      end;
    end;
    PutWindowRecord(wn,rcr);
  end;  
  ScanPalletPUf1EFAfter = true;
  return;
end;

global
updating function Boolean ScanPalletBarCodePUWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "f1": res = ScanPalletPUf1EFAfter(wn,changed!=0);
  end;
  ScanPalletBarCodePUWClassAfterEditField = res;
  RETURN;
END;

updating function Boolean ScanPalletProdf1EFAfter(Integer wn,Boolean  changedf)
begin  
  Integer res;
  record RcVc rcr;
  LongInt l;

  if (changedf) then begin  
    GetWindowRecord(wn,rcr);    
    if (nonblank(rcr.f1)) then begin
      l = StringToLongInt(rcr.f1);
      if (l>0) then begin
        res = ScanPalletBarCodeWClassStockMov(l,"ProdVc");
      end;  
      if (res!=0) then begin
        MessageBox(res,"");
      end else begin
        rcr.f1 = "";
      end;
    end;
    PutWindowRecord(wn,rcr);
  end;  
  ScanPalletProdf1EFAfter = true;
  return;
end;

global
updating function Boolean ScanPalletBarCodeProdWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "f1": res = ScanPalletProdf1EFAfter(wn,changed!=0);
  end;
  ScanPalletBarCodeProdWClassAfterEditField = res;
  RETURN;
END;

global
procedure ScanPalletClose()
BEGIN
  CloseWindow(CurWindow);
  RETURN;
END;

global
procedure PickingListWClose()
BEGIN
  CloseWindow(CurWindow);
  RETURN;
END;

global
procedure PickingListWRunIt(record RcVc rcr)
BEGIN
  record RcVc RepSpec;

  RepSpec.f1 = rcr.f1;
  RepSpec.Media = mtPrinter;
  RepSpec.repname = "Sh2Form";
  RunReport(RepSpec,0);

  RecordNew(RepSpec);  
  RepSpec.f1 = rcr.f1;
  RepSpec.Media = mtPrinter;
  RepSpec.repname = "PositionsForSHRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure PickingListWRun()
BEGIN
  record RcVc rcr;

  DeselectWindow(CurWindow,false);
  GetWindowRecord(CurWindow,rcr);
  CloseWindow(CurWindow);
  PickingListWRunIt(rcr);
  RETURN;
END;

global
function Boolean PickingListWClassOnClose(Integer wn,Integer wn2)
begin
  record RcVc rcr;
    
  DeselectWindow(CurWindow,false);
  GetWindowRecord(CurWindow,rcr);
  PickingListWRunIt(rcr);
  PickingListWClassOnClose = false;
  return;
end;

//_____________________
//report

global 
procedure OrdersToForkLiftReport()
BEGIN
  record RcVc RepSpec;
  
//  ReportDefaults(RepSpec,"INLastPPriceRClass");  
  RepSpec.repname = "OrdersToForkLiftRn";
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure DblForkLifttoPos(string dblstr,string l,Integer currepwn)
BEGIN
  record ForkLiftQueVc oldForkLiftQuer;
  record ForkLiftQueVc ForkLiftQuer;

  if (nonblank(l)) then begin
    ForkLiftQuer.SerNr = StringToLongInt(l);
    if (ReadFirstMain(ForkLiftQuer,1,true)) then begin 
//StopAlert("100?" & ForkLiftQuer.StockMovNr & ForkLiftQuer.FrPosCode);    

    RecordCopy(oldForkLiftQuer,ForkLiftQuer);
    ForkLiftQuer.Status = 1;
    ForkLiftQuer.Attempts = ForkLiftQuer.Attempts + 1;
    ForkLiftQuer.ForkLiftSystemID = "NT7000";
    if (RecordUpdate(oldForkLiftQuer,ForkLiftQuer,false)==0) then begin end;

//Goto pos    
    end;
  end;
  RETURN;
END;

updating function LongInt NewForkLiftQue(string artcode,string frposcode,string toposcode,string comment,
                                         Integer prio,val q,string forklift)
BEGIN
  LongInt res;
  record ForkLiftQueVc newForkLiftQuer;

  RecordNew(newForkLiftQuer);
  newForkLiftQuer.QueType = prio;
  newForkLiftQuer.StockMovNr = -1;
  newForkLiftQuer.Attempts = 0;
  newForkLiftQuer.Status = 0;
  newForkLiftQuer.Attempts = 0;
  newForkLiftQuer.ForkLiftSystemID = "";
  newForkLiftQuer.Comment = comment;
  newForkLiftQuer.SHNr = -1;
  newForkLiftQuer.FrPosCode = frposcode;
  newForkLiftQuer.ToPosCode = toposcode;
  newForkLiftQuer.ArtCode = artcode;
  newForkLiftQuer.Quant = q;
  newForkLiftQuer.ForkLift = forklift;
  newForkLiftQuer.SerNr = NextSerNr("ForkLiftQueVc",CurrentDate,-1,false,"");
  if (newForkLiftQuer.SerNr>0) then begin
    if (RecordStore(newForkLiftQuer,false)) then begin 
      res = newForkLiftQuer.SerNr;
    end;
  end;
  NewForkLiftQue = res;
  RETURN;
END;

global
updating procedure DblForkLifttoWraper(string dblstr,string l,Integer currepwn)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  LongInt nr;
  record LocationVc Locr;

  if (nonblank(l)) then begin
//Create new event in que, just to be able to delete it when is done
//StopAlert("100?" & ForkLiftQuer.StockMovNr & MainWHM.WraperPosCode);    
    ForkLiftQuer.SerNr = StringToLongInt(l);
    if (ReadFirstMain(ForkLiftQuer,1,true)) then begin 
      Locr.Code = ForkLiftQuer.FrLocation;
      ReadFirstMain(Locr,1,true);
      nr = NewForkLiftQue("","",Locr.WHMWraperPosCode,"moving to wraper",
                          0,blankval,ForkLiftQuer.ForkLift);    
    end;
  end;
  RETURN;
END;

global
updating procedure DblForkLifttoDelPos(string dblstr,string l,Integer currepwn)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record LocationVc Locr;
  LongInt nr;

  if (nonblank(l)) then begin
//Create new event in que, just to be able to delete it when is done
    ForkLiftQuer.SerNr = StringToLongInt(l);
    if (ReadFirstMain(ForkLiftQuer,1,true)) then begin 
      Locr.Code = ForkLiftQuer.FrLocation;
      ReadFirstMain(Locr,1,true);
      nr = NewForkLiftQue("","",Locr.WHMDeliveryPosCode,"moving to delivery conveyour",
                          0,blankval,ForkLiftQuer.ForkLift);
//StopAlert("100?" & ForkLiftQuer.StockMovNr & MainWHM.DeliveryPosCode);    
    end;
  end;
  RETURN;
END;

global
procedure DblForkLiftNotEnou(string dblstr,string l,Integer currepwn)
BEGIN
  record ForkLiftQueVc ForkLiftQuer;
  record RcVc RepSpec;
  Integer nwn;

  if (nonblank(l)) then begin
    ForkLiftQuer.SerNr = StringToLongInt(l);
    if (ReadFirstMain(ForkLiftQuer,1,true)) then begin 
      nwn = OpenWindow("CorrectPosQuantClass",1,0,"","",RepSpec);
      WindowDeactivatefield(nwn);
      GetWindowRecord(nwn,RepSpec);   
      RepSpec.f1 = ForkLiftQuer.ArtCode;
      RepSpec.f2 = ForkLiftQuer.FrPosCode;
      RepSpec.vals0 = ForkLiftQuer.Quant;
      PutWindowRecord(nwn,RepSpec);   
      WindowFieldGoto(nwn,RepSpec,-1,"vals1",true);
    end;
  end;
  RETURN;
END;

global
procedure CorrectPosQCancel()
BEGIN
  Integer wn;
  
  wn = CurWindow;
  CloseWindow(wn);      
  RETURN;
END;

global
updating procedure CorrectPosQSave()
BEGIN
  Integer wn;
  
  wn = CurWindow;
  
  CloseWindow(wn);      
  RETURN;
END;
