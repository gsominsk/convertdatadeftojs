external procedure IVCashSumup(var record IVCashVc,Boolean);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
external procedure ReverseTransaction(string);
external updating function Boolean CCPayIVDWithCardData(Integer,string);
external function Boolean UsePostOKButton();

updating procedure CheckIVForCC(integer wn)
begin
  record IVVc IVr;
  row IVVc IVrw;
  val CcSumVal;
  integer i,rwcnt;
  
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin goto LCheckIVForCC; end;
  end;
  GetWindowRecord(wn,IVr);
  rwcnt = MatRowCnt(IVr);
  for (i = rwcnt-1 ; i>=0; i=i-1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
      if (nonblank(IVrw.Sum)) then begin
        CcSumVal = IVrw.Sum;
      end;  
      i = 0;               
    end;
  end;
  
  if (CcSumVal!=0) then begin 
    CCPayIVDWithCardData(wn,"");
  end else begin
    if (IVr.RetnValue>=0) then begin 
      IVr.OKFlag = 1;
      PutWindowRecord(wn,IVr);
      WindowDoOK(wn,0);    
    end;
  end;
LCheckIVForCC:;    
end;

global
updating procedure OpenStdCCWindow(integer wn)
begin

  if (UsePostOKButton==false or IsStandardProduct==false) then begin 
    goto LOpenCCWindow;
  end;
  if (wn>0) then begin
    switch (GetWindowClass(wn)) begin
      case "IVDClass": CheckIVForCC(wn);
    end;  
  end;
LOpenCCWindow:;
end;

function integer FindIVRowToPay(record IVVc IVr)
begin
  integer rwcnt,i,res;
  row IVVc IVrw;
  
  res = -1;
  rwcnt = MatRowCnt(IVr);
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
      res = i;
      i = rwcnt;
    end;
  end;
  FindIVRowToPay = res;
end;  
  
global
function integer FindCreditCardRowToPay(integer wn)
begin
  integer res;
  record IVVc IVr;
  
  res = -1;
  if (wn>0) then begin
    switch (GetWindowClass(wn)) begin
      case "IVDClass":  GetWindowRecord(wn,IVr); res = FindIVRowToPay(IVr);
    end;  
  end;
  FindCreditCardRowToPay = res;
end;

global procedure YesCCPayTouchScreenConfirmSignatureTClass()
begin
  Integer wn;
  wn = CurWindow;
  CloseWindow(wn);
end;

global procedure NoCCPayTouchScreenConfirmSignatureTClass()
begin
  Integer wn;
  record RcVc RepSpec;
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  ReverseTransaction(RepSpec.AccStr);
  CloseWindow(wn);
end;

global
procedure IVCashDClassTouchScreenCreateGC(Integer wn,string paymode,string label)
begin
  Integer nwn;
  record IVCashVc IVCashr;
  record GCVc GCr;
  Boolean testf;
  
  GetWindowRecord(wn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RecordNew(GCr);
    nwn = OpenWindow("NPTSGCDClass",0,wn,"","",GCr);
    PutWindowString(nwn,"PayMode",paymode);
    WindowFieldGoto(nwn,GCr,-1,"Amount",true);
  end;
  return;
end;

global
updating procedure ProceedNPTSGCDClass()
begin
  Integer wn,mwn;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record GCVc GCr;
  Boolean testf;
  record GCTypeVc GCTr;
  Integer i,rwcnt;
  string 255 paymode;
  record DefCashBlock DCb;
  row PMBlock PMrw;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    GetWindowRecord(mwn,IVCashr);
    testf = true;
    if (IVCashr.OKFlag!=0) then begin testf = false; end;
    if (IVCashr.Invalid!=0) then begin testf = false; end;
    if (testf) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,GCr);
      if (GCr.Amount<=0) then begin
        MessageBox(2210,"");
        WindowFieldGoto(wn,GCr,-1,"Amount",true);
        goto LProceedNPTSGCDClass;      
      end;
      
      rwcnt = MatRowCnt(IVCashr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashr,i,IVCashrw);
        if (IVCashrw.stp==kInvoiceRowTypeGiftVoucherSold) then begin
          if (GCr.SerNr==IVCashrw.GCNr) then begin
            MessageBox(2186,"");
            CloseWindow(wn);
            goto LProceedNPTSGCDClass;
          end;
        end;
      end;  
      paymode = GetWindowString(wn,"PayMode");
      GCr.OKFlag = 1;
      PutWindowRecord(wn,GCr);
      if (WindowDoOK(wn,0)) then begin
        if (nonblank(GCr.Type)) then begin
          GCTr.Code = GCr.Type;
          ReadFirstMain(GCTr,1,true);
        end;
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeGiftVoucherSold);
        IVCashrw.stp = kInvoiceRowTypeGiftVoucherSold;
        IVCashrw.GCNr = GCr.SerNr;
        IVCashrw.PayMode = paymode;
        IVCashrw.Spec = GCr.Comment;
        IVCashrw.Sum = GCr.Amount;
        if (nonblank(GCTr.PayMode)) then begin
          IVCashrw.PayMode = GCTr.PayMode;
        end;
        if (blank(IVCashrw.PayMode)) then begin
          BlockLoad(DCb);
          IVCashrw.PayMode = DCb.DefGCSPayMode;
        end;
        GetPMRow(IVCashrw.PayMode,PMrw);
        IVCashrw.SalesAcc = PMrw.AccNr;
        MatRowPut(IVCashr,rwcnt,IVCashrw);
        IVCashSumup(IVCashr,true);
        PutWindowRecord(mwn,IVCashr);
        GetWindowRecord(mwn,IVCashr);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
      end;
    end;
  end;
LProceedNPTSGCDClass:;  
  return;
end;