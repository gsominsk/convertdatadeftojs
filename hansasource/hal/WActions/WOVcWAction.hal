external procedure ActVcRecordDefClient(var record ActVc);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
remote updating function Boolean MakeActFromWO(record WOVc,var record ActVc);
remote updating function LongInt RecordAction_raPasteWOInPO(record WOVc,var record POVc);
remote updating function LongInt RecordAction_raPasteWOInWS(var record WOVc,var record WSVc);
external updating procedure RecordActionWO_Print(var record WOVc,string,Boolean);

global
updating procedure PrintWOL(Integer wn,Boolean previewf)
BEGIN
  record WOVc WOr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(WOr,wn,i)) begin
    RecordActionWO_Print(WOr,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
procedure WOStatDsm()
BEGIN
  record WOVc WOr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,WOr);
  RepSpec.repname = "WOStatRn";
  RepSpec.long1 = WOr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure WSFromWODsm()
BEGIN
  record WOVc WOr;
  record WSVc WSr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,WOr);
    if (WOr.Closed!=3) then begin
      r = RecordAction_raPasteWOInWS(WOr,WSr);
      switch (r) begin
        case -1: Beep;
        case -2: MessageBox(1281,"");
        otherwise
          nwn = OpenWindow("WSDClass",1,0,"","",WSr);
      end;
      UpdateBrowses("WOVc");
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure POFromWODsm()
BEGIN
  record WOVc WOr;
  record POVc POr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,WOr);
    if (WOr.Closed!=3) then begin
      r = RecordAction_raPasteWOInPO(WOr,POr);
      switch (r) begin
        case -1: Beep;
        case -2: MessageBox(1281,"");
        otherwise
          nwn = OpenWindow("PODClass",1,0,"","",POr);
      end;
      UpdateBrowses("WOVc");
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure ActFromWODsm()
BEGIN
  record WOVc WOr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    GetWindowRecord(wn,WOr);
    if (WOr.Closed!=1 and WOr.Closed!=3) then begin
      RecordNew(Actr);
      ActVcRecordDefClient(Actr);
      if (MakeActFromWO(WOr,Actr)) then begin
        nwn = OpenWindow("ActDClass",1,0,"","",Actr);
        SetRLink(wn,true);  
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure WOVcCreateActivity()
begin
  ActFromWODsm;
  return;
end;

global
procedure OpenSVOFromWODsm()
BEGIN
  record WOVc WOr;
  record SVOVc SVOr;
  Integer wn,wn2;

  wn = CurWindow;
  GetWindowRecord(wn,WOr);
  SVOr.SerNr = WOr.SVOSerNr;
  if (ReadFirstMain(SVOr,1,true)) then begin
    wn2 = OpenWindow("SVODClass",1,0,"","",SVOr);
  end;
  RETURN;
END;

function Boolean WODClassEMCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WOVc WOr;
  record UserVc Userr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WOr);
    Userr.Code = WOr.EMCode;
    if (ReadFirstMain(Userr,1,true)) then begin
      WOr.EMName = Userr.Name;
      WOr.SalesGroup = Userr.SalesGroup;
      WOr.Objects = Userr.PersObjx;
    end;
    PutWindowRecord(wn,WOr);
  end;
  WODClassEMCodeEFAfter = res;
  RETURN;
END;

function Boolean WODClassCustCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WOVc WOr;
  record CUVc CUr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WOr);
    CUr.Code = WOr.EMCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      WOr.Addr0 = CUr.Name;
      WOr.VATNr = CUr.VATNr;
    end;
    PutWindowRecord(wn,WOr);
  end;
  WODClassCustCodeEFAfter = res;
  RETURN;
END;

function Boolean WODClassCustContactEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record WOVc WOr;
  record CUVc ContactCUr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,WOr);
    if (FindCustomerRelation(WOr.CustCode,WOr.CustContact,ContactCUr)) then begin
      WOr.Phone = ContactCUr.Phone;
      WOr.Fax = ContactCUr.Fax;
    end;
    PutWindowRecord(wn,WOr);
  end;
  WODClassCustContactEFAfter = res;
  RETURN;
END;

global
function Boolean WODClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "EMCode": res = WODClassEMCodeEFAfter(wn,rownr,changed);
    case "CustCode": res = WODClassCustCodeEFAfter(wn,rownr,changed);
    case "CustContact": res = WODClassCustContactEFAfter(wn,rownr,changed);
  end;
  WODClassAfterEditField = res;
  RETURN;
END;

global
function Boolean WODClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record WOVc WOr;
  row WOVc WOrw;
  
  res = true;
  GetWindowRecord(wn,WOr);
  if (WOr.Closed!=0) then begin
    res = false;
  end;
  switch (fieldname) begin
    case "Spec":
      if (HasLocalization("PRT")) then begin
        MatRowGet(WOr,rownr,WOrw);
        if (nonblank(WOrw.ArtCode)) then begin
          res = false;
        end;
      end;
  end;
  WODClassActiveEditField = res;
  RETURN;
END;

global
function Boolean WODClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record WOVc WOr;
  
  GetWindowRecord(wn,WOr);
  if (WOr.SerNr!=-1) then begin
    subsetname = WOr.SVOSerNr;
  end;
  WODClassUpdateWindowSubset = true;
  return;
end;
/*
global
function Boolean WODClassRLClick(Integer wn,Integer rownr)
begin
  Integer nwn;
  record WOVc WOr;
  record ActVc Actr;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,WOr);
    if (ReadMarkedRecord(wn,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);    
    end;
  end;
  WODClassRLClick = true;
  return;
end;
*/
global
function Boolean WODClassOnOKWindow(Integer wn)
begin
  Integer nwn;
  record WOVc WOr;
  record ActVc Actr;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,WOr);
    if (ReadMarkedRecord(wn,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);  
    end;
  end;
  WODClassOnOKWindow = true;
  return;
end;