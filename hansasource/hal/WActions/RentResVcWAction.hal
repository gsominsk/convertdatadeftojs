external function roundmode SetRoundModeD(Integer);
remote procedure RecalculateAdvPrices(record AdvPriceRecVc,Boolean);
external function string 40 SerialNrSClassSpecPName(string);
remote updating procedure CreateRentResAdvPrice(var record RentResVc);
remote function Boolean RentResVc_PasteRentQuant(var record RentResVc);
remote function Boolean RentResVc_PasteCommitedUntil(var record RentResVc);
remote function Boolean RentResVc_PasteCode(var record RentResVc,var string);
remote function Boolean RentResVc_PasteInvItem(var record RentResVc,var string);
remote function Boolean RentResVc_PasteAgreeType(var record RentResVc,var string);
remote procedure RentResVc_GetCustomerWarning(var record RentResVc,var string);
remote function Boolean RentResVc_PasteSerialNr(var record RentResVc,Boolean);
external procedure CalcSum(val,val,val,val,var val,Integer);
remote updating function Integer raPasteRentResInDispatch(var record DispatchVc,LongInt);
remote updating function Integer raPasteRentResInCollection(var record CollectionVc,LongInt);
remote updating function Integer raPasteRentResInOffHire(var record OffHireVc,LongInt);
remote procedure NewRentalCharge(Integer,var record RentChrgVc,Date,LongInt,LongInt,var string,string);
remote updating function Boolean RentResNewRent(var record RentResVc,var record RentResVc);

function Boolean RentResDClassCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RentResVc RentResr;
  string 255 warning;

  GetWindowRecord(wn,RentResr);    
  if ((changed!=0) or ((blank(RentResr.Name)) and (nonblank(RentResr.Code)))) then begin
    GetWindowRecord(wn,RentResr);    
    DeselectWindow(wn,false);
    if (RentResVc_PasteCode(RentResr,warning)) then begin
      PutWindowRecord(wn,RentResr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  RentResDClassCodeEFAfter = true;
  return;
end;

function Boolean RentResDClassSerialNrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RentResVc RentResr;
  string 255 warning;

  GetWindowRecord(wn,RentResr);    
  if ((changed!=0) or ((blank(RentResr.Name)) and (nonblank(RentResr.SerialNr)))) then begin
    GetWindowRecord(wn,RentResr);    
    DeselectWindow(wn,false);
    if (RentResVc_PasteSerialNr(RentResr,false)) then begin
      PutWindowRecord(wn,RentResr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  RentResDClassSerialNrEFAfter = true;
  return;
end;

function Boolean RentResDClassInvItemEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RentResVc RentResr;
  string 255 warning;

  GetWindowRecord(wn,RentResr);    
  if ((changed!=0) or ((blank(RentResr.InvItemName)) and (nonblank(RentResr.InvItem)))) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RentResr);    
    if (RentResVc_PasteInvItem(RentResr,warning)) then begin
      PutWindowRecord(wn,RentResr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  RentResDClassInvItemEFAfter = true;
  return;
end;

function Boolean RentResDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;
  row RentResVc RentResrw;
  record INVc INr;
  string 255 inwarning;
 
  GetWindowRecord(wn,RentResr);
  MatRowGet(RentResr,rownr,RentResrw);
  if ((changedf!=0) or ((blank(RentResrw.Spec)) and (nonblank(RentResrw.ArtCode)))) then begin
    GetWindowRecord(wn,RentResr);
    DeselectWindow(wn,false);
    INr.Code = RentResrw.ArtCode;
    if (ReadFirstMain(INr,1,true)) then begin
      RentResrw.Spec = INr.Name;
      if (INr.ItemType<>1) then begin
        RentResrw.Type = 1;
      end;
      MatRowPut(RentResr,rownr,RentResrw);
      PutWindowRecord(wn,RentResr);
      if (nonblank(INr.WarnText1)) then begin
        MessageBox(0,INr.WarnText1);
      end;
    end else begin
      Beep;
    end;
  end;
  RentResDClassArtCodeEFAfter = true;
  return;
end;

global
function Boolean PasteAgreement(var record RentResVc RentResr,var string warning)
begin
  record AgreementVc Agreer;
  record DelAddrVc DelAddrr;
  Boolean res;
  
  res = false;
  warning = "";
  Agreer.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreer,1,true)) then begin
    RentResr.Location = Agreer.Location;
    RentResr.LangCode = Agreer.LangCode;
    RentResr.AgreeType = Agreer.AgreeType;
    RentResr.Site = Agreer.Site;
    DelAddrr.DelCode = RentResr.Site;
    DelAddrr.CustCode = Agreer.CustCode;
    if (ReadFirstMain(DelAddrr,2,true)) then begin
      RentResr.ClientContact = DelAddrr.Contact;
    end else begin
      DelAddrr.DelCode = RentResr.Site;
      DelAddrr.CustCode = "";
      if (ReadFirstMain(DelAddrr,2,true)) then begin
        RentResr.ClientContact = DelAddrr.Contact;
      end;
    end;
    RentResVc_GetCustomerWarning(RentResr,warning);
    res = true;
  end;
  return;
end;

function Boolean RentResDClassAgreementNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;
  record CUVc CUr;
  string 255 warning;
 
  if (changedf!=0) then begin
    GetWindowRecord(wn,RentResr);
    DeselectWindow(wn,false);
    if (PasteAgreement(Rentresr,warning)) then begin
      PutWindowRecord(wn,RentResr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  RentResDClassAgreementNrEFAfter = true;
  return;
end;

procedure RentResChSum(Integer wn)
begin
  record RentResVc RentResr;
  val factor,s;
 
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RentResr);
  factor = BlankVal;
  CalcSum(RentResr.InvQuant,RentResr.Price,factor,RentResr.vRebate,s,0);
  RentResr.Sum = s;
  if (RentResr.AdvPrActive!=0) then begin
    RentResr.Price = BlankVal;
    RentResr.Sum = BlankVal;
    RentResr.vRebate = BlankVal;
  end;
  PutWindowRecord(wn,RentResr);
  return;
end;

function Boolean RentResDClassPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  if (changedf!=0) then begin
    RentResChSum(wn);
  end;
  RentResDClassPriceEFAfter = true;
  return;
end;

function Boolean RentResDClassvRebateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  if (changedf!=0) then begin
    RentResChSum(wn);
  end;
  RentResDClassvRebateEFAfter = true;
  return;
end;

function Boolean RentResDClassInvQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  if (changedf!=0) then begin
    RentResChSum(wn);
  end;
  RentResDClassInvQuantEFAfter = true;
  return;
end;

function Boolean RentResDClassAgreeTypeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;
  string 255 warning;

  GetWindowRecord(wn,RentResr);    
  if (changedf!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RentResr);    
    if (RentResVc_PasteAgreeType(RentResr,warning)) then begin
      PutWindowRecord(wn,RentResr);
    end else begin
      Beep;
    end;
  end;
  RentResDClassAgreeTypeEFAfter = true;
  return;
end;

function Boolean RentResDClassClientContactEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;
  string 255 warning;

  if (changedf!=0) then begin
    GetWindowRecord(wn,RentResr);    
    RentResVc_GetCustomerWarning(RentResr,warning);
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
  end;
  RentResDClassClientContactEFAfter = true;
  return;
end;

function Boolean RentResDClassRentQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,RentResr);
    if (RentResr.RecepyItem!=0) then begin
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RentResr);
      if (RentResVc_PasteRentQuant(RentResr)) then begin
        PutWindowRecord(wn,RentResr);
      end;
    end;
  end;
  RentResDClassRentQuantEFAfter = true;
  return;
end;

function Boolean RentResDClassCommitedUntilEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,RentResr);
    if (RentResVc_PasteCommitedUntil(RentResr)) then begin
      PutWindowRecord(wn,RentResr);
    end;
  end;
  RentResDClassCommitedUntilEFAfter = true;
  return;
end;

function Boolean RentResDClassDealerCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;
  record CUVc CUr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,RentResr);
    DeselectWindow(wn,false);
    CUr.Code = RentResr.DealerCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      RentResr.DealerName = CUr.Name;
      PutWindowRecord(wn,RentResr);
    end;
  end;
  RentResDClassDealerCodeEFAfter = true;
  return;
end;

function Boolean RentResDClassSumEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentResVc RentResr;
  val q,s,hund;
 
  if (changedf!=0) then begin
    GetWindowRecord(wn,RentResr);
    DeselectWindow(wn,false);
    q = 1;
    hund = 100;
    s = RentResr.Sum;
    s = s/q;
    s = RentResr.Price - s;
    s = s*100;
    s = s/RentResr.Price;
    RentResr.vRebate = Round(s,SetRoundModeD(1));
    if (RentResr.AdvPrActive!=0) then begin
      RentResr.Price = BlankVal;
      RentResr.Sum = BlankVal;
      RentResr.vRebate = BlankVal;
    end;
    PutWindowRecord(wn,RentResr);
  end;
  RentResDClassSumEFAfter = true;
  return;
end;

global
function Boolean RentResDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Code": res = RentResDClassCodeEFAfter(wn,fn,rownr,changed); // Rental item
    case "SerialNr": res = RentResDClassSerialNrEFAfter(wn,fn,rownr,changed);
    case "InvItem": res = RentResDClassInvItemEFAfter(wn,fn,rownr,changed); // Invoice Item
    case "ArtCode": res = RentResDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "AgreementNr": res = RentResDClassAgreementNrEFAfter(wn,fn,rownr,changed); 
    case "Price": res = RentResDClassPriceEFAfter(wn,fn,rownr,changed);
    case "vRebate": res = RentResDClassvRebateEFAfter(wn,fn,rownr,changed);
    case "Sum": res = RentResDClassSumEFAfter(wn,fn,rownr,changed);
    case "InvQuant": res = RentResDClassInvQuantEFAfter(wn,fn,rownr,changed);
    case "AgreeType": res = RentResDClassAgreeTypeEFAfter(wn,fn,rownr,changed);
    case "ClientContact": res = RentResDClassClientContactEFAfter(wn,fn,rownr,changed);
    case "RentQuant": res = RentResDClassRentQuantEFAfter(wn,fn,rownr,changed);
    case "DealerCode": res = RentResDClassDealerCodeEFAfter(wn,fn,rownr,changed);
    case "CommitedUntil": res = RentResDClassCommitedUntilEFAfter(wn,fn,rownr,changed);
  end;
  RentResDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean  RentResDClassAdvPrActiveButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = false;
  RentResDClassAdvPrActiveButtonAction = res;
  return;
end;

global
function Boolean RentResVcEFActiveCheck(string fieldname,Integer wn,Integer wnst,Integer rownr)
BEGIN
  Boolean res;
  record RentResVc RentResr;
  row RentResVc RentResrw;

  res = true;
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,RentResr);
    if (RentResr.Done<>0) then begin
      switch (fieldname) begin
        case "LastChargeDate":
        otherwise
          res = false;
      end;
    end;
    GetWindowRecord(wn,RentResr);
    if (rownr>-1) then begin
      switch (fieldname) begin
        case "Inv":
          if (rownr<MatRowCnt(RentResr)) then begin
            MatRowGet(RentResr,rownr,RentResrw);
            if (RentResrw.Type<>2) then begin
              res = false;
            end;
          end;
        otherwise
          if (rownr<MatRowCnt(RentResr)) then begin
            MatRowGet(RentResr,rownr,RentResrw);
            if (RentResrw.Inv>0) then begin
              res = false;
            end;
            if (RentResrw.Del>0) then begin
              if (fieldname<>"Type") then begin
                res = false;
              end;
            end;
          end;
      end;
      if (RentResr.OriginalSerNr>0) then begin
        switch (fieldname) begin
          case "ArtCode":
          case "SerialNr":
            res = false;
        end;
      end;
    end else begin
      switch (fieldname) begin
        case "Code":
        case "SerialNr":
          if (wnst==Rs_update) then begin
            if (RentResr.RentResDel>0) then begin
              res = false;
            end;  
          end;  
          if (RentResr.OriginalSerNr>0) then begin
            res = false;
          end;
        case "AgreeStatus":
        case "EndDate":
        case "EndTime":
        case "LastChargeDate":
        case "LastInvoiceDate":
        case "Price":
        case "InvItem":
        case "InvQuant":
        case "InvItemName":
        case "vRebate":
        case "InvItem":
        case "Objects":
        case "CustOrdNr":
        case "ClientContact":
        otherwise
          if (wnst==Rs_update) then begin
            if (RentResr.RentResDel>0) then begin
              res = false;
            end;  
          end;  
      end;
    end;
  end;
  RentResVcEFActiveCheck = res;
  RETURN;
END;

global
function Boolean RentResDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = RentResVcEFActiveCheck(fieldname,wn,wnst,rownr);
  RentResDClassActiveEditField = res;
  return;
end;

global
procedure RentResOpenAgrDsm()
BEGIN
  record AgreementVc Agreementr;
  record RentResVc RentResr;
  Integer wn;
  Integer nwn;

  wn = CurWindow;
  GetWindowRecord(wn,RentResr);
  Agreementr.SerNr = RentResr.AgreementNr;
  if (ReadFirstMain(Agreementr,1,true)) then begin
    nwn = OpenWindow("AgreementDClass",1,0,"","",Agreementr);
  end;
  RETURN;
END;

global
updating procedure RentResDispatchDsm()
BEGIN
  record RentResVc RentResr;
  record AgreementVc Agreementr;
  record DispatchVc Dispatchr;
  record CUVc CUr;
  Integer wn,r,nwn;
  Integer normalstate;
  Boolean onhold;

  onhold = false;
  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,RentResr);
    Agreementr.SerNr = RentResr.AgreementNr;
    if (ReadFirstMain(Agreementr,1,true)) then begin
      CUr.Code = Agreementr.CustCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        if (CUr.OnHoldFlag == 1) then begin
          onhold = true;
        end;
      end;
    end;
    if (onhold==false) then begin
      if (UserCanAction("RentResToDispatch",true)) then begin
        r = raPasteRentResInDispatch(Dispatchr,RentResr.SerNr);
        if (r!=-1) then begin
          if (MatRowCnt(Dispatchr)!=0) then begin
            nwn = OpenWindow("DispatchDClass",1,0,"","",Dispatchr);
          end else begin
            Beep;
          end;
        end else begin
          Beep;
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"RentResToDispatch"));
      end;
    end else begin
      Beep;
    end;
  end;
  if (onhold) then begin
    MessageBox(1300,""); 
  end;
  RETURN;
END;

global
updating procedure RentResCollectionDsm()
BEGIN
  record RentResVc RentResr;
  record CollectionVc Collectionr;
  Integer wn,r,nwn;
  Integer normalstate;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,RentResr);
    if (UserCanAction("RentResToCollection",true)) then begin
      r = raPasteRentResInCollection(Collectionr,RentResr.SerNr);
      if (r!=-1) then begin
        if (MatRowCnt(Collectionr)!=0) then begin
          nwn = OpenWindow("CollectionDClass",1,0,"","",Collectionr);
        end else begin
          Beep;
        end;
      end else begin
        Beep;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"RentResToCollection"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure RentResOffHireDsm()
BEGIN
  record RentResVc RentResr;
  record OffHireVc OffHirer;
  Integer wn,r,nwn;
  Integer normalstate;

  normalstate = 0;//Rs_normal
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,RentResr);
    if (UserCanAction("RentResToOffHire",true)) then begin
      r = raPasteRentResInOffHire(OffHirer,RentResr.SerNr);
      if (r!=-1) then begin
        if (MatRowCnt(OffHirer)!=0) then begin
          nwn = OpenWindow("OffHireDClass",1,0,"","",OffHirer);
        end else begin
          Beep;
        end;
      end else begin
        Beep;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"RentResToOffHire"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure RentResChargeDsm()
BEGIN
  record RentResVc RentResr;
  record RentChrgVc RentChrgr;
  string 255 warn;
  Integer wn;
  Integer nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RentResr);
  if (RentResr.AgreementNr>0) then begin
    NewRentalCharge(1,RentChrgr,CurrentDate,RentResr.SerNr,RentResr.AgreementNr,warn,RentResr.Site);
    nwn = OpenWindow("RentChrgDClass",1,0,"","",RentChrgr);
  end;
  RETURN;
END;

global
procedure RentResOpenRentItemDsm()
BEGIN
  record RentResVc RentResr;
  record RentINVc RentINr;
  Integer wn;
  Integer nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,RentResr);
  if (nonblank(RentResr.Code)) then begin
    RentINr.Code = RentResr.Code;
    RentINr.SerialNr = RentResr.SerialNr;
    if (ReadFirstMain(RentINr,2,true)) then begin
      nwn = OpenWindow("RentINDClass",1,0,"","",RentINr);
    end;
  end;
  RETURN;
END;

global
procedure RentResOpenResourceDsm()
BEGIN
  record RcVc RepSpec;
  record RentResVc RentResr;
  record RentINVc RentINr;
  Integer wn,nwn;
  Boolean isserial;
  
  wn = CurWindow;
  GetWindowRecord(wn,RentResr);
  if (RentResr.AgreementNr>0) then begin
    RepSpec.Notation = 1;
    RepSpec.long2 = 31;
    RentINr.Code = RentResr.Code;
    RentINr.SerialNr = RentResr.SerialNr;
    isserial = false;
    if (ReadFirstMain(RentINr,2,true)) then begin
      if (nonblank(RentINr.SerialNr)) then begin
        isserial = true;
      end;
    end;
    if (isserial) then begin
      RepSpec.Comparison = 0;
      RepSpec.flags[21] = kResourceTypeItem;
      if (nonblankdate(RentResr.TransDate)) then begin
        RepSpec.sStartDate = AddDay(RentResr.TransDate,-1);
      end else begin
        RepSpec.sStartDate = AddDay(CurrentDate,-GetDay(CurrentDate) + 1);
      end;
      RepSpec.f1 = RentResr.Code;
      RepSpec.sEndDate = AddMonth(RepSpec.sStartDate,1);
      nwn = OpenWindow("ResMonWClass",1,0,"","",RepSpec);
//    DeselectWindow(nwn,false);
//    PutWindowRecord(nwn,RepSpec);
    end else begin
      RepSpec.Comparison = 0;
      if (nonblankdate(RentResr.TransDate)) then begin
        RepSpec.sStartDate = AddDay(RentResr.TransDate,-1);
      end else begin
        RepSpec.sStartDate = AddDay(CurrentDate,-GetDay(CurrentDate) + 1);
      end;
      RepSpec.f1 = RentResr.Code;
      RepSpec.sEndDate = AddMonth(RepSpec.sStartDate,1);
      nwn = OpenWindow("RTMonWClass",1,0,"","",RepSpec);
//    DeselectWindow(nwn,false);
//    PutWindowRecord(nwn,RepSpec);
//      MessageBox(1953,"");
    end;
  end;
  RETURN;
END;

global
procedure RentResAvailableDsm()
BEGIN
  record RcVc RepSpec;
  record RentResVc RentResr;

  GetWindowRecord(CurWindow,RentResr);
  if (nonblank(RentResr.Code)) then begin
    ReportDefaults(RepSpec,"RentResAvailRClass");  
    RepSpec.f2 = RentResr.Code;
    RepSpec.long1 = RentResr.AgreementNr;
    RepSpec.long2 = RentResr.SerNr;
    RepSpec.critname = "RentResAvailRClass";
    if (nonblankdate(RentResr.TransDate)) then begin
      RepSpec.sStartDate = RentResr.TransDate;
    end;
    if (nonblankdate(RentResr.EndDate)) then begin
      RepSpec.sEndDate = RentResr.EndDate;
    end;
    RepSpec.Period2Str = RepSpec.sStartDate;
    RepSpec.Period2Str = RepSpec.Period2Str & ":";
    RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
    RepSpec.Media = mtScreen;
    RepSpec.repname = "RentResAvailRn";
  end;
  RunReport(RepSpec,0);
  RETURN;
END;

global
function string 40 RentResDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  RentResDClassSpecPasteName = psname;
  return;
end;

global
procedure RentResAccesPLDsm()
BEGIN
  record RentResVc RentResr;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,RentResr);
  RepSpec.repname = "RentResAccesPL2Rn";
  RepSpec.Media = mtScreen;
  RepSpec.long1 = RentResr.SerNr;
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure RentResNewRentDsm()
BEGIN
  record RentResVc RentResr;
  record RentResVc NewRentResr;
  row RentResVc RentResrw;
  Integer rwcnt,i;
  Boolean testf;
  Boolean onelinewasdel;
  Integer wn;

  wn = CurWindow;
  testf = true;
  onelinewasdel = false;
  GetWindowRecord(wn,RentResr);
//  if (RentResr.Done<>0) then begin testf = false; end;
//  if (RentResr.RentResRet==0) then begin testf = false; end;
  if (WindowState(wn)!=0) then begin
    Beep;
    testf = false;
  end;
  if (ReadFirstMain(RentResr,1,true)) then begin
  if (RentResr.RentResDel!=0) then begin onelinewasdel = true; end;
  if (RentResr.TransDate>=CurrentDate) then begin
    MessageBox(1142,RentResr.TransDate);
    testf = false;
  end;
  rwcnt = MatRowCnt(RentResr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RentResr,i,RentResrw);
//    if (RentResrw.Ret==0) then begin testf = false; end;
    if (RentResrw.Del!=0) then begin onelinewasdel = true; end;
  end;
  if (testf and onelinewasdel) then begin
    if (RentResNewRent(RentResr,NewRentResr)) then begin
      CloseWindow(wn);
      wn = OpenWindow("RentResDClass",0,0,"","",NewRentResr);
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  end;
  RETURN;
END;

global
procedure RentResInfoDsm()
BEGIN
  record RcVc RepSpec;
  record RentResVc RentResr;

  GetWindowRecord(CurWindow,RentResr);
  RepSpec.f1 = RentResr.AgreementNr;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[5] = 1;
  RepSpec.f6 = RentResr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "RentResInfoRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure AdvPrDetRentResD()
BEGIN
  record RentResVc RentResr;
  record AdvPriceRecVc AdvPriceRecr;
  Integer wn;

  GetWindowRecord(CurWindow,RentResr);
  AdvPriceRecr.FileName = "RentResVc";
  AdvPriceRecr.SerNr = RentResr.SerNr;
  AdvPriceRecr.RowNr = -1;
  if (ReadFirstMain(AdvPriceRecr,3,true)) then begin
    wn = OpenWindow("AdvPriceRecDClass",0,0,"","",AdvPriceRecr);
  end else begin
    CreateRentResAdvPrice(RentResr);
    AdvPriceRecr.FileName = "RentResVc";
    AdvPriceRecr.SerNr = RentResr.SerNr;
    AdvPriceRecr.RowNr = -1;
    if (ReadFirstMain(AdvPriceRecr,3,true)) then begin
      wn = OpenWindow("AdvPriceRecDClass",0,0,"","",AdvPriceRecr);
    end;
  end;
  RETURN;
END;

global
updating procedure AdvPriceRecPricesm()
BEGIN
  record AdvPriceRecVc AdvPriceRecr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,AdvPriceRecr);
  RecalculateAdvPrices(AdvPriceRecr,false);
  PutWindowRecord(wn,AdvPriceRecr);
  RETURN;
END;

global
updating procedure AdvPriceRecAllsm()
BEGIN
  record AdvPriceRecVc AdvPriceRecr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,AdvPriceRecr);
  RecalculateAdvPrices(AdvPriceRecr,true);
  PutWindowRecord(wn,AdvPriceRecr);
  RETURN;
END;

