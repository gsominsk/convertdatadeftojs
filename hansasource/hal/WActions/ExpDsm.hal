external outer updating procedure OuterCancelApprovalRequestDsm(Integer);
remote procedure ExpDClassOnOpenWindowRemote(var record ExpVc,var Integer);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_ExpVc(record ExpVc,var record RcVc,var Integer);
remote function Integer ExpTestApprovalStatus(record ExpVc);
remote updating function Integer CreateMailFromExpD(record ExpVc,var record MailVc,var string,string);
external function Integer CountObjects(string);
remote function Integer CancelApprovalRequestAllowed(Integer,string,string,Integer,string);
external updating procedure VICancelApprovalRequest(Integer);
external updating procedure TBBUCancelApprovalRequest(Integer);
external updating procedure SDCancelApprovalRequest(Integer);
external updating procedure QTCancelApprovalRequest(Integer);
external updating procedure PUCancelApprovalRequest(Integer);
external updating procedure ORCancelApprovalRequest(Integer);
external updating procedure OPCancelApprovalRequest(Integer);
external updating procedure LTCancelApprovalRequest(Integer);
external updating procedure LACancelApprovalRequest(Integer);
external updating procedure IntORCancelApprovalRequest(Integer);
external updating procedure IVCancelApprovalRequest(Integer);
external updating procedure POCancelApprovalRequest(Integer);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure RecordActionExp_Print(var record ExpVc,string);
remote updating function Boolean RecordAction_rlExpLOK(var record ExpVc);

global
function Boolean DidYouAuthorize(string okpersons)
BEGIN
  string 5 theusr;
  Boolean res;

  res = true;
  theusr = CurrentUser;
  if (nonblank(theusr)) then begin
    if (SetInSet(theusr,okpersons)==false) then begin
      res = false;
    end;
  end;
  DidYouAuthorize = res;
  RETURN;
END;

global
procedure AuthExpsm()
BEGIN
  record ExpVc Expr;
  string 20 usercod;
  string 255 tstr;
  Integer wn;  

  wn = CurWindow;  
  DeselectWindow(wn,false); 
  if (UserCanAction("AuthExp",true)) then begin  
    GetWindowRecord(wn,Expr);
    if (Expr.OKFlag==0) then begin
      Expr.OKSign = CurrentUser;
      PutWindowRecord(wn,Expr);
    end;
  end;
  RETURN;
END;

global
updating procedure OKExpLsm()
BEGIN
  record ExpVc Expr;
  Integer i,r;
  Boolean testf;
  
  if (UserCanAction("ExpOK",true)) then begin
    i = 1;
    while (GetRecordFromBrowse(Expr,CurWindow,i)) begin
      testf = true;
      r = ExpTestApprovalStatus(Expr);
      if (r!=0) then begin
        MessageBox(r,"");
        testf = false;
      end;
      if (testf) then begin
        if (RecordAction_rlExpLOK(Expr)) then begin end;
      end;
      i = i + 1;
    end;
    UpdateBrowses("ExpVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"ExpOK"));
  end;
  
  RETURN;
END;

global
procedure PrintExpL(Integer wn,Boolean previewf)
BEGIN
  record ExpVc Expr;
  Integer i;
  Boolean testf;
  Integer r;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(Expr,wn,i)) begin
    testf = true;
    r = ExpTestApprovalStatus(Expr);
    if (r!=0) then begin
      MessageBox(r,"");
      testf = false;
    end;
    if (testf) then begin
      RecordActionExp_Print(Expr,previewf);
    end;
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;
/*
global
procedure BankStExpDsm()
begin
  Integer wn,nwn;
  row PMBlock PMrw;
  record ExpVc Expr;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,Expr);
  if (GetPMRow(Expr.PayMode,PMrw)) then begin end;
  nwn = OpenWindow("BankStRClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.AccStr = PMrw.AccNr;
  PutWindowRecord(nwn,RepSpec);
  RETURN;
END;
*/

global
updating procedure ExpSendforAcceptanceExpDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record ExpVc Expr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,Expr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LExpSendforAcceptanceExpDsm;
    end;
    GetWindowRecord(wn,Expr);
  end;
  Expr.AcceptanceBy = acceptanceby;
  Expr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_ExpVc(Expr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(Expr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,Expr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LExpSendforAcceptanceExpDsm:;  
  return;
end;

global
updating procedure ExpSendforAcceptanceExpDsm()
begin
  ExpSendforAcceptanceExpDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure ExpCancelApprovalRequest(Integer wn)
begin
  record ExpVc Expr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,Expr);
  err = CancelApprovalRequest("ExpVc",Expr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LExpCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LExpCancelApprovalRequest:;
  return;
end;

global
updating procedure CancelApprovalRequestDsm()
begin
  Integer wn;

  wn = CurWindow;
  switch (GetWindowFileName(wn)) begin
    case "ExpVc": ExpCancelApprovalRequest(wn);
    case "IntORVc": IntORCancelApprovalRequest(wn);
    case "IVVc": IVCancelApprovalRequest(wn);
    case "LeaveApplicationVc": LACancelApprovalRequest(wn);
    case "LeaveTransferVc": LTCancelApprovalRequest(wn);
    case "OPVc": OPCancelApprovalRequest(wn);
    case "ORVc": ORCancelApprovalRequest(wn);
    case "POVc": POCancelApprovalRequest(wn);
    case "PUVc": PUCancelApprovalRequest(wn);
    case "QTVc": QTCancelApprovalRequest(wn);
    case "SDVc": SDCancelApprovalRequest(wn);
    case "TBBUVc": TBBUCancelApprovalRequest(wn);
    case "VIVc": VICancelApprovalRequest(wn);
    otherwise
       OuterCancelApprovalRequestDsm(wn);
  end;
  return;
end;

global
updating procedure ConnectToPPExpDsm()
begin
  Integer wn,err,rownr;
  record ExpVc Expr;
  row ExpVc Exprw;
  
  wn = CurWindow;
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LConnectToPPExpDsm;
    end;
  end;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,Expr);
  if (Expr.OKFlag!=0) then begin
    goto LConnectToPPExpDsm;
  end;
  rownr = MatRowCnt(Expr);
  ClearRow(Expr,Exprw,kExpenseRowTypePersonnelPayment);
  MatRowPut(Expr,rownr,Exprw);
  PutWindowRecord(wn,Expr);
  WindowFieldGoto(wn,Expr,rownr,"PPNr",true);
LConnectToPPExpDsm:;
  return;
end;

global
procedure ExpStatusDsm()
BEGIN
  record RcVc RepSpec;
  record ExpVc Expr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,Expr);
  RepSpec.f1 = Expr.SerNr;
  RepSpec.repname = "ExpStatusRn";
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  RETURN;
END;

global 
updating procedure CreateMailFromExpDsm()
BEGIN
  Integer wn,nwn;
  record MailVc Mailr;
  record ExpVc Expr;
  Integer err;
  string 255 tstr;
  string 255 docname;
  Boolean testf;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    testf = true;
    GetWindowRecord(wn,Expr);  
    err = ExpTestApprovalStatus(Expr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      err = CreateMailFromExpD(Expr,Mailr,tstr,WindowFormName(wn));
      if (err!=0) then begin
        MessageBox(err,": " & tstr);
      end else begin
        nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
      end;
    end;
  end;
  RETURN;
END;

global
function Boolean ExpDClassOnOpenWindow(Integer wn)
begin
  record ExpVc Expr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,Expr);
  ExpDClassOnOpenWindowRemote(Expr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  ExpDClassOnOpenWindow = false;
  return;
end;

global
procedure ExpDClassOnWindowRecordChange(Integer wn)
begin
  record ExpVc Expr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,Expr);
  ExpDClassOnOpenWindowRemote(Expr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
