remote function Boolean InternalSerialNrConfigVc_MainItemExists(string);
external procedure In2Period(var string,var Date,var Date);
external function LongInt DateDiff(Date,Date);
remote procedure FindFiscalYear(Date,var Date,var Date);

enum begin
  kKFRResult = 0,
  kKFRBalance = 1,
  kKFRResultAndVATCode = 2,
  kKFRBalanceAndVATCode = 3,
  kKFRObjectResult = 4,
  kKFRRowTotal = 5,
  kKFRAPDue = 6,
  kKFRAPOnAccOutstanding = 7,
  kKFRARDue = 8,
  kKFRARDownpayDue = 9,
  kKFRAROnAccOutstanding = 10,
  kKFRAvgResult = 11,
  kKFRAvgResultAndVATCode = 12,
  kKFRAvgObjectResult = 13
end;

enum begin
  kKFRCColumnTotal = 0
end;

global
function Boolean GenerateProdSerNoRClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  if (!InternalSerialNrConfigVc_MainItemExists(RepSpec.f2)) then begin
    MessageBox(20302,"");
    WindowFieldGoto(wn,RepSpec,-1,"f2",true);
    res = false;
    goto LGenerateProdSerNoRClassOnOKWindow;
  end;
  
LGenerateProdSerNoRClassOnOKWindow:;
  GenerateProdSerNoRClassOnOKWindow = res;
  return;
end;

global
function Boolean GenerateProdSerNoVClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  if (!InternalSerialNrConfigVc_MainItemExists(RepSpec.f2)) then begin
    MessageBox(20302,"");
    WindowFieldGoto(wn,RepSpec,-1,"f2",true);
    res = false;
    goto LGenerateProdSerNoVClassOnOKWindow;
  end;
  
LGenerateProdSerNoVClassOnOKWindow:;
  GenerateProdSerNoVClassOnOKWindow = res;
  return;
end;

global
procedure ReopenRepWsm()
BEGIN
  Integer nwn,wn;
  record RcVc RepSpec;//RcType
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if ((RepSpec.repname<>"") and
      (nonblank(RepSpec.critname))) then begin
    nwn = OpenWindow(RepSpec.critname,1,0,"","",RepSpec);
    DeselectWindow(nwn,false)
    PutWindowRecord(nwn,RepSpec);
    CloseWindow(wn);
    SelectWindow(nwn);
    WindowFieldGoto(nwn,RepSpec,-1,"",true);
  end else begin
    Beep;
  end;
  RETURN;
END;

global
function Integer SetTempCompany(Integer wn)
BEGIN
  Integer res,wcompnr;
  
  res = CurrentCompany;
  wcompnr = WindowCompanyNr(wn);
  if (res!=wcompnr) then begin
    if (SetCompany(wcompnr,true)) then begin
    end;
  end;
  SetTempCompany = res;
  RETURN;
END;

global
procedure RecalculateRepWsm()
BEGIN
  Integer nwn,wn;
  record RcVc RepSpec;  
  Integer lcompnr;
  
  wn = CurWindow;
  lcompnr = SetTempCompany(wn);
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.repname<>"") then begin
    CloseWindow(wn);
    RunReport(RepSpec,0);
  end;
  ResetCompany(lcompnr);
  RETURN;
END;

global
procedure RecalculatePrintRepWsm()
BEGIN
  Integer nwn,wn;
  record RcVc RepSpec;  
  Integer lcompnr;
  
  wn = CurWindow;
  lcompnr = SetTempCompany(wn);
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.repname<>"") then begin
    RepSpec.Media = mtPrinter;
    if (UserReportAccess(RepSpec)) then begin
      RunReport(RepSpec,0);
    end;
  end;
  ResetCompany(lcompnr);
  RETURN;
END;

function Boolean LimitedAccessTest(Integer wn,string fieldname)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  switch (fieldname) begin
    case "AccStr":  
      Userr.Code = CurrentUser;
      if (ReadFirstMain(Userr,1,true)) then begin
      end;
      if (Userr.limitedAccess>=kLimitedAccessUserOnly) then begin res = false; end;
    case "f2":  
      Userr.Code = CurrentUser;
      if (ReadFirstMain(Userr,1,true)) then begin
      end;
      if (Userr.limitedAccess>=kLimitedAccessUserOnly) then begin res = false; end;
  end;
  LimitedAccessTest = res;
  RETURN;
END;

function Boolean LimitedAccessSalesGroupTest(Integer wn,string fieldname,string fieldnametocheck)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
  end;
  if (fieldname==fieldnametocheck) then begin
    if (Userr.limitedAccess==2) then begin res = false; end;
  end;
  LimitedAccessSalesGroupTest = res;
  RETURN;
END;

global
function Boolean InvableRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  InvableRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean ORGPRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  ORGPRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean ORJRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  ORJRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean VIJRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  switch (fieldname) begin
    case "AccStr":  
      Userr.Code = CurrentUser;
      if (ReadFirstMain(Userr,1,true)) then begin
      end;
      if (Userr.limitedAccess>=kLimitedAccessUserOnly) then begin res = false; end;
    case "Stext":  
      Userr.Code = CurrentUser;
      if (ReadFirstMain(Userr,1,true)) then begin
      end;
      if (Userr.limitedAccess>=kLimitedAccessUserOnly) then begin res = false; end;
  end;
  VIJRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean VeInRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  VeInRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean APRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  APRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean PurRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  PurRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTStkRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  if (res) then begin
    res = LimitedAccessSalesGroupTest(wn,fieldname,"ObjStr");
  end;
  QTStkRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTStatRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  QTStatRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean OrderStockRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  OrderStockRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean OrderStockRClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  record PlanDeliveryBlock PlanDelRec;
  Date d1,d2;
  string 255 tstr;

  switch (fieldname) begin
    case "Stext":
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      BlockLoad(PlanDelRec);
      if (PlanDelRec.FieldType==1) then begin
        tstr = RepSpec.Stext;
        In2Period(tstr,d1,d2);
        RepSpec.Stext = tstr;
        if (len(RepSpec.Stext)==1) then begin
          RepSpec.Stext = "";
        end; 
        PutWindowRecord(wn,RepSpec);
        SelectWindow(wn);
      end;      
  end;
  OrderStockRClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTJRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  if (res) then begin
    res = LimitedAccessSalesGroupTest(wn,fieldname,"ObjStr");
  end;
  QTJRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTPipelineRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  QTPipelineRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTAccRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  if (res) then begin
    res = LimitedAccessSalesGroupTest(wn,fieldname,"ObjStr");
  end;
  QTAccRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTForeCRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  if (res) then begin
    res = LimitedAccessSalesGroupTest(wn,fieldname,"ObjStr");
  end;
  QTForeCRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTSMStatsRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  if (res) then begin
    res = LimitedAccessSalesGroupTest(wn,fieldname,"ObjStr");
  end;
  QTSMStatsRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTHistoryRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  QTHistoryRClassActiveEditField = res;
  RETURN;
END;

global
function Boolean QTJRClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  record PlanDeliveryBlock PlanDelRec;
  Date d1,d2;
  string 255 tstr;

  switch (fieldname) begin
    case "Stext":
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      BlockLoad(PlanDelRec);
      if (PlanDelRec.FieldType==1) then begin
        tstr = RepSpec.Stext;
        In2Period(tstr,d1,d2);
        tstr = d1;
        tstr = tstr & ":";
        tstr = tstr & d2;
        RepSpec.Stext = tstr;
        PutWindowRecord(wn,RepSpec);
        SelectWindow(wn);
      end;      
  end;
  QTJRClassAfterEditField = res;
  RETURN;
END;

global
function Boolean ChanceRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res; 
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
  end;
  switch (fieldname) begin
    case "f3": if (Userr.limitedAccess!=0) then begin res = false; end;
  end;
  ChanceRClassActiveEditField = res;
  RETURN;
END;

global
function string 40 MainRClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record RcVc RepSpec;
  
  psname = defpsname;
  if (WindowActiveField(wn)=="f4") then begin
    GetWindowRecord(wn,RepSpec);
    switch (RepSpec.flags[11]) begin
      case 0: psname = "AccSClass";
      case 1: psname = "ObjSClass";
      case 2: psname = "ObjSClass";
    end;
  end;
  if (WindowActiveField(wn)=="f5") then begin
    GetWindowRecord(wn,RepSpec);
    switch (RepSpec.flags[11]) begin
      case 0: psname = "ObjSClass";
      case 1: psname = "AccSClass";
      case 2: psname = "ObjSClass";
    end;
  end;
  if (WindowActiveField(wn)=="f6") then begin
    GetWindowRecord(wn,RepSpec);
    switch (RepSpec.flags[11]) begin
      case 0: psname = "ObjSClass";
      case 1: psname = "ObjSClass";
      case 2: psname = "AccSClass";
    end;
  end;
  MainRClassSpecPasteName = psname;
  return;
end;

global
function Boolean SalesTimeRClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  Date d1,d2;
  string 255 tstr;

  switch (fieldname) begin
    case "Period2Str":
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      if (DateDiff(RepSpec.sEndDate,RepSpec.sStartDate)>=7) then begin
        MessageBox(0,USetStr(2241));
      end;
  end;
  SalesTimeRClassAfterEditField = res;
  RETURN;
END;

global
procedure EditRs2WClass()
BEGIN
  Integer wn,nwn;
  string 255 tstr;
  record RepDefBlock RDb;
  row RepDefBlock RepDefrw;
  Integer i,rwcnt;
  record RepDefVc RepDefr;
  record UserDefRepVc UDRr;
  
  wn = CurWindow;
  tstr = GetListString(wn,SelectedListLine(wn));  
  if (nonblank(tstr)) then begin
    BlockLoad(RDb);
    rwcnt = MatRowCnt(RDb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RDb,i,RepDefrw);
      if (RepDefrw.shortname==tstr) then begin
        nwn = OpenWindow("RepDef2Class",0,wn,"","",RepDefr);
        WindowDeactivateField(nwn);
        RepDefr.repname = RepDefrw.repname;
        RepDefr.shortname = RepDefrw.shortname;
        RepDefr.header = RepDefrw.header;
        PutWindowRecord(nwn,RepDefr);
        /*
        UDRr.shortname = RepDefrw.shortname;
        if (ReadFIrstMain(UDRr,1,true)) then begin
          SetWindowState(nwn,Rs_update);
        end;
*/        
        PutWindowString(nwn,"oldrepshortname",RepDefr.shortname)
        goto LEditRs2WClass;
      end;
    end;
/*    
    if (tstr==USetStr(3144)) then begin
      nwn = OpenWindow("RepDef2Class",0,wn,"","",RepDefr);
      WindowDeactivateField(nwn);
      RepDefr.repname = "BalRn";
      RepDefr.shortname = USetStr(3144);
      RepDefr.header = USetStr(3144);
      PutWindowRecord(nwn,RepDefr);
      PutWindowString(nwn,"oldrepshortname",RepDefr.shortname)
      goto LEditRs2WClass;
    end;    
*/    
  end;
LEditRs2WClass:;  
  RETURN;
END;

updating procedure UpdateUserDefRepColumns(string oldrepshortname,record UserDefRepVc UDRr)
begin
  record UserDefRepColumnsVc oldUDRCr;
  record UserDefRepColumnsVc UDRCr;
  Boolean found;
  
  found = true;
  UDRCr.shortname = oldrepshortname;
  while (LoopMain(UDRCr,1,found)) begin
    if (UDRCr.shortname!=oldrepshortname) then begin found = false; end;
    if (found) then begin
      RecordCopy(oldUDRCr,UDRCr);
      UDRCr.shortname = UDRr.shortname;
      RecordUpdate(oldUDRCr,UDRCr,false);
      StepBack(UDRCr);
    end;
  end;
  return;
end;

updating procedure UpdateUserDefRepLines(string oldrepshortname,record UserDefRepVc UDRr)
begin
  record UserDefRepLinesVc oldUDRLr;
  record UserDefRepLinesVc UDRLr;
  Boolean found;
  
  found = true;
  UDRLr.shortname = oldrepshortname;
  while (LoopMain(UDRLr,1,found)) begin
    if (UDRLr.shortname!=oldrepshortname) then begin found = false; end;
    if (found) then begin
      RecordCopy(oldUDRLr,UDRLr);
      UDRLr.shortname = UDRr.shortname;
      RecordUpdate(oldUDRLr,UDRLr,false);
      StepBack(UDRLr);
    end;
  end;
  return;
end;

global
updating function Boolean  RepDef2ClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RepDefVc RepDefr;
  record UserDefRepVc oldUDRr;
  record UserDefRepVc UDRr;
  record RepDefBlock RDb;
  row RepDefBlock RDbrw;
  Integer i,rwcnt,foundrow,mwn;
  string 255 oldrepshortname;

  foundrow = -1;
  GetWindowRecord(wn,RepDefr);
  oldrepshortname = GetWindowString(wn,"oldrepshortname");
  BlockLoad(RDb);
  rwcnt = MatRowCnt(RDb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RDb,i,RDbrw);
    if (RDbrw.shortname==oldrepshortname) then begin
      foundrow = i;
      i = rwcnt;
    end;
  end;
  if (foundrow>=0) then begin
    RDbrw.repname = RepDefr.repname;
    RDbrw.shortname = RepDefr.shortname;
    RDbrw.header = RepDefr.header;
    MatRowPut(RDb,foundrow,RDbrw);    
    BlockStore(RDb);
    
    UDRr.shortname = oldrepshortname;
    if (ReadFIrstMain(UDRr,1,true)) then begin
      if (UDRr.shortname!=RepDefr.shortname) or (UDRr.repname!=RepDefr.repname) then begin
        RecordCopy(oldUDRr,UDRr);
        UDRr.shortname = RepDefr.shortname;
        UDRr.repname = RepDefr.repname;
        if (RecordUpdate(oldUDRr,UDRr,false)==0) then begin
          UpdateUserDefRepColumns(oldrepshortname,UDRr);
          UpdateUserDefRepLines(oldrepshortname,UDRr);
        end;
      end;
    end;
    res = false;
    mwn = MotherWindow(wn);        
//    CloseWindow(wn);
//    ReloadReportList;
  end else begin
    res = true;
  end;
  
  RepDef2ClassOnOKWindow = true;
  return;
end;

global
procedure DuplicateRs2WClass()
begin
  Integer wn,nwn;
  string 255 tstr;
  record RepDefBlock RDb;
  row RepDefBlock RepDefrw;
  Integer i,rwcnt;
  record RepDefVc RepDefr;
  record UserDefRepVc UDRr;
  
  wn = CurWindow;
  tstr = GetListString(wn,SelectedListLine(wn));  
  if (nonblank(tstr)) then begin
    BlockLoad(RDb);
    rwcnt = MatRowCnt(RDb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RDb,i,RepDefrw);
      if (RepDefrw.shortname==tstr) then begin
        nwn = OpenWindow("RepDef3Class",0,wn,"","",RepDefr);
        WindowDeactivateField(nwn);
        RepDefr.repname = RepDefrw.repname;
        RepDefr.shortname = RepDefrw.shortname;
        RepDefr.header = RepDefrw.header;
        PutWindowRecord(nwn,RepDefr);
        PutWindowString(nwn,"oldrepshortname",RepDefr.shortname)
        goto LDuplicateRs2WClass;
      end;
    end;
    if (tstr==USetStr(3144)) then begin
      nwn = OpenWindow("RepDef3Class",0,wn,"","",RepDefr);
      WindowDeactivateField(nwn);
      RepDefr.repname = "BalRn";
      RepDefr.shortname = USetStr(3144);
      RepDefr.header = USetStr(3144);
      PutWindowRecord(nwn,RepDefr);
      PutWindowString(nwn,"oldrepshortname",RepDefr.shortname)
      goto LDuplicateRs2WClass;
    end;
    if (tstr==USetStr(3145)) then begin
      nwn = OpenWindow("RepDef3Class",0,wn,"","",RepDefr);
      WindowDeactivateField(nwn);
      RepDefr.repname = "ResRn";
      RepDefr.shortname = USetStr(3145);
      RepDefr.header = USetStr(3145);
      PutWindowRecord(nwn,RepDefr);
      PutWindowString(nwn,"oldrepshortname",RepDefr.shortname)
      goto LDuplicateRs2WClass;
    end;
    if (tstr==USetStr(3221)) then begin
      nwn = OpenWindow("RepDef3Class",0,wn,"","",RepDefr);
      WindowDeactivateField(nwn);
      RepDefr.repname = "KeyRn";
      RepDefr.shortname = USetStr(3221);
      RepDefr.header = USetStr(3221);
      PutWindowRecord(nwn,RepDefr);
      PutWindowString(nwn,"oldrepshortname",RepDefr.shortname)
      goto LDuplicateRs2WClass;
    end;
  end;
LDuplicateRs2WClass:;  
  return;
end;

updating procedure CopyUserDefRepColumns(record UserDefRepVc oldUDRr,record UserDefRepVc UDRr)
begin
  record UserDefRepColumnsVc oldUDRCr;
  record UserDefRepColumnsVc UDRCr;
  Boolean found;
  
  found = true;
  oldUDRCr.shortname = oldUDRr.shortname;
  while (LoopMain(oldUDRCr,1,found)) begin
    if (oldUDRCr.shortname!=oldUDRr.shortname) then begin found = false; end;
    if (found) then begin
      RecordCopy(UDRCr,oldUDRCr);
      UDRCr.shortname = UDRr.shortname;
      RecordStore(UDRCr,false);
    end;
  end;
  return;
end;

updating procedure CopyUserDefRepLines(record UserDefRepVc oldUDRr,record UserDefRepVc UDRr)
begin
  record UserDefRepLinesVc oldUDRLr;
  record UserDefRepLinesVc UDRLr;
  Boolean found;
  
  found = true;
  oldUDRLr.shortname = oldUDRr.shortname;
  while (LoopMain(oldUDRLr,1,found)) begin
    if (oldUDRLr.shortname!=oldUDRr.shortname) then begin found = false; end;
    if (found) then begin
      RecordCopy(UDRLr,oldUDRLr);
      UDRLr.shortname = UDRr.shortname;
      RecordStore(UDRLr,false);
    end;
  end;
  return;
end;

global
updating function Boolean RepDef3ClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RepDefVc RepDefr;
  record UserDefRepVc oldUDRr;
  record UserDefRepVc UDRr;
  record RepDefBlock RDb;
  row RepDefBlock RDbrw;
  Integer i,rwcnt,foundrow,mwn;
  string 255 oldrepshortname;

  foundrow = -1;
  GetWindowRecord(wn,RepDefr);
  oldrepshortname = GetWindowString(wn,"oldrepshortname");


  BlockLoad(RDb);
  rwcnt = MatRowCnt(RDb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RDb,i,RDbrw);
    if (RDbrw.shortname==RepDefr.shortname) then begin
      foundrow = i;
      i = rwcnt;
    end;
  end;
  if (foundrow>=0) then begin
    MessageBox(21101,"");
    res = false;
    mwn = MotherWindow(wn);    
  end else begin
    if (oldrepshortname==USetStr(3144)) or (oldrepshortname==USetStr(3145)) or (oldrepshortname==USetStr(3221)) then begin
      RDbrw.repname = RepDefr.repname;
      RDbrw.shortname = RepDefr.shortname;
      RDbrw.header = RepDefr.header;
      MatRowPut(RDb,MatRowCnt(RDb),RDbrw);    
      BlockStore(RDb);
      if (oldrepshortname==USetStr(3144)) then begin
        UDRr.shortname = "BalRn";
      end;
      if (oldrepshortname==USetStr(3145)) then begin
        UDRr.shortname = "ResRn";
      end;
      if (oldrepshortname==USetStr(3221)) then begin
        UDRr.shortname = "KeyRn";
      end;
      if (ReadFirstMain(UDRr,1,true)) then begin
        RecordCopy(oldUDRr,UDRr);
        UDRr.shortname = RepDefr.shortname;
        UDRr.repname = RepDefr.repname;
        if (RecordStore(UDRr,false)) then begin
          CopyUserDefRepColumns(oldUDRr,UDRr);
          CopyUserDefRepLines(oldUDRr,UDRr);
        end;
      end;
      res = false;
      mwn = MotherWindow(wn);    
    end else begin
      UDRr.shortname = oldrepshortname;
      if (ReadFirstMain(UDRr,1,true)) then begin
        RDbrw.repname = RepDefr.repname;
        RDbrw.shortname = RepDefr.shortname;
        RDbrw.header = RepDefr.header;
        MatRowPut(RDb,MatRowCnt(RDb),RDbrw);    
        BlockStore(RDb);
        RecordCopy(oldUDRr,UDRr);
        UDRr.shortname = RepDefr.shortname;
        UDRr.repname = RepDefr.repname;
        if (RecordStore(UDRr,false)) then begin
          CopyUserDefRepColumns(oldUDRr,UDRr);
          CopyUserDefRepLines(oldUDRr,UDRr);
        end;
        mwn = MotherWindow(wn);    
      end else begin
        MessageBox(21100,"");
        CloseWindow(wn);
      end;
      res = false;
    end;
  end;
  
  RepDef3ClassOnOKWindow = true;
  return;
end;

/*
global
updating function Boolean RepDef3ClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RepDefVc RepDefr;
  record UserDefRepVc oldUDRr;
  record UserDefRepVc UDRr;
  record RepDefBlock RDb;
  row RepDefBlock RDbrw;
  Integer i,rwcnt,foundrow,mwn;
  string 255 oldrepshortname;

  foundrow = -1;
  GetWindowRecord(wn,RepDefr);
  oldrepshortname = GetWindowString(wn,"oldrepshortname");


  BlockLoad(RDb);
  rwcnt = MatRowCnt(RDb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RDb,i,RDbrw);
    if (RDbrw.shortname==oldrepshortname) then begin
      foundrow = i;
      i = rwcnt;
    end;
  end;
  if (foundrow>=0) then begin
    if (RepDefr.shortname!=oldrepshortname) then begin
      RDbrw.repname = RepDefr.repname;
      RDbrw.shortname = RepDefr.shortname;
      RDbrw.header = RepDefr.header;
      MatRowPut(RDb,MatRowCnt(RDb),RDbrw);    
      BlockStore(RDb);
    
      UDRr.shortname = oldrepshortname;
      if (ReadFIrstMain(UDRr,1,true)) then begin
        RecordCopy(oldUDRr,UDRr);
        UDRr.shortname = RepDefr.shortname;
        UDRr.repname = RepDefr.repname;
        if (RecordStore(UDRr,false)) then begin
          CopyUserDefRepColumns(oldUDRr,UDRr);
          CopyUserDefRepLines(oldUDRr,UDRr);
        end;
      end;
    end else begin
      MessageBox(21101,"");
    end;
    res = false;
    mwn = MotherWindow(wn);    
//    CloseWindow(wn);
//    ReloadReportList;
  end else begin
    if (oldrepshortname==USetStr(3144)) or (oldrepshortname==USetStr(3145)) or (oldrepshortname==USetStr(3221)) then begin
      RDbrw.repname = RepDefr.repname;
      RDbrw.shortname = RepDefr.shortname;
      RDbrw.header = RepDefr.header;
      MatRowPut(RDb,MatRowCnt(RDb),RDbrw);    
      BlockStore(RDb);
      if (oldrepshortname==USetStr(3144)) then begin
        UDRr.shortname = "BalRn";
      end;
      if (oldrepshortname==USetStr(3145)) then begin
        UDRr.shortname = "ResRn";
      end;
      if (oldrepshortname==USetStr(3221)) then begin
        UDRr.shortname = "KeyRn";
      end;
      if (ReadFIrstMain(UDRr,1,true)) then begin
        RecordCopy(oldUDRr,UDRr);
        UDRr.shortname = RepDefr.shortname;
        UDRr.repname = RepDefr.repname;
        if (RecordStore(UDRr,false)) then begin
          CopyUserDefRepColumns(oldUDRr,UDRr);
          CopyUserDefRepLines(oldUDRr,UDRr);
        end;
      end;
      res = false;
      mwn = MotherWindow(wn);    
    end else begin
      MessageBox(21100,"");
      CloseWindow(wn);
      res = false;
    end;
  end;
  
  RepDef3ClassOnOKWindow = true;
  return;
end;
*/

global
function Boolean UserActCheckRClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  LongInt ddif;
  record RcVc RepSpec;

  switch (fieldname) begin
    case "Period2Str": 
      GetWindowRecord(wn,RepSpec);
      ddif = DateDiff(RepSpec.sEndDate,RepSpec.sStartDate);
      if (ddif>7) then begin MessageBox(0,USetStr(2241)); end;
  end;
  UserActCheckRClassAfterEditField = res;
  RETURN;
END;

function Boolean DoResRClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  Date d1,d2;
  string 30 tstr;
  
  res = false;
  switch (fieldname) begin
/*  
    case "ObjStr":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.ObjStr)) then begin
        RepSpec.f6 = "";
        PutWindowRecord(wn,RepSpec);
      end;
    case "f6":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.f6)) then begin
        RepSpec.ObjStr = "";
        PutWindowRecord(wn,RepSpec);
      end;
*/      
    case "Stext":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.Stext)) then begin
        In2Period(RepSpec.Stext,d1,d2);
        tstr = d1;
        tstr = tstr & ":";
        tstr = tstr & d2;
        RepSpec.Stext = tstr;
        PutWindowRecord(wn,RepSpec);
      end;
  end;
  DoResRClassAfterEditField = res;
  return;
end;

global
function Boolean ResRClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  ResRClassAfterEditField = res;
  return;
end;

global
function Boolean Res1RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res1RClassAfterEditField = res;
  return;
end;

global
function Boolean Res2RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res2RClassAfterEditField = res;
  return;
end;

global
function Boolean Res3RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res3RClassAfterEditField = res;
  return;
end;

global
function Boolean Res4RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res4RClassAfterEditField = res;
  return;
end;

global
function Boolean Res5RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res5RClassAfterEditField = res;
  return;
end;

global
function Boolean Res6RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res6RClassAfterEditField = res;
  return;
end;

global
function Boolean Res7RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res7RClassAfterEditField = res;
  return;
end;

global
function Boolean Res8RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res8RClassAfterEditField = res;
  return;
end;

global
function Boolean Res9RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res9RClassAfterEditField = res;
  return;
end;

global
function Boolean Res10RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res10RClassAfterEditField = res;
  return;
end;

global
function Boolean Res11RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res11RClassAfterEditField = res;
  return;
end;

global
function Boolean Res12RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res12RClassAfterEditField = res;
  return;
end;

global
function Boolean Res13RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res13RClassAfterEditField = res;
  return;
end;

global
function Boolean Res14RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res14RClassAfterEditField = res;
  return;
end;

global
function Boolean Res15RClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = DoResRClassAfterEditField(wn,fieldname,fn,rownr,changed);
  Res15RClassAfterEditField = res;
  return;
end;

global
function Boolean ConsResRClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  Date d1,d2;
  string 30 tstr;
  
  res = false;
  switch (fieldname) begin
/*  
    case "ObjStr":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.ObjStr)) then begin
        RepSpec.f6 = "";
        PutWindowRecord(wn,RepSpec);
      end;
    case "f6":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.f6)) then begin
        RepSpec.ObjStr = "";
        PutWindowRecord(wn,RepSpec);
      end;
*/
    case "Stext":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.Stext)) then begin
        In2Period(RepSpec.Stext,d1,d2);
        tstr = d1;
        tstr = tstr & ":";
        tstr = tstr & d2;
        RepSpec.Stext = tstr;
        PutWindowRecord(wn,RepSpec);
      end;  
  end;
  ConsResRClassAfterEditField = res;
  RETURN;
END;

global
function Boolean PLVATHunRClassAccSpecButtonAfter(Integer wn,Boolean changedf)
begin        
  record RcVc RepSpec;  
  Boolean res;
 
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.AccSpec!=0) then begin
    RepSpec.flags[6] = 2;
  end;
  PutWindowRecord(wn,RepSpec);
  PLVATHunRClassAccSpecButtonAfter = res;  
  return;
end;

global
function Boolean DDSEBOClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  Date d1,d2;

  switch (fieldname) begin
    case "Period2Str":
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      In2Period(RepSpec.Period2Str,d1,d2);
      RepSpec.sStartDate = d1;
      RepSpec.sEndDate = d2;
      PutWindowRecord(wn,RepSpec);
      SelectWindow(wn);
  end;
  DDSEBOClassAfterEditField = res;
  return;
end;

global
function Boolean GroupInvoiceVClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  Date d1,d2;
  record RcVc RepSpec;
  string 255 tstr;
  
  res = false;
  switch (fieldname) begin
    case "f4":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.f4)) then begin
        In2Period(RepSpec.f4,d1,d2);
        tstr = d1;
        tstr = tstr & ":";
        tstr = tstr & d2;
        RepSpec.f4 = tstr;
        PutWindowRecord(wn,RepSpec);
      end;
  end;
  GroupInvoiceVClassAfterEditField = res;
  return;
end;

global
function Boolean CreateInvVClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  Date d1,d2;
  record RcVc RepSpec;
  string 255 tstr;
  
  res = false;
  switch (fieldname) begin
    case "f4":
      GetWindowRecord(wn,RepSpec);
      if (nonblank(RepSpec.f4)) then begin
        In2Period(RepSpec.f4,d1,d2);
        tstr = d1;
        tstr = tstr & ":";
        tstr = tstr & d2;
        RepSpec.f4 = tstr;
        PutWindowRecord(wn,RepSpec);
      end;
  end;
  CreateInvVClassAfterEditField = res;
  return;
end;

global
function Boolean GPProRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  GPProRClassActiveEditField = res;
  return;
end;

global
function Boolean PRActBudRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  PRActBudRClassActiveEditField = res;
  return;
end;

global
function Boolean ProInvRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  ProInvRClassActiveEditField = res;
  return;
end;

global
function Boolean ProListRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  ProListRClassActiveEditField = res;
  return;
end;

global
function Boolean PRRevRecRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  PRRevRecRClassActiveEditField = res;
  return;
end;

global
function Boolean ProStatRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  ProStatRClassActiveEditField = res;
  return;
end;

global
function Boolean PrTransRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = LimitedAccessTest(wn,fieldname);
  PrTransRClassActiveEditField = res;
  return;
end;

global
function Boolean ARRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
  end;
  switch (fieldname) begin
    case "f2":  if (Userr.limitedAccess>=kLimitedAccessUserOnly) then begin res = false; end;
    case "TransStr":  if (Userr.limitedAccess>=kLimitedAccessUserOnly) then begin res = false; end;
  end;
  ARRClassActiveEditField = res;
  return;
end;

global
function Boolean IVJRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
  end;
  switch (fieldname) begin
    case "AccStr":  if (Userr.limitedAccess>0) then begin res = false; end;
    case "Comment":  if (Userr.limitedAccess>0) then begin res = false; end;
  end;
  IVJRClassActiveEditField = res;
  return;
end;

global
function Boolean IVJRClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  Date d1,d2;
  string 255 tstr;

  switch (fieldname) begin
    case "Period2Str2":
      DeselectWindow(wn,false);
      GetWindowRecord(wn,RepSpec);
      tstr = RepSpec.Period2Str2;
      In2Period(tstr,d1,d2);
      RepSpec.Period2Str2 = tstr;
      PutWindowRecord(wn,RepSpec);
      SelectWindow(wn);
  end;
  IVJRClassAfterEditField = res;
  return;
end;

global
function Boolean IVGPRClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
  end;
  switch (fieldname) begin
    case "AccStr":  if (Userr.limitedAccess==1) then begin res = false; end;
    case "f5":  if (Userr.limitedAccess>0) then begin res = false; end;
  end;
  IVGPRClassActiveEditField = res;
  return;
end;

global
function Boolean CURClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  record UserVc Userr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
  end;
  switch (fieldname) begin
    case "Language":  if (Userr.limitedAccess==1) then begin res = false; end;
    case "f2":  if (Userr.limitedAccess==1) then begin res = false; end;
  end;
  CURClassActiveEditField = res;
  return;
end;

function string 255 AssistedDefRepKey(Integer ArtMode,Integer AccSpec,Integer UsedOnly,record RcVc RepSpec)
begin
  string 255 res;
  
  switch (ArtMode) begin
    case kKFRResult: 
      switch (AccSpec) begin
        case 1:
          res = "DebResult("""; 
        case 2:
          res = "CredResult("""; 
        otherwise
          res = "Result("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """)";
    case kKFRAvgResult: 
      switch (AccSpec) begin
        case 1:
          res = "AvgDebResult("""; 
        case 2:
          res = "AvgCredResult("""; 
        otherwise
          res = "AvgResult("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """)";
    case kKFRBalance:
      switch (AccSpec) begin
        case 1:
          res = "DebBalance("""; 
        case 2:
          res = "CredBalance("""; 
        otherwise
          res = "Balance("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """)";
    case kKFRResultAndVATCode:
      switch (AccSpec) begin
        case 1:
          res = "VATDebResult("""; 
        case 2:
          res = "VATCredResult("""; 
        otherwise
          res = "VATResult("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """";
      res = res & ",";
      res = res & """";
      res = res & RepSpec.FirstAcc;
      res = res & """)";
    case kKFRAvgResultAndVATCode:
      switch (AccSpec) begin
        case 1:
          res = "AvgVATDebResult("""; 
        case 2:
          res = "AvgVATCredResult("""; 
        otherwise
          res = "AvgVATResult("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """";
      res = res & ",";
      res = res & """";
      res = res & RepSpec.FirstAcc;
      res = res & """)";
    case kKFRBalanceAndVATCode:
      switch (AccSpec) begin
        case 1:
          res = "VATDebBalance("""; 
        case 2:
          res = "VATCredBalance("""; 
        otherwise
          res = "VATBalance("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """";
      res = res & ",";
      res = res & """";
      res = res & RepSpec.FirstAcc;
      res = res & """)";
    case kKFRObjectResult:
      switch (AccSpec) begin
        case 1:
          res = "ObjDebResult("""; 
        case 2:
          res = "ObjCredResult("""; 
        otherwise
          res = "ObjResult("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """";
      res = res & ",";
      res = res & """";
      res = res & RepSpec.ObjStr;
      res = res & """)";
    case kKFRAvgObjectResult:
      switch (AccSpec) begin
        case 1:
          res = "AvgObjDebResult("""; 
        case 2:
          res = "AvgObjCredResult("""; 
        otherwise
          res = "AvgObjResult("""; 
      end;
      res = res & RepSpec.f1;
      res = res & """";
      res = res & ",";
      res = res & """";
      res = res & RepSpec.ObjStr;
      res = res & """)";
    case kKFRRowTotal:
      res = "KEY("""; 
      res = res & RepSpec.AccStr;
      res = res & """)";
    case kKFRAPDue:
      switch (UsedOnly) begin
        case 4:
          res = "APOHDue("""; 
        otherwise
          res = "APDue("""; 
      end;
      if (RepSpec.long1<0) then begin
        res = res & "0";
      end else begin
        res = res & RepSpec.long1;
      end;
      res = res & """)";
    case kKFRAPOnAccOutstanding:
      res = "APOnAcc"; 
    case kKFRARDue:
      switch (UsedOnly) begin
        case 1:
          res = "ARDPNRDue("""; 
        case 2:
          res = "ARNRDue("""; 
        case 3:
          res = "ARDPDue("""; 
        otherwise
          res = "ARDue("""; 
      end;
      if (RepSpec.long1<0) then begin
        res = res & "0";
      end else begin
        res = res & RepSpec.long1;
      end;
      res = res & """)";
    case kKFRARDownpayDue:
    case kKFRAROnAccOutstanding:
      res = "AROnAcc"; 
  end;
  AssistedDefRepKey = res;
  return;
end;

global
function Boolean AssistedDefRepKeySClassArtModeButtonAction(Integer wn,Integer value)
begin
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  RepSpec.f6 = AssistedDefRepKey(value,RepSpec.AccSpec,RepSpec.UsedOnly,RepSpec);
  PutWindowRecord(wn,RepSpec);
  AssistedDefRepKeySClassArtModeButtonAction = true;
  return;
end;

global
function Boolean AssistedDefRepKeySClassUsedOnlyButtonAction(Integer wn,Integer value)
begin
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  RepSpec.f6 = AssistedDefRepKey(RepSpec.ArtMode,RepSpec.AccSpec,value,RepSpec);
  PutWindowRecord(wn,RepSpec);
  AssistedDefRepKeySClassUsedOnlyButtonAction = true;
  return;
end;

global
function Boolean AssistedDefRepKeySClassAccSpecButtonAction(Integer wn,Integer value)
begin
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  RepSpec.f6 = AssistedDefRepKey(RepSpec.ArtMode,value,RepSpec.UsedOnly,RepSpec);
  PutWindowRecord(wn,RepSpec);
  AssistedDefRepKeySClassAccSpecButtonAction = true;
  return;
end;

global
function Boolean AssistedDefRepKeySClassOnOpenWindow(Integer wn)
begin
  record RcVc RepSpec;

  GetWindowRecord(wn,RepSpec);
  RepSpec.f6 = AssistedDefRepKey(RepSpec.ArtMode,RepSpec.AccSpec,RepSpec.UsedOnly,RepSpec);
  PutWindowRecord(wn,RepSpec);
  AssistedDefRepKeySClassOnOpenWindow = true;
  return;
end;

global
function Boolean AssistedDefRepKeySClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  record RcVc RepSpec;

  if (changed!=0) then begin
    GetWindowRecord(wn,RepSpec);
    RepSpec.f6 = AssistedDefRepKey(RepSpec.ArtMode,RepSpec.AccSpec,RepSpec.UsedOnly,RepSpec);
    PutWindowRecord(wn,RepSpec);
  end;
  AssistedDefRepKeySClassAfterEditField = true;
  return;
end;

global
procedure UserDefRepKeyReplaceFormulae()
begin
  record RcVc RepSpec;
  Integer wn,mwn;
  Integer rownr;
  record UserDefRepVc UDRr;
  row UserDefRepVc UDRrw;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  rownr = WindowActiveRow(mwn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  DeselectWindow(mwn,true);
  GetWindowRecord(mwn,UDRr);
  if (rownr>=0) then begin
    MatRowGet(UDRr,rownr,UDRrw);    
    UDRrw.defstr = RepSpec.f6;
    MatRowPut(UDRr,rownr,UDRrw);    
  end;
  CloseWindow(wn);
  PutWindowRecord(mwn,UDRr);
  if (rownr>=0) then begin
    WindowFieldGoto(mwn,UDRr,rownr,"defstr",true);
  end;
  return;
end;

procedure UserDefRepKeyAddFormulaeRun(Integer wn)
begin
  record RcVc RepSpec;
  Integer mwn;
  Integer rownr;
  record UserDefRepVc UDRr;
  row UserDefRepVc UDRrw;
  
  mwn = MotherWindow(wn);
  rownr = WindowActiveRow(mwn);
  DeselectWindow(wn,false);
  DeselectWindow(mwn,false);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,UDRr);
  if (rownr>=0) then begin
    MatRowGet(UDRr,rownr,UDRrw);    
    UDRrw.defstr = UDRrw.defstr & RepSpec.f6;
    MatRowPut(UDRr,rownr,UDRrw);    
  end;
  CloseWindow(wn);
  PutWindowRecord(mwn,UDRr);
  if (rownr>=0) then begin
    WindowFieldGoto(mwn,UDRr,rownr,"defstr",true);
  end;
  return;
end;

global
procedure UserDefRepKeyAddFormulae()
begin
  Integer wn;
  
  wn = CurWindow;
  UserDefRepKeyAddFormulaeRun(wn);
  return;
end;

/*
not working
global
function Boolean AssistedDefRepKeySClassOnOKWindow(Integer wn)
begin
  UserDefRepKeyAddFormulaeRun(wn);
  AssistedDefRepKeySClassOnOKWindow = true;
  return;
end;
*/

function string 255 AssistedDefRepColumns(Integer ArtMode,record RcVc RepSpec)
begin
  string 255 res;
  
  switch (ArtMode) begin
    case kKFRCColumnTotal: 
      res = "Column("""; 
      res = res & RepSpec.AccStr;
      res = res & """)";
  end;
  AssistedDefRepColumns = res;
  return;
end;

global
function Boolean AssistedDefRepColumnsSClassArtModeButtonAction(Integer wn,Integer value)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.f6 = AssistedDefRepColumns(value,RepSpec);
  PutWindowRecord(wn,RepSpec);
  AssistedDefRepColumnsSClassArtModeButtonAction = true;
  return;
end;

global
function Boolean AssistedDefRepColumnsSClassOnOpenWindow(Integer wn)
begin
  record RcVc RepSpec;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  RepSpec.f6 = AssistedDefRepColumns(RepSpec.ArtMode,RepSpec);
  PutWindowRecord(wn,RepSpec);
  AssistedDefRepColumnsSClassOnOpenWindow = true;
  return;
end;

global
function Boolean AssistedDefRepColumnsSClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  record RcVc RepSpec;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RepSpec);
    RepSpec.f6 = AssistedDefRepColumns(RepSpec.ArtMode,RepSpec);
    PutWindowRecord(wn,RepSpec);
  end;
  AssistedDefRepColumnsSClassAfterEditField = true;
  return;
end;

global
procedure UserDefRepColumnsReplaceFormulae()
begin
  record RcVc RepSpec;
  Integer wn,mwn;
  Integer rownr;
  record UserDefRepColumnsVc UDRCr;
  row UserDefRepColumnsVc UDRCrw;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  rownr = WindowActiveRow(mwn);
  DeselectWindow(wn,true);
  DeselectWindow(mwn,true);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,UDRCr);
  if (rownr>=0) then begin
    MatRowGet(UDRCr,rownr,UDRCrw);    
    UDRCrw.AddInfo = RepSpec.f6;
    MatRowPut(UDRCr,rownr,UDRCrw);    
  end;
  CloseWindow(wn);
  PutWindowRecord(mwn,UDRCr);
  if (rownr>=0) then begin
    WindowFieldGoto(mwn,UDRCr,rownr,"AddInfo",true);
  end;
  return;
end;

global
procedure UserDefRepColumnsAddFormulae()
begin
  record RcVc RepSpec;
  Integer wn,mwn;
  Integer rownr;
  record UserDefRepColumnsVc UDRCr;
  row UserDefRepColumnsVc UDRCrw;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  rownr = WindowActiveRow(mwn);
  DeselectWindow(wn,true);
  DeselectWindow(mwn,true);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,UDRCr);
  if (rownr>=0) then begin
    MatRowGet(UDRCr,rownr,UDRCrw);    
    UDRCrw.AddInfo = UDRCrw.AddInfo & RepSpec.f6;
    MatRowPut(UDRCr,rownr,UDRCrw);    
  end;
  CloseWindow(wn);
  PutWindowRecord(mwn,UDRCr);
  if (rownr>=0) then begin
    WindowFieldGoto(mwn,UDRCr,rownr,"AddInfo",true);
  end;
  return;
end;

global
function Boolean AssistedDefRepColumnsSClassOnOKWindow(Integer wn)
begin
  UserDefRepColumnsAddFormulae;
  AssistedDefRepColumnsSClassOnOKWindow = true;
  return;
end;

global
function Boolean XBRLReportEClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  Date FYStartDate,FYEndDate;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  FindFiscalYear(RepSpec.sStartDate,FYStartDate,FYEndDate);
  if (RepSpec.sStartDate!=FYStartDate or RepSpec.sEndDate!=FYEndDate) then begin
    MessageBox(17258,"");
    WindowFieldGoto(wn,RepSpec,-1,"Period2Str",true);
    res = false;
  end;
  
  XBRLReportEClassOnOKWindow = res;
  return;
end;

global
function Boolean ChangeCOCurrencyVClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f4)) then begin
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"f4",true);
    res = false;
  end;
  
  ChangeCOCurrencyVClassOnOKWindow = res;
  return;
end;

global
function Boolean IVRClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1) and blank(RepSpec.f3)) then begin
    MessageBox(20873,"");
    WindowFieldGoto(wn,RepSpec,-1,"f1",true);
    res = false;
  end;
  IVRClassOnOKWindow = res;
  return;
end;

global
updating function boolean EngIntrastatVIUKEClassOnOKWindow(integer wn)
begin
  boolean res;
  date ed;
  record RcVc RepSpec;

  res = true;
  GetWindowRecord(wn, RepSpec);
  ed = AddDay(RepSpec.sEndDate,1);
  if ((GetDay(RepSpec.sStartDate)==1) and (GetDay(ed)==1)) then begin
  end else begin
    MessageBox(1163,"");
    res = false;
  end; 
  EngIntrastatVIUKEClassOnOKWindow = res;
  return;
end;