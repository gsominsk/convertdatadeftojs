external function Integer OpenMasterWClass();
remote function Boolean CurUserHasMailbox(var string);
remote updating function Integer ManyActiveProdConfirmRemote(record RcVc,var string,var record ProdVc,var record ProdOrderVc);
remote updating function Integer RecordProdQtys(record RcVc,var LongInt,var LongInt,var string);
remote updating function Integer RegTimeActivity(record RcVc,var string,var LongInt,var LongInt,var string);
remote updating function Integer RegTimeProduction(record RcVc,var string,var record ProdVc,var record ProdOrderVc,var Boolean,var string);

procedure ProdQtysOClassWOpen(string user,LongInt prodordnr,LongInt prodnr,string enteredprodordnr)
begin
  record RcVc RepSpec;
  Integer nwn;
  
  RecordNew(RepSpec);
  nwn = OpenWindow("ProdQtysOClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.AccStr = CurrentUser;
  RepSpec.long1 = prodordnr;
  RepSpec.long2 = prodnr;
  RepSpec.f5 = enteredprodordnr;
  PutWindowRecord(nwn,RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"vals1",true);
  return;
end;

procedure GetActiveProdAct(var LongInt prodordnr,var LongInt prodnr)
begin
  record ActVc Actr;
  record ProdVc Prodr;
  string 200 keystr;
  
  keystr = "OKFlagUserMain:";
  keystr = keystr & CurrentUser;  
  Actr.OKFlag = 0;  
  if (ReadLastKey(keystr,Actr,1,true)) then begin
    if (Actr.ProdSerNr>0) then begin
      Prodr.SerNr = Actr.ProdSerNr;
      if (ReadFirstMain(Prodr,1,true)) then begin
        prodordnr = Prodr.ProdOrder;
      end;
      prodnr = Actr.ProdSerNr;
    end;
  end;
  return;
end;

global
procedure PRTProdTimeWOpen()
begin
  record RcVc RepSpec;
  Integer wn,nwn;
  LongInt prodordnr,prodnr;
  
  wn = CurWindow;
  prodordnr = -1;
  prodnr = -1;
  if (UserCanAction("AllowManyActiveProd",false)==false) then begin
    GetActiveProdAct(prodordnr,prodnr);
  end;
  if ((prodordnr>0) and (prodnr>0)) then begin
    ProdQtysOClassWOpen(CurrentUser,prodordnr,prodnr,"");
  end else begin
    nwn = OpenWindow("PRTProdTimeOClass",1,0,"","",RepSpec);
    DeselectWindow(nwn,false);
    RepSpec.AccStr = CurrentUser;
    RepSpec.long1 = -1;
    PutWindowRecord(nwn,RepSpec);
    WindowFieldGoto(nwn,RepSpec,-1,"long1",true);
  end;
  CloseWindow(wn);
  return;
end;

global
procedure PRTOtherTimeWOpen()
begin
  record RcVc RepSpec;
  Integer wn,nwn;
  LongInt prodordnr,prodnr;
  
  wn = CurWindow;
  prodordnr = -1;
  prodnr = -1;
  if (UserCanAction("AllowManyActiveProd",false)==false) then begin
    GetActiveProdAct(prodordnr,prodnr);
  end;
  if ((prodordnr>0) and (prodnr>0)) then begin
    ProdQtysOClassWOpen(CurrentUser,prodordnr,prodnr,"");
  end else begin
    nwn = OpenWindow("PRTOtherTimeOClass",1,0,"","",RepSpec);
    DeselectWindow(nwn,false);
    RepSpec.AccStr = CurrentUser;
    PutWindowRecord(nwn,RepSpec);
    WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  end;
  CloseWindow(wn);
  return;
end;

global
procedure PRTCalReport()
begin
  record RcVc RepSpec;

  RepSpec.f1 = CurrentUser;
  RepSpec.sStartDate = AddDay(CurrentDate,-7);
  RepSpec.sEndDate = CurrentDate;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ActCalRn";
  RunReport(RepSpec,0);
  return;
end;

procedure OpenMasterControl(string mailboxnr)
begin
  Integer nwn;

  nwn = OpenMasterWClass;
  return;
end;

procedure OpenProdRegTime()
begin
  record RcVc RepSpec;
  Integer nwn;

  RepSpec.AccStr = CurrentUser;
  nwn = OpenWindow("ProdRegTimeOClass",1,0,"","",RepSpec);    
  DeselectWindow(nwn,false);
  return;
end;

global
updating function Boolean PRTOtherTimeOClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  Integer err;
  string 255 errstr,mailboxnr;
  Boolean testf;
  Integer nwn;
  LongInt prodnr,prodordnr;

  testf = true;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin
    MessageBox(1969,"");
    testf = false;
  end;
  if (testf) then begin
    err = RegTimeActivity(RepSpec,errstr,prodnr,prodordnr,mailboxnr);
    switch (err) begin
      case 0:
//        OpenMasterControl(mailboxnr);
        OpenProdRegTime;
      case 1:
        PRTOtherTimeWOpen;
      case 2:
        ProdQtysOClassWOpen(CurrentUser,prodordnr,prodnr,"");
      otherwise
//        OpenMasterControl(mailboxnr);
        nwn = OpenWindow("PRTOtherTimeOClass",1,0,"","",RepSpec);
        DeselectWindow(nwn,false);
        RepSpec.AccStr = CurrentUser;
        PutWindowRecord(nwn,RepSpec);
        WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
        MessageBox(err,errstr);
    end;
    CloseWindow(wn);
  end;
  PRTOtherTimeOClassOnOKWindow = false;
  return;
end;

global
updating function Boolean PRTProdTimeOClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  Integer res;
  string 255 errstr,mailboxnr;
  Boolean testf,oneopenprodordf;
  Integer nwn;
  record ProdVc Prodr;
  record ProdOrderVc ProdOr;
  record RcVc Dummyr;
  LongInt enteredprodordnr;
  
  testf = true;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.long1<=0) then begin
    MessageBox(20762,"");
    testf = false;
  end;
  if (testf) then begin
    enteredprodordnr = RepSpec.long1;
    res = RegTimeProduction(RepSpec,errstr,Prodr,ProdOr,oneopenprodordf,mailboxnr);
    switch (res) begin
      case 0:
         CloseWindow(wn);
//         OpenMasterControl(mailboxnr);
         OpenProdRegTime;
      case 1:
         CloseWindow(wn);
         if (UserCanAction("AllowManyActiveProd",false)) and (enteredprodordnr!=ProdOr.SerNr) then begin
           RecordNew(RepSpec);
           nwn = OpenWindow("ManyActiveProdOClass",1,0,"","",RepSpec);
           DeselectWindow(nwn,false);
           RepSpec.AccStr = CurrentUser;
           RepSpec.long1 = enteredprodordnr;
           RepSpec.f5 = ProdOr.SerNr;
           RepSpec.f6 = Prodr.SerNr;
           PutWindowRecord(nwn,RepSpec);
         end else begin
           if (oneopenprodordf) then begin
             ProdQtysOClassWOpen(CurrentUser,ProdOr.SerNr,Prodr.SerNr,enteredprodordnr);
           end else begin
             RecordNew(RepSpec);
             nwn = OpenWindow("TSProdQtysOClass",1,0,"","",RepSpec);
             DeselectWindow(nwn,false);
             RepSpec.AccStr = CurrentUser;
             RepSpec.long1 = ProdOr.SerNr;
             RepSpec.long2 = Prodr.SerNr;
             RepSpec.f5 = enteredprodordnr;
             PutWindowRecord(nwn,RepSpec);
             WindowFieldGoto(nwn,RepSpec,-1,"vals1",true);
           end;
         end;
      case 2:
         RecordNew(RepSpec);
         nwn = OpenWindow("ToProdQtysOClass",1,0,"","",RepSpec);
         RepSpec.f1 = errstr;
         RepSpec.long1 = ProdOr.SerNr;
         RepSpec.vals0 = ProdOr.Qty;
         RepSpec.vals1 = ProdOr.Finished;
         RepSpec.vals2 = ProdOr.Discarded;
         RepSpec.vals3 = ProdOr.Qty - ProdOr.Finished;
         DeselectWindow(nwn,false);
         PutWindowRecord(nwn,RepSpec);
         CloseWindow(wn);
      case 3:
         CloseWindow(wn);
         OpenProdRegTime;
         MessageBox(20763,"");
       otherwise
         CloseWindow(wn);
//         OpenMasterControl(mailboxnr);
         nwn = OpenWindow("PRTProdTimeOClass",1,0,"","",RepSpec);
         DeselectWindow(nwn,false);
         RepSpec.AccStr = CurrentUser;
         RepSpec.long1 = -1;
         PutWindowRecord(nwn,RepSpec);
         WindowFieldGoto(nwn,RepSpec,-1,"long1",true);
         MessageBox(res,"");
    end;
  end;
  PRTProdTimeOClassOnOKWindow = false;
  return;
end;

global
updating function Boolean ProdQtysOClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record RcVc newRepSpec;
  Integer res;
  string 255 errstr;
  Boolean testf;
  Integer nwn;
  LongInt prodnr,prodordnr;
  
  testf = true;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.long1<=0) then begin
    MessageBox(20762,"");
    testf = false;
  end;
  if (RepSpec.vals0!=0) then begin
    if (blank(RepSpec.TransStr)) then begin
      testf = false;
      MessageBox(20761,"");
    end;
  end;
  if (blank(RepSpec.vals1)) then begin
//    testf = false;
  end;
  if (testf) then begin
    res = RecordProdQtys(RepSpec,prodnr,prodordnr,errstr);
    switch (res) begin
      case 0:
        CloseWindow(wn);
        if (nonblank(RepSpec.f5)) then begin
           RecordNew(newRepSpec);
           newRepSpec.long1 = FirstInRange(RepSpec.f5,10);
           nwn = OpenWindow("PRTProdTimeOClass",1,0,"","",newRepSpec);
           newRepSpec.AccStr = CurrentUser;
           newRepSpec.long1 = FirstInRange(RepSpec.f5,10);
           PutWindowRecord(nwn,newRepSpec);
           WindowFieldGoto(nwn,newRepSpec,-1,"long1",true);
        end else begin
           OpenProdRegTime;
        end;
      case 1:
        CloseWindow(wn);
        ProdQtysOClassWOpen(CurrentUser,prodordnr,prodnr,"");
      otherwise
        CloseWindow(wn);
        OpenProdRegTime;
        MessageBox(res," " & errstr);       
    end;
  end;
  ProdQtysOClassOnOKWindow = false;
  return;
end;

global
updating function Boolean TSProdQtysOClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record RcVc newRepSpec;
  Integer res;
  string 255 errstr;
  Boolean testf;
  Integer nwn;
  LongInt prodnr,prodordnr;
  
  testf = true;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.long1<=0) then begin
    MessageBox(20762,"");
    testf = false;
  end;
  if (RepSpec.vals0!=0) then begin
    if (blank(RepSpec.TransStr)) then begin
      testf = false;
      MessageBox(20761,"");
    end;
  end;
  if (RepSpec.FirstVer<=0) then begin
//    testf = false;
//    MessageBox(20764,"");
  end;
  if (testf) then begin
    res = RecordProdQtys(RepSpec,prodnr,prodordnr,errstr);
    switch (res) begin
      case 0:
         CloseWindow(wn);
         if (nonblank(RepSpec.f5)) then begin
           RecordNew(newRepSpec);
           newRepSpec.long1 = FirstInRange(RepSpec.f5,10);
           nwn = OpenWindow("PRTProdTimeOClass",1,0,"","",newRepSpec);
           newRepSpec.AccStr = CurrentUser;
           newRepSpec.long1 = FirstInRange(RepSpec.f5,10);
           PutWindowRecord(nwn,newRepSpec);
           WindowFieldGoto(nwn,newRepSpec,-1,"long1",true);
         end else begin
           OpenProdRegTime;
         end;
      case 1:
         CloseWindow(wn);

         RecordNew(RepSpec);
         nwn = OpenWindow("TSProdQtysOClass",1,0,"","",RepSpec);
         RepSpec.AccStr = CurrentUser;
         RepSpec.long1 = prodordnr;
         RepSpec.long2 = prodnr;
         PutWindowRecord(nwn,RepSpec);
         WindowFieldGoto(nwn,RepSpec,-1,"vals1",true);
       otherwise
         CloseWindow(wn);
         OpenProdRegTime;
         MessageBox(res,"");       
    end;
  end;
  TSProdQtysOClassOnOKWindow = false;
  return;
end;

global
function Boolean ToProdQtysOClassOnOKWindow(Integer wn)
begin  
  string 255 mailboxnr;

  CloseWindow(wn);
  if (CurUserHasMailbox(mailboxnr)) then begin
  end;      
//  OpenMasterControl(mailboxnr);
  OpenProdRegTime;
  ToProdQtysOClassOnOKWindow = false;
  return;
end;

global
updating procedure PRTProdTimeWSave()
begin
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (PRTProdTimeOClassOnOKWindow(wn)) then begin
    
  end;
  return;
end;

global
updating procedure PRTOtherTimeWSave()
begin
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (PRTOtherTimeOClassOnOKWindow(wn)) then begin
    
  end;
  return;
end;

global
updating procedure ProdQtysOClassWSave()
begin
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (ProdQtysOClassOnOKWindow(wn)) then begin
    
  end;
  return;
end;

global
updating procedure ProdQtysOClassWCancel()
begin
  Integer wn;
  
  wn = CurWindow;
  CloseWindow(wn);
  OpenProdRegTime;
  return;
end;

global
updating procedure TSProdQtysOClassWCancel()
begin
  Integer wn;
  
  wn = CurWindow;
  CloseWindow(wn);
  OpenProdRegTime;
  return;
end;

global
updating procedure TSProdQtysOClassWSave()
begin
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (TSProdQtysOClassOnOKWindow(wn)) then begin
    
  end;
  return;
end;

global
procedure ToProdQtysClose()
begin    
  string 255 mailboxnr;
  
  CloseWindow(CurWindow);
  if (CurUserHasMailbox(mailboxnr)) then begin
  end;      
//  OpenMasterControl(mailboxnr);
  OpenProdRegTime;
//  OpenLoginWindow(0,"Login2Class",0);
  return;
end;

global
updating procedure ManyActiveProdConfirm()
begin  
  record RcVc RepSpec;
  Integer wn,err,nwn;
  Boolean testf;
  string 255 errstr;
  record ProdVc Prodr;
  record ProdOrderVc ProdOr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  testf = true;
  if (RepSpec.long1<=0) then begin
    MessageBox(1969,"");
    testf = false;
  end;
  if (testf) then begin
    err = ManyActiveProdConfirmRemote(RepSpec,errstr,Prodr,ProdOr);
    switch (err) begin
      case 0:
         CloseWindow(wn);
         OpenProdRegTime;
      case 2:         
         RecordNew(RepSpec);
         nwn = OpenWindow("ToProdQtysOClass",1,0,"","",RepSpec);
         RepSpec.f1 = errstr;
         RepSpec.long1 = ProdOr.SerNr;
         RepSpec.vals0 = ProdOr.Qty;
         RepSpec.vals1 = ProdOr.Finished;
         RepSpec.vals2 = ProdOr.Discarded;
         RepSpec.vals3 = ProdOr.Qty - ProdOr.Finished;
         DeselectWindow(nwn,false);
         PutWindowRecord(nwn,RepSpec);
         CloseWindow(wn);
       otherwise
         OpenProdRegTime;
         MessageBox(err,"");
    end;
  end;
  return;
end;

global
procedure ManyActiveProdCancel()
begin  
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  CloseWindow(wn);
  nwn = OpenWindow("ProdQtysOClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.long1 = FirstInRange(RepSpec.f5,10);
  RepSpec.long2 = FirstInRange(RepSpec.f6,10);
  PutWindowRecord(nwn,RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"vals0",true);
  return;
end;

global
updating function Boolean PlanSalesVClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  LongInt fror,toor;
  Integer err;
  Boolean res;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin
    err = 1058;
  end;
  fror = FirstInRange(RepSpec.f1,10);
  toor = LastInRange(RepSpec.f1,10);
  if (fror<=0 or toor<fror) then begin
    err = 1008;
  end;
  if (err!=0) then begin
    WindowFieldGoto(wn,RepSpec,-1,"f1",true);
    MessageBox(err,"");
    res = false;
  end;
  
L99:;
  PlanSalesVClassOnOKWindow = res;
  return;
end;

global
function Boolean PRTProdTimeOClassOnClose(Integer wn,Integer wn2)
begin
  CloseWindow(wn)
  OpenProdRegTime;
  PRTProdTimeOClassOnClose = true;
  return;
end;

global
function Boolean ProdRegTimeOClassOnClose(Integer wn,Integer wn2)
begin
  ProdRegTimeOClassOnClose = true;
  return;
end;

global
function Boolean PRTOtherTimeOClassOnClose(Integer wn,Integer wn2)
begin
  CloseWindow(wn)
  OpenProdRegTime;
  PRTOtherTimeOClassOnClose = true;
  return;
end;

