external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean RentINVc_PasteCode(var record RentINVc);
remote function Boolean RentINVc_PasteInvItem(var record RentINVc);
remote function Boolean RentINVc_PasteInventoryNr(var record RentINVc);

global 
function Boolean RentINDClassInvItemEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentINVc Rentin;
 
  GetWindowRecord(wn,Rentin);
  if ((changedf!=0) or ((blank(Rentin.InvItemName)) and (nonblank(Rentin.InvItem)))) then begin
    GetWindowRecord(wn,Rentin);
    DeselectWindow(wn,false);
    if (RentINVc_PasteInvItem(Rentin)) then begin
      PutWindowRecord(wn,Rentin);
    end else begin
      Beep;
    end;
  end;
  RentINDClassInvItemEFAfter = true;
  return;
end;

global 
function Boolean RentINDClassInventoryNrEFAfter(Integer wn,Boolean changedf)
begin
  record RentINVc RentINr;
 
  GetWindowRecord(wn,RentINr);
  if (changedf) then begin
    GetWindowRecord(wn,RentINr);
    DeselectWindow(wn,false);
    if (RentINVc_PasteInventoryNr(RentINr)) then begin
      PutWindowRecord(wn,RentINr);
    end else begin
      Beep;
    end;
  end;
  RentINDClassInventoryNrEFAfter = true;
  return;
end;

global 
function Boolean RentINDClassCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record RentINVc Rentin;
 
  GetWindowRecord(wn,Rentin);
  if ((changedf!=0) or ((blank(Rentin.Name)) and (nonblank(Rentin.Code)))) then begin
    GetWindowRecord(wn,Rentin);
    DeselectWindow(wn,false);
    if (RentINVc_PasteCode(Rentin)) then begin
      PutWindowRecord(wn,Rentin);
    end else begin
      Beep;
    end;
  end;
  RentINDClassCodeEFAfter = true;
  return;
end;

global
function Boolean RentINDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Code": res = RentINDClassCodeEFAfter(wn,fn,rownr,changed);
    case "InvItem": res = RentINDClassInvItemEFAfter(wn,fn,rownr,changed);
    case "InventoryNr": res = RentINDClassInventoryNrEFAfter(wn,changed!=0);
  end;
  RentINDClassAfterEditField = res;
  RETURN;
END;

global
procedure RentINDHistsm()
begin
  record RentINVc RentINr;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,RentINr);
  ReportDefaults(RepSpec,"SerialNrRClass");  
  RepSpec.Media = mtScreen;
  RepSpec.f1 = RentINr.Code;
  RepSpec.f2 = RentINr.SerialNr;
  RepSpec.repname = "SerialNrRn";
  RunReport(RepSpec,0);
  return;
end;

global
function string 40 RentINDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  RentINDClassSpecPasteName = psname;
  return;
end;

global
procedure RentINDKnownHist()
begin
  record RcVc RepSpec;
  record RentINVc RentINr;
  record YearBlock YearRec;
  row YearBlock YearRecrw;
  Integer wn,i;
  
  BlockLoad(YearRec);
  wn = CurWindow;
  i = 1;
  GetWindowRecord(wn,RentINr);
  ReportDefaults(RepSpec,"SerialNrRClass");  
  RepSpec.Media = mtScreen;
  RepSpec.f1 = RentINr.Code;
  RepSpec.f2 = RentINr.SerialNr;
  RepSpec.repname = "SERSerialRn";
  if (MatRowCnt(YearRec)>0) then begin
    MatRowGet(YearRec,0,YearRecrw);
    RepSpec.sStartDate = YearRecrw.StartDate;
  end;
  RunReport(RepSpec,0);
  return;
end;

global
procedure RentUpdApxPricesm()
begin
  record RentINVc RentINr;
  record INVc INr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RentINr);
  INr.Code = RentINr.InvItem;
  if (ReadFirstMain(INr,1,true)) then begin
    RentINr.ApxBasePrice = INr.UPrice1;
    PutWindowRecord(wn,RentINr);
  end;
  return;
end;

