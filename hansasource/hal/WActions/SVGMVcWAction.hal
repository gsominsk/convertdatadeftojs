remote function Boolean PasteItemInSVGM(var record SVGMVc,Integer);
external procedure GetUserName(string,var string);
remote function Boolean SVGM_PasterSerialNr(var record SVGMVc,Integer);
remote function Boolean PasteSVOIn2SVGM(var record SVGMVc);
remote function Boolean PasteCUInSVGM(var record SVGMVc,var string);

function Boolean SVGMDClassSVONrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record SVGMVc SVGMr;

  if (changed!=0) then begin
    GetWindowRecord(wn,SVGMr);    
    DeselectWindow(wn,false);
    if (PasteSVOIn2SVGM(SVGMr)) then begin
      PutWindowRecord(wn,SVGMr);
    end else begin
      Beep;
    end;
  end;
  SVGMDClassSVONrEFAfter = true;
  return;
end;

function Boolean SVGMDClassCustCodeEFAfter(Integer wn,Integer changed)
BEGIN
  record SVGMVc SVGMr;
  string 255 warning;

  GetWindowRecord(wn,SVGMr);    
  if ((changed!=0) or ((blank(SVGMr.Addr0)) and (nonblank(SVGMr.CustCode)))) then begin
    GetWindowRecord(wn,SVGMr);    
    DeselectWindow(wn,false);
    if (PasteCUInSVGM(SVGMr,warning)) then begin
      PutWindowRecord(wn,SVGMr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  SVGMDClassCustCodeEFAfter = true;
  return;
end;

function Boolean SVGMDClassSerialNrEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  record SVGMVc SVGMr;
  row SVGMVc SVGMrw;
  string 255 warning;

  GetWindowRecord(wn,SVGMr); 
  MatRowGet(SVGMr,rownr,SVGMrw);   
  if ((changed!=0) and (nonblank(SVGMrw.SerialNr))) then begin
    GetWindowRecord(wn,SVGMr); 
    DeselectWindow(wn,false);
    if (SVGM_PasterSerialNr(SVGMr,rownr)) then begin
      PutWindowRecord(wn,SVGMr);
    end else begin
      Beep;
    end;
  end;
  SVGMDClassSerialNrEFAfter = true;
  return;
end;

function Boolean SVGMDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVGMVc SVGMr;
  row SVGMVc SVGMrw;
  string 255 warning;

  GetWindowRecord(wn,SVGMr); 
  DeselectWindow(wn,false);
  MatRowGet(SVGMr,rownr,SVGMrw);   
  if ((changed!=0) or (blank(SVGMrw.Spec) and (nonblank(SVGMrw.ArtCode)))) then begin
    if (PasteItemInSVGM(SVGMr,rownr)) then begin
      PutWindowRecord(wn,SVGMr);
    end else begin
      Beep;
    end;
  end;
  SVGMDClassArtCodeEFAfter = true;
  return;
end;

procedure SVGMchsum(var record SVGMVc SVGMp,Integer rownr)
BEGIN
  row SVGMVc SVGMrw;
  val costin,costout,salein,saleout;
  
  MatRowGet(SVGMp,rownr,SVGMrw);
  costin = SVGMrw.InQuant*SVGMrw.CostPrice;
  costout = SVGMrw.OutQuant*SVGMrw.CostPrice;
  SVGMp.SumCostVal = costin - costout;
  salein = SVGMrw.InQuant*SVGMrw.SalesPrice;
  saleout = SVGMrw.OutQuant*SVGMrw.SalesPrice;
  SVGMp.SumSalesVal = salein - saleout;
  MatRowPut(SVGMp,rownr,SVGMrw);
  RETURN;
END;

function Boolean SVGMDClassInQuantEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVGMVc SVGMr;

  GetWindowRecord(wn,SVGMr); 
  DeselectWindow(wn,false);
  SVGMchsum(SVGMr,rownr);
  PutWindowRecord(wn,SVGMr);
  SVGMDClassInQuantEFAfter = true;
  return;
end;

function Boolean SVGMDClassOutQuantEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVGMVc SVGMr;

  GetWindowRecord(wn,SVGMr); 
  DeselectWindow(wn,false);
  SVGMchsum(SVGMr,rownr);
  PutWindowRecord(wn,SVGMr);
  SVGMDClassOutQuantEFAfter = true;
  return;
end;

function Boolean SVGMDClassCostPriceEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVGMVc SVGMr;

  GetWindowRecord(wn,SVGMr); 
  DeselectWindow(wn,false);
  SVGMchsum(SVGMr,rownr);
  PutWindowRecord(wn,SVGMr);
  SVGMDClassCostPriceEFAfter = true;
  return;
end;

function Boolean SVGMDClassSalesPriceEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVGMVc SVGMr;

  GetWindowRecord(wn,SVGMr); 
  DeselectWindow(wn,false);
  SVGMchsum(SVGMr,rownr);
  PutWindowRecord(wn,SVGMr);
  SVGMDClassSalesPriceEFAfter = true;
  return;
end;

function Boolean SVGMDClassEMCodeEFAfter(Integer wn,Integer changed)
BEGIN
  record SVGMVc SVGMr;
  string 255 tstr;

  GetWindowRecord(wn,SVGMr); 
  DeselectWindow(wn,false);
  if ((changed!=0) or ((blank(SVGMr.EMName)) and (nonblank(SVGMr.EMCode)))) then begin      
    GetUserName(SVGMr.EMCode,tstr);
    SVGMr.EMName = tstr;
    PutWindowRecord(wn,SVGMr);
  end;
  SVGMDClassEMCodeEFAfter = true;
  return;
end;

global
function Boolean SVGMDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CustCode": res = SVGMDClassCustCodeEFAfter(wn,changed);
    case "SVONr": res = SVGMDClassSVONrEFAfter(wn,fn,rownr,changed);
    case "SerialNr": res = SVGMDClassSerialNrEFAfter(wn,rownr,changed);

    case "EMCode": res = SVGMDClassEMCodeEFAfter(wn,changed);
    case "ArtCode": res = SVGMDClassArtCodeEFAfter(wn,rownr,changed);
    case "InQuant": res = SVGMDClassInQuantEFAfter(wn,rownr,changed);
    case "OutQuant": res = SVGMDClassOutQuantEFAfter(wn,rownr,changed);
    case "CostPrice": res = SVGMDClassCostPriceEFAfter(wn,rownr,changed);
    case "SalesPrice": res = SVGMDClassSalesPriceEFAfter(wn,rownr,changed);
  end;
  SVGMDClassAfterEditField = res;
  RETURN;
END;

global
procedure OpenSVOFromSVGMDsm()
BEGIN
  record SVGMVc SVGMr;
  record SVOVc SVOr;
  Integer wn,wn2;

  wn = CurWindow;
  GetWindowRecord(wn,SVGMr);
  SVOr.SerNr = SVGMr.SVONr;
  if (ReadFirstMain(SVOr,1,true)) then begin
    wn2 = OpenWindow("SVODClass",1,0,"","",SVOr);
  end;
  RETURN;
END;

global
function Boolean SVGMDClassUpdateTest(Integer wn)
BEGIN
  record SVGMVc SVGMr;
  Boolean res;
  
  res = true;
  if (WindowState(wn)!=1) then begin//insert
    if (SVGMr.OKFlag!=0) then begin res = false; end;
  end;
  SVGMDClassUpdateTest = res;
  RETURN;
END;
