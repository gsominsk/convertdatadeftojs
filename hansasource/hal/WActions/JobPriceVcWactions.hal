external procedure CalcSum(val,val,val,val,var val,Integer);
remote procedure SetPriceCalcStr(row JobPriceVc);

procedure JobPriceRowSumup(var record JobPriceVc JPr,Integer rownr,Integer usediscount)
begin
  row JobPriceVc JPrw;
  val s,p,reb;
  
  MatRowGet(JPr,rownr,JPrw);
  if (JPrw.AgreedPrice!=0) then begin
    p = JPrw.AgreedPrice;
  end else begin
    p = JPrw.Price;
  end;
  if nonblank(JPrw.AgreedRebate) then begin
    reb = JPrw.AgreedRebate;
  end else begin
    if nonblank(JPrw.vRebate) then begin
      reb = JPrw.vRebate;
    end;
  end;
  CalcSum(JPrw.Qty,p,0,reb,s,usediscount);
  JPrw.Sum = s;
  MatRowPut(JPr,rownr,JPrw);
  return;
end;

global
procedure JobPriceSumup(var record JobPriceVc JPr)
begin
  record JobVc Jobr;
  Integer rwcnt,i;
  record GeneralOptionBlock GenOptRec;
  
  BlockLoad(GenOptRec);
  rwcnt = MatRowCnt(JPr);
  for (i=0;i<rwcnt;i=i+1) begin
    JobPriceRowSumup(JPr,i,GenOptRec.UseDiscount);
  end;
  return;
end;

procedure JobPriceUpdateLine(Integer wn,Integer rownr,Integer changed)
begin
  record JobPriceVc JPr;
  row JobPriceVc JPrw;
  record GeneralOptionBlock GenOptRec;

  if (changed!=0) then begin
    if (rownr>=0) then begin
      BlockLoad(GenOptRec);
      GetWindowRecord(wn,JPr);      
      JobPriceRowSumup(JPr,rownr,GenOptRec.UseDiscount);
      MatRowGet(JPr,rownr,JPrw);
      SetPriceCalcStr(JPrw);
      MatRowPut(JPr,rownr,JPrw);
      PutWindowRecord(wn,JPr);
    end;
  end;
  return;
end;

global
function Boolean JobPriceDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  res = true;
  switch (fieldname) begin
    case "AgreedPrice":
      if (UserCanAction("ChangePrices",true)==false) then begin
        res = false;
      end;
    case "vRebate":
      if (UserCanAction("ChangePrices",true)==false) then begin
        res = false;
      end;
  end;  
  JobPriceDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean JobPriceDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
  end;
  JobPriceUpdateLine(wn,rownr,changed);
  JobPriceDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean JobPriceDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record JobVc Jobr;
  record ResAvVc ResAvr;
  record JobPriceVc JPr;
  
  res = true;
  GetWindowRecord(wn,JPr);
  if (JPr.RecType==0) then begin
    Jobr.SerNr = JPr.SerNr;
    if (IsRecordLocked(Jobr)) then begin
      res = false;
    end;
  end else begin
    ResAvr.SerNr = JPr.SerNr;
    if (IsRecordLocked(ResAvr)) then begin
      res = false;
    end;
  end;
  JobPriceDClassUpdateTest = res;
  RETURN;
END;

global 
function Boolean JobPriceDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;

  res = false;
  JobPriceDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean JobPriceDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  Boolean res;

  res = false;
  JobPriceDClassDeleteRowTest = res;
  return;
end;

