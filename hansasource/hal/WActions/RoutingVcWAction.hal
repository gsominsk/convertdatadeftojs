remote procedure RoutingSumup(var record RoutingVc);

function Boolean RoutingDClassStdOperationEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record StdOperationVc StdOperationr;
  record RoutingVc Routingr;
  row RoutingVc Routingrw;
  Boolean res;

  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,Routingr);
    MatRowGet(Routingr,rownr,Routingrw);
    StdOperationr.Code = Routingrw.StdOperation;
    if (ReadFirstMain(StdOperationr,1,true)) then begin
      Routingrw.Comment = StdOperationr.Comment;
      Routingrw.SetupTime = StdOperationr.SetupTime;
      Routingrw.QueueTime = StdOperationr.QueueTime;
      Routingrw.MoveTime = StdOperationr.MoveTime;
      Routingrw.RunTime = StdOperationr.RunTime;
      MatRowPut(Routingr,rownr,Routingrw);
    end;
    RoutingSumup(Routingr);
    PutWindowRecord(wn,Routingr);
  end;
  RoutingDClassStdOperationEFAfter = res;
  RETURN;
END;

global
function Boolean RoutingDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "StdOperation": res = RoutingDClassStdOperationEFAfter(wn,rownr,changed);
  end;
  RoutingDClassAfterEditField = res;
  RETURN;
END;

