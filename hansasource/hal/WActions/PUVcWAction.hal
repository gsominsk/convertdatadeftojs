remote procedure PUDClassOnOpenWindowRemote(var record PUVc,var Integer);
remote function Integer PUApprovalStatus(record PUVc,var record AcceptanceRulesVc);
remote function Integer PUTestApprovalStatus(record PUVc);
remote function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
remote function Integer PUVc_PasteQuant(var record PUVc,Integer);
remote function string 255 ReturnItemCodeFromBarCode(string);
remote procedure PUVc_PasteTaxTemplateCode(var record PUVc,Integer,var Boolean);
remote procedure PUVc_PasteCostPrice(var record PUVc,Integer);
remote procedure PUVc_PasteTransDate(var record PUVc,var Boolean,var Boolean,var Boolean);
remote function Integer PUVc_PasteSerialNr(record PUVc,Integer);
remote procedure PUVc_PasteStockType(var record PUVc,Integer);
remote procedure PUVc_PasteVEQuant(var record PuVc,Integer);
remote function Boolean PUCheckifOverstrikeAllowed(record PUVc,Integer);
remote procedure PUVc_PasteLocation(var record PUVc,Integer);
external function Boolean TestForMATVARINS(Integer);
external function Boolean PUDClassToPosCodeEFAfter(Integer,Integer,Boolean);
external function Boolean PUDClassPosCodeEFAfter(Integer,Integer,Boolean);
remote function Integer PUVc_PasteOrdRow(var record PUVc,Integer,Integer,Boolean);
remote function Integer PUVc_PastePONr(var record PUVc,Integer);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
remote function Boolean PUVc_PasteVECode(var record PUVc);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
remote procedure PUVc_InclVATButtonAction(var record PUVc);
external function Boolean PUDClassArtCodeEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassQuantEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassSumEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassUPriceEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassShipCostEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassCost1EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassCost2EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassCost3EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassCost4EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassCost5EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassRowCost1EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassRowCost2EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassRowCost3EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassRowCost4EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassRowCost5EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassExtraEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassCustomsCostEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PUDClassVATCodeEFAfter(Integer,Integer,Integer,Integer);
remote procedure PUSumUp(var record PUVc);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
remote procedure PUSetShipCost(var record PUVc,Integer);
remote procedure PURecalcCost(var record PUVc);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure CalculatePURowSum(val,val,string,var val,val,
                                     val,val,val,val,val,
                                     string,var val,Boolean,string,
                                     val,val,val,val,val);
external function Integer GetUnitAllowDim(string);
remote function Boolean PUDchrsum(record PUVc,Integer);
remote procedure PUVc_PasteTREO(var record PUVc,Integer);
remote function Boolean PUVc_PasteVEItemCode(var record PUVc,Integer,var string,var string);

forward function Boolean PUDClassSwitchRow(Integer,Integer);

function val UnitCalcQty(string Unittext,val UnitXval,val UnitYval,val UnitZval,val defqty)
BEGIN
  Integer dims;
  val res;

  res = 1.00000;
  dims = GetUnitAllowDim(Unittext); 
  switch (dims) begin
    case 1:
      if (UnitXval!=0) then begin
        res = res * UnitXval;  
      end;    
    case 2:
      if (UnitXval!=0) then begin
        res = res * UnitXval;  
      end;
      if (UnitYval!=0) then begin
        res = res * UnitYval;  
      end;
    case 3:        
      if (UnitXval!=0) then begin
        res = res * UnitXval;  
      end;    
      if (UnitYval!=0) then begin
        res = res * UnitYval;  
      end;    
      if (UnitZval!=0) then begin
        res = res * UnitZval;  
      end;
    otherwise
      res = defqty;    
  end;
  UnitCalcQty = res;
  RETURN;
END;

function val SerialNrOnNotOKDelivery(string artcode,string serialnr,string location)
begin
  val res;
  record SHVc SHr;
  row SHVc SHrw;
  Integer i,rwcnt;
  Boolean found,testf;
  
  found = true;
  SHr.OKFlag = 0;
  while (LoopKey("OKFlag",SHr,1,found)) begin
    if (SHr.OKFlag!=0) then begin found = false; end;
    if (found) then begin
      rwcnt = MatRowCnt(SHr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(SHr,i,SHrw);
        testf = true;
        if (SHrw.ArtCode!=artcode) then begin testf = false; end;
        if (nonblank(serialnr)) then begin
          if (SHrw.SerialNr!=serialnr) then begin testf = false; end;
        end;
        if (nonblank(location)) then begin
          if (nonblank(SHrw.Location)) then begin
            if (SHrw.Location!=location) then begin testf = false; end;
          end else begin
            if (SHr.Location!=location) then begin testf = false; end;
          end;
        end;
        if (testf) then begin
          res = res + SHrw.Ship;
        end;        
      end;
    end;
  end;
  SerialNrOnNotOKDelivery = res;
  return;
end;

global
function val FindSerialNrQty2(string artcode,string serialnr,string location,Boolean mainstockf)
BEGIN
  record SerBalVc SBr;
  record MainStockBlock MSb;
  string 20 llocation;
  val res;
  Boolean found;
  Integer segs;

  llocation = location;
  BlockLoad(MSb);
  if (mainstockf) or (nonblank(llocation)) then begin
    if (blank(llocation)) then begin
      llocation = MSb.MainStock;
    end;
    SBr.Item = artcode;
    SBr.Location = llocation;
    if (nonblank(serialnr)) then begin
      SBr.Serial = serialnr;
      if (ReadFirstMain(SBr,3,true)) then begin
        res = SBr.Quant;
      end;    
    end else begin
      found = true;
      SBr.Item = artcode;
      SBr.Location = llocation;
      while (LoopKey("MainKey",SBr,2,found)) begin
        if (SBr.Item!=artcode) then begin found = false; end;
        if (SBr.Location!=llocation) then begin found = false; end;
        if (found) then begin
          res = res + SBr.Quant;
        end;
      end;
    end;
  end else begin
    found = true;
    SBr.Item = artcode;
    if (nonblank(serialnr)) then begin
      SBr.Serial = serialnr;
    end;
    while (LoopKey("ItemSerial",SBr,2,found)) begin
      if (SBr.Item!=artcode) then begin found = false; end;
      if (nonblank(serialnr)) then begin
        if (SBr.Serial!=serialnr) then begin found = false; end;
      end;
      if (found) then begin
        res = res + SBr.Quant;
      end;
    end;
  end;
  switch (MSb.UpdateAvailable) begin
    case 0:
    case 1:
      res = res - SerialNrOnNotOKDelivery(artcode,serialnr,llocation);
  end;
  FindSerialNrQty2 = res;
  RETURN;
END;

global
function val FindSerialNrQty(string artcode,string serialnr,string location)
begin
  FindSerialNrQty = FindSerialNrQty2(artcode,serialnr,location,true);
  return;
end;

global
function val CalculateSerialNrQuantity(string artcode,string serialnr,string location,Boolean findqf,val UnitXval,val UnitYval,val UnitZval,val defqty)
BEGIN
  record INVc INr;
  record ItemSettingBlock ItemSettingRec;
  val res,t;

  res = defqty;
  BlockLoad(ItemSettingRec);
  if (ItemSettingRec.EnCalcDimQty!=0) then begin  
    if (ReadFirstItem(artcode,INr,true,true)) then begin 
      res = UnitCalcQty(INr.Unittext,UnitXval,UnitYval,UnitZval,defqty);
//Jon willimas reported as bug, if one has diffrent qty on order then this one overwrites it, which is very wrong I think
    end;
  end else begin
    if ((findqf) and (nonblank(serialnr))) then begin
      if (ReadFirstItem(artcode,INr,true,true)) then begin 
        if (INr.SerNrf==2) then begin
          t = FindSerialNrQty(artcode,serialnr,location);
          if (t<defqty) then begin res = t; end;
        end;
      end; 
    end;
  end;
  if (res!=defqty) then begin
    MessageBox(2290,"");
  end;
  CalculateSerialNrQuantity = res;
  RETURN;
END;

global
function Boolean PUDClassUnitXvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row PUVc PUrw;
  record PUVc PUr;
  Boolean res;
  val pv;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);
    PUrw.Quant = CalculateSerialNrQuantity(PUrw.ArtCode,"","",false,PUrw.UnitXval,PUrw.UnitYval,PUrw.UnitZval,PUrw.Quant);
    pv = blankval;
    CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,
                      PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,pv,false,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
    PUrw.Sum = pv;
    MatRowPut(PUr,rownr,PUrw);
    PUSumUp(PUr);    
    PutWindowRecord(wn,PUr);    
  end;
  PUDClassUnitXvalEFAfter = res;
  RETURN;
END;

global
function Boolean PUDClassUnitYvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row PUVc PUrw;
  record PUVc PUr;
  Boolean res;
  val pv;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);
    PUrw.Quant = CalculateSerialNrQuantity(PUrw.ArtCode,"","",false,PUrw.UnitXval,PUrw.UnitYval,PUrw.UnitZval,PUrw.Quant);
    pv = blankval;
    CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,
                      PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,pv,false,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
    PUrw.Sum = pv;
    MatRowPut(PUr,rownr,PUrw);
    PUSumUp(PUr);    
    PutWindowRecord(wn,PUr);    
  end;
  PUDClassUnitYvalEFAfter = res;
  RETURN;
END;

global
function Boolean PUDClassUnitZvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row PUVc PUrw;
  record PUVc PUr;
  Boolean res;
  val pv;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);
    PUrw.Quant = CalculateSerialNrQuantity(PUrw.ArtCode,"","",false,PUrw.UnitXval,PUrw.UnitYval,PUrw.UnitZval,PUrw.Quant);    
    pv = blankval;
    CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,
                      PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,pv,false,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
    PUrw.Sum = pv;
    MatRowPut(PUr,rownr,PUrw);
    PUSumUp(PUr);    
    PutWindowRecord(wn,PUr);    
  end;
  PUDClassUnitZvalEFAfter = res;
  RETURN;
END;

//spec menus
global
procedure OpenBatchPUDsm()
BEGIN
  row PUVc PUrw;
  record PUVc PUr;
  record BatchTextVc BatchTextr;
  Integer wn,nwn,rownr;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(PUr,rownr,PUrw);
    BatchTextr.ArtCode = PUrw.ArtCode;
    BatchTextr.SerialNr = PUrw.SerialNr;
    if (ReadFirstMain(BatchTextr,2,true)) then begin
      nwn = OpenWindow("BatchTextDClass",1,0,"","",BatchTextr);
    end;
  end;
  RETURN;
END;

global
procedure UpdateMarkPUDsm()
BEGIN
  Integer wn;
  Integer insertmode,updatemode;
  record PUVc PUr;
  row PUVc PUrw;
  Integer rwcnt;

  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  if (WindowState(wn)==insertmode) then begin
    goto LUpdateMarkPUDsm;
  end;
  rwcnt = MatRowCnt(PUr);
  ClearRow(PUr,PUrw,3);
  PUrw.Sign = CurrentUser;
  PUrw.UpdDate = CurrentDate;
  MatRowPut(PUr,rwcnt,PUrw);
  PutWindowRecord(wn,PUr);
LUpdateMarkPUDsm: ;
  RETURN;
END;

global 
function Boolean PUDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  Integer wnst;

  wnst = WindowState(wn);
  if (wnst==1) then begin//Rs_insert
    res = true;
  end;
  if (wnst==0) or (wnst==2) then begin
    GetWindowRecord(wn,PUr);
    if (PUr.OKFlag==0) then begin
      if (rownr<MatRowCnt(PUr)) then begin
        MatRowGet(PUr,rownr,PUrw);
        if (PUrw.OrdRow<0) then begin
          res = true;
        end;
      end;
    end;
  end;
  PUDClassInsertRowTest = res;
  RETURN;
END;

function Boolean PUApprovalStarted(record PUVc PUr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (PUApprovalStatus(PUr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  PUApprovalStarted = res;
  return;
end;

global 
function Boolean PUDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record PUVc PUr;

  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,PUr);
    if (PUr.OKFlag!=0) then begin res = false; end;
    if (PUApprovalStarted(PUr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
      res = false;
      goto LPUDClassDeleteRowTest;
    end;
  end;
LPUDClassDeleteRowTest:;  
  PUDClassDeleteRowTest = res;
  RETURN;
END;

global 
function Boolean PUDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record PUVc PUr;
  record PUVc PU2r;
  row PUVc PUrw;
  Integer rwcnt,rwcnt2;
  Integer updatemode;
    
  updatemode = 2;//Rs_update
  res = true;
  if (WindowState(wn)==updatemode) then begin
    GetWindowRecord(wn,PUr);
    GetPrevWindowRecord(wn,PU2r);
    MatRowGet(PUr,rownr,PUrw);
    if (PUrw.stp!=1) then begin
      MessageBox(1051,"");
      res = false;
      goto LPUDClassOverStrikeTest;
    end;
  end;
  if (UserCanAction("PUInvalid",true)==false) then begin
    MessageBox(1051,"");
    res = false;
    goto LPUDClassOverStrikeTest;
  end;
  if (PUCheckifOverstrikeAllowed(PUr,rownr)==false) then begin
    MessageBox(1051,"");
    res = false;
    goto LPUDClassOverStrikeTest;
  end;
LPUDClassOverStrikeTest:;  
  PUDClassOverStrikeTest = res;
  return;
end;

global
function Boolean PUDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record PUVc PUr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,PUr);    
    PUSetShipCost(PUr,2);
    PURecalcCost(PUr);
    PUSumUp(PUr);
    PutWindowRecord(wn,PUr);    
  end;
  PUDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean PUDClassVECodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    if (PUVc_PasteVECode(PUr)) then begin
      PutWindowRecord(wn,PUr);
    end else begin
      Beep;
    end;
  end;
  PUDClassVECodeEFAfter = true;
  return;
end;
 
function Boolean PUDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  record PUVc PUr;
  Boolean datewarnf,warnoldrecordsf,warnfutdatef;

  if (changedf) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PUVc_PasteTransDate(PUr,datewarnf,warnoldrecordsf,warnfutdatef);
    if (datewarnf) then begin
      MessageBox(1045,"");
    end;
    if (warnoldrecordsf) then begin
      MessageBox(2020,"");
    end;
    if (warnfutdatef) then begin
      MessageBox(21999,"");
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassTransDateEFAfter = true;
  return;
end;
 
//JJCS    
function Boolean PUDClassCurncyCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    curcode = PUr.CurncyCode;
    GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
    PUr.CurncyCode = curcode;
    PUr.FrRate = fr;
    PUr.ToRateB1 = to1; 
    PUr.ToRateB2 = to2;
    PUr.BaseRate1 = br1;
    PUr.BaseRate2 = br2;    
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCurncyCodeEFAfter = true;
  return;
end;

global 
function Boolean PUDClassFrRateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassFrRateEFAfter = true;
  return;
end;

global 
function Boolean PUDClassToRateB1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassToRateB1EFAfter = true;
  return;
end;

global 
function Boolean PUDClassToRateB2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassToRateB2EFAfter = true;
  return;
end;

global 
function Boolean PUDClassBaseRate1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassBaseRate1EFAfter = true;
  return;
end;

global 
function Boolean PUDClassBaseRate2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassBaseRate2EFAfter = true;
  return;
end;

global 
function Boolean PUDClassLocationEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  
  if (changedf) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PUVc_PasteLocation(PUr,rownr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassLocationEFAfter = true;
  return;
end;


global 
function Boolean PUDClassCostPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
//    DeselectWindow(wn,false);
    PUVc_PasteCostPrice(PUr,rownr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCostPriceEFAfter = true;
  return;
end;

function Boolean PUDClassPONrEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  Integer retval;

  if (changedf) then begin  
    if (rownr>=0) then begin
      GetWindowRecord(wn,PUr);
      retval = PUVc_PastePONr(PUr,rownr);
      switch (retval) begin
        case 1: MessageBox(1281,""); 
        case 2: MessageBox(1215,""); 
        case 3: MessageBox(1138,""); 
        case 4: MessageBox(1026,""); 
        case 5: MessageBox(1459,""); 
        case 6: MessageBox(22062,""); 
        otherwise PutWindowRecord(wn,PUr);
      end;
    end;
  end; 
  PUDClassPONrEFAfter = true;
  return;
end;

function Boolean PUDClassOrdRowEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  Integer retval;
  
  GetWindowRecord(wn,PUr);
  retval = PUVc_PasteOrdRow(PUr,rownr,WindowState(wn),changedf);
  switch (retval) begin
    case 1: MessageBox(20407,""); 
    case 2: MessageBox(1215,""); 
    case 3: MessageBox(1138,""); 
    case 4: MessageBox(1026,""); 
    case 5: MessageBox(1459,""); 
    otherwise PutWindowRecord(wn,PUr);
  end;
  PUDClassOrdRowEFAfter = true;
  return;
end;

procedure FillFreightInfo(record PUVc PUr)
begin
  record FreightCompanyVc FCr;
  
  FCr.Code = PUr.FreightCode;
  if (ReadFirstMain(FCr,1,true)) then begin
    PUr.FreightCompany = FCr.Company;
    PUr.FreightCompanyRegNr = FCr.CompanyRegNr;
    PUr.TruckInfo = FCr.TruckInfo;
    PUr.Driver = FCr.Driver;
    PUr.CMRText = FCr.CMRText;
  end else begin
    Beep;
  end;
  return;
end;

function Boolean PUDClassFreightCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record PUVc PUr;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,PUr);
    if (nonblank(PUr.FreightCode)) then begin
      FillFreightInfo(PUr);
      PutWindowRecord(wn,PUr);
    end;
  end;
  PUDClassFreightCodeEFAfter = res;
  RETURN;
END;

function Boolean PUDClassVEQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  Boolean res;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PUr);
    PUVc_PasteVEQuant(PUr,rownr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassVEQuantEFAfter = res;
  return;
end;

function Boolean PUDClassStockTypeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;

  if (changedf) then begin
    GetWindowRecord(wn,PUr);    
    PUVc_PasteStockType(PUr,rownr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassStockTypeEFAfter = true;
  return;
end;

function Boolean PUDClassSerialNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  Integer err;
  
  if (changedf) then begin
    GetWindowRecord(wn,PUr);    
    err = PUVc_PasteSerialNr(PUr,rownr);
    if (err!=0) then begin
      MessageBox(1243,"");
    end else begin
      PutWindowRecord(wn,PUr);
    end;
  end;
  PUDClassSerialNrEFAfter = true;
  return;
end;

function Boolean PUDClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record PUVc PUr;
  Boolean chsum;

  if (changedf) then begin
    GetWindowRecord(wn,PUr);    
    PUVc_PasteTaxTemplateCode(PUr,rownr,chsum);
    if (chsum) then begin
      PUDchrsum(PUr,rownr);
    end;
    PUSumup(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassTaxTemplateCodeEFAfter = true;
  return;
end;

function Boolean PUDClassScanBarcodeEFAfter(Integer wn,Integer fn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr,PU2r;
    
  if (changedf) then begin 
    GetWindowRecord(wn,PU2r);
    WindowFieldGoto(wn,PU2r,-1,"scanbarcode",true);
  end;
  PUDClassScanBarCodeEFAfter = true;
  return;
end;

function Boolean PUDClassTREOEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;

  if (changedf) then begin
    GetWindowRecord(wn,PUr);    
    PUVc_PasteTREO(PUr,rownr);
    PUSumUp(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassTREOEFAfter = true;
  return;
end;

function Boolean PUDClassVEItemCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record PUVc PUr;
  string 255 warning,inwarn;

  if (changedf) then begin
    GetWindowRecord(wn,PUr);    
    if (PUVc_PasteVEItemCode(PUr,rownr,warning,inwarn)) then begin
      PutWindowRecord(wn,PUr);
    end;
    if (nonblank(inwarn)) then begin
      MessageBox(0,inwarn);
    end;
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    PUDClassSwitchRow(wn,rownr);
  end;
  PUDClassVEItemCodeEFAfter = true;
end;

global
updating function Boolean PUDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Location": res = PUDClassLocationEFAfter(wn,rownr,changed!=0);
    case "CostPrice": res = PUDClassCostPriceEFAfter(wn,fn,rownr,changed);
    case "BaseRate2": res = PUDClassBaseRate2EFAfter(wn,fn,rownr,changed);
    case "BaseRate1": res = PUDClassBaseRate1EFAfter(wn,fn,rownr,changed);
    case "ToRateB2": res = PUDClassToRateB2EFAfter(wn,fn,rownr,changed);
    case "ToRateB1": res = PUDClassToRateB1EFAfter(wn,fn,rownr,changed);
    case "FrRate": res = PUDClassFrRateEFAfter(wn,fn,rownr,changed);
    case "CurncyCode": res = PUDClassCurncyCodeEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = PUDClassTransDateEFAfter(wn,changed!=0);
    case "VECode": res = PUDClassVECodeEFAfter(wn,fn,rownr,changed);
    case "UnitZval": res = PUDClassUnitZvalEFAfter(wn,fn,rownr,changed);
    case "UnitYval": res = PUDClassUnitYvalEFAfter(wn,fn,rownr,changed);
    case "UnitXval": res = PUDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = PUDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "Quant": res = PUDClassQuantEFAfter(wn,fn,rownr,changed);
    case "Sum": res = PUDClassSumEFAfter(wn,fn,rownr,changed);
    case "UPrice": res = PUDClassUPriceEFAfter(wn,fn,rownr,changed);
    case "ShipCost": res = PUDClassShipCostEFAfter(wn,fn,rownr,changed);
    case "Cost1": res = PUDClassCost1EFAfter(wn,fn,rownr,changed);
    case "Cost2": res = PUDClassCost2EFAfter(wn,fn,rownr,changed);
    case "Cost3": res = PUDClassCost3EFAfter(wn,fn,rownr,changed);
    case "Cost4": res = PUDClassCost4EFAfter(wn,fn,rownr,changed);
    case "Cost5": res = PUDClassCost5EFAfter(wn,fn,rownr,changed);
    case "RowCost1": res = PUDClassRowCost1EFAfter(wn,fn,rownr,changed);
    case "RowCost2": res = PUDClassRowCost2EFAfter(wn,fn,rownr,changed);
    case "RowCost3": res = PUDClassRowCost3EFAfter(wn,fn,rownr,changed);
    case "RowCost4": res = PUDClassRowCost4EFAfter(wn,fn,rownr,changed);
    case "RowCost5": res = PUDClassRowCost5EFAfter(wn,fn,rownr,changed);
    case "Extra": res = PUDClassExtraEFAfter(wn,fn,rownr,changed);
    case "CustomsCost": res = PUDClassCustomsCostEFAfter(wn,fn,rownr,changed);
    case "VATCode": res = PUDClassVATCodeEFAfter(wn,fn,rownr,changed);
    case "PONr": res = PUDClassPONrEFAfter(wn,rownr,changed!=0);
    case "OrdRow": res = PUDClassOrdRowEFAfter(wn,rownr,changed!=0);
    case "PosCode": res = PUDClassPosCodeEFAfter(wn,rownr,changed!=0);
    case "ToPosCode": res = PUDClassToPosCodeEFAfter(wn,rownr,changed!=0);
    case "FreightCode": res = PUDClassFreightCodeEFAfter(wn,fn,rownr,changed);
    case "VEQuant": res = PUDClassVEQuantEFAfter(wn,rownr,changed!=0);
    case "StockType": res = PUDClassStockTypeEFAfter(wn,rownr,changed!=0);
    case "SerialNr": res = PUDClassSerialNrEFAfter(wn,rownr,changed!=0);
    case "TaxTemplateCode": res = PUDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    case "scanbarcode": res = PUDClassScanBarcodeEFAfter(wn,fn,rownr,changed!=0);
    case "TREO": res = PUDClassTREOEFAfter(wn,rownr,changed!=0);
    case "VEItemCode": res = PUDClassVEItemCodeEFAfter(wn,rownr,changed!=0);
  end;
  PUDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean PUDClassInclVATButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record PUVc PUr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,PUr);
    if (PUr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,PUr);
    if (PUr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  PUDClassInclVATButtonAction = res;
  RETURN;
END;

global
function Boolean  PUDClassInclVATButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record PUVc PUr;
 
  res = true; 
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,PUr); 
    if (PUr.OKFlag==0) then begin
      PUVc_InclVATButtonAction(PUr);
      PutWindowRecord(wn,PUr);
    end;
  end;
  PUDClassInclVATButtonAfter = res;
  return;
end;

global
function Boolean PUDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record PUVc PUr;
  Integer err;
 
  res = true;  
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,PUr);
      if (PUr.OKFlag!=0) then begin res = false; end;
      if (res) then begin
        err = PUTestApprovalStatus(PUr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LPUDClassOKFlagButtonAction;
        end;
      end;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,PUr);
      if (PUr.OKFlag!=0) then begin res = false; end;    
      if (res) then begin
        err = PUTestApprovalStatus(PUr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LPUDClassOKFlagButtonAction;
        end;
      end;
  end;  
LPUDClassOKFlagButtonAction:;  
  PUDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean PUDClassExtraCostsCalculationButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record PUVc PUr;
  Integer err;

  res = true;  
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,PUr);
      if (PUr.OKFlag!=0) then begin res = false; end;
      if (PUr.PONr>0) then begin res = false; end;
      if (res) then begin
        err = PUTestApprovalStatus(PUr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LPUDClassExtraCostsCalculationButtonAction;
        end;
      end;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,PUr);
      if (PUr.OKFlag!=0) then begin res = false; end;    
      if (PUr.PONr>0) then begin res = false; end;
      if (res) then begin
        err = PUTestApprovalStatus(PUr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LPUDClassExtraCostsCalculationButtonAction;
        end;
      end;
  end;  
LPUDClassExtraCostsCalculationButtonAction:;  
  PUDClassExtraCostsCalculationButtonAction = res;
  return;
end;

global
function Boolean PUDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record PUVc PUr;  
  row PUVc PUrw; 
  Integer rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum,sum;
  string 255 recepy;
  string 200 thelocation;

  res = true;
  GetWindowRecord(wn,PUr);
  rwcnt = MatRowCnt(PUr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(PUr,rownr,PUrw);
    if (blank(PUrw.Location)) then begin
      thelocation = PUr.Location;
    end else begin
      thelocation = PUrw.Location;
    end;
    SendArtStat(PUrw.ArtCode,thelocation,recepy,t,tproc,unitprdisc,PUr.TransDate,0);
  end;
  SetWindowNameArg(wn,PUrw.ArtCode & ":" & thelocation);
  PUDClassSwitchRow = res;  
  return;
end;

global
function Boolean PUDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;

  switch (fieldname) begin  
    case "Quant":     
      GetWindowRecord(wn,PUr);      
      MatRowGet(PUr,rownr,PUrw);
      if (PUrw.Quant==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
   PUDClassBeforeEditField = res;
  return;
end;

global
function Boolean PUDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  record POVc POr;
  Integer nwn;
  
  switch (fieldname) begin
    case "PONr":
      GetWindowRecord(wn,PUr);  
      if (rownr<0) then begin
        if (PUr.PONr>0) then begin
          POr.SerNr = PUr.PONr;
          if (ReadFirstMain(POr,1,true)) then begin
            nwn = OpenWindow("PODClass",0,0,"","",POr);    
          end;
        end;
      end;
  end;
  PUDClassOpenRecord = res;
  return;
end;

function Boolean PUDClassBarCodeOnEnterKey(Integer wn,Integer rownr)
BEGIN
  boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  integer rwcnt,i,changed,UpdateRowNr,fn;
  string 255 BarCodeStr,ItemCodeStr,warning,inwarn;
  boolean testf;
  
  DeselectWindow(wn,false);
  BarCodeStr = GetWindowString(wn,"scanbarcode");
  PutWindowString(wn,"scanbarcode","");
  if (nonblank(BarCodeStr)) then begin 
    ItemCodeStr = ReturnItemCodeFromBarCode(BarCodeStr);
  end;
  if (nonblank(ItemCodeStr)) then begin
    UpdateRowNr = -1;
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    rwcnt = MatRowCnt(PUr);
    for (i=0; i<rwcnt; i=i+1) begin
      MatRowGet(PUr,i,PUrw);
      if ((PUrw.stp==1) and (PUrw.ovst==0)) then begin
        if (PUrw.ArtCode==ItemCodeStr) then begin
          PUrw.Quant = PUrw.Quant + 1;
          MatRowPut(PUr,i,PUrw);
          changed = 1;
          UpdateRowNr = i;
          i = rwcnt;    
        end;  
      end; 
    end;
    PutWindowRecord(wn,PUr);
    if (UpdateRowNr<0) then begin 
      ClearRow(PUr,PUrw,1);
      PUrw.ArtCode = ItemCodeStr;
      MatRowPut(PUr,rwcnt,PUrw);
      PUVc_PasteArtCode(PUr,rwcnt,warning,inwarn);
      MatRowGet(PUr,rwcnt,PUrw);
      PUrw.Quant = 1.00;
      MatRowPut(PUr,rwcnt,PUrw);
      PUVc_PasteQuant(PUr,rwcnt);
      PutWindowRecord(wn,PUr);
    end else begin  
      PUDClassQuantEFAfter(wn,fn,UpdateRowNr,changed);
    end;
    WindowFieldGoto(wn,PUr,-1,"scanbarcode",false);
  end else begin
    MessageBox(8602,"");
    GetWindowRecord(wn,PUr);
    WindowFieldGoto(wn,PUr,-1,"scanbarcode",false);
  end;
  res = false;
  PUDClassBarCodeOnEnterKey = res;
  return;
end;

global
updating function Boolean PUDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "scanbarcode":
      res = PUDClassBarCodeOnEnterKey(wn,rownr);
  end;
LPUDClassOnEnterKey:;  
  PUDClassOnEnterKey = res;
  return;
end;

global
function Boolean PUDClassOnOpenWindow(Integer wn)
begin
  record PUVc PUr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,PUr);
  PUDClassOnOpenWindowRemote(PUr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  PUDClassOnOpenWindow = false;
  return;
end;

global
procedure PUDClassOnWindowRecordChange(Integer wn)
begin
  record PUVc PUr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,PUr);
  PUDClassOnOpenWindowRemote(PUr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
