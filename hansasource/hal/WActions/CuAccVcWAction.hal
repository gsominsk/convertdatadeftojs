external procedure MainRClassReportDef(var record RcVc);
remote procedure RecordAction_raCalculateInstalments(var record CuAccVc,Boolean);
remote procedure RecordAction_raCalculateDecInstalments(var record CuAccVc,Boolean);

global
procedure StatusCuAccLsm()
BEGIN
  record CuAccVc CuAccr;
  record RcVc RepSpec;
  Integer wn;

//      RLGetSelectionIDs(wn,&ridh);
  wn = CurWindow;
    if (ReadMarkedRecord(wn,CuAccr)) then begin
      ReportDefaults(RepSpec,"MainRClass");
      RepSpec.f4 = CuAccr.MainAcc;
      RepSpec.ObjStr = CuAccr.Objects;
      RepSpec.Media = mtScreen;
      RepSpec.repname = "MainRn";
      RunReport(RepSpec,0);
    end;
  RETURN;
END;

global
procedure StatusCuAccDsm()
BEGIN
  record CuAccVc CuAccr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,CuAccr);
  ReportDefaults(RepSpec,"MainRClass");
  MainRClassReportDef(RepSpec);
  RepSpec.f4 = CuAccr.MainAcc;
  RepSpec.ObjStr = CuAccr.Objects;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "MainRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure CalcInstalCuAccDsm()
BEGIN
  record CuAccVc CuAccr;
  Integer wn;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,CuAccr);
    DeselectWindow(wn,false);
    RecordAction_raCalculateInstalments(CuAccr,true);
    PutWindowRecord(wn,CuAccr);
  end;

  RETURN;
END;

global
procedure CalcDecInstalCuAccDsm()
BEGIN
  record CuAccVc CuAccr;
  Integer wn;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,CuAccr);
    DeselectWindow(wn,false);
    RecordAction_raCalculateDecInstalments(CuAccr,true);
    PutWindowRecord(wn,CuAccr);
  end;

  RETURN;
END;

global
function Boolean CuAccDClassClosedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record CuAccVc CuAccr;
 
  res = true;  
  switch (WindowState(wn)) begin
    case 0:// Rs_normal
      GetWindowRecord(wn,CuAccr);
      if (CuAccr.Closed!=0) then begin res = false; end;
    case 2:// Rs_update
      GetPrevWindowRecord(wn,CuAccr);
      if (CuAccr.Closed!=0) then begin res = false; end;    
  end;  
  CuAccDClassClosedButtonAction = res;
  return;
end;

global
function Boolean CuAccDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CuAccVc CuAccr;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,CuAccr);
    if (CuAccr.Closed!=0) then begin res = false; end;    
  end;
  CuAccDClassActiveEditField = res;
  RETURN;
END;


function Boolean CuAccDClassCUCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record CuAccVc CuAccr;
  record CUVc CUr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,CuAccr);
    CUr.Code = CuAccr.CUCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      CuAccr.CUName = CUr.Name;
      PutWindowRecord(wn,CuAccr);
    end;
  end;
  CuAccDClassCUCodeEFAfter = res;
  RETURN;
END;

global
function Boolean CuAccDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CUCode": res = CuAccDClassCUCodeEFAfter(wn,fn,rownr,changed);
  end;
  CuAccDClassAfterEditField = res;
  RETURN;
END;
