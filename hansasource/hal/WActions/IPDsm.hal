remote updating procedure MakeDownPayFromOKedIPD(record IPVc,Integer,array record IVVc,var string);
external procedure ActVcRecordDefClient(var record ActVc);
external function Integer PMCheckType(string,var string,var string);
external procedure DirectDebitEClassReportDefaults(Integer);
external procedure IPSuggestionVClassReportDefaults(Integer);
remote function Boolean FindCheque(string,string,var record CheckVc);
external procedure GetPayType(string,var Integer);
remote updating function Integer CreateMailFromIPD(record IPVc,var record MailVc,var string,string,string);
remote function Integer CreateVATIVFromIP(record IPVc,Integer,var record VATIVVc);
external function Boolean GetPMRow(string,var row PMBlock);
remote updating function Boolean CreateActFromIP(record IPVc,Integer,var record ActVc);
remote procedure DoDistributeChequesIP(var record IPVc,Integer,var string,var Integer);
remote updating function LongInt RecordAction_raPasteIPInFEIV(var record FEIVVc,LongInt,Integer);
remote function Integer DoCLInFromIPD(var record IPVc,var record CLInVc,Boolean);
remote function Integer WriteOffPrePayment(Integer,var record IPVc);
remote procedure IPDDefault(Integer,string,var record IPVc);
remote function Boolean PasteInvInIPr(var record IPVc,row IPVc,Integer,Integer);
external procedure RecActionIP_rlCashInOutDPrint(var record IPVc,Boolean);
remote updating function LongInt RecordAction_raPastePrepIPInInv(record IPVc,var record IVVc);
remote procedure RecordAction_raExpandPay(var record IPVc,Integer);
remote updating function Integer RecordAction_raOrdDownPay(LongInt,val,val,var record IVVc,var string,integer);
remote updating function Boolean RecordAction_rlIPLOK(var record IPVc);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean GetPM(string,var string,var string);

global
procedure CLInFromIPDsm()
BEGIN
  Integer wn,nwn;
  Integer normalstate;
  record IPVc IPr;
  record CLInVc CLInr;

  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,IPr);
    if (DoCLInFromIPD(IPr,CLInr,true)==0) then begin
      nwn = OpenWindow("CLInDClass",1,0,"","",CLInr);
    end else begin
      Beep;
    end;
  end;
  RETURN;
END;


global
updating procedure OKIPLsm()
BEGIN
  record IPVc IPr;
  Integer i,wn;
  
  if (UserCanAction("IPOK",true)) then begin
    i = 1;
    wn = CurWindow;
    while (GetRecordFromBrowse(IPr,wn,i)) begin
      if (RecordAction_rlIPLOK(IPr)) then begin
      end;
      i = i + 1;
    end;
    UpdateBrowses("IPVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"IPOK"));
  end;
  
  RETURN;
END;

global
procedure IPInfoIPDsm()
BEGIN
  record IPVc IPr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,IPr);
  RepSpec.repname = "IPInfoRn";
  RepSpec.long1 = IPr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

updating function LongInt MakeDownPayFromIPD(LongInt sernr,val sum,string invcurncy)
BEGIN
  record IVVc IVr;
  Integer nwn;
  Integer r;
  LongInt invnr;
  string 255 errstr;

  RecordNew(IVr);
//  IVr.FrPrice = sum;//sick
  IVr.CurncyCode = invcurncy;
  r = RecordAction_raOrdDownPay(sernr,blankval,sum,IVr,errstr,0);//RecAction(raOrdDownPay,IVVc,&IVr,&r);
  if (r!=-1) then begin
    nwn = OpenWindow("IVDClass",1,0,"","",IVr);
    invnr = IVr.SerNr;
  end else begin
    if (nonblank(errstr)) then begin
      MessageBox(0,errstr);
    end else begin
      Beep;
    end;
  end;
  MakeDownPayFromIPD = invnr;
  RETURN;
END;

global
updating procedure DownPayFromIPDsm()
begin
  Integer wn,nwn;
  Integer normalmode,rownr;
  record ORVc ORr;
  record IPVc IPr;
  row IPVc IPrw;
  LongInt ivnr;
  array record IVVc aIVr;
  string 255 errstr;

  normalmode = 0;
  wn = CurWindow;
/*  
  rownr = WindowActiveRow(wn);
  if (rownr<0) then begin rownr = 0; end;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IPr);
  if (IPr.OKFlag==0) then begin

very sick code in my opinion 
1. u must select row
2. receipt must be in not normal state
3. we paste NOT oked invoice nr ro receipt
4. we remove prepayment number from receipt row 
    if (IPr.ReceivedFlag==0) then begin
      MatRowGet(IPr,rownr,IPrw);
      if ((nonblank(IPrw.CustCode)) and
         (IPrw.InvVal!=0) and
         (IPrw.CUPNr!=-1) and
         (IPrw.InvoiceNr==-1)) then begin
        ORr.SerNr = IPrw.CUPNr;
        if (ReadFirstMain(ORr,1,true)) then begin
          if (ORr.CustCode==IPrw.CustCode) then begin
            if (WindowState(wn)!=normalmode) then begin
              ivnr = MakeDownPayFromIPD(ORr.SerNr,IPrw.InvVal,IPrw.InvCurncy);
              if (ivnr!=-1) then begin
                IPrw.InvoiceNr = ivnr;
                IPrw.CUPNr = -1;
                MatRowPut(IPr,rownr,IPrw);
                PutWindowRecord(wn,IPr);
              end else begin
                Beep;
              end;
            end;
          end;
        end else begin
          Beep;
        end;
      end;
    end else begin
      Beep;
    end;  
*/    
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    DeselectWindow(wn,true);
    GetWindowRecord(wn,IPr);
    if (IPr.OKFlag!=0) then begin
      MakeDownPayFromOKedIPD(IPr,rownr,aIVr,errstr);
      if (aIVr.length==1) then begin
        nwn = OpenWindow("IVDClass",1,0,"","",aIVr[0]);
      end;
      if (aIVr.length>1) then begin
        MessageBox(37500,"");
      end;
      if (aIVr.length==0) then begin
        if (nonblank(errstr)) then begin
          MessageBox(0,errstr);
        end;
      end;
    end;
  end;
  return;
end;

global
updating procedure IPExpandIPDsm()
begin
  Integer wn,insertmode,updatemode,rownr;
  record IPVc IPr;
  
  wn = CurWindow;
  insertmode = 1;
  updatemode = 2;
  if ((WindowState(wn)==updatemode) or (WindowState(wn)==insertmode)) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,true);
    GetWindowRecord(wn,IPr);
    if (rownr<0) then begin
      rownr = MatRowCnt(IPr)-1;
    end;
    RecordAction_raExpandPay(IPr,rownr);
    PutWindowRecord(wn,IPr);
  end;  
  return;
end;

global
updating procedure IVFromPrepIPDsm()
BEGIN
  record IPVc IPr;
  record IVVc IVr;
  LongInt r;
  Integer wn,nwn,rwcnt;
  
  wn = CurWindow;
//  if (WindowState(wn)!=0) then begin//Rs_normal
    DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IPr);
    rwcnt = MatRowCnt(IPr);
    if (rwcnt==1) then begin
      if (UserCanAction("IPToPrepIV",true)) then begin
        r = RecordAction_raPastePrepIPInInv(IPr,IVr);
        switch (r) begin
          case -1: Beep;
          case -2: MessageBox(1281,"");
          otherwise
           nwn = OpenWindow("IVDClass",1,0,"","",IVr);
        end;
        UpdateBrowses("IPVc");
      end else begin
        MessageBox(1274,StringFromStringSet(3,"IPToPrepIV"));
      end;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure PrintCashInOutIPDsm()
BEGIN
  record IPVc IPr;
  Integer wn,nwn;
  Integer normalstate;

  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,IPr);
    RecActionIP_rlCashInOutDPrint(IPr,true);
  end;
  RETURN;
END;

global
procedure CashDiscountIPDsm()
BEGIN
  Integer wn,rownr;
  record IPVc IPr;
  row IPVc IPrw;  
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0 and UserCanAction("AllowCashDiscountIP",true)) then begin
    if (WindowState(wn)==0) then begin//Rs_normal
      DeselectWindow(wn,false);
      GetWindowRecord(wn,IPr);  
      PutWindowRecord(wn,IPr);
    end;
    if (WindowState(wn)!=0) then begin//Rs_normal
      GetWindowRecord(wn,IPr);  
      DeselectWindow(wn,false);
      MatRowGet(IPr,rownr,IPrw);
      if (PasteInvInIPr(IPr,IPrw,rownr+1,kReceiptRowTypeSettlementDiscount)) then begin
        PutWindowRecord(wn,IPr);
      end else begin
        Beep;
      end;
    end;
  end;
  RETURN;
END;

global
procedure NewWriteoffIPDsm()
BEGIN
  Integer wn,rownr;
  record IPVc IPr;
  row IPVc IPrw;  
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0 and UserCanAction("AllowWriteoffIP",true)) then begin
    if (WindowState(wn)==0) then begin//Rs_normal
      DeselectWindow(wn,false);
      GetWindowRecord(wn,IPr);  
      PutWindowRecord(wn,IPr);
    end;
    if (WindowState(wn)!=0) then begin//Rs_normal
      GetWindowRecord(wn,IPr);  
      DeselectWindow(wn,false);
      MatRowGet(IPr,rownr,IPrw);
      if (PasteInvInIPr(IPr,IPrw,rownr+1,kReceiptRowTypeWriteoff)) then begin
        PutWindowRecord(wn,IPr);
      end else begin
        Beep;
      end;
    end;
  end;
  RETURN;
END;

global
procedure NewFeeIPDsm()
BEGIN
  Integer wn,rownr;
  record IPVc IPr;
  row IPVc IPrw;  
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    if (WindowState(wn)==0) then begin//Rs_normal
      DeselectWindow(wn,false);
      GetWindowRecord(wn,IPr);  
      PutWindowRecord(wn,IPr);
    end;
    if (WindowState(wn)!=0) then begin//Rs_normal
      GetWindowRecord(wn,IPr);  
      DeselectWindow(wn,false);
      MatRowGet(IPr,rownr,IPrw);
      if (PasteInvInIPr(IPr,IPrw,rownr+1,7)) then begin
        PutWindowRecord(wn,IPr);
      end else begin
        Beep;
      end;
    end;
  end;
  RETURN;
END;

global 
procedure CalculateFieldIPDsm()
BEGIN
  record IPVc IPr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)!=0) then begin//Rs_normal
    GetWindowRecord(wn,IPr);
    if (IPr.OKFlag==0) then begin
      IPDDefault(WindowActiveRow(wn),WindowActiveField(wn),IPr);
      PutWindowRecord(wn,IPr);
    end;
  end;
  RETURN;
END;

global 
procedure WriteofPrepayIPDsm()
BEGIN
  record IPVc IPr;
  Integer wn,error,rownr;
  
  wn = CurWindow;
  if (WindowState(wn)!=Rs_normal) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IPr);  
    if (IPr.OKFlag==0) then begin
      error = WriteOffPrePayment(rownr,IPr);
      if (error==0) then begin
        PutWindowRecord(wn,IPr);
      end else begin
        MessageBox(error,"");
      end;
    end;
  end;
  RETURN;
END;

global 
updating procedure FirstEventIPDsm()
BEGIN
  record FEIVVc FEIVr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer wn,nwn,rownr;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    DeselectWindow(wn,false);
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,IPr);
      if (IPr.OKFlag!=0) then begin
        MatRowGet(IPr,rownr,IPrw);    
        if ((nonblank(IPrw.CustCode)) and (IPrw.BankVal!=0) and (IPrw.CUPNr!=-1) and (IPrw.InvoiceNr==-1)) then begin
          r = RecordAction_raPasteIPInFEIV(FEIVr,IPr.SerNr,rownr);
          if (r==0) then begin
            nwn = OpenWindow("FEIVDClass",1,0,"","",FEIVr);
          end else begin
            if (r>1) then begin
              MessageBox(r,"");
            end;
          end;
          Beep;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure DistributeChequesIPDsm()
BEGIN
  Integer wn;
  record IPVc IPr;
  string 255 gotofieldname;
  Integer gotorownr,rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,IPr);
  if (IPr.OKFlag==0) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,true);
    DoDistributeChequesIP(IPr,rownr,gotofieldname,gotorownr);
    PutWindowRecord(wn,IPr);
    if (nonblank(gotofieldname)) then begin
      WindowFieldGoto(wn,IPr,gotorownr,gotofieldname,true);
    end;
  end;  
  RETURN;
END;

global
procedure PrintChequesIPDsm()
BEGIN
  Integer wn;
  record IPVc IPr;
  row IPVc IPrw;
  Integer i,rwcnt;
  record CheckVc Checkr;

  wn = CurWindow;
  GetWindowRecord(wn,IPr);
  rwcnt = MatRowCnt(IPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPr,i,IPrw);
    if (IPrw.ChequeNr>0) then begin
      Checkr.SerNr = IPrw.ChequeNr;
      if (ReadFirstMain(Checkr,1,true)) then begin
        PrintDocument(Checkr,"ChkForm",false);
      end;
    end;
  end;
  return;
end;

global
updating procedure ActFromIPDsm()
begin
  Integer wn,nwn;
  record IPVc IPr;
  record ActVc Actr;
  Integer rownr;
    
  wn = CurWindow;
  GetWindowRecord(wn,IPr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (CreateActFromIP(IPr,rownr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
    end;
  end else begin
    MessageBox(22057,"");
  end;
  return;
end;

global
updating procedure IPVcCreateActivity()
begin
  ActFromIPDsm;
  return;
end;

global
procedure BankStIPDsm()
begin
  Integer wn,nwn;
  row PMBlock PMrw;
  record IPVc IPr;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,IPr);
  if (GetPMRow(IPr.PayMode,PMrw)) then begin end;
  ReportDefaults(RepSpec,"BankStRClass");
  nwn = OpenWindow("BankStRClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.repname = "BankStRn";
  RepSpec.Media = mtScreen;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.sStartDate = IPr.TransDate;
  RepSpec.sEndDate = IPr.TransDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.AccStr = PMrw.AccNr;
  PutWindowRecord(nwn,RepSpec);
  return;
end;

global
updating procedure VATCorrectionIPDsm()
begin
  record IPVc IPr;
  record VATIVVc VATIVr;
  Integer wn,nwn,rownr,err;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,IPr);
      if (IPr.ARonTR==0) then begin
        MessageBox(20938,"");
        goto LVATCorrectionIPDsm;
      end;
      if (IPr.OKFlag==0) then begin
        MessageBox(2072,"");
        goto LVATCorrectionIPDsm;
      end;
      if (IPr.Invalid!=0) then begin
        MessageBox(1282,"");
        goto LVATCorrectionIPDsm;
      end;
      err = CreateVATIVFromIP(IPr,rownr,VATIVr);
      switch (err) begin        
        case 0:
          nwn = OpenWindow("VATIVDClass",1,0,"","",VATIVr);
        otherwise
          MessageBox(err,"");
      end;
    end else begin
      MessageBox(22057,"");
    end;
  end else begin
    MessageBox(22902,"");
  end;
LVATCorrectionIPDsm:;  
  return;
end;

global 
updating procedure CreateMailFromIPDsm()
begin
  Integer wn,nwn;
  record MailVc Mailr;
  record IPVc IPr;
  row IPVc IPrw;
  Integer err;
  string 255 tstr,docname,lastcusctode;
  Integer i,rwcnt;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normalstate
    GetWindowRecord(wn,IPr);  
    rwcnt = MatRowCnt(IPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IPr,i,IPrw);
      if (nonblank(lastcusctode)) then begin
        if (IPrw.CustCode!=lastcusctode) then begin
          MessageBox(20987,"");
          goto LCreateMailFromIPDsm;
        end;
      end;
      lastcusctode = IPrw.CustCode;
    end;
    err = CreateMailFromIPD(IPr,Mailr,tstr,lastcusctode,WindowFormName(wn));
    if (err!=0) then begin
      MessageBox(err,": " & tstr);
    end else begin
      nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
    end;
  end;
 LCreateMailFromIPDsm:; 
  return;
end;

procedure OpenCheque(string ownbankacc,string custcode,Date paydate,string curncy,val cheqv,Integer mwn)
begin
  Integer nwn;
  record CUVc CUr;
  record CheckVc Checkr;
  Boolean openf;
  
  openf = FindCheque(custcode,ownbankacc,Checkr);
  if (openf) then begin
    nwn = OpenWindow("CheckDClass",0,mwn,"","",Checkr);
    if (blank(Checkr.CUCode)) then begin
      CUr.Code = custcode;
      if (ReadFirstMain(CUr,1,true)) then begin
        Checkr.CUCode = custcode;
        Checkr.CUName = CUr.Name;
      end;
      if (blank(Checkr.BankAcc)) then begin
        Checkr.BankAcc = ownbankacc;
      end;
    end;
    if (blankdate(Checkr.EffectDate)) then begin
      Checkr.EffectDate = paydate;
    end;
    if (blankdate(Checkr.TransDate)) then begin
      Checkr.TransDate = CurrentDate;
    end;
    Checkr.Amount = cheqv;
    Checkr.CurncyCode = curncy;
    PutWindowRecord(nwn,Checkr);    
  end else begin
    CUr.Code = custcode;
    if (ReadFirstMain(CUr,1,true)) then begin
      RecordNew(Checkr);
      Checkr.TransDate = CurrentDate;
      Checkr.EffectDate = paydate;
      Checkr.Amount = cheqv;
      Checkr.CUCode = custcode;
      Checkr.CUName = CUr.Name;
      Checkr.BankAcc = ownbankacc;
      Checkr.CurncyCode = curncy;
      nwn = OpenWindow("CheckDClass",0,mwn,"","",Checkr);
    end;
  end;
  if (nwn>0) then begin
    WindowFieldGoto(nwn,Checkr,-1,"CheckNr",true);
  end;
  return;
end;

function val TotCUAmount(record IPVc IPr,Integer rownr,val initval,string cucode)
begin
  row IPVc IPrw;
  Integer i,rwcnt,pt;
  val res;
  string 5 Pmode;
  
  res = initval;
  rwcnt = MatRowCnt(IPr);
  for (i=rownr+1;i<rwcnt;i=i+1) begin
    MatRowGet(IPr,i,IPrw);
    Pmode = IPrw.PayMode;
    if blank(Pmode) then begin
      Pmode = IPr.PayMode; 
    end;
    GetPayType(Pmode,pt);
    if ((IPrw.ChequeNr==-1) and (IPrw.CustCode==cucode) and (pt<>4)) then begin
      res = res + IPrw.RecVal;
    end;
  end; 
  TotCUAmount = res; 
  return;
end;

global
procedure CreateCheckIPDsm()
begin
  Integer wn;
  record IPVc IPr;
  row IPVc IPrw;
  Integer rownr,cht;
  val totv;
  string 255 tstr;

  wn = CurWindow;
  GetWindowRecord(wn,IPr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0 and IPr.OKFlag==0) then begin
    if (WindowActiveField(wn)!="ChequeNr") then begin
      WindowFieldGoto(wn,IPr,rownr,"ChequeNr",true);
      GetWindowRecord(wn,IPr);
    end;
    if (WindowActiveField(wn)=="ChequeNr") then begin
      MatRowGet(IPr,rownr,IPrw);
      if (IPrw.ChequeNr==-1) then begin
        if (nonblank(IPrw.PayMode)) then begin
          cht = PMCheckType(IPrw.PayMode,tstr,tstr);
        end else begin
          cht = PMCheckType(IPr.PayMode,tstr,tstr);
        end;        
        if (cht==1) then begin
          totv = TotCUAmount(IPr,rownr,IPrw.RecVal,IPrw.CustCode);
          if (totv!=0) then begin
            OpenCheque("",IPrw.CustCode,IPr.TransDate,IPrw.RecCurncy,totv,wn);
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
procedure IPFromIPLsm()
begin
  record RcVc RepSpec;
  Integer nwn,wn;

  RepSpec.repname = "CreateIPMn";
  nwn = OpenWindow("IPSuggestionVClass",1,0,"","",RepSpec);
  IPSuggestionVClassReportDefaults(nwn);
  return;
end;

global
procedure IPDDExpIPLsm()
begin
  record RcVc RepSpec;
  Integer nwn;
  record IPVc IPr;
  Integer i,wn;
  LongInt firstip;
  Date firstipd;
  
  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(IPr,wn,i)) begin
    if (blank(RepSpec.f1)) then begin
      firstip = IPr.SerNr;
      firstipd = IPr.TransDate;
    end;
    i = i + 1;
  end;
  if (firstip>0) then begin
    RepSpec.f1 = firstip;
  end;
  if (nonblank(RepSpec.f1)) then begin
    if (IPr.SerNr!=firstip) then begin
      RepSpec.f1 = RepSpec.f1 & ":" & IPr.SerNr;
    end;
  end;

  nwn = OpenWindow("DirectDebitEClass",1,0,"","",RepSpec);
  DirectDebitEClassReportDefaults(nwn);
  GetWindowRecord(nwn,RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.repname = "DirectDebitEn";
  RepSpec.f1 = IPr.SerNr;
  RepSpec.Media = mtFile;
  PutWindowRecord(nwn,RepSpec);

  return;
end;

global
procedure OpenVatMatrixIPDsm()
begin
  record TaxMatrixVc TMr;
  record IPVc IPr;
  row IPVc IPrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,IPr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(IPr,rowno,IPrw);
    UnpackRowFieldMatrix(IPrw,"TaxMatrix",TMr);
  end else begin
//    UnpackFieldMatrix(IPr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
procedure ReprintIPDsm()
begin
  record RcVc RepSpec;
  record IPVc IPr;
  Integer wn;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IPr);
  if (HasLocalization("PRT")) then begin
    if (IPr.OKFlag==0) then begin
      MessageBox(12556,"");
      goto LReprintIPDsm;
    end;
  end;
  RepSpec.f1 = IPr.SerNr;
  RepSpec.Media = mtPrinter;
  RepSpec.repname = "IPDForm";
  RepSpec.OnlyUnprntd = 2;
  RunReport(RepSpec,0);
LReprintIPDsm:;  
  return;
end;
