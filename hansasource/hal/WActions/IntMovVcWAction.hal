external procedure WarnFutureDate(Boolean,Date);
external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean InternMovVc_PasteArtCode(var record InternMovVc,Integer,var string);
remote function Boolean InternMovVc_PasteSerialNr(var record InternMovVc,Integer);

global 
function Boolean InternMovDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record InternMovVc Offhr;
  row InternMovVc Offhrw;
  string 255 inwarning;
 
  GetWindowRecord(wn,Offhr);
  MatRowGet(Offhr,rownr,Offhrw);
  if ((changedf!=0) or ((blank(Offhrw.Spec)) and (nonblank(Offhrw.ArtCode)))) then begin
    GetWindowRecord(wn,Offhr);
    DeselectWindow(wn,false);
    if (InternMovVc_PasteArtCode(Offhr,rownr,inwarning)) then begin
      PutWindowRecord(wn,Offhr);
      if (nonblank(inwarning)) then begin
          MessageBox(0,inwarning);
      end;
    end else begin
      Beep;
    end;
  end;
  InternMovDClassArtCodeEFAfter = true;
  return;
end;

global
procedure InternMovSumUp(var record InternMovVc InternMovr)
begin
  row InternMovVc InternMovrw;
  Integer i,rwcnt;
  
  InternMovr.SumQuant = BlankVal;
  rwcnt = MatRowCnt(InternMovr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(InternMovr,i,InternMovrw);
    if (InternMovrw.Quant<>BlankVal) then begin
      InternMovr.SumQuant = InternMovr.SumQuant + InternMovrw.Quant;
    end;
  end;
  return;
end;

global 
function Boolean InternMovDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record InternMovVc InternMovr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,InternMovr);
    DeselectWindow(wn,false);
    InternMovSumUp(InternMovr);
    PutWindowRecord(wn,InternMovr);
  end;
  InternMovDClassQuantEFAfter = true;
  return;
end;

global 
function Boolean InternMovDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  record InternMovVc InternMovr;
  
  if (changedf) then begin
    GetWindowRecord(wn,InternMovr);
    DeselectWindow(wn,false);
    WarnFutureDate(true,InternMovr.TransDate);
    PutWindowRecord(wn,InternMovr);
  end;
  InternMovDClassTransDateEFAfter = true;
  return;
end;

global 
function Boolean InternMovDClassSerialNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record InternMovVc InternMovr;
  row InternMovVc InternMovrw;
 
  GetWindowRecord(wn,InternMovr);
  MatRowGet(InternMovr,rownr,InternMovrw);
  if ((changedf!=0) or ((blank(InternMovrw.Spec)) and (nonblank(InternMovrw.ArtCode)))) then begin
    GetWindowRecord(wn,InternMovr);
    DeselectWindow(wn,false);
    if (InternMovVc_PasteSerialNr(InternMovr,rownr)) then begin
      InternMovSumUp(InternMovr);
      PutWindowRecord(wn,InternMovr);
    end else begin
      Beep;
    end;
  end;
  InternMovDClassSerialNrEFAfter = true;
  return;
end;

global
function Boolean InternMovDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = InternMovDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "Quant": res = InternMovDClassQuantEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = InternMovDClassTransDateEFAfter(wn,changed!=0);
    case "SerialNr": res = InternMovDClassSerialNrEFAfter(wn,fn,rownr,changed);
  end;
  InternMovDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean InternMovDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record InternMovVc InternMov2r;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,InternMov2r);
    if (InternMov2r.OKFlag!=0) then begin
      res = false;
    end;
  end;
  InternMovDClassActiveEditField = res;
  RETURN;
END;

function Boolean InternMovButtonAction(string fieldname,Integer wn,Integer wnst)
begin
  Boolean res;
  record InternMovVc InternMovr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,InternMovr);
    if (InternMovr.OKFlag!=0) then begin
      switch (fieldname) begin
        case "OKFlag":
          res = false;
//          if (UserCanAction("UnOKAll",true)) then begin
          if (UserCanAction("UnOKAgree",true)) then begin
            res = true;
          end;
        otherwise
          res = false;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,InternMovr);
    if (InternMovr.OKFlag!=0) then begin
      switch (fieldname) begin
        otherwise
          res = false;
      end;
    end;
  end;
  InternMovButtonAction = res;
  return;
end;

global
function Boolean InternMovDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;

  res = InternMovButtonAction("OKFlag",wn,WindowState(wn));
  InternMovDClassOKFlagButtonAction = res;
  RETURN;
END;

global 
function Boolean InternMovDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record InternMovVc InternMovr;
  row InternMovVc InternMovrw;
  Boolean res;

  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,InternMovr);
    if (InternMovr.OKFlag<>0) then begin
      res = false;
    end;
  end;
  InternMovDClassDeleteRowTest = res;
  return;
end;

global
function string 40 InternMovDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  InternMovDClassSpecPasteName = psname;
  return;
end;
