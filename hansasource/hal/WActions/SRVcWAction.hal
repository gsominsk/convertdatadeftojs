external function string 40 ObjSClassPasteSpecialWindowClass(string);
remote procedure SRVc_PasteSerialNr(var record SRVc,Integer);
external function val CalculateSerialNrQuantity(string,string,string,Boolean,val,val,val,val);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
external procedure WarnFutureDate(Boolean,Date);
remote function Boolean SRVc_PasteLocation(var record SRVc,Integer);
remote function Boolean SRVc_PasteACShort(var record SRVc,Integer);
remote procedure SRVc_PasteNewFIFO(var record SRVc,Integer);
remote function Integer CreateQualConFromSD(record SDVc,Integer,var record QualConVc,Integer);
external procedure FindOTforAcc(string,var string);
external function Boolean TestForMATVARINS(Integer);
remote procedure SRVc_PastePosCode(var record SRVc,Integer);
external function string 40 SerialNrSClassSpecPName(string);
remote function Boolean SRVc_PasteArtCode(var record SRVc,Integer,Boolean,var string);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure SRSumUp(var record SRVc);

global
function Boolean SRDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record SRVc SRr;  
  row SRVc SRrw; 
  Integer rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum,sum;
  string 255 recepy,location;

  res = true;
  GetWindowRecord(wn,SRr);
  rwcnt = MatRowCnt(SRr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(SRr,rownr,SRrw);
    recepy = "";
    location = SRrw.Location;
    if (blank(location)) then begin   
      location = SRr.Location;
    end;
    SendArtStat(SRrw.ArtCode,location,recepy,t,tproc,unitprdisc,SRr.TransDate,0);
    SetWindowNameArg(wn,SRrw.ArtCode & ":" & location);
  end;
  SRDClassSwitchRow = res;  
  return;
end;

global
function Boolean SRDClassUnitXvalEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  row SRVc SRrw;
  record SRVc SRr;
  Boolean res;
  
  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,SRr);
    MatRowGet(SRr,rownr,SRrw);
    SRrw.Qty = CalculateSerialNrQuantity(SRrw.ArtCode,"","",false,SRrw.UnitXval,SRrw.UnitYval,SRrw.UnitZval,SRrw.Qty);
    MatRowPut(SRr,rownr,SRrw);
    SRSumUp(SRr);    
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassUnitXvalEFAfter = res;
  return;
end;

global
function Boolean SRDClassUnitYvalEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  row SRVc SRrw;
  record SRVc SRr;
  Boolean res;
  
  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,SRr);
    MatRowGet(SRr,rownr,SRrw);
    SRrw.Qty = CalculateSerialNrQuantity(SRrw.ArtCode,"","",false,SRrw.UnitXval,SRrw.UnitYval,SRrw.UnitZval,SRrw.Qty);
    MatRowPut(SRr,rownr,SRrw);
    SRSumUp(SRr);    
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassUnitYvalEFAfter = res;
  return;
end;

global
function Boolean SRDClassUnitZvalEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  row SRVc SRrw;
  record SRVc SRr;
  Boolean res;
  
  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,SRr);
    MatRowGet(SRr,rownr,SRrw);
    SRrw.Qty = CalculateSerialNrQuantity(SRrw.ArtCode,"","",false,SRrw.UnitXval,SRrw.UnitYval,SRrw.UnitZval,SRrw.Qty);    
    MatRowPut(SRr,rownr,SRrw);
    SRSumUp(SRr);    
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassUnitZvalEFAfter = res;
  return;
end;

global
function Boolean SRDClassSerialNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record SRVc SRr;
  Boolean res;
  
  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,SRr);
    SRVc_PasteSerialNr(SRr,rownr);
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassSerialNrEFAfter = res;
  return;
end;

function Boolean SRDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  row SRVc SRrw;
  record SRVc SRr;
  Boolean res;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,SRr);
    if (DateWarned(SRr.TransDate,"SRVc")) then begin
      MessageBox(1045,"");
    end;
    if (WarnOldRecords(SRr.TransDate,"SRVc",SRr.SerNr)) then begin
      MessageBox(2020,"");
    end;
    WarnFutureDate(true,SRr.TransDate);
//JJCS    
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassTransDateEFAfter = res;
  return;
end;

function Boolean SRDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record SRVc SRr;
  Boolean res;
  string 255 inwarn;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,SRr);
    if (SRVc_PasteArtCode(SRr,rownr,changedf,inwarn)) then begin
      if (nonblank(inwarn)) then begin
        MessageBox(0,inwarn);
      end;
      PutWindowRecord(wn,SRr);    
      if (SRDClassSwitchRow(wn,rownr)) then begin end;
    end else begin
      Beep;
    end;
  end;
  SRDClassArtCodeEFAfter = res;
  return;
end;

function Boolean SRDClassNewFIFOEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record SRVc SRr;
    
  res = true;
  if (changedf) then begin    
    GetWindowRecord(wn,SRr);
    SRVc_PasteNewFIFO(SRr,rownr);
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassNewFIFOEFAfter = res;
  return;
end;

function Boolean SRDClassPosCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record SRVc SRr;
  Boolean res;
  
  res = true;
  if ((changedf) and (rownr>=0)) then begin
    GetWindowRecord(wn,SRr);
    SRVc_PastePosCode(SRr,rownr);
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassPosCodeEFAfter = res;
  return;
end;

function Boolean SRDClassACShortEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record SRVc SRr;
  Boolean res;
  
  if (changedf) then begin
    GetWindowRecord(wn,SRr);
    res = SRVc_PasteACShort(SRr,rownr);
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassACShortEFAfter = res;
  return;
end;


function Boolean SRDClassLocationEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record SRVc SRr;
  Boolean res;
  
  if (changedf) then begin
    GetWindowRecord(wn,SRr);
    res = SRVc_PasteLocation(SRr,rownr);
    PutWindowRecord(wn,SRr);    
  end;
  SRDClassLocationEFAfter = res;
  return;
end;

global
function Boolean SRDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = SRDClassArtCodeEFAfter(wn,rownr,changed!=0);
    case "NewFIFO": res = SRDClassNewFIFOEFAfter(wn,rownr,changed!=0);
    case "TransDate": res = SRDClassTransDateEFAfter(wn,changed!=0);
    case "SerialNr": res = SRDClassSerialNrEFAfter(wn,rownr,changed!=0);
    case "UnitZval": res = SRDClassUnitZvalEFAfter(wn,rownr,changed!=0);
    case "UnitYval": res = SRDClassUnitYvalEFAfter(wn,rownr,changed!=0);
    case "UnitXval": res = SRDClassUnitXvalEFAfter(wn,rownr,changed!=0);
    case "PosCode": res = SRDClassPosCodeEFAfter(wn,rownr,changed!=0);
    case "ACShort": res = SRDClassACShortEFAfter(wn,rownr,changed!=0);
    case "Location": res = SRDClassLocationEFAfter(wn,rownr,changed!=0);
  end;
  SRDClassAfterEditField = res;
  return;
end;

global
function Boolean SRDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record SRVc SRr;
  Boolean res;

  if (rownr>=0) then begin
    GetWindowRecord(wn,SRr);    
    SRSumUp(SRr);
    PutWindowRecord(wn,SRr);    
  end;
  res = true;
  SRDClassOnOverStrike = true;
  return;
end;

global
procedure ItemStatusSRDsm()
begin
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,false);
  testf = SRDClassSwitchRow(wn,WindowActiveRow(wn));
  return;
end;

global 
function Boolean SRDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record SRVc SRr;
  row SRVc SRrw;

  res = true;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,SRr);    
    if (SRr.OKFlag!=0) then begin res = false; end;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,SRr);    
    if (SRr.OKFlag!=0) then begin res = false; end;
  end;
/*  
  if (res) then begin
    MatRowGet(SRr,rownr,SRrw);
    res = blank(SRrw.ArtCode);
    if (res==false) then begin
      res = nonblank(SRrw.SerialNr);
    end;
  end;
*/  
  SRDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean SRDClassInsertRowTest(Integer wn, Integer rownr)
begin
  Boolean res;
  record SRVc SRr;

  res = false;
  SRDClassInsertRowTest = res;
  return;
end;

global
function Boolean SRDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record SRVc SRr;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,SRr);
    if (SRr.OKFlag!=0) then begin
      res = false;
      switch (fieldname) begin
        case "Comment": res = true;
      end;
    end;
  end;
  switch (fieldname) begin
    case "SerialNr": res = false;
    case "Qty": res = false;
    case "FIFO": res = false;
    case "FIFORowVal": res = false;
    case "NewFIFORowVal": res = false;
    case "DiffFIFO": res = false;
    case "DiffFIFORowVal": res = false;
  end;
  SRDClassActiveEditField = res;
  return;
end;

global
function Boolean SRDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record SRVc SRr;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SRr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SRr);
  end;  
  if (SRr.OKFlag!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;
  end;
  SRDClassOKFlagButtonAction = res;
  return;
end;

function string 40 SRDClassSpecPasteNameObjects(Integer wn)
begin
  record SRVc SRr;
  row SRVc SRrw;
  Integer rownr;
  string 200 typ;
  string 255 psname,accnr;

  GetWindowRecord(wn,SRr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(SRr,rownr,SRrw);
    accnr = SRrw.SRVarAcc;
  end;
  if (blank(accnr)) then begin
    accnr = SRr.SRVarAcc;
  end;
  FindOTforAcc(accnr,typ);
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  SRDClassSpecPasteNameObjects = psname;
  return;
end;

global
function string 40 SRDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "Objects": psname = SRDClassSpecPasteNameObjects(wn);
  end;
  SRDClassSpecPasteName = psname;
  return;
end;

global
function Boolean SRDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
begin
  Boolean res;
  record SRVc SRr;
  row SRVc SRrw;

  switch (fieldname) begin  
    case "Qty":     
      GetWindowRecord(wn,SRr);      
      MatRowGet(SRr,rownr,SRrw);
      if (SRrw.Qty==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  SRDClassBeforeEditField = res;
  return;
end;
