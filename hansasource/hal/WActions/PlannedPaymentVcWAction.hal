external function LongInt DateDiff(Date,Date);
remote procedure PlannedPaymentsWClassBankAccRemote(var record PlannedPaymentsVc);
remote procedure PlannedPaymentsWClassPeriod2StrRemote(var record PlannedPaymentsVc);
remote updating procedure ConfirmPlannedPaymentsChangesWClassRemote(var record PlannedPaymentsVc);

function Boolean PlannedPaymentDClassCompCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record PlannedPaymentVc PPr;
  record CUVc CUr;

  if (changedf) then begin
    GetWindowRecord(wn,PPr);
    CUr.Code = PPr.CompCode;
    ReadFirstMain(CUr,1,true);
    PPr.CompName = CUr.Name;
    PutWindowRecord(wn,PPr);
    res = true;
  end;
  PlannedPaymentDClassCompCodeEFAfter = res;
  return;
end;

global
function Boolean PlannedPaymentDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "CompCode": res = PlannedPaymentDClassCompCodeEFAfter(wn,changed!=0);
  end;
  PlannedPaymentDClassAfterEditField = res;
  return;
end;

global
function Boolean PlannedPaymentDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record PlannedPaymentVc PPr;
  
  res = true;
  GetWindowRecord(wn,PPr);
  switch (wnst) begin
    case Rs_insert:
    otherwise
      if (PPr.Paid!=0 or PPr.Closed!=0) then begin
        res = false;
      end;
      if (res) then begin
        res = blank(PPr.FileName);
      end;
  end;
  if (res==false) then begin
    switch (fieldname) begin
      case "PlanPayDate":  res = true;
      case "AgreedPayDate":  res = true;
      case "Comment":  res = true;
      case "Priority":  res = true;
    end;
  end;
  PlannedPaymentDClassActiveEditField = res;
  return;
end;

global
function Boolean PlannedPaymentDClassApprovedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record PlannedPaymentVc PPr;
 
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,PPr);
      if (PPr.Closed!=0) then begin res = false; end;
      if (PPr.Paid!=0) then begin res = false; end;
    case Rs_update:
      GetPrevWindowRecord(wn,PPr);
      if (PPr.Closed!=0) then begin res = false; end;
      if (PPr.Paid!=0) then begin res = false; end;
  end;  
  PlannedPaymentDClassApprovedButtonAction = res;
  return;
end;

global
function Boolean PlannedPaymentDClassClosedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record PlannedPaymentVc PPr;
 
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,PPr);
      if (PPr.Closed!=0) then begin res = false; end;
      if (PPr.Paid!=0) then begin res = false; end;
    case Rs_update:
      GetPrevWindowRecord(wn,PPr);
      if (PPr.Closed!=0) then begin res = false; end;
      if (PPr.Paid!=0) then begin res = false; end;
  end;  
  PlannedPaymentDClassClosedButtonAction = res;
  return;
end;

global
function Boolean PlannedPaymentDClassPaidButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record PlannedPaymentVc PPr;
 
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,PPr);
      if (PPr.Closed!=0) then begin res = false; end;
      if (PPr.Paid!=0) then begin res = false; end;
      switch (PPr.FileName) begin
        case "IPVc": res = false;
        case "IVVc": res = false;
        case "ORVc": res = false;
        case "OPVc": res = false;
        case "POVc": res = false;
        case "VIVc": res = false;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,PPr);
      if (PPr.Closed!=0) then begin res = false; end;
      if (PPr.Paid!=0) then begin res = false; end;
      switch (PPr.FileName) begin
        case "IPVc": res = false;
        case "IVVc": res = false;
        case "ORVc": res = false;
        case "OPVc": res = false;
        case "POVc": res = false;
        case "VIVc": res = false;
      end;
  end;  
  PlannedPaymentDClassPaidButtonAction = res;
  return;
end;

procedure OpenVcFromPlannedPayment(string filename,LongInt transnr)
begin
  Integer nwn;
  record IVVc IVr;
  record ORVc ORr;
  record POVc POr;
  record SMVc SMr;
  record VIVc VIr;
  
  switch (filename) begin
    case "IVVc":
      IVr.SerNr = transnr;
      if (ReadFirstMain(IVr,1,true)) then begin
        nwn = OpenWindow("IVDClass",1,0,"","",IVr);
      end; 
    case "ORVc":
      ORr.SerNr = transnr;
      if (ReadFirstMain(ORr,1,true)) then begin
        nwn = OpenWindow("ORDClass",1,0,"","",ORr);
      end; 
    case "POVc":
      POr.SerNr = transnr;
      if (ReadFirstMain(POr,1,true)) then begin
        nwn = OpenWindow("PODClass",1,0,"","",POr);
      end; 
    case "SMVc":
      SMr.SerNr = transnr;
      if (ReadFirstMain(SMr,1,true)) then begin
        nwn = OpenWindow("SMDClass",1,0,"","",SMr);
      end; 
    case "VIVc":
      VIr.SerNr = transnr;
      if (ReadFirstMain(VIr,1,true)) then begin
        nwn = OpenWindow("VIDClass",1,0,"","",VIr);
      end; 
  end;
  return;
end;

global
procedure OpenRegisterFromPlannedPaymentDsm()
begin
  record PlannedPaymentVc PPr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,PPr);
  OpenVcFromPlannedPayment(PPr.FileName,PPr.TransNr);
  return;
end;



global
function Boolean PlannedPaymentsWClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record PlannedPaymentsVc PPsr;
  row PlannedPaymentsVc PPsrw;
  
  res = true;
  GetWindowRecord(wn,PPsr);
  switch (fieldname) begin
    case "Reference": res = false;
    case "PayDate": res = false;
    case "LateDays": res = false;
    case "Balance": res = false;
    case "Paid":  
      MatRowGet(PPsr,rownr,PPsrw);
      if (PPsrw.PlanPaymentFileName=="IVVc") or (PPsrw.PlanPaymentFileName=="VIVc") then begin
        res = false;
      end;
  end;
  PlannedPaymentsWClassActiveEditField = res;
  return;
end;

function Boolean PlannedPaymentsWClassPeriod2Str(Integer wn,Boolean changedf)
begin
  Boolean res;
  record PlannedPaymentsVc PPsr;
  
  if (changedf) then begin
    GetWindowRecord(wn,PPsr);
    PlannedPaymentsWClassPeriod2StrRemote(PPsr);
    PutWindowRecord(wn,PPsr);
  end;
  PlannedPaymentsWClassPeriod2Str = res;
  return;
end;

function Boolean PlannedPaymentsWClassBankAcc(Integer wn,Boolean changedf)
begin
  Boolean res;
  record PlannedPaymentsVc PPsr;
  
  if (changedf) then begin
    GetWindowRecord(wn,PPsr);
    PlannedPaymentsWClassBankAccRemote(PPsr);
    PutWindowRecord(wn,PPsr);
  end;
  PlannedPaymentsWClassBankAcc = res;
  return;
end;

procedure PlannedPaymentsDSumup(var record PlannedPaymentsVc PPsr)
begin
  row PlannedPaymentsVc PPsrw;
  Integer i,rwcnt;
  val bal;
  
  PPsr.EndBal = blankval;
  rwcnt = MatRowCnt(PPsr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PPsr,i,PPsrw);
    if (PPsrw.Paid==0) then begin
      bal = bal + PPsrw.BaseSum;
      PPsrw.Balance = bal;
    end else begin
      PPsrw.Balance = blankval;
    end;
    MatRowPut(PPsr,i,PPsrw);
  end;
  PPsr.EndBal = PPsr.StartBal + bal;
  return;
end;

function Boolean PlannedPaymentsWClassBaseSum(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record PlannedPaymentsVc PPsr;
  
  if (changedf) then begin
    GetWindowRecord(wn,PPsr);
    PlannedPaymentsDSumup(PPsr);
    PutWindowRecord(wn,PPsr);
  end;
  PlannedPaymentsWClassBaseSum = res;
  return;
end;

function Boolean PlannedPaymentsWClassPlanPayDate(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record PlannedPaymentsVc PPsr;
  row PlannedPaymentsVc PPsrw;
  Boolean ldf;
  
  if (changedf) then begin
    GetWindowRecord(wn,PPsr);
    MatRowGet(PPsr,rownr,PPsrw);
    if (nonblankdate(PPsrw.AgreedPayDate)) then begin
      PPsrw.PlanPayDate = PPsrw.AgreedPayDate;
      PPsrw.LateDays = DateDiff(CurrentDate,PPsrw.AgreedPayDate);
      ldf = true;
    end;
    if (ldf==false) then begin
      if (nonblankdate(PPsrw.PlanPayDate)) then begin
        PPsrw.LateDays = DateDiff(CurrentDate,PPsrw.PlanPayDate);
        ldf = true;
      end;
    end;
    if (ldf==false) then begin
      if (nonblankdate(PPsrw.PayDate)) then begin
        PPsrw.LateDays = DateDiff(CurrentDate,PPsrw.PayDate);
        ldf = true;
      end;
    end;
    if (PPsrw.LateDays<0) then begin PPsrw.LateDays = blankval; end;
    MatRowPut(PPsr,rownr,PPsrw);
    PutWindowRecord(wn,PPsr);
  end;
  PlannedPaymentsWClassPlanPayDate = res;
  return;
end;

global
function Boolean PlannedPaymentsWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Period2Str": res = PlannedPaymentsWClassPeriod2Str(wn,changed!=0);
    case "CompCode": res = PlannedPaymentsWClassPeriod2Str(wn,changed!=0);
//    case "BankBalDate": res = PlannedPaymentsWClassBankBalDate(wn,changed!=0);
    case "BankAcc": res = PlannedPaymentsWClassBankAcc(wn,changed!=0);
    case "BaseSum": res = PlannedPaymentsWClassBaseSum(wn,rownr,changed!=0);
    case "Paid": res = PlannedPaymentsWClassBaseSum(wn,rownr,changed!=0);
    case "PlanPayDate": res = PlannedPaymentsWClassPlanPayDate(wn,rownr,changed!=0);
    case "AgreedPayDate": res = PlannedPaymentsWClassPlanPayDate(wn,rownr,changed!=0);
  end;
  PlannedPaymentsWClassAfterEditField = res;
  return;
end;

global 
function Boolean PlannedPaymentsWClassDeleteRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  
  res = false;
  PlannedPaymentsWClassDeleteRowTest = res;
  return;
end;

global 
function Boolean PlannedPaymentsWClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  
  res = false;
  PlannedPaymentsWClassInsertRowTest = res;
  return;
end;

global
function Boolean PlannedPaymentsWClassIncompletefButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  PlannedPaymentsWClassIncompletefButtonAction = res;
  return;
end;

global
function boolean PlannedPaymentsWClassOnOpenWindow(Integer wn)
begin
  record PlannedPaymentsVc PPsr;
  
  GetWindowRecord(wn,PPsr);
  PPsr.BankBalDate = CurrentDate;
  PutWindowRecord(wn,PPsr);
  PlannedPaymentsWClassOnOpenWindow = false;
  return;
end;

global
function Boolean PlannedPaymentsWClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record PlannedPaymentsVc PPsr;
  row PlannedPaymentsVc PPsrw;
  record PlannedPaymentVc PPr;
  Integer nwn;
  
  switch (fieldname) begin
    case "Reference":
      GetWindowRecord(wn,PPsr);  
      MatRowGet(PPsr,rownr,PPsrw);
      if (nonblank(PPsrw.Reference)) then begin
        PPr.SerNr = LastInRange(PPsrw.PlanPaymentNr,10);
        if (ReadFirstMain(PPr,1,true)) then begin
          nwn = OpenWindow("PlannedPaymentDClass",0,0,"","",PPr);    
        end;
     end;
  end;
  PlannedPaymentsWClassOpenRecord = res;
  return;
end;

global
procedure UpdatePlannedPaymentsWClass()
begin
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  PlannedPaymentsWClassPeriod2Str(wn,true);
  return;
end;

global
updating procedure ConfirmPlannedPaymentsChangesWClass()
begin
  Integer wn;
  record PlannedPaymentsVc PPsr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,PPsr);
  ConfirmPlannedPaymentsChangesWClassRemote(PPsr);
  PlannedPaymentsWClassPeriod2Str(wn,true);
  return;
end;
