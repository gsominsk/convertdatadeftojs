remote function Integer CreateQualConFromPU(record PUVc,Integer,var record QualConVc,Integer);
external function string 40 SerialNrSClassSpecPName(string);
remote updating procedure OkAllStockMovementsPUr(record RcVc);

global
function Boolean PUVcStockTypeEFActiveTest(Integer wn,Integer wnst,Integer rownr)
begin
  Boolean res;
  record PUVc PUr;
  row PUVc PUrw;
  record POVc POr;
  row POVc POrw;
  
  res = true;
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,PUr);
  end;
  if (wnst==Rs_normal) then begin
    GetWindowRecord(wn,PUr);
  end;
  if (PUr.OKFlag!=0) then begin
    res = false;
  end;
  if (res) then begin
    if (rownr>=0) then begin
      GetWindowRecord(wn,PUr);
      MatRowGet(PUr,rownr,PUrw);
      if (PUrw.PONr>0) then begin
        POr.SerNr = PUrw.PONr;
      end else begin
        if (PUr.PONr>0) then begin
          POr.SerNr = PUr.PONr;
        end;
      end;
      if (POr.SerNr>0) then begin
        if (ReadFirstMain(POr,1,true)) then begin
          if (PUrw.OrdRow<MatRowCnt(POr)) then begin
            MatRowGet(POr,PUrw.OrdRow,POrw);
            res = POrw.Shipd2>0;
          end;
        end;
      end;
    end;
  end;
  PUVcStockTypeEFActiveTest = res;
  return;
end;

global
function Boolean PUVcEFActiveTest(Integer wn,Integer rownr,record PUVc prevPUr)
BEGIN
  Boolean res;
  row PUVc PUrw;
  Integer rwcnt,oldrwcnt;
  record PUVc PUr;
  
  res = true;
  if (prevPUr.OKFlag!=0) then begin
    res = false;
    goto LPUVcEFActiveTest;
  end;
  GetWindowRecord(wn,PUr);
  if (PUr.PONr>0) then begin
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);
      if (PUrw.OrdRow<0) then begin
        res = false;
      end;
    end;
  end;
LPUVcEFActiveTest:;  
  PUVcEFActiveTest = res;
  RETURN;
END;

global
function Boolean PUVc_SerialNrEFActiveTest(Integer wn,Integer rownr,record PUVc prevPUr)
begin
  Boolean res;
  row PUVc PUrw;
  Integer rwcnt,oldrwcnt;
  record PUVc PUr;
  
  res = true;
  if (prevPUr.OKFlag!=0) then begin
    res = false;
    goto LPUVc_SerialNrEFActiveTest;
  end;
  GetWindowRecord(wn,PUr);
  if (PUr.PONr>0) then begin
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,PUrw);
      if (PUrw.OrdRow<0) then begin
        if (PUrw.MotherPURow<0) then begin
          res = false;
        end;
      end;
    end;
  end;
LPUVc_SerialNrEFActiveTest:;  
  PUVc_SerialNrEFActiveTest = res;
  return;
end;

global
function Boolean PUVcRowEFActiveCheck(string fieldname,Integer wn,Integer wnst,Integer rownr)
BEGIN
  Boolean res,umf;
  record PUVc PUr;
  row PUVc PUrw;

  res = true;
  umf = true;
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,PUr);
    switch (fieldname) begin
      case "ArtCode": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin
          if (PUr.PONr>0) then begin
            if (rownr>=0) then begin
              MatRowGet(PUr,rownr,PUrw);
              if (PUrw.OrdRow>=0) then begin
                res = false;
              end;
            end;
          end;
        end;
      case "Quant": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "Spec":
        if (HasLocalization("PRT")) then begin
          MatRowGet(PUr,rownr,PUrw);
          if (nonblank(PUrw.ArtCode)) then begin
            umf = false;
            res = false;
          end;
        end else begin
          umf = PUVcEFActiveTest(wn,rownr,PUr);
        end;
      case "UPrice": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "SerialNr": umf = PUVc_SerialNrEFActiveTest(wn,rownr,PUr);
      case "Extra": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "CostPrice": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "ShipCost": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "CustomsCost": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "BestBefore": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "Coefficient": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "BasePrice": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "CostAcc": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "CredAcc": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "Objects": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "CountryOfOrg": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "CustomsNr": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "PosCode": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "BatchStatus": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "UnitXval": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "UnitYval": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "UnitZval": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "RowCost1": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "RowCost2": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "RowCost3": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "RowCost4": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "RowCost5": 
        umf = PUVcEFActiveTest(wn,rownr,PUr);
        if (umf) then begin umf = UserCanAction("ChangingCostOnPU",true); end;
      case "VATCode": umf = PUVcEFActiveTest(wn,rownr,PUr);
      case "PORecon": umf = true;
      case "POReconComment": umf = true;
      case "VIRecon": umf = true;
      case "VIReconComment": umf = true;
      case "VarianceAmount": umf = false;
      case "StockType": res = PUVcStockTypeEFActiveTest(wn,wnst,rownr);
      otherwise
        if (PUr.OKFlag!=0) then begin
          umf = false;
        end;  
    end;
  end else begin
    switch (fieldname) begin
      case "UPrice": res = UserCanAction("ChangingCostOnPU",true);
      case "CostPrice": res = UserCanAction("ChangingCostOnPU",true);
      case "Extra": res = UserCanAction("ChangingCostOnPU",true);
      case "ShipCost": res = UserCanAction("ChangingCostOnPU",true);
      case "CustomsCost": res = UserCanAction("ChangingCostOnPU",true);
      case "RowCost1": res = UserCanAction("ChangingCostOnPU",true);
      case "RowCost2": res = UserCanAction("ChangingCostOnPU",true);
      case "RowCost3": res = UserCanAction("ChangingCostOnPU",true);
      case "RowCost4": res = UserCanAction("ChangingCostOnPU",true);
      case "RowCost5": res = UserCanAction("ChangingCostOnPU",true);
    end;
  end;
  if (umf==false) then begin
    res = false;
  end;
  PUVcRowEFActiveCheck = res;
  RETURN;
END;

procedure PUDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record PUVc PUr;
  Integer rownr;

  GetWindowRecord(wn,PUr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);//to get VARINSClass working
  WindowFieldGoto(wn,PUr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 PUDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "ArtCode": PUDClassSpecPasteNameArtCode(wn,psname);
  end;
  PUDClassSpecPasteName = psname;
  return;
end;

global
updating procedure OKStockMovPUrDsm()
begin
  record PUVc PUr;
  record RcVc RepSpec;
  Integer wn,i;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  if ((WindowState(wn)==0) and (PUr.OKFlag==1)) then begin
    RepSpec.f1 = PUr.SerNr;
    RepSpec.f2 = "PUVc";
    OkAllStockMovementsPUr(RepSpec);
  end;
  return;
end;

global
procedure QualConFromPUDsm()
begin
  Integer wn,nwn;
  Integer rownr,err;
  record PUVc PUr;
  record QualConVc QCr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,true);
    GetWindowRecord(wn,PUr);
    err = CreateQualConFromPU(PUr,rownr,QCr,0);
    if (err==0) then begin
      nwn = OpenWindow("QualConDClass",1,0,"","",QCr);
    end else begin
      MessageBox(err,"");
    end;
  end else begin
    MessageBox(22064,"");
  end;
  return;
end;
