external function string 40 SerialNrSClassSpecPName(string);
/*
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
//remote procedure SLPVc_InclVATButtonAction(var record SLPVc);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure SLPCalcPerc(val,string,var val);
external procedure SLPSumUp(var record SLPVc);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
//external procedure PUSetShipCost(var record PUVc,Integer);
external function Boolean WarnOldRecords(Date,string,LongInt );
external function Boolean DateWarned(Date,string);
//external procedure PURecalcCost(var record PUVc);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external procedure CalculatePURowSum(val,val,string,var val,val,
                                     val,val,val,val,val,
                                     string,var val,Boolean,string,
                                     val,val,val,val,val);
external function Integer GetUnitAllowDim(string);


function val UnitCalcQty(string Unittext,val UnitXval,val UnitYval,val UnitZval,val defqty)
BEGIN
  Integer dims;
  val res;

  res = 1.00000;
  dims = GetUnitAllowDim(Unittext); 
  switch (dims) begin
    case 1:
      if (UnitXval!=0) then begin
        res = res * UnitXval;  
      end;    
    case 2:
      if (UnitXval!=0) then begin
        res = res * UnitXval;  
      end;
      if (UnitYval!=0) then begin
        res = res * UnitYval;  
      end;
    case 3:        
      if (UnitXval!=0) then begin
        res = res * UnitXval;  
      end;    
      if (UnitYval!=0) then begin
        res = res * UnitYval;  
      end;    
      if (UnitZval!=0) then begin
        res = res * UnitZval;  
      end;
    otherwise
      res = defqty;    
  end;
  UnitCalcQty = res;
  RETURN;
END;

global
function val CalculateSerialNrQuantity(string artcode,val UnitXval,val UnitYval,val UnitZval,val defqty)
BEGIN
  record INVc INr;
  record ItemSettingBlock ItemSettingRec;
  val res;

  res = defqty;
  BlockLoad(ItemSettingRec);
  if (ItemSettingRec.EnCalcDimQty!=0) then begin  
    if (ReadFirstItem(artcode,INr,true,true)) then begin 
      res = UnitCalcQty(INr.Unittext,UnitXval,UnitYval,UnitZval,defqty);
    end;
  end;
  CalculateSerialNrQuantity = res;
  RETURN;
END;

global
function Boolean PUDClassUnitXvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SLPVc PUrw;
  record SLPVc PUr;
  Boolean res;
  val pv;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);
    PUrw.Quant = CalculateSerialNrQuantity(PUrw.ArtCode,PUrw.UnitXval,PUrw.UnitYval,PUrw.UnitZval,PUrw.Quant);
    pv = blankval;
    CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,
                      PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,pv,false,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
    PUrw.Sum = pv;
    MatRowPut(PUr,rownr,PUrw);
    PUSumUp(PUr);    
    PutWindowRecord(wn,PUr);    
  end;
  PUDClassUnitXvalEFAfter = res;
  RETURN;
END;

global
function Boolean PUDClassUnitYvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SLPVc PUrw;
  record SLPVc PUr;
  Boolean res;
  val pv;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);
    PUrw.Quant = CalculateSerialNrQuantity(PUrw.ArtCode,PUrw.UnitXval,PUrw.UnitYval,PUrw.UnitZval,PUrw.Quant);
    pv = blankval;
    CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,
                      PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,pv,false,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
    PUrw.Sum = pv;
    MatRowPut(PUr,rownr,PUrw);
    PUSumUp(PUr);    
    PutWindowRecord(wn,PUr);    
  end;
  PUDClassUnitYvalEFAfter = res;
  RETURN;
END;

global
function Boolean PUDClassUnitZvalEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  row SLPVc PUrw;
  record SLPVc PUr;
  Boolean res;
  val pv;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);
    PUrw.Quant = CalculateSerialNrQuantity(PUrw.ArtCode,PUrw.UnitXval,PUrw.UnitYval,PUrw.UnitZval,PUrw.Quant);    
    pv = blankval;
    CalculatePURowSum(PUrw.Quant,PUrw.UPrice,PUrw.Extra,PUrw.CostPrice,PUrw.ShipCost,
                      PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,pv,false,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2);
    PUrw.Sum = pv;
    MatRowPut(PUr,rownr,PUrw);
    PUSumUp(PUr);    
    PutWindowRecord(wn,PUr);    
  end;
  PUDClassUnitZvalEFAfter = res;
  RETURN;
END;

//spec menus
global
procedure OpenBatchSPLPUDsm()
BEGIN
  row SLPVc PUrw;
  record SLPVc PUr;
  record BatchTextVc BatchTextr;
  Integer wn,nwn,rownr;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(PUr,rownr,PUrw);
    BatchTextr.ArtCode = PUrw.ArtCode;
    BatchTextr.SerialNr = PUrw.SerialNr;
    if (ReadFirstMain(BatchTextr,2,true)) then begin
      nwn = OpenWindow("BatchTextDClass",0,0,"","",BatchTextr);
    end;
  end;
  RETURN;
END;

global
procedure UpdateMarkPUDsm()
BEGIN
  Integer wn;
  Integer insertmode,updatemode;
  record SLPVc PUr;
  row SLPVc PUrw;
  Integer rwcnt;

  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  if (WindowState(wn)==insertmode) then begin
    goto LUpdateMarkPUDsm;
  end;
  rwcnt = MatRowCnt(PUr);
  ClearRow(PUr,PUrw,3);
  PUrw.Sign = CurrentUser;
  PUrw.UpdDate = CurrentDate;
  MatRowPut(PUr,rwcnt,PUrw);
  PutWindowRecord(wn,PUr);
LUpdateMarkPUDsm: ;
  RETURN;
END;

global 
function Boolean PUDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;

  if (WindowState(wn)==1) then begin//Rs_insert
    res = true;
  end;
  PUDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean PUDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record SLPVc PUr;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,PUr);
    if (PUr.OKFlag!=0) then begin res = false; end;
  end;
  PUDClassDeleteRowTest = res;
  RETURN;
END;



global 
function Boolean PUDClassVECodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    VEr.Code = PUr.VECode;
    if (ReadFirstMain(VEr,1,true)) then begin
      PUr.VEName = VEr.Name;
      PUr.Objects = VEr.VEObjects;
      PUr.CurncyCode = VEr.VECurncyCode;
      curcode = PUr.CurncyCode;
      GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
      PUr.CurncyCode = curcode;
      PUr.FrRate = fr;
      PUr.ToRateB1 = to1; 
      PUr.ToRateB2 = to2;
      PUr.BaseRate1 = br1;
      PUr.BaseRate2 = br2;      
    end;    
    PutWindowRecord(wn,PUr);
  end;
  PUDClassVECodeEFAfter = true;
  return;
end;
 
function Boolean PUDClassTransDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    if (DateWarned(PUr.TransDate,"SLPVc")) then begin
      MessageBox(1045,"");
    end;
    if (WarnOldRecords(PUr.TransDate,"SLPVc",PUr.SerNr)) then begin
      MessageBox(2020,"");
    end;
    curcode = PUr.CurncyCode;
    GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
    PUr.CurncyCode = curcode;
    PUr.FrRate = fr;
    PUr.ToRateB1 = to1; 
    PUr.ToRateB2 = to2;
    PUr.BaseRate1 = br1;
    PUr.BaseRate2 = br2;    
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassTransDateEFAfter = true;
  return;
end;
 
function Boolean PUDClassCurncyCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    curcode = PUr.CurncyCode;
    GetFullCurncyRate(curcode,PUr.TransDate,fr,to1,to2,br1,br2);
    PUr.CurncyCode = curcode;
    PUr.FrRate = fr;
    PUr.ToRateB1 = to1; 
    PUr.ToRateB2 = to2;
    PUr.BaseRate1 = br1;
    PUr.BaseRate2 = br2;    
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCurncyCodeEFAfter = true;
  return;
end;

global 
function Boolean PUDClassFrRateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassFrRateEFAfter = true;
  return;
end;

global 
function Boolean PUDClassToRateB1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassToRateB1EFAfter = true;
  return;
end;

global 
function Boolean PUDClassToRateB2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassToRateB2EFAfter = true;
  return;
end;

global 
function Boolean PUDClassBaseRate1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassBaseRate1EFAfter = true;
  return;
end;

global 
function Boolean PUDClassBaseRate2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    PURecalcCost(PUr);
    PutWindowRecord(wn,PUr);
  end;
  PUDClassBaseRate2EFAfter = true;
  return;
end;

global 
function Boolean PUDClassCostPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record SLPVc PUr;
  row SLPVc PUrw;
  Boolean chsum,chrsum;
  val t,t1,t2,cc,vat,bas,s;
  string 255 tstr;
  string 2 vatcode;
  record SysFormatBlock SysFormatRec;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PUr);
    DeselectWindow(wn,false);
    BlockLoad(SysFormatRec);
    MatRowGet(PUr,rownr,PUrw);    
    bas = MulRateToBase1(PUr.CurncyCode,PUrw.UPrice,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);
    if (PUr.InclVAT==1) then begin
      if (nonblank(PUrw.VATCode)) then begin
        vatcode = PUrw.VATCode;
      end else begin
        GetItemVATCode(PUrw.ArtCode,PUr.ExportFlag,vatcode,false);
      end;
      MulVATIV(vatcode,bas,vat,t1,PUr.InclVAT,0);
      bas = bas - vat;
    end;
    tstr = PUrw.Extra;
    if (Mid(tstr,len(tstr),1)=="%") then begin
      t = PUrw.CostPrice - PUrw.ShipCost;
      t = PUrw.CostPrice - PUrw.RowCost1;
      t = PUrw.CostPrice - PUrw.RowCost2;
      t = PUrw.CostPrice - PUrw.RowCost3;
      t = PUrw.CostPrice - PUrw.RowCost4;
      t = PUrw.CostPrice - PUrw.RowCost5;
      PUCalcPerc(PUrw.UPrice,PUrw.CustomsCost,cc);
      t = t - cc;
      t2 = t*100;
      bas = t2/bas;
      bas = bas - 100;
      PUrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      PUrw.Extra = PUrw.Extra & "%";
    end else begin
      bas = PUrw.CostPrice - bas;
      bas = bas - PUrw.ShipCost;
      bas = bas - PUrw.RowCost1;
      bas = bas - PUrw.RowCost2;
      bas = bas - PUrw.RowCost3;
      bas = bas - PUrw.RowCost4;
      bas = bas - PUrw.RowCost5;
      PUCalcPerc(PUrw.UPrice,PUrw.CustomsCost,cc);
      bas = bas - cc;
      PUrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    end;
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,bas,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = bas;
      PUrw.Sum = s;
//      PUrw.UPrice = DivRateToBase1(PUr.CurncyCode,bas,PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,DefaultCurRoundOff);    
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    if (chsum) then begin
      PUSumUp(PUr);
    end;
    PutWindowRecord(wn,PUr);
  end;
  PUDClassCostPriceEFAfter = true;
  return;
end;

global
function Boolean SPLDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CostPrice": res = SPLDClassCostPriceEFAfter(wn,fn,rownr,changed);
    case "BaseRate2": res = SPLDClassBaseRate2EFAfter(wn,fn,rownr,changed);
    case "BaseRate1": res = SPLDClassBaseRate1EFAfter(wn,fn,rownr,changed);
    case "ToRateB2": res = SPLDClassToRateB2EFAfter(wn,fn,rownr,changed);
    case "ToRateB1": res = SPLDClassToRateB1EFAfter(wn,fn,rownr,changed);
    case "FrRate": res = SPLDClassFrRateEFAfter(wn,fn,rownr,changed);
    case "CurncyCode": res = SPLDClassCurncyCodeEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = SPLDClassTransDateEFAfter(wn,fn,rownr,changed);
    case "VECode": res = SPLDClassVECodeEFAfter(wn,fn,rownr,changed);
    case "UnitZval": res = SPLDClassUnitZvalEFAfter(wn,fn,rownr,changed);
    case "UnitYval": res = SPLDClassUnitYvalEFAfter(wn,fn,rownr,changed);
    case "UnitXval": res = SPLDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = SPLDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "Quant": res = SPLDClassQuantEFAfter(wn,fn,rownr,changed);
    case "Sum": res = SPLDClassSumEFAfter(wn,fn,rownr,changed);
    case "UPrice": res = SPLDClassUPriceEFAfter(wn,fn,rownr,changed);
    case "ShipCost": res = SPLDClassShipCostEFAfter(wn,fn,rownr,changed);
    case "Cost1": res = SPLDClassCost1EFAfter(wn,fn,rownr,changed);
    case "Cost2": res = SPLDClassCost2EFAfter(wn,fn,rownr,changed);
    case "Cost3": res = SPLDClassCost3EFAfter(wn,fn,rownr,changed);
    case "Cost4": res = SPLDClassCost4EFAfter(wn,fn,rownr,changed);
    case "Cost5": res = SPLDClassCost5EFAfter(wn,fn,rownr,changed);
    case "RowCost1": res = SPLDClassRowCost1EFAfter(wn,fn,rownr,changed);
    case "RowCost2": res = SPLDClassRowCost2EFAfter(wn,fn,rownr,changed);
    case "RowCost3": res = SPLDClassRowCost3EFAfter(wn,fn,rownr,changed);
    case "RowCost4": res = SPLDClassRowCost4EFAfter(wn,fn,rownr,changed);
    case "RowCost5": res = SPLDClassRowCost5EFAfter(wn,fn,rownr,changed);
    case "Extra": res = SPLDClassExtraEFAfter(wn,fn,rownr,changed);
    case "CustomsCost": res = SPLDClassCustomsCostEFAfter(wn,fn,rownr,changed);
    case "VATCode": res = SPLDClassVATCodeEFAfter(wn,fn,rownr,changed);
  end;
  SPLDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean  PUDClassInclVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record SLPVc PUr;
 
  res = true; 
  DeselectWindow(wn,false);
  if (WindowState(wn)==2) then begin
    GetPrevWindowRecord(wn,PUr); 
  end else begin
    GetWindowRecord(wn,PUr); 
  end;
  if (PUr.OKFlag==0) then begin
    SLPVc_InclVATButtonAction(PUr);
    PutWindowRecord(wn,PUr); 
    SelectWindow(wn);
  end else begin
    res = false;
  end;
  PUDClassInclVATButtonAction = res;
  return;
end;

global
function Boolean PUDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record SLPVc PUr;
 
  res = true;  
  switch (WindowState(wn)) begin
    case 0:// Rs_normal
      GetWindowRecord(wn,PUr);
      if (PUr.OKFlag!=0) then begin res = false; end;
    case 2:// Rs_update
      GetPrevWindowRecord(wn,PUr);
      if (PUr.OKFlag!=0) then begin res = false; end;    
  end;  
  PUDClassOKFlagButtonAction = res;
  return;
end;
*/
global
function string 40 SPLDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
  end;
  SPLDClassSpecPasteName = psname;
  return;
end;
