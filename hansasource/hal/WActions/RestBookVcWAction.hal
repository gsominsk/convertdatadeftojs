remote function Boolean ReadRestOpenHours(string,var record RestOpenHoursVc);
external function string 40 ResSClassSpecPName(string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
remote procedure RestBookingVc_PasteResCode(var record RestBookingVc);
external function LongInt AddTime(Time,LongInt,var Time);
external function LongInt TimeToMinutes(Time);

function Boolean RestBookingDClassCUCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record RestBookingVc RestBookingr;
  record CUVc CUr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RestBookingr);
    CUr.Code = RestBookingr.CUCode;
    if (ReadFirstMain(CUr,1,true)) then begin
      RestBookingr.CUName = CUr.Name;
      RestBookingr.Phone = CUr.Phone;
    end else begin
      Beep;
    end;
    PutWindowRecord(wn,RestBookingr);
  end;
  RestBookingDClassCUCodeEFAfter = res;
  RETURN;
END;

function Boolean RestBookingDClassContactEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record RestBookingVc RestBookingr;
  record CUVc ContactCUr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RestBookingr);
    if (FindCustomerRelation(RestBookingr.CUCode,RestBookingr.Contact,ContactCUr)) then begin
      RestBookingr.Phone = ContactCUr.Phone;
    end else begin
      Beep;
    end;
    PutWindowRecord(wn,RestBookingr);
  end;
  RestBookingDClassContactEFAfter = res;
  RETURN;
END;

function Boolean RestBookingDClassBookStartEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record RestOpenHoursVc ROHr;
  record RestBookingVc RestBookingr;
  LongInt tim;
  Time thetime;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RestBookingr);
    ReadRestOpenHours(RestBookingr.MachineName,ROHr);
    tim = TimeToMinutes(ROHr.AvrTimePerPerson);
    tim = AddTime(RestBookingr.BookStart,tim,thetime);
    RestBookingr.BookEnd = thetime;
    PutWindowRecord(wn,RestBookingr);
  end;
  RestBookingDClassBookStartEFAfter = res;
  RETURN;
END;

function Boolean RestBookingDClassResCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record RestBookingVc RestBookingr;
  record LocalMachineBlock LMb;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,RestBookingr);
    RestBookingVc_PasteResCode(RestBookingr);
    if (blank(RestBookingr.ResLoc)) then begin
      BlockLoad(LMb);
      RestBookingr.ResLoc = LMb.ResLoc;
    end;
    PutWindowRecord(wn,RestBookingr);
  end;
  RestBookingDClassResCodeEFAfter = res;
  RETURN;
END;

global
function Boolean RestBookingDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CUCode": res = RestBookingDClassCUCodeEFAfter(wn,changed!=0);
    case "Contact": res = RestBookingDClassContactEFAfter(wn,changed!=0);
    case "ResCode": res = RestBookingDClassResCodeEFAfter(wn,changed!=0);
    case "BookStart": res = RestBookingDClassBookStartEFAfter(wn,changed!=0);
  end;
  RestBookingDClassAfterEditField = res;
  RETURN;
END;

global
function string 40 RestBookingDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ResCode": psname = ResSClassSpecPName(defpsname);
  end;
  RestBookingDClassSpecPasteName = psname;
  return;
end;

global
procedure RestBookingDsm()
BEGIN
  record RcVc RepSpec;
  record RestBookingVc RestBookingr;
  Date thedat;

  GetWindowRecord(CurWindow,RestBookingr);
  if (nonblankdate(RestBookingr.BookDate)) then begin
    thedat = RestBookingr.BookDate;
  end else begin
    thedat = CurrentDate;
  end;
  ReportDefaults(RepSpec,"RestBookingRClass");
  RepSpec.Period2Str = thedat;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & thedat;
  RepSpec.sStartDate = thedat;
  RepSpec.sEndDate = thedat;
  RepSpec.repname = "RestBookingRn";
  RepSpec.UsedOnly = 0;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure RestBookingLsm()
BEGIN
  record RcVc RepSpec;
  Date thedat;

  thedat = CurrentDate;
  ReportDefaults(RepSpec,"RestBookingRClass");
  RepSpec.Period2Str = thedat;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & thedat;
  RepSpec.sStartDate = thedat;
  RepSpec.sEndDate = thedat;
  RepSpec.repname = "RestBookingRn";
  RepSpec.UsedOnly = 0;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

function boolean BarMenuDClassArtCodeEFAfter(integer wn,integer fn,integer rownr,integer changed)
begin
  boolean res;
  record BarMenuVc BarMenur;
  record INVc INr;
  row BarMenuVc BarMenurw;
  
  getwindowrecord(wn,BarMenur);
  MatRowGet(BarMenur,rownr,BarMenurw);
  INr.Code = BarMenurw.ArtCode;
  if (readfirstmain(INr,1,true)) then begin
    BarMenurw.Name = INr.Name;
    matrowput(BarMenur,rownr,BarMenurw);
    putwindowrecord(wn,BarMenur);
  end;
  
  BarMenuDClassArtCodeEFAfter = res;
return;
end;

global
function boolean BarMenuDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  if (changed<>0) then begin
    switch (fieldname) begin
      case "ArtCode": res = BarMenuDClassArtCodeEFAfter(wn,fn,rownr,changed);
    end;
  end;
  BarMenuDClassAfterEditField = res;
  RETURN;
END;

