external function Boolean GetAccName(string,var string,Integer);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote procedure DanTRVc_PasteCurCredVal(var record DanTRVc,Integer);
remote procedure DanTRVc_PasteCurDebVal(var record DanTRVc,Integer);
remote procedure DanTRVc_PasteCurncy(var record DanTRVc,Integer);
remote procedure DanTRVc_PasteTransDate(var record DanTRVc,Integer);

external procedure GetPayModeAccNumber(string,var string);
remote procedure GetAccountSumDanTR(string,Date,var val);

global
procedure DanTRSumup(var record DanTRVc DanTRr)
BEGIN
  Integer i,rwcnt;
  row DanTRVc DanTRrw;
  
  DanTRr.TotSum = blankval;
  rwcnt = MatRowCnt(DanTRr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(DanTRr,i,DanTRrw);
    if ((DanTRrw.stp==1) and (DanTRrw.ovst==0)) then begin
      if ((DanTRrw.DebVal!=0) or (DanTRrw.CredVal!=0)) then begin
        DanTRr.TotSum = DanTRr.TotSum + DanTRrw.DebVal;        
        DanTRr.TotSum = DanTRr.TotSum - DanTRrw.CredVal;
      end;
      if (nonblank(DanTRrw.AccNumber2)) then begin
        DanTRr.TotSum = DanTRr.TotSum - DanTRrw.DebVal;        
        DanTRr.TotSum = DanTRr.TotSum + DanTRrw.CredVal;
      end;
    end;
  end;
  RETURN;
END;

global
procedure UpdateAccBals(var record DanTRVc DanTRp) 
BEGIN
  record DanTRSetVc DanTRSetr;
  row DanTRVc DanTRrw;
  val tv;
  Integer i,rwcnt;
  string 10 AccNumber1,AccNumber2;
  val DebVal,CredVal;
  
  DanTRSetr.UserCode = CurrentUser;
  if (ReadFirstMain(DanTRSetr,1,true)) then begin  
    GetAccName(DanTRSetr.AccNumber1,DanTRp.AccName1,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber1,DanTRp.TransDate,tv);
    DanTRp.AccBal1 = tv;
    GetAccName(DanTRSetr.AccNumber2,DanTRp.AccName2,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber2,DanTRp.TransDate,tv);
    DanTRp.AccBal2 = tv;
    GetAccName(DanTRSetr.AccNumber3,DanTRp.AccName3,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber3,DanTRp.TransDate,tv);
    DanTRp.AccBal3 = tv;
    GetAccName(DanTRSetr.AccNumber4,DanTRp.AccName4,20);  
    GetAccountSumDanTR(DanTRSetr.AccNumber4,DanTRp.TransDate,tv);
    DanTRp.AccBal4 = tv;
    rwcnt = MatRowCnt(DanTRp);
    for (i=0;i<rwcnt;i=i+1) begin    
      MatRowGet(DanTRp,i,DanTRrw);
      AccNumber1 = DanTRrw.AccNumber1;
      AccNumber2 = DanTRrw.AccNumber2;
      DebVal = DanTRrw.DebVal;
      CredVal = DanTRrw.CredVal;
      if (AccNumber1==DanTRSetr.AccNumber1) then begin
        DanTRp.AccBal1 = DanTRp.AccBal1 + DebVal;
        DanTRp.AccBal1 = DanTRp.AccBal1 - CredVal;
      end;
      if (AccNumber1==DanTRSetr.AccNumber2) then begin
        DanTRp.AccBal2 = DanTRp.AccBal2 + DebVal;
        DanTRp.AccBal2 = DanTRp.AccBal2 - CredVal;
      end;
      if (AccNumber1==DanTRSetr.AccNumber3) then begin
        DanTRp.AccBal3 = DanTRp.AccBal3 + DebVal;
        DanTRp.AccBal3 = DanTRp.AccBal3 - CredVal;
      end;
      if (AccNumber1==DanTRSetr.AccNumber4) then begin
        DanTRp.AccBal4 = DanTRp.AccBal4 + DebVal;
        DanTRp.AccBal4 = DanTRp.AccBal4 - CredVal;
      end;
      if (AccNumber2==DanTRSetr.AccNumber1) then begin
        DanTRp.AccBal1 = DanTRp.AccBal1 - DebVal;
        DanTRp.AccBal1 = DanTRp.AccBal1 + CredVal;
      end;
      if (AccNumber2==DanTRSetr.AccNumber2) then begin
        DanTRp.AccBal2 = DanTRp.AccBal2 - DebVal;
        DanTRp.AccBal2 = DanTRp.AccBal2 + CredVal;
      end;
      if (AccNumber2==DanTRSetr.AccNumber3) then begin
        DanTRp.AccBal3 = DanTRp.AccBal3 - DebVal;
        DanTRp.AccBal3 = DanTRp.AccBal3 + CredVal;
      end;
      if (AccNumber2==DanTRSetr.AccNumber4) then begin
        DanTRp.AccBal4 = DanTRp.AccBal4 - DebVal;
        DanTRp.AccBal4 = DanTRp.AccBal4 + CredVal;
      end;    
    end;
  end;  
  RETURN;
END;

function
Boolean CheckValueSide(string accnumber,Integer credit)
BEGIN
  Boolean res;
  record AccVc Accr;
  
  Accr.AccNumber = accnumber;
  if (ReadFirstMain(Accr,1,true)) then begin
    if (credit==0) then begin
      if (Accr.NVD!=0) then begin
        res = true;
      end;
    end;  
    if (credit==1) then begin
      if (Accr.NVC!=0) then begin
        res = true;
      end;
    end;  
  end;
  CheckValueSide = res;
  RETURN;
END;

function Boolean DanTRDClassDebValEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  row DanTRVc DanTRrw;
  Integer jj;
  
  
  if (changed!=0) then begin
    GetWindowRecord(wn,DanTRr);
    MatRowGet(DanTRr,rownr,DanTRrw);  
    if (nonblank(DanTRrw.AccNumber1)) then begin
      if (CheckValueSide(DanTRrw.AccNumber1,0)) then begin
        if (DanTRrw.DebVal!=blankval) then begin
          DanTRrw.CredVal = blankval;
        end;
      end else begin
        DanTRrw.CredVal = blankval;
        DanTRrw.DebVal = blankval;
      end;
    end;
    MatRowPut(DanTRr,rownr,DanTRrw);   
    DanTRSumup(DanTRr); 
    UpdateAccBals(DanTRr);
    PutWindowRecord(wn,DanTRr);
  end;  
  DanTRDClassDebValEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassCredValEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  row DanTRVc DanTRrw;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,DanTRr);
    MatRowGet(DanTRr,rownr,DanTRrw);  
    if (nonblank(DanTRrw.AccNumber1)) then begin
      if (CheckValueSide(DanTRrw.AccNumber1,1)) then begin
        if (DanTRrw.CredVal!=blankval) then begin
          DanTRrw.DebVal = blankval;
        end;
      end else begin
        DanTRrw.CredVal = blankval;
        DanTRrw.DebVal = blankval;
      end;
    end;
    MatRowPut(DanTRr,rownr,DanTRrw);
    DanTRSumup(DanTRr); 
    UpdateAccBals(DanTRr);
    PutWindowRecord(wn,DanTRr);
  end;  
  DanTRDClassCredValEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassPayModeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res,sametrf;
  record DanTRVc DanTRr;
  row DanTRVc DanTRrw;
  row DanTRVc prevDanTRrw;
  string 255 tstr;
  
  GetWindowRecord(wn,DanTRr);
  MatRowGet(DanTRr,rownr,DanTRrw);  
  if (nonblank(DanTRrw.PayMode)) then begin
    GetPayModeAccNumber(DanTRrw.PayMode,tstr);
    DanTRrw.AccNumber2 = tstr;
    if (rownr>0) then begin
      MatRowGet(DanTRr,rownr-1,prevDanTRrw);  
      if ((blank(prevDanTRrw.AccNumber1)) or (blank(prevDanTRrw.AccNumber2))) then begin
        if (blank(DanTRrw.AccNumber1)) then begin
          sametrf = true;
        end;
      end;
    end;
    if (sametrf) then begin
      DanTRrw.TransNr = prevDanTRrw.TransNr;
    end else begin
      DanTRrw.TransNr = rownr + 1;
    end;    
    MatRowPut(DanTRr,rownr,DanTRrw);    
    UpdateAccBals(DanTRr);
    DanTRSumup(DanTRr); 
  end;
  PutWindowRecord(wn,DanTRr);
  DanTRDClassPayModeEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassAccNumber1EFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res,sametrf;
  record DanTRVc DanTRr;
  row DanTRVc DanTRrw;
  row DanTRVc prevDanTRrw;
  string 255 tstr;
  record AccVc Accr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,DanTRr);
    MatRowGet(DanTRr,rownr,DanTRrw);  
    if (rownr>0) then begin
      MatRowGet(DanTRr,rownr-1,prevDanTRrw);  
      if ((blank(prevDanTRrw.AccNumber1)) or (blank(prevDanTRrw.AccNumber2))) then begin
        if (blank(DanTRrw.AccNumber2)) then begin
          sametrf = true;
        end;
      end;
    end;
    if (DanTRrw.DebVal!=blankval) then begin
      if (CheckValueSide(DanTRrw.AccNumber1,0)==false) then begin
        DanTRrw.DebVal = blankval;
      end;
    end;  
    if (DanTRrw.CredVal!=blankval) then begin
      if (CheckValueSide(DanTRrw.AccNumber1,1)==false) then begin
        DanTRrw.CredVal = blankval;
      end;
    end;
    if (sametrf) then begin
      DanTRrw.TransNr = prevDanTRrw.TransNr;
    end else begin
      if (DanTRrw.TransNr<=0) then begin
        DanTRrw.TransNr = rownr + 1;
      end;
    end;
    Accr.AccNumber = DanTRrw.AccNumber1;
    if (ReadFirstMain(Accr,1,true)) then begin
      DanTRrw.VATCode = Accr.VATCode;
      DanTRrw.Curncy = Accr.Curncy;
    end;
    MatRowPut(DanTRr,rownr,DanTRrw);      
    DanTRVc_PasteCurncy(DanTRr,rownr);
    UpdateAccBals(DanTRr);
    PutWindowRecord(wn,DanTRr);
  end;  
  DanTRDClassAccNumber1EFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassAccNumber2EFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res,sametrf;
  record DanTRVc DanTRr;
  row DanTRVc DanTRrw;
  row DanTRVc prevDanTRrw;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,DanTRr);
    MatRowGet(DanTRr,rownr,DanTRrw);  
    if (rownr>0) then begin
      MatRowGet(DanTRr,rownr-1,prevDanTRrw);  
      if ((blank(prevDanTRrw.AccNumber1)) or (blank(prevDanTRrw.AccNumber2))) then begin
        if (blank(DanTRrw.AccNumber1)) then begin
          sametrf = true;
        end;
      end;
    end;
    if (DanTRrw.DebVal!=blankval) then begin
      if (CheckValueSide(DanTRrw.AccNumber2,0)==false) then begin
        DanTRrw.DebVal = blankval;
      end;
    end;  
    if (DanTRrw.CredVal!=blankval) then begin
      if (CheckValueSide(DanTRrw.AccNumber2,1)==false) then begin
        DanTRrw.CredVal = blankval;
      end;
    end;
    if (sametrf) then begin
      DanTRrw.TransNr = prevDanTRrw.TransNr;
    end else begin
      DanTRrw.TransNr = rownr + 1;
    end;
    MatRowPut(DanTRr,rownr,DanTRrw);      
    DanTRVc_PasteCurncy(DanTRr,rownr);
    UpdateAccBals(DanTRr);
    PutWindowRecord(wn,DanTRr);
  end;  
  DanTRDClassAccNumber2EFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassInvoiceNrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  row DanTRVc DanTRrw;
  string 255 tstr;
  string 2 vatcode;
  record ARVc ARr;
  record APVc APr;
  record IVVc IVr;
  record VIVc VIr;
  val frrate,torate1,torate2,baserate1,baserate2;
  string 20 Curncy;
  Date td;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,DanTRr);
    MatRowGet(DanTRr,rownr,DanTRrw);      
    if (DanTRrw.InvoiceNr==-1) then begin goto LDanTRDClassInvoiceNrEFAfter; end;
    td = DanTRrw.RowTransDate;
    if (blankdate(td)) then begin
      td = DanTRr.TransDate;
    end;
    switch (DanTRrw.Typ) begin
      case 0: ;
      case 1:
        ARr.InvoiceNr = DanTRrw.InvoiceNr;
        if (ReadFirstMain(ARr,1,true)) then begin
          DanTRrw.CompCode = ARr.CustCode;          
          IVr.SerNr = DanTRrw.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            DanTRrw.Text = ARr.CustCode & " " & IVr.Addr0; 
            DanTRrw.AccNumber1 = IVr.ARAcc;          
            DanTRrw.Objects = IVr.Objects;          
            curncy = ARr.ARCurncyCode;
            frrate = IVr.FrRate;
            torate1 = IVr.ToRateB1;
            torate2 = IVr.ToRateB2;
            baserate1 = IVr.BaseRate1;
            baserate2 = IVr.BaseRate2;
          end else begin
            DanTRrw.Text = ARr.CustCode; // CON          
            curncy = ARr.ARCurncyCode;
            GetFullCurncyRate(curncy,td,frrate,torate1,torate2,baserate1,baserate2);
          end;
          if (ARr.RVal>0) then begin
            DanTRrw.CredVal = ARr.RVal;
          end else begin
            DanTRrw.CredVal = -ARr.RVal;
          end;
        end else begin
          ClearRow(DanTRr,DanTRrw,1);
          DanTRrw.InvoiceNr = -1;
          Beep;
        end;      
      case 2:
        APr.SerNr = DanTRrw.InvoiceNr;
        if (ReadFirstMain(APr,1,true)) then begin
          DanTRrw.CompCode = APr.VECode;
          VIr.SerNr=DanTRrw.InvoiceNr;
          if (ReadFirstMain(VIr,1,true)) then begin
            DanTRrw.Text = APr.VECode & " " & VIr.VEName; 
            DanTRrw.AccNumber1 = VIr.APAcc;          
            DanTRrw.Objects = VIr.Objects;          
            curncy = APr.CurncyCode;
            frrate = VIr.FrRate;
            torate1 = VIr.ToRateB1;
            torate2 = VIr.ToRateB2;
            baserate1 = VIr.BaseRate1;
            baserate2 = VIr.BaseRate2;
          end else begin
            DanTRrw.Text = APr.VECode; // CON          
            curncy = APr.CurncyCode;
            GetFullCurncyRate(curncy,td,frrate,torate1,torate2,baserate1,baserate2);
          end;
          if (APr.RVal>0) then begin
            DanTRrw.DebVal = APr.RVal;
          end else begin
            DanTRrw.DebVal = -APr.RVal;
          end;
        end else begin
          ClearRow(DanTRr,DanTRrw,1);
          DanTRrw.InvoiceNr = -1;
          Beep;
        end;      
    end;
    DanTRrw.Curncy = curncy;
    DanTRrw.FrRate = frrate;
    DanTRrw.ToRateB1 = torate1;
    DanTRrw.ToRateB2 = torate2;
    DanTRrw.BaseRate1 = baserate1;
    DanTRrw.BaseRate2 = baserate2;

    MatRowPut(DanTRr,rownr,DanTRrw);      
    UpdateAccBals(DanTRr);
    DanTRSumup(DanTRr); 
    PutWindowRecord(wn,DanTRr);
  end;  
LDanTRDClassInvoiceNrEFAfter:;  
  DanTRDClassInvoiceNrEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassCurncyEFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurncy(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassCurncyEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassCurDebValEFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurDebVal(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassCurDebValEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassCurCredValEFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurCredVal(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassCurCredValEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassFrRateEFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurDebVal(DanTRr,rownr);
      DanTRVc_PasteCurCredVal(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassFrRateEFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassToRateB1EFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurDebVal(DanTRr,rownr);
      DanTRVc_PasteCurCredVal(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassToRateB1EFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassToRateB2EFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurDebVal(DanTRr,rownr);
      DanTRVc_PasteCurCredVal(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassToRateB2EFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassBaseRate1EFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurDebVal(DanTRr,rownr);
      DanTRVc_PasteCurCredVal(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassBaseRate1EFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassBaseRate2EFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    if (rownr>=0) then begin
      DanTRVc_PasteCurDebVal(DanTRr,rownr);
      DanTRVc_PasteCurCredVal(DanTRr,rownr);
      PutWindowRecord(wn,DanTRr);
    end;
  end;
  DanTRDClassBaseRate2EFAfter = res;
  RETURN;
END;

function Boolean DanTRDClassTransDateEFAfter(Integer wn, Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record DanTRVc DanTRr;
  
  if (changedf) then begin
    GetWindowRecord(wn,DanTRr);
    DanTRVc_PasteTransDate(DanTRr,rownr);
    PutWindowRecord(wn,DanTRr);
  end;
  DanTRDClassTransDateEFAfter = res;
  RETURN;
END;

global
function Boolean DanTRDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "InvoiceNr": res = DanTRDClassInvoiceNrEFAfter(wn,fn,rownr,changed);
    case "AccNumber1": res = DanTRDClassAccNumber1EFAfter(wn,fn,rownr,changed);
    case "AccNumber2": res = DanTRDClassAccNumber2EFAfter(wn,fn,rownr,changed);
    case "DebVal": res = DanTRDClassDebValEFAfter(wn,fn,rownr,changed);
    case "CredVal": res = DanTRDClassCredValEFAfter(wn,fn,rownr,changed);
    case "PayMode": res = DanTRDClassPayModeEFAfter(wn,fn,rownr,changed);
    case "Curncy": res = DanTRDClassCurncyEFAfter(wn,rownr,changed!=0);
    case "CurDebVal": res = DanTRDClassCurDebValEFAfter(wn,rownr,changed!=0);
    case "CurCredVal": res = DanTRDClassCurCredValEFAfter(wn,rownr,changed!=0);
    case "TransDate": res = DanTRDClassTransDateEFAfter(wn,rownr,changed!=0);
    case "RowTransDate": res = DanTRDClassTransDateEFAfter(wn,rownr,changed!=0);
    case "FrRate": res = DanTRDClassFrRateEFAfter(wn,rownr,changed!=0);
    case "ToRateB1": res = DanTRDClassToRateB1EFAfter(wn,rownr,changed!=0);
    case "ToRateB2": res = DanTRDClassToRateB2EFAfter(wn,rownr,changed!=0);
    case "BaseRate1": res = DanTRDClassBaseRate1EFAfter(wn,rownr,changed!=0);
    case "BaseRate2": res = DanTRDClassBaseRate2EFAfter(wn,rownr,changed!=0);
  end;
  DanTRDClassAfterEditField = res;
  RETURN;
END;

global
function string 40 DanTRDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  record DanTRVc DanTRr;
  row DanTRVc DanTRrw;
  Integer rownr;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "InvoiceNr":
      GetWindowRecord(wn,DanTRr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(DanTRr,rownr,DanTRrw);
      end;
      switch (DanTRrw.Typ) begin
        case 1: psname = "ARSClass";
        case 2: psname = "APSClass";
        otherwise psname = "";
      end;
    case "CompCode":
      GetWindowRecord(wn,DanTRr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(DanTRr,rownr,DanTRrw);
      end;
      switch (DanTRrw.Typ) begin
        case 1: psname = "CUSClass";
        case 2: psname = "VESClass";
        otherwise psname = "";
      end;
  end;
  DanTRDClassSpecPasteName = psname;
  return;
end;

global
procedure PrintDanTR(Integer wn,Boolean previewf)
BEGIN
  record DanTRVc DTr;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,DTr);
  RepSpec.repname = "DanTRRn";
  
  if (previewf) then begin
    RepSpec.Media = mtScreen;
  end else begin
    RepSpec.Media = mtPrinter;
  end;
  RepSpec.JobDf = 0;
  RepSpec.f1 = DTr.Number;
  RepSpec.flags[2] = 1;
  RunReport(RepSpec,0);
  RETURN;
END;