external procedure ActVcRecordDefClient(var record ActVc);
remote updating function Integer PasteSVOInRet(var record RetVc,LongInt,string);
remote updating function LongInt RecordAction_raPasteSVOInPO(record SVOVc,var record POVc,var Integer,var string);
remote updating function Integer RecordAction_raPasteSVOInDispatch(record SVOVc,var record DispatchVc);
remote updating function Integer RecordAction_raPasteSVOInOffHire(record SVOVc,var record OffHireVc);
remote procedure SVOVc_PasteDelAddrCode(var record SVOVc);
external function string 40 DelAddrSClassSpecPName(string);
external procedure IVOpenPrepExists(string);
external function Boolean FindCustomerRelation(string,string,var record CUVc);
remote function Boolean SVOVc_PasteQuant(var record SVOVc,Integer);
remote function Boolean SVOVc_PasteArtCode(var record SVOVc,Integer,Boolean);
remote procedure SVOVc_PasteContractNr(var record SVOVc,Integer);
external procedure RemoveOldUserObjects(string,var string);
external procedure GetSalesGroup(string,var string);
remote procedure SVOVc_PasteTransDate(var record SVOVc);
remote updating function Boolean MakeActFromSVO(record SVOVc,var record ActVc,Integer);
remote updating function LongInt RecordAction_raPasteSVOInInv(var record SVOVc,var record IVVc);
remote updating function LongInt RecordAction_raPasteSVOInSVGM(record SVOVc,var record SVGMVc);
remote function Boolean SVO_PasterSerialNr(var record SVOVc,Integer,var string);
remote function Boolean PasteInvoiceToCodeInSVO(var record SVOVc,var string);
remote function Boolean PasteCUInSVO(var record SVOVc,string,var string);
external procedure SetupCustPS2Rn(string,var record RcVc);
external updating procedure RecordActionSVO_Print(var record SVOVc,string,Boolean);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
remote updating function LongInt RecordAction_raPasteSVOInWS(var record SVOVc,var record WSVc);
external updating function boolean GSXLogin(string,string,string,var string,var string);
external function boolean GSXWarrantyStatus(string,string,date,array string,integer,var record SVOSerVc,var record NotepadVc,var record NotepadVc,var string);
external function Boolean GSXCreateCarryInRepair(string,string,var record SVOVc,var string);
remote updating function boolean RecordAction_raPasteSVOInQT(var record QTVc,record SVOVc);
external function Boolean OpenContactRecord(string,string);

function Boolean SVODClassSerialNrEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVOVc SVOr;
  string 255 warning;

  if (changed!=0) then begin
    GetWindowRecord(wn,SVOr);    
    DeselectWindow(wn,false);
    if (SVO_PasterSerialNr(SVOr,rownr,warning)) then begin
      PutWindowRecord(wn,SVOr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
    end;
  end;
  SVODClassSerialNrEFAfter = true;
  return;
end;

global 
function Boolean SVODClassCurncyCodeEFAfter(Integer wn,Integer changedf)
begin
  record SVOVc SVOr;
  val fr,to1,to2,br1,br2;
  Boolean chsum,chrsum;
  val t;
  string 6 crncy;

  if (changedf!=0) then begin  
    chsum = false;
    chrsum = false;
    GetWindowRecord(wn,SVOr);
    DeselectWindow(wn,false);
    crncy = SVOr.CurncyCode;
    GetFullCurncyRate(crncy,SVOr.TransDate,fr,to1,to2,br1,br2);
    SVOr.CurncyCode = crncy;
    SVOr.FrRate = fr;
    SVOr.ToRateB1 = to1;
    SVOr.ToRateB2 = to2;
    SVOr.BaseRate1 = br1;
    SVOr.BaseRate2 = br2;
//    t = MulRateToBase1(SVOr.CurncyCode,t,fr,to1,to2,br1,br2,DefaultCurRoundOff);
    PutWindowRecord(wn,SVOr);   
  end; 
  SVODClassCurncyCodeEFAfter = true;
  return;
end;


function Boolean SVODClassCustCodeEFAfter(Integer wn,Integer changed)
BEGIN
  record SVOVc SVOr;
  string 255 warning;

  GetWindowRecord(wn,SVOr);    
  if ((changed!=0) or ((blank(SVOr.Addr0)) and (nonblank(SVOr.CustCode)))) then begin
    GetWindowRecord(wn,SVOr);    
    DeselectWindow(wn,false);
    if (PasteCUInSVO(SVOr,WindEFstr(wn),warning)) then begin
      PutWindowRecord(wn,SVOr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  SVODClassCustCodeEFAfter = true;
  return;
end;

function Boolean SVODClassInvoiceToCodeEFAfter(Integer wn,Integer changed)
BEGIN
  record SVOVc SVOr;
  string 255 warning;

  if (changed!=0) then begin
    GetWindowRecord(wn,SVOr);    
    DeselectWindow(wn,false);
    if (PasteInvoiceToCodeInSVO(SVOr,warning)) then begin
      PutWindowRecord(wn,SVOr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  SVODClassInvoiceToCodeEFAfter = true;
  return;
end;

function Boolean SVODClassPlanShipEFAfter(Integer wn,Integer changed)
begin
  record SVOVc SVOr;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;
  
  if (changed!=0) then begin
    BlockLoad(PlanDelRec);
    GetWindowRecord(wn,SVOr);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = SVOr.PlanShip;
        SVOr.PlanShip = d;
        SVOr.PlanShipDate = StringToDate(SVOr.PlanShip);
      case 2:  /* week number (nn) */
        week = SVOr.PlanShip;
        SVOr.PlanShip = week;
      case 3:  /* week number (yynn */
        if (nonblank(SVOr.PlanShip)) then begin
          week = SVOr.PlanShip;
          SVOr.PlanShip = week;
          if (len(SVOr.PlanShip)<4) then begin
            SVOr.PlanShip = "0" & SVOr.PlanShip;
          end;
          if (len(SVOr.PlanShip)>4) then begin
            SVOr.PlanShip = Left(SVOr.PlanShip,4);
          end;
        end;
    end;
    PutWindowRecord(wn,SVOr);    
  end;
  SVODClassPlanShipEFAfter = true;
  return;
end;

function Boolean SVODClassTransDateEFAfter(Integer wn,Integer changed)
BEGIN
  record SVOVc SVOr;

  if (changed!=0) then begin
    GetWindowRecord(wn,SVOr);    
    SVOVc_PasteTransDate(SVOr);
    PutWindowRecord(wn,SVOr);
  end;
  SVODClassTransDateEFAfter = true;
  return;
end;

function Boolean SVODClassSalesManEFAfter(Integer wn,Integer changed)
BEGIN
  record SVOVc SVOr;
  record UserVc Userr;
  string 255 efstr,tstr;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,SVOr);    
    Userr.Code = SVOr.SalesMan;
    if (ReadFirstMain(Userr,1,true)) then begin
      SVOr.SalesGroup = Userr.SalesGroup;
      efstr = WindEFstr(wn);
      if ((efstr!=SVOr.SalesMan) and (nonblank(efstr))) then begin
        tstr = SVOr.Objects;
        RemoveOldUserObjects(efstr,tstr);
        SVOr.Objects = tstr;
      end;
      tstr = SVOr.Objects;
      if ((nonblank(tstr)) and (nonblank(Userr.PersObjx))) then begin
        tstr = tstr & ",";
      end;
      tstr = tstr & Userr.PersObjx;
      SVOr.Objects = tstr;          
    end;
    PutWindowRecord(wn,SVOr);
  end;
  SVODClassSalesManEFAfter = true;
  return;
end;

function Boolean SVODClassPriceListEFAfter(Integer wn,Integer changed)
BEGIN
  record SVOVc SVOr;
  record PLDefVc PLDefR;

  if (changed!=0) then begin
    GetWindowRecord(wn,SVOr);    
    PLDefR.Code = SVOr.PriceList;
    if (ReadFirstMain(PLDefR,1,true)) then begin
      SVOr.InclVAT = PLDefR.InclVAT;
    end;
    PutWindowRecord(wn,SVOr);
  end;
  SVODClassPriceListEFAfter = true;
  return;
end;

function Boolean SVODClassCustContactEFAfter(Integer wn,Integer changed)
BEGIN
  record SVOVc SVOr;
  record CUVc ContactCUr;

  if (changed!=0) then begin
    GetWindowRecord(wn,SVOr);    
    if (FindCustomerRelation(SVOr.CustCode,SVOr.CustContact,ContactCUr)) then begin
      SVOr.Phone = ContactCUr.Phone;
      SVOr.Fax = ContactCUr.Fax;
    end;
    PutWindowRecord(wn,SVOr);
  end;
  SVODClassCustContactEFAfter = true;
  return;
end;

function Boolean SVODClassContractNrEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVOVc SVOr;

  if (changed!=0) then begin
    GetWindowRecord(wn,SVOr);    
    SVOVc_PasteContractNr(SVOr,rownr);
    PutWindowRecord(wn,SVOr);
  end;
  SVODClassContractNrEFAfter = true;
  return;
end;

function Boolean SVODClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVOVc SVOr;

  GetWindowRecord(wn,SVOr);    
  if (SVOVc_PasteArtCode(SVOr,rownr,changed!=0)) then begin
    PutWindowRecord(wn,SVOr);
  end;
  SVODClassArtCodeEFAfter = true;
  return;
end;

function Boolean SVODClassQuantEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record SVOVc SVOr;

  GetWindowRecord(wn,SVOr);    
  if (changed!=0) then begin
    if (SVOVc_PasteQuant(SVOr,rownr)) then begin
      PutWindowRecord(wn,SVOr);
    end;
  end;
  SVODClassQuantEFAfter = true;
  return;
end;

function Boolean SVODClassDelAddrCodeEFAfter(Integer wn,Integer changed)
begin  
  record SVOVc SVOr;
  val t;

  if (changed!=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,SVOr);
    SVOVc_PasteDelAddrCode(SVOr);
    PutWindowRecord(wn,SVOr);
  end;  
  SVODClassDelAddrCodeEFAfter = true;
  return;
end;

function Boolean SVODClassItemKindEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  record SVOVc SVOr;
  row SVOVc SVOrw,SVO2rw;
  Integer i,rwcnt;

  if (changed!=0) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,SVOr);
    rwcnt = MatRowCnt(SVOr);
    if (rownr<rwcnt) then begin
      MatRowGet(SVOr,rownr,SVOrw);
      if (SVOrw.ItemKind==1) then begin
        for (i = 0; i<rwcnt; i = i + 1) begin
          if (i!=rownr) then begin
            MatRowGet(SVOr,i,SVO2rw);
            if (SVO2rw.ItemKind==0) then begin
              SVOrw.ItemType = SVO2rw.ItemType;
              MatRowPut(SVOr,rownr,SVOrw);
              PutWindowRecord(wn,SVOr);
              i = rwcnt;
            end;
          end;
        end;
      end;
    end;
  end;  
  SVODClassItemKindEFAfter = true;
  return;
end;

global
function Boolean SVODClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CurncyCode": res = SVODClassCurncyCodeEFAfter(wn,changed);
    case "CustCode": res = SVODClassCustCodeEFAfter(wn,changed);
    case "InvoiceToCode": res = SVODClassInvoiceToCodeEFAfter(wn,changed);
    case "SerialNr": res = SVODClassSerialNrEFAfter(wn,rownr,changed);
    case "PlanShip": res = SVODClassPlanShipEFAfter(wn,changed);
    case "TransDate": res = SVODClassTransDateEFAfter(wn,changed);
    case "SalesMan": res = SVODClassSalesManEFAfter(wn,changed);
    case "PriceList": res = SVODClassPriceListEFAfter(wn,changed);
    case "CustContact": res = SVODClassCustContactEFAfter(wn,changed);
    case "DelAddrCode": res = SVODClassDelAddrCodeEFAfter(wn,changed);
    case "ContractNr": res = SVODClassContractNrEFAfter(wn,rownr,changed);
    case "ArtCode": res = SVODClassArtCodeEFAfter(wn,rownr,changed);
    case "Quant": res = SVODClassQuantEFAfter(wn,rownr,changed);
    case "ItemKind": res = SVODClassItemKindEFAfter(wn,rownr,changed);
  end;
  SVODClassAfterEditField = res;
  RETURN;
END;

global
updating procedure PrintSVOL(Integer wn,Boolean previewf)
BEGIN
  record SVOVc SVOr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(SVOr,wn,i)) begin
    RecordActionSVO_Print(SVOr,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
procedure SVOStaDsm()
BEGIN
  record SVOVc SVOr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,SVOr);
  ReportDefaults(RepSpec,"SVOStaRClass");
  RepSpec.repname = "SVOStaRn";
  RepSpec.long1 = SVOr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure SVOCustStatDsm()
BEGIN
  record SVOVc SVOr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,SVOr);
  SetupCustPS2Rn(SVOr.CustCode,RepSpec);
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure SVOStaLsm()
BEGIN
  record SVOVc SVOr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,SVOr)) then begin
    RepSpec.repname = "SVOStaRn";
    RepSpec.long1 = SVOr.SerNr;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
procedure SVOCustStatLsm()
BEGIN
  record SVOVc SVOr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,SVOr)) then begin
    SetupCustPS2Rn(SVOr.CustCode,RepSpec);
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
updating procedure SVGMFromSVODsm()
BEGIN
  record SVOVc SVOr;
  record SVGMVc SVGMr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("SVOToSVGM",true)) then begin
      GetWindowRecord(wn,SVOr);
      r = RecordAction_raPasteSVOInSVGM(SVOr,SVGMr);
      switch (r) begin
        case -1: Beep;
        case -2: MessageBox(1281,"");
        otherwise
          nwn = OpenWindow("SVGMDClass",1,0,"","",SVGMr);
      end;
      UpdateBrowses("SVOVc");
    end else begin
      MessageBox(1274,StringFromStringSet(3,"SVOToSVGM"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure SVGMFromSVOLsm()
BEGIN
  record SVOVc SVOr;
  record SVGMVc SVGMr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (UserCanAction("SVOToSVGM",true)) then begin
    if (ReadMarkedRecord(wn,SVOr)) then begin
      r = RecordAction_raPasteSVOInSVGM(SVOr,SVGMr);
      switch (r) begin
        case -1: Beep;
        case -2: MessageBox(1281,"");
        otherwise
          if (MatRowCnt(SVGMr)>0) then begin
            nwn = OpenWindow("SVGMDClass",1,0,"","",SVGMr);
          end;
      end;
      UpdateBrowses("SVOVc");
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"SVOToSVGM"));
  end;
  RETURN;
END;

global
updating procedure IVFromSVODsm()
BEGIN
  record SVOVc SVOr;
  record IVVc IVr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("SVOToInv",true)) then begin
      GetWindowRecord(wn,SVOr);
      r = RecordAction_raPasteSVOInInv(SVOr,IVr);
      switch (r) begin
        case -1: Beep;
        case -2: MessageBox(1281,"");
        otherwise
          nwn = OpenWindow("IVDClass",1,0,"","",IVr);
          IVOpenPrepExists(IVr.CustCode);
      end;
      UpdateBrowses("SVOVc");
    end else begin
      MessageBox(1274,StringFromStringSet(3,"SVOToInv"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure IVFromSVOLsm()
BEGIN
  record SVOVc SVOr;
  record IVVc IVr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (UserCanAction("SVOToInv",true)) then begin
    if (ReadMarkedRecord(wn,SVOr)) then begin
      if (SVOr.InvFlag==0) then begin
        r = RecordAction_raPasteSVOInInv(SVOr,IVr);
        switch (r) begin
          case -1: Beep;
          case -2: MessageBox(1281,"");
          otherwise
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
        end;
        UpdateBrowses("SVOVc");
      end;
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"SVOToInv"));
  end;
  RETURN;
END;

global
procedure WorkOrderSVODsm()
BEGIN
  record SVOVc SVOr;
  record RcVc RepSpec;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0)then begin//Rs_normal
    GetWindowRecord(wn,SVOr);
    if (SVOr.DoneMark==0) then begin
      nwn = OpenWindow("WorkOrderVClass",1,0,"","",RepSpec);
      DeselectWindow(nwn,false);
      ReportDefaults(RepSpec,"WorkOrderVClass");
      RepSpec.f1 = SVOr.SerNr;
      RepSpec.f3 = SVOr.OrderClass;
      RepSpec.long1 = -1;
      RepSpec.repname = "WorkOrderMn";
      PutWindowRecord(nwn,RepSpec);
      SelectWindow(nwn);
    end else begin
      Beep;
    end;  
  end;  
  RETURN;
END;

global
updating procedure WorkSheetSVODsm()
BEGIN
  record SVOVc SVOr;
  record WSVc WSr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("DisallowWSFromSVO",false)==false) then begin
      GetWindowRecord(wn,SVOr);
      if (SVOr.DoneMark==0) then begin
        r = RecordAction_raPasteSVOInWS(SVOr,WSr);
        switch (r) begin
          case -1: Beep;
          case -2: MessageBox(1281,"");
          otherwise
            nwn = OpenWindow("WSDClass",1,0,"","",WSr);
        end;
        UpdateBrowses("SVOVc");
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"DisallowWSFromSVO"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure WorkOrderSVOLsm()
BEGIN
  record SVOVc SVOr;
  record RcVc RepSpec;
  Integer wn,nwn,i;
  LongInt frsvo;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(SVOr,wn,i)) begin
    if (i==1) then begin
      frsvo = SVOr.SerNr;
    end;
    i = i + 1;
  end;
  nwn = OpenWindow("WorkOrderVClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"WorkOrderVClass");
  RepSpec.f1 = frsvo;
  if (i>2) then begin
    RepSpec.f1 = RepSpec.f1 & ":" & SVOr.SerNr;
  end;
  RepSpec.f3 = "";
  RepSpec.long1 = -1;
  RepSpec.repname = "WorkOrderMn";
  PutWindowRecord(nwn,RepSpec);
  RETURN;
END;

global
updating procedure ActFromSVODsm()
BEGIN
  record SVOVc SVOr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    GetWindowRecord(wn,SVOr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromSVO(SVOr,Actr,WindowActiveRow(wn))) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
  RETURN;
END;

global
updating procedure SVOVcCreateActivity()
begin
  ActFromSVODsm;
  return;
end;

global
updating procedure ActFromSVOLsm()
BEGIN
  record SVOVc SVOr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (ReadMarkedRecord(wn,SVOr)) then begin
    if (MakeActFromSVO(SVOr,Actr,-1)) then begin
//      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
    end;
  end;
  RETURN;
END;

global
updating procedure QTFromSVODsm()
BEGIN
  record SVOVc SVOr;
  record QTVc QTr,QT2r;
  Boolean res;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
      GetWindowRecord(wn,SVOr);
      QT2r.SVOSerNr = SVOr.SerNr;
      if (ReadFirstKey("SVOSerNr",QT2r,1,true)==false) then begin 
        if (SVOr.DoneMark<>1) then begin 
          res = RecordAction_raPasteSVOInQT(QTr,SVOr);
          nwn = OpenWindow("QTDClass",1,0,"","",QTr);
        end else begin
          Beep;  
        end;
      end else begin 
        Beep;  
      end;  
  end else begin
    Beep;
  end;
  RETURN;
END;

global
function Boolean SVODClassDoneMarkButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record SVOVc SVOr;
 
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,SVOr);
    if (SVOr.DoneMark!=0) then begin
      res = false;
    end;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end; 
    if (UserCanAction("CompletingServiceOrders",true)==false) then begin
      res = false; 
    end;  
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,SVOr);
    if (SVOr.DoneMark!=0) then begin
      res = false;
    end else begin  
      if (UserCanAction("CompletingServiceOrders",true)==false) then begin
        res = false;
      end;  
    end;
  end;  
  SVODClassDoneMarkButtonAction = res;
  return;
end;

global
function Boolean SVODClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record SVOVc SVOr;
  
  res = true;
  GetWindowRecord(wn,SVOr);
  if (SVOr.DoneMark!=0) then begin res = false; end;
  SVODClassUpdateTest = res;
  RETURN;
END;

function Boolean SVOMadeWOTest(record SVOVc SVOp,LongInt rownr)
BEGIN
  Boolean res;
  row SVOVc SVOrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(SVOp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SVOp,i,SVOrw);
    if ((SVOrw.WOSerNr!=-1) and (nonblank(SVOrw.ArtCode)) and (rownr==i)) then begin
      res = true;
      goto LSVOMadeWOTest;
    end;
  end;
LSVOMadeWOTest:;
  SVOMadeWOTest = res;
  RETURN;
END;

global 
function Boolean SVODClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record SVOVc SVOr;
  Boolean res;
  Integer updatemode;

  res = true;
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SVOr);
    if (SVOMadeWOTest(SVOr,rownr)) then begin
      res = false;
      MessageBox(1369,"");
    end;
  end;
  SVODClassDeleteRowTest = res;
  return;
end;

global
function Boolean SVODClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record SVOVc SVOr;
  record SVOVc SVO2r;
  Integer updatemode,insertmode;
  string 200 tstr;
  
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  res = true;
  if (WindowState(wn)!=insertmode) then begin
    switch (fieldname) begin
      case "SerNr": 
        res = false;
        goto LSVODClassActiveEditField;
      case "CustCode":
//        res = false; why?
//        goto LSVODClassActiveEditField;
      case "VATNr":
        res = false;
        goto LSVODClassActiveEditField;
    end;
  end;
  switch (fieldname) begin
    case "VATNr": res = HasLocalization("PRT")==false;
    case "Addr0": res = HasLocalization("PRT")==false;
    case "Addr1": res = HasLocalization("PRT")==false;
    case "Addr2": res = HasLocalization("PRT")==false;
    case "InvAddr3": res = HasLocalization("PRT")==false;
    case "InvAddr4": res = HasLocalization("PRT")==false;
    case "InvCountry": res = HasLocalization("PRT")==false;
  end;
  if (rownr>=0) then begin
    switch (fieldname) begin
      case "WOMade":
        res = false;
        if (changed!=0) then begin
          MessageBox(1067,"");
        end;
        goto LSVODClassActiveEditField;
      case "Invd":
        res = false;
        if (changed!=0) then begin
          MessageBox(1067,"");
        end;
        goto LSVODClassActiveEditField;
      case "Cost":
        res = false;
        if (changed!=0) then begin
          MessageBox(1067,"");
        end;
        goto LSVODClassActiveEditField;
    end;
  end;
  GetWindowRecord(wn,SVOr);
  if (SVOMadeWOTest(SVOr,rownr)==false) then begin goto LSVODClassActiveEditField; end;
  if (WindowState(wn)==updatemode) then begin
    if ((rownr>=0) and (rownr<WindowOldRowcnt(wn))) then begin 
      switch (fieldname) begin
        case "ArtCode":
          res = false;
          if (changed!=0) then begin
            MessageBox(1304,"");
          end;
      end;
    end;
  end;
  res = true;
LSVODClassActiveEditField:;  
  SVODClassActiveEditField = res;
  RETURN;
END;

global 
function Boolean SVODClassInsertRowTest(Integer wn,Integer rownr)
begin
  record SVOVc SVOr;
  Boolean res;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,SVOr);  
      if (SVOMadeWOTest(SVOr,rownr)==true) then begin
        res = false;
      end;
    case 2://Rs_update
      GetPrevWindowRecord(wn,SVOr);  
      if (SVOMadeWOTest(SVOr,rownr)==true) then begin
        res = false;
      end;
    case 1://Rs_insert
      res = true;
    otherwise
      res = false;
  end;
  
  SVODClassInsertRowTest = res;
  return;
end;

global
function Boolean SVODClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
//vat zone should be as it is on customer card
//otherwise u can paste customer  , filled all, change vat zone and get crap
  res = false;
  SVODClassExportFlagButtonAction = res;
  RETURN;
END;

global
function string 40 SVODClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DelAddrCode": psname = DelAddrSClassSpecPName(defpsname);
  end;
  SVODClassSpecPasteName = psname;
  return;
end;

global
updating procedure OffHireFromSVODsm()
begin
  record SVOVc SVOr;
  record OffHireVc OHr;
  Integer r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("SVOToOffHire",true)) then begin
      GetWindowRecord(wn,SVOr);
      r = RecordAction_raPasteSVOInOffHire(SVOr,OHr);
      if (r==0) then begin
         nwn = OpenWindow("OffHireDClass",1,0,"","",OHr);
       end else begin
         MessageBox(r,"");
      end;
      UpdateBrowses("SVOVc");
    end else begin
      MessageBox(1274,StringFromStringSet(3,"SVOToOffHire"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure DispatchFromSVODsm()
begin
  record SVOVc SVOr;
  record DispatchVc Dispr;
  Integer r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("SVOToDispatch",true)) then begin
      GetWindowRecord(wn,SVOr);
      r = RecordAction_raPasteSVOInDispatch(SVOr,Dispr);
      if (r==0) then begin
         nwn = OpenWindow("DispatchDClass",1,0,"","",Dispr);
       end else begin
         MessageBox(r,"");
      end;
      UpdateBrowses("SVOVc");
    end else begin
      MessageBox(1274,StringFromStringSet(3,"SVOToDispatch"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating procedure POFromSVODsm()
begin
  record SVOVc SVOr;
  record POVc POr;
  Integer wn,nwn,cnt;
  LongInt r;
  string 255 msg;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("SVOToPO",true)) then begin // TODO: to add to access rights
      GetWindowRecord(wn,SVOr);
      r = RecordAction_raPasteSVOInPO(SVOr,POr,cnt,msg);
      if (r==0) then begin
        switch (cnt) begin
          case 0:
            msg = ": 0";
            MessageBox(20273,msg);
          case 1:
            nwn = OpenWindow("PODClass",1,0,"","",POr);
          otherwise
            msg = ": " & cnt;
            msg = msg & chr(10);
            msg = msg & USetStr(20274);
            MessageBox(20273,msg);
        end;
      end else begin
        MessageBox(r,msg);
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"SVOToPO"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
function Boolean SVODClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record SVOVc SVOr;
  
  GetWindowRecord(wn,SVOr);
  if (SVOr.SerNr!=-1) then begin
    subsetname = SVOr.SerNr;
  end;
  SVODClassUpdateWindowSubset = true;
  return;
end;
/*
global
function Boolean SVODClassRLClick(Integer wn,Integer rownr)
begin
  Integer nwn;
  record SVOVc SVOr;
  record ActVc Actr;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,SVOr);
    if (ReadMarkedRecord(wn,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);    
    end;
  end;
  SVODClassRLClick = true;
  return;
end;
*/
global
function Boolean SVODClassOnOKWindow(Integer wn)
begin
  Integer nwn;
  record SVOVc SVOr;
  record ActVc Actr;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,SVOr);
    if (ReadMarkedRecord(wn,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);  
    end;
  end;
  SVODClassOnOKWindow = true;
  return;
end;

updating procedure AttachGSXNotesToSVOSer(record SVOSerVc SVOSerr,record NotepadVc csNotesr,record NotepadVc Notesr)
begin
  if (SizeTextCnt(csNotesr)>0) then begin
    CreateRecordLink(SVOSerr,CurrentCompany,csNotesr,CurrentCompany);
  end;
  if (SizeTextCnt(Notesr)>0) then begin
    CreateRecordLink(SVOSerr,CurrentCompany,Notesr,CurrentCompany);
  end;
  return;
end;

global
updating procedure WarrantyStatusSVODsm()
begin
  record GSXSettingsBlock GSb;
  integer nwn,wn,rownr;
  date d;
  record INVc INr;
  record SVOSerVc SVOSerr;
  record SVOVc oldSVOr,SVOr;
  row SVOVc SVOrw;
  record NotepadVc csNotesr,Notesr;
  array string 255 a_partNumbers;
  string 255 sessionID,errormsg;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,SVOr);
  
  if (rownr>=0) then begin
    MatRowGet(SVOr,rownr,SVOrw);
  end;
  
  if (blank(SVOrw.SerialNr)) and (blank(SVOrw.SecondarySerialNr)) and (blank(SVOrw.AlternateDeviceID)) then begin
    MessageBox(23700,"");
    goto LWarrantyStatusSVODsm;
  end;
  
  SVOSerr.ItemCode = SVOrw.ArtCode;
  SVOSerr.SerialNr = SVOrw.SerialNr;
  if (ReadFirstMain(SVOSerr,2,true)==false) then begin
    RecordNew(SVOSerr);
    SVOSerr.ItemCode = SVOrw.ArtCode;
    SVOSerr.SerialNr = SVOrw.SerialNr;
    INr.Code = SVOSerr.ItemCode;
    if (ReadFirstMain(INr,1,true)) then begin
      SVOSerr.ItemName = INr.Name;
    end;
//    if (nonblank(vecode)) then begin
//      SVOSerr.VECode = vecode;
//    end else begin
//      SVOSerr.VECode = "";
//    end;
    SVOSerr.CustCode = SVOr.CustCode;
    SVOSerr.CustName = SVOr.Addr0;
    //TODO: fill in all more of the basics (cost, sold date that we know about, etc)
  end;
  
  BlockLoad(GSb);
  if (GSXLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
    if (GSXWarrantyStatus(sessionID,SVOrw.SerialNr,d,a_partNumbers,0,SVOSerr,csNotesr,Notesr,errormsg)) then begin
      RecordStore(SVOSerr,true);
      AttachGSXNotesToSVOSer(SVOSerr,csNotesr,Notesr);
      if ((SVOSerr.WarrantyUntil>CurrentDate and SVOrw.ItemType!=2) or (SVOSerr.WarrantyUntil<=CurrentDate and SVOrw.ItemType==2)) then begin
        RecordCopy(oldSVOr,SVOr);
        if (SVOSerr.WarrantyUntil>CurrentDate) then begin
          SVOrw.ItemType = 2; //warranty
        end else begin
          SVOrw.ItemType = 1; //invoiceable
        end;
        MatRowPut(SVOr,rownr,SVOrw);
        if (RecordUpdate(oldSVOr,SVOr,true)==0) then begin
          CloseWindow(wn);
          wn = OpenWindow("SVODClass",1,0,"","",SVOr);
          WindowFieldGoto(wn,SVOr,rownr,"SerialNr",true);
        end;
      end;
      
      nwn = OpenWindow("SVOSerDClass",1,0,"","",SVOSerr);
    end else begin 
      MessageBox(0,errormsg);
    end;
//    if (GSXLogout(sessionID)) then begin StopAlert("logout ok"); end;
  end else begin
    MessageBox(0,errormsg);
  end;
  
LWarrantyStatusSVODsm:;
  return;
end;

global
updating procedure SendToAppleSVODsm()
begin
  Integer wn,rownr;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  record GSXSettingsBlock GSb;
  string 255 sessionID,errormsg;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,SVOr);
  
  if (rownr>=0) then begin
    MatRowGet(SVOr,rownr,SVOrw);
  end;
  
  if (blank(SVOrw.SerialNr)) and (blank(SVOrw.SecondarySerialNr)) and (blank(SVOrw.AlternateDeviceID)) then begin
    MessageBox(23700,"");
    goto LSendToAppleSVODsm;
  end;
  
  BlockLoad(GSb);
  if (GSXLogin(GSb.AppleID,GSb.Password,GSb.AccountNo,sessionID,errormsg)) then begin
    if (GSXCreateCarryInRepair(sessionID,SVOrw.SerialNr,SVOr,errormsg)) then begin
      PutWindowRecord(wn,SVOr);
    end else begin
      MessageBox(0,errormsg);
    end;
  end else begin
    MessageBox(0,errormsg);
  end;
  
LSendToAppleSVODsm:;
  return;
end;

global
function Boolean SVODClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  record COVc COr;
  Integer nwn;
  
  switch (fieldname) begin
    case "CustContact":
      GetWindowRecord(wn,SVOr);
      res = OpenContactRecord(SVOr.CustContact,SVOr.CustCode);
    case "ContractNr":
      GetWindowRecord(wn,SVOr);
      if (rownr>=0) then begin
        MatRowGet(SVOr,rownr,SVOrw);
        COr.SerNr = SVOrw.ContractNr;
        COr.ChildSerNr = -1;
        if (ReadFirstMain(COr,2,true)) then begin
          nwn = OpenWindow("CODClass",0,0,"","",COr);    
          res = true;
        end;
      end;
  end;
  SVODClassOpenRecord = res;
  return;
end;

global
updating procedure RetFromSVODsm()
begin
  record RetVc Retr;
  record SVOVc SVOr;
  Integer wn,r,nwn;
  record LocalMachineBlock LMb;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal) then begin
    BlockLoad(LMb);
    GetWindowRecord(wn,SVOr);
//    if (SVOr.OKFlag!=0) then begin
    if (true) then begin
      if (UserCanAction("SVOToRet",true)) then begin
        r = PasteSVOInRet(Retr,SVOr.SerNr,LMb.DefReturnLocation);      
        switch (r) begin
          case 0:
            nwn = OpenWindow("RetDClass",1,0,"","",Retr);
          otherwise 
            MessageBox(r,"");
        end;                
      end else begin
        MessageBox(1274,StringFromStringSet(3,"SVOToRet"));
      end;
    end;
  end else begin
    Beep;
  end;
  return;
end;
/*
global
procedure OpenVatMatrixSVODsm()
begin
  record TaxMatrixVc TMr;
  record SVOVc SVOr;
  row SVOVc SVOrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,SVOr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(SVOr,rowno,SVOrw);
    UnpackRowFieldMatrix(SVOrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(SVOr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;
*/