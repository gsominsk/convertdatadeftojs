remote procedure PUSumUp(var record PUVc);
remote function Boolean GetNextItemNr(var string);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_PUVc(record PUVc,var record RcVc,var Integer);
external function Integer CountObjects(string);
remote updating function Boolean RecordAction_rlPULOK(var record PUVc);
remote updating procedure PUUpdatePricesMn(record RcVc);
remote function Integer PastePUInINTransfer(record PUVc,var record INTransferVc);
external procedure INTransferSumUp(record INTransferVc);
remote updating procedure AssignDestPositionOnStockMov(string);
external procedure VIOpenPrepExists(string);
remote procedure AutoFillPUSerNr(var record PUVc);
remote updating function LongInt RecordAction_raPastePUInRetPU(record PUVc,var record RetPUVc);
remote updating function LongInt RecordAction_raPastePUInVI(record PUVc,var record VIVc,var string);
external procedure RecordActionPU_Print(var record PUVc,string);
remote function Integer SendForAcceptance_PUVc(var record PUVc,var record RcVc);

global
procedure PrintPUL(Integer wn,Boolean previewf)
BEGIN
  record PUVc PUr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(PUr,wn,i)) begin
    RecordActionPU_Print(PUr,previewf);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
procedure PrintPULabPUDsm()
BEGIN
  record RcVc RepSpec;
  record PUVc PUr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  RepSpec.f1 = PUr.SerNr;
  RepSpec.Media = mtPrinter;
  RepSpec.repname = "PULabForm";
  if (PrintDocument(RepSpec,"PULabForm",false)) then begin end;
  RETURN;
END;

global
updating procedure VIFromPUDsm()
BEGIN
  record PUVc PUr;
  record VIVc VIr;
  LongInt r;
  Integer wn,nwn;
  string 255 errmsg;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,PUr);
    if (PUr.OKFlag!=0) then begin
      if (UserCanAction("PUToVI",true)) then begin
        r = RecordAction_raPastePUInVI(PUr,VIr,errmsg);
        switch (r) begin
          case  0:
            nwn = OpenWindow("VIDClass",1,0,"","",VIr);
            VIOpenPrepExists(VIr.VECode);          
          case -1: Beep;
          case -2: MessageBox(1281,"");
          otherwise
            MessageBox(r,errmsg);
        end;
        UpdateBrowses("PUVc");
      end else begin
        MessageBox(1274,StringFromStringSet(3,"PUToVI"));
      end;
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

/*
global
updating procedure VIFromPUDsm()
begin
  record PUVc PUr;
  record VIVc VIr;
  LongInt r;
  Integer wn,nwn;
  record POSettingBlock POSb;
  string 255 errmsg;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    BlockLoad(POSb);
    GetWindowRecord(wn,PUr);
    if (PUr.OKFlag!=0) then begin
      if (UserCanAction("PUToVI",true)) then begin
        if (POSb.OpenCreateVIFromPO!=0) then begin
          ReportDefaults(RepSpec,"VIFromPUVClass");
          RepSpec.repname = "";
          RepSpec.FirstVer = POr.SerNr;
          RepSpec.flags[0] = 1;
          nwn = OpenWindow("VIFromPUVClass",1,0,"","",RepSpec);
          PutWindowRecord(nwn,RepSpec);
          SelectWindow(nwn);
        end else begin
          r = RecordAction_raPastePUInVI(PUr,VIr,errmsg);
          switch (r) begin
            case  0:
              nwn = OpenWindow("VIDClass",1,0,"","",VIr);
              VIOpenPrepExists(VIr.VECode);          
            case -1: Beep;
            case -2: MessageBox(1281,"");
            otherwise
              MessageBox(1281,"");
          end;
        end;
        UpdateBrowses("PUVc");          
      end else begin
        MessageBox(1274,StringFromStringSet(3,"PUToVI"));
      end;
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
updating function Boolean VIFromPUVClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record VIVc VIr;
  Integer nwn;
  Integer r;
  string 255 errmsg;
  
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin
    if (RepSpec.flags[0]==0) then begin
      if ((RepSpec.flags[1]!=0) or (RepSpec.flags[2]!=0) or (RepSpec.flags[3]!=0) or (RepSpec.flags[4]!=0) or (RepSpec.flags[5]!=0) or (RepSpec.flags[6]!=0) or (RepSpec.flags[7]!=0)) then begin
        MessageBox(0,USetStr(10426));
        WindowFieldGoto(wn,RepSpec,-1,"f1",true);        
        goto LVIFromPUVClassOnOKWindow;
      end;
    end;
  end;
  r = RecordAction_raPastePUInVI(RepSpec.FirstVer,RepSpec,VIr,errmsg);
  if (r!=0) begin
    if (r>0) then begin
      MessageBox(r,errmsg);
    end else begin
      Beep;
    end;
  end else begin
    nwn = OpenWindow("VIDClass",1,0,"","",VIr);
    VIOpenPrepExists(VIr.VECode);        
    UpdateBrowses("POVc");    
  end;
  CloseWindow(wn);
LVIFromPUVClassOnOKWindow:;  
  VIFromPUVClassOnOKWindow = false;
  return;
end;
*/

function Boolean PONrinPURow(record PUVc PUr) 
begin
  Boolean res;
  row PUVc PUrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(PUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PUr,i,PUrw);
    if (PUrw.PONr>0)  then begin
      res = true;
      i = rwcnt;
    end;
  end;
  PONrinPURow = res;
  return;
end;

global
updating procedure RetPUFromPUDsm()
BEGIN
  record MainStockBlock MainStockRec;
  record PUVc PUr;
  record RetPUVc RetPUr;
  LongInt r;
  Integer wn,nwn;
  
  BlockLoad(MainStockRec);
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,PUr);
    if (PUr.PONr!=-1 or ((MainStockRec.PONoOnPURowsOnly==1) or (PONrinPURow(PUr)))) then begin
      if (UserCanAction("PUToRetPU",true)) then begin
        r = RecordAction_raPastePUInRetPU(PUr,RetPUr);
        if (r==0) then begin//noerr
          nwn = OpenWindow("RetPUDClass",1,0,"","",RetPUr);
          SetRLink(wn,true);            
        end else begin
          switch (r) begin
            case -1: Beep;
            case -2: MessageBox(1281,"");
            otherwise
              MessageBox(r,"");
          end;
        end;        
        UpdateBrowses("PUVc");
      end else begin
        MessageBox(1274,StringFromStringSet(3,"PUToRetPU"));
      end;
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure UpdatePricesPUDsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  record PUVc PUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  nwn = OpenWindow("PUUpdateVClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.long1 = PUr.SerNr;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  PutWindowRecord(nwn,RepSpec);
  SelectWindow(nwn);
  RETURN
END;

global
updating function Boolean PUUpdateVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  PUUpdatePricesMn(RepSpec);
  CloseWindow(wn);
  PUUpdateVClassOnOKWindow = false;
  return;
end;


global
updating procedure GenSerialNosPUDsm()
begin
  record PUVc PUr;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,PUr);
  if (PUr.OKFlag==0) then begin  
    AutoFillPUSerNr(PUr);
    PutWindowRecord(wn,PUr);
  end;
  return;
end;

global
procedure SplitRowPUDsm()
begin
  record PUVc PUr;
  row PUVc frPUrw;
  row PUVc toPUrw;
  Integer wn,rownr;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  if (PUr.OKFlag==0) then begin  
    if (rownr>=0) then begin
      MatRowGet(PUr,rownr,frPUrw);
      CopyRow(PUr,frPUrw,toPUrw);
     // toPUrw.OrdRow = -1;
      MatRowInsert(PUr,rownr+1,toPUrw);
      PUSumUp(PUr);
      PutWindowRecord(wn,PUr);
    end else begin
      Beep;
    end;
  end;
  RETURN
END;

global
procedure ScanBarCodePUDsm()
BEGIN
  record RcVc RepSpec;
  Integer nwn;

  nwn = OpenWindow("ScanBarCodeVClass",1,0,"","",RepSpec);
  RETURN
END;

global
updating function Boolean ScanBarCodeVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  AssignDestPositionOnStockMov(RepSpec.f1);
  CloseWindow(wn);
  ScanBarCodeVClassOnOKWindow = false;
  RETURN;
END;

global
updating procedure INTransFromPUsm()
BEGIN
  record INTransferVc INTransferr;
  record PUVc PUr;
  Integer wn,nwn,err;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  if ((WindowState(wn)==0) and (PUr.OKFlag!=0)) then begin
    err = PastePUInINTransfer(PUr,INTransferr);
    if (err==0) then begin
      nwn = OpenWindow("INTransferDClass",1,0,"","",INTransferr);
    end else begin
      MessageBox(err,"");
    end;
  end;  
  RETURN;
END;

global
updating procedure SPCHRVPUDsm()
begin
  Integer wn;
  record PUVc PUr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  RepSpec.f1 = PUr.SerNr;
  RepSpec.repname = "SPCHRVRn";
  RepSpec.Media = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;


global
updating procedure PUSendforAcceptancePUDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record PUVc PUr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,PUr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LPUSendforAcceptancePUDsm;
    end;
    GetWindowRecord(wn,PUr);
  end;
  PUr.AcceptanceBy = acceptanceby;
  PUr.AcceptanceFYI = acceptancefyi;

  err = RequestApproval_PUVc(PUr,RepSpec,ApprovalStatusFlag);
  
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(PUr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,PUr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LPUSendforAcceptancePUDsm:;  
  return;
end;

global
updating procedure PUSendforAcceptancePUDsm()
begin
  PUSendforAcceptancePUDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure PUCancelApprovalRequest(Integer wn)
begin
  record PUVc PUr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,PUr);
  err = CancelApprovalRequest("PUVc",PUr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LPUCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LPUCancelApprovalRequest:;
  return;
end;

global
procedure OpenVatMatrixPUDsm()
begin
  record TaxMatrixVc TMr;
  record PUVc PUr;
  row PUVc PUrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(PUr,rowno,PUrw);
    UnpackRowFieldMatrix(PUrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(PUr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
updating procedure PUOKLsm()
begin
  Integer wn,i;
  record PUVc PUr;
  Boolean tmpf;

  wn = CurWindow;
  if (UserCanAction("PUOK",true)) then begin
    i = 1;
    while (GetRecordFromBrowse(PUr,wn,i)) begin  
      if (RecordAction_rlPULOK(PUr)==false) then begin
        MessageBox(0,USetStr(23300) & " " & PUr.SerNr);
      end;
      i = i + 1;
    end;  
    UpdateBrowses("PUVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"PUOK"));
  end;
  
  return;
end;

global
procedure PUStatusDsm()
begin
  record RcVc RepSpec;
  record PUVc PUr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,PUr);
  RepSpec.f1 = PUr.SerNr;
  RepSpec.repname = "PUStatusRn";
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;

global
procedure AddSupplierPUDsm()
begin
  record CUVc CUr;
  Integer nwn;
  
  RecordNew(CUr);
  CUr.CUType = 0;
  CUr.VEType = 1;
  nwn = OpenWindow("CUDClass",0,CurWindow,"","",CUr);
  PutWindowString(nwn,"OperationMenuAction","AddContact");
  return;
end;

global
procedure AddItemPUDsm()
begin
  record INVc INr;
  Integer nwn;
  
  RecordNew(INr);
  nwn = OpenWindow("INDClass",0,CurWindow,"","",INr);
  PutWindowString(nwn,"OperationMenuAction","AddItem");
  if (blank(INr.Code)) then begin
    GetNextItemNr(INr.Code);
  end;
  return;
end;
