external procedure ActVcRecordDefClient(var record ActVc);
remote updating function Boolean MakeActFromHRMCOChange(var record ActVc,record HRMCOChangeVc);

function Boolean HRMCOChangeDClassEmployeeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record HRMCOChangeVc HRMCOChanger;
  record CUVc CUr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMCOChanger);
    CUr.Code = HRMCOChanger.Employee;
    ReadFIrstMain(CUr,1,true);
    HRMCOChanger.Name = CUr.Name;
    HRMCOChanger.JobTitle = CUr.JobDesc;
    PutWindowRecord(wn,HRMCOChanger);
  end;
  HRMCOChangeDClassEmployeeEFAfter = res;
  return;
end;

function Boolean HRMCOChangeDClassHRMCOSerNrEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record HRMCOChangeVc HRMCOChanger;
  record HRMCOVc HRMCOr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,HRMCOChanger);
    HRMCOr.SerNr = HRMCOChanger.HRMCOSerNr;
    ReadFIrstMain(HRMCOr,1,true);
    HRMCOChanger.Employee = HRMCOr.Employee;
    HRMCOChanger.Name = HRMCOr.Name;
    HRMCOChanger.JobTitle = HRMCOr.JobTitle;
    PutWindowRecord(wn,HRMCOChanger);
  end;
  HRMCOChangeDClassHRMCOSerNrEFAfter = res;
  return;
end;

global
function Boolean HRMCOChangeDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Employee": res = HRMCOChangeDClassEmployeeEFAfter(wn,changed!=0);
    case "HRMCOSerNr": res = HRMCOChangeDClassHRMCOSerNrEFAfter(wn,changed!=0);
  end;
  HRMCOChangeDClassAfterEditField = res;
  return;
end;

global
function Boolean HRMCOChangeDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record HRMCOChangeVc HRMCOCr;
  
  res = true;
  switch (wnst) begin
    case Rs_update:
      GetPrevWindowRecord(wn,HRMCOCr);
      if (HRMCOCr.OKFlag!=0) then begin
        res = false;
      end;
  end;
  switch (fieldname) begin
    case "HRMCOSerNr": res = false;
    case "Employee": res = false;
    case "Name": res = false;
  end;
  HRMCOChangeDClassActiveEditField = res;
  return;
end;

global
function Boolean HRMCOChangeDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record HRMCOChangeVc HRMCOChanger;
  Integer err;
 
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,HRMCOChanger);
      if (HRMCOChanger.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,HRMCOChanger);
      if (HRMCOChanger.OKFlag!=0) then begin
        res = false;
      end;
  end;  
  if (UserCanAction("HRMCOChangeOK",true)==false) then begin
    res = false;
  end;
  HRMCOChangeDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean HRMCOChangeDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record HRMCOChangeVc HRMCOChanger;
  record CUVc CUr;
  Integer nwn;
  
  switch (fieldname) begin
    case "Employee":
      GetWindowRecord(wn,HRMCOChanger);  
      CUr.Code = HRMCOChanger.Employee;
      if (ReadFirstMain(CUr,1,true)) then begin
        nwn = OpenWindow("CUEmployeeDClass",0,0,"","",CUr);   
        res = true; 
      end;
  end;
  HRMCOChangeDClassOpenRecord = res;
  return;
end;

global
updating procedure HRMCOChangeVcCreateActivity()
begin
  Integer wn,nwn;
  record ActVc Actr;
  record HRMCOChangeVc HRMCOCr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,HRMCOCr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromHRMCOChange(Actr,HRMCOCr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;

  return;
end;
