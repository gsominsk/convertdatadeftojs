external function Time AddTime2(Time,LongInt);
external function Time TimeDiff(Time,Time);
external function LongInt DateDiff(Date,Date);
external updating procedure TimeLogEn(record RcVc);

global
function Boolean TimeLogEClassOnOpenWindow(integer wn)
begin
  record RcVc RepSpec;
  record TLSettingBlock TLSb;
  
  BlockLoad(TLSb);
  GetWindowRecord(wn, RepSpec);
  ReportDefaults(RepSpec, "TimeLogEClass");
  RepSpec.sStartDate = CurrentDate;
  RepSpec.sEndDate = CurrentDate;
  RepSpec.f1 = TLSb.ExportFileName;
  PutWindowRecord(wn, RepSpec);  
  TimeLogEClassOnOpenWindow = false;
  return;
end;

global
updating function boolean TimeLogEClassOnOKWindow(integer wn)
begin
  boolean res;
  record RcVc RepSpec;
  
  GetWindowRecord(wn, RepSpec);
  CloseWindow(wn);
  TimeLogEn(RepSpec);
  MessageBox(0,USetStr(23051));
  TimeLogEClassOnOKWindow = res;
  return;
end;

global
procedure ExportTLActLsm()
begin
  record RcVc RepSpec;
    
  OpenWindow("TimeLogEClass",0,0,"","",RepSpec);
  return;
end;

global
updating procedure DeleteTLActLsm()
begin
  record ActVc TLActr;
  Integer wn,i;
  
  wn = CurWindow;  
  i = 1;
  while (GetRecordFromBrowse(TLActr,wn,i)) begin
    RecordRemove(TLActr);
    i = i + 1;
  end;  
  UpdateBrowses("ActVc");
  return;
end;

function Boolean TLActDClassPRCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc TLActr;
  record PRVc PRr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,TLActr);
    DeselectWindow(wn,false);
    PRr.Code = TLActr.PRCode;
//    if (ReadFirstMain(PRr,1,true)) then begin
//      TLActr.PRName = PRr.Name;
//      PutWindowRecord(wn,TLActr);
//    end;
  end;
  TLActDClassPRCodeEFAfter = res;
  return;
end;

procedure CheckTimeMinSec(var Time timep)
begin
  if (GetSecond(timep)>=60) then begin
    timep = AddMinutes(timep,1);
    timep = AddSeconds(timep,-GetSecond(timep));  
  end;
  if (GetMinute(timep)>=60) then begin
    timep = AddHours(timep,1);
    timep = AddMinutes(timep,-GetMinute(timep));  
  end;
  return;
end;

function Time TLActVc_CalculateCostTime(record ActVc TLActr)
begin
  Time res;
  LongInt days;
  
  res = TLActr.EndTime;
  CheckTimeMinSec(res);
  TLActr.EndTime = res;        
  days = DateDiff(TLActr.EndDate,TLActr.TransDate);      
  if (TLActr.EndTime<TLActr.StartTime) then begin
    days = days - 1;
  end;
  res = TimeDiff(TLActr.StartTime,TLActr.EndTime);  
  if ((days==0) or (days>=1)) then begin//what if days are 2 or more?
    res = AddTime2(res,days*24*60);
  end;
  if (days>1) then begin
    res.hour = 23; res.minute = 59; res.second = 59;
  end;
  TLActVc_CalculateCostTime = res;
  return;
end;

function Boolean TLActDClassEndDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc TLActr;
  string 255 warning;
  LongInt days;
  Time t;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,TLActr);
    DeselectWindow(wn,false);
    if (nonblank(TLActr.EndTime)) then begin
      TLActr.CostTime = TLActVc_CalculateCostTime(TLActr);
      PutWindowRecord(wn,TLActr);
    end;
  end;
  TLActDClassEndDateEFAfter = res;
  return;
end;

function Boolean TLActDClassStartTimeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc TLActr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,TLActr);
    DeselectWindow(wn,false);
    if (nonblank(TLActr.EndTime)) then begin
      TLActr.CostTime = TLActVc_CalculateCostTime(TLActr);
      PutWindowRecord(wn,TLActr);
    end;
  end;
  TLActDClassStartTimeEFAfter = res;
  return;
end;

function Boolean TLActDClassEndTimeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc TLActr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,TLActr);
    DeselectWindow(wn,false);    
    if (nonblank(TLActr.EndTime)) then begin
      TLActr.CostTime = TLActVc_CalculateCostTime(TLActr);
      PutWindowRecord(wn,TLActr);
    end;    
  end;
  TLActDClassEndTimeEFAfter = res;
  return;
end;

function Boolean TLActDClassTransDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ActVc TLActr;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,TLActr);
    DeselectWindow(wn,false);
    TLActr.EndDate = TLActr.TransDate;
    if (nonblank(TLActr.EndTime)) then begin
      TLActr.CostTime = TLActVc_CalculateCostTime(TLActr);
    end;
    PutWindowRecord(wn,TLActr);
  end;
  TLActDClassTransDateEFAfter = res;
  return;
end;

global
function Boolean TLActDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "PRCode": res = TLActDClassPRCodeEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = TLActDClassTransDateEFAfter(wn,fn,rownr,changed);
    case "EndDate": res = TLActDClassEndDateEFAfter(wn,fn,rownr,changed);
    case "StartTime": res = TLActDClassStartTimeEFAfter(wn,fn,rownr,changed);
    case "EndTime": res = TLActDClassEndTimeEFAfter(wn,fn,rownr,changed);
  end;
  TLActDClassAfterEditField = res;
  return;
end;

global
function Boolean TLActDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record ActVc TLAct2r;
  
  res = true;
  switch (wnst) begin
    case Rs_update:
      GetPrevWindowRecord(wn,TLAct2r);
      if (TLAct2r.OKFlag!=0) then begin
        res = false;
        switch (fieldname) begin
          case "Comment": res = true;
        end;
      end;
  end;
  TLActDClassActiveEditField = res;
  return;
end;