external function val CalculateDiscountPercentage(val,val,val);
external function val CalculateDiscountPercentage2(val,val,val,Boolean);
external function string 255 FindPOSCommandText(Integer);
external procedure DisplayIVCashItem(record IVCashVc,Integer);
external procedure OpenNPTSPaymentOneModeTClass(Integer,LongInt,val,val,string);
external procedure OpenNPTSPaymentBLayoutTClass(Integer,LongInt,val,val,string);
external procedure MgrsDiscOverrideIVCashDsm();
external procedure IVCashDClassTouchScreenCreateGC(Integer,string,string);
external procedure ConnectToCCTerminal();
external procedure ReprintLastCCSlip();
remote procedure IVCashDClassTouchScreenCreditNoteRemote(record IVCashVc,var record IVCashVc);
external procedure OpenOnHotelGuestTouchScreenOClass(Integer,LongInt,val,string,string,string);
external procedure SetPOSWindowDisplayAmount(string,val);
external procedure IVCashDchsum(record IVCashVc,Integer);
external function Boolean IVCashDchrsum(record IVCashVc,Integer,Integer);
external updating procedure RecordActionIVCash_Print(var record IVCashVc,string,Boolean);
external procedure QTSumup(var record QTVc);
external procedure IVCashToQT_FromPOS(record IVCashVc,var record QTVc);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
external procedure OpenOnAccountPaymentTouchScreenDClass(Integer,LongInt,string,string);
external procedure CancelNPTSCashPaymentTClass();
external procedure TouchScreenXReading;
external procedure TouchScreenZReading;
external procedure IVDClassTouchScreenReprint();
external updating procedure RestAccDClassTouchScreenTransfertoSL();
external function Integer GetSelectedPOSItemRowIndex(integer);
external procedure RestAccDClassTouchScreenAddOrderDiscount();
external updating procedure ProceedDeferCCTransOClass();
external function Boolean IVCashDClassOnOverStrike(Integer,Integer);
external function val CalculateIVCashCashAmount(record IVCashVc);
remote function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
remote function Integer CalculateLoyaltyPointsPayment_IVCashVc(record IVCashVc,val,var val,var val,var val);
remote procedure IVCashDClassTouchScreenReturnRemote(record IVCashVc,var record IVCashVc);
external procedure RowCalculateTaxMatrix_IVCashVc(var record IVCashVc,Integer,row IVCashVc);
external procedure ORSumup(var record ORVc);
external procedure IVCashToOR_FromPOS(record IVCashVc,var record ORVc);
remote procedure IVSumup(var record IVVc,Boolean);
external procedure IVCashToIV_FromPOS(record IVCashVc,var record IVVc);
external procedure CredCardReversalPOSPIVCashsmExecute(string,string);
external procedure CredCardPOSPIVCashsmExecute(string,string);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure IVCashDClassTouchScreenSeniorCitizenCard();
external procedure IVCashDClassTouchScreenLoyaltyCard;
external updating procedure IVCashDClassTouchScreenLoyaltyPointsPayment();
remote function Integer CustomerSalesPaymentTermType(string);
external function Boolean VolBarcodeScan_RestAccVc(var record RestAccVc,string);
remote procedure RestAccSumup(var record RestAccVc,string);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);
external updating procedure RestAccDClassTouchScreenDeleteItem();
external updating procedure RestAccDClassTouchScreenInvalidateInvoice();
external procedure RestAccDClassTouchScreenLoyaltyPointsBonusExecute();
external procedure RestAccDClassTouchScreenAmendLine();
external updating procedure RestAccDClassTouchScreenVoidRowExecute(string);
external procedure CredCardPOSPIVCashsm();
external updating procedure ProceedChequePayTouchScreenDClass();
external procedure GiftReceiptDClass_RefreshStringList(Integer,record GiftReceiptVc);
external procedure IVCashDClassTouchScreenLoyaltyPointsBonusExecute();
remote function Boolean PriceLookupVClassIVCashVc_PasteArtCode(var record RcVc,record IVCashVc);
remote function Boolean PriceLookupVClassRestAccVc_PasteArtCode(var record RcVc,record RestAccVc);
external procedure IVCashPasteItem(string);
remote function Boolean IVCashVc_PasteQuant(var record IVCashVc,Integer);
remote function Boolean IVCashVc_PasteArtCode(var record IVCashVc,Integer,Boolean,var string,var Integer);
external updating procedure IVCashDClassTouchScreenSaveInvoice();
forward updating procedure IVCashDClassTouchScreenButtonLogin();
external procedure IVCashDClassTouchScreenAllInvoices();
external procedure IVCashDClassTouchScreenOpenInvoices();
external procedure IVCashDClassTouchScreenLookupSerialNr();
external updating procedure IVCashDClassTouchScreenInvalidateInvoice();
external updating procedure IVCashDClassTouchScreenTransfertoSL();
external updating procedure IVCashDClassTouchScreenTransfertoInvoice();
forward updating procedure IVCashDClassTouchScreenTransfertoOrder();
forward updating procedure IVCashDClassTouchScreenTransfertoQuotation();
external updating procedure IVCashDClassTouchScreenSplitItem();
external procedure OpenGiftVoucherTouchScreenDClass(Integer,Integer,LongInt,val,val,string,string,string);
external procedure OpenGiftVoucherSalesTouchScreenDClass(Integer,string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure SetPOSWindowDisplay(string,string);
external function Boolean IVCashDClassVoidRow(var record IVCashVc,Integer);
remote function string 255 CurDrawerCode(string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external procedure OpenNPTSPaymentTClass(Integer,LongInt,val,val,string);
external procedure OpenNPTSCashPaymentTClass(Integer,LongInt,val,val,string,string,string);
external function Boolean IVCashPrintReceipt(Integer,var record IVCashVc,record IVCashVc,Integer,Boolean,Boolean,Integer,Integer);
external procedure TESTHT28ENQ();
external function Boolean CashPayTouchScreenRemote(record RcVc,record RcVc);
external procedure IVCashDClassOnWindowRecordChange(Integer);
remote procedure IVCashSumup(var record IVCashVc,Boolean);
external function Boolean IVCashDClassDeleteRowTest(Integer,Integer);
external procedure OpenSelectModifiers2WClass(Integer,string);
external updating procedure ProceedCCPayTouchScreenDClass();
external updating procedure ProceedCashPayTouchScreenDClass();
external procedure OpenCashPayTouchScreenDClass(Integer,Integer,LongInt,val,val,string,string,string);
external procedure OpenDCPayTouchScreenDClass(Integer,Integer,LongInt,val,val,val,string,string,string);
external procedure OpenCCPayTouchScreenDClass(Integer,Integer,LongInt,val,val,val,string,string,string);
external procedure OpenCCPayTouchScreenDClassWithVAT(Integer,Integer,LongInt,val,val,val,string,string,string,val);
external procedure OpenChequePayTouchScreenDClass(Integer,Integer,LongInt,val,val,string,string,string);
external procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean IVCashDClasstouchscreenitemEFAfter(Integer,Integer,Boolean);
external procedure ExtractObj(string,var Integer,var string);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
external procedure OpenCashDrawer_IVCashVc(record IVCashVc);
external updating procedure OpenPOSSessionsm;
external updating procedure ClosePOSSessionsm;
external procedure POSMoneyInsm;
external procedure POSMoneyOutsm;
external procedure IVCashCashupRnsm;
remote updating function LongInt IVCashVcRecordCheck(var record IVCashVc,record IVCashVc,LongInt,LongInt);
external updating function Boolean DoXMLExport_IVCashVc(var record IVCashVc);
external updating procedure ProceedChangeAddressNPTSSClass();
external updating procedure ProceedChangeTermsNPTSSClass();

function Integer HashTouchScreenPageCode(string tstr)
begin
  LongInt sum;
  Integer i,res;
  
 sum = 0;
  for (i=0;i<len(tstr);i=i+1) begin
    sum = sum + asc(Mid(tstr,i,1));
  end;
  res = BitAnd(sum,65536-1);
  HashTouchScreenPageCode = res;
  return;
end;

global
procedure IVCashDClassLevelTop()
begin
  Integer page,wn;
  
  wn = CurWindow;
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",page);  
  ActivateTile(wn,1);
  PutWindowString(wn,"touchscreenwindowpage",1)
  PutWindowString(wn,"touchscreenwindowpagestack",1);
  PutWindowString(wn,"touchscreenwindowprinterstack","*");
  
  switch (GetWindowClass(wn)) begin
    case "NPTSIVCashDClass":
      if (ClientMode==false) then begin
        ReRunWindowDef(wn);
      end;
  end;
  SetWindowSubset(wn,GetWindowSubset(wn));
  return;
end;

global
procedure IVCashDClassLevelUp()
begin
  Integer page,wn,levelup;
  
  wn = CurWindow;
  levelup = StringToInt(GetWindowString(wn,"touchscreenwindowpageprevious"));  
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",levelup);  
  PutWindowString(wn,"touchscreenwindowpagestack",levelup);
  //touchscreenwindowprinterstack
  ActivateTile(wn,levelup);
  PutWindowString(wn,"touchscreenwindowpage",levelup);
  switch (GetWindowClass(wn)) begin
    case "NPTSIVCashDClass":
      ReRunWindowDef(wn);
  end;
  SetWindowSubset(wn,GetWindowSubset(wn));
  return;
end;

global
procedure IVCashDClassLevelDown()
begin
  /*
  Integer page,wn;
  
  wn = CurWindow;
  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  PutWindowString(wn,"touchscreenwindowpageprevious",page);
  page = page + 1;
  ActivateTile(wn,page);
  PutWindowString(wn,"touchscreenwindowpage",page);
  SetWindowSubset(wn,GetWindowSubset(wn));
  */
  return;
end;

global
procedure IVCashDClassGotoPage(string pagestr,string printer)
begin
  Integer page,wn,sline;
  string 255 stack;
  string 255 prstack;
  
  wn = CurWindow;
  page = StringToInt(pagestr);
  
  sline = SelectedListLine(wn);

  //page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  stack = stack & "," & page;
  PutWindowString(wn,"touchscreenwindowpagestack",stack);
  
  prstack = GetWindowString(wn,"touchscreenwindowprinterstack");
  if (printer=="") then begin
    prstack = prstack & ",*";
  end else begin
    prstack = prstack & "," & printer;
  end;
  PutWindowString(wn,"touchscreenwindowprinterstack",stack);
  
  //ActivateTile(wn,page);
  PutWindowString(wn,"touchscreenwindowpage",page);
  SetWindowSubset(wn,GetWindowSubset(wn));
  switch (GetWindowClass(wn)) begin
    case "NPTSIVCashDClass":
      ReRunWindowDef(wn);
  end;  
  SetSelectedListLine(wn,sline);
  return;
end;

global
procedure IVCashDClassTouchScreenStackButtonExecute(string tag)
begin
  integer i,rwcnt,wn;
  string 60 ostr;
  string 60 prstr;
  Integer pos,prpos;
  string 255 stack;
  string 255 prstack;
  array string 255 stackarr;
  array string 255 prstackarr;
  longint stackend,sline;
  
  wn = CurWindow;
  
  //StopAlert("IVCashDClassTouchScreenStackButton, tag: " & tag);
  
  //page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  stack = GetWindowString(wn,"touchscreenwindowpagestack");
  prstack = GetWindowString(wn,"touchscreenwindowprinterstack");
  
  stackend = 0;
  pos = 0;
  prpos = 0;
  ExtractObj(stack,pos,ostr);
  ExtractObj(prstack,prpos,prstr);
  
  while (nonblank(ostr)) begin
    stackarr[stackend] = ostr;
    prstackarr[stackend] = prstr;
    stackend = stackend + 1;
    ExtractObj(stack,pos,ostr);
    ExtractObj(prstack,prpos,prstr);
  end;
  
  stackend = stackend - 1;
  
  while ((stackend>0) and (stackarr[stackend]<>tag)) begin
    stackend = stackend - 1;
  end;
  
  stack = stackarr[0];
  prstack = prstackarr[0];
  
  for (i = 1; i<=stackend; i = i + 1) begin
    stack = stack & "," & stackarr[i];
    prstack = prstack & "," & prstackarr[i];
  end;
  
  sline = SelectedListLine(wn);
  
  PutWindowString(wn,"touchscreenwindowpagestack",stack);
  PutWindowString(wn,"touchscreenwindowprinterstack",prstack);
  
  PutWindowString(wn,"touchscreenwindowpage",stackarr[stackend]);
  SetWindowSubset(wn,GetWindowSubset(wn));
  ReRunWindowDef(wn);
  
  SetSelectedListLine(wn,sline);
  
  return;
end;

global
procedure IVCashDClassTouchScreenStackButton()
begin
  string 255 tag;

  tag = PushButtonTag;
  IVCashDClassTouchScreenStackButtonExecute(tag);
  return;
end;

global
procedure NPTSIVCashDClassTouchScreenStackButton()
begin
  string 255 tag;

  tag = PushButtonTag;
  IVCashDClassTouchScreenStackButtonExecute(tag);
  return;
end;

global
procedure IVCashDClassPageTop()
begin
  IVCashDClassTouchScreenStackButtonExecute("1");
  return;
end;

global
function boolean POSButtonsForWindow(integer wn,var record POSButtonsVc POSBr)
begin
  record LocalMachineBlock LMb;
  boolean found;
  
  BlockLoad(LMb);
  POSBr.WindowClass = GetWindowClass(wn);
  POSBr.POSButtonGroupCode = LMb.POSButtonGroup;
  POSBr.Page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));

  found = ReadFirstMain(POSBr,3,true);
  
  if (found==false) then begin
    POSBr.WindowClass = GetWindowClass(wn);
    POSBr.POSButtonGroupCode = "";
    POSBr.Page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    found = ReadFirstMain(POSBr,3,true);
  end;
  
  if (found==false) then begin
    POSBr.WindowClass = "";
    POSBr.POSButtonGroupCode = "";
    POSBr.Page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    found = ReadFirstMain(POSBr,3,true);
  end;
  
  POSButtonsForWindow = found;
  return;
end;

global
function Boolean NPTSSearchItemRClassOnOKWindow(Integer wn)
begin
  Integer nwn,mwn; 
  transaction record RcVc gNPTSRepSpec;
  
  mwn = MotherWindow(wn);
  DeselectWindow(wn,false)
  GetWindowRecord(wn,gNPTSRepSpec);
  CloseWindow(wn);
  nwn = OpenWindow("INNPTSSClass",0,mwn,"","",gNPTSRepSpec);  
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass": 
  end;
  NPTSSearchItemRClassOnOKWindow = false;
  return;
end;

global
procedure ProceedNPTSSearchItemRClass()
begin
  DeselectWindow(CurWindow,false);
  NPTSSearchItemRClassOnOKWindow(CurWindow);
  return;
end;

global
function Boolean NPTSSearchItemRClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
  Boolean res;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedNPTSSearchItemRClass;
      res = true;
    case 2: 
      CancelNPTSCashPaymentTClass;
      res = true;
  end;
  NPTSSearchItemRClassFunctionKey = res;
  return;
end;

global
function Boolean NPTSSearchCURClassOnOKWindow(Integer wn)
begin
  Integer nwn,mwn; 
  transaction record RcVc gNPTSRepSpec;

  mwn = MotherWindow(wn);
  GetWindowRecord(wn,gNPTSRepSpec);
  CloseWindow(wn);
  nwn = OpenWindow("CUNPTSSClass",0,mwn,"","",gNPTSRepSpec);  
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass": 
  end;
  NPTSSearchCURClassOnOKWindow = false;
  return;
end;

global
procedure ProceedNPTSSearchCURClass()
begin
  DeselectWindow(CurWindow,false);
  NPTSSearchCURClassOnOKWindow(CurWindow);
  return;
end;

global
function Boolean NPTSSearchCURClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
  Boolean res;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedNPTSSearchCURClass;
      res = true;
    case 2: 
      CancelNPTSCashPaymentTClass;
      res = true;
  end;
  NPTSSearchCURClassFunctionKey = res;
  return;
end;

global
function Boolean NPTSSearchBFCURClassOnOKWindow(Integer wn)
begin
  Integer nwn,mwn; 
  transaction record RcVc gNPTSRepSpec;
  record CUVc CUr;

  mwn = MotherWindow(wn);
  GetWindowRecord(wn,gNPTSRepSpec);
  CloseWindow(wn);
  nwn = OpenWindow("CUNPTS2SClass",0,mwn,"","",CUr);
  PutWindowString(nwn,"BrowseFilterString",gNPTSRepSpec.f1)
  UpdateBrowses("CUVc");
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass": 
  end;
  NPTSSearchBFCURClassOnOKWindow = false;
  return;
end;

global
procedure ProceedNPTSSearchBFCURClass()
begin
  DeselectWindow(CurWindow,false);
  NPTSSearchBFCURClassOnOKWindow(CurWindow);
  return;
end;

global
function Boolean NPTSSearchBFCURClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
  Boolean res;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      ProceedNPTSSearchBFCURClass;
      res = true;
    case 2: 
      CancelNPTSCashPaymentTClass;
      res = true;
  end;
  NPTSSearchBFCURClassFunctionKey = res;
  return;
end;

global
function Boolean PriceLookupVClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record RestAccVc RestAccr;
  Integer mwn;
  
  res = false;
  switch (fieldname) begin
    case "f1":
      GetWindowRecord(wn,RepSpec);
      mwn = MotherWindow(wn);
      if (mwn) then begin
        switch (GetWindowClass(mwn)) begin
          case "NPTSIVCashDClass":
            GetWindowRecord(mwn,IVCashr);
            if (PriceLookupVClassIVCashVc_PasteArtCode(RepSpec,IVCashr)==false) then begin
              MessageBox(20860,"");
            end;
          case "RestAccDClass":
            GetWindowRecord(mwn,RestAccr);
            if (PriceLookupVClassRestAccVc_PasteArtCode(RepSpec,RestAccr)==false) then begin
              MessageBox(20860,"");
            end;
        end;
      end;
      PutWindowRecord(wn,RepSpec);
      WindowFieldGoto(wn,RepSpec,-1,"f1",false);
  end;
  PriceLookupVClassOnEnterKey = res;
  return;
end;

global
procedure ProceedPriceLookupVClass()
begin
  Integer wn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record RestAccVc RestAccr;
  Integer mwn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  mwn = MotherWindow(wn);
  if (mwn) then begin
    switch (GetWindowClass(mwn)) begin
      case "NPTSIVCashDClass":
        GetWindowRecord(mwn,IVCashr);
        PriceLookupVClassIVCashVc_PasteArtCode(RepSpec,IVCashr);
      case "RestAccDClass":
        GetWindowRecord(mwn,RestAccr);      
        PriceLookupVClassRestAccVc_PasteArtCode(RepSpec,RestAccr);
    end;
  end;
  PutWindowRecord(wn,RepSpec);
  WindowFieldGoto(wn,RepSpec,-1,"f1",false);
  return;
end;

global
function Boolean VolBarcodeScan_IVCashVc(var record IVCashVc IVCashr,string barcode)
begin
  Boolean res,ReturnModef;
  record VolumBarcodeBlock VBb;
  row VolumBarcodeBlock VBbrw;
  Integer i,rwcnt,pos,rownr;
  string 255 artcode,weight,weightdec,depart,price,checkdigit;
  row IVCashVc IVCashrw;
  Integer sernrf;
  string 255 inwarning;
  val q; 
  
  BlockLoad(VBb);
  rwcnt = MatRowCnt(VBb);
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VBb,i,VBbrw);
      switch (VBbrw.Type) begin
        case kVolumetricBarcodeDefault:
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeArtCode:
          artcode = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeWeight:
          weight = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeWeightDecimals:
          weightdec = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeDepartment:
          depart = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodePrice:
          price = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeCheckDigit:
          checkdigit = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
      end;
    end;
    ClearRow(IVCashr,IVCashrw,1);    
    if (nonblank(artcode)) then begin
      IVCashr.DepCode = depart;
      rownr = MatRowCnt(IVCashr);
      IVCashrw.ArtCode = artcode;
      MatRowPut(IVCashr,rownr,IVCashrw);
      if (IVCashVc_PasteArtCode(IVCashr,rownr,ReturnModef,inwarning,sernrf)) then begin
        MatRowGet(IVCashr,rownr,IVCashrw);        
        IVCashrw.Quant = StringToVal(weight,M4Qty);
        if (ReturnModef) then begin
          IVCashrw.Quant = -IVCashrw.Quant;
        end;
        q = StringToVal("0." & weightdec,M4Qty);
        if (ReturnModef) then begin
          IVCashrw.Quant = IVCashrw.Quant - q;
        end else begin
          IVCashrw.Quant = IVCashrw.Quant + q;
        end;
//        if (IVCashrw.Quant==0) then begin
//          IVCashrw.Quant = 1;
//        end;
        if (nonblank(price)) then begin
          IVCashrw.Price = StringToVal(price,M423Val)/100.00;
        end;
        MatRowPut(IVCashr,rownr,IVCashrw);
        if (IVCashVc_PasteQuant(IVCashr,rownr)) then begin    
        end;
        MatRowGet(IVCashr,rownr,IVCashrw);
        res = true;        
      end;
    end;
  end;
  VolBarcodeScan_IVCashVc = res;
  return;
end;

global
updating function Boolean VolBarcodeScanVClassOnOKWindow(Integer wn)
begin
  Integer mwn; 
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record RestAccVc RestAccr;
  record IVCashVc prevIVCashr;
  LongInt printrownr;
  record LocalMachineBlock LMb;
  
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      BlockLoad(LMb);
      GetWindowRecord(wn,RepSpec);
      GetWindowRecord(mwn,IVCashr);      
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        if (VolBarcodeScan_IVCashVc(IVCashr,RepSpec.f1)) then begin
          if (LMb.IncrementalReceiptPrinting!=0) then begin
            GetPrevWindowRecord(mwn,prevIVCashr);      
            printrownr = StringToLongInt(GetWindowString(mwn,"touchscreenitemlastrownr"));
            if (printrownr>=0) then begin
              if (IVCashPrintReceipt(mwn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,WindowState(mwn))) then begin
              end;
            end;
          end;
          IVCashSumup(IVCashr,true);
          PutWindowString(mwn,"touchscreenitemlastrownr",MatRowCnt(IVCashr)-1);
          PutWindowRecord(mwn,IVCashr);      
          IVCashDClass_RefreshStringList(mwn,IVCashr);
          if (WindowDoOK(mwn,0)==false) then begin 
          end;
        end;
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
      end;
      CloseWindow(wn);
    case "RestAccDClass":
      GetWindowRecord(wn,RepSpec);
      GetWindowRecord(mwn,RestAccr);      
      if (RestAccr.Closed==0) then begin
        if (VolBarcodeScan_RestAccVc(RestAccr,RepSpec.f1)) then begin
          RestAccSumup(RestAccr,"");
          PutWindowRecord(mwn,RestAccr);      
          RestAccDClass_RefreshStringList(mwn,RestAccr);
          if (WindowDoOK(mwn,0)==false) then begin 
          end;
        end;
      end;
      CloseWindow(wn);
  end;

  VolBarcodeScanVClassOnOKWindow = false;
  return;
end;

global
updating procedure ProceedVolBarcodeScanVClass()
begin
  DeselectWindow(CurWindow,false);
  VolBarcodeScanVClassOnOKWindow(CurWindow);
  return;
end;

global
updating function Boolean VolBarcodeScanVClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "f1":
      res = VolBarcodeScanVClassOnOKWindow(wn);
  end;
LVolBarcodeScanVClassOnEnterKey:;  
  VolBarcodeScanVClassOnEnterKey = res;
  return;
end;

global
updating function Boolean SalesAssistantVClassOnOKWindow(Integer wn)
begin
  Integer mwn; 
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  LongInt printrownr;
  record LocalMachineBlock LMb;
  Integer wnst;

  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      GetWindowRecord(wn,RepSpec);
      GetWindowRecord(mwn,IVCashr);      
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        ClearRow(IVCashr,IVCashrw,kInvoiceRowTypeSalesAssistant);    
        IVCashrw.SalesAssistant = RepSpec.f1;
        MatRowPut(IVCashr,MatRowCnt(IVCashr),IVCashrw);
        PutWindowRecord(mwn,IVCashr);      
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        wnst = WindowState(mwn);
        if (WindowDoOK(mwn,0)) then begin 
          BlockLoad(LMb);
          if (LMb.IncrementalReceiptPrinting!=0) then begin
            GetPrevWindowRecord(mwn,prevIVCashr);      
            printrownr = StringToLongInt(GetWindowString(mwn,"touchscreenitemlastrownr"));
            if (printrownr>=0) then begin
              if (IVCashPrintReceipt(mwn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
              end;
            end;
          end;
          PutWindowString(mwn,"touchscreenitemlastrownr",MatRowCnt(IVCashr)-1);
        end;
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
      end;
      CloseWindow(wn);
    case "RestAccDClass":
      GetWindowRecord(wn,RepSpec);
      GetWindowRecord(mwn,RestAccr);      
      if (RestAccr.Closed==0) then begin
        ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeSalesAssistant);    
        RestAccrw.SalesAssistant = RepSpec.f1;
        MatRowPut(RestAccr,MatRowCnt(RestAccr),RestAccrw);
        PutWindowRecord(mwn,RestAccr);      
        RestAccDClass_RefreshStringList(mwn,RestAccr);
        if (WindowDoOK(mwn,0)==false) then begin 
        end;
      end;
      CloseWindow(wn);
  end;
  SalesAssistantVClassOnOKWindow = false;
  return;
end;

global
updating procedure ProceedSalesAssistantVClass()
begin
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  SalesAssistantVClassOnOKWindow(wn);
  return;
end;

global
updating function Boolean SalesAssistantVClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  
  switch (fieldname) begin
    case "f1":
      res = SalesAssistantVClassOnOKWindow(wn);
  end;
LSalesAssistantVClassOnEnterKey:;  
  SalesAssistantVClassOnEnterKey = res;
  return;
end;

global
procedure POSManagersAction2(Integer awn,string action,string arg)
begin
  Integer wn,mwn;
  record USRowVc USRr;

  OverrideLogout;
  mwn = CurWindow;
  USRr.TextStr = action;
//  USRr.Name = arg;
  USRr.Sign = arg;
  wn = OpenWindow("POSLoginClass",0,awn,"","",USRr);
  OverrideLogin;
  return;
end;

global
procedure POSManagersAction(Integer awn,string action)
begin
  Integer wn,mwn;
  record USRowVc USRr;

  OverrideLogout;
  mwn = CurWindow;
  USRr.TextStr = action;
  wn = OpenWindow("POSLoginClass",0,awn,"","",USRr);
  OverrideLogin;
  return;
end;

global
updating procedure IVCashDClassTouchScreenDeleteItem()
begin
  Integer wn,matrowix;
  record IVCashVc IVCashr;
  Integer i,rwcnt;
  row IVCashVc IVCashrw;
  val sum4;

  wn = CurWindow;
  if (SelectedListLine(wn)>=0) then begin
    if (UserCanAction("AllowIVTSRowsDelete",IsStandardProduct==true)==false) then begin
      POSManagersAction(wn,"DeleteItem");
      goto LIVCashDClassTouchScreenDeleteItem;
    end;
    DeselectWIndow(wn,true);
    GetWindowRecord(wn,IVCashr);
    if (IVCashr.OKFlag!=0) then begin goto LIVCashDClassTouchScreenDeleteItem; end;
    if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenDeleteItem; end;

    matrowix = GetSelectedPOSItemRowIndex(wn);
    if (matrowix>=0) then begin
      if (IVCashDClassDeleteRowTest(wn,matrowix)) then begin
        GetWindowRecord(wn,IVCashr);
        sum4 = IVCashr.Sum4;
        IVCashDClassOnOverStrike(wn,matrowix);
//      matrowix = GetSelectedPOSItemRowIndex(wn); // Why again? On windows, the selection is cleared between the calls to this function, can't figure out why.
        MatRowDelete(IVCashr,matrowix);
        IVCashSumup(IVCashr,true);
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr,i,IVCashrw);
          switch (IVCashrw.stp) begin
            case kInvoiceRowTypeCreditCardPayment:
              IVCashrw.Sum = IVCashrw.Sum - (sum4-IVCashr.Sum4);
              MatRowPut(IVCashr,i,IVCashrw);
              i = rwcnt;
          end;
        end;
        PutWindowRecord(wn,IVCashr);
        if (GuiType==kGuiCocoa) then begin
          IVCashDClassOnWindowRecordChange(wn);
        end else begin
          IVCashDClass_RefreshStringList(wn,IVCashr);
        end;
      end;
      WindowDoOK(wn,0);
      WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
      SetPOSWindowDisplay("","");
      OverrideLogout;
    end;
  end;
LIVCashDClassTouchScreenDeleteItem:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenVoidRow()
begin
  Integer wn,line,rownr;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,tag,t2;
  record LocalMachineBlock LMb;
  Integer wnst;
  LongInt printrownr;

  wn = CurWindow;
  line = SelectedListLine(wn);
  if (line>=0) then begin
    if (UserCanAction("AllowNPTSIVRowsVoid",IsStandardProduct==true)==false) then begin
      POSManagersAction(wn,"VoidRow");
      goto LIVCashDClassTouchScreenVoidRow;
    end;
    tag = GetListTag(wn,line);
    rownr = StringToInt(tag);
    if (rownr>=0) then begin
      DeselectWIndow(wn,true);
      GetWindowRecord(wn,IVCashr);
      wnst = WindowState(wn);
      if (IVCashr.OKFlag!=0) then begin goto LIVCashDClassTouchScreenVoidRow; end;
      if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenVoidRow; end;
      if (IVCashDClassVoidRow(IVCashr,rownr)) then begin
        BlockLoad(LMb);
        PutWindowRecord(wn,IVCashr);    
        MatRowGet(IVCashr,rownr,IVCashrw);
        IVCashDClass_RefreshStringList(wn,IVCashr);
        tstr = ValToString(-IVCashrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
        tstr = tstr & t2;
        if (HasLocalization("POL")) then begin
          tstr = tstr & chr(10) & USetStr(24171) & ": " & IVCashr.Sum4;
        end;
        SetPOSWindowDisplay(IVCashrw.ArtCode & " " & IVCashrw.Spec,tstr);
        DeselectWindow(wn,false);
        if (WindowDoOK(wn,0)) then begin
          GetWindowRecord(wn,IVCashr);
          printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
          if (printrownr>=0) then begin
            GetPrevWindowRecord(wn,prevIVCashr);
            if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
            end;
          end;
          PutWindowString(wn,"touchscreenitemlastrownr",MatRowCnt(IVCashr)-1);
          WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false);
        end;
        OverrideLogout;
      end;
    end;
  end;
LIVCashDClassTouchScreenVoidRow:;  
  return;
end;

global
procedure RunReportOnServer(string tagstr)
begin
  record RcVc RepSpec;
  string 255 rclass,repname;
  LongInt pos;
  Integer wn;
  
  pos = 0;
  
  GetNextSubstring(tagstr,pos,",",rclass);
  GetNextSubstring(tagstr,pos,",",repname);
  
  RepSpec.repname = repname;
  RepSpec.Media = mtScreen;
  ReportDefaults(RepSpec,rclass);
  RepSpec.LSRunOnServer = 1;
  wn = OpenWindow(rclass,0,0,"","",RepSpec);
  if (wn>0) then begin
    ReportSpecificationDefaults(wn);  
  end;
  return;
end;

global
procedure IVCashDClassTouchScreenReprint()
begin
  Integer wn;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  
  wn = CurWindow;
  if (UserCanAction("AllowNPTSReprint",IsStandardProduct==true)==false) then begin
    POSManagersAction(wn,"Reprint");
    goto LIVCashDClassTouchScreenReprint;
  end;
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.OKFlag!=0) then begin
    GetPrevWindowRecord(wn,prevIVCashr);
    IVCashPrintReceipt(wn,IVCashr,prevIVCashr,-1,false,false,0,WindowState(wn));
  end;
  OverrideLogout;
LIVCashDClassTouchScreenReprint:;
  return;  
end;

global
procedure NPTSSearchItemExecute(Integer mwn)
begin
  record RcVc RepSpec;
  Integer nwn;
  record IVCashVc IVCashr;
  record IVVc IVr;
  
  ReportDefaults(RepSpec,"SearchItemRClass");
  RepSpec.UsedOnly = mwn;
  RepSpec.f3 = "IVCashDClass";
  RepSpec.repname = "SearchItemRn";
  RepSpec.Media = mtScreen;
  nwn = OpenWindow("NPTSSearchItemRClass",0,mwn,"","",RepSpec);
  GetWindowRecord(nwn,RepSpec);
  switch (GetWindowFileName(mwn)) begin
    case "IVCashVc": 
      GetWindowRecord(mwn,IVCashr);
      RepSpec.FirstAcc = IVCashr.CustCode;
      RepSpec.CurncyCode = IVCashr.CurncyCode;
      RepSpec.Language = IVCashr.LangCode;
      RepSpec.f5 = IVCashr.CustCat;
      RepSpec.LastAcc = IVCashr.PriceList;
      RepSpec.AccStr = IVCashr.RebCode;
      RepSpec.d1 = IVCashr.TransDate;
      RepSpec.sStartTime = IVCashr.TransTime;
      RepSpec.FirstAcc = IVCashr.CustCode;
      RepSpec.TransStr = IVCashr.PayDeal;
      RepSpec.Stext = IVCashr.Region;
      RepSpec.ObjStr = IVCashr.Location;
    case "IVVc": 
      GetWindowRecord(mwn,IVr);
      RepSpec.FirstAcc = IVr.CustCode;
      RepSpec.CurncyCode = IVr.CurncyCode;
      RepSpec.Language = IVr.LangCode;
      RepSpec.f5 = IVr.CustCat;
      RepSpec.LastAcc = IVr.PriceList;
      RepSpec.AccStr = IVr.RebCode;
      RepSpec.d1 = IVr.TransDate;
      RepSpec.sStartTime = IVr.TransTime;
      RepSpec.FirstAcc = IVr.CustCode;
      RepSpec.TransStr = IVr.PayDeal;
      RepSpec.Stext = IVr.Region;
      RepSpec.ObjStr = IVr.Location;
  end;
  PutWindowRecord(nwn,RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  return;  
end;

global
procedure NPTSSearchItemCancel()
begin
  CloseWindow(CurWindow);
  return;  
end;

global
procedure NPTSSearchItemOnceMore()
begin
  Integer mwn;
  
  mwn = MotherWindow(CurWindow);
  CloseWindow(CurWindow);
  NPTSSearchItemExecute(mwn);
  return;  
end;

global
procedure NPTSSearchCUExecute(Integer mwn)
begin
  record RcVc RepSpec;
  Integer nwn;
  transaction record RcVc gNPTSRepSpec;
  
  ReportDefaults(RepSpec,"NPTSSearchCURClass");
  RepSpec.UsedOnly = mwn;
  RepSpec.f3 = GetWindowClass(mwn);
  RepSpec.repname = "SearchCuRn";
  RepSpec.Media = mtScreen;
  RepSpec.flags[0] = 4;
  RepSpec.f12 = GetWindowFileName(mwn);
  RecordCopy(gNPTSRepSpec,RepSpec);
  nwn = OpenWindow("NPTSSearchCURClass",0,mwn,"","",RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  return;  
end;

global
procedure NPTSSearchCUExecuteChangeAddress()
begin
  record RcVc RepSpec;
  Integer nwn,mwn;
  
  mwn = CurWindow;
  DeselectWindow(mwn,false);
  ReportDefaults(RepSpec,"NPTSSearchCURClass");
  RepSpec.UsedOnly = mwn;
  RepSpec.f3 = "ChangeAddressNPTSSClass";
  RepSpec.repname = "SearchCuRn";
  RepSpec.Media = mtScreen;
  RepSpec.flags[0] = 4;
  RepSpec.f12 = GetWindowFileName(mwn);
  nwn = OpenWindow("NPTSSearchCURClass",0,mwn,"","",RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  return;  
end;

global
procedure NPTSSearchCustomerOnceMore()
begin
  Integer mwn;
  
  mwn = MotherWindow(CurWindow);
  CloseWindow(CurWindow);
  NPTSSearchCUExecute(mwn);
  return;  
end;

global
updating procedure IVCashDClassTouchScreenPrint()
begin
  record IVCashVc IVCashr;

  if (WindowDoOK(CurWindow,0)) then begin
    GetWindowRecord(CurWindow,IVCashr);
    if (IVCashr.OKFlag!=0) then begin//must work like this at least for Poland but i think for any country
      RecordActionIVCash_Print(IVCashr,"",false);
    end;
  end;
  return;
end;

global
procedure IVCashDClassTouchScreenEnterReferenceNumber()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("EnterReferenceNumberNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVCashDClassTouchScreenPasteButtonDo(integer butnr)
begin
  Integer i,rwcnt,wn,matrowix,sline;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;
  record IVCashVc prevIVCashr;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Boolean found;
  record RahaxiBlock Rahaxib;
  Integer nwn;
  string 255 tag;
  record RcVc RepSpec;
  Integer line,rownr;
  string 255 tstr,t2;
  val ccval;
  transaction record RcVc gNPTSRepSpec;

  wn = CurWindow;
  DeselectWIndow(wn,true);
  GetWindowRecord(wn,IVCashr);
  
  found = POSButtonsForWindow(wn,POSBr);
    
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    
    if (butnr>rwcnt) then begin
      goto LIVCashDClassTouchScreenPasteButtonDo;
    end;
    
    MatRowGet(POSBr,butnr-1,POSBrw);
    switch (POSBrw.ButtonType) begin
      case kPOSButtonTypeGotoPage:
        IVCashDClassGotoPage(POSBrw.Code,POSBrw.PrintGroupCode);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypOpenInvoices:
        IVCashDClassTouchScreenOpenInvoices;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeAllInvoices:
        IVCashDClassTouchScreenAllInvoices;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeReprintReceipt:
        IVCashDClassTouchScreenReprint;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeReprintLastCCSlip:
        ReprintLastCCSlip;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeConnectToCCTerminal:
        ConnectToCCTerminal;
        goto LIVCashDClassTouchScreenPasteButtonDo;
    end;
  end;
  
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,prevIVCashr);
      if (prevIVCashr.OKFlag!=0) then begin
        goto LIVCashDClassTouchScreenPasteButtonDo;
      end;
      if (prevIVCashr.Invalid!=0) then begin 
        goto LIVCashDClassTouchScreenPasteButtonDo; 
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        goto LIVCashDClassTouchScreenPasteButtonDo;
      end;
      if (IVCashr.Invalid!=0) then begin 
        goto LIVCashDClassTouchScreenPasteButtonDo; 
      end;
  end;
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    
    if (butnr>rwcnt) then begin
      goto LIVCashDClassTouchScreenPasteButtonDo;
    end;
    
    MatRowGet(POSBr,butnr-1,POSBrw);
    switch (POSBrw.ButtonType) begin
      case kPOSButtonTypeItem:
        PutWindowString(wn,"touchscreenitem",POSBrw.Code);
        PutWindowString(wn,"touchscreenitemqty",1.00);
        DeselectWindow(wn,false);
        IVCashDClasstouchscreenitemEFAfter(wn,0,true);
/*        
what is it for ?  , just makes line not to be selected
        switch (GetWindowClass(wn)) begin
          case "NPTSIVCashDClass":
            ReRunWindowDef(wn);
        end;
*/        
        // WindowFieldGoto(wn,IVCashr,-1,"touchscreenitem",true);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeModifier:
        OpenSelectModifiers2WClass(wn,POSBrw.Code);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeGotoPage:
        IVCashDClassGotoPage(POSBrw.Code,POSBrw.PrintGroupCode);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeOnAccountPayment:
        OpenOnAccountPaymentTouchScreenDClass(wn,IVCashr.SerNr,POSBrw.Code,POSBrw.Label);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypePaymentButtonsLayout:
        OpenNPTSPaymentBLayoutTClass(wn,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypePaymentOneMode:
        OpenNPTSPaymentOneModeTClass(wn,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypePayment:
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            // OpenCashPayTouchScreenDClass(wn,-1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
/*
retval is calculted in sumup
            rwcnt = MatRowCnt(IVCashr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVCashr,i,IVCashrw);
              switch (IVCashrw.stp) begin
                case kInvoiceRowTypeCashPayment:
                  IVCashr.RetValue = IVCashr.RetValue - MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
                case kInvoiceRowTypeLoyaltyPointsPayment:
                  IVCashr.RetValue = IVCashr.RetValue - MulRateToBase1(IVCashrw.CurncyCode,IVCashrw.Sum,IVCashrw.FrRate,IVCashrw.ToRateB1,IVCashrw.ToRateB2,IVCashrw.BaseRate1,IVCashrw.BaseRate2,DefaultCurRoundOff);
                case kInvoiceRowTypeCreditCardPayment:
                  IVCashr.RetValue = IVCashr.RetValue - IVCashrw.Sum;
                case kInvoiceRowTypeChequePayment:
                  IVCashr.RetValue = IVCashr.RetValue - IVCashrw.Sum;
                case kInvoiceRowTypeGiftVoucherPayment:
                  IVCashr.RetValue = IVCashr.RetValue - IVCashrw.Sum;
              end;
            end;
*/                
            OpenNPTSPaymentTClass(wn,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode);
          end;
          goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCashPayment:
        OpenNPTSCashPaymentTClass(wn,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeGiftVoucherPayment:
        OpenGiftVoucherTouchScreenDClass(wn,-1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeGiftVoucherSales:
        OpenGiftVoucherSalesTouchScreenDClass(wn,POSBrw.Code,POSBrw.Label);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCreateGC:
        IVCashDClassTouchScreenCreateGC(wn,POSBrw.Code,POSBrw.Label);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeChequePayment:
        OpenChequePayTouchScreenDClass(wn,-1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCreditCardPayment:
        SetPOSWindowDisplayAmount(USetStr(27350),IVCashr.Sum4);
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            OpenCCPayTouchScreenDClass(wn,-1,IVCashr.SerNr,IVCashr.Sum4,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalBambora:
            OpenCCPayTouchScreenDClassWithVAT(wn,-1,IVCashr.SerNr,IVCashr.Sum4,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label,IVCashr.Sum3);
          case kLocalCCTerminalPCEFTPOS:
            rwcnt = MatRowCnt(IVCashr);
            for (i=0;i<rwcnt;i=i+1) begin
              MatRowGet(IVCashr,i,IVCashrw);
              switch (IVCashrw.stp) begin
                case kInvoiceRowTypeCreditCardPayment:
                  ccval = ccval + IVCashrw.Sum;
              end;
            end;
            if (ccval==0) then begin
              ccval = IVCashr.Sum4;
            end;          
            OpenCCPayTouchScreenDClass(wn,-1,IVCashr.SerNr,ccval,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalYomaniBanksys:
            CredCardPOSPIVCashsmExecute(POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalVerifoneBanksys:
            CredCardPOSPIVCashsmExecute(POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalIngenico6550:
            CredCardPOSPIVCashsmExecute(POSBrw.Code,POSBrw.Label);
          otherwise
            CredCardPOSPIVCashsm;
        end;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCreditCardPaymentReversal:
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            // OpenCCPayReversalTouchScreenDClass(wn,-1,IVCashr.SerNr,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
          case kLocalCCTerminalYomaniBanksys:
            CredCardReversalPOSPIVCashsmExecute(POSBrw.Code,POSBrw.Label);
          otherwise
            // CredCardReversalPOSPIVCashsm;
        end;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeDebitCardPayment:
          SetPOSWindowDisplayAmount(USetStr(27350),IVCashr.Sum4);
        BlockLoad(Rahaxib);
        switch (Rahaxib.TerminalType) begin
          case kLocalCCTerminalNone:
            OpenDCPayTouchScreenDClass(wn,-1,IVCashr.SerNr,IVCashr.Sum4,IVCashr.RetValue,IVCashr.Sum4-IVCashr.TendValue,IVCashr.CurncyCode,POSBrw.Code,POSBrw.Label);
        end;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypePOSCommand:
        matrowix = GetSelectedPOSItemRowIndex(wn);
        sline = SelectedListLine(wn);       
        switch (SetFromString(323,POSBrw.Code)) begin
          case kPOSCommandsTypeVoidRow:
            if (UserCanAction("AllowNPTSIVRowsVoid",IsStandardProduct==true)==false) then begin
              POSManagersAction(wn,"VoidRow");
              goto LIVCashDClassTouchScreenPasteButtonDo;
            end;
            nwn = OpenWindow("VoidNPTSSClass",0,wn,"","",RepSpec);  
          case kPOSCommandsTypeQuantityAddOne:
            if (matrowix>=0) then begin
              MatRowGet(IVCashr,matrowix,IVCashrw);
              IVCashrw.Quant = IVCashrw.Quant + 1;
              MatRowPut(IVCashr,matrowix,IVCashrw);
              if (IVCashVc_PasteQuant(IVCashr,matrowix)) then begin    
                PutWindowRecord(wn,IVCashr);    
                IVCashDClass_RefreshStringList(wn,IVCashr);
                SetSelectedListLine(wn,sline);
                DisplayIVCashItem(IVCashr,matrowix);
              end;
            end;
          case kPOSCommandsTypeQuantitySubOne:
            if (matrowix>=0) then begin
              MatRowGet(IVCashr,matrowix,IVCashrw);
              IVCashrw.Quant = IVCashrw.Quant - 1;
              MatRowPut(IVCashr,matrowix,IVCashrw);
              if (IVCashVc_PasteQuant(IVCashr,matrowix)) then begin    
                PutWindowRecord(wn,IVCashr);    
                IVCashDClass_RefreshStringList(wn,IVCashr);
                SetSelectedListLine(wn,sline);
                DisplayIVCashItem(IVCashr,matrowix);
              end;
            end;
          case kPOSCommandsTypeQuantity:
            if (matrowix>=0) then begin
              tstr = FindPOSCommandText(kPOSCommandsTypeQuantity);
              PutWindowString(wn,"ivcashcommand",tstr);
              WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",true);
              WindowFieldSetSelection(wn,len(tstr));
            end;
          case kPOSCommandsTypeRebate:
            if (matrowix>=0) then begin
              tstr = FindPOSCommandText(kPOSCommandsTypeRebate);
              PutWindowString(wn,"ivcashcommand",tstr);
              WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",true);
              WindowFieldSetSelection(wn,len(tstr));
            end;
          case kPOSCommandsTypeQuantityAndItem:
          case kPOSCommandsTypeDeleteRow:
            qupdating.IVCashDClassTouchScreenDeleteItem;
        end;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeOnHotelGuestAccount:
        OpenOnHotelGuestTouchScreenOClass(wn,IVCashr.SerNr,IVCashr.Sum4,IVCashr.Resource,POSBrw.Code,POSBrw.Label);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeVolumetricBarCodeScan:
        ReportDefaults(RepSpec,"VolBarCodeScanVClass");
        RepSpec.UsedOnly = wn;
        nwn = OpenWindow("VolBarcodeScanVClass",0,wn,"","",RepSpec);
        WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeSeniorCitizenDiscount:
        IVCashDClassTouchScreenSeniorCitizenCard;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeSalesAssistant:
        ReportDefaults(RepSpec,"SalesAssistantVClass");
        RepSpec.UsedOnly = wn;
        nwn = OpenWindow("SalesAssistantVClass",0,wn,"","",RepSpec);
        WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypePriceLookup:
        ReportDefaults(RepSpec,"PriceLookupVClass");
        RepSpec.UsedOnly = wn;
        nwn = OpenWindow("PriceLookupVClass",0,wn,"","",RepSpec);
        WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCustomerSearch:
        ReportDefaults(RepSpec,"SearchCURClass");
        RepSpec.UsedOnly = wn;
        RepSpec.repname = "SearchCuRn";
        RepSpec.Media = mtScreen;
        RepSpec.flags[0] = 4;
        RepSpec.f12 = GetWindowFileName(wn);
        RecordCopy(gNPTSRepSpec,RepSpec);
        nwn = OpenWindow("NPTSSearchCURClass",0,wn,"","",gNPTSRepSpec);
        gNPTSRepSpec.UsedOnly = wn;
        gNPTSRepSpec.flags[0] = 4;
        PutWindowRecord(nwn,gNPTSRepSpec);
        WindowFieldGoto(nwn,gNPTSRepSpec,-1,"f1",true);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeSelectSalesman:
        // nwn = OpenWindow("UserNPTSSClass",0,wn,"","",RepSpec);
        WindowFieldGoto(wn,IVCashr,-1,"SalesMan",true);
        nwn = OpenWindow("EnterSalesmanNPTSOClass",1,wn,"","",RepSpec);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeSupervisorSearch:
        WindowFieldGoto(wn,IVCashr,-1,"Supervisor",true);
        nwn = OpenPasteWindow(wn,"SupervisorSClass","");
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeLoyaltyCard:
        IVCashDClassTouchScreenLoyaltyCard;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeEnterReferenceNumber:
        IVCashDClassTouchScreenEnterReferenceNumber;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeBaggerSearch:
        WindowFieldGoto(wn,IVCashr,-1,"Bagger",true);
        // nwn = OpenPasteWindow(wn,"BaggerSClass","");
        nwn = OpenWindow("EnterBaggerNPTSOClass",1,wn,"","",RepSpec);
        SelectButton(nwn,"OpenEnterBaggerNPTSOClass");
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeItemSearch:
        NPTSSearchItemExecute(wn);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeItemStatus:
        if (SelectedListLine(wn)<>-1) then begin
          matrowix = GetSelectedPOSItemRowIndex(wn);
          if (matrowix>=0) then begin
            MatRowGet(IVCashr,matrowix,IVCashrw);
            RepSpec.UsedOnly = wn;
            RepSpec.f1 = IVCashrw.ArtCode;
            RepSpec.repname = "INInfoRn";
            RepSpec.Media = mtScreen;
            RunReport(RepSpec,0);
          end;
        end;
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeOpenCashDrawer:
        OpenCashDrawer_IVCashVc(IVCashr);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeRunReportOnServer:
        RunReportOnServer(POSBrw.Code);
        goto LIVCashDClassTouchScreenPasteButtonDo;
      case kPOSButtonTypeCustomerSearchFiltered:
        ReportDefaults(RepSpec,"SearchCURClass");
        RepSpec.UsedOnly = wn;
        RepSpec.repname = "SearchCuRn";
        RepSpec.Media = mtScreen;
        RepSpec.flags[0] = 4;
        RepSpec.f12 = GetWindowFileName(wn);
        nwn = OpenWindow("NPTSSearchBFCURClass",0,wn,"","",RepSpec);
        WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
        goto LIVCashDClassTouchScreenPasteButtonDo;
    end;
  end;
LIVCashDClassTouchScreenPasteButtonDo:;
  return;
end;

global
procedure IVCashDClassTouchScreenPasteButton()
begin
  Integer butnr;
  string 255 tagstr;
  
  tagstr = PushButtonTag;
  butnr = StringToInt(tagstr);
  IVCashDClassTouchScreenPasteButtonDo(butnr)
end;

global
updating procedure IVCashDClassTouchScreenFinishButtonRun(Boolean newf,Integer awnst)
begin
  Integer wn,nwn;
  LongInt printrownr,err;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  Boolean save_recordf,new_recordf;
  record LocalMachineBlock LMb;
  Integer wnst;
  val prevRetValue;
  string 255 tstr;
  record CashierDefBlock CDb;
  record RcVc RepSpec;

  wn = CurWindow;
  if (WindowValid(wn)==false) then begin
    goto LIVCashDClassTouchScreenFinishButtonRun;
  end;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.Invalid!=0) then begin 
    goto LIVCashDClassTouchScreenFinishButtonRun; 
  end;
  if (IVCashr.OKFlag!=0) then begin 
    goto LIVCashDClassTouchScreenFinishButtonRun; 
  end;
  BlockLoad(LMb);
  BlockLoad(CDb); 
  wnst = awnst;
  if (wnst==-1) then begin
    wnst = WindowState(wn);
  end;
  GetPrevWindowRecord(wn,prevIVCashr);
  if (RecordValid(prevIVCashr)==false) or (prevIVCashr.SerNr<=0) then begin
    RecordCopy(prevIVCashr,IVCashr);
  end;
  printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
  if (printrownr>=0) then begin
    if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
    end;
  end;
  
  IVCashSumup(IVCashr,true);              
  IVCashr.OKFlag = 1;

  SetRecordCheckVc("IVCashVc");
  err = IVCashVcRecordCheck(IVCashr,prevIVCashr,wnst,1);
  if (err==0) then begin
    if (CDb.RequireReturnCustomer!=0) then begin
      if (IVCashr.OKFlag!=0) and (IVCashr.Sum4<0) then begin
        if (IVCashr.CustCode==CDb.DefCustCode) or (IVCashr.CustCode==LMb.DefCustCode) then begin
          MessageBox(21351,"");
          err = 21351;
        end;
      end;
    end;
  end;
  if (err==0 or RecordCheckLastErrorNo==31412) then begin
    if (HasLocalization("HRV") and blank(IVCashr.RefStr)) then begin
      if (DoXMLExport_IVCashVc(IVCashr)==false) then begin
        IVCashr.OfficialSerNr = "";
        nwn = OpenWindow("EnterRefStrDClass",0,wn,"","",RepSpec);
        err = 1;
      end;
    end;
  end;
  if (err==0) then begin
    if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,-1,true,true,LMb.IncrementalReceiptPrinting,wnst)==false) then begin
//      MessageBox(22165,"");
      err = 1;
      new_recordf = false;
    end;
  end;
  if (err==0) then begin
    PutWindowRecord(wn,IVCashr);
    save_recordf = true;      
    new_recordf = newf;
    if (save_recordf) then begin
      if (WindowDoOK(wn,0)==false) then begin
        IVCashr.OKFlag = 0;
        PutWindowRecord(wn,IVCashr);
        new_recordf = false;
      end;
    end;
  end;
  IVCashDClass_RefreshStringList(wn,IVCashr);
  prevRetValue = IVCashr.RetValue;
  if (new_recordf) then begin
//    sleep(5);
    
    WindowDoNew(wn,0);
    GetWindowRecord(wn,IVCashr);
    IVCashr.RetValue = prevRetValue;
    PutWindowString(wn,"touchscreenwindowpage",1);
    PutWindowString(wn,"touchscreenwindowpagestack","1");
    PutWindowString(wn,"touchscreenwindowprinterstack","*");
    PutWindowString(wn,"CustomerDisplayData_Line1","");
    PutWindowString(wn,"CustomerDisplayData_Line2","");    
    PutWindowString(wn,"touchscreenitemlastrownr",-1);
    PutWindowString(wn,"ReturnMode","false");
    tstr = USetStr(24172) & "  ";
    tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
    SetPOSWindowDisplay("",tstr);
    PutWindowRecord(wn,IVCashr);
    IVCashDClass_RefreshStringList(wn,IVCashr);
 
//    ReRunWindowDef(wn);
  end;

// TESTHT28ENQ;
LIVCashDClassTouchScreenFinishButtonRun:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenFinishButton()
begin
  IVCashDClassTouchScreenFinishButtonRun(true,-1);
  return;
end;

global
updating function Boolean POSLoginClassOnOKWindow(integer wn)
begin
  Boolean res;
  record USRowVc USRr;
  record LMOpenedWindowsBlock LMOWb;
  row LMOpenedWindowsBlock LMOWbrw;
  
  GetWindowRecord(wn,USRr);
  BlockLoad(LMOWb);
  LMOWbrw.WClass = "POSLoginClass";
  if (MatRowCnt(LMOWb)>0) then begin
    MatRowInsert(LMOWb,0,LMOWbrw);
  end else begin
    MatRowPut(LMOWb,0,LMOWbrw);
  end;
  BlockStore(LMOWb);  
  POSLoginClassOnOKWindow = true;
  return;
end;

global
function Boolean POSLoginClassOnClose(Integer wn,Integer wn2)
begin
//  OverrideLogout;
  POSLoginClassOnClose = true;
  return;
end;

global
procedure POSLoginClassCancel()
begin  
  CloseWindow(CurWindow);
  OverrideLogout;
  return;
end;

global
procedure CancelAndOverrideLogout()
begin  
  POSLoginClassCancel;
//  CloseWindow(CurWindow);
//  OverrideLogout;
  return;
end;

global
procedure IVCashDClassTouchScreenAmendLine()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr,tagstr;
  Boolean testf;
  
  mwn = CurWindow;
  line = SelectedListLine(mwn);

  if (line>=0) then begin
    if (UserCanAction("AllowAmendLine",IsStandardProduct==true)==false) then begin
      POSManagersAction(mwn,"AmendLine");
      goto LIVCashDClassTouchScreenAmendLine;
    end;
    RecordClear(RepSpec);
    tagstr = GetListTag(mwn,line);
    rownr = StringToInt(tagstr);
    if (rownr>=0) then begin
      GetWindowRecord(mwn,IVCashr);
      MatRowGet(IVCashr,rownr,IVCashrw);
      testf = true;
      if (IVCashr.OKFlag!=0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (IVCashrw.stp!=kInvoiceRowTypeNormal) then begin testf = false; end;
      if (IVCashrw.ovst!=0) then begin testf = false; end;
      if (testf) then begin
        RepSpec.AccStr = IVCashrw.ArtCode;
        RepSpec.f1 = IVCashrw.Spec;
        RepSpec.vals0 = IVCashrw.Quant;
        RepSpec.vals1 = IVCashrw.Price;
        RepSpec.vals2 = CalculateDiscountPercentage2(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum,true);
        RepSpec.vals3 = IVCashrw.Sum;
        RepSpec.vals4 = IVCashrw.PriceFactor;
        RepSpec.CurncyCode = IVCashrw.CurncyCode;
        RepSpec.FirstAcc = IVCashrw.PayMode;
        RepSpec.long1 = rownr;
        RepSpec.f2 = IVCashrw.VATCode;
        RepSpec.f3 = "";
        RepSpec.long2 = IVCashrw.stp;
        wn = OpenWindow("AmendLineNPTSSClass",0,mwn,"","",RepSpec);
        PutWindowString(wn,"BasePrice",IVCashrw.BasePrice);  
        WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
      end;
    end;
  end;
LIVCashDClassTouchScreenAmendLine:;  
  return;
end;

global
procedure IVCashDClassTouchScreenAllowIncorrectSerial()
begin
  Integer wn;
  record IVCashVc IVCashr;
  
  wn = CurWindow;
  
  if (UserCanAction("AllowIncorrectSerial",false)==false) then begin
    POSManagersAction(wn,"AllowIncorrectSerial");
    goto LIVCashDClassTouchScreenAllowIncorrectSerial;
  end;
  
  GetWindowRecord(wn,IVCashr);
  IVCashr.AllowIncorrectSerial = 1;
  PutWindowRecord(wn,IVCashr);
  
LIVCashDClassTouchScreenAllowIncorrectSerial:;  
  return;
end;

global
procedure IVCashDClassTouchScreenAllowOverrideOfficialSerialNr()
begin
  Integer wn,nwn,mwn;
  record RcVc RepSpec;
  
  wn = FindWindow("NPTSIVCashDClass");
  if (UserCanAction("OverrideLegalSerialNr",false)==false) then begin
    POSManagersAction(wn,"OverrideLegalSerialNr");
    goto LIVCashDClassTouchScreenAllowOverrideOfficialSerialNr;
  end;
  
  nwn = OpenWindow("OfficialSerNrNPTSSClass",0,wn,"","",RepSpec);
  
LIVCashDClassTouchScreenAllowOverrideOfficialSerialNr:;  
  return;
end;

global
procedure IVCashDClassTouchScreenLoyaltyCard()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("LoyalCardNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVCashDClassTouchScreenSeniorCitizenCard()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("SCDiscountCardNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVCashDClassTouchScreenReturnInvNo()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.f1 = PushButtonTag;
    wn = OpenWindow("ReturnInvNoNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure IVCashDClassTouchScreenReturnReason()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 tstr;
  Boolean testf;
  record StandProblemVc SPr;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.f1 = PushButtonTag;
    if (nonblank(RepSpec.f1)) then begin
      SPr.Code = RepSpec.f1;
      if (ReadFirstMain(SPr,1,true)) then begin
        RepSpec.f2 = SPr.Comment1;
      end;
    end;
    wn = OpenWindow("ReturnReasonNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
updating procedure IVCashDClassTouchScreenReturn()
BEGIN
  record IVCashVc IVCashr;
  record IVCashVc newIVCashr;
  row IVCashVc cashIVCashrw;
  row IVCashVc newIVCashrw;
  row IVCashVc IVCashrw;
  Integer i,rwcnt,rownr;
  Integer wn,nwn;
  Boolean foundcashf;
  val credcardv;
  val t,t2;
  integer err1,err2;
  uuid buuid;

  if (UserCanAction("AllowPOSIVNegQty",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowPOSIVNegQty"));      
    goto LIVCashDClassToolIVReturn;
  end;                                          
  wn = CurWindow;
  DeselectWindow(wn,true);
  switch (WindowState(wn)) begin
    case Rs_insert:
      PutWindowString(wn,"ReturnMode","true");
      GetWindowRecord(wn,IVCashr);
      if (HasLocalization("POL")) then begin
        IVCashr.FiscalFlag = 0;
      end;
      rwcnt = MatRowCnt(IVCashr);      
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashr,i,IVCashrw);
        if (IVCashrw.Quant>0) then begin
          IVCashrw.Quant = -IVCashrw.Quant;
          IVCashrw.Sum = -IVCashrw.Sum;
          MatRowPut(IVCashr,i,IVCashrw);
        end;
      end;
      IVCashSumup(IVCashr,true);
      PutWindowRecord(wn,IVCashr);
      IVCashDClass_RefreshStringList(wn,IVCashr);
    otherwise
      GetWindowRecord(wn,IVCashr);
      if (IVCashr.Invalid!=0) then begin goto LIVCashDClassToolIVReturn; end;
      
      if (IVCashr.OKFlag==0) then begin
        RecordCopy(newIVCashr,IVCashr);
        newIVCashr.UUID = buuid;
        if (HasLocalization("POL")) then begin
          newIVCashr.FiscalFlag = 0;
        end;
        newIVCashr.TransDate = CurrentDate;
        newIVCashr.InvDate = CurrentDate;
        rwcnt = MatRowCnt(newIVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowDelete(newIVCashr,i);
          rwcnt = MatRowCnt(newIVCashr);
          i = i - 1;
        end;
        IVCashDClassTouchScreenReturnRemote(IVCashr,newIVCashr);    
        PutWindowRecord(wn,newIVCashr);
        IVCashDClass_RefreshStringList(wn,newIVCashr);
      end else begin
        RecordCopy(newIVCashr,IVCashr);
        if (HasLocalization("POL")) then begin
          newIVCashr.FiscalFlag = 0;
        end;
        newIVCashr.UUID = buuid;
        newIVCashr.OKFlag = 0;
        newIVCashr.SerNr = -1;
        newIVCashr.TransDate = CurrentDate;
        newIVCashr.InvDate = CurrentDate;
        newIVCashr.LocalMachineCode = CurMachineName;
        newIVCashr.DrawerCode = CurDrawerCode(newIVCashr.LocalMachineCode);
        rwcnt = MatRowCnt(newIVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowDelete(newIVCashr,i);
          rwcnt = MatRowCnt(newIVCashr);
          i = i - 1;
        end;
        IVCashDClassTouchScreenReturnRemote(IVCashr,newIVCashr);
        if (MatRowCnt(newIVCashr)>0) then begin
          SetWindowState(wn,Rs_insert);
          PutWindowRecord(wn,newIVCashr);
          if (WindowDoOK(wn,0)) then begin
            PutWindowPrevRecord(wn,newIVCashr);
          end;
          ReRunWindowDef(wn);
    //    nwn = OpenWindow("NPTSIVCashDClass",1,0,"","",newIVCashr);
    //    ReRunWindowDef(nwn);
          IVCashDClass_RefreshStringList(wn,newIVCashr);
        end;
      end;
  end;
LIVCashDClassToolIVReturn:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenCreditNote()
BEGIN
  record IVCashVc IVCashr;
  record IVCashVc newIVCashr;
  row IVCashVc cashIVCashrw;
  row IVCashVc newIVCashrw;
  row IVCashVc IVCashrw;
  Integer i,rwcnt,rownr;
  Integer wn,nwn;
  Boolean foundcashf;
  val credcardv;
  val t,t2;
  integer err1,err2;
  uuid buuid;

  wn = CurWindow;
  DeselectWindow(wn,true);
  switch (WindowState(wn)) begin
    case Rs_insert:
//      PutWindowString(wn,"ReturnMode","true"); must be new mode if needed
      GetWindowRecord(wn,IVCashr);
      if (HasLocalization("POL")) then begin
        IVCashr.FiscalFlag = 0;
      end;
      rwcnt = MatRowCnt(IVCashr);      
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(IVCashr,i,IVCashrw);
        if (IVCashrw.Quant>0) then begin
          IVCashrw.Quant = IVCashrw.Quant;
          IVCashrw.Sum = IVCashrw.Sum;
          MatRowPut(IVCashr,i,IVCashrw);
        end;
      end;
      IVCashSumup(IVCashr,true);
      PutWindowRecord(wn,IVCashr);
      IVCashDClass_RefreshStringList(wn,IVCashr);
    otherwise
      GetWindowRecord(wn,IVCashr);
      if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenCreditNote; end;
      
      if (IVCashr.OKFlag==0) then begin
        RecordCopy(newIVCashr,IVCashr);
        newIVCashr.UUID = buuid;
        if (HasLocalization("POL")) then begin
          newIVCashr.FiscalFlag = 0;
        end;
        newIVCashr.InvType = kPOSInvoiceTypeCredit;
        newIVCashr.TransDate = CurrentDate;
        newIVCashr.InvDate = CurrentDate;
        rwcnt = MatRowCnt(newIVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowDelete(newIVCashr,i);
          rwcnt = MatRowCnt(newIVCashr);
          i = i - 1;
        end;
        IVCashDClassTouchScreenCreditNoteRemote(IVCashr,newIVCashr);    
        IVCashSumup(newIVCashr,true);
        PutWindowRecord(wn,newIVCashr);
        IVCashDClass_RefreshStringList(wn,newIVCashr);
      end else begin
        RecordCopy(newIVCashr,IVCashr);
        newIVCashr.UUID = buuid;
        if (HasLocalization("POL")) then begin
          newIVCashr.FiscalFlag = 0;
        end;
        newIVCashr.OfficialSerNr = "";
        newIVCashr.InvType = kPOSInvoiceTypeCredit;
        newIVCashr.UUID = buuid;
        newIVCashr.OKFlag = 0;
        newIVCashr.SerNr = -1;
        newIVCashr.TransDate = CurrentDate;
        newIVCashr.InvDate = CurrentDate;
        newIVCashr.LocalMachineCode = CurMachineName;
        newIVCashr.DrawerCode = CurDrawerCode(newIVCashr.LocalMachineCode);
        rwcnt = MatRowCnt(newIVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowDelete(newIVCashr,i);
          rwcnt = MatRowCnt(newIVCashr);
          i = i - 1;
        end;
        IVCashDClassTouchScreenCreditNoteRemote(IVCashr,newIVCashr);
        if (MatRowCnt(newIVCashr)>0) then begin
          IVCashSumup(newIVCashr,true);
          SetWindowState(wn,Rs_insert);
          PutWindowRecord(wn,newIVCashr);
          if (WindowDoOK(wn,0)) then begin
            PutWindowPrevRecord(wn,newIVCashr);
          end;
          ReRunWindowDef(wn);
    //    nwn = OpenWindow("NPTSIVCashDClass",1,0,"","",newIVCashr);
    //    ReRunWindowDef(nwn);
          IVCashDClass_RefreshStringList(wn,newIVCashr);
        end;
      end;
  end;
LIVCashDClassTouchScreenCreditNote:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenCorrectionInvoice()
BEGIN
  record IVCashVc IVCashr;
  record IVCashVc newIVCashr;
  row IVCashVc cashIVCashrw;
  row IVCashVc newIVCashrw;
  row IVCashVc IVCashrw;
  Integer i,rwcnt,rownr,orwcnt;
  Integer wn,nwn;
  Boolean foundcashf;
  val credcardv;
  val t,t2;
  integer err1,err2;
  uuid buuid;
  record GeneralOptionBlock GOb;

//not finished
    goto LIVCashDClassTouchScreenCorrectionInvoice;
  if (UserCanAction("AllowPOSIVNegQty",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowPOSIVNegQty"));      
    goto LIVCashDClassTouchScreenCorrectionInvoice;
  end;           
  BlockLoad(GOb);                               
  wn = CurWindow;
  DeselectWindow(wn,true);
  switch (WindowState(wn)) begin
    case Rs_insert:
      ;
    otherwise
      GetWindowRecord(wn,IVCashr);
      if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenCorrectionInvoice; end;      
      if (IVCashr.OKFlag!=0) then begin
        RecordCopy(newIVCashr,IVCashr);
        newIVCashr.UUID = buuid;
        if (HasLocalization("POL")) then begin
          newIVCashr.FiscalFlag = 0;
        end;
        newIVCashr.UUID = buuid;
        newIVCashr.OKFlag = 0;
        newIVCashr.SerNr = -1;
        newIVCashr.TransDate = CurrentDate;
        newIVCashr.InvDate = CurrentDate;
        newIVCashr.LocalMachineCode = CurMachineName;
        newIVCashr.DrawerCode = CurDrawerCode(newIVCashr.LocalMachineCode);
        
        rwcnt = MatRowCnt(newIVCashr);
        orwcnt = rwcnt;
        rownr = rwcnt;
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(newIVCashr,i,cashIVCashrw);
          if (cashIVCashrw.stp==kInvoiceRowTypeNormal) then begin
            CopyRow(newIVCashr,cashIVCashrw,newIVCashrw);
            newIVCashrw.Quant = -newIVCashrw.Quant;
            MatRowPut(newIVCashr,rownr,newIVCashrw);
            IVCashDchrsum(IVCashr,rownr,GOb.UseDiscount);
            IVCashDchsum(IVCashr,rownr);
            rownr = rownr + 1;
          end;
        end;
        ClearRow(newIVCashr,newIVCashrw,kInvoiceRowTypeHeader);
        newIVCashrw.Spec = USetStr(2078);
        MatRowInsert(newIVCashr,0,newIVCashrw);

        ClearRow(newIVCashr,newIVCashrw,kInvoiceRowTypeHeader);
        newIVCashrw.Spec = USetStr(2079);
        MatRowInsert(newIVCashr,orwcnt,newIVCashrw);

        rwcnt = MatRowCnt(newIVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(newIVCashr,i,cashIVCashrw);
          if (cashIVCashrw.stp!=kInvoiceRowTypeNormal) and (cashIVCashrw.stp!=kInvoiceRowTypeHeader) then begin
            MatRowDelete(newIVCashr,i);
            rwcnt = MatRowCnt(newIVCashr);
          end;
        end;

//        IVCashDClassTouchScreenReturnRemote(IVCashr,newIVCashr); //?
        if (MatRowCnt(newIVCashr)>0) then begin
          IVCashSumup(newIVCashr,true);
          SetWindowState(wn,Rs_insert);
          PutWindowRecord(wn,newIVCashr);
          if (WindowDoOK(wn,0)) then begin
            PutWindowPrevRecord(wn,newIVCashr);
          end;
          ReRunWindowDef(wn);
    //    nwn = OpenWindow("NPTSIVCashDClass",1,0,"","",newIVCashr);
    //    ReRunWindowDef(nwn);
          IVCashDClass_RefreshStringList(wn,newIVCashr);
        end;
      end;
  end;
LIVCashDClassTouchScreenCorrectionInvoice:;  
  return;
end;

updating function Boolean POSLoginClassAction(Integer wn)
begin
  Boolean res;
  record USRowVc USRr;
  Integer mwn;
  string 255 action,arg;
  
  mwn = MotherWindow(wn);
  if (mwn<=0) then begin
    goto LPOSLoginClassAction;
  end;
  GetWindowRecord(wn,USRr);  
  CloseWindow(wn);
  action = USRr.TextStr;
//  arg = USRr.Name;
  arg = USRr.Sign;
  SelectWindow(mwn);  
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      switch (action) begin
        case "AmendLine":
          IVCashDClassTouchScreenAmendLine;
          res = true;
        case "DeleteItem":
          IVCashDClassTouchScreenDeleteItem;
          res = true;
        case "VoidRow":
          IVCashDClassTouchScreenVoidRow;
          res = true;
        case "Reprint":
          IVCashDClassTouchScreenReprint;
          res = true;
        case "SplitItem":
          IVCashDClassTouchScreenSplitItem;
          res = true;
        case "InvalidateInvoice":
          IVCashDClassTouchScreenInvalidateInvoice;
          res = true;
        case "TransfertoSL":
          IVCashDClassTouchScreenTransfertoSL;
          res = true;
        case "TransfertoInvoice":
          IVCashDClassTouchScreenTransfertoInvoice;
          res = true;
        case "TransfertoOrder":
          IVCashDClassTouchScreenTransfertoOrder;
          res = true;
        case "TransfertoQuotation":
          IVCashDClassTouchScreenTransfertoQuotation;
          res = true;
        case "LoyaltyPointsBonus":
          IVCashDClassTouchScreenLoyaltyPointsBonusExecute;
          res = true;
        case "LoyaltyPayment":
          IVCashDClassTouchScreenLoyaltyPointsPayment;
          res = true;
        case "AllowIncorrectSerial":
          IVCashDClassTouchScreenAllowIncorrectSerial;
          res = true;
        case "OverrideLegalSerialNr":
          IVCashDClassTouchScreenAllowOverrideOfficialSerialNr;
          res = true;          
      end;
    case "RestAccDClass":
      switch (action) begin
        case "AmendLine":
          RestAccDClassTouchScreenAmendLine;
          res = true;
        case "AddOrderDiscount":
          RestAccDClassTouchScreenAddOrderDiscount;
          res = true;
        case "DeleteItem":
          RestAccDClassTouchScreenDeleteItem;
          res = true;
        case "DeleteNotSentItem":
          RestAccDClassTouchScreenDeleteItem;
          res = true;
        case "VoidRow":
          RestAccDClassTouchScreenVoidRowExecute(arg);
          res = true;
        case "InvalidateInvoice":
          RestAccDClassTouchScreenInvalidateInvoice;
          res = true;
        case "LoyaltyPointsBonus":
          RestAccDClassTouchScreenLoyaltyPointsBonusExecute;
          res = true;
        case "TransfertoSL":
          RestAccDClassTouchScreenTransfertoSL;
          res = true;
      end;
    case "IVDClass":
      switch (action) begin
        case "Reprint":
          IVDClassTouchScreenReprint;
          res = true;
      end;
    case "DeferCCTransOClass":
      switch (action) begin
        case "DeferCCTrans":
          ProceedDeferCCTransOClass;
          res = true;
      end;
  end;
  
LPOSLoginClassAction:;  
  POSLoginClassAction = res;
  return;
end;

global
updating function Boolean ReopenSavedWindows()
begin
  Boolean res;
  record LMOpenedWindowsBlock emptyLMOWb;
  record LMOpenedWindowsBlock LMOWb;
  row LMOpenedWindowsBlock LMOWbrw;
  record IVCashVc IVCashr; 
  Integer wn,compnr;
  Integer i,rwcnt;

  wn = CurWindow;
  BlockLoad(LMOWb);
  rwcnt = MatRowCnt(LMOWb);  
  if (rwcnt>0) then begin
    MatRowGet(LMOWb,i,LMOWbrw);
    switch (LMOWbrw.WClass) begin
      case "POSLoginClass":
        if (GetWindowClass(wn)!="POSLoginClass") then begin
          wn = FindWindow("POSLoginClass");
        end;
        if (GetWindowClass(wn)=="POSLoginClass") then begin      
          res = POSLoginClassAction(wn);
          MatRowDelete(LMOWb,0);
          BlockStore(LMOWb);
        end;
    end;
    BlockLoad(LMOWb);
    rwcnt = MatRowCnt(LMOWb);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(LMOWb,i,LMOWbrw);
      switch (LMOWbrw.WClass) begin
        case "IVCashDClass":
          goto LRepenSavedWindows_IVCashDClass;
        case "POSPIVCashDClass":
          goto LRepenSavedWindows_IVCashDClass;
        case "NPTSIVCashDClass":
LRepenSavedWindows_IVCashDClass:;  
          compnr = UnpackRecordLink(LMOWbrw.RecidStr,IVCashr);
          if (compnr>=0) and (IVCashr.SerNr>0) then begin
            if (ReadFirstMain(IVCashr,1,true)) then begin
              wn = OpenWindow(LMOWbrw.WClass,0,0,"","",IVCashr);
              IVCashr.SalesMan = CurrentUser;
              PutWindowRecord(wn,IVCashr);
              ReRunWindowDef(wn);
              res = true;
            end;
          end;
      end;  
    end;
    BlockStore(emptyLMOWb);
  end;
  ReopenSavedWindows = res;
  return;
end;

/*
global
updating function Boolean ReopenSavedWindows()
begin
  Boolean res;
  record LMOpenedWindowsBlock emptyLMOWb;
  record LMOpenedWindowsBlock LMOWb;
  row LMOpenedWindowsBlock LMOWbrw;
  record IVCashVc IVCashr; 
  Integer wn,compnr;
  Integer i,rwcnt;

  wn = CurWindow;
  switch (GetWindowClass(wn)) begin
    case "POSLoginClass":
      res = POSLoginClassAction(wn);
    otherwise      
      BlockLoad(LMOWb);
      rwcnt = MatRowCnt(LMOWb);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(LMOWb,i,LMOWbrw);
        switch (LMOWbrw.WClass) begin
          case "IVCashDClass":
            goto LRepenSavedWindows_IVCashDClass;
          case "POSPIVCashDClass":
            goto LRepenSavedWindows_IVCashDClass;
          case "NPTSIVCashDClass":
    LRepenSavedWindows_IVCashDClass:;  
            compnr = UnpackRecordLink(LMOWbrw.RecidStr,IVCashr);
            if (compnr>=0) and (IVCashr.SerNr>0) then begin
              if (ReadFirstMain(IVCashr,1,true)) then begin
                wn = OpenWindow(LMOWbrw.WClass,0,0,"","",IVCashr);
                res = true;
              end;
            end;
        end;  
      end;
      BlockStore(emptyLMOWb);
  end;
  ReopenSavedWindows = res;
  return;
end;
*/

updating function Boolean SaveOpenedWindows()
begin
  Boolean res;
  record LMOpenedWindowsBlock LMOWb;
  row LMOpenedWindowsBlock LMOWbrw;
  record IVCashVc IVCashr; 
  record IVVc IVr; 
  record RestAccVc RestAccr; 
  Integer wn;
  
  res = false;
  for (wn=1;wn<=100;wn=wn+1) begin//should be MaxWindow      
    if (WindowValid(wn)) then begin
      switch (GetWindowClass(wn)) begin
        case "IVDClass":
          GetWindowRecord(wn,IVr);
          switch (WindowState(wn)) begin
            case Rs_normal:
              LMOWbrw.WClass = GetWindowClass(wn);
              LMOWbrw.RecidStr = GetRecordLink(IVr);
              MatRowPut(LMOWb,MatRowCnt(LMOWb),LMOWbrw);
              res = true;
            otherwise
              if (WindowDoOK(wn,0)) then begin 
                LMOWbrw.WClass = GetWindowClass(wn);
                LMOWbrw.RecidStr = GetRecordLink(IVr);
                MatRowPut(LMOWb,MatRowCnt(LMOWb),LMOWbrw);
                res = true;
              end else begin
                res = false;
              end;
          end;
        case "IVCashDClass":
          goto LSaveOpenedWindows_IVCashDClass;
        case "POSPIVCashDClass":
          goto LSaveOpenedWindows_IVCashDClass;
        case "NPTSIVCashDClass":
LSaveOpenedWindows_IVCashDClass:;    
          GetWindowRecord(wn,IVCashr);
          switch (WindowState(wn)) begin
            case Rs_normal:
              LMOWbrw.WClass = GetWindowClass(wn);
              LMOWbrw.RecidStr = GetRecordLink(IVCashr);
              MatRowPut(LMOWb,MatRowCnt(LMOWb),LMOWbrw);
              res = true;
            otherwise
              if (WindowDoOK(wn,0)) then begin 
                LMOWbrw.WClass = GetWindowClass(wn);
                LMOWbrw.RecidStr = GetRecordLink(IVCashr);
                MatRowPut(LMOWb,MatRowCnt(LMOWb),LMOWbrw);
                res = true;
              end else begin
                res = false;
              end;
          end;
        case "RestAccDClass":
          GetWindowRecord(wn,RestAccr);
          switch (WindowState(wn)) begin
            case Rs_normal:
              LMOWbrw.WClass = GetWindowClass(wn);
              LMOWbrw.RecidStr = GetRecordLink(RestAccr);
              MatRowPut(LMOWb,MatRowCnt(LMOWb),LMOWbrw);
              res = true;
            otherwise
              if (WindowDoOK(wn,0)) then begin 
                LMOWbrw.WClass = GetWindowClass(wn);
                LMOWbrw.RecidStr = GetRecordLink(RestAccr);
                MatRowPut(LMOWb,MatRowCnt(LMOWb),LMOWbrw);
                res = true;
              end else begin
                res = false;
              end;
          end;
      end;
    end;
  end;
  if (res) then begin
    BlockStore(LMOWb);
  end;
  SaveOpenedWindows = res;
  return;
end;

global
updating procedure IVDClassTouchScreenButtonLogin()
begin  
  Integer wn;

  if (UserCanAction("AllowNPTSIVLogout",true)) then begin
    wn = CurWindow;
    DeselectWIndow(wn,true);
    switch (WindowState(wn)) begin
      case Rs_normal:
        SaveOpenedWindows;
        LogoutUser(wn,true);
      otherwise
        SaveOpenedWindows;
        LogoutUser(wn,true);
    end;
  end;
  return;
end;

global
updating procedure IVCashDClassTouchScreenButtonLogin()
begin  
  Integer wn;

  if (UserCanAction("AllowNPTSIVLogout",true)) then begin
    wn = CurWindow;
    DeselectWindow(wn,true);
    switch (WindowState(wn)) begin
      case Rs_normal:
        SaveOpenedWindows;
        LogoutUser(wn,true);
      otherwise
        SaveOpenedWindows;
        LogoutUser(wn,true);
    end;
  end;
  return;
end;

global
updating procedure RestAccDClassTouchScreenButtonLogin()
begin  
  Integer wn;

  if (UserCanAction("AllowNPTSIVLogout",true)) then begin
    wn = CurWindow;
    DeselectWIndow(wn,true);
    switch (WindowState(wn)) begin
      case Rs_normal:
        SaveOpenedWindows;
        LogoutUser(wn,true);
      otherwise
        SaveOpenedWindows;
        LogoutUser(wn,true);
    end;
  end;
  return;
end;

global
procedure TouchScreenRowFunctionsWClassDelete()
begin
  Integer wn,mwn,line;
  record IVCashVc IVCashr;
  LongInt rownr;
  
  wn = CurWIndow;
  mwn = MotherWindow(wn);
  if (mwn>0) then begin
    switch (GetWindowFileName(mwn)) begin
      case "IVCashVc": 
        GetWindowRecord(mwn,IVCashr);
        if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
          line = SelectedListLine(mwn);
          if (line>=0) then begin
            rownr = StringToLongInt(GetListTag(mwn,line));
            if (IVCashDClassDeleteRowTest(mwn,rownr)) then begin
              MatRowDelete(IVCashr,rownr);
              IVCashSumup(IVCashr,true);
              PutWindowRecord(mwn,IVCashr);
              if (GuiType==kGuiCocoa) then begin
                IVCashDClassOnWindowRecordChange(mwn);
              end;
            end;
          end;
        end;
    end;
  end;
  CloseWindow(wn);
  return;
end;

global
updating function Boolean CashPayTouchScreenDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  
  ProceedCashPayTouchScreenDClass;
LCashPayTouchScreenDClassOnEnterKey:;  
  CashPayTouchScreenDClassOnEnterKey = res;
  return;
end;

global
function Boolean CashPayTouchScreenDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  record RcVc prevRepSpec;
  
  res = false;
/*  
  switch (fieldname) begin
    case "CurncyCode":
      GetWindowRecord(wn,RepSpec);
      GetPrevWindowRecord(wn,prevRepSpec);
      if (CashPayTouchScreenRemote(prevRepSpec,RepSpec)) then begin
        PutWindowRecord(wn,RepSpec);
      end;
  end;
*/  
  CashPayTouchScreenDClassAfterEditField = res;
  return;
end;

global
updating function Boolean CCPayTouchScreenDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  switch (fieldname) begin
    case "vals0":
      if (LMb.CCRequireAuthCode==0) then begin
        ProceedCCPayTouchScreenDClass;
      end else begin
        res = true;
      end;
    otherwise
      ProceedCCPayTouchScreenDClass;
  end;
LCCPayTouchScreenDClassOnEnterKey:;  
  CCPayTouchScreenDClassOnEnterKey = res;
  return;
end;

global
updating function Boolean DCPayTouchScreenDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  switch (fieldname) begin
    case "vals0":
      if (LMb.CCRequireAuthCode==0) then begin
        ProceedCCPayTouchScreenDClass;
      end else begin
        res = true;
      end;
    otherwise
      ProceedCCPayTouchScreenDClass;
  end;
LDCPayTouchScreenDClassOnEnterKey:;  
  DCPayTouchScreenDClassOnEnterKey = res;
  return;
end;

global
updating function Boolean ChequePayTouchScreenDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  
  ProceedChequePayTouchScreenDClass;
LChequePayTouchScreenDClassOnEnterKey:;  
  ChequePayTouchScreenDClassOnEnterKey = res;
  return;
end;

global
procedure IVCashDClassTouchScreenLoyaltyPointsPaymentExecute(string paymode)
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  Integer i,rwcnt;
  string 255 tstr;
  Boolean testf;
  val PointsBalance,totsumb1;
  Integer err;

  mwn = CurWindow;
  GetWindowRecord(mwn,IVCashr);
  if (blank(IVCashr.LoyaltyCardNr)) then begin
    MessageBox(26439,"");
    goto LIVCashDClassTouchScreenLoyaltyPointsPaymentExecute;
  end;
  if (UserCanAction("AllowIVTSLoyaltyPayment",IsStandardProduct==true)==false) then begin
    POSManagersAction(mwn,"LoyaltyPayment");
    goto LIVCashDClassTouchScreenLoyaltyPointsPaymentExecute;
  end;
  RecordClear(RepSpec);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    err = CalculateLoyaltyPointsPayment_IVCashVc(IVCashr,blankval,PointsBalance,RepSpec.vals0,totsumb1);
    if (err!=0) then begin
      MessageBox(err,"");
      goto LIVCashDClassTouchScreenLoyaltyPointsPaymentExecute;
    end;
    rwcnt = MatRowCnt(IVCashr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      switch (IVCashrw.stp) begin
        case kInvoiceRowTypeLoyaltyPointsPayment:
          PointsBalance = PointsBalance - IVCashrw.Points;
      end;
    end;
    RepSpec.FirstAcc = paymode;
    RepSpec.vals1 = PointsBalance;
    wn = OpenWindow("LoyaltyPaymentNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
  end;
LIVCashDClassTouchScreenLoyaltyPointsPaymentExecute:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenLoyaltyPointsPayment()
begin
  integer i,wn,rwcnt;
  Boolean found;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;

  wn = CurWindow;
  found = POSButtonsForWindow(wn,POSBr);

  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(POSBr,i,POSBrw);
      switch (POSBrw.ButtonType) begin
        case kPOSButtonTypeLoyaltyPointsPayment:
          IVCashDClassTouchScreenLoyaltyPointsPaymentExecute(POSBrw.Code);
      end;
    end;
  end;
  return;
end;

global
procedure IVCashDClassTouchScreenLoyaltyPointsBonusExecute()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 tstr;
  Boolean testf;

  mwn = CurWindow;
  
  if (UserCanAction("AllowIVTSLoyaltyPointsBonus",IsStandardProduct==true)==false) then begin
    POSManagersAction(mwn,"LoyaltyPointsBonus");
    goto LIVCashDClassTouchScreenLoyaltyPointsBonusExecute;
  end;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("LoyaltyPointsBonusNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
  end;
  OverrideLogout;
LIVCashDClassTouchScreenLoyaltyPointsBonusExecute:;  
  return;
end;

global
procedure IVCashDClassTouchScreenLoyaltyPointsBonus()
begin
  IVCashDClassTouchScreenLoyaltyPointsBonusExecute;
  return;
end;

global
updating procedure IVCashDClassTouchScreenGiftReceiptExecute()
begin
  Integer wn,mwn,line,rownr;
  record GiftReceiptVc GRr;
  row GiftReceiptVc GRrw;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 tstr;
  Boolean testf;
  Integer i,rwcnt;

  mwn = CurWindow;
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (MatRowCnt(IVCashr)==0) then begin testf = false; end;
  if (WindowDoOK(mwn,0)==false) then begin testf = false; end;
  if (testf) then begin
    GetWindowRecord(mwn,IVCashr);
    wn = OpenWindow("NPTSGiftReceiptDClass",0,0,"","",GRr);
  
    GRr.TransDate = IVCashr.TransDate;
    GRr.CustCode = IVCashr.CustCode;
    GRr.VATNr = IVCashr.VATNr;
    GRr.Addr0 = IVCashr.Addr0;
    GRr.Addr1 = IVCashr.Addr1;
    GRr.Addr2 = IVCashr.Addr2;
    GRr.Addr3 = IVCashr.Addr3;
    GRr.CustCat = IVCashr.CustCat;
    GRr.OKFlag = IVCashr.OKFlag;
    GRr.ExportedFlag = IVCashr.ExportedFlag;
    GRr.SalesMan = IVCashr.SalesMan;
    GRr.Sum4 = IVCashr.Sum4;
    GRr.LangCode = IVCashr.LangCode;
    GRr.Comment = IVCashr.InvComment;
    GRr.Location = IVCashr.Location;
    GRr.TransTime = IVCashr.TransTime;
    GRr.LocalMachineCode = IVCashr.LocalMachineCode;
    GRr.InvAddr3 = IVCashr.InvAddr3;
    GRr.InvAddr4 = IVCashr.InvAddr4;
    GRr.TerminalID = IVCashr.TerminalID;
    GRr.BranchID = IVCashr.BranchID;
    GRr.DepCode = IVCashr.DepCode;
    GRr.Bagger = IVCashr.Bagger;
    GRr.Supervisor = IVCashr.Supervisor;
    GRr.IVCashNr = IVCashr.SerNr;
    rwcnt = MatRowCnt(IVCashr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVCashr,i,IVCashrw);
      testf = true;
      if (IVCashrw.stp!=kInvoiceTypeNormal) then begin testf = false; end;
      if (IVCashrw.ovst!=0) then begin testf = false; end;
      if (IVCashrw.Quant<0) then begin testf = false; end;
      
      if (testf) then begin
        GRrw.stp = IVCashrw.stp;
        GRrw.ArtCode = IVCashrw.ArtCode;
        GRrw.Quant = IVCashrw.Quant;
        GRrw.Price = IVCashrw.Price;
        GRrw.Sum = IVCashrw.Sum;
        GRrw.vRebate = CalculateDiscountPercentage2(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum,true);
        GRrw.Spec = IVCashrw.Spec;
        GRrw.SerialNr = IVCashrw.SerialNr;
        MatRowPut(GRr,MatRowCnt(GRr),GRrw);
      end;
    end;    
    PutWindowRecord(wn,GRr);
    WindowDoOK(wn,0);
    GetWindowRecord(wn,GRr);
    GiftReceiptDClass_RefreshStringList(wn,GRr);
    ReRunWindowDef(wn);
  end;
  return;
end;

global
updating procedure IVCashDClassTouchScreenGiftReceipt()
begin
  IVCashDClassTouchScreenGiftReceiptExecute;
  return;
end;

global
procedure IVCashDClassTouchScreenManagerDiscountOverride()
begin
  Integer wn,matrowix;
  
  wn = CurWindow;
  matrowix = GetSelectedPOSItemRowIndex(wn);
  MgrsDiscOverrideIVCashDsm;
  return;
end;

updating function Boolean IVCashDClassTouchScreenButton(record POSButtonsVc POSBr,row POSButtonsVc POSBrw)
begin
  Boolean res;
  
  switch (POSBrw.ButtonType) begin
    case kPOSButtonTypeFinish:
      IVCashDClassTouchScreenFinishButtonRun(true,-1);   
      res = true;
    case kPOSButtonTypeTransfertoSL:
      IVCashDClassTouchScreenTransfertoSL;
      res = true;
    case kPOSButtonTypeTransfertoInvoice:
      IVCashDClassTouchScreenTransfertoInvoice;
      res = true;
    case kPOSButtonTypeTransfertoOrder:
      IVCashDClassTouchScreenTransfertoOrder;
      res = true;
    case kPOSButtonTypeInvalidateInvoice:
      IVCashDClassTouchScreenInvalidateInvoice;
      res = true;
    case kPOSButtonTypeReturn:
      IVCashDClassTouchScreenReturn;
      res = true;
    case kPOSButtonTypeCreditNote:
      IVCashDClassTouchScreenCreditNote;
      res = true;
    case kPOSButtonTypeCorrectionInvoice:
      IVCashDClassTouchScreenCorrectionInvoice;
      res = true;
    case kPOSButtonTypeLookupSerialNr:
      IVCashDClassTouchScreenLookupSerialNr;
      res = true;
    case kPOSButtonTypeLogin:
      IVCashDClassTouchScreenButtonLogin;
      res = true;
    case kPOSButtonTypSaveInvoice:
      IVCashDClassTouchScreenSaveInvoice;
      res = true;
    case kPOSButtonTypeLoyaltyPointsPayment:
      IVCashDClassTouchScreenLoyaltyPointsPaymentExecute(POSBrw.Code);
      res = true;
    case kPOSButtonTypeLoyaltyPointsBonus:
      IVCashDClassTouchScreenLoyaltyPointsBonusExecute;
      res = true;
    case kPOSButtonTypeGiftReceipt:
      IVCashDClassTouchScreenGiftReceiptExecute;
      res = true;
    case kPOSButtonTypeAmendLine:
      IVCashDClassTouchScreenAmendLine;
      res = true;
    case kPOSButtonTypeVoidRow:
      IVCashDClassTouchScreenVoidRow;
      res = true;
    case kPOSButtonTypeRunReportOnServer:
      RunReportOnServer(POSBrw.Code);
      res = true;
  end;
  IVCashDClassTouchScreenButton = res;
  return;
end;

function Boolean NPTSIVCashDClassPageFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Boolean res;
  record POSButtonsVc POSBr;
  Boolean testf,found;
  
  found = true;
  POSBr.WindowClass = "NPTSIVCashDClass";
  while (LoopMain(POSBr,1,found)) begin
    if (POSBr.WindowClass!="NPTSIVCashDClass") then begin
      found = false;
    end;
    if (found) then begin
      if (POSBr.KeyCode==keycode) then begin
        testf = true;
        if (POSBr.Modifiers==kKeyModifierNone and (shflag or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierShift and (shflag==false or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierCtrl and (shflag or ctrlflag==false)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierCtrlShift and (shflag==false or ctrlflag==false)) then begin
          testf = false;
        end;
        if (testf) then begin
          IVCashDClassTouchScreenStackButtonExecute(POSBr.Page);
          res = true;
          goto LNPTSIVCashDClassPageFunctionKey;
        end;
      end;
    end;
  end;
LNPTSIVCashDClassPageFunctionKey:;    
  NPTSIVCashDClassPageFunctionKey = res;
  return;
end;

global
updating function Boolean NPTSIVCashDClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  boolean found,testf;
  integer i,wn,rwcnt;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;
  Boolean res;
  
  wn = CurWindow;
  found = POSButtonsForWindow(wn,POSBr);
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(POSBr,i,POSBrw);
      if (POSBrw.KeyCode==keycode) then begin
        testf = true;
        if (POSBrw.Modifiers==kKeyModifierNone and (shflag or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierShift and (shflag==false or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierCtrl and (shflag or ctrlflag==false)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierCtrlShift and (shflag==false or ctrlflag==false)) then begin
          testf = false;
        end;
        if (testf) then begin
          if (IVCashDClassTouchScreenButton(POSBr,POSBrw)==false) then begin
            IVCashDClassTouchScreenPasteButtonDo(i+1);
            res = true;
          end;
          goto LNPTSIVCashDClassFunctionKey;
        end;
      end;
    end;
  end;
  if (NPTSIVCashDClassPageFunctionKey(keycode,shflag,ctrlflag)) then begin
    res = true;
    goto LNPTSIVCashDClassFunctionKey;
  end;
LNPTSIVCashDClassFunctionKey:;  
  NPTSIVCashDClassFunctionKey = res;
  return;
end;

global
procedure IVCashDClassTouchScreenLookupSerialNr()
begin
  Integer nwn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  string 255 tagstr;
  Boolean testf,ivcashcommandlastitemsernrf;
  record INVc INr;
  
  mwn = CurWindow;
  ivcashcommandlastitemsernrf = StringToInt(GetWindowString(mwn,"ivcashcommandlastitemsernrf"))!=0;

  RecordClear(RepSpec);
  line = SelectedListLine(mwn);

  if (line>=0) then begin
    tagstr = GetListTag(mwn,line);
    rownr = StringToInt(tagstr);
    if (rownr>=0) then begin
      GetWindowRecord(mwn,IVCashr);
      MatRowGet(IVCashr,rownr,IVCashrw);
      testf = true;
      if (IVCashr.OKFlag!=0) then begin testf = false; end;
      if (IVCashr.Invalid!=0) then begin testf = false; end;
      if (IVCashrw.stp!=kInvoiceRowTypeNormal) and (IVCashrw.stp!=kInvoiceRowTypeStructuredItemComponent) then begin testf = false; end;
      if (IVCashrw.ovst!=0) then begin testf = false; end;
      if (testf) then begin
        if (ivcashcommandlastitemsernrf==false) then begin
          ReadFirstItem(IVCashrw.ArtCode,INr,true,false);
          ivcashcommandlastitemsernrf = INr.SerNrf!=0;
        end;
        if (ivcashcommandlastitemsernrf==false) then begin
          goto LIVCashDClassTouchScreenLookupSerialNr;
        end;
        PutWindowString(mwn,"ivcashcommandlastitemsernrf","true");
        RepSpec.long1 = rownr;
        nwn = OpenWindow("SerialNoScanNPTSSClass",0,mwn,"","",RepSpec);

//        nwn = OpenWindow("SerialNrSClass",1,mwn,"","",RepSpec);
//        PutWindowString(mwn,"ivcashcommand","");  
      end;
    end;
  end;
LIVCashDClassTouchScreenLookupSerialNr:;  
  return;
end;

global 
procedure IVCashDClassTouchScreenOpenInvoices()
begin
  Integer wn,nwn;
  record IVCashVc IVCashr;
  record UserVc Userr;
  string 255 subset;

  Userr.Code = CurrentUser;
  ReadFirstMain(Userr,1,true);
  switch (Userr.limitedAccess) begin
    case 1: subset = Userr.Code;
    case 2: subset = Userr.SalesGroup;
  end;
  wn = CurWindow;
  nwn = OpenWindow("NPTSIVCashOpenLClass",1,wn,subset,"",IVCashr);  
  return;
end;

global 
procedure IVCashDClassTouchScreenXReading()
begin
  TouchScreenXReading;
  return;
end;

global 
procedure IVCashDClassTouchScreenZReading()
begin
  TouchScreenZReading;
  return;
end;

global 
procedure IVCashDClassTouchScreenAllInvoices()
begin
  Integer wn,nwn;
  record IVCashVc IVCashr;
  record UserVc Userr;
  string 255 subset;

  Userr.Code = CurrentUser;
  ReadFirstMain(Userr,1,true);
  switch (Userr.limitedAccess) begin
    case 1: subset = Userr.Code;
    case 2: subset = Userr.SalesGroup;
  end;
  wn = CurWindow;
//  nwn = OpenWindow("NPTSIVCashLClass",1,wn,subset,"",IVCashr);  
  nwn = OpenWindow("NPTSIVCashLClass",1,0,"","",IVCashr);  
  return;
end;

global 
updating procedure IVCashDClassTouchScreenSaveInvoice()
begin
  Integer wn,nwn;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  record LocalMachineBlock LMb;
  Integer wnst;
  LongInt printrownr;

  wn = CurWindow;
  wnst = WindowState(wn);
  GetWindowRecord(wn,IVCashr);
  if (MatRowCnt(IVCashr)==0) then begin
    goto LIVCashDClassTouchScreenSaveInvoice;
  end;
  GetPrevWindowRecord(wn,prevIVCashr);
  BlockLoad(LMb);
  if (LMb.IncrementalReceiptPrinting!=0) then begin
    GetPrevWindowRecord(wn,prevIVCashr);      
    printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
    if (printrownr>=0) then begin
      if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
      end;
    end;
  end;
  IVCashr.Suspended = 1;
  PutWindowRecord(wn,IVCashr);
  if (WindowDoOK(wn,0)) then begin
    GetWindowRecord(wn,IVCashr);
    if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,-1,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
    end;
    WindowDoNew(wn,0);
    PutWindowString(wn,"touchscreenitemlastrownr",-1);
  end;
LIVCashDClassTouchScreenSaveInvoice:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenSpecialMenu()
begin
  string 255 tagstr;
  
  tagstr = PushButtonTag;
  switch (tagstr) begin
    case "OpenPOSSessionsm": OpenPOSSessionsm;
    case "ClosePOSSessionsm": ClosePOSSessionsm;
    case "POSMoneyInsm": POSMoneyInsm;
    case "POSMoneyOutsm": POSMoneyOutsm;
    case "IVCashCashupRnsm": IVCashCashupRnsm;
  end;
  
  return;
end;

global
updating procedure IVCashDClassTouchScreenOpenSession()
begin
  OpenPOSSessionsm;
  return;
end;

global
updating procedure IVCashDClassTouchScreenCloseSession()
begin
  ClosePOSSessionsm;
  return;
end;

global
procedure IVCashDClassTouchScreenPutCashFloat()
begin
  POSMoneyInsm;
  return;
end;

global
procedure IVCashDClassTouchScreenGetCashFloat()
begin
  POSMoneyOutsm;
  return;
end;

global
procedure IVCashDClassTouchScreenCashupReport()
begin
  IVCashCashupRnsm;
  return;
end;

global
procedure IVCashDClassTouchScreenOverrideOfficialSerNr()
begin
  Integer nwn,mwn,line,rownr;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  string 255 tagstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,IVCashr);
  testf = true;
  if (IVCashr.OKFlag!=0) then begin testf = false; end;
  if (IVCashr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    POSManagersAction(mwn,"OverrideLegalSerialNr");
  end;
  return;
end;

procedure NPTSIVCashOpenLClassOpenExecute(Integer wn)
begin
  record IVCashVc IVCashr;
  Integer nwn;
  
  if (ReadMarkedRecord(wn,IVCashr)) then begin
    CloseWindow(MotherWindow(wn));
//    CloseWindow(wn); 
    nwn = OpenWindow("NPTSIVCashDClass",1,0,"","",IVCashr);
  end;
  return;
end;

global 
procedure NPTSIVCashOpenLClassOpen()
begin
  record IVCashVc IVCashr;
  Integer wn,nwn;
  
  wn = CurWindow;  
  NPTSIVCashOpenLClassOpenExecute(wn);
  return;
end;

global
function Boolean NPTSIVCashOpenLClassOnOKWindow(integer wn)
begin
  Boolean res,testf;
  string 255 WinSearchField;  

  WinSearchField = GetWindowString(wn,"WinSearchField");
  testf = true;
  switch (WindowState(wn)) begin
    case Rs_search: testf = false;
  end;
  if (testf) then begin
    NPTSIVCashOpenLClassOpenExecute(wn);
    res = false;
  end else begin
    res = true;
  end;
  NPTSIVCashOpenLClassOnOKWindow = res;
  return;
end;

global
updating procedure IVCashDClassTouchScreenInvalidateInvoice()
begin
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  Integer wn,wnst;
  record LocalMachineBlock LMb;
  LongInt printrownr;

  wn = CurWindow;
  if (UserCanAction("InvalidateInvoice",IsStandardProduct==true)==false) then begin
    POSManagersAction(wn,"InvalidateInvoice");
    goto LIVCashDClassTouchScreenInvalidateInvoice;
  end;
  GetWindowRecord(wn,IVCashr);
  GetPrevWindowRecord(wn,prevIVCashr);
  if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenInvalidateInvoice; end;
  wnst = WindowState(wn);
  IVCashr.Invalid = 1;
  PutWindowRecord(wn,IVCashr);
  if (IVCashr.OKFlag==0) then begin
    if (WindowDoOK(wn,0)) then begin
      GetWindowRecord(wn,IVCashr);
      BlockLoad(LMb);
      if (LMb.IncrementalReceiptPrinting!=0) then begin
        printrownr = StringToLongInt(GetWindowString(wn,"touchscreenitemlastrownr"));
        if (printrownr>=0) then begin
          if (IVCashPrintReceipt(wn,IVCashr,prevIVCashr,printrownr,false,false,LMb.IncrementalReceiptPrinting,wnst)) then begin
          end;
        end;
      end;
      IVCashPrintReceipt(wn,IVCashr,prevIVCashr,-1,false,false,LMb.IncrementalReceiptPrinting,wnst);
      PutWindowString(wn,"touchscreenitemlastrownr",-1);
    end;
  end else begin
    if (WindowDoInvalidate(wn)) then begin
      GetWindowRecord(wn,IVCashr);
      IVCashPrintReceipt(wn,IVCashr,prevIVCashr,-1,false,false,0,wnst);
    end;
  end;
  OverrideLogout;
  WindowDoNew(wn,0);
LIVCashDClassTouchScreenInvalidateInvoice:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenTransfertoSL()
begin
  record IVCashVc IVCashr;
  Integer wn;
  val prevRetValue;
  string 255 tstr;
  record CreditLimitBlock CLb;
  val limit,bal,basesum4;
  record CUVc CUr;
  Boolean limitdaysf;
  
  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenTransfertoSL; end;
  if (UserCanAction("AllowTransfertoSL",false)==false) then begin
    POSManagersAction(wn,"TransfertoSL");
    goto LIVCashDClassTouchScreenTransfertoSL;
  end;
  if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
    BlockLoad(CLb);
    if (CLb.IVSave==1) or (CLb.IVPaste==1) then begin
      CUr.Code = IVCashr.CustCode;
      if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
        if (limitdaysf) then begin
          if (CLb.IVSave==1) then begin    
            MessageBox(22260,"");
            goto LIVCashDClassTouchScreenTransfertoSL;
          end;
        end;
        if (blank(limit)==false) then begin 
          basesum4 = IVCashr.BaseSum4;  
          basesum4 = basesum4 - CalculateIVCashCashAmount(IVCashr);
          switch (CLb.Base) begin
            case 0: bal = bal + basesum4;
            case 1: 
            case 2: bal = bal + basesum4;
          end;
          if (bal>limit) then begin
            if (CLb.IVSave==1) then begin    
              MessageBox(1164,"");
              goto LIVCashDClassTouchScreenTransfertoSL;
            end;
          end;
        end;
      end;
    end;
    
    IVCashr.OKFlag = 1;
    IVCashr.TransferToSL = 1;
    PutWindowRecord(wn,IVCashr);
    if (WindowDoOK(wn,0)==false) then begin
      IVCashr.OKFlag = 0;
      PutWindowRecord(wn,IVCashr);
    end else begin
      WindowDoNew(wn,0);
      GetWindowRecord(wn,IVCashr);
      IVCashr.RetValue = prevRetValue;
      PutWindowString(wn,"touchscreenwindowpage",1);
      PutWindowString(wn,"touchscreenwindowpagestack","1");
      PutWindowString(wn,"touchscreenwindowprinterstack","*");
      PutWindowString(wn,"CustomerDisplayData_Line1","");
      PutWindowString(wn,"CustomerDisplayData_Line2","");    
      PutWindowString(wn,"touchscreenitemlastrownr",-1);
      tstr = USetStr(24172) & "  ";
      tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
      SetPOSWindowDisplay("",tstr);
      PutWindowRecord(wn,IVCashr);
      IVCashDClass_RefreshStringList(wn,IVCashr);
    end;
  end;
  OverrideLogout;
LIVCashDClassTouchScreenTransfertoSL:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenTransfertoInvoice()
begin
  record IVCashVc IVCashr;
  Integer wn,nwn;
  val prevRetValue;
  string 255 tstr,wclass;
  record IVVc IVr;

  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.Invalid!=0) then begin goto LIVCashDClassTouchScreenTransfertoInvoice; end;
  if (IVCashr.OKFlag!=0) then begin goto LIVCashDClassTouchScreenTransfertoInvoice; end;
  if (CompanyProgramMode==kProgramModeLiveSync)then begin 
    MessageBox(25750,"")
    goto LIVCashDClassTouchScreenTransfertoInvoice; 
  end;
  if (UserCanAction("AllowTransfertoInvoice",false)==false) then begin
    POSManagersAction(wn,"TransfertoInvoice");
    goto LIVCashDClassTouchScreenTransfertoInvoice;
  end;
  if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
    if (WindowDoOK(wn,0)) then begin
      wclass = GetWindowClass(wn);
      GetWindowRecord(wn,IVCashr);
      IVCashToIV_FromPOS(IVCashr,IVr);
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,IVr.LangCode);
      if (RecordStore(IVr,false)) then begin
        RecordRemove(IVCashr);
        UpdateBrowses("IVCashVc");
        nwn = OpenWindow("IVDClass",1,0,"","",IVr);  
        if (nwn>0) then begin
          CloseWindow(wn);
          PutWindowString(nwn,"touchscreenwindowFrom",wclass);
        end else begin
          WindowDoNew(wn,0);
        end;
  /*
        WindowDoNew(wn,0);
        GetWindowRecord(wn,IVCashr);
        IVCashr.RetValue = prevRetValue;
        PutWindowString(wn,"touchscreenwindowpage",1);
        PutWindowString(wn,"touchscreenwindowpagestack","1");
        PutWindowString(wn,"touchscreenwindowprinterstack","*");
        PutWindowString(wn,"CustomerDisplayData_Line1","");
        PutWindowString(wn,"CustomerDisplayData_Line2","");    
        PutWindowString(wn,"touchscreenitemlastrownr",-1);
        tstr = USetStr(24172) & "  ";
        tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay("",tstr);
        PutWindowRecord(wn,IVCashr);
        IVCashDClass_RefreshStringList(wn,IVCashr);
  */      
      end;
    end;
  end;
  OverrideLogout;
LIVCashDClassTouchScreenTransfertoInvoice:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenTransfertoOrder()
begin
  record IVCashVc IVCashr;
  Integer wn,nwn;
  val prevRetValue;
  string 255 tstr;
  record ORVc ORr;

  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.Invalid!=0) then begin goto LORCashDClassTouchScreenTransfertoOrder; end;
  if (IVCashr.OKFlag!=0) then begin goto LORCashDClassTouchScreenTransfertoOrder; end;
  if (CompanyProgramMode==kProgramModeLiveSync)then begin 
    MessageBox(25750,"")
    goto LORCashDClassTouchScreenTransfertoOrder; 
  end;
  if (UserCanAction("AllowTransfertoOrder",false)==false) then begin
    POSManagersAction(wn,"TransfertoOrder");
    goto LORCashDClassTouchScreenTransfertoOrder;
  end;
  if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
    if (WindowDoOK(wn,0)) then begin
      IVCashToOR_FromPOS(IVCashr,ORr);
      ORSumup(ORr);
      ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,ORr.LangCode);
      if (RecordStore(ORr,false)) then begin
        RecordRemove(IVCashr);
        CloseWindow(wn);
        UpdateBrowses("IVCashVc");
        nwn = OpenWindow("ORDClass",1,0,"","",ORr);  
  /*
        WindowDoNew(wn,0);
        GetWindowRecord(wn,IVCashr);
        IVCashr.RetValue = prevRetValue;
        PutWindowString(wn,"touchscreenwindowpage",1);
        PutWindowString(wn,"touchscreenwindowpagestack","1");
        PutWindowString(wn,"touchscreenwindowprinterstack","*");
        PutWindowString(wn,"CustomerDisplayData_Line1","");
        PutWindowString(wn,"CustomerDisplayData_Line2","");    
        PutWindowString(wn,"touchscreenitemlastrownr",-1);
        tstr = USetStr(24172) & "  ";
        tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay("",tstr);
        PutWindowRecord(wn,IVCashr);
        IVCashDClass_RefreshStringList(wn,IVCashr);
  */      
      end;
    end;
  end;
  OverrideLogout;
LORCashDClassTouchScreenTransfertoOrder:;  
  return;
end;

global
updating procedure IVCashDClassTouchScreenTransfertoQuotation()
begin
  record IVCashVc IVCashr;
  Integer wn,nwn;
  val prevRetValue;
  string 255 tstr;
  record QTVc QTr;

  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  if (IVCashr.Invalid!=0) then begin goto LQTCashDClassTouchScreenTransfertoQuotation; end;
  if (IVCashr.OKFlag!=0) then begin goto LQTCashDClassTouchScreenTransfertoQuotation; end;
  if (CompanyProgramMode==kProgramModeLiveSync)then begin 
    MessageBox(25750,"")
    goto LQTCashDClassTouchScreenTransfertoQuotation; 
  end;
  if (UserCanAction("AllowTransfertoQuotation",false)==false) then begin
    POSManagersAction(wn,"TransfertoQuotation");
    goto LQTCashDClassTouchScreenTransfertoQuotation;
  end;
  if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
    if (WindowDoOK(wn,0)) then begin
      IVCashToQT_FromPOS(IVCashr,QTr);
      QTSumup(QTr);
      QTr.SerNr = NextSerNr("QTVc",QTr.QTDate,-1,false,QTr.LangCode);
      if (RecordStore(QTr,false)) then begin
        RecordRemove(IVCashr);
        CloseWindow(wn);
        UpdateBrowses("IVCashVc");
        nwn = OpenWindow("QTDClass",1,0,"","",QTr);  
  /*
        WindowDoNew(wn,0);
        GetWindowRecord(wn,IVCashr);
        IVCashr.RetValue = prevRetValue;
        PutWindowString(wn,"touchscreenwindowpage",1);
        PutWindowString(wn,"touchscreenwindowpagestack","1");
        PutWindowString(wn,"touchscreenwindowprinterstack","*");
        PutWindowString(wn,"CustomerDisplayData_Line1","");
        PutWindowString(wn,"CustomerDisplayData_Line2","");    
        PutWindowString(wn,"touchscreenitemlastrownr",-1);
        tstr = USetStr(24172) & "  ";
        tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay("",tstr);
        PutWindowRecord(wn,IVCashr);
        IVCashDClass_RefreshStringList(wn,IVCashr);
  */      
      end;
    end;
  end;
  OverrideLogout;
LQTCashDClassTouchScreenTransfertoQuotation:;  
  return;
end;

global
procedure IVCashDClassAddItemRow(string incode)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  LongInt wn,rwn;
  
  wn = CurWindow;
  IVCashPasteItem(incode);
  
  return;
end;


global
procedure IVCashDClassEditRow(integer wn,Integer rwn)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,IVCashr);
  MatRowGet(IVCashr,rwn,IVCashrw);
  RepSpec.long1 = rwn;
  RepSpec.f1 = IVCashrw.ArtCode;
  RepSpec.f2 = IVCashrw.Spec;
  RepSpec.vals0 = IVCashrw.Quant;
  RepSpec.vals1 = IVCashrw.Price;
  RepSpec.vals2 = CalculateDiscountPercentage2(IVCashrw.Quant,IVCashrw.Price,IVCashrw.Sum,true);
  RepSpec.vals3 = IVCashrw.Sum;
  RepSpec.f3 = IVCashrw.SerialNr;
  
  nwn = OpenWindow("IVCashRowDClass",0,wn,"","",RepSpec);
  
end;

global
procedure IVCashDClassAddRow(Integer wn,Integer rwn)
begin
  record IVCashVc IVCashr;
  row IVCashVc IVCashrw;

  GetWindowRecord(wn,IVCashr);
  MatRowGet(IVCashr,rwn,IVCashrw);
  IVCashrw.stp = kInvoiceRowTypeNormal;
  MatRowPut(IVCashr,rwn,IVCashrw);
  PutWindowRecord(wn,IVCashr);
  IVCashDClassEditRow(wn,rwn);
  return;
end;

global
function boolean IVCashRowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  row IVCashVc IVCashRw;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,IVCashr);

  switch (WindowState(mwn)) begin
    case Rs_update:
      GetPrevWindowRecord(mwn,prevIVCashr);
      if (prevIVCashr.OKFlag!=0) then begin
        goto LIVCashRowDClassOnOKWindow;
      end;
      if (prevIVCashr.Invalid!=0) then begin 
        goto LIVCashRowDClassOnOKWindow; 
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        goto LIVCashRowDClassOnOKWindow;
      end;
      if (IVCashr.Invalid!=0) then begin 
        goto LIVCashRowDClassOnOKWindow; 
      end;
  end;

  rwn = RepSpec.long1;
  
  MatRowGet(IVCashr,rwn,IVCashrw);
  
  IVCashrw.ArtCode = RepSpec.f1;
  IVCashrw.Spec = RepSpec.f2;
  IVCashrw.Quant = RepSpec.vals0;
  IVCashrw.Price = RepSpec.vals1;
  IVCashrw.vRebate = RepSpec.vals2;
  IVCashrw.Sum = RepSpec.vals3;
  
  MatRowPut(IVCashr,rwn,IVCashrw);
  IVCashVc_PasteQuant(IVCashr,rwn);
  IVCashSumup(IVCashr,true);
  PutWindowRecord(mwn,IVCashr);
LIVCashRowDClassOnOKWindow:;
  
  IVCashRowDClassOnOKWindow = true;
  return;
end;

global
updating procedure IVCashDClassDelete()
begin
  Integer wn;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;

  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,prevIVCashr);
      if (prevIVCashr.OKFlag!=0) then begin
        goto LIVCashDClassDelete;
      end;
      if (prevIVCashr.Invalid!=0) then begin 
        goto LIVCashDClassDelete; 
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        goto LIVCashDClassDelete;
      end;
      if (IVCashr.Invalid!=0) then begin 
        goto LIVCashDClassDelete; 
      end;
  end;
  switch (WindowState(wn)) begin
    case Rs_update:
      WindowDoCancel(wn);
      ToolAction(wn,ToolDelete,0,false);
    case Rs_insert:
      ToolAction(wn,ToolRestore,0,false);
    case Rs_normal:
      ToolAction(wn,ToolDelete,0,false);
  end;
LIVCashDClassDelete:;  
  return;
end;

global
updating procedure iPhoneIVCashRowDClassDeleteRow()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  Integer rownr;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,IVCashr);
  switch (WindowState(mwn)) begin
    case Rs_update:
      GetPrevWindowRecord(mwn,prevIVCashr);
      if (prevIVCashr.OKFlag!=0) then begin
        goto LiPhoneIVCashRowDClassDeleteRow;
      end;
      if (prevIVCashr.Invalid!=0) then begin 
        goto LiPhoneIVCashRowDClassDeleteRow; 
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        goto LiPhoneIVCashRowDClassDeleteRow;
      end;
      if (IVCashr.Invalid!=0) then begin 
        goto LiPhoneIVCashRowDClassDeleteRow; 
      end;
  end;
  rownr = RepSpec.long1;
  MatRowDelete(IVCashr,rownr);
  IVCashSumup(IVCashr,true);
  PutWindowRecord(mwn,IVCashr); 
LiPhoneIVCashRowDClassDeleteRow:;  
  CloseWindow(wn); 
  return;
end;

global
updating procedure iPhoneIVCashDClassFinish()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;

  wn = CurWindow;
  GetWindowRecord(wn,IVCashr);
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,prevIVCashr);
      if (prevIVCashr.OKFlag!=0) then begin
        goto LiPhoneIVCashDClassFinish;
      end;
      if (prevIVCashr.Invalid!=0) then begin 
        goto LiPhoneIVCashDClassFinish; 
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        goto LiPhoneIVCashDClassFinish;
      end;
      if (IVCashr.Invalid!=0) then begin 
        goto LiPhoneIVCashDClassFinish; 
      end;
  end;
  RepSpec.vals0 = IVCashr.Sum4;
  RepSpec.vals2 = 0.00;
  nwn = OpenWindow("IVCashFinishOClass",0,wn,"","",RepSpec);  
LiPhoneIVCashDClassFinish:;  
  return;
end;

global
function Boolean IVCashFinishOClassOnOpenWindow(Integer wn)
begin  
  Integer mwn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;

  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,IVCashr);

  RepSpec.UsedOnly = CustomerSalesPaymentTermType(IVCashr.CustCode);

  PutWindowRecord(wn,RepSpec);
  WindowFieldGoto(wn,RepSpec,-1,"vals1",false);
  IVCashFinishOClassOnOpenWindow = false;
  return;
end;

global
function Boolean IVCashFinishOClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  
  res = false;
  switch (fieldname) begin
    case "vals1":
      GetWindowRecord(wn,RepSpec);
      RepSpec.vals2 = RepSpec.vals1 - RepSpec.vals0;
      if (RepSpec.vals2<0) then begin
        RepSpec.vals2 = 0.00;
      end;
      PutWindowRecord(wn,RepSpec);
  end;
  IVCashFinishOClassAfterEditField = res;
  return;
end;

global
updating procedure ProceedIVCashFinishOClass()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;
  Integer rownr,customerdefaultpaytermtype;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  switch (RepSpec.ArtMode) begin
    case 0:
      customerdefaultpaytermtype = RepSpec.UsedOnly;
      if (customerdefaultpaytermtype==kInvoiceTypeCash or customerdefaultpaytermtype==kInvoiceTypeCashInvoiceReceiptPRT) or (customerdefaultpaytermtype==0) then begin
        if (RepSpec.vals1<RepSpec.vals0) then begin
          WindowFieldGoto(wn,RepSpec,-1,"vals1",true);
          goto LProceedIVCashFinishOClass;
        end;
      end else begin
        CloseWindow(wn);
        goto LProceedIVCashFinishOClass;
      end;
    case 1:
      if (RepSpec.vals1<RepSpec.vals0) then begin
        WindowFieldGoto(wn,RepSpec,-1,"vals1",true);
        goto LProceedIVCashFinishOClass;
      end;
  end;
  GetWindowRecord(mwn,IVCashr);
  switch (WindowState(mwn)) begin
    case Rs_update:
      GetPrevWindowRecord(mwn,prevIVCashr);
      if (prevIVCashr.OKFlag!=0) then begin
        CloseWindow(wn);
        goto LProceedIVCashFinishOClass;
      end;
      if (prevIVCashr.Invalid!=0) then begin 
        goto LProceedIVCashFinishOClass; 
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        goto LProceedIVCashFinishOClass;
      end;
      if (IVCashr.Invalid!=0) then begin 
        goto LProceedIVCashFinishOClass; 
      end;
  end;
  IVCashr.CashValue = RepSpec.vals1;
  IVCashSumup(IVCashr,true);
  IVCashr.OKFlag = 1;
  CloseWindow(wn);
  PutWindowRecord(mwn,IVCashr);
  WindowDoOK(mwn,0);  
LProceedIVCashFinishOClass:;
  return;
end;

global
procedure IVCashFinishOClassCashSales()
begin
  Integer wn,mwn,nwn;
  record RcVc RepSpec;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  CloseWindow(wn);
  RepSpec.ArtMode = 1;
  nwn = OpenWindow("IVCashFinishOClass",0,mwn,"","",RepSpec);  
  return;
end;

global
updating procedure IVCashFinishOClassOnAccountSales()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record IVCashVc IVCashr;
  record IVCashVc prevIVCashr;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);

  GetWindowRecord(mwn,IVCashr);
  switch (WindowState(mwn)) begin
    case Rs_update:
      GetPrevWindowRecord(mwn,prevIVCashr);
      if (prevIVCashr.OKFlag!=0) then begin
        CloseWindow(wn);
        goto LIVCashFinishOClassOnAccountSales;
      end;
      if (prevIVCashr.Invalid!=0) then begin 
        goto LIVCashFinishOClassOnAccountSales; 
      end;
    otherwise
      if (IVCashr.OKFlag!=0) then begin
        goto LIVCashFinishOClassOnAccountSales;
      end;
      if (IVCashr.Invalid!=0) then begin 
        goto LIVCashFinishOClassOnAccountSales; 
      end;
  end;
  IVCashr.TransferToSL = 1;
  IVCashr.OKFlag = 1;
  CloseWindow(wn);
  PutWindowRecord(mwn,IVCashr);
  WindowDoOK(mwn,0);    
LIVCashFinishOClassOnAccountSales:;  
  return;
end;

global
procedure IVCashDClassTouchScreenSyncNow()
begin
  SynchronizeWithServer;
  return;
end;

//updating procedure IVCashDClassCardData(Integer wn,string sdata)

global
function Boolean ReturnReasonNPTSSClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record RcVc RepSpec;
  record StandProblemVc SPr;
  
  res = false;
  switch (fieldname) begin
    case "f1":
      if (changed!=0) then begin
        GetWindowRecord(wn,RepSpec);
        if (nonblank(RepSpec.f1)) then begin
          SPr.Code = RepSpec.f1;
          if (ReadFirstMain(SPr,1,true)) then begin
            RepSpec.f2 = SPr.Comment1;
          end;
        end;
        PutWindowRecord(wn,RepSpec);
      end;
  end;
  ReturnReasonNPTSSClassAfterEditField = res;
  return;
end;

global
updating procedure ChangeAddressNPTSIVCashSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  switch (keycode) begin
    case 1: 
      ProceedChangeAddressNPTSSClass;
    case 2: 
      CancelAndOverrideLogout;
    case 3:
      NPTSSearchCUExecuteChangeAddress;
  end;
end;

global
updating procedure ChangeTermsNPTSSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  switch (keycode) begin
    case 1: 
      ProceedChangeTermsNPTSSClass;
    case 2: 
      CancelAndOverrideLogout;
  end;
end;
