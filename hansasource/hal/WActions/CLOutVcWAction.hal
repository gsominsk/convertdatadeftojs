external function string 40 ObjSClassPasteSpecialWindowClass(string);
external function roundmode GetVATRoundMode(record RoundBlock);
external function roundmode GetTotalRoundMode(record RoundBlock);
remote procedure CLOutVc_PasteNetVal(var record CLOutVc);
remote function Integer CLOutVc_PasteOrderNr(var record CLOutVc,Integer);
remote function Integer CLOutVc_PasteTransNr(var record CLOutVc,Integer);
remote function Integer CLOutVc_PasteTransOfficialSerNr(var record CLOutVc,Integer);
remote procedure CLOutVc_PasteTotal(var record CLOutVc);
remote procedure CLOutVc_PasteVATCode(var record CLOutVc);
remote function Integer CLOutVc_PasteVECode(var record CLOutVc,string,Boolean);
remote procedure CLOutVc_PasteCompany(var record CLOutVc,integer,Boolean);
remote procedure CLOutVc_PasteCorspCode(var record CLOutVc,Integer);
remote procedure CLOutVc_PasteCurncyCode(var record CLOutVc);
remote procedure CLOutVc_PasteTransDate(var record CLOutVc);
remote procedure CLOutVc_PastePayMode(var record CLOutVc);
remote procedure CLOutVc_PastePerson(var record CLOutVc,Integer,string);
external procedure RecordActionCashOutCol_Print(var record CLOutVc,string,Boolean);
external procedure RecordActionCashOut_Print(var record CLOutVc,string,Boolean);
external procedure FindOTforAcc(string,var string);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);

global
procedure CalcCLOut(record CLOutVc CLOutr)
BEGIN
  record RoundBlock RoundRec;
  row CLOutVc CLOutrw;
  val t,t1;
  Integer i,rwcnt;

  BlockLoad(RoundRec);  
  if (MatRowCnt(CLOutr)==0) then begin
    if (nonblank(CLOutr.VATCode)) then begin
      MulVATIV(CLOutr.VATCode,CLOutr.Total,t,t1,1,0);
      t = Round(t,GetVATRoundMode(RoundRec));
      t1 = Round(t1,GetVATRoundMode(RoundRec));
    end;  
    CLOutr.VATVal = t;
    CLOutr.TAX1Sum = t1;
    CLOutr.NetVal = Round(CLOutr.Total - t - t1,GetTotalRoundMode(RoundRec));
  end else begin
    rwcnt = MatRowCnt(CLOutr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CLOutr,i,CLOutrw);
      if (nonblank(CLOutrw.VATCode)) then begin
        MulVATIV(CLOutrw.VATCode,CLOutrw.Sum,t,t1,1,0);
        t = Round(t,GetVATRoundMode(RoundRec));
        t1 = Round(t1,GetVATRoundMode(RoundRec));
        if ((CLOutr.VATCode==CLOutrw.VATCode) or (i==0)) then begin 
          CLOutr.VATCode =  CLOutrw.VATCode;
        end else begin
          CLOutr.VATCode = "";
        end;
        CLOutr.TAX1Sum = CLOutr.TAX1Sum + t1;
        CLOutr.VATVal = CLOutr.VATVal + t;
      end;
    end;  
    CLOutr.NetVal = Round(CLOutr.Total - CLOutr.VATVal - CLOutr.TAX1Sum,GetTotalRoundMode(RoundRec));
  end;
  RETURN;
END;

global
procedure CLOutSumup(var record CLOutVc CLOutp)
BEGIN
  Integer i,rwcnt;
  row CLOutVc CLOutrw;
  
  CLOutp.Total = blankval;
  CLOutp.NetVal = blankval;
  CLOutp.VATVal = blankval;
  rwcnt = MatRowCnt(CLOutp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CLOutp,i,CLOutrw);
    CLOutp.Total = CLOutp.Total + CLOutrw.Sum;
  end;
  CalcCLOut(CLOutp);
  RETURN;
END;

global
function Boolean CLOutDClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res;
  record CLOutVc CLOutr;
  Integer normalmode;
  record MainCLBlock MainCLRec;
  Integer form;
  
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CLOutr);
  BlockLoad(MainCLRec);  
  if (MainCLRec.CashCollection!=0) then begin
    if (CLOutr.ColFlag!=0) then begin
      form = 1;
    end;
  end;  
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin 
    switch (form) begin
      case 0:
        RecordActionCashOut_Print(CLOutr,"",true);//RecLAction(wn,rlCashOutDPrint);
      case 1:
        RecordActionCashOutCol_Print(CLOutr,"",true);//RecLAction(wn,rlCashOutDPrint);      
    end;  
  end else begin
    switch (form) begin
      case 0:
        if (PrintDocument(CLOutr,"CLOutForm",previewf)) then begin end;
      case 1:
        if (PrintDocument(CLOutr,"CLOutColForm",previewf)) then begin end;
    end;  
  end;
  CLOutDClassPrint = res;
  RETURN;
END;

global
function Boolean CLOutDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CLOutVc CLOutr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CLOutr);
    if (CLOutr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
      if (UserCanAction("OKCashOut",true)==false) then begin
        res = false;
      end; 
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CLOutr);
    if (CLOutr.OKFlag!=0) then begin
      res = false;
    end else begin  
      if (UserCanAction("OKCashOut",true)==false) then begin
        res = false;
      end;
    end;    
  end;  
  CLOutDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean CLOutDClassColFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CLOutVc CLOutr;
  Integer normalmode,updatemode;
  /*
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CLOutr);
  end;  
  if (WindowState(wn)==normalmode) then begin
    GetPrevWindowRecord(wn,CLOutr);
  end;  
  */
  res = false;
  CLOutDClassColFlagButtonAction = res;
  RETURN;
END;

global
procedure PrintCLOutL(Integer wn,Boolean previewf)
BEGIN
  record CLOutVc CLOutr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(CLOutr,wn,i)) begin
    RecordActionCashOut_Print(CLOutr,previewf,true);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

function Boolean CLOutDClassEFActive(Integer wn,Integer wnst,string fieldname)
begin
  Boolean res;
  record CLOutVc CLOutr;
  record CLOutVc CLOut2r;
  
  res = true;
  GetWindowRecord(wn,CLOutr);
  if (wnst==2) then begin//updatemode
    GetPrevWindowRecord(wn,CLOut2r);
    if (CLOut2r.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (CLOutr.ColFlag!=0) then begin
    res = false;
  end;
  if (MatRowCnt(CLOutr)>0) then begin
    res = false;
  end;
  CLOutDClassEFActive = res;
  return;
end;

global
function Boolean CLOutDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer ef)
BEGIN
  Boolean res;
  record CLOutVc CLOutr;
  record CLOutVc CLOut2r;
  row CLOutVc CLOutrw;
  record MainCLBlock MainCLRec;
  
  switch (fieldname) begin
    case "SerNr":
      res = true;
      BlockLoad(MainCLRec);
      if (wnst==2) then begin
        if (MainCLRec.ChronologyforCLNo!=0) then begin res = false; end;
        GetPrevWindowRecord(wn,CLOut2r);
        if (CLOut2r.OKFlag!=0) then begin res = false; end;
      end;    
    case "TransDate": 
      res = true;
      BlockLoad(MainCLRec);
      if (MainCLRec.ChronologyforCLNo!=0) then begin res = false; end;
      if (wnst==2) then begin//updatemode
        GetPrevWindowRecord(wn,CLOut2r);
        if (CLOut2r.OKFlag!=0) then begin res = false; end;
      end;
    case "Total": res = CLOutDClassEFActive(wn,wnst,"Total");
    case "NetVal": res = CLOutDClassEFActive(wn,wnst,"NetVal");
    case "VATVal": res = CLOutDClassEFActive(wn,wnst,"VATVal");
    otherwise
      res = true;
      if (wnst==2) then begin//updatemode
        GetPrevWindowRecord(wn,CLOut2r);
        if (CLOut2r.OKFlag!=0) then begin
          switch (fieldname) begin
            case "Comment": res = true; 
            otherwise res = false; 
          end;
          goto LCLOutDClassActiveEditField;
        end;
      end;  
      GetWindowRecord(wn,CLOutr);
      if (rownr>=0) then begin
        MatRowGet(CLOutr,rownr,CLOutrw);
        switch (CLOutrw.stp) begin
          case 1:
            if ((fieldname=="Company") or (fieldname=="OrderNr")) then begin
              res = false; 
              if (CLOutrw.Type==0) or (CLOutrw.Type==2) or (CLOutrw.Type==4) or (CLOutrw.Type==5) then begin
                res = true;
              end;
            end;
          case 2:
            res = false; 
            if (fieldname=="Sum") then begin
              res = true;
            end;
        end;
      end;                
  end;
LCLOutDClassActiveEditField:;  
  CLOutDClassActiveEditField = res;
  RETURN;
END;

function Boolean CLOutDClassPersonEFAfter(Integer wn,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PastePerson(CLOutr,WindowState(wn),WindEFstr(wn));
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassPersonEFAfter = true;
  return;
end;

function Boolean CLOutDClassCurncyCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PasteCurncyCode(CLOutr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean CLOutDClassPayModeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PastePayMode(CLOutr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassPayModeEFAfter = true;
  return;
end;

function Boolean CLOutDClassTransDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PasteTransDate(CLOutr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassTransDateEFAfter = true;
  return;
end;

function Boolean CLOutDClassCorspCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PasteCorspCode(CLOutr,rownr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassCorspCodeEFAfter = true;
  return;
end;

function Boolean CLOutDClassCUCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;
  Integer r;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    r = CLOutVc_PasteVECode(CLOutr,WindEFstr(wn),true);
    if (r!=0) then begin
      MessageBox(r,"")
    end else begin
      PutWindowRecord(wn,CLOutr);
    end;
  end;
  CLOutDClassCUCodeEFAfter = true;
  return;
end;

function Boolean CLOutDClassCompanyEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PasteCompany(CLOutr,rownr,true);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassCompanyEFAfter = true;
  return;
end;

function Boolean CLOutDClassTotalEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PasteTotal(CLOutr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassTotalEFAfter = true;
  return;
end;

 
function Boolean CLOutDClassVATCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PasteVATCode(CLOutr);
    CLOutSumup(CLOutr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassVATCodeEFAfter = true;
  return;
end;

function Boolean CLOutDClassTransNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer err;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    err = CLOutVc_PasteTransNr(CLOutr,rownr);
    switch (err) begin
      case 0: PutWindowRecord(wn,CLOutr);
      case 1: MessageBox(1217,"");
      case 2: MessageBox(1215,"");
    end;
  end;
  CLOutDClassTransNrEFAfter = true;
  return;
end;

function Boolean CLOutDClassTransOfficialSerNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer err;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    err = CLOutVc_PasteTransOfficialSerNr(CLOutr,rownr);
    switch (err) begin
      case 0: PutWindowRecord(wn,CLOutr);
      case 1: MessageBox(1217,"");
      case 2: MessageBox(1215,"");
    end;
  end;
  CLOutDClassTransOfficialSerNrEFAfter = true;
  return;
end;

function Boolean CLOutDClassOrderNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    MatRowGet(CLOutr,rownr,CLOutrw);
    CLOutrw.TransNr = CLOutrw.OrderNr;  
    MatRowPut(CLOutr,rownr,CLOutrw);
    if (CLOutVc_PasteOrderNr(CLOutr,rownr)==0) then begin end;
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassOrderNrEFAfter = true;
  return;
end;

function Boolean CLOutDClassTypeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer typ;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    MatRowGet(CLOutr,rownr,CLOutrw);
    typ = CLOutrw.Type;
    ClearRow(CLOutr,CLOutrw,1);
    CLOutrw.Type = typ;
    MatRowPut(CLOutr,rownr,CLOutrw);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassTypeEFAfter = true;
  return;
end;

function Boolean CLOutDClassNetValEFAfter(Integer wn,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutVc_PasteNetVal(CLOutr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassNetValEFAfter = true;
  return;
end;

function Boolean CLOutDClassSumEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record CLOutVc CLOutr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CLOutr);
    CLOutSumup(CLOutr);
    PutWindowRecord(wn,CLOutr);
  end;
  CLOutDClassSumEFAfter = true;
  return;
end;

global
function Boolean CLOutDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Person": res = CLOutDClassPersonEFAfter(wn,changed);
    case "CurncyCode": res = CLOutDClassCurncyCodeEFAfter(wn,fn,rownr,changed);
    case "PayMode": res = CLOutDClassPayModeEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = CLOutDClassTransDateEFAfter(wn,fn,rownr,changed);
    case "CorspCode": res = CLOutDClassCorspCodeEFAfter(wn,rownr,changed);
    case "CUCode": res = CLOutDClassCUCodeEFAfter(wn,fn,rownr,changed);
    case "Company": res = CLOutDClassCompanyEFAfter(wn,fn,rownr,changed);
    case "VATCode": res = CLOutDClassVATCodeEFAfter(wn,fn,rownr,changed);
    case "Total": res = CLOutDClassTotalEFAfter(wn,fn,rownr,changed);
    case "TransNr": res = CLOutDClassTransNrEFAfter(wn,rownr,changed);
    case "TransOfficialSerNr": res = CLOutDClassTransOfficialSerNrEFAfter(wn,rownr,changed);
    case "Sum": res = CLOutDClassSumEFAfter(wn,rownr,changed);
    case "OrderNr": res = CLOutDClassOrderNrEFAfter(wn,rownr,changed);
    case "Type": res = CLOutDClassTypeEFAfter(wn,rownr,changed);
  end;
  CLOutDClassAfterEditField = res;
  RETURN;
END;

procedure CLOutDClassSpecPasteNameSerNr(Integer wn,var string psname)
BEGIN
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer rownr;

  GetWindowRecord(wn,CLOutr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(CLOutr,rownr,CLOutrw);
  end;
  switch (CLOutrw.Type) begin
    case kCashOutRowTypeCredSalesInvoice: psname = "ARSClass";
    case kCashOutRowTypeInvoice: psname = "APSClass";
//    case kCashOutRowTypePersonnelPayment: psname = "PPSClass";
    case kCashOutRowTypeSupplierPrepayment: psname = "POSClass";
    case kCashOutRowTypeCustomerRevPrepayment: psname = "ARPaySClass";
    case kCashOutRowTypeCheque: psname = "CheckSClass";
    case kCashOutRowTypeOwnCheque: psname = "OwnCheckSClass";
    otherwise psname = "";
  end;
  RETURN;
END;

procedure CLOutDClassSpecPasteNameCompany(Integer wn,var string psname)
BEGIN
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer rownr;

  GetWindowRecord(wn,CLOutr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(CLOutr,rownr,CLOutrw);
  end;
  switch (CLOutrw.Type) begin
    case 0: psname = "VESClass";
    case 2: psname = "VESClass";
    case 4: psname = "VESClass";
    otherwise psname = "";
  end;
  RETURN;
END;

procedure CLOutDClassSpecPasteNameObjects(Integer wn,var string psname)
BEGIN
  record CLOutVc CLOutr;
  Integer rownr;
  string 200 typ;
  row PMBlock PMrw;

  GetWindowRecord(wn,CLOutr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    if (GetPMRow(CLOutr.PayMode,PMrw)) then begin end;
    FindOTforAcc(PMrw.AccNr,typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  RETURN;
END;

procedure CLOutDClassSpecPasteNameOrderNr(Integer wn,var string psname)
BEGIN
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer rownr;

  GetWindowRecord(wn,CLOutr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(CLOutr,rownr,CLOutrw);
  end;
  switch (CLOutrw.Type) begin
    case 4: psname = "OpenPOSClass";
    case 5: psname = "ORSClass";
    otherwise psname = "";
  end;
  RETURN;
END;

global
function string 40 CLOutDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "TransNr": CLOutDClassSpecPasteNameSerNr(wn,psname);
    case "Company": CLOutDClassSpecPasteNameCompany(wn,psname);
    case "Objects": CLOutDClassSpecPasteNameObjects(wn,psname);
    case "OrderNr": CLOutDClassSpecPasteNameOrderNr(wn,psname);
  end;
  CLOutDClassSpecPasteName = psname;
  return;
end;

global 
function Boolean CLOutDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record CLOutVc CLOutr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,CLOutr);    
    if (CLOutr.OKFlag!=0) then begin res = false; end;
  end;
LCLOutDClassDeleteRowTest:;  
  CLOutDClassDeleteRowTest = res;
  return;
end;

global
function Boolean CLOutDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record CLOutVc CLOutr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,CLOutr);    
    CLOutSumup(CLOutr);
    PutWindowRecord(wn,CLOutr);    
  end;
  CLOutDClassOnOverStrike = true;
  return;
end;

global 
function Boolean CLOutDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record CLOutVc CLOutr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,CLOutr);    
    if (CLOutr.OKFlag!=0) then begin res = false; end;
  end;
LCLOutDClassInsertRowTest:;  
  CLOutDClassInsertRowTest = res;
  return;
end;

global
function Boolean CLOutDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;
  Integer nwn,cht;
  string 255 tstr,thepm;
  record CUVc VEr;
  record VIVc VIr;
  
  switch (fieldname) begin
    case "Company":
      GetWindowRecord(wn,CLOutr);  
      MatRowGet(CLOutr,rownr,CLOutrw);
      VEr.Code = CLOutrw.Company;
      if (ReadFirstMain(VEr,1,true)) then begin
        nwn = OpenWindow("CUDClass",0,0,"","",VEr);    
      end;
  end;
  CLOutDClassOpenRecord = res;
  return;
end;
