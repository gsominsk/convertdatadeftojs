remote procedure AT2WrofVc_PasteQty(var record AT2WrofVc,Integer);
remote procedure AT2WrofVc_PasteInventoryNr(var record AT2WrofVc,Integer);
external function Boolean DateWarned(Date,string);

global
function Boolean AT2WrofDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record AT2WrofVc AT2Wrofr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,AT2Wrofr);
    if (AT2Wrofr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,AT2Wrofr);
    if (AT2Wrofr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  AT2WrofDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean AT2WrofDClassWriteoffButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record AT2WrofVc AT2Wrofr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,AT2Wrofr);
    if (AT2Wrofr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,AT2Wrofr);
    if (AT2Wrofr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  AT2WrofDClassWriteoffButtonAction = res;
  RETURN;
END;

function Boolean AT2WrofDClassTransDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record AT2WrofVc AT2Wrofr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,AT2Wrofr);
    DeselectWindow(wn,false);
    if (DateWarned(AT2Wrofr.TransDate,"AT2WrofVc")) then begin
      MessageBox(1045,"");
    end;
    PutWindowRecord(wn,AT2Wrofr);
  end;
  AT2WrofDClassTransDateEFAfter = true;
  return;
end;

function Boolean AT2WrofDClassInventoryNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record AT2WrofVc AT2Wrofr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,AT2Wrofr);
    AT2WrofVc_PasteInventoryNr(AT2Wrofr,rownr);
    PutWindowRecord(wn,AT2Wrofr);
  end;
  AT2WrofDClassInventoryNrEFAfter = true;
  return;
end;

function Boolean AT2WrofDClassQtyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record AT2WrofVc AT2Wrofr;
  record CUVc VEr;
  string 5 curcode;
  val fr,to1,to2,br1,br2;

  if (changedf!=0) then begin
    GetWindowRecord(wn,AT2Wrofr);
    AT2WrofVc_PasteQty(AT2Wrofr,rownr);
    PutWindowRecord(wn,AT2Wrofr);
  end;
  AT2WrofDClassQtyEFAfter = true;
  return;
end;
 
global
function Boolean AT2WrofDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "TransDate": res = AT2WrofDClassTransDateEFAfter(wn,fn,rownr,changed);
    case "InventoryNr": res = AT2WrofDClassInventoryNrEFAfter(wn,rownr,changed);
    case "Qty": res = AT2WrofDClassQtyEFAfter(wn,rownr,changed);
  end;
  AT2WrofDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean AT2WrofDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record AT2WrofVc AT2Wrofr;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,AT2Wrofr);
    if (AT2Wrofr.OKFlag!=0) then begin
      res = false;           
    end;
  end;
  AT2WrofDClassActiveEditField = res;
  RETURN;
END;

global 
function Boolean AT2WrofDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record AT2WrofVc AT2Wrofr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,AT2Wrofr);    
    if (AT2Wrofr.OKFlag!=0) then begin res = false; end;
  end;
  AT2WrofDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean AT2WrofDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record AT2WrofVc AT2Wrofr;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,AT2Wrofr);
      if (AT2Wrofr.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,AT2Wrofr);
      if (AT2Wrofr.OKFlag!=0) then begin res = false; end;
  end;
  AT2WrofDClassInsertRowTest = res;
  RETURN;
END;