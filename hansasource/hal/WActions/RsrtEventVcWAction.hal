external procedure ActVcRecordDefClient(var record ActVc);
remote function Boolean CreateVIFromRsrtEvent(record RsrtEventVc,var record VIVc,var string);
external procedure RsrtEventSumup(record RsrtEventVc);
remote procedure RsrtEventVc_PasteResource(var record RsrtEventVc);
remote procedure RsrtEventVc_PasteVECode(var record RsrtEventVc);
remote procedure RsrtEventVc_PasteGuestCode(var record RsrtEventVc,string,string,Integer);
remote procedure RsrtEventVc_PasteCustCode(var record RsrtEventVc,string,string,Integer);
remote procedure RsrtEventVc_PasteEventType(var record RsrtEventVc);
external function Boolean JobShopBask1VClassAfterEditField(Integer,string,Integer, Integer,Integer);
external function Boolean JobShopBask1VClassActiveEditField(Integer,string,Integer,Integer,Integer,Integer);
remote updating function Integer RsrtEventShopBaskVClassSaveRemote(record SoftFVc,var string,var Integer);
remote updating function Boolean MakeActFromRsrtEvent(record RsrtEventVc,var record ActVc);

function Boolean RsrtEventDClassStatusEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record RsrtEventVc REventr;
  
  if (changedf) then begin
    GetWindowRecord(wn,REventr);
    RsrtEventSumup(REventr);
    PutWindowRecord(wn,REventr);
    res = true;
  end;
  RsrtEventDClassStatusEFAfter = res;
  return;
end;

function Boolean RsrtEventDClassEventTypeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record RsrtEventVc REventr;
  
  if (changedf) then begin
    GetWindowRecord(wn,REventr);
    RsrtEventVc_PasteEventType(REventr);
    PutWindowRecord(wn,REventr);
    res = true;
  end;
  RsrtEventDClassEventTypeEFAfter = res;
  return;
end;

function Boolean RsrtEventDClassVECodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record RsrtEventVc REventr;
  
  if (changedf) then begin
    GetWindowRecord(wn,REventr);
    RsrtEventVc_PasteVECode(REventr);
    PutWindowRecord(wn,REventr);
    res = true;
  end;
  RsrtEventDClassVECodeEFAfter = res;
  return;
end;

function Boolean RsrtEventDClassResCodeEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record RsrtEventVc REventr;
  
  if (changedf) then begin
    GetWindowRecord(wn,REventr);
    RsrtEventVc_PasteResource(REventr);
    PutWindowRecord(wn,REventr);
    res = true;
  end;
  RsrtEventDClassResCodeEFAfter = res;
  return;
end;

function Boolean RsrtEventDClassCustCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RsrtEventVc REventr;
  
  if (changedf) then begin
    GetWindowRecord(wn,REventr);
    RsrtEventVc_PasteCustCode(REventr,GetWindowString(wn,"event_package"),GetWindowString(wn,"event_sequencenr"),rownr);
    RsrtEventSumup(REventr);
    PutWindowRecord(wn,REventr);
    res = true;
  end;
  RsrtEventDClassCustCodeEFAfter = res;
  return;
end;

function Boolean RsrtEventDClassGuestCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record RsrtEventVc REventr;
  
  if (changedf) then begin
    GetWindowRecord(wn,REventr);
    RsrtEventVc_PasteGuestCode(REventr,GetWindowString(wn,"event_package"),GetWindowString(wn,"event_sequencenr"),rownr);
    PutWindowRecord(wn,REventr);
    res = true;
  end;
  RsrtEventDClassGuestCodeEFAfter = res;
  return;
end;

global
function Boolean RsrtEventDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "EventType": res = RsrtEventDClassEventTypeEFAfter(wn,changed!=0);
    case "CustCode": res = RsrtEventDClassCustCodeEFAfter(wn,rownr,changed!=0);
    case "GuestCode": res = RsrtEventDClassGuestCodeEFAfter(wn,rownr,changed!=0);
    case "VECode": res = RsrtEventDClassVECodeEFAfter(wn,changed!=0);
    case "Status": res = RsrtEventDClassStatusEFAfter(wn,changed!=0);
    case "ResCode": res = RsrtEventDClassResCodeEFAfter(wn,changed!=0);
  end;
  RsrtEventDClassAfterEditField = res;
  return;
end;

global
function Boolean RsrtEventDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record RsrtEventVc RsrtEventr;
  record RsrtEventVc SubRsrtEventr;
  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RsrtEventr);
    if (ReadMarkedRecord(wn,SubRsrtEventr)) then begin
      mwn = OpenWindow("RsrtEventDClass",1,0,"","",SubRsrtEventr);    
    end;
  end;
  RsrtEventDClassOnOKWindow = true;
  return;
end;

global
updating procedure ActFromRsrtEventDsm()
begin
  record RsrtEventVc RsrtEventr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RsrtEventr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromRsrtEvent(RsrtEventr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
  return;
end;

global
updating procedure RsrtEventVcCreateActivity()
begin
  ActFromRsrtEventDsm;
  return;
end;

global
updating procedure VIRsrtEventDsm()
begin
  record RsrtEventVc RsrtEventr;
  record VIVc VIr;
  Integer wn,nwn;
  string 255 vewarn;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,RsrtEventr);
    if (CreateVIFromRsrtEvent(RsrtEventr,VIr,vewarn)) then begin
      nwn = OpenWindow("VIDClass",1,0,"","",VIr);
    end;
  end;
  return;
end;

global
updating procedure IVRsrtEventDsm()
begin
  Integer wn;
  record IVVc IVr;
  record RsrtEventVc REventr;
  record RcVc RepSpec;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,REventr);
    RepSpec.f1 = REventr.SerNr;
    RepSpec.repname = "IVRsrtEventMn";
    RepSpec.critname = "IVRsrtEventVClass";
    RunMaintenance(RepSpec);
  end;
  return;
end;

global
procedure AddItemsRsrtEventDsm()
begin
  record RsrtEventVc REventr;
  row RsrtEventVc REventrw;
  Integer wn,nwn,rownr;
  Boolean res;
  record SoftFVc SoftFr;
  record RcVc RepSpec;
  
  if (UserCanAction("AddItemsRsrtEvent",true)==false) then begin
    goto LAddItemsRsrtEventDsm;
  end;
  wn = CurWindow;
  rownr = GetWindowCurRow(wn);
  if (rownr>=0) then begin
    GetWindowRecord(wn,REventr);     
    if (REventr.StatusFlag<kRsrtEventStatusDone) then begin
      MatRowGet(REventr,rownr,REventrw);
      nwn = OpenWindow("RsrtEventShopBaskVClass",1,0,"","",SoftFr);
      DeselectWindow(nwn,false);
      SoftFr.FileName = "RsrtEventVc";
      SoftFr.SerNr = REventr.SerNr;
      SoftFr.CustCode = REventrw.CustCode;
      SoftFr.Objects = "";
      SoftFr.PriceList = "";
      SoftFr.SelectedRow = rownr;
      PutWindowRecord(nwn,SoftFr);
      WindowFieldGoto(nwn,SoftFr,0,"ArtCode",false);
    end;
  end;
LAddItemsRsrtEventDsm:;  
  return;
end;

global
function Boolean RsrtEventShopBaskVClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  res = JobShopBask1VClassAfterEditField(wn,fieldname,fn,rownr,changed);
  RsrtEventShopBaskVClassAfterEditField = res;
  return;
end;

global
function Boolean RsrtEventShopBaskVClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;

  res = JobShopBask1VClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  RsrtEventShopBaskVClassActiveEditField = res;
  return;
end;

global
procedure RsrtEventShopBaskVClassCancel()
begin
  CloseWindow(CurWindow);
  return;
end;

global
updating procedure RsrtEventShopBaskVClassSave()
begin
  Integer wn;
  record SoftFVc Softr;
  Integer err,rownr;
  string 255 fieldname;
  
  wn = CurWindow;
  DeselectWIndow(wn,true);
  GetWindowRecord(wn,Softr);
  err = RsrtEventShopBaskVClassSaveRemote(Softr,fieldname,rownr);
  if (err!=0) then begin
    MessageBox(err,0);
    WindowFieldGoto(wn,Softr,rownr,fieldname,true);
  end else begin
    CloseWindow(wn);
  end;
  return;
end;

global
updating function Boolean RsrtEventShopBaskVClassOnOKWindow(Integer wn)
begin
  record SoftFVc Softr;
  Integer err,rownr;
  string 255 fieldname;
  
  DeselectWIndow(wn,true);
  GetWindowRecord(wn,Softr);
  err = RsrtEventShopBaskVClassSaveRemote(Softr,fieldname,rownr);
  if (err!=0) then begin
    MessageBox(err,0);
    WindowFieldGoto(wn,Softr,rownr,fieldname,true);
  end else begin
    CloseWindow(wn);
  end;
  RsrtEventShopBaskVClassOnOKWindow = false;
  return;
end;

global
function Boolean RsrtEventDClassStatusFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record RsrtEventVc RsrtEventr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,RsrtEventr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,RsrtEventr);
  end;
  switch (RsrtEventr.StatusFlag) begin
    case kRsrtEventStatusRequested:
      if (value==kRsrtEventStatusDone) then begin
        res = false;
      end;
    case kRsrtEventStatusPlanned:
      if (value==kRsrtEventStatusRequested) or (value==kRsrtEventStatusDone) then begin
        res = false;
      end;
    case kRsrtEventStatusConfirmed:
      if (value<kRsrtEventStatusConfirmed) then begin
        res = false;
      end;
    otherwise
      res = false;
  end;
  
  if (RsrtEventr.StatusFlag>kRsrtEventStatusConfirmed) then begin
    if (UserCanAction("UnOKAll",false)) then begin
//      res = true;
    end;
  end;  
  RsrtEventDClassStatusFlagButtonAction = res;
  return;
end;

global
function Boolean RsrtEventDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record RsrtEventVc RsrtEventr;
  Integer insertmode,updatemode;

  res = true;
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (WindowState(wn)!=insertmode) then begin
    GetWindowRecord(wn,RsrtEventr);
    switch (fieldname) begin
      case "SerNr": res = false;
      case "SequenceNr": res = false;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,RsrtEventr);
    if (RsrtEventr.StatusFlag>kRsrtEventStatusConfirmed) then begin
      res = false;
    end;    
  end;  
  RsrtEventDClassActiveEditField = res;
  return;
end;

global 
function Boolean RsrtEventDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record RsrtEventVc RsrtEventr;
  Boolean res;

  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,RsrtEventr);
    if (RsrtEventr.StatusFlag>kRsrtEventStatusConfirmed) then begin
      res = false;
    end;
  end;
  RsrtEventDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean RsrtEventDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record RsrtEventVc RsrtEventr;
  Boolean res;

  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,RsrtEventr);
    if (RsrtEventr.StatusFlag>kRsrtEventStatusConfirmed) then begin
      res = false;
    end;
  end;
  RsrtEventDClassInsertRowTest = res;
  return;
end;

procedure RsrtEventDClassSpecPasteNameJobNr(Integer wn,var string psname)
begin
  record RsrtEventVc REr;
  row RsrtEventVc RErw;
  Integer rownr;
  
  GetWindowRecord(wn,REr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(REr,rownr,RErw);
  end;
  switch (RErw.Invoicing) begin
    case 1: psname = "PasteReservationNo";
    otherwise psname = "";
  end;
  return;
end;

global
function string 40 RsrtEventDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "JobNr": RsrtEventDClassSpecPasteNameJobNr(wn,psname);
  end;
  RsrtEventDClassSpecPasteName = psname;
  return;
end;

global
function Boolean RsrtEventDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record RsrtEventVc REr;
  row RsrtEventVc RErw;
  record JobVc Jobr;
  Integer nwn;
  
  switch (fieldname) begin
    case "JobNr":
      GetWindowRecord(wn,REr);
      if (rownr>=0) then begin
        MatRowGet(REr,rownr,RErw);
        Jobr.SerNr = RErw.JobNr;
        if (ReadFirstMain(Jobr,1,true)) then begin
          nwn = OpenWindow("JobDClass",0,0,"","",Jobr);    
        end;
      end;
  end;
  RsrtEventDClassOpenRecord = res;
  return;
end;
