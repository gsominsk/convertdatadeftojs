external outer procedure OuterReadOpenVcFromTR(record TRVc);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
external function Boolean IsControlAccount(string,Boolean,Boolean);  //Remote_In_73
external procedure RecordActionTR_Print(var record TRVc,string,Boolean);
remote updating function Boolean UpdateTROnEnterKey(record TRVc,var record TRVc);
remote updating function Boolean StoreTROnEnterKey(var record TRVc);
external function LongInt TRDEnterSpec(var record TRVc,Integer,Integer,string,var Integer,var string,var Integer);
remote function Boolean TRVc_BeforeAccNumber(var record TRVc,Integer);
external procedure TRDDefault(var record TRVc,Integer,string);
remote procedure CalcTRField(var record TRVc,Integer,string);
remote procedure UpdateTransRows(var record TRVc);
remote procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external function Boolean DatePrel(Date);
external function Boolean  AllowCurChange(string,Boolean);
remote procedure TRSumup(var record TRVc,var val);
external procedure YcToStr(Integer,var string);
external procedure FindOTforAcc(string,var string);

global
procedure BalanceTRDsm()
BEGIN
  Integer wn,activerow;
  record TRVc TRr;
  string 255 activefield;
  
  wn = CurWindow; 
  if (WindowState(wn)!=0) then begin
    activerow = WindowActiveRow(wn);
    activefield = WindowActiveField(wn);
    DeselectWindow(wn,false);
    GetWindowRecord(wn,TRr); 
    TRDDefault(TRr,activerow,activefield);
    PutWindowRecord(wn,TRr); 
    WindowFieldGoto(wn,TRr,activerow,activefield,true);
  end;
  RETURN;
END;

global
procedure SwapDCTrans(Integer frr,var record TRVc TRp)
BEGIN
  row TRVc TRrw;
  Integer i,rwcnt;
  val sv;

  rwcnt = MatRowCnt(TRp);
  for (i=frr;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    switch (TRrw.stp) begin
      case 1:
        if (TRrw.ovst==0) then begin
          sv = TRrw.DebVal;
          TRrw.DebVal = TRrw.CredVal;
          TRrw.CredVal = sv;
          sv = TRrw.DebVal2;
          TRrw.DebVal2 = TRrw.CredVal2;
          TRrw.CredVal2 = sv;
          sv = TRrw.CurDebVal;
          TRrw.CurDebVal = TRrw.CurCredVal;
          TRrw.CurCredVal = sv;
          MatRowPut(TRp,i,TRrw);
        end;
    end;
  end;
  RETURN;
END;

global
procedure SwapDCTRDsm()
BEGIN
  Integer wn;
  record TRVc TRr;
  val t;
  
  wn = CurWindow; 
  if (WindowState(wn)==0) then begin
    GetWindowRecord(wn,TRr); 
    PutWindowRecord(wn,TRr); 
  end;
  if (WindowState(wn)!=0) then begin
    GetWindowRecord(wn,TRr); 
    DeselectWindow(wn,false);
    SwapDCTrans(WindowOldRowcnt(wn),TRr);
    TRSumup(TRr,t);
    PutWindowRecord(wn,TRr); 
  end;  
  RETURN;
END;

global
procedure UpdateMarkTRDsm()
BEGIN
  Integer wn;
  record TRVc TRr;
  row TRVc TRrw;

  wn = CurWindow; 
  if (WindowState(wn)==1) then begin goto LUpdateMarkTRDsm; end;//Rs_insert
  DeselectWindow(wn,false);
  if (WindowState(wn)==0) then begin
    GetWindowRecord(wn,TRr); 
    PutWindowRecord(wn,TRr); 
  end;
  if (WindowState(wn)!=0) then begin
    GetWindowRecord(wn,TRr); 
    ClearRow(TRr,TRrw,2);
    TRrw.UpdDate = CurrentDate;
    TRrw.Sign = CurrentUser;
    TRrw.OldTransDate = TRr.TransDate;
    MatRowPut(TRr,MatRowCnt(TRr),TRrw);
    PutWindowRecord(wn,TRr); 
  end;
LUpdateMarkTRDsm:;  
  RETURN;
END;

global
procedure CorrectionMarkTRDsm()
BEGIN
  Integer wn;
  record TRVc TRr;
  row TRVc TRrw;

  wn = CurWindow; 
  if (WindowState(wn)!=1) then begin goto LCorrectionMarkTRDsm; end;//Rs_insert
    GetWindowRecord(wn,TRr); 
    ClearRow(TRr,TRrw,4);
    MatRowPut(TRr,MatRowCnt(TRr),TRrw);
    PutWindowRecord(wn,TRr); 
LCorrectionMarkTRDsm:;  
  RETURN;
END;

global
procedure CalcFieldTRDsm()
BEGIN
  Integer wn;
  record TRVc TRr;

  wn = CurWindow; 
  if (WindowState(wn)==1) then begin
    GetWindowRecord(wn,TRr); 
    DeselectWindow(wn,false);
    CalcTRField(TRr,WindowActiveRow(wn),WindowActiveField(wn));
    PutWindowRecord(wn,TRr); 
    WindowFieldGoto(wn,TRr,WindowActiveRow(wn),WindowActiveField(wn),true);
  end;
  RETURN;
END;

procedure ChangeTransSign(Integer frr,record TRVc TRp)
BEGIN
 Integer i,rwcnt;
 row TRVc TRrw;

  rwcnt = MatRowCnt(TRp);
  for (i=frr;i<rwcnt;i=i+1) begin
    MatRowGet(TRp,i,TRrw);
    switch (TRrw.stp) begin
      case 1:
        if (TRrw.ovst==0) then begin
          TRrw.DebVal = -TRrw.DebVal;
          TRrw.CredVal = -TRrw.CredVal;
          TRrw.DebVal2 = -TRrw.DebVal2;
          TRrw.CredVal2 = -TRrw.CredVal2;
          TRrw.CurDebVal = -TRrw.CurDebVal;
          TRrw.CurCredVal = -TRrw.CurCredVal;
          MatRowPut(TRp,i,TRrw);
        end;
    end;
  end;
  RETURN;
END;

global
procedure ChangeSignTRDsm()
BEGIN
  Integer wn;
  record TRVc TRr;
  val t;

  wn = CurWindow; 
  if (WindowState(wn)==0) then begin
    GetWindowRecord(wn,TRr); 
    PutWindowRecord(wn,TRr); 
  end;
  if (WindowState(wn)!=0) then begin
    GetWindowRecord(wn,TRr); 
    ChangeTransSign(WindowOldRowcnt(wn),TRr)
    TRSumup(TRr,t);
    PutWindowRecord(wn,TRr); 
  end;
  RETURN;
END;

global
procedure OpenVcFromTR(record TRVc TRp)
BEGIN
  Integer nwn;
  string 255 tstr,dclass;
  record ActVc Actr;
  record AT2WrofVc AT2Wrofr;
  record CheckVc Checkr;
  record ChqDepVc ChqDepr;
  record CLInVc CLInr;
  record CLOutVc CLOutr;
  record ExpVc Expr;
  record IPVc IPr;
  record IVVc IVr;
  record OPVc OPr;
  record OwnCheckVc OwnCheckr;
  record PPVc PPr;
  record ProdVc Prodr;
  record PUVc PUr;
  record POSBalanceVc POSBalancer;
//  record RestAccVc RestAccr;
  record RetVc Retr;
  record RetPUVc RetPUr;
  record SDVc SDr;
  record SRVc SRr;
  record SHVc SHr;
  record DropSHVc DropSHr;
  record StockMovVc STMovr;
  record TSVc TSr;
  record VATIVVc VATIVr;
  record VATVIVc VATVIr;
  record VIVc VIr;
  record WSVc WSr;
  record IntIVVc IntIVr;
  record ProdOperationVc ProdOperationr;
  record CredManVc CredManr;
  record BuyBackVc BBr;
  record ForexTRVc FTRr;
  
  if (TRp.IntYc==IVYc) then begin dclass = "IVDClass"; end;
  if (TRp.IntYc==IPYc) then begin dclass = "IPDClass"; end;
  if (TRp.IntYc==VIYc) then begin dclass = "VIDClass"; end;
  if (TRp.IntYc==OPYc) then begin dclass = "OPDClass"; end;
  if (TRp.IntYc==PUYc) then begin dclass = "PUDClass"; end;
  if (TRp.IntYc==SHYc) then begin dclass = "SHDClass"; end;
  if (TRp.IntYc==DropSHYc) then begin dclass = "DropSHDClass"; end;
  if (TRp.IntYc==ExpYc) then begin dclass = "ExpDClass"; end;
  if (TRp.IntYc==PPYc) then begin dclass = "PPDClass"; end;
  if (TRp.IntYc==STMovYc) then begin dclass = "StockMovDClass"; end;
  if (TRp.IntYc==SentSTMovYc) then begin dclass = "StockMovDClass"; end;
  if (TRp.IntYc==PVYc) then begin dclass = "VIDClass"; end;
  if (TRp.IntYc==CLInYc) then begin dclass = "CLInDClass"; end;
  if (TRp.IntYc==CLOutYc) then begin dclass = "CLOutDClass"; end;
  if (TRp.IntYc==SDYc) then begin dclass = "SDDClass"; end;
  if (TRp.IntYc==SRYc) then begin dclass = "SRDClass"; end;
  if (TRp.IntYc==OPOYc) then begin dclass = "OPDClass"; end;
  if (TRp.IntYc==OPBYc) then begin dclass = "OPDClass"; end;
  if (TRp.IntYc==IPOYc) then begin dclass = "IPDClass"; end;
  if (TRp.IntYc==IPBYc) then begin dclass = "IPDClass"; end;
  if (TRp.IntYc==ProdYc) then begin dclass = "ProdDClass"; end;
  if (TRp.IntYc==RetYc) then begin dclass = "RetDClass"; end;
  if (TRp.IntYc==WSYc) then begin dclass = "WSDClass"; end;
  if (TRp.IntYc==Check0Yc) then begin dclass = "CheckDClass"; end;
  if (TRp.IntYc==CheckYc) then begin dclass = "CheckDClass"; end;
  if (TRp.IntYc==OwnCheck0Yc) then begin dclass = "OwnCheckDClass"; end;
  if (TRp.IntYc==OwnCheckYc) then begin dclass = "OwnCheckDClass"; end;
  if (TRp.IntYc==AT2WrofYc) then begin dclass = "AT2WrofDClass"; end;
//  if (TRp.IntYc==RestAccYc) then begin dclass = "RestAccDClass"; end;
  if (TRp.IntYc==RestAccYc) then begin dclass = "POSBalanceDClass"; end;
  if (TRp.IntYc==ChqDepYc) then begin dclass = "ChqDepDClass"; end;
  if (TRp.IntYc==TSYc) then begin dclass = "TSDClass"; end;
  if (TRp.IntYc==ActYc) then begin dclass = "ActDClass"; end;
  if (TRp.IntYc==VATIVYc) then begin dclass = "VATIVDClass"; end;
  if (TRp.IntYc==VATVIYc) then begin dclass = "VATVIDClass"; end;
  if (TRp.IntYc==IntIVYc) then begin dclass = "IntIVDClass"; end;
  if (TRp.IntYc==RetPUYc) then begin dclass = "RetPUDClass"; end;
  if (TRp.IntYc==ProdOperationYc) then begin dclass = "ProdOperationDClass"; end;
  if (TRp.IntYc==CredManYc) then begin dclass = "CredManDClass"; end;
  if (TRp.IntYc==BuyBackReconYc) then begin dclass = "BuyBackDClass"; end;
  if (TRp.IntYc==ForexTRYc) then begin dclass = "ForexTRDClass"; end;
  if (TRp.IntYc==Check2Yc) then begin dclass = "CheckDClass"; end;

  if (nonblank(dclass)) then begin
    if (TRp.IntYc==IVYc) then begin 
      IVr.SerNr = TRp.Number;
      if (ReadFirstMain(IVr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",IVr);
      end;
    end;
    if (TRp.IntYc==IPYc) then begin 
      IPr.SerNr = TRp.Number; 
      if (ReadFirstMain(IPr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",IPr);
      end;
    end;
    if (TRp.IntYc==VIYc) then begin 
      VIr.SerNr = TRp.Number; 
      if (ReadFirstMain(VIr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",VIr);
      end;
    end;
    if (TRp.IntYc==OPYc) then begin 
      OPr.SerNr = TRp.Number; 
      if (ReadFirstMain(OPr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",OPr);
      end;
    end;
    if (TRp.IntYc==PUYc) then begin 
      PUr.SerNr = TRp.Number; 
      if (ReadFirstMain(PUr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",PUr);
      end;
    end;
    if (TRp.IntYc==SHYc) then begin 
      SHr.SerNr = TRp.Number; 
      if (ReadFirstMain(SHr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",SHr);
      end;
    end;
    if (TRp.IntYc==DropSHYc) then begin 
      DropSHr.SerNr = TRp.Number; 
      if (ReadFirstMain(DropSHr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",DropSHr);
      end;
    end;
    if (TRp.IntYc==ExpYc) then begin 
      Expr.SerNr = TRp.Number; 
      if (ReadFirstMain(Expr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",Expr);
      end;
    end;
    if (TRp.IntYc==PPYc) then begin 
      PPr.SerNr = TRp.Number; 
      if (ReadFirstMain(PPr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",PPr);
      end;
    end;
    if (TRp.IntYc==STMovYc) then begin 
      STMovr.SerNr = TRp.Number; 
      if (ReadFirstMain(STMovr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",STMovr);
      end;
    end;
    if (TRp.IntYc==SentSTMovYc) then begin 
      STMovr.SerNr = TRp.Number; 
      if (ReadFirstMain(STMovr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",STMovr);
      end;
    end;
    if (TRp.IntYc==PVYc) then begin 
      VIr.SerNr = TRp.Number; 
      if (ReadFirstMain(VIr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",VIr);
      end;
    end;
    if (TRp.IntYc==CLInYc) then begin 
      CLInr.SerNr = TRp.Number; 
      if (ReadFirstMain(CLInr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",CLInr);
      end;
    end;
    if (TRp.IntYc==CLOutYc) then begin 
      CLOutr.SerNr = TRp.Number; 
      if (ReadFirstMain(CLOutr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",CLOutr);
      end;
    end;
    if (TRp.IntYc==SDYc) then begin 
      SDr.SerNr = TRp.Number; 
      if (ReadFirstMain(SDr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",SDr);
      end;
    end;
    if (TRp.IntYc==SRYc) then begin 
      SRr.SerNr = TRp.Number; 
      if (ReadFirstMain(SRr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",SRr);
      end;
    end;
    if (TRp.IntYc==OPOYc) then begin 
      OPr.SerNr = TRp.Number; 
      if (ReadFirstMain(OPr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",OPr);
      end;
    end;
    if (TRp.IntYc==OPBYc) then begin 
      OPr.SerNr = TRp.Number; 
      if (ReadFirstMain(OPr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",OPr);
      end;
    end;
    if (TRp.IntYc==IPOYc) then begin 
      IPr.SerNr = TRp.Number; 
      if (ReadFirstMain(IPr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",IPr);
      end;
    end;
    if (TRp.IntYc==IPBYc) then begin 
      IPr.SerNr = TRp.Number; 
      if (ReadFirstMain(IPr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",IPr);
      end;
    end;
    if (TRp.IntYc==ProdYc) then begin
      Prodr.SerNr = TRp.Number; 
      if (ReadFirstMain(Prodr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",Prodr);
      end;
    end;
    if (TRp.IntYc==ProdOperationYc) then begin
      ProdOperationr.SerNr = TRp.Number; 
      if (ReadFirstMain(ProdOperationr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",ProdOperationr);
      end;
    end;
    if (TRp.IntYc==RetYc) then begin 
      Retr.SerNr = TRp.Number; 
      if (ReadFirstMain(Retr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",Retr);
      end;
    end;
    if (TRp.IntYc==WSYc) then begin 
      WSr.SerNr = TRp.Number; 
      if (ReadFirstMain(WSr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",WSr);
      end;
    end;
    if (TRp.IntYc==Check0Yc) then begin 
      Checkr.SerNr = TRp.Number; 
      if (ReadFirstMain(Checkr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",Checkr);
      end;
    end;
    if (TRp.IntYc==CheckYc) then begin 
      OwnCheckr.SerNr = TRp.Number; 
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",OwnCheckr);
      end;
    end;
    if (TRp.IntYc==Check2Yc) then begin 
      Checkr.SerNr = TRp.Number; 
      if (ReadFirstMain(Checkr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",Checkr);
      end;
    end;
    if (TRp.IntYc==OwnCheck0Yc) then begin 
      OwnCheckr.SerNr = TRp.Number; 
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",OwnCheckr);
      end;
    end;
    if (TRp.IntYc==OwnCheckYc) then begin 
      OwnCheckr.SerNr = TRp.Number; 
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",OwnCheckr);
      end;
    end;
    if (TRp.IntYc==AT2WrofYc) then begin 
      AT2Wrofr.SerNr = TRp.Number; 
      if (ReadFirstMain(AT2Wrofr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",AT2Wrofr);
      end;
    end;
/*
    if (TRp.IntYc==RestAccYc) then begin 
      RestAccr.SerNr = TRp.Number; 
      if (ReadFirstMain(RestAccr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",RestAccr);
      end;
    end;
*/
    if (TRp.IntYc==RestAccYc) then begin 
      POSBalancer.SerNr = TRp.Number; 
      if (ReadFirstMain(POSBalancer,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",POSBalancer);
      end;
    end;
    if (TRp.IntYc==ChqDepYc) then begin 
      ChqDepr.SerNr = TRp.Number; 
      if (ReadFirstMain(ChqDepr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",ChqDepr);
      end;
    end;
    if (TRp.IntYc==TSYc) then begin 
      TSr.SerNr = TRp.Number; 
      if (ReadFirstMain(TSr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",TSr);
      end;
    end;
    if (TRp.IntYc==ActYc) then begin 
      Actr.TRSerNr = TRp.Number; 
      if (ReadFirstKey("TRSerNr",Actr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",Actr);
      end;
    end;
    if (TRp.IntYc==VATIVYc) then begin 
      VATIVr.SerNr = TRp.Number; 
      if (ReadFirstMain(VATIVr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",VATIVr);
      end;
    end;
    if (TRp.IntYc==VATVIYc) then begin 
      VATVIr.SerNr = TRp.Number; 
      if (ReadFirstMain(VATVIr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",VATVIr);
      end;
    end;
    if (TRp.IntYc==IntIVYc) then begin 
      IntIVr.SerNr = TRp.Number; 
      if (ReadFirstMain(IntIVr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",IntIVr);
      end;
    end;
    if (TRp.IntYc==RetPUYc) then begin 
      RetPUr.SerNr = TRp.Number; 
      if (ReadFirstMain(RetPUr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",RetPUr);
      end;
    end;
    if (TRp.IntYc==CredManYc) then begin 
      CredManr.SerNr = TRp.Number; 
      if (ReadFirstMain(CredManr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",CredManr);
      end;
    end;
    if (TRp.IntYc==BuyBackReconYc) then begin 
      BBr.SerNr = TRp.Number; 
      if (ReadFirstMain(BBr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",BBr);
      end;
    end;
    if (TRp.IntYc==ForexTRYc) then begin 
      FTRr.SerNr = TRp.Number;
      if (ReadFirstMain(FTRr,1,true)) then begin
        nwn = OpenWindow(dclass,1,0,"","",FTRr);
      end;
    end;
  end else begin
    OuterReadOpenVcFromTR(TRp);  
  end;
  RETURN;
END;

global
procedure OpenSubsystemTRDsm()
BEGIN
  Integer wn;
  record TRVc TRr;

  wn = CurWindow; 
  GetWindowRecord(wn,TRr); 
  OpenVcFromTR(TRr);
  RETURN;
END;

global
procedure UpdCurRateTRDsm()
BEGIN
  Integer wn;
  record TRVc TRr;

  wn = CurWindow; 
  if (WindowState(wn)==1) then begin
    GetWindowRecord(wn,TRr); 
    UpdateTransRows(TRr);
    PutWindowRecord(wn,TRr); 
  end;
  RETURN;
END;

global
procedure PrintTRD(Integer wn,Boolean previewf)
begin
  record TRVc TRr;
  record RcVc RepSpec;
  string 255 intycstr;
  Integer rwcnt;
  record FormDefVc FDr;
  
  GetWindowRecord(wn,TRr);
  FDr.repname = "TRForm";
  if (ReadFirstMain(FDr,1,true)==false or MatRowCnt(FDr)==0) then begin
    RepSpec.repname = "Trans2Rn";
    if (previewf) then begin
      RepSpec.Media = mtScreen;
    end else begin
      RepSpec.Media = mtPrinter;
    end;
    RepSpec.JobDf = 0;
    YcToStr(TRr.IntYc,intycstr);
    RepSpec.f1 = intycstr & "." & TRr.Number;
    RunReport(RepSpec,0);
  end else begin
    RecordActionTR_Print(TRr,previewf,true);
  end;
  return;
end;

global
procedure PrintTRL(Integer wn,Boolean previewf)
begin
  record TRVc TRr;
  record RcVc RepSpec;  
  Integer i;
  string 255 intycstr;
  record TRDefBlock TRDefb;
  Integer rwcnt;
  
  StartPrintDialogGroup;
  BlockLoad(TRDefb);
  rwcnt = MatRowCnt(TRDefb);
  if (rwcnt==0) then begin
    i = 1;
    while (GetRecordFromBrowse(TRr,wn,i)) begin
      if (i==1) then begin
        YcToStr(TRr.IntYc,intycstr);
        RepSpec.f1 = intycstr & "." & TRr.Number;
      end;
      i = i + 1;
    end;
    RepSpec.repname = "Trans2Rn";
    RepSpec.Media = mtPrinter;
    RepSpec.JobDf = 0;
    if (i>2) then begin
      if (nonblank(RepSpec.f1)) then begin
        RepSpec.f1 = RepSpec.f1 & ":";
      end;  
      YcToStr(TRr.IntYc,intycstr);
      RepSpec.f1 = RepSpec.f1 & intycstr & "." & TRr.Number;
    end;
    RunReport(RepSpec,0);
  end else begin
    i = 1;
    while (GetRecordFromBrowse(TRr,wn,i)) begin
      RecordActionTR_Print(TRr,previewf,true);
      i = i + 1;
    end;
  end;
  EndPrintDialogGroup;
  return;
end;

function Boolean TRDClassAccNumberEFBefore(Integer wn,Integer rownr)
BEGIN
  Boolean res;
  record TRVc TRr;
  record CYBlock CompYear;

  GetWindowRecord(wn,TRr);        
  BlockLoad(CompYear);
  if (CompYear.warnOnAutOverWrite!=0) then begin
    if (TRVc_BeforeAccNumber(TRr,rownr)) then begin
      Beep;
    end;
  end;
  TRDClassAccNumberEFBefore = res;
  RETURN;
END;

global
function Boolean TRDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "AccNumber": res = TRDClassAccNumberEFBefore(wn,rownr);
  end;
  TRDClassBeforeEditField = res;
  RETURN;
END;

global
function Boolean TRDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record TRVc TRr;
  row TRVc TRrw;
  Integer rwcnt,orwcnt;
  Boolean umf;
  Integer i;
  
  if (wnst==Rs_insert) then begin 
    GetWindowRecord(wn,TRr);
    if (rownr>=0) then begin
      MatRowGet(TRr,rownr,TRrw);
    end;
    switch (fieldname) begin
      case "FrRate": 
        res = AllowCurChange(TRrw.Curncy,false);
        if (res==false) then begin   
          goto LTRDClassActiveEditField;      
        end;
      case "ToRateB1":
        res = AllowCurChange(TRrw.Curncy,false);      
        if (res==false) then begin   
          goto LTRDClassActiveEditField;      
        end;
      case "ToRateB2":
        res = AllowCurChange(TRrw.Curncy,false);      
        if (res==false) then begin   
          goto LTRDClassActiveEditField;      
        end;
      case "BaseRate1":
        res = AllowCurChange(TRrw.Curncy,true);      
        if (res==false) then begin   
          goto LTRDClassActiveEditField;      
        end;
      case "BaseRate2":
        res = AllowCurChange(TRrw.Curncy,true);   
        if (res==false) then begin   
          goto LTRDClassActiveEditField;      
        end;
      case "RvrsVATCode": 
        res = false;
        goto LTRDClassActiveEditField;      
    end;
  end;
  if (wnst==Rs_update) then begin
    GetWindowRecord(wn,TRr);
    if (DatePrel(TRr.TransDate)) begin
      switch (fieldname) begin
        case "Number":
          res = true;
          rwcnt = MatRowCnt(TRr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(TRr,i,TRrw);
            if (TRrw.Typ==kTransactionRowTypeCustomer) or (TRrw.Typ==kTransactionRowTypeSupplier) then begin
              res = false;
              i = rwcnt;
            end;
          end;
          if (res) then begin
            goto LTRDClassActiveEditField;      
          end;
        case "Typ":
        case "SerNr":
        case "CompCode":
        case "DueDate":
        case "RvrsVATCode": 
        otherwise
          res = true;
          goto LTRDClassActiveEditField;      
      end;
    end;  
    orwcnt = WindowOldRowCnt(wn);
    rwcnt = MatRowCnt(TRr);
    if (orwcnt<rwcnt) then begin
      MatRowGet(TRr,orwcnt,TRrw);
      if (TRrw.stp==2) then begin umf = true; end;
    end;
    if (fieldname=="Number") then begin
      if (changed!=0) then begin MessageBox(1512,""); end;
      goto LTRDClassActiveEditField;      
    end;
    if (HasLocalization("DEN")) then begin
      if (fn==4) then begin
        if (changed!=0) then begin MessageBox(1512,""); end;
        goto LTRDClassActiveEditField;
      end;
    end;
    if (fn==2) then begin
      if (umf==false) then begin
        if (changed!=0) then begin MessageBox(1512,""); end;
        goto LTRDClassActiveEditField;
      end;
    end; 
    if (rownr!=-1) then begin
      if (rownr<WindowOldRowCnt(wn)) then begin
        switch (fieldname) begin
          case "FrRate":
            if (changed!=0) then begin
              MessageBox(1512,"");
              goto LTRDClassActiveEditField;
            end;
          case "ToRateB1":
            if (changed!=0) then begin
              MessageBox(1512,"");
              goto LTRDClassActiveEditField;
            end;
          case "ToRateB2":
            if (changed!=0) then begin
              MessageBox(1512,"");
              goto LTRDClassActiveEditField;
            end;
          case "BaseRate1":
            if (changed!=0) then begin
              MessageBox(1512,"");
              goto LTRDClassActiveEditField;
            end;          
          case "BaseRate2":
            if (changed!=0) then begin
              MessageBox(1512,"");
              goto LTRDClassActiveEditField;
            end;
          case "SerNr":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "DueDate":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "CompCode":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "AccNumber":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "TAccNumber":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "DebVal":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "CredVal":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "Curncy":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "DebVal2":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "CredVal2":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "CurDebVal":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "CurCredVal":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "VATCode":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "Comment":
            if (HasLocalization("DEN")) then begin
              if (changed!=0) then begin MessageBox(1512,""); end;
              goto LTRDClassActiveEditField;
            end;
          case "Typ":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "SerNr":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "DueDate":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
          case "CompCode":
            if (changed!=0) then begin MessageBox(1512,""); end;
            goto LTRDClassActiveEditField;
        end;
      end else begin
        if (TRr.IntYc>=IVYc) then begin
          switch (fieldname) begin
            case "Typ":
              umf = false;
            case "SerNr":
              umf = false;
//              if (changed!=0) then begin MessageBox(1512,""); end;
//              goto LTRDClassActiveEditField;
            case "DueDate":
              umf = false;
//              if (changed!=0) then begin MessageBox(1512,""); end;
//              goto LTRDClassActiveEditField;
            case "CompCode":
              umf = false;
//              if (changed!=0) then begin MessageBox(1512,""); end;
//              goto LTRDClassActiveEditField;
          end;
        end;
        if (umf==false) then begin
          if (changed!=0) then begin
            MessageBox(1512,"");
          end;
          goto LTRDClassActiveEditField;
        end;
      end;
    end else begin
      if (umf==false) then begin
        switch (fieldname) begin
          case "TransDate":
            if (changed!=0) then begin
              MessageBox(1512,"");
            end;
            goto LTRDClassActiveEditField;
        end;
      end;
    end;
  end;  
  res = true;
LTRDClassActiveEditField:;  
  TRDClassActiveEditField = res;
  RETURN;
END;

global 
function Boolean TRDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record TRVc TRr;
  Boolean res;
  Integer insertmode;

  res = false;
  insertmode = 1;//Rs_insert
  GetWindowRecord(wn,TRr);
  if (DatePrel(TRr.TransDate)) then begin
    res = true;
    goto LTRDClassDeleteRowTest;
  end;
  if (WindowState(wn)==Rs_insert) then begin
    res = true;
    goto LTRDClassDeleteRowTest;
  end;
  if (WindowState(wn)==2) then begin
    if (rownr>WindowOldRowcnt(wn)) then begin
      res = true;
      goto LTRDClassDeleteRowTest;
    end;
  end;
  
LTRDClassDeleteRowTest:;  
  TRDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean TRDClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record TRVc TRr;

  res = false;
  GetWindowRecord(wn,TRr);
  switch (WindowState(wn)) begin
    case Rs_insert: res = true;
    otherwise
      if (DatePrel(TRr.TransDate)) then begin
        res = true;
      end;
  end;
  TRDClassInsertRowTest = res;
  return;
end;

global
function Boolean TRDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record TRVc TRr;
  val t;

  if (rownr>=0) then begin
    GetWindowRecord(wn,TRr);    
    TRSumup(TRr,t);    
    PutWindowRecord(wn,TRr);    
  end;
  TRDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean TRDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record TRVc TRr;
  row TRVc TRrw;
  row TRVc TR2rw;
  Boolean res;
  Integer rwcnt,updatemode;

  if (rownr<0) then begin
    goto LTRDClassOverStrikeTest;
  end;
  GetWindowRecord(wn,TRr);
  updatemode = 2;//Rs_update
  res = false;

  rwcnt = MatRowCnt(TRr);
  MatRowGet(TRr,rownr,TRrw);
  if (TRrw.Reconsf!=0) then begin 
    MessageBox(1329,"");
    goto LTRDClassOverStrikeTest;
  end;
  if (WindowOldRowcnt(wn)<rwcnt) then begin
    MatRowGet(TRr,WindowOldRowcnt(wn),TR2rw);
  end;
  if (WindowState(wn)!=updatemode) then begin //Rs_update
    MessageBox(1050,"");
    goto LTRDClassOverStrikeTest;
  end;
  if (WindowOldRowcnt(wn)==rwcnt) then begin
    MessageBox(1050,"");
    goto LTRDClassOverStrikeTest;
  end;
  if (TR2rw.stp!=2) then begin
    MessageBox(1050,"");
    goto LTRDClassOverStrikeTest;
  end;
  if (TRrw.stp!=1) then begin
    MessageBox(1051,"");
    goto LTRDClassOverStrikeTest;
  end;
  if ((TRrw.Typ==kTransactionRowTypeCustomer) or (TRrw.Typ==kTransactionRowTypeSupplier)) then begin
    MessageBox(1849,"");
    goto LTRDClassOverStrikeTest;
  end;
  if (IsControlAccount(TRrw.AccNumber,0,false)) then begin
    MessageBox(1849,"");
    goto LTRDClassOverStrikeTest;
  end;
  if (IsControlAccount(TRrw.AccNumber,1,false)) then begin
    MessageBox(1849,"");
    goto LTRDClassOverStrikeTest;
  end;
  
  if (rownr<WindowOldRowcnt(wn)) then begin res = true; end;  
LTRDClassOverStrikeTest:;
  TRDClassOverStrikeTest = res;
  RETURN;
END;

global
updating function Boolean TRDClassOnEnterKey(var Integer wn,string fieldname,Integer fn,Integer rownr)
BEGIN
  Boolean res;
  row TRVc TRrw;
  record TRVc TRr;
  record TRVc oldTRr;
  LongInt newf;
  Integer whattodoafter;
  Integer nwn;
  string 255 gotofieldname;
  Integer gotorownr;
  transaction string 255 gTROnEnterKey_fieldname;
  transaction Integer gTROnEnterKey_rownr;

  res = false;
  if ((WindowState(wn)==2) or (WindowState(wn)==1)) then begin//Rs_update,Rs_insert
    switch (fieldname) begin
      case "AccNumber":  DeselectWindow(wn,false);
    end;
    GetWindowRecord(wn,TRr);
    newf = TRDEnterSpec(TRr,WindowState(wn),rownr,fieldname,whattodoafter,gotofieldname,gotorownr);
    if (newf==-1) then begin
      res = true;
      goto LTRDClassOnEnterKey;
    end;
    GetWindowRecord(wn,oldTRr);
    if (MatRowCnt(oldTRr)<=0) and (newf!=-2) then begin
      goto LTRDClassOnEnterKey;
    end;
    switch (whattodoafter) begin
      case 1:
        PutWindowRecord(wn,TRr);
        DeselectWindow(wn,false);
        GetWindowRecord(wn,TRr);
        if (StoreTROnEnterKey(TRr)) then begin
          CloseWindow(wn);
          wn = OpenWindow("TRDClass",1,0,"","",TRr);          
        end else begin
          WindowFieldGoto(wn,TRr,gTROnEnterKey_rownr,gTROnEnterKey_fieldname,false);
          newf = -1;
          res = false;
          goto LTRDClassOnEnterKey;
        end;
      case 2:
        PutWindowRecord(wn,TRr);
        DeselectWindow(wn,false);
        GetWindowRecord(wn,TRr);
        if (UpdateTROnEnterKey(oldTRr,TRr)) then begin
          CloseWindow(wn);
          wn = OpenWindow("TRDClass",1,0,"","",TRr);          
        end else begin
          WindowFieldGoto(wn,TRr,gTROnEnterKey_rownr,gTROnEnterKey_fieldname,false);
          newf = -1;
          res = false;
          goto LTRDClassOnEnterKey;
        end;
    end;
    res = true;
    if (newf!=-1) then begin
      PutWindowRecord(wn,TRr);
      WindowFieldGoto(wn,TRr,gotorownr,gotofieldname,true);
      UpdateBrowses("TRVc");
      res = false;
    end;
  end else begin
    res = true;
  end;
LTRDClassOnEnterKey:;  
  TRDClassOnEnterKey = res;
  RETURN;
END;

procedure TRDClassSpecPasteNameSerNr(Integer wn,var string psname)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;
  Integer rownr;
  
  GetWindowRecord(wn,TRr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(TRr,rownr,TRrw);
  end;
  switch (TRrw.Typ) begin
    case 1: psname = "ARSClass";
    case 2: psname = "APSClass";
    otherwise psname = "";
  end;
  RETURN;
END;

procedure TRDClassSpecPasteNameCompCode(Integer wn,var string psname)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;
  Integer rownr;

  GetWindowRecord(wn,TRr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(TRr,rownr,TRrw);
  end;
  switch (TRrw.Typ) begin
      case 1: psname = "CUSClass";
      case 2: psname = "VESClass";
      otherwise psname = "";
  end;
  RETURN;
END;

procedure TRDClassSpecPasteNameObjects(Integer wn,var string psname)
BEGIN
  record TRVc TRr;
  row TRVc TRrw;
  Integer rownr;
  string 200 typ;

  GetWindowRecord(wn,TRr);
  rownr = WindowActiveRow(wn);
  typ = "";
  if (rownr>=0) then begin
    MatRowGet(TRr,rownr,TRrw);
    FindOTforAcc(TRrw.AccNumber,typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  RETURN;
END;

global
function string 40 TRDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerNr": TRDClassSpecPasteNameSerNr(wn,psname);
    case "CompCode": TRDClassSpecPasteNameCompCode(wn,psname);
    case "Objects":TRDClassSpecPasteNameObjects(wn,psname);
  end;
  TRDClassSpecPasteName = psname;
  return;
end;

global
function Boolean TRObjSClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;

  TRObjSClassBeforeEditField = res;
  RETURN;
END;

