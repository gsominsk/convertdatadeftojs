remote function Integer TBBUApprovalStatus(record TBBUVc,var record AcceptanceRulesVc);
remote function Integer TBBUTestApprovalStatus(record TBBUVc);
remote procedure TBBUDClassOnOpenWindowRemote(var record TBBUVc,var Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure TBBUDchrsum(var record TBBUVc,Integer,Boolean,Integer);
remote function Boolean TBBUVc_PasteTimeClass(var record TBBUVc,Integer);
remote procedure TBBUVc_PastePRCode(var record TBBUVc);
remote procedure TBBUVc_PasteSalesMan(var record TBBUVc,string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean CheckProjectManager(record PRVc);
remote procedure TBBUVc_PasteCurncyCode(var record TBBUVc,string,Boolean);
remote function Boolean TBBUVc_PasteQty(var record TBBUVc,Integer);
remote procedure TBBUVc_PasteEMCode(var record TBBUVc,Integer);
remote function Boolean TBBUVc_PasteArtCode(var record TBBUVc,Integer,var string);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure CalcProc(val,val,var val);
external procedure RecordActionTBBU_Print(var record TBBUVc,string);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure CalcExtra(val,string,var val);
external procedure TBBUSumup(var record TBBUVc);
external function Boolean GetItemNameStr(Integer,var string,string,string,string);
remote updating procedure GenProInvoices(var record RcVc,Boolean);
external function Boolean UserCanChangePendingRecord(Integer);
 
function Boolean TBBUDClassBudTypeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;

  if (changedf!=0) then begin
    GetWindowRecord(wn,TBBUr);
    MatRowGet(TBBUr,rownr,TBBUrw);
    if (TBBUrw.Invoiced!=-1) then begin
      MessageBox(1880,"");
    end;
  end;
  TBBUDClassBudTypeEFAfter = true;
  RETURN;
END;

function Boolean TBBUDClassSalesManEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;

  if (changedf) then begin
    GetWindowRecord(wn,TBBUr);
    if (rownr>=0) then begin
      MatRowGet(TBBUr,rownr,TBBUrw);
    end else begin
      TBBUVc_PasteSalesMan(TBBUr,WindEFstr(wn));
    end;
    PutWindowRecord(wn,TBBUr);
  end;
  TBBUDClassSalesManEFAfter = true;
  return;
end;

function Boolean TBBUDClassCurncyCodeEFAfter(Integer wn,Boolean changedf)
begin  
  record TBBUVc TBBUr;

  if (changedf) then begin
    GetWindowRecord(wn,TBBUr);
    if (nonblank(TBBUr.CurncyCode)) then begin
      TBBUVc_PasteCurncyCode(TBBUr,"",true);
      PutWindowRecord(wn,TBBUr);
    end;
  end;
  TBBUDClassCurncyCodeEFAfter = true;
  return;
end;
 
function Boolean TBBUDClassMarkupEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  record GeneralOptionBlock GenOptRec;
  val v,t;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,TBBUr);
    if (rownr<0) then begin
      rwcnt = MatRowCnt(TBBUr);      
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(TBBUr,i,TBBUrw);
        TBBUrw.Markup = TBBUr.Markup;
        MatRowPut(TBBUr,i,TBBUrw);
        TBBUDchrsum(TBBUr,i,false,GenOptRec.UseDiscount);
      end;
    end else begin
      MatRowGet(TBBUr,rownr,TBBUrw);
      CalcSum(TBBUrw.Qty,TBBUrw.Price,0,TBBUrw.Discount,t,GenOptRec.UseDiscount);
      CalcExtra(t,TBBUrw.Markup,v);
      TBBUrw.Sum = t + v;
      MatRowPut(TBBUr,rownr,TBBUrw);
    end;
    TBBUSumup(TBBUr);
    PutWindowRecord(wn,TBBUr);
  end;
  TBBUDClassMarkupEFAfter = true;
  RETURN;
END;
 
function Boolean TBBUDClassPRCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,TBBUr);
    TBBUVc_PastePRCode(TBBUr);
    PutWindowRecord(wn,TBBUr);
  end;
  TBBUDClassPRCodeEFAfter = true;
  RETURN;
END;
 
function Boolean TBBUDClassDiscountEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;
  Boolean chrsum,chsum;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    chrsum = true;
    GetWindowRecord(wn,TBBUr);
    
    if (chrsum) then begin
      TBBUDchrsum(TBBUr,rownr,true,GenOptRec.UseDiscount);
      chsum = true;
    end;    
    if (chsum) then begin
      TBBUSumup(TBBUr);
    end;
    
    PutWindowRecord(wn,TBBUr);
  end;
  TBBUDClassDiscountEFAfter = true;
  return;
end;
 
function Boolean TBBUDClassTimeClassEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,TBBUr);
    TBBUVc_PasteTimeClass(TBBUr,rownr);
    PutWindowRecord(wn,TBBUr);
  end;  
  TBBUDClassTimeClassEFAfter = true;
  return;
end;
 
function Boolean TBBUDClassCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,TBBUr);
    TBBUDchrsum(TBBUr,rownr,false,GenOptRec.UseDiscount);
    TBBUSumup(TBBUr);
    PutWindowRecord(wn,TBBUr);
  end;
  TBBUDClassCostEFAfter = true;
  return;
end;
 
function Boolean TBBUDClassEMCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,TBBUr);
    TBBUVc_PasteEMCode(TBBUr,rownr);
    TBBUDchrsum(TBBUr,rownr,true,GenOptRec.UseDiscount);
    TBBUSumup(TBBUr);
    PutWindowRecord(wn,TBBUr);
  end;  
  TBBUDClassEMCodeEFAfter = true;
  return;
end;
 
function Boolean TBBUDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;  
  record GeneralOptionBlock GOb;
  string 255 inmsg;

  if (changedf!=0) then begin
    GetWindowRecord(wn,TBBUr);
    if (TBBUVc_PasteArtCode(TBBUr,rownr,inmsg)) then begin
      BlockLoad(GOb);
      TBBUDchrsum(TBBUr,rownr,true,GOb.UseDiscount);
      TBBUSumup(TBBUr);
      PutWindowRecord(wn,TBBUr);
      if (nonblank(inmsg)) then begin
        MessageBox(0,inmsg);
      end;
    end else begin
      MessageBox(0,USetStr(20860));
    end;
  end;
  TBBUDClassArtCodeEFAfter = true;
  return;
end;
 
function Boolean TBBUDClassQtyEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record TBBUVc TBBUr;  
  row TBBUVc TBBUrw;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,TBBUr);
    if (TBBUVc_PasteQty(TBBUr,rownr)) then begin      
      TBBUDchrsum(TBBUr,rownr,true,GenOptRec.UseDiscount);
      TBBUSumup(TBBUr);
      PutWindowRecord(wn,TBBUr);          
    end else begin
      MatRowGet(TBBUr,rownr,TBBUrw);
      if (nonblank(TBBUrw.TimeClass)) then begin
        TBBUDchrsum(TBBUr,rownr,true,GenOptRec.UseDiscount);
        TBBUSumup(TBBUr);
        PutWindowRecord(wn,TBBUr);
      end;
    end;
  end;  
  TBBUDClassQtyEFAfter = true;
  return;
end;
 
function Boolean TBBUDClassPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin  
  record INVc INr;
  record TBBUVc TBBUr;  
  row TBBUVc TBBUrw;
  string 255 tstr;
  val price,reb,v;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,TBBUr);
    MatRowGet(TBBUr,rownr,TBBUrw);

    if ((nonblank(TBBUrw.ArtCode)) or (nonblank(TBBUrw.TimeClass))) then begin
      TBBUDchrsum(TBBUr,rownr,true,GenOptRec.UseDiscount);
      TBBUSumup(TBBUr);
      PutWindowRecord(wn,TBBUr);          
    end;
  end;  
  TBBUDClassPriceEFAfter = true;
  return;
end;

function Boolean TBBUDClassSumEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record INVc INr;
  record TBBUVc TBBUr;  
  row TBBUVc TBBUrw;
  string 255 tstr;
  val price,reb,v,s;
  record GeneralOptionBlock GOb;

  if (changedf) then begin
    GetWindowRecord(wn,TBBUr);
    MatRowGet(TBBUr,rownr,TBBUrw);
  
    if ((TBBUrw.Qty!=0) and (TBBUrw.Price!=0)) then begin  
      BlockLoad(GOb);
      TBBUrw.Discount = blankval;
      CalcSum(TBBUrw.Qty,TBBUrw.Price,1,TBBUrw.Discount,v,GOb.UseDiscount);
      v = Round(v,SetRoundModeD(2));
      s = TBBUrw.Sum;
      s = v - s;
      s = s*100;
      s = s/v;
      TBBUrw.Discount = Round(s,SetRoundModeD(1));
      if (TBBUrw.Discount==0) then begin TBBUrw.Discount = blankval; end;
      MatRowPut(TBBUr,rownr,TBBUrw);
      TBBUDchrsum(TBBUr,rownr,true,GOb.UseDiscount);
      TBBUSumup(TBBUr);
      PutWindowRecord(wn,TBBUr);          
    end;

  end;  
  TBBUDClassSumEFAfter = true;
  return;
end;

global
function Boolean TBBUDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Sum": res = TBBUDClassSumEFAfter(wn,rownr,changed!=0);
    case "Price": res = TBBUDClassPriceEFAfter(wn,fn,rownr,changed);
    case "Qty": res = TBBUDClassQtyEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = TBBUDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "EMCode": res = TBBUDClassEMCodeEFAfter(wn,fn,rownr,changed);
    case "Cost": res = TBBUDClassCostEFAfter(wn,fn,rownr,changed);
    case "TimeClass": res = TBBUDClassTimeClassEFAfter(wn,fn,rownr,changed);
    case "Discount": res = TBBUDClassDiscountEFAfter(wn,fn,rownr,changed);
    case "PRCode": res = TBBUDClassPRCodeEFAfter(wn,fn,rownr,changed);
    case "Markup": res = TBBUDClassMarkupEFAfter(wn,fn,rownr,changed);
    case "BudType": res = TBBUDClassBudTypeEFAfter(wn,fn,rownr,changed);
    case "SalesMan": res = TBBUDClassSalesManEFAfter(wn,rownr,changed!=0);
    case "CurncyCode": res = TBBUDClassCurncyCodeEFAfter(wn,changed!=0);
    case "TransDate": res = TBBUDClassCurncyCodeEFAfter(wn,changed!=0);
  end;
  TBBUDClassAfterEditField = res;
  RETURN;
END;

function Boolean TBBUApprovalStarted(record TBBUVc TBBUr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (TBBUApprovalStatus(TBBUr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  TBBUApprovalStarted = res;
  return;
end;

global
function Boolean TBBUDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer nwn;
  
  res = true;
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LTBBUDClassActiveEditField;
    end;
  end;
  GetWindowRecord(wn,TBBUr);
  if (TBBUApprovalStarted(TBBUr) and UserCanChangePendingRecord(rownr)==false) then begin res = false; end;
  switch (fieldname) begin
    case "Cost": 
      if (rownr>=0) then begin
        MatRowGet(TBBUr,rownr,TBBUrw);
        if (nonblank(TBBUrw.EMCode)) then begin
          res = false;
        end;
      end;
    case "MotherArtCode": res = false;
    case "RecipeQuant": res = false;
    case "Recepy": res = false;
    case "ArtCode": 
      MatRowGet(TBBUr,rownr,TBBUrw);
      switch (TBBUrw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          res = false;
      end;
    case "Quant": 
      MatRowGet(TBBUr,rownr,TBBUrw);
      switch (TBBUrw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          res = false;
      end;
    case "Comment": 
      if (HasLocalization("PRT")) then begin
        MatRowGet(TBBUr,rownr,TBBUrw);
        if (nonblank(TBBUrw.ArtCode)) then begin
          res = false;
        end;
      end;
  end;
LTBBUDClassActiveEditField:;
  TBBUDClassActiveEditField = res;
  RETURN;
END;

/*
global
function Boolean TBBUDClassArtCodeEFActive(Integer wn,Integer fn,Integer wnst,Integer rownr,Integer changedf)
begin        
  record TBBUVc TBBUr;  
  Boolean res;

  if (changedf!=0) then begin
    GetWindowRecord(wn,TBBUr);
    if (blankdate(TBBUr.TransDate)) then begin
      res = true;
    end;
  end;  
  TBBUDClassArtCodeEFActive = res;  
  return;
end;

function
Boolean CheckBudgetRowsInvoiceNo(record TBBUVc TBBUr,Integer itemtype)
BEGIN
  row TBBUVc TBBUrw;
  Integer i,rwcnt;
  Boolean res;


  rwcnt = MatRowCnt(TBBUr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (TBBUrw.ItemType==itemtype) then begin
      if (TBBUrw.Invoiced!=-1) then begin        
        res = true;
      end;
    end; 
  end;
  CheckBudgetRowsInvoiceNo = res;
  RETURN;
END;
*/

global
function Boolean TBBUDClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res,testf;
  record TBBUVc TBBUr;
  Integer err;
  
  testf = true;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,TBBUr);
  if (UserCanAction("PrintPreviewNotApproved",false)==false) then begin
    err = TBBUTestApprovalStatus(TBBUr);
  end;
  if (err!=0) then begin
    MessageBox(err,"");
    testf = false;
  end;
  if (testf) then begin
    if ((WindowState(wn)==Rs_normal) and (previewf==false)) then begin
      RecordActionTBBU_Print(TBBUr,previewf);
    end else begin
      if (PrintDocument(TBBUr,"TBBudgetForm",previewf)) then begin end;
    end;  
  end;
  TBBUDClassPrint = res;
  RETURN;
END;

global
function Boolean TBBUDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record TBBUVc TBBUr;  
  row TBBUVc TBBUrw; 
  Integer rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum,sum;
  string 255 recepy;

  res = true;
  GetWindowRecord(wn,TBBUr);
  rwcnt = MatRowCnt(TBBUr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(TBBUr,rownr,TBBUrw);
    t = TBBUrw.GP;
    rowsum = TBBUrw.Sum;
    CalcProc(rowsum,t,tproc);    
    unitprdisc = TBBUrw.Sum/TBBUrw.Qty;
    unitprdisc = Round(unitprdisc,DefaultRoundMode);    
    recepy = TBBUrw.Recepy;
/*  This makes one extra call, I can see why but we need another solution
      if (blank(recepy)) then begin
        GetRecepy(TBBUrw.ArtCode,recepy);
      end;  
*/
    SendArtStat(TBBUrw.ArtCode,"",recepy,t,tproc,unitprdisc,TBBUr.TransDate,0);
  end;
  TBBUDClassSwitchRow = res;  
  return;
end;

procedure AddTBBULineType(Integer t,Boolean firstf)
begin
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer wn,rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,TBBUr);
//  if (TBBUr.OKFlag==0) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,false);
    if (rownr<0) then begin 
      if (firstf) then begin
        rownr = 0;
      end else begin
        rownr = MatRowCnt(TBBUr);
      end;
    end;
    ClearRow(TBBUr,TBBUrw,t);
    TBBUrw.Spec = "";
    MatRowInsert(TBBUr,rownr,TBBUrw);
    PutWindowRecord(wn,TBBUr);
    WindowFieldGoto(wn,TBBUr,rownr,"Spec",false);
//  end;
  return;
end;

global
function Boolean TBBUDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record TBBUVc TBBUr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,TBBUr);    
    TBBUSumup(TBBUr);
    PutWindowRecord(wn,TBBUr);    
  end;
  TBBUDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean TBBUDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record TBBUVc TBBUr;
  record PRVc PRr;

  res = true;
  if (UserCanAction("DisallowPRBudgetChangefornonPRMan",false)) then begin
    GetWindowRecord(wn,TBBUr);
    res = TBBUTestApprovalStatus(TBBUr)==0;
    if (res) then begin
      PRr.Code = TBBUr.PRCode;
      if ReadFirstMain(PRr,1,true) then begin 
        res = CheckProjectManager(PRr);
      end;  
    end;
  end;
  TBBUDClassUpdateTest = res;
  return;
end;

global 
function Boolean TBBUDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Boolean res,puf;
  record INVc INr;
  Integer i,rwcnt;

  res = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,TBBUr);    
    case Rs_insert:
      GetWindowRecord(wn,TBBUr);    
    case Rs_normal:
      GetWindowRecord(wn,TBBUr);    
  end;
  if (TBBUApprovalStarted(TBBUr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
    res = false;
  end;
  if (res) then begin
    MatRowGet(TBBUr,rownr,TBBUrw);
    switch (TBBUrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        res = false;
    end;
  end;
  if (res) then begin
    MatRowGet(TBBUr,rownr,TBBUrw);
    if (TBBUrw.Qty!=0) then begin
      if (ReadFirstItem(TBBUrw.ArtCode,INr,false,false)) then begin
        if (INr.ItemType==kItemTypeStructured) then begin
          if (INr.ExplodeRec!=0) then begin
            rwcnt = MatRowCnt(TBBUr);
            i = rownr + 1;
            while (i<rwcnt) begin
              MatRowGet(TBBUr,i,TBBUrw); 
              if (TBBUrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
                MatRowDelete(TBBUr,i);
                puf = true;
              end else begin
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
    end;
    if (TBBUrw.Invoiced>0) then begin res = false; end;
    if (puf) then begin
      PutWindowRecord(wn,TBBUr);    
    end;
  end;
LTBBUDClassDeleteRowTest:;  
  TBBUDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean TBBUDClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,TBBUr);    
    case Rs_insert:
      GetWindowRecord(wn,TBBUr);    
    case Rs_normal:
      GetWindowRecord(wn,TBBUr);    
  end;
  if (TBBUApprovalStarted(TBBUr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
    res = false;
  end;
  if (res) then begin
    MatRowGet(TBBUr,rownr,TBBUrw);
    switch (TBBUrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        res = false;
    end;
  end;
  TBBUDClassInsertRowTest = res;
  return;
end;

procedure TBBUDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record TBBUVc TBBUr;
  Integer rownr;

  GetWindowRecord(wn,TBBUr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);//to get VARINSClass working
  WindowFieldGoto(wn,TBBUr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 TBBUDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;

  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ArtCode": TBBUDClassSpecPasteNameArtCode(wn,psname);
  end;
  TBBUDClassSpecPasteName = psname;
  return;
end;
