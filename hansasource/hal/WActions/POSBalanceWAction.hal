remote function Val GetPOSBalance(Date,Time,string,string);
remote function Val GetAccSales(Date,Time,string,string);

global
function Boolean POSBalanceDClassNLTransDoneButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record POSBalanceVc POSBalancer;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,POSBalancer);
    if (POSBalancer.NLTransDone!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,POSBalancer);
    if (POSBalancer.NLTransDone!=0) then begin
      res = false;
    end;
  end;  
  POSBalanceDClassNLTransDoneButtonAction = res;
  RETURN;
END;

global
function Boolean POSBalanceDClassUpdateTest(Integer wn)
BEGIN
  record POSBalanceVc POSBalancer;
  Boolean res;
  
  res = true;
  switch (WindowState(wn)) begin
    case 2://update
      GetWindowRecord(wn,POSBalancer);
      if (POSBalancer.NLTransDone!=0) then begin
        if (UserCanAction("UpdatePOSEvent",false)==false) then begin
          res = false;
        end;
      end;
    case 0://normal
      GetWindowRecord(wn,POSBalancer);
      if (POSBalancer.NLTransDone!=0) then begin
        if (UserCanAction("UpdatePOSEvent",false)==false) then begin
          res = false;
        end;
      end;
  end;
  POSBalanceDClassUpdateTest = res;
  RETURN;
END;

function Boolean POSBalanceDClassAllEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record POSBalanceVc POSBalancer;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,POSBalancer);
    POSBalancer.Bal = GetPOSBalance(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer);
    POSBalancer.AccSales = GetAccSales(POSBalancer.TransDate,POSBalancer.TransTime,POSBalancer.MachineName,POSBalancer.Drawer);
    
    PutWindowRecord(wn,POSBalancer);    
  end;
  POSBalanceDClassAllEFAfter = res;
  RETURN;
END;

global
function Boolean POSBalanceDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Drawer": res = POSBalanceDClassAllEFAfter(wn,fn,rownr,changed);
    case "MachineName": res = POSBalanceDClassAllEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = POSBalanceDClassAllEFAfter(wn,fn,rownr,changed);
    case "TransTime": res = POSBalanceDClassAllEFAfter(wn,fn,rownr,changed);
  end;
  POSBalanceDClassAfterEditField = res;
  RETURN;
END;
 
global
procedure POSBalanceOpenDrawer()
BEGIN
  Integer wn,nwn;
  record POSBalanceVc POSBalancer;
  
  wn = CurWindow;
  GetWindowRecord(wn,POSBalancer);
  WindowFieldGoto(wn,POSBalancer,-1,"Drawer",true);
  nwn = OpenPasteWindow(wn,"DrawerSClass","");
  RETURN;
END;

