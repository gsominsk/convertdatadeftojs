remote procedure IntORDClassOnOpenWindowRemote(var record IntORVc,var Integer);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_IntORVc(record IntORVc,var record RcVc,var Integer);
remote function Integer IntORApprovalStatus(record IntORVc,var record AcceptanceRulesVc);
remote function Integer IntORTestApprovalStatus(record IntORVc);
external function Integer CountObjects(string);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
remote function Boolean TestIntORRowActive(record IntORVc,row IntORVc,Integer);
remote function Integer SendForAcceptance_IntORVc(var record IntORVc,var record RcVc);
external function roundmode DefaultRoundMode();
remote function val GetIntORRowReserv(LongInt,string,string,var val,var string,var string,var string,Boolean);
remote procedure GetCurUser(var record UserVc);
external procedure CalcSum(val,val,val,val,var val,Integer);
//external function Boolean UserInAccGroup(string,LongInt,string);
remote updating function LongInt RecordAction_raPasteIntOrdInPO(LongInt,string,var record POVc);
external function Boolean TestForMATVARINS(Integer);
remote function Boolean IntORVc_PasteArtCode(var record IntORVc,Integer,Boolean);
remote procedure IntORVc_PasteLocation(var record IntORVc);
remote function Boolean IntORVc_PasteOurUser(var record IntORVc);
external function Boolean DidYouAuthorize(string);
external procedure NormalizeObjstr(var string);
remote updating function LongInt RecordAction_raPasteIntOrdInSD(var record IntORVc,var record SDVc,Boolean);
remote updating function LongInt RecordAction_raPasteIntOrdInStockMov(var record IntORVc,var record StockMovVc,Boolean);
external updating procedure RecordActionIntOR_Print(var record IntORVc,string,Boolean);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure GetRecepy(string,var string);
external function Boolean UserCanChangePendingRecord(Integer);

global
procedure SumupIntOR(var record IntORVc IntORp,var val totp)
BEGIN
  row IntORVc IntORrw;
  Integer i,rwcnt;

  totp = blankval;
  rwcnt = MatRowCnt(IntORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IntORp,i,IntORrw);
    if (IntORrw.ovst==0) then begin
      totp = totp + IntORrw.Sum;
    end;
  end;
  RETURN;
END;

global
function Boolean IntORchrsum(record IntORVc IntORp,Integer rownr)
BEGIN
  Boolean chsum;
  val t;
  row IntORVc IntORrw;
  
  MatRowGet(IntORp,rownr,IntORrw);
  CalcSum(IntORrw.Quant,IntORrw.Price,0,t,t,0);
  if (t!=IntORrw.Sum) then begin
    chsum = true;
    IntORrw.Sum = t;
  end;
  MatRowPut(IntORp,rownr,IntORrw);    
  IntORchrsum = chsum;
  RETURN;
END;

procedure IntORVc_PasteQuant(var record IntORVc IntORp,Integer rownr)
BEGIN
  Boolean res;
  val t;
  Boolean chsum;
  
  chsum = IntORchrsum(IntORp,rownr);
  if (chsum) then begin
    SumupIntOR(IntORp,t);
    IntORp.Total = t;
  end;
  RETURN;
END;

procedure IntORVc_PastePrice(var record IntORVc IntORp,Integer rownr)
BEGIN
  Boolean res;
  val t;
  Boolean chsum;
  
  chsum = IntORchrsum(IntORp,rownr);
  if (chsum) then begin
    SumupIntOR(IntORp,t);
    IntORp.Total = t;
  end;
  RETURN;
END;

global
updating procedure PrintIntORL(Integer wn,Boolean previewf)
BEGIN
  record IntORVc IntORr;
  Integer i;
  Boolean testf;
  Integer r;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(IntORr,wn,i)) begin
    testf = true;
    r = IntORTestApprovalStatus(IntORr);
    if (r!=0) then begin
      MessageBox(r,"");
      testf = false;
    end;
    if (testf) then begin
      RecordActionIntOR_Print(IntORr,previewf,true);
    end;
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
updating procedure StockMovFromIntORDsm()
BEGIN
  record IntORVc IntORr;
  record StockMovVc StockMovr;
  LongInt r;
  Integer wn,nwn;
  record IntORClassVc IntORClassr;
  record AcceptSetBlock ASr;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,IntORr);
    if (IntORr.Closed!=0) then begin 
      MessageBox(22062,"");
      goto LStockMovFromIntORDsm;
    end;
    r = IntORTestApprovalStatus(IntORr);
    if (r!=0) then begin
      MessageBox(r,"");
      goto LStockMovFromIntORDsm;
    end;
    if (UserCanAction("IntORToStockMov",true)) then begin
      if nonblank(IntORr.IntORClass) then begin
        IntORClassr.Code = IntORr.IntORClass;
        if (ReadFirstMain(IntORClassr,1,true)) then begin
          if (IntORClassr.DisallowStockMov==1) then begin
            MessageBox(20091,IntORr.IntORClass);
            goto LStockMovFromIntORDsm;
          end;  
        end;  
      end;    
      BlockLoad(ASr) 
      if (IntORr.StatusFlag<>1) and (ASr.ForceAcceptIntOR<>0) then begin
        MessageBox(20039,"");
        goto LStockMovFromIntORDsm;
      end;
      r = RecordAction_raPasteIntOrdInStockMov(IntORr,StockMovr,true);
      switch (r) begin
        case -1: Beep;
        case -2: MessageBox(1281,"");
        otherwise
          nwn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
          WindowFieldGoto(nwn,StockMovr,-1,"FrLocation",true);
      end;
      UpdateBrowses("IntORVc");
    end else begin
      MessageBox(1274,StringFromStringSet(3,"IntORToStockMov"));
    end;
  end else begin
    Beep;
  end;
LStockMovFromIntORDsm:;
  RETURN;
END;

global
updating procedure SDFromIntORDsm()
BEGIN
  record IntORVc IntORr;
  record SDVc SDr;
  LongInt r;
  Integer wn,nwn;
  record IntORClassVc IntORClassr;
  record AcceptSetBlock ASr;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,IntORr);
    if (IntORr.Closed!=0) then begin 
      MessageBox(22062,"");
      goto LSDFromIntORDsm;
    end;
    r = IntORTestApprovalStatus(IntORr);
    if (r!=0) then begin
      MessageBox(r,"");
      goto LSDFromIntORDsm;
    end;
    if (UserCanAction("IntORToSD",true)) then begin
      if nonblank(IntORr.IntORClass) then begin
        IntORClassr.Code = IntORr.IntORClass;
        if (ReadFirstMain(IntORClassr,1,true)) then begin
          if (IntORClassr.DisallowSD==1) then begin
            MessageBox(20093,IntORr.IntORClass);
            goto LSDFromIntORDsm;
          end;  
        end;  
      end;    
      BlockLoad(ASr) 
      if (IntORr.StatusFlag<>1) and (ASr.ForceAcceptIntOR<>0) then begin
        MessageBox(20039,"");
        goto LSDFromIntORDsm;
      end;
      r = RecordAction_raPasteIntOrdInSD(IntORr,SDr,true);
      switch (r) begin
        case -1: Beep;
        case -2: MessageBox(1281,"");
        otherwise
          nwn = OpenWindow("SDDClass",1,0,"","",SDr);
      end;
      UpdateBrowses("IntORVc");
    end else begin
      MessageBox(1274,StringFromStringSet(3,"IntORToSD"));
    end;
  end else begin
    Beep;
  end;
 LSDFromIntORDsm:;
  RETURN;
END;

global
updating procedure POFromIntORDsm()
BEGIN
  Integer wn,nwn,r;
  record RcVc RepSpec;
  record IntORVc IntORr;
  record IntORClassVc IntORClassr;
  record AcceptSetBlock ASr;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("IntORToPO",true)) then begin
      GetWindowRecord(wn,IntORr);
      if (IntORr.Closed!=0) then begin 
        MessageBox(22062,"");
        goto LPOFromIntORDsm;
      end;
      r = IntORTestApprovalStatus(IntORr);
      if (r!=0) then begin
        MessageBox(r,"");
        goto LPOFromIntORDsm;
      end;
      if nonblank(IntORr.IntORClass) then begin
        IntORClassr.Code = IntORr.IntORClass;
        if (ReadFirstMain(IntORClassr,1,true)) then begin
          if (IntORClassr.DisallowPO==1) then begin
            MessageBox(20092,IntORr.IntORClass);
            goto LPOFromIntORDsm;
          end;  
        end;  
      end;  
      BlockLoad(ASr) 
      if (IntORr.StatusFlag<>1) and (ASr.ForceAcceptIntOR<>0) then begin
        MessageBox(20039,"");
        goto LPOFromIntORDsm;
      end;
      ReportDefaults(RepSpec,"POFromIntORVClass");
      RepSpec.FirstVer = IntORr.SerNr;
      nwn = OpenWindow("POFromIntORVClass",1,0,"","",RepSpec);
      PutWindowRecord(nwn,RepSpec);
      SelectWindow(nwn);
    end else begin
      MessageBox(1274,StringFromStringSet(3,"IntORToPO"));
    end;
  end else begin
    Beep;
  end;
 LPOFromIntORDsm:;
  RETURN;
END;

global
updating function Boolean POFromIntORVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  record POVc POr;
  Integer nwn;
  Integer r;
  
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"f1",true);
    goto LPOFromIntORVClassOnOKWindow;
  end;
  r = RecordAction_raPasteIntOrdInPO(RepSpec.FirstVer,RepSpec.f1,POr);
  switch (r) begin
    case -1: Beep;
    case -2: MessageBox(1281,"");
    otherwise
      nwn = OpenWindow("PODClass",1,0,"","",POr);
      UpdateBrowses("IntORVc");
  end;
  CloseWindow(wn);
LPOFromIntORVClassOnOKWindow:;  
  POFromIntORVClassOnOKWindow = false;
  RETURN;
END;

global
procedure AuthorizeIntORDsm()
BEGIN
  record IntORVc IntORr;
  Integer wn;
  string 255 tstr;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,IntORr);
    if (UserCanAction("AuthIntOrd",true)) then begin
      if (SetInSet(CurrentUser,IntORr.OKPersons)==false) then begin
        if (len(IntORr.OKPersons)<58) then begin
          tstr = IntORr.OKPersons;
          if (nonblank(tstr)) then begin
            tstr = tstr & ",";
          end;
          tstr = tstr & CurrentUser;
          NormalizeObjstr(tstr);
          IntORr.OKPersons = tstr;
          PutWindowRecord(wn,IntORr);          
        end else begin
          Beep;
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"AuthIntOrd"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

function Boolean IntORApprovalStarted(record IntORVc IntORr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (IntORApprovalStatus(IntORr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  IntORApprovalStarted = res;
  return;
end;

global 
function Boolean IntORDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record IntORVc IntORr;
  row IntORVc IntORrw;
  val ordqty;
  string 255 comment;

  res = true;
  if (WindowState(wn)==2) then begin
    GetPrevWindowRecord(wn,IntORr);
    if (IntORr.StatusFlag>0) then begin
      res = false;
    end;
    if (IntORApprovalStarted(IntORr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
      res = false;
    end;
    if (res) then begin
      MatRowGet(IntORr,rownr,IntORrw);
      if (GetIntORRowReserv(IntORr.SerNr,IntORrw.ArtCode,IntORrw.SerialNr,ordqty,comment,IntORr.FrLocation,IntORr.Location,true)>0) then begin
        res = false;
        MessageBox(20564,"");
        goto LIntORDClassDeleteRowTest;
      end;
    end;
  end;
LIntORDClassDeleteRowTest:;
  IntORDClassDeleteRowTest = res;
  RETURN;
END;

global 
function Boolean IntORDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record IntORVc IntORr;
  Integer wnst;

  res = true;
  wnst = WindowState(wn);
  if ((wnst==0) or (wnst==2)) then begin
    GetWindowRecord(wn,IntORr);
    if (IntORr.StatusFlag>0) then begin
      res = false;
    end;
    if (IntORApprovalStarted(IntORr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
      res = false;
    end;
  end;
  IntORDClassInsertRowTest = res;
  RETURN;
END;

global
function Boolean IntORDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record IntORVc IntORr;
  val t;

  if (rownr>=0) then begin
    GetWindowRecord(wn,IntORr);    
    SumupIntOR(IntORr,t);
    IntORr.Total = t;
    PutWindowRecord(wn,IntORr);    
  end;
  IntORDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean IntORDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record IntORVc IntORr;
  row IntORVc IntORrw;
  Integer nwn;
  
  res = true;
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LIntORDClassActiveEditField;
    end;
  end;
  if (WindowState(wn)!=Rs_insert) then begin
    switch (fieldname) begin
      case "SerNr": res = false;
    end;
  end;
  GetWindowRecord(wn,IntORr);
  if (IntORr.StatusFlag>0) then begin
    res = false;
  end;
  if (IntORApprovalStarted(IntORr) and UserCanChangePendingRecord(rownr)==false) then begin
    res = false;
  end;
  if (res==false) then begin
    goto LIntORDClassActiveEditField;
  end;  
  if (rownr>=0) then begin
    MatRowGet(IntORr,rownr,IntORrw);
    switch (fieldname) begin
      case "Shipd2": res = false;
      case "Shipd1": res = false;
      case "Sent": res = false;
      case "POOrd": res = false;
      case "ArtCode":
        if (IntORrw.Shipd1!=0) then begin res = false; end;
        if (IntORrw.Shipd2!=0) then begin res = false; end;
        if (IntORrw.Sent!=0) then begin res = false; end;
        if (IntORrw.POOrd!=0) then begin res = false; end;
        if (res) then begin
          res = TestIntORRowActive(IntORr,IntORrw,rownr);
        end;
    end;
  end;
LIntORDClassActiveEditField:;  
  IntORDClassActiveEditField = res;
  RETURN;
END;

//JJACCEPT
function Boolean IntORTestForAcceptance(record IntORVc IntORr)
begin
  Boolean res;
  record AcceptSetBlock ASr;
  
  BlockLoad(ASr);
  res = true;
  if (ASr.ForceAcceptIntOR!=0) then begin
    if (IntORr.StatusFlag!=1) then begin
      res = false;
    end;
  end;
  IntORTestForAcceptance = res;
  return;
end;

function Boolean IntORIsAccepted(record IntORVc IntORr)
begin
  Boolean res;
  record AcceptSetBlock ASr;
  
  BlockLoad(ASr);
  res = true;
  if (ASr.ForceAcceptIntOR!=0) then begin
    if (IntORr.StatusFlag!=1) then begin
      res = false;
    end;
  end;
  IntORIsAccepted = res;
  return;
end;

function Boolean IntORAcceptStarted(record IntORVc IntORr)
begin
  Boolean res;

  res = false;
  IntORAcceptStarted = res;
  return;
end;

global
function Boolean IntORDClassStatusFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record IntORVc IntORr;
  Integer normalmode,updatemode;
  record AcceptSetBlock AcceptSetRec;
 
//  if (DidYouAuthorize(IntORr.OKPersons)==false) then begin res = false; end;
//  if (IntORr.StatusFlag==0) then begin res = IntORTestForAcceptance(IntORr); end;
//  if (IntORr.StatusFlag>0) then begin res = false; end;
//  if (UserCanAction("AuthIntOrd",true)==false) then begin res = false; end;
  BlockLoad(AcceptSetRec);
  res = false;
  if (AcceptSetRec.ForceAcceptIntOR!=0) then begin
    goto LIntORDClassStatusFlagButtonAction;
  end;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IntORr);
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IntORr);  
  end;
  switch (IntORr.StatusFlag) begin
    case 0: if ((value==1) or (value==4)) then begin res = true; end;
    case 4: if (value==1)  then begin res = true; end;
  end;
  if (UserCanAction("AuthIntOrd",false)) then begin res = true; end;
LIntORDClassStatusFlagButtonAction:;
  IntORDClassStatusFlagButtonAction = res;
  return;
end;

function Boolean IntORDClassPlanShipEFAfter(Integer wn,Boolean changedf)
begin
  record IntORVc IntORr;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;
  
  if (changedf) then begin
    BlockLoad(PlanDelRec);
    GetWindowRecord(wn,IntORr);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = IntORr.PlanShip;
        IntORr.PlanShip = d;
        IntORr.PlanShipDate = StringToDate(IntORr.PlanShip);
      case 2:  /* week number (nn) */
        week = IntORr.PlanShip;
        IntORr.PlanShip = week;
      case 3:  /* week number (yynn */
        if (nonblank(IntORr.PlanShip)) then begin
          week = IntORr.PlanShip;
          IntORr.PlanShip = week;
          if (len(IntORr.PlanShip)<4) then begin
            IntORr.PlanShip = "0" & IntORr.PlanShip;
          end;
          if (len(IntORr.PlanShip)>4) then begin
            IntORr.PlanShip = Left(IntORr.PlanShip,4);
          end;
        end;
    end;
    PutWindowRecord(wn,IntORr);    
  end;
  IntORDClassPlanShipEFAfter = true;
  return;
end;

function Boolean IntORDClassOurUserEFAfter(Integer wn,Boolean changedf)
begin
  record IntORVc IntORr;

  if (changedf) then begin
    GetWindowRecord(wn,IntORr);
    if (IntORVc_PasteOurUser(IntORr)) then begin
      PutWindowRecord(wn,IntORr);    
    end else begin
      Beep;
    end;
  end;
  IntORDClassOurUserEFAfter = true;
  return;
end;

function Boolean IntORDClassLocationEFAfter(Integer wn,Boolean changedf)
begin
  record IntORVc IntORr;

  if (changedf) then begin
    GetWindowRecord(wn,IntORr);
    IntORVc_PasteLocation(IntORr);
    PutWindowRecord(wn,IntORr);    
  end;
  IntORDClassLocationEFAfter = true;
  return;
end;

global
function Boolean IntORDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record IntORVc IntORr;  
  row IntORVc IntORrw; 
  Integer rwcnt;
  Boolean res;
  val unitprdisc;
  string 255 recepy;
  
  res = true;
  GetWindowRecord(wn,IntORr);
  rwcnt = MatRowCnt(IntORr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    MatRowGet(IntORr,rownr,IntORrw);
    unitprdisc = IntORrw.Sum/IntORrw.Quant;
    unitprdisc = Round(unitprdisc,DefaultRoundMode);
    recepy = IntORrw.Recepy;
/*  This makes one extra call, I can see why but we need another solution
      if (blank(recepy)) then begin
        GetRecepy(IntORrw.ArtCode,recepy);
      end;  
*/
    SendArtStat(IntORrw.ArtCode,IntORr.Location,recepy,0,0,unitprdisc,IntORr.TransDate,0);
    SetWindowNameArg(wn,IntORrw.ArtCode & ":" & IntORr.Location);
  end;
  IntORDClassSwitchRow = res;  
  return;
end;

function Boolean IntORDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record IntORVc IntORr;
  Boolean chsum;
  val t;

  GetWindowRecord(wn,IntORr);
  if (IntORVc_PasteArtCode(IntORr,rownr,changedf)) then begin
    chsum = IntORchrsum(IntORr,rownr);
    if (chsum) then begin
      SumupIntOR(IntORr,t);
      IntORr.Total = t;
    end;
    PutWindowRecord(wn,IntORr);
    if (IntORDClassSwitchRow(wn,rownr)) then begin end;    
  end else begin
    if (changedf) then begin
      Beep;
    end;
  end;
  IntORDClassArtCodeEFAfter = true;
  return;
end;

function Boolean IntORDClassQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record IntORVc IntORr;

  if (changedf) then begin
    GetWindowRecord(wn,IntORr);
    IntORVc_PasteQuant(IntORr,rownr);
    PutWindowRecord(wn,IntORr);    
  end;
  IntORDClassQuantEFAfter = true;
  return;
end;

function Boolean IntORDClassPriceEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record IntORVc IntORr;

  if (changedf) then begin
    GetWindowRecord(wn,IntORr);
    IntORVc_PastePrice(IntORr,rownr);
    PutWindowRecord(wn,IntORr);    
  end;
  IntORDClassPriceEFAfter = true;
  return;
end;

global
function Boolean IntORDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PlanShip": res = IntORDClassPlanShipEFAfter(wn,changed!=0);
    case "OurUser": res = IntORDClassOurUserEFAfter(wn,changed!=0);
    case "Location": res = IntORDClassLocationEFAfter(wn,changed!=0);
    case "ArtCode": res = IntORDClassArtCodeEFAfter(wn,rownr,changed!=0);
    case "Quant": res = IntORDClassQuantEFAfter(wn,rownr,changed!=0);
    case "Price": res = IntORDClassPriceEFAfter(wn,rownr,changed!=0);
  end;
  IntORDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean IntORDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record IntORVc IntORr;
  row IntORVc IntORrw;

  switch (fieldname) begin  
    case "Quant":     
      GetWindowRecord(wn,IntORr);      
      MatRowGet(IntORr,rownr,IntORrw);
      if (IntORrw.Quant==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  IntORDClassBeforeEditField = res;
  return;
end;

global
function Boolean IntORDClassClosedButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IntORVc IntORr;
  Integer normalmode,updatemode;
 
  res = true;
  if (UserCanAction("DisallowIntORClose",false)) then begin
    res = false;
  end;
  IntORDClassClosedButtonAction = res;
  RETURN;
END;

global
function Boolean IntORDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record IntORVc IntORr;
  
  res = true;
  GetWindowRecord(wn,IntORr);
  if (IntORr.Closed!=0) then begin
    res = false;
  end;
  IntORDClassUpdateTest = res;
  RETURN;
END;

global
procedure IntORStatIntORDsm()
begin
  record RcVc RepSpec;
  record IntORVc IntORr;
  
  GetWindowRecord(CurWindow,IntORr);
  RepSpec.long1 = IntORr.SerNr;
  RepSpec.f1 = IntORr.OurUser;   
  RepSpec.f2 = IntORr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "IntORStatRn";
  RunReport(RepSpec,0);
  return;
end;

global
updating procedure IntORReservIntORDsm()
begin
  record RcVc RepSpec;
  record IntORVc IntORr;
  record UserVc Userr;
  Integer normalstate,wn;

  wn = CurWindow;
  normalstate = 0;//Rs_normal
  if (WindowState(wn)==normalstate) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IntORr);
    GetCurUser(Userr);
    if (nonblank(Userr.ReservLocation)) then begin
      if (Userr.ReservLocation!=IntORr.FrLocation) then begin
        IntORr.FrLocation = Userr.ReservLocation;
        PutWindowRecord(wn,IntORr);
        if (WindowDOOK(wn,0)) then begin
        end;
      end;
    end;
    RepSpec.f1 = IntORr.SerNr;
    RepSpec.Media = mtScreen;
    RepSpec.repname = "IntORReservRn";
    RunReport(RepSpec,0);
  end;
  return;
end;

global
updating procedure IntORSendforAcceptanceIntORDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record IntORVc IntORr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,IntORr);
  if (WindowState(wn)!=Rs_insert) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LIntORSendforAcceptanceIntORDsm;
    end;
    GetWindowRecord(wn,IntORr);
  end;
  IntORr.AcceptanceBy = acceptanceby;
  IntORr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_IntORVc(IntORr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(IntORr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,IntORr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LIntORSendforAcceptanceIntORDsm:;  
  return;
end;

global
updating procedure IntORSendforAcceptanceIntORDsm()
begin
  IntORSendforAcceptanceIntORDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure IntORCancelApprovalRequest(Integer wn)
begin
  record IntORVc IntORr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,IntORr);
  err = CancelApprovalRequest("IntORVc",IntORr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LIntORCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LIntORCancelApprovalRequest:;
  return;
end;

global
function Boolean IntORDClassOnOpenWindow(Integer wn)
begin
  record IntORVc IntORr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,IntORr);
  IntORDClassOnOpenWindowRemote(IntORr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  IntORDClassOnOpenWindow = false;
  return;
end;

global
procedure IntORDClassOnWindowRecordChange(Integer wn)
begin
  record IntORVc IntORr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,IntORr);
  IntORDClassOnOpenWindowRemote(IntORr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
