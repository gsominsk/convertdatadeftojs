global
function Boolean AT2TakeDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record AT2TakeVc AT2Taker;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,AT2Taker);
    if (AT2Taker.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,AT2Taker);
    if (AT2Taker.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  AT2TakeDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean AT2TakeDClassPhysCheckfButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record AT2TakeVc AT2Taker;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,AT2Taker);
    if (AT2Taker.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,AT2Taker);
    if (AT2Taker.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  AT2TakeDClassPhysCheckfButtonAction = res;
  RETURN;
END;

global
updating function Boolean AT2TakeDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record AT2TakeVc AT2Taker;
  Integer normalmode,tf;

  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,AT2Taker);  
  if (PrintDocument(AT2Taker,"AT2TakeForm",previewf)) then begin end;
  AT2TakeDClassPrint = true;
  RETURN;
END;

procedure FindAT2Name(string InventoryNr,var string res,var val qty)
BEGIN
  record AT2UnitVc ATUnitr;
  
  qty = blankval;
  res = "";
  ATUnitr.InventoryNr = InventoryNr;
  if (ReadFirstMain(ATUnitr,1,true)) then begin
    res = ATUnitr.Description;
    qty = ATUnitr.Quantity;
  end;
  RETURN;
END;

function Boolean AT2TakeDClassInventoryNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record TextTypeVc Textr;
  record AT2TakeVc AT2Taker;
  row AT2TakeVc AT2Takerw;
  string 255 tstr;
  val qty;
  
  res = true;
  if ((changedf!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,AT2Taker);
    DeselectWindow(wn,false);
    MatRowGet(AT2Taker,rownr,AT2Takerw);
    FindAT2Name(AT2Takerw.InventoryNr,tstr,qty);
    AT2Takerw.Description = tstr;
    MatRowPut(AT2Taker,rownr,AT2Takerw);
    PutWindowRecord(wn,AT2Taker);
  end;
  AT2TakeDClassInventoryNrEFAfter = res;
  return;
end;

global
function Boolean AT2TakeDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "InventoryNr": res = AT2TakeDClassInventoryNrEFAfter(wn,fn,rownr,changed);
  end;
  AT2TakeDClassAfterEditField = res;
  RETURN;
END;

global 
function Boolean AT2TakeDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record AT2TakeVc ATTaker;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,ATTaker);
      if (ATTaker.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,ATTaker);
      if (ATTaker.OKFlag!=0) then begin res = false; end;
  end;
  AT2TakeDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean AT2TakeDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record AT2TakeVc ATTake2r;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,ATTake2r);    
    if (ATTake2r.OKFlag!=0) then begin res = false; end;
  end;
  AT2TakeDClassDeleteRowTest = res;
  return;
end;

global
function Boolean AT2TakeDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record AT2TakeVc ATTaker;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,ATTaker);
    if (ATTaker.OKFlag!=0) then begin
      res = false;
    end;
  end;
  AT2TakeDClassActiveEditField = res;
  RETURN;
END;