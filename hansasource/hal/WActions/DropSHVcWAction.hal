remote procedure DropSHSumUp(var record DropSHVc);
external procedure WarnFutureDate(Boolean,Date);
external function Boolean DateWarned(Date,string);
external function Boolean WarnOldRecords(Date,string,LongInt );
remote procedure SetDelAddr(string,string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var string,var Integer,var string);

function Boolean DropSHDClassShipEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record DropSHVc DropSHr;
  Boolean res;
  string 255 tstr;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DropSHr);
    DropSHSumUp(DropSHr);
    PutWindowRecord(wn,DropSHr);
  end;
  DropSHDClassShipEFAfter = res;
  return;
end;

function Boolean DropSHDClassShipDateEFAfter(Integer wn,Boolean changedf)
begin
  record DropSHVc DropSHr;
  Boolean res;
  string 255 tstr;
  
  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DropSHr);
    if (DateWarned(DropSHr.ShipDate,"DropSHVc")) then begin
      MessageBox(1045,tstr);
    end;
    if (WarnOldRecords(DropSHr.ShipDate,"DropSHVc",DropSHr.SerNr)) then begin
      MessageBox(2020,tstr);
    end;
    WarnFutureDate(true,DropSHr.ShipDate);
  end;
  DropSHDClassShipDateEFAfter = res;
  return;
end;

function Boolean DropSHDClassDelAddrCodeEFAfter(Integer wn,Boolean changedf)
begin
  record DropSHVc DropSHr;
  Boolean res;
  string 255 name,s1,s2,s3,s4,s5,country,region,taxtemplatecode,vatcode,dummy;
  Integer exportflag;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DropSHr);
    SetDelAddr(DropSHr.CustCode,DropSHr.DelAddrCode,name,s1,s2,s3,s4,s5,country,region,taxtemplatecode,vatcode,exportflag,dummy);
    DropSHr.Addr0 = name;
    DropSHr.Addr1 = s1;
    DropSHr.Addr2 = s2;
    DropSHr.Addr3 = s3;
    DropSHr.DelAddr3 = s4;
    DropSHr.DelAddr4 = s5;
    PutWindowRecord(wn,DropSHr);    
  end;
  DropSHDClassDelAddrCodeEFAfter = res;
  return;
end;

global
function Boolean DropSHDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "DelAddrCode": res = DropSHDClassDelAddrCodeEFAfter(wn,changed!=0);
    case "ShipDate": res = DropSHDClassShipDateEFAfter(wn,changed!=0);
    case "Ship": res = DropSHDClassShipEFAfter(wn,rownr,changed!=0);
//    case "Ship": res = SHDClassShipEFAfter(wn,fn,rownr,changed);
//    case "ShipMode": res = SHDClassShipModeEFAfter(wn,changed!=0);
  end;
  DropSHDClassAfterEditField = res;
  return;
end;

global
function Boolean DropSHDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record DropSHVc DropSHr;
  row DropSHVc DropSHrw;
  Boolean res;
  
  res = true;
  if (WindowState(wn)==Rs_update) then begin 
    GetPrevWindowRecord(wn,DropSHr);
    if (DropSHr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  DropSHDClassDeleteRowTest = res;
  return;
end;

global
function Boolean DropSHDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record DropSHVc DropSHr;
  row DropSHVc DropSHrw;
  Boolean res;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,DropSHr);
      if (DropSHr.OKFlag!=0) then begin res = false; end;
    case Rs_insert:
      res = true;
    case Rs_update:
      GetPrevWindowRecord(wn,DropSHr);
      if (DropSHr.OKFlag!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  DropSHDClassInsertRowTest = res;
  return;
end;

global
function Boolean DropSHDClassOnOverStrike(Integer wn,Integer rownr)
begin
  record DropSHVc DropSHr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,DropSHr);    
    PutWindowRecord(wn,DropSHr);   
  end;
  DropSHDClassOnOverStrike = true;
  return;
end;

function Boolean DropSHDClassButtonAction(string whichone,Integer wn,Integer value)
begin
  Boolean res;
  record DropSHVc DropSHr;
 
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,DropSHr);
    if (DropSHr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,DropSHr);
    if (DropSHr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  DropSHDClassButtonAction = res;
  return;
end;

global
function Boolean DropSHDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = DropSHDClassButtonAction("OKFlag",wn,value);
  DropSHDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean DropSHDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record DropSHVc DropSHr;
  record DropSHVc DropSH2r;
  Integer updatemode;
  string 200 tstr;
  
  updatemode = 2;//Rs_update
  res = true;
  GetWindowRecord(wn,DropSHr);
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,DropSH2r);
    if (DropSH2r.OKFlag!=0) then begin
      switch (fieldname) begin
        case "LangCode":
        otherwise
          res = false;
      end;
    end;
  end;
  if (res) then begin
    if (rownr>-1) then begin
      switch (fieldname) begin
        case "ArtCode":
          res = false;
        case "Ordered":
          res = false;
        otherwise
          if (DropSHr.OKFlag!=0) then begin
            res = false;
            if (changed!=0) then begin
              MessageBox(1067,tstr);
            end;
          end;
      end;
    end;
  end;
  DropSHDClassActiveEditField = res;
  return;
end;

