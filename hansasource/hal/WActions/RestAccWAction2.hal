remote procedure RestAccDClassTouchScreenReturnRemote(record RestAccVc,var record RestAccVc);
remote function string 255 CurDrawerCode(string);
remote updating procedure UpdateAffectedRowsToKitchenOrderFromRestAcc(longint,integer,string);
external procedure OpenOpenRecordTouchScreenOClass(Integer,LongInt,LongInt);
forward updating procedure RestAccDClassTouchScreenTransfertoInvoice();
external procedure RestAccToIV_FromBar(record RestAccVc,var record IVVc);
external updating procedure OpenPOSSessionsm;
external updating procedure ClosePOSSessionsm;
external procedure POSMoneyInsm;
external procedure POSMoneyOutsm;
external procedure IVCashCashupRnsm;
remote updating function LongInt RestAccVcRecordCheck(var record RestAccVc,record RestAccVc,LongInt,LongInt);
forward updating procedure RestAccDClassTouchScreenSaveBarTab();
external function Boolean IsDigit(string);
external updating procedure RecordActionRestAcc_Print(var record RestAccVc,string,string,Boolean);
external function Boolean srlRestAccLPrint(var record RestAccVc,string,string);
external procedure POSManagersAction2(Integer,string,string);
remote function Integer CalculateLoyaltyPointsPayment_RestAccVc(record RestAccVc,val,var val,var val,var val);
external function Boolean IsDigit(string);
remote procedure RestAccToKitchenOrder(record RestAccVc,var record KitchenOrderVc);
external procedure RestAccToIV_FromBarTransferSL(record RestAccVc,var record IVVc);
external function Boolean GetCustAndBal(var record CUVc,var val,var val,Integer,Integer,Integer,Integer,Integer,Integer,var Boolean);
forward updating procedure RestAccDClassTouchScreenTransfertoSL();
external procedure RestAccDClassTouchScreenAllInvoices();
external procedure OpenSetBarTabClassTouchScreenTClass(Integer,LongInt);
external function LongInt RestAccVcRecordDefaultsClient(LongInt,var record RestAccVc,record RestAccVc,LongInt,LongInt);
external procedure RestAccDClassTouchScreenLoyaltyCard();
external procedure RestAccDClassTouchScreenStackButtonExecute(string);
external procedure ExtractObj(string,var Integer,var string);
external procedure OpenTableLayoutCLass(Integer,string,LongInt,Integer);
external procedure OpenSplitBarTabTouchScreenTClass(Integer,record RestAcc);
external updating procedure RestAccPrintInvoice();
external procedure OpenMergeBarTabTouchScreenTClass(Integer,LongInt);
external procedure OpenMoveItemToBarTabTouchScreenOClass(Integer,LongInt);
external procedure OpenSetCoversTouchScreenTClass(Integer,LongInt,LongInt);
external procedure OpenOnHotelGuestTouchScreenOClass(Integer,LongInt,val,string,string,string);
external updating procedure RestAccPrintFireOrder();
external updating procedure RestAccPrintCancel();
external updating procedure RestAccDClassTouchScreenPrint();
remote function Boolean RestAccDchrsum(var record RestAccVc,Integer,Integer);
external function Boolean RestAccDClassDeleteRowTest(Integer,Integer);
external updating procedure RestAccDClassTouchScreenButtonLogin();
remote procedure LoyaltyPointsPayment_RestAccVc(var record RestAccVc,val,string);
external updating procedure RestAccCurUserTabs();
external procedure OpenDCPayTouchScreenDClass(Integer,Integer,LongInt,val,val,val,string,string,string);
external procedure OpenCCPayTouchScreenDClass(Integer,Integer,LongInt,val,val,val,string,string,string);
external procedure OpenChequePayTouchScreenDClass(Integer,Integer,LongInt,val,val,string,string,string);
external procedure OpenGiftVoucherTouchScreenDClass(Integer,Integer,LongInt,val,val,string,string,string);
external procedure OpenNPTSCashPaymentTClass(Integer,LongInt,val,val,string,string,string);
external procedure OpenNPTSPaymentTClass(Integer,LongInt,val,val,string);
external procedure RestAccDClassGotoPage(string,string);
external procedure OpenSelectModifiers2WClass(Integer,string);
external function Boolean RestAccDClasstouchscreenitemEFAfter(Integer ,Boolean);
external procedure SetPOSWindowDisplay(string,string);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);
external function Boolean RestAccDClassVoidRow(var record RestAccVc,Integer,string,Boolean);
external function boolean POSButtonsForWindow(integer,var record POSButtonsVc);
external procedure POSManagersAction(Integer,string);
remote procedure RestAccSumup(var record RestAccVc,string);
external function Boolean ReadRestOpenHours(string,var record RestOpenHoursVc);
external procedure RestAccPriceLookupPasteItem(string);
external function roundmode DefaultRoundMode();
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
remote procedure RestPMOtherPayRemote_RestAcc(var record RestAccVc,string,Integer);
remote function val GetServiceCharge(var record RestAccVc,record LocalMachineBlock,Boolean);
remote procedure BuildRestaurantOrder(record RestAccVc,var array Integer,var Integer,var array Integer,var Integer);
external procedure RestAccBarOrder(record RestAccVc,var array Integer,Integer);
external updating procedure RestAccReceiptPrint(record RestAccVc,Boolean,Boolean);
remote updating procedure CreateCashDrawerAct(string);
external procedure OpenCashDrawer_IVVc(record IVVc);
external procedure OpenCashDrawer_RestAccVc(record RestAccVc);
remote updating function LongInt RestAccCheckIfSaveAllowed(var record RestAccVc,record RestAccVc,LongInt,LongInt);
remote function Boolean RestAccVc_PasteArtCode(var record RestAccVc,Integer,record LocalMachineBlock,string,Integer,val,var string);
external procedure DisplayRestAccItem(record RestAccVc,Integer);
external function Boolean TimeInRange(Time,Time,Time);
external procedure PUCalcPerc(val,string,var val);
external procedure RunReportOnServer(string);
external updating function Boolean DoXMLExport_RestAccVc(var record RestAccVc);
external procedure UpdateVoidQtyTouchScreenOClass(Integer,LongInt,LongInt,Integer,string);

global
procedure RestAccSumupSoftEditFields(Integer wn,record RestAccVc RestAccr)
begin
  return;
end;

global 
procedure RestBookingFromRestAccDsm()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  record RestBookingVc RestBookingr;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  RestBookingr.BookDate = RestAccr.TransDate;
  RestBookingr.CUCode = RestAccr.CUCode;
//  RestBookingr.Contact = RestAccr.
  RestBookingr.ResCode = RestAccr.Resource;
  RestBookingr.CUName = RestAccr.CUName;
//  RestBookingr.Phone = RestAccr.
  nwn = OpenWindow("RestBookingDClass",1,0,"","",RestBookingr);  
  RETURN;
END;

global 
procedure RestBookingRnRestAccDsm()
BEGIN
  record RestAccVc RestAccr;
  record RcVc RepSpec;
  
  if (UserCanAction("AllowUsingBookingsonBarTab",true)) then begin
  //  GetWindowRecord(CurWindow,RestAccr);
    ReportDefaults(RepSpec,"RestBookingRClass");
    RepSpec.Period2Str = CurrentDate;
    RepSpec.Period2Str = RepSpec.Period2Str & ":";
    RepSpec.Period2Str = RepSpec.Period2Str & CurrentDate;
    RepSpec.sStartDate = CurrentDate;
    RepSpec.sEndDate = CurrentDate;
    RepSpec.repname = "RestBookingRn";
    RepSpec.Media = mtScreen;
    RepSpec.UsedOnly = CurWindow;
//  PutWindowRecord(CurWindow,RestAccr);
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

      
global 
procedure FIFTYRestAccDsm()//DEMO
BEGIN
  record RestAccVc RestAccr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowDeactivateField(wn);
  RestAccr.Paid = RestAccr.Paid + 50;
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;

global
procedure RestAccPasteItem(string artcode)
BEGIN
  Integer wn,rownr;
  record INVc INr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Boolean testf;
  Integer i,rwcnt;
  record LocalMachineBlock LMb;
  string 255 printgroupcode,inwarning;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
/*  
  INr.Code = artcode;
  if (ReadFirstMain(INr,1,true)==false) then begin 
    goto LRestAccPasteItem;
  end;
*/  
  rownr = WindowActiveRow(wn);
  testf = true;
  WindowDeactivateField(wn);
  if (testf) then begin
    if (rownr>=0) then begin
      GetWindowRecord(wn,RestAccr);  
      MatRowGet(RestAccr,rownr,RestAccrw);
      if (nonblank(artcode)) then begin
        if (artcode!=RestAccrw.ArtCode) then begin
          testf = false;
        end;
      end;
      if (testf) then begin
        RestAccrw.Quant = RestAccrw.Quant + 1;
        MatRowPut(RestAccr,rownr,RestAccrw);
        RestAccDchrsum(RestAccr,rownr,0);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(wn,RestAccr);  
        DisplayRestAccItem(RestAccr,rownr);
        WindowFieldGoto(wn,RestAccr,rownr,"Quant",true);
        goto LRestAccPasteItem;
      end;
    end;
  end;
  if (nonblank(artcode)) then begin
    GetWindowRecord(wn,RestAccr);  
    rwcnt = MatRowCnt(RestAccr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestAccr,i,RestAccrw);
      if (blank(RestAccrw.ArtCode)) then begin
        rownr = i;
        goto L55RestAccPasteItem;
      end;
    end;
    rownr = rwcnt;
L55RestAccPasteItem:;  
    printgroupcode = GetWindowString(wn,"touchscreenwindowprintgroupcode");
    BlockLoad(LMb);
    ClearRow(RestAccr,RestAccrw,1);
    RestAccrw.ArtCode = artcode;
    MatRowPut(RestAccr,rownr,RestAccrw);
    if (RestAccVc_PasteArtCode(RestAccr,rownr,LMb,printgroupcode,0,1.00,inwarning)) then begin
      DisplayRestAccItem(RestAccr,rownr);
      RestAccDchrsum(RestAccr,rownr,0);
      RestAccSumup(RestAccr,"");
      PutWindowRecord(wn,RestAccr);  
      DisplayRestAccItem(RestAccr,rownr);
      WindowFieldGoto(wn,RestAccr,rownr,"Quant",true);
    end;
    if (nonblank(inwarning)) then begin
      MessageBox(0,inwarning);
    end;
  end;
LRestAccPasteItem:;
  RETURN;
END;
      
global
procedure RestAccDClassPasteItemButton(Integer butnr)
BEGIN
  Integer i,rwcnt,wn;
  record ItemButtonsBlock ItemButtonsRec;
  record RcVc RepSpec;
  row ItemButtonsBlock ItemButtonsrw;
  record RestAccVc RestAccr; 
  record SoftFVc RestAccPLr; 

  wn = CurWindow;
  switch (GetWindowFileName(wn)) begin
    case "RestAccVc":
      if (WindowState(wn)!=2) then begin//Rs_update
        GetWindowRecord(wn,RestAccr);
      end else begin
        GetPrevWindowRecord(wn,RestAccr);
      end;
      if (RestAccr.Closed!=0) then begin
        goto LRestAccDClassPasteItemButton;
      end;
      BlockLoad(ItemButtonsRec);
      rwcnt = MatRowCnt(ItemButtonsRec);
      for (i=0;i<rwcnt;i=i+1) begin
        if (i==(butnr-1)) then begin
          MatRowGet(ItemButtonsRec,i,ItemButtonsrw);
          switch (ItemButtonsrw.ButtonType) begin
            case 0:
              RestAccPasteItem(ItemButtonsrw.ArtCode);
            case 1:
              RepSpec.f1 = ItemButtonsrw.ArtCode;
              i = OpenWindow("SelectModifiers2WClass",1,wn,"","",RepSpec);
              PutWindowRecord(i,RepSpec);
            case 2:
          end;
          goto LRestAccDClassPasteItemButton;
        end;
      end;
    case "SoftFVc":
      GetWindowRecord(wn,RestAccPLr);
      BlockLoad(ItemButtonsRec);
      rwcnt = MatRowCnt(ItemButtonsRec);
      for (i=0;i<rwcnt;i=i+1) begin
        if (i==(butnr-1)) then begin
          MatRowGet(ItemButtonsRec,i,ItemButtonsrw);
          switch (ItemButtonsrw.ButtonType) begin
            case 0:
              RestAccPriceLookupPasteItem(ItemButtonsrw.ArtCode);
            case 1:
              RepSpec.f1 = ItemButtonsrw.ArtCode;
              i = OpenWindow("SelectModifiers2WClass",1,wn,"","",RepSpec);
              PutWindowRecord(i,RepSpec);
            case 2:
          end;
          goto LRestAccDClassPasteItemButton;
        end;
      end;
  end;
LRestAccDClassPasteItemButton:;  
  RETURN;
END;

global
procedure RestAccPaymentCash()
BEGIN
  Integer wn;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,-1,"CashValue",true);
  RETURN;
END;


global 
procedure CashRestAccsm()
begin
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  Integer wn,rownr,rowstp;
  val fr,to1,to2,br1,br2;
  string 255 tstr,pmcode;
  record DefCashBlock DefCashRec;  

  wn = CurWindow;
  switch (WindowActiveField(wn)) begin
    otherwise KeyPadEnter(wn);    
  end;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LCashRestAccsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LCashRestAccsm; end;
  end;
  pmcode = GetWindowString(wn,"RestAccPMCodeCash");
  rowstp = StringToInt(GetWindowString(wn,"RestAccrowstpCash"));  
  RestPMOtherPayRemote_RestAcc(RestAccr,pmcode,rowstp);
  PutWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,MatRowCnt(RestAccr)-1,"Sum",true);
//  DisplayIVSubTotalAction(RestAccr);
LCashRestAccsm:;  
  return;
end;

global 
procedure GVRRestAccsm()
begin
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  row RestAccVc RestAccrw;
  Integer wn,rownr,rowstp;
  val fr,to1,to2,br1,br2;
  string 255 tstr,pmcode;
  record DefCashBlock DefCashRec;

  wn = CurWindow;
  switch (WindowActiveField(wn)) begin
    otherwise KeyPadEnter(wn);    
  end;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LGVRRestAccsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LGVRRestAccsm; end;
  end;
  pmcode = GetWindowString(wn,"RestAccPMCodeGVR");
  rowstp = StringToInt(GetWindowString(wn,"RestAccrowstpGVR"));  
  RestPMOtherPayRemote_RestAcc(RestAccr,pmcode,rowstp);
  PutWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,rownr,"GCNr",true);
LGVRRestAccsm:;  
  return;
end;

global 
procedure ChequeRestAccsm()
begin
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  Integer wn,rownr,rowstp;
  val fr,to1,to2,br1,br2;
  string 255 tstr,pmcode;
  record DefCashBlock DefCashRec;

  wn = CurWindow;
  switch (WindowActiveField(wn)) begin
    otherwise KeyPadEnter(wn);    
  end;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LChequeRestAccsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LChequeRestAccsm; end;
  end;
  pmcode = GetWindowString(wn,"RestAccPMCodeCHQ");
  rowstp = StringToInt(GetWindowString(wn,"RestAccrowstpCHQ"));  
  RestPMOtherPayRemote_RestAcc(RestAccr,pmcode,rowstp);
  PutWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,MatRowCnt(RestAccr)-1,"Sum",true);
//  DisplayIVSubTotalAction(RestAccr);
LChequeRestAccsm:;  
  return;
end;

global 
procedure CredCardRestAccsm()
begin
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  Integer wn,rownr,nwn,rowstp;
  val fr,to1,to2,br1,br2;
  val t,t1;  
  string 255 tstr,pmcode;
  record DefCashBlock DefCashRec;
  record RahaxiBlock Rahaxib; 

  wn = CurWindow;
  switch (WindowActiveField(wn)) begin
    otherwise KeyPadEnter(wn);    
  end;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  switch (WindowState(wn)) begin
    case 0: //Rs_normal
      GetWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LCredCardRestAccsm; end;
    case 1: //Rs_insert
    case 2: 
      GetPrevWindowRecord(wn,prevRestAccr); //Rs_update
      if (prevRestAccr.Closed!=0) then begin goto LCredCardRestAccsm; end;
  end;
  BlockLoad(Rahaxib);
  if (Rahaxib.TerminalType==kLocalCCTerminalNone) begin
    switch (WindowActiveField(wn)) begin
      otherwise
        pmcode = GetWindowString(wn,"RestAccPMCodeCC");
        rowstp = StringToInt(GetWindowString(wn,"RestAccrowstpCC"));  
        RestPMOtherPayRemote_RestAcc(RestAccr,pmcode,rowstp);
        PutWindowRecord(wn,RestAccr);
        WindowFieldGoto(wn,RestAccr,rownr,"Sum",true);
//        DisplayIVSubTotalAction(RestAccr);
    end;
  end else begin
//    SubCashRows_IVVc(IVr,t,t1);
//    switch (Rahaxib.TerminalType) begin
//      case kLocalCCTerminalRahaxi: OpenCCPayRahaxiDClass(wn,rownr,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
//      case kLocalCCTerminalSteriaCOM: OpenCCPaySteriaDClass(wn,rownr,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
//      case kLocalCCTerminalSteriaIP: OpenCCPaySteriaDClass(wn,rownr,IVr.SerNr,IVr.RetnValue,t,IVr.CurncyCode);
//    end;
  end;
LCredCardRestAccsm:;  
  return;
end;

updating Function Boolean CheckIfAllowed(Integer wn,record RestAccVc RestAccr)
begin
  record RestAccVc oldRestAccr;
  Boolean updf;

  updf = false;
  switch (WindowState(wn)) begin
    case 0:
      if (RestAccCheckIfSaveAllowed(RestAccr,oldRestAccr,1,1)==0) then begin
        updf = true;
      end;
    case 1:
      if (RestAccCheckIfSaveAllowed(RestAccr,oldRestAccr,1,1)==0) then begin
        updf = true;
      end;
    case 2:
      GetPrevWindowRecord(wn,oldRestAccr);
      if (RestAccCheckIfSaveAllowed(RestAccr,oldRestAccr,2,1)==0) then begin
        updf = true;
      end;
  end;
  CheckIfAllowed = updf;
  return;
end;

global
updating procedure RestAccPaymentChange()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;
  Boolean updf;

  updf = false;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  if (WindowState(wn)==0) then begin
    PutWindowRecord(wn,RestAccr);
  end;
  RestAccSumup(RestAccr,"");
  RestAccr.Closed = 1;
  updf = CheckIfAllowed(wn,RestAccr);
  if (updf) then begin
    PutWindowRecord(wn,RestAccr);
    if (WindowDoOK(wn,0)) then begin
      UpdateBrowses("RestAccVc");
      OpenCashDrawer_RestAccVc(RestAccr);
    end;
  end else begin
    if (UserCanAction("OpenCashDrawer",IsStandardProduct==true)) then begin
      OpenCashDrawer_RestAccVc(RestAccr);
      CreateCashDrawerAct(CurrentUser);
    end;
  end;
  WindowFieldGoto(wn,RestAccr,-1,"RetValue",true);
  RETURN;
END;

global
updating function Boolean RestAccAccept2(Integer wn,var record RestAccVc RestAccr)
begin
  Integer nwn;
  Boolean updf;
  Boolean res;
  record RestAccVc RestAcc2r;
  record RestAccVc RestAcc3r;

  res = false;
  updf = false;
  if (RestAccr.Closed!=0) then begin goto LRestAccAccept2; end;
  if (WindowState(wn)==0) then begin
    PutWindowRecord(wn,RestAccr);
  end;
  RestAccSumup(RestAccr,"");
  RestAccr.Closed = 1;
  updf = CheckIfAllowed(wn,RestAccr);
  if (updf) then begin    
    PutWindowRecord(wn,RestAccr);
    if (WindowDoOK(wn,0)) then begin
      GetWindowRecord(wn,RestAccr);
      UpdateBrowses("RestAccVc");
      OpenCashDrawer_RestAccVc(RestAccr);
      CloseWindow(wn);
      RecordNew(RestAcc2r);
      nwn = OpenWindow("RestAccDClass",1,0,"","",RestAcc2r);
      RestAccVcRecordDefaultsClient(nwn,RestAcc2r,RestAcc3r,0,0);
      WindowFieldGoto(nwn,RestAcc2r,-1,"CustCode",true);
      res = true;
    end;
  end;
LRestAccAccept2:;
  RestAccAccept2 = res;
  return;
end;

global
updating procedure RestAccAccept()
BEGIN
  Boolean res;
  Integer wn;
  record RestAccVc CashR;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CashR);
  res = RestAccAccept2(wn,CashR);
  RETURN;
END;

global
updating procedure RestAccReceipt()
BEGIN
  Boolean res;
  Integer wn;
  record RestAccVc CashR;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CashR);
  if (WindowState(wn)==0)  then begin
    if (CashR.Closed!=0) then begin
      RestAccReceiptPrint(CashR,true,false);
    end else begin    
      RestAccReceiptPrint(CashR,false,false);
    end;
  end;
  RETURN;
END;

global
updating procedure RestAccAcceptAndPrint()
begin
  Integer wn;
  record RestAccVc CashR;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CashR);
  if (CashR.Closed!=0) then begin
    RestAccReceiptPrint(CashR,true,false);
  end else begin    
    if (RestAccAccept2(wn,CashR)) then begin
      RestAccReceiptPrint(CashR,true,true);
    end;
  end;
  if (UserCanAction("AllowUsingSplitonBarTab",IsStandardProduct==true)) then begin
    LogoutUser(CurWindow,true);
  end;
  return;
end;

global
procedure RestAccKitchenOrder(LongInt sernr,var array Integer kitcharr,Integer kitchi)
begin
  record RcVc RepSpec;
  
  ReportDefaults(RepSpec,"KitchenRClass");
  RepSpec.long1 = sernr;
  RepSpec.repname = "KitchenRn";
  RepSpec.Media = mtPrinter;
  RunReport(RepSpec,0);
  if (UserCanAction("AllowUsingSplitonBarTab",IsStandardProduct==true)) then begin
    LogoutUser(CurWindow,true);
  end;
  return;
end;

global
updating procedure RestAccReceiptNotOK()
begin
  Integer wn;
  record RestAccVc CashR;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CashR);
  if (WindowState(wn)==1)  then begin
    CashR.Closed = 0;
    PutWindowRecord(wn,CashR);
    if (WindowDoOK(wn,0)) then begin
      UpdateBrowses("RestAccVc");
    end;
  end;
  RestAccReceiptPrint(CashR,false,false);
  if (UserCanAction("AllowUsingSplitonBarTab",IsStandardProduct==true)) then begin
    LogoutUser(CurWindow,true);
  end;
  return;
end;

global
procedure RestAccPaymentCard1()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,-1,"PayDeal2",true);
  RestAccr.Paid = RestAccr.RemValue;
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);
  nwn = OpenPasteWindow(wn,"RestPMSClass","");
  RETURN;
END;

global
procedure RestAccPaymentCard2()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,-1,"PayDeal3",true);
  RestAccr.Paid2 = RestAccr.RemValue;
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);
  nwn = OpenPasteWindow(wn,"RestPMSClass","");
  RETURN;
END;

global
procedure RestAccPaymentCard3()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,-1,"PayDeal4",true);
  RestAccr.Paid3 = RestAccr.RemValue;
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);
  nwn = OpenPasteWindow(wn,"RestPMSClass","");
  RETURN;
END;

global
procedure RestAccPaymentRoom()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,-1,"PayDeal",true);
  nwn = OpenPasteWindow(wn,"RestPMSClass","");
  RETURN;
END;

global 
procedure RestAccToolBill20()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowDeactivateField(wn);
  switch (WindowActiveField(wn)) begin
    case "CashValue": RestAccr.CashValue = RestAccr.CashValue + 20;   
    case "Paid": RestAccr.Paid = RestAccr.Paid + 20;   
    case "Paid2": RestAccr.Paid2 = RestAccr.Paid2 + 20;   
    case "Paid3": RestAccr.Paid3 = RestAccr.Paid3 + 20;   
  end;
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;

global 
procedure RestAccToolBill10()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowDeactivateField(wn);
  switch (WindowActiveField(wn)) begin
    case "CashValue": RestAccr.CashValue = RestAccr.CashValue + 10;   
    case "Paid": RestAccr.Paid = RestAccr.Paid + 10;   
    case "Paid2": RestAccr.Paid2 = RestAccr.Paid2 + 10;   
    case "Paid3": RestAccr.Paid3 = RestAccr.Paid3 + 10;   
  end;
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;

global 
procedure RestAccToolBill5()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowDeactivateField(wn);
  switch (WindowActiveField(wn)) begin
    case "CashValue": RestAccr.CashValue = RestAccr.CashValue + 5;   
    case "Paid": RestAccr.Paid = RestAccr.Paid + 5;   
    case "Paid2": RestAccr.Paid2 = RestAccr.Paid2 + 5;   
    case "Paid3": RestAccr.Paid3 = RestAccr.Paid3 + 5;   
  end;
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;

global
procedure RestAccRoom()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  WindowFieldGoto(wn,RestAccr,-1,"Resource",true);
  nwn = OpenPasteWindow(wn,"ResSClass","");
  RETURN;
END;

global
procedure RestAccGuest()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  string 255 psname;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
//  if (blank(RestAccr.Resource)) then begin // Not sure why it should be possible to paste guest only, but there is code for it....
//    MessageBox(2153,"");
//  end else begin
    WindowDeactivatefield(wn);
    WindowFieldGoto(wn,RestAccr,-1,"GuestCode",true);
    if (blank(RestAccr.Resource)) then begin
      nwn = OpenPasteWindow(wn,"CUGuestSClass","");
    end else begin
      nwn = OpenPasteWindow(wn,"GuestSClass","");
    end;
//  end;
  RETURN;
END;

global
procedure RestAccCustomer()
BEGIN
  Integer wn,nwn;
  record RestAccVc RestAccr;
  string 255 psname;
  
  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
//  if (blank(RestAccr.Resource)) then begin // Not sure why it should be possible to paste guest only, but there is code for it....
//    MessageBox(2153,"");
//  end else begin
    WindowFieldGoto(wn,RestAccr,-1,"CUCode",true);
    if (blank(RestAccr.Resource)) then begin
      psname = "CUSClass";
    end else begin
      psname = "JobCustSClass";
    end;      
    nwn = OpenPasteWindow(wn,psname,"");
//  end;      
  RETURN;
END;

global 
procedure RestAccTip()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  WindowDeactivateField(wn);
  if (RestAccr.CashValue!=0) then begin
    if (RestAccr.CashValue<=RestAccr.Sum4) then begin
      RestAccr.TipValue = blankval;
    end else begin
      RestAccr.TipValue = RestAccr.CashValue - RestAccr.Sum4;
    end;
  end else begin
    RestAccr.TipValue = RestAccr.RetValue;
  end;
  RestAccSumup(RestAccr,"");
  PutWindowRecord(wn,RestAccr);
  RETURN;
END;


global 
updating procedure RestAccMergeTabs()
BEGIN
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RestAccVc oldbrowseRestAccr;
  record RestAccVc browseRestAccr;
  row RestAccVc browseRestAccrw;
  Integer wn,mwn;
  Integer i,rwcnt;
  Integer bi,brwcnt;

  wn = CurWindow;
  if (ReadMarkedRecord(CurWindow,browseRestAccr)) then begin
    if (browseRestAccr.Closed!=0) then begin goto LRestAccMergeTabs; end;
    if (browseRestAccr.Invalid!=0) then begin goto LRestAccMergeTabs; end;
    mwn = MotherWindow(wn);
    if (mwn!=0) then begin
      GetWindowRecord(mwn,RestAccr);
      rwcnt = MatRowCnt(RestAccr);
      brwcnt = MatRowCnt(browseRestAccr);
      for (bi=0;bi<brwcnt;bi=bi+1) begin
        MatRowGet(browseRestAccr,bi,browseRestAccrw);
        ClearRow(RestAccr,RestAccrw,1);
        CopyRow(RestAccr,browseRestAccrw,RestAccrw);
        MatRowPut(RestAccr,rwcnt,RestAccrw);
        rwcnt = rwcnt + 1;
      end;
      PutWindowRecord(mwn,RestAccr);
      RecordCopy(oldbrowseRestAccr,browseRestAccr);
      browseRestAccr.Closed = 1;
      browseRestAccr.CashValue = browseRestAccr.Sum4;
//      if (RestAccCheckIfSaveAllowed(browseRestAccr,oldbrowseRestAccr,1,1)==0) then begin
        browseRestAccr.Invalid = 1;
        RestAccSumup(browseRestAccr,"");
        browseRestAccr.Comment = "Import";
        if (RecordUpdate(oldbrowseRestAccr,browseRestAccr,true)==0) then begin          
        end;
//      end;      
    end;
  end;  
LRestAccMergeTabs:;  
  RETURN;
END;

global
updating procedure RestAccToolSplit()
BEGIN
  record RestAccVc newRestAccr;
  record RestAccVc dummyRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RestAccVc oldRestAccr;
  Integer wn,nwn;
  Integer i,rwcnt,nrcnt;
  val splitqty;
  record LocalMachineBlock LMb;
 
  if (UserCanAction("AllowUsingSplitonBarTab",true)==false) then begin
    goto LRestAccToolSplit;
  end;
  wn = CurWindow;
  DeselectWindow(wn,true);
  if (WindowDoOK(wn,0)) then begin
    GetWindowRecord(wn,RestAccr);
    RecordCopy(newRestAccr,RestAccr);
    RecordCopy(oldRestAccr,RestAccr);
    rwcnt = MatRowCnt(newRestAccr);
    while (rwcnt>0) begin
      MatRowDelete(newRestAccr,0);
      rwcnt = rwcnt - 1;
    end;
    rwcnt = MatRowCnt(RestAccr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestAccr,i,RestAccrw);
      splitqty = RestAccrw.SplitQty;
      if (splitqty!=0) then begin
        if (splitqty>RestAccrw.Quant) then begin
          Beep;
          goto LRestAccToolSplit;
        end;
        RestAccrw.Quant = RestAccrw.Quant - splitqty;
        RestAccrw.SplitQty = blankval;
        if (RestAccrw.Quant!=0) then begin
          MatRowPut(RestAccr,i,RestAccrw);
        end else begin
          MatRowDelete(RestAccr,i);
          i = i - 1;
          rwcnt = rwcnt - 1;
        end;
        RestAccrw.Quant = splitqty;
        MatRowPut(newRestAccr,nrcnt,RestAccrw);
        nrcnt = nrcnt + 1;
      end;
    end;
    RestAccSumup(RestAccr,"");  
    RestAccSumup(newRestAccr,"");
    PutWindowRecord(wn,RestAccr);
    if (WindowDoOK(wn,0)) then begin
      newRestAccr.SerNr = NextSerNr("RestAccVc",newRestAccr.TransDate,-1,false,"");            
      if (newRestAccr.SerNr!=-1) then begin
        if (RecordStore(newRestAccr,false)) then begin
        end;
        nwn = OpenWindow("RestAccDClass",1,0,"","",newRestAccr);  
        RestAccVcRecordDefaultsClient(nwn,newRestAccr,dummyRestAccr,0,0);
      end;
    end;
    BlockLoad(LMb);
    if (LMb.OneBarTabWindow!=0) then begin
      CloseWindow(wn);
    end;
  end;
LRestAccToolSplit:;  
  RETURN;
END;

global
procedure RestAccTile1()
begin
  ActivateTile(CurWindow,1);
  return;
end;

global
procedure RestAccTile2()
begin
  ActivateTile(CurWindow,2);
  return;
end;

global
procedure RestAccTile3()
begin
  ActivateTile(CurWindow,3);
  return;
end;

global
procedure RestAccTile4()
begin
  ActivateTile(CurWindow,4);
  return;
end;

global
procedure RestAccTile5()
begin
  ActivateTile(CurWindow,5);
  return;
end;

global
procedure RestAccTile6()
begin
  ActivateTile(CurWindow,6);
  return;
end;

global
procedure RestAccTile7()
begin
  ActivateTile(CurWindow,7);
  return;
end;

global
procedure RestAccTile8()
begin
  ActivateTile(CurWindow,8);
  return;
end;

global
procedure RestAccTile9()
begin
  if (UserCanAction("AllowUsingPaymentonBarTab",true)) then begin
    ActivateTile(CurWindow,9);
  end;
  return;
end;

global
procedure RestAccTile10()
begin
  record RestAccVc RestAccr;
  
  if (UserCanAction("AllowUsingRoomonBarTab",true)) then begin
    ActivateTile(CurWindow,10);
    WindowFieldGoto(CurWindow,RestAccr,-1,"Resource",true);
  end;
  return;
end;

global
procedure RestAccTile11()
begin
  ActivateTile(CurWindow,11);
  return;
end;

global
procedure RestAccTile12()
begin
  ActivateTile(CurWindow,12);
  return;
end;

global
procedure RestAccTile13()
begin
  ActivateTile(CurWindow,13);
  return;
end;

global
procedure RestAccTile14()
begin
  ActivateTile(CurWindow,14);
  return;
end;

global
procedure RestAccTile15()
begin
  ActivateTile(CurWindow,15);
  return;
end;
global
procedure RestAccTile16()
begin
  ActivateTile(CurWindow,16);
  return;
end;
global
procedure RestAccTile17()
begin
  ActivateTile(CurWindow,17);
  return;
end;
global
procedure RestAccTile18()
begin
  ActivateTile(CurWindow,18);
  return;
end;

global
procedure RestAccTile19()
begin
  ActivateTile(CurWindow,19);
  return;
end;

global
procedure RestAccTile20()
begin
  ActivateTile(CurWindow,20);
  return;
end;

global
procedure RestAccTile21()
begin
  ActivateTile(CurWindow,21);
  return;
end;

global
procedure RestAccTile22()
begin
  ActivateTile(CurWindow,22);
  return;
end;

global 
procedure RestAccServiceCharge()
BEGIN
  record RestAccVc RestAccr;
  Integer wn;
  record LocalMachineBlock LMb;

  wn = CurWindow;
  WindowDeactivateField(wn);
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  if (RestAccr.Closed==0) then begin
    BlockLoad(LMb);
    RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,false);
    RestAccSumup(RestAccr,"");
    PutWindowRecord(wn,RestAccr);
    RestAccDClass_RefreshStringList(wn,RestAccr);
  end;
  return;
end;

procedure DeleteSelectedRestAccRow(Integer wn,record RestAccVc RestAccr)
begin
  integer sline;
  string 255 tag;

  sline = SelectedListLine(wn);
  tag = GetListTag(wn,sline);
  if (tag==USetStr(24196)) begin
    RestAccr.ServCharge = blankval;
  end;
  return;
end;      

global
function Integer GetSelectedPOSItemRowIndex(Integer wnPos)
begin
  integer sline,matrowix,res;
  string 255 tstr;
  Integer i;
  Boolean digitsf;

  sline = SelectedListLine(wnPos);
  tstr = GetListTag(wnPos,sline);

  digitsf = true;
  for (i=1;i<=len(tstr);i=i+1) begin
    if (IsDigit(Left(tstr,i))==false) then begin
      digitsf = false;
    end;
  end;
  if (digitsf) and (nonblank(tstr)) then begin
    res = StringToInt(tstr);
  end else begin
    res = -1;
  end;
  GetSelectedPOSItemRowIndex = res;
  return;
end;

global
updating procedure RestAccDClassTouchScreenPasteButtonDo(integer butnr)
begin
  Integer i,rwcnt,wn,matrowix;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;
  record RestAccVc prevRestAccr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Boolean found;
  record RahaxiBlock Rahaxib;
  integer nwn;
  string 255 tag;
  record RcVc RepSpec;
  Integer line,rownr;
  string 255 tstr,t2;
  record INVc INr;
  string 255 pgcode,prstack,ostr;
  Integer pos,sline;
  transaction record RcVc gNPTSRepSpec;
    
  wn = CurWindow;
  DeselectWIndow(wn,true);
  GetWindowRecord(wn,RestAccr);

  found = POSButtonsForWindow(wn,POSBr);
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i=0;i<rwcnt;i=i+1) begin
      if (i==(butnr-1)) then begin
        MatRowGet(POSBr,i,POSBrw);
        switch (POSBrw.ButtonType) begin
          case kPOSButtonTypeGotoPage:
            RestAccDClassGotoPage(POSBrw.Code,POSBrw.PrintGroupCode);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypOpenInvoices:
            RestAccCurUserTabs;
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeAllInvoices:
            RestAccDClassTouchScreenAllInvoices;
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeTransfertoSL:
            RestAccDClassTouchScreenTransfertoSL;
          case kPOSButtonTypeTransfertoInvoice:
            RestAccDClassTouchScreenTransfertoInvoice;
/*            
          case kPOSButtonTypeReprintReceipt:
            IVCashDClassTouchScreenReprint;
            goto LIVCashDClassTouchScreenPasteButtonDo;
*/            
        end;
      end;
    end;
  end;

  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,prevRestAccr);
      if (prevRestAccr.Closed!=0) then begin
        goto LRestAccDClassTouchScreenPasteButtonDo;
      end;
      if (prevRestAccr.Invalid!=0) then begin 
        goto LRestAccDClassTouchScreenPasteButtonDo; 
      end;
    otherwise
      if (RestAccr.Closed!=0) then begin
        goto LRestAccDClassTouchScreenPasteButtonDo;
      end;
      if (RestAccr.Invalid!=0) then begin 
        goto LRestAccDClassTouchScreenPasteButtonDo; 
      end;
  end;
    
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i=0;i<rwcnt;i=i+1) begin
      if (i==(butnr-1)) then begin
        MatRowGet(POSBr,i,POSBrw);
        switch (POSBrw.ButtonType) begin
          case kPOSButtonTypeItem:
            DeselectWindow(wn,false);
//            if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin 
            if (false) then begin  //RestAccAddItemRowDClass window definition does not exisit  
              INr.Code = POSBrw.Code;
              ReadFirstMain(INr,1,true);
              nwn = OpenWindow("RestAccAddItemRowDClass",0,wn,"","",INr);
              if (nwn>0) then begin
                PutWindowString(nwn,"touchscreenitem",POSBrw.Code);
                PutWindowString(nwn,"touchscreenitemqty",1.00);
              end;
            end else begin
              PutWindowString(wn,"touchscreenitem",POSBrw.Code);
              PutWindowString(wn,"touchscreenitemqty",1.00);
              
              prstack = GetWindowString(wn,"touchscreenwindowprinterstack");
              pos = 0;
              ExtractObj(prstack,pos,ostr);
              while (nonblank(ostr)) begin
                if (ostr<>"*") then begin
                  pgcode = ostr;
                end;
                ExtractObj(prstack,pos,ostr);
              end;                            
              if (POSBrw.PrintGroupCode<>"") then begin
                pgcode = POSBrw.PrintGroupCode;
              end;
              
              PutWindowString(wn,"touchscreenwindowprintgroupcode",pgcode);              
              DeselectWindow(wn,false);
              RestAccDClasstouchscreenitemEFAfter(wn,true);
            end;
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeInstructions:
            sline = SelectedListLine(wn);
            if (line<0) then begin 
              goto LRestAccDClassTouchScreenPasteButtonDo;
            end;       
            ClearRow(RestAccr,RestAccrw,1);
            RestAccrw.Spec = POSBrw.Code;
            if (blank(RestAccrw.Spec)) then begin
              RestAccrw.Spec = POSBrw.Label;
            end;
            RestAccrw.PrintGroupCode = GetWindowString(wn,"touchscreenwindowprintgroupcode");            
            MatRowInsert(RestAccr,sline+1,RestAccrw);
            PutWindowRecord(wn,RestAccr);
            DeselectWindow(wn,false);
            if (WindowDoOK(wn,0)) then begin   
              UpdateAffectedRowsToKitchenOrderFromRestAcc(RestAccr.SerNr,line,RepSpec.f1);
            end;              
            RestAccDClass_RefreshStringList(wn,RestAccr);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeModifier:
            OpenSelectModifiers2WClass(wn,POSBrw.Code);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypePayment:
            BlockLoad(Rahaxib);
            switch (Rahaxib.TerminalType) begin
              case kLocalCCTerminalNone:
                OpenNPTSPaymentTClass(wn,RestAccr.SerNr,RestAccr.RetValue,RestAccr.Sum4,"");
            end;
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeCashPayment:
            OpenNPTSCashPaymentTClass(wn,RestAccr.SerNr,RestAccr.RetValue,RestAccr.Sum4,"",POSBrw.Code,POSBrw.Label);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeGiftVoucherPayment:
            OpenGiftVoucherTouchScreenDClass(wn,-1,RestAccr.SerNr,RestAccr.RetValue,RestAccr.Sum4-RestAccr.TendValue,"",POSBrw.Code,POSBrw.Label);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeChequePayment:
            OpenChequePayTouchScreenDClass(wn,-1,RestAccr.SerNr,RestAccr.RetValue,RestAccr.Sum4-RestAccr.TendValue,"",POSBrw.Code,POSBrw.Label);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeCreditCardPayment:
            BlockLoad(Rahaxib);
            switch (Rahaxib.TerminalType) begin
              case kLocalCCTerminalNone:
                OpenCCPayTouchScreenDClass(wn,-1,RestAccr.SerNr,RestAccr.Sum4,RestAccr.RetValue,RestAccr.Sum4-RestAccr.TendValue,"",POSBrw.Code,POSBrw.Label);
              otherwise
//                CredCardPOSPRestAccsm;
            end;
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeDebitCardPayment:
            BlockLoad(Rahaxib);
            switch (Rahaxib.TerminalType) begin
              case kLocalCCTerminalNone:
                OpenDCPayTouchScreenDClass(wn,-1,RestAccr.SerNr,RestAccr.Sum4,RestAccr.RetValue,RestAccr.Sum4-RestAccr.TendValue,"",POSBrw.Code,POSBrw.Label);
            end;
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeSetTable:
            OpenTableLayoutCLass(wn,POSBrw.Code,RestAccr.SerNr,1);
            goto LRestAccDClassTouchScreenPasteButtonDo;          
          case kPOSButtonTypeOpenRecord:
            OpenOpenRecordTouchScreenOClass(wn,RestAccr.SerNr,RestAccr.Persons);
            goto LRestAccDClassTouchScreenPasteButtonDo;          
          case kPOSButtonTypeSetCovers:
            OpenSetCoversTouchScreenTClass(wn,RestAccr.SerNr,RestAccr.Persons);
            goto LRestAccDClassTouchScreenPasteButtonDo;          
          case kPOSButtonTypeSetBarTabClass:
            OpenSetBarTabClassTouchScreenTClass(wn,RestAccr.SerNr);
            goto LRestAccDClassTouchScreenPasteButtonDo;          
          case kPOSButtonTypeMergeBarTabs:
            OpenMergeBarTabTouchScreenTClass(wn,RestAccr.SerNr);
            goto LRestAccDClassTouchScreenPasteButtonDo;      
          case kPOSButtonTypeMoveToBarTab:
            OpenMoveItemToBarTabTouchScreenOClass(wn,RestAccr.SerNr);
            goto LRestAccDClassTouchScreenPasteButtonDo;      
          case kPOSButtonTypSaveInvoice:
            RestAccDClassTouchScreenSaveBarTab;                                       
          case kPOSButtonTypeSplitBarTabs:
            OpenSplitBarTabTouchScreenTClass(wn,RestAccr);
            goto LRestAccDClassTouchScreenPasteButtonDo;          
          case kPOSButtonTypeOnHotelGuestAccount:
            OpenOnHotelGuestTouchScreenOClass(wn,RestAccr.SerNr,RestAccr.Sum4,RestAccr.Resource,POSBrw.Code,POSBrw.Label);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeVolumetricBarCodeScan:
            ReportDefaults(RepSpec,"VolBarCodeScanVClass");
            RepSpec.UsedOnly = wn;
            nwn = OpenWindow("VolBarcodeScanVClass",0,wn,"","",RepSpec);
            WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeSalesAssistant:
            ReportDefaults(RepSpec,"SalesAssistantVClass");
            RepSpec.UsedOnly = wn;
            nwn = OpenWindow("SalesAssistantVClass",0,wn,"","",RepSpec);
            WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypePriceLookup:
            ReportDefaults(RepSpec,"PriceLookupVClass");
            RepSpec.UsedOnly = wn;
            nwn = OpenWindow("PriceLookupVClass",0,wn,"","",RepSpec);
            WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeLoyaltyCard:
            RestAccDClassTouchScreenLoyaltyCard;
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeCustomerSearch:
            ReportDefaults(RepSpec,"SearchCURClass");
            RepSpec.UsedOnly = wn;
            RepSpec.repname = "SearchCuRn";
            RepSpec.Media = mtScreen;
            RepSpec.flags[0] = 4;
            RepSpec.f12 = GetWindowFileName(wn);
            RecordCopy(gNPTSRepSpec,RepSpec);
            nwn = OpenWindow("NPTSSearchCURClass",0,wn,"","",gNPTSRepSpec);
            gNPTSRepSpec.UsedOnly = wn;
            gNPTSRepSpec.flags[0] = 4;
            PutWindowRecord(nwn,gNPTSRepSpec);
            WindowFieldGoto(nwn,gNPTSRepSpec,-1,"f1",true);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeSelectSalesman:
            // nwn = OpenWindow("UserNPTSSClass",0,wn,"","",RepSpec);
            WindowFieldGoto(wn,RestAccr,-1,"Cashier",true);
            nwn = OpenWindow("EnterWaiterNPTSOClass",1,wn,"","",RepSpec);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeSupervisorSearch:
            WindowFieldGoto(wn,RestAccr,-1,"Supervisor",true);
            nwn = OpenPasteWindow(wn,"SupervisorSClass","");
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeItemSearch:
            ReportDefaults(RepSpec,"SearchItemRClass");
            RepSpec.UsedOnly = wn;
            RepSpec.f3 = "RestAccDClass";
            RepSpec.repname = "SearchItemRn";
            RepSpec.Media = mtScreen;
            nwn = OpenWindow("NPTSSearchItemRClass",0,wn,"","",RepSpec);
            WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
            goto LRestAccDClassTouchScreenPasteButtonDo;
/*        
          case kPOSButtonTypeItemStatus:
            if (SelectedListLine(wn)<>-1) then begin
              matrowix = GetSelectedPOSItemRowIndex(wn);
              MatRowGet(RestAccr,matrowix,RestAccrw);
              RepSpec.UsedOnly = wn;
              RepSpec.f1 = RestAccrw.ArtCode;
              RepSpec.repname = "INInfoRn";
              RepSpec.Media = mtScreen;
              RunReport(RepSpec,0);
            end;
            goto LRestAccDClassTouchScreenPasteButtonDo;
*/            
          case kPOSButtonTypeBookings:
            RestBookingRnRestAccDsm;
            goto LRestAccDClassTouchScreenPasteButtonDo;
/*            
          case kPOSButtonTypeOpenCashDrawer:
            OpenCashDrawer_IVCashVc(IVCashr);
            goto LIVCashDClassTouchScreenPasteButtonDo;
*/            
          case kPOSButtonTypeRunReportOnServer:
            RunReportOnServer(POSBrw.Code);
            goto LRestAccDClassTouchScreenPasteButtonDo;
          case kPOSButtonTypeSelectSalesman:
            WindowFieldGoto(wn,RestAccr,-1,"Cashier",true);
            nwn = OpenWindow("EnterSalesmanNPTSOClass",1,wn,"","",RepSpec);
            goto LRestAccDClassTouchScreenPasteButtonDo;            
          case kPOSButtonTypeInsertFreeTextOnMatrix:
            if (SelectedListLine(wn)>=0) then begin 
              nwn = OpenWindow("EnterFreeTextNPTSOClass",1,wn,"","",RepSpec);
            end;
            goto LRestAccDClassTouchScreenPasteButtonDo;
        end;
      end;
    end;
  end;
LRestAccDClassTouchScreenPasteButtonDo:;
  return;
end;

global
updating procedure RestAccDClassTouchScreenPasteButton()
begin
  Integer butnr;
  string 255 tagstr;
  
  tagstr = PushButtonTag;
  butnr = StringToInt(tagstr);
  RestAccDClassTouchScreenPasteButtonDo(butnr);
  return;
end;

updating procedure UpdateKitchenOrderFromRestAcc(var record RestAccVc RestAccp, integer rownr)
begin
  record KitchenOrderVc KOr,KOrOld;
  row KitchenOrderVc KOrw;
  boolean found;
  integer rwcnt,i;
  
  found = true;
  KOr.RestAccSerNr = RestAccp.SerNr;
  while (LoopKey("RestAccSerNr",KOr,1,found)) begin
    if (KOr.RestAccSerNr != RestAccp.SerNr) then begin 
      found = false;
    end;
    if (found) then begin 
      RecordCopy(KOrOld,KOr);
      rwcnt = MatRowCnt(KOr);
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(KOr,i,KOrw);
        if (KOrw.RestAccRow==rownr) then begin
          MatRowDelete(KOr,i);
          i = rwcnt;  
          RecordUpdate(KOrOld,KOr,false);
          found = false;             
        end;
      end;
    end;
  end;
  return;
end;

updating procedure AddRowtoKitchenOrderFromRestAcc(var record RestAccVc RestAccp, integer rownr)
begin
  record KitchenOrderVc KOr,KOrOld;
  row KitchenOrderVc KOrw;
  row RestAccVc RestAccrw;
  boolean found;
  integer rwcnt,i;
  
  found = true;
  MatRowGet(RestAccp,rownr,RestAccrw);
  KOr.RestAccSerNr = RestAccp.SerNr;
  while (LoopKey("RestAccSerNr",KOr,1,found)) begin
    if (KOr.RestAccSerNr != RestAccp.SerNr) then begin 
      found = false;
    end;
    if (found) then begin
      RecordCopy(KOrOld,KOr);
      rwcnt = MatRowCnt(KOr);
      KOrw.ArtCode = RestAccrw.ArtCode;
      KOrw.Quant = RestAccrw.Quant;
      KOrw.Spec = RestAccrw.Spec;
      KOrw.KitchenDepartment = RestAccrw.KitchenDepartment;
      MatRowPut(KOr,rwcnt,KOrw);
      RecordUpdate(KOrOld,KOr,false);
    end;
  end;
  return;
end;

global
updating procedure RestAccDClassTouchScreenVoidRowExecute(string stdproblemcode)
begin
  Integer wn,line,rownr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  string 255 tstr,tag,t2;
  record LocalMachineBlock LMb;
  Integer ProceedPaymentPrintKitchenOrder;
  record RestBlock Restb;
  record RestSetupVc RSr;
  transaction Integer gTransferRestAccToKitchenOrder;

  wn = CurWindow;
  line = SelectedListLine(wn);
  if (line>=0) then begin
    if (UserCanAction("AllowRestAccRowsVoid",IsStandardProduct==true)==false) then begin
      POSManagersAction2(wn,"VoidRow",stdproblemcode);
      goto LRestAccDClassTouchScreenVoidRowExecute;
    end;
    rownr = GetSelectedPOSItemRowIndex(wn);
    if (rownr>=0) then begin
      DeselectWindow(wn,true);
      GetWindowRecord(wn,RestAccr);
      if (RestAccr.Closed!=0) then begin goto LRestAccDClassTouchScreenVoidRowExecute; end;
      MatRowGet(RestAccr,rownr,RestAccrw);
      BlockLoad(Restb);
      if (Restb.AllowPartialItemVoid!=0 and RestAccrw.Quant>1) then begin
        UpdateVoidQtyTouchScreenOClass(wn,RestAccr.SerNr,RestAccrw.Quant,rownr,stdproblemcode);
        goto LRestAccDClassTouchScreenVoidRowExecute;
      end;
      if (RestAccDClassVoidRow(RestAccr,rownr,stdproblemcode,true)) then begin
        UpdateKitchenOrderFromRestAcc(RestAccr,rownr);      
        BlockLoad(LMb);
        RestAccSumup(RestAccr,"");
        RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
        RestAccSumup(RestAccr,"");

        MatRowGet(RestAccr,rownr,RestAccrw);
        RestAccDClass_RefreshStringList(wn,RestAccr);
        tstr = ValToString(-RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(RestAccrw.ArtCode & " " & RestAccrw.Spec,tstr);

        ProceedPaymentPrintKitchenOrder = Restb.ProceedPaymentPrintKitchenOrder;
        RSr.BranchID = RestAccr.BranchID;
        if (ReadFirstMain(RSr,1,true)) then begin
          ProceedPaymentPrintKitchenOrder = RSr.ProceedPaymentPrintKitchenOrder;
        end;
        PutWindowRecord(wn,RestAccr);
        DeselectWindow(wn,false);
        if (WindowDoOK(wn,0)) then begin 
          if (ProceedPaymentPrintKitchenOrder!=0) then begin
            gTransferRestAccToKitchenOrder = 0;
            srlRestAccLPrint(RestAccr,"","RestAccKitchenForm");
  //          RecordActionRestAcc_Print(RestAccr,"","RestAccKitchenForm",true);
          end;     
        end;
        PutWindowRecord(wn,RestAccr);
        OverrideLogout;
      end;
    end;
  end;
LRestAccDClassTouchScreenVoidRowExecute:;  
  return;
end;
/*
global
updating procedure RestAccDClassTouchScreenVoidRowExecute(string stdproblemcode)
begin
  Integer wn,line,rownr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  string 255 tstr,tag,t2;
  record LocalMachineBlock LMb;
  Integer ProceedPaymentPrintKitchenOrder;
  record RestBlock Restb;
  record RestSetupVc RSr;
  transaction Integer gTransferRestAccToKitchenOrder;

  wn = CurWindow;
  line = SelectedListLine(wn);
  if (line>=0) then begin
    if (UserCanAction("AllowRestAccRowsVoid",false)==false) then begin
      POSManagersAction2(wn,"VoidRow",stdproblemcode);
      goto LRestAccDClassTouchScreenVoidRowExecute;
    end;
    rownr = GetSelectedPOSItemRowIndex(wn);
    if (rownr>=0) then begin
      DeselectWIndow(wn,true);
      GetWindowRecord(wn,RestAccr);
      if (RestAccr.Closed!=0) then begin goto LRestAccDClassTouchScreenVoidRowExecute; end;
      if (RestAccDClassVoidRow(RestAccr,rownr,stdproblemcode,true)) then begin
        BlockLoad(LMb);
        RestAccSumup(RestAccr,true);              
        RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
        RestAccSumup(RestAccr,true);              
        PutWindowRecord(wn,RestAccr);    
        MatRowGet(RestAccr,rownr,RestAccrw);
        RestAccDClass_RefreshStringList(wn,RestAccr);
        tstr = ValToString(-RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
        M4PadString(ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
        tstr = tstr & t2;  
        SetPOSWindowDisplay(RestAccrw.ArtCode & " " & RestAccrw.Spec,tstr);
        DeselectWindow(wn,false);
        WindowDoOK(wn,0);

        GetWindowRecord(wn,RestAccr);
        BlockLoad(Restb);
        ProceedPaymentPrintKitchenOrder = Restb.ProceedPaymentPrintKitchenOrder;
        RSr.BranchID = RestAccr.BranchID;
        if (ReadFirstMain(RSr,1,true)) then begin
          ProceedPaymentPrintKitchenOrder = RSr.ProceedPaymentPrintKitchenOrder;
        end;
        if (ProceedPaymentPrintKitchenOrder!=0) then begin
          gTransferRestAccToKitchenOrder = 0;
//          srlRestAccLPrint(RestAccr,"","RestAccKitchenForm");
          RecordActionRestAcc_Print(RestAccr,"","RestAccKitchenForm",true);
          PutWindowRecord(wn,RestAccr);
          DeselectWindow(wn,false);
//          WindowDoOK(wn,0);//crashes for some reason
        end;

        OverrideLogout;
      end;
    end;
  end;
LRestAccDClassTouchScreenVoidRowExecute:;  
  return;
end;
*/
global
updating procedure RestAccDClassTouchScreenVoidRow()
begin
  string 255 tagstr;
  
  tagstr = PushButtonTag;
  RestAccDClassTouchScreenVoidRowExecute(tagstr)
  return;
end;

global
procedure RestAccDClassTouchScreenAmendLine()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  line = SelectedListLine(mwn);

  if (line>=0) then begin
    if (UserCanAction("AllowAmendLine",IsStandardProduct==true)==false) then begin
      POSManagersAction(mwn,"AmendLine");
      goto LRestAccDClassTouchScreenAmendLine;
    end;
    
    RecordClear(RepSpec);
    rownr = GetSelectedPOSItemRowIndex(mwn);
    if (rownr>=0) then begin
      GetWindowRecord(mwn,RestAccr);
      MatRowGet(RestAccr,rownr,RestAccrw);
      testf = true;
      if (RestAccr.Closed!=0) then begin testf = false; end;
      if (RestAccrw.stp!=kInvoiceRowTypeNormal) then begin testf = false; end;
      if (RestAccrw.ovst!=0) then begin testf = false; end;
      if (RestAccrw.AlreadyPrintedToKitchen!=0) then begin testf = false; end;
      if (RestAccrw.AlreadyPrinted!=0) then begin testf = false; end;
      if (testf) then begin
        RepSpec.AccStr = RestAccrw.ArtCode;
        RepSpec.f1 = RestAccrw.Spec;
        RepSpec.f2 = RestAccrw.VATCode;
        RepSpec.vals0 = RestAccrw.Quant;
        RepSpec.vals1 = RestAccrw.Price;
        RepSpec.vals2 = blankval;//RestAccrw.vRebate
        RepSpec.vals3 = RestAccrw.Sum;
        RepSpec.vals4 = blankval;//RestAccrw.PriceFactor
        RepSpec.CurncyCode = RestAccrw.CurncyCode;
        RepSpec.FirstAcc = RestAccrw.PayMode;
        RepSpec.long1 = rownr;
        RepSpec.long2 = RestAccrw.stp;
        wn = OpenWindow("AmendLineNPTSSClass",0,mwn,"","",RepSpec);
//        PutWindowString(wn,"BasePrice",RestAccrw.BasePrice);  
        WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
      end;
    end;
  end;
LRestAccDClassTouchScreenAmendLine:;  
  return;
end;

global
procedure RestAccDClassTouchScreenAddOrderDiscount()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  string 255 tstr,tagstr;
  Boolean testf;
  
  mwn = CurWindow;
  line = SelectedListLine(mwn);

  if (UserCanAction("AllowAddingOrderDiscount",false)==false) then begin
    POSManagersAction(mwn,"AddOrderDiscount");
    goto LRestAccDClassTouchScreenAddOrderDiscount;
  end;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,RestAccr);
  MatRowGet(RestAccr,rownr,RestAccrw);
  testf = true;
  if (RestAccr.Closed!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.vals2 = blankval;//RestAccrw.vRebate
    RepSpec.CurncyCode = RestAccrw.CurncyCode;
    RepSpec.FirstAcc = RestAccrw.PayMode;
    wn = OpenWindow("AddOrderDiscountNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"vals2",false);    
  end;
LRestAccDClassTouchScreenAddOrderDiscount:;  
  return;
end;

global
updating procedure RestAccDClassTouchScreenKitchenOrder()
begin
  Integer wn,nwn;
  record RestAccVc RAr;
  record KitchenOrderVc KOr;
  
  wn = CurWindow;  
  if ((WindowState(wn)==Rs_insert) or (WindowState(wn)==Rs_update)) then begin
    GetWindowRecord(wn,RAr);
    PutWindowRecord(wn,RAr);
    WindowDoOK(wn,0);
  end;
  GetWindowRecord(wn,RAr);
  RestAccToKitchenOrder(RAr,KOr);
  if (MatRowCnt(KOr)>0) then begin
    nwn = OpenWindow("KitchenOrderDClass",0,wn,"","",KOr);
    WindowFieldGoto(nwn,KOr,-1,"Comment",true);
  end;
LRestAccDClassTouchScreenKitchenOrder:;  
  return;
end;

/*
global
function val CalculateRestAccCashAmount(record RestAccVc RestAccr)
begin
  val t;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  val cash,v;
  record BaseCurBlock bascur;
  Boolean bcurf;

  BlockLoad(bascur);
  rwcnt = MatRowCnt(RestAccr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    if ((RestAccrw.stp==kInvoiceRowTypeGiftVoucherPayment) or (RestAccrw.stp==kInvoiceRowTypeCreditCardPayment) or (RestAccrw.stp==kInvoiceRowTypeChequePayment)) then begin
      cash = cash + RestAccrw.Sum;
    end;
    if ((RestAccrw.stp==kInvoiceRowTypeCashPayment) or (RestAccrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)) then begin 
      if (RestAccrw.CurncyCode!=RestAccr.CurncyCode) then begin  
        if (RestAccr.CurncyCode==bascur.BaseCur1) then begin
          cash = cash + MulRateToBase1(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (RestAccr.CurncyCode==bascur.BaseCur2) then begin
          cash = cash + MulRateToBase2(RestAccrw.CurncyCode,RestAccrw.Sum,RestAccrw.FrRate,RestAccrw.ToRateB1,RestAccrw.ToRateB2,RestAccrw.BaseRate1,RestAccrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (bcurf==false) then begin
          CurValToOtherCur(RestAccr.InvDate,RestAccrw.CurncyCode,RestAccrw.Sum,RestAccr.CurncyCode,v,DefaultCurRoundOff);
          cash = cash + v;
        end;
      end else begin
        cash = cash + RestAccrw.Sum;
      end;
    end;
  end; 
  CalculateRestAccCashAmount = cash; 
  return;
end;
*/

global
function val CalculateRestAccCashAmount(record RestAccVc RestAccr)
begin
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  val cash;

  rwcnt = MatRowCnt(RestAccr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    if ((RestAccrw.stp==kInvoiceRowTypeGiftVoucherPayment) or (RestAccrw.stp==kInvoiceRowTypeCreditCardPayment) or (RestAccrw.stp==kInvoiceRowTypeChequePayment)) then begin
      cash = cash + RestAccrw.Sum;
    end;
    if ((RestAccrw.stp==kInvoiceRowTypeCashPayment) or (RestAccrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)) then begin 
      cash = cash + RestAccrw.Sum;
    end;
  end; 
  CalculateRestAccCashAmount = cash; 
  return;
end;

global
updating procedure RestAccDClassTouchScreenTransfertoSL()
begin
  record RestAccVc RestAccr;
  Integer wn,nwn;
  val prevRetValue;
  string 255 tstr;
  record CreditLimitBlock CLb;
  val limit,bal,basesum4;
  record CUVc CUr;
  record IVVc IVr;
  Boolean limitdaysf;
  Integer ProceedPaymentPrintKitchenOrder;
  record RestBlock Restb;
  record RestSetupVc RSr;
  transaction Integer gTransferRestAccToKitchenOrder;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  if (RestAccr.Invalid!=0) then begin goto LRestAccDClassTouchScreenTransfertoSL; end;
  if (UserCanAction("AllowRestAccTransfertoSL",false)==false) then begin
    POSManagersAction(wn,"TransfertoSL");
    goto LRestAccDClassTouchScreenTransfertoSL;
  end;
  if (RestAccr.Closed==0) and (RestAccr.Invalid==0) then begin
    BlockLoad(CLb);
    if (CLb.IVSave==1) or (CLb.IVPaste==1) then begin
      CUr.Code = RestAccr.CustCode;
      if (GetCustAndBal(CUr,limit,bal,CLb.Base,CLb.OwnCheques,CLb.ThirdCheques,CLb.IOUCheques,CLb.ThirdIOUCheques,CLb.ORSaveWarn,limitdaysf)) then begin
        if (limitdaysf) then begin
          if (CLb.IVSave==1) then begin    
            MessageBox(22260,"");
            goto LRestAccDClassTouchScreenTransfertoSL;
          end;
        end;
        if (blank(limit)==false) then begin 
          basesum4 = RestAccr.Sum4;  
          basesum4 = basesum4 - CalculateRestAccCashAmount(RestAccr);
          switch (CLb.Base) begin
            case 0: bal = bal + basesum4;
            case 1: 
            case 2: bal = bal + basesum4;
          end;
          if (bal>limit) then begin
            if (CLb.IVSave==1) then begin    
              MessageBox(1164,"");
              goto LRestAccDClassTouchScreenTransfertoSL;
            end;
          end;
        end;
      end;
    end;
    
    RestAccr.Closed = 1;
    RestAccr.TransferToSL = 1;
    PutWindowRecord(wn,RestAccr);
    if (WindowDoOK(wn,0)==false) then begin
      RestAccr.Closed = 0;
      PutWindowRecord(wn,RestAccr);
    end else begin
      GetWindowRecord(wn,RestAccr);
      RestAccToIV_FromBarTransferSL(RestAccr,IVr);
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,IVr.LangCode);
      if (RecordStore(IVr,false)) then begin
        BlockLoad(Restb);
        ProceedPaymentPrintKitchenOrder = Restb.ProceedPaymentPrintKitchenOrder;
        RSr.BranchID = RestAccr.BranchID;
        if (ReadFirstMain(RSr,1,true)) then begin
          ProceedPaymentPrintKitchenOrder = RSr.ProceedPaymentPrintKitchenOrder;
        end;
        if (ProceedPaymentPrintKitchenOrder!=0) then begin
          gTransferRestAccToKitchenOrder = 0;
          srlRestAccLPrint(RestAccr,"","RestAccKitchenForm");
        end;

        CloseWindow(wn);
        UpdateBrowses("IVCashVc");
        nwn = OpenWindow("IVDClass",1,0,"","",IVr);  
      end;
/*    
      WindowDoNew(wn,0);
      GetWindowRecord(wn,RestAccr);
      RestAccr.RetValue = prevRetValue;
      PutWindowString(wn,"touchscreenwindowpage",1);
      PutWindowString(wn,"touchscreenwindowpagestack","1");
      PutWindowString(wn,"touchscreenwindowprinterstack","*");
      PutWindowString(wn,"CustomerDisplayData_Line1","");
      PutWindowString(wn,"CustomerDisplayData_Line2","");    
      PutWindowString(wn,"touchscreenitemlastrownr",-1);
      tstr = USetStr(24172) & "  ";
      tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
      SetPOSWindowDisplay("",tstr);
      PutWindowRecord(wn,RestAccr);
      RestAccDClass_RefreshStringList(wn,RestAccr);
*/      
    end;
  end;
  OverrideLogout;
LRestAccDClassTouchScreenTransfertoSL:;  
  return;
end;

global
updating procedure RestAccDClassTouchScreenTransfertoInvoice()
begin
  record RestAccVc RestAccr;
  Integer wn,nwn;
  val prevRetValue;
  string 255 tstr,wclass;
  record IVVc IVr;

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  if (RestAccr.Invalid!=0) then begin goto LRestAccDClassTouchScreenTransfertoInvoice; end;
  if (RestAccr.Closed!=0) then begin goto LRestAccDClassTouchScreenTransfertoInvoice; end;
  if (CompanyProgramMode==kProgramModeLiveSync)then begin 
    MessageBox(25750,"")
    goto LRestAccDClassTouchScreenTransfertoInvoice; 
  end;
  if (UserCanAction("AllowRestAccTransfertoInvoice",false)==false) then begin
    POSManagersAction(wn,"TransfertoInvoice");
    goto LRestAccDClassTouchScreenTransfertoInvoice;
  end;
  if (RestAccr.Closed==0) and (RestAccr.Invalid==0) then begin
    if (WindowDoOK(wn,0)) then begin
      wclass = GetWindowClass(wn);
      GetWindowRecord(wn,RestAccr);
      RestAccToIV_FromBar(RestAccr,IVr);
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,-1,false,IVr.LangCode);
      if (RecordStore(IVr,false)) then begin
        if (HasLocalization("HRV")) then begin
          RestAccr.Closed = 1;
          RestAccr.Invalid = 1;
          RestAccr.TransferToSL = 1;
          RestAccr.IVNr = IVr.SerNr;
          PutWindowRecord(wn,RestAccr);
          WindowDoOK(wn,0);
        end else begin
          RecordRemove(RestAccr);
        end;
        UpdateBrowses("RestAccVc");
        nwn = OpenWindow("IVDClass",1,0,"","",IVr);  
        if (nwn>0) then begin
          CloseWindow(wn);
          PutWindowString(nwn,"touchscreenwindowFrom",wclass);
        end else begin
          WindowDoNew(wn,0);
        end;
  /*
        WindowDoNew(wn,0);
        GetWindowRecord(wn,RestAccr);
        RestAccr.RetValue = prevRetValue;
        PutWindowString(wn,"touchscreenwindowpage",1);
        PutWindowString(wn,"touchscreenwindowpagestack","1");
        PutWindowString(wn,"touchscreenwindowprinterstack","*");
        PutWindowString(wn,"CustomerDisplayData_Line1","");
        PutWindowString(wn,"CustomerDisplayData_Line2","");    
        PutWindowString(wn,"touchscreenitemlastrownr",-1);
        tstr = USetStr(24172) & "  ";
        tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
        SetPOSWindowDisplay("",tstr);
        PutWindowRecord(wn,RestAccr);
        RestAccDClass_RefreshStringList(wn,RestAccr);
  */      
      end;
    end;
  end;
  OverrideLogout;
LRestAccDClassTouchScreenTransfertoInvoice:;  
  return;
end;

global
procedure RestAccDClassTouchScreenLoyaltyPointsBonusExecute()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  string 255 tstr;
  Boolean testf;

  mwn = CurWindow;
  if (UserCanAction("AllowIVTSLoyaltyPointsBonus",UseAppStoreEnabler==true)==false) then begin
    POSManagersAction(mwn,"LoyaltyPointsBonus");
    goto LRestAccDClassTouchScreenLoyaltyPointsBonusExecute;
  end;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,RestAccr);
  testf = true;
  if (RestAccr.Closed!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("LoyaltyPointsBonusNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
  end;
LRestAccDClassTouchScreenLoyaltyPointsBonusExecute:;  
  OverrideLogout;
  return;
end;

global
updating procedure RestAccDClassTouchScreenLoyaltyPointsPaymentExecute(string paymode)
begin
  Integer wn,mwn,line,rownr;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Integer i,rwcnt;
  record RcVc RepSpec;
  Boolean testf;
  val PointsBalance,totsumb1,sum4;
  Integer err;
  string 255 tstr;
  
  mwn = CurWindow;
  GetWindowRecord(mwn,RestAccr);
  if (blank(RestAccr.LoyaltyCardNr)) then begin
    MessageBox(26439,"");
    goto LRestAccDClassTouchScreenLoyaltyPointsPaymentExecute;
  end;
  if (UserCanAction("AllowIVTSLoyaltyPayment",false)==false) then begin
    POSManagersAction(mwn,"LoyaltyPayment");
    goto LRestAccDClassTouchScreenLoyaltyPointsPaymentExecute;
  end;
  RecordClear(RepSpec);
  testf = true;
  if (RestAccr.Closed!=0) then begin testf = false; end;
  if (RestAccr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    sum4 = RestAccr.Sum4;
    RestAccr.Sum4 = RestAccr.RemValue;
    err = CalculateLoyaltyPointsPayment_RestAccVc(RestAccr,blankval,PointsBalance,RepSpec.vals0,totsumb1);
    RestAccr.Sum4 = sum4;
    if (err!=0) then begin
      MessageBox(err,"");
      goto LRestAccDClassTouchScreenLoyaltyPointsPaymentExecute;
    end;
    rwcnt = MatRowCnt(RestAccr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(RestAccr,i,RestAccrw);
      switch (RestAccrw.stp) begin
        case kInvoiceRowTypeLoyaltyPointsPayment:
          PointsBalance = PointsBalance - RestAccrw.Points;
      end;
    end;
    RepSpec.FirstAcc = paymode;
    RepSpec.vals1 = PointsBalance;
    wn = OpenWindow("LoyaltyPaymentNPTSSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"vals0",false);    
  end;
LRestAccDClassTouchScreenLoyaltyPointsPaymentExecute:;
  return;
end;

global
updating procedure RestAccDClassTouchScreenLoyaltyPointsPayment()
begin
  integer i,wn,rwcnt;
  Boolean found;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;

  wn = CurWindow;
  found = POSButtonsForWindow(wn,POSBr);

  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(POSBr,i,POSBrw);
      switch (POSBrw.ButtonType) begin
        case kPOSButtonTypeLoyaltyPointsPayment:
          RestAccDClassTouchScreenLoyaltyPointsPaymentExecute(POSBrw.Code);
      end;
    end;
  end;
  return;
end;

global 
updating procedure RestAccDClassTouchScreenSaveBarTab()
begin
  Integer wn,nwn;
  record RestAccVc RestAccr;  

  wn = CurWindow;
  GetWindowRecord(wn,RestAccr);
  if (MatRowCnt(RestAccr)>0) then begin
    WindowDoOK(wn,0);
  end;

  WindowDoNew(wn,0);
  SetPOSWindowDisplay(USetStr(13464),"");
//  RestAccDClass_RefreshStringList(wn,RestAccr);
  RestAccSumupSoftEditFields(wn,RestAccr);
  return;
end;

global
updating procedure RestAccDClassTouchScreenInvalidateInvoice()
begin
  record RestAccVc RestAccr;
  Integer wn;

  wn = CurWindow;
  if (UserCanAction("RestAccInvalid",IsStandardProduct==true)==false) then begin
    POSManagersAction(wn,"InvalidateInvoice");
    goto LRestAccDClassTouchScreenInvalidateInvoice;
  end;
  GetWindowRecord(wn,RestAccr);
//  if (RestAccr.Closed!=0) then begin goto LRestAccDClassTouchScreenInvalidateInvoice; end;
  RestAccr.Invalid = 1;
  PutWindowRecord(wn,RestAccr);
  if (RestAccr.Closed==0) then begin
    if (WindowDoOK(wn,0)) then begin
    end;
  end else begin
    if (WindowDoInvalidate(wn)) then begin
      GetWindowRecord(wn,RestAccr);
    end;
  end;
  OverrideLogout;
  WindowDoNew(wn,0);
LRestAccDClassTouchScreenInvalidateInvoice:;  
  return;
end;

updating procedure RestAccDClassTouchScreenFinishButtonExecute(Boolean newf)
begin
  Integer wn,err,wnst;
  record RestAccVc RestAccr;
  record RestAccVc prevRestAccr;
  Boolean save_recordf,new_recordf;
  record LocalMachineBlock LMb;
  val prevRetValue;
  string 255 tstr;
  record RcVc RepSpec;

  BlockLoad(LMb);
  wn = CurWindow;
  wnst = WindowState(wn);
  GetPrevWindowRecord(wn,prevRestAccr);
  if (RecordValid(prevRestAccr)==false) or (prevRestAccr.SerNr<=0) then begin
    RecordCopy(prevRestAccr,RestAccr);
  end;

  DeselectWIndow(wn,true);
  GetWindowRecord(wn,RestAccr);
  RestAccSumup(RestAccr,"");
  RestAccr.Closed = 1;
  PutWindowRecord(wn,RestAccr);

  prevRetValue =  RestAccr.RetValue;
  save_recordf = true;      
  new_recordf = newf;
  err = 0;
  RestAccr.Closed = 1;

  SetRecordCheckVc("RestAccVc");
  err = RestAccVcRecordCheck(RestAccr,prevRestAccr,wnst,3);

  if (err==0 or RECORDCHECKLASTERRORNO==31412) then begin
    if (HasLocalization("HRV") and blank(RestAccr.RefStr) and RestAccr.TransferToSL==0 and blank(RestAccr.Resource)) then begin
      if (DoXMLExport_RestAccVc(RestAccr)==false) then begin
        new_recordf = false;
        save_recordf = false;
        OpenWindow("EnterRefStrDClass",0,wn,"","",RepSpec);
        err = 1;
      end else begin
        PutWindowRecord(wn,RestAccr);
      end;
    end;
  end;
  if (save_recordf) then begin
    if (WindowDoOK(wn,0)==false) then begin 
      RestAccr.Closed = 0;
      PutWindowRecord(wn,RestAccr);
      new_recordf = false;
    end else begin
      if (err==0) then begin
        if (RestAccr.FiscalFlag==0) then begin
          RestAccReceiptPrint(RestAccr,true,true);
          RestAccPrintInvoice;
        end;
      end;
    end;
  end;
  RestAccDClass_RefreshStringList(wn,RestAccr);
  prevRetValue = RestAccr.RetValue;
  if (new_recordf) then begin
    WindowDoNew(wn,0);
    GetWindowRecord(wn,RestAccr);
    RestAccr.RetValue = prevRetValue;
    PutWindowString(wn,"touchscreenwindowpage",1);
    PutWindowString(wn,"touchscreenwindowpagestack","1");
    PutWindowString(wn,"touchscreenwindowprinterstack","*");
    PutWindowString(wn,"CustomerDisplayData_Line1","");
    PutWindowString(wn,"CustomerDisplayData_Line2","");    
    tstr = USetStr(24172) & "  ";
    tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
    SetPOSWindowDisplay("",tstr);
    RestAccDClass_RefreshStringList(wn,RestAccr);
    PutWindowRecord(wn,RestAccr);
 
//    ReRunWindowDef(wn);
  end;  
  return;
end;

global
updating procedure RestAccDClassTouchScreenFromFinishAndPrintButton()
begin
  RestAccDClassTouchScreenFinishButtonExecute(false);
  return;
end;

global
updating procedure RestAccDClassTouchScreenFinishButton()
begin
  RestAccDClassTouchScreenFinishButtonExecute(true);
  return;
end;

global
procedure RestAccDClassOnWindowRecordChange(Integer wn)
begin
  record RestAccVc RestAccr;
  
  GetWindowRecord(wn,RestAccr);    
  if (WindowState(wn)!=Rs_normal) then begin
    RestAccDClass_RefreshStringList(wn,RestAccr);
  end;
  RestAccSumupSoftEditFields(wn,RestAccr);
//  PutWindowRecord(wn,RestAccr); causes crash cause PutWindowRecord calls OnWindowRecordChange so ....
  return;
end;

global
updating procedure RestAccDClassTouchScreenDeleteItemExecute()
begin
  Integer wn,matrowix,i,rwcnt;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record LocalMachineBlock LMb;
  Integer sline;
  string 255 tag;

  wn = CurWindow;
  sline = SelectedListLine(wn);
  if (sline>=0) then begin
    if (UserCanAction("AllowRestAccRowsDelete",IsStandardProduct==true)==false) then begin
      POSManagersAction(wn,"DeleteItem");
      goto LRestAccDClassTouchScreenDeleteItemExecute;
    end;
    BlockLoad(LMb);
    DeselectWindow(wn,true);
    GetWindowRecord(wn,RestAccr);
    if (RestAccr.Closed!=0) then begin goto LRestAccDClassTouchScreenDeleteItemExecute; end;
    matrowix = GetSelectedPOSItemRowIndex(wn);
    if (matrowix>=0) then begin
      if (RestAccDClassDeleteRowTest(wn,matrowix)) then begin
        rwcnt = MatRowCnt(RestAccr);
        for (i=matrowix+1;i<rwcnt;i=i+1) begin
          MatRowGet(RestAccr,i,RestAccrw);
          if (RestAccrw.Modifier!=0) then begin
            MatRowDelete(RestAccr,i);
            i = i - 1;
            rwcnt = MatRowCnt(RestAccr);
          end else begin
            i = rwcnt;
          end;
        end;
        MatRowDelete(RestAccr,matrowix);
        RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
        RestAccSumup(RestAccr,"");
        PutWindowRecord(wn,RestAccr);
        if (GuiType==kGuiCocoa) then begin
          RestAccDClassOnWindowRecordChange(wn);
        end;
      end;
    end else begin
      DeleteSelectedRestAccRow(wn,RestAccr);
    end;
    RestAccDClass_RefreshStringList(wn,RestAccr);
    WindowDoOK(wn,0);
    SetPOSWindowDisplay("","");
    OverrideLogout;
  end;
LRestAccDClassTouchScreenDeleteItemExecute:;  
  return;
end;

global
updating procedure RestAccDClassTouchScreenDeleteItem()
begin
  RestAccDClassTouchScreenDeleteItemExecute;
  return;
end;

global
updating procedure RestAccDClassTouchScreenReturn()
BEGIN
  record RestAccVc RestAccr;
  record RestAccVc newRestAccr;
  row RestAccVc cashRestAccrw;
  row RestAccVc newRestAccrw;
  row RestAccVc RestAccrw;
  Integer i,rwcnt,rownr;
  Integer wn,nwn;
  Boolean foundcashf;
  val credcardv;
  val t,t2;
  integer err1,err2;
  uuid buuid;

  if (UserCanAction("AllowPOSIVNegQty",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"AllowPOSIVNegQty"));      
    goto LRestAccDClassTouchScreenReturn;
  end;                                          
  wn = CurWindow;
  DeselectWindow(wn,true);
  switch (WindowState(wn)) begin
    case Rs_insert:
      PutWindowString(wn,"ReturnMode","true");
      GetWindowRecord(wn,RestAccr);
      if (HasLocalization("POL")) then begin
        RestAccr.FiscalFlag = 0;
      end;
      rwcnt = MatRowCnt(RestAccr);      
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(RestAccr,i,RestAccrw);
        if (RestAccrw.Quant>0) then begin
          RestAccrw.Quant = -RestAccrw.Quant;
          RestAccrw.Sum = -RestAccrw.Sum;
          MatRowPut(RestAccr,i,RestAccrw);
        end;
      end;
      RestAccSumup(RestAccr,"");
      PutWindowRecord(wn,RestAccr);
      RestAccDClass_RefreshStringList(wn,RestAccr);
    otherwise
      GetWindowRecord(wn,RestAccr);
      if (RestAccr.Invalid!=0) then begin goto LRestAccDClassTouchScreenReturn; end;
      
      if (RestAccr.Closed==0) then begin
        RecordCopy(newRestAccr,RestAccr);
        if (HasLocalization("POL")) then begin
          newRestAccr.FiscalFlag = 0;
        end;
        newRestAccr.TransDate = CurrentDate;
        rwcnt = MatRowCnt(newRestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowDelete(newRestAccr,i);
          rwcnt = MatRowCnt(newRestAccr);
          i = i - 1;
        end;
        RestAccDClassTouchScreenReturnRemote(RestAccr,newRestAccr);    
        RestAccSumup(newRestAccr,"");
        PutWindowRecord(wn,newRestAccr);
        RestAccDClass_RefreshStringList(wn,newRestAccr);
      end else begin
        RecordCopy(newRestAccr,RestAccr);
        if (HasLocalization("POL")) then begin
          newRestAccr.FiscalFlag = 0;
        end;
        newRestAccr.Closed = 0;
        newRestAccr.SerNr = -1;
        newRestAccr.TransDate = CurrentDate;
        newRestAccr.MachineName = CurMachineName;
        newRestAccr.DrawerCode = CurDrawerCode(newRestAccr.MachineName);
        rwcnt = MatRowCnt(newRestAccr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowDelete(newRestAccr,i);
          rwcnt = MatRowCnt(newRestAccr);
          i = i - 1;
        end;
        RestAccDClassTouchScreenReturnRemote(RestAccr,newRestAccr);
        if (MatRowCnt(newRestAccr)>0) then begin
          RestAccSumup(newRestAccr,"");
          SetWindowState(wn,Rs_insert);
          PutWindowRecord(wn,newRestAccr);
          if (WindowDoOK(wn,0)) then begin
            PutWindowPrevRecord(wn,newRestAccr);
          end;
          ReRunWindowDef(wn);
          RestAccDClass_RefreshStringList(wn,newRestAccr);
        end;
      end;
  end;
LRestAccDClassTouchScreenReturn:;  
  return;
end;

updating function Boolean RestAccDClassTouchScreenButton(record POSButtonsVc POSBr,row POSButtonsVc POSBrw)
begin
  Boolean res;

  switch (POSBrw.ButtonType) begin
    case kPOSButtonTypeFinish:
      RestAccDClassTouchScreenFinishButtonExecute(true);   
      res = true;
    case kPOSButtonTypeInvalidateInvoice:
      RestAccDClassTouchScreenInvalidateInvoice;
      res = true;
    case kPOSButtonTypeReturn:
      RestAccDClassTouchScreenReturn;
      res = true;
    case kPOSButtonTypeLogin:
      RestAccDClassTouchScreenButtonLogin;
      res = true;
    case kPOSButtonTypSaveInvoice:
      RestAccDClassTouchScreenSaveBarTab;
      res = true;
    case kPOSButtonTypeLoyaltyPointsPayment:
      RestAccDClassTouchScreenLoyaltyPointsPaymentExecute(POSBrw.Code);
      res = true;
    case kPOSButtonTypeLoyaltyPointsBonus:
      RestAccDClassTouchScreenLoyaltyPointsBonusExecute;
      res = true;
    case kPOSButtonTypeAmendLine:
      RestAccDClassTouchScreenAmendLine;
      res = true;
    case kPOSButtonTypeAddOrderDiscount:
      RestAccDClassTouchScreenAddOrderDiscount;
      res = true;
    case kPOSButtonTypeKitchenOrder:
      RestAccDClassTouchScreenKitchenOrder;
      res = true;
    case kPOSButtonTypeVoidRow:
      RestAccDClassTouchScreenVoidRowExecute(POSBrw.Code);
      res = true;
    case kPOSButtonTypeDeleteItem:
      RestAccDClassTouchScreenDeleteItem;
      res = true;
    case kPOSButtonTypePrintOrder:
      RestAccDClassTouchScreenPrint;
      res = true;
    case kPOSButtonTypePrintInvoice:
      RestAccPrintInvoice;
      res = true;
    case kPOSButtonTypePrintFireOrder:
      RestAccPrintFireOrder;
      res = true;
    case kPOSButtonTypePrintCancellation:
      RestAccPrintCancel;
      res = true;
    case kPOSButtonTypeRunReportOnServer:
      RunReportOnServer(POSBrw.Code);
      res = true;
  end;
  RestAccDClassTouchScreenButton = res;
  return;
end;

function Boolean RestAccDClassPageFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Boolean res;
  record POSButtonsVc POSBr;
  Boolean testf,found;
  
  found = true;
  POSBr.WindowClass = "RestAccDClass";
  while (LoopMain(POSBr,1,found)) begin
    if (POSBr.WindowClass!="RestAccDClass") then begin
      found = false;
    end;
    if (found) then begin
      if (POSBr.KeyCode==keycode) then begin
        testf = true;
        if (POSBr.Modifiers==kKeyModifierNone and (shflag or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierShift and (shflag==false or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierCtrl and (shflag or ctrlflag==false)) then begin
          testf = false;
        end;
        if (POSBr.Modifiers==kKeyModifierCtrlShift and (shflag==false or ctrlflag==false)) then begin
          testf = false;
        end;
        if (testf) then begin
          RestAccDClassTouchScreenStackButtonExecute(POSBr.Page);
          res = true;
          goto LRestAccDClassPageFunctionKey;
        end;
      end;
    end;
  end;
LRestAccDClassPageFunctionKey:;    
  RestAccDClassPageFunctionKey = res;
  return;
end;

global
updating function Boolean RestAccDClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  boolean found,testf;
  integer i,wn,rwcnt;
  record POSButtonsVc POSBr;
  row POSButtonsVc POSBrw;
  Boolean res;
  
  wn = CurWindow;
  found = POSButtonsForWindow(wn,POSBr);
  if (found) then begin
    rwcnt = MatRowCnt(POSBr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(POSBr,i,POSBrw);
      if (POSBrw.KeyCode==keycode) then begin
        testf = true;
        if (POSBrw.Modifiers==kKeyModifierNone and (shflag or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierShift and (shflag==false or ctrlflag)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierCtrl and (shflag or ctrlflag==false)) then begin
          testf = false;
        end;
        if (POSBrw.Modifiers==kKeyModifierCtrlShift and (shflag==false or ctrlflag==false)) then begin
          testf = false;
        end;
        if (testf) then begin
          if (RestAccDClassTouchScreenButton(POSBr,POSBrw)==false) then begin
            RestAccDClassTouchScreenPasteButtonDo(i+1);
            res = true;
            goto LRestAccDClassFunctionKey;
          end;
        end;
      end;
    end;
  end;
  if (RestAccDClassPageFunctionKey(keycode,shflag,ctrlflag)) then begin
    res = true;
    goto LRestAccDClassFunctionKey;
  end;
LRestAccDClassFunctionKey:;  
  RestAccDClassFunctionKey = res;
  return;
end;

global
function Boolean VolBarcodeScan_RestAccVc(var record RestAccVc RestAccr,string barcode)
begin
  Boolean res;
  record VolumBarcodeBlock VBb;
  row VolumBarcodeBlock VBbrw;
  Integer i,rwcnt,pos,rownr;
  string 255 artcode,weight,weightdec,depart,price,checkdigit,inwarning;
  row RestAccVc RestAccrw;
  Integer sernrf;
  val q; 
  record LocalMachineBlock LMb;
  
  BlockLoad(VBb);
  rwcnt = MatRowCnt(VBb);
  if (rwcnt>0) then begin
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VBb,i,VBbrw);
      switch (VBbrw.Type) begin
        case kVolumetricBarcodeDefault:
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeArtCode:
          artcode = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeWeight:
          weight = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeWeightDecimals:
          weightdec = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeDepartment:
          depart = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodePrice:
          price = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
        case kVolumetricBarcodeCheckDigit:
          checkdigit = Mid(barcode,pos,VBbrw.Length);
          pos = pos + VBbrw.Length;
      end;
    end;
    ClearRow(RestAccr,RestAccrw,1);    
    if (nonblank(artcode)) then begin
      BlockLoad(LMb);
//      RestAccr.DepCode = depart;
      rownr = MatRowCnt(RestAccr);
      RestAccrw.ArtCode = artcode;
      MatRowPut(RestAccr,rownr,RestAccrw);
      if (RestAccVc_PasteArtCode(RestAccr,rownr,LMb,"",0,1.00,inwarning)) then begin

        MatRowGet(RestAccr,rownr,RestAccrw);
        RestAccrw.Quant = StringToVal(weight,M4Qty);
        q = StringToVal("0." & weightdec,M4Qty);
        RestAccrw.Quant = RestAccrw.Quant + q;
        if (nonblank(price)) then begin
          RestAccrw.Price = StringToVal(price,M423Val)/100.00;
        end;
        RestAccrw.Quant = Round(RestAccrw.Quant,DefaultRoundMode);
        MatRowPut(RestAccr,rownr,RestAccrw);
        RestAccSumup(RestAccr,"");
        res = true;        
      end;
      if (nonblank(inwarning)) then begin
        MessageBox(0,inwarning);
      end;
    end;
  end;
  VolBarcodeScan_RestAccVc = res;
  return;
end;

global 
procedure OpenAddQuantityTouchScreenTClass(Integer mwn,Integer rownr,string artcode)
begin
  Integer nwn;
  record RcVc RepSpec;

  if (true) then begin
    nwn = OpenWindow("AddQuantityTouchScreenTClass",0,mwn,"","",RepSpec);
    if (nwn>0) then begin
      DeselectWindow(nwn,false);
      RepSpec.vals0 = 1.00;
      RepSpec.long1 = rownr;
      RepSpec.f1 = artcode;
      PutWindowRecord(nwn,RepSpec);
      WindowFieldGoto(nwn,RepSpec,-1,"vals0",true);
    end;
  end else begin
    CloseWindow(nwn);
    MessageBox(20807,"");
  end;
  return;
end;

global
procedure RestAccDClassTouchScreenChangeAddress() 
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,RestAccr);
  testf = true;

  if (RestAccr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.f6 = RestAccr.CUName;
    RepSpec.f1 = RestAccr.Addr1;
    RepSpec.f2 = RestAccr.Addr2;
    RepSpec.f3 = RestAccr.Addr3;
    RepSpec.f4 = RestAccr.InvAddr3;
    RepSpec.f5 = RestAccr.InvAddr4;
    RepSpec.f10 = RestAccr.RegNr1;
    RepSpec.f11 = RestAccr.RegNr2;
    RepSpec.f12 = RestAccr.VATNr;
    wn = OpenWindow("ChangeAddressNPTSIVCashSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
procedure RestAccDClassTouchScreenChangeDiscountMatrix()
begin
  Integer wn,mwn;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,RestAccr);
  testf = true;
  if (RestAccr.Closed!=0) then begin testf = false; end;
  if (RestAccr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    RepSpec.FirstAcc = RestAccr.RebCode;
    wn = OpenWindow("ChangeDiscountMatrixNPTSIVCashSClass",0,mwn,"","",RepSpec);
    WindowFieldGoto(wn,RepSpec,-1,"FirstAcc",false);    
  end;
  return;
end;

global
procedure RestAccDClassTouchScreenLoyaltyCard()
begin
  Integer wn,mwn,line,rownr;
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  string 255 tstr;
  Boolean testf;
  
  mwn = CurWindow;
  RecordClear(RepSpec);
  GetWindowRecord(mwn,RestAccr);
  testf = true;
  if (RestAccr.Closed!=0) then begin testf = false; end;
  if (testf) then begin
    wn = OpenWindow("LoyalCardNPTSSClass",0,mwn,"","",RepSpec);
//    WindowFieldGoto(wn,RepSpec,-1,"f1",false);    
  end;
  return;
end;

global
updating procedure RestAccDClassTouchScreenOpenSession()
begin
  OpenPOSSessionsm;
  return;
end;

global
updating procedure RestAccDClassTouchScreenCloseSession()
begin
  ClosePOSSessionsm;
  return;
end;

global
procedure RestAccDClassTouchScreenPutCashFloat()
begin
  POSMoneyInsm;
  return;
end;

global
procedure RestAccDClassTouchScreenGetCashFloat()
begin
  POSMoneyOutsm;
  return;
end;

global
procedure RestAccDClassTouchScreenCashupReport()
begin
  IVCashCashupRnsm;
  return;
end;

global
updating procedure ProceedUpdateVoidQtyTouchScreenOClass()
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RcVc RepSpec;
  Integer rownr,wn,mwn,rwcnt;
  record LocalMachineBlock LMb;
  string 255 tstr,t2;
  Integer ProceedPaymentPrintKitchenOrder;
  record RestBlock Restb;
  record RestSetupVc RSr;
  transaction Integer gTransferRestAccToKitchenOrder;
  string 255 itemcode,description;
  val qty,price,sum;
   
  wn = CurWindow;
  mwn = MotherWindow(wn);
  DeselectWindow(wn,false);
  if (wn>0) then begin 
    GetWindowRecord(wn,RepSpec);
  end;
  if (mwn>0) then begin 
    GetWindowRecord(mwn,RestAccr);
  end;
  
  if (RestAccr.Closed!=0) then begin goto LProceedUpdateVoidQtyTouchScreenOClass; end;
  rownr = RepSpec.flags[0];  
  MatRowGet(RestAccr,rownr,RestAccrw);
  if (RepSpec.long2<=0) then begin goto LProceedUpdateVoidQtyTouchScreenOClass; end;
  if (RestAccrw.Quant==RepSpec.long2) then begin
    if (RestAccDClassVoidRow(RestAccr,rownr,RepSpec.searchstr,true)) then begin
      UpdateKitchenOrderFromRestAcc(RestAccr,rownr);
      BlockLoad(LMb);
      RestAccSumup(RestAccr,true);
      RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
      RestAccSumup(RestAccr,true);
      
      RestAccDClass_RefreshStringList(mwn,RestAccr);
      tstr = ValToString(-RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
      M4PadString(ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
      tstr = tstr & t2;  
      SetPOSWindowDisplay(RestAccrw.ArtCode & " " & RestAccrw.Spec,tstr);
      
      BlockLoad(Restb);
      ProceedPaymentPrintKitchenOrder = Restb.ProceedPaymentPrintKitchenOrder;
      RSr.BranchID = RestAccr.BranchID;
      if (ReadFirstMain(RSr,1,true)) then begin
        ProceedPaymentPrintKitchenOrder = RSr.ProceedPaymentPrintKitchenOrder;
      end;
      CloseWindow(wn);
      PutWindowRecord(mwn,RestAccr);
      DeselectWindow(mwn,false);
      if (WindowDoOK(mwn,0)) then begin 
        if (ProceedPaymentPrintKitchenOrder!=0) then begin
          gTransferRestAccToKitchenOrder = 0;
          srlRestAccLPrint(RestAccr,"","RestAccKitchenForm");
        end;     
      end;
      RestAccDClass_RefreshStringList(mwn,RestAccr);
      PutWindowRecord(mwn,RestAccr);
      OverrideLogout;
      
    end;
  end;
  if (RestAccrw.Quant>RepSpec.long2) then begin
    if (RestAccr.Closed!=0) then begin goto LProceedUpdateVoidQtyTouchScreenOClass; end;
    if (RestAccDClassVoidRow(RestAccr,rownr,RepSpec.searchstr,true)) then begin
      itemcode = RestAccrw.ArtCode;
      description = RestAccrw.Spec;
      qty = RestAccrw.Quant - RepSpec.long2;
      price = RestAccrw.Price;
      sum = price * qty;
      
      UpdateKitchenOrderFromRestAcc(RestAccr,rownr);
      BlockLoad(LMb);
      RestAccSumup(RestAccr,true);
      RestAccr.ServCharge = GetServiceCharge(RestAccr,LMb,true);
      RestAccSumup(RestAccr,true);
      
      tstr = ValToString(-RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
      M4PadString(ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
      tstr = tstr & t2;  
      SetPOSWindowDisplay(RestAccrw.ArtCode & " " & RestAccrw.Spec,tstr);
      
      rwcnt = MatRowCnt(RestAccr);
      RestAccrw.ArtCode = itemcode;
      RestAccrw.Spec = description;
      RestAccrw.Quant = qty;
      RestAccrw.Price = price;
      RestAccrw.Sum = sum;
      MatRowPut(RestAccr,rwcnt,RestAccrw);
      RestAccSumup(RestAccr,true);
      
      AddRowtoKitchenOrderFromRestAcc(RestAccr,rwcnt);
      
      BlockLoad(Restb);
      ProceedPaymentPrintKitchenOrder = Restb.ProceedPaymentPrintKitchenOrder;
      RSr.BranchID = RestAccr.BranchID;
      if (ReadFirstMain(RSr,1,true)) then begin
        ProceedPaymentPrintKitchenOrder = RSr.ProceedPaymentPrintKitchenOrder;
      end;
      CloseWindow(wn);
      PutWindowRecord(mwn,RestAccr);
      RestAccDClass_RefreshStringList(mwn,RestAccr);
      DeselectWindow(mwn,false);
      if (WindowDoOK(mwn,0)) then begin 
        if (ProceedPaymentPrintKitchenOrder!=0) then begin
          gTransferRestAccToKitchenOrder = 0;
          srlRestAccLPrint(RestAccr,"","RestAccKitchenForm");
        end;     
      end;
      OverrideLogout;
    end;
  end;
LProceedUpdateVoidQtyTouchScreenOClass:;
  return;
end;