external procedure AutomatedSalesOrderly(string);
remote function Integer IVApprovalStatus(record IVVc,var record AcceptanceRulesVc);
external function Boolean ArgEInvActiveField(record IVVc,integer,string,integer);
external procedure PUCalcPerc(val,string,var val);
remote function val IVVc_CalcTax2perCustomer(record RPCUTaxVc,var record IVVc);
remote procedure IVVc_PastePrice(var record IVVc,record IVVc,Integer,var string);
remote function Boolean IVVc_PasteCredOfficialSerNr(var record IVVc,Integer,var string);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
external updating function Boolean IVDClassivcashcommandOnEnterKey(Integer,Integer);
external function Integer ERecordStatus(string,string,LongInt,string,var string);
external procedure SpecialVAT2(val,var val);
remote function Integer VATCalcRule(string);
external procedure CalculateIVVcPoints(var record IVVc);
external function val CalculateTotalVATFromTaxMatrix(record TaxMatrixVc,Integer);
external procedure AddRowTaxMatrixToSumTaxMatrix(record TaxMatrixVc,var record TaxMatrixVc,Integer);
external function Boolean UseTaxTemplatesforTaxCalc();
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external function Boolean FindWHITTax(string,Date,var record WHITVc);
external function roundmode SetRoundModeD(Integer);
external procedure InvoiceCalculateFreightWeight(record IVVc,var val,var val,var val);
remote procedure IVVc_PasteCurncyCode(var record IVVc,string,Integer,Boolean,Boolean);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean FindRPCUTax(string,Date,var record RPCUTaxVc);
external function roundmode DefaultRoundMode();
remote function Boolean SerialNrForOneItem(string,var record SerBalVc);
external procedure RecalcIVSubtotal(var record IVVc);
external function val FindTAX1(string,val,Integer,Integer);
external procedure SpecialVAT(string,var val);
external procedure CalcVATBaseVAT(record SMVc,Integer,Integer,Integer,var val,var val);
external procedure CalcVATBaseVAT2(record SMVc,Integer,Integer,Integer,Boolean,var val,var val);
external procedure MulM4ProcVal(val,val,var val);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
external function val FindTAX2(val,val,Integer);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure SetupVATBase(var record SMVc,var Integer);
external procedure AddVATBase(var record SMVc,string,val,val,Integer,Integer,Integer);
external function val FindVAT(string,val,Integer,Integer);
remote procedure IVVc_CalculatePayDate(var record IVVc);
remote function Boolean IVVc_PasteOrdRow(var record IVVc,Integer,var string);
external function Boolean TouchScreenLook();
remote function Integer IVVc_PasteGiftCertificate(var record IVVc,Integer,Integer);
external function Boolean IVDchrsum(var record IVVc,Integer);
remote procedure IVVc_PasteUnitFactPrice(var record IVVc,Integer);
remote function Boolean IVVc_PasteUnitFactQuant(var record IVVc,Integer);
remote procedure IVVc_PasteUnitCode(var record IVVc,Integer);
external procedure IVDchsum(var record IVVc,Integer);
external function Boolean AllowCurChange(string,Boolean);
remote procedure IVSumup(var record IVVc,Boolean);
remote function Boolean FindLastInvoiceRowForSerial(LongInt,string ,string,var row IVVc);
external function Integer ArgEInvLock(record IVVc,integer);
external function Boolean UserCanChangePendingRecord(Integer);

global
function Boolean IVDClassNoInterestFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  IVDClassNoInterestFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassNoRemndrFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  IVDClassNoRemndrFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassNoColectionFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  IVDClassNoColectionFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassDisputedFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
 
  res = true;
  if (UserCanAction("AllowDispute",true)==false) then begin res = false; end;
  IVDClassDisputedFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassUpdStockFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IVVc IVr;

  res = true;
  GetWindowRecord(wn,IVr);  
  if (WindowState(wn)==Rs_insert) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end else begin
      res = UserCanAction("ChangingUpdateStockFlag",true);
    end;
  end;  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end else begin
      res = UserCanAction("ChangingUpdateStockFlag",true);
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end else begin
      res = UserCanAction("ChangingUpdateStockFlag",true);
    end;
  end;    
  IVDClassUpdStockFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVDClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record IVVc IVr;

  res = true;
  GetWindowRecord(wn,IVr);  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end;
  end;    
//vat zone should be as it is on customer card
//otherwise u can paste customer  , filled all, change vat zone and get crap
  res = false;
  IVDClassExportFlagButtonAction = res;
  RETURN;
END;

global
function Boolean IVApprovalStarted(record IVVc IVr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (IVApprovalStatus(IVr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  IVApprovalStarted = res;
  return;
end;

function Boolean AnyRowWithRvrsVATCode(record IVVc IVr)
begin
  Boolean res;
  row IVVc IVrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (nonblank(IVrw.RvrsVATCode)) then begin    
      i = rwcnt;
      res = true;
    end;
  end;
  AnyRowWithRvrsVATCode = res;
  return;
end;

function Boolean ActiveField(record IVVc IVr,record IVVc IV2r,Integer rownr,string fieldname,Integer wnst,Boolean updatef)
BEGIN
  Boolean res;
  row IVVc IVrw;
  record AccBlock ARAccb;
  record CYBlock CYRec;
  record RahaxiBlock Rahaxib; 
  row IVVc lastIVrw;
  record InternetEnablerBlock IEb;
  string 255 tstr;
  record INVc INr;
  
  res = true;
  if (IVApprovalStarted(IVr) and UserCanChangePendingRecord(rownr)==false) then begin
    res = false;
    goto LIVDClassActiveEditField;
  end;
  switch (fieldname) begin
//    case "CreditedRow": res = false;
    case "TAX2Prc": res = false;
    case "RvrsVATCode": res = false;
    case "TaxAuthID": res = HasLocalization("BOL")==false;
    case "VATNr": res = HasLocalization("PRT")==false;
    case "RecipientGLN": res = HasLocalization("PRT")==false;
    case "Addr0": res = HasLocalization("PRT")==false;
    case "Addr1": res = HasLocalization("PRT")==false;
    case "Addr2": res = HasLocalization("PRT")==false;
    case "Addr3": res = HasLocalization("PRT")==false;
    case "InvAddr3": res = HasLocalization("PRT")==false;
    case "InvAddr4": res = HasLocalization("PRT")==false;
    case "InvCountry": res = HasLocalization("PRT")==false;
    case "CuAccCode":
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==kInvoiceRowTypePerceptionTax) then begin res = false; end;
      end;
    case "rowGP": res = false;
    case "SerNr": 
      BlockLoad(ARAccb);
      switch (wnst) begin
        case Rs_update:
          if (ARAccb.ChronologyforInvNo!=0) then begin res = false; end;
          if (IVr.JobNr>0) then begin res = false; end;
          if (IV2r.OKFlag==0) then begin
            if (UserCanAction("AllowIVSerNrChange",true)==false) then begin res = false; end;
          end else begin
            res = false; 
          end;
        otherwise
          if (UserCanAction("AllowIVSerNrChange",true)==false) then begin res = false; end;
      end;
    case "TransDate": 
      BlockLoad(CYRec);
      if (CYRec.AllowTransDateEdit==0) then begin
        res = false;
      end;
      if (IVr.CredManNr>0) then begin res = false; end;
    case "PRCode": 
      if (IVr.InvType!=kInvoiceTypeCredit and IVr.InvType!=kInvoiceTypeCreditSpecialSales) then begin res = false; end;
    case "FrRate": 
      if (AllowCurChange(IVr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB1": 
      if (AllowCurChange(IVr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB2": 
      if (AllowCurChange(IVr.CurncyCode,false)==false) then begin res = false; end;
    case "BaseRate1": 
      if (AllowCurChange(IVr.CurncyCode,true)==false) then begin res = false; end;
    case "BaseRate2": 
      if (AllowCurChange(IVr.CurncyCode,true)==false) then begin res = false; end;
    case "PriceList": 
      if (UserCanAction("ChangePrices",true)==false) then begin res = false; end;
    case "RebCode": 
      if (UserCanAction("ChangeDiscountMatrixonIV",false)==false) then begin res = false; end;
    case "Recepy": 
      if (IVr.OrderNr!=-1) then begin res = false; end;
    case "Spec": 
      if (HasLocalization("PRT")) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (nonblank(IVrw.ArtCode)) then begin
          res = false;
        end;
      end else begin
        BlockLoad(ARAccb);
        if (UserCanAction("ChangeIVItemSpec",ARAccb.CashSalesToFiscalControlUnit==0)==false) then begin res = false; end;
      end;
    case "OfficialSerNr2": 
      if (HasLocalization("PRT")) then begin
        res = IVr.Status==kRecordStatusManual or IVr.Status==kRecordStatusRecovered;
      end;
    case "BasePrice": 
      if (UserCanAction("ChangingCostOnInvoiceRow",true)==false) then begin res = false; end;
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==kInvoiceRowTypePrepayment) then begin res = false; end;
      end;
    case "BasePriceB2": 
      if (UserCanAction("ChangingCostOnInvoiceRow",true)==false) then begin res = false; end;
    case "Price": 
      BlockLoad(ARAccb);
      if (UserCanAction("ChangeUnitPrices",ARAccb.CashSalesToFiscalControlUnit==0)==false) then begin res = false; end;
      if (res) then begin
        if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
          if (updatef) then begin
            if (rownr<MatRowCnt(IV2r)) then begin
              res = false;
            end;
          end;
        end;
      end;
      if (res) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==6) then begin res = false; end;
      end;
      if (IVrw.OrdRow>=0) then begin 
        if (AnyRowWithRvrsVATCode(IVr)) then begin res = false; end;
      end;
      
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "vRebate": 
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
          end;
        end;
      end;
      if (res) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
      end;
      if (IVrw.OrdRow>=0) then begin 
        if (AnyRowWithRvrsVATCode(IVr)) then begin res = false; end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "ArtCode":
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
            goto LIVDClassActiveEditField;
          end;
        end;
      end;
      MatRowGet(IVr,rownr,IVrw);
      if (nonblank(IVrw.RvrsVATCode)) then begin
        if (IVrw.OrdRow>=0) then begin res = false; end;
      end;
      if (TouchScreenInterface) then begin
        if (nonblank(IVrw.ArtCode)) then begin
          if (UserCanAction("AllowIVTSRowsDelete",true)==false) then begin
            res = false;
            goto LIVDClassActiveEditField;
          end;
        end;
      end;
      if (IVrw.OrdRow>=0) then begin res = false; end;
    case "Quant": 
      MatRowGet(IVr,rownr,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          res = false;
      end;
      if (IVrw.OrdNr>0 or IVr.OrderNr>0) then begin 
        if (AnyRowWithRvrsVATCode(IVr)) then begin 
          if (ReadFirstItem(IVrw.ArtCode,INr,true,false)) then begin
            if (nonblank(INr.RvrsVATCode)) then begin res = false; end;
          end;
        end;
      end;
      if (TouchScreenInterface) then begin
        if (nonblank(IVrw.ArtCode)) then begin
          if (UserCanAction("AllowIVTSRowsDelete",true)==false) then begin
            res = false;
          end;
        end;
      end;
      if (IVr.OrderNr>0) then begin
        if (nonblank(IVrw.ArtCode)) then begin
          if (IVrw.OrdRow>=0) then begin
            if (UserCanAction("DisallowChangeIVQtyFromOR",false)==true) then begin
              res = false;
            end;
          end;
        end;
      end;
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
          end;
        end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "CreditCard":
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
          //BlockLoad(Rahaxib);
          //res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
          res = blank(IVrw.AuthorizationCode);
        end;
      end;
    case "AuthorizationCode":
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
          //BlockLoad(Rahaxib);
          //res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
          res = blank(IVrw.AuthorizationCode);
        end;
      end;
    case "Sum":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypePerceptionTax) then begin res = false; end;
      if (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin res = false; end;
      if (IVrw.stp==kInvoiceRowTypeDebtorsTransfer) then begin res = false; end;
      if (IVrw.stp<kInvoiceRowTypeGiftVoucherSold) then begin
        if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
      end;
      if (IVrw.stp==kInvoiceRowTypeCreditCardPayment) then begin
        //BlockLoad(Rahaxib);
        //res = (Rahaxib.TerminalType==kLocalCCTerminalNone);
        if (rownr>=0) then begin
          MatRowGet(IVr,rownr,IVrw);
          res = blank(IVrw.AuthorizationCode);
        end;
      end;
      if ((IVr.InvType!=kInvoiceTypeCredit) and (IVr.InvType!=kInvoiceTypeCreditSpecialSales) and (IVrw.stp==kInvoiceRowTypeDownpayment) and (nonblank(IVr.PRCode))) then begin res = false; end;
      if (IVr.COCUSerNr>0 or IVr.RoyaltyIVFlag!=0) then begin
        if (updatef) then begin
          if (rownr<MatRowCnt(IV2r)) then begin
            res = false;
          end;
        end;
      end;
      if (IVrw.OrdRow>=0) then begin 
        if (AnyRowWithRvrsVATCode(IVr)) then begin res = false; end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "RetnValue": 
      if (IVr.InvType!=kInvoiceTypeCash and IVr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) then begin res = false; end;
    case "BranchID": 
      res = UserCanAction("AllowIVBranchIDChange",false);
    case "InvDate": 
      BlockLoad(ARAccb);
      if (ARAccb.ChronologyforInvNo!=0) then begin res = false; end;
      if (IVr.CredManNr>0) then begin res = false; end;
      if (res) then begin
        switch (wnst) begin
          case Rs_update:
            if (IV2r.OKFlag==0) then begin
              if (UserCanAction("AllowIVInvDateChange",true)==false) then begin res = false; end;
            end;
          otherwise
            if (UserCanAction("AllowIVInvDateChange",true)==false) then begin res = false; end;
        end;
      end;
    case "FIFO": 
      if (IVr.OrderNr>0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.OrdRow>=0) then begin res = false; end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "FIFORowVal": 
      if (IVr.OrderNr>0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.OrdRow>=0) then begin res = false; end;
      end;
      if (res) then begin 
        MatRowGet(IVr,rownr,IVrw);
        if (IVrw.Quant<0) then begin 
          if FindLastInvoiceRowForSerial(IVr.SerNr,IVr.CustCode,IVrw.SerialNr,lastIVrw) then begin
            res = false;
          end; 
        end;
      end;
    case "SalesMan": 
      if (UserCanAction("DisallowSalesmanChange",false)) then begin
        res = false;
      end;
    case "Salesmen": 
      if (UserCanAction("DisallowSalesmanChange",false)) then begin
        res = false;
      end;
    case "Location": 
      if (rownr>=0) then begin
        MatRowGet(IVr,rownr,IVrw);
        if (IVr.OrderNr>0) then begin
          if (IVrw.OrdRow!=-1) then begin
            res = false;
          end;
        end;
      end else begin
      end;
    case "WHTax":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin res = false; end;
    case "SalesAcc":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypeWithholdingTax) then begin res = false; end;
      if (IVrw.stp==kInvoiceRowTypeDebtorsTransfer) then begin res = false; end;
    case "VATCode":
      MatRowGet(IVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypeDebtorsTransfer) then begin res = false; end;
    case "CAE":
      res = false;
      if (UserCanAction("EditingCAEandCAEExpiry",false)) then begin
        res = true;
        BlockLoad(IEb);
        if (ERecordStatus(IEb.CustomerCode,IVr.CustCode,IVr.SerNr,"IVVc",tstr)==6) then begin        
          res = true;
        end;
      end else begin
        res = false; 
      end;
    case "CAEExpiry":
      res = false;
      if (UserCanAction("EditingCAEandCAEExpiry",false)) then begin
        res = true;
        BlockLoad(IEb);
        if (ERecordStatus(IEb.CustomerCode,IVr.CustCode,IVr.SerNr,"IVVc",tstr)==6) then begin        
          res = true;
        end;
      end else begin
        res = false; 
      end;
  end;
LIVDClassActiveEditField:;  
  ActiveField = res;
  RETURN;
END;

global
function Boolean IVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record IVVc IVr;
  record IVVc IV2r;
  row IVVc IVrw;
  Integer arglock;
  Integer nwn;
  
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LIVDClassActiveEditField;
    end;
  end;
  if (wnst!=Rs_update) then begin
    GetWindowRecord(wn,IVr);
    res = ActiveField(IVr,IVr,rownr,fieldname,wnst,false);
  end else begin
    res = false;
    GetPrevWindowRecord(wn,IVr);
    if (HasLocalization("ARG")) then begin
      arglock = ArgEInvLock(IVr,wn);

      if (arglock!=kArgentinianInvoiceLockNone) then begin
        res = ArgEInvActiveField(IVr,arglock,fieldname,rownr);
        goto LIVDClassActiveEditField;
      end;
    end;
    if (IVr.OKFlag!=0) then begin
      switch (fieldname) begin
        case "Salesmen": 
          if (UserCanAction("AllowSalesmanChange",false)) then begin
            res = true;
          end;
        case "SalesMan": 
          if (UserCanAction("AllowSalesmanChange",false)) then begin
            res = true;
          end;
        case "TaxAuthID": res = HasLocalization("BOL")==false;
        case "PayDate": res = true;
        case "LastRemndr": res = true;
        case "LastRemDate": res = true;
        case "InvComment": res = true;
        case "ReceiptInfo": res = true;
        case "ShipAddr0": res = HasLocalization("PRT")==false;
        case "ShipAddr1": res = HasLocalization("PRT")==false;
        case "ShipAddr2": res = HasLocalization("PRT")==false;
        case "ShipAddr3": res = HasLocalization("PRT")==false;
        case "DelAddr3": res = HasLocalization("PRT")==false;
        case "DelAddr4": res = HasLocalization("PRT")==false;
        case "RecipientGLN": res = HasLocalization("PRT")==false;
        case "VATNr": res = HasLocalization("PRT")==false;
        case "ShipMode": res = HasLocalization("PRT")==false;
        case "ShipDeal": res = HasLocalization("PRT")==false;
        case "ClientContact": res = true;
        case "Addr0": res = HasLocalization("PRT")==false;
        case "Addr1": res = HasLocalization("PRT")==false;
        case "Addr2": res = HasLocalization("PRT")==false;
        case "Addr3": res = HasLocalization("PRT")==false;
        case "InvAddr3": res = HasLocalization("PRT")==false;
        case "InvAddr4": res = HasLocalization("PRT")==false;
        case "LangCode": res = true;
        case "Phone": res = true;
        case "Fax": res = true;
        case "IntCode": res = true;
        case "BankCode": res = true;
        case "Status": res = true;
      end;
    end else begin
      GetWindowRecord(wn,IVr);
      GetPrevWindowRecord(wn,IV2r);
      res = ActiveField(IVr,IV2r,rownr,fieldname,wnst,true);
    end;
  end;
LIVDClassActiveEditField:;
  IVDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean IVDClassPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  record IVVc IV2r;
  string 255 warning;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    GetPrevWindowRecord(wn,IV2r);
    IVVc_PastePrice(IVr,IV2r,rownr,warning);
    PutWindowRecord(wn,IVr);
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    AutomatedSalesOrderly("HasPriceLists+Edit_IVVc");
  end;  
  IVDClassPriceEFAfter = true;
  return;
end;

global
function Boolean IVDClassUnitCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  Boolean chrsum;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    DeselectWindow(wn,false);
    IVVc_PasteUnitCode(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassUnitCodeEFAfter = true;
  return;
end;

global
function Boolean IVDClassUnitFactQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  Boolean chsum;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    DeselectWindow(wn,false);
    chsum = IVVc_PasteUnitFactQuant(IVr,rownr);
    if (chsum) then begin
      IVDchsum(IVr,rownr);
      IVSumup(IVr,true);
    end;    
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassUnitFactQuantEFAfter = true;
  return;
end;

global
function Boolean IVDClassUnitFactPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  Boolean chrsum;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    DeselectWindow(wn,false);
    IVVc_PasteUnitFactPrice(IVr,rownr);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassUnitFactPriceEFAfter = true;
  return;
end;

procedure IVVc_PastePriceFactor(var record IVVc IVp,Integer rownr,var Boolean chsum)
BEGIN  
  row IVVc IVrw;
  
  MatRowGet(IVp,rownr,IVrw);
  switch (IVrw.stp) begin
    case kInvoiceRowTypeNormal:       
      chsum = IVDchrsum(IVp,rownr);
    case kInvoiceRowTypeStructuredItemComponent:       
      chsum = IVDchrsum(IVp,rownr);
    case 11:       
      chsum = IVDchrsum(IVp,rownr);
  end;
  RETURN;
END;

global
function Boolean IVDClassPriceFactorEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  Boolean chsum;

  if (changed!=0) and (rownr>=0) then begin  
    GetWindowRecord(wn,IVr);
    DeselectWindow(wn,false);
    IVVc_PastePriceFactor(IVr,rownr,chsum);
    if (chsum) then begin
      IVDchsum(IVr,rownr);
    end;
    IVSumup(IVr,true);
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassPriceFactorEFAfter = true;
  return;
end;

global
function Boolean IVDClassOrdRowEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  Integer res;
  record IVVc IVr;
  string 255 tstr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    if (IVVc_PasteOrdRow(IVr,rownr,tstr)) then begin
      if (nonblank(tstr)) then begin
        MessageBox(0,tstr);
      end;
      PutWindowRecord(wn,IVr);
    end;
  end;
  IVDClassOrdRowEFAfter = true;
  return;
end;

global
function Boolean IVDClassCredOfficialSerNrEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  Integer res;
  record IVVc IVr;
  string 255 tstr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    if (IVVc_PasteCredOfficialSerNr(IVr,rownr,tstr)) then begin
      if (nonblank(tstr)) then begin
        MessageBox(0,tstr);
      end;
      PutWindowRecord(wn,IVr);
    end;
  end;
  IVDClassCredOfficialSerNrEFAfter = true;
  return;
end;

global
updating function Boolean IVDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
BEGIN
  Boolean res;
  record IVVc IVr;
  row IVVc IVrw;
  record SerBalVc SBr;
  record CashierDefBlock CDb;
  
  res = true;
  if ((WindowState(wn)==2) or (WindowState(wn)==1)) then begin//Rs_update,Rs_insert
    switch (fieldname) begin
      case "ivcashcommand":
        res = IVDClassivcashcommandOnEnterKey(wn,rownr);
      case "PayDeal":
        if (TouchScreenLook) then begin
          GetWindowRecord(wn,IVr);
          if (IVr.InvType==kInvoiceTypeCash or IVr.InvType==kInvoiceTypeCashInvoiceReceiptPRT) then begin
            if (IVr.Sum4>0) then begin
              WindowFieldGoto(wn,IVr,-1,"CashValue",true);
              res = false;
            end;
          end;
        end;
      case "SerialNr":
        if (TouchScreenLook) then begin
          GetWindowRecord(wn,IVr);
          if (rownr>=0) then begin
            MatRowGet(IVr,rownr,IVrw);
            if (SerialNrForOneItem(IVrw.SerialNr,SBr)==false) then begin
              WindowFieldGoto(wn,IVr,rownr,"ArtCode",true);
            end else begin
              BlockLoad(CDb);
              switch (CDb.DefInvoiceField) begin
                case 0:
                  WindowFieldGoto(wn,IVr,rownr+1,"ArtCode",true);
                case 1:
                  WindowFieldGoto(wn,IVr,rownr+1,"ArtCode",true);
                case 2:
                  WindowFieldGoto(wn,IVr,rownr+1,"SerialNr",true);
              end;                
            end;
          end;
        end;
    end;
  end;
  IVDClassOnEnterKey = res;
  RETURN;
END;

global
function Boolean IVDClassGCNrEFAfter(Integer wn,Integer rownr,Integer changed)
begin  
  Integer res;
  record IVVc IVr;
  row IVVc IVrw;
  record IVVc orgIVr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    DeselectWindow(wn,false);
    MatRowGet(IVr,rownr,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeGiftVoucherSold:
        res = IVVc_PasteGiftCertificate(IVr,rownr,13);
        if (res==0) then begin
          PutWindowRecord(wn,IVr);
        end else begin
          if (res==1) then begin
            Beep;
          end else begin
            MessageBox(res,"")
          end;
        end;
      case kInvoiceRowTypeGiftVoucherPayment:
        res = IVVc_PasteGiftCertificate(IVr,rownr,14);
        if (res==0) then begin
          PutWindowRecord(wn,IVr);
        end else begin
          if (res==1) then begin
            Beep;
          end else begin
            MessageBox(res,"")
          end;
        end;
    end;
  end;
  IVDClassGCNrEFAfter = true;
  return;
end;

global
function Boolean IVDClassSpecEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  Integer res;
  record IVVc IVr;
  row IVVc IVrw;
  record OffSerNrIVVc OffSNIVr;

  if (changedf) then begin  
    GetWindowRecord(wn,IVr);
    DeselectWindow(wn,false);
    MatRowGet(IVr,rownr,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeCredit:
        OffSNIVr.OfficialSerNr = IVrw.Spec;
        if (ReadFIrstKey("OfficialSerNr",OffSNIVr,1,true)) then begin
          IVrw.OrdRow = OffSNIVr.IVNr;
          MatRowPut(IVr,rownr,IVrw);
          PutWindowRecord(wn,IVr);
        end;
    end;
  end;
  IVDClassSpecEFAfter = true;
  return;
end;

global
function Boolean IVDClassServiceDelDateEFAfter(Integer wn,Integer changed)
begin  
  record IVVc IVr;
  record OrdSettBlock OSb;
  record AccBlock Accb;

  if (changed!=0) then begin  
    GetWindowRecord(wn,IVr);
    BlockLoad(OSb);
    if (OSb.SetTransDateToServDelDate!=0) then begin
      IVr.TransDate = IVr.ServiceDelDate;
      IVVc_PasteCurncyCode(IVr,IVr.CurncyCode,-1,true,true);
    end;
    BlockLoad(Accb);
    if (Accb.DueDateBasedOnServDelDate!=0) then begin
      IVVc_CalculatePayDate(IVr);
    end;
    PutWindowRecord(wn,IVr);
  end;  
  IVDClassServiceDelDateEFAfter = true;
  return;
end;

global
procedure CalculateIVCashBack(var record IVVc IVr)
BEGIN
  val t;
  row IVVc IVrw;
  Integer i,rwcnt;
  val cash,v,pp;
  record BaseCurBlock bascur;
  Boolean bcurf;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==6) then begin 
      pp = pp + IVrw.Sum;
    end;
    if ((IVrw.stp==14) or (IVrw.stp==16) or (IVrw.stp==kInvoiceRowTypeChequePayment)) then begin
      cash = cash + IVrw.Sum;
    end;
    if (IVrw.stp==15) then begin 
      if (IVrw.CurncyCode!=IVr.CurncyCode) then begin   
        if (IVr.CurncyCode==bascur.BaseCur1) then begin
          cash = cash + MulRateToBase1(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (IVr.CurncyCode==bascur.BaseCur2) then begin
          cash = cash + MulRateToBase2(IVrw.CurncyCode,IVrw.Sum,IVrw.FrRate,IVrw.ToRateB1,IVrw.ToRateB2,IVrw.BaseRate1,IVrw.BaseRate2,DefaultCurRoundOff);
          bcurf = true;
        end;
        if (bcurf==false) then begin
          CurValToOtherCur(IVr.InvDate,IVrw.CurncyCode,IVrw.Sum,IVr.CurncyCode,v,DefaultCurRoundOff);
          cash = cash + v;
        end;
      end else begin
        cash = cash + IVrw.Sum;
      end;
    end;    
  end;  
  IVr.RetnValue = blankval;
//  if (cash!=0) or (pp!=0) then begin
  if (true) then begin
    t = cash + pp;
    IVr.RetnValue = t - IVr.Sum4; 
    IVr.RetValue = t - IVr.Sum4; //2 files for same thing
  end;
  RETURN;
END;

global
procedure AddTAX2Base(Boolean calcperceppercuf,record SMVc SMTax2r,string tax2code,val tax2prc,val tax2reb,val sum,Integer InclVAT,string VATCode)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  val s,t,t1;
  
  if (calcperceppercuf==false) then begin
    rwcnt = MatRowCnt(SMTax2r);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMTax2r,i,SMrw);
      if (SMrw.AccNumber==tax2code) and (SMrw.CurDebVal==tax2prc) then begin
        s = sum;
        if (InclVAT!=0) then begin
          MulVATIV(VATCode,sum,t,t1,InclVAT,0);//jjtax
          s = s - t - t1;
        end;
        SMrw.DebVal = SMrw.DebVal + s;
        MatRowPut(SMTax2r,i,SMrw);
        goto LAddTAX2Base;
      end;
    end;
    if (nonblank(tax2code)) then begin
      ClearRow(SMTax2r,SMrw,1);
      s = sum;
      if (InclVAT!=0) then begin
        MulVATIV(VATCode,sum,t,t1,InclVAT,0);//jjtax
        s = s - t - t1;
      end;
      SMrw.DebVal = s;
      SMrw.CurDebVal = tax2prc;
      SMrw.CurCredVal = tax2reb;
      SMrw.AccNumber = tax2code;
      MatRowPut(SMTax2r,rwcnt,SMrw);
  //StopAlert("tax2code " & tax2code & " tax2prc " & tax2prc & " tax2reb " & tax2reb & " sum " & sum);  
    end;
  end;
LAddTAX2Base:;  
  RETURN;
END;

global
procedure IV2Sumup3(record IVVc IVp,record SMVc VATr,Integer vatcnt,record SMVc SMTax2r,record SMVc RvrsVATr,Boolean rvrsvatcodef,Boolean calcperceppercuf,Integer inclVATCalcRuleSkip,var val s0,var val s1,var val s2,var val s3,var val s4,var val TotGP,var string cashpaymode)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  val t,t1,rowsum,t2,tax1reb,tax1,tmp;
  record Tax1RebVc Tax1Rebr;
  record TaxMatrixVc TMr;

  s0 = blankval;
  s1 = blankval;
  s2 = blankval;
  s3 = blankval;
  s4 = blankval;
  TotGP = IVp.FrGP;
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);    
//    if (IVrw.VATCalcRule==kVATCalcRuleSkip) then begin
    if (VATCalcRule(IVrw.VATCode)==kVATCalcRuleSkip) and (inclVATCalcRuleSkip!=kVATCalcRuleSkip) then begin
      if (IVrw.ovst==0) and ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeInterest) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeRetention) or (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount)) then begin    
        s1 = s1 + IVrw.Sum;
        s2 = s2 + IVrw.Sum;
        s4 = s4 + IVrw.Sum;
      end;
    end else begin
      tax1reb = IVrw.TAX1Reb;
//    tax1reb = 0;
//    Tax1Rebr.Code = IVrw.VATCode;
//    Tax1Rebr.CustCode = IVp.CustCode;
//    if (ReadFirstMain(Tax1Rebr,2,true)) then begin end;
//    if (IVp.TransDate>=Tax1Rebr.From) then begin
//      tax1reb = Tax1Rebr.TAX1Reb;
//    end;
    if ((IVrw.stp==kInvoiceRowTypeGiftVoucherSold)) then begin//or (IVrw.stp==14)
      switch (IVp.InclVAT) begin
        case 0:
          t = FindVAT(IVrw.VATCode,IVrw.Sum,1,0);
          s1 = IVrw.Sum + s1 - t;
          if (t==0) then begin
            s2 = IVrw.Sum + s2;
          end;  
          if (blank(IVrw.RvrsVATCode)) then begin
            AddVATBase(VATr,IVrw.VATCode,IVrw.Sum - t,tax1reb,vatcnt,1,0);
          end;
//          FindTAX2(IVrw.TAX2Prc,IVrw.Sum,1);          
        otherwise
          s4 = IVrw.Sum + s4;
          t = FindVAT(IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
          s3 = s3 + t;
          if (blank(IVrw.RvrsVATCode)) then begin
            AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
          end;
          if (t==0) then begin
            s2 = IVrw.Sum + s2;
            s1 = IVrw.Sum + s1;
          end else begin
            s1 = IVrw.Sum + s1;
          end;
      end;
    end;
    if ((IVrw.stp==kInvoiceRowTypeLoan) or (IVrw.stp==kInvoiceRowTypeLoanInterest)) then begin
      switch (IVp.InclVAT) begin
        case 0:
          s1 = IVrw.Sum + s1;
          t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
          if (t==0) then begin
            s2 = IVrw.Sum + s2;
          end;  
          s3 = t + s3;
          if (blank(IVrw.RvrsVATCode)) then begin
            AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);        
          end;
        otherwise
          s4 = IVrw.Sum + s4;
          t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
          s3 = t + s3;
          if (blank(IVrw.RvrsVATCode)) then begin
            AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
          end;
          if (t==0) then begin
            s2 = IVrw.Sum + s2;
            s1 = IVrw.Sum + s1;
          end else begin
            s1 = IVrw.Sum + s1;
          end;  
      end;
    end;
    
    if ((IVrw.stp==kInvoiceRowTypeDownpayment)) then begin
      switch (IVp.InclVAT) begin/* 0-rndoff 1-sumexvat 2-sumnondtbl 3-vat 4-sumtopay */
        case 0:
          s1 = IVrw.Sum + s1;
          if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
            t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            if (t==0) then begin            
              s2 = IVrw.Sum + s2;
            end;  
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
          end;
        otherwise/* 0-rndoff 1-sumvatdble(incl) 2-sumnondtbl 3-vat 4-sumtopay */
          if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
            s4 = IVrw.Sum + s4;
            t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
            if (t==0) then begin
              s1 = IVrw.Sum + s1;
              s2 = IVrw.Sum + s2;
            end else begin
              s1 = IVrw.Sum + s1;
            end;    
          end else begin
            s4 = IVrw.Sum + s4;
            t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
            s4 = s4 - t;
            if (t==0) then begin
              s1 = IVrw.Sum + s1;
              s2 = IVrw.Sum + s2;
            end else begin
              s1 = IVrw.Sum + s1;
            end;    
          end;
      end;
      if (nonblank(IVrw.RvrsVATCode)) then begin
        if (rvrsvatcodef) then begin
          AddVATBase(RvrsVATr,IVrw.RvrsVATCode,IVrw.Sum,tmp,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        end else begin
          AddVATBase(RvrsVATr,IVrw.VATCode,IVrw.Sum,tmp,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        end;
      end;
    end;
    if (IVp.InvType==kInvoiceTypeCredit or IVp.InvType==kInvoiceTypeCreditSpecialSales) then begin
      if (IVrw.stp==kInvoiceRowTypeCorrection) then begin
        IVrw.rowGP = -IVrw.rowGP;
        IVrw.Sum = -IVrw.Sum;
      end;
    end;
/*
retention change    
    if (IVrw.stp==kInvoiceRowTypeRetention) then begin
      s1 = IVrw.Sum + s1;
      s4 = IVrw.Sum + s4;
    end;    
*/    
    if (IVrw.ovst==0) and (IVrw.stp==kInvoiceRowTypeDownpayment) then begin    
      AddTAX2Base(calcperceppercuf,SMTax2r,IVrw.TAX2Code,IVrw.TAX2Prc,IVrw.TAX2Reb,IVrw.Sum,IVp.InclVAT,IVrw.VATCode);        
    end;
    if (IVrw.stp==kInvoiceRowTypeCashPayment) then begin
      if (HasLocalization("AUS")) then begin
        if (IVrw.Sum>=IVp.Sum4) then begin
          cashpaymode = IVrw.PayMode;
        end;
      end;
    end;

    if (IVrw.ovst==0) and ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) or (IVrw.stp==kInvoiceRowTypeDebtorsTransfer) or (IVrw.stp==kInvoiceRowTypeInterest) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeRetention) or (IVrw.stp==kInvoiceRowTypeMultiBuyDiscount)) then begin    
/*    
    if ((IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeInterest) or (IVrw.stp==kInvoiceRowTypeCorrection) or (IVrw.stp==kInvoiceRowTypeVoid) or (IVrw.stp==kInvoiceRowTypeRetention)) then begin    
      if (IVrw.stp==kInvoiceRowTypeVoid) then begin
        IVrw.Quant = -IVrw.Quant;
        IVrw.Sum = -IVrw.Sum;
      end;
*/      
      AddTAX2Base(calcperceppercuf,SMTax2r,IVrw.TAX2Code,IVrw.TAX2Prc,IVrw.TAX2Reb,IVrw.Sum,IVp.InclVAT,IVrw.VATCode);        
      if (nonblank(IVrw.ArtCode)) then begin
        if (IVrw.stp==kInvoiceRowTypeInterest) then begin
          t = 0;
        end else begin
          t = IVrw.Quant * IVrw.BasePrice;
          if (IVrw.PriceFactor!=0) then begin
            t = t/IVrw.PriceFactor;
          end;
        end;
        t1 = MulRateToBase1(IVp.CurncyCode,IVrw.Sum,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
        UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
        FindSalesExVat(TMr,IVrw.VATCode,t1,IVp.InclVAT,IVp.NoTAXonVAT,rowsum);      
        switch (IVrw.stp) begin
          case kInvoiceRowTypeCorrection:
            IVrw.rowGP = rowsum + t;
          otherwise
            IVrw.rowGP = rowsum - t;
        end;
      end else begin
        IVrw.rowGP = 0;
        IVrw.BasePrice = 0;
      end;
      TotGP = TotGP + IVrw.rowGP;
      switch (IVp.InclVAT) begin/* 0-rndoff 1-sumexvat 2-sumnondtbl 3-vat 4-sumtopay */
        case 0:
          s1 = IVrw.Sum + s1;
          if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
            t = FindVAT(IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            if (t==0) then begin
              s2 = IVrw.Sum + s2;
            end;    
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
          end;
        case 1:/* 0-rndoff 1-sumvatdble(incl) 2-sumnondtbl 3-vat 4-sumtopay */
          if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
            s4 = IVrw.Sum + s4;
            t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
            if (t==0) then begin
              s2 = IVrw.Sum + s2;
              s1 = IVrw.Sum + s1;//otherwise Sub-Total is 0, why do we need s2 at all?
            end else begin
              s1 = IVrw.Sum + s1;
            end;    
          end else begin
            s4 = IVrw.Sum + s4;
            t = FindVAT(IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
            if (t==0) then begin
              s2 = IVrw.Sum + s2;
              s1 = IVrw.Sum + s1;//otherwise Sub-Total is 0
            end else begin
              s1 = IVrw.Sum + s1;
            end;  
          end;
        case 2:/* 0-rndoff 1-sumvatdble(incl) 2-sumnondtbl 3-vat 4-sumtopay */
          if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
            s4 = IVrw.Sum + s4;
            t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
            if (t==0) then begin
              s2 = IVrw.Sum + s2;
              s1 = IVrw.Sum + s1;//otherwise Sub-Total is 0, why do we need s2 at all?
            end else begin
              s1 = IVrw.Sum + s1;
            end;    
          end else begin
            s4 = IVrw.Sum + s4;
            t = FindVAT (IVrw.VATCode,IVrw.Sum,IVp.InclVAT,IVp.NoTAXonVAT);
            s3 = t + s3;
            if (blank(IVrw.RvrsVATCode)) then begin
              AddVATBase(VATr,IVrw.VATCode,IVrw.Sum,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
            end;
            if (t==0) then begin
              s2 = IVrw.Sum + s2;
              s1 = IVrw.Sum + s1;//otherwise Sub-Total is 0
            end else begin
              s1 = IVrw.Sum + s1;
            end;  
          end;
      end;
      if (nonblank(IVrw.RvrsVATCode)) then begin
        if (rvrsvatcodef) then begin
          AddVATBase(RvrsVATr,IVrw.RvrsVATCode,IVrw.Sum,tmp,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        end else begin
          AddVATBase(RvrsVATr,IVrw.VATCode,IVrw.Sum,tmp,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        end;
      end;
    end;
    end;
  end;
/* calculate freight */
/* 0-rndoff 1-sumvatdble(incl) 2-sumnondtbl 3-vat 4-sumtopay */
  if (IVp.FrPrice!=0) then begin
    tax1reb = 0;
    Tax1Rebr.Code = IVp.FrVATCode;
    Tax1Rebr.CustCode = IVp.CustCode;
    if (ReadFirstMain(Tax1Rebr,2,true)) then begin end;
    if (IVp.TransDate>=Tax1Rebr.From) then begin
      tax1reb = Tax1Rebr.TAX1Reb;
    end;
    if (IVp.InclVAT==0) then begin
      s1 = IVp.FrPrice + s1;
      if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
        t = FindVAT (IVp.FrVATCode,IVp.FrPrice,IVp.InclVAT,IVp.NoTAXonVAT);
        if (t==0) then begin
          s2 = IVp.FrPrice + s2;
        end;  
        s3 = t + s3;
        AddVATBase(VATr,IVp.FrVATCode,IVp.FrPrice,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
      end;
    end else begin
      if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
        s4 = IVp.FrPrice + s4;
        t = FindVAT (IVp.FrVATCode,IVp.FrPrice,IVp.InclVAT,IVp.NoTAXonVAT);
        s3 = t + s3;
        AddVATBase(VATr,IVp.FrVATCode,IVp.FrPrice,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        if (t==0) then begin
          s2 = IVp.FrPrice + s2;
        end else begin
          s1 = IVp.FrPrice + s1;
        end;  
      end else begin
        s4 = IVp.FrPrice + s4;      
        t = FindVAT (IVp.FrVATCode,IVp.FrPrice,IVp.InclVAT,IVp.NoTAXonVAT);
        s3 = t + s3;
        AddVATBase(VATr,IVp.FrVATCode,IVp.FrPrice,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        s4 = s4 - t;
        if (t==0) then begin
          s2 = IVp.FrPrice + s2;
        end else begin
          s1 = IVp.FrPrice + s1;
        end;  
      end;
    end;
  end;
  return;
end;

global
procedure IV2Sumup2(record IVVc IVp,record SMVc VATr,Integer vatcnt,record SMVc SMTax2r,Boolean calcperceppercuf,Integer inclVATCalcRuleSkip,var val s0,var val s1,var val s2,var val s3,var val s4,var val TotGP,var string cashpaymode)
begin
  record SMVc RvrsVATr;
  
  IV2Sumup3(IVp,VATr,vatcnt,SMTax2r,RvrsVATr,false,calcperceppercuf,inclVATCalcRuleSkip,s0,s1,s2,s3,s4,TotGP,cashpaymode);
  return;
end;

global
procedure IV2Sumup(record IVVc IVp,record SMVc VATr,Integer vatcnt,record SMVc SMTax2r,Boolean calcperceppercuf,Integer inclVATCalcRuleSkip,var val s0,var val s1,var val s2,var val s3,var val s4,var val TotGP)
begin
  string 255 cashpaymode;

  IV2Sumup2(IVp,VATr,vatcnt,SMTax2r,calcperceppercuf,inclVATCalcRuleSkip,s0,s1,s2,s3,s4,TotGP,cashpaymode);
  return;
end;

procedure AddTax2Row(record SMVc tmpSMTax2r,string tax2code,val sum,val tax2reb)
BEGIN
  row SMVc SMrw;
  Integer i,rwcnt;
  
  rwcnt = MatRowCnt(tmpSMTax2r);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(tmpSMTax2r,i,SMrw);
    if (SMrw.AccNumber==tax2code) then begin
      SMrw.DebVal = SMrw.DebVal + sum;
      MatRowPut(tmpSMTax2r,i,SMrw);
      goto LAddTax2Row;
    end;
  end;
  if (nonblank(tax2code)) then begin
    ClearRow(tmpSMTax2r,SMrw,1);
    SMrw.DebVal = sum;
    SMrw.CurCredVal = tax2reb;
    SMrw.AccNumber = tax2code;
    MatRowPut(tmpSMTax2r,rwcnt,SMrw);
  end;
LAddTax2Row:;  
  RETURN;
END;

global
function val CalcTax2BaseTax2(Boolean calcperceppercuf,record SMVc SMTax2r,Integer InclVAT)
BEGIN
  val res,t;
  row SMVc SMrw;
  Integer i,rwcnt;
  record SMVc tmpSMTax2r;
  record RPTaxVc RPTaxr;
  
  if (calcperceppercuf==false) then begin
    rwcnt = MatRowCnt(SMTax2r);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(SMTax2r,i,SMrw);
      t = (SMrw.DebVal*SMrw.CurDebVal)/100;
      t = Round(t,DefaultRoundMode);
      AddTax2Row(tmpSMTax2r,SMrw.AccNumber,t,SMrw.CurCredVal);
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(tmpSMTax2r,i,SMrw);
      RPTaxr.Code = SMrw.AccNumber;
      if (ReadFirstMain(RPTaxr,1,true)) then begin end;
      t = SMrw.DebVal;
      if (SMrw.CurCredVal!=0) then begin
        t = t - (t*SMrw.CurCredVal)/100;
        t = Round(t,DefaultRoundMode);
      end;
      if (t<RPTaxr.TAXMin) then begin
        t = 0;
      end;
      res = res + t;
    end;
  end;
  CalcTax2BaseTax2 = res;
  RETURN;
END;

procedure RecalculateIVWithholdings(var record IVVc IVp)
begin
  row IVVc IVrw;
  Integer i,rwcnt;
  vector val whsum;
  record ItemSettingBlock ISb;
  record WHITVc WHITr;
  row WHITVc WHITrw;
  record INVc INr;
  Integer wi,wrwcnt;
  val whtotal,basev;

  BlockLoad(ISb);
  if (ISb.Withholdings!=0) then begin
    rwcnt = MatRowCnt(IVp);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      if (IVrw.Withholdings!=0) then begin
        if (ReadFirstItem(IVrw.ArtCode,INr,true,true)) then begin
          if (FindWHITTax(INr.Group,IVp.InvDate,WHITr)) then begin
            wrwcnt = MatRowCnt(WHITr);
            for (wi=0;wi<wrwcnt;wi=wi+1) begin
              MatRowGet(WHITr,wi,WHITrw);
              if (nonblank(WHITrw.TAXBase)) then begin
                PUCalcPerc(IVrw.Sum,WHITrw.TAXBase,basev);
                whsum[WHITrw.WHTax] = whsum[WHITrw.WHTax] + basev;
              end else begin
                whsum[WHITrw.WHTax] = whsum[WHITrw.WHTax] + IVrw.Sum;
              end;
            end;
          end;
        end;
      end;
    end;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVp,i,IVrw);
      switch (IVrw.stp) begin
        case kInvoiceRowTypeWithholdingTax:
          IVrw.Sum = IVrw.TAX2Prc*whsum[IVrw.WHTax];
          IVrw.Sum = IVrw.Sum/100.00;
          whtotal = whtotal + IVrw.Sum;
          MatRowPut(IVp,i,IVrw);
      end;
    end;
    whtotal = Round(whtotal,DefaultRoundMode);
    IVp.Sum4 = IVp.Sum4 - whtotal;
    IVp.BaseSum4 = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  end;
  return;
end;

procedure IVSumup_TaxTemplate(var record IVVc IVp,Boolean roundofvat)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  Integer ti,trwcnt;
  record TaxMatrixVc TMr;
  row TaxMatrixVc TMrw;
  record TaxMatrixVc sumTMr;
  roundmode roundlines,rndtotal,rndvat;
  val t;

  IVp.Sum1 = blankval; //Subtotal
  IVp.Sum3 = blankval; //VAT
  IVp.Sum4 = blankval; //Total
  IVp.TotGP = blankval;
  UnpackFieldMatrix(IVp,"TaxMatrix",sumTMr);
  RecordClear(sumTMr);
  rwcnt = MatRowCnt(IVp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVp,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeDebtorsTransfer:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeInterest:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeRetention:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeMultiBuyDiscount:
        goto LkInvoiceRowTypeNormal;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal:;      
        if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVp.InclVAT);
        end;
        IVp.Sum1 = IVp.Sum1 + IVrw.Sum;
        IVp.TotGP = IVp.TotGP + IVrw.rowGP;
      case kInvoiceRowTypeCorrection:
        if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
          trwcnt = MatRowCnt(TMr);
          for (ti=0;ti<trwcnt;ti=ti+1) begin
            MatRowGet(TMr,ti,TMrw);
            TMrw.BaseSum = -TMrw.BaseSum;
            TMrw.VATSum = -TMrw.VATSum;
            MatRowPut(TMr,ti,TMrw);
          end;
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVp.InclVAT);
        end;
        switch (IVp.InvType) begin
          case kInvoiceTypeCreditSpecialSales: goto LkInvoiceTypeCredit;
          case kInvoiceTypeCredit:
LkInvoiceTypeCredit:;
            IVp.Sum1 = IVp.Sum1 - IVrw.Sum;
            IVp.TotGP = IVp.TotGP - IVrw.rowGP;
          otherwise
            IVp.Sum1 = IVp.Sum1 + IVrw.Sum;
            IVp.TotGP = IVp.TotGP + IVrw.rowGP;
        end;
      case kInvoiceRowTypeGiftVoucherSold:
        if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVp.InclVAT);
        end;
        switch (IVp.InclVAT) begin
          case kBasePriceNotInclVAT:
            IVp.Sum1 = IVp.Sum1 + IVrw.Sum;
            if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
              IVp.Sum1 = IVp.Sum1 - CalculateTotalVATFromTaxMatrix(TMr,IVp.InclVAT);
            end;
          case kBasePriceInclVAT:
            IVp.Sum1 = IVp.Sum1 + IVrw.Sum;
        end;
      case kInvoiceRowTypeDownpayment:
        if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
          UnpackRowFieldMatrix(IVrw,"TaxMatrix",TMr);
          AddRowTaxMatrixToSumTaxMatrix(TMr,sumTMr,IVp.InclVAT);
        end;
        IVp.Sum1 = IVp.Sum1 + IVrw.Sum;      
      
//  kInvoiceRowTypePrepayment = 6,
//  kInvoiceRowTypeLoan = 7,
//  kInvoiceRowTypeLoanInterest = 8,

//  kInvoiceRowTypeGiftVoucherPayment = 14,
//  kInvoiceRowTypeCashPayment = 15,
//  kInvoiceRowTypeCreditCardPayment = 16,

//  kInvoiceRowTypePreviousDownpayment = 20,
//  kInvoiceRowTypeChequePayment = 21,

//  kInvoiceRowTypePerceptionTax = 22, //how to handle Perception Taxes ?
//  kInvoiceRowTypeWithholdingTax = 24  //how to handle Withholding Taxes ?
    end;
  end;
  if (IVp.FrPrice!=0) then begin
    if (IVp.InclVAT==0) then begin
      IVp.Sum1 = IVp.FrPrice + IVp.Sum1;
/*      
      if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
        t = FindVAT (IVp.FrVATCode,IVp.FrPrice,IVp.InclVAT,IVp.NoTAXonVAT);
        if (t==0) then begin
          s2 = IVp.FrPrice + s2;
        end;  
        IVp.Sum3 = t + IVp.Sum3;
        AddVATBase(SMr,IVp.FrVATCode,IVp.FrPrice,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
      end;
*/      
    end else begin
      if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
        IVp.Sum4 = IVp.FrPrice + IVp.Sum4;
/*        
        t = FindVAT (IVp.FrVATCode,IVp.FrPrice,IVp.InclVAT,IVp.NoTAXonVAT);
        IVp.Sum3 = t + IVp.Sum3;
        AddVATBase(SMr,IVp.FrVATCode,IVp.FrPrice,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
*/        
        if (t==0) then begin
          IVp.Sum2 = IVp.FrPrice + IVp.Sum2;
        end else begin
          IVp.Sum1 = IVp.FrPrice + IVp.Sum1;
        end;  
      end else begin
        IVp.Sum4 = IVp.FrPrice + IVp.Sum4;     
/*         
        t = FindVAT (IVp.FrVATCode,IVp.FrPrice,IVp.InclVAT,IVp.NoTAXonVAT);
        IVp.Sum3 = t + IVp.Sum3;
        AddVATBase(SMr,IVp.FrVATCode,IVp.FrPrice,tax1reb,vatcnt,IVp.InclVAT,IVp.NoTAXonVAT);
        IVp.Sum4 = IVp.Sum4 - t;
        if (t==0) then begin
          IVp.Sum2 = IVp.FrPrice + IVp.Sum2;
        end else begin
          IVp.Sum1 = IVp.FrPrice + IVp.Sum1;
        end;  
*/        
      end;
    end;
//Freight VAT needs  to be added as well
  end;

  if ((IVp.ExportFlag==0) or (IVp.ExportFlag==3) or (IVp.ExportFlag==4)) then begin
    IVp.Sum3 = CalculateTotalVATFromTaxMatrix(sumTMr,IVp.InclVAT);
  end;
  if (sumTMr.SerNr<=0) then begin
    sumTMr.SerNr = 1;
  end;    
  PackFieldMatrix(IVp,"TaxMatrix",sumTMr);
  GetCurncyRoundoff(IVp.CurncyCode,IVp.PayDeal,"IVVc",rndtotal,roundlines,rndvat);

/*Rounding should be tested carefully*/

  if (roundofvat) then begin
    IVp.Sum3 = Round(IVp.Sum3,rndvat);
  end;
  IVp.Sum1 = Round(IVp.Sum1,rndtotal);
  switch (IVp.InclVAT) begin
    case kBasePriceNotInclVAT:
      IVp.Sum4 = IVp.Sum1 + IVp.Sum3;
    case kBasePriceInclVATandTAX:
      IVp.Sum4 = IVp.Sum1;
    case kBasePriceInclVAT:
      IVp.Sum4 = IVp.Sum1;
  end;  
  IVp.Sum3 = Round(IVp.Sum3,rndvat);
  IVp.Sum4 = Round(IVp.Sum4,rndtotal);
  IVp.BaseSum4 = MulRateToBase1(IVp.CurncyCode,IVp.Sum4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  IVp.TotGP = Round(IVp.TotGP,rndtotal);
  return;
end;

global
procedure IVSumup(var record IVVc IVp,Boolean roundof)
begin
  record SMVc VATr;/*VATBaseRowType*/
  record SMVc SMTax2r;
  record SMVc RvrsVATr;/*VATBaseRowType*/
  Integer vatcnt;
  record FreightBlock FreightRec;
  val s0,s1,s2,s3,s4,rvrsvat,TotGP;
  val tax1sum,tax2sum,t;
  roundmode roundlines,rndtotal,rndvat;
  string 255 tstr,cashpaymode;
  val FrBase,FrGP,FrPrice;
  val ts3,ttax1sum,tax2base;
  record RPCUTaxVc RPCUTaxr;
  Boolean calcperceppercuf;
  record CUVc CUr;
  
  if (UseTaxTemplatesforTaxCalc) then begin
    IVSumup_TaxTemplate(IVp,roundof);
    goto LIVSumup;
  end;
  CUr.Code = IVp.CustCode;
  ReadFirstMain(CUr,1,true);
  BlockLoad(FreightRec);
  SetupVATBase(RvrsVATr,vatcnt);
  SetupVATBase(VATr,vatcnt);
  s0 = IVp.Sum0;
  s1 = IVp.Sum1;
  s2 = IVp.Sum2;
  s3 = IVp.Sum3;
  s4 = IVp.Sum4;
  tax1sum = IVp.TAX1Sum;
  tax2sum = IVp.TAX2Sum;
  if (HasLocalization("ARG")) then begin
    calcperceppercuf = FindRPCUTax(IVp.CustCode,IVp.InvDate,RPCUTaxr);
  end;
  IV2Sumup3(IVp,VATr,vatcnt,SMTax2r,RvrsVATr,false,calcperceppercuf,0,s0,s1,s2,s3,s4,TotGP,cashpaymode);
  IVp.Sum0 = s0;
  IVp.Sum1 = s1;
  IVp.Sum2 = s2;
  IVp.Sum3 = s3;
  IVp.Sum4 = s4;
  IVp.TotGP = TotGP;
  CalcVATBaseVAT(VATr,IVp.InclVAT,IVp.NoTAXonVAT,vatcnt,s3,tax1sum);  
  CalcVATBaseVAT2(RvrsVATr,IVp.InclVAT,IVp.NoTAXonVAT,vatcnt,CUr.RvrsVAT!=0,rvrsvat,t);  
  if (HasLocalization("ARG")) then begin
    if (IVp.NoTax2==0) then begin
      if (calcperceppercuf) then begin
        tax2sum = IVVc_CalcTax2perCustomer(RPCUTaxr,IVp);  
      end else begin
        tax2sum = CalcTax2BaseTax2(false,SMTax2r,IVp.InclVAT);  
      end;
    end;
  end;
  IVp.TAX1Sum = Round(tax1sum,DefaultRoundMode);
  IVp.TAX2Sum = Round(tax2sum,DefaultRoundMode);  
  if (IVp.TAX1Sum==0) then begin IVp.TAX1Sum = blankval; end;
  if (IVp.TAX2Sum==0) then begin IVp.TAX2Sum = blankval; end;
  if (IVp.NoTax1!=0) then begin IVp.TAX1Sum = blankval; tax1sum = blankval; end;
  if (IVp.NoTax2!=0) then begin IVp.TAX2Sum = blankval; end;
//  SpecialVAT(IVp.PayDeal,s3);
  if (HasLocalization("GBR")) then begin
    SpecialVAT2(IVp.pdvrebt,s3); //this is sick, reducing VAT amount on invoice for settlement discount ??
  end;
//  SpecialVAT2(IVp.pdvrebt,s3);
  if (nonblank(cashpaymode)) then begin
    GetCurncyRoundoff(IVp.CurncyCode,cashpaymode,"IVVc",rndtotal,roundlines,rndvat);
  end else begin
    GetCurncyRoundoff(IVp.CurncyCode,IVp.PayDeal,"IVVc",rndtotal,roundlines,rndvat);
  end;
  if (roundof) then begin
    s3 = Round(s3,rndvat);
  end;

  switch (IVp.InclVAT) begin
    case 1:
      switch (IVp.NoTAXonVAT) begin
        case 0:
          t = s4;
          s4 = s4 + tax2sum;
          s4 = Round(s4,rndtotal);
          t = s4 - t;
          IVp.Sum0 = t + IVp.Sum0;
        case 1:
          t = s4;
          s4 = s4 + tax2sum;
          if (IVp.TotalwoTAX!=0) then begin
            s4 = s4 - tax1sum;
          end;
          s4 = Round(s4,rndtotal);
          t = s4 - t;
          IVp.Sum0 = t + IVp.Sum0;
        case 2:
          t = s4;
          s4 = tax2sum + s4;
          if (IVp.TotalwoTAX!=0) then begin
            s4 = s4 - tax1sum;
          end;
          s4 = Round(s4,rndtotal);
          t = s4 - t;
          IVp.Sum0 = t + IVp.Sum0;
      end;
    case 2:
      switch (IVp.NoTAXonVAT) begin
        case 2:
          if (IVp.TotalwoTAX==0) then begin
            s4 = tax1sum + s4;
          end;
          CalcVATBaseVAT(VATr,IVp.InclVAT,1,vatcnt,ts3,ttax1sum);  
//not working when per row          
          s4 = s4 + s3-ts3;
          s4 = tax2sum + s4;
          t = s4;
          s4 = Round(s4,rndtotal);
          t = s4 - t;
          IVp.Sum0 = t + IVp.Sum0;
        otherwise
          if (IVp.TotalwoTAX==0) then begin
            s4 = tax1sum + s4;
          end;
          s4 = tax2sum + s4;
          t = s4;
          s4 = Round(s4,rndtotal);
          t = s4 - t;
          IVp.Sum0 = t + IVp.Sum0;
      end;
    otherwise
      switch (IVp.NoTAXonVAT) begin
        otherwise
          s4 = s1 + s3;
          if (IVp.TotalwoTAX==0) then begin
            s4 = tax1sum + s4;
          end;
          s4 = tax2sum + s4;
          t = s4;
          s4 = Round(t,rndtotal);
          t = s4 - t;
          IVp.Sum0 = t + IVp.Sum0;
      end;
  end;
    IVp.Sum0 = Round(IVp.Sum0,DefaultRoundMode);
  if (IVp.DiscPerc!=0) then begin
//    tstr = IVp.DiscPerc;
    MulM4ProcVal(IVp.DiscPerc,IVp.Sum1,t);
    IVp.DiscSum = t;
  end; 
  s1 = Round(s1,DefaultRoundMode);
  s2 = Round(s2,DefaultRoundMode);
  IVp.DiscSum = Round(IVp.DiscSum,DefaultRoundMode);  
  IVp.BaseSum4 = MulRateToBase1(IVp.CurncyCode,s4,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  if (FreightRec.UseWeight!=0) then begin
    InvoiceCalculateFreightWeight(IVp,FrBase,FrGP,FrPrice);
    IVp.FrBase = FrBase;
    IVp.FrGP = FrGP;
    IVp.FrPrice = FrPrice;
  end;  
  IVp.Sum1 = s1;
  IVp.Sum2 = s2;
  IVp.Sum3 = s3;
  IVp.Sum4 = s4;
  IVp.RvrsVAT = rvrsvat;
  RecalculateIVWithholdings(IVp);
LIVSumup:;  
  IVp.SumIncCom = IVp.Sum4 + IVp.Commision;
  CalculateIVCashBack(IVp);
  s1 = MulRateToBase1(IVp.CurncyCode,IVp.Sum1,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  s3 = MulRateToBase1(IVp.CurncyCode,IVp.Sum3,IVp.FrRate,IVp.ToRateB1,IVp.ToRateB2,IVp.BaseRate1,IVp.BaseRate2,DefaultCurRoundOff);
  if (IVp.InclVAT==0) then begin
    t = IVp.TotGP/s1;
  end else begin
    t = s1-s3;
    if (t!=0) then begin
      t = IVp.TotGP/t;
    end;
  end; 
  IVp.GPProc = t*100;
  RecalcIVSubtotal(IVp);
  CalculateIVVcPoints(IVp);
  return;
end;

