remote function Boolean FindWHVETax(string,Date,var record WHVEVc);
remote function Boolean FindRPCUTax(string,Date,var record RPCUTaxVc);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
remote function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
remote function Boolean IVCashVc_PasteCustCode(var record IVCashVc,string,string,string,var Integer,var string);
remote updating function Boolean AddContactCUDsmRemote(record CUVc,string);
external procedure SetupCustPS2Rn(string,var record RcVc);
external function Integer GetInternetEnablerCountry();
external function Boolean OpenContactRecord(string,string);

global
procedure OpenAddressLookupHelper(Integer wn)
begin
  Integer nwn;
  record RcVc RepSpec;
  record CustomerSettingBlock CSb;
  boolean res;
  integer regincountry;
  
  BlockLoad(CSb);
  
  if (CSb.DontUseAddrLookup==0) then begin
    if (HasLocalization("EST,GBR,LVA")) then begin
      res = true;
    end else begin
      res = false;
    end;
    if (res) then begin
      RecordNew(RepSpec);
      nwn = OpenWindow("NewCUHelperWClass",1,0,"","",RepSpec);
      RepSpec.ArtMode = wn;
      PutWindowRecord(nwn,RepSpec);
      SelectButton(nwn,"LookupNewCUAddressDsm");
    end;
  end;
  return;
end;

global
procedure CUUpdateAddressHelperDsm()
begin
  OpenAddressLookupHelper(CurWindow);
  return;
end;

global
procedure CUDClassCommandNew(Integer wn)
begin
  PutWindowString(wn,"__helperalreadyshown","0");
  return;
end;

global
procedure SkipNewCUAddressDsm()
begin
  CloseWindow(CurWindow);
  return;
end;

global 
function boolean CUDClassBeforeEditField(integer wn,string fieldname,integer fn,integer rownr)
begin
  if (fieldname=="Code" and WindowState(wn)==Rs_insert) then begin
    if (GetWindowString(wn,"__helperalreadyshown")!="1") then begin
      PutWindowString(wn,"__helperalreadyshown","1");
      OpenAddressLookupHelper(wn);
    end;
  end;
  return;
end;

global
procedure Routines()
begin
  Record RcVc RepSpec;
  Integer nwn;
  
  RecordNew(RepSpec);
  nwn = OpenWindow("RoutinesWClass",1,0,"","",RepSpec);
  return;
end;

global
procedure CreditInfoCUDsm()
begin
  record RcVc RepSpec;
  record CUVc CUr;
  
  GetWindowRecord(CurWindow,CUr);
  if (nonblank(CUr.Code)) then begin
    ReportDefaults(RepSpec,"KrediidiinfoRClass");
    RepSpec.repname = "KrediidiinfoRn";
    RepSpec.Media = mtScreen;
    RepSpec.f1 = CUr.Code;
    RepSpec.flags[0] = CUr.CustType;
    RunReport(RepSpec,0);
  end;
  return;
end;

global
procedure ImportAddressbooksm()
begin
  ImportAddressbook;
  return;
end;

global
procedure CallHistoryCUDsm()
begin 
  Record RcVc RepSpec;
  record CustPSVc CuPSr;
  Record CUVc CUr;
  Date d,td;
  
  GetWindowrecord(CurWindow,CUr);
  CuPSr.Signature = CurrentUser;
  if (ReadFirstMain(CuPSr,1,true)) then begin
    SetupCustPS2Rn(CUr.Code,RepSpec);
  end else begin
    ReportDefaults(RepSpec,"CallHistRClass");
    d = CurrentDate;
    if (blankdate(RepSpec.sStartDate)) then begin
      td.year = d.year;
      td.month = 1;
      td.day = 1;
      RepSpec.sStartDate = td;
    end;
    if (blankdate(RepSpec.sEndDate)) then begin
      td.year = d.year;
      td.month = 12;
      td.day = 31;
      RepSpec.sEndDate = td;
    end;  
    RepSpec.Media = mtScreen;
    RepSpec.repname = "CallHistRn";
    RepSpec.f1 = CUr.Code;
  end;
  RunReport(RepSpec,0);
  return; 
end;

global
updating procedure AddContactCUDsm()
begin
  record CUVc CUr;
  record CUVc ContactCUr;
  record ContactRelVc ContactRelr;
  Integer wn,nwn;
  string 200 tstr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  nwn = OpenWindow("AddContactCUDClass",1,wn,"","",RepSpec);  
  return;
end;

global
updating function Boolean AddContactCUDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  Integer nwn;
  record CUVc CUr;
  
  GetWindowRecord(wn,RepSpec);
  nwn = MotherWindow(wn);
  GetWindowRecord(nwn,CUr);
  if (AddContactCUDsmRemote(CUr,RepSpec.f1)) then begin
    UpdateBrowses("CUVc");
    UpdateBrowses("ContactRelVc");
  end;
  CloseWindow(wn);
  AddContactCUDClassOnOKWindow = false;
  return;
end;

global
updating procedure AddContactCUDClassSave()
begin
  DeselectWindow(CurWindow,false);
  AddContactCUDClassOnOKWindow(CurWindow);
  return;
end;

global
procedure AddContactCUDClassCancel()
begin
  CloseWindow(CurWindow);
  return;
end;

global
procedure CUNPTSSClassNewCustomer()
begin
  Integer wn,mwn,nwn;
  record CUVc CUr;
  
  if (UserCanAction("AllowNewCustomerfromNPTS",true)) then begin
    wn = CurWindow;
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    RecordNew(CUr);
    nwn = OpenWindow("CUNPTDSClass",1,mwn,"","",CUr);
    SetWindowState(nwn,Rs_insert);
    WindowFieldGoto(nwn,CUr,-1,"Name",true);
  end else begin
    MessageBox(1274,StringFromStringSet(3,"AllowNewCustomerfromNPTS"));
  end;
  
  return;
end;

global
procedure CUNPTS2SClassNewCustomer()
begin
  Integer wn,mwn,nwn;
  record CUVc CUr;
  
  if (UserCanAction("AllowNewCustomerfromNPTS",true)) then begin
    wn = CurWindow;
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    RecordNew(CUr);
    nwn = OpenWindow("CUNPTDSClass",1,mwn,"","",CUr);
    WindowFieldGoto(nwn,CUr,-1,"Name",true);
  end else begin
    MessageBox(1274,StringFromStringSet(3,"AllowNewCustomerfromNPTS"));
  end;
  
  return;
end;

global
function Boolean CUNPTDSClassOnClose(Integer wn,Integer wn2)
begin
  Integer mwn;
  record CUVc CUr;
  record IVCashVc IVCashr;
  record IVCashVc IVCash2r;
  record IVVc IVr;
  record IVVc IV2r;
  record LocalMachineBlock LMb;
  Integer err;
  string 255 warning,tstr;
  string 255 errstr,prepstr,invdatewarn,transdatewarn;
  record RcVc RepSpec;
  Boolean res;

  GetWindowRecord(wn,CUr);
  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      GetWindowRecord(mwn,IVCashr);
      if (IVCashr.OKFlag==0) and (IVCashr.Invalid==0) then begin
        BlockLoad(LMb);
        GetPrevWindowRecord(mwn,IVCash2r);
        IVCash2r.CustCode = IVCashr.CustCode;
        IVCashr.CustCode = CUr.Code;
        if (IVCashVc_PasteCustCode(IVCashr,IVCash2r.CustCode,LMb.DefLocation,LMb.PLCode,err,warning)) then begin
          if (nonblank(warning)) then begin
            MessageBox(0,warning);
          end;
          if (err!=0) then begin
            MessageBox(0,err);
          end;
        end;
        PutWindowRecord(mwn,IVCashr);
        PutWindowString(mwn,"ivcashcommand","");
        ReRunWindowDef(mwn);
        IVCashDClass_RefreshStringList(mwn,IVCashr);
        WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
        res = false;
      end;
    case "IVDClass":
      GetWindowRecord(mwn,IVr);
      if (IVr.OKFlag==0) and (IVr.Invalid==0) then begin
        BlockLoad(LMb);
        GetPrevWindowRecord(mwn,IV2r);
        IV2r.CustCode = IVr.CustCode;
        IVr.CustCode = CUr.Code;
        if (PasteCust2InInv(IVr,LMb,IV2r.CustCode,false,warning,errstr,prepstr,invdatewarn,transdatewarn)) then begin
          if (nonblank(warning)) then begin
            MessageBox(0,warning);
          end;
          if (err!=0) then begin
            MessageBox(0,err);
          end;
        end;
        PutWindowRecord(mwn,IVr);
        ReRunWindowDef(mwn);
      end;
    case "ChangeAddressNPTSIVCashSClass":
      GetWindowRecord(mwn,RepSpec);
      RepSpec.f6 = CUr.Name;
      RepSpec.f1 = CUr.InvAddr0;
      RepSpec.f2 = CUr.InvAddr1;
      RepSpec.f3 = CUr.InvAddr3;
      RepSpec.f4 = CUr.InvAddr4;
//          RepSpec.f5 = CUr.InvAddr5;
      RepSpec.f11 = CUr.RegNr1;
      RepSpec.f11 = CUr.RegNr2;
      RepSpec.f12 = CUr.VATNr;
      PutWindowRecord(mwn,RepSpec);
  end;
  CUNPTDSClassOnClose = res;
  return;
end;

global
function Boolean CUDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record CUVc CUr;
  
  GetWindowRecord(wn,CUr);  
  switch (fieldname) begin
    case "Person":
      res = OpenContactRecord(CUr.Person,CUr.Code);
  end;
  CUDClassOpenRecord = res;
  return;
end;

global
function Boolean CUDClassRvrsVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = UserCanAction("QualifyCUForRvrsVAT",true);
  CUDClassRvrsVATButtonAction = res;
  return;
end;

global
procedure RPCUTaxDsm()
begin
  record RPCUTaxVc RPCUTr;
  record CUVc CUr;
  Integer wn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  if (CUr.CUType!=0) then begin
//    if (FindRPCUTax(CUr.Code,CurrentDate,RPCUTr)) then begin
    RPCUTr.CustCode = CUr.Code;
    if (ReadLastKey("CustCode",RPCUTr,1,true)) then begin
      OpenWindow("RPCUTaxDClass",1,0,"","",RPCUTr);
    end else begin
      MessageBox(20077,"");
    end;
  end else begin
    MessageBox(20077,"");
  end;
  return;
end;

global
procedure WHVEDsm()
begin
  record WHVEVc WHVEr;
  record CUVc CUr;
  Integer wn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,CUr);
  if (CUr.VEType!=0) then begin
//    if (FindWHVETax(CUr.Code,CurrentDate,WHVEr)) then begin
    WHVEr.VECode = CUr.Code;
    if (ReadLastKey("VECode",WHVEr,1,true)) then begin
      OpenWindow("WHVEDClass",1,0,"","",WHVEr);
    end else begin
      MessageBox(22028,"");
    end;
  end else begin
      MessageBox(22028,"");
  end;
  return;
end;
