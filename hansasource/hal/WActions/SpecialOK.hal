remote procedure RemoteFindAndFillMaskVAR(string,var string,var string,var Array string,var Array string);
external procedure RemoveInvalidVARItemsIVCashDClass(integer);
external procedure RemoveInvalidVARItemsNPTSIVCashDClass(integer);
remote function Boolean GetFirstItem(var string,var record INVc);
external function boolean UpdateExistingVarietyRowsf();
external function Boolean FindStringInString(string,string);
external function Integer CntVarietyTheCodes(Integer,var Array string);
external procedure IVDClass_RefreshStringList(Integer,record IVVc);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
external function string 255 FindPOSCommandText(Integer);
external procedure IVCashDClass_RefreshStringList(Integer,record IVCashVc);
external procedure FindMotherWindowLocation(Integer,var string,var Date);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
remote procedure PasteRowsToRecRemote(var record RecVc,var Integer,string,array string,array val,Integer);
remote procedure PasteRowsToProdOperationRemote(var record ProdOperationVc,var Integer,string,array string,array val,Integer);
remote procedure PasteRowsToProdRemote(var record ProdVc,var Integer,string,array string,array val,Integer);
remote procedure PasteRowsToSRRemote(var record SDVc,var Integer,array string,array val,Integer);
remote procedure PasteRowsToSDRemote(var record SDVc,var Integer,array string,array val,Integer);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure SplitVars(string,Array string,Array string,Array string);
remote procedure FillMaskVAR(string,string,string,Array string,Array string);
remote function Boolean FindItemVAR2(string,var string,var string,var string);
remote function Boolean MATVARINSClassOnOKWindowPaste(var string,var string,var string,var string,var string,
                 var Array string,var Array string,var Array string,var Array string,
                 var Array string,var Array string);
remote procedure PasteRowsToPOQTRemote(var record POQTVc,var Integer,array string,array val,Integer);
remote procedure PasteRowsToIntORRemote(var record IntORVc,var Integer,array string,array val,Integer);
remote procedure PasteRowsToPORemote(var record POVc,var Integer,array string,array val,Integer);
remote procedure PasteRowsToPURemote(var record PUVc,var Integer,array string,array val,Integer);
remote procedure PasteRowsToQTRemote(var record QTVc,var Integer,array string,array val,Integer);
remote procedure PasteRowsToORRemote(var record ORVc,var Integer,array string,array val,Integer);
remote procedure PasteRowsToIVCashRemote2(var record IVCashVc,var Integer,array string,array val,Integer,var Integer);
remote procedure PasteRowsToIVRemote(var record IVVc,var Integer,array string,array val,Integer,Boolean);
remote procedure PasteRowsToStockMovRemote(var record StockMovVc,var Integer,array string,array val,Integer,var array string);
remote procedure PasteRowsToStockTakeRemote(var record StockTakeVc,var Integer,array string,array val,Integer);
external function Boolean TouchScreenLook();
remote function Boolean FindItemVAR(string,var string,var string,var string,var string);
external procedure StripEndingSpaces(var string);
external procedure DisplayStrArray(array string);

global
procedure PasteFromWn(Integer wn,string paststr)
begin
  Integer mwn;
  
  mwn = MotherWindow(wn);
  CloseWindow(wn);
  if (mwn!=0) then begin
    PasteString(mwn,paststr);
    if (GetWindowFileName(mwn)=="RestAccVc") begin
      record RestAccVc RestAccr;
      
      switch (WindowActiveField(mwn)) begin
        case "PayDeal2":
          WindowFieldGoto(mwn,RestAccr,-1,"Paid",true);
        case "PayDeal3":
          WindowFieldGoto(mwn,RestAccr,-1,"Paid2",true);
        case "PayDeal4":
          WindowFieldGoto(mwn,RestAccr,-1,"Paid3",true);
        case "GuestCode":
          WindowFieldGoto(mwn,RestAccr,-1,"GuestName",true);
      end;
    end;
  end;
  return;
end;

global
function string 255 StringFromSysList(Integer wn,Integer cutlen)
begin
  string 255 tstr;
  Integer Sel;
  Integer i,slen;
  
  tstr = "";
  Sel = SelectedListLine(wn);
  if (Sel>-1) then begin
    tstr = GetListString(wn,Sel);
    slen = len(tstr);
    if (cutlen==-2) then begin
        for (i=1;i<slen;i=i+1) begin
          if (Mid(tstr,i,1)==" ") then begin
            goto L20StringFromSysList;
          end;
        end;
L20StringFromSysList:;
        if (slen>1) then begin
          tstr = Left(tstr,i);
        end;
    end;
    if (cutlen>0) then begin
      tstr = Left(tstr,cutlen);
    end;
    if (cutlen>=0) then begin
      StripEndingSpaces(tstr);
    end;
  end;
  StringFromSysList = tstr;
  return;
end;


global
procedure PasteFromSysList2(Integer wn,Integer cutlen)
begin
  Integer Sel;

  Sel = SelectedListLine(wn);
  if (Sel>-1) then begin
      PasteFromWn(wn,GetListTag(wn,Sel));
  end else begin
    CloseWindow(wn);
  end;
  return;
end;

global
procedure PasteFromSysList(Integer wn,Integer cutlen)
begin
  Integer Sel;

  Sel = SelectedListLine(wn);
  if (Sel>-1) then begin
    PasteFromWn(wn,StringFromSysList(wn,cutlen));
  end else begin
    CloseWindow(wn);
  end;
  return;
end;

global
procedure PasteTagFromSysList(Integer wn)
begin
  PasteFromWn(wn,GetListTag(wn,SelectedListLine(wn)));
  return;
end;

procedure PasteFromVARINS(Integer wn,Integer cutlen)
begin
  string 255 tstr,tstr2;
  string 60 sepstr,msk;
  record RcVc RepSpec;
  Integer mwn;
  record MinPerLocVc MPLr;
  record BarcodeVc Barcoder;
  record PIVc PIr;
  record PLVc PLr;
  record INVc INr;
  Boolean pastedfromwnf,testvarf,firstf;
  Array string 20 maskvar;
  Array string 2 maskvarsz;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  tstr = RepSpec.AccStr;
  
  RemoteFindAndFillMaskVAR(tstr,sepstr,msk,maskvar,maskvarsz);

  if (StringToInt(sepstr)>0) then begin
    sepstr = "";
  end else begin
    sepstr = ".";
  end; 
  tstr = tstr &  sepstr;
  if (nonblank(RepSpec.f1)) then begin
    tstr2 = "";
    if (nonblank((maskvar[1]))) then begin
      if (maskvarsz[1]==".") then begin
        tstr2 = maskvarsz[1];
      end;
      tstr = tstr & RepSpec.f1 & tstr2;
    end; 
  end;
  if (nonblank(RepSpec.f2)) then begin
    tstr2 = "";
    if (nonblank((maskvar[2]))) then begin
      if (maskvarsz[2]==".") then begin
        tstr2 = maskvarsz[2];
      end;
      tstr = tstr & RepSpec.f2 & tstr2;
    end; 
  end;
  if (nonblank(RepSpec.f3)) then begin
    tstr2 = "";
    if (nonblank((maskvar[3]))) then begin
      if (maskvarsz[3]==".") then begin
        tstr2 = maskvarsz[3];
      end;
      tstr = tstr & RepSpec.f3 & tstr2;
    end;
  end;
  if (nonblank(RepSpec.f4)) then begin
    tstr2 = "";
    if (nonblank((maskvar[4]))) then begin
      if (maskvarsz[4]==".") then begin
        tstr2 = maskvarsz[4];
      end;
      tstr = tstr & RepSpec.f4 & tstr2;
    end;
  end;
  if (nonblank(RepSpec.f5)) then begin
    tstr2 = "";
    if (nonblank((maskvar[5]))) then begin
      if (maskvarsz[5]==".") then begin
        if (nonblank(tstr)) then begin
          tstr2 = maskvarsz[5] & tstr;
        end;
      end;
      tstr = tstr & RepSpec.f5 & tstr2;
    end;
  end;
  if (Right(tstr,1)==".") then begin 
    tstr = Left(tstr,len(tstr)-1);
  end;
  mwn = MotherWindow(wn);  
  if (mwn>=0) then begin
    if (GetWindowClass(mwn)=="PLDClass") then begin 
      CloseWindow(wn);
      DeselectWindow(mwn,false);
      GetWindowRecord(mwn,PLr);
      PLr.ArtCode = tstr;
      if (ReadFirstItem(PLr.ArtCode,INr,true,true)) then begin
         PLr.Comment = INr.Name;   
      end;   
      PutWindowRecord(mwn,PLr);
      WindowFieldGoto(mwn,PLr,-1,"PLCode",true);
      pastedfromwnf = true;
    end;

    if (GetWindowClass(mwn)=="MinPerLocDClass") then begin 
      CloseWindow(wn);
      DeselectWindow(mwn,false);
      GetWindowRecord(mwn,MPLr);
      MPLr.ItemCode = tstr;
      PutWindowRecord(mwn,MPLr);
      WindowFieldGoto(mwn,MPLr,-1,"Location",true);
      pastedfromwnf = true;
    end;
    if (GetWindowClass(mwn)=="BarcodeDClass") then begin
      CloseWindow(wn);
      DeselectWindow(mwn,false);
      GetWindowRecord(mwn,Barcoder);
      Barcoder.Itemcode = tstr;
      if (ReadFirstItem(Barcoder.Itemcode,INr,true,true)) then begin
         Barcoder.Comment = INr.Name;   
      end;   
      PutWindowRecord(mwn,Barcoder);
      pastedfromwnf = true;
    end;
    if (GetWindowClass(mwn)=="PIDClass") then begin
      CloseWindow(wn);
      DeselectWindow(mwn,false);
      GetWindowRecord(mwn,PIr);
      PIr.ItemCode = tstr;
      if (ReadFirstItem(PIr.ItemCode,INr,true,true)) then begin
         PIr.Comment = INr.Name;   
      end;   
      PutWindowRecord(mwn,PIr);
      pastedfromwnf = true;
    end;
  end;
  if (pastedfromwnf==false) then begin
    PasteFromWn(wn,tstr);
  end;
  return;
end;

global
function Boolean VARsubSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  VARsubSClassOnOKWindow = false;
  return;
end;

global
function Boolean EducationDegreesSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  EducationDegreesSClassOnOKWindow = false;
  return;
end;

/*
global
function Boolean LeaveSchemeSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  LeaveSchemeSClassOnOKWindow = false;
  return;
end;
*/

global
function Boolean HealthStatusSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  HealthStatusSClassOnOKWindow = false;
  return;
end;

global
function Boolean EthnicitySClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  EthnicitySClassOnOKWindow = false;
  return;
end;

global
function Boolean JobDescSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  JobDescSClassOnOKWindow = false;
  return;
end;

global
function Boolean LoanStatusSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  LoanStatusSClassOnOKWindow = false;
  return;
end;

global
function Boolean LoanSuccessSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  LoanSuccessSClassOnOKWindow = false;
  return;
end;

global
function Boolean ResUserSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  ResUserSClassOnOKWindow = false;
  return;
end;

global
function Boolean ContactSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  
  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "EmailRecipVc": PasteFromSysList2(wn,20);
    otherwise
      PasteFromSysList2(wn,60);
  end;
  ContactSClassOnOKWindow = false;
  return;
end;

global
function Boolean RepGenSetNameSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,60);
  RepGenSetNameSClassOnOKWindow = false;
  return;
end;

global
function Boolean DelAddrSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,20);
  DelAddrSClassOnOKWindow = false;
  return;
end;

global
function Boolean StrSetSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  StrSetSClassOnOKWindow = false;
  return;
end;

global
function Boolean RegisterSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  RegisterSClassOnOKWindow = false;
  return;
end;

global
function Boolean BlockSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  BlockSClassOnOKWindow = false;
  return;
end;

global
function Boolean SetSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  SetSClassOnOKWindow = false;
  return;
end;

global
function Boolean FieldSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  FieldSClassOnOKWindow = false;
  return;
end;

global
function Boolean SortBySClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  SortBySClassOnOKWindow = false;
  return;
end;

global
function Boolean IndexSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,0);
  IndexSClassOnOKWindow = false;
  return;
end;

global
procedure SwitchToIndexS()
BEGIN
  Integer wn,mwn,wn2;
  record CUVc CUr; //??
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  CloseWindow(wn);      
  wn2 = OpenWindow("IndexSClass",0,mwn,"","",CUr);
  RETURN;
END;

global
procedure SwitchToSortByS()
BEGIN
  Integer wn,mwn,wn2;
  record CUVc CUr; //??
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  CloseWindow(wn);      
  wn2 = OpenWindow("SortBySClass",0,mwn,"","",CUr);
  RETURN;
END;

global
function Boolean SerialNrSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  Integer line;
  string 255 tstr;
  record IVCashVc IVCashr;
  longint pos;
  string 255 tstrserial;

  mwn = MotherWindow(wn);
  switch (GetWindowClass(mwn)) begin
    case "NPTSIVCashDClass":
      tstr = StringFromSysList(wn,200);
      tstr = FindPOSCommandText(kPOSCommandsTypeSerialNr) & tstr;
      DeselectWindow(mwn,false);
      PutWindowString(mwn,"ivcashcommand",tstr);
      CloseWindow(wn);
      //WindowFieldGoto(mwn,IVCashr,-1,"ivcashcommand",true);
      WindowFieldGotoForTouchScreen(mwn,-1,"ivcashcommand",false);
      KeyPadEnter(mwn);
    otherwise
      tstr = StringFromSysList(wn,200);
      pos = 0;
      GetNextSubstring(tstr,pos," ",tstrserial);
      PasteFromSysList(wn,len(tstrserial));
  end;
  SerialNrSClassOnOKWindow = false;
  return;
end;

global
function Boolean SerialNr2SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,30);
  SerialNr2SClassOnOKWindow = false;
  return;
end;

global
function Boolean InventoryNrSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,30);
  InventoryNrSClassOnOKWindow = false;
  return;
end;

global
function Boolean ACSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  ACSClassOnOKWindow = false;
  return;
end;

global
function Boolean AC2SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  AC2SClassOnOKWindow = false;
  return;
end;

global
function Boolean PRClassSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  PRClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean QuoteClassSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  QuoteClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean BudgetClassSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  BudgetClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean ContractClassSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  ContractClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean LangSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  LangSClassOnOKWindow = false;
  return;
end;

global
function Boolean MachineGroupsSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  MachineGroupsSClassOnOKWindow = false;
  return;
end;

global
function Boolean LocalMachineGroupsSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  LocalMachineGroupsSClassOnOKWindow = false;
  return;
end;

global
function Boolean TSerSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,10);
  TSerSClassOnOKWindow = false;
  return;
end;

global
function Boolean ShortSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  ShortSClassOnOKWindow = false;
  return;
end;

global
function Boolean PerSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  PerSClassOnOKWindow = false;
  return;
end;

global
function Boolean PDMSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,2);
  PDMSClassOnOKWindow = false;
  return;
end;

global
function Boolean LegalInvNrSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  LegalInvNrSClassOnOKWindow = false;
  return;
end;

global
function Boolean LegalInvNr2SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  LegalInvNr2SClassOnOKWindow = false;
  return;
end;

global
function Boolean LegalCLInNrSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  LegalCLInNrSClassOnOKWindow = false;
  return;
end;

global
function Boolean PMSClassOnOKWindow(Integer wn)
begin
//  PasteFromSysList(wn,2);
  PasteFromWn(wn,GetListTag(wn,SelectedListLine(wn)));
  PMSClassOnOKWindow = false;
  return;
end;

global
function Boolean PMBSClassOnOKWindow(Integer wn)
begin
//  PasteFromSysList(wn,2);
  PasteFromWn(wn,GetListTag(wn,SelectedListLine(wn)));
  PMBSClassOnOKWindow = false;
  return;
end;

global
function Boolean WHTaxSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,2);
  WHTaxSClassOnOKWindow = false;
  return;
end;

global
function Boolean RestPMSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,2);
  RestPMSClassOnOKWindow = false;
  return;
end;

global
function Boolean UnoccupTableSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  UnoccupTableSClassOnOKWindow = false;
  return;
end;

global
function Boolean EmplClassSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,5);
  EmplClassSClassOnOKWindow = false;
  return;
end;

global
function Boolean PrintGroupSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  PrintGroupSClassOnOKWindow = false;
  return;
end;

global
function Boolean VCSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,1);
  VCSClassOnOKWindow = false;
  return;
end;

global
function Boolean FontNameSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  FontNameSClassOnOKWindow = false;
  return;
end;

global
function Boolean FontNameUxSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  FontNameUxSClassOnOKWindow = false;
  return;
end;

global
function Boolean VATCodeSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  VATCodeSClassOnOKWindow = false;
  return;
end;

global
function Boolean VATVITypeSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  VATVITypeSClassOnOKWindow = false;
  return;
end;

global
function Boolean VATIVTypeSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  VATIVTypeSClassOnOKWindow = false;
  return;
end;

global
function Boolean TXServiceSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  TXServiceSClassOnOKWindow = false;
  return;
end;

global
function Boolean CalDispGroupSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  CalDispGroupSClassOnOKWindow = false;
  return;
end;

global
function Boolean DayShiftSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  DayShiftSClassOnOKWindow = false;
  return;
end;

global
function Boolean CustomDeclKeySClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,2);
  CustomDeclKeySClassOnOKWindow = false;
  return;
end;

global
function Boolean RegDefSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  RegDefSClassOnOKWindow = false;
  return;
end;

global
function Boolean FontNameMacSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  FontNameMacSClassOnOKWindow = false;
  return;
end;

global
function Boolean PortNameSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  PortNameSClassOnOKWindow = false;
  return;
end;

global
function Boolean FontNameWinSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  FontNameWinSClassOnOKWindow = false;
  return;
end;

global
function Boolean IDTSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  IDTSClassOnOKWindow = false;
  return;
end;

global
function Boolean JobCustSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  JobCustSClassOnOKWindow = false;
  return;
end;

global
function Boolean BookOrgSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  BookOrgSClassOnOKWindow = false;
  return;
end;

global
function Boolean VARINSClassOnOKWindow(Integer wn)
begin
  DeselectWindow(wn,false);
  PasteFromVARINS(wn,1);
  VARINSClassOnOKWindow = false;
  return;
end;

global
function Boolean ResSClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record ResVc Resr;
  record RestAccVc RestAccr;
  Integer mwn;
  
  res = true;
  mwn = MotherWindow(wn);
  if (GetWindowFileName(mwn)=="RestAccVc") begin
    if (WindowState(wn)!=Rs_search) then begin//Rs_search
      if (ReadMarkedRecord(wn,Resr)) then begin
        PasteString(mwn,Resr.Code);
        CloseWindow(wn);
        WindowFieldGoto(mwn,RestAccr,-1,"GuestCode",true);
        res = false;
      end;
    end;
  end;
  ResSClassOnOKWindow = res;
  return;
end;

global
function Boolean GuestSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record RestAccVc RestAccr;

  mwn = MotherWindow(wn);
  if (GetWindowFileName(mwn)=="RestAccVc") begin
  end;
  PasteFromSysList(wn,-2);
  GuestSClassOnOKWindow = false;
  return;
end;

global
function Boolean CUListSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record RestAccVc RestAccr;

  mwn = MotherWindow(wn);
  PasteFromSysList(wn,-2);
  CUListSClassOnOKWindow = false;
  return;
end;

procedure PasteRowsToPU(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record PUVc PUr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,PUr);
  PasteRowsToPURemote(PUr,currow,incode,qty,pos);
  PutWindowRecord(wn,PUr);
  WindowFieldGoto(wn,PUr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToOR(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record ORVc ORr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,ORr);
  PasteRowsToORRemote(ORr,currow,incode,qty,pos);
  PutWindowRecord(wn,ORr);
  WindowFieldGoto(wn,ORr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToIVCash(Integer wn,Integer currow,array string incode,array val qty,Integer pos,var Integer sernrf)
begin
  record IVCashVc IVCashr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVCashr);
  PasteRowsToIVCashRemote2(IVCashr,currow,incode,qty,pos,sernrf);
  PutWindowRecord(wn,IVCashr);
  WindowFieldGoto(wn,IVCashr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToStockMov(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record StockMovVc StockMovr;
  array string 255 aWarning;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,StockMovr);
  PasteRowsToStockMovRemote(StockMovr,currow,incode,qty,pos,aWarning);
  DisplayStrArray(aWarning);
  PutWindowRecord(wn,StockMovr);
  WindowFieldGoto(wn,StockMovr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToStockTake(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record StockTakeVc StockTaker;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,StockTaker);
  PasteRowsToStockTakeRemote(StockTaker,currow,incode,qty,pos);
  PutWindowRecord(wn,StockTaker);
  WindowFieldGoto(wn,StockTaker,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToIntOR(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record IntORVc IntORr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,IntORr);
  PasteRowsToIntORRemote(IntORr,currow,incode,qty,pos);
  PutWindowRecord(wn,IntORr);
  WindowFieldGoto(wn,IntORr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToProd(Integer wn,Integer currow,string fieldname,array string incode,array val qty,Integer pos)
begin
  record ProdVc Prodr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,Prodr);
  PasteRowsToProdRemote(Prodr,currow,fieldname,incode,qty,pos);
  PutWindowRecord(wn,Prodr);
  WindowFieldGoto(wn,Prodr,currow,"Item",true);
  return;
end;

procedure PasteRowsToProdOperation(Integer wn,Integer currow,string fieldname,array string incode,array val qty,Integer pos)
begin
  record ProdOperationVc ProdOpr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,ProdOpr);
  PasteRowsToProdOperationRemote(ProdOpr,currow,fieldname,incode,qty,pos);
  PutWindowRecord(wn,ProdOpr);
  WindowFieldGoto(wn,ProdOpr,currow,"Item",true);
  return;
end;

procedure PasteRowsToRec(Integer wn,Integer currow,string fieldname,array string incode,array val qty,Integer pos)
begin
  record RecVc Recr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,Recr);
  PasteRowsToRecRemote(Recr,currow,fieldname,incode,qty,pos);
  PutWindowRecord(wn,Recr);
  WindowFieldGoto(wn,Recr,currow,"Item",true);
  return;
end;

procedure PasteRowsToSD(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record SDVc SDr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,SDr);
  PasteRowsToSDRemote(SDr,currow,incode,qty,pos);
  PutWindowRecord(wn,SDr);
  WindowFieldGoto(wn,SDr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToSR(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record SRVc SRr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,SRr);
  PasteRowsToSRRemote(SRr,currow,incode,qty,pos);
  PutWindowRecord(wn,SRr);
  WindowFieldGoto(wn,SRr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToPO(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record POVc POr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,POr);
  PasteRowsToPORemote(POr,currow,incode,qty,pos);
  PutWindowRecord(wn,POr);
  WindowFieldGoto(wn,POr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToPOQT(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record POQTVc POQTr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,POQTr);
  PasteRowsToPOQTRemote(POQTr,currow,incode,qty,pos);
  PutWindowRecord(wn,POQTr);
  WindowFieldGoto(wn,POQTr,currow,"ArtCode",true);
  return;
end;

procedure PasteRowsToIV(Integer wn,Boolean tslf,Integer currow,array string incode,array val qty,Integer pos)
begin
  record IVVc IVr;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  PasteRowsToIVRemote(IVr,currow,incode,qty,pos,tslf);
  PutWindowRecord(wn,IVr);
  if (tslf) then begin
    WindowFieldGoto(wn,IVr,-1,"ivcashcommand",true);
  end else begin
    WindowFieldGoto(wn,IVr,currow,"ArtCode",true);
  end;
  return;
end;

procedure PasteRowsToQT(Integer wn,Integer currow,array string incode,array val qty,Integer pos)
begin
  record QTVc QTr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,QTr);
  PasteRowsToQTRemote(QTr,currow,incode,qty,pos);
  PutWindowRecord(wn,QTr);
  WindowFieldGoto(wn,QTr,currow,"ArtCode",true);
  return;
end;

procedure BuildVarString(string theitemcode,val theqty,string varx,string vary,array string maskvar2,array string maskvarsz2,
                         array string maskvar,string itemsize,var array string incode,var array val qty,var Integer pos,Boolean checkqty)
begin
  LongInt l;

  if ((checkqty==false) or (theqty!=0)) then begin
    incode[pos] = theitemcode;

    l = FirstInRange(itemsize,2);
    if (l<0) then begin l = 0; end;
    if (l==0) then begin
      incode[pos] = incode[pos] & itemsize;
    end;
    if (maskvar2[1]==maskvar[1]) then begin // Same order in Report Mask as in Entry Mask
      incode[pos] = incode[pos] & varx;
    end else begin
      incode[pos] = incode[pos] & vary;
    end;
    if ((nonblank(varx)) and (nonblank(vary))) then begin
      l = FirstInRange(maskvarsz2[1],2);
      if (l<0) then begin l = 0; end;
      if (l==0) then begin
        incode[pos] = incode[pos] & maskvarsz2[1];
      end;
      if (maskvar2[1]==maskvar[1]) then begin // Same order in Report Mask as in Entry Mask
        incode[pos] = incode[pos] & vary;
      end else begin
        incode[pos] = incode[pos] & varx;
      end;
    end;
    qty[pos] = theqty;
    pos = pos + 1;
  end;
  return;
end;

global
function Boolean MATVARINSClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record VarMatrxEntryVc VarMEr;
  row VarMatrxEntryVc VarMErw;
  string 255 tstr;
  string 200 varsubset;
  string 60 sepstr,msk,mskrep;
  Array string 20 maskvar;
  Array string 10 maskvarsz;
  Array string 20 maskvar2;
  Array string 10 maskvarsz2;
  Array string 20 incode;
  Array val qty;
  Array string 20 varsx;
  Array string 20 varsy;
  Integer pos,i;
  Integer mwn;
  string 255 location;
  Date dt;
  
  res = true;
  GetWindowRecord(wn,VarMEr);
  FindMotherWindowLocation(wn,location,dt);
  tstr = VarMEr.ItemCode;
  if (MATVARINSClassOnOKWindowPaste(tstr,sepstr,msk,mskrep,varsubset,maskvar2,maskvarsz2,maskvar,maskvarsz,
                                   varsx,varsy)) then begin
    pos = 0;
    incode[pos] = "";
    switch (fieldname) begin
      case "A": BuildVarString(tstr,VarMErw.A,varsx[ 1],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "B": BuildVarString(tstr,VarMErw.B,varsx[ 2],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "C": BuildVarString(tstr,VarMErw.C,varsx[ 3],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "D": BuildVarString(tstr,VarMErw.D,varsx[ 4],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "E": BuildVarString(tstr,VarMErw.E,varsx[ 5],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "F": BuildVarString(tstr,VarMErw.F,varsx[ 6],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "G": BuildVarString(tstr,VarMErw.G,varsx[ 7],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "H": BuildVarString(tstr,VarMErw.H,varsx[ 8],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "I": BuildVarString(tstr,VarMErw.I,varsx[ 9],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "J": BuildVarString(tstr,VarMErw.J,varsx[10],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "K": BuildVarString(tstr,VarMErw.K,varsx[11],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "L": BuildVarString(tstr,VarMErw.L,varsx[12],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "M": BuildVarString(tstr,VarMErw.M,varsx[13],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "N": BuildVarString(tstr,VarMErw.N,varsx[14],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "O": BuildVarString(tstr,VarMErw.O,varsx[15],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "P": BuildVarString(tstr,VarMErw.P,varsx[16],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "Q": BuildVarString(tstr,VarMErw.Q,varsx[17],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "R": BuildVarString(tstr,VarMErw.R,varsx[18],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "S": BuildVarString(tstr,VarMErw.S,varsx[19],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "T": BuildVarString(tstr,VarMErw.T,varsx[20],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "U": BuildVarString(tstr,VarMErw.U,varsx[21],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "V": BuildVarString(tstr,VarMErw.V,varsx[22],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "W": BuildVarString(tstr,VarMErw.W,varsx[23],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "X": BuildVarString(tstr,VarMErw.X,varsx[24],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "Y": BuildVarString(tstr,VarMErw.Y,varsx[25],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
      case "Z": BuildVarString(tstr,VarMErw.Z,varsx[26],varsy[rownr+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,false);
    end;
  end;
  if (nonblank(incode[0])) then begin
    SendArtStat(incode[0],location,"",BlankVal,BlankVal,BlankVal,CurrentDate,0);  
  end;
  MATVARINSClassBeforeEditField = res;
  RETURN;
END;

global
function Boolean MATVARINSClassOnClose(Integer wn,Integer wn2)
begin
  record VarMatrxEntryVc VarMEr;
  string 255 location,wclass;
  Date dt;
  integer mwn;

  if (UpdateExistingVarietyRowsf==false) then begin 
    mwn = MotherWindow(wn);
    wclass = GetWindowClass(mwn);
    switch (wclass) begin
      case "NPTSIVCashDClass": RemoveInvalidVARItemsNPTSIVCashDClass(mwn);
      case "IVCashDClass": RemoveInvalidVARItemsIVCashDClass(mwn);
    end;  
  end;
  GetWindowRecord(wn,VarMEr);
  FindMotherWindowLocation(wn,location,dt);
  if (nonblank(VarMEr.ItemCode)) then begin
    SendArtStat(VarMEr.ItemCode,location,"",BlankVal,BlankVal,BlankVal,CurrentDate,0);
  end;
  MATVARINSClassOnClose = false;
  return;
end;

global
function Boolean MATVARINSClassOnOKWindow(Integer wn)
begin
  record VarMatrxEntryVc VarMEr;
  row VarMatrxEntryVc VarMErw;
  Integer i,rwcnt,mwn,nwn;
  string 255 tstr;
  string 200 varsubset;
  string 60 sepstr,msk,mskrep;
  Array string 20 maskvar;
  Array string 10 maskvarsz;
  Array string 20 maskvar2;
  Array string 10 maskvarsz2;
  Array string 20 incode;
  Array val qty;
  Array string 20 varsx;
  Array string 20 varsy;
  Integer j,pos;
  record IVCashVc IVCashr;
  record IVVc IVr;
  Integer sernrf;
  record RcVc RepSpec;

  mwn = MotherWindow(wn);
  GetWindowRecord(wn,VarMEr);
  tstr = VarMEr.ItemCode;
  if (MATVARINSClassOnOKWindowPaste(tstr,sepstr,msk,mskrep,varsubset,maskvar2,maskvarsz2,maskvar,maskvarsz,
                                   varsx,varsy)) then begin
    for (i=0;i<40;i=i+1) begin
      incode[i] = "";
    end;
    rwcnt = MatRowCnt(VarMEr);
    pos = 0;
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VarMEr,i,VarMErw);
      j = 1;
      BuildVarString(tstr,VarMErw.A,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.B,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.C,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.D,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.E,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.F,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.G,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.H,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.I,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.J,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.K,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.L,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.M,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.N,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.O,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.P,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.Q,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.R,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.S,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.T,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.U,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.V,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.W,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.X,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.Y,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
      BuildVarString(tstr,VarMErw.Z,varsx[j],varsy[i+1],maskvar2,maskvarsz2,maskvar,sepstr,incode,qty,pos,true); j=j+1;
    end;
    if (pos>0) then begin
      switch (GetWindowClass(mwn)) begin
        case "ORDClass":
          PasteRowsToOR(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "IVDClass":
          if (TouchScreenLook) then begin
            DeselectWindow(mwn,false);
            GetWindowRecord(mwn,IVr);
            PasteRowsToIV(mwn,TouchScreenLook,MatRowCnt(IVr)-1,incode,qty,pos);
            GetWindowRecord(mwn,IVr);
            IVDClass_RefreshStringList(mwn,IVr);
            SetWindowNameArg(mwn,"");
          end else begin
            PasteRowsToIV(mwn,false,GetWindowCurRow(mwn),incode,qty,pos);
          end;
        case "QTDClass":
          PasteRowsToQT(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "PUDClass":
          PasteRowsToPU(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "PODClass":
          PasteRowsToPO(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "IntORDClass":
          PasteRowsToIntOR(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "POQTDClass":
          PasteRowsToPOQT(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "ProdDClass":
          PasteRowsToProd(mwn,GetWindowCurRow(mwn),WindowActiveField(mwn),incode,qty,pos);
        case "ProdOperationDClass":
          PasteRowsToProdOperation(mwn,GetWindowCurRow(mwn),WindowActiveField(mwn),incode,qty,pos);
        case "RecDClass":
          PasteRowsToRec(mwn,GetWindowCurRow(mwn),WindowActiveField(mwn),incode,qty,pos);
        case "SDDClass":
          PasteRowsToSD(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "SRDClass":
          PasteRowsToSR(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "StockMovDClass":
          PasteRowsToStockMov(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "StockTakeDClass":
          PasteRowsToStockTake(mwn,GetWindowCurRow(mwn),incode,qty,pos);
        case "IVCashDClass":
          PasteRowsToIVCash(mwn,GetWindowCurRow(mwn),incode,qty,pos,sernrf);
        case "NPTSIVCashDClass":
          GetWindowRecord(mwn,IVCashr);
          PasteRowsToIVCash(mwn,MatRowCnt(IVCashr)-1,incode,qty,pos,sernrf);
          if (sernrf==1 or sernrf==2) then begin
            RepSpec.long1 = MatRowCnt(IVCashr)-1;
//            ReOpenWindow(wn,"SerialNoScanNPTSSClass",0,mwn,"","",RepSpec);//doesnt work on windows
            nwn = OpenWindow("SerialNoScanNPTSSClass",0,mwn,"","",RepSpec);
            RepSpec.long1 = MatRowCnt(IVCashr)-1;
            PutWindowRecord(nwn,RepSpec);
            SelectWindow(nwn);
          end;
          GetWindowRecord(mwn,IVCashr);          
          IVCashDClass_RefreshStringList(mwn,IVCashr);
          SetWindowNameArg(mwn,"");
          // IVCashSumupSoftEditFields(mwn,IVCashr);
        case "POSIVDClass":
          PasteRowsToIVCash(mwn,GetWindowCurRow(mwn),incode,qty,pos,sernrf);
      end;
    end else begin
      switch (GetWindowClass(mwn)) begin
        case "IVCashDClass":
          RemoveInvalidVARItemsIVCashDClass(mwn);
        case "NPTSIVCashDClass":
          RemoveInvalidVARItemsNPTSIVCashDClass(mwn);
      end;
    end;
  end;

  CloseWindow(wn);
  MATVARINSClassOnOKWindow = false;
  return;
end;

procedure FillVarMatrxEntryQuantitys(record VarMatrxEntryVc VMEr,Array string avariety,vector val varsq)
begin
  row VarMatrxEntryVc VMErw;
  array string 255 axlabels,aylabels;
  Integer ai,posx,posy,xcnt,ycnt;
  string 255 variety;

  xcnt = CntVarietyTheCodes(1,axlabels);
  ycnt = CntVarietyTheCodes(2,aylabels);

  for (posy=1;posy<=ycnt;posy=posy+1) begin
    for (posx=1;posx<=xcnt;posx=posx+1) begin
      variety = "." & axlabels[posx] & "." & aylabels[posy];
      switch (posx) begin
        case 1: VMErw.A = varsq[variety];
        case 2: VMErw.B = varsq[variety];
        case 3: VMErw.C = varsq[variety];
        case 4: VMErw.D = varsq[variety];
        case 5: VMErw.E = varsq[variety];
        case 6: VMErw.F = varsq[variety];
        case 7: VMErw.G = varsq[variety];
        case 8: VMErw.H = varsq[variety];
        case 9: VMErw.I = varsq[variety];
        case 10: VMErw.J = varsq[variety];
        case 11: VMErw.K = varsq[variety];
        case 12: VMErw.L = varsq[variety];
        case 13: VMErw.M = varsq[variety];
        case 14: VMErw.N = varsq[variety];
        case 15: VMErw.O = varsq[variety];
        case 16: VMErw.P = varsq[variety];
        case 17: VMErw.Q = varsq[variety];
        case 18: VMErw.R = varsq[variety];
        case 19: VMErw.S = varsq[variety];
        case 20: VMErw.T = varsq[variety];
        case 21: VMErw.U = varsq[variety];
        case 22: VMErw.V = varsq[variety];
        case 23: VMErw.W = varsq[variety];
        case 24: VMErw.X = varsq[variety];
        case 25: VMErw.Y = varsq[variety];
        case 26: VMErw.Z = varsq[variety];
      end;
    end;
    MatRowPut(VMEr,posy-1,VMErw);
  end;
  return;
end;

procedure AddToVarietyArray(string variety,Array string avariety)
begin
  Integer i;
  
  for (i=0;i<avariety.length;i=i+1) begin
    if (variety==avariety[i]) then begin
      goto LAddToVarietyArray;
    end;
  end;
  avariety[avariety.length] = variety;
LAddToVarietyArray:;  
  return;
end;

procedure FingVarMatrxEntryQuantitys(Integer wn,string wclass,string actfield,string itemcode,var Array string avariety,var vector val varsq)
begin
  Integer ri,rwcnt;
  string 60 variety;

  switch (wclass)  begin
    case "ORDClass": begin
      record ORVc ORr;
      row ORVc ORrw;

      GetWindowRecord(wn,ORr);
      rwcnt = MatRowCnt(ORr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(ORr,ri,ORrw);
        if (Left(ORrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(ORrw.ArtCode,len(ORrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + ORrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "QTDClass": begin
      record QTVc QTr;
      row QTVc QTrw;

      GetWindowRecord(wn,QTr);
      rwcnt = MatRowCnt(QTr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(QTr,ri,QTrw);
        if (Left(QTrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(QTrw.ArtCode,len(QTrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + QTrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "IVDClass": begin
      record IVVc IVr;
      row IVVc IVrw;

      GetWindowRecord(wn,IVr);
      rwcnt = MatRowCnt(IVr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(IVr,ri,IVrw);
        if (Left(IVrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(IVrw.ArtCode,len(IVrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + IVrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "NPTSIVCashDClass": begin
      record IVCashVc IVCashr;
      row IVCashVc IVCashrw;

      GetWindowRecord(wn,IVCashr);
      rwcnt = MatRowCnt(IVCashr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(IVCashr,ri,IVCashrw);
        if (Left(IVCashrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(IVCashrw.ArtCode,len(IVCashrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + IVCashrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;    
    case "IVCashDClass": begin
      record IVCashVc IVCashr;
      row IVCashVc IVCashrw;

      GetWindowRecord(wn,IVCashr);
      rwcnt = MatRowCnt(IVCashr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(IVCashr,ri,IVCashrw);
        if (Left(IVCashrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(IVCashrw.ArtCode,len(IVCashrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + IVCashrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "IntORDClass": begin
      record IntORVc IntORr;
      row IntORVc IntORrw;

      GetWindowRecord(wn,IntORr);
      rwcnt = MatRowCnt(IntORr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(IntORr,ri,IntORrw);
        if (Left(IntORrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(IntORrw.ArtCode,len(IntORrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + IntORrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "POQTDClass": begin
      record POQTVc POQTr;
      row POQTVc POQTrw;

      GetWindowRecord(wn,POQTr);
      rwcnt = MatRowCnt(POQTr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(POQTr,ri,POQTrw);
        if (Left(POQTrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(POQTrw.ArtCode,len(POQTrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + POQTrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "PODClass": begin
      record POVc POr;
      row POVc POrw;

      GetWindowRecord(wn,POr);
      rwcnt = MatRowCnt(POr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(POr,ri,POrw);
        if (Left(POrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(POrw.ArtCode,len(POrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + POrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "PUDClass": begin
      record PUVc PUr;
      row PUVc PUrw;

      GetWindowRecord(wn,PUr);
      rwcnt = MatRowCnt(PUr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(PUr,ri,PUrw);
        if (Left(PUrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(PUrw.ArtCode,len(PUrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + PUrw.Quant;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "StockMovDClass": begin
      record StockMovVc StockMovr;
      row StockMovVc StockMovrw;

      GetWindowRecord(wn,StockMovr);
      rwcnt = MatRowCnt(StockMovr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(StockMovr,ri,StockMovrw);
        if (Left(StockMovrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(StockMovrw.ArtCode,len(StockMovrw.ArtCode)-len(itemcode));
          switch (actfield) begin
            case "OrdQuant":
              varsq[variety] = varsq[variety] + StockMovrw.OrdQuant;
            otherwise
              varsq[variety] = varsq[variety] + StockMovrw.Quant;
          end;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "StockTakeDClass": begin
      record StockTakeVc StockTaker;
      row StockTakeVc StockTakerw;

      GetWindowRecord(wn,StockTaker);
      rwcnt = MatRowCnt(StockTaker);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(StockTaker,ri,StockTakerw);
        if (Left(StockTakerw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(StockTakerw.ArtCode,len(StockTakerw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + StockTakerw.Qty;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;
    case "SDDClass": begin
      record SDVc SDVr;
      row SDVc SDVrw;

      GetWindowRecord(wn,SDVr);
      rwcnt = MatRowCnt(SDVr);
      for (ri=0;ri<rwcnt;ri=ri+1) begin
        MatRowGet(SDVr,ri,SDVrw);
        if (Left(SDVrw.ArtCode,len(itemcode))==itemcode) then begin
          variety = Right(SDVrw.ArtCode,len(SDVrw.ArtCode)-len(itemcode));
          varsq[variety] = varsq[variety] + SDVrw.Qty;
          AddToVarietyArray(variety,avariety);
        end;
      end;
    end;    
  end;
  return;
end;

function Boolean PrepareAndOpenMatVARWind(Integer wn,string itemcode,string location,string itemsize,string mask,string subsets)
begin
  Boolean res;
  Integer nwn;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  Array string 20 amsk;
  Integer cnt;
  Integer i;
  record VarMatrxEntryVc VMEr;
  string 60 wclass,actfield;
  vector val varsq;
  Array string 255 avariety;

  wclass = GetWindowClass(wn);
  actfield = WindowActiveField(wn);
  FingVarMatrxEntryQuantitys(wn,wclass,actfield,itemcode,avariety,varsq);
    
  if ((blank(itemcode)) or 
      (wclass=="VARMaskTClass") or 
      (wclass=="AvailVarsRClass")) then begin goto LPrepareAndOpenMatVARWind; end;//list of all windows where paste variety should not work, C - code!
  res = true;
  FillMaskVAR(itemcode,itemsize,mask,maskvar,maskvarsz);
  
  SplitVars(itemcode,maskvar,maskvarsz,amsk);
  while (nonblank(maskvar[cnt])) begin
    cnt = cnt + 1;
  end;
  if ((cnt<2) or (cnt>3)) then begin goto LPrepareAndOpenMatVARWind; end;
  nwn = OpenWindow("MATVARINSClass",0,wn,itemcode,"",VMEr);//  nwn = OpenNamedViewSubset("MATVARINSClass",NIL,1,wn,varsitemcode,gBlankString,false);  
  SetWindowNameArg(wn,itemcode & ":" & location);
  DeselectWindow(nwn,false);
  GetWindowRecord(nwn,VMEr);
  VMEr.ItemCode = itemcode;
  if (UpdateExistingVarietyRowsf) then begin 
    FillVarMatrxEntryQuantitys(VMEr,avariety,varsq);
  end;
  PutWindowRecord(nwn,VMEr);
  WindowFieldGoto(nwn,VMEr,0,"A",true);
LPrepareAndOpenMatVARWind:;
  PrepareAndOpenMatVARWind = res;
  return;
end;

global
function Boolean TestForMATVARINS(Integer wn)
begin
  Boolean res;
  string 255 varsitemcode,itemsize,mask,subsets,location;  
  string 60 wclass;
  record INVc INr;
  record VarietyBlock VBr;
  boolean checkvarf;

  varsitemcode = FirstInRange(GetWindowNameArg(wn),20);
  location = LastInRange(GetWindowNameArg(wn),20);
  wclass = GetWindowClass(wn);
  if ((blank(varsitemcode)) or 
      (wclass=="VARMaskTClass") or 
      (wclass=="AvailVarsRClass")) then begin goto LTestForMATVARINS; end;//list of all windows where paste variety should not work, C - code!
  BlockLoad(VBr);  
  if (UpdateExistingVarietyRowsf) then begin   
    if (wclass=="NPTSIVCashDClass" or ((wclass=="IVDClass" or wclass=="IVCashDClass") and TouchScreenLook)) then begin 
      checkvarf = true;
    end;
    if (checkvarf) then begin 
      if (ReadFirstItem(varsitemcode,INr,true,true)) then begin goto LTestForMATVARINS; end;
      if (FindStringInString(varsitemcode,".")) then begin goto LTestForMATVARINS; end;
    end;  
  end else begin
    if (ReadFirstItem(varsitemcode,INr,true,true)) then begin goto LTestForMATVARINS; end;
    if (FindStringInString(varsitemcode,".")) then begin goto LTestForMATVARINS; end;
  end;
  if (VBr.OpenVarPaste==0) then begin goto LTestForMATVARINS; end;
  if (GetFirstItem(varsitemcode,INr)) then begin end;
  if (FindItemVAR2(varsitemcode,itemsize,mask,subsets)==false) then begin goto LTestForMATVARINS; end;
  if (ReadFirstItem(varsitemcode,INr,true,false)==false) then begin goto LTestForMATVARINS; end;
  SetWindowNameArg(wn,INr.Code & ":" & location);
  res = PrepareAndOpenMatVARWind(wn,INr.Code,location,itemsize,mask,subsets);
LTestForMATVARINS:;  
  TestForMATVARINS = res;
  RETURN;
END;

function Boolean TestForMATVARINSLocal(Integer wn)
BEGIN
  Boolean res;
  string 255 varsitemcode,itemsize,mask,subsets,location;
  string 60 wclass;
  record INVc INr;
  boolean checkvarf;

  varsitemcode = FirstInRange(GetWindowNameArg(wn),20);
  location = LastInRange(GetWindowNameArg(wn),20);
  wclass = GetWindowClass(wn);
  if ((blank(varsitemcode)) or 
      (wclass=="VARMaskTClass") or 
      (wclass=="AvailVarsRClass")) then begin goto LTestForMATVARINS; end;//list of all windows where paste variety should not work, C - code!
  if (UpdateExistingVarietyRowsf) then begin 
    if (wclass=="NPTSIVCashDClass" or ((wclass=="IVDClass" or wclass=="IVCashDClass") and WindowActiveField(wn)!="Quant")) then begin 
      if (ReadFirstItem(varsitemcode,INr,true,true)) then begin goto LTestForMATVARINS; end;
      //if (FindStringInString(varsitemcode,".")) then begin goto LTestForMATVARINS; end;
    end;  
  end;
  if (FindItemVAR2(varsitemcode,itemsize,mask,subsets)==false) then begin goto LTestForMATVARINS; end;
  if (GetFirstItem(varsitemcode,INr)) then begin end;
  if (ReadFirstItem(varsitemcode,INr,true,false)==false) then begin //*** ReadFirstItem(varsitemcode,INr,true,true)
    goto LTestForMATVARINS; 
  end else begin
    SetWindowNameArg(wn,INr.Code & ":" & location);
    res = PrepareAndOpenMatVARWind(wn,INr.Code,location,itemsize,mask,subsets);
  end;
LTestForMATVARINS:;  
  TestForMATVARINSLocal = res;
  RETURN;
END;

global
function Boolean MATVARINSClassOnOpenPaste(Integer wn,string find)
begin
  if (TestForMATVARINSLocal(wn)) then begin end else begin
    if (GuiType!=kGuiiPhone and IsDoingTimedPasteSpecial==false) then begin
      MessageBox(33711,"");
    end;
  end;
  MATVARINSClassOnOpenPaste = true;
  return;
end;

function Boolean PrepareAndOpenVARWind(Integer wn,string itemcode,string itemsize,string mask,string subsets)
BEGIN
  Boolean res;
  record RcVc RepSpec;
  Integer nwn;
  Array string 20 maskvar;
  Array string 2 maskvarsz;
  Array string 20 amsk;
  string 60 wclass;

  wclass = GetWindowClass(wn);
  if ((blank(mask)) or 
      (wclass=="VARMaskTClass") or 
      (wclass=="AvailVarsRClass")) then begin goto LPrepareAndOpenVARWind; end;//list of all windows where paste variety should not work, C - code!

  nwn = OpenWindow("VARINSClass",0,wn,mask,"",RepSpec);//  nwn = OpenNamedViewSubset("VARINSClass",NIL,1,wn,mask,gBlankString,false);
  DeselectWindow(nwn,false);
  GetWindowRecord(nwn,RepSpec);
//  SetWindowSubset(wn,subset);
    
  FillMaskVAR(itemcode,itemsize,mask,maskvar,maskvarsz);
  SplitVars(itemcode,maskvar,maskvarsz,amsk);
  RepSpec.AccStr = amsk[0];
  RepSpec.f6 = subsets; 
  RepSpec.FirstAcc = itemsize; 
  RepSpec.LastAcc = mask; 
  PutWindowRecord(nwn,RepSpec);
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  res = true;
LPrepareAndOpenVARWind:;
  PrepareAndOpenVARWind = res;
  RETURN;
END;

global
function Boolean TestForVARINS(Integer wn,string find)
BEGIN
  Boolean res;
  string 255 itemcode,mask,subsets;
  string 10 itemsize;
  string 60 wclass;
 
  if (blank(find)) then begin goto LTestForVARINS; end;
  itemcode = find;
  if (FindItemVAR2(itemcode,itemsize,mask,subsets)==false) then begin goto LTestForVARINS; end;
  res = PrepareAndOpenVARWind(wn,itemcode,itemsize,mask,subsets);
LTestForVARINS:;
  TestForVARINS = res;
  RETURN;
END;

global
function Boolean INSClassOnOpenPaste(Integer wn,string find)
begin
  Boolean res;
  
  res = TestForVARINS(wn,find);
  INSClassOnOpenPaste = res;
  return;
end;

global
function Boolean Companies2SClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  Companies2SClassOnOKWindow = false;
  return;
end;

global
function Boolean DaughterCompSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  DaughterCompSClassOnOKWindow = false;
  return;
end;

global
function Boolean COCUServiceStatRClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RcVc RepSpec;
  
  res = true;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.flags[0]==0 and RepSpec.flags[5]==0) then begin
    res = false;
    MessageBox(14801,"");
    goto LCOCUServiceStatRClassOnOKWindow;
  end;
  if (RepSpec.flags[1]==0 and RepSpec.flags[6]==0) then begin
    res = false;
    MessageBox(14802,"");
    goto LCOCUServiceStatRClassOnOKWindow;
  end;
  
LCOCUServiceStatRClassOnOKWindow:;
  COCUServiceStatRClassOnOKWindow = res;
  return;
end;

global
function Boolean HTSLicenceTermsCountryHWTClassOnClose(Integer wn,Integer wn2)
begin
  HTSLicenceTermsCountryHWTClassOnClose = true;
  return;
end;

global
function Boolean SynkAutoSerFileNameSClassOnOKWindow(Integer wn)
begin
  PasteTagFromSysList(wn);
  SynkAutoSerFileNameSClassOnOKWindow = false;
  return;
end;

global
function Boolean RemoteCloudServerSClassOnOKWindow(Integer wn)
begin
  Boolean res;
  record RemoteCloudServerVc RCSr,RCS2r;
  row RemoteCloudServerVc RCSrw;
  record CloudWatchpointVc CWr;
  Integer mwn,rownr;
  record RCVc RepSpec;
  
  res = true;
  mwn = MotherWindow(wn);
  switch (GetWindowFileName(mwn)) begin
    case "CloudWatchpointVc":
      if (WindowState(wn)!=Rs_search) then begin
        if (ReadMarkedRecord(wn,RCSr)) then begin
          CloseWindow(wn);
          PasteString(mwn,RCSr.Name);
          GetWindowRecord(mwn,CWr);
          CWr.RemoteCloudServer = RCSr.UUID;
          CWr.ServerName = RCSr.Name;
          PutWindowRecord(mwn,CWr);
          res = false;
        end;
      end;
    case "RemoteCloudServerVc":
      if (GetWindowClass(mwn)=="RemoteCloudServerDClass") then begin
        if (WindowState(wn)!=Rs_search) then begin
          if (ReadMarkedRecord(wn,RCSr)) then begin
            rownr = WindowActiveRow(mwn);
            CloseWindow(wn);
            PasteString(mwn,RCSr.UUID);
            if (rownr>=0) then begin
              GetWindowRecord(mwn,RCS2r);
              MatRowGet(RCS2r,rownr,RCSrw);
              RCSrw.Desc = RCSr.Name;
              MatRowPut(RCS2r,rownr,RCSrw);
              PutWindowRecord(mwn,RCS2r);
            end;
            res = false;
          end;
        end;
      end;
    otherwise
      if (GetWindowClass(mwn)=="ListCloudArchiveRClass") then begin
        if (ReadMarkedRecord(wn,RCSr)) then begin
          CloseWindow(wn);
          PasteString(mwn,RCSr.Name);
          GetWindowRecord(mwn,RepSpec);
          RepSpec.RecordUUID = RCSr.UUID;
          RepSpec.f1 = RCSr.Name;
          PutWindowRecord(mwn,RepSpec);
          res = false;
        end;
      end;
  end;

  RemoteCloudServerSClassOnOKWindow = res;
  return;
end;

global
function Boolean PayModeBankAccSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  PayModeBankAccSClassOnOKWindow = false;
  return;
end;

global
function Boolean TaxAuthIDBlockSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-2);
  TaxAuthIDBlockSClassOnOKWindow = false;
  return;
end;
