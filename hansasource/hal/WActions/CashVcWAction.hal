external procedure CashVc_PrintToFiscalPrinter(var record CashVc,Boolean);

global
function Boolean CashDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  record CashVc Cashr;
  Boolean res;

  switch (fieldname) begin
    case "Comment": res = true;
  end;
  GetWindowRecord(wn,Cashr);
  if (Cashr.OKFlag==0) then begin
    res = true;
  end;
  CashDClassActiveEditField = res;
  RETURN;
END;

global
function Boolean CashSimpleInDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  CashSimpleInDClassActiveEditField = CashDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  RETURN;
END;

global
function Boolean CashSimpleOutDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  CashSimpleOutDClassActiveEditField = CashDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  RETURN;
END;

global 
function Boolean CashDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record CashVc Cashr;

  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,Cashr);
      if (Cashr.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,Cashr);
      if (Cashr.OKFlag!=0) then begin res = false; end;
    otherwise
      res = false;
  end;
  CashDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean CashSimpleInDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  CashSimpleInDClassInsertRowTest = CashDClassInsertRowTest(wn,rownr);
  RETURN;
END;

global 
function Boolean CashSimpleOutDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  CashSimpleOutDClassInsertRowTest = CashDClassInsertRowTest(wn,rownr);
  RETURN;
END;

global 
function Boolean CashDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record CashVc Cashr;
  Boolean res;

  res = true;
  switch (WindowState(wn)) begin  
    case 0://Rs_normal
      GetWindowRecord(wn,Cashr);
      if (Cashr.OKFlag!=0) then begin res = false; end;
    case 1://Rs_insert
      res = true;
    case 2://Rs_update
      GetPrevWindowRecord(wn,Cashr);    
      if (Cashr.OKFlag!=0) then begin res = false; end;
  end;
LCashDClassDeleteRowTest:;  
  CashDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean CashSimpleInDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  CashSimpleInDClassDeleteRowTest = CashDClassDeleteRowTest(wn,rownr);
  return;
end;

global 
function Boolean CashSimpleOutDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  CashSimpleOutDClassDeleteRowTest = CashDClassDeleteRowTest(wn,rownr);
  return;
end;

global
function Boolean CashDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CashVc Cashr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,Cashr);
    if (Cashr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Cashr);
    if (Cashr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  CashDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean CashSimpleInDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  CashSimpleInDClassOKFlagButtonAction = CashDClassOKFlagButtonAction(wn,value);
  RETURN;
END;

global
function Boolean CashSimpleOutDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  CashSimpleOutDClassOKFlagButtonAction = CashDClassOKFlagButtonAction(wn,value);
  RETURN;
END;

global
function Boolean CashDClassEventButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record CashVc Cashr;
 
  res = true;
  switch (WindowState(wn)) begin
    case 0://Rs_normal
      GetWindowRecord(wn,Cashr);
      if (Cashr.OKFlag!=0) then begin
        res = false;
      end;
    case 2://Rs_update
      GetPrevWindowRecord(wn,Cashr);
      if (Cashr.OKFlag!=0) then begin
        res = false;
      end;
  end;
  CashDClassEventButtonAction = res;
  RETURN;
END;

global
function Boolean CashSimpleInDClassEventButtonAction(Integer wn,Integer value)
BEGIN
  CashSimpleInDClassEventButtonAction = CashDClassEventButtonAction(wn,value);
  RETURN;
END;

global
function Boolean CashSimpleOutDClassEventButtonAction(Integer wn,Integer value)
BEGIN
  CashSimpleOutDClassEventButtonAction = CashDClassEventButtonAction(wn,value);
  RETURN;
END;

global
procedure CashSumup(record CashVc Cashr)
BEGIN
  row CashVc Cashrw,Cashrw2;
  Integer i,rwcnt,j;

  Cashr.Total = blankval;
  rwcnt = MatRowCnt(Cashr);
  if (rwcnt>1) then begin
    for (i=0;i<rwcnt-1;i=i+1) begin
      MatRowGet(Cashr,i,Cashrw);
      for (j=i+1;j<rwcnt;j=j+1) begin
        MatRowGet(Cashr,j,Cashrw2);
        if (Cashrw.PMCode==Cashrw2.PMCode) and (Cashrw.Denomination==Cashrw2.Denomination) then begin
          Cashrw.Amount = Cashrw.Amount + Cashrw2.Amount;
          MatRowPut(Cashr,i,Cashrw);
          MatRowDelete(Cashr,j);
          rwcnt = MatRowCnt(Cashr);
        end;
      end;
      rwcnt  = MatRowCnt(Cashr);
    end;
  end;
  
  rwcnt = MatRowCnt(Cashr);  
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Cashr,i,Cashrw);
    Cashr.Total = Cashr.Total + Cashrw.Amount;
  end;
  RETURN;
END;

procedure CashDchrsum(record CashVc Cashr,Integer rownr)
begin
  row CashVc Cashrw;

  MatRowGet(Cashr,rownr,Cashrw);
  if (Cashrw.DenominationValue!=kDenominationTypeUnknown) and (Cashrw.DenominationQty>0) then begin
    Cashrw.Amount = Cashrw.DenominationValue*Cashrw.DenominationQty;
  end;
  MatRowPut(Cashr,rownr,Cashrw);
  return;
end;
function Boolean CashDClassAmountEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record CashVc Cashr;
  row CashVc Cashrw;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,Cashr);
    MatRowGet(Cashr,rownr,Cashrw);
    if (Cashrw.Denomination!=kDenominationTypeUnknown) then begin
      Cashrw.DenominationQty = Cashrw.Amount/Cashrw.DenominationValue;
    end;
    MatRowPut(Cashr,rownr,Cashrw);
    CashSumup(Cashr);
    PutWindowRecord(wn,Cashr);      
  end;
  CashDClassAmountEFAfter = true;
  return;
end;

function Boolean CashDClassDenominationEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record CashVc Cashr;
  row CashVc Cashrw;
  
  if (changedf) then begin
    GetWindowRecord(wn,Cashr);
    MatRowGet(Cashr,rownr,Cashrw);
    switch (Cashrw.Denomination) begin
      case kDenominationTypeOneCent:   Cashrw.DenominationValue = 0.01;
      case kDenominationTypeTwoCents:  Cashrw.DenominationValue = 0.02;
      case kDenominationTypeFiveCents: Cashrw.DenominationValue = 0.05;
      case kDenominationTypeTenCents:  Cashrw.DenominationValue = 0.10;
      case kDenominationTypeFifteenCents: Cashrw.DenominationValue = 0.15;
      case kDenominationTypeTwentyCents: Cashrw.DenominationValue = 0.20;
      case kDenominationTypeTwentyFiveCents: Cashrw.DenominationValue = 0.25;
      case kDenominationTypeFiftyCents: Cashrw.DenominationValue = 0.50;
      case kDenominationTypeOne: Cashrw.DenominationValue = 1;
      case kDenominationTypeFive: Cashrw.DenominationValue = 5;
      case kDenominationTypeTen: Cashrw.DenominationValue = 10;
      case kDenominationTypeTwenty: Cashrw.DenominationValue = 20;
      case kDenominationTypeFifty: Cashrw.DenominationValue = 50;
      case kDenominationTypeHundred: Cashrw.DenominationValue = 100;
      case kDenominationTypeTwoHundreds:  Cashrw.DenominationValue = 200;
      case kDenominationTypeFiveHundreds: Cashrw.DenominationValue = 500;
      case kDenominationTypeThousand: Cashrw.DenominationValue = 1000;
      case kDenominationTypeTwoThousands:  Cashrw.DenominationValue = 2000;
      case kDenominationTypeFiveThousands: Cashrw.DenominationValue = 5000;
    end;
    MatRowPut(Cashr,rownr,Cashrw);
    CashDchrsum(Cashr,rownr);
    CashSumup(Cashr);
    PutWindowRecord(wn,Cashr);      
  end;
  CashDClassDenominationEFAfter = true;
  return;
end;

function Boolean CashDClassDenominationQtyEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record CashVc Cashr;
  row CashVc Cashrw;
  
  if (changedf) then begin
    GetWindowRecord(wn,Cashr);
    CashDchrsum(Cashr,rownr);
    CashSumup(Cashr);
    PutWindowRecord(wn,Cashr);      
  end;
  CashDClassDenominationQtyEFAfter = true;
  return;
end;

global
function Boolean CashDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Amount": res = CashDClassAmountEFAfter(wn,rownr,changed);
    case "Denomination": res = CashDClassDenominationEFAfter(wn,rownr,changed!=0);
    case "DenominationQty": res = CashDClassDenominationQtyEFAfter(wn,rownr,changed!=0);
  end;
  CashDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean CashSimpleOutDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Amount": res = CashDClassAmountEFAfter(wn,rownr,changed);
  end;
  CashSimpleOutDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean CashSimpleInDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Amount": res = CashDClassAmountEFAfter(wn,rownr,changed);
  end;
  CashSimpleInDClassAfterEditField = res;
  RETURN;
END;

global
procedure PrintToFiscPrntCashDsm()
begin
  Integer wn;
  record CashVc Cashr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,Cashr);
    if (UserCanAction("PrintToFiscPrnt",true)) then begin
      CashVc_PrintToFiscalPrinter(Cashr,true);
    end else begin
      MessageBox(1274,StringFromStringSet(3,"PrintToFiscPrnt"));
    end;
  end else begin
    Beep;
  end;
  return;
end;
