remote procedure TSDEnterSpec(var record TSVc,Integer,string);
remote function Boolean TSVc_PasteArtCode(var record TSVc,Integer,var string);
remote procedure TSVc_PastePRCode(var record TSVc,Integer);
remote procedure TSVc_PasteEMCode(var record TSVc,Integer);
remote updating function Boolean RecordAction_rlTSLOK(var record TSVc);
external procedure RecordActionTS_Print(var record TSVc,string);

global
procedure PrintTSL(Integer wn,Boolean previewf)
BEGIN
  record TSVc TSr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(TSr,wn,i)) begin
    RecordActionTS_Print(TSr,previewf);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
updating procedure TSLOKsm()
BEGIN
  Integer i;
  record TSVc TSr;
  Integer wn;
 
  if (UserCanAction("TimeSheetOK",true)) then begin
    wn = CurWindow;
    i = 1;
    while (GetRecordFromBrowse(TSr,wn,i)) begin
      if (RecordAction_rlTSLOK(TSr)) then begin      
      end;
      i = i + 1;
      UpdateBrowses("TSVc");
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"TimeSheetOK"));
  end;
  RETURN;
END;

procedure TSSumUp(record TSVc TSp)
BEGIN
  row TSVc TSrw;
  Integer rwcnt,i;
  
  rwcnt = MatRowCnt(TSp);
  TSp.Sum = blankval;
  TSp.SumOther = blankval;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(TSp,i,TSrw);
    if ((TSrw.stp==1) and (TSrw.ovst==0)) then begin
      if (TSrw.ItemType==3) then begin
        TSp.Sum = TSp.Sum + TSrw.Qty;
      end else begin
        TSp.SumOther = TSp.SumOther + TSrw.Qty;
      end;
    end;
  end;
  RETURN;
END;

global
function Boolean TSDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record TSVc TSr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,TSr);
    if (TSr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,TSr);
    if (TSr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  TSDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean TSDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record TSVc TSr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,TSr);    
    TSSumUp(TSr);
    PutWindowRecord(wn,TSr);    
  end;
  TSDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean TSDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record TSVc TSr;
  Boolean res;
  Integer updatemode;

  res = true;
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,TSr);
    if (TSr.OKFlag!=0) then begin res = false; end;
  end;
  TSDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean TSDClassInsertRowTest(Integer wn,Integer rownr)
begin
  record TSVc TSr;
  Boolean res;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,TSr);
    if (TSr.OKFlag!=0) then begin res = false; end;
  end;
  TSDClassInsertRowTest = res;
  return;
end;

function Boolean TSCanDeleteRow(record TSVc TSp,Integer rownr,row TSVc TSrwp)
begin
  Boolean res;
  record TBIVVc TBIVr;
  
  res = true;
  TBIVr.PRCode = TSrwp.PRCode;
  TBIVr.oVc = 1;
  TBIVr.SerNr = TSp.SerNr;
  TBIVr.Row = rownr;
  if (ReadFirstMain(TBIVr,4,true)) then begin
    if (TBIVr.Invoice!=-1) then begin res = false; end;
  end;
  TSCanDeleteRow = res;
  return;
end;

global 
function Boolean TSDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record TSVc TSr;
  row TSVc TSrw;
  row TSVc TS2rw;
  Boolean res;
  Integer updatemode;
  Integer rwcnt,orwcnt;
  
  if (rownr<0) then begin
    goto LTSDClassOverStrikeTest;
  end;
  GetWindowRecord(wn,TSr);
  updatemode = 2;//Rs_update
  res = false;
  orwcnt = WindowOldRowcnt(wn);
  rwcnt = MatRowCnt(TSr);
  MatRowGet(TSr,rownr,TSrw);
  if (TSCanDeleteRow(TSr,rownr,TSrw)==false) then begin
    MessageBox(1092,"");
    goto LTSDClassOverStrikeTest;
  end;
  if (orwcnt<rwcnt) then begin
    MatRowGet(TSr,orwcnt,TS2rw);
  end;
  if (WindowState(wn)!=updatemode) then begin
    MessageBox(1050,"");
    goto LTSDClassOverStrikeTest;
  end;
  if (orwcnt==rwcnt) then begin
    MessageBox(1050,"");
    goto LTSDClassOverStrikeTest;
  end;
  if (TS2rw.stp!=2) then begin
    MessageBox(1050,"");
    goto LTSDClassOverStrikeTest;
  end;
  if (TSrw.stp!=1) then begin
    MessageBox(1051,"");
    goto LTSDClassOverStrikeTest;
  end;
  if (rownr<orwcnt) then begin res = true; end;  
LTSDClassOverStrikeTest:;
  TSDClassOverStrikeTest = res;
  RETURN;
END;

global
function Boolean TSDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res,umf;
  record TSVc TSr;
  record TSVc TS2r;
  row TSVc TSrw;
  Integer normalmode,updatemode;
  Integer rwcnt,orwcnt;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update  
  if (WindowState(wn)==updatemode) then begin
    res = false;
    GetWindowRecord(wn,TSr);
    GetPrevWindowRecord(wn,TS2r);
    if (TS2r.OKFlag==0) then begin
      res = true;
      goto LTSDClassActiveEditField;
    end;
    if (rownr==-1) then begin
      if (changed!=0) then begin
        switch (fieldname) begin
          case "Comment": ;
          otherwise
            res = false;
            MessageBox(1512,"");
        end;
      end;
      goto LTSDClassActiveEditField;      
    end;
    umf = false;
    orwcnt = WindowOldRowcnt(wn);  
    rwcnt = MatRowCnt(TSr);
    if (orwcnt<rwcnt) then begin
      MatRowGet(TSr,orwcnt,TSrw);
      if (TSrw.stp==2) then begin umf = true; end;
    end;
    if (umf) then begin res = true; end;
    if ((rownr!=-1)) then begin
      if (rownr<orwcnt) then begin
        if (true) then begin
          if (changed!=0) then begin
             res = false;
             MessageBox(1512,"");
             goto LTSDClassActiveEditField;
          end;   
        end;
      end else begin
        if (umf==false) then begin
          if (changed!=0) then begin 
            MessageBox(1050,"");
          end;
          goto LTSDClassActiveEditField;
        end;
      end;
    end;
  end;
  switch (fieldname) begin
    case "ArtName":
      if (HasLocalization("PRT")) then begin
        GetWindowRecord(wn,TSr);
        MatRowGet(TSr,rownr,TSrw);
        if (nonblank(TSrw.ArtCode)) then begin
          res = false;
        end;
      end;
  end;
LTSDClassActiveEditField:;  
  TSDClassActiveEditField = res;
  RETURN;
END;

function Boolean TSDClassEMCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record TSVc TSr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,TSr);
    TSVc_PasteEMCode(TSr,rownr);
    PutWindowRecord(wn,TSr);    
  end;
  TSDClassEMCodeEFAfter = res;
  RETURN;
END;

function Boolean TSDClassPRCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record TSVc TSr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,TSr);
    TSVc_PastePRCode(TSr,rownr);
    PutWindowRecord(wn,TSr);    
  end;
  TSDClassPRCodeEFAfter = res;
  RETURN;
END;

function Boolean TSDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record TSVc TSr;
  Boolean res;
  string 255 inwarn;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,TSr);
    if (TSVc_PasteArtCode(TSr,rownr,inwarn)) then begin
      if (nonblank(inwarn)) then begin
        MessageBox(0,inwarn)
      end;
      TSSumUp(TSr);
    end else begin
      Beep;
    end;
    PutWindowRecord(wn,TSr);    
  end;
  TSDClassArtCodeEFAfter = res;
  RETURN;
END;

function Boolean TSDClassQtyEFAfter(Integer wn,Integer rownr,Integer changed)
BEGIN
  record TSVc TSr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,TSr);
    TSSumUp(TSr);
    PutWindowRecord(wn,TSr);    
  end;
  TSDClassQtyEFAfter = res;
  RETURN;
END;

global
function Boolean TSDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "EMCode": res = TSDClassEMCodeEFAfter(wn,rownr,changed);
    case "PRCode": res = TSDClassPRCodeEFAfter(wn,rownr,changed);
    case "ArtCode": res = TSDClassArtCodeEFAfter(wn,rownr,changed);
    case "Qty": res = TSDClassQtyEFAfter(wn,rownr,changed);
  end;
  TSDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean TSDClassOnEnterKey(Integer wn,string fieldname,Integer fn,Integer rownr)
BEGIN
  Boolean res;
  record TSVc TSr;
  
  res = false;
  if ((WindowState(wn)==2) or (WindowState(wn)==1)) then begin//Rs_update,Rs_insert
    GetWindowRecord(wn,TSr);
    TSDEnterSpec(TSr,rownr,fieldname);
    //possibe to split , some fields on client some on server    
    res = true;
    PutWindowRecord(wn,TSr);
  end;
  TSDClassOnEnterKey = true;
  RETURN;
END;

global
procedure CorrectionMarkTSDsm()
BEGIN
  Integer wn;
  Integer rwcnt;
  Integer sfo;
  Integer urow;
  record TSVc TSr;
  row TSVc TSrw;
  string 5 usersign;

  wn = CurWindow;
  if (WindowState(wn)==Rs_insert) then begin goto LCorrectionMarkTSDsm; end;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,TSr);  
    PutWindowRecord(wn,TSr);
    DeselectWindow(wn,false);
  end;
  if (WindowState(wn)!=Rs_update) then begin goto LCorrectionMarkTSDsm; end;
  GetWindowRecord(wn,TSr);
  if (TSr.OKFlag==0) then begin goto LCorrectionMarkTSDsm; end;  
  ClearRow(TSr,TSrw,2);
  TSrw.EMCode = CurrentUser;
  MatRowPut(TSr,MatRowCnt(TSr),TSrw);
  PutWindowRecord(wn,TSr);
LCorrectionMarkTSDsm:;  
  RETURN;
END;
