external procedure WarnFutureDate(Boolean,Date);
remote updating function Boolean RecordAction_rlCheckClear(var record CheckVc);
remote updating function Boolean RecordAction_rlCheckDep(var record CheckVc);
remote Procedure AddCheckAccount(var string,Integer);

Function Integer FindClearDate(String BankCode,String PC)
begin
   Record ClearDVc Clear;
   Integer ret;
 
   Clear.BankCode = BankCode;
   Clear.AreaCode = PC;
   if ReadFirstMain(Clear,2,true) then begin
       ret = Clear.Days;
   end else begin
       ret = 0;
   end;
       
   FindClearDate = ret;
   return;
end;

global 
procedure GetCheckSum()
begin
  Array Integer Checksum;
  Integer i,a,j;
  
  for (i=0;i<=50;i=i+1) begin
    if (j==4) then begin j = 0; end else begin j = j + 1; end;
    if (j == 1) then begin a = 1; end;
    if (j == 2) then begin a = 3; end;
    if (j == 3) then begin a = 5; end;
    if (j == 4) then begin a = 7; end;
    if (j == 5) then begin a = 9; end;
    Checksum[i] = a;
  end;
  return;
end;

global
procedure DecomposeChequeString(String tstr,var String BankCode,var String Desc,var String CheckNr)
begin

  BankCode = left(tstr,3);
  Desc     = mid(tstr,6,4);
  CheckNr  = mid(tstr,10,8);
  return;
end;

function boolean CheckDClassCommentEFAfter(Integer wn,Integer fn,Integer rownr,integer changedf)
begin
  record CheckVc Chq;
  record BankVc Banco;
  String 255 tstr,BankCode,Desc,CheckNr;
  String 1 a;

  if (changedf!=0) then begin
    if (false) then begin
      GetWindowRecord(wn,Chq);
      tstr = Chq.Comment;
      a = right(tstr,1);
      if ( (asc(a) < 48) or (asc(a) > 57) ) then begin
      // EVTB        goto L99;
      end;
      a = left(tstr,1);
      if ( (asc(a) < 48) or (asc(a) > 57) ) then begin
        tstr = mid(tstr,1,1000);
      end;
      DecomposeChequeString(tstr,BankCode,Desc,CheckNr);
      Chq.BankCode = BankCode;
      Chq.Desc     = Desc;
      Chq.CheckNr  = CheckNr;
      Banco.Code = Chq.BankCode;
      if ReadFirstMain(Banco,1,true) then begin
        Chq.BankName = Banco.Name;
      end;
      PutWindowRecord(wn,Chq);
    end;  
  end;
  return;
end;

function Boolean CheckDClassCUCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CUVc CUr;
  record CheckVc Checkr;

  if (changed!=0) then begin
    GetWindowRecord(wn,Checkr);
    CUr.Code= Checkr.CUCode;
    if ReadFirstMain(CUr,1,true) then begin
      Checkr.CUName= CUr.Name;
      Checkr.VATNr = CUr.VATNr;
    end;
    PutWindowRecord(wn,Checkr);
  end;  
  CheckDClassCUCodeEFAfter = res;
  Return;
End;

function Boolean CheckDClassBankCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
Begin
  Boolean res;
  record BankVc Bankr;
  record CheckVc Checkr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,Checkr);
    Bankr.Code= Checkr.BankCode;
    if ReadFirstMain(Bankr,1,true) then begin
      Checkr.BankName = Bankr.Name;
    end;
    if nonblank(Checkr.Desc) then begin
      Checkr.ECDate = AddDay(Checkr.ECDate,FindClearDate(Checkr.BankCode,Checkr.Desc));
    end;
    PutWindowRecord(wn,Checkr);
  end;  
  CheckDClassBankCodeEFAfter = res;
  Return;
End;

function boolean CheckDClassDescEFAfter(Integer wn,Integer fn,Integer rownr,integer changedf)
begin
  record CheckVc Checkr;
  integer cdays,daytype;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,Checkr);
    if nonblank(Checkr.BankCode) then begin
      cdays = FindClearDate(Checkr.BankCode,Checkr.Desc);
      Checkr.ECDate = AddDay(Checkr.ECDate,Cdays);
      daytype = GetDateID(Checkr.ECDate);
      if (daytype==6) then begin 
        Checkr.ECDate = AddDay(Checkr.ECDate,2); 
      end;
      if (daytype==7) then begin 
        Checkr.ECDate = AddDay(Checkr.ECDate,1); 
      end;    
      PutWindowRecord(wn,Checkr);
    end;
  end;
  CheckDClassDescEFAfter = false;
  return;
end;

function Boolean CheckDClassCheckNrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record CheckVc Checkr,Checkr2;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,Checkr);
    Checkr2.CheckNr = Checkr.CheckNr;
    if (ReadFirstKey("CheckNr",Checkr2,1,true)) then begin
       MessageBox(1275,"");
    end;
    PutWindowRecord(wn,Checkr);
  end;  
  CheckDClassCheckNrEFAfter = res;
  return;
end;

function Boolean CheckDClassEffectDateEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  integer Cdays,daytype;
  record CheckVc Checkr,Checkr2;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,Checkr);
    if (Checkr.EffectDate<Checkr.TransDate) then begin
//      Checkr.EffectDate = Checkr.TransDate;// not fine with Argentina and Bolivia
    end;
    
    Checkr.ECDate = Checkr.EffectDate;
    daytype = GetDateID(Checkr.ECDate);
    if (daytype==6) then begin 
      Checkr.ECDate = AddDay(Checkr.ECDate,2); 
    end;
    if (daytype==7) then begin 
      Checkr.ECDate = AddDay(Checkr.ECDate,1); 
    end;
    PutWindowRecord(wn,Checkr);
  end;  
  CheckDClassEffectDateEFAfter = res;
  return;
end;

function Boolean CheckDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CheckVc Checkr;
  
  if (changedf) then begin
    GetWindowRecord(wn,Checkr);
    WarnFutureDate(true,Checkr.TransDate);
  end;  
  CheckDClassTransDateEFAfter = res;
  return;
end;

/* LO DELETED
function Boolean CheckDClassAmountEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record CheckVc Checkr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,Checkr);
    if (Checkr.Openf > 0) then begin
       MessageBox(1275,"");
    end;
    PutWindowRecord(wn,Checkr);
  end;  
  CheckDClassAmountEFAfter = res;
  Return;
end;
*/

global
function Boolean CheckDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Comment": res = CheckDClassCommentEFAfter(wn,fn,rownr,changed);
    case "Desc": res = CheckDClassDescEFAfter(wn,fn,rownr,changed);    
//    case "Amount": res = CheckDClassAmountEFAfter(wn,fn,rownr,changed);
    case "CUCode": res = CheckDClassCUCodeEFAfter(wn,fn,rownr,changed);
    case "BankCode": res = CheckDClassBankCodeEFAfter(wn,fn,rownr,changed);
    case "CheckNr": res = CheckDClassCheckNrEFAfter(wn,fn,rownr,changed);
    case "EffectDate": res = CheckDClassEffectDateEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = CheckDClassTransDateEFAfter(wn,changed!=0);
  end;
  CheckDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean CheckDClassChkModeButtonAction(Integer wn,Integer ns)
begin
  Boolean res;
  record CheckVc Checkr;

  res = true;
  GetWindowRecord(wn,Checkr);
    switch (Checkr.ChkMode) begin
      case 0 :
              AddCheckAccount(Checkr.TargetAccNr,4);
              AddCheckAccount(Checkr.TempAccNr,6);
      case 1 : 
              AddCheckAccount(Checkr.TargetAccNr,4);
              AddCheckAccount(Checkr.TempAccNr,6);
      case 2 :
              AddCheckAccount(Checkr.TargetAccNr,5);
              AddCheckAccount(Checkr.TempAccNr,7);
      case 3 : 
              AddCheckAccount(Checkr.TargetAccNr,5);
              AddCheckAccount(Checkr.TempAccNr,7);
    end;
  PutWindowRecord(wn,Checkr);
  CheckDClassChkModeButtonAction = res;
  Return;
end;

global
function Boolean CheckDClassOpenfButtonAction(Integer wn,Integer ns)
begin
  Boolean res;
  record CheckVc Checkr;
  Integer os;
  record CheckSetBlock CSb;
  
  res = false;  
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,Checkr);
      os = Checkr.Openf;
    case Rs_insert:
      GetWindowRecord(wn,Checkr);
      os = 0;
    case Rs_update:
      GetPrevWindowRecord(wn,Checkr);
      os = Checkr.Openf;
  end;
  if (os==ns) then begin res = true; end;
    
  switch (os) begin
    case kCheckTypeRegistered : 
      if (ns==kCheckTypeAccepted) then begin res = true; end;
    case kCheckTypeAccepted: 
      if (ns==kCheckTypeDeposited) then begin 
        BlockLoad(CSb);
        if (CSb.UseBatchDeposit==0) then begin
          res = true; 
        end else begin
          MessageBox(23082,"");
        end;
      end;
      if (ns==kCheckTypeEndorsed) then begin res = true; end;
      if (ns==kCheckTypeCancelled) then begin res = true; end;
    case kCheckTypeDeposited : 
      if (ns==kCheckTypeReconciled) then begin res = true; end;
      if (ns==kCheckTypeBounced) then begin res = true; end;
    case kCheckTypeReconciled: 
      if (UserCanAction("ReconciledChequeToEndorsed",false)) then begin
        if (ns==kCheckTypeEndorsed) then begin res = true; end;
      end;
    case kCheckTypeEndorsed: 
      if (ns==kCheckTypeBouncedfromEndorsed) then begin res = true; end;
    case kCheckTypeCancelled : 
    case kCheckTypeBounced : 
    case kCheckTypeBouncedfromEndorsed : 
    case kCheckTypeEndorsedfromReconciled :
      if (UserCanAction("EndorsedReconciledChequeToEndorsed",true)) then begin
        if (ns==kCheckTypeEndorsed) then begin res = true; end;
      end;
  end;
  if (not res) then begin Beep; end;
  CheckDClassOpenfButtonAction = res;
  return;
end;

global
function Boolean CheckDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CheckVc Checkr;
  
  res = true;
  GetWindowRecord(wn,Checkr);
  switch (fieldname) begin
    case "SerNr"      : if (Checkr.Openf>0) then begin res = false; end;
    case "Amount"     : if (Checkr.Openf>0) then begin res = false; end;
    case "TransDate"  : if (Checkr.Openf>0) then begin res = false; end;
    case "EffectDate" : if (Checkr.Openf>1) then begin res = false; end;
    case "CUCode"     : if (Checkr.Openf>0) then begin res = false; end;
  end;
  CheckDClassActiveEditField = res;
  RETURN;
END;

global
updating procedure OpenChkOKLsm()
BEGIN
  Integer wn;
  record CheckVc Checkr;
  record CheckSetBlock CSb;
  Integer i;
  
  wn = CurWindow;
  if (UserCanAction("IssueChk",true)) then begin
    BlockLoad(CSb);
    if (CSb.UseBatchDeposit==0) then begin
      i = 1;
      while (GetRecordFromBrowse(Checkr,wn,i)) begin
        if (RecordAction_rlCheckDep(Checkr)) then begin
        end;
        i = i + 1;
      end; 
      UpdateBrowses("CheckVc");
    end else begin
      MessageBox(21131,"");
    end;  
  end else begin
    MessageBox(1274,StringFromStringSet(3,"IssueChk"));
  end;
  
  RETURN;
END;

global
updating procedure ReconileDepChkLsm()
BEGIN
  record CheckVc Checkr;
  Integer wn,i;
  
  wn = CurWindow;  
  if (UserCanAction("IssueChk",true)) then begin
    i = 1;
    while (GetRecordFromBrowse(Checkr,wn,i)) begin
      if (RecordAction_rlCheckClear(Checkr)) then begin
      end;
      i = i + 1;
    end;  
    UpdateBrowses("CheckVc");
  end;
  RETURN;
END;
