external procedure AutomatedSalesOrderly(string);
remote function Integer POApprovalStatus(record POVc,var record AcceptanceRulesVc);
remote function Integer POTestApprovalStatus(record POVc);
remote procedure PODClassOnOpenWindowRemote(var record POVc,var Integer);
remote updating function Integer RecordAction_POOrdDownPay(LongInt,val,val,var record VIVc,var string,Integer);
remote procedure POSetShipCost(var record POVc,Integer);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
remote procedure POVc_PasteTaxTemplateCode(var record POVc,Integer,var Boolean);
remote updating function LongInt RecordAction_raPastePOInDropSH(var record POVc,var record DropSHVc);
remote function Boolean POShipdTest(record POVc,Boolean);
external function roundmode DefaultRoundMode();
remote procedure POVc_PasteStockType(var record POVc,Integer);
remote procedure POVc_PasteTREO(var record POVc,Integer);
remote procedure POVc_PasteCurncyCode(var record POVc,string,Boolean);
// The sumup functions are remote, they should be able to NOT be remote...then some of these functions would not be remote...
external function Boolean DateWarned(Date,string);
remote updating function Integer CreateVIFromPO(LongInt,record RcVc,var record VIVc);
remote function Boolean POVc_PasteLocation(var record POVc);
external function Boolean TestForMATVARINS(Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
remote procedure POVc_PasteVATCode(var record POVc,Integer);
remote procedure POVc_PasteSum(var record POVc,Integer);
remote procedure POVc_PastePrice(var record POVc,Integer);
remote procedure POVc_PastevRebate(var record POVc,Integer);
remote procedure POVc_PasteVEQuant(var record POVc,Integer);
remote procedure POVc_PasteQuant(var record POVc,Integer);
remote function Boolean POVc_PasteVEArtCode(var record POVc,Integer);
remote function Boolean POVc_PasteArtCode(var record POVc,Integer,Boolean);
remote function Boolean POVc_PasteVECode(var record POVc,Boolean);
remote procedure POGetRate(var record POVc);
external procedure GetSalesGroup(string,var string);
external function Boolean AllowCurChange(string,Boolean);
remote procedure POSumup(var record POVc );
external updating procedure POCreateHtmlFile(record POVc,record MailVc);
remote updating function Integer CreateMailFromPOD(record POVc,var record MailVc,var string,string);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure VIOpenPrepExists(string);
remote updating function Boolean RecordAction_rlPOLClose(var record POVc);
remote updating function Boolean RecordAction_rlPOLOK(var record POVc);
remote updating procedure POCreate(record RcVc);
external updating procedure RecordActionPO_Print(var record POVc,string,Boolean);
remote updating function LongInt RecordAction_raPastePOInPU(var record POVc,var record PUVc);
external function Boolean PODClassCost1_5EFAfter(Integer,Integer,Integer,Integer,Integer);
external function Boolean PODClassRowCost1_5EFAfter(Integer,Integer,Integer,Integer,Integer);
external function Boolean PODClassShipCostEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PODClassCustomsCostEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PODchrsum(record POVc,Integer);
external function Boolean UserCanChangePendingRecord(Integer);
external function Boolean OpenContactRecord(string,string);

global
updating procedure DropSHFromPODsm()
begin
  record POVc POr;
  record DropSHVc DropSHr;
  LongInt r;
  Integer wn,nwn;
  Boolean testf;
  record AcceptSetBlock AcceptSet;
  record POSettingBlock POSb;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (WindowDoOK(wn,0)==false) then begin
      goto LDropSHFromPODsm;
    end;
  end;
  if (UserCanAction("POToDropSH",true)) then begin
    BlockLoad(POSb);
    GetWindowRecord(wn,POr);
    if (POr.Closed==0) then begin
      testf = true;
/*JJDS      
      if (POr.OrderType!=kOrderTypeDropShip) then begin 
        MessageBox(22073,"");
        testf = false;
        WindowFieldGoto(wn,POr,-1,"OrderType",true);
      end;
*/      
      if (testf) then begin
        r = RecordAction_raPastePOInDropSH(POr,DropSHr);
        switch (r) begin
          case -1: Beep;
          case -2: MessageBox(1281,"");
          case 0:
            nwn = OpenWindow("DropSHDClass",1,0,"","",DropSHr);
            SetRLink(wn,true);  
          otherwise
            MessageBox(r,"");
        end;
        UpdateBrowses("POVc");
      end;       
    end else begin
      MessageBox(22062,"");
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"POToDropSH"));
  end;    
LDropSHFromPODsm:;
  return;
end;

function Boolean AnyNextReservationsExists() // Could get better if we want to
begin
  record StockReservVc StockReservr;
  Boolean foundf;
  Boolean res;
  
  res = false;
  StockReservr.Donef = 0;
  StockReservr.ToFileName = kResTypeNextStockIn;
  StockReservr.ToSerNr = -1;
  foundf = true;
  while (LoopKey("ToItem",StockReservr,3,foundf)) begin
    if (StockReservr.Donef!=0) then begin foundf = false; end;
    if (StockReservr.ToFileName!=kResTypeNextStockIn) then begin foundf = false; end;
    if (StockReservr.ToSerNr!=-1) then begin foundf = false; end;
    if (foundf) then begin
      res = true;
      foundf = false;
    end;
  end;
  AnyNextReservationsExists = res;
  return;
end;

global
updating procedure PUFromPODsm()
BEGIN
  record POVc POr;
  record PUVc PUr;
  LongInt r;
  Integer wn,nwn,err;
  Boolean testf;
  record POSettingBlock POSb;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,POr);
    switch (POr.OrderType) begin
      case kOrderTypeDropShip:
        DropSHFromPODsm;
        goto LPUFromPODsm; 
    end;
    if (UserCanAction("POToPU",true)) then begin
      BlockLoad(POSb);
      if (POr.Closed==0) then begin
        testf = true;
        if (POr.OKFlag==0) then begin 
          if ((AnyNextReservationsExists) or (POSb.POMustBeOKToPU!=0) or (UserCanAction("NotOKPOToPU",false))) then begin
            testf = false;
            MessageBox(20053,"");
          end; 
        end;
        err = POTestApprovalStatus(POr);
        if (err!=0) then begin
          MessageBox(err,"");
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPastePOInPU(POr,PUr);
          switch (r) begin
            case -1: Beep;
            case -2: MessageBox(1281,"");
            case 0:
              nwn = OpenWindow("PUDClass",1,0,"","",PUr);
              SetRLink(wn,true);  
            otherwise
              MessageBox(r,"");
          end;
          UpdateBrowses("POVc");
        end;       
      end else begin
        MessageBox(22062,"");
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"POToPU"));
    end;    
  end else begin
    Beep;
  end;
LPUFromPODsm:;  
  return;
end;

global
updating function Boolean PODClassPrint(Integer wn,Boolean previewf)
begin
  record POVc POr;
  Boolean testf;
  Integer err;
 
  testf = true;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,POr); 
  if (UserCanAction("PrintPreviewNotApproved",false)==false) then begin
    err = POTestApprovalStatus(POr);
  end;
  if (err!=0) then begin
    MessageBox(err,"");
    testf = false;
  end;
  if (testf) then begin
    RecordActionPO_Print(POr,false,true);
  end;
  PODClassPrint = true;
  return;
end;

global
updating procedure PrintPOL(Integer wn,Boolean previewf)
BEGIN
  record POVc POr;
  Integer i,err;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(POr,wn,i)) begin
    err = POTestApprovalStatus(POr);
    if (err!=0) then begin
      MessageBox(err," " & POr.SerNr);
      goto LSKIPOrderPOL;
    end;
    RecordActionPO_Print(POr,previewf,true);
LSKIPOrderPOL:;    
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;


global
procedure POCreatePOLsm()
BEGIN
  Integer nwn,wn;
  record RcVc RepSpec;

  wn = CurWindow;
  ReportDefaults(RepSpec,"CreatePOVClass");
  nwn = OpenWindow("CreatePOVClass",1,wn,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.repname = "POCreateMn";
  PutWindowRecord(nwn,RepSpec);
  RETURN;
END;

global
updating function Boolean CreatePOVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  GetWindowRecord(wn,RepSpec);
  POCreate(RepSpec);
  CloseWindow(wn);
  CreatePOVClassOnOKWindow = false;
  RETURN;
END;

global
updating procedure PUFromPOLsm()
BEGIN
  record POVc POr;
  record PUVc PUr;
  LongInt r;
  Integer wn,nwn,err;
  Boolean testf;
  record POSettingBlock POSb;
  
  wn = CurWindow;
  if (UserCanAction("POToPU",true)) then begin
    if (ReadMarkedRecord(wn,POr)) then begin//Rs_normal
      testf = true;
      BlockLoad(POSb);
      if (POr.OKFlag==0) then begin 
        if ((AnyNextReservationsExists) or (POSb.POMustBeOKToPU!=0) or (UserCanAction("NotOKPOToPU",false))) then begin
          testf = false;
          MessageBox(20053,"");
        end; 
      end;
      err = POTestApprovalStatus(POr);
      if (err!=0) then begin
        MessageBox(err,"");
        testf = false;
      end;
      if (testf) then begin
        r = RecordAction_raPastePOInPU(POr,PUr);
        switch (r) begin
          case -1: Beep;
          case -2: MessageBox(1281,"");
          otherwise
            nwn = OpenWindow("PUDClass",1,0,"","",PUr);
        end;
        UpdateBrowses("POVc");
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"POToPU"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure OKPOLsm()
BEGIN
  record POVc POr;
  Integer i;
  Integer wn,err;
  Boolean testf;
  
  if (UserCanAction("POOK",true)) then begin
    wn = CurWindow;
    i = 1;
    while (GetRecordFromBrowse(POr,wn,i)) begin
      testf = true;
      err = POTestApprovalStatus(POr);
      if (err!=0) then begin
        MessageBox(err,"");
        testf = false;
      end;
      if (testf) then begin
        if (RecordAction_rlPOLOK(POr)) then begin
        end;
      end;
      i = i + 1;
    end;
    UpdateBrowses("POVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"POOK"));
  end;
  RETURN;
END;

global
updating procedure ClosePOLsm()
BEGIN
  record POVc POr;
  Integer i;
  Integer wn;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(POr,wn,i)) begin
    if (RecordAction_rlPOLClose(POr)) then begin
    end;
    i = i + 1;
  end;
  UpdateBrowses("POVc");
  RETURN;
END;
/*
global
updating procedure VIFromPODsm()
BEGIN
  record POVc POr;
  record VIVc VIr;
  LongInt r;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("POToVI",true)) then begin
      GetWindowRecord(wn,POr);
      r = RecordAction_raPastePOInVI(POr,VIr);
      if (r!=0) begin
        if (r>0) then begin
          MessageBox(r,"");
        end else begin
          Beep;
        end;
      end else begin
        nwn = OpenWindow("VIDClass",1,0,"","",VIr);
        VIOpenPrepExists(VIr.VECode);          
        SetRLink(wn,true);  
      end;
      UpdateBrowses("POVc");
    end else begin
      MessageBox(1274,StringFromStringSet(3,"POToVI"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;
*/

global
updating procedure VIFromPODExecute(LongInt PONr)
begin
  Integer nwn;
  record RcVc RepSpec;
  record POSettingBlock POSb;
  record VIVc VIr;
  Integer r;

  if (UserCanAction("POToVI",true)) then begin
    BlockLoad(POSb);
    ReportDefaults(RepSpec,"VIFromPOVClass");
    RepSpec.repname = "";
    RepSpec.FirstVer = PONr;
    RepSpec.flags[0] = 1;
    if (POSb.OpenCreateVIFromPO!=0) then begin
      nwn = OpenWindow("VIFromPOVClass",1,0,"","",RepSpec);
      PutWindowRecord(nwn,RepSpec);
      SelectWindow(nwn);
    end else begin
      RepSpec.flags[0] = 1;
      RepSpec.flags[1] = 1;
      RepSpec.flags[2] = 1;
      RepSpec.flags[3] = 1;
      RepSpec.flags[4] = 1;
      RepSpec.flags[5] = 1;
      RepSpec.flags[6] = 1;
      RepSpec.flags[7] = 1;
      r = CreateVIFromPO(RepSpec.FirstVer,RepSpec,VIr);
      if (r!=0) begin
        if (r>0) then begin
          MessageBox(r,"");
        end else begin
          Beep;
        end;
      end else begin
        nwn = OpenWindow("VIDClass",1,0,"","",VIr);
        VIOpenPrepExists(VIr.VECode);        
        UpdateBrowses("POVc");    
        if (DateWarned(VIr.TransDate,"VIVc")) then begin
          MessageBox(1045,"");
        end;
      end;      
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"POToVI"));
  end;
  return;
end;

global
updating procedure VIFromPODsm()
begin
  Integer wn;
  record POVc POr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,POr);
    VIFromPODExecute(POr.SerNr);
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating function Boolean VIFromPOVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  record VIVc VIr;
  Integer nwn;
  Integer r;
  
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin
    if (RepSpec.flags[0]==0) then begin
//      if ((RepSpec.flags[1]!=0) or (RepSpec.flags[2]!=0) or (RepSpec.flags[3]!=0) or (RepSpec.flags[4]!=0) or (RepSpec.flags[5]!=0) or (RepSpec.flags[6]!=0) or (RepSpec.flags[7]!=0)) then begin
      if ((RepSpec.flags[6]!=0) or (RepSpec.flags[7]!=0)) then begin
        MessageBox(0,USetStr(10426));
        WindowFieldGoto(wn,RepSpec,-1,"f1",true);        
        goto LVIFromPOVClassOnOKWindow;
      end;
    end;
  end;
  r = CreateVIFromPO(RepSpec.FirstVer,RepSpec,VIr);
  if (r!=0) begin
    if (r>0) then begin
      MessageBox(r,"");
    end else begin
      Beep;
    end;
  end else begin
    nwn = OpenWindow("VIDClass",1,0,"","",VIr);
    VIOpenPrepExists(VIr.VECode);        
    UpdateBrowses("POVc");    
  end;
  CloseWindow(wn);
LVIFromPOVClassOnOKWindow:;  
  VIFromPOVClassOnOKWindow = false;
  RETURN;
END;

procedure PODSwitchRow(Integer wn,Integer rownr)
BEGIN
  record POVc POr;  
  row POVc POrw; 
  Integer rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum;
  record TaxMatrixVc TMr;

  res = true;
  if (rownr>=0) then begin
    GetWindowRecord(wn,POr);
    rwcnt = MatRowCnt(POr);  
    if (rownr<rwcnt) then begin
      MatRowGet(POr,rownr,POrw);
      if (POrw.stp==1) then begin
        s = MulRateToBase1(POr.CurncyCode,POrw.Sum,POr.FrRate,POr.ToRateB1,POr.ToRateB2,POr.BaseRate1,POr.BaseRate2,DefaultCurRoundOff);
        UnpackRowFieldMatrix(POrw,"TaxMatrix",TMr);
        FindSalesExVat(TMr,POrw.VATCode,s,POr.InclVAT,0,rowsum);
        CalcProc(rowsum,t,tproc);
        unitprdisc = POrw.Sum/POrw.Quant;
        unitprdisc = Round(unitprdisc,DefaultRoundMode);
      end;
      SendArtStat(POrw.ArtCode,POr.Location,"",0,tproc,unitprdisc,POr.TransDate,1);
    end;
  end;
  SetWindowNameArg(wn,POrw.ArtCode & ":" & POr.Location);
  RETURN;
END;

global
function Boolean PODClassSwitchRow(Integer wn,Integer rownr)
begin        
  PODSwitchRow(wn,rownr);
  PODClassSwitchRow = true;  
  return;
end;

global
procedure ItemStatusPODsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,true);
  PODSwitchRow(wn,WindowActiveRow(wn));
  RETURN;
END;

global 
updating procedure CreateMailFromPODsm()
BEGIN
  Integer wn,nwn;
  record MailVc Mailr;
  record POVc POr;
  Integer err;
  string 255 tstr;
  Boolean testf;
  string 255 docname;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,POr);  
    testf = true;
    if (POr.OKFlag==0) then begin
    end else begin
      if (UserCanAction("EMailFromOKPO",false)==false) then begin 
        testf = false; 
        MessageBox(1274,StringFromStringSet(3,"EMailFromOKPO"));
      end;
    end;
    err = POTestApprovalStatus(POr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      err = CreateMailFromPOD(POr,Mailr,tstr,WindowFormName(wn));
      if (err!=0) then begin
        MessageBox(err,": " & tstr);
      end else begin
        nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
      end;
    end;
  end;
  RETURN;
END;

global
procedure SubtotalPODsm()
BEGIN
  record POVc POr;
  row POVc POrw;
  Integer wn,i,rwcnt,rownr;
  val pt;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DoUpdate(wn);
  end;
  if (WindowState(wn)!=Rs_update and WindowState(wn)!=Rs_insert) then begin
    goto LSubtotalPODsm;
  end;
  GetWindowRecord(wn,POr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  if (rownr==-1) then begin
    rwcnt = MatRowCnt(POr);
  end else begin
    rwcnt = rownr + 1;
  end;
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(POr,i,POrw);
    if (POrw.stp!=9) then begin
      pt = pt + POrw.Sum;
    end else begin
      if (POrw.Sum!=0) then begin goto LBREAK; end;
    end;
  end;
LBREAK:;  
  ClearRow(POr,POrw,9);
  POrw.Sum = pt;
  MatRowInsert(POr,rwcnt,POrw);
  PutWindowRecord(wn,POr);
LSubtotalPODsm:;  
  RETURN;
END;

global
procedure POStatRnPODsm()
BEGIN
  record RcVc RepSpec;
  record POVc POr;

  GetWindowRecord(CurWindow,POr);
  RepSpec.f1 = POr.SerNr;
  RepSpec.sStartDate = POr.TransDate;
  RepSpec.sEndDate = POr.TransDate;
  RepSpec.ArtMode = 1;   //Detailed
  RepSpec.flags[4] = 1;  //Indicates that report was run from Special Menu opf PODClass
  RepSpec.flags[3] = 1;  //include Not Oked
  RepSpec.flags[1] = 1;  //Include Closed
  RepSpec.Media = mtScreen;
  RepSpec.repname = "POStatRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure POStatusORLsm()
BEGIN
  record RcVc RepSpec;
  record POVc POr;
  
  if (ReadMarkedRecord(CurWindow,POr)) then begin
    RepSpec.f1 = POr.SerNr;
    RepSpec.sStartDate=POr.TransDate;
    RepSpec.sEndDate=POr.TransDate;
    RepSpec.ArtMode=1;   //Detailed
    RepSpec.flags[4]=1;  //Indicates that report was run from Special Menu opf PODClass
    RepSpec.flags[3]=1;  //include Not Oked
    RepSpec.flags[1]=1;  //Include Closed
    RepSpec.Media = mtScreen;
    RepSpec.repname = "POStatRn";
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
function Boolean PODClassInclVATButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record POVc POr;
 
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,POr);
    if (POr.Closed!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,POr);
    if (POr.Closed!=0) then begin
      res = false;
    end;
  end;  
  PODClassInclVATButtonAction = res;
  RETURN;
END;

global
function Boolean PODClassClosedButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record POVc POr;
 
  res = true;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,POr);
    if (POr.Closed!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,POr);
    if (POr.Closed!=0) then begin
      res = false;
    end;
  end;  
  PODClassClosedButtonAction = res;
  RETURN;
END;

function Boolean POApprovalStarted(record POVc POr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (POApprovalStatus(POr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  POApprovalStarted = res;
  return;
end;

global
function Boolean PODClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record POVc POr;
  record POSettingBlock POSb;
  Integer err;
 
  BlockLoad(POSb);
  res = true;
  if (WindowState(wn)==Rs_insert) then begin
    GetWindowRecord(wn,POr);
    err = POTestApprovalStatus(POr);
    if (err!=0) then begin
      MessageBox(err,"");
      res = false;
      goto LPODClassOKFlagButtonAction;
    end;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,POr);
    if (POr.Closed!=0) then begin
      res = false;
    end;
    if (res) then begin
      err = POTestApprovalStatus(POr);
      if (err!=0) then begin
        MessageBox(err,"");
        res = false;
        goto LPODClassOKFlagButtonAction;
      end;
      if (POr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKPO",false)) or (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,POr);
    if (POr.Closed!=0) then begin
      res = false;
    end;
    if (res) then begin
      err = POTestApprovalStatus(POr);
      if (err!=0) then begin
        MessageBox(err,"");
        res = false;
        goto LPODClassOKFlagButtonAction;
      end;
      if (POr.OKFlag!=0) then begin
        res = false;
        if (UserCanAction("UnOKPO",false)) or (UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    end;
  end; 
LPODClassOKFlagButtonAction:;   
  PODClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean PODClassExtraCostsCalculationButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record POVc POr;
  Integer err;
  record PUVc PUr;

  res = true;  
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,POr);
      if (POr.OKFlag!=0) then begin res = false; end;
      if (res) then begin
        PUr.PONr = POr.SerNr;
        res = !ReadFirstKey("PONr",PUr,1,true);
      end;
      if (res) then begin
        err = POTestApprovalStatus(POr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LPODClassExtraCostsCalculationButtonAction;
        end;
      end;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,POr);
      if (POr.OKFlag!=0) then begin res = false; end;    
      if (res) then begin
        PUr.PONr = POr.SerNr;
        res = !ReadFirstKey("PONr",PUr,1,true);
      end;
      if (res) then begin
        err = POTestApprovalStatus(POr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LPODClassExtraCostsCalculationButtonAction;
        end;
      end;
  end;  
LPODClassExtraCostsCalculationButtonAction:;  
  PODClassExtraCostsCalculationButtonAction = res;
  return;
end;

global
function Boolean PODClassExtraCostsCalculationButtonAfter(Integer wn,Boolean changedf)
begin        
  record POVc POr;  
  Boolean res;

  GetWindowRecord(wn,POr);
  POSetShipCost(POr,1);
  POSetShipCost(POr,2);
  POSetShipCost(POr,3);
  POSetShipCost(POr,4);
  POSetShipCost(POr,5);
  POSetShipCost(POr,6);
  POSetShipCost(POr,7);
  POSumup(POr);
  PutWindowRecord(wn,POr);
  PODClassExtraCostsCalculationButtonAfter = res;  
  return;
end;

global
function Boolean PODClassExportFlagButtonAfter(Integer wn,Boolean changedf)
begin        
  record POVc POr;  
  Boolean res;

  GetWindowRecord(wn,POr);
  POSumup(POr);
  PutWindowRecord(wn,POr);
  PODClassExportFlagButtonAfter = res;  
  return;
end;

function Boolean POShipdFromRowTest(record POVc POp,Integer rownr)
begin
  Boolean res;
  Integer i,rwcnt;
  row POVc POrw;
  
  rwcnt = MatRowCnt(POp);
  for (i=rownr;i<rwcnt;i=i+1) begin
    MatRowGet(POp,i,POrw);
    if (POrw.Shipd1>0) or (POrw.Invd>0) then begin
      res = true;
      goto LPOShipdFromRowTest;
    end;
  end;
LPOShipdFromRowTest:;
  POShipdFromRowTest = res;
  return;
end;

global 
function Boolean PODClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record POVc POr;
  record POVc PO2r;
  Boolean res;

  res = true;
  GetWindowRecord(wn,POr);
  if (POr.OrderType==kOrderTypeDropShip) then begin 
    res = false;
    goto LPODClassDeleteRowTest;
  end;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,PO2r);
    if (POApprovalStarted(POr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
      res = false;
      goto LPODClassDeleteRowTest;
    end;
    
    if (POShipdFromRowTest(POr,rownr)) then begin
      res = false;
      MessageBox(1304,"");
    end;
    if (PO2r.OKFlag) then begin
      res = false;
      MessageBox(20589,"");
    end;
  end;
LPODClassDeleteRowTest:;  
  PODClassDeleteRowTest = res;
  return;
end;

global 
function Boolean PODClassInsertRowTest(Integer wn,Integer rownr)
begin
  record POVc POr;
  record POVc PO2r;
  Boolean res;

  res = false;  
  GetWindowRecord(wn,POr);
  if (POr.Closed==0) then begin
    res = true;  
    if (POApprovalStarted(POr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
      res = false;
      goto LPODClassInsertRowTest;
    end;
    if (POr.OrderType==kOrderTypeDropShip) then begin 
      res = false;
      goto LPODClassInsertRowTest;
    end;
    switch (WindowState(wn)) begin
      case 0://Rs_normal
        if (POShipdTest(POr,true)) or (POr.OKFlag!=0) then begin res = false; end;
      case 1://Rs_insert
        res = true;
      case 2://Rs_update
        GetPrevWindowRecord(wn,PO2r);
        if (POShipdTest(PO2r,true)) or (POr.OKFlag!=0) then begin res = false; end;
      otherwise
        res = false;
    end;
  end;  
LPODClassInsertRowTest:;  
  PODClassInsertRowTest = res;
  return;
end;

global
function Boolean PODClassOnOverStrike(Integer wn,Integer rownr)
begin
  record POVc POr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,POr);    
    POSumup(POr);
    PutWindowRecord(wn,POr);    
  end;
  PODClassOnOverStrike = true;
  return;
end;

/*newapproval*/
global
function Boolean PODClassOnOpenWindow(Integer wn)
begin
  record POVc POr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,POr);
  PODClassOnOpenWindowRemote(POr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  PODClassOnOpenWindow = false;
  return;
end;

global
procedure PODClassOnWindowRecordChange(Integer wn)
begin
  record POVc POr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,POr);
  PODClassOnOpenWindowRemote(POr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;

global
function Boolean PODClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record POVc POr;
  record POVc PO2r;
  record MainStockBlock MSb;
  record INVc INr;
  row POVc POrw;
  Integer nwn;
  
  res = true;
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LPODClassActiveEditField;
    end;
  end;
  GetWindowRecord(wn,POr); 
  switch (fieldname) begin
    case "SerNr":
      switch (wnst) begin
        case Rs_insert:
          if (UserCanAction("AllowPOSerNrChange",true)==false) then begin res = false; end;
        otherwise
           res = false;
           goto LPODClassActiveEditField;
      end;
    case "FrRate": 
      if (AllowCurChange(POr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB1": 
      if (AllowCurChange(POr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB2": 
      if (AllowCurChange(POr.CurncyCode,false)==false) then begin res = false; end;
    case "BaseRate1": 
      if (AllowCurChange(POr.CurncyCode,true)==false) then begin res = false; end;
    case "BaseRate2": 
      if (AllowCurChange(POr.CurncyCode,true)==false) then begin res = false; end;  
    case "Shipd1": 
       res = false;
    case "Shipd2": 
       MatRowGet(POr,rownr,POrw);
       if (POrw.Shipd2<=POrw.Quant) then begin
         BlockLoad(MSb);
         switch (MSb.RecevPlainItems) begin
           case 2:
             res = false;
             INr.Code = POrw.ArtCode;
             if (ReadFIrstMain(INr,1,true)) then begin
               if (INr.ItemType==0) or (INr.ItemType==3) then begin
                 res = true;
               end;
             end;
           otherwise
             res = false;
         end;
       end;
    case "Invd": 
       res = false;
    case "Spec":
      if (HasLocalization("PRT")) then begin
        MatRowGet(POr,rownr,POrw);
        if (nonblank(POrw.ArtCode)) then begin
          res = false;
        end;
      end;
  end;
  if (res==false) then begin
    goto LPODClassActiveEditField;
  end;
  if (wnst==2) then begin//Rs_update
    GetPrevWindowRecord(wn,PO2r);
    if (POApprovalStarted(POr) and UserCanChangePendingRecord(rownr)==false) then begin
      res = false;
      goto LPODClassActiveEditField;
    end;
    if (PO2r.OKFlag!=0) then begin
      switch (fieldname) begin
        case "PlanShip": res = true;
        case "LangCode": res = true;
        otherwise res = false;
      end;
      if (rownr>=0) then begin
        res = true;
        switch (fieldname) begin
          case "PlanShipRow":
            res = true;
          otherwise
            res = false;
            goto LPODClassActiveEditField;
        end;
      end else begin
        if (res==false) then begin goto LPODClassActiveEditField; end;
      end;      
    end else begin
      if (POr.OrderType==kOrderTypeDropShip) then begin 
        switch (fieldname) begin
          case "ArtCode": res = false;
          case "Quant": res = false;
        end;
        if (res==false) then begin goto LPODClassActiveEditField; end;
      end;
      if (POShipdTest(POr,true)==false) then begin goto LPODClassActiveEditField; end;
      if (rownr<WindowOldRowcnt(wn)) then begin
        switch (fieldname) begin
          case "ArtCode":
            res = false;
            if (changed!=0) then begin MessageBox(1304,""); end;
            goto LPODClassActiveEditField;          
          case "StockType":
            res = false;
            goto LPODClassActiveEditField;          
        end;
      end;
    end;
  end;
LPODClassActiveEditField:;  
  PODClassActiveEditField = res;
  return;
end;

function Boolean PODClassPlanShipEFAfter(Integer wn,Boolean changedf)
begin
  record POVc POr;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;
  
  if (changedf) then begin
    BlockLoad(PlanDelRec);
    GetWindowRecord(wn,POr);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = POr.PlanShip;
        POr.PlanShip = d;
        POr.PlanShipDate = StringToDate(POr.PlanShip);
      case 2:  /* week number (nn) */
        week = POr.PlanShip;
        POr.PlanShip = week;
      case 3:  /* week number (yynn */
        if (nonblank(POr.PlanShip)) then begin
          week = POr.PlanShip;
          POr.PlanShip = week;
          if (len(POr.PlanShip)<4) then begin
            POr.PlanShip = "0" & POr.PlanShip;
          end;
          if (len(POr.PlanShip)>4) then begin
            POr.PlanShip = Left(POr.PlanShip,4);
          end;
        end;
    end;
    PutWindowRecord(wn,POr);    
  end;
  PODClassPlanShipEFAfter = true;
  return;
end;

function Boolean PODClassSalesManEFAfter(Integer wn,Boolean changedf)
BEGIN
  record POVc POr;
  string 255 tstr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    GetSalesGroup(POr.SalesMan,tstr);
    POr.SalesGroup = tstr;
    PutWindowRecord(wn,POr);
  end;
  PODClassSalesManEFAfter = true;
  return;
end;

function Boolean PODClassCurncyCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteCurncyCode(POr,WindEFstr(wn),true);    
    PutWindowRecord(wn,POr);
  end;
  PODClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean PODClassTransDateEFAfter(Integer wn,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POGetRate(POr);
    PutWindowRecord(wn,POr);
  end;
  PODClassTransDateEFAfter = true;
  return;
end;

function Boolean PODClassLocationEFAfter(Integer wn,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    if (POVc_PasteLocation(POr)==false) then begin
      Beep;
    end;
    PutWindowRecord(wn,POr);
  end;
  PODClassLocationEFAfter = true;
  return;
end;

function Boolean PODClassVECodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    if (POVc_PasteVECode(POr,true)) then begin
      PutWindowRecord(wn,POr);
    end else begin
      Beep;
    end;
  end;
  PODClassVECodeEFAfter = true;
  return;
end;

function Boolean PODClassPRCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;
  row POVc POrw;
  record PRVc PRr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);   
    if (rownr<0) then begin
      if (nonblank(POr.PRCode)) then begin
        PRr.Code = POr.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          if (nonblank(POr.Objects)) then begin
            POr.Objects = POr.Objects & ",";
          end;
          POr.Objects = POr.Objects & PRr.Objects;
        end;
      end;
    end else begin
      MatRowGet(POr,rownr,POrw);
      if (nonblank(POrw.PRCode)) then begin
        PRr.Code = POrw.PRCode;
        if (ReadFirstMain(PRr,1,true)) then begin
          if (nonblank(POrw.Objects)) then begin
            POrw.Objects = POrw.Objects & ",";
          end;
          POrw.Objects = POrw.Objects & PRr.Objects;
        end;
      end;
      MatRowPut(POr,rownr,POrw);
    end; 
    PutWindowRecord(wn,POr);   
    AutomatedSalesOrderly("HasModTS+Edit_POVc");
  end;
  PODClassPRCodeEFAfter = true;
  return;
end;

function Boolean PODClassPlanShipRowEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record POVc POr;
  row POVc POrw;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;
  
  if (changedf) then begin
    BlockLoad(PlanDelRec);
    GetWindowRecord(wn,POr);
    MatRowGet(POr,rownr,POrw);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = POrw.PlanShipRow;
        POrw.PlanShipRow = d;
      case 2:  /* week number (nn) */
        week = POrw.PlanShipRow;
        POrw.PlanShipRow = week;
      case 3:  /* week number (yynn */
        week = POrw.PlanShipRow;
        POrw.PlanShipRow = week;
        if (len(POrw.PlanShipRow)<4) then begin
          POrw.PlanShipRow = "0" & POrw.PlanShipRow;
        end;
        if (len(POrw.PlanShipRow)>4) then begin
          POrw.PlanShipRow = Left(POrw.PlanShipRow,4);
        end;
    end;
    MatRowPut(POr,rownr,POrw);
    PutWindowRecord(wn,POr);    
  end;
  PODClassPlanShipRowEFAfter = true;
  return;
end;

function Boolean PODClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;
  row POVc POrw;

  GetWindowRecord(wn,POr);    
  MatRowGet(POr,rownr,POrw);
  if ((changedf) or (blank(POrw.Spec) and (nonblank(POrw.ArtCode)))) then begin
    if (POVc_PasteArtCode(POr,rownr,false)) then begin
      PutWindowRecord(wn,POr);
      if (PODClassSwitchRow(wn,rownr)) then begin end;
    end else begin
      Beep;
    end;
  end;
  PODClassArtCodeEFAfter = true;
  return;
end;

function Boolean PODClassVEArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    if (POVc_PasteVEArtCode(POr,rownr)) then begin
      PutWindowRecord(wn,POr);
    end else begin
      Beep;
    end;
  end;
  PODClassVEArtCodeEFAfter = true;
  return;
end;

function Boolean PODClassQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteQuant(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassQuantEFAfter = true;
  return;
end;

function Boolean PODClassVEQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteVEQuant(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassVEQuantEFAfter = true;
  return;
end;

function Boolean PODClassPriceEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PastePrice(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassPriceEFAfter = true;
  return;
end;

function Boolean PODClassvRebateEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PastevRebate(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassvRebateEFAfter = true;
  return;
end;

function Boolean PODClassSumEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteSum(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassSumEFAfter = true;
  return;
end;

function Boolean PODClassVATCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteVATCode(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassVATCodeEFAfter = true;
  return;
end;

function Boolean PODClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record POVc POr;
  Boolean chsum;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteTaxTemplateCode(POr,rownr,chsum);
    if (chsum) then begin
      PODchrsum(POr,rownr);
    end;
    POSumup(POr);
    PutWindowRecord(wn,POr);
  end;
  PODClassTaxTemplateCodeEFAfter = true;
  return;
end;

function Boolean PODClassStockTypeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteStockType(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassStockTypeEFAfter = true;
  return;
end;

function Boolean PODClassTREOEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record POVc POr;

  if (changedf) then begin
    GetWindowRecord(wn,POr);    
    POVc_PasteTREO(POr,rownr);
    POVc_PasteVATCode(POr,rownr);
    PutWindowRecord(wn,POr);
  end;
  PODClassTREOEFAfter = true;
  return;
end;

global
function Boolean PODClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PlanShip": res = PODClassPlanShipEFAfter(wn,changed!=0);
    case "SalesMan": res = PODClassSalesManEFAfter(wn,changed!=0);
    case "CurncyCode": res = PODClassCurncyCodeEFAfter(wn,changed!=0);
    case "TransDate": res = PODClassTransDateEFAfter(wn,changed!=0);
    case "Location": res = PODClassLocationEFAfter(wn,changed!=0);
    case "VECode": res = PODClassVECodeEFAfter(wn,changed!=0);
    case "PRCode": res = PODClassPRCodeEFAfter(wn,rownr,changed!=0);

    case "PlanShipRow": res = PODClassPlanShipRowEFAfter(wn,rownr,changed!=0);
    case "ArtCode": res = PODClassArtCodeEFAfter(wn,rownr,changed!=0);
    case "VEArtCode": res = PODClassVEArtCodeEFAfter(wn,rownr,changed!=0);
    case "Quant": res = PODClassQuantEFAfter(wn,rownr,changed!=0);
    case "VEQuant": res = PODClassVEQuantEFAfter(wn,rownr,changed!=0);
    case "Price": res = PODClassPriceEFAfter(wn,rownr,changed!=0);
    case "vRebate": res = PODClassvRebateEFAfter(wn,rownr,changed!=0);
    case "Sum": res = PODClassSumEFAfter(wn,rownr,changed!=0);
    case "VATCode": res = PODClassVATCodeEFAfter(wn,rownr,changed!=0);
    case "TaxTemplateCode": res = PODClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    
    case "Cost1": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,1);
    case "Cost2": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,2);
    case "Cost3": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,3);
    case "Cost4": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,4);
    case "Cost5": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,5);
    case "RowCost1": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,1);
    case "RowCost2": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,2);
    case "RowCost3": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,3);
    case "RowCost4": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,4);
    case "RowCost5": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,5);
    case "ShipCost": res = PODClassShipCostEFAfter(wn,fn,rownr,changed);
    case "CustomsCost": res = PODClassCustomsCostEFAfter(wn,fn,rownr,changed);
    case "StockType": res = PODClassStockTypeEFAfter(wn,rownr,changed!=0);
    case "TREO": res = PODClassTREOEFAfter(wn,rownr,changed!=0);
  end;
  PODClassAfterEditField = res;
  RETURN;
END;

global
function Boolean PODClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record POVc POr;
  row POVc POrw;

  switch (fieldname) begin  
    case "Quant":     
      GetWindowRecord(wn,POr);      
      MatRowGet(POr,rownr,POrw);
      if (POrw.Quant==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  PODClassBeforeEditField = res;
  return;
end;

global
function Boolean PODClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
//vat zone should be as it is on customer card
//otherwise u can paste customer  , filled all, change vat zone and get crap
  res = false;
  PODClassExportFlagButtonAction = res;
  RETURN;
END;

procedure PODClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record POVc POr;
  Integer rownr;

  GetWindowRecord(wn,POr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);//to get VARINSClass working
  WindowFieldGoto(wn,POr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 PODClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;

  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ArtCode": PODClassSpecPasteNameArtCode(wn,psname);
  end;
  PODClassSpecPasteName = psname;
  return;
end;

// iOS functions follows

global 
procedure PODClassOpenCurrency()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record POVc POr;
  
  wn = CurWindow;
  GetWindowRecord(wn,POr);
  nwn = OpenWindow("POCurrencyDClass",1,wn,subset,"",POr);
  PutWindowRecord(wn,POr);
  RETURN;
END;

global
function boolean POCurrencyDClassOnOKWindow(Integer wn)
begin
  record POVc POr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,POr);
    PutWindowRecord(mwn,POr);
  end;
  CloseWindow(wn);
  
  POCurrencyDClassOnOKWindow = true;
end;

global
function Boolean POCurrencyDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record POVc POr;
  
  switch (fieldname) begin
    case "CurncyCode": res = PODClassCurncyCodeEFAfter(wn,changed!=0);
  end;
  
  POCurrencyDClassAfterEditField = res;
  RETURN;
END;

global 
procedure PODClassOpenDelTerms()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record POVc POr;
  
  wn = CurWindow;
  GetWindowRecord(wn,POr);
  nwn = OpenWindow("PODelTermsDClass",1,wn,subset,"",POr);
  PutWindowRecord(wn,POr);
  RETURN;
END;

global
function boolean PODelTermsDClassOnOKWindow(Integer wn)
begin
  record POVc POr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,POr);
    PutWindowRecord(mwn,POr);
  end;
  CloseWindow(wn);
  
  PODelTermsDClassOnOKWindow = true;
end;

global
function Boolean PODelTermsDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Location": res = PODClassLocationEFAfter(wn,changed!=0);
  end;
  PODelTermsDClassAfterEditField = res;
  RETURN;
END;

global 
procedure PODClassOpenComment()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record POVc POr;
  
  wn = CurWindow;
  GetWindowRecord(wn,POr);
  nwn = OpenWindow("POCommentDClass",1,wn,subset,"",POr);
  PutWindowRecord(wn,POr);
  RETURN;
END;

global
function boolean POCommentDClassOnOKWindow(Integer wn)
begin
  record POVc POr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,POr);
    PutWindowRecord(mwn,POr);
  end;
  CloseWindow(wn);
  
  POCommentDClassOnOKWindow = true;
end;

/*
global
function Boolean POCommentDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
  end;
  POCommentDClassAfterEditField = res;
  RETURN;
END;
*/

global 
procedure PODClassOpenOrdAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record POVc POr;
  
  wn = CurWindow;
  GetWindowRecord(wn,POr);
  nwn = OpenWindow("POOrdAddressDClass",1,wn,subset,"",POr);
  PutWindowRecord(wn,POr);
  RETURN;
END;

global
function boolean POOrdAddressDClassOnOKWindow(Integer wn)
begin
  record POVc POr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,POr);
    PutWindowRecord(mwn,POr);
  end;
  CloseWindow(wn);
  
  POOrdAddressDClassOnOKWindow = true;
end;

/*
global
function Boolean POOrdAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
  end;
  POInvAddressDClassAfterEditField = res;
  RETURN;
END;
*/

global 
procedure PODClassOpenDelAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record POVc POr;
  
  wn = CurWindow;
  GetWindowRecord(wn,POr);
  nwn = OpenWindow("PODelAddressDClass",1,wn,subset,"",POr);
  PutWindowRecord(wn,POr);
  RETURN;
END;

global
function boolean PODelAddressDClassOnOKWindow(Integer wn)
begin
  record POVc POr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,POr);
    PutWindowRecord(mwn,POr);
  end;
  CloseWindow(wn);
  
  PODelAddressDClassOnOKWindow = true;
end;

/*
global
function Boolean PODelAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
  end;
  PODelAddressDClassAfterEditField = res;
  RETURN;
END;
*/

global 
procedure PODClassOpenExtraCosts()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record POVc POr;
  
  wn = CurWindow;
  GetWindowRecord(wn,POr);
  nwn = OpenWindow("POExtraCostsDClass",1,wn,subset,"",POr);
  PutWindowRecord(wn,POr);
  RETURN;
END;

global
function boolean POExtraCostsDClassOnOKWindow(Integer wn)
begin
  record POVc POr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,POr);
    PutWindowRecord(mwn,POr);
  end;
  CloseWindow(wn);
  
  POExtraCostsDClassOnOKWindow = true;
end;


global
function Boolean POExtraCostsDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Cost1": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,1);
    case "Cost2": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,2);
    case "Cost3": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,3);
    case "Cost4": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,4);
    case "Cost5": res = PODClassCost1_5EFAfter(wn,fn,rownr,changed,5);
  end;
  POExtraCostsDClassAfterEditField = res;
  RETURN;
END;


global
procedure PODClassEditRow(Integer wn,Integer rwn)
begin
  record POVc POr;
  row POVc POrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,POr);
  MatRowGet(POr,rwn,POrw);
  
  RepSpec.long1 = rwn;
  RepSpec.f1 = POrw.ArtCode;
  RepSpec.long2 = POrw.Quant;
  RepSpec.ObjType = PORw.UnitCode;
  RepSpec.f2 = POrw.Spec;
  RepSpec.vals0 = POrw.Price;
  RepSpec.vals1 = POrw.vRebate;
  RepSpec.vals2 = POrw.Sum;
  
  nwn = OpenWindow("PORowDClass",0,wn,"","",RepSpec);
end;

global
procedure PODClassAddRow(Integer wn,Integer rwn)
begin
  record POVc POr;
  row POVc POrw;

  GetWindowRecord(wn,POr);
  MatRowGet(POr,rwn,POrw);
  POrw.stp = kInvoiceRowTypeNormal;
  MatRowPut(POr,rwn,POrw);
  PutWindowRecord(wn,POr);
  PODClassEditRow(wn,rwn);
  return;
end;

global
procedure PORowDClassTrash()
begin
  record RcVc RepSpec;
  record POVc POr;
  integer wn;
  integer mwn;
  integer rwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,POr);
  
  rwn = RepSpec.long1;
  MatRowDelete(POr,rwn);
  
  PutWindowRecord(mwn,POr);
  CloseWindow(wn);
end;

global
function boolean PORowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record POVc POr;
  row POVc POrw;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,POr);
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;
  
  MatRowGet(POr,rwn,POrw);
  
  POrw.ArtCode = RepSpec.f1;
  POrw.Quant = RepSpec.long2;
  POrw.UnitCode = RepSpec.ObjType;
  POrw.Spec = RepSpec.f2;
  POrw.Price = RepSpec.vals0;
  POrw.vRebate = RepSpec.vals1;
  POrw.Sum = RepSpec.vals2;
  POrw.stp = kInvoiceRowTypeNormal;

  MatRowPut(POr,rwn,POrw);
  PutWindowRecord(mwn,POr);
  
  PORowDClassOnOKWindow = true;
end;


global
function Boolean PORowDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  Integer rwn;
  record RcVc RepSpec;
  record POVc POr,PO2r;
  row POVc POrw;
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,POr);
  GetWindowRecord(mwn,PO2r);
  
  MatRowGet(POr,rwn,POrw);
  POrw.ArtCode = RepSpec.f1;
  POrw.Quant = RepSpec.long2;
  POrw.UnitCode = RepSpec.ObjType;
  POrw.Spec = RepSpec.f2;
  POrw.Price = RepSpec.vals0;
  POrw.vRebate = RepSpec.vals1;
  POrw.Sum = RepSpec.vals2;
  MatRowPut(POr,rwn,POrw);
  PutWindowRecord(mwn,POr);
  
  switch (fieldname) begin
//    case "PlanShipRow": res = PODClassPlanShipRowEFAfter(mwn,rwn,changed!=0);
    case "f1": res = PODClassArtCodeEFAfter(mwn,rownr,changed!=0);
//    case "VEArtCode": res = PODClassVEArtCodeEFAfter(mwn,rwn,changed!=0);
    case "long2": res = PODClassQuantEFAfter(mwn,rwn,changed!=0);
//    case "VEQuant": res = PODClassVEQuantEFAfter(wn,rownr,changed!=0);
    case "vals0": res = PODClassPriceEFAfter(mwn,rwn,changed!=0);
    case "vals1": res = PODClassvRebateEFAfter(mwn,rwn,changed!=0);
    case "vals2": res = PODClassSumEFAfter(mwn,rwn,changed!=0);
//    case "VATCode": res = PODClassVATCodeEFAfter(wn,rownr,changed!=0);
//    case "TaxTemplateCode": res = PODClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
//    
//    case "RowCost1": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,1);
//    case "RowCost2": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,2);
//    case "RowCost3": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,3);
//    case "RowCost4": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,4);
//    case "RowCost5": res = PODClassRowCost1_5EFAfter(wn,fn,rownr,changed,5);
//    case "ShipCost": res = PODClassShipCostEFAfter(wn,fn,rownr,changed);
//    case "CustomsCost": res = PODClassCustomsCostEFAfter(wn,fn,rownr,changed);
//    case "StockType": res = PODClassStockTypeEFAfter(wn,rownr,changed!=0);
//    case "TREO": res = PODClassTREOEFAfter(wn,rownr,changed!=0);
  end;

  if (res==true and changed!=0) then begin
    GetWindowRecord(mwn,POr);
    MatRowGet(POr,rwn,POrw);
    RepSpec.f1 = POrw.ArtCode;
    RepSpec.long2 = POrw.Quant;
    RepSpec.ObjType = POrw.UnitCode;
    RepSpec.f2 = POrw.Spec;
    RepSpec.vals0 = POrw.Price;
    RepSpec.vals1 = POrw.vRebate;
    RepSpec.vals2 = POrw.Sum;
    PutWindowRecord(wn,RepSpec);
  end;
  PutWindowRecord(mwn,PO2r);

  PORowDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean PODClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record POVc POr;
  
  GetWindowRecord(wn,POr);  
  switch (fieldname) begin
    case "VEContact":
      res = OpenContactRecord(POr.VEContact,POr.VECode);
  end;
  PODClassOpenRecord = res;
end;

global
updating procedure DownPayFromPODsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record POVc POr;
  record PODownPayBlock DPb;
  record VIVc VIr;
  Integer r;
  string 255 errstr;
  Boolean testf;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)!=Rs_normal) then begin
    Beep;
    goto LDownPayFromPODsm;
  end;
  if (UserCanAction("POToDownPay",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"POToDownPay"));
    goto LDownPayFromPODsm;
  end;
  GetWindowRecord(wn,POr);
  r = POTestApprovalStatus(POr);
  if (r!=0) then begin
    MessageBox(r,"");
    goto LDownPayFromPODsm;
  end;
  BlockLoad(DPb);
  if (DPb.DetailsOnVI==0) then begin
    r = RecordAction_POOrdDownPay(POr.SerNr,blankval,blankval,VIr,errstr,0);
    switch (r) begin
      case -1: 
        if (nonblank(errstr)) then begin
          MessageBox(0,errstr);
        end else begin
          Beep;
        end;
      case -2: MessageBox(1281,"");
      otherwise
        nwn = OpenWindow("VIDClass",1,0,"","",VIr);
        UpdateBrowses("POVc");
    end;
  end else begin
    ReportDefaults(RepSpec,"DownPayFromPOVClass");
    RepSpec.FirstVer = POr.SerNr;
    RepSpec.vals0 = DPb.Percentage;
    nwn = OpenWindow("DownPayFromPOVClass",1,0,"","",RepSpec);
    PutWindowRecord(nwn,RepSpec);
    SelectWindow(nwn);
  end;
LDownPayFromPODsm:;  
  return;
end;

global
updating function Boolean DownPayFromPOVClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record VIVc VIr;
  Integer nwn;
  Integer r;
  string 255 errstr;
  
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.FirstVer<=0) then begin
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"FirstVer",true);
    goto LDownPayFromPOVClassOnOKWindow;
  end;
  r = RecordAction_POOrdDownPay(RepSpec.FirstVer,RepSpec.vals0,blankval,VIr,errstr,RepSpec.flags[1]);
  CloseWindow(wn);
  switch (r) begin
    case -1: 
      if (nonblank(errstr)) then begin
        MessageBox(0,errstr);
      end else begin
        Beep;
      end;
    case -2: MessageBox(1281,"");
    otherwise
      nwn = OpenWindow("VIDClass",1,0,"","",VIr);
      UpdateBrowses("POVc");
  end;
LDownPayFromPOVClassOnOKWindow:;  
  DownPayFromPOVClassOnOKWindow = false;
  return;
end;
