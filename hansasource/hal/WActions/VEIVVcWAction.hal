external procedure LookupServiceAsync(string,string,Boolean);
external updating function Boolean ServiceRequestAsync(string,string,Boolean,area,string);
external updating procedure SendAsyncServiceRequestNew(string,area,string,Boolean);
external procedure SendTextParameter(string,var Area);
external procedure SendFunctionVersion(string,string,var Area);
external updating function Boolean SendServiceRequest(string,Boolean,area,var Area);
remote updating function Integer CreateVIFromVEIV(LongInt,var record VIVc);
remote function LongInt ValidateVEIV(record VEIVVc,var string,var Integer);
external updating procedure VIFromPODExecute(LongInt);
external function string 255 ReplaceCharByString(string,string,string);
external function date XmlGetDate(var xml,string,string);
external function val XmlGetVal(var xml,string,Integer,string,string);
external function Integer XmlGetInt(var xml,string);
external function LongInt DateDiff(Date,Date);

function Boolean VEIVDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changed)
begin
  record VEIVVc VEIVr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,VEIVr);
//    IVVc_PasteItem(IVr,rownr,wn);
    PutWindowRecord(wn,VEIVr);
  end;
  VEIVDClassArtCodeEFAfter = true;
  return;
end;

/*
function Boolean IVDClassSalesAccEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record IVVc IVr;
  row IVVc IVrw;

  if (changed!=0) and (rownr>=0) then begin  
    DeselectWindow(wn,false);
    GetWindowRecord(wn,IVr);
    MatRowGet(IVr,rownr,IVrw);
    if (IVrw.stp==5) then begin
      IVDchsum(IVr,rownr);
      PutWindowRecord(wn,IVr);
    end;
  end;  
  IVDClassSalesAccEFAfter = true;
  return;
end;
*/

global
function Boolean VEIVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = VEIVDClassArtCodeEFAfter(wn,rownr,changed);
  end;
  VEIVDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean VEIVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record VEIVVc VEIVr;
  row VEIVVc VEIVrw;
  
  if (wnst!=Rs_update) then begin
    res = false;
    switch (fieldname) begin
      case "ArtCode": res = true;
      case "CostAcc": res = true;
      case "Quant": res = true;
      case "VATCode": res = true;
    end;
  end else begin
    res = false;
    GetWindowRecord(wn,VEIVr);
    if (VEIVr.VISerNr<0) then begin
      switch (fieldname) begin
        case "ArtCode": res = true;
        case "CostAcc": res = true;
        case "Quant": res = true;
        case "VATCode": res = true;
        case "RejectReason": res = true;
        case "VECode": res = true;
        case "Objects": res = true;
      end;
    end;
    switch (fieldname) begin
      case "OurOrdNr": res = true;
    end;
  end;
  VEIVDClassActiveEditField = res;
  return;
end;

global
function Boolean VEIVDClassOKStatusButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record VEIVVc VEIVr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,VEIVr);
    if (VEIVr.VISerNr>0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,VEIVr);
    if (VEIVr.VISerNr>0) then begin
      res = false;
    end;
  end;  
  VEIVDClassOKStatusButtonAction = res;
  return;
end;

global 
function Boolean VEIVDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;

  res = false;
  VEIVDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean VEIVDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record VEIVVc VEIVr;
  row VEIVVc VEIVrw;

  res = false;
  GetWindowRecord(wn,VEIVr);
//  if (VEIVr.VISerNr>0) then begin
  if (true) then begin
  if (rownr>=0) then begin
    MatRowGet(VEIVr,rownr,VEIVrw);
    switch (VEIVrw.stp) begin
      case 1:
        if (blank(VEIVrw.VEArtCode)) and (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VEQuant)) and (blank(VEIVrw.VESum)) then begin
          res = true;
        end;
      case 3:
        if (blank(VEIVrw.VEOrdRow)) and (blank(VEIVrw.VESpec)) then begin
          res = true;
        end;
      case 4:
        if (blank(VEIVrw.VEArtCode)) and (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VEQuant)) then begin
          res = true;
        end;
      case 5:
        if (blank(VEIVrw.VEArtCode)) and (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VEQuant)) and (blank(VEIVrw.VESum)) then begin
          res = true;
        end;
      case 6:
        if (blank(VEIVrw.VECUPNr)) and (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VEPrice)) and (blank(VEIVrw.VESum)) then begin
          res = true;
        end;
      case 9:
        if (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VESum)) then begin
          res = true;
        end;
      case 11:
        if (blank(VEIVrw.VEArtCode)) and (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VEQuant)) and (blank(VEIVrw.VESum)) then begin
          res = true;
        end;
      case 12:
      case 101:
        if (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VEVATPrc)) and (blank(VEIVrw.VEPrice)) and (blank(VEIVrw.VESum)) then begin
          res = true;
        end;
      case 102:
        if (blank(VEIVrw.VESpec)) and (blank(VEIVrw.VEVATPrc)) and (blank(VEIVrw.VEPrice)) and (blank(VEIVrw.VESum)) and (blank(VEIVrw.VEVATSum)) then begin
          res = true;
        end;
    end;
  end;
  end;
  VEIVDClassDeleteRowTest = res;
  return;
end;

global
function Boolean VEIVDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record VEIVVc VEIVr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,VEIVr);
    if (VEIVr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,VEIVr);
    if (VEIVr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  VEIVDClassOKFlagButtonAction = res;
  RETURN;
END;

global
updating function Boolean VEIVDClassNotPaidFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record VEIVVc VEIVr;
  record VEIVVc pVEIVr;
  Integer normalmode,updatemode;
  Area a_req,a_reply;
  LongInt rerror;
  string 255 rerrordesc;
 
  res = false;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  GetWindowRecord(wn,VEIVr);
  if (WindowState(wn)==normalmode) then begin
    PutWindowRecord(wn,VEIVr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,pVEIVr);
    if (pVEIVr.NotPaidFlag!=0) then begin
      if (value==0) then begin
        SendFunctionVersion("51.0","",a_req);
        SendTextParameter(pVEIVr.CustID,a_req);
        SendTextParameter(pVEIVr.VESerNr,a_req);
        SendTextParameter(pVEIVr.VersionNr,a_req);
        SendTextParameter(pVEIVr.InvoiceNr,a_req);
//        SendAsyncServiceRequestNew("UNBLOCKSUPPEINVOICE",a_req,"HTSUnblockSuppInvReply",false);
         if (ServiceRequestAsync("UNBLOCKSUPPEINVOICE","",true,a_req,"HTSUnblockSuppInvReply")==false) then begin
         end;
      end;
    end;
  end;  
  VEIVDClassNotPaidFlagButtonAction = res;
  RETURN;
END;

global
updating procedure VIFromVEIVDsm()
BEGIN
  Integer wn,nwn,rownr;
  record RcVc RepSpec;
  record VEIVVc VEIVr;
  record VIVc VIr;
  LongInt r;
  string 255 fieldname;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("VEIVToVI",true)) then begin
      GetWindowRecord(wn,VEIVr);
      if (VEIVr.NotPaidFlag==0) then begin
        r = ValidateVEIV(VEIVr,fieldname,rownr);
        if (r==0) then begin
          r = CreateVIFromVEIV(VEIVr.SerNr,VIr);
          if (r!=0) begin
            if (r>0) then begin
              MessageBox(r,"");
            end else begin
              Beep;
            end;
          end else begin
            nwn = OpenWindow("VIDClass",1,0,"","",VIr);
            UpdateBrowses("VEIVVc");
          end;      
        end else begin
          WindowFieldGoto(wn,VEIVr,rownr,fieldname,true); 
          MessageBox(r,"");
        end;      
      end else begin
        MessageBox(20556,"");
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"VEIVToVI"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure CUFromVEIVDsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record VEIVVc VEIVr;
  record CUVc CUr;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("VEIVToVI",true)) then begin
      GetWindowRecord(wn,VEIVr);
      if (VEIVr.NotPaidFlag==0) then begin
        RecordNew(CUr);
        CUr.Name = VEIVr.VECompName;
        CUr.InvAddr0 = VEIVr.VEAddr0;
        CUr.InvAddr1 = VEIVr.VEAddr1;
        CUr.InvAddr2 = VEIVr.VEAddr2;
        CUr.InvAddr3 = VEIVr.InvAddr3;
        CUr.InvAddr4 = VEIVr.InvAddr4;
        CUr.ExportFlag = VEIVr.ExportFlag;
        CUr.VATNr = VEIVr.VEVATNr;
        CUr.Phone = VEIVr.VEPhone;
        CUr.Fax = VEIVr.VEFax;
        CUr.eMail = VEIVr.VEeMail;
        CUr.DelAddr0 = VEIVr.ShipAddr0;
        CUr.DelAddr1 = VEIVr.ShipAddr1;
        CUr.DelAddr2 = VEIVr.ShipAddr2;
        CUr.DelAddr3 = VEIVr.DelAddr3;
        CUr.DelAddr4 = VEIVr.DelAddr4;
        CUr.Region = VEIVr.Region;
        CUr.VEType = 1;
        CUr.CUType = 0;
        if (HasLocalization("FIN")) then begin
          CUr.IBANCode = VEIVr.VEBank2;
        end;
        nwn = OpenWindow("CUDClass",1,0,"","",CUr);
      end else begin
        MessageBox(20556,"");
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"VEIVToVI"));
    end;
  end else begin
    Beep;
  end;
  return;
end;

global
procedure OpenPOFromVEIVDsm()
begin
  record VEIVVc VEIVr;
  record POVc POr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,VEIVr);
  
  if (VEIVr.NotPaidFlag==0) then begin
    POr.SerNr = VEIVr.OurOrdNr;
    if (ReadFirstMain(POr,1,true)) then begin
      OpenWindow("PODClass",1,0,"","",POr);
    end else begin
      WindowFieldGoto(wn,VEIVr,-1,"OurOrdNr",true);
      MessageBox(1252,VEIVr.OurOrdNr);
    end;
  end else begin
    MessageBox(20556,"");
  end;
end;

global
updating procedure VIFromPO_VEIVDsm()
begin
  record VEIVVc VEIVr;
  record POVc POr;
  record VIVc VIr;
  record RLinkVc RLr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,VEIVr);
  
  if (VEIVr.NotPaidFlag!=0) then begin
    MessageBox(20556,"");
    goto LVIFromPO_VEIVDsm;
  end;
  
  if (nonblank(VEIVr.VISerNr)) then begin
    VIr.SerNr = VEIVr.VISerNr;
    if (ReadFirstMain(VIr,1,true)) then begin
      MessageBox(32511,"");
      goto LVIFromPO_VEIVDsm;
    end;
  end;
  
  POr.SerNr = VEIVr.OurOrdNr;
  if (ReadFirstMain(POr,1,true)==false) then begin
    WindowFieldGoto(wn,VEIVr,-1,"OurOrdNr",true);
    MessageBox(1252,VEIVr.OurOrdNr);
    goto LVIFromPO_VEIVDsm;
  end;
  
  if (POr.Sum4!=VEIVr.Sum4) then begin
    MessageBox(32510,"");
  end;
  
  VIFromPODExecute(POr.SerNr);
  CreateRecordLink(VEIVr,CurrentCompany,POr,CurrentCompany);
  if (ReadRecordLink(POr,1,VIr,RLr)) then begin
    CreateRecordLink(VEIVr,CurrentCompany,VIr,CurrentCompany);
    VEIVr.VISerNr = VIr.SerNr;
    PutWindowRecord(wn,VEIVr);
    WindowDoOK(wn,0);
  end;
  
LVIFromPO_VEIVDsm:;
end;

global
updating function Boolean ImportFinvoice(string filename)
begin
  Boolean res;
  xml xml_invoice;
  record VEIVVc VEIVr,oldVEIVr;
  row VEIVVc VEIVrw;
  record CUVc CUr,VEr;
  string 255 xstr,tstr,xfreestr;
  Date CashDiscountDate;
  Integer rwcnt,freerwcnt;
  
  res = false;
  
  xml_invoice = ParseXmlFile(filename);
  if (XmlNodeExists(xml_invoice,"Finvoice")==false) then begin goto LImportFinvoice; end;
  
  tstr = XmlGetAttribute(xml_invoice,"?xml","encoding");
  if (blank(tstr)) then begin
    SetImportCodePage("ISO-8859-1");
  end else begin
    if (SetImportCodePage(tstr)==false) then begin
      SetImportCodePage("ISO-8859-1");
    end;
  end;
  RecordNew(VEIVr);    
  xstr = "Finvoice/SellerPartyDetails/";
  VEIVr.VEVATNr = XmlGet(xml_invoice,xstr & "SellerPartyIdentifier");
  
  if (blank(VEIVr.VEVATNr)) then begin
    VEIVr.VEVATNr = XmlGet(xml_invoice,xstr & "SellerOrganisationTaxCode");
  end;
  
  if (nonblank(VEIVr.VEVATNr)) then begin
    VEr.VATNr = VEIVr.VEVATNr;
    if (ReadFirstKey("VATNr",VEr,1,true)) then begin
      VEIVr.VECode = VEr.Code;
    end;
  end;
  
  VEIVr.VECompName = XmlGet(xml_invoice,xstr & "SellerOrganisationName");
  
  xstr = "Finvoice/";
  VEIVr.Header0 = XmlGet(xml_invoice,xstr & "SellerOrganisationUnitNumber");
  
  xstr = "Finvoice/SellerPartyDetails/SellerPostalAddressDetails/";
  VEIVr.VEAddr0 = XmlGet(xml_invoice,xstr & "SellerStreetName");
  VEIVr.VEAddr1 = XmlGet(xml_invoice,xstr & "SellerPostCodeIdentifier") & " " & XmlGet(xml_invoice,xstr & "SellerTownName");
  VEIVr.VEAddr2 = XmlGet(xml_invoice,xstr & "CountryName");
  VEIVr.VEAddr3 =  XmlGet(xml_invoice,xstr & "SellerPostOfficeBoxIdentifier");
  
  xstr = "Finvoice/";
  VEIVr.OurContact  = XmlGet(xml_invoice,xstr & "SellerContactPersonName");
  
  xstr = "Finvoice/SellerCommunicationDetails/";
  VEIVr.VEPhone  = XmlGet(xml_invoice,xstr & "SellerPhoneNumberIdentifier");
  VEIVr.VEeMail  = XmlGet(xml_invoice,xstr & "SellerEmailaddressIdentifier");
  
  xstr = "Finvoice/SellerInformationDetails/";
  VEIVr.VEFax  = XmlGet(xml_invoice,xstr & "SellerFaxNumber");
  
  VEIVr.Header1 = XmlGet(xml_invoice,xstr & "SellerVatRegistrationText");
  VEIVr.Header2 = XmlGet(xml_invoice,xstr & "SellerFreeText");  
  
  xstr = "Finvoice/SellerInformationDetails/SellerAccountDetails[" & 0 & "]/";
  VEIVr.VEBank1  = XmlGet(xml_invoice,xstr & "SellerAccountID");
  if (XmlGetAttribute(xml_invoice,xstr & "SellerAccountID","IdentificationSchemeName")=="IBAN") then begin
    VEIVr.CYIBAN  =  XmlGet(xml_invoice,xstr & "SellerAccountID");
  end;
  if (XmlGetAttribute(xml_invoice,xstr & "SellerBic","IdentificationSchemeName")=="BIC") then begin
    VEIVr.CYSWIFT  =  XmlGet(xml_invoice,xstr & "SellerBic");
  end;
  
  xstr = "Finvoice/SellerInformationDetails/SellerAccountDetails[" & 1 & "]/";
  VEIVr.VEBank2  = XmlGet(xml_invoice,xstr & "SellerAccountID");
  
  xstr = "Finvoice/InvoiceRecipientPartyDetails/";
  
  VEIVr.Addr0 = XmlGet(xml_invoice,xstr & "InvoiceRecipientOrganisationName");
  
  VEIVr.RegNr1 = XmlGet(xml_invoice,xstr & "InvoiceRecipientOrganisationTaxCode");
  VEIVr.VATNr = XmlGet(xml_invoice,xstr & "InvoiceRecipientPartyIdentifier");
  if (Left(VEIVr.VATNr,4)=="0037") then begin
    VEIVr.VATNr = Right(VEIVr.VATNr,len(VEIVr.VATNr)-4);
  end;
  
  xstr = "Finvoice/InvoiceRecipientPartyDetails/InvoiceRecipientPostalAddressDetails/";
  VEIVr.Addr1 = XmlGet(xml_invoice,xstr & "InvoiceRecipientStreetName");
  VEIVr.Addr2 = XmlGet(xml_invoice,xstr & "InvoiceRecipientPostCodeIdentifier") & " " & XmlGet(xml_invoice,xstr & "InvoiceRecipientTownName");
  VEIVr.Addr3 = XmlGet(xml_invoice,xstr & "CountryName");
  VEIVr.InvAddr3 = XmlGet(xml_invoice,xstr & "InvoiceRecipientPostOfficeBoxIdentifier");
  VEIVr.InvAddr4 = XmlGet(xml_invoice,xstr & "CountryCode");
  
  xstr = "Finvoice/";
  VEIVr.ClientContact = XmlGet(xml_invoice,xstr & "BuyerContactPersonName");
  
  xstr = "Finvoice/BuyerCommunicationDetails/";
  VEIVr.Phone = XmlGet(xml_invoice,xstr & "BuyerPhoneNumberIdentifier");
  
  xstr = "Finvoice/BuyerPartyDetails/";
  VEIVr.Addr0 = XmlGet(xml_invoice,xstr & "BuyerOrganisationName");
  
  if (blank(VEIVr.Addr1)) then begin
    xstr = "Finvoice/BuyerPartyDetails/BuyerPostalAddressDetails/";
    VEIVr.Addr1 = XmlGet(xml_invoice,xstr & "BuyerStreetName");
    VEIVr.Addr2 = XmlGet(xml_invoice,xstr & "BuyerPostCodeIdentifier") & " " & XmlGet(xml_invoice,xstr & "BuyerTownName");
    VEIVr.Addr3 = XmlGet(xml_invoice,xstr & "CountryName");
    VEIVr.InvAddr3 = XmlGet(xml_invoice,xstr & "BuyerPostOfficeBoxIdentifier");
    VEIVr.InvAddr4 = XmlGet(xml_invoice,xstr & "CountryCode");
  end;
  
  xstr = "Finvoice/BuyerPartyDetails/";
  VEIVr.Footer0 = XmlGet(xml_invoice,xstr & "BuyerPartyIdentifier");
  if (blank(VEIVr.VATNr)) then begin
    VEIVr.VATNr = XmlGet(xml_invoice,xstr & "BuyerOrganisationTaxCode");
  end else begin
    VEIVr.Footer1 = XmlGet(xml_invoice,xstr & "BuyerOrganisationTaxCode");
  end;
  CUr.VATNr = VEIVr.VATNr;
  
  if (ReadFirstKey("VATNr",CUr,1,true)) then begin
    VEIVr.CustID = CUr.Code;
  end;
  
  xstr = "Finvoice/DeliveryPartyDetails/";
  VEIVr.ShipAddr0 = XmlGet(xml_invoice,xstr & "DeliveryOrganisationName");
  
  xstr = "Finvoice/DeliveryPartyDetails/DeliveryPostalAddressDetails/";
  VEIVr.ShipAddr1 = XmlGet(xml_invoice,xstr & "DeliveryStreetName");
  VEIVr.ShipAddr2 = XmlGet(xml_invoice,xstr & "DeliveryPostCodeIdentifier") & " " & XmlGet(xml_invoice,xstr & "DeliveryTownName");
  VEIVr.ShipAddr3 = XmlGet(xml_invoice,xstr & "CountryName");
  VEIVr.DelAddr3 = XmlGet(xml_invoice,xstr & "BuyerPostOfficeBoxIdentifier");
  VEIVr.DelAddr4 = XmlGet(xml_invoice,xstr & "CountryCode");
  
  xstr = "Finvoice/InvoiceDetails/";
  VEIVr.OKFlag = 1;
  switch (XmlGet(xml_invoice,xstr & "InvoiceTypeCode")) begin
    case "INV01": VEIVr.InvType = kInvoiceTypeNormal; // 1 = Normal, 2 = Cash, 3 = Credit, 4 = Interest, 5 = "Dummy" Prepayment Invoice
    case "INV02": VEIVr.InvType = kInvoiceTypeCredit; // 1 = Normal, 2 = Cash, 3 = Credit, 4 = Interest, 5 = "Dummy" Prepayment Invoice
    case "INV03": VEIVr.InvType = kInvoiceTypeInterest; // 1 = Normal, 2 = Cash, 3 = Credit, 4 = Interest, 5 = "Dummy" Prepayment Invoice
  end;
  
  VEIVr.InvoiceNr = XmlGet(xml_invoice,xstr & "InvoiceNumber");
  VEIVr.VEOrderNr = XmlGet(xml_invoice,xstr & "OrderIdentifier");
  if (blank(VEIVr.OurContact)) then begin
    VEIVr.OurContact = XmlGet(xml_invoice,xstr & "SellerReferenceIdentifier");
  end;
  tstr = XmlGetAttribute(xml_invoice,xstr & "InvoiceDate","Format");
  tstr = ReplaceCharByString(tstr,"C","Y");
  VEIVr.InvDate = XmlGetDate(xml_invoice,xstr & "InvoiceDate",tstr);
  VEIVr.TransDate = VEIVr.InvDate;
  VEIVr.CurncyCode = XmlGetAttribute(xml_invoice,xstr & "InvoiceTotalVatExcludedAmount","AmountCurrencyIdentifier");
  VEIVr.Sum1 = XmlGetVal(xml_invoice,xstr & "InvoiceTotalVatExcludedAmount",M4Val,"",",");
  VEIVr.Sum3 = XmlGetVal(xml_invoice,xstr & "InvoiceTotalVatAmount",M4Val,"",",");
  VEIVr.Sum4 = XmlGetVal(xml_invoice,xstr & "InvoiceTotalVatIncludedAmount",M4Val,"",",");
  VEIVr.InvComment = XmlGet(xml_invoice,xstr & "InvoiceFreeText");
  VEIVr.BaseSum4 = VEIVr.Sum4;
  
  xstr = "Finvoice/InvoiceDetails/PaymentTermsDetails/";
  VEIVr.pdComment = XmlGet(xml_invoice,xstr & "PaymentTermsFreeText");
  tstr = XmlGetAttribute(xml_invoice,xstr & "InvoiceDueDate","Format");
  tstr = ReplaceCharByString(tstr,"C","Y");
  VEIVr.PayDate = XmlGetDate(xml_invoice,xstr & "InvoiceDueDate",tstr);
  VEIVr.pdays = DateDiff(VEIVr.PayDate,VEIVr.InvDate);
  tstr = XmlGetAttribute(xml_invoice,xstr & "CashDiscountDate","Format");
  tstr = ReplaceCharByString(tstr,"C","Y");
  CashDiscountDate = XmlGetDate(xml_invoice,xstr & "CashDiscountDate",tstr);
  VEIVr.pdrdays = DateDiff(CashDiscountDate,VEIVr.InvDate);
  VEIVr.pdvrebt = XmlGetVal(xml_invoice,xstr & "CashDiscountPercent",M4Val,"",",");
  VEIVr.IntCode = XmlGet(xml_invoice,xstr & "PaymentOverDueFineDetails/PaymentOverDueFinePercent");
  
  xstr = "Finvoice/DeliveryDetails/";
  tstr = XmlGetAttribute(xml_invoice,xstr & "DeliveryDate","Format");
  tstr = ReplaceCharByString(tstr,"C","Y");
  VEIVr.ServiceDelDate = XmlGetDate(xml_invoice,xstr & "DeliveryDate",tstr);
  
  VEIVr.ShipDealComment = XmlGet(xml_invoice,xstr & "DeliveryTermsText");
  VEIVr.ShipModeComment = XmlGet(xml_invoice,xstr & "DeliveryMethodText");
  
  xstr = "Finvoice/";
  VEIVr.CalcFinRef = XmlGet(xml_invoice,xstr & "EpiDetails/EpiPaymentInstructionDetails/EpiremittanceInfoIdentifier");
  
  rwcnt = 0;
  while (XmlNodeExists(xml_invoice,"Finvoice/InvoiceRow[" & rwcnt & "]")) begin
    xstr = "Finvoice/InvoiceRow[" & rwcnt & "]/";
    ClearRow(VEIVr,VEIVrw,1);
    VEIVrw.stp = 1;
  
    VEIVrw.VEArtCode = XmlGet(xml_invoice,xstr & "ArticleIdentifier");
    VEIVrw.VESpec = XmlGet(xml_invoice,xstr & "ArticleName") & " " & XmlGet(xml_invoice,xstr & "RowFreeText");
    VEIVrw.VEQuant = XmlGetVal(xml_invoice,xstr & "DeliveredQuantity",M423Val,"",",");
    tstr = XmlGetAttribute(xml_invoice,xstr & "RowDeliveryDate","Format");
    tstr = ReplaceCharByString(tstr,"C","Y");
    VEIVrw.VEServiceDelDate = XmlGetDate(xml_invoice,xstr & "RowDeliveryDate",tstr);
    VEIVrw.VESum = XmlGetVal(xml_invoice,xstr & "RowVatExcludedAmount",M4Val,"",",");
    VEIVrw.VEPrice = VEIVrw.VESum/VEIVrw.VEQuant;
    VEIVrw.VEVATSum = XmlGetVal(xml_invoice,xstr & "RowAmount",M4Val,"",",") - VEIVrw.VESum;
    VEIVrw.VEVATPrc = XmlGetVal(xml_invoice,xstr & "RowVatRatePercent",M4Val,"",",");
  
    MatRowPut(VEIVr,MatRowCnt(VEIVr),VEIVrw);

    freerwcnt = 0;
    xfreestr = "Finvoice/InvoiceRow[" & rwcnt & "]/RowFreeText[" & freerwcnt & "]";
    while (XmlNodeExists(xml_invoice,xfreestr)) begin
      ClearRow(VEIVr,VEIVrw,1);
      VEIVrw.VESpec = XmlGet(xml_invoice,xfreestr);      
      MatRowPut(VEIVr,MatRowCnt(VEIVr),VEIVrw);
      freerwcnt = freerwcnt + 1;
      xfreestr = "Finvoice/InvoiceRow[" & rwcnt & "]/RowFreeText[" & freerwcnt & "]";
    end;
    
    rwcnt = rwcnt + 1;
  end;
  
  rwcnt = 0;
  while (XmlNodeExists(xml_invoice,"Finvoice/InvoiceDetails/VatSpecificationDetails[" & rwcnt & "]")) begin
    xstr = "Finvoice/InvoiceDetails/VatSpecificationDetails[" & rwcnt & "]/";
    ClearRow(VEIVr,VEIVrw,101);
    VEIVrw.stp = 101;
  
    VEIVrw.VEPrice = XmlGetVal(xml_invoice,xstr & "VatBaseAmount",M4Val,"",",");
    VEIVrw.VESum = XmlGetVal(xml_invoice,xstr & "VatRateAmount",M4Val,"",",");
    VEIVrw.VEVATPrc = XmlGetVal(xml_invoice,xstr & "VatRatePercent",M4Val,"",",");
  
    MatRowPut(VEIVr,MatRowCnt(VEIVr),VEIVrw);
    rwcnt = rwcnt + 1;
  end;
  
  xstr = "Finvoice/PartialPaymentDetails/";
  rwcnt = 0;
  while (XmlNodeExists(xml_invoice,"Finvoice/PartialPaymentDetails[" & rwcnt & "]/PartialPaymentVatIncludedAmount")) begin
    xstr = "Finvoice/PartialPaymentDetails[" & rwcnt & "]/";
    ClearRow(VEIVr,VEIVrw,102);
    VEIVrw.stp = 102;
  
    VEIVrw.VESpec = XmlGet(xml_invoice,xstr & "PartialPaymentReferenceIdentifier");
    VEIVrw.VESum = XmlGetVal(xml_invoice,xstr & "PartialPaymentVatIncludedAmount",M4Val,"",",");
    VEIVrw.VEPrice = XmlGetVal(xml_invoice,xstr & "PartialPaymentVatExcludedAmount",M4Val,"",",");
    VEIVrw.VEVATSum = VEIVrw.VESum - VEIVrw.VEPrice;
    tstr = XmlGetAttribute(xml_invoice,xstr & "PartialPaymentDueDate","Format");
    tstr = ReplaceCharByString(tstr,"C","Y");
    VEIVrw.VEServiceDelDate = XmlGetDate(xml_invoice,xstr & "PartialPaymentDueDate",tstr);
  
    MatRowPut(VEIVr,MatRowCnt(VEIVr),VEIVrw);
    rwcnt = rwcnt + 1;
  end;
  
  oldVEIVr.VATNr = VEIVr.VATNr;
  oldVEIVr.InvoiceNr = VEIVr.InvoiceNr;
  if (ReadLastKey("VATNrInvoiceNr",oldVEIVr,2,true)) then begin
    VEIVr.VersionNr = oldVEIVr.VersionNr + 1;
  end;
  
  if (VEIVr.VersionNr<0) then begin
    VEIVr.VersionNr = 0;
  end;
  
  VEIVr.SerNr = NextSerNr("VEIVVc",VEIVr.TransDate,-1,false,"");
  if (VEIVr.SerNr>0) then begin
    if (RecordStore(VEIVr,false)==false) then begin
      goto LImportFinvoice;
    end;
  end else begin
    goto LImportFinvoice;
  end;
  
  res = true;
  
LImportFinvoice:;
  ImportFinvoice = res;
end;

global
updating procedure ImportFinvoiceVEIVLsm()
begin
  string 255 filename,folder;
  array string 255 importedfiles;
  Integer i,filecnt;
  record FInvoiceBlock FIb;
  
  BlockLoad(FIb);
  folder = FIb.FInvoiceImportFolderPath;
  if (blank(folder)) then begin
    folder = "Import";
  end;
  filecnt = CountFilesInDir(folder);
  for (i = 0; i<filecnt; i = i + 1) begin
    filename = GetFileNameInDir(folder,i);
    if (ImportFinvoice(folder & "/" & filename)) then begin
      importedfiles[importedfiles.length] = folder & "/" & filename;
    end;
  end;
  
  for (i = 0; i<importedfiles.length; i = i + 1) begin
    Delete_File(importedfiles[i]);
  end;
end;
