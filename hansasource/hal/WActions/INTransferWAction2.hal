remote procedure RecAction_raINTransferSplitSerNr(var record INTransferVc,Integer,Boolean);
remote procedure RecAction_raINTransferSplitLines(var record INTransferVc,Integer,Boolean);

function Boolean AllowCurChange(string curcode,Boolean base)
BEGIN
  record CurncyCodeVc ccr;
  Boolean res;
  
  res = true;
  if (nonblank(curcode)) then begin
    ccr.CurncyCode = curcode;
    if (ReadFirstMain(ccr,1,true)) then begin
      if (base) then begin
        if (ccr.NoChangeBase!=0) then begin res = false; end;
      end else begin
        if (ccr.NoChangeForeign!=0) then begin res  = false; end;
      end;
    end;
  end;
  AllowCurChange = res;
END;

global
function Boolean INTransferVcEFActiveCheck(string fieldname,Integer wn,Integer wnst)
BEGIN
  Boolean res;
  record INTransferVc INTransferr;
  Integer updatemode;

  updatemode = 2;//Rs_update
  res = true;
  switch (fieldname) begin
    case "FrRate": 
      GetWindowRecord(wn,INTransferr);
      if (AllowCurChange(INTransferr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB1": 
      GetWindowRecord(wn,INTransferr);
      if (AllowCurChange(INTransferr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB2": 
      GetWindowRecord(wn,INTransferr);
      if (AllowCurChange(INTransferr.CurncyCode,false)==false) then begin res = false; end;
    case "BaseRate1": 
      GetWindowRecord(wn,INTransferr);
      if (AllowCurChange(INTransferr.CurncyCode,true)==false) then begin res = false; end;
    case "BaseRate2": 
      GetWindowRecord(wn,INTransferr);
      if (AllowCurChange(INTransferr.CurncyCode,true)==false) then begin res = false; end;
  end;
  switch (fieldname) begin
    case "Comment": ;
    otherwise
      if (wnst==updatemode) then begin
        GetPrevWindowRecord(wn,INTransferr);
        if (INTransferr.OKFlag!=0) then begin
          res = false;
        end;  
      end;  
  end;
  INTransferVcEFActiveCheck = res;
  RETURN;
END;

global
function Boolean INTransferDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = INTransferVcEFActiveCheck(fieldname,wn,wnst);
  INTransferDClassActiveEditField = res;
  return;
end;

function Boolean INTransferButtonAction(string fieldname,Integer wn,Integer wnst)
begin
  Boolean res;
  record INTransferVc INTransferr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,INTransferr);
    if (INTransferr.OKFlag!=0) then begin
      switch (fieldname) begin
        case "OKFlag":
          res = false;
          if (UserCanAction("UnOKAll",false)) then begin
            res = true;
          end;
        otherwise
          res = false;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,INTransferr);
    if (INTransferr.OKFlag!=0) then begin
      switch (fieldname) begin
        otherwise
          res = false;
      end;
    end;
  end;
  INTransferButtonAction = res;
  return;
end;

global
function Boolean INTransferDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;

  res = INTransferButtonAction("OKFlag",wn,WindowState(wn));
  INTransferDClassOKFlagButtonAction = res;
  RETURN;
END;

global
procedure INTransferSplitSerNrDsm()
BEGIN
  record INTransferVc INTransferr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,INTransferr);
  DeselectWindow(wn,false);
  RecAction_raINTransferSplitSerNr(INTransferr,GetWindowCurRow(wn),false);
  PutWindowRecord(wn,INTransferr);
  RETURN;  
END;

global
procedure INTransferSplitLinesDsm()
BEGIN
  record INTransferVc INTransferr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,INTransferr);
  DeselectWindow(wn,false);
  RecAction_raINTransferSplitLines(INTransferr,GetWindowCurRow(wn),false);
  PutWindowRecord(wn,INTransferr);
  RETURN;  
END;

