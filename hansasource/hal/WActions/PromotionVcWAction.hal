remote function Boolean PromotionVc_PastePromotionCond(var record PromotionVc,Integer);

function Boolean PromotionDClassPromotionCondEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record PromotionVc Promr;
  
  if (changedf) then begin
    res = true;
    GetWindowRecord(wn,Promr);
    res = PromotionVc_PastePromotionCond(Promr,rownr);
    if (res) then begin
      PutWindowRecord(wn,Promr);        
    end;
  end;
  PromotionDClassPromotionCondEFAfter = res;
  return;
end;


global
function Boolean PromotionDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "PromotionCond": res = PromotionDClassPromotionCondEFAfter(wn,rownr,changed!=0);
  end;
  PromotionDClassAfterEditField = res;
  return;
end;

global
function Boolean PromotionDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  
  res = true;
  switch (fieldname) begin
    case "Type": res = false;
    case "Condition": res = false;
    case "vRebate": res = false;
  end;
  PromotionDClassActiveEditField = res;
  return;
end;

global
function string 40 PromotionDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record PromotionVc Promr;
  row PromotionVc Promrw;
  Integer rownr;
  
  psname = defpsname;
  rownr = WindowActiveRow(wn);
  switch (WindowActiveField(wn)) begin
    case "PromotionCond":
      GetWindowRecord(wn,Promr);
      if (rownr>=0) then begin
        MatRowGet(Promr,rownr,Promrw);
        switch (Promrw.RowType) begin
          case kPromotionRowTypeFilter:
            psname = "PromotionFilterSClass";
          case kPromotionRowTypeCondition:
            psname = "PromotionCondSClass";
        end;
      end;
  end;
  PromotionDClassSpecPasteName = psname;
  return;
end;

//--------

global
function string 40 PromotionFilterDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record PromotionFilterVc PCr;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Filter":
      GetWindowRecord(wn,PCr);
      switch (PCr.FilterType) begin
        case kPromotionFilterItem:
          psname = "INSClass";
        case kPromotionFilterItemGroup:
          psname = "ITSClass";
        case kPromotionFilterItemClassification:
          psname = "DISClass";
        case kPromotionFilterCustomer:
          psname = "CUSClass";
        case kPromotionFilterCustomerCategory:
          psname = "CCatSClass";
        case kPromotionFilterCustomerClassification:
          psname = "CClassSClass";
      end;
  end;
  PromotionFilterDClassSpecPasteName = psname;
  return;
end;
