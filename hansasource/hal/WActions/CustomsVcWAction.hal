remote procedure CustomsSumup(var record CustomsVc);
remote procedure CustomsVc_PastePORowNr(var record CustomsVc,Integer,Integer,Boolean);
remote procedure CustomsVc_PastePONr(var record CustomsVc,Integer);
remote procedure CustomsVc_PasteCurncyCode(var record CustomsVc);
remote procedure CustomsVc_PasteTransDate(var record CustomsVc);
remote procedure CustomsVc_PasteVECode(var record CustomsVc);
remote procedure CustomsVc_PasteArtCode(var record CustomsVc,Integer);

function Boolean CustomsDClassPORowNrEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CustomsVc Customsr;

  GetWindowRecord(wn,Customsr);
  CustomsVc_PastePORowNr(Customsr,rownr,WindowState(wn),changedf);
  PutWindowRecord(wn,Customsr);   
  CustomsDClassPORowNrEFAfter = true;
  return;
end;

function Boolean CustomsDClassPONrEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsVc_PastePONr(Customsr,rownr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassPONrEFAfter = true;
  return;
end;

function Boolean CustomsDClassSumEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsSumup(Customsr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassSumEFAfter = true;
  return;
end;

function Boolean CustomsDClassPriceEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsSumup(Customsr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassPriceEFAfter = true;
  return;
end;

function Boolean CustomsDClassQuantEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsSumup(Customsr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassQuantEFAfter = true;
  return;
end;

function Boolean CustomsDClassCurncyCodeEFAfter(Integer wn,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsVc_PasteCurncyCode(Customsr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean CustomsDClassTransDateEFAfter(Integer wn,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsVc_PasteTransDate(Customsr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassTransDateEFAfter = true;
  return;
end;

function Boolean CustomsDClassInsPrcEFAfter(Integer wn,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsSumup(Customsr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassInsPrcEFAfter = true;
  return;
end;

function Boolean CustomsDClassVECodeEFAfter(Integer wn,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    CustomsVc_PasteVECode(Customsr);
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassVECodeEFAfter = true;
  return;
end;
 
function Boolean CustomsDClassArtCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CustomsVc Customsr;

  if (changedf) then begin  
    GetWindowRecord(wn,Customsr);
    if (rownr>=0) then begin
      CustomsVc_PasteArtCode(Customsr,rownr);
    end;
    PutWindowRecord(wn,Customsr);   
  end; 
  CustomsDClassArtCodeEFAfter = true;
  return;
end;

global
function Boolean CustomsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "VECode": res = CustomsDClassVECodeEFAfter(wn,changed!=0);
    case "InsPrc": res = CustomsDClassInsPrcEFAfter(wn,changed!=0);
    case "TransDate": res = CustomsDClassTransDateEFAfter(wn,changed!=0);
    case "CurncyCode": res = CustomsDClassCurncyCodeEFAfter(wn,changed!=0);

    case "ArtCode": res = CustomsDClassArtCodeEFAfter(wn,rownr,changed!=0);
    case "Quant": res = CustomsDClassQuantEFAfter(wn,rownr,changed!=0);
    case "Price": res = CustomsDClassPriceEFAfter(wn,rownr,changed!=0);
    case "Sum": res = CustomsDClassSumEFAfter(wn,rownr,changed!=0);
    case "PONr": res = CustomsDClassPONrEFAfter(wn,rownr,changed!=0);
    case "PORowNr": res = CustomsDClassPORowNrEFAfter(wn,rownr,changed!=0);
  end;
  CustomsDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean CustomsDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record CustomsVc Customsr;
  val t;

  if (rownr>=0) then begin
    GetWindowRecord(wn,Customsr);
    CustomsSumup(Customsr);
    PutWindowRecord(wn,Customsr);    
  end;
  CustomsDClassOnOverStrike = true;
  RETURN;
END;

global 
function Boolean CustomsDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record CustomsVc Customsr;

  res = true;
  if (WindowState(wn)==2) then begin//Rs_update
    GetPrevWindowRecord(wn,Customsr);
    if (Customsr.OrderedFlag!=0) then begin res = false; end;
  end;
  CustomsDClassDeleteRowTest = res;
  RETURN;
END;

global 
function Boolean CustomsDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  record CustomsVc Customsr;
  Boolean res;
  Integer updatemode;

  res = true;
  updatemode = 2;//Rs_update
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,Customsr);
    if ((Customsr.OrderedFlag==0) or (Customsr.OKFlag!=0)) then begin res = false; end;
  end;
  CustomsDClassOverStrikeTest = res;
  return;
end;
