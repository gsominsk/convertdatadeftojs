remote procedure IVPasteRvrsVATCode(var record IVVc,Boolean);
remote procedure IVDClassOnOpenWindowRemote(var record IVVc,var Integer);
remote function Integer IVTestApprovalStatus(record IVVc);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
external procedure WindowFieldGotoForTouchScreen(Integer,Integer,string,Boolean);
external procedure IVDClassLevelTopExecute(Boolean);
external procedure SetPOSWindowDisplay(string,string);
external procedure IVDClass_RefreshStringList(Integer,record IVVc);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
remote function Boolean IVVc_CalculateRate(var record IVVc);
remote procedure AddMultiBuyDiscountItems_IVVc(var record IVVc);
external procedure FindOTforAcc(string,var string);
external function string 40 SerialNrSClassSpecPName(string);
external function string 40 DelAddrSClassSpecPName(string);
//external function string 255 FindTaxAuthIDControlCode(string,record IVVc);
//external function string 255 FindTaxAuthID(string,LongInt,Date);
external function Boolean TouchScreenLook();
remote procedure IVSumup(var record IVVc,Boolean);
external function Boolean IVDClassAfterEditField(Integer,string,Integer, Integer,Integer);
remote updating function LongInt IVCheckIfSaveAllowed(var record IVVc,record IVVc,LongInt,LongInt);
external procedure IVDClassPasteItemButton(Integer);
remote updating function Integer CreateMailFromIVD(record IVVc,var record MailVc,var string,Boolean,string);
external updating function Integer CreateExternalMailFromIVD(record IVVc,var string,Boolean,string);
external updating procedure IVCreateHtmlFile(record IVVc,record MailVc,Boolean);

global
procedure IVDClassPasteItem190()
BEGIN
  IVDClassPasteItemButton(190);
  RETURN;
END;

global
procedure IVDClassPasteItem191()
BEGIN
  IVDClassPasteItemButton(191);
  RETURN;
END;

global
procedure IVDClassPasteItem192()
BEGIN
  IVDClassPasteItemButton(192);
  RETURN;
END;

global
procedure IVDClassPasteItem193()
BEGIN
  IVDClassPasteItemButton(193);
  RETURN;
END;

global
procedure IVDClassPasteItem194()
BEGIN
  IVDClassPasteItemButton(194);
  RETURN;
END;

global
procedure IVDClassPasteItem195()
BEGIN
  IVDClassPasteItemButton(195);
  RETURN;
END;

global
procedure IVDClassPasteItem196()
BEGIN
  IVDClassPasteItemButton(196);
  RETURN;
END;

global
procedure IVDClassPasteItem197()
BEGIN
  IVDClassPasteItemButton(197);
  RETURN;
END;

global
procedure IVDClassPasteItem198()
BEGIN
  IVDClassPasteItemButton(198);
  RETURN;
END;

global
procedure IVDClassPasteItem199()
BEGIN
  IVDClassPasteItemButton(199);
  RETURN;
END;

global
procedure IVDClassPasteItem200()
BEGIN
  IVDClassPasteItemButton(200);
  RETURN;
END;

global
procedure IVDClassPasteItem201()
BEGIN
  IVDClassPasteItemButton(201);
  RETURN;
END;

global
procedure IVDClassPasteItem202()
BEGIN
  IVDClassPasteItemButton(202);
  RETURN;
END;

global
procedure IVDClassPasteItem203()
BEGIN
  IVDClassPasteItemButton(203);
  RETURN;
END;

global
procedure IVDClassPasteItem204()
BEGIN
  IVDClassPasteItemButton(204);
  RETURN;
END;

global
procedure IVDClassPasteItem205()
BEGIN
  IVDClassPasteItemButton(205);
  RETURN;
END;

global
procedure IVDClassPasteItem206()
BEGIN
  IVDClassPasteItemButton(206);
  RETURN;
END;

global
procedure IVDClassPasteItem207()
BEGIN
  IVDClassPasteItemButton(207);
  RETURN;
END;

global
procedure IVDClassPasteItem208()
BEGIN
  IVDClassPasteItemButton(208);
  RETURN;
END;

global
procedure IVDClassPasteItem209()
BEGIN
  IVDClassPasteItemButton(209);
  RETURN;
END;

global
procedure IVDClassPasteItem210()
BEGIN
  IVDClassPasteItemButton(210);
  RETURN;
END;

global
procedure IVDClassPasteItem211()
BEGIN
  IVDClassPasteItemButton(211);
  RETURN;
END;

global
procedure IVDClassPasteItem212()
BEGIN
  IVDClassPasteItemButton(212);
  RETURN;
END;

global
procedure IVDClassPasteItem213()
BEGIN
  IVDClassPasteItemButton(213);
  RETURN;
END;

global
procedure IVDClassPasteItem214()
BEGIN
  IVDClassPasteItemButton(214);
  RETURN;
END;

global
procedure IVDClassPasteItem215()
BEGIN
  IVDClassPasteItemButton(215);
  RETURN;
END;

global
procedure IVDClassPasteItem216()
BEGIN
  IVDClassPasteItemButton(216);
  RETURN;
END;

global
procedure IVDClassPasteItem217()
BEGIN
  IVDClassPasteItemButton(217);
  RETURN;
END;

global
procedure IVDClassPasteItem218()
BEGIN
  IVDClassPasteItemButton(218);
  RETURN;
END;

global
procedure IVDClassPasteItem219()
BEGIN
  IVDClassPasteItemButton(219);
  RETURN;
END;

global
procedure IVDClassPasteItem220()
BEGIN
  IVDClassPasteItemButton(220);
  RETURN;
END;

global
procedure IVDClassPasteItem221()
BEGIN
  IVDClassPasteItemButton(221);
  RETURN;
END;

global
procedure IVDClassPasteItem222()
BEGIN
  IVDClassPasteItemButton(222);
  RETURN;
END;

global
procedure IVDClassPasteItem223()
BEGIN
  IVDClassPasteItemButton(223);
  RETURN;
END;

global
procedure IVDClassPasteItem224()
BEGIN
  IVDClassPasteItemButton(224);
  RETURN;
END;

global
procedure IVDClassPasteItem225()
BEGIN
  IVDClassPasteItemButton(225);
  RETURN;
END;

global
procedure IVDClassPasteItem226()
BEGIN
  IVDClassPasteItemButton(226);
  RETURN;
END;

global
procedure IVDClassPasteItem227()
BEGIN
  IVDClassPasteItemButton(227);
  RETURN;
END;

global
procedure IVDClassPasteItem228()
BEGIN
  IVDClassPasteItemButton(228);
  RETURN;
END;

global
procedure IVDClassPasteItem229()
BEGIN
  IVDClassPasteItemButton(229);
  RETURN;
END;

global
procedure IVDClassPasteItem230()
BEGIN
  IVDClassPasteItemButton(230);
  RETURN;
END;

global
procedure IVDClassPasteItem231()
BEGIN
  IVDClassPasteItemButton(231);
  RETURN;
END;

global
procedure IVDClassPasteItem232()
BEGIN
  IVDClassPasteItemButton(232);
  RETURN;
END;

global
procedure IVDClassPasteItem233()
BEGIN
  IVDClassPasteItemButton(233);
  RETURN;
END;

global
procedure IVDClassPasteItem234()
BEGIN
  IVDClassPasteItemButton(234);
  RETURN;
END;

global
procedure IVDClassPasteItem235()
BEGIN
  IVDClassPasteItemButton(235);
  RETURN;
END;

global
procedure IVDClassPasteItem236()
BEGIN
  IVDClassPasteItemButton(236);
  RETURN;
END;

global
procedure IVDClassPasteItem237()
BEGIN
  IVDClassPasteItemButton(237);
  RETURN;
END;

global
procedure IVDClassPasteItem238()
BEGIN
  IVDClassPasteItemButton(238);
  RETURN;
END;

global
procedure IVDClassPasteItem239()
BEGIN
  IVDClassPasteItemButton(239);
  RETURN;
END;

global
procedure IVDClassPasteItem240()
BEGIN
  IVDClassPasteItemButton(240);
  RETURN;
END;

global
procedure IVDClassPasteItem241()
BEGIN
  IVDClassPasteItemButton(241);
  RETURN;
END;

global
procedure IVDClassPasteItem242()
BEGIN
  IVDClassPasteItemButton(242);
  RETURN;
END;

global
procedure IVDClassPasteItem243()
BEGIN
  IVDClassPasteItemButton(243);
  RETURN;
END;

global
procedure IVDClassPasteItem244()
BEGIN
  IVDClassPasteItemButton(244);
  RETURN;
END;

function LongInt CheckIfOpenInvoiceForCurUser()
BEGIN
  LongInt res;
  record IVVc IVr;
  
  IVr.OKFlag = 0;
  IVr.SalesMan = CurrentUser;
  if (ReadLastKey("OKFlagSalesMan",IVr,2,true)) then begin
    if (IVr.OKFlag==0) and (IVr.SalesMan==CurrentUser) then begin
      res = IVr.SerNr;
    end;
  end;
  CheckIfOpenInvoiceForCurUser = res;
  RETURN;
END;

procedure CloseAllErrorClassWindows()
begin
  Integer i;

  for (i=0;i<=100;i=i+1) begin
    if (GetWindowClass(i)=="ErrorClass") then begin
      CloseWindow(i);
    end;
  end;
  return;
end;

updating function Boolean IVLoginCloseAllWindows(Integer automsavewn)
BEGIN
  Boolean res;
  Integer i;
  record IVVc IVr;
  record IVVc oldIVr;
  LongInt oldbartab;
  
  res = true;
  for (i=0;i<=100;i=i+1) begin
    if (i==automsavewn) then begin
      GetWindowRecord(i,IVr);
      oldbartab = CheckIfOpenInvoiceForCurUser;
      if (oldbartab!=-1) then begin
        CloseWindow(i);
        goto LIVLoginCloseAllWindows;
      end;  
			if (WindowDoOK(i,0)==false) then begin
        res = false;
        CloseWindow(i);
        CloseAllErrorClassWindows;
        goto LIVLoginCloseAllWindows;
			end;
			
/*
//      IVSumup(IVr,true); // I don't think we need this, it should be summed up already.
      switch (WindowState(i)) begin
        case 1: //Rs_insert
          if (IVCheckIfSaveAllowed(IVr,oldIVr,1,1)==0) then begin
            if (RecordStore(IVr,false)) then begin 
            end;
          end else begin
            res = false;
            goto LIVLoginCloseAllWindows;
          end;
        case 2: //Rs_update
          GetPrevWindowRecord(i,oldIVr);
          if (IVCheckIfSaveAllowed(IVr,oldIVr,2,1)==0) then begin
            if (RecordUpdate(oldIVr,IVr,true)==0) then begin 
            end;
          end else begin
            res = false;
            goto LIVLoginCloseAllWindows;
          end;
      end;
*/      
      CloseWindow(i);
      goto LIVLoginCloseAllWindows;
    end;
  end;
LIVLoginCloseAllWindows:; 
  IVLoginCloseAllWindows = res; 
  RETURN;
END;          

global
updating procedure IVDClassOnOpenFromBrowse(Integer wn)
begin
  Integer i;
  record LocalMachineBlock LocalMachineRec;
 
  BlockLoad(LocalMachineRec);
  if (LocalMachineRec.OneBarTabWindow!=0) then begin
    for (i=1;i<=100;i=i+1) begin//should be MaxWindow      
      if ((i!=wn) and (i!=CurWindow)) then begin
        if (WindowValid(i)) then begin

          switch (GetWindowClass(i)) begin
            case "IVDClass":
              if (IVLoginCloseAllWindows(i)) then begin            
              end;
            case "BGWClass": ;
            case "MasterWClass":  ;
            otherwise
              CloseWindow(i);
          end;
        end;
      end;
    end;
  end;
  return;
end;

global
function Boolean IVDClassOnOpenWindow(Integer wn)
begin
  record IVVc IVr;
  record LocalMachineBlock LMb;
  Integer i,rwcnt,pmcnt,level,AcceptanceStatusFlag;
  
  GetWindowRecord(wn,IVr);
  IVDClassOnOpenWindowRemote(IVr,AcceptanceStatusFlag);
  if (TouchScreenLook) then begin
    IVDClassLevelTopExecute(ClientMode==false);
//    PutWindowString(wn,"PrevSuspended",IVCashr.Suspended);
    PutWindowString(wn,"Suspended","0");
    SetPOSWindowDisplay("","");
    IVDClass_RefreshStringList(wn,IVr);
    if (WindowState(wn)!=Rs_insert) then begin
      ReRunWindowDef(wn);
    end;    
    level = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
    PutWindowString(wn,"touchscreenwindowpageprevious",level);
    //WindowFieldGoto(wn,IVr,-1,"ivcashcommand",false);
    WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false); 
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  IVDClassOnOpenWindow = false;
  return;
end;

global
procedure IVDClassOnWindowRecordChange(Integer wn)
begin
  record IVVc IVr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,IVr);   
  IVDClassOnOpenWindowRemote(IVr,AcceptanceStatusFlag);
  if (WindowState(wn)!=Rs_normal) then begin
    if (TouchScreenLook) then begin
      IVDClass_RefreshStringList(wn,IVr);
    end;
  end;
  if (TouchScreenLook and windowsMode==0) then begin
    ReRunWindowDef(wn);//ReRunWindowDef on windows calls OnWindowRecordChange....
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
//  IVSumupSoftEditFields(wn,IVr);
//  PutWindowRecord(wn,IVr); causes crash cause PutWindowRecord calls OnWindowRecordChange so ....
  return;
end;

global
function Boolean IVDClassActiveFieldOnOpen(Integer wn)
begin
  Boolean res;
  record IVVc IVr;
  
  if (TouchScreenLook) then begin
    //WindowFieldGoto(wn,IVr,-1,"ivcashcommand",false);
    WindowFieldGotoForTouchScreen(wn,-1,"ivcashcommand",false); 
    res = true;
  end;
  IVDClassActiveFieldOnOpen = res;
  return;
end;

global
updating procedure IVDClassToolLogin()
BEGIN
  record IVVc IVr;
  record IVVc oldIVr;
  Integer wn,nwn;

  wn = CurWindow;
  WindowDeactivateField(wn);
  if (IVDClassAfterEditField(wn,WindowActiveField(wn),0,WindowActiveRow(wn),1)) then begin
  end;
  if (IVLoginCloseAllWindows(wn)) then begin
    OpenLoginWindow(0,"Login2Class",0);
  end;
LIVDClassToolLogin:;  
  RETURN;
END;          

global 
updating procedure CreateMailFromIVDsm()
begin
  Integer wn,nwn;
  record MailVc Mailr;
  record IVVc IVr;
  Integer err;
  string 255 tstr,docname;
  record MailSettingsBlock MSb;
  Boolean testf;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normalstate
    testf = true;
    GetWindowRecord(wn,IVr); 
    err = IVTestApprovalStatus(IVr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      BlockLoad(MSb);
      if (MSb.UseExternalMail) then begin
        err = CreateExternalMailFromIVD(IVr,tstr,true,WindowFormName(wn));      
      end else begin
        err = CreateMailFromIVD(IVr,Mailr,tstr,false,WindowFormName(wn));
        if (err!=0) then begin
          if (err>0) then begin
            MessageBox(err,": " & tstr);
          end;
        end else begin
          nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
        end;
      end;
    end;
  end;
  return;
end;

procedure IVDClassSpecPasteNameObjects(Integer wn,var string psname)
BEGIN
  record IVVc IVr;
  row IVVc IVrw;
  Integer rownr;
  string 200 typ;

  GetWindowRecord(wn,IVr);
  rownr = WindowActiveRow(wn);
  typ = "";
  if (rownr>=0) then begin
    MatRowGet(IVr,rownr,IVrw);
    FindOTforAcc(IVrw.SalesAcc,typ);
  end else begin
    FindOTforAcc(IVr.ARAcc,typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  RETURN;
END;

procedure IVDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record IVVc IVr;
  Integer rownr;

  GetWindowRecord(wn,IVr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false); 
// UST: why? this causes "empty lines are not allowed" message
//if not in assisted variety doesnt open
  WindowFieldGoto(wn,IVr,rownr,"ArtCode",false);
  return;
end;

global
function string 40 IVDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DelAddrCode": psname = DelAddrSClassSpecPName(defpsname);
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "Objects":IVDClassSpecPasteNameObjects(wn,psname);
    case "ArtCode": IVDClassSpecPasteNameArtCode(wn,psname);
  end;
  IVDClassSpecPasteName = psname;
  return;
end;

global
function Boolean IVDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record IVVc IVr;
  record IVVc oldIVr;
  record IVVc tmpIVr;
  Boolean ratecalculatedf;
  row IVVc IVrw;
  Integer i,rwcnt;
  record INVc INr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,IVr);  
    if (WindowState(wn)==Rs_update) then begin
      GetPrevWindowRecord(wn,oldIVr);  
    end;
    if (IVr.OKFlag==0) then begin
      GetWindowRecord(wn,tmpIVr);    
      ratecalculatedf = IVVc_CalculateRate(tmpIVr);
    end;
    if (ratecalculatedf) then begin
      IVr.FrRate = tmpIVr.FrRate;
      IVr.ToRateB1 = tmpIVr.ToRateB1;
      IVr.ToRateB2 = tmpIVr.ToRateB2;
      IVr.BaseRate1 = tmpIVr.BaseRate1;
      IVr.BaseRate2 = tmpIVr.BaseRate2;
    end;
    if (WindowState(wn)==Rs_update) then begin
      MatRowGet(oldIVr,rownr,IVrw);
      if (IVrw.stp==kInvoiceRowTypeCredit) then begin
        IVr.CredInv = -1;
      end;
    end;
    IVPasteRvrsVATCode(IVr,false);
    IVSumup(IVr,true);
    AddMultiBuyDiscountItems_IVVc(IVr);
    PutWindowRecord(wn,IVr);   
  end;
  IVDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean IVDClassIPBookVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  
  res = false;
  IVDClassIPBookVATButtonAction = res;
  return;
end;

global
function Boolean IVDClassFiscalFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record IVVc IVr;
  Integer normalmode,updatemode;
  
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  IVDClassFiscalFlagButtonAction = res;
  return;
end;

global
function Boolean IVDClassARonTRButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record IVVc IVr;
  Integer normalmode,updatemode;
  
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IVr);
    if (IVr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  IVDClassARonTRButtonAction = res;
  return;
end;
