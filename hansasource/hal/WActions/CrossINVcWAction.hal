remote procedure CrossINVc_PasteItemCode(var record CrossINVc);
remote procedure CrossINVc_PasteCrossItemCode(var record CrossINVc);
remote procedure CrossINVc_PasteCustCode(var record CrossINVc);
external procedure SwapStr(var string,var string);
external function string 40 INSClassPasteSpecialWindowClass(string);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external procedure FindMotherWindowLocation(Integer,var string,var Date);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);

global
function Boolean CrossINDClassItemCodeEFAfter(Integer wn,Integer changedf)
begin
  record CrossINVc CrossINr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CrossINr);
    CrossINVc_PasteItemCode(CrossINr);
    PutWindowRecord(wn,CrossINr);
  end;
  
  CrossINDClassItemCodeEFAfter = true;
  return;
end;

global
function Boolean CrossINDClassCrossItemCodeEFAfter(Integer wn,Integer changedf)
begin
  record CrossINVc CrossINr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CrossINr);
    CrossINVc_PasteCrossItemCode(CrossINr);
    PutWindowRecord(wn,CrossINr);
  end;
  
  CrossINDClassCrossItemCodeEFAfter = true;
  return;
end;

global
function Boolean CrossINDClassCustCodeEFAfter(Integer wn,Integer changedf)
begin
  record CrossINVc CrossINr;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,CrossINr);
    CrossINVc_PasteCustCode(CrossINr);
    PutWindowRecord(wn,CrossINr);
  end;
  
  CrossINDClassCustCodeEFAfter = true;
  return;
end;

global
function Boolean CrossINDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ItemCode": res = CrossINDClassItemCodeEFAfter(wn,changed);
    case "CrossItemCode": res = CrossINDClassCrossItemCodeEFAfter(wn,changed);
    case "CustCode": res = CrossINDClassCustCodeEFAfter(wn,changed);
  end;
  
  CrossINDClassAfterEditField = res;
  return;
end;

global
function Boolean CrossINSClassSwitchRow(Integer wn,Integer rownr)
begin
  record CrossINVc CrossINr;
  record INVc INr;
  val t,tproc,unitprdisc;
  string 20 location;
  Date td;

  if (FindWindow("ArtStatIClass")!=0) then begin
    if (ReadMarkedRecord(wn,CrossINr)) then begin
      FindMotherWindowLocation(wn,location,td);
      ReadFirstItem(CrossINr.CrossItemCode,INr,false,false);
      SendArtStat(INr.Code,location,INr.Recepy,t,tproc,unitprdisc,td,0);
    end;
  end;
  
  CrossINSClassSwitchRow = true;
  return;
end;

global
updating procedure ReverseCrossINsm()
begin
  Integer wn;
  record CrossINVc CrossINr;
  string 255 tstr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,CrossINr);
    CloseWindow(wn);
    SwapStr(CrossINr.ItemCode,CrossINr.CrossItemCode);
    SwapStr(CrossINr.ItemName,CrossINr.CrossItemName);
    wn = OpenWindow("CrossINDClass",1,0,"","",CrossINr);
    WindowDoOk(wn,0);
  end else begin
    Beep;
  end;
  
  return;
end;

global
procedure AllItemsCrossINsm()
begin
  Integer wn,mwn,i;
  record INVc INr;
  record CrossINVc CrossINr;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  CloseWindow(wn);
  wn = OpenWindow(INSClassPasteSpecialWindowClass("INSClass"),0,mwn,"","",INr);
  
  return;
end;

global
procedure CrossItemCrossINsm()
begin
  Integer wn,mwn,i;
  record CrossINVc CrossINr,CrossIN2r;
  
  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(CrossINr,wn,i)) begin
    i = i + 1;
  end;
  if (i==2) then begin
    mwn = MotherWindow(wn);
    CloseWindow(wn);
    wn = OpenWindow("CrossINSClass",0,mwn,CrossINr.CrossItemCode,"",CrossIN2r);
  end else begin
    MessageBox(26210,"");
  end;
  
  return;
end;

