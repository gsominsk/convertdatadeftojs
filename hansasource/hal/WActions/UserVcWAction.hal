external updating procedure CheckUserEmailAddress(record UserVc);
external procedure ValidateUserEmailAddress(record UserVc);
external procedure FindUserMailboxName(string,var string,var string);
remote procedure GetUsersForEmailAddr(string,integer,var area);
remote updating procedure RemoteSubscriptionInvitationMn(record RcVc);

global
procedure ChangePasswdUserLsm()
BEGIN
  record UserVc Userr;
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  if (UserCanAction("AllowPasswdChanging",true)) then begin
    if (ReadMarkedRecord(wn,Userr)) then begin
      nwn = OpenWindow("ChngePasswordNoOldClass",1,0,"","",RepSpec);
      DeselectWindow(nwn,false);
      RepSpec.ObjStr = Userr.Code;
      RepSpec.AccStr = "";
      RepSpec.FirstAcc = "";
      RepSpec.LastAcc = "";
      RepSpec.Notation = 1;
      RepSpec.ArtMode = 0;
      RepSpec.f1 = "DontQuiteOnCancel";
      PutWindowRecord(nwn,RepSpec);
      SelectWindow(nwn);
    end;
  end;
  RETURN;
END;

global
procedure ChangeDiscPasswdUserLsm()
BEGIN
  record UserVc Userr;
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  if (UserCanAction("AllowPasswdChanging",true)) then begin
    if (ReadMarkedRecord(wn,Userr)) then begin
      nwn = OpenWindow("ChangeDiscPasswdNoOldClass",1,0,"","",RepSpec);
      DeselectWindow(nwn,false);
      RepSpec.ObjStr = Userr.Code;
      RepSpec.AccStr = "";
      RepSpec.FirstAcc = "";
      RepSpec.LastAcc = "";
      RepSpec.Notation = 1;
      RepSpec.ArtMode = 0;
      PutWindowRecord(nwn,RepSpec);
      SelectWindow(nwn);
    end;
  end;
  RETURN;
END;

global
procedure ToDoUserLsm()
BEGIN
  record UserVc Userr;
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    ReportDefaults(RepSpec,"ActTodoRClass");
    RepSpec.f1 = Userr.Code;
    RepSpec.Media = mtScreen;
    RepSpec.repname = "ActTodoRn";
    RepSpec.flags[2] = 1;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
procedure OpenCalendarUserLsm()
BEGIN
  record UserVc Userr;
  record RcVc RepSpec;
  Integer wn,nwn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    if (UserModuleAccess("modCAL")==5) then begin 
      if ((ProgramType!=typFirstOffice) and 
          (ProgramType!=typFirstOfficeSmall) and IsBooks==false) then begin
        goto LOpenCalendarUserLsm; 
      end;
    end;
//    if (UserRegisterAccess("ActVc")==0) then begin goto LOpenCalendarUserLsm; end;
    RepSpec.f1 = Userr.Code;
    RepSpec.sStartDate = AddDay(CurrentDate,-GetDay(CurrentDate)+1);    
    if (PocketVersion==false) then begin
      RepSpec.sStartDate = AddMonth(RepSpec.sStartDate,-1);
    end;
    nwn = OpenWindow("HalfYearWClass",1,0,"","",RepSpec);
  end;
LOpenCalendarUserLsm:;  
  RETURN;
END;

global
procedure OpenMailboxUserLsm()
BEGIN
  record UserVc Userr;
  record RcVc RepSpec;
  Integer wn,nwn;
  string 60 mailboxcode,mailboxname;  

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    FindUserMailboxName(Userr.Code,mailboxcode,mailboxname);
    if (nonblank(mailboxcode)) then begin
      nwn = OpenWindow("MailLClass",0,0,mailboxcode,mailboxname,RepSpec);
    end;
  end;
  RETURN;
END;

global
procedure CreateMailboxUserLsm()
BEGIN
  record ConfVc Confr;
  record UserVc Userr;
  record RcVc RepSpec;
  Integer wn,nwn;
  string 60 mailboxcode,mailboxname;  

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    FindUserMailboxName(Userr.Code,mailboxcode,mailboxname);
    if (nonblank(mailboxcode)) then begin
//      nwn = OpenWindow("MailLClass",0,0,mailboxcode,mailboxname,RepSpec);
      MessageBox(1464,"");
    end else begin
      RecordNew(Confr);
      Confr.AddrCode = Userr.Code;
      Confr.AddrName = Userr.Name;
      Confr.Class = kConfClassMailbox;
      Confr.MotherConf = -1;
      nwn = OpenWindow("ConfDClass",1,0,"","",Confr);
    end;
  end;
  RETURN;
END;

global
function Boolean UserDClasslimitedAccessButtonAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record UserVc Userr;
  record ModuleBlock ModRec;
  
  res = true;
  GetWindowrecord(wn,Userr);
  if (Userr.limitedAccess>0) then begin
    BlockLoad(ModRec);
    if (ModRec.ExternalUser==0) then begin
      MessageBox(1375,"");
      Userr.limitedAccess = 0;
      res = false;
    end;  
  end;
  UserDClasslimitedAccessButtonAfter = res;
  RETURN;
END;

global
updating procedure ActivatePersDesktopLsm() // FirstOffice, create Mailbox behind the scene
BEGIN
  record ConfVc Confr;
  record UserVc Userr;
  record RcVc RepSpec;
  Integer wn,nwn;
  string 60 mailboxcode,mailboxname;  

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    FindUserMailboxName(Userr.Code,mailboxcode,mailboxname);
    if (nonblank(mailboxcode)) then begin
      MessageBox(1645,"");
    end else begin
      RecordNew(Confr);
      Confr.AddrCode = Userr.Code;
      Confr.AddrName = Userr.Name;
      Confr.Class = kConfClassMailbox;
      Confr.MotherConf = -1;
      if (RecordStore(Confr,false)) then begin
      end;
      MessageBox(1646,"");
    end;
  end else begin
    MessageBox(1647,"");
  end;
  RETURN;
END;

global
updating procedure ActivatePersDesktopDsm() // FirstOffice, create Mailbox behind the scene
BEGIN
  record ConfVc Confr;
  record UserVc Userr;
  record RcVc RepSpec;
  Integer nwn;
  string 60 mailboxcode,mailboxname;  

  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    FindUserMailboxName(Userr.Code,mailboxcode,mailboxname);
    if (nonblank(mailboxcode)) then begin
      MessageBox(1645,"");
    end else begin
      RecordNew(Confr);
      Confr.AddrCode = Userr.Code;
      Confr.AddrName = Userr.Name;
      Confr.Class = kConfClassMailbox;
      Confr.MotherConf = -1;
      if (RecordStore(Confr,false)) then begin
      end;
      MessageBox(1646,"");
    end;
  end else begin
    MessageBox(1647,"");
  end;
  RETURN;
END;

global
updating procedure SilentlyActivatePersDesktop() // FirstOffice, create Mailbox behind the scene
begin
  record ConfVc Confr;
  record UserVc Userr;
  record RcVc RepSpec;
  Integer nwn;
  string 60 mailboxcode,mailboxname;  
  
  Userr.Code = CurrentUser;
  if (ReadFirstMain(Userr,1,true)) then begin
    FindUserMailboxName(Userr.Code,mailboxcode,mailboxname);
    if (blank(mailboxcode)) then begin
      RecordNew(Confr);
      Confr.AddrCode = Userr.Code;
      Confr.AddrName = Userr.Name;
      Confr.Class = kConfClassMailbox;
      Confr.MotherConf = -1;
      if (RecordStore(Confr,false)) then begin
      end;
    end;
  end;
  return;
end;

global
procedure ComOpenCalendar()
BEGIN
  record RcVc RepSpec;
  string 255 tstr;
  record UserVc Userr;
  Integer wn,nwn;
  Boolean foundf;
  
  wn = CurWindow;
  if (SelectedListLine(wn)>=0) then begin
    Userr.Name = GetListString(wn,SelectedListLine(wn));
    foundf = ReadFirstKey("Name",Userr,1,true);
    if (foundf==false) then begin
      Userr.Name = GetListString(wn,0);
      foundf = ReadFirstKey("Name",Userr,1,true);
    end;
    if (foundf) then begin
      if (UserModuleAccess("modCAL")==5) then begin goto LComOpenCalendar; end;
//      if (UserRegisterAccess("ActVc")==0) then begin goto LComOpenCalendar; end;
      RepSpec.f1 = Userr.Code;
      RepSpec.sStartDate = AddDay(CurrentDate,-GetDay(CurrentDate)+1);    
      if (PocketVersion==false) then begin
        RepSpec.sStartDate = AddMonth(RepSpec.sStartDate,-1);
      end;
      nwn = OpenWindow("HalfYearWClass",1,0,"","",RepSpec);
    end;
  end else begin
    Beep;
  end;
LComOpenCalendar:;
  RETURN;
END;

global
procedure CreateObjUserDsm()
begin
  record ObjVc Objr;
  record UserVc Userr;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,Userr);
  DeselectWindow(wn,false);
  Objr.Code = Userr.Code;
  Objr.Comment = Userr.Name;
  nwn = OpenWindow("ObjDClass",1,wn,"","",Objr);
  WindowFieldGoto(wn,Userr,-1,"PersObjx",true);
  return;
end;

global
function Boolean USDClassOnOKWindow(Integer wn)
begin
  Integer wn1;
  record Rcvc RepSpec;
  
/*  
wierd
  wn1 = FindWindow("IAPWClass");
  if (wn1>0) then begin
    ReOpenWindow(wn,"SerialNoScanNPTSSClass",0,wn1,"","",RepSpec);
    SelectWindow(wn1);
    CloseWindow(wn);
  end;
*/
  USDClassOnOKWindow = true;
  return;
end;

global
function Boolean USDClassUnlicensedButtonAction(Integer wn,Integer value)
begin
  USDClassUnlicensedButtonAction = false;
  return;
end;

global
updating procedure SelectUserForEmailAddrWClassSelect()
begin
  Integer wn;
  string 255 usercode;
  LongInt line;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);

  line = SelectedListLine(wn);
  if (line>=0) then begin
    usercode = GetListTag(wn,line);
    if (nonblank(usercode) and usercode<>"tagLOADING%") then begin
      RepSpec.f2 = usercode;
      PutWindowRecord(wn,RepSpec);
    end;
  end;

  if (nonblank(RepSpec.f2)) then begin
    WindowDoOK(wn,0);
  end;

  return;
end;

global
updating function Boolean SelectUserForEmailAddrWClassListDblClick(Integer wn)
begin
  SelectUserForEmailAddrWClassSelect;
  SelectUserForEmailAddrWClassListDblClick = true;
  return;
end;

global
updating function Boolean SelectUserForEmailAddrWClassOnOKWindow(Integer wn)
begin
  SelectUserForEmailAddrWClassSelect;
  SelectUserForEmailAddrWClassOnOKWindow = true;
  return;
end;


global
procedure FillSelectUserForEmailAddrWClass(Integer wn,Area a_users)
begin
  record RcVc RepSpec;
  array string 255 filearr;
  longint l,lcnt;
  string 255 tag;

  GetWindowRecord(wn,RepSpec);

  ClearStringList(wn);
  lcnt = CountLinesInArea(a_users);
  for (l = 0; l<lcnt; l = l + 1) begin
    tag = Trim(GetLineFromArea(a_users,l));
    if (nonblank(tag)) then begin
      AddListRow(wn,"users",1,tag,0);
      AddListData(wn,"users","user",tag);
      AddListData(wn,"users","email",RepSpec.f1);
    end;
  end;
  PutWindowRecord(wn,RepSpec);
  SetSelectedListLine(wn,0);
  return;
end;

global
procedure ValidateUserEmailAddressLsm()
begin
  record UserVc Userr;
  record GlobalUserVc GlobalUserr;
  Integer wn,nwn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    if (blank(Userr.LoginEmailAddr)) then begin
      MessageBox(2289,"");
    end else begin
      ValidateUserEmailAddress(Userr);
    end;
  end;
  return;
end;

global
procedure ValidateUserEmailAddressDsm()
begin
  record UserVc Userr;
  record GlobalUserVc GlobalUserr;
  Integer wn;

  wn = CurWindow;
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,Userr);
    if (blank(Userr.LoginEmailAddr)) then begin
      MessageBox(2289,"");
    end else begin
      ValidateUserEmailAddress(Userr);
    end;
  end;
  return;
end;

global
updating procedure CheckUserEmailAddressLsm()
begin
  record UserVc Userr;
  Integer wn,nwn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,Userr)) then begin
    CheckUserEmailAddress(Userr);
  end;
  return;
end;

global
updating procedure CheckUserEmailAddressDsm()
begin
  record UserVc Userr;
  Integer wn;

  wn = CurWindow;
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,Userr);
    CheckUserEmailAddress(Userr);
  end;
  return;
end;

global
updating procedure SendUserRegistration()
begin
  Integer wn;
  LongInt err,subsernr;
  Integer acnt;
  record UserVc Userr;
  record RcVc RepSpec

  wn = CurWindow;
  if (wn>0) then begin 
    if (WindowState(wn)==Rs_normal) then begin
      GetWindowRecord(wn,Userr);
      if (blank(Userr.LoginEmailAddr) and blank(Userr.Phone1)) then begin
        MessageBox(30224,"");
        WindowFieldGoto(wn,Userr,-1,"LoginEmailAddr",true);
        goto LSendUserRegistration;
      end;
      RepSpec.f1 = Userr.Code;
      RepSpec.f2 = Userr.LoginEmailAddr;
      RepSpec.f3 = Userr.Phone1;
      RemoteSubscriptionInvitationMn(RepSpec);
      MessageBox(30226,"");
//      RepSpec.repname = "SubscriptionInvitationMn";
//      RepSpec.critname = "SubscriptionInvitationVClass";
//      RunMaintenance(RepSpec);
    end else begin
      MessageBox(30225,"");
    end;
  end;
LSendUserRegistration:;  
  return;
end;

global
updating procedure ASPAssignSSHKeyLsm()
begin
  record UserVc USr;
  record RLinkVc RLr;
  string 255 rlcomment,selname;
  Boolean res;
  LongInt wn;
  Integer i;
  record NotepadVc NPr;
  area a_key;
  Integer notenr;

  wn = CurWindow;
  if (GetRecordFromBrowse(USr,wn,1)==false) then begin
    MessageBox(0,"Select a person to use this function."); // No need to translate, Cloud Controller specific
    goto LASPAssignSSHKeyLsm;
  end;

  rlcomment = USr.SSHUsername & ".ssh";
  if (blank(USr.SSHUsername)) then begin
    MessageBox(0,"You must enter the SSH username on the person card before you can upload a key."); // No need to translate, Cloud Controller specific
    goto LASPAssignSSHKeyLsm;
  end;

  i = 0;
  while (ReadRecordLink(USr,i,NPr,RLr)) begin
    if (RLr.Comment==rlcomment) then begin
      MessageBox(0,"A key exists already. To replace it, delete the attached note (" & rlcomment & ") first."); // No need to translate, Cloud Controller specific
      goto LASPAssignSSHKeyLsm;
    end;
    i = i + 1;
  end;

  res = OpenFileDialog("pub",selname);
  if (res) then begin
    AddFileToArea(selname,a_key,false);
    RecordNew(NPr);
    NPr.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
    AddAreaToTextField(a_key,NPr);
    if (RecordStore(NPr,false)) then begin
      CreateRecordLink(USr,CurrentCompany,NPr,CurrentCompany);
      notenr = 1;
      while (ReadRecordLink(USr,notenr,NPr,RLr)) begin
        notenr = notenr + 1;
      end;
      if (ReadRecordLink(USr,notenr-1,NPr,RLr)) then begin
        RLr.Comment = rlcomment;
        if (RecordStore(RLr,true)) then begin end;
      end;
    end;
  end;

LASPAssignSSHKeyLsm:;
  return;
end;

