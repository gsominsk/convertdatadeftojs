remote procedure TBBUDClassOnOpenWindowRemote(var record TBBUVc,var Integer);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_TBBUVc(record TBBUVc,var record RcVc,var Integer);
external function LongInt GetCurUserLastNr(string);
external function Integer CountObjects(string);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
remote function Integer TBBUTestApprovalStatus(record TBBUVc);
external function Boolean TBBUDClassSwitchRow(Integer,Integer);
external procedure CustMessages(string,string);
remote updating function LongInt RecordAction_raPasteTBBUInPO(record TBBUVc,var record POVc);
remote updating function LongInt RecordAction_raPasteTBBUInOR(record TBBUVc,var record ORVc);
remote updating procedure GenProInvoices(var record RcVc,Boolean);

global
updating procedure IVFromTBBUDsm()
begin
  record TBBUVc TBBUr;
  record RcVc RepSpec;
  LongInt r,newnr;
  Integer wn,nwn,err;
  record IVVc IVr;
  record ProjectBlock PRb;
  Boolean testf;
  record SRBlock SRRec;
  
  BlockLoad(PRb);
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,TBBUr);
    testf = true;
    err = TBBUTestApprovalStatus(TBBUr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      BlockLoad(SRRec);
      newnr = GetCurUserLastNr("IVVc");
      if (newnr!=-1) then begin
        newnr = SRRec.LastInvNr;
      end;
      RecordNew(IVr);
      IVr.SerNr = NextSerNr("IVVc",IVr.TransDate,newnr,false,IVr.LangCode);
      if (IVr.SerNr<0) then begin
        MessageBox(1744,"");
        goto LIVFromTBBUDsm;
      end;
      RepSpec.repname = "ProInvMn";
      RepSpec.Media = mtFile;
      RepSpec.ArtMode = 0;
      RepSpec.flags[20] = 1;
      RepSpec.f2 = TBBUr.PRCode;
      RepSpec.f1 = TBBUr.CustCode;
  //    RepSpec.d2 = TBBUr.TransDate;
      RepSpec.d2 = CurrentDate;
      RepSpec.d1 = CurrentDate;
      RepSpec.flags[9] = PRb.AddActInfo;
      RepSpec.f6 = CurBranchID;
      if (blankdate(RepSpec.d2)) then begin
        RepSpec.d2 = CurrentDate;
      end;
      if (nonblank(RepSpec.f2)) then begin
        GenProInvoices(RepSpec,false)
        if (RepSpec.LastVer>0) then begin
          IVr.SerNr = RepSpec.LastVer;
          if (ReadFirstMain(IVr,1,true)) then begin
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
            CustMessages("IVVc",TBBUr.CustCode);      
          end;
        end;
        UpdateBrowses("IVVc");
      end;
    end;
  end;
LIVFromTBBUDsm:  
  return;
end;

global
updating procedure IVFromTBBUCompleteDsm()
begin
  record TBBUVc TBBUr;
  record RcVc RepSpec;
  LongInt r;
  Integer wn,nwn,err;
  record IVVc IVr;
  record ProjectBlock PRb;
  Boolean testf;
  
  BlockLoad(PRb);
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,TBBUr);
    testf = true;
    err = TBBUTestApprovalStatus(TBBUr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      RepSpec.repname = "ProInvMn";
      RepSpec.Media = mtFile;
      RepSpec.ArtMode = 0;
      RepSpec.flags[20] = 1;
      RepSpec.flags[21] = 1;
      RepSpec.f2 = TBBUr.PRCode;
      RepSpec.f1 = TBBUr.CustCode;
  //    RepSpec.d2 = TBBUr.TransDate;
      RepSpec.d2 = CurrentDate;
      RepSpec.d1 = CurrentDate;
      RepSpec.flags[9] = PRb.AddActInfo;
      RepSpec.f6 = CurBranchID;
      if (blankdate(RepSpec.d2)) then begin
        RepSpec.d2 = CurrentDate;
      end;
      if (nonblank(RepSpec.f2)) then begin
        GenProInvoices(RepSpec,false)
        if (RepSpec.LastVer>0) then begin
          IVr.SerNr = RepSpec.LastVer;
          if (ReadFirstMain(IVr,1,true)) then begin
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
          end;
        end;
        UpdateBrowses("IVVc");
        CustMessages("IVVc",TBBUr.CustCode);      
      end;
    end;
  end;
  return;
end;

global
updating procedure POFromTBBUDsm()
BEGIN
  record TBBUVc TBBUr;
  record POVc POr;
  LongInt r;
  Integer wn,nwn,err;
  Boolean testf;  
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,TBBUr);
    testf = true;
    err = TBBUTestApprovalStatus(TBBUr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      if (UserCanAction("TBBUToPO",true)) then begin
        r = RecordAction_raPasteTBBUInPO(TBBUr,POr);
        switch (r) begin
          case -1: Beep;
          case -2: MessageBox(1281,"");
          otherwise
            nwn = OpenWindow("PODClass",1,0,"","",POr);
        end;
        UpdateBrowses("POVc");
      end else begin
        MessageBox(1274,StringFromStringSet(3,"TBBUToPO"));
      end;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure ORFromTBBUDsm()
BEGIN
  record TBBUVc TBBUr;
  record ORVc ORr;
  LongInt r;
  Integer wn,nwn,err;
  Boolean testf;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,TBBUr);
    testf = true;
    err = TBBUTestApprovalStatus(TBBUr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      if (UserCanAction("TBBUToOR",true)) then begin
        r = RecordAction_raPasteTBBUInOR(TBBUr,ORr);
        switch (r) begin
          case -1: Beep;
          case -2: MessageBox(1281,"");
          otherwise
            nwn = OpenWindow("ORDClass",1,0,"","",ORr);
        end;
        UpdateBrowses("ORVc");
      end else begin
        MessageBox(1274,StringFromStringSet(3,"TBBUToOR"));
      end;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure ItemStatusTBBUDsm()
BEGIN
  Integer wn,nwn;
  Boolean testf;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,false);
  testf = TBBUDClassSwitchRow(wn,WindowActiveRow(wn));
  RETURN
END;

global
procedure SubtotalTBBUDsm()
BEGIN
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer wn,i,rwcnt,rownr,starti;
  val pt,pt2;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DoUpdate(wn);
  end;
  if (WindowState(wn)!=Rs_update and WindowState(wn)!=Rs_insert) then begin
    goto LOutSubtotalTBBUDsm;
  end;
  GetWindowRecord(wn,TBBUr);
  rownr = WindowActiveRow(wn);
  WindowDeactivatefield(wn);
  rwcnt = MatRowCnt(TBBUr);
  if ((rownr==-1) or (rownr>rwcnt)) then begin
    rownr = rwcnt;
  end;
  for (i=(rownr-1);i>=0;i=i-1) begin
    MatRowGet(TBBUr,i,TBBUrw);
    if (TBBUrw.stp!=kInvoiceRowTypeSubtotal) then begin
      pt = pt + TBBUrw.Sum;
      pt2 = pt2 + TBBUrw.Qty*TBBUrw.Cost;
    end else begin
      if (TBBUrw.Sum!=0) then begin 
        starti = i;
        goto LBREAK; 
      end;      
    end;
  end;
LBREAK:;  
  ClearRow(TBBUr,TBBUrw,9);
  TBBUrw.Sum = pt;
  TBBUrw.Cost = pt2;
  MatRowInsert(TBBUr,rownr,TBBUrw);
  if (rownr<rwcnt) then begin
    rwcnt = MatRowCnt(TBBUr);
    for (i=starti+1;i<rwcnt;i=i+1) begin
      if (i!=rownr) then begin
        MatRowGet(TBBUr,i,TBBUrw);
        if (TBBUrw.stp==kInvoiceRowTypeSubtotal) then begin
          TBBUrw.Sum = TBBUrw.Sum - pt;
          TBBUrw.Cost = TBBUrw.Cost - pt2;
          MatRowPut(TBBUr,i,TBBUrw);
          goto LSubtotalTBBUDsm;
        end;
      end;
    end;
  end;
LSubtotalTBBUDsm:;  
  PutWindowRecord(wn,TBBUr);
LOutSubtotalTBBUDsm:;  
  RETURN;
END;

procedure AddTBBULineType(Integer t,Boolean firstf)
begin
  record TBBUVc TBBUr;
  row TBBUVc TBBUrw;
  Integer wn,rownr;
  
  wn = CurWindow;
  GetWindowRecord(wn,TBBUr);
//  if (TBBUr.OKFlag==0) then begin
    rownr = WindowActiveRow(wn);
    DeselectWindow(wn,false);
    if (rownr<0) then begin 
      if (firstf) then begin
        rownr = 0;
      end else begin
        rownr = MatRowCnt(TBBUr);
      end;
    end;
    ClearRow(TBBUr,TBBUrw,t);
    TBBUrw.Spec = "";
    MatRowInsert(TBBUr,rownr,TBBUrw);
    PutWindowRecord(wn,TBBUr);
    WindowFieldGoto(wn,TBBUr,rownr,"Spec",false);
//  end;
  return;
end;

global
procedure HeaderLineTBBUDsm()
BEGIN
  AddTBBULineType(17,true);
  RETURN;
END;

global
updating procedure TBBUSendforAcceptanceTBBUDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record TBBUVc TBBUr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,TBBUr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LTBBUSendforAcceptanceTBBUDsm;
    end;
    GetWindowRecord(wn,TBBUr);
  end;
  TBBUr.AcceptanceBy = acceptanceby;
  TBBUr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_TBBUVc(TBBUr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(TBBUr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,TBBUr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LTBBUSendforAcceptanceTBBUDsm:;  
  return;
end;

global
updating procedure TBBUSendforAcceptanceTBBUDsm()
begin
  TBBUSendforAcceptanceTBBUDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure TBBUCancelApprovalRequest(Integer wn)
begin
  record TBBUVc TBBUr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,TBBUr);
  err = CancelApprovalRequest("TBBUVc",TBBUr.PRCode,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LTBBUCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LTBBUCancelApprovalRequest:;
  return;
end;

global
function Boolean TBBUDClassOnOpenWindow(Integer wn)
begin
  record TBBUVc TBBUr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,TBBUr);
  TBBUDClassOnOpenWindowRemote(TBBUr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  TBBUDClassOnOpenWindow = false;
  return;
end;

global
procedure TBBUDClassOnWindowRecordChange(Integer wn)
begin
  record TBBUVc TBBUr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,TBBUr);
  TBBUDClassOnOpenWindowRemote(TBBUr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
