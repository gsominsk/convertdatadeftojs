remote updating function Boolean RecordAction_raArchiveFromArchive(var record ArchiveVc,record RLinkVc,Integer,string);
remote updating function Boolean RecordAction_raWebNavLinkFromArchive(var record ArchiveVc,record RLinkVc,Integer,record RcVc);
remote updating function Integer RecordAction_raMailFromArchive(var record MailVc,record RLinkVc,Integer);
remote updating function Boolean RecordAction_raNoteFromArchive(var record NotepadVc,record RLinkVc,Integer);
remote updating function Boolean RecordAction_raActionFromArchive(var record ActionVc,record RLinkVc,Integer);

/*
global
updating procedure NoteFromArchiveWsm() 
BEGIN
  Integer wn,mwn,nwn,thewn;
  record RcVc RepSpec;
  record NotepadVc Noter;
  record RLinkVc Rlinkr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LNoteFromArchiveWsm; end;
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  if (RecordAction_raNoteFromArchive(Noter,Rlinkr,WindowCompanyNr(thewn))) then begin
    UpdateArchive(wn);
    nwn = OpenWindow("NotepadDClass",1,0,"","",Noter);
  end; 
LNoteFromArchiveWsm:;
  RETURN;
END;
*/

global
procedure NoteFromArchiveWsm()
BEGIN
  Integer wn,mwn,nwn,thewn;
  record RcVc RepSpec;
  record NotepadVc Noter;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LNoteFromArchiveWsm; end;
  RecordNew(Noter);
  Noter.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  Noter.CompanyNr = WindowCompanyNr(thewn);
  nwn = OpenWindow("NotepadDClass",1,wn,"","",Noter);
LNoteFromArchiveWsm:;
  RETURN;
END;

global
updating procedure ActionFromArchiveWsm()
BEGIN
  Integer wn,mwn,nwn,thewn;
  record RcVc RepSpec;
  record ActionVc Actionr;
  record RLinkVc Rlinkr;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LActionFromArchiveWsm; end;
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  if (RecordAction_raActionFromArchive(Actionr,Rlinkr,WindowCompanyNr(thewn))) then begin
    UpdateArchive(wn);
    nwn = OpenWindow("ActionDClass",1,0,"","",Actionr);
  end;
LActionFromArchiveWsm:;
  RETURN;
END;

global
updating procedure MailFromArchiveWsm()
BEGIN
  Integer wn,mwn,nwn,thewn,err;
  record RcVc RepSpec;
  record MailVc Mailr;
  record RLinkVc Rlinkr;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LMailFromArchiveWsm; end;  
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  err = RecordAction_raMailFromArchive(Mailr,Rlinkr,WindowCompanyNr(thewn));
  switch (err) begin
    case -1: Beep;
    case 0: 
      nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
      UpdateArchive(wn);
    otherwise MessageBox(err,"");
  end;
LMailFromArchiveWsm:;
  RETURN;
END;
/*
global
updating procedure ArchiveFromArchiveWsm()
BEGIN
  Integer wn,mwn,thewn;
  record RcVc RepSpec;
  record ArchiveVc Archiver;
  record RLinkVc Rlinkr;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LArchiveFromArchiveWsm; end;
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  if (RecordAction_raArchiveFromArchive(Archiver,Rlinkr,WindowCompanyNr(thewn))) then begin
    UpdateArchive(wn);
  end;
LArchiveFromArchiveWsm:;
  RETURN;
END;
*/

global
procedure ArchiveFromArchiveWsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record RcVc newRepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LArchiveFromArchiveWsm; end;
  newRepSpec.f1 = RepSpec.f1;
  nwn = OpenWindow("CreateArchiveVClass",1,0,"","",newRepSpec);
  newRepSpec.f1 = RepSpec.f1;
  PutWIndowRecord(nwn,newRepSpec);
LArchiveFromArchiveWsm:;
  return;
end;

updating procedure CreateArchiveVClassOKDo(Integer wn)
begin
  Integer mwn,thewn,nwn;
  record RcVc RepSpec;
  record RLinkVc Rlinkr;
  record ArchiveVc Archiver;

  DeselectWIndow(wn,false);
  GetWindowRecord(wn,RepSpec);
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  if (RecordAction_raArchiveFromArchive(Archiver,Rlinkr,WindowCompanyNr(thewn),RepSpec.f2)) then begin
    UpdateArchive(mwn);
  end;
  return;
end;


global
updating procedure CreateArchiveVClassOK()
begin
  Integer wn;
  
  wn = CurWindow;
  CreateArchiveVClassOKDo(wn);
  CloseWindow(wn);
  return;
end;

global
updating function Boolean CreateArchiveVClassOnOKWindow(Integer wn)
begin
  CreateArchiveVClassOKDo(wn);
  CloseWindow(wn);
  CreateArchiveVClassOnOKWindow = true;
  return;
end;


updating procedure CreateWebNavLinkVClassOKDo(Integer wn)
begin
  Integer mwn,thewn,nwn;
  record RcVc RepSpec;
  record RLinkVc Rlinkr;
  record WebNavLinkVc WebNavLinkr;

  DeselectWIndow(wn,false);
  GetWindowRecord(wn,RepSpec);
  Rlinkr.FromRecidStr = RepSpec.f1;
  mwn = MotherWindow(wn);
  thewn = mwn;
  if (thewn==0) then begin thewn = wn; end;
  if (RecordAction_raWebNavLinkFromArchive(WebNavLinkr,Rlinkr,WindowCompanyNr(thewn),RepSpec)) then begin
    UpdateArchive(mwn);
  end;
  return;
end;


global
updating procedure CreateWebNavLinkVClassOK()
begin
  Integer wn;
  
  wn = CurWindow;
  CreateWebNavLinkVClassOKDo(wn);
  CloseWindow(wn);
  return;
end;

global
updating function Boolean CreateWebNavLinkVClassOnOKWindow(Integer wn)
begin
  CreateWebNavLinkVClassOKDo(wn);
  CloseWindow(wn);
  CreateWebNavLinkVClassOnOKWindow = true;
  return;
end;

global
procedure TWebNavLinkFromArchiveWsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record RcVc newRepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  if (blank(RepSpec.f1)) then begin goto LWebNavLinkFromArchiveWsm; end;
  newRepSpec.f1 = RepSpec.f1;
  nwn = OpenWindow("CreateWebNavLinkVClass",1,0,"","",newRepSpec);
  newRepSpec.f1 = RepSpec.f1;
  PutWindowRecord(nwn,newRepSpec);
LWebNavLinkFromArchiveWsm:;
  return;
end;

global
updating procedure ShowToLinksArchiveWsm()
begin
  Integer wn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,RepSpec);
  RepSpec.f2 = "-";
  PutWindowRecord(wn,RepSpec);
  UpdateArchive(wn);
  return;
end;

global
updating procedure CreateWebNavLinkDrop(Integer wn,string url,string descr)
begin
  record RcVc RepSpec;
  record RcVc newRepSpec;
  record RLinkVc Rlinkr;
  record WebNavLinkVc WebNavLinkr;

  GetWindowRecord(wn,RepSpec);
  Rlinkr.FromRecidStr = RepSpec.f1;
  newRepSpec.f1 = RepSpec.f1;
  newRepSpec.f2 = descr;
  newRepSpec.f3 = url;
  if (RecordAction_raWebNavLinkFromArchive(WebNavLinkr,Rlinkr,WindowCompanyNr(wn),newRepSpec)) then begin
    UpdateArchive(wn);
    Rlinkr.ToRecidStr = BuildRecordIdStr(WebNavLinkr,WindowCompanyNr(wn));
    if (ReadFirstKey("ToRecKey",Rlinkr,1,true)) then begin
      OpenWindow("RLinkDClass",1,wn,"","",Rlinkr);
    end;
  end;
  return;
end;