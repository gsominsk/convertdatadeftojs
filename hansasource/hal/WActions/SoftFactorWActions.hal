external function Boolean FindTheUser(var record UserVc);

function Boolean SoftFactorDClassEmployeeCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record SoftFactorVc SoftFactorr;
  record UserVc Userr;
  string 255 warning;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SoftFactorr);
    Userr.Code = SoftFactorr.EmployeeCode;
    if (FindTheUser(USerr)) then begin
      SoftFactorr.EmployeeName = Userr.Name;
      PutWindowRecord(wn,SoftFactorr);
    end else begin
      Beep;
    end;
  end;
  SoftFactorDClassEmployeeCodeEFAfter = res;
  return;
end;

global
function Boolean SoftFactorDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;

  res = false;
  switch (fieldname) begin
    case "EmployeeCode": res = SoftFactorDClassEmployeeCodeEFAfter(wn,fn,rownr,changed);
  end;
  SoftFactorDClassAfterEditField = res;
  return;
end;

global
function Boolean SoftFactorDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record SoftFactorVc SoftFactorr;
  Integer normalmode,updatemode;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SoftFactorr);
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SoftFactorr);
  end;
  if (SoftFactorr.OKFlag!=0) then begin
    res = false;
  end;
  SoftFactorDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassLoyaltyButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassLoyaltyButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassAttitudeButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassAttitudeButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassLearningCurveButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassLearningCurveButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassCustomerRelationsButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassCustomerRelationsButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassSalesEffortButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassSalesEffortButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassWorkEffortButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassWorkEffortButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassResponsibilityButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassResponsibilityButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassInternalTrainingButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassInternalTrainingButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassPrivateLifeButtonAction(Integer wn,Integer value)
begin
  Boolean res;

  res = SoftFactorDClassOKFlagButtonAction(wn,value);
  SoftFactorDClassPrivateLifeButtonAction = res;
  return;
end;

global
function Boolean SoftFactorDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record SoftFactorVc SoftFactorr;
  Integer normalmode,updatemode;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,SoftFactorr);
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,SoftFactorr);
  end;
  if (SoftFactorr.OKFlag!=0) then begin
    res = false;
  end;
  SoftFactorDClassActiveEditField = res;
  return;
end;

function Boolean SoftFactorGroupDClassEmployeeCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record SoftFactorGroupVc SoftFactorGroupr;
  row SoftFactorGroupVc SoftFactorGrouprw;
  record UserVc Userr;
  string 255 warning;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SoftFactorGroupr);
    if (rownr<MatRowCnt(SoftFactorGroupr)) then begin
      MatRowGet(SoftFactorGroupr,rownr,SoftFactorGrouprw);
      Userr.Code = SoftFactorGrouprw.EmployeeCode;
      if (FindTheUser(USerr)) then begin
        SoftFactorGrouprw.EmployeeName = Userr.Name;
        MatRowPut(SoftFactorGroupr,rownr,SoftFactorGrouprw);
        PutWindowRecord(wn,SoftFactorGroupr);
      end else begin
        Beep;
      end;
    end;
  end;
  SoftFactorGroupDClassEmployeeCodeEFAfter = res;
  return;
end;

function Boolean SoftFactorGroupDClassUserCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record SoftFactorGroupVc SoftFactorGroupr;
  record UserVc Userr;
  string 255 warning;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,SoftFactorGroupr);
    Userr.Code = SoftFactorGroupr.UserCode;
    if (FindTheUser(USerr)) then begin
      SoftFactorGroupr.UserName = Userr.Name;
      PutWindowRecord(wn,SoftFactorGroupr);
    end else begin
      Beep;
    end;
  end;
  SoftFactorGroupDClassUserCodeEFAfter = res;
  return;
end;

global
function Boolean SoftFactorGroupDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;

  res = false;
  switch (fieldname) begin
    case "EmployeeCode": res = SoftFactorGroupDClassEmployeeCodeEFAfter(wn,fn,rownr,changed);
    case "UserCode": res = SoftFactorGroupDClassUserCodeEFAfter(wn,fn,rownr,changed);
  end;
  SoftFactorGroupDClassAfterEditField = res;
  return;
end;

global
procedure DblSoftFactDet(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.f1 = dblstr;
  RepSpec.FirstAcc = l;
  RepSpec.flags[10] = 1;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblSoftFactRep(string dblstr,string l,Integer currepwn)
begin
  record RcVc RepSpec;

  GetWindowRecord(currepwn,RepSpec);
  RepSpec.d1 = dblstr;
  RepSpec.f1 = FirstInRange(l,10);
  RepSpec.FirstAcc = LastInRange(l,10);
  RepSpec.flags[10] = 2;
  RunReport(RepSpec,0);
  return;
end;

global
procedure DblSoftFactRec(string dblstr,string l,Integer currepwn)
begin
  Integer wn;
  record SoftFactorVc SoftFactorr;
  Integer oldcomp;

  oldcomp = CurrentCompany;
  if (SetCompanyCode(LastInRange(l,10),false)) then begin
    SoftFactorr.EmployeeCode = FirstInRange(l,10);
    SoftFactorr.TransDate = dblstr;
    if (ReadFirstMain(SoftFactorr,2,true)) then begin
      wn = OpenWindow("SoftFactorDClass",1,0,"","",SoftFactorr);
    end;
  end;
  ResetCompany(oldcomp);
  return;
end;

global
procedure SoftFactAnalysisRClassReportDefaults(Integer wn)
BEGIN
  record RcVc RepSpec;
  
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RepSpec);
  ReportDefaults(RepSpec,"SoftFactAnalysisRClass");  
  RepSpec.flags[22] = CurrentCompany;
  PutWindowRecord(wn,RepSpec);
  SelectWindow(wn);
  RETURN;
END;

