global
function Boolean PriceRulesDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  record PriceRulesVc PriceRulesr;
  row PriceRulesVc PriceRulesrw;
  boolean res;

  if (rownr==-1) then begin
    goto LPriceRulesDClassAfterEditField;
  end;
  GetWindowRecord(wn,PriceRulesr);
  MatRowGet(PriceRulesr,rownr,PriceRulesrw);
  switch (fieldname) begin
    case "RestrictionType":
      if (PriceRulesrw.RestrictionType==kRoomPriceRestictionTypeNone) then begin
        PriceRulesrw.RestrictionOperator = 0;
        PriceRulesrw.RestrictionCustClass = "";
        PriceRulesrw.RestrictionOperand1 = -1;
        PriceRulesrw.RestrictionOperand2 = -1;  
      end;
    case "RestrictionOperator":
      if (PriceRulesrw.RestrictionOperator<>kCompOpRange) then begin
        PriceRulesrw.RestrictionOperand2 = -1;
      end;
    case "RestrictionCustClass":
      if (PriceRulesrw.RestrictionType==kRoomPriceRestictionTypeNone) then begin
        PriceRulesrw.RestrictionCustClass = "";
      end;
    case "ChargeType":
      if (PriceRulesrw.ChargeType==kChargeTypeFixedPrice) then begin
        PriceRulesrw.ChargeCustClass = "";
        PriceRulesrw.ChargeOperator = 0;
        PriceRulesrw.ChargeOperand1 = -1;
        PriceRulesrw.ChargeOperand2 = -1;
      end;
    case "ChargeOperator":
      if (PriceRulesrw.ChargeOperator<>kCompOpRange) then begin
        PriceRulesrw.ChargeOperand2 = -1;  
      end;
  end;
  MatRowPut(PriceRulesr,rownr,PriceRulesrw);
  PutWindowRecord(wn,PriceRulesr);
LPriceRulesDClassAfterEditField:;
  PriceRulesDClassAfterEditField = res;
  return;
end;

global
function Boolean PriceRulesDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  record PriceRulesVc PriceRulesr;
  row PriceRulesVc PriceRulesrw;
  boolean res,validf,fixedpf;

  if (rownr==-1) then begin
    res = true;
    goto LPriceRulesDClassActiveEditField;
  end;
  GetWindowRecord(wn,PriceRulesr);
  MatRowGet(PriceRulesr,rownr,PriceRulesrw);
  validf = (PriceRulesrw.RestrictionType<>kRoomPriceRestictionTypeNone);
  fixedpf = (PriceRulesrw.ChargeType==kChargeTypeFixedPrice);
  switch (fieldname) begin
    case "RestrictionOperator": res = validf;
    case "RestrictionCustClass": res = validf;
    case "RestrictionOperand1": res = validf;
    case "RestrictionOperand2": res = validf and (PriceRulesrw.RestrictionOperator==kCompOpRange);
    case "ChargeCustClass": res = (fixedpf==false);
    case "ChargeOperator": res = (fixedpf==false);
    case "ChargeOperand1": res = (fixedpf==false);
    case "ChargeOperand2": res = (fixedpf==false) and (PriceRulesrw.ChargeOperator==kCompOpRange);
  otherwise
    res = true;
  end;
LPriceRulesDClassActiveEditField:;
  PriceRulesDClassActiveEditField = res;
  return;
end;