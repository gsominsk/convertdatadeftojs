external procedure SetPOSWindowDisplay_PaymentRow(string,val);
remote updating procedure UpdateAffectedRowsToKitchenOrderFromRestAcc(longint,integer,string);
external procedure RestAccDClass_RefreshStringList(Integer,record RestAccVc);
external updating procedure RestAccDClassTouchScreenFromFinishAndPrintButton();
external function Boolean srlRestAccLPrint(var record RestAccVc,string,string);
external procedure SetPOSWindowDisplay_Posiflex(record LSerialPortDeviceVc,string,string);
external procedure SetPOSWindowDisplay_Posiflex(record LSerialPortDeviceVc,string,string);
external procedure SetPOSWindowDisplay_Generic(record LSerialPortDeviceVc,string,string);
external procedure SetPOSWindowDisplay_ST05(record LSerialPortDeviceVc,string,string);
external function Boolean IVCashVc_PrintEpsonAxiohmA777Receipt(Integer,var record IVCashVc,record IVCashVc,Integer,Boolean,Boolean,Integer,Integer);
external function Boolean GRVc_PrintEpsonAxiohmA777Receipt(var record GiftReceiptVc);
external function Boolean GRVc_PrintEpsonTMT88IIReceipt(var record GiftReceiptVc);
external updating procedure RecordActionRestAcc_Print(var record RestAccVc,string,string,Boolean);
external procedure RestAccVc_PrintEpsonTMU210Receipt(record RestAccVc,Boolean,Boolean);
external procedure RestAccBarOrder_PrintEpsonTMU210Receipt(record RestAccVc,var array Integer,Integer);
external procedure IVVc_PrintEpsonTMU210Receipt(record IVVc,Boolean,Boolean);
external function Boolean IVCashVc_PrintEpsonTMU210Receipt(var record IVCashVc,Integer,Boolean,Boolean,Integer);
external function Boolean IVCashVc_PrintEpsonTMT88IIReceipt(Integer,var record IVCashVc,record IVCashVc,Integer,Boolean,Boolean,Integer,Integer);
external function Boolean IVVc_PrintEpsonTMT88IIReceipt(Integer,var record IVVc,record IVVc,Integer,Boolean,Boolean,Integer,Integer);
external function Boolean IVCashVc_PrintCHD6800Receipt(Integer,string,var record IVCashVc,record IVCashVc,Integer,Boolean,Boolean,Integer,Integer);
//external procedure IVCashVc_PrintEpsonReceipt(record IVCashVc,Boolean,Boolean);
external function Boolean FindLocalSerialPortDevice(Integer,LongInt,string,var record LSerialPortDeviceVc);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure IVCashVc_PrintTSLReceipt(record IVCashVc,record LSerialPortDeviceVc,Integer,Boolean,Boolean,Integer);
external procedure IVCash2IV(record IVCashVc, var record IVVc);
external function boolean PMsg_PrintReceipt(record LSerialPortDeviceVc,var record IVVc);
external procedure PMsg_OpenCashDrawer(record LSerialPortDeviceVc,boolean);
external procedure SetPOSWindowDisplayModeFiscalPrinterPOSNETLCD(record LSerialPortDeviceVc , string, string); //DA

global
procedure GetPrintData(string localmachine,var record MachineCashVc MCr)
begin
  record CashPrintBlock CPb;
  
  MCr.Code = localmachine;
  if (ReadFirstMain(MCr,1,true)==false) then begin
    BlockLoad(CPb);
    MCr.Code = localmachine;
    MCr.Head1 = CPb.Head1;
    MCr.Head2 = CPb.Head2;
    MCr.Head3 = CPb.Head3;
    MCr.Head4 = CPb.Head4;
    MCr.Foot1 = CPb.Foot1;
    MCr.Foot2 = CPb.Foot2;
    MCr.Foot3 = CPb.Foot3;
    MCr.Foot4 = CPb.Foot4;
    MCr.PrinterType = CPb.PrinterType;
    MCr.MinCashLen = CPb.MinCashLen;
    MCr.CommPort = CPb.CommPort;
    MCr.DisplayText = CPb.DisplayText;
  end;
  return;
end;

procedure SetPOSWindowDisplay_SendToSerialPortDevices(string dispstr,string disp2str)
begin
  record LocalMachineBlock LMb;
  record LSerialPortDeviceVc LSPDr;
    
  BlockLoad(LMb);
  if (LMb.UseDisplay==0)  then begin
    goto LSetPOSWindowDisplay_SendToSerialPortDevices;
  end;
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassDisplay,-1,LMb.LocalMachineCode,LSPDr)==false) then begin
    goto LSetPOSWindowDisplay_SendToSerialPortDevices;
  end;  
  switch (LSPDr.Printer) begin
    case kSerialPortDeviceModelDisplayGeneric:
      SetPOSWindowDisplay_Generic(LSPDr,dispstr,disp2str);
    case kSerialPortDeviceModelDisplayPosiFlex:
      SetPOSWindowDisplay_Posiflex(LSPDr,dispstr,disp2str);
    case kSerialPortDeviceModelFiscPrinterFB05:
      SetPOSWindowDisplay_Generic(LSPDr,dispstr,disp2str);
    case kSerialPortDeviceModelFiscPrinterFB15:
      SetPOSWindowDisplay_Generic(LSPDr,dispstr,disp2str);
    case kSerialPortDeviceModelFiscPrinterFB15dll:
//      SetPOSWindowDisplay_Generic(LSPDr,dispstr,disp2str);
    case kSerialPortDeviceModelFiscPrinterST05:
      SetPOSWindowDisplay_ST05(LSPDr,dispstr,disp2str);
   case kSerialPortDeviceModelFiscPrinterPOSNET:
      SetPOSWindowDisplayModeFiscalPrinterPOSNETLCD(LSPDr,dispstr,disp2str);
   case kSerialPortDeviceModelFiscPrinterPOSNETTCPIP:
//      SetPOSWindowDisplayModeFiscalPrinterPOSNETLCD(LSPDr,dispstr,disp2str);
   case kSerialPortDeviceModelFiscPrinterPOSNETwVATNr:
      SetPOSWindowDisplayModeFiscalPrinterPOSNETLCD(LSPDr,dispstr,disp2str);
  end;
LSetPOSWindowDisplay_SendToSerialPortDevices:;  
  return;
end;
 
global
procedure SetPOSWindowDisplay(string dispstr,string disp2str)
begin
  integer wn;
  
  wn = FindWindow("NPTSIVCashDClass");
  if (wn>0) then begin
    DeselectWindow(wn,false);
    PutWindowString(wn,"CustomerDisplayData_Line1",Left(dispstr,40));
    PutWindowString(wn,"CustomerDisplayData_Line2",Left(disp2str,30));

    SetPOSWindowDisplay_SendToSerialPortDevices(dispstr,disp2str);    
  end;  
  
  wn = FindWindow("NPTSIVCashCUDisplayDClass");
  
  if (wn>0) then begin
    DeselectWindow(wn,false);
    PutWindowString(wn,"CustomerDisplayData_Line1",Left(dispstr,40));
    PutWindowString(wn,"CustomerDisplayData_Line2",Left(disp2str,30));
  end;
  
  wn = FindWindow("RestAccDClass");
  
  if (wn>0) then begin
    DeselectWindow(wn,false);
    PutWindowString(wn,"CustomerDisplayData_Line1",Left(dispstr,40));
    PutWindowString(wn,"CustomerDisplayData_Line2",Left(disp2str,30));

    SetPOSWindowDisplay_SendToSerialPortDevices(dispstr,disp2str);    
  end;  
/* If this is reconnected, the findwindow must be replaced/complemented so that it won't screw up having 2 IVDClass windows open at the same time
  wn = FindWindow("IVDClass");
  
  if (wn>0) then begin
    DeselectWindow(wn,false);

    PutWindowString(wn,"CustomerDisplayData_Line1",Left(dispstr,40));
    PutWindowString(wn,"CustomerDisplayData_Line2",Left(disp2str,30));

    SetPOSWindowDisplay_SendToSerialPortDevices(dispstr,disp2str);    
  end;  
*/
  return;
end;

global
procedure SetPOSWindowDisplayAmount(string s,val total)
begin
  Integer wn;
  
  if (total>0) then begin
    SetPOSWindowDisplay(s & " " & ValToString(total,M4Val,ThousandSeparator,DecimalSeparator,0),"");
  end else begin
    SetPOSWindowDisplay(s & " " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0),"");
  end;
  
  return;
end;

global
procedure SetPOSWindowDisplayChange(val change)
begin
  SetPOSWindowDisplay_PaymentRow("",change);
/*
  if (change>0) then begin
    SetPOSWindowDisplay(USetStr(11205) & " " & ValToString(change,M4Val,ThousandSeparator,DecimalSeparator,0),"");
  end else begin
    SetPOSWindowDisplay(USetStr(11205) & " " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0),"");
  end;
*/  
  return;
end;

global
procedure ResetDisplayDsm()
begin
  record LocalMachineBlock LMb;
  record MachineCashVc MCr;
  record LSerialPortDeviceVc LSPDr;
  string 255 dispstr;
  
  BlockLoad(LMb);
  if (LMb.UseDisplay!=0) then begin
    GetPrintData(LMb.LocalMachineCode,MCr);
    
    if (nonblank(MCr.DisplayText)) then begin
      dispstr = MCr.DisplayText;
    end else begin
      dispstr = USetStr(1802);
    end;       
LResetDisplayDsm:;
    SetPOSWindowDisplay(dispstr,"");
  end;
  return;
end;

global
procedure DisplayRestAccItem(record RestAccVc RestAccr,Integer i)
begin
  row RestAccVc RestAccrw;
  Integer res;
  string 200 tstr,t2;
  record LocalMachineBlock LMb;
  string 255 port;
  record LSerialPortDeviceVc LSPDr;
  string 255 dispstr;
  string 255 disp2str;
  
  BlockLoad(LMb);
  if (i<MatRowCnt(RestAccr)) then begin
    MatRowGet(RestAccr,i,RestAccrw);
    if (RestAccrw.stp==1) then begin
/*      
      M4PadString(RestAccrw.Spec,13," ",false,tstr);
      tstr = tstr & " ";
      M4PadString(ValToString(RestAccrw.Price,M4UVal,"",",",0) & ":-",6," ",true,t2);
      dispstr = tstr & t2;
      
      
      tstr = "TOTAL";
      M4PadString(ValToString(RestAccr.Sum4,M4UVal,"",",",0) & ":-",14," ",true,t2);
      disp2str = tstr & t2;
  */
      dispstr = RestAccrw.ArtCode & " " & RestAccrw.Spec;
      disp2str = ValToString(RestAccrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
      M4PadString(ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(disp2str)," ",true,t2);
      disp2str = disp2str & t2;
LDisplayRestAccItem:;  
      SetPOSWindowDisplay(dispstr,disp2str);
      
    end;
  end;
  return;
end;

global
procedure DisplayIVSubTotalAction(record IVVc IVr)
begin
  row IVVc IVrw;
  string 200 tstr,t2;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  if (LMb.UseDisplay!=0) then begin
    tstr = "SUBTOTAL";
    M4PadString(ValToString(IVr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0) & ":-",12," ",true,t2);
    SetPOSWindowDisplay_SendToSerialPortDevices("                    ",tstr & t2);
  end;
LDisplayIVSubTotalAction:;  
  return;
end;

global
procedure DisplayIVThankYouAction()
begin
  string 200 tstr;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  if (LMb.UseDisplay!=0) then begin
    M4PadString("THANK YOU",20," ",false,tstr);
    SetPOSWindowDisplay_SendToSerialPortDevices("                    ",tstr);
  end;
LDisplayIVThankYouAction:;  
  return;
end;

procedure AddDataToDisplayArea(string artcode,val sum,Area outa,Boolean delf)
begin
  string 255 eol,invoiceline;
  string 255 tstr;
  record SysFormatBlock SFb;

  BlockLoad(SFb);
  eol = chr(13) & chr(10);
  M4PadString("001",3," ",false,tstr);      
  AddTextToArea(tstr,outa);
  AddTextToArea(eol,outa);

  M4PadString("002",3," ",false,tstr);      
  AddTextToArea(tstr,outa);
  M4PadString(artcode,20," ",false,tstr);      
  AddTextToArea(tstr,outa);
  AddTextToArea(eol,outa);
  if (delf) then begin
    M4PadString("003STORNO",9," ",false,tstr);      
    AddTextToArea(tstr,outa);
    AddTextToArea(eol,outa);
  end else begin
    M4PadString("003Cena",7," ",false,tstr);      
    AddTextToArea(tstr,outa);
    tstr = ValToString(sum,M4Val,SFb.thousSep,SFb.decimalPt,0);
    M4PadString(tstr,16," ",true,tstr);      
    AddTextToArea(tstr,outa);
    AddTextToArea(eol,outa);
  end;
  return;
end;

procedure DisplayItem_FI550(LongInt invno,string artcode,string itemname,val price,val sum,string device,Boolean delf)
begin
  string 255 filename;
  Area outa;

  filename = device & "Print/";
  filename = filename & "KOM" & invno;
  filename = filename & "_";
  filename = filename & artcode;
  filename = filename & ".txt";

  Delete_File(filename);
  if (OpenExportFile(filename,false)) then begin
    MessageBox(1694," " & filename);
    goto LEND;
  end;
  if (sum!=0) then begin
    AddDataToDisplayArea(itemname,sum,outa,delf);
  end else begin
    AddDataToDisplayArea(itemname,price,outa,delf);
  end;
  CreateFile(filename);
  CloseFile;
  if (OpenExportFile(filename,false)==false) then begin
    MessageBox(1695," " & filename);
    goto LEND;
  end;
  CloseFile;
  WriteAreaToFile(outa,filename,0);
LEND:;
  return;
end;

global
procedure DisplayIVItemStorno(record IVVc IVr,Integer rownr)
begin
  row IVVc IVrw;
  record LocalMachineBlock LMb;
  record SerPrintBlock SPb;
  string 255 port,device;
  record CashPrintBlock CPb;  
  record MachineCashVc MCr;
  Integer FiscalPrinter;

  BlockLoad(LMb);  
  if (LMb.UseDisplay!=0) then begin
    BlockLoad(SPb);
    BlockLoad(CPb);  
    MCr.Code = LMb.LocalMachineCode;
    if (ReadFirstMain(MCr,1,true)) then begin
      device = MCr.CommPort;
      FiscalPrinter = MCr.FiscalPrinter;
    end;  
    if (FiscalPrinter==0) then begin
      FiscalPrinter = CPb.FiscalPrinter;
    end;
    if (blank(device)) then begin
      device = LMb.DefPrinter;
    end;
    if (blank(device)) then begin
      device = CPb.CommPort;
    end;
    MatRowGet(IVr,rownr,IVrw);
    if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      switch (FiscalPrinter) begin
        case 8:
          if (IVr.FiscalFlag!=0) then begin
            DisplayItem_FI550(IVr.SerNr,IVrw.ArtCode,IVrw.Spec,IVrw.Price,0,device,true);
          end;
      end;      
    end;
  end;
  return;
end;

global
procedure DisplayIVItem2(record IVVc IVr,Integer i,var Boolean serportf,var record LSerialPortDeviceVc LSPDr)
begin
  row IVVc IVrw;
  Integer res;
  string 200 tstr,t2;
  record LocalMachineBlock LMb;
  record SerPrintBlock SPb;
  string 255 port,device;
  record CashPrintBlock CPb;  
  record MachineCashVc MCr;
  Integer FiscalPrinter;
  
  MatRowGet(IVr,i,IVrw);
  BlockLoad(LMb);  
  if (serportf) then begin 
    if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
    FiscalPrinter = LSPDr.Printer - 10;
    device = LSPDr.Port;
  end else begin
    if (LMb.LocalMachineCode<>"") then begin
      BlockLoad(SPb);
      BlockLoad(CPb);  
      MCr.Code = LMb.LocalMachineCode;
      if (ReadFirstMain(MCr,1,true)) then begin
        device = MCr.CommPort;
        FiscalPrinter = MCr.FiscalPrinter;
      end;  
      if (FiscalPrinter==0) then begin
        FiscalPrinter = CPb.FiscalPrinter;
      end;
      if (blank(device)) then begin
        device = LMb.DefPrinter;
      end;
      if (blank(device)) then begin
        device = CPb.CommPort;
      end;

      port = SPb.Port;
    end;
  end;
  if (blank(port)) then begin
    port = "COM2";
  end;  
  if (LMb.UseDisplay!=0) then begin
    switch (FiscalPrinter) begin
      case 8:
        if (IVr.FiscalFlag!=0) then begin
          if (IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
            DisplayItem_FI550(IVr.SerNr,IVrw.ArtCode,IVrw.Spec,IVrw.Price,0,device,false);
          end;
        end;
      otherwise
        if(IVrw.stp==kInvoiceRowTypeNormal) or (IVrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
          tstr = "TOTAL ";
          M4PadString(ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0) & ":-",14," ",true,t2);
          SetPOSWindowDisplay_SendToSerialPortDevices("                    ",tstr & t2);   
        end;
        if ((IVrw.stp==kInvoiceRowTypeCashPayment) or (IVrw.stp==kInvoiceRowTypeCreditCardPayment) or (IVrw.stp==kInvoiceRowTypeChequePayment) or (IVrw.stp==kInvoiceRowTypeLoyaltyPointsPayment)) then begin
          tstr = "CASH BACK";
          M4PadString(ValToString(IVr.RetnValue,M4Val,ThousandSeparator,DecimalSeparator,0) & ":-",11," ",true,t2);
          SetPOSWindowDisplay_SendToSerialPortDevices("                    ",tstr & t2);
        end;
    end;
  end;
  tstr = ValToString(IVrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
  M4PadString(ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
  tstr = tstr & t2;
  
  SetPOSWindowDisplay(IVrw.ArtCode & " " & IVrw.Spec,tstr);
  return;
end;

global
procedure DisplayIVItem(record IVVc IVr,Integer i)
begin
  Boolean serportf;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  
  BlockLoad(LMb);
  
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassDisplay,-1,LMb.LocalMachineCode,LSPDr)) then begin
    serportf = true;
  end;
  
  DisplayIVItem2(IVr,i,serportf,LSPDr);
end;

global
procedure DisplayIVCashItemStorno(record IVCashVc IVCashr,Integer rownr)
begin
  row IVCashVc IVCashrw;
  record LocalMachineBlock LMb;
  record SerPrintBlock SPb;
  string 255 port,device;
  record CashPrintBlock CPb;  
  record MachineCashVc MCr;
  Integer FiscalPrinter;

  BlockLoad(LMb);  
  MatRowGet(IVCashr,rownr,IVCashrw);
  if (LMb.UseDisplay!=0) then begin
    BlockLoad(SPb);
    BlockLoad(CPb);  
    MCr.Code = LMb.LocalMachineCode;
    if (ReadFirstMain(MCr,1,true)) then begin
      device = MCr.CommPort;
      FiscalPrinter = MCr.FiscalPrinter;
    end;  
    if (FiscalPrinter==0) then begin
      FiscalPrinter = CPb.FiscalPrinter;
    end;
    if (blank(device)) then begin
      device = LMb.DefPrinter;
    end;
    if (blank(device)) then begin
      device = CPb.CommPort;
    end;
    if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
      switch (FiscalPrinter) begin
        case 8:
          if (IVCashr.FiscalFlag!=0) then begin
            DisplayItem_FI550(IVCashr.SerNr,IVCashrw.ArtCode,IVCashrw.Spec,IVCashrw.Price,0,device,true);
          end;
      end;
      
    end;
  end;
  SetPOSWindowDisplay(IVCashrw.ArtCode & " " &IVCashrw.Spec &  " " & IVCashrw.Price,"");
  return;
end;

global
procedure DisplayIVCashItem(record IVCashVc IVCashr,Integer rownr)
begin
  row IVCashVc IVCashrw;
  Integer res;
  string 200 tstr,t2;
  record LocalMachineBlock LMb;
  record SerPrintBlock SPb;
  string 255 port,device;
  record CashPrintBlock CPb;  
  record MachineCashVc MCr;
  Integer FiscalPrinter;
  record LSerialPortDeviceVc LSPDr;
  
  BlockLoad(LMb);  
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassDisplay,-1,LMb.LocalMachineCode,LSPDr)) then begin 
    if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
    FiscalPrinter = LSPDr.Printer - 10;
    device = LSPDr.Port;
  end else begin 
    BlockLoad(SPb);
    BlockLoad(CPb);  
    MCr.Code = LMb.LocalMachineCode;
    if (ReadFirstMain(MCr,1,true)) then begin
      device = MCr.CommPort;
      FiscalPrinter = MCr.FiscalPrinter;
    end;  
    if (FiscalPrinter==0) then begin
      FiscalPrinter = CPb.FiscalPrinter;
    end;
    if (blank(device)) then begin
      device = LMb.DefPrinter;
    end;
    if (blank(device)) then begin
      device = CPb.CommPort;
    end;
    LSPDr.BaudRate = SPb.BaudRate;
    LSPDr.Parity = SPb.Parity;
    LSPDr.ByteSize = SPb.ByteSize;
    LSPDr.StopBits = SPb.StopBits;
    LSPDr.FlowControl = kFlowControlDefault;
  end;


  port = SPb.Port;
  if (blank(port)) then begin
    port = "COM2";
  end;  
  MatRowGet(IVCashr,rownr,IVCashrw);
  if (LMb.UseDisplay!=0) then begin
    switch (FiscalPrinter) begin
      case 8:
        if (IVCashr.FiscalFlag!=0) then begin
          if (IVCashrw.stp==kInvoiceRowTypeNormal) or (IVCashrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
            DisplayItem_FI550(IVCashr.SerNr,IVCashrw.ArtCode,IVCashrw.Spec,IVCashrw.Price,0,device,false);
          end;
        end;
    end;    
  end;
  
  tstr = ValToString(IVCashrw.Quant,M4UVal,ThousandSeparator,DecimalSeparator,0) & "*" & ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0);
  M4PadString(ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),30-len(tstr)," ",true,t2);
  tstr = tstr & t2;
  
  SetPOSWindowDisplay(IVCashrw.ArtCode & " " & IVCashrw.Spec,tstr);
  return;
end;

global
procedure DisplayIVCashChange(record IVCashVc IVCashr)
begin
  if (IVCashr.RetValue>0) then begin
    SetPOSWindowDisplay(USetStr(11205),ValToString(IVCashr.RetValue,M4Val,ThousandSeparator,DecimalSeparator,0));
  end else begin
//    SetPOSWindowDisplay(USetStr(11205),ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0));
    SetPOSWindowDisplay("","");
  end;
  return;
end;

global
procedure ConsolidateRestAccr(record RestAccVc CashR,var record RestAccVc resCashR)
begin
  Row RestAccVc RestAccrw;
  Row RestAccVc resRestAccrw;
  Integer rwcnt,i;
  Integer resrwcnt,resi;
  Boolean treatedf;
  
  RecordCopy(resCashR,CashR);
  rwcnt = MatRowCnt(CashR);
  while (MatRowCnt(resCashR)>0) begin
    MatRowDelete(resCashR,0);
  end;
  for (i=0;i<rwcnt;i=i+1) begin
    resrwcnt = MatRowCnt(resCashR);
    MatRowGet(CashR,i,RestAccrw);
    if (RestAccrw.stp==1) then begin
      treatedf = false;
      for (resi=0;resi<resrwcnt;resi=resi+1) begin
        MatRowGet(resCashR,resi,resRestAccrw);
        if (resRestAccrw.stp==1) then begin
          if ((nonblank(resRestAccrw.ArtCode)) and (RestAccrw.ArtCode==resRestAccrw.ArtCode) and (RestAccrw.Price==resRestAccrw.Price) and (RestAccrw.Spec==resRestAccrw.Spec)) then begin
            resRestAccrw.Quant = resRestAccrw.Quant + RestAccrw.Quant;
            MatRowPut(resCashR,resi,resRestAccrw);
            treatedf = true;
          end;
        end;
      end;
    end;
    if (treatedf==false) then begin
      MatRowPut(resCashR,resrwcnt,RestAccrw);
    end;
  end;
  return;
end;

global
updating procedure RestAccReceiptPrint(record RestAccVc incomingCashR,Boolean okf,Boolean opendrawerf)
begin
  record RestAccVc CashR;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  Integer Error;
  
  BlockLoad(LMb);  
  ConsolidateRestAccr(incomingCashR,CashR);
  if (okf==true) then begin
    if (CashR.Closed==0) then begin
      goto LRestAccReceiptPrint;
    end;
  end;
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassReceiptPrinter,-1,LMb.LocalMachineCode,LSPDr)==false) then begin  
    goto LRestAccReceiptPrint;
  end;
  Error = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
  if (Error==0) then begin
    if (nonblank(LSPDr.FailureCode)) then begin
      LSPDr.Code = LSPDr.FailureCode;
      if (ReadFirstMain(LSPDr,1,true)) then begin
        if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
        Error = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
      end;
    end;
  end;
  if (Error==0) then begin
    goto LRestAccReceiptPrint;
  end;
  if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
  switch (LSPDr.Printer) begin
    case kSerialPortDeviceModelPrinterEPSONTMU210:
      RestAccVc_PrintEpsonTMU210Receipt(CashR,okf,opendrawerf);
    otherwise
      Error = CloseComPort(1);
  end;   
LRestAccReceiptPrint:;
  return;
end;

global
procedure RestAccBarOrder(record RestAccVc CashR,var array Integer bararr,Integer bari)
begin
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  Integer Error;
  
  if (CashR.Closed!=0) then begin
    goto LRestAccBarOrder;
  end;
  if (bari<=0) then begin
    goto LRestAccBarOrder;
  end;
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassReceiptPrinter,-1,LMb.LocalMachineCode,LSPDr)==false) then begin  
    goto LRestAccBarOrder;
  end;
  if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
  Error = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
  if (Error==0) then begin
    if (nonblank(LSPDr.FailureCode)) then begin
      LSPDr.Code = LSPDr.FailureCode;
      if (ReadFirstMain(LSPDr,1,true)) then begin
        if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
        Error = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
      end;
    end;
  end;
  if (Error==0) then begin
    goto LRestAccBarOrder;
  end;
  switch (LSPDr.Printer) begin
    case 1:
      RestAccBarOrder_PrintEpsonTMU210Receipt(CashR,bararr,bari);
  end;  
  Error = CloseComPort(1);
LRestAccBarOrder:;
  return;
end;

global
function Boolean IVPrintReceipt(Integer wn,var record IVVc IVp,var record IVVc prevIVp,Integer rownr,Boolean okf,Boolean opendrawerf,Integer IncrementalPrint,Integer wnst)
begin
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  Integer Error;
  Boolean res;
  
  res = true;
  BlockLoad(LMb);
  if (okf==true) then begin
    if (IVp.OKFlag==0) then begin
      goto LIVPrintReceipt;
    end;
  end;
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassReceiptPrinter,-1,LMb.LocalMachineCode,LSPDr)==false) then begin  
    goto LIVPrintReceipt;
  end;
  if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
  Error = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
  if (Error==0) then begin
    if (nonblank(LSPDr.FailureCode)) then begin
      LSPDr.Code = LSPDr.FailureCode;
      if (ReadFirstMain(LSPDr,1,true)) then begin
        if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
        Error = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
      end;
    end;
  end;
  if (Error==0) then begin
    goto LIVPrintReceipt;
  end;
  switch (LSPDr.Printer) begin
    case kSerialPortDeviceModelPrinterEPSONTMU210:
      IVVc_PrintEpsonTMU210Receipt(IVp,okf,opendrawerf);
    case kSerialPortDeviceModelPrinterEPSONTMT88II:
      res = IVVc_PrintEpsonTMT88IIReceipt(wn,IVp,prevIVp,rownr,okf,opendrawerf,IncrementalPrint,wnst);
      otherwise
        Error = CloseComPort(1);
  end;
LIVPrintReceipt:;
  IVPrintReceipt = res;
  return;
end;

global
function Boolean IVCashPrintReceipt(Integer wn,var record IVCashVc IVCashp,record IVCashVc prevIVCashp,Integer rownr,Boolean okf,Boolean opendrawerf,Integer IncrementalPrint,Integer wnst)
begin
  Boolean res;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  Integer noError;
  record IVVc IVp;
  Boolean found;
  
  res = true;
  BlockLoad(LMb);
  if (okf==true) then begin
    if (IVCashp.OKFlag==0) then begin
      goto LIVCashPrintReceipt;
    end;
    if (IVCashp.Invalid!=0) then begin
      goto LIVCashPrintReceipt;
    end;
  end;
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassReceiptPrinter,-1,LMb.LocalMachineCode,LSPDr)) then begin  
    found = true;
    if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
    noError = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
    if (noError==0) then begin
      if (nonblank(LSPDr.FailureCode)) then begin
        LSPDr.Code = LSPDr.FailureCode;
        if (ReadFirstMain(LSPDr,1,true)) then begin
          if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
          noError = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
        end;
      end;
    end;
    if (noError==0) then begin
      goto LIVCashPrintReceipt;
    end;
    switch (LSPDr.Printer) begin
      case kSerialPortDeviceModelPrinterEPSONTMU210:
        res = IVCashVc_PrintEpsonTMU210Receipt(IVCashp,rownr,okf,opendrawerf,IncrementalPrint);
        if (nonblank(LSPDr.EscSeqAfter)) then begin
          noError = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
        end;
      case kSerialPortDeviceModelPrinterEPSONTMT88II:
        res = IVCashVc_PrintEpsonTMT88IIReceipt(wn,IVCashp,prevIVCashp,rownr,okf,opendrawerf,IncrementalPrint,wnst);
      case kSerialPortDeviceModelPrinterAxiohmA777:
        res = IVCashVc_PrintEpsonAxiohmA777Receipt(wn,IVCashp,prevIVCashp,rownr,okf,opendrawerf,IncrementalPrint,wnst);
      case kSerialPortDeviceModelPrinterCHD6800:
        if (IncrementalPrint==0 and rownr<0) or (IncrementalPrint!=0) then begin
          res = IVCashVc_PrintCHD6800Receipt(wn,LSPDr.Codepage,IVCashp,prevIVCashp,rownr,okf,opendrawerf,IncrementalPrint,wnst);
        end;
      otherwise
        noError = CloseComPort(1);
    end;
  end;
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassFiscalPrinter,-1,LMb.LocalMachineCode,LSPDr)) then begin
    found = true;
    switch(LSPDr.Printer) begin
      case kSerialPortDeviceModelFiscPrinterTSLFP05:
        IVCashVc_PrintTSLReceipt(IVCashp,LSPDr,rownr,okf,opendrawerf,IncrementalPrint);
      case kSerialPortDeviceModelFiscPrinterFPRINT02K:
        if(okf) then begin
          IVCash2IV(IVCashp,IVp);
          // [COMM/] Incremental printing not implemented (other printer drivers in this section have it) :: APE
          res = PMsg_PrintReceipt(LSPDr,IVp);
          PMsg_OpenCashDrawer(LSPDr,opendrawerf);
          IVCashp.OfficialSerNr = IVp.OfficialSerNr;
        end;
    end;
  end;
  if (found==false) then begin
    if (RecordValid(prevIVCashp)) then begin
//reprint only
      if (IVCashp.OKFlag!=0) and (prevIVCashp.OKFlag!=0) then begin
        if (PrintDocument(IVCashp,"InvCashForm",false)) then begin
        end;
      end;
    end;
  end;
LIVCashPrintReceipt:;
  IVCashPrintReceipt = res;
  return;
end;

global
function Boolean GiftReceiptPrint(var record GiftReceiptVc GRr)
begin
  Boolean res;
  record LSerialPortDeviceVc LSPDr;
  record LocalMachineBlock LMb;
  Integer noError;
  
  BlockLoad(LMb);
  if (FindLocalSerialPortDevice(kSerialPortDeviceClassReceiptPrinter,-1,LMb.LocalMachineCode,LSPDr)==false) then begin  
    goto LGiftReceiptPrint;
  end;
  if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
  noError = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
  if (noError==0) then begin
    if (nonblank(LSPDr.FailureCode)) then begin
      LSPDr.Code = LSPDr.FailureCode;
      if (ReadFirstMain(LSPDr,1,true)) then begin
        if (SetComPortCodepage(StringSetFromString(89,LSPDr.Codepage))) then begin end;
        noError = OpenComPort(0,LSPDr.Port,LSPDr.BaudRate,LSPDr.Parity,LSPDr.ByteSize,LSPDr.StopBits,LSPDr.FlowControl);   
      end;
    end;
  end;
  if (noError==0) then begin
    goto LGiftReceiptPrint;
  end;
  switch (LSPDr.Printer) begin
    case kSerialPortDeviceModelPrinterEPSONTMU210:
    case kSerialPortDeviceModelPrinterEPSONTMT88II:
      res = GRVc_PrintEpsonTMT88IIReceipt(GRr);
    case kSerialPortDeviceModelPrinterAxiohmA777:
      res = GRVc_PrintEpsonAxiohmA777Receipt(GRr);
    otherwise
      noError = CloseComPort(1);
  end;
LGiftReceiptPrint:;
  GiftReceiptPrint = res;
  return;
end;

global
updating procedure PrintIVReceiptDsm()
begin
  record IVVc prtIVr;
  record IVVc IVr;
  integer wn;
  
  wn = CurWindow;
 
  DeselectWindow(wn,false);
  GetWindowRecord(wn,IVr);
  if (WindowState(wn)==0)  then begin
    prtIVr.SerNr=IVr.SerNr;
    if(ReadFirstMain(prtIVr,1,true)) then begin
      if(prtIVr.SerNr==IVr.SerNr) then begin
        IVPrintReceipt(wn,prtIVr,prtIVr,0,true,true,0,0);
      end;
    end;
  end;
  return;
end;

global
procedure RestAccToolPriceLookup()
begin
  Integer wn;
  record RestAccVc RestAccr;
  record SoftFVc PriceLookupr;
  
  GetWindowRecord(CurWindow,RestAccr);
  RecordClear(PriceLookupr);
  PriceLookupr.CustCode = RestAccr.CUCode;
  PriceLookupr.PriceList = RestAccr.PriceList;
  wn = OpenWindow("RestAccPriceLookupDClass",1,CurWindow,"","",PriceLookupr);
  return;
end;

global
procedure RestAccPriceLookupClose()
begin
  CloseWindow(CurWindow);      
  return;
end;

global
updating procedure RestAccDClassTouchScreenPrintPreview()
begin
  record RestAccVc RestAccr;
  Boolean testf;

  testf = true;
  if (WindowState(CurWindow)!=Rs_normal) then begin
    testf = WindowDoOK(CurWindow,0);
  end;
  if (testf) then begin
    GetWindowRecord(CurWindow,RestAccr); 
    RecordActionRestAcc_Print(RestAccr,"1","RestAccForm",true);
  end;
  return;
end;

global
updating procedure RestAccDClassTouchScreenPrint()
begin
  record RestAccVc RestAccr;
  Boolean testf;

 testf = true;
  if (WindowState(CurWindow)!=Rs_normal) then begin
    testf = WindowDoOK(CurWindow,0);
  end;
  if (testf) then begin
    GetWindowRecord(CurWindow,RestAccr);
    if (SystemMode==kSystemModeRestricted) then begin 
      MessageBox(1581,"");
    end else begin
      RecordActionRestAcc_Print(RestAccr,"","RestAccForm",true);      
    end;    
  end;
  return;
end;

global
updating procedure RestAccDClassTouchScreenFinishAndPrintButton()
begin
  record RestAccVc RestAccr;
  Integer wn;
  string 255 tstr;
  val prevRetValue;

  RestAccDClassTouchScreenFromFinishAndPrintButton;
  if (SystemMode==kSystemModeRestricted) then begin 
    MessageBox(1581,"");
  end else begin
    RestAccDClassTouchScreenPrint;    
    
    wn = CurWindow;
    GetWindowRecord(wn,RestAccr);
    prevRetValue =  RestAccr.RetValue;
    WindowDoNew(wn,0);
    GetWindowRecord(wn,RestAccr);
    RestAccr.RetValue = prevRetValue;
    PutWindowString(wn,"touchscreenwindowpage",1);
    PutWindowString(wn,"touchscreenwindowpagestack","1");
    PutWindowString(wn,"touchscreenwindowprinterstack","*");
    PutWindowString(wn,"CustomerDisplayData_Line1","");
    PutWindowString(wn,"CustomerDisplayData_Line2","");    
    tstr = USetStr(24172) & "  ";
    tstr = tstr & ValToString(prevRetValue,M4Val,ThousandSeparator,DecimalSeparator,0);
    SetPOSWindowDisplay("",tstr);
    RestAccDClass_RefreshStringList(wn,RestAccr);
    PutWindowRecord(wn,RestAccr);
  end;
  return;
end;

global
updating procedure RestAccPrintInvoice()
begin
  record RestAccVc RestAccr;

  if (WindowDoOK(CurWindow,0)) then begin
    GetWindowRecord(CurWindow,RestAccr);
    RecordActionRestAcc_Print(RestAccr,"","RestAccReceiptForm",true);
  end;
  return;
end;

global
updating procedure RestAccPrintCancel()
begin
  record RestAccVc RestAccr;

  if (WindowDoOK(CurWindow,0)) then begin
    GetWindowRecord(CurWindow,RestAccr);
    RecordActionRestAcc_Print(RestAccr,"","RestAccCancelForm",true);
  end;
  return;
end;

global
updating procedure RestAccPrintFireOrder()
begin
  record RestAccVc RestAccr;

  if (WindowDoOK(CurWindow,0)) then begin
    GetWindowRecord(CurWindow,RestAccr);
    RecordActionRestAcc_Print(RestAccr,"","RestAccFireOrderForm",true);
  end;
  return;
end;

global
updating procedure RestAccPrintToKitchen()
begin
  record RestAccVc RestAccr;
  Integer wn;
  transaction Integer gTransferRestAccToKitchenOrder;

  wn = CurWindow;
  if (WindowDoOK(wn,0)) then begin
    GetWindowRecord(wn,RestAccr);
    gTransferRestAccToKitchenOrder = 1;
    if (srlRestAccLPrint(RestAccr,"","RestAccKitchenForm")) then begin
      PutWindowRecord(wn,RestAccr);
      WindowDoOK(wn,0);    
    end;
//    RecordActionRestAcc_Print(RestAccr,"","RestAccKitchenForm",true);
  end;
  return;
end;

/*
global
updating procedure RestAccPrintToKitchen()
begin
  Integer wn;
  record RestAccVc RestAccr;
  array Integer kitcharr;
  array Integer bararr;
  Integer kitchi,bari;
  Boolean updf;
  
  updf = false;
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,RestAccr);
  if (WindowState(wn)==Rs_normal) then begin
    PutWindowRecord(wn,RestAccr);
  end;
  updf = CheckIfAllowed(wn,RestAccr);

  if (updf) then begin
    if (WindowDoOK(wn,0)) then begin
      GetWindowRecord(wn,RestAccr);
      BuildRestaurantOrder(RestAccr,kitcharr,kitchi,bararr,bari);
      RestAccBarOrder(RestAccr,bararr,bari); // This line can be commented out, but nothing else...
      SetRestAccLinesPrinted(RestAccr,bararr,bari);
      RestAccKitchenOrder(RestAccr.SerNr,kitcharr,kitchi);
      SetRestAccLinesPrinted(RestAccr,kitcharr,kitchi);
      PutWindowRecord(wn,RestAccr);
      if (WindowDoOK(wn,0)) then begin
        UpdateBrowses("RestAccVc");
      end;
    end;
  end;
  return;
end;

*/

global
function Boolean RestAccDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  Integer nwn;
  record CUVc CUr;
  
  switch (fieldname) begin
    case "GuestCode":
      GetWindowRecord(wn,RestAccr);  
      CUr.Code = RestAccr.GuestCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        nwn = OpenWindow("CUDClass",0,0,"","",CUr);    
      end;
    case "CUCode":
      GetWindowRecord(wn,RestAccr);  
      CUr.Code = RestAccr.GuestCode;
      if (ReadFirstMain(CUr,1,true)) then begin
        nwn = OpenWindow("CUDClass",0,0,"","",CUr);    
      end;
  end;
  RestAccDClassOpenRecord = res;
  return;
end;

global
procedure RestAccDClassEditRow(Integer wn,Integer rwn)
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,RestAccr);
  MatRowGet(RestAccr,rwn,RestAccrw);
  RepSpec.long1 = rwn;
  RepSpec.f1 = RestAccrw.ArtCode;
  RepSpec.vals1 = RestAccrw.Quant;
  RepSpec.vals2 = RestAccrw.Price;
  RepSpec.f2 = RestAccrw.Spec;
  RepSpec.vals3 = RestAccrw.SplitQty;
  
  nwn = OpenWindow("RestAccRowDClass",0,wn,"","",RepSpec);
end;

global
procedure RestAccDClassAddRow(Integer wn,Integer rwn)
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;

  GetWindowRecord(wn,RestAccr);
  MatRowGet(RestAccr,rwn,RestAccrw);
  RestAccrw.stp = kInvoiceRowTypeNormal;
  MatRowPut(RestAccr,rwn,RestAccrw);
  PutWindowRecord(wn,RestAccr);
  RestAccDClassEditRow(wn,rwn);
  return;
end;

global
function boolean RestAccRowDClassOnOKWindow(Integer wn)
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RcVc RepSpec;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,RestAccr);
  rwn = RepSpec.long1;
  
  MatRowGet(RestAccr,rwn,RestAccrw);
  
  RestAccrw.ArtCode = RepSpec.f1;
  RestAccrw.Quant = RepSpec.vals1;
  RestAccrw.Price = RepSpec.vals2;
  RestAccrw.Spec = RepSpec.f2;
  RestAccrw.SplitQty = RepSpec.vals3;
  
  MatRowPut(RestAccr,rwn,RestAccrw);
  PutWindowRecord(mwn,RestAccr);
  CloseWindow(wn);
  
  RestAccRowDClassOnOKWindow = true;
end;


global
procedure RestAccRowDClassTrash()
begin
  record RcVc RepSpec;
  record RestAccVc RestAccr;
  integer wn;
  integer mwn;
  integer rwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,RestAccr);
  
  rwn = RepSpec.long1;
  
  MatRowDelete(RestAccr,rwn);
  
  PutWindowRecord(mwn,RestAccr);
  
  CloseWindow(wn);
end;

global
procedure CancelEnterFreeTextNPTSOClass()
begin
  
  CloseWindow(CurWindow);
  return;
end;

global
updating procedure ProceedEnterFreeTextNPTSOClass()
begin
  record RestAccVc RestAccr;
  row RestAccVc RestAccrw;
  record RcVc RepSpec;
  integer rwn,wn,mwn,line;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  if (wn>0) then begin 
    DeselectWindow(wn,false);
    GetWindowRecord(wn,RepSpec);
  end;
  if (mwn>0) then begin 
    GetWindowRecord(mwn,RestAccr);
  end;
  if (blank(RepSpec.f1)) then begin 
    goto LLProceedEnterFreeTextNPTSOClass;
  end;
  line = SelectedListLine(mwn);
  if (line<0) then begin 
    goto LLProceedEnterFreeTextNPTSOClass;
  end;  

  ClearRow(RestAccr,RestAccrw,kInvoiceRowTypeNormal);
  RestAccrw.Spec = RepSpec.f1;
  RestAccrw.AlreadyPrintedToKitchen = 0;
  RestAccrw.KitchenStatus=kRestAccRowStatusNormal;
  
  MatRowInsert(RestAccr,line+1,RestAccrw);
  PutWindowRecord(mwn,RestAccr);
  RestAccDClass_RefreshStringList(mwn,RestAccr);
  DeselectWindow(mwn,false);
  if (WindowDoOK(mwn,0)) then begin   
    UpdateAffectedRowsToKitchenOrderFromRestAcc(RestAccr.SerNr,line,RepSpec.f1);
  end;    
  CloseWindow(wn);
  
LLProceedEnterFreeTextNPTSOClass:;
  return;
end;