remote procedure POPlanDClassItemCodeRemote(var record POPlanVc,Integer);
remote procedure RecalcPOOrdDate(var record POPlanVc,Integer);
remote procedure RecalcAllPOOrdDate(var record POPlanVc);
remote updating function Integer CreatePOFromPOPlan(var record POPlanVc,Date,Date,var string);

global
function Boolean POPlanDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record POPlanVc POPlanr;
  
  res = true;
  GetWindowRecord(wn,POPlanr);
//  if ((POPlanr.OKFlag!=0) or (POPlanr.Closed!=0)) then begin
  if (POPlanr.Closed!=0) then begin
    res = false;
    if (UserCanAction("UnOKAll",false)) then begin
      res = true;
    end;    
  end;
  POPlanDClassUpdateTest = res;
  RETURN;
END;

global
function Boolean POPlanDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record POPlanVc POPlanr;
  Integer normalmode,updatemode;
 
  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,POPlanr);
    if (POPlanr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = true;
      end;
    end;
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,POPlanr);
    if (POPlanr.OKFlag!=0) then begin
      res = false;
    end;
  end;  
  if (res==false) then begin
    if (UserCanAction("POPlanOK",true)==false) then begin
//      MessageBox(1274,StringFromStringSet(3,"POPlanOK"));
    end;
  end;
  POPlanDClassOKFlagButtonAction = res;
  return;
end;

function Boolean POPlanDClassItemCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record POPlanVc POPlanr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,POPlanr);
    POPlanDClassItemCodeRemote(POPlanr,rownr);
    PutWindowRecord(wn,POPlanr);
  end;
  POPlanDClassItemCodeEFAfter = res;
  return;
end;

function Boolean POPlanDClassFromItemCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record POPlanVc POPlanr;
  row POPlanVc POPlanrw;
  record INVc INr;
  record AutoProdVc AutoProdr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,POPlanr);
    if (rownr<MatRowCnt(POPlanr)) then begin
      MatRowGet(POPlanr,rownr,POPlanrw);
      AutoProdr.ToItemCode = POPlanrw.ItemCode;
      AutoProdr.FromItemCode = POPlanrw.FromItemCode;
      if (ReadFirstKey("ToItemCode",AutoProdr,2,true)==false) then begin
        Beep;
        POPlanrw.FromItemCode = "";
        MatRowPut(POPlanr,rownr,POPlanrw);
        PutWindowRecord(wn,POPlanr);
      end;
    end;
  end;
  POPlanDClassFromItemCodeEFAfter = res;
  return;
end;

function Boolean POPlanDClassStartDateEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record POPlanVc POPlanr;
  Boolean res;
  record SFPeriodsBlock SFPb; 
  Date ed;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,POPlanr);
    BlockLoad(SFPb);  
    ed = POPlanr.StartDate;
    switch (SFPb.PeriodType) begin
      case kForecastPeriodTypeMonths:
        ed.day = DaysInMonth(ed.year,ed.month);
      case kForecastPeriodTypeWeeks:
        ed = AddDay(ed,-GetDateId(ed)+7);
    end;
    POPlanr.EndDate = ed;
    PutWindowRecord(wn,POPlanr);
  end;
  POPlanDClassStartDateEFAfter = res;
  return;
end;

function Boolean POPlanDClassSugQtyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record POPlanVc POPlanr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,POPlanr);
    RecalcPOOrdDate(POPlanr,rownr);
    PutWindowRecord(wn,POPlanr);
  end;
  POPlanDClassSugQtyEFAfter = res;
  return;
end;

function Boolean POPlanDClassQtyEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record POPlanVc POPlanr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,POPlanr);
    RecalcPOOrdDate(POPlanr,rownr);
    PutWindowRecord(wn,POPlanr);
  end;
  POPlanDClassQtyEFAfter = res;
  return;
end;

function Boolean POPlanDClassVECodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record POPlanVc POPlanr;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,POPlanr);
    if (rownr>-1) then begin
      RecalcPOOrdDate(POPlanr,rownr);
    end else begin
      RecalcAllPOOrdDate(POPlanr);
    end;
    PutWindowRecord(wn,POPlanr);
  end;
  POPlanDClassVECodeEFAfter = res;
  return;
end;

function Boolean POPlanDClassDaysToGetEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record POPlanVc POPlanr;
  row POPlanVc POPlanrw;
  Boolean res;
  
  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,POPlanr);
    MatRowGet(POPlanr,rownr,POPlanrw);
    if (nonblank(POPlanrw.DaysToGet)) then begin
      POPlanrw.POOrdDate = AddDay(POPlanrw.NeededDate,-POPlanrw.DaysToGet);
      MatRowPut(POPlanr,rownr,POPlanrw);
    end else begin
      RecalcPOOrdDate(POPlanr,rownr);
    end;
    PutWindowRecord(wn,POPlanr);
  end;
  POPlanDClassDaysToGetEFAfter = res;
  return;
end;

function Boolean POPlanDClassNeededDateEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  Boolean res;
  
  res = POPlanDClassDaysToGetEFAfter(wn,rownr,changedf);
  POPlanDClassNeededDateEFAfter = res;
  return;
end;

global
function Boolean POPlanDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = false;
  switch (fieldname) begin
    case "ItemCode": res = POPlanDClassItemCodeEFAfter(wn,rownr,changed);
    case "FromItemCode": res = POPlanDClassFromItemCodeEFAfter(wn,rownr,changed);
    case "StartDate": res = POPlanDClassStartDateEFAfter(wn,rownr,changed);
    case "SugQty": res = POPlanDClassSugQtyEFAfter(wn,rownr,changed);
    case "Qty": res = POPlanDClassQtyEFAfter(wn,rownr,changed);
    case "VECode": res = POPlanDClassVECodeEFAfter(wn,rownr,changed);
    case "DaysToGet": res = POPlanDClassDaysToGetEFAfter(wn,rownr,changed);
    case "NeededDate": res = POPlanDClassNeededDateEFAfter(wn,rownr,changed);
  end;
  POPlanDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean POPlanDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  record POPlanVc POPlanr;
  record POPlanVc prevPOPlanr;
  
  res = true;
  GetWindowRecord(wn,POPlanr);
  if (wnst==Rs_update) then begin
    GetPrevWindowRecord(wn,prevPOPlanr);
    if (prevPOPlanr.OKFlag!=0) then begin
      res = false;
      goto LPOPlanDClassActiveEditField;
    end;
    res = true;
    switch (fieldname) begin
      case "PONr": res = false;
      case "SugQty": res = false;
    end;
  end;
LPOPlanDClassActiveEditField:;  
  POPlanDClassActiveEditField = res;
  return;
end;

global
updating procedure POFromPOPlanDsm()
begin
  Integer wn,err;
  record POPlanVc POPr;
  Date bldat;
  string 255 errstr;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,POPr);
    if (POPr.Closed==0) then begin
      err = CreatePOFromPOPlan(POPr,bldat,bldat,errstr);      
      if (err==0) then begin
        PutWindowRecord(wn,POPr);
        if (WindowDoOK(wn,0)) then begin
        end;
      end else begin
        switch (err) begin
          case 1274:
            MessageBox(1274,StringFromStringSet(3,"POPlanOK"));
          otherwise
            MessageBox(err," " & errstr);
        end;
      end;
    end else begin
      MessageBox(22070,"");
    end;
  end;
  return;
end;

global
procedure POPlanInfoDsm()
begin
  Integer wn;
  record POPlanVc POPr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,POPr);
  RepSpec.f1 = POPr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "POPlanInfoRn";
  RunReport(RepSpec,0);
  return;
end;

global
updating procedure POPlanSplitDsm()
begin
  Integer wn;
  record POPlanVc POPr;
  row POPlanVc POPrw;
  Integer rwcnt,i,currow;
  
  wn = CurWindow;
  currow = GetWindowCurRow(wn);
  if (currow>-1) then begin
    GetWindowRecord(wn,POPr);
    rwcnt = MatRowCnt(POPr);
    if (currow<rwcnt) then begin
      MatRowGet(POPr,currow,POPrw);
      POPrw.SugQty = BlankVal;
      POPrw.Qty = BlankVal;
      if (currow+1==rwcnt) then begin
        MatRowPut(POPr,currow+1,POPrw);
      end else begin
        MatRowInsert(POPr,currow+1,POPrw);
      end;
      PutWindowRecord(wn,POPr);
    end;
  end;
  return;
end;

