external procedure AutomatedSalesOrderly(string);
external procedure QTPasteRvrsVATCode(var record QTVc,Boolean);
remote procedure QTVc_PasteRegion(var record QTVc,string);
remote function Integer QTTestApprovalStatus(record QTVc);
remote procedure QTDClassOnOpenWindowRemote(var record QTVc,var Integer);
remote procedure QTVc_PasteDelCountry(var record QTVc,string);
remote procedure QTVc_PasteInvCountry(var record QTVc,string);
remote procedure QTDUpdatePrices(var record QTVc,Boolean);
remote function Integer EditingAcceptanceRejectedAllowed(Integer,string,string,Integer,string);
external function Boolean QTDClassActiveEditField(Integer,string,Integer,Integer,Integer,Integer);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function roundmode SetRoundModeD(Integer);
external procedure QTDchsum(record QTr,Integer);
remote procedure QTVc_PasteQTDate(var record QTVc);
external function Boolean TestForMATVARINS(Integer);
remote procedure QTVc_PastePrice(var record QTVc,Integer,var Boolean);
remote procedure QTVc_PasteEMCode(var record QTVc,Integer,var Boolean);
remote procedure QTVc_PasteTimeClass(var record QTVc,Integer,var Boolean);
external procedure QTVc_PasteMarkup(var record QTVc,Integer,var Boolean);
remote procedure QTVc_PasteUnitXval(var record QTVc,Integer,var Boolean);
remote procedure QTVc_PasteUnitYval(var record QTVc,Integer,var Boolean);
remote procedure QTVc_PasteUnitZval(var record QTVc,Integer,var Boolean);
remote procedure QTVc_PasteDelAddrCode(var record QTVc);
remote procedure QTVc_PasteCurncyCode(var record QTVc,string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean QTDClassSumEFAfter(Integer,Integer,Integer);
external function Boolean QTDClassVATCodeEFAfter(Integer,Integer,Integer);
external function Boolean QTDClassTaxTemplateCodeEFAfter(Integer,Integer,Boolean);
external function Boolean QTDClassvRebateEFAfter(Integer,Integer,Integer);
remote procedure QTVc_PasteUnitFactQuant(var record QTVc,Integer);
remote procedure QTVc_PasteUnitCode(var record QTVc,Integer);
remote procedure QTVc_PasteSerialNr(var record QTVc,Integer);
external function Boolean GetPD(var record PDVc);
external procedure MulM4ProcVal(val,val,var val);
remote procedure QTVc_PasteSalesMan(var record QTVc,string);
external function Boolean QTDClassSwitchRow(Integer,Integer);
remote function Boolean QTVc_PastePRCode(var record QTVc,string,var string);
remote function Boolean QTVc_PasteArtCode(var record QTVc,Integer,var string,var string);
remote procedure QTVc_PasteQuant(var record QTVc,Integer,Boolean,var Boolean);
external function Boolean QTDchrsum(var record QTVc,Integer,Integer);
external function Boolean QTDClassUnitFactPriceEFAfter(Integer,Integer,Integer);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
remote procedure QTSumup(var record QTVc);
external procedure AddCalcPrice(record INVc,record CPMVc,string,val,string,Integer,var val);
remote function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
remote procedure QTVc_PasteLocation(var record QTVc);
remote procedure QTVc_PasteInvoiceToCode(var record QTVc);
remote procedure QTVc_PasteRebCode(var record QTVc);
external function Boolean OpenContactRecord(string,string);
 
global 
function Boolean QTDClassQuantEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;
  Boolean chsum;
  record ModuleBlock OptFeature;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);
    BlockLoad(OptFeature);
    if (OptFeature.NoQtyDepPrices==0) then begin
      QTVc_PasteQuant(QTr,rownr,true,chsum);  
    end else begin
      BlockLoad(GenOptRec);
      chsum = QTDchrsum(QTr,rownr,GenOptRec.UseDiscount);
    end;
    if (chsum) then begin
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;    
    PutWindowRecord(wn,QTr);
  end;
  QTDClassQuantEFAfter = true;
  return;
end;          
 
function Boolean QTDClassSerialNrEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteSerialNr(QTr,rownr);
    PutWindowRecord(wn,QTr);
  end;
  QTDClassSerialNrEFAfter = true;
  return;
end;

function Boolean QTDClassUnitCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteUnitCode(QTr,rownr);
    PutWindowRecord(wn,QTr);
  end;
  QTDClassUnitCodeEFAfter = true;
  return;
end;

function Boolean QTDClassUnitFactQuantEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteUnitFactQuant(QTr,rownr);
    PutWindowRecord(wn,QTr);
  end;
  QTDClassUnitFactQuantEFAfter = true;
  return;
end;

function Boolean QTDClassBasePriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;
  record GeneralOptionBlock GOb;

  if (changedf!=0) then begin
    BlockLoad(GOb);
    GetWindowRecord(wn,QTr);
    if (GOb.UseDiscount==3) then begin
      if (QTDchrsum(QTr,rownr,GOb.UseDiscount)) then begin
      end;
    end;
    QTDchsum(QTr,rownr);
    QTSumup(QTr);
    PutWindowRecord(wn,QTr);
  end;
  QTDClassBasePriceEFAfter = true;
  return;
end;

function Boolean QTDClassPriceEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;
  Boolean chsum;

  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PastePrice(QTr,rownr,chsum);
    if (chsum) then begin
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;
    PutWindowRecord(wn,QTr);
    AutomatedSalesOrderly("HasPriceLists+Edit_QTVc");
  end;
  QTDClassPriceEFAfter = true;
  return;
end;

function Boolean QTDClassPriceFactorEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;
  record GeneralOptionBlock GenOptRec;

  if (changedf!=0) then begin
    BlockLoad(GenOptRec);
    GetWindowRecord(wn,QTr);
    if (QTDchrsum(QTr,rownr,GenOptRec.UseDiscount)) then begin
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;
    PutWindowRecord(wn,QTr);
  end;
  QTDClassPriceFactorEFAfter = true;
  return;
end;
 
function Boolean QTDClassArtCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin  
  record QTVc QTr;
  string 255 inwarning,warning;

  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);
    if (QTVc_PasteArtCode(QTr,rownr,inwarning,warning)) then begin
/* I'm only calling this to get SendArtStat done, if you have a better way, please put it in */
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;
    if (nonblank(inwarning)) then begin
      MessageBox(0,inwarning);
    end;
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    PutWindowRecord(wn,QTr);
    if (QTDClassSwitchRow(wn,rownr)) then begin end;
  end;
  QTDClassArtCodeEFAfter = true;
  return;
end;

function Boolean QTDClassEMCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record QTVc QTr;
  Boolean chsum;

  GetWindowRecord(wn,QTr);
  if ((changedf!=0) and (nonblank(QTr.PRCode))) then begin
    QTVc_PasteEMCode(QTr,rownr,chsum);    
    if (chsum) then begin    
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;
    PutWindowRecord(wn,QTr);   
  end; 
  QTDClassEMCodeEFAfter = true;
  return;
end;
 
function Boolean QTDClassTimeClassEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record QTVc QTr;
  Boolean chsum;

  GetWindowRecord(wn,QTr);
  if ((changedf!=0) and (nonblank(QTr.PRCode))) then begin
    QTVc_PasteTimeClass(QTr,rownr,chsum);    
    if (chsum) then begin
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;
    PutWindowRecord(wn,QTr);   
  end; 
  QTDClassTimeClassEFAfter = true;
  return;
end;
 
function Boolean QTDClassMarkupEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record QTVc QTr;
  Boolean chsum;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,QTr)
    QTVc_PasteMarkup(QTr,rownr,chsum);    
    PutWindowRecord(wn,QTr);   
  end; 
  QTDClassMarkupEFAfter = true;
  return;
end;
 
function Boolean QTDClassPRCodeEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record QTVc QTr;
  string 255 warntext;

  if (changedf!=0) then begin  
    GetWindowRecord(wn,QTr);
    if (QTVc_PastePRCode(QTr,WindEFstr(wn),warntext)) then begin  
      if (nonblank(warntext)) then begin
        MessageBox(0,warntext);
      end;    
      PutWindowRecord(wn,QTr);   
      SelectWindow(wn);
    end;
    AutomatedSalesOrderly("HasModTS+Edit_QTVc");
  end; 
  QTDClassPRCodeEFAfter = true;
  return;
end;

function Boolean QTDClassUnitXvalEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  record QTVc QTr;
  Boolean chsum,res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteUnitXval(QTr,rownr,chsum);    
    if (chsum) then begin
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;  
    PutWindowRecord(wn,QTr);    
  end;
  QTDClassUnitXvalEFAfter = res;
  RETURN;
END;

function Boolean QTDClassUnitYvalEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  record QTVc QTr;
  Boolean chsum,res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteUnitYval(QTr,rownr,chsum);    
    if (chsum) then begin
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;  
    PutWindowRecord(wn,QTr);    
  end;
  QTDClassUnitYvalEFAfter = res;
  RETURN;
END;

function Boolean QTDClassUnitZvalEFAfter(Integer wn, Integer rownr,Integer changed)
BEGIN
  record QTVc QTr;
  Boolean chsum,res;
  
  res = true;
  if ((changed!=0) and (rownr>=0)) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteUnitZval(QTr,rownr,chsum);
    if (chsum) then begin
      QTDchsum(QTr,rownr);
      QTSumup(QTr);
    end;  
    PutWindowRecord(wn,QTr);    
  end;
  QTDClassUnitZvalEFAfter = res;
  RETURN;
END;

global
function Boolean QTDClassRejectedButtonAfter(Integer wn,Boolean changedf)
begin        
  record QTVc QTr;  
  record QTVc QT2r;
  Boolean res;

  DeselectWindow(wn,true);
  GetWindowRecord(wn,QTr);
  GetPrevWindowRecord(wn,QT2r);
  switch (QTr.Rejected) begin
    case 1:
      if (QT2r.Rejected!=1) then begin
        QTr.Probability = 0;
      end;
    case 2:
      if (QT2r.Rejected!=2) then begin
        QTr.Probability = 100;
      end;
  end;
  QTr.RejectDate = CurrentDate;
  PutWindowRecord(wn,QTr);
  QTDClassRejectedButtonAfter = res;  
  return;
end;
 
function Boolean QTDClassCustCodeEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  string 255 warntext;

  GetWindowRecord(wn,QTr);    
  if ((changedf!=0) or ((blank(QTr.Addr0)) and (nonblank(QTr.CustCode)))) then begin
    if (PasteCustInQT(QTr,QTr.CustCode,WindEFstr(wn),warntext,true)) then begin
      if (nonblank(warntext)) then begin
        MessageBox(0,warntext);
      end;
      PutWindowRecord(wn,QTr);    
    end else begin
      Beep;
    end;
  end; 
  QTDClassCustCodeEFAfter = true;
  return;
end;
 
function Boolean QTDClassSalesManEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  string 255 warntext;

  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTVc_PasteSalesMan(QTr,WindEFstr(wn));
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassSalesManEFAfter = true;
  return;
end;
 
function Boolean QTDClassMakeContactDateEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  Date dat;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    dat = StringToDate(QTr.MakeContactDate);
    QTr.MakeContactDate = dat;
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassMakeContactDateEFAfter = true;
  return;
end;
 
function Boolean QTDClassValidUntilDateEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  Date dat;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    dat = StringToDate(QTr.ValidUntilDate);
    QTr.ValidUntilDate = dat;
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassValidUntilDateEFAfter = true;
  return;
end;
 
function Boolean QTDClassDiscPercEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  val t,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    MulM4ProcVal(QTr.DiscPerc,s,t);
    QTr.DiscSum = Round(QTr.DiscSum,SetRoundModeD(t));
    QTr.Sum1 = s;
    if (blank(QTr.DiscPerc)) then begin
      QTr.DiscSum = blankval;
    end;
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassDiscPercEFAfter = true;
  return;
end;
 
function Boolean QTDClassQTDateEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTVc_PasteQTDate(QTr);
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassQTDateEFAfter = true;
  return;
end;

function Boolean QTDClassRegionEFAfter(Integer wn,Boolean changedf)
begin
  record QTVc QTr;
  
  if (changedf) then begin
    GetWindowRecord(wn,QTr);    
    QTVc_PasteRegion(QTr,WindEFstr(wn));
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassRegionEFAfter = true;
  return;
end;
 
function Boolean QTDClassCurncyCodeEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTVc_PasteCurncyCode(QTr,WindEFstr(wn));
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassCurncyCodeEFAfter = true;
  return;
end;
 
function Boolean QTDClassFrRateEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTr.BaseSum4 = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassFrRateEFAfter = true;
  return;
end;

function Boolean QTDClassToRateB1EFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTr.BaseSum4 = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassToRateB1EFAfter = true;
  return;
end;

function Boolean QTDClassToRateB2EFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTr.BaseSum4 = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassToRateB2EFAfter = true;
  return;
end;

function Boolean QTDClassBaseRate1EFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTr.BaseSum4 = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassBaseRate1EFAfter = true;
  return;
end;

function Boolean QTDClassBaseRate2EFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    QTr.BaseSum4 = MulRateToBase1(QTr.CurncyCode,QTr.Sum4,QTr.FrRate,QTr.ToRateB1,QTr.ToRateB2,QTr.BaseRate1,QTr.BaseRate2,DefaultCurRoundOff);
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassBaseRate2EFAfter = true;
  return;
end;

function Boolean QTDClassPayDealEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  record PDVc PDr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
//    if (blank(QTr.PriceList)) then begin
      PDr.Code = QTr.PayDeal;
      if (GetPD(PDr)) then begin
        if (nonblank(PDr.PriceList)) then begin
          if (PDr.PriceList!=QTr.PriceList) then begin
            QTr.PriceList = PDr.PriceList;
            QTDUpdatePrices(QTr,false);
          end;
        end;
      end;
//    end;    
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassPayDealEFAfter = true;
  return;
end;

function Boolean QTDClassPriceListEFAfter(Integer wn,Integer changedf)
begin
  record QTVc QTr;
  record PLDefVc PLDefr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,QTr);    
    PLDefR.Code = QTr.PriceList;
    if (ReadFirstMain(PLDefR,1,true)) then begin
      QTr.InclVAT = PLDefR.InclVAT;
    end;
    QTDUpdatePrices(QTr,false);
    PutWindowRecord(wn,QTr);    
  end; 
  QTDClassPriceListEFAfter = true;
  return;
end;

function Boolean QTDClassDelAddrCodeEFAfter(Integer wn,Integer changed)
begin  
  record QTVc QTr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,QTr);
    QTVc_PasteDelAddrCode(QTr);
    PutWindowRecord(wn,QTr);
  end;  
  QTDClassDelAddrCodeEFAfter = true;
  return;
end;

function Boolean QTDClassPlanShipEFAfter(Integer wn,Integer changed)
begin
  record QTVc QTr;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;
  
  if (changed!=0) then begin
    BlockLoad(PlanDelRec);
    GetWindowRecord(wn,QTr);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = QTr.PlanShip;
        QTr.PlanShip = d;
        QTr.PlanShipDate = StringToDate(QTr.PlanShip);
      case 2:  /* week number (nn) */
        week = QTr.PlanShip;
        QTr.PlanShip = week;
      case 3:  /* week number (yynn */
        week = QTr.PlanShip;
        QTr.PlanShip = week;
    end;
    PutWindowRecord(wn,QTr);    
  end;
  QTDClassPlanShipEFAfter = true;
  return;
end;

function Boolean QTDClassLocationEFAfter(Integer wn,Integer changed)
begin
  record QTVc QTr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteLocation(QTr);
    PutWindowRecord(wn,QTr);
  end;
  
  QTDClassLocationEFAfter = true;
  return;
end;

function Boolean QTDClassInvCountryEFAfter(Integer wn,Integer changed)
begin  
  record QTVc QTr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,QTr);
    QTVc_PasteInvCountry(QTr,WindEFstr(wn));
    PutWindowRecord(wn,QTr);
  end;  
  QTDClassInvCountryEFAfter = true;
  return;
end;

function Boolean QTDClassDelCountryEFAfter(Integer wn,Integer changed)
begin  
  record QTVc QTr;

  if (changed!=0) then begin  
    GetWindowRecord(wn,QTr);
    QTVc_PasteDelCountry(QTr,WindEFstr(wn));
    PutWindowRecord(wn,QTr);
  end;  
  QTDClassDelCountryEFAfter = true;
  return;
end;

function Boolean QTDClassInvoiceToCodeEFAfter(Integer wn,Integer changed)
begin
  record QTVc QTr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,QTr);
    QTVc_PasteInvoiceToCode(QTr);
    PutWindowRecord(wn,QTr);
  end;
  
  QTDClassInvoiceToCodeEFAfter = true;
end;

function Boolean QTDClassRebCodeEFAfter(Integer wn,Boolean changedf)
begin  
  record QTVc QTr;

  if (changedf) then begin  
    GetWindowRecord(wn,QTr);
    QTVc_PasteRebCode(QTr);
    PutWindowRecord(wn,QTr);
  end;  
  QTDClassRebCodeEFAfter = true;
  return;
end;

global
function Boolean QTDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PlanShip": res = QTDClassPlanShipEFAfter(wn,changed);
    case "PriceList": res = QTDClassPriceListEFAfter(wn,changed);
    case "PayDeal": res = QTDClassPayDealEFAfter(wn,changed);
    case "FrRate": res = QTDClassFrRateEFAfter(wn,changed);
    case "ToRateB1": res = QTDClassToRateB1EFAfter(wn,changed);
    case "ToRateB2": res = QTDClassToRateB2EFAfter(wn,changed);
    case "BaseRate1": res = QTDClassBaseRate1EFAfter(wn,changed);
    case "BaseRate2": res = QTDClassBaseRate2EFAfter(wn,changed);
    case "CurncyCode": res = QTDClassCurncyCodeEFAfter(wn,changed);
    case "QTDate": res = QTDClassQTDateEFAfter(wn,changed);
    case "Region": res = QTDClassRegionEFAfter(wn,changed!=0);
    case "DiscPerc": res = QTDClassDiscPercEFAfter(wn,changed);
    case "ValidUntilDate": res = QTDClassValidUntilDateEFAfter(wn,changed);
    case "MakeContactDate": res = QTDClassMakeContactDateEFAfter(wn,changed);
    case "SalesMan": res = QTDClassSalesManEFAfter(wn,changed);
    case "CustCode": res = QTDClassCustCodeEFAfter(wn,changed);
    case "UnitZval": res = QTDClassUnitZvalEFAfter(wn,rownr,changed);
    case "UnitYval": res = QTDClassUnitYvalEFAfter(wn,rownr,changed);
    case "UnitXval": res = QTDClassUnitXvalEFAfter(wn,rownr,changed);
    case "PRCode": res = QTDClassPRCodeEFAfter(wn,rownr,changed);
    case "Markup": res = QTDClassMarkupEFAfter(wn,rownr,changed);
    case "TimeClass": res = QTDClassTimeClassEFAfter(wn,rownr,changed);
    case "EMCode": res = QTDClassEMCodeEFAfter(wn,rownr,changed);
    case "ArtCode": res = QTDClassArtCodeEFAfter(wn,rownr,changed);
    case "Quant": res = QTDClassQuantEFAfter(wn,rownr,changed);
    case "SerialNr": res = QTDClassSerialNrEFAfter(wn,rownr,changed);
    case "UnitCode": res = QTDClassUnitCodeEFAfter(wn,rownr,changed);
    case "UnitFactQuant": res = QTDClassUnitFactQuantEFAfter(wn,rownr,changed);
    case "UnitFactPrice": res = QTDClassUnitFactPriceEFAfter(wn,rownr,changed);
    case "BasePrice": res = QTDClassBasePriceEFAfter(wn,rownr,changed);
    case "Price": res = QTDClassPriceEFAfter(wn,rownr,changed);
    case "PriceFactor": res = QTDClassPriceFactorEFAfter(wn,rownr,changed);
    case "vRebate": res = QTDClassvRebateEFAfter(wn,rownr,changed);
    case "VATCode": res = QTDClassVATCodeEFAfter(wn,rownr,changed);
    case "TaxTemplateCode": res = QTDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
    case "Sum": res = QTDClassSumEFAfter(wn,rownr,changed);
    case "DelAddrCode": res = QTDClassDelAddrCodeEFAfter(wn,changed);
    case "Location": res = QTDClassLocationEFAfter(wn,changed);
    case "InvCountry": res = QTDClassInvCountryEFAfter(wn,changed);
    case "DelCountry": res = QTDClassDelCountryEFAfter(wn,changed);
    case "InvoiceToCode": res = QTDClassInvoiceToCodeEFAfter(wn,changed);
    case "RebCode": res = QTDClassRebCodeEFAfter(wn,changed!=0);
  end;
  QTDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTDClassOnOverStrikeTest(Integer wn,Integer rownr)
BEGIN
  record QTVc QTr;
  row QTVc QTrw;
  Integer i,rwcnt;
  record INVc INr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,QTr);    
    QTPasteRvrsVATCode(QTr,false);
    QTSumUp(QTr);
    PutWindowRecord(wn,QTr);    
  end;
  QTDClassOnOverStrikeTest = true;
  RETURN;
END;

global
function Boolean QTDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record QTVc QTr;
  row QTVc QTrw;

  if (rownr>=0) then begin
    GetWindowRecord(wn,QTr);    
    QTSumUp(QTr);
    PutWindowRecord(wn,QTr);    
  end;
  QTDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean QTDClassBeforeEditField(Integer wn,string fieldname,Integer fn, Integer rownr)
BEGIN
  Boolean res;
  record QTVc QTr;
  row QTVc QTrw;

  switch (fieldname) begin  
    case "Quant":     
      GetWindowRecord(wn,QTr);      
      MatRowGet(QTr,rownr,QTrw);
      if (QTrw.Quant==0) then begin
        if (TestForMATVARINS(wn)) then begin end;
      end;
  end;
  QTDClassBeforeEditField = res;
  return;
end;

global
function Boolean QTDClassRejectedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record QTVc QTr;
  Integer err;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_normal:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
      if (res) then begin
        err = QTTestApprovalStatus(QTr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LQTDClassOKFlagButtonAction;
        end;
      end;
    case Rs_insert:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
      if (res) then begin
        err = QTTestApprovalStatus(QTr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LQTDClassOKFlagButtonAction;
        end;
      end;
    case Rs_update:
      GetPrevWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
      if (res) then begin
        err = QTTestApprovalStatus(QTr);
        if (err!=0) then begin
          MessageBox(err,"");
          res = false;
          goto LQTDClassOKFlagButtonAction;
        end;
      end;
  end;
LQTDClassOKFlagButtonAction:;  
  QTDClassRejectedButtonAction = res;
  return;
end;

global
function Boolean QTDClassBudTimeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record QTVc QTr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
  end;
  QTDClassBudTimeButtonAction = res;
  return;
end;

global
function Boolean QTDClassBudStockedButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record QTVc QTr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
  end;
  QTDClassBudStockedButtonAction = res;
  return;
end;

global
function Boolean QTDClassBudMaterialButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record QTVc QTr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
  end;
  QTDClassBudMaterialButtonAction = res;
  return;
end;

global
function Boolean QTDClassBudOtherButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record QTVc QTr;
  
  res = true;
  switch (WindowState(wn)) begin
    case 0:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 1:
      GetWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
    case 2:
      GetPrevWindowRecord(wn,QTr);
      if (QTr.Closed!=0) then begin
        res = false;
      end;
  end;
  QTDClassBudOtherButtonAction = res;
  return;
end;

global 
procedure QTDClassOpenCurrency()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record QTVc QTr;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  nwn = OpenWindow("QTCurrencyDClass",1,wn,subset,"",QTr);
  PutWindowRecord(wn,QTr);
  RETURN;
END;

global
function boolean QTCurrencyDClassOnOKWindow(Integer wn)
begin
  record QTVc QTr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,QTr);
    PutWindowRecord(mwn,QTr);
  end;
  CloseWindow(wn);
  
  QTCurrencyDClassOnOKWindow = true;
end;

global
function Boolean QTCurrencyDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  record QTVc QTr;
  
  switch (fieldname) begin
    case "FrRate": res = QTDClassFrRateEFAfter(wn,changed);
    case "ToRateB1": res = QTDClassToRateB1EFAfter(wn,changed);
    case "ToRateB2": res = QTDClassToRateB2EFAfter(wn,changed);
    case "BaseRate1": res = QTDClassBaseRate1EFAfter(wn,changed);
    case "BaseRate2": res = QTDClassBaseRate2EFAfter(wn,changed);
    case "CurncyCode": res = QTDClassCurncyCodeEFAfter(wn,changed);
  end;
  
  QTCurrencyDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTCurrencyDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = QTDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  QTCurrencyDClassActiveEditField = res;
  return;
end;

global 
procedure QTDClassOpenDelTerms()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record QTVc QTr;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  nwn = OpenWindow("QTDelTermsDClass",1,wn,subset,"",QTr);
  PutWindowRecord(wn,QTr);
  RETURN;
END;

global
function boolean QTDelTermsDClassOnOKWindow(Integer wn)
begin
  record QTVc QTr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,QTr);
    PutWindowRecord(mwn,QTr);
  end;
  CloseWindow(wn);
  
  QTDelTermsDClassOnOKWindow = true;
end;

global
function Boolean QTDelTermsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "Location": res = QTDClassLocationEFAfter(wn,changed);
  end;
  QTDelTermsDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTDelTermsDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = QTDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  QTDelTermsDClassActiveEditField = res;
  return;
end;

global 
procedure QTDClassOpenPriceList()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record QTVc QTr;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  nwn = OpenWindow("QTPriceListDClass",1,wn,subset,"",QTr);
  PutWindowRecord(wn,QTr);
  RETURN;
END;

global
function boolean QTPriceListDClassOnOKWindow(Integer wn)
begin
  record QTVc QTr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,QTr);
    PutWindowRecord(mwn,QTr);
  end;
  CloseWindow(wn);
  
  QTPriceListDClassOnOKWindow = true;
end;

global
function Boolean QTPriceListDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PriceList": res = QTDClassPriceListEFAfter(wn,changed);
  end;
  QTPriceListDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTPriceListDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = QTDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  QTPriceListDClassActiveEditField = res;
  return;
end;

global 
procedure QTDClassOpenInvAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record QTVc QTr;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  nwn = OpenWindow("QTInvAddressDClass",1,wn,subset,"",QTr);
  PutWindowRecord(wn,QTr);
  RETURN;
END;

global
function boolean QTInvAddressDClassOnOKWindow(Integer wn)
begin
  record QTVc QTr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,QTr);
    PutWindowRecord(mwn,QTr);
  end;
  CloseWindow(wn);
  
  QTInvAddressDClassOnOKWindow = true;
end;

global
function Boolean QTInvAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
//    case "Region": res = QTDClassRegionEFAfter(wn,changed!=0);
  end;
  QTInvAddressDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTInvAddressDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = QTDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  QTInvAddressDClassActiveEditField = res;
  return;
end;

global 
procedure QTDClassOpenDelAddress()
BEGIN
  Integer wn,nwn;
  string 255 subset;
  record QTVc QTr;
  
  wn = CurWindow;
  GetWindowRecord(wn,QTr);
  nwn = OpenWindow("QTDelAddressDClass",1,wn,subset,"",QTr);
  PutWindowRecord(wn,QTr);
  RETURN;
END;

global
function boolean QTDelAddressDClassOnOKWindow(Integer wn)
begin
  record QTVc QTr;
  Integer mwn;

  mwn = MotherWindow(wn);
  if (WindowState(mwn)==Rs_normal) then begin
    SetWindowState(mwn,Rs_update);
  end;
  if (WindowState(mwn)!=Rs_normal) then begin
    GetWindowRecord(wn,QTr);
    PutWindowRecord(mwn,QTr);
  end;
  CloseWindow(wn);
  
  QTDelAddressDClassOnOKWindow = true;
end;

global
function Boolean QTDelAddressDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "DelAddrCode": res = QTDClassDelAddrCodeEFAfter(wn,changed);
    case "VATCode": res = QTDClassVATCodeEFAfter(wn,rownr,changed);
  end;
  QTDelAddressDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTDelAddressDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  Integer mwn;

  mwn = MotherWindow(wn);
  res = QTDClassActiveEditField(mwn,fieldname,fn,wnst,rownr,changed);
  QTDelAddressDClassActiveEditField = res;
  return;
end;

global
procedure QTDClassEditRow(Integer wn,Integer rwn)
begin
  record QTVc QTr;
  row QTVc QTrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,QTr);
  MatRowGet(QTr,rwn,QTrw);
  RepSpec.long1 = rwn;
  RepSpec.f1 = QTrw.ArtCode;
  RepSpec.long2 = QTrw.Quant;
  RepSpec.f2 = QTrw.Spec;
  RepSpec.vals0 = QTrw.Price;
  RepSpec.vals1 = QTrw.vRebate;
  RepSpec.vals2 = QTrw.Sum;
  
  nwn = OpenWindow("QTRowDClass",0,wn,"","",RepSpec);
  SendArtStat(QTrw.ArtCode,"","",QTrw.rowGP,0,0,QTr.QTDate,1);
  return;
end;

global
procedure QTDClassAddRow(Integer wn,Integer rwn)
begin
  record QTVc QTr;
  row QTVc QTrw;

  GetWindowRecord(wn,QTr);
  MatRowGet(QTr,rwn,QTrw);
  QTrw.stp = kInvoiceRowTypeNormal;
  MatRowPut(QTr,rwn,QTrw);
  PutWindowRecord(wn,QTr);
  QTDClassEditRow(wn,rwn);
  return;
end;

global
procedure QTRowDClassTrash()
begin
  record RcVc RepSpec;
  record QTVc QTr;
  integer wn;
  integer mwn;
  integer rwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,QTr);
  
  rwn = RepSpec.long1;
  MatRowDelete(QTr,rwn);
  
  PutWindowRecord(mwn,QTr);
  CloseWindow(wn);
  return;
end;

global
function boolean QTRowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record QTVc QTr;
  row QTVc QTrw;
  integer mwn;
  integer rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,QTr);
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;
  
  MatRowGet(QTr,rwn,QTrw);
  
  QTrw.ArtCode = RepSpec.f1;
  QTrw.Quant = RepSpec.long2;
  QTrw.Spec = RepSpec.f2;
  QTrw.Price = RepSpec.vals0;
  QTrw.vRebate = RepSpec.vals1;
  QTrw.Sum = RepSpec.vals2;
  QTrw.stp = kInvoiceRowTypeNormal;

  MatRowPut(QTr,rwn,QTrw);
  PutWindowRecord(mwn,QTr);
  QTDClassSwitchRow(mwn,rwn);
  QTRowDClassOnOKWindow = true;
  return;
end;


global
function Boolean QTRowDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer mwn;
  Integer rwn;
  record RcVc RepSpec;
  record QTVc QTr,QT2r;
  row QTVc QTrw;
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;

  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,QTr);
//  GetWindowRecord(mwn,QT2r);
  
  MatRowGet(QTr,rwn,QTrw);
  QTrw.ArtCode = RepSpec.f1;
  QTrw.Quant = RepSpec.long2;
  QTrw.Spec = RepSpec.f2;
  QTrw.Price = RepSpec.vals0;
  QTrw.vRebate = RepSpec.vals1;
  QTrw.Sum = RepSpec.vals2;
  MatRowPut(QTr,rwn,QTrw);
  PutWindowRecord(mwn,QTr);
  
  switch (fieldname) begin
//    case "Recepy": res = QTDClassRecepyEFAfter(wn,rownr,changed);
//    case "PriceFactor": res = QTDClassPriceFactorEFAfter(wn,rownr,changed);
//    case "BasePrice": res = QTDClassBasePriceEFAfter(wn,rownr,changed);
//    case "TaxTemplateCode": res = QTDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
//    case "UnitFactPrice": res = QTDClassUnitFactPriceEFAfter(wn,fn,rownr,changed);
//    case "UnitFactQuant": res = QTDClassUnitFactQuantEFAfter(wn,fn,rownr,changed);
//    case "UnitCode": res = QTDClassUnitCodeEFAfter(wn,fn,rownr,changed);
//    case "PlanShipRow": res = QTDClassPlanShipRowEFAfter(wn,rownr,changed);
//    case "SerialNr": res = QTDClassSerialNrEFAfter(wn,fn,rownr,changed);
//    case "UnitZval": res = QTDClassUnitZvalEFAfter(wn,fn,rownr,changed);
//    case "UnitYval": res = QTDClassUnitYvalEFAfter(wn,fn,rownr,changed);
//    case "UnitXval": res = QTDClassUnitXvalEFAfter(wn,fn,rownr,changed);
    case "long2": res = QTDClassQuantEFAfter(mwn,rwn,changed);
    case "f1": 
            res = QTDClassArtCodeEFAfter(mwn,rwn,changed);
            if (res) then begin
              GetWindowRecord(mwn,QTr);
              MatRowGet(QTr,rwn,QTrw);
              if (QTrw.Quant==0) then begin
                QTrw.Quant = 1;
                MatRowPut(QTr,rwn,QTrw);
                PutWindowRecord(mwn,QTr);
                QTDClassQuantEFAfter(mwn,rwn,changed);
              end;
            end;
    case "vals0": res = QTDClassPriceEFAfter(mwn,rwn,changed);
    case "vals1": res = QTDClassvRebateEFAfter(mwn,rwn,changed);
    case "vals2": res = QTDClassSumEFAfter(mwn,rwn,changed);
  end;

  if (res==true and changed!=0) then begin
    GetWindowRecord(mwn,QTr);
    MatRowGet(QTr,rwn,QTrw);
    RepSpec.f1 = QTrw.ArtCode;
    RepSpec.long2 = QTrw.Quant;
    RepSpec.f2 = QTrw.Spec;
    RepSpec.vals0 = QTrw.Price;
    RepSpec.vals1 = QTrw.vRebate;
    RepSpec.vals2 = QTrw.Sum;
    PutWindowRecord(wn,RepSpec);
    SendArtStat(QTrw.ArtCode,"","",QTrw.rowGP,0,0,QTr.QTDate,1);
  end;
  PutWindowRecord(mwn,QTr);

  QTRowDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean QTDClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record QTVc QTr;
  
  GetWindowRecord(wn,QTr);  
  switch (fieldname) begin
    case "CustContact":
      res = OpenContactRecord(QTr.CustContact,QTr.CustCode);
  end;
  QTDClassOpenRecord = res;
  return;
end;

global
function Boolean QTDClassOnOpenWindow(Integer wn)
begin
  record QTVc QTr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,QTr);
  QTDClassOnOpenWindowRemote(QTr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  QTDClassOnOpenWindow = false;
  return;
end;

global
procedure QTDClassOnWindowRecordChange(Integer wn)
begin
  record QTVc QTr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,QTr);
  QTDClassOnOpenWindowRemote(QTr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
