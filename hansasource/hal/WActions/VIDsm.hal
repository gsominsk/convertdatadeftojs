remote function Boolean GetNextCustNr(var string);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_VIVc(record VIVc,var record RcVc,var Integer);
remote function Integer VITestApprovalStatus(record VIVc);
external procedure ActVcRecordDefClient(var record ActVc);
remote function Boolean VEIVPDFAttach(LongInt,var record Attach2Vc);
external function Integer CountObjects(string);
remote function Integer CancelApprovalRequestAllowed(Integer,string,string,Integer,string);
remote function Integer SendForAcceptance_VIVc(var record VIVc,var record RcVc);
external function Integer TestVATVICorrectionAllowed(record VIVc);
external function val CalculateVINettVal(record VIVc,Boolean);
remote function Integer DoCLOutFromVIDRemote(record VIVc,var record CLOutVc);
//external function Boolean UserInAccGroup(string,LongInt,string);
remote updating function Integer CreateCreditNoteVI(record VIVc,var record VIVc);
remote procedure IntIVFromVI(record VIVc,var record IntIVVc);
external procedure NextM4Number(string,var string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val FindVAT(string,val,Integer,Integer);
remote updating function LongInt RecordAction_raPasteVIInFEVI(var record FEVIVc,LongInt);
remote updating function Integer UpdateTRVATVI(record VIVc,var record VATVIVc,Integer);
remote updating procedure MakeActFromSubSys_VIVc(var record VIVc,Boolean,var record ActVc);
remote procedure VIDDefault(Integer,string,var record VIVc);
external procedure RecActionVI_rlCashInOutDPrint(var record VIVc);
remote updating function Boolean RecordAction_rlVILOK(var record VIVc);

global 
procedure CreateAT2FromVI()
BEGIN
  Integer nwn,rownr;
  Integer nwncnt;
  record AT2UnitVc lastATUnitr;
  record AT2UnitVc ATUnitr;
  record VIVc VIr;
  row VIVc VIrw;
  Integer wn,i,rwcnt;
  string 255 lastinventnr;
  val v;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false);
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,VIr);
    rwcnt = MatRowCnt(VIr);
    if (VIr.Invalid==0) then begin
      if (SingleUserMode) then begin
        lastATUnitr.InventoryNr = "ZZZZZZZZZZZ";
        if (ReadLastMain(lastATUnitr,1,false)) then begin end;
        NextM4Number(lastATUnitr.InventoryNr,lastinventnr);
  //      lastinventnr = FirstInRange(lastATUnitr.InventoryNr,10);
  //      lastinventnr = lastinventnr + 1;
      end;
      nwn = OpenWindow("AT2UnitDClass",1,0,"","",ATUnitr);
      DeselectWindow(nwn,false);
      rwcnt = MatRowCnt(VIr);
      if (rownr>=0) and (rwcnt>0) then begin
        MatRowGet(VIr,rownr,VIrw);
        ATUnitr.Description = VIrw.Comment;
        ATUnitr.Objects = VIrw.Objects;
        ATUnitr.VISerNr = VIr.SerNr;
        ATUnitr.VEInvoiceNr = VIr.InvoiceNr;
        ATUnitr.VECode = VIr.VECode;
        ATUnitr.VEName = VIr.VEName;
        ATUnitr.PurchaseDate = VIr.TransDate;
        ATUnitr.Quantity = VIrw.qty;      
        if (ATUnitr.Quantity<=0) then begin
          ATUnitr.Quantity = 1.00;
        end;
        ATUnitr.PurchVal = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff)/ATUnitr.Quantity;      
        ATUnitr.InsuranceVal = ATUnitr.PurchVal;
        ATUnitr.VATVal = FindVAT(VIrw.VATCode,VIrw.Sum,0,0)/ATUnitr.Quantity;      
//TaxTemplateCode        
        if (blank(ATUnitr.VATVal)) then begin
          ATUnitr.VATVal = VIr.CalcVATVal;
        end;
        ATUnitr.VATVal = MulRateToBase1(VIr.CurncyCode,ATUnitr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        switch (VIr.ExportFlag) begin
          case 1:
            ATUnitr.VATVal = blankval;
          case 3:
            ATUnitr.VATVal = blankval;
        end;
        ATUnitr.InventoryNr = lastinventnr;
      end else begin
        ATUnitr.Description = VIrw.Comment;
        ATUnitr.Objects = VIr.Objects;
        ATUnitr.VISerNr = VIr.SerNr;
        ATUnitr.VEInvoiceNr = VIr.InvoiceNr;
        ATUnitr.VECode = VIr.VECode;
        ATUnitr.VEName = VIr.VEName;
        ATUnitr.PurchaseDate = VIr.TransDate;
        ATUnitr.VATVal = VIr.CalcVATVal;
        if (blank(ATUnitr.VATVal)) then begin
          ATUnitr.VATVal = VIr.VATVal;
        end;
        ATUnitr.VATVal = MulRateToBase1(VIr.CurncyCode,ATUnitr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        ATUnitr.PurchVal = MulRateToBase1(VIr.CurncyCode,VIr.PayVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
        switch (VIr.ExportFlag) begin
          case 1:
            ATUnitr.VATVal = blankval;
          case 3:
            ATUnitr.VATVal = blankval;
          otherwise
            ATUnitr.PurchVal = ATUnitr.PurchVal - ATUnitr.VATVal;
        end;
        ATUnitr.InsuranceVal = ATUnitr.PurchVal;
        ATUnitr.InventoryNr = lastinventnr;
        ATUnitr.Quantity = 1.00;
      end;
      PutWindowRecord(nwn,ATUnitr);  
      SelectWindow(nwn);
    end;
    
/*    
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(VIr,i,VIrw);
      nwn[nwncnt] = OpenWindow("AT2UnitDClass",1,0,"","",ATUnitr);
      DeselectWindow(nwn[nwncnt],false);
      ATUnitr.Description = VIrw.Comment;
      ATUnitr.Objects = VIrw.Objects;
      ATUnitr.VISerNr = VIr.SerNr;
      ATUnitr.VEInvoiceNr = VIr.InvoiceNr;
      ATUnitr.VECode = VIr.VECode;
      ATUnitr.VEName = VIr.VEName;
      ATUnitr.PurchaseDate = VIr.TransDate;
      ATUnitr.PurchVal = MulRateToBase1(VIr.CurncyCode,VIrw.Sum,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
      ATUnitr.InsuranceVal = ATUnitr.PurchVal;
      ATUnitr.Quantity = 1.00;
      ATUnitr.VATVal = FindVAT(VIrw.VATCode,VIrw.Sum,0,0);
      if (ATUnitr.VATVal==blankval) then begin
        ATUnitr.VATVal = VIr.CalcVATVal;
      end;
      ATUnitr.VATVal = MulRateToBase1(VIr.CurncyCode,ATUnitr.VATVal,VIr.FrRate,VIr.ToRateB1,VIr.ToRateB2,VIr.BaseRate1,VIr.BaseRate2,DefaultCurRoundOff);
      ATUnitr.InventoryNr = lastinventnr;
      lastinventnr = lastinventnr + 1;
      PutWindowRecord(nwn[nwncnt],ATUnitr);  
      nwncnt = nwncnt + 1;
    end;
*/    
  end;  
  RETURN;
END;

global
function LongInt VIforCLOutRecordExists(LongInt cloutser)
BEGIN
  LongInt res;
  Boolean testf;
  record CLOutVIVc CLOutVIr;
  
  CLOutVIr.CLOutNr = cloutser;
  testf = ReadFirstMain(CLOutVIr,1,true);
  res = CLOutVIr.SerNr;
  VIforCLOutRecordExists = res;
  RETURN;
END;

global
procedure DoCLOutFromVID()
BEGIN
  record VIVc VIr;
  record CLOutVc CLOutr;
  Integer wn,nwn;
  Integer normalstate,res;
  
  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,VIr)
    if (VIr.OKFlag!=0) then begin
      res = DoCLOutFromVIDRemote(VIr,CLOutr);
      if (res==0) then begin
        nwn = OpenWindow("CLOutDClass",1,0,"","",CLOutr);
      end else begin
        Beep;
      end;
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
LDoCLOutFromVID:;
  RETURN;
END;

global
updating procedure VATCorrectionVIsm()
begin
  record VIVc VIr;
  record VATVIVc VATVIr;
  Integer wn,nwn;
  Integer err;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,VIr);
    if (VIr.OKFlag==0) then begin
      MessageBox(2072,"");
      goto LVATCorrectionVIsm;
    end;
    if (VIr.Invalid!=0) then begin
      MessageBox(1282,"");
      goto LVATCorrectionVIsm;
    end;
    if (VIr.APonTR==0) then begin
      MessageBox(20938,"");
      goto LVATCorrectionVIsm;
    end;
    if (VIr.OPBookVAT!=0) then begin
      MessageBox(24072,"");
      goto LVATCorrectionVIsm;
    end;
    err = TestVATVICorrectionAllowed(VIr);
    if (err!=0) then begin
      MessageBox(err,"");
      goto LVATCorrectionVIsm;
    end;
    err = UpdateTRVATVI(VIr,VATVIr,0);
//    if (err==0) or (VATVIr.TransDate<VIr.TransDate) then begin
    if (err==0) then begin
      if (MatRowCnt(VATVIr)>0) then begin
        nwn = OpenWindow("VATVIDClass",1,0,"","",VATVIr);
      end;
    end else begin
      MessageBox(err,"");
    end;
  end;
LVATCorrectionVIsm:;  
  return;
end;

global
updating procedure OKVILsm()
BEGIN
  record VIVc VIr;
  LongInt i;
  Integer err;
  
  if (UserCanAction("VIOK",true)) then begin
    i = 1;
    while (GetRecordFromBrowse(VIr,CurWindow,i)) begin
      err = VITestApprovalStatus(VIr);
      if (err!=0) then begin
        MessageBox(err,": " & VIr.SerNr);
        goto LOKVILsm;
      end;    
      if (RecordAction_rlVILOK(VIr)) then begin end;
LOKVILsm:;  
      i = i + 1;
    end;
    UpdateBrowses("VIVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"VIOK"));
  end;
  
  RETURN;
END;

global
procedure VIInfoVIDsm()
BEGIN
  record VIVc VIr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,VIr);
  RepSpec.repname = "VIInfoRn";
  RepSpec.long1 = VIr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

/*crashing in ExecIdle
global
function Boolean VIDClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res;
  Integer normalmode;
  record VIVc VIr;
  record RcVc RepSpec;
  
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,VIr);
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
    RepSpec.Media = mtPrinter;
    RepSpec.OnlyUnprntd = 1;    
    if (previewf) then begin
      RepSpec.Media = mtScreen;
    end;
    RepSpec.repname = "VIRn";
    RepSpec.f1 = VIr.SerNr;
    RunReport(RepSpec,0);
  end;    
  VIDClassPrint = res;
  RETURN;
END;
*/
/*
global
procedure PrintVID(Integer wn,Boolean previewf)
BEGIN
  Boolean res;
  Integer normalmode;
  record VIVc VIr;
  record RcVc RepSpec;
  
  normalmode = 0;//Rs_normal
  GetWindowRecord(wn,VIr);
  if (WindowState(wn)==normalmode) then begin
    RepSpec.Media = mtPrinter;
    RepSpec.OnlyUnprntd = 1;    
    if (previewf) then begin
      RepSpec.Media = mtScreen;
    end;
    RepSpec.repname = "VIRn";
    RepSpec.f1 = VIr.SerNr;
    RunReport(RepSpec,0);
  end;    
  RETURN;
END;
*/
global
updating function Boolean VIDClassPrint(Integer wn,Boolean previewf)
BEGIN
  record VIVc VIr;
  Integer normalmode;
  string 20 docname;

  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,VIr); 
  docname = "VIForm";
  switch (VIr.InvType) begin
    case kInvoiceTypeCredit: docname = "DebVIForm";
    case kInvoiceTypeCreditSpecialSales: docname = "DebVIForm";
  end;
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
    if (ReadFirstMain(VIr,0,true)) then begin end;  
  end;
  if (PrintDocument(VIr,docname,previewf)) then begin end;
  VIDClassPrint = true;
  RETURN;
END;

global
procedure PrintCashInOutVIDsm()
BEGIN
  record VIVc VIr;
  Integer wn,nwn;
  Integer normalstate;

  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,VIr);
    RecActionVI_rlCashInOutDPrint(VIr);
  end;
  RETURN;
END;

global 
procedure BalanceVIDsm()
BEGIN
  record VIVc VIr;
  record VIVc VI2r;
  Integer wn,rownr;
  string 40 activefield;
  Boolean testf;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  activefield = WindowActiveField(wn);
  WindowDeactivateField(wn);
  GetWindowRecord(wn,VIr);
  testf = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,VI2r);
      if (VI2r.OKFlag!=0) then begin
        testf = false;
      end;
  end;
  if (testf) then begin
    VIDDefault(rownr,activefield,VIr);
    PutWindowString(wn,"NettVal",CalculateVINettVal(VIr,true));
    PutWindowRecord(wn,VIr);
  end;
  RETURN;
END;

global 
updating procedure ActFromVIDsm()
BEGIN
  record ActVc Actr;
  record VIVc VIr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    DeselectWindow(wn,false);
    GetWindowRecord(wn,VIr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    MakeActFromSubSys_VIVc(VIr,true,Actr);
    nwn = OpenWindow("ActDClass",1,0,"","",Actr);
    SetRLink(wn,true);  
  end;
  RETURN;
END;

global
updating procedure VIVcCreateActivity()
begin
  ActFromVIDsm;
  return;
end;

global 
procedure ConnectToPrepayVIDsm()
BEGIN
  record VIVc VIr;
  row VIVc VIrw;
  Integer wn;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,VIr);
  if (VIr.OKFlag==0) then begin
    ClearRow(VIr,VIrw,kInvoiceRowTypePrepayment);
    VIrw.Comment = USetStr(1288);
    MatRowInsert(VIr,0,VIrw);
  end;
  PutWindowRecord(wn,VIr);
  WindowFieldGoto(wn,VIr,0,"PrepayNr",true);
  RETURN;
END;

global
procedure VIInfoVILsm()
BEGIN
  record VIVc VIr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,VIr)) then begin
    RepSpec.repname = "VIInfoRn";
    RepSpec.long1 = VIr.SerNr;
    RepSpec.Media = mtScreen;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global 
updating procedure FirstEventVIDsm()
BEGIN
  record FEVIVc FEVIr;
  record VIVc VIr;
  Integer wn,nwn;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    DeselectWindow(wn,false);
    GetWindowRecord(wn,VIr);
    if (VIr.OKFlag!=0) then begin
      r = RecordAction_raPasteVIInFEVI(FEVIr,VIr.SerNr);
      if (r==0) then begin
        nwn = OpenWindow("FEVIDClass",1,0,"","",FEVIr);
      end else begin
        Beep;
      end;
    end else begin
      Beep;
    end;
  end;
  RETURN;
END;

global
procedure PUNotReconVIDsm()
BEGIN
  record VIVc VIr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,VIr);
  RepSpec.repname = "PUNotReconRn";
  RepSpec.long1 = VIr.SerNr;
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure IntIVFromVIDsm()
BEGIN
  record VIVc VIr;
  record IntIVVc IntIVr;
  Integer wn,nwn;
  Boolean testf;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,VIr);
  testf = true;
  if (WindowState(wn)==Rs_insert) then begin testf = false; end;
  if (VIr.OKFlag==0) then begin testf = false; end;
  if (VIr.Invalid!=0) then begin testf = false; end;
  if (testf) then begin
    IntIVFromVI(VIr,IntIVr);
    nwn = OpenWindow("IntIVDClass",1,0,"","",IntIVr);
  end;
  return;
end;

global
updating procedure CreateCreditNoteVIDsm()
BEGIN
  record VIVc VIr,credVIr; 
  Integer wn,nwn,err;
  Integer acclevel;

  wn = CurWindow;
  acclevel = UserRegisterAccess("VIVc");
  if (acclevel==kAccessLevelFull) or (acclevel==kAccessLevelReadNew) or (acclevel==kAccessLevelBrowseNew) then begin
    if (WindowState(wn)==Rs_normal) then begin
      GetWindowRecord(wn,VIr);
//      if (VIr.OKFlag!=0) and (VIr.InvType!=kInvoiceTypeCash and VIr.InvType!=kInvoiceTypeCashInvoiceReceiptPRT) and (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin      
      if (VIr.OKFlag!=0) and (VIr.InvType!=kInvoiceTypeCredit and VIr.InvType!=kInvoiceTypeCreditSpecialSales) then begin      
        err = CreateCreditNoteVI(VIr,credVIr);
        if  (err==0) then begin
          nwn = OpenWindow("VIDClass",1,0,"","",credVIr);
          if (WindowDoOK(nwn,0)) then begin
            CreateRecordLink(VIr,CurrentCompany,credVIr,CurrentCompany);  
            CreateRecordLink(credVIr,CurrentCompany,VIr,CurrentCompany);  
            UpdateBrowses("VIVc");
          end;        
        end else begin
          MessageBox(22085," " & USetStr(err));
        end;
      end;  
    end;
  end;
  RETURN;
END;

global
procedure RetentionLineVIDsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  record VIVc VIr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,VIr);
  RepSpec.f1 = VIr.PRCode;
  nwn = OpenWindow("AddPRRetentionDClass",1,wn,"","",RepSpec);  
  return;
end;

global
updating procedure WithholdingLineVIDsm()
begin
   Integer wn,nwn;
  record RcVc RepSpec;
  record VIVc VIr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,VIr);
  nwn = OpenWindow("AddWithholdingVClass",1,wn,"","",RepSpec);  
  return;
end;

global
updating procedure VISendforAcceptanceVIDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record VIVc VIr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,VIr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LVISendforAcceptanceVIDsm;
    end;
    GetWindowRecord(wn,VIr);
  end;
  VIr.AcceptanceBy = acceptanceby;
  VIr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_VIVc(VIr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(VIr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowRecord(wn,VIr);
        if (WindowDoOK(wn,0)) then begin
        end;
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LVISendforAcceptanceVIDsm:;  
  return;
end;

global
updating procedure VISendforAcceptanceVIDsm()
begin
  VISendforAcceptanceVIDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure VICancelApprovalRequest(Integer wn)
begin
  record VIVc VIr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,VIr);
  err = CancelApprovalRequest("VIVc",VIr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LVICancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LVICancelApprovalRequest:;
  return;
end;


global
procedure TestVatMatrixVIDsm()
begin
  record TaxMatrixVc TMr;
  record VIVc VIr;
  row VIVc VIrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,VIr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(VIr,rowno,VIrw);
    UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(VIr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
procedure OpenVEIVPDFDsm()
begin
  Integer wn;
  record VIVc VIr;
  string 255 filename;
  record Attach2Vc Attach2r;

  wn = CurWindow;
  GetWindowRecord(wn,VIr);
  if (VEIVPDFAttach(VIr.SerNr,Attach2r)) then begin
    DownloadAttachedFile(Attach2r,true);
  end;
  return;
end;

global
procedure OpenVatMatrixVIDsm()
begin
  record TaxMatrixVc TMr;
  record VIVc VIr;
  row VIVc VIrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,VIr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(VIr,rowno,VIrw);
    UnpackRowFieldMatrix(VIrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(VIr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
procedure AddSupplierVIDsm()
begin
  record CUVc CUr;
  Integer nwn;
  
  RecordNew(CUr);
  CUr.CUType = 0;
  CUr.VEType = 1;
  nwn = OpenWindow("CUDClass",0,CurWindow,"","",CUr);
  PutWindowString(nwn,"OperationMenuAction","AddContact");
  return;
end;
