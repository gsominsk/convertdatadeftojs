remote function Boolean CQVc_PasteArtCode(var record CQVc,Integer);
remote function Boolean PasteVEInCQ(var record CQVc);
remote function Boolean CQVc_PasteFunderCode(var record CQVc);
remote updating function Integer RecordAction_raPasteCQInCOr(var record COVc,var record CQVc,Boolean);
remote function Boolean PasteCustInCQ(var record CQVc,var string);

function Boolean CQDClassVECodeEFAfter(Integer wn,Integer changed)
BEGIN
  record CQVc CQr;

  GetWindowRecord(wn,CQr);    
  if ((changed!=0) or ((blank(CQr.VEName)) and (nonblank(CQr.VECode)))) then begin
    GetWindowRecord(wn,CQr);    
    DeselectWindow(wn,false);
    if (PasteVEInCQ(CQr)) then begin
      PutWindowRecord(wn,CQr);
    end else begin
      Beep;
    end;
  end;
  CQDClassVECodeEFAfter = true;
  return;
end;

function Boolean CQDClassCustCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record CQVc CQr;
  string 255 warning;

  GetWindowRecord(wn,CQr);    
  if ((changed!=0) or ((blank(CQr.Addr0)) and (nonblank(CQr.CustCode)))) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,CQr);    
    if (PasteCustInCQ(CQr,warning)) then begin
      PutWindowRecord(wn,CQr);
      if (nonblank(warning)) then begin
        MessageBox(0,warning);
      end;
    end else begin
      Beep;
    end;
  end;
  CQDClassCustCodeEFAfter = true;
  return;
end;

function Boolean CQDClassFunderCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changed)
begin  
  record CQVc CQr;
  val t;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,CQr);
  if ((changed!=0) or ((blank(CQr.FunderName)) and (nonblank(CQr.FunderCode)))) then begin
    if (CQVc_PasteFunderCode(CQr)) then begin
      PutWindowRecord(wn,CQr);
    end else begin
      Beep;
    end;
  end;  
  CQDClassFunderCodeEFAfter = true;
  return;
end;

function Boolean CQDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CQVc CQr;
  row CQVc CQrw;
 
  DeselectWindow(wn,false);
  GetWindowRecord(wn,CQr);
  MatRowGet(CQr,rownr,CQrw);
  if ((changedf!=0) or ((blank(CQrw.Spec)) and (nonblank(CQrw.ArtCode)))) then begin
    if (CQVc_PasteArtCode(CQr,rownr)) then begin
      PutWindowRecord(wn,CQr);
    end else begin
      Beep;
    end;
  end;
  CQDClassArtCodeEFAfter = true;
  return;
end;

/*
global
function Boolean CQDClassTaxTemplateCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin  
  record CQVc CQr;
  Boolean chsum;

  if (changedf) then begin  
    GetWindowRecord(wn,CQr);
    CQVc_PasteTaxTemplateCode(CQr,rownr);
    PutWindowRecord(wn,CQr);
  end;  
  CQDClassTaxTemplateCodeEFAfter = true;
  return;
end;
*/

global
function Boolean CQDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = CQDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "VECode": res = CQDClassVECodeEFAfter(wn,changed);
    case "CustCode": res = CQDClassCustCodeEFAfter(wn,fn,rownr,changed); // What about the others? 
//    case "TaxTemplateCode": res = CQDClassTaxTemplateCodeEFAfter(wn,rownr,changed!=0);
//    case "FunderCode": res = CQDClassFunderCodeEFAfter(wn,fn,rownr,changed);
  end;
  CQDClassAfterEditField = res;
  RETURN;
END;

global
updating procedure COFromCQDsm()
BEGIN
  record COVc COr;
  record CQVc CQr;
  Integer nwn,wn;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("CQToCO",true)) then begin
      GetWindowRecord(wn,CQr);
      if (nonblankdate(CQr.ValidTo)) then begin
        if (CQr.ValidTo<CurrentDate) then begin
          MessageBox(1586,"");
          goto LCOFromCQDsm;
        end;
      end;
      if (CQr.CONr!=-1) then begin
        MessageBox(1587,"");
        goto LCOFromCQDsm;
      end;    
      r = RecordAction_raPasteCQInCOr(COr,CQr,true);
      if (r!=-1) then begin
        nwn = OpenWindow("CODClass",1,0,"","",COr);
        UpdateBrowses("COVc");
        UpdateBrowses("CQVc");
      end else begin
        Beep;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"CQToCO"));
    end;
  end else begin
    Beep;
  end;
LCOFromCQDsm:;  
  RETURN;
END;

global
procedure OpenCOCQStatCQDsm()
BEGIN
  record CQVc CQr;
  record COCQStatVc COCQr;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,CQr);
  COCQr.CQSerNr = CQr.SerNr;
  COCQr.CQVersion = CQr.Version;
  if (ReadFirstKey("CQSerNr",COCQr,2,true)) then begin
    nwn = OpenWindow("COCQStatDClass",1,0,"","",COCQr);  
  end;
  RETURN;
END;

global
function Boolean CQDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = true;
  if (wnst==2) then begin//Rs_update
    switch (fieldname) begin
      case "SerNr": res = false;
      case "Version": res = false;
    end;
  end;
  CQDClassActiveEditField = res;
  RETURN;
END;

global
procedure OpenVatMatrixCQDsm()
begin
  record TaxMatrixVc TMr;
  record CQVc CQr;
  row CQVc CQrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,CQr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(CQr,rowno,CQrw);
    UnpackRowFieldMatrix(CQrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(CQr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;
