external procedure In2Period(var string,var Date,var Date);

function Boolean ReportingPeriodDClassPeriod2StrEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ReportingPeriodVc RPr;
  Date blankd;
  
  if (changedf) then begin
    GetWindowRecord(wn,RPr);
    RPr.StartDate = blankd;
    RPr.EndDate = blankd;
    if (nonblank(RPr.Period2Str)) then begin
      In2Period(RPr.Period2Str,RPr.StartDate,RPr.EndDate);
      res = true;
    end;
    PutWindowRecord(wn,RPr);
  end;
  ReportingPeriodDClassPeriod2StrEFAfter = res;
  return;
end;

global
function Boolean ReportingPeriodDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Period2Str": res = ReportingPeriodDClassPeriod2StrEFAfter(wn,changed!=0);
  end;
  ReportingPeriodDClassAfterEditField = res;
  return;
end;


global
procedure ReportSetNewDsm()
begin
  Integer nwn;
  record ReportSetVc RSr;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,RSr);
  RecordNew(RepSpec);
  RepSpec.ReportSet = RSr.Code;
  nwn = OpenWindow("RcDClass",1,0,"","",RepSpec);
  return;
end;

global
procedure AddToReportSetRClassDsm()
begin
  Integer nwn;
  record RcVc RepSpec;
  string 255 wclass;
  
  GetWindowRecord(CurWindow,RepSpec);
  
  wclass = GetWindowClass(CurWindow);
  wclass = left(wclass,len(wclass) - 6);
  wclass = wclass & "QClass";
  
  RepSpec.TemplateType = kReportTemplateTypeSet;
  
  nwn = OpenWindow(wclass,1,0,"","",RepSpec);
  SetWindowState(nwn,Rs_insert);
  return;
end;

global
procedure EditRepDefaultsRClassDsm()
begin
  Integer nwn;
  record RcVc RepSpec;
  string 255 wclass;
  record RcVc DefRepSpec;
  

  GetWindowRecord(CurWindow,RepSpec);
  
  wclass = GetWindowClass(CurWindow);
  wclass = left(wclass,len(wclass) - 6);
  wclass = wclass & "QClass";
  
  RepSpec.TemplateType = kReportTemplateTypeDefault;
  RepSpec.DefUser = CurrentUser;
  
  nwn = OpenWindow(wclass,1,0,"","",RepSpec);

  DefRepSpec.TemplateType = kReportTemplateTypeDefault;
  DefRepSpec.DefUser = CurrentUser;
  DefRepSpec.critname = RepSpec.critname;
  if (ReadFirstKey("Default",DefRepSpec,3,true)==false) then begin
    SetWindowState(nwn,Rs_insert);
  end;
  return;
end;

global
function Boolean ReportSetDClassListDblClick(Integer wn)
begin
  Integer nwn;
  record ReportSetVc ReportSetr;
  record RcVc RepSpec;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,ReportSetr);
    if (ReadMarkedRecord(wn,RepSpec)) then begin
      nwn = OpenWindow("RcDClass",1,0,"","",RepSpec);    
    end;
  end;
  ReportSetDClassListDblClick = true;
  return;
end;

global
function Boolean ReportSetDClassOnOKWindow(Integer wn)
begin
  Integer nwn;
  record ReportSetVc ReportSetr;
  record RcVc RepSpec;
  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,ReportSetr);
    if (ReadMarkedRecord(wn,RepSpec)) then begin
      nwn = OpenWindow("RcDClass",1,0,"","",RepSpec);    
    end;
  end;
  ReportSetDClassOnOKWindow = true;
  return;
end;  

global
function Boolean ReportSetDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record ReportSetVc ReportSetr;
  
  GetWindowRecord(wn,ReportSetr);
  subsetname = ReportSetr.Code;

  ReportSetDClassUpdateWindowSubset = true;
  return;
end;

global
procedure RunReportSetDsm()
begin
  Integer nwn;
  record ReportSetVc ReportSetr;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,ReportSetr);
  RepSpec.f1 = ReportSetr.Code;
  nwn = OpenWindow("ReportSetRClass",1,0,"","",RepSpec);    
  RepSpec.f1 = ReportSetr.Code;
  RepSpec.Media = mtScreen;
  PutWindowRecord(nwn,RepSpec);
  return;
end;
