external function Boolean HasEMail();
external function Boolean HasModIN();
external function Boolean HasModPO();
external function Boolean HasModSL();
external function Boolean HasModTS();
remote procedure ORPasteRvrsVATCode(var record ORVc,Boolean);
external function Boolean GetFirstItem(var string,var record INVc);
remote procedure ORDClassOnOpenWindowRemote(var record ORVc,var Integer);
remote function Integer ORApprovalStatus(record ORVc,var record AcceptanceRulesVc);
remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_ORVc(record ORVc,var record RcVc,var Integer);
remote function Integer ORTestApprovalStatus(record ORVc);
remote function Boolean GetNextItemNr(var string);
remote function Boolean GetNextCustNr(var string);
remote updating procedure ORCreatePlannedPayment(record ORVc);
external function string 40 ObjSClassPasteSpecialWindowClass(string);
external procedure ActVcRecordDefClient(var record ActVc);
external function Integer CountObjects(string);
external function Integer OpenArtStat(Integer,record RcVc,Boolean);
external procedure RowCalculateTaxMatrix_ORVc(var record ORVc,Integer,row ORVc);
external function roundmode SetRoundModeD(Integer);
external function roundmode DefaultRoundMode();
external procedure CalcPrice(val,val,val,var val,Integer);
external procedure RecalcORSubtotal(var record ORVc);
remote procedure GetCurUser(var record UserVc);
remote updating function Boolean BA_ORMinMarkupWarning(record ORVc,var Integer);
remote function Boolean ORDelWithTBIV(record ORVc);
external procedure CustMessages(string,string);
remote function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
remote function Integer CreateTBBUFromORD(record ORVc,var record TBBUVc);
remote updating function Integer CreatePRFromORD(var record ORVc,var record PRVc);
external procedure FindOTforAcc(string,var string);
remote function val GetORRowReserv(LongInt,string,string,var val,var string,var string,Boolean);
external function Boolean DateWarned(Date,string);
external function string 40 SerialNrSClassSpecPName(string);
external function string 40 DelAddrSClassSpecPName(string);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
remote procedure ORDUpdatePrices(var record ORVc,Boolean);
remote updating function Integer RecordAction_raPasteOrdInRet(var record RetVc,string,LongInt);
remote updating function Integer RecordAction_raPasteOrdInStockMov(var record StockMovVc,LongInt);
external procedure GetRecepy(string,var string);
external procedure CalcProc(val,val,var val);
external procedure FindSalesExVat(record TaxMatrixVc,string,val,Integer,Integer,var val);
external procedure SendArtStat(string,string,string,val,val,val,Date,Integer);
external updating procedure RecordActionOR_Print(var record ORVc,string,Boolean);
external procedure ORSumup(var record ORVc);
external function Boolean AllowCurChange(string,Boolean);
external updating procedure ORCreateHtmlFile(record ORVc,record MailVc);
remote procedure RecalculateWeightORVc(var record ORVc,Boolean);
remote updating function Boolean MakeActFromOR(var record ORVc,var record ActVc);
remote updating function Integer CreateMailFromORD(record ORVc,var record MailVc,var string,string);
remote updating function Boolean RecordAction_rlSetORToInv(var record ORVc);
remote updating procedure MakeActFromSubSys_ORVc(var record ORVc,Boolean,Boolean);
remote updating function Integer RecordAction_rlOrderToPO(var record ORVc,var string);
remote updating function LongInt RecordAction_raPasteOrdInShip2(var record SHVc,LongInt,var string);
remote updating function Integer RecordAction_raPasteOrdInInv(var record IVVc,LongInt,Boolean,var Integer);
remote updating function Integer RecordAction_raOrdDownPay(LongInt,val,val,var record IVVc,var string,integer);
external procedure CalcSum(val,val,val,val,var val,Integer);
external procedure GetCurncyRoundoff(string,string,string,var roundmode,var roundmode,var roundmode);
remote function Boolean ORVc_AllowSales(record ORVc,var Integer,var LongInt);
external function Boolean UserCanChangePendingRecord(Integer);
external procedure RoundBelCash(string,var val);

global
procedure RoundRowSum(string curncycode,string paymode,string filename,var val rsum)
begin
  roundmode roundlines,rndtotal,rndvat;

  GetCurncyRoundoff(curncycode,paymode,filename,rndtotal,roundlines,rndvat);
  rsum = Round(rsum,roundlines);
  return;  
end;

global
function Boolean ORDchrsum(var record ORVc ORp,Integer rownr)
BEGIN
  row ORvc ORrw;
  val s,p;
  Boolean res;
  record BelRusCashBlock BRCb;
  record GeneralOptionBlock GOb;

  BlockLoad(GOb);
  res = false;
  MatRowGet(ORp,rownr,ORrw);
  p = ORrw.Price; 
  CalcPrice(ORrw.BasePrice,ORrw.PriceFactor,ORrw.vRebate,p,GOb.UseDiscount);
  ORrw.Price = p;  
  CalcSum(ORrw.Quant,ORrw.Price,ORrw.PriceFactor,ORrw.vRebate,s,GOb.UseDiscount);
  if (HasLocalization("BLR")) then begin
    BlockLoad(BRCb);
    if (SetInSet(ORp.PayDeal,BRCb.CashPayTerm)) then begin
      RoundBelCash(ORp.CurncyCode,s);
    end else begin
      RoundRowSum(ORp.CurncyCode,ORp.PayDeal,"ORVc",s);
    end;
  end else begin
    RoundRowSum(ORp.CurncyCode,ORp.PayDeal,"ORVc",s);
  end;
  if (s!=ORrw.Sum) or ((s==0.00) and (blank(ORrw.Sum))) then begin
    ORrw.Sum = s;
    RowCalculateTaxMatrix_ORVc(ORp,rownr,ORrw);
    MatRowPut(ORp,rownr,ORrw);
    res = true;
  end;
  if (ORrw.Price==0) then begin res = true; end;
  ORDchrsum = res;
  RETURN;  
END;

global
procedure ORVc_PasteCommision(var record ORVc ORp,var Boolean chsum)
BEGIN
//  chsum = ORDchrsum(ORp,-1);
//  what is this?, ORDchrsum has to have rownr given
  RETURN;
END;

global
procedure ORVc_PasteRecepy(var record ORVc ORp,Integer rownr,var Boolean chsum)
BEGIN
  chsum = ORDchrsum(ORp,rownr);
  RETURN;
END;

global
procedure ORVc_PastePriceFactor(var record ORVc ORp,Integer rownr,var Boolean chsum)
BEGIN
  chsum = ORDchrsum(ORp,rownr);
  RETURN;
END;

global
procedure ORVc_PastevRebate(var record ORVc ORp,Integer rownr,var Boolean chsum)
BEGIN
  row ORVc ORrw;
  record INVc INr;
  
  MatRowGet(ORp,rownr,ORrw);
  if (nonblank(ORrw.ArtCode)) then begin
    if (GetFirstItem(ORrw.ArtCode,INr)==false) then begin
      ReadFirstItem(ORrw.ArtCode,INr,true,false);
    end;
  end;
  if (ORrw.vRebate>100.00) then begin
    ORrw.vRebate = blankval;
    MatRowPut(ORp,rownr,ORrw);
    MessageBox(1019,"");
  end;
  chsum = ORDchrsum(ORp,rownr);
  if (nonblank(INr.RvrsVATCode)) then begin
    ORPasteRvrsVATCode(ORp,false);
  end;
  RETURN;
END;

global
procedure ORVc_PasteBasePrice(var record ORVc ORp,Integer rownr,var Boolean chsum)
BEGIN
  chsum = ORDchrsum(ORp,rownr);
  chsum = true;//not only row sum can change
  RETURN;
END;

global
updating procedure CreateActFromORDsm()
BEGIN
  record ORVc ORr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,ORr);  
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromOR(ORr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
  RETURN;
END;

global
updating procedure ORVcCreateActivity()
begin
  CreateActFromORDsm;
  return;
end;

global
procedure RecalculateWeightORDsm()
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  Integer rwcnt,i,wn;
  record INVc INr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,ORr);
    DeselectWindow(wn,false);
    RecalculateWeightORVc(ORr,true);
    PutWindowRecord(wn,ORr);
  end;
  RETURN;
END;

global
updating procedure DownPayFromORDsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  record ORVc ORr;
  record DownPayBlock DPb;
  record IVVc IVr;
  Integer r;
  string 255 errstr;
  Boolean testf;

  wn = CurWindow;
  DeselectWindow(wn,false);
  BlockLoad(DPb);
  if (DPb.DetailsOnIV==0 and HasModSL) then begin
    if (WindowState(wn)==0) then begin
      GetWindowRecord(wn,ORr);
      testf = true;
      r = ORTestApprovalStatus(ORr);
      if (r!=0) then begin
        MessageBox(r,"");
        testf = false;
      end;
      if (testf) then begin
        r = RecordAction_raOrdDownPay(ORr.SerNr,blankval,blankval,IVr,errstr,0);
        if (r!=-1) then begin
           if (MatRowCnt(IVr)!=0) then begin
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);
          end else begin
            MessageBox(r,"");
          end;
        end else begin
          if (nonblank(errstr)) then begin
            MessageBox(0,errstr);
          end else begin
            MessageBox(1274,"");
          end;
        end;
      end;
    end else begin
      Beep;
    end;
  end else begin
    if (WindowState(wn)==0) then begin//Rs_normal
      if (UserCanAction("ORToDownPay",true)) then begin
        testf = true;
        GetWindowRecord(wn,ORr);
        r = ORTestApprovalStatus(ORr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (testf) then begin
          ReportDefaults(RepSpec,"DownPayFromORVClass");
          RepSpec.FirstVer = ORr.SerNr;
          RepSpec.vals0 = DPb.Percentage;
          nwn = OpenWindow("DownPayFromORVClass",1,0,"","",RepSpec);
          PutWindowRecord(nwn,RepSpec);
          SelectWindow(nwn);
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"ORToDownPay"));
      end;
    end else begin
      Beep;
    end;
  end;
  RETURN;
END;

global
updating function Boolean DownPayFromORVClassOnOKWindow(Integer wn)
BEGIN
  record RcVc RepSpec;
  record IVVc IVr;
  Integer nwn;
  Integer r;
  string 255 errstr;
  
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.FirstVer<=0) then begin
    MessageBox(1058,"");
    WindowFieldGoto(wn,RepSpec,-1,"FirstVer",true);
    goto LDownPayFromORVClassOnOKWindow;
  end;
  r = RecordAction_raOrdDownPay(RepSpec.FirstVer,RepSpec.vals0,blankval,IVr,errstr,RepSpec.flags[1]);
  CloseWindow(wn);
  switch (r) begin
    case -1: 
      if (nonblank(errstr)) then begin
        MessageBox(0,errstr);
      end else begin
        Beep;
      end;
    case -2: MessageBox(1281,"");
    otherwise
      nwn = OpenWindow("IVDClass",1,0,"","",IVr);
      UpdateBrowses("ORVc");
  end;
LDownPayFromORVClassOnOKWindow:;  
  DownPayFromORVClassOnOKWindow = false;
  RETURN;
END;

global
procedure IVOpenPrepExists(string custcode)
begin
  record ARPayVc ARPayr;
  
  if (ProgramType!=typStdAccounts) then begin
    ARPayr.CustCode = custcode;
    if (ReadFirstKey("CustCode",ARPayr,1,true)) then begin
      MessageBox(0,USetStr(2025));
    end;           
  end;           
  return;
end;

function
Boolean IsProjOrder(record ORVc ORp)
BEGIN
  record PRVc PRr;
  Boolean res;

  if (nonblank(ORp.PRCode)) then begin
    PRr.Code = ORp.PRCode;
    if (ReadFirstMain(PRr,1,true)) then begin
      res = true;
    end;
  end;
  IsProjOrder = res;
  RETURN;
END;

global
updating procedure IVFromORDsm()
BEGIN
  record ORVc ORr;
  record IVVc IVr;
  Integer wn,r,nwn,rownr;
  Integer errcode;
  Boolean testf;
  LongInt ErrorCode;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal and HasModSL) then begin
    GetWindowRecord(wn,ORr);
//    if (ORr.Closed==0) then begin
      if (UserCanAction("ORToInv",true)) then begin
        testf = true;
        r = ORTestApprovalStatus(ORr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (!ORVc_AllowSales(ORr,rownr,ErrorCode)) then begin
          WindowFieldGoto(wn,ORr,rownr,"ArtCode",true); 
          MessageBox(ErrorCode,"");
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPasteOrdInInv(IVr,ORr.SerNr,true,errcode);
          if (r==0) then begin
            if (MatRowCnt(IVr)!=0) then begin
              nwn = OpenWindow("IVDClass",1,0,"","",IVr);
              UpdateBrowses("ORVc");
              IVOpenPrepExists(IVr.CustCode);
              if (errcode>0) then begin
                MessageBox(errcode,"");
              end;
            end else begin
              if (IsProjOrder(ORr)) then begin
                MessageBox(1096,"");
              end;
              Beep;
            end;
            if (DateWarned(IVr.TransDate,"IVVc")) then begin
              MessageBox(1045,"");
            end;
          end else begin
            if (r!=-1) then begin
              MessageBox(r,"");
            end else begin
              Beep;
            end;
          end;
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"ORToInv"));
      end;
//    end else begin
//      MessageBox(1274,"");
//    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure SHFromORDsm()
BEGIN
  record ORVc ORr;
  record SHVc SHr;
  Integer wn,nwn,i;
  Boolean testf;
  string 60 warning;
  LongInt r;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal and HasModIN) then begin
    GetWindowRecord(wn,ORr);
    if (ORr.Closed==0) then begin
      if (UserCanAction("ORToSH",true)) then begin
        testf = true;
        if (ORr.OKFlag==0) then begin 
          if (UserCanAction("NotOKORToSH",false)) then begin
            MessageBox(20054,"");
            testf = false;
          end; 
        end;
        if (testf) then begin
          if (BA_ORMinMarkupWarning(ORr,i)==true) then begin
            if (UserCanAction("DisallowSaleBelowGP",false)) then begin
              testf = false;
              MessageBox(1274,StringFromStringSet(3,"DisallowSaleBelowGP"));
            end;
          end;
        end;
        r = ORTestApprovalStatus(ORr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (testf) then begin  
          r = RecordAction_raPasteOrdInShip2(SHr,ORr.SerNr,warning);
          if (r==0) then begin
            if (MatRowCnt(SHr)!=0) then begin
              nwn = OpenWindow("SHDClass",1,0,"","",SHr);
              UpdateBrowses("ORVc");
              CustMessages("SHVc",SHr.CustCode);
              if (nonblank(warning)) then begin
                MessageBox(0,warning);
              end;
            end else begin
              Beep;
            end;
          end else begin
            if (r==-1) then begin
              Beep;
            end else begin
              MessageBox(r,"");
            end;
          end;
        end;  
      end else begin
        MessageBox(1274,StringFromStringSet(3,"ORToSH"));
      end;
    end else begin
      Beep;
    end;      
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure SHFromORLsm()
BEGIN
  record ORVc ORr;
  record SHVc SHr;
  Integer wn,nwn;
  LongInt r;
  string 60 warning;
  Boolean testf;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,ORr)) then begin
    if (UserCanAction("ORToSH",true)) then begin
      if (ORr.Closed==0) then begin
        testf = true;
        SHr.OrderNr = ORr.SerNr;
        if (ORr.OKFlag==0) then begin 
          if (UserCanAction("NotOKORToSH",false)) then begin
            MessageBox(20054,"");
            testf = false;
          end;
        end;
        r = ORTestApprovalStatus(ORr);
        if (r!=0) then begin
          MessageBox(r," " & ORr.SerNr);
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPasteOrdInShip2(SHr,ORr.SerNr,warning);
          if (r==0) then begin
            if (MatRowCnt(SHr)!=0) then begin
              nwn = OpenWindow("SHDClass",1,0,"","",SHr);        
              UpdateBrowses("ORVc");
              if (nonblank(warning)) then begin
                MessageBox(0,warning);
              end;
            end else begin
              Beep;
            end;
          end else begin
            if (r==-1) then begin
              Beep;
            end else begin
              MessageBox(r,"");          
            end;
          end;
        end;
      end;  
    end else begin
      MessageBox(1274,StringFromStringSet(3,"ORToSH"));
    end;
  end;
  RETURN;
END;

global
updating procedure IVFromORLsm()
BEGIN
  record ORVc ORr;
  record IVVc IVr;
  Integer nwn,wn;
  Integer errcode;
  LongInt r;
  Boolean testf;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,ORr)) then begin
    IVr.OrderNr = ORr.SerNr;
    if (UserCanAction("ORToInv",true)) then begin
      if (ORr.Closed==0) then begin
        testf = true;
        r = ORTestApprovalStatus(ORr);
        if (r!=0) then begin
          MessageBox(r,"");
          testf = false;
        end;
        if (testf) then begin
          r = RecordAction_raPasteOrdInInv(IVr,ORr.SerNr,true,errcode);
          if (r==0) then begin
            nwn = OpenWindow("IVDClass",1,0,"","",IVr);        
            CustMessages("IVVc",IVr.CustCode);
            UpdateBrowses("ORVc");
            if (errcode>0) then begin
              MessageBox(errcode,"");
            end;
          end else begin
            if (IsProjOrder(ORr)) then begin
              MessageBox(0,USetStr(1096));
            end;
            if (r!=-1) then begin
              MessageBox(2210,"");
            end else begin
              Beep;
            end;          
          end;
        end;
      end;  
    end else begin
      MessageBox(1274,StringFromStringSet(3,"ORToInv"));
    end;
  end;
  RETURN;
END;

global
updating procedure DownPayFromORLsm()
BEGIN
  Integer wn,nwn;
  record RcVc RepSpec;
  record ORVc ORr;
  record DownPayBlock DownPayRec;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    if (UserCanAction("ORToDownPay",true)) then begin
      if (ReadMarkedRecord(wn,ORr)) then begin
        if (ORr.Closed==0) then begin
          BlockLoad(DownPayRec);
          ReportDefaults(RepSpec,"DownPayFromORVClass");
          RepSpec.FirstVer = ORr.SerNr;
          RepSpec.vals0 = DownPayRec.Percentage;
          nwn = OpenWindow("DownPayFromORVClass",1,0,"","",RepSpec);
          PutWindowRecord(nwn,RepSpec);
          SelectWindow(nwn);
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"ORToDownPay"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
updating procedure POFromORLsm()
BEGIN
  record ORVc ORr;
  Integer wn;
  LongInt r;
  Integer i;
  Boolean testf;
  string 255 errstr;

  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(ORr,wn,i)) begin
    if (UserCanAction("ORToPO",true)) then begin
      testf = true;
      r = ORTestApprovalStatus(ORr);
      if (r!=0) then begin
        MessageBox(r," " & ORr.SerNr);
        testf = false;
      end;
      if (testf) then begin
        r = RecordAction_rlOrderToPO(ORr,errstr);
        if (r!=0) then begin
          MessageBox(r," " & errstr);
          testf = false;
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"ORToPO"));
    end;
    i = i+1;
  end;
  RETURN;
END;

global
updating procedure POFromORDsm()
begin
  record ORVc ORr;
  Integer wn;
  LongInt r;
  Boolean testf;
  string 255 errstr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal and HasModPO) then begin
    GetWindowRecord(wn,ORr);  
    if (UserCanAction("ORToPO",true)) then begin
      testf = true;
      r = ORTestApprovalStatus(ORr);
      if (r!=0) then begin
        MessageBox(r,"");
        testf = false;
      end;
      if (testf) then begin
        r = RecordAction_rlOrderToPO(ORr,errstr);
        if (r!=0) then begin
          MessageBox(r," " & errstr);
          testf = false;
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"ORToPO"));
    end;
  end;
  return;
end;

global
updating procedure DropORLClassOnSHLClass(Integer frwn,Integer town)
BEGIN
  record ORVc ORr;
  record SHVc SHr;
  LongInt r;
  Boolean testf;
  string 60 warning;
  
  if ((GetWindowFileName(frwn)=="ORVc") and (GetWindowFileName(town)=="SHVc")) then begin
    if (ReadMarkedRecord(frwn,ORr)) then begin
      if ((ORr.Closed==0) and (IsRecordLocked(ORr)==false)) then begin
        RecordNew(SHr);
        SHr.OrderNr = ORr.SerNr;
        if (UserCanAction("ORToSH",true)) then begin
          testf = true;
          if (ORr.OKFlag==0) then begin 
            if (UserCanAction("NotOKORToSH",false)) then begin
              testf = false;
            end; 
          end;
          r = ORTestApprovalStatus(ORr);
          if (r!=0) then begin
            MessageBox(r,"");
            testf = false;
          end;
          if (testf) then begin  
            r = RecordAction_raPasteOrdInShip2(SHr,ORr.SerNr,warning);
            if (r==0) then begin
              UpdateBrowses("SHVc");
              if (nonblank(warning)) then begin
                MessageBox(0,warning);
              end;
            end else begin
              if (r==-1) then begin
                Beep;
              end else begin
                MessageBox(r,"");          
              end;
            end;
          end;
        end else begin
          MessageBox(1274,StringFromStringSet(3,"ORToSH"));
        end;
      end;    
    end;
  end;  
  RETURN;
END;

global
updating procedure DropORLClassOnIVLClass(Integer frwn,Integer town)
BEGIN
  record ORVc ORr;
  record IVVc IVr;
  Integer errcode;
  Integer r;
  Boolean testf;
  
  if ((GetWindowFileName(frwn)=="ORVc") and (GetWindowFileName(town)=="IVVc")) then begin
    if (ReadMarkedRecord(frwn,ORr)) then begin
      if ((ORr.Closed==0) and (IsRecordLocked(ORr)==false)) then begin
        RecordNew(IVr);
        IVr.OrderNr = ORr.SerNr;
        if (UserCanAction("ORToInv",true)) then begin
          testf = true;
          r = ORTestApprovalStatus(ORr);
          if (r!=0) then begin
            MessageBox(r,"");
            testf = false;
          end;
          if (testf) then begin
            r = RecordAction_raPasteOrdInInv(IVr,ORr.SerNr,true,errcode);
            if (r!=-1) then begin
              IVOpenPrepExists(IVr.CustCode);      
              UpdateBrowses("IVVc");
              if (errcode>0) then begin
                MessageBox(errcode,"");
              end;
            end else begin
              if (IsProjOrder(ORr)) then begin
                MessageBox(1096,"");
              end;      
            end;
          end;
        end else begin
          MessageBox(1274,StringFromStringSet(3,"ORToInv"));
        end;
      end;    
    end;
  end;  
  RETURN;
END;

global 
updating procedure CreateMailFromORDsm()
BEGIN
  Integer wn,nwn;
  record MailVc Mailr;
  record ORVc ORr;
  Integer err;
  string 255 tstr;
  string 255 docname;
  Boolean testf;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal and HasEMail) then begin
    testf = true;
    GetWindowRecord(wn,ORr);  
    err = ORTestApprovalStatus(ORr);
    if (err!=0) then begin
      MessageBox(err,"");
      testf = false;
    end;
    if (testf) then begin
      err = CreateMailFromORD(ORr,Mailr,tstr,WindowFormName(wn));
      if (err!=0) then begin
        MessageBox(err,": " & tstr);
      end else begin
        nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
      end;
    end;
  end;
  RETURN;
END;

global
procedure ORStatusORLsm()
BEGIN
  record ORVc ORr;
  record RcVc RepSpec;
  Integer wn;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,ORr)) then begin
    RepSpec.f1 = ORr.SerNr;
    RepSpec.Media = mtScreen;
    RepSpec.repname = "ORInfoRn";
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
updating procedure ActFromORLsm()
BEGIN
  record ORVc ORr;
  Integer wn;
  LongInt r;
  Integer i;

  i = 1;
  wn = CurWindow;
  while (GetRecordFromBrowse(ORr,wn,i)) begin
    MakeActFromSubSys_ORVc(ORr,true,true);
    i = i+1;
  end;
  RETURN;
END;

global
updating procedure ORToInvORLsm()
BEGIN
  record ORVc ORr;
  Integer i;
  Integer wn;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(ORr,wn,i)) begin
    if (RecordAction_rlSetORToInv(ORr)) then begin
    end;
    i = i + 1;
  end;
  UpdateBrowses("ORVc");
  RETURN;
END;

global
updating function Boolean ORDClassPrint(Integer wn,Boolean previewf)
begin
  record ORVc ORr;
  Boolean testf;
  Integer err;
  
  testf = true;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,ORr);
  if (UserCanAction("PrintPreviewNotApproved",false)==false) then begin
    err = ORTestApprovalStatus(ORr);
  end;
  if (err!=0) then begin
    MessageBox(err,"");
    testf = false;
  end;
  if (testf) then begin
    RecordActionOR_Print(ORr,previewf,true);
  end;
  ORDClassPrint = true;
  RETURN;
END;

global
updating procedure PrintORL(Integer wn,Boolean previewf)
BEGIN
  record ORVc ORr;
  Integer i;
  Boolean testf;
  Integer r;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(ORr,wn,i)) begin
    testf = true;
    r = ORTestApprovalStatus(ORr);
    if (r!=0) then begin
      MessageBox(r," " & ORr.SerNr);
      testf = false;
    end;
    if (testf) then begin
      RecordActionOR_Print(ORr,previewf,true);
    end;
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
updating procedure PrinORD(Integer wn,Boolean previewf)
BEGIN
  record ORVc ORr;
  Integer normalmode,tf;
  string 20 docname;
  Boolean testf;
  Integer r;

  GetWindowRecord(wn,ORr);
  testf = true;
  r = ORTestApprovalStatus(ORr);
  if (r!=0) then begin
    MessageBox(r,"");
    testf = false;
  end;
  if (testf) then begin
    if ((WindowState(wn)==normalmode) and (previewf==false)) then begin
      RecordActionOR_Print(ORr,previewf,true);
    end else begin
      RecordActionOR_Print(ORr,previewf,true);
    end;
  end;
  RETURN;
END;

function Boolean ORApprovalStarted(record ORVc ORr)
begin
  Boolean res;
  record AcceptanceRulesVc Acptr;

  res = false;
  if (ORApprovalStatus(ORr,Acptr)>=kAcceptanceStatePending) then begin
    res = true;
  end;
  ORApprovalStarted = res;
  return;
end;

global
function Boolean ORDClassUpdateTest(Integer wn)
BEGIN
  Boolean res;
  record ORVc ORr;
  
  res = true;
  GetWindowRecord(wn,ORr);
  if (ORr.Closed!=0) then begin
    res = false;
  end;
  if (ORApprovalStarted(ORr) and UserCanAction("ChangeRecordHeaderWhenPending",false)==false and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
    res = false;
  end;
  ORDClassUpdateTest = res;
  RETURN;
END;

global
function Boolean ORDClassExportFlagButtonAfter(Integer wn,Boolean changedf)
begin        
  record ORVc ORr;  
  Boolean res;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,ORr);
  if (ORr.Closed==0) then begin
    ORSumup(ORr);
  end;
  PutWindowRecord(wn,ORr);
  ORDClassExportFlagButtonAfter = res;  
  return;
end;

function Boolean ORShipdTest(record ORVc ORp)
begin
  Boolean res;
  Boolean testf;
  Integer i,rwcnt;
  row ORVc ORrw;
  
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    testf = (ORrw.Shipd1>0)==true;
    if (testf) then begin
      res = true;
      goto LORShipdTest;
    end;
  end;
LORShipdTest:;
  ORShipdTest = res;
  return;
end;

function Boolean ORShipdFromRowTest(record ORVc ORp,Integer rownr)
begin
  Boolean res;
  Boolean testf;
  Integer i,rwcnt;
  row ORVc ORrw;
  record INVc INr;
  
  rwcnt = MatRowCnt(ORp);
  for (i=rownr;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    INr.Code = ORrw.ArtCode;
    ReadFirstMain(INr,1,true);
    if ((INr.ItemType==kItemTypePlain) or (INr.ItemType==kItemTypeService)) then begin
      testf = (ORrw.Invd>0)==true;
    end else begin
      testf = (ORrw.Shipd1>0)==true or (ORrw.Invd>0)==true;
    end;
    if (testf) then begin
      res = true;
      goto LORShipdFromRowTest;
    end;
  end;
LORShipdFromRowTest:;
  ORShipdFromRowTest = res;
  return;
end;

function Boolean ORShipd2Test(record ORVc ORp)
begin
  Boolean res;
  Boolean testf;
  Integer i,rwcnt;
  row ORVc ORrw;
  
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    testf = (ORrw.Shipd2>0)==true;
    if (!testf) then begin
      testf = (ORrw.Shipd1>0)==true;
    end;
    if (testf) then begin
      res = true;
      goto LORShipd2Test;
    end;
  end;
LORShipd2Test:;
  ORShipd2Test = res;
  return;
end;

function Boolean ORInvdTest(record ORVc ORp)
begin
  Boolean res;
  Boolean testf;
  Integer i,rwcnt;
  row ORVc ORrw;
  
  rwcnt = MatRowCnt(ORp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORp,i,ORrw);
    testf = (ORrw.Invd>0)==true;
    if (testf) then begin
      res = true;
      goto LORInvdTest;
    end;
  end;
LORInvdTest:;
  ORInvdTest = res;
  return;
end;

global 
function Boolean ORDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record ORVc ORr;
  row ORVc ORrw;
  Boolean res,puf;
  record INVc INr;
  Integer i,rwcnt;
  val ordqty;
  string 60 comment;
  string 60 location;

  res = true;
  GetWindowRecord(wn,ORr);    
  if (WindowState(wn)==Rs_update) then begin//Rs_update
    if (ORr.Closed==0) then begin
      if (ORr.OKFlag!=0) then begin
        res = false;
        MessageBox(20589,"");
        goto LORDClassDeleteRowTest;
      end; 
      if (ORApprovalStarted(ORr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
        res = false;
        goto LORDClassDeleteRowTest;
      end;
      if (ORShipdFromRowTest(ORr,rownr)==true) then begin
        res = false;
        MessageBox(1304,"");
        goto LORDClassDeleteRowTest;
      end;
      if (res) then begin
        MatRowGet(ORr,rownr,ORrw);
        switch (ORrw.stp) begin
          case kInvoiceRowTypeStructuredItemComponent:
            res = false;
            goto LORDClassDeleteRowTest;
        end;
      end;
      MatRowGet(ORr,rownr,ORrw);
      if (GetORRowReserv(ORr.SerNr,ORrw.ArtCode,ORrw.SerialNr,ordqty,comment,location,true)>0) then begin
        res = false;
        MessageBox(20564,"");
        goto LORDClassDeleteRowTest;
      end;
    end else begin
      res = false;
    end;
  end;
  if (res) then begin
    MatRowGet(ORr,rownr,ORrw);
    if (ORrw.Quant!=0) then begin
      if (ReadFirstItem(ORrw.ArtCode,INr,false,false)) then begin
        if (INr.ItemType==kItemTypeStructured) then begin
          if (INr.ExplodeRec!=0) then begin
            rwcnt = MatRowCnt(ORr);
            i = rownr + 1;
            while (i<rwcnt) begin
              MatRowGet(ORr,i,ORrw); 
              if (ORrw.stp==kInvoiceRowTypeStructuredItemComponent) then begin
                MatRowDelete(ORr,i);
                puf = true;
              end else begin
                i = rwcnt;
              end;
            end;
          end;
        end;
      end;
    end;
    if (puf) then begin
      PutWindowRecord(wn,ORr);    
    end;
  end;
LORDClassDeleteRowTest:; 
  ORDClassDeleteRowTest = res;
  return;
end;

global
function Boolean ORDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record ORVc ORr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,ORr);
    ORPasteRvrsVATCode(ORr,false);
    ORSumup(ORr);
    PutWindowRecord(wn,ORr);    
  end;
  ORDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean ORDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ORVc ORr;
  record ORVc OR2r;
  row ORVc ORrw;
  record INVc INr;
  Integer nwn;
  
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LORDClassActiveEditField;
    end;
  end;
  if (wnst!=Rs_insert) then begin
    if (fieldname=="SerNr") then begin
      res = false;
      goto LORDClassActiveEditField;
    end;
    if (ORApprovalStarted(ORr) and UserCanChangePendingRecord(rownr)==false) then begin 
      res = false; 
      goto LORDClassActiveEditField; 
    end;
  end;
  res = true;
  GetWindowRecord(wn,ORr);
  switch (wnst) begin
    case Rs_update:    
      GetPrevWindowRecord(wn,OR2r);
  end;
  switch (wnst) begin
    case Rs_insert:
    otherwise
      if (ORr.OKFlag!=0) then begin
        switch (fieldname) begin
          case "LangCode": ;
          otherwise
            res = false;
            goto LORDClassActiveEditField;
        end;
      end;
  end;  
  switch (fieldname) begin
    case "SerNr": 
      switch (wnst) begin
        case Rs_update:
           if (OR2r.OKFlag==0) then begin
             if (UserCanAction("AllowORSerNrChange",true)==false) then begin res = false; end;
            end;
        otherwise
          if (UserCanAction("AllowORSerNrChange",true)==false) then begin res = false; end;
      end;
    case "rowGP": res = false;
    case "RvrsVATCode": res = false;
    case "VATNr": res = HasLocalization("PRT")==false;
    case "Addr0": res = HasLocalization("PRT")==false;
    case "Addr1": res = HasLocalization("PRT")==false;
    case "Addr2": res = HasLocalization("PRT")==false;
    case "InvAddr3": res = HasLocalization("PRT")==false;
    case "InvAddr4": res = HasLocalization("PRT")==false;
    case "InvCountry": res = HasLocalization("PRT")==false;
    case "BasePrice": 
      if (UserCanAction("ChangingCostOnORRow",true)==false) then begin res = false; end;
    case "PRCode": 
      if (ORInvdTest(ORr)) then begin res = false; end;      
      if (res) then begin
        if (nonblank(ORr.PRCode)) then begin
//          if (ORShipd2Test(ORr)) then begin res = false; end;
          if (ORDelWithTBIV(ORr)) then begin res = false; end;
        end;
      end;
    case "CustCode": 
      if (ORShipdTest(ORr)) then begin res = false; end;      
    case "FrRate": 
      if (AllowCurChange(ORr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB1": 
      if (AllowCurChange(ORr.CurncyCode,false)==false) then begin res = false; end;
    case "ToRateB2": 
      if (AllowCurChange(ORr.CurncyCode,false)==false) then begin res = false; end;
    case "BaseRate1": 
      if (AllowCurChange(ORr.CurncyCode,true)==false) then begin res = false; end;
    case "BaseRate2": 
      if (AllowCurChange(ORr.CurncyCode,true)==false) then begin res = false; end;      
    case "PriceList": 
      if (UserCanAction("ChangePrices",true)==false) then begin res = false; end;
    case "Price": 
      if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
    case "vRebate": 
      if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
    case "Sum": 
      if (UserCanAction("ChangeUnitPrices",true)==false) then begin res = false; end;
    case "BranchID": 
      res = UserCanAction("AllowORBranchIDChange",false);
    case "Shipd1": 
       res = false;
    case "Shipd2": 
       res = false;
    case "Invd": 
       res = false;
    case "Quant": 
      MatRowGet(ORr,rownr,ORrw);
      switch (ORrw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          res = false;
      end;
    case "Location":
      if (rownr>=0) then begin
        MatRowGet(ORr,rownr,ORrw);
        res = (ORrw.Shipd1>0)==false;
      end else begin          
        res = ORShipdTest(ORr)==false;
      end;
    case "Spec": 
      if (HasLocalization("PRT")) then begin
        MatRowGet(ORr,rownr,ORrw);
        if (nonblank(ORrw.ArtCode)) then begin
          res = false;
        end;
      end else begin
        if (UserCanAction("ChangeORItemSpec",true)==false) then begin res = false; end;
      end;
  end;
  if (ORShipdTest(ORr)==false) then begin goto LORDClassActiveEditField; end;
  if (wnst==Rs_update) then begin
    if (OR2r.OKFlag!=0) then begin
      switch (fieldname) begin
        case "PlanShip": res = true;
        otherwise res = false;
      end;
      if (rownr>=0) then begin
        res = true;
        switch (fieldname) begin
          case "PlanShipRow":
            res = true;
          otherwise
            res = false;
            goto LORDClassActiveEditField;
        end;
      end else begin
        if (res==false) then begin goto LORDClassActiveEditField; end;
      end;      
    end;
    if ((rownr>=0) and (rownr<WindowOldRowcnt(wn))) then begin
      switch (fieldname) begin
        case "Recepy":
          res = false;
          if (changed!=0) then begin MessageBox(1304,""); end;
        case "ArtCode":
          res = false;
          if (changed!=0) then begin MessageBox(1304,""); end;
      end;
    end;
  end;  
LORDClassActiveEditField:;  
  ORDClassActiveEditField = res;
  RETURN;
END;

global 
function Boolean ORDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record ORVc ORr;
  row ORVc ORrw;
  record ORVc OR2r;

  res = true;
  GetWindowRecord(wn,ORr);
  if (ORr.Closed==0) then begin
    if (ORApprovalStarted(ORr) and UserCanAction("ChangeRecordMatrixWhenPending",false)==false) then begin
      res = false;
      goto LORDClassInsertRowTest;
    end;
    switch (WindowState(wn)) begin
      case Rs_normal:
        if (ORShipdTest(ORr)) or (ORr.OKFlag!=0) then begin res = false; end;
      case Rs_insert:
        res = true;
      case Rs_update:
        GetPrevWindowRecord(wn,OR2r);
        if (ORShipdTest(OR2r)) or (ORr.OKFlag!=0) then begin res = false; end;
      otherwise
        res = false;
    end;
    if (res) then begin
      MatRowGet(ORr,rownr,ORrw);
      switch (ORrw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          res = false;
      end;
    end;
  end else begin
    res = false;
  end;
LORDClassInsertRowTest:;  
  ORDClassInsertRowTest = res;
  RETURN;
END;

procedure AddORLineType(Integer t,Boolean firstf)
begin
  record ORVc ORr;
  row ORVc ORrw;
  Integer wn,rownr;
  string 20 tstr;
  Integer i,rwcnt;
  Boolean deliveredf;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DoUpdate(wn);
  end;
  if (WindowState(wn)!=Rs_update and WindowState(wn)!=Rs_insert) then begin
    goto LAddORLineType;
  end;
  GetWindowRecord(wn,ORr);
  if (ORr.Closed==0 and ORr.OKFlag==0) then begin
    rownr = WindowActiveRow(wn);
//    DeselectWindow(wn,false);
    if (rownr==-1) then begin
      if (firstf) then begin
        rownr = 0;
      end else begin
        rownr = MatRowCnt(ORr);
      end;
    end else begin
      rownr = rownr;
    end;
    rwcnt = MatRowCnt(ORr);
    for (i=rownr;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw)
      if (ORrw.Shipd1!=0) or (ORrw.Shipd2!=0) or (ORrw.Invd!=0) then begin
        deliveredf = true;
        i = rwcnt;
      end;
    end;   
    if (deliveredf) then begin
      MessageBox(1304,"");
    end else begin
      MatRowGet(ORr,rownr,ORrw)
      ClearRow(ORr,ORrw,t);
      ORrw.Spec = "";
      MatRowInsert(ORr,rownr,ORrw);
      PutWindowRecord(wn,ORr);
      switch (t) begin
        case 17:
          WindowFieldGoto(wn,ORr,rownr,"Spec",true);
      end;    
    end;
  end;
LAddORLineType:;  
  return;
end;

global
procedure ORAddHidLine()
BEGIN
  if (UserCanAction("HiddenLine",true)) then begin
    AddORLineType(kInvoiceRowTypeHidden,false)
  end;
  RETURN;
END;

global
procedure ORAddHeaderLine()
BEGIN
  AddORLineType(17,true)
  RETURN;
END;

global
updating procedure RetFromORsm()
BEGIN
  record ORVc ORr;
  record RetVc Retr;
  Integer wn,r,nwn;
  record OrdSettBlock OSb;
  record CostAccBlock CAb;
  record LocalMachineBlock LMb;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal and HasModIN) then begin
    BlockLoad(OSb);
    if (OSb.NoRetFromOR==0) then begin
      BlockLoad(CAb);
      BlockLoad(LMb);
      GetWindowRecord(wn,ORr);
      if (UserCanAction("ORToRet",true)) then begin
        r = 20100;
        if (CAb.RetCostPriceFromSH==0) then begin 
          if (CAb.RetFIFOQue!=0) then begin
            r = 20558;
          end else begin
            r = RecordAction_raPasteOrdInRet(Retr,LMb.DefReturnLocation,ORr.SerNr);
          end;
        end;
        switch (r) begin
          case 0:
            if (MatRowCnt(Retr)!=0) then begin
              nwn = OpenWindow("RetDClass",1,0,"","",Retr);
            end else begin
              Beep;
            end;
          otherwise
            MessageBox(r,"");
        end;
      end else begin
        MessageBox(1274,StringFromStringSet(3,"ORToRet"));
      end;
    end else begin
      MessageBox(20100,"");
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

global
procedure ORInfoRnORDsm()
BEGIN
  record RcVc RepSpec;
  record ORVc ORr;

  GetWindowRecord(CurWindow,ORr);
  RepSpec.f1 = ORr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.critname = "ORInfoRClass";
  RepSpec.repname = "ORInfoRn";
  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure OrderReservORDsm()
BEGIN
  record RcVc RepSpec;
  record ORVc ORr;
  record UserVc Userr;
  Integer wn;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,ORr);
    GetCurUser(Userr);
    if (nonblank(Userr.ReservLocation)) then begin
      if (Userr.ReservLocation!=ORr.Location) then begin
        ORr.Location = Userr.ReservLocation;
        PutWindowRecord(wn,ORr);
        if (WindowDOOK(wn,0)) then begin
        end;
      end;
    end;
    RepSpec.f1 = ORr.SerNr;
    RepSpec.Media = mtScreen;
    RepSpec.repname = "ORReservRn";
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

/*
global
procedure ORInfoRnORLsm()
BEGIN
  record RcVc RepSpec;
  record ORVc ORr;

  GetWindowRecord(CurWindow,ORr);
  RepSpec.f1 = ORr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ORInfoRn";
  RunReport(RepSpec,0);
  RETURN;
END;
*/
global
procedure Or2FormORDsm()
BEGIN
  record ORVc ORr;
  Boolean tmpf;

  if (WindowState(CurWindow)!=1) then begin
    GetWindowRecord(CurWindow,ORr);
    tmpf = PrintDocument(ORr,"Or2Form",false);
  end;
  RETURN;
END;

global
function Boolean ORDClassSwitchRow(Integer wn,Integer rownr)
begin        
  record ORVc ORr;  
  row ORVc ORrw; 
  row ORVc OR2rw; 
  Integer i,rwcnt;
  Boolean res;
  val t,tproc,unitprdisc,s,rowsum;
  string 255 recepy,location;
  record TaxMatrixVc TMr;

  res = true;
  GetWindowRecord(wn,ORr);
  rwcnt = MatRowCnt(ORr);  
  if ((rownr<rwcnt) and (rownr>=0)) then begin
    location = ORr.Location;
    MatRowGet(ORr,rownr,ORrw);
    switch (ORrw.stp) begin
      case kInvoiceRowTypeNormal:
        t = ORrw.rowGP;
        s = MulRateToBase1(ORr.CurncyCode,ORrw.Sum,ORr.FrRate,ORr.ToRateB1,ORr.ToRateB2,ORr.BaseRate1,ORr.BaseRate2,DefaultCurRoundOff);
        UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
        FindSalesExVat(TMr,ORrw.VATCode,s,ORr.InclVAT,ORr.NoTAXonVAT,rowsum);
        unitprdisc = ORrw.Sum/ORrw.Quant;
        unitprdisc = Round(unitprdisc,DefaultRoundMode);
        recepy = ORrw.Recepy;
 //  extra call, but neccesary, if Item Status is on screen      
      case kInvoiceRowTypeStructuredItemComponent:
        t = ORrw.rowGP;
    end;
    if (nonblank(ORrw.Location)) then begin
      location = ORrw.Location;
    end;
    for (i=rownr+1;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,OR2rw);
      switch (OR2rw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          if (OR2rw.MotherArtCode==ORrw.ArtCode) then begin
            t = t + OR2rw.rowGP;
          end;
        otherwise
          i = rwcnt;
      end;
    end;    
    CalcProc(rowsum,t,tproc);
    SendArtStat(ORrw.ArtCode,location,recepy,t,tproc,unitprdisc,ORr.OrdDate,1);
  end;
LORDClassSwitchRow:;  
  SetWindowNameArg(wn,ORrw.ArtCode & ":" & location);
  ORDClassSwitchRow = res;  
  return;
end;

global
procedure ItemStatusORDsm()
BEGIN
  record RcVc RepSpec;
  Boolean testf;
  Integer nwn,wn;

  wn = CurWindow;
  nwn = OpenArtStat(wn,RepSpec,true);
  RepSpec.UsedOnly = 1;
  PutWindowRecord(nwn,RepSpec);
  testf = ORDClassSwitchRow(wn,WindowActiveRow(wn));
  RETURN;
END;
      
global 
procedure UpdatePricesORDsm()
begin
  Integer wn;
  record ORVc ORr;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,ORr);
  ORDUpdatePrices(ORr,WindowState(wn)==2);
  PutWindowRecord(wn,ORr);  
  return;
end;

global
updating procedure StockMovFromORDsm()
BEGIN
  record ORVc ORr;
  record StockMovVc StockMovr;
  Integer wn,r,nwn;

  wn = CurWindow;
  DeselectWindow(wn,false);
  if (WindowState(wn)==Rs_normal and HasModIN) then begin
    GetWindowRecord(wn,ORr);
    if (UserCanAction("ORToStockMov",true)) then begin
      r = RecordAction_raPasteOrdInStockMov(StockMovr,ORr.SerNr);
      if (r==1) then begin
        if (MatRowCnt(StockMovr)!=0) then begin
          nwn = OpenWindow("StockMovDClass",1,0,"","",StockMovr);
        end else begin
          Beep;
        end;
      end else begin
        if (r!=-1) then begin 
          MessageBox(r,"");
        end;
      end;
    end else begin
      MessageBox(1274,StringFromStringSet(3,"ORToStockMov"));
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

procedure ORDClassSpecPasteNameObjects(Integer wn,var string psname)
begin
  record ORVc ORr;
  row ORVc ORrw;
  Integer rownr;
  string 200 typ;

  GetWindowRecord(wn,ORr);
  rownr = WindowActiveRow(wn);
  typ="";
  if (rownr>=0) then begin
    MatRowGet(ORr,rownr,ORrw);
    FindOTforAcc(ORrw.SalesAcc,typ);
  end else begin
    FindOTforAcc("",typ);
  end;
  if (nonblank(typ)) then begin
    psname = "TRObjSClass";
  end else begin    
    psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  end;
  RETURN;
END;

procedure ORDClassSpecPasteNameArtCode(Integer wn,var string psname)
begin
  record ORVc ORr;
  Integer rownr;

  GetWindowRecord(wn,ORr);
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,false); 
  WindowFieldGoto(wn,ORr,rownr,"ArtCode",false);
  return;
end;

procedure ORDClassSpecPasteNamePlanShip(Integer wn,var string psname)
begin
  record PlanDeliveryBlock PDb;
    
  BlockLoad(PDb);
  switch (PDb.FieldType) begin
    case 2: psname = "";
    case 3: psname = "";
  end;
  return;
end;

global
function string 40 ORDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;

  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "DelAddrCode": psname = DelAddrSClassSpecPName(defpsname);
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "Objects": ORDClassSpecPasteNameObjects(wn,psname);
    case "ArtCode": ORDClassSpecPasteNameArtCode(wn,psname);
    case "PlanShip": ORDClassSpecPasteNamePlanShip(wn,psname);
  end;
  ORDClassSpecPasteName = psname;
  return;
end;

global
function Boolean ORDClassExportFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
//vat zone should be as it is on customer card
//otherwise u can paste customer  , filled all, change vat zone and get crap
  res = false;
  ORDClassExportFlagButtonAction = res;
  RETURN;
END;

global
function Boolean ORDClassReservedButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record ORVc ORr;

  res = true;
  GetWindowRecord(wn,ORr);
  if (ORr.OKFlag!=0) then begin
    res = false;
  end;
  if (UserCanAction("ChangeReserved",true)==false) then begin
    res = false;
  end;  
  ORDClassReservedButtonAction = res;
  RETURN;
END;

global
function Boolean ORDClassOKFlagButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record ORVc ORr;
  record ORVc prevORr;
  Integer err;
 
  res = true;
  GetWindowRecord(wn,ORr);
  err = ORTestApprovalStatus(ORr);
  if (err!=0) then begin
    MessageBox(err,"");
    res = false;
    goto LORDClassOKFlagButtonAction;
  end;
  if (WindowState(wn)==Rs_normal) then begin
    if (ORr.Closed!=0) then begin
      res = false;
    end;
    if (ORr.OKFlag!=0) then begin
      res = false;
      if (HasLocalization("PRT")==false) then begin
        if (UserCanAction("UnOKOR",false) or UserCanAction("UnOKAll",false)) then begin
          res = true;
        end;
      end;
    end;
  end;  
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,prevORr);
    if (prevORr.Closed!=0) then begin
      res = false;
    end;
    if (ORr.OKFlag!=0) then begin
      res = false;
      if (HasLocalization("PRT")==false) then begin
        if (UserCanAction("UnOKOR",false) or UserCanAction("UnOKAll",false)) then begin
          res = true;
        end; 
      end;
    end;
  end;  
  if (UserCanAction("OROK",true)==false) then begin
    res = false;
    MessageBox(1274,StringFromStringSet(3,"OROK"));
  end;  
LORDClassOKFlagButtonAction:;  
  ORDClassOKFlagButtonAction = res;
  RETURN;
END;

global
function Boolean ORDClassClosedButtonAction(Integer wn,Integer value)
BEGIN
  Boolean res;
  record ORVc ORr;
  Integer normalmode,updatemode;
 
  res = true;
  if (UserCanAction("DisallowORClose",false)) then begin
    res = false;
  end;
  ORDClassClosedButtonAction = res;
  RETURN;
END;

global
updating procedure OKORLsm()
BEGIN
  record ORVc ORr;
  Integer i;
  Integer wn;
  
  if (UserCanAction("OROK",true)) then begin
    wn = CurWindow;
    i = 1;
    while (GetRecordFromBrowse(ORr,wn,i)) begin
//      if (RecordAction_rlORLOK(ORr)) then begin
//      end;
      i = i + 1;
    end;
    UpdateBrowses("ORVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"OROK"));
  end;
  RETURN;
END;

global
procedure SubtotalORDsm()
BEGIN
  record ORVc ORr;
  row ORVc ORrw;
  Integer wn,i,rwcnt,rownr;
  val pt;
  Boolean deliveredf;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    DoUpdate(wn);
  end;
  if (WindowState(wn)!=Rs_update and WindowState(wn)!=Rs_insert) then begin
    goto LSubtotalORDsm;
  end;
  GetWindowRecord(wn,ORr);
  if (ORr.OKFlag==0) then begin
    rownr = WindowActiveRow(wn);
    rwcnt = MatRowCnt(ORr);
//    DeselectWindow(wn,false);
    if ((rownr==-1) or (rownr>rwcnt)) then begin
      rownr = rwcnt;
    end;
    rwcnt = MatRowCnt(ORr);
    for (i=rownr;i<rwcnt;i=i+1) begin
      MatRowGet(ORr,i,ORrw)
      if (ORrw.Shipd1!=0) or (ORrw.Shipd2!=0) or (ORrw.Invd!=0) then begin
        deliveredf = true;
        i = rwcnt;
      end;
    end;   
    if (deliveredf) then begin
      MessageBox(1304,"");
    end else begin    
      ClearRow(ORr,ORrw,9);
      MatRowInsert(ORr,rownr,ORrw);
      RecalcORSubtotal(ORr);
      PutWindowRecord(wn,ORr);
    end;
  end;
LSubtotalORDsm:;  
  RETURN;
END; 

global
updating procedure CreatePRFromORDsm()
begin
  Integer wn,nwn;
  record ORVc ORr;
  record PRVc PRr;
  Integer err;
  Boolean cancelf;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_normal and HasModTS) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,ORr);  
    PutWindowRecord(wn,ORr);
    if (ORr.Closed==0) then begin
      err = CreatePRFromORD(ORr,PRr);
      if (err==0) then begin
        PutWindowRecord(wn,ORr);  
        if (WindowDoOK(wn,0)) then begin
          nwn = OpenWindow("PRDClass",1,0,"","",PRr);
          UpdateBrowses("PRVc");
          CloseWindow(wn);
        end else begin
          cancelf = true;
          RecordDelete(PRr);
        end;
      end else begin
        cancelf = true;
        MessageBox(err,"");
      end;
    end else begin
      cancelf = true;
    end;
  end;
  if (cancelf) then begin
    WindowDoCancel(wn);
  end;
  return;
end;

global 
procedure CreateTBBUFromORDsm()
begin
  Integer wn,nwn,err;
  record ORVc ORr;
  record TBBUVc TBBUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,ORr);  
  if (nonblank(ORr.PRCode) and HasModTS) then begin
    if (ORr.Closed==0) then begin
      err = CreateTBBUFromORD(ORr,TBBUr);
      if (err==0) then begin
        nwn = OpenWindow("TBBUDClass",1,0,"","",TBBUr);
      end else begin
        MessageBox(err,"");
      end;
    end else begin
      Beep;
    end;
  end;  
  return;
end;

global
procedure RecalcORSubtotal(var record ORVc ORr)
begin
  row ORVc ORrw;
  Integer i,rwcnt;
  val st;
  
  rwcnt = MatRowCnt(ORr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(ORr,i,ORrw);
    if (ORrw.stp!=9) then begin
      st = st + ORrw.Sum;
    end else begin
      ORrw.Sum = st;
      st = blankval;
      MatRowPut(ORr,i,ORrw);
    end;
  end;
  
  return;
end;

global
updating procedure ORSendforAcceptanceORDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record ORVc ORr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,ORr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LORSendforAcceptanceORDsm;
    end;
    GetWindowRecord(wn,ORr);
  end;
  ORr.AcceptanceBy = acceptanceby;
  ORr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_ORVc(ORr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(ORr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LORSendforAcceptanceORDsm:;  
  return;
end;

global
updating procedure ORSendforAcceptanceORDsm()
begin
  ORSendforAcceptanceORDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure ORCancelApprovalRequest(Integer wn)
begin
  record ORVc ORr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,ORr);
  err = CancelApprovalRequest("ORVc",ORr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LORCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LORCancelApprovalRequest:;
  return;
end;

global
procedure OpenVatMatrixORDsm()
begin
  record TaxMatrixVc TMr;
  record ORVc ORr;
  row ORVc ORrw;
  longint nwn,wn,rowno;
  
  wn = CurWindow;
  GetWindowRecord(wn,ORr);
  rowno = WindowActiveRow(wn);
  
  if (rowno>=0) then begin
    MatRowGet(ORr,rowno,ORrw);
    UnpackRowFieldMatrix(ORrw,"TaxMatrix",TMr);
  end else begin
    UnpackFieldMatrix(ORr,"TaxMatrix",TMr);
  end;
  
  nwn = OpenWindow("TaxMatrixVClass",0,wn,"","",TMr);
  PutWindowString(nwn,"TaxMatrixActiveRow",rowno);
  
  PutWindowRecord(nwn,TMr);
  PutWindowPrevRecord(nwn,TMr);
  SetWindowState(nwn,Rs_normal);
  
  return;
end;

global
updating procedure SignORDsm()
begin
  record RcVc RepSpec;
  Integer nwn,wn;
  record ORVc ORr;
  
  wn = CurWindow;
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,ORr);
    RepSpec.vals0 = ORr.Sum4;
    nwn = OpenWindow("SignatureWClass",1,wn,"","",RepSpec);
    PutWindowRecord(nwn,RepSpec); //Shouldn't be needed?
  end else begin
    Beep;
  end;
end;

global
updating procedure RemoveSignORDsm()
begin
  record RLinkVc RLinkr;
  record Attach2Vc Attach2r;
  record ORVc ORr;
  Integer wn,i;

  wn = CurWindow;
  GetWindowRecord(wn,ORr);
  while (ReadRecordLink(ORr,i,Attach2r,RLinkr)) begin
    if ((Attach2r.FileName=="signature.png") and (Attach2r.Uploading==0)) then begin
      RecordDelete(Attach2r);
    end;
  end;
end;

global
procedure MgrsDiscOverrideORDsm()
begin
  Integer wn;
  Integer rownr;
  record RcVc RepSpec;
  record ORVc ORr;
  row ORVc ORrw;
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    GetWindowRecord(wn,ORr);
    MatRowGet(ORr,rownr,ORrw);
    RepSpec.f1 = ORrw.ArtCode;
    RepSpec.AccStr = "";
    RepSpec.FirstAcc = "";
    RepSpec.long1 = WindowActiveRow(wn);
    OpenWindow("MgrsDiscOverrideOClass",0,wn,"","",RepSpec);
  end else begin
    MessageBox(0,USetStr(22057));
  end;
end;

/*
global
updating procedure PlannedPaymentORDsm()
begin
  Integer wn;
  record ORVc ORr;

  wn = CurWindow;
  GetWindowRecord(wn,ORr);
  ORCreatePlannedPayment(ORr);
  return;
end;
*/

global
procedure AddCustomerORDsm()
begin
  record CUVc CUr;
  record ORVc ORr;
  Integer wn,nwn;
  
  RecordNew(CUr);
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,ORr);
  nwn = OpenWindow("CUDClass",0,CurWindow,"","",CUr);
  PutWindowString(nwn,"OperationMenuAction","AddContact");
  DeselectWindow(nwn,true);
  CUr.PayDeal = ORr.PayDeal;
  CUr.Name = ORr.Addr0;
  CUr.InvAddr0 = ORr.Addr1;
  CUr.InvAddr1 = ORr.Addr2;
  CUr.InvAddr2 = ORr.Addr3;
  CUr.InvAddr3 = ORr.InvAddr3;
  CUr.InvAddr4 = ORr.InvAddr4;
  if (blank(CUr.Code)) then begin
    GetNextCustNr(CUr.Code);
  end;
  PutWindowRecord(nwn,CUr);
  return;
end;

global
procedure AddItemORDsm()
begin
  record INVc INr;
  record ORVc ORr;
  row ORVc ORrw;
  Integer wn,nwn,rownr;
  
  RecordNew(INr);
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,true);
  GetWindowRecord(wn,ORr);
  nwn = OpenWindow("INDClass",0,CurWindow,"","",INr);
  DeselectWindow(nwn,true);
  PutWindowString(nwn,"OperationMenuAction","AddItem");
  if (rownr>=0) then begin
    MatRowGet(ORr,rownr,ORrw);
    INr.Code = ORrw.ArtCode;
    INr.Name = ORrw.Spec;
    INr.SalesAcc = ORrw.SalesAcc;
    INr.VATCode = ORrw.VATCode;
    INr.TaxTemplateCode = ORrw.TaxTemplateCode;
    INr.UPrice1 = ORrw.Price;
    INr.InPrice = ORrw.BasePrice;
  end;
  if (blank(INr.Code)) then begin
    GetNextItemNr(INr.Code);
  end;
  PutWindowRecord(nwn,INr);
  return;
end;

global
function Boolean ORDClassOnOpenWindow(Integer wn)
begin
  record ORVc ORr;
  Integer AcceptanceStatusFlag;
  
  GetWindowRecord(wn,ORr);
  ORDClassOnOpenWindowRemote(ORr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  ORDClassOnOpenWindow = false;
  return;
end;

global
procedure ORDClassOnWindowRecordChange(Integer wn)
begin
  record ORVc ORr;
  Integer AcceptanceStatusFlag;

  GetWindowRecord(wn,ORr);
  ORDClassOnOpenWindowRemote(ORr,AcceptanceStatusFlag);
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,AcceptanceStatusFlag));  
  return;
end;
