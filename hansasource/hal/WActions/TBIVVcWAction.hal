external function roundmode SetRoundModeD(Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external procedure CalcExtra(val,string,var val);
external procedure CalcSum(val,val,val,val,var val,Integer);

global
function val CalculateTBIVCostPriceSum(record TBIVVc TBIVr)
begin
  val res;
    
  res = Round(TBIVr.CostPrice*TBIVr.Qty,SetRoundModeD(2));
  CalculateTBIVCostPriceSum = res;
  return;
end;

global
function val CalculateTBIVCostPriceInCurSum(record TBIVVc TBIVr)
begin
  val res;
    
  res = TBIVr.CostPriceInCur*TBIVr.Qty;
  CalculateTBIVCostPriceInCurSum = res;
  return;
end;

global
procedure OpenSplitTBIV()
BEGIN
  Integer wn,nwn;
  Integer normalmode;
  record RcVc RepSpec;
  record TBIVVc TBIVr;//RcType
  
  normalmode = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalmode)then begin
    GetWindowRecord(wn,TBIVr);
    if (TBIVr.Invoice<=0) then begin
      RepSpec.long1 = -1;
      nwn = OpenWindow("SpliTBIVVClass",0,0,"","",RepSpec);
      DeselectWindow(nwn,false);
      GetWindowRecord(nwn,RepSpec);
      ReportDefaults(RepSpec,"SpliTBIVVClass");
      RepSpec.long1 = -1;
      RepSpec.FirstAcc = TBIVr.PRCode;
      RepSpec.UsedOnly = TBIVr.oVc;
      RepSpec.FirstVer = TBIVr.SerNr;
      RepSpec.SimVerf = TBIVr.Row;
      RepSpec.AccStr = TBIVr.ArtCode;
      RepSpec.TransStr = TBIVr.EMCode;
      RepSpec.LastVer = TBIVr.ChildNr;
      RepSpec.repname = "SplitTBIVMn";
      PutWindowRecord(nwn,RepSpec);
    end;  
//    WindowFieldGoto(nwn,RepSpec,-1,"long1",true);
  end;
  RETURN;
END;


procedure OpenVcFromTBIV(Integer oVc,LongInt sernr)
BEGIN
  Integer nwn;
  record TSVc TSr;
  record VIVc VIr;
  record ExpVc Expr;
  record SHVc SHr;
  record ActVc Actr;
  record RetVc Retr;
  record SDVc SDr;

  if (UserCanAction("OpenVcFromTBIV",true)) then begin
    switch (oVc) begin
      case 1:
        TSr.SerNr = sernr;
        if (ReadFirstMain(TSr,1,true)) then begin
          nwn = OpenWindow("TSDClass",1,0,"","",TSr);
        end;        
      case 2:
        VIr.SerNr = sernr;
        if (ReadFirstMain(VIr,1,true)) then begin
          nwn = OpenWindow("VIDClass",1,0,"","",VIr);
        end;        
      case 3:
        Expr.SerNr = sernr;
        if (ReadFirstMain(Expr,1,true)) then begin
          nwn = OpenWindow("ExpDClass",1,0,"","",Expr);
        end;        
      case 4:
        SHr.SerNr = sernr;
        if (ReadFirstMain(SHr,1,true)) then begin
          nwn = OpenWindow("SHDClass",1,0,"","",SHr);
        end;        
      case 5:
        Actr.SerNr = sernr;
        if (ReadFirstMain(Actr,1,true)) then begin
          nwn = OpenWindow("ActDClass",1,0,"","",Actr);
        end;        
      case 6:
        Retr.SerNr = sernr;
        if (ReadFirstMain(Retr,1,true)) then begin
          nwn = OpenWindow("RetDClass",1,0,"","",Retr);
        end;        
      case 7:
        SDr.SerNr = sernr;
        if (ReadFirstMain(SDr,1,true)) then begin
          nwn = OpenWindow("SDDClass",1,0,"","",SDr);
        end;        
    end;
  end;
  RETURN;
END;

global
procedure OpenRegisterFromTBIVDsm()
BEGIN
  record TBIVVc TBIVr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,TBIVr);
  OpenVcFromTBIV(TBIVr.oVc,TBIVr.SerNr);
  RETURN;
END;

global
function Boolean TBIVDClassoVcButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  TBIVDClassoVcButtonAction = res;
  return;
end;

global
function Boolean TBIVDClassItemTypeButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  TBIVDClassItemTypeButtonAction = res;
  return;
end;

global
function Boolean TBIVDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record TBIVVc TBIVr;
 
  res = true;
  GetWindowRecord(wn,TBIVr);
  switch (fieldname) begin
    case "PRCode": res = false;
    case "SerNr": res = false;
    case "EMCode": res = false;
    case "ArtCode": res = false;
    case "TransDate": res = false;
    case "Qty": res = false;
    case "GP": res = false;
    case "InvQty": if (TBIVr.Invoice>0) then begin res = false; end;
    case "Price": if (TBIVr.Invoice>0) then begin res = false; end;
    case "Markup": if (TBIVr.Invoice>0) then begin res = false; end;
    case "Sum": if (TBIVr.Invoice>0) then begin res = false; end;
    case "CostPrice": if (TBIVr.Invoice>0) then begin res = false; end;

    case "GPInCur": res = false;
    case "PriceInCur": if (TBIVr.Invoice>0) then begin res = false; end;
    case "MarkupInCur": if (TBIVr.Invoice>0) then begin res = false; end;
    case "SumInCur": if (TBIVr.Invoice>0) then begin res = false; end;
    case "CostPriceInCur": if (TBIVr.Invoice>0) then begin res = false; end;
  end;
  TBIVDClassActiveEditField = res;
  RETURN;
END;

procedure TBIVSumup(var record TBIVVc TBIVp)
BEGIN
  TBIVp.GP = TBIVp.Sum - TBIVp.CostPrice*TBIVp.Qty;
  TBIVp.GPInCur = TBIVp.SumInCur - TBIVp.CostPriceInCur*TBIVp.Qty;
  RETURN;
END;

procedure TBIVCalcSum(var record TBIVVc TBIVp)
BEGIN
  val t;
  record GeneralOptionBlock GenOptr;
  
  CalcSum(TBIVp.InvQty,TBIVp.Price,0,TBIVp.Discount,t,GenOptr.UseDiscount);
  TBIVp.Sum = t;
  CalcExtra(TBIVp.Sum,TBIVp.Markup,t);
  TBIVp.Sum = TBIVp.Sum + t;

  CalcSum(TBIVp.InvQty,TBIVp.PriceInCur,0,TBIVp.Discount,t,GenOptr.UseDiscount);
  TBIVp.SumInCur = t;
  if (blank(TBIVp.SumInCur)==false) then begin
    CalcExtra(TBIVp.SumInCur,TBIVp.MarkupInCur,t);
    TBIVp.SumInCur = TBIVp.SumInCur + t;
  end;
  if (TBIVp.SumInCur==0) then begin TBIVp.SumInCur = blankval; end;
  RETURN;
END;

function Boolean TBIVDClassInvQtyEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    TBIVCalcSum(TBIVr);
    TBIVSumup(TBIVr);
    PutWindowString(wn,"CostPriceSum",CalculateTBIVCostPriceSum(TBIVr));
    PutWindowString(wn,"CostPriceInCurSum",CalculateTBIVCostPriceInCurSum(TBIVr));
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassInvQtyEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassMarkupEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  val t;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    if (nonblank(TBIVr.CurncyCode)) and (blank(TBIVr.MarkupInCur)==false) then begin
      if (Mid(TBIVr.Markup,len(TBIVr.Markup)-1,1)=="%") then begin    
        TBIVr.MarkupInCur = TBIVr.Markup;
      end else begin
        t = StringToVal(TBIVr.Markup,M45Val);      
        TBIVr.MarkupInCur = DivRateToBase1(TBIVr.CurncyCode,t,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
      end;
    end;
    TBIVCalcSum(TBIVr);
    TBIVSumup(TBIVr);
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassMarkupEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassMarkupInCurEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  val t;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    if (nonblank(TBIVr.CurncyCode)) then begin
      if (Mid(TBIVr.MarkupInCur,len(TBIVr.MarkupInCur)-1,1)=="%") then begin    
        TBIVr.Markup = TBIVr.MarkupInCur;
      end else begin
        t = StringToVal(TBIVr.MarkupInCur,M45Val);      
        TBIVr.Markup = MulRateToBase1(TBIVr.CurncyCode,t,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
      end;
    end;
    TBIVCalcSum(TBIVr);
    TBIVSumup(TBIVr);
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassMarkupInCurEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassPriceEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    if (nonblank(TBIVr.CurncyCode)) then begin
      TBIVr.PriceInCur = DivRateToBase1(TBIVr.CurncyCode,TBIVr.Price,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
    end;
    TBIVCalcSum(TBIVr);
    TBIVSumup(TBIVr);
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassPriceEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassPriceInCurEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    if (nonblank(TBIVr.CurncyCode)) then begin
      TBIVr.Price = MulRateToBase1(TBIVr.CurncyCode,TBIVr.PriceInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
    end;
    TBIVCalcSum(TBIVr);
    TBIVSumup(TBIVr);
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassPriceInCurEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassDiscountEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    TBIVCalcSum(TBIVr);
    TBIVSumup(TBIVr);
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassDiscountEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassSumEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  record GeneralOptionBlock GenOptr;
  val t;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);  
    CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,GenOptr.UseDiscount);
    t = TBIVr.Sum - t;
    TBIVr.Markup = t;

    if (nonblank(TBIVr.CurncyCode)) then begin
      TBIVr.SumInCur = DivRateToBase1(TBIVr.CurncyCode,TBIVr.Sum,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
      CalcSum(TBIVr.InvQty,TBIVr.PriceInCur,0,TBIVr.Discount,t,GenOptr.UseDiscount);
      t = TBIVr.SumInCur - t;
      TBIVr.MarkupInCur = t;
    end;

    TBIVSumup(TBIVr);
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassSumEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassSumInCurEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  record GeneralOptionBlock GenOptr;
  val t;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);  
    if (nonblank(TBIVr.CurncyCode)) then begin
      TBIVr.Sum = MulRateToBase1(TBIVr.CurncyCode,TBIVr.SumInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
      CalcSum(TBIVr.InvQty,TBIVr.PriceInCur,0,TBIVr.Discount,t,GenOptr.UseDiscount);
      t = TBIVr.SumInCur - t;
      TBIVr.MarkupInCur = t;
    end;

    CalcSum(TBIVr.InvQty,TBIVr.Price,0,TBIVr.Discount,t,GenOptr.UseDiscount);
    t = TBIVr.Sum - t;
    TBIVr.Markup = t;

    TBIVSumup(TBIVr);
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassSumInCurEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassCostPriceEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    if (nonblank(TBIVr.CurncyCode)) then begin
      TBIVr.CostPriceInCur = DivRateToBase1(TBIVr.CurncyCode,TBIVr.CostPrice,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
    end;
    TBIVSumup(TBIVr);
    PutWindowString(wn,"CostPriceSum",CalculateTBIVCostPriceSum(TBIVr));
    PutWindowString(wn,"CostPriceInCurSum",CalculateTBIVCostPriceInCurSum(TBIVr));
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassCostPriceEFAfter = true;
  RETURN;
END;

function Boolean TBIVDClassCostPriceInCurEFAfter(Integer wn,Integer changed)
BEGIN
  record TBIVVc TBIVr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,TBIVr);
    DeselectWindow(wn,false);
    if (nonblank(TBIVr.CurncyCode)) then begin
      TBIVr.CostPrice = MulRateToBase1(TBIVr.CurncyCode,TBIVr.CostPriceInCur,TBIVr.FrRate,TBIVr.ToRateB1,TBIVr.ToRateB2,TBIVr.BaseRate1,TBIVr.BaseRate2,DefaultCurRoundOff);
    end;
    TBIVSumup(TBIVr);
    PutWindowString(wn,"CostPriceSum",CalculateTBIVCostPriceSum(TBIVr));
    PutWindowString(wn,"CostPriceInCurSum",CalculateTBIVCostPriceInCurSum(TBIVr));
    PutWindowRecord(wn,TBIVr);
  end;
  TBIVDClassCostPriceInCurEFAfter = true;
  RETURN;
END;

global
function Boolean TBIVDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "InvQty": res = TBIVDClassInvQtyEFAfter(wn,changed);
    case "Markup": res = TBIVDClassMarkupEFAfter(wn,changed);
    case "Price": res = TBIVDClassPriceEFAfter(wn,changed);
    case "Discount": res = TBIVDClassDiscountEFAfter(wn,changed);
    case "Sum": res = TBIVDClassSumEFAfter(wn,changed);
    case "CostPrice": res = TBIVDClassCostPriceEFAfter(wn,changed);

    case "MarkupInCur": res = TBIVDClassMarkupInCurEFAfter(wn,changed);
    case "PriceInCur": res = TBIVDClassPriceInCurEFAfter(wn,changed);
    case "SumInCur": res = TBIVDClassSumInCurEFAfter(wn,changed);
    case "CostPriceInCur": res = TBIVDClassCostPriceInCurEFAfter(wn,changed);
  end;
  TBIVDClassAfterEditField = res;
  RETURN;
END;

global
function Boolean TBIVDClassOnOpenWindow(Integer wn)
begin
  record TBIVVc TBIVr;
  
  if (WindowState(wn)!=Rs_insert) then begin
    GetWindowRecord(wn,TBIVr);    
    PutWindowString(wn,"CostPriceSum",CalculateTBIVCostPriceSum(TBIVr));
    PutWindowString(wn,"CostPriceInCurSum",CalculateTBIVCostPriceInCurSum(TBIVr));
  end;
  TBIVDClassOnOpenWindow = false;
  return;
end;

global
procedure TBIVDClassOnWindowRecordChange(Integer wn)
begin
  record TBIVVc TBIVr;
  
  GetWindowRecord(wn,TBIVr);    
  PutWindowString(wn,"CostPriceSum",CalculateTBIVCostPriceSum(TBIVr));
  PutWindowString(wn,"CostPriceInCurSum",CalculateTBIVCostPriceInCurSum(TBIVr));
  return;
end;
