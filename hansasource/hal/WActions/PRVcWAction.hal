external function string 40 ObjSClassPasteSpecialWindowClass(string);
external procedure ActVcRecordDefClient(var record ActVc);
remote function Boolean UserHasLimitedAccess(var string,var string);
remote function Integer PastePRInTBBU(record PRVc,var record TBBUVc);
remote updating procedure PasteTBBUInIV(var record TBBUVc);
remote function Boolean QTVc_PastePRCode(var record QTVc,string,var string);
remote procedure PRVc_PasteValStr(var record PRVc,Integer);
remote procedure PRVc_PasteContact(var record PRVc);
remote procedure PRVc_PasteCustCode(var record PRVc,var string);
remote procedure PRVc_PastePrSalesMan(var record PRVc,string);
remote procedure PRVc_PasteLeader(var record PRVc);
remote procedure PRVc_PastePRClass(string,var record PRVc);
remote procedure PRScheduleVc_PastePRCode(var record PRScheduleVc);
remote updating function Boolean MakeActFromPR(record PRVc,var record ActVc);
remote updating function Integer RecordAction_raProDownPay(record RcVc,var record IVVc,var record PRVc);
external procedure RecordActionPR_Print(var record PRVc,string);
external function Boolean PasteCustInQT(var record QTVc,string,string,var string,Boolean);
remote procedure PRVc_PasteLeader2(var record PRVc);
remote procedure PRVc_PasteLeader3(var record PRVc);
remote procedure PRVc_PasteLeader4(var record PRVc);
remote procedure PRVc_PasteLeader5(var record PRVc);
external procedure FindOTforPRClass(string,var string);
external procedure FindClTypeforPRClass(string,var string);
external function Boolean CheckProjectManager(record PRVc);


procedure PastePRInQT(record PRVc PRr)
BEGIN
  record QTVc QTr;
  string 255 warntext;
  Integer wn;
  record ProjectBlock ProjectRec;

  RecordNew(QTr);
  QTr.PRCode = PRr.Code;
  if (QTVc_PastePRCode(QTr,"",warntext)) then begin end;
  wn = OpenWindow("QTDClass",1,0,"","",QTr);
  RETURN;
END;

global
procedure DoQTFromPRD()
BEGIN
  record PRVc PRr;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,PRr);
  if (true) then begin
    PastePRInQT(PRr);
  end;  
  return;
end;

global
procedure CreateObjPRDsm()
begin
  record ObjVc Objr;
  record PRVc PRr;
  Integer wn,nwn;

  wn = CurWindow;
  GetWindowRecord(wn,PRr);
  DeselectWindow(wn,false);
  Objr.Code = PRr.Code;
  Objr.Comment = PRr.Name;
  nwn = OpenWindow("ObjDClass",1,wn,"","",Objr);
  WindowFieldGoto(wn,PRr,-1,"Objects",true);
  return;
end;

global
updating procedure DoIVFromTBBUD()
begin
  record TBBUVc TBBUr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,TBBUr);
  if (true) then begin
    PasteTBBUInIV(TBBUr);
  end;  
  PutWindowRecord(wn,TBBUr);  
  return;
end;

global
updating procedure CreateActFromPRD()
begin
  record PRVc PRr;
  record ActVc Actr;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    GetWindowRecord(wn,PRr);
    RecordNew(Actr);
    ActVcRecordDefClient(Actr);
    if (MakeActFromPR(PRr,Actr)) then begin
      nwn = OpenWindow("ActDClass",1,0,"","",Actr);
      SetRLink(wn,true);  
    end;
  end;
  RETURN;
END;

global
updating procedure PRVcCreateActivity()
begin
  CreateActFromPRD;
  return;
end;

global
procedure DoTBBUFromPRD()
BEGIN
  record PRVc PRr;
  Integer wn,err;
  record TBBUVc TBBUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,PRr);
  DeselectWindow(wn,false);
  if (WindowState(wn)==0) then begin//Rs_normal
    err = PastePRInTBBU(PRr,TBBUr);
    switch (err) begin
      case 0:
        wn = OpenWindow("TBBUDClass",1,0,"","",TBBUr);      
      otherwise
        MessageBox(err,"");
    end;
  end;
  RETURN;
END;

global
procedure OpenTBBUPRD()
BEGIN
  record PRVc PRr;
  Integer wn,nwn;
  record TBBUVc TBBUr;
  
  wn = CurWindow;
  GetWindowRecord(wn,PRr);
  DeselectWindow(wn,false);  
  TBBUr.PRCode = PRr.Code;
  if (ReadFirstMain(TBBUr,1,true)) then begin
    nwn = OpenWindow("TBBUDClass",1,0,"","",TBBUr);
  end;
  RETURN;
END;

global
procedure OpenPRSchedulePRD()
BEGIN
  record PRVc PRr;
  Integer wn,nwn;
  record PRScheduleVc PRScheduler;
  
  wn = CurWindow;
  GetWindowRecord(wn,PRr);
  DeselectWindow(wn,false);  
  PRScheduler.PRCode = PRr.Code;
  if (ReadFirstMain(PRScheduler,1,true)) then begin
    nwn = OpenWindow("PRScheduleDClass",1,0,"","",PRScheduler);
  end;
  RETURN;
END;

global
updating procedure CreatePRScheduleFromPRD()
BEGIN
  record PRVc PRr;
  record PRScheduleVc PRScheduler;
  Integer wn,nwn;
  
  wn = CurWindow;
  if (WindowState(wn)==0) then begin//normal
    GetWindowRecord(wn,PRr);
    PRScheduler.PRCode = PRr.Code;
    PRScheduleVc_PastePRCode(PRScheduler);
    PRScheduler.TransDate = CurrentDate;
    nwn = OpenWindow("PRScheduleDClass",1,0,"","",PRScheduler);
  end;
  RETURN;
END;

global
procedure PrintPRL(Integer wn,Boolean previewf)
BEGIN
  record PRVc PRr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(PRr,wn,i)) begin
    RecordActionPR_Print(PRr,previewf);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
procedure ProInvPRD()
BEGIN
  Integer wn;
  record PRVc PRr;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,PRr);
  RepSpec.Media = mtScreen;
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[11] = 1;
  RepSpec.flags[12] = 1;
  RepSpec.flags[14] = 1;
  RepSpec.d1 = CurrentDate;
  RepSpec.repname = "ProInvRn";
  RepSpec.f1 = PRr.Code;
  RepSpec.flags[29] = 1;
  RunReport(RepSpec,0);
  RETURN;
END;

global
procedure ProStatRnPRD()
BEGIN
  Integer wn;
  record PRVc PRr;
  record RcVc RepSpec;
  string 255 tstr;

  wn = CurWindow;
  GetWindowRecord(wn,PRr);
  RepSpec.Media = mtScreen;
  RepSpec.repname = "ProStatRn";
  ReportDefaults(RepSpec,"ProStatRClass");  
  if (nonblankdate(PRr.StartDate)) then begin
    RepSpec.d1 = PRr.StartDate;
  end else begin
    RepSpec.d1 = RepSpec.sStartDate;
  end;
  RepSpec.f1 = PRr.Code;
  RepSpec.flags[5] = 1;
  RepSpec.flags[10] = 3;
  RepSpec.flags[17] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[6] = 1;
  RepSpec.flags[11] = 3;
  RepSpec.flags[19] = 1;
  RepSpec.flags[20] = 1;
  if (UserHasLimitedAccess(RepSpec.f2,tstr)) then begin
  end;

  RunReport(RepSpec,0);
  RETURN;
END;

global
updating procedure PRDownPayDsm()
BEGIN
  Integer wn,nwn;
  record PRVc PRr;
  record IVVc IVr;
  record RcVc RepSpec;
  Integer r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    GetWindowRecord(wn,PRr);
    r = RecordAction_raProDownPay(RepSpec,IVr,PRr);
    switch (r) begin
      case -1: Beep;
      case 0: nwn = OpenWindow("IVDClass",1,0,"","",IVr);
      otherwise MessageBox(r,"");
    end;
  end else begin
    Beep;
  end;

  RETURN;
END;

global
procedure PRInfoPRLsm()
BEGIN
  Integer wn;
  record PRVc PRr;
  record RcVc RepSpec;

  wn = CurWindow;
  if (ReadMarkedRecord(wn,PRr)) then begin
    RepSpec.Media = mtScreen;
    RepSpec.flags[1] = 1;
    RepSpec.flags[3] = 1;
    RepSpec.flags[4] = 1;
    RepSpec.flags[6] = 1;
    RepSpec.flags[11] = 1;
    RepSpec.flags[12] = 1;
    RepSpec.flags[14] = 1;
    RepSpec.d1 = CurrentDate;
    RepSpec.repname = "ProInvRn";
    RepSpec.f1 = PRr.Code;
    RepSpec.flags[29] = 1;
    RunReport(RepSpec,0);
  end;
  RETURN;
END;

global
function Boolean PRDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record PRVc PRr;
  row PRVc PRrw;
  
  res = true;
  if (rownr>=0) then begin
    GetWindowRecord(wn,PRr);
    MatRowGet(PRr,rownr,PRrw);
    switch (fieldname) begin
      case "PlanDate": if (PRrw.InvNr!=-1) then begin res = false; end;
      case "ValStr": if (PRrw.InvNr!=-1) then begin res = false; end;
      case "Person": if (PRrw.InvNr!=-1) then begin res = false; end;
      case "Comment": if (PRrw.InvNr!=-1) then begin res = false; end;
      case "InvFlag": if (PRrw.InvNr!=-1) then begin res = false; end;
    end;
  end;
LPRDClassActiveEditField:;  
  PRDClassActiveEditField = res;
  RETURN;
END;

function Boolean PRDClassPRClassEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PastePRClass(WindEFstr(wn),PRr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassPRClassEFAfter = res;
  RETURN;
END;

function Boolean PRDClassLeaderEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteLeader(PRr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassLeaderEFAfter = res;
  RETURN;
END;

function Boolean PRDClassPrSalesManEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PastePrSalesMan(PRr,WindEFstr(wn));
    PutWindowRecord(wn,PRr);
  end;
  PRDClassPrSalesManEFAfter = res;
  RETURN;
END;

function Boolean PRDClassCustCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;
  string 255 warning;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteCustCode(PRr,warning);
    if (nonblank(warning)) then begin
      MessageBox(0,warning);
    end;
    PutWindowRecord(wn,PRr);
  end;
  PRDClassCustCodeEFAfter = res;
  RETURN;
END;

function Boolean PRDClassContactEFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteContact(PRr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassContactEFAfter = res;
  RETURN;
END;

function Boolean PRDClassValStrEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteValStr(PRr,rownr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassValStrEFAfter = res;
  RETURN;
END;

function Boolean PRDClassLeader2EFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteLeader2(PRr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassLeader2EFAfter = res;
  return;
END;

function Boolean PRDClassLeader3EFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteLeader3(PRr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassLeader3EFAfter = res;
  return;
END;

function Boolean PRDClassLeader4EFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteLeader4(PRr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassLeader4EFAfter = res;
  return;
END;

function Boolean PRDClassLeader5EFAfter(Integer wn,Boolean changedf)
BEGIN
  Boolean res;
  record PRVc PRr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,PRr);
    PRVc_PasteLeader5(PRr);
    PutWindowRecord(wn,PRr);
  end;
  PRDClassLeader5EFAfter = res;
  return;
END;
global
function Boolean PRDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PRClass": res = PRDClassPRClassEFAfter(wn,changed!=0);
    case "Leader": res = PRDClassLeaderEFAfter(wn,changed!=0);
    case "PrSalesMan": res = PRDClassPrSalesManEFAfter(wn,changed!=0);
    case "CustCode": res = PRDClassCustCodeEFAfter(wn,changed!=0);
    case "Contact": res = PRDClassContactEFAfter(wn,changed!=0);
    case "ValStr": res = PRDClassValStrEFAfter(wn,rownr,changed!=0);
    case "Leader2": res = PRDClassLeader2EFAfter(wn,changed!=0);
    case "Leader3": res = PRDClassLeader3EFAfter(wn,changed!=0);
    case "Leader4": res = PRDClassLeader4EFAfter(wn,changed!=0);
    case "Leader5": res = PRDClassLeader5EFAfter(wn,changed!=0);
  end;
  PRDClassAfterEditField = res;
  RETURN;
END;

global 
function Boolean PRDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record PRVc PRr;
  row PRVc PRrw;

  GetWindowRecord(wn,PRr);
  MatRowGet(PRr,rownr,PRrw);
  if (PRrw.InvNr==-1) then begin res = true; end;
  PRDClassDeleteRowTest = res;
  RETURN;
END;

global 
function Boolean PRDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  PRDClassInsertRowTest = false;
  RETURN;
END;

global
function Boolean PRDClassTerminatedButtonAfter(Integer wn,Boolean changedf)
begin        
  record PRVc PRr;  
  record PRVc PR2r;
  Boolean res;
  Integer normalmode,updatemode;
  Date bd;

  DeselectWindow(wn,false);
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update

  GetWindowRecord(wn,PRr);
  if (WindowState(wn)==normalmode) then begin
    if (PRr.Terminated==1) then begin
      PRr.FinishedDate = CurrentDate;
    end else begin
      PRr.FinishedDate = bd;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,PR2r);
    if (PRr.Terminated==1) and (PR2r.Terminated!=1) then begin
      PRr.FinishedDate = CurrentDate;
    end else begin
      if (PR2r.Terminated!=1) then begin
        PRr.FinishedDate = bd;
      end;
    end;
  end;
  PutWindowRecord(wn,PRr);
  PRDClassTerminatedButtonAfter = res;  
  return;
end;

procedure PRDClassSpecPasteNameObjects(Integer wn,var string psname)
BEGIN
  record PRVc PRr;
  string 200 typ;

  psname = ObjSClassPasteSpecialWindowClass("ObjSClass");
  GetWindowRecord(wn,PRr);
  if (nonblank(PRr.PRClass)) then begin 
    FindOTforPRClass(PRr.PRClass,typ);
    if (nonblank(typ)) then begin
      psname = "TRObjSClass";
    end;     
  end;
  return;
END;

procedure PRDClassSpecPasteNamePRClassification(Integer wn,var string psname)
BEGIN
  record PRVc PRr;
  string 200 typ;

  psname = "PRClSClass";
  GetWindowRecord(wn,PRr);
  if (nonblank(PRr.PRClass)) then begin 
    FindClTypeforPRClass(PRr.PRClass,typ);
    if (nonblank(typ)) then begin
      psname = "AssPRClSClass";
    end;     
  end;
  return;
END;

global
function string 40 PRDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "Objects":PRDClassSpecPasteNameObjects(wn,psname);
    case "PRClassification":PRDClassSpecPasteNamePRClassification(wn,psname);
  end;
  PRDClassSpecPasteName = psname;
  return;
end;

global
procedure SearchPRLsm()
begin
  Integer wn,nwn;
  record RcVc RepSpec;
  
  wn = CurWindow;
  nwn = OpenWindow("SearchPRRClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  ReportDefaults(RepSpec,"SearchPRRClass");
  RepSpec.long1 = GetWindowSubset(wn);
  RepSpec.repname = "SearchPRVcRn";
  RepSpec.critname = "SearchPRRClass";
  RepSpec.Media = mtScreen;
  PutWindowRecord(nwn,RepSpec);  
  WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
  return;
end;

global
function Boolean PRDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record PRVc PRr;
  
  res = true;
  if (UserCanAction("DisallowPojectChangefornonPRMan",false)) then begin
    GetWindowRecord(wn,PRr);
    res = CheckProjectManager(PRr);
  end;
  PRDClassUpdateTest = res;
  return;
end;
