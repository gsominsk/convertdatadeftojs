remote procedure ResAvPasteTransDate(var record ResAvVc,Integer,Boolean);
remote procedure ResAvVc_PasteCurncyCode(var record ResAvVc,string);
external procedure ResAvSumup(var record ResAvVc);
remote procedure ResAvVc_PasteResCode(var record ResAvVc,Integer);
external function string 40 ResTypeSClassSpecPName(string);
remote procedure UpdateRow(Integer,var Record ResAvVc);
remote function Boolean PasteAgentOnResAv(var record ResAvVc,var string);
remote function Boolean PasteCustOnResAv(var record ResAvVc,var string);
remote procedure UpdateResAv(var record ResAvVc);
external procedure ResAvRowSumup(record ResAvVc,Integer);


global
function Boolean ResAvDClassSourceCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ResAvVc ResAvr;
  string 200 warn;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    if (PasteAgentOnResAv(ResAvr,warn)) then begin
      ResAvSumup(ResAvr);
      if (nonblank(warn)) then begin
        MessageBox(0,warn);
      end;  
    end;
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassSourceCodeEFAfter = res;
  RETURN;
END;

global
function Boolean ResAvDClassCUCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ResAvVc ResAvr;
  string 200 warn;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    if (PasteCustOnResAv(ResAvr,warn)) then begin
      ResAvSumup(ResAvr);
      if (nonblank(warn)) then begin
        MessageBox(0,warn);
      end;  
    end;
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassCUCodeEFAfter = res;
  RETURN;
END;

global
function Boolean ResAvDClassResTypeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res,chsum;
  record ResTypeVc ResTyper;
  record ResAvVc ResAvr;
  row ResAvVc ResAvrw;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    MatRowGet(ResAvr,rownr,ResAvrw);
    if (nonblank(ResAvrw.ResType)) then begin
      ResTyper.Code = ResAvrw.ResType;
      if (ReadFirstMain(ResTyper,1,true)) then begin        
        if (ResTyper.InvoiceBy==0) then begin/*strange but must be like that*/
          ResAvrw.CalcType = 1;
        end else begin
          ResAvrw.CalcType = 0;
        end;
      end;      
//      MatRowPut(ResAvr,rownr,ResAvrw); // This line was missing, but perhaps it is a good thing....
      UpdateRow(rownr,ResAvr);  
      ResAvRowSumup(ResAvr,rownr);
      MatRowGet(ResAvr,rownr,ResAvrw);      
      ResAvrw.Comment = ResTyper.Comment;        
      MatRowPut(ResAvr,rownr,ResAvrw);      
      chsum = true;     
    end;      
    if (chsum) then begin
      ResAvSumup(ResAvr);
    end;
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassResTypeEFAfter = res;
  RETURN;
END;

global
function Boolean ResAvDClassResCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record ResAvVc ResAvr;
  
  if (changedf) then begin
    GetWindowRecord(wn,ResAvr);
    ResAvVc_PasteResCode(ResAvr,rownr);
    PutWindowRecord(wn,ResAvr);
    res = true;
  end;  
  ResAvDClassResCodeEFAfter = res;
  return;
end;

global
function Boolean ResAvDClassNoOfGuestsEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record CUVc CUr;
  record ResAvVc ResAvr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    UpdateRow(rownr,ResAvr);        
    ResAvRowSumup(ResAvr,rownr);
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassNoOfGuestsEFAfter = res;
  RETURN;
END;

function Boolean ResAvDClassChildrenEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record CUVc CUr;
  record ResAvVc ResAvr;
  
  if (changedf) then begin
    GetWindowRecord(wn,ResAvr);
    UpdateRow(rownr,ResAvr);        
    ResAvRowSumup(ResAvr,rownr);
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassChildrenEFAfter = res;
  return;
end;

function Boolean ResAvDClassClassificationEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record CUVc CUr;
  record ResAvVc ResAvr;
  
  if (changedf) then begin
    GetWindowRecord(wn,ResAvr);
    UpdateRow(rownr,ResAvr);        
    ResAvRowSumup(ResAvr,rownr);
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassClassificationEFAfter = res;
  return;
end;

global
function Boolean ResAvDClassQtyWantedEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;
  record ResAvVc ResAvr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,ResAvr);
    UpdateRow(rownr,ResAvr);
    ResAvRowSumup(ResAvr,rownr);
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;
  ResAvDClassQtyWantedEFAfter = res;
  return;
end;

global
function Boolean ResAvDClassPersonsEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ResAvVc ResAvr;
  
  if (changed!=0) then begin
    if (rownr>=0) then begin
      GetWindowRecord(wn,ResAvr);
      ResAvSumup(ResAvr);
      PutWindowRecord(wn,ResAvr);
    end;
  end;  
  ResAvDClassPersonsEFAfter = res;
  RETURN;
END;

global
function Boolean ResAvDClassAgentPriceEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ResAvVc ResAvr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    ResAvRowSumup(ResAvr,rownr);
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassAgentPriceEFAfter = res;
  RETURN;
END;

global
function Boolean ResAvDClassPubPriceEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ResAvVc ResAvr;
  
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    ResAvRowSumup(ResAvr,rownr);
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;  
  ResAvDClassPubPriceEFAfter = res;
  RETURN;
END;

global
function Boolean ResAvDClassQtyAvailableEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  ResAvDClassQtyAvailableEFAfter = res;
  RETURN;
END;

procedure RecalculateResAv(Integer wn,Integer rownr,Integer changedf)
begin
  record ResAvVc ResAvr;

  if (changedf!=0) then begin
    GetWindowRecord(wn,ResAvr);
    if (rownr<0) then begin
      UpdateResAv(ResAvr);
    end else begin
      UpdateRow(rownr,ResAvr);
      ResAvRowSumup(ResAvr,rownr);
    end;
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;
  return;
end;

global
updating function Boolean ResAvDClassIncludePackageButtonAfter(Integer wn,Boolean changedf)
begin        
  record ResAvVc ResAvr;
  Boolean res;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,ResAvr);
    UpdateResAv(ResAvr);
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;
  ResAvDClassIncludePackageButtonAfter = res;
  return;
end;

function Boolean ResAvDClassNrOfDaysEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
begin
  record ResAvVc ResAvr;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    if (rownr==-1) then begin
      if (ResAvr.NrOfDays>=0) then begin
        ResAvr.EndDate = AddDay(ResAvr.TransDate,ResAvr.NrOfDays);
      end;
    end;
    PutWindowRecord(wn,ResAvr);
    RecalculateResAv(wn,rownr,changed);
  end;
  ResAvDClassNrOfDaysEFAfter = res;
  RETURN;
END;

global
function Boolean ResAvDClassTransDateEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf,Boolean updratef)
begin
  Boolean res;
  record ResAvVc ResAvr;

  res = true;
  if (changedf!=0) then begin
    GetWindowRecord(wn,ResAvr);
    ResAvPasteTransDate(ResAvr,rownr,updratef);
    PutWindowRecord(wn,ResAvr);
  end;
  ResAvDClassTransDateEFAfter = res;
  return;
end;

global
function Boolean ResAvDClassEndDateEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;

  res = true;
  RecalculateResAv(wn,rownr,changedf);
  ResAvDClassEndDateEFAfter = res;  
  return;
end;

global
function Boolean ResAvDClassStartTimeEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;

  res = true;
  RecalculateResAv(wn,rownr,changedf);
  ResAvDClassStartTimeEFAfter = res;
  return;
end;

global
function Boolean ResAvDClassEndTimeEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;

  res = true;
  RecalculateResAv(wn,rownr,changedf);
  ResAvDClassEndTimeEFAfter = res;
  return;
end;

global
function Boolean ResAvDClassAgentPriceListEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;

  res = true;
  RecalculateResAv(wn,rownr,changedf);
  ResAvDClassAgentPriceListEFAfter = res;  
  return;
end;

global
function Boolean ResAvDClassPubPriceListEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;

  res = true;
  RecalculateResAv(wn,rownr,changedf);
  ResAvDClassPubPriceListEFAfter = res;  
  return;
end;

global
function Boolean ResAvDClassUsageEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;

  res = true;
  RecalculateResAv(wn,rownr,changedf);
  ResAvDClassUsageEFAfter = true;
  return;
end;

global
function Boolean ResAvDClassCalcTypeEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean res;

  res = true;
  RecalculateResAv(wn,rownr,changedf);
  ResAvDClassCalcTypeEFAfter = res;  
  return;
end;

global
function Boolean ResAvDClassArtCodeEFAfter(integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record ResAvVc ResAvr;
  row ResAvVc ResAvrw;
  Boolean res;

  if (changedf!=0) then begin
    GetWindowRecord(wn,ResAvr);
    if (rownr>=0) then begin
      MatRowGet(ResAvr,rownr,ResAvrw);
      ResAvrw.Comment = "";
      ResAvrw.PubPrice = blankval;
      ResAvrw.PubSum = blankval;
      ResAvrw.AgentPrice = blankval;
      ResAvrw.AgentSum = blankval;
      ResAvrw.CalcType = 1;
      MatRowPut(ResAvr,rownr,ResAvrw);
      UpdateRow(rownr,ResAvr);
      ResAvRowSumup(ResAvr,rownr);
    end;  
    ResAvSumup(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;
  res = true;
  ResAvDClassArtCodeEFAfter = res;  
  return;
end;

global
procedure PasteLTxttoResAv(record ResAvVc ResAvr)
BEGIN
  record LTxtVc LTxtr;
  string 255 tstr;
  Integer pos,textsize;

  LTxtr.Code = ResAvr.LTxtCode;
  if (ReadFirstMain(LTxtr,1,true)) then begin
    textsize = SizeTextCnt(LTxtr);
    while (pos<textsize) begin
      tstr = StringFromText(LTxtr,pos,255);
      pos = pos + len(tstr);
      if (len(tstr)==0) then begin
        pos = pos + 1;
      end;
      AddToText(tstr,ResAvr);
    end;
  end;  
  RETURN;
END;

function Boolean ResAvDClassLTxtCodeEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record ResAvVc ResAvr;
  Boolean res;
  
  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,ResAvr);
    PasteLTxttoResAv(ResAvr);
    PutWindowRecord(wn,ResAvr);
  end;
  ResAvDClassLTxtCodeEFAfter = res;
  RETURN;
END;

function Boolean ResAvDClassCurncyCodeEFAfter(Integer wn,Integer changedf)
begin
  record ResAvVc ResAvr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,ResAvr);    
    ResAvVc_PasteCurncyCode(ResAvr,WindEFstr(wn));
    PutWindowRecord(wn,ResAvr);    
  end; 
  ResAvDClassCurncyCodeEFAfter = true;
  return;
end;

function Boolean ResAvDClassAfterEditFieldExecute(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed,Boolean updratef)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "ArtCode": res = ResAvDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "CalcType": res = ResAvDClassCalcTypeEFAfter(wn,fn,rownr,changed);
    case "Usage": res = ResAvDClassUsageEFAfter(wn,fn,rownr,changed);
    case "PubPriceList": res = ResAvDClassPubPriceListEFAfter(wn,fn,rownr,changed);
    case "AgentPriceList": res = ResAvDClassAgentPriceListEFAfter(wn,fn,rownr,changed);
    case "EndDate": res = ResAvDClassEndDateEFAfter(wn,fn,rownr,changed);
    case "StartTime": res = ResAvDClassStartTimeEFAfter(wn,fn,rownr,changed);
    case "EndTime": res = ResAvDClassEndTimeEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = ResAvDClassTransDateEFAfter(wn,fn,rownr,changed,updratef);
    case "QtyAvailable": res = ResAvDClassQtyAvailableEFAfter(wn,fn,rownr,changed);
    case "PubPrice": res = ResAvDClassPubPriceEFAfter(wn,fn,rownr,changed);
    case "AgentPrice": res = ResAvDClassAgentPriceEFAfter(wn,fn,rownr,changed);
    case "NrOfDays": res = ResAvDClassNrOfDaysEFAfter(wn,fn,rownr,changed);
    case "Persons": res = ResAvDClassPersonsEFAfter(wn,fn,rownr,changed);
    case "QtyWanted": res = ResAvDClassQtyWantedEFAfter(wn,fn,rownr,changed);
    case "NoOfGuests": res = ResAvDClassNoOfGuestsEFAfter(wn,fn,rownr,changed);
    case "Children": res = ResAvDClassChildrenEFAfter(wn,rownr,changed!=0);
    case "Classification": res = ResAvDClassClassificationEFAfter(wn,rownr,changed!=0);
    case "ResType": res = ResAvDClassResTypeEFAfter(wn,fn,rownr,changed);
    case "SourceCode": res = ResAvDClassSourceCodeEFAfter(wn,fn,rownr,changed);
    case "CUCode": res = ResAvDClassCUCodeEFAfter(wn,fn,rownr,changed);
    case "LTxtCode": res = ResAvDClassLTxtCodeEFAfter(wn,fn,rownr,changed);
    case "ResCode": res = ResAvDClassResCodeEFAfter(wn,rownr,changed!=0);
    case "CurncyCode": res = ResAvDClassCurncyCodeEFAfter(wn,changed);
  end;
  ResAvDClassAfterEditFieldExecute = res;
  RETURN;
END;

global
function Boolean ResAvDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  res = ResAvDClassAfterEditFieldExecute(wn,fieldname,fn,rownr,changed,true);
  ResAvDClassAfterEditField = res;
  RETURN;
END;

global 
function Boolean ResAvDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  record ResAvVc ResAvr;
  Boolean res;

  res = true;
  if (rownr>-1) then begin
    GetWindowRecord(wn,ResAvr);
    if (ResAvr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  ResAvDClassDeleteRowTest = res;
  return;
end;

global
function string 40 ResAvDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "ResType": psname = ResTypeSClassSpecPName(defpsname);
  end;
  ResAvDClassSpecPasteName = psname;
  return;
end;

global
function Boolean GroupJobSubOClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = ResAvDClassAfterEditFieldExecute(wn,fieldname,fn,rownr,changed,false);
  GroupJobSubOClassAfterEditField = res;
  return;
end;

global
function Boolean GroupJobSubOClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record ResAvVc ResAvr;
  row ResAvVc ResAvrw;

  res = true;
  GetWindowRecord(wn,ResAvr);
  switch (fieldname) begin
    case "ResType":
      MatRowGet(ResAvr,rownr,ResAvrw);
      if (nonblank(ResAvrw.ResCode)) then begin
        res = false;
      end;
    case "QtyWanted":
      MatRowGet(ResAvr,rownr,ResAvrw);
      if (nonblank(ResAvrw.ResCode)) then begin
        res = false;
      end;
  end;
  GroupJobSubOClassActiveEditField = res;
  return;
end;
