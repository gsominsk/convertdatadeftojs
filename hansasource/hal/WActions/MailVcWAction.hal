remote function Integer MailAcceptanceStatus(LongInt);
remote procedure MailLClassOnOpenWindowRemote(LongInt,var Boolean,var Boolean,var Boolean,var string);
external function string 255 AddStr(string,string,string);
external procedure FindUserMailboxName(string,var string,var string);
external function Boolean InterNetAddrTest(string);
remote procedure MailVc_PasteAddrCode(var record MailVc,Integer);
external function Integer InString2(string,string);
remote procedure GetMailFormattingSettings(record MailVc,var record ConfVc);
remote function Boolean MailHasHtmlAttachment(record MailVc);
remote procedure FindCurMailboxName(var string);
remote function Boolean FindUserInMailbox(string,var string,var LongInt);
external procedure StripEndingSpaces(var string);
remote procedure GetUserEmailAddresses(var array string,longint);

function Boolean ShouldUseHtmlEditor(record MailVc Mailr,Boolean newf)
begin
  record ConfVc confr;
  Boolean res;
  res = false;
  
  if (SystemSupportsHTMLMail()==false) then begin
    goto LShouldUseHtmlEditor;
  end;
  
  if (newf) then begin
    GetMailFormattingSettings(Mailr,Confr);
    if (Confr.SerNr>0) then begin
      if (Confr.DefaultHtmlFlag!=0) then begin
        res = true;
      end;
    end;
  end;
  
  if (Mailr.HtmlFlag!=0) then begin
    res = true;
  end;

LShouldUseHtmlEditor:;
  ShouldUseHtmlEditor = res;
end;

global
function string 255 MailDClassOverrideClass(record MailVc Mailr,Boolean newf)
begin
  string 255 res;
  Boolean htmlf;
  
  htmlf = ShouldUseHtmlEditor(Mailr,newf);
  if (htmlf==true) then begin
    res = "HtmlMailDClass";
  end;
  
LMailDClassOverrideClass:
  MailDClassOverrideClass = res;
  return;
end;

global
function string 255 HtmlMailDClassOverrideClass(record MailVc Mailr,Boolean newf)
begin
  string 255 res;
  Boolean htmlf;
  
  htmlf = ShouldUseHtmlEditor(Mailr,newf);
  if (htmlf==false) then begin
    res = "MailDClass";
  end;

LHtmlMailDClassOverrideClass:
  HtmlMailDClassOverrideClass = res;
  return;
end;

global
function Boolean MailDClassHasFileAttButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  MailDClassHasFileAttButtonAction = res;
  return;
end;

global
function Boolean HtmlMailDClassHasFileAttButtonAction(Integer wn,Integer value)
begin
  HtmlMailDClassHasFileAttButtonAction = MailDClassHasFileAttButtonAction(wn,value);
  return;
end;

global
function Boolean MailDClassHasRecAttButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  MailDClassHasRecAttButtonAction = res;
  return;
end;

global
function Boolean HtmlMailDClassHasRecAttButtonAction(Integer wn,Integer value)
begin
  HtmlMailDClassHasRecAttButtonAction = MailDClassHasRecAttButtonAction(wn,value);
  return;
end;

global 
function Boolean MailDClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;

  res = true;
  if (rownr==0) then begin res = false; end;
  MailDClassInsertRowTest = res;
  return;
end;

global 
function Boolean HtmlMailDClassInsertRowTest(Integer wn,Integer rownr)
begin
  HtmlMailDClassInsertRowTest = MailDClassInsertRowTest(wn,rownr);
  return;
end;

global 
function Boolean MailDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  Boolean res;

  res = true;
  if (rownr==0) then begin res = false; end;
  MailDClassDeleteRowTest = res;
  return;
end;

global 
function Boolean HtmlMailDClassDeleteRowTest(Integer wn,Integer rownr)
begin
  HtmlMailDClassDeleteRowTest = MailDClassDeleteRowTest(wn,rownr);
  return;
end;

// When changing such code, please test so it is usable as well. It is now...
global
function Boolean MailDClassUpdateTest(Integer wn)
begin
  Boolean res;
  record MailVc Mailr;
  
  res = true;
  GetWindowRecord(wn,Mailr);
//  if (Mailr.LockedFlag!=0) then begin
//    res = false;//moved to EditfieldActie
//  end;
  MailDClassUpdateTest = res;
  return;
end;

global
function Boolean HtmlMailDClassUpdateTest(Integer wn)
begin
  HtmlMailDClassUpdateTest = MailDClassUpdateTest(wn);
  return;
end;

global
function Boolean MailDClassPriorityButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record MailVc Mailr;
  
  res = true;
  if (WindowState(wn)==Rs_update or WindowState(wn)==Rs_normal) then begin
    GetPrevWindowRecord(wn,Mailr);
    if (Mailr.LockedFlag!=0) then begin
      MessageBox(22011,"");
      res = false;
    end;
  end;
  MailDClassPriorityButtonAction = res;
  return;
end;

global
function Boolean HtmlMailDClassPriorityButtonAction(Integer wn,Integer value)
begin
  HtmlMailDClassPriorityButtonAction = MailDClassPriorityButtonAction(wn,value);
  return;
end;

global
function Boolean MailDClassLockedFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record MailVc Mailr;
  
  res = true;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,Mailr);
      if (Mailr.LockedFlag!=0) then begin
        MessageBox(22011,"");
        res = false;
      end;
    case Rs_normal:
      GetWindowRecord(wn,Mailr);
      if (Mailr.LockedFlag!=0) then begin
        MessageBox(22011,"");
        res = false;
      end;
  end;
  MailDClassLockedFlagButtonAction = res;
  return;
end;

global
function Boolean HtmlMailDClassLockedFlagButtonAction(Integer wn,Integer value)
begin
  HtmlMailDClassLockedFlagButtonAction = MailDClassLockedFlagButtonAction(wn,value);
  return;
end;

global
function Boolean MailDClassSendFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record MailVc Mailr;
  
  res = true;
  if (WindowState(wn)==Rs_update or WindowState(wn)==Rs_normal) then begin
    GetPrevWindowRecord(wn,Mailr);
    if (Mailr.LockedFlag!=0) then begin
      MessageBox(22011,"");
      res = false;
    end;
  end;
  MailDClassSendFlagButtonAction = res;
  return;
end;

global
function Boolean HtmlMailDClassSendFlagButtonAction(Integer wn,Integer value)
begin
  HtmlMailDClassSendFlagButtonAction = MailDClassSendFlagButtonAction(wn,value);
  return;
end;

global
function Boolean MailDClassHtmlFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record MailVc Mailr;
  record ConfVc Confr;

  res = true;
  GetWindowRecord(wn,Mailr);
  if (Mailr.LockedFlag!=0) then begin
    MessageBox(22011,"");
    res = false;
    goto LHtmlFlagButtonAction;
  end;
  
  if (SystemSupportsHTMLMail()==false or (LiveSyncMail and SingleUserMode)) then begin
    res = false;
    goto LHtmlFlagButtonAction;
  end;
  
  GetMailFormattingSettings(Mailr,Confr);
  if (Confr.SerNr>0) then begin
    if (Confr.DefaultHtmlFlag==0 and Confr.ForceHtmlFlag!=0) then begin
      res = false;
      goto LHtmlFlagButtonAction;
    end;
  end;
  
  if (Mailr.HtmlFlag!=0 and WindowState(wn)!=Rs_normal) then begin
    res = false;
    MessageBox(25456,"");
    goto LHtmlFlagButtonAction;
  end;
  
LHtmlFlagButtonAction:;
  MailDClassHtmlFlagButtonAction = res;
  return;
end;

global
function Boolean HtmlMailDClassHtmlFlagButtonAction(Integer wn,Integer value)
begin
  HtmlMailDClassHtmlFlagButtonAction = MailDClassHtmlFlagButtonAction(wn,value);
  return;
end;

global
function Boolean MailDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record MailVc Mailr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Mailr);
    if (Mailr.HtmlFlag!=0 and SystemSupportsHTMLMail()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,true);
    end;
  end;
  MailDClassHtmlFlagButtonAfter = res;
  return;
end;

global
function Boolean HtmlMailDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record MailVc Mailr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,Mailr);
    if (Mailr.HtmlFlag==0 and SystemSupportsHTMLMail()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,false);
    end;
  end;
  HtmlMailDClassHtmlFlagButtonAfter = res;
  return;
end;

global
function Boolean MailDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  Boolean res;
  LongInt sz;
  record MailVc Mailr;
  row MailVc Mailrw;
  record ConfVc Confr;
  longint mailboxnr;
  string 255 mailboxcode,curmailbox;
  
  res = true;
  GetWindowRecord(wn,Mailr);
  if (Mailr.LockedFlag!=0) then begin
    switch (fieldname) begin
      case "Lifespan":
        res = true;
      case "Tags":
        res = true;
      otherwise
        MessageBox(22011,"");
        res = false;
    end;
    goto LMailDClassActiveEditField;
  end;
  if (wnst==2) then begin//Rs_update
    switch (fieldname) begin
      case "SerNr": res = false;
    end;
  end;
  switch (fieldname) begin
    case "Math": 
      if (SystemSupportsHTMLMail()==true and Mailr.HtmlFlag!=0 and WindowShouldAttachHtml(wn)==false) then begin
        res = false;
      end else begin
        if (LastChar!=8) then begin//backspace
          sz = SizeTextCnt(Mailr);
          if ((sz+1)>TextFieldMaxSize) then begin
            MessageBox(1622,"");
            res = false;
          end;
        end;
      end;
    case "AddrCode": 
      if (rownr>=0) then begin
        MatRowGet(Mailr,rownr,Mailrw);
        if ((Mailrw.RowTyp==1) and (rownr==0)) then begin
          FindCurMailboxName(curmailbox);
          FindUserInMailbox(curmailbox,mailboxcode,mailboxnr);
          if (Mailrw.Mailbox!=mailboxnr) then begin
            res = false;
          end;
        end;
      end;
    case "RowTyp": 
      if (rownr>=0) then begin
        MatRowGet(Mailr,rownr,Mailrw);
        if ((Mailrw.RowTyp==1) and (rownr==0)) then begin
          res = false;
        end;
      end;
    case "HtmlTemplate":
      if (SystemSupportsHTMLMail()==false and nonblank(Mailr.HtmlTemplate)) then begin
        res = false;
      end else begin
        if (nonblank(Mailr.HtmlTemplate)) then begin
          GetMailFormattingSettings(Mailr,Confr);
          if (Confr.SerNr>0) then begin
            if (nonblank(Confr.DefaultTemplate) and Confr.ForceDefaultTemplate!=0) then begin
              res = false;
            end;
          end;
        end;
      end;
  end;  
LMailDClassActiveEditField:;  
  MailDClassActiveEditField = res;
  return;
end;

global
function Boolean HtmlMailDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
begin
  HtmlMailDClassActiveEditField = MailDClassActiveEditField(wn,fieldname,fn,wnst,rownr,changed);
  return;
end;

function Boolean MailDClassAddrCodeEFAfter(Integer wn,Integer changed,Integer rownr)
begin
  Boolean res;
  record MailVc Mailr;
  
  if (changed!=0) then begin
    res = true;
    GetWindowRecord(wn,Mailr);
    MailVc_PasteAddrCode(Mailr,rownr);
    PutWindowRecord(wn,Mailr);        
  end;
  MailDClassAddrCodeEFAfter = res;
  return;
end;

function Boolean HtmlMailDClassAddrCodeEFAfter(Integer wn,Integer changed,Integer rownr)
begin
  HtmlMailDClassAddrCodeEFAfter = MailDClassAddrCodeEFAfter(wn,changed,rownr);
  return;
end;

function Boolean HtmlMailDClassHtmlTemplateEFAfter(Integer wn,Integer changed)
begin
  Boolean res;
  record MailVc Mailr;
  record MailVc PrevMailr;
  Integer nwn,mwn;
  string 255 subset;
  
  if (changed!=0) then begin
    if (Mailr.LockedFlag!=0) then begin
      MessageBox(22011,"");
      res = false;
      goto LHtmlMailDClassHtmlTemplateEFAfter;
    end;
    if (SystemSupportsHTMLMail()) then begin
      res = true;
      GetWindowRecord(wn,Mailr);
      SetHTMLTemplate(wn,Mailr.HtmlTemplate);
    end else begin
      // Show error message as well
      res = false;
    end;
  end;
  
LHtmlMailDClassHtmlTemplateEFAfter:;
  HtmlMailDClassHtmlTemplateEFAfter = res;
  return;
end;

global
function Boolean MailDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record MailVc mailr;
  row MailVc mailrr;
  LongInt rwcnt,i;
  string 255 wnamearg;
  
  switch (fieldname) begin
    case "AddrCode": res = MailDClassAddrCodeEFAfter(wn,changed,rownr);
    case "Folder":
      wnamearg = GetWindowNameArg(wn);
      
      GetWindowRecord(wn,mailr);
      rwcnt = MatRowCnt(mailr);
      
      for (i = 0; i<rwcnt; i = i + 1) begin
        MatRowGet(mailr,i,mailrr);
        
        if (mailrr.AddrCode==wnamearg) then begin
          mailrr.AddrFolder = GetWindowString(wn,"Folder");
          MatRowPut(mailr,i,mailrr);
          PutWindowRecord(wn,mailr);
          goto out;
        end;
      end;
    case "HtmlTemplate":
      res = HtmlMailDClassHtmlTemplateEFAfter(wn,changed);
  end;
out:;
  MailDClassAfterEditField = res;
  return;
end;

global
function Boolean HtmlMailDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  HtmlMailDClassAfterEditField = MailDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  return;
end;

global
function Boolean HtmlMailDClassActiveFieldOnNew(Integer wn)
begin
  Boolean res;
  record MailVc Mailr;
  record ConfVc Confr;
  integer nwn;
  
  res = false;
  GetWindowRecord(wn,Mailr);
  if (blank(Mailr.HtmlTemplate)) then begin
    GetMailFormattingSettings(Mailr,Confr);
    if (Confr.SerNr and Confr.RequireTemplate) then begin
      WindowFieldGoto(wn,Mailr,-1,"HtmlTemplate",true);
      nwn = OpenPasteWindow(wn,GetWindowPasteName(wn,"HtmlTemplate"),Mailr.HtmlTemplate);
      res = true;
    end;
  end;
  
  HtmlMailDClassActiveFieldOnNew = res;
  return;
end;

function string 255 FirstPart(string fullstring)
begin
  string 255 res;
  LongInt pos;
  
  pos = InString2(fullstring,":");

  if (pos>0) then begin
    res = left(fullstring,pos);
  end else begin
    res = fullstring;
  end;
  
  FirstPart = res;
  return;
end;

function string 255 EndPart(string fullstring)
begin
  string 255 res;
  LongInt pos,slen;
    
  slen = len(fullstring);
  pos = InString2(fullstring,":");

  if (pos>0) then begin
    res = right(fullstring,slen - pos - 1);
  end else begin
    res = "";
  end;
  
  EndPart = res;
  return;
end;

global
function Boolean MailDClassOnOpenWindow(Integer wn)
begin
  record MailVc Mailr;
//  row MailVc mailrr;
//  LongInt rwcnt,i;
  string 255 folder;

  GetWindowRecord(wn,Mailr);
  if (SystemSupportsHTMLMail()==false and Mailr.HtmlFlag!=0) then begin
    MessageBox(25464,"");
  end;
   
  folder = EndPart(GetWindowSubset(wn));
  PutWindowString(wn,"Folder",folder);
  /*
  GetWindowRecord(wn,mailr);
  rwcnt = MatRowCnt(mailr);
  
  for (i = 0; i<rwcnt; i = i + 1) begin
    MatRowGet(mailr,i,mailrr);

    StopAlert("ac " & mailrr.AddrCode);
    
    if (mailrr.AddrCode==folder) then begin
      PutWindowString(wn,"Folder",mailrr.AddrFolder);
      goto out;
    end;
  end;

out:;
  */
  
  UpdateBrowses("MailVc");
  return;
end;

global
function Boolean HtmlMailDClassOnOpenWindow(Integer wn)
begin
  HtmlMailDClassOnOpenWindow = MailDClassOnOpenWindow(wn);
  return;
end;

global
function Boolean MailLClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  string 255 subset;
  string 255 folder;
  Integer pos;
  record MailFolderVc mfr;
  
  switch (fieldname) begin
    case "Folder":
      subset = FirstPart(GetWindowSubset(wn));
      folder = GetWindowString(wn,"Folder");
      
      if (nonblank(folder)) then begin
        mfr.Name = folder;
        mfr.MailBox = subset;
        if (ReadFirstMain(mfr,2,true)) then begin
          subset = subset & ":" & folder;
        end else begin
          PutWindowString(wn,"Folder","");
        end;
      end;
      
      SetWindowSubset(wn,subset);
  end;
  MailLClassAfterEditField = res;
  return;
end;

global
function Boolean PasteFolderSClassOnOpenPaste(Integer wn,string find)
begin
  Integer wn2;
  record MailFolderVc mfr;
  string 255 subset;
  string 255 wnamearg;
  Boolean res;
  
  res = true;
  subset = FirstPart(GetWindowSubset(wn));
  wnamearg = GetWindowNameArg(wn);
  
  wn2 = OpenWindow("PasteFolderSClass",0,wn,subset,wnamearg,mfr);
  
  PasteFolderSClassOnOpenPaste = res;
end;

global
Function Boolean MailFolderDClassOnOKWindow(Integer wn)
begin
  record MailFolderVc mfr;
  Boolean res;
  
  GetWindowRecord(wn,mfr);  
  mfr.MailBox = StringToLongInt(GetWindowSubset(wn));
  PutWindowRecord(wn,mfr);  

  res = true;
  
  MailFolderDClassOnOKWindow = res;
end;

global 
function Boolean MailDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  Boolean res;
  record MailVc Mailr;
  row MailVc Mailrw;
  string 255 mailboxnr,mailboxname;
    
  res = true;
  GetWindowRecord(wn,Mailr);
  MatRowGet(Mailr,rownr,Mailrw);
  if (Mailrw.RowTyp==kMailRowTypeFrom) then begin
    FindUserMailboxName(CurrentUser,mailboxnr,mailboxname);
    if (Mailrw.AddrCode!=mailboxname) then begin
      MessageBox(1051,"");
      res = false;
      goto LMailDClassOverStrikeTest;
    end;
  end;
LMailDClassOverStrikeTest:;  
  MailDClassOverStrikeTest = res;
  return;
end;

global 
function Boolean HtmlMailDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  HtmlMailDClassOverStrikeTest = MailDClassOverStrikeTest(wn,rownr);
  return;
end;


global
procedure MailDClassOnWindowRecordChange(Integer wn)
begin
  record MailVc Mailr;
  Integer nwn;

  if (SystemSupportsHTMLMail()==true) then begin
    GetWindowRecord(wn,Mailr);
    nwn = ReOpenHtmlEditorWindow(wn,Mailr.HtmlFlag);
  end;
  return;
end;

global
procedure HtmlMailDClassOnWindowRecordChange(Integer wn)
begin
  record MailVc Mailr;
  Integer nwn;

  GetWindowRecord(wn,Mailr);
  nwn = ReOpenHtmlEditorWindow(wn,Mailr.HtmlFlag);
  return;
end;

global
procedure MailDClassEditRow(Integer wn,Integer rwn)
begin
  record MailVc Mailr;
  row MailVc Mailrw;
  record RcVc RepSpec;
  integer nwn;
  
  GetWindowRecord(wn,Mailr);
  MatRowGet(Mailr,rwn,Mailrw);
  RepSpec.long1 = rwn;
  RepSpec.JobDf = Mailrw.RowTyp;
  RepSpec.f2 = Mailrw.AddrCode;
  
  nwn = OpenWindow("MailRowDClass",0,wn,"","",RepSpec);
  return;
end;

global
procedure MailDClassAddRow(Integer wn,Integer rwn)
begin
  record MailVc Mailr;
  row MailVc Mailrw;

  GetWindowRecord(wn,Mailr);
  MatRowGet(Mailr,rwn,Mailrw);
  MatRowPut(Mailr,rwn,Mailrw);
  PutWindowRecord(wn,Mailr);
  MailDClassEditRow(wn,rwn);
  return;
end;

global
procedure MailRowDClassTrash()
begin
  record RcVc RepSpec;
  record MailVc Mailr;
  integer wn,mwn,rwn;
  
  wn = CurWindow;
  mwn = MotherWindow(wn);
  
  GetWindowRecord(wn,RepSpec);
  GetWindowRecord(mwn,Mailr);
  
  rwn = RepSpec.long1;
  MatRowDelete(Mailr,rwn);
  
  PutWindowRecord(mwn,Mailr);
  CloseWindow(wn);
  return;
end;

global
function boolean MailRowDClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record MailVc Mailr;
  row MailVc Mailrw;
  integer mwn,rwn;
  
  mwn = MotherWindow(wn);
  GetWindowRecord(mwn,Mailr);
  
  GetWindowRecord(wn,RepSpec);
  rwn = RepSpec.long1;
  
  MatRowGet(Mailr,rwn,Mailrw);
  
  Mailrw.RowTyp = RepSpec.JobDf;
  Mailrw.AddrCode = RepSpec.f2;

  MatRowPut(Mailr,rwn,Mailrw);
  PutWindowRecord(mwn,Mailr);
//  MailDClassSwitchRow(mwn,rwn);
  MailRowDClassOnOKWindow = true;
  return;
end;

global
function Boolean MailLClassOnOpenWindow(integer wn)
begin
  Boolean AutoReplyf,Forwardf,ConfSubf;
  LongInt mailboxnr;
  string 255 messagestr;

  mailboxnr = StringToLongInt(GetWindowSubset(wn));
  MailLClassOnOpenWindowRemote(mailboxnr,AutoReplyf,Forwardf,ConfSubf,messagestr);
  if (AutoReplyf or Forwardf) then begin 
    MessageBox(33870,chr(13) & chr(10) & messagestr);
  end;
  if (ConfSubf) then begin
    PutWindowInteger(wn,"SubscribeFlag",1);
  end;
LMailLClassOnOpenWindow:;

  MailLClassOnOpenWindow = false;
  return;
end;

procedure ChooseSenderAliasPasteSpecial(integer wn,var string psname)
begin
  integer i,rw;
  record MailVc Mailr;
  row MailVc Mailrw;

  GetWindowRecord(wn,Mailr);
  rw = WindowActiveRow(wn);
  if (rw>-1) then begin
    MatRowGet(Mailr,rw,Mailrw);
    if (Mailrw.RowTyp==kMailRowTypeFrom) then begin
      psname = "SenderAliasSClass";
    end;
  end;

  return;
end;

global
function string 40 MailDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 40 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "AddrCode": ChooseSenderAliasPasteSpecial(wn,psname);
  end;
  MailDClassSpecPasteName = psname;
  return;
end;

global
function string 40 HtmlMailDClassSpecPasteName(Integer wn,string defpsname)
begin
  HtmlMailDClassSpecPasteName = MailDClassSpecPasteName(wn,defpsname);
end;

global
function Boolean SenderAliasSClassOnOpenWindow(integer wn)
begin
  integer i,rwcnt;
  string 255 tstr;
  record ConfVc Confr;
  array string 255 aemails;
  
  while (LoopMain(Confr,1,true)) begin
    GetUserEmailAddresses(aemails,Confr.SerNr);
    SetListString(wn,i+1,Confr.AddrName,false);     
    for (i=0;i<aemails.length;i=i+1) begin
       SetListString(wn,i+1,Confr.AddrName & " <" & aemails[i] & ">",false);     
    end;
  end;
  SenderAliasSClassOnOpenWindow = false;
  return;
end;

global
function Boolean SenderAliasSClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  string 60 tstr;
  
  mwn = MotherWindow(wn);
  if (SelectedListLine(wn)>=0) then begin
    tstr = GetListString(wn,SelectedListLine(wn));
    StripEndingSpaces(tstr);
  end else begin
    tstr="";
  end;
  CloseWindow(wn);
  PasteString(mwn,tstr);
  
  SenderAliasSClassOnOKWindow = false;
  return;
end;

global
function LongInt ConfAutoReplyVcRecordDefaultsClient(LongInt wn,var record ConfAutoReplyVc ConfAutoReplyr,record ConfAutoReplyVc ConfAutoReply2r,LongInt long3,LongInt long4)
begin
  LongInt res;

  if (SystemSupportsHTMLMail()) begin
//    ConfAutoReplyr.HtmlFlag = 1;
  end;

  ConfAutoReplyVcRecordDefaultsClient = res;
  return;
end;

global
function Boolean ConfAutoReplyDClassOnOpenWindow(Integer wn)
begin
  record ConfAutoReplyVc ConfAutoReplyr;
  string 255 folder;

  GetWindowRecord(wn,ConfAutoReplyr);
  if (SystemSupportsHTMLMail()==false and ConfAutoReplyr.HtmlFlag!=0) then begin
    MessageBox(22013,""); 
  end;
  
  return;
end;

global
procedure ConfAutoReplyDClassOnWindowRecordChange(Integer wn)
begin
  record ConfAutoReplyVc ConfAutoReplyr;
  Integer nwn;

  if (SystemSupportsHTMLMail()==true) then begin
    GetWindowRecord(wn,ConfAutoReplyr);
    nwn = ReOpenHtmlEditorWindow(wn,ConfAutoReplyr.HtmlFlag);
  end;
  return;
end;

global
function Boolean ConfAutoReplyDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ConfAutoReplyVc ConfAutoReplyr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,ConfAutoReplyr);
    if (ConfAutoReplyr.HtmlFlag!=0 and SystemSupportsHTMLMail()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,true);
    end;
  end;
  ConfAutoReplyDClassHtmlFlagButtonAfter = res;
  return;
end;

global
function Boolean ConfAutoReplyDClassHtmlFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record ConfAutoReplyVc ConfAutoReplyr;
  record ConfVc Confr;

  res = true;
  GetWindowRecord(wn,ConfAutoReplyr);
  
  if (SystemSupportsHTMLMail()==false or (LiveSyncMail and SingleUserMode)) then begin
    res = false;
    goto LHtmlFlagButtonAction;
  end;

/*  
  GetMailFormattingSettings(Mailr,Confr);
  if (Confr.SerNr>0) then begin
    if (Confr.DefaultHtmlFlag==0 and Confr.ForceHtmlFlag!=0) then begin
      res = false;
      goto LHtmlFlagButtonAction;
    end;
  end;
*/  
  if (ConfAutoReplyr.HtmlFlag!=0 and WindowState(wn)!=Rs_normal) then begin
    res = false;
    MessageBox(25456,"");
    goto LHtmlFlagButtonAction;
  end;
  
LHtmlFlagButtonAction:;
  ConfAutoReplyDClassHtmlFlagButtonAction = res;
  return;
end;

global
function Boolean HtmlConfAutoReplyDClassHtmlFlagButtonAction(Integer wn,Integer value)
begin
  HtmlConfAutoReplyDClassHtmlFlagButtonAction = ConfAutoReplyDClassHtmlFlagButtonAction(wn,value);
  return;
end;

global
function Boolean HtmlConfAutoReplyDClassHtmlFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ConfAutoReplyVc ConfAutoReplyr;
  Integer nwn,mwn;
  
  if (changedf) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,ConfAutoReplyr);
    if (ConfAutoReplyr.HtmlFlag==0 and SystemSupportsHTMLMail()) then begin
      nwn = ReOpenHtmlEditorWindow(wn,false);
    end;
  end;
  HtmlConfAutoReplyDClassHtmlFlagButtonAfter = res;
  return;
end;

global
procedure HtmlConfAutoReplyDClassOnWindowRecordChange(Integer wn)
begin
  record ConfAutoReplyVc ConfAutoReplyr;
  Integer nwn;

  GetWindowRecord(wn,ConfAutoReplyr);
  nwn = ReOpenHtmlEditorWindow(wn,ConfAutoReplyr.HtmlFlag);
  return;
end;

global
updating function Boolean MailLClassSubscribeFlagButtonAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record ConfSubVc ConfSubr;
  record ConfSubVc OldConfSubr;
  row ConfSubVc ConfSubrw;
  LongInt i,rwcnt,mailbox;
  Integer value;

  value = GetWindowInteger(wn,"SubscribeFlag");
//stopalert("MailLClassSubscribeFlagButtonAfter " & value);

  mailbox = StringToLongInt(GetWindowSubset(wn));
  ConfSubr.Sign = CurrentUser;
  if (ReadFirstMain(ConfSubr,1,true)) then begin
    RecordCopy(OldConfSubr,ConfSubr);
    rwcnt = MatRowCnt(ConfSubr);
    for (i = 0; i<rwcnt; i = i + 1) begin
      MatRowGet(ConfSubr,i,ConfSubrw);
      if (ConfSubrw.Conference==mailbox) then begin
        if (value==0) then begin
          MatRowDelete(ConfSubr,i);
        end else begin
          goto LMailLClassSubscribeFlagButtonAfter50;
        end;
      end;
    end;
    if (value==1) then begin
      ConfSubrw.Conference = mailbox;
      MatRowPut(ConfSubr,rwcnt,ConfSubrw);
    end;
LMailLClassSubscribeFlagButtonAfter50:;
    RecordUpdate(OldConfSubr,ConfSubr,false);
  end else begin
    if (value==1) then begin
      ConfSubr.Sign = CurrentUser;
      ConfSubrw.Conference = mailbox;
      MatRowPut(ConfSubr,0,ConfSubrw);
      RecordStore(ConfSubr,true);
    end;
  end;

  res = true;
  MailLClassSubscribeFlagButtonAfter = res;
end;

function Boolean MailAcceptance(Integer wn)
begin
  Boolean res;
  Integer nwn,status;
  record MailVc Mailr;
  record MailReadVc MRr;
  
  res = false;
  GetWindowRecord(wn,Mailr);
  if (Mailr.RequireAcceptance!=0) then begin
    status = MailAcceptanceStatus(Mailr.SerNr);
//    res = status==-1;
    res = status<=kMailStatusPostponed;;
    if (res) then begin
      MessageBox(38544,"");
    end;
  end;
  
  MailAcceptance = res;
  return;
end;

global
function Boolean MailDClassOnClose(Integer wn,Integer wn2)
begin
  MailDClassOnClose = MailAcceptance(wn);
  return;
end;

global
function Boolean HtmlMailDClassOnClose(Integer wn,Integer wn2)
begin
  HtmlMailDClassOnClose = MailAcceptance(wn);
  return;
end;

global
function string 255 SubscribedConferencesLClassMailSource(var record MailVc Mailr)
begin
  string 255 source;
  record ConfSubVc CSr;
  row ConfSubVc CSrw;
  Integer i,rwcnt;
  string 255 mailboxnr,mailboxname;
  row MailVc Mailrw;
  Integer sci,scrwcnt;
  record ConfVc Confr;
  
  source = "Unknown";
  CSr.Sign = CurrentUser;
  if (ReadFirstMain(CSr,1,true)) then begin
    FindUserMailboxName(CurrentUser,mailboxnr,mailboxname);
    
    scrwcnt = MatRowCnt(Mailr);
    rwcnt = MatRowCnt(CSr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CSr,i,CSrw);
      for (sci=0;sci<scrwcnt;sci=sci+1) begin
        MatRowGet(Mailr,sci,Mailrw);
        if (Mailrw.Mailbox==CSrw.Conference) then begin
          Confr.SerNr = CSrw.Conference;
          ReadFirstMain(Confr,1,true);
          source = Confr.AddrName;
          goto LSubscribedConferencesLClassMailSource;
        end;
      end;
    end;
  end;
LSubscribedConferencesLClassMailSource:;  
  SubscribedConferencesLClassMailSource = source;
  return;
end;
