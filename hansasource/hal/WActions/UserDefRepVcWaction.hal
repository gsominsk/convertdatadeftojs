global
function Boolean UserDefRepDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record UserDefRepVc UserDefRepr;
  
  GetWindowRecord(wn,UserDefRepr);
  subsetname = UserDefRepr.shortname;
  UserDefRepDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean UserDefRepDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record UserDefRepVc UDRr;
  record UserDefRepLinesVc UDRLr;
  record UserDefRepICACLVc UDRICACLr;
  
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,UDRr);
    switch (StringSetFromString(23,UDRr.repname)) begin
      case "ICACRn":
        if (ReadMarkedRecord(wn,UDRICACLr)) then begin
          mwn = OpenWindow("UserDefRepICACLinesDClass",1,0,"","",UDRICACLr);    
        end;
      otherwise
        if (ReadMarkedRecord(wn,UDRLr)) then begin
          mwn = OpenWindow("UserDefRepLinesDClass",1,0,"","",UDRLr);    
        end;
    end;
  end;
  UserDefRepDClassOnOKWindow = true;
  return;
end;


global
function Boolean UserDefRepICACDClassOnOKWindow(Integer wn)
begin
  Integer mwn;
  record UserDefRepICACLVc UDRICACLr;
  
  if (WindowState(wn)==Rs_normal) then begin
    if (ReadMarkedRecord(wn,UDRICACLr)) then begin
      mwn = OpenWindow("UserDefRepICACLinesDClass",1,0,"","",UDRICACLr);    
    end;
  end;
  UserDefRepICACDClassOnOKWindow = true;
  return;
end;


global
function Boolean UserDefRepBalDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  UserDefRepBalDClassUpdateWindowSubset = UserDefRepDClassUpdateWindowSubset(wn,subsetname);
  RETURN;
END;

global
function Boolean UserDefRepICACDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  UserDefRepICACDClassUpdateWindowSubset = UserDefRepDClassUpdateWindowSubset(wn,subsetname);
  RETURN;
END;

global
function Boolean UserDefRepBalDClassOnOKWindow(Integer wn)
begin
  UserDefRepBalDClassOnOKWindow = UserDefRepDClassOnOKWindow(wn);
  return;
end;


global
function Boolean UserDefRepResDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  UserDefRepResDClassUpdateWindowSubset = UserDefRepDClassUpdateWindowSubset(wn,subsetname);
  RETURN;
END;

global
function Boolean UserDefRepResDClassOnOKWindow(Integer wn)
begin
  UserDefRepResDClassOnOKWindow = UserDefRepDClassOnOKWindow(wn);
  return;
end;

global
procedure UserDefRepKeyDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  return;
end;

global
procedure UserDefRepVATDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  return;
end;

global
procedure UserDefRepBalDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  saveOK = true;// Temporary fix for the RecordList
  return;
end;

global
procedure UserDefRepICACDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  saveOK = true;// Temporary fix for the RecordList
  return;
end;

global
procedure UserDefRepResDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  saveOK = true;// Temporary fix for the RecordList
  return;
end;

global
procedure UserDefRepDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  saveOK = true;// Temporary fix for the RecordList
  return;
end;

global
procedure UserDefRepColumnsDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  return;
end;

global
function Boolean UserDefRepColumnsDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record UserDefRepColumnsVc UDRCr;
  record UserDefRepColumnsVc pUDRCr;
  row UserDefRepColumnsVc UDRCrw;
  Integer prwcnt;

  switch (fieldname) begin
    case "ColCode":
      if (changed!=0) then begin
        GetWindowRecord(wn,UDRCr);
        GetPrevWindowRecord(wn,pUDRCr);
        if (rownr>=0) then begin
          prwcnt = MatRowCnt(pUDRCr);
          if (rownr>=prwcnt) then begin
            MatRowGet(UDRCr,rownr,UDRCrw);
            UDRCrw.CurrencyType = kBaseCurrencySpecified;
            MatRowPut(UDRCr,rownr,UDRCrw);
            PutWindowRecord(wn,UDRCr);
            res = true;
          end;
        end;
      end;
  end;
  UserDefRepColumnsDClassAfterEditField = res;
  return;
end;

global
procedure UserDefRepLinesDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  newOK = false;
  return;
end;

global
procedure UserDefRepColDsm()
begin
  record UserDefRepVc UserDefRepr;
  record UserDefRepColumnsVc UserDefRepColumnsr;
  Integer nwn,wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,UserDefRepr);
  UserDefRepColumnsr.shortname = UserDefRepr.shortname;
  if (ReadFirstMain(UserDefRepColumnsr,1,true)) then begin
    nwn = OpenWindow("UserDefRepColumnsDClass",1,0,"","",UserDefRepColumnsr);
  end else begin
    if (UserDefRepr.Type==kUserDefRepKFR or UserDefRepr.Type==kUserDefRepVAT) then begin
      RecordNew(UserDefRepColumnsr);
      UserDefRepColumnsr.shortname = UserDefRepr.shortname;
      nwn = OpenWindow("UserDefRepColumnsDClass",1,0,"","",UserDefRepColumnsr);
    end;
  end;
  return;
end;

global
procedure UserDefRepNewLineDsm()
begin
  record UserDefRepVc UDRr;
  record UserDefRepLinesVc UDRLr;
  record UserDefRepICACLVc UDRICACLr;
  Integer nwn,wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,UDRr);
  if (UDRr.Type==kUserDefRepBal or UDRr.Type==kUserDefRepRes) then begin
    RecordNew(UDRLr);
    if (UDRr.Type==kUserDefRepRes) then begin
      UDRLr.AccType = 2;
    end;
    UDRLr.shortname = UDRr.shortname;
    nwn = OpenWindow("UserDefRepLinesDClass",1,0,"","",UDRLr);
  end;
  if (UDRr.Type==kUserDefRepICAC) then begin
    RecordNew(UDRICACLr);
    UDRICACLr.shortname = UDRr.shortname;
    nwn = OpenWindow("UserDefRepICACLinesDClass",1,0,"","",UDRICACLr);
  end;
  return;
end;


global
function Integer UserDefRepColumnsDClassSelectSetToPaste(Integer wn,string fieldname)
begin
  Integer res;
  record UserDefRepColumnsVc UDRCr;
  
  res = 384;
  GetWindowRecord(wn,UDRCr);
  switch (fieldname) begin
    case "ColType":
      if (IsBooks) then begin
        if (ValuePack(1)==false) then begin
          res = 512;
        end;
      end;
    case "PeriodType":
      res = 385;
    case "Hide":
      res = 432;
    case "CurrencyType":
      res = 590;      
  end;
  UserDefRepColumnsDClassSelectSetToPaste = res;
  return;
end;

function Boolean CompanyName(string compnr,var row CompaniesBlock Compbrw)
begin
  Boolean res;
  Integer i,rwcnt;
  record CompaniesBlock Compb;
  
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(Compb,i,Compbrw);
    if (compnr==Compbrw.CompCode) then begin
      res  = true;
      goto LCompanyName;
    end;
  end;
LCompanyName:;  
  CompanyName = res;
  return;
end;

global
function Boolean UserDefRepICACLinesDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;
  record UserDefRepICACLVc UDRICACLr;
  row CompaniesBlock Compbrw;

  switch (fieldname) begin
    case "CompCode":
      if (changed!=0) then begin
        GetWindowRecord(wn,UDRICACLr);
        if (CompanyName(UDRICACLr.CompCode,Compbrw)) then begin
          UDRICACLr.ShortName = Compbrw.ShortName;
          UDRICACLr.CompName = Compbrw.CompName;
          PutWindowRecord(wn,UDRICACLr);
        end;
      end;
  end;
  UserDefRepICACLinesDClassAfterEditField = res;
  return;
end;
