external procedure GetMyAccountStatus(var val,var val,var val,var val,var Date);
external updating procedure SearchForApps();
external function string 255 ReplaceCharByString(string,string,string);

global
updating procedure RememberThisApp()
begin
  record AvailableAppsVc AvailableAppsr;
  Integer wn,nwn;

  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,AvailableAppsr);
  AvailableAppsr.KeepInDB = 1;
  PutWindowRecord(wn,AvailableAppsr);
  if (WindowDoOK(wn,0)==true) then begin
  end;
  return;
end;

global
updating procedure FindAndDisplayMyBalance()
begin
  record RcVc RepSpec;
  Integer wn,nwn;
  val l,bal,totm,onaccs;
  Date lastupdate;

  nwn = OpenWindow("MyAccountClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  GetMyAccountStatus(l,bal,totm,onaccs,lastupdate);
  RepSpec.long1 = l;
  RepSpec.vals0 = totm;
  RepSpec.vals1 = bal;
  RepSpec.vals2 = onaccs;
  RepSpec.d1 = lastupdate;
  PutWindowRecord(nwn,RepSpec);  
  return;
end;

global
procedure MyAccountDetails()
begin
  record RcVc RepSpec;
  
  RecordNew(RepSpec);
  ReportDefaults(RepSpec,"MyAccountDetailsRClass");
  RepSpec.repname = "MyAccountDetailsRn";
  RepSpec.Media = mtScreen;
  RunReport(RepSpec,0);
  return;
end;

global
updating function Boolean SearchAvailAppsClassOnOKWindow(Integer wn)
begin
  SearchForApps; // (wn);
  return;
end;

global
procedure SearchAvailableAppsLsm()
begin
  Integer nwn;
  record RcVc RepSpec;
  
  nwn = OpenWindow("SearchAvailAppsClass",0,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.flags[0] = 10;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 1;
  RepSpec.flags[4] = 1;
  RepSpec.f1 = "ENG";
  RepSpec.f2 = "UK";
  PutWindowRecord(nwn,RepSpec);  
  return;
end;

global
function Boolean RegisterDefinitionLClassOnOpenWindow(integer wn)
begin
  string 255 subset;
  uuid curapp;
  
  curapp = CurrentApp;
  
  if (BlankUUID(curapp)) then begin
    subset = "";
  end else begin
    subset = curapp;
  end;
  
  SetWindowSubset(wn,subset);
  RegisterDefinitionLClassOnOpenWindow = false;
  return;
end;

global
function Boolean WindowDefinitionLClassOnOpenWindow(integer wn)
begin
  string 255 subset;
  uuid curapp;
  
  curapp = CurrentApp;
  
  if (BlankUUID(curapp)) then begin
    subset = "";
  end else begin
    subset = curapp;
  end;
  
  SetWindowSubset(wn,subset);
  WindowDefinitionLClassOnOpenWindow = false;
  return;
end;

global
procedure ExportAppsm()
begin
  record SmartAppVc SAr;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,SAr);
  RecordNew(RepSpec);
  RepSpec.RecordUUID = SAr.UUID;
  RepSpec.repname = "SmartAppEn";
  RepSpec.Media = mtFile;
  RunExport(RepSpec,true);
end;

global
procedure ExportAppWithDatasm()
begin
  record SmartAppVc SAr;
  record RcVc RepSpec;
  
  GetWindowRecord(CurWindow,SAr);
  RecordNew(RepSpec);
  RepSpec.RecordUUID = SAr.UUID;
  RepSpec.repname = "SmartAppEn";
  RepSpec.Media = mtFile;
  RepSpec.flags[0] = 1;
  RunExport(RepSpec,true);
end;

/*
      RepSpec.set_pstring("f1",cp->TCPIP);
      RepSpec.set_integer("flags[0]",cp->portnr);
      RepSpec.set_pstring("ObjStr",cp->CompanyCode);
      RepSpec.set_pstring("f2",cp->CompanyName);
      RepSpec.set_pstring("f3",cp->ShortName);
      RepSpec.set_integer("flags[1]",cp->mode);
      
      RepSpec.set_integer("flags[2]",compno - 1);
*/

global
updating function Boolean SetupSyncWClassOnOKWindow(Integer wn)
begin
  record RcVc RepSpec;
  record CompaniesBlock CBr;
  row CompaniesBlock CBrw;
  
  GetWindowRecord(wn,RepSpec);
  
  BlockLoad(CBr);
  MatRowGet(CBr,RepSpec.flags[2],CBrw);
  
  CBrw.TCPIP = RepSpec.f1;
  CBrw.Port = RepSpec.flags[0];
  CBrw.CompCode = RepSpec.ObjStr;
  CBrw.CompName = RepSpec.f2;
  CBrw.ShortName = RepSpec.f3;
  CBrw.Mode = RepSpec.flags[1];
  
  MatRowPut(CBr,RepSpec.flags[2],CBrw);
  BlockStore(CBr);
  
end;

updating procedure SetSyncMode(Integer mode)
begin
  record CompaniesBlock CBr;
  row CompaniesBlock CBrw;
  Integer compno;
  
  compno = CurrentCompany -1;
  BlockLoad(CBr);
  MatRowGet(CBr,compno,CBrw);
  CBrw.Mode = mode;
  MatRowPut(CBr,compno,CBrw);
  BlockStore(CBr);
end;

global
updating procedure SetProgramModeLocal()
begin
  SetSyncMode(kProgramModeLocal);
end;

global
updating procedure SetProgramModeLiveSync()
begin
  SetSyncMode(kProgramModeLiveSync);
end;

global
procedure CoordinateMapPosition()
begin
  record PositionAlertVc PAr;
  string 200 tstr,t2;
  Integer wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,PAr);
  if (PAr.Longitude<0) then begin
    t2 = "http://maps.google.com/maps?q=" & ValToString(PAr.Latitude,M45Val,"",".",0) & ValToString(PAr.Longitude,M45Val,"",".",0);
  end else begin
    t2 = "http://maps.google.com/maps?q=" & ValToString(PAr.Latitude,M45Val,"",".",0) & "%2B" & ValToString(PAr.Longitude,M45Val,"",".",0);
  end;
  tstr = ReplaceCharByString(t2,"-","%2D");
  OpenWebBrowser(tstr);
  return;
end;

global
procedure SmartAppLClassClearAppLsm()
begin
  record SmartAppVc SAr;
  Integer wn;
  
  wn = CurWindow;
  if (ReadMarkedRecord(wn,SAr)) then begin
    ToolAction(wn,ToolSetBlankApp,0,false);
  end;
  return;
end;
