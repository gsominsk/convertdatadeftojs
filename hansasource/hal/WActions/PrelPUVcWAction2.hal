external function string 255 FindINObjects(string,string);
external function string 40 SerialNrSClassSpecPName(string);
external function val DivRateToBase1(string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean ReadFirstItem(string,var record INVc,Boolean,Boolean);
external function Boolean PrelPUDClassTransDateEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassCurncyCodeEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassFrRateEFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassToRateB1EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassToRateB2EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassBaseRate1EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassBaseRate2EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassCost1EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassCost2EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassCost3EFAfter(Integer,Integer,Integer,Integer);
external function Boolean PrelPUDClassVECodeEFAfter(Integer,Integer,Integer,Integer);
external procedure PrelPURecalcCost(var record PrelPUVc);
external procedure PrelPUSetShipCost(var record PrelPUVc,Integer);
external procedure PrelPUSumUp(var record PrelPUVc);
external procedure PrelPUCalcCostPrice(string,val,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string);
external procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external procedure CalculatePrelPURowSum(val,val,string,var val,val,
                                     val,val,val,val,val,
                                     string,var val,Boolean,string,
                                     val,val,val,val,val);
external procedure PUCalcPerc(val,string,var val);
external procedure GetItemVATCode(string,Integer,var string,Boolean);
external procedure CurValToOtherCur(Date,string,val,string,var val,roundmode);
external function Boolean GetFirstPurchaseItem(string,string,string,var record PIVc);
external function Boolean FindItemVAR(string,var string,var string,var string,var string);

global 
function Boolean PrelPUDClassArtCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record CostAccBlock CostAccRec;
  record PIVc PIr;
  record INVc INr;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  Boolean chsum,chrsum;
  string 60 sz,msk,mskrep,pcstr,tstr;
  val t,p,t2,s;
  record SysFormatBlock SysFormatRec;
  string 200 varsubset;
      
  GetWindowRecord(wn,PrelPUr);
  MatRowGet(PrelPUr,rownr,PrelPUrw);    
  if ((changedf!=0) or ((blank(PrelPUrw.Spec)) and (nonblank(PrelPUrw.ArtCode)))) then begin
    BlockLoad(SysFormatRec);
    DeselectWindow(wn,false);
    begin      
      if (ReadFirstItem(PrelPUrw.ArtCode,INr,true,true)) then begin
        if (FindItemVAR(INr.Code,sz,msk,mskrep,varsubset)) then begin INr.Code = PrelPUrw.ArtCode; end;
        BlockLoad(CostAccRec);        
        if (nonblank(INr.WarnText1)) then begin
          MessageBox(0,INr.WarnText1);
        end;
        if (INr.ItemType!=1) then begin
          MessageBox(0,USetStr(1301));
        end;
        pcstr = "";
        if (GetFirstPurchaseItem(PrelPUrw.ArtCode,"",PrelPUr.VECode,PIr)) then begin
          if (PIr.CurncyCode==PrelPUr.CurncyCode) then begin
            PrelPUrw.UPrice = PIr.PurPrice;
            p = PIr.PurPrice;
          end else begin
            CurValToOtherCur(PrelPUr.TransDate,PIr.CurncyCode,PIr.PurPrice,PrelPUr.CurncyCode,t,DefaultCurRoundOff);
            PrelPUrw.UPrice = t;  
            p = PrelPUrw.UPrice;
          end;          
          PrelPUrw.CustomsCost = PIr.PurchaseCost;
        end else begin
          PrelPUrw.Spec = INr.Name;
          PrelPUrw.UPrice = INr.InPrice;          
          p = INr.InPrice;
          if (INr.PriceFactor!=0) then begin
            p = p/INr.PriceFactor;
          end;
          p = DivRateToBase1(PrelPUr.CurncyCode,p,PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,DefaultCurRoundOff);
        end; 
        GetItemVATCode(PrelPUrw.ArtCode,0,tstr,false);
        PrelPUrw.VATCode = tstr;
        PrelPUrw.Coefficient = INr.UnitCoefficient;
        PrelPUrw.ArtCode = INr.Code;
        PrelPUrw.Spec = INr.Name;
        PrelPUrw.Objects = FindINObjects(INr.Objects,INr.Group);
        PrelPUrw.UPrice = p;
        PrelPUrw.UnitXval = INr.Width;
        PrelPUrw.UnitYval = INr.Height;
        PrelPUrw.UnitZval = INr.Depth;                  
        PrelPUrw.VATCode = PrelPUrw.VATCode;                  
        t2 = MulRateToBase1(PrelPUr.CurncyCode,p,PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,DefaultCurRoundOff);
        PUCalcPerc(t2,PrelPUrw.CustomsCost,t2);
        pcstr = ValToString(t2,M45Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
        PrelPUrw.CustomsCost = pcstr;
        PrelPUrw.BasePrice = INr.UPrice1;
        tstr = INr.ExtraCost;
        PrelPUrw.Extra = tstr;
        chrsum = true;
      end else begin
        Beep;
      end;
      if (chrsum) then begin
        PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                        PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                        PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                        PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
        PrelPUrw.CostPrice = p;        
        PrelPUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PrelPUr,rownr,PrelPUrw);    
      if (chsum) then begin
        PrelPUSumUp(PrelPUr);
      end;
      PutWindowRecord(wn,PrelPUr);
    end;
  end;
  PrelPUDClassArtCodeEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  Boolean chsum;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    CalculatePrelPURowSum(PrelPUrw.Quant,PrelPUrw.UPrice,PrelPUrw.Extra,PrelPUrw.CostPrice,PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,false,PrelPUr.CurncyCode,PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2);
    PrelPUrw.Sum = p;
    chsum = true;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassQuantEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassSumEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s,up;
  Boolean chsum;

  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    CalculatePrelPURowSum(PrelPUrw.Quant,up,PrelPUrw.Extra,p,PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,s,true,PrelPUr.CurncyCode,PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2);
    PrelPUrw.CostPrice = p;
    PrelPUrw.UPrice = up;
    PrelPUrw.Sum = s;
    chsum = true;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassSumEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassUPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = p;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassUPriceEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassShipCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    if (rownr>=0) then begin
      MatRowGet(PrelPUr,rownr,PrelPUrw);    
      chrsum = true;
      if (chrsum) then begin
        PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
        PrelPUrw.CostPrice = p;
        PrelPUrw.Sum = s;
        chsum = true;
      end;
      MatRowPut(PrelPUr,rownr,PrelPUrw);    
    end else begin
      PrelPUSetShipCost(PrelPUr,0);
      PrelPURecalcCost(PrelPUr);
    end;
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassShipCostEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassRowCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = p;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassRowCost1EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassRowCost2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = p;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassRowCost2EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassRowCost3EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = p;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassRowCost3EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassRowCost4EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = p;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassRowCost4EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassRowCost5EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = p;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassRowCost5EFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassExtraEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = p;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassExtraEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCustomsCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    if (rownr>=0) then begin
      MatRowGet(PrelPUr,rownr,PrelPUrw);    
      chrsum = true;
      if (chrsum) then begin
        PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,p,PrelPUrw.Quant,s,PrelPUrw.VATCode);                      
        PrelPUrw.CostPrice = p;
        PrelPUrw.Sum = s;        
        chsum = true;
      end;
      MatRowPut(PrelPUr,rownr,PrelPUrw);    
    end else begin
      PrelPUSetShipCost(PrelPUr,1);
      PrelPURecalcCost(PrelPUr);
    end;
    if (chsum) then begin    
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCustomsCostEFAfter = true;
  return;
end;

global 
function Boolean PrelPUDClassCostPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PrelPUVc PrelPUr;
  row PrelPUVc PrelPUrw;
  Boolean chsum,chrsum;
  val t,t1,t2,cc,vat,bas,s;
  string 255 tstr;
  string 2 vatcode;
  record SysFormatBlock SysFormatRec;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,PrelPUr);
    DeselectWindow(wn,false);
    BlockLoad(SysFormatRec);
    MatRowGet(PrelPUr,rownr,PrelPUrw);    
    bas = MulRateToBase1(PrelPUr.CurncyCode,PrelPUrw.UPrice,PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,DefaultCurRoundOff);
    if (PrelPUr.InclVAT==1) then begin
      if (nonblank(PrelPUrw.VATCode)) then begin
        vatcode = PrelPUrw.VATCode;
      end else begin
        GetItemVATCode(PrelPUrw.ArtCode,0,vatcode,false);
      end;
      MulVATIV(vatcode,bas,vat,t1,PrelPUr.InclVAT,0);
      bas = bas - vat;
    end;
    tstr = PrelPUrw.Extra;
    if (Mid(tstr,len(tstr),1)=="%") then begin
      t = PrelPUrw.CostPrice - PrelPUrw.ShipCost;
      t = PrelPUrw.CostPrice - PrelPUrw.RowCost1;
      t = PrelPUrw.CostPrice - PrelPUrw.RowCost2;
      t = PrelPUrw.CostPrice - PrelPUrw.RowCost3;
      t = PrelPUrw.CostPrice - PrelPUrw.RowCost4;
      t = PrelPUrw.CostPrice - PrelPUrw.RowCost5;
      PUCalcPerc(PrelPUrw.UPrice,PrelPUrw.CustomsCost,cc);
      t = t - cc;
      t2 = t*100;
      bas = t2/bas;
      bas = bas - 100;
      PrelPUrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
      PrelPUrw.Extra = PrelPUrw.Extra & "%";
    end else begin
      bas = PrelPUrw.CostPrice - bas;
      bas = bas - PrelPUrw.ShipCost;
      bas = bas - PrelPUrw.RowCost1;
      bas = bas - PrelPUrw.RowCost2;
      bas = bas - PrelPUrw.RowCost3;
      bas = bas - PrelPUrw.RowCost4;
      bas = bas - PrelPUrw.RowCost5;
      PUCalcPerc(PrelPUrw.UPrice,PrelPUrw.CustomsCost,cc);
      bas = bas - cc;
      PrelPUrw.Extra = ValToString(bas,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,0);
    end;
    chrsum = true;
    if (chrsum) then begin
      PrelPUCalcCostPrice(PrelPUrw.ArtCode,PrelPUrw.UPrice,PrelPUr.InclVAT,PrelPUrw.Extra,PrelPUr.CurncyCode,
                      PrelPUr.FrRate,PrelPUr.ToRateB1,PrelPUr.ToRateB2,PrelPUr.BaseRate1,PrelPUr.BaseRate2,
                      PrelPUrw.ShipCost,PrelPUrw.RowCost1,PrelPUrw.RowCost2,PrelPUrw.RowCost3,PrelPUrw.RowCost4,PrelPUrw.RowCost5,
                      PrelPUrw.CustomsCost,bas,PrelPUrw.Quant,s,PrelPUrw.VATCode);
      PrelPUrw.CostPrice = bas;
      PrelPUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PrelPUr,rownr,PrelPUrw);    
    if (chsum) then begin
      PrelPUSumUp(PrelPUr);
    end;
    PutWindowRecord(wn,PrelPUr);
  end;
  PrelPUDClassCostPriceEFAfter = true;
  return;
end;

global
function Boolean PrelPUDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "CostPrice": res = PrelPUDClassCostPriceEFAfter(wn,fn,rownr,changed);
    case "CustomsCost": res = PrelPUDClassCustomsCostEFAfter(wn,fn,rownr,changed);
    case "Extra": res = PrelPUDClassExtraEFAfter(wn,fn,rownr,changed);
    case "RowCost5": res = PrelPUDClassRowCost5EFAfter(wn,fn,rownr,changed);
    case "RowCost4": res = PrelPUDClassRowCost4EFAfter(wn,fn,rownr,changed);
    case "RowCost3": res = PrelPUDClassRowCost3EFAfter(wn,fn,rownr,changed);
    case "RowCost2": res = PrelPUDClassRowCost2EFAfter(wn,fn,rownr,changed);
    case "RowCost1": res = PrelPUDClassRowCost1EFAfter(wn,fn,rownr,changed);
    case "ShipCost": res = PrelPUDClassShipCostEFAfter(wn,fn,rownr,changed);
    case "UPrice": res = PrelPUDClassUPriceEFAfter(wn,fn,rownr,changed);
    case "Sum": res = PrelPUDClassSumEFAfter(wn,fn,rownr,changed);
    case "Quant": res = PrelPUDClassQuantEFAfter(wn,fn,rownr,changed);
    case "ArtCode": res = PrelPUDClassArtCodeEFAfter(wn,fn,rownr,changed);
    case "VECode": res = PrelPUDClassVECodeEFAfter(wn,fn,rownr,changed);
    case "TransDate": res = PrelPUDClassTransDateEFAfter(wn,fn,rownr,changed);
    case "CurncyCode": res = PrelPUDClassCurncyCodeEFAfter(wn,fn,rownr,changed);
    case "FrRate": res = PrelPUDClassFrRateEFAfter(wn,fn,rownr,changed);
    case "ToRateB1": res = PrelPUDClassToRateB1EFAfter(wn,fn,rownr,changed);
    case "ToRateB2": res = PrelPUDClassToRateB2EFAfter(wn,fn,rownr,changed);
    case "BaseRate1": res = PrelPUDClassBaseRate1EFAfter(wn,fn,rownr,changed);
    case "BaseRate2": res = PrelPUDClassBaseRate2EFAfter(wn,fn,rownr,changed);
    case "Cost1": res = PrelPUDClassCost1EFAfter(wn,fn,rownr,changed);
    case "Cost2": res = PrelPUDClassCost2EFAfter(wn,fn,rownr,changed);
    case "Cost3": res = PrelPUDClassCost3EFAfter(wn,fn,rownr,changed);
  end;
  PrelPUDClassAfterEditField = res;
  RETURN;
END;

global
function string 40 PrelPUDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "SerialNr": psname = SerialNrSClassSpecPName(defpsname);
    case "ArtCode": DeselectWindow(wn,false);
  end;
  PrelPUDClassSpecPasteName = psname;
  return;
end;
