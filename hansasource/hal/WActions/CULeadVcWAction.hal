remote function Boolean CreateMailFromLead(record CUVc,var record MailVc,Boolean);
remote function Boolean CreateOpportunityFromLead(record CUVc,var record OYVc,Boolean);

function Boolean CULeadDClassStatusEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc Leadr;
  record LeadStatusVc LSr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,Leadr);
    LSr.Code = Leadr.Status;
    ReadFirstMain(LSr,1,true);
    Leadr.StatusComment = LSr.Comment;
    PutWindowRecord(wn,Leadr);
  end;
  CULeadDClassStatusEFAfter = res;
  return;
end;

function Boolean CULeadDClassSourceEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc Leadr;
  record LeadSourceVc LSr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,Leadr);
    LSr.Code = Leadr.Source;
    ReadFirstMain(LSr,1,true);
    Leadr.SourceComment = LSr.Comment;
    PutWindowRecord(wn,Leadr);
  end;
  CULeadDClassSourceEFAfter = res;
  return;
end;

function Boolean CULeadDClassIndustryEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc Leadr;
  record IndustryVc Indr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,Leadr);
    Indr.Code = Leadr.Status;
    ReadFirstMain(Indr,1,true);
    Leadr.IndustryComment = Indr.Comment;
    PutWindowRecord(wn,Leadr);
  end;
  CULeadDClassIndustryEFAfter = res;
  return;
end;

function Boolean CULeadDClassItemClassificationEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc Leadr;
  record DIVc DIr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,Leadr);
    DIr.Code = Leadr.ItemClassification;
    ReadFirstMain(DIr,1,true);
    Leadr.ItemClassificationName = DIr.Name;
    PutWindowRecord(wn,Leadr);
  end;
  CULeadDClassItemClassificationEFAfter = res;
  return;
end;

function Boolean CULeadDClassPartnerEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record CUVc Leadr;
  record CUVc CUr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,Leadr);
    CUr.Code = Leadr.ItemClassification;
    ReadFirstMain(CUr,1,true);
    Leadr.PartnerName = CUr.Name;
    PutWindowRecord(wn,Leadr);
  end;
  CULeadDClassPartnerEFAfter = res;
  return;
end;

global
function Boolean CULeadDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Status": res = CULeadDClassStatusEFAfter(wn,changed!=0);
    case "Industry": res = CULeadDClassIndustryEFAfter(wn,changed!=0);
    case "Source": res = CULeadDClassSourceEFAfter(wn,changed!=0);
    case "Partner": res = CULeadDClassPartnerEFAfter(wn,changed!=0);
    case "ItemClassification": res = CULeadDClassItemClassificationEFAfter(wn,changed!=0);
  end;
  return;
end;

global
procedure NewMailLeadDsm()
begin
  record CUVc Leadr;
  record MailVc Mailr;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,Leadr);
  if (CreateMailFromLead(Leadr,Mailr,true)) then begin
    nwn = OpenWindow("MailDClass",1,0,"","",Mailr);  
  end;
  return;
end;

global
procedure NewOpportunityLeadDsm()
begin
  record CUVc Leadr;
  record OYVc OYr;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,Leadr);
  if (CreateOpportunityFromLead(Leadr,OYr,true)) then begin
    nwn = OpenWindow("OYDClass",1,0,"","",OYr);  
  end;
  return;
end;
