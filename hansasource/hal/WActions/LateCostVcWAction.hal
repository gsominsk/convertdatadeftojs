remote procedure PastePURowToLateCost(record PUVc,var record LateCostVc,Integer,var Integer);
remote procedure PastePUToLateCost(record PUVc,var record LateCostVc);
remote procedure LateCostVc_PasteCustomsCost(var record LateCostVc,Integer);
remote procedure LateCostVc_PasteRowCost(var record LateCostVc,Integer);
remote procedure LateCostVc_PasteCost5(var record LateCostVc);
remote procedure LateCostVc_PasteCost4(var record LateCostVc);
remote procedure LateCostVc_PasteCost3(var record LateCostVc);
remote procedure LateCostVc_PasteCost2(var record LateCostVc);
remote procedure LateCostVc_PasteCost1(var record LateCostVc);
remote procedure LateCostVc_PasteShipCost(var record LateCostVc,Integer);
external procedure LateCostSumUp(var record LateCostVc);
remote function Integer LateCostVc_PasteTransDate(var record LateCostVc);
remote procedure LateCostRecalcCost(var record LateCostVc);
remote function Boolean LateCostVc_PasteCostPrice(var record LateCostVc,Integer);
external procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);
external procedure CalculatePURowSum(val,val,string,var val,val,
                                     val,val,val,val,val,
                                     string,var val,Boolean,string,
                                     val,val,val,val,val);

function Boolean LateCostDClassCostPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    if (LateCostVc_PasteCostPrice(LateCostr,rownr)) then begin
      PutWindowRecord(wn,LateCostr);
      SelectWindow(wn);
    end;
  end;
  LateCostDClassCostPriceEFAfter = true;
  return;
end;
 
function Boolean LateCostDClassFrRateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostRecalcCost(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassFrRateEFAfter = true;
  return;
end;
 
function Boolean LateCostDClassToRateB1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostRecalcCost(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassToRateB1EFAfter = true;
  return;
end;
 
function Boolean LateCostDClassToRateB2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostRecalcCost(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassToRateB2EFAfter = true;
  return;
end;
 
function Boolean LateCostDClassBaseRate1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostRecalcCost(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassBaseRate1EFAfter = true;
  return;
end;
 
function Boolean LateCostDClassBaseRate2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostRecalcCost(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassBaseRate2EFAfter = true;
  return;
end;

function Boolean LateCostDClassTransDateEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  Integer res;

  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    res = LateCostVc_PasteTransDate(LateCostr);
    if (res==0) then begin
      PutWindowRecord(wn,LateCostr);
      SelectWindow(wn);
    end else begin
      MessageBox(res,"");
    end;
  end;
  LateCostDClassTransDateEFAfter = true;
  return;
end;
 
function Boolean LateCostDClassQuantEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  row LateCostVc LateCostrw;
  val p,s;
  Boolean chsum;

  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    MatRowGet(LateCostr,rownr,LateCostrw);    
    CalculatePURowSum(LateCostrw.Quant,LateCostrw.UPrice,LateCostrw.Extra,LateCostrw.CostPrice,LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                      LateCostrw.CustomsCost,p,false,LateCostr.CurncyCode,LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2);
    LateCostrw.Sum = p;
    chsum = true;
    MatRowPut(LateCostr,rownr,LateCostrw);    
    if (chsum) then begin
      LateCostSumUp(LateCostr);
    end;
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassQuantEFAfter = true;
  return;
end;
 
function Boolean LateCostDClassSumEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  row LateCostVc LateCostrw;
  val p,s,up;
  Boolean chsum;

  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    MatRowGet(LateCostr,rownr,LateCostrw);    
    CalculatePURowSum(LateCostrw.Quant,up,LateCostrw.Extra,p,LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                      LateCostrw.CustomsCost,s,true,LateCostr.CurncyCode,LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2);
    LateCostrw.CostPrice = p;
    LateCostrw.Sum = s;
    LateCostrw.UPrice = up;
    chsum = true;
    MatRowPut(LateCostr,rownr,LateCostrw);    
    if (chsum) then begin
      LateCostSumUp(LateCostr);
    end;
    PutWindowRecord(wn,LateCostr);
  end;
  LateCostDClassSumEFAfter = true;
  return;
end;
 
function Boolean LateCostDClassUPriceEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  Boolean chsum,chrsum;
  record LateCostVc LateCostr;
  row LateCostVc LateCostrw;
  val p,s;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    MatRowGet(LateCostr,rownr,LateCostrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(LateCostrw.ArtCode,LateCostrw.UPrice,LateCostr.InclVAT,0,LateCostrw.Extra,LateCostr.CurncyCode,
                      LateCostr.FrRate,LateCostr.ToRateB1,LateCostr.ToRateB2,LateCostr.BaseRate1,LateCostr.BaseRate2,
                      LateCostrw.ShipCost,LateCostrw.RowCost1,LateCostrw.RowCost2,LateCostrw.RowCost3,LateCostrw.RowCost4,LateCostrw.RowCost5,
                      LateCostrw.CustomsCost,p,LateCostrw.Quant,s,LateCostrw.VATCode,0);
      LateCostrw.CostPrice = p;
      LateCostrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(LateCostr,rownr,LateCostrw);    
    if (chsum) then begin
      LateCostSumUp(LateCostr);
    end;
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassUPriceEFAfter = true;
  return;
end;

global 
function Boolean LateCostDClassShipCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteShipCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassShipCostEFAfter = true;
  return;
end;

function Boolean LateCostDClassCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteCost1(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassCost1EFAfter = true;
  return;
end;

function Boolean LateCostDClassCost2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteCost2(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassCost2EFAfter = true;
  return;
end;

function Boolean LateCostDClassCost3EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteCost3(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassCost3EFAfter = true;
  return;
end;

function Boolean LateCostDClassCost4EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteCost4(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassCost4EFAfter = true;
  return;
end;

function Boolean LateCostDClassCost5EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteCost5(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassCost5EFAfter = true;
  return;
end;
 
function Boolean LateCostDClassRowCost1EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;

  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteRowCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassRowCost1EFAfter = true;
  return;
end;

function Boolean LateCostDClassRowCost2EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;

  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteRowCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassRowCost2EFAfter = true;
  return;
end;

function Boolean LateCostDClassRowCost3EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;

  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteRowCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassRowCost3EFAfter = true;
  return;
end;

function Boolean LateCostDClassRowCost4EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;

  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteRowCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassRowCost4EFAfter = true;
  return;
end;

function Boolean LateCostDClassRowCost5EFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;

  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteRowCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassRowCost5EFAfter = true;
  return;
end;

function Boolean LateCostDClassExtraEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;

  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteRowCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassExtraEFAfter = true;
  return;
end;

function Boolean LateCostDClassCustomsCostEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostVc_PasteCustomsCost(LateCostr,rownr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassCustomsCostEFAfter = true;
  return;
end;

function Boolean LateCostDClassVATCodeEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    LateCostSumUp(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassVATCodeEFAfter = true;
  return;
end;

function Boolean LateCostDClassPUNrEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record LateCostVc LateCostr;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);

    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassPUNrEFAfter = true;
  return;
end;

function Boolean LateCostDClassPURowEFAfter(Integer wn,Integer fn,Integer rownr,Integer changedf)
begin
  record PUVc PUr;
  record LateCostVc LateCostr;
  row LateCostVc LateCostrw;
  Integer rowi;
  Boolean chsum;
  
  if (changedf!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    if (rownr>-1) then begin
      MatRowGet(LateCostr,rownr,LateCostrw);
      PUr.SerNr = LateCostr.PUNr;
      if (ReadFirstMain(PUr,1,true)) then begin
        rowi = rownr;
        PastePURowToLateCost(PUr,LateCostr,LateCostrw.PURow,rowi);
        chsum = true;
      end;      
    end;
    if (chsum) then begin
      LateCostSumup(LateCostr);
    end;    
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;
  LateCostDClassPURowEFAfter = true;
  return;
end;

function Boolean LateCostDClassPUNrEFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;
  record LateCostVc LateCostr;
  record PUVc PUr;
  LongInt oldnr;

  if (changed!=0) then begin
    GetWindowRecord(wn,LateCostr);
    DeselectWindow(wn,false);
    PUr.SerNr = LateCostr.PUNr;
    if (ReadFirstMain(PUr,1,true)) then begin
      PastePUToLateCost(PUr,LateCostr);
    end else begin
      oldnr = LateCostr.SerNr;
      RecordNew(LateCostr);
      LateCostr.SerNr = oldnr;
    end;
    LateCostSumup(LateCostr);
    PutWindowRecord(wn,LateCostr);
    SelectWindow(wn);
  end;  
  LateCostDClassPUNrEFAfter = res;
  RETURN;
END;

global
function Boolean LateCostDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "PUNr": res =  LateCostDClassPUNrEFAfter(wn,fn,rownr,changed);
    case "PURow": res =  LateCostDClassPURowEFAfter(wn,fn,rownr,changed);
    case "CostPrice": res =  LateCostDClassCostPriceEFAfter(wn,fn,rownr,changed);
    case "BaseRate2": res =  LateCostDClassBaseRate2EFAfter(wn,fn,rownr,changed);
    case "BaseRate1": res =  LateCostDClassBaseRate1EFAfter(wn,fn,rownr,changed);
    case "ToRateB2": res =  LateCostDClassToRateB2EFAfter(wn,fn,rownr,changed);
    case "ToRateB1": res =  LateCostDClassToRateB1EFAfter(wn,fn,rownr,changed);
    case "FrRate": res =  LateCostDClassFrRateEFAfter(wn,fn,rownr,changed);
    case "TransDate": res =  LateCostDClassTransDateEFAfter(wn,fn,rownr,changed);
    case "Quant": res =  LateCostDClassQuantEFAfter(wn,fn,rownr,changed);
    case "Sum": res =  LateCostDClassSumEFAfter(wn,fn,rownr,changed);
    case "UPrice": res =  LateCostDClassUPriceEFAfter(wn,fn,rownr,changed);
    case "ShipCost": res =  LateCostDClassShipCostEFAfter(wn,fn,rownr,changed);
    case "Cost1": res =  LateCostDClassCost1EFAfter(wn,fn,rownr,changed);
    case "Cost2": res =  LateCostDClassCost2EFAfter(wn,fn,rownr,changed);
    case "Cost3": res =  LateCostDClassCost3EFAfter(wn,fn,rownr,changed);
    case "Cost4": res =  LateCostDClassCost4EFAfter(wn,fn,rownr,changed);
    case "Cost5": res =  LateCostDClassCost5EFAfter(wn,fn,rownr,changed);
    case "RowCost1": res =  LateCostDClassRowCost1EFAfter(wn,fn,rownr,changed);
    case "RowCost2": res =  LateCostDClassRowCost2EFAfter(wn,fn,rownr,changed);
    case "RowCost3": res =  LateCostDClassRowCost3EFAfter(wn,fn,rownr,changed);
    case "RowCost4": res =  LateCostDClassRowCost4EFAfter(wn,fn,rownr,changed);
    case "RowCost5": res =  LateCostDClassRowCost5EFAfter(wn,fn,rownr,changed);
    case "Extra": res =  LateCostDClassExtraEFAfter(wn,fn,rownr,changed);
    case "CustomsCost": res =  LateCostDClassCustomsCostEFAfter(wn,fn,rownr,changed);
    case "VATCode": res =  LateCostDClassVATCodeEFAfter(wn,fn,rownr,changed);
  end;
  LateCostDClassAfterEditField = res;
  RETURN;
END;

global 
function Boolean LateCostDClassInsertRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;

  res = false;
  LateCostDClassInsertRowTest = res;
  RETURN;
END;

global 
function Boolean LateCostDClassOverStrikeTest(Integer wn,Integer rownr)
begin
  Boolean res;

  res = false;
  LateCostDClassOverStrikeTest = res;
  return;
end;

global 
function Boolean LateCostDClassDeleteRowTest(Integer wn, Integer rownr)
BEGIN
  Boolean res;
  record LateCostVc LateCostr;

  res = false;
  switch (WindowState(wn)) begin
    case Rs_update:
      GetPrevWindowRecord(wn,LateCostr);
    case Rs_normal:
      GetWindowRecord(wn,LateCostr);
  end;
  if (LateCostr.OKFlag==0) then begin
    res = true;
  end;
  LateCostDClassDeleteRowTest = res;
  RETURN;
END;

global
function Boolean LateCostDClassOnOverStrike(Integer wn,Integer rownr)
BEGIN
  record LateCostVc LateCostr;

  if (rownr>=0) then begin
    GetWindowRecord(wn,LateCostr);    
    LateCostSumUp(LateCostr);
    PutWindowRecord(wn,LateCostr);    
  end;
  LateCostDClassOnOverStrike = true;
  RETURN;
END;

global
function Boolean LateCostDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record LateCostVc LateCostr;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,LateCostr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,LateCostr);
  end;  
  if (LateCostr.OKFlag!=0) then begin
    res = false;
  end;
  LateCostDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean LateCostDClassInclVATButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode;
  record LateCostVc LateCostr;

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,LateCostr);
  end;  
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,LateCostr);
  end;  
  if (LateCostr.OKFlag!=0) then begin
    res = false;
  end;
  LateCostDClassInclVATButtonAction = res;
  return;
end;
