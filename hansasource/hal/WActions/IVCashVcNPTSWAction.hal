external function Boolean TestForMATVARINS(Integer);
external function Boolean HasJewelleryInterface();
external procedure M4PadString(string,Integer,string,Boolean,var string);

/*
procedure AddStringListRow(Integer wn,string artcode,string spec,val q,val p,val s,string tag)
begin
  string 255 tstr,tstr2;

  M4PadString(artcode,9," ",false,tstr);
  M4PadString(spec,20," ",false,tstr2);
  tstr = tstr & tstr2;
  tstr2 = ValToString(q,M40Val,ThousandSeparator,DecimalSeparator,0);
  M4PadString(tstr2,4," ",true,tstr2);
  tstr = tstr & tstr2;
  tstr2 = ValToString(p,M4Val,ThousandSeparator,DecimalSeparator,0);
  M4PadString(tstr2,9," ",true,tstr2);
  tstr = tstr & tstr2;
  tstr2 = ValToString(s,M4Val,ThousandSeparator,DecimalSeparator,0);
  M4PadString(tstr2,12," ",true,tstr2);
  tstr = tstr & tstr2;
  SetListStringAndTag(wn,0,tstr,tag);

  return;
end;
*/
procedure AddStringListRow(Integer wn,Integer width,Integer POSFontSize,string artcode,string spec,string q,string p,string s,string r,string tag,string vatcode,string location)
begin
  string 255 tstr,tstr2;
  Integer m,al,dl,ql,pl,sl,rl;
  
  AddListRow(wn,"receipt",1,tag,0);
  AddListData(wn,"receipt","artcode",artcode);
  AddListData(wn,"receipt","spec",spec);
  if (HasJewelleryInterface) then begin
    AddListData(wn,"receipt","vatcode",vatcode);
    AddListData(wn,"receipt","location",location);
  end;
  AddListData(wn,"receipt","qty",q);
  AddListData(wn,"receipt","price",p);
  
  if (r=="totalrebate") then begin
    AddListData(wn,"receipt","rebate","");
  end else begin
    AddListData(wn,"receipt","rebate",r);
  end;
  
  AddListData(wn,"receipt","rowsum",s);
  return;
end;

procedure AddStringListRow2(Integer wn,string spec,string tag)
begin
  string 255 tstr;

  M4PadString(spec,54," ",false,tstr);
/*
  SetListStringAndTag(wn,0,tstr,tag);
*/
  AddListRow(wn,"receipt",2,tag,0);
  AddListData(wn,"receipt","spec",spec);
  return;
end;

procedure AddStringListRow3(Integer wn,Integer width,Integer POSFontSize,string artcode1,string spec,string q,string artcode2,string s,string tag)
begin
  string 255 tstr,tstr2;
  Integer m,al,dl,ql,a2l,sl;
  
  switch (POSFontSize) begin
    case 0:
      al = 14;
      dl = 34;
      a2l = 14;
      sl = 12;  
    case 1:
      al = 11;
      dl = 21;
      a2l = 11;
      sl = 15;  
    otherwise
      al = 9;
      dl = 14;
      a2l = 9;
      sl = 17;  
  end;
/*
  M4PadString(artcode1,al," ",false,tstr);
  M4PadString(spec,dl," ",false,tstr2);
  tstr = tstr & tstr2;
  M4PadString(q,ql," ",true,tstr2);
  tstr = tstr & tstr2;
  M4PadString(artcode2,a2l," ",true,tstr2);
  tstr = tstr & tstr2;
  M4PadString(s,sl," ",true,tstr2);
  tstr = tstr & tstr2;
  SetListStringAndTag(wn,0,tstr,tag);
*/
  AddListRow(wn,"receipt",3,tag,0);
  AddListData(wn,"receipt","artcode1",artcode1);
  AddListData(wn,"receipt","spec",spec);
  AddListData(wn,"receipt","qty",q);
  AddListData(wn,"receipt","artcode2",artcode2);
  AddListData(wn,"receipt","rowsum",s);
  return;
end;

procedure AddStringListRow4(Integer wn,Integer width,Integer POSFontSize,string artcode,string spec,string q,string p,string s,string r,string tag)
begin
  string 255 tstr,tstr2;
  Integer m,al,dl,ql,pl,sl,rl;

  AddListRow(wn,"receipt",1,tag,0);
  AddListData(wn,"receipt","artcode",artcode);
  AddListData(wn,"receipt","price",spec);
  AddListData(wn,"receipt","qty",q);
  AddListData(wn,"receipt","price",p);
  
  if (r=="totalrebate") then begin
    AddListData(wn,"receipt","rebate","");
  end else begin
    AddListData(wn,"receipt","rebate",r);
  end;
  
  AddListData(wn,"receipt","rowsum",s);
  return;
end;

procedure AddStringListRow5(Integer wn,Integer width,Integer POSFontSize,string artcode,string spec,string q,string p,string s,string r,string tag,string vatcode,string location,Integer rowcolor)
begin
  string 255 tstr,tstr2;
  Integer m,al,dl,ql,pl,sl,rl;
  
  AddListRow2(wn,"receipt",1,tag,0,rowcolor);
  AddListData(wn,"receipt","artcode",artcode);
  AddListData(wn,"receipt","spec",spec);
  if (HasJewelleryInterface) then begin
    AddListData(wn,"receipt","vatcode",vatcode);
    AddListData(wn,"receipt","location",location);
  end;
  AddListData(wn,"receipt","qty",q);
  AddListData(wn,"receipt","price",p);
  
  if (r=="totalrebate") then begin
    AddListData(wn,"receipt","rebate","");
  end else begin
    AddListData(wn,"receipt","rebate",r);
  end;
  
  AddListData(wn,"receipt","rowsum",s);
  return;
end;

procedure AddStringListRowType4(Integer wn,Integer width,Integer POSFontSize,string qtys,string s1,string v1,string s2,string v2,string s3,string v3,string tag)
begin
  string 255 tstr,tstr2;
  Integer m,al,dl,ql,pl,sl,rl;
  
  AddListRow(wn,"receipt",4,tag,0);
  AddListData(wn,"receipt","qtytotal",qtys);
  AddListData(wn,"receipt","subtotaltext",s1);
  AddListData(wn,"receipt","subtotal",v1);
  AddListData(wn,"receipt","vattotaltext",s2);  
  AddListData(wn,"receipt","vattotal",v2);  
  return;
end;


global
procedure IVCashDClass_RefreshStringList(Integer wn,record IVCashVc IVCashr)
begin
  string 255 tstr,tstr2;
  row IVCashVc IVCashrw;
  record SysFormatBlock SFb;
  Integer i,rwcnt;
  row PMBlock PMrw;
  record LocalMachineBlock LMb;
  Boolean testf;
  val totq,tota,totworeb;
  vector Boolean vartcodef;
  Integer line;
  Integer width;
  Integer nwn;
  transaction Boolean gNPTSIVCashCUDisplayDClassf;
  record CashierDefBlock CDb;
  
  ClearStringList(wn);
  width = StringListWidth(wn);
  BlockLoad(SFb);
  BlockLoad(LMb);
  BlockLoad(CDb);
  rwcnt = MatRowCnt(IVCashr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal1;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal1:;
        if (nonblank(IVCashrw.ArtCode)) then begin
          testf = true;
          if (IVCashrw.ovst!=0) then begin testf = false; end;
          if (IVCashrw.ArtCode==CDb.DiscountItem) then begin testf = false; end;
          if (IVCashrw.Quant<0) then begin testf = false; end;
          if (testf) then begin
            totq = totq + IVCashrw.Quant;
            totworeb = totworeb + IVCashrw.Quant*IVCashrw.Price;
            if (vartcodef[IVCashrw.ArtCode]==false) then begin
              tota = tota + 1;
              vartcodef[IVCashrw.ArtCode] = true;
            end;
          end;
        end;
    end;
    
    testf = true;
    if (LMb.IncrementalReceiptPrinting!=0) then begin
      switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal2;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal2:;
          if (IVCashrw.ovst!=0) then begin
            testf = false;
          end;
        case kInvoiceRowTypeVoid:
          testf = false;
      end;
    end else begin
      switch (IVCashrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkInvoiceRowTypeNormal3;
      case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal3:;
          if (IVCashrw.ovst!=0) then begin
            testf = false;
          end;
        case kInvoiceRowTypeVoid:
          testf = false;
      end;
    end;
    if (testf) then begin
      switch (IVCashrw.stp) begin
        case kInvoiceRowTypeStructuredItemComponent:
          goto LkInvoiceRowTypeNormal4;
        case kInvoiceRowTypeNormal:
LkInvoiceRowTypeNormal4:;
          if (IVCashrw.ArtCode==CDb.DiscountItem) then begin
            AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.ArtCode,IVCashrw.Spec,ValToString(blankval,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),IVCashrw.vRebate,i,IVCashrw.VATCode,IVCashrw.Location);
            line = line + 1;
          end else begin
            AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.ArtCode,IVCashrw.Spec,ValToString(IVCashrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),IVCashrw.vRebate,i,IVCashrw.VATCode,IVCashrw.Location);
            line = line + 1;
            if (nonblank(IVCashrw.SerialNr)) then begin
              AddStringListRow2(wn,USetStr(24178) & ":  " & IVCashrw.SerialNr,"");
              line = line + 1;
            end;
            if (nonblank(IVCashrw.SecondarySerialNr)) then begin
              AddStringListRow2(wn,USetStr(25604) & ":  " & IVCashrw.SecondarySerialNr,"");
              line = line + 1;
            end;
            if (nonblank(IVCashrw.AlternateDeviceID)) then begin
              AddStringListRow2(wn,USetStr(25605) & ":  " & IVCashrw.AlternateDeviceID,"");
              line = line + 1;
            end;
            if (nonblank(IVCashrw.MotherNr)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVCashrw.MotherNr & "  :  " & USetStr(23710+IVCashrw.AEStatus),"");
              line = line + 1;
            end;
            if (nonblank(IVCashrw.MotherSecondarySerialNr)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVCashrw.MotherSecondarySerialNr  & "  :  " & USetStr(23710+IVCashrw.AEStatus),"");
              line = line + 1;
            end;
            if (nonblank(IVCashrw.MotherAlternateDeviceID)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVCashrw.MotherAlternateDeviceID & "  :  " & USetStr(23710+IVCashrw.AEStatus),"");
              line = line + 1;
            end;
          end;
        case kInvoiceRowTypeSplitItem:               
          AddStringListRow3(wn,width,LMb.POSFontSize,USetStr(24179) & " " & IVCashrw.ArtCode,IVCashrw.Spec,ValToString(IVCashrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),IVCashrw.SplitArtCode,ValToString(IVCashrw.SplitQuant,M4Qty,ThousandSeparator,DecimalSeparator,0),i);
          line = line + 1;
       case kInvoiceRowTypeMultiBuyDiscount:
          AddStringListRow3(wn,width,LMb.POSFontSize,USetStr(24181),IVCashrw.Spec,"","",ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),i);
       case kInvoiceRowTypeGiftVoucherSold:               
          tstr = IVCashrw.Spec;
          if (blank(tstr)) then begin
            tstr = USetStr(24194);
          end;
          AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,tstr & ": " & IVCashrw.GCNr,"","",ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),IVCashrw.vRebate,i,"","");
        case kInvoiceRowTypeVoid:
          AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.ArtCode,IVCashrw.Spec,ValToString(IVCashrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVCashrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),IVCashrw.vRebate,i,IVCashrw.VATCode,IVCashrw.Location);
          line = line + 1;
      case kInvoiceRowTypeSalesAssistant:
        AddStringListRow2(wn,USetStr(24192) & "  " & IVCashrw.SalesAssistant,"");
      case kInvoiceRowTypeHeader:
        AddStringListRow2(wn,IVCashrw.Spec,i);
      case kInvoiceRowTypeReturnIVNr:
//        AddStringListRow2(wn,USetStr(24169) & "  " & IVCashrw.OrgIVNr,"");
        tstr = "";
        if (IVCashrw.OrgIVNr>0) then begin
          tstr = IVCashrw.OrgIVNr;
        end;
        AddStringListRow3(wn,width,LMb.POSFontSize,"",USetStr(24169) & "  " & tstr,"","",IVCashrw.StandProblemCode,i);
      end;
    end;
  end;
  if (WindowIsMirrored(wn)==false) then begin
    AddStringListRow2(wn,ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24174),"");
  end else begin
    AddStringListRow2(wn,USetStr(24174) & " " & ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0),"");
  end;
  if (nonblank(IVCashr.InvComment)) then begin
    AddStringListRow2(wn,IVCashr.InvComment,"");
  end;
  if ((totworeb-IVCashr.Sum1)>0) then begin
    PutWindowString(wn,"POSfoot_rebate",USetStr(24163) & ": " & ValToString(totworeb-IVCashr.Sum1,M4Val,ThousandSeparator,DecimalSeparator,0));
  end else begin
    PutWindowString(wn,"POSfoot_rebate",USetStr(24163) & ": " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0));
  end;
  if (IVCashr.Sum1>0) then begin
    PutWindowString(wn,"POSfoot_subtotal",USetStr(24162) & ": " & ValToString(IVCashr.Sum1,M4Val,ThousandSeparator,DecimalSeparator,0));
  end else begin
    PutWindowString(wn,"POSfoot_subtotal",USetStr(24162) & ": " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0));
  end;
  if (IVCashr.Sum4>0) then begin
    PutWindowString(wn,"POSfoot_total",USetStr(24171) & ": " & ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0));
  end else begin
    PutWindowString(wn,"POSfoot_total",USetStr(24171) & ": " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0));
  end;
  if (IVCashr.Sum3>0) then begin
    PutWindowString(wn,"POSfoot_VAT",USetStr(24173) & ": " & ValToString(IVCashr.Sum3,M4Val,ThousandSeparator,DecimalSeparator,0));
  end else begin
    PutWindowString(wn,"POSfoot_VAT",USetStr(24173) & ": " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0));
  end;

  if (LMb.HideQty==0) then begin
    if (WindowIsMirrored(wn)==false) then begin
      switch (GuiType) begin
        case kGuiAndroid: //skip row
        case kGuiiPhone:
          AddStringListRow4(wn,width,LMb.POSFontSize,ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24176),USetStr(24171),"","",ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171));
        otherwise
          AddStringListRow(wn,width,LMb.POSFontSize,ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24176),USetStr(24171),"","",ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
//         AddStringListRowType4(wn,width,LMb.POSFontSize,ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24176),USetStr(24171),ValToString(IVCashr.Sum1,M4Val,ThousandSeparator,DecimalSeparator,0),USetStr(24172),ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"","","totals");
      end;          
    end else begin
      switch (GuiType) begin
        case kGuiAndroid: //skip row
        case kGuiiPhone:
          AddStringListRow4(wn,width,LMb.POSFontSize,USetStr(24176) & " " & ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171));
        otherwise
          AddStringListRow(wn,width,LMb.POSFontSize,USetStr(24176) & " " & ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
      end;          
    end;
  end else begin
    switch (GuiType) begin
      case kGuiiPhone: 
        AddStringListRow4(wn,width,LMb.POSFontSize,ValToString(blankval,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171));
      otherwise
        AddStringListRow(wn,width,LMb.POSFontSize,ValToString(blankval,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(IVCashr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
    end;    
  end;
  switch (GuiType) begin
    case kGuiAndroid: //skip row
    case kGuiiPhone: 
      AddStringListRow4(wn,width,LMb.POSFontSize,"",USetStr(24173),"","",ValToString(IVCashr.Sum3,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24173));
    otherwise
      AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24173),"","",ValToString(IVCashr.Sum3,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24173),"","");
  end;
/*  
  switch (GuiType) begin
    case kGuiAndroid: //skip row
    case kGuiiPhone: 
      AddStringListRow4(wn,width,LMb.POSFontSize,"",USetStr(24163),"","",ValToString(totworeb-IVCashr.Sum1,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24173));
    otherwise
      AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24163),"","",ValToString(totworeb-IVCashr.Sum1,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24173),"","");
  end;
*/  
  if (IVCashr.RetValue>0) then begin
    switch (GuiType) begin
      case kGuiAndroid: //skip row
      case kGuiiPhone: 
        AddStringListRow4(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(IVCashr.RetValue,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172));
      otherwise
        AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(IVCashr.RetValue,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172),"","");
    end;
    PutWindowString(wn,"POSfoot_CHANGE",USetStr(24172) & ": " & ValToString(IVCashr.RetValue,M4Val,ThousandSeparator,DecimalSeparator,0));
  end else begin
    switch (GuiType) begin
      case kGuiAndroid: //skip row
      case kGuiiPhone:
        AddStringListRow4(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172));
      otherwise
        AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172),"","");
    end;
    PutWindowString(wn,"POSfoot_CHANGE",USetStr(24172) & ": " & ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0));
  end;

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVCashr,i,IVCashrw);
    switch (IVCashrw.stp) begin
      case kInvoiceRowTypeLoyaltyPointsBonus:
        AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,USetStr(24183),"",IVCashrw.CurncyCode,ValToString(IVCashrw.Points,M4Qty,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeLoyaltyPointsPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,USetStr(24182),"",IVCashrw.CurncyCode,ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeCashPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,IVCashrw.Spec,"",IVCashrw.CurncyCode,ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeCreditCardPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,IVCashrw.Spec,"",IVCashrw.CurncyCode,ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeChequePayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,IVCashrw.Spec,"",IVCashrw.CurncyCode,ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeGiftVoucherPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,IVCashrw.Spec,"",IVCashrw.CurncyCode,ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeOnAccountPayment:
        tstr = IVCashrw.Spec;
        if (blank(tstr)) then begin
          tstr = USetStr(24166);
        end;
        AddStringListRow(wn,width,LMb.POSFontSize,IVCashrw.PayMode,tstr,"",IVCashrw.CurncyCode,ValToString(IVCashrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
    end;
  end;
  StringListScrollBottom(wn);
  SetWindowSubset(wn,GetWindowSubset(wn));
  if (line<=0) then begin line = 1; end;
  SetSelectedListLine(wn,line-1);
  
  if (gNPTSIVCashCUDisplayDClassf==false) then begin
    gNPTSIVCashCUDisplayDClassf = true;
    switch (GetWindowClass(wn)) begin
      case "NPTSIVCashDClass":
        nwn = FindWindow("NPTSIVCashCUDisplayDClass");
        if (nwn>0) then begin
          IVCashDClass_RefreshStringList(nwn,IVCashr);
        end;
      case "NPTSIVCashCUDisplayDClass":
        IVCashDClass_RefreshStringList(wn,IVCashr);
    end;
  end;
  return;
end;

global
procedure IVDClass_RefreshStringList(Integer wn,record IVVc IVr)
begin
  string 255 tstr,tstr2;
  row IVVc IVrw;
  record SysFormatBlock SFb;
  Integer i,rwcnt;
  row PMBlock PMrw;
  record LocalMachineBlock LMb;
  Boolean testf;
  val totq,tota;
  vector Boolean vartcodef;
  Integer line;
  Integer width;
  Integer nwn;
  transaction Boolean gNPTSIVCashCUDisplayDClassf;
  record CashierDefBlock CDb;
  
  ClearStringList(wn);
  width = StringListWidth(wn);
  BlockLoad(SFb);
  BlockLoad(LMb);
  BlockLoad(CDb);
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkIVRowTypeNormal1;
      case kInvoiceRowTypeNormal:
LkIVRowTypeNormal1:;
        if (nonblank(IVrw.ArtCode)) then begin
          testf = true;
          if (IVrw.ovst!=0) then begin testf = false; end;
          if (IVrw.ArtCode==CDb.DiscountItem) then begin testf = false; end;
          if (IVrw.Quant<0) then begin testf = false; end;
          if (testf) then begin
            totq = totq + IVrw.Quant;
            if (vartcodef[IVrw.ArtCode]==false) then begin
              tota = tota + 1;
              vartcodef[IVrw.ArtCode] = true;
            end;
          end;
        end;
    end;
    
    testf = true;
    if (LMb.IncrementalReceiptPrinting!=0) then begin
      switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkIVRowTypeNormal2;
      case kInvoiceRowTypeNormal:
LkIVRowTypeNormal2:;
          if (IVrw.ovst!=0) then begin
            testf = false;
          end;
        case kInvoiceRowTypeVoid:
          testf = false;
      end;
    end else begin
      switch (IVrw.stp) begin
      case kInvoiceRowTypeStructuredItemComponent:
        goto LkIVRowTypeNormal3;
      case kInvoiceRowTypeNormal:
LkIVRowTypeNormal3:;
          if (IVrw.ovst!=0) then begin
            testf = false;
          end;
        case kInvoiceRowTypeVoid:
          testf = false;
      end;
    end;
    if (testf) then begin
      switch (IVrw.stp) begin
        case kInvoiceRowTypeCorrection:
          if (IVrw.ArtCode==CDb.DiscountItem) then begin
            AddStringListRow(wn,width,LMb.POSFontSize,"K | " & IVrw.ArtCode,IVrw.Spec,ValToString(blankval,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,IVrw.VATCode,IVrw.Location);
            line = line + 1;
          end else begin
            AddStringListRow(wn,width,LMb.POSFontSize,"K | " & IVrw.ArtCode,IVrw.Spec,ValToString(IVrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,IVrw.VATCode,IVrw.Location);
            line = line + 1;
            if (nonblank(IVrw.SerialNr)) then begin
              AddStringListRow2(wn,USetStr(24178) & ":  " & IVrw.SerialNr,"");
              line = line + 1;
            end;
            if (nonblank(IVrw.SecondarySerialNr)) then begin
              AddStringListRow2(wn,USetStr(25604) & ":  " & IVrw.SecondarySerialNr,"");
              line = line + 1;
            end;
            if (nonblank(IVrw.AlternateDeviceID)) then begin
              AddStringListRow2(wn,USetStr(25605) & ":  " & IVrw.AlternateDeviceID,"");
              line = line + 1;
            end;
            if (nonblank(IVrw.MotherNr)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVrw.MotherNr & "  :  " & USetStr(23710+IVrw.AEStatus),"");
              line = line + 1;
            end;
            if (nonblank(IVrw.MotherSecondarySerialNr)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVrw.MotherSecondarySerialNr & "  :  " & USetStr(23710+IVrw.AEStatus),"");
              line = line + 1;
            end;
            if (nonblank(IVrw.MotherAlternateDeviceID)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVrw.MotherAlternateDeviceID & "  :  " & USetStr(23710+IVrw.AEStatus),"");
              line = line + 1;
            end;
          end;
        case kInvoiceRowTypeStructuredItemComponent:
          goto LkIVRowTypeNormal4;
        case kInvoiceRowTypeDownpayment:
          goto LkIVRowTypeNormal4;
        case kInvoiceRowTypeNormal:
LkIVRowTypeNormal4:;
          if (IVrw.ArtCode==CDb.DiscountItem) then begin
            AddStringListRow(wn,width,LMb.POSFontSize,IVrw.ArtCode,IVrw.Spec,ValToString(blankval,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,IVrw.VATCode,IVrw.Location);
            line = line + 1;
          end else begin
            AddStringListRow(wn,width,LMb.POSFontSize,IVrw.ArtCode,IVrw.Spec,ValToString(IVrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,IVrw.VATCode,IVrw.Location);
            line = line + 1;
            if (nonblank(IVrw.SerialNr)) then begin
              AddStringListRow2(wn,USetStr(24178) & ":  " & IVrw.SerialNr,"");
              line = line + 1;
            end;
            if (nonblank(IVrw.SecondarySerialNr)) then begin
              AddStringListRow2(wn,USetStr(25604) & ":  " & IVrw.SecondarySerialNr,"");
              line = line + 1;
            end;
            if (nonblank(IVrw.AlternateDeviceID)) then begin
              AddStringListRow2(wn,USetStr(25605) & ":  " & IVrw.AlternateDeviceID,"");
              line = line + 1;
            end;
            if (nonblank(IVrw.MotherNr)) then begin
              AddStringListRow2(wn,USetStr(24167) & ": " & IVrw.MotherNr & "  :  " & USetStr(23710+IVrw.AEStatus),"");
              line = line + 1;
            end;
            if (nonblank(IVrw.MotherSecondarySerialNr)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVrw.MotherSecondarySerialNr & "  :  " & USetStr(23710+IVrw.AEStatus),"");
              line = line + 1;
            end;
            if (nonblank(IVrw.MotherAlternateDeviceID)) then begin
              AddStringListRow2(wn,USetStr(24167) & ":  " & IVrw.MotherAlternateDeviceID & "  :  " & USetStr(23710+IVrw.AEStatus),"");
              line = line + 1;
            end;
          end;
       case kInvoiceRowTypeMultiBuyDiscount:               
          AddStringListRow3(wn,width,LMb.POSFontSize,USetStr(24181),IVrw.Spec,"","",ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),i);
       case kInvoiceRowTypeGiftVoucherSold:               
          tstr = IVrw.Spec;
          if (blank(tstr)) then begin
            tstr = USetStr(24194);
          end;
          AddStringListRow(wn,width,LMb.POSFontSize,IVrw.PayMode,tstr,"",IVrw.GCNr,ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
        case kInvoiceRowTypeVoid:
          AddStringListRow(wn,width,LMb.POSFontSize,IVrw.ArtCode,IVrw.Spec,ValToString(IVrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,IVrw.VATCode,IVrw.Location);
          line = line + 1;
        case kInvoiceRowTypeUpdateMark:
          AddStringListRow(wn,width,LMb.POSFontSize,IVrw.VoidedSign,IVrw.Spec,"","","","",i,"","");
          line = line + 1;
        case kInvoiceRowTypeSalesAssistant:
          AddStringListRow2(wn,USetStr(24192) & "  " & IVrw.SalesAssistant,"");
        case kInvoiceRowTypeHeader:
          AddStringListRow2(wn,IVrw.Spec,i);
        case kInvoiceRowTypeSubtotal:
          AddStringListRow(wn,width,LMb.POSFontSize,"",IVrw.Spec,ValToString(blankval,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(blankval,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(blankval,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
        case kInvoiceRowTypePrepayment:
          AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24168) & "  " & IVrw.CUPNr,ValToString(blankval,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(blankval,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(blankval,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
//          AddStringListRow2(wn,USetStr(24168) & "  " & IVrw.CUPNr,"");
        case kInvoiceRowTypeHidden:
          AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24164),ValToString(blankval,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(blankval,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(blankval,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
//          i = rwcnt;
      end;
    end;
  end;
  if (WindowIsMirrored(wn)==false) then begin
    AddStringListRow2(wn,ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24174),"");
  end else begin
    AddStringListRow2(wn,USetStr(24174) & " " & ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0),"");
  end;
  if (nonblank(IVr.InvComment)) then begin
    AddStringListRow2(wn,IVr.InvComment,"");
  end;
  if (LMb.HideQty==0) then begin
    if (WindowIsMirrored(wn)==false) then begin
      AddStringListRow(wn,width,LMb.POSFontSize,ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24176),USetStr(24171),"","",ValToString(IVr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
    end else begin
      AddStringListRow(wn,width,LMb.POSFontSize,USetStr(24176) & " " & ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(IVr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
    end;
  end else begin
    AddStringListRow(wn,width,LMb.POSFontSize,ValToString(blankval,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(IVr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
  end;
  AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24173),"","",ValToString(IVr.Sum3,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24173),"","");
  if (IVr.RetValue>0) then begin
    AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(IVr.RetValue,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172),"","");
  end else begin
    AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172),"","");
  end;

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.stp) begin
      case kInvoiceRowTypeLoyaltyPointsBonus:
        AddStringListRow(wn,width,LMb.POSFontSize,IVrw.PayMode,USetStr(24183),"",IVrw.CurncyCode,ValToString(IVrw.Points,M4Qty,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeLoyaltyPointsPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVrw.PayMode,USetStr(24182),"",IVrw.CurncyCode,ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeCashPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVrw.PayMode,IVrw.Spec,"",IVrw.CurncyCode,ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeCreditCardPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVrw.PayMode,IVrw.Spec,"",IVrw.CurncyCode,ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeChequePayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVrw.PayMode,IVrw.Spec,"",IVrw.CurncyCode,ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
      case kInvoiceRowTypeGiftVoucherPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,IVrw.PayMode,IVrw.Spec,"",IVrw.CurncyCode,ValToString(IVrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
    end;
  end;
  StringListScrollBottom(wn);
  SetWindowSubset(wn,GetWindowSubset(wn));
  if (line<=0) then begin line = 1; end;
  SetSelectedListLine(wn,line-1);
  
  if (gNPTSIVCashCUDisplayDClassf==false) then begin
    gNPTSIVCashCUDisplayDClassf = true;
    switch (GetWindowClass(wn)) begin
      case "IVDClass":
        nwn = FindWindow("IVCUDisplayDClass");
        if (nwn>0) then begin
          IVDClass_RefreshStringList(nwn,IVr);
        end;
      case "NPTSIVCUDisplayDClass":
        IVDClass_RefreshStringList(wn,IVr);
    end;
  end;
  return;
end;

global
procedure RestAccDClass_RefreshStringList(Integer wn,record RestAccVc RestAccr)
begin
  string 255 tstr,tstr2;
  row RestAccVc RestAccrw;
  record SysFormatBlock SFb;
  Integer i,rwcnt;
  row PMBlock PMrw;
  record LocalMachineBlock LMb;
  Boolean testf;
  val totq,tota;
  vector Boolean vartcodef;
  Integer line;
  Integer width;
  
  ClearStringList(wn);
  width = StringListWidth(wn);
  BlockLoad(SFb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(RestAccr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    switch (RestAccrw.stp) begin
      case kInvoiceRowTypeNormal:
        testf = true;
        if (RestAccrw.ovst!=0) then begin testf = false; end;
        if (RestAccrw.Modifier!=0) then begin testf = false; end;
        if (blank(RestAccrw.ArtCode))then begin testf = false; end;
        if (testf) then begin
          totq = totq + RestAccrw.Quant;
          if (vartcodef[RestAccrw.ArtCode]==false) then begin
            tota = tota + 1;
            vartcodef[RestAccrw.ArtCode] = true;
          end;
        end;        
    end;
    
    testf = true;
    if (LMb.IncrementalReceiptPrinting!=0) then begin
      switch (RestAccrw.stp) begin
        case kInvoiceRowTypeNormal:
        case kInvoiceRowTypeVoid:
      end;
    end else begin
      switch (RestAccrw.stp) begin
        case kInvoiceRowTypeNormal:
          if (RestAccrw.ovst!=0) then begin
            testf = false;
          end;
        case kInvoiceRowTypeVoid:
          ;
      end;
    end;
    if (testf) then begin
      switch (RestAccrw.stp) begin
        case kInvoiceRowTypeNormal:               
          AddStringListRow(wn,width,LMb.POSFontSize,RestAccrw.ArtCode,RestAccrw.Spec,ValToString(RestAccrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
          line = line + 1;
      case kInvoiceRowTypeSalesAssistant:
        AddStringListRow2(wn,USetStr(24192) & "  " & RestAccrw.SalesAssistant,"");
/*          
        case kInvoiceRowTypeSplitItem:               
          AddStringListRow3(wn,width,LMb.POSFontSize,USetStr(24179) & " " & RestAccrw.ArtCode,RestAccrw.Spec,ValToString(RestAccrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),RestAccrw.SplitArtCode,ValToString(RestAccrw.SplitQuant,M4Qty,ThousandSeparator,DecimalSeparator,0),i);
          line = line + 1;
*/          
        case kInvoiceRowTypeVoid:
          AddStringListRow5(wn,width,LMb.POSFontSize,RestAccrw.ArtCode,RestAccrw.Spec,ValToString(RestAccrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","",1);
          line = line + 1;
      end;
    end;
  end;
  if (WindowIsMirrored(wn)==false) then begin
    AddStringListRow2(wn,ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24174),"");
  end else begin
    AddStringListRow2(wn,USetStr(24174) & " " & ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0),"");
  end;
  if (RestAccr.ServCharge>0) then begin
    AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24196),"","",ValToString(RestAccr.ServCharge,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24196),"","");
  end;
  if (LMb.HideQty==0) then begin
    if (WindowIsMirrored(wn)==false) then begin
      AddStringListRow(wn,width,LMb.POSFontSize,ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24176),USetStr(24171),"","",ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
    end else begin
      AddStringListRow(wn,width,LMb.POSFontSize,USetStr(24176) & " " & ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
    end;
  end else begin
    AddStringListRow(wn,width,LMb.POSFontSize,ValToString(blankval,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(RestAccr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24171),"","");
  end;
//  AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24173),"","",ValToString(RestAccr.Sum3,M4Val,ThousandSeparator,DecimalSeparator,0),USetStr(24173),"","");
  if (RestAccr.RetValue>0) then begin
    AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(RestAccr.RetValue,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172),"","");
  end else begin
    AddStringListRow(wn,width,LMb.POSFontSize,"",USetStr(24172),"","",ValToString(0.00,M4Val,ThousandSeparator,DecimalSeparator,0),"totalrebate",USetStr(24172),"","");
  end;

  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(RestAccr,i,RestAccrw);
    switch (RestAccrw.stp) begin
      case kInvoiceRowTypeLoyaltyPointsBonus:
        AddStringListRow(wn,width,LMb.POSFontSize,RestAccrw.PayMode,USetStr(24183),"",RestAccrw.CurncyCode,ValToString(RestAccrw.Points,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
      case kInvoiceRowTypeLoyaltyPointsPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,RestAccrw.PayMode,USetStr(24182),"",RestAccrw.CurncyCode,ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
      case kInvoiceRowTypeCashPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,RestAccrw.PayMode,RestAccrw.Spec,"",RestAccrw.CurncyCode,ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
      case kInvoiceRowTypeCreditCardPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,RestAccrw.PayMode,RestAccrw.Spec,"",RestAccrw.CurncyCode,ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
      case kInvoiceRowTypeChequePayment:
        AddStringListRow(wn,width,LMb.POSFontSize,RestAccrw.PayMode,RestAccrw.Spec,"",RestAccrw.CurncyCode,ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
      case kInvoiceRowTypeGiftVoucherPayment:
        AddStringListRow(wn,width,LMb.POSFontSize,RestAccrw.PayMode,RestAccrw.Spec,"",RestAccrw.CurncyCode,ValToString(RestAccrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(RestAccrw.vRebate,M41Val,ThousandSeparator,DecimalSeparator,0),i,"","");
    end;
  end;
  StringListScrollBottom(wn);
  SetWindowSubset(wn,GetWindowSubset(wn));
  if (line<=0) then begin line = 1; end;
  SetSelectedListLine(wn,line-1);
  return;
end;

global
procedure GiftReceiptDClass_RefreshStringList(Integer wn,record GiftReceiptVc GRr)
begin
  string 255 tstr,tstr2;
  row GiftReceiptVc GRrw;
  record SysFormatBlock SFb;
  Integer i,rwcnt;
  row PMBlock PMrw;
  record LocalMachineBlock LMb;
  Boolean testf;
  val totq,tota;
  vector Boolean vartcodef;
  Integer line;
  Integer width;
  
  ClearStringList(wn);
  width = StringListWidth(wn);
  BlockLoad(SFb);
  BlockLoad(LMb);
  rwcnt = MatRowCnt(GRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(GRr,i,GRrw);
    switch (GRrw.stp) begin
      case kInvoiceRowTypeNormal:
        if (nonblank(GRrw.ArtCode)) then begin
          totq = totq + GRrw.Quant;
          if (vartcodef[GRrw.ArtCode]==false) then begin
            tota = tota + 1;
            vartcodef[GRrw.ArtCode] = true;
          end;
        end;
    end;
    
    testf = true;
    if (testf) then begin
      line = line + 1;
      switch (GRrw.stp) begin
        case kInvoiceRowTypeNormal:               
          AddStringListRow(wn,width,LMb.POSFontSize,GRrw.ArtCode,GRrw.Spec,ValToString(GRrw.Quant,M4Qty,ThousandSeparator,DecimalSeparator,0),ValToString(GRrw.Price,M4Val,ThousandSeparator,DecimalSeparator,0),ValToString(GRrw.Sum,M4Val,ThousandSeparator,DecimalSeparator,0),"",i,"","");
          if (nonblank(GRrw.SerialNr)) then begin
            AddStringListRow2(wn,USetStr(24178) & "  " & GRrw.SerialNr,"");
            line = line + 1;
          end;
      end;
    end;
  end;
  if (WindowIsMirrored(wn)==false) then begin
    AddStringListRow2(wn,ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24174),"");
  end else begin
    AddStringListRow2(wn,USetStr(24174) & " " & ValToString(tota,M4UVal,ThousandSeparator,DecimalSeparator,0),"");
  end;
  
  if (WindowIsMirrored(wn)==false) then begin
    AddStringListRow(wn,width,LMb.POSFontSize,ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0) & " " & USetStr(24176),USetStr(24171),"","",ValToString(GRr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"",USetStr(24171),"","");
  end else begin
    AddStringListRow(wn,width,LMb.POSFontSize,USetStr(24176) & " " & ValToString(totq,M4UVal,ThousandSeparator,DecimalSeparator,0),USetStr(24171),"","",ValToString(GRr.Sum4,M4Val,ThousandSeparator,DecimalSeparator,0),"",USetStr(24171),"","");
  end;
  
  StringListScrollBottom(wn);
  SetWindowSubset(wn,GetWindowSubset(wn));
  if (line<=0) then begin line = 1; end;
  SetSelectedListLine(wn,0);
  return;
end;

global 
procedure OpenGiftVoucherTouchScreenDClass(Integer mwn,Integer rownr,LongInt sernr,val change,val tot,string curncy,string paymode,string label)
begin
  Integer nwn;
  record RcVc RepSpec;
  record BaseCurBlock BCb;

  RepSpec.vals0 = -change;

  if (RepSpec.vals0==0) then begin
    RepSpec.vals0 = tot;
  end;
  if (RepSpec.vals0>0) then begin
    nwn = OpenWindow("GiftVoucherTouchScreenDClass",1,mwn,"","",RepSpec);
    if (nwn>0) then begin
      BlockLoad(BCb);
      DeselectWindow(nwn,false);
      RepSpec.ArtMode = 1;
      RepSpec.long1 = sernr;
      RepSpec.long2 = rownr;
      RepSpec.CurncyCode = BCb.BaseCur1;
      RepSpec.AccStr = paymode;
      RepSpec.f6 = label;
      PutWindowRecord(nwn,RepSpec);
      WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
    end;
  end else begin
    CloseWindow(nwn);
    MessageBox(24191,"");
  end;
  return;
end;

global 
procedure OpenOnAccountPaymentTouchScreenDClass(Integer mwn,LongInt sernr,string paymode,string label)
begin
  Integer nwn;
  record RcVc RepSpec;
  record BaseCurBlock BCb;

  nwn = OpenWindow("OnAccountPaymentTouchScreenDClass",1,mwn,"","",RepSpec);
  if (nwn>0) then begin
    BlockLoad(BCb);
    DeselectWindow(nwn,false);
    RepSpec.ArtMode = 1;
    RepSpec.long1 = sernr;
    RepSpec.CurncyCode = BCb.BaseCur1;
    RepSpec.AccStr = paymode;
    RepSpec.f6 = label;
    PutWindowRecord(nwn,RepSpec);
    WindowFieldGoto(nwn,RepSpec,-1,"vals0",true);
  end;
  return;
end;

global 
procedure OpenGiftVoucherSalesTouchScreenDClass(Integer mwn,string paymode,string label)
begin
  Integer nwn;
  record RcVc RepSpec;

    nwn = OpenWindow("GiftVoucherSalesTouchScreenDClass",1,mwn,"","",RepSpec);
    if (nwn>0) then begin
      DeselectWindow(nwn,false);
      RepSpec.AccStr = paymode;
      RepSpec.f6 = label;
      PutWindowRecord(nwn,RepSpec);
      WindowFieldGoto(nwn,RepSpec,-1,"f1",true);
    end;
  return;
end;

global 
procedure OpenEnterBaggerNPTSOClass()
begin
  Integer wn,mwn,nwn;
  record RcVc RepSpec;

  wn = CurWindow;
  mwn = MotherWindow(wn);
  CloseWindow(wn);
  nwn = OpenWindow("EnterBaggerNPTSOClass",1,mwn,"","",RepSpec);
  return;
end;

global
function Boolean BaggerSClassFunctionKey(LongInt keycode,Boolean shflag,Boolean ctrlflag)
begin
  Integer wn;
  Boolean res;
    
  wn = CurWindow;
  switch (keycode) begin
    case 1: 
      OpenEnterBaggerNPTSOClass;
      res = true;
  end;
  BaggerSClassFunctionKey = res;
  return;
end;

global
procedure WindowFieldGotoForTouchScreen(Integer wn,Integer rownr,string field,Boolean flagp)
begin
  record IVCashvc IVCashr;
  record IVVc IVr;
  record RcVc RepSpec;
  
  switch (GetWindowClass(wn)) begin
    case "IVDClass":
      GetWindowRecord(wn,IVr);
      switch (GuiType) begin
        case kGuiiPhone: DeselectWindow(wn,false);
        otherwise
          WindowFieldGoto(wn,IVr,rownr,field,flagp);
      end;
    case "NPTSIVCashDClass":
      GetWindowRecord(wn,IVCashr);
      switch (GuiType) begin
        case kGuiiPhone:
          if (nonblank(GetWindowNameArg(wn))) then begin
            if (TestForMATVARINS(wn)) then begin
              WindowFieldGoto(wn,IVCashr,rownr,field,flagp);
            end;
          end else begin
            DeselectWindow(wn,false);
          end;
        otherwise
          WindowFieldGoto(wn,IVCashr,rownr,field,flagp);
      end;
    case "IVCashDClass":
      GetWindowRecord(wn,IVCashr);
      switch (GuiType) begin
        case kGuiiPhone: DeselectWindow(wn,false);
        otherwise
          WindowFieldGoto(wn,IVCashr,rownr,field,flagp);
      end;
    otherwise
      switch (GuiType) begin
        case kGuiiPhone: DeselectWindow(wn,false);
        otherwise
          WindowFieldGoto(wn,RepSpec,rownr,field,flagp);
      end;        
  end;
  return;
end;