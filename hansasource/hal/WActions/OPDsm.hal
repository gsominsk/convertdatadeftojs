remote updating function LongInt CancelApprovalRequest(string,string,var Integer);
remote updating function Integer RequestApproval_OPVc(record OPVc,var record RcVc,var Integer);
remote function Integer OPTestApprovalStatus(record OPVc);
external updating procedure MakeDownPayFromOKedOPD(record OPVc,Integer,var array record VIVc,var string);
remote function Boolean FindOwnCheque(string,string,string,Date,string,val,var record resOwnCheckVc);
external function Integer PMCheckType(string,var string,var string);
external function Integer CountObjects(string);
remote function Integer CancelApprovalRequestAllowed(Integer,string,string,Integer,string);
remote updating function Integer CreateMailFromOPD(record OPVc,var record MailVc,var string,string,string);
remote function Integer CreateVATVIFromOP(record OPVc,Integer,var record VATVIVc);
external function Boolean GetPMRow(string,var row PMBlock);
external procedure OpenPINWClass(LongInt,Integer);
remote function Integer CalculateWithholdTaxesFromOP(var record OPVc);
external updating function Integer DoEPaymentQueOPDsm(record OPVc,var string);
external function Boolean DoEPaymentSignOPDsm(var record OPVc);
remote procedure OPVc_PasteRecVal(var record OPVc,Integer);
external Procedure GetPayType(String,Var Integer);
remote updating function LongInt RecordAction_raPasteOPInFEVI(var record FEVIVc,LongInt,Integer);
remote updating function Boolean DoCLOutFromOPD(record OPVc,var record CLOutVc);
remote function Boolean GetNextChequeNr(var record OPVc);
external procedure RecActionOP_rlCashInOutDPrint(var record OPVc);
remote function Boolean PasteInvInOPr(var record OPVc,row OPVc,Integer,Integer);
remote updating function Boolean RecordAction_rlOPLOrder(var record OPVc);
external procedure RecordActionOP_Print(var record OPVc,string);
remote updating function Boolean RecordAction_rlOPLOK(var record OPVc);
remote function Integer SendForAcceptance_OPVc(var record OPVc,var record RcVc);

global
updating procedure CLOutFromOPDsm()
BEGIN
  record OPVc OPr;
  record CLOutVc CLOutr;
  Integer wn,nwn;
  Integer normalstate;
  
  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    GetWindowRecord(wn,OPr);
    if (DoCLOutFromOPD(OPr,CLOutr)) then begin
      nwn = OpenWindow("CLOutDClass",1,0,"","",CLOutr);
    end else begin
      Beep;
    end;
  end else begin
    Beep;
  end;
  RETURN;
END;

function
val TotVEAmount(record OPVc OPr,Integer rownr,val initval,string vecode)
BEGIN
  row OPVc OPrw,orgOPrw;
  Integer i,rwcnt,pt;
  val res;
  string 5 pmode;
  
  MatRowGet(OPr,rownr,orgOPrw);
  res = initval;
  rwcnt = MatRowCnt(OPr);
  for (i=rownr+1;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    pmode = OPrw.PayMode;
    if (blank(pmode)) then begin
      pmode = OPr.PayMode; 
    end;
    GetPayType(pmode,pt);
    if ((OPrw.ChequeNr==-1) and (OPrw.VECode==vecode) and (pt<>4) and OPrw.PayMode==orgOPrw.PayMode) then begin
      res = res + OPrw.RecVal;
    end;
  end; 
  TotVEAmount = res; 
  RETURN;
END;

procedure OpenOwnCheque(string paymode,string ownbankacc,string vecode,Date paydate,string curncy,val cheqv,Integer mwn)
begin
  Boolean found;
  record OwnCheckVc OwnCheckr;
  Integer nwn;
  record CUVc VEr;
  
  found = FindOwnCheque(paymode,ownbankacc,vecode,paydate,curncy,cheqv,OwnCheckr);
  if (found) then begin
    nwn = OpenWindow("OwnCheckDClass",0,mwn,"","",OwnCheckr);
    if (blank(OwnCheckr.VECode)) then begin
      VEr.Code = vecode;
      if (ReadFirstMain(VEr,1,true)) then begin
        OwnCheckr.VECode = vecode;
        OwnCheckr.VEName = VEr.Name;
      end;
      if (blank(OwnCheckr.BankAcc)) then begin
        OwnCheckr.BankAcc = ownbankacc;
      end;
    end;
    if (blankdate(OwnCheckr.EffectDate)) then begin
      OwnCheckr.EffectDate = paydate;
    end;
    if (blankdate(OwnCheckr.TransDate)) then begin
      OwnCheckr.TransDate = CurrentDate;
    end;
    OwnCheckr.Amount = cheqv;
    OwnCheckr.CurncyCode = curncy;
    PutWindowRecord(nwn,OwnCheckr);    
  end else begin
    VEr.Code = vecode;
    if (ReadFirstMain(VEr,1,true)) then begin
      RecordNew(OwnCheckr);
      OwnCheckr.TransDate = CurrentDate;
      OwnCheckr.EffectDate = paydate;
      OwnCheckr.Amount = cheqv;
      OwnCheckr.VECode = vecode;
      OwnCheckr.VEName = VEr.Name;
      OwnCheckr.BankAcc = ownbankacc;
      OwnCheckr.CurncyCode = curncy;
      nwn = OpenWindow("OwnCheckDClass",0,mwn,"","",OwnCheckr);
    end;
  end;
  if (nwn>0) then begin
    WindowFieldGoto(nwn,OwnCheckr,-1,"CheckNr",true);
  end;
  RETURN;
END;

global
procedure PrepChequesOPDsm()
BEGIN
  Integer wn;
  record OPVc OPr;
  row OPVc OPrw;
  Integer rownr;
  val totv;
  Integer cht;
  string 255 tstr,paymode;

  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    if (WindowActiveField(wn)!="ChequeNr") then begin
      WindowFieldGoto(wn,OPr,rownr,"ChequeNr",true);
      GetWindowRecord(wn,OPr);
    end;
    if (WindowActiveField(wn)=="ChequeNr") then begin
      MatRowGet(OPr,rownr,OPrw);
      if (OPrw.ChequeNr==-1) then begin
        paymode = OPrw.PayMode;
        if (blank(paymode)) then begin
          paymode = OPr.PayMode;
        end;        
        cht = PMCheckType(paymode,tstr,tstr);
        if (cht==2) then begin
          totv = TotVEAmount(OPr,rownr,OPrw.RecVal,OPrw.VECode);
          if (totv!=0) then begin
            OpenOwnCheque(paymode,OPr.BankAcc,OPrw.VECode,OPr.PayDate,OPrw.RecCurncy,totv,wn);
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure PrintChequesOPDsm()
begin
  Integer wn;
  record OPVc OPr;
  row OPVc OPrw;
  Integer i,rwcnt;
  record OwnCheckVc OwnCheckr;
  vector Boolean owncheckprintedf;

  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.ChequeNr>0) and (owncheckprintedf[OPrw.ChequeNr]==false) then begin
      OwnCheckr.SerNr = OPrw.ChequeNr;
      if (ReadFirstMain(OwnCheckr,1,true)) then begin
        PrintDocument(OwnCheckr,"OwnChkForm",false);
        owncheckprintedf[OPrw.ChequeNr] = true;
      end;
    end;
  end;
  return;
end;

global
updating procedure OKOPLsm()
BEGIN
  record OPVc OPr;
  Integer i,wn,err;
  
  if (UserCanAction("OPOK",true)) then begin
    wn = CurWindow;
    i = 1;
    while (GetRecordFromBrowse(OPr,wn,i)) begin
      err = OPTestApprovalStatus(OPr);
      if (err!=0) then begin
        MessageBox(err,"");
        goto LOKOPLsm;
      end;
      if (RecordAction_rlOPLOK(OPr)) then begin end;
LOKOPLsm:;
      i = i + 1;
    end;    
    UpdateBrowses("OPVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"OPOK"));
  end;
  
  RETURN;
END;

global
updating procedure OrderOPLsm()
BEGIN
  record OPVc OPr;
  Integer i,wn,err;
  
  if (UserCanAction("OPOrder",true)) then begin
    wn = CurWindow;
    i = 1;
    while (GetRecordFromBrowse(OPr,wn,i)) begin
      err = OPTestApprovalStatus(OPr);
      if (err!=0) then begin
        MessageBox(err,": " & OPr.SerNr);
        goto LOrderOPLsm;
      end;
      if (RecordAction_rlOPLOrder(OPr)) then begin end;
LOrderOPLsm:;
      i = i + 1;
    end;    
    UpdateBrowses("OPVc");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"OPOrder"));
  end;
  RETURN;
END;

global
procedure PrintOPL(Integer wn,Boolean previewf)
BEGIN
  record OPVc OPr;
  Integer i;
  
  StartPrintDialogGroup;
  i = 1;
  while (GetRecordFromBrowse(OPr,wn,i)) begin
    RecordActionOP_Print(OPr,previewf);
    i = i + 1;
  end;
  EndPrintDialogGroup;
  RETURN;
END;

global
procedure OPSuggOPLsm()
begin
  record RcVc RepSpec;
  Integer nwn;
  
  RepSpec.flags[6] = 1;
  nwn = OpenWindow("PurInvVClass",1,0,"","",RepSpec);
  RepSpec.repname = "OPCreateMn";
  PutWindowRecord(nwn,RepSpec);
  return;
end;

global
procedure ChequeRunOPLsm()
begin
  record RcVc RepSpec;
  Integer wn,nwn;
  Integer i;
  LongInt firstop,lastop;
  record OPVc OPr;
  
  if (UserCanAction("OPOrder",true)==false) then begin
    MessageBox(1274,StringFromStringSet(3,"OPOrder"));
    goto LChequeRunOPLsm;
  end;
  
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(OPr,wn,i)) begin
    if (i==1) then begin
      firstop = OPr.SerNr;
      lastop = OPr.SerNr;
    end else begin
      if (OPr.SerNr<firstop) then begin
        firstop = OPr.SerNr;
      end;
      if (OPr.SerNr>lastop) then begin
        lastop = OPr.SerNr;
      end;
    end;
    i = i + 1;
  end;  
  nwn = OpenWindow("ChequeRunOPVClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  if (firstop>0) then begin
    RepSpec.f1 = firstop;
  end;
  if (lastop>0) and (lastop!=firstop) then begin
    RepSpec.f1 = RepSpec.f1 & ":";
    RepSpec.f1 = RepSpec.f1 & lastop;
  end;
  RepSpec.repname = "ChequeRunOPMn";
  PutWindowRecord(nwn,RepSpec);
LChequeRunOPLsm:;
  return;
end;

global
procedure CashDiscountOPDsm()
BEGIN
  Integer wn,rownr;
  record OPVc OPr;
  row OPVc OPrw;  

  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    if (WindowState(wn)==0) then begin
      DeselectWindow(wn,true);
      GetWindowRecord(wn,OPr);  
      PutWindowRecord(wn,OPr);
    end;
    if (WindowState(wn)!=0) then begin//Rs_normal
      DeselectWindow(wn,true);
      GetWindowRecord(wn,OPr);  
      if (OPr.OrderedFlag==0) then begin
        MatRowGet(OPr,rownr,OPrw);
        if (PasteInvInOPr(OPr,OPrw,rownr+1,5)) then begin
          PutWindowRecord(wn,OPr);
        end else begin
          Beep;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
procedure NewFeeOPDsm()
BEGIN
  Integer wn,rownr;
  record OPVc OPr;
  row OPVc OPrw;  
  
  wn = CurWindow;
  rownr = WindowActiveRow(wn);
  DeselectWindow(wn,true);
  if (rownr>=0) then begin
    if (WindowState(wn)==0) then begin
      GetWindowRecord(wn,OPr);  
      PutWindowRecord(wn,OPr);
    end;
    if (WindowState(wn)!=0) then begin//Rs_normal
      GetWindowRecord(wn,OPr);  
      MatRowGet(OPr,rownr,OPrw);
      MatRowPut(OPr,rownr,OPrw);
      if (OPr.DoneFlag==0) then begin
//        OPVc_PasteRecVal(OPr,rownr);//it changesvalues  to original amounts, so changes entered before using menu are gone
//        MatRowGet(OPr,rownr,OPrw);
        if (PasteInvInOPr(OPr,OPrw,rownr+1,7)) then begin
          
          PutWindowRecord(wn,OPr);
        end else begin
          Beep;
        end;
      end;
    end;
  end else begin
    MessageBox(22057,"")
  end;
  RETURN;
END;

global
procedure PrintCashInOutOPDsm()
BEGIN
  record OPVc OPr;
  Integer wn,nwn;
  Integer normalstate;

  normalstate = 0;
  wn = CurWindow;
  if (WindowState(wn)==normalstate) then begin
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OPr);
    RecActionOP_rlCashInOutDPrint(OPr);
  end;
  RETURN;
END;

global
procedure AssignChequeOPDsm()
BEGIN
  Integer wn;
  record OPVc OPr;
  
  wn = CurWindow;
//  if (WindowState(wn)!=0) then begin//Rs_normal
    DeselectWindow(wn,false);
    GetWindowRecord(wn,OPr);  
    if (GetNextChequeNr(OPr)) then begin
      PutWindowRecord(wn,OPr);
    end else begin
      Beep;
    end;
//  end;
  RETURN;
END;

global 
updating procedure FirstEventOPDsm()
BEGIN
  record FEVIVc FEVIr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer wn,nwn,rownr;
  LongInt r;

  wn = CurWindow;
  if (WindowState(wn)==0) then begin//Rs_normal
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,OPr);
      if (OPr.OrderedFlag!=0) and (OPr.DoneFlag!=0) then begin
        DeselectWindow(wn,false);
        MatRowGet(OPr,rownr,OPrw);    
        if ((nonblank(OPrw.VECode)) and (OPrw.BankVal!=0) and (OPrw.PrepayNr!=-1) and (OPrw.OrderNr!=-1)) then begin
          r = RecordAction_raPasteOPInFEVI(FEVIr,OPr.SerNr,rownr);
          if (r==0) then begin
            nwn = OpenWindow("FEVIDClass",1,0,"","",FEVIr);
          end else begin
            Beep;
          end;
        end;
      end;
    end;
  end;
  RETURN;
END;

global
updating procedure EPaymentQueOPDsm()
BEGIN
  Integer wn;
  record OPVc OPr;
  string 255 errstr;

  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  if (OPr.OrderedFlag!=0) then begin
    if (DoEPaymentQueOPDsm(OPr,errstr)) then begin
      if (nonblank(errstr)) then begin
        MessageBox(0,errstr);
      end;
    end;
  end;
  RETURN;
END;

global
procedure EPaymentSignOPDsm()
begin
  Integer wn;
  record OPVc OPr;

  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  
  if (OPr.DoneFlag == 0) then begin
    if (DoEPaymentSignOPDsm(OPr)) then begin
    end;
  end else begin
    MessageBox(1137,"");
  end;
  
  
  return;
end;

/*
global
updating procedure EPaymentQueOPDsm()
BEGIN
  Integer wn;
  record OPVc OPr;
  record EPaymentQueVc EPaymentQuer;
  Boolean signf;

  wn = CurWindow;
  DeselectWindow(wn,true);
  if (WindowDoOK(wn,0)) then begin
  end;
  GetWindowRecord(wn,OPr);
  if (OPr.DoneFlag==0) and (OPr.OrderedFlag==0) then begin
    signf = true;
  end else begin
    EPaymentQuer.OPSerNr = OPr.SerNr;
    if (ReadFirstKey("OPSerNr",EPaymentQuer,1,true)) then begin
      if (EPaymentQuer.Status==45) then begin
        signf = true;
      end;
    end;
  end;
  if (signf) then begin
    OpenPINWClass(OPr.SerNr,wn);
  end;
  RETURN;
END;
*/

global
procedure WithholdTaxesOPDsm()
begin
  Integer wn,err;
  record OPVc OPr;

  wn = CurWindow;
  if (WindowState(wn)!=Rs_normal) then begin
    MessageBox(1356,"");
    goto LWithholdTaxesOPDsm;
  end;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,OPr);
  if (OPr.OrderedFlag==0) then begin
    err = CalculateWithholdTaxesFromOP(OPr);
    PutWindowRecord(wn,OPr);
    SelectWindow(wn);
    if (err!=0) then begin
      MessageBox(0,USetStr(err));
    end;
  end;
LWithholdTaxesOPDsm:;  
  return;
end;

global
procedure BankStOPDsm()
begin
  Integer wn,nwn;
  row PMBlock PMrw;
  record OPVc OPr;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  if (GetPMRow(OPr.PayMode,PMrw)) then begin end;
  ReportDefaults(RepSpec,"BankStRClass");
  nwn = OpenWindow("BankStRClass",1,0,"","",RepSpec);
  DeselectWindow(nwn,false);
  RepSpec.repname = "BankStRn";
  RepSpec.Media = mtScreen;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.sStartDate = OPr.TransDate;
  RepSpec.sEndDate = OPr.TransDate;
  RepSpec.Period2Str = RepSpec.sStartDate;
  RepSpec.Period2Str = RepSpec.Period2Str & ":";
  RepSpec.Period2Str = RepSpec.Period2Str & RepSpec.sEndDate;
  RepSpec.AccStr = PMrw.AccNr;
  PutWindowRecord(nwn,RepSpec);
  return;
end;

global
procedure EPaymentStatusOPDsm()
begin
  Integer wn;
  record OPVc OPr;
  record RcVc RepSpec;
  
  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  ReportDefaults(RepSpec,"HTSOPStatRClass");
  RepSpec.f1 = OPr.SerNr;
  RepSpec.flags[1] = 1;
  RepSpec.flags[2] = 1;
  RepSpec.flags[3] = 2;
  RepSpec.flags[4] = 1;
  RepSpec.flags[29] = 1;
  RepSpec.ArtMode = 1;
  RepSpec.Media = mtScreen;
  RepSpec.repname = "HTSOPStatRn";
  RunReport(RepSpec,0);
  return;
end;

global
procedure EPaymentStatusOPLsm()
begin
  Integer wn,i;
  record OPVc OPr;
  record RcVc RepSpec;
  
  ReportDefaults(RepSpec,"HTSOPStatRClass");
  wn = CurWindow;
  i = 1;
  while (GetRecordFromBrowse(OPr,wn,i)) begin
    if (blank(RepSpec.f1)) then begin
      RepSpec.f1 = OPr.SerNr;
    end;
    i = i + 1;
  end;  
  RepSpec.f1 = RepSpec.f1 & ":";
  RepSpec.f1 = RepSpec.f1 & OPr.SerNr;
  RepSpec.Media = mtScreen;
  RepSpec.flags[29] = 1;
  RepSpec.flags[1] = 1;
  RepSpec.ArtMode = 1;
  RepSpec.repname = "HTSOPStatRn";
  RunReport(RepSpec,0);
  return;
end;

global
updating procedure VATCorrectionOPsm()
begin
  record OPVc OPr;
  record VATVIVc VATVIr;
  Integer wn,nwn,rownr,err;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,OPr);

      if (OPr.APonTR==0) then begin
        MessageBox(20938,"");
        goto LVATCorrectionOPsm;
      end;
      if (OPr.DoneFlag==0) then begin
        MessageBox(2072,"");
        goto LVATCorrectionOPsm;
      end;
      if (OPr.Invalid!=0) then begin
        MessageBox(1282,"");
        goto LVATCorrectionOPsm;
      end;

      err = CreateVATVIFromOP(OPr,rownr,VATVIr);
      switch (err) begin          
        case 0:
          nwn = OpenWindow("VATVIDClass",1,0,"","",VATVIr);
        otherwise
            MessageBox(err,"");
      end;
    end else begin
      MessageBox(22057,"");
    end;
  end else begin
    MessageBox(22902,"");
  end;
LVATCorrectionOPsm:;  
  return;
end;

global 
updating procedure CreateMailFromOPDsm()
begin
  Integer wn,nwn;
  record MailVc Mailr;
  record OPVc OPr;
  row OPVc OPrw;
  Integer err;
  string 255 tstr,docname,lastcusctode;
  Integer i,rwcnt;
  Boolean manyvef;
  record RcVc RepSpec;

  wn = CurWindow;
  if (WindowState(wn)==Rs_normal) then begin
    GetWindowRecord(wn,OPr);  
    rwcnt = MatRowCnt(OPr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(OPr,i,OPrw);
      if (nonblank(lastcusctode)) then begin
        if (OPrw.VECode!=lastcusctode) then begin
          manyvef = true;
          i = rwcnt;
        end;
      end;
      lastcusctode = OPrw.VECode;
    end;
    if (manyvef) then begin
      ReportDefaults(RepSpec,"OPEmailVClass");
      nwn = OpenWindow("OPEmailVClass",1,0,"","",RepSpec);
      RepSpec.repname = "OPEmailMn";
      RepSpec.long1 = OPr.SerNr;
      RepSpec.flags[0] = 1;       //Send email automatically ticked
      PutWindowRecord(nwn,RepSpec);
    end else begin
      err = CreateMailFromOPD(OPr,Mailr,tstr,lastcusctode,WindowFormName(wn));
      if (err!=0) then begin
        MessageBox(err,": " & tstr);
      end else begin
        nwn = OpenWindow("MailDClass",1,0,"","",Mailr);
      end;
    end;
  end;
 LCreateMailFromOPDsm:; 
  return;
end;

global
updating procedure OPSendforAcceptanceOPDsmExecute(Integer wn,string acceptanceby,string acceptancefyi)
begin
  Integer err,nwn;
  record OPVc OPr;
  Integer ApproverSelection,ApprovalStatusFlag;
  record RcVc RepSpec;
  
  GetWindowRecord(wn,OPr);
  if (WindowState(wn)!=Rs_normal) then begin
    if (WindowDoOK(wn,0)==false) then begin
      goto LOPSendforAcceptanceOPDsm;
    end;
    GetWindowRecord(wn,OPr);
  end;
  OPr.AcceptanceBy = acceptanceby;
  OPr.AcceptanceFYI = acceptancefyi;
  err = RequestApproval_OPVc(OPr,RepSpec,ApprovalStatusFlag);
  ApproverSelection = RepSpec.ArtMode;
  if ((ApproverSelection==kAcceptanceApproverSelectionManual) and (blank(OPr.AcceptanceBy))) then begin
    switch (err) begin  
      case 0:
        if (CountObjects(RepSpec.f12)==1) then begin
          RepSpec.f1 = RepSpec.f12;
        end;
        if (CountObjects(RepSpec.f11)==1) then begin
          RepSpec.f2 = RepSpec.f11;
        end;
        nwn = OpenWindow("SelectApproverWClass",0,wn,"","",RepSpec);
      otherwise
        MessageBox(err,"");
    end;
  end else begin
    switch (err) begin  
      case 0:
        PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
        CheckmarkBox(37501,"");
      otherwise
        MessageBox(err,"");
    end;
  end;
LOPSendforAcceptanceOPDsm:;  
  return;
end;

global
updating procedure OPSendforAcceptanceOPDsm()
begin
  OPSendforAcceptanceOPDsmExecute(CurWindow,"","");
  return;
end;

global
updating procedure OPCancelApprovalRequest(Integer wn)
begin
  record OPVc OPr;
  Integer ApprovalStatusFlag;
  LongInt err;

  GetWindowRecord(wn,OPr);
  err = CancelApprovalRequest("OPVc",OPr.SerNr,ApprovalStatusFlag);
  if (err!=0) then begin
    MessageBox(err,"");
    if (err!=37503) then begin
      goto LOPCancelApprovalRequest;
    end;
  end;
  PutWindowString(wn,"AcceptanceStatusFlag",StringFromSet(443,ApprovalStatusFlag));  
LOPCancelApprovalRequest:;
  return;
end;

global
procedure OPStatusDsm()
begin
  record RcVc RepSpec;
  record OPVc OPr;
  Integer wn;

  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  RepSpec.f1 = OPr.SerNr;
  RepSpec.repname = "OPStatusRn";
  RepSpec.Media   = mtScreen;    
  RunReport(RepSpec,0);
  return;
end;


global
procedure OpenWHCertificateOPDsm()
begin
  record WHCertificateVc WHCr;
  record OPVc OPr;
  Integer nwn,wn;
  
  wn = CurWindow;
  GetWindowRecord(wn,OPr);
  WHCr.OPNr = OPr.SerNr;
  if (ReadFirstKey("OPNr",WHCr,1,true)) then begin
    nwn = OpenWindow("WHCertificateDClass",1,0,"","",WHCr);
  end;
  return;
end;

global
updating procedure DownPayFromOPDsm()
begin
  Integer wn,nwn;
  Integer normalmode,rownr;
  record OPVc OPr;
  row OPVc OPrw;
  LongInt ivnr;
  record VIVc VIr;
  array record VIVc aVIr;
  string 255 errstr;

  normalmode = 0;
  wn = CurWindow;  
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    DeselectWindow(wn,true);
    GetWindowRecord(wn,OPr);
    if (OPr.DoneFlag!=0) then begin
      MakeDownPayFromOKedOPD(OPr,rownr,aVIr,errstr);
      if (aVIr.length==1) then begin
        RecordCopy(VIr,aVIr[0]);
        nwn = OpenWindow("VIDClass",1,0,"","",VIr);
      end;
      if (aVIr.length>1) then begin
        MessageBox(37500,"");
      end;
    end;
  end;
  return;
end;