external function Boolean PUVcRowEFActiveCheck(string,Integer,Integer,Integer);
external function Boolean PUVcEFActiveTest(Integer,Integer,record PUVc);

global
function Boolean  AllowCurChange(string curcode,Boolean base)
BEGIN
  record CurncyCodeVc ccr;
  Boolean res;
  
  res = true;
  if (nonblank(curcode)) then begin
    ccr.CurncyCode = curcode;
    if (ReadFirstMain(ccr,1,true)) then begin
      if (base) then begin
        if (ccr.NoChangeBase!=0) then begin res = false; end;
      end else begin
        if (ccr.NoChangeForeign!=0) then begin res  = false; end;
      end;
    end;
  end;
  AllowCurChange = res;
  RETURN;
END;

global
function Boolean PUVcEFActiveCheck(string fieldname,Integer wn,Integer wnst)
BEGIN
  Boolean res;
  record PUVc PUr;
  record PUVc oldPUr;

  res = true;
  switch (wnst) begin
    case Rs_insert:
    otherwise
      GetPrevWindowRecord(wn,oldPUr);
      if (oldPUr.OKFlag!=0) then begin
        res = false;
      end;  
  end;
  GetWindowRecord(wn,PUr);
  switch (fieldname) begin
    case "Comment": 
      res = true;
    case "FrRate": 
      if (PUr.OKFlag!=0) then begin
        res = false;
      end else begin
        if (AllowCurChange(PUr.CurncyCode,false)==false) then begin res = false; end;
      end;
    case "ToRateB1": 
      if (PUr.OKFlag!=0) then begin
        res = false;
      end else begin
        if (AllowCurChange(PUr.CurncyCode,false)==false) then begin res = false; end;
      end;
    case "ToRateB2": 
      if (PUr.OKFlag!=0) then begin
        res = false;
      end else begin
        if (AllowCurChange(PUr.CurncyCode,false)==false) then begin res = false; end;
      end;
    case "BaseRate1": 
      if (PUr.OKFlag!=0) then begin
        res = false;
      end else begin
        if (AllowCurChange(PUr.CurncyCode,true)==false) then begin res = false; end;
      end;
    case "BaseRate2": 
      if (PUr.OKFlag!=0) then begin
        res = false;
      end else begin
        if (AllowCurChange(PUr.CurncyCode,true)==false) then begin res = false; end;
      end;
    case "ShipCost": 
      if (wnst==Rs_update) then begin
        if (PUr.OKFlag!=0) then begin
          res = PUVcEFActiveTest(wn,-1,PUr);
        end;  
      end;  
      if (res) then begin
        res = UserCanAction("ChangingCostOnPU",true);
      end;
    case "CustomsCost": 
      if (wnst==Rs_update) then begin
        if (PUr.OKFlag!=0) then begin
          res = PUVcEFActiveTest(wn,-1,PUr);
        end;  
      end; 
      if (res) then begin
        res = UserCanAction("ChangingCostOnPU",true);
      end;
    case "PUCost1": res = UserCanAction("ChangingCostOnPU",true);
    case "PUCost2": res = UserCanAction("ChangingCostOnPU",true);
    case "PUCost3": res = UserCanAction("ChangingCostOnPU",true);
    case "PUCost4": res = UserCanAction("ChangingCostOnPU",true);
    case "PUCost5": res = UserCanAction("ChangingCostOnPU",true);
    case "LangCode": res = true;
    case "VECode":
      if (PUr.PONr>0) then begin res = false; end;
  end;
  PUVcEFActiveCheck = res;
  RETURN;
END;

global
function Boolean PUDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  Integer nwn;
  
  nwn = FindWindow("SelectApproverWClass");
  if (nwn>0) then begin
    if (MotherWindow(nwn)==wn) then begin
      res = false;
      goto LPUDClassActiveEditField;
    end;
  end;
  if (rownr==-1) then begin
    res = PUVcEFActiveCheck(fieldname,wn,wnst);
  end else begin
    res = PUVcRowEFActiveCheck(fieldname,wn,wnst,rownr);
  end;
LPUDClassActiveEditField:;
  PUDClassActiveEditField = res;
  RETURN;
END;


